
CANOpen_Class.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00014160  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00014160  00014160  00024160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000093c  20000000  00014168  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0003093c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0003093c  2**0
                  CONTENTS
  5 .bss          00001394  2000093c  00014aa4  0003093c  2**2
                  ALLOC
  6 .stack        00010000  20001cd0  00015e38  0003093c  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0003093c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0003096a  2**0
                  CONTENTS, READONLY
  9 .debug_info   0006ba73  00000000  00000000  000309c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000089a8  00000000  00000000  0009c436  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00018c46  00000000  00000000  000a4dde  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002c78  00000000  00000000  000bda24  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002968  00000000  00000000  000c069c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00049a57  00000000  00000000  000c3004  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0003741c  00000000  00000000  0010ca5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00135c42  00000000  00000000  00143e77  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000bad4  00000000  00000000  00279abc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
{0x6401, 0x0C, 0xB6,  2, (void*)&CO_OD_RAM.readAnalogueInput16Bit[0]},
{0x6411, 0x08, 0xBE,  2, (void*)&CO_OD_RAM.writeAnalogueOutput16Bit[0]},
};

// default constructor
CO_OD_Class::CO_OD_Class()
       0:	d0 1c 01 20 65 68 00 00 e9 68 00 00 e9 68 00 00     ... eh...h...h..
{
} //CO_OD
      10:	e9 68 00 00 e9 68 00 00 e9 68 00 00 00 00 00 00     .h...h...h......
	...
      2c:	e9 68 00 00 e9 68 00 00 00 00 00 00 e9 68 00 00     .h...h.......h..
      3c:	e9 68 00 00 e9 68 00 00 e9 68 00 00 e9 68 00 00     .h...h...h...h..
      4c:	e9 68 00 00 e9 68 00 00 e9 68 00 00 e9 68 00 00     .h...h...h...h..
      5c:	e9 68 00 00 e9 68 00 00 e9 68 00 00 e9 68 00 00     .h...h...h...h..
      6c:	b5 bd 00 00 e9 68 00 00 e9 68 00 00 e9 68 00 00     .....h...h...h..
      7c:	e9 68 00 00 5d ac 00 00 6d ac 00 00 7d ac 00 00     .h..]...m...}...
      8c:	8d ac 00 00 e9 68 00 00 e9 68 00 00 e9 68 00 00     .....h...h...h..
      9c:	e9 68 00 00 e9 68 00 00 e9 68 00 00 e9 68 00 00     .h...h...h...h..
      ac:	e9 68 00 00 e9 68 00 00 e9 68 00 00 e9 68 00 00     .h...h...h...h..
      bc:	e9 68 00 00 e9 68 00 00 e9 68 00 00 e9 68 00 00     .h...h...h...h..
      cc:	e9 68 00 00 e9 68 00 00 e9 68 00 00 e9 68 00 00     .h...h...h...h..
      dc:	e9 68 00 00 e9 68 00 00 e9 68 00 00 00 00 00 00     .h...h...h......
	...
      f4:	e9 68 00 00 e9 68 00 00 e9 68 00 00 e9 68 00 00     .h...h...h...h..
     104:	e9 68 00 00 e9 68 00 00 e9 68 00 00 e9 68 00 00     .h...h...h...h..
     114:	e9 68 00 00 e9 68 00 00 e9 68 00 00 e9 68 00 00     .h...h...h...h..
     124:	e9 68 00 00 e9 68 00 00 e9 68 00 00 e9 68 00 00     .h...h...h...h..
     134:	e9 68 00 00 b1 cf 00 00 cd cf 00 00 e9 cf 00 00     .h..............
     144:	05 d0 00 00 21 d0 00 00 3d d0 00 00 59 d0 00 00     ....!...=...Y...
     154:	75 d0 00 00 e9 68 00 00 e9 68 00 00 e9 68 00 00     u....h...h...h..
     164:	e9 68 00 00 91 d0 00 00 ad d0 00 00 c9 d0 00 00     .h..............
     174:	e5 d0 00 00 e9 68 00 00 39 a2 00 00 95 08 01 00     .....h..9.......
     184:	a5 08 01 00 b5 08 01 00 c5 08 01 00 e9 68 00 00     .............h..
     194:	e9 68 00 00 e9 68 00 00 e9 68 00 00 e9 68 00 00     .h...h...h...h..
     1a4:	e9 68 00 00 e9 68 00 00 e9 68 00 00 e9 68 00 00     .h...h...h...h..
     1b4:	e9 68 00 00 e9 68 00 00 e9 68 00 00 e9 68 00 00     .h...h...h...h..
     1c4:	e9 68 00 00 e9 68 00 00 e9 68 00 00 e9 68 00 00     .h...h...h...h..
     1d4:	e9 68 00 00 e9 68 00 00 e9 68 00 00 e9 68 00 00     .h...h...h...h..
     1e4:	e9 68 00 00 e9 68 00 00 19 e0 00 00 35 e0 00 00     .h...h......5...
     1f4:	51 e0 00 00 6d e0 00 00 e9 68 00 00 e9 68 00 00     Q...m....h...h..
     204:	e9 68 00 00 89 e0 00 00 e9 68 00 00 e9 68 00 00     .h.......h...h..
     214:	e9 68 00 00 e9 68 00 00 e9 68 00 00 e9 68 00 00     .h...h...h...h..
     224:	e9 68 00 00 e9 68 00 00 e9 68 00 00 e9 68 00 00     .h...h...h...h..
     234:	e9 68 00 00 e9 68 00 00 e9 68 00 00 e9 68 00 00     .h...h...h...h..
     244:	e9 68 00 00 e9 68 00 00 e9 68 00 00 e9 68 00 00     .h...h...h...h..
     254:	e9 68 00 00 e9 68 00 00 e9 68 00 00 e9 68 00 00     .h...h...h...h..

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	2000093c 	.word	0x2000093c
     280:	00000000 	.word	0x00000000
     284:	00014168 	.word	0x00014168

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00014168 	.word	0x00014168
     2c4:	20000940 	.word	0x20000940
     2c8:	00014168 	.word	0x00014168
     2cc:	00000000 	.word	0x00000000

000002d0 <_ZN13CANOpen_ClassC1EP20can_async_descriptor>:
CANOpen_Class::CANOpen_Class()
{
	ptrCANOpenClass=this;
} //CANOpen_Class

CANOpen_Class::CANOpen_Class(can_async_descriptor  *descr)
     2d0:	b580      	push	{r7, lr}
     2d2:	b082      	sub	sp, #8
     2d4:	af00      	add	r7, sp, #0
     2d6:	6078      	str	r0, [r7, #4]
     2d8:	6039      	str	r1, [r7, #0]
     2da:	687b      	ldr	r3, [r7, #4]
     2dc:	4618      	mov	r0, r3
     2de:	4b0b      	ldr	r3, [pc, #44]	; (30c <_ZN13CANOpen_ClassC1EP20can_async_descriptor+0x3c>)
     2e0:	4798      	blx	r3
     2e2:	4a0b      	ldr	r2, [pc, #44]	; (310 <_ZN13CANOpen_ClassC1EP20can_async_descriptor+0x40>)
     2e4:	687b      	ldr	r3, [r7, #4]
     2e6:	601a      	str	r2, [r3, #0]
     2e8:	687b      	ldr	r3, [r7, #4]
     2ea:	f603 2338 	addw	r3, r3, #2616	; 0xa38
     2ee:	4618      	mov	r0, r3
     2f0:	4b08      	ldr	r3, [pc, #32]	; (314 <_ZN13CANOpen_ClassC1EP20can_async_descriptor+0x44>)
     2f2:	4798      	blx	r3
{
	ptrCANOpenClass=this;
     2f4:	4a08      	ldr	r2, [pc, #32]	; (318 <_ZN13CANOpen_ClassC1EP20can_async_descriptor+0x48>)
     2f6:	687b      	ldr	r3, [r7, #4]
     2f8:	6013      	str	r3, [r2, #0]
	canDescr=descr;
     2fa:	687b      	ldr	r3, [r7, #4]
     2fc:	683a      	ldr	r2, [r7, #0]
     2fe:	f8c3 2a34 	str.w	r2, [r3, #2612]	; 0xa34
} //CANOpen_Class
     302:	687b      	ldr	r3, [r7, #4]
     304:	4618      	mov	r0, r3
     306:	3708      	adds	r7, #8
     308:	46bd      	mov	sp, r7
     30a:	bd80      	pop	{r7, pc}
     30c:	000004c5 	.word	0x000004c5
     310:	000130ac 	.word	0x000130ac
     314:	00000491 	.word	0x00000491
     318:	20000958 	.word	0x20000958

0000031c <_ZN13CANOpen_ClassD1Ev>:

// default destructor
CANOpen_Class::~CANOpen_Class()
     31c:	b580      	push	{r7, lr}
     31e:	b082      	sub	sp, #8
     320:	af00      	add	r7, sp, #0
     322:	6078      	str	r0, [r7, #4]
     324:	4a08      	ldr	r2, [pc, #32]	; (348 <_ZN13CANOpen_ClassD1Ev+0x2c>)
     326:	687b      	ldr	r3, [r7, #4]
     328:	601a      	str	r2, [r3, #0]
     32a:	687b      	ldr	r3, [r7, #4]
     32c:	f603 2338 	addw	r3, r3, #2616	; 0xa38
     330:	4618      	mov	r0, r3
     332:	4b06      	ldr	r3, [pc, #24]	; (34c <_ZN13CANOpen_ClassD1Ev+0x30>)
     334:	4798      	blx	r3
     336:	687b      	ldr	r3, [r7, #4]
     338:	4618      	mov	r0, r3
     33a:	4b05      	ldr	r3, [pc, #20]	; (350 <_ZN13CANOpen_ClassD1Ev+0x34>)
     33c:	4798      	blx	r3
{
} //~CANOpen_Class
     33e:	687b      	ldr	r3, [r7, #4]
     340:	4618      	mov	r0, r3
     342:	3708      	adds	r7, #8
     344:	46bd      	mov	sp, r7
     346:	bd80      	pop	{r7, pc}
     348:	000130ac 	.word	0x000130ac
     34c:	000004b1 	.word	0x000004b1
     350:	00000505 	.word	0x00000505

00000354 <_ZN13CANOpen_Class4InitEh>:

int	CANOpen_Class::Init(uint8_t node){
     354:	b590      	push	{r4, r7, lr}
     356:	b083      	sub	sp, #12
     358:	af00      	add	r7, sp, #0
     35a:	6078      	str	r0, [r7, #4]
     35c:	460b      	mov	r3, r1
     35e:	70fb      	strb	r3, [r7, #3]
	//can.SetDescriptor(canDescr);
	err=CO_init(canDescr,node,1000);
     360:	6878      	ldr	r0, [r7, #4]
     362:	687b      	ldr	r3, [r7, #4]
     364:	f8d3 1a34 	ldr.w	r1, [r3, #2612]	; 0xa34
     368:	78fa      	ldrb	r2, [r7, #3]
     36a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     36e:	4c0c      	ldr	r4, [pc, #48]	; (3a0 <_ZN13CANOpen_Class4InitEh+0x4c>)
     370:	47a0      	blx	r4
     372:	4603      	mov	r3, r0
     374:	461a      	mov	r2, r3
     376:	687b      	ldr	r3, [r7, #4]
     378:	f883 2b45 	strb.w	r2, [r3, #2885]	; 0xb45

	if (err==0)
     37c:	687b      	ldr	r3, [r7, #4]
     37e:	f993 3b45 	ldrsb.w	r3, [r3, #2885]	; 0xb45
     382:	2b00      	cmp	r3, #0
     384:	d104      	bne.n	390 <_ZN13CANOpen_Class4InitEh+0x3c>
	{
		return SetInitialMode();
     386:	6878      	ldr	r0, [r7, #4]
     388:	4b06      	ldr	r3, [pc, #24]	; (3a4 <_ZN13CANOpen_Class4InitEh+0x50>)
     38a:	4798      	blx	r3
     38c:	4603      	mov	r3, r0
     38e:	e002      	b.n	396 <_ZN13CANOpen_Class4InitEh+0x42>
	}else{
		return	(int)err;
     390:	687b      	ldr	r3, [r7, #4]
     392:	f993 3b45 	ldrsb.w	r3, [r3, #2885]	; 0xb45
	}
	return	(int)err;
}
     396:	4618      	mov	r0, r3
     398:	370c      	adds	r7, #12
     39a:	46bd      	mov	sp, r7
     39c:	bd90      	pop	{r4, r7, pc}
     39e:	bf00      	nop
     3a0:	0000060d 	.word	0x0000060d
     3a4:	000003a9 	.word	0x000003a9

000003a8 <_ZN13CANOpen_Class14SetInitialModeEv>:

int	CANOpen_Class::SetInitialMode(void){
     3a8:	b580      	push	{r7, lr}
     3aa:	b082      	sub	sp, #8
     3ac:	af00      	add	r7, sp, #0
     3ae:	6078      	str	r0, [r7, #4]
	/* CAN module address, NodeID, Bitrate */
	/* We do not use CAN registers directly, so address here is a pointer to the CAN_HandleTypeDef object. */
	
	
	/* start CAN */
	err=CO_CANsetNormalMode();
     3b0:	687b      	ldr	r3, [r7, #4]
     3b2:	4618      	mov	r0, r3
     3b4:	4b08      	ldr	r3, [pc, #32]	; (3d8 <_ZN13CANOpen_Class14SetInitialModeEv+0x30>)
     3b6:	4798      	blx	r3
     3b8:	4603      	mov	r3, r0
     3ba:	461a      	mov	r2, r3
     3bc:	687b      	ldr	r3, [r7, #4]
     3be:	f883 2b45 	strb.w	r2, [r3, #2885]	; 0xb45
	//err=CO_CANsetNormalMode(CO->CANmodule[0]);

	reset = CO_RESET_NOT;
     3c2:	687b      	ldr	r3, [r7, #4]
     3c4:	2200      	movs	r2, #0
     3c6:	f883 2b44 	strb.w	r2, [r3, #2884]	; 0xb44
	return	(int)err;
     3ca:	687b      	ldr	r3, [r7, #4]
     3cc:	f993 3b45 	ldrsb.w	r3, [r3, #2885]	; 0xb45
}
     3d0:	4618      	mov	r0, r3
     3d2:	3708      	adds	r7, #8
     3d4:	46bd      	mov	sp, r7
     3d6:	bd80      	pop	{r7, pc}
     3d8:	000012b9 	.word	0x000012b9

000003dc <_ZN13CANOpen_Class16Periodic_ProcessEm>:

int	CANOpen_Class::Periodic_Process(uint32_t timeDifference){
     3dc:	b580      	push	{r7, lr}
     3de:	b082      	sub	sp, #8
     3e0:	af00      	add	r7, sp, #0
     3e2:	6078      	str	r0, [r7, #4]
     3e4:	6039      	str	r1, [r7, #0]
	if (CO->CANmodule[0]->CANnormal)
     3e6:	687b      	ldr	r3, [r7, #4]
     3e8:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
     3ec:	681b      	ldr	r3, [r3, #0]
     3ee:	7d1b      	ldrb	r3, [r3, #20]
     3f0:	b2db      	uxtb	r3, r3
     3f2:	2b00      	cmp	r3, #0
     3f4:	bf14      	ite	ne
     3f6:	2301      	movne	r3, #1
     3f8:	2300      	moveq	r3, #0
     3fa:	b2db      	uxtb	r3, r3
     3fc:	2b00      	cmp	r3, #0
     3fe:	d015      	beq.n	42c <_ZN13CANOpen_Class16Periodic_ProcessEm+0x50>
	{
		syncWas=CO_process_SYNC_RPDO(timeDifference);
     400:	687b      	ldr	r3, [r7, #4]
     402:	6839      	ldr	r1, [r7, #0]
     404:	4618      	mov	r0, r3
     406:	4b0d      	ldr	r3, [pc, #52]	; (43c <_ZN13CANOpen_Class16Periodic_ProcessEm+0x60>)
     408:	4798      	blx	r3
     40a:	4603      	mov	r3, r0
     40c:	461a      	mov	r2, r3
     40e:	687b      	ldr	r3, [r7, #4]
     410:	f883 2b46 	strb.w	r2, [r3, #2886]	; 0xb46
		CO_process_TPDO(syncWas,timeDifference);
     414:	6878      	ldr	r0, [r7, #4]
     416:	687b      	ldr	r3, [r7, #4]
     418:	f893 3b46 	ldrb.w	r3, [r3, #2886]	; 0xb46
     41c:	683a      	ldr	r2, [r7, #0]
     41e:	4619      	mov	r1, r3
     420:	4b07      	ldr	r3, [pc, #28]	; (440 <_ZN13CANOpen_Class16Periodic_ProcessEm+0x64>)
     422:	4798      	blx	r3
		CAN_Polling_Tx();
     424:	687b      	ldr	r3, [r7, #4]
     426:	4618      	mov	r0, r3
     428:	4b06      	ldr	r3, [pc, #24]	; (444 <_ZN13CANOpen_Class16Periodic_ProcessEm+0x68>)
     42a:	4798      	blx	r3
	}
	
	return	int(syncWas);
     42c:	687b      	ldr	r3, [r7, #4]
     42e:	f893 3b46 	ldrb.w	r3, [r3, #2886]	; 0xb46
}
     432:	4618      	mov	r0, r3
     434:	3708      	adds	r7, #8
     436:	46bd      	mov	sp, r7
     438:	bd80      	pop	{r7, pc}
     43a:	bf00      	nop
     43c:	00000f15 	.word	0x00000f15
     440:	00000f99 	.word	0x00000f99
     444:	00001ac9 	.word	0x00001ac9

00000448 <_ZN13CANOpen_Class15StartNMTServiceEv>:

bool	CANOpen_Class::StartNMTService(void){
     448:	b580      	push	{r7, lr}
     44a:	b084      	sub	sp, #16
     44c:	af00      	add	r7, sp, #0
     44e:	6078      	str	r0, [r7, #4]
	uint8_t	res=0;
     450:	2300      	movs	r3, #0
     452:	73fb      	strb	r3, [r7, #15]
	bool r=false;
     454:	2300      	movs	r3, #0
     456:	73bb      	strb	r3, [r7, #14]
	while ((res==0)&&(!r))
     458:	7bfb      	ldrb	r3, [r7, #15]
     45a:	2b00      	cmp	r3, #0
     45c:	d10f      	bne.n	47e <_ZN13CANOpen_Class15StartNMTServiceEv+0x36>
     45e:	7bbb      	ldrb	r3, [r7, #14]
     460:	2b00      	cmp	r3, #0
     462:	d10c      	bne.n	47e <_ZN13CANOpen_Class15StartNMTServiceEv+0x36>
	{
		res=CO_sendNMTcommand(1,2);
     464:	687b      	ldr	r3, [r7, #4]
     466:	2202      	movs	r2, #2
     468:	2101      	movs	r1, #1
     46a:	4618      	mov	r0, r3
     46c:	4b06      	ldr	r3, [pc, #24]	; (488 <_ZN13CANOpen_Class15StartNMTServiceEv+0x40>)
     46e:	4798      	blx	r3
     470:	4603      	mov	r3, r0
     472:	73fb      	strb	r3, [r7, #15]
		r=ptrCODriverClass->receivedtxCOCallback;
     474:	4b05      	ldr	r3, [pc, #20]	; (48c <_ZN13CANOpen_Class15StartNMTServiceEv+0x44>)
     476:	681b      	ldr	r3, [r3, #0]
     478:	7f5b      	ldrb	r3, [r3, #29]
     47a:	73bb      	strb	r3, [r7, #14]
	while ((res==0)&&(!r))
     47c:	e7ec      	b.n	458 <_ZN13CANOpen_Class15StartNMTServiceEv+0x10>
	}
	return	r;
     47e:	7bbb      	ldrb	r3, [r7, #14]
}
     480:	4618      	mov	r0, r3
     482:	3710      	adds	r7, #16
     484:	46bd      	mov	sp, r7
     486:	bd80      	pop	{r7, pc}
     488:	0000052d 	.word	0x0000052d
     48c:	20000960 	.word	0x20000960

00000490 <_ZN14CAN_Asyn_ClassC1Ev>:
	ptrCANAsynClass->rxCallBack=true;
	return;
}

// default constructor
CAN_Asyn_Class::CAN_Asyn_Class()
     490:	b480      	push	{r7}
     492:	b083      	sub	sp, #12
     494:	af00      	add	r7, sp, #0
     496:	6078      	str	r0, [r7, #4]
{
	ptrCANAsynClass=this;
     498:	4a04      	ldr	r2, [pc, #16]	; (4ac <_ZN14CAN_Asyn_ClassC1Ev+0x1c>)
     49a:	687b      	ldr	r3, [r7, #4]
     49c:	6013      	str	r3, [r2, #0]
} //CAN_Asyn_Class
     49e:	687b      	ldr	r3, [r7, #4]
     4a0:	4618      	mov	r0, r3
     4a2:	370c      	adds	r7, #12
     4a4:	46bd      	mov	sp, r7
     4a6:	bc80      	pop	{r7}
     4a8:	4770      	bx	lr
     4aa:	bf00      	nop
     4ac:	2000095c 	.word	0x2000095c

000004b0 <_ZN14CAN_Asyn_ClassD1Ev>:
	canDescriptor=descr;
	ptrCANAsynClass=this;
} //CAN_Asyn_Class

// default destructor
CAN_Asyn_Class::~CAN_Asyn_Class()
     4b0:	b480      	push	{r7}
     4b2:	b083      	sub	sp, #12
     4b4:	af00      	add	r7, sp, #0
     4b6:	6078      	str	r0, [r7, #4]
{
} //~CAN_Asyn_Class
     4b8:	687b      	ldr	r3, [r7, #4]
     4ba:	4618      	mov	r0, r3
     4bc:	370c      	adds	r7, #12
     4be:	46bd      	mov	sp, r7
     4c0:	bc80      	pop	{r7}
     4c2:	4770      	bx	lr

000004c4 <_ZN8CO_ClassC1Ev>:




// default constructor
CO_Class::CO_Class()
     4c4:	b580      	push	{r7, lr}
     4c6:	b082      	sub	sp, #8
     4c8:	af00      	add	r7, sp, #0
     4ca:	6078      	str	r0, [r7, #4]
     4cc:	687b      	ldr	r3, [r7, #4]
     4ce:	4618      	mov	r0, r3
     4d0:	4b0a      	ldr	r3, [pc, #40]	; (4fc <_ZN8CO_ClassC1Ev+0x38>)
     4d2:	4798      	blx	r3
     4d4:	4a0a      	ldr	r2, [pc, #40]	; (500 <_ZN8CO_ClassC1Ev+0x3c>)
     4d6:	687b      	ldr	r3, [r7, #4]
     4d8:	601a      	str	r2, [r3, #0]
{
	CO = NULL;
     4da:	687b      	ldr	r3, [r7, #4]
     4dc:	2200      	movs	r2, #0
     4de:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	coCanDescr=NULL;
     4e2:	687b      	ldr	r3, [r7, #4]
     4e4:	2200      	movs	r2, #0
     4e6:	f8c3 2a18 	str.w	r2, [r3, #2584]	; 0xa18
	CO_memoryUsed=0;
     4ea:	687b      	ldr	r3, [r7, #4]
     4ec:	2200      	movs	r2, #0
     4ee:	f8c3 29d8 	str.w	r2, [r3, #2520]	; 0x9d8
} //CO_Class
     4f2:	687b      	ldr	r3, [r7, #4]
     4f4:	4618      	mov	r0, r3
     4f6:	3708      	adds	r7, #8
     4f8:	46bd      	mov	sp, r7
     4fa:	bd80      	pop	{r7, pc}
     4fc:	0000115d 	.word	0x0000115d
     500:	000130b8 	.word	0x000130b8

00000504 <_ZN8CO_ClassD1Ev>:

// default destructor
CO_Class::~CO_Class()
     504:	b580      	push	{r7, lr}
     506:	b082      	sub	sp, #8
     508:	af00      	add	r7, sp, #0
     50a:	6078      	str	r0, [r7, #4]
     50c:	4a05      	ldr	r2, [pc, #20]	; (524 <_ZN8CO_ClassD1Ev+0x20>)
     50e:	687b      	ldr	r3, [r7, #4]
     510:	601a      	str	r2, [r3, #0]
     512:	687b      	ldr	r3, [r7, #4]
     514:	4618      	mov	r0, r3
     516:	4b04      	ldr	r3, [pc, #16]	; (528 <_ZN8CO_ClassD1Ev+0x24>)
     518:	4798      	blx	r3
{
} //~CO_Class
     51a:	687b      	ldr	r3, [r7, #4]
     51c:	4618      	mov	r0, r3
     51e:	3708      	adds	r7, #8
     520:	46bd      	mov	sp, r7
     522:	bd80      	pop	{r7, pc}
     524:	000130b8 	.word	0x000130b8
     528:	000011c9 	.word	0x000011c9

0000052c <_ZN8CO_Class17CO_sendNMTcommandEhh>:

#if CO_NO_NMT_MASTER == 1


uint8_t CO_Class::CO_sendNMTcommand( uint8_t command, uint8_t nodeID){
     52c:	b580      	push	{r7, lr}
     52e:	b082      	sub	sp, #8
     530:	af00      	add	r7, sp, #0
     532:	6078      	str	r0, [r7, #4]
     534:	460b      	mov	r3, r1
     536:	70fb      	strb	r3, [r7, #3]
     538:	4613      	mov	r3, r2
     53a:	70bb      	strb	r3, [r7, #2]
	if(NMTM_txBuff == 0){
     53c:	687b      	ldr	r3, [r7, #4]
     53e:	f8d3 3a2c 	ldr.w	r3, [r3, #2604]	; 0xa2c
     542:	2b00      	cmp	r3, #0
     544:	d101      	bne.n	54a <_ZN8CO_Class17CO_sendNMTcommandEhh+0x1e>
		/* error, CO_CANtxBufferInit() was not called for this buffer. */
		return CO_ERROR_TX_UNCONFIGURED; /* -11 */
     546:	23f5      	movs	r3, #245	; 0xf5
     548:	e05a      	b.n	600 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd4>
	}
	NMTM_txBuff->data[0] = command;
     54a:	687b      	ldr	r3, [r7, #4]
     54c:	f8d3 3a2c 	ldr.w	r3, [r3, #2604]	; 0xa2c
     550:	78fa      	ldrb	r2, [r7, #3]
     552:	715a      	strb	r2, [r3, #5]
	NMTM_txBuff->data[1] = nodeID;
     554:	687b      	ldr	r3, [r7, #4]
     556:	f8d3 3a2c 	ldr.w	r3, [r3, #2604]	; 0xa2c
     55a:	78ba      	ldrb	r2, [r7, #2]
     55c:	719a      	strb	r2, [r3, #6]

	/* Apply NMT command also to this node, if set so. */
	if(nodeID == 0 || nodeID == CO->NMT->nodeId){
     55e:	78bb      	ldrb	r3, [r7, #2]
     560:	2b00      	cmp	r3, #0
     562:	d007      	beq.n	574 <_ZN8CO_Class17CO_sendNMTcommandEhh+0x48>
     564:	687b      	ldr	r3, [r7, #4]
     566:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
     56a:	691b      	ldr	r3, [r3, #16]
     56c:	7a9b      	ldrb	r3, [r3, #10]
     56e:	78ba      	ldrb	r2, [r7, #2]
     570:	429a      	cmp	r2, r3
     572:	d13b      	bne.n	5ec <_ZN8CO_Class17CO_sendNMTcommandEhh+0xc0>
		switch(command){
     574:	78fb      	ldrb	r3, [r7, #3]
     576:	2b80      	cmp	r3, #128	; 0x80
     578:	d022      	beq.n	5c0 <_ZN8CO_Class17CO_sendNMTcommandEhh+0x94>
     57a:	2b80      	cmp	r3, #128	; 0x80
     57c:	dc04      	bgt.n	588 <_ZN8CO_Class17CO_sendNMTcommandEhh+0x5c>
     57e:	2b01      	cmp	r3, #1
     580:	d007      	beq.n	592 <_ZN8CO_Class17CO_sendNMTcommandEhh+0x66>
     582:	2b02      	cmp	r3, #2
     584:	d015      	beq.n	5b2 <_ZN8CO_Class17CO_sendNMTcommandEhh+0x86>
     586:	e031      	b.n	5ec <_ZN8CO_Class17CO_sendNMTcommandEhh+0xc0>
     588:	2b81      	cmp	r3, #129	; 0x81
     58a:	d020      	beq.n	5ce <_ZN8CO_Class17CO_sendNMTcommandEhh+0xa2>
     58c:	2b82      	cmp	r3, #130	; 0x82
     58e:	d025      	beq.n	5dc <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb0>
     590:	e02c      	b.n	5ec <_ZN8CO_Class17CO_sendNMTcommandEhh+0xc0>
			case CO_NMT_ENTER_OPERATIONAL:
			if((*CO->NMT->emPr->errorRegister) == 0) {
     592:	687b      	ldr	r3, [r7, #4]
     594:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
     598:	691b      	ldr	r3, [r3, #16]
     59a:	695b      	ldr	r3, [r3, #20]
     59c:	681b      	ldr	r3, [r3, #0]
     59e:	781b      	ldrb	r3, [r3, #0]
     5a0:	2b00      	cmp	r3, #0
     5a2:	d122      	bne.n	5ea <_ZN8CO_Class17CO_sendNMTcommandEhh+0xbe>
				CO->NMT->operatingState = CO_NMT_OPERATIONAL;
     5a4:	687b      	ldr	r3, [r7, #4]
     5a6:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
     5aa:	691b      	ldr	r3, [r3, #16]
     5ac:	2205      	movs	r2, #5
     5ae:	701a      	strb	r2, [r3, #0]
			}
			break;
     5b0:	e01b      	b.n	5ea <_ZN8CO_Class17CO_sendNMTcommandEhh+0xbe>
			case CO_NMT_ENTER_STOPPED:
			CO->NMT->operatingState = CO_NMT_STOPPED;
     5b2:	687b      	ldr	r3, [r7, #4]
     5b4:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
     5b8:	691b      	ldr	r3, [r3, #16]
     5ba:	2204      	movs	r2, #4
     5bc:	701a      	strb	r2, [r3, #0]
			break;
     5be:	e015      	b.n	5ec <_ZN8CO_Class17CO_sendNMTcommandEhh+0xc0>
			case CO_NMT_ENTER_PRE_OPERATIONAL:
			CO->NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
     5c0:	687b      	ldr	r3, [r7, #4]
     5c2:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
     5c6:	691b      	ldr	r3, [r3, #16]
     5c8:	227f      	movs	r2, #127	; 0x7f
     5ca:	701a      	strb	r2, [r3, #0]
			break;
     5cc:	e00e      	b.n	5ec <_ZN8CO_Class17CO_sendNMTcommandEhh+0xc0>
			case CO_NMT_RESET_NODE:
			CO->NMT->resetCommand = CO_RESET_APP;
     5ce:	687b      	ldr	r3, [r7, #4]
     5d0:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
     5d4:	691b      	ldr	r3, [r3, #16]
     5d6:	2202      	movs	r2, #2
     5d8:	725a      	strb	r2, [r3, #9]
			break;
     5da:	e007      	b.n	5ec <_ZN8CO_Class17CO_sendNMTcommandEhh+0xc0>
			case CO_NMT_RESET_COMMUNICATION:
			CO->NMT->resetCommand = CO_RESET_COMM;
     5dc:	687b      	ldr	r3, [r7, #4]
     5de:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
     5e2:	691b      	ldr	r3, [r3, #16]
     5e4:	2201      	movs	r2, #1
     5e6:	725a      	strb	r2, [r3, #9]
			break;
     5e8:	e000      	b.n	5ec <_ZN8CO_Class17CO_sendNMTcommandEhh+0xc0>
			break;
     5ea:	bf00      	nop
		}
	}

	return CAN_Send( NMTM_txBuff); /* 0 = success */
     5ec:	687a      	ldr	r2, [r7, #4]
     5ee:	687b      	ldr	r3, [r7, #4]
     5f0:	f8d3 3a2c 	ldr.w	r3, [r3, #2604]	; 0xa2c
     5f4:	4619      	mov	r1, r3
     5f6:	4610      	mov	r0, r2
     5f8:	4b03      	ldr	r3, [pc, #12]	; (608 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xdc>)
     5fa:	4798      	blx	r3
     5fc:	4603      	mov	r3, r0
     5fe:	b2db      	uxtb	r3, r3
}
     600:	4618      	mov	r0, r3
     602:	3708      	adds	r7, #8
     604:	46bd      	mov	sp, r7
     606:	bd80      	pop	{r7, pc}
     608:	00001621 	.word	0x00001621

0000060c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm>:
/******************************************************************************/
CO_ReturnError_t CO_Class::CO_init(
can_async_descriptor   *CANbaseAddress,
uint8_t                 nodeId,
uint32_t                bitRate)
{
     60c:	b5f0      	push	{r4, r5, r6, r7, lr}
     60e:	b099      	sub	sp, #100	; 0x64
     610:	af0c      	add	r7, sp, #48	; 0x30
     612:	61f8      	str	r0, [r7, #28]
     614:	61b9      	str	r1, [r7, #24]
     616:	613b      	str	r3, [r7, #16]
     618:	4613      	mov	r3, r2
     61a:	75fb      	strb	r3, [r7, #23]
	coCanDescr=CANbaseAddress;
     61c:	69fb      	ldr	r3, [r7, #28]
     61e:	69ba      	ldr	r2, [r7, #24]
     620:	f8c3 2a18 	str.w	r2, [r3, #2584]	; 0xa18
	#endif


	/* Initialize CANopen object */
	#ifdef CO_USE_GLOBALS
		CO = &COO;
     624:	69fb      	ldr	r3, [r7, #28]
     626:	f603 12dc 	addw	r2, r3, #2524	; 0x9dc
     62a:	69fb      	ldr	r3, [r7, #28]
     62c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124

		CO->CANmodule[0]                    = &COO_CANmodule;
     630:	69fb      	ldr	r3, [r7, #28]
     632:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
     636:	69fa      	ldr	r2, [r7, #28]
     638:	f502 729c 	add.w	r2, r2, #312	; 0x138
     63c:	601a      	str	r2, [r3, #0]
		CO_CANmodule_rxArray0               = &COO_CANmodule_rxArray0[0];
     63e:	69fb      	ldr	r3, [r7, #28]
     640:	f503 72ae 	add.w	r2, r3, #348	; 0x15c
     644:	69fb      	ldr	r3, [r7, #28]
     646:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
		CO_CANmodule_txArray0               = &COO_CANmodule_txArray0[0];
     64a:	69fb      	ldr	r3, [r7, #28]
     64c:	f503 7203 	add.w	r2, r3, #524	; 0x20c
     650:	69fb      	ldr	r3, [r7, #28]
     652:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
		for(i=0; i<CO_NO_SDO_SERVER; i++){
     656:	69fb      	ldr	r3, [r7, #28]
     658:	2200      	movs	r2, #0
     65a:	f8c3 2a24 	str.w	r2, [r3, #2596]	; 0xa24
     65e:	69fb      	ldr	r3, [r7, #28]
     660:	f8d3 3a24 	ldr.w	r3, [r3, #2596]	; 0xa24
     664:	2b00      	cmp	r3, #0
     666:	d11c      	bne.n	6a2 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x96>
			CO->SDO[i]                      = &COO_SDO[i];
     668:	69fb      	ldr	r3, [r7, #28]
     66a:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
     66e:	69fb      	ldr	r3, [r7, #28]
     670:	f8d3 0a24 	ldr.w	r0, [r3, #2596]	; 0xa24
     674:	69fb      	ldr	r3, [r7, #28]
     676:	f8d3 2a24 	ldr.w	r2, [r3, #2596]	; 0xa24
     67a:	4613      	mov	r3, r2
     67c:	011b      	lsls	r3, r3, #4
     67e:	4413      	add	r3, r2
     680:	00db      	lsls	r3, r3, #3
     682:	f503 7326 	add.w	r3, r3, #664	; 0x298
     686:	69fa      	ldr	r2, [r7, #28]
     688:	4413      	add	r3, r2
     68a:	1d1a      	adds	r2, r3, #4
     68c:	0083      	lsls	r3, r0, #2
     68e:	440b      	add	r3, r1
     690:	605a      	str	r2, [r3, #4]
		for(i=0; i<CO_NO_SDO_SERVER; i++){
     692:	69fb      	ldr	r3, [r7, #28]
     694:	f8d3 3a24 	ldr.w	r3, [r3, #2596]	; 0xa24
     698:	1c5a      	adds	r2, r3, #1
     69a:	69fb      	ldr	r3, [r7, #28]
     69c:	f8c3 2a24 	str.w	r2, [r3, #2596]	; 0xa24
     6a0:	e7dd      	b.n	65e <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x52>
		}

		CO_SDO_ODExtensions                 = &COO_SDO_ODExtensions[0];
     6a2:	69fb      	ldr	r3, [r7, #28]
     6a4:	f503 7249 	add.w	r2, r3, #804	; 0x324
     6a8:	69fb      	ldr	r3, [r7, #28]
     6aa:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
		CO->em                              = &COO_EM;
     6ae:	69fb      	ldr	r3, [r7, #28]
     6b0:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
     6b4:	69fa      	ldr	r2, [r7, #28]
     6b6:	f502 62b7 	add.w	r2, r2, #1464	; 0x5b8
     6ba:	609a      	str	r2, [r3, #8]
		CO->emPr                            = &COO_EMpr;
     6bc:	69fb      	ldr	r3, [r7, #28]
     6be:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
     6c2:	69fa      	ldr	r2, [r7, #28]
     6c4:	f202 6224 	addw	r2, r2, #1572	; 0x624
     6c8:	60da      	str	r2, [r3, #12]
		CO->NMT                             = &COO_NMT;
     6ca:	69fb      	ldr	r3, [r7, #28]
     6cc:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
     6d0:	69fa      	ldr	r2, [r7, #28]
     6d2:	f502 62c8 	add.w	r2, r2, #1600	; 0x640
     6d6:	611a      	str	r2, [r3, #16]
		CO->SYNC                            = &COO_SYNC;
     6d8:	69fb      	ldr	r3, [r7, #28]
     6da:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
     6de:	69fa      	ldr	r2, [r7, #28]
     6e0:	f202 6264 	addw	r2, r2, #1636	; 0x664
     6e4:	615a      	str	r2, [r3, #20]
		for(i=0; i<CO_NO_RPDO; i++){
     6e6:	69fb      	ldr	r3, [r7, #28]
     6e8:	2200      	movs	r2, #0
     6ea:	f8c3 2a24 	str.w	r2, [r3, #2596]	; 0xa24
     6ee:	69fb      	ldr	r3, [r7, #28]
     6f0:	f8d3 3a24 	ldr.w	r3, [r3, #2596]	; 0xa24
     6f4:	2b03      	cmp	r3, #3
     6f6:	d81b      	bhi.n	730 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x124>
			CO->RPDO[i]                     = &COO_RPDO[i];
     6f8:	69fb      	ldr	r3, [r7, #28]
     6fa:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
     6fe:	69fb      	ldr	r3, [r7, #28]
     700:	f8d3 0a24 	ldr.w	r0, [r3, #2596]	; 0xa24
     704:	69fb      	ldr	r3, [r7, #28]
     706:	f8d3 2a24 	ldr.w	r2, [r3, #2596]	; 0xa24
     70a:	4613      	mov	r3, r2
     70c:	005b      	lsls	r3, r3, #1
     70e:	4413      	add	r3, r2
     710:	015b      	lsls	r3, r3, #5
     712:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
     716:	69fa      	ldr	r2, [r7, #28]
     718:	441a      	add	r2, r3
     71a:	1d83      	adds	r3, r0, #6
     71c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(i=0; i<CO_NO_RPDO; i++){
     720:	69fb      	ldr	r3, [r7, #28]
     722:	f8d3 3a24 	ldr.w	r3, [r3, #2596]	; 0xa24
     726:	1c5a      	adds	r2, r3, #1
     728:	69fb      	ldr	r3, [r7, #28]
     72a:	f8c3 2a24 	str.w	r2, [r3, #2596]	; 0xa24
     72e:	e7de      	b.n	6ee <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0xe2>
		}
		for(i=0; i<CO_NO_TPDO; i++){
     730:	69fb      	ldr	r3, [r7, #28]
     732:	2200      	movs	r2, #0
     734:	f8c3 2a24 	str.w	r2, [r3, #2596]	; 0xa24
     738:	69fb      	ldr	r3, [r7, #28]
     73a:	f8d3 3a24 	ldr.w	r3, [r3, #2596]	; 0xa24
     73e:	2b03      	cmp	r3, #3
     740:	d81a      	bhi.n	778 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x16c>
			CO->TPDO[i]                     = &COO_TPDO[i];
     742:	69fb      	ldr	r3, [r7, #28]
     744:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
     748:	69fa      	ldr	r2, [r7, #28]
     74a:	f8d2 2a24 	ldr.w	r2, [r2, #2596]	; 0xa24
     74e:	69f9      	ldr	r1, [r7, #28]
     750:	f8d1 1a24 	ldr.w	r1, [r1, #2596]	; 0xa24
     754:	2058      	movs	r0, #88	; 0x58
     756:	fb00 f101 	mul.w	r1, r0, r1
     75a:	f501 6102 	add.w	r1, r1, #2080	; 0x820
     75e:	69f8      	ldr	r0, [r7, #28]
     760:	4401      	add	r1, r0
     762:	320a      	adds	r2, #10
     764:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for(i=0; i<CO_NO_TPDO; i++){
     768:	69fb      	ldr	r3, [r7, #28]
     76a:	f8d3 3a24 	ldr.w	r3, [r3, #2596]	; 0xa24
     76e:	1c5a      	adds	r2, r3, #1
     770:	69fb      	ldr	r3, [r7, #28]
     772:	f8c3 2a24 	str.w	r2, [r3, #2596]	; 0xa24
     776:	e7df      	b.n	738 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x12c>
		}
		
		CO->HBcons                          = &COO_HBcons;
     778:	69fb      	ldr	r3, [r7, #28]
     77a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
     77e:	69fa      	ldr	r2, [r7, #28]
     780:	f502 6218 	add.w	r2, r2, #2432	; 0x980
     784:	639a      	str	r2, [r3, #56]	; 0x38
		CO_HBcons_monitoredNodes            = &COO_HBcons_monitoredNodes[0];
     786:	69fb      	ldr	r3, [r7, #28]
     788:	f603 1298 	addw	r2, r3, #2456	; 0x998
     78c:	69fb      	ldr	r3, [r7, #28]
     78e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134

	if(errCnt != 0) return CO_ERROR_OUT_OF_MEMORY;
	#endif


	CO->CANmodule[0]->CANnormal = false;
     792:	69fb      	ldr	r3, [r7, #28]
     794:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
     798:	681b      	ldr	r3, [r3, #0]
     79a:	2200      	movs	r2, #0
     79c:	751a      	strb	r2, [r3, #20]
	CO_CANsetConfigurationMode(coCanDescr);
     79e:	69fa      	ldr	r2, [r7, #28]
     7a0:	69fb      	ldr	r3, [r7, #28]
     7a2:	f8d3 3a18 	ldr.w	r3, [r3, #2584]	; 0xa18
     7a6:	4619      	mov	r1, r3
     7a8:	4610      	mov	r0, r2
     7aa:	4b99      	ldr	r3, [pc, #612]	; (a10 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x404>)
     7ac:	4798      	blx	r3

	/* Verify CANopen Node-ID */
	if(nodeId<1 || nodeId>127)
     7ae:	7dfb      	ldrb	r3, [r7, #23]
     7b0:	2b00      	cmp	r3, #0
     7b2:	dd02      	ble.n	7ba <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x1ae>
     7b4:	7dfb      	ldrb	r3, [r7, #23]
     7b6:	2b7f      	cmp	r3, #127	; 0x7f
     7b8:	dd05      	ble.n	7c6 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x1ba>
	{
		CO_delete();
     7ba:	69f8      	ldr	r0, [r7, #28]
     7bc:	4b95      	ldr	r3, [pc, #596]	; (a14 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x408>)
     7be:	4798      	blx	r3
		return CO_ERROR_PARAMETERS;
     7c0:	f06f 030b 	mvn.w	r3, #11
     7c4:	e2e3      	b.n	d8e <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x782>
	}


	err = CANmodule_init(
     7c6:	69f8      	ldr	r0, [r7, #28]
	CO->CANmodule[0],
     7c8:	69fb      	ldr	r3, [r7, #28]
     7ca:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	err = CANmodule_init(
     7ce:	6819      	ldr	r1, [r3, #0]
     7d0:	69fb      	ldr	r3, [r7, #28]
     7d2:	f8d3 4a18 	ldr.w	r4, [r3, #2584]	; 0xa18
     7d6:	69fb      	ldr	r3, [r7, #28]
     7d8:	f8d3 5128 	ldr.w	r5, [r3, #296]	; 0x128
     7dc:	69fb      	ldr	r3, [r7, #28]
     7de:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
     7e2:	693a      	ldr	r2, [r7, #16]
     7e4:	9203      	str	r2, [sp, #12]
     7e6:	2209      	movs	r2, #9
     7e8:	9202      	str	r2, [sp, #8]
     7ea:	9301      	str	r3, [sp, #4]
     7ec:	230b      	movs	r3, #11
     7ee:	9300      	str	r3, [sp, #0]
     7f0:	462b      	mov	r3, r5
     7f2:	4622      	mov	r2, r4
     7f4:	4c88      	ldr	r4, [pc, #544]	; (a18 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x40c>)
     7f6:	47a0      	blx	r4
     7f8:	4603      	mov	r3, r0
     7fa:	461a      	mov	r2, r3
     7fc:	69fb      	ldr	r3, [r7, #28]
     7fe:	f883 2a28 	strb.w	r2, [r3, #2600]	; 0xa28
	CO_RXCAN_NO_MSGS,
	CO_CANmodule_txArray0,
	CO_TXCAN_NO_MSGS,
	bitRate);

	if(err){CO_delete(); return err;}
     802:	69fb      	ldr	r3, [r7, #28]
     804:	f993 3a28 	ldrsb.w	r3, [r3, #2600]	; 0xa28
     808:	2b00      	cmp	r3, #0
     80a:	d006      	beq.n	81a <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x20e>
     80c:	69f8      	ldr	r0, [r7, #28]
     80e:	4b81      	ldr	r3, [pc, #516]	; (a14 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x408>)
     810:	4798      	blx	r3
     812:	69fb      	ldr	r3, [r7, #28]
     814:	f993 3a28 	ldrsb.w	r3, [r3, #2600]	; 0xa28
     818:	e2b9      	b.n	d8e <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x782>

	for (i=0; i<CO_NO_SDO_SERVER; i++)
     81a:	69fb      	ldr	r3, [r7, #28]
     81c:	2200      	movs	r2, #0
     81e:	f8c3 2a24 	str.w	r2, [r3, #2596]	; 0xa24
     822:	69fb      	ldr	r3, [r7, #28]
     824:	f8d3 3a24 	ldr.w	r3, [r3, #2596]	; 0xa24
     828:	2b00      	cmp	r3, #0
     82a:	d175      	bne.n	918 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x30c>
	{
		uint32_t COB_IDClientToServer;
		uint32_t COB_IDServerToClient;
		if(i==0){
     82c:	69fb      	ldr	r3, [r7, #28]
     82e:	f8d3 3a24 	ldr.w	r3, [r3, #2596]	; 0xa24
     832:	2b00      	cmp	r3, #0
     834:	d108      	bne.n	848 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x23c>
			/*Default SDO server must be located at first index*/
			COB_IDClientToServer = CO_CAN_ID_RSDO + nodeId;
     836:	7dfb      	ldrb	r3, [r7, #23]
     838:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
     83c:	62fb      	str	r3, [r7, #44]	; 0x2c
			COB_IDServerToClient = CO_CAN_ID_TSDO + nodeId;
     83e:	7dfb      	ldrb	r3, [r7, #23]
     840:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
     844:	62bb      	str	r3, [r7, #40]	; 0x28
     846:	e017      	b.n	878 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x26c>
			}else{
			COB_IDClientToServer = OD_SDOServerParameter[i].COB_IDClientToServer;
     848:	69fb      	ldr	r3, [r7, #28]
     84a:	f8d3 2a24 	ldr.w	r2, [r3, #2596]	; 0xa24
     84e:	4973      	ldr	r1, [pc, #460]	; (a1c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x410>)
     850:	4613      	mov	r3, r2
     852:	005b      	lsls	r3, r3, #1
     854:	4413      	add	r3, r2
     856:	009b      	lsls	r3, r3, #2
     858:	440b      	add	r3, r1
     85a:	3364      	adds	r3, #100	; 0x64
     85c:	681b      	ldr	r3, [r3, #0]
     85e:	62fb      	str	r3, [r7, #44]	; 0x2c
			COB_IDServerToClient = OD_SDOServerParameter[i].COB_IDServerToClient;
     860:	69fb      	ldr	r3, [r7, #28]
     862:	f8d3 2a24 	ldr.w	r2, [r3, #2596]	; 0xa24
     866:	496d      	ldr	r1, [pc, #436]	; (a1c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x410>)
     868:	4613      	mov	r3, r2
     86a:	005b      	lsls	r3, r3, #1
     86c:	4413      	add	r3, r2
     86e:	009b      	lsls	r3, r3, #2
     870:	440b      	add	r3, r1
     872:	3368      	adds	r3, #104	; 0x68
     874:	681b      	ldr	r3, [r3, #0]
     876:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		err = CO_SDO_init(
     878:	69fb      	ldr	r3, [r7, #28]
     87a:	f103 0e04 	add.w	lr, r3, #4
			CO->SDO[i],
     87e:	69fb      	ldr	r3, [r7, #28]
     880:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
     884:	69fb      	ldr	r3, [r7, #28]
     886:	f8d3 3a24 	ldr.w	r3, [r3, #2596]	; 0xa24
		err = CO_SDO_init(
     88a:	009b      	lsls	r3, r3, #2
     88c:	4413      	add	r3, r2
     88e:	685b      	ldr	r3, [r3, #4]
     890:	60fb      	str	r3, [r7, #12]
			COB_IDClientToServer,
			COB_IDServerToClient,
			OD_H1200_SDO_SERVER_PARAM+i,
     892:	69fb      	ldr	r3, [r7, #28]
     894:	f8d3 3a24 	ldr.w	r3, [r3, #2596]	; 0xa24
		err = CO_SDO_init(
     898:	f503 5290 	add.w	r2, r3, #4608	; 0x1200
			i==0 ? 0 : CO->SDO[0],
     89c:	69fb      	ldr	r3, [r7, #28]
     89e:	f8d3 3a24 	ldr.w	r3, [r3, #2596]	; 0xa24
		err = CO_SDO_init(
     8a2:	2b00      	cmp	r3, #0
     8a4:	d004      	beq.n	8b0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2a4>
			i==0 ? 0 : CO->SDO[0],
     8a6:	69fb      	ldr	r3, [r7, #28]
     8a8:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
		err = CO_SDO_init(
     8ac:	685b      	ldr	r3, [r3, #4]
     8ae:	e000      	b.n	8b2 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2a6>
     8b0:	2300      	movs	r3, #0
     8b2:	69f9      	ldr	r1, [r7, #28]
     8b4:	f8d1 1130 	ldr.w	r1, [r1, #304]	; 0x130
			&CO_ObjDict[0],
			CO_OD_NoOfElements,
			CO_SDO_ODExtensions,
			nodeId,
			CO->CANmodule[0],
     8b8:	69f8      	ldr	r0, [r7, #28]
     8ba:	f8d0 0124 	ldr.w	r0, [r0, #292]	; 0x124
		err = CO_SDO_init(
     8be:	6800      	ldr	r0, [r0, #0]
			CO_RXCAN_SDO_SRV+i,
     8c0:	69fc      	ldr	r4, [r7, #28]
     8c2:	f8d4 4a24 	ldr.w	r4, [r4, #2596]	; 0xa24
		err = CO_SDO_init(
     8c6:	3406      	adds	r4, #6
			CO->CANmodule[0],
     8c8:	69fd      	ldr	r5, [r7, #28]
     8ca:	f8d5 5124 	ldr.w	r5, [r5, #292]	; 0x124
		err = CO_SDO_init(
     8ce:	682d      	ldr	r5, [r5, #0]
			CO_TXCAN_SDO_SRV+i);
     8d0:	69fe      	ldr	r6, [r7, #28]
     8d2:	f8d6 6a24 	ldr.w	r6, [r6, #2596]	; 0xa24
		err = CO_SDO_init(
     8d6:	3607      	adds	r6, #7
     8d8:	9609      	str	r6, [sp, #36]	; 0x24
     8da:	9508      	str	r5, [sp, #32]
     8dc:	9407      	str	r4, [sp, #28]
     8de:	9006      	str	r0, [sp, #24]
     8e0:	7df8      	ldrb	r0, [r7, #23]
     8e2:	9005      	str	r0, [sp, #20]
     8e4:	9104      	str	r1, [sp, #16]
     8e6:	2137      	movs	r1, #55	; 0x37
     8e8:	9103      	str	r1, [sp, #12]
     8ea:	494d      	ldr	r1, [pc, #308]	; (a20 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x414>)
     8ec:	9102      	str	r1, [sp, #8]
     8ee:	9301      	str	r3, [sp, #4]
     8f0:	9200      	str	r2, [sp, #0]
     8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
     8f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     8f6:	68f9      	ldr	r1, [r7, #12]
     8f8:	4670      	mov	r0, lr
     8fa:	4c4a      	ldr	r4, [pc, #296]	; (a24 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x418>)
     8fc:	47a0      	blx	r4
     8fe:	4603      	mov	r3, r0
     900:	461a      	mov	r2, r3
     902:	69fb      	ldr	r3, [r7, #28]
     904:	f883 2a28 	strb.w	r2, [r3, #2600]	; 0xa28
	for (i=0; i<CO_NO_SDO_SERVER; i++)
     908:	69fb      	ldr	r3, [r7, #28]
     90a:	f8d3 3a24 	ldr.w	r3, [r3, #2596]	; 0xa24
     90e:	1c5a      	adds	r2, r3, #1
     910:	69fb      	ldr	r3, [r7, #28]
     912:	f8c3 2a24 	str.w	r2, [r3, #2596]	; 0xa24
     916:	e784      	b.n	822 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x216>
	}

	if(err){CO_delete(); return err;}
     918:	69fb      	ldr	r3, [r7, #28]
     91a:	f993 3a28 	ldrsb.w	r3, [r3, #2600]	; 0xa28
     91e:	2b00      	cmp	r3, #0
     920:	d006      	beq.n	930 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x324>
     922:	69f8      	ldr	r0, [r7, #28]
     924:	4b3b      	ldr	r3, [pc, #236]	; (a14 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x408>)
     926:	4798      	blx	r3
     928:	69fb      	ldr	r3, [r7, #28]
     92a:	f993 3a28 	ldrsb.w	r3, [r3, #2600]	; 0xa28
     92e:	e22e      	b.n	d8e <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x782>


	err = EM_init(
     930:	69fb      	ldr	r3, [r7, #28]
     932:	1d18      	adds	r0, r3, #4
			CO->em,
     934:	69fb      	ldr	r3, [r7, #28]
     936:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	err = EM_init(
     93a:	6899      	ldr	r1, [r3, #8]
			CO->emPr,
     93c:	69fb      	ldr	r3, [r7, #28]
     93e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	err = EM_init(
     942:	68dc      	ldr	r4, [r3, #12]
			CO->SDO[0],
     944:	69fb      	ldr	r3, [r7, #28]
     946:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	err = EM_init(
     94a:	685d      	ldr	r5, [r3, #4]
			&OD_errorStatusBits[0],
			ODL_errorStatusBits_stringLength,
			&OD_errorRegister,
			&OD_preDefinedErrorField[0],
			ODL_preDefinedErrorField_arrayLength,
			CO->CANmodule[0],
     94c:	69fb      	ldr	r3, [r7, #28]
     94e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	err = EM_init(
     952:	681b      	ldr	r3, [r3, #0]
			CO_TXCAN_EMERG,
			CO_CAN_ID_EMERGENCY + (uint32_t)nodeId);
     954:	7dfa      	ldrb	r2, [r7, #23]
	err = EM_init(
     956:	3280      	adds	r2, #128	; 0x80
     958:	9207      	str	r2, [sp, #28]
     95a:	2202      	movs	r2, #2
     95c:	9206      	str	r2, [sp, #24]
     95e:	9305      	str	r3, [sp, #20]
     960:	2308      	movs	r3, #8
     962:	9304      	str	r3, [sp, #16]
     964:	4b30      	ldr	r3, [pc, #192]	; (a28 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x41c>)
     966:	9303      	str	r3, [sp, #12]
     968:	4b30      	ldr	r3, [pc, #192]	; (a2c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x420>)
     96a:	9302      	str	r3, [sp, #8]
     96c:	230a      	movs	r3, #10
     96e:	9301      	str	r3, [sp, #4]
     970:	4b2f      	ldr	r3, [pc, #188]	; (a30 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x424>)
     972:	9300      	str	r3, [sp, #0]
     974:	462b      	mov	r3, r5
     976:	4622      	mov	r2, r4
     978:	4c2e      	ldr	r4, [pc, #184]	; (a34 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x428>)
     97a:	47a0      	blx	r4
     97c:	4603      	mov	r3, r0
     97e:	461a      	mov	r2, r3
     980:	69fb      	ldr	r3, [r7, #28]
     982:	f883 2a28 	strb.w	r2, [r3, #2600]	; 0xa28

	if(err){CO_delete(); return err;}
     986:	69fb      	ldr	r3, [r7, #28]
     988:	f993 3a28 	ldrsb.w	r3, [r3, #2600]	; 0xa28
     98c:	2b00      	cmp	r3, #0
     98e:	d006      	beq.n	99e <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x392>
     990:	69f8      	ldr	r0, [r7, #28]
     992:	4b20      	ldr	r3, [pc, #128]	; (a14 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x408>)
     994:	4798      	blx	r3
     996:	69fb      	ldr	r3, [r7, #28]
     998:	f993 3a28 	ldrsb.w	r3, [r3, #2600]	; 0xa28
     99c:	e1f7      	b.n	d8e <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x782>


	err = CO_NMT_init(
     99e:	69fb      	ldr	r3, [r7, #28]
     9a0:	f103 0010 	add.w	r0, r3, #16
	CO->NMT,
     9a4:	69fb      	ldr	r3, [r7, #28]
     9a6:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	err = CO_NMT_init(
     9aa:	691c      	ldr	r4, [r3, #16]
	CO->emPr,
     9ac:	69fb      	ldr	r3, [r7, #28]
     9ae:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	err = CO_NMT_init(
     9b2:	68dd      	ldr	r5, [r3, #12]
	nodeId,
	500,
	CO->CANmodule[0],
     9b4:	69fb      	ldr	r3, [r7, #28]
     9b6:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	err = CO_NMT_init(
     9ba:	681b      	ldr	r3, [r3, #0]
	CO_RXCAN_NMT,
	CO_CAN_ID_NMT_SERVICE,
	CO->CANmodule[0],
     9bc:	69fa      	ldr	r2, [r7, #28]
     9be:	f8d2 2124 	ldr.w	r2, [r2, #292]	; 0x124
	err = CO_NMT_init(
     9c2:	6812      	ldr	r2, [r2, #0]
	CO_TXCAN_HB,
	CO_CAN_ID_HEARTBEAT + nodeId);
     9c4:	7df9      	ldrb	r1, [r7, #23]
     9c6:	f501 61e0 	add.w	r1, r1, #1792	; 0x700
	err = CO_NMT_init(
     9ca:	7dfe      	ldrb	r6, [r7, #23]
     9cc:	9106      	str	r1, [sp, #24]
     9ce:	2108      	movs	r1, #8
     9d0:	9105      	str	r1, [sp, #20]
     9d2:	9204      	str	r2, [sp, #16]
     9d4:	2200      	movs	r2, #0
     9d6:	9203      	str	r2, [sp, #12]
     9d8:	2200      	movs	r2, #0
     9da:	9202      	str	r2, [sp, #8]
     9dc:	9301      	str	r3, [sp, #4]
     9de:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
     9e2:	9300      	str	r3, [sp, #0]
     9e4:	4633      	mov	r3, r6
     9e6:	462a      	mov	r2, r5
     9e8:	4621      	mov	r1, r4
     9ea:	4c13      	ldr	r4, [pc, #76]	; (a38 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x42c>)
     9ec:	47a0      	blx	r4
     9ee:	4603      	mov	r3, r0
     9f0:	461a      	mov	r2, r3
     9f2:	69fb      	ldr	r3, [r7, #28]
     9f4:	f883 2a28 	strb.w	r2, [r3, #2600]	; 0xa28

	if(err){CO_delete(); return err;}
     9f8:	69fb      	ldr	r3, [r7, #28]
     9fa:	f993 3a28 	ldrsb.w	r3, [r3, #2600]	; 0xa28
     9fe:	2b00      	cmp	r3, #0
     a00:	d01c      	beq.n	a3c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x430>
     a02:	69f8      	ldr	r0, [r7, #28]
     a04:	4b03      	ldr	r3, [pc, #12]	; (a14 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x408>)
     a06:	4798      	blx	r3
     a08:	69fb      	ldr	r3, [r7, #28]
     a0a:	f993 3a28 	ldrsb.w	r3, [r3, #2600]	; 0xa28
     a0e:	e1be      	b.n	d8e <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x782>
     a10:	0000129d 	.word	0x0000129d
     a14:	00000da5 	.word	0x00000da5
     a18:	00001301 	.word	0x00001301
     a1c:	20000184 	.word	0x20000184
     a20:	000138e0 	.word	0x000138e0
     a24:	00004579 	.word	0x00004579
     a28:	20000014 	.word	0x20000014
     a2c:	2000000c 	.word	0x2000000c
     a30:	2000003c 	.word	0x2000003c
     a34:	00001d31 	.word	0x00001d31
     a38:	0000281d 	.word	0x0000281d


	#if CO_NO_NMT_MASTER == 1
		NMTM_txBuff = CAN_Tx_BufferInit(/* return pointer to 8-byte CAN data buffer, which should be populated */
     a3c:	69f8      	ldr	r0, [r7, #28]
     a3e:	2300      	movs	r3, #0
     a40:	9301      	str	r3, [sp, #4]
     a42:	2302      	movs	r3, #2
     a44:	9300      	str	r3, [sp, #0]
     a46:	2300      	movs	r3, #0
     a48:	2200      	movs	r2, #0
     a4a:	2100      	movs	r1, #0
     a4c:	4cab      	ldr	r4, [pc, #684]	; (cfc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x6f0>)
     a4e:	47a0      	blx	r4
     a50:	4602      	mov	r2, r0
     a52:	69fb      	ldr	r3, [r7, #28]
     a54:	f8c3 2a2c 	str.w	r2, [r3, #2604]	; 0xa2c
		0);               /* synchronous message flag bit */
	#endif


	err = CO_SYNC_init(
	CO->SYNC,
     a58:	69fb      	ldr	r3, [r7, #28]
     a5a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	err = CO_SYNC_init(
     a5e:	695e      	ldr	r6, [r3, #20]
	CO->em,
     a60:	69fb      	ldr	r3, [r7, #28]
     a62:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	err = CO_SYNC_init(
     a66:	689b      	ldr	r3, [r3, #8]
     a68:	60fb      	str	r3, [r7, #12]
	CO->SDO[0],
     a6a:	69fb      	ldr	r3, [r7, #28]
     a6c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	err = CO_SYNC_init(
     a70:	6859      	ldr	r1, [r3, #4]
     a72:	60b9      	str	r1, [r7, #8]
	&CO->NMT->operatingState,
     a74:	69fb      	ldr	r3, [r7, #28]
     a76:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
     a7a:	691b      	ldr	r3, [r3, #16]
	err = CO_SYNC_init(
     a7c:	607b      	str	r3, [r7, #4]
     a7e:	4ba0      	ldr	r3, [pc, #640]	; (d00 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x6f4>)
     a80:	689b      	ldr	r3, [r3, #8]
     a82:	4a9f      	ldr	r2, [pc, #636]	; (d00 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x6f4>)
     a84:	68d2      	ldr	r2, [r2, #12]
     a86:	499e      	ldr	r1, [pc, #632]	; (d00 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x6f4>)
     a88:	f891 1058 	ldrb.w	r1, [r1, #88]	; 0x58
	OD_COB_ID_SYNCMessage,
	OD_communicationCyclePeriod,
	OD_synchronousCounterOverflowValue,
	CO->CANmodule[0],
     a8c:	69f8      	ldr	r0, [r7, #28]
     a8e:	f8d0 0124 	ldr.w	r0, [r0, #292]	; 0x124
	err = CO_SYNC_init(
     a92:	6800      	ldr	r0, [r0, #0]
	CO_RXCAN_SYNC,
	CO->CANmodule[0],
     a94:	69fc      	ldr	r4, [r7, #28]
     a96:	f8d4 4124 	ldr.w	r4, [r4, #292]	; 0x124
	err = CO_SYNC_init(
     a9a:	6824      	ldr	r4, [r4, #0]
     a9c:	2501      	movs	r5, #1
     a9e:	9507      	str	r5, [sp, #28]
     aa0:	9406      	str	r4, [sp, #24]
     aa2:	2401      	movs	r4, #1
     aa4:	9405      	str	r4, [sp, #20]
     aa6:	9004      	str	r0, [sp, #16]
     aa8:	9103      	str	r1, [sp, #12]
     aaa:	9202      	str	r2, [sp, #8]
     aac:	9301      	str	r3, [sp, #4]
     aae:	6878      	ldr	r0, [r7, #4]
     ab0:	9000      	str	r0, [sp, #0]
     ab2:	68bb      	ldr	r3, [r7, #8]
     ab4:	68fa      	ldr	r2, [r7, #12]
     ab6:	4631      	mov	r1, r6
     ab8:	69f8      	ldr	r0, [r7, #28]
     aba:	4c92      	ldr	r4, [pc, #584]	; (d04 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x6f8>)
     abc:	47a0      	blx	r4
     abe:	4603      	mov	r3, r0
     ac0:	461a      	mov	r2, r3
     ac2:	69fb      	ldr	r3, [r7, #28]
     ac4:	f883 2a28 	strb.w	r2, [r3, #2600]	; 0xa28
	CO_TXCAN_SYNC);

	if(err){CO_delete(); return err;}
     ac8:	69fb      	ldr	r3, [r7, #28]
     aca:	f993 3a28 	ldrsb.w	r3, [r3, #2600]	; 0xa28
     ace:	2b00      	cmp	r3, #0
     ad0:	d006      	beq.n	ae0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x4d4>
     ad2:	69f8      	ldr	r0, [r7, #28]
     ad4:	4b8c      	ldr	r3, [pc, #560]	; (d08 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x6fc>)
     ad6:	4798      	blx	r3
     ad8:	69fb      	ldr	r3, [r7, #28]
     ada:	f993 3a28 	ldrsb.w	r3, [r3, #2600]	; 0xa28
     ade:	e156      	b.n	d8e <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x782>


	for(i=0; i<CO_NO_RPDO; i++){
     ae0:	69fb      	ldr	r3, [r7, #28]
     ae2:	2200      	movs	r2, #0
     ae4:	f8c3 2a24 	str.w	r2, [r3, #2596]	; 0xa24
     ae8:	69fb      	ldr	r3, [r7, #28]
     aea:	f8d3 3a24 	ldr.w	r3, [r3, #2596]	; 0xa24
     aee:	2b03      	cmp	r3, #3
     af0:	f200 8086 	bhi.w	c00 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x5f4>
		CO_CANmodule_t *CANdevRx = CO->CANmodule[0];
     af4:	69fb      	ldr	r3, [r7, #28]
     af6:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
     afa:	681b      	ldr	r3, [r3, #0]
     afc:	627b      	str	r3, [r7, #36]	; 0x24
		CANdevRxIdx = CO_RXCAN_RPDO + i;
     afe:	69fb      	ldr	r3, [r7, #28]
     b00:	f8d3 3a24 	ldr.w	r3, [r3, #2596]	; 0xa24
     b04:	1c9a      	adds	r2, r3, #2
     b06:	69fb      	ldr	r3, [r7, #28]
     b08:	f8c3 2a1c 	str.w	r2, [r3, #2588]	; 0xa1c

		err = CO_RPDO_init(
		CO->RPDO[i],
     b0c:	69fb      	ldr	r3, [r7, #28]
     b0e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
     b12:	69fa      	ldr	r2, [r7, #28]
     b14:	f8d2 2a24 	ldr.w	r2, [r2, #2596]	; 0xa24
		err = CO_RPDO_init(
     b18:	3206      	adds	r2, #6
     b1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
     b1e:	60fb      	str	r3, [r7, #12]
		CO->em,
     b20:	69fb      	ldr	r3, [r7, #28]
     b22:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
		err = CO_RPDO_init(
     b26:	689b      	ldr	r3, [r3, #8]
     b28:	60bb      	str	r3, [r7, #8]
		CO->SDO[0],
     b2a:	69fb      	ldr	r3, [r7, #28]
     b2c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
		err = CO_RPDO_init(
     b30:	685b      	ldr	r3, [r3, #4]
     b32:	607b      	str	r3, [r7, #4]
		CO->SYNC,
     b34:	69fb      	ldr	r3, [r7, #28]
     b36:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
		err = CO_RPDO_init(
     b3a:	6958      	ldr	r0, [r3, #20]
		&CO->NMT->operatingState,
     b3c:	69fb      	ldr	r3, [r7, #28]
     b3e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
     b42:	691b      	ldr	r3, [r3, #16]
		err = CO_RPDO_init(
     b44:	603b      	str	r3, [r7, #0]
		nodeId,
		((i<4) ? (CO_CAN_ID_RPDO_1+i*0x100) : 0),
     b46:	69fb      	ldr	r3, [r7, #28]
     b48:	f8d3 3a24 	ldr.w	r3, [r3, #2596]	; 0xa24
		err = CO_RPDO_init(
     b4c:	2b03      	cmp	r3, #3
     b4e:	d805      	bhi.n	b5c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x550>
		((i<4) ? (CO_CAN_ID_RPDO_1+i*0x100) : 0),
     b50:	69fb      	ldr	r3, [r7, #28]
     b52:	f8d3 3a24 	ldr.w	r3, [r3, #2596]	; 0xa24
		err = CO_RPDO_init(
     b56:	3302      	adds	r3, #2
     b58:	021a      	lsls	r2, r3, #8
     b5a:	e000      	b.n	b5e <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x552>
     b5c:	2200      	movs	r2, #0
		0,
		(CO_RPDOCommPar_t*) &OD_RPDOCommunicationParameter[i],
     b5e:	69fb      	ldr	r3, [r7, #28]
     b60:	f8d3 1a24 	ldr.w	r1, [r3, #2596]	; 0xa24
     b64:	460b      	mov	r3, r1
     b66:	005b      	lsls	r3, r3, #1
     b68:	440b      	add	r3, r1
     b6a:	009b      	lsls	r3, r3, #2
     b6c:	3368      	adds	r3, #104	; 0x68
     b6e:	4964      	ldr	r1, [pc, #400]	; (d00 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x6f4>)
     b70:	440b      	add	r3, r1
     b72:	1d1c      	adds	r4, r3, #4
		(CO_RPDOMapPar_t*) &OD_RPDOMappingParameter[i],
     b74:	69fb      	ldr	r3, [r7, #28]
     b76:	f8d3 1a24 	ldr.w	r1, [r3, #2596]	; 0xa24
     b7a:	460b      	mov	r3, r1
     b7c:	00db      	lsls	r3, r3, #3
     b7e:	440b      	add	r3, r1
     b80:	009b      	lsls	r3, r3, #2
     b82:	3398      	adds	r3, #152	; 0x98
     b84:	495e      	ldr	r1, [pc, #376]	; (d00 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x6f4>)
     b86:	440b      	add	r3, r1
     b88:	3304      	adds	r3, #4
		OD_H1400_RXPDO_1_PARAM+i,
     b8a:	69f9      	ldr	r1, [r7, #28]
     b8c:	f8d1 1a24 	ldr.w	r1, [r1, #2596]	; 0xa24
		err = CO_RPDO_init(
     b90:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
		OD_H1600_RXPDO_1_MAPPING+i,
     b94:	69fd      	ldr	r5, [r7, #28]
     b96:	f8d5 5a24 	ldr.w	r5, [r5, #2596]	; 0xa24
		err = CO_RPDO_init(
     b9a:	f505 55b0 	add.w	r5, r5, #5632	; 0x1600
     b9e:	69fe      	ldr	r6, [r7, #28]
     ba0:	f8d6 6a1c 	ldr.w	r6, [r6, #2588]	; 0xa1c
     ba4:	960a      	str	r6, [sp, #40]	; 0x28
     ba6:	6a7e      	ldr	r6, [r7, #36]	; 0x24
     ba8:	9609      	str	r6, [sp, #36]	; 0x24
     baa:	9508      	str	r5, [sp, #32]
     bac:	9107      	str	r1, [sp, #28]
     bae:	9306      	str	r3, [sp, #24]
     bb0:	9405      	str	r4, [sp, #20]
     bb2:	2300      	movs	r3, #0
     bb4:	9304      	str	r3, [sp, #16]
     bb6:	9203      	str	r2, [sp, #12]
     bb8:	7dfb      	ldrb	r3, [r7, #23]
     bba:	9302      	str	r3, [sp, #8]
     bbc:	683b      	ldr	r3, [r7, #0]
     bbe:	9301      	str	r3, [sp, #4]
     bc0:	9000      	str	r0, [sp, #0]
     bc2:	687b      	ldr	r3, [r7, #4]
     bc4:	68ba      	ldr	r2, [r7, #8]
     bc6:	68f9      	ldr	r1, [r7, #12]
     bc8:	69f8      	ldr	r0, [r7, #28]
     bca:	4c50      	ldr	r4, [pc, #320]	; (d0c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x700>)
     bcc:	47a0      	blx	r4
     bce:	4603      	mov	r3, r0
     bd0:	461a      	mov	r2, r3
     bd2:	69fb      	ldr	r3, [r7, #28]
     bd4:	f883 2a28 	strb.w	r2, [r3, #2600]	; 0xa28
		CANdevRx,
		CANdevRxIdx);

		if(err){CO_delete(); return err;}
     bd8:	69fb      	ldr	r3, [r7, #28]
     bda:	f993 3a28 	ldrsb.w	r3, [r3, #2600]	; 0xa28
     bde:	2b00      	cmp	r3, #0
     be0:	d006      	beq.n	bf0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x5e4>
     be2:	69f8      	ldr	r0, [r7, #28]
     be4:	4b48      	ldr	r3, [pc, #288]	; (d08 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x6fc>)
     be6:	4798      	blx	r3
     be8:	69fb      	ldr	r3, [r7, #28]
     bea:	f993 3a28 	ldrsb.w	r3, [r3, #2600]	; 0xa28
     bee:	e0ce      	b.n	d8e <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x782>
	for(i=0; i<CO_NO_RPDO; i++){
     bf0:	69fb      	ldr	r3, [r7, #28]
     bf2:	f8d3 3a24 	ldr.w	r3, [r3, #2596]	; 0xa24
     bf6:	1c5a      	adds	r2, r3, #1
     bf8:	69fb      	ldr	r3, [r7, #28]
     bfa:	f8c3 2a24 	str.w	r2, [r3, #2596]	; 0xa24
     bfe:	e773      	b.n	ae8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x4dc>
	}


	for(i=0; i<CO_NO_TPDO; i++){
     c00:	69fb      	ldr	r3, [r7, #28]
     c02:	2200      	movs	r2, #0
     c04:	f8c3 2a24 	str.w	r2, [r3, #2596]	; 0xa24
     c08:	69fb      	ldr	r3, [r7, #28]
     c0a:	f8d3 3a24 	ldr.w	r3, [r3, #2596]	; 0xa24
     c0e:	2b03      	cmp	r3, #3
     c10:	f200 8088 	bhi.w	d24 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x718>
		err = CO_TPDO_init(
		CO->TPDO[i],
     c14:	69fb      	ldr	r3, [r7, #28]
     c16:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
     c1a:	69fa      	ldr	r2, [r7, #28]
     c1c:	f8d2 2a24 	ldr.w	r2, [r2, #2596]	; 0xa24
		err = CO_TPDO_init(
     c20:	320a      	adds	r2, #10
     c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
     c26:	60fb      	str	r3, [r7, #12]
		CO->em,
     c28:	69fb      	ldr	r3, [r7, #28]
     c2a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
		err = CO_TPDO_init(
     c2e:	689b      	ldr	r3, [r3, #8]
     c30:	60bb      	str	r3, [r7, #8]
		CO->SDO[0],
     c32:	69fb      	ldr	r3, [r7, #28]
     c34:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
		err = CO_TPDO_init(
     c38:	685b      	ldr	r3, [r3, #4]
     c3a:	607b      	str	r3, [r7, #4]
		&CO->NMT->operatingState,
     c3c:	69fb      	ldr	r3, [r7, #28]
     c3e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
     c42:	691b      	ldr	r3, [r3, #16]
		err = CO_TPDO_init(
     c44:	603b      	str	r3, [r7, #0]
		nodeId,
		((i<4) ? (CO_CAN_ID_TPDO_1+i*0x100) : 0),
     c46:	69fb      	ldr	r3, [r7, #28]
     c48:	f8d3 3a24 	ldr.w	r3, [r3, #2596]	; 0xa24
		err = CO_TPDO_init(
     c4c:	2b03      	cmp	r3, #3
     c4e:	d806      	bhi.n	c5e <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x652>
		((i<4) ? (CO_CAN_ID_TPDO_1+i*0x100) : 0),
     c50:	69fb      	ldr	r3, [r7, #28]
     c52:	f8d3 3a24 	ldr.w	r3, [r3, #2596]	; 0xa24
     c56:	021b      	lsls	r3, r3, #8
		err = CO_TPDO_init(
     c58:	f503 72c0 	add.w	r2, r3, #384	; 0x180
     c5c:	e000      	b.n	c60 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x654>
     c5e:	2200      	movs	r2, #0
		0,
		(CO_TPDOCommPar_t*) &OD_TPDOCommunicationParameter[i],
     c60:	69fb      	ldr	r3, [r7, #28]
     c62:	f8d3 1a24 	ldr.w	r1, [r3, #2596]	; 0xa24
     c66:	460b      	mov	r3, r1
     c68:	00db      	lsls	r3, r3, #3
     c6a:	1a5b      	subs	r3, r3, r1
     c6c:	009b      	lsls	r3, r3, #2
     c6e:	f503 7394 	add.w	r3, r3, #296	; 0x128
     c72:	4923      	ldr	r1, [pc, #140]	; (d00 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x6f4>)
     c74:	440b      	add	r3, r1
     c76:	1d18      	adds	r0, r3, #4
		(CO_TPDOMapPar_t*) &OD_TPDOMappingParameter[i],
     c78:	69fb      	ldr	r3, [r7, #28]
     c7a:	f8d3 1a24 	ldr.w	r1, [r3, #2596]	; 0xa24
     c7e:	460b      	mov	r3, r1
     c80:	00db      	lsls	r3, r3, #3
     c82:	440b      	add	r3, r1
     c84:	009b      	lsls	r3, r3, #2
     c86:	f503 73cc 	add.w	r3, r3, #408	; 0x198
     c8a:	491d      	ldr	r1, [pc, #116]	; (d00 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x6f4>)
     c8c:	440b      	add	r3, r1
     c8e:	3304      	adds	r3, #4
		OD_H1800_TXPDO_1_PARAM+i,
     c90:	69f9      	ldr	r1, [r7, #28]
     c92:	f8d1 1a24 	ldr.w	r1, [r1, #2596]	; 0xa24
		err = CO_TPDO_init(
     c96:	f501 51c0 	add.w	r1, r1, #6144	; 0x1800
		OD_H1A00_TXPDO_1_MAPPING+i,
     c9a:	69fc      	ldr	r4, [r7, #28]
     c9c:	f8d4 4a24 	ldr.w	r4, [r4, #2596]	; 0xa24
		err = CO_TPDO_init(
     ca0:	f504 54d0 	add.w	r4, r4, #6656	; 0x1a00
		CO->CANmodule[0],
     ca4:	69fd      	ldr	r5, [r7, #28]
     ca6:	f8d5 5124 	ldr.w	r5, [r5, #292]	; 0x124
		err = CO_TPDO_init(
     caa:	682d      	ldr	r5, [r5, #0]
		CO_TXCAN_TPDO+i);
     cac:	69fe      	ldr	r6, [r7, #28]
     cae:	f8d6 6a24 	ldr.w	r6, [r6, #2596]	; 0xa24
		err = CO_TPDO_init(
     cb2:	3603      	adds	r6, #3
     cb4:	9609      	str	r6, [sp, #36]	; 0x24
     cb6:	9508      	str	r5, [sp, #32]
     cb8:	9407      	str	r4, [sp, #28]
     cba:	9106      	str	r1, [sp, #24]
     cbc:	9305      	str	r3, [sp, #20]
     cbe:	9004      	str	r0, [sp, #16]
     cc0:	2300      	movs	r3, #0
     cc2:	9303      	str	r3, [sp, #12]
     cc4:	9202      	str	r2, [sp, #8]
     cc6:	7dfb      	ldrb	r3, [r7, #23]
     cc8:	9301      	str	r3, [sp, #4]
     cca:	683b      	ldr	r3, [r7, #0]
     ccc:	9300      	str	r3, [sp, #0]
     cce:	687b      	ldr	r3, [r7, #4]
     cd0:	68ba      	ldr	r2, [r7, #8]
     cd2:	68f9      	ldr	r1, [r7, #12]
     cd4:	69f8      	ldr	r0, [r7, #28]
     cd6:	4c0e      	ldr	r4, [pc, #56]	; (d10 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x704>)
     cd8:	47a0      	blx	r4
     cda:	4603      	mov	r3, r0
     cdc:	461a      	mov	r2, r3
     cde:	69fb      	ldr	r3, [r7, #28]
     ce0:	f883 2a28 	strb.w	r2, [r3, #2600]	; 0xa28
		if(err){CO_delete(); return err;}
     ce4:	69fb      	ldr	r3, [r7, #28]
     ce6:	f993 3a28 	ldrsb.w	r3, [r3, #2600]	; 0xa28
     cea:	2b00      	cmp	r3, #0
     cec:	d012      	beq.n	d14 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x708>
     cee:	69f8      	ldr	r0, [r7, #28]
     cf0:	4b05      	ldr	r3, [pc, #20]	; (d08 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x6fc>)
     cf2:	4798      	blx	r3
     cf4:	69fb      	ldr	r3, [r7, #28]
     cf6:	f993 3a28 	ldrsb.w	r3, [r3, #2600]	; 0xa28
     cfa:	e048      	b.n	d8e <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x782>
     cfc:	00001575 	.word	0x00001575
     d00:	20000184 	.word	0x20000184
     d04:	00006545 	.word	0x00006545
     d08:	00000da5 	.word	0x00000da5
     d0c:	00003b05 	.word	0x00003b05
     d10:	00003c0d 	.word	0x00003c0d
	for(i=0; i<CO_NO_TPDO; i++){
     d14:	69fb      	ldr	r3, [r7, #28]
     d16:	f8d3 3a24 	ldr.w	r3, [r3, #2596]	; 0xa24
     d1a:	1c5a      	adds	r2, r3, #1
     d1c:	69fb      	ldr	r3, [r7, #28]
     d1e:	f8c3 2a24 	str.w	r2, [r3, #2596]	; 0xa24
     d22:	e771      	b.n	c08 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x5fc>
	}


	err = CO_HBconsumer_init(
     d24:	69fb      	ldr	r3, [r7, #28]
     d26:	f103 0014 	add.w	r0, r3, #20
	CO->HBcons,
     d2a:	69fb      	ldr	r3, [r7, #28]
     d2c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	err = CO_HBconsumer_init(
     d30:	6b9c      	ldr	r4, [r3, #56]	; 0x38
	CO->em,
     d32:	69fb      	ldr	r3, [r7, #28]
     d34:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	err = CO_HBconsumer_init(
     d38:	689d      	ldr	r5, [r3, #8]
	CO->SDO[0],
     d3a:	69fb      	ldr	r3, [r7, #28]
     d3c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	err = CO_HBconsumer_init(
     d40:	685e      	ldr	r6, [r3, #4]
     d42:	69fb      	ldr	r3, [r7, #28]
     d44:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
	&OD_consumerHeartbeatTime[0],
	CO_HBcons_monitoredNodes,
	CO_NO_HB_CONS,
	CO->CANmodule[0],
     d48:	69fa      	ldr	r2, [r7, #28]
     d4a:	f8d2 2124 	ldr.w	r2, [r2, #292]	; 0x124
	err = CO_HBconsumer_init(
     d4e:	6812      	ldr	r2, [r2, #0]
     d50:	2107      	movs	r1, #7
     d52:	9104      	str	r1, [sp, #16]
     d54:	9203      	str	r2, [sp, #12]
     d56:	2204      	movs	r2, #4
     d58:	9202      	str	r2, [sp, #8]
     d5a:	9301      	str	r3, [sp, #4]
     d5c:	4b0e      	ldr	r3, [pc, #56]	; (d98 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x78c>)
     d5e:	9300      	str	r3, [sp, #0]
     d60:	4633      	mov	r3, r6
     d62:	462a      	mov	r2, r5
     d64:	4621      	mov	r1, r4
     d66:	4c0d      	ldr	r4, [pc, #52]	; (d9c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x790>)
     d68:	47a0      	blx	r4
     d6a:	4603      	mov	r3, r0
     d6c:	461a      	mov	r2, r3
     d6e:	69fb      	ldr	r3, [r7, #28]
     d70:	f883 2a28 	strb.w	r2, [r3, #2600]	; 0xa28
	CO_RXCAN_CONS_HB);

	if(err){CO_delete(); return err;}
     d74:	69fb      	ldr	r3, [r7, #28]
     d76:	f993 3a28 	ldrsb.w	r3, [r3, #2600]	; 0xa28
     d7a:	2b00      	cmp	r3, #0
     d7c:	d006      	beq.n	d8c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x780>
     d7e:	69f8      	ldr	r0, [r7, #28]
     d80:	4b07      	ldr	r3, [pc, #28]	; (da0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x794>)
     d82:	4798      	blx	r3
     d84:	69fb      	ldr	r3, [r7, #28]
     d86:	f993 3a28 	ldrsb.w	r3, [r3, #2600]	; 0xa28
     d8a:	e000      	b.n	d8e <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x782>
		OD_INDEX_TRACE + i);
	}
	#endif


	return CO_ERROR_NO;
     d8c:	2300      	movs	r3, #0
}
     d8e:	4618      	mov	r0, r3
     d90:	3734      	adds	r7, #52	; 0x34
     d92:	46bd      	mov	sp, r7
     d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d96:	bf00      	nop
     d98:	200001b4 	.word	0x200001b4
     d9c:	00002551 	.word	0x00002551
     da0:	00000da5 	.word	0x00000da5

00000da4 <_ZN8CO_Class9CO_deleteEv>:


/******************************************************************************/
void CO_Class::CO_delete(void){
     da4:	b580      	push	{r7, lr}
     da6:	b082      	sub	sp, #8
     da8:	af00      	add	r7, sp, #0
     daa:	6078      	str	r0, [r7, #4]
	#ifndef CO_USE_GLOBALS
	uint32_t i;
	#endif

	CO_CANsetConfigurationMode(coCanDescr);
     dac:	687a      	ldr	r2, [r7, #4]
     dae:	687b      	ldr	r3, [r7, #4]
     db0:	f8d3 3a18 	ldr.w	r3, [r3, #2584]	; 0xa18
     db4:	4619      	mov	r1, r3
     db6:	4610      	mov	r0, r2
     db8:	4b04      	ldr	r3, [pc, #16]	; (dcc <_ZN8CO_Class9CO_deleteEv+0x28>)
     dba:	4798      	blx	r3
	CANmodule_Disable();
     dbc:	687b      	ldr	r3, [r7, #4]
     dbe:	4618      	mov	r0, r3
     dc0:	4b03      	ldr	r3, [pc, #12]	; (dd0 <_ZN8CO_Class9CO_deleteEv+0x2c>)
     dc2:	4798      	blx	r3
		free(CO_CANmodule_txArray0);
		free(CO_CANmodule_rxArray0);
		free(CO->CANmodule[0]);
		CO = NULL;
	#endif
}
     dc4:	bf00      	nop
     dc6:	3708      	adds	r7, #8
     dc8:	46bd      	mov	sp, r7
     dca:	bd80      	pop	{r7, pc}
     dcc:	0000129d 	.word	0x0000129d
     dd0:	00001455 	.word	0x00001455

00000dd4 <_ZN8CO_Class7ProcessEmPm>:


/******************************************************************************/
CO_NMT_reset_cmd_t CO_Class::Process(uint32_t                timeDifference_ms,
uint32_t               *timerNext_ms)
{
     dd4:	b590      	push	{r4, r7, lr}
     dd6:	b08b      	sub	sp, #44	; 0x2c
     dd8:	af04      	add	r7, sp, #16
     dda:	60f8      	str	r0, [r7, #12]
     ddc:	60b9      	str	r1, [r7, #8]
     dde:	607a      	str	r2, [r7, #4]
	uint8_t i;
	bool_t NMTisPreOrOperational = false;
     de0:	2300      	movs	r3, #0
     de2:	75bb      	strb	r3, [r7, #22]
	CO_NMT_reset_cmd_t reset = CO_RESET_NOT;
     de4:	2300      	movs	r3, #0
     de6:	757b      	strb	r3, [r7, #21]
	ms50 = 0;
     de8:	68fb      	ldr	r3, [r7, #12]
     dea:	2200      	movs	r2, #0
     dec:	f8c3 2a20 	str.w	r2, [r3, #2592]	; 0xa20
	if(CO->NMT->operatingState == CO_NMT_PRE_OPERATIONAL || CO->NMT->operatingState == CO_NMT_OPERATIONAL)
     df0:	68fb      	ldr	r3, [r7, #12]
     df2:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
     df6:	691b      	ldr	r3, [r3, #16]
     df8:	781b      	ldrb	r3, [r3, #0]
     dfa:	2b7f      	cmp	r3, #127	; 0x7f
     dfc:	d006      	beq.n	e0c <_ZN8CO_Class7ProcessEmPm+0x38>
     dfe:	68fb      	ldr	r3, [r7, #12]
     e00:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
     e04:	691b      	ldr	r3, [r3, #16]
     e06:	781b      	ldrb	r3, [r3, #0]
     e08:	2b05      	cmp	r3, #5
     e0a:	d101      	bne.n	e10 <_ZN8CO_Class7ProcessEmPm+0x3c>
	NMTisPreOrOperational = true;
     e0c:	2301      	movs	r3, #1
     e0e:	75bb      	strb	r3, [r7, #22]

	ms50 += timeDifference_ms;
     e10:	68fb      	ldr	r3, [r7, #12]
     e12:	f8d3 2a20 	ldr.w	r2, [r3, #2592]	; 0xa20
     e16:	68bb      	ldr	r3, [r7, #8]
     e18:	441a      	add	r2, r3
     e1a:	68fb      	ldr	r3, [r7, #12]
     e1c:	f8c3 2a20 	str.w	r2, [r3, #2592]	; 0xa20
	if(ms50 >= 50){
     e20:	68fb      	ldr	r3, [r7, #12]
     e22:	f8d3 3a20 	ldr.w	r3, [r3, #2592]	; 0xa20
     e26:	2b31      	cmp	r3, #49	; 0x31
     e28:	d90c      	bls.n	e44 <_ZN8CO_Class7ProcessEmPm+0x70>
		ms50 -= 50;
     e2a:	68fb      	ldr	r3, [r7, #12]
     e2c:	f8d3 3a20 	ldr.w	r3, [r3, #2592]	; 0xa20
     e30:	f1a3 0232 	sub.w	r2, r3, #50	; 0x32
     e34:	68fb      	ldr	r3, [r7, #12]
     e36:	f8c3 2a20 	str.w	r2, [r3, #2592]	; 0xa20
		CO_NMT_blinkingProcess50ms();
     e3a:	68fb      	ldr	r3, [r7, #12]
     e3c:	3310      	adds	r3, #16
     e3e:	4618      	mov	r0, r3
     e40:	4b2c      	ldr	r3, [pc, #176]	; (ef4 <_ZN8CO_Class7ProcessEmPm+0x120>)
     e42:	4798      	blx	r3
	}
	if(timerNext_ms != NULL){
     e44:	687b      	ldr	r3, [r7, #4]
     e46:	2b00      	cmp	r3, #0
     e48:	d006      	beq.n	e58 <_ZN8CO_Class7ProcessEmPm+0x84>
		if(*timerNext_ms > 50){
     e4a:	687b      	ldr	r3, [r7, #4]
     e4c:	681b      	ldr	r3, [r3, #0]
     e4e:	2b32      	cmp	r3, #50	; 0x32
     e50:	d902      	bls.n	e58 <_ZN8CO_Class7ProcessEmPm+0x84>
			*timerNext_ms = 50;
     e52:	687b      	ldr	r3, [r7, #4]
     e54:	2232      	movs	r2, #50	; 0x32
     e56:	601a      	str	r2, [r3, #0]
		}
	}


	for(i=0; i<CO_NO_SDO_SERVER; i++){
     e58:	2300      	movs	r3, #0
     e5a:	75fb      	strb	r3, [r7, #23]
     e5c:	7dfb      	ldrb	r3, [r7, #23]
     e5e:	2b00      	cmp	r3, #0
     e60:	dc0d      	bgt.n	e7e <_ZN8CO_Class7ProcessEmPm+0xaa>
		CO_SDO_process(
     e62:	68fb      	ldr	r3, [r7, #12]
     e64:	1d18      	adds	r0, r3, #4
	
		NMTisPreOrOperational,
		timeDifference_ms,
		1000,
		timerNext_ms);
     e66:	7db9      	ldrb	r1, [r7, #22]
     e68:	687b      	ldr	r3, [r7, #4]
     e6a:	9300      	str	r3, [sp, #0]
     e6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     e70:	68ba      	ldr	r2, [r7, #8]
     e72:	4c21      	ldr	r4, [pc, #132]	; (ef8 <_ZN8CO_Class7ProcessEmPm+0x124>)
     e74:	47a0      	blx	r4
	for(i=0; i<CO_NO_SDO_SERVER; i++){
     e76:	7dfb      	ldrb	r3, [r7, #23]
     e78:	3301      	adds	r3, #1
     e7a:	75fb      	strb	r3, [r7, #23]
     e7c:	e7ee      	b.n	e5c <_ZN8CO_Class7ProcessEmPm+0x88>
	}

	EM_process(
     e7e:	68fb      	ldr	r3, [r7, #12]
     e80:	1d18      	adds	r0, r3, #4
	CO->emPr,
     e82:	68fb      	ldr	r3, [r7, #12]
     e84:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	EM_process(
     e88:	68d9      	ldr	r1, [r3, #12]
     e8a:	68ba      	ldr	r2, [r7, #8]
     e8c:	4613      	mov	r3, r2
     e8e:	009b      	lsls	r3, r3, #2
     e90:	4413      	add	r3, r2
     e92:	005b      	lsls	r3, r3, #1
     e94:	461c      	mov	r4, r3
	NMTisPreOrOperational,
	timeDifference_ms * 10,
	OD_inhibitTimeEMCY);
     e96:	4b19      	ldr	r3, [pc, #100]	; (efc <_ZN8CO_Class7ProcessEmPm+0x128>)
     e98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
     e9a:	7dba      	ldrb	r2, [r7, #22]
     e9c:	9300      	str	r3, [sp, #0]
     e9e:	4623      	mov	r3, r4
     ea0:	4c17      	ldr	r4, [pc, #92]	; (f00 <_ZN8CO_Class7ProcessEmPm+0x12c>)
     ea2:	47a0      	blx	r4


	reset = CO_NMT_process(
     ea4:	68fb      	ldr	r3, [r7, #12]
     ea6:	f103 0010 	add.w	r0, r3, #16
	timeDifference_ms,
	OD_producerHeartbeatTime,
     eaa:	4b14      	ldr	r3, [pc, #80]	; (efc <_ZN8CO_Class7ProcessEmPm+0x128>)
     eac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
	reset = CO_NMT_process(
     eb0:	461c      	mov	r4, r3
     eb2:	4b12      	ldr	r3, [pc, #72]	; (efc <_ZN8CO_Class7ProcessEmPm+0x128>)
     eb4:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
     eb8:	4b12      	ldr	r3, [pc, #72]	; (f04 <_ZN8CO_Class7ProcessEmPm+0x130>)
     eba:	791b      	ldrb	r3, [r3, #4]
	OD_NMTStartup,
	OD_errorRegister,
	OD_errorBehavior,
	timerNext_ms);
     ebc:	687a      	ldr	r2, [r7, #4]
     ebe:	9202      	str	r2, [sp, #8]
     ec0:	4a11      	ldr	r2, [pc, #68]	; (f08 <_ZN8CO_Class7ProcessEmPm+0x134>)
     ec2:	9201      	str	r2, [sp, #4]
     ec4:	9300      	str	r3, [sp, #0]
     ec6:	460b      	mov	r3, r1
     ec8:	4622      	mov	r2, r4
     eca:	68b9      	ldr	r1, [r7, #8]
     ecc:	4c0f      	ldr	r4, [pc, #60]	; (f0c <_ZN8CO_Class7ProcessEmPm+0x138>)
     ece:	47a0      	blx	r4
     ed0:	4603      	mov	r3, r0
     ed2:	757b      	strb	r3, [r7, #21]


	CO_HBconsumer_process(
     ed4:	68fb      	ldr	r3, [r7, #12]
     ed6:	f103 0014 	add.w	r0, r3, #20
	CO->HBcons,
     eda:	68fb      	ldr	r3, [r7, #12]
     edc:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	CO_HBconsumer_process(
     ee0:	6b99      	ldr	r1, [r3, #56]	; 0x38
	NMTisPreOrOperational,
	timeDifference_ms);
     ee2:	7dba      	ldrb	r2, [r7, #22]
     ee4:	68bb      	ldr	r3, [r7, #8]
     ee6:	4c0a      	ldr	r4, [pc, #40]	; (f10 <_ZN8CO_Class7ProcessEmPm+0x13c>)
     ee8:	47a0      	blx	r4

	return reset;
     eea:	7d7b      	ldrb	r3, [r7, #21]
}
     eec:	4618      	mov	r0, r3
     eee:	371c      	adds	r7, #28
     ef0:	46bd      	mov	sp, r7
     ef2:	bd90      	pop	{r4, r7, pc}
     ef4:	00002929 	.word	0x00002929
     ef8:	00004f15 	.word	0x00004f15
     efc:	20000184 	.word	0x20000184
     f00:	00001e79 	.word	0x00001e79
     f04:	20000008 	.word	0x20000008
     f08:	200001dd 	.word	0x200001dd
     f0c:	00002af1 	.word	0x00002af1
     f10:	00002615 	.word	0x00002615

00000f14 <_ZN8CO_Class20CO_process_SYNC_RPDOEm>:


/******************************************************************************/
bool_t CO_Class::CO_process_SYNC_RPDO(uint32_t                timeDifference_us)
{
     f14:	b590      	push	{r4, r7, lr}
     f16:	b085      	sub	sp, #20
     f18:	af00      	add	r7, sp, #0
     f1a:	6078      	str	r0, [r7, #4]
     f1c:	6039      	str	r1, [r7, #0]
	uint32_t i;
	bool_t syncWas = false;
     f1e:	2300      	movs	r3, #0
     f20:	72fb      	strb	r3, [r7, #11]

	switch(CO_SYNC_process(CO->SYNC, timeDifference_us, OD_synchronousWindowLength)){
     f22:	687b      	ldr	r3, [r7, #4]
     f24:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
     f28:	6959      	ldr	r1, [r3, #20]
     f2a:	4b17      	ldr	r3, [pc, #92]	; (f88 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x74>)
     f2c:	691b      	ldr	r3, [r3, #16]
     f2e:	683a      	ldr	r2, [r7, #0]
     f30:	6878      	ldr	r0, [r7, #4]
     f32:	4c16      	ldr	r4, [pc, #88]	; (f8c <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x78>)
     f34:	47a0      	blx	r4
     f36:	4603      	mov	r3, r0
     f38:	2b01      	cmp	r3, #1
     f3a:	d002      	beq.n	f42 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x2e>
     f3c:	2b02      	cmp	r3, #2
     f3e:	d003      	beq.n	f48 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x34>
     f40:	e007      	b.n	f52 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x3e>
		case 1:     //immediately after the SYNC message
		syncWas = true;
     f42:	2301      	movs	r3, #1
     f44:	72fb      	strb	r3, [r7, #11]
		break;
     f46:	e004      	b.n	f52 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x3e>
		case 2:     //outside SYNC window
		CANClearPendingSyncPDOs();
     f48:	687b      	ldr	r3, [r7, #4]
     f4a:	4618      	mov	r0, r3
     f4c:	4b10      	ldr	r3, [pc, #64]	; (f90 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x7c>)
     f4e:	4798      	blx	r3
		break;
     f50:	bf00      	nop
	}

	for(i=0; i<CO_NO_RPDO; i++){
     f52:	2300      	movs	r3, #0
     f54:	60fb      	str	r3, [r7, #12]
     f56:	68fb      	ldr	r3, [r7, #12]
     f58:	2b03      	cmp	r3, #3
     f5a:	d80f      	bhi.n	f7c <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x68>
		CO_RPDO_process(CO->RPDO[i], syncWas);
     f5c:	687b      	ldr	r3, [r7, #4]
     f5e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
     f62:	68fa      	ldr	r2, [r7, #12]
     f64:	3206      	adds	r2, #6
     f66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
     f6a:	7afa      	ldrb	r2, [r7, #11]
     f6c:	4619      	mov	r1, r3
     f6e:	6878      	ldr	r0, [r7, #4]
     f70:	4b08      	ldr	r3, [pc, #32]	; (f94 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x80>)
     f72:	4798      	blx	r3
	for(i=0; i<CO_NO_RPDO; i++){
     f74:	68fb      	ldr	r3, [r7, #12]
     f76:	3301      	adds	r3, #1
     f78:	60fb      	str	r3, [r7, #12]
     f7a:	e7ec      	b.n	f56 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x42>
	}

	return syncWas;
     f7c:	7afb      	ldrb	r3, [r7, #11]
}
     f7e:	4618      	mov	r0, r3
     f80:	3714      	adds	r7, #20
     f82:	46bd      	mov	sp, r7
     f84:	bd90      	pop	{r4, r7, pc}
     f86:	bf00      	nop
     f88:	20000184 	.word	0x20000184
     f8c:	000066d9 	.word	0x000066d9
     f90:	00001735 	.word	0x00001735
     f94:	00003fc9 	.word	0x00003fc9

00000f98 <_ZN8CO_Class15CO_process_TPDOEhm>:


/******************************************************************************/
void CO_Class::CO_process_TPDO(bool_t                  syncWas,
uint32_t                timeDifference_us)
{
     f98:	b590      	push	{r4, r7, lr}
     f9a:	b089      	sub	sp, #36	; 0x24
     f9c:	af02      	add	r7, sp, #8
     f9e:	60f8      	str	r0, [r7, #12]
     fa0:	460b      	mov	r3, r1
     fa2:	607a      	str	r2, [r7, #4]
     fa4:	72fb      	strb	r3, [r7, #11]
	uint32_t i;

	/* Verify PDO Change Of State and process PDOs */
	for(i=0; i<CO_NO_TPDO; i++){
     fa6:	2300      	movs	r3, #0
     fa8:	617b      	str	r3, [r7, #20]
     faa:	697b      	ldr	r3, [r7, #20]
     fac:	2b03      	cmp	r3, #3
     fae:	d833      	bhi.n	1018 <_ZN8CO_Class15CO_process_TPDOEhm+0x80>
		if(!CO->TPDO[i]->sendRequest) CO->TPDO[i]->sendRequest = CO_TPDOisCOS(CO->TPDO[i]);
     fb0:	68fb      	ldr	r3, [r7, #12]
     fb2:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
     fb6:	697a      	ldr	r2, [r7, #20]
     fb8:	320a      	adds	r2, #10
     fba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
     fbe:	7fdb      	ldrb	r3, [r3, #31]
     fc0:	2b00      	cmp	r3, #0
     fc2:	d113      	bne.n	fec <_ZN8CO_Class15CO_process_TPDOEhm+0x54>
     fc4:	68fb      	ldr	r3, [r7, #12]
     fc6:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
     fca:	697a      	ldr	r2, [r7, #20]
     fcc:	320a      	adds	r2, #10
     fce:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
     fd2:	68fb      	ldr	r3, [r7, #12]
     fd4:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
     fd8:	697a      	ldr	r2, [r7, #20]
     fda:	320a      	adds	r2, #10
     fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
     fe0:	4619      	mov	r1, r3
     fe2:	68f8      	ldr	r0, [r7, #12]
     fe4:	4b0e      	ldr	r3, [pc, #56]	; (1020 <_ZN8CO_Class15CO_process_TPDOEhm+0x88>)
     fe6:	4798      	blx	r3
     fe8:	4603      	mov	r3, r0
     fea:	77e3      	strb	r3, [r4, #31]
		CO_TPDO_process(CO->TPDO[i], CO->SYNC, syncWas, timeDifference_us);
     fec:	68fb      	ldr	r3, [r7, #12]
     fee:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
     ff2:	697a      	ldr	r2, [r7, #20]
     ff4:	320a      	adds	r2, #10
     ff6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
     ffa:	68fb      	ldr	r3, [r7, #12]
     ffc:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    1000:	695a      	ldr	r2, [r3, #20]
    1002:	7af8      	ldrb	r0, [r7, #11]
    1004:	687b      	ldr	r3, [r7, #4]
    1006:	9300      	str	r3, [sp, #0]
    1008:	4603      	mov	r3, r0
    100a:	68f8      	ldr	r0, [r7, #12]
    100c:	4c05      	ldr	r4, [pc, #20]	; (1024 <_ZN8CO_Class15CO_process_TPDOEhm+0x8c>)
    100e:	47a0      	blx	r4
	for(i=0; i<CO_NO_TPDO; i++){
    1010:	697b      	ldr	r3, [r7, #20]
    1012:	3301      	adds	r3, #1
    1014:	617b      	str	r3, [r7, #20]
    1016:	e7c8      	b.n	faa <_ZN8CO_Class15CO_process_TPDOEhm+0x12>
	}
}
    1018:	bf00      	nop
    101a:	371c      	adds	r7, #28
    101c:	46bd      	mov	sp, r7
    101e:	bd90      	pop	{r4, r7, pc}
    1020:	00003d4d 	.word	0x00003d4d
    1024:	00004099 	.word	0x00004099

00001028 <_ZN14CO_CRC16_ClassC1Ev>:
	0x6E17U, 0x7E36U, 0x4E55U, 0x5E74U, 0x2E93U, 0x3EB2U, 0x0ED1U, 0x1EF0U
};


// default constructor
CO_CRC16_Class::CO_CRC16_Class()
    1028:	b480      	push	{r7}
    102a:	b083      	sub	sp, #12
    102c:	af00      	add	r7, sp, #0
    102e:	6078      	str	r0, [r7, #4]
{
} //CO_CRC16_Class
    1030:	687b      	ldr	r3, [r7, #4]
    1032:	4618      	mov	r0, r3
    1034:	370c      	adds	r7, #12
    1036:	46bd      	mov	sp, r7
    1038:	bc80      	pop	{r7}
    103a:	4770      	bx	lr

0000103c <_ZN14CO_CRC16_ClassD1Ev>:

// default destructor
CO_CRC16_Class::~CO_CRC16_Class()
    103c:	b480      	push	{r7}
    103e:	b083      	sub	sp, #12
    1040:	af00      	add	r7, sp, #0
    1042:	6078      	str	r0, [r7, #4]
{
} //~CO_CRC16_Class
    1044:	687b      	ldr	r3, [r7, #4]
    1046:	4618      	mov	r0, r3
    1048:	370c      	adds	r7, #12
    104a:	46bd      	mov	sp, r7
    104c:	bc80      	pop	{r7}
    104e:	4770      	bx	lr

00001050 <_ZN14CO_CRC16_Class11crc16_ccittEPKhjt>:
/******************************************************************************/
unsigned short CO_CRC16_Class::crc16_ccitt(
const unsigned char     block[],
unsigned int            blockLength,
unsigned short          crc)
{
    1050:	b480      	push	{r7}
    1052:	b087      	sub	sp, #28
    1054:	af00      	add	r7, sp, #0
    1056:	60f8      	str	r0, [r7, #12]
    1058:	60b9      	str	r1, [r7, #8]
    105a:	607a      	str	r2, [r7, #4]
    105c:	807b      	strh	r3, [r7, #2]
	unsigned int i;

	for(i=0U; i<blockLength; i++){
    105e:	2300      	movs	r3, #0
    1060:	617b      	str	r3, [r7, #20]
    1062:	697a      	ldr	r2, [r7, #20]
    1064:	687b      	ldr	r3, [r7, #4]
    1066:	429a      	cmp	r2, r3
    1068:	d217      	bcs.n	109a <_ZN14CO_CRC16_Class11crc16_ccittEPKhjt+0x4a>
		unsigned short tmp = (crc >> 8) ^ (unsigned short) block[i];
    106a:	887b      	ldrh	r3, [r7, #2]
    106c:	121b      	asrs	r3, r3, #8
    106e:	b21a      	sxth	r2, r3
    1070:	68b9      	ldr	r1, [r7, #8]
    1072:	697b      	ldr	r3, [r7, #20]
    1074:	440b      	add	r3, r1
    1076:	781b      	ldrb	r3, [r3, #0]
    1078:	b21b      	sxth	r3, r3
    107a:	4053      	eors	r3, r2
    107c:	b21b      	sxth	r3, r3
    107e:	827b      	strh	r3, [r7, #18]
		crc = ((unsigned short)(crc << 8U)) ^ crc16_ccitt_table[tmp];
    1080:	887b      	ldrh	r3, [r7, #2]
    1082:	021b      	lsls	r3, r3, #8
    1084:	b29a      	uxth	r2, r3
    1086:	8a7b      	ldrh	r3, [r7, #18]
    1088:	4907      	ldr	r1, [pc, #28]	; (10a8 <_ZN14CO_CRC16_Class11crc16_ccittEPKhjt+0x58>)
    108a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    108e:	4053      	eors	r3, r2
    1090:	807b      	strh	r3, [r7, #2]
	for(i=0U; i<blockLength; i++){
    1092:	697b      	ldr	r3, [r7, #20]
    1094:	3301      	adds	r3, #1
    1096:	617b      	str	r3, [r7, #20]
    1098:	e7e3      	b.n	1062 <_ZN14CO_CRC16_Class11crc16_ccittEPKhjt+0x12>
	}
	return crc;
    109a:	887b      	ldrh	r3, [r7, #2]
    109c:	4618      	mov	r0, r3
    109e:	371c      	adds	r7, #28
    10a0:	46bd      	mov	sp, r7
    10a2:	bc80      	pop	{r7}
    10a4:	4770      	bx	lr
    10a6:	bf00      	nop
    10a8:	000130bc 	.word	0x000130bc

000010ac <hri_can_read_TXFQS_TFFL_bf>:
{
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFFL(mask)) >> CAN_TXFQS_TFFL_Pos;
}

static inline hri_can_txfqs_reg_t hri_can_read_TXFQS_TFFL_bf(const void *const hw)
{
    10ac:	b480      	push	{r7}
    10ae:	b083      	sub	sp, #12
    10b0:	af00      	add	r7, sp, #0
    10b2:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFFL_Msk) >> CAN_TXFQS_TFFL_Pos;
    10b4:	687b      	ldr	r3, [r7, #4]
    10b6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    10ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
    10be:	4618      	mov	r0, r3
    10c0:	370c      	adds	r7, #12
    10c2:	46bd      	mov	sp, r7
    10c4:	bc80      	pop	{r7}
    10c6:	4770      	bx	lr

000010c8 <_ZL14CO_rx_callbackP20can_async_descriptor>:
#include "CO_Driver_Class.h"

CO_Driver_Class		*ptrCODriverClass;

static void CO_rx_callback(struct can_async_descriptor *const descr)
{
    10c8:	b580      	push	{r7, lr}
    10ca:	b082      	sub	sp, #8
    10cc:	af00      	add	r7, sp, #0
    10ce:	6078      	str	r0, [r7, #4]
	ptrCODriverClass->receivedCOMsg.data=ptrCODriverClass->co_rx_buffer_64;
    10d0:	4b0a      	ldr	r3, [pc, #40]	; (10fc <_ZL14CO_rx_callbackP20can_async_descriptor+0x34>)
    10d2:	681b      	ldr	r3, [r3, #0]
    10d4:	4a09      	ldr	r2, [pc, #36]	; (10fc <_ZL14CO_rx_callbackP20can_async_descriptor+0x34>)
    10d6:	6812      	ldr	r2, [r2, #0]
    10d8:	321f      	adds	r2, #31
    10da:	669a      	str	r2, [r3, #104]	; 0x68
	can_async_read(descr, &(ptrCODriverClass->receivedCOMsg));
    10dc:	4b07      	ldr	r3, [pc, #28]	; (10fc <_ZL14CO_rx_callbackP20can_async_descriptor+0x34>)
    10de:	681b      	ldr	r3, [r3, #0]
    10e0:	3360      	adds	r3, #96	; 0x60
    10e2:	4619      	mov	r1, r3
    10e4:	6878      	ldr	r0, [r7, #4]
    10e6:	4b06      	ldr	r3, [pc, #24]	; (1100 <_ZL14CO_rx_callbackP20can_async_descriptor+0x38>)
    10e8:	4798      	blx	r3
	ptrCODriverClass->receivedRxCOCallback=true;
    10ea:	4b04      	ldr	r3, [pc, #16]	; (10fc <_ZL14CO_rx_callbackP20can_async_descriptor+0x34>)
    10ec:	681b      	ldr	r3, [r3, #0]
    10ee:	2201      	movs	r2, #1
    10f0:	771a      	strb	r2, [r3, #28]
// 	if(ptrCODriver->RxFifo_Callback_CanModule_p != NULL)
// 	{
// 		ProcessInterrupt_Rx();
// 	
}
    10f2:	bf00      	nop
    10f4:	3708      	adds	r7, #8
    10f6:	46bd      	mov	sp, r7
    10f8:	bd80      	pop	{r7, pc}
    10fa:	bf00      	nop
    10fc:	20000960 	.word	0x20000960
    1100:	00007d8d 	.word	0x00007d8d

00001104 <_ZL21CO_IRQ_Error_CallbackP20can_async_descriptor>:

static void CO_IRQ_Error_Callback(struct can_async_descriptor *const descr)
{
    1104:	b590      	push	{r4, r7, lr}
    1106:	b083      	sub	sp, #12
    1108:	af00      	add	r7, sp, #0
    110a:	6078      	str	r0, [r7, #4]
	
	ptrCODriverClass->HalCanErrorCode= can_async_read(descr, &(ptrCODriverClass->receivedCOMsg));
    110c:	4b09      	ldr	r3, [pc, #36]	; (1134 <_ZL21CO_IRQ_Error_CallbackP20can_async_descriptor+0x30>)
    110e:	681c      	ldr	r4, [r3, #0]
    1110:	4b08      	ldr	r3, [pc, #32]	; (1134 <_ZL21CO_IRQ_Error_CallbackP20can_async_descriptor+0x30>)
    1112:	681b      	ldr	r3, [r3, #0]
    1114:	3360      	adds	r3, #96	; 0x60
    1116:	4619      	mov	r1, r3
    1118:	6878      	ldr	r0, [r7, #4]
    111a:	4b07      	ldr	r3, [pc, #28]	; (1138 <_ZL21CO_IRQ_Error_CallbackP20can_async_descriptor+0x34>)
    111c:	4798      	blx	r3
    111e:	4603      	mov	r3, r0
    1120:	61a3      	str	r3, [r4, #24]
	ptrCODriverClass->receivedIntCOCallback=true;
    1122:	4b04      	ldr	r3, [pc, #16]	; (1134 <_ZL21CO_IRQ_Error_CallbackP20can_async_descriptor+0x30>)
    1124:	681b      	ldr	r3, [r3, #0]
    1126:	2201      	movs	r2, #1
    1128:	779a      	strb	r2, [r3, #30]
}
    112a:	bf00      	nop
    112c:	370c      	adds	r7, #12
    112e:	46bd      	mov	sp, r7
    1130:	bd90      	pop	{r4, r7, pc}
    1132:	bf00      	nop
    1134:	20000960 	.word	0x20000960
    1138:	00007d8d 	.word	0x00007d8d

0000113c <_ZL14CO_tx_callbackP20can_async_descriptor>:


static void CO_tx_callback(struct can_async_descriptor *const descr)
{
    113c:	b480      	push	{r7}
    113e:	b083      	sub	sp, #12
    1140:	af00      	add	r7, sp, #0
    1142:	6078      	str	r0, [r7, #4]
	(void)descr;
	ptrCODriverClass->receivedtxCOCallback=true;
    1144:	4b04      	ldr	r3, [pc, #16]	; (1158 <_ZL14CO_tx_callbackP20can_async_descriptor+0x1c>)
    1146:	681b      	ldr	r3, [r3, #0]
    1148:	2201      	movs	r2, #1
    114a:	775a      	strb	r2, [r3, #29]
	
}
    114c:	bf00      	nop
    114e:	370c      	adds	r7, #12
    1150:	46bd      	mov	sp, r7
    1152:	bc80      	pop	{r7}
    1154:	4770      	bx	lr
    1156:	bf00      	nop
    1158:	20000960 	.word	0x20000960

0000115c <_ZN15CO_Driver_ClassC1Ev>:

// default constructor
CO_Driver_Class::CO_Driver_Class()
    115c:	b580      	push	{r7, lr}
    115e:	b082      	sub	sp, #8
    1160:	af00      	add	r7, sp, #0
    1162:	6078      	str	r0, [r7, #4]
    1164:	687b      	ldr	r3, [r7, #4]
    1166:	3304      	adds	r3, #4
    1168:	4618      	mov	r0, r3
    116a:	4b10      	ldr	r3, [pc, #64]	; (11ac <_ZN15CO_Driver_ClassC1Ev+0x50>)
    116c:	4798      	blx	r3
    116e:	687b      	ldr	r3, [r7, #4]
    1170:	3310      	adds	r3, #16
    1172:	4618      	mov	r0, r3
    1174:	4b0e      	ldr	r3, [pc, #56]	; (11b0 <_ZN15CO_Driver_ClassC1Ev+0x54>)
    1176:	4798      	blx	r3
    1178:	6878      	ldr	r0, [r7, #4]
    117a:	4b0e      	ldr	r3, [pc, #56]	; (11b4 <_ZN15CO_Driver_ClassC1Ev+0x58>)
    117c:	4798      	blx	r3
    117e:	6878      	ldr	r0, [r7, #4]
    1180:	4b0d      	ldr	r3, [pc, #52]	; (11b8 <_ZN15CO_Driver_ClassC1Ev+0x5c>)
    1182:	4798      	blx	r3
    1184:	687b      	ldr	r3, [r7, #4]
    1186:	3314      	adds	r3, #20
    1188:	4618      	mov	r0, r3
    118a:	4b0c      	ldr	r3, [pc, #48]	; (11bc <_ZN15CO_Driver_ClassC1Ev+0x60>)
    118c:	4798      	blx	r3
    118e:	4a0c      	ldr	r2, [pc, #48]	; (11c0 <_ZN15CO_Driver_ClassC1Ev+0x64>)
    1190:	687b      	ldr	r3, [r7, #4]
    1192:	601a      	str	r2, [r3, #0]
{
	RxFifo_Callback_CanModule_p = NULL;
    1194:	687b      	ldr	r3, [r7, #4]
    1196:	2200      	movs	r2, #0
    1198:	671a      	str	r2, [r3, #112]	; 0x70
	ptrCODriverClass=this;
    119a:	4a0a      	ldr	r2, [pc, #40]	; (11c4 <_ZN15CO_Driver_ClassC1Ev+0x68>)
    119c:	687b      	ldr	r3, [r7, #4]
    119e:	6013      	str	r3, [r2, #0]
} //CO_Driver_Class
    11a0:	687b      	ldr	r3, [r7, #4]
    11a2:	4618      	mov	r0, r3
    11a4:	3708      	adds	r7, #8
    11a6:	46bd      	mov	sp, r7
    11a8:	bd80      	pop	{r7, pc}
    11aa:	bf00      	nop
    11ac:	00001bfd 	.word	0x00001bfd
    11b0:	000027f3 	.word	0x000027f3
    11b4:	0000626d 	.word	0x0000626d
    11b8:	00002f6d 	.word	0x00002f6d
    11bc:	00002529 	.word	0x00002529
    11c0:	000132c4 	.word	0x000132c4
    11c4:	20000960 	.word	0x20000960

000011c8 <_ZN15CO_Driver_ClassD1Ev>:

// default destructor
CO_Driver_Class::~CO_Driver_Class()
    11c8:	b580      	push	{r7, lr}
    11ca:	b082      	sub	sp, #8
    11cc:	af00      	add	r7, sp, #0
    11ce:	6078      	str	r0, [r7, #4]
    11d0:	4a0e      	ldr	r2, [pc, #56]	; (120c <_ZN15CO_Driver_ClassD1Ev+0x44>)
    11d2:	687b      	ldr	r3, [r7, #4]
    11d4:	601a      	str	r2, [r3, #0]
    11d6:	687b      	ldr	r3, [r7, #4]
    11d8:	3314      	adds	r3, #20
    11da:	4618      	mov	r0, r3
    11dc:	4b0c      	ldr	r3, [pc, #48]	; (1210 <_ZN15CO_Driver_ClassD1Ev+0x48>)
    11de:	4798      	blx	r3
    11e0:	6878      	ldr	r0, [r7, #4]
    11e2:	4b0c      	ldr	r3, [pc, #48]	; (1214 <_ZN15CO_Driver_ClassD1Ev+0x4c>)
    11e4:	4798      	blx	r3
    11e6:	6878      	ldr	r0, [r7, #4]
    11e8:	4b0b      	ldr	r3, [pc, #44]	; (1218 <_ZN15CO_Driver_ClassD1Ev+0x50>)
    11ea:	4798      	blx	r3
    11ec:	687b      	ldr	r3, [r7, #4]
    11ee:	3310      	adds	r3, #16
    11f0:	4618      	mov	r0, r3
    11f2:	4b0a      	ldr	r3, [pc, #40]	; (121c <_ZN15CO_Driver_ClassD1Ev+0x54>)
    11f4:	4798      	blx	r3
    11f6:	687b      	ldr	r3, [r7, #4]
    11f8:	3304      	adds	r3, #4
    11fa:	4618      	mov	r0, r3
    11fc:	4b08      	ldr	r3, [pc, #32]	; (1220 <_ZN15CO_Driver_ClassD1Ev+0x58>)
    11fe:	4798      	blx	r3
{
} //~CO_Driver_Class
    1200:	687b      	ldr	r3, [r7, #4]
    1202:	4618      	mov	r0, r3
    1204:	3708      	adds	r7, #8
    1206:	46bd      	mov	sp, r7
    1208:	bd80      	pop	{r7, pc}
    120a:	bf00      	nop
    120c:	000132c4 	.word	0x000132c4
    1210:	0000253d 	.word	0x0000253d
    1214:	00002f81 	.word	0x00002f81
    1218:	00006281 	.word	0x00006281
    121c:	00002807 	.word	0x00002807
    1220:	00001c25 	.word	0x00001c25

00001224 <_ZN15CO_Driver_Class15PrepareTxHeaderEP11can_messageP10CO_CANtx_t>:
 * \param [in]	buffer ponyer to CO_CANtx_t with CANopen configuration data
 *
 * \ingroup CO_driver
 ******************************************************************************/
void CO_Driver_Class::PrepareTxHeader(struct can_message *msgHeader, CO_CANtx_t *buffer)
{
    1224:	b480      	push	{r7}
    1226:	b085      	sub	sp, #20
    1228:	af00      	add	r7, sp, #0
    122a:	60f8      	str	r0, [r7, #12]
    122c:	60b9      	str	r1, [r7, #8]
    122e:	607a      	str	r2, [r7, #4]
	/* Map buffer data to the HAL CAN tx header data*/
	//TxHeader->ExtId = 0u;
	msgHeader->id=0;
    1230:	68bb      	ldr	r3, [r7, #8]
    1232:	2200      	movs	r2, #0
    1234:	601a      	str	r2, [r3, #0]
	//TxHeader->IDE = 0;
	msgHeader->fmt=CAN_FMT_STDID;
    1236:	68bb      	ldr	r3, [r7, #8]
    1238:	2200      	movs	r2, #0
    123a:	735a      	strb	r2, [r3, #13]
	
	//TxHeader->DLC = buffer->DLC;
	msgHeader->len=buffer->DLC;
    123c:	687b      	ldr	r3, [r7, #4]
    123e:	791a      	ldrb	r2, [r3, #4]
    1240:	68bb      	ldr	r3, [r7, #8]
    1242:	731a      	strb	r2, [r3, #12]
	
	//TxHeader->StdId = ( buffer->ident >> 2 );
	msgHeader->id=( buffer->ident >> 2 );
    1244:	687b      	ldr	r3, [r7, #4]
    1246:	681b      	ldr	r3, [r3, #0]
    1248:	089a      	lsrs	r2, r3, #2
    124a:	68bb      	ldr	r3, [r7, #8]
    124c:	601a      	str	r2, [r3, #0]
	
	//TxHeader->RTR = ( buffer->ident & 0x2 );
	msgHeader->type=(can_type)( buffer->ident & 0x2 );
    124e:	687b      	ldr	r3, [r7, #4]
    1250:	681b      	ldr	r3, [r3, #0]
    1252:	b2db      	uxtb	r3, r3
    1254:	f003 0302 	and.w	r3, r3, #2
    1258:	b2da      	uxtb	r2, r3
    125a:	68bb      	ldr	r3, [r7, #8]
    125c:	711a      	strb	r2, [r3, #4]
}
    125e:	bf00      	nop
    1260:	3714      	adds	r7, #20
    1262:	46bd      	mov	sp, r7
    1264:	bc80      	pop	{r7}
    1266:	4770      	bx	lr

00001268 <_ZN15CO_Driver_Class21ConvertCANMsg2CORxMsgER11can_messageP13CO_CANrxMsg_t>:

void CO_Driver_Class::ConvertCANMsg2CORxMsg(can_message& msgHeader, CO_CANrxMsg_t *rxMsg)
{
    1268:	b490      	push	{r4, r7}
    126a:	b084      	sub	sp, #16
    126c:	af00      	add	r7, sp, #0
    126e:	60f8      	str	r0, [r7, #12]
    1270:	60b9      	str	r1, [r7, #8]
    1272:	607a      	str	r2, [r7, #4]
	rxMsg->RxHeader=msgHeader;
    1274:	687a      	ldr	r2, [r7, #4]
    1276:	68bb      	ldr	r3, [r7, #8]
    1278:	4614      	mov	r4, r2
    127a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    127c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	rxMsg->DLC=msgHeader.len;
    1280:	68bb      	ldr	r3, [r7, #8]
    1282:	7b1a      	ldrb	r2, [r3, #12]
    1284:	687b      	ldr	r3, [r7, #4]
    1286:	751a      	strb	r2, [r3, #20]
	rxMsg->ident=msgHeader.id<<2;
    1288:	68bb      	ldr	r3, [r7, #8]
    128a:	681b      	ldr	r3, [r3, #0]
    128c:	009a      	lsls	r2, r3, #2
    128e:	687b      	ldr	r3, [r7, #4]
    1290:	611a      	str	r2, [r3, #16]
	/* Map buffer data to the HAL CAN tx header data*/
	//TxHeader->ExtId = 0u;

}
    1292:	bf00      	nop
    1294:	3710      	adds	r7, #16
    1296:	46bd      	mov	sp, r7
    1298:	bc90      	pop	{r4, r7}
    129a:	4770      	bx	lr

0000129c <_ZN15CO_Driver_Class26CO_CANsetConfigurationModeEP20can_async_descriptor>:
	{
		;//TODO add assert here
	}
}

void CO_Driver_Class::CO_CANsetConfigurationMode(can_async_descriptor *descr){
    129c:	b480      	push	{r7}
    129e:	b083      	sub	sp, #12
    12a0:	af00      	add	r7, sp, #0
    12a2:	6078      	str	r0, [r7, #4]
    12a4:	6039      	str	r1, [r7, #0]
	
	canDescr=descr;
    12a6:	687b      	ldr	r3, [r7, #4]
    12a8:	683a      	ldr	r2, [r7, #0]
    12aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	/* Put CAN module in configuration mode */
	/* HAL is responsible for that */
}
    12ae:	bf00      	nop
    12b0:	370c      	adds	r7, #12
    12b2:	46bd      	mov	sp, r7
    12b4:	bc80      	pop	{r7}
    12b6:	4770      	bx	lr

000012b8 <_ZN15CO_Driver_Class19CO_CANsetNormalModeEv>:

/******************************************************************************/
CO_ReturnError_t CO_Driver_Class::CO_CANsetNormalMode(void){
    12b8:	b580      	push	{r7, lr}
    12ba:	b084      	sub	sp, #16
    12bc:	af00      	add	r7, sp, #0
    12be:	6078      	str	r0, [r7, #4]
	/* Put CAN module in normal mode */
	int32_t		error_CAN_hal;
	Error = CO_ERROR_NO;
    12c0:	687b      	ldr	r3, [r7, #4]
    12c2:	2200      	movs	r2, #0
    12c4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	error_CAN_hal=can_async_enable(CAN_Module->CANBaseDescriptor);
    12c8:	687b      	ldr	r3, [r7, #4]
    12ca:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    12ce:	681b      	ldr	r3, [r3, #0]
    12d0:	4618      	mov	r0, r3
    12d2:	4b0a      	ldr	r3, [pc, #40]	; (12fc <_ZN15CO_Driver_Class19CO_CANsetNormalModeEv+0x44>)
    12d4:	4798      	blx	r3
    12d6:	60f8      	str	r0, [r7, #12]
	//    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
	//    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
	//    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 1, 0);
	//    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);

	if (error_CAN_hal != CO_ERROR_NO)
    12d8:	68fb      	ldr	r3, [r7, #12]
    12da:	2b00      	cmp	r3, #0
    12dc:	d002      	beq.n	12e4 <_ZN15CO_Driver_Class19CO_CANsetNormalModeEv+0x2c>
	{
		//_Error_Handler(__FILE__, __LINE__);
		return CO_ERROR_HAL;
    12de:	f06f 030e 	mvn.w	r3, #14
    12e2:	e007      	b.n	12f4 <_ZN15CO_Driver_Class19CO_CANsetNormalModeEv+0x3c>
	}
	CAN_Module->CANnormal = true;
    12e4:	687b      	ldr	r3, [r7, #4]
    12e6:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    12ea:	2201      	movs	r2, #1
    12ec:	751a      	strb	r2, [r3, #20]
	return Error;
    12ee:	687b      	ldr	r3, [r7, #4]
    12f0:	f993 3098 	ldrsb.w	r3, [r3, #152]	; 0x98
}
    12f4:	4618      	mov	r0, r3
    12f6:	3710      	adds	r7, #16
    12f8:	46bd      	mov	sp, r7
    12fa:	bd80      	pop	{r7, pc}
    12fc:	00007d15 	.word	0x00007d15

00001300 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm>:
		CO_CANrx_t              rxArray[],
		uint32_t                rxSize,
		CO_CANtx_t              txArray[],
		uint32_t                txSize,
		uint32_t                CANbitRate)
{
    1300:	b580      	push	{r7, lr}
    1302:	b086      	sub	sp, #24
    1304:	af00      	add	r7, sp, #0
    1306:	60f8      	str	r0, [r7, #12]
    1308:	60b9      	str	r1, [r7, #8]
    130a:	607a      	str	r2, [r7, #4]
    130c:	603b      	str	r3, [r7, #0]
	canDescr=HALCanObject;
    130e:	68fb      	ldr	r3, [r7, #12]
    1310:	687a      	ldr	r2, [r7, #4]
    1312:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	
	int32_t		error_CAN_hal;

	/* verify arguments */
	if(CANmodule==NULL || rxArray==NULL || txArray==NULL)
    1316:	68bb      	ldr	r3, [r7, #8]
    1318:	2b00      	cmp	r3, #0
    131a:	d005      	beq.n	1328 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x28>
    131c:	683b      	ldr	r3, [r7, #0]
    131e:	2b00      	cmp	r3, #0
    1320:	d002      	beq.n	1328 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x28>
    1322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1324:	2b00      	cmp	r3, #0
    1326:	d102      	bne.n	132e <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x2e>
	{
		return CO_ERROR_ILLEGAL_ARGUMENT;
    1328:	f04f 33ff 	mov.w	r3, #4294967295
    132c:	e084      	b.n	1438 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x138>
	else
	{
		;//do nothing
	}

	RxFifo_Callback_CanModule_p = CANmodule;
    132e:	68fb      	ldr	r3, [r7, #12]
    1330:	68ba      	ldr	r2, [r7, #8]
    1332:	671a      	str	r2, [r3, #112]	; 0x70

	/* Configure object variables */
	CANmodule->CANBaseDescriptor = (can_async_descriptor*)HALCanObject;
    1334:	68bb      	ldr	r3, [r7, #8]
    1336:	687a      	ldr	r2, [r7, #4]
    1338:	601a      	str	r2, [r3, #0]
	CANmodule->rxArray = rxArray;
    133a:	68bb      	ldr	r3, [r7, #8]
    133c:	683a      	ldr	r2, [r7, #0]
    133e:	605a      	str	r2, [r3, #4]
	CANmodule->rxSize = rxSize;
    1340:	68bb      	ldr	r3, [r7, #8]
    1342:	6a3a      	ldr	r2, [r7, #32]
    1344:	609a      	str	r2, [r3, #8]
	CANmodule->txArray = txArray;
    1346:	68bb      	ldr	r3, [r7, #8]
    1348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    134a:	60da      	str	r2, [r3, #12]
	CANmodule->txSize = txSize;
    134c:	68bb      	ldr	r3, [r7, #8]
    134e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1350:	611a      	str	r2, [r3, #16]
	CANmodule->CANnormal = false;
    1352:	68bb      	ldr	r3, [r7, #8]
    1354:	2200      	movs	r2, #0
    1356:	751a      	strb	r2, [r3, #20]
	CANmodule->useCANrxFilters = false;
    1358:	68bb      	ldr	r3, [r7, #8]
    135a:	2200      	movs	r2, #0
    135c:	755a      	strb	r2, [r3, #21]
	CANmodule->bufferInhibitFlag = false;
    135e:	68bb      	ldr	r3, [r7, #8]
    1360:	2200      	movs	r2, #0
    1362:	759a      	strb	r2, [r3, #22]
	CANmodule->firstCANtxMessage = true;
    1364:	68bb      	ldr	r3, [r7, #8]
    1366:	2201      	movs	r2, #1
    1368:	75da      	strb	r2, [r3, #23]
	CANmodule->CANtxCount = 0U;
    136a:	68bb      	ldr	r3, [r7, #8]
    136c:	2200      	movs	r2, #0
    136e:	619a      	str	r2, [r3, #24]
	CANmodule->errOld = 0U;
    1370:	68bb      	ldr	r3, [r7, #8]
    1372:	2200      	movs	r2, #0
    1374:	61da      	str	r2, [r3, #28]
	CANmodule->em = NULL;
    1376:	68bb      	ldr	r3, [r7, #8]
    1378:	2200      	movs	r2, #0
    137a:	621a      	str	r2, [r3, #32]

	for(i=0U; i<rxSize; i++)
    137c:	68fb      	ldr	r3, [r7, #12]
    137e:	2200      	movs	r2, #0
    1380:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    1384:	68fb      	ldr	r3, [r7, #12]
    1386:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    138a:	6a3b      	ldr	r3, [r7, #32]
    138c:	429a      	cmp	r2, r3
    138e:	d217      	bcs.n	13c0 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0xc0>
	{
		rxArray[i].ident = 0U;
    1390:	68fb      	ldr	r3, [r7, #12]
    1392:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    1396:	011b      	lsls	r3, r3, #4
    1398:	683a      	ldr	r2, [r7, #0]
    139a:	4413      	add	r3, r2
    139c:	2200      	movs	r2, #0
    139e:	601a      	str	r2, [r3, #0]
		rxArray[i].pFunct = NULL;
    13a0:	68fb      	ldr	r3, [r7, #12]
    13a2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    13a6:	011b      	lsls	r3, r3, #4
    13a8:	683a      	ldr	r2, [r7, #0]
    13aa:	4413      	add	r3, r2
    13ac:	2200      	movs	r2, #0
    13ae:	60da      	str	r2, [r3, #12]
	for(i=0U; i<rxSize; i++)
    13b0:	68fb      	ldr	r3, [r7, #12]
    13b2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    13b6:	1c5a      	adds	r2, r3, #1
    13b8:	68fb      	ldr	r3, [r7, #12]
    13ba:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    13be:	e7e1      	b.n	1384 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x84>
	}

	for(i=0U; i<txSize; i++)
    13c0:	68fb      	ldr	r3, [r7, #12]
    13c2:	2200      	movs	r2, #0
    13c4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    13c8:	68fb      	ldr	r3, [r7, #12]
    13ca:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    13ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
    13d0:	429a      	cmp	r2, r3
    13d2:	d20f      	bcs.n	13f4 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0xf4>
	{
		txArray[i].bufferFull = false;
    13d4:	68fb      	ldr	r3, [r7, #12]
    13d6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    13da:	011b      	lsls	r3, r3, #4
    13dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    13de:	4413      	add	r3, r2
    13e0:	2200      	movs	r2, #0
    13e2:	735a      	strb	r2, [r3, #13]
	for(i=0U; i<txSize; i++)
    13e4:	68fb      	ldr	r3, [r7, #12]
    13e6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    13ea:	1c5a      	adds	r2, r3, #1
    13ec:	68fb      	ldr	r3, [r7, #12]
    13ee:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    13f2:	e7e9      	b.n	13c8 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0xc8>
	}


	CANmodule_Disable();
    13f4:	68f8      	ldr	r0, [r7, #12]
    13f6:	4b12      	ldr	r3, [pc, #72]	; (1440 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x140>)
    13f8:	4798      	blx	r3
	error_CAN_hal=can_async_enable(HALCanObject);
    13fa:	6878      	ldr	r0, [r7, #4]
    13fc:	4b11      	ldr	r3, [pc, #68]	; (1444 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x144>)
    13fe:	4798      	blx	r3
    1400:	6178      	str	r0, [r7, #20]
	can_async_register_callback(canDescr, CAN_ASYNC_RX_CB, (FUNC_PTR)CO_rx_callback);
    1402:	68fb      	ldr	r3, [r7, #12]
    1404:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    1408:	4a0f      	ldr	r2, [pc, #60]	; (1448 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x148>)
    140a:	2100      	movs	r1, #0
    140c:	4618      	mov	r0, r3
    140e:	4b0f      	ldr	r3, [pc, #60]	; (144c <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x14c>)
    1410:	4798      	blx	r3
	can_async_register_callback(canDescr, CAN_ASYNC_IRQ_CB, (FUNC_PTR)CO_IRQ_Error_Callback);
    1412:	68fb      	ldr	r3, [r7, #12]
    1414:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    1418:	4a0d      	ldr	r2, [pc, #52]	; (1450 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x150>)
    141a:	2102      	movs	r1, #2
    141c:	4618      	mov	r0, r3
    141e:	4b0b      	ldr	r3, [pc, #44]	; (144c <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x14c>)
    1420:	4798      	blx	r3
	if (error_CAN_hal != CO_ERROR_NO)
    1422:	697b      	ldr	r3, [r7, #20]
    1424:	2b00      	cmp	r3, #0
    1426:	d002      	beq.n	142e <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x12e>
	{
		//_Error_Handler(__FILE__, __LINE__);
		return CO_ERROR_HAL;
    1428:	f06f 030e 	mvn.w	r3, #14
    142c:	e004      	b.n	1438 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x138>
	}
	CAN_Module=CANmodule;
    142e:	68fb      	ldr	r3, [r7, #12]
    1430:	68ba      	ldr	r2, [r7, #8]
    1432:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	return CO_ERROR_NO;
    1436:	2300      	movs	r3, #0
}
    1438:	4618      	mov	r0, r3
    143a:	3718      	adds	r7, #24
    143c:	46bd      	mov	sp, r7
    143e:	bd80      	pop	{r7, pc}
    1440:	00001455 	.word	0x00001455
    1444:	00007d15 	.word	0x00007d15
    1448:	000010c9 	.word	0x000010c9
    144c:	00007e25 	.word	0x00007e25
    1450:	00001105 	.word	0x00001105

00001454 <_ZN15CO_Driver_Class17CANmodule_DisableEv>:


/******************************************************************************/
void CO_Driver_Class::CANmodule_Disable(void){
    1454:	b580      	push	{r7, lr}
    1456:	b082      	sub	sp, #8
    1458:	af00      	add	r7, sp, #0
    145a:	6078      	str	r0, [r7, #4]
			CAN_IT_RX_FIFO0_MSG_PENDING |
			CAN_IT_RX_FIFO1_MSG_PENDING |
			CAN_IT_TX_MAILBOX_EMPTY);
	HAL_CAN_Stop(CANmodule->CANbaseAddress);
	*/
	can_async_disable(CAN_Module->CANBaseDescriptor);
    145c:	687b      	ldr	r3, [r7, #4]
    145e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    1462:	681b      	ldr	r3, [r3, #0]
    1464:	4618      	mov	r0, r3
    1466:	4b03      	ldr	r3, [pc, #12]	; (1474 <_ZN15CO_Driver_Class17CANmodule_DisableEv+0x20>)
    1468:	4798      	blx	r3
}
    146a:	bf00      	nop
    146c:	3708      	adds	r7, #8
    146e:	46bd      	mov	sp, r7
    1470:	bd80      	pop	{r7, pc}
    1472:	bf00      	nop
    1474:	00007d51 	.word	0x00007d51

00001478 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE>:
		uint32_t                ident,
		uint32_t                mask,
		bool_t                  rtr,
		void                   *object,
		void                  (*pFunct)(void *object, const CO_CANrxMsg_t *message))
{
    1478:	b590      	push	{r4, r7, lr}
    147a:	b087      	sub	sp, #28
    147c:	af00      	add	r7, sp, #0
    147e:	60f8      	str	r0, [r7, #12]
    1480:	60b9      	str	r1, [r7, #8]
    1482:	607a      	str	r2, [r7, #4]
    1484:	603b      	str	r3, [r7, #0]
	ret = CO_ERROR_NO;
    1486:	68fb      	ldr	r3, [r7, #12]
    1488:	2200      	movs	r2, #0
    148a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

	if((CAN_Module!=NULL) && (object!=NULL) && (pFunct!=NULL) && (index < CAN_Module->rxSize)){
    148e:	68fb      	ldr	r3, [r7, #12]
    1490:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    1494:	2b00      	cmp	r3, #0
    1496:	d05d      	beq.n	1554 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xdc>
    1498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    149a:	2b00      	cmp	r3, #0
    149c:	d05a      	beq.n	1554 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xdc>
    149e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    14a0:	2b00      	cmp	r3, #0
    14a2:	d057      	beq.n	1554 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xdc>
    14a4:	68fb      	ldr	r3, [r7, #12]
    14a6:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    14aa:	689a      	ldr	r2, [r3, #8]
    14ac:	68bb      	ldr	r3, [r7, #8]
    14ae:	429a      	cmp	r2, r3
    14b0:	d950      	bls.n	1554 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xdc>
		/* buffer, which will be configured */
		CO_CANrx_t *buffer = &CAN_Module->rxArray[index];
    14b2:	68fb      	ldr	r3, [r7, #12]
    14b4:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    14b8:	685a      	ldr	r2, [r3, #4]
    14ba:	68bb      	ldr	r3, [r7, #8]
    14bc:	011b      	lsls	r3, r3, #4
    14be:	4413      	add	r3, r2
    14c0:	617b      	str	r3, [r7, #20]

		/* Configure object variables */
		buffer->object = object;
    14c2:	697b      	ldr	r3, [r7, #20]
    14c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    14c6:	609a      	str	r2, [r3, #8]
		buffer->pFunct = pFunct;
    14c8:	697b      	ldr	r3, [r7, #20]
    14ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    14cc:	60da      	str	r2, [r3, #12]

		/* CAN identifier and CAN mask, bit aligned with CAN module. Different on different microcontrollers. */
		buffer->ident = (ident & 0x07FF) << 2;
    14ce:	687b      	ldr	r3, [r7, #4]
    14d0:	009a      	lsls	r2, r3, #2
    14d2:	f641 73fc 	movw	r3, #8188	; 0x1ffc
    14d6:	4013      	ands	r3, r2
    14d8:	697a      	ldr	r2, [r7, #20]
    14da:	6013      	str	r3, [r2, #0]
		if (rtr)
    14dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    14e0:	2b00      	cmp	r3, #0
    14e2:	d005      	beq.n	14f0 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0x78>
		{
			buffer->ident |= 0x02;
    14e4:	697b      	ldr	r3, [r7, #20]
    14e6:	681b      	ldr	r3, [r3, #0]
    14e8:	f043 0202 	orr.w	r2, r3, #2
    14ec:	697b      	ldr	r3, [r7, #20]
    14ee:	601a      	str	r2, [r3, #0]
		}
		buffer->mask = (mask & 0x07FF) << 2;
    14f0:	683b      	ldr	r3, [r7, #0]
    14f2:	009a      	lsls	r2, r3, #2
    14f4:	f641 73fc 	movw	r3, #8188	; 0x1ffc
    14f8:	4013      	ands	r3, r2
    14fa:	697a      	ldr	r2, [r7, #20]
    14fc:	6053      	str	r3, [r2, #4]
		buffer->mask |= 0x02;
    14fe:	697b      	ldr	r3, [r7, #20]
    1500:	685b      	ldr	r3, [r3, #4]
    1502:	f043 0202 	orr.w	r2, r3, #2
    1506:	697b      	ldr	r3, [r7, #20]
    1508:	605a      	str	r2, [r3, #4]

		/* Set CAN hardware module filter and mask. */
		if(CAN_Module->useCANrxFilters)
    150a:	68fb      	ldr	r3, [r7, #12]
    150c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    1510:	7d5b      	ldrb	r3, [r3, #21]
    1512:	b2db      	uxtb	r3, r3
    1514:	2b00      	cmp	r3, #0
    1516:	bf14      	ite	ne
    1518:	2301      	movne	r3, #1
    151a:	2300      	moveq	r3, #0
    151c:	b2db      	uxtb	r3, r3
    151e:	2b00      	cmp	r3, #0
    1520:	d11d      	bne.n	155e <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xe6>
		else
		{
			/*no hardware filters*/
			//CAN_FilterTypeDef FilterConfig;
		
			CO_Filter.id   = 0;
    1522:	68fb      	ldr	r3, [r7, #12]
    1524:	2200      	movs	r2, #0
    1526:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
			CO_Filter.mask = 0;
    152a:	68fb      	ldr	r3, [r7, #12]
    152c:	2200      	movs	r2, #0
    152e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
			ret= (CO_ReturnError_t)can_async_set_filter(CAN_Module->CANBaseDescriptor, 0, CAN_FMT_STDID, &CO_Filter);
    1532:	68fb      	ldr	r3, [r7, #12]
    1534:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    1538:	6818      	ldr	r0, [r3, #0]
    153a:	68fb      	ldr	r3, [r7, #12]
    153c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
    1540:	2200      	movs	r2, #0
    1542:	2100      	movs	r1, #0
    1544:	4c0a      	ldr	r4, [pc, #40]	; (1570 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xf8>)
    1546:	47a0      	blx	r4
    1548:	4603      	mov	r3, r0
    154a:	b25a      	sxtb	r2, r3
    154c:	68fb      	ldr	r3, [r7, #12]
    154e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
		}
    1552:	e004      	b.n	155e <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xe6>
	}
	else
	{
		ret = CO_ERROR_ILLEGAL_ARGUMENT;
    1554:	68fb      	ldr	r3, [r7, #12]
    1556:	22ff      	movs	r2, #255	; 0xff
    1558:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
    155c:	e000      	b.n	1560 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xe8>
		}
    155e:	bf00      	nop
	}
	return ret;
    1560:	68fb      	ldr	r3, [r7, #12]
    1562:	f993 3099 	ldrsb.w	r3, [r3, #153]	; 0x99
}
    1566:	4618      	mov	r0, r3
    1568:	371c      	adds	r7, #28
    156a:	46bd      	mov	sp, r7
    156c:	bd90      	pop	{r4, r7, pc}
    156e:	bf00      	nop
    1570:	00007ea1 	.word	0x00007ea1

00001574 <_ZN15CO_Driver_Class17CAN_Tx_BufferInitEmmhhh>:
		uint32_t                index,
		uint32_t                ident,
		bool_t                  rtr,
		uint8_t                 noOfBytes,
		bool_t                  syncFlag)
{
    1574:	b480      	push	{r7}
    1576:	b085      	sub	sp, #20
    1578:	af00      	add	r7, sp, #0
    157a:	60f8      	str	r0, [r7, #12]
    157c:	60b9      	str	r1, [r7, #8]
    157e:	607a      	str	r2, [r7, #4]
    1580:	70fb      	strb	r3, [r7, #3]
	buffer = NULL;
    1582:	68fb      	ldr	r3, [r7, #12]
    1584:	2200      	movs	r2, #0
    1586:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	if((CAN_Module != NULL) && (index < CAN_Module->txSize)){
    158a:	68fb      	ldr	r3, [r7, #12]
    158c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    1590:	2b00      	cmp	r3, #0
    1592:	d03c      	beq.n	160e <_ZN15CO_Driver_Class17CAN_Tx_BufferInitEmmhhh+0x9a>
    1594:	68fb      	ldr	r3, [r7, #12]
    1596:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    159a:	691a      	ldr	r2, [r3, #16]
    159c:	68bb      	ldr	r3, [r7, #8]
    159e:	429a      	cmp	r2, r3
    15a0:	d935      	bls.n	160e <_ZN15CO_Driver_Class17CAN_Tx_BufferInitEmmhhh+0x9a>
		/* get specific buffer */
		buffer = &CAN_Module->txArray[index];
    15a2:	68fb      	ldr	r3, [r7, #12]
    15a4:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    15a8:	68da      	ldr	r2, [r3, #12]
    15aa:	68bb      	ldr	r3, [r7, #8]
    15ac:	011b      	lsls	r3, r3, #4
    15ae:	441a      	add	r2, r3
    15b0:	68fb      	ldr	r3, [r7, #12]
    15b2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

		/* CAN identifier, DLC and rtr, bit aligned with CAN module transmit buffer.*/

		buffer->ident &= 0x7FF;
    15b6:	68fb      	ldr	r3, [r7, #12]
    15b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    15bc:	68fa      	ldr	r2, [r7, #12]
    15be:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
    15c2:	6812      	ldr	r2, [r2, #0]
    15c4:	f3c2 020a 	ubfx	r2, r2, #0, #11
    15c8:	601a      	str	r2, [r3, #0]
		buffer->ident = ident << 2;
    15ca:	68fb      	ldr	r3, [r7, #12]
    15cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    15d0:	687a      	ldr	r2, [r7, #4]
    15d2:	0092      	lsls	r2, r2, #2
    15d4:	601a      	str	r2, [r3, #0]
		if (rtr) buffer->ident |= 0x02;
    15d6:	78fb      	ldrb	r3, [r7, #3]
    15d8:	2b00      	cmp	r3, #0
    15da:	d009      	beq.n	15f0 <_ZN15CO_Driver_Class17CAN_Tx_BufferInitEmmhhh+0x7c>
    15dc:	68fb      	ldr	r3, [r7, #12]
    15de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    15e2:	68fa      	ldr	r2, [r7, #12]
    15e4:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
    15e8:	6812      	ldr	r2, [r2, #0]
    15ea:	f042 0202 	orr.w	r2, r2, #2
    15ee:	601a      	str	r2, [r3, #0]

		buffer->DLC = noOfBytes;
    15f0:	68fb      	ldr	r3, [r7, #12]
    15f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    15f6:	7e3a      	ldrb	r2, [r7, #24]
    15f8:	711a      	strb	r2, [r3, #4]
		buffer->bufferFull = false;
    15fa:	68fb      	ldr	r3, [r7, #12]
    15fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    1600:	2200      	movs	r2, #0
    1602:	735a      	strb	r2, [r3, #13]
		buffer->syncFlag = syncFlag;
    1604:	68fb      	ldr	r3, [r7, #12]
    1606:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    160a:	7f3a      	ldrb	r2, [r7, #28]
    160c:	739a      	strb	r2, [r3, #14]
	}

	return buffer;
    160e:	68fb      	ldr	r3, [r7, #12]
    1610:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
}
    1614:	4618      	mov	r0, r3
    1616:	3714      	adds	r7, #20
    1618:	46bd      	mov	sp, r7
    161a:	bc80      	pop	{r7}
    161c:	4770      	bx	lr
	...

00001620 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t>:

/******************************************************************************/
CO_ReturnError_t CO_Driver_Class::CAN_Send(CO_CANtx_t *buffer)
{
    1620:	b590      	push	{r4, r7, lr}
    1622:	b089      	sub	sp, #36	; 0x24
    1624:	af02      	add	r7, sp, #8
    1626:	6078      	str	r0, [r7, #4]
    1628:	6039      	str	r1, [r7, #0]
	err = CO_ERROR_NO;
    162a:	687b      	ldr	r3, [r7, #4]
    162c:	2200      	movs	r2, #0
    162e:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

	if(buffer->bufferFull){
    1632:	683b      	ldr	r3, [r7, #0]
    1634:	7b5b      	ldrb	r3, [r3, #13]
    1636:	b2db      	uxtb	r3, r3
    1638:	2b00      	cmp	r3, #0
    163a:	bf14      	ite	ne
    163c:	2301      	movne	r3, #1
    163e:	2300      	moveq	r3, #0
    1640:	b2db      	uxtb	r3, r3
    1642:	2b00      	cmp	r3, #0
    1644:	d01d      	beq.n	1682 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x62>
		if(!CAN_Module->firstCANtxMessage){
    1646:	687b      	ldr	r3, [r7, #4]
    1648:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    164c:	7ddb      	ldrb	r3, [r3, #23]
    164e:	b2db      	uxtb	r3, r3
    1650:	2b00      	cmp	r3, #0
    1652:	bf0c      	ite	eq
    1654:	2301      	moveq	r3, #1
    1656:	2300      	movne	r3, #0
    1658:	b2db      	uxtb	r3, r3
    165a:	2b00      	cmp	r3, #0
    165c:	d00d      	beq.n	167a <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x5a>
			/* don't set error, if bootup message is still on buffers */
			EM_ErrorReport((CO_EM_t*)CAN_Module->em, CO_EM_CAN_TX_OVERFLOW, CO_EMC_CAN_OVERRUN, buffer->ident);
    165e:	687b      	ldr	r3, [r7, #4]
    1660:	1d18      	adds	r0, r3, #4
    1662:	687b      	ldr	r3, [r7, #4]
    1664:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    1668:	6a19      	ldr	r1, [r3, #32]
    166a:	683b      	ldr	r3, [r7, #0]
    166c:	681b      	ldr	r3, [r3, #0]
    166e:	9300      	str	r3, [sp, #0]
    1670:	f248 1310 	movw	r3, #33040	; 0x8110
    1674:	2214      	movs	r2, #20
    1676:	4c2c      	ldr	r4, [pc, #176]	; (1728 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x108>)
    1678:	47a0      	blx	r4
		}
		err = CO_ERROR_TX_OVERFLOW;
    167a:	687b      	ldr	r3, [r7, #4]
    167c:	22f7      	movs	r2, #247	; 0xf7
    167e:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1682:	f3ef 8310 	mrs	r3, PRIMASK
    1686:	60fb      	str	r3, [r7, #12]
  return(result);
    1688:	68fb      	ldr	r3, [r7, #12]
	}

	uint32_t TxMailboxNum;
	/* if CAN TX buffer is free, send message */
	CO_LOCK_CAN_SEND();
    168a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    168c:	b672      	cpsid	i

	PrepareTxHeader(&msgHeader, buffer);
    168e:	687b      	ldr	r3, [r7, #4]
    1690:	3374      	adds	r3, #116	; 0x74
    1692:	683a      	ldr	r2, [r7, #0]
    1694:	4619      	mov	r1, r3
    1696:	6878      	ldr	r0, [r7, #4]
    1698:	4b24      	ldr	r3, [pc, #144]	; (172c <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x10c>)
    169a:	4798      	blx	r3

	if ((CAN_Module->CANtxCount == 0) ) {
    169c:	687b      	ldr	r3, [r7, #4]
    169e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    16a2:	699b      	ldr	r3, [r3, #24]
    16a4:	2b00      	cmp	r3, #0
    16a6:	bf0c      	ite	eq
    16a8:	2301      	moveq	r3, #1
    16aa:	2300      	movne	r3, #0
    16ac:	b2db      	uxtb	r3, r3
    16ae:	2b00      	cmp	r3, #0
    16b0:	d025      	beq.n	16fe <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0xde>
	//	((uint32_t)hri_can_read_TXFQS_TFFL_bf(canHandler->dev.hw) > 0 )) {
		CAN_Module->bufferInhibitFlag = buffer->syncFlag;
    16b2:	687b      	ldr	r3, [r7, #4]
    16b4:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    16b8:	683a      	ldr	r2, [r7, #0]
    16ba:	7b92      	ldrb	r2, [r2, #14]
    16bc:	b2d2      	uxtb	r2, r2
    16be:	759a      	strb	r2, [r3, #22]
		receivedtxCOCallback=false;
    16c0:	687b      	ldr	r3, [r7, #4]
    16c2:	2200      	movs	r2, #0
    16c4:	775a      	strb	r2, [r3, #29]
		HalCanErrorCode=can_async_write(CAN_Module->CANBaseDescriptor, &msgHeader);
    16c6:	687b      	ldr	r3, [r7, #4]
    16c8:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    16cc:	681a      	ldr	r2, [r3, #0]
    16ce:	687b      	ldr	r3, [r7, #4]
    16d0:	3374      	adds	r3, #116	; 0x74
    16d2:	4619      	mov	r1, r3
    16d4:	4610      	mov	r0, r2
    16d6:	4b16      	ldr	r3, [pc, #88]	; (1730 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x110>)
    16d8:	4798      	blx	r3
    16da:	4603      	mov	r3, r0
    16dc:	461a      	mov	r2, r3
    16de:	687b      	ldr	r3, [r7, #4]
    16e0:	619a      	str	r2, [r3, #24]
		if(HalCanErrorCode != CO_ERROR_NO)
    16e2:	687b      	ldr	r3, [r7, #4]
    16e4:	699b      	ldr	r3, [r3, #24]
    16e6:	2b00      	cmp	r3, #0
    16e8:	bf14      	ite	ne
    16ea:	2301      	movne	r3, #1
    16ec:	2300      	moveq	r3, #0
    16ee:	b2db      	uxtb	r3, r3
    16f0:	2b00      	cmp	r3, #0
    16f2:	d00d      	beq.n	1710 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0xf0>
		{
			err = CO_ERROR_HAL;
    16f4:	687b      	ldr	r3, [r7, #4]
    16f6:	22f1      	movs	r2, #241	; 0xf1
    16f8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    16fc:	e008      	b.n	1710 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0xf0>
			//CANmodule->CANtxCount++;
		}
	}	/* if no buffer is free, message will be sent in the task */
	else
	{
		buffer->bufferFull = true;
    16fe:	683b      	ldr	r3, [r7, #0]
    1700:	2201      	movs	r2, #1
    1702:	735a      	strb	r2, [r3, #13]
		CAN_Module->CANtxCount++;
    1704:	687b      	ldr	r3, [r7, #4]
    1706:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    170a:	699a      	ldr	r2, [r3, #24]
    170c:	3201      	adds	r2, #1
    170e:	619a      	str	r2, [r3, #24]
    1710:	697b      	ldr	r3, [r7, #20]
    1712:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    1714:	693b      	ldr	r3, [r7, #16]
    1716:	f383 8810 	msr	PRIMASK, r3
	}
	CO_UNLOCK_CAN_SEND();

	return err;
    171a:	687b      	ldr	r3, [r7, #4]
    171c:	f993 309a 	ldrsb.w	r3, [r3, #154]	; 0x9a
}
    1720:	4618      	mov	r0, r3
    1722:	371c      	adds	r7, #28
    1724:	46bd      	mov	sp, r7
    1726:	bd90      	pop	{r4, r7, pc}
    1728:	00002075 	.word	0x00002075
    172c:	00001225 	.word	0x00001225
    1730:	00007dd9 	.word	0x00007dd9

00001734 <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv>:


/******************************************************************************/
void CO_Driver_Class::CANClearPendingSyncPDOs(void)
{
    1734:	b590      	push	{r4, r7, lr}
    1736:	b089      	sub	sp, #36	; 0x24
    1738:	af02      	add	r7, sp, #8
    173a:	6078      	str	r0, [r7, #4]
	tpdoDeleted = 0U;
    173c:	687b      	ldr	r3, [r7, #4]
    173e:	2200      	movs	r2, #0
    1740:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1744:	f3ef 8310 	mrs	r3, PRIMASK
    1748:	60bb      	str	r3, [r7, #8]
  return(result);
    174a:	68bb      	ldr	r3, [r7, #8]

	CO_LOCK_CAN_SEND();
    174c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
    174e:	b672      	cpsid	i
      {
    	HAL_CAN_AbortTxRequest(CANmodule->);
      }
	 */

	if(/*messageIsOnCanBuffer && */CAN_Module->bufferInhibitFlag){
    1750:	687b      	ldr	r3, [r7, #4]
    1752:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    1756:	7d9b      	ldrb	r3, [r3, #22]
    1758:	b2db      	uxtb	r3, r3
    175a:	2b00      	cmp	r3, #0
    175c:	bf14      	ite	ne
    175e:	2301      	movne	r3, #1
    1760:	2300      	moveq	r3, #0
    1762:	b2db      	uxtb	r3, r3
    1764:	2b00      	cmp	r3, #0
    1766:	d008      	beq.n	177a <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv+0x46>
		/* clear TXREQ */
		CAN_Module->bufferInhibitFlag = false;
    1768:	687b      	ldr	r3, [r7, #4]
    176a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    176e:	2200      	movs	r2, #0
    1770:	759a      	strb	r2, [r3, #22]
		tpdoDeleted = 1U;
    1772:	687b      	ldr	r3, [r7, #4]
    1774:	2201      	movs	r2, #1
    1776:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	}
	/* delete also pending synchronous TPDOs in TX buffers */
	if(CAN_Module->CANtxCount != 0U){
    177a:	687b      	ldr	r3, [r7, #4]
    177c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    1780:	699b      	ldr	r3, [r3, #24]
    1782:	2b00      	cmp	r3, #0
    1784:	bf14      	ite	ne
    1786:	2301      	movne	r3, #1
    1788:	2300      	moveq	r3, #0
    178a:	b2db      	uxtb	r3, r3
    178c:	2b00      	cmp	r3, #0
    178e:	d03c      	beq.n	180a <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv+0xd6>
	
		CO_CANtx_t *buffer = &CAN_Module->txArray[0];
    1790:	687b      	ldr	r3, [r7, #4]
    1792:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    1796:	68db      	ldr	r3, [r3, #12]
    1798:	617b      	str	r3, [r7, #20]
		for(i = CAN_Module->txSize; i > 0U; i--){
    179a:	687b      	ldr	r3, [r7, #4]
    179c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    17a0:	691a      	ldr	r2, [r3, #16]
    17a2:	687b      	ldr	r3, [r7, #4]
    17a4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    17a8:	687b      	ldr	r3, [r7, #4]
    17aa:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    17ae:	2b00      	cmp	r3, #0
    17b0:	d02b      	beq.n	180a <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv+0xd6>
			if(buffer->bufferFull){
    17b2:	697b      	ldr	r3, [r7, #20]
    17b4:	7b5b      	ldrb	r3, [r3, #13]
    17b6:	b2db      	uxtb	r3, r3
    17b8:	2b00      	cmp	r3, #0
    17ba:	bf14      	ite	ne
    17bc:	2301      	movne	r3, #1
    17be:	2300      	moveq	r3, #0
    17c0:	b2db      	uxtb	r3, r3
    17c2:	2b00      	cmp	r3, #0
    17c4:	d016      	beq.n	17f4 <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv+0xc0>
				if(buffer->syncFlag){
    17c6:	697b      	ldr	r3, [r7, #20]
    17c8:	7b9b      	ldrb	r3, [r3, #14]
    17ca:	b2db      	uxtb	r3, r3
    17cc:	2b00      	cmp	r3, #0
    17ce:	bf14      	ite	ne
    17d0:	2301      	movne	r3, #1
    17d2:	2300      	moveq	r3, #0
    17d4:	b2db      	uxtb	r3, r3
    17d6:	2b00      	cmp	r3, #0
    17d8:	d00c      	beq.n	17f4 <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv+0xc0>
					buffer->bufferFull = false;
    17da:	697b      	ldr	r3, [r7, #20]
    17dc:	2200      	movs	r2, #0
    17de:	735a      	strb	r2, [r3, #13]
					CAN_Module->CANtxCount--;
    17e0:	687b      	ldr	r3, [r7, #4]
    17e2:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    17e6:	699a      	ldr	r2, [r3, #24]
    17e8:	3a01      	subs	r2, #1
    17ea:	619a      	str	r2, [r3, #24]
					tpdoDeleted = 2U;
    17ec:	687b      	ldr	r3, [r7, #4]
    17ee:	2202      	movs	r2, #2
    17f0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
				}
			}
			buffer++;
    17f4:	697b      	ldr	r3, [r7, #20]
    17f6:	3310      	adds	r3, #16
    17f8:	617b      	str	r3, [r7, #20]
		for(i = CAN_Module->txSize; i > 0U; i--){
    17fa:	687b      	ldr	r3, [r7, #4]
    17fc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    1800:	1e5a      	subs	r2, r3, #1
    1802:	687b      	ldr	r3, [r7, #4]
    1804:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    1808:	e7ce      	b.n	17a8 <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv+0x74>
    180a:	693b      	ldr	r3, [r7, #16]
    180c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    180e:	68fb      	ldr	r3, [r7, #12]
    1810:	f383 8810 	msr	PRIMASK, r3
		}
	}
	CO_UNLOCK_CAN_SEND();


	if(tpdoDeleted != 0U){
    1814:	687b      	ldr	r3, [r7, #4]
    1816:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    181a:	2b00      	cmp	r3, #0
    181c:	d00e      	beq.n	183c <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv+0x108>
		EM_ErrorReport((CO_EM_t*)CAN_Module->em, CO_EM_TPDO_OUTSIDE_WINDOW, CO_EMC_COMMUNICATION, tpdoDeleted);
    181e:	687b      	ldr	r3, [r7, #4]
    1820:	1d18      	adds	r0, r3, #4
    1822:	687b      	ldr	r3, [r7, #4]
    1824:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    1828:	6a19      	ldr	r1, [r3, #32]
    182a:	687b      	ldr	r3, [r7, #4]
    182c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    1830:	9300      	str	r3, [sp, #0]
    1832:	f44f 4301 	mov.w	r3, #33024	; 0x8100
    1836:	2215      	movs	r2, #21
    1838:	4c02      	ldr	r4, [pc, #8]	; (1844 <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv+0x110>)
    183a:	47a0      	blx	r4
	}
}
    183c:	bf00      	nop
    183e:	371c      	adds	r7, #28
    1840:	46bd      	mov	sp, r7
    1842:	bd90      	pop	{r4, r7, pc}
    1844:	00002075 	.word	0x00002075

00001848 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv>:


/******************************************************************************/
void CO_Driver_Class::CAN_VerifyErrors(void){
    1848:	b590      	push	{r4, r7, lr}
    184a:	b087      	sub	sp, #28
    184c:	af02      	add	r7, sp, #8
    184e:	6078      	str	r0, [r7, #4]
	em = (CO_EM_t*)CAN_Module->em;
    1850:	687b      	ldr	r3, [r7, #4]
    1852:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    1856:	6a1a      	ldr	r2, [r3, #32]
    1858:	687b      	ldr	r3, [r7, #4]
    185a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	struct can_async_descriptor *canHandler= (struct can_async_descriptor *)CAN_Module->CANBaseDescriptor;
    185e:	687b      	ldr	r3, [r7, #4]
    1860:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    1864:	681b      	ldr	r3, [r3, #0]
    1866:	60fb      	str	r3, [r7, #12]
	//uint32_t HalCanErrorCode = canHandler->dev.cb->irq_handler();

	if(CAN_Module->errOld != HalCanErrorCode)
    1868:	687b      	ldr	r3, [r7, #4]
    186a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    186e:	69da      	ldr	r2, [r3, #28]
    1870:	687b      	ldr	r3, [r7, #4]
    1872:	699b      	ldr	r3, [r3, #24]
    1874:	429a      	cmp	r2, r3
    1876:	bf14      	ite	ne
    1878:	2301      	movne	r3, #1
    187a:	2300      	moveq	r3, #0
    187c:	b2db      	uxtb	r3, r3
    187e:	2b00      	cmp	r3, #0
    1880:	f000 80ae 	beq.w	19e0 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x198>
	{
		CAN_Module->errOld = HalCanErrorCode;
    1884:	687b      	ldr	r3, [r7, #4]
    1886:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    188a:	687a      	ldr	r2, [r7, #4]
    188c:	6992      	ldr	r2, [r2, #24]
    188e:	61da      	str	r2, [r3, #28]
		if(HalCanErrorCode & CAN_IRQ_BO)
    1890:	687b      	ldr	r3, [r7, #4]
    1892:	699b      	ldr	r3, [r3, #24]
    1894:	f003 0303 	and.w	r3, r3, #3
    1898:	2b00      	cmp	r3, #0
    189a:	bf14      	ite	ne
    189c:	2301      	movne	r3, #1
    189e:	2300      	moveq	r3, #0
    18a0:	b2db      	uxtb	r3, r3
    18a2:	2b00      	cmp	r3, #0
    18a4:	d00d      	beq.n	18c2 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x7a>
		{                               /* bus off */
			EM_ErrorReport(em, CO_EM_CAN_TX_BUS_OFF, CO_EMC_BUS_OFF_RECOVERED, HalCanErrorCode);
    18a6:	687b      	ldr	r3, [r7, #4]
    18a8:	1d18      	adds	r0, r3, #4
    18aa:	687b      	ldr	r3, [r7, #4]
    18ac:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
    18b0:	687b      	ldr	r3, [r7, #4]
    18b2:	699b      	ldr	r3, [r3, #24]
    18b4:	9300      	str	r3, [sp, #0]
    18b6:	f248 1340 	movw	r3, #33088	; 0x8140
    18ba:	2212      	movs	r2, #18
    18bc:	4c4c      	ldr	r4, [pc, #304]	; (19f0 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x1a8>)
    18be:	47a0      	blx	r4
    18c0:	e076      	b.n	19b0 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x168>
		}
		else{                                               /* not bus off */
			EM_ErrorReset(em, CO_EM_CAN_TX_BUS_OFF, HalCanErrorCode);
    18c2:	687b      	ldr	r3, [r7, #4]
    18c4:	1d18      	adds	r0, r3, #4
    18c6:	687b      	ldr	r3, [r7, #4]
    18c8:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
    18cc:	687b      	ldr	r3, [r7, #4]
    18ce:	699b      	ldr	r3, [r3, #24]
    18d0:	2212      	movs	r2, #18
    18d2:	4c48      	ldr	r4, [pc, #288]	; (19f4 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x1ac>)
    18d4:	47a0      	blx	r4

			if(HalCanErrorCode & CAN_IRQ_EW)
    18d6:	687b      	ldr	r3, [r7, #4]
    18d8:	699b      	ldr	r3, [r3, #24]
    18da:	2300      	movs	r3, #0
    18dc:	2b00      	cmp	r3, #0
    18de:	d00b      	beq.n	18f8 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0xb0>
			{     											/* bus warning */
				EM_ErrorReport(em, CO_EM_CAN_BUS_WARNING, CO_EMC_NO_ERROR, HalCanErrorCode);
    18e0:	687b      	ldr	r3, [r7, #4]
    18e2:	1d18      	adds	r0, r3, #4
    18e4:	687b      	ldr	r3, [r7, #4]
    18e6:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
    18ea:	687b      	ldr	r3, [r7, #4]
    18ec:	699b      	ldr	r3, [r3, #24]
    18ee:	9300      	str	r3, [sp, #0]
    18f0:	2300      	movs	r3, #0
    18f2:	2201      	movs	r2, #1
    18f4:	4c3e      	ldr	r4, [pc, #248]	; (19f0 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x1a8>)
    18f6:	47a0      	blx	r4
			}
			else
			{
				//do nothing
			}
			if(HalCanErrorCode & CAN_IRQ_EP)
    18f8:	687b      	ldr	r3, [r7, #4]
    18fa:	699b      	ldr	r3, [r3, #24]
    18fc:	f003 0302 	and.w	r3, r3, #2
    1900:	2b00      	cmp	r3, #0
    1902:	bf14      	ite	ne
    1904:	2301      	movne	r3, #1
    1906:	2300      	moveq	r3, #0
    1908:	b2db      	uxtb	r3, r3
    190a:	2b00      	cmp	r3, #0
    190c:	d019      	beq.n	1942 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0xfa>
			{      											/* TX/RX bus passive */
				if(!CAN_Module->firstCANtxMessage)
    190e:	687b      	ldr	r3, [r7, #4]
    1910:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    1914:	7ddb      	ldrb	r3, [r3, #23]
    1916:	b2db      	uxtb	r3, r3
    1918:	2b00      	cmp	r3, #0
    191a:	bf0c      	ite	eq
    191c:	2301      	moveq	r3, #1
    191e:	2300      	movne	r3, #0
    1920:	b2db      	uxtb	r3, r3
    1922:	2b00      	cmp	r3, #0
    1924:	d02f      	beq.n	1986 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x13e>
				{
					EM_ErrorReport(em, CO_EM_CAN_TX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, HalCanErrorCode);
    1926:	687b      	ldr	r3, [r7, #4]
    1928:	1d18      	adds	r0, r3, #4
    192a:	687b      	ldr	r3, [r7, #4]
    192c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
    1930:	687b      	ldr	r3, [r7, #4]
    1932:	699b      	ldr	r3, [r3, #24]
    1934:	9300      	str	r3, [sp, #0]
    1936:	f248 1320 	movw	r3, #33056	; 0x8120
    193a:	2207      	movs	r2, #7
    193c:	4c2c      	ldr	r4, [pc, #176]	; (19f0 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x1a8>)
    193e:	47a0      	blx	r4
    1940:	e021      	b.n	1986 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x13e>
				{
					//do nothing
				}
			}
			else{
				bool_t isError = EM_IsError(em, CO_EM_CAN_TX_BUS_PASSIVE);
    1942:	687b      	ldr	r3, [r7, #4]
    1944:	1d18      	adds	r0, r3, #4
    1946:	687b      	ldr	r3, [r7, #4]
    1948:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    194c:	2207      	movs	r2, #7
    194e:	4619      	mov	r1, r3
    1950:	4b29      	ldr	r3, [pc, #164]	; (19f8 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x1b0>)
    1952:	4798      	blx	r3
    1954:	4603      	mov	r3, r0
    1956:	72fb      	strb	r3, [r7, #11]
				if(isError)
    1958:	7afb      	ldrb	r3, [r7, #11]
    195a:	2b00      	cmp	r3, #0
    195c:	d013      	beq.n	1986 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x13e>
				{
					EM_ErrorReset(em, CO_EM_CAN_TX_BUS_PASSIVE, HalCanErrorCode);
    195e:	687b      	ldr	r3, [r7, #4]
    1960:	1d18      	adds	r0, r3, #4
    1962:	687b      	ldr	r3, [r7, #4]
    1964:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
    1968:	687b      	ldr	r3, [r7, #4]
    196a:	699b      	ldr	r3, [r3, #24]
    196c:	2207      	movs	r2, #7
    196e:	4c21      	ldr	r4, [pc, #132]	; (19f4 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x1ac>)
    1970:	47a0      	blx	r4
					EM_ErrorReset(em, CO_EM_CAN_TX_OVERFLOW, HalCanErrorCode);
    1972:	687b      	ldr	r3, [r7, #4]
    1974:	1d18      	adds	r0, r3, #4
    1976:	687b      	ldr	r3, [r7, #4]
    1978:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
    197c:	687b      	ldr	r3, [r7, #4]
    197e:	699b      	ldr	r3, [r3, #24]
    1980:	2214      	movs	r2, #20
    1982:	4c1c      	ldr	r4, [pc, #112]	; (19f4 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x1ac>)
    1984:	47a0      	blx	r4
				{
					//do nothing
				}
			}

			if(HalCanErrorCode & CAN_IRQ_EA)
    1986:	687b      	ldr	r3, [r7, #4]
    1988:	699b      	ldr	r3, [r3, #24]
    198a:	f003 0301 	and.w	r3, r3, #1
    198e:	2b00      	cmp	r3, #0
    1990:	bf14      	ite	ne
    1992:	2301      	movne	r3, #1
    1994:	2300      	moveq	r3, #0
    1996:	b2db      	uxtb	r3, r3
    1998:	2b00      	cmp	r3, #0
    199a:	d009      	beq.n	19b0 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x168>
			{      											 /* no error */
				EM_ErrorReset(em, CO_EM_CAN_BUS_WARNING, HalCanErrorCode);
    199c:	687b      	ldr	r3, [r7, #4]
    199e:	1d18      	adds	r0, r3, #4
    19a0:	687b      	ldr	r3, [r7, #4]
    19a2:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
    19a6:	687b      	ldr	r3, [r7, #4]
    19a8:	699b      	ldr	r3, [r3, #24]
    19aa:	2201      	movs	r2, #1
    19ac:	4c11      	ldr	r4, [pc, #68]	; (19f4 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x1ac>)
    19ae:	47a0      	blx	r4
				//do nothing
			}

		}

		if((HalCanErrorCode & CAN_IRQ_DO) )
    19b0:	687b      	ldr	r3, [r7, #4]
    19b2:	699b      	ldr	r3, [r3, #24]
    19b4:	f003 0304 	and.w	r3, r3, #4
    19b8:	2b00      	cmp	r3, #0
    19ba:	bf14      	ite	ne
    19bc:	2301      	movne	r3, #1
    19be:	2300      	moveq	r3, #0
    19c0:	b2db      	uxtb	r3, r3
    19c2:	2b00      	cmp	r3, #0
    19c4:	d00c      	beq.n	19e0 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x198>
		{                                 					/* CAN RX bus overflow */
			EM_ErrorReport(em, CO_EM_CAN_RXB_OVERFLOW, CO_EMC_CAN_OVERRUN, HalCanErrorCode);
    19c6:	687b      	ldr	r3, [r7, #4]
    19c8:	1d18      	adds	r0, r3, #4
    19ca:	687b      	ldr	r3, [r7, #4]
    19cc:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
    19d0:	687b      	ldr	r3, [r7, #4]
    19d2:	699b      	ldr	r3, [r3, #24]
    19d4:	9300      	str	r3, [sp, #0]
    19d6:	f248 1310 	movw	r3, #33040	; 0x8110
    19da:	2213      	movs	r2, #19
    19dc:	4c04      	ldr	r4, [pc, #16]	; (19f0 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x1a8>)
    19de:	47a0      	blx	r4
		else
		{
			//do nothing
		}
	}
		receivedIntCOCallback=false;
    19e0:	687b      	ldr	r3, [r7, #4]
    19e2:	2200      	movs	r2, #0
    19e4:	779a      	strb	r2, [r3, #30]
}
    19e6:	bf00      	nop
    19e8:	3714      	adds	r7, #20
    19ea:	46bd      	mov	sp, r7
    19ec:	bd90      	pop	{r4, r7, pc}
    19ee:	bf00      	nop
    19f0:	00002075 	.word	0x00002075
    19f4:	000021c9 	.word	0x000021c9
    19f8:	00002315 	.word	0x00002315

000019fc <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv>:

/*Interrupt handlers*/
/******************************************************************************/
void CO_Driver_Class::ProcessInterrupt_Rx(void)
{
    19fc:	b580      	push	{r7, lr}
    19fe:	b084      	sub	sp, #16
    1a00:	af00      	add	r7, sp, #0
    1a02:	6078      	str	r0, [r7, #4]

	

	ConvertCANMsg2CORxMsg(msg,&CANmessage);
    1a04:	687b      	ldr	r3, [r7, #4]
    1a06:	f103 0188 	add.w	r1, r3, #136	; 0x88
    1a0a:	687b      	ldr	r3, [r7, #4]
    1a0c:	33f0      	adds	r3, #240	; 0xf0
    1a0e:	461a      	mov	r2, r3
    1a10:	6878      	ldr	r0, [r7, #4]
    1a12:	4b2c      	ldr	r3, [pc, #176]	; (1ac4 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xc8>)
    1a14:	4798      	blx	r3
	
	/* Search rxArray form CANmodule for the same CAN-ID. */
	
	for (index = 0; index < RxFifo_Callback_CanModule_p->rxSize; index++)
    1a16:	687b      	ldr	r3, [r7, #4]
    1a18:	2200      	movs	r2, #0
    1a1a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    1a1e:	687b      	ldr	r3, [r7, #4]
    1a20:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    1a24:	687b      	ldr	r3, [r7, #4]
    1a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    1a28:	689b      	ldr	r3, [r3, #8]
    1a2a:	429a      	cmp	r2, r3
    1a2c:	d22a      	bcs.n	1a84 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x88>
	{
		uint32_t msgCO = (((uint32_t)(CANmessage.ident << 2)) | (uint32_t)(msg.type));
    1a2e:	687b      	ldr	r3, [r7, #4]
    1a30:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    1a34:	009b      	lsls	r3, r3, #2
    1a36:	687a      	ldr	r2, [r7, #4]
    1a38:	f892 208c 	ldrb.w	r2, [r2, #140]	; 0x8c
    1a3c:	4313      	orrs	r3, r2
    1a3e:	60fb      	str	r3, [r7, #12]
		if (((msgCO ^ MsgBuff->ident) & MsgBuff->mask) == 0)
    1a40:	687b      	ldr	r3, [r7, #4]
    1a42:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    1a46:	681a      	ldr	r2, [r3, #0]
    1a48:	68fb      	ldr	r3, [r7, #12]
    1a4a:	405a      	eors	r2, r3
    1a4c:	687b      	ldr	r3, [r7, #4]
    1a4e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    1a52:	685b      	ldr	r3, [r3, #4]
    1a54:	4013      	ands	r3, r2
    1a56:	2b00      	cmp	r3, #0
    1a58:	d104      	bne.n	1a64 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x68>
		{
			msgMatched = true;
    1a5a:	687b      	ldr	r3, [r7, #4]
    1a5c:	2201      	movs	r2, #1
    1a5e:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
			break;
    1a62:	e00f      	b.n	1a84 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x88>
		}
		MsgBuff++;
    1a64:	687b      	ldr	r3, [r7, #4]
    1a66:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    1a6a:	f103 0210 	add.w	r2, r3, #16
    1a6e:	687b      	ldr	r3, [r7, #4]
    1a70:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	for (index = 0; index < RxFifo_Callback_CanModule_p->rxSize; index++)
    1a74:	687b      	ldr	r3, [r7, #4]
    1a76:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    1a7a:	1c5a      	adds	r2, r3, #1
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    1a82:	e7cc      	b.n	1a1e <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x22>
	}

	/* Call specific function, which will process the message */
	if(msgMatched && (MsgBuff != NULL) && (MsgBuff->pFunct != NULL))
    1a84:	687b      	ldr	r3, [r7, #4]
    1a86:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
    1a8a:	2b00      	cmp	r3, #0
    1a8c:	d016      	beq.n	1abc <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xc0>
    1a8e:	687b      	ldr	r3, [r7, #4]
    1a90:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    1a94:	2b00      	cmp	r3, #0
    1a96:	d011      	beq.n	1abc <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xc0>
    1a98:	687b      	ldr	r3, [r7, #4]
    1a9a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    1a9e:	68db      	ldr	r3, [r3, #12]
    1aa0:	2b00      	cmp	r3, #0
    1aa2:	d00b      	beq.n	1abc <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xc0>
	{
			//printf("  %X", CANmessage.ident);
			MsgBuff->pFunct(MsgBuff->object, &CANmessage);
    1aa4:	687b      	ldr	r3, [r7, #4]
    1aa6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    1aaa:	68db      	ldr	r3, [r3, #12]
    1aac:	687a      	ldr	r2, [r7, #4]
    1aae:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
    1ab2:	6890      	ldr	r0, [r2, #8]
    1ab4:	687a      	ldr	r2, [r7, #4]
    1ab6:	32f0      	adds	r2, #240	; 0xf0
    1ab8:	4611      	mov	r1, r2
    1aba:	4798      	blx	r3
	//                buffer++;
	//            }
	//        }

	/*CubeMx HAL is responsible for clearing interrupt flags and all the dirty work. */
}
    1abc:	bf00      	nop
    1abe:	3710      	adds	r7, #16
    1ac0:	46bd      	mov	sp, r7
    1ac2:	bd80      	pop	{r7, pc}
    1ac4:	00001269 	.word	0x00001269

00001ac8 <_ZN15CO_Driver_Class14CAN_Polling_TxEv>:


void CO_Driver_Class::CAN_Polling_Tx(void)
{
    1ac8:	b580      	push	{r7, lr}
    1aca:	b084      	sub	sp, #16
    1acc:	af00      	add	r7, sp, #0
    1ace:	6078      	str	r0, [r7, #4]
	
	//struct can_async_descriptor canStruct= (* struct can_async_descriptor )canHandler;
	if (hri_can_read_TXFQS_TFFL_bf(CAN1) > 0)
    1ad0:	4843      	ldr	r0, [pc, #268]	; (1be0 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x118>)
    1ad2:	4b44      	ldr	r3, [pc, #272]	; (1be4 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x11c>)
    1ad4:	4798      	blx	r3
    1ad6:	4603      	mov	r3, r0
    1ad8:	2b00      	cmp	r3, #0
    1ada:	bf14      	ite	ne
    1adc:	2301      	movne	r3, #1
    1ade:	2300      	moveq	r3, #0
    1ae0:	b2db      	uxtb	r3, r3
    1ae2:	2b00      	cmp	r3, #0
    1ae4:	d077      	beq.n	1bd6 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x10e>
	{
		/* First CAN message (bootup) was sent successfully */
		CAN_Module->firstCANtxMessage = false;
    1ae6:	687b      	ldr	r3, [r7, #4]
    1ae8:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    1aec:	2200      	movs	r2, #0
    1aee:	75da      	strb	r2, [r3, #23]
		/* Clear flag from previous message */
		CAN_Module->bufferInhibitFlag = false;
    1af0:	687b      	ldr	r3, [r7, #4]
    1af2:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    1af6:	2200      	movs	r2, #0
    1af8:	759a      	strb	r2, [r3, #22]
		/* Are there any new messages waiting to be send */
		if(CAN_Module->CANtxCount > 0U)
    1afa:	687b      	ldr	r3, [r7, #4]
    1afc:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    1b00:	699b      	ldr	r3, [r3, #24]
    1b02:	2b00      	cmp	r3, #0
    1b04:	bf14      	ite	ne
    1b06:	2301      	movne	r3, #1
    1b08:	2300      	moveq	r3, #0
    1b0a:	b2db      	uxtb	r3, r3
    1b0c:	2b00      	cmp	r3, #0
    1b0e:	d062      	beq.n	1bd6 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x10e>
		{
			uint32_t i;             /* index of transmitting message */

			/* first buffer */
			CO_CANtx_t *buffer = &CAN_Module->txArray[0];
    1b10:	687b      	ldr	r3, [r7, #4]
    1b12:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    1b16:	68db      	ldr	r3, [r3, #12]
    1b18:	60bb      	str	r3, [r7, #8]
			/* search through whole array of pointers to transmit message buffers. */
			for(i = CAN_Module->txSize; i > 0U; i--)
    1b1a:	687b      	ldr	r3, [r7, #4]
    1b1c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    1b20:	691b      	ldr	r3, [r3, #16]
    1b22:	60fb      	str	r3, [r7, #12]
    1b24:	68fb      	ldr	r3, [r7, #12]
    1b26:	2b00      	cmp	r3, #0
    1b28:	d04d      	beq.n	1bc6 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0xfe>
			{
				/* if message buffer is full, send it. */
				if(buffer->bufferFull)
    1b2a:	68bb      	ldr	r3, [r7, #8]
    1b2c:	7b5b      	ldrb	r3, [r3, #13]
    1b2e:	b2db      	uxtb	r3, r3
    1b30:	2b00      	cmp	r3, #0
    1b32:	bf14      	ite	ne
    1b34:	2301      	movne	r3, #1
    1b36:	2300      	moveq	r3, #0
    1b38:	b2db      	uxtb	r3, r3
    1b3a:	2b00      	cmp	r3, #0
    1b3c:	d03b      	beq.n	1bb6 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0xee>
				{

					/* Copy message to CAN buffer */
					CAN_Module->bufferInhibitFlag = buffer->syncFlag;
    1b3e:	687b      	ldr	r3, [r7, #4]
    1b40:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    1b44:	68ba      	ldr	r2, [r7, #8]
    1b46:	7b92      	ldrb	r2, [r2, #14]
    1b48:	b2d2      	uxtb	r2, r2
    1b4a:	759a      	strb	r2, [r3, #22]

					uint32_t TxMailboxNum;

					PrepareTxHeader(&msgHeader, buffer);
    1b4c:	687b      	ldr	r3, [r7, #4]
    1b4e:	3374      	adds	r3, #116	; 0x74
    1b50:	68ba      	ldr	r2, [r7, #8]
    1b52:	4619      	mov	r1, r3
    1b54:	6878      	ldr	r0, [r7, #4]
    1b56:	4b24      	ldr	r3, [pc, #144]	; (1be8 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x120>)
    1b58:	4798      	blx	r3
					can_async_register_callback(canDescr, CAN_ASYNC_TX_CB, (FUNC_PTR)CO_tx_callback);
    1b5a:	687b      	ldr	r3, [r7, #4]
    1b5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    1b60:	4a22      	ldr	r2, [pc, #136]	; (1bec <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x124>)
    1b62:	2101      	movs	r1, #1
    1b64:	4618      	mov	r0, r3
    1b66:	4b22      	ldr	r3, [pc, #136]	; (1bf0 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x128>)
    1b68:	4798      	blx	r3
					can_async_enable(canDescr);
    1b6a:	687b      	ldr	r3, [r7, #4]
    1b6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    1b70:	4618      	mov	r0, r3
    1b72:	4b20      	ldr	r3, [pc, #128]	; (1bf4 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x12c>)
    1b74:	4798      	blx	r3
					HalCanErrorCode=can_async_write(canDescr, &msgHeader);
    1b76:	687b      	ldr	r3, [r7, #4]
    1b78:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
    1b7c:	687b      	ldr	r3, [r7, #4]
    1b7e:	3374      	adds	r3, #116	; 0x74
    1b80:	4619      	mov	r1, r3
    1b82:	4610      	mov	r0, r2
    1b84:	4b1c      	ldr	r3, [pc, #112]	; (1bf8 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x130>)
    1b86:	4798      	blx	r3
    1b88:	4603      	mov	r3, r0
    1b8a:	461a      	mov	r2, r3
    1b8c:	687b      	ldr	r3, [r7, #4]
    1b8e:	619a      	str	r2, [r3, #24]
					if( HalCanErrorCode != CO_ERROR_NO)
    1b90:	687b      	ldr	r3, [r7, #4]
    1b92:	699b      	ldr	r3, [r3, #24]
    1b94:	2b00      	cmp	r3, #0
    1b96:	bf14      	ite	ne
    1b98:	2301      	movne	r3, #1
    1b9a:	2300      	moveq	r3, #0
    1b9c:	b2db      	uxtb	r3, r3
    1b9e:	2b00      	cmp	r3, #0
    1ba0:	d110      	bne.n	1bc4 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0xfc>
					{
						;//do nothing
					}
					else
					{
						buffer->bufferFull = false;
    1ba2:	68bb      	ldr	r3, [r7, #8]
    1ba4:	2200      	movs	r2, #0
    1ba6:	735a      	strb	r2, [r3, #13]
						CAN_Module->CANtxCount--;
    1ba8:	687b      	ldr	r3, [r7, #4]
    1baa:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    1bae:	699a      	ldr	r2, [r3, #24]
    1bb0:	3a01      	subs	r2, #1
    1bb2:	619a      	str	r2, [r3, #24]
					}

					break;                      /* exit for loop */
    1bb4:	e006      	b.n	1bc4 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0xfc>
				}
				else
				{
					/*do nothing*/;
				}
				buffer++;
    1bb6:	68bb      	ldr	r3, [r7, #8]
    1bb8:	3310      	adds	r3, #16
    1bba:	60bb      	str	r3, [r7, #8]
			for(i = CAN_Module->txSize; i > 0U; i--)
    1bbc:	68fb      	ldr	r3, [r7, #12]
    1bbe:	3b01      	subs	r3, #1
    1bc0:	60fb      	str	r3, [r7, #12]
    1bc2:	e7af      	b.n	1b24 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x5c>
					break;                      /* exit for loop */
    1bc4:	bf00      	nop
			}/* end of for loop */

			/* Clear counter if no more messages */
			if(i == 0U)
    1bc6:	68fb      	ldr	r3, [r7, #12]
    1bc8:	2b00      	cmp	r3, #0
    1bca:	d104      	bne.n	1bd6 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x10e>
			{
				CAN_Module->CANtxCount = 0U;
    1bcc:	687b      	ldr	r3, [r7, #4]
    1bce:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    1bd2:	2200      	movs	r2, #0
    1bd4:	619a      	str	r2, [r3, #24]
			{
				/*do nothing*/;
			}
		}
	}
}
    1bd6:	bf00      	nop
    1bd8:	3710      	adds	r7, #16
    1bda:	46bd      	mov	sp, r7
    1bdc:	bd80      	pop	{r7, pc}
    1bde:	bf00      	nop
    1be0:	42000400 	.word	0x42000400
    1be4:	000010ad 	.word	0x000010ad
    1be8:	00001225 	.word	0x00001225
    1bec:	0000113d 	.word	0x0000113d
    1bf0:	00007e25 	.word	0x00007e25
    1bf4:	00007d15 	.word	0x00007d15
    1bf8:	00007dd9 	.word	0x00007dd9

00001bfc <_ZN18CO_Emergency_ClassC1Ev>:
#include "CO_Driver_Class.h"

CO_Emergency_Class	*ptrCOEMClass;

// default constructor
CO_Emergency_Class::CO_Emergency_Class()
    1bfc:	b580      	push	{r7, lr}
    1bfe:	b082      	sub	sp, #8
    1c00:	af00      	add	r7, sp, #0
    1c02:	6078      	str	r0, [r7, #4]
    1c04:	687b      	ldr	r3, [r7, #4]
    1c06:	4618      	mov	r0, r3
    1c08:	4b04      	ldr	r3, [pc, #16]	; (1c1c <_ZN18CO_Emergency_ClassC1Ev+0x20>)
    1c0a:	4798      	blx	r3
{
	ptrCOEMClass=this;
    1c0c:	4a04      	ldr	r2, [pc, #16]	; (1c20 <_ZN18CO_Emergency_ClassC1Ev+0x24>)
    1c0e:	687b      	ldr	r3, [r7, #4]
    1c10:	6013      	str	r3, [r2, #0]
} //CO_Emergency_Class
    1c12:	687b      	ldr	r3, [r7, #4]
    1c14:	4618      	mov	r0, r3
    1c16:	3708      	adds	r7, #8
    1c18:	46bd      	mov	sp, r7
    1c1a:	bd80      	pop	{r7, pc}
    1c1c:	00004249 	.word	0x00004249
    1c20:	20000964 	.word	0x20000964

00001c24 <_ZN18CO_Emergency_ClassD1Ev>:

// default destructor
CO_Emergency_Class::~CO_Emergency_Class()
    1c24:	b580      	push	{r7, lr}
    1c26:	b082      	sub	sp, #8
    1c28:	af00      	add	r7, sp, #0
    1c2a:	6078      	str	r0, [r7, #4]
    1c2c:	687b      	ldr	r3, [r7, #4]
    1c2e:	4618      	mov	r0, r3
    1c30:	4b03      	ldr	r3, [pc, #12]	; (1c40 <_ZN18CO_Emergency_ClassD1Ev+0x1c>)
    1c32:	4798      	blx	r3
{
} //~CO_Emergency_Class
    1c34:	687b      	ldr	r3, [r7, #4]
    1c36:	4618      	mov	r0, r3
    1c38:	3708      	adds	r7, #8
    1c3a:	46bd      	mov	sp, r7
    1c3c:	bd80      	pop	{r7, pc}
    1c3e:	bf00      	nop
    1c40:	00004271 	.word	0x00004271

00001c44 <_ZL11CO_ODF_1003P12CO_ODF_arg_t>:
 * Function for accessing _Pre-Defined Error Field_ (index 0x1003) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */

static   CO_SDO_abortCode_t CO_ODF_1003(CO_ODF_arg_t *ODF_arg){
    1c44:	b480      	push	{r7}
    1c46:	b087      	sub	sp, #28
    1c48:	af00      	add	r7, sp, #0
    1c4a:	6078      	str	r0, [r7, #4]
    
    uint8_t value;
	CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
    1c4c:	2300      	movs	r3, #0
    1c4e:	617b      	str	r3, [r7, #20]

    CO_EMpr_t *emPr = (CO_EMpr_t*) ODF_arg->object;
    1c50:	687b      	ldr	r3, [r7, #4]
    1c52:	681b      	ldr	r3, [r3, #0]
    1c54:	613b      	str	r3, [r7, #16]
    value = ODF_arg->data[0];
    1c56:	687b      	ldr	r3, [r7, #4]
    1c58:	685b      	ldr	r3, [r3, #4]
    1c5a:	781b      	ldrb	r3, [r3, #0]
    1c5c:	73fb      	strb	r3, [r7, #15]

    if(ODF_arg->reading){
    1c5e:	687b      	ldr	r3, [r7, #4]
    1c60:	7f5b      	ldrb	r3, [r3, #29]
    1c62:	2b00      	cmp	r3, #0
    1c64:	d017      	beq.n	1c96 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x52>
        uint8_t noOfErrors;
        noOfErrors = emPr->preDefErrNoOfErrors;
    1c66:	693b      	ldr	r3, [r7, #16]
    1c68:	7a5b      	ldrb	r3, [r3, #9]
    1c6a:	73bb      	strb	r3, [r7, #14]

        if(ODF_arg->subIndex == 0U){
    1c6c:	687b      	ldr	r3, [r7, #4]
    1c6e:	7f1b      	ldrb	r3, [r3, #28]
    1c70:	2b00      	cmp	r3, #0
    1c72:	d104      	bne.n	1c7e <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x3a>
            ODF_arg->data[0] = noOfErrors;
    1c74:	687b      	ldr	r3, [r7, #4]
    1c76:	685b      	ldr	r3, [r3, #4]
    1c78:	7bba      	ldrb	r2, [r7, #14]
    1c7a:	701a      	strb	r2, [r3, #0]
    1c7c:	e01b      	b.n	1cb6 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
        }
        else if(ODF_arg->subIndex > noOfErrors){
    1c7e:	687b      	ldr	r3, [r7, #4]
    1c80:	7f1b      	ldrb	r3, [r3, #28]
    1c82:	461a      	mov	r2, r3
    1c84:	7bbb      	ldrb	r3, [r7, #14]
    1c86:	429a      	cmp	r2, r3
    1c88:	dd02      	ble.n	1c90 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x4c>
            ret = CO_SDO_AB_NO_DATA;
    1c8a:	4b0e      	ldr	r3, [pc, #56]	; (1cc4 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x80>)
    1c8c:	617b      	str	r3, [r7, #20]
    1c8e:	e012      	b.n	1cb6 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
        }
        else{
            ret = CO_SDO_AB_NONE;
    1c90:	2300      	movs	r3, #0
    1c92:	617b      	str	r3, [r7, #20]
    1c94:	e00f      	b.n	1cb6 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
        }
    }
    else{
        /* only '0' may be written to subIndex 0 */
        if(ODF_arg->subIndex == 0U){
    1c96:	687b      	ldr	r3, [r7, #4]
    1c98:	7f1b      	ldrb	r3, [r3, #28]
    1c9a:	2b00      	cmp	r3, #0
    1c9c:	d109      	bne.n	1cb2 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x6e>
            if(value == 0U){
    1c9e:	7bfb      	ldrb	r3, [r7, #15]
    1ca0:	2b00      	cmp	r3, #0
    1ca2:	d103      	bne.n	1cac <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x68>
                emPr->preDefErrNoOfErrors = 0U;
    1ca4:	693b      	ldr	r3, [r7, #16]
    1ca6:	2200      	movs	r2, #0
    1ca8:	725a      	strb	r2, [r3, #9]
    1caa:	e004      	b.n	1cb6 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
            }
            else{
                ret = CO_SDO_AB_INVALID_VALUE;
    1cac:	4b06      	ldr	r3, [pc, #24]	; (1cc8 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x84>)
    1cae:	617b      	str	r3, [r7, #20]
    1cb0:	e001      	b.n	1cb6 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
            }
        }
        else{
            ret = CO_SDO_AB_READONLY;
    1cb2:	4b06      	ldr	r3, [pc, #24]	; (1ccc <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x88>)
    1cb4:	617b      	str	r3, [r7, #20]
        }
    }

    return ret;
    1cb6:	697b      	ldr	r3, [r7, #20]
}
    1cb8:	4618      	mov	r0, r3
    1cba:	371c      	adds	r7, #28
    1cbc:	46bd      	mov	sp, r7
    1cbe:	bc80      	pop	{r7}
    1cc0:	4770      	bx	lr
    1cc2:	bf00      	nop
    1cc4:	08000024 	.word	0x08000024
    1cc8:	06090030 	.word	0x06090030
    1ccc:	06010002 	.word	0x06010002

00001cd0 <_ZL11CO_ODF_1014P12CO_ODF_arg_t>:
 * Function for accessing _COB ID EMCY_ (index 0x1014) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */

static  CO_SDO_abortCode_t CO_ODF_1014(CO_ODF_arg_t *ODF_arg){
    1cd0:	b580      	push	{r7, lr}
    1cd2:	b086      	sub	sp, #24
    1cd4:	af00      	add	r7, sp, #0
    1cd6:	6078      	str	r0, [r7, #4]
    uint8_t *nodeId;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
    1cd8:	2300      	movs	r3, #0
    1cda:	617b      	str	r3, [r7, #20]
    nodeId = (uint8_t*) ODF_arg->object;
    1cdc:	687b      	ldr	r3, [r7, #4]
    1cde:	681b      	ldr	r3, [r3, #0]
    1ce0:	613b      	str	r3, [r7, #16]
    value =ptrCOEMClass->CO_getUint32(ODF_arg->data);
    1ce2:	4b10      	ldr	r3, [pc, #64]	; (1d24 <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x54>)
    1ce4:	681b      	ldr	r3, [r3, #0]
    1ce6:	461a      	mov	r2, r3
    1ce8:	687b      	ldr	r3, [r7, #4]
    1cea:	685b      	ldr	r3, [r3, #4]
    1cec:	4619      	mov	r1, r3
    1cee:	4610      	mov	r0, r2
    1cf0:	4b0d      	ldr	r3, [pc, #52]	; (1d28 <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x58>)
    1cf2:	4798      	blx	r3
    1cf4:	60f8      	str	r0, [r7, #12]

    /* add nodeId to the value */
    if(ODF_arg->reading){
    1cf6:	687b      	ldr	r3, [r7, #4]
    1cf8:	7f5b      	ldrb	r3, [r3, #29]
    1cfa:	2b00      	cmp	r3, #0
    1cfc:	d00c      	beq.n	1d18 <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x48>
        ptrCOEMClass->CO_setUint32(ODF_arg->data, value + *nodeId);
    1cfe:	4b09      	ldr	r3, [pc, #36]	; (1d24 <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x54>)
    1d00:	681b      	ldr	r3, [r3, #0]
    1d02:	4618      	mov	r0, r3
    1d04:	687b      	ldr	r3, [r7, #4]
    1d06:	6859      	ldr	r1, [r3, #4]
    1d08:	693b      	ldr	r3, [r7, #16]
    1d0a:	781b      	ldrb	r3, [r3, #0]
    1d0c:	461a      	mov	r2, r3
    1d0e:	68fb      	ldr	r3, [r7, #12]
    1d10:	4413      	add	r3, r2
    1d12:	461a      	mov	r2, r3
    1d14:	4b05      	ldr	r3, [pc, #20]	; (1d2c <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x5c>)
    1d16:	4798      	blx	r3
    }

    return ret;
    1d18:	697b      	ldr	r3, [r7, #20]
}
    1d1a:	4618      	mov	r0, r3
    1d1c:	3718      	adds	r7, #24
    1d1e:	46bd      	mov	sp, r7
    1d20:	bd80      	pop	{r7, pc}
    1d22:	bf00      	nop
    1d24:	20000964 	.word	0x20000964
    1d28:	000042c9 	.word	0x000042c9
    1d2c:	000042fd 	.word	0x000042fd

00001d30 <_ZN18CO_Emergency_Class7EM_initEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm>:
        uint32_t               *preDefErr,
        uint8_t                 preDefErrSize,
        CO_CANmodule_t         *CANdev,
        uint32_t                CANdevTxIdx,
        uint32_t                CANidTxEM)
{
    1d30:	b590      	push	{r4, r7, lr}
    1d32:	b089      	sub	sp, #36	; 0x24
    1d34:	af02      	add	r7, sp, #8
    1d36:	60f8      	str	r0, [r7, #12]
    1d38:	60b9      	str	r1, [r7, #8]
    1d3a:	607a      	str	r2, [r7, #4]
    1d3c:	603b      	str	r3, [r7, #0]
    uint8_t i;

    /* verify arguments */
    if(em==NULL || emPr==NULL || SDO==NULL || errorStatusBits==NULL ||
    1d3e:	68bb      	ldr	r3, [r7, #8]
    1d40:	2b00      	cmp	r3, #0
    1d42:	d015      	beq.n	1d70 <_ZN18CO_Emergency_Class7EM_initEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
    1d44:	687b      	ldr	r3, [r7, #4]
    1d46:	2b00      	cmp	r3, #0
    1d48:	d012      	beq.n	1d70 <_ZN18CO_Emergency_Class7EM_initEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
    1d4a:	683b      	ldr	r3, [r7, #0]
    1d4c:	2b00      	cmp	r3, #0
    1d4e:	d00f      	beq.n	1d70 <_ZN18CO_Emergency_Class7EM_initEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
    1d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1d52:	2b00      	cmp	r3, #0
    1d54:	d00c      	beq.n	1d70 <_ZN18CO_Emergency_Class7EM_initEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
    1d56:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1d5a:	2b05      	cmp	r3, #5
    1d5c:	d908      	bls.n	1d70 <_ZN18CO_Emergency_Class7EM_initEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
        errorStatusBitsSize<6U || errorRegister==NULL || preDefErr==NULL || CANdev==NULL){
    1d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1d60:	2b00      	cmp	r3, #0
    1d62:	d005      	beq.n	1d70 <_ZN18CO_Emergency_Class7EM_initEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
    1d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1d66:	2b00      	cmp	r3, #0
    1d68:	d002      	beq.n	1d70 <_ZN18CO_Emergency_Class7EM_initEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
    1d6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1d6c:	2b00      	cmp	r3, #0
    1d6e:	d102      	bne.n	1d76 <_ZN18CO_Emergency_Class7EM_initEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x46>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    1d70:	f04f 33ff 	mov.w	r3, #4294967295
    1d74:	e072      	b.n	1e5c <_ZN18CO_Emergency_Class7EM_initEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x12c>
    }

    /* Configure object variables */
    em->errorStatusBits         = errorStatusBits;
    1d76:	68bb      	ldr	r3, [r7, #8]
    1d78:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1d7a:	601a      	str	r2, [r3, #0]
    em->errorStatusBitsSize     = errorStatusBitsSize;
    1d7c:	68bb      	ldr	r3, [r7, #8]
    1d7e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
    1d82:	711a      	strb	r2, [r3, #4]
    em->bufEnd                  = em->buf + (CO_EM_INTERNAL_BUFFER_SIZE * 8);
    1d84:	68bb      	ldr	r3, [r7, #8]
    1d86:	3305      	adds	r3, #5
    1d88:	f103 0250 	add.w	r2, r3, #80	; 0x50
    1d8c:	68bb      	ldr	r3, [r7, #8]
    1d8e:	659a      	str	r2, [r3, #88]	; 0x58
    em->bufWritePtr             = em->buf;
    1d90:	68bb      	ldr	r3, [r7, #8]
    1d92:	1d5a      	adds	r2, r3, #5
    1d94:	68bb      	ldr	r3, [r7, #8]
    1d96:	65da      	str	r2, [r3, #92]	; 0x5c
    em->bufReadPtr              = em->buf;
    1d98:	68bb      	ldr	r3, [r7, #8]
    1d9a:	1d5a      	adds	r2, r3, #5
    1d9c:	68bb      	ldr	r3, [r7, #8]
    1d9e:	661a      	str	r2, [r3, #96]	; 0x60
    em->bufFull                 = 0U;
    1da0:	68bb      	ldr	r3, [r7, #8]
    1da2:	2200      	movs	r2, #0
    1da4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    em->wrongErrorReport        = 0U;
    1da8:	68bb      	ldr	r3, [r7, #8]
    1daa:	2200      	movs	r2, #0
    1dac:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    em->handler            = NULL;
    1db0:	68bb      	ldr	r3, [r7, #8]
    1db2:	2200      	movs	r2, #0
    1db4:	669a      	str	r2, [r3, #104]	; 0x68
    emPr->em                    = em;
    1db6:	687b      	ldr	r3, [r7, #4]
    1db8:	68ba      	ldr	r2, [r7, #8]
    1dba:	611a      	str	r2, [r3, #16]
    emPr->errorRegister         = errorRegister;
    1dbc:	687b      	ldr	r3, [r7, #4]
    1dbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1dc0:	601a      	str	r2, [r3, #0]
    emPr->preDefErr             = preDefErr;
    1dc2:	687b      	ldr	r3, [r7, #4]
    1dc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1dc6:	605a      	str	r2, [r3, #4]
    emPr->preDefErrSize         = preDefErrSize;
    1dc8:	687b      	ldr	r3, [r7, #4]
    1dca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
    1dce:	721a      	strb	r2, [r3, #8]
    emPr->preDefErrNoOfErrors   = 0U;
    1dd0:	687b      	ldr	r3, [r7, #4]
    1dd2:	2200      	movs	r2, #0
    1dd4:	725a      	strb	r2, [r3, #9]
    emPr->inhibitEmTimer        = 0U;
    1dd6:	687b      	ldr	r3, [r7, #4]
    1dd8:	2200      	movs	r2, #0
    1dda:	60da      	str	r2, [r3, #12]
 
    /* clear error status bits */
    for(i=0U; i<errorStatusBitsSize; i++){
    1ddc:	2300      	movs	r3, #0
    1dde:	75fb      	strb	r3, [r7, #23]
    1de0:	7dfa      	ldrb	r2, [r7, #23]
    1de2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1de6:	429a      	cmp	r2, r3
    1de8:	da09      	bge.n	1dfe <_ZN18CO_Emergency_Class7EM_initEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0xce>
        em->errorStatusBits[i] = 0U;
    1dea:	68bb      	ldr	r3, [r7, #8]
    1dec:	681a      	ldr	r2, [r3, #0]
    1dee:	7dfb      	ldrb	r3, [r7, #23]
    1df0:	4413      	add	r3, r2
    1df2:	2200      	movs	r2, #0
    1df4:	701a      	strb	r2, [r3, #0]
    for(i=0U; i<errorStatusBitsSize; i++){
    1df6:	7dfb      	ldrb	r3, [r7, #23]
    1df8:	3301      	adds	r3, #1
    1dfa:	75fb      	strb	r3, [r7, #23]
    1dfc:	e7f0      	b.n	1de0 <_ZN18CO_Emergency_Class7EM_initEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0xb0>
    }

    /* Configure Object dictionary entry at index 0x1003 and 0x1014 */
    CO_OD_configure( OD_H1003_PREDEF_ERR_FIELD,CO_ODF_1003, (void*)emPr, 0, 0U);
    1dfe:	68f8      	ldr	r0, [r7, #12]
    1e00:	2300      	movs	r3, #0
    1e02:	9301      	str	r3, [sp, #4]
    1e04:	2300      	movs	r3, #0
    1e06:	9300      	str	r3, [sp, #0]
    1e08:	687b      	ldr	r3, [r7, #4]
    1e0a:	4a16      	ldr	r2, [pc, #88]	; (1e64 <_ZN18CO_Emergency_Class7EM_initEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x134>)
    1e0c:	f241 0103 	movw	r1, #4099	; 0x1003
    1e10:	4c15      	ldr	r4, [pc, #84]	; (1e68 <_ZN18CO_Emergency_Class7EM_initEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x138>)
    1e12:	47a0      	blx	r4
    CO_OD_configure( OD_H1014_COBID_EMERGENCY,CO_ODF_1014, (void*)&SDO->nodeId, 0, 0U);
    1e14:	68f8      	ldr	r0, [r7, #12]
    1e16:	683b      	ldr	r3, [r7, #0]
    1e18:	f103 0268 	add.w	r2, r3, #104	; 0x68
    1e1c:	2300      	movs	r3, #0
    1e1e:	9301      	str	r3, [sp, #4]
    1e20:	2300      	movs	r3, #0
    1e22:	9300      	str	r3, [sp, #0]
    1e24:	4613      	mov	r3, r2
    1e26:	4a11      	ldr	r2, [pc, #68]	; (1e6c <_ZN18CO_Emergency_Class7EM_initEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x13c>)
    1e28:	f241 0114 	movw	r1, #4116	; 0x1014
    1e2c:	4c0e      	ldr	r4, [pc, #56]	; (1e68 <_ZN18CO_Emergency_Class7EM_initEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x138>)
    1e2e:	47a0      	blx	r4

    /* configure emergency message CAN transmission */
    emPr->CANdev = CANdev;
    1e30:	687b      	ldr	r3, [r7, #4]
    1e32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1e34:	615a      	str	r2, [r3, #20]
    emPr->CANdev->em = (void*)em; /* update pointer inside CAN device. */
    1e36:	687b      	ldr	r3, [r7, #4]
    1e38:	695b      	ldr	r3, [r3, #20]
    1e3a:	68ba      	ldr	r2, [r7, #8]
    1e3c:	621a      	str	r2, [r3, #32]
    emPr->CANtxBuff =ptrCODriverClass->CAN_Tx_BufferInit(
    1e3e:	4b0c      	ldr	r3, [pc, #48]	; (1e70 <_ZN18CO_Emergency_Class7EM_initEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x140>)
    1e40:	6818      	ldr	r0, [r3, #0]
    1e42:	2300      	movs	r3, #0
    1e44:	9301      	str	r3, [sp, #4]
    1e46:	2308      	movs	r3, #8
    1e48:	9300      	str	r3, [sp, #0]
    1e4a:	2300      	movs	r3, #0
    1e4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    1e4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
    1e50:	4c08      	ldr	r4, [pc, #32]	; (1e74 <_ZN18CO_Emergency_Class7EM_initEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x144>)
    1e52:	47a0      	blx	r4
    1e54:	4602      	mov	r2, r0
    1e56:	687b      	ldr	r3, [r7, #4]
    1e58:	619a      	str	r2, [r3, #24]
            CANidTxEM,          /* CAN identifier */
            0,                  /* rtr */
            8U,                  /* number of data bytes */
            0);                 /* synchronous message flag bit */

    return CO_ERROR_NO;
    1e5a:	2300      	movs	r3, #0
}
    1e5c:	4618      	mov	r0, r3
    1e5e:	371c      	adds	r7, #28
    1e60:	46bd      	mov	sp, r7
    1e62:	bd90      	pop	{r4, r7, pc}
    1e64:	00001c45 	.word	0x00001c45
    1e68:	00004719 	.word	0x00004719
    1e6c:	00001cd1 	.word	0x00001cd1
    1e70:	20000960 	.word	0x20000960
    1e74:	00001575 	.word	0x00001575

00001e78 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm>:
void CO_Emergency_Class::EM_process(
        CO_EMpr_t              *emPr,
        bool_t                  NMTisPreOrOperational,
        uint32_t                timeDifference_100us,
        uint32_t                emInhTime)
{
    1e78:	b590      	push	{r4, r7, lr}
    1e7a:	b08b      	sub	sp, #44	; 0x2c
    1e7c:	af02      	add	r7, sp, #8
    1e7e:	60f8      	str	r0, [r7, #12]
    1e80:	60b9      	str	r1, [r7, #8]
    1e82:	603b      	str	r3, [r7, #0]
    1e84:	4613      	mov	r3, r2
    1e86:	71fb      	strb	r3, [r7, #7]

    CO_EM_t *em = emPr->em;
    1e88:	68bb      	ldr	r3, [r7, #8]
    1e8a:	691b      	ldr	r3, [r3, #16]
    1e8c:	61bb      	str	r3, [r7, #24]
    uint8_t errorRegister;

    /* verify errors from driver and other */
   ptrCODriverClass->CAN_VerifyErrors();
    1e8e:	4b74      	ldr	r3, [pc, #464]	; (2060 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1e8>)
    1e90:	681b      	ldr	r3, [r3, #0]
    1e92:	4618      	mov	r0, r3
    1e94:	4b73      	ldr	r3, [pc, #460]	; (2064 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1ec>)
    1e96:	4798      	blx	r3
    if(em->wrongErrorReport != 0U){
    1e98:	69bb      	ldr	r3, [r7, #24]
    1e9a:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
    1e9e:	2b00      	cmp	r3, #0
    1ea0:	d00e      	beq.n	1ec0 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x48>
        EM_ErrorReport(em, CO_EM_WRONG_ERROR_REPORT, CO_EMC_SOFTWARE_INTERNAL, (uint32_t)em->wrongErrorReport);
    1ea2:	69bb      	ldr	r3, [r7, #24]
    1ea4:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
    1ea8:	9300      	str	r3, [sp, #0]
    1eaa:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
    1eae:	2228      	movs	r2, #40	; 0x28
    1eb0:	69b9      	ldr	r1, [r7, #24]
    1eb2:	68f8      	ldr	r0, [r7, #12]
    1eb4:	4c6c      	ldr	r4, [pc, #432]	; (2068 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1f0>)
    1eb6:	47a0      	blx	r4
        em->wrongErrorReport = 0U;
    1eb8:	69bb      	ldr	r3, [r7, #24]
    1eba:	2200      	movs	r2, #0
    1ebc:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    }


    /* calculate Error register */
    errorRegister = 0U;
    1ec0:	2300      	movs	r3, #0
    1ec2:	77fb      	strb	r3, [r7, #31]
    /* generic error */
    if(em->errorStatusBits[5]){
    1ec4:	69bb      	ldr	r3, [r7, #24]
    1ec6:	681b      	ldr	r3, [r3, #0]
    1ec8:	3305      	adds	r3, #5
    1eca:	781b      	ldrb	r3, [r3, #0]
    1ecc:	2b00      	cmp	r3, #0
    1ece:	d003      	beq.n	1ed8 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x60>
        errorRegister |= CO_ERR_REG_GENERIC_ERR;
    1ed0:	7ffb      	ldrb	r3, [r7, #31]
    1ed2:	f043 0301 	orr.w	r3, r3, #1
    1ed6:	77fb      	strb	r3, [r7, #31]
    }
    /* communication error (overrun, error state) */
    if(em->errorStatusBits[2] || em->errorStatusBits[3]){
    1ed8:	69bb      	ldr	r3, [r7, #24]
    1eda:	681b      	ldr	r3, [r3, #0]
    1edc:	3302      	adds	r3, #2
    1ede:	781b      	ldrb	r3, [r3, #0]
    1ee0:	2b00      	cmp	r3, #0
    1ee2:	d105      	bne.n	1ef0 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x78>
    1ee4:	69bb      	ldr	r3, [r7, #24]
    1ee6:	681b      	ldr	r3, [r3, #0]
    1ee8:	3303      	adds	r3, #3
    1eea:	781b      	ldrb	r3, [r3, #0]
    1eec:	2b00      	cmp	r3, #0
    1eee:	d003      	beq.n	1ef8 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x80>
        errorRegister |= CO_ERR_REG_COMM_ERR;
    1ef0:	7ffb      	ldrb	r3, [r7, #31]
    1ef2:	f043 0310 	orr.w	r3, r3, #16
    1ef6:	77fb      	strb	r3, [r7, #31]
    }
    *emPr->errorRegister = (*emPr->errorRegister & 0xEEU) | errorRegister;
    1ef8:	68bb      	ldr	r3, [r7, #8]
    1efa:	681b      	ldr	r3, [r3, #0]
    1efc:	68ba      	ldr	r2, [r7, #8]
    1efe:	6812      	ldr	r2, [r2, #0]
    1f00:	7812      	ldrb	r2, [r2, #0]
    1f02:	f022 0211 	bic.w	r2, r2, #17
    1f06:	b2d1      	uxtb	r1, r2
    1f08:	7ffa      	ldrb	r2, [r7, #31]
    1f0a:	430a      	orrs	r2, r1
    1f0c:	b2d2      	uxtb	r2, r2
    1f0e:	701a      	strb	r2, [r3, #0]

    /* inhibit time */
    if(emPr->inhibitEmTimer < emInhTime){
    1f10:	68bb      	ldr	r3, [r7, #8]
    1f12:	68da      	ldr	r2, [r3, #12]
    1f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1f16:	429a      	cmp	r2, r3
    1f18:	d205      	bcs.n	1f26 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0xae>
        emPr->inhibitEmTimer += timeDifference_100us;
    1f1a:	68bb      	ldr	r3, [r7, #8]
    1f1c:	68da      	ldr	r2, [r3, #12]
    1f1e:	683b      	ldr	r3, [r7, #0]
    1f20:	441a      	add	r2, r3
    1f22:	68bb      	ldr	r3, [r7, #8]
    1f24:	60da      	str	r2, [r3, #12]
    }

    /* send Emergency message. */
    if(     NMTisPreOrOperational &&
            !emPr->CANtxBuff->bufferFull &&
            emPr->inhibitEmTimer >= emInhTime &&
    1f26:	79fb      	ldrb	r3, [r7, #7]
    1f28:	2b00      	cmp	r3, #0
    1f2a:	d017      	beq.n	1f5c <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0xe4>
            !emPr->CANtxBuff->bufferFull &&
    1f2c:	68bb      	ldr	r3, [r7, #8]
    1f2e:	699b      	ldr	r3, [r3, #24]
    1f30:	7b5b      	ldrb	r3, [r3, #13]
    1f32:	b2db      	uxtb	r3, r3
    if(     NMTisPreOrOperational &&
    1f34:	2b00      	cmp	r3, #0
    1f36:	d111      	bne.n	1f5c <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0xe4>
            emPr->inhibitEmTimer >= emInhTime &&
    1f38:	68bb      	ldr	r3, [r7, #8]
    1f3a:	68da      	ldr	r2, [r3, #12]
            !emPr->CANtxBuff->bufferFull &&
    1f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1f3e:	429a      	cmp	r2, r3
    1f40:	d30c      	bcc.n	1f5c <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0xe4>
            (em->bufReadPtr != em->bufWritePtr || em->bufFull))
    1f42:	69bb      	ldr	r3, [r7, #24]
    1f44:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    1f46:	69bb      	ldr	r3, [r7, #24]
    1f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
            emPr->inhibitEmTimer >= emInhTime &&
    1f4a:	429a      	cmp	r2, r3
    1f4c:	d104      	bne.n	1f58 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0xe0>
            (em->bufReadPtr != em->bufWritePtr || em->bufFull))
    1f4e:	69bb      	ldr	r3, [r7, #24]
    1f50:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
    1f54:	2b00      	cmp	r3, #0
    1f56:	d001      	beq.n	1f5c <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0xe4>
            emPr->inhibitEmTimer >= emInhTime &&
    1f58:	2301      	movs	r3, #1
    1f5a:	e000      	b.n	1f5e <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0xe6>
    1f5c:	2300      	movs	r3, #0
    if(     NMTisPreOrOperational &&
    1f5e:	2b00      	cmp	r3, #0
    1f60:	d079      	beq.n	2056 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1de>
    {
        uint32_t preDEF;    /* preDefinedErrorField */
        
        /* add error register */
        em->bufReadPtr[2] = *emPr->errorRegister;
    1f62:	69bb      	ldr	r3, [r7, #24]
    1f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    1f66:	3302      	adds	r3, #2
    1f68:	68ba      	ldr	r2, [r7, #8]
    1f6a:	6812      	ldr	r2, [r2, #0]
    1f6c:	7812      	ldrb	r2, [r2, #0]
    1f6e:	701a      	strb	r2, [r3, #0]

        /* copy data to CAN emergency message */
        CO_memcpy(emPr->CANtxBuff->data, em->bufReadPtr, 8U);
    1f70:	68f8      	ldr	r0, [r7, #12]
    1f72:	68bb      	ldr	r3, [r7, #8]
    1f74:	699b      	ldr	r3, [r3, #24]
    1f76:	1d59      	adds	r1, r3, #5
    1f78:	69bb      	ldr	r3, [r7, #24]
    1f7a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    1f7c:	2308      	movs	r3, #8
    1f7e:	4c3b      	ldr	r4, [pc, #236]	; (206c <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1f4>)
    1f80:	47a0      	blx	r4
        CO_memcpy((uint8_t*)&preDEF, em->bufReadPtr, 4U);
    1f82:	68f8      	ldr	r0, [r7, #12]
    1f84:	69bb      	ldr	r3, [r7, #24]
    1f86:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    1f88:	f107 0114 	add.w	r1, r7, #20
    1f8c:	2304      	movs	r3, #4
    1f8e:	4c37      	ldr	r4, [pc, #220]	; (206c <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1f4>)
    1f90:	47a0      	blx	r4
        em->bufReadPtr += 8;
    1f92:	69bb      	ldr	r3, [r7, #24]
    1f94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    1f96:	f103 0208 	add.w	r2, r3, #8
    1f9a:	69bb      	ldr	r3, [r7, #24]
    1f9c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Update read buffer pointer and reset inhibit timer */
        if(em->bufReadPtr == em->bufEnd){
    1f9e:	69bb      	ldr	r3, [r7, #24]
    1fa0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    1fa2:	69bb      	ldr	r3, [r7, #24]
    1fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    1fa6:	429a      	cmp	r2, r3
    1fa8:	d103      	bne.n	1fb2 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x13a>
            em->bufReadPtr = em->buf;
    1faa:	69bb      	ldr	r3, [r7, #24]
    1fac:	1d5a      	adds	r2, r3, #5
    1fae:	69bb      	ldr	r3, [r7, #24]
    1fb0:	661a      	str	r2, [r3, #96]	; 0x60
        }
        emPr->inhibitEmTimer = 0U;
    1fb2:	68bb      	ldr	r3, [r7, #8]
    1fb4:	2200      	movs	r2, #0
    1fb6:	60da      	str	r2, [r3, #12]

        /* verify message buffer overflow, then clear full flag */
        if(em->bufFull == 2U){
    1fb8:	69bb      	ldr	r3, [r7, #24]
    1fba:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
    1fbe:	2b02      	cmp	r3, #2
    1fc0:	d10d      	bne.n	1fde <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x166>
            em->bufFull = 0U;    /* will be updated below */
    1fc2:	69bb      	ldr	r3, [r7, #24]
    1fc4:	2200      	movs	r2, #0
    1fc6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
            EM_ErrorReport(em, CO_EM_EMERGENCY_BUFFER_FULL, CO_EMC_GENERIC, 0U);
    1fca:	2300      	movs	r3, #0
    1fcc:	9300      	str	r3, [sp, #0]
    1fce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1fd2:	2220      	movs	r2, #32
    1fd4:	69b9      	ldr	r1, [r7, #24]
    1fd6:	68f8      	ldr	r0, [r7, #12]
    1fd8:	4c23      	ldr	r4, [pc, #140]	; (2068 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1f0>)
    1fda:	47a0      	blx	r4
    1fdc:	e003      	b.n	1fe6 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x16e>
        }
        else{
            em->bufFull = 0;
    1fde:	69bb      	ldr	r3, [r7, #24]
    1fe0:	2200      	movs	r2, #0
    1fe2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        }

        /* write to 'pre-defined error field' (object dictionary, index 0x1003) */
        if(emPr->preDefErr){
    1fe6:	68bb      	ldr	r3, [r7, #8]
    1fe8:	685b      	ldr	r3, [r3, #4]
    1fea:	2b00      	cmp	r3, #0
    1fec:	d02a      	beq.n	2044 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1cc>
            uint8_t i;

            if(emPr->preDefErrNoOfErrors < emPr->preDefErrSize)
    1fee:	68bb      	ldr	r3, [r7, #8]
    1ff0:	7a5b      	ldrb	r3, [r3, #9]
    1ff2:	461a      	mov	r2, r3
    1ff4:	68bb      	ldr	r3, [r7, #8]
    1ff6:	7a1b      	ldrb	r3, [r3, #8]
    1ff8:	429a      	cmp	r2, r3
    1ffa:	da05      	bge.n	2008 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x190>
                emPr->preDefErrNoOfErrors++;
    1ffc:	68bb      	ldr	r3, [r7, #8]
    1ffe:	7a5b      	ldrb	r3, [r3, #9]
    2000:	3301      	adds	r3, #1
    2002:	b2da      	uxtb	r2, r3
    2004:	68bb      	ldr	r3, [r7, #8]
    2006:	725a      	strb	r2, [r3, #9]
            for(i=emPr->preDefErrNoOfErrors-1; i>0; i--)
    2008:	68bb      	ldr	r3, [r7, #8]
    200a:	7a5b      	ldrb	r3, [r3, #9]
    200c:	3b01      	subs	r3, #1
    200e:	77bb      	strb	r3, [r7, #30]
    2010:	7fbb      	ldrb	r3, [r7, #30]
    2012:	2b00      	cmp	r3, #0
    2014:	dd12      	ble.n	203c <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1c4>
                emPr->preDefErr[i] = emPr->preDefErr[i-1];
    2016:	68bb      	ldr	r3, [r7, #8]
    2018:	685a      	ldr	r2, [r3, #4]
    201a:	7fbb      	ldrb	r3, [r7, #30]
    201c:	009b      	lsls	r3, r3, #2
    201e:	441a      	add	r2, r3
    2020:	68bb      	ldr	r3, [r7, #8]
    2022:	6859      	ldr	r1, [r3, #4]
    2024:	7fbb      	ldrb	r3, [r7, #30]
    2026:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    202a:	3b01      	subs	r3, #1
    202c:	009b      	lsls	r3, r3, #2
    202e:	440b      	add	r3, r1
    2030:	681b      	ldr	r3, [r3, #0]
    2032:	6013      	str	r3, [r2, #0]
            for(i=emPr->preDefErrNoOfErrors-1; i>0; i--)
    2034:	7fbb      	ldrb	r3, [r7, #30]
    2036:	3b01      	subs	r3, #1
    2038:	77bb      	strb	r3, [r7, #30]
    203a:	e7e9      	b.n	2010 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x198>
            emPr->preDefErr[0] = preDEF;
    203c:	68bb      	ldr	r3, [r7, #8]
    203e:	685b      	ldr	r3, [r3, #4]
    2040:	697a      	ldr	r2, [r7, #20]
    2042:	601a      	str	r2, [r3, #0]
        }

        /* send CAN message */
        ptrCODriverClass->CAN_Send(emPr->CANtxBuff);
    2044:	4b06      	ldr	r3, [pc, #24]	; (2060 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1e8>)
    2046:	681a      	ldr	r2, [r3, #0]
    2048:	68bb      	ldr	r3, [r7, #8]
    204a:	699b      	ldr	r3, [r3, #24]
    204c:	4619      	mov	r1, r3
    204e:	4610      	mov	r0, r2
    2050:	4b07      	ldr	r3, [pc, #28]	; (2070 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1f8>)
    2052:	4798      	blx	r3
    }

    return;
    2054:	bf00      	nop
    2056:	bf00      	nop
}
    2058:	3724      	adds	r7, #36	; 0x24
    205a:	46bd      	mov	sp, r7
    205c:	bd90      	pop	{r4, r7, pc}
    205e:	bf00      	nop
    2060:	20000960 	.word	0x20000960
    2064:	00001849 	.word	0x00001849
    2068:	00002075 	.word	0x00002075
    206c:	0000428d 	.word	0x0000428d
    2070:	00001621 	.word	0x00001621

00002074 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm>:


/******************************************************************************/
void CO_Emergency_Class::EM_ErrorReport(CO_EM_t *em, const uint8_t errorBit, const uint32_t errorCode, const uint32_t infoCode){
    2074:	b590      	push	{r4, r7, lr}
    2076:	b08d      	sub	sp, #52	; 0x34
    2078:	af00      	add	r7, sp, #0
    207a:	60f8      	str	r0, [r7, #12]
    207c:	60b9      	str	r1, [r7, #8]
    207e:	603b      	str	r3, [r7, #0]
    2080:	4613      	mov	r3, r2
    2082:	71fb      	strb	r3, [r7, #7]
    uint8_t index = errorBit >> 3;
    2084:	79fb      	ldrb	r3, [r7, #7]
    2086:	10db      	asrs	r3, r3, #3
    2088:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    uint8_t bitmask = 1 << (errorBit & 0x7);
    208c:	79fb      	ldrb	r3, [r7, #7]
    208e:	f003 0307 	and.w	r3, r3, #7
    2092:	2201      	movs	r2, #1
    2094:	fa02 f303 	lsl.w	r3, r2, r3
    2098:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    uint8_t *errorStatusBits = 0;
    209c:	2300      	movs	r3, #0
    209e:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t sendEmergency = true;
    20a0:	2301      	movs	r3, #1
    20a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if(em == NULL){
    20a6:	68bb      	ldr	r3, [r7, #8]
    20a8:	2b00      	cmp	r3, #0
    20aa:	d103      	bne.n	20b4 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x40>
        sendEmergency = false;
    20ac:	2300      	movs	r3, #0
    20ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    20b2:	e01e      	b.n	20f2 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x7e>
    }
    else if(index >= em->errorStatusBitsSize){
    20b4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
    20b8:	68ba      	ldr	r2, [r7, #8]
    20ba:	7912      	ldrb	r2, [r2, #4]
    20bc:	4293      	cmp	r3, r2
    20be:	db07      	blt.n	20d0 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x5c>
        /* if errorBit value not supported, send emergency 'CO_EM_WRONG_ERROR_REPORT' */
        em->wrongErrorReport = errorBit;
    20c0:	68bb      	ldr	r3, [r7, #8]
    20c2:	79fa      	ldrb	r2, [r7, #7]
    20c4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        sendEmergency = false;
    20c8:	2300      	movs	r3, #0
    20ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    20ce:	e010      	b.n	20f2 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x7e>
    }
    else{
        errorStatusBits = &em->errorStatusBits[index];
    20d0:	68bb      	ldr	r3, [r7, #8]
    20d2:	681a      	ldr	r2, [r3, #0]
    20d4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
    20d8:	4413      	add	r3, r2
    20da:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* if error was already reported, do nothing */
        if((*errorStatusBits & bitmask) != 0){
    20dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    20de:	781a      	ldrb	r2, [r3, #0]
    20e0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
    20e4:	4013      	ands	r3, r2
    20e6:	b2db      	uxtb	r3, r3
    20e8:	2b00      	cmp	r3, #0
    20ea:	d002      	beq.n	20f2 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x7e>
            sendEmergency = false;
    20ec:	2300      	movs	r3, #0
    20ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }
    }

    if(sendEmergency){
    20f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    20f6:	2b00      	cmp	r3, #0
    20f8:	d05c      	beq.n	21b4 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x140>
        /* set error bit */
        if(errorBit){
    20fa:	79fb      	ldrb	r3, [r7, #7]
    20fc:	2b00      	cmp	r3, #0
    20fe:	d007      	beq.n	2110 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x9c>
            /* any error except NO_ERROR */
            *errorStatusBits |= bitmask;
    2100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2102:	781a      	ldrb	r2, [r3, #0]
    2104:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
    2108:	4313      	orrs	r3, r2
    210a:	b2da      	uxtb	r2, r3
    210c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    210e:	701a      	strb	r2, [r3, #0]
        }

        /* verify buffer full, set overflow */
        if(em->bufFull){
    2110:	68bb      	ldr	r3, [r7, #8]
    2112:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
    2116:	2b00      	cmp	r3, #0
    2118:	d004      	beq.n	2124 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0xb0>
            em->bufFull = 2;
    211a:	68bb      	ldr	r3, [r7, #8]
    211c:	2202      	movs	r2, #2
    211e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
            if(em->handler != NULL) {
                em->handler();
            }
        }
    }
}
    2122:	e047      	b.n	21b4 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x140>
            CO_memcpySwap2(&bufCopy[0], &errorCode);
    2124:	68fb      	ldr	r3, [r7, #12]
    2126:	463a      	mov	r2, r7
    2128:	f107 0118 	add.w	r1, r7, #24
    212c:	4618      	mov	r0, r3
    212e:	4b23      	ldr	r3, [pc, #140]	; (21bc <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x148>)
    2130:	4798      	blx	r3
            bufCopy[2] = 0; /* error register will be set later */
    2132:	2300      	movs	r3, #0
    2134:	76bb      	strb	r3, [r7, #26]
            bufCopy[3] = errorBit;
    2136:	79fb      	ldrb	r3, [r7, #7]
    2138:	76fb      	strb	r3, [r7, #27]
            CO_memcpySwap4(&bufCopy[4], &infoCode);
    213a:	68f8      	ldr	r0, [r7, #12]
    213c:	f107 0318 	add.w	r3, r7, #24
    2140:	3304      	adds	r3, #4
    2142:	f107 0240 	add.w	r2, r7, #64	; 0x40
    2146:	4619      	mov	r1, r3
    2148:	4b1d      	ldr	r3, [pc, #116]	; (21c0 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x14c>)
    214a:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    214c:	f3ef 8310 	mrs	r3, PRIMASK
    2150:	617b      	str	r3, [r7, #20]
  return(result);
    2152:	697b      	ldr	r3, [r7, #20]
            CO_LOCK_EMCY();
    2154:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
    2156:	b672      	cpsid	i
            CO_memcpy(em->bufWritePtr, &bufCopy[0], 8);
    2158:	68f8      	ldr	r0, [r7, #12]
    215a:	68bb      	ldr	r3, [r7, #8]
    215c:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
    215e:	f107 0218 	add.w	r2, r7, #24
    2162:	2308      	movs	r3, #8
    2164:	4c17      	ldr	r4, [pc, #92]	; (21c4 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x150>)
    2166:	47a0      	blx	r4
            em->bufWritePtr += 8;
    2168:	68bb      	ldr	r3, [r7, #8]
    216a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    216c:	f103 0208 	add.w	r2, r3, #8
    2170:	68bb      	ldr	r3, [r7, #8]
    2172:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufEnd) em->bufWritePtr = em->buf;
    2174:	68bb      	ldr	r3, [r7, #8]
    2176:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    2178:	68bb      	ldr	r3, [r7, #8]
    217a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    217c:	429a      	cmp	r2, r3
    217e:	d103      	bne.n	2188 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x114>
    2180:	68bb      	ldr	r3, [r7, #8]
    2182:	1d5a      	adds	r2, r3, #5
    2184:	68bb      	ldr	r3, [r7, #8]
    2186:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufReadPtr) em->bufFull = 1;
    2188:	68bb      	ldr	r3, [r7, #8]
    218a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    218c:	68bb      	ldr	r3, [r7, #8]
    218e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    2190:	429a      	cmp	r2, r3
    2192:	d103      	bne.n	219c <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x128>
    2194:	68bb      	ldr	r3, [r7, #8]
    2196:	2201      	movs	r2, #1
    2198:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    219c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    219e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    21a0:	6a3b      	ldr	r3, [r7, #32]
    21a2:	f383 8810 	msr	PRIMASK, r3
            if(em->handler != NULL) {
    21a6:	68bb      	ldr	r3, [r7, #8]
    21a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    21aa:	2b00      	cmp	r3, #0
    21ac:	d002      	beq.n	21b4 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x140>
                em->handler();
    21ae:	68bb      	ldr	r3, [r7, #8]
    21b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    21b2:	4798      	blx	r3
}
    21b4:	bf00      	nop
    21b6:	3734      	adds	r7, #52	; 0x34
    21b8:	46bd      	mov	sp, r7
    21ba:	bd90      	pop	{r4, r7, pc}
    21bc:	00004335 	.word	0x00004335
    21c0:	00004365 	.word	0x00004365
    21c4:	0000428d 	.word	0x0000428d

000021c8 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm>:


/******************************************************************************/
void CO_Emergency_Class::EM_ErrorReset(CO_EM_t *em, const uint8_t errorBit, const uint32_t infoCode){
    21c8:	b590      	push	{r4, r7, lr}
    21ca:	b08d      	sub	sp, #52	; 0x34
    21cc:	af00      	add	r7, sp, #0
    21ce:	60f8      	str	r0, [r7, #12]
    21d0:	60b9      	str	r1, [r7, #8]
    21d2:	603b      	str	r3, [r7, #0]
    21d4:	4613      	mov	r3, r2
    21d6:	71fb      	strb	r3, [r7, #7]
    uint8_t index = errorBit >> 3;
    21d8:	79fb      	ldrb	r3, [r7, #7]
    21da:	10db      	asrs	r3, r3, #3
    21dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    uint8_t bitmask = 1 << (errorBit & 0x7);
    21e0:	79fb      	ldrb	r3, [r7, #7]
    21e2:	f003 0307 	and.w	r3, r3, #7
    21e6:	2201      	movs	r2, #1
    21e8:	fa02 f303 	lsl.w	r3, r2, r3
    21ec:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    uint8_t *errorStatusBits = 0;
    21f0:	2300      	movs	r3, #0
    21f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t sendEmergency = true;
    21f4:	2301      	movs	r3, #1
    21f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if(em == NULL){
    21fa:	68bb      	ldr	r3, [r7, #8]
    21fc:	2b00      	cmp	r3, #0
    21fe:	d103      	bne.n	2208 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x40>
        sendEmergency = false;
    2200:	2300      	movs	r3, #0
    2202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    2206:	e01e      	b.n	2246 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x7e>
    }
    else if(index >= em->errorStatusBitsSize){
    2208:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
    220c:	68ba      	ldr	r2, [r7, #8]
    220e:	7912      	ldrb	r2, [r2, #4]
    2210:	4293      	cmp	r3, r2
    2212:	db07      	blt.n	2224 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x5c>
        /* if errorBit value not supported, send emergency 'CO_EM_WRONG_ERROR_REPORT' */
        em->wrongErrorReport = errorBit;
    2214:	68bb      	ldr	r3, [r7, #8]
    2216:	79fa      	ldrb	r2, [r7, #7]
    2218:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        sendEmergency = false;
    221c:	2300      	movs	r3, #0
    221e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    2222:	e010      	b.n	2246 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x7e>
    }
    else{
        errorStatusBits = &em->errorStatusBits[index];
    2224:	68bb      	ldr	r3, [r7, #8]
    2226:	681a      	ldr	r2, [r3, #0]
    2228:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
    222c:	4413      	add	r3, r2
    222e:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* if error was allready cleared, do nothing */
        if((*errorStatusBits & bitmask) == 0){
    2230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2232:	781a      	ldrb	r2, [r3, #0]
    2234:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
    2238:	4013      	ands	r3, r2
    223a:	b2db      	uxtb	r3, r3
    223c:	2b00      	cmp	r3, #0
    223e:	d102      	bne.n	2246 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x7e>
            sendEmergency = false;
    2240:	2300      	movs	r3, #0
    2242:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }
    }

    if(sendEmergency){
    2246:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    224a:	2b00      	cmp	r3, #0
    224c:	d059      	beq.n	2302 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x13a>
        /* erase error bit */
        *errorStatusBits &= ~bitmask;
    224e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2250:	781b      	ldrb	r3, [r3, #0]
    2252:	b25a      	sxtb	r2, r3
    2254:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
    2258:	43db      	mvns	r3, r3
    225a:	b25b      	sxtb	r3, r3
    225c:	4013      	ands	r3, r2
    225e:	b25b      	sxtb	r3, r3
    2260:	b2da      	uxtb	r2, r3
    2262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2264:	701a      	strb	r2, [r3, #0]

        /* verify buffer full */
        if(em->bufFull){
    2266:	68bb      	ldr	r3, [r7, #8]
    2268:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
    226c:	2b00      	cmp	r3, #0
    226e:	d004      	beq.n	227a <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0xb2>
            em->bufFull = 2;
    2270:	68bb      	ldr	r3, [r7, #8]
    2272:	2202      	movs	r2, #2
    2274:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
            if(em->handler != NULL) {
                em->handler();
            }
        }
    }
}
    2278:	e043      	b.n	2302 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x13a>
            bufCopy[0] = 0;
    227a:	2300      	movs	r3, #0
    227c:	763b      	strb	r3, [r7, #24]
            bufCopy[1] = 0;
    227e:	2300      	movs	r3, #0
    2280:	767b      	strb	r3, [r7, #25]
            bufCopy[2] = 0; /* error register will be set later */
    2282:	2300      	movs	r3, #0
    2284:	76bb      	strb	r3, [r7, #26]
            bufCopy[3] = errorBit;
    2286:	79fb      	ldrb	r3, [r7, #7]
    2288:	76fb      	strb	r3, [r7, #27]
            CO_memcpySwap4(&bufCopy[4], &infoCode);
    228a:	68f8      	ldr	r0, [r7, #12]
    228c:	463a      	mov	r2, r7
    228e:	f107 0318 	add.w	r3, r7, #24
    2292:	3304      	adds	r3, #4
    2294:	4619      	mov	r1, r3
    2296:	4b1d      	ldr	r3, [pc, #116]	; (230c <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x144>)
    2298:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    229a:	f3ef 8310 	mrs	r3, PRIMASK
    229e:	617b      	str	r3, [r7, #20]
  return(result);
    22a0:	697b      	ldr	r3, [r7, #20]
            CO_LOCK_EMCY();
    22a2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
    22a4:	b672      	cpsid	i
            CO_memcpy(em->bufWritePtr, &bufCopy[0], 8);
    22a6:	68f8      	ldr	r0, [r7, #12]
    22a8:	68bb      	ldr	r3, [r7, #8]
    22aa:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
    22ac:	f107 0218 	add.w	r2, r7, #24
    22b0:	2308      	movs	r3, #8
    22b2:	4c17      	ldr	r4, [pc, #92]	; (2310 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x148>)
    22b4:	47a0      	blx	r4
            em->bufWritePtr += 8;
    22b6:	68bb      	ldr	r3, [r7, #8]
    22b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    22ba:	f103 0208 	add.w	r2, r3, #8
    22be:	68bb      	ldr	r3, [r7, #8]
    22c0:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufEnd) em->bufWritePtr = em->buf;
    22c2:	68bb      	ldr	r3, [r7, #8]
    22c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    22c6:	68bb      	ldr	r3, [r7, #8]
    22c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    22ca:	429a      	cmp	r2, r3
    22cc:	d103      	bne.n	22d6 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x10e>
    22ce:	68bb      	ldr	r3, [r7, #8]
    22d0:	1d5a      	adds	r2, r3, #5
    22d2:	68bb      	ldr	r3, [r7, #8]
    22d4:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufReadPtr) em->bufFull = 1;
    22d6:	68bb      	ldr	r3, [r7, #8]
    22d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    22da:	68bb      	ldr	r3, [r7, #8]
    22dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    22de:	429a      	cmp	r2, r3
    22e0:	d103      	bne.n	22ea <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x122>
    22e2:	68bb      	ldr	r3, [r7, #8]
    22e4:	2201      	movs	r2, #1
    22e6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    22ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    22ec:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    22ee:	6a3b      	ldr	r3, [r7, #32]
    22f0:	f383 8810 	msr	PRIMASK, r3
            if(em->handler != NULL) {
    22f4:	68bb      	ldr	r3, [r7, #8]
    22f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    22f8:	2b00      	cmp	r3, #0
    22fa:	d002      	beq.n	2302 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x13a>
                em->handler();
    22fc:	68bb      	ldr	r3, [r7, #8]
    22fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2300:	4798      	blx	r3
}
    2302:	bf00      	nop
    2304:	3734      	adds	r7, #52	; 0x34
    2306:	46bd      	mov	sp, r7
    2308:	bd90      	pop	{r4, r7, pc}
    230a:	bf00      	nop
    230c:	00004365 	.word	0x00004365
    2310:	0000428d 	.word	0x0000428d

00002314 <_ZN18CO_Emergency_Class10EM_IsErrorEP7CO_EM_th>:


/******************************************************************************/
bool_t CO_Emergency_Class::EM_IsError(CO_EM_t *em, const uint8_t errorBit){
    2314:	b480      	push	{r7}
    2316:	b087      	sub	sp, #28
    2318:	af00      	add	r7, sp, #0
    231a:	60f8      	str	r0, [r7, #12]
    231c:	60b9      	str	r1, [r7, #8]
    231e:	4613      	mov	r3, r2
    2320:	71fb      	strb	r3, [r7, #7]
    uint8_t index = errorBit >> 3;
    2322:	79fb      	ldrb	r3, [r7, #7]
    2324:	10db      	asrs	r3, r3, #3
    2326:	75bb      	strb	r3, [r7, #22]
    uint8_t bitmask = 1 << (errorBit & 0x7);
    2328:	79fb      	ldrb	r3, [r7, #7]
    232a:	f003 0307 	and.w	r3, r3, #7
    232e:	2201      	movs	r2, #1
    2330:	fa02 f303 	lsl.w	r3, r2, r3
    2334:	757b      	strb	r3, [r7, #21]
    bool_t ret = false;
    2336:	2300      	movs	r3, #0
    2338:	75fb      	strb	r3, [r7, #23]

    if(em != NULL && index < em->errorStatusBitsSize){
    233a:	68bb      	ldr	r3, [r7, #8]
    233c:	2b00      	cmp	r3, #0
    233e:	d010      	beq.n	2362 <_ZN18CO_Emergency_Class10EM_IsErrorEP7CO_EM_th+0x4e>
    2340:	7dbb      	ldrb	r3, [r7, #22]
    2342:	68ba      	ldr	r2, [r7, #8]
    2344:	7912      	ldrb	r2, [r2, #4]
    2346:	4293      	cmp	r3, r2
    2348:	da0b      	bge.n	2362 <_ZN18CO_Emergency_Class10EM_IsErrorEP7CO_EM_th+0x4e>
        if((em->errorStatusBits[index] & bitmask) != 0){
    234a:	68bb      	ldr	r3, [r7, #8]
    234c:	681a      	ldr	r2, [r3, #0]
    234e:	7dbb      	ldrb	r3, [r7, #22]
    2350:	4413      	add	r3, r2
    2352:	781a      	ldrb	r2, [r3, #0]
    2354:	7d7b      	ldrb	r3, [r7, #21]
    2356:	4013      	ands	r3, r2
    2358:	b2db      	uxtb	r3, r3
    235a:	2b00      	cmp	r3, #0
    235c:	d001      	beq.n	2362 <_ZN18CO_Emergency_Class10EM_IsErrorEP7CO_EM_th+0x4e>
            ret = true;
    235e:	2301      	movs	r3, #1
    2360:	75fb      	strb	r3, [r7, #23]
        }
    }

    return ret;
    2362:	7dfb      	ldrb	r3, [r7, #23]
    2364:	4618      	mov	r0, r3
    2366:	371c      	adds	r7, #28
    2368:	46bd      	mov	sp, r7
    236a:	bc80      	pop	{r7}
    236c:	4770      	bx	lr

0000236e <_ZL17CO_HBcons_receivePvPK13CO_CANrxMsg_t>:
#include "CO_Emergency_Class.h"

CO_HB_Consumer_Class	*ptrHBConsumerClass;


static void CO_HBcons_receive(void *object,const CO_CANrxMsg_t *msg){
    236e:	b480      	push	{r7}
    2370:	b085      	sub	sp, #20
    2372:	af00      	add	r7, sp, #0
    2374:	6078      	str	r0, [r7, #4]
    2376:	6039      	str	r1, [r7, #0]
	CO_HBconsNode_t *HBconsNode;

	HBconsNode = (CO_HBconsNode_t*) object; /* this is the correct pointer type of the first argument */
    2378:	687b      	ldr	r3, [r7, #4]
    237a:	60fb      	str	r3, [r7, #12]

	/* verify message length */
	if(msg->DLC == 1){
    237c:	683b      	ldr	r3, [r7, #0]
    237e:	7d1b      	ldrb	r3, [r3, #20]
    2380:	2b01      	cmp	r3, #1
    2382:	d106      	bne.n	2392 <_ZL17CO_HBcons_receivePvPK13CO_CANrxMsg_t+0x24>
		/* copy data and set 'new message' flag. */
		HBconsNode->NMTstate = msg->data[0];
    2384:	683b      	ldr	r3, [r7, #0]
    2386:	7d5a      	ldrb	r2, [r3, #21]
    2388:	68fb      	ldr	r3, [r7, #12]
    238a:	701a      	strb	r2, [r3, #0]
		HBconsNode->CANrxNew = true;
    238c:	68fb      	ldr	r3, [r7, #12]
    238e:	2201      	movs	r2, #1
    2390:	731a      	strb	r2, [r3, #12]
	}
}
    2392:	bf00      	nop
    2394:	3714      	adds	r7, #20
    2396:	46bd      	mov	sp, r7
    2398:	bc80      	pop	{r7}
    239a:	4770      	bx	lr

0000239c <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm>:
static void CO_HBcons_monitoredNodeConfig(
CO_HBconsumer_t        *HBcons,
uint8_t                 idx,
uint32_t                HBconsTime)
{
    239c:	b590      	push	{r4, r7, lr}
    239e:	b08d      	sub	sp, #52	; 0x34
    23a0:	af04      	add	r7, sp, #16
    23a2:	60f8      	str	r0, [r7, #12]
    23a4:	460b      	mov	r3, r1
    23a6:	607a      	str	r2, [r7, #4]
    23a8:	72fb      	strb	r3, [r7, #11]
	uint32_t COB_ID;
	uint32_t NodeID;
	CO_HBconsNode_t *monitoredNode;

	if(idx >= HBcons->numberOfMonitoredNodes) return;
    23aa:	7afb      	ldrb	r3, [r7, #11]
    23ac:	68fa      	ldr	r2, [r7, #12]
    23ae:	7b12      	ldrb	r2, [r2, #12]
    23b0:	4293      	cmp	r3, r2
    23b2:	da39      	bge.n	2428 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x8c>

	NodeID = (uint32_t)((HBconsTime>>16)&0xFF);
    23b4:	687b      	ldr	r3, [r7, #4]
    23b6:	0c1b      	lsrs	r3, r3, #16
    23b8:	b2db      	uxtb	r3, r3
    23ba:	61bb      	str	r3, [r7, #24]
	monitoredNode = &HBcons->monitoredNodes[idx];
    23bc:	68fb      	ldr	r3, [r7, #12]
    23be:	689a      	ldr	r2, [r3, #8]
    23c0:	7afb      	ldrb	r3, [r7, #11]
    23c2:	011b      	lsls	r3, r3, #4
    23c4:	4413      	add	r3, r2
    23c6:	617b      	str	r3, [r7, #20]
	monitoredNode->time = (uint32_t)HBconsTime;
    23c8:	697b      	ldr	r3, [r7, #20]
    23ca:	687a      	ldr	r2, [r7, #4]
    23cc:	609a      	str	r2, [r3, #8]
	monitoredNode->NMTstate = 0;
    23ce:	697b      	ldr	r3, [r7, #20]
    23d0:	2200      	movs	r2, #0
    23d2:	701a      	strb	r2, [r3, #0]
	monitoredNode->monStarted = false;
    23d4:	697b      	ldr	r3, [r7, #20]
    23d6:	2200      	movs	r2, #0
    23d8:	705a      	strb	r2, [r3, #1]

	/* is channel used */
	if(NodeID && monitoredNode->time){
    23da:	69bb      	ldr	r3, [r7, #24]
    23dc:	2b00      	cmp	r3, #0
    23de:	d008      	beq.n	23f2 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x56>
    23e0:	697b      	ldr	r3, [r7, #20]
    23e2:	689b      	ldr	r3, [r3, #8]
    23e4:	2b00      	cmp	r3, #0
    23e6:	d004      	beq.n	23f2 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x56>
		COB_ID = NodeID + 0x700;
    23e8:	69bb      	ldr	r3, [r7, #24]
    23ea:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
    23ee:	61fb      	str	r3, [r7, #28]
    23f0:	e004      	b.n	23fc <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x60>
	}
	else{
		COB_ID = 0;
    23f2:	2300      	movs	r3, #0
    23f4:	61fb      	str	r3, [r7, #28]
		monitoredNode->time = 0;
    23f6:	697b      	ldr	r3, [r7, #20]
    23f8:	2200      	movs	r2, #0
    23fa:	609a      	str	r2, [r3, #8]
	}

	/* configure Heartbeat consumer CAN reception */
	ptrCODriverClass->CAN_Rx_BufferInit(
    23fc:	4b0c      	ldr	r3, [pc, #48]	; (2430 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x94>)
    23fe:	6818      	ldr	r0, [r3, #0]
	HBcons->CANdevRxIdxStart + idx,
    2400:	68fb      	ldr	r3, [r7, #12]
    2402:	695a      	ldr	r2, [r3, #20]
	ptrCODriverClass->CAN_Rx_BufferInit(
    2404:	7afb      	ldrb	r3, [r7, #11]
    2406:	18d1      	adds	r1, r2, r3
	COB_ID,
	0x7FF,
	0,
	(void*)&HBcons->monitoredNodes[idx],
    2408:	68fb      	ldr	r3, [r7, #12]
    240a:	689a      	ldr	r2, [r3, #8]
    240c:	7afb      	ldrb	r3, [r7, #11]
    240e:	011b      	lsls	r3, r3, #4
    2410:	4413      	add	r3, r2
	CO_HBcons_receive);
    2412:	4a08      	ldr	r2, [pc, #32]	; (2434 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x98>)
    2414:	9202      	str	r2, [sp, #8]
    2416:	9301      	str	r3, [sp, #4]
    2418:	2300      	movs	r3, #0
    241a:	9300      	str	r3, [sp, #0]
    241c:	f240 73ff 	movw	r3, #2047	; 0x7ff
    2420:	69fa      	ldr	r2, [r7, #28]
    2422:	4c05      	ldr	r4, [pc, #20]	; (2438 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x9c>)
    2424:	47a0      	blx	r4
    2426:	e000      	b.n	242a <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x8e>
	if(idx >= HBcons->numberOfMonitoredNodes) return;
    2428:	bf00      	nop
}
    242a:	3724      	adds	r7, #36	; 0x24
    242c:	46bd      	mov	sp, r7
    242e:	bd90      	pop	{r4, r7, pc}
    2430:	20000960 	.word	0x20000960
    2434:	0000236f 	.word	0x0000236f
    2438:	00001479 	.word	0x00001479

0000243c <_ZL11CO_ODF_1016P12CO_ODF_arg_t>:
static CO_SDO_abortCode_t CO_ODF_1016(CO_ODF_arg_t *ODF_arg){
    243c:	b580      	push	{r7, lr}
    243e:	b08c      	sub	sp, #48	; 0x30
    2440:	af00      	add	r7, sp, #0
    2442:	6078      	str	r0, [r7, #4]
	CO_HBconsumer_t *HBcons;
	uint32_t value;
	CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
    2444:	2300      	movs	r3, #0
    2446:	62fb      	str	r3, [r7, #44]	; 0x2c

	HBcons = (CO_HBconsumer_t*) ODF_arg->object;
    2448:	687b      	ldr	r3, [r7, #4]
    244a:	681b      	ldr	r3, [r3, #0]
    244c:	627b      	str	r3, [r7, #36]	; 0x24
	value =ptrCODriverClass->CO_getUint32(ODF_arg->data);
    244e:	4b32      	ldr	r3, [pc, #200]	; (2518 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xdc>)
    2450:	681b      	ldr	r3, [r3, #0]
    2452:	1d1a      	adds	r2, r3, #4
    2454:	687b      	ldr	r3, [r7, #4]
    2456:	685b      	ldr	r3, [r3, #4]
    2458:	4619      	mov	r1, r3
    245a:	4610      	mov	r0, r2
    245c:	4b2f      	ldr	r3, [pc, #188]	; (251c <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xe0>)
    245e:	4798      	blx	r3
    2460:	6238      	str	r0, [r7, #32]

	if(!ODF_arg->reading){
    2462:	687b      	ldr	r3, [r7, #4]
    2464:	7f5b      	ldrb	r3, [r3, #29]
    2466:	2b00      	cmp	r3, #0
    2468:	d150      	bne.n	250c <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xd0>
		uint8_t NodeID;
		uint32_t HBconsTime;

		NodeID = (value >> 16U) & 0xFFU;
    246a:	6a3b      	ldr	r3, [r7, #32]
    246c:	0c1b      	lsrs	r3, r3, #16
    246e:	77fb      	strb	r3, [r7, #31]
		HBconsTime = value & 0xFFFFU;
    2470:	6a3b      	ldr	r3, [r7, #32]
    2472:	b29b      	uxth	r3, r3
    2474:	61bb      	str	r3, [r7, #24]

		if((value & 0xFF800000U) != 0){
    2476:	6a3b      	ldr	r3, [r7, #32]
    2478:	0ddb      	lsrs	r3, r3, #23
    247a:	05db      	lsls	r3, r3, #23
    247c:	2b00      	cmp	r3, #0
    247e:	d002      	beq.n	2486 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0x4a>
			ret = CO_SDO_AB_PRAM_INCOMPAT;
    2480:	4b27      	ldr	r3, [pc, #156]	; (2520 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xe4>)
    2482:	62fb      	str	r3, [r7, #44]	; 0x2c
    2484:	e036      	b.n	24f4 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb8>
		}
		else if((HBconsTime != 0) && (NodeID != 0)){
    2486:	69bb      	ldr	r3, [r7, #24]
    2488:	2b00      	cmp	r3, #0
    248a:	d02f      	beq.n	24ec <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb0>
    248c:	7ffb      	ldrb	r3, [r7, #31]
    248e:	2b00      	cmp	r3, #0
    2490:	d02c      	beq.n	24ec <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb0>
			uint8_t i;
			/* there must not be more entries with same index and time different than zero */
			for(i = 0U; i<HBcons->numberOfMonitoredNodes; i++){
    2492:	2300      	movs	r3, #0
    2494:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    2498:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    249c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    249e:	7b12      	ldrb	r2, [r2, #12]
    24a0:	4293      	cmp	r3, r2
    24a2:	da26      	bge.n	24f2 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb6>
				uint32_t objectCopy = HBcons->HBconsTime[i];
    24a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    24a6:	685a      	ldr	r2, [r3, #4]
    24a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    24ac:	009b      	lsls	r3, r3, #2
    24ae:	4413      	add	r3, r2
    24b0:	681b      	ldr	r3, [r3, #0]
    24b2:	617b      	str	r3, [r7, #20]
				uint8_t NodeIDObj = (objectCopy >> 16U) & 0xFFU;
    24b4:	697b      	ldr	r3, [r7, #20]
    24b6:	0c1b      	lsrs	r3, r3, #16
    24b8:	74fb      	strb	r3, [r7, #19]
				uint32_t HBconsTimeObj = objectCopy & 0xFFFFU;
    24ba:	697b      	ldr	r3, [r7, #20]
    24bc:	b29b      	uxth	r3, r3
    24be:	60fb      	str	r3, [r7, #12]
				if(((ODF_arg->subIndex-1U) != i) && (HBconsTimeObj != 0) && (NodeID == NodeIDObj)){
    24c0:	687b      	ldr	r3, [r7, #4]
    24c2:	7f1b      	ldrb	r3, [r3, #28]
    24c4:	1e5a      	subs	r2, r3, #1
    24c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    24ca:	429a      	cmp	r2, r3
    24cc:	d008      	beq.n	24e0 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xa4>
    24ce:	68fb      	ldr	r3, [r7, #12]
    24d0:	2b00      	cmp	r3, #0
    24d2:	d005      	beq.n	24e0 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xa4>
    24d4:	7ffa      	ldrb	r2, [r7, #31]
    24d6:	7cfb      	ldrb	r3, [r7, #19]
    24d8:	429a      	cmp	r2, r3
    24da:	d101      	bne.n	24e0 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xa4>
					ret = CO_SDO_AB_PRAM_INCOMPAT;
    24dc:	4b10      	ldr	r3, [pc, #64]	; (2520 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xe4>)
    24de:	62fb      	str	r3, [r7, #44]	; 0x2c
			for(i = 0U; i<HBcons->numberOfMonitoredNodes; i++){
    24e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    24e4:	3301      	adds	r3, #1
    24e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    24ea:	e7d5      	b.n	2498 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0x5c>
				}
			}
		}
		else{
			ret = CO_SDO_AB_NONE;
    24ec:	2300      	movs	r3, #0
    24ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    24f0:	e000      	b.n	24f4 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb8>
			}
    24f2:	bf00      	nop
		}

		/* Configure */
		if(ret == CO_SDO_AB_NONE){
    24f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    24f6:	2b00      	cmp	r3, #0
    24f8:	d108      	bne.n	250c <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xd0>
			CO_HBcons_monitoredNodeConfig(HBcons, ODF_arg->subIndex-1U, value);
    24fa:	687b      	ldr	r3, [r7, #4]
    24fc:	7f1b      	ldrb	r3, [r3, #28]
    24fe:	3b01      	subs	r3, #1
    2500:	b2db      	uxtb	r3, r3
    2502:	6a3a      	ldr	r2, [r7, #32]
    2504:	4619      	mov	r1, r3
    2506:	6a78      	ldr	r0, [r7, #36]	; 0x24
    2508:	4b06      	ldr	r3, [pc, #24]	; (2524 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xe8>)
    250a:	4798      	blx	r3
		}
	}

	return ret;
    250c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
    250e:	4618      	mov	r0, r3
    2510:	3730      	adds	r7, #48	; 0x30
    2512:	46bd      	mov	sp, r7
    2514:	bd80      	pop	{r7, pc}
    2516:	bf00      	nop
    2518:	20000960 	.word	0x20000960
    251c:	000042c9 	.word	0x000042c9
    2520:	06040043 	.word	0x06040043
    2524:	0000239d 	.word	0x0000239d

00002528 <_ZN20CO_HB_Consumer_ClassC1Ev>:


// default constructor
CO_HB_Consumer_Class::CO_HB_Consumer_Class()
    2528:	b480      	push	{r7}
    252a:	b083      	sub	sp, #12
    252c:	af00      	add	r7, sp, #0
    252e:	6078      	str	r0, [r7, #4]
{
} //CO_HB_Consumer_Class
    2530:	687b      	ldr	r3, [r7, #4]
    2532:	4618      	mov	r0, r3
    2534:	370c      	adds	r7, #12
    2536:	46bd      	mov	sp, r7
    2538:	bc80      	pop	{r7}
    253a:	4770      	bx	lr

0000253c <_ZN20CO_HB_Consumer_ClassD1Ev>:

// default destructor
CO_HB_Consumer_Class::~CO_HB_Consumer_Class()
    253c:	b480      	push	{r7}
    253e:	b083      	sub	sp, #12
    2540:	af00      	add	r7, sp, #0
    2542:	6078      	str	r0, [r7, #4]
{
} //~CO_HB_Consumer_Class
    2544:	687b      	ldr	r3, [r7, #4]
    2546:	4618      	mov	r0, r3
    2548:	370c      	adds	r7, #12
    254a:	46bd      	mov	sp, r7
    254c:	bc80      	pop	{r7}
    254e:	4770      	bx	lr

00002550 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm>:
const uint32_t          HBconsTime[],
CO_HBconsNode_t         monitoredNodes[],
uint8_t                 numberOfMonitoredNodes,
CO_CANmodule_t         *CANdevRx,
uint32_t                CANdevRxIdxStart)
{
    2550:	b590      	push	{r4, r7, lr}
    2552:	b089      	sub	sp, #36	; 0x24
    2554:	af02      	add	r7, sp, #8
    2556:	60f8      	str	r0, [r7, #12]
    2558:	60b9      	str	r1, [r7, #8]
    255a:	607a      	str	r2, [r7, #4]
    255c:	603b      	str	r3, [r7, #0]
	uint8_t i;

	/* verify arguments */
	if(HBcons==NULL || em==NULL || SDO==NULL || HBconsTime==NULL ||
    255e:	68bb      	ldr	r3, [r7, #8]
    2560:	2b00      	cmp	r3, #0
    2562:	d00e      	beq.n	2582 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x32>
    2564:	687b      	ldr	r3, [r7, #4]
    2566:	2b00      	cmp	r3, #0
    2568:	d00b      	beq.n	2582 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x32>
    256a:	683b      	ldr	r3, [r7, #0]
    256c:	2b00      	cmp	r3, #0
    256e:	d008      	beq.n	2582 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x32>
    2570:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2572:	2b00      	cmp	r3, #0
    2574:	d005      	beq.n	2582 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x32>
    2576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2578:	2b00      	cmp	r3, #0
    257a:	d002      	beq.n	2582 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x32>
	monitoredNodes==NULL || CANdevRx==NULL){
    257c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    257e:	2b00      	cmp	r3, #0
    2580:	d102      	bne.n	2588 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x38>
		return CO_ERROR_ILLEGAL_ARGUMENT;
    2582:	f04f 33ff 	mov.w	r3, #4294967295
    2586:	e039      	b.n	25fc <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xac>
	}

	/* Configure object variables */
	HBcons->em = em;
    2588:	68bb      	ldr	r3, [r7, #8]
    258a:	687a      	ldr	r2, [r7, #4]
    258c:	601a      	str	r2, [r3, #0]
	HBcons->HBconsTime = HBconsTime;
    258e:	68bb      	ldr	r3, [r7, #8]
    2590:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2592:	605a      	str	r2, [r3, #4]
	HBcons->monitoredNodes = monitoredNodes;
    2594:	68bb      	ldr	r3, [r7, #8]
    2596:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2598:	609a      	str	r2, [r3, #8]
	HBcons->numberOfMonitoredNodes = numberOfMonitoredNodes;
    259a:	68bb      	ldr	r3, [r7, #8]
    259c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
    25a0:	731a      	strb	r2, [r3, #12]
	HBcons->allMonitoredOperational = 0;
    25a2:	68bb      	ldr	r3, [r7, #8]
    25a4:	2200      	movs	r2, #0
    25a6:	735a      	strb	r2, [r3, #13]
	HBcons->CANdevRx = CANdevRx;
    25a8:	68bb      	ldr	r3, [r7, #8]
    25aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    25ac:	611a      	str	r2, [r3, #16]
	HBcons->CANdevRxIdxStart = CANdevRxIdxStart;
    25ae:	68bb      	ldr	r3, [r7, #8]
    25b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
    25b2:	615a      	str	r2, [r3, #20]

	for(i=0; i<HBcons->numberOfMonitoredNodes; i++)
    25b4:	2300      	movs	r3, #0
    25b6:	75fb      	strb	r3, [r7, #23]
    25b8:	7dfb      	ldrb	r3, [r7, #23]
    25ba:	68ba      	ldr	r2, [r7, #8]
    25bc:	7b12      	ldrb	r2, [r2, #12]
    25be:	4293      	cmp	r3, r2
    25c0:	da0e      	bge.n	25e0 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x90>
	CO_HBcons_monitoredNodeConfig(HBcons, i, HBcons->HBconsTime[i]);
    25c2:	68bb      	ldr	r3, [r7, #8]
    25c4:	685a      	ldr	r2, [r3, #4]
    25c6:	7dfb      	ldrb	r3, [r7, #23]
    25c8:	009b      	lsls	r3, r3, #2
    25ca:	4413      	add	r3, r2
    25cc:	681a      	ldr	r2, [r3, #0]
    25ce:	7dfb      	ldrb	r3, [r7, #23]
    25d0:	4619      	mov	r1, r3
    25d2:	68b8      	ldr	r0, [r7, #8]
    25d4:	4b0b      	ldr	r3, [pc, #44]	; (2604 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xb4>)
    25d6:	4798      	blx	r3
	for(i=0; i<HBcons->numberOfMonitoredNodes; i++)
    25d8:	7dfb      	ldrb	r3, [r7, #23]
    25da:	3301      	adds	r3, #1
    25dc:	75fb      	strb	r3, [r7, #23]
    25de:	e7eb      	b.n	25b8 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x68>

	/* Configure Object dictionary entry at index 0x1016 */
	ptrCODriverClass->CO_OD_configure( OD_H1016_CONSUMER_HB_TIME, CO_ODF_1016, (void*)HBcons, 0, 0);
    25e0:	4b09      	ldr	r3, [pc, #36]	; (2608 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xb8>)
    25e2:	681b      	ldr	r3, [r3, #0]
    25e4:	1d18      	adds	r0, r3, #4
    25e6:	2300      	movs	r3, #0
    25e8:	9301      	str	r3, [sp, #4]
    25ea:	2300      	movs	r3, #0
    25ec:	9300      	str	r3, [sp, #0]
    25ee:	68bb      	ldr	r3, [r7, #8]
    25f0:	4a06      	ldr	r2, [pc, #24]	; (260c <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xbc>)
    25f2:	f241 0116 	movw	r1, #4118	; 0x1016
    25f6:	4c06      	ldr	r4, [pc, #24]	; (2610 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xc0>)
    25f8:	47a0      	blx	r4

	return CO_ERROR_NO;
    25fa:	2300      	movs	r3, #0
}
    25fc:	4618      	mov	r0, r3
    25fe:	371c      	adds	r7, #28
    2600:	46bd      	mov	sp, r7
    2602:	bd90      	pop	{r4, r7, pc}
    2604:	0000239d 	.word	0x0000239d
    2608:	20000960 	.word	0x20000960
    260c:	0000243d 	.word	0x0000243d
    2610:	00004719 	.word	0x00004719

00002614 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm>:
/******************************************************************************/
void CO_HB_Consumer_Class::CO_HBconsumer_process(
CO_HBconsumer_t        *HBcons,
bool_t                  NMTisPreOrOperational,
uint32_t                timeDifference_ms)
{
    2614:	b590      	push	{r4, r7, lr}
    2616:	b089      	sub	sp, #36	; 0x24
    2618:	af02      	add	r7, sp, #8
    261a:	60f8      	str	r0, [r7, #12]
    261c:	60b9      	str	r1, [r7, #8]
    261e:	603b      	str	r3, [r7, #0]
    2620:	4613      	mov	r3, r2
    2622:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	uint8_t AllMonitoredOperationalCopy;
	CO_HBconsNode_t *monitoredNode;

	AllMonitoredOperationalCopy = 5;
    2624:	2305      	movs	r3, #5
    2626:	75bb      	strb	r3, [r7, #22]
	monitoredNode = &HBcons->monitoredNodes[0];
    2628:	68bb      	ldr	r3, [r7, #8]
    262a:	689b      	ldr	r3, [r3, #8]
    262c:	613b      	str	r3, [r7, #16]

	if(NMTisPreOrOperational){
    262e:	79fb      	ldrb	r3, [r7, #7]
    2630:	2b00      	cmp	r3, #0
    2632:	d060      	beq.n	26f6 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0xe2>
		for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
    2634:	2300      	movs	r3, #0
    2636:	75fb      	strb	r3, [r7, #23]
    2638:	7dfb      	ldrb	r3, [r7, #23]
    263a:	68ba      	ldr	r2, [r7, #8]
    263c:	7b12      	ldrb	r2, [r2, #12]
    263e:	4293      	cmp	r3, r2
    2640:	da72      	bge.n	2728 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x114>
			if(monitoredNode->time){/* is node monitored */
    2642:	693b      	ldr	r3, [r7, #16]
    2644:	689b      	ldr	r3, [r3, #8]
    2646:	2b00      	cmp	r3, #0
    2648:	d04e      	beq.n	26e8 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0xd4>
				/* Verify if new Consumer Heartbeat message received */
				if(monitoredNode->CANrxNew){
    264a:	693b      	ldr	r3, [r7, #16]
    264c:	7b1b      	ldrb	r3, [r3, #12]
    264e:	2b00      	cmp	r3, #0
    2650:	d00e      	beq.n	2670 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x5c>
					if(monitoredNode->NMTstate){
    2652:	693b      	ldr	r3, [r7, #16]
    2654:	781b      	ldrb	r3, [r3, #0]
    2656:	2b00      	cmp	r3, #0
    2658:	d007      	beq.n	266a <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x56>
						/* not a bootup message */
						monitoredNode->monStarted = true;
    265a:	693b      	ldr	r3, [r7, #16]
    265c:	2201      	movs	r2, #1
    265e:	705a      	strb	r2, [r3, #1]
						monitoredNode->timeoutTimer = 0;  /* reset timer */
    2660:	693b      	ldr	r3, [r7, #16]
    2662:	2200      	movs	r2, #0
    2664:	605a      	str	r2, [r3, #4]
						timeDifference_ms = 0;
    2666:	2300      	movs	r3, #0
    2668:	603b      	str	r3, [r7, #0]
					}
					monitoredNode->CANrxNew = false;
    266a:	693b      	ldr	r3, [r7, #16]
    266c:	2200      	movs	r2, #0
    266e:	731a      	strb	r2, [r3, #12]
				}
				/* Verify timeout */
				if(monitoredNode->timeoutTimer < monitoredNode->time) monitoredNode->timeoutTimer += timeDifference_ms;
    2670:	693b      	ldr	r3, [r7, #16]
    2672:	685a      	ldr	r2, [r3, #4]
    2674:	693b      	ldr	r3, [r7, #16]
    2676:	689b      	ldr	r3, [r3, #8]
    2678:	429a      	cmp	r2, r3
    267a:	d205      	bcs.n	2688 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x74>
    267c:	693b      	ldr	r3, [r7, #16]
    267e:	685a      	ldr	r2, [r3, #4]
    2680:	683b      	ldr	r3, [r7, #0]
    2682:	441a      	add	r2, r3
    2684:	693b      	ldr	r3, [r7, #16]
    2686:	605a      	str	r2, [r3, #4]

				if(monitoredNode->monStarted){
    2688:	693b      	ldr	r3, [r7, #16]
    268a:	785b      	ldrb	r3, [r3, #1]
    268c:	2b00      	cmp	r3, #0
    268e:	d025      	beq.n	26dc <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0xc8>
					if(monitoredNode->timeoutTimer >= monitoredNode->time){
    2690:	693b      	ldr	r3, [r7, #16]
    2692:	685a      	ldr	r2, [r3, #4]
    2694:	693b      	ldr	r3, [r7, #16]
    2696:	689b      	ldr	r3, [r3, #8]
    2698:	429a      	cmp	r2, r3
    269a:	d30f      	bcc.n	26bc <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0xa8>
						ptrCODriverClass->EM_ErrorReport(HBcons->em, CO_EM_HEARTBEAT_CONSUMER, CO_EMC_HEARTBEAT, i);
    269c:	4b26      	ldr	r3, [pc, #152]	; (2738 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x124>)
    269e:	681b      	ldr	r3, [r3, #0]
    26a0:	1d18      	adds	r0, r3, #4
    26a2:	68bb      	ldr	r3, [r7, #8]
    26a4:	6819      	ldr	r1, [r3, #0]
    26a6:	7dfb      	ldrb	r3, [r7, #23]
    26a8:	9300      	str	r3, [sp, #0]
    26aa:	f248 1330 	movw	r3, #33072	; 0x8130
    26ae:	221b      	movs	r2, #27
    26b0:	4c22      	ldr	r4, [pc, #136]	; (273c <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x128>)
    26b2:	47a0      	blx	r4
						monitoredNode->NMTstate = 0;
    26b4:	693b      	ldr	r3, [r7, #16]
    26b6:	2200      	movs	r2, #0
    26b8:	701a      	strb	r2, [r3, #0]
    26ba:	e00f      	b.n	26dc <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0xc8>
					}
					else if(monitoredNode->NMTstate == 0){
    26bc:	693b      	ldr	r3, [r7, #16]
    26be:	781b      	ldrb	r3, [r3, #0]
    26c0:	2b00      	cmp	r3, #0
    26c2:	d10b      	bne.n	26dc <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0xc8>
						/* there was a bootup message */
						ptrCODriverClass->EM_ErrorReport(HBcons->em, CO_EM_HB_CONSUMER_REMOTE_RESET, CO_EMC_HEARTBEAT, i);
    26c4:	4b1c      	ldr	r3, [pc, #112]	; (2738 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x124>)
    26c6:	681b      	ldr	r3, [r3, #0]
    26c8:	1d18      	adds	r0, r3, #4
    26ca:	68bb      	ldr	r3, [r7, #8]
    26cc:	6819      	ldr	r1, [r3, #0]
    26ce:	7dfb      	ldrb	r3, [r7, #23]
    26d0:	9300      	str	r3, [sp, #0]
    26d2:	f248 1330 	movw	r3, #33072	; 0x8130
    26d6:	221c      	movs	r2, #28
    26d8:	4c18      	ldr	r4, [pc, #96]	; (273c <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x128>)
    26da:	47a0      	blx	r4
					}
				}
				if(monitoredNode->NMTstate != CO_NMT_OPERATIONAL)
    26dc:	693b      	ldr	r3, [r7, #16]
    26de:	781b      	ldrb	r3, [r3, #0]
    26e0:	2b05      	cmp	r3, #5
    26e2:	d001      	beq.n	26e8 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0xd4>
				AllMonitoredOperationalCopy = 0;
    26e4:	2300      	movs	r3, #0
    26e6:	75bb      	strb	r3, [r7, #22]
			}
			monitoredNode++;
    26e8:	693b      	ldr	r3, [r7, #16]
    26ea:	3310      	adds	r3, #16
    26ec:	613b      	str	r3, [r7, #16]
		for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
    26ee:	7dfb      	ldrb	r3, [r7, #23]
    26f0:	3301      	adds	r3, #1
    26f2:	75fb      	strb	r3, [r7, #23]
    26f4:	e7a0      	b.n	2638 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x24>
		}
	}
	else{ /* not in (pre)operational state */
		for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
    26f6:	2300      	movs	r3, #0
    26f8:	75fb      	strb	r3, [r7, #23]
    26fa:	7dfb      	ldrb	r3, [r7, #23]
    26fc:	68ba      	ldr	r2, [r7, #8]
    26fe:	7b12      	ldrb	r2, [r2, #12]
    2700:	4293      	cmp	r3, r2
    2702:	da0f      	bge.n	2724 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x110>
			monitoredNode->NMTstate = 0;
    2704:	693b      	ldr	r3, [r7, #16]
    2706:	2200      	movs	r2, #0
    2708:	701a      	strb	r2, [r3, #0]
			monitoredNode->CANrxNew = false;
    270a:	693b      	ldr	r3, [r7, #16]
    270c:	2200      	movs	r2, #0
    270e:	731a      	strb	r2, [r3, #12]
			monitoredNode->monStarted = false;
    2710:	693b      	ldr	r3, [r7, #16]
    2712:	2200      	movs	r2, #0
    2714:	705a      	strb	r2, [r3, #1]
			monitoredNode++;
    2716:	693b      	ldr	r3, [r7, #16]
    2718:	3310      	adds	r3, #16
    271a:	613b      	str	r3, [r7, #16]
		for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
    271c:	7dfb      	ldrb	r3, [r7, #23]
    271e:	3301      	adds	r3, #1
    2720:	75fb      	strb	r3, [r7, #23]
    2722:	e7ea      	b.n	26fa <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0xe6>
		}
		AllMonitoredOperationalCopy = 0;
    2724:	2300      	movs	r3, #0
    2726:	75bb      	strb	r3, [r7, #22]
	}
	HBcons->allMonitoredOperational = AllMonitoredOperationalCopy;
    2728:	68bb      	ldr	r3, [r7, #8]
    272a:	7dba      	ldrb	r2, [r7, #22]
    272c:	735a      	strb	r2, [r3, #13]
}
    272e:	bf00      	nop
    2730:	371c      	adds	r7, #28
    2732:	46bd      	mov	sp, r7
    2734:	bd90      	pop	{r4, r7, pc}
    2736:	bf00      	nop
    2738:	20000960 	.word	0x20000960
    273c:	00002075 	.word	0x00002075

00002740 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t>:
#include "CO_NMT_Heartbeat_Class.h"
#include "CO_Driver_Class.h"



static void CO_NMT_receive(void *object, const CO_CANrxMsg_t *msg){
    2740:	b580      	push	{r7, lr}
    2742:	b084      	sub	sp, #16
    2744:	af00      	add	r7, sp, #0
    2746:	6078      	str	r0, [r7, #4]
    2748:	6039      	str	r1, [r7, #0]
    CO_NMT_t *NMT;
    uint8_t nodeId;

    NMT = (CO_NMT_t*)object;   /* this is the correct pointer type of the first argument */
    274a:	687b      	ldr	r3, [r7, #4]
    274c:	60fb      	str	r3, [r7, #12]

    nodeId = msg->data[1];
    274e:	683b      	ldr	r3, [r7, #0]
    2750:	7d9b      	ldrb	r3, [r3, #22]
    2752:	72fb      	strb	r3, [r7, #11]

    if((msg->DLC == 2) && ((nodeId == 0) || (nodeId == NMT->nodeId))){
    2754:	683b      	ldr	r3, [r7, #0]
    2756:	7d1b      	ldrb	r3, [r3, #20]
    2758:	2b02      	cmp	r3, #2
    275a:	d146      	bne.n	27ea <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0xaa>
    275c:	7afb      	ldrb	r3, [r7, #11]
    275e:	2b00      	cmp	r3, #0
    2760:	d004      	beq.n	276c <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x2c>
    2762:	68fb      	ldr	r3, [r7, #12]
    2764:	7a9b      	ldrb	r3, [r3, #10]
    2766:	7afa      	ldrb	r2, [r7, #11]
    2768:	429a      	cmp	r2, r3
    276a:	d13e      	bne.n	27ea <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0xaa>
        uint8_t command = msg->data[0];
    276c:	683b      	ldr	r3, [r7, #0]
    276e:	7d5b      	ldrb	r3, [r3, #21]
    2770:	72bb      	strb	r3, [r7, #10]
        uint8_t currentOperatingState = NMT->operatingState;
    2772:	68fb      	ldr	r3, [r7, #12]
    2774:	781b      	ldrb	r3, [r3, #0]
    2776:	727b      	strb	r3, [r7, #9]

        switch(command){
    2778:	7abb      	ldrb	r3, [r7, #10]
    277a:	2b80      	cmp	r3, #128	; 0x80
    277c:	d019      	beq.n	27b2 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x72>
    277e:	2b80      	cmp	r3, #128	; 0x80
    2780:	dc04      	bgt.n	278c <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x4c>
    2782:	2b01      	cmp	r3, #1
    2784:	d007      	beq.n	2796 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x56>
    2786:	2b02      	cmp	r3, #2
    2788:	d00f      	beq.n	27aa <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x6a>
    278a:	e01f      	b.n	27cc <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
    278c:	2b81      	cmp	r3, #129	; 0x81
    278e:	d014      	beq.n	27ba <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x7a>
    2790:	2b82      	cmp	r3, #130	; 0x82
    2792:	d016      	beq.n	27c2 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x82>
    2794:	e01a      	b.n	27cc <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
            case CO_NMT_ENTER_OPERATIONAL:
                if((*NMT->emPr->errorRegister) == 0U){
    2796:	68fb      	ldr	r3, [r7, #12]
    2798:	695b      	ldr	r3, [r3, #20]
    279a:	681b      	ldr	r3, [r3, #0]
    279c:	781b      	ldrb	r3, [r3, #0]
    279e:	2b00      	cmp	r3, #0
    27a0:	d113      	bne.n	27ca <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8a>
                    NMT->operatingState = CO_NMT_OPERATIONAL;
    27a2:	68fb      	ldr	r3, [r7, #12]
    27a4:	2205      	movs	r2, #5
    27a6:	701a      	strb	r2, [r3, #0]
                }
                break;
    27a8:	e00f      	b.n	27ca <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8a>
            case CO_NMT_ENTER_STOPPED:
                NMT->operatingState = CO_NMT_STOPPED;
    27aa:	68fb      	ldr	r3, [r7, #12]
    27ac:	2204      	movs	r2, #4
    27ae:	701a      	strb	r2, [r3, #0]
                break;
    27b0:	e00c      	b.n	27cc <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
            case CO_NMT_ENTER_PRE_OPERATIONAL:
                NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
    27b2:	68fb      	ldr	r3, [r7, #12]
    27b4:	227f      	movs	r2, #127	; 0x7f
    27b6:	701a      	strb	r2, [r3, #0]
                break;
    27b8:	e008      	b.n	27cc <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
            case CO_NMT_RESET_NODE:
                NMT->resetCommand = CO_RESET_APP;
    27ba:	68fb      	ldr	r3, [r7, #12]
    27bc:	2202      	movs	r2, #2
    27be:	725a      	strb	r2, [r3, #9]
                break;
    27c0:	e004      	b.n	27cc <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
            case CO_NMT_RESET_COMMUNICATION:
                NMT->resetCommand = CO_RESET_COMM;
    27c2:	68fb      	ldr	r3, [r7, #12]
    27c4:	2201      	movs	r2, #1
    27c6:	725a      	strb	r2, [r3, #9]
                break;
    27c8:	e000      	b.n	27cc <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
                break;
    27ca:	bf00      	nop
        }

        if(NMT->ptrState!=NULL && currentOperatingState!=NMT->operatingState){
    27cc:	68fb      	ldr	r3, [r7, #12]
    27ce:	69db      	ldr	r3, [r3, #28]
    27d0:	2b00      	cmp	r3, #0
    27d2:	d00a      	beq.n	27ea <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0xaa>
    27d4:	68fb      	ldr	r3, [r7, #12]
    27d6:	781b      	ldrb	r3, [r3, #0]
    27d8:	7a7a      	ldrb	r2, [r7, #9]
    27da:	429a      	cmp	r2, r3
    27dc:	d005      	beq.n	27ea <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0xaa>
            NMT->ptrState((CO_NMT_internalState_t)NMT->operatingState);
    27de:	68fb      	ldr	r3, [r7, #12]
    27e0:	69db      	ldr	r3, [r3, #28]
    27e2:	68fa      	ldr	r2, [r7, #12]
    27e4:	7812      	ldrb	r2, [r2, #0]
    27e6:	4610      	mov	r0, r2
    27e8:	4798      	blx	r3
        }
    }
}
    27ea:	bf00      	nop
    27ec:	3710      	adds	r7, #16
    27ee:	46bd      	mov	sp, r7
    27f0:	bd80      	pop	{r7, pc}

000027f2 <_ZN22CO_NMT_Heartbeat_ClassC1Ev>:
// default constructor
CO_NMT_Heartbeat_Class::CO_NMT_Heartbeat_Class()
    27f2:	b480      	push	{r7}
    27f4:	b083      	sub	sp, #12
    27f6:	af00      	add	r7, sp, #0
    27f8:	6078      	str	r0, [r7, #4]
{
} //CO_NMT_Heartbeat
    27fa:	687b      	ldr	r3, [r7, #4]
    27fc:	4618      	mov	r0, r3
    27fe:	370c      	adds	r7, #12
    2800:	46bd      	mov	sp, r7
    2802:	bc80      	pop	{r7}
    2804:	4770      	bx	lr

00002806 <_ZN22CO_NMT_Heartbeat_ClassD1Ev>:

// default destructor
CO_NMT_Heartbeat_Class::~CO_NMT_Heartbeat_Class()
    2806:	b480      	push	{r7}
    2808:	b083      	sub	sp, #12
    280a:	af00      	add	r7, sp, #0
    280c:	6078      	str	r0, [r7, #4]
{
} //~CO_NMT_Heartbeat
    280e:	687b      	ldr	r3, [r7, #4]
    2810:	4618      	mov	r0, r3
    2812:	370c      	adds	r7, #12
    2814:	46bd      	mov	sp, r7
    2816:	bc80      	pop	{r7}
    2818:	4770      	bx	lr
	...

0000281c <_ZN22CO_NMT_Heartbeat_Class11CO_NMT_initEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm>:
        uint32_t                NMT_rxIdx,
        uint32_t                CANidRxNMT,
        CO_CANmodule_t         *HB_CANdev,
        uint32_t                HB_txIdx,
        uint32_t                CANidTxHB)
{
    281c:	b5b0      	push	{r4, r5, r7, lr}
    281e:	b088      	sub	sp, #32
    2820:	af04      	add	r7, sp, #16
    2822:	60f8      	str	r0, [r7, #12]
    2824:	60b9      	str	r1, [r7, #8]
    2826:	607a      	str	r2, [r7, #4]
    2828:	70fb      	strb	r3, [r7, #3]
    /* verify arguments */
    if(NMT_Init==NULL || emPr==NULL || NMT_CANdev==NULL || HB_CANdev==NULL){
    282a:	68bb      	ldr	r3, [r7, #8]
    282c:	2b00      	cmp	r3, #0
    282e:	d008      	beq.n	2842 <_ZN22CO_NMT_Heartbeat_Class11CO_NMT_initEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x26>
    2830:	687b      	ldr	r3, [r7, #4]
    2832:	2b00      	cmp	r3, #0
    2834:	d005      	beq.n	2842 <_ZN22CO_NMT_Heartbeat_Class11CO_NMT_initEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x26>
    2836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2838:	2b00      	cmp	r3, #0
    283a:	d002      	beq.n	2842 <_ZN22CO_NMT_Heartbeat_Class11CO_NMT_initEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x26>
    283c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    283e:	2b00      	cmp	r3, #0
    2840:	d102      	bne.n	2848 <_ZN22CO_NMT_Heartbeat_Class11CO_NMT_initEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x2c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    2842:	f04f 33ff 	mov.w	r3, #4294967295
    2846:	e062      	b.n	290e <_ZN22CO_NMT_Heartbeat_Class11CO_NMT_initEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xf2>
    }else{
		NMT=NMT_Init;
    2848:	68fb      	ldr	r3, [r7, #12]
    284a:	68ba      	ldr	r2, [r7, #8]
    284c:	601a      	str	r2, [r3, #0]
	}

    /* blinking bytes */
    NMT->LEDflickering          = 0;
    284e:	68fb      	ldr	r3, [r7, #12]
    2850:	681b      	ldr	r3, [r3, #0]
    2852:	2200      	movs	r2, #0
    2854:	705a      	strb	r2, [r3, #1]
    NMT->LEDblinking            = 0;
    2856:	68fb      	ldr	r3, [r7, #12]
    2858:	681b      	ldr	r3, [r3, #0]
    285a:	2200      	movs	r2, #0
    285c:	709a      	strb	r2, [r3, #2]
    NMT->LEDsingleFlash         = 0;
    285e:	68fb      	ldr	r3, [r7, #12]
    2860:	681b      	ldr	r3, [r3, #0]
    2862:	2200      	movs	r2, #0
    2864:	70da      	strb	r2, [r3, #3]
    NMT->LEDdoubleFlash         = 0;
    2866:	68fb      	ldr	r3, [r7, #12]
    2868:	681b      	ldr	r3, [r3, #0]
    286a:	2200      	movs	r2, #0
    286c:	711a      	strb	r2, [r3, #4]
    NMT->LEDtripleFlash         = 0;
    286e:	68fb      	ldr	r3, [r7, #12]
    2870:	681b      	ldr	r3, [r3, #0]
    2872:	2200      	movs	r2, #0
    2874:	715a      	strb	r2, [r3, #5]
    NMT->LEDquadrupleFlash      = 0;
    2876:	68fb      	ldr	r3, [r7, #12]
    2878:	681b      	ldr	r3, [r3, #0]
    287a:	2200      	movs	r2, #0
    287c:	719a      	strb	r2, [r3, #6]

    /* Configure object variables */
    NMT->operatingState         = CO_NMT_INITIALIZING;
    287e:	68fb      	ldr	r3, [r7, #12]
    2880:	681b      	ldr	r3, [r3, #0]
    2882:	2200      	movs	r2, #0
    2884:	701a      	strb	r2, [r3, #0]
    NMT->LEDgreenRun            = -1;
    2886:	68fb      	ldr	r3, [r7, #12]
    2888:	681b      	ldr	r3, [r3, #0]
    288a:	22ff      	movs	r2, #255	; 0xff
    288c:	71da      	strb	r2, [r3, #7]
    NMT->LEDredError            = 1;
    288e:	68fb      	ldr	r3, [r7, #12]
    2890:	681b      	ldr	r3, [r3, #0]
    2892:	2201      	movs	r2, #1
    2894:	721a      	strb	r2, [r3, #8]
    NMT->nodeId                 = nodeId;
    2896:	68fb      	ldr	r3, [r7, #12]
    2898:	681b      	ldr	r3, [r3, #0]
    289a:	78fa      	ldrb	r2, [r7, #3]
    289c:	729a      	strb	r2, [r3, #10]
    NMT->firstHBTime            = firstHBTime;
    289e:	68fb      	ldr	r3, [r7, #12]
    28a0:	681b      	ldr	r3, [r3, #0]
    28a2:	6a3a      	ldr	r2, [r7, #32]
    28a4:	611a      	str	r2, [r3, #16]
    NMT->resetCommand           = 0;
    28a6:	68fb      	ldr	r3, [r7, #12]
    28a8:	681b      	ldr	r3, [r3, #0]
    28aa:	2200      	movs	r2, #0
    28ac:	725a      	strb	r2, [r3, #9]
    NMT->HBproducerTimer        = 0xFFFF;
    28ae:	68fb      	ldr	r3, [r7, #12]
    28b0:	681b      	ldr	r3, [r3, #0]
    28b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    28b6:	60da      	str	r2, [r3, #12]
    NMT->emPr                   = emPr;
    28b8:	68fb      	ldr	r3, [r7, #12]
    28ba:	681b      	ldr	r3, [r3, #0]
    28bc:	687a      	ldr	r2, [r7, #4]
    28be:	615a      	str	r2, [r3, #20]
    NMT->ptrState             = NULL;
    28c0:	68fb      	ldr	r3, [r7, #12]
    28c2:	681b      	ldr	r3, [r3, #0]
    28c4:	2200      	movs	r2, #0
    28c6:	61da      	str	r2, [r3, #28]

    /* configure NMT CAN reception */
   ptrCODriverClass->CAN_Rx_BufferInit(
    28c8:	4b13      	ldr	r3, [pc, #76]	; (2918 <_ZN22CO_NMT_Heartbeat_Class11CO_NMT_initEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    28ca:	6818      	ldr	r0, [r3, #0]
      
            NMT_rxIdx,          /* rx buffer index */
            CANidRxNMT,         /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)NMT,         /* object passed to receive function */
    28cc:	68fb      	ldr	r3, [r7, #12]
    28ce:	681b      	ldr	r3, [r3, #0]
            CO_NMT_receive);    /* this function will process received message */
    28d0:	4a12      	ldr	r2, [pc, #72]	; (291c <_ZN22CO_NMT_Heartbeat_Class11CO_NMT_initEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x100>)
    28d2:	9202      	str	r2, [sp, #8]
    28d4:	9301      	str	r3, [sp, #4]
    28d6:	2300      	movs	r3, #0
    28d8:	9300      	str	r3, [sp, #0]
    28da:	f240 73ff 	movw	r3, #2047	; 0x7ff
    28de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    28e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    28e2:	4c0f      	ldr	r4, [pc, #60]	; (2920 <_ZN22CO_NMT_Heartbeat_Class11CO_NMT_initEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x104>)
    28e4:	47a0      	blx	r4

    /* configure HB CAN transmission */
    NMT->HB_CANdev = HB_CANdev;
    28e6:	68fb      	ldr	r3, [r7, #12]
    28e8:	681b      	ldr	r3, [r3, #0]
    28ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    28ec:	619a      	str	r2, [r3, #24]
    NMT->HB_TXbuff =ptrCODriverClass->CAN_Tx_BufferInit(
    28ee:	68fb      	ldr	r3, [r7, #12]
    28f0:	681c      	ldr	r4, [r3, #0]
    28f2:	4b09      	ldr	r3, [pc, #36]	; (2918 <_ZN22CO_NMT_Heartbeat_Class11CO_NMT_initEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    28f4:	6818      	ldr	r0, [r3, #0]
    28f6:	2300      	movs	r3, #0
    28f8:	9301      	str	r3, [sp, #4]
    28fa:	2301      	movs	r3, #1
    28fc:	9300      	str	r3, [sp, #0]
    28fe:	2300      	movs	r3, #0
    2900:	6bba      	ldr	r2, [r7, #56]	; 0x38
    2902:	6b79      	ldr	r1, [r7, #52]	; 0x34
    2904:	4d07      	ldr	r5, [pc, #28]	; (2924 <_ZN22CO_NMT_Heartbeat_Class11CO_NMT_initEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x108>)
    2906:	47a8      	blx	r5
    2908:	4603      	mov	r3, r0
    290a:	6223      	str	r3, [r4, #32]
            CANidTxHB,          /* CAN identifier */
            0,                  /* rtr */
            1,                  /* number of data bytes */
            0);                 /* synchronous message flag bit */

    return CO_ERROR_NO;
    290c:	2300      	movs	r3, #0
}
    290e:	4618      	mov	r0, r3
    2910:	3710      	adds	r7, #16
    2912:	46bd      	mov	sp, r7
    2914:	bdb0      	pop	{r4, r5, r7, pc}
    2916:	bf00      	nop
    2918:	20000960 	.word	0x20000960
    291c:	00002741 	.word	0x00002741
    2920:	00001479 	.word	0x00001479
    2924:	00001575 	.word	0x00001575

00002928 <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv>:
    }
}


/******************************************************************************/
void CO_NMT_Heartbeat_Class::CO_NMT_blinkingProcess50ms(void){
    2928:	b480      	push	{r7}
    292a:	b083      	sub	sp, #12
    292c:	af00      	add	r7, sp, #0
    292e:	6078      	str	r0, [r7, #4]

    if(++NMT->LEDflickering >= 1) NMT->LEDflickering = -1;
    2930:	687b      	ldr	r3, [r7, #4]
    2932:	681b      	ldr	r3, [r3, #0]
    2934:	f993 2001 	ldrsb.w	r2, [r3, #1]
    2938:	b2d2      	uxtb	r2, r2
    293a:	3201      	adds	r2, #1
    293c:	b2d2      	uxtb	r2, r2
    293e:	b252      	sxtb	r2, r2
    2940:	705a      	strb	r2, [r3, #1]
    2942:	f993 3001 	ldrsb.w	r3, [r3, #1]
    2946:	2b00      	cmp	r3, #0
    2948:	bfcc      	ite	gt
    294a:	2301      	movgt	r3, #1
    294c:	2300      	movle	r3, #0
    294e:	b2db      	uxtb	r3, r3
    2950:	2b00      	cmp	r3, #0
    2952:	d003      	beq.n	295c <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x34>
    2954:	687b      	ldr	r3, [r7, #4]
    2956:	681b      	ldr	r3, [r3, #0]
    2958:	22ff      	movs	r2, #255	; 0xff
    295a:	705a      	strb	r2, [r3, #1]

    if(++NMT->LEDblinking >= 4) NMT->LEDblinking = -4;
    295c:	687b      	ldr	r3, [r7, #4]
    295e:	681b      	ldr	r3, [r3, #0]
    2960:	f993 2002 	ldrsb.w	r2, [r3, #2]
    2964:	b2d2      	uxtb	r2, r2
    2966:	3201      	adds	r2, #1
    2968:	b2d2      	uxtb	r2, r2
    296a:	b252      	sxtb	r2, r2
    296c:	709a      	strb	r2, [r3, #2]
    296e:	f993 3002 	ldrsb.w	r3, [r3, #2]
    2972:	2b03      	cmp	r3, #3
    2974:	bfcc      	ite	gt
    2976:	2301      	movgt	r3, #1
    2978:	2300      	movle	r3, #0
    297a:	b2db      	uxtb	r3, r3
    297c:	2b00      	cmp	r3, #0
    297e:	d003      	beq.n	2988 <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x60>
    2980:	687b      	ldr	r3, [r7, #4]
    2982:	681b      	ldr	r3, [r3, #0]
    2984:	22fc      	movs	r2, #252	; 0xfc
    2986:	709a      	strb	r2, [r3, #2]

    if(++NMT->LEDsingleFlash >= 4) NMT->LEDsingleFlash = -20;
    2988:	687b      	ldr	r3, [r7, #4]
    298a:	681b      	ldr	r3, [r3, #0]
    298c:	f993 2003 	ldrsb.w	r2, [r3, #3]
    2990:	b2d2      	uxtb	r2, r2
    2992:	3201      	adds	r2, #1
    2994:	b2d2      	uxtb	r2, r2
    2996:	b252      	sxtb	r2, r2
    2998:	70da      	strb	r2, [r3, #3]
    299a:	f993 3003 	ldrsb.w	r3, [r3, #3]
    299e:	2b03      	cmp	r3, #3
    29a0:	bfcc      	ite	gt
    29a2:	2301      	movgt	r3, #1
    29a4:	2300      	movle	r3, #0
    29a6:	b2db      	uxtb	r3, r3
    29a8:	2b00      	cmp	r3, #0
    29aa:	d003      	beq.n	29b4 <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x8c>
    29ac:	687b      	ldr	r3, [r7, #4]
    29ae:	681b      	ldr	r3, [r3, #0]
    29b0:	22ec      	movs	r2, #236	; 0xec
    29b2:	70da      	strb	r2, [r3, #3]

    switch(++NMT->LEDdoubleFlash){
    29b4:	687b      	ldr	r3, [r7, #4]
    29b6:	681b      	ldr	r3, [r3, #0]
    29b8:	f993 2004 	ldrsb.w	r2, [r3, #4]
    29bc:	b2d2      	uxtb	r2, r2
    29be:	3201      	adds	r2, #1
    29c0:	b2d2      	uxtb	r2, r2
    29c2:	b252      	sxtb	r2, r2
    29c4:	711a      	strb	r2, [r3, #4]
    29c6:	f993 3004 	ldrsb.w	r3, [r3, #4]
    29ca:	2b04      	cmp	r3, #4
    29cc:	d005      	beq.n	29da <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0xb2>
    29ce:	2b68      	cmp	r3, #104	; 0x68
    29d0:	d00d      	beq.n	29ee <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0xc6>
    29d2:	f113 0f64 	cmn.w	r3, #100	; 0x64
    29d6:	d005      	beq.n	29e4 <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0xbc>
    29d8:	e00e      	b.n	29f8 <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0xd0>
        case    4:  NMT->LEDdoubleFlash = -104; break;
    29da:	687b      	ldr	r3, [r7, #4]
    29dc:	681b      	ldr	r3, [r3, #0]
    29de:	2298      	movs	r2, #152	; 0x98
    29e0:	711a      	strb	r2, [r3, #4]
    29e2:	e009      	b.n	29f8 <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0xd0>
        case -100:  NMT->LEDdoubleFlash =  100; break;
    29e4:	687b      	ldr	r3, [r7, #4]
    29e6:	681b      	ldr	r3, [r3, #0]
    29e8:	2264      	movs	r2, #100	; 0x64
    29ea:	711a      	strb	r2, [r3, #4]
    29ec:	e004      	b.n	29f8 <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0xd0>
        case  104:  NMT->LEDdoubleFlash =  -20; break;
    29ee:	687b      	ldr	r3, [r7, #4]
    29f0:	681b      	ldr	r3, [r3, #0]
    29f2:	22ec      	movs	r2, #236	; 0xec
    29f4:	711a      	strb	r2, [r3, #4]
    29f6:	bf00      	nop
    }

    switch(++NMT->LEDtripleFlash){
    29f8:	687b      	ldr	r3, [r7, #4]
    29fa:	681b      	ldr	r3, [r3, #0]
    29fc:	f993 2005 	ldrsb.w	r2, [r3, #5]
    2a00:	b2d2      	uxtb	r2, r2
    2a02:	3201      	adds	r2, #1
    2a04:	b2d2      	uxtb	r2, r2
    2a06:	b252      	sxtb	r2, r2
    2a08:	715a      	strb	r2, [r3, #5]
    2a0a:	f993 3005 	ldrsb.w	r3, [r3, #5]
    2a0e:	2b04      	cmp	r3, #4
    2a10:	d00d      	beq.n	2a2e <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x106>
    2a12:	2b04      	cmp	r3, #4
    2a14:	dc06      	bgt.n	2a24 <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0xfc>
    2a16:	f113 0f6e 	cmn.w	r3, #110	; 0x6e
    2a1a:	d017      	beq.n	2a4c <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x124>
    2a1c:	f113 0f64 	cmn.w	r3, #100	; 0x64
    2a20:	d00a      	beq.n	2a38 <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x110>
    2a22:	e01d      	b.n	2a60 <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x138>
    2a24:	2b68      	cmp	r3, #104	; 0x68
    2a26:	d00c      	beq.n	2a42 <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x11a>
    2a28:	2b72      	cmp	r3, #114	; 0x72
    2a2a:	d014      	beq.n	2a56 <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x12e>
    2a2c:	e018      	b.n	2a60 <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x138>
        case    4:  NMT->LEDtripleFlash = -104; break;
    2a2e:	687b      	ldr	r3, [r7, #4]
    2a30:	681b      	ldr	r3, [r3, #0]
    2a32:	2298      	movs	r2, #152	; 0x98
    2a34:	715a      	strb	r2, [r3, #5]
    2a36:	e013      	b.n	2a60 <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x138>
        case -100:  NMT->LEDtripleFlash =  100; break;
    2a38:	687b      	ldr	r3, [r7, #4]
    2a3a:	681b      	ldr	r3, [r3, #0]
    2a3c:	2264      	movs	r2, #100	; 0x64
    2a3e:	715a      	strb	r2, [r3, #5]
    2a40:	e00e      	b.n	2a60 <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x138>
        case  104:  NMT->LEDtripleFlash = -114; break;
    2a42:	687b      	ldr	r3, [r7, #4]
    2a44:	681b      	ldr	r3, [r3, #0]
    2a46:	228e      	movs	r2, #142	; 0x8e
    2a48:	715a      	strb	r2, [r3, #5]
    2a4a:	e009      	b.n	2a60 <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x138>
        case -110:  NMT->LEDtripleFlash =  110; break;
    2a4c:	687b      	ldr	r3, [r7, #4]
    2a4e:	681b      	ldr	r3, [r3, #0]
    2a50:	226e      	movs	r2, #110	; 0x6e
    2a52:	715a      	strb	r2, [r3, #5]
    2a54:	e004      	b.n	2a60 <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x138>
        case  114:  NMT->LEDtripleFlash =  -20; break;
    2a56:	687b      	ldr	r3, [r7, #4]
    2a58:	681b      	ldr	r3, [r3, #0]
    2a5a:	22ec      	movs	r2, #236	; 0xec
    2a5c:	715a      	strb	r2, [r3, #5]
    2a5e:	bf00      	nop
    }

    switch(++NMT->LEDquadrupleFlash){
    2a60:	687b      	ldr	r3, [r7, #4]
    2a62:	681b      	ldr	r3, [r3, #0]
    2a64:	f993 2006 	ldrsb.w	r2, [r3, #6]
    2a68:	b2d2      	uxtb	r2, r2
    2a6a:	3201      	adds	r2, #1
    2a6c:	b2d2      	uxtb	r2, r2
    2a6e:	b252      	sxtb	r2, r2
    2a70:	719a      	strb	r2, [r3, #6]
    2a72:	f993 3006 	ldrsb.w	r3, [r3, #6]
    2a76:	2b04      	cmp	r3, #4
    2a78:	d012      	beq.n	2aa0 <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x178>
    2a7a:	2b04      	cmp	r3, #4
    2a7c:	dc09      	bgt.n	2a92 <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x16a>
    2a7e:	f113 0f6e 	cmn.w	r3, #110	; 0x6e
    2a82:	d01c      	beq.n	2abe <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x196>
    2a84:	f113 0f64 	cmn.w	r3, #100	; 0x64
    2a88:	d00f      	beq.n	2aaa <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x182>
    2a8a:	f113 0f78 	cmn.w	r3, #120	; 0x78
    2a8e:	d020      	beq.n	2ad2 <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x1aa>
        case -110:  NMT->LEDquadrupleFlash =  110; break;
        case  114:  NMT->LEDquadrupleFlash = -124; break;
        case -120:  NMT->LEDquadrupleFlash =  120; break;
        case  124:  NMT->LEDquadrupleFlash =  -20; break;
    }
}
    2a90:	e029      	b.n	2ae6 <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x1be>
    switch(++NMT->LEDquadrupleFlash){
    2a92:	2b72      	cmp	r3, #114	; 0x72
    2a94:	d018      	beq.n	2ac8 <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x1a0>
    2a96:	2b7c      	cmp	r3, #124	; 0x7c
    2a98:	d020      	beq.n	2adc <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x1b4>
    2a9a:	2b68      	cmp	r3, #104	; 0x68
    2a9c:	d00a      	beq.n	2ab4 <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x18c>
}
    2a9e:	e022      	b.n	2ae6 <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x1be>
        case    4:  NMT->LEDquadrupleFlash = -104; break;
    2aa0:	687b      	ldr	r3, [r7, #4]
    2aa2:	681b      	ldr	r3, [r3, #0]
    2aa4:	2298      	movs	r2, #152	; 0x98
    2aa6:	719a      	strb	r2, [r3, #6]
    2aa8:	e01d      	b.n	2ae6 <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x1be>
        case -100:  NMT->LEDquadrupleFlash =  100; break;
    2aaa:	687b      	ldr	r3, [r7, #4]
    2aac:	681b      	ldr	r3, [r3, #0]
    2aae:	2264      	movs	r2, #100	; 0x64
    2ab0:	719a      	strb	r2, [r3, #6]
    2ab2:	e018      	b.n	2ae6 <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x1be>
        case  104:  NMT->LEDquadrupleFlash = -114; break;
    2ab4:	687b      	ldr	r3, [r7, #4]
    2ab6:	681b      	ldr	r3, [r3, #0]
    2ab8:	228e      	movs	r2, #142	; 0x8e
    2aba:	719a      	strb	r2, [r3, #6]
    2abc:	e013      	b.n	2ae6 <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x1be>
        case -110:  NMT->LEDquadrupleFlash =  110; break;
    2abe:	687b      	ldr	r3, [r7, #4]
    2ac0:	681b      	ldr	r3, [r3, #0]
    2ac2:	226e      	movs	r2, #110	; 0x6e
    2ac4:	719a      	strb	r2, [r3, #6]
    2ac6:	e00e      	b.n	2ae6 <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x1be>
        case  114:  NMT->LEDquadrupleFlash = -124; break;
    2ac8:	687b      	ldr	r3, [r7, #4]
    2aca:	681b      	ldr	r3, [r3, #0]
    2acc:	2284      	movs	r2, #132	; 0x84
    2ace:	719a      	strb	r2, [r3, #6]
    2ad0:	e009      	b.n	2ae6 <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x1be>
        case -120:  NMT->LEDquadrupleFlash =  120; break;
    2ad2:	687b      	ldr	r3, [r7, #4]
    2ad4:	681b      	ldr	r3, [r3, #0]
    2ad6:	2278      	movs	r2, #120	; 0x78
    2ad8:	719a      	strb	r2, [r3, #6]
    2ada:	e004      	b.n	2ae6 <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x1be>
        case  124:  NMT->LEDquadrupleFlash =  -20; break;
    2adc:	687b      	ldr	r3, [r7, #4]
    2ade:	681b      	ldr	r3, [r3, #0]
    2ae0:	22ec      	movs	r2, #236	; 0xec
    2ae2:	719a      	strb	r2, [r3, #6]
    2ae4:	bf00      	nop
}
    2ae6:	bf00      	nop
    2ae8:	370c      	adds	r7, #12
    2aea:	46bd      	mov	sp, r7
    2aec:	bc80      	pop	{r7}
    2aee:	4770      	bx	lr

00002af0 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm>:
        uint32_t                HBtime,
        uint32_t                NMTstartup,
        uint8_t                 errorRegister,
        const uint8_t           errorBehavior[],
        uint32_t               *timerNext_ms)
{
    2af0:	b580      	push	{r7, lr}
    2af2:	b086      	sub	sp, #24
    2af4:	af00      	add	r7, sp, #0
    2af6:	60f8      	str	r0, [r7, #12]
    2af8:	60b9      	str	r1, [r7, #8]
    2afa:	607a      	str	r2, [r7, #4]
    2afc:	603b      	str	r3, [r7, #0]
    uint8_t CANpassive;

    uint8_t currentOperatingState = NMT->operatingState;
    2afe:	68fb      	ldr	r3, [r7, #12]
    2b00:	681b      	ldr	r3, [r3, #0]
    2b02:	781b      	ldrb	r3, [r3, #0]
    2b04:	75bb      	strb	r3, [r7, #22]

    NMT->HBproducerTimer += timeDifference_ms;
    2b06:	68fb      	ldr	r3, [r7, #12]
    2b08:	681b      	ldr	r3, [r3, #0]
    2b0a:	68fa      	ldr	r2, [r7, #12]
    2b0c:	6812      	ldr	r2, [r2, #0]
    2b0e:	68d1      	ldr	r1, [r2, #12]
    2b10:	68ba      	ldr	r2, [r7, #8]
    2b12:	440a      	add	r2, r1
    2b14:	60da      	str	r2, [r3, #12]

    /* Heartbeat producer message & Bootup message */
    if((HBtime != 0 && NMT->HBproducerTimer >= HBtime) || NMT->operatingState == CO_NMT_INITIALIZING){
    2b16:	687b      	ldr	r3, [r7, #4]
    2b18:	2b00      	cmp	r3, #0
    2b1a:	d005      	beq.n	2b28 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x38>
    2b1c:	68fb      	ldr	r3, [r7, #12]
    2b1e:	681b      	ldr	r3, [r3, #0]
    2b20:	68da      	ldr	r2, [r3, #12]
    2b22:	687b      	ldr	r3, [r7, #4]
    2b24:	429a      	cmp	r2, r3
    2b26:	d204      	bcs.n	2b32 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x42>
    2b28:	68fb      	ldr	r3, [r7, #12]
    2b2a:	681b      	ldr	r3, [r3, #0]
    2b2c:	781b      	ldrb	r3, [r3, #0]
    2b2e:	2b00      	cmp	r3, #0
    2b30:	d139      	bne.n	2ba6 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0xb6>

        /* Start from the beginning. If OS is slow, time sliding may occur. However, heartbeat is
         * not for synchronization, it is for health report. */
        NMT->HBproducerTimer = 0;
    2b32:	68fb      	ldr	r3, [r7, #12]
    2b34:	681b      	ldr	r3, [r3, #0]
    2b36:	2200      	movs	r2, #0
    2b38:	60da      	str	r2, [r3, #12]

        NMT->HB_TXbuff->data[0] = NMT->operatingState;
    2b3a:	68fb      	ldr	r3, [r7, #12]
    2b3c:	681b      	ldr	r3, [r3, #0]
    2b3e:	6a1b      	ldr	r3, [r3, #32]
    2b40:	68fa      	ldr	r2, [r7, #12]
    2b42:	6812      	ldr	r2, [r2, #0]
    2b44:	7812      	ldrb	r2, [r2, #0]
    2b46:	715a      	strb	r2, [r3, #5]
        ptrCODriverClass->CAN_Send(NMT->HB_TXbuff);
    2b48:	4b8d      	ldr	r3, [pc, #564]	; (2d80 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x290>)
    2b4a:	681a      	ldr	r2, [r3, #0]
    2b4c:	68fb      	ldr	r3, [r7, #12]
    2b4e:	681b      	ldr	r3, [r3, #0]
    2b50:	6a1b      	ldr	r3, [r3, #32]
    2b52:	4619      	mov	r1, r3
    2b54:	4610      	mov	r0, r2
    2b56:	4b8b      	ldr	r3, [pc, #556]	; (2d84 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x294>)
    2b58:	4798      	blx	r3

        if(NMT->operatingState == CO_NMT_INITIALIZING){
    2b5a:	68fb      	ldr	r3, [r7, #12]
    2b5c:	681b      	ldr	r3, [r3, #0]
    2b5e:	781b      	ldrb	r3, [r3, #0]
    2b60:	2b00      	cmp	r3, #0
    2b62:	d120      	bne.n	2ba6 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0xb6>
            if(HBtime > NMT->firstHBTime) NMT->HBproducerTimer = HBtime - NMT->firstHBTime;
    2b64:	68fb      	ldr	r3, [r7, #12]
    2b66:	681b      	ldr	r3, [r3, #0]
    2b68:	691a      	ldr	r2, [r3, #16]
    2b6a:	687b      	ldr	r3, [r7, #4]
    2b6c:	429a      	cmp	r2, r3
    2b6e:	d208      	bcs.n	2b82 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x92>
    2b70:	68fb      	ldr	r3, [r7, #12]
    2b72:	681b      	ldr	r3, [r3, #0]
    2b74:	68fa      	ldr	r2, [r7, #12]
    2b76:	6812      	ldr	r2, [r2, #0]
    2b78:	6912      	ldr	r2, [r2, #16]
    2b7a:	6879      	ldr	r1, [r7, #4]
    2b7c:	1a8a      	subs	r2, r1, r2
    2b7e:	60da      	str	r2, [r3, #12]
    2b80:	e003      	b.n	2b8a <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x9a>
            else                          NMT->HBproducerTimer = 0;
    2b82:	68fb      	ldr	r3, [r7, #12]
    2b84:	681b      	ldr	r3, [r3, #0]
    2b86:	2200      	movs	r2, #0
    2b88:	60da      	str	r2, [r3, #12]

            if((NMTstartup & 0x04) == 0) NMT->operatingState = CO_NMT_OPERATIONAL;
    2b8a:	683b      	ldr	r3, [r7, #0]
    2b8c:	f003 0304 	and.w	r3, r3, #4
    2b90:	2b00      	cmp	r3, #0
    2b92:	d104      	bne.n	2b9e <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0xae>
    2b94:	68fb      	ldr	r3, [r7, #12]
    2b96:	681b      	ldr	r3, [r3, #0]
    2b98:	2205      	movs	r2, #5
    2b9a:	701a      	strb	r2, [r3, #0]
    2b9c:	e003      	b.n	2ba6 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0xb6>
            else                         NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
    2b9e:	68fb      	ldr	r3, [r7, #12]
    2ba0:	681b      	ldr	r3, [r3, #0]
    2ba2:	227f      	movs	r2, #127	; 0x7f
    2ba4:	701a      	strb	r2, [r3, #0]
        }
    }


    /* Calculate, when next Heartbeat needs to be send and lower timerNext_ms if necessary. */
    if(HBtime != 0 && timerNext_ms != NULL){
    2ba6:	687b      	ldr	r3, [r7, #4]
    2ba8:	2b00      	cmp	r3, #0
    2baa:	d01a      	beq.n	2be2 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0xf2>
    2bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2bae:	2b00      	cmp	r3, #0
    2bb0:	d017      	beq.n	2be2 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0xf2>
        if(NMT->HBproducerTimer < HBtime){
    2bb2:	68fb      	ldr	r3, [r7, #12]
    2bb4:	681b      	ldr	r3, [r3, #0]
    2bb6:	68da      	ldr	r2, [r3, #12]
    2bb8:	687b      	ldr	r3, [r7, #4]
    2bba:	429a      	cmp	r2, r3
    2bbc:	d20e      	bcs.n	2bdc <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0xec>
            uint32_t diff = HBtime - NMT->HBproducerTimer;
    2bbe:	68fb      	ldr	r3, [r7, #12]
    2bc0:	681b      	ldr	r3, [r3, #0]
    2bc2:	68db      	ldr	r3, [r3, #12]
    2bc4:	687a      	ldr	r2, [r7, #4]
    2bc6:	1ad3      	subs	r3, r2, r3
    2bc8:	613b      	str	r3, [r7, #16]
            if(*timerNext_ms > diff){
    2bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2bcc:	681a      	ldr	r2, [r3, #0]
    2bce:	693b      	ldr	r3, [r7, #16]
    2bd0:	429a      	cmp	r2, r3
    2bd2:	d906      	bls.n	2be2 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0xf2>
                *timerNext_ms = diff;
    2bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2bd6:	693a      	ldr	r2, [r7, #16]
    2bd8:	601a      	str	r2, [r3, #0]
    2bda:	e002      	b.n	2be2 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0xf2>
            }
        }else{
            *timerNext_ms = 0;
    2bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2bde:	2200      	movs	r2, #0
    2be0:	601a      	str	r2, [r3, #0]
        }
    }


    /* CAN passive flag */
    CANpassive = 0;
    2be2:	2300      	movs	r3, #0
    2be4:	75fb      	strb	r3, [r7, #23]
    if(ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_CAN_TX_BUS_PASSIVE) || ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_CAN_RX_BUS_PASSIVE))
    2be6:	4b66      	ldr	r3, [pc, #408]	; (2d80 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x290>)
    2be8:	681b      	ldr	r3, [r3, #0]
    2bea:	1d18      	adds	r0, r3, #4
    2bec:	68fb      	ldr	r3, [r7, #12]
    2bee:	681b      	ldr	r3, [r3, #0]
    2bf0:	695b      	ldr	r3, [r3, #20]
    2bf2:	691b      	ldr	r3, [r3, #16]
    2bf4:	2207      	movs	r2, #7
    2bf6:	4619      	mov	r1, r3
    2bf8:	4b63      	ldr	r3, [pc, #396]	; (2d88 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x298>)
    2bfa:	4798      	blx	r3
    2bfc:	4603      	mov	r3, r0
    2bfe:	2b00      	cmp	r3, #0
    2c00:	d10d      	bne.n	2c1e <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x12e>
    2c02:	4b5f      	ldr	r3, [pc, #380]	; (2d80 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x290>)
    2c04:	681b      	ldr	r3, [r3, #0]
    2c06:	1d18      	adds	r0, r3, #4
    2c08:	68fb      	ldr	r3, [r7, #12]
    2c0a:	681b      	ldr	r3, [r3, #0]
    2c0c:	695b      	ldr	r3, [r3, #20]
    2c0e:	691b      	ldr	r3, [r3, #16]
    2c10:	2206      	movs	r2, #6
    2c12:	4619      	mov	r1, r3
    2c14:	4b5c      	ldr	r3, [pc, #368]	; (2d88 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x298>)
    2c16:	4798      	blx	r3
    2c18:	4603      	mov	r3, r0
    2c1a:	2b00      	cmp	r3, #0
    2c1c:	d001      	beq.n	2c22 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x132>
    2c1e:	2301      	movs	r3, #1
    2c20:	e000      	b.n	2c24 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x134>
    2c22:	2300      	movs	r3, #0
    2c24:	2b00      	cmp	r3, #0
    2c26:	d001      	beq.n	2c2c <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x13c>
        CANpassive = 1;
    2c28:	2301      	movs	r3, #1
    2c2a:	75fb      	strb	r3, [r7, #23]


    /* CANopen green RUN LED (DR 303-3) */
    switch(NMT->operatingState){
    2c2c:	68fb      	ldr	r3, [r7, #12]
    2c2e:	681b      	ldr	r3, [r3, #0]
    2c30:	781b      	ldrb	r3, [r3, #0]
    2c32:	2b05      	cmp	r3, #5
    2c34:	d013      	beq.n	2c5e <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x16e>
    2c36:	2b7f      	cmp	r3, #127	; 0x7f
    2c38:	d009      	beq.n	2c4e <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x15e>
    2c3a:	2b04      	cmp	r3, #4
    2c3c:	d114      	bne.n	2c68 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x178>
        case CO_NMT_STOPPED:          NMT->LEDgreenRun = NMT->LEDsingleFlash;   break;
    2c3e:	68fb      	ldr	r3, [r7, #12]
    2c40:	681b      	ldr	r3, [r3, #0]
    2c42:	68fa      	ldr	r2, [r7, #12]
    2c44:	6812      	ldr	r2, [r2, #0]
    2c46:	f992 2003 	ldrsb.w	r2, [r2, #3]
    2c4a:	71da      	strb	r2, [r3, #7]
    2c4c:	e00c      	b.n	2c68 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x178>
        case CO_NMT_PRE_OPERATIONAL:  NMT->LEDgreenRun = NMT->LEDblinking;      break;
    2c4e:	68fb      	ldr	r3, [r7, #12]
    2c50:	681b      	ldr	r3, [r3, #0]
    2c52:	68fa      	ldr	r2, [r7, #12]
    2c54:	6812      	ldr	r2, [r2, #0]
    2c56:	f992 2002 	ldrsb.w	r2, [r2, #2]
    2c5a:	71da      	strb	r2, [r3, #7]
    2c5c:	e004      	b.n	2c68 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x178>
        case CO_NMT_OPERATIONAL:      NMT->LEDgreenRun = 1;                     break;
    2c5e:	68fb      	ldr	r3, [r7, #12]
    2c60:	681b      	ldr	r3, [r3, #0]
    2c62:	2201      	movs	r2, #1
    2c64:	71da      	strb	r2, [r3, #7]
    2c66:	bf00      	nop
    }


    /* CANopen red ERROR LED (DR 303-3) */
    if(ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_CAN_TX_BUS_OFF))
    2c68:	4b45      	ldr	r3, [pc, #276]	; (2d80 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x290>)
    2c6a:	681b      	ldr	r3, [r3, #0]
    2c6c:	1d18      	adds	r0, r3, #4
    2c6e:	68fb      	ldr	r3, [r7, #12]
    2c70:	681b      	ldr	r3, [r3, #0]
    2c72:	695b      	ldr	r3, [r3, #20]
    2c74:	691b      	ldr	r3, [r3, #16]
    2c76:	2212      	movs	r2, #18
    2c78:	4619      	mov	r1, r3
    2c7a:	4b43      	ldr	r3, [pc, #268]	; (2d88 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x298>)
    2c7c:	4798      	blx	r3
    2c7e:	4603      	mov	r3, r0
    2c80:	2b00      	cmp	r3, #0
    2c82:	bf14      	ite	ne
    2c84:	2301      	movne	r3, #1
    2c86:	2300      	moveq	r3, #0
    2c88:	b2db      	uxtb	r3, r3
    2c8a:	2b00      	cmp	r3, #0
    2c8c:	d004      	beq.n	2c98 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x1a8>
        NMT->LEDredError = 1;
    2c8e:	68fb      	ldr	r3, [r7, #12]
    2c90:	681b      	ldr	r3, [r3, #0]
    2c92:	2201      	movs	r2, #1
    2c94:	721a      	strb	r2, [r3, #8]
    2c96:	e07d      	b.n	2d94 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x2a4>

    else if(ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_SYNC_TIME_OUT))
    2c98:	4b39      	ldr	r3, [pc, #228]	; (2d80 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x290>)
    2c9a:	681b      	ldr	r3, [r3, #0]
    2c9c:	1d18      	adds	r0, r3, #4
    2c9e:	68fb      	ldr	r3, [r7, #12]
    2ca0:	681b      	ldr	r3, [r3, #0]
    2ca2:	695b      	ldr	r3, [r3, #20]
    2ca4:	691b      	ldr	r3, [r3, #16]
    2ca6:	2218      	movs	r2, #24
    2ca8:	4619      	mov	r1, r3
    2caa:	4b37      	ldr	r3, [pc, #220]	; (2d88 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x298>)
    2cac:	4798      	blx	r3
    2cae:	4603      	mov	r3, r0
    2cb0:	2b00      	cmp	r3, #0
    2cb2:	bf14      	ite	ne
    2cb4:	2301      	movne	r3, #1
    2cb6:	2300      	moveq	r3, #0
    2cb8:	b2db      	uxtb	r3, r3
    2cba:	2b00      	cmp	r3, #0
    2cbc:	d007      	beq.n	2cce <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x1de>
        NMT->LEDredError = NMT->LEDtripleFlash;
    2cbe:	68fb      	ldr	r3, [r7, #12]
    2cc0:	681b      	ldr	r3, [r3, #0]
    2cc2:	68fa      	ldr	r2, [r7, #12]
    2cc4:	6812      	ldr	r2, [r2, #0]
    2cc6:	f992 2005 	ldrsb.w	r2, [r2, #5]
    2cca:	721a      	strb	r2, [r3, #8]
    2ccc:	e062      	b.n	2d94 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x2a4>

    else if(ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_HEARTBEAT_CONSUMER) || ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_HB_CONSUMER_REMOTE_RESET))
    2cce:	4b2c      	ldr	r3, [pc, #176]	; (2d80 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x290>)
    2cd0:	681b      	ldr	r3, [r3, #0]
    2cd2:	1d18      	adds	r0, r3, #4
    2cd4:	68fb      	ldr	r3, [r7, #12]
    2cd6:	681b      	ldr	r3, [r3, #0]
    2cd8:	695b      	ldr	r3, [r3, #20]
    2cda:	691b      	ldr	r3, [r3, #16]
    2cdc:	221b      	movs	r2, #27
    2cde:	4619      	mov	r1, r3
    2ce0:	4b29      	ldr	r3, [pc, #164]	; (2d88 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x298>)
    2ce2:	4798      	blx	r3
    2ce4:	4603      	mov	r3, r0
    2ce6:	2b00      	cmp	r3, #0
    2ce8:	d10d      	bne.n	2d06 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x216>
    2cea:	4b25      	ldr	r3, [pc, #148]	; (2d80 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x290>)
    2cec:	681b      	ldr	r3, [r3, #0]
    2cee:	1d18      	adds	r0, r3, #4
    2cf0:	68fb      	ldr	r3, [r7, #12]
    2cf2:	681b      	ldr	r3, [r3, #0]
    2cf4:	695b      	ldr	r3, [r3, #20]
    2cf6:	691b      	ldr	r3, [r3, #16]
    2cf8:	221c      	movs	r2, #28
    2cfa:	4619      	mov	r1, r3
    2cfc:	4b22      	ldr	r3, [pc, #136]	; (2d88 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x298>)
    2cfe:	4798      	blx	r3
    2d00:	4603      	mov	r3, r0
    2d02:	2b00      	cmp	r3, #0
    2d04:	d001      	beq.n	2d0a <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x21a>
    2d06:	2301      	movs	r3, #1
    2d08:	e000      	b.n	2d0c <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x21c>
    2d0a:	2300      	movs	r3, #0
    2d0c:	2b00      	cmp	r3, #0
    2d0e:	d007      	beq.n	2d20 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x230>
        NMT->LEDredError = NMT->LEDdoubleFlash;
    2d10:	68fb      	ldr	r3, [r7, #12]
    2d12:	681b      	ldr	r3, [r3, #0]
    2d14:	68fa      	ldr	r2, [r7, #12]
    2d16:	6812      	ldr	r2, [r2, #0]
    2d18:	f992 2004 	ldrsb.w	r2, [r2, #4]
    2d1c:	721a      	strb	r2, [r3, #8]
    2d1e:	e039      	b.n	2d94 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x2a4>

    else if(CANpassive ||  ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_CAN_BUS_WARNING))
    2d20:	7dfb      	ldrb	r3, [r7, #23]
    2d22:	2b00      	cmp	r3, #0
    2d24:	d10d      	bne.n	2d42 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x252>
    2d26:	4b16      	ldr	r3, [pc, #88]	; (2d80 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x290>)
    2d28:	681b      	ldr	r3, [r3, #0]
    2d2a:	1d18      	adds	r0, r3, #4
    2d2c:	68fb      	ldr	r3, [r7, #12]
    2d2e:	681b      	ldr	r3, [r3, #0]
    2d30:	695b      	ldr	r3, [r3, #20]
    2d32:	691b      	ldr	r3, [r3, #16]
    2d34:	2201      	movs	r2, #1
    2d36:	4619      	mov	r1, r3
    2d38:	4b13      	ldr	r3, [pc, #76]	; (2d88 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x298>)
    2d3a:	4798      	blx	r3
    2d3c:	4603      	mov	r3, r0
    2d3e:	2b00      	cmp	r3, #0
    2d40:	d001      	beq.n	2d46 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x256>
    2d42:	2301      	movs	r3, #1
    2d44:	e000      	b.n	2d48 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x258>
    2d46:	2300      	movs	r3, #0
    2d48:	2b00      	cmp	r3, #0
    2d4a:	d007      	beq.n	2d5c <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x26c>
        NMT->LEDredError = NMT->LEDsingleFlash;
    2d4c:	68fb      	ldr	r3, [r7, #12]
    2d4e:	681b      	ldr	r3, [r3, #0]
    2d50:	68fa      	ldr	r2, [r7, #12]
    2d52:	6812      	ldr	r2, [r2, #0]
    2d54:	f992 2003 	ldrsb.w	r2, [r2, #3]
    2d58:	721a      	strb	r2, [r3, #8]
    2d5a:	e01b      	b.n	2d94 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x2a4>

    else if(errorRegister)
    2d5c:	f897 3020 	ldrb.w	r3, [r7, #32]
    2d60:	2b00      	cmp	r3, #0
    2d62:	d013      	beq.n	2d8c <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x29c>
        NMT->LEDredError = (NMT->LEDblinking>=0)?-1:1;
    2d64:	68fb      	ldr	r3, [r7, #12]
    2d66:	681b      	ldr	r3, [r3, #0]
    2d68:	68fa      	ldr	r2, [r7, #12]
    2d6a:	6812      	ldr	r2, [r2, #0]
    2d6c:	f992 2002 	ldrsb.w	r2, [r2, #2]
    2d70:	2a00      	cmp	r2, #0
    2d72:	db02      	blt.n	2d7a <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x28a>
    2d74:	f04f 32ff 	mov.w	r2, #4294967295
    2d78:	e000      	b.n	2d7c <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x28c>
    2d7a:	2201      	movs	r2, #1
    2d7c:	721a      	strb	r2, [r3, #8]
    2d7e:	e009      	b.n	2d94 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x2a4>
    2d80:	20000960 	.word	0x20000960
    2d84:	00001621 	.word	0x00001621
    2d88:	00002315 	.word	0x00002315

    else
        NMT->LEDredError = -1;
    2d8c:	68fb      	ldr	r3, [r7, #12]
    2d8e:	681b      	ldr	r3, [r3, #0]
    2d90:	22ff      	movs	r2, #255	; 0xff
    2d92:	721a      	strb	r2, [r3, #8]


    /* in case of error enter pre-operational state */
    if(errorBehavior && (NMT->operatingState == CO_NMT_OPERATIONAL)){
    2d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2d96:	2b00      	cmp	r3, #0
    2d98:	f000 80ca 	beq.w	2f30 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x440>
    2d9c:	68fb      	ldr	r3, [r7, #12]
    2d9e:	681b      	ldr	r3, [r3, #0]
    2da0:	781b      	ldrb	r3, [r3, #0]
    2da2:	2b05      	cmp	r3, #5
    2da4:	f040 80c4 	bne.w	2f30 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x440>
        if(CANpassive && (errorBehavior[2] == 0 || errorBehavior[2] == 2)) errorRegister |= 0x10;
    2da8:	7dfb      	ldrb	r3, [r7, #23]
    2daa:	2b00      	cmp	r3, #0
    2dac:	d00f      	beq.n	2dce <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x2de>
    2dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2db0:	3302      	adds	r3, #2
    2db2:	781b      	ldrb	r3, [r3, #0]
    2db4:	2b00      	cmp	r3, #0
    2db6:	d004      	beq.n	2dc2 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x2d2>
    2db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2dba:	3302      	adds	r3, #2
    2dbc:	781b      	ldrb	r3, [r3, #0]
    2dbe:	2b02      	cmp	r3, #2
    2dc0:	d105      	bne.n	2dce <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x2de>
    2dc2:	f897 3020 	ldrb.w	r3, [r7, #32]
    2dc6:	f043 0310 	orr.w	r3, r3, #16
    2dca:	f887 3020 	strb.w	r3, [r7, #32]

        if(errorRegister){
    2dce:	f897 3020 	ldrb.w	r3, [r7, #32]
    2dd2:	2b00      	cmp	r3, #0
    2dd4:	f000 80ac 	beq.w	2f30 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x440>
            /* Communication error */
            if(errorRegister & CO_ERR_REG_COMM_ERR){
    2dd8:	f897 3020 	ldrb.w	r3, [r7, #32]
    2ddc:	f003 0310 	and.w	r3, r3, #16
    2de0:	2b00      	cmp	r3, #0
    2de2:	d053      	beq.n	2e8c <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x39c>
                if(errorBehavior[1] == 0){
    2de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2de6:	3301      	adds	r3, #1
    2de8:	781b      	ldrb	r3, [r3, #0]
    2dea:	2b00      	cmp	r3, #0
    2dec:	d104      	bne.n	2df8 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x308>
                    NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
    2dee:	68fb      	ldr	r3, [r7, #12]
    2df0:	681b      	ldr	r3, [r3, #0]
    2df2:	227f      	movs	r2, #127	; 0x7f
    2df4:	701a      	strb	r2, [r3, #0]
    2df6:	e049      	b.n	2e8c <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x39c>
                }
                else if(errorBehavior[1] == 2){
    2df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2dfa:	3301      	adds	r3, #1
    2dfc:	781b      	ldrb	r3, [r3, #0]
    2dfe:	2b02      	cmp	r3, #2
    2e00:	d104      	bne.n	2e0c <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x31c>
                    NMT->operatingState = CO_NMT_STOPPED;
    2e02:	68fb      	ldr	r3, [r7, #12]
    2e04:	681b      	ldr	r3, [r3, #0]
    2e06:	2204      	movs	r2, #4
    2e08:	701a      	strb	r2, [r3, #0]
    2e0a:	e03f      	b.n	2e8c <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x39c>
                }
                else if( ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_CAN_TX_BUS_OFF)
    2e0c:	4b55      	ldr	r3, [pc, #340]	; (2f64 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x474>)
    2e0e:	681b      	ldr	r3, [r3, #0]
    2e10:	1d18      	adds	r0, r3, #4
    2e12:	68fb      	ldr	r3, [r7, #12]
    2e14:	681b      	ldr	r3, [r3, #0]
    2e16:	695b      	ldr	r3, [r3, #20]
    2e18:	691b      	ldr	r3, [r3, #16]
    2e1a:	2212      	movs	r2, #18
    2e1c:	4619      	mov	r1, r3
    2e1e:	4b52      	ldr	r3, [pc, #328]	; (2f68 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x478>)
    2e20:	4798      	blx	r3
    2e22:	4603      	mov	r3, r0
                     ||  ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_HEARTBEAT_CONSUMER)
                     ||  ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_HB_CONSUMER_REMOTE_RESET))
    2e24:	2b00      	cmp	r3, #0
    2e26:	d11b      	bne.n	2e60 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x370>
                     ||  ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_HEARTBEAT_CONSUMER)
    2e28:	4b4e      	ldr	r3, [pc, #312]	; (2f64 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x474>)
    2e2a:	681b      	ldr	r3, [r3, #0]
    2e2c:	1d18      	adds	r0, r3, #4
    2e2e:	68fb      	ldr	r3, [r7, #12]
    2e30:	681b      	ldr	r3, [r3, #0]
    2e32:	695b      	ldr	r3, [r3, #20]
    2e34:	691b      	ldr	r3, [r3, #16]
    2e36:	221b      	movs	r2, #27
    2e38:	4619      	mov	r1, r3
    2e3a:	4b4b      	ldr	r3, [pc, #300]	; (2f68 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x478>)
    2e3c:	4798      	blx	r3
    2e3e:	4603      	mov	r3, r0
    2e40:	2b00      	cmp	r3, #0
    2e42:	d10d      	bne.n	2e60 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x370>
                     ||  ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_HB_CONSUMER_REMOTE_RESET))
    2e44:	4b47      	ldr	r3, [pc, #284]	; (2f64 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x474>)
    2e46:	681b      	ldr	r3, [r3, #0]
    2e48:	1d18      	adds	r0, r3, #4
    2e4a:	68fb      	ldr	r3, [r7, #12]
    2e4c:	681b      	ldr	r3, [r3, #0]
    2e4e:	695b      	ldr	r3, [r3, #20]
    2e50:	691b      	ldr	r3, [r3, #16]
    2e52:	221c      	movs	r2, #28
    2e54:	4619      	mov	r1, r3
    2e56:	4b44      	ldr	r3, [pc, #272]	; (2f68 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x478>)
    2e58:	4798      	blx	r3
    2e5a:	4603      	mov	r3, r0
    2e5c:	2b00      	cmp	r3, #0
    2e5e:	d001      	beq.n	2e64 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x374>
    2e60:	2301      	movs	r3, #1
    2e62:	e000      	b.n	2e66 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x376>
    2e64:	2300      	movs	r3, #0
                else if( ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_CAN_TX_BUS_OFF)
    2e66:	2b00      	cmp	r3, #0
    2e68:	d010      	beq.n	2e8c <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x39c>
                {
                    if(errorBehavior[0] == 0){
    2e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2e6c:	781b      	ldrb	r3, [r3, #0]
    2e6e:	2b00      	cmp	r3, #0
    2e70:	d104      	bne.n	2e7c <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x38c>
                        NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
    2e72:	68fb      	ldr	r3, [r7, #12]
    2e74:	681b      	ldr	r3, [r3, #0]
    2e76:	227f      	movs	r2, #127	; 0x7f
    2e78:	701a      	strb	r2, [r3, #0]
    2e7a:	e007      	b.n	2e8c <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x39c>
                    }
                    else if(errorBehavior[0] == 2){
    2e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2e7e:	781b      	ldrb	r3, [r3, #0]
    2e80:	2b02      	cmp	r3, #2
    2e82:	d103      	bne.n	2e8c <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x39c>
                        NMT->operatingState = CO_NMT_STOPPED;
    2e84:	68fb      	ldr	r3, [r7, #12]
    2e86:	681b      	ldr	r3, [r3, #0]
    2e88:	2204      	movs	r2, #4
    2e8a:	701a      	strb	r2, [r3, #0]
                    }
                }
            }

            /* Generic error */
            if(errorRegister & CO_ERR_REG_GENERIC_ERR){
    2e8c:	f897 3020 	ldrb.w	r3, [r7, #32]
    2e90:	f003 0301 	and.w	r3, r3, #1
    2e94:	2b00      	cmp	r3, #0
    2e96:	d012      	beq.n	2ebe <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x3ce>
                if      (errorBehavior[3] == 0) NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
    2e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2e9a:	3303      	adds	r3, #3
    2e9c:	781b      	ldrb	r3, [r3, #0]
    2e9e:	2b00      	cmp	r3, #0
    2ea0:	d104      	bne.n	2eac <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x3bc>
    2ea2:	68fb      	ldr	r3, [r7, #12]
    2ea4:	681b      	ldr	r3, [r3, #0]
    2ea6:	227f      	movs	r2, #127	; 0x7f
    2ea8:	701a      	strb	r2, [r3, #0]
    2eaa:	e008      	b.n	2ebe <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x3ce>
                else if (errorBehavior[3] == 2) NMT->operatingState = CO_NMT_STOPPED;
    2eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2eae:	3303      	adds	r3, #3
    2eb0:	781b      	ldrb	r3, [r3, #0]
    2eb2:	2b02      	cmp	r3, #2
    2eb4:	d103      	bne.n	2ebe <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x3ce>
    2eb6:	68fb      	ldr	r3, [r7, #12]
    2eb8:	681b      	ldr	r3, [r3, #0]
    2eba:	2204      	movs	r2, #4
    2ebc:	701a      	strb	r2, [r3, #0]
            }

            /* Device profile error */
            if(errorRegister & CO_ERR_REG_DEV_PROFILE){
    2ebe:	f897 3020 	ldrb.w	r3, [r7, #32]
    2ec2:	f003 0320 	and.w	r3, r3, #32
    2ec6:	2b00      	cmp	r3, #0
    2ec8:	d012      	beq.n	2ef0 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x400>
                if      (errorBehavior[4] == 0) NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
    2eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2ecc:	3304      	adds	r3, #4
    2ece:	781b      	ldrb	r3, [r3, #0]
    2ed0:	2b00      	cmp	r3, #0
    2ed2:	d104      	bne.n	2ede <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x3ee>
    2ed4:	68fb      	ldr	r3, [r7, #12]
    2ed6:	681b      	ldr	r3, [r3, #0]
    2ed8:	227f      	movs	r2, #127	; 0x7f
    2eda:	701a      	strb	r2, [r3, #0]
    2edc:	e008      	b.n	2ef0 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x400>
                else if (errorBehavior[4] == 2) NMT->operatingState = CO_NMT_STOPPED;
    2ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2ee0:	3304      	adds	r3, #4
    2ee2:	781b      	ldrb	r3, [r3, #0]
    2ee4:	2b02      	cmp	r3, #2
    2ee6:	d103      	bne.n	2ef0 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x400>
    2ee8:	68fb      	ldr	r3, [r7, #12]
    2eea:	681b      	ldr	r3, [r3, #0]
    2eec:	2204      	movs	r2, #4
    2eee:	701a      	strb	r2, [r3, #0]
            }

            /* Manufacturer specific error */
            if(errorRegister & CO_ERR_REG_MANUFACTURER){
    2ef0:	f997 3020 	ldrsb.w	r3, [r7, #32]
    2ef4:	2b00      	cmp	r3, #0
    2ef6:	da12      	bge.n	2f1e <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x42e>
                if      (errorBehavior[5] == 0) NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
    2ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2efa:	3305      	adds	r3, #5
    2efc:	781b      	ldrb	r3, [r3, #0]
    2efe:	2b00      	cmp	r3, #0
    2f00:	d104      	bne.n	2f0c <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x41c>
    2f02:	68fb      	ldr	r3, [r7, #12]
    2f04:	681b      	ldr	r3, [r3, #0]
    2f06:	227f      	movs	r2, #127	; 0x7f
    2f08:	701a      	strb	r2, [r3, #0]
    2f0a:	e008      	b.n	2f1e <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x42e>
                else if (errorBehavior[5] == 2) NMT->operatingState = CO_NMT_STOPPED;
    2f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2f0e:	3305      	adds	r3, #5
    2f10:	781b      	ldrb	r3, [r3, #0]
    2f12:	2b02      	cmp	r3, #2
    2f14:	d103      	bne.n	2f1e <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x42e>
    2f16:	68fb      	ldr	r3, [r7, #12]
    2f18:	681b      	ldr	r3, [r3, #0]
    2f1a:	2204      	movs	r2, #4
    2f1c:	701a      	strb	r2, [r3, #0]
            }

            /* if operational state is lost, send HB immediately. */
            if(NMT->operatingState != CO_NMT_OPERATIONAL)
    2f1e:	68fb      	ldr	r3, [r7, #12]
    2f20:	681b      	ldr	r3, [r3, #0]
    2f22:	781b      	ldrb	r3, [r3, #0]
    2f24:	2b05      	cmp	r3, #5
    2f26:	d003      	beq.n	2f30 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x440>
                NMT->HBproducerTimer = HBtime;
    2f28:	68fb      	ldr	r3, [r7, #12]
    2f2a:	681b      	ldr	r3, [r3, #0]
    2f2c:	687a      	ldr	r2, [r7, #4]
    2f2e:	60da      	str	r2, [r3, #12]
        }
    }

    if(NMT->ptrState!=NULL && currentOperatingState!=NMT->operatingState){
    2f30:	68fb      	ldr	r3, [r7, #12]
    2f32:	681b      	ldr	r3, [r3, #0]
    2f34:	69db      	ldr	r3, [r3, #28]
    2f36:	2b00      	cmp	r3, #0
    2f38:	d00d      	beq.n	2f56 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x466>
    2f3a:	68fb      	ldr	r3, [r7, #12]
    2f3c:	681b      	ldr	r3, [r3, #0]
    2f3e:	781b      	ldrb	r3, [r3, #0]
    2f40:	7dba      	ldrb	r2, [r7, #22]
    2f42:	429a      	cmp	r2, r3
    2f44:	d007      	beq.n	2f56 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x466>
        NMT->ptrState((CO_NMT_internalState_t)NMT->operatingState);
    2f46:	68fb      	ldr	r3, [r7, #12]
    2f48:	681b      	ldr	r3, [r3, #0]
    2f4a:	69db      	ldr	r3, [r3, #28]
    2f4c:	68fa      	ldr	r2, [r7, #12]
    2f4e:	6812      	ldr	r2, [r2, #0]
    2f50:	7812      	ldrb	r2, [r2, #0]
    2f52:	4610      	mov	r0, r2
    2f54:	4798      	blx	r3
    }

    return (CO_NMT_reset_cmd_t)NMT->resetCommand;
    2f56:	68fb      	ldr	r3, [r7, #12]
    2f58:	681b      	ldr	r3, [r3, #0]
    2f5a:	7a5b      	ldrb	r3, [r3, #9]
}
    2f5c:	4618      	mov	r0, r3
    2f5e:	3718      	adds	r7, #24
    2f60:	46bd      	mov	sp, r7
    2f62:	bd80      	pop	{r7, pc}
    2f64:	20000960 	.word	0x20000960
    2f68:	00002315 	.word	0x00002315

00002f6c <_ZN12CO_PDO_ClassC1Ev>:


#include "CO_PDO_Class.h"
#include "CO_Driver_Class.h"
// default constructor
CO_PDO_Class::CO_PDO_Class()
    2f6c:	b480      	push	{r7}
    2f6e:	b083      	sub	sp, #12
    2f70:	af00      	add	r7, sp, #0
    2f72:	6078      	str	r0, [r7, #4]
{
} //CO_PDO_Class
    2f74:	687b      	ldr	r3, [r7, #4]
    2f76:	4618      	mov	r0, r3
    2f78:	370c      	adds	r7, #12
    2f7a:	46bd      	mov	sp, r7
    2f7c:	bc80      	pop	{r7}
    2f7e:	4770      	bx	lr

00002f80 <_ZN12CO_PDO_ClassD1Ev>:

// default destructor
CO_PDO_Class::~CO_PDO_Class()
    2f80:	b480      	push	{r7}
    2f82:	b083      	sub	sp, #12
    2f84:	af00      	add	r7, sp, #0
    2f86:	6078      	str	r0, [r7, #4]
{
} //~CO_PDO_Class
    2f88:	687b      	ldr	r3, [r7, #4]
    2f8a:	4618      	mov	r0, r3
    2f8c:	370c      	adds	r7, #12
    2f8e:	46bd      	mov	sp, r7
    2f90:	bc80      	pop	{r7}
    2f92:	4770      	bx	lr

00002f94 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t>:
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 * If new message arrives and previous message wasn't processed yet, then
 * previous message will be lost and overwritten by new message. That's OK with PDOs.
 */
static void CO_PDO_receive(void *object, const CO_CANrxMsg_t *msg){
    2f94:	b480      	push	{r7}
    2f96:	b085      	sub	sp, #20
    2f98:	af00      	add	r7, sp, #0
    2f9a:	6078      	str	r0, [r7, #4]
    2f9c:	6039      	str	r1, [r7, #0]
    CO_RPDO_t *RPDO;

    RPDO = (CO_RPDO_t*)object;   /* this is the correct pointer type of the first argument */
    2f9e:	687b      	ldr	r3, [r7, #4]
    2fa0:	60fb      	str	r3, [r7, #12]

    if( (RPDO->valid) &&
    2fa2:	68fb      	ldr	r3, [r7, #12]
    2fa4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
    2fa8:	2b00      	cmp	r3, #0
    2faa:	d070      	beq.n	308e <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0xfa>
        (*RPDO->operatingState == CO_NMT_OPERATIONAL) &&
    2fac:	68fb      	ldr	r3, [r7, #12]
    2fae:	695b      	ldr	r3, [r3, #20]
    2fb0:	781b      	ldrb	r3, [r3, #0]
    if( (RPDO->valid) &&
    2fb2:	2b05      	cmp	r3, #5
    2fb4:	d16b      	bne.n	308e <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0xfa>
        (msg->DLC >= RPDO->dataLength))
    2fb6:	683b      	ldr	r3, [r7, #0]
    2fb8:	7d1b      	ldrb	r3, [r3, #20]
    2fba:	461a      	mov	r2, r3
    2fbc:	68fb      	ldr	r3, [r7, #12]
    2fbe:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
        (*RPDO->operatingState == CO_NMT_OPERATIONAL) &&
    2fc2:	429a      	cmp	r2, r3
    2fc4:	db63      	blt.n	308e <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0xfa>
    {
        if(RPDO->synchronous && RPDO->SYNC->CANrxToggle) {
    2fc6:	68fb      	ldr	r3, [r7, #12]
    2fc8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
    2fcc:	2b00      	cmp	r3, #0
    2fce:	d032      	beq.n	3036 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0xa2>
    2fd0:	68fb      	ldr	r3, [r7, #12]
    2fd2:	689b      	ldr	r3, [r3, #8]
    2fd4:	7edb      	ldrb	r3, [r3, #27]
    2fd6:	2b00      	cmp	r3, #0
    2fd8:	d02d      	beq.n	3036 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0xa2>
            /* copy data into second buffer and set 'new message' flag */
            RPDO->CANrxData[1][0] = msg->data[0];
    2fda:	683b      	ldr	r3, [r7, #0]
    2fdc:	7d5a      	ldrb	r2, [r3, #21]
    2fde:	68fb      	ldr	r3, [r7, #12]
    2fe0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            RPDO->CANrxData[1][1] = msg->data[1];
    2fe4:	683b      	ldr	r3, [r7, #0]
    2fe6:	7d9a      	ldrb	r2, [r3, #22]
    2fe8:	68fb      	ldr	r3, [r7, #12]
    2fea:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
            RPDO->CANrxData[1][2] = msg->data[2];
    2fee:	683b      	ldr	r3, [r7, #0]
    2ff0:	7dda      	ldrb	r2, [r3, #23]
    2ff2:	68fb      	ldr	r3, [r7, #12]
    2ff4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            RPDO->CANrxData[1][3] = msg->data[3];
    2ff8:	683b      	ldr	r3, [r7, #0]
    2ffa:	7e1a      	ldrb	r2, [r3, #24]
    2ffc:	68fb      	ldr	r3, [r7, #12]
    2ffe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            RPDO->CANrxData[1][4] = msg->data[4];
    3002:	683b      	ldr	r3, [r7, #0]
    3004:	7e5a      	ldrb	r2, [r3, #25]
    3006:	68fb      	ldr	r3, [r7, #12]
    3008:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
            RPDO->CANrxData[1][5] = msg->data[5];
    300c:	683b      	ldr	r3, [r7, #0]
    300e:	7e9a      	ldrb	r2, [r3, #26]
    3010:	68fb      	ldr	r3, [r7, #12]
    3012:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            RPDO->CANrxData[1][6] = msg->data[6];
    3016:	683b      	ldr	r3, [r7, #0]
    3018:	7eda      	ldrb	r2, [r3, #27]
    301a:	68fb      	ldr	r3, [r7, #12]
    301c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            RPDO->CANrxData[1][7] = msg->data[7];
    3020:	683b      	ldr	r3, [r7, #0]
    3022:	7f1a      	ldrb	r2, [r3, #28]
    3024:	68fb      	ldr	r3, [r7, #12]
    3026:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

            RPDO->CANrxNew[1] = true;
    302a:	68fb      	ldr	r3, [r7, #12]
    302c:	2201      	movs	r2, #1
    302e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    3032:	bf00      	nop
            RPDO->CANrxData[0][7] = msg->data[7];

            RPDO->CANrxNew[0] = true;
        }
    }
}
    3034:	e02b      	b.n	308e <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0xfa>
            RPDO->CANrxData[0][0] = msg->data[0];
    3036:	683b      	ldr	r3, [r7, #0]
    3038:	7d5a      	ldrb	r2, [r3, #21]
    303a:	68fb      	ldr	r3, [r7, #12]
    303c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
            RPDO->CANrxData[0][1] = msg->data[1];
    3040:	683b      	ldr	r3, [r7, #0]
    3042:	7d9a      	ldrb	r2, [r3, #22]
    3044:	68fb      	ldr	r3, [r7, #12]
    3046:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
            RPDO->CANrxData[0][2] = msg->data[2];
    304a:	683b      	ldr	r3, [r7, #0]
    304c:	7dda      	ldrb	r2, [r3, #23]
    304e:	68fb      	ldr	r3, [r7, #12]
    3050:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            RPDO->CANrxData[0][3] = msg->data[3];
    3054:	683b      	ldr	r3, [r7, #0]
    3056:	7e1a      	ldrb	r2, [r3, #24]
    3058:	68fb      	ldr	r3, [r7, #12]
    305a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
            RPDO->CANrxData[0][4] = msg->data[4];
    305e:	683b      	ldr	r3, [r7, #0]
    3060:	7e5a      	ldrb	r2, [r3, #25]
    3062:	68fb      	ldr	r3, [r7, #12]
    3064:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
            RPDO->CANrxData[0][5] = msg->data[5];
    3068:	683b      	ldr	r3, [r7, #0]
    306a:	7e9a      	ldrb	r2, [r3, #26]
    306c:	68fb      	ldr	r3, [r7, #12]
    306e:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
            RPDO->CANrxData[0][6] = msg->data[6];
    3072:	683b      	ldr	r3, [r7, #0]
    3074:	7eda      	ldrb	r2, [r3, #27]
    3076:	68fb      	ldr	r3, [r7, #12]
    3078:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            RPDO->CANrxData[0][7] = msg->data[7];
    307c:	683b      	ldr	r3, [r7, #0]
    307e:	7f1a      	ldrb	r2, [r3, #28]
    3080:	68fb      	ldr	r3, [r7, #12]
    3082:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
            RPDO->CANrxNew[0] = true;
    3086:	68fb      	ldr	r3, [r7, #12]
    3088:	2201      	movs	r2, #1
    308a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
    308e:	bf00      	nop
    3090:	3714      	adds	r7, #20
    3092:	46bd      	mov	sp, r7
    3094:	bc80      	pop	{r7}
    3096:	4770      	bx	lr

00003098 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm>:
 *
 * @param RPDO RPDO object.
 * @param COB_IDUsedByRPDO _RPDO communication parameter_, _COB-ID for PDO_ variable
 * from Object dictionary (index 0x1400+, subindex 1).
 */
static void CO_RPDOconfigCom(CO_RPDO_t* RPDO, uint32_t COB_IDUsedByRPDO){
    3098:	b590      	push	{r4, r7, lr}
    309a:	b089      	sub	sp, #36	; 0x24
    309c:	af04      	add	r7, sp, #16
    309e:	6078      	str	r0, [r7, #4]
    30a0:	6039      	str	r1, [r7, #0]
    uint32_t ID;
    CO_ReturnError_t r;

    ID = (uint32_t)COB_IDUsedByRPDO;
    30a2:	683b      	ldr	r3, [r7, #0]
    30a4:	60fb      	str	r3, [r7, #12]

    /* is RPDO used? */
    if((COB_IDUsedByRPDO & 0xBFFFF800L) == 0 && RPDO->dataLength && ID){
    30a6:	683a      	ldr	r2, [r7, #0]
    30a8:	4b2d      	ldr	r3, [pc, #180]	; (3160 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xc8>)
    30aa:	4013      	ands	r3, r2
    30ac:	2b00      	cmp	r3, #0
    30ae:	d123      	bne.n	30f8 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x60>
    30b0:	687b      	ldr	r3, [r7, #4]
    30b2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
    30b6:	2b00      	cmp	r3, #0
    30b8:	d01e      	beq.n	30f8 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x60>
    30ba:	68fb      	ldr	r3, [r7, #12]
    30bc:	2b00      	cmp	r3, #0
    30be:	d01b      	beq.n	30f8 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x60>
        /* is used default COB-ID? */
        if(ID == RPDO->defaultCOB_ID) ID += RPDO->nodeId;
    30c0:	687b      	ldr	r3, [r7, #4]
    30c2:	69da      	ldr	r2, [r3, #28]
    30c4:	68fb      	ldr	r3, [r7, #12]
    30c6:	429a      	cmp	r2, r3
    30c8:	d105      	bne.n	30d6 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x3e>
    30ca:	687b      	ldr	r3, [r7, #4]
    30cc:	7e1b      	ldrb	r3, [r3, #24]
    30ce:	461a      	mov	r2, r3
    30d0:	68fb      	ldr	r3, [r7, #12]
    30d2:	4413      	add	r3, r2
    30d4:	60fb      	str	r3, [r7, #12]
        RPDO->valid = true;
    30d6:	687b      	ldr	r3, [r7, #4]
    30d8:	2201      	movs	r2, #1
    30da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RPDO->synchronous = (RPDO->RPDOCommPar->transmissionType <= 240) ? true : false;
    30de:	687b      	ldr	r3, [r7, #4]
    30e0:	68db      	ldr	r3, [r3, #12]
    30e2:	7a1b      	ldrb	r3, [r3, #8]
    30e4:	2bf0      	cmp	r3, #240	; 0xf0
    30e6:	bfd4      	ite	le
    30e8:	2301      	movle	r3, #1
    30ea:	2300      	movgt	r3, #0
    30ec:	b2db      	uxtb	r3, r3
    30ee:	461a      	mov	r2, r3
    30f0:	687b      	ldr	r3, [r7, #4]
    30f2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    30f6:	e00d      	b.n	3114 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x7c>
    }
    else{
        ID = 0;
    30f8:	2300      	movs	r3, #0
    30fa:	60fb      	str	r3, [r7, #12]
        RPDO->valid = false;
    30fc:	687b      	ldr	r3, [r7, #4]
    30fe:	2200      	movs	r2, #0
    3100:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
    3104:	687b      	ldr	r3, [r7, #4]
    3106:	2200      	movs	r2, #0
    3108:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    310c:	687b      	ldr	r3, [r7, #4]
    310e:	2200      	movs	r2, #0
    3110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    r = ptrCODriverClass->CAN_Rx_BufferInit(
    3114:	4b13      	ldr	r3, [pc, #76]	; (3164 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xcc>)
    3116:	6818      	ldr	r0, [r3, #0]
    3118:	687b      	ldr	r3, [r7, #4]
    311a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
            RPDO->CANdevRxIdx,      /* rx buffer index */
            ID,                     /* CAN identifier */
            0x7FF,                  /* mask */
            0,                      /* rtr */
            (void*)RPDO,            /* object passed to receive function */
            CO_PDO_receive);        /* this function will process received message */
    311c:	4b12      	ldr	r3, [pc, #72]	; (3168 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xd0>)
    311e:	9302      	str	r3, [sp, #8]
    3120:	687b      	ldr	r3, [r7, #4]
    3122:	9301      	str	r3, [sp, #4]
    3124:	2300      	movs	r3, #0
    3126:	9300      	str	r3, [sp, #0]
    3128:	f240 73ff 	movw	r3, #2047	; 0x7ff
    312c:	68fa      	ldr	r2, [r7, #12]
    312e:	4c0f      	ldr	r4, [pc, #60]	; (316c <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xd4>)
    3130:	47a0      	blx	r4
    3132:	4603      	mov	r3, r0
    3134:	72fb      	strb	r3, [r7, #11]
    if(r != CO_ERROR_NO){
    3136:	f997 300b 	ldrsb.w	r3, [r7, #11]
    313a:	2b00      	cmp	r3, #0
    313c:	d00b      	beq.n	3156 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xbe>
        RPDO->valid = false;
    313e:	687b      	ldr	r3, [r7, #4]
    3140:	2200      	movs	r2, #0
    3142:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
    3146:	687b      	ldr	r3, [r7, #4]
    3148:	2200      	movs	r2, #0
    314a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    314e:	687b      	ldr	r3, [r7, #4]
    3150:	2200      	movs	r2, #0
    3152:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
}
    3156:	bf00      	nop
    3158:	3714      	adds	r7, #20
    315a:	46bd      	mov	sp, r7
    315c:	bd90      	pop	{r4, r7, pc}
    315e:	bf00      	nop
    3160:	bffff800 	.word	0xbffff800
    3164:	20000960 	.word	0x20000960
    3168:	00002f95 	.word	0x00002f95
    316c:	00001479 	.word	0x00001479

00003170 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh>:
 * @param TPDO TPDO object.
 * @param COB_IDUsedByTPDO _TPDO communication parameter_, _COB-ID for PDO_ variable
 * from Object dictionary (index 0x1400+, subindex 1).
 * @param syncFlag Indicate, if TPDO is synchronous.
 */
static void CO_TPDOconfigCom(CO_TPDO_t* TPDO, uint32_t COB_IDUsedByTPDO, uint8_t syncFlag){
    3170:	b590      	push	{r4, r7, lr}
    3172:	b089      	sub	sp, #36	; 0x24
    3174:	af02      	add	r7, sp, #8
    3176:	60f8      	str	r0, [r7, #12]
    3178:	60b9      	str	r1, [r7, #8]
    317a:	4613      	mov	r3, r2
    317c:	71fb      	strb	r3, [r7, #7]
    uint32_t ID;

    ID = (uint32_t)COB_IDUsedByTPDO;
    317e:	68bb      	ldr	r3, [r7, #8]
    3180:	617b      	str	r3, [r7, #20]

    /* is TPDO used? */
    if((COB_IDUsedByTPDO & 0xBFFFF800L) == 0 && TPDO->dataLength && ID){
    3182:	68ba      	ldr	r2, [r7, #8]
    3184:	4b1c      	ldr	r3, [pc, #112]	; (31f8 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x88>)
    3186:	4013      	ands	r3, r2
    3188:	2b00      	cmp	r3, #0
    318a:	d115      	bne.n	31b8 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x48>
    318c:	68fb      	ldr	r3, [r7, #12]
    318e:	7f9b      	ldrb	r3, [r3, #30]
    3190:	2b00      	cmp	r3, #0
    3192:	d011      	beq.n	31b8 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x48>
    3194:	697b      	ldr	r3, [r7, #20]
    3196:	2b00      	cmp	r3, #0
    3198:	d00e      	beq.n	31b8 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x48>
        /* is used default COB-ID? */
        if(ID == TPDO->defaultCOB_ID) ID += TPDO->nodeId;
    319a:	68fb      	ldr	r3, [r7, #12]
    319c:	699a      	ldr	r2, [r3, #24]
    319e:	697b      	ldr	r3, [r7, #20]
    31a0:	429a      	cmp	r2, r3
    31a2:	d105      	bne.n	31b0 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x40>
    31a4:	68fb      	ldr	r3, [r7, #12]
    31a6:	7d1b      	ldrb	r3, [r3, #20]
    31a8:	461a      	mov	r2, r3
    31aa:	697b      	ldr	r3, [r7, #20]
    31ac:	4413      	add	r3, r2
    31ae:	617b      	str	r3, [r7, #20]
        TPDO->valid = true;
    31b0:	68fb      	ldr	r3, [r7, #12]
    31b2:	2201      	movs	r2, #1
    31b4:	775a      	strb	r2, [r3, #29]
    31b6:	e004      	b.n	31c2 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x52>
    }
    else{
        ID = 0;
    31b8:	2300      	movs	r3, #0
    31ba:	617b      	str	r3, [r7, #20]
        TPDO->valid = false;
    31bc:	68fb      	ldr	r3, [r7, #12]
    31be:	2200      	movs	r2, #0
    31c0:	775a      	strb	r2, [r3, #29]
    }

    TPDO->CANtxBuff = ptrCODriverClass->CAN_Tx_BufferInit(
    31c2:	4b0e      	ldr	r3, [pc, #56]	; (31fc <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x8c>)
    31c4:	6818      	ldr	r0, [r3, #0]
    31c6:	68fb      	ldr	r3, [r7, #12]
    31c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
    31ca:	68fb      	ldr	r3, [r7, #12]
    31cc:	7f9b      	ldrb	r3, [r3, #30]
    31ce:	79fa      	ldrb	r2, [r7, #7]
    31d0:	9201      	str	r2, [sp, #4]
    31d2:	9300      	str	r3, [sp, #0]
    31d4:	2300      	movs	r3, #0
    31d6:	697a      	ldr	r2, [r7, #20]
    31d8:	4c09      	ldr	r4, [pc, #36]	; (3200 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x90>)
    31da:	47a0      	blx	r4
    31dc:	4602      	mov	r2, r0
    31de:	68fb      	ldr	r3, [r7, #12]
    31e0:	651a      	str	r2, [r3, #80]	; 0x50
            ID,                        /* CAN identifier */
            0,                         /* rtr */
            TPDO->dataLength,          /* number of data bytes */
            syncFlag);                 /* synchronous message flag bit */

    if(TPDO->CANtxBuff == 0){
    31e2:	68fb      	ldr	r3, [r7, #12]
    31e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    31e6:	2b00      	cmp	r3, #0
    31e8:	d102      	bne.n	31f0 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x80>
        TPDO->valid = false;
    31ea:	68fb      	ldr	r3, [r7, #12]
    31ec:	2200      	movs	r2, #0
    31ee:	775a      	strb	r2, [r3, #29]
    }
}
    31f0:	bf00      	nop
    31f2:	371c      	adds	r7, #28
    31f4:	46bd      	mov	sp, r7
    31f6:	bd90      	pop	{r4, r7, pc}
    31f8:	bffff800 	.word	0xbffff800
    31fc:	20000960 	.word	0x20000960
    3200:	00001575 	.word	0x00001575

00003204 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_>:
        uint8_t                 R_T,
        uint8_t               **ppData,
        uint8_t                *pLength,
        uint8_t                *pSendIfCOSFlags,
        uint8_t                *pIsMultibyteVar)
{
    3204:	b580      	push	{r7, lr}
    3206:	b08a      	sub	sp, #40	; 0x28
    3208:	af00      	add	r7, sp, #0
    320a:	60f8      	str	r0, [r7, #12]
    320c:	60b9      	str	r1, [r7, #8]
    320e:	603b      	str	r3, [r7, #0]
    3210:	4613      	mov	r3, r2
    3212:	71fb      	strb	r3, [r7, #7]
    uint8_t subIndex;
    uint8_t dataLen;
    uint8_t objectLen;
    uint8_t attr;

    index = (uint32_t)(map>>16);
    3214:	68bb      	ldr	r3, [r7, #8]
    3216:	0c1b      	lsrs	r3, r3, #16
    3218:	61fb      	str	r3, [r7, #28]
    subIndex = (uint8_t)(map>>8);
    321a:	68bb      	ldr	r3, [r7, #8]
    321c:	0a1b      	lsrs	r3, r3, #8
    321e:	76fb      	strb	r3, [r7, #27]
    dataLen = (uint8_t) map;   /* data length in bits */
    3220:	68bb      	ldr	r3, [r7, #8]
    3222:	76bb      	strb	r3, [r7, #26]

    /* data length must be byte aligned */
    if(dataLen&0x07) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
    3224:	7ebb      	ldrb	r3, [r7, #26]
    3226:	f003 0307 	and.w	r3, r3, #7
    322a:	2b00      	cmp	r3, #0
    322c:	d001      	beq.n	3232 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x2e>
    322e:	4b6b      	ldr	r3, [pc, #428]	; (33dc <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
    3230:	e0cf      	b.n	33d2 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    dataLen >>= 3;    /* new data length is in bytes */
    3232:	7ebb      	ldrb	r3, [r7, #26]
    3234:	10db      	asrs	r3, r3, #3
    3236:	76bb      	strb	r3, [r7, #26]
    *pLength += dataLen;
    3238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    323a:	781a      	ldrb	r2, [r3, #0]
    323c:	7ebb      	ldrb	r3, [r7, #26]
    323e:	4413      	add	r3, r2
    3240:	b2da      	uxtb	r2, r3
    3242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3244:	701a      	strb	r2, [r3, #0]

    /* total PDO length can not be more than 8 bytes */
    if(*pLength > 8) return CO_SDO_AB_MAP_LEN;  /* The number and length of the objects to be mapped would exceed PDO length. */
    3246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3248:	781b      	ldrb	r3, [r3, #0]
    324a:	2b08      	cmp	r3, #8
    324c:	dd01      	ble.n	3252 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x4e>
    324e:	4b64      	ldr	r3, [pc, #400]	; (33e0 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1dc>)
    3250:	e0bf      	b.n	33d2 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    /* is there a reference to dummy entries */
    if(index <=7 && subIndex == 0){
    3252:	69fb      	ldr	r3, [r7, #28]
    3254:	2b07      	cmp	r3, #7
    3256:	d832      	bhi.n	32be <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xba>
    3258:	7efb      	ldrb	r3, [r7, #27]
    325a:	2b00      	cmp	r3, #0
    325c:	d12f      	bne.n	32be <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xba>
        static uint32_t dummyTX = 0;
        static uint32_t dummyRX;
        uint8_t dummySize = 4;
    325e:	2304      	movs	r3, #4
    3260:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if(index<2) dummySize = 0;
    3264:	69fb      	ldr	r3, [r7, #28]
    3266:	2b01      	cmp	r3, #1
    3268:	d803      	bhi.n	3272 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x6e>
    326a:	2300      	movs	r3, #0
    326c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    3270:	e012      	b.n	3298 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x94>
        else if(index==2 || index==5) dummySize = 1;
    3272:	69fb      	ldr	r3, [r7, #28]
    3274:	2b02      	cmp	r3, #2
    3276:	d002      	beq.n	327e <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x7a>
    3278:	69fb      	ldr	r3, [r7, #28]
    327a:	2b05      	cmp	r3, #5
    327c:	d103      	bne.n	3286 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x82>
    327e:	2301      	movs	r3, #1
    3280:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    3284:	e008      	b.n	3298 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x94>
        else if(index==3 || index==6) dummySize = 2;
    3286:	69fb      	ldr	r3, [r7, #28]
    3288:	2b03      	cmp	r3, #3
    328a:	d002      	beq.n	3292 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x8e>
    328c:	69fb      	ldr	r3, [r7, #28]
    328e:	2b06      	cmp	r3, #6
    3290:	d102      	bne.n	3298 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x94>
    3292:	2302      	movs	r3, #2
    3294:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        /* is size of variable big enough for map */
        if(dummySize < dataLen) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
    3298:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
    329c:	7ebb      	ldrb	r3, [r7, #26]
    329e:	429a      	cmp	r2, r3
    32a0:	da01      	bge.n	32a6 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xa2>
    32a2:	4b4e      	ldr	r3, [pc, #312]	; (33dc <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
    32a4:	e095      	b.n	33d2 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

        /* Data and ODE pointer */
        if(R_T == 0) *ppData = (uint8_t*) &dummyRX;
    32a6:	79fb      	ldrb	r3, [r7, #7]
    32a8:	2b00      	cmp	r3, #0
    32aa:	d103      	bne.n	32b4 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xb0>
    32ac:	683b      	ldr	r3, [r7, #0]
    32ae:	4a4d      	ldr	r2, [pc, #308]	; (33e4 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e0>)
    32b0:	601a      	str	r2, [r3, #0]
    32b2:	e002      	b.n	32ba <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xb6>
        else         *ppData = (uint8_t*) &dummyTX;
    32b4:	683b      	ldr	r3, [r7, #0]
    32b6:	4a4c      	ldr	r2, [pc, #304]	; (33e8 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e4>)
    32b8:	601a      	str	r2, [r3, #0]

        return 0;
    32ba:	2300      	movs	r3, #0
    32bc:	e089      	b.n	33d2 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>
    }

    /* find object in Object Dictionary */
    entryNo = ptrCODriverClass->CO_OD_find( index);
    32be:	4b4b      	ldr	r3, [pc, #300]	; (33ec <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e8>)
    32c0:	681b      	ldr	r3, [r3, #0]
    32c2:	3304      	adds	r3, #4
    32c4:	69f9      	ldr	r1, [r7, #28]
    32c6:	4618      	mov	r0, r3
    32c8:	4b49      	ldr	r3, [pc, #292]	; (33f0 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ec>)
    32ca:	4798      	blx	r3
    32cc:	6178      	str	r0, [r7, #20]

    /* Does object exist in OD? */
    if(entryNo == 0xFFFF || subIndex > SDO->OD[entryNo].maxSubIndex)
    32ce:	697b      	ldr	r3, [r7, #20]
    32d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
    32d4:	4293      	cmp	r3, r2
    32d6:	d00b      	beq.n	32f0 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xec>
    32d8:	7ef9      	ldrb	r1, [r7, #27]
    32da:	68fb      	ldr	r3, [r7, #12]
    32dc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    32de:	697a      	ldr	r2, [r7, #20]
    32e0:	4613      	mov	r3, r2
    32e2:	009b      	lsls	r3, r3, #2
    32e4:	4413      	add	r3, r2
    32e6:	009b      	lsls	r3, r3, #2
    32e8:	4403      	add	r3, r0
    32ea:	791b      	ldrb	r3, [r3, #4]
    32ec:	4299      	cmp	r1, r3
    32ee:	dd01      	ble.n	32f4 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xf0>
        return CO_SDO_AB_NOT_EXIST;   /* Object does not exist in the object dictionary. */
    32f0:	4b40      	ldr	r3, [pc, #256]	; (33f4 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1f0>)
    32f2:	e06e      	b.n	33d2 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    attr = ptrCODriverClass->CO_OD_getAttribute( entryNo, subIndex);
    32f4:	4b3d      	ldr	r3, [pc, #244]	; (33ec <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e8>)
    32f6:	681b      	ldr	r3, [r3, #0]
    32f8:	3304      	adds	r3, #4
    32fa:	7efa      	ldrb	r2, [r7, #27]
    32fc:	6979      	ldr	r1, [r7, #20]
    32fe:	4618      	mov	r0, r3
    3300:	4b3d      	ldr	r3, [pc, #244]	; (33f8 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1f4>)
    3302:	4798      	blx	r3
    3304:	4603      	mov	r3, r0
    3306:	74fb      	strb	r3, [r7, #19]
    /* Is object Mappable for RPDO? */
    if(R_T==0 && !((attr&CO_ODA_RPDO_MAPABLE) && (attr&CO_ODA_WRITEABLE))) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
    3308:	79fb      	ldrb	r3, [r7, #7]
    330a:	2b00      	cmp	r3, #0
    330c:	d10b      	bne.n	3326 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x122>
    330e:	7cfb      	ldrb	r3, [r7, #19]
    3310:	f003 0310 	and.w	r3, r3, #16
    3314:	2b00      	cmp	r3, #0
    3316:	d004      	beq.n	3322 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x11e>
    3318:	7cfb      	ldrb	r3, [r7, #19]
    331a:	f003 0308 	and.w	r3, r3, #8
    331e:	2b00      	cmp	r3, #0
    3320:	d101      	bne.n	3326 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x122>
    3322:	4b2e      	ldr	r3, [pc, #184]	; (33dc <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
    3324:	e055      	b.n	33d2 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>
    /* Is object Mappable for TPDO? */
    if(R_T!=0 && !((attr&CO_ODA_TPDO_MAPABLE) && (attr&CO_ODA_READABLE))) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
    3326:	79fb      	ldrb	r3, [r7, #7]
    3328:	2b00      	cmp	r3, #0
    332a:	d00b      	beq.n	3344 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x140>
    332c:	7cfb      	ldrb	r3, [r7, #19]
    332e:	f003 0320 	and.w	r3, r3, #32
    3332:	2b00      	cmp	r3, #0
    3334:	d004      	beq.n	3340 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x13c>
    3336:	7cfb      	ldrb	r3, [r7, #19]
    3338:	f003 0304 	and.w	r3, r3, #4
    333c:	2b00      	cmp	r3, #0
    333e:	d101      	bne.n	3344 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x140>
    3340:	4b26      	ldr	r3, [pc, #152]	; (33dc <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
    3342:	e046      	b.n	33d2 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    /* is size of variable big enough for map */
    objectLen = ptrCODriverClass->CO_OD_getLength( entryNo, subIndex);
    3344:	4b29      	ldr	r3, [pc, #164]	; (33ec <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e8>)
    3346:	681b      	ldr	r3, [r3, #0]
    3348:	3304      	adds	r3, #4
    334a:	7efa      	ldrb	r2, [r7, #27]
    334c:	6979      	ldr	r1, [r7, #20]
    334e:	4618      	mov	r0, r3
    3350:	4b2a      	ldr	r3, [pc, #168]	; (33fc <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1f8>)
    3352:	4798      	blx	r3
    3354:	4603      	mov	r3, r0
    3356:	74bb      	strb	r3, [r7, #18]
    if(objectLen < dataLen) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
    3358:	7cba      	ldrb	r2, [r7, #18]
    335a:	7ebb      	ldrb	r3, [r7, #26]
    335c:	429a      	cmp	r2, r3
    335e:	da01      	bge.n	3364 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x160>
    3360:	4b1e      	ldr	r3, [pc, #120]	; (33dc <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
    3362:	e036      	b.n	33d2 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    /* mark multibyte variable */
    *pIsMultibyteVar = (attr&CO_ODA_MB_VALUE) ? 1 : 0;
    3364:	f997 3013 	ldrsb.w	r3, [r7, #19]
    3368:	2b00      	cmp	r3, #0
    336a:	da01      	bge.n	3370 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x16c>
    336c:	2201      	movs	r2, #1
    336e:	e000      	b.n	3372 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x16e>
    3370:	2200      	movs	r2, #0
    3372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3374:	701a      	strb	r2, [r3, #0]

    /* pointer to data */
    *ppData = (uint8_t*) (ptrCODriverClass->CO_OD_getDataPointer( entryNo, subIndex));
    3376:	4b1d      	ldr	r3, [pc, #116]	; (33ec <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e8>)
    3378:	681b      	ldr	r3, [r3, #0]
    337a:	3304      	adds	r3, #4
    337c:	7efa      	ldrb	r2, [r7, #27]
    337e:	6979      	ldr	r1, [r7, #20]
    3380:	4618      	mov	r0, r3
    3382:	4b1f      	ldr	r3, [pc, #124]	; (3400 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1fc>)
    3384:	4798      	blx	r3
    3386:	4602      	mov	r2, r0
    3388:	683b      	ldr	r3, [r7, #0]
    338a:	601a      	str	r2, [r3, #0]
        *ppData += objectLen - dataLen;
    }
#endif

    /* setup change of state flags */
    if(attr&CO_ODA_TPDO_DETECT_COS){
    338c:	7cfb      	ldrb	r3, [r7, #19]
    338e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    3392:	2b00      	cmp	r3, #0
    3394:	d01c      	beq.n	33d0 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1cc>
        uint32_t i;
        for(i=*pLength-dataLen; i<*pLength; i++){
    3396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3398:	781b      	ldrb	r3, [r3, #0]
    339a:	461a      	mov	r2, r3
    339c:	7ebb      	ldrb	r3, [r7, #26]
    339e:	1ad3      	subs	r3, r2, r3
    33a0:	623b      	str	r3, [r7, #32]
    33a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    33a4:	781b      	ldrb	r3, [r3, #0]
    33a6:	461a      	mov	r2, r3
    33a8:	6a3b      	ldr	r3, [r7, #32]
    33aa:	429a      	cmp	r2, r3
    33ac:	d910      	bls.n	33d0 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1cc>
            *pSendIfCOSFlags |= 1<<i;
    33ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    33b0:	781b      	ldrb	r3, [r3, #0]
    33b2:	b25a      	sxtb	r2, r3
    33b4:	2101      	movs	r1, #1
    33b6:	6a3b      	ldr	r3, [r7, #32]
    33b8:	fa01 f303 	lsl.w	r3, r1, r3
    33bc:	b25b      	sxtb	r3, r3
    33be:	4313      	orrs	r3, r2
    33c0:	b25b      	sxtb	r3, r3
    33c2:	b2da      	uxtb	r2, r3
    33c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    33c6:	701a      	strb	r2, [r3, #0]
        for(i=*pLength-dataLen; i<*pLength; i++){
    33c8:	6a3b      	ldr	r3, [r7, #32]
    33ca:	3301      	adds	r3, #1
    33cc:	623b      	str	r3, [r7, #32]
    33ce:	e7e8      	b.n	33a2 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x19e>
        }
    }

    return 0;
    33d0:	2300      	movs	r3, #0
}
    33d2:	4618      	mov	r0, r3
    33d4:	3728      	adds	r7, #40	; 0x28
    33d6:	46bd      	mov	sp, r7
    33d8:	bd80      	pop	{r7, pc}
    33da:	bf00      	nop
    33dc:	06040041 	.word	0x06040041
    33e0:	06040042 	.word	0x06040042
    33e4:	2000096c 	.word	0x2000096c
    33e8:	20000968 	.word	0x20000968
    33ec:	20000960 	.word	0x20000960
    33f0:	000047d1 	.word	0x000047d1
    33f4:	06020000 	.word	0x06020000
    33f8:	0000491d 	.word	0x0000491d
    33fc:	00004879 	.word	0x00004879
    3400:	000049c7 	.word	0x000049c7

00003404 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th>:
 * @param RPDO RPDO object.
 * @param noOfMappedObjects Number of mapped object (from OD).
 *
 * @return 0 on success, otherwise SDO abort code.
 */
static uint32_t CO_RPDOconfigMap(CO_RPDO_t* RPDO, uint8_t noOfMappedObjects){
    3404:	b590      	push	{r4, r7, lr}
    3406:	b091      	sub	sp, #68	; 0x44
    3408:	af04      	add	r7, sp, #16
    340a:	6078      	str	r0, [r7, #4]
    340c:	460b      	mov	r3, r1
    340e:	70fb      	strb	r3, [r7, #3]
    uint32_t i;
    uint8_t length = 0;
    3410:	2300      	movs	r3, #0
    3412:	75fb      	strb	r3, [r7, #23]
    uint32_t ret = 0;
    3414:	2300      	movs	r3, #0
    3416:	62bb      	str	r3, [r7, #40]	; 0x28
    const uint32_t* pMap = &RPDO->RPDOMapPar->mappedObject1;
    3418:	687b      	ldr	r3, [r7, #4]
    341a:	691b      	ldr	r3, [r3, #16]
    341c:	3304      	adds	r3, #4
    341e:	627b      	str	r3, [r7, #36]	; 0x24

    for(i=noOfMappedObjects; i>0; i--){
    3420:	78fb      	ldrb	r3, [r7, #3]
    3422:	62fb      	str	r3, [r7, #44]	; 0x2c
    3424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3426:	2b00      	cmp	r3, #0
    3428:	d045      	beq.n	34b6 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xb2>
        uint32_t j;
        uint8_t* pData;
        uint8_t dummy = 0;
    342a:	2300      	movs	r3, #0
    342c:	73fb      	strb	r3, [r7, #15]
        uint8_t prevLength = length;
    342e:	7dfb      	ldrb	r3, [r7, #23]
    3430:	77fb      	strb	r3, [r7, #31]
        uint8_t MBvar;
        uint32_t map = *(pMap++);
    3432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3434:	1d1a      	adds	r2, r3, #4
    3436:	627a      	str	r2, [r7, #36]	; 0x24
    3438:	681b      	ldr	r3, [r3, #0]
    343a:	61bb      	str	r3, [r7, #24]

        /* function do much checking of errors in map */
        ret = CO_PDOfindMap(
    343c:	687b      	ldr	r3, [r7, #4]
    343e:	6858      	ldr	r0, [r3, #4]
                map,
                0,
                &pData,
                &length,
                &dummy,
                &MBvar);
    3440:	f107 0210 	add.w	r2, r7, #16
    3444:	f107 030e 	add.w	r3, r7, #14
    3448:	9302      	str	r3, [sp, #8]
    344a:	f107 030f 	add.w	r3, r7, #15
    344e:	9301      	str	r3, [sp, #4]
    3450:	f107 0317 	add.w	r3, r7, #23
    3454:	9300      	str	r3, [sp, #0]
    3456:	4613      	mov	r3, r2
    3458:	2200      	movs	r2, #0
    345a:	69b9      	ldr	r1, [r7, #24]
    345c:	4c1a      	ldr	r4, [pc, #104]	; (34c8 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xc4>)
    345e:	47a0      	blx	r4
    3460:	62b8      	str	r0, [r7, #40]	; 0x28
        if(ret){
    3462:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3464:	2b00      	cmp	r3, #0
    3466:	d00e      	beq.n	3486 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0x82>
            length = 0;
    3468:	2300      	movs	r3, #0
    346a:	75fb      	strb	r3, [r7, #23]
           ptrCODriverClass->EM_ErrorReport(RPDO->em, CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR, map);
    346c:	4b17      	ldr	r3, [pc, #92]	; (34cc <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xc8>)
    346e:	681b      	ldr	r3, [r3, #0]
    3470:	1d18      	adds	r0, r3, #4
    3472:	687b      	ldr	r3, [r7, #4]
    3474:	6819      	ldr	r1, [r3, #0]
    3476:	69bb      	ldr	r3, [r7, #24]
    3478:	9300      	str	r3, [sp, #0]
    347a:	f44f 4302 	mov.w	r3, #33280	; 0x8200
    347e:	221a      	movs	r2, #26
    3480:	4c13      	ldr	r4, [pc, #76]	; (34d0 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xcc>)
    3482:	47a0      	blx	r4
    3484:	e017      	b.n	34b6 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xb2>
        else{
            for(j=prevLength; j<length; j++)
                RPDO->mapPointer[j] = pData++;
        }
#else
        for(j=prevLength; j<length; j++){
    3486:	7ffb      	ldrb	r3, [r7, #31]
    3488:	623b      	str	r3, [r7, #32]
    348a:	7dfb      	ldrb	r3, [r7, #23]
    348c:	461a      	mov	r2, r3
    348e:	6a3b      	ldr	r3, [r7, #32]
    3490:	429a      	cmp	r2, r3
    3492:	d90c      	bls.n	34ae <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xaa>
            RPDO->mapPointer[j] = pData++;
    3494:	693a      	ldr	r2, [r7, #16]
    3496:	1c53      	adds	r3, r2, #1
    3498:	613b      	str	r3, [r7, #16]
    349a:	6879      	ldr	r1, [r7, #4]
    349c:	6a3b      	ldr	r3, [r7, #32]
    349e:	3308      	adds	r3, #8
    34a0:	009b      	lsls	r3, r3, #2
    34a2:	440b      	add	r3, r1
    34a4:	605a      	str	r2, [r3, #4]
        for(j=prevLength; j<length; j++){
    34a6:	6a3b      	ldr	r3, [r7, #32]
    34a8:	3301      	adds	r3, #1
    34aa:	623b      	str	r3, [r7, #32]
    34ac:	e7ed      	b.n	348a <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0x86>
    for(i=noOfMappedObjects; i>0; i--){
    34ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    34b0:	3b01      	subs	r3, #1
    34b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    34b4:	e7b6      	b.n	3424 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0x20>
        }
#endif

    }

    RPDO->dataLength = length;
    34b6:	7dfa      	ldrb	r2, [r7, #23]
    34b8:	687b      	ldr	r3, [r7, #4]
    34ba:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

    return ret;
    34be:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
    34c0:	4618      	mov	r0, r3
    34c2:	3734      	adds	r7, #52	; 0x34
    34c4:	46bd      	mov	sp, r7
    34c6:	bd90      	pop	{r4, r7, pc}
    34c8:	00003205 	.word	0x00003205
    34cc:	20000960 	.word	0x20000960
    34d0:	00002075 	.word	0x00002075

000034d4 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th>:
 * @param TPDO TPDO object.
 * @param noOfMappedObjects Number of mapped object (from OD).
 *
 * @return 0 on success, otherwise SDO abort code.
 */
static uint32_t CO_TPDOconfigMap(CO_TPDO_t* TPDO, uint8_t noOfMappedObjects){
    34d4:	b590      	push	{r4, r7, lr}
    34d6:	b091      	sub	sp, #68	; 0x44
    34d8:	af04      	add	r7, sp, #16
    34da:	6078      	str	r0, [r7, #4]
    34dc:	460b      	mov	r3, r1
    34de:	70fb      	strb	r3, [r7, #3]
    uint32_t i;
    uint8_t length = 0;
    34e0:	2300      	movs	r3, #0
    34e2:	75fb      	strb	r3, [r7, #23]
    uint32_t ret = 0;
    34e4:	2300      	movs	r3, #0
    34e6:	62bb      	str	r3, [r7, #40]	; 0x28
    const uint32_t* pMap = &TPDO->TPDOMapPar->mappedObject1;
    34e8:	687b      	ldr	r3, [r7, #4]
    34ea:	68db      	ldr	r3, [r3, #12]
    34ec:	3304      	adds	r3, #4
    34ee:	627b      	str	r3, [r7, #36]	; 0x24

    TPDO->sendIfCOSFlags = 0;
    34f0:	687b      	ldr	r3, [r7, #4]
    34f2:	2200      	movs	r2, #0
    34f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    for(i=noOfMappedObjects; i>0; i--){
    34f8:	78fb      	ldrb	r3, [r7, #3]
    34fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    34fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    34fe:	2b00      	cmp	r3, #0
    3500:	d042      	beq.n	3588 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xb4>
        uint32_t j;
        uint8_t* pData;
        uint8_t prevLength = length;
    3502:	7dfb      	ldrb	r3, [r7, #23]
    3504:	77fb      	strb	r3, [r7, #31]
        uint8_t MBvar;
        uint32_t map = *(pMap++);
    3506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3508:	1d1a      	adds	r2, r3, #4
    350a:	627a      	str	r2, [r7, #36]	; 0x24
    350c:	681b      	ldr	r3, [r3, #0]
    350e:	61bb      	str	r3, [r7, #24]

        /* function do much checking of errors in map */
        ret = CO_PDOfindMap(
    3510:	687b      	ldr	r3, [r7, #4]
    3512:	6858      	ldr	r0, [r3, #4]
    3514:	687b      	ldr	r3, [r7, #4]
    3516:	3340      	adds	r3, #64	; 0x40
                map,
                1,
                &pData,
                &length,
                &TPDO->sendIfCOSFlags,
                &MBvar);
    3518:	f107 0110 	add.w	r1, r7, #16
    351c:	f107 020f 	add.w	r2, r7, #15
    3520:	9202      	str	r2, [sp, #8]
    3522:	9301      	str	r3, [sp, #4]
    3524:	f107 0317 	add.w	r3, r7, #23
    3528:	9300      	str	r3, [sp, #0]
    352a:	460b      	mov	r3, r1
    352c:	2201      	movs	r2, #1
    352e:	69b9      	ldr	r1, [r7, #24]
    3530:	4c19      	ldr	r4, [pc, #100]	; (3598 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xc4>)
    3532:	47a0      	blx	r4
    3534:	62b8      	str	r0, [r7, #40]	; 0x28
        if(ret){
    3536:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3538:	2b00      	cmp	r3, #0
    353a:	d00e      	beq.n	355a <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0x86>
            length = 0;
    353c:	2300      	movs	r3, #0
    353e:	75fb      	strb	r3, [r7, #23]
            ptrCODriverClass->EM_ErrorReport(TPDO->em, CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR, map);
    3540:	4b16      	ldr	r3, [pc, #88]	; (359c <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xc8>)
    3542:	681b      	ldr	r3, [r3, #0]
    3544:	1d18      	adds	r0, r3, #4
    3546:	687b      	ldr	r3, [r7, #4]
    3548:	6819      	ldr	r1, [r3, #0]
    354a:	69bb      	ldr	r3, [r7, #24]
    354c:	9300      	str	r3, [sp, #0]
    354e:	f44f 4302 	mov.w	r3, #33280	; 0x8200
    3552:	221a      	movs	r2, #26
    3554:	4c12      	ldr	r4, [pc, #72]	; (35a0 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xcc>)
    3556:	47a0      	blx	r4
    3558:	e016      	b.n	3588 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xb4>
        else{
            for(j=prevLength; j<length; j++)
                TPDO->mapPointer[j] = pData++;
        }
#else
        for(j=prevLength; j<length; j++){
    355a:	7ffb      	ldrb	r3, [r7, #31]
    355c:	623b      	str	r3, [r7, #32]
    355e:	7dfb      	ldrb	r3, [r7, #23]
    3560:	461a      	mov	r2, r3
    3562:	6a3b      	ldr	r3, [r7, #32]
    3564:	429a      	cmp	r2, r3
    3566:	d90b      	bls.n	3580 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xac>
            TPDO->mapPointer[j] = pData++;
    3568:	693b      	ldr	r3, [r7, #16]
    356a:	1c5a      	adds	r2, r3, #1
    356c:	613a      	str	r2, [r7, #16]
    356e:	687a      	ldr	r2, [r7, #4]
    3570:	6a39      	ldr	r1, [r7, #32]
    3572:	3108      	adds	r1, #8
    3574:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        for(j=prevLength; j<length; j++){
    3578:	6a3b      	ldr	r3, [r7, #32]
    357a:	3301      	adds	r3, #1
    357c:	623b      	str	r3, [r7, #32]
    357e:	e7ee      	b.n	355e <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0x8a>
    for(i=noOfMappedObjects; i>0; i--){
    3580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3582:	3b01      	subs	r3, #1
    3584:	62fb      	str	r3, [r7, #44]	; 0x2c
    3586:	e7b9      	b.n	34fc <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0x28>
        }
#endif

    }

    TPDO->dataLength = length;
    3588:	7dfa      	ldrb	r2, [r7, #23]
    358a:	687b      	ldr	r3, [r7, #4]
    358c:	779a      	strb	r2, [r3, #30]

    return ret;
    358e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
    3590:	4618      	mov	r0, r3
    3592:	3734      	adds	r7, #52	; 0x34
    3594:	46bd      	mov	sp, r7
    3596:	bd90      	pop	{r4, r7, pc}
    3598:	00003205 	.word	0x00003205
    359c:	20000960 	.word	0x20000960
    35a0:	00002075 	.word	0x00002075

000035a4 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t>:
/*
 * Function for accessing _RPDO communication parameter_ (index 0x1400+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_RPDOcom(CO_ODF_arg_t *ODF_arg){
    35a4:	b580      	push	{r7, lr}
    35a6:	b088      	sub	sp, #32
    35a8:	af00      	add	r7, sp, #0
    35aa:	6078      	str	r0, [r7, #4]
    CO_RPDO_t *RPDO;

    RPDO = (CO_RPDO_t*) ODF_arg->object;
    35ac:	687b      	ldr	r3, [r7, #4]
    35ae:	681b      	ldr	r3, [r3, #0]
    35b0:	61fb      	str	r3, [r7, #28]

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
    35b2:	687b      	ldr	r3, [r7, #4]
    35b4:	7f5b      	ldrb	r3, [r3, #29]
    35b6:	2b00      	cmp	r3, #0
    35b8:	d025      	beq.n	3606 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x62>
        if(ODF_arg->subIndex == 1){
    35ba:	687b      	ldr	r3, [r7, #4]
    35bc:	7f1b      	ldrb	r3, [r3, #28]
    35be:	2b01      	cmp	r3, #1
    35c0:	d11f      	bne.n	3602 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x5e>
            uint32_t *value = (uint32_t*) ODF_arg->data;
    35c2:	687b      	ldr	r3, [r7, #4]
    35c4:	685b      	ldr	r3, [r3, #4]
    35c6:	61bb      	str	r3, [r7, #24]

            /* if default COB ID is used, write default value here */
            if(((*value)&0xFFFF) == RPDO->defaultCOB_ID && RPDO->defaultCOB_ID)
    35c8:	69bb      	ldr	r3, [r7, #24]
    35ca:	681b      	ldr	r3, [r3, #0]
    35cc:	b29a      	uxth	r2, r3
    35ce:	69fb      	ldr	r3, [r7, #28]
    35d0:	69db      	ldr	r3, [r3, #28]
    35d2:	429a      	cmp	r2, r3
    35d4:	d10a      	bne.n	35ec <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x48>
    35d6:	69fb      	ldr	r3, [r7, #28]
    35d8:	69db      	ldr	r3, [r3, #28]
    35da:	2b00      	cmp	r3, #0
    35dc:	d006      	beq.n	35ec <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x48>
                *value += RPDO->nodeId;
    35de:	69bb      	ldr	r3, [r7, #24]
    35e0:	681b      	ldr	r3, [r3, #0]
    35e2:	69fa      	ldr	r2, [r7, #28]
    35e4:	7e12      	ldrb	r2, [r2, #24]
    35e6:	441a      	add	r2, r3
    35e8:	69bb      	ldr	r3, [r7, #24]
    35ea:	601a      	str	r2, [r3, #0]

            /* If PDO is not valid, set bit 31 */
            if(!RPDO->valid) *value |= 0x80000000L;
    35ec:	69fb      	ldr	r3, [r7, #28]
    35ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
    35f2:	2b00      	cmp	r3, #0
    35f4:	d105      	bne.n	3602 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x5e>
    35f6:	69bb      	ldr	r3, [r7, #24]
    35f8:	681b      	ldr	r3, [r3, #0]
    35fa:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    35fe:	69bb      	ldr	r3, [r7, #24]
    3600:	601a      	str	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
    3602:	2300      	movs	r3, #0
    3604:	e07f      	b.n	3706 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>
    }

    /* Writing Object Dictionary variable */
    if(RPDO->restrictionFlags & 0x04)
    3606:	69fb      	ldr	r3, [r7, #28]
    3608:	f893 3020 	ldrb.w	r3, [r3, #32]
    360c:	f003 0304 	and.w	r3, r3, #4
    3610:	2b00      	cmp	r3, #0
    3612:	d001      	beq.n	3618 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x74>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
    3614:	4b3e      	ldr	r3, [pc, #248]	; (3710 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x16c>)
    3616:	e076      	b.n	3706 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>
    if(*RPDO->operatingState == CO_NMT_OPERATIONAL && (RPDO->restrictionFlags & 0x01))
    3618:	69fb      	ldr	r3, [r7, #28]
    361a:	695b      	ldr	r3, [r3, #20]
    361c:	781b      	ldrb	r3, [r3, #0]
    361e:	2b05      	cmp	r3, #5
    3620:	d108      	bne.n	3634 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x90>
    3622:	69fb      	ldr	r3, [r7, #28]
    3624:	f893 3020 	ldrb.w	r3, [r3, #32]
    3628:	f003 0301 	and.w	r3, r3, #1
    362c:	2b00      	cmp	r3, #0
    362e:	d001      	beq.n	3634 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x90>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
    3630:	4b38      	ldr	r3, [pc, #224]	; (3714 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x170>)
    3632:	e068      	b.n	3706 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>

    if(ODF_arg->subIndex == 1){   /* COB_ID */
    3634:	687b      	ldr	r3, [r7, #4]
    3636:	7f1b      	ldrb	r3, [r3, #28]
    3638:	2b01      	cmp	r3, #1
    363a:	d139      	bne.n	36b0 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x10c>
        uint32_t *value = (uint32_t*) ODF_arg->data;
    363c:	687b      	ldr	r3, [r7, #4]
    363e:	685b      	ldr	r3, [r3, #4]
    3640:	617b      	str	r3, [r7, #20]

        /* bits 11...29 must be zero */
        if(*value & 0x3FFF8000L)
    3642:	697b      	ldr	r3, [r7, #20]
    3644:	681a      	ldr	r2, [r3, #0]
    3646:	4b34      	ldr	r3, [pc, #208]	; (3718 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x174>)
    3648:	4013      	ands	r3, r2
    364a:	2b00      	cmp	r3, #0
    364c:	d001      	beq.n	3652 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0xae>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    364e:	4b33      	ldr	r3, [pc, #204]	; (371c <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x178>)
    3650:	e059      	b.n	3706 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>

        /* if default COB-ID is being written, write defaultCOB_ID without nodeId */
        if(((*value)&0xFFFF) == (RPDO->defaultCOB_ID + RPDO->nodeId)){
    3652:	697b      	ldr	r3, [r7, #20]
    3654:	681b      	ldr	r3, [r3, #0]
    3656:	b29a      	uxth	r2, r3
    3658:	69fb      	ldr	r3, [r7, #28]
    365a:	69db      	ldr	r3, [r3, #28]
    365c:	69f9      	ldr	r1, [r7, #28]
    365e:	7e09      	ldrb	r1, [r1, #24]
    3660:	440b      	add	r3, r1
    3662:	429a      	cmp	r2, r3
    3664:	d10c      	bne.n	3680 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0xdc>
            *value &= 0xC0000000L;
    3666:	697b      	ldr	r3, [r7, #20]
    3668:	681b      	ldr	r3, [r3, #0]
    366a:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
    366e:	697b      	ldr	r3, [r7, #20]
    3670:	601a      	str	r2, [r3, #0]
            *value += RPDO->defaultCOB_ID;
    3672:	697b      	ldr	r3, [r7, #20]
    3674:	681a      	ldr	r2, [r3, #0]
    3676:	69fb      	ldr	r3, [r7, #28]
    3678:	69db      	ldr	r3, [r3, #28]
    367a:	441a      	add	r2, r3
    367c:	697b      	ldr	r3, [r7, #20]
    367e:	601a      	str	r2, [r3, #0]
        }

        /* if PDO is valid, bits 0..29 can not be changed */
        if(RPDO->valid && ((*value ^ RPDO->RPDOCommPar->COB_IDUsedByRPDO) & 0x3FFFFFFFL))
    3680:	69fb      	ldr	r3, [r7, #28]
    3682:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
    3686:	2b00      	cmp	r3, #0
    3688:	d00b      	beq.n	36a2 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0xfe>
    368a:	697b      	ldr	r3, [r7, #20]
    368c:	681a      	ldr	r2, [r3, #0]
    368e:	69fb      	ldr	r3, [r7, #28]
    3690:	68db      	ldr	r3, [r3, #12]
    3692:	685b      	ldr	r3, [r3, #4]
    3694:	4053      	eors	r3, r2
    3696:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    369a:	2b00      	cmp	r3, #0
    369c:	d001      	beq.n	36a2 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0xfe>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    369e:	4b1f      	ldr	r3, [pc, #124]	; (371c <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x178>)
    36a0:	e031      	b.n	3706 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>

        /* configure RPDO */
        CO_RPDOconfigCom(RPDO, *value);
    36a2:	697b      	ldr	r3, [r7, #20]
    36a4:	681b      	ldr	r3, [r3, #0]
    36a6:	4619      	mov	r1, r3
    36a8:	69f8      	ldr	r0, [r7, #28]
    36aa:	4b1d      	ldr	r3, [pc, #116]	; (3720 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x17c>)
    36ac:	4798      	blx	r3
    36ae:	e029      	b.n	3704 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x160>
    }
    else if(ODF_arg->subIndex == 2){   /* Transmission_type */
    36b0:	687b      	ldr	r3, [r7, #4]
    36b2:	7f1b      	ldrb	r3, [r3, #28]
    36b4:	2b02      	cmp	r3, #2
    36b6:	d125      	bne.n	3704 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x160>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    36b8:	687b      	ldr	r3, [r7, #4]
    36ba:	685b      	ldr	r3, [r3, #4]
    36bc:	613b      	str	r3, [r7, #16]
        bool_t synchronousPrev = RPDO->synchronous;
    36be:	69fb      	ldr	r3, [r7, #28]
    36c0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
    36c4:	73fb      	strb	r3, [r7, #15]

        /* values from 241...253 are not valid */
        if(*value >= 241 && *value <= 253)
    36c6:	693b      	ldr	r3, [r7, #16]
    36c8:	781b      	ldrb	r3, [r3, #0]
    36ca:	2bf0      	cmp	r3, #240	; 0xf0
    36cc:	dd05      	ble.n	36da <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x136>
    36ce:	693b      	ldr	r3, [r7, #16]
    36d0:	781b      	ldrb	r3, [r3, #0]
    36d2:	2bfd      	cmp	r3, #253	; 0xfd
    36d4:	dc01      	bgt.n	36da <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x136>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    36d6:	4b11      	ldr	r3, [pc, #68]	; (371c <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x178>)
    36d8:	e015      	b.n	3706 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>

        RPDO->synchronous = (*value <= 240) ? true : false;
    36da:	693b      	ldr	r3, [r7, #16]
    36dc:	781b      	ldrb	r3, [r3, #0]
    36de:	2bf0      	cmp	r3, #240	; 0xf0
    36e0:	bfd4      	ite	le
    36e2:	2301      	movle	r3, #1
    36e4:	2300      	movgt	r3, #0
    36e6:	b2db      	uxtb	r3, r3
    36e8:	461a      	mov	r2, r3
    36ea:	69fb      	ldr	r3, [r7, #28]
    36ec:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

        /* Remove old message from second buffer. */
        if(RPDO->synchronous != synchronousPrev) {
    36f0:	69fb      	ldr	r3, [r7, #28]
    36f2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
    36f6:	7bfa      	ldrb	r2, [r7, #15]
    36f8:	429a      	cmp	r2, r3
    36fa:	d003      	beq.n	3704 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x160>
            RPDO->CANrxNew[1] = false;
    36fc:	69fb      	ldr	r3, [r7, #28]
    36fe:	2200      	movs	r2, #0
    3700:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        }
    }

    return CO_SDO_AB_NONE;
    3704:	2300      	movs	r3, #0
}
    3706:	4618      	mov	r0, r3
    3708:	3720      	adds	r7, #32
    370a:	46bd      	mov	sp, r7
    370c:	bd80      	pop	{r7, pc}
    370e:	bf00      	nop
    3710:	06010002 	.word	0x06010002
    3714:	08000022 	.word	0x08000022
    3718:	3fff8000 	.word	0x3fff8000
    371c:	06090030 	.word	0x06090030
    3720:	00003099 	.word	0x00003099

00003724 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t>:
/*
 * Function for accessing _TPDO communication parameter_ (index 0x1800+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_TPDOcom(CO_ODF_arg_t *ODF_arg){
    3724:	b580      	push	{r7, lr}
    3726:	b088      	sub	sp, #32
    3728:	af00      	add	r7, sp, #0
    372a:	6078      	str	r0, [r7, #4]
    CO_TPDO_t *TPDO;

    TPDO = (CO_TPDO_t*) ODF_arg->object;
    372c:	687b      	ldr	r3, [r7, #4]
    372e:	681b      	ldr	r3, [r3, #0]
    3730:	61fb      	str	r3, [r7, #28]

    if(ODF_arg->subIndex == 4) return CO_SDO_AB_SUB_UNKNOWN;  /* Sub-index does not exist. */
    3732:	687b      	ldr	r3, [r7, #4]
    3734:	7f1b      	ldrb	r3, [r3, #28]
    3736:	2b04      	cmp	r3, #4
    3738:	d101      	bne.n	373e <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1a>
    373a:	4b6d      	ldr	r3, [pc, #436]	; (38f0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1cc>)
    373c:	e0d4      	b.n	38e8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
    373e:	687b      	ldr	r3, [r7, #4]
    3740:	7f5b      	ldrb	r3, [r3, #29]
    3742:	2b00      	cmp	r3, #0
    3744:	d024      	beq.n	3790 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x6c>
        if(ODF_arg->subIndex == 1){   /* COB_ID */
    3746:	687b      	ldr	r3, [r7, #4]
    3748:	7f1b      	ldrb	r3, [r3, #28]
    374a:	2b01      	cmp	r3, #1
    374c:	d11e      	bne.n	378c <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x68>
            uint32_t *value = (uint32_t*) ODF_arg->data;
    374e:	687b      	ldr	r3, [r7, #4]
    3750:	685b      	ldr	r3, [r3, #4]
    3752:	61bb      	str	r3, [r7, #24]

            /* if default COB ID is used, write default value here */
            if(((*value)&0xFFFF) == TPDO->defaultCOB_ID && TPDO->defaultCOB_ID)
    3754:	69bb      	ldr	r3, [r7, #24]
    3756:	681b      	ldr	r3, [r3, #0]
    3758:	b29a      	uxth	r2, r3
    375a:	69fb      	ldr	r3, [r7, #28]
    375c:	699b      	ldr	r3, [r3, #24]
    375e:	429a      	cmp	r2, r3
    3760:	d10a      	bne.n	3778 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x54>
    3762:	69fb      	ldr	r3, [r7, #28]
    3764:	699b      	ldr	r3, [r3, #24]
    3766:	2b00      	cmp	r3, #0
    3768:	d006      	beq.n	3778 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x54>
                *value += TPDO->nodeId;
    376a:	69bb      	ldr	r3, [r7, #24]
    376c:	681b      	ldr	r3, [r3, #0]
    376e:	69fa      	ldr	r2, [r7, #28]
    3770:	7d12      	ldrb	r2, [r2, #20]
    3772:	441a      	add	r2, r3
    3774:	69bb      	ldr	r3, [r7, #24]
    3776:	601a      	str	r2, [r3, #0]

            /* If PDO is not valid, set bit 31 */
            if(!TPDO->valid) *value |= 0x80000000L;
    3778:	69fb      	ldr	r3, [r7, #28]
    377a:	7f5b      	ldrb	r3, [r3, #29]
    377c:	2b00      	cmp	r3, #0
    377e:	d105      	bne.n	378c <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x68>
    3780:	69bb      	ldr	r3, [r7, #24]
    3782:	681b      	ldr	r3, [r3, #0]
    3784:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    3788:	69bb      	ldr	r3, [r7, #24]
    378a:	601a      	str	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
    378c:	2300      	movs	r3, #0
    378e:	e0ab      	b.n	38e8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>
    }

    /* Writing Object Dictionary variable */
    if(TPDO->restrictionFlags & 0x04)
    3790:	69fb      	ldr	r3, [r7, #28]
    3792:	7f1b      	ldrb	r3, [r3, #28]
    3794:	f003 0304 	and.w	r3, r3, #4
    3798:	2b00      	cmp	r3, #0
    379a:	d001      	beq.n	37a0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x7c>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
    379c:	4b55      	ldr	r3, [pc, #340]	; (38f4 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1d0>)
    379e:	e0a3      	b.n	38e8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>
    if(*TPDO->operatingState == CO_NMT_OPERATIONAL && (TPDO->restrictionFlags & 0x01))
    37a0:	69fb      	ldr	r3, [r7, #28]
    37a2:	691b      	ldr	r3, [r3, #16]
    37a4:	781b      	ldrb	r3, [r3, #0]
    37a6:	2b05      	cmp	r3, #5
    37a8:	d107      	bne.n	37ba <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x96>
    37aa:	69fb      	ldr	r3, [r7, #28]
    37ac:	7f1b      	ldrb	r3, [r3, #28]
    37ae:	f003 0301 	and.w	r3, r3, #1
    37b2:	2b00      	cmp	r3, #0
    37b4:	d001      	beq.n	37ba <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x96>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
    37b6:	4b50      	ldr	r3, [pc, #320]	; (38f8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1d4>)
    37b8:	e096      	b.n	38e8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

    if(ODF_arg->subIndex == 1){   /* COB_ID */
    37ba:	687b      	ldr	r3, [r7, #4]
    37bc:	7f1b      	ldrb	r3, [r3, #28]
    37be:	2b01      	cmp	r3, #1
    37c0:	d140      	bne.n	3844 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x120>
        uint32_t *value = (uint32_t*) ODF_arg->data;
    37c2:	687b      	ldr	r3, [r7, #4]
    37c4:	685b      	ldr	r3, [r3, #4]
    37c6:	617b      	str	r3, [r7, #20]

        /* bits 11...29 must be zero */
        if(*value & 0x3FFF8000L)
    37c8:	697b      	ldr	r3, [r7, #20]
    37ca:	681a      	ldr	r2, [r3, #0]
    37cc:	4b4b      	ldr	r3, [pc, #300]	; (38fc <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1d8>)
    37ce:	4013      	ands	r3, r2
    37d0:	2b00      	cmp	r3, #0
    37d2:	d001      	beq.n	37d8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0xb4>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    37d4:	4b4a      	ldr	r3, [pc, #296]	; (3900 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
    37d6:	e087      	b.n	38e8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

        /* if default COB-ID is being written, write defaultCOB_ID without nodeId */
        if(((*value)&0xFFFF) == (TPDO->defaultCOB_ID + TPDO->nodeId)){
    37d8:	697b      	ldr	r3, [r7, #20]
    37da:	681b      	ldr	r3, [r3, #0]
    37dc:	b29a      	uxth	r2, r3
    37de:	69fb      	ldr	r3, [r7, #28]
    37e0:	699b      	ldr	r3, [r3, #24]
    37e2:	69f9      	ldr	r1, [r7, #28]
    37e4:	7d09      	ldrb	r1, [r1, #20]
    37e6:	440b      	add	r3, r1
    37e8:	429a      	cmp	r2, r3
    37ea:	d10c      	bne.n	3806 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0xe2>
            *value &= 0xC0000000L;
    37ec:	697b      	ldr	r3, [r7, #20]
    37ee:	681b      	ldr	r3, [r3, #0]
    37f0:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
    37f4:	697b      	ldr	r3, [r7, #20]
    37f6:	601a      	str	r2, [r3, #0]
            *value += TPDO->defaultCOB_ID;
    37f8:	697b      	ldr	r3, [r7, #20]
    37fa:	681a      	ldr	r2, [r3, #0]
    37fc:	69fb      	ldr	r3, [r7, #28]
    37fe:	699b      	ldr	r3, [r3, #24]
    3800:	441a      	add	r2, r3
    3802:	697b      	ldr	r3, [r7, #20]
    3804:	601a      	str	r2, [r3, #0]
        }

        /* if PDO is valid, bits 0..29 can not be changed */
        if(TPDO->valid && ((*value ^ TPDO->TPDOCommPar->COB_IDUsedByTPDO) & 0x3FFFFFFFL))
    3806:	69fb      	ldr	r3, [r7, #28]
    3808:	7f5b      	ldrb	r3, [r3, #29]
    380a:	2b00      	cmp	r3, #0
    380c:	d00b      	beq.n	3826 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x102>
    380e:	697b      	ldr	r3, [r7, #20]
    3810:	681a      	ldr	r2, [r3, #0]
    3812:	69fb      	ldr	r3, [r7, #28]
    3814:	689b      	ldr	r3, [r3, #8]
    3816:	685b      	ldr	r3, [r3, #4]
    3818:	4053      	eors	r3, r2
    381a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    381e:	2b00      	cmp	r3, #0
    3820:	d001      	beq.n	3826 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x102>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    3822:	4b37      	ldr	r3, [pc, #220]	; (3900 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
    3824:	e060      	b.n	38e8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

        /* configure TPDO */
        CO_TPDOconfigCom(TPDO, *value, TPDO->CANtxBuff->syncFlag);
    3826:	697b      	ldr	r3, [r7, #20]
    3828:	6819      	ldr	r1, [r3, #0]
    382a:	69fb      	ldr	r3, [r7, #28]
    382c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    382e:	7b9b      	ldrb	r3, [r3, #14]
    3830:	b2db      	uxtb	r3, r3
    3832:	461a      	mov	r2, r3
    3834:	69f8      	ldr	r0, [r7, #28]
    3836:	4b33      	ldr	r3, [pc, #204]	; (3904 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1e0>)
    3838:	4798      	blx	r3
        TPDO->syncCounter = 255;
    383a:	69fb      	ldr	r3, [r7, #28]
    383c:	22ff      	movs	r2, #255	; 0xff
    383e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    3842:	e050      	b.n	38e6 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
    }
    else if(ODF_arg->subIndex == 2){   /* Transmission_type */
    3844:	687b      	ldr	r3, [r7, #4]
    3846:	7f1b      	ldrb	r3, [r3, #28]
    3848:	2b02      	cmp	r3, #2
    384a:	d11b      	bne.n	3884 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x160>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    384c:	687b      	ldr	r3, [r7, #4]
    384e:	685b      	ldr	r3, [r3, #4]
    3850:	613b      	str	r3, [r7, #16]

        /* values from 241...253 are not valid */
        if(*value >= 241 && *value <= 253)
    3852:	693b      	ldr	r3, [r7, #16]
    3854:	781b      	ldrb	r3, [r3, #0]
    3856:	2bf0      	cmp	r3, #240	; 0xf0
    3858:	dd05      	ble.n	3866 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x142>
    385a:	693b      	ldr	r3, [r7, #16]
    385c:	781b      	ldrb	r3, [r3, #0]
    385e:	2bfd      	cmp	r3, #253	; 0xfd
    3860:	dc01      	bgt.n	3866 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x142>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    3862:	4b27      	ldr	r3, [pc, #156]	; (3900 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
    3864:	e040      	b.n	38e8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>
        TPDO->CANtxBuff->syncFlag = (*value <= 240) ? 1 : 0;
    3866:	69fb      	ldr	r3, [r7, #28]
    3868:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    386a:	693a      	ldr	r2, [r7, #16]
    386c:	7812      	ldrb	r2, [r2, #0]
    386e:	2af0      	cmp	r2, #240	; 0xf0
    3870:	dc01      	bgt.n	3876 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x152>
    3872:	2201      	movs	r2, #1
    3874:	e000      	b.n	3878 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x154>
    3876:	2200      	movs	r2, #0
    3878:	739a      	strb	r2, [r3, #14]
        TPDO->syncCounter = 255;
    387a:	69fb      	ldr	r3, [r7, #28]
    387c:	22ff      	movs	r2, #255	; 0xff
    387e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    3882:	e030      	b.n	38e6 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
    }
    else if(ODF_arg->subIndex == 3){   /* Inhibit_Time */
    3884:	687b      	ldr	r3, [r7, #4]
    3886:	7f1b      	ldrb	r3, [r3, #28]
    3888:	2b03      	cmp	r3, #3
    388a:	d109      	bne.n	38a0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x17c>
        /* if PDO is valid, value can not be changed */
        if(TPDO->valid)
    388c:	69fb      	ldr	r3, [r7, #28]
    388e:	7f5b      	ldrb	r3, [r3, #29]
    3890:	2b00      	cmp	r3, #0
    3892:	d001      	beq.n	3898 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x174>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    3894:	4b1a      	ldr	r3, [pc, #104]	; (3900 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
    3896:	e027      	b.n	38e8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

        TPDO->inhibitTimer = 0;
    3898:	69fb      	ldr	r3, [r7, #28]
    389a:	2200      	movs	r2, #0
    389c:	645a      	str	r2, [r3, #68]	; 0x44
    389e:	e022      	b.n	38e6 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
    }
    else if(ODF_arg->subIndex == 5){   /* Event_Timer */
    38a0:	687b      	ldr	r3, [r7, #4]
    38a2:	7f1b      	ldrb	r3, [r3, #28]
    38a4:	2b05      	cmp	r3, #5
    38a6:	d10b      	bne.n	38c0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x19c>
        uint32_t *value = (uint32_t*) ODF_arg->data;
    38a8:	687b      	ldr	r3, [r7, #4]
    38aa:	685b      	ldr	r3, [r3, #4]
    38ac:	60bb      	str	r3, [r7, #8]

        TPDO->eventTimer = ((uint32_t) *value) * 1000;
    38ae:	68bb      	ldr	r3, [r7, #8]
    38b0:	681b      	ldr	r3, [r3, #0]
    38b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    38b6:	fb02 f203 	mul.w	r2, r2, r3
    38ba:	69fb      	ldr	r3, [r7, #28]
    38bc:	649a      	str	r2, [r3, #72]	; 0x48
    38be:	e012      	b.n	38e6 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
    }
    else if(ODF_arg->subIndex == 6){   /* SYNC start value */
    38c0:	687b      	ldr	r3, [r7, #4]
    38c2:	7f1b      	ldrb	r3, [r3, #28]
    38c4:	2b06      	cmp	r3, #6
    38c6:	d10e      	bne.n	38e6 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    38c8:	687b      	ldr	r3, [r7, #4]
    38ca:	685b      	ldr	r3, [r3, #4]
    38cc:	60fb      	str	r3, [r7, #12]

        /* if PDO is valid, value can not be changed */
        if(TPDO->valid)
    38ce:	69fb      	ldr	r3, [r7, #28]
    38d0:	7f5b      	ldrb	r3, [r3, #29]
    38d2:	2b00      	cmp	r3, #0
    38d4:	d001      	beq.n	38da <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1b6>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    38d6:	4b0a      	ldr	r3, [pc, #40]	; (3900 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
    38d8:	e006      	b.n	38e8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

        /* values from 240...255 are not valid */
        if(*value > 240)
    38da:	68fb      	ldr	r3, [r7, #12]
    38dc:	781b      	ldrb	r3, [r3, #0]
    38de:	2bf0      	cmp	r3, #240	; 0xf0
    38e0:	dd01      	ble.n	38e6 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    38e2:	4b07      	ldr	r3, [pc, #28]	; (3900 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
    38e4:	e000      	b.n	38e8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>
    }

    return CO_SDO_AB_NONE;
    38e6:	2300      	movs	r3, #0
}
    38e8:	4618      	mov	r0, r3
    38ea:	3720      	adds	r7, #32
    38ec:	46bd      	mov	sp, r7
    38ee:	bd80      	pop	{r7, pc}
    38f0:	06090011 	.word	0x06090011
    38f4:	06010002 	.word	0x06010002
    38f8:	08000022 	.word	0x08000022
    38fc:	3fff8000 	.word	0x3fff8000
    3900:	06090030 	.word	0x06090030
    3904:	00003171 	.word	0x00003171

00003908 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t>:
/*
 * Function for accessing _RPDO mapping parameter_ (index 0x1600+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_RPDOmap(CO_ODF_arg_t *ODF_arg){
    3908:	b590      	push	{r4, r7, lr}
    390a:	b08d      	sub	sp, #52	; 0x34
    390c:	af04      	add	r7, sp, #16
    390e:	6078      	str	r0, [r7, #4]
    CO_RPDO_t *RPDO;

    RPDO = (CO_RPDO_t*) ODF_arg->object;
    3910:	687b      	ldr	r3, [r7, #4]
    3912:	681b      	ldr	r3, [r3, #0]
    3914:	61fb      	str	r3, [r7, #28]

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
    3916:	687b      	ldr	r3, [r7, #4]
    3918:	7f5b      	ldrb	r3, [r3, #29]
    391a:	2b00      	cmp	r3, #0
    391c:	d010      	beq.n	3940 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x38>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    391e:	687b      	ldr	r3, [r7, #4]
    3920:	685b      	ldr	r3, [r3, #4]
    3922:	61bb      	str	r3, [r7, #24]

        if(ODF_arg->subIndex == 0){
    3924:	687b      	ldr	r3, [r7, #4]
    3926:	7f1b      	ldrb	r3, [r3, #28]
    3928:	2b00      	cmp	r3, #0
    392a:	d107      	bne.n	393c <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x34>
            /* If there is error in mapping, dataLength is 0, so numberOfMappedObjects is 0. */
            if(!RPDO->dataLength) *value = 0;
    392c:	69fb      	ldr	r3, [r7, #28]
    392e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
    3932:	2b00      	cmp	r3, #0
    3934:	d102      	bne.n	393c <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x34>
    3936:	69bb      	ldr	r3, [r7, #24]
    3938:	2200      	movs	r2, #0
    393a:	701a      	strb	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
    393c:	2300      	movs	r3, #0
    393e:	e054      	b.n	39ea <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>
    }

    /* Writing Object Dictionary variable */
    if(RPDO->restrictionFlags & 0x08)
    3940:	69fb      	ldr	r3, [r7, #28]
    3942:	f893 3020 	ldrb.w	r3, [r3, #32]
    3946:	f003 0308 	and.w	r3, r3, #8
    394a:	2b00      	cmp	r3, #0
    394c:	d001      	beq.n	3952 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x4a>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
    394e:	4b29      	ldr	r3, [pc, #164]	; (39f4 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xec>)
    3950:	e04b      	b.n	39ea <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>
    if(*RPDO->operatingState == CO_NMT_OPERATIONAL && (RPDO->restrictionFlags & 0x02))
    3952:	69fb      	ldr	r3, [r7, #28]
    3954:	695b      	ldr	r3, [r3, #20]
    3956:	781b      	ldrb	r3, [r3, #0]
    3958:	2b05      	cmp	r3, #5
    395a:	d108      	bne.n	396e <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x66>
    395c:	69fb      	ldr	r3, [r7, #28]
    395e:	f893 3020 	ldrb.w	r3, [r3, #32]
    3962:	f003 0302 	and.w	r3, r3, #2
    3966:	2b00      	cmp	r3, #0
    3968:	d001      	beq.n	396e <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x66>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
    396a:	4b23      	ldr	r3, [pc, #140]	; (39f8 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xf0>)
    396c:	e03d      	b.n	39ea <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>
    if(RPDO->valid)
    396e:	69fb      	ldr	r3, [r7, #28]
    3970:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
    3974:	2b00      	cmp	r3, #0
    3976:	d001      	beq.n	397c <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x74>
        return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
    3978:	4b20      	ldr	r3, [pc, #128]	; (39fc <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xf4>)
    397a:	e036      	b.n	39ea <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>

    /* numberOfMappedObjects */
    if(ODF_arg->subIndex == 0){
    397c:	687b      	ldr	r3, [r7, #4]
    397e:	7f1b      	ldrb	r3, [r3, #28]
    3980:	2b00      	cmp	r3, #0
    3982:	d110      	bne.n	39a6 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x9e>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    3984:	687b      	ldr	r3, [r7, #4]
    3986:	685b      	ldr	r3, [r3, #4]
    3988:	617b      	str	r3, [r7, #20]

        if(*value > 8)
    398a:	697b      	ldr	r3, [r7, #20]
    398c:	781b      	ldrb	r3, [r3, #0]
    398e:	2b08      	cmp	r3, #8
    3990:	dd01      	ble.n	3996 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x8e>
            return CO_SDO_AB_MAP_LEN;  /* Number and length of object to be mapped exceeds PDO length. */
    3992:	4b1b      	ldr	r3, [pc, #108]	; (3a00 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xf8>)
    3994:	e029      	b.n	39ea <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>

        /* configure mapping */
        return (CO_SDO_abortCode_t)CO_RPDOconfigMap(RPDO, *value);
    3996:	697b      	ldr	r3, [r7, #20]
    3998:	781b      	ldrb	r3, [r3, #0]
    399a:	4619      	mov	r1, r3
    399c:	69f8      	ldr	r0, [r7, #28]
    399e:	4b19      	ldr	r3, [pc, #100]	; (3a04 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xfc>)
    39a0:	4798      	blx	r3
    39a2:	4603      	mov	r3, r0
    39a4:	e021      	b.n	39ea <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>
    }

    /* mappedObject */
    else{
        uint32_t *value = (uint32_t*) ODF_arg->data;
    39a6:	687b      	ldr	r3, [r7, #4]
    39a8:	685b      	ldr	r3, [r3, #4]
    39aa:	613b      	str	r3, [r7, #16]
        uint8_t* pData;
        uint8_t length = 0;
    39ac:	2300      	movs	r3, #0
    39ae:	72fb      	strb	r3, [r7, #11]
        uint8_t dummy = 0;
    39b0:	2300      	movs	r3, #0
    39b2:	72bb      	strb	r3, [r7, #10]
        uint8_t MBvar;

        if(RPDO->dataLength)
    39b4:	69fb      	ldr	r3, [r7, #28]
    39b6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
    39ba:	2b00      	cmp	r3, #0
    39bc:	d001      	beq.n	39c2 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xba>
            return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
    39be:	4b0f      	ldr	r3, [pc, #60]	; (39fc <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xf4>)
    39c0:	e013      	b.n	39ea <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>

        /* verify if mapping is correct */
        return  (CO_SDO_abortCode_t)CO_PDOfindMap(
    39c2:	69fb      	ldr	r3, [r7, #28]
    39c4:	6858      	ldr	r0, [r3, #4]
    39c6:	693b      	ldr	r3, [r7, #16]
    39c8:	6819      	ldr	r1, [r3, #0]
               *value,
                0,
               &pData,
               &length,
               &dummy,
               &MBvar);
    39ca:	f107 020c 	add.w	r2, r7, #12
    39ce:	f107 0309 	add.w	r3, r7, #9
    39d2:	9302      	str	r3, [sp, #8]
    39d4:	f107 030a 	add.w	r3, r7, #10
    39d8:	9301      	str	r3, [sp, #4]
    39da:	f107 030b 	add.w	r3, r7, #11
    39de:	9300      	str	r3, [sp, #0]
    39e0:	4613      	mov	r3, r2
    39e2:	2200      	movs	r2, #0
    39e4:	4c08      	ldr	r4, [pc, #32]	; (3a08 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x100>)
    39e6:	47a0      	blx	r4
    39e8:	4603      	mov	r3, r0
    }

    return CO_SDO_AB_NONE;
}
    39ea:	4618      	mov	r0, r3
    39ec:	3724      	adds	r7, #36	; 0x24
    39ee:	46bd      	mov	sp, r7
    39f0:	bd90      	pop	{r4, r7, pc}
    39f2:	bf00      	nop
    39f4:	06010002 	.word	0x06010002
    39f8:	08000022 	.word	0x08000022
    39fc:	06010000 	.word	0x06010000
    3a00:	06040042 	.word	0x06040042
    3a04:	00003405 	.word	0x00003405
    3a08:	00003205 	.word	0x00003205

00003a0c <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t>:
/*
 * Function for accessing _TPDO mapping parameter_ (index 0x1A00+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_TPDOmap(CO_ODF_arg_t *ODF_arg){
    3a0c:	b590      	push	{r4, r7, lr}
    3a0e:	b08d      	sub	sp, #52	; 0x34
    3a10:	af04      	add	r7, sp, #16
    3a12:	6078      	str	r0, [r7, #4]
    CO_TPDO_t *TPDO;

    TPDO = (CO_TPDO_t*) ODF_arg->object;
    3a14:	687b      	ldr	r3, [r7, #4]
    3a16:	681b      	ldr	r3, [r3, #0]
    3a18:	61fb      	str	r3, [r7, #28]

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
    3a1a:	687b      	ldr	r3, [r7, #4]
    3a1c:	7f5b      	ldrb	r3, [r3, #29]
    3a1e:	2b00      	cmp	r3, #0
    3a20:	d00f      	beq.n	3a42 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x36>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    3a22:	687b      	ldr	r3, [r7, #4]
    3a24:	685b      	ldr	r3, [r3, #4]
    3a26:	61bb      	str	r3, [r7, #24]

        if(ODF_arg->subIndex == 0){
    3a28:	687b      	ldr	r3, [r7, #4]
    3a2a:	7f1b      	ldrb	r3, [r3, #28]
    3a2c:	2b00      	cmp	r3, #0
    3a2e:	d106      	bne.n	3a3e <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x32>
            /* If there is error in mapping, dataLength is 0, so numberOfMappedObjects is 0. */
            if(!TPDO->dataLength) *value = 0;
    3a30:	69fb      	ldr	r3, [r7, #28]
    3a32:	7f9b      	ldrb	r3, [r3, #30]
    3a34:	2b00      	cmp	r3, #0
    3a36:	d102      	bne.n	3a3e <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x32>
    3a38:	69bb      	ldr	r3, [r7, #24]
    3a3a:	2200      	movs	r2, #0
    3a3c:	701a      	strb	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
    3a3e:	2300      	movs	r3, #0
    3a40:	e050      	b.n	3ae4 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>
    }

    /* Writing Object Dictionary variable */
    if(TPDO->restrictionFlags & 0x08)
    3a42:	69fb      	ldr	r3, [r7, #28]
    3a44:	7f1b      	ldrb	r3, [r3, #28]
    3a46:	f003 0308 	and.w	r3, r3, #8
    3a4a:	2b00      	cmp	r3, #0
    3a4c:	d001      	beq.n	3a52 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x46>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
    3a4e:	4b27      	ldr	r3, [pc, #156]	; (3aec <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xe0>)
    3a50:	e048      	b.n	3ae4 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>
    if(*TPDO->operatingState == CO_NMT_OPERATIONAL && (TPDO->restrictionFlags & 0x02))
    3a52:	69fb      	ldr	r3, [r7, #28]
    3a54:	691b      	ldr	r3, [r3, #16]
    3a56:	781b      	ldrb	r3, [r3, #0]
    3a58:	2b05      	cmp	r3, #5
    3a5a:	d107      	bne.n	3a6c <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x60>
    3a5c:	69fb      	ldr	r3, [r7, #28]
    3a5e:	7f1b      	ldrb	r3, [r3, #28]
    3a60:	f003 0302 	and.w	r3, r3, #2
    3a64:	2b00      	cmp	r3, #0
    3a66:	d001      	beq.n	3a6c <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x60>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
    3a68:	4b21      	ldr	r3, [pc, #132]	; (3af0 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xe4>)
    3a6a:	e03b      	b.n	3ae4 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>
    if(TPDO->valid)
    3a6c:	69fb      	ldr	r3, [r7, #28]
    3a6e:	7f5b      	ldrb	r3, [r3, #29]
    3a70:	2b00      	cmp	r3, #0
    3a72:	d001      	beq.n	3a78 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x6c>
        return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
    3a74:	4b1f      	ldr	r3, [pc, #124]	; (3af4 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xe8>)
    3a76:	e035      	b.n	3ae4 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>

    /* numberOfMappedObjects */
    if(ODF_arg->subIndex == 0){
    3a78:	687b      	ldr	r3, [r7, #4]
    3a7a:	7f1b      	ldrb	r3, [r3, #28]
    3a7c:	2b00      	cmp	r3, #0
    3a7e:	d110      	bne.n	3aa2 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x96>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    3a80:	687b      	ldr	r3, [r7, #4]
    3a82:	685b      	ldr	r3, [r3, #4]
    3a84:	617b      	str	r3, [r7, #20]

        if(*value > 8)
    3a86:	697b      	ldr	r3, [r7, #20]
    3a88:	781b      	ldrb	r3, [r3, #0]
    3a8a:	2b08      	cmp	r3, #8
    3a8c:	dd01      	ble.n	3a92 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x86>
            return CO_SDO_AB_MAP_LEN;  /* Number and length of object to be mapped exceeds PDO length. */
    3a8e:	4b1a      	ldr	r3, [pc, #104]	; (3af8 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xec>)
    3a90:	e028      	b.n	3ae4 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>

        /* configure mapping */
        return (CO_SDO_abortCode_t)CO_TPDOconfigMap(TPDO, *value);
    3a92:	697b      	ldr	r3, [r7, #20]
    3a94:	781b      	ldrb	r3, [r3, #0]
    3a96:	4619      	mov	r1, r3
    3a98:	69f8      	ldr	r0, [r7, #28]
    3a9a:	4b18      	ldr	r3, [pc, #96]	; (3afc <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xf0>)
    3a9c:	4798      	blx	r3
    3a9e:	4603      	mov	r3, r0
    3aa0:	e020      	b.n	3ae4 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>
    }

    /* mappedObject */
    else{
        uint32_t *value = (uint32_t*) ODF_arg->data;
    3aa2:	687b      	ldr	r3, [r7, #4]
    3aa4:	685b      	ldr	r3, [r3, #4]
    3aa6:	613b      	str	r3, [r7, #16]
        uint8_t* pData;
        uint8_t length = 0;
    3aa8:	2300      	movs	r3, #0
    3aaa:	72fb      	strb	r3, [r7, #11]
        uint8_t dummy = 0;
    3aac:	2300      	movs	r3, #0
    3aae:	72bb      	strb	r3, [r7, #10]
        uint8_t MBvar;

        if(TPDO->dataLength)
    3ab0:	69fb      	ldr	r3, [r7, #28]
    3ab2:	7f9b      	ldrb	r3, [r3, #30]
    3ab4:	2b00      	cmp	r3, #0
    3ab6:	d001      	beq.n	3abc <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xb0>
            return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
    3ab8:	4b0e      	ldr	r3, [pc, #56]	; (3af4 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xe8>)
    3aba:	e013      	b.n	3ae4 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>

        /* verify if mapping is correct */
        return (CO_SDO_abortCode_t)CO_PDOfindMap(
    3abc:	69fb      	ldr	r3, [r7, #28]
    3abe:	6858      	ldr	r0, [r3, #4]
    3ac0:	693b      	ldr	r3, [r7, #16]
    3ac2:	6819      	ldr	r1, [r3, #0]
               *value,
                1,
               &pData,
               &length,
               &dummy,
               &MBvar);
    3ac4:	f107 020c 	add.w	r2, r7, #12
    3ac8:	f107 0309 	add.w	r3, r7, #9
    3acc:	9302      	str	r3, [sp, #8]
    3ace:	f107 030a 	add.w	r3, r7, #10
    3ad2:	9301      	str	r3, [sp, #4]
    3ad4:	f107 030b 	add.w	r3, r7, #11
    3ad8:	9300      	str	r3, [sp, #0]
    3ada:	4613      	mov	r3, r2
    3adc:	2201      	movs	r2, #1
    3ade:	4c08      	ldr	r4, [pc, #32]	; (3b00 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xf4>)
    3ae0:	47a0      	blx	r4
    3ae2:	4603      	mov	r3, r0
    }

    return CO_SDO_AB_NONE;
}
    3ae4:	4618      	mov	r0, r3
    3ae6:	3724      	adds	r7, #36	; 0x24
    3ae8:	46bd      	mov	sp, r7
    3aea:	bd90      	pop	{r4, r7, pc}
    3aec:	06010002 	.word	0x06010002
    3af0:	08000022 	.word	0x08000022
    3af4:	06010000 	.word	0x06010000
    3af8:	06040042 	.word	0x06040042
    3afc:	000034d5 	.word	0x000034d5
    3b00:	00003205 	.word	0x00003205

00003b04 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm>:
        const CO_RPDOMapPar_t  *RPDOMapPar,
        uint32_t                idx_RPDOCommPar,
        uint32_t                idx_RPDOMapPar,
        CO_CANmodule_t         *CANdevRx,
        uint32_t                CANdevRxIdx)
{
    3b04:	b590      	push	{r4, r7, lr}
    3b06:	b087      	sub	sp, #28
    3b08:	af02      	add	r7, sp, #8
    3b0a:	60f8      	str	r0, [r7, #12]
    3b0c:	60b9      	str	r1, [r7, #8]
    3b0e:	607a      	str	r2, [r7, #4]
    3b10:	603b      	str	r3, [r7, #0]
    /* verify arguments */
    if(RPDO==NULL || em==NULL || SDO==NULL || SYNC==NULL || operatingState==NULL ||
    3b12:	68bb      	ldr	r3, [r7, #8]
    3b14:	2b00      	cmp	r3, #0
    3b16:	d014      	beq.n	3b42 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
    3b18:	687b      	ldr	r3, [r7, #4]
    3b1a:	2b00      	cmp	r3, #0
    3b1c:	d011      	beq.n	3b42 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
    3b1e:	683b      	ldr	r3, [r7, #0]
    3b20:	2b00      	cmp	r3, #0
    3b22:	d00e      	beq.n	3b42 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
    3b24:	6a3b      	ldr	r3, [r7, #32]
    3b26:	2b00      	cmp	r3, #0
    3b28:	d00b      	beq.n	3b42 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
    3b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3b2c:	2b00      	cmp	r3, #0
    3b2e:	d008      	beq.n	3b42 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
    3b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3b32:	2b00      	cmp	r3, #0
    3b34:	d005      	beq.n	3b42 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
        RPDOCommPar==NULL || RPDOMapPar==NULL || CANdevRx==NULL){
    3b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3b38:	2b00      	cmp	r3, #0
    3b3a:	d002      	beq.n	3b42 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
    3b3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3b3e:	2b00      	cmp	r3, #0
    3b40:	d102      	bne.n	3b48 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x44>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    3b42:	f04f 33ff 	mov.w	r3, #4294967295
    3b46:	e050      	b.n	3bea <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xe6>
    }

    /* Configure object variables */
    RPDO->em = em;
    3b48:	68bb      	ldr	r3, [r7, #8]
    3b4a:	687a      	ldr	r2, [r7, #4]
    3b4c:	601a      	str	r2, [r3, #0]
    RPDO->SDO = SDO;
    3b4e:	68bb      	ldr	r3, [r7, #8]
    3b50:	683a      	ldr	r2, [r7, #0]
    3b52:	605a      	str	r2, [r3, #4]
    RPDO->SYNC = SYNC;
    3b54:	68bb      	ldr	r3, [r7, #8]
    3b56:	6a3a      	ldr	r2, [r7, #32]
    3b58:	609a      	str	r2, [r3, #8]
    RPDO->RPDOCommPar = RPDOCommPar;
    3b5a:	68bb      	ldr	r3, [r7, #8]
    3b5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3b5e:	60da      	str	r2, [r3, #12]
    RPDO->RPDOMapPar = RPDOMapPar;
    3b60:	68bb      	ldr	r3, [r7, #8]
    3b62:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3b64:	611a      	str	r2, [r3, #16]
    RPDO->operatingState = operatingState;
    3b66:	68bb      	ldr	r3, [r7, #8]
    3b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3b6a:	615a      	str	r2, [r3, #20]
    RPDO->nodeId = nodeId;
    3b6c:	68bb      	ldr	r3, [r7, #8]
    3b6e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
    3b72:	761a      	strb	r2, [r3, #24]
    RPDO->defaultCOB_ID = defaultCOB_ID;
    3b74:	68bb      	ldr	r3, [r7, #8]
    3b76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3b78:	61da      	str	r2, [r3, #28]
    RPDO->restrictionFlags = restrictionFlags;
    3b7a:	68bb      	ldr	r3, [r7, #8]
    3b7c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
    3b80:	f883 2020 	strb.w	r2, [r3, #32]

    /* Configure Object dictionary entry at index 0x1400+ and 0x1600+ */
    ptrCODriverClass->CO_OD_configure( idx_RPDOCommPar, CO_ODF_RPDOcom, (void*)RPDO, 0, 0);
    3b84:	4b1b      	ldr	r3, [pc, #108]	; (3bf4 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf0>)
    3b86:	681b      	ldr	r3, [r3, #0]
    3b88:	1d18      	adds	r0, r3, #4
    3b8a:	2300      	movs	r3, #0
    3b8c:	9301      	str	r3, [sp, #4]
    3b8e:	2300      	movs	r3, #0
    3b90:	9300      	str	r3, [sp, #0]
    3b92:	68bb      	ldr	r3, [r7, #8]
    3b94:	4a18      	ldr	r2, [pc, #96]	; (3bf8 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf4>)
    3b96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3b98:	4c18      	ldr	r4, [pc, #96]	; (3bfc <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf8>)
    3b9a:	47a0      	blx	r4
    ptrCODriverClass->CO_OD_configure( idx_RPDOMapPar, CO_ODF_RPDOmap, (void*)RPDO, 0, 0);
    3b9c:	4b15      	ldr	r3, [pc, #84]	; (3bf4 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf0>)
    3b9e:	681b      	ldr	r3, [r3, #0]
    3ba0:	1d18      	adds	r0, r3, #4
    3ba2:	2300      	movs	r3, #0
    3ba4:	9301      	str	r3, [sp, #4]
    3ba6:	2300      	movs	r3, #0
    3ba8:	9300      	str	r3, [sp, #0]
    3baa:	68bb      	ldr	r3, [r7, #8]
    3bac:	4a14      	ldr	r2, [pc, #80]	; (3c00 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xfc>)
    3bae:	6c39      	ldr	r1, [r7, #64]	; 0x40
    3bb0:	4c12      	ldr	r4, [pc, #72]	; (3bfc <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf8>)
    3bb2:	47a0      	blx	r4

    /* configure communication and mapping */
    RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
    3bb4:	68bb      	ldr	r3, [r7, #8]
    3bb6:	2200      	movs	r2, #0
    3bb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    3bbc:	68bb      	ldr	r3, [r7, #8]
    3bbe:	2200      	movs	r2, #0
    3bc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    RPDO->CANdevRx = CANdevRx;
    3bc4:	68bb      	ldr	r3, [r7, #8]
    3bc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3bc8:	659a      	str	r2, [r3, #88]	; 0x58
    RPDO->CANdevRxIdx = CANdevRxIdx;
    3bca:	68bb      	ldr	r3, [r7, #8]
    3bcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
    3bce:	65da      	str	r2, [r3, #92]	; 0x5c

    CO_RPDOconfigMap(RPDO, RPDOMapPar->numberOfMappedObjects);
    3bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3bd2:	781b      	ldrb	r3, [r3, #0]
    3bd4:	4619      	mov	r1, r3
    3bd6:	68b8      	ldr	r0, [r7, #8]
    3bd8:	4b0a      	ldr	r3, [pc, #40]	; (3c04 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x100>)
    3bda:	4798      	blx	r3
    CO_RPDOconfigCom(RPDO, RPDOCommPar->COB_IDUsedByRPDO);
    3bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3bde:	685b      	ldr	r3, [r3, #4]
    3be0:	4619      	mov	r1, r3
    3be2:	68b8      	ldr	r0, [r7, #8]
    3be4:	4b08      	ldr	r3, [pc, #32]	; (3c08 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x104>)
    3be6:	4798      	blx	r3

    return CO_ERROR_NO;
    3be8:	2300      	movs	r3, #0
}
    3bea:	4618      	mov	r0, r3
    3bec:	3714      	adds	r7, #20
    3bee:	46bd      	mov	sp, r7
    3bf0:	bd90      	pop	{r4, r7, pc}
    3bf2:	bf00      	nop
    3bf4:	20000960 	.word	0x20000960
    3bf8:	000035a5 	.word	0x000035a5
    3bfc:	00004719 	.word	0x00004719
    3c00:	00003909 	.word	0x00003909
    3c04:	00003405 	.word	0x00003405
    3c08:	00003099 	.word	0x00003099

00003c0c <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm>:
        const CO_TPDOMapPar_t  *TPDOMapPar,
        uint32_t                idx_TPDOCommPar,
        uint32_t                idx_TPDOMapPar,
        CO_CANmodule_t         *CANdevTx,
        uint32_t                CANdevTxIdx)
{
    3c0c:	b590      	push	{r4, r7, lr}
    3c0e:	b087      	sub	sp, #28
    3c10:	af02      	add	r7, sp, #8
    3c12:	60f8      	str	r0, [r7, #12]
    3c14:	60b9      	str	r1, [r7, #8]
    3c16:	607a      	str	r2, [r7, #4]
    3c18:	603b      	str	r3, [r7, #0]
    /* verify arguments */
    if(TPDO==NULL || em==NULL || SDO==NULL || operatingState==NULL ||
    3c1a:	68bb      	ldr	r3, [r7, #8]
    3c1c:	2b00      	cmp	r3, #0
    3c1e:	d011      	beq.n	3c44 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
    3c20:	687b      	ldr	r3, [r7, #4]
    3c22:	2b00      	cmp	r3, #0
    3c24:	d00e      	beq.n	3c44 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
    3c26:	683b      	ldr	r3, [r7, #0]
    3c28:	2b00      	cmp	r3, #0
    3c2a:	d00b      	beq.n	3c44 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
    3c2c:	6a3b      	ldr	r3, [r7, #32]
    3c2e:	2b00      	cmp	r3, #0
    3c30:	d008      	beq.n	3c44 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
    3c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3c34:	2b00      	cmp	r3, #0
    3c36:	d005      	beq.n	3c44 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
        TPDOCommPar==NULL || TPDOMapPar==NULL || CANdevTx==NULL){
    3c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3c3a:	2b00      	cmp	r3, #0
    3c3c:	d002      	beq.n	3c44 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
    3c3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3c40:	2b00      	cmp	r3, #0
    3c42:	d102      	bne.n	3c4a <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    3c44:	f04f 33ff 	mov.w	r3, #4294967295
    3c48:	e070      	b.n	3d2c <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x120>
    }

    /* Configure object variables */
    TPDO->em = em;
    3c4a:	68bb      	ldr	r3, [r7, #8]
    3c4c:	687a      	ldr	r2, [r7, #4]
    3c4e:	601a      	str	r2, [r3, #0]
    TPDO->SDO = SDO;
    3c50:	68bb      	ldr	r3, [r7, #8]
    3c52:	683a      	ldr	r2, [r7, #0]
    3c54:	605a      	str	r2, [r3, #4]
    TPDO->TPDOCommPar = TPDOCommPar;
    3c56:	68bb      	ldr	r3, [r7, #8]
    3c58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3c5a:	609a      	str	r2, [r3, #8]
    TPDO->TPDOMapPar = TPDOMapPar;
    3c5c:	68bb      	ldr	r3, [r7, #8]
    3c5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3c60:	60da      	str	r2, [r3, #12]
    TPDO->operatingState = operatingState;
    3c62:	68bb      	ldr	r3, [r7, #8]
    3c64:	6a3a      	ldr	r2, [r7, #32]
    3c66:	611a      	str	r2, [r3, #16]
    TPDO->nodeId = nodeId;
    3c68:	68bb      	ldr	r3, [r7, #8]
    3c6a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
    3c6e:	751a      	strb	r2, [r3, #20]
    TPDO->defaultCOB_ID = defaultCOB_ID;
    3c70:	68bb      	ldr	r3, [r7, #8]
    3c72:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3c74:	619a      	str	r2, [r3, #24]
    TPDO->restrictionFlags = restrictionFlags;
    3c76:	68bb      	ldr	r3, [r7, #8]
    3c78:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
    3c7c:	771a      	strb	r2, [r3, #28]

    /* Configure Object dictionary entry at index 0x1800+ and 0x1A00+ */
    ptrCODriverClass->CO_OD_configure( idx_TPDOCommPar, CO_ODF_TPDOcom, (void*)TPDO, 0, 0);
    3c7e:	4b2d      	ldr	r3, [pc, #180]	; (3d34 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x128>)
    3c80:	681b      	ldr	r3, [r3, #0]
    3c82:	1d18      	adds	r0, r3, #4
    3c84:	2300      	movs	r3, #0
    3c86:	9301      	str	r3, [sp, #4]
    3c88:	2300      	movs	r3, #0
    3c8a:	9300      	str	r3, [sp, #0]
    3c8c:	68bb      	ldr	r3, [r7, #8]
    3c8e:	4a2a      	ldr	r2, [pc, #168]	; (3d38 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x12c>)
    3c90:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    3c92:	4c2a      	ldr	r4, [pc, #168]	; (3d3c <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x130>)
    3c94:	47a0      	blx	r4
    ptrCODriverClass->CO_OD_configure( idx_TPDOMapPar, CO_ODF_TPDOmap, (void*)TPDO, 0, 0);
    3c96:	4b27      	ldr	r3, [pc, #156]	; (3d34 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x128>)
    3c98:	681b      	ldr	r3, [r3, #0]
    3c9a:	1d18      	adds	r0, r3, #4
    3c9c:	2300      	movs	r3, #0
    3c9e:	9301      	str	r3, [sp, #4]
    3ca0:	2300      	movs	r3, #0
    3ca2:	9300      	str	r3, [sp, #0]
    3ca4:	68bb      	ldr	r3, [r7, #8]
    3ca6:	4a26      	ldr	r2, [pc, #152]	; (3d40 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x134>)
    3ca8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3caa:	4c24      	ldr	r4, [pc, #144]	; (3d3c <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x130>)
    3cac:	47a0      	blx	r4

    /* configure communication and mapping */
    TPDO->CANdevTx = CANdevTx;
    3cae:	68bb      	ldr	r3, [r7, #8]
    3cb0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    3cb2:	64da      	str	r2, [r3, #76]	; 0x4c
    TPDO->CANdevTxIdx = CANdevTxIdx;
    3cb4:	68bb      	ldr	r3, [r7, #8]
    3cb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3cb8:	655a      	str	r2, [r3, #84]	; 0x54
    TPDO->syncCounter = 255;
    3cba:	68bb      	ldr	r3, [r7, #8]
    3cbc:	22ff      	movs	r2, #255	; 0xff
    3cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TPDO->inhibitTimer = 0;
    3cc2:	68bb      	ldr	r3, [r7, #8]
    3cc4:	2200      	movs	r2, #0
    3cc6:	645a      	str	r2, [r3, #68]	; 0x44
    TPDO->eventTimer = ((uint32_t) TPDOCommPar->eventTimer) * 1000;
    3cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3cca:	695b      	ldr	r3, [r3, #20]
    3ccc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3cd0:	fb02 f203 	mul.w	r2, r2, r3
    3cd4:	68bb      	ldr	r3, [r7, #8]
    3cd6:	649a      	str	r2, [r3, #72]	; 0x48
    if(TPDOCommPar->transmissionType>=254) TPDO->sendRequest = 1;
    3cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3cda:	7a1b      	ldrb	r3, [r3, #8]
    3cdc:	2bfd      	cmp	r3, #253	; 0xfd
    3cde:	dd02      	ble.n	3ce6 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0xda>
    3ce0:	68bb      	ldr	r3, [r7, #8]
    3ce2:	2201      	movs	r2, #1
    3ce4:	77da      	strb	r2, [r3, #31]

    CO_TPDOconfigMap(TPDO, TPDOMapPar->numberOfMappedObjects);
    3ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3ce8:	781b      	ldrb	r3, [r3, #0]
    3cea:	4619      	mov	r1, r3
    3cec:	68b8      	ldr	r0, [r7, #8]
    3cee:	4b15      	ldr	r3, [pc, #84]	; (3d44 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x138>)
    3cf0:	4798      	blx	r3
    CO_TPDOconfigCom(TPDO, TPDOCommPar->COB_IDUsedByTPDO, ((TPDOCommPar->transmissionType<=240) ? 1 : 0));
    3cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3cf4:	6859      	ldr	r1, [r3, #4]
    3cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3cf8:	7a1b      	ldrb	r3, [r3, #8]
    3cfa:	2bf0      	cmp	r3, #240	; 0xf0
    3cfc:	dc01      	bgt.n	3d02 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0xf6>
    3cfe:	2301      	movs	r3, #1
    3d00:	e000      	b.n	3d04 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0xf8>
    3d02:	2300      	movs	r3, #0
    3d04:	461a      	mov	r2, r3
    3d06:	68b8      	ldr	r0, [r7, #8]
    3d08:	4b0f      	ldr	r3, [pc, #60]	; (3d48 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x13c>)
    3d0a:	4798      	blx	r3

    if((TPDOCommPar->transmissionType>240 &&
    3d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3d0e:	7a1b      	ldrb	r3, [r3, #8]
    3d10:	2bf0      	cmp	r3, #240	; 0xf0
    3d12:	dd03      	ble.n	3d1c <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x110>
         TPDOCommPar->transmissionType<254) ||
    3d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3d16:	7a1b      	ldrb	r3, [r3, #8]
    if((TPDOCommPar->transmissionType>240 &&
    3d18:	2bfd      	cmp	r3, #253	; 0xfd
    3d1a:	dd03      	ble.n	3d24 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x118>
         TPDOCommPar->SYNCStartValue>240){
    3d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3d1e:	7e1b      	ldrb	r3, [r3, #24]
         TPDOCommPar->transmissionType<254) ||
    3d20:	2bf0      	cmp	r3, #240	; 0xf0
    3d22:	dd02      	ble.n	3d2a <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x11e>
            TPDO->valid = false;
    3d24:	68bb      	ldr	r3, [r7, #8]
    3d26:	2200      	movs	r2, #0
    3d28:	775a      	strb	r2, [r3, #29]
    }

    return CO_ERROR_NO;
    3d2a:	2300      	movs	r3, #0
}
    3d2c:	4618      	mov	r0, r3
    3d2e:	3714      	adds	r7, #20
    3d30:	46bd      	mov	sp, r7
    3d32:	bd90      	pop	{r4, r7, pc}
    3d34:	20000960 	.word	0x20000960
    3d38:	00003725 	.word	0x00003725
    3d3c:	00004719 	.word	0x00004719
    3d40:	00003a0d 	.word	0x00003a0d
    3d44:	000034d5 	.word	0x000034d5
    3d48:	00003171 	.word	0x00003171

00003d4c <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t>:


/******************************************************************************/
uint8_t CO_PDO_Class::CO_TPDOisCOS(CO_TPDO_t *TPDO){
    3d4c:	b480      	push	{r7}
    3d4e:	b085      	sub	sp, #20
    3d50:	af00      	add	r7, sp, #0
    3d52:	6078      	str	r0, [r7, #4]
    3d54:	6039      	str	r1, [r7, #0]

    /* Prepare TPDO data automatically from Object Dictionary variables */
    uint8_t* pPDOdataByte;
    uint8_t** ppODdataByte;

    pPDOdataByte = &TPDO->CANtxBuff->data[TPDO->dataLength];
    3d56:	683b      	ldr	r3, [r7, #0]
    3d58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    3d5a:	683a      	ldr	r2, [r7, #0]
    3d5c:	7f92      	ldrb	r2, [r2, #30]
    3d5e:	4413      	add	r3, r2
    3d60:	3305      	adds	r3, #5
    3d62:	60fb      	str	r3, [r7, #12]
    ppODdataByte = &TPDO->mapPointer[TPDO->dataLength];
    3d64:	683b      	ldr	r3, [r7, #0]
    3d66:	7f9b      	ldrb	r3, [r3, #30]
    3d68:	3308      	adds	r3, #8
    3d6a:	009b      	lsls	r3, r3, #2
    3d6c:	683a      	ldr	r2, [r7, #0]
    3d6e:	4413      	add	r3, r2
    3d70:	60bb      	str	r3, [r7, #8]

    switch(TPDO->dataLength){
    3d72:	683b      	ldr	r3, [r7, #0]
    3d74:	7f9b      	ldrb	r3, [r3, #30]
    3d76:	3b01      	subs	r3, #1
    3d78:	2b07      	cmp	r3, #7
    3d7a:	f200 80ea 	bhi.w	3f52 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x206>
    3d7e:	a201      	add	r2, pc, #4	; (adr r2, 3d84 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x38>)
    3d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3d84:	00003f1d 	.word	0x00003f1d
    3d88:	00003ee7 	.word	0x00003ee7
    3d8c:	00003eb1 	.word	0x00003eb1
    3d90:	00003e7b 	.word	0x00003e7b
    3d94:	00003e45 	.word	0x00003e45
    3d98:	00003e0f 	.word	0x00003e0f
    3d9c:	00003dd9 	.word	0x00003dd9
    3da0:	00003da5 	.word	0x00003da5
        case 8: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x80)) return 1;
    3da4:	68fb      	ldr	r3, [r7, #12]
    3da6:	3b01      	subs	r3, #1
    3da8:	60fb      	str	r3, [r7, #12]
    3daa:	68fb      	ldr	r3, [r7, #12]
    3dac:	781a      	ldrb	r2, [r3, #0]
    3dae:	68bb      	ldr	r3, [r7, #8]
    3db0:	3b04      	subs	r3, #4
    3db2:	60bb      	str	r3, [r7, #8]
    3db4:	68bb      	ldr	r3, [r7, #8]
    3db6:	681b      	ldr	r3, [r3, #0]
    3db8:	781b      	ldrb	r3, [r3, #0]
    3dba:	429a      	cmp	r2, r3
    3dbc:	d007      	beq.n	3dce <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x82>
    3dbe:	683b      	ldr	r3, [r7, #0]
    3dc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    3dc4:	b25b      	sxtb	r3, r3
    3dc6:	2b00      	cmp	r3, #0
    3dc8:	da01      	bge.n	3dce <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x82>
    3dca:	2301      	movs	r3, #1
    3dcc:	e000      	b.n	3dd0 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x84>
    3dce:	2300      	movs	r3, #0
    3dd0:	2b00      	cmp	r3, #0
    3dd2:	d001      	beq.n	3dd8 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x8c>
    3dd4:	2301      	movs	r3, #1
    3dd6:	e0bd      	b.n	3f54 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x208>
        case 7: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x40)) return 1;
    3dd8:	68fb      	ldr	r3, [r7, #12]
    3dda:	3b01      	subs	r3, #1
    3ddc:	60fb      	str	r3, [r7, #12]
    3dde:	68fb      	ldr	r3, [r7, #12]
    3de0:	781a      	ldrb	r2, [r3, #0]
    3de2:	68bb      	ldr	r3, [r7, #8]
    3de4:	3b04      	subs	r3, #4
    3de6:	60bb      	str	r3, [r7, #8]
    3de8:	68bb      	ldr	r3, [r7, #8]
    3dea:	681b      	ldr	r3, [r3, #0]
    3dec:	781b      	ldrb	r3, [r3, #0]
    3dee:	429a      	cmp	r2, r3
    3df0:	d008      	beq.n	3e04 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0xb8>
    3df2:	683b      	ldr	r3, [r7, #0]
    3df4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    3df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    3dfc:	2b00      	cmp	r3, #0
    3dfe:	d001      	beq.n	3e04 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0xb8>
    3e00:	2301      	movs	r3, #1
    3e02:	e000      	b.n	3e06 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0xba>
    3e04:	2300      	movs	r3, #0
    3e06:	2b00      	cmp	r3, #0
    3e08:	d001      	beq.n	3e0e <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0xc2>
    3e0a:	2301      	movs	r3, #1
    3e0c:	e0a2      	b.n	3f54 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x208>
        case 6: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x20)) return 1;
    3e0e:	68fb      	ldr	r3, [r7, #12]
    3e10:	3b01      	subs	r3, #1
    3e12:	60fb      	str	r3, [r7, #12]
    3e14:	68fb      	ldr	r3, [r7, #12]
    3e16:	781a      	ldrb	r2, [r3, #0]
    3e18:	68bb      	ldr	r3, [r7, #8]
    3e1a:	3b04      	subs	r3, #4
    3e1c:	60bb      	str	r3, [r7, #8]
    3e1e:	68bb      	ldr	r3, [r7, #8]
    3e20:	681b      	ldr	r3, [r3, #0]
    3e22:	781b      	ldrb	r3, [r3, #0]
    3e24:	429a      	cmp	r2, r3
    3e26:	d008      	beq.n	3e3a <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0xee>
    3e28:	683b      	ldr	r3, [r7, #0]
    3e2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    3e2e:	f003 0320 	and.w	r3, r3, #32
    3e32:	2b00      	cmp	r3, #0
    3e34:	d001      	beq.n	3e3a <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0xee>
    3e36:	2301      	movs	r3, #1
    3e38:	e000      	b.n	3e3c <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0xf0>
    3e3a:	2300      	movs	r3, #0
    3e3c:	2b00      	cmp	r3, #0
    3e3e:	d001      	beq.n	3e44 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0xf8>
    3e40:	2301      	movs	r3, #1
    3e42:	e087      	b.n	3f54 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x208>
        case 5: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x10)) return 1;
    3e44:	68fb      	ldr	r3, [r7, #12]
    3e46:	3b01      	subs	r3, #1
    3e48:	60fb      	str	r3, [r7, #12]
    3e4a:	68fb      	ldr	r3, [r7, #12]
    3e4c:	781a      	ldrb	r2, [r3, #0]
    3e4e:	68bb      	ldr	r3, [r7, #8]
    3e50:	3b04      	subs	r3, #4
    3e52:	60bb      	str	r3, [r7, #8]
    3e54:	68bb      	ldr	r3, [r7, #8]
    3e56:	681b      	ldr	r3, [r3, #0]
    3e58:	781b      	ldrb	r3, [r3, #0]
    3e5a:	429a      	cmp	r2, r3
    3e5c:	d008      	beq.n	3e70 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x124>
    3e5e:	683b      	ldr	r3, [r7, #0]
    3e60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    3e64:	f003 0310 	and.w	r3, r3, #16
    3e68:	2b00      	cmp	r3, #0
    3e6a:	d001      	beq.n	3e70 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x124>
    3e6c:	2301      	movs	r3, #1
    3e6e:	e000      	b.n	3e72 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x126>
    3e70:	2300      	movs	r3, #0
    3e72:	2b00      	cmp	r3, #0
    3e74:	d001      	beq.n	3e7a <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x12e>
    3e76:	2301      	movs	r3, #1
    3e78:	e06c      	b.n	3f54 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x208>
        case 4: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x08)) return 1;
    3e7a:	68fb      	ldr	r3, [r7, #12]
    3e7c:	3b01      	subs	r3, #1
    3e7e:	60fb      	str	r3, [r7, #12]
    3e80:	68fb      	ldr	r3, [r7, #12]
    3e82:	781a      	ldrb	r2, [r3, #0]
    3e84:	68bb      	ldr	r3, [r7, #8]
    3e86:	3b04      	subs	r3, #4
    3e88:	60bb      	str	r3, [r7, #8]
    3e8a:	68bb      	ldr	r3, [r7, #8]
    3e8c:	681b      	ldr	r3, [r3, #0]
    3e8e:	781b      	ldrb	r3, [r3, #0]
    3e90:	429a      	cmp	r2, r3
    3e92:	d008      	beq.n	3ea6 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x15a>
    3e94:	683b      	ldr	r3, [r7, #0]
    3e96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    3e9a:	f003 0308 	and.w	r3, r3, #8
    3e9e:	2b00      	cmp	r3, #0
    3ea0:	d001      	beq.n	3ea6 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x15a>
    3ea2:	2301      	movs	r3, #1
    3ea4:	e000      	b.n	3ea8 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x15c>
    3ea6:	2300      	movs	r3, #0
    3ea8:	2b00      	cmp	r3, #0
    3eaa:	d001      	beq.n	3eb0 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x164>
    3eac:	2301      	movs	r3, #1
    3eae:	e051      	b.n	3f54 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x208>
        case 3: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x04)) return 1;
    3eb0:	68fb      	ldr	r3, [r7, #12]
    3eb2:	3b01      	subs	r3, #1
    3eb4:	60fb      	str	r3, [r7, #12]
    3eb6:	68fb      	ldr	r3, [r7, #12]
    3eb8:	781a      	ldrb	r2, [r3, #0]
    3eba:	68bb      	ldr	r3, [r7, #8]
    3ebc:	3b04      	subs	r3, #4
    3ebe:	60bb      	str	r3, [r7, #8]
    3ec0:	68bb      	ldr	r3, [r7, #8]
    3ec2:	681b      	ldr	r3, [r3, #0]
    3ec4:	781b      	ldrb	r3, [r3, #0]
    3ec6:	429a      	cmp	r2, r3
    3ec8:	d008      	beq.n	3edc <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x190>
    3eca:	683b      	ldr	r3, [r7, #0]
    3ecc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    3ed0:	f003 0304 	and.w	r3, r3, #4
    3ed4:	2b00      	cmp	r3, #0
    3ed6:	d001      	beq.n	3edc <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x190>
    3ed8:	2301      	movs	r3, #1
    3eda:	e000      	b.n	3ede <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x192>
    3edc:	2300      	movs	r3, #0
    3ede:	2b00      	cmp	r3, #0
    3ee0:	d001      	beq.n	3ee6 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x19a>
    3ee2:	2301      	movs	r3, #1
    3ee4:	e036      	b.n	3f54 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x208>
        case 2: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x02)) return 1;
    3ee6:	68fb      	ldr	r3, [r7, #12]
    3ee8:	3b01      	subs	r3, #1
    3eea:	60fb      	str	r3, [r7, #12]
    3eec:	68fb      	ldr	r3, [r7, #12]
    3eee:	781a      	ldrb	r2, [r3, #0]
    3ef0:	68bb      	ldr	r3, [r7, #8]
    3ef2:	3b04      	subs	r3, #4
    3ef4:	60bb      	str	r3, [r7, #8]
    3ef6:	68bb      	ldr	r3, [r7, #8]
    3ef8:	681b      	ldr	r3, [r3, #0]
    3efa:	781b      	ldrb	r3, [r3, #0]
    3efc:	429a      	cmp	r2, r3
    3efe:	d008      	beq.n	3f12 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x1c6>
    3f00:	683b      	ldr	r3, [r7, #0]
    3f02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    3f06:	f003 0302 	and.w	r3, r3, #2
    3f0a:	2b00      	cmp	r3, #0
    3f0c:	d001      	beq.n	3f12 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x1c6>
    3f0e:	2301      	movs	r3, #1
    3f10:	e000      	b.n	3f14 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x1c8>
    3f12:	2300      	movs	r3, #0
    3f14:	2b00      	cmp	r3, #0
    3f16:	d001      	beq.n	3f1c <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x1d0>
    3f18:	2301      	movs	r3, #1
    3f1a:	e01b      	b.n	3f54 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x208>
        case 1: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x01)) return 1;
    3f1c:	68fb      	ldr	r3, [r7, #12]
    3f1e:	3b01      	subs	r3, #1
    3f20:	60fb      	str	r3, [r7, #12]
    3f22:	68fb      	ldr	r3, [r7, #12]
    3f24:	781a      	ldrb	r2, [r3, #0]
    3f26:	68bb      	ldr	r3, [r7, #8]
    3f28:	3b04      	subs	r3, #4
    3f2a:	60bb      	str	r3, [r7, #8]
    3f2c:	68bb      	ldr	r3, [r7, #8]
    3f2e:	681b      	ldr	r3, [r3, #0]
    3f30:	781b      	ldrb	r3, [r3, #0]
    3f32:	429a      	cmp	r2, r3
    3f34:	d008      	beq.n	3f48 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x1fc>
    3f36:	683b      	ldr	r3, [r7, #0]
    3f38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    3f3c:	f003 0301 	and.w	r3, r3, #1
    3f40:	2b00      	cmp	r3, #0
    3f42:	d001      	beq.n	3f48 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x1fc>
    3f44:	2301      	movs	r3, #1
    3f46:	e000      	b.n	3f4a <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x1fe>
    3f48:	2300      	movs	r3, #0
    3f4a:	2b00      	cmp	r3, #0
    3f4c:	d001      	beq.n	3f52 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x206>
    3f4e:	2301      	movs	r3, #1
    3f50:	e000      	b.n	3f54 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x208>
    }

    return 0;
    3f52:	2300      	movs	r3, #0
}
    3f54:	4618      	mov	r0, r3
    3f56:	3714      	adds	r7, #20
    3f58:	46bd      	mov	sp, r7
    3f5a:	bc80      	pop	{r7}
    3f5c:	4770      	bx	lr
    3f5e:	bf00      	nop

00003f60 <_ZN12CO_PDO_Class11CO_TPDOsendEP9CO_TPDO_t>:

//#define TPDO_CALLS_EXTENSION
/******************************************************************************/
uint32_t CO_PDO_Class::CO_TPDOsend(CO_TPDO_t *TPDO){
    3f60:	b580      	push	{r7, lr}
    3f62:	b086      	sub	sp, #24
    3f64:	af00      	add	r7, sp, #0
    3f66:	6078      	str	r0, [r7, #4]
    3f68:	6039      	str	r1, [r7, #0]
            ODF_arg.dataLength = CO_OD_getLength(pSDO, entryNo, subIndex);
            ext->pODFunc(&ODF_arg);
        }
    }
#endif
    i = TPDO->dataLength;
    3f6a:	683b      	ldr	r3, [r7, #0]
    3f6c:	7f9b      	ldrb	r3, [r3, #30]
    3f6e:	617b      	str	r3, [r7, #20]
    pPDOdataByte = &TPDO->CANtxBuff->data[0];
    3f70:	683b      	ldr	r3, [r7, #0]
    3f72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    3f74:	3305      	adds	r3, #5
    3f76:	613b      	str	r3, [r7, #16]
    ppODdataByte = &TPDO->mapPointer[0];
    3f78:	683b      	ldr	r3, [r7, #0]
    3f7a:	3320      	adds	r3, #32
    3f7c:	60fb      	str	r3, [r7, #12]

    /* Copy data from Object dictionary. */
    for(; i>0; i--) {
    3f7e:	697b      	ldr	r3, [r7, #20]
    3f80:	2b00      	cmp	r3, #0
    3f82:	d00c      	beq.n	3f9e <_ZN12CO_PDO_Class11CO_TPDOsendEP9CO_TPDO_t+0x3e>
        *(pPDOdataByte++) = **(ppODdataByte++);
    3f84:	693b      	ldr	r3, [r7, #16]
    3f86:	1c5a      	adds	r2, r3, #1
    3f88:	613a      	str	r2, [r7, #16]
    3f8a:	68fa      	ldr	r2, [r7, #12]
    3f8c:	1d11      	adds	r1, r2, #4
    3f8e:	60f9      	str	r1, [r7, #12]
    3f90:	6812      	ldr	r2, [r2, #0]
    3f92:	7812      	ldrb	r2, [r2, #0]
    3f94:	701a      	strb	r2, [r3, #0]
    for(; i>0; i--) {
    3f96:	697b      	ldr	r3, [r7, #20]
    3f98:	3b01      	subs	r3, #1
    3f9a:	617b      	str	r3, [r7, #20]
    3f9c:	e7ef      	b.n	3f7e <_ZN12CO_PDO_Class11CO_TPDOsendEP9CO_TPDO_t+0x1e>
    }

    TPDO->sendRequest = 0;
    3f9e:	683b      	ldr	r3, [r7, #0]
    3fa0:	2200      	movs	r2, #0
    3fa2:	77da      	strb	r2, [r3, #31]

    return   ptrCODriverClass->CAN_Send( TPDO->CANtxBuff);
    3fa4:	4b06      	ldr	r3, [pc, #24]	; (3fc0 <_ZN12CO_PDO_Class11CO_TPDOsendEP9CO_TPDO_t+0x60>)
    3fa6:	681a      	ldr	r2, [r3, #0]
    3fa8:	683b      	ldr	r3, [r7, #0]
    3faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    3fac:	4619      	mov	r1, r3
    3fae:	4610      	mov	r0, r2
    3fb0:	4b04      	ldr	r3, [pc, #16]	; (3fc4 <_ZN12CO_PDO_Class11CO_TPDOsendEP9CO_TPDO_t+0x64>)
    3fb2:	4798      	blx	r3
    3fb4:	4603      	mov	r3, r0
}
    3fb6:	4618      	mov	r0, r3
    3fb8:	3718      	adds	r7, #24
    3fba:	46bd      	mov	sp, r7
    3fbc:	bd80      	pop	{r7, pc}
    3fbe:	bf00      	nop
    3fc0:	20000960 	.word	0x20000960
    3fc4:	00001621 	.word	0x00001621

00003fc8 <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th>:

//#define RPDO_CALLS_EXTENSION
/******************************************************************************/
void CO_PDO_Class::CO_RPDO_process(CO_RPDO_t *RPDO, bool_t syncWas){
    3fc8:	b480      	push	{r7}
    3fca:	b089      	sub	sp, #36	; 0x24
    3fcc:	af00      	add	r7, sp, #0
    3fce:	60f8      	str	r0, [r7, #12]
    3fd0:	60b9      	str	r1, [r7, #8]
    3fd2:	4613      	mov	r3, r2
    3fd4:	71fb      	strb	r3, [r7, #7]

    if(!RPDO->valid || !(*RPDO->operatingState == CO_NMT_OPERATIONAL))
    3fd6:	68bb      	ldr	r3, [r7, #8]
    3fd8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
    3fdc:	2b00      	cmp	r3, #0
    3fde:	d004      	beq.n	3fea <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0x22>
    3fe0:	68bb      	ldr	r3, [r7, #8]
    3fe2:	695b      	ldr	r3, [r3, #20]
    3fe4:	781b      	ldrb	r3, [r3, #0]
    3fe6:	2b05      	cmp	r3, #5
    3fe8:	d009      	beq.n	3ffe <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0x36>
    {
        RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
    3fea:	68bb      	ldr	r3, [r7, #8]
    3fec:	2200      	movs	r2, #0
    3fee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    3ff2:	68bb      	ldr	r3, [r7, #8]
    3ff4:	2200      	movs	r2, #0
    3ff6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    3ffa:	bf00      	nop
                }
            }
#endif
        }
    }
}
    3ffc:	e046      	b.n	408c <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0xc4>
    else if(!RPDO->synchronous || syncWas)
    3ffe:	68bb      	ldr	r3, [r7, #8]
    4000:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
    4004:	2b00      	cmp	r3, #0
    4006:	d002      	beq.n	400e <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0x46>
    4008:	79fb      	ldrb	r3, [r7, #7]
    400a:	2b00      	cmp	r3, #0
    400c:	d03e      	beq.n	408c <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0xc4>
        uint8_t bufNo = 0;
    400e:	2300      	movs	r3, #0
    4010:	77fb      	strb	r3, [r7, #31]
        if(RPDO->synchronous && !RPDO->SYNC->CANrxToggle) {
    4012:	68bb      	ldr	r3, [r7, #8]
    4014:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
    4018:	2b00      	cmp	r3, #0
    401a:	d006      	beq.n	402a <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0x62>
    401c:	68bb      	ldr	r3, [r7, #8]
    401e:	689b      	ldr	r3, [r3, #8]
    4020:	7edb      	ldrb	r3, [r3, #27]
    4022:	2b00      	cmp	r3, #0
    4024:	d101      	bne.n	402a <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0x62>
            bufNo = 1;
    4026:	2301      	movs	r3, #1
    4028:	77fb      	strb	r3, [r7, #31]
        while(RPDO->CANrxNew[bufNo]){
    402a:	7ffb      	ldrb	r3, [r7, #31]
    402c:	68ba      	ldr	r2, [r7, #8]
    402e:	4413      	add	r3, r2
    4030:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    4034:	b2db      	uxtb	r3, r3
    4036:	2b00      	cmp	r3, #0
    4038:	bf14      	ite	ne
    403a:	2301      	movne	r3, #1
    403c:	2300      	moveq	r3, #0
    403e:	b2db      	uxtb	r3, r3
    4040:	2b00      	cmp	r3, #0
    4042:	d023      	beq.n	408c <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0xc4>
            i = RPDO->dataLength;
    4044:	68bb      	ldr	r3, [r7, #8]
    4046:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
    404a:	61bb      	str	r3, [r7, #24]
            pPDOdataByte = &RPDO->CANrxData[bufNo][0];
    404c:	7ffb      	ldrb	r3, [r7, #31]
    404e:	3308      	adds	r3, #8
    4050:	00db      	lsls	r3, r3, #3
    4052:	68ba      	ldr	r2, [r7, #8]
    4054:	4413      	add	r3, r2
    4056:	3306      	adds	r3, #6
    4058:	617b      	str	r3, [r7, #20]
            ppODdataByte = &RPDO->mapPointer[0];
    405a:	68bb      	ldr	r3, [r7, #8]
    405c:	3324      	adds	r3, #36	; 0x24
    405e:	613b      	str	r3, [r7, #16]
            RPDO->CANrxNew[bufNo] = false;
    4060:	7ffb      	ldrb	r3, [r7, #31]
    4062:	68ba      	ldr	r2, [r7, #8]
    4064:	4413      	add	r3, r2
    4066:	2200      	movs	r2, #0
    4068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            for(; i>0; i--) {
    406c:	69bb      	ldr	r3, [r7, #24]
    406e:	2b00      	cmp	r3, #0
    4070:	d0db      	beq.n	402a <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0x62>
                **(ppODdataByte++) = *(pPDOdataByte++);
    4072:	693b      	ldr	r3, [r7, #16]
    4074:	1d1a      	adds	r2, r3, #4
    4076:	613a      	str	r2, [r7, #16]
    4078:	681a      	ldr	r2, [r3, #0]
    407a:	697b      	ldr	r3, [r7, #20]
    407c:	1c59      	adds	r1, r3, #1
    407e:	6179      	str	r1, [r7, #20]
    4080:	781b      	ldrb	r3, [r3, #0]
    4082:	7013      	strb	r3, [r2, #0]
            for(; i>0; i--) {
    4084:	69bb      	ldr	r3, [r7, #24]
    4086:	3b01      	subs	r3, #1
    4088:	61bb      	str	r3, [r7, #24]
    408a:	e7ef      	b.n	406c <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0xa4>
}
    408c:	bf00      	nop
    408e:	3724      	adds	r7, #36	; 0x24
    4090:	46bd      	mov	sp, r7
    4092:	bc80      	pop	{r7}
    4094:	4770      	bx	lr
	...

00004098 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm>:
void CO_PDO_Class::CO_TPDO_process(
        CO_TPDO_t              *TPDO,
        CO_SYNC_t              *SYNC,
        bool_t                  syncWas,
        uint32_t                timeDifference_us)
{
    4098:	b580      	push	{r7, lr}
    409a:	b084      	sub	sp, #16
    409c:	af00      	add	r7, sp, #0
    409e:	60f8      	str	r0, [r7, #12]
    40a0:	60b9      	str	r1, [r7, #8]
    40a2:	607a      	str	r2, [r7, #4]
    40a4:	70fb      	strb	r3, [r7, #3]
    if(TPDO->valid && *TPDO->operatingState == CO_NMT_OPERATIONAL){
    40a6:	68bb      	ldr	r3, [r7, #8]
    40a8:	7f5b      	ldrb	r3, [r3, #29]
    40aa:	2b00      	cmp	r3, #0
    40ac:	f000 809e 	beq.w	41ec <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x154>
    40b0:	68bb      	ldr	r3, [r7, #8]
    40b2:	691b      	ldr	r3, [r3, #16]
    40b4:	781b      	ldrb	r3, [r3, #0]
    40b6:	2b05      	cmp	r3, #5
    40b8:	f040 8098 	bne.w	41ec <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x154>

        /* Send PDO by application request or by Event timer */
        if(TPDO->TPDOCommPar->transmissionType >= 253){
    40bc:	68bb      	ldr	r3, [r7, #8]
    40be:	689b      	ldr	r3, [r3, #8]
    40c0:	7a1b      	ldrb	r3, [r3, #8]
    40c2:	2bfc      	cmp	r3, #252	; 0xfc
    40c4:	dd31      	ble.n	412a <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x92>
            if(TPDO->inhibitTimer == 0 && (TPDO->sendRequest || (TPDO->TPDOCommPar->eventTimer && TPDO->eventTimer == 0))){
    40c6:	68bb      	ldr	r3, [r7, #8]
    40c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    40ca:	2b00      	cmp	r3, #0
    40cc:	f040 809b 	bne.w	4206 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
    40d0:	68bb      	ldr	r3, [r7, #8]
    40d2:	7fdb      	ldrb	r3, [r3, #31]
    40d4:	2b00      	cmp	r3, #0
    40d6:	d10a      	bne.n	40ee <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x56>
    40d8:	68bb      	ldr	r3, [r7, #8]
    40da:	689b      	ldr	r3, [r3, #8]
    40dc:	695b      	ldr	r3, [r3, #20]
    40de:	2b00      	cmp	r3, #0
    40e0:	f000 8091 	beq.w	4206 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
    40e4:	68bb      	ldr	r3, [r7, #8]
    40e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    40e8:	2b00      	cmp	r3, #0
    40ea:	f040 808c 	bne.w	4206 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
                if(CO_TPDOsend(TPDO) == CO_ERROR_NO){
    40ee:	68b9      	ldr	r1, [r7, #8]
    40f0:	68f8      	ldr	r0, [r7, #12]
    40f2:	4b54      	ldr	r3, [pc, #336]	; (4244 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x1ac>)
    40f4:	4798      	blx	r3
    40f6:	4603      	mov	r3, r0
    40f8:	2b00      	cmp	r3, #0
    40fa:	bf0c      	ite	eq
    40fc:	2301      	moveq	r3, #1
    40fe:	2300      	movne	r3, #0
    4100:	b2db      	uxtb	r3, r3
    4102:	2b00      	cmp	r3, #0
    4104:	d07f      	beq.n	4206 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
                    /* successfully sent */
                    TPDO->inhibitTimer = ((uint32_t) TPDO->TPDOCommPar->inhibitTime) * 100;
    4106:	68bb      	ldr	r3, [r7, #8]
    4108:	689b      	ldr	r3, [r3, #8]
    410a:	68db      	ldr	r3, [r3, #12]
    410c:	2264      	movs	r2, #100	; 0x64
    410e:	fb02 f203 	mul.w	r2, r2, r3
    4112:	68bb      	ldr	r3, [r7, #8]
    4114:	645a      	str	r2, [r3, #68]	; 0x44
                    TPDO->eventTimer = ((uint32_t) TPDO->TPDOCommPar->eventTimer) * 1000;
    4116:	68bb      	ldr	r3, [r7, #8]
    4118:	689b      	ldr	r3, [r3, #8]
    411a:	695b      	ldr	r3, [r3, #20]
    411c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4120:	fb02 f203 	mul.w	r2, r2, r3
    4124:	68bb      	ldr	r3, [r7, #8]
    4126:	649a      	str	r2, [r3, #72]	; 0x48
        if(TPDO->TPDOCommPar->transmissionType >= 253){
    4128:	e06d      	b.n	4206 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
                }
            }
        }

        /* Synchronous PDOs */
        else if(SYNC && syncWas){
    412a:	687b      	ldr	r3, [r7, #4]
    412c:	2b00      	cmp	r3, #0
    412e:	d06a      	beq.n	4206 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
    4130:	78fb      	ldrb	r3, [r7, #3]
    4132:	2b00      	cmp	r3, #0
    4134:	d067      	beq.n	4206 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
            /* send synchronous acyclic PDO */
            if(TPDO->TPDOCommPar->transmissionType == 0){
    4136:	68bb      	ldr	r3, [r7, #8]
    4138:	689b      	ldr	r3, [r3, #8]
    413a:	7a1b      	ldrb	r3, [r3, #8]
    413c:	2b00      	cmp	r3, #0
    413e:	d108      	bne.n	4152 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0xba>
                if(TPDO->sendRequest) CO_TPDOsend(TPDO);
    4140:	68bb      	ldr	r3, [r7, #8]
    4142:	7fdb      	ldrb	r3, [r3, #31]
    4144:	2b00      	cmp	r3, #0
    4146:	d05e      	beq.n	4206 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
    4148:	68b9      	ldr	r1, [r7, #8]
    414a:	68f8      	ldr	r0, [r7, #12]
    414c:	4b3d      	ldr	r3, [pc, #244]	; (4244 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x1ac>)
    414e:	4798      	blx	r3
        if(TPDO->TPDOCommPar->transmissionType >= 253){
    4150:	e059      	b.n	4206 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
            }
            /* send synchronous cyclic PDO */
            else{
                /* is the start of synchronous TPDO transmission */
                if(TPDO->syncCounter == 255){
    4152:	68bb      	ldr	r3, [r7, #8]
    4154:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    4158:	2bff      	cmp	r3, #255	; 0xff
    415a:	d113      	bne.n	4184 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0xec>
                    if(SYNC->counterOverflowValue && TPDO->TPDOCommPar->SYNCStartValue)
    415c:	687b      	ldr	r3, [r7, #4]
    415e:	7e1b      	ldrb	r3, [r3, #24]
    4160:	2b00      	cmp	r3, #0
    4162:	d009      	beq.n	4178 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0xe0>
    4164:	68bb      	ldr	r3, [r7, #8]
    4166:	689b      	ldr	r3, [r3, #8]
    4168:	7e1b      	ldrb	r3, [r3, #24]
    416a:	2b00      	cmp	r3, #0
    416c:	d004      	beq.n	4178 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0xe0>
                        TPDO->syncCounter = 254;   /* SYNCStartValue is in use */
    416e:	68bb      	ldr	r3, [r7, #8]
    4170:	22fe      	movs	r2, #254	; 0xfe
    4172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    4176:	e005      	b.n	4184 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0xec>
                    else
                        TPDO->syncCounter = TPDO->TPDOCommPar->transmissionType;
    4178:	68bb      	ldr	r3, [r7, #8]
    417a:	689b      	ldr	r3, [r3, #8]
    417c:	7a1a      	ldrb	r2, [r3, #8]
    417e:	68bb      	ldr	r3, [r7, #8]
    4180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                }
                /* if the SYNCStartValue is in use, start first TPDO after SYNC with matched SYNCStartValue. */
                if(TPDO->syncCounter == 254){
    4184:	68bb      	ldr	r3, [r7, #8]
    4186:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    418a:	2bfe      	cmp	r3, #254	; 0xfe
    418c:	d111      	bne.n	41b2 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x11a>
                    if(SYNC->counter == TPDO->TPDOCommPar->SYNCStartValue){
    418e:	687b      	ldr	r3, [r7, #4]
    4190:	7f1a      	ldrb	r2, [r3, #28]
    4192:	68bb      	ldr	r3, [r7, #8]
    4194:	689b      	ldr	r3, [r3, #8]
    4196:	7e1b      	ldrb	r3, [r3, #24]
    4198:	429a      	cmp	r2, r3
    419a:	d134      	bne.n	4206 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
                        TPDO->syncCounter = TPDO->TPDOCommPar->transmissionType;
    419c:	68bb      	ldr	r3, [r7, #8]
    419e:	689b      	ldr	r3, [r3, #8]
    41a0:	7a1a      	ldrb	r2, [r3, #8]
    41a2:	68bb      	ldr	r3, [r7, #8]
    41a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                        CO_TPDOsend(TPDO);
    41a8:	68b9      	ldr	r1, [r7, #8]
    41aa:	68f8      	ldr	r0, [r7, #12]
    41ac:	4b25      	ldr	r3, [pc, #148]	; (4244 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x1ac>)
    41ae:	4798      	blx	r3
        if(TPDO->TPDOCommPar->transmissionType >= 253){
    41b0:	e029      	b.n	4206 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
                    }
                }
                /* Send PDO after every N-th Sync */
                else if(--TPDO->syncCounter == 0){
    41b2:	68bb      	ldr	r3, [r7, #8]
    41b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    41b8:	3b01      	subs	r3, #1
    41ba:	b2da      	uxtb	r2, r3
    41bc:	68bb      	ldr	r3, [r7, #8]
    41be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    41c2:	68bb      	ldr	r3, [r7, #8]
    41c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    41c8:	2b00      	cmp	r3, #0
    41ca:	bf0c      	ite	eq
    41cc:	2301      	moveq	r3, #1
    41ce:	2300      	movne	r3, #0
    41d0:	b2db      	uxtb	r3, r3
    41d2:	2b00      	cmp	r3, #0
    41d4:	d017      	beq.n	4206 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
                    TPDO->syncCounter = TPDO->TPDOCommPar->transmissionType;
    41d6:	68bb      	ldr	r3, [r7, #8]
    41d8:	689b      	ldr	r3, [r3, #8]
    41da:	7a1a      	ldrb	r2, [r3, #8]
    41dc:	68bb      	ldr	r3, [r7, #8]
    41de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                    CO_TPDOsend(TPDO);
    41e2:	68b9      	ldr	r1, [r7, #8]
    41e4:	68f8      	ldr	r0, [r7, #12]
    41e6:	4b17      	ldr	r3, [pc, #92]	; (4244 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x1ac>)
    41e8:	4798      	blx	r3
        if(TPDO->TPDOCommPar->transmissionType >= 253){
    41ea:	e00c      	b.n	4206 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
        }

    }
    else{
        /* Not operational or valid. Force TPDO first send after operational or valid. */
        if(TPDO->TPDOCommPar->transmissionType>=254) TPDO->sendRequest = 1;
    41ec:	68bb      	ldr	r3, [r7, #8]
    41ee:	689b      	ldr	r3, [r3, #8]
    41f0:	7a1b      	ldrb	r3, [r3, #8]
    41f2:	2bfd      	cmp	r3, #253	; 0xfd
    41f4:	dd03      	ble.n	41fe <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x166>
    41f6:	68bb      	ldr	r3, [r7, #8]
    41f8:	2201      	movs	r2, #1
    41fa:	77da      	strb	r2, [r3, #31]
    41fc:	e004      	b.n	4208 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x170>
        else                                         TPDO->sendRequest = 0;
    41fe:	68bb      	ldr	r3, [r7, #8]
    4200:	2200      	movs	r2, #0
    4202:	77da      	strb	r2, [r3, #31]
    4204:	e000      	b.n	4208 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x170>
        if(TPDO->TPDOCommPar->transmissionType >= 253){
    4206:	bf00      	nop
    }

    /* update timers */
    TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us) ? (TPDO->inhibitTimer - timeDifference_us) : 0;
    4208:	68bb      	ldr	r3, [r7, #8]
    420a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    420c:	69bb      	ldr	r3, [r7, #24]
    420e:	429a      	cmp	r2, r3
    4210:	d904      	bls.n	421c <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x184>
    4212:	68bb      	ldr	r3, [r7, #8]
    4214:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    4216:	69bb      	ldr	r3, [r7, #24]
    4218:	1ad3      	subs	r3, r2, r3
    421a:	e000      	b.n	421e <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x186>
    421c:	2300      	movs	r3, #0
    421e:	68ba      	ldr	r2, [r7, #8]
    4220:	6453      	str	r3, [r2, #68]	; 0x44
    TPDO->eventTimer = (TPDO->eventTimer > timeDifference_us) ? (TPDO->eventTimer - timeDifference_us) : 0;
    4222:	68bb      	ldr	r3, [r7, #8]
    4224:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    4226:	69bb      	ldr	r3, [r7, #24]
    4228:	429a      	cmp	r2, r3
    422a:	d904      	bls.n	4236 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x19e>
    422c:	68bb      	ldr	r3, [r7, #8]
    422e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    4230:	69bb      	ldr	r3, [r7, #24]
    4232:	1ad3      	subs	r3, r2, r3
    4234:	e000      	b.n	4238 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x1a0>
    4236:	2300      	movs	r3, #0
    4238:	68ba      	ldr	r2, [r7, #8]
    423a:	6493      	str	r3, [r2, #72]	; 0x48
    423c:	bf00      	nop
    423e:	3710      	adds	r7, #16
    4240:	46bd      	mov	sp, r7
    4242:	bd80      	pop	{r7, pc}
    4244:	00003f61 	.word	0x00003f61

00004248 <_ZN12CO_SDO_ClassC1Ev>:
#include "CO_Driver_Class.h"

CO_SDO_Class	*ptrCOSDOClass;

// default constructor
CO_SDO_Class::CO_SDO_Class()
    4248:	b580      	push	{r7, lr}
    424a:	b082      	sub	sp, #8
    424c:	af00      	add	r7, sp, #0
    424e:	6078      	str	r0, [r7, #4]
    4250:	6878      	ldr	r0, [r7, #4]
    4252:	4b05      	ldr	r3, [pc, #20]	; (4268 <_ZN12CO_SDO_ClassC1Ev+0x20>)
    4254:	4798      	blx	r3
{
	ptrCOSDOClass=this;
    4256:	4a05      	ldr	r2, [pc, #20]	; (426c <_ZN12CO_SDO_ClassC1Ev+0x24>)
    4258:	687b      	ldr	r3, [r7, #4]
    425a:	6013      	str	r3, [r2, #0]
} //CO_SDO_Class
    425c:	687b      	ldr	r3, [r7, #4]
    425e:	4618      	mov	r0, r3
    4260:	3708      	adds	r7, #8
    4262:	46bd      	mov	sp, r7
    4264:	bd80      	pop	{r7, pc}
    4266:	bf00      	nop
    4268:	00001029 	.word	0x00001029
    426c:	20000970 	.word	0x20000970

00004270 <_ZN12CO_SDO_ClassD1Ev>:

// default destructor
CO_SDO_Class::~CO_SDO_Class()
    4270:	b580      	push	{r7, lr}
    4272:	b082      	sub	sp, #8
    4274:	af00      	add	r7, sp, #0
    4276:	6078      	str	r0, [r7, #4]
    4278:	6878      	ldr	r0, [r7, #4]
    427a:	4b03      	ldr	r3, [pc, #12]	; (4288 <_ZN12CO_SDO_ClassD1Ev+0x18>)
    427c:	4798      	blx	r3
{
} //~CO_SDO_Class
    427e:	687b      	ldr	r3, [r7, #4]
    4280:	4618      	mov	r0, r3
    4282:	3708      	adds	r7, #8
    4284:	46bd      	mov	sp, r7
    4286:	bd80      	pop	{r7, pc}
    4288:	0000103d 	.word	0x0000103d

0000428c <_ZN12CO_SDO_Class9CO_memcpyEPhPKhm>:

void CO_SDO_Class::CO_memcpy(uint8_t dest[], const uint8_t src[], const uint32_t size){
    428c:	b480      	push	{r7}
    428e:	b087      	sub	sp, #28
    4290:	af00      	add	r7, sp, #0
    4292:	60f8      	str	r0, [r7, #12]
    4294:	60b9      	str	r1, [r7, #8]
    4296:	607a      	str	r2, [r7, #4]
    4298:	603b      	str	r3, [r7, #0]
    uint32_t i;
    for(i = 0; i < size; i++){
    429a:	2300      	movs	r3, #0
    429c:	617b      	str	r3, [r7, #20]
    429e:	697a      	ldr	r2, [r7, #20]
    42a0:	683b      	ldr	r3, [r7, #0]
    42a2:	429a      	cmp	r2, r3
    42a4:	d20b      	bcs.n	42be <_ZN12CO_SDO_Class9CO_memcpyEPhPKhm+0x32>
        dest[i] = src[i];
    42a6:	68ba      	ldr	r2, [r7, #8]
    42a8:	697b      	ldr	r3, [r7, #20]
    42aa:	4413      	add	r3, r2
    42ac:	6879      	ldr	r1, [r7, #4]
    42ae:	697a      	ldr	r2, [r7, #20]
    42b0:	440a      	add	r2, r1
    42b2:	7812      	ldrb	r2, [r2, #0]
    42b4:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < size; i++){
    42b6:	697b      	ldr	r3, [r7, #20]
    42b8:	3301      	adds	r3, #1
    42ba:	617b      	str	r3, [r7, #20]
    42bc:	e7ef      	b.n	429e <_ZN12CO_SDO_Class9CO_memcpyEPhPKhm+0x12>
    }
}
    42be:	bf00      	nop
    42c0:	371c      	adds	r7, #28
    42c2:	46bd      	mov	sp, r7
    42c4:	bc80      	pop	{r7}
    42c6:	4770      	bx	lr

000042c8 <_ZN12CO_SDO_Class12CO_getUint32EPKh>:
    b.u8[0] = data[0];
    b.u8[1] = data[1];
    return b.u16[0];
}

uint32_t CO_SDO_Class::CO_getUint32(const uint8_t data[]){
    42c8:	b480      	push	{r7}
    42ca:	b087      	sub	sp, #28
    42cc:	af00      	add	r7, sp, #0
    42ce:	6078      	str	r0, [r7, #4]
    42d0:	6039      	str	r1, [r7, #0]
    CO_bytes_t b;
    b.u8[0] = data[0];
    42d2:	683b      	ldr	r3, [r7, #0]
    42d4:	781b      	ldrb	r3, [r3, #0]
    42d6:	723b      	strb	r3, [r7, #8]
    b.u8[1] = data[1];
    42d8:	683b      	ldr	r3, [r7, #0]
    42da:	3301      	adds	r3, #1
    42dc:	781b      	ldrb	r3, [r3, #0]
    42de:	727b      	strb	r3, [r7, #9]
    b.u8[2] = data[2];
    42e0:	683b      	ldr	r3, [r7, #0]
    42e2:	3302      	adds	r3, #2
    42e4:	781b      	ldrb	r3, [r3, #0]
    42e6:	72bb      	strb	r3, [r7, #10]
    b.u8[3] = data[3];
    42e8:	683b      	ldr	r3, [r7, #0]
    42ea:	3303      	adds	r3, #3
    42ec:	781b      	ldrb	r3, [r3, #0]
    42ee:	72fb      	strb	r3, [r7, #11]
    return b.u32[0];
    42f0:	68bb      	ldr	r3, [r7, #8]
}
    42f2:	4618      	mov	r0, r3
    42f4:	371c      	adds	r7, #28
    42f6:	46bd      	mov	sp, r7
    42f8:	bc80      	pop	{r7}
    42fa:	4770      	bx	lr

000042fc <_ZN12CO_SDO_Class12CO_setUint32EPhm>:
    b.u16[0] = value;
    data[0] = b.u8[0];
    data[1] = b.u8[1];
}

void CO_SDO_Class::CO_setUint32(uint8_t data[], const uint32_t value){
    42fc:	b480      	push	{r7}
    42fe:	b089      	sub	sp, #36	; 0x24
    4300:	af00      	add	r7, sp, #0
    4302:	60f8      	str	r0, [r7, #12]
    4304:	60b9      	str	r1, [r7, #8]
    4306:	607a      	str	r2, [r7, #4]
    CO_bytes_t b;
    b.u32[0] = value;
    4308:	687b      	ldr	r3, [r7, #4]
    430a:	613b      	str	r3, [r7, #16]
    data[0] = b.u8[0];
    430c:	7c3a      	ldrb	r2, [r7, #16]
    430e:	68bb      	ldr	r3, [r7, #8]
    4310:	701a      	strb	r2, [r3, #0]
    data[1] = b.u8[1];
    4312:	68bb      	ldr	r3, [r7, #8]
    4314:	3301      	adds	r3, #1
    4316:	7c7a      	ldrb	r2, [r7, #17]
    4318:	701a      	strb	r2, [r3, #0]
    data[2] = b.u8[2];
    431a:	68bb      	ldr	r3, [r7, #8]
    431c:	3302      	adds	r3, #2
    431e:	7cba      	ldrb	r2, [r7, #18]
    4320:	701a      	strb	r2, [r3, #0]
    data[3] = b.u8[3];
    4322:	68bb      	ldr	r3, [r7, #8]
    4324:	3303      	adds	r3, #3
    4326:	7cfa      	ldrb	r2, [r7, #19]
    4328:	701a      	strb	r2, [r3, #0]
}
    432a:	bf00      	nop
    432c:	3724      	adds	r7, #36	; 0x24
    432e:	46bd      	mov	sp, r7
    4330:	bc80      	pop	{r7}
    4332:	4770      	bx	lr

00004334 <_ZN12CO_SDO_Class14CO_memcpySwap2EPvPKv>:

#ifdef CO_LITTLE_ENDIAN
void CO_SDO_Class::CO_memcpySwap2(void* dest, const void* src){
    4334:	b480      	push	{r7}
    4336:	b087      	sub	sp, #28
    4338:	af00      	add	r7, sp, #0
    433a:	60f8      	str	r0, [r7, #12]
    433c:	60b9      	str	r1, [r7, #8]
    433e:	607a      	str	r2, [r7, #4]
    char *cdest;
    char *csrc;
    cdest = (char *) dest;
    4340:	68bb      	ldr	r3, [r7, #8]
    4342:	617b      	str	r3, [r7, #20]
    csrc = (char *) src;
    4344:	687b      	ldr	r3, [r7, #4]
    4346:	613b      	str	r3, [r7, #16]
    cdest[0] = csrc[0];
    4348:	693b      	ldr	r3, [r7, #16]
    434a:	781a      	ldrb	r2, [r3, #0]
    434c:	697b      	ldr	r3, [r7, #20]
    434e:	701a      	strb	r2, [r3, #0]
    cdest[1] = csrc[1];
    4350:	697b      	ldr	r3, [r7, #20]
    4352:	3301      	adds	r3, #1
    4354:	693a      	ldr	r2, [r7, #16]
    4356:	7852      	ldrb	r2, [r2, #1]
    4358:	701a      	strb	r2, [r3, #0]
}
    435a:	bf00      	nop
    435c:	371c      	adds	r7, #28
    435e:	46bd      	mov	sp, r7
    4360:	bc80      	pop	{r7}
    4362:	4770      	bx	lr

00004364 <_ZN12CO_SDO_Class14CO_memcpySwap4EPvPKv>:
void CO_SDO_Class::CO_memcpySwap4(void* dest, const void* src){
    4364:	b480      	push	{r7}
    4366:	b087      	sub	sp, #28
    4368:	af00      	add	r7, sp, #0
    436a:	60f8      	str	r0, [r7, #12]
    436c:	60b9      	str	r1, [r7, #8]
    436e:	607a      	str	r2, [r7, #4]
    char *cdest;
    char *csrc;
    cdest = (char *) dest;
    4370:	68bb      	ldr	r3, [r7, #8]
    4372:	617b      	str	r3, [r7, #20]
    csrc = (char *) src;
    4374:	687b      	ldr	r3, [r7, #4]
    4376:	613b      	str	r3, [r7, #16]
    cdest[0] = csrc[0];
    4378:	693b      	ldr	r3, [r7, #16]
    437a:	781a      	ldrb	r2, [r3, #0]
    437c:	697b      	ldr	r3, [r7, #20]
    437e:	701a      	strb	r2, [r3, #0]
    cdest[1] = csrc[1];
    4380:	697b      	ldr	r3, [r7, #20]
    4382:	3301      	adds	r3, #1
    4384:	693a      	ldr	r2, [r7, #16]
    4386:	7852      	ldrb	r2, [r2, #1]
    4388:	701a      	strb	r2, [r3, #0]
    cdest[2] = csrc[2];
    438a:	697b      	ldr	r3, [r7, #20]
    438c:	3302      	adds	r3, #2
    438e:	693a      	ldr	r2, [r7, #16]
    4390:	7892      	ldrb	r2, [r2, #2]
    4392:	701a      	strb	r2, [r3, #0]
    cdest[3] = csrc[3];
    4394:	697b      	ldr	r3, [r7, #20]
    4396:	3303      	adds	r3, #3
    4398:	693a      	ldr	r2, [r7, #16]
    439a:	78d2      	ldrb	r2, [r2, #3]
    439c:	701a      	strb	r2, [r3, #0]
}
    439e:	bf00      	nop
    43a0:	371c      	adds	r7, #28
    43a2:	46bd      	mov	sp, r7
    43a4:	bc80      	pop	{r7}
    43a6:	4770      	bx	lr

000043a8 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t>:
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */

static void CO_SDO_receive(void *object, const CO_CANrxMsg_t *msg){
    43a8:	b580      	push	{r7, lr}
    43aa:	b086      	sub	sp, #24
    43ac:	af00      	add	r7, sp, #0
    43ae:	6078      	str	r0, [r7, #4]
    43b0:	6039      	str	r1, [r7, #0]
    CO_SDO_t *SDO;
	
    SDO = (CO_SDO_t*)object;   /* this is the correct pointer type of the first argument */
    43b2:	687b      	ldr	r3, [r7, #4]
    43b4:	613b      	str	r3, [r7, #16]
     * starting another SDO request, this request is dropped. Especially if
     * processing function has slow response.
     * See: https://github.com/CANopenNode/CANopenNode/issues/39 */

    /* verify message length and message overflow (previous message was not processed yet) */
    if((msg->DLC == 8U) && (!SDO->CANrxNew)){
    43b6:	683b      	ldr	r3, [r7, #0]
    43b8:	7d1b      	ldrb	r3, [r3, #20]
    43ba:	2b08      	cmp	r3, #8
    43bc:	f040 80a4 	bne.w	4508 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x160>
    43c0:	693b      	ldr	r3, [r7, #16]
    43c2:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
    43c6:	2b00      	cmp	r3, #0
    43c8:	f040 809e 	bne.w	4508 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x160>
        if(SDO->state != CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK) {
    43cc:	693b      	ldr	r3, [r7, #16]
    43ce:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
    43d2:	2b15      	cmp	r3, #21
    43d4:	d024      	beq.n	4420 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x78>
            /* copy data and set 'new message' flag */
            SDO->CANrxData[0] = msg->data[0];
    43d6:	683b      	ldr	r3, [r7, #0]
    43d8:	7d5a      	ldrb	r2, [r3, #21]
    43da:	693b      	ldr	r3, [r7, #16]
    43dc:	701a      	strb	r2, [r3, #0]
            SDO->CANrxData[1] = msg->data[1];
    43de:	683b      	ldr	r3, [r7, #0]
    43e0:	7d9a      	ldrb	r2, [r3, #22]
    43e2:	693b      	ldr	r3, [r7, #16]
    43e4:	705a      	strb	r2, [r3, #1]
            SDO->CANrxData[2] = msg->data[2];
    43e6:	683b      	ldr	r3, [r7, #0]
    43e8:	7dda      	ldrb	r2, [r3, #23]
    43ea:	693b      	ldr	r3, [r7, #16]
    43ec:	709a      	strb	r2, [r3, #2]
            SDO->CANrxData[3] = msg->data[3];
    43ee:	683b      	ldr	r3, [r7, #0]
    43f0:	7e1a      	ldrb	r2, [r3, #24]
    43f2:	693b      	ldr	r3, [r7, #16]
    43f4:	70da      	strb	r2, [r3, #3]
            SDO->CANrxData[4] = msg->data[4];
    43f6:	683b      	ldr	r3, [r7, #0]
    43f8:	7e5a      	ldrb	r2, [r3, #25]
    43fa:	693b      	ldr	r3, [r7, #16]
    43fc:	711a      	strb	r2, [r3, #4]
            SDO->CANrxData[5] = msg->data[5];
    43fe:	683b      	ldr	r3, [r7, #0]
    4400:	7e9a      	ldrb	r2, [r3, #26]
    4402:	693b      	ldr	r3, [r7, #16]
    4404:	715a      	strb	r2, [r3, #5]
            SDO->CANrxData[6] = msg->data[6];
    4406:	683b      	ldr	r3, [r7, #0]
    4408:	7eda      	ldrb	r2, [r3, #27]
    440a:	693b      	ldr	r3, [r7, #16]
    440c:	719a      	strb	r2, [r3, #6]
            SDO->CANrxData[7] = msg->data[7];
    440e:	683b      	ldr	r3, [r7, #0]
    4410:	7f1a      	ldrb	r2, [r3, #28]
    4412:	693b      	ldr	r3, [r7, #16]
    4414:	71da      	strb	r2, [r3, #7]

            SDO->CANrxNew = true;
    4416:	693b      	ldr	r3, [r7, #16]
    4418:	2201      	movs	r2, #1
    441a:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
    441e:	e067      	b.n	44f0 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
        }
        else {
            /* block download, copy data directly */
            uint8_t seqno;

            SDO->CANrxData[0] = msg->data[0];
    4420:	683b      	ldr	r3, [r7, #0]
    4422:	7d5a      	ldrb	r2, [r3, #21]
    4424:	693b      	ldr	r3, [r7, #16]
    4426:	701a      	strb	r2, [r3, #0]
            seqno = SDO->CANrxData[0] & 0x7fU;
    4428:	693b      	ldr	r3, [r7, #16]
    442a:	781b      	ldrb	r3, [r3, #0]
    442c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4430:	73fb      	strb	r3, [r7, #15]
            SDO->timeoutTimer = 0;
    4432:	693b      	ldr	r3, [r7, #16]
    4434:	2200      	movs	r2, #0
    4436:	66da      	str	r2, [r3, #108]	; 0x6c

            /* check correct sequence number. */
            if(seqno == (SDO->sequence + 1U)) {
    4438:	7bfa      	ldrb	r2, [r7, #15]
    443a:	693b      	ldr	r3, [r7, #16]
    443c:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
    4440:	3301      	adds	r3, #1
    4442:	429a      	cmp	r2, r3
    4444:	d141      	bne.n	44ca <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x122>
                /* sequence is correct */
                uint8_t i;

                SDO->sequence++;
    4446:	693b      	ldr	r3, [r7, #16]
    4448:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
    444c:	3301      	adds	r3, #1
    444e:	b2da      	uxtb	r2, r3
    4450:	693b      	ldr	r3, [r7, #16]
    4452:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

                /* copy data */
                for(i=1; i<8; i++) {
    4456:	2301      	movs	r3, #1
    4458:	75fb      	strb	r3, [r7, #23]
    445a:	7dfb      	ldrb	r3, [r7, #23]
    445c:	2b07      	cmp	r3, #7
    445e:	dc1d      	bgt.n	449c <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0xf4>
                    SDO->ODF_arg.data[SDO->bufferOffset++] = msg->data[i]; //SDO->ODF_arg.data is equal as SDO->databuffer
    4460:	693b      	ldr	r3, [r7, #16]
    4462:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    4464:	693b      	ldr	r3, [r7, #16]
    4466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4468:	1c58      	adds	r0, r3, #1
    446a:	6939      	ldr	r1, [r7, #16]
    446c:	6388      	str	r0, [r1, #56]	; 0x38
    446e:	4413      	add	r3, r2
    4470:	7dfa      	ldrb	r2, [r7, #23]
    4472:	6839      	ldr	r1, [r7, #0]
    4474:	440a      	add	r2, r1
    4476:	7d52      	ldrb	r2, [r2, #21]
    4478:	701a      	strb	r2, [r3, #0]
                    if(SDO->bufferOffset >= CO_SDO_BUFFER_SIZE) {
    447a:	693b      	ldr	r3, [r7, #16]
    447c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    447e:	2b1f      	cmp	r3, #31
    4480:	d908      	bls.n	4494 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0xec>
                        /* buffer full, break reception */
                        SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
    4482:	693b      	ldr	r3, [r7, #16]
    4484:	2216      	movs	r2, #22
    4486:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                        SDO->CANrxNew = true;
    448a:	693b      	ldr	r3, [r7, #16]
    448c:	2201      	movs	r2, #1
    448e:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
                        break;
    4492:	e003      	b.n	449c <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0xf4>
                for(i=1; i<8; i++) {
    4494:	7dfb      	ldrb	r3, [r7, #23]
    4496:	3301      	adds	r3, #1
    4498:	75fb      	strb	r3, [r7, #23]
    449a:	e7de      	b.n	445a <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0xb2>
                    }
                }

                /* break reception if last segment or block sequence is too large */
                if(((SDO->CANrxData[0] & 0x80U) == 0x80U) || (SDO->sequence >= SDO->blksize)) {
    449c:	693b      	ldr	r3, [r7, #16]
    449e:	781b      	ldrb	r3, [r3, #0]
    44a0:	b25b      	sxtb	r3, r3
    44a2:	2b00      	cmp	r3, #0
    44a4:	db08      	blt.n	44b8 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x110>
    44a6:	693b      	ldr	r3, [r7, #16]
    44a8:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
    44ac:	461a      	mov	r2, r3
    44ae:	693b      	ldr	r3, [r7, #16]
    44b0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    44b4:	429a      	cmp	r2, r3
    44b6:	db1b      	blt.n	44f0 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
                    SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
    44b8:	693b      	ldr	r3, [r7, #16]
    44ba:	2216      	movs	r2, #22
    44bc:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                    SDO->CANrxNew = true;
    44c0:	693b      	ldr	r3, [r7, #16]
    44c2:	2201      	movs	r2, #1
    44c4:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
    44c8:	e012      	b.n	44f0 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
                }
            }
            else if((seqno == SDO->sequence) || (SDO->sequence == 0U)){
    44ca:	693b      	ldr	r3, [r7, #16]
    44cc:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
    44d0:	7bfa      	ldrb	r2, [r7, #15]
    44d2:	429a      	cmp	r2, r3
    44d4:	d00c      	beq.n	44f0 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
    44d6:	693b      	ldr	r3, [r7, #16]
    44d8:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
    44dc:	2b00      	cmp	r3, #0
    44de:	d007      	beq.n	44f0 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
                /* Ignore message, if it is duplicate or if sequence didn't started yet. */
            }
            else {
                /* seqno is totally wrong, break reception. */
                SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
    44e0:	693b      	ldr	r3, [r7, #16]
    44e2:	2216      	movs	r2, #22
    44e4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                SDO->CANrxNew = true;
    44e8:	693b      	ldr	r3, [r7, #16]
    44ea:	2201      	movs	r2, #1
    44ec:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
            }
        }

        /* Optional signal to RTOS, which can resume task, which handles SDO server. */
        if(SDO->CANrxNew && SDO->ptrFunctSignal != NULL) {
    44f0:	693b      	ldr	r3, [r7, #16]
    44f2:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
    44f6:	2b00      	cmp	r3, #0
    44f8:	d006      	beq.n	4508 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x160>
    44fa:	693b      	ldr	r3, [r7, #16]
    44fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    44fe:	2b00      	cmp	r3, #0
    4500:	d002      	beq.n	4508 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x160>
            SDO->ptrFunctSignal();
    4502:	693b      	ldr	r3, [r7, #16]
    4504:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    4506:	4798      	blx	r3
        }
    }
}
    4508:	bf00      	nop
    450a:	3718      	adds	r7, #24
    450c:	46bd      	mov	sp, r7
    450e:	bd80      	pop	{r7, pc}

00004510 <_ZL11CO_ODF_1200P12CO_ODF_arg_t>:
 * Function for accessing _SDO server parameter_ for default SDO (index 0x1200)
 * from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
 static CO_SDO_abortCode_t  CO_ODF_1200(CO_ODF_arg_t *ODF_arg){
    4510:	b580      	push	{r7, lr}
    4512:	b086      	sub	sp, #24
    4514:	af00      	add	r7, sp, #0
    4516:	6078      	str	r0, [r7, #4]
    uint8_t *nodeId;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
    4518:	2300      	movs	r3, #0
    451a:	617b      	str	r3, [r7, #20]

    nodeId = (uint8_t*) ODF_arg->object;
    451c:	687b      	ldr	r3, [r7, #4]
    451e:	681b      	ldr	r3, [r3, #0]
    4520:	613b      	str	r3, [r7, #16]
    value = ptrCODriverClass->CO_getUint32(ODF_arg->data);
    4522:	4b12      	ldr	r3, [pc, #72]	; (456c <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x5c>)
    4524:	681b      	ldr	r3, [r3, #0]
    4526:	1d1a      	adds	r2, r3, #4
    4528:	687b      	ldr	r3, [r7, #4]
    452a:	685b      	ldr	r3, [r3, #4]
    452c:	4619      	mov	r1, r3
    452e:	4610      	mov	r0, r2
    4530:	4b0f      	ldr	r3, [pc, #60]	; (4570 <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x60>)
    4532:	4798      	blx	r3
    4534:	60f8      	str	r0, [r7, #12]

    /* if SDO reading Object dictionary 0x1200, add nodeId to the value */
    if((ODF_arg->reading) && (ODF_arg->subIndex > 0U)){
    4536:	687b      	ldr	r3, [r7, #4]
    4538:	7f5b      	ldrb	r3, [r3, #29]
    453a:	2b00      	cmp	r3, #0
    453c:	d010      	beq.n	4560 <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x50>
    453e:	687b      	ldr	r3, [r7, #4]
    4540:	7f1b      	ldrb	r3, [r3, #28]
    4542:	2b00      	cmp	r3, #0
    4544:	d00c      	beq.n	4560 <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x50>
        ptrCODriverClass->CO_setUint32(ODF_arg->data, value + *nodeId);
    4546:	4b09      	ldr	r3, [pc, #36]	; (456c <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x5c>)
    4548:	681b      	ldr	r3, [r3, #0]
    454a:	1d18      	adds	r0, r3, #4
    454c:	687b      	ldr	r3, [r7, #4]
    454e:	6859      	ldr	r1, [r3, #4]
    4550:	693b      	ldr	r3, [r7, #16]
    4552:	781b      	ldrb	r3, [r3, #0]
    4554:	461a      	mov	r2, r3
    4556:	68fb      	ldr	r3, [r7, #12]
    4558:	4413      	add	r3, r2
    455a:	461a      	mov	r2, r3
    455c:	4b05      	ldr	r3, [pc, #20]	; (4574 <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x64>)
    455e:	4798      	blx	r3
    }

    return ret;
    4560:	697b      	ldr	r3, [r7, #20]
}
    4562:	4618      	mov	r0, r3
    4564:	3718      	adds	r7, #24
    4566:	46bd      	mov	sp, r7
    4568:	bd80      	pop	{r7, pc}
    456a:	bf00      	nop
    456c:	20000960 	.word	0x20000960
    4570:	000042c9 	.word	0x000042c9
    4574:	000042fd 	.word	0x000042fd

00004578 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m>:
        uint8_t                 nodeId,
        CO_CANmodule_t         *CANdevRx,
        uint32_t                CANdevRxIdx,
        CO_CANmodule_t         *CANdevTx,
        uint32_t                CANdevTxIdx)
{
    4578:	b5b0      	push	{r4, r5, r7, lr}
    457a:	b08a      	sub	sp, #40	; 0x28
    457c:	af04      	add	r7, sp, #16
    457e:	60f8      	str	r0, [r7, #12]
    4580:	60b9      	str	r1, [r7, #8]
    4582:	607a      	str	r2, [r7, #4]
    4584:	603b      	str	r3, [r7, #0]
    /* verify arguments */
    if(SDO_init==NULL || CANdevRx==NULL || CANdevTx==NULL){
    4586:	68bb      	ldr	r3, [r7, #8]
    4588:	2b00      	cmp	r3, #0
    458a:	d005      	beq.n	4598 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x20>
    458c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    458e:	2b00      	cmp	r3, #0
    4590:	d002      	beq.n	4598 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x20>
    4592:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4594:	2b00      	cmp	r3, #0
    4596:	d102      	bne.n	459e <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x26>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    4598:	f04f 33ff 	mov.w	r3, #4294967295
    459c:	e0ac      	b.n	46f8 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x180>
    }else{
		SDO=SDO_init;
    459e:	68fb      	ldr	r3, [r7, #12]
    45a0:	68ba      	ldr	r2, [r7, #8]
    45a2:	601a      	str	r2, [r3, #0]
	}
	
    /* configure own object dictionary */
    if(parentSDO == NULL){
    45a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    45a6:	2b00      	cmp	r3, #0
    45a8:	d13b      	bne.n	4622 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0xaa>
        uint32_t i;

        SDO->ownOD = true;
    45aa:	68fb      	ldr	r3, [r7, #12]
    45ac:	681b      	ldr	r3, [r3, #0]
    45ae:	2201      	movs	r2, #1
    45b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        SDO->OD = OD;
    45b4:	68fb      	ldr	r3, [r7, #12]
    45b6:	681b      	ldr	r3, [r3, #0]
    45b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    45ba:	62da      	str	r2, [r3, #44]	; 0x2c
        SDO->ODSize = ODSize;
    45bc:	68fb      	ldr	r3, [r7, #12]
    45be:	681b      	ldr	r3, [r3, #0]
    45c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    45c2:	631a      	str	r2, [r3, #48]	; 0x30
        SDO->ODExtensions = ODExtensions;
    45c4:	68fb      	ldr	r3, [r7, #12]
    45c6:	681b      	ldr	r3, [r3, #0]
    45c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
    45ca:	635a      	str	r2, [r3, #52]	; 0x34

        /* clear pointers in ODExtensions */
        for(i=0U; i<ODSize; i++){
    45cc:	2300      	movs	r3, #0
    45ce:	617b      	str	r3, [r7, #20]
    45d0:	697a      	ldr	r2, [r7, #20]
    45d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    45d4:	429a      	cmp	r2, r3
    45d6:	d238      	bcs.n	464a <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0xd2>
            SDO->ODExtensions[i].pODFunc = NULL;
    45d8:	68fb      	ldr	r3, [r7, #12]
    45da:	681b      	ldr	r3, [r3, #0]
    45dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
    45de:	697a      	ldr	r2, [r7, #20]
    45e0:	4613      	mov	r3, r2
    45e2:	005b      	lsls	r3, r3, #1
    45e4:	4413      	add	r3, r2
    45e6:	009b      	lsls	r3, r3, #2
    45e8:	440b      	add	r3, r1
    45ea:	2200      	movs	r2, #0
    45ec:	601a      	str	r2, [r3, #0]
            SDO->ODExtensions[i].object = NULL;
    45ee:	68fb      	ldr	r3, [r7, #12]
    45f0:	681b      	ldr	r3, [r3, #0]
    45f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
    45f4:	697a      	ldr	r2, [r7, #20]
    45f6:	4613      	mov	r3, r2
    45f8:	005b      	lsls	r3, r3, #1
    45fa:	4413      	add	r3, r2
    45fc:	009b      	lsls	r3, r3, #2
    45fe:	440b      	add	r3, r1
    4600:	2200      	movs	r2, #0
    4602:	605a      	str	r2, [r3, #4]
            SDO->ODExtensions[i].flags = NULL;
    4604:	68fb      	ldr	r3, [r7, #12]
    4606:	681b      	ldr	r3, [r3, #0]
    4608:	6b59      	ldr	r1, [r3, #52]	; 0x34
    460a:	697a      	ldr	r2, [r7, #20]
    460c:	4613      	mov	r3, r2
    460e:	005b      	lsls	r3, r3, #1
    4610:	4413      	add	r3, r2
    4612:	009b      	lsls	r3, r3, #2
    4614:	440b      	add	r3, r1
    4616:	2200      	movs	r2, #0
    4618:	609a      	str	r2, [r3, #8]
        for(i=0U; i<ODSize; i++){
    461a:	697b      	ldr	r3, [r7, #20]
    461c:	3301      	adds	r3, #1
    461e:	617b      	str	r3, [r7, #20]
    4620:	e7d6      	b.n	45d0 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x58>
        }
    }
    /* copy object dictionary from parent */
    else{
        SDO->ownOD = false;
    4622:	68fb      	ldr	r3, [r7, #12]
    4624:	681b      	ldr	r3, [r3, #0]
    4626:	2200      	movs	r2, #0
    4628:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        SDO->OD = parentSDO->OD;
    462c:	68fb      	ldr	r3, [r7, #12]
    462e:	681b      	ldr	r3, [r3, #0]
    4630:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    4632:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    4634:	62da      	str	r2, [r3, #44]	; 0x2c
        SDO->ODSize = parentSDO->ODSize;
    4636:	68fb      	ldr	r3, [r7, #12]
    4638:	681b      	ldr	r3, [r3, #0]
    463a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    463c:	6b12      	ldr	r2, [r2, #48]	; 0x30
    463e:	631a      	str	r2, [r3, #48]	; 0x30
        SDO->ODExtensions = parentSDO->ODExtensions;
    4640:	68fb      	ldr	r3, [r7, #12]
    4642:	681b      	ldr	r3, [r3, #0]
    4644:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    4646:	6b52      	ldr	r2, [r2, #52]	; 0x34
    4648:	635a      	str	r2, [r3, #52]	; 0x34
    }

    /* Configure object variables */
    SDO->nodeId = nodeId;
    464a:	68fb      	ldr	r3, [r7, #12]
    464c:	681b      	ldr	r3, [r3, #0]
    464e:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
    4652:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    SDO->state = CO_SDO_ST_IDLE;
    4656:	68fb      	ldr	r3, [r7, #12]
    4658:	681b      	ldr	r3, [r3, #0]
    465a:	2200      	movs	r2, #0
    465c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    SDO->CANrxNew = false;
    4660:	68fb      	ldr	r3, [r7, #12]
    4662:	681b      	ldr	r3, [r3, #0]
    4664:	2200      	movs	r2, #0
    4666:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
    SDO->ptrFunctSignal = NULL;
    466a:	68fb      	ldr	r3, [r7, #12]
    466c:	681b      	ldr	r3, [r3, #0]
    466e:	2200      	movs	r2, #0
    4670:	67da      	str	r2, [r3, #124]	; 0x7c


    /* Configure Object dictionary entry at index 0x1200 */
    if(ObjDictIndex_SDOServerParameter == OD_H1200_SDO_SERVER_PARAM){
    4672:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4674:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
    4678:	d10f      	bne.n	469a <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x122>
        ptrCODriverClass->CO_OD_configure( ObjDictIndex_SDOServerParameter, CO_ODF_1200, (void*)&SDO->nodeId, 0U, 0U);
    467a:	4b21      	ldr	r3, [pc, #132]	; (4700 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    467c:	681b      	ldr	r3, [r3, #0]
    467e:	1d18      	adds	r0, r3, #4
    4680:	68fb      	ldr	r3, [r7, #12]
    4682:	681b      	ldr	r3, [r3, #0]
    4684:	f103 0268 	add.w	r2, r3, #104	; 0x68
    4688:	2300      	movs	r3, #0
    468a:	9301      	str	r3, [sp, #4]
    468c:	2300      	movs	r3, #0
    468e:	9300      	str	r3, [sp, #0]
    4690:	4613      	mov	r3, r2
    4692:	4a1c      	ldr	r2, [pc, #112]	; (4704 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x18c>)
    4694:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    4696:	4c1c      	ldr	r4, [pc, #112]	; (4708 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x190>)
    4698:	47a0      	blx	r4
    }

    if((COB_IDClientToServer & 0x80000000) != 0 || (COB_IDServerToClient & 0x80000000) != 0 ){
    469a:	687b      	ldr	r3, [r7, #4]
    469c:	2b00      	cmp	r3, #0
    469e:	db02      	blt.n	46a6 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x12e>
    46a0:	683b      	ldr	r3, [r7, #0]
    46a2:	2b00      	cmp	r3, #0
    46a4:	da03      	bge.n	46ae <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x136>
        // SDO is invalid
        COB_IDClientToServer = 0;
    46a6:	2300      	movs	r3, #0
    46a8:	607b      	str	r3, [r7, #4]
        COB_IDServerToClient = 0;
    46aa:	2300      	movs	r3, #0
    46ac:	603b      	str	r3, [r7, #0]
    }
    /* configure SDO server CAN reception */
  ptrCODriverClass->CAN_Rx_BufferInit(
    46ae:	4b14      	ldr	r3, [pc, #80]	; (4700 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    46b0:	6818      	ldr	r0, [r3, #0]
            CANdevRxIdx,            /* rx buffer index */
            COB_IDClientToServer,   /* CAN identifier */
            0x7FF,                  /* mask */
            0,                      /* rtr */
            (void*)SDO,             /* object passed to receive function */
    46b2:	68fb      	ldr	r3, [r7, #12]
    46b4:	681b      	ldr	r3, [r3, #0]
            CO_SDO_receive);        /* this function will process received message */
    46b6:	4a15      	ldr	r2, [pc, #84]	; (470c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x194>)
    46b8:	9202      	str	r2, [sp, #8]
    46ba:	9301      	str	r3, [sp, #4]
    46bc:	2300      	movs	r3, #0
    46be:	9300      	str	r3, [sp, #0]
    46c0:	f240 73ff 	movw	r3, #2047	; 0x7ff
    46c4:	687a      	ldr	r2, [r7, #4]
    46c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
    46c8:	4c11      	ldr	r4, [pc, #68]	; (4710 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x198>)
    46ca:	47a0      	blx	r4
	//printf("Config_SDO_recieve");
    /* configure SDO server CAN transmission */
    SDO->CANdevTx = CANdevTx;
    46cc:	68fb      	ldr	r3, [r7, #12]
    46ce:	681b      	ldr	r3, [r3, #0]
    46d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
    46d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    SDO->CANtxBuff = ptrCODriverClass->CAN_Tx_BufferInit(
    46d6:	68fb      	ldr	r3, [r7, #12]
    46d8:	681c      	ldr	r4, [r3, #0]
    46da:	4b09      	ldr	r3, [pc, #36]	; (4700 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    46dc:	6818      	ldr	r0, [r3, #0]
    46de:	2300      	movs	r3, #0
    46e0:	9301      	str	r3, [sp, #4]
    46e2:	2308      	movs	r3, #8
    46e4:	9300      	str	r3, [sp, #0]
    46e6:	2300      	movs	r3, #0
    46e8:	683a      	ldr	r2, [r7, #0]
    46ea:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    46ec:	4d09      	ldr	r5, [pc, #36]	; (4714 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x19c>)
    46ee:	47a8      	blx	r5
    46f0:	4603      	mov	r3, r0
    46f2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
            COB_IDServerToClient,   /* CAN identifier */
            0,                      /* rtr */
            8,                      /* number of data bytes */
            0);                     /* synchronous message flag bit */
	
    return CO_ERROR_NO;
    46f6:	2300      	movs	r3, #0
}
    46f8:	4618      	mov	r0, r3
    46fa:	3718      	adds	r7, #24
    46fc:	46bd      	mov	sp, r7
    46fe:	bdb0      	pop	{r4, r5, r7, pc}
    4700:	20000960 	.word	0x20000960
    4704:	00004511 	.word	0x00004511
    4708:	00004719 	.word	0x00004719
    470c:	000043a9 	.word	0x000043a9
    4710:	00001479 	.word	0x00001479
    4714:	00001575 	.word	0x00001575

00004718 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh>:
        uint32_t                index,
        CO_SDO_abortCode_t    (*pODFunc)(CO_ODF_arg_t *ODF_arg),
        void                   *object,
        uint8_t                *flags,
        uint8_t                 flagsSize)
{
    4718:	b580      	push	{r7, lr}
    471a:	b088      	sub	sp, #32
    471c:	af00      	add	r7, sp, #0
    471e:	60f8      	str	r0, [r7, #12]
    4720:	60b9      	str	r1, [r7, #8]
    4722:	607a      	str	r2, [r7, #4]
    4724:	603b      	str	r3, [r7, #0]
    uint32_t entryNo;

    entryNo = ptrCODriverClass->CO_OD_find(index);
    4726:	4b28      	ldr	r3, [pc, #160]	; (47c8 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xb0>)
    4728:	681b      	ldr	r3, [r3, #0]
    472a:	3304      	adds	r3, #4
    472c:	68b9      	ldr	r1, [r7, #8]
    472e:	4618      	mov	r0, r3
    4730:	4b26      	ldr	r3, [pc, #152]	; (47cc <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xb4>)
    4732:	4798      	blx	r3
    4734:	61b8      	str	r0, [r7, #24]
    if(entryNo < 0xFFFFU){
    4736:	69bb      	ldr	r3, [r7, #24]
    4738:	f64f 72fe 	movw	r2, #65534	; 0xfffe
    473c:	4293      	cmp	r3, r2
    473e:	d83e      	bhi.n	47be <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xa6>
        CO_OD_extension_t *ext = &SDO->ODExtensions[entryNo];
    4740:	68fb      	ldr	r3, [r7, #12]
    4742:	681b      	ldr	r3, [r3, #0]
    4744:	6b59      	ldr	r1, [r3, #52]	; 0x34
    4746:	69ba      	ldr	r2, [r7, #24]
    4748:	4613      	mov	r3, r2
    474a:	005b      	lsls	r3, r3, #1
    474c:	4413      	add	r3, r2
    474e:	009b      	lsls	r3, r3, #2
    4750:	440b      	add	r3, r1
    4752:	617b      	str	r3, [r7, #20]
        uint8_t maxSubIndex = SDO->OD[entryNo].maxSubIndex;
    4754:	68fb      	ldr	r3, [r7, #12]
    4756:	681b      	ldr	r3, [r3, #0]
    4758:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    475a:	69ba      	ldr	r2, [r7, #24]
    475c:	4613      	mov	r3, r2
    475e:	009b      	lsls	r3, r3, #2
    4760:	4413      	add	r3, r2
    4762:	009b      	lsls	r3, r3, #2
    4764:	440b      	add	r3, r1
    4766:	791b      	ldrb	r3, [r3, #4]
    4768:	74fb      	strb	r3, [r7, #19]

        ext->pODFunc = pODFunc;
    476a:	697b      	ldr	r3, [r7, #20]
    476c:	687a      	ldr	r2, [r7, #4]
    476e:	601a      	str	r2, [r3, #0]
        ext->object = object;
    4770:	697b      	ldr	r3, [r7, #20]
    4772:	683a      	ldr	r2, [r7, #0]
    4774:	605a      	str	r2, [r3, #4]
        if((flags != NULL) && (flagsSize != 0U) && (flagsSize == maxSubIndex)){
    4776:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4778:	2b00      	cmp	r3, #0
    477a:	d01b      	beq.n	47b4 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0x9c>
    477c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    4780:	2b00      	cmp	r3, #0
    4782:	d017      	beq.n	47b4 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0x9c>
    4784:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
    4788:	7cfb      	ldrb	r3, [r7, #19]
    478a:	429a      	cmp	r2, r3
    478c:	d112      	bne.n	47b4 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0x9c>
            uint32_t i;
            ext->flags = flags;
    478e:	697b      	ldr	r3, [r7, #20]
    4790:	6aba      	ldr	r2, [r7, #40]	; 0x28
    4792:	609a      	str	r2, [r3, #8]
            for(i=0U; i<=maxSubIndex; i++){
    4794:	2300      	movs	r3, #0
    4796:	61fb      	str	r3, [r7, #28]
    4798:	7cfa      	ldrb	r2, [r7, #19]
    479a:	69fb      	ldr	r3, [r7, #28]
    479c:	429a      	cmp	r2, r3
    479e:	d30d      	bcc.n	47bc <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xa4>
                ext->flags[i] = 0U;
    47a0:	697b      	ldr	r3, [r7, #20]
    47a2:	689a      	ldr	r2, [r3, #8]
    47a4:	69fb      	ldr	r3, [r7, #28]
    47a6:	4413      	add	r3, r2
    47a8:	2200      	movs	r2, #0
    47aa:	701a      	strb	r2, [r3, #0]
            for(i=0U; i<=maxSubIndex; i++){
    47ac:	69fb      	ldr	r3, [r7, #28]
    47ae:	3301      	adds	r3, #1
    47b0:	61fb      	str	r3, [r7, #28]
    47b2:	e7f1      	b.n	4798 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0x80>
            }
        }
        else{
            ext->flags = NULL;
    47b4:	697b      	ldr	r3, [r7, #20]
    47b6:	2200      	movs	r2, #0
    47b8:	609a      	str	r2, [r3, #8]
        }
    }
}
    47ba:	e000      	b.n	47be <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xa6>
            }
    47bc:	bf00      	nop
}
    47be:	bf00      	nop
    47c0:	3720      	adds	r7, #32
    47c2:	46bd      	mov	sp, r7
    47c4:	bd80      	pop	{r7, pc}
    47c6:	bf00      	nop
    47c8:	20000960 	.word	0x20000960
    47cc:	000047d1 	.word	0x000047d1

000047d0 <_ZN12CO_SDO_Class10CO_OD_findEm>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_OD_find( uint32_t index){
    47d0:	b480      	push	{r7}
    47d2:	b087      	sub	sp, #28
    47d4:	af00      	add	r7, sp, #0
    47d6:	6078      	str	r0, [r7, #4]
    47d8:	6039      	str	r1, [r7, #0]
    /* Fast search in ordered Object Dictionary. If indexes are mixed, this won't work. */
    /* If Object Dictionary has up to 2^N entries, then N is max number of loop passes. */
    uint32_t cur, min, max;
    const CO_OD_entry_t* object;

    min = 0U;
    47da:	2300      	movs	r3, #0
    47dc:	617b      	str	r3, [r7, #20]
    max = SDO->ODSize - 1U;
    47de:	687b      	ldr	r3, [r7, #4]
    47e0:	681b      	ldr	r3, [r3, #0]
    47e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    47e4:	3b01      	subs	r3, #1
    47e6:	613b      	str	r3, [r7, #16]
    while(min < max){
    47e8:	697a      	ldr	r2, [r7, #20]
    47ea:	693b      	ldr	r3, [r7, #16]
    47ec:	429a      	cmp	r2, r3
    47ee:	d227      	bcs.n	4840 <_ZN12CO_SDO_Class10CO_OD_findEm+0x70>
        cur = (min + max) / 2;
    47f0:	697a      	ldr	r2, [r7, #20]
    47f2:	693b      	ldr	r3, [r7, #16]
    47f4:	4413      	add	r3, r2
    47f6:	085b      	lsrs	r3, r3, #1
    47f8:	60fb      	str	r3, [r7, #12]
        object = &SDO->OD[cur];
    47fa:	687b      	ldr	r3, [r7, #4]
    47fc:	681b      	ldr	r3, [r3, #0]
    47fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    4800:	68fa      	ldr	r2, [r7, #12]
    4802:	4613      	mov	r3, r2
    4804:	009b      	lsls	r3, r3, #2
    4806:	4413      	add	r3, r2
    4808:	009b      	lsls	r3, r3, #2
    480a:	440b      	add	r3, r1
    480c:	60bb      	str	r3, [r7, #8]
        /* Is object matched */
        if(index == object->index){
    480e:	68bb      	ldr	r3, [r7, #8]
    4810:	681a      	ldr	r2, [r3, #0]
    4812:	683b      	ldr	r3, [r7, #0]
    4814:	429a      	cmp	r2, r3
    4816:	d101      	bne.n	481c <_ZN12CO_SDO_Class10CO_OD_findEm+0x4c>
            return cur;
    4818:	68fb      	ldr	r3, [r7, #12]
    481a:	e028      	b.n	486e <_ZN12CO_SDO_Class10CO_OD_findEm+0x9e>
        }
        if(index < object->index){
    481c:	68bb      	ldr	r3, [r7, #8]
    481e:	681a      	ldr	r2, [r3, #0]
    4820:	683b      	ldr	r3, [r7, #0]
    4822:	429a      	cmp	r2, r3
    4824:	d908      	bls.n	4838 <_ZN12CO_SDO_Class10CO_OD_findEm+0x68>
            max = cur;
    4826:	68fb      	ldr	r3, [r7, #12]
    4828:	613b      	str	r3, [r7, #16]
            if(max) max--;
    482a:	693b      	ldr	r3, [r7, #16]
    482c:	2b00      	cmp	r3, #0
    482e:	d0db      	beq.n	47e8 <_ZN12CO_SDO_Class10CO_OD_findEm+0x18>
    4830:	693b      	ldr	r3, [r7, #16]
    4832:	3b01      	subs	r3, #1
    4834:	613b      	str	r3, [r7, #16]
    4836:	e7d7      	b.n	47e8 <_ZN12CO_SDO_Class10CO_OD_findEm+0x18>
        }
        else
            min = cur + 1U;
    4838:	68fb      	ldr	r3, [r7, #12]
    483a:	3301      	adds	r3, #1
    483c:	617b      	str	r3, [r7, #20]
    while(min < max){
    483e:	e7d3      	b.n	47e8 <_ZN12CO_SDO_Class10CO_OD_findEm+0x18>
    }

    if(min == max){
    4840:	697a      	ldr	r2, [r7, #20]
    4842:	693b      	ldr	r3, [r7, #16]
    4844:	429a      	cmp	r2, r3
    4846:	d110      	bne.n	486a <_ZN12CO_SDO_Class10CO_OD_findEm+0x9a>
        object = &SDO->OD[min];
    4848:	687b      	ldr	r3, [r7, #4]
    484a:	681b      	ldr	r3, [r3, #0]
    484c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    484e:	697a      	ldr	r2, [r7, #20]
    4850:	4613      	mov	r3, r2
    4852:	009b      	lsls	r3, r3, #2
    4854:	4413      	add	r3, r2
    4856:	009b      	lsls	r3, r3, #2
    4858:	440b      	add	r3, r1
    485a:	60bb      	str	r3, [r7, #8]
        /* Is object matched */
        if(index == object->index){
    485c:	68bb      	ldr	r3, [r7, #8]
    485e:	681a      	ldr	r2, [r3, #0]
    4860:	683b      	ldr	r3, [r7, #0]
    4862:	429a      	cmp	r2, r3
    4864:	d101      	bne.n	486a <_ZN12CO_SDO_Class10CO_OD_findEm+0x9a>
            return min;
    4866:	697b      	ldr	r3, [r7, #20]
    4868:	e001      	b.n	486e <_ZN12CO_SDO_Class10CO_OD_findEm+0x9e>
        }
    }

    return 0xFFFFU;  /* object does not exist in OD */
    486a:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
    486e:	4618      	mov	r0, r3
    4870:	371c      	adds	r7, #28
    4872:	46bd      	mov	sp, r7
    4874:	bc80      	pop	{r7}
    4876:	4770      	bx	lr

00004878 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_OD_getLength(uint32_t entryNo, uint8_t subIndex){
    4878:	b480      	push	{r7}
    487a:	b087      	sub	sp, #28
    487c:	af00      	add	r7, sp, #0
    487e:	60f8      	str	r0, [r7, #12]
    4880:	60b9      	str	r1, [r7, #8]
    4882:	4613      	mov	r3, r2
    4884:	71fb      	strb	r3, [r7, #7]
    const CO_OD_entry_t* object = &SDO->OD[entryNo];
    4886:	68fb      	ldr	r3, [r7, #12]
    4888:	681b      	ldr	r3, [r3, #0]
    488a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    488c:	68ba      	ldr	r2, [r7, #8]
    488e:	4613      	mov	r3, r2
    4890:	009b      	lsls	r3, r3, #2
    4892:	4413      	add	r3, r2
    4894:	009b      	lsls	r3, r3, #2
    4896:	440b      	add	r3, r1
    4898:	617b      	str	r3, [r7, #20]

    if(entryNo == 0xFFFFU){
    489a:	68bb      	ldr	r3, [r7, #8]
    489c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    48a0:	4293      	cmp	r3, r2
    48a2:	d101      	bne.n	48a8 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x30>
        return 0U;
    48a4:	2300      	movs	r3, #0
    48a6:	e034      	b.n	4912 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
    }

    if(object->maxSubIndex == 0U){    /* Object type is Var */
    48a8:	697b      	ldr	r3, [r7, #20]
    48aa:	791b      	ldrb	r3, [r3, #4]
    48ac:	2b00      	cmp	r3, #0
    48ae:	d108      	bne.n	48c2 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x4a>
        if(object->pData == 0){ /* data type is domain */
    48b0:	697b      	ldr	r3, [r7, #20]
    48b2:	691b      	ldr	r3, [r3, #16]
    48b4:	2b00      	cmp	r3, #0
    48b6:	d101      	bne.n	48bc <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x44>
            return CO_SDO_BUFFER_SIZE;
    48b8:	2320      	movs	r3, #32
    48ba:	e02a      	b.n	4912 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
        else{
            return object->length;
    48bc:	697b      	ldr	r3, [r7, #20]
    48be:	68db      	ldr	r3, [r3, #12]
    48c0:	e027      	b.n	4912 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
    }
    else if(object->attribute != 0U){ /* Object type is Array */
    48c2:	697b      	ldr	r3, [r7, #20]
    48c4:	689b      	ldr	r3, [r3, #8]
    48c6:	2b00      	cmp	r3, #0
    48c8:	d00d      	beq.n	48e6 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x6e>
        if(subIndex == 0U){
    48ca:	79fb      	ldrb	r3, [r7, #7]
    48cc:	2b00      	cmp	r3, #0
    48ce:	d101      	bne.n	48d4 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x5c>
            return 1U;
    48d0:	2301      	movs	r3, #1
    48d2:	e01e      	b.n	4912 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
        else if(object->pData == 0){
    48d4:	697b      	ldr	r3, [r7, #20]
    48d6:	691b      	ldr	r3, [r3, #16]
    48d8:	2b00      	cmp	r3, #0
    48da:	d101      	bne.n	48e0 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x68>
            /* data type is domain */
            return CO_SDO_BUFFER_SIZE;
    48dc:	2320      	movs	r3, #32
    48de:	e018      	b.n	4912 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
        else{
            return object->length;
    48e0:	697b      	ldr	r3, [r7, #20]
    48e2:	68db      	ldr	r3, [r3, #12]
    48e4:	e015      	b.n	4912 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
    }
    else{                            /* Object type is Record */
        if(((const CO_OD_entryRecord_t*)(object->pData))[subIndex].pData == 0){
    48e6:	697b      	ldr	r3, [r7, #20]
    48e8:	6919      	ldr	r1, [r3, #16]
    48ea:	79fa      	ldrb	r2, [r7, #7]
    48ec:	4613      	mov	r3, r2
    48ee:	005b      	lsls	r3, r3, #1
    48f0:	4413      	add	r3, r2
    48f2:	009b      	lsls	r3, r3, #2
    48f4:	440b      	add	r3, r1
    48f6:	681b      	ldr	r3, [r3, #0]
    48f8:	2b00      	cmp	r3, #0
    48fa:	d101      	bne.n	4900 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x88>
            /* data type is domain */
            return CO_SDO_BUFFER_SIZE;
    48fc:	2320      	movs	r3, #32
    48fe:	e008      	b.n	4912 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
        else{
            return ((const CO_OD_entryRecord_t*)(object->pData))[subIndex].length;
    4900:	697b      	ldr	r3, [r7, #20]
    4902:	6919      	ldr	r1, [r3, #16]
    4904:	79fa      	ldrb	r2, [r7, #7]
    4906:	4613      	mov	r3, r2
    4908:	005b      	lsls	r3, r3, #1
    490a:	4413      	add	r3, r2
    490c:	009b      	lsls	r3, r3, #2
    490e:	440b      	add	r3, r1
    4910:	689b      	ldr	r3, [r3, #8]
        }
    }
}
    4912:	4618      	mov	r0, r3
    4914:	371c      	adds	r7, #28
    4916:	46bd      	mov	sp, r7
    4918:	bc80      	pop	{r7}
    491a:	4770      	bx	lr

0000491c <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_OD_getAttribute(uint32_t entryNo, uint8_t subIndex){
    491c:	b480      	push	{r7}
    491e:	b089      	sub	sp, #36	; 0x24
    4920:	af00      	add	r7, sp, #0
    4922:	60f8      	str	r0, [r7, #12]
    4924:	60b9      	str	r1, [r7, #8]
    4926:	4613      	mov	r3, r2
    4928:	71fb      	strb	r3, [r7, #7]
    const CO_OD_entry_t* object = &SDO->OD[entryNo];
    492a:	68fb      	ldr	r3, [r7, #12]
    492c:	681b      	ldr	r3, [r3, #0]
    492e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    4930:	68ba      	ldr	r2, [r7, #8]
    4932:	4613      	mov	r3, r2
    4934:	009b      	lsls	r3, r3, #2
    4936:	4413      	add	r3, r2
    4938:	009b      	lsls	r3, r3, #2
    493a:	440b      	add	r3, r1
    493c:	617b      	str	r3, [r7, #20]

    if(entryNo == 0xFFFFU){
    493e:	68bb      	ldr	r3, [r7, #8]
    4940:	f64f 72ff 	movw	r2, #65535	; 0xffff
    4944:	4293      	cmp	r3, r2
    4946:	d101      	bne.n	494c <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x30>
        return 0U;
    4948:	2300      	movs	r3, #0
    494a:	e037      	b.n	49bc <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0xa0>
    }

    if(object->maxSubIndex == 0U){   /* Object type is Var */
    494c:	697b      	ldr	r3, [r7, #20]
    494e:	791b      	ldrb	r3, [r3, #4]
    4950:	2b00      	cmp	r3, #0
    4952:	d102      	bne.n	495a <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x3e>
        return object->attribute;
    4954:	697b      	ldr	r3, [r7, #20]
    4956:	689b      	ldr	r3, [r3, #8]
    4958:	e030      	b.n	49bc <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0xa0>
    }
    else if(object->attribute != 0U){/* Object type is Array */
    495a:	697b      	ldr	r3, [r7, #20]
    495c:	689b      	ldr	r3, [r3, #8]
    495e:	2b00      	cmp	r3, #0
    4960:	d023      	beq.n	49aa <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x8e>
        bool_t exception_1003 = false;
    4962:	2300      	movs	r3, #0
    4964:	77fb      	strb	r3, [r7, #31]
        uint32_t attr = object->attribute;
    4966:	697b      	ldr	r3, [r7, #20]
    4968:	689b      	ldr	r3, [r3, #8]
    496a:	61bb      	str	r3, [r7, #24]

        /* Special exception: Object 1003,00 should be writable */
        if(object->index == 0x1003 && subIndex == 0) {
    496c:	697b      	ldr	r3, [r7, #20]
    496e:	681b      	ldr	r3, [r3, #0]
    4970:	f241 0203 	movw	r2, #4099	; 0x1003
    4974:	4293      	cmp	r3, r2
    4976:	d108      	bne.n	498a <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x6e>
    4978:	79fb      	ldrb	r3, [r7, #7]
    497a:	2b00      	cmp	r3, #0
    497c:	d105      	bne.n	498a <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x6e>
            exception_1003 = true;
    497e:	2301      	movs	r3, #1
    4980:	77fb      	strb	r3, [r7, #31]
            attr |= CO_ODA_WRITEABLE;
    4982:	69bb      	ldr	r3, [r7, #24]
    4984:	f043 0308 	orr.w	r3, r3, #8
    4988:	61bb      	str	r3, [r7, #24]
        }

        if(subIndex == 0U  && exception_1003 == false){
    498a:	79fb      	ldrb	r3, [r7, #7]
    498c:	2b00      	cmp	r3, #0
    498e:	d10a      	bne.n	49a6 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x8a>
    4990:	7ffb      	ldrb	r3, [r7, #31]
    4992:	2b00      	cmp	r3, #0
    4994:	d107      	bne.n	49a6 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x8a>
            /* First subIndex is readonly */
            attr &= ~(CO_ODA_WRITEABLE | CO_ODA_RPDO_MAPABLE);
    4996:	69bb      	ldr	r3, [r7, #24]
    4998:	f023 0318 	bic.w	r3, r3, #24
    499c:	61bb      	str	r3, [r7, #24]
            attr |= CO_ODA_READABLE;
    499e:	69bb      	ldr	r3, [r7, #24]
    49a0:	f043 0304 	orr.w	r3, r3, #4
    49a4:	61bb      	str	r3, [r7, #24]
        }
        return attr;
    49a6:	69bb      	ldr	r3, [r7, #24]
    49a8:	e008      	b.n	49bc <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0xa0>
    }
    else{                            /* Object type is Record */
        return ((const CO_OD_entryRecord_t*)(object->pData))[subIndex].attribute;
    49aa:	697b      	ldr	r3, [r7, #20]
    49ac:	6919      	ldr	r1, [r3, #16]
    49ae:	79fa      	ldrb	r2, [r7, #7]
    49b0:	4613      	mov	r3, r2
    49b2:	005b      	lsls	r3, r3, #1
    49b4:	4413      	add	r3, r2
    49b6:	009b      	lsls	r3, r3, #2
    49b8:	440b      	add	r3, r1
    49ba:	685b      	ldr	r3, [r3, #4]
    }
}
    49bc:	4618      	mov	r0, r3
    49be:	3724      	adds	r7, #36	; 0x24
    49c0:	46bd      	mov	sp, r7
    49c2:	bc80      	pop	{r7}
    49c4:	4770      	bx	lr

000049c6 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh>:


/******************************************************************************/
void* CO_SDO_Class::CO_OD_getDataPointer( uint32_t entryNo, uint8_t subIndex){
    49c6:	b480      	push	{r7}
    49c8:	b087      	sub	sp, #28
    49ca:	af00      	add	r7, sp, #0
    49cc:	60f8      	str	r0, [r7, #12]
    49ce:	60b9      	str	r1, [r7, #8]
    49d0:	4613      	mov	r3, r2
    49d2:	71fb      	strb	r3, [r7, #7]
    const CO_OD_entry_t* object = &SDO->OD[entryNo];
    49d4:	68fb      	ldr	r3, [r7, #12]
    49d6:	681b      	ldr	r3, [r3, #0]
    49d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    49da:	68ba      	ldr	r2, [r7, #8]
    49dc:	4613      	mov	r3, r2
    49de:	009b      	lsls	r3, r3, #2
    49e0:	4413      	add	r3, r2
    49e2:	009b      	lsls	r3, r3, #2
    49e4:	440b      	add	r3, r1
    49e6:	617b      	str	r3, [r7, #20]

    if(entryNo == 0xFFFFU){
    49e8:	68bb      	ldr	r3, [r7, #8]
    49ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
    49ee:	4293      	cmp	r3, r2
    49f0:	d101      	bne.n	49f6 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x30>
        return 0;
    49f2:	2300      	movs	r3, #0
    49f4:	e02a      	b.n	4a4c <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
    }

    if(object->maxSubIndex == 0U){   /* Object type is Var */
    49f6:	697b      	ldr	r3, [r7, #20]
    49f8:	791b      	ldrb	r3, [r3, #4]
    49fa:	2b00      	cmp	r3, #0
    49fc:	d102      	bne.n	4a04 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x3e>
        return object->pData;
    49fe:	697b      	ldr	r3, [r7, #20]
    4a00:	691b      	ldr	r3, [r3, #16]
    4a02:	e023      	b.n	4a4c <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
    }
    else if(object->attribute != 0U){/* Object type is Array */
    4a04:	697b      	ldr	r3, [r7, #20]
    4a06:	689b      	ldr	r3, [r3, #8]
    4a08:	2b00      	cmp	r3, #0
    4a0a:	d016      	beq.n	4a3a <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x74>
        if(subIndex==0){
    4a0c:	79fb      	ldrb	r3, [r7, #7]
    4a0e:	2b00      	cmp	r3, #0
    4a10:	d102      	bne.n	4a18 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x52>
            /* this is the data, for the subIndex 0 in the array */
            return (void*) &object->maxSubIndex;
    4a12:	697b      	ldr	r3, [r7, #20]
    4a14:	3304      	adds	r3, #4
    4a16:	e019      	b.n	4a4c <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
        }
        else if(object->pData == 0){
    4a18:	697b      	ldr	r3, [r7, #20]
    4a1a:	691b      	ldr	r3, [r3, #16]
    4a1c:	2b00      	cmp	r3, #0
    4a1e:	d101      	bne.n	4a24 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x5e>
            /* data type is domain */
            return 0;
    4a20:	2300      	movs	r3, #0
    4a22:	e013      	b.n	4a4c <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
        }
        else{
            return (void*)(((int8_t*)object->pData) + ((subIndex-1) * object->length));
    4a24:	697b      	ldr	r3, [r7, #20]
    4a26:	691a      	ldr	r2, [r3, #16]
    4a28:	79fb      	ldrb	r3, [r7, #7]
    4a2a:	3b01      	subs	r3, #1
    4a2c:	4619      	mov	r1, r3
    4a2e:	697b      	ldr	r3, [r7, #20]
    4a30:	68db      	ldr	r3, [r3, #12]
    4a32:	fb03 f301 	mul.w	r3, r3, r1
    4a36:	4413      	add	r3, r2
    4a38:	e008      	b.n	4a4c <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
        }
    }
    else{                            /* Object Type is Record */
        return ((const CO_OD_entryRecord_t*)(object->pData))[subIndex].pData;
    4a3a:	697b      	ldr	r3, [r7, #20]
    4a3c:	6919      	ldr	r1, [r3, #16]
    4a3e:	79fa      	ldrb	r2, [r7, #7]
    4a40:	4613      	mov	r3, r2
    4a42:	005b      	lsls	r3, r3, #1
    4a44:	4413      	add	r3, r2
    4a46:	009b      	lsls	r3, r3, #2
    4a48:	440b      	add	r3, r1
    4a4a:	681b      	ldr	r3, [r3, #0]
    }
}
    4a4c:	4618      	mov	r0, r3
    4a4e:	371c      	adds	r7, #28
    4a50:	46bd      	mov	sp, r7
    4a52:	bc80      	pop	{r7}
    4a54:	4770      	bx	lr

00004a56 <_ZN12CO_SDO_Class21CO_OD_getFlagsPointerEmh>:


/******************************************************************************/
uint8_t* CO_SDO_Class::CO_OD_getFlagsPointer( uint32_t entryNo, uint8_t subIndex){
    4a56:	b480      	push	{r7}
    4a58:	b087      	sub	sp, #28
    4a5a:	af00      	add	r7, sp, #0
    4a5c:	60f8      	str	r0, [r7, #12]
    4a5e:	60b9      	str	r1, [r7, #8]
    4a60:	4613      	mov	r3, r2
    4a62:	71fb      	strb	r3, [r7, #7]
    CO_OD_extension_t* ext;

    if((entryNo == 0xFFFFU) || (SDO->ODExtensions == 0)){
    4a64:	68bb      	ldr	r3, [r7, #8]
    4a66:	f64f 72ff 	movw	r2, #65535	; 0xffff
    4a6a:	4293      	cmp	r3, r2
    4a6c:	d004      	beq.n	4a78 <_ZN12CO_SDO_Class21CO_OD_getFlagsPointerEmh+0x22>
    4a6e:	68fb      	ldr	r3, [r7, #12]
    4a70:	681b      	ldr	r3, [r3, #0]
    4a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    4a74:	2b00      	cmp	r3, #0
    4a76:	d101      	bne.n	4a7c <_ZN12CO_SDO_Class21CO_OD_getFlagsPointerEmh+0x26>
        return 0;
    4a78:	2300      	movs	r3, #0
    4a7a:	e00d      	b.n	4a98 <_ZN12CO_SDO_Class21CO_OD_getFlagsPointerEmh+0x42>
    }

    ext = &SDO->ODExtensions[entryNo];
    4a7c:	68fb      	ldr	r3, [r7, #12]
    4a7e:	681b      	ldr	r3, [r3, #0]
    4a80:	6b59      	ldr	r1, [r3, #52]	; 0x34
    4a82:	68ba      	ldr	r2, [r7, #8]
    4a84:	4613      	mov	r3, r2
    4a86:	005b      	lsls	r3, r3, #1
    4a88:	4413      	add	r3, r2
    4a8a:	009b      	lsls	r3, r3, #2
    4a8c:	440b      	add	r3, r1
    4a8e:	617b      	str	r3, [r7, #20]

    return &ext->flags[subIndex];
    4a90:	697b      	ldr	r3, [r7, #20]
    4a92:	689a      	ldr	r2, [r3, #8]
    4a94:	79fb      	ldrb	r3, [r7, #7]
    4a96:	4413      	add	r3, r2
}
    4a98:	4618      	mov	r0, r3
    4a9a:	371c      	adds	r7, #28
    4a9c:	46bd      	mov	sp, r7
    4a9e:	bc80      	pop	{r7}
    4aa0:	4770      	bx	lr
	...

00004aa4 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_SDO_initTransfer( uint32_t index, uint8_t subIndex){
    4aa4:	b590      	push	{r4, r7, lr}
    4aa6:	b087      	sub	sp, #28
    4aa8:	af00      	add	r7, sp, #0
    4aaa:	60f8      	str	r0, [r7, #12]
    4aac:	60b9      	str	r1, [r7, #8]
    4aae:	4613      	mov	r3, r2
    4ab0:	71fb      	strb	r3, [r7, #7]

    SDO->ODF_arg.index = index;
    4ab2:	68fb      	ldr	r3, [r7, #12]
    4ab4:	681b      	ldr	r3, [r3, #0]
    4ab6:	68ba      	ldr	r2, [r7, #8]
    4ab8:	659a      	str	r2, [r3, #88]	; 0x58
    SDO->ODF_arg.subIndex = subIndex;
    4aba:	68fb      	ldr	r3, [r7, #12]
    4abc:	681b      	ldr	r3, [r3, #0]
    4abe:	79fa      	ldrb	r2, [r7, #7]
    4ac0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* find object in Object Dictionary */
    SDO->entryNo = CO_OD_find( index);
    4ac4:	68fb      	ldr	r3, [r7, #12]
    4ac6:	681c      	ldr	r4, [r3, #0]
    4ac8:	68b9      	ldr	r1, [r7, #8]
    4aca:	68f8      	ldr	r0, [r7, #12]
    4acc:	4b51      	ldr	r3, [pc, #324]	; (4c14 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
    4ace:	4798      	blx	r3
    4ad0:	4603      	mov	r3, r0
    4ad2:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(SDO->entryNo == 0xFFFFU){
    4ad4:	68fb      	ldr	r3, [r7, #12]
    4ad6:	681b      	ldr	r3, [r3, #0]
    4ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4ada:	f64f 72ff 	movw	r2, #65535	; 0xffff
    4ade:	4293      	cmp	r3, r2
    4ae0:	d101      	bne.n	4ae6 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x42>
        return CO_SDO_AB_NOT_EXIST ;     /* object does not exist in OD */
    4ae2:	4b4d      	ldr	r3, [pc, #308]	; (4c18 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x174>)
    4ae4:	e091      	b.n	4c0a <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x166>
    }

    /* verify existance of subIndex */
    if(subIndex > SDO->OD[SDO->entryNo].maxSubIndex &&
    4ae6:	79f9      	ldrb	r1, [r7, #7]
    4ae8:	68fb      	ldr	r3, [r7, #12]
    4aea:	681b      	ldr	r3, [r3, #0]
    4aec:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    4aee:	68fb      	ldr	r3, [r7, #12]
    4af0:	681b      	ldr	r3, [r3, #0]
    4af2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    4af4:	4613      	mov	r3, r2
    4af6:	009b      	lsls	r3, r3, #2
    4af8:	4413      	add	r3, r2
    4afa:	009b      	lsls	r3, r3, #2
    4afc:	4403      	add	r3, r0
    4afe:	791b      	ldrb	r3, [r3, #4]
    4b00:	4299      	cmp	r1, r3
    4b02:	dd0f      	ble.n	4b24 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x80>
            SDO->OD[SDO->entryNo].pData != NULL)
    4b04:	68fb      	ldr	r3, [r7, #12]
    4b06:	681b      	ldr	r3, [r3, #0]
    4b08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    4b0a:	68fb      	ldr	r3, [r7, #12]
    4b0c:	681b      	ldr	r3, [r3, #0]
    4b0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    4b10:	4613      	mov	r3, r2
    4b12:	009b      	lsls	r3, r3, #2
    4b14:	4413      	add	r3, r2
    4b16:	009b      	lsls	r3, r3, #2
    4b18:	440b      	add	r3, r1
    4b1a:	691b      	ldr	r3, [r3, #16]
    if(subIndex > SDO->OD[SDO->entryNo].maxSubIndex &&
    4b1c:	2b00      	cmp	r3, #0
    4b1e:	d001      	beq.n	4b24 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x80>
    {
        return CO_SDO_AB_SUB_UNKNOWN;     /* Sub-index does not exist. */
    4b20:	4b3e      	ldr	r3, [pc, #248]	; (4c1c <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x178>)
    4b22:	e072      	b.n	4c0a <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x166>
    }

    /* pointer to data in Object dictionary */
    SDO->ODF_arg.ODdataStorage = CO_OD_getDataPointer(SDO->entryNo, subIndex);
    4b24:	68fb      	ldr	r3, [r7, #12]
    4b26:	681c      	ldr	r4, [r3, #0]
    4b28:	68fb      	ldr	r3, [r7, #12]
    4b2a:	681b      	ldr	r3, [r3, #0]
    4b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4b2e:	79fa      	ldrb	r2, [r7, #7]
    4b30:	4619      	mov	r1, r3
    4b32:	68f8      	ldr	r0, [r7, #12]
    4b34:	4b3a      	ldr	r3, [pc, #232]	; (4c20 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x17c>)
    4b36:	4798      	blx	r3
    4b38:	4603      	mov	r3, r0
    4b3a:	64a3      	str	r3, [r4, #72]	; 0x48

    /* fill ODF_arg */
    SDO->ODF_arg.object = NULL;
    4b3c:	68fb      	ldr	r3, [r7, #12]
    4b3e:	681b      	ldr	r3, [r3, #0]
    4b40:	2200      	movs	r2, #0
    4b42:	641a      	str	r2, [r3, #64]	; 0x40
    if(SDO->ODExtensions){
    4b44:	68fb      	ldr	r3, [r7, #12]
    4b46:	681b      	ldr	r3, [r3, #0]
    4b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    4b4a:	2b00      	cmp	r3, #0
    4b4c:	d010      	beq.n	4b70 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0xcc>
        CO_OD_extension_t *ext = &SDO->ODExtensions[SDO->entryNo];
    4b4e:	68fb      	ldr	r3, [r7, #12]
    4b50:	681b      	ldr	r3, [r3, #0]
    4b52:	6b59      	ldr	r1, [r3, #52]	; 0x34
    4b54:	68fb      	ldr	r3, [r7, #12]
    4b56:	681b      	ldr	r3, [r3, #0]
    4b58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    4b5a:	4613      	mov	r3, r2
    4b5c:	005b      	lsls	r3, r3, #1
    4b5e:	4413      	add	r3, r2
    4b60:	009b      	lsls	r3, r3, #2
    4b62:	440b      	add	r3, r1
    4b64:	617b      	str	r3, [r7, #20]
        SDO->ODF_arg.object = ext->object;
    4b66:	68fb      	ldr	r3, [r7, #12]
    4b68:	681b      	ldr	r3, [r3, #0]
    4b6a:	697a      	ldr	r2, [r7, #20]
    4b6c:	6852      	ldr	r2, [r2, #4]
    4b6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    SDO->ODF_arg.data = SDO->databuffer;
    4b70:	68fb      	ldr	r3, [r7, #12]
    4b72:	681b      	ldr	r3, [r3, #0]
    4b74:	68fa      	ldr	r2, [r7, #12]
    4b76:	6812      	ldr	r2, [r2, #0]
    4b78:	3208      	adds	r2, #8
    4b7a:	645a      	str	r2, [r3, #68]	; 0x44
    SDO->ODF_arg.dataLength = CO_OD_getLength(SDO->entryNo, subIndex);
    4b7c:	68fb      	ldr	r3, [r7, #12]
    4b7e:	681c      	ldr	r4, [r3, #0]
    4b80:	68fb      	ldr	r3, [r7, #12]
    4b82:	681b      	ldr	r3, [r3, #0]
    4b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4b86:	79fa      	ldrb	r2, [r7, #7]
    4b88:	4619      	mov	r1, r3
    4b8a:	68f8      	ldr	r0, [r7, #12]
    4b8c:	4b25      	ldr	r3, [pc, #148]	; (4c24 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x180>)
    4b8e:	4798      	blx	r3
    4b90:	4603      	mov	r3, r0
    4b92:	64e3      	str	r3, [r4, #76]	; 0x4c
    SDO->ODF_arg.attribute = CO_OD_getAttribute(SDO->entryNo, subIndex);
    4b94:	68fb      	ldr	r3, [r7, #12]
    4b96:	681c      	ldr	r4, [r3, #0]
    4b98:	68fb      	ldr	r3, [r7, #12]
    4b9a:	681b      	ldr	r3, [r3, #0]
    4b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4b9e:	79fa      	ldrb	r2, [r7, #7]
    4ba0:	4619      	mov	r1, r3
    4ba2:	68f8      	ldr	r0, [r7, #12]
    4ba4:	4b20      	ldr	r3, [pc, #128]	; (4c28 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x184>)
    4ba6:	4798      	blx	r3
    4ba8:	4603      	mov	r3, r0
    4baa:	6523      	str	r3, [r4, #80]	; 0x50
    SDO->ODF_arg.pFlags = CO_OD_getFlagsPointer( SDO->entryNo, subIndex);
    4bac:	68fb      	ldr	r3, [r7, #12]
    4bae:	681c      	ldr	r4, [r3, #0]
    4bb0:	68fb      	ldr	r3, [r7, #12]
    4bb2:	681b      	ldr	r3, [r3, #0]
    4bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4bb6:	79fa      	ldrb	r2, [r7, #7]
    4bb8:	4619      	mov	r1, r3
    4bba:	68f8      	ldr	r0, [r7, #12]
    4bbc:	4b1b      	ldr	r3, [pc, #108]	; (4c2c <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x188>)
    4bbe:	4798      	blx	r3
    4bc0:	4603      	mov	r3, r0
    4bc2:	6563      	str	r3, [r4, #84]	; 0x54

    SDO->ODF_arg.firstSegment = true;
    4bc4:	68fb      	ldr	r3, [r7, #12]
    4bc6:	681b      	ldr	r3, [r3, #0]
    4bc8:	2201      	movs	r2, #1
    4bca:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
    SDO->ODF_arg.lastSegment = true;
    4bce:	68fb      	ldr	r3, [r7, #12]
    4bd0:	681b      	ldr	r3, [r3, #0]
    4bd2:	2201      	movs	r2, #1
    4bd4:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f

    /* indicate total data length, if not domain */
    SDO->ODF_arg.dataLengthTotal = (SDO->ODF_arg.ODdataStorage) ? SDO->ODF_arg.dataLength : 0U;
    4bd8:	68fb      	ldr	r3, [r7, #12]
    4bda:	681a      	ldr	r2, [r3, #0]
    4bdc:	68fb      	ldr	r3, [r7, #12]
    4bde:	681b      	ldr	r3, [r3, #0]
    4be0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4be2:	2b00      	cmp	r3, #0
    4be4:	d003      	beq.n	4bee <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x14a>
    4be6:	68fb      	ldr	r3, [r7, #12]
    4be8:	681b      	ldr	r3, [r3, #0]
    4bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    4bec:	e000      	b.n	4bf0 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x14c>
    4bee:	2300      	movs	r3, #0
    4bf0:	6613      	str	r3, [r2, #96]	; 0x60

    SDO->ODF_arg.offset = 0U;
    4bf2:	68fb      	ldr	r3, [r7, #12]
    4bf4:	681b      	ldr	r3, [r3, #0]
    4bf6:	2200      	movs	r2, #0
    4bf8:	665a      	str	r2, [r3, #100]	; 0x64

    /* verify length */
    if(SDO->ODF_arg.dataLength > CO_SDO_BUFFER_SIZE){
    4bfa:	68fb      	ldr	r3, [r7, #12]
    4bfc:	681b      	ldr	r3, [r3, #0]
    4bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    4c00:	2b20      	cmp	r3, #32
    4c02:	d901      	bls.n	4c08 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x164>
        return CO_SDO_AB_DEVICE_INCOMPAT;     /* general internal incompatibility in the device */
    4c04:	4b0a      	ldr	r3, [pc, #40]	; (4c30 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x18c>)
    4c06:	e000      	b.n	4c0a <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x166>
    }

    return 0U;
    4c08:	2300      	movs	r3, #0
}
    4c0a:	4618      	mov	r0, r3
    4c0c:	371c      	adds	r7, #28
    4c0e:	46bd      	mov	sp, r7
    4c10:	bd90      	pop	{r4, r7, pc}
    4c12:	bf00      	nop
    4c14:	000047d1 	.word	0x000047d1
    4c18:	06020000 	.word	0x06020000
    4c1c:	06090011 	.word	0x06090011
    4c20:	000049c7 	.word	0x000049c7
    4c24:	00004879 	.word	0x00004879
    4c28:	0000491d 	.word	0x0000491d
    4c2c:	00004a57 	.word	0x00004a57
    4c30:	06040047 	.word	0x06040047

00004c34 <_ZN12CO_SDO_Class13CO_SDO_readODEm>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_SDO_readOD(uint32_t SDOBufferSize){
    4c34:	b580      	push	{r7, lr}
    4c36:	b08a      	sub	sp, #40	; 0x28
    4c38:	af00      	add	r7, sp, #0
    4c3a:	6078      	str	r0, [r7, #4]
    4c3c:	6039      	str	r1, [r7, #0]
    uint8_t *SDObuffer = SDO->ODF_arg.data;
    4c3e:	687b      	ldr	r3, [r7, #4]
    4c40:	681b      	ldr	r3, [r3, #0]
    4c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4c44:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t *ODdata = (uint8_t*)SDO->ODF_arg.ODdataStorage;
    4c46:	687b      	ldr	r3, [r7, #4]
    4c48:	681b      	ldr	r3, [r3, #0]
    4c4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4c4c:	623b      	str	r3, [r7, #32]
    uint32_t length = SDO->ODF_arg.dataLength;
    4c4e:	687b      	ldr	r3, [r7, #4]
    4c50:	681b      	ldr	r3, [r3, #0]
    4c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    4c54:	61fb      	str	r3, [r7, #28]
    CO_OD_extension_t *ext = 0;
    4c56:	2300      	movs	r3, #0
    4c58:	61bb      	str	r3, [r7, #24]

    /* is object readable? */
    if((SDO->ODF_arg.attribute & CO_ODA_READABLE) == 0)
    4c5a:	687b      	ldr	r3, [r7, #4]
    4c5c:	681b      	ldr	r3, [r3, #0]
    4c5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    4c60:	f003 0304 	and.w	r3, r3, #4
    4c64:	2b00      	cmp	r3, #0
    4c66:	d101      	bne.n	4c6c <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x38>
        return CO_SDO_AB_WRITEONLY;     /* attempt to read a write-only object */
    4c68:	4b38      	ldr	r3, [pc, #224]	; (4d4c <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x118>)
    4c6a:	e06b      	b.n	4d44 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x110>

    /* find extension */
    if(SDO->ODExtensions != NULL){
    4c6c:	687b      	ldr	r3, [r7, #4]
    4c6e:	681b      	ldr	r3, [r3, #0]
    4c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    4c72:	2b00      	cmp	r3, #0
    4c74:	d00b      	beq.n	4c8e <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x5a>
        ext = &SDO->ODExtensions[SDO->entryNo];
    4c76:	687b      	ldr	r3, [r7, #4]
    4c78:	681b      	ldr	r3, [r3, #0]
    4c7a:	6b59      	ldr	r1, [r3, #52]	; 0x34
    4c7c:	687b      	ldr	r3, [r7, #4]
    4c7e:	681b      	ldr	r3, [r3, #0]
    4c80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    4c82:	4613      	mov	r3, r2
    4c84:	005b      	lsls	r3, r3, #1
    4c86:	4413      	add	r3, r2
    4c88:	009b      	lsls	r3, r3, #2
    4c8a:	440b      	add	r3, r1
    4c8c:	61bb      	str	r3, [r7, #24]
    }

    /* copy data from OD to SDO buffer if not domain */
    if(ODdata != NULL){
    4c8e:	6a3b      	ldr	r3, [r7, #32]
    4c90:	2b00      	cmp	r3, #0
    4c92:	d01e      	beq.n	4cd2 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x9e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    4c94:	f3ef 8310 	mrs	r3, PRIMASK
    4c98:	60bb      	str	r3, [r7, #8]
  return(result);
    4c9a:	68bb      	ldr	r3, [r7, #8]
        CO_LOCK_OD();
    4c9c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    4c9e:	b672      	cpsid	i
        while(length--) *(SDObuffer++) = *(ODdata++);
    4ca0:	69fb      	ldr	r3, [r7, #28]
    4ca2:	1e5a      	subs	r2, r3, #1
    4ca4:	61fa      	str	r2, [r7, #28]
    4ca6:	2b00      	cmp	r3, #0
    4ca8:	bf14      	ite	ne
    4caa:	2301      	movne	r3, #1
    4cac:	2300      	moveq	r3, #0
    4cae:	b2db      	uxtb	r3, r3
    4cb0:	2b00      	cmp	r3, #0
    4cb2:	d008      	beq.n	4cc6 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x92>
    4cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4cb6:	1c5a      	adds	r2, r3, #1
    4cb8:	627a      	str	r2, [r7, #36]	; 0x24
    4cba:	6a3a      	ldr	r2, [r7, #32]
    4cbc:	1c51      	adds	r1, r2, #1
    4cbe:	6239      	str	r1, [r7, #32]
    4cc0:	7812      	ldrb	r2, [r2, #0]
    4cc2:	701a      	strb	r2, [r3, #0]
    4cc4:	e7ec      	b.n	4ca0 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x6c>
    4cc6:	697b      	ldr	r3, [r7, #20]
    4cc8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    4cca:	68fb      	ldr	r3, [r7, #12]
    4ccc:	f383 8810 	msr	PRIMASK, r3
    4cd0:	e005      	b.n	4cde <_ZN12CO_SDO_Class13CO_SDO_readODEm+0xaa>
        CO_UNLOCK_OD();
    }
    /* if domain, Object dictionary function MUST exist */
    else{
        if(ext->pODFunc == NULL){
    4cd2:	69bb      	ldr	r3, [r7, #24]
    4cd4:	681b      	ldr	r3, [r3, #0]
    4cd6:	2b00      	cmp	r3, #0
    4cd8:	d101      	bne.n	4cde <_ZN12CO_SDO_Class13CO_SDO_readODEm+0xaa>
            return CO_SDO_AB_DEVICE_INCOMPAT;     /* general internal incompatibility in the device */
    4cda:	4b1d      	ldr	r3, [pc, #116]	; (4d50 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x11c>)
    4cdc:	e032      	b.n	4d44 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x110>
        }
    }

    /* call Object dictionary function if registered */
    SDO->ODF_arg.reading = true;
    4cde:	687b      	ldr	r3, [r7, #4]
    4ce0:	681b      	ldr	r3, [r3, #0]
    4ce2:	2201      	movs	r2, #1
    4ce4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if(ext->pODFunc != NULL){
    4ce8:	69bb      	ldr	r3, [r7, #24]
    4cea:	681b      	ldr	r3, [r3, #0]
    4cec:	2b00      	cmp	r3, #0
    4cee:	d019      	beq.n	4d24 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0xf0>
        uint32_t abortCode = ext->pODFunc(&SDO->ODF_arg);
    4cf0:	69bb      	ldr	r3, [r7, #24]
    4cf2:	681b      	ldr	r3, [r3, #0]
    4cf4:	687a      	ldr	r2, [r7, #4]
    4cf6:	6812      	ldr	r2, [r2, #0]
    4cf8:	3240      	adds	r2, #64	; 0x40
    4cfa:	4610      	mov	r0, r2
    4cfc:	4798      	blx	r3
    4cfe:	6138      	str	r0, [r7, #16]
        if(abortCode != 0U){
    4d00:	693b      	ldr	r3, [r7, #16]
    4d02:	2b00      	cmp	r3, #0
    4d04:	d001      	beq.n	4d0a <_ZN12CO_SDO_Class13CO_SDO_readODEm+0xd6>
            return abortCode;
    4d06:	693b      	ldr	r3, [r7, #16]
    4d08:	e01c      	b.n	4d44 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x110>
        }

        /* dataLength (upadted by pODFunc) must be inside limits */
        if((SDO->ODF_arg.dataLength == 0U) || (SDO->ODF_arg.dataLength > SDOBufferSize)){
    4d0a:	687b      	ldr	r3, [r7, #4]
    4d0c:	681b      	ldr	r3, [r3, #0]
    4d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    4d10:	2b00      	cmp	r3, #0
    4d12:	d005      	beq.n	4d20 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0xec>
    4d14:	687b      	ldr	r3, [r7, #4]
    4d16:	681b      	ldr	r3, [r3, #0]
    4d18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    4d1a:	683b      	ldr	r3, [r7, #0]
    4d1c:	429a      	cmp	r2, r3
    4d1e:	d901      	bls.n	4d24 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0xf0>
            return CO_SDO_AB_DEVICE_INCOMPAT;     /* general internal incompatibility in the device */
    4d20:	4b0b      	ldr	r3, [pc, #44]	; (4d50 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x11c>)
    4d22:	e00f      	b.n	4d44 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x110>
        }
    }
    SDO->ODF_arg.offset += SDO->ODF_arg.dataLength;
    4d24:	687b      	ldr	r3, [r7, #4]
    4d26:	681b      	ldr	r3, [r3, #0]
    4d28:	687a      	ldr	r2, [r7, #4]
    4d2a:	6812      	ldr	r2, [r2, #0]
    4d2c:	6e51      	ldr	r1, [r2, #100]	; 0x64
    4d2e:	687a      	ldr	r2, [r7, #4]
    4d30:	6812      	ldr	r2, [r2, #0]
    4d32:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    4d34:	440a      	add	r2, r1
    4d36:	665a      	str	r2, [r3, #100]	; 0x64
    SDO->ODF_arg.firstSegment = false;
    4d38:	687b      	ldr	r3, [r7, #4]
    4d3a:	681b      	ldr	r3, [r3, #0]
    4d3c:	2200      	movs	r2, #0
    4d3e:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
            *(buf2--) = b;
        }
    }
#endif

    return 0U;
    4d42:	2300      	movs	r3, #0
}
    4d44:	4618      	mov	r0, r3
    4d46:	3728      	adds	r7, #40	; 0x28
    4d48:	46bd      	mov	sp, r7
    4d4a:	bd80      	pop	{r7, pc}
    4d4c:	06010001 	.word	0x06010001
    4d50:	06040047 	.word	0x06040047

00004d54 <_ZN12CO_SDO_Class14CO_SDO_writeODEm>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_SDO_writeOD(uint32_t length){
    4d54:	b580      	push	{r7, lr}
    4d56:	b08a      	sub	sp, #40	; 0x28
    4d58:	af00      	add	r7, sp, #0
    4d5a:	6078      	str	r0, [r7, #4]
    4d5c:	6039      	str	r1, [r7, #0]
    uint8_t *SDObuffer = SDO->ODF_arg.data;
    4d5e:	687b      	ldr	r3, [r7, #4]
    4d60:	681b      	ldr	r3, [r3, #0]
    4d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4d64:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t *ODdata = (uint8_t*)SDO->ODF_arg.ODdataStorage;
    4d66:	687b      	ldr	r3, [r7, #4]
    4d68:	681b      	ldr	r3, [r3, #0]
    4d6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4d6c:	623b      	str	r3, [r7, #32]
    bool_t exception_1003 = false;
    4d6e:	2300      	movs	r3, #0
    4d70:	77fb      	strb	r3, [r7, #31]

    /* is object writeable? */
    if((SDO->ODF_arg.attribute & CO_ODA_WRITEABLE) == 0){
    4d72:	687b      	ldr	r3, [r7, #4]
    4d74:	681b      	ldr	r3, [r3, #0]
    4d76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    4d78:	f003 0308 	and.w	r3, r3, #8
    4d7c:	2b00      	cmp	r3, #0
    4d7e:	d101      	bne.n	4d84 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x30>
        return CO_SDO_AB_READONLY;     /* attempt to write a read-only object */
    4d80:	4b3f      	ldr	r3, [pc, #252]	; (4e80 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x12c>)
    4d82:	e079      	b.n	4e78 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x124>
    }

    /* length of domain data is application specific and not verified */
    if(ODdata == 0){
    4d84:	6a3b      	ldr	r3, [r7, #32]
    4d86:	2b00      	cmp	r3, #0
    4d88:	d104      	bne.n	4d94 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x40>
        SDO->ODF_arg.dataLength = length;
    4d8a:	687b      	ldr	r3, [r7, #4]
    4d8c:	681b      	ldr	r3, [r3, #0]
    4d8e:	683a      	ldr	r2, [r7, #0]
    4d90:	64da      	str	r2, [r3, #76]	; 0x4c
    4d92:	e007      	b.n	4da4 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x50>
    }

    /* verify length except for domain data type */
    else if(SDO->ODF_arg.dataLength != length){
    4d94:	687b      	ldr	r3, [r7, #4]
    4d96:	681b      	ldr	r3, [r3, #0]
    4d98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    4d9a:	683b      	ldr	r3, [r7, #0]
    4d9c:	429a      	cmp	r2, r3
    4d9e:	d001      	beq.n	4da4 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x50>
        return CO_SDO_AB_TYPE_MISMATCH;     /* Length of service parameter does not match */
    4da0:	4b38      	ldr	r3, [pc, #224]	; (4e84 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x130>)
    4da2:	e069      	b.n	4e78 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x124>
        }
    }
#endif

    /* call Object dictionary function if registered */
    SDO->ODF_arg.reading = false;
    4da4:	687b      	ldr	r3, [r7, #4]
    4da6:	681b      	ldr	r3, [r3, #0]
    4da8:	2200      	movs	r2, #0
    4daa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if(SDO->ODExtensions != NULL){
    4dae:	687b      	ldr	r3, [r7, #4]
    4db0:	681b      	ldr	r3, [r3, #0]
    4db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    4db4:	2b00      	cmp	r3, #0
    4db6:	d01c      	beq.n	4df2 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x9e>
        CO_OD_extension_t *ext = &SDO->ODExtensions[SDO->entryNo];
    4db8:	687b      	ldr	r3, [r7, #4]
    4dba:	681b      	ldr	r3, [r3, #0]
    4dbc:	6b59      	ldr	r1, [r3, #52]	; 0x34
    4dbe:	687b      	ldr	r3, [r7, #4]
    4dc0:	681b      	ldr	r3, [r3, #0]
    4dc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    4dc4:	4613      	mov	r3, r2
    4dc6:	005b      	lsls	r3, r3, #1
    4dc8:	4413      	add	r3, r2
    4dca:	009b      	lsls	r3, r3, #2
    4dcc:	440b      	add	r3, r1
    4dce:	61bb      	str	r3, [r7, #24]

        if(ext->pODFunc != NULL){
    4dd0:	69bb      	ldr	r3, [r7, #24]
    4dd2:	681b      	ldr	r3, [r3, #0]
    4dd4:	2b00      	cmp	r3, #0
    4dd6:	d00c      	beq.n	4df2 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x9e>
            uint32_t abortCode = ext->pODFunc(&SDO->ODF_arg);
    4dd8:	69bb      	ldr	r3, [r7, #24]
    4dda:	681b      	ldr	r3, [r3, #0]
    4ddc:	687a      	ldr	r2, [r7, #4]
    4dde:	6812      	ldr	r2, [r2, #0]
    4de0:	3240      	adds	r2, #64	; 0x40
    4de2:	4610      	mov	r0, r2
    4de4:	4798      	blx	r3
    4de6:	6178      	str	r0, [r7, #20]
            if(abortCode != 0U){
    4de8:	697b      	ldr	r3, [r7, #20]
    4dea:	2b00      	cmp	r3, #0
    4dec:	d001      	beq.n	4df2 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x9e>
                return abortCode;
    4dee:	697b      	ldr	r3, [r7, #20]
    4df0:	e042      	b.n	4e78 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x124>
            }
        }
    }
    SDO->ODF_arg.offset += SDO->ODF_arg.dataLength;
    4df2:	687b      	ldr	r3, [r7, #4]
    4df4:	681b      	ldr	r3, [r3, #0]
    4df6:	687a      	ldr	r2, [r7, #4]
    4df8:	6812      	ldr	r2, [r2, #0]
    4dfa:	6e51      	ldr	r1, [r2, #100]	; 0x64
    4dfc:	687a      	ldr	r2, [r7, #4]
    4dfe:	6812      	ldr	r2, [r2, #0]
    4e00:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    4e02:	440a      	add	r2, r1
    4e04:	665a      	str	r2, [r3, #100]	; 0x64
    SDO->ODF_arg.firstSegment = false;
    4e06:	687b      	ldr	r3, [r7, #4]
    4e08:	681b      	ldr	r3, [r3, #0]
    4e0a:	2200      	movs	r2, #0
    4e0c:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e

    /* Special exception: 1003,00 is writable from network, but not in OD  */
    if(SDO->ODF_arg.index == 0x1003 && SDO->ODF_arg.subIndex == 0) {
    4e10:	687b      	ldr	r3, [r7, #4]
    4e12:	681b      	ldr	r3, [r3, #0]
    4e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    4e16:	f241 0203 	movw	r2, #4099	; 0x1003
    4e1a:	4293      	cmp	r3, r2
    4e1c:	d107      	bne.n	4e2e <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0xda>
    4e1e:	687b      	ldr	r3, [r7, #4]
    4e20:	681b      	ldr	r3, [r3, #0]
    4e22:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
    4e26:	2b00      	cmp	r3, #0
    4e28:	d101      	bne.n	4e2e <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0xda>
        exception_1003 = true;
    4e2a:	2301      	movs	r3, #1
    4e2c:	77fb      	strb	r3, [r7, #31]
    }

    /* copy data from SDO buffer to OD if not domain */
    if(ODdata != NULL && exception_1003 == false){
    4e2e:	6a3b      	ldr	r3, [r7, #32]
    4e30:	2b00      	cmp	r3, #0
    4e32:	d020      	beq.n	4e76 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x122>
    4e34:	7ffb      	ldrb	r3, [r7, #31]
    4e36:	2b00      	cmp	r3, #0
    4e38:	d11d      	bne.n	4e76 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x122>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    4e3a:	f3ef 8310 	mrs	r3, PRIMASK
    4e3e:	60bb      	str	r3, [r7, #8]
  return(result);
    4e40:	68bb      	ldr	r3, [r7, #8]
        CO_LOCK_OD();
    4e42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
    4e44:	b672      	cpsid	i
        while(length--){
    4e46:	683b      	ldr	r3, [r7, #0]
    4e48:	1e5a      	subs	r2, r3, #1
    4e4a:	603a      	str	r2, [r7, #0]
    4e4c:	2b00      	cmp	r3, #0
    4e4e:	bf14      	ite	ne
    4e50:	2301      	movne	r3, #1
    4e52:	2300      	moveq	r3, #0
    4e54:	b2db      	uxtb	r3, r3
    4e56:	2b00      	cmp	r3, #0
    4e58:	d008      	beq.n	4e6c <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x118>
            *(ODdata++) = *(SDObuffer++);
    4e5a:	6a3b      	ldr	r3, [r7, #32]
    4e5c:	1c5a      	adds	r2, r3, #1
    4e5e:	623a      	str	r2, [r7, #32]
    4e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4e62:	1c51      	adds	r1, r2, #1
    4e64:	6279      	str	r1, [r7, #36]	; 0x24
    4e66:	7812      	ldrb	r2, [r2, #0]
    4e68:	701a      	strb	r2, [r3, #0]
        while(length--){
    4e6a:	e7ec      	b.n	4e46 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0xf2>
    4e6c:	693b      	ldr	r3, [r7, #16]
    4e6e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    4e70:	68fb      	ldr	r3, [r7, #12]
    4e72:	f383 8810 	msr	PRIMASK, r3
        }
        CO_UNLOCK_OD();
    }

    return 0;
    4e76:	2300      	movs	r3, #0
}
    4e78:	4618      	mov	r0, r3
    4e7a:	3728      	adds	r7, #40	; 0x28
    4e7c:	46bd      	mov	sp, r7
    4e7e:	bd80      	pop	{r7, pc}
    4e80:	06010002 	.word	0x06010002
    4e84:	06070010 	.word	0x06070010

00004e88 <_ZL12CO_SDO_abortP8CO_SDO_tm>:


/******************************************************************************/
static void CO_SDO_abort(CO_SDO_t *SDO,uint32_t code){
    4e88:	b580      	push	{r7, lr}
    4e8a:	b082      	sub	sp, #8
    4e8c:	af00      	add	r7, sp, #0
    4e8e:	6078      	str	r0, [r7, #4]
    4e90:	6039      	str	r1, [r7, #0]
    SDO->CANtxBuff->data[0] = 0x80;
    4e92:	687b      	ldr	r3, [r7, #4]
    4e94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    4e98:	2280      	movs	r2, #128	; 0x80
    4e9a:	715a      	strb	r2, [r3, #5]
    SDO->CANtxBuff->data[1] = SDO->ODF_arg.index & 0xFF;
    4e9c:	687b      	ldr	r3, [r7, #4]
    4e9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    4ea2:	687a      	ldr	r2, [r7, #4]
    4ea4:	6d92      	ldr	r2, [r2, #88]	; 0x58
    4ea6:	b2d2      	uxtb	r2, r2
    4ea8:	719a      	strb	r2, [r3, #6]
    SDO->CANtxBuff->data[2] = (SDO->ODF_arg.index>>8) & 0xFF;
    4eaa:	687b      	ldr	r3, [r7, #4]
    4eac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    4eb0:	687a      	ldr	r2, [r7, #4]
    4eb2:	6d92      	ldr	r2, [r2, #88]	; 0x58
    4eb4:	0a12      	lsrs	r2, r2, #8
    4eb6:	b2d2      	uxtb	r2, r2
    4eb8:	71da      	strb	r2, [r3, #7]
    SDO->CANtxBuff->data[3] = SDO->ODF_arg.subIndex;
    4eba:	687b      	ldr	r3, [r7, #4]
    4ebc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    4ec0:	687a      	ldr	r2, [r7, #4]
    4ec2:	f892 205c 	ldrb.w	r2, [r2, #92]	; 0x5c
    4ec6:	721a      	strb	r2, [r3, #8]
   ptrCODriverClass->CO_memcpySwap4(&SDO->CANtxBuff->data[4], &code);
    4ec8:	4b0f      	ldr	r3, [pc, #60]	; (4f08 <_ZL12CO_SDO_abortP8CO_SDO_tm+0x80>)
    4eca:	681b      	ldr	r3, [r3, #0]
    4ecc:	1d18      	adds	r0, r3, #4
    4ece:	687b      	ldr	r3, [r7, #4]
    4ed0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    4ed4:	3309      	adds	r3, #9
    4ed6:	463a      	mov	r2, r7
    4ed8:	4619      	mov	r1, r3
    4eda:	4b0c      	ldr	r3, [pc, #48]	; (4f0c <_ZL12CO_SDO_abortP8CO_SDO_tm+0x84>)
    4edc:	4798      	blx	r3
    SDO->state = CO_SDO_ST_IDLE;
    4ede:	687b      	ldr	r3, [r7, #4]
    4ee0:	2200      	movs	r2, #0
    4ee2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    SDO->CANrxNew = false;
    4ee6:	687b      	ldr	r3, [r7, #4]
    4ee8:	2200      	movs	r2, #0
    4eea:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
    ptrCODriverClass->CAN_Send(SDO->CANtxBuff);
    4eee:	4b06      	ldr	r3, [pc, #24]	; (4f08 <_ZL12CO_SDO_abortP8CO_SDO_tm+0x80>)
    4ef0:	681a      	ldr	r2, [r3, #0]
    4ef2:	687b      	ldr	r3, [r7, #4]
    4ef4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    4ef8:	4619      	mov	r1, r3
    4efa:	4610      	mov	r0, r2
    4efc:	4b04      	ldr	r3, [pc, #16]	; (4f10 <_ZL12CO_SDO_abortP8CO_SDO_tm+0x88>)
    4efe:	4798      	blx	r3
}
    4f00:	bf00      	nop
    4f02:	3708      	adds	r7, #8
    4f04:	46bd      	mov	sp, r7
    4f06:	bd80      	pop	{r7, pc}
    4f08:	20000960 	.word	0x20000960
    4f0c:	00004365 	.word	0x00004365
    4f10:	00001621 	.word	0x00001621

00004f14 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm>:
int8_t CO_SDO_Class::CO_SDO_process(
         bool_t                  NMTisPreOrOperational,
        uint32_t                timeDifference_ms,
        uint32_t                SDOtimeoutTime,
        uint32_t               *timerNext_ms)
{
    4f14:	b5b0      	push	{r4, r5, r7, lr}
    4f16:	b092      	sub	sp, #72	; 0x48
    4f18:	af00      	add	r7, sp, #0
    4f1a:	60f8      	str	r0, [r7, #12]
    4f1c:	607a      	str	r2, [r7, #4]
    4f1e:	603b      	str	r3, [r7, #0]
    4f20:	460b      	mov	r3, r1
    4f22:	72fb      	strb	r3, [r7, #11]
    CO_SDO_state_t state = CO_SDO_ST_IDLE;
    4f24:	2300      	movs	r3, #0
    4f26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    bool_t timeoutSubblockDownolad = false;
    4f2a:	2300      	movs	r3, #0
    4f2c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    bool_t sendResponse = false;
    4f30:	2300      	movs	r3, #0
    4f32:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	
    /* return if idle */
    if((SDO->state == CO_SDO_ST_IDLE) && (!SDO->CANrxNew)){
    4f36:	68fb      	ldr	r3, [r7, #12]
    4f38:	681b      	ldr	r3, [r3, #0]
    4f3a:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
    4f3e:	2b00      	cmp	r3, #0
    4f40:	d108      	bne.n	4f54 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x40>
    4f42:	68fb      	ldr	r3, [r7, #12]
    4f44:	681b      	ldr	r3, [r3, #0]
    4f46:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
    4f4a:	2b00      	cmp	r3, #0
    4f4c:	d102      	bne.n	4f54 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x40>
	//	printf("CO_SDO_ST_IDLE\n\r");
        return 0;
    4f4e:	2300      	movs	r3, #0
    4f50:	f001 b976 	b.w	6240 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
    }

    /* SDO is allowed to work only in operational or pre-operational NMT state */
    if(!NMTisPreOrOperational){
    4f54:	7afb      	ldrb	r3, [r7, #11]
    4f56:	2b00      	cmp	r3, #0
    4f58:	d10c      	bne.n	4f74 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x60>
        SDO->state = CO_SDO_ST_IDLE;
    4f5a:	68fb      	ldr	r3, [r7, #12]
    4f5c:	681b      	ldr	r3, [r3, #0]
    4f5e:	2200      	movs	r2, #0
    4f60:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        SDO->CANrxNew = false;
    4f64:	68fb      	ldr	r3, [r7, #12]
    4f66:	681b      	ldr	r3, [r3, #0]
    4f68:	2200      	movs	r2, #0
    4f6a:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	//	printf("!NMTisPreOrOperational\n\r");
        return 0;
    4f6e:	2300      	movs	r3, #0
    4f70:	f001 b966 	b.w	6240 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
    }

    /* Is something new to process? */
    if((!SDO->CANtxBuff->bufferFull) && ((SDO->CANrxNew) || (SDO->state == CO_SDO_ST_UPLOAD_BL_SUBBLOCK))){
    4f74:	68fb      	ldr	r3, [r7, #12]
    4f76:	681b      	ldr	r3, [r3, #0]
    4f78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    4f7c:	7b5b      	ldrb	r3, [r3, #13]
    4f7e:	b2db      	uxtb	r3, r3
    4f80:	2b00      	cmp	r3, #0
    4f82:	d10d      	bne.n	4fa0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x8c>
    4f84:	68fb      	ldr	r3, [r7, #12]
    4f86:	681b      	ldr	r3, [r3, #0]
    4f88:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
    4f8c:	2b00      	cmp	r3, #0
    4f8e:	d105      	bne.n	4f9c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x88>
    4f90:	68fb      	ldr	r3, [r7, #12]
    4f92:	681b      	ldr	r3, [r3, #0]
    4f94:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
    4f98:	2b26      	cmp	r3, #38	; 0x26
    4f9a:	d101      	bne.n	4fa0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x8c>
    4f9c:	2301      	movs	r3, #1
    4f9e:	e000      	b.n	4fa2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x8e>
    4fa0:	2300      	movs	r3, #0
    4fa2:	2b00      	cmp	r3, #0
    4fa4:	f000 80eb 	beq.w	517e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x26a>
        uint8_t CCS = SDO->CANrxData[0] >> 5;   /* Client command specifier */
    4fa8:	68fb      	ldr	r3, [r7, #12]
    4faa:	681b      	ldr	r3, [r3, #0]
    4fac:	781b      	ldrb	r3, [r3, #0]
    4fae:	115b      	asrs	r3, r3, #5
    4fb0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		//printf("Is something new to process\n\r");
        /* reset timeout */
        if(SDO->state != CO_SDO_ST_UPLOAD_BL_SUBBLOCK)
    4fb4:	68fb      	ldr	r3, [r7, #12]
    4fb6:	681b      	ldr	r3, [r3, #0]
    4fb8:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
    4fbc:	2b26      	cmp	r3, #38	; 0x26
    4fbe:	d003      	beq.n	4fc8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xb4>
            SDO->timeoutTimer = 0;
    4fc0:	68fb      	ldr	r3, [r7, #12]
    4fc2:	681b      	ldr	r3, [r3, #0]
    4fc4:	2200      	movs	r2, #0
    4fc6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* clear response buffer */
        SDO->CANtxBuff->data[0] = SDO->CANtxBuff->data[1] = SDO->CANtxBuff->data[2] = SDO->CANtxBuff->data[3] = 0;
    4fc8:	68fb      	ldr	r3, [r7, #12]
    4fca:	681b      	ldr	r3, [r3, #0]
    4fcc:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    4fd0:	68fb      	ldr	r3, [r7, #12]
    4fd2:	681b      	ldr	r3, [r3, #0]
    4fd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    4fd8:	68fa      	ldr	r2, [r7, #12]
    4fda:	6812      	ldr	r2, [r2, #0]
    4fdc:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
    4fe0:	68f9      	ldr	r1, [r7, #12]
    4fe2:	6809      	ldr	r1, [r1, #0]
    4fe4:	f8d1 1084 	ldr.w	r1, [r1, #132]	; 0x84
    4fe8:	2400      	movs	r4, #0
    4fea:	720c      	strb	r4, [r1, #8]
    4fec:	7a09      	ldrb	r1, [r1, #8]
    4fee:	71d1      	strb	r1, [r2, #7]
    4ff0:	79d2      	ldrb	r2, [r2, #7]
    4ff2:	719a      	strb	r2, [r3, #6]
    4ff4:	799b      	ldrb	r3, [r3, #6]
    4ff6:	7143      	strb	r3, [r0, #5]
        SDO->CANtxBuff->data[4] = SDO->CANtxBuff->data[5] = SDO->CANtxBuff->data[6] = SDO->CANtxBuff->data[7] = 0;
    4ff8:	68fb      	ldr	r3, [r7, #12]
    4ffa:	681b      	ldr	r3, [r3, #0]
    4ffc:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    5000:	68fb      	ldr	r3, [r7, #12]
    5002:	681b      	ldr	r3, [r3, #0]
    5004:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    5008:	68fa      	ldr	r2, [r7, #12]
    500a:	6812      	ldr	r2, [r2, #0]
    500c:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
    5010:	68f9      	ldr	r1, [r7, #12]
    5012:	6809      	ldr	r1, [r1, #0]
    5014:	f8d1 1084 	ldr.w	r1, [r1, #132]	; 0x84
    5018:	2400      	movs	r4, #0
    501a:	730c      	strb	r4, [r1, #12]
    501c:	7b09      	ldrb	r1, [r1, #12]
    501e:	72d1      	strb	r1, [r2, #11]
    5020:	7ad2      	ldrb	r2, [r2, #11]
    5022:	729a      	strb	r2, [r3, #10]
    5024:	7a9b      	ldrb	r3, [r3, #10]
    5026:	7243      	strb	r3, [r0, #9]

        /* Is abort from client? */
        if((SDO->CANrxNew) && (SDO->CANrxData[0] == CCS_ABORT)){
    5028:	68fb      	ldr	r3, [r7, #12]
    502a:	681b      	ldr	r3, [r3, #0]
    502c:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
    5030:	2b00      	cmp	r3, #0
    5032:	d012      	beq.n	505a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x146>
    5034:	68fb      	ldr	r3, [r7, #12]
    5036:	681b      	ldr	r3, [r3, #0]
    5038:	781b      	ldrb	r3, [r3, #0]
    503a:	2b04      	cmp	r3, #4
    503c:	d10d      	bne.n	505a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x146>
            SDO->state = CO_SDO_ST_IDLE;
    503e:	68fb      	ldr	r3, [r7, #12]
    5040:	681b      	ldr	r3, [r3, #0]
    5042:	2200      	movs	r2, #0
    5044:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            SDO->CANrxNew = false;
    5048:	68fb      	ldr	r3, [r7, #12]
    504a:	681b      	ldr	r3, [r3, #0]
    504c:	2200      	movs	r2, #0
    504e:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
            return -1;
    5052:	f04f 33ff 	mov.w	r3, #4294967295
    5056:	f001 b8f3 	b.w	6240 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
        }

        /* continue with previous SDO communication or start new */
        if(SDO->state != CO_SDO_ST_IDLE){
    505a:	68fb      	ldr	r3, [r7, #12]
    505c:	681b      	ldr	r3, [r3, #0]
    505e:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
    5062:	2b00      	cmp	r3, #0
    5064:	d006      	beq.n	5074 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x160>
            state = SDO->state;
    5066:	68fb      	ldr	r3, [r7, #12]
    5068:	681b      	ldr	r3, [r3, #0]
    506a:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
    506e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    5072:	e084      	b.n	517e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x26a>
        else{
            uint32_t abortCode;
            uint32_t index;
			
            /* Is client command specifier valid */
            if((CCS != CCS_DOWNLOAD_INITIATE) && (CCS != CCS_UPLOAD_INITIATE) &&
    5074:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    5078:	2b01      	cmp	r3, #1
    507a:	d015      	beq.n	50a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x194>
    507c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    5080:	2b02      	cmp	r3, #2
    5082:	d011      	beq.n	50a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x194>
    5084:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    5088:	2b06      	cmp	r3, #6
    508a:	d00d      	beq.n	50a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x194>
                (CCS != CCS_DOWNLOAD_BLOCK) && (CCS != CCS_UPLOAD_BLOCK)){
    508c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    5090:	2b05      	cmp	r3, #5
    5092:	d009      	beq.n	50a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x194>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
    5094:	68fb      	ldr	r3, [r7, #12]
    5096:	681b      	ldr	r3, [r3, #0]
    5098:	4992      	ldr	r1, [pc, #584]	; (52e4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3d0>)
    509a:	4618      	mov	r0, r3
    509c:	4b92      	ldr	r3, [pc, #584]	; (52e8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3d4>)
    509e:	4798      	blx	r3
                return -1;
    50a0:	f04f 33ff 	mov.w	r3, #4294967295
    50a4:	f001 b8cc 	b.w	6240 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            /* init ODF_arg */
            index = SDO->CANrxData[2];
    50a8:	68fb      	ldr	r3, [r7, #12]
    50aa:	681b      	ldr	r3, [r3, #0]
    50ac:	789b      	ldrb	r3, [r3, #2]
    50ae:	633b      	str	r3, [r7, #48]	; 0x30
            index = index << 8 | SDO->CANrxData[1];
    50b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    50b2:	021b      	lsls	r3, r3, #8
    50b4:	68fa      	ldr	r2, [r7, #12]
    50b6:	6812      	ldr	r2, [r2, #0]
    50b8:	7852      	ldrb	r2, [r2, #1]
    50ba:	4313      	orrs	r3, r2
    50bc:	633b      	str	r3, [r7, #48]	; 0x30
            abortCode = CO_SDO_initTransfer( index, SDO->CANrxData[3]);
    50be:	68fb      	ldr	r3, [r7, #12]
    50c0:	681b      	ldr	r3, [r3, #0]
    50c2:	78db      	ldrb	r3, [r3, #3]
    50c4:	461a      	mov	r2, r3
    50c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
    50c8:	68f8      	ldr	r0, [r7, #12]
    50ca:	4b88      	ldr	r3, [pc, #544]	; (52ec <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3d8>)
    50cc:	4798      	blx	r3
    50ce:	62f8      	str	r0, [r7, #44]	; 0x2c
            if(abortCode != 0U){
    50d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    50d2:	2b00      	cmp	r3, #0
    50d4:	d009      	beq.n	50ea <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1d6>
                CO_SDO_abort(SDO, abortCode);
    50d6:	68fb      	ldr	r3, [r7, #12]
    50d8:	681b      	ldr	r3, [r3, #0]
    50da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    50dc:	4618      	mov	r0, r3
    50de:	4b82      	ldr	r3, [pc, #520]	; (52e8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3d4>)
    50e0:	4798      	blx	r3
                return -1;
    50e2:	f04f 33ff 	mov.w	r3, #4294967295
    50e6:	f001 b8ab 	b.w	6240 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            /* download */
            if((CCS == CCS_DOWNLOAD_INITIATE) || (CCS == CCS_DOWNLOAD_BLOCK)){
    50ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    50ee:	2b01      	cmp	r3, #1
    50f0:	d003      	beq.n	50fa <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1e6>
    50f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    50f6:	2b06      	cmp	r3, #6
    50f8:	d11c      	bne.n	5134 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x220>
                if((SDO->ODF_arg.attribute & CO_ODA_WRITEABLE) == 0U){
    50fa:	68fb      	ldr	r3, [r7, #12]
    50fc:	681b      	ldr	r3, [r3, #0]
    50fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    5100:	f003 0308 	and.w	r3, r3, #8
    5104:	2b00      	cmp	r3, #0
    5106:	d109      	bne.n	511c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x208>
                    CO_SDO_abort(SDO, CO_SDO_AB_READONLY); /* attempt to write a read-only object */
    5108:	68fb      	ldr	r3, [r7, #12]
    510a:	681b      	ldr	r3, [r3, #0]
    510c:	4978      	ldr	r1, [pc, #480]	; (52f0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3dc>)
    510e:	4618      	mov	r0, r3
    5110:	4b75      	ldr	r3, [pc, #468]	; (52e8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3d4>)
    5112:	4798      	blx	r3
                    return -1;
    5114:	f04f 33ff 	mov.w	r3, #4294967295
    5118:	f001 b892 	b.w	6240 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                }

                /* set state machine to normal or block download */
                if(CCS == CCS_DOWNLOAD_INITIATE){
    511c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    5120:	2b01      	cmp	r3, #1
    5122:	d103      	bne.n	512c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x218>
                    state = CO_SDO_ST_DOWNLOAD_INITIATE;
    5124:	2311      	movs	r3, #17
    5126:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                if(CCS == CCS_DOWNLOAD_INITIATE){
    512a:	e028      	b.n	517e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x26a>
                }
                else{
                    state = CO_SDO_ST_DOWNLOAD_BL_INITIATE;
    512c:	2314      	movs	r3, #20
    512e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                if(CCS == CCS_DOWNLOAD_INITIATE){
    5132:	e024      	b.n	517e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x26a>
                }
            }

            /* upload */
            else{
                abortCode = CO_SDO_readOD( CO_SDO_BUFFER_SIZE);
    5134:	2120      	movs	r1, #32
    5136:	68f8      	ldr	r0, [r7, #12]
    5138:	4b6e      	ldr	r3, [pc, #440]	; (52f4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3e0>)
    513a:	4798      	blx	r3
    513c:	62f8      	str	r0, [r7, #44]	; 0x2c
                if(abortCode != 0U){
    513e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5140:	2b00      	cmp	r3, #0
    5142:	d009      	beq.n	5158 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x244>
                    CO_SDO_abort(SDO, abortCode);
    5144:	68fb      	ldr	r3, [r7, #12]
    5146:	681b      	ldr	r3, [r3, #0]
    5148:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    514a:	4618      	mov	r0, r3
    514c:	4b66      	ldr	r3, [pc, #408]	; (52e8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3d4>)
    514e:	4798      	blx	r3
                    return -1;
    5150:	f04f 33ff 	mov.w	r3, #4294967295
    5154:	f001 b874 	b.w	6240 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                }

                /* if data size is large enough set state machine to block upload, otherwise set to normal transfer */
                if((CCS == CCS_UPLOAD_BLOCK) && (SDO->ODF_arg.dataLength > SDO->CANrxData[5])){
    5158:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    515c:	2b05      	cmp	r3, #5
    515e:	d10b      	bne.n	5178 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x264>
    5160:	68fb      	ldr	r3, [r7, #12]
    5162:	681b      	ldr	r3, [r3, #0]
    5164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    5166:	68fa      	ldr	r2, [r7, #12]
    5168:	6812      	ldr	r2, [r2, #0]
    516a:	7952      	ldrb	r2, [r2, #5]
    516c:	4293      	cmp	r3, r2
    516e:	d903      	bls.n	5178 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x264>
                    state = CO_SDO_ST_UPLOAD_BL_INITIATE;
    5170:	2324      	movs	r3, #36	; 0x24
    5172:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    5176:	e002      	b.n	517e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x26a>
                }
                else{
                    state = CO_SDO_ST_UPLOAD_INITIATE;
    5178:	2321      	movs	r3, #33	; 0x21
    517a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            }
        }
    }

    /* verify SDO timeout */
    if(SDO->timeoutTimer < SDOtimeoutTime){
    517e:	68fb      	ldr	r3, [r7, #12]
    5180:	681b      	ldr	r3, [r3, #0]
    5182:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    5184:	683b      	ldr	r3, [r7, #0]
    5186:	429a      	cmp	r2, r3
    5188:	d207      	bcs.n	519a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x286>
        SDO->timeoutTimer += timeDifference_ms;
    518a:	68fb      	ldr	r3, [r7, #12]
    518c:	681b      	ldr	r3, [r3, #0]
    518e:	68fa      	ldr	r2, [r7, #12]
    5190:	6812      	ldr	r2, [r2, #0]
    5192:	6ed1      	ldr	r1, [r2, #108]	; 0x6c
    5194:	687a      	ldr	r2, [r7, #4]
    5196:	440a      	add	r2, r1
    5198:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    if(SDO->timeoutTimer >= SDOtimeoutTime){
    519a:	68fb      	ldr	r3, [r7, #12]
    519c:	681b      	ldr	r3, [r3, #0]
    519e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    51a0:	683b      	ldr	r3, [r7, #0]
    51a2:	429a      	cmp	r2, r3
    51a4:	d329      	bcc.n	51fa <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2e6>
        if((SDO->state == CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK) && (SDO->sequence != 0) && (!SDO->CANtxBuff->bufferFull)){
    51a6:	68fb      	ldr	r3, [r7, #12]
    51a8:	681b      	ldr	r3, [r3, #0]
    51aa:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
    51ae:	2b15      	cmp	r3, #21
    51b0:	d10f      	bne.n	51d2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2be>
    51b2:	68fb      	ldr	r3, [r7, #12]
    51b4:	681b      	ldr	r3, [r3, #0]
    51b6:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
    51ba:	2b00      	cmp	r3, #0
    51bc:	d009      	beq.n	51d2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2be>
    51be:	68fb      	ldr	r3, [r7, #12]
    51c0:	681b      	ldr	r3, [r3, #0]
    51c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    51c6:	7b5b      	ldrb	r3, [r3, #13]
    51c8:	b2db      	uxtb	r3, r3
    51ca:	2b00      	cmp	r3, #0
    51cc:	d101      	bne.n	51d2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2be>
    51ce:	2301      	movs	r3, #1
    51d0:	e000      	b.n	51d4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>
    51d2:	2300      	movs	r3, #0
    51d4:	2b00      	cmp	r3, #0
    51d6:	d006      	beq.n	51e6 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2d2>
            timeoutSubblockDownolad = true;
    51d8:	2301      	movs	r3, #1
    51da:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
            state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
    51de:	2316      	movs	r3, #22
    51e0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    51e4:	e009      	b.n	51fa <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2e6>
        }
        else{
            CO_SDO_abort(SDO, CO_SDO_AB_TIMEOUT); /* SDO protocol timed out */
    51e6:	68fb      	ldr	r3, [r7, #12]
    51e8:	681b      	ldr	r3, [r3, #0]
    51ea:	4943      	ldr	r1, [pc, #268]	; (52f8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3e4>)
    51ec:	4618      	mov	r0, r3
    51ee:	4b3e      	ldr	r3, [pc, #248]	; (52e8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3d4>)
    51f0:	4798      	blx	r3
            return -1;
    51f2:	f04f 33ff 	mov.w	r3, #4294967295
    51f6:	f001 b823 	b.w	6240 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
        }
    }

    /* return immediately if still idle */
    if(state == CO_SDO_ST_IDLE){
    51fa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    51fe:	2b00      	cmp	r3, #0
    5200:	d102      	bne.n	5208 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2f4>
        return 0;
    5202:	2300      	movs	r3, #0
    5204:	f001 b81c 	b.w	6240 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
    }

    /* state machine (buffer is freed (SDO->CANrxNew = 0;) at the end) */
    switch(state){
    5208:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    520c:	3b11      	subs	r3, #17
    520e:	2b16      	cmp	r3, #22
    5210:	f200 87f0 	bhi.w	61f4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12e0>
    5214:	a201      	add	r2, pc, #4	; (adr r2, 521c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x308>)
    5216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    521a:	bf00      	nop
    521c:	00005279 	.word	0x00005279
    5220:	000053f3 	.word	0x000053f3
    5224:	000061f5 	.word	0x000061f5
    5228:	00005593 	.word	0x00005593
    522c:	00006207 	.word	0x00006207
    5230:	000056c5 	.word	0x000056c5
    5234:	00005825 	.word	0x00005825
    5238:	000061f5 	.word	0x000061f5
    523c:	000061f5 	.word	0x000061f5
    5240:	000061f5 	.word	0x000061f5
    5244:	000061f5 	.word	0x000061f5
    5248:	000061f5 	.word	0x000061f5
    524c:	000061f5 	.word	0x000061f5
    5250:	000061f5 	.word	0x000061f5
    5254:	000061f5 	.word	0x000061f5
    5258:	000061f5 	.word	0x000061f5
    525c:	00005941 	.word	0x00005941
    5260:	00005a4d 	.word	0x00005a4d
    5264:	000061f5 	.word	0x000061f5
    5268:	00005c85 	.word	0x00005c85
    526c:	00005dd1 	.word	0x00005dd1
    5270:	00005e21 	.word	0x00005e21
    5274:	000061c9 	.word	0x000061c9
        uint32_t len, i;
        bool_t lastSegmentInSubblock;

        case CO_SDO_ST_DOWNLOAD_INITIATE:{
            /* default response */
            SDO->CANtxBuff->data[0] = 0x60;
    5278:	68fb      	ldr	r3, [r7, #12]
    527a:	681b      	ldr	r3, [r3, #0]
    527c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    5280:	2260      	movs	r2, #96	; 0x60
    5282:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = SDO->CANrxData[1];
    5284:	68fb      	ldr	r3, [r7, #12]
    5286:	681b      	ldr	r3, [r3, #0]
    5288:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    528c:	68fa      	ldr	r2, [r7, #12]
    528e:	6812      	ldr	r2, [r2, #0]
    5290:	7852      	ldrb	r2, [r2, #1]
    5292:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = SDO->CANrxData[2];
    5294:	68fb      	ldr	r3, [r7, #12]
    5296:	681b      	ldr	r3, [r3, #0]
    5298:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    529c:	68fa      	ldr	r2, [r7, #12]
    529e:	6812      	ldr	r2, [r2, #0]
    52a0:	7892      	ldrb	r2, [r2, #2]
    52a2:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->CANrxData[3];
    52a4:	68fb      	ldr	r3, [r7, #12]
    52a6:	681b      	ldr	r3, [r3, #0]
    52a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    52ac:	68fa      	ldr	r2, [r7, #12]
    52ae:	6812      	ldr	r2, [r2, #0]
    52b0:	78d2      	ldrb	r2, [r2, #3]
    52b2:	721a      	strb	r2, [r3, #8]

            /* Expedited transfer */
            if((SDO->CANrxData[0] & 0x02U) != 0U){
    52b4:	68fb      	ldr	r3, [r7, #12]
    52b6:	681b      	ldr	r3, [r3, #0]
    52b8:	781b      	ldrb	r3, [r3, #0]
    52ba:	f003 0302 	and.w	r3, r3, #2
    52be:	2b00      	cmp	r3, #0
    52c0:	d05b      	beq.n	537a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x466>
                /* is size indicated? Get message length */
                if((SDO->CANrxData[0] & 0x01U) != 0U){
    52c2:	68fb      	ldr	r3, [r7, #12]
    52c4:	681b      	ldr	r3, [r3, #0]
    52c6:	781b      	ldrb	r3, [r3, #0]
    52c8:	f003 0301 	and.w	r3, r3, #1
    52cc:	2b00      	cmp	r3, #0
    52ce:	d015      	beq.n	52fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3e8>
                    len = 4U - ((SDO->CANrxData[0] >> 2U) & 0x03U);
    52d0:	68fb      	ldr	r3, [r7, #12]
    52d2:	681b      	ldr	r3, [r3, #0]
    52d4:	781b      	ldrb	r3, [r3, #0]
    52d6:	109b      	asrs	r3, r3, #2
    52d8:	f003 0303 	and.w	r3, r3, #3
    52dc:	f1c3 0304 	rsb	r3, r3, #4
    52e0:	643b      	str	r3, [r7, #64]	; 0x40
    52e2:	e00f      	b.n	5304 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3f0>
    52e4:	05040001 	.word	0x05040001
    52e8:	00004e89 	.word	0x00004e89
    52ec:	00004aa5 	.word	0x00004aa5
    52f0:	06010002 	.word	0x06010002
    52f4:	00004c35 	.word	0x00004c35
    52f8:	05040000 	.word	0x05040000
                }
                else{
                    len = SDO->ODF_arg.dataLength;
    52fc:	68fb      	ldr	r3, [r7, #12]
    52fe:	681b      	ldr	r3, [r3, #0]
    5300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    5302:	643b      	str	r3, [r7, #64]	; 0x40
                }

                /* copy data to SDO buffer */
                SDO->ODF_arg.data[0] = SDO->CANrxData[4];
    5304:	68fb      	ldr	r3, [r7, #12]
    5306:	681b      	ldr	r3, [r3, #0]
    5308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    530a:	68fa      	ldr	r2, [r7, #12]
    530c:	6812      	ldr	r2, [r2, #0]
    530e:	7912      	ldrb	r2, [r2, #4]
    5310:	701a      	strb	r2, [r3, #0]
                SDO->ODF_arg.data[1] = SDO->CANrxData[5];
    5312:	68fb      	ldr	r3, [r7, #12]
    5314:	681b      	ldr	r3, [r3, #0]
    5316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    5318:	3301      	adds	r3, #1
    531a:	68fa      	ldr	r2, [r7, #12]
    531c:	6812      	ldr	r2, [r2, #0]
    531e:	7952      	ldrb	r2, [r2, #5]
    5320:	701a      	strb	r2, [r3, #0]
                SDO->ODF_arg.data[2] = SDO->CANrxData[6];
    5322:	68fb      	ldr	r3, [r7, #12]
    5324:	681b      	ldr	r3, [r3, #0]
    5326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    5328:	3302      	adds	r3, #2
    532a:	68fa      	ldr	r2, [r7, #12]
    532c:	6812      	ldr	r2, [r2, #0]
    532e:	7992      	ldrb	r2, [r2, #6]
    5330:	701a      	strb	r2, [r3, #0]
                SDO->ODF_arg.data[3] = SDO->CANrxData[7];
    5332:	68fb      	ldr	r3, [r7, #12]
    5334:	681b      	ldr	r3, [r3, #0]
    5336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    5338:	3303      	adds	r3, #3
    533a:	68fa      	ldr	r2, [r7, #12]
    533c:	6812      	ldr	r2, [r2, #0]
    533e:	79d2      	ldrb	r2, [r2, #7]
    5340:	701a      	strb	r2, [r3, #0]

                /* write data to the Object dictionary */
                abortCode = CO_SDO_writeOD( len);
    5342:	6c39      	ldr	r1, [r7, #64]	; 0x40
    5344:	68f8      	ldr	r0, [r7, #12]
    5346:	4b9b      	ldr	r3, [pc, #620]	; (55b4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a0>)
    5348:	4798      	blx	r3
    534a:	62b8      	str	r0, [r7, #40]	; 0x28
                if(abortCode != 0U){
    534c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    534e:	2b00      	cmp	r3, #0
    5350:	d009      	beq.n	5366 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x452>
                    CO_SDO_abort(SDO, abortCode);
    5352:	68fb      	ldr	r3, [r7, #12]
    5354:	681b      	ldr	r3, [r3, #0]
    5356:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    5358:	4618      	mov	r0, r3
    535a:	4b97      	ldr	r3, [pc, #604]	; (55b8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a4>)
    535c:	4798      	blx	r3
                    return -1;
    535e:	f04f 33ff 	mov.w	r3, #4294967295
    5362:	f000 bf6d 	b.w	6240 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                }

                /* finish the communication */
                SDO->state = CO_SDO_ST_IDLE;
    5366:	68fb      	ldr	r3, [r7, #12]
    5368:	681b      	ldr	r3, [r3, #0]
    536a:	2200      	movs	r2, #0
    536c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                sendResponse = true;
    5370:	2301      	movs	r3, #1
    5372:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                SDO->bufferOffset = 0;
                SDO->sequence = 0;
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENTED;
                sendResponse = true;
            }
            break;
    5376:	f000 bf47 	b.w	6208 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
                if((SDO->CANrxData[0]&0x01) != 0){
    537a:	68fb      	ldr	r3, [r7, #12]
    537c:	681b      	ldr	r3, [r3, #0]
    537e:	781b      	ldrb	r3, [r3, #0]
    5380:	f003 0301 	and.w	r3, r3, #1
    5384:	2b00      	cmp	r3, #0
    5386:	d021      	beq.n	53cc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x4b8>
                    CO_memcpySwap4(&lenRx, &SDO->CANrxData[4]);
    5388:	68fb      	ldr	r3, [r7, #12]
    538a:	681b      	ldr	r3, [r3, #0]
    538c:	1d1a      	adds	r2, r3, #4
    538e:	f107 0320 	add.w	r3, r7, #32
    5392:	4619      	mov	r1, r3
    5394:	68f8      	ldr	r0, [r7, #12]
    5396:	4b89      	ldr	r3, [pc, #548]	; (55bc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a8>)
    5398:	4798      	blx	r3
                    SDO->ODF_arg.dataLengthTotal = lenRx;
    539a:	68fb      	ldr	r3, [r7, #12]
    539c:	681b      	ldr	r3, [r3, #0]
    539e:	6a3a      	ldr	r2, [r7, #32]
    53a0:	661a      	str	r2, [r3, #96]	; 0x60
                    if((lenRx != SDO->ODF_arg.dataLength) && (SDO->ODF_arg.ODdataStorage != 0)){
    53a2:	68fb      	ldr	r3, [r7, #12]
    53a4:	681b      	ldr	r3, [r3, #0]
    53a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    53a8:	6a3b      	ldr	r3, [r7, #32]
    53aa:	429a      	cmp	r2, r3
    53ac:	d00e      	beq.n	53cc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x4b8>
    53ae:	68fb      	ldr	r3, [r7, #12]
    53b0:	681b      	ldr	r3, [r3, #0]
    53b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    53b4:	2b00      	cmp	r3, #0
    53b6:	d009      	beq.n	53cc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x4b8>
                        CO_SDO_abort(SDO, CO_SDO_AB_TYPE_MISMATCH);  /* Length of service parameter does not match */
    53b8:	68fb      	ldr	r3, [r7, #12]
    53ba:	681b      	ldr	r3, [r3, #0]
    53bc:	4980      	ldr	r1, [pc, #512]	; (55c0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6ac>)
    53be:	4618      	mov	r0, r3
    53c0:	4b7d      	ldr	r3, [pc, #500]	; (55b8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a4>)
    53c2:	4798      	blx	r3
                        return -1;
    53c4:	f04f 33ff 	mov.w	r3, #4294967295
    53c8:	f000 bf3a 	b.w	6240 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                SDO->bufferOffset = 0;
    53cc:	68fb      	ldr	r3, [r7, #12]
    53ce:	681b      	ldr	r3, [r3, #0]
    53d0:	2200      	movs	r2, #0
    53d2:	639a      	str	r2, [r3, #56]	; 0x38
                SDO->sequence = 0;
    53d4:	68fb      	ldr	r3, [r7, #12]
    53d6:	681b      	ldr	r3, [r3, #0]
    53d8:	2200      	movs	r2, #0
    53da:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENTED;
    53de:	68fb      	ldr	r3, [r7, #12]
    53e0:	681b      	ldr	r3, [r3, #0]
    53e2:	2212      	movs	r2, #18
    53e4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                sendResponse = true;
    53e8:	2301      	movs	r3, #1
    53ea:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
    53ee:	f000 bf0b 	b.w	6208 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
        }

        case CO_SDO_ST_DOWNLOAD_SEGMENTED:{
            /* verify client command specifier */
            if((SDO->CANrxData[0]&0xE0) != 0x00U){
    53f2:	68fb      	ldr	r3, [r7, #12]
    53f4:	681b      	ldr	r3, [r3, #0]
    53f6:	781b      	ldrb	r3, [r3, #0]
    53f8:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    53fc:	2b00      	cmp	r3, #0
    53fe:	d009      	beq.n	5414 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x500>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
    5400:	68fb      	ldr	r3, [r7, #12]
    5402:	681b      	ldr	r3, [r3, #0]
    5404:	496f      	ldr	r1, [pc, #444]	; (55c4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6b0>)
    5406:	4618      	mov	r0, r3
    5408:	4b6b      	ldr	r3, [pc, #428]	; (55b8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a4>)
    540a:	4798      	blx	r3
                return -1;
    540c:	f04f 33ff 	mov.w	r3, #4294967295
    5410:	f000 bf16 	b.w	6240 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            /* verify toggle bit */
            i = (SDO->CANrxData[0]&0x10U) ? 1U : 0U;
    5414:	68fb      	ldr	r3, [r7, #12]
    5416:	681b      	ldr	r3, [r3, #0]
    5418:	781b      	ldrb	r3, [r3, #0]
    541a:	f003 0310 	and.w	r3, r3, #16
    541e:	2b00      	cmp	r3, #0
    5420:	d001      	beq.n	5426 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x512>
    5422:	2301      	movs	r3, #1
    5424:	e000      	b.n	5428 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x514>
    5426:	2300      	movs	r3, #0
    5428:	63fb      	str	r3, [r7, #60]	; 0x3c
            if(i != SDO->sequence){
    542a:	68fb      	ldr	r3, [r7, #12]
    542c:	681b      	ldr	r3, [r3, #0]
    542e:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
    5432:	461a      	mov	r2, r3
    5434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5436:	429a      	cmp	r2, r3
    5438:	d009      	beq.n	544e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x53a>
                CO_SDO_abort(SDO, CO_SDO_AB_TOGGLE_BIT);/* toggle bit not alternated */
    543a:	68fb      	ldr	r3, [r7, #12]
    543c:	681b      	ldr	r3, [r3, #0]
    543e:	4962      	ldr	r1, [pc, #392]	; (55c8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6b4>)
    5440:	4618      	mov	r0, r3
    5442:	4b5d      	ldr	r3, [pc, #372]	; (55b8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a4>)
    5444:	4798      	blx	r3
                return -1;
    5446:	f04f 33ff 	mov.w	r3, #4294967295
    544a:	f000 bef9 	b.w	6240 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            /* get size of data in message */
            len = 7U - ((SDO->CANrxData[0] >> 1U) & 0x07U);
    544e:	68fb      	ldr	r3, [r7, #12]
    5450:	681b      	ldr	r3, [r3, #0]
    5452:	781b      	ldrb	r3, [r3, #0]
    5454:	105b      	asrs	r3, r3, #1
    5456:	43db      	mvns	r3, r3
    5458:	f003 0307 	and.w	r3, r3, #7
    545c:	643b      	str	r3, [r7, #64]	; 0x40

            /* verify length. Domain data type enables length larger than SDO buffer size */
            if((SDO->bufferOffset + len) > SDO->ODF_arg.dataLength){
    545e:	68fb      	ldr	r3, [r7, #12]
    5460:	681b      	ldr	r3, [r3, #0]
    5462:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    5464:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5466:	441a      	add	r2, r3
    5468:	68fb      	ldr	r3, [r7, #12]
    546a:	681b      	ldr	r3, [r3, #0]
    546c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    546e:	429a      	cmp	r2, r3
    5470:	d930      	bls.n	54d4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x5c0>
                if(SDO->ODF_arg.ODdataStorage != 0){
    5472:	68fb      	ldr	r3, [r7, #12]
    5474:	681b      	ldr	r3, [r3, #0]
    5476:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    5478:	2b00      	cmp	r3, #0
    547a:	d009      	beq.n	5490 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>
                    CO_SDO_abort(SDO, CO_SDO_AB_DATA_LONG);  /* Length of service parameter too high */
    547c:	68fb      	ldr	r3, [r7, #12]
    547e:	681b      	ldr	r3, [r3, #0]
    5480:	4952      	ldr	r1, [pc, #328]	; (55cc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6b8>)
    5482:	4618      	mov	r0, r3
    5484:	4b4c      	ldr	r3, [pc, #304]	; (55b8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a4>)
    5486:	4798      	blx	r3
                    return -1;
    5488:	f04f 33ff 	mov.w	r3, #4294967295
    548c:	f000 bed8 	b.w	6240 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                }
                else{
                    /* empty buffer in domain data type */
                    SDO->ODF_arg.lastSegment = false;
    5490:	68fb      	ldr	r3, [r7, #12]
    5492:	681b      	ldr	r3, [r3, #0]
    5494:	2200      	movs	r2, #0
    5496:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
                    abortCode = CO_SDO_writeOD( SDO->bufferOffset);
    549a:	68fb      	ldr	r3, [r7, #12]
    549c:	681b      	ldr	r3, [r3, #0]
    549e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    54a0:	4619      	mov	r1, r3
    54a2:	68f8      	ldr	r0, [r7, #12]
    54a4:	4b43      	ldr	r3, [pc, #268]	; (55b4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a0>)
    54a6:	4798      	blx	r3
    54a8:	62b8      	str	r0, [r7, #40]	; 0x28
                    if(abortCode != 0U){
    54aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    54ac:	2b00      	cmp	r3, #0
    54ae:	d009      	beq.n	54c4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x5b0>
                        CO_SDO_abort(SDO, abortCode);
    54b0:	68fb      	ldr	r3, [r7, #12]
    54b2:	681b      	ldr	r3, [r3, #0]
    54b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    54b6:	4618      	mov	r0, r3
    54b8:	4b3f      	ldr	r3, [pc, #252]	; (55b8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a4>)
    54ba:	4798      	blx	r3
                        return -1;
    54bc:	f04f 33ff 	mov.w	r3, #4294967295
    54c0:	f000 bebe 	b.w	6240 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                    }

                    SDO->ODF_arg.dataLength = CO_SDO_BUFFER_SIZE;
    54c4:	68fb      	ldr	r3, [r7, #12]
    54c6:	681b      	ldr	r3, [r3, #0]
    54c8:	2220      	movs	r2, #32
    54ca:	64da      	str	r2, [r3, #76]	; 0x4c
                    SDO->bufferOffset = 0;
    54cc:	68fb      	ldr	r3, [r7, #12]
    54ce:	681b      	ldr	r3, [r3, #0]
    54d0:	2200      	movs	r2, #0
    54d2:	639a      	str	r2, [r3, #56]	; 0x38
                }
            }

            /* copy data to buffer */
            for(i=0U; i<len; i++)
    54d4:	2300      	movs	r3, #0
    54d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    54d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    54da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    54dc:	429a      	cmp	r2, r3
    54de:	d212      	bcs.n	5506 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x5f2>
                SDO->ODF_arg.data[SDO->bufferOffset++] = SDO->CANrxData[i+1];
    54e0:	68fb      	ldr	r3, [r7, #12]
    54e2:	681b      	ldr	r3, [r3, #0]
    54e4:	6c59      	ldr	r1, [r3, #68]	; 0x44
    54e6:	68fb      	ldr	r3, [r7, #12]
    54e8:	681a      	ldr	r2, [r3, #0]
    54ea:	6b93      	ldr	r3, [r2, #56]	; 0x38
    54ec:	1c58      	adds	r0, r3, #1
    54ee:	6390      	str	r0, [r2, #56]	; 0x38
    54f0:	440b      	add	r3, r1
    54f2:	68fa      	ldr	r2, [r7, #12]
    54f4:	6811      	ldr	r1, [r2, #0]
    54f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    54f8:	3201      	adds	r2, #1
    54fa:	5c8a      	ldrb	r2, [r1, r2]
    54fc:	701a      	strb	r2, [r3, #0]
            for(i=0U; i<len; i++)
    54fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5500:	3301      	adds	r3, #1
    5502:	63fb      	str	r3, [r7, #60]	; 0x3c
    5504:	e7e8      	b.n	54d8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x5c4>

            /* If no more segments to be downloaded, write data to the Object dictionary */
            if((SDO->CANrxData[0] & 0x01U) != 0U){
    5506:	68fb      	ldr	r3, [r7, #12]
    5508:	681b      	ldr	r3, [r3, #0]
    550a:	781b      	ldrb	r3, [r3, #0]
    550c:	f003 0301 	and.w	r3, r3, #1
    5510:	2b00      	cmp	r3, #0
    5512:	d01e      	beq.n	5552 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x63e>
                SDO->ODF_arg.lastSegment = true;
    5514:	68fb      	ldr	r3, [r7, #12]
    5516:	681b      	ldr	r3, [r3, #0]
    5518:	2201      	movs	r2, #1
    551a:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
                abortCode = CO_SDO_writeOD( SDO->bufferOffset);
    551e:	68fb      	ldr	r3, [r7, #12]
    5520:	681b      	ldr	r3, [r3, #0]
    5522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    5524:	4619      	mov	r1, r3
    5526:	68f8      	ldr	r0, [r7, #12]
    5528:	4b22      	ldr	r3, [pc, #136]	; (55b4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a0>)
    552a:	4798      	blx	r3
    552c:	62b8      	str	r0, [r7, #40]	; 0x28
                if(abortCode != 0U){
    552e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5530:	2b00      	cmp	r3, #0
    5532:	d009      	beq.n	5548 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x634>
                    CO_SDO_abort(SDO, abortCode);
    5534:	68fb      	ldr	r3, [r7, #12]
    5536:	681b      	ldr	r3, [r3, #0]
    5538:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    553a:	4618      	mov	r0, r3
    553c:	4b1e      	ldr	r3, [pc, #120]	; (55b8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a4>)
    553e:	4798      	blx	r3
                    return -1;
    5540:	f04f 33ff 	mov.w	r3, #4294967295
    5544:	f000 be7c 	b.w	6240 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                }

                /* finish */
                SDO->state = CO_SDO_ST_IDLE;
    5548:	68fb      	ldr	r3, [r7, #12]
    554a:	681b      	ldr	r3, [r3, #0]
    554c:	2200      	movs	r2, #0
    554e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            }

            /* download segment response and alternate toggle bit */
            SDO->CANtxBuff->data[0] = 0x20 | (SDO->sequence ? 0x10 : 0x00);
    5552:	68fb      	ldr	r3, [r7, #12]
    5554:	681b      	ldr	r3, [r3, #0]
    5556:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    555a:	68fa      	ldr	r2, [r7, #12]
    555c:	6812      	ldr	r2, [r2, #0]
    555e:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
    5562:	2a00      	cmp	r2, #0
    5564:	d001      	beq.n	556a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x656>
    5566:	2230      	movs	r2, #48	; 0x30
    5568:	e000      	b.n	556c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x658>
    556a:	2220      	movs	r2, #32
    556c:	715a      	strb	r2, [r3, #5]
            SDO->sequence = (SDO->sequence) ? 0 : 1;
    556e:	68fb      	ldr	r3, [r7, #12]
    5570:	681b      	ldr	r3, [r3, #0]
    5572:	68fa      	ldr	r2, [r7, #12]
    5574:	6812      	ldr	r2, [r2, #0]
    5576:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
    557a:	2a00      	cmp	r2, #0
    557c:	bf0c      	ite	eq
    557e:	2201      	moveq	r2, #1
    5580:	2200      	movne	r2, #0
    5582:	b2d2      	uxtb	r2, r2
    5584:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
            sendResponse = true;
    5588:	2301      	movs	r3, #1
    558a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
    558e:	f000 be3b 	b.w	6208 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
        }

        case CO_SDO_ST_DOWNLOAD_BL_INITIATE:{
            /* verify client command specifier and subcommand */
            if((SDO->CANrxData[0]&0xE1U) != 0xC0U){
    5592:	68fb      	ldr	r3, [r7, #12]
    5594:	681b      	ldr	r3, [r3, #0]
    5596:	781b      	ldrb	r3, [r3, #0]
    5598:	f003 03e1 	and.w	r3, r3, #225	; 0xe1
    559c:	2bc0      	cmp	r3, #192	; 0xc0
    559e:	d017      	beq.n	55d0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6bc>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
    55a0:	68fb      	ldr	r3, [r7, #12]
    55a2:	681b      	ldr	r3, [r3, #0]
    55a4:	4907      	ldr	r1, [pc, #28]	; (55c4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6b0>)
    55a6:	4618      	mov	r0, r3
    55a8:	4b03      	ldr	r3, [pc, #12]	; (55b8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a4>)
    55aa:	4798      	blx	r3
                return -1;
    55ac:	f04f 33ff 	mov.w	r3, #4294967295
    55b0:	f000 be46 	b.w	6240 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
    55b4:	00004d55 	.word	0x00004d55
    55b8:	00004e89 	.word	0x00004e89
    55bc:	00004365 	.word	0x00004365
    55c0:	06070010 	.word	0x06070010
    55c4:	05040001 	.word	0x05040001
    55c8:	05030000 	.word	0x05030000
    55cc:	06070012 	.word	0x06070012
            }

            /* prepare response */
            SDO->CANtxBuff->data[0] = 0xA4;
    55d0:	68fb      	ldr	r3, [r7, #12]
    55d2:	681b      	ldr	r3, [r3, #0]
    55d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    55d8:	22a4      	movs	r2, #164	; 0xa4
    55da:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = SDO->CANrxData[1];
    55dc:	68fb      	ldr	r3, [r7, #12]
    55de:	681b      	ldr	r3, [r3, #0]
    55e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    55e4:	68fa      	ldr	r2, [r7, #12]
    55e6:	6812      	ldr	r2, [r2, #0]
    55e8:	7852      	ldrb	r2, [r2, #1]
    55ea:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = SDO->CANrxData[2];
    55ec:	68fb      	ldr	r3, [r7, #12]
    55ee:	681b      	ldr	r3, [r3, #0]
    55f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    55f4:	68fa      	ldr	r2, [r7, #12]
    55f6:	6812      	ldr	r2, [r2, #0]
    55f8:	7892      	ldrb	r2, [r2, #2]
    55fa:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->CANrxData[3];
    55fc:	68fb      	ldr	r3, [r7, #12]
    55fe:	681b      	ldr	r3, [r3, #0]
    5600:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    5604:	68fa      	ldr	r2, [r7, #12]
    5606:	6812      	ldr	r2, [r2, #0]
    5608:	78d2      	ldrb	r2, [r2, #3]
    560a:	721a      	strb	r2, [r3, #8]

            /* blksize */
            SDO->blksize = (CO_SDO_BUFFER_SIZE > (7*127)) ? 127 : (CO_SDO_BUFFER_SIZE / 7);
    560c:	68fb      	ldr	r3, [r7, #12]
    560e:	681b      	ldr	r3, [r3, #0]
    5610:	2204      	movs	r2, #4
    5612:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
            SDO->CANtxBuff->data[4] = SDO->blksize;
    5616:	68fb      	ldr	r3, [r7, #12]
    5618:	681b      	ldr	r3, [r3, #0]
    561a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    561e:	68fa      	ldr	r2, [r7, #12]
    5620:	6812      	ldr	r2, [r2, #0]
    5622:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
    5626:	725a      	strb	r2, [r3, #9]

            /* is CRC enabled */
            SDO->crcEnabled = (SDO->CANrxData[0] & 0x04) ? true : false;
    5628:	68fb      	ldr	r3, [r7, #12]
    562a:	681b      	ldr	r3, [r3, #0]
    562c:	68fa      	ldr	r2, [r7, #12]
    562e:	6812      	ldr	r2, [r2, #0]
    5630:	7812      	ldrb	r2, [r2, #0]
    5632:	f002 0204 	and.w	r2, r2, #4
    5636:	2a00      	cmp	r2, #0
    5638:	bf14      	ite	ne
    563a:	2201      	movne	r2, #1
    563c:	2200      	moveq	r2, #0
    563e:	b2d2      	uxtb	r2, r2
    5640:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
            SDO->crc = 0;
    5644:	68fb      	ldr	r3, [r7, #12]
    5646:	681b      	ldr	r3, [r3, #0]
    5648:	2200      	movs	r2, #0
    564a:	675a      	str	r2, [r3, #116]	; 0x74

            /* verify length if size is indicated */
            if((SDO->CANrxData[0]&0x02) != 0U){
    564c:	68fb      	ldr	r3, [r7, #12]
    564e:	681b      	ldr	r3, [r3, #0]
    5650:	781b      	ldrb	r3, [r3, #0]
    5652:	f003 0302 	and.w	r3, r3, #2
    5656:	2b00      	cmp	r3, #0
    5658:	d021      	beq.n	569e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x78a>
                uint32_t lenRx;
                CO_memcpySwap4(&lenRx, &SDO->CANrxData[4]);
    565a:	68fb      	ldr	r3, [r7, #12]
    565c:	681b      	ldr	r3, [r3, #0]
    565e:	1d1a      	adds	r2, r3, #4
    5660:	f107 031c 	add.w	r3, r7, #28
    5664:	4619      	mov	r1, r3
    5666:	68f8      	ldr	r0, [r7, #12]
    5668:	4b96      	ldr	r3, [pc, #600]	; (58c4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9b0>)
    566a:	4798      	blx	r3
                SDO->ODF_arg.dataLengthTotal = lenRx;
    566c:	68fb      	ldr	r3, [r7, #12]
    566e:	681b      	ldr	r3, [r3, #0]
    5670:	69fa      	ldr	r2, [r7, #28]
    5672:	661a      	str	r2, [r3, #96]	; 0x60

                /* verify length except for domain data type */
                if((lenRx != SDO->ODF_arg.dataLength) && (SDO->ODF_arg.ODdataStorage != 0)){
    5674:	68fb      	ldr	r3, [r7, #12]
    5676:	681b      	ldr	r3, [r3, #0]
    5678:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    567a:	69fb      	ldr	r3, [r7, #28]
    567c:	429a      	cmp	r2, r3
    567e:	d00e      	beq.n	569e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x78a>
    5680:	68fb      	ldr	r3, [r7, #12]
    5682:	681b      	ldr	r3, [r3, #0]
    5684:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    5686:	2b00      	cmp	r3, #0
    5688:	d009      	beq.n	569e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x78a>
                    CO_SDO_abort(SDO, CO_SDO_AB_TYPE_MISMATCH);  /* Length of service parameter does not match */
    568a:	68fb      	ldr	r3, [r7, #12]
    568c:	681b      	ldr	r3, [r3, #0]
    568e:	498e      	ldr	r1, [pc, #568]	; (58c8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9b4>)
    5690:	4618      	mov	r0, r3
    5692:	4b8e      	ldr	r3, [pc, #568]	; (58cc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9b8>)
    5694:	4798      	blx	r3
                    return -1;
    5696:	f04f 33ff 	mov.w	r3, #4294967295
    569a:	f000 bdd1 	b.w	6240 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                }
            }

            SDO->bufferOffset = 0;
    569e:	68fb      	ldr	r3, [r7, #12]
    56a0:	681b      	ldr	r3, [r3, #0]
    56a2:	2200      	movs	r2, #0
    56a4:	639a      	str	r2, [r3, #56]	; 0x38
            SDO->sequence = 0;
    56a6:	68fb      	ldr	r3, [r7, #12]
    56a8:	681b      	ldr	r3, [r3, #0]
    56aa:	2200      	movs	r2, #0
    56ac:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
            SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK;
    56b0:	68fb      	ldr	r3, [r7, #12]
    56b2:	681b      	ldr	r3, [r3, #0]
    56b4:	2215      	movs	r2, #21
    56b6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

            /* send response */
            sendResponse = true;
    56ba:	2301      	movs	r3, #1
    56bc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
    56c0:	f000 bda2 	b.w	6208 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
        }

        case CO_SDO_ST_DOWNLOAD_BL_SUB_RESP:{
            /* no new message received, SDO timeout occured, try to response */
            lastSegmentInSubblock = (!timeoutSubblockDownolad &&
                        ((SDO->CANrxData[0] & 0x80U) == 0x80U)) ? true : false;
    56c4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
    56c8:	2b00      	cmp	r3, #0
    56ca:	d107      	bne.n	56dc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7c8>
    56cc:	68fb      	ldr	r3, [r7, #12]
    56ce:	681b      	ldr	r3, [r3, #0]
    56d0:	781b      	ldrb	r3, [r3, #0]
    56d2:	b25b      	sxtb	r3, r3
    56d4:	2b00      	cmp	r3, #0
    56d6:	da01      	bge.n	56dc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7c8>
    56d8:	2301      	movs	r3, #1
    56da:	e000      	b.n	56de <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7ca>
    56dc:	2300      	movs	r3, #0
            lastSegmentInSubblock = (!timeoutSubblockDownolad &&
    56de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            /* prepare response */
            SDO->CANtxBuff->data[0] = 0xA2;
    56e2:	68fb      	ldr	r3, [r7, #12]
    56e4:	681b      	ldr	r3, [r3, #0]
    56e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    56ea:	22a2      	movs	r2, #162	; 0xa2
    56ec:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = SDO->sequence;
    56ee:	68fb      	ldr	r3, [r7, #12]
    56f0:	681b      	ldr	r3, [r3, #0]
    56f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    56f6:	68fa      	ldr	r2, [r7, #12]
    56f8:	6812      	ldr	r2, [r2, #0]
    56fa:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
    56fe:	719a      	strb	r2, [r3, #6]
            SDO->sequence = 0;
    5700:	68fb      	ldr	r3, [r7, #12]
    5702:	681b      	ldr	r3, [r3, #0]
    5704:	2200      	movs	r2, #0
    5706:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

            /* empty buffer in domain data type if not last segment */
            if((SDO->ODF_arg.ODdataStorage == 0) && (SDO->bufferOffset != 0) && !lastSegmentInSubblock){
    570a:	68fb      	ldr	r3, [r7, #12]
    570c:	681b      	ldr	r3, [r3, #0]
    570e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    5710:	2b00      	cmp	r3, #0
    5712:	d141      	bne.n	5798 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x884>
    5714:	68fb      	ldr	r3, [r7, #12]
    5716:	681b      	ldr	r3, [r3, #0]
    5718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    571a:	2b00      	cmp	r3, #0
    571c:	d03c      	beq.n	5798 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x884>
    571e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    5722:	2b00      	cmp	r3, #0
    5724:	d138      	bne.n	5798 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x884>
                /* calculate CRC on next bytes, if enabled */
                if(SDO->crcEnabled){
    5726:	68fb      	ldr	r3, [r7, #12]
    5728:	681b      	ldr	r3, [r3, #0]
    572a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
    572e:	2b00      	cmp	r3, #0
    5730:	d010      	beq.n	5754 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x840>
                    SDO->crc = crc16_ccitt(SDO->ODF_arg.data, SDO->bufferOffset, SDO->crc);
    5732:	68fb      	ldr	r3, [r7, #12]
    5734:	681c      	ldr	r4, [r3, #0]
    5736:	68fb      	ldr	r3, [r7, #12]
    5738:	681b      	ldr	r3, [r3, #0]
    573a:	6c59      	ldr	r1, [r3, #68]	; 0x44
    573c:	68fb      	ldr	r3, [r7, #12]
    573e:	681b      	ldr	r3, [r3, #0]
    5740:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    5742:	68fb      	ldr	r3, [r7, #12]
    5744:	681b      	ldr	r3, [r3, #0]
    5746:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    5748:	b29b      	uxth	r3, r3
    574a:	68f8      	ldr	r0, [r7, #12]
    574c:	4d60      	ldr	r5, [pc, #384]	; (58d0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9bc>)
    574e:	47a8      	blx	r5
    5750:	4603      	mov	r3, r0
    5752:	6763      	str	r3, [r4, #116]	; 0x74
                }

                /* write data to the Object dictionary */
                SDO->ODF_arg.lastSegment = false;
    5754:	68fb      	ldr	r3, [r7, #12]
    5756:	681b      	ldr	r3, [r3, #0]
    5758:	2200      	movs	r2, #0
    575a:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
                abortCode = CO_SDO_writeOD(SDO->bufferOffset);
    575e:	68fb      	ldr	r3, [r7, #12]
    5760:	681b      	ldr	r3, [r3, #0]
    5762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    5764:	4619      	mov	r1, r3
    5766:	68f8      	ldr	r0, [r7, #12]
    5768:	4b5a      	ldr	r3, [pc, #360]	; (58d4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9c0>)
    576a:	4798      	blx	r3
    576c:	62b8      	str	r0, [r7, #40]	; 0x28
                if(abortCode != 0U){
    576e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5770:	2b00      	cmp	r3, #0
    5772:	d009      	beq.n	5788 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x874>
                    CO_SDO_abort(SDO, abortCode);
    5774:	68fb      	ldr	r3, [r7, #12]
    5776:	681b      	ldr	r3, [r3, #0]
    5778:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    577a:	4618      	mov	r0, r3
    577c:	4b53      	ldr	r3, [pc, #332]	; (58cc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9b8>)
    577e:	4798      	blx	r3
                    return -1;
    5780:	f04f 33ff 	mov.w	r3, #4294967295
    5784:	f000 bd5c 	b.w	6240 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                }

                SDO->ODF_arg.dataLength = CO_SDO_BUFFER_SIZE;
    5788:	68fb      	ldr	r3, [r7, #12]
    578a:	681b      	ldr	r3, [r3, #0]
    578c:	2220      	movs	r2, #32
    578e:	64da      	str	r2, [r3, #76]	; 0x4c
                SDO->bufferOffset = 0;
    5790:	68fb      	ldr	r3, [r7, #12]
    5792:	681b      	ldr	r3, [r3, #0]
    5794:	2200      	movs	r2, #0
    5796:	639a      	str	r2, [r3, #56]	; 0x38
            }

            /* blksize */
            len = CO_SDO_BUFFER_SIZE - SDO->bufferOffset;
    5798:	68fb      	ldr	r3, [r7, #12]
    579a:	681b      	ldr	r3, [r3, #0]
    579c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    579e:	f1c3 0320 	rsb	r3, r3, #32
    57a2:	643b      	str	r3, [r7, #64]	; 0x40
            SDO->blksize = (len > (7*127)) ? 127 : (len / 7);
    57a4:	68fb      	ldr	r3, [r7, #12]
    57a6:	6819      	ldr	r1, [r3, #0]
    57a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    57aa:	f240 3279 	movw	r2, #889	; 0x379
    57ae:	4293      	cmp	r3, r2
    57b0:	d809      	bhi.n	57c6 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x8b2>
    57b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    57b4:	4b48      	ldr	r3, [pc, #288]	; (58d8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9c4>)
    57b6:	fba3 0302 	umull	r0, r3, r3, r2
    57ba:	1ad2      	subs	r2, r2, r3
    57bc:	0852      	lsrs	r2, r2, #1
    57be:	4413      	add	r3, r2
    57c0:	089b      	lsrs	r3, r3, #2
    57c2:	b2db      	uxtb	r3, r3
    57c4:	e000      	b.n	57c8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x8b4>
    57c6:	237f      	movs	r3, #127	; 0x7f
    57c8:	f881 3070 	strb.w	r3, [r1, #112]	; 0x70
            SDO->CANtxBuff->data[2] = SDO->blksize;
    57cc:	68fb      	ldr	r3, [r7, #12]
    57ce:	681b      	ldr	r3, [r3, #0]
    57d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    57d4:	68fa      	ldr	r2, [r7, #12]
    57d6:	6812      	ldr	r2, [r2, #0]
    57d8:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
    57dc:	71da      	strb	r2, [r3, #7]

            /* set next state */
            if(lastSegmentInSubblock) {
    57de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    57e2:	2b00      	cmp	r3, #0
    57e4:	d005      	beq.n	57f2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x8de>
                SDO->state = CO_SDO_ST_DOWNLOAD_BL_END;
    57e6:	68fb      	ldr	r3, [r7, #12]
    57e8:	681b      	ldr	r3, [r3, #0]
    57ea:	2217      	movs	r2, #23
    57ec:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    57f0:	e013      	b.n	581a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x906>
            }
            else if(SDO->bufferOffset >= CO_SDO_BUFFER_SIZE) {
    57f2:	68fb      	ldr	r3, [r7, #12]
    57f4:	681b      	ldr	r3, [r3, #0]
    57f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    57f8:	2b1f      	cmp	r3, #31
    57fa:	d909      	bls.n	5810 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x8fc>
                CO_SDO_abort(SDO, CO_SDO_AB_DEVICE_INCOMPAT);
    57fc:	68fb      	ldr	r3, [r7, #12]
    57fe:	681b      	ldr	r3, [r3, #0]
    5800:	4936      	ldr	r1, [pc, #216]	; (58dc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9c8>)
    5802:	4618      	mov	r0, r3
    5804:	4b31      	ldr	r3, [pc, #196]	; (58cc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9b8>)
    5806:	4798      	blx	r3
                return -1;
    5808:	f04f 33ff 	mov.w	r3, #4294967295
    580c:	f000 bd18 	b.w	6240 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }
            else {
                SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK;
    5810:	68fb      	ldr	r3, [r7, #12]
    5812:	681b      	ldr	r3, [r3, #0]
    5814:	2215      	movs	r2, #21
    5816:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            }

            /* send response */
            sendResponse = true;
    581a:	2301      	movs	r3, #1
    581c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

            break;
    5820:	f000 bcf2 	b.w	6208 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
        }

        case CO_SDO_ST_DOWNLOAD_BL_END:{
            /* verify client command specifier and subcommand */
            if((SDO->CANrxData[0]&0xE1U) != 0xC1U){
    5824:	68fb      	ldr	r3, [r7, #12]
    5826:	681b      	ldr	r3, [r3, #0]
    5828:	781b      	ldrb	r3, [r3, #0]
    582a:	f003 03e1 	and.w	r3, r3, #225	; 0xe1
    582e:	2bc1      	cmp	r3, #193	; 0xc1
    5830:	d009      	beq.n	5846 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x932>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
    5832:	68fb      	ldr	r3, [r7, #12]
    5834:	681b      	ldr	r3, [r3, #0]
    5836:	492a      	ldr	r1, [pc, #168]	; (58e0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9cc>)
    5838:	4618      	mov	r0, r3
    583a:	4b24      	ldr	r3, [pc, #144]	; (58cc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9b8>)
    583c:	4798      	blx	r3
                return -1;
    583e:	f04f 33ff 	mov.w	r3, #4294967295
    5842:	f000 bcfd 	b.w	6240 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            /* number of bytes in the last segment of the last block that do not contain data. */
            len = (SDO->CANrxData[0]>>2U) & 0x07U;
    5846:	68fb      	ldr	r3, [r7, #12]
    5848:	681b      	ldr	r3, [r3, #0]
    584a:	781b      	ldrb	r3, [r3, #0]
    584c:	109b      	asrs	r3, r3, #2
    584e:	f003 0307 	and.w	r3, r3, #7
    5852:	643b      	str	r3, [r7, #64]	; 0x40
            SDO->bufferOffset -= len;
    5854:	68fb      	ldr	r3, [r7, #12]
    5856:	681b      	ldr	r3, [r3, #0]
    5858:	68fa      	ldr	r2, [r7, #12]
    585a:	6812      	ldr	r2, [r2, #0]
    585c:	6b91      	ldr	r1, [r2, #56]	; 0x38
    585e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    5860:	1a8a      	subs	r2, r1, r2
    5862:	639a      	str	r2, [r3, #56]	; 0x38

            /* calculate and verify CRC, if enabled */
            if(SDO->crcEnabled){
    5864:	68fb      	ldr	r3, [r7, #12]
    5866:	681b      	ldr	r3, [r3, #0]
    5868:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
    586c:	2b00      	cmp	r3, #0
    586e:	d03d      	beq.n	58ec <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9d8>
                uint32_t crc;
                SDO->crc = crc16_ccitt(SDO->ODF_arg.data, SDO->bufferOffset, SDO->crc);
    5870:	68fb      	ldr	r3, [r7, #12]
    5872:	681c      	ldr	r4, [r3, #0]
    5874:	68fb      	ldr	r3, [r7, #12]
    5876:	681b      	ldr	r3, [r3, #0]
    5878:	6c59      	ldr	r1, [r3, #68]	; 0x44
    587a:	68fb      	ldr	r3, [r7, #12]
    587c:	681b      	ldr	r3, [r3, #0]
    587e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    5880:	68fb      	ldr	r3, [r7, #12]
    5882:	681b      	ldr	r3, [r3, #0]
    5884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    5886:	b29b      	uxth	r3, r3
    5888:	68f8      	ldr	r0, [r7, #12]
    588a:	4d11      	ldr	r5, [pc, #68]	; (58d0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9bc>)
    588c:	47a8      	blx	r5
    588e:	4603      	mov	r3, r0
    5890:	6763      	str	r3, [r4, #116]	; 0x74

                CO_memcpySwap2(&crc, &SDO->CANrxData[1]);
    5892:	68fb      	ldr	r3, [r7, #12]
    5894:	681b      	ldr	r3, [r3, #0]
    5896:	1c5a      	adds	r2, r3, #1
    5898:	f107 0318 	add.w	r3, r7, #24
    589c:	4619      	mov	r1, r3
    589e:	68f8      	ldr	r0, [r7, #12]
    58a0:	4b10      	ldr	r3, [pc, #64]	; (58e4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9d0>)
    58a2:	4798      	blx	r3

                if(SDO->crc != crc){
    58a4:	68fb      	ldr	r3, [r7, #12]
    58a6:	681b      	ldr	r3, [r3, #0]
    58a8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
    58aa:	69bb      	ldr	r3, [r7, #24]
    58ac:	429a      	cmp	r2, r3
    58ae:	d01d      	beq.n	58ec <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9d8>
                    CO_SDO_abort(SDO, CO_SDO_AB_CRC);   /* CRC error (block mode only). */
    58b0:	68fb      	ldr	r3, [r7, #12]
    58b2:	681b      	ldr	r3, [r3, #0]
    58b4:	490c      	ldr	r1, [pc, #48]	; (58e8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9d4>)
    58b6:	4618      	mov	r0, r3
    58b8:	4b04      	ldr	r3, [pc, #16]	; (58cc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9b8>)
    58ba:	4798      	blx	r3
                    return -1;
    58bc:	f04f 33ff 	mov.w	r3, #4294967295
    58c0:	f000 bcbe 	b.w	6240 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
    58c4:	00004365 	.word	0x00004365
    58c8:	06070010 	.word	0x06070010
    58cc:	00004e89 	.word	0x00004e89
    58d0:	00001051 	.word	0x00001051
    58d4:	00004d55 	.word	0x00004d55
    58d8:	24924925 	.word	0x24924925
    58dc:	06040047 	.word	0x06040047
    58e0:	05040001 	.word	0x05040001
    58e4:	00004335 	.word	0x00004335
    58e8:	05040004 	.word	0x05040004
                }
            }

            /* write data to the Object dictionary */
            SDO->ODF_arg.lastSegment = true;
    58ec:	68fb      	ldr	r3, [r7, #12]
    58ee:	681b      	ldr	r3, [r3, #0]
    58f0:	2201      	movs	r2, #1
    58f2:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
            abortCode = CO_SDO_writeOD( SDO->bufferOffset);
    58f6:	68fb      	ldr	r3, [r7, #12]
    58f8:	681b      	ldr	r3, [r3, #0]
    58fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    58fc:	4619      	mov	r1, r3
    58fe:	68f8      	ldr	r0, [r7, #12]
    5900:	4b98      	ldr	r3, [pc, #608]	; (5b64 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc50>)
    5902:	4798      	blx	r3
    5904:	62b8      	str	r0, [r7, #40]	; 0x28
            if(abortCode != 0U){
    5906:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5908:	2b00      	cmp	r3, #0
    590a:	d009      	beq.n	5920 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa0c>
                CO_SDO_abort(SDO, abortCode);
    590c:	68fb      	ldr	r3, [r7, #12]
    590e:	681b      	ldr	r3, [r3, #0]
    5910:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    5912:	4618      	mov	r0, r3
    5914:	4b94      	ldr	r3, [pc, #592]	; (5b68 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc54>)
    5916:	4798      	blx	r3
                return -1;
    5918:	f04f 33ff 	mov.w	r3, #4294967295
    591c:	f000 bc90 	b.w	6240 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            /* send response */
            SDO->CANtxBuff->data[0] = 0xA1;
    5920:	68fb      	ldr	r3, [r7, #12]
    5922:	681b      	ldr	r3, [r3, #0]
    5924:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    5928:	22a1      	movs	r2, #161	; 0xa1
    592a:	715a      	strb	r2, [r3, #5]
            SDO->state = CO_SDO_ST_IDLE;
    592c:	68fb      	ldr	r3, [r7, #12]
    592e:	681b      	ldr	r3, [r3, #0]
    5930:	2200      	movs	r2, #0
    5932:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            sendResponse = true;
    5936:	2301      	movs	r3, #1
    5938:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
    593c:	f000 bc64 	b.w	6208 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
        }

        case CO_SDO_ST_UPLOAD_INITIATE:{
            /* default response */
            SDO->CANtxBuff->data[1] = SDO->CANrxData[1];
    5940:	68fb      	ldr	r3, [r7, #12]
    5942:	681b      	ldr	r3, [r3, #0]
    5944:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    5948:	68fa      	ldr	r2, [r7, #12]
    594a:	6812      	ldr	r2, [r2, #0]
    594c:	7852      	ldrb	r2, [r2, #1]
    594e:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = SDO->CANrxData[2];
    5950:	68fb      	ldr	r3, [r7, #12]
    5952:	681b      	ldr	r3, [r3, #0]
    5954:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    5958:	68fa      	ldr	r2, [r7, #12]
    595a:	6812      	ldr	r2, [r2, #0]
    595c:	7892      	ldrb	r2, [r2, #2]
    595e:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->CANrxData[3];
    5960:	68fb      	ldr	r3, [r7, #12]
    5962:	681b      	ldr	r3, [r3, #0]
    5964:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    5968:	68fa      	ldr	r2, [r7, #12]
    596a:	6812      	ldr	r2, [r2, #0]
    596c:	78d2      	ldrb	r2, [r2, #3]
    596e:	721a      	strb	r2, [r3, #8]

            /* Expedited transfer */
            if(SDO->ODF_arg.dataLength <= 4U){
    5970:	68fb      	ldr	r3, [r7, #12]
    5972:	681b      	ldr	r3, [r3, #0]
    5974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    5976:	2b04      	cmp	r3, #4
    5978:	d835      	bhi.n	59e6 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xad2>
                for(i=0U; i<SDO->ODF_arg.dataLength; i++)
    597a:	2300      	movs	r3, #0
    597c:	63fb      	str	r3, [r7, #60]	; 0x3c
    597e:	68fb      	ldr	r3, [r7, #12]
    5980:	681b      	ldr	r3, [r3, #0]
    5982:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    5984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5986:	429a      	cmp	r2, r3
    5988:	d912      	bls.n	59b0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa9c>
                    SDO->CANtxBuff->data[4U+i] = SDO->ODF_arg.data[i];
    598a:	68fb      	ldr	r3, [r7, #12]
    598c:	681b      	ldr	r3, [r3, #0]
    598e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
    5992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5994:	3304      	adds	r3, #4
    5996:	68f9      	ldr	r1, [r7, #12]
    5998:	6809      	ldr	r1, [r1, #0]
    599a:	6c48      	ldr	r0, [r1, #68]	; 0x44
    599c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    599e:	4401      	add	r1, r0
    59a0:	7809      	ldrb	r1, [r1, #0]
    59a2:	4413      	add	r3, r2
    59a4:	460a      	mov	r2, r1
    59a6:	715a      	strb	r2, [r3, #5]
                for(i=0U; i<SDO->ODF_arg.dataLength; i++)
    59a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    59aa:	3301      	adds	r3, #1
    59ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    59ae:	e7e6      	b.n	597e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa6a>

                SDO->CANtxBuff->data[0] = 0x43U | ((4U-SDO->ODF_arg.dataLength) << 2U);
    59b0:	68fb      	ldr	r3, [r7, #12]
    59b2:	681b      	ldr	r3, [r3, #0]
    59b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    59b8:	68fa      	ldr	r2, [r7, #12]
    59ba:	6812      	ldr	r2, [r2, #0]
    59bc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    59be:	b2d2      	uxtb	r2, r2
    59c0:	f1c2 0204 	rsb	r2, r2, #4
    59c4:	b2d2      	uxtb	r2, r2
    59c6:	0092      	lsls	r2, r2, #2
    59c8:	b2d2      	uxtb	r2, r2
    59ca:	f042 0243 	orr.w	r2, r2, #67	; 0x43
    59ce:	b2d2      	uxtb	r2, r2
    59d0:	715a      	strb	r2, [r3, #5]
                SDO->state = CO_SDO_ST_IDLE;
    59d2:	68fb      	ldr	r3, [r7, #12]
    59d4:	681b      	ldr	r3, [r3, #0]
    59d6:	2200      	movs	r2, #0
    59d8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

                sendResponse = true;
    59dc:	2301      	movs	r3, #1
    59de:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                }

                /* send response */
                sendResponse = true;
            }
            break;
    59e2:	f000 bc11 	b.w	6208 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
                SDO->bufferOffset = 0U;
    59e6:	68fb      	ldr	r3, [r7, #12]
    59e8:	681b      	ldr	r3, [r3, #0]
    59ea:	2200      	movs	r2, #0
    59ec:	639a      	str	r2, [r3, #56]	; 0x38
                SDO->sequence = 0U;
    59ee:	68fb      	ldr	r3, [r7, #12]
    59f0:	681b      	ldr	r3, [r3, #0]
    59f2:	2200      	movs	r2, #0
    59f4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENTED;
    59f8:	68fb      	ldr	r3, [r7, #12]
    59fa:	681b      	ldr	r3, [r3, #0]
    59fc:	2222      	movs	r2, #34	; 0x22
    59fe:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                if(SDO->ODF_arg.dataLengthTotal != 0U){
    5a02:	68fb      	ldr	r3, [r7, #12]
    5a04:	681b      	ldr	r3, [r3, #0]
    5a06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    5a08:	2b00      	cmp	r3, #0
    5a0a:	d015      	beq.n	5a38 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xb24>
                    uint32_t len = SDO->ODF_arg.dataLengthTotal;
    5a0c:	68fb      	ldr	r3, [r7, #12]
    5a0e:	681b      	ldr	r3, [r3, #0]
    5a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    5a12:	617b      	str	r3, [r7, #20]
                    CO_memcpySwap4(&SDO->CANtxBuff->data[4], &len);
    5a14:	68fb      	ldr	r3, [r7, #12]
    5a16:	681b      	ldr	r3, [r3, #0]
    5a18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    5a1c:	3309      	adds	r3, #9
    5a1e:	f107 0214 	add.w	r2, r7, #20
    5a22:	4619      	mov	r1, r3
    5a24:	68f8      	ldr	r0, [r7, #12]
    5a26:	4b51      	ldr	r3, [pc, #324]	; (5b6c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc58>)
    5a28:	4798      	blx	r3
                    SDO->CANtxBuff->data[0] = 0x41U;
    5a2a:	68fb      	ldr	r3, [r7, #12]
    5a2c:	681b      	ldr	r3, [r3, #0]
    5a2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    5a32:	2241      	movs	r2, #65	; 0x41
    5a34:	715a      	strb	r2, [r3, #5]
    5a36:	e005      	b.n	5a44 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xb30>
                    SDO->CANtxBuff->data[0] = 0x40U;
    5a38:	68fb      	ldr	r3, [r7, #12]
    5a3a:	681b      	ldr	r3, [r3, #0]
    5a3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    5a40:	2240      	movs	r2, #64	; 0x40
    5a42:	715a      	strb	r2, [r3, #5]
                sendResponse = true;
    5a44:	2301      	movs	r3, #1
    5a46:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
    5a4a:	e3dd      	b.n	6208 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
        }

        case CO_SDO_ST_UPLOAD_SEGMENTED:{
            /* verify client command specifier */
            if((SDO->CANrxData[0]&0xE0U) != 0x60U){
    5a4c:	68fb      	ldr	r3, [r7, #12]
    5a4e:	681b      	ldr	r3, [r3, #0]
    5a50:	781b      	ldrb	r3, [r3, #0]
    5a52:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    5a56:	2b60      	cmp	r3, #96	; 0x60
    5a58:	d008      	beq.n	5a6c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xb58>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
    5a5a:	68fb      	ldr	r3, [r7, #12]
    5a5c:	681b      	ldr	r3, [r3, #0]
    5a5e:	4944      	ldr	r1, [pc, #272]	; (5b70 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc5c>)
    5a60:	4618      	mov	r0, r3
    5a62:	4b41      	ldr	r3, [pc, #260]	; (5b68 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc54>)
    5a64:	4798      	blx	r3
                return -1;
    5a66:	f04f 33ff 	mov.w	r3, #4294967295
    5a6a:	e3e9      	b.n	6240 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            /* verify toggle bit */
            i = ((SDO->CANrxData[0]&0x10U) != 0) ? 1U : 0U;
    5a6c:	68fb      	ldr	r3, [r7, #12]
    5a6e:	681b      	ldr	r3, [r3, #0]
    5a70:	781b      	ldrb	r3, [r3, #0]
    5a72:	f003 0310 	and.w	r3, r3, #16
    5a76:	2b00      	cmp	r3, #0
    5a78:	d001      	beq.n	5a7e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xb6a>
    5a7a:	2301      	movs	r3, #1
    5a7c:	e000      	b.n	5a80 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xb6c>
    5a7e:	2300      	movs	r3, #0
    5a80:	63fb      	str	r3, [r7, #60]	; 0x3c
            if(i != SDO->sequence){
    5a82:	68fb      	ldr	r3, [r7, #12]
    5a84:	681b      	ldr	r3, [r3, #0]
    5a86:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
    5a8a:	461a      	mov	r2, r3
    5a8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5a8e:	429a      	cmp	r2, r3
    5a90:	d008      	beq.n	5aa4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xb90>
                CO_SDO_abort(SDO, CO_SDO_AB_TOGGLE_BIT);/* toggle bit not alternated */
    5a92:	68fb      	ldr	r3, [r7, #12]
    5a94:	681b      	ldr	r3, [r3, #0]
    5a96:	4937      	ldr	r1, [pc, #220]	; (5b74 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc60>)
    5a98:	4618      	mov	r0, r3
    5a9a:	4b33      	ldr	r3, [pc, #204]	; (5b68 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc54>)
    5a9c:	4798      	blx	r3
                return -1;
    5a9e:	f04f 33ff 	mov.w	r3, #4294967295
    5aa2:	e3cd      	b.n	6240 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            /* calculate length to be sent */
            len = SDO->ODF_arg.dataLength - SDO->bufferOffset;
    5aa4:	68fb      	ldr	r3, [r7, #12]
    5aa6:	681b      	ldr	r3, [r3, #0]
    5aa8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    5aaa:	68fb      	ldr	r3, [r7, #12]
    5aac:	681b      	ldr	r3, [r3, #0]
    5aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    5ab0:	1ad3      	subs	r3, r2, r3
    5ab2:	643b      	str	r3, [r7, #64]	; 0x40
            if(len > 7U) len = 7U;
    5ab4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5ab6:	2b07      	cmp	r3, #7
    5ab8:	d901      	bls.n	5abe <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xbaa>
    5aba:	2307      	movs	r3, #7
    5abc:	643b      	str	r3, [r7, #64]	; 0x40

            /* If data type is domain, re-fill the data buffer if neccessary and indicated so. */
            if((SDO->ODF_arg.ODdataStorage == 0) && (len < 7U) && (!SDO->ODF_arg.lastSegment)){
    5abe:	68fb      	ldr	r3, [r7, #12]
    5ac0:	681b      	ldr	r3, [r3, #0]
    5ac2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    5ac4:	2b00      	cmp	r3, #0
    5ac6:	d179      	bne.n	5bbc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xca8>
    5ac8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5aca:	2b06      	cmp	r3, #6
    5acc:	d876      	bhi.n	5bbc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xca8>
    5ace:	68fb      	ldr	r3, [r7, #12]
    5ad0:	681b      	ldr	r3, [r3, #0]
    5ad2:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
    5ad6:	2b00      	cmp	r3, #0
    5ad8:	d170      	bne.n	5bbc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xca8>
                /* copy previous data to the beginning */
                for(i=0U; i<len; i++){
    5ada:	2300      	movs	r3, #0
    5adc:	63fb      	str	r3, [r7, #60]	; 0x3c
    5ade:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    5ae0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5ae2:	429a      	cmp	r2, r3
    5ae4:	d213      	bcs.n	5b0e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xbfa>
                    SDO->ODF_arg.data[i] = SDO->ODF_arg.data[SDO->bufferOffset+i];
    5ae6:	68fb      	ldr	r3, [r7, #12]
    5ae8:	681b      	ldr	r3, [r3, #0]
    5aea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    5aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5aee:	4413      	add	r3, r2
    5af0:	68fa      	ldr	r2, [r7, #12]
    5af2:	6812      	ldr	r2, [r2, #0]
    5af4:	6c51      	ldr	r1, [r2, #68]	; 0x44
    5af6:	68fa      	ldr	r2, [r7, #12]
    5af8:	6812      	ldr	r2, [r2, #0]
    5afa:	6b90      	ldr	r0, [r2, #56]	; 0x38
    5afc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    5afe:	4402      	add	r2, r0
    5b00:	440a      	add	r2, r1
    5b02:	7812      	ldrb	r2, [r2, #0]
    5b04:	701a      	strb	r2, [r3, #0]
                for(i=0U; i<len; i++){
    5b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5b08:	3301      	adds	r3, #1
    5b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
    5b0c:	e7e7      	b.n	5ade <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xbca>
                }

                /* move the beginning of the data buffer */
                SDO->ODF_arg.data += len;
    5b0e:	68fb      	ldr	r3, [r7, #12]
    5b10:	681b      	ldr	r3, [r3, #0]
    5b12:	68fa      	ldr	r2, [r7, #12]
    5b14:	6812      	ldr	r2, [r2, #0]
    5b16:	6c51      	ldr	r1, [r2, #68]	; 0x44
    5b18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    5b1a:	440a      	add	r2, r1
    5b1c:	645a      	str	r2, [r3, #68]	; 0x44
                SDO->ODF_arg.dataLength = CO_OD_getLength( SDO->entryNo, SDO->ODF_arg.subIndex) - len;
    5b1e:	68fb      	ldr	r3, [r7, #12]
    5b20:	681c      	ldr	r4, [r3, #0]
    5b22:	68fb      	ldr	r3, [r7, #12]
    5b24:	681b      	ldr	r3, [r3, #0]
    5b26:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    5b28:	68fb      	ldr	r3, [r7, #12]
    5b2a:	681b      	ldr	r3, [r3, #0]
    5b2c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
    5b30:	461a      	mov	r2, r3
    5b32:	68f8      	ldr	r0, [r7, #12]
    5b34:	4b10      	ldr	r3, [pc, #64]	; (5b78 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc64>)
    5b36:	4798      	blx	r3
    5b38:	4602      	mov	r2, r0
    5b3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5b3c:	1ad3      	subs	r3, r2, r3
    5b3e:	64e3      	str	r3, [r4, #76]	; 0x4c

                /* read next data from Object dictionary function */
                abortCode = CO_SDO_readOD( CO_SDO_BUFFER_SIZE);
    5b40:	2120      	movs	r1, #32
    5b42:	68f8      	ldr	r0, [r7, #12]
    5b44:	4b0d      	ldr	r3, [pc, #52]	; (5b7c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc68>)
    5b46:	4798      	blx	r3
    5b48:	62b8      	str	r0, [r7, #40]	; 0x28
                if(abortCode != 0U){
    5b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5b4c:	2b00      	cmp	r3, #0
    5b4e:	d017      	beq.n	5b80 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>
                    CO_SDO_abort(SDO, abortCode);
    5b50:	68fb      	ldr	r3, [r7, #12]
    5b52:	681b      	ldr	r3, [r3, #0]
    5b54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    5b56:	4618      	mov	r0, r3
    5b58:	4b03      	ldr	r3, [pc, #12]	; (5b68 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc54>)
    5b5a:	4798      	blx	r3
                    return -1;
    5b5c:	f04f 33ff 	mov.w	r3, #4294967295
    5b60:	e36e      	b.n	6240 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
    5b62:	bf00      	nop
    5b64:	00004d55 	.word	0x00004d55
    5b68:	00004e89 	.word	0x00004e89
    5b6c:	00004365 	.word	0x00004365
    5b70:	05040001 	.word	0x05040001
    5b74:	05030000 	.word	0x05030000
    5b78:	00004879 	.word	0x00004879
    5b7c:	00004c35 	.word	0x00004c35
                }

                /* return to the original data buffer */
                SDO->ODF_arg.data -= len;
    5b80:	68fb      	ldr	r3, [r7, #12]
    5b82:	681b      	ldr	r3, [r3, #0]
    5b84:	68fa      	ldr	r2, [r7, #12]
    5b86:	6812      	ldr	r2, [r2, #0]
    5b88:	6c51      	ldr	r1, [r2, #68]	; 0x44
    5b8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    5b8c:	4252      	negs	r2, r2
    5b8e:	440a      	add	r2, r1
    5b90:	645a      	str	r2, [r3, #68]	; 0x44
                SDO->ODF_arg.dataLength +=  len;
    5b92:	68fb      	ldr	r3, [r7, #12]
    5b94:	681b      	ldr	r3, [r3, #0]
    5b96:	68fa      	ldr	r2, [r7, #12]
    5b98:	6812      	ldr	r2, [r2, #0]
    5b9a:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
    5b9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    5b9e:	440a      	add	r2, r1
    5ba0:	64da      	str	r2, [r3, #76]	; 0x4c
                SDO->bufferOffset = 0;
    5ba2:	68fb      	ldr	r3, [r7, #12]
    5ba4:	681b      	ldr	r3, [r3, #0]
    5ba6:	2200      	movs	r2, #0
    5ba8:	639a      	str	r2, [r3, #56]	; 0x38

                /* re-calculate the length */
                len = SDO->ODF_arg.dataLength;
    5baa:	68fb      	ldr	r3, [r7, #12]
    5bac:	681b      	ldr	r3, [r3, #0]
    5bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    5bb0:	643b      	str	r3, [r7, #64]	; 0x40
                if(len > 7U) len = 7U;
    5bb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5bb4:	2b07      	cmp	r3, #7
    5bb6:	d901      	bls.n	5bbc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xca8>
    5bb8:	2307      	movs	r3, #7
    5bba:	643b      	str	r3, [r7, #64]	; 0x40
            }

            /* fill response data bytes */
            for(i=0U; i<len; i++)
    5bbc:	2300      	movs	r3, #0
    5bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
    5bc0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    5bc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5bc4:	429a      	cmp	r2, r3
    5bc6:	d215      	bcs.n	5bf4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xce0>
                SDO->CANtxBuff->data[i+1] = SDO->ODF_arg.data[SDO->bufferOffset++];
    5bc8:	68fb      	ldr	r3, [r7, #12]
    5bca:	681b      	ldr	r3, [r3, #0]
    5bcc:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    5bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5bd2:	1c59      	adds	r1, r3, #1
    5bd4:	68fb      	ldr	r3, [r7, #12]
    5bd6:	681b      	ldr	r3, [r3, #0]
    5bd8:	6c5c      	ldr	r4, [r3, #68]	; 0x44
    5bda:	68fb      	ldr	r3, [r7, #12]
    5bdc:	681a      	ldr	r2, [r3, #0]
    5bde:	6b93      	ldr	r3, [r2, #56]	; 0x38
    5be0:	1c5d      	adds	r5, r3, #1
    5be2:	6395      	str	r5, [r2, #56]	; 0x38
    5be4:	4423      	add	r3, r4
    5be6:	781a      	ldrb	r2, [r3, #0]
    5be8:	1843      	adds	r3, r0, r1
    5bea:	715a      	strb	r2, [r3, #5]
            for(i=0U; i<len; i++)
    5bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5bee:	3301      	adds	r3, #1
    5bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
    5bf2:	e7e5      	b.n	5bc0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xcac>

            /* first response byte */
            SDO->CANtxBuff->data[0] = 0x00 | (SDO->sequence ? 0x10 : 0x00) | ((7-len)<<1);
    5bf4:	68fb      	ldr	r3, [r7, #12]
    5bf6:	681b      	ldr	r3, [r3, #0]
    5bf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    5bfc:	68fa      	ldr	r2, [r7, #12]
    5bfe:	6812      	ldr	r2, [r2, #0]
    5c00:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
    5c04:	2a00      	cmp	r2, #0
    5c06:	d001      	beq.n	5c0c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xcf8>
    5c08:	2110      	movs	r1, #16
    5c0a:	e000      	b.n	5c0e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xcfa>
    5c0c:	2100      	movs	r1, #0
    5c0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    5c10:	b2d2      	uxtb	r2, r2
    5c12:	f1c2 0207 	rsb	r2, r2, #7
    5c16:	b2d2      	uxtb	r2, r2
    5c18:	0052      	lsls	r2, r2, #1
    5c1a:	b2d2      	uxtb	r2, r2
    5c1c:	430a      	orrs	r2, r1
    5c1e:	b2d2      	uxtb	r2, r2
    5c20:	715a      	strb	r2, [r3, #5]
            SDO->sequence = (SDO->sequence) ? 0 : 1;
    5c22:	68fb      	ldr	r3, [r7, #12]
    5c24:	681b      	ldr	r3, [r3, #0]
    5c26:	68fa      	ldr	r2, [r7, #12]
    5c28:	6812      	ldr	r2, [r2, #0]
    5c2a:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
    5c2e:	2a00      	cmp	r2, #0
    5c30:	bf0c      	ite	eq
    5c32:	2201      	moveq	r2, #1
    5c34:	2200      	movne	r2, #0
    5c36:	b2d2      	uxtb	r2, r2
    5c38:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

            /* verify end of transfer */
            if((SDO->bufferOffset == SDO->ODF_arg.dataLength) && (SDO->ODF_arg.lastSegment)){
    5c3c:	68fb      	ldr	r3, [r7, #12]
    5c3e:	681b      	ldr	r3, [r3, #0]
    5c40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    5c42:	68fb      	ldr	r3, [r7, #12]
    5c44:	681b      	ldr	r3, [r3, #0]
    5c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    5c48:	429a      	cmp	r2, r3
    5c4a:	d117      	bne.n	5c7c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xd68>
    5c4c:	68fb      	ldr	r3, [r7, #12]
    5c4e:	681b      	ldr	r3, [r3, #0]
    5c50:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
    5c54:	2b00      	cmp	r3, #0
    5c56:	d011      	beq.n	5c7c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xd68>
                SDO->CANtxBuff->data[0] |= 0x01;
    5c58:	68fb      	ldr	r3, [r7, #12]
    5c5a:	681b      	ldr	r3, [r3, #0]
    5c5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    5c60:	68fa      	ldr	r2, [r7, #12]
    5c62:	6812      	ldr	r2, [r2, #0]
    5c64:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
    5c68:	7952      	ldrb	r2, [r2, #5]
    5c6a:	f042 0201 	orr.w	r2, r2, #1
    5c6e:	b2d2      	uxtb	r2, r2
    5c70:	715a      	strb	r2, [r3, #5]
                SDO->state = CO_SDO_ST_IDLE;
    5c72:	68fb      	ldr	r3, [r7, #12]
    5c74:	681b      	ldr	r3, [r3, #0]
    5c76:	2200      	movs	r2, #0
    5c78:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            }

            /* send response */
            sendResponse = true;
    5c7c:	2301      	movs	r3, #1
    5c7e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
    5c82:	e2c1      	b.n	6208 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
        }

        case CO_SDO_ST_UPLOAD_BL_INITIATE:{
            /* default response */
            SDO->CANtxBuff->data[1] = SDO->CANrxData[1];
    5c84:	68fb      	ldr	r3, [r7, #12]
    5c86:	681b      	ldr	r3, [r3, #0]
    5c88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    5c8c:	68fa      	ldr	r2, [r7, #12]
    5c8e:	6812      	ldr	r2, [r2, #0]
    5c90:	7852      	ldrb	r2, [r2, #1]
    5c92:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = SDO->CANrxData[2];
    5c94:	68fb      	ldr	r3, [r7, #12]
    5c96:	681b      	ldr	r3, [r3, #0]
    5c98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    5c9c:	68fa      	ldr	r2, [r7, #12]
    5c9e:	6812      	ldr	r2, [r2, #0]
    5ca0:	7892      	ldrb	r2, [r2, #2]
    5ca2:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->CANrxData[3];
    5ca4:	68fb      	ldr	r3, [r7, #12]
    5ca6:	681b      	ldr	r3, [r3, #0]
    5ca8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    5cac:	68fa      	ldr	r2, [r7, #12]
    5cae:	6812      	ldr	r2, [r2, #0]
    5cb0:	78d2      	ldrb	r2, [r2, #3]
    5cb2:	721a      	strb	r2, [r3, #8]

            /* calculate CRC, if enabled */
            if((SDO->CANrxData[0] & 0x04U) != 0U){
    5cb4:	68fb      	ldr	r3, [r7, #12]
    5cb6:	681b      	ldr	r3, [r3, #0]
    5cb8:	781b      	ldrb	r3, [r3, #0]
    5cba:	f003 0304 	and.w	r3, r3, #4
    5cbe:	2b00      	cmp	r3, #0
    5cc0:	d013      	beq.n	5cea <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xdd6>
                SDO->crcEnabled = true;
    5cc2:	68fb      	ldr	r3, [r7, #12]
    5cc4:	681b      	ldr	r3, [r3, #0]
    5cc6:	2201      	movs	r2, #1
    5cc8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                SDO->crc = crc16_ccitt(SDO->ODF_arg.data, SDO->ODF_arg.dataLength, 0);
    5ccc:	68fb      	ldr	r3, [r7, #12]
    5cce:	681c      	ldr	r4, [r3, #0]
    5cd0:	68fb      	ldr	r3, [r7, #12]
    5cd2:	681b      	ldr	r3, [r3, #0]
    5cd4:	6c59      	ldr	r1, [r3, #68]	; 0x44
    5cd6:	68fb      	ldr	r3, [r7, #12]
    5cd8:	681b      	ldr	r3, [r3, #0]
    5cda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    5cdc:	2300      	movs	r3, #0
    5cde:	68f8      	ldr	r0, [r7, #12]
    5ce0:	4d93      	ldr	r5, [pc, #588]	; (5f30 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x101c>)
    5ce2:	47a8      	blx	r5
    5ce4:	4603      	mov	r3, r0
    5ce6:	6763      	str	r3, [r4, #116]	; 0x74
    5ce8:	e008      	b.n	5cfc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xde8>
            }
            else{
                SDO->crcEnabled = false;
    5cea:	68fb      	ldr	r3, [r7, #12]
    5cec:	681b      	ldr	r3, [r3, #0]
    5cee:	2200      	movs	r2, #0
    5cf0:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                SDO->crc = 0;
    5cf4:	68fb      	ldr	r3, [r7, #12]
    5cf6:	681b      	ldr	r3, [r3, #0]
    5cf8:	2200      	movs	r2, #0
    5cfa:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Number of segments per block */
            SDO->blksize = SDO->CANrxData[4];
    5cfc:	68fb      	ldr	r3, [r7, #12]
    5cfe:	681b      	ldr	r3, [r3, #0]
    5d00:	68fa      	ldr	r2, [r7, #12]
    5d02:	6812      	ldr	r2, [r2, #0]
    5d04:	7912      	ldrb	r2, [r2, #4]
    5d06:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

            /* verify client subcommand */
            if((SDO->CANrxData[0]&0x03U) != 0x00U){
    5d0a:	68fb      	ldr	r3, [r7, #12]
    5d0c:	681b      	ldr	r3, [r3, #0]
    5d0e:	781b      	ldrb	r3, [r3, #0]
    5d10:	f003 0303 	and.w	r3, r3, #3
    5d14:	2b00      	cmp	r3, #0
    5d16:	d008      	beq.n	5d2a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xe16>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
    5d18:	68fb      	ldr	r3, [r7, #12]
    5d1a:	681b      	ldr	r3, [r3, #0]
    5d1c:	4985      	ldr	r1, [pc, #532]	; (5f34 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1020>)
    5d1e:	4618      	mov	r0, r3
    5d20:	4b85      	ldr	r3, [pc, #532]	; (5f38 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1024>)
    5d22:	4798      	blx	r3
                return -1;
    5d24:	f04f 33ff 	mov.w	r3, #4294967295
    5d28:	e28a      	b.n	6240 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            /* verify blksize and if SDO data buffer is large enough */
            if((SDO->blksize < 1U) || (SDO->blksize > 127U) ||
    5d2a:	68fb      	ldr	r3, [r7, #12]
    5d2c:	681b      	ldr	r3, [r3, #0]
    5d2e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    5d32:	2b00      	cmp	r3, #0
    5d34:	d019      	beq.n	5d6a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xe56>
    5d36:	68fb      	ldr	r3, [r7, #12]
    5d38:	681b      	ldr	r3, [r3, #0]
    5d3a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    5d3e:	b25b      	sxtb	r3, r3
    5d40:	2b00      	cmp	r3, #0
    5d42:	db12      	blt.n	5d6a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xe56>
               (((SDO->blksize*7U) > SDO->ODF_arg.dataLength) && (!SDO->ODF_arg.lastSegment))){
    5d44:	68fb      	ldr	r3, [r7, #12]
    5d46:	681b      	ldr	r3, [r3, #0]
    5d48:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    5d4c:	461a      	mov	r2, r3
    5d4e:	4613      	mov	r3, r2
    5d50:	00db      	lsls	r3, r3, #3
    5d52:	1a9a      	subs	r2, r3, r2
    5d54:	68fb      	ldr	r3, [r7, #12]
    5d56:	681b      	ldr	r3, [r3, #0]
    5d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            if((SDO->blksize < 1U) || (SDO->blksize > 127U) ||
    5d5a:	429a      	cmp	r2, r3
    5d5c:	d90e      	bls.n	5d7c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xe68>
               (((SDO->blksize*7U) > SDO->ODF_arg.dataLength) && (!SDO->ODF_arg.lastSegment))){
    5d5e:	68fb      	ldr	r3, [r7, #12]
    5d60:	681b      	ldr	r3, [r3, #0]
    5d62:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
    5d66:	2b00      	cmp	r3, #0
    5d68:	d108      	bne.n	5d7c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xe68>
                CO_SDO_abort(SDO, CO_SDO_AB_BLOCK_SIZE); /* Invalid block size (block mode only). */
    5d6a:	68fb      	ldr	r3, [r7, #12]
    5d6c:	681b      	ldr	r3, [r3, #0]
    5d6e:	4973      	ldr	r1, [pc, #460]	; (5f3c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1028>)
    5d70:	4618      	mov	r0, r3
    5d72:	4b71      	ldr	r3, [pc, #452]	; (5f38 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1024>)
    5d74:	4798      	blx	r3
                return -1;
    5d76:	f04f 33ff 	mov.w	r3, #4294967295
    5d7a:	e261      	b.n	6240 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            /* indicate data size, if known */
            if(SDO->ODF_arg.dataLengthTotal != 0U){
    5d7c:	68fb      	ldr	r3, [r7, #12]
    5d7e:	681b      	ldr	r3, [r3, #0]
    5d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    5d82:	2b00      	cmp	r3, #0
    5d84:	d015      	beq.n	5db2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xe9e>
                uint32_t len = SDO->ODF_arg.dataLengthTotal;
    5d86:	68fb      	ldr	r3, [r7, #12]
    5d88:	681b      	ldr	r3, [r3, #0]
    5d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    5d8c:	613b      	str	r3, [r7, #16]
                CO_memcpySwap4(&SDO->CANtxBuff->data[4], &len);
    5d8e:	68fb      	ldr	r3, [r7, #12]
    5d90:	681b      	ldr	r3, [r3, #0]
    5d92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    5d96:	3309      	adds	r3, #9
    5d98:	f107 0210 	add.w	r2, r7, #16
    5d9c:	4619      	mov	r1, r3
    5d9e:	68f8      	ldr	r0, [r7, #12]
    5da0:	4b67      	ldr	r3, [pc, #412]	; (5f40 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x102c>)
    5da2:	4798      	blx	r3
                SDO->CANtxBuff->data[0] = 0xC6U;
    5da4:	68fb      	ldr	r3, [r7, #12]
    5da6:	681b      	ldr	r3, [r3, #0]
    5da8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    5dac:	22c6      	movs	r2, #198	; 0xc6
    5dae:	715a      	strb	r2, [r3, #5]
    5db0:	e005      	b.n	5dbe <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xeaa>
            }
            else{
                SDO->CANtxBuff->data[0] = 0xC4U;
    5db2:	68fb      	ldr	r3, [r7, #12]
    5db4:	681b      	ldr	r3, [r3, #0]
    5db6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    5dba:	22c4      	movs	r2, #196	; 0xc4
    5dbc:	715a      	strb	r2, [r3, #5]
            }

            /* send response */
            SDO->state = CO_SDO_ST_UPLOAD_BL_INITIATE_2;
    5dbe:	68fb      	ldr	r3, [r7, #12]
    5dc0:	681b      	ldr	r3, [r3, #0]
    5dc2:	2225      	movs	r2, #37	; 0x25
    5dc4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            sendResponse = true;
    5dc8:	2301      	movs	r3, #1
    5dca:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
    5dce:	e21b      	b.n	6208 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
        }

        case CO_SDO_ST_UPLOAD_BL_INITIATE_2:{
            /* verify client command specifier and subcommand */
            if((SDO->CANrxData[0]&0xE3U) != 0xA3U){
    5dd0:	68fb      	ldr	r3, [r7, #12]
    5dd2:	681b      	ldr	r3, [r3, #0]
    5dd4:	781b      	ldrb	r3, [r3, #0]
    5dd6:	f003 03e3 	and.w	r3, r3, #227	; 0xe3
    5dda:	2ba3      	cmp	r3, #163	; 0xa3
    5ddc:	d008      	beq.n	5df0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xedc>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
    5dde:	68fb      	ldr	r3, [r7, #12]
    5de0:	681b      	ldr	r3, [r3, #0]
    5de2:	4954      	ldr	r1, [pc, #336]	; (5f34 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1020>)
    5de4:	4618      	mov	r0, r3
    5de6:	4b54      	ldr	r3, [pc, #336]	; (5f38 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1024>)
    5de8:	4798      	blx	r3
                return -1;
    5dea:	f04f 33ff 	mov.w	r3, #4294967295
    5dee:	e227      	b.n	6240 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            SDO->bufferOffset = 0;
    5df0:	68fb      	ldr	r3, [r7, #12]
    5df2:	681b      	ldr	r3, [r3, #0]
    5df4:	2200      	movs	r2, #0
    5df6:	639a      	str	r2, [r3, #56]	; 0x38
            SDO->sequence = 0;
    5df8:	68fb      	ldr	r3, [r7, #12]
    5dfa:	681b      	ldr	r3, [r3, #0]
    5dfc:	2200      	movs	r2, #0
    5dfe:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
            SDO->endOfTransfer = false;
    5e02:	68fb      	ldr	r3, [r7, #12]
    5e04:	681b      	ldr	r3, [r3, #0]
    5e06:	2200      	movs	r2, #0
    5e08:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
            SDO->CANrxNew = false;
    5e0c:	68fb      	ldr	r3, [r7, #12]
    5e0e:	681b      	ldr	r3, [r3, #0]
    5e10:	2200      	movs	r2, #0
    5e12:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
            SDO->state = CO_SDO_ST_UPLOAD_BL_SUBBLOCK;
    5e16:	68fb      	ldr	r3, [r7, #12]
    5e18:	681b      	ldr	r3, [r3, #0]
    5e1a:	2226      	movs	r2, #38	; 0x26
    5e1c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            /* continue in next case */
        }

        case CO_SDO_ST_UPLOAD_BL_SUBBLOCK:{
            /* is block confirmation received */
            if(SDO->CANrxNew){
    5e20:	68fb      	ldr	r3, [r7, #12]
    5e22:	681b      	ldr	r3, [r3, #0]
    5e24:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
    5e28:	2b00      	cmp	r3, #0
    5e2a:	f000 813f 	beq.w	60ac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1198>
                uint8_t ackseq;
                uint32_t j;

                /* verify client command specifier and subcommand */
                if((SDO->CANrxData[0]&0xE3U) != 0xA2U){
    5e2e:	68fb      	ldr	r3, [r7, #12]
    5e30:	681b      	ldr	r3, [r3, #0]
    5e32:	781b      	ldrb	r3, [r3, #0]
    5e34:	f003 03e3 	and.w	r3, r3, #227	; 0xe3
    5e38:	2ba2      	cmp	r3, #162	; 0xa2
    5e3a:	d008      	beq.n	5e4e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xf3a>
                    CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
    5e3c:	68fb      	ldr	r3, [r7, #12]
    5e3e:	681b      	ldr	r3, [r3, #0]
    5e40:	493c      	ldr	r1, [pc, #240]	; (5f34 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1020>)
    5e42:	4618      	mov	r0, r3
    5e44:	4b3c      	ldr	r3, [pc, #240]	; (5f38 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1024>)
    5e46:	4798      	blx	r3
                    return -1;
    5e48:	f04f 33ff 	mov.w	r3, #4294967295
    5e4c:	e1f8      	b.n	6240 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                }

                ackseq = SDO->CANrxData[1];   /* sequence number of the last segment, that was received correctly. */
    5e4e:	68fb      	ldr	r3, [r7, #12]
    5e50:	681b      	ldr	r3, [r3, #0]
    5e52:	785b      	ldrb	r3, [r3, #1]
    5e54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

                /* verify if response is too early */
                if(ackseq > SDO->sequence){
    5e58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    5e5c:	68fa      	ldr	r2, [r7, #12]
    5e5e:	6812      	ldr	r2, [r2, #0]
    5e60:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
    5e64:	4293      	cmp	r3, r2
    5e66:	dd08      	ble.n	5e7a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xf66>
                    CO_SDO_abort(SDO, CO_SDO_AB_SEQ_NUM); /* Invalid sequence */
    5e68:	68fb      	ldr	r3, [r7, #12]
    5e6a:	681b      	ldr	r3, [r3, #0]
    5e6c:	4935      	ldr	r1, [pc, #212]	; (5f44 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1030>)
    5e6e:	4618      	mov	r0, r3
    5e70:	4b31      	ldr	r3, [pc, #196]	; (5f38 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1024>)
    5e72:	4798      	blx	r3
                    return -1;
    5e74:	f04f 33ff 	mov.w	r3, #4294967295
    5e78:	e1e2      	b.n	6240 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                }

                /* end of transfer */
                if((SDO->endOfTransfer) && (ackseq == SDO->blksize)){
    5e7a:	68fb      	ldr	r3, [r7, #12]
    5e7c:	681b      	ldr	r3, [r3, #0]
    5e7e:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
    5e82:	2b00      	cmp	r3, #0
    5e84:	d033      	beq.n	5eee <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xfda>
    5e86:	68fb      	ldr	r3, [r7, #12]
    5e88:	681b      	ldr	r3, [r3, #0]
    5e8a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    5e8e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
    5e92:	429a      	cmp	r2, r3
    5e94:	d12b      	bne.n	5eee <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xfda>
                    /* first response byte */
                    SDO->CANtxBuff->data[0] = 0xC1 | ((7 - SDO->lastLen) << 2);
    5e96:	68fb      	ldr	r3, [r7, #12]
    5e98:	681b      	ldr	r3, [r3, #0]
    5e9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    5e9e:	68fa      	ldr	r2, [r7, #12]
    5ea0:	6812      	ldr	r2, [r2, #0]
    5ea2:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
    5ea6:	f1c2 0207 	rsb	r2, r2, #7
    5eaa:	0092      	lsls	r2, r2, #2
    5eac:	b252      	sxtb	r2, r2
    5eae:	f062 023e 	orn	r2, r2, #62	; 0x3e
    5eb2:	b252      	sxtb	r2, r2
    5eb4:	b2d2      	uxtb	r2, r2
    5eb6:	715a      	strb	r2, [r3, #5]

                    /* CRC */
                    if(SDO->crcEnabled)
    5eb8:	68fb      	ldr	r3, [r7, #12]
    5eba:	681b      	ldr	r3, [r3, #0]
    5ebc:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
    5ec0:	2b00      	cmp	r3, #0
    5ec2:	d00b      	beq.n	5edc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xfc8>
                        CO_memcpySwap2(&SDO->CANtxBuff->data[1], &SDO->crc);
    5ec4:	68fb      	ldr	r3, [r7, #12]
    5ec6:	681b      	ldr	r3, [r3, #0]
    5ec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    5ecc:	1d99      	adds	r1, r3, #6
    5ece:	68fb      	ldr	r3, [r7, #12]
    5ed0:	681b      	ldr	r3, [r3, #0]
    5ed2:	3374      	adds	r3, #116	; 0x74
    5ed4:	461a      	mov	r2, r3
    5ed6:	68f8      	ldr	r0, [r7, #12]
    5ed8:	4b1b      	ldr	r3, [pc, #108]	; (5f48 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1034>)
    5eda:	4798      	blx	r3

                    SDO->state = CO_SDO_ST_UPLOAD_BL_END;
    5edc:	68fb      	ldr	r3, [r7, #12]
    5ede:	681b      	ldr	r3, [r3, #0]
    5ee0:	2227      	movs	r2, #39	; 0x27
    5ee2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

                    /* send response */
                    sendResponse = true;
    5ee6:	2301      	movs	r3, #1
    5ee8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                    break;
    5eec:	e18c      	b.n	6208 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
                }

                /* move remaining data to the beginning */
                for(i=ackseq*7, j=0; i<SDO->ODF_arg.dataLength; i++, j++)
    5eee:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
    5ef2:	4613      	mov	r3, r2
    5ef4:	00db      	lsls	r3, r3, #3
    5ef6:	1a9b      	subs	r3, r3, r2
    5ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
    5efa:	2300      	movs	r3, #0
    5efc:	63bb      	str	r3, [r7, #56]	; 0x38
    5efe:	68fb      	ldr	r3, [r7, #12]
    5f00:	681b      	ldr	r3, [r3, #0]
    5f02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    5f04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5f06:	429a      	cmp	r2, r3
    5f08:	d920      	bls.n	5f4c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1038>
                    SDO->ODF_arg.data[j] = SDO->ODF_arg.data[i];
    5f0a:	68fb      	ldr	r3, [r7, #12]
    5f0c:	681b      	ldr	r3, [r3, #0]
    5f0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    5f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    5f12:	4413      	add	r3, r2
    5f14:	68fa      	ldr	r2, [r7, #12]
    5f16:	6812      	ldr	r2, [r2, #0]
    5f18:	6c51      	ldr	r1, [r2, #68]	; 0x44
    5f1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    5f1c:	440a      	add	r2, r1
    5f1e:	7812      	ldrb	r2, [r2, #0]
    5f20:	701a      	strb	r2, [r3, #0]
                for(i=ackseq*7, j=0; i<SDO->ODF_arg.dataLength; i++, j++)
    5f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5f24:	3301      	adds	r3, #1
    5f26:	63fb      	str	r3, [r7, #60]	; 0x3c
    5f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    5f2a:	3301      	adds	r3, #1
    5f2c:	63bb      	str	r3, [r7, #56]	; 0x38
    5f2e:	e7e6      	b.n	5efe <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xfea>
    5f30:	00001051 	.word	0x00001051
    5f34:	05040001 	.word	0x05040001
    5f38:	00004e89 	.word	0x00004e89
    5f3c:	05040002 	.word	0x05040002
    5f40:	00004365 	.word	0x00004365
    5f44:	05040003 	.word	0x05040003
    5f48:	00004335 	.word	0x00004335

                /* set remaining data length in buffer */
                SDO->ODF_arg.dataLength -= ackseq * 7U;
    5f4c:	68fb      	ldr	r3, [r7, #12]
    5f4e:	6819      	ldr	r1, [r3, #0]
    5f50:	68fb      	ldr	r3, [r7, #12]
    5f52:	681b      	ldr	r3, [r3, #0]
    5f54:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
    5f56:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
    5f5a:	4613      	mov	r3, r2
    5f5c:	00db      	lsls	r3, r3, #3
    5f5e:	1a9b      	subs	r3, r3, r2
    5f60:	1ac3      	subs	r3, r0, r3
    5f62:	64cb      	str	r3, [r1, #76]	; 0x4c

                /* new block size */
                SDO->blksize = SDO->CANrxData[2];
    5f64:	68fb      	ldr	r3, [r7, #12]
    5f66:	681b      	ldr	r3, [r3, #0]
    5f68:	68fa      	ldr	r2, [r7, #12]
    5f6a:	6812      	ldr	r2, [r2, #0]
    5f6c:	7892      	ldrb	r2, [r2, #2]
    5f6e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                /* If data type is domain, re-fill the data buffer if necessary and indicated so. */
                if((SDO->ODF_arg.ODdataStorage == 0) && (SDO->ODF_arg.dataLength < (SDO->blksize*7U)) && (!SDO->ODF_arg.lastSegment)){
    5f72:	68fb      	ldr	r3, [r7, #12]
    5f74:	681b      	ldr	r3, [r3, #0]
    5f76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    5f78:	2b00      	cmp	r3, #0
    5f7a:	d168      	bne.n	604e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x113a>
    5f7c:	68fb      	ldr	r3, [r7, #12]
    5f7e:	681b      	ldr	r3, [r3, #0]
    5f80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    5f82:	68fb      	ldr	r3, [r7, #12]
    5f84:	681b      	ldr	r3, [r3, #0]
    5f86:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    5f8a:	4619      	mov	r1, r3
    5f8c:	460b      	mov	r3, r1
    5f8e:	00db      	lsls	r3, r3, #3
    5f90:	1a5b      	subs	r3, r3, r1
    5f92:	429a      	cmp	r2, r3
    5f94:	d25b      	bcs.n	604e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x113a>
    5f96:	68fb      	ldr	r3, [r7, #12]
    5f98:	681b      	ldr	r3, [r3, #0]
    5f9a:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
    5f9e:	2b00      	cmp	r3, #0
    5fa0:	d155      	bne.n	604e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x113a>
                    /* move the beginning of the data buffer */
                    len = SDO->ODF_arg.dataLength; /* length of valid data in buffer */
    5fa2:	68fb      	ldr	r3, [r7, #12]
    5fa4:	681b      	ldr	r3, [r3, #0]
    5fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    5fa8:	643b      	str	r3, [r7, #64]	; 0x40
                    SDO->ODF_arg.data += len;
    5faa:	68fb      	ldr	r3, [r7, #12]
    5fac:	681b      	ldr	r3, [r3, #0]
    5fae:	68fa      	ldr	r2, [r7, #12]
    5fb0:	6812      	ldr	r2, [r2, #0]
    5fb2:	6c51      	ldr	r1, [r2, #68]	; 0x44
    5fb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    5fb6:	440a      	add	r2, r1
    5fb8:	645a      	str	r2, [r3, #68]	; 0x44
                    SDO->ODF_arg.dataLength = CO_OD_getLength( SDO->entryNo, SDO->ODF_arg.subIndex) - len;
    5fba:	68fb      	ldr	r3, [r7, #12]
    5fbc:	681c      	ldr	r4, [r3, #0]
    5fbe:	68fb      	ldr	r3, [r7, #12]
    5fc0:	681b      	ldr	r3, [r3, #0]
    5fc2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    5fc4:	68fb      	ldr	r3, [r7, #12]
    5fc6:	681b      	ldr	r3, [r3, #0]
    5fc8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
    5fcc:	461a      	mov	r2, r3
    5fce:	68f8      	ldr	r0, [r7, #12]
    5fd0:	4b9d      	ldr	r3, [pc, #628]	; (6248 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1334>)
    5fd2:	4798      	blx	r3
    5fd4:	4602      	mov	r2, r0
    5fd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5fd8:	1ad3      	subs	r3, r2, r3
    5fda:	64e3      	str	r3, [r4, #76]	; 0x4c

                    /* read next data from Object dictionary function */
                    abortCode = CO_SDO_readOD( CO_SDO_BUFFER_SIZE);
    5fdc:	2120      	movs	r1, #32
    5fde:	68f8      	ldr	r0, [r7, #12]
    5fe0:	4b9a      	ldr	r3, [pc, #616]	; (624c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1338>)
    5fe2:	4798      	blx	r3
    5fe4:	62b8      	str	r0, [r7, #40]	; 0x28
                    if(abortCode != 0U){
    5fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5fe8:	2b00      	cmp	r3, #0
    5fea:	d008      	beq.n	5ffe <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x10ea>
                        CO_SDO_abort(SDO, abortCode);
    5fec:	68fb      	ldr	r3, [r7, #12]
    5fee:	681b      	ldr	r3, [r3, #0]
    5ff0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    5ff2:	4618      	mov	r0, r3
    5ff4:	4b96      	ldr	r3, [pc, #600]	; (6250 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x133c>)
    5ff6:	4798      	blx	r3
                        return -1;
    5ff8:	f04f 33ff 	mov.w	r3, #4294967295
    5ffc:	e120      	b.n	6240 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                    }

                    /* calculate CRC on next bytes, if enabled */
                    if(SDO->crcEnabled){
    5ffe:	68fb      	ldr	r3, [r7, #12]
    6000:	681b      	ldr	r3, [r3, #0]
    6002:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
    6006:	2b00      	cmp	r3, #0
    6008:	d010      	beq.n	602c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1118>
                        SDO->crc = crc16_ccitt(SDO->ODF_arg.data, SDO->ODF_arg.dataLength, SDO->crc);
    600a:	68fb      	ldr	r3, [r7, #12]
    600c:	681c      	ldr	r4, [r3, #0]
    600e:	68fb      	ldr	r3, [r7, #12]
    6010:	681b      	ldr	r3, [r3, #0]
    6012:	6c59      	ldr	r1, [r3, #68]	; 0x44
    6014:	68fb      	ldr	r3, [r7, #12]
    6016:	681b      	ldr	r3, [r3, #0]
    6018:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    601a:	68fb      	ldr	r3, [r7, #12]
    601c:	681b      	ldr	r3, [r3, #0]
    601e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    6020:	b29b      	uxth	r3, r3
    6022:	68f8      	ldr	r0, [r7, #12]
    6024:	4d8b      	ldr	r5, [pc, #556]	; (6254 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1340>)
    6026:	47a8      	blx	r5
    6028:	4603      	mov	r3, r0
    602a:	6763      	str	r3, [r4, #116]	; 0x74
                    }

                  /* return to the original data buffer */
                    SDO->ODF_arg.data -= len;
    602c:	68fb      	ldr	r3, [r7, #12]
    602e:	681b      	ldr	r3, [r3, #0]
    6030:	68fa      	ldr	r2, [r7, #12]
    6032:	6812      	ldr	r2, [r2, #0]
    6034:	6c51      	ldr	r1, [r2, #68]	; 0x44
    6036:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    6038:	4252      	negs	r2, r2
    603a:	440a      	add	r2, r1
    603c:	645a      	str	r2, [r3, #68]	; 0x44
                    SDO->ODF_arg.dataLength +=  len;
    603e:	68fb      	ldr	r3, [r7, #12]
    6040:	681b      	ldr	r3, [r3, #0]
    6042:	68fa      	ldr	r2, [r7, #12]
    6044:	6812      	ldr	r2, [r2, #0]
    6046:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
    6048:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    604a:	440a      	add	r2, r1
    604c:	64da      	str	r2, [r3, #76]	; 0x4c
                }

                /* verify if SDO data buffer is large enough */
                if(((SDO->blksize*7U) > SDO->ODF_arg.dataLength) && (!SDO->ODF_arg.lastSegment)){
    604e:	68fb      	ldr	r3, [r7, #12]
    6050:	681b      	ldr	r3, [r3, #0]
    6052:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    6056:	461a      	mov	r2, r3
    6058:	4613      	mov	r3, r2
    605a:	00db      	lsls	r3, r3, #3
    605c:	1a9a      	subs	r2, r3, r2
    605e:	68fb      	ldr	r3, [r7, #12]
    6060:	681b      	ldr	r3, [r3, #0]
    6062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    6064:	429a      	cmp	r2, r3
    6066:	d90e      	bls.n	6086 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1172>
    6068:	68fb      	ldr	r3, [r7, #12]
    606a:	681b      	ldr	r3, [r3, #0]
    606c:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
    6070:	2b00      	cmp	r3, #0
    6072:	d108      	bne.n	6086 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1172>
                    CO_SDO_abort(SDO, CO_SDO_AB_BLOCK_SIZE); /* Invalid block size (block mode only). */
    6074:	68fb      	ldr	r3, [r7, #12]
    6076:	681b      	ldr	r3, [r3, #0]
    6078:	4977      	ldr	r1, [pc, #476]	; (6258 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1344>)
    607a:	4618      	mov	r0, r3
    607c:	4b74      	ldr	r3, [pc, #464]	; (6250 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x133c>)
    607e:	4798      	blx	r3
                    return -1;
    6080:	f04f 33ff 	mov.w	r3, #4294967295
    6084:	e0dc      	b.n	6240 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                }

                SDO->bufferOffset = 0U;
    6086:	68fb      	ldr	r3, [r7, #12]
    6088:	681b      	ldr	r3, [r3, #0]
    608a:	2200      	movs	r2, #0
    608c:	639a      	str	r2, [r3, #56]	; 0x38
                SDO->sequence = 0U;
    608e:	68fb      	ldr	r3, [r7, #12]
    6090:	681b      	ldr	r3, [r3, #0]
    6092:	2200      	movs	r2, #0
    6094:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                SDO->endOfTransfer = false;
    6098:	68fb      	ldr	r3, [r7, #12]
    609a:	681b      	ldr	r3, [r3, #0]
    609c:	2200      	movs	r2, #0
    609e:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

                /* clear flag here */
                SDO->CANrxNew = false;
    60a2:	68fb      	ldr	r3, [r7, #12]
    60a4:	681b      	ldr	r3, [r3, #0]
    60a6:	2200      	movs	r2, #0
    60a8:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
            }

            /* return, if all segments was already transfered or on end of transfer */
            if((SDO->sequence == SDO->blksize) || (SDO->endOfTransfer)){
    60ac:	68fb      	ldr	r3, [r7, #12]
    60ae:	681b      	ldr	r3, [r3, #0]
    60b0:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
    60b4:	68fb      	ldr	r3, [r7, #12]
    60b6:	681b      	ldr	r3, [r3, #0]
    60b8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    60bc:	429a      	cmp	r2, r3
    60be:	d005      	beq.n	60cc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x11b8>
    60c0:	68fb      	ldr	r3, [r7, #12]
    60c2:	681b      	ldr	r3, [r3, #0]
    60c4:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
    60c8:	2b00      	cmp	r3, #0
    60ca:	d001      	beq.n	60d0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x11bc>
                return 1;/* don't clear the SDO->CANrxNew flag, so return directly */
    60cc:	2301      	movs	r3, #1
    60ce:	e0b7      	b.n	6240 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            /* reset timeout */
            SDO->timeoutTimer = 0;
    60d0:	68fb      	ldr	r3, [r7, #12]
    60d2:	681b      	ldr	r3, [r3, #0]
    60d4:	2200      	movs	r2, #0
    60d6:	66da      	str	r2, [r3, #108]	; 0x6c

            /* calculate length to be sent */
            len = SDO->ODF_arg.dataLength - SDO->bufferOffset;
    60d8:	68fb      	ldr	r3, [r7, #12]
    60da:	681b      	ldr	r3, [r3, #0]
    60dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    60de:	68fb      	ldr	r3, [r7, #12]
    60e0:	681b      	ldr	r3, [r3, #0]
    60e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    60e4:	1ad3      	subs	r3, r2, r3
    60e6:	643b      	str	r3, [r7, #64]	; 0x40
            if(len > 7U){
    60e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    60ea:	2b07      	cmp	r3, #7
    60ec:	d901      	bls.n	60f2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x11de>
                len = 7U;
    60ee:	2307      	movs	r3, #7
    60f0:	643b      	str	r3, [r7, #64]	; 0x40
            }

            /* fill response data bytes */
            for(i=0U; i<len; i++){
    60f2:	2300      	movs	r3, #0
    60f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    60f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    60f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    60fa:	429a      	cmp	r2, r3
    60fc:	d215      	bcs.n	612a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1216>
                SDO->CANtxBuff->data[i+1] = SDO->ODF_arg.data[SDO->bufferOffset++];
    60fe:	68fb      	ldr	r3, [r7, #12]
    6100:	681b      	ldr	r3, [r3, #0]
    6102:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    6106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6108:	1c59      	adds	r1, r3, #1
    610a:	68fb      	ldr	r3, [r7, #12]
    610c:	681b      	ldr	r3, [r3, #0]
    610e:	6c5c      	ldr	r4, [r3, #68]	; 0x44
    6110:	68fb      	ldr	r3, [r7, #12]
    6112:	681a      	ldr	r2, [r3, #0]
    6114:	6b93      	ldr	r3, [r2, #56]	; 0x38
    6116:	1c5d      	adds	r5, r3, #1
    6118:	6395      	str	r5, [r2, #56]	; 0x38
    611a:	4423      	add	r3, r4
    611c:	781a      	ldrb	r2, [r3, #0]
    611e:	1843      	adds	r3, r0, r1
    6120:	715a      	strb	r2, [r3, #5]
            for(i=0U; i<len; i++){
    6122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6124:	3301      	adds	r3, #1
    6126:	63fb      	str	r3, [r7, #60]	; 0x3c
    6128:	e7e5      	b.n	60f6 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x11e2>
            }

            /* first response byte */
            SDO->CANtxBuff->data[0] = ++SDO->sequence;
    612a:	68fb      	ldr	r3, [r7, #12]
    612c:	681b      	ldr	r3, [r3, #0]
    612e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
    6132:	68fb      	ldr	r3, [r7, #12]
    6134:	681b      	ldr	r3, [r3, #0]
    6136:	f893 106a 	ldrb.w	r1, [r3, #106]	; 0x6a
    613a:	3101      	adds	r1, #1
    613c:	b2c9      	uxtb	r1, r1
    613e:	f883 106a 	strb.w	r1, [r3, #106]	; 0x6a
    6142:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
    6146:	7153      	strb	r3, [r2, #5]

            /* verify end of transfer */
            if((SDO->bufferOffset == SDO->ODF_arg.dataLength) && (SDO->ODF_arg.lastSegment)){
    6148:	68fb      	ldr	r3, [r7, #12]
    614a:	681b      	ldr	r3, [r3, #0]
    614c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    614e:	68fb      	ldr	r3, [r7, #12]
    6150:	681b      	ldr	r3, [r3, #0]
    6152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    6154:	429a      	cmp	r2, r3
    6156:	d125      	bne.n	61a4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1290>
    6158:	68fb      	ldr	r3, [r7, #12]
    615a:	681b      	ldr	r3, [r3, #0]
    615c:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
    6160:	2b00      	cmp	r3, #0
    6162:	d01f      	beq.n	61a4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1290>
                SDO->CANtxBuff->data[0] |= 0x80;
    6164:	68fb      	ldr	r3, [r7, #12]
    6166:	681b      	ldr	r3, [r3, #0]
    6168:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    616c:	68fa      	ldr	r2, [r7, #12]
    616e:	6812      	ldr	r2, [r2, #0]
    6170:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
    6174:	7952      	ldrb	r2, [r2, #5]
    6176:	f062 027f 	orn	r2, r2, #127	; 0x7f
    617a:	b2d2      	uxtb	r2, r2
    617c:	715a      	strb	r2, [r3, #5]
                SDO->lastLen = len;
    617e:	68fb      	ldr	r3, [r7, #12]
    6180:	681b      	ldr	r3, [r3, #0]
    6182:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    6184:	b2d2      	uxtb	r2, r2
    6186:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                SDO->blksize = SDO->sequence;
    618a:	68fb      	ldr	r3, [r7, #12]
    618c:	681b      	ldr	r3, [r3, #0]
    618e:	68fa      	ldr	r2, [r7, #12]
    6190:	6812      	ldr	r2, [r2, #0]
    6192:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
    6196:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                SDO->endOfTransfer = true;
    619a:	68fb      	ldr	r3, [r7, #12]
    619c:	681b      	ldr	r3, [r3, #0]
    619e:	2201      	movs	r2, #1
    61a0:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
            }

            /* send response */
             ptrCODriverClass->CAN_Send(SDO->CANtxBuff);
    61a4:	4b2d      	ldr	r3, [pc, #180]	; (625c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1348>)
    61a6:	681a      	ldr	r2, [r3, #0]
    61a8:	68fb      	ldr	r3, [r7, #12]
    61aa:	681b      	ldr	r3, [r3, #0]
    61ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    61b0:	4619      	mov	r1, r3
    61b2:	4610      	mov	r0, r2
    61b4:	4b2a      	ldr	r3, [pc, #168]	; (6260 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x134c>)
    61b6:	4798      	blx	r3

            /* Set timerNext_ms to 0 to inform OS to call this function again without delay. */
            if(timerNext_ms != NULL){
    61b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    61ba:	2b00      	cmp	r3, #0
    61bc:	d002      	beq.n	61c4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12b0>
                *timerNext_ms = 0;
    61be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    61c0:	2200      	movs	r2, #0
    61c2:	601a      	str	r2, [r3, #0]
            }

            /* don't clear the SDO->CANrxNew flag, so return directly */
            return 1;
    61c4:	2301      	movs	r3, #1
    61c6:	e03b      	b.n	6240 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
        }

        case CO_SDO_ST_UPLOAD_BL_END:{
            /* verify client command specifier */
            if((SDO->CANrxData[0]&0xE1U) != 0xA1U){
    61c8:	68fb      	ldr	r3, [r7, #12]
    61ca:	681b      	ldr	r3, [r3, #0]
    61cc:	781b      	ldrb	r3, [r3, #0]
    61ce:	f003 03e1 	and.w	r3, r3, #225	; 0xe1
    61d2:	2ba1      	cmp	r3, #161	; 0xa1
    61d4:	d008      	beq.n	61e8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12d4>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
    61d6:	68fb      	ldr	r3, [r7, #12]
    61d8:	681b      	ldr	r3, [r3, #0]
    61da:	4922      	ldr	r1, [pc, #136]	; (6264 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1350>)
    61dc:	4618      	mov	r0, r3
    61de:	4b1c      	ldr	r3, [pc, #112]	; (6250 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x133c>)
    61e0:	4798      	blx	r3
                return -1;
    61e2:	f04f 33ff 	mov.w	r3, #4294967295
    61e6:	e02b      	b.n	6240 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            SDO->state = CO_SDO_ST_IDLE;
    61e8:	68fb      	ldr	r3, [r7, #12]
    61ea:	681b      	ldr	r3, [r3, #0]
    61ec:	2200      	movs	r2, #0
    61ee:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            break;
    61f2:	e009      	b.n	6208 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
        }

        default:{
            CO_SDO_abort(SDO, CO_SDO_AB_DEVICE_INCOMPAT);/* general internal incompatibility in the device */
    61f4:	68fb      	ldr	r3, [r7, #12]
    61f6:	681b      	ldr	r3, [r3, #0]
    61f8:	491b      	ldr	r1, [pc, #108]	; (6268 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1354>)
    61fa:	4618      	mov	r0, r3
    61fc:	4b14      	ldr	r3, [pc, #80]	; (6250 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x133c>)
    61fe:	4798      	blx	r3
            return -1;
    6200:	f04f 33ff 	mov.w	r3, #4294967295
    6204:	e01c      	b.n	6240 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            break;
    6206:	bf00      	nop
        }
    }

    /* free buffer and send message */
    SDO->CANrxNew = false;
    6208:	68fb      	ldr	r3, [r7, #12]
    620a:	681b      	ldr	r3, [r3, #0]
    620c:	2200      	movs	r2, #0
    620e:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
    if(sendResponse) {
    6212:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
    6216:	2b00      	cmp	r3, #0
    6218:	d009      	beq.n	622e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x131a>
        ptrCODriverClass->CAN_Send(SDO->CANtxBuff);
    621a:	4b10      	ldr	r3, [pc, #64]	; (625c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1348>)
    621c:	681a      	ldr	r2, [r3, #0]
    621e:	68fb      	ldr	r3, [r7, #12]
    6220:	681b      	ldr	r3, [r3, #0]
    6222:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    6226:	4619      	mov	r1, r3
    6228:	4610      	mov	r0, r2
    622a:	4b0d      	ldr	r3, [pc, #52]	; (6260 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x134c>)
    622c:	4798      	blx	r3
    }

    if(SDO->state != CO_SDO_ST_IDLE){
    622e:	68fb      	ldr	r3, [r7, #12]
    6230:	681b      	ldr	r3, [r3, #0]
    6232:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
    6236:	2b00      	cmp	r3, #0
    6238:	d001      	beq.n	623e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132a>
        return 1;
    623a:	2301      	movs	r3, #1
    623c:	e000      	b.n	6240 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
    }

    return 0;
    623e:	2300      	movs	r3, #0
}
    6240:	4618      	mov	r0, r3
    6242:	3748      	adds	r7, #72	; 0x48
    6244:	46bd      	mov	sp, r7
    6246:	bdb0      	pop	{r4, r5, r7, pc}
    6248:	00004879 	.word	0x00004879
    624c:	00004c35 	.word	0x00004c35
    6250:	00004e89 	.word	0x00004e89
    6254:	00001051 	.word	0x00001051
    6258:	05040002 	.word	0x05040002
    625c:	20000960 	.word	0x20000960
    6260:	00001621 	.word	0x00001621
    6264:	05040001 	.word	0x05040001
    6268:	06040047 	.word	0x06040047

0000626c <_ZN13CO_SYNC_ClassC1Ev>:

#include "CO_SYNC_Class.h"
#include "CO_Driver_Class.h"

// default constructor
CO_SYNC_Class::CO_SYNC_Class()
    626c:	b480      	push	{r7}
    626e:	b083      	sub	sp, #12
    6270:	af00      	add	r7, sp, #0
    6272:	6078      	str	r0, [r7, #4]
{
} //CO_SYNC_Class
    6274:	687b      	ldr	r3, [r7, #4]
    6276:	4618      	mov	r0, r3
    6278:	370c      	adds	r7, #12
    627a:	46bd      	mov	sp, r7
    627c:	bc80      	pop	{r7}
    627e:	4770      	bx	lr

00006280 <_ZN13CO_SYNC_ClassD1Ev>:

// default destructor
CO_SYNC_Class::~CO_SYNC_Class()
    6280:	b480      	push	{r7}
    6282:	b083      	sub	sp, #12
    6284:	af00      	add	r7, sp, #0
    6286:	6078      	str	r0, [r7, #4]
{
} //~CO_SYNC_Class
    6288:	687b      	ldr	r3, [r7, #4]
    628a:	4618      	mov	r0, r3
    628c:	370c      	adds	r7, #12
    628e:	46bd      	mov	sp, r7
    6290:	bc80      	pop	{r7}
    6292:	4770      	bx	lr

00006294 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SYNC_receive(void *object, const CO_CANrxMsg_t *msg){
    6294:	b480      	push	{r7}
    6296:	b085      	sub	sp, #20
    6298:	af00      	add	r7, sp, #0
    629a:	6078      	str	r0, [r7, #4]
    629c:	6039      	str	r1, [r7, #0]
	
    CO_SYNC_t *SYNC;
    uint8_t operState;

    SYNC = (CO_SYNC_t*)object;   /* this is the correct pointer type of the first argument */
    629e:	687b      	ldr	r3, [r7, #4]
    62a0:	60fb      	str	r3, [r7, #12]
    operState = *SYNC->operatingState;
    62a2:	68fb      	ldr	r3, [r7, #12]
    62a4:	685b      	ldr	r3, [r3, #4]
    62a6:	781b      	ldrb	r3, [r3, #0]
    62a8:	72fb      	strb	r3, [r7, #11]

    if((operState == CO_NMT_OPERATIONAL) || (operState == CO_NMT_PRE_OPERATIONAL)){
    62aa:	7afb      	ldrb	r3, [r7, #11]
    62ac:	2b05      	cmp	r3, #5
    62ae:	d002      	beq.n	62b6 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x22>
    62b0:	7afb      	ldrb	r3, [r7, #11]
    62b2:	2b7f      	cmp	r3, #127	; 0x7f
    62b4:	d132      	bne.n	631c <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x88>
        if(SYNC->counterOverflowValue == 0){
    62b6:	68fb      	ldr	r3, [r7, #12]
    62b8:	7e1b      	ldrb	r3, [r3, #24]
    62ba:	2b00      	cmp	r3, #0
    62bc:	d10e      	bne.n	62dc <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x48>
            if(msg->DLC == 0U){
    62be:	683b      	ldr	r3, [r7, #0]
    62c0:	7d1b      	ldrb	r3, [r3, #20]
    62c2:	2b00      	cmp	r3, #0
    62c4:	d103      	bne.n	62ce <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x3a>
                SYNC->CANrxNew = true;
    62c6:	68fb      	ldr	r3, [r7, #12]
    62c8:	2201      	movs	r2, #1
    62ca:	769a      	strb	r2, [r3, #26]
    62cc:	e018      	b.n	6300 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x6c>
            }
            else{
                SYNC->receiveError = (uint32_t)msg->DLC | 0x0100U;
    62ce:	683b      	ldr	r3, [r7, #0]
    62d0:	7d1b      	ldrb	r3, [r3, #20]
    62d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    62d6:	68fb      	ldr	r3, [r7, #12]
    62d8:	625a      	str	r2, [r3, #36]	; 0x24
    62da:	e011      	b.n	6300 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x6c>
            }
        }
        else{
            if(msg->DLC == 1U){
    62dc:	683b      	ldr	r3, [r7, #0]
    62de:	7d1b      	ldrb	r3, [r3, #20]
    62e0:	2b01      	cmp	r3, #1
    62e2:	d107      	bne.n	62f4 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x60>
                SYNC->counter = msg->data[0];
    62e4:	683b      	ldr	r3, [r7, #0]
    62e6:	7d5a      	ldrb	r2, [r3, #21]
    62e8:	68fb      	ldr	r3, [r7, #12]
    62ea:	771a      	strb	r2, [r3, #28]
                SYNC->CANrxNew = true;
    62ec:	68fb      	ldr	r3, [r7, #12]
    62ee:	2201      	movs	r2, #1
    62f0:	769a      	strb	r2, [r3, #26]
    62f2:	e005      	b.n	6300 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x6c>
            }
            else{
                SYNC->receiveError = (uint32_t)msg->DLC | 0x0200U;
    62f4:	683b      	ldr	r3, [r7, #0]
    62f6:	7d1b      	ldrb	r3, [r3, #20]
    62f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    62fc:	68fb      	ldr	r3, [r7, #12]
    62fe:	625a      	str	r2, [r3, #36]	; 0x24
            }
        }
        if(SYNC->CANrxNew) {
    6300:	68fb      	ldr	r3, [r7, #12]
    6302:	7e9b      	ldrb	r3, [r3, #26]
    6304:	2b00      	cmp	r3, #0
    6306:	d009      	beq.n	631c <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x88>
            SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
    6308:	68fb      	ldr	r3, [r7, #12]
    630a:	7edb      	ldrb	r3, [r3, #27]
    630c:	2b00      	cmp	r3, #0
    630e:	bf0c      	ite	eq
    6310:	2301      	moveq	r3, #1
    6312:	2300      	movne	r3, #0
    6314:	b2db      	uxtb	r3, r3
    6316:	461a      	mov	r2, r3
    6318:	68fb      	ldr	r3, [r7, #12]
    631a:	76da      	strb	r2, [r3, #27]
        }
    }
}
    631c:	bf00      	nop
    631e:	3714      	adds	r7, #20
    6320:	46bd      	mov	sp, r7
    6322:	bc80      	pop	{r7}
    6324:	4770      	bx	lr
	...

00006328 <_ZL11CO_ODF_1005P12CO_ODF_arg_t>:
/*
 * Function for accessing _COB ID SYNC Message_ (index 0x1005) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1005(CO_ODF_arg_t *ODF_arg){
    6328:	b590      	push	{r4, r7, lr}
    632a:	b08b      	sub	sp, #44	; 0x2c
    632c:	af04      	add	r7, sp, #16
    632e:	6078      	str	r0, [r7, #4]
    CO_SYNC_t *SYNC;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
    6330:	2300      	movs	r3, #0
    6332:	617b      	str	r3, [r7, #20]

    SYNC = (CO_SYNC_t*) ODF_arg->object;
    6334:	687b      	ldr	r3, [r7, #4]
    6336:	681b      	ldr	r3, [r3, #0]
    6338:	60fb      	str	r3, [r7, #12]
    value =ptrCODriverClass->CO_getUint32(ODF_arg->data);
    633a:	4b35      	ldr	r3, [pc, #212]	; (6410 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xe8>)
    633c:	681b      	ldr	r3, [r3, #0]
    633e:	1d1a      	adds	r2, r3, #4
    6340:	687b      	ldr	r3, [r7, #4]
    6342:	685b      	ldr	r3, [r3, #4]
    6344:	4619      	mov	r1, r3
    6346:	4610      	mov	r0, r2
    6348:	4b32      	ldr	r3, [pc, #200]	; (6414 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xec>)
    634a:	4798      	blx	r3
    634c:	60b8      	str	r0, [r7, #8]

    if(!ODF_arg->reading){
    634e:	687b      	ldr	r3, [r7, #4]
    6350:	7f5b      	ldrb	r3, [r3, #29]
    6352:	2b00      	cmp	r3, #0
    6354:	d157      	bne.n	6406 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xde>
        uint8_t configureSyncProducer = 0;
    6356:	2300      	movs	r3, #0
    6358:	74fb      	strb	r3, [r7, #19]

        /* only 11-bit CAN identifier is supported */
        if(value & 0x20000000UL){
    635a:	68bb      	ldr	r3, [r7, #8]
    635c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    6360:	2b00      	cmp	r3, #0
    6362:	d002      	beq.n	636a <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x42>
            ret = CO_SDO_AB_INVALID_VALUE;
    6364:	4b2c      	ldr	r3, [pc, #176]	; (6418 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xf0>)
    6366:	617b      	str	r3, [r7, #20]
    6368:	e00d      	b.n	6386 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x5e>
        }
        else{
            /* is 'generate Sync messge' bit set? */
            if(value & 0x40000000UL){
    636a:	68bb      	ldr	r3, [r7, #8]
    636c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
    6370:	2b00      	cmp	r3, #0
    6372:	d008      	beq.n	6386 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x5e>
                /* if bit was set before, value can not be changed */
                if(SYNC->isProducer){
    6374:	68fb      	ldr	r3, [r7, #12]
    6376:	7a1b      	ldrb	r3, [r3, #8]
    6378:	2b00      	cmp	r3, #0
    637a:	d002      	beq.n	6382 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x5a>
                    ret = CO_SDO_AB_DATA_DEV_STATE;
    637c:	4b27      	ldr	r3, [pc, #156]	; (641c <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xf4>)
    637e:	617b      	str	r3, [r7, #20]
    6380:	e001      	b.n	6386 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x5e>
                }
                else{
                    configureSyncProducer = 1;
    6382:	2301      	movs	r3, #1
    6384:	74fb      	strb	r3, [r7, #19]
                }
            }
        }

        /* configure sync producer and consumer */
        if(ret == CO_SDO_AB_NONE){
    6386:	697b      	ldr	r3, [r7, #20]
    6388:	2b00      	cmp	r3, #0
    638a:	d13c      	bne.n	6406 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xde>
            SYNC->COB_ID = (uint32_t)(value & 0x7FFU);
    638c:	68bb      	ldr	r3, [r7, #8]
    638e:	f3c3 020a 	ubfx	r2, r3, #0, #11
    6392:	68fb      	ldr	r3, [r7, #12]
    6394:	60da      	str	r2, [r3, #12]

            if(configureSyncProducer){
    6396:	7cfb      	ldrb	r3, [r7, #19]
    6398:	2b00      	cmp	r3, #0
    639a:	d021      	beq.n	63e0 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xb8>
                uint8_t len = 0U;
    639c:	2300      	movs	r3, #0
    639e:	74bb      	strb	r3, [r7, #18]
                if(SYNC->counterOverflowValue != 0U){
    63a0:	68fb      	ldr	r3, [r7, #12]
    63a2:	7e1b      	ldrb	r3, [r3, #24]
    63a4:	2b00      	cmp	r3, #0
    63a6:	d007      	beq.n	63b8 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x90>
                    len = 1U;
    63a8:	2301      	movs	r3, #1
    63aa:	74bb      	strb	r3, [r7, #18]
                    SYNC->counter = 0U;
    63ac:	68fb      	ldr	r3, [r7, #12]
    63ae:	2200      	movs	r2, #0
    63b0:	771a      	strb	r2, [r3, #28]
                    SYNC->timer = 0U;
    63b2:	68fb      	ldr	r3, [r7, #12]
    63b4:	2200      	movs	r2, #0
    63b6:	621a      	str	r2, [r3, #32]
                }
                SYNC->CANtxBuff = ptrCODriverClass->CAN_Tx_BufferInit(
    63b8:	4b15      	ldr	r3, [pc, #84]	; (6410 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xe8>)
    63ba:	6818      	ldr	r0, [r3, #0]
    63bc:	68fb      	ldr	r3, [r7, #12]
    63be:	6b99      	ldr	r1, [r3, #56]	; 0x38
    63c0:	68fb      	ldr	r3, [r7, #12]
    63c2:	68da      	ldr	r2, [r3, #12]
    63c4:	2300      	movs	r3, #0
    63c6:	9301      	str	r3, [sp, #4]
    63c8:	7cbb      	ldrb	r3, [r7, #18]
    63ca:	9300      	str	r3, [sp, #0]
    63cc:	2300      	movs	r3, #0
    63ce:	4c14      	ldr	r4, [pc, #80]	; (6420 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xf8>)
    63d0:	47a0      	blx	r4
    63d2:	4602      	mov	r2, r0
    63d4:	68fb      	ldr	r3, [r7, #12]
    63d6:	635a      	str	r2, [r3, #52]	; 0x34
                        SYNC->CANdevTxIdx,      /* index of specific buffer inside CAN module */
                        SYNC->COB_ID,           /* CAN identifier */
                        0,                      /* rtr */
                        len,                    /* number of data bytes */
                        0);                     /* synchronous message flag bit */
                SYNC->isProducer = true;
    63d8:	68fb      	ldr	r3, [r7, #12]
    63da:	2201      	movs	r2, #1
    63dc:	721a      	strb	r2, [r3, #8]
    63de:	e002      	b.n	63e6 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xbe>
            }
            else{
                SYNC->isProducer = false;
    63e0:	68fb      	ldr	r3, [r7, #12]
    63e2:	2200      	movs	r2, #0
    63e4:	721a      	strb	r2, [r3, #8]
            }

            ptrCODriverClass->CAN_Rx_BufferInit(
    63e6:	4b0a      	ldr	r3, [pc, #40]	; (6410 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xe8>)
    63e8:	6818      	ldr	r0, [r3, #0]
    63ea:	68fb      	ldr	r3, [r7, #12]
    63ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    63ee:	68fb      	ldr	r3, [r7, #12]
    63f0:	68da      	ldr	r2, [r3, #12]
                    SYNC->CANdevRxIdx,      /* rx buffer index */
                    SYNC->COB_ID,           /* CAN identifier */
                    0x7FF,                  /* mask */
                    0,                      /* rtr */
                    (void*)SYNC,            /* object passed to receive function */
                    CO_SYNC_receive);       /* this function will process received message */
    63f2:	4b0c      	ldr	r3, [pc, #48]	; (6424 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xfc>)
    63f4:	9302      	str	r3, [sp, #8]
    63f6:	68fb      	ldr	r3, [r7, #12]
    63f8:	9301      	str	r3, [sp, #4]
    63fa:	2300      	movs	r3, #0
    63fc:	9300      	str	r3, [sp, #0]
    63fe:	f240 73ff 	movw	r3, #2047	; 0x7ff
    6402:	4c09      	ldr	r4, [pc, #36]	; (6428 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x100>)
    6404:	47a0      	blx	r4
        }
    }

    return ret;
    6406:	697b      	ldr	r3, [r7, #20]
}
    6408:	4618      	mov	r0, r3
    640a:	371c      	adds	r7, #28
    640c:	46bd      	mov	sp, r7
    640e:	bd90      	pop	{r4, r7, pc}
    6410:	20000960 	.word	0x20000960
    6414:	000042c9 	.word	0x000042c9
    6418:	06090030 	.word	0x06090030
    641c:	08000022 	.word	0x08000022
    6420:	00001575 	.word	0x00001575
    6424:	00006295 	.word	0x00006295
    6428:	00001479 	.word	0x00001479

0000642c <_ZL11CO_ODF_1006P12CO_ODF_arg_t>:
/*
 * Function for accessing _Communication cycle period_ (index 0x1006) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1006(CO_ODF_arg_t *ODF_arg){
    642c:	b580      	push	{r7, lr}
    642e:	b086      	sub	sp, #24
    6430:	af00      	add	r7, sp, #0
    6432:	6078      	str	r0, [r7, #4]
    CO_SYNC_t *SYNC;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
    6434:	2300      	movs	r3, #0
    6436:	617b      	str	r3, [r7, #20]

    SYNC = (CO_SYNC_t*) ODF_arg->object;
    6438:	687b      	ldr	r3, [r7, #4]
    643a:	681b      	ldr	r3, [r3, #0]
    643c:	613b      	str	r3, [r7, #16]
    value = ptrCODriverClass->CO_getUint32(ODF_arg->data);
    643e:	4b19      	ldr	r3, [pc, #100]	; (64a4 <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x78>)
    6440:	681b      	ldr	r3, [r3, #0]
    6442:	1d1a      	adds	r2, r3, #4
    6444:	687b      	ldr	r3, [r7, #4]
    6446:	685b      	ldr	r3, [r3, #4]
    6448:	4619      	mov	r1, r3
    644a:	4610      	mov	r0, r2
    644c:	4b16      	ldr	r3, [pc, #88]	; (64a8 <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x7c>)
    644e:	4798      	blx	r3
    6450:	60f8      	str	r0, [r7, #12]

    if(!ODF_arg->reading){
    6452:	687b      	ldr	r3, [r7, #4]
    6454:	7f5b      	ldrb	r3, [r3, #29]
    6456:	2b00      	cmp	r3, #0
    6458:	d11f      	bne.n	649a <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x6e>
        /* period transition from 0 to something */
        if((SYNC->periodTime == 0) && (value != 0)){
    645a:	693b      	ldr	r3, [r7, #16]
    645c:	691b      	ldr	r3, [r3, #16]
    645e:	2b00      	cmp	r3, #0
    6460:	d105      	bne.n	646e <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x42>
    6462:	68fb      	ldr	r3, [r7, #12]
    6464:	2b00      	cmp	r3, #0
    6466:	d002      	beq.n	646e <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x42>
            SYNC->counter = 0;
    6468:	693b      	ldr	r3, [r7, #16]
    646a:	2200      	movs	r2, #0
    646c:	771a      	strb	r2, [r3, #28]
        }

        SYNC->periodTime = value;
    646e:	693b      	ldr	r3, [r7, #16]
    6470:	68fa      	ldr	r2, [r7, #12]
    6472:	611a      	str	r2, [r3, #16]
        SYNC->periodTimeoutTime = (value / 2U) * 3U;
    6474:	68fb      	ldr	r3, [r7, #12]
    6476:	085a      	lsrs	r2, r3, #1
    6478:	4613      	mov	r3, r2
    647a:	005b      	lsls	r3, r3, #1
    647c:	441a      	add	r2, r3
    647e:	693b      	ldr	r3, [r7, #16]
    6480:	615a      	str	r2, [r3, #20]
        /* overflow? */
        if(SYNC->periodTimeoutTime < value){
    6482:	693b      	ldr	r3, [r7, #16]
    6484:	695a      	ldr	r2, [r3, #20]
    6486:	68fb      	ldr	r3, [r7, #12]
    6488:	429a      	cmp	r2, r3
    648a:	d203      	bcs.n	6494 <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x68>
            SYNC->periodTimeoutTime = 0xFFFFFFFFUL;
    648c:	693b      	ldr	r3, [r7, #16]
    648e:	f04f 32ff 	mov.w	r2, #4294967295
    6492:	615a      	str	r2, [r3, #20]
        }

        SYNC->timer = 0;
    6494:	693b      	ldr	r3, [r7, #16]
    6496:	2200      	movs	r2, #0
    6498:	621a      	str	r2, [r3, #32]
    }

    return ret;
    649a:	697b      	ldr	r3, [r7, #20]
}
    649c:	4618      	mov	r0, r3
    649e:	3718      	adds	r7, #24
    64a0:	46bd      	mov	sp, r7
    64a2:	bd80      	pop	{r7, pc}
    64a4:	20000960 	.word	0x20000960
    64a8:	000042c9 	.word	0x000042c9

000064ac <_ZL11CO_ODF_1019P12CO_ODF_arg_t>:
/**
 * Function for accessing _Synchronous counter overflow value_ (index 0x1019) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1019(CO_ODF_arg_t *ODF_arg){
    64ac:	b590      	push	{r4, r7, lr}
    64ae:	b089      	sub	sp, #36	; 0x24
    64b0:	af02      	add	r7, sp, #8
    64b2:	6078      	str	r0, [r7, #4]
    CO_SYNC_t *SYNC;
    uint8_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
    64b4:	2300      	movs	r3, #0
    64b6:	617b      	str	r3, [r7, #20]

    SYNC = (CO_SYNC_t*) ODF_arg->object;
    64b8:	687b      	ldr	r3, [r7, #4]
    64ba:	681b      	ldr	r3, [r3, #0]
    64bc:	60fb      	str	r3, [r7, #12]
    value = ODF_arg->data[0];
    64be:	687b      	ldr	r3, [r7, #4]
    64c0:	685b      	ldr	r3, [r3, #4]
    64c2:	781b      	ldrb	r3, [r3, #0]
    64c4:	72fb      	strb	r3, [r7, #11]

    if(!ODF_arg->reading){
    64c6:	687b      	ldr	r3, [r7, #4]
    64c8:	7f5b      	ldrb	r3, [r3, #29]
    64ca:	2b00      	cmp	r3, #0
    64cc:	d12c      	bne.n	6528 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x7c>
        uint8_t len = 0U;
    64ce:	2300      	movs	r3, #0
    64d0:	74fb      	strb	r3, [r7, #19]

        if(SYNC->periodTime){
    64d2:	68fb      	ldr	r3, [r7, #12]
    64d4:	691b      	ldr	r3, [r3, #16]
    64d6:	2b00      	cmp	r3, #0
    64d8:	d002      	beq.n	64e0 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x34>
            ret = CO_SDO_AB_DATA_DEV_STATE;
    64da:	4b16      	ldr	r3, [pc, #88]	; (6534 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x88>)
    64dc:	617b      	str	r3, [r7, #20]
    64de:	e023      	b.n	6528 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x7c>
        }
        else if((value == 1) || (value > 240 && value <= 255)){
    64e0:	7afb      	ldrb	r3, [r7, #11]
    64e2:	2b01      	cmp	r3, #1
    64e4:	d005      	beq.n	64f2 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x46>
    64e6:	7afb      	ldrb	r3, [r7, #11]
    64e8:	2bf0      	cmp	r3, #240	; 0xf0
    64ea:	dd05      	ble.n	64f8 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x4c>
    64ec:	7afb      	ldrb	r3, [r7, #11]
    64ee:	2bff      	cmp	r3, #255	; 0xff
    64f0:	dc02      	bgt.n	64f8 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x4c>
            ret = CO_SDO_AB_INVALID_VALUE;
    64f2:	4b11      	ldr	r3, [pc, #68]	; (6538 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x8c>)
    64f4:	617b      	str	r3, [r7, #20]
    64f6:	e017      	b.n	6528 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x7c>
        }
        else{
            SYNC->counterOverflowValue = value;
    64f8:	68fb      	ldr	r3, [r7, #12]
    64fa:	7afa      	ldrb	r2, [r7, #11]
    64fc:	761a      	strb	r2, [r3, #24]
            if(value != 0){
    64fe:	7afb      	ldrb	r3, [r7, #11]
    6500:	2b00      	cmp	r3, #0
    6502:	d001      	beq.n	6508 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x5c>
                len = 1U;
    6504:	2301      	movs	r3, #1
    6506:	74fb      	strb	r3, [r7, #19]
            }

            SYNC->CANtxBuff =ptrCODriverClass->CAN_Tx_BufferInit(
    6508:	4b0c      	ldr	r3, [pc, #48]	; (653c <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x90>)
    650a:	6818      	ldr	r0, [r3, #0]
    650c:	68fb      	ldr	r3, [r7, #12]
    650e:	6b99      	ldr	r1, [r3, #56]	; 0x38
    6510:	68fb      	ldr	r3, [r7, #12]
    6512:	68da      	ldr	r2, [r3, #12]
    6514:	2300      	movs	r3, #0
    6516:	9301      	str	r3, [sp, #4]
    6518:	7cfb      	ldrb	r3, [r7, #19]
    651a:	9300      	str	r3, [sp, #0]
    651c:	2300      	movs	r3, #0
    651e:	4c08      	ldr	r4, [pc, #32]	; (6540 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x94>)
    6520:	47a0      	blx	r4
    6522:	4602      	mov	r2, r0
    6524:	68fb      	ldr	r3, [r7, #12]
    6526:	635a      	str	r2, [r3, #52]	; 0x34
                    len,                    /* number of data bytes */
                    0);                     /* synchronous message flag bit */
        }
    }

    return ret;
    6528:	697b      	ldr	r3, [r7, #20]
}
    652a:	4618      	mov	r0, r3
    652c:	371c      	adds	r7, #28
    652e:	46bd      	mov	sp, r7
    6530:	bd90      	pop	{r4, r7, pc}
    6532:	bf00      	nop
    6534:	08000022 	.word	0x08000022
    6538:	06090030 	.word	0x06090030
    653c:	20000960 	.word	0x20000960
    6540:	00001575 	.word	0x00001575

00006544 <_ZN13CO_SYNC_Class12CO_SYNC_initEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m>:
        uint8_t                 synchronousCounterOverflowValue,
        CO_CANmodule_t         *CANdevRx,
        uint32_t                CANdevRxIdx,
        CO_CANmodule_t         *CANdevTx,
        uint32_t                CANdevTxIdx)
{
    6544:	b590      	push	{r4, r7, lr}
    6546:	b08b      	sub	sp, #44	; 0x2c
    6548:	af04      	add	r7, sp, #16
    654a:	60f8      	str	r0, [r7, #12]
    654c:	60b9      	str	r1, [r7, #8]
    654e:	607a      	str	r2, [r7, #4]
    6550:	603b      	str	r3, [r7, #0]
    uint8_t len = 0;
    6552:	2300      	movs	r3, #0
    6554:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if(SYNC==NULL || em==NULL || SDO==NULL || operatingState==NULL ||
    6556:	68bb      	ldr	r3, [r7, #8]
    6558:	2b00      	cmp	r3, #0
    655a:	d00e      	beq.n	657a <_ZN13CO_SYNC_Class12CO_SYNC_initEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
    655c:	687b      	ldr	r3, [r7, #4]
    655e:	2b00      	cmp	r3, #0
    6560:	d00b      	beq.n	657a <_ZN13CO_SYNC_Class12CO_SYNC_initEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
    6562:	683b      	ldr	r3, [r7, #0]
    6564:	2b00      	cmp	r3, #0
    6566:	d008      	beq.n	657a <_ZN13CO_SYNC_Class12CO_SYNC_initEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
    6568:	6abb      	ldr	r3, [r7, #40]	; 0x28
    656a:	2b00      	cmp	r3, #0
    656c:	d005      	beq.n	657a <_ZN13CO_SYNC_Class12CO_SYNC_initEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
    656e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6570:	2b00      	cmp	r3, #0
    6572:	d002      	beq.n	657a <_ZN13CO_SYNC_Class12CO_SYNC_initEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
        CANdevRx==NULL || CANdevTx==NULL){
    6574:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6576:	2b00      	cmp	r3, #0
    6578:	d102      	bne.n	6580 <_ZN13CO_SYNC_Class12CO_SYNC_initEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x3c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    657a:	f04f 33ff 	mov.w	r3, #4294967295
    657e:	e096      	b.n	66ae <_ZN13CO_SYNC_Class12CO_SYNC_initEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x16a>
    }

    /* Configure object variables */
    SYNC->isProducer = (COB_ID_SYNCMessage&0x40000000L) ? true : false;
    6580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6582:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
    6586:	2b00      	cmp	r3, #0
    6588:	bf14      	ite	ne
    658a:	2301      	movne	r3, #1
    658c:	2300      	moveq	r3, #0
    658e:	b2db      	uxtb	r3, r3
    6590:	461a      	mov	r2, r3
    6592:	68bb      	ldr	r3, [r7, #8]
    6594:	721a      	strb	r2, [r3, #8]
    SYNC->COB_ID = COB_ID_SYNCMessage&0x7FF;
    6596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6598:	f3c3 020a 	ubfx	r2, r3, #0, #11
    659c:	68bb      	ldr	r3, [r7, #8]
    659e:	60da      	str	r2, [r3, #12]

    SYNC->periodTime = communicationCyclePeriod;
    65a0:	68bb      	ldr	r3, [r7, #8]
    65a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    65a4:	611a      	str	r2, [r3, #16]
    SYNC->periodTimeoutTime = communicationCyclePeriod / 2 * 3;
    65a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    65a8:	085a      	lsrs	r2, r3, #1
    65aa:	4613      	mov	r3, r2
    65ac:	005b      	lsls	r3, r3, #1
    65ae:	441a      	add	r2, r3
    65b0:	68bb      	ldr	r3, [r7, #8]
    65b2:	615a      	str	r2, [r3, #20]
    /* overflow? */
    if(SYNC->periodTimeoutTime < communicationCyclePeriod) SYNC->periodTimeoutTime = 0xFFFFFFFFL;
    65b4:	68bb      	ldr	r3, [r7, #8]
    65b6:	695a      	ldr	r2, [r3, #20]
    65b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    65ba:	429a      	cmp	r2, r3
    65bc:	d203      	bcs.n	65c6 <_ZN13CO_SYNC_Class12CO_SYNC_initEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x82>
    65be:	68bb      	ldr	r3, [r7, #8]
    65c0:	f04f 32ff 	mov.w	r2, #4294967295
    65c4:	615a      	str	r2, [r3, #20]

    SYNC->counterOverflowValue = synchronousCounterOverflowValue;
    65c6:	68bb      	ldr	r3, [r7, #8]
    65c8:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
    65cc:	761a      	strb	r2, [r3, #24]
    if(synchronousCounterOverflowValue) len = 1;
    65ce:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
    65d2:	2b00      	cmp	r3, #0
    65d4:	d001      	beq.n	65da <_ZN13CO_SYNC_Class12CO_SYNC_initEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x96>
    65d6:	2301      	movs	r3, #1
    65d8:	75fb      	strb	r3, [r7, #23]

    SYNC->curentSyncTimeIsInsideWindow = true;
    65da:	68bb      	ldr	r3, [r7, #8]
    65dc:	2201      	movs	r2, #1
    65de:	765a      	strb	r2, [r3, #25]

    SYNC->CANrxNew = false;
    65e0:	68bb      	ldr	r3, [r7, #8]
    65e2:	2200      	movs	r2, #0
    65e4:	769a      	strb	r2, [r3, #26]
    SYNC->CANrxToggle = false;
    65e6:	68bb      	ldr	r3, [r7, #8]
    65e8:	2200      	movs	r2, #0
    65ea:	76da      	strb	r2, [r3, #27]
    SYNC->timer = 0;
    65ec:	68bb      	ldr	r3, [r7, #8]
    65ee:	2200      	movs	r2, #0
    65f0:	621a      	str	r2, [r3, #32]
    SYNC->counter = 0;
    65f2:	68bb      	ldr	r3, [r7, #8]
    65f4:	2200      	movs	r2, #0
    65f6:	771a      	strb	r2, [r3, #28]
    SYNC->receiveError = 0U;
    65f8:	68bb      	ldr	r3, [r7, #8]
    65fa:	2200      	movs	r2, #0
    65fc:	625a      	str	r2, [r3, #36]	; 0x24

    SYNC->em = em;
    65fe:	68bb      	ldr	r3, [r7, #8]
    6600:	687a      	ldr	r2, [r7, #4]
    6602:	601a      	str	r2, [r3, #0]
    SYNC->operatingState = operatingState;
    6604:	68bb      	ldr	r3, [r7, #8]
    6606:	6aba      	ldr	r2, [r7, #40]	; 0x28
    6608:	605a      	str	r2, [r3, #4]

    SYNC->CANdevRx = CANdevRx;
    660a:	68bb      	ldr	r3, [r7, #8]
    660c:	6bba      	ldr	r2, [r7, #56]	; 0x38
    660e:	629a      	str	r2, [r3, #40]	; 0x28
    SYNC->CANdevRxIdx = CANdevRxIdx;
    6610:	68bb      	ldr	r3, [r7, #8]
    6612:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    6614:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Configure Object dictionary entry at index 0x1005, 0x1006 and 0x1019 */
    ptrCODriverClass->CO_OD_configure( OD_H1005_COBID_SYNC,        CO_ODF_1005, (void*)SYNC, 0, 0);
    6616:	4b28      	ldr	r3, [pc, #160]	; (66b8 <_ZN13CO_SYNC_Class12CO_SYNC_initEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
    6618:	681b      	ldr	r3, [r3, #0]
    661a:	1d18      	adds	r0, r3, #4
    661c:	2300      	movs	r3, #0
    661e:	9301      	str	r3, [sp, #4]
    6620:	2300      	movs	r3, #0
    6622:	9300      	str	r3, [sp, #0]
    6624:	68bb      	ldr	r3, [r7, #8]
    6626:	4a25      	ldr	r2, [pc, #148]	; (66bc <_ZN13CO_SYNC_Class12CO_SYNC_initEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x178>)
    6628:	f241 0105 	movw	r1, #4101	; 0x1005
    662c:	4c24      	ldr	r4, [pc, #144]	; (66c0 <_ZN13CO_SYNC_Class12CO_SYNC_initEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x17c>)
    662e:	47a0      	blx	r4
    ptrCODriverClass->CO_OD_configure( OD_H1006_COMM_CYCL_PERIOD,  CO_ODF_1006, (void*)SYNC, 0, 0);
    6630:	4b21      	ldr	r3, [pc, #132]	; (66b8 <_ZN13CO_SYNC_Class12CO_SYNC_initEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
    6632:	681b      	ldr	r3, [r3, #0]
    6634:	1d18      	adds	r0, r3, #4
    6636:	2300      	movs	r3, #0
    6638:	9301      	str	r3, [sp, #4]
    663a:	2300      	movs	r3, #0
    663c:	9300      	str	r3, [sp, #0]
    663e:	68bb      	ldr	r3, [r7, #8]
    6640:	4a20      	ldr	r2, [pc, #128]	; (66c4 <_ZN13CO_SYNC_Class12CO_SYNC_initEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x180>)
    6642:	f241 0106 	movw	r1, #4102	; 0x1006
    6646:	4c1e      	ldr	r4, [pc, #120]	; (66c0 <_ZN13CO_SYNC_Class12CO_SYNC_initEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x17c>)
    6648:	47a0      	blx	r4
    ptrCODriverClass->CO_OD_configure( OD_H1019_SYNC_CNT_OVERFLOW, CO_ODF_1019, (void*)SYNC, 0, 0);
    664a:	4b1b      	ldr	r3, [pc, #108]	; (66b8 <_ZN13CO_SYNC_Class12CO_SYNC_initEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
    664c:	681b      	ldr	r3, [r3, #0]
    664e:	1d18      	adds	r0, r3, #4
    6650:	2300      	movs	r3, #0
    6652:	9301      	str	r3, [sp, #4]
    6654:	2300      	movs	r3, #0
    6656:	9300      	str	r3, [sp, #0]
    6658:	68bb      	ldr	r3, [r7, #8]
    665a:	4a1b      	ldr	r2, [pc, #108]	; (66c8 <_ZN13CO_SYNC_Class12CO_SYNC_initEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x184>)
    665c:	f241 0119 	movw	r1, #4121	; 0x1019
    6660:	4c17      	ldr	r4, [pc, #92]	; (66c0 <_ZN13CO_SYNC_Class12CO_SYNC_initEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x17c>)
    6662:	47a0      	blx	r4

    /* configure SYNC CAN reception */
    ptrCODriverClass->CAN_Rx_BufferInit(
    6664:	4b14      	ldr	r3, [pc, #80]	; (66b8 <_ZN13CO_SYNC_Class12CO_SYNC_initEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
    6666:	6818      	ldr	r0, [r3, #0]
    6668:	68bb      	ldr	r3, [r7, #8]
    666a:	68da      	ldr	r2, [r3, #12]
            CANdevRxIdx,            /* rx buffer index */
            SYNC->COB_ID,           /* CAN identifier */
            0x7FF,                  /* mask */
            0,                      /* rtr */
            (void*)SYNC,            /* object passed to receive function */
            CO_SYNC_receive);       /* this function will process received message */
    666c:	4b17      	ldr	r3, [pc, #92]	; (66cc <_ZN13CO_SYNC_Class12CO_SYNC_initEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x188>)
    666e:	9302      	str	r3, [sp, #8]
    6670:	68bb      	ldr	r3, [r7, #8]
    6672:	9301      	str	r3, [sp, #4]
    6674:	2300      	movs	r3, #0
    6676:	9300      	str	r3, [sp, #0]
    6678:	f240 73ff 	movw	r3, #2047	; 0x7ff
    667c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    667e:	4c14      	ldr	r4, [pc, #80]	; (66d0 <_ZN13CO_SYNC_Class12CO_SYNC_initEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x18c>)
    6680:	47a0      	blx	r4

    /* configure SYNC CAN transmission */
    SYNC->CANdevTx = CANdevTx;
    6682:	68bb      	ldr	r3, [r7, #8]
    6684:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    6686:	631a      	str	r2, [r3, #48]	; 0x30
    SYNC->CANdevTxIdx = CANdevTxIdx;
    6688:	68bb      	ldr	r3, [r7, #8]
    668a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    668c:	639a      	str	r2, [r3, #56]	; 0x38
    SYNC->CANtxBuff =  ptrCODriverClass->CAN_Tx_BufferInit(
    668e:	4b0a      	ldr	r3, [pc, #40]	; (66b8 <_ZN13CO_SYNC_Class12CO_SYNC_initEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
    6690:	6818      	ldr	r0, [r3, #0]
    6692:	68bb      	ldr	r3, [r7, #8]
    6694:	68da      	ldr	r2, [r3, #12]
    6696:	2300      	movs	r3, #0
    6698:	9301      	str	r3, [sp, #4]
    669a:	7dfb      	ldrb	r3, [r7, #23]
    669c:	9300      	str	r3, [sp, #0]
    669e:	2300      	movs	r3, #0
    66a0:	6c79      	ldr	r1, [r7, #68]	; 0x44
    66a2:	4c0c      	ldr	r4, [pc, #48]	; (66d4 <_ZN13CO_SYNC_Class12CO_SYNC_initEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x190>)
    66a4:	47a0      	blx	r4
    66a6:	4602      	mov	r2, r0
    66a8:	68bb      	ldr	r3, [r7, #8]
    66aa:	635a      	str	r2, [r3, #52]	; 0x34
            SYNC->COB_ID,           /* CAN identifier */
            0,                      /* rtr */
            len,                    /* number of data bytes */
            0);                     /* synchronous message flag bit */

    return CO_ERROR_NO;
    66ac:	2300      	movs	r3, #0
}
    66ae:	4618      	mov	r0, r3
    66b0:	371c      	adds	r7, #28
    66b2:	46bd      	mov	sp, r7
    66b4:	bd90      	pop	{r4, r7, pc}
    66b6:	bf00      	nop
    66b8:	20000960 	.word	0x20000960
    66bc:	00006329 	.word	0x00006329
    66c0:	00004719 	.word	0x00004719
    66c4:	0000642d 	.word	0x0000642d
    66c8:	000064ad 	.word	0x000064ad
    66cc:	00006295 	.word	0x00006295
    66d0:	00001479 	.word	0x00001479
    66d4:	00001575 	.word	0x00001575

000066d8 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm>:
/******************************************************************************/
uint8_t CO_SYNC_Class::CO_SYNC_process(
        CO_SYNC_t              *SYNC,
        uint32_t                timeDifference_us,
        uint32_t                ObjDict_synchronousWindowLength)
{
    66d8:	b590      	push	{r4, r7, lr}
    66da:	b089      	sub	sp, #36	; 0x24
    66dc:	af02      	add	r7, sp, #8
    66de:	60f8      	str	r0, [r7, #12]
    66e0:	60b9      	str	r1, [r7, #8]
    66e2:	607a      	str	r2, [r7, #4]
    66e4:	603b      	str	r3, [r7, #0]
    uint8_t ret = 0;
    66e6:	2300      	movs	r3, #0
    66e8:	75fb      	strb	r3, [r7, #23]
    uint32_t timerNew;

    if(*SYNC->operatingState == CO_NMT_OPERATIONAL || *SYNC->operatingState == CO_NMT_PRE_OPERATIONAL){
    66ea:	68bb      	ldr	r3, [r7, #8]
    66ec:	685b      	ldr	r3, [r3, #4]
    66ee:	781b      	ldrb	r3, [r3, #0]
    66f0:	2b05      	cmp	r3, #5
    66f2:	d005      	beq.n	6700 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x28>
    66f4:	68bb      	ldr	r3, [r7, #8]
    66f6:	685b      	ldr	r3, [r3, #4]
    66f8:	781b      	ldrb	r3, [r3, #0]
    66fa:	2b7f      	cmp	r3, #127	; 0x7f
    66fc:	f040 808e 	bne.w	681c <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x144>
        /* update sync timer, no overflow */
        timerNew = SYNC->timer + timeDifference_us;
    6700:	68bb      	ldr	r3, [r7, #8]
    6702:	6a1a      	ldr	r2, [r3, #32]
    6704:	687b      	ldr	r3, [r7, #4]
    6706:	4413      	add	r3, r2
    6708:	613b      	str	r3, [r7, #16]
        if(timerNew > SYNC->timer) SYNC->timer = timerNew;
    670a:	68bb      	ldr	r3, [r7, #8]
    670c:	6a1a      	ldr	r2, [r3, #32]
    670e:	693b      	ldr	r3, [r7, #16]
    6710:	429a      	cmp	r2, r3
    6712:	d202      	bcs.n	671a <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x42>
    6714:	68bb      	ldr	r3, [r7, #8]
    6716:	693a      	ldr	r2, [r7, #16]
    6718:	621a      	str	r2, [r3, #32]

        /* was SYNC just received */
        if(SYNC->CANrxNew){
    671a:	68bb      	ldr	r3, [r7, #8]
    671c:	7e9b      	ldrb	r3, [r3, #26]
    671e:	2b00      	cmp	r3, #0
    6720:	d007      	beq.n	6732 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x5a>
            SYNC->timer = 0;
    6722:	68bb      	ldr	r3, [r7, #8]
    6724:	2200      	movs	r2, #0
    6726:	621a      	str	r2, [r3, #32]
            ret = 1;
    6728:	2301      	movs	r3, #1
    672a:	75fb      	strb	r3, [r7, #23]
            SYNC->CANrxNew = false;
    672c:	68bb      	ldr	r3, [r7, #8]
    672e:	2200      	movs	r2, #0
    6730:	769a      	strb	r2, [r3, #26]
        }

        /* SYNC producer */
        if(SYNC->isProducer && SYNC->periodTime){
    6732:	68bb      	ldr	r3, [r7, #8]
    6734:	7a1b      	ldrb	r3, [r3, #8]
    6736:	2b00      	cmp	r3, #0
    6738:	d03a      	beq.n	67b0 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0xd8>
    673a:	68bb      	ldr	r3, [r7, #8]
    673c:	691b      	ldr	r3, [r3, #16]
    673e:	2b00      	cmp	r3, #0
    6740:	d036      	beq.n	67b0 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0xd8>
            if(SYNC->timer >= SYNC->periodTime){
    6742:	68bb      	ldr	r3, [r7, #8]
    6744:	6a1a      	ldr	r2, [r3, #32]
    6746:	68bb      	ldr	r3, [r7, #8]
    6748:	691b      	ldr	r3, [r3, #16]
    674a:	429a      	cmp	r2, r3
    674c:	d330      	bcc.n	67b0 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0xd8>
                if(++SYNC->counter > SYNC->counterOverflowValue) SYNC->counter = 1;
    674e:	68bb      	ldr	r3, [r7, #8]
    6750:	7f1b      	ldrb	r3, [r3, #28]
    6752:	3301      	adds	r3, #1
    6754:	b2da      	uxtb	r2, r3
    6756:	68bb      	ldr	r3, [r7, #8]
    6758:	771a      	strb	r2, [r3, #28]
    675a:	68bb      	ldr	r3, [r7, #8]
    675c:	7f1b      	ldrb	r3, [r3, #28]
    675e:	461a      	mov	r2, r3
    6760:	68bb      	ldr	r3, [r7, #8]
    6762:	7e1b      	ldrb	r3, [r3, #24]
    6764:	429a      	cmp	r2, r3
    6766:	bfcc      	ite	gt
    6768:	2301      	movgt	r3, #1
    676a:	2300      	movle	r3, #0
    676c:	b2db      	uxtb	r3, r3
    676e:	2b00      	cmp	r3, #0
    6770:	d002      	beq.n	6778 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0xa0>
    6772:	68bb      	ldr	r3, [r7, #8]
    6774:	2201      	movs	r2, #1
    6776:	771a      	strb	r2, [r3, #28]
                SYNC->timer = 0;
    6778:	68bb      	ldr	r3, [r7, #8]
    677a:	2200      	movs	r2, #0
    677c:	621a      	str	r2, [r3, #32]
                ret = 1;
    677e:	2301      	movs	r3, #1
    6780:	75fb      	strb	r3, [r7, #23]
                SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
    6782:	68bb      	ldr	r3, [r7, #8]
    6784:	7edb      	ldrb	r3, [r3, #27]
    6786:	2b00      	cmp	r3, #0
    6788:	bf0c      	ite	eq
    678a:	2301      	moveq	r3, #1
    678c:	2300      	movne	r3, #0
    678e:	b2db      	uxtb	r3, r3
    6790:	461a      	mov	r2, r3
    6792:	68bb      	ldr	r3, [r7, #8]
    6794:	76da      	strb	r2, [r3, #27]
                SYNC->CANtxBuff->data[0] = SYNC->counter;
    6796:	68bb      	ldr	r3, [r7, #8]
    6798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    679a:	68ba      	ldr	r2, [r7, #8]
    679c:	7f12      	ldrb	r2, [r2, #28]
    679e:	715a      	strb	r2, [r3, #5]
                ptrCODriverClass->CAN_Send(SYNC->CANtxBuff);
    67a0:	4b2d      	ldr	r3, [pc, #180]	; (6858 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x180>)
    67a2:	681a      	ldr	r2, [r3, #0]
    67a4:	68bb      	ldr	r3, [r7, #8]
    67a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    67a8:	4619      	mov	r1, r3
    67aa:	4610      	mov	r0, r2
    67ac:	4b2b      	ldr	r3, [pc, #172]	; (685c <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x184>)
    67ae:	4798      	blx	r3
            }
        }

        /* Synchronous PDOs are allowed only inside time window */
        if(ObjDict_synchronousWindowLength){
    67b0:	683b      	ldr	r3, [r7, #0]
    67b2:	2b00      	cmp	r3, #0
    67b4:	d012      	beq.n	67dc <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x104>
            if(SYNC->timer > ObjDict_synchronousWindowLength){
    67b6:	68bb      	ldr	r3, [r7, #8]
    67b8:	6a1a      	ldr	r2, [r3, #32]
    67ba:	683b      	ldr	r3, [r7, #0]
    67bc:	429a      	cmp	r2, r3
    67be:	d909      	bls.n	67d4 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0xfc>
                if(SYNC->curentSyncTimeIsInsideWindow){
    67c0:	68bb      	ldr	r3, [r7, #8]
    67c2:	7e5b      	ldrb	r3, [r3, #25]
    67c4:	2b00      	cmp	r3, #0
    67c6:	d001      	beq.n	67cc <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0xf4>
                    ret = 2;
    67c8:	2302      	movs	r3, #2
    67ca:	75fb      	strb	r3, [r7, #23]
                }
                SYNC->curentSyncTimeIsInsideWindow = false;
    67cc:	68bb      	ldr	r3, [r7, #8]
    67ce:	2200      	movs	r2, #0
    67d0:	765a      	strb	r2, [r3, #25]
    67d2:	e006      	b.n	67e2 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x10a>
            }
            else{
                SYNC->curentSyncTimeIsInsideWindow = true;
    67d4:	68bb      	ldr	r3, [r7, #8]
    67d6:	2201      	movs	r2, #1
    67d8:	765a      	strb	r2, [r3, #25]
    67da:	e002      	b.n	67e2 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x10a>
            }
        }
        else{
            SYNC->curentSyncTimeIsInsideWindow = true;
    67dc:	68bb      	ldr	r3, [r7, #8]
    67de:	2201      	movs	r2, #1
    67e0:	765a      	strb	r2, [r3, #25]
        }

        /* Verify timeout of SYNC */
        if(SYNC->periodTime && SYNC->timer > SYNC->periodTimeoutTime && *SYNC->operatingState == CO_NMT_OPERATIONAL)
    67e2:	68bb      	ldr	r3, [r7, #8]
    67e4:	691b      	ldr	r3, [r3, #16]
    67e6:	2b00      	cmp	r3, #0
    67e8:	d01c      	beq.n	6824 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x14c>
    67ea:	68bb      	ldr	r3, [r7, #8]
    67ec:	6a1a      	ldr	r2, [r3, #32]
    67ee:	68bb      	ldr	r3, [r7, #8]
    67f0:	695b      	ldr	r3, [r3, #20]
    67f2:	429a      	cmp	r2, r3
    67f4:	d916      	bls.n	6824 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x14c>
    67f6:	68bb      	ldr	r3, [r7, #8]
    67f8:	685b      	ldr	r3, [r3, #4]
    67fa:	781b      	ldrb	r3, [r3, #0]
    67fc:	2b05      	cmp	r3, #5
    67fe:	d111      	bne.n	6824 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x14c>
             ptrCODriverClass->EM_ErrorReport(SYNC->em, CO_EM_SYNC_TIME_OUT, CO_EMC_COMMUNICATION, SYNC->timer);
    6800:	4b15      	ldr	r3, [pc, #84]	; (6858 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x180>)
    6802:	681b      	ldr	r3, [r3, #0]
    6804:	1d18      	adds	r0, r3, #4
    6806:	68bb      	ldr	r3, [r7, #8]
    6808:	6819      	ldr	r1, [r3, #0]
    680a:	68bb      	ldr	r3, [r7, #8]
    680c:	6a1b      	ldr	r3, [r3, #32]
    680e:	9300      	str	r3, [sp, #0]
    6810:	f44f 4301 	mov.w	r3, #33024	; 0x8100
    6814:	2218      	movs	r2, #24
    6816:	4c12      	ldr	r4, [pc, #72]	; (6860 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x188>)
    6818:	47a0      	blx	r4
        if(SYNC->periodTime && SYNC->timer > SYNC->periodTimeoutTime && *SYNC->operatingState == CO_NMT_OPERATIONAL)
    681a:	e003      	b.n	6824 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x14c>
    }
    else {
        SYNC->CANrxNew = false;
    681c:	68bb      	ldr	r3, [r7, #8]
    681e:	2200      	movs	r2, #0
    6820:	769a      	strb	r2, [r3, #26]
    6822:	e000      	b.n	6826 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x14e>
        if(SYNC->periodTime && SYNC->timer > SYNC->periodTimeoutTime && *SYNC->operatingState == CO_NMT_OPERATIONAL)
    6824:	bf00      	nop
    }

    /* verify error from receive function */
    if(SYNC->receiveError != 0U){
    6826:	68bb      	ldr	r3, [r7, #8]
    6828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    682a:	2b00      	cmp	r3, #0
    682c:	d00f      	beq.n	684e <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x176>
        ptrCODriverClass->EM_ErrorReport(SYNC->em, CO_EM_SYNC_LENGTH, CO_EMC_SYNC_DATA_LENGTH, (uint32_t)SYNC->receiveError);
    682e:	4b0a      	ldr	r3, [pc, #40]	; (6858 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x180>)
    6830:	681b      	ldr	r3, [r3, #0]
    6832:	1d18      	adds	r0, r3, #4
    6834:	68bb      	ldr	r3, [r7, #8]
    6836:	6819      	ldr	r1, [r3, #0]
    6838:	68bb      	ldr	r3, [r7, #8]
    683a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    683c:	9300      	str	r3, [sp, #0]
    683e:	f248 2340 	movw	r3, #33344	; 0x8240
    6842:	2219      	movs	r2, #25
    6844:	4c06      	ldr	r4, [pc, #24]	; (6860 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x188>)
    6846:	47a0      	blx	r4
        SYNC->receiveError = 0U;
    6848:	68bb      	ldr	r3, [r7, #8]
    684a:	2200      	movs	r2, #0
    684c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return ret;
    684e:	7dfb      	ldrb	r3, [r7, #23]
    6850:	4618      	mov	r0, r3
    6852:	371c      	adds	r7, #28
    6854:	46bd      	mov	sp, r7
    6856:	bd90      	pop	{r4, r7, pc}
    6858:	20000960 	.word	0x20000960
    685c:	00001621 	.word	0x00001621
    6860:	00002075 	.word	0x00002075

00006864 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    6864:	b580      	push	{r7, lr}
    6866:	b082      	sub	sp, #8
    6868:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    686a:	4b16      	ldr	r3, [pc, #88]	; (68c4 <Reset_Handler+0x60>)
    686c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    686e:	4b16      	ldr	r3, [pc, #88]	; (68c8 <Reset_Handler+0x64>)
    6870:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    6872:	687a      	ldr	r2, [r7, #4]
    6874:	683b      	ldr	r3, [r7, #0]
    6876:	429a      	cmp	r2, r3
    6878:	d00c      	beq.n	6894 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    687a:	e007      	b.n	688c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    687c:	683b      	ldr	r3, [r7, #0]
    687e:	1d1a      	adds	r2, r3, #4
    6880:	603a      	str	r2, [r7, #0]
    6882:	687a      	ldr	r2, [r7, #4]
    6884:	1d11      	adds	r1, r2, #4
    6886:	6079      	str	r1, [r7, #4]
    6888:	6812      	ldr	r2, [r2, #0]
    688a:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    688c:	683b      	ldr	r3, [r7, #0]
    688e:	4a0f      	ldr	r2, [pc, #60]	; (68cc <Reset_Handler+0x68>)
    6890:	4293      	cmp	r3, r2
    6892:	d3f3      	bcc.n	687c <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    6894:	4b0e      	ldr	r3, [pc, #56]	; (68d0 <Reset_Handler+0x6c>)
    6896:	603b      	str	r3, [r7, #0]
    6898:	e004      	b.n	68a4 <Reset_Handler+0x40>
                *pDest++ = 0;
    689a:	683b      	ldr	r3, [r7, #0]
    689c:	1d1a      	adds	r2, r3, #4
    689e:	603a      	str	r2, [r7, #0]
    68a0:	2200      	movs	r2, #0
    68a2:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    68a4:	683b      	ldr	r3, [r7, #0]
    68a6:	4a0b      	ldr	r2, [pc, #44]	; (68d4 <Reset_Handler+0x70>)
    68a8:	4293      	cmp	r3, r2
    68aa:	d3f6      	bcc.n	689a <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    68ac:	4b0a      	ldr	r3, [pc, #40]	; (68d8 <Reset_Handler+0x74>)
    68ae:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    68b0:	4a0a      	ldr	r2, [pc, #40]	; (68dc <Reset_Handler+0x78>)
    68b2:	687b      	ldr	r3, [r7, #4]
    68b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    68b8:	6093      	str	r3, [r2, #8]
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
    68ba:	4b09      	ldr	r3, [pc, #36]	; (68e0 <Reset_Handler+0x7c>)
    68bc:	4798      	blx	r3

        /* Branch to main function */
        main();
    68be:	4b09      	ldr	r3, [pc, #36]	; (68e4 <Reset_Handler+0x80>)
    68c0:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    68c2:	e7fe      	b.n	68c2 <Reset_Handler+0x5e>
    68c4:	00014168 	.word	0x00014168
    68c8:	20000000 	.word	0x20000000
    68cc:	2000093c 	.word	0x2000093c
    68d0:	2000093c 	.word	0x2000093c
    68d4:	20001cd0 	.word	0x20001cd0
    68d8:	00000000 	.word	0x00000000
    68dc:	e000ed00 	.word	0xe000ed00
    68e0:	00012d65 	.word	0x00012d65
    68e4:	000068f1 	.word	0x000068f1

000068e8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    68e8:	b480      	push	{r7}
    68ea:	af00      	add	r7, sp, #0
        while (1) {
    68ec:	e7fe      	b.n	68ec <Dummy_Handler+0x4>
	...

000068f0 <main>:
#include "CANOpen_Class.h"

static CANOpen_Class cano(&CAN_CCU);

int main(void)
{
    68f0:	b580      	push	{r7, lr}
    68f2:	af00      	add	r7, sp, #0
	atmel_start_init();
    68f4:	4b10      	ldr	r3, [pc, #64]	; (6938 <main+0x48>)
    68f6:	4798      	blx	r3
	cano.Init();
    68f8:	2101      	movs	r1, #1
    68fa:	4810      	ldr	r0, [pc, #64]	; (693c <main+0x4c>)
    68fc:	4b10      	ldr	r3, [pc, #64]	; (6940 <main+0x50>)
    68fe:	4798      	blx	r3
	cano.CO_sendNMTcommand(1,0);
    6900:	2200      	movs	r2, #0
    6902:	2101      	movs	r1, #1
    6904:	480d      	ldr	r0, [pc, #52]	; (693c <main+0x4c>)
    6906:	4b0f      	ldr	r3, [pc, #60]	; (6944 <main+0x54>)
    6908:	4798      	blx	r3
    /* Replace with your application code */
    while (1) 
    {
		cano.StartNMTService();
    690a:	480c      	ldr	r0, [pc, #48]	; (693c <main+0x4c>)
    690c:	4b0e      	ldr	r3, [pc, #56]	; (6948 <main+0x58>)
    690e:	4798      	blx	r3
		cano.Process();
    6910:	2200      	movs	r2, #0
    6912:	2101      	movs	r1, #1
    6914:	4809      	ldr	r0, [pc, #36]	; (693c <main+0x4c>)
    6916:	4b0d      	ldr	r3, [pc, #52]	; (694c <main+0x5c>)
    6918:	4798      	blx	r3
		delay_ms(500);
    691a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    691e:	4b0c      	ldr	r3, [pc, #48]	; (6950 <main+0x60>)
    6920:	4798      	blx	r3
		
		cano.Periodic_Process();
    6922:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    6926:	4805      	ldr	r0, [pc, #20]	; (693c <main+0x4c>)
    6928:	4b0a      	ldr	r3, [pc, #40]	; (6954 <main+0x64>)
    692a:	4798      	blx	r3
		delay_ms(500);
    692c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    6930:	4b07      	ldr	r3, [pc, #28]	; (6950 <main+0x60>)
    6932:	4798      	blx	r3
		cano.StartNMTService();
    6934:	e7e9      	b.n	690a <main+0x1a>
    6936:	bf00      	nop
    6938:	000069b9 	.word	0x000069b9
    693c:	20000974 	.word	0x20000974
    6940:	00000355 	.word	0x00000355
    6944:	0000052d 	.word	0x0000052d
    6948:	00000449 	.word	0x00000449
    694c:	00000dd5 	.word	0x00000dd5
    6950:	00007fe1 	.word	0x00007fe1
    6954:	000003dd 	.word	0x000003dd

00006958 <_Z41__static_initialization_and_destruction_0ii>:
    }
}
    6958:	b580      	push	{r7, lr}
    695a:	b082      	sub	sp, #8
    695c:	af00      	add	r7, sp, #0
    695e:	6078      	str	r0, [r7, #4]
    6960:	6039      	str	r1, [r7, #0]
    6962:	687b      	ldr	r3, [r7, #4]
    6964:	2b01      	cmp	r3, #1
    6966:	d10d      	bne.n	6984 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    6968:	683b      	ldr	r3, [r7, #0]
    696a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    696e:	4293      	cmp	r3, r2
    6970:	d108      	bne.n	6984 <_Z41__static_initialization_and_destruction_0ii+0x2c>
static CANOpen_Class cano(&CAN_CCU);
    6972:	4906      	ldr	r1, [pc, #24]	; (698c <_Z41__static_initialization_and_destruction_0ii+0x34>)
    6974:	4806      	ldr	r0, [pc, #24]	; (6990 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    6976:	4b07      	ldr	r3, [pc, #28]	; (6994 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    6978:	4798      	blx	r3
    697a:	4a07      	ldr	r2, [pc, #28]	; (6998 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    697c:	4907      	ldr	r1, [pc, #28]	; (699c <_Z41__static_initialization_and_destruction_0ii+0x44>)
    697e:	4804      	ldr	r0, [pc, #16]	; (6990 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    6980:	4b07      	ldr	r3, [pc, #28]	; (69a0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    6982:	4798      	blx	r3
}
    6984:	bf00      	nop
    6986:	3708      	adds	r7, #8
    6988:	46bd      	mov	sp, r7
    698a:	bd80      	pop	{r7, pc}
    698c:	20001b10 	.word	0x20001b10
    6990:	20000974 	.word	0x20000974
    6994:	000002d1 	.word	0x000002d1
    6998:	20000000 	.word	0x20000000
    699c:	0000031d 	.word	0x0000031d
    69a0:	00012d31 	.word	0x00012d31

000069a4 <_GLOBAL__sub_I_main>:
    69a4:	b580      	push	{r7, lr}
    69a6:	af00      	add	r7, sp, #0
    69a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    69ac:	2001      	movs	r0, #1
    69ae:	4b01      	ldr	r3, [pc, #4]	; (69b4 <_GLOBAL__sub_I_main+0x10>)
    69b0:	4798      	blx	r3
    69b2:	bd80      	pop	{r7, pc}
    69b4:	00006959 	.word	0x00006959

000069b8 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    69b8:	b580      	push	{r7, lr}
    69ba:	af00      	add	r7, sp, #0
	system_init();
    69bc:	4b03      	ldr	r3, [pc, #12]	; (69cc <atmel_start_init+0x14>)
    69be:	4798      	blx	r3
	usb_init();
    69c0:	4b03      	ldr	r3, [pc, #12]	; (69d0 <atmel_start_init+0x18>)
    69c2:	4798      	blx	r3
	spi_nor_flash_init();
    69c4:	4b03      	ldr	r3, [pc, #12]	; (69d4 <atmel_start_init+0x1c>)
    69c6:	4798      	blx	r3
}
    69c8:	bf00      	nop
    69ca:	bd80      	pop	{r7, pc}
    69cc:	00007ab5 	.word	0x00007ab5
    69d0:	00010f99 	.word	0x00010f99
    69d4:	00010f2d 	.word	0x00010f2d

000069d8 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
    69d8:	b480      	push	{r7}
    69da:	b085      	sub	sp, #20
    69dc:	af00      	add	r7, sp, #0
    69de:	60f8      	str	r0, [r7, #12]
    69e0:	460b      	mov	r3, r1
    69e2:	607a      	str	r2, [r7, #4]
    69e4:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    69e6:	7afa      	ldrb	r2, [r7, #11]
    69e8:	68fb      	ldr	r3, [r7, #12]
    69ea:	3220      	adds	r2, #32
    69ec:	6879      	ldr	r1, [r7, #4]
    69ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
    69f2:	bf00      	nop
    69f4:	3714      	adds	r7, #20
    69f6:	46bd      	mov	sp, r7
    69f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    69fc:	4770      	bx	lr

000069fe <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
    69fe:	b480      	push	{r7}
    6a00:	b083      	sub	sp, #12
    6a02:	af00      	add	r7, sp, #0
    6a04:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
    6a06:	687b      	ldr	r3, [r7, #4]
    6a08:	691b      	ldr	r3, [r3, #16]
    6a0a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    6a0e:	687b      	ldr	r3, [r7, #4]
    6a10:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    6a12:	bf00      	nop
    6a14:	370c      	adds	r7, #12
    6a16:	46bd      	mov	sp, r7
    6a18:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a1c:	4770      	bx	lr

00006a1e <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
    6a1e:	b480      	push	{r7}
    6a20:	b083      	sub	sp, #12
    6a22:	af00      	add	r7, sp, #0
    6a24:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
    6a26:	687b      	ldr	r3, [r7, #4]
    6a28:	691b      	ldr	r3, [r3, #16]
    6a2a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    6a2e:	687b      	ldr	r3, [r7, #4]
    6a30:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    6a32:	bf00      	nop
    6a34:	370c      	adds	r7, #12
    6a36:	46bd      	mov	sp, r7
    6a38:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a3c:	4770      	bx	lr

00006a3e <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
    6a3e:	b480      	push	{r7}
    6a40:	b083      	sub	sp, #12
    6a42:	af00      	add	r7, sp, #0
    6a44:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
    6a46:	687b      	ldr	r3, [r7, #4]
    6a48:	691b      	ldr	r3, [r3, #16]
    6a4a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    6a4e:	687b      	ldr	r3, [r7, #4]
    6a50:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    6a52:	bf00      	nop
    6a54:	370c      	adds	r7, #12
    6a56:	46bd      	mov	sp, r7
    6a58:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a5c:	4770      	bx	lr

00006a5e <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
    6a5e:	b480      	push	{r7}
    6a60:	b083      	sub	sp, #12
    6a62:	af00      	add	r7, sp, #0
    6a64:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
    6a66:	687b      	ldr	r3, [r7, #4]
    6a68:	691b      	ldr	r3, [r3, #16]
    6a6a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    6a6e:	687b      	ldr	r3, [r7, #4]
    6a70:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    6a72:	bf00      	nop
    6a74:	370c      	adds	r7, #12
    6a76:	46bd      	mov	sp, r7
    6a78:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a7c:	4770      	bx	lr

00006a7e <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
    6a7e:	b480      	push	{r7}
    6a80:	b083      	sub	sp, #12
    6a82:	af00      	add	r7, sp, #0
    6a84:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    6a86:	687b      	ldr	r3, [r7, #4]
    6a88:	695b      	ldr	r3, [r3, #20]
    6a8a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    6a8e:	687b      	ldr	r3, [r7, #4]
    6a90:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    6a92:	bf00      	nop
    6a94:	370c      	adds	r7, #12
    6a96:	46bd      	mov	sp, r7
    6a98:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a9c:	4770      	bx	lr

00006a9e <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
    6a9e:	b480      	push	{r7}
    6aa0:	b083      	sub	sp, #12
    6aa2:	af00      	add	r7, sp, #0
    6aa4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    6aa6:	687b      	ldr	r3, [r7, #4]
    6aa8:	695b      	ldr	r3, [r3, #20]
    6aaa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    6aae:	687b      	ldr	r3, [r7, #4]
    6ab0:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    6ab2:	bf00      	nop
    6ab4:	370c      	adds	r7, #12
    6ab6:	46bd      	mov	sp, r7
    6ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
    6abc:	4770      	bx	lr

00006abe <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
    6abe:	b480      	push	{r7}
    6ac0:	b083      	sub	sp, #12
    6ac2:	af00      	add	r7, sp, #0
    6ac4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    6ac6:	687b      	ldr	r3, [r7, #4]
    6ac8:	695b      	ldr	r3, [r3, #20]
    6aca:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    6ace:	687b      	ldr	r3, [r7, #4]
    6ad0:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    6ad2:	bf00      	nop
    6ad4:	370c      	adds	r7, #12
    6ad6:	46bd      	mov	sp, r7
    6ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
    6adc:	4770      	bx	lr

00006ade <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
    6ade:	b480      	push	{r7}
    6ae0:	b083      	sub	sp, #12
    6ae2:	af00      	add	r7, sp, #0
    6ae4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    6ae6:	687b      	ldr	r3, [r7, #4]
    6ae8:	695b      	ldr	r3, [r3, #20]
    6aea:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    6aee:	687b      	ldr	r3, [r7, #4]
    6af0:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    6af2:	bf00      	nop
    6af4:	370c      	adds	r7, #12
    6af6:	46bd      	mov	sp, r7
    6af8:	f85d 7b04 	ldr.w	r7, [sp], #4
    6afc:	4770      	bx	lr

00006afe <hri_mclk_set_APBAMASK_TC1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_TC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC1_bit(const void *const hw)
{
    6afe:	b480      	push	{r7}
    6b00:	b083      	sub	sp, #12
    6b02:	af00      	add	r7, sp, #0
    6b04:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
    6b06:	687b      	ldr	r3, [r7, #4]
    6b08:	695b      	ldr	r3, [r3, #20]
    6b0a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
    6b0e:	687b      	ldr	r3, [r7, #4]
    6b10:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    6b12:	bf00      	nop
    6b14:	370c      	adds	r7, #12
    6b16:	46bd      	mov	sp, r7
    6b18:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b1c:	4770      	bx	lr

00006b1e <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
    6b1e:	b480      	push	{r7}
    6b20:	b083      	sub	sp, #12
    6b22:	af00      	add	r7, sp, #0
    6b24:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
    6b26:	687b      	ldr	r3, [r7, #4]
    6b28:	699b      	ldr	r3, [r3, #24]
    6b2a:	f043 0201 	orr.w	r2, r3, #1
    6b2e:	687b      	ldr	r3, [r7, #4]
    6b30:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    6b32:	bf00      	nop
    6b34:	370c      	adds	r7, #12
    6b36:	46bd      	mov	sp, r7
    6b38:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b3c:	4770      	bx	lr

00006b3e <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
    6b3e:	b480      	push	{r7}
    6b40:	b083      	sub	sp, #12
    6b42:	af00      	add	r7, sp, #0
    6b44:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
    6b46:	687b      	ldr	r3, [r7, #4]
    6b48:	699b      	ldr	r3, [r3, #24]
    6b4a:	f043 0202 	orr.w	r2, r3, #2
    6b4e:	687b      	ldr	r3, [r7, #4]
    6b50:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    6b52:	bf00      	nop
    6b54:	370c      	adds	r7, #12
    6b56:	46bd      	mov	sp, r7
    6b58:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b5c:	4770      	bx	lr

00006b5e <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
    6b5e:	b480      	push	{r7}
    6b60:	b083      	sub	sp, #12
    6b62:	af00      	add	r7, sp, #0
    6b64:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    6b66:	687b      	ldr	r3, [r7, #4]
    6b68:	699b      	ldr	r3, [r3, #24]
    6b6a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    6b6e:	687b      	ldr	r3, [r7, #4]
    6b70:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    6b72:	bf00      	nop
    6b74:	370c      	adds	r7, #12
    6b76:	46bd      	mov	sp, r7
    6b78:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b7c:	4770      	bx	lr

00006b7e <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
    6b7e:	b480      	push	{r7}
    6b80:	b083      	sub	sp, #12
    6b82:	af00      	add	r7, sp, #0
    6b84:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    6b86:	687b      	ldr	r3, [r7, #4]
    6b88:	699b      	ldr	r3, [r3, #24]
    6b8a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    6b8e:	687b      	ldr	r3, [r7, #4]
    6b90:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    6b92:	bf00      	nop
    6b94:	370c      	adds	r7, #12
    6b96:	46bd      	mov	sp, r7
    6b98:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b9c:	4770      	bx	lr

00006b9e <hri_mclk_set_APBBMASK_TC3_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TC2;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC3_bit(const void *const hw)
{
    6b9e:	b480      	push	{r7}
    6ba0:	b083      	sub	sp, #12
    6ba2:	af00      	add	r7, sp, #0
    6ba4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
    6ba6:	687b      	ldr	r3, [r7, #4]
    6ba8:	699b      	ldr	r3, [r3, #24]
    6baa:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    6bae:	687b      	ldr	r3, [r7, #4]
    6bb0:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    6bb2:	bf00      	nop
    6bb4:	370c      	adds	r7, #12
    6bb6:	46bd      	mov	sp, r7
    6bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    6bbc:	4770      	bx	lr

00006bbe <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
    6bbe:	b480      	push	{r7}
    6bc0:	b083      	sub	sp, #12
    6bc2:	af00      	add	r7, sp, #0
    6bc4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
    6bc6:	687b      	ldr	r3, [r7, #4]
    6bc8:	69db      	ldr	r3, [r3, #28]
    6bca:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    6bce:	687b      	ldr	r3, [r7, #4]
    6bd0:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    6bd2:	bf00      	nop
    6bd4:	370c      	adds	r7, #12
    6bd6:	46bd      	mov	sp, r7
    6bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
    6bdc:	4770      	bx	lr

00006bde <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
    6bde:	b480      	push	{r7}
    6be0:	b083      	sub	sp, #12
    6be2:	af00      	add	r7, sp, #0
    6be4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
    6be6:	687b      	ldr	r3, [r7, #4]
    6be8:	6a1b      	ldr	r3, [r3, #32]
    6bea:	f043 0201 	orr.w	r2, r3, #1
    6bee:	687b      	ldr	r3, [r7, #4]
    6bf0:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    6bf2:	bf00      	nop
    6bf4:	370c      	adds	r7, #12
    6bf6:	46bd      	mov	sp, r7
    6bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
    6bfc:	4770      	bx	lr

00006bfe <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
    6bfe:	b480      	push	{r7}
    6c00:	b083      	sub	sp, #12
    6c02:	af00      	add	r7, sp, #0
    6c04:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    6c06:	687b      	ldr	r3, [r7, #4]
    6c08:	6a1b      	ldr	r3, [r3, #32]
    6c0a:	f043 0202 	orr.w	r2, r3, #2
    6c0e:	687b      	ldr	r3, [r7, #4]
    6c10:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    6c12:	bf00      	nop
    6c14:	370c      	adds	r7, #12
    6c16:	46bd      	mov	sp, r7
    6c18:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c1c:	4770      	bx	lr

00006c1e <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
    6c1e:	b480      	push	{r7}
    6c20:	b083      	sub	sp, #12
    6c22:	af00      	add	r7, sp, #0
    6c24:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
    6c26:	687b      	ldr	r3, [r7, #4]
    6c28:	6a1b      	ldr	r3, [r3, #32]
    6c2a:	f043 0204 	orr.w	r2, r3, #4
    6c2e:	687b      	ldr	r3, [r7, #4]
    6c30:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    6c32:	bf00      	nop
    6c34:	370c      	adds	r7, #12
    6c36:	46bd      	mov	sp, r7
    6c38:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c3c:	4770      	bx	lr

00006c3e <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
    6c3e:	b480      	push	{r7}
    6c40:	b083      	sub	sp, #12
    6c42:	af00      	add	r7, sp, #0
    6c44:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
    6c46:	687b      	ldr	r3, [r7, #4]
    6c48:	6a1b      	ldr	r3, [r3, #32]
    6c4a:	f043 0208 	orr.w	r2, r3, #8
    6c4e:	687b      	ldr	r3, [r7, #4]
    6c50:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    6c52:	bf00      	nop
    6c54:	370c      	adds	r7, #12
    6c56:	46bd      	mov	sp, r7
    6c58:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c5c:	4770      	bx	lr

00006c5e <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
    6c5e:	b480      	push	{r7}
    6c60:	b083      	sub	sp, #12
    6c62:	af00      	add	r7, sp, #0
    6c64:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
    6c66:	687b      	ldr	r3, [r7, #4]
    6c68:	6a1b      	ldr	r3, [r3, #32]
    6c6a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    6c6e:	687b      	ldr	r3, [r7, #4]
    6c70:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    6c72:	bf00      	nop
    6c74:	370c      	adds	r7, #12
    6c76:	46bd      	mov	sp, r7
    6c78:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c7c:	4770      	bx	lr

00006c7e <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    6c7e:	b480      	push	{r7}
    6c80:	b085      	sub	sp, #20
    6c82:	af00      	add	r7, sp, #0
    6c84:	60f8      	str	r0, [r7, #12]
    6c86:	460b      	mov	r3, r1
    6c88:	607a      	str	r2, [r7, #4]
    6c8a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6c8c:	7afb      	ldrb	r3, [r7, #11]
    6c8e:	68fa      	ldr	r2, [r7, #12]
    6c90:	01db      	lsls	r3, r3, #7
    6c92:	4413      	add	r3, r2
    6c94:	3308      	adds	r3, #8
    6c96:	687a      	ldr	r2, [r7, #4]
    6c98:	601a      	str	r2, [r3, #0]
}
    6c9a:	bf00      	nop
    6c9c:	3714      	adds	r7, #20
    6c9e:	46bd      	mov	sp, r7
    6ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ca4:	4770      	bx	lr

00006ca6 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    6ca6:	b480      	push	{r7}
    6ca8:	b085      	sub	sp, #20
    6caa:	af00      	add	r7, sp, #0
    6cac:	60f8      	str	r0, [r7, #12]
    6cae:	460b      	mov	r3, r1
    6cb0:	607a      	str	r2, [r7, #4]
    6cb2:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    6cb4:	7afb      	ldrb	r3, [r7, #11]
    6cb6:	68fa      	ldr	r2, [r7, #12]
    6cb8:	01db      	lsls	r3, r3, #7
    6cba:	4413      	add	r3, r2
    6cbc:	3304      	adds	r3, #4
    6cbe:	687a      	ldr	r2, [r7, #4]
    6cc0:	601a      	str	r2, [r3, #0]
}
    6cc2:	bf00      	nop
    6cc4:	3714      	adds	r7, #20
    6cc6:	46bd      	mov	sp, r7
    6cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ccc:	4770      	bx	lr

00006cce <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    6cce:	b480      	push	{r7}
    6cd0:	b085      	sub	sp, #20
    6cd2:	af00      	add	r7, sp, #0
    6cd4:	60f8      	str	r0, [r7, #12]
    6cd6:	460b      	mov	r3, r1
    6cd8:	607a      	str	r2, [r7, #4]
    6cda:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6cdc:	7afb      	ldrb	r3, [r7, #11]
    6cde:	68fa      	ldr	r2, [r7, #12]
    6ce0:	01db      	lsls	r3, r3, #7
    6ce2:	4413      	add	r3, r2
    6ce4:	3318      	adds	r3, #24
    6ce6:	687a      	ldr	r2, [r7, #4]
    6ce8:	601a      	str	r2, [r3, #0]
}
    6cea:	bf00      	nop
    6cec:	3714      	adds	r7, #20
    6cee:	46bd      	mov	sp, r7
    6cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
    6cf4:	4770      	bx	lr

00006cf6 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    6cf6:	b480      	push	{r7}
    6cf8:	b085      	sub	sp, #20
    6cfa:	af00      	add	r7, sp, #0
    6cfc:	60f8      	str	r0, [r7, #12]
    6cfe:	460b      	mov	r3, r1
    6d00:	607a      	str	r2, [r7, #4]
    6d02:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6d04:	7afb      	ldrb	r3, [r7, #11]
    6d06:	68fa      	ldr	r2, [r7, #12]
    6d08:	01db      	lsls	r3, r3, #7
    6d0a:	4413      	add	r3, r2
    6d0c:	3314      	adds	r3, #20
    6d0e:	687a      	ldr	r2, [r7, #4]
    6d10:	601a      	str	r2, [r3, #0]
}
    6d12:	bf00      	nop
    6d14:	3714      	adds	r7, #20
    6d16:	46bd      	mov	sp, r7
    6d18:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d1c:	4770      	bx	lr

00006d1e <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    6d1e:	b480      	push	{r7}
    6d20:	b085      	sub	sp, #20
    6d22:	af00      	add	r7, sp, #0
    6d24:	6078      	str	r0, [r7, #4]
    6d26:	4608      	mov	r0, r1
    6d28:	4611      	mov	r1, r2
    6d2a:	461a      	mov	r2, r3
    6d2c:	4603      	mov	r3, r0
    6d2e:	70fb      	strb	r3, [r7, #3]
    6d30:	460b      	mov	r3, r1
    6d32:	70bb      	strb	r3, [r7, #2]
    6d34:	4613      	mov	r3, r2
    6d36:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    6d38:	78fa      	ldrb	r2, [r7, #3]
    6d3a:	78bb      	ldrb	r3, [r7, #2]
    6d3c:	6879      	ldr	r1, [r7, #4]
    6d3e:	01d2      	lsls	r2, r2, #7
    6d40:	440a      	add	r2, r1
    6d42:	4413      	add	r3, r2
    6d44:	3330      	adds	r3, #48	; 0x30
    6d46:	781b      	ldrb	r3, [r3, #0]
    6d48:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    6d4a:	7bfb      	ldrb	r3, [r7, #15]
    6d4c:	f023 030f 	bic.w	r3, r3, #15
    6d50:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    6d52:	787b      	ldrb	r3, [r7, #1]
    6d54:	f003 030f 	and.w	r3, r3, #15
    6d58:	b2da      	uxtb	r2, r3
    6d5a:	7bfb      	ldrb	r3, [r7, #15]
    6d5c:	4313      	orrs	r3, r2
    6d5e:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    6d60:	78fa      	ldrb	r2, [r7, #3]
    6d62:	78bb      	ldrb	r3, [r7, #2]
    6d64:	6879      	ldr	r1, [r7, #4]
    6d66:	01d2      	lsls	r2, r2, #7
    6d68:	440a      	add	r2, r1
    6d6a:	4413      	add	r3, r2
    6d6c:	3330      	adds	r3, #48	; 0x30
    6d6e:	7bfa      	ldrb	r2, [r7, #15]
    6d70:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    6d72:	bf00      	nop
    6d74:	3714      	adds	r7, #20
    6d76:	46bd      	mov	sp, r7
    6d78:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d7c:	4770      	bx	lr

00006d7e <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    6d7e:	b480      	push	{r7}
    6d80:	b085      	sub	sp, #20
    6d82:	af00      	add	r7, sp, #0
    6d84:	6078      	str	r0, [r7, #4]
    6d86:	4608      	mov	r0, r1
    6d88:	4611      	mov	r1, r2
    6d8a:	461a      	mov	r2, r3
    6d8c:	4603      	mov	r3, r0
    6d8e:	70fb      	strb	r3, [r7, #3]
    6d90:	460b      	mov	r3, r1
    6d92:	70bb      	strb	r3, [r7, #2]
    6d94:	4613      	mov	r3, r2
    6d96:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    6d98:	78fa      	ldrb	r2, [r7, #3]
    6d9a:	78bb      	ldrb	r3, [r7, #2]
    6d9c:	6879      	ldr	r1, [r7, #4]
    6d9e:	01d2      	lsls	r2, r2, #7
    6da0:	440a      	add	r2, r1
    6da2:	4413      	add	r3, r2
    6da4:	3330      	adds	r3, #48	; 0x30
    6da6:	781b      	ldrb	r3, [r3, #0]
    6da8:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    6daa:	7bfb      	ldrb	r3, [r7, #15]
    6dac:	f003 030f 	and.w	r3, r3, #15
    6db0:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    6db2:	787b      	ldrb	r3, [r7, #1]
    6db4:	011b      	lsls	r3, r3, #4
    6db6:	b2da      	uxtb	r2, r3
    6db8:	7bfb      	ldrb	r3, [r7, #15]
    6dba:	4313      	orrs	r3, r2
    6dbc:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    6dbe:	78fa      	ldrb	r2, [r7, #3]
    6dc0:	78bb      	ldrb	r3, [r7, #2]
    6dc2:	6879      	ldr	r1, [r7, #4]
    6dc4:	01d2      	lsls	r2, r2, #7
    6dc6:	440a      	add	r2, r1
    6dc8:	4413      	add	r3, r2
    6dca:	3330      	adds	r3, #48	; 0x30
    6dcc:	7bfa      	ldrb	r2, [r7, #15]
    6dce:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    6dd0:	bf00      	nop
    6dd2:	3714      	adds	r7, #20
    6dd4:	46bd      	mov	sp, r7
    6dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    6dda:	4770      	bx	lr

00006ddc <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    6ddc:	b480      	push	{r7}
    6dde:	b085      	sub	sp, #20
    6de0:	af00      	add	r7, sp, #0
    6de2:	6078      	str	r0, [r7, #4]
    6de4:	4608      	mov	r0, r1
    6de6:	4611      	mov	r1, r2
    6de8:	461a      	mov	r2, r3
    6dea:	4603      	mov	r3, r0
    6dec:	70fb      	strb	r3, [r7, #3]
    6dee:	460b      	mov	r3, r1
    6df0:	70bb      	strb	r3, [r7, #2]
    6df2:	4613      	mov	r3, r2
    6df4:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6df6:	78fa      	ldrb	r2, [r7, #3]
    6df8:	78bb      	ldrb	r3, [r7, #2]
    6dfa:	6879      	ldr	r1, [r7, #4]
    6dfc:	01d2      	lsls	r2, r2, #7
    6dfe:	440a      	add	r2, r1
    6e00:	4413      	add	r3, r2
    6e02:	3340      	adds	r3, #64	; 0x40
    6e04:	781b      	ldrb	r3, [r3, #0]
    6e06:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    6e08:	7bfb      	ldrb	r3, [r7, #15]
    6e0a:	f023 0301 	bic.w	r3, r3, #1
    6e0e:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    6e10:	787a      	ldrb	r2, [r7, #1]
    6e12:	7bfb      	ldrb	r3, [r7, #15]
    6e14:	4313      	orrs	r3, r2
    6e16:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6e18:	78fa      	ldrb	r2, [r7, #3]
    6e1a:	78bb      	ldrb	r3, [r7, #2]
    6e1c:	6879      	ldr	r1, [r7, #4]
    6e1e:	01d2      	lsls	r2, r2, #7
    6e20:	440a      	add	r2, r1
    6e22:	4413      	add	r3, r2
    6e24:	3340      	adds	r3, #64	; 0x40
    6e26:	7bfa      	ldrb	r2, [r7, #15]
    6e28:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    6e2a:	bf00      	nop
    6e2c:	3714      	adds	r7, #20
    6e2e:	46bd      	mov	sp, r7
    6e30:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e34:	4770      	bx	lr

00006e36 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    6e36:	b490      	push	{r4, r7}
    6e38:	b082      	sub	sp, #8
    6e3a:	af00      	add	r7, sp, #0
    6e3c:	6078      	str	r0, [r7, #4]
    6e3e:	460b      	mov	r3, r1
    6e40:	70fb      	strb	r3, [r7, #3]
    6e42:	4613      	mov	r3, r2
    6e44:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    6e46:	78fa      	ldrb	r2, [r7, #3]
    6e48:	78bb      	ldrb	r3, [r7, #2]
    6e4a:	78f8      	ldrb	r0, [r7, #3]
    6e4c:	78b9      	ldrb	r1, [r7, #2]
    6e4e:	687c      	ldr	r4, [r7, #4]
    6e50:	01c0      	lsls	r0, r0, #7
    6e52:	4420      	add	r0, r4
    6e54:	4401      	add	r1, r0
    6e56:	3140      	adds	r1, #64	; 0x40
    6e58:	7809      	ldrb	r1, [r1, #0]
    6e5a:	b2c9      	uxtb	r1, r1
    6e5c:	f041 0104 	orr.w	r1, r1, #4
    6e60:	b2c8      	uxtb	r0, r1
    6e62:	6879      	ldr	r1, [r7, #4]
    6e64:	01d2      	lsls	r2, r2, #7
    6e66:	440a      	add	r2, r1
    6e68:	4413      	add	r3, r2
    6e6a:	3340      	adds	r3, #64	; 0x40
    6e6c:	4602      	mov	r2, r0
    6e6e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    6e70:	bf00      	nop
    6e72:	3708      	adds	r7, #8
    6e74:	46bd      	mov	sp, r7
    6e76:	bc90      	pop	{r4, r7}
    6e78:	4770      	bx	lr

00006e7a <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    6e7a:	b490      	push	{r4, r7}
    6e7c:	b082      	sub	sp, #8
    6e7e:	af00      	add	r7, sp, #0
    6e80:	6078      	str	r0, [r7, #4]
    6e82:	460b      	mov	r3, r1
    6e84:	70fb      	strb	r3, [r7, #3]
    6e86:	4613      	mov	r3, r2
    6e88:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    6e8a:	78fa      	ldrb	r2, [r7, #3]
    6e8c:	78bb      	ldrb	r3, [r7, #2]
    6e8e:	78f8      	ldrb	r0, [r7, #3]
    6e90:	78b9      	ldrb	r1, [r7, #2]
    6e92:	687c      	ldr	r4, [r7, #4]
    6e94:	01c0      	lsls	r0, r0, #7
    6e96:	4420      	add	r0, r4
    6e98:	4401      	add	r1, r0
    6e9a:	3140      	adds	r1, #64	; 0x40
    6e9c:	7809      	ldrb	r1, [r1, #0]
    6e9e:	b2c9      	uxtb	r1, r1
    6ea0:	f021 0104 	bic.w	r1, r1, #4
    6ea4:	b2c8      	uxtb	r0, r1
    6ea6:	6879      	ldr	r1, [r7, #4]
    6ea8:	01d2      	lsls	r2, r2, #7
    6eaa:	440a      	add	r2, r1
    6eac:	4413      	add	r3, r2
    6eae:	3340      	adds	r3, #64	; 0x40
    6eb0:	4602      	mov	r2, r0
    6eb2:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    6eb4:	bf00      	nop
    6eb6:	3708      	adds	r7, #8
    6eb8:	46bd      	mov	sp, r7
    6eba:	bc90      	pop	{r4, r7}
    6ebc:	4770      	bx	lr

00006ebe <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    6ebe:	b480      	push	{r7}
    6ec0:	b085      	sub	sp, #20
    6ec2:	af00      	add	r7, sp, #0
    6ec4:	60f8      	str	r0, [r7, #12]
    6ec6:	460b      	mov	r3, r1
    6ec8:	607a      	str	r2, [r7, #4]
    6eca:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6ecc:	7afb      	ldrb	r3, [r7, #11]
    6ece:	68fa      	ldr	r2, [r7, #12]
    6ed0:	01db      	lsls	r3, r3, #7
    6ed2:	4413      	add	r3, r2
    6ed4:	3328      	adds	r3, #40	; 0x28
    6ed6:	687a      	ldr	r2, [r7, #4]
    6ed8:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    6eda:	bf00      	nop
    6edc:	3714      	adds	r7, #20
    6ede:	46bd      	mov	sp, r7
    6ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ee4:	4770      	bx	lr
	...

00006ee8 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    6ee8:	b580      	push	{r7, lr}
    6eea:	b082      	sub	sp, #8
    6eec:	af00      	add	r7, sp, #0
    6eee:	4603      	mov	r3, r0
    6ef0:	6039      	str	r1, [r7, #0]
    6ef2:	71fb      	strb	r3, [r7, #7]
    6ef4:	4613      	mov	r3, r2
    6ef6:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    6ef8:	79bb      	ldrb	r3, [r7, #6]
    6efa:	2b01      	cmp	r3, #1
    6efc:	d01c      	beq.n	6f38 <_gpio_set_direction+0x50>
    6efe:	2b02      	cmp	r3, #2
    6f00:	d037      	beq.n	6f72 <_gpio_set_direction+0x8a>
    6f02:	2b00      	cmp	r3, #0
    6f04:	d14e      	bne.n	6fa4 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
    6f06:	79fb      	ldrb	r3, [r7, #7]
    6f08:	683a      	ldr	r2, [r7, #0]
    6f0a:	4619      	mov	r1, r3
    6f0c:	482a      	ldr	r0, [pc, #168]	; (6fb8 <_gpio_set_direction+0xd0>)
    6f0e:	4b2b      	ldr	r3, [pc, #172]	; (6fbc <_gpio_set_direction+0xd4>)
    6f10:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    6f12:	683b      	ldr	r3, [r7, #0]
    6f14:	b29b      	uxth	r3, r3
    6f16:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    6f1a:	79fb      	ldrb	r3, [r7, #7]
    6f1c:	4619      	mov	r1, r3
    6f1e:	4826      	ldr	r0, [pc, #152]	; (6fb8 <_gpio_set_direction+0xd0>)
    6f20:	4b27      	ldr	r3, [pc, #156]	; (6fc0 <_gpio_set_direction+0xd8>)
    6f22:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    6f24:	683b      	ldr	r3, [r7, #0]
    6f26:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    6f28:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    6f2c:	79fb      	ldrb	r3, [r7, #7]
    6f2e:	4619      	mov	r1, r3
    6f30:	4821      	ldr	r0, [pc, #132]	; (6fb8 <_gpio_set_direction+0xd0>)
    6f32:	4b23      	ldr	r3, [pc, #140]	; (6fc0 <_gpio_set_direction+0xd8>)
    6f34:	4798      	blx	r3
		break;
    6f36:	e03a      	b.n	6fae <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
    6f38:	79fb      	ldrb	r3, [r7, #7]
    6f3a:	683a      	ldr	r2, [r7, #0]
    6f3c:	4619      	mov	r1, r3
    6f3e:	481e      	ldr	r0, [pc, #120]	; (6fb8 <_gpio_set_direction+0xd0>)
    6f40:	4b1e      	ldr	r3, [pc, #120]	; (6fbc <_gpio_set_direction+0xd4>)
    6f42:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    6f44:	683b      	ldr	r3, [r7, #0]
    6f46:	b29b      	uxth	r3, r3
    6f48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    6f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    6f50:	79f9      	ldrb	r1, [r7, #7]
    6f52:	461a      	mov	r2, r3
    6f54:	4818      	ldr	r0, [pc, #96]	; (6fb8 <_gpio_set_direction+0xd0>)
    6f56:	4b1a      	ldr	r3, [pc, #104]	; (6fc0 <_gpio_set_direction+0xd8>)
    6f58:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    6f5a:	683b      	ldr	r3, [r7, #0]
    6f5c:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    6f5e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    6f62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    6f66:	79f9      	ldrb	r1, [r7, #7]
    6f68:	461a      	mov	r2, r3
    6f6a:	4813      	ldr	r0, [pc, #76]	; (6fb8 <_gpio_set_direction+0xd0>)
    6f6c:	4b14      	ldr	r3, [pc, #80]	; (6fc0 <_gpio_set_direction+0xd8>)
    6f6e:	4798      	blx	r3
		break;
    6f70:	e01d      	b.n	6fae <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
    6f72:	79fb      	ldrb	r3, [r7, #7]
    6f74:	683a      	ldr	r2, [r7, #0]
    6f76:	4619      	mov	r1, r3
    6f78:	480f      	ldr	r0, [pc, #60]	; (6fb8 <_gpio_set_direction+0xd0>)
    6f7a:	4b12      	ldr	r3, [pc, #72]	; (6fc4 <_gpio_set_direction+0xdc>)
    6f7c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    6f7e:	683b      	ldr	r3, [r7, #0]
    6f80:	b29b      	uxth	r3, r3
    6f82:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    6f86:	79fb      	ldrb	r3, [r7, #7]
    6f88:	4619      	mov	r1, r3
    6f8a:	480b      	ldr	r0, [pc, #44]	; (6fb8 <_gpio_set_direction+0xd0>)
    6f8c:	4b0c      	ldr	r3, [pc, #48]	; (6fc0 <_gpio_set_direction+0xd8>)
    6f8e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    6f90:	683b      	ldr	r3, [r7, #0]
    6f92:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    6f94:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    6f98:	79fb      	ldrb	r3, [r7, #7]
    6f9a:	4619      	mov	r1, r3
    6f9c:	4806      	ldr	r0, [pc, #24]	; (6fb8 <_gpio_set_direction+0xd0>)
    6f9e:	4b08      	ldr	r3, [pc, #32]	; (6fc0 <_gpio_set_direction+0xd8>)
    6fa0:	4798      	blx	r3
		break;
    6fa2:	e004      	b.n	6fae <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    6fa4:	2246      	movs	r2, #70	; 0x46
    6fa6:	4908      	ldr	r1, [pc, #32]	; (6fc8 <_gpio_set_direction+0xe0>)
    6fa8:	2000      	movs	r0, #0
    6faa:	4b08      	ldr	r3, [pc, #32]	; (6fcc <_gpio_set_direction+0xe4>)
    6fac:	4798      	blx	r3
	}
}
    6fae:	bf00      	nop
    6fb0:	3708      	adds	r7, #8
    6fb2:	46bd      	mov	sp, r7
    6fb4:	bd80      	pop	{r7, pc}
    6fb6:	bf00      	nop
    6fb8:	41008000 	.word	0x41008000
    6fbc:	00006ca7 	.word	0x00006ca7
    6fc0:	00006ebf 	.word	0x00006ebf
    6fc4:	00006c7f 	.word	0x00006c7f
    6fc8:	00013d2c 	.word	0x00013d2c
    6fcc:	000094ed 	.word	0x000094ed

00006fd0 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    6fd0:	b580      	push	{r7, lr}
    6fd2:	b082      	sub	sp, #8
    6fd4:	af00      	add	r7, sp, #0
    6fd6:	4603      	mov	r3, r0
    6fd8:	6039      	str	r1, [r7, #0]
    6fda:	71fb      	strb	r3, [r7, #7]
    6fdc:	4613      	mov	r3, r2
    6fde:	71bb      	strb	r3, [r7, #6]
	if (level) {
    6fe0:	79bb      	ldrb	r3, [r7, #6]
    6fe2:	2b00      	cmp	r3, #0
    6fe4:	d006      	beq.n	6ff4 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    6fe6:	79fb      	ldrb	r3, [r7, #7]
    6fe8:	683a      	ldr	r2, [r7, #0]
    6fea:	4619      	mov	r1, r3
    6fec:	4806      	ldr	r0, [pc, #24]	; (7008 <_gpio_set_level+0x38>)
    6fee:	4b07      	ldr	r3, [pc, #28]	; (700c <_gpio_set_level+0x3c>)
    6ff0:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    6ff2:	e005      	b.n	7000 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    6ff4:	79fb      	ldrb	r3, [r7, #7]
    6ff6:	683a      	ldr	r2, [r7, #0]
    6ff8:	4619      	mov	r1, r3
    6ffa:	4803      	ldr	r0, [pc, #12]	; (7008 <_gpio_set_level+0x38>)
    6ffc:	4b04      	ldr	r3, [pc, #16]	; (7010 <_gpio_set_level+0x40>)
    6ffe:	4798      	blx	r3
}
    7000:	bf00      	nop
    7002:	3708      	adds	r7, #8
    7004:	46bd      	mov	sp, r7
    7006:	bd80      	pop	{r7, pc}
    7008:	41008000 	.word	0x41008000
    700c:	00006ccf 	.word	0x00006ccf
    7010:	00006cf7 	.word	0x00006cf7

00007014 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    7014:	b580      	push	{r7, lr}
    7016:	b082      	sub	sp, #8
    7018:	af00      	add	r7, sp, #0
    701a:	4603      	mov	r3, r0
    701c:	71fb      	strb	r3, [r7, #7]
    701e:	460b      	mov	r3, r1
    7020:	71bb      	strb	r3, [r7, #6]
    7022:	4613      	mov	r3, r2
    7024:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
    7026:	797b      	ldrb	r3, [r7, #5]
    7028:	2b01      	cmp	r3, #1
    702a:	d00a      	beq.n	7042 <_gpio_set_pin_pull_mode+0x2e>
    702c:	2b02      	cmp	r3, #2
    702e:	d01f      	beq.n	7070 <_gpio_set_pin_pull_mode+0x5c>
    7030:	2b00      	cmp	r3, #0
    7032:	d134      	bne.n	709e <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    7034:	79ba      	ldrb	r2, [r7, #6]
    7036:	79fb      	ldrb	r3, [r7, #7]
    7038:	4619      	mov	r1, r3
    703a:	481e      	ldr	r0, [pc, #120]	; (70b4 <_gpio_set_pin_pull_mode+0xa0>)
    703c:	4b1e      	ldr	r3, [pc, #120]	; (70b8 <_gpio_set_pin_pull_mode+0xa4>)
    703e:	4798      	blx	r3
		break;
    7040:	e033      	b.n	70aa <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    7042:	79bb      	ldrb	r3, [r7, #6]
    7044:	2201      	movs	r2, #1
    7046:	409a      	lsls	r2, r3
    7048:	79fb      	ldrb	r3, [r7, #7]
    704a:	4619      	mov	r1, r3
    704c:	4819      	ldr	r0, [pc, #100]	; (70b4 <_gpio_set_pin_pull_mode+0xa0>)
    704e:	4b1b      	ldr	r3, [pc, #108]	; (70bc <_gpio_set_pin_pull_mode+0xa8>)
    7050:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    7052:	79ba      	ldrb	r2, [r7, #6]
    7054:	79fb      	ldrb	r3, [r7, #7]
    7056:	4619      	mov	r1, r3
    7058:	4816      	ldr	r0, [pc, #88]	; (70b4 <_gpio_set_pin_pull_mode+0xa0>)
    705a:	4b19      	ldr	r3, [pc, #100]	; (70c0 <_gpio_set_pin_pull_mode+0xac>)
    705c:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    705e:	79bb      	ldrb	r3, [r7, #6]
    7060:	2201      	movs	r2, #1
    7062:	409a      	lsls	r2, r3
    7064:	79fb      	ldrb	r3, [r7, #7]
    7066:	4619      	mov	r1, r3
    7068:	4812      	ldr	r0, [pc, #72]	; (70b4 <_gpio_set_pin_pull_mode+0xa0>)
    706a:	4b16      	ldr	r3, [pc, #88]	; (70c4 <_gpio_set_pin_pull_mode+0xb0>)
    706c:	4798      	blx	r3
		break;
    706e:	e01c      	b.n	70aa <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    7070:	79bb      	ldrb	r3, [r7, #6]
    7072:	2201      	movs	r2, #1
    7074:	409a      	lsls	r2, r3
    7076:	79fb      	ldrb	r3, [r7, #7]
    7078:	4619      	mov	r1, r3
    707a:	480e      	ldr	r0, [pc, #56]	; (70b4 <_gpio_set_pin_pull_mode+0xa0>)
    707c:	4b0f      	ldr	r3, [pc, #60]	; (70bc <_gpio_set_pin_pull_mode+0xa8>)
    707e:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    7080:	79ba      	ldrb	r2, [r7, #6]
    7082:	79fb      	ldrb	r3, [r7, #7]
    7084:	4619      	mov	r1, r3
    7086:	480b      	ldr	r0, [pc, #44]	; (70b4 <_gpio_set_pin_pull_mode+0xa0>)
    7088:	4b0d      	ldr	r3, [pc, #52]	; (70c0 <_gpio_set_pin_pull_mode+0xac>)
    708a:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    708c:	79bb      	ldrb	r3, [r7, #6]
    708e:	2201      	movs	r2, #1
    7090:	409a      	lsls	r2, r3
    7092:	79fb      	ldrb	r3, [r7, #7]
    7094:	4619      	mov	r1, r3
    7096:	4807      	ldr	r0, [pc, #28]	; (70b4 <_gpio_set_pin_pull_mode+0xa0>)
    7098:	4b0b      	ldr	r3, [pc, #44]	; (70c8 <_gpio_set_pin_pull_mode+0xb4>)
    709a:	4798      	blx	r3
		break;
    709c:	e005      	b.n	70aa <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    709e:	2289      	movs	r2, #137	; 0x89
    70a0:	490a      	ldr	r1, [pc, #40]	; (70cc <_gpio_set_pin_pull_mode+0xb8>)
    70a2:	2000      	movs	r0, #0
    70a4:	4b0a      	ldr	r3, [pc, #40]	; (70d0 <_gpio_set_pin_pull_mode+0xbc>)
    70a6:	4798      	blx	r3
		break;
    70a8:	bf00      	nop
	}
}
    70aa:	bf00      	nop
    70ac:	3708      	adds	r7, #8
    70ae:	46bd      	mov	sp, r7
    70b0:	bd80      	pop	{r7, pc}
    70b2:	bf00      	nop
    70b4:	41008000 	.word	0x41008000
    70b8:	00006e7b 	.word	0x00006e7b
    70bc:	00006ca7 	.word	0x00006ca7
    70c0:	00006e37 	.word	0x00006e37
    70c4:	00006ccf 	.word	0x00006ccf
    70c8:	00006cf7 	.word	0x00006cf7
    70cc:	00013d2c 	.word	0x00013d2c
    70d0:	000094ed 	.word	0x000094ed

000070d4 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    70d4:	b590      	push	{r4, r7, lr}
    70d6:	b085      	sub	sp, #20
    70d8:	af00      	add	r7, sp, #0
    70da:	6078      	str	r0, [r7, #4]
    70dc:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    70de:	687b      	ldr	r3, [r7, #4]
    70e0:	095b      	lsrs	r3, r3, #5
    70e2:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    70e4:	687b      	ldr	r3, [r7, #4]
    70e6:	b2db      	uxtb	r3, r3
    70e8:	f003 031f 	and.w	r3, r3, #31
    70ec:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    70ee:	683b      	ldr	r3, [r7, #0]
    70f0:	f1b3 3fff 	cmp.w	r3, #4294967295
    70f4:	d106      	bne.n	7104 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    70f6:	7bba      	ldrb	r2, [r7, #14]
    70f8:	7bf9      	ldrb	r1, [r7, #15]
    70fa:	2300      	movs	r3, #0
    70fc:	4812      	ldr	r0, [pc, #72]	; (7148 <_gpio_set_pin_function+0x74>)
    70fe:	4c13      	ldr	r4, [pc, #76]	; (714c <_gpio_set_pin_function+0x78>)
    7100:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    7102:	e01d      	b.n	7140 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    7104:	7bba      	ldrb	r2, [r7, #14]
    7106:	7bf9      	ldrb	r1, [r7, #15]
    7108:	2301      	movs	r3, #1
    710a:	480f      	ldr	r0, [pc, #60]	; (7148 <_gpio_set_pin_function+0x74>)
    710c:	4c0f      	ldr	r4, [pc, #60]	; (714c <_gpio_set_pin_function+0x78>)
    710e:	47a0      	blx	r4
		if (pin & 1) {
    7110:	7bbb      	ldrb	r3, [r7, #14]
    7112:	f003 0301 	and.w	r3, r3, #1
    7116:	2b00      	cmp	r3, #0
    7118:	d009      	beq.n	712e <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    711a:	7bbb      	ldrb	r3, [r7, #14]
    711c:	085b      	lsrs	r3, r3, #1
    711e:	b2da      	uxtb	r2, r3
    7120:	683b      	ldr	r3, [r7, #0]
    7122:	b2db      	uxtb	r3, r3
    7124:	7bf9      	ldrb	r1, [r7, #15]
    7126:	4808      	ldr	r0, [pc, #32]	; (7148 <_gpio_set_pin_function+0x74>)
    7128:	4c09      	ldr	r4, [pc, #36]	; (7150 <_gpio_set_pin_function+0x7c>)
    712a:	47a0      	blx	r4
}
    712c:	e008      	b.n	7140 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    712e:	7bbb      	ldrb	r3, [r7, #14]
    7130:	085b      	lsrs	r3, r3, #1
    7132:	b2da      	uxtb	r2, r3
    7134:	683b      	ldr	r3, [r7, #0]
    7136:	b2db      	uxtb	r3, r3
    7138:	7bf9      	ldrb	r1, [r7, #15]
    713a:	4803      	ldr	r0, [pc, #12]	; (7148 <_gpio_set_pin_function+0x74>)
    713c:	4c05      	ldr	r4, [pc, #20]	; (7154 <_gpio_set_pin_function+0x80>)
    713e:	47a0      	blx	r4
}
    7140:	bf00      	nop
    7142:	3714      	adds	r7, #20
    7144:	46bd      	mov	sp, r7
    7146:	bd90      	pop	{r4, r7, pc}
    7148:	41008000 	.word	0x41008000
    714c:	00006ddd 	.word	0x00006ddd
    7150:	00006d7f 	.word	0x00006d7f
    7154:	00006d1f 	.word	0x00006d1f

00007158 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    7158:	b580      	push	{r7, lr}
    715a:	b082      	sub	sp, #8
    715c:	af00      	add	r7, sp, #0
    715e:	4603      	mov	r3, r0
    7160:	460a      	mov	r2, r1
    7162:	71fb      	strb	r3, [r7, #7]
    7164:	4613      	mov	r3, r2
    7166:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    7168:	79fb      	ldrb	r3, [r7, #7]
    716a:	095b      	lsrs	r3, r3, #5
    716c:	b2d8      	uxtb	r0, r3
    716e:	79fb      	ldrb	r3, [r7, #7]
    7170:	f003 031f 	and.w	r3, r3, #31
    7174:	b2db      	uxtb	r3, r3
    7176:	79ba      	ldrb	r2, [r7, #6]
    7178:	4619      	mov	r1, r3
    717a:	4b03      	ldr	r3, [pc, #12]	; (7188 <gpio_set_pin_pull_mode+0x30>)
    717c:	4798      	blx	r3
}
    717e:	bf00      	nop
    7180:	3708      	adds	r7, #8
    7182:	46bd      	mov	sp, r7
    7184:	bd80      	pop	{r7, pc}
    7186:	bf00      	nop
    7188:	00007015 	.word	0x00007015

0000718c <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    718c:	b580      	push	{r7, lr}
    718e:	b082      	sub	sp, #8
    7190:	af00      	add	r7, sp, #0
    7192:	6078      	str	r0, [r7, #4]
    7194:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    7196:	6839      	ldr	r1, [r7, #0]
    7198:	6878      	ldr	r0, [r7, #4]
    719a:	4b03      	ldr	r3, [pc, #12]	; (71a8 <gpio_set_pin_function+0x1c>)
    719c:	4798      	blx	r3
}
    719e:	bf00      	nop
    71a0:	3708      	adds	r7, #8
    71a2:	46bd      	mov	sp, r7
    71a4:	bd80      	pop	{r7, pc}
    71a6:	bf00      	nop
    71a8:	000070d5 	.word	0x000070d5

000071ac <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    71ac:	b580      	push	{r7, lr}
    71ae:	b082      	sub	sp, #8
    71b0:	af00      	add	r7, sp, #0
    71b2:	4603      	mov	r3, r0
    71b4:	460a      	mov	r2, r1
    71b6:	71fb      	strb	r3, [r7, #7]
    71b8:	4613      	mov	r3, r2
    71ba:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    71bc:	79fb      	ldrb	r3, [r7, #7]
    71be:	095b      	lsrs	r3, r3, #5
    71c0:	b2d8      	uxtb	r0, r3
    71c2:	79fb      	ldrb	r3, [r7, #7]
    71c4:	f003 031f 	and.w	r3, r3, #31
    71c8:	2201      	movs	r2, #1
    71ca:	fa02 f303 	lsl.w	r3, r2, r3
    71ce:	79ba      	ldrb	r2, [r7, #6]
    71d0:	4619      	mov	r1, r3
    71d2:	4b03      	ldr	r3, [pc, #12]	; (71e0 <gpio_set_pin_direction+0x34>)
    71d4:	4798      	blx	r3
}
    71d6:	bf00      	nop
    71d8:	3708      	adds	r7, #8
    71da:	46bd      	mov	sp, r7
    71dc:	bd80      	pop	{r7, pc}
    71de:	bf00      	nop
    71e0:	00006ee9 	.word	0x00006ee9

000071e4 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    71e4:	b580      	push	{r7, lr}
    71e6:	b082      	sub	sp, #8
    71e8:	af00      	add	r7, sp, #0
    71ea:	4603      	mov	r3, r0
    71ec:	460a      	mov	r2, r1
    71ee:	71fb      	strb	r3, [r7, #7]
    71f0:	4613      	mov	r3, r2
    71f2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    71f4:	79fb      	ldrb	r3, [r7, #7]
    71f6:	095b      	lsrs	r3, r3, #5
    71f8:	b2d8      	uxtb	r0, r3
    71fa:	79fb      	ldrb	r3, [r7, #7]
    71fc:	f003 031f 	and.w	r3, r3, #31
    7200:	2201      	movs	r2, #1
    7202:	fa02 f303 	lsl.w	r3, r2, r3
    7206:	79ba      	ldrb	r2, [r7, #6]
    7208:	4619      	mov	r1, r3
    720a:	4b03      	ldr	r3, [pc, #12]	; (7218 <gpio_set_pin_level+0x34>)
    720c:	4798      	blx	r3
}
    720e:	bf00      	nop
    7210:	3708      	adds	r7, #8
    7212:	46bd      	mov	sp, r7
    7214:	bd80      	pop	{r7, pc}
    7216:	bf00      	nop
    7218:	00006fd1 	.word	0x00006fd1

0000721c <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    721c:	b580      	push	{r7, lr}
    721e:	af00      	add	r7, sp, #0
	_init_chip();
    7220:	4b01      	ldr	r3, [pc, #4]	; (7228 <init_mcu+0xc>)
    7222:	4798      	blx	r3
}
    7224:	bf00      	nop
    7226:	bd80      	pop	{r7, pc}
    7228:	0000a6a1 	.word	0x0000a6a1

0000722c <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    722c:	b580      	push	{r7, lr}
    722e:	b082      	sub	sp, #8
    7230:	af00      	add	r7, sp, #0
    7232:	6078      	str	r0, [r7, #4]
    7234:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    7236:	687b      	ldr	r3, [r7, #4]
    7238:	2b00      	cmp	r3, #0
    723a:	d004      	beq.n	7246 <wdt_init+0x1a>
    723c:	683b      	ldr	r3, [r7, #0]
    723e:	2b00      	cmp	r3, #0
    7240:	d001      	beq.n	7246 <wdt_init+0x1a>
    7242:	2301      	movs	r3, #1
    7244:	e000      	b.n	7248 <wdt_init+0x1c>
    7246:	2300      	movs	r3, #0
    7248:	f003 0301 	and.w	r3, r3, #1
    724c:	b2db      	uxtb	r3, r3
    724e:	2248      	movs	r2, #72	; 0x48
    7250:	4907      	ldr	r1, [pc, #28]	; (7270 <wdt_init+0x44>)
    7252:	4618      	mov	r0, r3
    7254:	4b07      	ldr	r3, [pc, #28]	; (7274 <wdt_init+0x48>)
    7256:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    7258:	687b      	ldr	r3, [r7, #4]
    725a:	683a      	ldr	r2, [r7, #0]
    725c:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    725e:	687b      	ldr	r3, [r7, #4]
    7260:	4618      	mov	r0, r3
    7262:	4b05      	ldr	r3, [pc, #20]	; (7278 <wdt_init+0x4c>)
    7264:	4798      	blx	r3
    7266:	4603      	mov	r3, r0
}
    7268:	4618      	mov	r0, r3
    726a:	3708      	adds	r7, #8
    726c:	46bd      	mov	sp, r7
    726e:	bd80      	pop	{r7, pc}
    7270:	00013d48 	.word	0x00013d48
    7274:	000094ed 	.word	0x000094ed
    7278:	000109d1 	.word	0x000109d1

0000727c <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    727c:	b580      	push	{r7, lr}
    727e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    7280:	4804      	ldr	r0, [pc, #16]	; (7294 <CRC_CALC_init+0x18>)
    7282:	4b05      	ldr	r3, [pc, #20]	; (7298 <CRC_CALC_init+0x1c>)
    7284:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    7286:	4905      	ldr	r1, [pc, #20]	; (729c <CRC_CALC_init+0x20>)
    7288:	4805      	ldr	r0, [pc, #20]	; (72a0 <CRC_CALC_init+0x24>)
    728a:	4b06      	ldr	r3, [pc, #24]	; (72a4 <CRC_CALC_init+0x28>)
    728c:	4798      	blx	r3
}
    728e:	bf00      	nop
    7290:	bd80      	pop	{r7, pc}
    7292:	bf00      	nop
    7294:	40000800 	.word	0x40000800
    7298:	00006b3f 	.word	0x00006b3f
    729c:	41002000 	.word	0x41002000
    72a0:	20001c14 	.word	0x20001c14
    72a4:	00007f61 	.word	0x00007f61

000072a8 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    72a8:	b580      	push	{r7, lr}
    72aa:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    72ac:	2244      	movs	r2, #68	; 0x44
    72ae:	2104      	movs	r1, #4
    72b0:	481e      	ldr	r0, [pc, #120]	; (732c <EXTERNAL_IRQ_0_init+0x84>)
    72b2:	4b1f      	ldr	r3, [pc, #124]	; (7330 <EXTERNAL_IRQ_0_init+0x88>)
    72b4:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    72b6:	481f      	ldr	r0, [pc, #124]	; (7334 <EXTERNAL_IRQ_0_init+0x8c>)
    72b8:	4b1f      	ldr	r3, [pc, #124]	; (7338 <EXTERNAL_IRQ_0_init+0x90>)
    72ba:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA04, GPIO_DIRECTION_IN);
    72bc:	2101      	movs	r1, #1
    72be:	2004      	movs	r0, #4
    72c0:	4b1e      	ldr	r3, [pc, #120]	; (733c <EXTERNAL_IRQ_0_init+0x94>)
    72c2:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA04,
    72c4:	2102      	movs	r1, #2
    72c6:	2004      	movs	r0, #4
    72c8:	4b1d      	ldr	r3, [pc, #116]	; (7340 <EXTERNAL_IRQ_0_init+0x98>)
    72ca:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA04, PINMUX_PA04A_EIC_EXTINT4);
    72cc:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    72d0:	2004      	movs	r0, #4
    72d2:	4b1c      	ldr	r3, [pc, #112]	; (7344 <EXTERNAL_IRQ_0_init+0x9c>)
    72d4:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA05, GPIO_DIRECTION_IN);
    72d6:	2101      	movs	r1, #1
    72d8:	2005      	movs	r0, #5
    72da:	4b18      	ldr	r3, [pc, #96]	; (733c <EXTERNAL_IRQ_0_init+0x94>)
    72dc:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA05,
    72de:	2102      	movs	r1, #2
    72e0:	2005      	movs	r0, #5
    72e2:	4b17      	ldr	r3, [pc, #92]	; (7340 <EXTERNAL_IRQ_0_init+0x98>)
    72e4:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA05, PINMUX_PA05A_EIC_EXTINT5);
    72e6:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    72ea:	2005      	movs	r0, #5
    72ec:	4b15      	ldr	r3, [pc, #84]	; (7344 <EXTERNAL_IRQ_0_init+0x9c>)
    72ee:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(R2Int, GPIO_DIRECTION_IN);
    72f0:	2101      	movs	r1, #1
    72f2:	2056      	movs	r0, #86	; 0x56
    72f4:	4b11      	ldr	r3, [pc, #68]	; (733c <EXTERNAL_IRQ_0_init+0x94>)
    72f6:	4798      	blx	r3

	gpio_set_pin_pull_mode(R2Int,
    72f8:	2102      	movs	r1, #2
    72fa:	2056      	movs	r0, #86	; 0x56
    72fc:	4b10      	ldr	r3, [pc, #64]	; (7340 <EXTERNAL_IRQ_0_init+0x98>)
    72fe:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(R2Int, PINMUX_PC22A_EIC_EXTINT6);
    7300:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    7304:	2056      	movs	r0, #86	; 0x56
    7306:	4b0f      	ldr	r3, [pc, #60]	; (7344 <EXTERNAL_IRQ_0_init+0x9c>)
    7308:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(R1Int, GPIO_DIRECTION_IN);
    730a:	2101      	movs	r1, #1
    730c:	2057      	movs	r0, #87	; 0x57
    730e:	4b0b      	ldr	r3, [pc, #44]	; (733c <EXTERNAL_IRQ_0_init+0x94>)
    7310:	4798      	blx	r3

	gpio_set_pin_pull_mode(R1Int,
    7312:	2102      	movs	r1, #2
    7314:	2057      	movs	r0, #87	; 0x57
    7316:	4b0a      	ldr	r3, [pc, #40]	; (7340 <EXTERNAL_IRQ_0_init+0x98>)
    7318:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(R1Int, PINMUX_PC23A_EIC_EXTINT7);
    731a:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    731e:	2057      	movs	r0, #87	; 0x57
    7320:	4b08      	ldr	r3, [pc, #32]	; (7344 <EXTERNAL_IRQ_0_init+0x9c>)
    7322:	4798      	blx	r3

	ext_irq_init();
    7324:	4b08      	ldr	r3, [pc, #32]	; (7348 <EXTERNAL_IRQ_0_init+0xa0>)
    7326:	4798      	blx	r3
}
    7328:	bf00      	nop
    732a:	bd80      	pop	{r7, pc}
    732c:	40001c00 	.word	0x40001c00
    7330:	000069d9 	.word	0x000069d9
    7334:	40000800 	.word	0x40000800
    7338:	00006abf 	.word	0x00006abf
    733c:	000071ad 	.word	0x000071ad
    7340:	00007159 	.word	0x00007159
    7344:	0000718d 	.word	0x0000718d
    7348:	00008029 	.word	0x00008029

0000734c <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    734c:	b580      	push	{r7, lr}
    734e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    7350:	2244      	movs	r2, #68	; 0x44
    7352:	210b      	movs	r1, #11
    7354:	4804      	ldr	r0, [pc, #16]	; (7368 <EVENT_SYSTEM_0_init+0x1c>)
    7356:	4b05      	ldr	r3, [pc, #20]	; (736c <EVENT_SYSTEM_0_init+0x20>)
    7358:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    735a:	4805      	ldr	r0, [pc, #20]	; (7370 <EVENT_SYSTEM_0_init+0x24>)
    735c:	4b05      	ldr	r3, [pc, #20]	; (7374 <EVENT_SYSTEM_0_init+0x28>)
    735e:	4798      	blx	r3

	event_system_init();
    7360:	4b05      	ldr	r3, [pc, #20]	; (7378 <EVENT_SYSTEM_0_init+0x2c>)
    7362:	4798      	blx	r3
}
    7364:	bf00      	nop
    7366:	bd80      	pop	{r7, pc}
    7368:	40001c00 	.word	0x40001c00
    736c:	000069d9 	.word	0x000069d9
    7370:	40000800 	.word	0x40000800
    7374:	00006b5f 	.word	0x00006b5f
    7378:	00008015 	.word	0x00008015

0000737c <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    737c:	b580      	push	{r7, lr}
    737e:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    7380:	2101      	movs	r1, #1
    7382:	202b      	movs	r0, #43	; 0x2b
    7384:	4b2b      	ldr	r3, [pc, #172]	; (7434 <QSPI_N25Q256_PORT_init+0xb8>)
    7386:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    7388:	2100      	movs	r1, #0
    738a:	202b      	movs	r0, #43	; 0x2b
    738c:	4b2a      	ldr	r3, [pc, #168]	; (7438 <QSPI_N25Q256_PORT_init+0xbc>)
    738e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    7390:	492a      	ldr	r1, [pc, #168]	; (743c <QSPI_N25Q256_PORT_init+0xc0>)
    7392:	202b      	movs	r0, #43	; 0x2b
    7394:	4b2a      	ldr	r3, [pc, #168]	; (7440 <QSPI_N25Q256_PORT_init+0xc4>)
    7396:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    7398:	2102      	movs	r1, #2
    739a:	2008      	movs	r0, #8
    739c:	4b25      	ldr	r3, [pc, #148]	; (7434 <QSPI_N25Q256_PORT_init+0xb8>)
    739e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    73a0:	2100      	movs	r1, #0
    73a2:	2008      	movs	r0, #8
    73a4:	4b27      	ldr	r3, [pc, #156]	; (7444 <QSPI_N25Q256_PORT_init+0xc8>)
    73a6:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    73a8:	2100      	movs	r1, #0
    73aa:	2008      	movs	r0, #8
    73ac:	4b22      	ldr	r3, [pc, #136]	; (7438 <QSPI_N25Q256_PORT_init+0xbc>)
    73ae:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    73b0:	4925      	ldr	r1, [pc, #148]	; (7448 <QSPI_N25Q256_PORT_init+0xcc>)
    73b2:	2008      	movs	r0, #8
    73b4:	4b22      	ldr	r3, [pc, #136]	; (7440 <QSPI_N25Q256_PORT_init+0xc4>)
    73b6:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    73b8:	2102      	movs	r1, #2
    73ba:	2009      	movs	r0, #9
    73bc:	4b1d      	ldr	r3, [pc, #116]	; (7434 <QSPI_N25Q256_PORT_init+0xb8>)
    73be:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    73c0:	2100      	movs	r1, #0
    73c2:	2009      	movs	r0, #9
    73c4:	4b1f      	ldr	r3, [pc, #124]	; (7444 <QSPI_N25Q256_PORT_init+0xc8>)
    73c6:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    73c8:	2100      	movs	r1, #0
    73ca:	2009      	movs	r0, #9
    73cc:	4b1a      	ldr	r3, [pc, #104]	; (7438 <QSPI_N25Q256_PORT_init+0xbc>)
    73ce:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    73d0:	491e      	ldr	r1, [pc, #120]	; (744c <QSPI_N25Q256_PORT_init+0xd0>)
    73d2:	2009      	movs	r0, #9
    73d4:	4b1a      	ldr	r3, [pc, #104]	; (7440 <QSPI_N25Q256_PORT_init+0xc4>)
    73d6:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    73d8:	2102      	movs	r1, #2
    73da:	200a      	movs	r0, #10
    73dc:	4b15      	ldr	r3, [pc, #84]	; (7434 <QSPI_N25Q256_PORT_init+0xb8>)
    73de:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    73e0:	2100      	movs	r1, #0
    73e2:	200a      	movs	r0, #10
    73e4:	4b17      	ldr	r3, [pc, #92]	; (7444 <QSPI_N25Q256_PORT_init+0xc8>)
    73e6:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    73e8:	2100      	movs	r1, #0
    73ea:	200a      	movs	r0, #10
    73ec:	4b12      	ldr	r3, [pc, #72]	; (7438 <QSPI_N25Q256_PORT_init+0xbc>)
    73ee:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    73f0:	4917      	ldr	r1, [pc, #92]	; (7450 <QSPI_N25Q256_PORT_init+0xd4>)
    73f2:	200a      	movs	r0, #10
    73f4:	4b12      	ldr	r3, [pc, #72]	; (7440 <QSPI_N25Q256_PORT_init+0xc4>)
    73f6:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    73f8:	2102      	movs	r1, #2
    73fa:	200b      	movs	r0, #11
    73fc:	4b0d      	ldr	r3, [pc, #52]	; (7434 <QSPI_N25Q256_PORT_init+0xb8>)
    73fe:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    7400:	2100      	movs	r1, #0
    7402:	200b      	movs	r0, #11
    7404:	4b0f      	ldr	r3, [pc, #60]	; (7444 <QSPI_N25Q256_PORT_init+0xc8>)
    7406:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    7408:	2100      	movs	r1, #0
    740a:	200b      	movs	r0, #11
    740c:	4b0a      	ldr	r3, [pc, #40]	; (7438 <QSPI_N25Q256_PORT_init+0xbc>)
    740e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    7410:	4910      	ldr	r1, [pc, #64]	; (7454 <QSPI_N25Q256_PORT_init+0xd8>)
    7412:	200b      	movs	r0, #11
    7414:	4b0a      	ldr	r3, [pc, #40]	; (7440 <QSPI_N25Q256_PORT_init+0xc4>)
    7416:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    7418:	2101      	movs	r1, #1
    741a:	202a      	movs	r0, #42	; 0x2a
    741c:	4b05      	ldr	r3, [pc, #20]	; (7434 <QSPI_N25Q256_PORT_init+0xb8>)
    741e:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    7420:	2100      	movs	r1, #0
    7422:	202a      	movs	r0, #42	; 0x2a
    7424:	4b04      	ldr	r3, [pc, #16]	; (7438 <QSPI_N25Q256_PORT_init+0xbc>)
    7426:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    7428:	490b      	ldr	r1, [pc, #44]	; (7458 <QSPI_N25Q256_PORT_init+0xdc>)
    742a:	202a      	movs	r0, #42	; 0x2a
    742c:	4b04      	ldr	r3, [pc, #16]	; (7440 <QSPI_N25Q256_PORT_init+0xc4>)
    742e:	4798      	blx	r3
}
    7430:	bf00      	nop
    7432:	bd80      	pop	{r7, pc}
    7434:	000071ad 	.word	0x000071ad
    7438:	00007159 	.word	0x00007159
    743c:	002b0007 	.word	0x002b0007
    7440:	0000718d 	.word	0x0000718d
    7444:	000071e5 	.word	0x000071e5
    7448:	00080007 	.word	0x00080007
    744c:	00090007 	.word	0x00090007
    7450:	000a0007 	.word	0x000a0007
    7454:	000b0007 	.word	0x000b0007
    7458:	002a0007 	.word	0x002a0007

0000745c <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    745c:	b580      	push	{r7, lr}
    745e:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    7460:	4805      	ldr	r0, [pc, #20]	; (7478 <QSPI_N25Q256_CLOCK_init+0x1c>)
    7462:	4b06      	ldr	r3, [pc, #24]	; (747c <QSPI_N25Q256_CLOCK_init+0x20>)
    7464:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    7466:	4804      	ldr	r0, [pc, #16]	; (7478 <QSPI_N25Q256_CLOCK_init+0x1c>)
    7468:	4b05      	ldr	r3, [pc, #20]	; (7480 <QSPI_N25Q256_CLOCK_init+0x24>)
    746a:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    746c:	4802      	ldr	r0, [pc, #8]	; (7478 <QSPI_N25Q256_CLOCK_init+0x1c>)
    746e:	4b05      	ldr	r3, [pc, #20]	; (7484 <QSPI_N25Q256_CLOCK_init+0x28>)
    7470:	4798      	blx	r3
}
    7472:	bf00      	nop
    7474:	bd80      	pop	{r7, pc}
    7476:	bf00      	nop
    7478:	40000800 	.word	0x40000800
    747c:	00006a1f 	.word	0x00006a1f
    7480:	00006a5f 	.word	0x00006a5f
    7484:	00006bbf 	.word	0x00006bbf

00007488 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    7488:	b580      	push	{r7, lr}
    748a:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    748c:	4b04      	ldr	r3, [pc, #16]	; (74a0 <QSPI_N25Q256_init+0x18>)
    748e:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    7490:	4904      	ldr	r1, [pc, #16]	; (74a4 <QSPI_N25Q256_init+0x1c>)
    7492:	4805      	ldr	r0, [pc, #20]	; (74a8 <QSPI_N25Q256_init+0x20>)
    7494:	4b05      	ldr	r3, [pc, #20]	; (74ac <QSPI_N25Q256_init+0x24>)
    7496:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    7498:	4b05      	ldr	r3, [pc, #20]	; (74b0 <QSPI_N25Q256_init+0x28>)
    749a:	4798      	blx	r3
}
    749c:	bf00      	nop
    749e:	bd80      	pop	{r7, pc}
    74a0:	0000745d 	.word	0x0000745d
    74a4:	42003400 	.word	0x42003400
    74a8:	20001ab8 	.word	0x20001ab8
    74ac:	00008375 	.word	0x00008375
    74b0:	0000737d 	.word	0x0000737d

000074b4 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    74b4:	b580      	push	{r7, lr}
    74b6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    74b8:	4802      	ldr	r0, [pc, #8]	; (74c4 <DATETIME_CLOCK_CLOCK_init+0x10>)
    74ba:	4b03      	ldr	r3, [pc, #12]	; (74c8 <DATETIME_CLOCK_CLOCK_init+0x14>)
    74bc:	4798      	blx	r3
}
    74be:	bf00      	nop
    74c0:	bd80      	pop	{r7, pc}
    74c2:	bf00      	nop
    74c4:	40000800 	.word	0x40000800
    74c8:	00006a9f 	.word	0x00006a9f

000074cc <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    74cc:	b580      	push	{r7, lr}
    74ce:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    74d0:	4b03      	ldr	r3, [pc, #12]	; (74e0 <DATETIME_CLOCK_init+0x14>)
    74d2:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    74d4:	4903      	ldr	r1, [pc, #12]	; (74e4 <DATETIME_CLOCK_init+0x18>)
    74d6:	4804      	ldr	r0, [pc, #16]	; (74e8 <DATETIME_CLOCK_init+0x1c>)
    74d8:	4b04      	ldr	r3, [pc, #16]	; (74ec <DATETIME_CLOCK_init+0x20>)
    74da:	4798      	blx	r3
}
    74dc:	bf00      	nop
    74de:	bd80      	pop	{r7, pc}
    74e0:	000074b5 	.word	0x000074b5
    74e4:	40002400 	.word	0x40002400
    74e8:	20001bf0 	.word	0x20001bf0
    74ec:	00007c2d 	.word	0x00007c2d

000074f0 <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    74f0:	b580      	push	{r7, lr}
    74f2:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    74f4:	2100      	movs	r1, #0
    74f6:	203b      	movs	r0, #59	; 0x3b
    74f8:	4b11      	ldr	r3, [pc, #68]	; (7540 <SPI_TEMP_PORT_init+0x50>)
    74fa:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    74fc:	2102      	movs	r1, #2
    74fe:	203b      	movs	r0, #59	; 0x3b
    7500:	4b10      	ldr	r3, [pc, #64]	; (7544 <SPI_TEMP_PORT_init+0x54>)
    7502:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    7504:	4910      	ldr	r1, [pc, #64]	; (7548 <SPI_TEMP_PORT_init+0x58>)
    7506:	203b      	movs	r0, #59	; 0x3b
    7508:	4b10      	ldr	r3, [pc, #64]	; (754c <SPI_TEMP_PORT_init+0x5c>)
    750a:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    750c:	2100      	movs	r1, #0
    750e:	203a      	movs	r0, #58	; 0x3a
    7510:	4b0b      	ldr	r3, [pc, #44]	; (7540 <SPI_TEMP_PORT_init+0x50>)
    7512:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    7514:	2102      	movs	r1, #2
    7516:	203a      	movs	r0, #58	; 0x3a
    7518:	4b0a      	ldr	r3, [pc, #40]	; (7544 <SPI_TEMP_PORT_init+0x54>)
    751a:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    751c:	490c      	ldr	r1, [pc, #48]	; (7550 <SPI_TEMP_PORT_init+0x60>)
    751e:	203a      	movs	r0, #58	; 0x3a
    7520:	4b0a      	ldr	r3, [pc, #40]	; (754c <SPI_TEMP_PORT_init+0x5c>)
    7522:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    7524:	2101      	movs	r1, #1
    7526:	203c      	movs	r0, #60	; 0x3c
    7528:	4b06      	ldr	r3, [pc, #24]	; (7544 <SPI_TEMP_PORT_init+0x54>)
    752a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    752c:	2100      	movs	r1, #0
    752e:	203c      	movs	r0, #60	; 0x3c
    7530:	4b08      	ldr	r3, [pc, #32]	; (7554 <SPI_TEMP_PORT_init+0x64>)
    7532:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    7534:	4908      	ldr	r1, [pc, #32]	; (7558 <SPI_TEMP_PORT_init+0x68>)
    7536:	203c      	movs	r0, #60	; 0x3c
    7538:	4b04      	ldr	r3, [pc, #16]	; (754c <SPI_TEMP_PORT_init+0x5c>)
    753a:	4798      	blx	r3
}
    753c:	bf00      	nop
    753e:	bd80      	pop	{r7, pc}
    7540:	000071e5 	.word	0x000071e5
    7544:	000071ad 	.word	0x000071ad
    7548:	003b0003 	.word	0x003b0003
    754c:	0000718d 	.word	0x0000718d
    7550:	003a0003 	.word	0x003a0003
    7554:	00007159 	.word	0x00007159
    7558:	003c0003 	.word	0x003c0003

0000755c <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    755c:	b580      	push	{r7, lr}
    755e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    7560:	2243      	movs	r2, #67	; 0x43
    7562:	2122      	movs	r1, #34	; 0x22
    7564:	4806      	ldr	r0, [pc, #24]	; (7580 <SPI_TEMP_CLOCK_init+0x24>)
    7566:	4b07      	ldr	r3, [pc, #28]	; (7584 <SPI_TEMP_CLOCK_init+0x28>)
    7568:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    756a:	224a      	movs	r2, #74	; 0x4a
    756c:	2103      	movs	r1, #3
    756e:	4804      	ldr	r0, [pc, #16]	; (7580 <SPI_TEMP_CLOCK_init+0x24>)
    7570:	4b04      	ldr	r3, [pc, #16]	; (7584 <SPI_TEMP_CLOCK_init+0x28>)
    7572:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    7574:	4804      	ldr	r0, [pc, #16]	; (7588 <SPI_TEMP_CLOCK_init+0x2c>)
    7576:	4b05      	ldr	r3, [pc, #20]	; (758c <SPI_TEMP_CLOCK_init+0x30>)
    7578:	4798      	blx	r3
}
    757a:	bf00      	nop
    757c:	bd80      	pop	{r7, pc}
    757e:	bf00      	nop
    7580:	40001c00 	.word	0x40001c00
    7584:	000069d9 	.word	0x000069d9
    7588:	40000800 	.word	0x40000800
    758c:	00006bdf 	.word	0x00006bdf

00007590 <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    7590:	b580      	push	{r7, lr}
    7592:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    7594:	4b05      	ldr	r3, [pc, #20]	; (75ac <SPI_TEMP_init+0x1c>)
    7596:	4798      	blx	r3
	spi_m_async_init(&SPI_TEMP, SERCOM4);
    7598:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    759c:	4804      	ldr	r0, [pc, #16]	; (75b0 <SPI_TEMP_init+0x20>)
    759e:	4b05      	ldr	r3, [pc, #20]	; (75b4 <SPI_TEMP_init+0x24>)
    75a0:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    75a2:	4b05      	ldr	r3, [pc, #20]	; (75b8 <SPI_TEMP_init+0x28>)
    75a4:	4798      	blx	r3
}
    75a6:	bf00      	nop
    75a8:	bd80      	pop	{r7, pc}
    75aa:	bf00      	nop
    75ac:	0000755d 	.word	0x0000755d
    75b0:	20001a70 	.word	0x20001a70
    75b4:	0000869d 	.word	0x0000869d
    75b8:	000074f1 	.word	0x000074f1

000075bc <I2C_EXPANDER_PORT_init>:

void I2C_EXPANDER_PORT_init(void)
{
    75bc:	b580      	push	{r7, lr}
    75be:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    75c0:	2100      	movs	r1, #0
    75c2:	2017      	movs	r0, #23
    75c4:	4b07      	ldr	r3, [pc, #28]	; (75e4 <I2C_EXPANDER_PORT_init+0x28>)
    75c6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    75c8:	4907      	ldr	r1, [pc, #28]	; (75e8 <I2C_EXPANDER_PORT_init+0x2c>)
    75ca:	2017      	movs	r0, #23
    75cc:	4b07      	ldr	r3, [pc, #28]	; (75ec <I2C_EXPANDER_PORT_init+0x30>)
    75ce:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    75d0:	2100      	movs	r1, #0
    75d2:	2016      	movs	r0, #22
    75d4:	4b03      	ldr	r3, [pc, #12]	; (75e4 <I2C_EXPANDER_PORT_init+0x28>)
    75d6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    75d8:	4905      	ldr	r1, [pc, #20]	; (75f0 <I2C_EXPANDER_PORT_init+0x34>)
    75da:	2016      	movs	r0, #22
    75dc:	4b03      	ldr	r3, [pc, #12]	; (75ec <I2C_EXPANDER_PORT_init+0x30>)
    75de:	4798      	blx	r3
}
    75e0:	bf00      	nop
    75e2:	bd80      	pop	{r7, pc}
    75e4:	00007159 	.word	0x00007159
    75e8:	00170003 	.word	0x00170003
    75ec:	0000718d 	.word	0x0000718d
    75f0:	00160003 	.word	0x00160003

000075f4 <I2C_EXPANDER_CLOCK_init>:

void I2C_EXPANDER_CLOCK_init(void)
{
    75f4:	b580      	push	{r7, lr}
    75f6:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    75f8:	2243      	movs	r2, #67	; 0x43
    75fa:	2123      	movs	r1, #35	; 0x23
    75fc:	4806      	ldr	r0, [pc, #24]	; (7618 <I2C_EXPANDER_CLOCK_init+0x24>)
    75fe:	4b07      	ldr	r3, [pc, #28]	; (761c <I2C_EXPANDER_CLOCK_init+0x28>)
    7600:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    7602:	224a      	movs	r2, #74	; 0x4a
    7604:	2103      	movs	r1, #3
    7606:	4804      	ldr	r0, [pc, #16]	; (7618 <I2C_EXPANDER_CLOCK_init+0x24>)
    7608:	4b04      	ldr	r3, [pc, #16]	; (761c <I2C_EXPANDER_CLOCK_init+0x28>)
    760a:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    760c:	4804      	ldr	r0, [pc, #16]	; (7620 <I2C_EXPANDER_CLOCK_init+0x2c>)
    760e:	4b05      	ldr	r3, [pc, #20]	; (7624 <I2C_EXPANDER_CLOCK_init+0x30>)
    7610:	4798      	blx	r3
}
    7612:	bf00      	nop
    7614:	bd80      	pop	{r7, pc}
    7616:	bf00      	nop
    7618:	40001c00 	.word	0x40001c00
    761c:	000069d9 	.word	0x000069d9
    7620:	40000800 	.word	0x40000800
    7624:	00006bff 	.word	0x00006bff

00007628 <I2C_EXPANDER_init>:

void I2C_EXPANDER_init(void)
{
    7628:	b580      	push	{r7, lr}
    762a:	af00      	add	r7, sp, #0
	I2C_EXPANDER_CLOCK_init();
    762c:	4b04      	ldr	r3, [pc, #16]	; (7640 <I2C_EXPANDER_init+0x18>)
    762e:	4798      	blx	r3
	i2c_m_async_init(&I2C_EXPANDER, SERCOM5);
    7630:	4904      	ldr	r1, [pc, #16]	; (7644 <I2C_EXPANDER_init+0x1c>)
    7632:	4805      	ldr	r0, [pc, #20]	; (7648 <I2C_EXPANDER_init+0x20>)
    7634:	4b05      	ldr	r3, [pc, #20]	; (764c <I2C_EXPANDER_init+0x24>)
    7636:	4798      	blx	r3
	I2C_EXPANDER_PORT_init();
    7638:	4b05      	ldr	r3, [pc, #20]	; (7650 <I2C_EXPANDER_init+0x28>)
    763a:	4798      	blx	r3
}
    763c:	bf00      	nop
    763e:	bd80      	pop	{r7, pc}
    7640:	000075f5 	.word	0x000075f5
    7644:	43000400 	.word	0x43000400
    7648:	20001b54 	.word	0x20001b54
    764c:	00008235 	.word	0x00008235
    7650:	000075bd 	.word	0x000075bd

00007654 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    7654:	b580      	push	{r7, lr}
    7656:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    7658:	2100      	movs	r1, #0
    765a:	2044      	movs	r0, #68	; 0x44
    765c:	4b11      	ldr	r3, [pc, #68]	; (76a4 <SPI_HI3593_PORT_init+0x50>)
    765e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    7660:	2102      	movs	r1, #2
    7662:	2044      	movs	r0, #68	; 0x44
    7664:	4b10      	ldr	r3, [pc, #64]	; (76a8 <SPI_HI3593_PORT_init+0x54>)
    7666:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    7668:	4910      	ldr	r1, [pc, #64]	; (76ac <SPI_HI3593_PORT_init+0x58>)
    766a:	2044      	movs	r0, #68	; 0x44
    766c:	4b10      	ldr	r3, [pc, #64]	; (76b0 <SPI_HI3593_PORT_init+0x5c>)
    766e:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    7670:	2100      	movs	r1, #0
    7672:	2045      	movs	r0, #69	; 0x45
    7674:	4b0b      	ldr	r3, [pc, #44]	; (76a4 <SPI_HI3593_PORT_init+0x50>)
    7676:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    7678:	2102      	movs	r1, #2
    767a:	2045      	movs	r0, #69	; 0x45
    767c:	4b0a      	ldr	r3, [pc, #40]	; (76a8 <SPI_HI3593_PORT_init+0x54>)
    767e:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    7680:	490c      	ldr	r1, [pc, #48]	; (76b4 <SPI_HI3593_PORT_init+0x60>)
    7682:	2045      	movs	r0, #69	; 0x45
    7684:	4b0a      	ldr	r3, [pc, #40]	; (76b0 <SPI_HI3593_PORT_init+0x5c>)
    7686:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    7688:	2101      	movs	r1, #1
    768a:	2047      	movs	r0, #71	; 0x47
    768c:	4b06      	ldr	r3, [pc, #24]	; (76a8 <SPI_HI3593_PORT_init+0x54>)
    768e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    7690:	2100      	movs	r1, #0
    7692:	2047      	movs	r0, #71	; 0x47
    7694:	4b08      	ldr	r3, [pc, #32]	; (76b8 <SPI_HI3593_PORT_init+0x64>)
    7696:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    7698:	4908      	ldr	r1, [pc, #32]	; (76bc <SPI_HI3593_PORT_init+0x68>)
    769a:	2047      	movs	r0, #71	; 0x47
    769c:	4b04      	ldr	r3, [pc, #16]	; (76b0 <SPI_HI3593_PORT_init+0x5c>)
    769e:	4798      	blx	r3
}
    76a0:	bf00      	nop
    76a2:	bd80      	pop	{r7, pc}
    76a4:	000071e5 	.word	0x000071e5
    76a8:	000071ad 	.word	0x000071ad
    76ac:	00440002 	.word	0x00440002
    76b0:	0000718d 	.word	0x0000718d
    76b4:	00450002 	.word	0x00450002
    76b8:	00007159 	.word	0x00007159
    76bc:	00470002 	.word	0x00470002

000076c0 <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    76c0:	b580      	push	{r7, lr}
    76c2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    76c4:	2243      	movs	r2, #67	; 0x43
    76c6:	2124      	movs	r1, #36	; 0x24
    76c8:	4806      	ldr	r0, [pc, #24]	; (76e4 <SPI_HI3593_CLOCK_init+0x24>)
    76ca:	4b07      	ldr	r3, [pc, #28]	; (76e8 <SPI_HI3593_CLOCK_init+0x28>)
    76cc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    76ce:	224a      	movs	r2, #74	; 0x4a
    76d0:	2103      	movs	r1, #3
    76d2:	4804      	ldr	r0, [pc, #16]	; (76e4 <SPI_HI3593_CLOCK_init+0x24>)
    76d4:	4b04      	ldr	r3, [pc, #16]	; (76e8 <SPI_HI3593_CLOCK_init+0x28>)
    76d6:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    76d8:	4804      	ldr	r0, [pc, #16]	; (76ec <SPI_HI3593_CLOCK_init+0x2c>)
    76da:	4b05      	ldr	r3, [pc, #20]	; (76f0 <SPI_HI3593_CLOCK_init+0x30>)
    76dc:	4798      	blx	r3
}
    76de:	bf00      	nop
    76e0:	bd80      	pop	{r7, pc}
    76e2:	bf00      	nop
    76e4:	40001c00 	.word	0x40001c00
    76e8:	000069d9 	.word	0x000069d9
    76ec:	40000800 	.word	0x40000800
    76f0:	00006c1f 	.word	0x00006c1f

000076f4 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    76f4:	b580      	push	{r7, lr}
    76f6:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    76f8:	4b04      	ldr	r3, [pc, #16]	; (770c <SPI_HI3593_init+0x18>)
    76fa:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    76fc:	4904      	ldr	r1, [pc, #16]	; (7710 <SPI_HI3593_init+0x1c>)
    76fe:	4805      	ldr	r0, [pc, #20]	; (7714 <SPI_HI3593_init+0x20>)
    7700:	4b05      	ldr	r3, [pc, #20]	; (7718 <SPI_HI3593_init+0x24>)
    7702:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    7704:	4b05      	ldr	r3, [pc, #20]	; (771c <SPI_HI3593_init+0x28>)
    7706:	4798      	blx	r3
}
    7708:	bf00      	nop
    770a:	bd80      	pop	{r7, pc}
    770c:	000076c1 	.word	0x000076c1
    7710:	43000800 	.word	0x43000800
    7714:	20001a58 	.word	0x20001a58
    7718:	00008851 	.word	0x00008851
    771c:	00007655 	.word	0x00007655

00007720 <I2C_EEPROM_PORT_init>:

void I2C_EEPROM_PORT_init(void)
{
    7720:	b580      	push	{r7, lr}
    7722:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    7724:	2100      	movs	r1, #0
    7726:	2068      	movs	r0, #104	; 0x68
    7728:	4b07      	ldr	r3, [pc, #28]	; (7748 <I2C_EEPROM_PORT_init+0x28>)
    772a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    772c:	4907      	ldr	r1, [pc, #28]	; (774c <I2C_EEPROM_PORT_init+0x2c>)
    772e:	2068      	movs	r0, #104	; 0x68
    7730:	4b07      	ldr	r3, [pc, #28]	; (7750 <I2C_EEPROM_PORT_init+0x30>)
    7732:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    7734:	2100      	movs	r1, #0
    7736:	2069      	movs	r0, #105	; 0x69
    7738:	4b03      	ldr	r3, [pc, #12]	; (7748 <I2C_EEPROM_PORT_init+0x28>)
    773a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    773c:	4905      	ldr	r1, [pc, #20]	; (7754 <I2C_EEPROM_PORT_init+0x34>)
    773e:	2069      	movs	r0, #105	; 0x69
    7740:	4b03      	ldr	r3, [pc, #12]	; (7750 <I2C_EEPROM_PORT_init+0x30>)
    7742:	4798      	blx	r3
}
    7744:	bf00      	nop
    7746:	bd80      	pop	{r7, pc}
    7748:	00007159 	.word	0x00007159
    774c:	00680002 	.word	0x00680002
    7750:	0000718d 	.word	0x0000718d
    7754:	00690002 	.word	0x00690002

00007758 <I2C_EEPROM_CLOCK_init>:

void I2C_EEPROM_CLOCK_init(void)
{
    7758:	b580      	push	{r7, lr}
    775a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    775c:	2242      	movs	r2, #66	; 0x42
    775e:	2125      	movs	r1, #37	; 0x25
    7760:	4806      	ldr	r0, [pc, #24]	; (777c <I2C_EEPROM_CLOCK_init+0x24>)
    7762:	4b07      	ldr	r3, [pc, #28]	; (7780 <I2C_EEPROM_CLOCK_init+0x28>)
    7764:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    7766:	224a      	movs	r2, #74	; 0x4a
    7768:	2103      	movs	r1, #3
    776a:	4804      	ldr	r0, [pc, #16]	; (777c <I2C_EEPROM_CLOCK_init+0x24>)
    776c:	4b04      	ldr	r3, [pc, #16]	; (7780 <I2C_EEPROM_CLOCK_init+0x28>)
    776e:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    7770:	4804      	ldr	r0, [pc, #16]	; (7784 <I2C_EEPROM_CLOCK_init+0x2c>)
    7772:	4b05      	ldr	r3, [pc, #20]	; (7788 <I2C_EEPROM_CLOCK_init+0x30>)
    7774:	4798      	blx	r3
}
    7776:	bf00      	nop
    7778:	bd80      	pop	{r7, pc}
    777a:	bf00      	nop
    777c:	40001c00 	.word	0x40001c00
    7780:	000069d9 	.word	0x000069d9
    7784:	40000800 	.word	0x40000800
    7788:	00006c3f 	.word	0x00006c3f

0000778c <I2C_EEPROM_init>:

void I2C_EEPROM_init(void)
{
    778c:	b580      	push	{r7, lr}
    778e:	af00      	add	r7, sp, #0
	I2C_EEPROM_CLOCK_init();
    7790:	4b04      	ldr	r3, [pc, #16]	; (77a4 <I2C_EEPROM_init+0x18>)
    7792:	4798      	blx	r3
	i2c_m_async_init(&I2C_EEPROM, SERCOM7);
    7794:	4904      	ldr	r1, [pc, #16]	; (77a8 <I2C_EEPROM_init+0x1c>)
    7796:	4805      	ldr	r0, [pc, #20]	; (77ac <I2C_EEPROM_init+0x20>)
    7798:	4b05      	ldr	r3, [pc, #20]	; (77b0 <I2C_EEPROM_init+0x24>)
    779a:	4798      	blx	r3
	I2C_EEPROM_PORT_init();
    779c:	4b05      	ldr	r3, [pc, #20]	; (77b4 <I2C_EEPROM_init+0x28>)
    779e:	4798      	blx	r3
}
    77a0:	bf00      	nop
    77a2:	bd80      	pop	{r7, pc}
    77a4:	00007759 	.word	0x00007759
    77a8:	43000c00 	.word	0x43000c00
    77ac:	20001bb0 	.word	0x20001bb0
    77b0:	00008235 	.word	0x00008235
    77b4:	00007721 	.word	0x00007721

000077b8 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    77b8:	b580      	push	{r7, lr}
    77ba:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    77bc:	4808      	ldr	r0, [pc, #32]	; (77e0 <TIMER_INTERFACE_init+0x28>)
    77be:	4b09      	ldr	r3, [pc, #36]	; (77e4 <TIMER_INTERFACE_init+0x2c>)
    77c0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    77c2:	2243      	movs	r2, #67	; 0x43
    77c4:	2109      	movs	r1, #9
    77c6:	4808      	ldr	r0, [pc, #32]	; (77e8 <TIMER_INTERFACE_init+0x30>)
    77c8:	4b08      	ldr	r3, [pc, #32]	; (77ec <TIMER_INTERFACE_init+0x34>)
    77ca:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC0, _tc_get_timer());
    77cc:	4b08      	ldr	r3, [pc, #32]	; (77f0 <TIMER_INTERFACE_init+0x38>)
    77ce:	4798      	blx	r3
    77d0:	4603      	mov	r3, r0
    77d2:	461a      	mov	r2, r3
    77d4:	4907      	ldr	r1, [pc, #28]	; (77f4 <TIMER_INTERFACE_init+0x3c>)
    77d6:	4808      	ldr	r0, [pc, #32]	; (77f8 <TIMER_INTERFACE_init+0x40>)
    77d8:	4b08      	ldr	r3, [pc, #32]	; (77fc <TIMER_INTERFACE_init+0x44>)
    77da:	4798      	blx	r3
}
    77dc:	bf00      	nop
    77de:	bd80      	pop	{r7, pc}
    77e0:	40000800 	.word	0x40000800
    77e4:	00006adf 	.word	0x00006adf
    77e8:	40001c00 	.word	0x40001c00
    77ec:	000069d9 	.word	0x000069d9
    77f0:	0000df55 	.word	0x0000df55
    77f4:	40003800 	.word	0x40003800
    77f8:	20001ad8 	.word	0x20001ad8
    77fc:	00008a21 	.word	0x00008a21

00007800 <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    7800:	b580      	push	{r7, lr}
    7802:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
    7804:	4808      	ldr	r0, [pc, #32]	; (7828 <TIMER_EVENT_init+0x28>)
    7806:	4b09      	ldr	r3, [pc, #36]	; (782c <TIMER_EVENT_init+0x2c>)
    7808:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    780a:	2245      	movs	r2, #69	; 0x45
    780c:	2109      	movs	r1, #9
    780e:	4808      	ldr	r0, [pc, #32]	; (7830 <TIMER_EVENT_init+0x30>)
    7810:	4b08      	ldr	r3, [pc, #32]	; (7834 <TIMER_EVENT_init+0x34>)
    7812:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC1, _tc_get_timer());
    7814:	4b08      	ldr	r3, [pc, #32]	; (7838 <TIMER_EVENT_init+0x38>)
    7816:	4798      	blx	r3
    7818:	4603      	mov	r3, r0
    781a:	461a      	mov	r2, r3
    781c:	4907      	ldr	r1, [pc, #28]	; (783c <TIMER_EVENT_init+0x3c>)
    781e:	4808      	ldr	r0, [pc, #32]	; (7840 <TIMER_EVENT_init+0x40>)
    7820:	4b08      	ldr	r3, [pc, #32]	; (7844 <TIMER_EVENT_init+0x44>)
    7822:	4798      	blx	r3
}
    7824:	bf00      	nop
    7826:	bd80      	pop	{r7, pc}
    7828:	40000800 	.word	0x40000800
    782c:	00006aff 	.word	0x00006aff
    7830:	40001c00 	.word	0x40001c00
    7834:	000069d9 	.word	0x000069d9
    7838:	0000df55 	.word	0x0000df55
    783c:	40003c00 	.word	0x40003c00
    7840:	20001abc 	.word	0x20001abc
    7844:	00008a21 	.word	0x00008a21

00007848 <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    7848:	b580      	push	{r7, lr}
    784a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    784c:	4808      	ldr	r0, [pc, #32]	; (7870 <TIMER_ARINC_init+0x28>)
    784e:	4b09      	ldr	r3, [pc, #36]	; (7874 <TIMER_ARINC_init+0x2c>)
    7850:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    7852:	2244      	movs	r2, #68	; 0x44
    7854:	211a      	movs	r1, #26
    7856:	4808      	ldr	r0, [pc, #32]	; (7878 <TIMER_ARINC_init+0x30>)
    7858:	4b08      	ldr	r3, [pc, #32]	; (787c <TIMER_ARINC_init+0x34>)
    785a:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    785c:	4b08      	ldr	r3, [pc, #32]	; (7880 <TIMER_ARINC_init+0x38>)
    785e:	4798      	blx	r3
    7860:	4603      	mov	r3, r0
    7862:	461a      	mov	r2, r3
    7864:	4907      	ldr	r1, [pc, #28]	; (7884 <TIMER_ARINC_init+0x3c>)
    7866:	4808      	ldr	r0, [pc, #32]	; (7888 <TIMER_ARINC_init+0x40>)
    7868:	4b08      	ldr	r3, [pc, #32]	; (788c <TIMER_ARINC_init+0x44>)
    786a:	4798      	blx	r3
}
    786c:	bf00      	nop
    786e:	bd80      	pop	{r7, pc}
    7870:	40000800 	.word	0x40000800
    7874:	00006b7f 	.word	0x00006b7f
    7878:	40001c00 	.word	0x40001c00
    787c:	000069d9 	.word	0x000069d9
    7880:	0000df55 	.word	0x0000df55
    7884:	4101a000 	.word	0x4101a000
    7888:	20001b38 	.word	0x20001b38
    788c:	00008a21 	.word	0x00008a21

00007890 <TIMER_HVAC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_HVAC_init(void)
{
    7890:	b580      	push	{r7, lr}
    7892:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC3_bit(MCLK);
    7894:	4808      	ldr	r0, [pc, #32]	; (78b8 <TIMER_HVAC_init+0x28>)
    7896:	4b09      	ldr	r3, [pc, #36]	; (78bc <TIMER_HVAC_init+0x2c>)
    7898:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC3_GCLK_ID, CONF_GCLK_TC3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    789a:	2245      	movs	r2, #69	; 0x45
    789c:	211a      	movs	r1, #26
    789e:	4808      	ldr	r0, [pc, #32]	; (78c0 <TIMER_HVAC_init+0x30>)
    78a0:	4b08      	ldr	r3, [pc, #32]	; (78c4 <TIMER_HVAC_init+0x34>)
    78a2:	4798      	blx	r3

	timer_init(&TIMER_HVAC, TC3, _tc_get_timer());
    78a4:	4b08      	ldr	r3, [pc, #32]	; (78c8 <TIMER_HVAC_init+0x38>)
    78a6:	4798      	blx	r3
    78a8:	4603      	mov	r3, r0
    78aa:	461a      	mov	r2, r3
    78ac:	4907      	ldr	r1, [pc, #28]	; (78cc <TIMER_HVAC_init+0x3c>)
    78ae:	4808      	ldr	r0, [pc, #32]	; (78d0 <TIMER_HVAC_init+0x40>)
    78b0:	4b08      	ldr	r3, [pc, #32]	; (78d4 <TIMER_HVAC_init+0x44>)
    78b2:	4798      	blx	r3
}
    78b4:	bf00      	nop
    78b6:	bd80      	pop	{r7, pc}
    78b8:	40000800 	.word	0x40000800
    78bc:	00006b9f 	.word	0x00006b9f
    78c0:	40001c00 	.word	0x40001c00
    78c4:	000069d9 	.word	0x000069d9
    78c8:	0000df55 	.word	0x0000df55
    78cc:	4101c000 	.word	0x4101c000
    78d0:	20001b94 	.word	0x20001b94
    78d4:	00008a21 	.word	0x00008a21

000078d8 <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    78d8:	b580      	push	{r7, lr}
    78da:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB00, PINMUX_PB00E_TC7_WO0);
    78dc:	4904      	ldr	r1, [pc, #16]	; (78f0 <LIVE_PULSE_PORT_init+0x18>)
    78de:	2020      	movs	r0, #32
    78e0:	4b04      	ldr	r3, [pc, #16]	; (78f4 <LIVE_PULSE_PORT_init+0x1c>)
    78e2:	4798      	blx	r3

	gpio_set_pin_function(PB01, PINMUX_PB01E_TC7_WO1);
    78e4:	4904      	ldr	r1, [pc, #16]	; (78f8 <LIVE_PULSE_PORT_init+0x20>)
    78e6:	2021      	movs	r0, #33	; 0x21
    78e8:	4b02      	ldr	r3, [pc, #8]	; (78f4 <LIVE_PULSE_PORT_init+0x1c>)
    78ea:	4798      	blx	r3
}
    78ec:	bf00      	nop
    78ee:	bd80      	pop	{r7, pc}
    78f0:	00200004 	.word	0x00200004
    78f4:	0000718d 	.word	0x0000718d
    78f8:	00210004 	.word	0x00210004

000078fc <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    78fc:	b580      	push	{r7, lr}
    78fe:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    7900:	4804      	ldr	r0, [pc, #16]	; (7914 <LIVE_PULSE_CLOCK_init+0x18>)
    7902:	4b05      	ldr	r3, [pc, #20]	; (7918 <LIVE_PULSE_CLOCK_init+0x1c>)
    7904:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    7906:	224b      	movs	r2, #75	; 0x4b
    7908:	2127      	movs	r1, #39	; 0x27
    790a:	4804      	ldr	r0, [pc, #16]	; (791c <LIVE_PULSE_CLOCK_init+0x20>)
    790c:	4b04      	ldr	r3, [pc, #16]	; (7920 <LIVE_PULSE_CLOCK_init+0x24>)
    790e:	4798      	blx	r3
}
    7910:	bf00      	nop
    7912:	bd80      	pop	{r7, pc}
    7914:	40000800 	.word	0x40000800
    7918:	00006c5f 	.word	0x00006c5f
    791c:	40001c00 	.word	0x40001c00
    7920:	000069d9 	.word	0x000069d9

00007924 <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    7924:	b580      	push	{r7, lr}
    7926:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    7928:	4b06      	ldr	r3, [pc, #24]	; (7944 <LIVE_PULSE_init+0x20>)
    792a:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    792c:	4b06      	ldr	r3, [pc, #24]	; (7948 <LIVE_PULSE_init+0x24>)
    792e:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    7930:	4b06      	ldr	r3, [pc, #24]	; (794c <LIVE_PULSE_init+0x28>)
    7932:	4798      	blx	r3
    7934:	4603      	mov	r3, r0
    7936:	461a      	mov	r2, r3
    7938:	4905      	ldr	r1, [pc, #20]	; (7950 <LIVE_PULSE_init+0x2c>)
    793a:	4806      	ldr	r0, [pc, #24]	; (7954 <LIVE_PULSE_init+0x30>)
    793c:	4b06      	ldr	r3, [pc, #24]	; (7958 <LIVE_PULSE_init+0x34>)
    793e:	4798      	blx	r3
}
    7940:	bf00      	nop
    7942:	bd80      	pop	{r7, pc}
    7944:	000078fd 	.word	0x000078fd
    7948:	000078d9 	.word	0x000078d9
    794c:	0000df65 	.word	0x0000df65
    7950:	43001800 	.word	0x43001800
    7954:	20001af4 	.word	0x20001af4
    7958:	000082c9 	.word	0x000082c9

0000795c <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    795c:	b580      	push	{r7, lr}
    795e:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    7960:	2102      	movs	r1, #2
    7962:	2018      	movs	r0, #24
    7964:	4b0f      	ldr	r3, [pc, #60]	; (79a4 <CDCUSB_PORT_init+0x48>)
    7966:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    7968:	2100      	movs	r1, #0
    796a:	2018      	movs	r0, #24
    796c:	4b0e      	ldr	r3, [pc, #56]	; (79a8 <CDCUSB_PORT_init+0x4c>)
    796e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    7970:	2100      	movs	r1, #0
    7972:	2018      	movs	r0, #24
    7974:	4b0d      	ldr	r3, [pc, #52]	; (79ac <CDCUSB_PORT_init+0x50>)
    7976:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    7978:	490d      	ldr	r1, [pc, #52]	; (79b0 <CDCUSB_PORT_init+0x54>)
    797a:	2018      	movs	r0, #24
    797c:	4b0d      	ldr	r3, [pc, #52]	; (79b4 <CDCUSB_PORT_init+0x58>)
    797e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    7980:	2102      	movs	r1, #2
    7982:	2019      	movs	r0, #25
    7984:	4b07      	ldr	r3, [pc, #28]	; (79a4 <CDCUSB_PORT_init+0x48>)
    7986:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    7988:	2100      	movs	r1, #0
    798a:	2019      	movs	r0, #25
    798c:	4b06      	ldr	r3, [pc, #24]	; (79a8 <CDCUSB_PORT_init+0x4c>)
    798e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    7990:	2100      	movs	r1, #0
    7992:	2019      	movs	r0, #25
    7994:	4b05      	ldr	r3, [pc, #20]	; (79ac <CDCUSB_PORT_init+0x50>)
    7996:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    7998:	4907      	ldr	r1, [pc, #28]	; (79b8 <CDCUSB_PORT_init+0x5c>)
    799a:	2019      	movs	r0, #25
    799c:	4b05      	ldr	r3, [pc, #20]	; (79b4 <CDCUSB_PORT_init+0x58>)
    799e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    79a0:	bf00      	nop
    79a2:	bd80      	pop	{r7, pc}
    79a4:	000071ad 	.word	0x000071ad
    79a8:	000071e5 	.word	0x000071e5
    79ac:	00007159 	.word	0x00007159
    79b0:	00180007 	.word	0x00180007
    79b4:	0000718d 	.word	0x0000718d
    79b8:	00190007 	.word	0x00190007

000079bc <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    79bc:	b580      	push	{r7, lr}
    79be:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    79c0:	2242      	movs	r2, #66	; 0x42
    79c2:	210a      	movs	r1, #10
    79c4:	4805      	ldr	r0, [pc, #20]	; (79dc <CDCUSB_CLOCK_init+0x20>)
    79c6:	4b06      	ldr	r3, [pc, #24]	; (79e0 <CDCUSB_CLOCK_init+0x24>)
    79c8:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    79ca:	4806      	ldr	r0, [pc, #24]	; (79e4 <CDCUSB_CLOCK_init+0x28>)
    79cc:	4b06      	ldr	r3, [pc, #24]	; (79e8 <CDCUSB_CLOCK_init+0x2c>)
    79ce:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    79d0:	4804      	ldr	r0, [pc, #16]	; (79e4 <CDCUSB_CLOCK_init+0x28>)
    79d2:	4b06      	ldr	r3, [pc, #24]	; (79ec <CDCUSB_CLOCK_init+0x30>)
    79d4:	4798      	blx	r3
}
    79d6:	bf00      	nop
    79d8:	bd80      	pop	{r7, pc}
    79da:	bf00      	nop
    79dc:	40001c00 	.word	0x40001c00
    79e0:	000069d9 	.word	0x000069d9
    79e4:	40000800 	.word	0x40000800
    79e8:	000069ff 	.word	0x000069ff
    79ec:	00006b1f 	.word	0x00006b1f

000079f0 <CDCUSB_init>:

void CDCUSB_init(void)
{
    79f0:	b580      	push	{r7, lr}
    79f2:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    79f4:	4b03      	ldr	r3, [pc, #12]	; (7a04 <CDCUSB_init+0x14>)
    79f6:	4798      	blx	r3
	usb_d_init();
    79f8:	4b03      	ldr	r3, [pc, #12]	; (7a08 <CDCUSB_init+0x18>)
    79fa:	4798      	blx	r3
	CDCUSB_PORT_init();
    79fc:	4b03      	ldr	r3, [pc, #12]	; (7a0c <CDCUSB_init+0x1c>)
    79fe:	4798      	blx	r3
}
    7a00:	bf00      	nop
    7a02:	bd80      	pop	{r7, pc}
    7a04:	000079bd 	.word	0x000079bd
    7a08:	00008f99 	.word	0x00008f99
    7a0c:	0000795d 	.word	0x0000795d

00007a10 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    7a10:	b580      	push	{r7, lr}
    7a12:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    7a14:	4802      	ldr	r0, [pc, #8]	; (7a20 <WATCHDOG_CLOCK_init+0x10>)
    7a16:	4b03      	ldr	r3, [pc, #12]	; (7a24 <WATCHDOG_CLOCK_init+0x14>)
    7a18:	4798      	blx	r3
}
    7a1a:	bf00      	nop
    7a1c:	bd80      	pop	{r7, pc}
    7a1e:	bf00      	nop
    7a20:	40000800 	.word	0x40000800
    7a24:	00006a7f 	.word	0x00006a7f

00007a28 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    7a28:	b580      	push	{r7, lr}
    7a2a:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    7a2c:	4b03      	ldr	r3, [pc, #12]	; (7a3c <WATCHDOG_init+0x14>)
    7a2e:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    7a30:	4903      	ldr	r1, [pc, #12]	; (7a40 <WATCHDOG_init+0x18>)
    7a32:	4804      	ldr	r0, [pc, #16]	; (7a44 <WATCHDOG_init+0x1c>)
    7a34:	4b04      	ldr	r3, [pc, #16]	; (7a48 <WATCHDOG_init+0x20>)
    7a36:	4798      	blx	r3
}
    7a38:	bf00      	nop
    7a3a:	bd80      	pop	{r7, pc}
    7a3c:	00007a11 	.word	0x00007a11
    7a40:	40002000 	.word	0x40002000
    7a44:	20001c10 	.word	0x20001c10
    7a48:	0000722d 	.word	0x0000722d

00007a4c <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    7a4c:	b580      	push	{r7, lr}
    7a4e:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    7a50:	4904      	ldr	r1, [pc, #16]	; (7a64 <CAN_CCU_PORT_init+0x18>)
    7a52:	202d      	movs	r0, #45	; 0x2d
    7a54:	4b04      	ldr	r3, [pc, #16]	; (7a68 <CAN_CCU_PORT_init+0x1c>)
    7a56:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    7a58:	4904      	ldr	r1, [pc, #16]	; (7a6c <CAN_CCU_PORT_init+0x20>)
    7a5a:	202c      	movs	r0, #44	; 0x2c
    7a5c:	4b02      	ldr	r3, [pc, #8]	; (7a68 <CAN_CCU_PORT_init+0x1c>)
    7a5e:	4798      	blx	r3
}
    7a60:	bf00      	nop
    7a62:	bd80      	pop	{r7, pc}
    7a64:	002d0007 	.word	0x002d0007
    7a68:	0000718d 	.word	0x0000718d
    7a6c:	002c0007 	.word	0x002c0007

00007a70 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    7a70:	b580      	push	{r7, lr}
    7a72:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    7a74:	4807      	ldr	r0, [pc, #28]	; (7a94 <CAN_CCU_init+0x24>)
    7a76:	4b08      	ldr	r3, [pc, #32]	; (7a98 <CAN_CCU_init+0x28>)
    7a78:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    7a7a:	2243      	movs	r2, #67	; 0x43
    7a7c:	211c      	movs	r1, #28
    7a7e:	4807      	ldr	r0, [pc, #28]	; (7a9c <CAN_CCU_init+0x2c>)
    7a80:	4b07      	ldr	r3, [pc, #28]	; (7aa0 <CAN_CCU_init+0x30>)
    7a82:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    7a84:	4907      	ldr	r1, [pc, #28]	; (7aa4 <CAN_CCU_init+0x34>)
    7a86:	4808      	ldr	r0, [pc, #32]	; (7aa8 <CAN_CCU_init+0x38>)
    7a88:	4b08      	ldr	r3, [pc, #32]	; (7aac <CAN_CCU_init+0x3c>)
    7a8a:	4798      	blx	r3
	CAN_CCU_PORT_init();
    7a8c:	4b08      	ldr	r3, [pc, #32]	; (7ab0 <CAN_CCU_init+0x40>)
    7a8e:	4798      	blx	r3
}
    7a90:	bf00      	nop
    7a92:	bd80      	pop	{r7, pc}
    7a94:	40000800 	.word	0x40000800
    7a98:	00006a3f 	.word	0x00006a3f
    7a9c:	40001c00 	.word	0x40001c00
    7aa0:	000069d9 	.word	0x000069d9
    7aa4:	42000400 	.word	0x42000400
    7aa8:	20001b10 	.word	0x20001b10
    7aac:	00007c9d 	.word	0x00007c9d
    7ab0:	00007a4d 	.word	0x00007a4d

00007ab4 <system_init>:

void system_init(void)
{
    7ab4:	b580      	push	{r7, lr}
    7ab6:	af00      	add	r7, sp, #0
	init_mcu();
    7ab8:	4b46      	ldr	r3, [pc, #280]	; (7bd4 <system_init+0x120>)
    7aba:	4798      	blx	r3

	// GPIO on PB07

	// Set pin direction to input
	gpio_set_pin_direction(INT_LTC2983, GPIO_DIRECTION_IN);
    7abc:	2101      	movs	r1, #1
    7abe:	2027      	movs	r0, #39	; 0x27
    7ac0:	4b45      	ldr	r3, [pc, #276]	; (7bd8 <system_init+0x124>)
    7ac2:	4798      	blx	r3

	gpio_set_pin_pull_mode(INT_LTC2983,
    7ac4:	2102      	movs	r1, #2
    7ac6:	2027      	movs	r0, #39	; 0x27
    7ac8:	4b44      	ldr	r3, [pc, #272]	; (7bdc <system_init+0x128>)
    7aca:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(INT_LTC2983, GPIO_PIN_FUNCTION_OFF);
    7acc:	f04f 31ff 	mov.w	r1, #4294967295
    7ad0:	2027      	movs	r0, #39	; 0x27
    7ad2:	4b43      	ldr	r3, [pc, #268]	; (7be0 <system_init+0x12c>)
    7ad4:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_SPI_LTC,
    7ad6:	2101      	movs	r1, #1
    7ad8:	203d      	movs	r0, #61	; 0x3d
    7ada:	4b42      	ldr	r3, [pc, #264]	; (7be4 <system_init+0x130>)
    7adc:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_SPI_LTC, GPIO_DIRECTION_OUT);
    7ade:	2102      	movs	r1, #2
    7ae0:	203d      	movs	r0, #61	; 0x3d
    7ae2:	4b3d      	ldr	r3, [pc, #244]	; (7bd8 <system_init+0x124>)
    7ae4:	4798      	blx	r3

	gpio_set_pin_function(CS_SPI_LTC, GPIO_PIN_FUNCTION_OFF);
    7ae6:	f04f 31ff 	mov.w	r1, #4294967295
    7aea:	203d      	movs	r0, #61	; 0x3d
    7aec:	4b3c      	ldr	r3, [pc, #240]	; (7be0 <system_init+0x12c>)
    7aee:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    7af0:	2101      	movs	r1, #1
    7af2:	203f      	movs	r0, #63	; 0x3f
    7af4:	4b38      	ldr	r3, [pc, #224]	; (7bd8 <system_init+0x124>)
    7af6:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    7af8:	2101      	movs	r1, #1
    7afa:	203f      	movs	r0, #63	; 0x3f
    7afc:	4b37      	ldr	r3, [pc, #220]	; (7bdc <system_init+0x128>)
    7afe:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    7b00:	f04f 31ff 	mov.w	r1, #4294967295
    7b04:	203f      	movs	r0, #63	; 0x3f
    7b06:	4b36      	ldr	r3, [pc, #216]	; (7be0 <system_init+0x12c>)
    7b08:	4798      	blx	r3

	// GPIO on PC00

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    7b0a:	2101      	movs	r1, #1
    7b0c:	2040      	movs	r0, #64	; 0x40
    7b0e:	4b32      	ldr	r3, [pc, #200]	; (7bd8 <system_init+0x124>)
    7b10:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    7b12:	2102      	movs	r1, #2
    7b14:	2040      	movs	r0, #64	; 0x40
    7b16:	4b31      	ldr	r3, [pc, #196]	; (7bdc <system_init+0x128>)
    7b18:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(VBUS_DETECTED, GPIO_PIN_FUNCTION_OFF);
    7b1a:	f04f 31ff 	mov.w	r1, #4294967295
    7b1e:	2040      	movs	r0, #64	; 0x40
    7b20:	4b2f      	ldr	r3, [pc, #188]	; (7be0 <system_init+0x12c>)
    7b22:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    7b24:	2100      	movs	r1, #0
    7b26:	204d      	movs	r0, #77	; 0x4d
    7b28:	4b2e      	ldr	r3, [pc, #184]	; (7be4 <system_init+0x130>)
    7b2a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    7b2c:	2102      	movs	r1, #2
    7b2e:	204d      	movs	r0, #77	; 0x4d
    7b30:	4b29      	ldr	r3, [pc, #164]	; (7bd8 <system_init+0x124>)
    7b32:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    7b34:	f04f 31ff 	mov.w	r1, #4294967295
    7b38:	204d      	movs	r0, #77	; 0x4d
    7b3a:	4b29      	ldr	r3, [pc, #164]	; (7be0 <system_init+0x12c>)
    7b3c:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    7b3e:	2101      	movs	r1, #1
    7b40:	204e      	movs	r0, #78	; 0x4e
    7b42:	4b28      	ldr	r3, [pc, #160]	; (7be4 <system_init+0x130>)
    7b44:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    7b46:	2102      	movs	r1, #2
    7b48:	204e      	movs	r0, #78	; 0x4e
    7b4a:	4b23      	ldr	r3, [pc, #140]	; (7bd8 <system_init+0x124>)
    7b4c:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    7b4e:	f04f 31ff 	mov.w	r1, #4294967295
    7b52:	204e      	movs	r0, #78	; 0x4e
    7b54:	4b22      	ldr	r3, [pc, #136]	; (7be0 <system_init+0x12c>)
    7b56:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    7b58:	2100      	movs	r1, #0
    7b5a:	204f      	movs	r0, #79	; 0x4f
    7b5c:	4b21      	ldr	r3, [pc, #132]	; (7be4 <system_init+0x130>)
    7b5e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    7b60:	2102      	movs	r1, #2
    7b62:	204f      	movs	r0, #79	; 0x4f
    7b64:	4b1c      	ldr	r3, [pc, #112]	; (7bd8 <system_init+0x124>)
    7b66:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    7b68:	f04f 31ff 	mov.w	r1, #4294967295
    7b6c:	204f      	movs	r0, #79	; 0x4f
    7b6e:	4b1c      	ldr	r3, [pc, #112]	; (7be0 <system_init+0x12c>)
    7b70:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    7b72:	2100      	movs	r1, #0
    7b74:	2052      	movs	r0, #82	; 0x52
    7b76:	4b1b      	ldr	r3, [pc, #108]	; (7be4 <system_init+0x130>)
    7b78:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    7b7a:	2102      	movs	r1, #2
    7b7c:	2052      	movs	r0, #82	; 0x52
    7b7e:	4b16      	ldr	r3, [pc, #88]	; (7bd8 <system_init+0x124>)
    7b80:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    7b82:	f04f 31ff 	mov.w	r1, #4294967295
    7b86:	2052      	movs	r0, #82	; 0x52
    7b88:	4b15      	ldr	r3, [pc, #84]	; (7be0 <system_init+0x12c>)
    7b8a:	4798      	blx	r3

	CRC_CALC_init();
    7b8c:	4b16      	ldr	r3, [pc, #88]	; (7be8 <system_init+0x134>)
    7b8e:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    7b90:	4b16      	ldr	r3, [pc, #88]	; (7bec <system_init+0x138>)
    7b92:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    7b94:	4b16      	ldr	r3, [pc, #88]	; (7bf0 <system_init+0x13c>)
    7b96:	4798      	blx	r3

	QSPI_N25Q256_init();
    7b98:	4b16      	ldr	r3, [pc, #88]	; (7bf4 <system_init+0x140>)
    7b9a:	4798      	blx	r3

	DATETIME_CLOCK_init();
    7b9c:	4b16      	ldr	r3, [pc, #88]	; (7bf8 <system_init+0x144>)
    7b9e:	4798      	blx	r3

	SPI_TEMP_init();
    7ba0:	4b16      	ldr	r3, [pc, #88]	; (7bfc <system_init+0x148>)
    7ba2:	4798      	blx	r3

	I2C_EXPANDER_init();
    7ba4:	4b16      	ldr	r3, [pc, #88]	; (7c00 <system_init+0x14c>)
    7ba6:	4798      	blx	r3

	SPI_HI3593_init();
    7ba8:	4b16      	ldr	r3, [pc, #88]	; (7c04 <system_init+0x150>)
    7baa:	4798      	blx	r3

	I2C_EEPROM_init();
    7bac:	4b16      	ldr	r3, [pc, #88]	; (7c08 <system_init+0x154>)
    7bae:	4798      	blx	r3

	TIMER_INTERFACE_init();
    7bb0:	4b16      	ldr	r3, [pc, #88]	; (7c0c <system_init+0x158>)
    7bb2:	4798      	blx	r3
	TIMER_EVENT_init();
    7bb4:	4b16      	ldr	r3, [pc, #88]	; (7c10 <system_init+0x15c>)
    7bb6:	4798      	blx	r3
	TIMER_ARINC_init();
    7bb8:	4b16      	ldr	r3, [pc, #88]	; (7c14 <system_init+0x160>)
    7bba:	4798      	blx	r3
	TIMER_HVAC_init();
    7bbc:	4b16      	ldr	r3, [pc, #88]	; (7c18 <system_init+0x164>)
    7bbe:	4798      	blx	r3
	LIVE_PULSE_init();
    7bc0:	4b16      	ldr	r3, [pc, #88]	; (7c1c <system_init+0x168>)
    7bc2:	4798      	blx	r3

	CDCUSB_init();
    7bc4:	4b16      	ldr	r3, [pc, #88]	; (7c20 <system_init+0x16c>)
    7bc6:	4798      	blx	r3

	WATCHDOG_init();
    7bc8:	4b16      	ldr	r3, [pc, #88]	; (7c24 <system_init+0x170>)
    7bca:	4798      	blx	r3
	CAN_CCU_init();
    7bcc:	4b16      	ldr	r3, [pc, #88]	; (7c28 <system_init+0x174>)
    7bce:	4798      	blx	r3
}
    7bd0:	bf00      	nop
    7bd2:	bd80      	pop	{r7, pc}
    7bd4:	0000721d 	.word	0x0000721d
    7bd8:	000071ad 	.word	0x000071ad
    7bdc:	00007159 	.word	0x00007159
    7be0:	0000718d 	.word	0x0000718d
    7be4:	000071e5 	.word	0x000071e5
    7be8:	0000727d 	.word	0x0000727d
    7bec:	000072a9 	.word	0x000072a9
    7bf0:	0000734d 	.word	0x0000734d
    7bf4:	00007489 	.word	0x00007489
    7bf8:	000074cd 	.word	0x000074cd
    7bfc:	00007591 	.word	0x00007591
    7c00:	00007629 	.word	0x00007629
    7c04:	000076f5 	.word	0x000076f5
    7c08:	0000778d 	.word	0x0000778d
    7c0c:	000077b9 	.word	0x000077b9
    7c10:	00007801 	.word	0x00007801
    7c14:	00007849 	.word	0x00007849
    7c18:	00007891 	.word	0x00007891
    7c1c:	00007925 	.word	0x00007925
    7c20:	000079f1 	.word	0x000079f1
    7c24:	00007a29 	.word	0x00007a29
    7c28:	00007a71 	.word	0x00007a71

00007c2c <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    7c2c:	b580      	push	{r7, lr}
    7c2e:	b084      	sub	sp, #16
    7c30:	af00      	add	r7, sp, #0
    7c32:	6078      	str	r0, [r7, #4]
    7c34:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    7c36:	2300      	movs	r3, #0
    7c38:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    7c3a:	687b      	ldr	r3, [r7, #4]
    7c3c:	2b00      	cmp	r3, #0
    7c3e:	bf14      	ite	ne
    7c40:	2301      	movne	r3, #1
    7c42:	2300      	moveq	r3, #0
    7c44:	b2db      	uxtb	r3, r3
    7c46:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    7c4a:	4911      	ldr	r1, [pc, #68]	; (7c90 <calendar_init+0x64>)
    7c4c:	4618      	mov	r0, r3
    7c4e:	4b11      	ldr	r3, [pc, #68]	; (7c94 <calendar_init+0x68>)
    7c50:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    7c52:	687b      	ldr	r3, [r7, #4]
    7c54:	681a      	ldr	r2, [r3, #0]
    7c56:	683b      	ldr	r3, [r7, #0]
    7c58:	429a      	cmp	r2, r3
    7c5a:	d101      	bne.n	7c60 <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    7c5c:	2300      	movs	r3, #0
    7c5e:	e013      	b.n	7c88 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    7c60:	687b      	ldr	r3, [r7, #4]
    7c62:	681b      	ldr	r3, [r3, #0]
    7c64:	2b00      	cmp	r3, #0
    7c66:	d002      	beq.n	7c6e <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    7c68:	f06f 0311 	mvn.w	r3, #17
    7c6c:	e00c      	b.n	7c88 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    7c6e:	687b      	ldr	r3, [r7, #4]
    7c70:	683a      	ldr	r2, [r7, #0]
    7c72:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    7c74:	687b      	ldr	r3, [r7, #4]
    7c76:	4618      	mov	r0, r3
    7c78:	4b07      	ldr	r3, [pc, #28]	; (7c98 <calendar_init+0x6c>)
    7c7a:	4798      	blx	r3
    7c7c:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    7c7e:	687b      	ldr	r3, [r7, #4]
    7c80:	f240 72b2 	movw	r2, #1970	; 0x7b2
    7c84:	619a      	str	r2, [r3, #24]

	return ret;
    7c86:	68fb      	ldr	r3, [r7, #12]
}
    7c88:	4618      	mov	r0, r3
    7c8a:	3710      	adds	r7, #16
    7c8c:	46bd      	mov	sp, r7
    7c8e:	bd80      	pop	{r7, pc}
    7c90:	00013d64 	.word	0x00013d64
    7c94:	000094ed 	.word	0x000094ed
    7c98:	0000bc6d 	.word	0x0000bc6d

00007c9c <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    7c9c:	b580      	push	{r7, lr}
    7c9e:	b084      	sub	sp, #16
    7ca0:	af00      	add	r7, sp, #0
    7ca2:	6078      	str	r0, [r7, #4]
    7ca4:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    7ca6:	687b      	ldr	r3, [r7, #4]
    7ca8:	2b00      	cmp	r3, #0
    7caa:	d004      	beq.n	7cb6 <can_async_init+0x1a>
    7cac:	683b      	ldr	r3, [r7, #0]
    7cae:	2b00      	cmp	r3, #0
    7cb0:	d001      	beq.n	7cb6 <can_async_init+0x1a>
    7cb2:	2301      	movs	r3, #1
    7cb4:	e000      	b.n	7cb8 <can_async_init+0x1c>
    7cb6:	2300      	movs	r3, #0
    7cb8:	f003 0301 	and.w	r3, r3, #1
    7cbc:	b2db      	uxtb	r3, r3
    7cbe:	2241      	movs	r2, #65	; 0x41
    7cc0:	490e      	ldr	r1, [pc, #56]	; (7cfc <can_async_init+0x60>)
    7cc2:	4618      	mov	r0, r3
    7cc4:	4b0e      	ldr	r3, [pc, #56]	; (7d00 <can_async_init+0x64>)
    7cc6:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    7cc8:	687b      	ldr	r3, [r7, #4]
    7cca:	6839      	ldr	r1, [r7, #0]
    7ccc:	4618      	mov	r0, r3
    7cce:	4b0d      	ldr	r3, [pc, #52]	; (7d04 <can_async_init+0x68>)
    7cd0:	4798      	blx	r3
    7cd2:	60f8      	str	r0, [r7, #12]
	if (rc) {
    7cd4:	68fb      	ldr	r3, [r7, #12]
    7cd6:	2b00      	cmp	r3, #0
    7cd8:	d001      	beq.n	7cde <can_async_init+0x42>
		return rc;
    7cda:	68fb      	ldr	r3, [r7, #12]
    7cdc:	e009      	b.n	7cf2 <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    7cde:	687b      	ldr	r3, [r7, #4]
    7ce0:	4a09      	ldr	r2, [pc, #36]	; (7d08 <can_async_init+0x6c>)
    7ce2:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    7ce4:	687b      	ldr	r3, [r7, #4]
    7ce6:	4a09      	ldr	r2, [pc, #36]	; (7d0c <can_async_init+0x70>)
    7ce8:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    7cea:	687b      	ldr	r3, [r7, #4]
    7cec:	4a08      	ldr	r2, [pc, #32]	; (7d10 <can_async_init+0x74>)
    7cee:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    7cf0:	2300      	movs	r3, #0
}
    7cf2:	4618      	mov	r0, r3
    7cf4:	3710      	adds	r7, #16
    7cf6:	46bd      	mov	sp, r7
    7cf8:	bd80      	pop	{r7, pc}
    7cfa:	bf00      	nop
    7cfc:	00013d80 	.word	0x00013d80
    7d00:	000094ed 	.word	0x000094ed
    7d04:	00009bed 	.word	0x00009bed
    7d08:	00007eed 	.word	0x00007eed
    7d0c:	00007f11 	.word	0x00007f11
    7d10:	00007f35 	.word	0x00007f35

00007d14 <can_async_enable>:

/**
 * \brief Enable CAN
 */
int32_t can_async_enable(struct can_async_descriptor *const descr)
{
    7d14:	b580      	push	{r7, lr}
    7d16:	b082      	sub	sp, #8
    7d18:	af00      	add	r7, sp, #0
    7d1a:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    7d1c:	687b      	ldr	r3, [r7, #4]
    7d1e:	2b00      	cmp	r3, #0
    7d20:	bf14      	ite	ne
    7d22:	2301      	movne	r3, #1
    7d24:	2300      	moveq	r3, #0
    7d26:	b2db      	uxtb	r3, r3
    7d28:	225c      	movs	r2, #92	; 0x5c
    7d2a:	4906      	ldr	r1, [pc, #24]	; (7d44 <can_async_enable+0x30>)
    7d2c:	4618      	mov	r0, r3
    7d2e:	4b06      	ldr	r3, [pc, #24]	; (7d48 <can_async_enable+0x34>)
    7d30:	4798      	blx	r3
	return _can_async_enable(&descr->dev);
    7d32:	687b      	ldr	r3, [r7, #4]
    7d34:	4618      	mov	r0, r3
    7d36:	4b05      	ldr	r3, [pc, #20]	; (7d4c <can_async_enable+0x38>)
    7d38:	4798      	blx	r3
    7d3a:	4603      	mov	r3, r0
}
    7d3c:	4618      	mov	r0, r3
    7d3e:	3708      	adds	r7, #8
    7d40:	46bd      	mov	sp, r7
    7d42:	bd80      	pop	{r7, pc}
    7d44:	00013d80 	.word	0x00013d80
    7d48:	000094ed 	.word	0x000094ed
    7d4c:	00009dd9 	.word	0x00009dd9

00007d50 <can_async_disable>:

/**
 * \brief Disable CAN
 */
int32_t can_async_disable(struct can_async_descriptor *const descr)
{
    7d50:	b580      	push	{r7, lr}
    7d52:	b082      	sub	sp, #8
    7d54:	af00      	add	r7, sp, #0
    7d56:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    7d58:	687b      	ldr	r3, [r7, #4]
    7d5a:	2b00      	cmp	r3, #0
    7d5c:	bf14      	ite	ne
    7d5e:	2301      	movne	r3, #1
    7d60:	2300      	moveq	r3, #0
    7d62:	b2db      	uxtb	r3, r3
    7d64:	2265      	movs	r2, #101	; 0x65
    7d66:	4906      	ldr	r1, [pc, #24]	; (7d80 <can_async_disable+0x30>)
    7d68:	4618      	mov	r0, r3
    7d6a:	4b06      	ldr	r3, [pc, #24]	; (7d84 <can_async_disable+0x34>)
    7d6c:	4798      	blx	r3
	return _can_async_disable(&descr->dev);
    7d6e:	687b      	ldr	r3, [r7, #4]
    7d70:	4618      	mov	r0, r3
    7d72:	4b05      	ldr	r3, [pc, #20]	; (7d88 <can_async_disable+0x38>)
    7d74:	4798      	blx	r3
    7d76:	4603      	mov	r3, r0
}
    7d78:	4618      	mov	r0, r3
    7d7a:	3708      	adds	r7, #8
    7d7c:	46bd      	mov	sp, r7
    7d7e:	bd80      	pop	{r7, pc}
    7d80:	00013d80 	.word	0x00013d80
    7d84:	000094ed 	.word	0x000094ed
    7d88:	00009df9 	.word	0x00009df9

00007d8c <can_async_read>:

/**
 * \brief Read a CAN message
 */
int32_t can_async_read(struct can_async_descriptor *const descr, struct can_message *msg)
{
    7d8c:	b580      	push	{r7, lr}
    7d8e:	b082      	sub	sp, #8
    7d90:	af00      	add	r7, sp, #0
    7d92:	6078      	str	r0, [r7, #4]
    7d94:	6039      	str	r1, [r7, #0]
	ASSERT(descr && msg);
    7d96:	687b      	ldr	r3, [r7, #4]
    7d98:	2b00      	cmp	r3, #0
    7d9a:	d004      	beq.n	7da6 <can_async_read+0x1a>
    7d9c:	683b      	ldr	r3, [r7, #0]
    7d9e:	2b00      	cmp	r3, #0
    7da0:	d001      	beq.n	7da6 <can_async_read+0x1a>
    7da2:	2301      	movs	r3, #1
    7da4:	e000      	b.n	7da8 <can_async_read+0x1c>
    7da6:	2300      	movs	r3, #0
    7da8:	f003 0301 	and.w	r3, r3, #1
    7dac:	b2db      	uxtb	r3, r3
    7dae:	226e      	movs	r2, #110	; 0x6e
    7db0:	4906      	ldr	r1, [pc, #24]	; (7dcc <can_async_read+0x40>)
    7db2:	4618      	mov	r0, r3
    7db4:	4b06      	ldr	r3, [pc, #24]	; (7dd0 <can_async_read+0x44>)
    7db6:	4798      	blx	r3
	return _can_async_read(&descr->dev, msg);
    7db8:	687b      	ldr	r3, [r7, #4]
    7dba:	6839      	ldr	r1, [r7, #0]
    7dbc:	4618      	mov	r0, r3
    7dbe:	4b05      	ldr	r3, [pc, #20]	; (7dd4 <can_async_read+0x48>)
    7dc0:	4798      	blx	r3
    7dc2:	4603      	mov	r3, r0
}
    7dc4:	4618      	mov	r0, r3
    7dc6:	3708      	adds	r7, #8
    7dc8:	46bd      	mov	sp, r7
    7dca:	bd80      	pop	{r7, pc}
    7dcc:	00013d80 	.word	0x00013d80
    7dd0:	000094ed 	.word	0x000094ed
    7dd4:	00009e19 	.word	0x00009e19

00007dd8 <can_async_write>:

/**
 * \brief Write a CAN message
 */
int32_t can_async_write(struct can_async_descriptor *const descr, struct can_message *msg)
{
    7dd8:	b580      	push	{r7, lr}
    7dda:	b082      	sub	sp, #8
    7ddc:	af00      	add	r7, sp, #0
    7dde:	6078      	str	r0, [r7, #4]
    7de0:	6039      	str	r1, [r7, #0]
	ASSERT(descr && msg);
    7de2:	687b      	ldr	r3, [r7, #4]
    7de4:	2b00      	cmp	r3, #0
    7de6:	d004      	beq.n	7df2 <can_async_write+0x1a>
    7de8:	683b      	ldr	r3, [r7, #0]
    7dea:	2b00      	cmp	r3, #0
    7dec:	d001      	beq.n	7df2 <can_async_write+0x1a>
    7dee:	2301      	movs	r3, #1
    7df0:	e000      	b.n	7df4 <can_async_write+0x1c>
    7df2:	2300      	movs	r3, #0
    7df4:	f003 0301 	and.w	r3, r3, #1
    7df8:	b2db      	uxtb	r3, r3
    7dfa:	2277      	movs	r2, #119	; 0x77
    7dfc:	4906      	ldr	r1, [pc, #24]	; (7e18 <can_async_write+0x40>)
    7dfe:	4618      	mov	r0, r3
    7e00:	4b06      	ldr	r3, [pc, #24]	; (7e1c <can_async_write+0x44>)
    7e02:	4798      	blx	r3
	return _can_async_write(&descr->dev, msg);
    7e04:	687b      	ldr	r3, [r7, #4]
    7e06:	6839      	ldr	r1, [r7, #0]
    7e08:	4618      	mov	r0, r3
    7e0a:	4b05      	ldr	r3, [pc, #20]	; (7e20 <can_async_write+0x48>)
    7e0c:	4798      	blx	r3
    7e0e:	4603      	mov	r3, r0
}
    7e10:	4618      	mov	r0, r3
    7e12:	3708      	adds	r7, #8
    7e14:	46bd      	mov	sp, r7
    7e16:	bd80      	pop	{r7, pc}
    7e18:	00013d80 	.word	0x00013d80
    7e1c:	000094ed 	.word	0x000094ed
    7e20:	00009f29 	.word	0x00009f29

00007e24 <can_async_register_callback>:
/**
 * \brief Register CAN callback function to interrupt
 */
int32_t can_async_register_callback(struct can_async_descriptor *const descr, enum can_async_callback_type type,
                                    FUNC_PTR cb)
{
    7e24:	b580      	push	{r7, lr}
    7e26:	b084      	sub	sp, #16
    7e28:	af00      	add	r7, sp, #0
    7e2a:	60f8      	str	r0, [r7, #12]
    7e2c:	460b      	mov	r3, r1
    7e2e:	607a      	str	r2, [r7, #4]
    7e30:	72fb      	strb	r3, [r7, #11]
	ASSERT(descr);
    7e32:	68fb      	ldr	r3, [r7, #12]
    7e34:	2b00      	cmp	r3, #0
    7e36:	bf14      	ite	ne
    7e38:	2301      	movne	r3, #1
    7e3a:	2300      	moveq	r3, #0
    7e3c:	b2db      	uxtb	r3, r3
    7e3e:	2281      	movs	r2, #129	; 0x81
    7e40:	4914      	ldr	r1, [pc, #80]	; (7e94 <can_async_register_callback+0x70>)
    7e42:	4618      	mov	r0, r3
    7e44:	4b14      	ldr	r3, [pc, #80]	; (7e98 <can_async_register_callback+0x74>)
    7e46:	4798      	blx	r3

	switch (type) {
    7e48:	7afb      	ldrb	r3, [r7, #11]
    7e4a:	2b01      	cmp	r3, #1
    7e4c:	d007      	beq.n	7e5e <can_async_register_callback+0x3a>
    7e4e:	2b02      	cmp	r3, #2
    7e50:	d009      	beq.n	7e66 <can_async_register_callback+0x42>
    7e52:	2b00      	cmp	r3, #0
    7e54:	d10b      	bne.n	7e6e <can_async_register_callback+0x4a>
	case CAN_ASYNC_RX_CB:
		descr->cb.rx_done = (cb != NULL) ? (can_cb_t)cb : NULL;
    7e56:	68fb      	ldr	r3, [r7, #12]
    7e58:	687a      	ldr	r2, [r7, #4]
    7e5a:	621a      	str	r2, [r3, #32]
		break;
    7e5c:	e00a      	b.n	7e74 <can_async_register_callback+0x50>
	case CAN_ASYNC_TX_CB:
		descr->cb.tx_done = (cb != NULL) ? (can_cb_t)cb : NULL;
    7e5e:	68fb      	ldr	r3, [r7, #12]
    7e60:	687a      	ldr	r2, [r7, #4]
    7e62:	61da      	str	r2, [r3, #28]
		break;
    7e64:	e006      	b.n	7e74 <can_async_register_callback+0x50>
	case CAN_ASYNC_IRQ_CB:
		descr->cb.irq_handler
		    = (cb != NULL) ? (void (*)(struct can_async_descriptor *const, enum can_async_interrupt_type))cb : NULL;
    7e66:	68fb      	ldr	r3, [r7, #12]
    7e68:	687a      	ldr	r2, [r7, #4]
    7e6a:	625a      	str	r2, [r3, #36]	; 0x24
		break;
    7e6c:	e002      	b.n	7e74 <can_async_register_callback+0x50>
	default:
		return ERR_INVALID_ARG;
    7e6e:	f06f 030c 	mvn.w	r3, #12
    7e72:	e00b      	b.n	7e8c <can_async_register_callback+0x68>
	}

	_can_async_set_irq_state(&descr->dev, type, NULL != cb);
    7e74:	68f8      	ldr	r0, [r7, #12]
    7e76:	687b      	ldr	r3, [r7, #4]
    7e78:	2b00      	cmp	r3, #0
    7e7a:	bf14      	ite	ne
    7e7c:	2301      	movne	r3, #1
    7e7e:	2300      	moveq	r3, #0
    7e80:	b2da      	uxtb	r2, r3
    7e82:	7afb      	ldrb	r3, [r7, #11]
    7e84:	4619      	mov	r1, r3
    7e86:	4b05      	ldr	r3, [pc, #20]	; (7e9c <can_async_register_callback+0x78>)
    7e88:	4798      	blx	r3

	return ERR_NONE;
    7e8a:	2300      	movs	r3, #0
}
    7e8c:	4618      	mov	r0, r3
    7e8e:	3710      	adds	r7, #16
    7e90:	46bd      	mov	sp, r7
    7e92:	bd80      	pop	{r7, pc}
    7e94:	00013d80 	.word	0x00013d80
    7e98:	000094ed 	.word	0x000094ed
    7e9c:	0000a0e5 	.word	0x0000a0e5

00007ea0 <can_async_set_filter>:
/**
 * \brief Set CAN filter
 */
int32_t can_async_set_filter(struct can_async_descriptor *const descr, uint8_t index, enum can_format fmt,
                             struct can_filter *filter)
{
    7ea0:	b590      	push	{r4, r7, lr}
    7ea2:	b085      	sub	sp, #20
    7ea4:	af00      	add	r7, sp, #0
    7ea6:	60f8      	str	r0, [r7, #12]
    7ea8:	607b      	str	r3, [r7, #4]
    7eaa:	460b      	mov	r3, r1
    7eac:	72fb      	strb	r3, [r7, #11]
    7eae:	4613      	mov	r3, r2
    7eb0:	72bb      	strb	r3, [r7, #10]
	ASSERT(descr);
    7eb2:	68fb      	ldr	r3, [r7, #12]
    7eb4:	2b00      	cmp	r3, #0
    7eb6:	bf14      	ite	ne
    7eb8:	2301      	movne	r3, #1
    7eba:	2300      	moveq	r3, #0
    7ebc:	b2db      	uxtb	r3, r3
    7ebe:	22b8      	movs	r2, #184	; 0xb8
    7ec0:	4907      	ldr	r1, [pc, #28]	; (7ee0 <can_async_set_filter+0x40>)
    7ec2:	4618      	mov	r0, r3
    7ec4:	4b07      	ldr	r3, [pc, #28]	; (7ee4 <can_async_set_filter+0x44>)
    7ec6:	4798      	blx	r3
	return _can_async_set_filter(&descr->dev, index, fmt, filter);
    7ec8:	68f8      	ldr	r0, [r7, #12]
    7eca:	7aba      	ldrb	r2, [r7, #10]
    7ecc:	7af9      	ldrb	r1, [r7, #11]
    7ece:	687b      	ldr	r3, [r7, #4]
    7ed0:	4c05      	ldr	r4, [pc, #20]	; (7ee8 <can_async_set_filter+0x48>)
    7ed2:	47a0      	blx	r4
    7ed4:	4603      	mov	r3, r0
}
    7ed6:	4618      	mov	r0, r3
    7ed8:	3714      	adds	r7, #20
    7eda:	46bd      	mov	sp, r7
    7edc:	bd90      	pop	{r4, r7, pc}
    7ede:	bf00      	nop
    7ee0:	00013d80 	.word	0x00013d80
    7ee4:	000094ed 	.word	0x000094ed
    7ee8:	0000a171 	.word	0x0000a171

00007eec <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    7eec:	b580      	push	{r7, lr}
    7eee:	b084      	sub	sp, #16
    7ef0:	af00      	add	r7, sp, #0
    7ef2:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    7ef4:	687b      	ldr	r3, [r7, #4]
    7ef6:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    7ef8:	68fb      	ldr	r3, [r7, #12]
    7efa:	69db      	ldr	r3, [r3, #28]
    7efc:	2b00      	cmp	r3, #0
    7efe:	d003      	beq.n	7f08 <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    7f00:	68fb      	ldr	r3, [r7, #12]
    7f02:	69db      	ldr	r3, [r3, #28]
    7f04:	68f8      	ldr	r0, [r7, #12]
    7f06:	4798      	blx	r3
	}
}
    7f08:	bf00      	nop
    7f0a:	3710      	adds	r7, #16
    7f0c:	46bd      	mov	sp, r7
    7f0e:	bd80      	pop	{r7, pc}

00007f10 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    7f10:	b580      	push	{r7, lr}
    7f12:	b084      	sub	sp, #16
    7f14:	af00      	add	r7, sp, #0
    7f16:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    7f18:	687b      	ldr	r3, [r7, #4]
    7f1a:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    7f1c:	68fb      	ldr	r3, [r7, #12]
    7f1e:	6a1b      	ldr	r3, [r3, #32]
    7f20:	2b00      	cmp	r3, #0
    7f22:	d003      	beq.n	7f2c <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    7f24:	68fb      	ldr	r3, [r7, #12]
    7f26:	6a1b      	ldr	r3, [r3, #32]
    7f28:	68f8      	ldr	r0, [r7, #12]
    7f2a:	4798      	blx	r3
	}
}
    7f2c:	bf00      	nop
    7f2e:	3710      	adds	r7, #16
    7f30:	46bd      	mov	sp, r7
    7f32:	bd80      	pop	{r7, pc}

00007f34 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    7f34:	b580      	push	{r7, lr}
    7f36:	b084      	sub	sp, #16
    7f38:	af00      	add	r7, sp, #0
    7f3a:	6078      	str	r0, [r7, #4]
    7f3c:	460b      	mov	r3, r1
    7f3e:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    7f40:	687b      	ldr	r3, [r7, #4]
    7f42:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    7f44:	68fb      	ldr	r3, [r7, #12]
    7f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7f48:	2b00      	cmp	r3, #0
    7f4a:	d005      	beq.n	7f58 <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    7f4c:	68fb      	ldr	r3, [r7, #12]
    7f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7f50:	78fa      	ldrb	r2, [r7, #3]
    7f52:	4611      	mov	r1, r2
    7f54:	68f8      	ldr	r0, [r7, #12]
    7f56:	4798      	blx	r3
	}
}
    7f58:	bf00      	nop
    7f5a:	3710      	adds	r7, #16
    7f5c:	46bd      	mov	sp, r7
    7f5e:	bd80      	pop	{r7, pc}

00007f60 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    7f60:	b580      	push	{r7, lr}
    7f62:	b082      	sub	sp, #8
    7f64:	af00      	add	r7, sp, #0
    7f66:	6078      	str	r0, [r7, #4]
    7f68:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    7f6a:	687b      	ldr	r3, [r7, #4]
    7f6c:	2b00      	cmp	r3, #0
    7f6e:	d004      	beq.n	7f7a <crc_sync_init+0x1a>
    7f70:	683b      	ldr	r3, [r7, #0]
    7f72:	2b00      	cmp	r3, #0
    7f74:	d001      	beq.n	7f7a <crc_sync_init+0x1a>
    7f76:	2301      	movs	r3, #1
    7f78:	e000      	b.n	7f7c <crc_sync_init+0x1c>
    7f7a:	2300      	movs	r3, #0
    7f7c:	f003 0301 	and.w	r3, r3, #1
    7f80:	b2db      	uxtb	r3, r3
    7f82:	222b      	movs	r2, #43	; 0x2b
    7f84:	4906      	ldr	r1, [pc, #24]	; (7fa0 <crc_sync_init+0x40>)
    7f86:	4618      	mov	r0, r3
    7f88:	4b06      	ldr	r3, [pc, #24]	; (7fa4 <crc_sync_init+0x44>)
    7f8a:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    7f8c:	687b      	ldr	r3, [r7, #4]
    7f8e:	6839      	ldr	r1, [r7, #0]
    7f90:	4618      	mov	r0, r3
    7f92:	4b05      	ldr	r3, [pc, #20]	; (7fa8 <crc_sync_init+0x48>)
    7f94:	4798      	blx	r3
    7f96:	4603      	mov	r3, r0
}
    7f98:	4618      	mov	r0, r3
    7f9a:	3708      	adds	r7, #8
    7f9c:	46bd      	mov	sp, r7
    7f9e:	bd80      	pop	{r7, pc}
    7fa0:	00013d9c 	.word	0x00013d9c
    7fa4:	000094ed 	.word	0x000094ed
    7fa8:	0000a6f5 	.word	0x0000a6f5

00007fac <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    7fac:	b590      	push	{r4, r7, lr}
    7fae:	b083      	sub	sp, #12
    7fb0:	af00      	add	r7, sp, #0
    7fb2:	4603      	mov	r3, r0
    7fb4:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    7fb6:	4b07      	ldr	r3, [pc, #28]	; (7fd4 <delay_us+0x28>)
    7fb8:	681c      	ldr	r4, [r3, #0]
    7fba:	88fb      	ldrh	r3, [r7, #6]
    7fbc:	4618      	mov	r0, r3
    7fbe:	4b06      	ldr	r3, [pc, #24]	; (7fd8 <delay_us+0x2c>)
    7fc0:	4798      	blx	r3
    7fc2:	4603      	mov	r3, r0
    7fc4:	4619      	mov	r1, r3
    7fc6:	4620      	mov	r0, r4
    7fc8:	4b04      	ldr	r3, [pc, #16]	; (7fdc <delay_us+0x30>)
    7fca:	4798      	blx	r3
}
    7fcc:	bf00      	nop
    7fce:	370c      	adds	r7, #12
    7fd0:	46bd      	mov	sp, r7
    7fd2:	bd90      	pop	{r4, r7, pc}
    7fd4:	200014bc 	.word	0x200014bc
    7fd8:	0000a449 	.word	0x0000a449
    7fdc:	0000a5e1 	.word	0x0000a5e1

00007fe0 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    7fe0:	b590      	push	{r4, r7, lr}
    7fe2:	b083      	sub	sp, #12
    7fe4:	af00      	add	r7, sp, #0
    7fe6:	4603      	mov	r3, r0
    7fe8:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    7fea:	4b07      	ldr	r3, [pc, #28]	; (8008 <delay_ms+0x28>)
    7fec:	681c      	ldr	r4, [r3, #0]
    7fee:	88fb      	ldrh	r3, [r7, #6]
    7ff0:	4618      	mov	r0, r3
    7ff2:	4b06      	ldr	r3, [pc, #24]	; (800c <delay_ms+0x2c>)
    7ff4:	4798      	blx	r3
    7ff6:	4603      	mov	r3, r0
    7ff8:	4619      	mov	r1, r3
    7ffa:	4620      	mov	r0, r4
    7ffc:	4b04      	ldr	r3, [pc, #16]	; (8010 <delay_ms+0x30>)
    7ffe:	4798      	blx	r3
}
    8000:	bf00      	nop
    8002:	370c      	adds	r7, #12
    8004:	46bd      	mov	sp, r7
    8006:	bd90      	pop	{r4, r7, pc}
    8008:	200014bc 	.word	0x200014bc
    800c:	0000a5b5 	.word	0x0000a5b5
    8010:	0000a5e1 	.word	0x0000a5e1

00008014 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    8014:	b580      	push	{r7, lr}
    8016:	af00      	add	r7, sp, #0
	return _event_system_init();
    8018:	4b02      	ldr	r3, [pc, #8]	; (8024 <event_system_init+0x10>)
    801a:	4798      	blx	r3
    801c:	4603      	mov	r3, r0
}
    801e:	4618      	mov	r0, r3
    8020:	bd80      	pop	{r7, pc}
    8022:	bf00      	nop
    8024:	0000ad29 	.word	0x0000ad29

00008028 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    8028:	b580      	push	{r7, lr}
    802a:	b082      	sub	sp, #8
    802c:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    802e:	2300      	movs	r3, #0
    8030:	80fb      	strh	r3, [r7, #6]
    8032:	e00e      	b.n	8052 <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    8034:	88fb      	ldrh	r3, [r7, #6]
    8036:	4a0c      	ldr	r2, [pc, #48]	; (8068 <ext_irq_init+0x40>)
    8038:	00db      	lsls	r3, r3, #3
    803a:	4413      	add	r3, r2
    803c:	f04f 32ff 	mov.w	r2, #4294967295
    8040:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    8042:	88fb      	ldrh	r3, [r7, #6]
    8044:	4a08      	ldr	r2, [pc, #32]	; (8068 <ext_irq_init+0x40>)
    8046:	2100      	movs	r1, #0
    8048:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    804c:	88fb      	ldrh	r3, [r7, #6]
    804e:	3301      	adds	r3, #1
    8050:	80fb      	strh	r3, [r7, #6]
    8052:	88fb      	ldrh	r3, [r7, #6]
    8054:	2b03      	cmp	r3, #3
    8056:	d9ed      	bls.n	8034 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    8058:	4804      	ldr	r0, [pc, #16]	; (806c <ext_irq_init+0x44>)
    805a:	4b05      	ldr	r3, [pc, #20]	; (8070 <ext_irq_init+0x48>)
    805c:	4798      	blx	r3
    805e:	4603      	mov	r3, r0
}
    8060:	4618      	mov	r0, r3
    8062:	3708      	adds	r7, #8
    8064:	46bd      	mov	sp, r7
    8066:	bd80      	pop	{r7, pc}
    8068:	200014c0 	.word	0x200014c0
    806c:	00008075 	.word	0x00008075
    8070:	0000a9fd 	.word	0x0000a9fd

00008074 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    8074:	b580      	push	{r7, lr}
    8076:	b084      	sub	sp, #16
    8078:	af00      	add	r7, sp, #0
    807a:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    807c:	2300      	movs	r3, #0
    807e:	73fb      	strb	r3, [r7, #15]
    8080:	2304      	movs	r3, #4
    8082:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    8084:	e02a      	b.n	80dc <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    8086:	7bba      	ldrb	r2, [r7, #14]
    8088:	7bfb      	ldrb	r3, [r7, #15]
    808a:	4413      	add	r3, r2
    808c:	105b      	asrs	r3, r3, #1
    808e:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    8090:	7b7b      	ldrb	r3, [r7, #13]
    8092:	2b03      	cmp	r3, #3
    8094:	d827      	bhi.n	80e6 <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    8096:	7b7b      	ldrb	r3, [r7, #13]
    8098:	4a16      	ldr	r2, [pc, #88]	; (80f4 <process_ext_irq+0x80>)
    809a:	00db      	lsls	r3, r3, #3
    809c:	4413      	add	r3, r2
    809e:	685a      	ldr	r2, [r3, #4]
    80a0:	687b      	ldr	r3, [r7, #4]
    80a2:	429a      	cmp	r2, r3
    80a4:	d10b      	bne.n	80be <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    80a6:	7b7b      	ldrb	r3, [r7, #13]
    80a8:	4a12      	ldr	r2, [pc, #72]	; (80f4 <process_ext_irq+0x80>)
    80aa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    80ae:	2b00      	cmp	r3, #0
    80b0:	d01b      	beq.n	80ea <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    80b2:	7b7b      	ldrb	r3, [r7, #13]
    80b4:	4a0f      	ldr	r2, [pc, #60]	; (80f4 <process_ext_irq+0x80>)
    80b6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    80ba:	4798      	blx	r3
			}
			return;
    80bc:	e015      	b.n	80ea <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    80be:	7b7b      	ldrb	r3, [r7, #13]
    80c0:	4a0c      	ldr	r2, [pc, #48]	; (80f4 <process_ext_irq+0x80>)
    80c2:	00db      	lsls	r3, r3, #3
    80c4:	4413      	add	r3, r2
    80c6:	685a      	ldr	r2, [r3, #4]
    80c8:	687b      	ldr	r3, [r7, #4]
    80ca:	429a      	cmp	r2, r3
    80cc:	d203      	bcs.n	80d6 <process_ext_irq+0x62>
			lower = middle + 1;
    80ce:	7b7b      	ldrb	r3, [r7, #13]
    80d0:	3301      	adds	r3, #1
    80d2:	73fb      	strb	r3, [r7, #15]
    80d4:	e002      	b.n	80dc <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    80d6:	7b7b      	ldrb	r3, [r7, #13]
    80d8:	3b01      	subs	r3, #1
    80da:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    80dc:	7bba      	ldrb	r2, [r7, #14]
    80de:	7bfb      	ldrb	r3, [r7, #15]
    80e0:	429a      	cmp	r2, r3
    80e2:	d2d0      	bcs.n	8086 <process_ext_irq+0x12>
    80e4:	e002      	b.n	80ec <process_ext_irq+0x78>
			return;
    80e6:	bf00      	nop
    80e8:	e000      	b.n	80ec <process_ext_irq+0x78>
			return;
    80ea:	bf00      	nop
		}
	}
}
    80ec:	3710      	adds	r7, #16
    80ee:	46bd      	mov	sp, r7
    80f0:	bd80      	pop	{r7, pc}
    80f2:	bf00      	nop
    80f4:	200014c0 	.word	0x200014c0

000080f8 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    80f8:	b580      	push	{r7, lr}
    80fa:	b084      	sub	sp, #16
    80fc:	af00      	add	r7, sp, #0
    80fe:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    8100:	687b      	ldr	r3, [r7, #4]
    8102:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    8104:	687b      	ldr	r3, [r7, #4]
    8106:	885b      	ldrh	r3, [r3, #2]
    8108:	b29b      	uxth	r3, r3
    810a:	f403 7380 	and.w	r3, r3, #256	; 0x100
    810e:	2b00      	cmp	r3, #0
    8110:	d107      	bne.n	8122 <i2c_tx_complete+0x2a>
		if (i2c->i2c_cb.tx_complete) {
    8112:	68fb      	ldr	r3, [r7, #12]
    8114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    8116:	2b00      	cmp	r3, #0
    8118:	d003      	beq.n	8122 <i2c_tx_complete+0x2a>
			i2c->i2c_cb.tx_complete(i2c);
    811a:	68fb      	ldr	r3, [r7, #12]
    811c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    811e:	68f8      	ldr	r0, [r7, #12]
    8120:	4798      	blx	r3
		}
	}
}
    8122:	bf00      	nop
    8124:	3710      	adds	r7, #16
    8126:	46bd      	mov	sp, r7
    8128:	bd80      	pop	{r7, pc}

0000812a <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    812a:	b580      	push	{r7, lr}
    812c:	b084      	sub	sp, #16
    812e:	af00      	add	r7, sp, #0
    8130:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    8132:	687b      	ldr	r3, [r7, #4]
    8134:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    8136:	687b      	ldr	r3, [r7, #4]
    8138:	885b      	ldrh	r3, [r3, #2]
    813a:	b29b      	uxth	r3, r3
    813c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    8140:	2b00      	cmp	r3, #0
    8142:	d107      	bne.n	8154 <i2c_rx_complete+0x2a>
		if (i2c->i2c_cb.rx_complete) {
    8144:	68fb      	ldr	r3, [r7, #12]
    8146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    8148:	2b00      	cmp	r3, #0
    814a:	d003      	beq.n	8154 <i2c_rx_complete+0x2a>
			i2c->i2c_cb.rx_complete(i2c);
    814c:	68fb      	ldr	r3, [r7, #12]
    814e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    8150:	68f8      	ldr	r0, [r7, #12]
    8152:	4798      	blx	r3
		}
	}
}
    8154:	bf00      	nop
    8156:	3710      	adds	r7, #16
    8158:	46bd      	mov	sp, r7
    815a:	bd80      	pop	{r7, pc}

0000815c <i2c_error>:

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    815c:	b580      	push	{r7, lr}
    815e:	b084      	sub	sp, #16
    8160:	af00      	add	r7, sp, #0
    8162:	6078      	str	r0, [r7, #4]
    8164:	6039      	str	r1, [r7, #0]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    8166:	687b      	ldr	r3, [r7, #4]
    8168:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    816a:	687b      	ldr	r3, [r7, #4]
    816c:	885b      	ldrh	r3, [r3, #2]
    816e:	b29b      	uxth	r3, r3
    8170:	f403 7380 	and.w	r3, r3, #256	; 0x100
    8174:	2b00      	cmp	r3, #0
    8176:	d108      	bne.n	818a <i2c_error+0x2e>
		if (i2c->i2c_cb.error) {
    8178:	68fb      	ldr	r3, [r7, #12]
    817a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    817c:	2b00      	cmp	r3, #0
    817e:	d004      	beq.n	818a <i2c_error+0x2e>
			i2c->i2c_cb.error(i2c, error);
    8180:	68fb      	ldr	r3, [r7, #12]
    8182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8184:	6839      	ldr	r1, [r7, #0]
    8186:	68f8      	ldr	r0, [r7, #12]
    8188:	4798      	blx	r3
		}
	}
}
    818a:	bf00      	nop
    818c:	3710      	adds	r7, #16
    818e:	46bd      	mov	sp, r7
    8190:	bd80      	pop	{r7, pc}
	...

00008194 <i2c_m_async_read>:

/**
 * \brief Async version of I2C I/O read
 */
static int32_t i2c_m_async_read(struct io_descriptor *const io, uint8_t *buf, const uint16_t n)
{
    8194:	b580      	push	{r7, lr}
    8196:	b08a      	sub	sp, #40	; 0x28
    8198:	af00      	add	r7, sp, #0
    819a:	60f8      	str	r0, [r7, #12]
    819c:	60b9      	str	r1, [r7, #8]
    819e:	4613      	mov	r3, r2
    81a0:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    81a2:	68fb      	ldr	r3, [r7, #12]
    81a4:	3b28      	subs	r3, #40	; 0x28
    81a6:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    81a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    81aa:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    81ac:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    81ae:	88fb      	ldrh	r3, [r7, #6]
    81b0:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    81b2:	f248 0301 	movw	r3, #32769	; 0x8001
    81b6:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    81b8:	68bb      	ldr	r3, [r7, #8]
    81ba:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    81bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    81be:	f107 0214 	add.w	r2, r7, #20
    81c2:	4611      	mov	r1, r2
    81c4:	4618      	mov	r0, r3
    81c6:	4b06      	ldr	r3, [pc, #24]	; (81e0 <i2c_m_async_read+0x4c>)
    81c8:	4798      	blx	r3
    81ca:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    81cc:	6a3b      	ldr	r3, [r7, #32]
    81ce:	2b00      	cmp	r3, #0
    81d0:	d001      	beq.n	81d6 <i2c_m_async_read+0x42>
		/* error occurred */
		return ret;
    81d2:	6a3b      	ldr	r3, [r7, #32]
    81d4:	e000      	b.n	81d8 <i2c_m_async_read+0x44>
	}

	return (int32_t)n;
    81d6:	88fb      	ldrh	r3, [r7, #6]
}
    81d8:	4618      	mov	r0, r3
    81da:	3728      	adds	r7, #40	; 0x28
    81dc:	46bd      	mov	sp, r7
    81de:	bd80      	pop	{r7, pc}
    81e0:	0000cb15 	.word	0x0000cb15

000081e4 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    81e4:	b580      	push	{r7, lr}
    81e6:	b08a      	sub	sp, #40	; 0x28
    81e8:	af00      	add	r7, sp, #0
    81ea:	60f8      	str	r0, [r7, #12]
    81ec:	60b9      	str	r1, [r7, #8]
    81ee:	4613      	mov	r3, r2
    81f0:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    81f2:	68fb      	ldr	r3, [r7, #12]
    81f4:	3b28      	subs	r3, #40	; 0x28
    81f6:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    81f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    81fa:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    81fc:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    81fe:	88fb      	ldrh	r3, [r7, #6]
    8200:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    8202:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    8206:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    8208:	68bb      	ldr	r3, [r7, #8]
    820a:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    820c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    820e:	f107 0214 	add.w	r2, r7, #20
    8212:	4611      	mov	r1, r2
    8214:	4618      	mov	r0, r3
    8216:	4b06      	ldr	r3, [pc, #24]	; (8230 <i2c_m_async_write+0x4c>)
    8218:	4798      	blx	r3
    821a:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    821c:	6a3b      	ldr	r3, [r7, #32]
    821e:	2b00      	cmp	r3, #0
    8220:	d001      	beq.n	8226 <i2c_m_async_write+0x42>
		/* error occurred */
		return ret;
    8222:	6a3b      	ldr	r3, [r7, #32]
    8224:	e000      	b.n	8228 <i2c_m_async_write+0x44>
	}

	return (int32_t)n;
    8226:	88fb      	ldrh	r3, [r7, #6]
}
    8228:	4618      	mov	r0, r3
    822a:	3728      	adds	r7, #40	; 0x28
    822c:	46bd      	mov	sp, r7
    822e:	bd80      	pop	{r7, pc}
    8230:	0000cb15 	.word	0x0000cb15

00008234 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    8234:	b580      	push	{r7, lr}
    8236:	b084      	sub	sp, #16
    8238:	af00      	add	r7, sp, #0
    823a:	6078      	str	r0, [r7, #4]
    823c:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    823e:	687b      	ldr	r3, [r7, #4]
    8240:	2b00      	cmp	r3, #0
    8242:	bf14      	ite	ne
    8244:	2301      	movne	r3, #1
    8246:	2300      	moveq	r3, #0
    8248:	b2db      	uxtb	r3, r3
    824a:	2289      	movs	r2, #137	; 0x89
    824c:	4915      	ldr	r1, [pc, #84]	; (82a4 <i2c_m_async_init+0x70>)
    824e:	4618      	mov	r0, r3
    8250:	4b15      	ldr	r3, [pc, #84]	; (82a8 <i2c_m_async_init+0x74>)
    8252:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    8254:	687b      	ldr	r3, [r7, #4]
    8256:	6839      	ldr	r1, [r7, #0]
    8258:	4618      	mov	r0, r3
    825a:	4b14      	ldr	r3, [pc, #80]	; (82ac <i2c_m_async_init+0x78>)
    825c:	4798      	blx	r3
    825e:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    8260:	68fb      	ldr	r3, [r7, #12]
    8262:	2b00      	cmp	r3, #0
    8264:	d001      	beq.n	826a <i2c_m_async_init+0x36>
		return init_status;
    8266:	68fb      	ldr	r3, [r7, #12]
    8268:	e018      	b.n	829c <i2c_m_async_init+0x68>
	}
	/* Init I/O */
	i2c->io.read  = i2c_m_async_read;
    826a:	687b      	ldr	r3, [r7, #4]
    826c:	4a10      	ldr	r2, [pc, #64]	; (82b0 <i2c_m_async_init+0x7c>)
    826e:	62da      	str	r2, [r3, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    8270:	687b      	ldr	r3, [r7, #4]
    8272:	4a10      	ldr	r2, [pc, #64]	; (82b4 <i2c_m_async_init+0x80>)
    8274:	629a      	str	r2, [r3, #40]	; 0x28

	/* Init callbacks */
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    8276:	687b      	ldr	r3, [r7, #4]
    8278:	4a0f      	ldr	r2, [pc, #60]	; (82b8 <i2c_m_async_init+0x84>)
    827a:	2101      	movs	r1, #1
    827c:	4618      	mov	r0, r3
    827e:	4b0f      	ldr	r3, [pc, #60]	; (82bc <i2c_m_async_init+0x88>)
    8280:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    8282:	687b      	ldr	r3, [r7, #4]
    8284:	4a0e      	ldr	r2, [pc, #56]	; (82c0 <i2c_m_async_init+0x8c>)
    8286:	2102      	movs	r1, #2
    8288:	4618      	mov	r0, r3
    828a:	4b0c      	ldr	r3, [pc, #48]	; (82bc <i2c_m_async_init+0x88>)
    828c:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    828e:	687b      	ldr	r3, [r7, #4]
    8290:	4a0c      	ldr	r2, [pc, #48]	; (82c4 <i2c_m_async_init+0x90>)
    8292:	2100      	movs	r1, #0
    8294:	4618      	mov	r0, r3
    8296:	4b09      	ldr	r3, [pc, #36]	; (82bc <i2c_m_async_init+0x88>)
    8298:	4798      	blx	r3

	return ERR_NONE;
    829a:	2300      	movs	r3, #0
}
    829c:	4618      	mov	r0, r3
    829e:	3710      	adds	r7, #16
    82a0:	46bd      	mov	sp, r7
    82a2:	bd80      	pop	{r7, pc}
    82a4:	00013db8 	.word	0x00013db8
    82a8:	000094ed 	.word	0x000094ed
    82ac:	0000c965 	.word	0x0000c965
    82b0:	00008195 	.word	0x00008195
    82b4:	000081e5 	.word	0x000081e5
    82b8:	000080f9 	.word	0x000080f9
    82bc:	0000cbe9 	.word	0x0000cbe9
    82c0:	0000812b 	.word	0x0000812b
    82c4:	0000815d 	.word	0x0000815d

000082c8 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    82c8:	b580      	push	{r7, lr}
    82ca:	b084      	sub	sp, #16
    82cc:	af00      	add	r7, sp, #0
    82ce:	60f8      	str	r0, [r7, #12]
    82d0:	60b9      	str	r1, [r7, #8]
    82d2:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    82d4:	68fb      	ldr	r3, [r7, #12]
    82d6:	2b00      	cmp	r3, #0
    82d8:	d004      	beq.n	82e4 <pwm_init+0x1c>
    82da:	68bb      	ldr	r3, [r7, #8]
    82dc:	2b00      	cmp	r3, #0
    82de:	d001      	beq.n	82e4 <pwm_init+0x1c>
    82e0:	2301      	movs	r3, #1
    82e2:	e000      	b.n	82e6 <pwm_init+0x1e>
    82e4:	2300      	movs	r3, #0
    82e6:	f003 0301 	and.w	r3, r3, #1
    82ea:	b2db      	uxtb	r3, r3
    82ec:	2233      	movs	r2, #51	; 0x33
    82ee:	490a      	ldr	r1, [pc, #40]	; (8318 <pwm_init+0x50>)
    82f0:	4618      	mov	r0, r3
    82f2:	4b0a      	ldr	r3, [pc, #40]	; (831c <pwm_init+0x54>)
    82f4:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    82f6:	68fb      	ldr	r3, [r7, #12]
    82f8:	68b9      	ldr	r1, [r7, #8]
    82fa:	4618      	mov	r0, r3
    82fc:	4b08      	ldr	r3, [pc, #32]	; (8320 <pwm_init+0x58>)
    82fe:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    8300:	68fb      	ldr	r3, [r7, #12]
    8302:	4a08      	ldr	r2, [pc, #32]	; (8324 <pwm_init+0x5c>)
    8304:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    8306:	68fb      	ldr	r3, [r7, #12]
    8308:	4a07      	ldr	r2, [pc, #28]	; (8328 <pwm_init+0x60>)
    830a:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    830c:	2300      	movs	r3, #0
}
    830e:	4618      	mov	r0, r3
    8310:	3710      	adds	r7, #16
    8312:	46bd      	mov	sp, r7
    8314:	bd80      	pop	{r7, pc}
    8316:	bf00      	nop
    8318:	00013dd8 	.word	0x00013dd8
    831c:	000094ed 	.word	0x000094ed
    8320:	0000dd39 	.word	0x0000dd39
    8324:	0000832d 	.word	0x0000832d
    8328:	00008351 	.word	0x00008351

0000832c <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    832c:	b580      	push	{r7, lr}
    832e:	b084      	sub	sp, #16
    8330:	af00      	add	r7, sp, #0
    8332:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    8334:	687b      	ldr	r3, [r7, #4]
    8336:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    8338:	68fb      	ldr	r3, [r7, #12]
    833a:	695b      	ldr	r3, [r3, #20]
    833c:	2b00      	cmp	r3, #0
    833e:	d003      	beq.n	8348 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    8340:	68fb      	ldr	r3, [r7, #12]
    8342:	695b      	ldr	r3, [r3, #20]
    8344:	68f8      	ldr	r0, [r7, #12]
    8346:	4798      	blx	r3
	}
}
    8348:	bf00      	nop
    834a:	3710      	adds	r7, #16
    834c:	46bd      	mov	sp, r7
    834e:	bd80      	pop	{r7, pc}

00008350 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    8350:	b580      	push	{r7, lr}
    8352:	b084      	sub	sp, #16
    8354:	af00      	add	r7, sp, #0
    8356:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    8358:	687b      	ldr	r3, [r7, #4]
    835a:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    835c:	68fb      	ldr	r3, [r7, #12]
    835e:	699b      	ldr	r3, [r3, #24]
    8360:	2b00      	cmp	r3, #0
    8362:	d003      	beq.n	836c <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    8364:	68fb      	ldr	r3, [r7, #12]
    8366:	699b      	ldr	r3, [r3, #24]
    8368:	68f8      	ldr	r0, [r7, #12]
    836a:	4798      	blx	r3
	}
}
    836c:	bf00      	nop
    836e:	3710      	adds	r7, #16
    8370:	46bd      	mov	sp, r7
    8372:	bd80      	pop	{r7, pc}

00008374 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    8374:	b580      	push	{r7, lr}
    8376:	b082      	sub	sp, #8
    8378:	af00      	add	r7, sp, #0
    837a:	6078      	str	r0, [r7, #4]
    837c:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    837e:	687b      	ldr	r3, [r7, #4]
    8380:	2b00      	cmp	r3, #0
    8382:	d004      	beq.n	838e <qspi_sync_init+0x1a>
    8384:	683b      	ldr	r3, [r7, #0]
    8386:	2b00      	cmp	r3, #0
    8388:	d001      	beq.n	838e <qspi_sync_init+0x1a>
    838a:	2301      	movs	r3, #1
    838c:	e000      	b.n	8390 <qspi_sync_init+0x1c>
    838e:	2300      	movs	r3, #0
    8390:	f003 0301 	and.w	r3, r3, #1
    8394:	b2db      	uxtb	r3, r3
    8396:	2231      	movs	r2, #49	; 0x31
    8398:	4906      	ldr	r1, [pc, #24]	; (83b4 <qspi_sync_init+0x40>)
    839a:	4618      	mov	r0, r3
    839c:	4b06      	ldr	r3, [pc, #24]	; (83b8 <qspi_sync_init+0x44>)
    839e:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    83a0:	687b      	ldr	r3, [r7, #4]
    83a2:	6839      	ldr	r1, [r7, #0]
    83a4:	4618      	mov	r0, r3
    83a6:	4b05      	ldr	r3, [pc, #20]	; (83bc <qspi_sync_init+0x48>)
    83a8:	4798      	blx	r3
    83aa:	4603      	mov	r3, r0
}
    83ac:	4618      	mov	r0, r3
    83ae:	3708      	adds	r7, #8
    83b0:	46bd      	mov	sp, r7
    83b2:	bd80      	pop	{r7, pc}
    83b4:	00013df0 	.word	0x00013df0
    83b8:	000094ed 	.word	0x000094ed
    83bc:	0000b8a9 	.word	0x0000b8a9

000083c0 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    83c0:	b580      	push	{r7, lr}
    83c2:	b082      	sub	sp, #8
    83c4:	af00      	add	r7, sp, #0
    83c6:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    83c8:	687b      	ldr	r3, [r7, #4]
    83ca:	2b00      	cmp	r3, #0
    83cc:	bf14      	ite	ne
    83ce:	2301      	movne	r3, #1
    83d0:	2300      	moveq	r3, #0
    83d2:	b2db      	uxtb	r3, r3
    83d4:	223f      	movs	r2, #63	; 0x3f
    83d6:	4906      	ldr	r1, [pc, #24]	; (83f0 <qspi_sync_enable+0x30>)
    83d8:	4618      	mov	r0, r3
    83da:	4b06      	ldr	r3, [pc, #24]	; (83f4 <qspi_sync_enable+0x34>)
    83dc:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    83de:	687b      	ldr	r3, [r7, #4]
    83e0:	4618      	mov	r0, r3
    83e2:	4b05      	ldr	r3, [pc, #20]	; (83f8 <qspi_sync_enable+0x38>)
    83e4:	4798      	blx	r3
    83e6:	4603      	mov	r3, r0
}
    83e8:	4618      	mov	r0, r3
    83ea:	3708      	adds	r7, #8
    83ec:	46bd      	mov	sp, r7
    83ee:	bd80      	pop	{r7, pc}
    83f0:	00013df0 	.word	0x00013df0
    83f4:	000094ed 	.word	0x000094ed
    83f8:	0000b91d 	.word	0x0000b91d

000083fc <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    83fc:	b580      	push	{r7, lr}
    83fe:	b082      	sub	sp, #8
    8400:	af00      	add	r7, sp, #0
    8402:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    8404:	687b      	ldr	r3, [r7, #4]
    8406:	2b00      	cmp	r3, #0
    8408:	bf14      	ite	ne
    840a:	2301      	movne	r3, #1
    840c:	2300      	moveq	r3, #0
    840e:	b2db      	uxtb	r3, r3
    8410:	2246      	movs	r2, #70	; 0x46
    8412:	4906      	ldr	r1, [pc, #24]	; (842c <qspi_sync_disable+0x30>)
    8414:	4618      	mov	r0, r3
    8416:	4b06      	ldr	r3, [pc, #24]	; (8430 <qspi_sync_disable+0x34>)
    8418:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    841a:	687b      	ldr	r3, [r7, #4]
    841c:	4618      	mov	r0, r3
    841e:	4b05      	ldr	r3, [pc, #20]	; (8434 <qspi_sync_disable+0x38>)
    8420:	4798      	blx	r3
    8422:	4603      	mov	r3, r0
}
    8424:	4618      	mov	r0, r3
    8426:	3708      	adds	r7, #8
    8428:	46bd      	mov	sp, r7
    842a:	bd80      	pop	{r7, pc}
    842c:	00013df0 	.word	0x00013df0
    8430:	000094ed 	.word	0x000094ed
    8434:	0000b941 	.word	0x0000b941

00008438 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    8438:	b580      	push	{r7, lr}
    843a:	b082      	sub	sp, #8
    843c:	af00      	add	r7, sp, #0
    843e:	6078      	str	r0, [r7, #4]
    8440:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    8442:	687b      	ldr	r3, [r7, #4]
    8444:	2b00      	cmp	r3, #0
    8446:	d004      	beq.n	8452 <qspi_sync_serial_run_command+0x1a>
    8448:	683b      	ldr	r3, [r7, #0]
    844a:	2b00      	cmp	r3, #0
    844c:	d001      	beq.n	8452 <qspi_sync_serial_run_command+0x1a>
    844e:	2301      	movs	r3, #1
    8450:	e000      	b.n	8454 <qspi_sync_serial_run_command+0x1c>
    8452:	2300      	movs	r3, #0
    8454:	f003 0301 	and.w	r3, r3, #1
    8458:	b2db      	uxtb	r3, r3
    845a:	224d      	movs	r2, #77	; 0x4d
    845c:	4906      	ldr	r1, [pc, #24]	; (8478 <qspi_sync_serial_run_command+0x40>)
    845e:	4618      	mov	r0, r3
    8460:	4b06      	ldr	r3, [pc, #24]	; (847c <qspi_sync_serial_run_command+0x44>)
    8462:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    8464:	687b      	ldr	r3, [r7, #4]
    8466:	6839      	ldr	r1, [r7, #0]
    8468:	4618      	mov	r0, r3
    846a:	4b05      	ldr	r3, [pc, #20]	; (8480 <qspi_sync_serial_run_command+0x48>)
    846c:	4798      	blx	r3
    846e:	4603      	mov	r3, r0
}
    8470:	4618      	mov	r0, r3
    8472:	3708      	adds	r7, #8
    8474:	46bd      	mov	sp, r7
    8476:	bd80      	pop	{r7, pc}
    8478:	00013df0 	.word	0x00013df0
    847c:	000094ed 	.word	0x000094ed
    8480:	0000ba8d 	.word	0x0000ba8d

00008484 <_spi_dev_tx>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_tx(struct _spi_m_async_dev *dev)
{
    8484:	b580      	push	{r7, lr}
    8486:	b084      	sub	sp, #16
    8488:	af00      	add	r7, sp, #0
    848a:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    848c:	687b      	ldr	r3, [r7, #4]
    848e:	3b04      	subs	r3, #4
    8490:	60fb      	str	r3, [r7, #12]

	if (!(dev->char_size > 1)) {
    8492:	687b      	ldr	r3, [r7, #4]
    8494:	791b      	ldrb	r3, [r3, #4]
    8496:	2b01      	cmp	r3, #1
    8498:	d80e      	bhi.n	84b8 <_spi_dev_tx+0x34>
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    849a:	68fb      	ldr	r3, [r7, #12]
    849c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    849e:	68fb      	ldr	r3, [r7, #12]
    84a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    84a2:	1c58      	adds	r0, r3, #1
    84a4:	68f9      	ldr	r1, [r7, #12]
    84a6:	6448      	str	r0, [r1, #68]	; 0x44
    84a8:	4413      	add	r3, r2
    84aa:	781b      	ldrb	r3, [r3, #0]
    84ac:	b29b      	uxth	r3, r3
    84ae:	4619      	mov	r1, r3
    84b0:	6878      	ldr	r0, [r7, #4]
    84b2:	4b11      	ldr	r3, [pc, #68]	; (84f8 <_spi_dev_tx+0x74>)
    84b4:	4798      	blx	r3
    84b6:	e00d      	b.n	84d4 <_spi_dev_tx+0x50>
	} else {
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    84b8:	68fb      	ldr	r3, [r7, #12]
    84ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    84bc:	68fb      	ldr	r3, [r7, #12]
    84be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    84c0:	1c58      	adds	r0, r3, #1
    84c2:	68f9      	ldr	r1, [r7, #12]
    84c4:	6448      	str	r0, [r1, #68]	; 0x44
    84c6:	005b      	lsls	r3, r3, #1
    84c8:	4413      	add	r3, r2
    84ca:	881b      	ldrh	r3, [r3, #0]
    84cc:	4619      	mov	r1, r3
    84ce:	6878      	ldr	r0, [r7, #4]
    84d0:	4b09      	ldr	r3, [pc, #36]	; (84f8 <_spi_dev_tx+0x74>)
    84d2:	4798      	blx	r3
	}

	if (spi->xfercnt == spi->xfer.size) {
    84d4:	68fb      	ldr	r3, [r7, #12]
    84d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    84d8:	68fb      	ldr	r3, [r7, #12]
    84da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    84dc:	429a      	cmp	r2, r3
    84de:	d107      	bne.n	84f0 <_spi_dev_tx+0x6c>
		_spi_m_async_enable_tx(dev, false);
    84e0:	2100      	movs	r1, #0
    84e2:	6878      	ldr	r0, [r7, #4]
    84e4:	4b05      	ldr	r3, [pc, #20]	; (84fc <_spi_dev_tx+0x78>)
    84e6:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    84e8:	2101      	movs	r1, #1
    84ea:	6878      	ldr	r0, [r7, #4]
    84ec:	4b04      	ldr	r3, [pc, #16]	; (8500 <_spi_dev_tx+0x7c>)
    84ee:	4798      	blx	r3
	}
}
    84f0:	bf00      	nop
    84f2:	3710      	adds	r7, #16
    84f4:	46bd      	mov	sp, r7
    84f6:	bd80      	pop	{r7, pc}
    84f8:	0000d649 	.word	0x0000d649
    84fc:	0000d50d 	.word	0x0000d50d
    8500:	0000d5e1 	.word	0x0000d5e1

00008504 <_spi_dev_rx>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_rx(struct _spi_m_async_dev *dev)
{
    8504:	b590      	push	{r4, r7, lr}
    8506:	b085      	sub	sp, #20
    8508:	af00      	add	r7, sp, #0
    850a:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    850c:	687b      	ldr	r3, [r7, #4]
    850e:	3b04      	subs	r3, #4
    8510:	60fb      	str	r3, [r7, #12]

	if (spi->xfer.rxbuf) {
    8512:	68fb      	ldr	r3, [r7, #12]
    8514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    8516:	2b00      	cmp	r3, #0
    8518:	d021      	beq.n	855e <_spi_dev_rx+0x5a>
		if (!(dev->char_size > 1)) {
    851a:	687b      	ldr	r3, [r7, #4]
    851c:	791b      	ldrb	r3, [r3, #4]
    851e:	2b01      	cmp	r3, #1
    8520:	d80e      	bhi.n	8540 <_spi_dev_rx+0x3c>
			/* 8-bit or less */
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    8522:	68fb      	ldr	r3, [r7, #12]
    8524:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    8526:	68fb      	ldr	r3, [r7, #12]
    8528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    852a:	1c58      	adds	r0, r3, #1
    852c:	68f9      	ldr	r1, [r7, #12]
    852e:	6448      	str	r0, [r1, #68]	; 0x44
    8530:	18d4      	adds	r4, r2, r3
    8532:	6878      	ldr	r0, [r7, #4]
    8534:	4b2e      	ldr	r3, [pc, #184]	; (85f0 <_spi_dev_rx+0xec>)
    8536:	4798      	blx	r3
    8538:	4603      	mov	r3, r0
    853a:	b2db      	uxtb	r3, r3
    853c:	7023      	strb	r3, [r4, #0]
    853e:	e016      	b.n	856e <_spi_dev_rx+0x6a>
		} else {
			/* 9-bit or more */
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    8540:	68fb      	ldr	r3, [r7, #12]
    8542:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    8544:	68fb      	ldr	r3, [r7, #12]
    8546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    8548:	1c58      	adds	r0, r3, #1
    854a:	68f9      	ldr	r1, [r7, #12]
    854c:	6448      	str	r0, [r1, #68]	; 0x44
    854e:	005b      	lsls	r3, r3, #1
    8550:	18d4      	adds	r4, r2, r3
    8552:	6878      	ldr	r0, [r7, #4]
    8554:	4b26      	ldr	r3, [pc, #152]	; (85f0 <_spi_dev_rx+0xec>)
    8556:	4798      	blx	r3
    8558:	4603      	mov	r3, r0
    855a:	8023      	strh	r3, [r4, #0]
    855c:	e007      	b.n	856e <_spi_dev_rx+0x6a>
		}
	} else {
		/* dummy data read if rxbuf is NULL */
		_spi_m_async_read_one(dev);
    855e:	6878      	ldr	r0, [r7, #4]
    8560:	4b23      	ldr	r3, [pc, #140]	; (85f0 <_spi_dev_rx+0xec>)
    8562:	4798      	blx	r3
		spi->xfercnt++;
    8564:	68fb      	ldr	r3, [r7, #12]
    8566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    8568:	1c5a      	adds	r2, r3, #1
    856a:	68fb      	ldr	r3, [r7, #12]
    856c:	645a      	str	r2, [r3, #68]	; 0x44
	}

	if (spi->xfercnt < spi->xfer.size) {
    856e:	68fb      	ldr	r3, [r7, #12]
    8570:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    8572:	68fb      	ldr	r3, [r7, #12]
    8574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8576:	429a      	cmp	r2, r3
    8578:	d226      	bcs.n	85c8 <_spi_dev_rx+0xc4>
		if (spi->xfer.txbuf) {
    857a:	68fb      	ldr	r3, [r7, #12]
    857c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    857e:	2b00      	cmp	r3, #0
    8580:	d01b      	beq.n	85ba <_spi_dev_rx+0xb6>
			if (!(dev->char_size > 1)) {
    8582:	687b      	ldr	r3, [r7, #4]
    8584:	791b      	ldrb	r3, [r3, #4]
    8586:	2b01      	cmp	r3, #1
    8588:	d80b      	bhi.n	85a2 <_spi_dev_rx+0x9e>
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    858a:	68fb      	ldr	r3, [r7, #12]
    858c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    858e:	68fb      	ldr	r3, [r7, #12]
    8590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    8592:	4413      	add	r3, r2
    8594:	781b      	ldrb	r3, [r3, #0]
    8596:	b29b      	uxth	r3, r3
    8598:	4619      	mov	r1, r3
    859a:	6878      	ldr	r0, [r7, #4]
    859c:	4b15      	ldr	r3, [pc, #84]	; (85f4 <_spi_dev_rx+0xf0>)
    859e:	4798      	blx	r3

		if (spi->callbacks.cb_xfer) {
			spi->callbacks.cb_xfer(spi);
		}
	}
}
    85a0:	e022      	b.n	85e8 <_spi_dev_rx+0xe4>
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    85a2:	68fb      	ldr	r3, [r7, #12]
    85a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    85a6:	68fb      	ldr	r3, [r7, #12]
    85a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    85aa:	005b      	lsls	r3, r3, #1
    85ac:	4413      	add	r3, r2
    85ae:	881b      	ldrh	r3, [r3, #0]
    85b0:	4619      	mov	r1, r3
    85b2:	6878      	ldr	r0, [r7, #4]
    85b4:	4b0f      	ldr	r3, [pc, #60]	; (85f4 <_spi_dev_rx+0xf0>)
    85b6:	4798      	blx	r3
}
    85b8:	e016      	b.n	85e8 <_spi_dev_rx+0xe4>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    85ba:	687b      	ldr	r3, [r7, #4]
    85bc:	88db      	ldrh	r3, [r3, #6]
    85be:	4619      	mov	r1, r3
    85c0:	6878      	ldr	r0, [r7, #4]
    85c2:	4b0c      	ldr	r3, [pc, #48]	; (85f4 <_spi_dev_rx+0xf0>)
    85c4:	4798      	blx	r3
}
    85c6:	e00f      	b.n	85e8 <_spi_dev_rx+0xe4>
		_spi_m_async_enable_rx(dev, false);
    85c8:	2100      	movs	r1, #0
    85ca:	6878      	ldr	r0, [r7, #4]
    85cc:	4b0a      	ldr	r3, [pc, #40]	; (85f8 <_spi_dev_rx+0xf4>)
    85ce:	4798      	blx	r3
		spi->stat = 0;
    85d0:	68fb      	ldr	r3, [r7, #12]
    85d2:	2200      	movs	r2, #0
    85d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		if (spi->callbacks.cb_xfer) {
    85d8:	68fb      	ldr	r3, [r7, #12]
    85da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    85dc:	2b00      	cmp	r3, #0
    85de:	d003      	beq.n	85e8 <_spi_dev_rx+0xe4>
			spi->callbacks.cb_xfer(spi);
    85e0:	68fb      	ldr	r3, [r7, #12]
    85e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    85e4:	68f8      	ldr	r0, [r7, #12]
    85e6:	4798      	blx	r3
}
    85e8:	bf00      	nop
    85ea:	3714      	adds	r7, #20
    85ec:	46bd      	mov	sp, r7
    85ee:	bd90      	pop	{r4, r7, pc}
    85f0:	0000d6a1 	.word	0x0000d6a1
    85f4:	0000d649 	.word	0x0000d649
    85f8:	0000d571 	.word	0x0000d571

000085fc <_spi_dev_complete>:
/**
 *  \brief Callback for complete
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_complete(struct _spi_m_async_dev *dev)
{
    85fc:	b580      	push	{r7, lr}
    85fe:	b084      	sub	sp, #16
    8600:	af00      	add	r7, sp, #0
    8602:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    8604:	687b      	ldr	r3, [r7, #4]
    8606:	3b04      	subs	r3, #4
    8608:	60fb      	str	r3, [r7, #12]

	if (spi->xfercnt >= spi->xfer.size) {
    860a:	68fb      	ldr	r3, [r7, #12]
    860c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    860e:	68fb      	ldr	r3, [r7, #12]
    8610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8612:	429a      	cmp	r2, r3
    8614:	d30f      	bcc.n	8636 <_spi_dev_complete+0x3a>
		_spi_m_async_enable_tx_complete(dev, false);
    8616:	2100      	movs	r1, #0
    8618:	6878      	ldr	r0, [r7, #4]
    861a:	4b09      	ldr	r3, [pc, #36]	; (8640 <_spi_dev_complete+0x44>)
    861c:	4798      	blx	r3
		spi->stat = 0;
    861e:	68fb      	ldr	r3, [r7, #12]
    8620:	2200      	movs	r2, #0
    8622:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

		if (spi->callbacks.cb_xfer) {
    8626:	68fb      	ldr	r3, [r7, #12]
    8628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    862a:	2b00      	cmp	r3, #0
    862c:	d003      	beq.n	8636 <_spi_dev_complete+0x3a>
			spi->callbacks.cb_xfer(spi);
    862e:	68fb      	ldr	r3, [r7, #12]
    8630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8632:	68f8      	ldr	r0, [r7, #12]
    8634:	4798      	blx	r3
		}
	}
}
    8636:	bf00      	nop
    8638:	3710      	adds	r7, #16
    863a:	46bd      	mov	sp, r7
    863c:	bd80      	pop	{r7, pc}
    863e:	bf00      	nop
    8640:	0000d5e1 	.word	0x0000d5e1

00008644 <_spi_dev_error>:
 *  \brief Callback for error
 *  \param[in, out] dev Pointer to the SPI device instance.
 *  \param[in] status Error status.
 */
static void _spi_dev_error(struct _spi_m_async_dev *dev, int32_t status)
{
    8644:	b580      	push	{r7, lr}
    8646:	b084      	sub	sp, #16
    8648:	af00      	add	r7, sp, #0
    864a:	6078      	str	r0, [r7, #4]
    864c:	6039      	str	r1, [r7, #0]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    864e:	687b      	ldr	r3, [r7, #4]
    8650:	3b04      	subs	r3, #4
    8652:	60fb      	str	r3, [r7, #12]

	_spi_m_async_enable_tx(dev, false);
    8654:	2100      	movs	r1, #0
    8656:	6878      	ldr	r0, [r7, #4]
    8658:	4b0d      	ldr	r3, [pc, #52]	; (8690 <_spi_dev_error+0x4c>)
    865a:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
    865c:	2100      	movs	r1, #0
    865e:	6878      	ldr	r0, [r7, #4]
    8660:	4b0c      	ldr	r3, [pc, #48]	; (8694 <_spi_dev_error+0x50>)
    8662:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
    8664:	2100      	movs	r1, #0
    8666:	6878      	ldr	r0, [r7, #4]
    8668:	4b0b      	ldr	r3, [pc, #44]	; (8698 <_spi_dev_error+0x54>)
    866a:	4798      	blx	r3
	spi->stat = 0;
    866c:	68fb      	ldr	r3, [r7, #12]
    866e:	2200      	movs	r2, #0
    8670:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	/* Invoke complete callback */
	if (spi->callbacks.cb_error) {
    8674:	68fb      	ldr	r3, [r7, #12]
    8676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    8678:	2b00      	cmp	r3, #0
    867a:	d004      	beq.n	8686 <_spi_dev_error+0x42>
		spi->callbacks.cb_error(spi, status);
    867c:	68fb      	ldr	r3, [r7, #12]
    867e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    8680:	6839      	ldr	r1, [r7, #0]
    8682:	68f8      	ldr	r0, [r7, #12]
    8684:	4798      	blx	r3
	}
}
    8686:	bf00      	nop
    8688:	3710      	adds	r7, #16
    868a:	46bd      	mov	sp, r7
    868c:	bd80      	pop	{r7, pc}
    868e:	bf00      	nop
    8690:	0000d50d 	.word	0x0000d50d
    8694:	0000d571 	.word	0x0000d571
    8698:	0000d5e1 	.word	0x0000d5e1

0000869c <spi_m_async_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_async_hpl_interface *)func;
}

int32_t spi_m_async_init(struct spi_m_async_descriptor *spi, void *const hw)
{
    869c:	b580      	push	{r7, lr}
    869e:	b084      	sub	sp, #16
    86a0:	af00      	add	r7, sp, #0
    86a2:	6078      	str	r0, [r7, #4]
    86a4:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    86a6:	2300      	movs	r3, #0
    86a8:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    86aa:	687b      	ldr	r3, [r7, #4]
    86ac:	2b00      	cmp	r3, #0
    86ae:	d004      	beq.n	86ba <spi_m_async_init+0x1e>
    86b0:	683b      	ldr	r3, [r7, #0]
    86b2:	2b00      	cmp	r3, #0
    86b4:	d001      	beq.n	86ba <spi_m_async_init+0x1e>
    86b6:	2301      	movs	r3, #1
    86b8:	e000      	b.n	86bc <spi_m_async_init+0x20>
    86ba:	2300      	movs	r3, #0
    86bc:	f003 0301 	and.w	r3, r3, #1
    86c0:	b2db      	uxtb	r3, r3
    86c2:	22a5      	movs	r2, #165	; 0xa5
    86c4:	491c      	ldr	r1, [pc, #112]	; (8738 <spi_m_async_init+0x9c>)
    86c6:	4618      	mov	r0, r3
    86c8:	4b1c      	ldr	r3, [pc, #112]	; (873c <spi_m_async_init+0xa0>)
    86ca:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    86cc:	687b      	ldr	r3, [r7, #4]
    86ce:	683a      	ldr	r2, [r7, #0]
    86d0:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_async_init(&spi->dev, hw);
    86d2:	687b      	ldr	r3, [r7, #4]
    86d4:	3304      	adds	r3, #4
    86d6:	6839      	ldr	r1, [r7, #0]
    86d8:	4618      	mov	r0, r3
    86da:	4b19      	ldr	r3, [pc, #100]	; (8740 <spi_m_async_init+0xa4>)
    86dc:	4798      	blx	r3
    86de:	60f8      	str	r0, [r7, #12]

	if (rc >= 0) {
    86e0:	68fb      	ldr	r3, [r7, #12]
    86e2:	2b00      	cmp	r3, #0
    86e4:	db23      	blt.n	872e <spi_m_async_init+0x92>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    86e6:	687b      	ldr	r3, [r7, #4]
    86e8:	3304      	adds	r3, #4
    86ea:	4a16      	ldr	r2, [pc, #88]	; (8744 <spi_m_async_init+0xa8>)
    86ec:	2100      	movs	r1, #0
    86ee:	4618      	mov	r0, r3
    86f0:	4b15      	ldr	r3, [pc, #84]	; (8748 <spi_m_async_init+0xac>)
    86f2:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    86f4:	687b      	ldr	r3, [r7, #4]
    86f6:	3304      	adds	r3, #4
    86f8:	4a14      	ldr	r2, [pc, #80]	; (874c <spi_m_async_init+0xb0>)
    86fa:	2101      	movs	r1, #1
    86fc:	4618      	mov	r0, r3
    86fe:	4b12      	ldr	r3, [pc, #72]	; (8748 <spi_m_async_init+0xac>)
    8700:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    8702:	687b      	ldr	r3, [r7, #4]
    8704:	3304      	adds	r3, #4
    8706:	4a12      	ldr	r2, [pc, #72]	; (8750 <spi_m_async_init+0xb4>)
    8708:	2102      	movs	r1, #2
    870a:	4618      	mov	r0, r3
    870c:	4b0e      	ldr	r3, [pc, #56]	; (8748 <spi_m_async_init+0xac>)
    870e:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    8710:	687b      	ldr	r3, [r7, #4]
    8712:	3304      	adds	r3, #4
    8714:	4a0f      	ldr	r2, [pc, #60]	; (8754 <spi_m_async_init+0xb8>)
    8716:	2103      	movs	r1, #3
    8718:	4618      	mov	r0, r3
    871a:	4b0b      	ldr	r3, [pc, #44]	; (8748 <spi_m_async_init+0xac>)
    871c:	4798      	blx	r3
	} else {
		return rc;
	}

	spi->io.read  = _spi_m_async_io_read;
    871e:	687b      	ldr	r3, [r7, #4]
    8720:	4a0d      	ldr	r2, [pc, #52]	; (8758 <spi_m_async_init+0xbc>)
    8722:	629a      	str	r2, [r3, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    8724:	687b      	ldr	r3, [r7, #4]
    8726:	4a0d      	ldr	r2, [pc, #52]	; (875c <spi_m_async_init+0xc0>)
    8728:	625a      	str	r2, [r3, #36]	; 0x24
	return ERR_NONE;
    872a:	2300      	movs	r3, #0
    872c:	e000      	b.n	8730 <spi_m_async_init+0x94>
		return rc;
    872e:	68fb      	ldr	r3, [r7, #12]
}
    8730:	4618      	mov	r0, r3
    8732:	3710      	adds	r7, #16
    8734:	46bd      	mov	sp, r7
    8736:	bd80      	pop	{r7, pc}
    8738:	00013e0c 	.word	0x00013e0c
    873c:	000094ed 	.word	0x000094ed
    8740:	0000d20d 	.word	0x0000d20d
    8744:	00008485 	.word	0x00008485
    8748:	0000d6f1 	.word	0x0000d6f1
    874c:	00008505 	.word	0x00008505
    8750:	000085fd 	.word	0x000085fd
    8754:	00008645 	.word	0x00008645
    8758:	00008761 	.word	0x00008761
    875c:	000087e1 	.word	0x000087e1

00008760 <_spi_m_async_io_read>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_read(struct io_descriptor *io, uint8_t *const buf, const uint16_t length)
{
    8760:	b580      	push	{r7, lr}
    8762:	b086      	sub	sp, #24
    8764:	af00      	add	r7, sp, #0
    8766:	60f8      	str	r0, [r7, #12]
    8768:	60b9      	str	r1, [r7, #8]
    876a:	4613      	mov	r3, r2
    876c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    876e:	68fb      	ldr	r3, [r7, #12]
    8770:	2b00      	cmp	r3, #0
    8772:	bf14      	ite	ne
    8774:	2301      	movne	r3, #1
    8776:	2300      	moveq	r3, #0
    8778:	b2db      	uxtb	r3, r3
    877a:	f240 1205 	movw	r2, #261	; 0x105
    877e:	4914      	ldr	r1, [pc, #80]	; (87d0 <_spi_m_async_io_read+0x70>)
    8780:	4618      	mov	r0, r3
    8782:	4b14      	ldr	r3, [pc, #80]	; (87d4 <_spi_m_async_io_read+0x74>)
    8784:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);
    8786:	68fb      	ldr	r3, [r7, #12]
    8788:	3b24      	subs	r3, #36	; 0x24
    878a:	617b      	str	r3, [r7, #20]

	spi->xfer.rxbuf = buf;
    878c:	697b      	ldr	r3, [r7, #20]
    878e:	68ba      	ldr	r2, [r7, #8]
    8790:	63da      	str	r2, [r3, #60]	; 0x3c
	spi->xfer.txbuf = NULL;
    8792:	697b      	ldr	r3, [r7, #20]
    8794:	2200      	movs	r2, #0
    8796:	639a      	str	r2, [r3, #56]	; 0x38
	spi->xfer.size  = length;
    8798:	88fa      	ldrh	r2, [r7, #6]
    879a:	697b      	ldr	r3, [r7, #20]
    879c:	641a      	str	r2, [r3, #64]	; 0x40
	spi->xfercnt    = 0;
    879e:	697b      	ldr	r3, [r7, #20]
    87a0:	2200      	movs	r2, #0
    87a2:	645a      	str	r2, [r3, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    87a4:	697b      	ldr	r3, [r7, #20]
    87a6:	2210      	movs	r2, #16
    87a8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	_spi_m_async_enable_rx(&spi->dev, true);
    87ac:	697b      	ldr	r3, [r7, #20]
    87ae:	3304      	adds	r3, #4
    87b0:	2101      	movs	r1, #1
    87b2:	4618      	mov	r0, r3
    87b4:	4b08      	ldr	r3, [pc, #32]	; (87d8 <_spi_m_async_io_read+0x78>)
    87b6:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
    87b8:	697b      	ldr	r3, [r7, #20]
    87ba:	3304      	adds	r3, #4
    87bc:	f240 11ff 	movw	r1, #511	; 0x1ff
    87c0:	4618      	mov	r0, r3
    87c2:	4b06      	ldr	r3, [pc, #24]	; (87dc <_spi_m_async_io_read+0x7c>)
    87c4:	4798      	blx	r3

	return ERR_NONE;
    87c6:	2300      	movs	r3, #0
}
    87c8:	4618      	mov	r0, r3
    87ca:	3718      	adds	r7, #24
    87cc:	46bd      	mov	sp, r7
    87ce:	bd80      	pop	{r7, pc}
    87d0:	00013e0c 	.word	0x00013e0c
    87d4:	000094ed 	.word	0x000094ed
    87d8:	0000d571 	.word	0x0000d571
    87dc:	0000d649 	.word	0x0000d649

000087e0 <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    87e0:	b580      	push	{r7, lr}
    87e2:	b086      	sub	sp, #24
    87e4:	af00      	add	r7, sp, #0
    87e6:	60f8      	str	r0, [r7, #12]
    87e8:	60b9      	str	r1, [r7, #8]
    87ea:	4613      	mov	r3, r2
    87ec:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    87ee:	68fb      	ldr	r3, [r7, #12]
    87f0:	2b00      	cmp	r3, #0
    87f2:	bf14      	ite	ne
    87f4:	2301      	movne	r3, #1
    87f6:	2300      	moveq	r3, #0
    87f8:	b2db      	uxtb	r3, r3
    87fa:	f240 1227 	movw	r2, #295	; 0x127
    87fe:	4911      	ldr	r1, [pc, #68]	; (8844 <_spi_m_async_io_write+0x64>)
    8800:	4618      	mov	r0, r3
    8802:	4b11      	ldr	r3, [pc, #68]	; (8848 <_spi_m_async_io_write+0x68>)
    8804:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);
    8806:	68fb      	ldr	r3, [r7, #12]
    8808:	3b24      	subs	r3, #36	; 0x24
    880a:	617b      	str	r3, [r7, #20]

	spi->xfer.rxbuf = NULL;
    880c:	697b      	ldr	r3, [r7, #20]
    880e:	2200      	movs	r2, #0
    8810:	63da      	str	r2, [r3, #60]	; 0x3c
	spi->xfer.txbuf = (uint8_t *)buf;
    8812:	697b      	ldr	r3, [r7, #20]
    8814:	68ba      	ldr	r2, [r7, #8]
    8816:	639a      	str	r2, [r3, #56]	; 0x38
	spi->xfer.size  = length;
    8818:	88fa      	ldrh	r2, [r7, #6]
    881a:	697b      	ldr	r3, [r7, #20]
    881c:	641a      	str	r2, [r3, #64]	; 0x40
	spi->xfercnt    = 0;
    881e:	697b      	ldr	r3, [r7, #20]
    8820:	2200      	movs	r2, #0
    8822:	645a      	str	r2, [r3, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    8824:	697b      	ldr	r3, [r7, #20]
    8826:	2210      	movs	r2, #16
    8828:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	_spi_m_async_enable_tx(&spi->dev, true);
    882c:	697b      	ldr	r3, [r7, #20]
    882e:	3304      	adds	r3, #4
    8830:	2101      	movs	r1, #1
    8832:	4618      	mov	r0, r3
    8834:	4b05      	ldr	r3, [pc, #20]	; (884c <_spi_m_async_io_write+0x6c>)
    8836:	4798      	blx	r3

	return ERR_NONE;
    8838:	2300      	movs	r3, #0
}
    883a:	4618      	mov	r0, r3
    883c:	3718      	adds	r7, #24
    883e:	46bd      	mov	sp, r7
    8840:	bd80      	pop	{r7, pc}
    8842:	bf00      	nop
    8844:	00013e0c 	.word	0x00013e0c
    8848:	000094ed 	.word	0x000094ed
    884c:	0000d50d 	.word	0x0000d50d

00008850 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    8850:	b580      	push	{r7, lr}
    8852:	b084      	sub	sp, #16
    8854:	af00      	add	r7, sp, #0
    8856:	6078      	str	r0, [r7, #4]
    8858:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    885a:	2300      	movs	r3, #0
    885c:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    885e:	687b      	ldr	r3, [r7, #4]
    8860:	2b00      	cmp	r3, #0
    8862:	d004      	beq.n	886e <spi_m_sync_init+0x1e>
    8864:	683b      	ldr	r3, [r7, #0]
    8866:	2b00      	cmp	r3, #0
    8868:	d001      	beq.n	886e <spi_m_sync_init+0x1e>
    886a:	2301      	movs	r3, #1
    886c:	e000      	b.n	8870 <spi_m_sync_init+0x20>
    886e:	2300      	movs	r3, #0
    8870:	f003 0301 	and.w	r3, r3, #1
    8874:	b2db      	uxtb	r3, r3
    8876:	2240      	movs	r2, #64	; 0x40
    8878:	4910      	ldr	r1, [pc, #64]	; (88bc <spi_m_sync_init+0x6c>)
    887a:	4618      	mov	r0, r3
    887c:	4b10      	ldr	r3, [pc, #64]	; (88c0 <spi_m_sync_init+0x70>)
    887e:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    8880:	687b      	ldr	r3, [r7, #4]
    8882:	683a      	ldr	r2, [r7, #0]
    8884:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    8886:	687b      	ldr	r3, [r7, #4]
    8888:	3304      	adds	r3, #4
    888a:	6839      	ldr	r1, [r7, #0]
    888c:	4618      	mov	r0, r3
    888e:	4b0d      	ldr	r3, [pc, #52]	; (88c4 <spi_m_sync_init+0x74>)
    8890:	4798      	blx	r3
    8892:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    8894:	68fb      	ldr	r3, [r7, #12]
    8896:	2b00      	cmp	r3, #0
    8898:	da01      	bge.n	889e <spi_m_sync_init+0x4e>
		return rc;
    889a:	68fb      	ldr	r3, [r7, #12]
    889c:	e00a      	b.n	88b4 <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    889e:	687b      	ldr	r3, [r7, #4]
    88a0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    88a4:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    88a6:	687b      	ldr	r3, [r7, #4]
    88a8:	4a07      	ldr	r2, [pc, #28]	; (88c8 <spi_m_sync_init+0x78>)
    88aa:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    88ac:	687b      	ldr	r3, [r7, #4]
    88ae:	4a07      	ldr	r2, [pc, #28]	; (88cc <spi_m_sync_init+0x7c>)
    88b0:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    88b2:	2300      	movs	r3, #0
}
    88b4:	4618      	mov	r0, r3
    88b6:	3710      	adds	r7, #16
    88b8:	46bd      	mov	sp, r7
    88ba:	bd80      	pop	{r7, pc}
    88bc:	00013e2c 	.word	0x00013e2c
    88c0:	000094ed 	.word	0x000094ed
    88c4:	0000d101 	.word	0x0000d101
    88c8:	000088d1 	.word	0x000088d1
    88cc:	00008929 	.word	0x00008929

000088d0 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    88d0:	b580      	push	{r7, lr}
    88d2:	b088      	sub	sp, #32
    88d4:	af00      	add	r7, sp, #0
    88d6:	60f8      	str	r0, [r7, #12]
    88d8:	60b9      	str	r1, [r7, #8]
    88da:	4613      	mov	r3, r2
    88dc:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    88de:	68fb      	ldr	r3, [r7, #12]
    88e0:	2b00      	cmp	r3, #0
    88e2:	bf14      	ite	ne
    88e4:	2301      	movne	r3, #1
    88e6:	2300      	moveq	r3, #0
    88e8:	b2db      	uxtb	r3, r3
    88ea:	2287      	movs	r2, #135	; 0x87
    88ec:	490b      	ldr	r1, [pc, #44]	; (891c <_spi_m_sync_io_read+0x4c>)
    88ee:	4618      	mov	r0, r3
    88f0:	4b0b      	ldr	r3, [pc, #44]	; (8920 <_spi_m_sync_io_read+0x50>)
    88f2:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    88f4:	68fb      	ldr	r3, [r7, #12]
    88f6:	3b0c      	subs	r3, #12
    88f8:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    88fa:	68bb      	ldr	r3, [r7, #8]
    88fc:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    88fe:	2300      	movs	r3, #0
    8900:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    8902:	88fb      	ldrh	r3, [r7, #6]
    8904:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    8906:	f107 0310 	add.w	r3, r7, #16
    890a:	4619      	mov	r1, r3
    890c:	69f8      	ldr	r0, [r7, #28]
    890e:	4b05      	ldr	r3, [pc, #20]	; (8924 <_spi_m_sync_io_read+0x54>)
    8910:	4798      	blx	r3
    8912:	4603      	mov	r3, r0
}
    8914:	4618      	mov	r0, r3
    8916:	3720      	adds	r7, #32
    8918:	46bd      	mov	sp, r7
    891a:	bd80      	pop	{r7, pc}
    891c:	00013e2c 	.word	0x00013e2c
    8920:	000094ed 	.word	0x000094ed
    8924:	00008981 	.word	0x00008981

00008928 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    8928:	b580      	push	{r7, lr}
    892a:	b088      	sub	sp, #32
    892c:	af00      	add	r7, sp, #0
    892e:	60f8      	str	r0, [r7, #12]
    8930:	60b9      	str	r1, [r7, #8]
    8932:	4613      	mov	r3, r2
    8934:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    8936:	68fb      	ldr	r3, [r7, #12]
    8938:	2b00      	cmp	r3, #0
    893a:	bf14      	ite	ne
    893c:	2301      	movne	r3, #1
    893e:	2300      	moveq	r3, #0
    8940:	b2db      	uxtb	r3, r3
    8942:	22a3      	movs	r2, #163	; 0xa3
    8944:	490b      	ldr	r1, [pc, #44]	; (8974 <_spi_m_sync_io_write+0x4c>)
    8946:	4618      	mov	r0, r3
    8948:	4b0b      	ldr	r3, [pc, #44]	; (8978 <_spi_m_sync_io_write+0x50>)
    894a:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    894c:	68fb      	ldr	r3, [r7, #12]
    894e:	3b0c      	subs	r3, #12
    8950:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    8952:	2300      	movs	r3, #0
    8954:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    8956:	68bb      	ldr	r3, [r7, #8]
    8958:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    895a:	88fb      	ldrh	r3, [r7, #6]
    895c:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    895e:	f107 0310 	add.w	r3, r7, #16
    8962:	4619      	mov	r1, r3
    8964:	69f8      	ldr	r0, [r7, #28]
    8966:	4b05      	ldr	r3, [pc, #20]	; (897c <_spi_m_sync_io_write+0x54>)
    8968:	4798      	blx	r3
    896a:	4603      	mov	r3, r0
}
    896c:	4618      	mov	r0, r3
    896e:	3720      	adds	r7, #32
    8970:	46bd      	mov	sp, r7
    8972:	bd80      	pop	{r7, pc}
    8974:	00013e2c 	.word	0x00013e2c
    8978:	000094ed 	.word	0x000094ed
    897c:	00008981 	.word	0x00008981

00008980 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    8980:	b580      	push	{r7, lr}
    8982:	b086      	sub	sp, #24
    8984:	af00      	add	r7, sp, #0
    8986:	6078      	str	r0, [r7, #4]
    8988:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    898a:	687b      	ldr	r3, [r7, #4]
    898c:	2b00      	cmp	r3, #0
    898e:	d004      	beq.n	899a <spi_m_sync_transfer+0x1a>
    8990:	683b      	ldr	r3, [r7, #0]
    8992:	2b00      	cmp	r3, #0
    8994:	d001      	beq.n	899a <spi_m_sync_transfer+0x1a>
    8996:	2301      	movs	r3, #1
    8998:	e000      	b.n	899c <spi_m_sync_transfer+0x1c>
    899a:	2300      	movs	r3, #0
    899c:	f003 0301 	and.w	r3, r3, #1
    89a0:	b2db      	uxtb	r3, r3
    89a2:	22b3      	movs	r2, #179	; 0xb3
    89a4:	490c      	ldr	r1, [pc, #48]	; (89d8 <spi_m_sync_transfer+0x58>)
    89a6:	4618      	mov	r0, r3
    89a8:	4b0c      	ldr	r3, [pc, #48]	; (89dc <spi_m_sync_transfer+0x5c>)
    89aa:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    89ac:	683b      	ldr	r3, [r7, #0]
    89ae:	681b      	ldr	r3, [r3, #0]
    89b0:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    89b2:	683b      	ldr	r3, [r7, #0]
    89b4:	685b      	ldr	r3, [r3, #4]
    89b6:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    89b8:	683b      	ldr	r3, [r7, #0]
    89ba:	689b      	ldr	r3, [r3, #8]
    89bc:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    89be:	687b      	ldr	r3, [r7, #4]
    89c0:	3304      	adds	r3, #4
    89c2:	f107 020c 	add.w	r2, r7, #12
    89c6:	4611      	mov	r1, r2
    89c8:	4618      	mov	r0, r3
    89ca:	4b05      	ldr	r3, [pc, #20]	; (89e0 <spi_m_sync_transfer+0x60>)
    89cc:	4798      	blx	r3
    89ce:	4603      	mov	r3, r0
}
    89d0:	4618      	mov	r0, r3
    89d2:	3718      	adds	r7, #24
    89d4:	46bd      	mov	sp, r7
    89d6:	bd80      	pop	{r7, pc}
    89d8:	00013e2c 	.word	0x00013e2c
    89dc:	000094ed 	.word	0x000094ed
    89e0:	0000d3f1 	.word	0x0000d3f1

000089e4 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    89e4:	b480      	push	{r7}
    89e6:	b083      	sub	sp, #12
    89e8:	af00      	add	r7, sp, #0
    89ea:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    89ec:	687b      	ldr	r3, [r7, #4]
    89ee:	681b      	ldr	r3, [r3, #0]
}
    89f0:	4618      	mov	r0, r3
    89f2:	370c      	adds	r7, #12
    89f4:	46bd      	mov	sp, r7
    89f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    89fa:	4770      	bx	lr

000089fc <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    89fc:	b480      	push	{r7}
    89fe:	b083      	sub	sp, #12
    8a00:	af00      	add	r7, sp, #0
    8a02:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    8a04:	687b      	ldr	r3, [r7, #4]
    8a06:	2b00      	cmp	r3, #0
    8a08:	d002      	beq.n	8a10 <list_get_next_element+0x14>
    8a0a:	687b      	ldr	r3, [r7, #4]
    8a0c:	681b      	ldr	r3, [r3, #0]
    8a0e:	e000      	b.n	8a12 <list_get_next_element+0x16>
    8a10:	2300      	movs	r3, #0
}
    8a12:	4618      	mov	r0, r3
    8a14:	370c      	adds	r7, #12
    8a16:	46bd      	mov	sp, r7
    8a18:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a1c:	4770      	bx	lr
	...

00008a20 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    8a20:	b580      	push	{r7, lr}
    8a22:	b084      	sub	sp, #16
    8a24:	af00      	add	r7, sp, #0
    8a26:	60f8      	str	r0, [r7, #12]
    8a28:	60b9      	str	r1, [r7, #8]
    8a2a:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    8a2c:	68fb      	ldr	r3, [r7, #12]
    8a2e:	2b00      	cmp	r3, #0
    8a30:	d004      	beq.n	8a3c <timer_init+0x1c>
    8a32:	68bb      	ldr	r3, [r7, #8]
    8a34:	2b00      	cmp	r3, #0
    8a36:	d001      	beq.n	8a3c <timer_init+0x1c>
    8a38:	2301      	movs	r3, #1
    8a3a:	e000      	b.n	8a3e <timer_init+0x1e>
    8a3c:	2300      	movs	r3, #0
    8a3e:	f003 0301 	and.w	r3, r3, #1
    8a42:	b2db      	uxtb	r3, r3
    8a44:	223b      	movs	r2, #59	; 0x3b
    8a46:	490a      	ldr	r1, [pc, #40]	; (8a70 <timer_init+0x50>)
    8a48:	4618      	mov	r0, r3
    8a4a:	4b0a      	ldr	r3, [pc, #40]	; (8a74 <timer_init+0x54>)
    8a4c:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    8a4e:	68fb      	ldr	r3, [r7, #12]
    8a50:	68b9      	ldr	r1, [r7, #8]
    8a52:	4618      	mov	r0, r3
    8a54:	4b08      	ldr	r3, [pc, #32]	; (8a78 <timer_init+0x58>)
    8a56:	4798      	blx	r3
	descr->time                           = 0;
    8a58:	68fb      	ldr	r3, [r7, #12]
    8a5a:	2200      	movs	r2, #0
    8a5c:	611a      	str	r2, [r3, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    8a5e:	68fb      	ldr	r3, [r7, #12]
    8a60:	4a06      	ldr	r2, [pc, #24]	; (8a7c <timer_init+0x5c>)
    8a62:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    8a64:	2300      	movs	r3, #0
}
    8a66:	4618      	mov	r0, r3
    8a68:	3710      	adds	r7, #16
    8a6a:	46bd      	mov	sp, r7
    8a6c:	bd80      	pop	{r7, pc}
    8a6e:	bf00      	nop
    8a70:	00013e48 	.word	0x00013e48
    8a74:	000094ed 	.word	0x000094ed
    8a78:	0000da89 	.word	0x0000da89
    8a7c:	00008b31 	.word	0x00008b31

00008a80 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    8a80:	b580      	push	{r7, lr}
    8a82:	b088      	sub	sp, #32
    8a84:	af00      	add	r7, sp, #0
    8a86:	60f8      	str	r0, [r7, #12]
    8a88:	60b9      	str	r1, [r7, #8]
    8a8a:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    8a8c:	2300      	movs	r3, #0
    8a8e:	61bb      	str	r3, [r7, #24]
    8a90:	68f8      	ldr	r0, [r7, #12]
    8a92:	4b23      	ldr	r3, [pc, #140]	; (8b20 <timer_add_timer_task+0xa0>)
    8a94:	4798      	blx	r3
    8a96:	6138      	str	r0, [r7, #16]

	if (!head) {
    8a98:	693b      	ldr	r3, [r7, #16]
    8a9a:	2b00      	cmp	r3, #0
    8a9c:	d104      	bne.n	8aa8 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    8a9e:	68b9      	ldr	r1, [r7, #8]
    8aa0:	68f8      	ldr	r0, [r7, #12]
    8aa2:	4b20      	ldr	r3, [pc, #128]	; (8b24 <timer_add_timer_task+0xa4>)
    8aa4:	4798      	blx	r3
		return;
    8aa6:	e037      	b.n	8b18 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    8aa8:	693b      	ldr	r3, [r7, #16]
    8aaa:	61fb      	str	r3, [r7, #28]
    8aac:	e022      	b.n	8af4 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    8aae:	69fb      	ldr	r3, [r7, #28]
    8ab0:	685a      	ldr	r2, [r3, #4]
    8ab2:	687b      	ldr	r3, [r7, #4]
    8ab4:	429a      	cmp	r2, r3
    8ab6:	d808      	bhi.n	8aca <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    8ab8:	69fb      	ldr	r3, [r7, #28]
    8aba:	689a      	ldr	r2, [r3, #8]
    8abc:	69fb      	ldr	r3, [r7, #28]
    8abe:	6859      	ldr	r1, [r3, #4]
    8ac0:	687b      	ldr	r3, [r7, #4]
    8ac2:	1acb      	subs	r3, r1, r3
    8ac4:	4413      	add	r3, r2
    8ac6:	617b      	str	r3, [r7, #20]
    8ac8:	e009      	b.n	8ade <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    8aca:	69fb      	ldr	r3, [r7, #28]
    8acc:	689a      	ldr	r2, [r3, #8]
    8ace:	69fb      	ldr	r3, [r7, #28]
    8ad0:	685b      	ldr	r3, [r3, #4]
    8ad2:	441a      	add	r2, r3
    8ad4:	687b      	ldr	r3, [r7, #4]
    8ad6:	425b      	negs	r3, r3
    8ad8:	4413      	add	r3, r2
    8ada:	3301      	adds	r3, #1
    8adc:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    8ade:	68bb      	ldr	r3, [r7, #8]
    8ae0:	689a      	ldr	r2, [r3, #8]
    8ae2:	697b      	ldr	r3, [r7, #20]
    8ae4:	429a      	cmp	r2, r3
    8ae6:	d909      	bls.n	8afc <timer_add_timer_task+0x7c>
			break;
		prev = it;
    8ae8:	69fb      	ldr	r3, [r7, #28]
    8aea:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    8aec:	69f8      	ldr	r0, [r7, #28]
    8aee:	4b0e      	ldr	r3, [pc, #56]	; (8b28 <timer_add_timer_task+0xa8>)
    8af0:	4798      	blx	r3
    8af2:	61f8      	str	r0, [r7, #28]
    8af4:	69fb      	ldr	r3, [r7, #28]
    8af6:	2b00      	cmp	r3, #0
    8af8:	d1d9      	bne.n	8aae <timer_add_timer_task+0x2e>
    8afa:	e000      	b.n	8afe <timer_add_timer_task+0x7e>
			break;
    8afc:	bf00      	nop
	}

	if (it == head) {
    8afe:	69fa      	ldr	r2, [r7, #28]
    8b00:	693b      	ldr	r3, [r7, #16]
    8b02:	429a      	cmp	r2, r3
    8b04:	d104      	bne.n	8b10 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    8b06:	68b9      	ldr	r1, [r7, #8]
    8b08:	68f8      	ldr	r0, [r7, #12]
    8b0a:	4b06      	ldr	r3, [pc, #24]	; (8b24 <timer_add_timer_task+0xa4>)
    8b0c:	4798      	blx	r3
    8b0e:	e003      	b.n	8b18 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    8b10:	68b9      	ldr	r1, [r7, #8]
    8b12:	69b8      	ldr	r0, [r7, #24]
    8b14:	4b05      	ldr	r3, [pc, #20]	; (8b2c <timer_add_timer_task+0xac>)
    8b16:	4798      	blx	r3
	}
}
    8b18:	3720      	adds	r7, #32
    8b1a:	46bd      	mov	sp, r7
    8b1c:	bd80      	pop	{r7, pc}
    8b1e:	bf00      	nop
    8b20:	000089e5 	.word	0x000089e5
    8b24:	0000954d 	.word	0x0000954d
    8b28:	000089fd 	.word	0x000089fd
    8b2c:	000095a5 	.word	0x000095a5

00008b30 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    8b30:	b580      	push	{r7, lr}
    8b32:	b086      	sub	sp, #24
    8b34:	af00      	add	r7, sp, #0
    8b36:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    8b38:	687b      	ldr	r3, [r7, #4]
    8b3a:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    8b3c:	693b      	ldr	r3, [r7, #16]
    8b3e:	3314      	adds	r3, #20
    8b40:	4618      	mov	r0, r3
    8b42:	4b27      	ldr	r3, [pc, #156]	; (8be0 <timer_process_counted+0xb0>)
    8b44:	4798      	blx	r3
    8b46:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    8b48:	693b      	ldr	r3, [r7, #16]
    8b4a:	691b      	ldr	r3, [r3, #16]
    8b4c:	1c5a      	adds	r2, r3, #1
    8b4e:	693b      	ldr	r3, [r7, #16]
    8b50:	611a      	str	r2, [r3, #16]
    8b52:	693b      	ldr	r3, [r7, #16]
    8b54:	691b      	ldr	r3, [r3, #16]
    8b56:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    8b58:	693b      	ldr	r3, [r7, #16]
    8b5a:	7e1b      	ldrb	r3, [r3, #24]
    8b5c:	b2db      	uxtb	r3, r3
    8b5e:	f003 0301 	and.w	r3, r3, #1
    8b62:	2b00      	cmp	r3, #0
    8b64:	d106      	bne.n	8b74 <timer_process_counted+0x44>
    8b66:	693b      	ldr	r3, [r7, #16]
    8b68:	7e1b      	ldrb	r3, [r3, #24]
    8b6a:	b2db      	uxtb	r3, r3
    8b6c:	f003 0302 	and.w	r3, r3, #2
    8b70:	2b00      	cmp	r3, #0
    8b72:	d027      	beq.n	8bc4 <timer_process_counted+0x94>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    8b74:	693b      	ldr	r3, [r7, #16]
    8b76:	7e1b      	ldrb	r3, [r3, #24]
    8b78:	b2db      	uxtb	r3, r3
    8b7a:	f043 0302 	orr.w	r3, r3, #2
    8b7e:	b2da      	uxtb	r2, r3
    8b80:	693b      	ldr	r3, [r7, #16]
    8b82:	761a      	strb	r2, [r3, #24]
		return;
    8b84:	e029      	b.n	8bda <timer_process_counted+0xaa>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    8b86:	697b      	ldr	r3, [r7, #20]
    8b88:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    8b8a:	693b      	ldr	r3, [r7, #16]
    8b8c:	3314      	adds	r3, #20
    8b8e:	4618      	mov	r0, r3
    8b90:	4b14      	ldr	r3, [pc, #80]	; (8be4 <timer_process_counted+0xb4>)
    8b92:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    8b94:	68bb      	ldr	r3, [r7, #8]
    8b96:	7c1b      	ldrb	r3, [r3, #16]
    8b98:	2b01      	cmp	r3, #1
    8b9a:	d109      	bne.n	8bb0 <timer_process_counted+0x80>
			tmp->time_label = time;
    8b9c:	68bb      	ldr	r3, [r7, #8]
    8b9e:	68fa      	ldr	r2, [r7, #12]
    8ba0:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    8ba2:	693b      	ldr	r3, [r7, #16]
    8ba4:	3314      	adds	r3, #20
    8ba6:	68fa      	ldr	r2, [r7, #12]
    8ba8:	68b9      	ldr	r1, [r7, #8]
    8baa:	4618      	mov	r0, r3
    8bac:	4b0e      	ldr	r3, [pc, #56]	; (8be8 <timer_process_counted+0xb8>)
    8bae:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    8bb0:	693b      	ldr	r3, [r7, #16]
    8bb2:	3314      	adds	r3, #20
    8bb4:	4618      	mov	r0, r3
    8bb6:	4b0a      	ldr	r3, [pc, #40]	; (8be0 <timer_process_counted+0xb0>)
    8bb8:	4798      	blx	r3
    8bba:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    8bbc:	68bb      	ldr	r3, [r7, #8]
    8bbe:	68db      	ldr	r3, [r3, #12]
    8bc0:	68b8      	ldr	r0, [r7, #8]
    8bc2:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    8bc4:	697b      	ldr	r3, [r7, #20]
    8bc6:	2b00      	cmp	r3, #0
    8bc8:	d007      	beq.n	8bda <timer_process_counted+0xaa>
    8bca:	697b      	ldr	r3, [r7, #20]
    8bcc:	685b      	ldr	r3, [r3, #4]
    8bce:	68fa      	ldr	r2, [r7, #12]
    8bd0:	1ad2      	subs	r2, r2, r3
    8bd2:	697b      	ldr	r3, [r7, #20]
    8bd4:	689b      	ldr	r3, [r3, #8]
    8bd6:	429a      	cmp	r2, r3
    8bd8:	d2d5      	bcs.n	8b86 <timer_process_counted+0x56>
	}
}
    8bda:	3718      	adds	r7, #24
    8bdc:	46bd      	mov	sp, r7
    8bde:	bd80      	pop	{r7, pc}
    8be0:	000089e5 	.word	0x000089e5
    8be4:	00009645 	.word	0x00009645
    8be8:	00008a81 	.word	0x00008a81

00008bec <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    8bec:	b480      	push	{r7}
    8bee:	b085      	sub	sp, #20
    8bf0:	af00      	add	r7, sp, #0
    8bf2:	4603      	mov	r3, r0
    8bf4:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    8bf6:	2300      	movs	r3, #0
    8bf8:	73fb      	strb	r3, [r7, #15]
    8bfa:	e029      	b.n	8c50 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    8bfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
    8c00:	4a19      	ldr	r2, [pc, #100]	; (8c68 <_usb_d_find_ep+0x7c>)
    8c02:	015b      	lsls	r3, r3, #5
    8c04:	4413      	add	r3, r2
    8c06:	3301      	adds	r3, #1
    8c08:	781b      	ldrb	r3, [r3, #0]
    8c0a:	79fa      	ldrb	r2, [r7, #7]
    8c0c:	429a      	cmp	r2, r3
    8c0e:	d102      	bne.n	8c16 <_usb_d_find_ep+0x2a>
			return i;
    8c10:	f997 300f 	ldrsb.w	r3, [r7, #15]
    8c14:	e022      	b.n	8c5c <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    8c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
    8c1a:	4a13      	ldr	r2, [pc, #76]	; (8c68 <_usb_d_find_ep+0x7c>)
    8c1c:	015b      	lsls	r3, r3, #5
    8c1e:	4413      	add	r3, r2
    8c20:	781b      	ldrb	r3, [r3, #0]
    8c22:	2b00      	cmp	r3, #0
    8c24:	d10e      	bne.n	8c44 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    8c26:	79fb      	ldrb	r3, [r7, #7]
    8c28:	f003 030f 	and.w	r3, r3, #15
    8c2c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8c30:	490d      	ldr	r1, [pc, #52]	; (8c68 <_usb_d_find_ep+0x7c>)
    8c32:	0152      	lsls	r2, r2, #5
    8c34:	440a      	add	r2, r1
    8c36:	3201      	adds	r2, #1
    8c38:	7812      	ldrb	r2, [r2, #0]
    8c3a:	4293      	cmp	r3, r2
    8c3c:	d102      	bne.n	8c44 <_usb_d_find_ep+0x58>
			return i;
    8c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    8c42:	e00b      	b.n	8c5c <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    8c44:	f997 300f 	ldrsb.w	r3, [r7, #15]
    8c48:	b2db      	uxtb	r3, r3
    8c4a:	3301      	adds	r3, #1
    8c4c:	b2db      	uxtb	r3, r3
    8c4e:	73fb      	strb	r3, [r7, #15]
    8c50:	f997 300f 	ldrsb.w	r3, [r7, #15]
    8c54:	2b03      	cmp	r3, #3
    8c56:	ddd1      	ble.n	8bfc <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    8c58:	f04f 33ff 	mov.w	r3, #4294967295
}
    8c5c:	4618      	mov	r0, r3
    8c5e:	3714      	adds	r7, #20
    8c60:	46bd      	mov	sp, r7
    8c62:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c66:	4770      	bx	lr
    8c68:	200014e0 	.word	0x200014e0

00008c6c <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    8c6c:	b580      	push	{r7, lr}
    8c6e:	b088      	sub	sp, #32
    8c70:	af00      	add	r7, sp, #0
    8c72:	60ba      	str	r2, [r7, #8]
    8c74:	607b      	str	r3, [r7, #4]
    8c76:	4603      	mov	r3, r0
    8c78:	73fb      	strb	r3, [r7, #15]
    8c7a:	460b      	mov	r3, r1
    8c7c:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    8c7e:	68bb      	ldr	r3, [r7, #8]
    8c80:	617b      	str	r3, [r7, #20]
    8c82:	687b      	ldr	r3, [r7, #4]
    8c84:	61bb      	str	r3, [r7, #24]
    8c86:	7bbb      	ldrb	r3, [r7, #14]
    8c88:	2b00      	cmp	r3, #0
    8c8a:	d004      	beq.n	8c96 <_usb_d_trans+0x2a>
    8c8c:	7bfb      	ldrb	r3, [r7, #15]
    8c8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8c92:	b2db      	uxtb	r3, r3
    8c94:	e003      	b.n	8c9e <_usb_d_trans+0x32>
    8c96:	7bfb      	ldrb	r3, [r7, #15]
    8c98:	f003 030f 	and.w	r3, r3, #15
    8c9c:	b2db      	uxtb	r3, r3
    8c9e:	773b      	strb	r3, [r7, #28]
    8ca0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    8ca4:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    8ca6:	f107 0314 	add.w	r3, r7, #20
    8caa:	4618      	mov	r0, r3
    8cac:	4b03      	ldr	r3, [pc, #12]	; (8cbc <_usb_d_trans+0x50>)
    8cae:	4798      	blx	r3
    8cb0:	4603      	mov	r3, r0
}
    8cb2:	4618      	mov	r0, r3
    8cb4:	3720      	adds	r7, #32
    8cb6:	46bd      	mov	sp, r7
    8cb8:	bd80      	pop	{r7, pc}
    8cba:	bf00      	nop
    8cbc:	00010631 	.word	0x00010631

00008cc0 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    8cc0:	b480      	push	{r7}
    8cc2:	b085      	sub	sp, #20
    8cc4:	af00      	add	r7, sp, #0
    8cc6:	60f8      	str	r0, [r7, #12]
    8cc8:	60b9      	str	r1, [r7, #8]
    8cca:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    8ccc:	2300      	movs	r3, #0
}
    8cce:	4618      	mov	r0, r3
    8cd0:	3714      	adds	r7, #20
    8cd2:	46bd      	mov	sp, r7
    8cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    8cd8:	4770      	bx	lr
	...

00008cdc <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    8cdc:	b580      	push	{r7, lr}
    8cde:	b086      	sub	sp, #24
    8ce0:	af00      	add	r7, sp, #0
    8ce2:	4603      	mov	r3, r0
    8ce4:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    8ce6:	79fb      	ldrb	r3, [r7, #7]
    8ce8:	4618      	mov	r0, r3
    8cea:	4b2a      	ldr	r3, [pc, #168]	; (8d94 <usb_d_cb_trans_setup+0xb8>)
    8cec:	4798      	blx	r3
    8cee:	4603      	mov	r3, r0
    8cf0:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    8cf2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    8cf6:	015b      	lsls	r3, r3, #5
    8cf8:	4a27      	ldr	r2, [pc, #156]	; (8d98 <usb_d_cb_trans_setup+0xbc>)
    8cfa:	4413      	add	r3, r2
    8cfc:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    8cfe:	693b      	ldr	r3, [r7, #16]
    8d00:	330c      	adds	r3, #12
    8d02:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    8d04:	79fb      	ldrb	r3, [r7, #7]
    8d06:	68f9      	ldr	r1, [r7, #12]
    8d08:	4618      	mov	r0, r3
    8d0a:	4b24      	ldr	r3, [pc, #144]	; (8d9c <usb_d_cb_trans_setup+0xc0>)
    8d0c:	4798      	blx	r3
    8d0e:	4603      	mov	r3, r0
    8d10:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    8d12:	7afb      	ldrb	r3, [r7, #11]
    8d14:	2b08      	cmp	r3, #8
    8d16:	d00d      	beq.n	8d34 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    8d18:	79fb      	ldrb	r3, [r7, #7]
    8d1a:	2101      	movs	r1, #1
    8d1c:	4618      	mov	r0, r3
    8d1e:	4b20      	ldr	r3, [pc, #128]	; (8da0 <usb_d_cb_trans_setup+0xc4>)
    8d20:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    8d22:	79fb      	ldrb	r3, [r7, #7]
    8d24:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8d28:	b2db      	uxtb	r3, r3
    8d2a:	2101      	movs	r1, #1
    8d2c:	4618      	mov	r0, r3
    8d2e:	4b1c      	ldr	r3, [pc, #112]	; (8da0 <usb_d_cb_trans_setup+0xc4>)
    8d30:	4798      	blx	r3
		return;
    8d32:	e02b      	b.n	8d8c <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    8d34:	79fb      	ldrb	r3, [r7, #7]
    8d36:	2100      	movs	r1, #0
    8d38:	4618      	mov	r0, r3
    8d3a:	4b19      	ldr	r3, [pc, #100]	; (8da0 <usb_d_cb_trans_setup+0xc4>)
    8d3c:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    8d3e:	79fb      	ldrb	r3, [r7, #7]
    8d40:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8d44:	b2db      	uxtb	r3, r3
    8d46:	2100      	movs	r1, #0
    8d48:	4618      	mov	r0, r3
    8d4a:	4b15      	ldr	r3, [pc, #84]	; (8da0 <usb_d_cb_trans_setup+0xc4>)
    8d4c:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    8d4e:	693b      	ldr	r3, [r7, #16]
    8d50:	2201      	movs	r2, #1
    8d52:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    8d54:	693b      	ldr	r3, [r7, #16]
    8d56:	695b      	ldr	r3, [r3, #20]
    8d58:	79fa      	ldrb	r2, [r7, #7]
    8d5a:	68f9      	ldr	r1, [r7, #12]
    8d5c:	4610      	mov	r0, r2
    8d5e:	4798      	blx	r3
    8d60:	4603      	mov	r3, r0
    8d62:	f083 0301 	eor.w	r3, r3, #1
    8d66:	b2db      	uxtb	r3, r3
    8d68:	2b00      	cmp	r3, #0
    8d6a:	d00f      	beq.n	8d8c <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    8d6c:	693b      	ldr	r3, [r7, #16]
    8d6e:	2205      	movs	r2, #5
    8d70:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    8d72:	79fb      	ldrb	r3, [r7, #7]
    8d74:	2101      	movs	r1, #1
    8d76:	4618      	mov	r0, r3
    8d78:	4b09      	ldr	r3, [pc, #36]	; (8da0 <usb_d_cb_trans_setup+0xc4>)
    8d7a:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    8d7c:	79fb      	ldrb	r3, [r7, #7]
    8d7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8d82:	b2db      	uxtb	r3, r3
    8d84:	2101      	movs	r1, #1
    8d86:	4618      	mov	r0, r3
    8d88:	4b05      	ldr	r3, [pc, #20]	; (8da0 <usb_d_cb_trans_setup+0xc4>)
    8d8a:	4798      	blx	r3
	}
}
    8d8c:	3718      	adds	r7, #24
    8d8e:	46bd      	mov	sp, r7
    8d90:	bd80      	pop	{r7, pc}
    8d92:	bf00      	nop
    8d94:	00008bed 	.word	0x00008bed
    8d98:	200014e0 	.word	0x200014e0
    8d9c:	00010589 	.word	0x00010589
    8da0:	00010401 	.word	0x00010401

00008da4 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    8da4:	b580      	push	{r7, lr}
    8da6:	b084      	sub	sp, #16
    8da8:	af00      	add	r7, sp, #0
    8daa:	4603      	mov	r3, r0
    8dac:	6039      	str	r1, [r7, #0]
    8dae:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    8db0:	79fb      	ldrb	r3, [r7, #7]
    8db2:	4618      	mov	r0, r3
    8db4:	4b0d      	ldr	r3, [pc, #52]	; (8dec <usb_d_cb_trans_more+0x48>)
    8db6:	4798      	blx	r3
    8db8:	4603      	mov	r3, r0
    8dba:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    8dbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
    8dc0:	015b      	lsls	r3, r3, #5
    8dc2:	4a0b      	ldr	r2, [pc, #44]	; (8df0 <usb_d_cb_trans_more+0x4c>)
    8dc4:	4413      	add	r3, r2
    8dc6:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    8dc8:	68bb      	ldr	r3, [r7, #8]
    8dca:	789b      	ldrb	r3, [r3, #2]
    8dcc:	2b03      	cmp	r3, #3
    8dce:	d107      	bne.n	8de0 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    8dd0:	68bb      	ldr	r3, [r7, #8]
    8dd2:	699b      	ldr	r3, [r3, #24]
    8dd4:	79fa      	ldrb	r2, [r7, #7]
    8dd6:	6839      	ldr	r1, [r7, #0]
    8dd8:	4610      	mov	r0, r2
    8dda:	4798      	blx	r3
    8ddc:	4603      	mov	r3, r0
    8dde:	e000      	b.n	8de2 <usb_d_cb_trans_more+0x3e>
	}
	return false;
    8de0:	2300      	movs	r3, #0
}
    8de2:	4618      	mov	r0, r3
    8de4:	3710      	adds	r7, #16
    8de6:	46bd      	mov	sp, r7
    8de8:	bd80      	pop	{r7, pc}
    8dea:	bf00      	nop
    8dec:	00008bed 	.word	0x00008bed
    8df0:	200014e0 	.word	0x200014e0

00008df4 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    8df4:	b590      	push	{r4, r7, lr}
    8df6:	b087      	sub	sp, #28
    8df8:	af02      	add	r7, sp, #8
    8dfa:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    8dfc:	687b      	ldr	r3, [r7, #4]
    8dfe:	789b      	ldrb	r3, [r3, #2]
    8e00:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    8e02:	687b      	ldr	r3, [r7, #4]
    8e04:	7b1b      	ldrb	r3, [r3, #12]
    8e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
    8e0a:	2b00      	cmp	r3, #0
    8e0c:	bf14      	ite	ne
    8e0e:	2301      	movne	r3, #1
    8e10:	2300      	moveq	r3, #0
    8e12:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    8e14:	7bfb      	ldrb	r3, [r7, #15]
    8e16:	2b03      	cmp	r3, #3
    8e18:	d13a      	bne.n	8e90 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    8e1a:	687b      	ldr	r3, [r7, #4]
    8e1c:	69db      	ldr	r3, [r3, #28]
    8e1e:	687a      	ldr	r2, [r7, #4]
    8e20:	7850      	ldrb	r0, [r2, #1]
    8e22:	687a      	ldr	r2, [r7, #4]
    8e24:	320c      	adds	r2, #12
    8e26:	2101      	movs	r1, #1
    8e28:	4798      	blx	r3
    8e2a:	4603      	mov	r3, r0
    8e2c:	737b      	strb	r3, [r7, #13]
		if (err) {
    8e2e:	7b7b      	ldrb	r3, [r7, #13]
    8e30:	2b00      	cmp	r3, #0
    8e32:	d015      	beq.n	8e60 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    8e34:	687b      	ldr	r3, [r7, #4]
    8e36:	2205      	movs	r2, #5
    8e38:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    8e3a:	687b      	ldr	r3, [r7, #4]
    8e3c:	2202      	movs	r2, #2
    8e3e:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    8e40:	7bbb      	ldrb	r3, [r7, #14]
    8e42:	2b00      	cmp	r3, #0
    8e44:	d002      	beq.n	8e4c <usb_d_ctrl_trans_done+0x58>
    8e46:	687b      	ldr	r3, [r7, #4]
    8e48:	785b      	ldrb	r3, [r3, #1]
    8e4a:	e004      	b.n	8e56 <usb_d_ctrl_trans_done+0x62>
    8e4c:	687b      	ldr	r3, [r7, #4]
    8e4e:	785b      	ldrb	r3, [r3, #1]
    8e50:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8e54:	b2db      	uxtb	r3, r3
    8e56:	2101      	movs	r1, #1
    8e58:	4618      	mov	r0, r3
    8e5a:	4b15      	ldr	r3, [pc, #84]	; (8eb0 <usb_d_ctrl_trans_done+0xbc>)
    8e5c:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    8e5e:	e022      	b.n	8ea6 <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    8e60:	687b      	ldr	r3, [r7, #4]
    8e62:	2204      	movs	r2, #4
    8e64:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    8e66:	687b      	ldr	r3, [r7, #4]
    8e68:	7858      	ldrb	r0, [r3, #1]
    8e6a:	7bbb      	ldrb	r3, [r7, #14]
    8e6c:	2b00      	cmp	r3, #0
    8e6e:	bf14      	ite	ne
    8e70:	2301      	movne	r3, #1
    8e72:	2300      	moveq	r3, #0
    8e74:	b2db      	uxtb	r3, r3
    8e76:	f083 0301 	eor.w	r3, r3, #1
    8e7a:	b2db      	uxtb	r3, r3
    8e7c:	f003 0301 	and.w	r3, r3, #1
    8e80:	b2d9      	uxtb	r1, r3
    8e82:	2301      	movs	r3, #1
    8e84:	9300      	str	r3, [sp, #0]
    8e86:	2300      	movs	r3, #0
    8e88:	2200      	movs	r2, #0
    8e8a:	4c0a      	ldr	r4, [pc, #40]	; (8eb4 <usb_d_ctrl_trans_done+0xc0>)
    8e8c:	47a0      	blx	r4
}
    8e8e:	e00a      	b.n	8ea6 <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    8e90:	687b      	ldr	r3, [r7, #4]
    8e92:	69db      	ldr	r3, [r3, #28]
    8e94:	687a      	ldr	r2, [r7, #4]
    8e96:	7850      	ldrb	r0, [r2, #1]
    8e98:	687a      	ldr	r2, [r7, #4]
    8e9a:	320c      	adds	r2, #12
    8e9c:	2100      	movs	r1, #0
    8e9e:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    8ea0:	687b      	ldr	r3, [r7, #4]
    8ea2:	2202      	movs	r2, #2
    8ea4:	709a      	strb	r2, [r3, #2]
}
    8ea6:	bf00      	nop
    8ea8:	3714      	adds	r7, #20
    8eaa:	46bd      	mov	sp, r7
    8eac:	bd90      	pop	{r4, r7, pc}
    8eae:	bf00      	nop
    8eb0:	00010401 	.word	0x00010401
    8eb4:	00008c6d 	.word	0x00008c6d

00008eb8 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    8eb8:	b580      	push	{r7, lr}
    8eba:	b086      	sub	sp, #24
    8ebc:	af00      	add	r7, sp, #0
    8ebe:	4603      	mov	r3, r0
    8ec0:	60b9      	str	r1, [r7, #8]
    8ec2:	607a      	str	r2, [r7, #4]
    8ec4:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    8ec6:	7bfb      	ldrb	r3, [r7, #15]
    8ec8:	4618      	mov	r0, r3
    8eca:	4b2f      	ldr	r3, [pc, #188]	; (8f88 <_usb_d_cb_trans_done+0xd0>)
    8ecc:	4798      	blx	r3
    8ece:	4603      	mov	r3, r0
    8ed0:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    8ed2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    8ed6:	015b      	lsls	r3, r3, #5
    8ed8:	4a2c      	ldr	r2, [pc, #176]	; (8f8c <_usb_d_cb_trans_done+0xd4>)
    8eda:	4413      	add	r3, r2
    8edc:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    8ede:	68bb      	ldr	r3, [r7, #8]
    8ee0:	2b00      	cmp	r3, #0
    8ee2:	d10e      	bne.n	8f02 <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    8ee4:	693b      	ldr	r3, [r7, #16]
    8ee6:	2200      	movs	r2, #0
    8ee8:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    8eea:	693b      	ldr	r3, [r7, #16]
    8eec:	781b      	ldrb	r3, [r3, #0]
    8eee:	2b00      	cmp	r3, #0
    8ef0:	d103      	bne.n	8efa <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    8ef2:	6938      	ldr	r0, [r7, #16]
    8ef4:	4b26      	ldr	r3, [pc, #152]	; (8f90 <_usb_d_cb_trans_done+0xd8>)
    8ef6:	4798      	blx	r3
			return;
    8ef8:	e043      	b.n	8f82 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    8efa:	693b      	ldr	r3, [r7, #16]
    8efc:	2201      	movs	r2, #1
    8efe:	709a      	strb	r2, [r3, #2]
    8f00:	e038      	b.n	8f74 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    8f02:	68bb      	ldr	r3, [r7, #8]
    8f04:	2b01      	cmp	r3, #1
    8f06:	d113      	bne.n	8f30 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    8f08:	693b      	ldr	r3, [r7, #16]
    8f0a:	2202      	movs	r2, #2
    8f0c:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    8f0e:	693b      	ldr	r3, [r7, #16]
    8f10:	781b      	ldrb	r3, [r3, #0]
    8f12:	2b00      	cmp	r3, #0
    8f14:	d108      	bne.n	8f28 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    8f16:	693b      	ldr	r3, [r7, #16]
    8f18:	2202      	movs	r2, #2
    8f1a:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    8f1c:	7bfb      	ldrb	r3, [r7, #15]
    8f1e:	2100      	movs	r1, #0
    8f20:	4618      	mov	r0, r3
    8f22:	4b1c      	ldr	r3, [pc, #112]	; (8f94 <_usb_d_cb_trans_done+0xdc>)
    8f24:	4798      	blx	r3
    8f26:	e025      	b.n	8f74 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    8f28:	693b      	ldr	r3, [r7, #16]
    8f2a:	2205      	movs	r2, #5
    8f2c:	709a      	strb	r2, [r3, #2]
    8f2e:	e021      	b.n	8f74 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    8f30:	68bb      	ldr	r3, [r7, #8]
    8f32:	2b02      	cmp	r3, #2
    8f34:	d10e      	bne.n	8f54 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    8f36:	693b      	ldr	r3, [r7, #16]
    8f38:	2204      	movs	r2, #4
    8f3a:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    8f3c:	693b      	ldr	r3, [r7, #16]
    8f3e:	781b      	ldrb	r3, [r3, #0]
    8f40:	2b00      	cmp	r3, #0
    8f42:	d103      	bne.n	8f4c <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    8f44:	693b      	ldr	r3, [r7, #16]
    8f46:	2202      	movs	r2, #2
    8f48:	709a      	strb	r2, [r3, #2]
			return;
    8f4a:	e01a      	b.n	8f82 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    8f4c:	693b      	ldr	r3, [r7, #16]
    8f4e:	2201      	movs	r2, #1
    8f50:	709a      	strb	r2, [r3, #2]
    8f52:	e00f      	b.n	8f74 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    8f54:	68bb      	ldr	r3, [r7, #8]
    8f56:	2b03      	cmp	r3, #3
    8f58:	d106      	bne.n	8f68 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    8f5a:	693b      	ldr	r3, [r7, #16]
    8f5c:	2200      	movs	r2, #0
    8f5e:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    8f60:	693b      	ldr	r3, [r7, #16]
    8f62:	2205      	movs	r2, #5
    8f64:	70da      	strb	r2, [r3, #3]
    8f66:	e005      	b.n	8f74 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    8f68:	693b      	ldr	r3, [r7, #16]
    8f6a:	2206      	movs	r2, #6
    8f6c:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    8f6e:	693b      	ldr	r3, [r7, #16]
    8f70:	2206      	movs	r2, #6
    8f72:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    8f74:	693b      	ldr	r3, [r7, #16]
    8f76:	69db      	ldr	r3, [r3, #28]
    8f78:	693a      	ldr	r2, [r7, #16]
    8f7a:	78d1      	ldrb	r1, [r2, #3]
    8f7c:	687a      	ldr	r2, [r7, #4]
    8f7e:	7bf8      	ldrb	r0, [r7, #15]
    8f80:	4798      	blx	r3
}
    8f82:	3718      	adds	r7, #24
    8f84:	46bd      	mov	sp, r7
    8f86:	bd80      	pop	{r7, pc}
    8f88:	00008bed 	.word	0x00008bed
    8f8c:	200014e0 	.word	0x200014e0
    8f90:	00008df5 	.word	0x00008df5
    8f94:	00010401 	.word	0x00010401

00008f98 <usb_d_init>:

int32_t usb_d_init(void)
{
    8f98:	b580      	push	{r7, lr}
    8f9a:	b082      	sub	sp, #8
    8f9c:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    8f9e:	4b21      	ldr	r3, [pc, #132]	; (9024 <usb_d_init+0x8c>)
    8fa0:	4798      	blx	r3
    8fa2:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    8fa4:	683b      	ldr	r3, [r7, #0]
    8fa6:	2b00      	cmp	r3, #0
    8fa8:	da01      	bge.n	8fae <usb_d_init+0x16>
		return rc;
    8faa:	683b      	ldr	r3, [r7, #0]
    8fac:	e036      	b.n	901c <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    8fae:	2280      	movs	r2, #128	; 0x80
    8fb0:	2100      	movs	r1, #0
    8fb2:	481d      	ldr	r0, [pc, #116]	; (9028 <usb_d_init+0x90>)
    8fb4:	4b1d      	ldr	r3, [pc, #116]	; (902c <usb_d_init+0x94>)
    8fb6:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    8fb8:	2300      	movs	r3, #0
    8fba:	71fb      	strb	r3, [r7, #7]
    8fbc:	e01e      	b.n	8ffc <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    8fbe:	79fb      	ldrb	r3, [r7, #7]
    8fc0:	4a19      	ldr	r2, [pc, #100]	; (9028 <usb_d_init+0x90>)
    8fc2:	015b      	lsls	r3, r3, #5
    8fc4:	4413      	add	r3, r2
    8fc6:	3301      	adds	r3, #1
    8fc8:	22ff      	movs	r2, #255	; 0xff
    8fca:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    8fcc:	79fb      	ldrb	r3, [r7, #7]
    8fce:	4a16      	ldr	r2, [pc, #88]	; (9028 <usb_d_init+0x90>)
    8fd0:	015b      	lsls	r3, r3, #5
    8fd2:	4413      	add	r3, r2
    8fd4:	3314      	adds	r3, #20
    8fd6:	4a16      	ldr	r2, [pc, #88]	; (9030 <usb_d_init+0x98>)
    8fd8:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    8fda:	79fb      	ldrb	r3, [r7, #7]
    8fdc:	4a12      	ldr	r2, [pc, #72]	; (9028 <usb_d_init+0x90>)
    8fde:	015b      	lsls	r3, r3, #5
    8fe0:	4413      	add	r3, r2
    8fe2:	3318      	adds	r3, #24
    8fe4:	4a12      	ldr	r2, [pc, #72]	; (9030 <usb_d_init+0x98>)
    8fe6:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    8fe8:	79fb      	ldrb	r3, [r7, #7]
    8fea:	4a0f      	ldr	r2, [pc, #60]	; (9028 <usb_d_init+0x90>)
    8fec:	015b      	lsls	r3, r3, #5
    8fee:	4413      	add	r3, r2
    8ff0:	331c      	adds	r3, #28
    8ff2:	4a0f      	ldr	r2, [pc, #60]	; (9030 <usb_d_init+0x98>)
    8ff4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    8ff6:	79fb      	ldrb	r3, [r7, #7]
    8ff8:	3301      	adds	r3, #1
    8ffa:	71fb      	strb	r3, [r7, #7]
    8ffc:	79fb      	ldrb	r3, [r7, #7]
    8ffe:	2b03      	cmp	r3, #3
    9000:	d9dd      	bls.n	8fbe <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    9002:	490c      	ldr	r1, [pc, #48]	; (9034 <usb_d_init+0x9c>)
    9004:	2000      	movs	r0, #0
    9006:	4b0c      	ldr	r3, [pc, #48]	; (9038 <usb_d_init+0xa0>)
    9008:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    900a:	490c      	ldr	r1, [pc, #48]	; (903c <usb_d_init+0xa4>)
    900c:	2001      	movs	r0, #1
    900e:	4b0a      	ldr	r3, [pc, #40]	; (9038 <usb_d_init+0xa0>)
    9010:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    9012:	490b      	ldr	r1, [pc, #44]	; (9040 <usb_d_init+0xa8>)
    9014:	2002      	movs	r0, #2
    9016:	4b08      	ldr	r3, [pc, #32]	; (9038 <usb_d_init+0xa0>)
    9018:	4798      	blx	r3
	return ERR_NONE;
    901a:	2300      	movs	r3, #0
}
    901c:	4618      	mov	r0, r3
    901e:	3708      	adds	r7, #8
    9020:	46bd      	mov	sp, r7
    9022:	bd80      	pop	{r7, pc}
    9024:	0000fc49 	.word	0x0000fc49
    9028:	200014e0 	.word	0x200014e0
    902c:	00012ee9 	.word	0x00012ee9
    9030:	00008cc1 	.word	0x00008cc1
    9034:	00008cdd 	.word	0x00008cdd
    9038:	0001083d 	.word	0x0001083d
    903c:	00008da5 	.word	0x00008da5
    9040:	00008eb9 	.word	0x00008eb9

00009044 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    9044:	b580      	push	{r7, lr}
    9046:	b082      	sub	sp, #8
    9048:	af00      	add	r7, sp, #0
    904a:	4603      	mov	r3, r0
    904c:	6039      	str	r1, [r7, #0]
    904e:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    9050:	79fb      	ldrb	r3, [r7, #7]
    9052:	6839      	ldr	r1, [r7, #0]
    9054:	4618      	mov	r0, r3
    9056:	4b03      	ldr	r3, [pc, #12]	; (9064 <usb_d_register_callback+0x20>)
    9058:	4798      	blx	r3
}
    905a:	bf00      	nop
    905c:	3708      	adds	r7, #8
    905e:	46bd      	mov	sp, r7
    9060:	bd80      	pop	{r7, pc}
    9062:	bf00      	nop
    9064:	000107f5 	.word	0x000107f5

00009068 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    9068:	b580      	push	{r7, lr}
    906a:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    906c:	4b02      	ldr	r3, [pc, #8]	; (9078 <usb_d_enable+0x10>)
    906e:	4798      	blx	r3
    9070:	4603      	mov	r3, r0
}
    9072:	4618      	mov	r0, r3
    9074:	bd80      	pop	{r7, pc}
    9076:	bf00      	nop
    9078:	0000fd39 	.word	0x0000fd39

0000907c <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    907c:	b580      	push	{r7, lr}
    907e:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    9080:	4b01      	ldr	r3, [pc, #4]	; (9088 <usb_d_attach+0xc>)
    9082:	4798      	blx	r3
}
    9084:	bf00      	nop
    9086:	bd80      	pop	{r7, pc}
    9088:	0000fdbd 	.word	0x0000fdbd

0000908c <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    908c:	b580      	push	{r7, lr}
    908e:	b082      	sub	sp, #8
    9090:	af00      	add	r7, sp, #0
    9092:	4603      	mov	r3, r0
    9094:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    9096:	79fb      	ldrb	r3, [r7, #7]
    9098:	4618      	mov	r0, r3
    909a:	4b03      	ldr	r3, [pc, #12]	; (90a8 <usb_d_set_address+0x1c>)
    909c:	4798      	blx	r3
}
    909e:	bf00      	nop
    90a0:	3708      	adds	r7, #8
    90a2:	46bd      	mov	sp, r7
    90a4:	bd80      	pop	{r7, pc}
    90a6:	bf00      	nop
    90a8:	0000fdd1 	.word	0x0000fdd1

000090ac <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    90ac:	b580      	push	{r7, lr}
    90ae:	b082      	sub	sp, #8
    90b0:	af00      	add	r7, sp, #0
    90b2:	4603      	mov	r3, r0
    90b4:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    90b6:	79fb      	ldrb	r3, [r7, #7]
    90b8:	b29b      	uxth	r3, r3
    90ba:	461a      	mov	r2, r3
    90bc:	2100      	movs	r1, #0
    90be:	2000      	movs	r0, #0
    90c0:	4b03      	ldr	r3, [pc, #12]	; (90d0 <usb_d_ep0_init+0x24>)
    90c2:	4798      	blx	r3
    90c4:	4603      	mov	r3, r0
}
    90c6:	4618      	mov	r0, r3
    90c8:	3708      	adds	r7, #8
    90ca:	46bd      	mov	sp, r7
    90cc:	bd80      	pop	{r7, pc}
    90ce:	bf00      	nop
    90d0:	000090d5 	.word	0x000090d5

000090d4 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    90d4:	b580      	push	{r7, lr}
    90d6:	b086      	sub	sp, #24
    90d8:	af00      	add	r7, sp, #0
    90da:	4603      	mov	r3, r0
    90dc:	71fb      	strb	r3, [r7, #7]
    90de:	460b      	mov	r3, r1
    90e0:	71bb      	strb	r3, [r7, #6]
    90e2:	4613      	mov	r3, r2
    90e4:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    90e6:	79fb      	ldrb	r3, [r7, #7]
    90e8:	4618      	mov	r0, r3
    90ea:	4b1e      	ldr	r3, [pc, #120]	; (9164 <usb_d_ep_init+0x90>)
    90ec:	4798      	blx	r3
    90ee:	4603      	mov	r3, r0
    90f0:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    90f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    90f6:	015b      	lsls	r3, r3, #5
    90f8:	4a1b      	ldr	r2, [pc, #108]	; (9168 <usb_d_ep_init+0x94>)
    90fa:	4413      	add	r3, r2
    90fc:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    90fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
    9102:	2b00      	cmp	r3, #0
    9104:	db02      	blt.n	910c <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    9106:	f06f 0313 	mvn.w	r3, #19
    910a:	e027      	b.n	915c <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    910c:	20ff      	movs	r0, #255	; 0xff
    910e:	4b15      	ldr	r3, [pc, #84]	; (9164 <usb_d_ep_init+0x90>)
    9110:	4798      	blx	r3
    9112:	4603      	mov	r3, r0
    9114:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    9116:	f997 3017 	ldrsb.w	r3, [r7, #23]
    911a:	2b00      	cmp	r3, #0
    911c:	da02      	bge.n	9124 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    911e:	f06f 0314 	mvn.w	r3, #20
    9122:	e01b      	b.n	915c <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    9124:	f997 3017 	ldrsb.w	r3, [r7, #23]
    9128:	015b      	lsls	r3, r3, #5
    912a:	4a0f      	ldr	r2, [pc, #60]	; (9168 <usb_d_ep_init+0x94>)
    912c:	4413      	add	r3, r2
    912e:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    9130:	88ba      	ldrh	r2, [r7, #4]
    9132:	79b9      	ldrb	r1, [r7, #6]
    9134:	79fb      	ldrb	r3, [r7, #7]
    9136:	4618      	mov	r0, r3
    9138:	4b0c      	ldr	r3, [pc, #48]	; (916c <usb_d_ep_init+0x98>)
    913a:	4798      	blx	r3
    913c:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    913e:	68fb      	ldr	r3, [r7, #12]
    9140:	2b00      	cmp	r3, #0
    9142:	da01      	bge.n	9148 <usb_d_ep_init+0x74>
		return rc;
    9144:	68fb      	ldr	r3, [r7, #12]
    9146:	e009      	b.n	915c <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    9148:	693b      	ldr	r3, [r7, #16]
    914a:	79fa      	ldrb	r2, [r7, #7]
    914c:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    914e:	79bb      	ldrb	r3, [r7, #6]
    9150:	f003 0303 	and.w	r3, r3, #3
    9154:	b2da      	uxtb	r2, r3
    9156:	693b      	ldr	r3, [r7, #16]
    9158:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    915a:	2300      	movs	r3, #0
}
    915c:	4618      	mov	r0, r3
    915e:	3718      	adds	r7, #24
    9160:	46bd      	mov	sp, r7
    9162:	bd80      	pop	{r7, pc}
    9164:	00008bed 	.word	0x00008bed
    9168:	200014e0 	.word	0x200014e0
    916c:	0000fe71 	.word	0x0000fe71

00009170 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    9170:	b580      	push	{r7, lr}
    9172:	b084      	sub	sp, #16
    9174:	af00      	add	r7, sp, #0
    9176:	4603      	mov	r3, r0
    9178:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    917a:	79fb      	ldrb	r3, [r7, #7]
    917c:	4618      	mov	r0, r3
    917e:	4b0d      	ldr	r3, [pc, #52]	; (91b4 <usb_d_ep_deinit+0x44>)
    9180:	4798      	blx	r3
    9182:	4603      	mov	r3, r0
    9184:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    9186:	f997 300f 	ldrsb.w	r3, [r7, #15]
    918a:	015b      	lsls	r3, r3, #5
    918c:	4a0a      	ldr	r2, [pc, #40]	; (91b8 <usb_d_ep_deinit+0x48>)
    918e:	4413      	add	r3, r2
    9190:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    9192:	f997 300f 	ldrsb.w	r3, [r7, #15]
    9196:	2b00      	cmp	r3, #0
    9198:	db07      	blt.n	91aa <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    919a:	79fb      	ldrb	r3, [r7, #7]
    919c:	4618      	mov	r0, r3
    919e:	4b07      	ldr	r3, [pc, #28]	; (91bc <usb_d_ep_deinit+0x4c>)
    91a0:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    91a2:	68bb      	ldr	r3, [r7, #8]
    91a4:	22ff      	movs	r2, #255	; 0xff
    91a6:	705a      	strb	r2, [r3, #1]
    91a8:	e000      	b.n	91ac <usb_d_ep_deinit+0x3c>
		return;
    91aa:	bf00      	nop
}
    91ac:	3710      	adds	r7, #16
    91ae:	46bd      	mov	sp, r7
    91b0:	bd80      	pop	{r7, pc}
    91b2:	bf00      	nop
    91b4:	00008bed 	.word	0x00008bed
    91b8:	200014e0 	.word	0x200014e0
    91bc:	0000ffa5 	.word	0x0000ffa5

000091c0 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    91c0:	b580      	push	{r7, lr}
    91c2:	b086      	sub	sp, #24
    91c4:	af00      	add	r7, sp, #0
    91c6:	4603      	mov	r3, r0
    91c8:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    91ca:	79fb      	ldrb	r3, [r7, #7]
    91cc:	4618      	mov	r0, r3
    91ce:	4b15      	ldr	r3, [pc, #84]	; (9224 <usb_d_ep_enable+0x64>)
    91d0:	4798      	blx	r3
    91d2:	4603      	mov	r3, r0
    91d4:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    91d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    91da:	015b      	lsls	r3, r3, #5
    91dc:	4a12      	ldr	r2, [pc, #72]	; (9228 <usb_d_ep_enable+0x68>)
    91de:	4413      	add	r3, r2
    91e0:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    91e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    91e6:	2b00      	cmp	r3, #0
    91e8:	da02      	bge.n	91f0 <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    91ea:	f06f 0311 	mvn.w	r3, #17
    91ee:	e014      	b.n	921a <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    91f0:	693b      	ldr	r3, [r7, #16]
    91f2:	781b      	ldrb	r3, [r3, #0]
    91f4:	2b00      	cmp	r3, #0
    91f6:	d101      	bne.n	91fc <usb_d_ep_enable+0x3c>
    91f8:	2202      	movs	r2, #2
    91fa:	e000      	b.n	91fe <usb_d_ep_enable+0x3e>
    91fc:	2201      	movs	r2, #1
    91fe:	693b      	ldr	r3, [r7, #16]
    9200:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    9202:	79fb      	ldrb	r3, [r7, #7]
    9204:	4618      	mov	r0, r3
    9206:	4b09      	ldr	r3, [pc, #36]	; (922c <usb_d_ep_enable+0x6c>)
    9208:	4798      	blx	r3
    920a:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    920c:	68fb      	ldr	r3, [r7, #12]
    920e:	2b00      	cmp	r3, #0
    9210:	da02      	bge.n	9218 <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    9212:	693b      	ldr	r3, [r7, #16]
    9214:	2200      	movs	r2, #0
    9216:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    9218:	68fb      	ldr	r3, [r7, #12]
}
    921a:	4618      	mov	r0, r3
    921c:	3718      	adds	r7, #24
    921e:	46bd      	mov	sp, r7
    9220:	bd80      	pop	{r7, pc}
    9222:	bf00      	nop
    9224:	00008bed 	.word	0x00008bed
    9228:	200014e0 	.word	0x200014e0
    922c:	00010089 	.word	0x00010089

00009230 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    9230:	b590      	push	{r4, r7, lr}
    9232:	b08d      	sub	sp, #52	; 0x34
    9234:	af02      	add	r7, sp, #8
    9236:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    9238:	687b      	ldr	r3, [r7, #4]
    923a:	7a1b      	ldrb	r3, [r3, #8]
    923c:	4618      	mov	r0, r3
    923e:	4b51      	ldr	r3, [pc, #324]	; (9384 <usb_d_ep_transfer+0x154>)
    9240:	4798      	blx	r3
    9242:	4603      	mov	r3, r0
    9244:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    9246:	f997 301f 	ldrsb.w	r3, [r7, #31]
    924a:	015b      	lsls	r3, r3, #5
    924c:	4a4e      	ldr	r2, [pc, #312]	; (9388 <usb_d_ep_transfer+0x158>)
    924e:	4413      	add	r3, r2
    9250:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    9252:	687b      	ldr	r3, [r7, #4]
    9254:	7a1b      	ldrb	r3, [r3, #8]
    9256:	f003 0380 	and.w	r3, r3, #128	; 0x80
    925a:	2b00      	cmp	r3, #0
    925c:	bf14      	ite	ne
    925e:	2301      	movne	r3, #1
    9260:	2300      	moveq	r3, #0
    9262:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    9266:	687b      	ldr	r3, [r7, #4]
    9268:	7a5b      	ldrb	r3, [r3, #9]
    926a:	2b00      	cmp	r3, #0
    926c:	bf14      	ite	ne
    926e:	2301      	movne	r3, #1
    9270:	2300      	moveq	r3, #0
    9272:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    9276:	687b      	ldr	r3, [r7, #4]
    9278:	685b      	ldr	r3, [r3, #4]
    927a:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    927c:	f997 301f 	ldrsb.w	r3, [r7, #31]
    9280:	2b00      	cmp	r3, #0
    9282:	da02      	bge.n	928a <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    9284:	f06f 0311 	mvn.w	r3, #17
    9288:	e077      	b.n	937a <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    928a:	f107 0308 	add.w	r3, r7, #8
    928e:	4618      	mov	r0, r3
    9290:	4b3e      	ldr	r3, [pc, #248]	; (938c <usb_d_ep_transfer+0x15c>)
    9292:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    9294:	69bb      	ldr	r3, [r7, #24]
    9296:	789b      	ldrb	r3, [r3, #2]
    9298:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    929a:	7bfb      	ldrb	r3, [r7, #15]
    929c:	b2db      	uxtb	r3, r3
    929e:	2b01      	cmp	r3, #1
    92a0:	d10c      	bne.n	92bc <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    92a2:	69bb      	ldr	r3, [r7, #24]
    92a4:	2203      	movs	r2, #3
    92a6:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    92a8:	f107 0308 	add.w	r3, r7, #8
    92ac:	4618      	mov	r0, r3
    92ae:	4b38      	ldr	r3, [pc, #224]	; (9390 <usb_d_ep_transfer+0x160>)
    92b0:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    92b2:	69bb      	ldr	r3, [r7, #24]
    92b4:	781b      	ldrb	r3, [r3, #0]
    92b6:	2b00      	cmp	r3, #0
    92b8:	d151      	bne.n	935e <usb_d_ep_transfer+0x12e>
    92ba:	e017      	b.n	92ec <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    92bc:	f107 0308 	add.w	r3, r7, #8
    92c0:	4618      	mov	r0, r3
    92c2:	4b33      	ldr	r3, [pc, #204]	; (9390 <usb_d_ep_transfer+0x160>)
    92c4:	4798      	blx	r3
		switch (state) {
    92c6:	7bfb      	ldrb	r3, [r7, #15]
    92c8:	b2db      	uxtb	r3, r3
    92ca:	2b05      	cmp	r3, #5
    92cc:	d004      	beq.n	92d8 <usb_d_ep_transfer+0xa8>
    92ce:	2b06      	cmp	r3, #6
    92d0:	d004      	beq.n	92dc <usb_d_ep_transfer+0xac>
    92d2:	2b00      	cmp	r3, #0
    92d4:	d005      	beq.n	92e2 <usb_d_ep_transfer+0xb2>
    92d6:	e007      	b.n	92e8 <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    92d8:	2302      	movs	r3, #2
    92da:	e04e      	b.n	937a <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    92dc:	f06f 030f 	mvn.w	r3, #15
    92e0:	e04b      	b.n	937a <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    92e2:	f06f 0312 	mvn.w	r3, #18
    92e6:	e048      	b.n	937a <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    92e8:	2301      	movs	r3, #1
    92ea:	e046      	b.n	937a <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    92ec:	69bb      	ldr	r3, [r7, #24]
    92ee:	7c9b      	ldrb	r3, [r3, #18]
    92f0:	b29a      	uxth	r2, r3
    92f2:	69bb      	ldr	r3, [r7, #24]
    92f4:	7cdb      	ldrb	r3, [r3, #19]
    92f6:	b29b      	uxth	r3, r3
    92f8:	021b      	lsls	r3, r3, #8
    92fa:	b29b      	uxth	r3, r3
    92fc:	4413      	add	r3, r2
    92fe:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    9300:	8afb      	ldrh	r3, [r7, #22]
    9302:	2b00      	cmp	r3, #0
    9304:	d10b      	bne.n	931e <usb_d_ep_transfer+0xee>
			dir                 = true;
    9306:	2301      	movs	r3, #1
    9308:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    930c:	2300      	movs	r3, #0
    930e:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    9310:	2301      	movs	r3, #1
    9312:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    9316:	69bb      	ldr	r3, [r7, #24]
    9318:	2204      	movs	r2, #4
    931a:	709a      	strb	r2, [r3, #2]
    931c:	e01f      	b.n	935e <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    931e:	69bb      	ldr	r3, [r7, #24]
    9320:	7b1b      	ldrb	r3, [r3, #12]
    9322:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9326:	2b00      	cmp	r3, #0
    9328:	bf14      	ite	ne
    932a:	2301      	movne	r3, #1
    932c:	2300      	moveq	r3, #0
    932e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    9332:	8afa      	ldrh	r2, [r7, #22]
    9334:	6a3b      	ldr	r3, [r7, #32]
    9336:	429a      	cmp	r2, r3
    9338:	d201      	bcs.n	933e <usb_d_ep_transfer+0x10e>
				len = req_len;
    933a:	8afb      	ldrh	r3, [r7, #22]
    933c:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    933e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    9342:	2b00      	cmp	r3, #0
    9344:	d008      	beq.n	9358 <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    9346:	8afa      	ldrh	r2, [r7, #22]
    9348:	6a3b      	ldr	r3, [r7, #32]
    934a:	429a      	cmp	r2, r3
    934c:	bf8c      	ite	hi
    934e:	2301      	movhi	r3, #1
    9350:	2300      	movls	r3, #0
    9352:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    9356:	e002      	b.n	935e <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    9358:	2300      	movs	r3, #0
    935a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    935e:	687b      	ldr	r3, [r7, #4]
    9360:	7a18      	ldrb	r0, [r3, #8]
    9362:	687b      	ldr	r3, [r7, #4]
    9364:	681a      	ldr	r2, [r3, #0]
    9366:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    936a:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    936e:	9300      	str	r3, [sp, #0]
    9370:	6a3b      	ldr	r3, [r7, #32]
    9372:	4c08      	ldr	r4, [pc, #32]	; (9394 <usb_d_ep_transfer+0x164>)
    9374:	47a0      	blx	r4
    9376:	6138      	str	r0, [r7, #16]
	return rc;
    9378:	693b      	ldr	r3, [r7, #16]
}
    937a:	4618      	mov	r0, r3
    937c:	372c      	adds	r7, #44	; 0x2c
    937e:	46bd      	mov	sp, r7
    9380:	bd90      	pop	{r4, r7, pc}
    9382:	bf00      	nop
    9384:	00008bed 	.word	0x00008bed
    9388:	200014e0 	.word	0x200014e0
    938c:	00010fa9 	.word	0x00010fa9
    9390:	00010fcf 	.word	0x00010fcf
    9394:	00008c6d 	.word	0x00008c6d

00009398 <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    9398:	b580      	push	{r7, lr}
    939a:	b086      	sub	sp, #24
    939c:	af00      	add	r7, sp, #0
    939e:	4603      	mov	r3, r0
    93a0:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    93a2:	79fb      	ldrb	r3, [r7, #7]
    93a4:	4618      	mov	r0, r3
    93a6:	4b1a      	ldr	r3, [pc, #104]	; (9410 <_usb_d_ep_halt_clr+0x78>)
    93a8:	4798      	blx	r3
    93aa:	4603      	mov	r3, r0
    93ac:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    93ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
    93b2:	015b      	lsls	r3, r3, #5
    93b4:	4a17      	ldr	r2, [pc, #92]	; (9414 <_usb_d_ep_halt_clr+0x7c>)
    93b6:	4413      	add	r3, r2
    93b8:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    93ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
    93be:	2b00      	cmp	r3, #0
    93c0:	da02      	bge.n	93c8 <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    93c2:	f06f 0311 	mvn.w	r3, #17
    93c6:	e01f      	b.n	9408 <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    93c8:	79fb      	ldrb	r3, [r7, #7]
    93ca:	2102      	movs	r1, #2
    93cc:	4618      	mov	r0, r3
    93ce:	4b12      	ldr	r3, [pc, #72]	; (9418 <_usb_d_ep_halt_clr+0x80>)
    93d0:	4798      	blx	r3
    93d2:	4603      	mov	r3, r0
    93d4:	2b00      	cmp	r3, #0
    93d6:	d016      	beq.n	9406 <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    93d8:	79fb      	ldrb	r3, [r7, #7]
    93da:	2100      	movs	r1, #0
    93dc:	4618      	mov	r0, r3
    93de:	4b0e      	ldr	r3, [pc, #56]	; (9418 <_usb_d_ep_halt_clr+0x80>)
    93e0:	4798      	blx	r3
    93e2:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    93e4:	68fb      	ldr	r3, [r7, #12]
    93e6:	2b00      	cmp	r3, #0
    93e8:	da01      	bge.n	93ee <_usb_d_ep_halt_clr+0x56>
			return rc;
    93ea:	68fb      	ldr	r3, [r7, #12]
    93ec:	e00c      	b.n	9408 <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    93ee:	693b      	ldr	r3, [r7, #16]
    93f0:	2201      	movs	r2, #1
    93f2:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    93f4:	693b      	ldr	r3, [r7, #16]
    93f6:	2203      	movs	r2, #3
    93f8:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    93fa:	693b      	ldr	r3, [r7, #16]
    93fc:	69db      	ldr	r3, [r3, #28]
    93fe:	79f8      	ldrb	r0, [r7, #7]
    9400:	2200      	movs	r2, #0
    9402:	2103      	movs	r1, #3
    9404:	4798      	blx	r3
	}
	return ERR_NONE;
    9406:	2300      	movs	r3, #0
}
    9408:	4618      	mov	r0, r3
    940a:	3718      	adds	r7, #24
    940c:	46bd      	mov	sp, r7
    940e:	bd80      	pop	{r7, pc}
    9410:	00008bed 	.word	0x00008bed
    9414:	200014e0 	.word	0x200014e0
    9418:	00010401 	.word	0x00010401

0000941c <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    941c:	b580      	push	{r7, lr}
    941e:	b082      	sub	sp, #8
    9420:	af00      	add	r7, sp, #0
    9422:	4603      	mov	r3, r0
    9424:	460a      	mov	r2, r1
    9426:	71fb      	strb	r3, [r7, #7]
    9428:	4613      	mov	r3, r2
    942a:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    942c:	79bb      	ldrb	r3, [r7, #6]
    942e:	2b00      	cmp	r3, #0
    9430:	d105      	bne.n	943e <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    9432:	79fb      	ldrb	r3, [r7, #7]
    9434:	4618      	mov	r0, r3
    9436:	4b0c      	ldr	r3, [pc, #48]	; (9468 <usb_d_ep_halt+0x4c>)
    9438:	4798      	blx	r3
    943a:	4603      	mov	r3, r0
    943c:	e00f      	b.n	945e <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    943e:	79bb      	ldrb	r3, [r7, #6]
    9440:	2b01      	cmp	r3, #1
    9442:	d106      	bne.n	9452 <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    9444:	79fb      	ldrb	r3, [r7, #7]
    9446:	2101      	movs	r1, #1
    9448:	4618      	mov	r0, r3
    944a:	4b08      	ldr	r3, [pc, #32]	; (946c <usb_d_ep_halt+0x50>)
    944c:	4798      	blx	r3
    944e:	4603      	mov	r3, r0
    9450:	e005      	b.n	945e <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    9452:	79fb      	ldrb	r3, [r7, #7]
    9454:	2102      	movs	r1, #2
    9456:	4618      	mov	r0, r3
    9458:	4b04      	ldr	r3, [pc, #16]	; (946c <usb_d_ep_halt+0x50>)
    945a:	4798      	blx	r3
    945c:	4603      	mov	r3, r0
	}
}
    945e:	4618      	mov	r0, r3
    9460:	3708      	adds	r7, #8
    9462:	46bd      	mov	sp, r7
    9464:	bd80      	pop	{r7, pc}
    9466:	bf00      	nop
    9468:	00009399 	.word	0x00009399
    946c:	00010401 	.word	0x00010401

00009470 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    9470:	b580      	push	{r7, lr}
    9472:	b086      	sub	sp, #24
    9474:	af00      	add	r7, sp, #0
    9476:	4603      	mov	r3, r0
    9478:	603a      	str	r2, [r7, #0]
    947a:	71fb      	strb	r3, [r7, #7]
    947c:	460b      	mov	r3, r1
    947e:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    9480:	79fb      	ldrb	r3, [r7, #7]
    9482:	4618      	mov	r0, r3
    9484:	4b16      	ldr	r3, [pc, #88]	; (94e0 <usb_d_ep_register_callback+0x70>)
    9486:	4798      	blx	r3
    9488:	4603      	mov	r3, r0
    948a:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    948c:	f997 3017 	ldrsb.w	r3, [r7, #23]
    9490:	015b      	lsls	r3, r3, #5
    9492:	4a14      	ldr	r2, [pc, #80]	; (94e4 <usb_d_ep_register_callback+0x74>)
    9494:	4413      	add	r3, r2
    9496:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    9498:	683b      	ldr	r3, [r7, #0]
    949a:	2b00      	cmp	r3, #0
    949c:	d001      	beq.n	94a2 <usb_d_ep_register_callback+0x32>
    949e:	683b      	ldr	r3, [r7, #0]
    94a0:	e000      	b.n	94a4 <usb_d_ep_register_callback+0x34>
    94a2:	4b11      	ldr	r3, [pc, #68]	; (94e8 <usb_d_ep_register_callback+0x78>)
    94a4:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    94a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    94aa:	2b00      	cmp	r3, #0
    94ac:	db13      	blt.n	94d6 <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    94ae:	79bb      	ldrb	r3, [r7, #6]
    94b0:	2b01      	cmp	r3, #1
    94b2:	d008      	beq.n	94c6 <usb_d_ep_register_callback+0x56>
    94b4:	2b02      	cmp	r3, #2
    94b6:	d00a      	beq.n	94ce <usb_d_ep_register_callback+0x5e>
    94b8:	2b00      	cmp	r3, #0
    94ba:	d000      	beq.n	94be <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    94bc:	e00c      	b.n	94d8 <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    94be:	693b      	ldr	r3, [r7, #16]
    94c0:	68fa      	ldr	r2, [r7, #12]
    94c2:	615a      	str	r2, [r3, #20]
		break;
    94c4:	e008      	b.n	94d8 <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    94c6:	693b      	ldr	r3, [r7, #16]
    94c8:	68fa      	ldr	r2, [r7, #12]
    94ca:	619a      	str	r2, [r3, #24]
		break;
    94cc:	e004      	b.n	94d8 <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    94ce:	693b      	ldr	r3, [r7, #16]
    94d0:	68fa      	ldr	r2, [r7, #12]
    94d2:	61da      	str	r2, [r3, #28]
		break;
    94d4:	e000      	b.n	94d8 <usb_d_ep_register_callback+0x68>
		return;
    94d6:	bf00      	nop
	}
}
    94d8:	3718      	adds	r7, #24
    94da:	46bd      	mov	sp, r7
    94dc:	bd80      	pop	{r7, pc}
    94de:	bf00      	nop
    94e0:	00008bed 	.word	0x00008bed
    94e4:	200014e0 	.word	0x200014e0
    94e8:	00008cc1 	.word	0x00008cc1

000094ec <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    94ec:	b480      	push	{r7}
    94ee:	b085      	sub	sp, #20
    94f0:	af00      	add	r7, sp, #0
    94f2:	4603      	mov	r3, r0
    94f4:	60b9      	str	r1, [r7, #8]
    94f6:	607a      	str	r2, [r7, #4]
    94f8:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    94fa:	7bfb      	ldrb	r3, [r7, #15]
    94fc:	f083 0301 	eor.w	r3, r3, #1
    9500:	b2db      	uxtb	r3, r3
    9502:	2b00      	cmp	r3, #0
    9504:	d000      	beq.n	9508 <assert+0x1c>
		__asm("BKPT #0");
    9506:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    9508:	bf00      	nop
    950a:	3714      	adds	r7, #20
    950c:	46bd      	mov	sp, r7
    950e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9512:	4770      	bx	lr

00009514 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    9514:	b480      	push	{r7}
    9516:	b085      	sub	sp, #20
    9518:	af00      	add	r7, sp, #0
    951a:	6078      	str	r0, [r7, #4]
    951c:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    951e:	687b      	ldr	r3, [r7, #4]
    9520:	681b      	ldr	r3, [r3, #0]
    9522:	60fb      	str	r3, [r7, #12]
    9524:	e008      	b.n	9538 <is_list_element+0x24>
		if (it == element) {
    9526:	68fa      	ldr	r2, [r7, #12]
    9528:	683b      	ldr	r3, [r7, #0]
    952a:	429a      	cmp	r2, r3
    952c:	d101      	bne.n	9532 <is_list_element+0x1e>
			return true;
    952e:	2301      	movs	r3, #1
    9530:	e006      	b.n	9540 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    9532:	68fb      	ldr	r3, [r7, #12]
    9534:	681b      	ldr	r3, [r3, #0]
    9536:	60fb      	str	r3, [r7, #12]
    9538:	68fb      	ldr	r3, [r7, #12]
    953a:	2b00      	cmp	r3, #0
    953c:	d1f3      	bne.n	9526 <is_list_element+0x12>
		}
	}

	return false;
    953e:	2300      	movs	r3, #0
}
    9540:	4618      	mov	r0, r3
    9542:	3714      	adds	r7, #20
    9544:	46bd      	mov	sp, r7
    9546:	f85d 7b04 	ldr.w	r7, [sp], #4
    954a:	4770      	bx	lr

0000954c <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    954c:	b580      	push	{r7, lr}
    954e:	b082      	sub	sp, #8
    9550:	af00      	add	r7, sp, #0
    9552:	6078      	str	r0, [r7, #4]
    9554:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    9556:	6839      	ldr	r1, [r7, #0]
    9558:	6878      	ldr	r0, [r7, #4]
    955a:	4b0f      	ldr	r3, [pc, #60]	; (9598 <list_insert_as_head+0x4c>)
    955c:	4798      	blx	r3
    955e:	4603      	mov	r3, r0
    9560:	2b00      	cmp	r3, #0
    9562:	bf14      	ite	ne
    9564:	2301      	movne	r3, #1
    9566:	2300      	moveq	r3, #0
    9568:	b2db      	uxtb	r3, r3
    956a:	f083 0301 	eor.w	r3, r3, #1
    956e:	b2db      	uxtb	r3, r3
    9570:	f003 0301 	and.w	r3, r3, #1
    9574:	b2db      	uxtb	r3, r3
    9576:	2239      	movs	r2, #57	; 0x39
    9578:	4908      	ldr	r1, [pc, #32]	; (959c <list_insert_as_head+0x50>)
    957a:	4618      	mov	r0, r3
    957c:	4b08      	ldr	r3, [pc, #32]	; (95a0 <list_insert_as_head+0x54>)
    957e:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    9580:	687b      	ldr	r3, [r7, #4]
    9582:	681a      	ldr	r2, [r3, #0]
    9584:	683b      	ldr	r3, [r7, #0]
    9586:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    9588:	687b      	ldr	r3, [r7, #4]
    958a:	683a      	ldr	r2, [r7, #0]
    958c:	601a      	str	r2, [r3, #0]
}
    958e:	bf00      	nop
    9590:	3708      	adds	r7, #8
    9592:	46bd      	mov	sp, r7
    9594:	bd80      	pop	{r7, pc}
    9596:	bf00      	nop
    9598:	00009515 	.word	0x00009515
    959c:	00013e60 	.word	0x00013e60
    95a0:	000094ed 	.word	0x000094ed

000095a4 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    95a4:	b480      	push	{r7}
    95a6:	b083      	sub	sp, #12
    95a8:	af00      	add	r7, sp, #0
    95aa:	6078      	str	r0, [r7, #4]
    95ac:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    95ae:	687b      	ldr	r3, [r7, #4]
    95b0:	681a      	ldr	r2, [r3, #0]
    95b2:	683b      	ldr	r3, [r7, #0]
    95b4:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    95b6:	687b      	ldr	r3, [r7, #4]
    95b8:	683a      	ldr	r2, [r7, #0]
    95ba:	601a      	str	r2, [r3, #0]
}
    95bc:	bf00      	nop
    95be:	370c      	adds	r7, #12
    95c0:	46bd      	mov	sp, r7
    95c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    95c6:	4770      	bx	lr

000095c8 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    95c8:	b580      	push	{r7, lr}
    95ca:	b084      	sub	sp, #16
    95cc:	af00      	add	r7, sp, #0
    95ce:	6078      	str	r0, [r7, #4]
    95d0:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    95d2:	687b      	ldr	r3, [r7, #4]
    95d4:	681b      	ldr	r3, [r3, #0]
    95d6:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    95d8:	6839      	ldr	r1, [r7, #0]
    95da:	6878      	ldr	r0, [r7, #4]
    95dc:	4b16      	ldr	r3, [pc, #88]	; (9638 <list_insert_at_end+0x70>)
    95de:	4798      	blx	r3
    95e0:	4603      	mov	r3, r0
    95e2:	2b00      	cmp	r3, #0
    95e4:	bf14      	ite	ne
    95e6:	2301      	movne	r3, #1
    95e8:	2300      	moveq	r3, #0
    95ea:	b2db      	uxtb	r3, r3
    95ec:	f083 0301 	eor.w	r3, r3, #1
    95f0:	b2db      	uxtb	r3, r3
    95f2:	f003 0301 	and.w	r3, r3, #1
    95f6:	b2db      	uxtb	r3, r3
    95f8:	224f      	movs	r2, #79	; 0x4f
    95fa:	4910      	ldr	r1, [pc, #64]	; (963c <list_insert_at_end+0x74>)
    95fc:	4618      	mov	r0, r3
    95fe:	4b10      	ldr	r3, [pc, #64]	; (9640 <list_insert_at_end+0x78>)
    9600:	4798      	blx	r3

	if (!list->head) {
    9602:	687b      	ldr	r3, [r7, #4]
    9604:	681b      	ldr	r3, [r3, #0]
    9606:	2b00      	cmp	r3, #0
    9608:	d109      	bne.n	961e <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    960a:	687b      	ldr	r3, [r7, #4]
    960c:	683a      	ldr	r2, [r7, #0]
    960e:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    9610:	683b      	ldr	r3, [r7, #0]
    9612:	2200      	movs	r2, #0
    9614:	601a      	str	r2, [r3, #0]
		return;
    9616:	e00c      	b.n	9632 <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    9618:	68fb      	ldr	r3, [r7, #12]
    961a:	681b      	ldr	r3, [r3, #0]
    961c:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    961e:	68fb      	ldr	r3, [r7, #12]
    9620:	681b      	ldr	r3, [r3, #0]
    9622:	2b00      	cmp	r3, #0
    9624:	d1f8      	bne.n	9618 <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    9626:	68fb      	ldr	r3, [r7, #12]
    9628:	683a      	ldr	r2, [r7, #0]
    962a:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    962c:	683b      	ldr	r3, [r7, #0]
    962e:	2200      	movs	r2, #0
    9630:	601a      	str	r2, [r3, #0]
}
    9632:	3710      	adds	r7, #16
    9634:	46bd      	mov	sp, r7
    9636:	bd80      	pop	{r7, pc}
    9638:	00009515 	.word	0x00009515
    963c:	00013e60 	.word	0x00013e60
    9640:	000094ed 	.word	0x000094ed

00009644 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    9644:	b480      	push	{r7}
    9646:	b085      	sub	sp, #20
    9648:	af00      	add	r7, sp, #0
    964a:	6078      	str	r0, [r7, #4]
	if (list->head) {
    964c:	687b      	ldr	r3, [r7, #4]
    964e:	681b      	ldr	r3, [r3, #0]
    9650:	2b00      	cmp	r3, #0
    9652:	d009      	beq.n	9668 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    9654:	687b      	ldr	r3, [r7, #4]
    9656:	681b      	ldr	r3, [r3, #0]
    9658:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    965a:	687b      	ldr	r3, [r7, #4]
    965c:	681b      	ldr	r3, [r3, #0]
    965e:	681a      	ldr	r2, [r3, #0]
    9660:	687b      	ldr	r3, [r7, #4]
    9662:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    9664:	68fb      	ldr	r3, [r7, #12]
    9666:	e000      	b.n	966a <list_remove_head+0x26>
	}

	return NULL;
    9668:	2300      	movs	r3, #0
}
    966a:	4618      	mov	r0, r3
    966c:	3714      	adds	r7, #20
    966e:	46bd      	mov	sp, r7
    9670:	f85d 7b04 	ldr.w	r7, [sp], #4
    9674:	4770      	bx	lr
	...

00009678 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    9678:	b480      	push	{r7}
    967a:	b083      	sub	sp, #12
    967c:	af00      	add	r7, sp, #0
    967e:	4603      	mov	r3, r0
    9680:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    9682:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9686:	2b00      	cmp	r3, #0
    9688:	db0b      	blt.n	96a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    968a:	4909      	ldr	r1, [pc, #36]	; (96b0 <__NVIC_EnableIRQ+0x38>)
    968c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9690:	095b      	lsrs	r3, r3, #5
    9692:	88fa      	ldrh	r2, [r7, #6]
    9694:	f002 021f 	and.w	r2, r2, #31
    9698:	2001      	movs	r0, #1
    969a:	fa00 f202 	lsl.w	r2, r0, r2
    969e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    96a2:	bf00      	nop
    96a4:	370c      	adds	r7, #12
    96a6:	46bd      	mov	sp, r7
    96a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    96ac:	4770      	bx	lr
    96ae:	bf00      	nop
    96b0:	e000e100 	.word	0xe000e100

000096b4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    96b4:	b480      	push	{r7}
    96b6:	b083      	sub	sp, #12
    96b8:	af00      	add	r7, sp, #0
    96ba:	4603      	mov	r3, r0
    96bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    96be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    96c2:	2b00      	cmp	r3, #0
    96c4:	db10      	blt.n	96e8 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    96c6:	490b      	ldr	r1, [pc, #44]	; (96f4 <__NVIC_DisableIRQ+0x40>)
    96c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    96cc:	095b      	lsrs	r3, r3, #5
    96ce:	88fa      	ldrh	r2, [r7, #6]
    96d0:	f002 021f 	and.w	r2, r2, #31
    96d4:	2001      	movs	r0, #1
    96d6:	fa00 f202 	lsl.w	r2, r0, r2
    96da:	3320      	adds	r3, #32
    96dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    96e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    96e4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    96e8:	bf00      	nop
    96ea:	370c      	adds	r7, #12
    96ec:	46bd      	mov	sp, r7
    96ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    96f2:	4770      	bx	lr
    96f4:	e000e100 	.word	0xe000e100

000096f8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    96f8:	b480      	push	{r7}
    96fa:	b083      	sub	sp, #12
    96fc:	af00      	add	r7, sp, #0
    96fe:	4603      	mov	r3, r0
    9700:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    9702:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9706:	2b00      	cmp	r3, #0
    9708:	db0c      	blt.n	9724 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    970a:	4909      	ldr	r1, [pc, #36]	; (9730 <__NVIC_ClearPendingIRQ+0x38>)
    970c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9710:	095b      	lsrs	r3, r3, #5
    9712:	88fa      	ldrh	r2, [r7, #6]
    9714:	f002 021f 	and.w	r2, r2, #31
    9718:	2001      	movs	r0, #1
    971a:	fa00 f202 	lsl.w	r2, r0, r2
    971e:	3360      	adds	r3, #96	; 0x60
    9720:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    9724:	bf00      	nop
    9726:	370c      	adds	r7, #12
    9728:	46bd      	mov	sp, r7
    972a:	f85d 7b04 	ldr.w	r7, [sp], #4
    972e:	4770      	bx	lr
    9730:	e000e100 	.word	0xe000e100

00009734 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    9734:	b480      	push	{r7}
    9736:	b083      	sub	sp, #12
    9738:	af00      	add	r7, sp, #0
    973a:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    973c:	687b      	ldr	r3, [r7, #4]
    973e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    9740:	095b      	lsrs	r3, r3, #5
    9742:	f003 0301 	and.w	r3, r3, #1
    9746:	2b00      	cmp	r3, #0
    9748:	bf14      	ite	ne
    974a:	2301      	movne	r3, #1
    974c:	2300      	moveq	r3, #0
    974e:	b2db      	uxtb	r3, r3
}
    9750:	4618      	mov	r0, r3
    9752:	370c      	adds	r7, #12
    9754:	46bd      	mov	sp, r7
    9756:	f85d 7b04 	ldr.w	r7, [sp], #4
    975a:	4770      	bx	lr

0000975c <hri_can_read_RXF0S_F0FL_bf>:
{
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0FL(mask)) >> CAN_RXF0S_F0FL_Pos;
}

static inline hri_can_rxf0s_reg_t hri_can_read_RXF0S_F0FL_bf(const void *const hw)
{
    975c:	b480      	push	{r7}
    975e:	b083      	sub	sp, #12
    9760:	af00      	add	r7, sp, #0
    9762:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0FL_Msk) >> CAN_RXF0S_F0FL_Pos;
    9764:	687b      	ldr	r3, [r7, #4]
    9766:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    976a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
    976e:	4618      	mov	r0, r3
    9770:	370c      	adds	r7, #12
    9772:	46bd      	mov	sp, r7
    9774:	f85d 7b04 	ldr.w	r7, [sp], #4
    9778:	4770      	bx	lr

0000977a <hri_can_read_RXF0S_F0GI_bf>:
{
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0GI(mask)) >> CAN_RXF0S_F0GI_Pos;
}

static inline hri_can_rxf0s_reg_t hri_can_read_RXF0S_F0GI_bf(const void *const hw)
{
    977a:	b480      	push	{r7}
    977c:	b083      	sub	sp, #12
    977e:	af00      	add	r7, sp, #0
    9780:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0GI_Msk) >> CAN_RXF0S_F0GI_Pos;
    9782:	687b      	ldr	r3, [r7, #4]
    9784:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    9788:	0a1b      	lsrs	r3, r3, #8
    978a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
    978e:	4618      	mov	r0, r3
    9790:	370c      	adds	r7, #12
    9792:	46bd      	mov	sp, r7
    9794:	f85d 7b04 	ldr.w	r7, [sp], #4
    9798:	4770      	bx	lr

0000979a <hri_can_get_TXFQS_TFQF_bit>:
{
	return ((Can *)hw)->RXF1S.reg;
}

static inline bool hri_can_get_TXFQS_TFQF_bit(const void *const hw)
{
    979a:	b480      	push	{r7}
    979c:	b083      	sub	sp, #12
    979e:	af00      	add	r7, sp, #0
    97a0:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFQF) >> CAN_TXFQS_TFQF_Pos;
    97a2:	687b      	ldr	r3, [r7, #4]
    97a4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    97a8:	0d5b      	lsrs	r3, r3, #21
    97aa:	f003 0301 	and.w	r3, r3, #1
    97ae:	2b00      	cmp	r3, #0
    97b0:	bf14      	ite	ne
    97b2:	2301      	movne	r3, #1
    97b4:	2300      	moveq	r3, #0
    97b6:	b2db      	uxtb	r3, r3
}
    97b8:	4618      	mov	r0, r3
    97ba:	370c      	adds	r7, #12
    97bc:	46bd      	mov	sp, r7
    97be:	f85d 7b04 	ldr.w	r7, [sp], #4
    97c2:	4770      	bx	lr

000097c4 <hri_can_read_TXFQS_TFQPI_bf>:
{
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFQPI(mask)) >> CAN_TXFQS_TFQPI_Pos;
}

static inline hri_can_txfqs_reg_t hri_can_read_TXFQS_TFQPI_bf(const void *const hw)
{
    97c4:	b480      	push	{r7}
    97c6:	b083      	sub	sp, #12
    97c8:	af00      	add	r7, sp, #0
    97ca:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFQPI_Msk) >> CAN_TXFQS_TFQPI_Pos;
    97cc:	687b      	ldr	r3, [r7, #4]
    97ce:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    97d2:	0c1b      	lsrs	r3, r3, #16
    97d4:	f003 031f 	and.w	r3, r3, #31
}
    97d8:	4618      	mov	r0, r3
    97da:	370c      	adds	r7, #12
    97dc:	46bd      	mov	sp, r7
    97de:	f85d 7b04 	ldr.w	r7, [sp], #4
    97e2:	4770      	bx	lr

000097e4 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    97e4:	b480      	push	{r7}
    97e6:	b083      	sub	sp, #12
    97e8:	af00      	add	r7, sp, #0
    97ea:	6078      	str	r0, [r7, #4]
    97ec:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    97ee:	687b      	ldr	r3, [r7, #4]
    97f0:	683a      	ldr	r2, [r7, #0]
    97f2:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    97f4:	bf00      	nop
    97f6:	370c      	adds	r7, #12
    97f8:	46bd      	mov	sp, r7
    97fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    97fe:	4770      	bx	lr

00009800 <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    9800:	b480      	push	{r7}
    9802:	b083      	sub	sp, #12
    9804:	af00      	add	r7, sp, #0
    9806:	6078      	str	r0, [r7, #4]
    9808:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    980a:	687b      	ldr	r3, [r7, #4]
    980c:	683a      	ldr	r2, [r7, #0]
    980e:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    9810:	bf00      	nop
    9812:	370c      	adds	r7, #12
    9814:	46bd      	mov	sp, r7
    9816:	f85d 7b04 	ldr.w	r7, [sp], #4
    981a:	4770      	bx	lr

0000981c <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    981c:	b480      	push	{r7}
    981e:	b083      	sub	sp, #12
    9820:	af00      	add	r7, sp, #0
    9822:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    9824:	687b      	ldr	r3, [r7, #4]
    9826:	699b      	ldr	r3, [r3, #24]
    9828:	f043 0201 	orr.w	r2, r3, #1
    982c:	687b      	ldr	r3, [r7, #4]
    982e:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    9830:	bf00      	nop
    9832:	370c      	adds	r7, #12
    9834:	46bd      	mov	sp, r7
    9836:	f85d 7b04 	ldr.w	r7, [sp], #4
    983a:	4770      	bx	lr

0000983c <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    983c:	b480      	push	{r7}
    983e:	b085      	sub	sp, #20
    9840:	af00      	add	r7, sp, #0
    9842:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    9844:	687b      	ldr	r3, [r7, #4]
    9846:	699b      	ldr	r3, [r3, #24]
    9848:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    984a:	68fb      	ldr	r3, [r7, #12]
    984c:	f003 0301 	and.w	r3, r3, #1
    9850:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    9852:	68fb      	ldr	r3, [r7, #12]
    9854:	2b00      	cmp	r3, #0
    9856:	bf14      	ite	ne
    9858:	2301      	movne	r3, #1
    985a:	2300      	moveq	r3, #0
    985c:	b2db      	uxtb	r3, r3
}
    985e:	4618      	mov	r0, r3
    9860:	3714      	adds	r7, #20
    9862:	46bd      	mov	sp, r7
    9864:	f85d 7b04 	ldr.w	r7, [sp], #4
    9868:	4770      	bx	lr

0000986a <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    986a:	b480      	push	{r7}
    986c:	b083      	sub	sp, #12
    986e:	af00      	add	r7, sp, #0
    9870:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    9872:	687b      	ldr	r3, [r7, #4]
    9874:	699b      	ldr	r3, [r3, #24]
    9876:	f023 0201 	bic.w	r2, r3, #1
    987a:	687b      	ldr	r3, [r7, #4]
    987c:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    987e:	bf00      	nop
    9880:	370c      	adds	r7, #12
    9882:	46bd      	mov	sp, r7
    9884:	f85d 7b04 	ldr.w	r7, [sp], #4
    9888:	4770      	bx	lr

0000988a <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    988a:	b480      	push	{r7}
    988c:	b083      	sub	sp, #12
    988e:	af00      	add	r7, sp, #0
    9890:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    9892:	687b      	ldr	r3, [r7, #4]
    9894:	699b      	ldr	r3, [r3, #24]
    9896:	f043 0202 	orr.w	r2, r3, #2
    989a:	687b      	ldr	r3, [r7, #4]
    989c:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    989e:	bf00      	nop
    98a0:	370c      	adds	r7, #12
    98a2:	46bd      	mov	sp, r7
    98a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    98a8:	4770      	bx	lr

000098aa <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    98aa:	b480      	push	{r7}
    98ac:	b083      	sub	sp, #12
    98ae:	af00      	add	r7, sp, #0
    98b0:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    98b2:	687b      	ldr	r3, [r7, #4]
    98b4:	699b      	ldr	r3, [r3, #24]
    98b6:	f023 0202 	bic.w	r2, r3, #2
    98ba:	687b      	ldr	r3, [r7, #4]
    98bc:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    98be:	bf00      	nop
    98c0:	370c      	adds	r7, #12
    98c2:	46bd      	mov	sp, r7
    98c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    98c8:	4770      	bx	lr

000098ca <hri_can_get_CCCR_FDOE_bit>:
	((Can *)hw)->CCCR.reg |= CAN_CCCR_FDOE;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_can_get_CCCR_FDOE_bit(const void *const hw)
{
    98ca:	b480      	push	{r7}
    98cc:	b085      	sub	sp, #20
    98ce:	af00      	add	r7, sp, #0
    98d0:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    98d2:	687b      	ldr	r3, [r7, #4]
    98d4:	699b      	ldr	r3, [r3, #24]
    98d6:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_FDOE) >> CAN_CCCR_FDOE_Pos;
    98d8:	68fb      	ldr	r3, [r7, #12]
    98da:	0a1b      	lsrs	r3, r3, #8
    98dc:	f003 0301 	and.w	r3, r3, #1
    98e0:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    98e2:	68fb      	ldr	r3, [r7, #12]
    98e4:	2b00      	cmp	r3, #0
    98e6:	bf14      	ite	ne
    98e8:	2301      	movne	r3, #1
    98ea:	2300      	moveq	r3, #0
    98ec:	b2db      	uxtb	r3, r3
}
    98ee:	4618      	mov	r0, r3
    98f0:	3714      	adds	r7, #20
    98f2:	46bd      	mov	sp, r7
    98f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    98f8:	4770      	bx	lr

000098fa <hri_can_get_CCCR_BRSE_bit>:
	((Can *)hw)->CCCR.reg |= CAN_CCCR_BRSE;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_can_get_CCCR_BRSE_bit(const void *const hw)
{
    98fa:	b480      	push	{r7}
    98fc:	b085      	sub	sp, #20
    98fe:	af00      	add	r7, sp, #0
    9900:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    9902:	687b      	ldr	r3, [r7, #4]
    9904:	699b      	ldr	r3, [r3, #24]
    9906:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_BRSE) >> CAN_CCCR_BRSE_Pos;
    9908:	68fb      	ldr	r3, [r7, #12]
    990a:	0a5b      	lsrs	r3, r3, #9
    990c:	f003 0301 	and.w	r3, r3, #1
    9910:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    9912:	68fb      	ldr	r3, [r7, #12]
    9914:	2b00      	cmp	r3, #0
    9916:	bf14      	ite	ne
    9918:	2301      	movne	r3, #1
    991a:	2300      	moveq	r3, #0
    991c:	b2db      	uxtb	r3, r3
}
    991e:	4618      	mov	r0, r3
    9920:	3714      	adds	r7, #20
    9922:	46bd      	mov	sp, r7
    9924:	f85d 7b04 	ldr.w	r7, [sp], #4
    9928:	4770      	bx	lr

0000992a <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    992a:	b480      	push	{r7}
    992c:	b083      	sub	sp, #12
    992e:	af00      	add	r7, sp, #0
    9930:	6078      	str	r0, [r7, #4]
    9932:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    9934:	687b      	ldr	r3, [r7, #4]
    9936:	699a      	ldr	r2, [r3, #24]
    9938:	683b      	ldr	r3, [r7, #0]
    993a:	431a      	orrs	r2, r3
    993c:	687b      	ldr	r3, [r7, #4]
    993e:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    9940:	bf00      	nop
    9942:	370c      	adds	r7, #12
    9944:	46bd      	mov	sp, r7
    9946:	f85d 7b04 	ldr.w	r7, [sp], #4
    994a:	4770      	bx	lr

0000994c <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    994c:	b480      	push	{r7}
    994e:	b083      	sub	sp, #12
    9950:	af00      	add	r7, sp, #0
    9952:	6078      	str	r0, [r7, #4]
    9954:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    9956:	687b      	ldr	r3, [r7, #4]
    9958:	683a      	ldr	r2, [r7, #0]
    995a:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    995c:	bf00      	nop
    995e:	370c      	adds	r7, #12
    9960:	46bd      	mov	sp, r7
    9962:	f85d 7b04 	ldr.w	r7, [sp], #4
    9966:	4770      	bx	lr

00009968 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    9968:	b480      	push	{r7}
    996a:	b083      	sub	sp, #12
    996c:	af00      	add	r7, sp, #0
    996e:	6078      	str	r0, [r7, #4]
    9970:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    9972:	687b      	ldr	r3, [r7, #4]
    9974:	683a      	ldr	r2, [r7, #0]
    9976:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    9978:	bf00      	nop
    997a:	370c      	adds	r7, #12
    997c:	46bd      	mov	sp, r7
    997e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9982:	4770      	bx	lr

00009984 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    9984:	b480      	push	{r7}
    9986:	b083      	sub	sp, #12
    9988:	af00      	add	r7, sp, #0
    998a:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    998c:	687b      	ldr	r3, [r7, #4]
    998e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    9990:	4618      	mov	r0, r3
    9992:	370c      	adds	r7, #12
    9994:	46bd      	mov	sp, r7
    9996:	f85d 7b04 	ldr.w	r7, [sp], #4
    999a:	4770      	bx	lr

0000999c <hri_can_write_IE_RF0NE_bit>:
	tmp = (tmp & CAN_IE_RF0NE) >> CAN_IE_RF0NE_Pos;
	return (bool)tmp;
}

static inline void hri_can_write_IE_RF0NE_bit(const void *const hw, bool value)
{
    999c:	b480      	push	{r7}
    999e:	b085      	sub	sp, #20
    99a0:	af00      	add	r7, sp, #0
    99a2:	6078      	str	r0, [r7, #4]
    99a4:	460b      	mov	r3, r1
    99a6:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	CAN_CRITICAL_SECTION_ENTER();
	tmp = ((Can *)hw)->IE.reg;
    99a8:	687b      	ldr	r3, [r7, #4]
    99aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    99ac:	60fb      	str	r3, [r7, #12]
	tmp &= ~CAN_IE_RF0NE;
    99ae:	68fb      	ldr	r3, [r7, #12]
    99b0:	f023 0301 	bic.w	r3, r3, #1
    99b4:	60fb      	str	r3, [r7, #12]
	tmp |= value << CAN_IE_RF0NE_Pos;
    99b6:	78fb      	ldrb	r3, [r7, #3]
    99b8:	68fa      	ldr	r2, [r7, #12]
    99ba:	4313      	orrs	r3, r2
    99bc:	60fb      	str	r3, [r7, #12]
	((Can *)hw)->IE.reg = tmp;
    99be:	687b      	ldr	r3, [r7, #4]
    99c0:	68fa      	ldr	r2, [r7, #12]
    99c2:	655a      	str	r2, [r3, #84]	; 0x54
	CAN_CRITICAL_SECTION_LEAVE();
}
    99c4:	bf00      	nop
    99c6:	3714      	adds	r7, #20
    99c8:	46bd      	mov	sp, r7
    99ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    99ce:	4770      	bx	lr

000099d0 <hri_can_write_IE_TCE_bit>:
	tmp = (tmp & CAN_IE_TCE) >> CAN_IE_TCE_Pos;
	return (bool)tmp;
}

static inline void hri_can_write_IE_TCE_bit(const void *const hw, bool value)
{
    99d0:	b480      	push	{r7}
    99d2:	b085      	sub	sp, #20
    99d4:	af00      	add	r7, sp, #0
    99d6:	6078      	str	r0, [r7, #4]
    99d8:	460b      	mov	r3, r1
    99da:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	CAN_CRITICAL_SECTION_ENTER();
	tmp = ((Can *)hw)->IE.reg;
    99dc:	687b      	ldr	r3, [r7, #4]
    99de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    99e0:	60fb      	str	r3, [r7, #12]
	tmp &= ~CAN_IE_TCE;
    99e2:	68fb      	ldr	r3, [r7, #12]
    99e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    99e8:	60fb      	str	r3, [r7, #12]
	tmp |= value << CAN_IE_TCE_Pos;
    99ea:	78fb      	ldrb	r3, [r7, #3]
    99ec:	025b      	lsls	r3, r3, #9
    99ee:	461a      	mov	r2, r3
    99f0:	68fb      	ldr	r3, [r7, #12]
    99f2:	4313      	orrs	r3, r2
    99f4:	60fb      	str	r3, [r7, #12]
	((Can *)hw)->IE.reg = tmp;
    99f6:	687b      	ldr	r3, [r7, #4]
    99f8:	68fa      	ldr	r2, [r7, #12]
    99fa:	655a      	str	r2, [r3, #84]	; 0x54
	CAN_CRITICAL_SECTION_LEAVE();
}
    99fc:	bf00      	nop
    99fe:	3714      	adds	r7, #20
    9a00:	46bd      	mov	sp, r7
    9a02:	f85d 7b04 	ldr.w	r7, [sp], #4
    9a06:	4770      	bx	lr

00009a08 <hri_can_get_IE_reg>:
	((Can *)hw)->IE.reg |= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ie_reg_t hri_can_get_IE_reg(const void *const hw, hri_can_ie_reg_t mask)
{
    9a08:	b480      	push	{r7}
    9a0a:	b085      	sub	sp, #20
    9a0c:	af00      	add	r7, sp, #0
    9a0e:	6078      	str	r0, [r7, #4]
    9a10:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Can *)hw)->IE.reg;
    9a12:	687b      	ldr	r3, [r7, #4]
    9a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    9a16:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    9a18:	68fa      	ldr	r2, [r7, #12]
    9a1a:	683b      	ldr	r3, [r7, #0]
    9a1c:	4013      	ands	r3, r2
    9a1e:	60fb      	str	r3, [r7, #12]
	return tmp;
    9a20:	68fb      	ldr	r3, [r7, #12]
}
    9a22:	4618      	mov	r0, r3
    9a24:	3714      	adds	r7, #20
    9a26:	46bd      	mov	sp, r7
    9a28:	f85d 7b04 	ldr.w	r7, [sp], #4
    9a2c:	4770      	bx	lr

00009a2e <hri_can_write_IE_reg>:

static inline void hri_can_write_IE_reg(const void *const hw, hri_can_ie_reg_t data)
{
    9a2e:	b480      	push	{r7}
    9a30:	b083      	sub	sp, #12
    9a32:	af00      	add	r7, sp, #0
    9a34:	6078      	str	r0, [r7, #4]
    9a36:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IE.reg = data;
    9a38:	687b      	ldr	r3, [r7, #4]
    9a3a:	683a      	ldr	r2, [r7, #0]
    9a3c:	655a      	str	r2, [r3, #84]	; 0x54
	CAN_CRITICAL_SECTION_LEAVE();
}
    9a3e:	bf00      	nop
    9a40:	370c      	adds	r7, #12
    9a42:	46bd      	mov	sp, r7
    9a44:	f85d 7b04 	ldr.w	r7, [sp], #4
    9a48:	4770      	bx	lr

00009a4a <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    9a4a:	b480      	push	{r7}
    9a4c:	b083      	sub	sp, #12
    9a4e:	af00      	add	r7, sp, #0
    9a50:	6078      	str	r0, [r7, #4]
    9a52:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    9a54:	687b      	ldr	r3, [r7, #4]
    9a56:	683a      	ldr	r2, [r7, #0]
    9a58:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    9a5a:	bf00      	nop
    9a5c:	370c      	adds	r7, #12
    9a5e:	46bd      	mov	sp, r7
    9a60:	f85d 7b04 	ldr.w	r7, [sp], #4
    9a64:	4770      	bx	lr

00009a66 <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    9a66:	b480      	push	{r7}
    9a68:	b083      	sub	sp, #12
    9a6a:	af00      	add	r7, sp, #0
    9a6c:	6078      	str	r0, [r7, #4]
    9a6e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    9a70:	687b      	ldr	r3, [r7, #4]
    9a72:	683a      	ldr	r2, [r7, #0]
    9a74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    9a78:	bf00      	nop
    9a7a:	370c      	adds	r7, #12
    9a7c:	46bd      	mov	sp, r7
    9a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9a82:	4770      	bx	lr

00009a84 <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    9a84:	b480      	push	{r7}
    9a86:	b083      	sub	sp, #12
    9a88:	af00      	add	r7, sp, #0
    9a8a:	6078      	str	r0, [r7, #4]
    9a8c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    9a8e:	687b      	ldr	r3, [r7, #4]
    9a90:	683a      	ldr	r2, [r7, #0]
    9a92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    9a96:	bf00      	nop
    9a98:	370c      	adds	r7, #12
    9a9a:	46bd      	mov	sp, r7
    9a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9aa0:	4770      	bx	lr

00009aa2 <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    9aa2:	b480      	push	{r7}
    9aa4:	b083      	sub	sp, #12
    9aa6:	af00      	add	r7, sp, #0
    9aa8:	6078      	str	r0, [r7, #4]
    9aaa:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    9aac:	687b      	ldr	r3, [r7, #4]
    9aae:	683a      	ldr	r2, [r7, #0]
    9ab0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    9ab4:	bf00      	nop
    9ab6:	370c      	adds	r7, #12
    9ab8:	46bd      	mov	sp, r7
    9aba:	f85d 7b04 	ldr.w	r7, [sp], #4
    9abe:	4770      	bx	lr

00009ac0 <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    9ac0:	b480      	push	{r7}
    9ac2:	b083      	sub	sp, #12
    9ac4:	af00      	add	r7, sp, #0
    9ac6:	6078      	str	r0, [r7, #4]
    9ac8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    9aca:	687b      	ldr	r3, [r7, #4]
    9acc:	683a      	ldr	r2, [r7, #0]
    9ace:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    9ad2:	bf00      	nop
    9ad4:	370c      	adds	r7, #12
    9ad6:	46bd      	mov	sp, r7
    9ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
    9adc:	4770      	bx	lr

00009ade <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    9ade:	b480      	push	{r7}
    9ae0:	b083      	sub	sp, #12
    9ae2:	af00      	add	r7, sp, #0
    9ae4:	6078      	str	r0, [r7, #4]
    9ae6:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    9ae8:	687b      	ldr	r3, [r7, #4]
    9aea:	683a      	ldr	r2, [r7, #0]
    9aec:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    9af0:	bf00      	nop
    9af2:	370c      	adds	r7, #12
    9af4:	46bd      	mov	sp, r7
    9af6:	f85d 7b04 	ldr.w	r7, [sp], #4
    9afa:	4770      	bx	lr

00009afc <hri_can_write_RXF0A_F0AI_bf>:
	tmp = (tmp & CAN_RXF0A_F0AI(mask)) >> CAN_RXF0A_F0AI_Pos;
	return tmp;
}

static inline void hri_can_write_RXF0A_F0AI_bf(const void *const hw, hri_can_rxf0a_reg_t data)
{
    9afc:	b480      	push	{r7}
    9afe:	b085      	sub	sp, #20
    9b00:	af00      	add	r7, sp, #0
    9b02:	6078      	str	r0, [r7, #4]
    9b04:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	CAN_CRITICAL_SECTION_ENTER();
	tmp = ((Can *)hw)->RXF0A.reg;
    9b06:	687b      	ldr	r3, [r7, #4]
    9b08:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    9b0c:	60fb      	str	r3, [r7, #12]
	tmp &= ~CAN_RXF0A_F0AI_Msk;
    9b0e:	68fb      	ldr	r3, [r7, #12]
    9b10:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    9b14:	60fb      	str	r3, [r7, #12]
	tmp |= CAN_RXF0A_F0AI(data);
    9b16:	683b      	ldr	r3, [r7, #0]
    9b18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9b1c:	68fa      	ldr	r2, [r7, #12]
    9b1e:	4313      	orrs	r3, r2
    9b20:	60fb      	str	r3, [r7, #12]
	((Can *)hw)->RXF0A.reg = tmp;
    9b22:	687b      	ldr	r3, [r7, #4]
    9b24:	68fa      	ldr	r2, [r7, #12]
    9b26:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	CAN_CRITICAL_SECTION_LEAVE();
}
    9b2a:	bf00      	nop
    9b2c:	3714      	adds	r7, #20
    9b2e:	46bd      	mov	sp, r7
    9b30:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b34:	4770      	bx	lr

00009b36 <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    9b36:	b480      	push	{r7}
    9b38:	b083      	sub	sp, #12
    9b3a:	af00      	add	r7, sp, #0
    9b3c:	6078      	str	r0, [r7, #4]
    9b3e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    9b40:	687b      	ldr	r3, [r7, #4]
    9b42:	683a      	ldr	r2, [r7, #0]
    9b44:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    9b48:	bf00      	nop
    9b4a:	370c      	adds	r7, #12
    9b4c:	46bd      	mov	sp, r7
    9b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b52:	4770      	bx	lr

00009b54 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    9b54:	b480      	push	{r7}
    9b56:	b083      	sub	sp, #12
    9b58:	af00      	add	r7, sp, #0
    9b5a:	6078      	str	r0, [r7, #4]
    9b5c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    9b5e:	687b      	ldr	r3, [r7, #4]
    9b60:	683a      	ldr	r2, [r7, #0]
    9b62:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    9b66:	bf00      	nop
    9b68:	370c      	adds	r7, #12
    9b6a:	46bd      	mov	sp, r7
    9b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b70:	4770      	bx	lr

00009b72 <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    9b72:	b480      	push	{r7}
    9b74:	b083      	sub	sp, #12
    9b76:	af00      	add	r7, sp, #0
    9b78:	6078      	str	r0, [r7, #4]
    9b7a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    9b7c:	687b      	ldr	r3, [r7, #4]
    9b7e:	683a      	ldr	r2, [r7, #0]
    9b80:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    9b84:	bf00      	nop
    9b86:	370c      	adds	r7, #12
    9b88:	46bd      	mov	sp, r7
    9b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b8e:	4770      	bx	lr

00009b90 <hri_can_write_TXBAR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBAR_reg(const void *const hw, hri_can_txbar_reg_t data)
{
    9b90:	b480      	push	{r7}
    9b92:	b083      	sub	sp, #12
    9b94:	af00      	add	r7, sp, #0
    9b96:	6078      	str	r0, [r7, #4]
    9b98:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBAR.reg = data;
    9b9a:	687b      	ldr	r3, [r7, #4]
    9b9c:	683a      	ldr	r2, [r7, #0]
    9b9e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	CAN_CRITICAL_SECTION_LEAVE();
}
    9ba2:	bf00      	nop
    9ba4:	370c      	adds	r7, #12
    9ba6:	46bd      	mov	sp, r7
    9ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
    9bac:	4770      	bx	lr

00009bae <hri_can_write_TXBTIE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBTIE_reg(const void *const hw, hri_can_txbtie_reg_t data)
{
    9bae:	b480      	push	{r7}
    9bb0:	b083      	sub	sp, #12
    9bb2:	af00      	add	r7, sp, #0
    9bb4:	6078      	str	r0, [r7, #4]
    9bb6:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBTIE.reg = data;
    9bb8:	687b      	ldr	r3, [r7, #4]
    9bba:	683a      	ldr	r2, [r7, #0]
    9bbc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	CAN_CRITICAL_SECTION_LEAVE();
}
    9bc0:	bf00      	nop
    9bc2:	370c      	adds	r7, #12
    9bc4:	46bd      	mov	sp, r7
    9bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    9bca:	4770      	bx	lr

00009bcc <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    9bcc:	b480      	push	{r7}
    9bce:	b083      	sub	sp, #12
    9bd0:	af00      	add	r7, sp, #0
    9bd2:	6078      	str	r0, [r7, #4]
    9bd4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    9bd6:	687b      	ldr	r3, [r7, #4]
    9bd8:	683a      	ldr	r2, [r7, #0]
    9bda:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    9bde:	bf00      	nop
    9be0:	370c      	adds	r7, #12
    9be2:	46bd      	mov	sp, r7
    9be4:	f85d 7b04 	ldr.w	r7, [sp], #4
    9be8:	4770      	bx	lr
	...

00009bec <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    9bec:	b580      	push	{r7, lr}
    9bee:	b082      	sub	sp, #8
    9bf0:	af00      	add	r7, sp, #0
    9bf2:	6078      	str	r0, [r7, #4]
    9bf4:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    9bf6:	687b      	ldr	r3, [r7, #4]
    9bf8:	683a      	ldr	r2, [r7, #0]
    9bfa:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    9bfc:	687b      	ldr	r3, [r7, #4]
    9bfe:	681b      	ldr	r3, [r3, #0]
    9c00:	4618      	mov	r0, r3
    9c02:	4b55      	ldr	r3, [pc, #340]	; (9d58 <_can_async_init+0x16c>)
    9c04:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    9c06:	bf00      	nop
    9c08:	687b      	ldr	r3, [r7, #4]
    9c0a:	681b      	ldr	r3, [r3, #0]
    9c0c:	4618      	mov	r0, r3
    9c0e:	4b53      	ldr	r3, [pc, #332]	; (9d5c <_can_async_init+0x170>)
    9c10:	4798      	blx	r3
    9c12:	4603      	mov	r3, r0
    9c14:	f083 0301 	eor.w	r3, r3, #1
    9c18:	b2db      	uxtb	r3, r3
    9c1a:	2b00      	cmp	r3, #0
    9c1c:	d1f4      	bne.n	9c08 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    9c1e:	687b      	ldr	r3, [r7, #4]
    9c20:	681b      	ldr	r3, [r3, #0]
    9c22:	4618      	mov	r0, r3
    9c24:	4b4e      	ldr	r3, [pc, #312]	; (9d60 <_can_async_init+0x174>)
    9c26:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    9c28:	683b      	ldr	r3, [r7, #0]
    9c2a:	4a4e      	ldr	r2, [pc, #312]	; (9d64 <_can_async_init+0x178>)
    9c2c:	4293      	cmp	r3, r2
    9c2e:	d17a      	bne.n	9d26 <_can_async_init+0x13a>
		_can1_dev    = dev;
    9c30:	4a4d      	ldr	r2, [pc, #308]	; (9d68 <_can_async_init+0x17c>)
    9c32:	687b      	ldr	r3, [r7, #4]
    9c34:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    9c36:	687b      	ldr	r3, [r7, #4]
    9c38:	4a4c      	ldr	r2, [pc, #304]	; (9d6c <_can_async_init+0x180>)
    9c3a:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    9c3c:	687b      	ldr	r3, [r7, #4]
    9c3e:	681b      	ldr	r3, [r3, #0]
    9c40:	f44f 7140 	mov.w	r1, #768	; 0x300
    9c44:	4618      	mov	r0, r3
    9c46:	4b4a      	ldr	r3, [pc, #296]	; (9d70 <_can_async_init+0x184>)
    9c48:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    9c4a:	687b      	ldr	r3, [r7, #4]
    9c4c:	681b      	ldr	r3, [r3, #0]
    9c4e:	2102      	movs	r1, #2
    9c50:	4618      	mov	r0, r3
    9c52:	4b48      	ldr	r3, [pc, #288]	; (9d74 <_can_async_init+0x188>)
    9c54:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    9c56:	687b      	ldr	r3, [r7, #4]
    9c58:	681b      	ldr	r3, [r3, #0]
    9c5a:	4947      	ldr	r1, [pc, #284]	; (9d78 <_can_async_init+0x18c>)
    9c5c:	4618      	mov	r0, r3
    9c5e:	4b47      	ldr	r3, [pc, #284]	; (9d7c <_can_async_init+0x190>)
    9c60:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    9c62:	687b      	ldr	r3, [r7, #4]
    9c64:	681b      	ldr	r3, [r3, #0]
    9c66:	4946      	ldr	r1, [pc, #280]	; (9d80 <_can_async_init+0x194>)
    9c68:	4618      	mov	r0, r3
    9c6a:	4b46      	ldr	r3, [pc, #280]	; (9d84 <_can_async_init+0x198>)
    9c6c:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    9c6e:	687b      	ldr	r3, [r7, #4]
    9c70:	681a      	ldr	r2, [r3, #0]
    9c72:	4b45      	ldr	r3, [pc, #276]	; (9d88 <_can_async_init+0x19c>)
    9c74:	b29b      	uxth	r3, r3
    9c76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    9c7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    9c7e:	4619      	mov	r1, r3
    9c80:	4610      	mov	r0, r2
    9c82:	4b42      	ldr	r3, [pc, #264]	; (9d8c <_can_async_init+0x1a0>)
    9c84:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    9c86:	687b      	ldr	r3, [r7, #4]
    9c88:	681b      	ldr	r3, [r3, #0]
    9c8a:	2107      	movs	r1, #7
    9c8c:	4618      	mov	r0, r3
    9c8e:	4b40      	ldr	r3, [pc, #256]	; (9d90 <_can_async_init+0x1a4>)
    9c90:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    9c92:	687b      	ldr	r3, [r7, #4]
    9c94:	681b      	ldr	r3, [r3, #0]
    9c96:	2107      	movs	r1, #7
    9c98:	4618      	mov	r0, r3
    9c9a:	4b3e      	ldr	r3, [pc, #248]	; (9d94 <_can_async_init+0x1a8>)
    9c9c:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    9c9e:	687b      	ldr	r3, [r7, #4]
    9ca0:	681a      	ldr	r2, [r3, #0]
    9ca2:	4b3d      	ldr	r3, [pc, #244]	; (9d98 <_can_async_init+0x1ac>)
    9ca4:	b29b      	uxth	r3, r3
    9ca6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    9caa:	4619      	mov	r1, r3
    9cac:	4610      	mov	r0, r2
    9cae:	4b3b      	ldr	r3, [pc, #236]	; (9d9c <_can_async_init+0x1b0>)
    9cb0:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    9cb2:	687b      	ldr	r3, [r7, #4]
    9cb4:	681a      	ldr	r2, [r3, #0]
    9cb6:	4b3a      	ldr	r3, [pc, #232]	; (9da0 <_can_async_init+0x1b4>)
    9cb8:	b29b      	uxth	r3, r3
    9cba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    9cbe:	4619      	mov	r1, r3
    9cc0:	4610      	mov	r0, r2
    9cc2:	4b38      	ldr	r3, [pc, #224]	; (9da4 <_can_async_init+0x1b8>)
    9cc4:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    9cc6:	687b      	ldr	r3, [r7, #4]
    9cc8:	681b      	ldr	r3, [r3, #0]
    9cca:	2128      	movs	r1, #40	; 0x28
    9ccc:	4618      	mov	r0, r3
    9cce:	4b36      	ldr	r3, [pc, #216]	; (9da8 <_can_async_init+0x1bc>)
    9cd0:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    9cd2:	687b      	ldr	r3, [r7, #4]
    9cd4:	681a      	ldr	r2, [r3, #0]
    9cd6:	4b35      	ldr	r3, [pc, #212]	; (9dac <_can_async_init+0x1c0>)
    9cd8:	b29b      	uxth	r3, r3
    9cda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    9cde:	4619      	mov	r1, r3
    9ce0:	4610      	mov	r0, r2
    9ce2:	4b33      	ldr	r3, [pc, #204]	; (9db0 <_can_async_init+0x1c4>)
    9ce4:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    9ce6:	687b      	ldr	r3, [r7, #4]
    9ce8:	681a      	ldr	r2, [r3, #0]
    9cea:	4b32      	ldr	r3, [pc, #200]	; (9db4 <_can_async_init+0x1c8>)
    9cec:	b29b      	uxth	r3, r3
    9cee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    9cf2:	4619      	mov	r1, r3
    9cf4:	4610      	mov	r0, r2
    9cf6:	4b30      	ldr	r3, [pc, #192]	; (9db8 <_can_async_init+0x1cc>)
    9cf8:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    9cfa:	687b      	ldr	r3, [r7, #4]
    9cfc:	681b      	ldr	r3, [r3, #0]
    9cfe:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    9d02:	4618      	mov	r0, r3
    9d04:	4b2d      	ldr	r3, [pc, #180]	; (9dbc <_can_async_init+0x1d0>)
    9d06:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    9d08:	204f      	movs	r0, #79	; 0x4f
    9d0a:	4b2d      	ldr	r3, [pc, #180]	; (9dc0 <_can_async_init+0x1d4>)
    9d0c:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    9d0e:	204f      	movs	r0, #79	; 0x4f
    9d10:	4b2c      	ldr	r3, [pc, #176]	; (9dc4 <_can_async_init+0x1d8>)
    9d12:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    9d14:	204f      	movs	r0, #79	; 0x4f
    9d16:	4b2c      	ldr	r3, [pc, #176]	; (9dc8 <_can_async_init+0x1dc>)
    9d18:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    9d1a:	687b      	ldr	r3, [r7, #4]
    9d1c:	681b      	ldr	r3, [r3, #0]
    9d1e:	2101      	movs	r1, #1
    9d20:	4618      	mov	r0, r3
    9d22:	4b2a      	ldr	r3, [pc, #168]	; (9dcc <_can_async_init+0x1e0>)
    9d24:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    9d26:	687b      	ldr	r3, [r7, #4]
    9d28:	681b      	ldr	r3, [r3, #0]
    9d2a:	4618      	mov	r0, r3
    9d2c:	4b28      	ldr	r3, [pc, #160]	; (9dd0 <_can_async_init+0x1e4>)
    9d2e:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    9d30:	687b      	ldr	r3, [r7, #4]
    9d32:	681b      	ldr	r3, [r3, #0]
    9d34:	4618      	mov	r0, r3
    9d36:	4b27      	ldr	r3, [pc, #156]	; (9dd4 <_can_async_init+0x1e8>)
    9d38:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    9d3a:	bf00      	nop
    9d3c:	687b      	ldr	r3, [r7, #4]
    9d3e:	681b      	ldr	r3, [r3, #0]
    9d40:	4618      	mov	r0, r3
    9d42:	4b06      	ldr	r3, [pc, #24]	; (9d5c <_can_async_init+0x170>)
    9d44:	4798      	blx	r3
    9d46:	4603      	mov	r3, r0
    9d48:	2b00      	cmp	r3, #0
    9d4a:	d1f7      	bne.n	9d3c <_can_async_init+0x150>
	};

	return ERR_NONE;
    9d4c:	2300      	movs	r3, #0
}
    9d4e:	4618      	mov	r0, r3
    9d50:	3708      	adds	r7, #8
    9d52:	46bd      	mov	sp, r7
    9d54:	bd80      	pop	{r7, pc}
    9d56:	bf00      	nop
    9d58:	0000981d 	.word	0x0000981d
    9d5c:	0000983d 	.word	0x0000983d
    9d60:	0000988b 	.word	0x0000988b
    9d64:	42000400 	.word	0x42000400
    9d68:	20001588 	.word	0x20001588
    9d6c:	200003fc 	.word	0x200003fc
    9d70:	0000992b 	.word	0x0000992b
    9d74:	000097e5 	.word	0x000097e5
    9d78:	00010c01 	.word	0x00010c01
    9d7c:	0000994d 	.word	0x0000994d
    9d80:	00010c10 	.word	0x00010c10
    9d84:	00009801 	.word	0x00009801
    9d88:	20001c60 	.word	0x20001c60
    9d8c:	00009adf 	.word	0x00009adf
    9d90:	00009b37 	.word	0x00009b37
    9d94:	00009b73 	.word	0x00009b73
    9d98:	20001c18 	.word	0x20001c18
    9d9c:	00009b55 	.word	0x00009b55
    9da0:	20001560 	.word	0x20001560
    9da4:	00009bcd 	.word	0x00009bcd
    9da8:	00009a67 	.word	0x00009a67
    9dac:	20001570 	.word	0x20001570
    9db0:	00009a85 	.word	0x00009a85
    9db4:	20001578 	.word	0x20001578
    9db8:	00009aa3 	.word	0x00009aa3
    9dbc:	00009ac1 	.word	0x00009ac1
    9dc0:	000096b5 	.word	0x000096b5
    9dc4:	000096f9 	.word	0x000096f9
    9dc8:	00009679 	.word	0x00009679
    9dcc:	00009a4b 	.word	0x00009a4b
    9dd0:	000098ab 	.word	0x000098ab
    9dd4:	0000986b 	.word	0x0000986b

00009dd8 <_can_async_enable>:

/**
 * \brief Enable CAN
 */
int32_t _can_async_enable(struct _can_async_device *const dev)
{
    9dd8:	b580      	push	{r7, lr}
    9dda:	b082      	sub	sp, #8
    9ddc:	af00      	add	r7, sp, #0
    9dde:	6078      	str	r0, [r7, #4]
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    9de0:	687b      	ldr	r3, [r7, #4]
    9de2:	681b      	ldr	r3, [r3, #0]
    9de4:	4618      	mov	r0, r3
    9de6:	4b03      	ldr	r3, [pc, #12]	; (9df4 <_can_async_enable+0x1c>)
    9de8:	4798      	blx	r3
	return ERR_NONE;
    9dea:	2300      	movs	r3, #0
}
    9dec:	4618      	mov	r0, r3
    9dee:	3708      	adds	r7, #8
    9df0:	46bd      	mov	sp, r7
    9df2:	bd80      	pop	{r7, pc}
    9df4:	0000986b 	.word	0x0000986b

00009df8 <_can_async_disable>:

/**
 * \brief Disable CAN
 */
int32_t _can_async_disable(struct _can_async_device *const dev)
{
    9df8:	b580      	push	{r7, lr}
    9dfa:	b082      	sub	sp, #8
    9dfc:	af00      	add	r7, sp, #0
    9dfe:	6078      	str	r0, [r7, #4]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    9e00:	687b      	ldr	r3, [r7, #4]
    9e02:	681b      	ldr	r3, [r3, #0]
    9e04:	4618      	mov	r0, r3
    9e06:	4b03      	ldr	r3, [pc, #12]	; (9e14 <_can_async_disable+0x1c>)
    9e08:	4798      	blx	r3
	return ERR_NONE;
    9e0a:	2300      	movs	r3, #0
}
    9e0c:	4618      	mov	r0, r3
    9e0e:	3708      	adds	r7, #8
    9e10:	46bd      	mov	sp, r7
    9e12:	bd80      	pop	{r7, pc}
    9e14:	0000981d 	.word	0x0000981d

00009e18 <_can_async_read>:

/**
 * \brief Read a CAN message
 */
int32_t _can_async_read(struct _can_async_device *const dev, struct can_message *msg)
{
    9e18:	b590      	push	{r4, r7, lr}
    9e1a:	b089      	sub	sp, #36	; 0x24
    9e1c:	af00      	add	r7, sp, #0
    9e1e:	6078      	str	r0, [r7, #4]
    9e20:	6039      	str	r1, [r7, #0]
	struct _can_rx_fifo_entry *f = NULL;
    9e22:	2300      	movs	r3, #0
    9e24:	61fb      	str	r3, [r7, #28]
	hri_can_rxf0s_reg_t        get_index;

	if (!hri_can_read_RXF0S_F0FL_bf(dev->hw)) {
    9e26:	687b      	ldr	r3, [r7, #4]
    9e28:	681b      	ldr	r3, [r3, #0]
    9e2a:	4618      	mov	r0, r3
    9e2c:	4b37      	ldr	r3, [pc, #220]	; (9f0c <_can_async_read+0xf4>)
    9e2e:	4798      	blx	r3
    9e30:	4603      	mov	r3, r0
    9e32:	2b00      	cmp	r3, #0
    9e34:	d102      	bne.n	9e3c <_can_async_read+0x24>
		return ERR_NOT_FOUND;
    9e36:	f06f 0309 	mvn.w	r3, #9
    9e3a:	e063      	b.n	9f04 <_can_async_read+0xec>
	}

	get_index = hri_can_read_RXF0S_F0GI_bf(dev->hw);
    9e3c:	687b      	ldr	r3, [r7, #4]
    9e3e:	681b      	ldr	r3, [r3, #0]
    9e40:	4618      	mov	r0, r3
    9e42:	4b33      	ldr	r3, [pc, #204]	; (9f10 <_can_async_read+0xf8>)
    9e44:	4798      	blx	r3
    9e46:	61b8      	str	r0, [r7, #24]
	if (dev->hw == CAN0) {
		f = (struct _can_rx_fifo_entry *)(can0_rx_fifo + get_index * CONF_CAN0_F0DS);
	}
#endif
#ifdef CONF_CAN1_ENABLED
	if (dev->hw == CAN1) {
    9e48:	687b      	ldr	r3, [r7, #4]
    9e4a:	681b      	ldr	r3, [r3, #0]
    9e4c:	4a31      	ldr	r2, [pc, #196]	; (9f14 <_can_async_read+0xfc>)
    9e4e:	4293      	cmp	r3, r2
    9e50:	d108      	bne.n	9e64 <_can_async_read+0x4c>
		f = (struct _can_rx_fifo_entry *)(can1_rx_fifo + get_index * CONF_CAN1_F0DS);
    9e52:	69ba      	ldr	r2, [r7, #24]
    9e54:	4613      	mov	r3, r2
    9e56:	00db      	lsls	r3, r3, #3
    9e58:	4413      	add	r3, r2
    9e5a:	00db      	lsls	r3, r3, #3
    9e5c:	461a      	mov	r2, r3
    9e5e:	4b2e      	ldr	r3, [pc, #184]	; (9f18 <_can_async_read+0x100>)
    9e60:	4413      	add	r3, r2
    9e62:	61fb      	str	r3, [r7, #28]
	}
#endif

	if (f == NULL) {
    9e64:	69fb      	ldr	r3, [r7, #28]
    9e66:	2b00      	cmp	r3, #0
    9e68:	d102      	bne.n	9e70 <_can_async_read+0x58>
		return ERR_NO_RESOURCE;
    9e6a:	f06f 031b 	mvn.w	r3, #27
    9e6e:	e049      	b.n	9f04 <_can_async_read+0xec>
	}

	if (f->R0.bit.XTD == 1) {
    9e70:	69fb      	ldr	r3, [r7, #28]
    9e72:	681b      	ldr	r3, [r3, #0]
    9e74:	f3c3 7380 	ubfx	r3, r3, #30, #1
    9e78:	b2db      	uxtb	r3, r3
    9e7a:	2b01      	cmp	r3, #1
    9e7c:	d10a      	bne.n	9e94 <_can_async_read+0x7c>
		msg->fmt = CAN_FMT_EXTID;
    9e7e:	683b      	ldr	r3, [r7, #0]
    9e80:	2201      	movs	r2, #1
    9e82:	735a      	strb	r2, [r3, #13]
		msg->id  = f->R0.bit.ID;
    9e84:	69fb      	ldr	r3, [r7, #28]
    9e86:	681b      	ldr	r3, [r3, #0]
    9e88:	f3c3 031c 	ubfx	r3, r3, #0, #29
    9e8c:	461a      	mov	r2, r3
    9e8e:	683b      	ldr	r3, [r7, #0]
    9e90:	601a      	str	r2, [r3, #0]
    9e92:	e00a      	b.n	9eaa <_can_async_read+0x92>
	} else {
		msg->fmt = CAN_FMT_STDID;
    9e94:	683b      	ldr	r3, [r7, #0]
    9e96:	2200      	movs	r2, #0
    9e98:	735a      	strb	r2, [r3, #13]
		/* A standard identifier is stored into ID[28:18] */
		msg->id = f->R0.bit.ID >> 18;
    9e9a:	69fb      	ldr	r3, [r7, #28]
    9e9c:	681b      	ldr	r3, [r3, #0]
    9e9e:	f3c3 031c 	ubfx	r3, r3, #0, #29
    9ea2:	149b      	asrs	r3, r3, #18
    9ea4:	461a      	mov	r2, r3
    9ea6:	683b      	ldr	r3, [r7, #0]
    9ea8:	601a      	str	r2, [r3, #0]
	}

	if (f->R0.bit.RTR == 1) {
    9eaa:	69fb      	ldr	r3, [r7, #28]
    9eac:	681b      	ldr	r3, [r3, #0]
    9eae:	f3c3 7340 	ubfx	r3, r3, #29, #1
    9eb2:	b2db      	uxtb	r3, r3
    9eb4:	2b01      	cmp	r3, #1
    9eb6:	d102      	bne.n	9ebe <_can_async_read+0xa6>
		msg->type = CAN_TYPE_REMOTE;
    9eb8:	683b      	ldr	r3, [r7, #0]
    9eba:	2201      	movs	r2, #1
    9ebc:	711a      	strb	r2, [r3, #4]
	}

	const uint8_t dlc2len[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 12, 16, 20, 24, 32, 48, 64};
    9ebe:	4b17      	ldr	r3, [pc, #92]	; (9f1c <_can_async_read+0x104>)
    9ec0:	f107 0408 	add.w	r4, r7, #8
    9ec4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    9ec6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	msg->len                = dlc2len[f->R1.bit.DLC];
    9eca:	69fb      	ldr	r3, [r7, #28]
    9ecc:	685b      	ldr	r3, [r3, #4]
    9ece:	f3c3 4303 	ubfx	r3, r3, #16, #4
    9ed2:	b2db      	uxtb	r3, r3
    9ed4:	f107 0220 	add.w	r2, r7, #32
    9ed8:	4413      	add	r3, r2
    9eda:	f813 2c18 	ldrb.w	r2, [r3, #-24]
    9ede:	683b      	ldr	r3, [r7, #0]
    9ee0:	731a      	strb	r2, [r3, #12]

	memcpy(msg->data, f->data, msg->len);
    9ee2:	683b      	ldr	r3, [r7, #0]
    9ee4:	6898      	ldr	r0, [r3, #8]
    9ee6:	69fb      	ldr	r3, [r7, #28]
    9ee8:	f103 0108 	add.w	r1, r3, #8
    9eec:	683b      	ldr	r3, [r7, #0]
    9eee:	7b1b      	ldrb	r3, [r3, #12]
    9ef0:	461a      	mov	r2, r3
    9ef2:	4b0b      	ldr	r3, [pc, #44]	; (9f20 <_can_async_read+0x108>)
    9ef4:	4798      	blx	r3

	hri_can_write_RXF0A_F0AI_bf(dev->hw, get_index);
    9ef6:	687b      	ldr	r3, [r7, #4]
    9ef8:	681b      	ldr	r3, [r3, #0]
    9efa:	69b9      	ldr	r1, [r7, #24]
    9efc:	4618      	mov	r0, r3
    9efe:	4b09      	ldr	r3, [pc, #36]	; (9f24 <_can_async_read+0x10c>)
    9f00:	4798      	blx	r3

	return ERR_NONE;
    9f02:	2300      	movs	r3, #0
}
    9f04:	4618      	mov	r0, r3
    9f06:	3724      	adds	r7, #36	; 0x24
    9f08:	46bd      	mov	sp, r7
    9f0a:	bd90      	pop	{r4, r7, pc}
    9f0c:	0000975d 	.word	0x0000975d
    9f10:	0000977b 	.word	0x0000977b
    9f14:	42000400 	.word	0x42000400
    9f18:	20001c60 	.word	0x20001c60
    9f1c:	00013e80 	.word	0x00013e80
    9f20:	00012db5 	.word	0x00012db5
    9f24:	00009afd 	.word	0x00009afd

00009f28 <_can_async_write>:

/**
 * \brief Write a CAN message
 */
int32_t _can_async_write(struct _can_async_device *const dev, struct can_message *msg)
{
    9f28:	b590      	push	{r4, r7, lr}
    9f2a:	b085      	sub	sp, #20
    9f2c:	af00      	add	r7, sp, #0
    9f2e:	6078      	str	r0, [r7, #4]
    9f30:	6039      	str	r1, [r7, #0]
	struct _can_tx_fifo_entry *f = NULL;
    9f32:	2300      	movs	r3, #0
    9f34:	60fb      	str	r3, [r7, #12]
	hri_can_txfqs_reg_t        put_index;

	if (hri_can_get_TXFQS_TFQF_bit(dev->hw)) {
    9f36:	687b      	ldr	r3, [r7, #4]
    9f38:	681b      	ldr	r3, [r3, #0]
    9f3a:	4618      	mov	r0, r3
    9f3c:	4b61      	ldr	r3, [pc, #388]	; (a0c4 <_can_async_write+0x19c>)
    9f3e:	4798      	blx	r3
    9f40:	4603      	mov	r3, r0
    9f42:	2b00      	cmp	r3, #0
    9f44:	d002      	beq.n	9f4c <_can_async_write+0x24>
		return ERR_NO_RESOURCE;
    9f46:	f06f 031b 	mvn.w	r3, #27
    9f4a:	e0b7      	b.n	a0bc <_can_async_write+0x194>
	}

	put_index = hri_can_read_TXFQS_TFQPI_bf(dev->hw);
    9f4c:	687b      	ldr	r3, [r7, #4]
    9f4e:	681b      	ldr	r3, [r3, #0]
    9f50:	4618      	mov	r0, r3
    9f52:	4b5d      	ldr	r3, [pc, #372]	; (a0c8 <_can_async_write+0x1a0>)
    9f54:	4798      	blx	r3
    9f56:	60b8      	str	r0, [r7, #8]
	if (dev->hw == CAN0) {
		f = (struct _can_tx_fifo_entry *)(can0_tx_fifo + put_index * CONF_CAN0_TBDS);
	}
#endif
#ifdef CONF_CAN1_ENABLED
	if (dev->hw == CAN1) {
    9f58:	687b      	ldr	r3, [r7, #4]
    9f5a:	681b      	ldr	r3, [r3, #0]
    9f5c:	4a5b      	ldr	r2, [pc, #364]	; (a0cc <_can_async_write+0x1a4>)
    9f5e:	4293      	cmp	r3, r2
    9f60:	d108      	bne.n	9f74 <_can_async_write+0x4c>
		f = (struct _can_tx_fifo_entry *)(can1_tx_fifo + put_index * CONF_CAN1_TBDS);
    9f62:	68ba      	ldr	r2, [r7, #8]
    9f64:	4613      	mov	r3, r2
    9f66:	00db      	lsls	r3, r3, #3
    9f68:	4413      	add	r3, r2
    9f6a:	00db      	lsls	r3, r3, #3
    9f6c:	461a      	mov	r2, r3
    9f6e:	4b58      	ldr	r3, [pc, #352]	; (a0d0 <_can_async_write+0x1a8>)
    9f70:	4413      	add	r3, r2
    9f72:	60fb      	str	r3, [r7, #12]
	}
#endif
	if (f == NULL) {
    9f74:	68fb      	ldr	r3, [r7, #12]
    9f76:	2b00      	cmp	r3, #0
    9f78:	d102      	bne.n	9f80 <_can_async_write+0x58>
		return ERR_NO_RESOURCE;
    9f7a:	f06f 031b 	mvn.w	r3, #27
    9f7e:	e09d      	b.n	a0bc <_can_async_write+0x194>
	}

	if (msg->fmt == CAN_FMT_EXTID) {
    9f80:	683b      	ldr	r3, [r7, #0]
    9f82:	7b5b      	ldrb	r3, [r3, #13]
    9f84:	2b01      	cmp	r3, #1
    9f86:	d109      	bne.n	9f9c <_can_async_write+0x74>
		f->T0.val     = msg->id;
    9f88:	683b      	ldr	r3, [r7, #0]
    9f8a:	681a      	ldr	r2, [r3, #0]
    9f8c:	68fb      	ldr	r3, [r7, #12]
    9f8e:	601a      	str	r2, [r3, #0]
		f->T0.bit.XTD = 1;
    9f90:	68fa      	ldr	r2, [r7, #12]
    9f92:	6813      	ldr	r3, [r2, #0]
    9f94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    9f98:	6013      	str	r3, [r2, #0]
    9f9a:	e004      	b.n	9fa6 <_can_async_write+0x7e>
	} else {
		/* A standard identifier is stored into ID[28:18] */
		f->T0.val = msg->id << 18;
    9f9c:	683b      	ldr	r3, [r7, #0]
    9f9e:	681b      	ldr	r3, [r3, #0]
    9fa0:	049a      	lsls	r2, r3, #18
    9fa2:	68fb      	ldr	r3, [r7, #12]
    9fa4:	601a      	str	r2, [r3, #0]
	}

	if (msg->len <= 8) {
    9fa6:	683b      	ldr	r3, [r7, #0]
    9fa8:	7b1b      	ldrb	r3, [r3, #12]
    9faa:	2b08      	cmp	r3, #8
    9fac:	d80a      	bhi.n	9fc4 <_can_async_write+0x9c>
		f->T1.bit.DLC = msg->len;
    9fae:	683b      	ldr	r3, [r7, #0]
    9fb0:	7b1b      	ldrb	r3, [r3, #12]
    9fb2:	f003 030f 	and.w	r3, r3, #15
    9fb6:	b2d9      	uxtb	r1, r3
    9fb8:	68fa      	ldr	r2, [r7, #12]
    9fba:	6853      	ldr	r3, [r2, #4]
    9fbc:	f361 4313 	bfi	r3, r1, #16, #4
    9fc0:	6053      	str	r3, [r2, #4]
    9fc2:	e04a      	b.n	a05a <_can_async_write+0x132>
	} else if (msg->len <= 12) {
    9fc4:	683b      	ldr	r3, [r7, #0]
    9fc6:	7b1b      	ldrb	r3, [r3, #12]
    9fc8:	2b0c      	cmp	r3, #12
    9fca:	d806      	bhi.n	9fda <_can_async_write+0xb2>
		f->T1.bit.DLC = 0x9;
    9fcc:	68fa      	ldr	r2, [r7, #12]
    9fce:	6853      	ldr	r3, [r2, #4]
    9fd0:	2109      	movs	r1, #9
    9fd2:	f361 4313 	bfi	r3, r1, #16, #4
    9fd6:	6053      	str	r3, [r2, #4]
    9fd8:	e03f      	b.n	a05a <_can_async_write+0x132>
	} else if (msg->len <= 16) {
    9fda:	683b      	ldr	r3, [r7, #0]
    9fdc:	7b1b      	ldrb	r3, [r3, #12]
    9fde:	2b10      	cmp	r3, #16
    9fe0:	d806      	bhi.n	9ff0 <_can_async_write+0xc8>
		f->T1.bit.DLC = 0xA;
    9fe2:	68fa      	ldr	r2, [r7, #12]
    9fe4:	6853      	ldr	r3, [r2, #4]
    9fe6:	210a      	movs	r1, #10
    9fe8:	f361 4313 	bfi	r3, r1, #16, #4
    9fec:	6053      	str	r3, [r2, #4]
    9fee:	e034      	b.n	a05a <_can_async_write+0x132>
	} else if (msg->len <= 20) {
    9ff0:	683b      	ldr	r3, [r7, #0]
    9ff2:	7b1b      	ldrb	r3, [r3, #12]
    9ff4:	2b14      	cmp	r3, #20
    9ff6:	d806      	bhi.n	a006 <_can_async_write+0xde>
		f->T1.bit.DLC = 0xB;
    9ff8:	68fa      	ldr	r2, [r7, #12]
    9ffa:	6853      	ldr	r3, [r2, #4]
    9ffc:	210b      	movs	r1, #11
    9ffe:	f361 4313 	bfi	r3, r1, #16, #4
    a002:	6053      	str	r3, [r2, #4]
    a004:	e029      	b.n	a05a <_can_async_write+0x132>
	} else if (msg->len <= 24) {
    a006:	683b      	ldr	r3, [r7, #0]
    a008:	7b1b      	ldrb	r3, [r3, #12]
    a00a:	2b18      	cmp	r3, #24
    a00c:	d806      	bhi.n	a01c <_can_async_write+0xf4>
		f->T1.bit.DLC = 0xC;
    a00e:	68fa      	ldr	r2, [r7, #12]
    a010:	6853      	ldr	r3, [r2, #4]
    a012:	210c      	movs	r1, #12
    a014:	f361 4313 	bfi	r3, r1, #16, #4
    a018:	6053      	str	r3, [r2, #4]
    a01a:	e01e      	b.n	a05a <_can_async_write+0x132>
	} else if (msg->len <= 32) {
    a01c:	683b      	ldr	r3, [r7, #0]
    a01e:	7b1b      	ldrb	r3, [r3, #12]
    a020:	2b20      	cmp	r3, #32
    a022:	d806      	bhi.n	a032 <_can_async_write+0x10a>
		f->T1.bit.DLC = 0xD;
    a024:	68fa      	ldr	r2, [r7, #12]
    a026:	6853      	ldr	r3, [r2, #4]
    a028:	210d      	movs	r1, #13
    a02a:	f361 4313 	bfi	r3, r1, #16, #4
    a02e:	6053      	str	r3, [r2, #4]
    a030:	e013      	b.n	a05a <_can_async_write+0x132>
	} else if (msg->len <= 48) {
    a032:	683b      	ldr	r3, [r7, #0]
    a034:	7b1b      	ldrb	r3, [r3, #12]
    a036:	2b30      	cmp	r3, #48	; 0x30
    a038:	d806      	bhi.n	a048 <_can_async_write+0x120>
		f->T1.bit.DLC = 0xE;
    a03a:	68fa      	ldr	r2, [r7, #12]
    a03c:	6853      	ldr	r3, [r2, #4]
    a03e:	210e      	movs	r1, #14
    a040:	f361 4313 	bfi	r3, r1, #16, #4
    a044:	6053      	str	r3, [r2, #4]
    a046:	e008      	b.n	a05a <_can_async_write+0x132>
	} else if (msg->len <= 64) {
    a048:	683b      	ldr	r3, [r7, #0]
    a04a:	7b1b      	ldrb	r3, [r3, #12]
    a04c:	2b40      	cmp	r3, #64	; 0x40
    a04e:	d804      	bhi.n	a05a <_can_async_write+0x132>
		f->T1.bit.DLC = 0xF;
    a050:	68fa      	ldr	r2, [r7, #12]
    a052:	6853      	ldr	r3, [r2, #4]
    a054:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
    a058:	6053      	str	r3, [r2, #4]
	}

	f->T1.bit.FDF = hri_can_get_CCCR_FDOE_bit(dev->hw);
    a05a:	687b      	ldr	r3, [r7, #4]
    a05c:	681b      	ldr	r3, [r3, #0]
    a05e:	4618      	mov	r0, r3
    a060:	4b1c      	ldr	r3, [pc, #112]	; (a0d4 <_can_async_write+0x1ac>)
    a062:	4798      	blx	r3
    a064:	4603      	mov	r3, r0
    a066:	4619      	mov	r1, r3
    a068:	68fa      	ldr	r2, [r7, #12]
    a06a:	6853      	ldr	r3, [r2, #4]
    a06c:	f361 5355 	bfi	r3, r1, #21, #1
    a070:	6053      	str	r3, [r2, #4]
	f->T1.bit.BRS = hri_can_get_CCCR_BRSE_bit(dev->hw);
    a072:	687b      	ldr	r3, [r7, #4]
    a074:	681b      	ldr	r3, [r3, #0]
    a076:	4618      	mov	r0, r3
    a078:	4b17      	ldr	r3, [pc, #92]	; (a0d8 <_can_async_write+0x1b0>)
    a07a:	4798      	blx	r3
    a07c:	4603      	mov	r3, r0
    a07e:	4619      	mov	r1, r3
    a080:	68fa      	ldr	r2, [r7, #12]
    a082:	6853      	ldr	r3, [r2, #4]
    a084:	f361 5314 	bfi	r3, r1, #20, #1
    a088:	6053      	str	r3, [r2, #4]

	memcpy(f->data, msg->data, msg->len);
    a08a:	68fb      	ldr	r3, [r7, #12]
    a08c:	f103 0008 	add.w	r0, r3, #8
    a090:	683b      	ldr	r3, [r7, #0]
    a092:	6899      	ldr	r1, [r3, #8]
    a094:	683b      	ldr	r3, [r7, #0]
    a096:	7b1b      	ldrb	r3, [r3, #12]
    a098:	461a      	mov	r2, r3
    a09a:	4b10      	ldr	r3, [pc, #64]	; (a0dc <_can_async_write+0x1b4>)
    a09c:	4798      	blx	r3

	hri_can_write_TXBAR_reg(dev->hw, 1 << hri_can_read_TXFQS_TFQPI_bf(dev->hw));
    a09e:	687b      	ldr	r3, [r7, #4]
    a0a0:	681c      	ldr	r4, [r3, #0]
    a0a2:	687b      	ldr	r3, [r7, #4]
    a0a4:	681b      	ldr	r3, [r3, #0]
    a0a6:	4618      	mov	r0, r3
    a0a8:	4b07      	ldr	r3, [pc, #28]	; (a0c8 <_can_async_write+0x1a0>)
    a0aa:	4798      	blx	r3
    a0ac:	4602      	mov	r2, r0
    a0ae:	2301      	movs	r3, #1
    a0b0:	4093      	lsls	r3, r2
    a0b2:	4619      	mov	r1, r3
    a0b4:	4620      	mov	r0, r4
    a0b6:	4b0a      	ldr	r3, [pc, #40]	; (a0e0 <_can_async_write+0x1b8>)
    a0b8:	4798      	blx	r3
	return ERR_NONE;
    a0ba:	2300      	movs	r3, #0
}
    a0bc:	4618      	mov	r0, r3
    a0be:	3714      	adds	r7, #20
    a0c0:	46bd      	mov	sp, r7
    a0c2:	bd90      	pop	{r4, r7, pc}
    a0c4:	0000979b 	.word	0x0000979b
    a0c8:	000097c5 	.word	0x000097c5
    a0cc:	42000400 	.word	0x42000400
    a0d0:	20001c18 	.word	0x20001c18
    a0d4:	000098cb 	.word	0x000098cb
    a0d8:	000098fb 	.word	0x000098fb
    a0dc:	00012db5 	.word	0x00012db5
    a0e0:	00009b91 	.word	0x00009b91

0000a0e4 <_can_async_set_irq_state>:

/**
 * \brief Set CAN Interrupt State
 */
void _can_async_set_irq_state(struct _can_async_device *const dev, enum can_async_callback_type type, bool state)
{
    a0e4:	b580      	push	{r7, lr}
    a0e6:	b084      	sub	sp, #16
    a0e8:	af00      	add	r7, sp, #0
    a0ea:	6078      	str	r0, [r7, #4]
    a0ec:	460b      	mov	r3, r1
    a0ee:	70fb      	strb	r3, [r7, #3]
    a0f0:	4613      	mov	r3, r2
    a0f2:	70bb      	strb	r3, [r7, #2]
	uint32_t ie;

	if (type == CAN_ASYNC_RX_CB) {
    a0f4:	78fb      	ldrb	r3, [r7, #3]
    a0f6:	2b00      	cmp	r3, #0
    a0f8:	d107      	bne.n	a10a <_can_async_set_irq_state+0x26>
		hri_can_write_IE_RF0NE_bit(dev->hw, state);
    a0fa:	687b      	ldr	r3, [r7, #4]
    a0fc:	681b      	ldr	r3, [r3, #0]
    a0fe:	78ba      	ldrb	r2, [r7, #2]
    a100:	4611      	mov	r1, r2
    a102:	4618      	mov	r0, r3
    a104:	4b15      	ldr	r3, [pc, #84]	; (a15c <_can_async_set_irq_state+0x78>)
    a106:	4798      	blx	r3
	} else if (type == CAN_ASYNC_IRQ_CB) {
		ie = hri_can_get_IE_reg(dev->hw, CAN_IE_RF0NE | CAN_IE_TCE);
		hri_can_write_IE_reg(dev->hw, ie | CONF_CAN0_IE_REG);
	}

	return;
    a108:	e023      	b.n	a152 <_can_async_set_irq_state+0x6e>
	} else if (type == CAN_ASYNC_TX_CB) {
    a10a:	78fb      	ldrb	r3, [r7, #3]
    a10c:	2b01      	cmp	r3, #1
    a10e:	d10e      	bne.n	a12e <_can_async_set_irq_state+0x4a>
		hri_can_write_IE_TCE_bit(dev->hw, state);
    a110:	687b      	ldr	r3, [r7, #4]
    a112:	681b      	ldr	r3, [r3, #0]
    a114:	78ba      	ldrb	r2, [r7, #2]
    a116:	4611      	mov	r1, r2
    a118:	4618      	mov	r0, r3
    a11a:	4b11      	ldr	r3, [pc, #68]	; (a160 <_can_async_set_irq_state+0x7c>)
    a11c:	4798      	blx	r3
		hri_can_write_TXBTIE_reg(dev->hw, CAN_TXBTIE_MASK);
    a11e:	687b      	ldr	r3, [r7, #4]
    a120:	681b      	ldr	r3, [r3, #0]
    a122:	f04f 31ff 	mov.w	r1, #4294967295
    a126:	4618      	mov	r0, r3
    a128:	4b0e      	ldr	r3, [pc, #56]	; (a164 <_can_async_set_irq_state+0x80>)
    a12a:	4798      	blx	r3
	return;
    a12c:	e011      	b.n	a152 <_can_async_set_irq_state+0x6e>
	} else if (type == CAN_ASYNC_IRQ_CB) {
    a12e:	78fb      	ldrb	r3, [r7, #3]
    a130:	2b02      	cmp	r3, #2
    a132:	d10e      	bne.n	a152 <_can_async_set_irq_state+0x6e>
		ie = hri_can_get_IE_reg(dev->hw, CAN_IE_RF0NE | CAN_IE_TCE);
    a134:	687b      	ldr	r3, [r7, #4]
    a136:	681b      	ldr	r3, [r3, #0]
    a138:	f240 2101 	movw	r1, #513	; 0x201
    a13c:	4618      	mov	r0, r3
    a13e:	4b0a      	ldr	r3, [pc, #40]	; (a168 <_can_async_set_irq_state+0x84>)
    a140:	4798      	blx	r3
    a142:	60f8      	str	r0, [r7, #12]
		hri_can_write_IE_reg(dev->hw, ie | CONF_CAN0_IE_REG);
    a144:	687b      	ldr	r3, [r7, #4]
    a146:	681b      	ldr	r3, [r3, #0]
    a148:	68f9      	ldr	r1, [r7, #12]
    a14a:	4618      	mov	r0, r3
    a14c:	4b07      	ldr	r3, [pc, #28]	; (a16c <_can_async_set_irq_state+0x88>)
    a14e:	4798      	blx	r3
	return;
    a150:	bf00      	nop
    a152:	bf00      	nop
}
    a154:	3710      	adds	r7, #16
    a156:	46bd      	mov	sp, r7
    a158:	bd80      	pop	{r7, pc}
    a15a:	bf00      	nop
    a15c:	0000999d 	.word	0x0000999d
    a160:	000099d1 	.word	0x000099d1
    a164:	00009baf 	.word	0x00009baf
    a168:	00009a09 	.word	0x00009a09
    a16c:	00009a2f 	.word	0x00009a2f

0000a170 <_can_async_set_filter>:
/**
 * \brief Set CAN to the specified mode
 */
int32_t _can_async_set_filter(struct _can_async_device *const dev, uint8_t index, enum can_format fmt,
                              struct can_filter *filter)
{
    a170:	b480      	push	{r7}
    a172:	b087      	sub	sp, #28
    a174:	af00      	add	r7, sp, #0
    a176:	60f8      	str	r0, [r7, #12]
    a178:	607b      	str	r3, [r7, #4]
    a17a:	460b      	mov	r3, r1
    a17c:	72fb      	strb	r3, [r7, #11]
    a17e:	4613      	mov	r3, r2
    a180:	72bb      	strb	r3, [r7, #10]
	struct _can_standard_message_filter_element *sf;
	struct _can_extended_message_filter_element *ef;

	sf = &((struct _can_context *)dev->context)->rx_std_filter[index];
    a182:	68fb      	ldr	r3, [r7, #12]
    a184:	699b      	ldr	r3, [r3, #24]
    a186:	68da      	ldr	r2, [r3, #12]
    a188:	7afb      	ldrb	r3, [r7, #11]
    a18a:	009b      	lsls	r3, r3, #2
    a18c:	4413      	add	r3, r2
    a18e:	617b      	str	r3, [r7, #20]
	ef = &((struct _can_context *)dev->context)->rx_ext_filter[index];
    a190:	68fb      	ldr	r3, [r7, #12]
    a192:	699b      	ldr	r3, [r3, #24]
    a194:	691a      	ldr	r2, [r3, #16]
    a196:	7afb      	ldrb	r3, [r7, #11]
    a198:	00db      	lsls	r3, r3, #3
    a19a:	4413      	add	r3, r2
    a19c:	613b      	str	r3, [r7, #16]

	if (fmt == CAN_FMT_STDID) {
    a19e:	7abb      	ldrb	r3, [r7, #10]
    a1a0:	2b00      	cmp	r3, #0
    a1a2:	d123      	bne.n	a1ec <_can_async_set_filter+0x7c>
		if (filter == NULL) {
    a1a4:	687b      	ldr	r3, [r7, #4]
    a1a6:	2b00      	cmp	r3, #0
    a1a8:	d104      	bne.n	a1b4 <_can_async_set_filter+0x44>
			sf->S0.val = 0;
    a1aa:	697b      	ldr	r3, [r7, #20]
    a1ac:	2200      	movs	r2, #0
    a1ae:	601a      	str	r2, [r3, #0]
			return ERR_NONE;
    a1b0:	2300      	movs	r3, #0
    a1b2:	e03b      	b.n	a22c <_can_async_set_filter+0xbc>
		}
		sf->S0.val       = filter->mask;
    a1b4:	687b      	ldr	r3, [r7, #4]
    a1b6:	685a      	ldr	r2, [r3, #4]
    a1b8:	697b      	ldr	r3, [r7, #20]
    a1ba:	601a      	str	r2, [r3, #0]
		sf->S0.bit.SFID1 = filter->id;
    a1bc:	687b      	ldr	r3, [r7, #4]
    a1be:	681b      	ldr	r3, [r3, #0]
    a1c0:	b29b      	uxth	r3, r3
    a1c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
    a1c6:	b299      	uxth	r1, r3
    a1c8:	697a      	ldr	r2, [r7, #20]
    a1ca:	6813      	ldr	r3, [r2, #0]
    a1cc:	f361 431a 	bfi	r3, r1, #16, #11
    a1d0:	6013      	str	r3, [r2, #0]
		sf->S0.bit.SFT   = _CAN_SFT_CLASSIC;
    a1d2:	697a      	ldr	r2, [r7, #20]
    a1d4:	6813      	ldr	r3, [r2, #0]
    a1d6:	2102      	movs	r1, #2
    a1d8:	f361 739f 	bfi	r3, r1, #30, #2
    a1dc:	6013      	str	r3, [r2, #0]
		sf->S0.bit.SFEC  = _CAN_SFEC_STF0M;
    a1de:	697a      	ldr	r2, [r7, #20]
    a1e0:	6813      	ldr	r3, [r2, #0]
    a1e2:	2101      	movs	r1, #1
    a1e4:	f361 63dd 	bfi	r3, r1, #27, #3
    a1e8:	6013      	str	r3, [r2, #0]
    a1ea:	e01e      	b.n	a22a <_can_async_set_filter+0xba>
	} else if (fmt == CAN_FMT_EXTID) {
    a1ec:	7abb      	ldrb	r3, [r7, #10]
    a1ee:	2b01      	cmp	r3, #1
    a1f0:	d11b      	bne.n	a22a <_can_async_set_filter+0xba>
		if (filter == NULL) {
    a1f2:	687b      	ldr	r3, [r7, #4]
    a1f4:	2b00      	cmp	r3, #0
    a1f6:	d104      	bne.n	a202 <_can_async_set_filter+0x92>
			ef->F0.val = 0;
    a1f8:	693b      	ldr	r3, [r7, #16]
    a1fa:	2200      	movs	r2, #0
    a1fc:	601a      	str	r2, [r3, #0]
			return ERR_NONE;
    a1fe:	2300      	movs	r3, #0
    a200:	e014      	b.n	a22c <_can_async_set_filter+0xbc>
		}
		ef->F0.val      = filter->id;
    a202:	687b      	ldr	r3, [r7, #4]
    a204:	681a      	ldr	r2, [r3, #0]
    a206:	693b      	ldr	r3, [r7, #16]
    a208:	601a      	str	r2, [r3, #0]
		ef->F0.bit.EFEC = _CAN_EFEC_STF0M;
    a20a:	693a      	ldr	r2, [r7, #16]
    a20c:	6813      	ldr	r3, [r2, #0]
    a20e:	2101      	movs	r1, #1
    a210:	f361 735f 	bfi	r3, r1, #29, #3
    a214:	6013      	str	r3, [r2, #0]
		ef->F1.val      = filter->mask;
    a216:	687b      	ldr	r3, [r7, #4]
    a218:	685a      	ldr	r2, [r3, #4]
    a21a:	693b      	ldr	r3, [r7, #16]
    a21c:	605a      	str	r2, [r3, #4]
		ef->F1.bit.EFT  = _CAN_EFT_CLASSIC;
    a21e:	693a      	ldr	r2, [r7, #16]
    a220:	6853      	ldr	r3, [r2, #4]
    a222:	2102      	movs	r1, #2
    a224:	f361 739f 	bfi	r3, r1, #30, #2
    a228:	6053      	str	r3, [r2, #4]
	}

	return ERR_NONE;
    a22a:	2300      	movs	r3, #0
}
    a22c:	4618      	mov	r0, r3
    a22e:	371c      	adds	r7, #28
    a230:	46bd      	mov	sp, r7
    a232:	f85d 7b04 	ldr.w	r7, [sp], #4
    a236:	4770      	bx	lr

0000a238 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    a238:	b590      	push	{r4, r7, lr}
    a23a:	b083      	sub	sp, #12
    a23c:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    a23e:	4b2c      	ldr	r3, [pc, #176]	; (a2f0 <CAN1_Handler+0xb8>)
    a240:	681b      	ldr	r3, [r3, #0]
    a242:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    a244:	687b      	ldr	r3, [r7, #4]
    a246:	681b      	ldr	r3, [r3, #0]
    a248:	4618      	mov	r0, r3
    a24a:	4b2a      	ldr	r3, [pc, #168]	; (a2f4 <CAN1_Handler+0xbc>)
    a24c:	4798      	blx	r3
    a24e:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    a250:	683b      	ldr	r3, [r7, #0]
    a252:	f003 0301 	and.w	r3, r3, #1
    a256:	2b00      	cmp	r3, #0
    a258:	d003      	beq.n	a262 <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    a25a:	687b      	ldr	r3, [r7, #4]
    a25c:	689b      	ldr	r3, [r3, #8]
    a25e:	6878      	ldr	r0, [r7, #4]
    a260:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    a262:	683b      	ldr	r3, [r7, #0]
    a264:	f403 7300 	and.w	r3, r3, #512	; 0x200
    a268:	2b00      	cmp	r3, #0
    a26a:	d003      	beq.n	a274 <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    a26c:	687b      	ldr	r3, [r7, #4]
    a26e:	685b      	ldr	r3, [r3, #4]
    a270:	6878      	ldr	r0, [r7, #4]
    a272:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    a274:	683b      	ldr	r3, [r7, #0]
    a276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    a27a:	2b00      	cmp	r3, #0
    a27c:	d004      	beq.n	a288 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    a27e:	687b      	ldr	r3, [r7, #4]
    a280:	68db      	ldr	r3, [r3, #12]
    a282:	2103      	movs	r1, #3
    a284:	6878      	ldr	r0, [r7, #4]
    a286:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    a288:	683b      	ldr	r3, [r7, #0]
    a28a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    a28e:	2b00      	cmp	r3, #0
    a290:	d004      	beq.n	a29c <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    a292:	687b      	ldr	r3, [r7, #4]
    a294:	68db      	ldr	r3, [r3, #12]
    a296:	2100      	movs	r1, #0
    a298:	6878      	ldr	r0, [r7, #4]
    a29a:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    a29c:	683b      	ldr	r3, [r7, #0]
    a29e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    a2a2:	2b00      	cmp	r3, #0
    a2a4:	d00f      	beq.n	a2c6 <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    a2a6:	687b      	ldr	r3, [r7, #4]
    a2a8:	68dc      	ldr	r4, [r3, #12]
    a2aa:	687b      	ldr	r3, [r7, #4]
    a2ac:	681b      	ldr	r3, [r3, #0]
    a2ae:	4618      	mov	r0, r3
    a2b0:	4b11      	ldr	r3, [pc, #68]	; (a2f8 <CAN1_Handler+0xc0>)
    a2b2:	4798      	blx	r3
    a2b4:	4603      	mov	r3, r0
    a2b6:	2b00      	cmp	r3, #0
    a2b8:	d001      	beq.n	a2be <CAN1_Handler+0x86>
    a2ba:	2302      	movs	r3, #2
    a2bc:	e000      	b.n	a2c0 <CAN1_Handler+0x88>
    a2be:	2301      	movs	r3, #1
    a2c0:	4619      	mov	r1, r3
    a2c2:	6878      	ldr	r0, [r7, #4]
    a2c4:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    a2c6:	683b      	ldr	r3, [r7, #0]
    a2c8:	f003 0308 	and.w	r3, r3, #8
    a2cc:	2b00      	cmp	r3, #0
    a2ce:	d004      	beq.n	a2da <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    a2d0:	687b      	ldr	r3, [r7, #4]
    a2d2:	68db      	ldr	r3, [r3, #12]
    a2d4:	2104      	movs	r1, #4
    a2d6:	6878      	ldr	r0, [r7, #4]
    a2d8:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    a2da:	687b      	ldr	r3, [r7, #4]
    a2dc:	681b      	ldr	r3, [r3, #0]
    a2de:	6839      	ldr	r1, [r7, #0]
    a2e0:	4618      	mov	r0, r3
    a2e2:	4b06      	ldr	r3, [pc, #24]	; (a2fc <CAN1_Handler+0xc4>)
    a2e4:	4798      	blx	r3
}
    a2e6:	bf00      	nop
    a2e8:	370c      	adds	r7, #12
    a2ea:	46bd      	mov	sp, r7
    a2ec:	bd90      	pop	{r4, r7, pc}
    a2ee:	bf00      	nop
    a2f0:	20001588 	.word	0x20001588
    a2f4:	00009985 	.word	0x00009985
    a2f8:	00009735 	.word	0x00009735
    a2fc:	00009969 	.word	0x00009969

0000a300 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    a300:	b480      	push	{r7}
    a302:	b083      	sub	sp, #12
    a304:	af00      	add	r7, sp, #0
    a306:	4603      	mov	r3, r0
    a308:	6039      	str	r1, [r7, #0]
    a30a:	80fb      	strh	r3, [r7, #6]
    a30c:	4613      	mov	r3, r2
    a30e:	717b      	strb	r3, [r7, #5]
	switch (power) {
    a310:	797b      	ldrb	r3, [r7, #5]
    a312:	3b04      	subs	r3, #4
    a314:	2b05      	cmp	r3, #5
    a316:	d86b      	bhi.n	a3f0 <_get_cycles_for_us_internal+0xf0>
    a318:	a201      	add	r2, pc, #4	; (adr r2, a320 <_get_cycles_for_us_internal+0x20>)
    a31a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    a31e:	bf00      	nop
    a320:	0000a3cf 	.word	0x0000a3cf
    a324:	0000a3af 	.word	0x0000a3af
    a328:	0000a391 	.word	0x0000a391
    a32c:	0000a373 	.word	0x0000a373
    a330:	0000a355 	.word	0x0000a355
    a334:	0000a339 	.word	0x0000a339
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    a338:	88fb      	ldrh	r3, [r7, #6]
    a33a:	683a      	ldr	r2, [r7, #0]
    a33c:	4935      	ldr	r1, [pc, #212]	; (a414 <_get_cycles_for_us_internal+0x114>)
    a33e:	fba1 1202 	umull	r1, r2, r1, r2
    a342:	0c92      	lsrs	r2, r2, #18
    a344:	fb02 f303 	mul.w	r3, r2, r3
    a348:	3302      	adds	r3, #2
    a34a:	4a33      	ldr	r2, [pc, #204]	; (a418 <_get_cycles_for_us_internal+0x118>)
    a34c:	fba2 2303 	umull	r2, r3, r2, r3
    a350:	085b      	lsrs	r3, r3, #1
    a352:	e059      	b.n	a408 <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    a354:	88fb      	ldrh	r3, [r7, #6]
    a356:	683a      	ldr	r2, [r7, #0]
    a358:	0952      	lsrs	r2, r2, #5
    a35a:	4930      	ldr	r1, [pc, #192]	; (a41c <_get_cycles_for_us_internal+0x11c>)
    a35c:	fba1 1202 	umull	r1, r2, r1, r2
    a360:	09d2      	lsrs	r2, r2, #7
    a362:	fb02 f303 	mul.w	r3, r2, r3
    a366:	331d      	adds	r3, #29
    a368:	4a2d      	ldr	r2, [pc, #180]	; (a420 <_get_cycles_for_us_internal+0x120>)
    a36a:	fba2 2303 	umull	r2, r3, r2, r3
    a36e:	091b      	lsrs	r3, r3, #4
    a370:	e04a      	b.n	a408 <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    a372:	88fb      	ldrh	r3, [r7, #6]
    a374:	683a      	ldr	r2, [r7, #0]
    a376:	492b      	ldr	r1, [pc, #172]	; (a424 <_get_cycles_for_us_internal+0x124>)
    a378:	fba1 1202 	umull	r1, r2, r1, r2
    a37c:	0b52      	lsrs	r2, r2, #13
    a37e:	fb02 f303 	mul.w	r3, r2, r3
    a382:	f203 132b 	addw	r3, r3, #299	; 0x12b
    a386:	4a28      	ldr	r2, [pc, #160]	; (a428 <_get_cycles_for_us_internal+0x128>)
    a388:	fba2 2303 	umull	r2, r3, r2, r3
    a38c:	095b      	lsrs	r3, r3, #5
    a38e:	e03b      	b.n	a408 <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    a390:	88fb      	ldrh	r3, [r7, #6]
    a392:	683a      	ldr	r2, [r7, #0]
    a394:	4925      	ldr	r1, [pc, #148]	; (a42c <_get_cycles_for_us_internal+0x12c>)
    a396:	fba1 1202 	umull	r1, r2, r1, r2
    a39a:	0992      	lsrs	r2, r2, #6
    a39c:	fb02 f303 	mul.w	r3, r2, r3
    a3a0:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    a3a4:	4a22      	ldr	r2, [pc, #136]	; (a430 <_get_cycles_for_us_internal+0x130>)
    a3a6:	fba2 2303 	umull	r2, r3, r2, r3
    a3aa:	099b      	lsrs	r3, r3, #6
    a3ac:	e02c      	b.n	a408 <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    a3ae:	88fb      	ldrh	r3, [r7, #6]
    a3b0:	683a      	ldr	r2, [r7, #0]
    a3b2:	4920      	ldr	r1, [pc, #128]	; (a434 <_get_cycles_for_us_internal+0x134>)
    a3b4:	fba1 1202 	umull	r1, r2, r1, r2
    a3b8:	0952      	lsrs	r2, r2, #5
    a3ba:	fb02 f303 	mul.w	r3, r2, r3
    a3be:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    a3c2:	332f      	adds	r3, #47	; 0x2f
    a3c4:	4a1c      	ldr	r2, [pc, #112]	; (a438 <_get_cycles_for_us_internal+0x138>)
    a3c6:	fba2 2303 	umull	r2, r3, r2, r3
    a3ca:	0b5b      	lsrs	r3, r3, #13
    a3cc:	e01c      	b.n	a408 <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    a3ce:	88fb      	ldrh	r3, [r7, #6]
    a3d0:	683a      	ldr	r2, [r7, #0]
    a3d2:	491a      	ldr	r1, [pc, #104]	; (a43c <_get_cycles_for_us_internal+0x13c>)
    a3d4:	fba1 1202 	umull	r1, r2, r1, r2
    a3d8:	08d2      	lsrs	r2, r2, #3
    a3da:	fb02 f303 	mul.w	r3, r2, r3
    a3de:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    a3e2:	f203 33df 	addw	r3, r3, #991	; 0x3df
    a3e6:	4a16      	ldr	r2, [pc, #88]	; (a440 <_get_cycles_for_us_internal+0x140>)
    a3e8:	fba2 2303 	umull	r2, r3, r2, r3
    a3ec:	0c5b      	lsrs	r3, r3, #17
    a3ee:	e00b      	b.n	a408 <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    a3f0:	88fb      	ldrh	r3, [r7, #6]
    a3f2:	683a      	ldr	r2, [r7, #0]
    a3f4:	fb02 f303 	mul.w	r3, r2, r3
    a3f8:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    a3fc:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    a400:	4a10      	ldr	r2, [pc, #64]	; (a444 <_get_cycles_for_us_internal+0x144>)
    a402:	fba2 2303 	umull	r2, r3, r2, r3
    a406:	0c9b      	lsrs	r3, r3, #18
	}
}
    a408:	4618      	mov	r0, r3
    a40a:	370c      	adds	r7, #12
    a40c:	46bd      	mov	sp, r7
    a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a412:	4770      	bx	lr
    a414:	431bde83 	.word	0x431bde83
    a418:	aaaaaaab 	.word	0xaaaaaaab
    a41c:	0a7c5ac5 	.word	0x0a7c5ac5
    a420:	88888889 	.word	0x88888889
    a424:	d1b71759 	.word	0xd1b71759
    a428:	1b4e81b5 	.word	0x1b4e81b5
    a42c:	10624dd3 	.word	0x10624dd3
    a430:	057619f1 	.word	0x057619f1
    a434:	51eb851f 	.word	0x51eb851f
    a438:	45e7b273 	.word	0x45e7b273
    a43c:	cccccccd 	.word	0xcccccccd
    a440:	6fd91d85 	.word	0x6fd91d85
    a444:	165e9f81 	.word	0x165e9f81

0000a448 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    a448:	b580      	push	{r7, lr}
    a44a:	b082      	sub	sp, #8
    a44c:	af00      	add	r7, sp, #0
    a44e:	4603      	mov	r3, r0
    a450:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    a452:	88fb      	ldrh	r3, [r7, #6]
    a454:	2209      	movs	r2, #9
    a456:	4904      	ldr	r1, [pc, #16]	; (a468 <_get_cycles_for_us+0x20>)
    a458:	4618      	mov	r0, r3
    a45a:	4b04      	ldr	r3, [pc, #16]	; (a46c <_get_cycles_for_us+0x24>)
    a45c:	4798      	blx	r3
    a45e:	4603      	mov	r3, r0
}
    a460:	4618      	mov	r0, r3
    a462:	3708      	adds	r7, #8
    a464:	46bd      	mov	sp, r7
    a466:	bd80      	pop	{r7, pc}
    a468:	07270e00 	.word	0x07270e00
    a46c:	0000a301 	.word	0x0000a301

0000a470 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    a470:	b480      	push	{r7}
    a472:	b083      	sub	sp, #12
    a474:	af00      	add	r7, sp, #0
    a476:	4603      	mov	r3, r0
    a478:	6039      	str	r1, [r7, #0]
    a47a:	80fb      	strh	r3, [r7, #6]
    a47c:	4613      	mov	r3, r2
    a47e:	717b      	strb	r3, [r7, #5]
	switch (power) {
    a480:	797b      	ldrb	r3, [r7, #5]
    a482:	3b04      	subs	r3, #4
    a484:	2b05      	cmp	r3, #5
    a486:	d870      	bhi.n	a56a <_get_cycles_for_ms_internal+0xfa>
    a488:	a201      	add	r2, pc, #4	; (adr r2, a490 <_get_cycles_for_ms_internal+0x20>)
    a48a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    a48e:	bf00      	nop
    a490:	0000a54d 	.word	0x0000a54d
    a494:	0000a531 	.word	0x0000a531
    a498:	0000a515 	.word	0x0000a515
    a49c:	0000a4f1 	.word	0x0000a4f1
    a4a0:	0000a4cd 	.word	0x0000a4cd
    a4a4:	0000a4a9 	.word	0x0000a4a9
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    a4a8:	88fb      	ldrh	r3, [r7, #6]
    a4aa:	683a      	ldr	r2, [r7, #0]
    a4ac:	4937      	ldr	r1, [pc, #220]	; (a58c <_get_cycles_for_ms_internal+0x11c>)
    a4ae:	fba1 1202 	umull	r1, r2, r1, r2
    a4b2:	0c92      	lsrs	r2, r2, #18
    a4b4:	fb02 f303 	mul.w	r3, r2, r3
    a4b8:	3302      	adds	r3, #2
    a4ba:	4a35      	ldr	r2, [pc, #212]	; (a590 <_get_cycles_for_ms_internal+0x120>)
    a4bc:	fba2 2303 	umull	r2, r3, r2, r3
    a4c0:	085b      	lsrs	r3, r3, #1
    a4c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a4c6:	fb02 f303 	mul.w	r3, r2, r3
    a4ca:	e058      	b.n	a57e <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    a4cc:	88fb      	ldrh	r3, [r7, #6]
    a4ce:	683a      	ldr	r2, [r7, #0]
    a4d0:	0952      	lsrs	r2, r2, #5
    a4d2:	4930      	ldr	r1, [pc, #192]	; (a594 <_get_cycles_for_ms_internal+0x124>)
    a4d4:	fba1 1202 	umull	r1, r2, r1, r2
    a4d8:	09d2      	lsrs	r2, r2, #7
    a4da:	fb02 f303 	mul.w	r3, r2, r3
    a4de:	3302      	adds	r3, #2
    a4e0:	4a2b      	ldr	r2, [pc, #172]	; (a590 <_get_cycles_for_ms_internal+0x120>)
    a4e2:	fba2 2303 	umull	r2, r3, r2, r3
    a4e6:	085b      	lsrs	r3, r3, #1
    a4e8:	2264      	movs	r2, #100	; 0x64
    a4ea:	fb02 f303 	mul.w	r3, r2, r3
    a4ee:	e046      	b.n	a57e <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    a4f0:	88fb      	ldrh	r3, [r7, #6]
    a4f2:	683a      	ldr	r2, [r7, #0]
    a4f4:	4928      	ldr	r1, [pc, #160]	; (a598 <_get_cycles_for_ms_internal+0x128>)
    a4f6:	fba1 1202 	umull	r1, r2, r1, r2
    a4fa:	0b52      	lsrs	r2, r2, #13
    a4fc:	fb02 f303 	mul.w	r3, r2, r3
    a500:	3302      	adds	r3, #2
    a502:	4a23      	ldr	r2, [pc, #140]	; (a590 <_get_cycles_for_ms_internal+0x120>)
    a504:	fba2 2303 	umull	r2, r3, r2, r3
    a508:	085a      	lsrs	r2, r3, #1
    a50a:	4613      	mov	r3, r2
    a50c:	009b      	lsls	r3, r3, #2
    a50e:	4413      	add	r3, r2
    a510:	005b      	lsls	r3, r3, #1
    a512:	e034      	b.n	a57e <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    a514:	88fb      	ldrh	r3, [r7, #6]
    a516:	683a      	ldr	r2, [r7, #0]
    a518:	4920      	ldr	r1, [pc, #128]	; (a59c <_get_cycles_for_ms_internal+0x12c>)
    a51a:	fba1 1202 	umull	r1, r2, r1, r2
    a51e:	0992      	lsrs	r2, r2, #6
    a520:	fb02 f303 	mul.w	r3, r2, r3
    a524:	3302      	adds	r3, #2
    a526:	4a1a      	ldr	r2, [pc, #104]	; (a590 <_get_cycles_for_ms_internal+0x120>)
    a528:	fba2 2303 	umull	r2, r3, r2, r3
    a52c:	085b      	lsrs	r3, r3, #1
    a52e:	e026      	b.n	a57e <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    a530:	88fb      	ldrh	r3, [r7, #6]
    a532:	683a      	ldr	r2, [r7, #0]
    a534:	491a      	ldr	r1, [pc, #104]	; (a5a0 <_get_cycles_for_ms_internal+0x130>)
    a536:	fba1 1202 	umull	r1, r2, r1, r2
    a53a:	0952      	lsrs	r2, r2, #5
    a53c:	fb02 f303 	mul.w	r3, r2, r3
    a540:	331d      	adds	r3, #29
    a542:	4a18      	ldr	r2, [pc, #96]	; (a5a4 <_get_cycles_for_ms_internal+0x134>)
    a544:	fba2 2303 	umull	r2, r3, r2, r3
    a548:	091b      	lsrs	r3, r3, #4
    a54a:	e018      	b.n	a57e <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    a54c:	88fb      	ldrh	r3, [r7, #6]
    a54e:	683a      	ldr	r2, [r7, #0]
    a550:	4915      	ldr	r1, [pc, #84]	; (a5a8 <_get_cycles_for_ms_internal+0x138>)
    a552:	fba1 1202 	umull	r1, r2, r1, r2
    a556:	08d2      	lsrs	r2, r2, #3
    a558:	fb02 f303 	mul.w	r3, r2, r3
    a55c:	f203 132b 	addw	r3, r3, #299	; 0x12b
    a560:	4a12      	ldr	r2, [pc, #72]	; (a5ac <_get_cycles_for_ms_internal+0x13c>)
    a562:	fba2 2303 	umull	r2, r3, r2, r3
    a566:	095b      	lsrs	r3, r3, #5
    a568:	e009      	b.n	a57e <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    a56a:	88fb      	ldrh	r3, [r7, #6]
    a56c:	683a      	ldr	r2, [r7, #0]
    a56e:	fb02 f303 	mul.w	r3, r2, r3
    a572:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    a576:	4a0e      	ldr	r2, [pc, #56]	; (a5b0 <_get_cycles_for_ms_internal+0x140>)
    a578:	fba2 2303 	umull	r2, r3, r2, r3
    a57c:	099b      	lsrs	r3, r3, #6
	}
}
    a57e:	4618      	mov	r0, r3
    a580:	370c      	adds	r7, #12
    a582:	46bd      	mov	sp, r7
    a584:	f85d 7b04 	ldr.w	r7, [sp], #4
    a588:	4770      	bx	lr
    a58a:	bf00      	nop
    a58c:	431bde83 	.word	0x431bde83
    a590:	aaaaaaab 	.word	0xaaaaaaab
    a594:	0a7c5ac5 	.word	0x0a7c5ac5
    a598:	d1b71759 	.word	0xd1b71759
    a59c:	10624dd3 	.word	0x10624dd3
    a5a0:	51eb851f 	.word	0x51eb851f
    a5a4:	88888889 	.word	0x88888889
    a5a8:	cccccccd 	.word	0xcccccccd
    a5ac:	1b4e81b5 	.word	0x1b4e81b5
    a5b0:	057619f1 	.word	0x057619f1

0000a5b4 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    a5b4:	b580      	push	{r7, lr}
    a5b6:	b082      	sub	sp, #8
    a5b8:	af00      	add	r7, sp, #0
    a5ba:	4603      	mov	r3, r0
    a5bc:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    a5be:	88fb      	ldrh	r3, [r7, #6]
    a5c0:	2209      	movs	r2, #9
    a5c2:	4904      	ldr	r1, [pc, #16]	; (a5d4 <_get_cycles_for_ms+0x20>)
    a5c4:	4618      	mov	r0, r3
    a5c6:	4b04      	ldr	r3, [pc, #16]	; (a5d8 <_get_cycles_for_ms+0x24>)
    a5c8:	4798      	blx	r3
    a5ca:	4603      	mov	r3, r0
}
    a5cc:	4618      	mov	r0, r3
    a5ce:	3708      	adds	r7, #8
    a5d0:	46bd      	mov	sp, r7
    a5d2:	bd80      	pop	{r7, pc}
    a5d4:	07270e00 	.word	0x07270e00
    a5d8:	0000a471 	.word	0x0000a471
    a5dc:	00000000 	.word	0x00000000

0000a5e0 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    a5e0:	b480      	push	{r7}
    a5e2:	b083      	sub	sp, #12
    a5e4:	af00      	add	r7, sp, #0
    a5e6:	6078      	str	r0, [r7, #4]
    a5e8:	6039      	str	r1, [r7, #0]
    a5ea:	bf00      	nop
    a5ec:	f3af 8000 	nop.w

0000a5f0 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    a5f0:	3901      	subs	r1, #1
    a5f2:	d8fd      	bhi.n	a5f0 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    a5f4:	bf00      	nop
    a5f6:	370c      	adds	r7, #12
    a5f8:	46bd      	mov	sp, r7
    a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    a5fe:	4770      	bx	lr

0000a600 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    a600:	b480      	push	{r7}
    a602:	b083      	sub	sp, #12
    a604:	af00      	add	r7, sp, #0
    a606:	6078      	str	r0, [r7, #4]
    a608:	460b      	mov	r3, r1
    a60a:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    a60c:	687b      	ldr	r3, [r7, #4]
    a60e:	881b      	ldrh	r3, [r3, #0]
    a610:	b29a      	uxth	r2, r3
    a612:	887b      	ldrh	r3, [r7, #2]
    a614:	021b      	lsls	r3, r3, #8
    a616:	b29b      	uxth	r3, r3
    a618:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    a61c:	b29b      	uxth	r3, r3
    a61e:	4313      	orrs	r3, r2
    a620:	b29a      	uxth	r2, r3
    a622:	687b      	ldr	r3, [r7, #4]
    a624:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    a626:	bf00      	nop
    a628:	370c      	adds	r7, #12
    a62a:	46bd      	mov	sp, r7
    a62c:	f85d 7b04 	ldr.w	r7, [sp], #4
    a630:	4770      	bx	lr

0000a632 <hri_port_set_EVCTRL_reg>:
{
    a632:	b480      	push	{r7}
    a634:	b085      	sub	sp, #20
    a636:	af00      	add	r7, sp, #0
    a638:	60f8      	str	r0, [r7, #12]
    a63a:	460b      	mov	r3, r1
    a63c:	607a      	str	r2, [r7, #4]
    a63e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    a640:	7afb      	ldrb	r3, [r7, #11]
    a642:	7afa      	ldrb	r2, [r7, #11]
    a644:	68f9      	ldr	r1, [r7, #12]
    a646:	01d2      	lsls	r2, r2, #7
    a648:	440a      	add	r2, r1
    a64a:	322c      	adds	r2, #44	; 0x2c
    a64c:	6811      	ldr	r1, [r2, #0]
    a64e:	687a      	ldr	r2, [r7, #4]
    a650:	430a      	orrs	r2, r1
    a652:	68f9      	ldr	r1, [r7, #12]
    a654:	01db      	lsls	r3, r3, #7
    a656:	440b      	add	r3, r1
    a658:	332c      	adds	r3, #44	; 0x2c
    a65a:	601a      	str	r2, [r3, #0]
}
    a65c:	bf00      	nop
    a65e:	3714      	adds	r7, #20
    a660:	46bd      	mov	sp, r7
    a662:	f85d 7b04 	ldr.w	r7, [sp], #4
    a666:	4770      	bx	lr

0000a668 <_port_event_init>:

static inline void _port_event_init()
{
    a668:	b580      	push	{r7, lr}
    a66a:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    a66c:	2200      	movs	r2, #0
    a66e:	2100      	movs	r1, #0
    a670:	4809      	ldr	r0, [pc, #36]	; (a698 <_port_event_init+0x30>)
    a672:	4b0a      	ldr	r3, [pc, #40]	; (a69c <_port_event_init+0x34>)
    a674:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    a676:	2200      	movs	r2, #0
    a678:	2101      	movs	r1, #1
    a67a:	4807      	ldr	r0, [pc, #28]	; (a698 <_port_event_init+0x30>)
    a67c:	4b07      	ldr	r3, [pc, #28]	; (a69c <_port_event_init+0x34>)
    a67e:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    a680:	22ef      	movs	r2, #239	; 0xef
    a682:	2102      	movs	r1, #2
    a684:	4804      	ldr	r0, [pc, #16]	; (a698 <_port_event_init+0x30>)
    a686:	4b05      	ldr	r3, [pc, #20]	; (a69c <_port_event_init+0x34>)
    a688:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    a68a:	2200      	movs	r2, #0
    a68c:	2103      	movs	r1, #3
    a68e:	4802      	ldr	r0, [pc, #8]	; (a698 <_port_event_init+0x30>)
    a690:	4b02      	ldr	r3, [pc, #8]	; (a69c <_port_event_init+0x34>)
    a692:	4798      	blx	r3
}
    a694:	bf00      	nop
    a696:	bd80      	pop	{r7, pc}
    a698:	41008000 	.word	0x41008000
    a69c:	0000a633 	.word	0x0000a633

0000a6a0 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    a6a0:	b580      	push	{r7, lr}
    a6a2:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    a6a4:	2104      	movs	r1, #4
    a6a6:	480b      	ldr	r0, [pc, #44]	; (a6d4 <_init_chip+0x34>)
    a6a8:	4b0b      	ldr	r3, [pc, #44]	; (a6d8 <_init_chip+0x38>)
    a6aa:	4798      	blx	r3

	_osc32kctrl_init_sources();
    a6ac:	4b0b      	ldr	r3, [pc, #44]	; (a6dc <_init_chip+0x3c>)
    a6ae:	4798      	blx	r3
	_oscctrl_init_sources();
    a6b0:	4b0b      	ldr	r3, [pc, #44]	; (a6e0 <_init_chip+0x40>)
    a6b2:	4798      	blx	r3
	_mclk_init();
    a6b4:	4b0b      	ldr	r3, [pc, #44]	; (a6e4 <_init_chip+0x44>)
    a6b6:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    a6b8:	f44f 6084 	mov.w	r0, #1056	; 0x420
    a6bc:	4b0a      	ldr	r3, [pc, #40]	; (a6e8 <_init_chip+0x48>)
    a6be:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    a6c0:	4b0a      	ldr	r3, [pc, #40]	; (a6ec <_init_chip+0x4c>)
    a6c2:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    a6c4:	f640 30df 	movw	r0, #3039	; 0xbdf
    a6c8:	4b07      	ldr	r3, [pc, #28]	; (a6e8 <_init_chip+0x48>)
    a6ca:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    a6cc:	4b08      	ldr	r3, [pc, #32]	; (a6f0 <_init_chip+0x50>)
    a6ce:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    a6d0:	bf00      	nop
    a6d2:	bd80      	pop	{r7, pc}
    a6d4:	41004000 	.word	0x41004000
    a6d8:	0000a601 	.word	0x0000a601
    a6dc:	0000afe1 	.word	0x0000afe1
    a6e0:	0000b4a9 	.word	0x0000b4a9
    a6e4:	0000af01 	.word	0x0000af01
    a6e8:	0000ae09 	.word	0x0000ae09
    a6ec:	0000b4e9 	.word	0x0000b4e9
    a6f0:	0000a669 	.word	0x0000a669

0000a6f4 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    a6f4:	b480      	push	{r7}
    a6f6:	b083      	sub	sp, #12
    a6f8:	af00      	add	r7, sp, #0
    a6fa:	6078      	str	r0, [r7, #4]
    a6fc:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    a6fe:	687b      	ldr	r3, [r7, #4]
    a700:	683a      	ldr	r2, [r7, #0]
    a702:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    a704:	2300      	movs	r3, #0
}
    a706:	4618      	mov	r0, r3
    a708:	370c      	adds	r7, #12
    a70a:	46bd      	mov	sp, r7
    a70c:	f85d 7b04 	ldr.w	r7, [sp], #4
    a710:	4770      	bx	lr
	...

0000a714 <__NVIC_EnableIRQ>:
{
    a714:	b480      	push	{r7}
    a716:	b083      	sub	sp, #12
    a718:	af00      	add	r7, sp, #0
    a71a:	4603      	mov	r3, r0
    a71c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    a71e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a722:	2b00      	cmp	r3, #0
    a724:	db0b      	blt.n	a73e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a726:	4909      	ldr	r1, [pc, #36]	; (a74c <__NVIC_EnableIRQ+0x38>)
    a728:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a72c:	095b      	lsrs	r3, r3, #5
    a72e:	88fa      	ldrh	r2, [r7, #6]
    a730:	f002 021f 	and.w	r2, r2, #31
    a734:	2001      	movs	r0, #1
    a736:	fa00 f202 	lsl.w	r2, r0, r2
    a73a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a73e:	bf00      	nop
    a740:	370c      	adds	r7, #12
    a742:	46bd      	mov	sp, r7
    a744:	f85d 7b04 	ldr.w	r7, [sp], #4
    a748:	4770      	bx	lr
    a74a:	bf00      	nop
    a74c:	e000e100 	.word	0xe000e100

0000a750 <__NVIC_DisableIRQ>:
{
    a750:	b480      	push	{r7}
    a752:	b083      	sub	sp, #12
    a754:	af00      	add	r7, sp, #0
    a756:	4603      	mov	r3, r0
    a758:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    a75a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a75e:	2b00      	cmp	r3, #0
    a760:	db10      	blt.n	a784 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a762:	490b      	ldr	r1, [pc, #44]	; (a790 <__NVIC_DisableIRQ+0x40>)
    a764:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a768:	095b      	lsrs	r3, r3, #5
    a76a:	88fa      	ldrh	r2, [r7, #6]
    a76c:	f002 021f 	and.w	r2, r2, #31
    a770:	2001      	movs	r0, #1
    a772:	fa00 f202 	lsl.w	r2, r0, r2
    a776:	3320      	adds	r3, #32
    a778:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    a77c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    a780:	f3bf 8f6f 	isb	sy
}
    a784:	bf00      	nop
    a786:	370c      	adds	r7, #12
    a788:	46bd      	mov	sp, r7
    a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a78e:	4770      	bx	lr
    a790:	e000e100 	.word	0xe000e100

0000a794 <__NVIC_ClearPendingIRQ>:
{
    a794:	b480      	push	{r7}
    a796:	b083      	sub	sp, #12
    a798:	af00      	add	r7, sp, #0
    a79a:	4603      	mov	r3, r0
    a79c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    a79e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a7a2:	2b00      	cmp	r3, #0
    a7a4:	db0c      	blt.n	a7c0 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a7a6:	4909      	ldr	r1, [pc, #36]	; (a7cc <__NVIC_ClearPendingIRQ+0x38>)
    a7a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a7ac:	095b      	lsrs	r3, r3, #5
    a7ae:	88fa      	ldrh	r2, [r7, #6]
    a7b0:	f002 021f 	and.w	r2, r2, #31
    a7b4:	2001      	movs	r0, #1
    a7b6:	fa00 f202 	lsl.w	r2, r0, r2
    a7ba:	3360      	adds	r3, #96	; 0x60
    a7bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a7c0:	bf00      	nop
    a7c2:	370c      	adds	r7, #12
    a7c4:	46bd      	mov	sp, r7
    a7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    a7ca:	4770      	bx	lr
    a7cc:	e000e100 	.word	0xe000e100

0000a7d0 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    a7d0:	b480      	push	{r7}
    a7d2:	b083      	sub	sp, #12
    a7d4:	af00      	add	r7, sp, #0
    a7d6:	6078      	str	r0, [r7, #4]
    a7d8:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    a7da:	bf00      	nop
    a7dc:	687b      	ldr	r3, [r7, #4]
    a7de:	685a      	ldr	r2, [r3, #4]
    a7e0:	683b      	ldr	r3, [r7, #0]
    a7e2:	4013      	ands	r3, r2
    a7e4:	2b00      	cmp	r3, #0
    a7e6:	d1f9      	bne.n	a7dc <hri_eic_wait_for_sync+0xc>
	};
}
    a7e8:	bf00      	nop
    a7ea:	370c      	adds	r7, #12
    a7ec:	46bd      	mov	sp, r7
    a7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    a7f2:	4770      	bx	lr

0000a7f4 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    a7f4:	b480      	push	{r7}
    a7f6:	b083      	sub	sp, #12
    a7f8:	af00      	add	r7, sp, #0
    a7fa:	6078      	str	r0, [r7, #4]
    a7fc:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    a7fe:	687b      	ldr	r3, [r7, #4]
    a800:	685a      	ldr	r2, [r3, #4]
    a802:	683b      	ldr	r3, [r7, #0]
    a804:	4013      	ands	r3, r2
    a806:	2b00      	cmp	r3, #0
    a808:	bf14      	ite	ne
    a80a:	2301      	movne	r3, #1
    a80c:	2300      	moveq	r3, #0
    a80e:	b2db      	uxtb	r3, r3
}
    a810:	4618      	mov	r0, r3
    a812:	370c      	adds	r7, #12
    a814:	46bd      	mov	sp, r7
    a816:	f85d 7b04 	ldr.w	r7, [sp], #4
    a81a:	4770      	bx	lr

0000a81c <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    a81c:	b480      	push	{r7}
    a81e:	b083      	sub	sp, #12
    a820:	af00      	add	r7, sp, #0
    a822:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    a824:	687b      	ldr	r3, [r7, #4]
    a826:	695b      	ldr	r3, [r3, #20]
}
    a828:	4618      	mov	r0, r3
    a82a:	370c      	adds	r7, #12
    a82c:	46bd      	mov	sp, r7
    a82e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a832:	4770      	bx	lr

0000a834 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    a834:	b480      	push	{r7}
    a836:	b083      	sub	sp, #12
    a838:	af00      	add	r7, sp, #0
    a83a:	6078      	str	r0, [r7, #4]
    a83c:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    a83e:	687b      	ldr	r3, [r7, #4]
    a840:	683a      	ldr	r2, [r7, #0]
    a842:	615a      	str	r2, [r3, #20]
}
    a844:	bf00      	nop
    a846:	370c      	adds	r7, #12
    a848:	46bd      	mov	sp, r7
    a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a84e:	4770      	bx	lr

0000a850 <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    a850:	b580      	push	{r7, lr}
    a852:	b082      	sub	sp, #8
    a854:	af00      	add	r7, sp, #0
    a856:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    a858:	687b      	ldr	r3, [r7, #4]
    a85a:	781b      	ldrb	r3, [r3, #0]
    a85c:	b2db      	uxtb	r3, r3
    a85e:	f043 0302 	orr.w	r3, r3, #2
    a862:	b2da      	uxtb	r2, r3
    a864:	687b      	ldr	r3, [r7, #4]
    a866:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    a868:	2103      	movs	r1, #3
    a86a:	6878      	ldr	r0, [r7, #4]
    a86c:	4b02      	ldr	r3, [pc, #8]	; (a878 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    a86e:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    a870:	bf00      	nop
    a872:	3708      	adds	r7, #8
    a874:	46bd      	mov	sp, r7
    a876:	bd80      	pop	{r7, pc}
    a878:	0000a7d1 	.word	0x0000a7d1

0000a87c <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    a87c:	b580      	push	{r7, lr}
    a87e:	b082      	sub	sp, #8
    a880:	af00      	add	r7, sp, #0
    a882:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    a884:	687b      	ldr	r3, [r7, #4]
    a886:	781b      	ldrb	r3, [r3, #0]
    a888:	b2db      	uxtb	r3, r3
    a88a:	f023 0302 	bic.w	r3, r3, #2
    a88e:	b2da      	uxtb	r2, r3
    a890:	687b      	ldr	r3, [r7, #4]
    a892:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    a894:	2103      	movs	r1, #3
    a896:	6878      	ldr	r0, [r7, #4]
    a898:	4b02      	ldr	r3, [pc, #8]	; (a8a4 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    a89a:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    a89c:	bf00      	nop
    a89e:	3708      	adds	r7, #8
    a8a0:	46bd      	mov	sp, r7
    a8a2:	bd80      	pop	{r7, pc}
    a8a4:	0000a7d1 	.word	0x0000a7d1

0000a8a8 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    a8a8:	b580      	push	{r7, lr}
    a8aa:	b084      	sub	sp, #16
    a8ac:	af00      	add	r7, sp, #0
    a8ae:	6078      	str	r0, [r7, #4]
    a8b0:	460b      	mov	r3, r1
    a8b2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    a8b4:	687b      	ldr	r3, [r7, #4]
    a8b6:	781b      	ldrb	r3, [r3, #0]
    a8b8:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    a8ba:	7bfb      	ldrb	r3, [r7, #15]
    a8bc:	f023 0310 	bic.w	r3, r3, #16
    a8c0:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    a8c2:	78fb      	ldrb	r3, [r7, #3]
    a8c4:	011b      	lsls	r3, r3, #4
    a8c6:	b25a      	sxtb	r2, r3
    a8c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
    a8cc:	4313      	orrs	r3, r2
    a8ce:	b25b      	sxtb	r3, r3
    a8d0:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    a8d2:	687b      	ldr	r3, [r7, #4]
    a8d4:	7bfa      	ldrb	r2, [r7, #15]
    a8d6:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    a8d8:	2103      	movs	r1, #3
    a8da:	6878      	ldr	r0, [r7, #4]
    a8dc:	4b02      	ldr	r3, [pc, #8]	; (a8e8 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    a8de:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    a8e0:	bf00      	nop
    a8e2:	3710      	adds	r7, #16
    a8e4:	46bd      	mov	sp, r7
    a8e6:	bd80      	pop	{r7, pc}
    a8e8:	0000a7d1 	.word	0x0000a7d1

0000a8ec <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    a8ec:	b580      	push	{r7, lr}
    a8ee:	b084      	sub	sp, #16
    a8f0:	af00      	add	r7, sp, #0
    a8f2:	6078      	str	r0, [r7, #4]
    a8f4:	460b      	mov	r3, r1
    a8f6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    a8f8:	2103      	movs	r1, #3
    a8fa:	6878      	ldr	r0, [r7, #4]
    a8fc:	4b06      	ldr	r3, [pc, #24]	; (a918 <hri_eic_get_CTRLA_reg+0x2c>)
    a8fe:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    a900:	687b      	ldr	r3, [r7, #4]
    a902:	781b      	ldrb	r3, [r3, #0]
    a904:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    a906:	7bfa      	ldrb	r2, [r7, #15]
    a908:	78fb      	ldrb	r3, [r7, #3]
    a90a:	4013      	ands	r3, r2
    a90c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    a90e:	7bfb      	ldrb	r3, [r7, #15]
}
    a910:	4618      	mov	r0, r3
    a912:	3710      	adds	r7, #16
    a914:	46bd      	mov	sp, r7
    a916:	bd80      	pop	{r7, pc}
    a918:	0000a7d1 	.word	0x0000a7d1

0000a91c <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    a91c:	b580      	push	{r7, lr}
    a91e:	b082      	sub	sp, #8
    a920:	af00      	add	r7, sp, #0
    a922:	6078      	str	r0, [r7, #4]
    a924:	460b      	mov	r3, r1
    a926:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    a928:	687b      	ldr	r3, [r7, #4]
    a92a:	78fa      	ldrb	r2, [r7, #3]
    a92c:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    a92e:	2103      	movs	r1, #3
    a930:	6878      	ldr	r0, [r7, #4]
    a932:	4b03      	ldr	r3, [pc, #12]	; (a940 <hri_eic_write_CTRLA_reg+0x24>)
    a934:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    a936:	bf00      	nop
    a938:	3708      	adds	r7, #8
    a93a:	46bd      	mov	sp, r7
    a93c:	bd80      	pop	{r7, pc}
    a93e:	bf00      	nop
    a940:	0000a7d1 	.word	0x0000a7d1

0000a944 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    a944:	b480      	push	{r7}
    a946:	b083      	sub	sp, #12
    a948:	af00      	add	r7, sp, #0
    a94a:	6078      	str	r0, [r7, #4]
    a94c:	460b      	mov	r3, r1
    a94e:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    a950:	687b      	ldr	r3, [r7, #4]
    a952:	78fa      	ldrb	r2, [r7, #3]
    a954:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    a956:	bf00      	nop
    a958:	370c      	adds	r7, #12
    a95a:	46bd      	mov	sp, r7
    a95c:	f85d 7b04 	ldr.w	r7, [sp], #4
    a960:	4770      	bx	lr

0000a962 <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    a962:	b480      	push	{r7}
    a964:	b083      	sub	sp, #12
    a966:	af00      	add	r7, sp, #0
    a968:	6078      	str	r0, [r7, #4]
    a96a:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    a96c:	687b      	ldr	r3, [r7, #4]
    a96e:	683a      	ldr	r2, [r7, #0]
    a970:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    a972:	bf00      	nop
    a974:	370c      	adds	r7, #12
    a976:	46bd      	mov	sp, r7
    a978:	f85d 7b04 	ldr.w	r7, [sp], #4
    a97c:	4770      	bx	lr

0000a97e <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    a97e:	b480      	push	{r7}
    a980:	b083      	sub	sp, #12
    a982:	af00      	add	r7, sp, #0
    a984:	6078      	str	r0, [r7, #4]
    a986:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    a988:	687b      	ldr	r3, [r7, #4]
    a98a:	683a      	ldr	r2, [r7, #0]
    a98c:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    a98e:	bf00      	nop
    a990:	370c      	adds	r7, #12
    a992:	46bd      	mov	sp, r7
    a994:	f85d 7b04 	ldr.w	r7, [sp], #4
    a998:	4770      	bx	lr

0000a99a <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    a99a:	b480      	push	{r7}
    a99c:	b085      	sub	sp, #20
    a99e:	af00      	add	r7, sp, #0
    a9a0:	60f8      	str	r0, [r7, #12]
    a9a2:	460b      	mov	r3, r1
    a9a4:	607a      	str	r2, [r7, #4]
    a9a6:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    a9a8:	7afb      	ldrb	r3, [r7, #11]
    a9aa:	68fa      	ldr	r2, [r7, #12]
    a9ac:	3306      	adds	r3, #6
    a9ae:	009b      	lsls	r3, r3, #2
    a9b0:	4413      	add	r3, r2
    a9b2:	687a      	ldr	r2, [r7, #4]
    a9b4:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    a9b6:	bf00      	nop
    a9b8:	3714      	adds	r7, #20
    a9ba:	46bd      	mov	sp, r7
    a9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    a9c0:	4770      	bx	lr

0000a9c2 <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    a9c2:	b480      	push	{r7}
    a9c4:	b083      	sub	sp, #12
    a9c6:	af00      	add	r7, sp, #0
    a9c8:	6078      	str	r0, [r7, #4]
    a9ca:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    a9cc:	687b      	ldr	r3, [r7, #4]
    a9ce:	683a      	ldr	r2, [r7, #0]
    a9d0:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    a9d2:	bf00      	nop
    a9d4:	370c      	adds	r7, #12
    a9d6:	46bd      	mov	sp, r7
    a9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    a9dc:	4770      	bx	lr

0000a9de <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    a9de:	b480      	push	{r7}
    a9e0:	b083      	sub	sp, #12
    a9e2:	af00      	add	r7, sp, #0
    a9e4:	6078      	str	r0, [r7, #4]
    a9e6:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    a9e8:	687b      	ldr	r3, [r7, #4]
    a9ea:	683a      	ldr	r2, [r7, #0]
    a9ec:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    a9ee:	bf00      	nop
    a9f0:	370c      	adds	r7, #12
    a9f2:	46bd      	mov	sp, r7
    a9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    a9f8:	4770      	bx	lr
	...

0000a9fc <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    a9fc:	b580      	push	{r7, lr}
    a9fe:	b082      	sub	sp, #8
    aa00:	af00      	add	r7, sp, #0
    aa02:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    aa04:	2101      	movs	r1, #1
    aa06:	4838      	ldr	r0, [pc, #224]	; (aae8 <_ext_irq_init+0xec>)
    aa08:	4b38      	ldr	r3, [pc, #224]	; (aaec <_ext_irq_init+0xf0>)
    aa0a:	4798      	blx	r3
    aa0c:	4603      	mov	r3, r0
    aa0e:	f083 0301 	eor.w	r3, r3, #1
    aa12:	b2db      	uxtb	r3, r3
    aa14:	2b00      	cmp	r3, #0
    aa16:	d011      	beq.n	aa3c <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    aa18:	2102      	movs	r1, #2
    aa1a:	4833      	ldr	r0, [pc, #204]	; (aae8 <_ext_irq_init+0xec>)
    aa1c:	4b34      	ldr	r3, [pc, #208]	; (aaf0 <_ext_irq_init+0xf4>)
    aa1e:	4798      	blx	r3
    aa20:	4603      	mov	r3, r0
    aa22:	2b00      	cmp	r3, #0
    aa24:	d006      	beq.n	aa34 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    aa26:	4830      	ldr	r0, [pc, #192]	; (aae8 <_ext_irq_init+0xec>)
    aa28:	4b32      	ldr	r3, [pc, #200]	; (aaf4 <_ext_irq_init+0xf8>)
    aa2a:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    aa2c:	2102      	movs	r1, #2
    aa2e:	482e      	ldr	r0, [pc, #184]	; (aae8 <_ext_irq_init+0xec>)
    aa30:	4b31      	ldr	r3, [pc, #196]	; (aaf8 <_ext_irq_init+0xfc>)
    aa32:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    aa34:	2101      	movs	r1, #1
    aa36:	482c      	ldr	r0, [pc, #176]	; (aae8 <_ext_irq_init+0xec>)
    aa38:	4b30      	ldr	r3, [pc, #192]	; (aafc <_ext_irq_init+0x100>)
    aa3a:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    aa3c:	2101      	movs	r1, #1
    aa3e:	482a      	ldr	r0, [pc, #168]	; (aae8 <_ext_irq_init+0xec>)
    aa40:	4b2d      	ldr	r3, [pc, #180]	; (aaf8 <_ext_irq_init+0xfc>)
    aa42:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    aa44:	2100      	movs	r1, #0
    aa46:	4828      	ldr	r0, [pc, #160]	; (aae8 <_ext_irq_init+0xec>)
    aa48:	4b2d      	ldr	r3, [pc, #180]	; (ab00 <_ext_irq_init+0x104>)
    aa4a:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    aa4c:	2100      	movs	r1, #0
    aa4e:	4826      	ldr	r0, [pc, #152]	; (aae8 <_ext_irq_init+0xec>)
    aa50:	4b2c      	ldr	r3, [pc, #176]	; (ab04 <_ext_irq_init+0x108>)
    aa52:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    aa54:	2100      	movs	r1, #0
    aa56:	4824      	ldr	r0, [pc, #144]	; (aae8 <_ext_irq_init+0xec>)
    aa58:	4b2b      	ldr	r3, [pc, #172]	; (ab08 <_ext_irq_init+0x10c>)
    aa5a:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    aa5c:	2130      	movs	r1, #48	; 0x30
    aa5e:	4822      	ldr	r0, [pc, #136]	; (aae8 <_ext_irq_init+0xec>)
    aa60:	4b2a      	ldr	r3, [pc, #168]	; (ab0c <_ext_irq_init+0x110>)
    aa62:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    aa64:	2130      	movs	r1, #48	; 0x30
    aa66:	4820      	ldr	r0, [pc, #128]	; (aae8 <_ext_irq_init+0xec>)
    aa68:	4b29      	ldr	r3, [pc, #164]	; (ab10 <_ext_irq_init+0x114>)
    aa6a:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    aa6c:	2100      	movs	r1, #0
    aa6e:	481e      	ldr	r0, [pc, #120]	; (aae8 <_ext_irq_init+0xec>)
    aa70:	4b28      	ldr	r3, [pc, #160]	; (ab14 <_ext_irq_init+0x118>)
    aa72:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    aa74:	f44f 0219 	mov.w	r2, #10027008	; 0x990000
    aa78:	2100      	movs	r1, #0
    aa7a:	481b      	ldr	r0, [pc, #108]	; (aae8 <_ext_irq_init+0xec>)
    aa7c:	4b26      	ldr	r3, [pc, #152]	; (ab18 <_ext_irq_init+0x11c>)
    aa7e:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    aa80:	2200      	movs	r2, #0
    aa82:	2101      	movs	r1, #1
    aa84:	4818      	ldr	r0, [pc, #96]	; (aae8 <_ext_irq_init+0xec>)
    aa86:	4b24      	ldr	r3, [pc, #144]	; (ab18 <_ext_irq_init+0x11c>)
    aa88:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    aa8a:	4817      	ldr	r0, [pc, #92]	; (aae8 <_ext_irq_init+0xec>)
    aa8c:	4b23      	ldr	r3, [pc, #140]	; (ab1c <_ext_irq_init+0x120>)
    aa8e:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    aa90:	2010      	movs	r0, #16
    aa92:	4b23      	ldr	r3, [pc, #140]	; (ab20 <_ext_irq_init+0x124>)
    aa94:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    aa96:	2010      	movs	r0, #16
    aa98:	4b22      	ldr	r3, [pc, #136]	; (ab24 <_ext_irq_init+0x128>)
    aa9a:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    aa9c:	2010      	movs	r0, #16
    aa9e:	4b22      	ldr	r3, [pc, #136]	; (ab28 <_ext_irq_init+0x12c>)
    aaa0:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    aaa2:	2011      	movs	r0, #17
    aaa4:	4b1e      	ldr	r3, [pc, #120]	; (ab20 <_ext_irq_init+0x124>)
    aaa6:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    aaa8:	2011      	movs	r0, #17
    aaaa:	4b1e      	ldr	r3, [pc, #120]	; (ab24 <_ext_irq_init+0x128>)
    aaac:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    aaae:	2011      	movs	r0, #17
    aab0:	4b1d      	ldr	r3, [pc, #116]	; (ab28 <_ext_irq_init+0x12c>)
    aab2:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    aab4:	2012      	movs	r0, #18
    aab6:	4b1a      	ldr	r3, [pc, #104]	; (ab20 <_ext_irq_init+0x124>)
    aab8:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    aaba:	2012      	movs	r0, #18
    aabc:	4b19      	ldr	r3, [pc, #100]	; (ab24 <_ext_irq_init+0x128>)
    aabe:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    aac0:	2012      	movs	r0, #18
    aac2:	4b19      	ldr	r3, [pc, #100]	; (ab28 <_ext_irq_init+0x12c>)
    aac4:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    aac6:	2013      	movs	r0, #19
    aac8:	4b15      	ldr	r3, [pc, #84]	; (ab20 <_ext_irq_init+0x124>)
    aaca:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    aacc:	2013      	movs	r0, #19
    aace:	4b15      	ldr	r3, [pc, #84]	; (ab24 <_ext_irq_init+0x128>)
    aad0:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    aad2:	2013      	movs	r0, #19
    aad4:	4b14      	ldr	r3, [pc, #80]	; (ab28 <_ext_irq_init+0x12c>)
    aad6:	4798      	blx	r3

	callback = cb;
    aad8:	4a14      	ldr	r2, [pc, #80]	; (ab2c <_ext_irq_init+0x130>)
    aada:	687b      	ldr	r3, [r7, #4]
    aadc:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    aade:	2300      	movs	r3, #0
}
    aae0:	4618      	mov	r0, r3
    aae2:	3708      	adds	r7, #8
    aae4:	46bd      	mov	sp, r7
    aae6:	bd80      	pop	{r7, pc}
    aae8:	40002800 	.word	0x40002800
    aaec:	0000a7f5 	.word	0x0000a7f5
    aaf0:	0000a8ed 	.word	0x0000a8ed
    aaf4:	0000a87d 	.word	0x0000a87d
    aaf8:	0000a7d1 	.word	0x0000a7d1
    aafc:	0000a91d 	.word	0x0000a91d
    ab00:	0000a8a9 	.word	0x0000a8a9
    ab04:	0000a945 	.word	0x0000a945
    ab08:	0000a963 	.word	0x0000a963
    ab0c:	0000a97f 	.word	0x0000a97f
    ab10:	0000a9c3 	.word	0x0000a9c3
    ab14:	0000a9df 	.word	0x0000a9df
    ab18:	0000a99b 	.word	0x0000a99b
    ab1c:	0000a851 	.word	0x0000a851
    ab20:	0000a751 	.word	0x0000a751
    ab24:	0000a795 	.word	0x0000a795
    ab28:	0000a715 	.word	0x0000a715
    ab2c:	2000158c 	.word	0x2000158c

0000ab30 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    ab30:	b580      	push	{r7, lr}
    ab32:	b084      	sub	sp, #16
    ab34:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    ab36:	4841      	ldr	r0, [pc, #260]	; (ac3c <_ext_irq_handler+0x10c>)
    ab38:	4b41      	ldr	r3, [pc, #260]	; (ac40 <_ext_irq_handler+0x110>)
    ab3a:	4798      	blx	r3
    ab3c:	4603      	mov	r3, r0
    ab3e:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    ab40:	f04f 33ff 	mov.w	r3, #4294967295
    ab44:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    ab46:	683b      	ldr	r3, [r7, #0]
    ab48:	4619      	mov	r1, r3
    ab4a:	483c      	ldr	r0, [pc, #240]	; (ac3c <_ext_irq_handler+0x10c>)
    ab4c:	4b3d      	ldr	r3, [pc, #244]	; (ac44 <_ext_irq_handler+0x114>)
    ab4e:	4798      	blx	r3

	ASSERT(callback);
    ab50:	4b3d      	ldr	r3, [pc, #244]	; (ac48 <_ext_irq_handler+0x118>)
    ab52:	681b      	ldr	r3, [r3, #0]
    ab54:	2b00      	cmp	r3, #0
    ab56:	bf14      	ite	ne
    ab58:	2301      	movne	r3, #1
    ab5a:	2300      	moveq	r3, #0
    ab5c:	b2db      	uxtb	r3, r3
    ab5e:	22f4      	movs	r2, #244	; 0xf4
    ab60:	493a      	ldr	r1, [pc, #232]	; (ac4c <_ext_irq_handler+0x11c>)
    ab62:	4618      	mov	r0, r3
    ab64:	4b3a      	ldr	r3, [pc, #232]	; (ac50 <_ext_irq_handler+0x120>)
    ab66:	4798      	blx	r3

	while (flags) {
    ab68:	e060      	b.n	ac2c <_ext_irq_handler+0xfc>
		pos = ffs(flags) - 1;
    ab6a:	683b      	ldr	r3, [r7, #0]
    ab6c:	4618      	mov	r0, r3
    ab6e:	4b39      	ldr	r3, [pc, #228]	; (ac54 <_ext_irq_handler+0x124>)
    ab70:	4798      	blx	r3
    ab72:	4603      	mov	r3, r0
    ab74:	b2db      	uxtb	r3, r3
    ab76:	3b01      	subs	r3, #1
    ab78:	b2db      	uxtb	r3, r3
    ab7a:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    ab7c:	e047      	b.n	ac0e <_ext_irq_handler+0xde>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    ab7e:	2300      	movs	r3, #0
    ab80:	71fb      	strb	r3, [r7, #7]
    ab82:	2304      	movs	r3, #4
    ab84:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    ab86:	e024      	b.n	abd2 <_ext_irq_handler+0xa2>
				middle = (upper + lower) >> 1;
    ab88:	79ba      	ldrb	r2, [r7, #6]
    ab8a:	79fb      	ldrb	r3, [r7, #7]
    ab8c:	4413      	add	r3, r2
    ab8e:	105b      	asrs	r3, r3, #1
    ab90:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    ab92:	797b      	ldrb	r3, [r7, #5]
    ab94:	4a30      	ldr	r2, [pc, #192]	; (ac58 <_ext_irq_handler+0x128>)
    ab96:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    ab9a:	461a      	mov	r2, r3
    ab9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    aba0:	429a      	cmp	r2, r3
    aba2:	d106      	bne.n	abb2 <_ext_irq_handler+0x82>
					pin = _map[middle].pin;
    aba4:	797b      	ldrb	r3, [r7, #5]
    aba6:	4a2c      	ldr	r2, [pc, #176]	; (ac58 <_ext_irq_handler+0x128>)
    aba8:	00db      	lsls	r3, r3, #3
    abaa:	4413      	add	r3, r2
    abac:	685b      	ldr	r3, [r3, #4]
    abae:	60bb      	str	r3, [r7, #8]
					break;
    abb0:	e013      	b.n	abda <_ext_irq_handler+0xaa>
				}
				if (_map[middle].extint < pos) {
    abb2:	797b      	ldrb	r3, [r7, #5]
    abb4:	4a28      	ldr	r2, [pc, #160]	; (ac58 <_ext_irq_handler+0x128>)
    abb6:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    abba:	461a      	mov	r2, r3
    abbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
    abc0:	429a      	cmp	r2, r3
    abc2:	da03      	bge.n	abcc <_ext_irq_handler+0x9c>
					lower = middle + 1;
    abc4:	797b      	ldrb	r3, [r7, #5]
    abc6:	3301      	adds	r3, #1
    abc8:	71fb      	strb	r3, [r7, #7]
    abca:	e002      	b.n	abd2 <_ext_irq_handler+0xa2>
				} else {
					upper = middle - 1;
    abcc:	797b      	ldrb	r3, [r7, #5]
    abce:	3b01      	subs	r3, #1
    abd0:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    abd2:	79ba      	ldrb	r2, [r7, #6]
    abd4:	79fb      	ldrb	r3, [r7, #7]
    abd6:	429a      	cmp	r2, r3
    abd8:	d2d6      	bcs.n	ab88 <_ext_irq_handler+0x58>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    abda:	68bb      	ldr	r3, [r7, #8]
    abdc:	f1b3 3fff 	cmp.w	r3, #4294967295
    abe0:	d003      	beq.n	abea <_ext_irq_handler+0xba>
				callback(pin);
    abe2:	4b19      	ldr	r3, [pc, #100]	; (ac48 <_ext_irq_handler+0x118>)
    abe4:	681b      	ldr	r3, [r3, #0]
    abe6:	68b8      	ldr	r0, [r7, #8]
    abe8:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    abea:	f997 300f 	ldrsb.w	r3, [r7, #15]
    abee:	2201      	movs	r2, #1
    abf0:	fa02 f303 	lsl.w	r3, r2, r3
    abf4:	43da      	mvns	r2, r3
    abf6:	683b      	ldr	r3, [r7, #0]
    abf8:	4013      	ands	r3, r2
    abfa:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    abfc:	683b      	ldr	r3, [r7, #0]
    abfe:	4618      	mov	r0, r3
    ac00:	4b14      	ldr	r3, [pc, #80]	; (ac54 <_ext_irq_handler+0x124>)
    ac02:	4798      	blx	r3
    ac04:	4603      	mov	r3, r0
    ac06:	b2db      	uxtb	r3, r3
    ac08:	3b01      	subs	r3, #1
    ac0a:	b2db      	uxtb	r3, r3
    ac0c:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    ac0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    ac12:	f1b3 3fff 	cmp.w	r3, #4294967295
    ac16:	d1b2      	bne.n	ab7e <_ext_irq_handler+0x4e>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    ac18:	4808      	ldr	r0, [pc, #32]	; (ac3c <_ext_irq_handler+0x10c>)
    ac1a:	4b09      	ldr	r3, [pc, #36]	; (ac40 <_ext_irq_handler+0x110>)
    ac1c:	4798      	blx	r3
    ac1e:	4603      	mov	r3, r0
    ac20:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    ac22:	683b      	ldr	r3, [r7, #0]
    ac24:	4619      	mov	r1, r3
    ac26:	4805      	ldr	r0, [pc, #20]	; (ac3c <_ext_irq_handler+0x10c>)
    ac28:	4b06      	ldr	r3, [pc, #24]	; (ac44 <_ext_irq_handler+0x114>)
    ac2a:	4798      	blx	r3
	while (flags) {
    ac2c:	683b      	ldr	r3, [r7, #0]
    ac2e:	2b00      	cmp	r3, #0
    ac30:	d19b      	bne.n	ab6a <_ext_irq_handler+0x3a>
	}
}
    ac32:	bf00      	nop
    ac34:	3710      	adds	r7, #16
    ac36:	46bd      	mov	sp, r7
    ac38:	bd80      	pop	{r7, pc}
    ac3a:	bf00      	nop
    ac3c:	40002800 	.word	0x40002800
    ac40:	0000a81d 	.word	0x0000a81d
    ac44:	0000a835 	.word	0x0000a835
    ac48:	2000158c 	.word	0x2000158c
    ac4c:	00013eb0 	.word	0x00013eb0
    ac50:	000094ed 	.word	0x000094ed
    ac54:	00012d49 	.word	0x00012d49
    ac58:	00013e90 	.word	0x00013e90

0000ac5c <EIC_4_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_4_Handler(void)
{
    ac5c:	b580      	push	{r7, lr}
    ac5e:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    ac60:	4b01      	ldr	r3, [pc, #4]	; (ac68 <EIC_4_Handler+0xc>)
    ac62:	4798      	blx	r3
} /**
    ac64:	bf00      	nop
    ac66:	bd80      	pop	{r7, pc}
    ac68:	0000ab31 	.word	0x0000ab31

0000ac6c <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    ac6c:	b580      	push	{r7, lr}
    ac6e:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    ac70:	4b01      	ldr	r3, [pc, #4]	; (ac78 <EIC_5_Handler+0xc>)
    ac72:	4798      	blx	r3
} /**
    ac74:	bf00      	nop
    ac76:	bd80      	pop	{r7, pc}
    ac78:	0000ab31 	.word	0x0000ab31

0000ac7c <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    ac7c:	b580      	push	{r7, lr}
    ac7e:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    ac80:	4b01      	ldr	r3, [pc, #4]	; (ac88 <EIC_6_Handler+0xc>)
    ac82:	4798      	blx	r3
} /**
    ac84:	bf00      	nop
    ac86:	bd80      	pop	{r7, pc}
    ac88:	0000ab31 	.word	0x0000ab31

0000ac8c <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    ac8c:	b580      	push	{r7, lr}
    ac8e:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    ac90:	4b01      	ldr	r3, [pc, #4]	; (ac98 <EIC_7_Handler+0xc>)
    ac92:	4798      	blx	r3
}
    ac94:	bf00      	nop
    ac96:	bd80      	pop	{r7, pc}
    ac98:	0000ab31 	.word	0x0000ab31

0000ac9c <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    ac9c:	b480      	push	{r7}
    ac9e:	b085      	sub	sp, #20
    aca0:	af00      	add	r7, sp, #0
    aca2:	60f8      	str	r0, [r7, #12]
    aca4:	460b      	mov	r3, r1
    aca6:	607a      	str	r2, [r7, #4]
    aca8:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    acaa:	7afa      	ldrb	r2, [r7, #11]
    acac:	68fb      	ldr	r3, [r7, #12]
    acae:	3248      	adds	r2, #72	; 0x48
    acb0:	6879      	ldr	r1, [r7, #4]
    acb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    acb6:	bf00      	nop
    acb8:	3714      	adds	r7, #20
    acba:	46bd      	mov	sp, r7
    acbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    acc0:	4770      	bx	lr

0000acc2 <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    acc2:	b480      	push	{r7}
    acc4:	b083      	sub	sp, #12
    acc6:	af00      	add	r7, sp, #0
    acc8:	6078      	str	r0, [r7, #4]
    acca:	460b      	mov	r3, r1
    accc:	70fb      	strb	r3, [r7, #3]
    acce:	4613      	mov	r3, r2
    acd0:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    acd2:	78fb      	ldrb	r3, [r7, #3]
    acd4:	687a      	ldr	r2, [r7, #4]
    acd6:	3304      	adds	r3, #4
    acd8:	00db      	lsls	r3, r3, #3
    acda:	4413      	add	r3, r2
    acdc:	78ba      	ldrb	r2, [r7, #2]
    acde:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    ace0:	78fb      	ldrb	r3, [r7, #3]
    ace2:	78ba      	ldrb	r2, [r7, #2]
    ace4:	43d2      	mvns	r2, r2
    ace6:	b2d1      	uxtb	r1, r2
    ace8:	687a      	ldr	r2, [r7, #4]
    acea:	3304      	adds	r3, #4
    acec:	00db      	lsls	r3, r3, #3
    acee:	4413      	add	r3, r2
    acf0:	460a      	mov	r2, r1
    acf2:	711a      	strb	r2, [r3, #4]
}
    acf4:	bf00      	nop
    acf6:	370c      	adds	r7, #12
    acf8:	46bd      	mov	sp, r7
    acfa:	f85d 7b04 	ldr.w	r7, [sp], #4
    acfe:	4770      	bx	lr

0000ad00 <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    ad00:	b480      	push	{r7}
    ad02:	b085      	sub	sp, #20
    ad04:	af00      	add	r7, sp, #0
    ad06:	60f8      	str	r0, [r7, #12]
    ad08:	460b      	mov	r3, r1
    ad0a:	607a      	str	r2, [r7, #4]
    ad0c:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    ad0e:	7afa      	ldrb	r2, [r7, #11]
    ad10:	68fb      	ldr	r3, [r7, #12]
    ad12:	3204      	adds	r2, #4
    ad14:	6879      	ldr	r1, [r7, #4]
    ad16:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    ad1a:	bf00      	nop
    ad1c:	3714      	adds	r7, #20
    ad1e:	46bd      	mov	sp, r7
    ad20:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad24:	4770      	bx	lr
	...

0000ad28 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    ad28:	b580      	push	{r7, lr}
    ad2a:	b082      	sub	sp, #8
    ad2c:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    ad2e:	2300      	movs	r3, #0
    ad30:	71fb      	strb	r3, [r7, #7]
    ad32:	e00b      	b.n	ad4c <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    ad34:	79fb      	ldrb	r3, [r7, #7]
    ad36:	4a18      	ldr	r2, [pc, #96]	; (ad98 <_event_system_init+0x70>)
    ad38:	5cd3      	ldrb	r3, [r2, r3]
    ad3a:	461a      	mov	r2, r3
    ad3c:	79fb      	ldrb	r3, [r7, #7]
    ad3e:	4619      	mov	r1, r3
    ad40:	4816      	ldr	r0, [pc, #88]	; (ad9c <_event_system_init+0x74>)
    ad42:	4b17      	ldr	r3, [pc, #92]	; (ada0 <_event_system_init+0x78>)
    ad44:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    ad46:	79fb      	ldrb	r3, [r7, #7]
    ad48:	3301      	adds	r3, #1
    ad4a:	71fb      	strb	r3, [r7, #7]
    ad4c:	79fb      	ldrb	r3, [r7, #7]
    ad4e:	2b42      	cmp	r3, #66	; 0x42
    ad50:	d9f0      	bls.n	ad34 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    ad52:	2300      	movs	r3, #0
    ad54:	71fb      	strb	r3, [r7, #7]
    ad56:	e016      	b.n	ad86 <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    ad58:	79fb      	ldrb	r3, [r7, #7]
    ad5a:	4a12      	ldr	r2, [pc, #72]	; (ada4 <_event_system_init+0x7c>)
    ad5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    ad60:	461a      	mov	r2, r3
    ad62:	79fb      	ldrb	r3, [r7, #7]
    ad64:	4619      	mov	r1, r3
    ad66:	480d      	ldr	r0, [pc, #52]	; (ad9c <_event_system_init+0x74>)
    ad68:	4b0f      	ldr	r3, [pc, #60]	; (ada8 <_event_system_init+0x80>)
    ad6a:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    ad6c:	79fb      	ldrb	r3, [r7, #7]
    ad6e:	4a0f      	ldr	r2, [pc, #60]	; (adac <_event_system_init+0x84>)
    ad70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad74:	b2da      	uxtb	r2, r3
    ad76:	79fb      	ldrb	r3, [r7, #7]
    ad78:	4619      	mov	r1, r3
    ad7a:	4808      	ldr	r0, [pc, #32]	; (ad9c <_event_system_init+0x74>)
    ad7c:	4b0c      	ldr	r3, [pc, #48]	; (adb0 <_event_system_init+0x88>)
    ad7e:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    ad80:	79fb      	ldrb	r3, [r7, #7]
    ad82:	3301      	adds	r3, #1
    ad84:	71fb      	strb	r3, [r7, #7]
    ad86:	79fb      	ldrb	r3, [r7, #7]
    ad88:	2b1f      	cmp	r3, #31
    ad8a:	d9e5      	bls.n	ad58 <_event_system_init+0x30>
	}

	return ERR_NONE;
    ad8c:	2300      	movs	r3, #0
}
    ad8e:	4618      	mov	r0, r3
    ad90:	3708      	adds	r7, #8
    ad92:	46bd      	mov	sp, r7
    ad94:	bd80      	pop	{r7, pc}
    ad96:	bf00      	nop
    ad98:	00013ec8 	.word	0x00013ec8
    ad9c:	4100e000 	.word	0x4100e000
    ada0:	0000ac9d 	.word	0x0000ac9d
    ada4:	00013f0c 	.word	0x00013f0c
    ada8:	0000ad01 	.word	0x0000ad01
    adac:	00013f4c 	.word	0x00013f4c
    adb0:	0000acc3 	.word	0x0000acc3

0000adb4 <hri_gclk_wait_for_sync>:
{
    adb4:	b480      	push	{r7}
    adb6:	b083      	sub	sp, #12
    adb8:	af00      	add	r7, sp, #0
    adba:	6078      	str	r0, [r7, #4]
    adbc:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    adbe:	bf00      	nop
    adc0:	687b      	ldr	r3, [r7, #4]
    adc2:	685a      	ldr	r2, [r3, #4]
    adc4:	683b      	ldr	r3, [r7, #0]
    adc6:	4013      	ands	r3, r2
    adc8:	2b00      	cmp	r3, #0
    adca:	d1f9      	bne.n	adc0 <hri_gclk_wait_for_sync+0xc>
}
    adcc:	bf00      	nop
    adce:	370c      	adds	r7, #12
    add0:	46bd      	mov	sp, r7
    add2:	f85d 7b04 	ldr.w	r7, [sp], #4
    add6:	4770      	bx	lr

0000add8 <hri_gclk_write_GENCTRL_reg>:
{
    add8:	b580      	push	{r7, lr}
    adda:	b084      	sub	sp, #16
    addc:	af00      	add	r7, sp, #0
    adde:	60f8      	str	r0, [r7, #12]
    ade0:	460b      	mov	r3, r1
    ade2:	607a      	str	r2, [r7, #4]
    ade4:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    ade6:	7afa      	ldrb	r2, [r7, #11]
    ade8:	68fb      	ldr	r3, [r7, #12]
    adea:	3208      	adds	r2, #8
    adec:	6879      	ldr	r1, [r7, #4]
    adee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    adf2:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    adf6:	68f8      	ldr	r0, [r7, #12]
    adf8:	4b02      	ldr	r3, [pc, #8]	; (ae04 <hri_gclk_write_GENCTRL_reg+0x2c>)
    adfa:	4798      	blx	r3
}
    adfc:	bf00      	nop
    adfe:	3710      	adds	r7, #16
    ae00:	46bd      	mov	sp, r7
    ae02:	bd80      	pop	{r7, pc}
    ae04:	0000adb5 	.word	0x0000adb5

0000ae08 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    ae08:	b580      	push	{r7, lr}
    ae0a:	b082      	sub	sp, #8
    ae0c:	af00      	add	r7, sp, #0
    ae0e:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    ae10:	687b      	ldr	r3, [r7, #4]
    ae12:	f003 0301 	and.w	r3, r3, #1
    ae16:	2b00      	cmp	r3, #0
    ae18:	d004      	beq.n	ae24 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    ae1a:	4a27      	ldr	r2, [pc, #156]	; (aeb8 <_gclk_init_generators_by_fref+0xb0>)
    ae1c:	2100      	movs	r1, #0
    ae1e:	4827      	ldr	r0, [pc, #156]	; (aebc <_gclk_init_generators_by_fref+0xb4>)
    ae20:	4b27      	ldr	r3, [pc, #156]	; (aec0 <_gclk_init_generators_by_fref+0xb8>)
    ae22:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    ae24:	687b      	ldr	r3, [r7, #4]
    ae26:	f003 0302 	and.w	r3, r3, #2
    ae2a:	2b00      	cmp	r3, #0
    ae2c:	d004      	beq.n	ae38 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    ae2e:	4a25      	ldr	r2, [pc, #148]	; (aec4 <_gclk_init_generators_by_fref+0xbc>)
    ae30:	2101      	movs	r1, #1
    ae32:	4822      	ldr	r0, [pc, #136]	; (aebc <_gclk_init_generators_by_fref+0xb4>)
    ae34:	4b22      	ldr	r3, [pc, #136]	; (aec0 <_gclk_init_generators_by_fref+0xb8>)
    ae36:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    ae38:	687b      	ldr	r3, [r7, #4]
    ae3a:	f003 0304 	and.w	r3, r3, #4
    ae3e:	2b00      	cmp	r3, #0
    ae40:	d004      	beq.n	ae4c <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    ae42:	4a21      	ldr	r2, [pc, #132]	; (aec8 <_gclk_init_generators_by_fref+0xc0>)
    ae44:	2102      	movs	r1, #2
    ae46:	481d      	ldr	r0, [pc, #116]	; (aebc <_gclk_init_generators_by_fref+0xb4>)
    ae48:	4b1d      	ldr	r3, [pc, #116]	; (aec0 <_gclk_init_generators_by_fref+0xb8>)
    ae4a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    ae4c:	687b      	ldr	r3, [r7, #4]
    ae4e:	f003 0308 	and.w	r3, r3, #8
    ae52:	2b00      	cmp	r3, #0
    ae54:	d004      	beq.n	ae60 <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    ae56:	4a1d      	ldr	r2, [pc, #116]	; (aecc <_gclk_init_generators_by_fref+0xc4>)
    ae58:	2103      	movs	r1, #3
    ae5a:	4818      	ldr	r0, [pc, #96]	; (aebc <_gclk_init_generators_by_fref+0xb4>)
    ae5c:	4b18      	ldr	r3, [pc, #96]	; (aec0 <_gclk_init_generators_by_fref+0xb8>)
    ae5e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    ae60:	687b      	ldr	r3, [r7, #4]
    ae62:	f003 0310 	and.w	r3, r3, #16
    ae66:	2b00      	cmp	r3, #0
    ae68:	d004      	beq.n	ae74 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    ae6a:	4a19      	ldr	r2, [pc, #100]	; (aed0 <_gclk_init_generators_by_fref+0xc8>)
    ae6c:	2104      	movs	r1, #4
    ae6e:	4813      	ldr	r0, [pc, #76]	; (aebc <_gclk_init_generators_by_fref+0xb4>)
    ae70:	4b13      	ldr	r3, [pc, #76]	; (aec0 <_gclk_init_generators_by_fref+0xb8>)
    ae72:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    ae74:	687b      	ldr	r3, [r7, #4]
    ae76:	f003 0320 	and.w	r3, r3, #32
    ae7a:	2b00      	cmp	r3, #0
    ae7c:	d004      	beq.n	ae88 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    ae7e:	4a15      	ldr	r2, [pc, #84]	; (aed4 <_gclk_init_generators_by_fref+0xcc>)
    ae80:	2105      	movs	r1, #5
    ae82:	480e      	ldr	r0, [pc, #56]	; (aebc <_gclk_init_generators_by_fref+0xb4>)
    ae84:	4b0e      	ldr	r3, [pc, #56]	; (aec0 <_gclk_init_generators_by_fref+0xb8>)
    ae86:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    ae88:	687b      	ldr	r3, [r7, #4]
    ae8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    ae8e:	2b00      	cmp	r3, #0
    ae90:	d004      	beq.n	ae9c <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    ae92:	4a11      	ldr	r2, [pc, #68]	; (aed8 <_gclk_init_generators_by_fref+0xd0>)
    ae94:	210a      	movs	r1, #10
    ae96:	4809      	ldr	r0, [pc, #36]	; (aebc <_gclk_init_generators_by_fref+0xb4>)
    ae98:	4b09      	ldr	r3, [pc, #36]	; (aec0 <_gclk_init_generators_by_fref+0xb8>)
    ae9a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    ae9c:	687b      	ldr	r3, [r7, #4]
    ae9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    aea2:	2b00      	cmp	r3, #0
    aea4:	d004      	beq.n	aeb0 <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    aea6:	4a0d      	ldr	r2, [pc, #52]	; (aedc <_gclk_init_generators_by_fref+0xd4>)
    aea8:	210b      	movs	r1, #11
    aeaa:	4804      	ldr	r0, [pc, #16]	; (aebc <_gclk_init_generators_by_fref+0xb4>)
    aeac:	4b04      	ldr	r3, [pc, #16]	; (aec0 <_gclk_init_generators_by_fref+0xb8>)
    aeae:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    aeb0:	bf00      	nop
    aeb2:	3708      	adds	r7, #8
    aeb4:	46bd      	mov	sp, r7
    aeb6:	bd80      	pop	{r7, pc}
    aeb8:	00010107 	.word	0x00010107
    aebc:	40001c00 	.word	0x40001c00
    aec0:	0000add9 	.word	0x0000add9
    aec4:	00010907 	.word	0x00010907
    aec8:	00010906 	.word	0x00010906
    aecc:	00020908 	.word	0x00020908
    aed0:	00010901 	.word	0x00010901
    aed4:	00062901 	.word	0x00062901
    aed8:	00010905 	.word	0x00010905
    aedc:	00041905 	.word	0x00041905

0000aee0 <hri_mclk_write_CPUDIV_reg>:
{
    aee0:	b480      	push	{r7}
    aee2:	b083      	sub	sp, #12
    aee4:	af00      	add	r7, sp, #0
    aee6:	6078      	str	r0, [r7, #4]
    aee8:	460b      	mov	r3, r1
    aeea:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    aeec:	687b      	ldr	r3, [r7, #4]
    aeee:	78fa      	ldrb	r2, [r7, #3]
    aef0:	715a      	strb	r2, [r3, #5]
}
    aef2:	bf00      	nop
    aef4:	370c      	adds	r7, #12
    aef6:	46bd      	mov	sp, r7
    aef8:	f85d 7b04 	ldr.w	r7, [sp], #4
    aefc:	4770      	bx	lr
	...

0000af00 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    af00:	b580      	push	{r7, lr}
    af02:	b082      	sub	sp, #8
    af04:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    af06:	4b05      	ldr	r3, [pc, #20]	; (af1c <_mclk_init+0x1c>)
    af08:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    af0a:	2101      	movs	r1, #1
    af0c:	6878      	ldr	r0, [r7, #4]
    af0e:	4b04      	ldr	r3, [pc, #16]	; (af20 <_mclk_init+0x20>)
    af10:	4798      	blx	r3
}
    af12:	bf00      	nop
    af14:	3708      	adds	r7, #8
    af16:	46bd      	mov	sp, r7
    af18:	bd80      	pop	{r7, pc}
    af1a:	bf00      	nop
    af1c:	40000800 	.word	0x40000800
    af20:	0000aee1 	.word	0x0000aee1

0000af24 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    af24:	b480      	push	{r7}
    af26:	b083      	sub	sp, #12
    af28:	af00      	add	r7, sp, #0
    af2a:	6078      	str	r0, [r7, #4]
    af2c:	460b      	mov	r3, r1
    af2e:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    af30:	687b      	ldr	r3, [r7, #4]
    af32:	78fa      	ldrb	r2, [r7, #3]
    af34:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    af36:	bf00      	nop
    af38:	370c      	adds	r7, #12
    af3a:	46bd      	mov	sp, r7
    af3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    af40:	4770      	bx	lr

0000af42 <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    af42:	b480      	push	{r7}
    af44:	b083      	sub	sp, #12
    af46:	af00      	add	r7, sp, #0
    af48:	6078      	str	r0, [r7, #4]
    af4a:	460b      	mov	r3, r1
    af4c:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    af4e:	687b      	ldr	r3, [r7, #4]
    af50:	887a      	ldrh	r2, [r7, #2]
    af52:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    af54:	bf00      	nop
    af56:	370c      	adds	r7, #12
    af58:	46bd      	mov	sp, r7
    af5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    af5e:	4770      	bx	lr

0000af60 <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    af60:	b480      	push	{r7}
    af62:	b083      	sub	sp, #12
    af64:	af00      	add	r7, sp, #0
    af66:	6078      	str	r0, [r7, #4]
    af68:	460b      	mov	r3, r1
    af6a:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    af6c:	687b      	ldr	r3, [r7, #4]
    af6e:	78fa      	ldrb	r2, [r7, #3]
    af70:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    af72:	bf00      	nop
    af74:	370c      	adds	r7, #12
    af76:	46bd      	mov	sp, r7
    af78:	f85d 7b04 	ldr.w	r7, [sp], #4
    af7c:	4770      	bx	lr

0000af7e <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    af7e:	b480      	push	{r7}
    af80:	b083      	sub	sp, #12
    af82:	af00      	add	r7, sp, #0
    af84:	6078      	str	r0, [r7, #4]
    af86:	460b      	mov	r3, r1
    af88:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    af8a:	687b      	ldr	r3, [r7, #4]
    af8c:	78fa      	ldrb	r2, [r7, #3]
    af8e:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    af90:	bf00      	nop
    af92:	370c      	adds	r7, #12
    af94:	46bd      	mov	sp, r7
    af96:	f85d 7b04 	ldr.w	r7, [sp], #4
    af9a:	4770      	bx	lr

0000af9c <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    af9c:	b480      	push	{r7}
    af9e:	b085      	sub	sp, #20
    afa0:	af00      	add	r7, sp, #0
    afa2:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    afa4:	687b      	ldr	r3, [r7, #4]
    afa6:	69db      	ldr	r3, [r3, #28]
    afa8:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    afaa:	68fb      	ldr	r3, [r7, #12]
    afac:	0a1b      	lsrs	r3, r3, #8
    afae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    afb2:	60fb      	str	r3, [r7, #12]
	return tmp;
    afb4:	68fb      	ldr	r3, [r7, #12]
}
    afb6:	4618      	mov	r0, r3
    afb8:	3714      	adds	r7, #20
    afba:	46bd      	mov	sp, r7
    afbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    afc0:	4770      	bx	lr

0000afc2 <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    afc2:	b480      	push	{r7}
    afc4:	b083      	sub	sp, #12
    afc6:	af00      	add	r7, sp, #0
    afc8:	6078      	str	r0, [r7, #4]
    afca:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    afcc:	687b      	ldr	r3, [r7, #4]
    afce:	683a      	ldr	r2, [r7, #0]
    afd0:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    afd2:	bf00      	nop
    afd4:	370c      	adds	r7, #12
    afd6:	46bd      	mov	sp, r7
    afd8:	f85d 7b04 	ldr.w	r7, [sp], #4
    afdc:	4770      	bx	lr
	...

0000afe0 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    afe0:	b580      	push	{r7, lr}
    afe2:	b082      	sub	sp, #8
    afe4:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    afe6:	4b13      	ldr	r3, [pc, #76]	; (b034 <_osc32kctrl_init_sources+0x54>)
    afe8:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    afea:	2300      	movs	r3, #0
    afec:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    afee:	f242 018e 	movw	r1, #8334	; 0x208e
    aff2:	6878      	ldr	r0, [r7, #4]
    aff4:	4b10      	ldr	r3, [pc, #64]	; (b038 <_osc32kctrl_init_sources+0x58>)
    aff6:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    aff8:	2100      	movs	r1, #0
    affa:	6878      	ldr	r0, [r7, #4]
    affc:	4b0f      	ldr	r3, [pc, #60]	; (b03c <_osc32kctrl_init_sources+0x5c>)
    affe:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    b000:	2100      	movs	r1, #0
    b002:	6878      	ldr	r0, [r7, #4]
    b004:	4b0e      	ldr	r3, [pc, #56]	; (b040 <_osc32kctrl_init_sources+0x60>)
    b006:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    b008:	6878      	ldr	r0, [r7, #4]
    b00a:	4b0e      	ldr	r3, [pc, #56]	; (b044 <_osc32kctrl_init_sources+0x64>)
    b00c:	4798      	blx	r3
    b00e:	4603      	mov	r3, r0
    b010:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    b012:	887b      	ldrh	r3, [r7, #2]
    b014:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    b016:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    b01a:	4619      	mov	r1, r3
    b01c:	6878      	ldr	r0, [r7, #4]
    b01e:	4b0a      	ldr	r3, [pc, #40]	; (b048 <_osc32kctrl_init_sources+0x68>)
    b020:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    b022:	2100      	movs	r1, #0
    b024:	6878      	ldr	r0, [r7, #4]
    b026:	4b09      	ldr	r3, [pc, #36]	; (b04c <_osc32kctrl_init_sources+0x6c>)
    b028:	4798      	blx	r3
	(void)calib;
}
    b02a:	bf00      	nop
    b02c:	3708      	adds	r7, #8
    b02e:	46bd      	mov	sp, r7
    b030:	bd80      	pop	{r7, pc}
    b032:	bf00      	nop
    b034:	40001400 	.word	0x40001400
    b038:	0000af43 	.word	0x0000af43
    b03c:	0000af61 	.word	0x0000af61
    b040:	0000af7f 	.word	0x0000af7f
    b044:	0000af9d 	.word	0x0000af9d
    b048:	0000afc3 	.word	0x0000afc3
    b04c:	0000af25 	.word	0x0000af25

0000b050 <hri_gclk_wait_for_sync>:
{
    b050:	b480      	push	{r7}
    b052:	b083      	sub	sp, #12
    b054:	af00      	add	r7, sp, #0
    b056:	6078      	str	r0, [r7, #4]
    b058:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    b05a:	bf00      	nop
    b05c:	687b      	ldr	r3, [r7, #4]
    b05e:	685a      	ldr	r2, [r3, #4]
    b060:	683b      	ldr	r3, [r7, #0]
    b062:	4013      	ands	r3, r2
    b064:	2b00      	cmp	r3, #0
    b066:	d1f9      	bne.n	b05c <hri_gclk_wait_for_sync+0xc>
}
    b068:	bf00      	nop
    b06a:	370c      	adds	r7, #12
    b06c:	46bd      	mov	sp, r7
    b06e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b072:	4770      	bx	lr

0000b074 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    b074:	b480      	push	{r7}
    b076:	b083      	sub	sp, #12
    b078:	af00      	add	r7, sp, #0
    b07a:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    b07c:	687b      	ldr	r3, [r7, #4]
    b07e:	685b      	ldr	r3, [r3, #4]
    b080:	089b      	lsrs	r3, r3, #2
    b082:	f003 0301 	and.w	r3, r3, #1
    b086:	2b00      	cmp	r3, #0
    b088:	bf14      	ite	ne
    b08a:	2301      	movne	r3, #1
    b08c:	2300      	moveq	r3, #0
    b08e:	b2db      	uxtb	r3, r3
}
    b090:	4618      	mov	r0, r3
    b092:	370c      	adds	r7, #12
    b094:	46bd      	mov	sp, r7
    b096:	f85d 7b04 	ldr.w	r7, [sp], #4
    b09a:	4770      	bx	lr

0000b09c <hri_gclk_read_SYNCBUSY_reg>:
{
    b09c:	b480      	push	{r7}
    b09e:	b083      	sub	sp, #12
    b0a0:	af00      	add	r7, sp, #0
    b0a2:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    b0a4:	687b      	ldr	r3, [r7, #4]
    b0a6:	685b      	ldr	r3, [r3, #4]
}
    b0a8:	4618      	mov	r0, r3
    b0aa:	370c      	adds	r7, #12
    b0ac:	46bd      	mov	sp, r7
    b0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    b0b2:	4770      	bx	lr

0000b0b4 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    b0b4:	b580      	push	{r7, lr}
    b0b6:	b086      	sub	sp, #24
    b0b8:	af00      	add	r7, sp, #0
    b0ba:	60f8      	str	r0, [r7, #12]
    b0bc:	460b      	mov	r3, r1
    b0be:	607a      	str	r2, [r7, #4]
    b0c0:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    b0c2:	7afa      	ldrb	r2, [r7, #11]
    b0c4:	68fb      	ldr	r3, [r7, #12]
    b0c6:	3208      	adds	r2, #8
    b0c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    b0cc:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    b0ce:	697b      	ldr	r3, [r7, #20]
    b0d0:	f023 030f 	bic.w	r3, r3, #15
    b0d4:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    b0d6:	687b      	ldr	r3, [r7, #4]
    b0d8:	f003 030f 	and.w	r3, r3, #15
    b0dc:	697a      	ldr	r2, [r7, #20]
    b0de:	4313      	orrs	r3, r2
    b0e0:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    b0e2:	7afa      	ldrb	r2, [r7, #11]
    b0e4:	68fb      	ldr	r3, [r7, #12]
    b0e6:	3208      	adds	r2, #8
    b0e8:	6979      	ldr	r1, [r7, #20]
    b0ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    b0ee:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    b0f2:	68f8      	ldr	r0, [r7, #12]
    b0f4:	4b02      	ldr	r3, [pc, #8]	; (b100 <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    b0f6:	4798      	blx	r3
}
    b0f8:	bf00      	nop
    b0fa:	3718      	adds	r7, #24
    b0fc:	46bd      	mov	sp, r7
    b0fe:	bd80      	pop	{r7, pc}
    b100:	0000b051 	.word	0x0000b051

0000b104 <hri_gclk_write_PCHCTRL_reg>:
{
    b104:	b480      	push	{r7}
    b106:	b085      	sub	sp, #20
    b108:	af00      	add	r7, sp, #0
    b10a:	60f8      	str	r0, [r7, #12]
    b10c:	460b      	mov	r3, r1
    b10e:	607a      	str	r2, [r7, #4]
    b110:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    b112:	7afa      	ldrb	r2, [r7, #11]
    b114:	68fb      	ldr	r3, [r7, #12]
    b116:	3220      	adds	r2, #32
    b118:	6879      	ldr	r1, [r7, #4]
    b11a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    b11e:	bf00      	nop
    b120:	3714      	adds	r7, #20
    b122:	46bd      	mov	sp, r7
    b124:	f85d 7b04 	ldr.w	r7, [sp], #4
    b128:	4770      	bx	lr

0000b12a <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    b12a:	b480      	push	{r7}
    b12c:	b085      	sub	sp, #20
    b12e:	af00      	add	r7, sp, #0
    b130:	60f8      	str	r0, [r7, #12]
    b132:	460b      	mov	r3, r1
    b134:	607a      	str	r2, [r7, #4]
    b136:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    b138:	bf00      	nop
    b13a:	7afa      	ldrb	r2, [r7, #11]
    b13c:	68f9      	ldr	r1, [r7, #12]
    b13e:	4613      	mov	r3, r2
    b140:	009b      	lsls	r3, r3, #2
    b142:	4413      	add	r3, r2
    b144:	009b      	lsls	r3, r3, #2
    b146:	440b      	add	r3, r1
    b148:	333c      	adds	r3, #60	; 0x3c
    b14a:	681a      	ldr	r2, [r3, #0]
    b14c:	687b      	ldr	r3, [r7, #4]
    b14e:	4013      	ands	r3, r2
    b150:	2b00      	cmp	r3, #0
    b152:	d1f2      	bne.n	b13a <hri_oscctrl_wait_for_sync+0x10>
	};
}
    b154:	bf00      	nop
    b156:	3714      	adds	r7, #20
    b158:	46bd      	mov	sp, r7
    b15a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b15e:	4770      	bx	lr

0000b160 <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    b160:	b480      	push	{r7}
    b162:	b083      	sub	sp, #12
    b164:	af00      	add	r7, sp, #0
    b166:	6078      	str	r0, [r7, #4]
    b168:	460b      	mov	r3, r1
    b16a:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    b16c:	78fa      	ldrb	r2, [r7, #3]
    b16e:	6879      	ldr	r1, [r7, #4]
    b170:	4613      	mov	r3, r2
    b172:	009b      	lsls	r3, r3, #2
    b174:	4413      	add	r3, r2
    b176:	009b      	lsls	r3, r3, #2
    b178:	440b      	add	r3, r1
    b17a:	3340      	adds	r3, #64	; 0x40
    b17c:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    b17e:	f003 0301 	and.w	r3, r3, #1
    b182:	2b00      	cmp	r3, #0
    b184:	bf14      	ite	ne
    b186:	2301      	movne	r3, #1
    b188:	2300      	moveq	r3, #0
    b18a:	b2db      	uxtb	r3, r3
}
    b18c:	4618      	mov	r0, r3
    b18e:	370c      	adds	r7, #12
    b190:	46bd      	mov	sp, r7
    b192:	f85d 7b04 	ldr.w	r7, [sp], #4
    b196:	4770      	bx	lr

0000b198 <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    b198:	b480      	push	{r7}
    b19a:	b083      	sub	sp, #12
    b19c:	af00      	add	r7, sp, #0
    b19e:	6078      	str	r0, [r7, #4]
    b1a0:	460b      	mov	r3, r1
    b1a2:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    b1a4:	78fa      	ldrb	r2, [r7, #3]
    b1a6:	6879      	ldr	r1, [r7, #4]
    b1a8:	4613      	mov	r3, r2
    b1aa:	009b      	lsls	r3, r3, #2
    b1ac:	4413      	add	r3, r2
    b1ae:	009b      	lsls	r3, r3, #2
    b1b0:	440b      	add	r3, r1
    b1b2:	3340      	adds	r3, #64	; 0x40
    b1b4:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    b1b6:	085b      	lsrs	r3, r3, #1
    b1b8:	f003 0301 	and.w	r3, r3, #1
    b1bc:	2b00      	cmp	r3, #0
    b1be:	bf14      	ite	ne
    b1c0:	2301      	movne	r3, #1
    b1c2:	2300      	moveq	r3, #0
    b1c4:	b2db      	uxtb	r3, r3
}
    b1c6:	4618      	mov	r0, r3
    b1c8:	370c      	adds	r7, #12
    b1ca:	46bd      	mov	sp, r7
    b1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    b1d0:	4770      	bx	lr
	...

0000b1d4 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    b1d4:	b580      	push	{r7, lr}
    b1d6:	b082      	sub	sp, #8
    b1d8:	af00      	add	r7, sp, #0
    b1da:	6078      	str	r0, [r7, #4]
    b1dc:	460b      	mov	r3, r1
    b1de:	70fb      	strb	r3, [r7, #3]
    b1e0:	4613      	mov	r3, r2
    b1e2:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    b1e4:	78fa      	ldrb	r2, [r7, #3]
    b1e6:	6879      	ldr	r1, [r7, #4]
    b1e8:	4613      	mov	r3, r2
    b1ea:	009b      	lsls	r3, r3, #2
    b1ec:	4413      	add	r3, r2
    b1ee:	009b      	lsls	r3, r3, #2
    b1f0:	440b      	add	r3, r1
    b1f2:	3330      	adds	r3, #48	; 0x30
    b1f4:	78ba      	ldrb	r2, [r7, #2]
    b1f6:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    b1f8:	78fb      	ldrb	r3, [r7, #3]
    b1fa:	2202      	movs	r2, #2
    b1fc:	4619      	mov	r1, r3
    b1fe:	6878      	ldr	r0, [r7, #4]
    b200:	4b02      	ldr	r3, [pc, #8]	; (b20c <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    b202:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    b204:	bf00      	nop
    b206:	3708      	adds	r7, #8
    b208:	46bd      	mov	sp, r7
    b20a:	bd80      	pop	{r7, pc}
    b20c:	0000b12b 	.word	0x0000b12b

0000b210 <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    b210:	b580      	push	{r7, lr}
    b212:	b084      	sub	sp, #16
    b214:	af00      	add	r7, sp, #0
    b216:	60f8      	str	r0, [r7, #12]
    b218:	460b      	mov	r3, r1
    b21a:	607a      	str	r2, [r7, #4]
    b21c:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    b21e:	7afa      	ldrb	r2, [r7, #11]
    b220:	68f9      	ldr	r1, [r7, #12]
    b222:	4613      	mov	r3, r2
    b224:	009b      	lsls	r3, r3, #2
    b226:	4413      	add	r3, r2
    b228:	009b      	lsls	r3, r3, #2
    b22a:	440b      	add	r3, r1
    b22c:	3334      	adds	r3, #52	; 0x34
    b22e:	687a      	ldr	r2, [r7, #4]
    b230:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    b232:	7afb      	ldrb	r3, [r7, #11]
    b234:	2206      	movs	r2, #6
    b236:	4619      	mov	r1, r3
    b238:	68f8      	ldr	r0, [r7, #12]
    b23a:	4b03      	ldr	r3, [pc, #12]	; (b248 <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    b23c:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    b23e:	bf00      	nop
    b240:	3710      	adds	r7, #16
    b242:	46bd      	mov	sp, r7
    b244:	bd80      	pop	{r7, pc}
    b246:	bf00      	nop
    b248:	0000b12b 	.word	0x0000b12b

0000b24c <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    b24c:	b480      	push	{r7}
    b24e:	b085      	sub	sp, #20
    b250:	af00      	add	r7, sp, #0
    b252:	60f8      	str	r0, [r7, #12]
    b254:	460b      	mov	r3, r1
    b256:	607a      	str	r2, [r7, #4]
    b258:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    b25a:	7afa      	ldrb	r2, [r7, #11]
    b25c:	68f9      	ldr	r1, [r7, #12]
    b25e:	4613      	mov	r3, r2
    b260:	009b      	lsls	r3, r3, #2
    b262:	4413      	add	r3, r2
    b264:	009b      	lsls	r3, r3, #2
    b266:	440b      	add	r3, r1
    b268:	3338      	adds	r3, #56	; 0x38
    b26a:	687a      	ldr	r2, [r7, #4]
    b26c:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    b26e:	bf00      	nop
    b270:	3714      	adds	r7, #20
    b272:	46bd      	mov	sp, r7
    b274:	f85d 7b04 	ldr.w	r7, [sp], #4
    b278:	4770      	bx	lr

0000b27a <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    b27a:	b480      	push	{r7}
    b27c:	b083      	sub	sp, #12
    b27e:	af00      	add	r7, sp, #0
    b280:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    b282:	687b      	ldr	r3, [r7, #4]
    b284:	691b      	ldr	r3, [r3, #16]
    b286:	085b      	lsrs	r3, r3, #1
    b288:	f003 0301 	and.w	r3, r3, #1
    b28c:	2b00      	cmp	r3, #0
    b28e:	bf14      	ite	ne
    b290:	2301      	movne	r3, #1
    b292:	2300      	moveq	r3, #0
    b294:	b2db      	uxtb	r3, r3
}
    b296:	4618      	mov	r0, r3
    b298:	370c      	adds	r7, #12
    b29a:	46bd      	mov	sp, r7
    b29c:	f85d 7b04 	ldr.w	r7, [sp], #4
    b2a0:	4770      	bx	lr

0000b2a2 <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    b2a2:	b480      	push	{r7}
    b2a4:	b083      	sub	sp, #12
    b2a6:	af00      	add	r7, sp, #0
    b2a8:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    b2aa:	687b      	ldr	r3, [r7, #4]
    b2ac:	691b      	ldr	r3, [r3, #16]
    b2ae:	0a1b      	lsrs	r3, r3, #8
    b2b0:	f003 0301 	and.w	r3, r3, #1
    b2b4:	2b00      	cmp	r3, #0
    b2b6:	bf14      	ite	ne
    b2b8:	2301      	movne	r3, #1
    b2ba:	2300      	moveq	r3, #0
    b2bc:	b2db      	uxtb	r3, r3
}
    b2be:	4618      	mov	r0, r3
    b2c0:	370c      	adds	r7, #12
    b2c2:	46bd      	mov	sp, r7
    b2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    b2c8:	4770      	bx	lr

0000b2ca <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    b2ca:	b480      	push	{r7}
    b2cc:	b085      	sub	sp, #20
    b2ce:	af00      	add	r7, sp, #0
    b2d0:	6078      	str	r0, [r7, #4]
    b2d2:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    b2d4:	687b      	ldr	r3, [r7, #4]
    b2d6:	691b      	ldr	r3, [r3, #16]
    b2d8:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    b2da:	68fa      	ldr	r2, [r7, #12]
    b2dc:	683b      	ldr	r3, [r7, #0]
    b2de:	4013      	ands	r3, r2
    b2e0:	60fb      	str	r3, [r7, #12]
	return tmp;
    b2e2:	68fb      	ldr	r3, [r7, #12]
}
    b2e4:	4618      	mov	r0, r3
    b2e6:	3714      	adds	r7, #20
    b2e8:	46bd      	mov	sp, r7
    b2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    b2ee:	4770      	bx	lr

0000b2f0 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    b2f0:	b480      	push	{r7}
    b2f2:	b085      	sub	sp, #20
    b2f4:	af00      	add	r7, sp, #0
    b2f6:	60f8      	str	r0, [r7, #12]
    b2f8:	460b      	mov	r3, r1
    b2fa:	607a      	str	r2, [r7, #4]
    b2fc:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    b2fe:	7afb      	ldrb	r3, [r7, #11]
    b300:	68fa      	ldr	r2, [r7, #12]
    b302:	3304      	adds	r3, #4
    b304:	009b      	lsls	r3, r3, #2
    b306:	4413      	add	r3, r2
    b308:	687a      	ldr	r2, [r7, #4]
    b30a:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    b30c:	bf00      	nop
    b30e:	3714      	adds	r7, #20
    b310:	46bd      	mov	sp, r7
    b312:	f85d 7b04 	ldr.w	r7, [sp], #4
    b316:	4770      	bx	lr

0000b318 <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    b318:	b480      	push	{r7}
    b31a:	b083      	sub	sp, #12
    b31c:	af00      	add	r7, sp, #0
    b31e:	6078      	str	r0, [r7, #4]
    b320:	460b      	mov	r3, r1
    b322:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    b324:	687b      	ldr	r3, [r7, #4]
    b326:	78fa      	ldrb	r2, [r7, #3]
    b328:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    b32a:	bf00      	nop
    b32c:	370c      	adds	r7, #12
    b32e:	46bd      	mov	sp, r7
    b330:	f85d 7b04 	ldr.w	r7, [sp], #4
    b334:	4770      	bx	lr

0000b336 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    b336:	b480      	push	{r7}
    b338:	b085      	sub	sp, #20
    b33a:	af00      	add	r7, sp, #0
    b33c:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    b33e:	687b      	ldr	r3, [r7, #4]
    b340:	f893 3020 	ldrb.w	r3, [r3, #32]
    b344:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    b346:	7bfb      	ldrb	r3, [r7, #15]
    b348:	f003 0301 	and.w	r3, r3, #1
    b34c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    b34e:	7bfb      	ldrb	r3, [r7, #15]
    b350:	2b00      	cmp	r3, #0
    b352:	bf14      	ite	ne
    b354:	2301      	movne	r3, #1
    b356:	2300      	moveq	r3, #0
    b358:	b2db      	uxtb	r3, r3
}
    b35a:	4618      	mov	r0, r3
    b35c:	3714      	adds	r7, #20
    b35e:	46bd      	mov	sp, r7
    b360:	f85d 7b04 	ldr.w	r7, [sp], #4
    b364:	4770      	bx	lr

0000b366 <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    b366:	b480      	push	{r7}
    b368:	b083      	sub	sp, #12
    b36a:	af00      	add	r7, sp, #0
    b36c:	6078      	str	r0, [r7, #4]
    b36e:	460b      	mov	r3, r1
    b370:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    b372:	687b      	ldr	r3, [r7, #4]
    b374:	78fa      	ldrb	r2, [r7, #3]
    b376:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    b37a:	bf00      	nop
    b37c:	370c      	adds	r7, #12
    b37e:	46bd      	mov	sp, r7
    b380:	f85d 7b04 	ldr.w	r7, [sp], #4
    b384:	4770      	bx	lr

0000b386 <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    b386:	b480      	push	{r7}
    b388:	b083      	sub	sp, #12
    b38a:	af00      	add	r7, sp, #0
    b38c:	6078      	str	r0, [r7, #4]
    b38e:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    b390:	687b      	ldr	r3, [r7, #4]
    b392:	683a      	ldr	r2, [r7, #0]
    b394:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    b396:	bf00      	nop
    b398:	370c      	adds	r7, #12
    b39a:	46bd      	mov	sp, r7
    b39c:	f85d 7b04 	ldr.w	r7, [sp], #4
    b3a0:	4770      	bx	lr

0000b3a2 <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    b3a2:	b480      	push	{r7}
    b3a4:	b083      	sub	sp, #12
    b3a6:	af00      	add	r7, sp, #0
    b3a8:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    b3aa:	687b      	ldr	r3, [r7, #4]
    b3ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    b3ae:	4618      	mov	r0, r3
    b3b0:	370c      	adds	r7, #12
    b3b2:	46bd      	mov	sp, r7
    b3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    b3b8:	4770      	bx	lr

0000b3ba <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    b3ba:	b480      	push	{r7}
    b3bc:	b083      	sub	sp, #12
    b3be:	af00      	add	r7, sp, #0
    b3c0:	6078      	str	r0, [r7, #4]
    b3c2:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    b3c4:	687b      	ldr	r3, [r7, #4]
    b3c6:	683a      	ldr	r2, [r7, #0]
    b3c8:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    b3ca:	bf00      	nop
    b3cc:	370c      	adds	r7, #12
    b3ce:	46bd      	mov	sp, r7
    b3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    b3d4:	4770      	bx	lr

0000b3d6 <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    b3d6:	b480      	push	{r7}
    b3d8:	b085      	sub	sp, #20
    b3da:	af00      	add	r7, sp, #0
    b3dc:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    b3de:	687b      	ldr	r3, [r7, #4]
    b3e0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    b3e4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    b3e6:	7bfb      	ldrb	r3, [r7, #15]
    b3e8:	085b      	lsrs	r3, r3, #1
    b3ea:	b2db      	uxtb	r3, r3
    b3ec:	f003 0301 	and.w	r3, r3, #1
    b3f0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    b3f2:	7bfb      	ldrb	r3, [r7, #15]
    b3f4:	2b00      	cmp	r3, #0
    b3f6:	bf14      	ite	ne
    b3f8:	2301      	movne	r3, #1
    b3fa:	2300      	moveq	r3, #0
    b3fc:	b2db      	uxtb	r3, r3
}
    b3fe:	4618      	mov	r0, r3
    b400:	3714      	adds	r7, #20
    b402:	46bd      	mov	sp, r7
    b404:	f85d 7b04 	ldr.w	r7, [sp], #4
    b408:	4770      	bx	lr

0000b40a <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    b40a:	b480      	push	{r7}
    b40c:	b085      	sub	sp, #20
    b40e:	af00      	add	r7, sp, #0
    b410:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    b412:	687b      	ldr	r3, [r7, #4]
    b414:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    b418:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    b41a:	7bfb      	ldrb	r3, [r7, #15]
    b41c:	089b      	lsrs	r3, r3, #2
    b41e:	b2db      	uxtb	r3, r3
    b420:	f003 0301 	and.w	r3, r3, #1
    b424:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    b426:	7bfb      	ldrb	r3, [r7, #15]
    b428:	2b00      	cmp	r3, #0
    b42a:	bf14      	ite	ne
    b42c:	2301      	movne	r3, #1
    b42e:	2300      	moveq	r3, #0
    b430:	b2db      	uxtb	r3, r3
}
    b432:	4618      	mov	r0, r3
    b434:	3714      	adds	r7, #20
    b436:	46bd      	mov	sp, r7
    b438:	f85d 7b04 	ldr.w	r7, [sp], #4
    b43c:	4770      	bx	lr

0000b43e <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    b43e:	b480      	push	{r7}
    b440:	b085      	sub	sp, #20
    b442:	af00      	add	r7, sp, #0
    b444:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    b446:	687b      	ldr	r3, [r7, #4]
    b448:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    b44c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    b44e:	7bfb      	ldrb	r3, [r7, #15]
    b450:	08db      	lsrs	r3, r3, #3
    b452:	b2db      	uxtb	r3, r3
    b454:	f003 0301 	and.w	r3, r3, #1
    b458:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    b45a:	7bfb      	ldrb	r3, [r7, #15]
    b45c:	2b00      	cmp	r3, #0
    b45e:	bf14      	ite	ne
    b460:	2301      	movne	r3, #1
    b462:	2300      	moveq	r3, #0
    b464:	b2db      	uxtb	r3, r3
}
    b466:	4618      	mov	r0, r3
    b468:	3714      	adds	r7, #20
    b46a:	46bd      	mov	sp, r7
    b46c:	f85d 7b04 	ldr.w	r7, [sp], #4
    b470:	4770      	bx	lr

0000b472 <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    b472:	b480      	push	{r7}
    b474:	b085      	sub	sp, #20
    b476:	af00      	add	r7, sp, #0
    b478:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    b47a:	687b      	ldr	r3, [r7, #4]
    b47c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    b480:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    b482:	7bfb      	ldrb	r3, [r7, #15]
    b484:	091b      	lsrs	r3, r3, #4
    b486:	b2db      	uxtb	r3, r3
    b488:	f003 0301 	and.w	r3, r3, #1
    b48c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    b48e:	7bfb      	ldrb	r3, [r7, #15]
    b490:	2b00      	cmp	r3, #0
    b492:	bf14      	ite	ne
    b494:	2301      	movne	r3, #1
    b496:	2300      	moveq	r3, #0
    b498:	b2db      	uxtb	r3, r3
}
    b49a:	4618      	mov	r0, r3
    b49c:	3714      	adds	r7, #20
    b49e:	46bd      	mov	sp, r7
    b4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    b4a4:	4770      	bx	lr
	...

0000b4a8 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    b4a8:	b580      	push	{r7, lr}
    b4aa:	b082      	sub	sp, #8
    b4ac:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    b4ae:	4b0a      	ldr	r3, [pc, #40]	; (b4d8 <_oscctrl_init_sources+0x30>)
    b4b0:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    b4b2:	4a0a      	ldr	r2, [pc, #40]	; (b4dc <_oscctrl_init_sources+0x34>)
    b4b4:	2101      	movs	r1, #1
    b4b6:	6878      	ldr	r0, [r7, #4]
    b4b8:	4b09      	ldr	r3, [pc, #36]	; (b4e0 <_oscctrl_init_sources+0x38>)
    b4ba:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    b4bc:	bf00      	nop
    b4be:	6878      	ldr	r0, [r7, #4]
    b4c0:	4b08      	ldr	r3, [pc, #32]	; (b4e4 <_oscctrl_init_sources+0x3c>)
    b4c2:	4798      	blx	r3
    b4c4:	4603      	mov	r3, r0
    b4c6:	f083 0301 	eor.w	r3, r3, #1
    b4ca:	b2db      	uxtb	r3, r3
    b4cc:	2b00      	cmp	r3, #0
    b4ce:	d1f6      	bne.n	b4be <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    b4d0:	bf00      	nop
    b4d2:	3708      	adds	r7, #8
    b4d4:	46bd      	mov	sp, r7
    b4d6:	bd80      	pop	{r7, pc}
    b4d8:	40001000 	.word	0x40001000
    b4dc:	03002606 	.word	0x03002606
    b4e0:	0000b2f1 	.word	0x0000b2f1
    b4e4:	0000b27b 	.word	0x0000b27b

0000b4e8 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    b4e8:	b580      	push	{r7, lr}
    b4ea:	b084      	sub	sp, #16
    b4ec:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    b4ee:	4b6b      	ldr	r3, [pc, #428]	; (b69c <_oscctrl_init_referenced_generators+0x1b4>)
    b4f0:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    b4f2:	2204      	movs	r2, #4
    b4f4:	2100      	movs	r1, #0
    b4f6:	486a      	ldr	r0, [pc, #424]	; (b6a0 <_oscctrl_init_referenced_generators+0x1b8>)
    b4f8:	4b6a      	ldr	r3, [pc, #424]	; (b6a4 <_oscctrl_init_referenced_generators+0x1bc>)
    b4fa:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    b4fc:	bf00      	nop
    b4fe:	4868      	ldr	r0, [pc, #416]	; (b6a0 <_oscctrl_init_referenced_generators+0x1b8>)
    b500:	4b69      	ldr	r3, [pc, #420]	; (b6a8 <_oscctrl_init_referenced_generators+0x1c0>)
    b502:	4798      	blx	r3
    b504:	4603      	mov	r3, r0
    b506:	2b00      	cmp	r3, #0
    b508:	d1f9      	bne.n	b4fe <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    b50a:	2100      	movs	r1, #0
    b50c:	68f8      	ldr	r0, [r7, #12]
    b50e:	4b67      	ldr	r3, [pc, #412]	; (b6ac <_oscctrl_init_referenced_generators+0x1c4>)
    b510:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    b512:	4967      	ldr	r1, [pc, #412]	; (b6b0 <_oscctrl_init_referenced_generators+0x1c8>)
    b514:	68f8      	ldr	r0, [r7, #12]
    b516:	4b67      	ldr	r3, [pc, #412]	; (b6b4 <_oscctrl_init_referenced_generators+0x1cc>)
    b518:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    b51a:	bf00      	nop
    b51c:	68f8      	ldr	r0, [r7, #12]
    b51e:	4b66      	ldr	r3, [pc, #408]	; (b6b8 <_oscctrl_init_referenced_generators+0x1d0>)
    b520:	4798      	blx	r3
    b522:	4603      	mov	r3, r0
    b524:	2b00      	cmp	r3, #0
    b526:	d1f9      	bne.n	b51c <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    b528:	2100      	movs	r1, #0
    b52a:	68f8      	ldr	r0, [r7, #12]
    b52c:	4b63      	ldr	r3, [pc, #396]	; (b6bc <_oscctrl_init_referenced_generators+0x1d4>)
    b52e:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    b530:	bf00      	nop
    b532:	68f8      	ldr	r0, [r7, #12]
    b534:	4b62      	ldr	r3, [pc, #392]	; (b6c0 <_oscctrl_init_referenced_generators+0x1d8>)
    b536:	4798      	blx	r3
    b538:	4603      	mov	r3, r0
    b53a:	2b00      	cmp	r3, #0
    b53c:	d1f9      	bne.n	b532 <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    b53e:	2302      	movs	r3, #2
    b540:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    b542:	7afb      	ldrb	r3, [r7, #11]
    b544:	4619      	mov	r1, r3
    b546:	68f8      	ldr	r0, [r7, #12]
    b548:	4b58      	ldr	r3, [pc, #352]	; (b6ac <_oscctrl_init_referenced_generators+0x1c4>)
    b54a:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    b54c:	bf00      	nop
    b54e:	68f8      	ldr	r0, [r7, #12]
    b550:	4b5c      	ldr	r3, [pc, #368]	; (b6c4 <_oscctrl_init_referenced_generators+0x1dc>)
    b552:	4798      	blx	r3
    b554:	4603      	mov	r3, r0
    b556:	2b00      	cmp	r3, #0
    b558:	d1f9      	bne.n	b54e <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    b55a:	68f8      	ldr	r0, [r7, #12]
    b55c:	4b5a      	ldr	r3, [pc, #360]	; (b6c8 <_oscctrl_init_referenced_generators+0x1e0>)
    b55e:	4798      	blx	r3
    b560:	4603      	mov	r3, r0
    b562:	4619      	mov	r1, r3
    b564:	68f8      	ldr	r0, [r7, #12]
    b566:	4b59      	ldr	r3, [pc, #356]	; (b6cc <_oscctrl_init_referenced_generators+0x1e4>)
    b568:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    b56a:	bf00      	nop
    b56c:	68f8      	ldr	r0, [r7, #12]
    b56e:	4b58      	ldr	r3, [pc, #352]	; (b6d0 <_oscctrl_init_referenced_generators+0x1e8>)
    b570:	4798      	blx	r3
    b572:	4603      	mov	r3, r0
    b574:	2b00      	cmp	r3, #0
    b576:	d1f9      	bne.n	b56c <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    b578:	2319      	movs	r3, #25
    b57a:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    b57c:	7afb      	ldrb	r3, [r7, #11]
    b57e:	4619      	mov	r1, r3
    b580:	68f8      	ldr	r0, [r7, #12]
    b582:	4b4e      	ldr	r3, [pc, #312]	; (b6bc <_oscctrl_init_referenced_generators+0x1d4>)
    b584:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    b586:	bf00      	nop
    b588:	68f8      	ldr	r0, [r7, #12]
    b58a:	4b4d      	ldr	r3, [pc, #308]	; (b6c0 <_oscctrl_init_referenced_generators+0x1d8>)
    b58c:	4798      	blx	r3
    b58e:	4603      	mov	r3, r0
    b590:	2b00      	cmp	r3, #0
    b592:	d1f9      	bne.n	b588 <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    b594:	2245      	movs	r2, #69	; 0x45
    b596:	2101      	movs	r1, #1
    b598:	4841      	ldr	r0, [pc, #260]	; (b6a0 <_oscctrl_init_referenced_generators+0x1b8>)
    b59a:	4b4e      	ldr	r3, [pc, #312]	; (b6d4 <_oscctrl_init_referenced_generators+0x1ec>)
    b59c:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    b59e:	223b      	movs	r2, #59	; 0x3b
    b5a0:	2100      	movs	r1, #0
    b5a2:	68f8      	ldr	r0, [r7, #12]
    b5a4:	4b4c      	ldr	r3, [pc, #304]	; (b6d8 <_oscctrl_init_referenced_generators+0x1f0>)
    b5a6:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    b5a8:	f44f 6201 	mov.w	r2, #2064	; 0x810
    b5ac:	2100      	movs	r1, #0
    b5ae:	68f8      	ldr	r0, [r7, #12]
    b5b0:	4b4a      	ldr	r3, [pc, #296]	; (b6dc <_oscctrl_init_referenced_generators+0x1f4>)
    b5b2:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    b5b4:	2242      	movs	r2, #66	; 0x42
    b5b6:	2100      	movs	r1, #0
    b5b8:	68f8      	ldr	r0, [r7, #12]
    b5ba:	4b49      	ldr	r3, [pc, #292]	; (b6e0 <_oscctrl_init_referenced_generators+0x1f8>)
    b5bc:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    b5be:	4a49      	ldr	r2, [pc, #292]	; (b6e4 <_oscctrl_init_referenced_generators+0x1fc>)
    b5c0:	2101      	movs	r1, #1
    b5c2:	68f8      	ldr	r0, [r7, #12]
    b5c4:	4b44      	ldr	r3, [pc, #272]	; (b6d8 <_oscctrl_init_referenced_generators+0x1f0>)
    b5c6:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    b5c8:	f44f 6203 	mov.w	r2, #2096	; 0x830
    b5cc:	2101      	movs	r1, #1
    b5ce:	68f8      	ldr	r0, [r7, #12]
    b5d0:	4b42      	ldr	r3, [pc, #264]	; (b6dc <_oscctrl_init_referenced_generators+0x1f4>)
    b5d2:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    b5d4:	2202      	movs	r2, #2
    b5d6:	2101      	movs	r1, #1
    b5d8:	68f8      	ldr	r0, [r7, #12]
    b5da:	4b41      	ldr	r3, [pc, #260]	; (b6e0 <_oscctrl_init_referenced_generators+0x1f8>)
    b5dc:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    b5de:	68f8      	ldr	r0, [r7, #12]
    b5e0:	4b41      	ldr	r3, [pc, #260]	; (b6e8 <_oscctrl_init_referenced_generators+0x200>)
    b5e2:	4798      	blx	r3
    b5e4:	4603      	mov	r3, r0
    b5e6:	2b00      	cmp	r3, #0
    b5e8:	d00c      	beq.n	b604 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    b5ea:	f44f 6310 	mov.w	r3, #2304	; 0x900
    b5ee:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    b5f0:	bf00      	nop
    b5f2:	6879      	ldr	r1, [r7, #4]
    b5f4:	68f8      	ldr	r0, [r7, #12]
    b5f6:	4b3d      	ldr	r3, [pc, #244]	; (b6ec <_oscctrl_init_referenced_generators+0x204>)
    b5f8:	4798      	blx	r3
    b5fa:	4602      	mov	r2, r0
    b5fc:	687b      	ldr	r3, [r7, #4]
    b5fe:	429a      	cmp	r2, r3
    b600:	d1f7      	bne.n	b5f2 <_oscctrl_init_referenced_generators+0x10a>
    b602:	e009      	b.n	b618 <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    b604:	bf00      	nop
    b606:	68f8      	ldr	r0, [r7, #12]
    b608:	4b39      	ldr	r3, [pc, #228]	; (b6f0 <_oscctrl_init_referenced_generators+0x208>)
    b60a:	4798      	blx	r3
    b60c:	4603      	mov	r3, r0
    b60e:	f083 0301 	eor.w	r3, r3, #1
    b612:	b2db      	uxtb	r3, r3
    b614:	2b00      	cmp	r3, #0
    b616:	d1f6      	bne.n	b606 <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    b618:	bf00      	nop
    b61a:	2100      	movs	r1, #0
    b61c:	68f8      	ldr	r0, [r7, #12]
    b61e:	4b35      	ldr	r3, [pc, #212]	; (b6f4 <_oscctrl_init_referenced_generators+0x20c>)
    b620:	4798      	blx	r3
    b622:	4603      	mov	r3, r0
    b624:	f083 0301 	eor.w	r3, r3, #1
    b628:	b2db      	uxtb	r3, r3
    b62a:	2b00      	cmp	r3, #0
    b62c:	d009      	beq.n	b642 <_oscctrl_init_referenced_generators+0x15a>
    b62e:	2100      	movs	r1, #0
    b630:	68f8      	ldr	r0, [r7, #12]
    b632:	4b31      	ldr	r3, [pc, #196]	; (b6f8 <_oscctrl_init_referenced_generators+0x210>)
    b634:	4798      	blx	r3
    b636:	4603      	mov	r3, r0
    b638:	f083 0301 	eor.w	r3, r3, #1
    b63c:	b2db      	uxtb	r3, r3
    b63e:	2b00      	cmp	r3, #0
    b640:	d1eb      	bne.n	b61a <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    b642:	bf00      	nop
    b644:	2101      	movs	r1, #1
    b646:	68f8      	ldr	r0, [r7, #12]
    b648:	4b2a      	ldr	r3, [pc, #168]	; (b6f4 <_oscctrl_init_referenced_generators+0x20c>)
    b64a:	4798      	blx	r3
    b64c:	4603      	mov	r3, r0
    b64e:	f083 0301 	eor.w	r3, r3, #1
    b652:	b2db      	uxtb	r3, r3
    b654:	2b00      	cmp	r3, #0
    b656:	d009      	beq.n	b66c <_oscctrl_init_referenced_generators+0x184>
    b658:	2101      	movs	r1, #1
    b65a:	68f8      	ldr	r0, [r7, #12]
    b65c:	4b26      	ldr	r3, [pc, #152]	; (b6f8 <_oscctrl_init_referenced_generators+0x210>)
    b65e:	4798      	blx	r3
    b660:	4603      	mov	r3, r0
    b662:	f083 0301 	eor.w	r3, r3, #1
    b666:	b2db      	uxtb	r3, r3
    b668:	2b00      	cmp	r3, #0
    b66a:	d1eb      	bne.n	b644 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    b66c:	bf00      	nop
    b66e:	480c      	ldr	r0, [pc, #48]	; (b6a0 <_oscctrl_init_referenced_generators+0x1b8>)
    b670:	4b22      	ldr	r3, [pc, #136]	; (b6fc <_oscctrl_init_referenced_generators+0x214>)
    b672:	4798      	blx	r3
    b674:	4603      	mov	r3, r0
    b676:	2b00      	cmp	r3, #0
    b678:	d1f9      	bne.n	b66e <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    b67a:	2207      	movs	r2, #7
    b67c:	2100      	movs	r1, #0
    b67e:	4808      	ldr	r0, [pc, #32]	; (b6a0 <_oscctrl_init_referenced_generators+0x1b8>)
    b680:	4b08      	ldr	r3, [pc, #32]	; (b6a4 <_oscctrl_init_referenced_generators+0x1bc>)
    b682:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    b684:	bf00      	nop
    b686:	4806      	ldr	r0, [pc, #24]	; (b6a0 <_oscctrl_init_referenced_generators+0x1b8>)
    b688:	4b07      	ldr	r3, [pc, #28]	; (b6a8 <_oscctrl_init_referenced_generators+0x1c0>)
    b68a:	4798      	blx	r3
    b68c:	4603      	mov	r3, r0
    b68e:	2b00      	cmp	r3, #0
    b690:	d1f9      	bne.n	b686 <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    b692:	bf00      	nop
    b694:	3710      	adds	r7, #16
    b696:	46bd      	mov	sp, r7
    b698:	bd80      	pop	{r7, pc}
    b69a:	bf00      	nop
    b69c:	40001000 	.word	0x40001000
    b6a0:	40001c00 	.word	0x40001c00
    b6a4:	0000b0b5 	.word	0x0000b0b5
    b6a8:	0000b075 	.word	0x0000b075
    b6ac:	0000b319 	.word	0x0000b319
    b6b0:	0401bb80 	.word	0x0401bb80
    b6b4:	0000b3bb 	.word	0x0000b3bb
    b6b8:	0000b473 	.word	0x0000b473
    b6bc:	0000b367 	.word	0x0000b367
    b6c0:	0000b40b 	.word	0x0000b40b
    b6c4:	0000b3d7 	.word	0x0000b3d7
    b6c8:	0000b3a3 	.word	0x0000b3a3
    b6cc:	0000b387 	.word	0x0000b387
    b6d0:	0000b43f 	.word	0x0000b43f
    b6d4:	0000b105 	.word	0x0000b105
    b6d8:	0000b211 	.word	0x0000b211
    b6dc:	0000b24d 	.word	0x0000b24d
    b6e0:	0000b1d5 	.word	0x0000b1d5
    b6e4:	000407a0 	.word	0x000407a0
    b6e8:	0000b337 	.word	0x0000b337
    b6ec:	0000b2cb 	.word	0x0000b2cb
    b6f0:	0000b2a3 	.word	0x0000b2a3
    b6f4:	0000b161 	.word	0x0000b161
    b6f8:	0000b199 	.word	0x0000b199
    b6fc:	0000b09d 	.word	0x0000b09d

0000b700 <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    b700:	b480      	push	{r7}
    b702:	b083      	sub	sp, #12
    b704:	af00      	add	r7, sp, #0
    b706:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    b708:	687b      	ldr	r3, [r7, #4]
    b70a:	69db      	ldr	r3, [r3, #28]
    b70c:	0a9b      	lsrs	r3, r3, #10
    b70e:	f003 0301 	and.w	r3, r3, #1
    b712:	2b00      	cmp	r3, #0
    b714:	bf14      	ite	ne
    b716:	2301      	movne	r3, #1
    b718:	2300      	moveq	r3, #0
    b71a:	b2db      	uxtb	r3, r3
}
    b71c:	4618      	mov	r0, r3
    b71e:	370c      	adds	r7, #12
    b720:	46bd      	mov	sp, r7
    b722:	f85d 7b04 	ldr.w	r7, [sp], #4
    b726:	4770      	bx	lr

0000b728 <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    b728:	b480      	push	{r7}
    b72a:	b083      	sub	sp, #12
    b72c:	af00      	add	r7, sp, #0
    b72e:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    b730:	687b      	ldr	r3, [r7, #4]
    b732:	f44f 6280 	mov.w	r2, #1024	; 0x400
    b736:	61da      	str	r2, [r3, #28]
}
    b738:	bf00      	nop
    b73a:	370c      	adds	r7, #12
    b73c:	46bd      	mov	sp, r7
    b73e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b742:	4770      	bx	lr

0000b744 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    b744:	b480      	push	{r7}
    b746:	b083      	sub	sp, #12
    b748:	af00      	add	r7, sp, #0
    b74a:	6078      	str	r0, [r7, #4]
    b74c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    b74e:	687b      	ldr	r3, [r7, #4]
    b750:	683a      	ldr	r2, [r7, #0]
    b752:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    b754:	bf00      	nop
    b756:	370c      	adds	r7, #12
    b758:	46bd      	mov	sp, r7
    b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b75e:	4770      	bx	lr

0000b760 <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    b760:	b480      	push	{r7}
    b762:	b083      	sub	sp, #12
    b764:	af00      	add	r7, sp, #0
    b766:	6078      	str	r0, [r7, #4]
    b768:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    b76a:	687b      	ldr	r3, [r7, #4]
    b76c:	683a      	ldr	r2, [r7, #0]
    b76e:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    b770:	bf00      	nop
    b772:	370c      	adds	r7, #12
    b774:	46bd      	mov	sp, r7
    b776:	f85d 7b04 	ldr.w	r7, [sp], #4
    b77a:	4770      	bx	lr

0000b77c <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    b77c:	b480      	push	{r7}
    b77e:	b083      	sub	sp, #12
    b780:	af00      	add	r7, sp, #0
    b782:	6078      	str	r0, [r7, #4]
    b784:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    b786:	687b      	ldr	r3, [r7, #4]
    b788:	683a      	ldr	r2, [r7, #0]
    b78a:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    b78c:	bf00      	nop
    b78e:	370c      	adds	r7, #12
    b790:	46bd      	mov	sp, r7
    b792:	f85d 7b04 	ldr.w	r7, [sp], #4
    b796:	4770      	bx	lr

0000b798 <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    b798:	b480      	push	{r7}
    b79a:	b083      	sub	sp, #12
    b79c:	af00      	add	r7, sp, #0
    b79e:	6078      	str	r0, [r7, #4]
    b7a0:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    b7a2:	687b      	ldr	r3, [r7, #4]
    b7a4:	683a      	ldr	r2, [r7, #0]
    b7a6:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    b7a8:	bf00      	nop
    b7aa:	370c      	adds	r7, #12
    b7ac:	46bd      	mov	sp, r7
    b7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    b7b2:	4770      	bx	lr

0000b7b4 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    b7b4:	b480      	push	{r7}
    b7b6:	b085      	sub	sp, #20
    b7b8:	af00      	add	r7, sp, #0
    b7ba:	6078      	str	r0, [r7, #4]
    b7bc:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    b7be:	687b      	ldr	r3, [r7, #4]
    b7c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b7c2:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    b7c4:	68fb      	ldr	r3, [r7, #12]
    b7c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    b7ca:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    b7cc:	683b      	ldr	r3, [r7, #0]
    b7ce:	b2db      	uxtb	r3, r3
    b7d0:	68fa      	ldr	r2, [r7, #12]
    b7d2:	4313      	orrs	r3, r2
    b7d4:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    b7d6:	687b      	ldr	r3, [r7, #4]
    b7d8:	68fa      	ldr	r2, [r7, #12]
    b7da:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    b7dc:	bf00      	nop
    b7de:	3714      	adds	r7, #20
    b7e0:	46bd      	mov	sp, r7
    b7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    b7e6:	4770      	bx	lr

0000b7e8 <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    b7e8:	b480      	push	{r7}
    b7ea:	b085      	sub	sp, #20
    b7ec:	af00      	add	r7, sp, #0
    b7ee:	6078      	str	r0, [r7, #4]
    b7f0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    b7f2:	687b      	ldr	r3, [r7, #4]
    b7f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b7f6:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    b7f8:	68fb      	ldr	r3, [r7, #12]
    b7fa:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    b7fe:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    b800:	683b      	ldr	r3, [r7, #0]
    b802:	041b      	lsls	r3, r3, #16
    b804:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    b808:	68fa      	ldr	r2, [r7, #12]
    b80a:	4313      	orrs	r3, r2
    b80c:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    b80e:	687b      	ldr	r3, [r7, #4]
    b810:	68fa      	ldr	r2, [r7, #12]
    b812:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    b814:	bf00      	nop
    b816:	3714      	adds	r7, #20
    b818:	46bd      	mov	sp, r7
    b81a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b81e:	4770      	bx	lr

0000b820 <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    b820:	b480      	push	{r7}
    b822:	b083      	sub	sp, #12
    b824:	af00      	add	r7, sp, #0
    b826:	6078      	str	r0, [r7, #4]
    b828:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    b82a:	687b      	ldr	r3, [r7, #4]
    b82c:	683a      	ldr	r2, [r7, #0]
    b82e:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    b830:	bf00      	nop
    b832:	370c      	adds	r7, #12
    b834:	46bd      	mov	sp, r7
    b836:	f85d 7b04 	ldr.w	r7, [sp], #4
    b83a:	4770      	bx	lr

0000b83c <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    b83c:	b480      	push	{r7}
    b83e:	b083      	sub	sp, #12
    b840:	af00      	add	r7, sp, #0
    b842:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    b844:	687b      	ldr	r3, [r7, #4]
    b846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    b848:	4618      	mov	r0, r3
    b84a:	370c      	adds	r7, #12
    b84c:	46bd      	mov	sp, r7
    b84e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b852:	4770      	bx	lr

0000b854 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    b854:	b480      	push	{r7}
    b856:	b085      	sub	sp, #20
    b858:	af00      	add	r7, sp, #0
    b85a:	60f8      	str	r0, [r7, #12]
    b85c:	60b9      	str	r1, [r7, #8]
    b85e:	607a      	str	r2, [r7, #4]
	while (count--) {
    b860:	e007      	b.n	b872 <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    b862:	68fb      	ldr	r3, [r7, #12]
    b864:	1c5a      	adds	r2, r3, #1
    b866:	60fa      	str	r2, [r7, #12]
    b868:	68ba      	ldr	r2, [r7, #8]
    b86a:	1c51      	adds	r1, r2, #1
    b86c:	60b9      	str	r1, [r7, #8]
    b86e:	7812      	ldrb	r2, [r2, #0]
    b870:	701a      	strb	r2, [r3, #0]
	while (count--) {
    b872:	687b      	ldr	r3, [r7, #4]
    b874:	1e5a      	subs	r2, r3, #1
    b876:	607a      	str	r2, [r7, #4]
    b878:	2b00      	cmp	r3, #0
    b87a:	d1f2      	bne.n	b862 <_qspi_memcpy+0xe>
	}
}
    b87c:	bf00      	nop
    b87e:	3714      	adds	r7, #20
    b880:	46bd      	mov	sp, r7
    b882:	f85d 7b04 	ldr.w	r7, [sp], #4
    b886:	4770      	bx	lr

0000b888 <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    b888:	b580      	push	{r7, lr}
    b88a:	b082      	sub	sp, #8
    b88c:	af00      	add	r7, sp, #0
    b88e:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    b890:	4903      	ldr	r1, [pc, #12]	; (b8a0 <_qspi_end_transfer+0x18>)
    b892:	6878      	ldr	r0, [r7, #4]
    b894:	4b03      	ldr	r3, [pc, #12]	; (b8a4 <_qspi_end_transfer+0x1c>)
    b896:	4798      	blx	r3
}
    b898:	bf00      	nop
    b89a:	3708      	adds	r7, #8
    b89c:	46bd      	mov	sp, r7
    b89e:	bd80      	pop	{r7, pc}
    b8a0:	01000002 	.word	0x01000002
    b8a4:	0000b745 	.word	0x0000b745

0000b8a8 <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    b8a8:	b580      	push	{r7, lr}
    b8aa:	b082      	sub	sp, #8
    b8ac:	af00      	add	r7, sp, #0
    b8ae:	6078      	str	r0, [r7, #4]
    b8b0:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    b8b2:	687b      	ldr	r3, [r7, #4]
    b8b4:	2b00      	cmp	r3, #0
    b8b6:	d004      	beq.n	b8c2 <_qspi_sync_init+0x1a>
    b8b8:	683b      	ldr	r3, [r7, #0]
    b8ba:	2b00      	cmp	r3, #0
    b8bc:	d001      	beq.n	b8c2 <_qspi_sync_init+0x1a>
    b8be:	2301      	movs	r3, #1
    b8c0:	e000      	b.n	b8c4 <_qspi_sync_init+0x1c>
    b8c2:	2300      	movs	r3, #0
    b8c4:	f003 0301 	and.w	r3, r3, #1
    b8c8:	b2db      	uxtb	r3, r3
    b8ca:	2240      	movs	r2, #64	; 0x40
    b8cc:	490c      	ldr	r1, [pc, #48]	; (b900 <_qspi_sync_init+0x58>)
    b8ce:	4618      	mov	r0, r3
    b8d0:	4b0c      	ldr	r3, [pc, #48]	; (b904 <_qspi_sync_init+0x5c>)
    b8d2:	4798      	blx	r3
	dev->prvt = hw;
    b8d4:	687b      	ldr	r3, [r7, #4]
    b8d6:	683a      	ldr	r2, [r7, #0]
    b8d8:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    b8da:	687b      	ldr	r3, [r7, #4]
    b8dc:	681b      	ldr	r3, [r3, #0]
    b8de:	2101      	movs	r1, #1
    b8e0:	4618      	mov	r0, r3
    b8e2:	4b09      	ldr	r3, [pc, #36]	; (b908 <_qspi_sync_init+0x60>)
    b8e4:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    b8e6:	4909      	ldr	r1, [pc, #36]	; (b90c <_qspi_sync_init+0x64>)
    b8e8:	6838      	ldr	r0, [r7, #0]
    b8ea:	4b09      	ldr	r3, [pc, #36]	; (b910 <_qspi_sync_init+0x68>)
    b8ec:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    b8ee:	4909      	ldr	r1, [pc, #36]	; (b914 <_qspi_sync_init+0x6c>)
    b8f0:	6838      	ldr	r0, [r7, #0]
    b8f2:	4b09      	ldr	r3, [pc, #36]	; (b918 <_qspi_sync_init+0x70>)
    b8f4:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    b8f6:	2300      	movs	r3, #0
}
    b8f8:	4618      	mov	r0, r3
    b8fa:	3708      	adds	r7, #8
    b8fc:	46bd      	mov	sp, r7
    b8fe:	bd80      	pop	{r7, pc}
    b900:	00013fcc 	.word	0x00013fcc
    b904:	000094ed 	.word	0x000094ed
    b908:	0000b745 	.word	0x0000b745
    b90c:	06000011 	.word	0x06000011
    b910:	0000b761 	.word	0x0000b761
    b914:	00241300 	.word	0x00241300
    b918:	0000b77d 	.word	0x0000b77d

0000b91c <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    b91c:	b580      	push	{r7, lr}
    b91e:	b082      	sub	sp, #8
    b920:	af00      	add	r7, sp, #0
    b922:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    b924:	687b      	ldr	r3, [r7, #4]
    b926:	681b      	ldr	r3, [r3, #0]
    b928:	2102      	movs	r1, #2
    b92a:	4618      	mov	r0, r3
    b92c:	4b03      	ldr	r3, [pc, #12]	; (b93c <_qspi_sync_enable+0x20>)
    b92e:	4798      	blx	r3
	return ERR_NONE;
    b930:	2300      	movs	r3, #0
}
    b932:	4618      	mov	r0, r3
    b934:	3708      	adds	r7, #8
    b936:	46bd      	mov	sp, r7
    b938:	bd80      	pop	{r7, pc}
    b93a:	bf00      	nop
    b93c:	0000b745 	.word	0x0000b745

0000b940 <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    b940:	b580      	push	{r7, lr}
    b942:	b082      	sub	sp, #8
    b944:	af00      	add	r7, sp, #0
    b946:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    b948:	687b      	ldr	r3, [r7, #4]
    b94a:	681b      	ldr	r3, [r3, #0]
    b94c:	2100      	movs	r1, #0
    b94e:	4618      	mov	r0, r3
    b950:	4b03      	ldr	r3, [pc, #12]	; (b960 <_qspi_sync_disable+0x20>)
    b952:	4798      	blx	r3
	return ERR_NONE;
    b954:	2300      	movs	r3, #0
}
    b956:	4618      	mov	r0, r3
    b958:	3708      	adds	r7, #8
    b95a:	46bd      	mov	sp, r7
    b95c:	bd80      	pop	{r7, pc}
    b95e:	bf00      	nop
    b960:	0000b745 	.word	0x0000b745

0000b964 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    b964:	b580      	push	{r7, lr}
    b966:	b084      	sub	sp, #16
    b968:	af00      	add	r7, sp, #0
    b96a:	6078      	str	r0, [r7, #4]
    b96c:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    b96e:	687b      	ldr	r3, [r7, #4]
    b970:	681b      	ldr	r3, [r3, #0]
    b972:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    b974:	683b      	ldr	r3, [r7, #0]
    b976:	781b      	ldrb	r3, [r3, #0]
    b978:	f003 0320 	and.w	r3, r3, #32
    b97c:	b2db      	uxtb	r3, r3
    b97e:	2b00      	cmp	r3, #0
    b980:	d005      	beq.n	b98e <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    b982:	683b      	ldr	r3, [r7, #0]
    b984:	689b      	ldr	r3, [r3, #8]
    b986:	4619      	mov	r1, r3
    b988:	68f8      	ldr	r0, [r7, #12]
    b98a:	4b13      	ldr	r3, [pc, #76]	; (b9d8 <_qspi_sync_command_set_ifr+0x74>)
    b98c:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    b98e:	683b      	ldr	r3, [r7, #0]
    b990:	781b      	ldrb	r3, [r3, #0]
    b992:	f003 0310 	and.w	r3, r3, #16
    b996:	b2db      	uxtb	r3, r3
    b998:	2b00      	cmp	r3, #0
    b99a:	d005      	beq.n	b9a8 <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    b99c:	683b      	ldr	r3, [r7, #0]
    b99e:	791b      	ldrb	r3, [r3, #4]
    b9a0:	4619      	mov	r1, r3
    b9a2:	68f8      	ldr	r0, [r7, #12]
    b9a4:	4b0d      	ldr	r3, [pc, #52]	; (b9dc <_qspi_sync_command_set_ifr+0x78>)
    b9a6:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    b9a8:	683b      	ldr	r3, [r7, #0]
    b9aa:	781b      	ldrb	r3, [r3, #0]
    b9ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b9b0:	b2db      	uxtb	r3, r3
    b9b2:	2b00      	cmp	r3, #0
    b9b4:	d005      	beq.n	b9c2 <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    b9b6:	683b      	ldr	r3, [r7, #0]
    b9b8:	795b      	ldrb	r3, [r3, #5]
    b9ba:	4619      	mov	r1, r3
    b9bc:	68f8      	ldr	r0, [r7, #12]
    b9be:	4b08      	ldr	r3, [pc, #32]	; (b9e0 <_qspi_sync_command_set_ifr+0x7c>)
    b9c0:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    b9c2:	683b      	ldr	r3, [r7, #0]
    b9c4:	681b      	ldr	r3, [r3, #0]
    b9c6:	4619      	mov	r1, r3
    b9c8:	68f8      	ldr	r0, [r7, #12]
    b9ca:	4b06      	ldr	r3, [pc, #24]	; (b9e4 <_qspi_sync_command_set_ifr+0x80>)
    b9cc:	4798      	blx	r3
}
    b9ce:	bf00      	nop
    b9d0:	3710      	adds	r7, #16
    b9d2:	46bd      	mov	sp, r7
    b9d4:	bd80      	pop	{r7, pc}
    b9d6:	bf00      	nop
    b9d8:	0000b799 	.word	0x0000b799
    b9dc:	0000b7b5 	.word	0x0000b7b5
    b9e0:	0000b7e9 	.word	0x0000b7e9
    b9e4:	0000b821 	.word	0x0000b821

0000b9e8 <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    b9e8:	b580      	push	{r7, lr}
    b9ea:	b084      	sub	sp, #16
    b9ec:	af00      	add	r7, sp, #0
    b9ee:	6078      	str	r0, [r7, #4]
    b9f0:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    b9f2:	687b      	ldr	r3, [r7, #4]
    b9f4:	681b      	ldr	r3, [r3, #0]
    b9f6:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    b9f8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    b9fc:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    b9fe:	683b      	ldr	r3, [r7, #0]
    ba00:	781b      	ldrb	r3, [r3, #0]
    ba02:	f003 0320 	and.w	r3, r3, #32
    ba06:	b2db      	uxtb	r3, r3
    ba08:	2b00      	cmp	r3, #0
    ba0a:	d004      	beq.n	ba16 <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    ba0c:	683b      	ldr	r3, [r7, #0]
    ba0e:	689b      	ldr	r3, [r3, #8]
    ba10:	68fa      	ldr	r2, [r7, #12]
    ba12:	4413      	add	r3, r2
    ba14:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    ba16:	68b8      	ldr	r0, [r7, #8]
    ba18:	4b18      	ldr	r3, [pc, #96]	; (ba7c <_qspi_sync_run_transfer+0x94>)
    ba1a:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    ba1c:	683b      	ldr	r3, [r7, #0]
    ba1e:	691b      	ldr	r3, [r3, #16]
    ba20:	2b00      	cmp	r3, #0
    ba22:	d103      	bne.n	ba2c <_qspi_sync_run_transfer+0x44>
    ba24:	683b      	ldr	r3, [r7, #0]
    ba26:	695b      	ldr	r3, [r3, #20]
    ba28:	2b00      	cmp	r3, #0
    ba2a:	d001      	beq.n	ba30 <_qspi_sync_run_transfer+0x48>
    ba2c:	2301      	movs	r3, #1
    ba2e:	e000      	b.n	ba32 <_qspi_sync_run_transfer+0x4a>
    ba30:	2300      	movs	r3, #0
    ba32:	f003 0301 	and.w	r3, r3, #1
    ba36:	b2db      	uxtb	r3, r3
    ba38:	2282      	movs	r2, #130	; 0x82
    ba3a:	4911      	ldr	r1, [pc, #68]	; (ba80 <_qspi_sync_run_transfer+0x98>)
    ba3c:	4618      	mov	r0, r3
    ba3e:	4b11      	ldr	r3, [pc, #68]	; (ba84 <_qspi_sync_run_transfer+0x9c>)
    ba40:	4798      	blx	r3

	if (cmd->tx_buf) {
    ba42:	683b      	ldr	r3, [r7, #0]
    ba44:	691b      	ldr	r3, [r3, #16]
    ba46:	2b00      	cmp	r3, #0
    ba48:	d008      	beq.n	ba5c <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    ba4a:	683b      	ldr	r3, [r7, #0]
    ba4c:	6919      	ldr	r1, [r3, #16]
    ba4e:	683b      	ldr	r3, [r7, #0]
    ba50:	68db      	ldr	r3, [r3, #12]
    ba52:	461a      	mov	r2, r3
    ba54:	68f8      	ldr	r0, [r7, #12]
    ba56:	4b0c      	ldr	r3, [pc, #48]	; (ba88 <_qspi_sync_run_transfer+0xa0>)
    ba58:	4798      	blx	r3
    ba5a:	e007      	b.n	ba6c <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    ba5c:	683b      	ldr	r3, [r7, #0]
    ba5e:	6958      	ldr	r0, [r3, #20]
    ba60:	683b      	ldr	r3, [r7, #0]
    ba62:	68db      	ldr	r3, [r3, #12]
    ba64:	461a      	mov	r2, r3
    ba66:	68f9      	ldr	r1, [r7, #12]
    ba68:	4b07      	ldr	r3, [pc, #28]	; (ba88 <_qspi_sync_run_transfer+0xa0>)
    ba6a:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    ba6c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    ba70:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    ba74:	bf00      	nop
    ba76:	3710      	adds	r7, #16
    ba78:	46bd      	mov	sp, r7
    ba7a:	bd80      	pop	{r7, pc}
    ba7c:	0000b83d 	.word	0x0000b83d
    ba80:	00013fcc 	.word	0x00013fcc
    ba84:	000094ed 	.word	0x000094ed
    ba88:	0000b855 	.word	0x0000b855

0000ba8c <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    ba8c:	b580      	push	{r7, lr}
    ba8e:	b082      	sub	sp, #8
    ba90:	af00      	add	r7, sp, #0
    ba92:	6078      	str	r0, [r7, #4]
    ba94:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    ba96:	6839      	ldr	r1, [r7, #0]
    ba98:	6878      	ldr	r0, [r7, #4]
    ba9a:	4b14      	ldr	r3, [pc, #80]	; (baec <_qspi_sync_serial_run_command+0x60>)
    ba9c:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    ba9e:	683b      	ldr	r3, [r7, #0]
    baa0:	781b      	ldrb	r3, [r3, #0]
    baa2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    baa6:	b2db      	uxtb	r3, r3
    baa8:	2b00      	cmp	r3, #0
    baaa:	d003      	beq.n	bab4 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    baac:	6839      	ldr	r1, [r7, #0]
    baae:	6878      	ldr	r0, [r7, #4]
    bab0:	4b0f      	ldr	r3, [pc, #60]	; (baf0 <_qspi_sync_serial_run_command+0x64>)
    bab2:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    bab4:	687b      	ldr	r3, [r7, #4]
    bab6:	681b      	ldr	r3, [r3, #0]
    bab8:	4618      	mov	r0, r3
    baba:	4b0e      	ldr	r3, [pc, #56]	; (baf4 <_qspi_sync_serial_run_command+0x68>)
    babc:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    babe:	bf00      	nop
    bac0:	687b      	ldr	r3, [r7, #4]
    bac2:	681b      	ldr	r3, [r3, #0]
    bac4:	4618      	mov	r0, r3
    bac6:	4b0c      	ldr	r3, [pc, #48]	; (baf8 <_qspi_sync_serial_run_command+0x6c>)
    bac8:	4798      	blx	r3
    baca:	4603      	mov	r3, r0
    bacc:	f083 0301 	eor.w	r3, r3, #1
    bad0:	b2db      	uxtb	r3, r3
    bad2:	2b00      	cmp	r3, #0
    bad4:	d1f4      	bne.n	bac0 <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    bad6:	687b      	ldr	r3, [r7, #4]
    bad8:	681b      	ldr	r3, [r3, #0]
    bada:	4618      	mov	r0, r3
    badc:	4b07      	ldr	r3, [pc, #28]	; (bafc <_qspi_sync_serial_run_command+0x70>)
    bade:	4798      	blx	r3
	return ERR_NONE;
    bae0:	2300      	movs	r3, #0
}
    bae2:	4618      	mov	r0, r3
    bae4:	3708      	adds	r7, #8
    bae6:	46bd      	mov	sp, r7
    bae8:	bd80      	pop	{r7, pc}
    baea:	bf00      	nop
    baec:	0000b965 	.word	0x0000b965
    baf0:	0000b9e9 	.word	0x0000b9e9
    baf4:	0000b889 	.word	0x0000b889
    baf8:	0000b701 	.word	0x0000b701
    bafc:	0000b729 	.word	0x0000b729

0000bb00 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    bb00:	b480      	push	{r7}
    bb02:	b083      	sub	sp, #12
    bb04:	af00      	add	r7, sp, #0
    bb06:	6078      	str	r0, [r7, #4]
    bb08:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    bb0a:	bf00      	nop
    bb0c:	687b      	ldr	r3, [r7, #4]
    bb0e:	691a      	ldr	r2, [r3, #16]
    bb10:	683b      	ldr	r3, [r7, #0]
    bb12:	4013      	ands	r3, r2
    bb14:	2b00      	cmp	r3, #0
    bb16:	d1f9      	bne.n	bb0c <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    bb18:	bf00      	nop
    bb1a:	370c      	adds	r7, #12
    bb1c:	46bd      	mov	sp, r7
    bb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb22:	4770      	bx	lr

0000bb24 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    bb24:	b480      	push	{r7}
    bb26:	b083      	sub	sp, #12
    bb28:	af00      	add	r7, sp, #0
    bb2a:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    bb2c:	687b      	ldr	r3, [r7, #4]
    bb2e:	f44f 7280 	mov.w	r2, #256	; 0x100
    bb32:	819a      	strh	r2, [r3, #12]
}
    bb34:	bf00      	nop
    bb36:	370c      	adds	r7, #12
    bb38:	46bd      	mov	sp, r7
    bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb3e:	4770      	bx	lr

0000bb40 <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    bb40:	b480      	push	{r7}
    bb42:	b083      	sub	sp, #12
    bb44:	af00      	add	r7, sp, #0
    bb46:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    bb48:	687b      	ldr	r3, [r7, #4]
    bb4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    bb4e:	819a      	strh	r2, [r3, #12]
}
    bb50:	bf00      	nop
    bb52:	370c      	adds	r7, #12
    bb54:	46bd      	mov	sp, r7
    bb56:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb5a:	4770      	bx	lr

0000bb5c <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    bb5c:	b480      	push	{r7}
    bb5e:	b083      	sub	sp, #12
    bb60:	af00      	add	r7, sp, #0
    bb62:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    bb64:	687b      	ldr	r3, [r7, #4]
    bb66:	899b      	ldrh	r3, [r3, #12]
    bb68:	b29b      	uxth	r3, r3
}
    bb6a:	4618      	mov	r0, r3
    bb6c:	370c      	adds	r7, #12
    bb6e:	46bd      	mov	sp, r7
    bb70:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb74:	4770      	bx	lr

0000bb76 <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    bb76:	b480      	push	{r7}
    bb78:	b083      	sub	sp, #12
    bb7a:	af00      	add	r7, sp, #0
    bb7c:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    bb7e:	687b      	ldr	r3, [r7, #4]
    bb80:	895b      	ldrh	r3, [r3, #10]
    bb82:	b29b      	uxth	r3, r3
}
    bb84:	4618      	mov	r0, r3
    bb86:	370c      	adds	r7, #12
    bb88:	46bd      	mov	sp, r7
    bb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb8e:	4770      	bx	lr

0000bb90 <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    bb90:	b580      	push	{r7, lr}
    bb92:	b082      	sub	sp, #8
    bb94:	af00      	add	r7, sp, #0
    bb96:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    bb98:	687b      	ldr	r3, [r7, #4]
    bb9a:	881b      	ldrh	r3, [r3, #0]
    bb9c:	b29b      	uxth	r3, r3
    bb9e:	f043 0301 	orr.w	r3, r3, #1
    bba2:	b29a      	uxth	r2, r3
    bba4:	687b      	ldr	r3, [r7, #4]
    bba6:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    bba8:	2101      	movs	r1, #1
    bbaa:	6878      	ldr	r0, [r7, #4]
    bbac:	4b02      	ldr	r3, [pc, #8]	; (bbb8 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    bbae:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    bbb0:	bf00      	nop
    bbb2:	3708      	adds	r7, #8
    bbb4:	46bd      	mov	sp, r7
    bbb6:	bd80      	pop	{r7, pc}
    bbb8:	0000bb01 	.word	0x0000bb01

0000bbbc <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    bbbc:	b580      	push	{r7, lr}
    bbbe:	b084      	sub	sp, #16
    bbc0:	af00      	add	r7, sp, #0
    bbc2:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    bbc4:	f248 0103 	movw	r1, #32771	; 0x8003
    bbc8:	6878      	ldr	r0, [r7, #4]
    bbca:	4b0a      	ldr	r3, [pc, #40]	; (bbf4 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    bbcc:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    bbce:	687b      	ldr	r3, [r7, #4]
    bbd0:	881b      	ldrh	r3, [r3, #0]
    bbd2:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    bbd4:	89fb      	ldrh	r3, [r7, #14]
    bbd6:	085b      	lsrs	r3, r3, #1
    bbd8:	b29b      	uxth	r3, r3
    bbda:	f003 0301 	and.w	r3, r3, #1
    bbde:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    bbe0:	89fb      	ldrh	r3, [r7, #14]
    bbe2:	2b00      	cmp	r3, #0
    bbe4:	bf14      	ite	ne
    bbe6:	2301      	movne	r3, #1
    bbe8:	2300      	moveq	r3, #0
    bbea:	b2db      	uxtb	r3, r3
}
    bbec:	4618      	mov	r0, r3
    bbee:	3710      	adds	r7, #16
    bbf0:	46bd      	mov	sp, r7
    bbf2:	bd80      	pop	{r7, pc}
    bbf4:	0000bb01 	.word	0x0000bb01

0000bbf8 <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    bbf8:	b580      	push	{r7, lr}
    bbfa:	b082      	sub	sp, #8
    bbfc:	af00      	add	r7, sp, #0
    bbfe:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    bc00:	687b      	ldr	r3, [r7, #4]
    bc02:	881b      	ldrh	r3, [r3, #0]
    bc04:	b29b      	uxth	r3, r3
    bc06:	f023 0302 	bic.w	r3, r3, #2
    bc0a:	b29a      	uxth	r2, r3
    bc0c:	687b      	ldr	r3, [r7, #4]
    bc0e:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    bc10:	f248 0103 	movw	r1, #32771	; 0x8003
    bc14:	6878      	ldr	r0, [r7, #4]
    bc16:	4b03      	ldr	r3, [pc, #12]	; (bc24 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    bc18:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    bc1a:	bf00      	nop
    bc1c:	3708      	adds	r7, #8
    bc1e:	46bd      	mov	sp, r7
    bc20:	bd80      	pop	{r7, pc}
    bc22:	bf00      	nop
    bc24:	0000bb01 	.word	0x0000bb01

0000bc28 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    bc28:	b580      	push	{r7, lr}
    bc2a:	b082      	sub	sp, #8
    bc2c:	af00      	add	r7, sp, #0
    bc2e:	6078      	str	r0, [r7, #4]
    bc30:	460b      	mov	r3, r1
    bc32:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    bc34:	687b      	ldr	r3, [r7, #4]
    bc36:	887a      	ldrh	r2, [r7, #2]
    bc38:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    bc3a:	f248 0103 	movw	r1, #32771	; 0x8003
    bc3e:	6878      	ldr	r0, [r7, #4]
    bc40:	4b02      	ldr	r3, [pc, #8]	; (bc4c <hri_rtcmode0_write_CTRLA_reg+0x24>)
    bc42:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    bc44:	bf00      	nop
    bc46:	3708      	adds	r7, #8
    bc48:	46bd      	mov	sp, r7
    bc4a:	bd80      	pop	{r7, pc}
    bc4c:	0000bb01 	.word	0x0000bb01

0000bc50 <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    bc50:	b480      	push	{r7}
    bc52:	b083      	sub	sp, #12
    bc54:	af00      	add	r7, sp, #0
    bc56:	6078      	str	r0, [r7, #4]
    bc58:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    bc5a:	687b      	ldr	r3, [r7, #4]
    bc5c:	683a      	ldr	r2, [r7, #0]
    bc5e:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    bc60:	bf00      	nop
    bc62:	370c      	adds	r7, #12
    bc64:	46bd      	mov	sp, r7
    bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
    bc6a:	4770      	bx	lr

0000bc6c <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    bc6c:	b580      	push	{r7, lr}
    bc6e:	b082      	sub	sp, #8
    bc70:	af00      	add	r7, sp, #0
    bc72:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    bc74:	687b      	ldr	r3, [r7, #4]
    bc76:	2b00      	cmp	r3, #0
    bc78:	d005      	beq.n	bc86 <_calendar_init+0x1a>
    bc7a:	687b      	ldr	r3, [r7, #4]
    bc7c:	681b      	ldr	r3, [r3, #0]
    bc7e:	2b00      	cmp	r3, #0
    bc80:	d001      	beq.n	bc86 <_calendar_init+0x1a>
    bc82:	2301      	movs	r3, #1
    bc84:	e000      	b.n	bc88 <_calendar_init+0x1c>
    bc86:	2300      	movs	r3, #0
    bc88:	f003 0301 	and.w	r3, r3, #1
    bc8c:	b2db      	uxtb	r3, r3
    bc8e:	222f      	movs	r2, #47	; 0x2f
    bc90:	491e      	ldr	r1, [pc, #120]	; (bd0c <_calendar_init+0xa0>)
    bc92:	4618      	mov	r0, r3
    bc94:	4b1e      	ldr	r3, [pc, #120]	; (bd10 <_calendar_init+0xa4>)
    bc96:	4798      	blx	r3

	_rtc_dev = dev;
    bc98:	4a1e      	ldr	r2, [pc, #120]	; (bd14 <_calendar_init+0xa8>)
    bc9a:	687b      	ldr	r3, [r7, #4]
    bc9c:	6013      	str	r3, [r2, #0]

	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    bc9e:	687b      	ldr	r3, [r7, #4]
    bca0:	681b      	ldr	r3, [r3, #0]
    bca2:	2101      	movs	r1, #1
    bca4:	4618      	mov	r0, r3
    bca6:	4b1c      	ldr	r3, [pc, #112]	; (bd18 <_calendar_init+0xac>)
    bca8:	4798      	blx	r3
	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    bcaa:	687b      	ldr	r3, [r7, #4]
    bcac:	681b      	ldr	r3, [r3, #0]
    bcae:	4618      	mov	r0, r3
    bcb0:	4b1a      	ldr	r3, [pc, #104]	; (bd1c <_calendar_init+0xb0>)
    bcb2:	4798      	blx	r3
    bcb4:	4603      	mov	r3, r0
    bcb6:	2b00      	cmp	r3, #0
    bcb8:	d00a      	beq.n	bcd0 <_calendar_init+0x64>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    bcba:	687b      	ldr	r3, [r7, #4]
    bcbc:	681b      	ldr	r3, [r3, #0]
    bcbe:	4618      	mov	r0, r3
    bcc0:	4b17      	ldr	r3, [pc, #92]	; (bd20 <_calendar_init+0xb4>)
    bcc2:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    bcc4:	687b      	ldr	r3, [r7, #4]
    bcc6:	681b      	ldr	r3, [r3, #0]
    bcc8:	2102      	movs	r1, #2
    bcca:	4618      	mov	r0, r3
    bccc:	4b12      	ldr	r3, [pc, #72]	; (bd18 <_calendar_init+0xac>)
    bcce:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    bcd0:	687b      	ldr	r3, [r7, #4]
    bcd2:	681b      	ldr	r3, [r3, #0]
    bcd4:	4618      	mov	r0, r3
    bcd6:	4b13      	ldr	r3, [pc, #76]	; (bd24 <_calendar_init+0xb8>)
    bcd8:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    bcda:	687b      	ldr	r3, [r7, #4]
    bcdc:	681b      	ldr	r3, [r3, #0]
    bcde:	2101      	movs	r1, #1
    bce0:	4618      	mov	r0, r3
    bce2:	4b0d      	ldr	r3, [pc, #52]	; (bd18 <_calendar_init+0xac>)
    bce4:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    bce6:	687b      	ldr	r3, [r7, #4]
    bce8:	681b      	ldr	r3, [r3, #0]
    bcea:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    bcee:	4618      	mov	r0, r3
    bcf0:	4b0d      	ldr	r3, [pc, #52]	; (bd28 <_calendar_init+0xbc>)
    bcf2:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    bcf4:	687b      	ldr	r3, [r7, #4]
    bcf6:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    bcf8:	2100      	movs	r1, #0
    bcfa:	4618      	mov	r0, r3
    bcfc:	4b0b      	ldr	r3, [pc, #44]	; (bd2c <_calendar_init+0xc0>)
    bcfe:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    bd00:	2300      	movs	r3, #0
}
    bd02:	4618      	mov	r0, r3
    bd04:	3708      	adds	r7, #8
    bd06:	46bd      	mov	sp, r7
    bd08:	bd80      	pop	{r7, pc}
    bd0a:	bf00      	nop
    bd0c:	00013fe4 	.word	0x00013fe4
    bd10:	000094ed 	.word	0x000094ed
    bd14:	20001590 	.word	0x20001590
    bd18:	0000bb01 	.word	0x0000bb01
    bd1c:	0000bbbd 	.word	0x0000bbbd
    bd20:	0000bbf9 	.word	0x0000bbf9
    bd24:	0000bb91 	.word	0x0000bb91
    bd28:	0000bc29 	.word	0x0000bc29
    bd2c:	0000bc51 	.word	0x0000bc51

0000bd30 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    bd30:	b580      	push	{r7, lr}
    bd32:	b084      	sub	sp, #16
    bd34:	af00      	add	r7, sp, #0
    bd36:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    bd38:	687b      	ldr	r3, [r7, #4]
    bd3a:	681b      	ldr	r3, [r3, #0]
    bd3c:	4618      	mov	r0, r3
    bd3e:	4b19      	ldr	r3, [pc, #100]	; (bda4 <_rtc_interrupt_handler+0x74>)
    bd40:	4798      	blx	r3
    bd42:	4603      	mov	r3, r0
    bd44:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    bd46:	687b      	ldr	r3, [r7, #4]
    bd48:	681b      	ldr	r3, [r3, #0]
    bd4a:	4618      	mov	r0, r3
    bd4c:	4b16      	ldr	r3, [pc, #88]	; (bda8 <_rtc_interrupt_handler+0x78>)
    bd4e:	4798      	blx	r3
    bd50:	4603      	mov	r3, r0
    bd52:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    bd54:	89fa      	ldrh	r2, [r7, #14]
    bd56:	89bb      	ldrh	r3, [r7, #12]
    bd58:	4013      	ands	r3, r2
    bd5a:	b29b      	uxth	r3, r3
    bd5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    bd60:	2b00      	cmp	r3, #0
    bd62:	d009      	beq.n	bd78 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    bd64:	687b      	ldr	r3, [r7, #4]
    bd66:	685b      	ldr	r3, [r3, #4]
    bd68:	6878      	ldr	r0, [r7, #4]
    bd6a:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    bd6c:	687b      	ldr	r3, [r7, #4]
    bd6e:	681b      	ldr	r3, [r3, #0]
    bd70:	4618      	mov	r0, r3
    bd72:	4b0e      	ldr	r3, [pc, #56]	; (bdac <_rtc_interrupt_handler+0x7c>)
    bd74:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    bd76:	e010      	b.n	bd9a <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    bd78:	89fa      	ldrh	r2, [r7, #14]
    bd7a:	89bb      	ldrh	r3, [r7, #12]
    bd7c:	4013      	ands	r3, r2
    bd7e:	b29b      	uxth	r3, r3
    bd80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    bd84:	2b00      	cmp	r3, #0
    bd86:	d008      	beq.n	bd9a <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    bd88:	687b      	ldr	r3, [r7, #4]
    bd8a:	689b      	ldr	r3, [r3, #8]
    bd8c:	6878      	ldr	r0, [r7, #4]
    bd8e:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    bd90:	687b      	ldr	r3, [r7, #4]
    bd92:	681b      	ldr	r3, [r3, #0]
    bd94:	4618      	mov	r0, r3
    bd96:	4b06      	ldr	r3, [pc, #24]	; (bdb0 <_rtc_interrupt_handler+0x80>)
    bd98:	4798      	blx	r3
}
    bd9a:	bf00      	nop
    bd9c:	3710      	adds	r7, #16
    bd9e:	46bd      	mov	sp, r7
    bda0:	bd80      	pop	{r7, pc}
    bda2:	bf00      	nop
    bda4:	0000bb5d 	.word	0x0000bb5d
    bda8:	0000bb77 	.word	0x0000bb77
    bdac:	0000bb25 	.word	0x0000bb25
    bdb0:	0000bb41 	.word	0x0000bb41

0000bdb4 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    bdb4:	b580      	push	{r7, lr}
    bdb6:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    bdb8:	4b03      	ldr	r3, [pc, #12]	; (bdc8 <RTC_Handler+0x14>)
    bdba:	681b      	ldr	r3, [r3, #0]
    bdbc:	4618      	mov	r0, r3
    bdbe:	4b03      	ldr	r3, [pc, #12]	; (bdcc <RTC_Handler+0x18>)
    bdc0:	4798      	blx	r3
}
    bdc2:	bf00      	nop
    bdc4:	bd80      	pop	{r7, pc}
    bdc6:	bf00      	nop
    bdc8:	20001590 	.word	0x20001590
    bdcc:	0000bd31 	.word	0x0000bd31

0000bdd0 <__NVIC_EnableIRQ>:
{
    bdd0:	b480      	push	{r7}
    bdd2:	b083      	sub	sp, #12
    bdd4:	af00      	add	r7, sp, #0
    bdd6:	4603      	mov	r3, r0
    bdd8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    bdda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    bdde:	2b00      	cmp	r3, #0
    bde0:	db0b      	blt.n	bdfa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    bde2:	4909      	ldr	r1, [pc, #36]	; (be08 <__NVIC_EnableIRQ+0x38>)
    bde4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    bde8:	095b      	lsrs	r3, r3, #5
    bdea:	88fa      	ldrh	r2, [r7, #6]
    bdec:	f002 021f 	and.w	r2, r2, #31
    bdf0:	2001      	movs	r0, #1
    bdf2:	fa00 f202 	lsl.w	r2, r0, r2
    bdf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bdfa:	bf00      	nop
    bdfc:	370c      	adds	r7, #12
    bdfe:	46bd      	mov	sp, r7
    be00:	f85d 7b04 	ldr.w	r7, [sp], #4
    be04:	4770      	bx	lr
    be06:	bf00      	nop
    be08:	e000e100 	.word	0xe000e100

0000be0c <__NVIC_DisableIRQ>:
{
    be0c:	b480      	push	{r7}
    be0e:	b083      	sub	sp, #12
    be10:	af00      	add	r7, sp, #0
    be12:	4603      	mov	r3, r0
    be14:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    be16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    be1a:	2b00      	cmp	r3, #0
    be1c:	db10      	blt.n	be40 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    be1e:	490b      	ldr	r1, [pc, #44]	; (be4c <__NVIC_DisableIRQ+0x40>)
    be20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    be24:	095b      	lsrs	r3, r3, #5
    be26:	88fa      	ldrh	r2, [r7, #6]
    be28:	f002 021f 	and.w	r2, r2, #31
    be2c:	2001      	movs	r0, #1
    be2e:	fa00 f202 	lsl.w	r2, r0, r2
    be32:	3320      	adds	r3, #32
    be34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    be38:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    be3c:	f3bf 8f6f 	isb	sy
}
    be40:	bf00      	nop
    be42:	370c      	adds	r7, #12
    be44:	46bd      	mov	sp, r7
    be46:	f85d 7b04 	ldr.w	r7, [sp], #4
    be4a:	4770      	bx	lr
    be4c:	e000e100 	.word	0xe000e100

0000be50 <__NVIC_ClearPendingIRQ>:
{
    be50:	b480      	push	{r7}
    be52:	b083      	sub	sp, #12
    be54:	af00      	add	r7, sp, #0
    be56:	4603      	mov	r3, r0
    be58:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    be5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    be5e:	2b00      	cmp	r3, #0
    be60:	db0c      	blt.n	be7c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    be62:	4909      	ldr	r1, [pc, #36]	; (be88 <__NVIC_ClearPendingIRQ+0x38>)
    be64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    be68:	095b      	lsrs	r3, r3, #5
    be6a:	88fa      	ldrh	r2, [r7, #6]
    be6c:	f002 021f 	and.w	r2, r2, #31
    be70:	2001      	movs	r0, #1
    be72:	fa00 f202 	lsl.w	r2, r0, r2
    be76:	3360      	adds	r3, #96	; 0x60
    be78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    be7c:	bf00      	nop
    be7e:	370c      	adds	r7, #12
    be80:	46bd      	mov	sp, r7
    be82:	f85d 7b04 	ldr.w	r7, [sp], #4
    be86:	4770      	bx	lr
    be88:	e000e100 	.word	0xe000e100

0000be8c <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    be8c:	b480      	push	{r7}
    be8e:	b083      	sub	sp, #12
    be90:	af00      	add	r7, sp, #0
    be92:	6078      	str	r0, [r7, #4]
    be94:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    be96:	bf00      	nop
    be98:	687b      	ldr	r3, [r7, #4]
    be9a:	69da      	ldr	r2, [r3, #28]
    be9c:	683b      	ldr	r3, [r7, #0]
    be9e:	4013      	ands	r3, r2
    bea0:	2b00      	cmp	r3, #0
    bea2:	d1f9      	bne.n	be98 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    bea4:	bf00      	nop
    bea6:	370c      	adds	r7, #12
    bea8:	46bd      	mov	sp, r7
    beaa:	f85d 7b04 	ldr.w	r7, [sp], #4
    beae:	4770      	bx	lr

0000beb0 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    beb0:	b480      	push	{r7}
    beb2:	b083      	sub	sp, #12
    beb4:	af00      	add	r7, sp, #0
    beb6:	6078      	str	r0, [r7, #4]
    beb8:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    beba:	687b      	ldr	r3, [r7, #4]
    bebc:	69da      	ldr	r2, [r3, #28]
    bebe:	683b      	ldr	r3, [r7, #0]
    bec0:	4013      	ands	r3, r2
    bec2:	2b00      	cmp	r3, #0
    bec4:	bf14      	ite	ne
    bec6:	2301      	movne	r3, #1
    bec8:	2300      	moveq	r3, #0
    beca:	b2db      	uxtb	r3, r3
}
    becc:	4618      	mov	r0, r3
    bece:	370c      	adds	r7, #12
    bed0:	46bd      	mov	sp, r7
    bed2:	f85d 7b04 	ldr.w	r7, [sp], #4
    bed6:	4770      	bx	lr

0000bed8 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    bed8:	b480      	push	{r7}
    beda:	b083      	sub	sp, #12
    bedc:	af00      	add	r7, sp, #0
    bede:	6078      	str	r0, [r7, #4]
    bee0:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    bee2:	bf00      	nop
    bee4:	687b      	ldr	r3, [r7, #4]
    bee6:	69da      	ldr	r2, [r3, #28]
    bee8:	683b      	ldr	r3, [r7, #0]
    beea:	4013      	ands	r3, r2
    beec:	2b00      	cmp	r3, #0
    beee:	d1f9      	bne.n	bee4 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    bef0:	bf00      	nop
    bef2:	370c      	adds	r7, #12
    bef4:	46bd      	mov	sp, r7
    bef6:	f85d 7b04 	ldr.w	r7, [sp], #4
    befa:	4770      	bx	lr

0000befc <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    befc:	b480      	push	{r7}
    befe:	b083      	sub	sp, #12
    bf00:	af00      	add	r7, sp, #0
    bf02:	6078      	str	r0, [r7, #4]
    bf04:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    bf06:	687b      	ldr	r3, [r7, #4]
    bf08:	69da      	ldr	r2, [r3, #28]
    bf0a:	683b      	ldr	r3, [r7, #0]
    bf0c:	4013      	ands	r3, r2
    bf0e:	2b00      	cmp	r3, #0
    bf10:	bf14      	ite	ne
    bf12:	2301      	movne	r3, #1
    bf14:	2300      	moveq	r3, #0
    bf16:	b2db      	uxtb	r3, r3
}
    bf18:	4618      	mov	r0, r3
    bf1a:	370c      	adds	r7, #12
    bf1c:	46bd      	mov	sp, r7
    bf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    bf22:	4770      	bx	lr

0000bf24 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    bf24:	b480      	push	{r7}
    bf26:	b083      	sub	sp, #12
    bf28:	af00      	add	r7, sp, #0
    bf2a:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    bf2c:	687b      	ldr	r3, [r7, #4]
    bf2e:	2201      	movs	r2, #1
    bf30:	761a      	strb	r2, [r3, #24]
}
    bf32:	bf00      	nop
    bf34:	370c      	adds	r7, #12
    bf36:	46bd      	mov	sp, r7
    bf38:	f85d 7b04 	ldr.w	r7, [sp], #4
    bf3c:	4770      	bx	lr

0000bf3e <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    bf3e:	b480      	push	{r7}
    bf40:	b083      	sub	sp, #12
    bf42:	af00      	add	r7, sp, #0
    bf44:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    bf46:	687b      	ldr	r3, [r7, #4]
    bf48:	2202      	movs	r2, #2
    bf4a:	761a      	strb	r2, [r3, #24]
}
    bf4c:	bf00      	nop
    bf4e:	370c      	adds	r7, #12
    bf50:	46bd      	mov	sp, r7
    bf52:	f85d 7b04 	ldr.w	r7, [sp], #4
    bf56:	4770      	bx	lr

0000bf58 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    bf58:	b480      	push	{r7}
    bf5a:	b083      	sub	sp, #12
    bf5c:	af00      	add	r7, sp, #0
    bf5e:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    bf60:	687b      	ldr	r3, [r7, #4]
    bf62:	7e1b      	ldrb	r3, [r3, #24]
    bf64:	b2db      	uxtb	r3, r3
}
    bf66:	4618      	mov	r0, r3
    bf68:	370c      	adds	r7, #12
    bf6a:	46bd      	mov	sp, r7
    bf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    bf70:	4770      	bx	lr

0000bf72 <hri_sercomi2cm_clear_INTFLAG_reg>:

static inline void hri_sercomi2cm_clear_INTFLAG_reg(const void *const hw, hri_sercomi2cm_intflag_reg_t mask)
{
    bf72:	b480      	push	{r7}
    bf74:	b083      	sub	sp, #12
    bf76:	af00      	add	r7, sp, #0
    bf78:	6078      	str	r0, [r7, #4]
    bf7a:	460b      	mov	r3, r1
    bf7c:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->I2CM.INTFLAG.reg = mask;
    bf7e:	687b      	ldr	r3, [r7, #4]
    bf80:	78fa      	ldrb	r2, [r7, #3]
    bf82:	761a      	strb	r2, [r3, #24]
}
    bf84:	bf00      	nop
    bf86:	370c      	adds	r7, #12
    bf88:	46bd      	mov	sp, r7
    bf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    bf8e:	4770      	bx	lr

0000bf90 <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    bf90:	b480      	push	{r7}
    bf92:	b085      	sub	sp, #20
    bf94:	af00      	add	r7, sp, #0
    bf96:	6078      	str	r0, [r7, #4]
    bf98:	460b      	mov	r3, r1
    bf9a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    bf9c:	687b      	ldr	r3, [r7, #4]
    bf9e:	7e1b      	ldrb	r3, [r3, #24]
    bfa0:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    bfa2:	7bfa      	ldrb	r2, [r7, #15]
    bfa4:	78fb      	ldrb	r3, [r7, #3]
    bfa6:	4013      	ands	r3, r2
    bfa8:	73fb      	strb	r3, [r7, #15]
	return tmp;
    bfaa:	7bfb      	ldrb	r3, [r7, #15]
}
    bfac:	4618      	mov	r0, r3
    bfae:	3714      	adds	r7, #20
    bfb0:	46bd      	mov	sp, r7
    bfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
    bfb6:	4770      	bx	lr

0000bfb8 <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    bfb8:	b480      	push	{r7}
    bfba:	b083      	sub	sp, #12
    bfbc:	af00      	add	r7, sp, #0
    bfbe:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    bfc0:	687b      	ldr	r3, [r7, #4]
    bfc2:	7e1b      	ldrb	r3, [r3, #24]
    bfc4:	b2db      	uxtb	r3, r3
}
    bfc6:	4618      	mov	r0, r3
    bfc8:	370c      	adds	r7, #12
    bfca:	46bd      	mov	sp, r7
    bfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    bfd0:	4770      	bx	lr

0000bfd2 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    bfd2:	b480      	push	{r7}
    bfd4:	b083      	sub	sp, #12
    bfd6:	af00      	add	r7, sp, #0
    bfd8:	6078      	str	r0, [r7, #4]
    bfda:	460b      	mov	r3, r1
    bfdc:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    bfde:	687b      	ldr	r3, [r7, #4]
    bfe0:	78fa      	ldrb	r2, [r7, #3]
    bfe2:	761a      	strb	r2, [r3, #24]
}
    bfe4:	bf00      	nop
    bfe6:	370c      	adds	r7, #12
    bfe8:	46bd      	mov	sp, r7
    bfea:	f85d 7b04 	ldr.w	r7, [sp], #4
    bfee:	4770      	bx	lr

0000bff0 <hri_sercomspi_set_INTEN_DRE_bit>:
{
	((Sercom *)hw)->I2CS.INTENCLR.reg = mask;
}

static inline void hri_sercomspi_set_INTEN_DRE_bit(const void *const hw)
{
    bff0:	b480      	push	{r7}
    bff2:	b083      	sub	sp, #12
    bff4:	af00      	add	r7, sp, #0
    bff6:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    bff8:	687b      	ldr	r3, [r7, #4]
    bffa:	2201      	movs	r2, #1
    bffc:	759a      	strb	r2, [r3, #22]
}
    bffe:	bf00      	nop
    c000:	370c      	adds	r7, #12
    c002:	46bd      	mov	sp, r7
    c004:	f85d 7b04 	ldr.w	r7, [sp], #4
    c008:	4770      	bx	lr

0000c00a <hri_sercomspi_clear_INTEN_DRE_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
	}
}

static inline void hri_sercomspi_clear_INTEN_DRE_bit(const void *const hw)
{
    c00a:	b480      	push	{r7}
    c00c:	b083      	sub	sp, #12
    c00e:	af00      	add	r7, sp, #0
    c010:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    c012:	687b      	ldr	r3, [r7, #4]
    c014:	2201      	movs	r2, #1
    c016:	751a      	strb	r2, [r3, #20]
}
    c018:	bf00      	nop
    c01a:	370c      	adds	r7, #12
    c01c:	46bd      	mov	sp, r7
    c01e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c022:	4770      	bx	lr

0000c024 <hri_sercomspi_set_INTEN_TXC_bit>:

static inline void hri_sercomspi_set_INTEN_TXC_bit(const void *const hw)
{
    c024:	b480      	push	{r7}
    c026:	b083      	sub	sp, #12
    c028:	af00      	add	r7, sp, #0
    c02a:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    c02c:	687b      	ldr	r3, [r7, #4]
    c02e:	2202      	movs	r2, #2
    c030:	759a      	strb	r2, [r3, #22]
}
    c032:	bf00      	nop
    c034:	370c      	adds	r7, #12
    c036:	46bd      	mov	sp, r7
    c038:	f85d 7b04 	ldr.w	r7, [sp], #4
    c03c:	4770      	bx	lr

0000c03e <hri_sercomspi_clear_INTEN_TXC_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
	}
}

static inline void hri_sercomspi_clear_INTEN_TXC_bit(const void *const hw)
{
    c03e:	b480      	push	{r7}
    c040:	b083      	sub	sp, #12
    c042:	af00      	add	r7, sp, #0
    c044:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    c046:	687b      	ldr	r3, [r7, #4]
    c048:	2202      	movs	r2, #2
    c04a:	751a      	strb	r2, [r3, #20]
}
    c04c:	bf00      	nop
    c04e:	370c      	adds	r7, #12
    c050:	46bd      	mov	sp, r7
    c052:	f85d 7b04 	ldr.w	r7, [sp], #4
    c056:	4770      	bx	lr

0000c058 <hri_sercomspi_set_INTEN_RXC_bit>:

static inline void hri_sercomspi_set_INTEN_RXC_bit(const void *const hw)
{
    c058:	b480      	push	{r7}
    c05a:	b083      	sub	sp, #12
    c05c:	af00      	add	r7, sp, #0
    c05e:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    c060:	687b      	ldr	r3, [r7, #4]
    c062:	2204      	movs	r2, #4
    c064:	759a      	strb	r2, [r3, #22]
}
    c066:	bf00      	nop
    c068:	370c      	adds	r7, #12
    c06a:	46bd      	mov	sp, r7
    c06c:	f85d 7b04 	ldr.w	r7, [sp], #4
    c070:	4770      	bx	lr

0000c072 <hri_sercomspi_clear_INTEN_RXC_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
	}
}

static inline void hri_sercomspi_clear_INTEN_RXC_bit(const void *const hw)
{
    c072:	b480      	push	{r7}
    c074:	b083      	sub	sp, #12
    c076:	af00      	add	r7, sp, #0
    c078:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    c07a:	687b      	ldr	r3, [r7, #4]
    c07c:	2204      	movs	r2, #4
    c07e:	751a      	strb	r2, [r3, #20]
}
    c080:	bf00      	nop
    c082:	370c      	adds	r7, #12
    c084:	46bd      	mov	sp, r7
    c086:	f85d 7b04 	ldr.w	r7, [sp], #4
    c08a:	4770      	bx	lr

0000c08c <hri_sercomspi_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomspi_intenset_reg_t hri_sercomspi_read_INTEN_reg(const void *const hw)
{
    c08c:	b480      	push	{r7}
    c08e:	b083      	sub	sp, #12
    c090:	af00      	add	r7, sp, #0
    c092:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    c094:	687b      	ldr	r3, [r7, #4]
    c096:	7d9b      	ldrb	r3, [r3, #22]
    c098:	b2db      	uxtb	r3, r3
}
    c09a:	4618      	mov	r0, r3
    c09c:	370c      	adds	r7, #12
    c09e:	46bd      	mov	sp, r7
    c0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    c0a4:	4770      	bx	lr
	...

0000c0a8 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    c0a8:	b580      	push	{r7, lr}
    c0aa:	b082      	sub	sp, #8
    c0ac:	af00      	add	r7, sp, #0
    c0ae:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    c0b0:	687b      	ldr	r3, [r7, #4]
    c0b2:	681b      	ldr	r3, [r3, #0]
    c0b4:	f023 0202 	bic.w	r2, r3, #2
    c0b8:	687b      	ldr	r3, [r7, #4]
    c0ba:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    c0bc:	2103      	movs	r1, #3
    c0be:	6878      	ldr	r0, [r7, #4]
    c0c0:	4b02      	ldr	r3, [pc, #8]	; (c0cc <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    c0c2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    c0c4:	bf00      	nop
    c0c6:	3708      	adds	r7, #8
    c0c8:	46bd      	mov	sp, r7
    c0ca:	bd80      	pop	{r7, pc}
    c0cc:	0000be8d 	.word	0x0000be8d

0000c0d0 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    c0d0:	b480      	push	{r7}
    c0d2:	b085      	sub	sp, #20
    c0d4:	af00      	add	r7, sp, #0
    c0d6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    c0d8:	687b      	ldr	r3, [r7, #4]
    c0da:	681b      	ldr	r3, [r3, #0]
    c0dc:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    c0de:	68fb      	ldr	r3, [r7, #12]
    c0e0:	0edb      	lsrs	r3, r3, #27
    c0e2:	f003 0301 	and.w	r3, r3, #1
    c0e6:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    c0e8:	68fb      	ldr	r3, [r7, #12]
    c0ea:	2b00      	cmp	r3, #0
    c0ec:	bf14      	ite	ne
    c0ee:	2301      	movne	r3, #1
    c0f0:	2300      	moveq	r3, #0
    c0f2:	b2db      	uxtb	r3, r3
}
    c0f4:	4618      	mov	r0, r3
    c0f6:	3714      	adds	r7, #20
    c0f8:	46bd      	mov	sp, r7
    c0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    c0fe:	4770      	bx	lr

0000c100 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    c100:	b580      	push	{r7, lr}
    c102:	b084      	sub	sp, #16
    c104:	af00      	add	r7, sp, #0
    c106:	6078      	str	r0, [r7, #4]
    c108:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    c10a:	2103      	movs	r1, #3
    c10c:	6878      	ldr	r0, [r7, #4]
    c10e:	4b07      	ldr	r3, [pc, #28]	; (c12c <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    c110:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    c112:	687b      	ldr	r3, [r7, #4]
    c114:	681b      	ldr	r3, [r3, #0]
    c116:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    c118:	68fa      	ldr	r2, [r7, #12]
    c11a:	683b      	ldr	r3, [r7, #0]
    c11c:	4013      	ands	r3, r2
    c11e:	60fb      	str	r3, [r7, #12]
	return tmp;
    c120:	68fb      	ldr	r3, [r7, #12]
}
    c122:	4618      	mov	r0, r3
    c124:	3710      	adds	r7, #16
    c126:	46bd      	mov	sp, r7
    c128:	bd80      	pop	{r7, pc}
    c12a:	bf00      	nop
    c12c:	0000be8d 	.word	0x0000be8d

0000c130 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    c130:	b580      	push	{r7, lr}
    c132:	b082      	sub	sp, #8
    c134:	af00      	add	r7, sp, #0
    c136:	6078      	str	r0, [r7, #4]
    c138:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    c13a:	687b      	ldr	r3, [r7, #4]
    c13c:	683a      	ldr	r2, [r7, #0]
    c13e:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    c140:	2103      	movs	r1, #3
    c142:	6878      	ldr	r0, [r7, #4]
    c144:	4b02      	ldr	r3, [pc, #8]	; (c150 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    c146:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    c148:	bf00      	nop
    c14a:	3708      	adds	r7, #8
    c14c:	46bd      	mov	sp, r7
    c14e:	bd80      	pop	{r7, pc}
    c150:	0000be8d 	.word	0x0000be8d

0000c154 <hri_sercomspi_get_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    c154:	b580      	push	{r7, lr}
    c156:	b084      	sub	sp, #16
    c158:	af00      	add	r7, sp, #0
    c15a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    c15c:	2103      	movs	r1, #3
    c15e:	6878      	ldr	r0, [r7, #4]
    c160:	4b09      	ldr	r3, [pc, #36]	; (c188 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    c162:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    c164:	687b      	ldr	r3, [r7, #4]
    c166:	681b      	ldr	r3, [r3, #0]
    c168:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    c16a:	68fb      	ldr	r3, [r7, #12]
    c16c:	085b      	lsrs	r3, r3, #1
    c16e:	f003 0301 	and.w	r3, r3, #1
    c172:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    c174:	68fb      	ldr	r3, [r7, #12]
    c176:	2b00      	cmp	r3, #0
    c178:	bf14      	ite	ne
    c17a:	2301      	movne	r3, #1
    c17c:	2300      	moveq	r3, #0
    c17e:	b2db      	uxtb	r3, r3
}
    c180:	4618      	mov	r0, r3
    c182:	3710      	adds	r7, #16
    c184:	46bd      	mov	sp, r7
    c186:	bd80      	pop	{r7, pc}
    c188:	0000bed9 	.word	0x0000bed9

0000c18c <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    c18c:	b580      	push	{r7, lr}
    c18e:	b082      	sub	sp, #8
    c190:	af00      	add	r7, sp, #0
    c192:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    c194:	687b      	ldr	r3, [r7, #4]
    c196:	681b      	ldr	r3, [r3, #0]
    c198:	f023 0202 	bic.w	r2, r3, #2
    c19c:	687b      	ldr	r3, [r7, #4]
    c19e:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    c1a0:	2103      	movs	r1, #3
    c1a2:	6878      	ldr	r0, [r7, #4]
    c1a4:	4b02      	ldr	r3, [pc, #8]	; (c1b0 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    c1a6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    c1a8:	bf00      	nop
    c1aa:	3708      	adds	r7, #8
    c1ac:	46bd      	mov	sp, r7
    c1ae:	bd80      	pop	{r7, pc}
    c1b0:	0000bed9 	.word	0x0000bed9

0000c1b4 <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    c1b4:	b580      	push	{r7, lr}
    c1b6:	b084      	sub	sp, #16
    c1b8:	af00      	add	r7, sp, #0
    c1ba:	6078      	str	r0, [r7, #4]
    c1bc:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    c1be:	2103      	movs	r1, #3
    c1c0:	6878      	ldr	r0, [r7, #4]
    c1c2:	4b07      	ldr	r3, [pc, #28]	; (c1e0 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    c1c4:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    c1c6:	687b      	ldr	r3, [r7, #4]
    c1c8:	681b      	ldr	r3, [r3, #0]
    c1ca:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    c1cc:	68fa      	ldr	r2, [r7, #12]
    c1ce:	683b      	ldr	r3, [r7, #0]
    c1d0:	4013      	ands	r3, r2
    c1d2:	60fb      	str	r3, [r7, #12]
	return tmp;
    c1d4:	68fb      	ldr	r3, [r7, #12]
}
    c1d6:	4618      	mov	r0, r3
    c1d8:	3710      	adds	r7, #16
    c1da:	46bd      	mov	sp, r7
    c1dc:	bd80      	pop	{r7, pc}
    c1de:	bf00      	nop
    c1e0:	0000bed9 	.word	0x0000bed9

0000c1e4 <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    c1e4:	b580      	push	{r7, lr}
    c1e6:	b082      	sub	sp, #8
    c1e8:	af00      	add	r7, sp, #0
    c1ea:	6078      	str	r0, [r7, #4]
    c1ec:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    c1ee:	687b      	ldr	r3, [r7, #4]
    c1f0:	683a      	ldr	r2, [r7, #0]
    c1f2:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    c1f4:	2103      	movs	r1, #3
    c1f6:	6878      	ldr	r0, [r7, #4]
    c1f8:	4b02      	ldr	r3, [pc, #8]	; (c204 <hri_sercomspi_write_CTRLA_reg+0x20>)
    c1fa:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    c1fc:	bf00      	nop
    c1fe:	3708      	adds	r7, #8
    c200:	46bd      	mov	sp, r7
    c202:	bd80      	pop	{r7, pc}
    c204:	0000bed9 	.word	0x0000bed9

0000c208 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    c208:	b580      	push	{r7, lr}
    c20a:	b082      	sub	sp, #8
    c20c:	af00      	add	r7, sp, #0
    c20e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    c210:	687b      	ldr	r3, [r7, #4]
    c212:	685b      	ldr	r3, [r3, #4]
    c214:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    c218:	687b      	ldr	r3, [r7, #4]
    c21a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    c21c:	2104      	movs	r1, #4
    c21e:	6878      	ldr	r0, [r7, #4]
    c220:	4b02      	ldr	r3, [pc, #8]	; (c22c <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    c222:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    c224:	bf00      	nop
    c226:	3708      	adds	r7, #8
    c228:	46bd      	mov	sp, r7
    c22a:	bd80      	pop	{r7, pc}
    c22c:	0000be8d 	.word	0x0000be8d

0000c230 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    c230:	b580      	push	{r7, lr}
    c232:	b082      	sub	sp, #8
    c234:	af00      	add	r7, sp, #0
    c236:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    c238:	687b      	ldr	r3, [r7, #4]
    c23a:	685b      	ldr	r3, [r3, #4]
    c23c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    c240:	687b      	ldr	r3, [r7, #4]
    c242:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    c244:	2104      	movs	r1, #4
    c246:	6878      	ldr	r0, [r7, #4]
    c248:	4b02      	ldr	r3, [pc, #8]	; (c254 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    c24a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    c24c:	bf00      	nop
    c24e:	3708      	adds	r7, #8
    c250:	46bd      	mov	sp, r7
    c252:	bd80      	pop	{r7, pc}
    c254:	0000be8d 	.word	0x0000be8d

0000c258 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    c258:	b580      	push	{r7, lr}
    c25a:	b082      	sub	sp, #8
    c25c:	af00      	add	r7, sp, #0
    c25e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    c260:	687b      	ldr	r3, [r7, #4]
    c262:	685b      	ldr	r3, [r3, #4]
    c264:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    c268:	687b      	ldr	r3, [r7, #4]
    c26a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    c26c:	2104      	movs	r1, #4
    c26e:	6878      	ldr	r0, [r7, #4]
    c270:	4b02      	ldr	r3, [pc, #8]	; (c27c <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    c272:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    c274:	bf00      	nop
    c276:	3708      	adds	r7, #8
    c278:	46bd      	mov	sp, r7
    c27a:	bd80      	pop	{r7, pc}
    c27c:	0000be8d 	.word	0x0000be8d

0000c280 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    c280:	b580      	push	{r7, lr}
    c282:	b082      	sub	sp, #8
    c284:	af00      	add	r7, sp, #0
    c286:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    c288:	687b      	ldr	r3, [r7, #4]
    c28a:	685b      	ldr	r3, [r3, #4]
    c28c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    c290:	687b      	ldr	r3, [r7, #4]
    c292:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    c294:	2104      	movs	r1, #4
    c296:	6878      	ldr	r0, [r7, #4]
    c298:	4b02      	ldr	r3, [pc, #8]	; (c2a4 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    c29a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    c29c:	bf00      	nop
    c29e:	3708      	adds	r7, #8
    c2a0:	46bd      	mov	sp, r7
    c2a2:	bd80      	pop	{r7, pc}
    c2a4:	0000be8d 	.word	0x0000be8d

0000c2a8 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    c2a8:	b580      	push	{r7, lr}
    c2aa:	b082      	sub	sp, #8
    c2ac:	af00      	add	r7, sp, #0
    c2ae:	6078      	str	r0, [r7, #4]
    c2b0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    c2b2:	687b      	ldr	r3, [r7, #4]
    c2b4:	685a      	ldr	r2, [r3, #4]
    c2b6:	683b      	ldr	r3, [r7, #0]
    c2b8:	041b      	lsls	r3, r3, #16
    c2ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    c2be:	431a      	orrs	r2, r3
    c2c0:	687b      	ldr	r3, [r7, #4]
    c2c2:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    c2c4:	2104      	movs	r1, #4
    c2c6:	6878      	ldr	r0, [r7, #4]
    c2c8:	4b02      	ldr	r3, [pc, #8]	; (c2d4 <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    c2ca:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    c2cc:	bf00      	nop
    c2ce:	3708      	adds	r7, #8
    c2d0:	46bd      	mov	sp, r7
    c2d2:	bd80      	pop	{r7, pc}
    c2d4:	0000be8d 	.word	0x0000be8d

0000c2d8 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    c2d8:	b580      	push	{r7, lr}
    c2da:	b082      	sub	sp, #8
    c2dc:	af00      	add	r7, sp, #0
    c2de:	6078      	str	r0, [r7, #4]
    c2e0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    c2e2:	687b      	ldr	r3, [r7, #4]
    c2e4:	683a      	ldr	r2, [r7, #0]
    c2e6:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    c2e8:	2104      	movs	r1, #4
    c2ea:	6878      	ldr	r0, [r7, #4]
    c2ec:	4b02      	ldr	r3, [pc, #8]	; (c2f8 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    c2ee:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    c2f0:	bf00      	nop
    c2f2:	3708      	adds	r7, #8
    c2f4:	46bd      	mov	sp, r7
    c2f6:	bd80      	pop	{r7, pc}
    c2f8:	0000be8d 	.word	0x0000be8d

0000c2fc <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    c2fc:	b580      	push	{r7, lr}
    c2fe:	b082      	sub	sp, #8
    c300:	af00      	add	r7, sp, #0
    c302:	6078      	str	r0, [r7, #4]
    c304:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    c306:	687b      	ldr	r3, [r7, #4]
    c308:	683a      	ldr	r2, [r7, #0]
    c30a:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    c30c:	2117      	movs	r1, #23
    c30e:	6878      	ldr	r0, [r7, #4]
    c310:	4b02      	ldr	r3, [pc, #8]	; (c31c <hri_sercomspi_write_CTRLB_reg+0x20>)
    c312:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    c314:	bf00      	nop
    c316:	3708      	adds	r7, #8
    c318:	46bd      	mov	sp, r7
    c31a:	bd80      	pop	{r7, pc}
    c31c:	0000bed9 	.word	0x0000bed9

0000c320 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    c320:	b480      	push	{r7}
    c322:	b083      	sub	sp, #12
    c324:	af00      	add	r7, sp, #0
    c326:	6078      	str	r0, [r7, #4]
    c328:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    c32a:	687b      	ldr	r3, [r7, #4]
    c32c:	683a      	ldr	r2, [r7, #0]
    c32e:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    c330:	bf00      	nop
    c332:	370c      	adds	r7, #12
    c334:	46bd      	mov	sp, r7
    c336:	f85d 7b04 	ldr.w	r7, [sp], #4
    c33a:	4770      	bx	lr

0000c33c <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    c33c:	b480      	push	{r7}
    c33e:	b083      	sub	sp, #12
    c340:	af00      	add	r7, sp, #0
    c342:	6078      	str	r0, [r7, #4]
    c344:	460b      	mov	r3, r1
    c346:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    c348:	687b      	ldr	r3, [r7, #4]
    c34a:	78fa      	ldrb	r2, [r7, #3]
    c34c:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    c34e:	bf00      	nop
    c350:	370c      	adds	r7, #12
    c352:	46bd      	mov	sp, r7
    c354:	f85d 7b04 	ldr.w	r7, [sp], #4
    c358:	4770      	bx	lr
	...

0000c35c <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    c35c:	b580      	push	{r7, lr}
    c35e:	b084      	sub	sp, #16
    c360:	af00      	add	r7, sp, #0
    c362:	6078      	str	r0, [r7, #4]
    c364:	460b      	mov	r3, r1
    c366:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    c368:	687b      	ldr	r3, [r7, #4]
    c36a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c36c:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    c36e:	68fb      	ldr	r3, [r7, #12]
    c370:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    c374:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    c376:	78fb      	ldrb	r3, [r7, #3]
    c378:	039b      	lsls	r3, r3, #14
    c37a:	461a      	mov	r2, r3
    c37c:	68fb      	ldr	r3, [r7, #12]
    c37e:	4313      	orrs	r3, r2
    c380:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    c382:	687b      	ldr	r3, [r7, #4]
    c384:	68fa      	ldr	r2, [r7, #12]
    c386:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    c388:	2104      	movs	r1, #4
    c38a:	6878      	ldr	r0, [r7, #4]
    c38c:	4b02      	ldr	r3, [pc, #8]	; (c398 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    c38e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    c390:	bf00      	nop
    c392:	3710      	adds	r7, #16
    c394:	46bd      	mov	sp, r7
    c396:	bd80      	pop	{r7, pc}
    c398:	0000be8d 	.word	0x0000be8d

0000c39c <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    c39c:	b580      	push	{r7, lr}
    c39e:	b082      	sub	sp, #8
    c3a0:	af00      	add	r7, sp, #0
    c3a2:	6078      	str	r0, [r7, #4]
    c3a4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    c3a6:	687b      	ldr	r3, [r7, #4]
    c3a8:	683a      	ldr	r2, [r7, #0]
    c3aa:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    c3ac:	2104      	movs	r1, #4
    c3ae:	6878      	ldr	r0, [r7, #4]
    c3b0:	4b02      	ldr	r3, [pc, #8]	; (c3bc <hri_sercomi2cm_write_ADDR_reg+0x20>)
    c3b2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    c3b4:	bf00      	nop
    c3b6:	3708      	adds	r7, #8
    c3b8:	46bd      	mov	sp, r7
    c3ba:	bd80      	pop	{r7, pc}
    c3bc:	0000be8d 	.word	0x0000be8d

0000c3c0 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    c3c0:	b580      	push	{r7, lr}
    c3c2:	b082      	sub	sp, #8
    c3c4:	af00      	add	r7, sp, #0
    c3c6:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    c3c8:	2104      	movs	r1, #4
    c3ca:	6878      	ldr	r0, [r7, #4]
    c3cc:	4b03      	ldr	r3, [pc, #12]	; (c3dc <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    c3ce:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    c3d0:	687b      	ldr	r3, [r7, #4]
    c3d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    c3d4:	4618      	mov	r0, r3
    c3d6:	3708      	adds	r7, #8
    c3d8:	46bd      	mov	sp, r7
    c3da:	bd80      	pop	{r7, pc}
    c3dc:	0000be8d 	.word	0x0000be8d

0000c3e0 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    c3e0:	b480      	push	{r7}
    c3e2:	b083      	sub	sp, #12
    c3e4:	af00      	add	r7, sp, #0
    c3e6:	6078      	str	r0, [r7, #4]
    c3e8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    c3ea:	687b      	ldr	r3, [r7, #4]
    c3ec:	683a      	ldr	r2, [r7, #0]
    c3ee:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    c3f0:	bf00      	nop
    c3f2:	370c      	adds	r7, #12
    c3f4:	46bd      	mov	sp, r7
    c3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    c3fa:	4770      	bx	lr

0000c3fc <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    c3fc:	b580      	push	{r7, lr}
    c3fe:	b082      	sub	sp, #8
    c400:	af00      	add	r7, sp, #0
    c402:	6078      	str	r0, [r7, #4]
    c404:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    c406:	687b      	ldr	r3, [r7, #4]
    c408:	683a      	ldr	r2, [r7, #0]
    c40a:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    c40c:	2104      	movs	r1, #4
    c40e:	6878      	ldr	r0, [r7, #4]
    c410:	4b02      	ldr	r3, [pc, #8]	; (c41c <hri_sercomi2cm_write_DATA_reg+0x20>)
    c412:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    c414:	bf00      	nop
    c416:	3708      	adds	r7, #8
    c418:	46bd      	mov	sp, r7
    c41a:	bd80      	pop	{r7, pc}
    c41c:	0000be8d 	.word	0x0000be8d

0000c420 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    c420:	b580      	push	{r7, lr}
    c422:	b082      	sub	sp, #8
    c424:	af00      	add	r7, sp, #0
    c426:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    c428:	2104      	movs	r1, #4
    c42a:	6878      	ldr	r0, [r7, #4]
    c42c:	4b03      	ldr	r3, [pc, #12]	; (c43c <hri_sercomi2cm_read_DATA_reg+0x1c>)
    c42e:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    c430:	687b      	ldr	r3, [r7, #4]
    c432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    c434:	4618      	mov	r0, r3
    c436:	3708      	adds	r7, #8
    c438:	46bd      	mov	sp, r7
    c43a:	bd80      	pop	{r7, pc}
    c43c:	0000be8d 	.word	0x0000be8d

0000c440 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    c440:	b480      	push	{r7}
    c442:	b083      	sub	sp, #12
    c444:	af00      	add	r7, sp, #0
    c446:	6078      	str	r0, [r7, #4]
    c448:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    c44a:	687b      	ldr	r3, [r7, #4]
    c44c:	683a      	ldr	r2, [r7, #0]
    c44e:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    c450:	bf00      	nop
    c452:	370c      	adds	r7, #12
    c454:	46bd      	mov	sp, r7
    c456:	f85d 7b04 	ldr.w	r7, [sp], #4
    c45a:	4770      	bx	lr

0000c45c <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    c45c:	b480      	push	{r7}
    c45e:	b083      	sub	sp, #12
    c460:	af00      	add	r7, sp, #0
    c462:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    c464:	687b      	ldr	r3, [r7, #4]
    c466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    c468:	4618      	mov	r0, r3
    c46a:	370c      	adds	r7, #12
    c46c:	46bd      	mov	sp, r7
    c46e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c472:	4770      	bx	lr

0000c474 <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    c474:	b480      	push	{r7}
    c476:	b083      	sub	sp, #12
    c478:	af00      	add	r7, sp, #0
    c47a:	6078      	str	r0, [r7, #4]
    c47c:	460b      	mov	r3, r1
    c47e:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    c480:	687b      	ldr	r3, [r7, #4]
    c482:	78fa      	ldrb	r2, [r7, #3]
    c484:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    c488:	bf00      	nop
    c48a:	370c      	adds	r7, #12
    c48c:	46bd      	mov	sp, r7
    c48e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c492:	4770      	bx	lr

0000c494 <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    c494:	b480      	push	{r7}
    c496:	b083      	sub	sp, #12
    c498:	af00      	add	r7, sp, #0
    c49a:	6078      	str	r0, [r7, #4]
    c49c:	460b      	mov	r3, r1
    c49e:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    c4a0:	687b      	ldr	r3, [r7, #4]
    c4a2:	887a      	ldrh	r2, [r7, #2]
    c4a4:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    c4a6:	bf00      	nop
    c4a8:	370c      	adds	r7, #12
    c4aa:	46bd      	mov	sp, r7
    c4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    c4b0:	4770      	bx	lr
	...

0000c4b4 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    c4b4:	b580      	push	{r7, lr}
    c4b6:	b082      	sub	sp, #8
    c4b8:	af00      	add	r7, sp, #0
    c4ba:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    c4bc:	2104      	movs	r1, #4
    c4be:	6878      	ldr	r0, [r7, #4]
    c4c0:	4b04      	ldr	r3, [pc, #16]	; (c4d4 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    c4c2:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    c4c4:	687b      	ldr	r3, [r7, #4]
    c4c6:	8b5b      	ldrh	r3, [r3, #26]
    c4c8:	b29b      	uxth	r3, r3
}
    c4ca:	4618      	mov	r0, r3
    c4cc:	3708      	adds	r7, #8
    c4ce:	46bd      	mov	sp, r7
    c4d0:	bd80      	pop	{r7, pc}
    c4d2:	bf00      	nop
    c4d4:	0000be8d 	.word	0x0000be8d

0000c4d8 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    c4d8:	b4b0      	push	{r4, r5, r7}
    c4da:	b08d      	sub	sp, #52	; 0x34
    c4dc:	af00      	add	r7, sp, #0
    c4de:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    c4e0:	4b13      	ldr	r3, [pc, #76]	; (c530 <_sercom_get_hardware_index+0x58>)
    c4e2:	f107 040c 	add.w	r4, r7, #12
    c4e6:	461d      	mov	r5, r3
    c4e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    c4ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    c4ec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    c4f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    c4f4:	2300      	movs	r3, #0
    c4f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    c4f8:	e010      	b.n	c51c <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    c4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c4fc:	009b      	lsls	r3, r3, #2
    c4fe:	f107 0230 	add.w	r2, r7, #48	; 0x30
    c502:	4413      	add	r3, r2
    c504:	f853 3c24 	ldr.w	r3, [r3, #-36]
    c508:	461a      	mov	r2, r3
    c50a:	687b      	ldr	r3, [r7, #4]
    c50c:	429a      	cmp	r2, r3
    c50e:	d102      	bne.n	c516 <_sercom_get_hardware_index+0x3e>
			return i;
    c510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c512:	b2db      	uxtb	r3, r3
    c514:	e006      	b.n	c524 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    c516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c518:	3301      	adds	r3, #1
    c51a:	62fb      	str	r3, [r7, #44]	; 0x2c
    c51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c51e:	2b07      	cmp	r3, #7
    c520:	d9eb      	bls.n	c4fa <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    c522:	2300      	movs	r3, #0
}
    c524:	4618      	mov	r0, r3
    c526:	3734      	adds	r7, #52	; 0x34
    c528:	46bd      	mov	sp, r7
    c52a:	bcb0      	pop	{r4, r5, r7}
    c52c:	4770      	bx	lr
    c52e:	bf00      	nop
    c530:	00014018 	.word	0x00014018

0000c534 <_sercom_init_irq_param>:

/**
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{
    c534:	b480      	push	{r7}
    c536:	b083      	sub	sp, #12
    c538:	af00      	add	r7, sp, #0
    c53a:	6078      	str	r0, [r7, #4]
    c53c:	6039      	str	r1, [r7, #0]

	if (hw == SERCOM4) {
    c53e:	687b      	ldr	r3, [r7, #4]
    c540:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
    c544:	d102      	bne.n	c54c <_sercom_init_irq_param+0x18>
		_sercom4_dev = (struct _spi_async_dev *)dev;
    c546:	4a0b      	ldr	r2, [pc, #44]	; (c574 <_sercom_init_irq_param+0x40>)
    c548:	683b      	ldr	r3, [r7, #0]
    c54a:	6013      	str	r3, [r2, #0]
	}

	if (hw == SERCOM5) {
    c54c:	687b      	ldr	r3, [r7, #4]
    c54e:	4a0a      	ldr	r2, [pc, #40]	; (c578 <_sercom_init_irq_param+0x44>)
    c550:	4293      	cmp	r3, r2
    c552:	d102      	bne.n	c55a <_sercom_init_irq_param+0x26>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    c554:	4a09      	ldr	r2, [pc, #36]	; (c57c <_sercom_init_irq_param+0x48>)
    c556:	683b      	ldr	r3, [r7, #0]
    c558:	6013      	str	r3, [r2, #0]
	}

	if (hw == SERCOM7) {
    c55a:	687b      	ldr	r3, [r7, #4]
    c55c:	4a08      	ldr	r2, [pc, #32]	; (c580 <_sercom_init_irq_param+0x4c>)
    c55e:	4293      	cmp	r3, r2
    c560:	d102      	bne.n	c568 <_sercom_init_irq_param+0x34>
		_sercom7_dev = (struct _i2c_m_async_device *)dev;
    c562:	4a08      	ldr	r2, [pc, #32]	; (c584 <_sercom_init_irq_param+0x50>)
    c564:	683b      	ldr	r3, [r7, #0]
    c566:	6013      	str	r3, [r2, #0]
	}
}
    c568:	bf00      	nop
    c56a:	370c      	adds	r7, #12
    c56c:	46bd      	mov	sp, r7
    c56e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c572:	4770      	bx	lr
    c574:	200015ac 	.word	0x200015ac
    c578:	43000400 	.word	0x43000400
    c57c:	200015b0 	.word	0x200015b0
    c580:	43000c00 	.word	0x43000c00
    c584:	200015b4 	.word	0x200015b4

0000c588 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    c588:	b580      	push	{r7, lr}
    c58a:	b084      	sub	sp, #16
    c58c:	af00      	add	r7, sp, #0
    c58e:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    c590:	6878      	ldr	r0, [r7, #4]
    c592:	4b13      	ldr	r3, [pc, #76]	; (c5e0 <_get_i2cm_index+0x58>)
    c594:	4798      	blx	r3
    c596:	4603      	mov	r3, r0
    c598:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    c59a:	2300      	movs	r3, #0
    c59c:	73fb      	strb	r3, [r7, #15]
    c59e:	e010      	b.n	c5c2 <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    c5a0:	7bfa      	ldrb	r2, [r7, #15]
    c5a2:	4910      	ldr	r1, [pc, #64]	; (c5e4 <_get_i2cm_index+0x5c>)
    c5a4:	4613      	mov	r3, r2
    c5a6:	005b      	lsls	r3, r3, #1
    c5a8:	4413      	add	r3, r2
    c5aa:	00db      	lsls	r3, r3, #3
    c5ac:	440b      	add	r3, r1
    c5ae:	781b      	ldrb	r3, [r3, #0]
    c5b0:	7bba      	ldrb	r2, [r7, #14]
    c5b2:	429a      	cmp	r2, r3
    c5b4:	d102      	bne.n	c5bc <_get_i2cm_index+0x34>
			return i;
    c5b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    c5ba:	e00d      	b.n	c5d8 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    c5bc:	7bfb      	ldrb	r3, [r7, #15]
    c5be:	3301      	adds	r3, #1
    c5c0:	73fb      	strb	r3, [r7, #15]
    c5c2:	7bfb      	ldrb	r3, [r7, #15]
    c5c4:	2b01      	cmp	r3, #1
    c5c6:	d9eb      	bls.n	c5a0 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    c5c8:	f44f 726e 	mov.w	r2, #952	; 0x3b8
    c5cc:	4906      	ldr	r1, [pc, #24]	; (c5e8 <_get_i2cm_index+0x60>)
    c5ce:	2000      	movs	r0, #0
    c5d0:	4b06      	ldr	r3, [pc, #24]	; (c5ec <_get_i2cm_index+0x64>)
    c5d2:	4798      	blx	r3
	return -1;
    c5d4:	f04f 33ff 	mov.w	r3, #4294967295
}
    c5d8:	4618      	mov	r0, r3
    c5da:	3710      	adds	r7, #16
    c5dc:	46bd      	mov	sp, r7
    c5de:	bd80      	pop	{r7, pc}
    c5e0:	0000c4d9 	.word	0x0000c4d9
    c5e4:	20000410 	.word	0x20000410
    c5e8:	00013ffc 	.word	0x00013ffc
    c5ec:	000094ed 	.word	0x000094ed

0000c5f0 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    c5f0:	b580      	push	{r7, lr}
    c5f2:	b082      	sub	sp, #8
    c5f4:	af00      	add	r7, sp, #0
    c5f6:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    c5f8:	2103      	movs	r1, #3
    c5fa:	6878      	ldr	r0, [r7, #4]
    c5fc:	4b02      	ldr	r3, [pc, #8]	; (c608 <_sercom_i2c_send_stop+0x18>)
    c5fe:	4798      	blx	r3
}
    c600:	bf00      	nop
    c602:	3708      	adds	r7, #8
    c604:	46bd      	mov	sp, r7
    c606:	bd80      	pop	{r7, pc}
    c608:	0000c2a9 	.word	0x0000c2a9

0000c60c <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    c60c:	b590      	push	{r4, r7, lr}
    c60e:	b087      	sub	sp, #28
    c610:	af00      	add	r7, sp, #0
    c612:	60f8      	str	r0, [r7, #12]
    c614:	60b9      	str	r1, [r7, #8]
    c616:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    c618:	68f8      	ldr	r0, [r7, #12]
    c61a:	4b7d      	ldr	r3, [pc, #500]	; (c810 <_sercom_i2c_sync_analyse_flags+0x204>)
    c61c:	4798      	blx	r3
    c61e:	4603      	mov	r3, r0
    c620:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    c622:	68f8      	ldr	r0, [r7, #12]
    c624:	4b7b      	ldr	r3, [pc, #492]	; (c814 <_sercom_i2c_sync_analyse_flags+0x208>)
    c626:	4798      	blx	r3
    c628:	4603      	mov	r3, r0
    c62a:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    c62c:	68bb      	ldr	r3, [r7, #8]
    c62e:	f003 0301 	and.w	r3, r3, #1
    c632:	2b00      	cmp	r3, #0
    c634:	f000 8095 	beq.w	c762 <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    c638:	8a7b      	ldrh	r3, [r7, #18]
    c63a:	f003 0302 	and.w	r3, r3, #2
    c63e:	2b00      	cmp	r3, #0
    c640:	d01d      	beq.n	c67e <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    c642:	68f8      	ldr	r0, [r7, #12]
    c644:	4b74      	ldr	r3, [pc, #464]	; (c818 <_sercom_i2c_sync_analyse_flags+0x20c>)
    c646:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    c648:	687b      	ldr	r3, [r7, #4]
    c64a:	885b      	ldrh	r3, [r3, #2]
    c64c:	b29b      	uxth	r3, r3
    c64e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    c652:	b29a      	uxth	r2, r3
    c654:	687b      	ldr	r3, [r7, #4]
    c656:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    c658:	687b      	ldr	r3, [r7, #4]
    c65a:	885b      	ldrh	r3, [r3, #2]
    c65c:	b29b      	uxth	r3, r3
    c65e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    c662:	b29a      	uxth	r2, r3
    c664:	687b      	ldr	r3, [r7, #4]
    c666:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    c668:	8a7b      	ldrh	r3, [r7, #18]
    c66a:	f003 0301 	and.w	r3, r3, #1
    c66e:	2b00      	cmp	r3, #0
    c670:	d002      	beq.n	c678 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    c672:	f06f 0304 	mvn.w	r3, #4
    c676:	e0c6      	b.n	c806 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    c678:	f06f 0303 	mvn.w	r3, #3
    c67c:	e0c3      	b.n	c806 <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    c67e:	8a7b      	ldrh	r3, [r7, #18]
    c680:	f003 0304 	and.w	r3, r3, #4
    c684:	2b00      	cmp	r3, #0
    c686:	d01f      	beq.n	c6c8 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    c688:	687b      	ldr	r3, [r7, #4]
    c68a:	685b      	ldr	r3, [r3, #4]
    c68c:	2b00      	cmp	r3, #0
    c68e:	dd07      	ble.n	c6a0 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    c690:	687b      	ldr	r3, [r7, #4]
    c692:	885b      	ldrh	r3, [r3, #2]
    c694:	b29b      	uxth	r3, r3
    c696:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    c69a:	b29a      	uxth	r2, r3
    c69c:	687b      	ldr	r3, [r7, #4]
    c69e:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    c6a0:	687b      	ldr	r3, [r7, #4]
    c6a2:	885b      	ldrh	r3, [r3, #2]
    c6a4:	b29b      	uxth	r3, r3
    c6a6:	b21b      	sxth	r3, r3
    c6a8:	2b00      	cmp	r3, #0
    c6aa:	da02      	bge.n	c6b2 <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    c6ac:	68f8      	ldr	r0, [r7, #12]
    c6ae:	4b5b      	ldr	r3, [pc, #364]	; (c81c <_sercom_i2c_sync_analyse_flags+0x210>)
    c6b0:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    c6b2:	687b      	ldr	r3, [r7, #4]
    c6b4:	885b      	ldrh	r3, [r3, #2]
    c6b6:	b29b      	uxth	r3, r3
    c6b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    c6bc:	b29a      	uxth	r2, r3
    c6be:	687b      	ldr	r3, [r7, #4]
    c6c0:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    c6c2:	f06f 0301 	mvn.w	r3, #1
    c6c6:	e09e      	b.n	c806 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    c6c8:	687b      	ldr	r3, [r7, #4]
    c6ca:	885b      	ldrh	r3, [r3, #2]
    c6cc:	b29b      	uxth	r3, r3
    c6ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    c6d2:	2b00      	cmp	r3, #0
    c6d4:	d01c      	beq.n	c710 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    c6d6:	687b      	ldr	r3, [r7, #4]
    c6d8:	881b      	ldrh	r3, [r3, #0]
    c6da:	121b      	asrs	r3, r3, #8
    c6dc:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    c6de:	f003 0406 	and.w	r4, r3, #6
    c6e2:	68f8      	ldr	r0, [r7, #12]
    c6e4:	4b4e      	ldr	r3, [pc, #312]	; (c820 <_sercom_i2c_sync_analyse_flags+0x214>)
    c6e6:	4798      	blx	r3
    c6e8:	4603      	mov	r3, r0
    c6ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    c6ee:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    c6f0:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    c6f4:	4619      	mov	r1, r3
    c6f6:	68f8      	ldr	r0, [r7, #12]
    c6f8:	4b4a      	ldr	r3, [pc, #296]	; (c824 <_sercom_i2c_sync_analyse_flags+0x218>)
    c6fa:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    c6fc:	687b      	ldr	r3, [r7, #4]
    c6fe:	885b      	ldrh	r3, [r3, #2]
    c700:	b29b      	uxth	r3, r3
    c702:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    c706:	b29a      	uxth	r2, r3
    c708:	687b      	ldr	r3, [r7, #4]
    c70a:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    c70c:	2300      	movs	r3, #0
    c70e:	e07a      	b.n	c806 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    c710:	687b      	ldr	r3, [r7, #4]
    c712:	685b      	ldr	r3, [r3, #4]
    c714:	2b00      	cmp	r3, #0
    c716:	d111      	bne.n	c73c <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    c718:	687b      	ldr	r3, [r7, #4]
    c71a:	885b      	ldrh	r3, [r3, #2]
    c71c:	b29b      	uxth	r3, r3
    c71e:	b21b      	sxth	r3, r3
    c720:	2b00      	cmp	r3, #0
    c722:	da02      	bge.n	c72a <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    c724:	68f8      	ldr	r0, [r7, #12]
    c726:	4b3d      	ldr	r3, [pc, #244]	; (c81c <_sercom_i2c_sync_analyse_flags+0x210>)
    c728:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    c72a:	687b      	ldr	r3, [r7, #4]
    c72c:	885b      	ldrh	r3, [r3, #2]
    c72e:	b29b      	uxth	r3, r3
    c730:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    c734:	b29a      	uxth	r2, r3
    c736:	687b      	ldr	r3, [r7, #4]
    c738:	805a      	strh	r2, [r3, #2]
    c73a:	e010      	b.n	c75e <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    c73c:	687b      	ldr	r3, [r7, #4]
    c73e:	689b      	ldr	r3, [r3, #8]
    c740:	781b      	ldrb	r3, [r3, #0]
    c742:	4619      	mov	r1, r3
    c744:	68f8      	ldr	r0, [r7, #12]
    c746:	4b38      	ldr	r3, [pc, #224]	; (c828 <_sercom_i2c_sync_analyse_flags+0x21c>)
    c748:	4798      	blx	r3
				msg->buffer++;
    c74a:	687b      	ldr	r3, [r7, #4]
    c74c:	689b      	ldr	r3, [r3, #8]
    c74e:	1c5a      	adds	r2, r3, #1
    c750:	687b      	ldr	r3, [r7, #4]
    c752:	609a      	str	r2, [r3, #8]
				msg->len--;
    c754:	687b      	ldr	r3, [r7, #4]
    c756:	685b      	ldr	r3, [r3, #4]
    c758:	1e5a      	subs	r2, r3, #1
    c75a:	687b      	ldr	r3, [r7, #4]
    c75c:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    c75e:	2300      	movs	r3, #0
    c760:	e051      	b.n	c806 <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    c762:	68bb      	ldr	r3, [r7, #8]
    c764:	f003 0302 	and.w	r3, r3, #2
    c768:	2b00      	cmp	r3, #0
    c76a:	d04b      	beq.n	c804 <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    c76c:	687b      	ldr	r3, [r7, #4]
    c76e:	685b      	ldr	r3, [r3, #4]
    c770:	2b00      	cmp	r3, #0
    c772:	d041      	beq.n	c7f8 <_sercom_i2c_sync_analyse_flags+0x1ec>
    c774:	8a7b      	ldrh	r3, [r7, #18]
    c776:	f003 0304 	and.w	r3, r3, #4
    c77a:	2b00      	cmp	r3, #0
    c77c:	d13c      	bne.n	c7f8 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    c77e:	687b      	ldr	r3, [r7, #4]
    c780:	685b      	ldr	r3, [r3, #4]
    c782:	1e5a      	subs	r2, r3, #1
    c784:	687b      	ldr	r3, [r7, #4]
    c786:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    c788:	687b      	ldr	r3, [r7, #4]
    c78a:	685b      	ldr	r3, [r3, #4]
    c78c:	2b00      	cmp	r3, #0
    c78e:	d102      	bne.n	c796 <_sercom_i2c_sync_analyse_flags+0x18a>
    c790:	697b      	ldr	r3, [r7, #20]
    c792:	2b00      	cmp	r3, #0
    c794:	d006      	beq.n	c7a4 <_sercom_i2c_sync_analyse_flags+0x198>
    c796:	687b      	ldr	r3, [r7, #4]
    c798:	685b      	ldr	r3, [r3, #4]
    c79a:	2b01      	cmp	r3, #1
    c79c:	d105      	bne.n	c7aa <_sercom_i2c_sync_analyse_flags+0x19e>
    c79e:	697b      	ldr	r3, [r7, #20]
    c7a0:	2b00      	cmp	r3, #0
    c7a2:	d002      	beq.n	c7aa <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    c7a4:	68f8      	ldr	r0, [r7, #12]
    c7a6:	4b21      	ldr	r3, [pc, #132]	; (c82c <_sercom_i2c_sync_analyse_flags+0x220>)
    c7a8:	4798      	blx	r3
			}

			if (msg->len == 0) {
    c7aa:	687b      	ldr	r3, [r7, #4]
    c7ac:	685b      	ldr	r3, [r3, #4]
    c7ae:	2b00      	cmp	r3, #0
    c7b0:	d113      	bne.n	c7da <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    c7b2:	687b      	ldr	r3, [r7, #4]
    c7b4:	885b      	ldrh	r3, [r3, #2]
    c7b6:	b29b      	uxth	r3, r3
    c7b8:	b21b      	sxth	r3, r3
    c7ba:	2b00      	cmp	r3, #0
    c7bc:	da05      	bge.n	c7ca <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    c7be:	68f8      	ldr	r0, [r7, #12]
    c7c0:	4b1b      	ldr	r3, [pc, #108]	; (c830 <_sercom_i2c_sync_analyse_flags+0x224>)
    c7c2:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    c7c4:	68f8      	ldr	r0, [r7, #12]
    c7c6:	4b15      	ldr	r3, [pc, #84]	; (c81c <_sercom_i2c_sync_analyse_flags+0x210>)
    c7c8:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    c7ca:	687b      	ldr	r3, [r7, #4]
    c7cc:	885b      	ldrh	r3, [r3, #2]
    c7ce:	b29b      	uxth	r3, r3
    c7d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    c7d4:	b29a      	uxth	r2, r3
    c7d6:	687b      	ldr	r3, [r7, #4]
    c7d8:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    c7da:	687b      	ldr	r3, [r7, #4]
    c7dc:	689c      	ldr	r4, [r3, #8]
    c7de:	1c62      	adds	r2, r4, #1
    c7e0:	687b      	ldr	r3, [r7, #4]
    c7e2:	609a      	str	r2, [r3, #8]
    c7e4:	68f8      	ldr	r0, [r7, #12]
    c7e6:	4b13      	ldr	r3, [pc, #76]	; (c834 <_sercom_i2c_sync_analyse_flags+0x228>)
    c7e8:	4798      	blx	r3
    c7ea:	4603      	mov	r3, r0
    c7ec:	b2db      	uxtb	r3, r3
    c7ee:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    c7f0:	68f8      	ldr	r0, [r7, #12]
    c7f2:	4b11      	ldr	r3, [pc, #68]	; (c838 <_sercom_i2c_sync_analyse_flags+0x22c>)
    c7f4:	4798      	blx	r3
    c7f6:	e005      	b.n	c804 <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    c7f8:	68f8      	ldr	r0, [r7, #12]
    c7fa:	4b0f      	ldr	r3, [pc, #60]	; (c838 <_sercom_i2c_sync_analyse_flags+0x22c>)
    c7fc:	4798      	blx	r3
			return I2C_NACK;
    c7fe:	f06f 0301 	mvn.w	r3, #1
    c802:	e000      	b.n	c806 <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    c804:	2300      	movs	r3, #0
}
    c806:	4618      	mov	r0, r3
    c808:	371c      	adds	r7, #28
    c80a:	46bd      	mov	sp, r7
    c80c:	bd90      	pop	{r4, r7, pc}
    c80e:	bf00      	nop
    c810:	0000c0d1 	.word	0x0000c0d1
    c814:	0000c4b5 	.word	0x0000c4b5
    c818:	0000bf25 	.word	0x0000bf25
    c81c:	0000c5f1 	.word	0x0000c5f1
    c820:	0000c3c1 	.word	0x0000c3c1
    c824:	0000c39d 	.word	0x0000c39d
    c828:	0000c3fd 	.word	0x0000c3fd
    c82c:	0000c259 	.word	0x0000c259
    c830:	0000c231 	.word	0x0000c231
    c834:	0000c421 	.word	0x0000c421
    c838:	0000bf3f 	.word	0x0000bf3f

0000c83c <_sercom_i2c_m_irq_handler>:
 * \internal Sercom i2c master interrupt handler
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static void _sercom_i2c_m_irq_handler(struct _i2c_m_async_device *i2c_dev)
{
    c83c:	b580      	push	{r7, lr}
    c83e:	b086      	sub	sp, #24
    c840:	af00      	add	r7, sp, #0
    c842:	6078      	str	r0, [r7, #4]
	void *   hw    = i2c_dev->hw;
    c844:	687b      	ldr	r3, [r7, #4]
    c846:	691b      	ldr	r3, [r3, #16]
    c848:	613b      	str	r3, [r7, #16]
	uint32_t flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    c84a:	6938      	ldr	r0, [r7, #16]
    c84c:	4b37      	ldr	r3, [pc, #220]	; (c92c <_sercom_i2c_m_irq_handler+0xf0>)
    c84e:	4798      	blx	r3
    c850:	4603      	mov	r3, r0
    c852:	60fb      	str	r3, [r7, #12]
	int32_t  ret   = I2C_OK;
    c854:	2300      	movs	r3, #0
    c856:	617b      	str	r3, [r7, #20]

	ASSERT(i2c_dev);
    c858:	687b      	ldr	r3, [r7, #4]
    c85a:	2b00      	cmp	r3, #0
    c85c:	bf14      	ite	ne
    c85e:	2301      	movne	r3, #1
    c860:	2300      	moveq	r3, #0
    c862:	b2db      	uxtb	r3, r3
    c864:	f240 422a 	movw	r2, #1066	; 0x42a
    c868:	4931      	ldr	r1, [pc, #196]	; (c930 <_sercom_i2c_m_irq_handler+0xf4>)
    c86a:	4618      	mov	r0, r3
    c86c:	4b31      	ldr	r3, [pc, #196]	; (c934 <_sercom_i2c_m_irq_handler+0xf8>)
    c86e:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    c870:	687b      	ldr	r3, [r7, #4]
    c872:	691b      	ldr	r3, [r3, #16]
    c874:	2b00      	cmp	r3, #0
    c876:	bf14      	ite	ne
    c878:	2301      	movne	r3, #1
    c87a:	2300      	moveq	r3, #0
    c87c:	b2db      	uxtb	r3, r3
    c87e:	f240 422b 	movw	r2, #1067	; 0x42b
    c882:	492b      	ldr	r1, [pc, #172]	; (c930 <_sercom_i2c_m_irq_handler+0xf4>)
    c884:	4618      	mov	r0, r3
    c886:	4b2b      	ldr	r3, [pc, #172]	; (c934 <_sercom_i2c_m_irq_handler+0xf8>)
    c888:	4798      	blx	r3

	while (!(flags & ERROR_FLAG)) {
    c88a:	bf00      	nop
    c88c:	68fb      	ldr	r3, [r7, #12]
    c88e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c892:	2b00      	cmp	r3, #0
    c894:	d126      	bne.n	c8e4 <_sercom_i2c_m_irq_handler+0xa8>
		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    c896:	687b      	ldr	r3, [r7, #4]
    c898:	461a      	mov	r2, r3
    c89a:	68f9      	ldr	r1, [r7, #12]
    c89c:	6938      	ldr	r0, [r7, #16]
    c89e:	4b26      	ldr	r3, [pc, #152]	; (c938 <_sercom_i2c_m_irq_handler+0xfc>)
    c8a0:	4798      	blx	r3
    c8a2:	6178      	str	r0, [r7, #20]

		if (ret != 0) {
    c8a4:	697b      	ldr	r3, [r7, #20]
    c8a6:	2b00      	cmp	r3, #0
    c8a8:	d11b      	bne.n	c8e2 <_sercom_i2c_m_irq_handler+0xa6>
			break;
		}

		/* app callback */
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    c8aa:	68fb      	ldr	r3, [r7, #12]
    c8ac:	f003 0301 	and.w	r3, r3, #1
    c8b0:	2b00      	cmp	r3, #0
    c8b2:	d008      	beq.n	c8c6 <_sercom_i2c_m_irq_handler+0x8a>
    c8b4:	687b      	ldr	r3, [r7, #4]
    c8b6:	699b      	ldr	r3, [r3, #24]
    c8b8:	2b00      	cmp	r3, #0
    c8ba:	d004      	beq.n	c8c6 <_sercom_i2c_m_irq_handler+0x8a>
			i2c_dev->cb.tx_complete(i2c_dev);
    c8bc:	687b      	ldr	r3, [r7, #4]
    c8be:	699b      	ldr	r3, [r3, #24]
    c8c0:	6878      	ldr	r0, [r7, #4]
    c8c2:	4798      	blx	r3
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
			i2c_dev->cb.rx_complete(i2c_dev);
		}

		return;
    c8c4:	e02e      	b.n	c924 <_sercom_i2c_m_irq_handler+0xe8>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    c8c6:	68fb      	ldr	r3, [r7, #12]
    c8c8:	f003 0302 	and.w	r3, r3, #2
    c8cc:	2b00      	cmp	r3, #0
    c8ce:	d029      	beq.n	c924 <_sercom_i2c_m_irq_handler+0xe8>
    c8d0:	687b      	ldr	r3, [r7, #4]
    c8d2:	69db      	ldr	r3, [r3, #28]
    c8d4:	2b00      	cmp	r3, #0
    c8d6:	d025      	beq.n	c924 <_sercom_i2c_m_irq_handler+0xe8>
			i2c_dev->cb.rx_complete(i2c_dev);
    c8d8:	687b      	ldr	r3, [r7, #4]
    c8da:	69db      	ldr	r3, [r3, #28]
    c8dc:	6878      	ldr	r0, [r7, #4]
    c8de:	4798      	blx	r3
		return;
    c8e0:	e020      	b.n	c924 <_sercom_i2c_m_irq_handler+0xe8>
			break;
    c8e2:	bf00      	nop
	}

	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    c8e4:	687b      	ldr	r3, [r7, #4]
    c8e6:	885b      	ldrh	r3, [r3, #2]
    c8e8:	b29b      	uxth	r3, r3
    c8ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    c8ee:	b29a      	uxth	r2, r3
    c8f0:	687b      	ldr	r3, [r7, #4]
    c8f2:	805a      	strh	r2, [r3, #2]
	if (i2c_dev->cb.error) {
    c8f4:	687b      	ldr	r3, [r7, #4]
    c8f6:	695b      	ldr	r3, [r3, #20]
    c8f8:	2b00      	cmp	r3, #0
    c8fa:	d014      	beq.n	c926 <_sercom_i2c_m_irq_handler+0xea>
		if (ret != I2C_OK) {
    c8fc:	697b      	ldr	r3, [r7, #20]
    c8fe:	2b00      	cmp	r3, #0
    c900:	d005      	beq.n	c90e <_sercom_i2c_m_irq_handler+0xd2>
			i2c_dev->cb.error(i2c_dev, ret);
    c902:	687b      	ldr	r3, [r7, #4]
    c904:	695b      	ldr	r3, [r3, #20]
    c906:	6979      	ldr	r1, [r7, #20]
    c908:	6878      	ldr	r0, [r7, #4]
    c90a:	4798      	blx	r3
    c90c:	e005      	b.n	c91a <_sercom_i2c_m_irq_handler+0xde>
		} else {
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    c90e:	687b      	ldr	r3, [r7, #4]
    c910:	695b      	ldr	r3, [r3, #20]
    c912:	f06f 0104 	mvn.w	r1, #4
    c916:	6878      	ldr	r0, [r7, #4]
    c918:	4798      	blx	r3
		}
		hri_sercomi2cm_clear_INTFLAG_reg(hw, SERCOM_I2CM_INTFLAG_ERROR);
    c91a:	2180      	movs	r1, #128	; 0x80
    c91c:	6938      	ldr	r0, [r7, #16]
    c91e:	4b07      	ldr	r3, [pc, #28]	; (c93c <_sercom_i2c_m_irq_handler+0x100>)
    c920:	4798      	blx	r3
    c922:	e000      	b.n	c926 <_sercom_i2c_m_irq_handler+0xea>
		return;
    c924:	bf00      	nop
	}
}
    c926:	3718      	adds	r7, #24
    c928:	46bd      	mov	sp, r7
    c92a:	bd80      	pop	{r7, pc}
    c92c:	0000bf59 	.word	0x0000bf59
    c930:	00013ffc 	.word	0x00013ffc
    c934:	000094ed 	.word	0x000094ed
    c938:	0000c60d 	.word	0x0000c60d
    c93c:	0000bf73 	.word	0x0000bf73

0000c940 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    c940:	b580      	push	{r7, lr}
    c942:	b082      	sub	sp, #8
    c944:	af00      	add	r7, sp, #0
    c946:	6078      	str	r0, [r7, #4]
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    c948:	6878      	ldr	r0, [r7, #4]
    c94a:	4b05      	ldr	r3, [pc, #20]	; (c960 <_sercom_get_irq_num+0x20>)
    c94c:	4798      	blx	r3
    c94e:	4603      	mov	r3, r0
    c950:	009b      	lsls	r3, r3, #2
    c952:	b2db      	uxtb	r3, r3
    c954:	332e      	adds	r3, #46	; 0x2e
    c956:	b2db      	uxtb	r3, r3
}
    c958:	4618      	mov	r0, r3
    c95a:	3708      	adds	r7, #8
    c95c:	46bd      	mov	sp, r7
    c95e:	bd80      	pop	{r7, pc}
    c960:	0000c4d9 	.word	0x0000c4d9

0000c964 <_i2c_m_async_init>:
 * \brief Initialize sercom i2c module to use in async mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_init(struct _i2c_m_async_device *const i2c_dev, void *const hw)
{
    c964:	b580      	push	{r7, lr}
    c966:	b086      	sub	sp, #24
    c968:	af00      	add	r7, sp, #0
    c96a:	6078      	str	r0, [r7, #4]
    c96c:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(i2c_dev);
    c96e:	687b      	ldr	r3, [r7, #4]
    c970:	2b00      	cmp	r3, #0
    c972:	bf14      	ite	ne
    c974:	2301      	movne	r3, #1
    c976:	2300      	moveq	r3, #0
    c978:	b2db      	uxtb	r3, r3
    c97a:	f240 429e 	movw	r2, #1182	; 0x49e
    c97e:	491d      	ldr	r1, [pc, #116]	; (c9f4 <_i2c_m_async_init+0x90>)
    c980:	4618      	mov	r0, r3
    c982:	4b1d      	ldr	r3, [pc, #116]	; (c9f8 <_i2c_m_async_init+0x94>)
    c984:	4798      	blx	r3

	i2c_dev->hw = hw;
    c986:	687b      	ldr	r3, [r7, #4]
    c988:	683a      	ldr	r2, [r7, #0]
    c98a:	611a      	str	r2, [r3, #16]

	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    c98c:	687b      	ldr	r3, [r7, #4]
    c98e:	6839      	ldr	r1, [r7, #0]
    c990:	4618      	mov	r0, r3
    c992:	4b1a      	ldr	r3, [pc, #104]	; (c9fc <_i2c_m_async_init+0x98>)
    c994:	4798      	blx	r3
    c996:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    c998:	68fb      	ldr	r3, [r7, #12]
    c99a:	2b00      	cmp	r3, #0
    c99c:	d001      	beq.n	c9a2 <_i2c_m_async_init+0x3e>
		return init_status;
    c99e:	68fb      	ldr	r3, [r7, #12]
    c9a0:	e024      	b.n	c9ec <_i2c_m_async_init+0x88>
	}

	_sercom_init_irq_param(hw, (void *)i2c_dev);
    c9a2:	6879      	ldr	r1, [r7, #4]
    c9a4:	6838      	ldr	r0, [r7, #0]
    c9a6:	4b16      	ldr	r3, [pc, #88]	; (ca00 <_i2c_m_async_init+0x9c>)
    c9a8:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    c9aa:	6838      	ldr	r0, [r7, #0]
    c9ac:	4b15      	ldr	r3, [pc, #84]	; (ca04 <_i2c_m_async_init+0xa0>)
    c9ae:	4798      	blx	r3
    c9b0:	4603      	mov	r3, r0
    c9b2:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    c9b4:	2300      	movs	r3, #0
    c9b6:	613b      	str	r3, [r7, #16]
    c9b8:	e014      	b.n	c9e4 <_i2c_m_async_init+0x80>
		NVIC_DisableIRQ((IRQn_Type)irq);
    c9ba:	7dfb      	ldrb	r3, [r7, #23]
    c9bc:	b21b      	sxth	r3, r3
    c9be:	4618      	mov	r0, r3
    c9c0:	4b11      	ldr	r3, [pc, #68]	; (ca08 <_i2c_m_async_init+0xa4>)
    c9c2:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    c9c4:	7dfb      	ldrb	r3, [r7, #23]
    c9c6:	b21b      	sxth	r3, r3
    c9c8:	4618      	mov	r0, r3
    c9ca:	4b10      	ldr	r3, [pc, #64]	; (ca0c <_i2c_m_async_init+0xa8>)
    c9cc:	4798      	blx	r3
		NVIC_EnableIRQ((IRQn_Type)irq);
    c9ce:	7dfb      	ldrb	r3, [r7, #23]
    c9d0:	b21b      	sxth	r3, r3
    c9d2:	4618      	mov	r0, r3
    c9d4:	4b0e      	ldr	r3, [pc, #56]	; (ca10 <_i2c_m_async_init+0xac>)
    c9d6:	4798      	blx	r3
		irq++;
    c9d8:	7dfb      	ldrb	r3, [r7, #23]
    c9da:	3301      	adds	r3, #1
    c9dc:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    c9de:	693b      	ldr	r3, [r7, #16]
    c9e0:	3301      	adds	r3, #1
    c9e2:	613b      	str	r3, [r7, #16]
    c9e4:	693b      	ldr	r3, [r7, #16]
    c9e6:	2b03      	cmp	r3, #3
    c9e8:	d9e7      	bls.n	c9ba <_i2c_m_async_init+0x56>
	}
	return ERR_NONE;
    c9ea:	2300      	movs	r3, #0
}
    c9ec:	4618      	mov	r0, r3
    c9ee:	3718      	adds	r7, #24
    c9f0:	46bd      	mov	sp, r7
    c9f2:	bd80      	pop	{r7, pc}
    c9f4:	00013ffc 	.word	0x00013ffc
    c9f8:	000094ed 	.word	0x000094ed
    c9fc:	0000cc2d 	.word	0x0000cc2d
    ca00:	0000c535 	.word	0x0000c535
    ca04:	0000c941 	.word	0x0000c941
    ca08:	0000be0d 	.word	0x0000be0d
    ca0c:	0000be51 	.word	0x0000be51
    ca10:	0000bdd1 	.word	0x0000bdd1

0000ca14 <_sercom_i2c_send_address>:
 * \brief Transfer the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_send_address(struct _i2c_m_async_device *const i2c_dev)
{
    ca14:	b590      	push	{r4, r7, lr}
    ca16:	b087      	sub	sp, #28
    ca18:	af00      	add	r7, sp, #0
    ca1a:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    ca1c:	687b      	ldr	r3, [r7, #4]
    ca1e:	691b      	ldr	r3, [r3, #16]
    ca20:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    ca22:	687b      	ldr	r3, [r7, #4]
    ca24:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    ca26:	6978      	ldr	r0, [r7, #20]
    ca28:	4b33      	ldr	r3, [pc, #204]	; (caf8 <_sercom_i2c_send_address+0xe4>)
    ca2a:	4798      	blx	r3
    ca2c:	4603      	mov	r3, r0
    ca2e:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    ca30:	687b      	ldr	r3, [r7, #4]
    ca32:	2b00      	cmp	r3, #0
    ca34:	bf14      	ite	ne
    ca36:	2301      	movne	r3, #1
    ca38:	2300      	moveq	r3, #0
    ca3a:	b2db      	uxtb	r3, r3
    ca3c:	f240 42cc 	movw	r2, #1228	; 0x4cc
    ca40:	492e      	ldr	r1, [pc, #184]	; (cafc <_sercom_i2c_send_address+0xe8>)
    ca42:	4618      	mov	r0, r3
    ca44:	4b2e      	ldr	r3, [pc, #184]	; (cb00 <_sercom_i2c_send_address+0xec>)
    ca46:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    ca48:	693b      	ldr	r3, [r7, #16]
    ca4a:	685b      	ldr	r3, [r3, #4]
    ca4c:	2b01      	cmp	r3, #1
    ca4e:	d106      	bne.n	ca5e <_sercom_i2c_send_address+0x4a>
    ca50:	68fb      	ldr	r3, [r7, #12]
    ca52:	2b00      	cmp	r3, #0
    ca54:	d003      	beq.n	ca5e <_sercom_i2c_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    ca56:	6978      	ldr	r0, [r7, #20]
    ca58:	4b2a      	ldr	r3, [pc, #168]	; (cb04 <_sercom_i2c_send_address+0xf0>)
    ca5a:	4798      	blx	r3
    ca5c:	e002      	b.n	ca64 <_sercom_i2c_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    ca5e:	6978      	ldr	r0, [r7, #20]
    ca60:	4b29      	ldr	r3, [pc, #164]	; (cb08 <_sercom_i2c_send_address+0xf4>)
    ca62:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    ca64:	693b      	ldr	r3, [r7, #16]
    ca66:	881b      	ldrh	r3, [r3, #0]
    ca68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    ca6c:	2b00      	cmp	r3, #0
    ca6e:	d022      	beq.n	cab6 <_sercom_i2c_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    ca70:	693b      	ldr	r3, [r7, #16]
    ca72:	885b      	ldrh	r3, [r3, #2]
    ca74:	b29b      	uxth	r3, r3
    ca76:	f003 0301 	and.w	r3, r3, #1
    ca7a:	2b00      	cmp	r3, #0
    ca7c:	d007      	beq.n	ca8e <_sercom_i2c_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    ca7e:	693b      	ldr	r3, [r7, #16]
    ca80:	885b      	ldrh	r3, [r3, #2]
    ca82:	b29b      	uxth	r3, r3
    ca84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    ca88:	b29a      	uxth	r2, r3
    ca8a:	693b      	ldr	r3, [r7, #16]
    ca8c:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    ca8e:	693b      	ldr	r3, [r7, #16]
    ca90:	881b      	ldrh	r3, [r3, #0]
    ca92:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    ca94:	f240 74fe 	movw	r4, #2046	; 0x7fe
    ca98:	401c      	ands	r4, r3
    ca9a:	6978      	ldr	r0, [r7, #20]
    ca9c:	4b1b      	ldr	r3, [pc, #108]	; (cb0c <_sercom_i2c_send_address+0xf8>)
    ca9e:	4798      	blx	r3
    caa0:	4603      	mov	r3, r0
    caa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    caa6:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    caa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    caac:	4619      	mov	r1, r3
    caae:	6978      	ldr	r0, [r7, #20]
    cab0:	4b17      	ldr	r3, [pc, #92]	; (cb10 <_sercom_i2c_send_address+0xfc>)
    cab2:	4798      	blx	r3
    cab4:	e01a      	b.n	caec <_sercom_i2c_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    cab6:	693b      	ldr	r3, [r7, #16]
    cab8:	881b      	ldrh	r3, [r3, #0]
    caba:	005b      	lsls	r3, r3, #1
    cabc:	b2db      	uxtb	r3, r3
    cabe:	693a      	ldr	r2, [r7, #16]
    cac0:	8852      	ldrh	r2, [r2, #2]
    cac2:	b292      	uxth	r2, r2
    cac4:	f002 0201 	and.w	r2, r2, #1
    cac8:	2a00      	cmp	r2, #0
    caca:	bf14      	ite	ne
    cacc:	2201      	movne	r2, #1
    cace:	2200      	moveq	r2, #0
    cad0:	b2d2      	uxtb	r2, r2
    cad2:	4313      	orrs	r3, r2
    cad4:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    cad6:	6978      	ldr	r0, [r7, #20]
    cad8:	4b0c      	ldr	r3, [pc, #48]	; (cb0c <_sercom_i2c_send_address+0xf8>)
    cada:	4798      	blx	r3
    cadc:	4603      	mov	r3, r0
    cade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    cae2:	4323      	orrs	r3, r4
    cae4:	4619      	mov	r1, r3
    cae6:	6978      	ldr	r0, [r7, #20]
    cae8:	4b09      	ldr	r3, [pc, #36]	; (cb10 <_sercom_i2c_send_address+0xfc>)
    caea:	4798      	blx	r3
	}

	return ERR_NONE;
    caec:	2300      	movs	r3, #0
}
    caee:	4618      	mov	r0, r3
    caf0:	371c      	adds	r7, #28
    caf2:	46bd      	mov	sp, r7
    caf4:	bd90      	pop	{r4, r7, pc}
    caf6:	bf00      	nop
    caf8:	0000c0d1 	.word	0x0000c0d1
    cafc:	00013ffc 	.word	0x00013ffc
    cb00:	000094ed 	.word	0x000094ed
    cb04:	0000c259 	.word	0x0000c259
    cb08:	0000c281 	.word	0x0000c281
    cb0c:	0000c3c1 	.word	0x0000c3c1
    cb10:	0000c39d 	.word	0x0000c39d

0000cb14 <_i2c_m_async_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail, return the error code
 */
int32_t _i2c_m_async_transfer(struct _i2c_m_async_device *i2c_dev, struct _i2c_m_msg *msg)
{
    cb14:	b580      	push	{r7, lr}
    cb16:	b084      	sub	sp, #16
    cb18:	af00      	add	r7, sp, #0
    cb1a:	6078      	str	r0, [r7, #4]
    cb1c:	6039      	str	r1, [r7, #0]
	int ret;

	ASSERT(i2c_dev);
    cb1e:	687b      	ldr	r3, [r7, #4]
    cb20:	2b00      	cmp	r3, #0
    cb22:	bf14      	ite	ne
    cb24:	2301      	movne	r3, #1
    cb26:	2300      	moveq	r3, #0
    cb28:	b2db      	uxtb	r3, r3
    cb2a:	f240 42f4 	movw	r2, #1268	; 0x4f4
    cb2e:	492a      	ldr	r1, [pc, #168]	; (cbd8 <_i2c_m_async_transfer+0xc4>)
    cb30:	4618      	mov	r0, r3
    cb32:	4b2a      	ldr	r3, [pc, #168]	; (cbdc <_i2c_m_async_transfer+0xc8>)
    cb34:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    cb36:	687b      	ldr	r3, [r7, #4]
    cb38:	691b      	ldr	r3, [r3, #16]
    cb3a:	2b00      	cmp	r3, #0
    cb3c:	bf14      	ite	ne
    cb3e:	2301      	movne	r3, #1
    cb40:	2300      	moveq	r3, #0
    cb42:	b2db      	uxtb	r3, r3
    cb44:	f240 42f5 	movw	r2, #1269	; 0x4f5
    cb48:	4923      	ldr	r1, [pc, #140]	; (cbd8 <_i2c_m_async_transfer+0xc4>)
    cb4a:	4618      	mov	r0, r3
    cb4c:	4b23      	ldr	r3, [pc, #140]	; (cbdc <_i2c_m_async_transfer+0xc8>)
    cb4e:	4798      	blx	r3
	ASSERT(msg);
    cb50:	683b      	ldr	r3, [r7, #0]
    cb52:	2b00      	cmp	r3, #0
    cb54:	bf14      	ite	ne
    cb56:	2301      	movne	r3, #1
    cb58:	2300      	moveq	r3, #0
    cb5a:	b2db      	uxtb	r3, r3
    cb5c:	f240 42f6 	movw	r2, #1270	; 0x4f6
    cb60:	491d      	ldr	r1, [pc, #116]	; (cbd8 <_i2c_m_async_transfer+0xc4>)
    cb62:	4618      	mov	r0, r3
    cb64:	4b1d      	ldr	r3, [pc, #116]	; (cbdc <_i2c_m_async_transfer+0xc8>)
    cb66:	4798      	blx	r3

	if (msg->len == 0) {
    cb68:	683b      	ldr	r3, [r7, #0]
    cb6a:	685b      	ldr	r3, [r3, #4]
    cb6c:	2b00      	cmp	r3, #0
    cb6e:	d101      	bne.n	cb74 <_i2c_m_async_transfer+0x60>
		return ERR_NONE;
    cb70:	2300      	movs	r3, #0
    cb72:	e02d      	b.n	cbd0 <_i2c_m_async_transfer+0xbc>
	}

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    cb74:	687b      	ldr	r3, [r7, #4]
    cb76:	885b      	ldrh	r3, [r3, #2]
    cb78:	b29b      	uxth	r3, r3
    cb7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
    cb7e:	2b00      	cmp	r3, #0
    cb80:	d002      	beq.n	cb88 <_i2c_m_async_transfer+0x74>
		return ERR_BUSY;
    cb82:	f06f 0303 	mvn.w	r3, #3
    cb86:	e023      	b.n	cbd0 <_i2c_m_async_transfer+0xbc>
	}

	msg->flags |= I2C_M_BUSY;
    cb88:	683b      	ldr	r3, [r7, #0]
    cb8a:	885b      	ldrh	r3, [r3, #2]
    cb8c:	b29b      	uxth	r3, r3
    cb8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    cb92:	b29a      	uxth	r2, r3
    cb94:	683b      	ldr	r3, [r7, #0]
    cb96:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    cb98:	687b      	ldr	r3, [r7, #4]
    cb9a:	683a      	ldr	r2, [r7, #0]
    cb9c:	ca07      	ldmia	r2, {r0, r1, r2}
    cb9e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    cba2:	687b      	ldr	r3, [r7, #4]
    cba4:	691b      	ldr	r3, [r3, #16]
    cba6:	4618      	mov	r0, r3
    cba8:	4b0d      	ldr	r3, [pc, #52]	; (cbe0 <_i2c_m_async_transfer+0xcc>)
    cbaa:	4798      	blx	r3

	ret = _sercom_i2c_send_address(i2c_dev);
    cbac:	6878      	ldr	r0, [r7, #4]
    cbae:	4b0d      	ldr	r3, [pc, #52]	; (cbe4 <_i2c_m_async_transfer+0xd0>)
    cbb0:	4798      	blx	r3
    cbb2:	60f8      	str	r0, [r7, #12]

	if (ret) {
    cbb4:	68fb      	ldr	r3, [r7, #12]
    cbb6:	2b00      	cmp	r3, #0
    cbb8:	d009      	beq.n	cbce <_i2c_m_async_transfer+0xba>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    cbba:	687b      	ldr	r3, [r7, #4]
    cbbc:	885b      	ldrh	r3, [r3, #2]
    cbbe:	b29b      	uxth	r3, r3
    cbc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    cbc4:	b29a      	uxth	r2, r3
    cbc6:	687b      	ldr	r3, [r7, #4]
    cbc8:	805a      	strh	r2, [r3, #2]

		return ret;
    cbca:	68fb      	ldr	r3, [r7, #12]
    cbcc:	e000      	b.n	cbd0 <_i2c_m_async_transfer+0xbc>
	}

	return ERR_NONE;
    cbce:	2300      	movs	r3, #0
}
    cbd0:	4618      	mov	r0, r3
    cbd2:	3710      	adds	r7, #16
    cbd4:	46bd      	mov	sp, r7
    cbd6:	bd80      	pop	{r7, pc}
    cbd8:	00013ffc 	.word	0x00013ffc
    cbdc:	000094ed 	.word	0x000094ed
    cbe0:	0000c209 	.word	0x0000c209
    cbe4:	0000ca15 	.word	0x0000ca15

0000cbe8 <_i2c_m_async_register_callback>:
 * \param[in] type The callback type
 * \param[in] func The callback function pointer
 */
int32_t _i2c_m_async_register_callback(struct _i2c_m_async_device *const i2c_dev, enum _i2c_m_async_callback_type type,
                                       FUNC_PTR func)
{
    cbe8:	b480      	push	{r7}
    cbea:	b085      	sub	sp, #20
    cbec:	af00      	add	r7, sp, #0
    cbee:	60f8      	str	r0, [r7, #12]
    cbf0:	460b      	mov	r3, r1
    cbf2:	607a      	str	r2, [r7, #4]
    cbf4:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    cbf6:	7afb      	ldrb	r3, [r7, #11]
    cbf8:	2b01      	cmp	r3, #1
    cbfa:	d008      	beq.n	cc0e <_i2c_m_async_register_callback+0x26>
    cbfc:	2b02      	cmp	r3, #2
    cbfe:	d00a      	beq.n	cc16 <_i2c_m_async_register_callback+0x2e>
    cc00:	2b00      	cmp	r3, #0
    cc02:	d000      	beq.n	cc06 <_i2c_m_async_register_callback+0x1e>
	case I2C_M_ASYNC_DEVICE_RX_COMPLETE:
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
		break;
	default:
		/* error */
		break;
    cc04:	e00b      	b.n	cc1e <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    cc06:	68fb      	ldr	r3, [r7, #12]
    cc08:	687a      	ldr	r2, [r7, #4]
    cc0a:	615a      	str	r2, [r3, #20]
		break;
    cc0c:	e007      	b.n	cc1e <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    cc0e:	68fb      	ldr	r3, [r7, #12]
    cc10:	687a      	ldr	r2, [r7, #4]
    cc12:	619a      	str	r2, [r3, #24]
		break;
    cc14:	e003      	b.n	cc1e <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    cc16:	68fb      	ldr	r3, [r7, #12]
    cc18:	687a      	ldr	r2, [r7, #4]
    cc1a:	61da      	str	r2, [r3, #28]
		break;
    cc1c:	bf00      	nop
	}

	return ERR_NONE;
    cc1e:	2300      	movs	r3, #0
}
    cc20:	4618      	mov	r0, r3
    cc22:	3714      	adds	r7, #20
    cc24:	46bd      	mov	sp, r7
    cc26:	f85d 7b04 	ldr.w	r7, [sp], #4
    cc2a:	4770      	bx	lr

0000cc2c <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    cc2c:	b580      	push	{r7, lr}
    cc2e:	b084      	sub	sp, #16
    cc30:	af00      	add	r7, sp, #0
    cc32:	6078      	str	r0, [r7, #4]
    cc34:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    cc36:	6838      	ldr	r0, [r7, #0]
    cc38:	4b42      	ldr	r3, [pc, #264]	; (cd44 <_i2c_m_sync_init_impl+0x118>)
    cc3a:	4798      	blx	r3
    cc3c:	4603      	mov	r3, r0
    cc3e:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    cc40:	2101      	movs	r1, #1
    cc42:	6838      	ldr	r0, [r7, #0]
    cc44:	4b40      	ldr	r3, [pc, #256]	; (cd48 <_i2c_m_sync_init_impl+0x11c>)
    cc46:	4798      	blx	r3
    cc48:	4603      	mov	r3, r0
    cc4a:	f083 0301 	eor.w	r3, r3, #1
    cc4e:	b2db      	uxtb	r3, r3
    cc50:	2b00      	cmp	r3, #0
    cc52:	d020      	beq.n	cc96 <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    cc54:	7bfa      	ldrb	r2, [r7, #15]
    cc56:	493d      	ldr	r1, [pc, #244]	; (cd4c <_i2c_m_sync_init_impl+0x120>)
    cc58:	4613      	mov	r3, r2
    cc5a:	005b      	lsls	r3, r3, #1
    cc5c:	4413      	add	r3, r2
    cc5e:	00db      	lsls	r3, r3, #3
    cc60:	440b      	add	r3, r1
    cc62:	3304      	adds	r3, #4
    cc64:	681b      	ldr	r3, [r3, #0]
    cc66:	f003 031c 	and.w	r3, r3, #28
    cc6a:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    cc6c:	2102      	movs	r1, #2
    cc6e:	6838      	ldr	r0, [r7, #0]
    cc70:	4b37      	ldr	r3, [pc, #220]	; (cd50 <_i2c_m_sync_init_impl+0x124>)
    cc72:	4798      	blx	r3
    cc74:	4603      	mov	r3, r0
    cc76:	2b00      	cmp	r3, #0
    cc78:	d006      	beq.n	cc88 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    cc7a:	6838      	ldr	r0, [r7, #0]
    cc7c:	4b35      	ldr	r3, [pc, #212]	; (cd54 <_i2c_m_sync_init_impl+0x128>)
    cc7e:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    cc80:	2102      	movs	r1, #2
    cc82:	6838      	ldr	r0, [r7, #0]
    cc84:	4b34      	ldr	r3, [pc, #208]	; (cd58 <_i2c_m_sync_init_impl+0x12c>)
    cc86:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    cc88:	68bb      	ldr	r3, [r7, #8]
    cc8a:	f043 0301 	orr.w	r3, r3, #1
    cc8e:	4619      	mov	r1, r3
    cc90:	6838      	ldr	r0, [r7, #0]
    cc92:	4b32      	ldr	r3, [pc, #200]	; (cd5c <_i2c_m_sync_init_impl+0x130>)
    cc94:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    cc96:	2101      	movs	r1, #1
    cc98:	6838      	ldr	r0, [r7, #0]
    cc9a:	4b2f      	ldr	r3, [pc, #188]	; (cd58 <_i2c_m_sync_init_impl+0x12c>)
    cc9c:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    cc9e:	7bfa      	ldrb	r2, [r7, #15]
    cca0:	492a      	ldr	r1, [pc, #168]	; (cd4c <_i2c_m_sync_init_impl+0x120>)
    cca2:	4613      	mov	r3, r2
    cca4:	005b      	lsls	r3, r3, #1
    cca6:	4413      	add	r3, r2
    cca8:	00db      	lsls	r3, r3, #3
    ccaa:	440b      	add	r3, r1
    ccac:	3304      	adds	r3, #4
    ccae:	681b      	ldr	r3, [r3, #0]
    ccb0:	4619      	mov	r1, r3
    ccb2:	6838      	ldr	r0, [r7, #0]
    ccb4:	4b29      	ldr	r3, [pc, #164]	; (cd5c <_i2c_m_sync_init_impl+0x130>)
    ccb6:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    ccb8:	7bfa      	ldrb	r2, [r7, #15]
    ccba:	4924      	ldr	r1, [pc, #144]	; (cd4c <_i2c_m_sync_init_impl+0x120>)
    ccbc:	4613      	mov	r3, r2
    ccbe:	005b      	lsls	r3, r3, #1
    ccc0:	4413      	add	r3, r2
    ccc2:	00db      	lsls	r3, r3, #3
    ccc4:	440b      	add	r3, r1
    ccc6:	3308      	adds	r3, #8
    ccc8:	681b      	ldr	r3, [r3, #0]
    ccca:	4619      	mov	r1, r3
    cccc:	6838      	ldr	r0, [r7, #0]
    ccce:	4b24      	ldr	r3, [pc, #144]	; (cd60 <_i2c_m_sync_init_impl+0x134>)
    ccd0:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    ccd2:	7bfa      	ldrb	r2, [r7, #15]
    ccd4:	491d      	ldr	r1, [pc, #116]	; (cd4c <_i2c_m_sync_init_impl+0x120>)
    ccd6:	4613      	mov	r3, r2
    ccd8:	005b      	lsls	r3, r3, #1
    ccda:	4413      	add	r3, r2
    ccdc:	00db      	lsls	r3, r3, #3
    ccde:	440b      	add	r3, r1
    cce0:	330c      	adds	r3, #12
    cce2:	681b      	ldr	r3, [r3, #0]
    cce4:	4619      	mov	r1, r3
    cce6:	6838      	ldr	r0, [r7, #0]
    cce8:	4b1e      	ldr	r3, [pc, #120]	; (cd64 <_i2c_m_sync_init_impl+0x138>)
    ccea:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    ccec:	7bfa      	ldrb	r2, [r7, #15]
    ccee:	4917      	ldr	r1, [pc, #92]	; (cd4c <_i2c_m_sync_init_impl+0x120>)
    ccf0:	4613      	mov	r3, r2
    ccf2:	005b      	lsls	r3, r3, #1
    ccf4:	4413      	add	r3, r2
    ccf6:	00db      	lsls	r3, r3, #3
    ccf8:	440b      	add	r3, r1
    ccfa:	3304      	adds	r3, #4
    ccfc:	681b      	ldr	r3, [r3, #0]
    ccfe:	0e1b      	lsrs	r3, r3, #24
    cd00:	b29b      	uxth	r3, r3
    cd02:	f003 0303 	and.w	r3, r3, #3
    cd06:	b29a      	uxth	r2, r3
    cd08:	687b      	ldr	r3, [r7, #4]
    cd0a:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    cd0c:	687b      	ldr	r3, [r7, #4]
    cd0e:	899b      	ldrh	r3, [r3, #12]
    cd10:	2b01      	cmp	r3, #1
    cd12:	bf8c      	ite	hi
    cd14:	2301      	movhi	r3, #1
    cd16:	2300      	movls	r3, #0
    cd18:	b2db      	uxtb	r3, r3
    cd1a:	4619      	mov	r1, r3
    cd1c:	6838      	ldr	r0, [r7, #0]
    cd1e:	4b12      	ldr	r3, [pc, #72]	; (cd68 <_i2c_m_sync_init_impl+0x13c>)
    cd20:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    cd22:	7bfa      	ldrb	r2, [r7, #15]
    cd24:	4909      	ldr	r1, [pc, #36]	; (cd4c <_i2c_m_sync_init_impl+0x120>)
    cd26:	4613      	mov	r3, r2
    cd28:	005b      	lsls	r3, r3, #1
    cd2a:	4413      	add	r3, r2
    cd2c:	00db      	lsls	r3, r3, #3
    cd2e:	440b      	add	r3, r1
    cd30:	3312      	adds	r3, #18
    cd32:	881a      	ldrh	r2, [r3, #0]
    cd34:	687b      	ldr	r3, [r7, #4]
    cd36:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    cd38:	2300      	movs	r3, #0
}
    cd3a:	4618      	mov	r0, r3
    cd3c:	3710      	adds	r7, #16
    cd3e:	46bd      	mov	sp, r7
    cd40:	bd80      	pop	{r7, pc}
    cd42:	bf00      	nop
    cd44:	0000c589 	.word	0x0000c589
    cd48:	0000beb1 	.word	0x0000beb1
    cd4c:	20000410 	.word	0x20000410
    cd50:	0000c101 	.word	0x0000c101
    cd54:	0000c0a9 	.word	0x0000c0a9
    cd58:	0000be8d 	.word	0x0000be8d
    cd5c:	0000c131 	.word	0x0000c131
    cd60:	0000c2d9 	.word	0x0000c2d9
    cd64:	0000c321 	.word	0x0000c321
    cd68:	0000c35d 	.word	0x0000c35d

0000cd6c <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    cd6c:	b580      	push	{r7, lr}
    cd6e:	b082      	sub	sp, #8
    cd70:	af00      	add	r7, sp, #0
    cd72:	6078      	str	r0, [r7, #4]
    cd74:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    cd76:	687b      	ldr	r3, [r7, #4]
    cd78:	2b00      	cmp	r3, #0
    cd7a:	d004      	beq.n	cd86 <_spi_load_regs_master+0x1a>
    cd7c:	683b      	ldr	r3, [r7, #0]
    cd7e:	2b00      	cmp	r3, #0
    cd80:	d001      	beq.n	cd86 <_spi_load_regs_master+0x1a>
    cd82:	2301      	movs	r3, #1
    cd84:	e000      	b.n	cd88 <_spi_load_regs_master+0x1c>
    cd86:	2300      	movs	r3, #0
    cd88:	f003 0301 	and.w	r3, r3, #1
    cd8c:	b2db      	uxtb	r3, r3
    cd8e:	f640 1242 	movw	r2, #2370	; 0x942
    cd92:	4915      	ldr	r1, [pc, #84]	; (cde8 <_spi_load_regs_master+0x7c>)
    cd94:	4618      	mov	r0, r3
    cd96:	4b15      	ldr	r3, [pc, #84]	; (cdec <_spi_load_regs_master+0x80>)
    cd98:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    cd9a:	683b      	ldr	r3, [r7, #0]
    cd9c:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    cd9e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    cda2:	f023 0301 	bic.w	r3, r3, #1
    cda6:	4619      	mov	r1, r3
    cda8:	6878      	ldr	r0, [r7, #4]
    cdaa:	4b11      	ldr	r3, [pc, #68]	; (cdf0 <_spi_load_regs_master+0x84>)
    cdac:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    cdae:	683b      	ldr	r3, [r7, #0]
    cdb0:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    cdb2:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    cdb6:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    cdba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    cdbe:	4619      	mov	r1, r3
    cdc0:	6878      	ldr	r0, [r7, #4]
    cdc2:	4b0c      	ldr	r3, [pc, #48]	; (cdf4 <_spi_load_regs_master+0x88>)
    cdc4:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    cdc6:	683b      	ldr	r3, [r7, #0]
    cdc8:	7b1b      	ldrb	r3, [r3, #12]
    cdca:	4619      	mov	r1, r3
    cdcc:	6878      	ldr	r0, [r7, #4]
    cdce:	4b0a      	ldr	r3, [pc, #40]	; (cdf8 <_spi_load_regs_master+0x8c>)
    cdd0:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    cdd2:	683b      	ldr	r3, [r7, #0]
    cdd4:	7b5b      	ldrb	r3, [r3, #13]
    cdd6:	4619      	mov	r1, r3
    cdd8:	6878      	ldr	r0, [r7, #4]
    cdda:	4b08      	ldr	r3, [pc, #32]	; (cdfc <_spi_load_regs_master+0x90>)
    cddc:	4798      	blx	r3
}
    cdde:	bf00      	nop
    cde0:	3708      	adds	r7, #8
    cde2:	46bd      	mov	sp, r7
    cde4:	bd80      	pop	{r7, pc}
    cde6:	bf00      	nop
    cde8:	00013ffc 	.word	0x00013ffc
    cdec:	000094ed 	.word	0x000094ed
    cdf0:	0000c1e5 	.word	0x0000c1e5
    cdf4:	0000c2fd 	.word	0x0000c2fd
    cdf8:	0000c33d 	.word	0x0000c33d
    cdfc:	0000c475 	.word	0x0000c475

0000ce00 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    ce00:	b580      	push	{r7, lr}
    ce02:	b082      	sub	sp, #8
    ce04:	af00      	add	r7, sp, #0
    ce06:	6078      	str	r0, [r7, #4]
    ce08:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    ce0a:	687b      	ldr	r3, [r7, #4]
    ce0c:	2b00      	cmp	r3, #0
    ce0e:	d004      	beq.n	ce1a <_spi_load_regs_slave+0x1a>
    ce10:	683b      	ldr	r3, [r7, #0]
    ce12:	2b00      	cmp	r3, #0
    ce14:	d001      	beq.n	ce1a <_spi_load_regs_slave+0x1a>
    ce16:	2301      	movs	r3, #1
    ce18:	e000      	b.n	ce1c <_spi_load_regs_slave+0x1c>
    ce1a:	2300      	movs	r3, #0
    ce1c:	f003 0301 	and.w	r3, r3, #1
    ce20:	b2db      	uxtb	r3, r3
    ce22:	f640 1256 	movw	r2, #2390	; 0x956
    ce26:	491a      	ldr	r1, [pc, #104]	; (ce90 <_spi_load_regs_slave+0x90>)
    ce28:	4618      	mov	r0, r3
    ce2a:	4b1a      	ldr	r3, [pc, #104]	; (ce94 <_spi_load_regs_slave+0x94>)
    ce2c:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    ce2e:	683b      	ldr	r3, [r7, #0]
    ce30:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    ce32:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    ce36:	f023 0301 	bic.w	r3, r3, #1
    ce3a:	4619      	mov	r1, r3
    ce3c:	6878      	ldr	r0, [r7, #4]
    ce3e:	4b16      	ldr	r3, [pc, #88]	; (ce98 <_spi_load_regs_slave+0x98>)
    ce40:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    ce42:	683b      	ldr	r3, [r7, #0]
    ce44:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    ce46:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    ce4a:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    ce4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    ce52:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    ce56:	4619      	mov	r1, r3
    ce58:	6878      	ldr	r0, [r7, #4]
    ce5a:	4b10      	ldr	r3, [pc, #64]	; (ce9c <_spi_load_regs_slave+0x9c>)
    ce5c:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    ce5e:	683b      	ldr	r3, [r7, #0]
    ce60:	689b      	ldr	r3, [r3, #8]
    ce62:	4619      	mov	r1, r3
    ce64:	6878      	ldr	r0, [r7, #4]
    ce66:	4b0e      	ldr	r3, [pc, #56]	; (cea0 <_spi_load_regs_slave+0xa0>)
    ce68:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    ce6a:	683b      	ldr	r3, [r7, #0]
    ce6c:	7b5b      	ldrb	r3, [r3, #13]
    ce6e:	4619      	mov	r1, r3
    ce70:	6878      	ldr	r0, [r7, #4]
    ce72:	4b0c      	ldr	r3, [pc, #48]	; (cea4 <_spi_load_regs_slave+0xa4>)
    ce74:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    ce76:	bf00      	nop
    ce78:	f04f 31ff 	mov.w	r1, #4294967295
    ce7c:	6878      	ldr	r0, [r7, #4]
    ce7e:	4b0a      	ldr	r3, [pc, #40]	; (cea8 <_spi_load_regs_slave+0xa8>)
    ce80:	4798      	blx	r3
    ce82:	4603      	mov	r3, r0
    ce84:	2b00      	cmp	r3, #0
    ce86:	d1f7      	bne.n	ce78 <_spi_load_regs_slave+0x78>
		;
}
    ce88:	bf00      	nop
    ce8a:	3708      	adds	r7, #8
    ce8c:	46bd      	mov	sp, r7
    ce8e:	bd80      	pop	{r7, pc}
    ce90:	00013ffc 	.word	0x00013ffc
    ce94:	000094ed 	.word	0x000094ed
    ce98:	0000c1e5 	.word	0x0000c1e5
    ce9c:	0000c2fd 	.word	0x0000c2fd
    cea0:	0000c3e1 	.word	0x0000c3e1
    cea4:	0000c475 	.word	0x0000c475
    cea8:	0000befd 	.word	0x0000befd

0000ceac <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    ceac:	b580      	push	{r7, lr}
    ceae:	b084      	sub	sp, #16
    ceb0:	af00      	add	r7, sp, #0
    ceb2:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    ceb4:	687b      	ldr	r3, [r7, #4]
    ceb6:	4618      	mov	r0, r3
    ceb8:	4b11      	ldr	r3, [pc, #68]	; (cf00 <_spi_get_regs+0x54>)
    ceba:	4798      	blx	r3
    cebc:	4603      	mov	r3, r0
    cebe:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    cec0:	2300      	movs	r3, #0
    cec2:	73fb      	strb	r3, [r7, #15]
    cec4:	e014      	b.n	cef0 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    cec6:	7bfa      	ldrb	r2, [r7, #15]
    cec8:	490e      	ldr	r1, [pc, #56]	; (cf04 <_spi_get_regs+0x58>)
    ceca:	4613      	mov	r3, r2
    cecc:	011b      	lsls	r3, r3, #4
    cece:	4413      	add	r3, r2
    ced0:	440b      	add	r3, r1
    ced2:	3310      	adds	r3, #16
    ced4:	781b      	ldrb	r3, [r3, #0]
    ced6:	7bba      	ldrb	r2, [r7, #14]
    ced8:	429a      	cmp	r2, r3
    ceda:	d106      	bne.n	ceea <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    cedc:	7bfa      	ldrb	r2, [r7, #15]
    cede:	4613      	mov	r3, r2
    cee0:	011b      	lsls	r3, r3, #4
    cee2:	4413      	add	r3, r2
    cee4:	4a07      	ldr	r2, [pc, #28]	; (cf04 <_spi_get_regs+0x58>)
    cee6:	4413      	add	r3, r2
    cee8:	e006      	b.n	cef8 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    ceea:	7bfb      	ldrb	r3, [r7, #15]
    ceec:	3301      	adds	r3, #1
    ceee:	73fb      	strb	r3, [r7, #15]
    cef0:	7bfb      	ldrb	r3, [r7, #15]
    cef2:	2b01      	cmp	r3, #1
    cef4:	d9e7      	bls.n	cec6 <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    cef6:	2300      	movs	r3, #0
}
    cef8:	4618      	mov	r0, r3
    cefa:	3710      	adds	r7, #16
    cefc:	46bd      	mov	sp, r7
    cefe:	bd80      	pop	{r7, pc}
    cf00:	0000c4d9 	.word	0x0000c4d9
    cf04:	00014038 	.word	0x00014038

0000cf08 <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    cf08:	b580      	push	{r7, lr}
    cf0a:	b084      	sub	sp, #16
    cf0c:	af00      	add	r7, sp, #0
    cf0e:	6078      	str	r0, [r7, #4]
	void *                      hw = dev->prvt;
    cf10:	687b      	ldr	r3, [r7, #4]
    cf12:	681b      	ldr	r3, [r3, #0]
    cf14:	60fb      	str	r3, [r7, #12]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
    cf16:	68f8      	ldr	r0, [r7, #12]
    cf18:	4b21      	ldr	r3, [pc, #132]	; (cfa0 <_spi_handler+0x98>)
    cf1a:	4798      	blx	r3
    cf1c:	4603      	mov	r3, r0
    cf1e:	72fb      	strb	r3, [r7, #11]
	st &= hri_sercomspi_read_INTEN_reg(hw);
    cf20:	68f8      	ldr	r0, [r7, #12]
    cf22:	4b20      	ldr	r3, [pc, #128]	; (cfa4 <_spi_handler+0x9c>)
    cf24:	4798      	blx	r3
    cf26:	4603      	mov	r3, r0
    cf28:	461a      	mov	r2, r3
    cf2a:	7afb      	ldrb	r3, [r7, #11]
    cf2c:	4013      	ands	r3, r2
    cf2e:	72fb      	strb	r3, [r7, #11]

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    cf30:	7afb      	ldrb	r3, [r7, #11]
    cf32:	f003 0301 	and.w	r3, r3, #1
    cf36:	2b00      	cmp	r3, #0
    cf38:	d004      	beq.n	cf44 <_spi_handler+0x3c>
		dev->callbacks.tx(dev);
    cf3a:	687b      	ldr	r3, [r7, #4]
    cf3c:	689b      	ldr	r3, [r3, #8]
    cf3e:	6878      	ldr	r0, [r7, #4]
    cf40:	4798      	blx	r3
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
	}
}
    cf42:	e029      	b.n	cf98 <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    cf44:	7afb      	ldrb	r3, [r7, #11]
    cf46:	f003 0304 	and.w	r3, r3, #4
    cf4a:	2b00      	cmp	r3, #0
    cf4c:	d004      	beq.n	cf58 <_spi_handler+0x50>
		dev->callbacks.rx(dev);
    cf4e:	687b      	ldr	r3, [r7, #4]
    cf50:	68db      	ldr	r3, [r3, #12]
    cf52:	6878      	ldr	r0, [r7, #4]
    cf54:	4798      	blx	r3
}
    cf56:	e01f      	b.n	cf98 <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    cf58:	7afb      	ldrb	r3, [r7, #11]
    cf5a:	f003 0302 	and.w	r3, r3, #2
    cf5e:	2b00      	cmp	r3, #0
    cf60:	d008      	beq.n	cf74 <_spi_handler+0x6c>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
    cf62:	2102      	movs	r1, #2
    cf64:	68f8      	ldr	r0, [r7, #12]
    cf66:	4b10      	ldr	r3, [pc, #64]	; (cfa8 <_spi_handler+0xa0>)
    cf68:	4798      	blx	r3
		dev->callbacks.complete(dev);
    cf6a:	687b      	ldr	r3, [r7, #4]
    cf6c:	691b      	ldr	r3, [r3, #16]
    cf6e:	6878      	ldr	r0, [r7, #4]
    cf70:	4798      	blx	r3
}
    cf72:	e011      	b.n	cf98 <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    cf74:	f997 300b 	ldrsb.w	r3, [r7, #11]
    cf78:	2b00      	cmp	r3, #0
    cf7a:	da0d      	bge.n	cf98 <_spi_handler+0x90>
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
    cf7c:	2104      	movs	r1, #4
    cf7e:	68f8      	ldr	r0, [r7, #12]
    cf80:	4b0a      	ldr	r3, [pc, #40]	; (cfac <_spi_handler+0xa4>)
    cf82:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    cf84:	2180      	movs	r1, #128	; 0x80
    cf86:	68f8      	ldr	r0, [r7, #12]
    cf88:	4b07      	ldr	r3, [pc, #28]	; (cfa8 <_spi_handler+0xa0>)
    cf8a:	4798      	blx	r3
		dev->callbacks.err(dev, ERR_OVERFLOW);
    cf8c:	687b      	ldr	r3, [r7, #4]
    cf8e:	695b      	ldr	r3, [r3, #20]
    cf90:	f06f 0112 	mvn.w	r1, #18
    cf94:	6878      	ldr	r0, [r7, #4]
    cf96:	4798      	blx	r3
}
    cf98:	bf00      	nop
    cf9a:	3710      	adds	r7, #16
    cf9c:	46bd      	mov	sp, r7
    cf9e:	bd80      	pop	{r7, pc}
    cfa0:	0000bfb9 	.word	0x0000bfb9
    cfa4:	0000c08d 	.word	0x0000c08d
    cfa8:	0000bfd3 	.word	0x0000bfd3
    cfac:	0000c495 	.word	0x0000c495

0000cfb0 <SERCOM4_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_0_Handler(void)
{
    cfb0:	b580      	push	{r7, lr}
    cfb2:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    cfb4:	4b03      	ldr	r3, [pc, #12]	; (cfc4 <SERCOM4_0_Handler+0x14>)
    cfb6:	681b      	ldr	r3, [r3, #0]
    cfb8:	4618      	mov	r0, r3
    cfba:	4b03      	ldr	r3, [pc, #12]	; (cfc8 <SERCOM4_0_Handler+0x18>)
    cfbc:	4798      	blx	r3
}
    cfbe:	bf00      	nop
    cfc0:	bd80      	pop	{r7, pc}
    cfc2:	bf00      	nop
    cfc4:	200015ac 	.word	0x200015ac
    cfc8:	0000cf09 	.word	0x0000cf09

0000cfcc <SERCOM4_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_1_Handler(void)
{
    cfcc:	b580      	push	{r7, lr}
    cfce:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    cfd0:	4b03      	ldr	r3, [pc, #12]	; (cfe0 <SERCOM4_1_Handler+0x14>)
    cfd2:	681b      	ldr	r3, [r3, #0]
    cfd4:	4618      	mov	r0, r3
    cfd6:	4b03      	ldr	r3, [pc, #12]	; (cfe4 <SERCOM4_1_Handler+0x18>)
    cfd8:	4798      	blx	r3
}
    cfda:	bf00      	nop
    cfdc:	bd80      	pop	{r7, pc}
    cfde:	bf00      	nop
    cfe0:	200015ac 	.word	0x200015ac
    cfe4:	0000cf09 	.word	0x0000cf09

0000cfe8 <SERCOM4_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_2_Handler(void)
{
    cfe8:	b580      	push	{r7, lr}
    cfea:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    cfec:	4b03      	ldr	r3, [pc, #12]	; (cffc <SERCOM4_2_Handler+0x14>)
    cfee:	681b      	ldr	r3, [r3, #0]
    cff0:	4618      	mov	r0, r3
    cff2:	4b03      	ldr	r3, [pc, #12]	; (d000 <SERCOM4_2_Handler+0x18>)
    cff4:	4798      	blx	r3
}
    cff6:	bf00      	nop
    cff8:	bd80      	pop	{r7, pc}
    cffa:	bf00      	nop
    cffc:	200015ac 	.word	0x200015ac
    d000:	0000cf09 	.word	0x0000cf09

0000d004 <SERCOM4_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_3_Handler(void)
{
    d004:	b580      	push	{r7, lr}
    d006:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    d008:	4b03      	ldr	r3, [pc, #12]	; (d018 <SERCOM4_3_Handler+0x14>)
    d00a:	681b      	ldr	r3, [r3, #0]
    d00c:	4618      	mov	r0, r3
    d00e:	4b03      	ldr	r3, [pc, #12]	; (d01c <SERCOM4_3_Handler+0x18>)
    d010:	4798      	blx	r3
}
    d012:	bf00      	nop
    d014:	bd80      	pop	{r7, pc}
    d016:	bf00      	nop
    d018:	200015ac 	.word	0x200015ac
    d01c:	0000cf09 	.word	0x0000cf09

0000d020 <SERCOM5_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_0_Handler(void)
{
    d020:	b580      	push	{r7, lr}
    d022:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    d024:	4b03      	ldr	r3, [pc, #12]	; (d034 <SERCOM5_0_Handler+0x14>)
    d026:	681b      	ldr	r3, [r3, #0]
    d028:	4618      	mov	r0, r3
    d02a:	4b03      	ldr	r3, [pc, #12]	; (d038 <SERCOM5_0_Handler+0x18>)
    d02c:	4798      	blx	r3
}
    d02e:	bf00      	nop
    d030:	bd80      	pop	{r7, pc}
    d032:	bf00      	nop
    d034:	200015b0 	.word	0x200015b0
    d038:	0000c83d 	.word	0x0000c83d

0000d03c <SERCOM5_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_1_Handler(void)
{
    d03c:	b580      	push	{r7, lr}
    d03e:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    d040:	4b03      	ldr	r3, [pc, #12]	; (d050 <SERCOM5_1_Handler+0x14>)
    d042:	681b      	ldr	r3, [r3, #0]
    d044:	4618      	mov	r0, r3
    d046:	4b03      	ldr	r3, [pc, #12]	; (d054 <SERCOM5_1_Handler+0x18>)
    d048:	4798      	blx	r3
}
    d04a:	bf00      	nop
    d04c:	bd80      	pop	{r7, pc}
    d04e:	bf00      	nop
    d050:	200015b0 	.word	0x200015b0
    d054:	0000c83d 	.word	0x0000c83d

0000d058 <SERCOM5_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_2_Handler(void)
{
    d058:	b580      	push	{r7, lr}
    d05a:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    d05c:	4b03      	ldr	r3, [pc, #12]	; (d06c <SERCOM5_2_Handler+0x14>)
    d05e:	681b      	ldr	r3, [r3, #0]
    d060:	4618      	mov	r0, r3
    d062:	4b03      	ldr	r3, [pc, #12]	; (d070 <SERCOM5_2_Handler+0x18>)
    d064:	4798      	blx	r3
}
    d066:	bf00      	nop
    d068:	bd80      	pop	{r7, pc}
    d06a:	bf00      	nop
    d06c:	200015b0 	.word	0x200015b0
    d070:	0000c83d 	.word	0x0000c83d

0000d074 <SERCOM5_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_3_Handler(void)
{
    d074:	b580      	push	{r7, lr}
    d076:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    d078:	4b03      	ldr	r3, [pc, #12]	; (d088 <SERCOM5_3_Handler+0x14>)
    d07a:	681b      	ldr	r3, [r3, #0]
    d07c:	4618      	mov	r0, r3
    d07e:	4b03      	ldr	r3, [pc, #12]	; (d08c <SERCOM5_3_Handler+0x18>)
    d080:	4798      	blx	r3
}
    d082:	bf00      	nop
    d084:	bd80      	pop	{r7, pc}
    d086:	bf00      	nop
    d088:	200015b0 	.word	0x200015b0
    d08c:	0000c83d 	.word	0x0000c83d

0000d090 <SERCOM7_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_0_Handler(void)
{
    d090:	b580      	push	{r7, lr}
    d092:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    d094:	4b03      	ldr	r3, [pc, #12]	; (d0a4 <SERCOM7_0_Handler+0x14>)
    d096:	681b      	ldr	r3, [r3, #0]
    d098:	4618      	mov	r0, r3
    d09a:	4b03      	ldr	r3, [pc, #12]	; (d0a8 <SERCOM7_0_Handler+0x18>)
    d09c:	4798      	blx	r3
}
    d09e:	bf00      	nop
    d0a0:	bd80      	pop	{r7, pc}
    d0a2:	bf00      	nop
    d0a4:	200015b4 	.word	0x200015b4
    d0a8:	0000c83d 	.word	0x0000c83d

0000d0ac <SERCOM7_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_1_Handler(void)
{
    d0ac:	b580      	push	{r7, lr}
    d0ae:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    d0b0:	4b03      	ldr	r3, [pc, #12]	; (d0c0 <SERCOM7_1_Handler+0x14>)
    d0b2:	681b      	ldr	r3, [r3, #0]
    d0b4:	4618      	mov	r0, r3
    d0b6:	4b03      	ldr	r3, [pc, #12]	; (d0c4 <SERCOM7_1_Handler+0x18>)
    d0b8:	4798      	blx	r3
}
    d0ba:	bf00      	nop
    d0bc:	bd80      	pop	{r7, pc}
    d0be:	bf00      	nop
    d0c0:	200015b4 	.word	0x200015b4
    d0c4:	0000c83d 	.word	0x0000c83d

0000d0c8 <SERCOM7_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_2_Handler(void)
{
    d0c8:	b580      	push	{r7, lr}
    d0ca:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    d0cc:	4b03      	ldr	r3, [pc, #12]	; (d0dc <SERCOM7_2_Handler+0x14>)
    d0ce:	681b      	ldr	r3, [r3, #0]
    d0d0:	4618      	mov	r0, r3
    d0d2:	4b03      	ldr	r3, [pc, #12]	; (d0e0 <SERCOM7_2_Handler+0x18>)
    d0d4:	4798      	blx	r3
}
    d0d6:	bf00      	nop
    d0d8:	bd80      	pop	{r7, pc}
    d0da:	bf00      	nop
    d0dc:	200015b4 	.word	0x200015b4
    d0e0:	0000c83d 	.word	0x0000c83d

0000d0e4 <SERCOM7_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_3_Handler(void)
{
    d0e4:	b580      	push	{r7, lr}
    d0e6:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    d0e8:	4b03      	ldr	r3, [pc, #12]	; (d0f8 <SERCOM7_3_Handler+0x14>)
    d0ea:	681b      	ldr	r3, [r3, #0]
    d0ec:	4618      	mov	r0, r3
    d0ee:	4b03      	ldr	r3, [pc, #12]	; (d0fc <SERCOM7_3_Handler+0x18>)
    d0f0:	4798      	blx	r3
}
    d0f2:	bf00      	nop
    d0f4:	bd80      	pop	{r7, pc}
    d0f6:	bf00      	nop
    d0f8:	200015b4 	.word	0x200015b4
    d0fc:	0000c83d 	.word	0x0000c83d

0000d100 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    d100:	b580      	push	{r7, lr}
    d102:	b084      	sub	sp, #16
    d104:	af00      	add	r7, sp, #0
    d106:	6078      	str	r0, [r7, #4]
    d108:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    d10a:	683b      	ldr	r3, [r7, #0]
    d10c:	4618      	mov	r0, r3
    d10e:	4b35      	ldr	r3, [pc, #212]	; (d1e4 <_spi_m_sync_init+0xe4>)
    d110:	4798      	blx	r3
    d112:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    d114:	687b      	ldr	r3, [r7, #4]
    d116:	2b00      	cmp	r3, #0
    d118:	d004      	beq.n	d124 <_spi_m_sync_init+0x24>
    d11a:	683b      	ldr	r3, [r7, #0]
    d11c:	2b00      	cmp	r3, #0
    d11e:	d001      	beq.n	d124 <_spi_m_sync_init+0x24>
    d120:	2301      	movs	r3, #1
    d122:	e000      	b.n	d126 <_spi_m_sync_init+0x26>
    d124:	2300      	movs	r3, #0
    d126:	f003 0301 	and.w	r3, r3, #1
    d12a:	b2db      	uxtb	r3, r3
    d12c:	f640 12e9 	movw	r2, #2537	; 0x9e9
    d130:	492d      	ldr	r1, [pc, #180]	; (d1e8 <_spi_m_sync_init+0xe8>)
    d132:	4618      	mov	r0, r3
    d134:	4b2d      	ldr	r3, [pc, #180]	; (d1ec <_spi_m_sync_init+0xec>)
    d136:	4798      	blx	r3

	if (regs == NULL) {
    d138:	68fb      	ldr	r3, [r7, #12]
    d13a:	2b00      	cmp	r3, #0
    d13c:	d102      	bne.n	d144 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    d13e:	f06f 030c 	mvn.w	r3, #12
    d142:	e04a      	b.n	d1da <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    d144:	2101      	movs	r1, #1
    d146:	6838      	ldr	r0, [r7, #0]
    d148:	4b29      	ldr	r3, [pc, #164]	; (d1f0 <_spi_m_sync_init+0xf0>)
    d14a:	4798      	blx	r3
    d14c:	4603      	mov	r3, r0
    d14e:	f083 0301 	eor.w	r3, r3, #1
    d152:	b2db      	uxtb	r3, r3
    d154:	2b00      	cmp	r3, #0
    d156:	d019      	beq.n	d18c <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    d158:	68fb      	ldr	r3, [r7, #12]
    d15a:	681b      	ldr	r3, [r3, #0]
    d15c:	f003 031c 	and.w	r3, r3, #28
    d160:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    d162:	2102      	movs	r1, #2
    d164:	6838      	ldr	r0, [r7, #0]
    d166:	4b23      	ldr	r3, [pc, #140]	; (d1f4 <_spi_m_sync_init+0xf4>)
    d168:	4798      	blx	r3
    d16a:	4603      	mov	r3, r0
    d16c:	2b00      	cmp	r3, #0
    d16e:	d006      	beq.n	d17e <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    d170:	6838      	ldr	r0, [r7, #0]
    d172:	4b21      	ldr	r3, [pc, #132]	; (d1f8 <_spi_m_sync_init+0xf8>)
    d174:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    d176:	2102      	movs	r1, #2
    d178:	6838      	ldr	r0, [r7, #0]
    d17a:	4b20      	ldr	r3, [pc, #128]	; (d1fc <_spi_m_sync_init+0xfc>)
    d17c:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    d17e:	68bb      	ldr	r3, [r7, #8]
    d180:	f043 0301 	orr.w	r3, r3, #1
    d184:	4619      	mov	r1, r3
    d186:	6838      	ldr	r0, [r7, #0]
    d188:	4b1d      	ldr	r3, [pc, #116]	; (d200 <_spi_m_sync_init+0x100>)
    d18a:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    d18c:	2101      	movs	r1, #1
    d18e:	6838      	ldr	r0, [r7, #0]
    d190:	4b1a      	ldr	r3, [pc, #104]	; (d1fc <_spi_m_sync_init+0xfc>)
    d192:	4798      	blx	r3

	dev->prvt = hw;
    d194:	687b      	ldr	r3, [r7, #4]
    d196:	683a      	ldr	r2, [r7, #0]
    d198:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    d19a:	68fb      	ldr	r3, [r7, #12]
    d19c:	681b      	ldr	r3, [r3, #0]
    d19e:	f003 031c 	and.w	r3, r3, #28
    d1a2:	2b08      	cmp	r3, #8
    d1a4:	d104      	bne.n	d1b0 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    d1a6:	68f9      	ldr	r1, [r7, #12]
    d1a8:	6838      	ldr	r0, [r7, #0]
    d1aa:	4b16      	ldr	r3, [pc, #88]	; (d204 <_spi_m_sync_init+0x104>)
    d1ac:	4798      	blx	r3
    d1ae:	e003      	b.n	d1b8 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    d1b0:	68f9      	ldr	r1, [r7, #12]
    d1b2:	6838      	ldr	r0, [r7, #0]
    d1b4:	4b14      	ldr	r3, [pc, #80]	; (d208 <_spi_m_sync_init+0x108>)
    d1b6:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    d1b8:	68fb      	ldr	r3, [r7, #12]
    d1ba:	685b      	ldr	r3, [r3, #4]
    d1bc:	f003 0307 	and.w	r3, r3, #7
    d1c0:	2b00      	cmp	r3, #0
    d1c2:	d101      	bne.n	d1c8 <_spi_m_sync_init+0xc8>
    d1c4:	2201      	movs	r2, #1
    d1c6:	e000      	b.n	d1ca <_spi_m_sync_init+0xca>
    d1c8:	2202      	movs	r2, #2
    d1ca:	687b      	ldr	r3, [r7, #4]
    d1cc:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    d1ce:	68fb      	ldr	r3, [r7, #12]
    d1d0:	89db      	ldrh	r3, [r3, #14]
    d1d2:	b29a      	uxth	r2, r3
    d1d4:	687b      	ldr	r3, [r7, #4]
    d1d6:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    d1d8:	2300      	movs	r3, #0
}
    d1da:	4618      	mov	r0, r3
    d1dc:	3710      	adds	r7, #16
    d1de:	46bd      	mov	sp, r7
    d1e0:	bd80      	pop	{r7, pc}
    d1e2:	bf00      	nop
    d1e4:	0000cead 	.word	0x0000cead
    d1e8:	00013ffc 	.word	0x00013ffc
    d1ec:	000094ed 	.word	0x000094ed
    d1f0:	0000befd 	.word	0x0000befd
    d1f4:	0000c1b5 	.word	0x0000c1b5
    d1f8:	0000c18d 	.word	0x0000c18d
    d1fc:	0000bed9 	.word	0x0000bed9
    d200:	0000c1e5 	.word	0x0000c1e5
    d204:	0000ce01 	.word	0x0000ce01
    d208:	0000cd6d 	.word	0x0000cd6d

0000d20c <_spi_m_async_init>:
{
	return _spi_m_sync_init(dev, hw);
}

int32_t _spi_m_async_init(struct _spi_async_dev *dev, void *const hw)
{
    d20c:	b580      	push	{r7, lr}
    d20e:	b086      	sub	sp, #24
    d210:	af00      	add	r7, sp, #0
    d212:	6078      	str	r0, [r7, #4]
    d214:	6039      	str	r1, [r7, #0]
	struct _spi_async_dev *spid = dev;
    d216:	687b      	ldr	r3, [r7, #4]
    d218:	60fb      	str	r3, [r7, #12]
	/* Do hardware initialize. */
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    d21a:	6839      	ldr	r1, [r7, #0]
    d21c:	6878      	ldr	r0, [r7, #4]
    d21e:	4b1a      	ldr	r3, [pc, #104]	; (d288 <_spi_m_async_init+0x7c>)
    d220:	4798      	blx	r3
    d222:	60b8      	str	r0, [r7, #8]

	if (rc < 0) {
    d224:	68bb      	ldr	r3, [r7, #8]
    d226:	2b00      	cmp	r3, #0
    d228:	da01      	bge.n	d22e <_spi_m_async_init+0x22>
		return rc;
    d22a:	68bb      	ldr	r3, [r7, #8]
    d22c:	e028      	b.n	d280 <_spi_m_async_init+0x74>
	}

	_sercom_init_irq_param(hw, (void *)dev);
    d22e:	6879      	ldr	r1, [r7, #4]
    d230:	6838      	ldr	r0, [r7, #0]
    d232:	4b16      	ldr	r3, [pc, #88]	; (d28c <_spi_m_async_init+0x80>)
    d234:	4798      	blx	r3
	/* Initialize callbacks: must use them */
	spid->callbacks.complete = NULL;
    d236:	68fb      	ldr	r3, [r7, #12]
    d238:	2200      	movs	r2, #0
    d23a:	611a      	str	r2, [r3, #16]
	spid->callbacks.rx       = NULL;
    d23c:	68fb      	ldr	r3, [r7, #12]
    d23e:	2200      	movs	r2, #0
    d240:	60da      	str	r2, [r3, #12]
	spid->callbacks.tx       = NULL;
    d242:	68fb      	ldr	r3, [r7, #12]
    d244:	2200      	movs	r2, #0
    d246:	609a      	str	r2, [r3, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    d248:	6838      	ldr	r0, [r7, #0]
    d24a:	4b11      	ldr	r3, [pc, #68]	; (d290 <_spi_m_async_init+0x84>)
    d24c:	4798      	blx	r3
    d24e:	4603      	mov	r3, r0
    d250:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    d252:	2300      	movs	r3, #0
    d254:	613b      	str	r3, [r7, #16]
    d256:	e00f      	b.n	d278 <_spi_m_async_init+0x6c>
		NVIC_DisableIRQ((IRQn_Type)irq);
    d258:	7dfb      	ldrb	r3, [r7, #23]
    d25a:	b21b      	sxth	r3, r3
    d25c:	4618      	mov	r0, r3
    d25e:	4b0d      	ldr	r3, [pc, #52]	; (d294 <_spi_m_async_init+0x88>)
    d260:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    d262:	7dfb      	ldrb	r3, [r7, #23]
    d264:	b21b      	sxth	r3, r3
    d266:	4618      	mov	r0, r3
    d268:	4b0b      	ldr	r3, [pc, #44]	; (d298 <_spi_m_async_init+0x8c>)
    d26a:	4798      	blx	r3
		irq++;
    d26c:	7dfb      	ldrb	r3, [r7, #23]
    d26e:	3301      	adds	r3, #1
    d270:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    d272:	693b      	ldr	r3, [r7, #16]
    d274:	3301      	adds	r3, #1
    d276:	613b      	str	r3, [r7, #16]
    d278:	693b      	ldr	r3, [r7, #16]
    d27a:	2b03      	cmp	r3, #3
    d27c:	d9ec      	bls.n	d258 <_spi_m_async_init+0x4c>
	}

	return ERR_NONE;
    d27e:	2300      	movs	r3, #0
}
    d280:	4618      	mov	r0, r3
    d282:	3718      	adds	r7, #24
    d284:	46bd      	mov	sp, r7
    d286:	bd80      	pop	{r7, pc}
    d288:	0000d101 	.word	0x0000d101
    d28c:	0000c535 	.word	0x0000c535
    d290:	0000c941 	.word	0x0000c941
    d294:	0000be0d 	.word	0x0000be0d
    d298:	0000be51 	.word	0x0000be51

0000d29c <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    d29c:	b580      	push	{r7, lr}
    d29e:	b082      	sub	sp, #8
    d2a0:	af00      	add	r7, sp, #0
    d2a2:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    d2a4:	bf00      	nop
    d2a6:	2103      	movs	r1, #3
    d2a8:	6878      	ldr	r0, [r7, #4]
    d2aa:	4b06      	ldr	r3, [pc, #24]	; (d2c4 <_spi_wait_bus_idle+0x28>)
    d2ac:	4798      	blx	r3
    d2ae:	4603      	mov	r3, r0
    d2b0:	2b00      	cmp	r3, #0
    d2b2:	d0f8      	beq.n	d2a6 <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    d2b4:	2103      	movs	r1, #3
    d2b6:	6878      	ldr	r0, [r7, #4]
    d2b8:	4b03      	ldr	r3, [pc, #12]	; (d2c8 <_spi_wait_bus_idle+0x2c>)
    d2ba:	4798      	blx	r3
}
    d2bc:	bf00      	nop
    d2be:	3708      	adds	r7, #8
    d2c0:	46bd      	mov	sp, r7
    d2c2:	bd80      	pop	{r7, pc}
    d2c4:	0000bf91 	.word	0x0000bf91
    d2c8:	0000bfd3 	.word	0x0000bfd3

0000d2cc <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    d2cc:	b580      	push	{r7, lr}
    d2ce:	b086      	sub	sp, #24
    d2d0:	af00      	add	r7, sp, #0
    d2d2:	60f8      	str	r0, [r7, #12]
    d2d4:	60b9      	str	r1, [r7, #8]
    d2d6:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    d2d8:	68bb      	ldr	r3, [r7, #8]
    d2da:	f003 0304 	and.w	r3, r3, #4
    d2de:	2b00      	cmp	r3, #0
    d2e0:	d101      	bne.n	d2e6 <_spi_rx_check_and_receive+0x1a>
		return false;
    d2e2:	2300      	movs	r3, #0
    d2e4:	e022      	b.n	d32c <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    d2e6:	68f8      	ldr	r0, [r7, #12]
    d2e8:	4b12      	ldr	r3, [pc, #72]	; (d334 <_spi_rx_check_and_receive+0x68>)
    d2ea:	4798      	blx	r3
    d2ec:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    d2ee:	687b      	ldr	r3, [r7, #4]
    d2f0:	685b      	ldr	r3, [r3, #4]
    d2f2:	2b00      	cmp	r3, #0
    d2f4:	d014      	beq.n	d320 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    d2f6:	687b      	ldr	r3, [r7, #4]
    d2f8:	685b      	ldr	r3, [r3, #4]
    d2fa:	1c59      	adds	r1, r3, #1
    d2fc:	687a      	ldr	r2, [r7, #4]
    d2fe:	6051      	str	r1, [r2, #4]
    d300:	697a      	ldr	r2, [r7, #20]
    d302:	b2d2      	uxtb	r2, r2
    d304:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    d306:	687b      	ldr	r3, [r7, #4]
    d308:	7c1b      	ldrb	r3, [r3, #16]
    d30a:	2b01      	cmp	r3, #1
    d30c:	d908      	bls.n	d320 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    d30e:	687b      	ldr	r3, [r7, #4]
    d310:	685b      	ldr	r3, [r3, #4]
    d312:	1c59      	adds	r1, r3, #1
    d314:	687a      	ldr	r2, [r7, #4]
    d316:	6051      	str	r1, [r2, #4]
    d318:	697a      	ldr	r2, [r7, #20]
    d31a:	0a12      	lsrs	r2, r2, #8
    d31c:	b2d2      	uxtb	r2, r2
    d31e:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    d320:	687b      	ldr	r3, [r7, #4]
    d322:	68db      	ldr	r3, [r3, #12]
    d324:	1c5a      	adds	r2, r3, #1
    d326:	687b      	ldr	r3, [r7, #4]
    d328:	60da      	str	r2, [r3, #12]

	return true;
    d32a:	2301      	movs	r3, #1
}
    d32c:	4618      	mov	r0, r3
    d32e:	3718      	adds	r7, #24
    d330:	46bd      	mov	sp, r7
    d332:	bd80      	pop	{r7, pc}
    d334:	0000c45d 	.word	0x0000c45d

0000d338 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    d338:	b580      	push	{r7, lr}
    d33a:	b086      	sub	sp, #24
    d33c:	af00      	add	r7, sp, #0
    d33e:	60f8      	str	r0, [r7, #12]
    d340:	60b9      	str	r1, [r7, #8]
    d342:	607a      	str	r2, [r7, #4]
    d344:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    d346:	68bb      	ldr	r3, [r7, #8]
    d348:	f003 0301 	and.w	r3, r3, #1
    d34c:	2b00      	cmp	r3, #0
    d34e:	d028      	beq.n	d3a2 <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    d350:	687b      	ldr	r3, [r7, #4]
    d352:	681b      	ldr	r3, [r3, #0]
    d354:	2b00      	cmp	r3, #0
    d356:	d018      	beq.n	d38a <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    d358:	687b      	ldr	r3, [r7, #4]
    d35a:	681b      	ldr	r3, [r3, #0]
    d35c:	1c59      	adds	r1, r3, #1
    d35e:	687a      	ldr	r2, [r7, #4]
    d360:	6011      	str	r1, [r2, #0]
    d362:	781b      	ldrb	r3, [r3, #0]
    d364:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    d366:	687b      	ldr	r3, [r7, #4]
    d368:	7c1b      	ldrb	r3, [r3, #16]
    d36a:	2b01      	cmp	r3, #1
    d36c:	d90f      	bls.n	d38e <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    d36e:	687b      	ldr	r3, [r7, #4]
    d370:	681b      	ldr	r3, [r3, #0]
    d372:	781b      	ldrb	r3, [r3, #0]
    d374:	021b      	lsls	r3, r3, #8
    d376:	461a      	mov	r2, r3
    d378:	697b      	ldr	r3, [r7, #20]
    d37a:	4313      	orrs	r3, r2
    d37c:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    d37e:	687b      	ldr	r3, [r7, #4]
    d380:	681b      	ldr	r3, [r3, #0]
    d382:	1c5a      	adds	r2, r3, #1
    d384:	687b      	ldr	r3, [r7, #4]
    d386:	601a      	str	r2, [r3, #0]
    d388:	e001      	b.n	d38e <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    d38a:	887b      	ldrh	r3, [r7, #2]
    d38c:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    d38e:	687b      	ldr	r3, [r7, #4]
    d390:	689b      	ldr	r3, [r3, #8]
    d392:	1c5a      	adds	r2, r3, #1
    d394:	687b      	ldr	r3, [r7, #4]
    d396:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    d398:	6979      	ldr	r1, [r7, #20]
    d39a:	68f8      	ldr	r0, [r7, #12]
    d39c:	4b03      	ldr	r3, [pc, #12]	; (d3ac <_spi_tx_check_and_send+0x74>)
    d39e:	4798      	blx	r3
    d3a0:	e000      	b.n	d3a4 <_spi_tx_check_and_send+0x6c>
		return;
    d3a2:	bf00      	nop
}
    d3a4:	3718      	adds	r7, #24
    d3a6:	46bd      	mov	sp, r7
    d3a8:	bd80      	pop	{r7, pc}
    d3aa:	bf00      	nop
    d3ac:	0000c441 	.word	0x0000c441

0000d3b0 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    d3b0:	b580      	push	{r7, lr}
    d3b2:	b082      	sub	sp, #8
    d3b4:	af00      	add	r7, sp, #0
    d3b6:	6078      	str	r0, [r7, #4]
    d3b8:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    d3ba:	687b      	ldr	r3, [r7, #4]
    d3bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d3c0:	2b00      	cmp	r3, #0
    d3c2:	d00b      	beq.n	d3dc <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    d3c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d3c8:	6838      	ldr	r0, [r7, #0]
    d3ca:	4b07      	ldr	r3, [pc, #28]	; (d3e8 <_spi_err_check+0x38>)
    d3cc:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    d3ce:	2180      	movs	r1, #128	; 0x80
    d3d0:	6838      	ldr	r0, [r7, #0]
    d3d2:	4b06      	ldr	r3, [pc, #24]	; (d3ec <_spi_err_check+0x3c>)
    d3d4:	4798      	blx	r3
		return ERR_OVERFLOW;
    d3d6:	f06f 0312 	mvn.w	r3, #18
    d3da:	e000      	b.n	d3de <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    d3dc:	2300      	movs	r3, #0
}
    d3de:	4618      	mov	r0, r3
    d3e0:	3708      	adds	r7, #8
    d3e2:	46bd      	mov	sp, r7
    d3e4:	bd80      	pop	{r7, pc}
    d3e6:	bf00      	nop
    d3e8:	0000c495 	.word	0x0000c495
    d3ec:	0000bfd3 	.word	0x0000bfd3

0000d3f0 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    d3f0:	b590      	push	{r4, r7, lr}
    d3f2:	b08b      	sub	sp, #44	; 0x2c
    d3f4:	af00      	add	r7, sp, #0
    d3f6:	6078      	str	r0, [r7, #4]
    d3f8:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    d3fa:	687b      	ldr	r3, [r7, #4]
    d3fc:	681b      	ldr	r3, [r3, #0]
    d3fe:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    d400:	2300      	movs	r3, #0
    d402:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    d404:	683b      	ldr	r3, [r7, #0]
    d406:	681b      	ldr	r3, [r3, #0]
    d408:	60bb      	str	r3, [r7, #8]
    d40a:	683b      	ldr	r3, [r7, #0]
    d40c:	685b      	ldr	r3, [r3, #4]
    d40e:	60fb      	str	r3, [r7, #12]
    d410:	2300      	movs	r3, #0
    d412:	613b      	str	r3, [r7, #16]
    d414:	2300      	movs	r3, #0
    d416:	617b      	str	r3, [r7, #20]
    d418:	687b      	ldr	r3, [r7, #4]
    d41a:	791b      	ldrb	r3, [r3, #4]
    d41c:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    d41e:	687b      	ldr	r3, [r7, #4]
    d420:	2b00      	cmp	r3, #0
    d422:	d004      	beq.n	d42e <_spi_m_sync_trans+0x3e>
    d424:	6a3b      	ldr	r3, [r7, #32]
    d426:	2b00      	cmp	r3, #0
    d428:	d001      	beq.n	d42e <_spi_m_sync_trans+0x3e>
    d42a:	2301      	movs	r3, #1
    d42c:	e000      	b.n	d430 <_spi_m_sync_trans+0x40>
    d42e:	2300      	movs	r3, #0
    d430:	f003 0301 	and.w	r3, r3, #1
    d434:	b2db      	uxtb	r3, r3
    d436:	f640 324d 	movw	r2, #2893	; 0xb4d
    d43a:	492b      	ldr	r1, [pc, #172]	; (d4e8 <_spi_m_sync_trans+0xf8>)
    d43c:	4618      	mov	r0, r3
    d43e:	4b2b      	ldr	r3, [pc, #172]	; (d4ec <_spi_m_sync_trans+0xfc>)
    d440:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    d442:	2107      	movs	r1, #7
    d444:	6a38      	ldr	r0, [r7, #32]
    d446:	4b2a      	ldr	r3, [pc, #168]	; (d4f0 <_spi_m_sync_trans+0x100>)
    d448:	4798      	blx	r3
    d44a:	4603      	mov	r3, r0
    d44c:	2b00      	cmp	r3, #0
    d44e:	d002      	beq.n	d456 <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    d450:	f06f 0303 	mvn.w	r3, #3
    d454:	e043      	b.n	d4de <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    d456:	6a38      	ldr	r0, [r7, #32]
    d458:	4b26      	ldr	r3, [pc, #152]	; (d4f4 <_spi_m_sync_trans+0x104>)
    d45a:	4798      	blx	r3
    d45c:	4603      	mov	r3, r0
    d45e:	f083 0301 	eor.w	r3, r3, #1
    d462:	b2db      	uxtb	r3, r3
    d464:	2b00      	cmp	r3, #0
    d466:	d002      	beq.n	d46e <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    d468:	f06f 0313 	mvn.w	r3, #19
    d46c:	e037      	b.n	d4de <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    d46e:	6a38      	ldr	r0, [r7, #32]
    d470:	4b21      	ldr	r3, [pc, #132]	; (d4f8 <_spi_m_sync_trans+0x108>)
    d472:	4798      	blx	r3
    d474:	4603      	mov	r3, r0
    d476:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    d478:	f107 0308 	add.w	r3, r7, #8
    d47c:	461a      	mov	r2, r3
    d47e:	69f9      	ldr	r1, [r7, #28]
    d480:	6a38      	ldr	r0, [r7, #32]
    d482:	4b1e      	ldr	r3, [pc, #120]	; (d4fc <_spi_m_sync_trans+0x10c>)
    d484:	4798      	blx	r3
    d486:	4603      	mov	r3, r0
    d488:	f083 0301 	eor.w	r3, r3, #1
    d48c:	b2db      	uxtb	r3, r3
    d48e:	2b00      	cmp	r3, #0
    d490:	d00b      	beq.n	d4aa <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    d492:	697a      	ldr	r2, [r7, #20]
    d494:	693b      	ldr	r3, [r7, #16]
    d496:	429a      	cmp	r2, r3
    d498:	d307      	bcc.n	d4aa <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    d49a:	687b      	ldr	r3, [r7, #4]
    d49c:	88db      	ldrh	r3, [r3, #6]
    d49e:	f107 0208 	add.w	r2, r7, #8
    d4a2:	69f9      	ldr	r1, [r7, #28]
    d4a4:	6a38      	ldr	r0, [r7, #32]
    d4a6:	4c16      	ldr	r4, [pc, #88]	; (d500 <_spi_m_sync_trans+0x110>)
    d4a8:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    d4aa:	6a39      	ldr	r1, [r7, #32]
    d4ac:	69f8      	ldr	r0, [r7, #28]
    d4ae:	4b15      	ldr	r3, [pc, #84]	; (d504 <_spi_m_sync_trans+0x114>)
    d4b0:	4798      	blx	r3
    d4b2:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    d4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d4b6:	2b00      	cmp	r3, #0
    d4b8:	db0c      	blt.n	d4d4 <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    d4ba:	693a      	ldr	r2, [r7, #16]
    d4bc:	683b      	ldr	r3, [r7, #0]
    d4be:	689b      	ldr	r3, [r3, #8]
    d4c0:	429a      	cmp	r2, r3
    d4c2:	d3d4      	bcc.n	d46e <_spi_m_sync_trans+0x7e>
    d4c4:	697a      	ldr	r2, [r7, #20]
    d4c6:	683b      	ldr	r3, [r7, #0]
    d4c8:	689b      	ldr	r3, [r3, #8]
    d4ca:	429a      	cmp	r2, r3
    d4cc:	d3cf      	bcc.n	d46e <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    d4ce:	693b      	ldr	r3, [r7, #16]
    d4d0:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    d4d2:	e000      	b.n	d4d6 <_spi_m_sync_trans+0xe6>
			break;
    d4d4:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    d4d6:	6a38      	ldr	r0, [r7, #32]
    d4d8:	4b0b      	ldr	r3, [pc, #44]	; (d508 <_spi_m_sync_trans+0x118>)
    d4da:	4798      	blx	r3

	return rc;
    d4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    d4de:	4618      	mov	r0, r3
    d4e0:	372c      	adds	r7, #44	; 0x2c
    d4e2:	46bd      	mov	sp, r7
    d4e4:	bd90      	pop	{r4, r7, pc}
    d4e6:	bf00      	nop
    d4e8:	00013ffc 	.word	0x00013ffc
    d4ec:	000094ed 	.word	0x000094ed
    d4f0:	0000befd 	.word	0x0000befd
    d4f4:	0000c155 	.word	0x0000c155
    d4f8:	0000bfb9 	.word	0x0000bfb9
    d4fc:	0000d2cd 	.word	0x0000d2cd
    d500:	0000d339 	.word	0x0000d339
    d504:	0000d3b1 	.word	0x0000d3b1
    d508:	0000d29d 	.word	0x0000d29d

0000d50c <_spi_m_async_enable_tx>:

int32_t _spi_m_async_enable_tx(struct _spi_async_dev *dev, bool state)
{
    d50c:	b580      	push	{r7, lr}
    d50e:	b084      	sub	sp, #16
    d510:	af00      	add	r7, sp, #0
    d512:	6078      	str	r0, [r7, #4]
    d514:	460b      	mov	r3, r1
    d516:	70fb      	strb	r3, [r7, #3]
	void *hw = dev->prvt;
    d518:	687b      	ldr	r3, [r7, #4]
    d51a:	681b      	ldr	r3, [r3, #0]
    d51c:	60fb      	str	r3, [r7, #12]

	ASSERT(dev && hw);
    d51e:	687b      	ldr	r3, [r7, #4]
    d520:	2b00      	cmp	r3, #0
    d522:	d004      	beq.n	d52e <_spi_m_async_enable_tx+0x22>
    d524:	68fb      	ldr	r3, [r7, #12]
    d526:	2b00      	cmp	r3, #0
    d528:	d001      	beq.n	d52e <_spi_m_async_enable_tx+0x22>
    d52a:	2301      	movs	r3, #1
    d52c:	e000      	b.n	d530 <_spi_m_async_enable_tx+0x24>
    d52e:	2300      	movs	r3, #0
    d530:	f003 0301 	and.w	r3, r3, #1
    d534:	b2db      	uxtb	r3, r3
    d536:	f640 3279 	movw	r2, #2937	; 0xb79
    d53a:	4909      	ldr	r1, [pc, #36]	; (d560 <_spi_m_async_enable_tx+0x54>)
    d53c:	4618      	mov	r0, r3
    d53e:	4b09      	ldr	r3, [pc, #36]	; (d564 <_spi_m_async_enable_tx+0x58>)
    d540:	4798      	blx	r3

	if (state) {
    d542:	78fb      	ldrb	r3, [r7, #3]
    d544:	2b00      	cmp	r3, #0
    d546:	d003      	beq.n	d550 <_spi_m_async_enable_tx+0x44>
		hri_sercomspi_set_INTEN_DRE_bit(hw);
    d548:	68f8      	ldr	r0, [r7, #12]
    d54a:	4b07      	ldr	r3, [pc, #28]	; (d568 <_spi_m_async_enable_tx+0x5c>)
    d54c:	4798      	blx	r3
    d54e:	e002      	b.n	d556 <_spi_m_async_enable_tx+0x4a>
	} else {
		hri_sercomspi_clear_INTEN_DRE_bit(hw);
    d550:	68f8      	ldr	r0, [r7, #12]
    d552:	4b06      	ldr	r3, [pc, #24]	; (d56c <_spi_m_async_enable_tx+0x60>)
    d554:	4798      	blx	r3
	}

	return ERR_NONE;
    d556:	2300      	movs	r3, #0
}
    d558:	4618      	mov	r0, r3
    d55a:	3710      	adds	r7, #16
    d55c:	46bd      	mov	sp, r7
    d55e:	bd80      	pop	{r7, pc}
    d560:	00013ffc 	.word	0x00013ffc
    d564:	000094ed 	.word	0x000094ed
    d568:	0000bff1 	.word	0x0000bff1
    d56c:	0000c00b 	.word	0x0000c00b

0000d570 <_spi_m_async_enable_rx>:
{
	return _spi_m_async_enable_tx(dev, state);
}

int32_t _spi_m_async_enable_rx(struct _spi_async_dev *dev, bool state)
{
    d570:	b580      	push	{r7, lr}
    d572:	b084      	sub	sp, #16
    d574:	af00      	add	r7, sp, #0
    d576:	6078      	str	r0, [r7, #4]
    d578:	460b      	mov	r3, r1
    d57a:	70fb      	strb	r3, [r7, #3]
	void *hw = dev->prvt;
    d57c:	687b      	ldr	r3, [r7, #4]
    d57e:	681b      	ldr	r3, [r3, #0]
    d580:	60fb      	str	r3, [r7, #12]

	ASSERT(dev);
    d582:	687b      	ldr	r3, [r7, #4]
    d584:	2b00      	cmp	r3, #0
    d586:	bf14      	ite	ne
    d588:	2301      	movne	r3, #1
    d58a:	2300      	moveq	r3, #0
    d58c:	b2db      	uxtb	r3, r3
    d58e:	f640 328d 	movw	r2, #2957	; 0xb8d
    d592:	490f      	ldr	r1, [pc, #60]	; (d5d0 <_spi_m_async_enable_rx+0x60>)
    d594:	4618      	mov	r0, r3
    d596:	4b0f      	ldr	r3, [pc, #60]	; (d5d4 <_spi_m_async_enable_rx+0x64>)
    d598:	4798      	blx	r3
	ASSERT(hw);
    d59a:	68fb      	ldr	r3, [r7, #12]
    d59c:	2b00      	cmp	r3, #0
    d59e:	bf14      	ite	ne
    d5a0:	2301      	movne	r3, #1
    d5a2:	2300      	moveq	r3, #0
    d5a4:	b2db      	uxtb	r3, r3
    d5a6:	f640 328e 	movw	r2, #2958	; 0xb8e
    d5aa:	4909      	ldr	r1, [pc, #36]	; (d5d0 <_spi_m_async_enable_rx+0x60>)
    d5ac:	4618      	mov	r0, r3
    d5ae:	4b09      	ldr	r3, [pc, #36]	; (d5d4 <_spi_m_async_enable_rx+0x64>)
    d5b0:	4798      	blx	r3

	if (state) {
    d5b2:	78fb      	ldrb	r3, [r7, #3]
    d5b4:	2b00      	cmp	r3, #0
    d5b6:	d003      	beq.n	d5c0 <_spi_m_async_enable_rx+0x50>
		hri_sercomspi_set_INTEN_RXC_bit(hw);
    d5b8:	68f8      	ldr	r0, [r7, #12]
    d5ba:	4b07      	ldr	r3, [pc, #28]	; (d5d8 <_spi_m_async_enable_rx+0x68>)
    d5bc:	4798      	blx	r3
    d5be:	e002      	b.n	d5c6 <_spi_m_async_enable_rx+0x56>
	} else {
		hri_sercomspi_clear_INTEN_RXC_bit(hw);
    d5c0:	68f8      	ldr	r0, [r7, #12]
    d5c2:	4b06      	ldr	r3, [pc, #24]	; (d5dc <_spi_m_async_enable_rx+0x6c>)
    d5c4:	4798      	blx	r3
	}

	return ERR_NONE;
    d5c6:	2300      	movs	r3, #0
}
    d5c8:	4618      	mov	r0, r3
    d5ca:	3710      	adds	r7, #16
    d5cc:	46bd      	mov	sp, r7
    d5ce:	bd80      	pop	{r7, pc}
    d5d0:	00013ffc 	.word	0x00013ffc
    d5d4:	000094ed 	.word	0x000094ed
    d5d8:	0000c059 	.word	0x0000c059
    d5dc:	0000c073 	.word	0x0000c073

0000d5e0 <_spi_m_async_enable_tx_complete>:
{
	return _spi_m_async_enable_rx(dev, state);
}

int32_t _spi_m_async_enable_tx_complete(struct _spi_async_dev *dev, bool state)
{
    d5e0:	b580      	push	{r7, lr}
    d5e2:	b082      	sub	sp, #8
    d5e4:	af00      	add	r7, sp, #0
    d5e6:	6078      	str	r0, [r7, #4]
    d5e8:	460b      	mov	r3, r1
    d5ea:	70fb      	strb	r3, [r7, #3]
	ASSERT(dev && dev->prvt);
    d5ec:	687b      	ldr	r3, [r7, #4]
    d5ee:	2b00      	cmp	r3, #0
    d5f0:	d005      	beq.n	d5fe <_spi_m_async_enable_tx_complete+0x1e>
    d5f2:	687b      	ldr	r3, [r7, #4]
    d5f4:	681b      	ldr	r3, [r3, #0]
    d5f6:	2b00      	cmp	r3, #0
    d5f8:	d001      	beq.n	d5fe <_spi_m_async_enable_tx_complete+0x1e>
    d5fa:	2301      	movs	r3, #1
    d5fc:	e000      	b.n	d600 <_spi_m_async_enable_tx_complete+0x20>
    d5fe:	2300      	movs	r3, #0
    d600:	f003 0301 	and.w	r3, r3, #1
    d604:	b2db      	uxtb	r3, r3
    d606:	f44f 623a 	mov.w	r2, #2976	; 0xba0
    d60a:	490b      	ldr	r1, [pc, #44]	; (d638 <_spi_m_async_enable_tx_complete+0x58>)
    d60c:	4618      	mov	r0, r3
    d60e:	4b0b      	ldr	r3, [pc, #44]	; (d63c <_spi_m_async_enable_tx_complete+0x5c>)
    d610:	4798      	blx	r3

	if (state) {
    d612:	78fb      	ldrb	r3, [r7, #3]
    d614:	2b00      	cmp	r3, #0
    d616:	d005      	beq.n	d624 <_spi_m_async_enable_tx_complete+0x44>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    d618:	687b      	ldr	r3, [r7, #4]
    d61a:	681b      	ldr	r3, [r3, #0]
    d61c:	4618      	mov	r0, r3
    d61e:	4b08      	ldr	r3, [pc, #32]	; (d640 <_spi_m_async_enable_tx_complete+0x60>)
    d620:	4798      	blx	r3
    d622:	e004      	b.n	d62e <_spi_m_async_enable_tx_complete+0x4e>
	} else {
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    d624:	687b      	ldr	r3, [r7, #4]
    d626:	681b      	ldr	r3, [r3, #0]
    d628:	4618      	mov	r0, r3
    d62a:	4b06      	ldr	r3, [pc, #24]	; (d644 <_spi_m_async_enable_tx_complete+0x64>)
    d62c:	4798      	blx	r3
	}

	return ERR_NONE;
    d62e:	2300      	movs	r3, #0
}
    d630:	4618      	mov	r0, r3
    d632:	3708      	adds	r7, #8
    d634:	46bd      	mov	sp, r7
    d636:	bd80      	pop	{r7, pc}
    d638:	00013ffc 	.word	0x00013ffc
    d63c:	000094ed 	.word	0x000094ed
    d640:	0000c025 	.word	0x0000c025
    d644:	0000c03f 	.word	0x0000c03f

0000d648 <_spi_m_async_write_one>:
{
	return _spi_m_async_enable_tx_complete(dev, state);
}

int32_t _spi_m_async_write_one(struct _spi_async_dev *dev, uint16_t data)
{
    d648:	b580      	push	{r7, lr}
    d64a:	b082      	sub	sp, #8
    d64c:	af00      	add	r7, sp, #0
    d64e:	6078      	str	r0, [r7, #4]
    d650:	460b      	mov	r3, r1
    d652:	807b      	strh	r3, [r7, #2]
	ASSERT(dev && dev->prvt);
    d654:	687b      	ldr	r3, [r7, #4]
    d656:	2b00      	cmp	r3, #0
    d658:	d005      	beq.n	d666 <_spi_m_async_write_one+0x1e>
    d65a:	687b      	ldr	r3, [r7, #4]
    d65c:	681b      	ldr	r3, [r3, #0]
    d65e:	2b00      	cmp	r3, #0
    d660:	d001      	beq.n	d666 <_spi_m_async_write_one+0x1e>
    d662:	2301      	movs	r3, #1
    d664:	e000      	b.n	d668 <_spi_m_async_write_one+0x20>
    d666:	2300      	movs	r3, #0
    d668:	f003 0301 	and.w	r3, r3, #1
    d66c:	b2db      	uxtb	r3, r3
    d66e:	f640 32b2 	movw	r2, #2994	; 0xbb2
    d672:	4908      	ldr	r1, [pc, #32]	; (d694 <_spi_m_async_write_one+0x4c>)
    d674:	4618      	mov	r0, r3
    d676:	4b08      	ldr	r3, [pc, #32]	; (d698 <_spi_m_async_write_one+0x50>)
    d678:	4798      	blx	r3

	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    d67a:	687b      	ldr	r3, [r7, #4]
    d67c:	681b      	ldr	r3, [r3, #0]
    d67e:	887a      	ldrh	r2, [r7, #2]
    d680:	4611      	mov	r1, r2
    d682:	4618      	mov	r0, r3
    d684:	4b05      	ldr	r3, [pc, #20]	; (d69c <_spi_m_async_write_one+0x54>)
    d686:	4798      	blx	r3

	return ERR_NONE;
    d688:	2300      	movs	r3, #0
}
    d68a:	4618      	mov	r0, r3
    d68c:	3708      	adds	r7, #8
    d68e:	46bd      	mov	sp, r7
    d690:	bd80      	pop	{r7, pc}
    d692:	bf00      	nop
    d694:	00013ffc 	.word	0x00013ffc
    d698:	000094ed 	.word	0x000094ed
    d69c:	0000c441 	.word	0x0000c441

0000d6a0 <_spi_m_async_read_one>:

	return ERR_NONE;
}

uint16_t _spi_m_async_read_one(struct _spi_async_dev *dev)
{
    d6a0:	b580      	push	{r7, lr}
    d6a2:	b082      	sub	sp, #8
    d6a4:	af00      	add	r7, sp, #0
    d6a6:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    d6a8:	687b      	ldr	r3, [r7, #4]
    d6aa:	2b00      	cmp	r3, #0
    d6ac:	d005      	beq.n	d6ba <_spi_m_async_read_one+0x1a>
    d6ae:	687b      	ldr	r3, [r7, #4]
    d6b0:	681b      	ldr	r3, [r3, #0]
    d6b2:	2b00      	cmp	r3, #0
    d6b4:	d001      	beq.n	d6ba <_spi_m_async_read_one+0x1a>
    d6b6:	2301      	movs	r3, #1
    d6b8:	e000      	b.n	d6bc <_spi_m_async_read_one+0x1c>
    d6ba:	2300      	movs	r3, #0
    d6bc:	f003 0301 	and.w	r3, r3, #1
    d6c0:	b2db      	uxtb	r3, r3
    d6c2:	f640 32cd 	movw	r2, #3021	; 0xbcd
    d6c6:	4907      	ldr	r1, [pc, #28]	; (d6e4 <_spi_m_async_read_one+0x44>)
    d6c8:	4618      	mov	r0, r3
    d6ca:	4b07      	ldr	r3, [pc, #28]	; (d6e8 <_spi_m_async_read_one+0x48>)
    d6cc:	4798      	blx	r3

	return hri_sercomspi_read_DATA_reg(dev->prvt);
    d6ce:	687b      	ldr	r3, [r7, #4]
    d6d0:	681b      	ldr	r3, [r3, #0]
    d6d2:	4618      	mov	r0, r3
    d6d4:	4b05      	ldr	r3, [pc, #20]	; (d6ec <_spi_m_async_read_one+0x4c>)
    d6d6:	4798      	blx	r3
    d6d8:	4603      	mov	r3, r0
    d6da:	b29b      	uxth	r3, r3
}
    d6dc:	4618      	mov	r0, r3
    d6de:	3708      	adds	r7, #8
    d6e0:	46bd      	mov	sp, r7
    d6e2:	bd80      	pop	{r7, pc}
    d6e4:	00013ffc 	.word	0x00013ffc
    d6e8:	000094ed 	.word	0x000094ed
    d6ec:	0000c45d 	.word	0x0000c45d

0000d6f0 <_spi_m_async_register_callback>:
	return hri_sercomspi_read_DATA_reg(dev->prvt);
}

int32_t _spi_m_async_register_callback(struct _spi_async_dev *dev, const enum _spi_async_dev_cb_type cb_type,
                                       const FUNC_PTR func)
{
    d6f0:	b580      	push	{r7, lr}
    d6f2:	b086      	sub	sp, #24
    d6f4:	af00      	add	r7, sp, #0
    d6f6:	60f8      	str	r0, [r7, #12]
    d6f8:	460b      	mov	r3, r1
    d6fa:	607a      	str	r2, [r7, #4]
    d6fc:	72fb      	strb	r3, [r7, #11]
	typedef void (*func_t)(void);
	struct _spi_async_dev *spid = dev;
    d6fe:	68fb      	ldr	r3, [r7, #12]
    d700:	617b      	str	r3, [r7, #20]

	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    d702:	68fb      	ldr	r3, [r7, #12]
    d704:	2b00      	cmp	r3, #0
    d706:	d004      	beq.n	d712 <_spi_m_async_register_callback+0x22>
    d708:	7afb      	ldrb	r3, [r7, #11]
    d70a:	2b03      	cmp	r3, #3
    d70c:	d801      	bhi.n	d712 <_spi_m_async_register_callback+0x22>
    d70e:	2301      	movs	r3, #1
    d710:	e000      	b.n	d714 <_spi_m_async_register_callback+0x24>
    d712:	2300      	movs	r3, #0
    d714:	f003 0301 	and.w	r3, r3, #1
    d718:	b2db      	uxtb	r3, r3
    d71a:	f640 32e6 	movw	r2, #3046	; 0xbe6
    d71e:	4909      	ldr	r1, [pc, #36]	; (d744 <_spi_m_async_register_callback+0x54>)
    d720:	4618      	mov	r0, r3
    d722:	4b09      	ldr	r3, [pc, #36]	; (d748 <_spi_m_async_register_callback+0x58>)
    d724:	4798      	blx	r3

	func_t *p_ls  = (func_t *)&spid->callbacks;
    d726:	697b      	ldr	r3, [r7, #20]
    d728:	3308      	adds	r3, #8
    d72a:	613b      	str	r3, [r7, #16]
	p_ls[cb_type] = (func_t)func;
    d72c:	7afb      	ldrb	r3, [r7, #11]
    d72e:	009b      	lsls	r3, r3, #2
    d730:	693a      	ldr	r2, [r7, #16]
    d732:	4413      	add	r3, r2
    d734:	687a      	ldr	r2, [r7, #4]
    d736:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    d738:	2300      	movs	r3, #0
}
    d73a:	4618      	mov	r0, r3
    d73c:	3718      	adds	r7, #24
    d73e:	46bd      	mov	sp, r7
    d740:	bd80      	pop	{r7, pc}
    d742:	bf00      	nop
    d744:	00013ffc 	.word	0x00013ffc
    d748:	000094ed 	.word	0x000094ed

0000d74c <__NVIC_EnableIRQ>:
{
    d74c:	b480      	push	{r7}
    d74e:	b083      	sub	sp, #12
    d750:	af00      	add	r7, sp, #0
    d752:	4603      	mov	r3, r0
    d754:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    d756:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    d75a:	2b00      	cmp	r3, #0
    d75c:	db0b      	blt.n	d776 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d75e:	4909      	ldr	r1, [pc, #36]	; (d784 <__NVIC_EnableIRQ+0x38>)
    d760:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    d764:	095b      	lsrs	r3, r3, #5
    d766:	88fa      	ldrh	r2, [r7, #6]
    d768:	f002 021f 	and.w	r2, r2, #31
    d76c:	2001      	movs	r0, #1
    d76e:	fa00 f202 	lsl.w	r2, r0, r2
    d772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d776:	bf00      	nop
    d778:	370c      	adds	r7, #12
    d77a:	46bd      	mov	sp, r7
    d77c:	f85d 7b04 	ldr.w	r7, [sp], #4
    d780:	4770      	bx	lr
    d782:	bf00      	nop
    d784:	e000e100 	.word	0xe000e100

0000d788 <__NVIC_DisableIRQ>:
{
    d788:	b480      	push	{r7}
    d78a:	b083      	sub	sp, #12
    d78c:	af00      	add	r7, sp, #0
    d78e:	4603      	mov	r3, r0
    d790:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    d792:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    d796:	2b00      	cmp	r3, #0
    d798:	db10      	blt.n	d7bc <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d79a:	490b      	ldr	r1, [pc, #44]	; (d7c8 <__NVIC_DisableIRQ+0x40>)
    d79c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    d7a0:	095b      	lsrs	r3, r3, #5
    d7a2:	88fa      	ldrh	r2, [r7, #6]
    d7a4:	f002 021f 	and.w	r2, r2, #31
    d7a8:	2001      	movs	r0, #1
    d7aa:	fa00 f202 	lsl.w	r2, r0, r2
    d7ae:	3320      	adds	r3, #32
    d7b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    d7b4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d7b8:	f3bf 8f6f 	isb	sy
}
    d7bc:	bf00      	nop
    d7be:	370c      	adds	r7, #12
    d7c0:	46bd      	mov	sp, r7
    d7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    d7c6:	4770      	bx	lr
    d7c8:	e000e100 	.word	0xe000e100

0000d7cc <__NVIC_ClearPendingIRQ>:
{
    d7cc:	b480      	push	{r7}
    d7ce:	b083      	sub	sp, #12
    d7d0:	af00      	add	r7, sp, #0
    d7d2:	4603      	mov	r3, r0
    d7d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    d7d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    d7da:	2b00      	cmp	r3, #0
    d7dc:	db0c      	blt.n	d7f8 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d7de:	4909      	ldr	r1, [pc, #36]	; (d804 <__NVIC_ClearPendingIRQ+0x38>)
    d7e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    d7e4:	095b      	lsrs	r3, r3, #5
    d7e6:	88fa      	ldrh	r2, [r7, #6]
    d7e8:	f002 021f 	and.w	r2, r2, #31
    d7ec:	2001      	movs	r0, #1
    d7ee:	fa00 f202 	lsl.w	r2, r0, r2
    d7f2:	3360      	adds	r3, #96	; 0x60
    d7f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d7f8:	bf00      	nop
    d7fa:	370c      	adds	r7, #12
    d7fc:	46bd      	mov	sp, r7
    d7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    d802:	4770      	bx	lr
    d804:	e000e100 	.word	0xe000e100

0000d808 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    d808:	b480      	push	{r7}
    d80a:	b083      	sub	sp, #12
    d80c:	af00      	add	r7, sp, #0
    d80e:	6078      	str	r0, [r7, #4]
    d810:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    d812:	bf00      	nop
    d814:	687b      	ldr	r3, [r7, #4]
    d816:	691a      	ldr	r2, [r3, #16]
    d818:	683b      	ldr	r3, [r7, #0]
    d81a:	4013      	ands	r3, r2
    d81c:	2b00      	cmp	r3, #0
    d81e:	d1f9      	bne.n	d814 <hri_tc_wait_for_sync+0xc>
	};
}
    d820:	bf00      	nop
    d822:	370c      	adds	r7, #12
    d824:	46bd      	mov	sp, r7
    d826:	f85d 7b04 	ldr.w	r7, [sp], #4
    d82a:	4770      	bx	lr

0000d82c <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    d82c:	b480      	push	{r7}
    d82e:	b083      	sub	sp, #12
    d830:	af00      	add	r7, sp, #0
    d832:	6078      	str	r0, [r7, #4]
    d834:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    d836:	687b      	ldr	r3, [r7, #4]
    d838:	691a      	ldr	r2, [r3, #16]
    d83a:	683b      	ldr	r3, [r7, #0]
    d83c:	4013      	ands	r3, r2
    d83e:	2b00      	cmp	r3, #0
    d840:	bf14      	ite	ne
    d842:	2301      	movne	r3, #1
    d844:	2300      	moveq	r3, #0
    d846:	b2db      	uxtb	r3, r3
}
    d848:	4618      	mov	r0, r3
    d84a:	370c      	adds	r7, #12
    d84c:	46bd      	mov	sp, r7
    d84e:	f85d 7b04 	ldr.w	r7, [sp], #4
    d852:	4770      	bx	lr

0000d854 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    d854:	b480      	push	{r7}
    d856:	b083      	sub	sp, #12
    d858:	af00      	add	r7, sp, #0
    d85a:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    d85c:	687b      	ldr	r3, [r7, #4]
    d85e:	7a9b      	ldrb	r3, [r3, #10]
    d860:	b2db      	uxtb	r3, r3
    d862:	f003 0301 	and.w	r3, r3, #1
    d866:	2b00      	cmp	r3, #0
    d868:	bf14      	ite	ne
    d86a:	2301      	movne	r3, #1
    d86c:	2300      	moveq	r3, #0
    d86e:	b2db      	uxtb	r3, r3
}
    d870:	4618      	mov	r0, r3
    d872:	370c      	adds	r7, #12
    d874:	46bd      	mov	sp, r7
    d876:	f85d 7b04 	ldr.w	r7, [sp], #4
    d87a:	4770      	bx	lr

0000d87c <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    d87c:	b480      	push	{r7}
    d87e:	b083      	sub	sp, #12
    d880:	af00      	add	r7, sp, #0
    d882:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    d884:	687b      	ldr	r3, [r7, #4]
    d886:	2201      	movs	r2, #1
    d888:	729a      	strb	r2, [r3, #10]
}
    d88a:	bf00      	nop
    d88c:	370c      	adds	r7, #12
    d88e:	46bd      	mov	sp, r7
    d890:	f85d 7b04 	ldr.w	r7, [sp], #4
    d894:	4770      	bx	lr

0000d896 <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    d896:	b480      	push	{r7}
    d898:	b083      	sub	sp, #12
    d89a:	af00      	add	r7, sp, #0
    d89c:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    d89e:	687b      	ldr	r3, [r7, #4]
    d8a0:	2202      	movs	r2, #2
    d8a2:	729a      	strb	r2, [r3, #10]
}
    d8a4:	bf00      	nop
    d8a6:	370c      	adds	r7, #12
    d8a8:	46bd      	mov	sp, r7
    d8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    d8ae:	4770      	bx	lr

0000d8b0 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    d8b0:	b480      	push	{r7}
    d8b2:	b083      	sub	sp, #12
    d8b4:	af00      	add	r7, sp, #0
    d8b6:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    d8b8:	687b      	ldr	r3, [r7, #4]
    d8ba:	2201      	movs	r2, #1
    d8bc:	725a      	strb	r2, [r3, #9]
}
    d8be:	bf00      	nop
    d8c0:	370c      	adds	r7, #12
    d8c2:	46bd      	mov	sp, r7
    d8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    d8c8:	4770      	bx	lr

0000d8ca <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    d8ca:	b480      	push	{r7}
    d8cc:	b083      	sub	sp, #12
    d8ce:	af00      	add	r7, sp, #0
    d8d0:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    d8d2:	687b      	ldr	r3, [r7, #4]
    d8d4:	7a5b      	ldrb	r3, [r3, #9]
    d8d6:	b2db      	uxtb	r3, r3
    d8d8:	085b      	lsrs	r3, r3, #1
    d8da:	f003 0301 	and.w	r3, r3, #1
    d8de:	2b00      	cmp	r3, #0
    d8e0:	bf14      	ite	ne
    d8e2:	2301      	movne	r3, #1
    d8e4:	2300      	moveq	r3, #0
    d8e6:	b2db      	uxtb	r3, r3
}
    d8e8:	4618      	mov	r0, r3
    d8ea:	370c      	adds	r7, #12
    d8ec:	46bd      	mov	sp, r7
    d8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    d8f2:	4770      	bx	lr

0000d8f4 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    d8f4:	b580      	push	{r7, lr}
    d8f6:	b082      	sub	sp, #8
    d8f8:	af00      	add	r7, sp, #0
    d8fa:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    d8fc:	687b      	ldr	r3, [r7, #4]
    d8fe:	681b      	ldr	r3, [r3, #0]
    d900:	f023 0202 	bic.w	r2, r3, #2
    d904:	687b      	ldr	r3, [r7, #4]
    d906:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    d908:	2103      	movs	r1, #3
    d90a:	6878      	ldr	r0, [r7, #4]
    d90c:	4b02      	ldr	r3, [pc, #8]	; (d918 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    d90e:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    d910:	bf00      	nop
    d912:	3708      	adds	r7, #8
    d914:	46bd      	mov	sp, r7
    d916:	bd80      	pop	{r7, pc}
    d918:	0000d809 	.word	0x0000d809

0000d91c <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    d91c:	b580      	push	{r7, lr}
    d91e:	b084      	sub	sp, #16
    d920:	af00      	add	r7, sp, #0
    d922:	6078      	str	r0, [r7, #4]
    d924:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    d926:	2103      	movs	r1, #3
    d928:	6878      	ldr	r0, [r7, #4]
    d92a:	4b07      	ldr	r3, [pc, #28]	; (d948 <hri_tc_get_CTRLA_reg+0x2c>)
    d92c:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    d92e:	687b      	ldr	r3, [r7, #4]
    d930:	681b      	ldr	r3, [r3, #0]
    d932:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    d934:	68fa      	ldr	r2, [r7, #12]
    d936:	683b      	ldr	r3, [r7, #0]
    d938:	4013      	ands	r3, r2
    d93a:	60fb      	str	r3, [r7, #12]
	return tmp;
    d93c:	68fb      	ldr	r3, [r7, #12]
}
    d93e:	4618      	mov	r0, r3
    d940:	3710      	adds	r7, #16
    d942:	46bd      	mov	sp, r7
    d944:	bd80      	pop	{r7, pc}
    d946:	bf00      	nop
    d948:	0000d809 	.word	0x0000d809

0000d94c <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    d94c:	b580      	push	{r7, lr}
    d94e:	b082      	sub	sp, #8
    d950:	af00      	add	r7, sp, #0
    d952:	6078      	str	r0, [r7, #4]
    d954:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    d956:	687b      	ldr	r3, [r7, #4]
    d958:	683a      	ldr	r2, [r7, #0]
    d95a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    d95c:	2103      	movs	r1, #3
    d95e:	6878      	ldr	r0, [r7, #4]
    d960:	4b02      	ldr	r3, [pc, #8]	; (d96c <hri_tc_write_CTRLA_reg+0x20>)
    d962:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    d964:	bf00      	nop
    d966:	3708      	adds	r7, #8
    d968:	46bd      	mov	sp, r7
    d96a:	bd80      	pop	{r7, pc}
    d96c:	0000d809 	.word	0x0000d809

0000d970 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    d970:	b480      	push	{r7}
    d972:	b083      	sub	sp, #12
    d974:	af00      	add	r7, sp, #0
    d976:	6078      	str	r0, [r7, #4]
    d978:	460b      	mov	r3, r1
    d97a:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    d97c:	687b      	ldr	r3, [r7, #4]
    d97e:	887a      	ldrh	r2, [r7, #2]
    d980:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    d982:	bf00      	nop
    d984:	370c      	adds	r7, #12
    d986:	46bd      	mov	sp, r7
    d988:	f85d 7b04 	ldr.w	r7, [sp], #4
    d98c:	4770      	bx	lr

0000d98e <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    d98e:	b480      	push	{r7}
    d990:	b083      	sub	sp, #12
    d992:	af00      	add	r7, sp, #0
    d994:	6078      	str	r0, [r7, #4]
    d996:	460b      	mov	r3, r1
    d998:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    d99a:	687b      	ldr	r3, [r7, #4]
    d99c:	78fa      	ldrb	r2, [r7, #3]
    d99e:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    d9a0:	bf00      	nop
    d9a2:	370c      	adds	r7, #12
    d9a4:	46bd      	mov	sp, r7
    d9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    d9aa:	4770      	bx	lr

0000d9ac <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    d9ac:	b480      	push	{r7}
    d9ae:	b083      	sub	sp, #12
    d9b0:	af00      	add	r7, sp, #0
    d9b2:	6078      	str	r0, [r7, #4]
    d9b4:	460b      	mov	r3, r1
    d9b6:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    d9b8:	687b      	ldr	r3, [r7, #4]
    d9ba:	78fa      	ldrb	r2, [r7, #3]
    d9bc:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    d9be:	bf00      	nop
    d9c0:	370c      	adds	r7, #12
    d9c2:	46bd      	mov	sp, r7
    d9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    d9c8:	4770      	bx	lr
	...

0000d9cc <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    d9cc:	b580      	push	{r7, lr}
    d9ce:	b082      	sub	sp, #8
    d9d0:	af00      	add	r7, sp, #0
    d9d2:	6078      	str	r0, [r7, #4]
    d9d4:	460b      	mov	r3, r1
    d9d6:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    d9d8:	687b      	ldr	r3, [r7, #4]
    d9da:	78fa      	ldrb	r2, [r7, #3]
    d9dc:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    d9de:	2120      	movs	r1, #32
    d9e0:	6878      	ldr	r0, [r7, #4]
    d9e2:	4b03      	ldr	r3, [pc, #12]	; (d9f0 <hri_tccount8_write_PER_reg+0x24>)
    d9e4:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    d9e6:	bf00      	nop
    d9e8:	3708      	adds	r7, #8
    d9ea:	46bd      	mov	sp, r7
    d9ec:	bd80      	pop	{r7, pc}
    d9ee:	bf00      	nop
    d9f0:	0000d809 	.word	0x0000d809

0000d9f4 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    d9f4:	b580      	push	{r7, lr}
    d9f6:	b082      	sub	sp, #8
    d9f8:	af00      	add	r7, sp, #0
    d9fa:	6078      	str	r0, [r7, #4]
    d9fc:	460b      	mov	r3, r1
    d9fe:	70fb      	strb	r3, [r7, #3]
    da00:	4613      	mov	r3, r2
    da02:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    da04:	78fb      	ldrb	r3, [r7, #3]
    da06:	687a      	ldr	r2, [r7, #4]
    da08:	4413      	add	r3, r2
    da0a:	78ba      	ldrb	r2, [r7, #2]
    da0c:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    da0e:	21c0      	movs	r1, #192	; 0xc0
    da10:	6878      	ldr	r0, [r7, #4]
    da12:	4b03      	ldr	r3, [pc, #12]	; (da20 <hri_tccount8_write_CC_reg+0x2c>)
    da14:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    da16:	bf00      	nop
    da18:	3708      	adds	r7, #8
    da1a:	46bd      	mov	sp, r7
    da1c:	bd80      	pop	{r7, pc}
    da1e:	bf00      	nop
    da20:	0000d809 	.word	0x0000d809

0000da24 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    da24:	b580      	push	{r7, lr}
    da26:	b082      	sub	sp, #8
    da28:	af00      	add	r7, sp, #0
    da2a:	6078      	str	r0, [r7, #4]
    da2c:	460b      	mov	r3, r1
    da2e:	70fb      	strb	r3, [r7, #3]
    da30:	4613      	mov	r3, r2
    da32:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    da34:	78fb      	ldrb	r3, [r7, #3]
    da36:	687a      	ldr	r2, [r7, #4]
    da38:	330c      	adds	r3, #12
    da3a:	005b      	lsls	r3, r3, #1
    da3c:	4413      	add	r3, r2
    da3e:	883a      	ldrh	r2, [r7, #0]
    da40:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    da42:	21c0      	movs	r1, #192	; 0xc0
    da44:	6878      	ldr	r0, [r7, #4]
    da46:	4b03      	ldr	r3, [pc, #12]	; (da54 <hri_tccount16_write_CC_reg+0x30>)
    da48:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    da4a:	bf00      	nop
    da4c:	3708      	adds	r7, #8
    da4e:	46bd      	mov	sp, r7
    da50:	bd80      	pop	{r7, pc}
    da52:	bf00      	nop
    da54:	0000d809 	.word	0x0000d809

0000da58 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    da58:	b580      	push	{r7, lr}
    da5a:	b084      	sub	sp, #16
    da5c:	af00      	add	r7, sp, #0
    da5e:	60f8      	str	r0, [r7, #12]
    da60:	460b      	mov	r3, r1
    da62:	607a      	str	r2, [r7, #4]
    da64:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    da66:	7afb      	ldrb	r3, [r7, #11]
    da68:	68fa      	ldr	r2, [r7, #12]
    da6a:	3306      	adds	r3, #6
    da6c:	009b      	lsls	r3, r3, #2
    da6e:	4413      	add	r3, r2
    da70:	687a      	ldr	r2, [r7, #4]
    da72:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    da74:	21c0      	movs	r1, #192	; 0xc0
    da76:	68f8      	ldr	r0, [r7, #12]
    da78:	4b02      	ldr	r3, [pc, #8]	; (da84 <hri_tccount32_write_CC_reg+0x2c>)
    da7a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    da7c:	bf00      	nop
    da7e:	3710      	adds	r7, #16
    da80:	46bd      	mov	sp, r7
    da82:	bd80      	pop	{r7, pc}
    da84:	0000d809 	.word	0x0000d809

0000da88 <_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _timer_init(struct _timer_device *const device, void *const hw)
{
    da88:	b580      	push	{r7, lr}
    da8a:	b084      	sub	sp, #16
    da8c:	af00      	add	r7, sp, #0
    da8e:	6078      	str	r0, [r7, #4]
    da90:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    da92:	6838      	ldr	r0, [r7, #0]
    da94:	4b93      	ldr	r3, [pc, #588]	; (dce4 <_timer_init+0x25c>)
    da96:	4798      	blx	r3
    da98:	4603      	mov	r3, r0
    da9a:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    da9c:	687b      	ldr	r3, [r7, #4]
    da9e:	683a      	ldr	r2, [r7, #0]
    daa0:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    daa2:	2295      	movs	r2, #149	; 0x95
    daa4:	4990      	ldr	r1, [pc, #576]	; (dce8 <_timer_init+0x260>)
    daa6:	2001      	movs	r0, #1
    daa8:	4b90      	ldr	r3, [pc, #576]	; (dcec <_timer_init+0x264>)
    daaa:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    daac:	2101      	movs	r1, #1
    daae:	6838      	ldr	r0, [r7, #0]
    dab0:	4b8f      	ldr	r3, [pc, #572]	; (dcf0 <_timer_init+0x268>)
    dab2:	4798      	blx	r3
    dab4:	4603      	mov	r3, r0
    dab6:	f083 0301 	eor.w	r3, r3, #1
    daba:	b2db      	uxtb	r3, r3
    dabc:	2b00      	cmp	r3, #0
    dabe:	d011      	beq.n	dae4 <_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    dac0:	2102      	movs	r1, #2
    dac2:	6838      	ldr	r0, [r7, #0]
    dac4:	4b8b      	ldr	r3, [pc, #556]	; (dcf4 <_timer_init+0x26c>)
    dac6:	4798      	blx	r3
    dac8:	4603      	mov	r3, r0
    daca:	2b00      	cmp	r3, #0
    dacc:	d006      	beq.n	dadc <_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    dace:	6838      	ldr	r0, [r7, #0]
    dad0:	4b89      	ldr	r3, [pc, #548]	; (dcf8 <_timer_init+0x270>)
    dad2:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    dad4:	2102      	movs	r1, #2
    dad6:	6838      	ldr	r0, [r7, #0]
    dad8:	4b88      	ldr	r3, [pc, #544]	; (dcfc <_timer_init+0x274>)
    dada:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    dadc:	2101      	movs	r1, #1
    dade:	6838      	ldr	r0, [r7, #0]
    dae0:	4b87      	ldr	r3, [pc, #540]	; (dd00 <_timer_init+0x278>)
    dae2:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    dae4:	2101      	movs	r1, #1
    dae6:	6838      	ldr	r0, [r7, #0]
    dae8:	4b84      	ldr	r3, [pc, #528]	; (dcfc <_timer_init+0x274>)
    daea:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    daec:	f997 200f 	ldrsb.w	r2, [r7, #15]
    daf0:	4984      	ldr	r1, [pc, #528]	; (dd04 <_timer_init+0x27c>)
    daf2:	4613      	mov	r3, r2
    daf4:	009b      	lsls	r3, r3, #2
    daf6:	4413      	add	r3, r2
    daf8:	009b      	lsls	r3, r3, #2
    dafa:	440b      	add	r3, r1
    dafc:	3304      	adds	r3, #4
    dafe:	681b      	ldr	r3, [r3, #0]
    db00:	4619      	mov	r1, r3
    db02:	6838      	ldr	r0, [r7, #0]
    db04:	4b7e      	ldr	r3, [pc, #504]	; (dd00 <_timer_init+0x278>)
    db06:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    db08:	f997 200f 	ldrsb.w	r2, [r7, #15]
    db0c:	497d      	ldr	r1, [pc, #500]	; (dd04 <_timer_init+0x27c>)
    db0e:	4613      	mov	r3, r2
    db10:	009b      	lsls	r3, r3, #2
    db12:	4413      	add	r3, r2
    db14:	009b      	lsls	r3, r3, #2
    db16:	440b      	add	r3, r1
    db18:	330a      	adds	r3, #10
    db1a:	781b      	ldrb	r3, [r3, #0]
    db1c:	4619      	mov	r1, r3
    db1e:	6838      	ldr	r0, [r7, #0]
    db20:	4b79      	ldr	r3, [pc, #484]	; (dd08 <_timer_init+0x280>)
    db22:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    db24:	f997 200f 	ldrsb.w	r2, [r7, #15]
    db28:	4976      	ldr	r1, [pc, #472]	; (dd04 <_timer_init+0x27c>)
    db2a:	4613      	mov	r3, r2
    db2c:	009b      	lsls	r3, r3, #2
    db2e:	4413      	add	r3, r2
    db30:	009b      	lsls	r3, r3, #2
    db32:	440b      	add	r3, r1
    db34:	3308      	adds	r3, #8
    db36:	881b      	ldrh	r3, [r3, #0]
    db38:	4619      	mov	r1, r3
    db3a:	6838      	ldr	r0, [r7, #0]
    db3c:	4b73      	ldr	r3, [pc, #460]	; (dd0c <_timer_init+0x284>)
    db3e:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    db40:	2101      	movs	r1, #1
    db42:	6838      	ldr	r0, [r7, #0]
    db44:	4b72      	ldr	r3, [pc, #456]	; (dd10 <_timer_init+0x288>)
    db46:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    db48:	f997 200f 	ldrsb.w	r2, [r7, #15]
    db4c:	496d      	ldr	r1, [pc, #436]	; (dd04 <_timer_init+0x27c>)
    db4e:	4613      	mov	r3, r2
    db50:	009b      	lsls	r3, r3, #2
    db52:	4413      	add	r3, r2
    db54:	009b      	lsls	r3, r3, #2
    db56:	440b      	add	r3, r1
    db58:	3304      	adds	r3, #4
    db5a:	681b      	ldr	r3, [r3, #0]
    db5c:	f003 030c 	and.w	r3, r3, #12
    db60:	2b08      	cmp	r3, #8
    db62:	d11e      	bne.n	dba2 <_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    db64:	f997 200f 	ldrsb.w	r2, [r7, #15]
    db68:	4966      	ldr	r1, [pc, #408]	; (dd04 <_timer_init+0x27c>)
    db6a:	4613      	mov	r3, r2
    db6c:	009b      	lsls	r3, r3, #2
    db6e:	4413      	add	r3, r2
    db70:	009b      	lsls	r3, r3, #2
    db72:	440b      	add	r3, r1
    db74:	330c      	adds	r3, #12
    db76:	681b      	ldr	r3, [r3, #0]
    db78:	461a      	mov	r2, r3
    db7a:	2100      	movs	r1, #0
    db7c:	6838      	ldr	r0, [r7, #0]
    db7e:	4b65      	ldr	r3, [pc, #404]	; (dd14 <_timer_init+0x28c>)
    db80:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    db82:	f997 200f 	ldrsb.w	r2, [r7, #15]
    db86:	495f      	ldr	r1, [pc, #380]	; (dd04 <_timer_init+0x27c>)
    db88:	4613      	mov	r3, r2
    db8a:	009b      	lsls	r3, r3, #2
    db8c:	4413      	add	r3, r2
    db8e:	009b      	lsls	r3, r3, #2
    db90:	440b      	add	r3, r1
    db92:	3310      	adds	r3, #16
    db94:	681b      	ldr	r3, [r3, #0]
    db96:	461a      	mov	r2, r3
    db98:	2101      	movs	r1, #1
    db9a:	6838      	ldr	r0, [r7, #0]
    db9c:	4b5d      	ldr	r3, [pc, #372]	; (dd14 <_timer_init+0x28c>)
    db9e:	4798      	blx	r3
    dba0:	e06a      	b.n	dc78 <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    dba2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    dba6:	4957      	ldr	r1, [pc, #348]	; (dd04 <_timer_init+0x27c>)
    dba8:	4613      	mov	r3, r2
    dbaa:	009b      	lsls	r3, r3, #2
    dbac:	4413      	add	r3, r2
    dbae:	009b      	lsls	r3, r3, #2
    dbb0:	440b      	add	r3, r1
    dbb2:	3304      	adds	r3, #4
    dbb4:	681b      	ldr	r3, [r3, #0]
    dbb6:	f003 030c 	and.w	r3, r3, #12
    dbba:	2b00      	cmp	r3, #0
    dbbc:	d120      	bne.n	dc00 <_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    dbbe:	f997 200f 	ldrsb.w	r2, [r7, #15]
    dbc2:	4950      	ldr	r1, [pc, #320]	; (dd04 <_timer_init+0x27c>)
    dbc4:	4613      	mov	r3, r2
    dbc6:	009b      	lsls	r3, r3, #2
    dbc8:	4413      	add	r3, r2
    dbca:	009b      	lsls	r3, r3, #2
    dbcc:	440b      	add	r3, r1
    dbce:	330c      	adds	r3, #12
    dbd0:	681b      	ldr	r3, [r3, #0]
    dbd2:	b29b      	uxth	r3, r3
    dbd4:	461a      	mov	r2, r3
    dbd6:	2100      	movs	r1, #0
    dbd8:	6838      	ldr	r0, [r7, #0]
    dbda:	4b4f      	ldr	r3, [pc, #316]	; (dd18 <_timer_init+0x290>)
    dbdc:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    dbde:	f997 200f 	ldrsb.w	r2, [r7, #15]
    dbe2:	4948      	ldr	r1, [pc, #288]	; (dd04 <_timer_init+0x27c>)
    dbe4:	4613      	mov	r3, r2
    dbe6:	009b      	lsls	r3, r3, #2
    dbe8:	4413      	add	r3, r2
    dbea:	009b      	lsls	r3, r3, #2
    dbec:	440b      	add	r3, r1
    dbee:	3310      	adds	r3, #16
    dbf0:	681b      	ldr	r3, [r3, #0]
    dbf2:	b29b      	uxth	r3, r3
    dbf4:	461a      	mov	r2, r3
    dbf6:	2101      	movs	r1, #1
    dbf8:	6838      	ldr	r0, [r7, #0]
    dbfa:	4b47      	ldr	r3, [pc, #284]	; (dd18 <_timer_init+0x290>)
    dbfc:	4798      	blx	r3
    dbfe:	e03b      	b.n	dc78 <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    dc00:	f997 200f 	ldrsb.w	r2, [r7, #15]
    dc04:	493f      	ldr	r1, [pc, #252]	; (dd04 <_timer_init+0x27c>)
    dc06:	4613      	mov	r3, r2
    dc08:	009b      	lsls	r3, r3, #2
    dc0a:	4413      	add	r3, r2
    dc0c:	009b      	lsls	r3, r3, #2
    dc0e:	440b      	add	r3, r1
    dc10:	3304      	adds	r3, #4
    dc12:	681b      	ldr	r3, [r3, #0]
    dc14:	f003 030c 	and.w	r3, r3, #12
    dc18:	2b04      	cmp	r3, #4
    dc1a:	d12d      	bne.n	dc78 <_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    dc1c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    dc20:	4938      	ldr	r1, [pc, #224]	; (dd04 <_timer_init+0x27c>)
    dc22:	4613      	mov	r3, r2
    dc24:	009b      	lsls	r3, r3, #2
    dc26:	4413      	add	r3, r2
    dc28:	009b      	lsls	r3, r3, #2
    dc2a:	440b      	add	r3, r1
    dc2c:	330c      	adds	r3, #12
    dc2e:	681b      	ldr	r3, [r3, #0]
    dc30:	b2db      	uxtb	r3, r3
    dc32:	461a      	mov	r2, r3
    dc34:	2100      	movs	r1, #0
    dc36:	6838      	ldr	r0, [r7, #0]
    dc38:	4b38      	ldr	r3, [pc, #224]	; (dd1c <_timer_init+0x294>)
    dc3a:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    dc3c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    dc40:	4930      	ldr	r1, [pc, #192]	; (dd04 <_timer_init+0x27c>)
    dc42:	4613      	mov	r3, r2
    dc44:	009b      	lsls	r3, r3, #2
    dc46:	4413      	add	r3, r2
    dc48:	009b      	lsls	r3, r3, #2
    dc4a:	440b      	add	r3, r1
    dc4c:	3310      	adds	r3, #16
    dc4e:	681b      	ldr	r3, [r3, #0]
    dc50:	b2db      	uxtb	r3, r3
    dc52:	461a      	mov	r2, r3
    dc54:	2101      	movs	r1, #1
    dc56:	6838      	ldr	r0, [r7, #0]
    dc58:	4b30      	ldr	r3, [pc, #192]	; (dd1c <_timer_init+0x294>)
    dc5a:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    dc5c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    dc60:	4928      	ldr	r1, [pc, #160]	; (dd04 <_timer_init+0x27c>)
    dc62:	4613      	mov	r3, r2
    dc64:	009b      	lsls	r3, r3, #2
    dc66:	4413      	add	r3, r2
    dc68:	009b      	lsls	r3, r3, #2
    dc6a:	440b      	add	r3, r1
    dc6c:	330b      	adds	r3, #11
    dc6e:	781b      	ldrb	r3, [r3, #0]
    dc70:	4619      	mov	r1, r3
    dc72:	6838      	ldr	r0, [r7, #0]
    dc74:	4b2a      	ldr	r3, [pc, #168]	; (dd20 <_timer_init+0x298>)
    dc76:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    dc78:	6838      	ldr	r0, [r7, #0]
    dc7a:	4b2a      	ldr	r3, [pc, #168]	; (dd24 <_timer_init+0x29c>)
    dc7c:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    dc7e:	6879      	ldr	r1, [r7, #4]
    dc80:	6838      	ldr	r0, [r7, #0]
    dc82:	4b29      	ldr	r3, [pc, #164]	; (dd28 <_timer_init+0x2a0>)
    dc84:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    dc86:	f997 200f 	ldrsb.w	r2, [r7, #15]
    dc8a:	491e      	ldr	r1, [pc, #120]	; (dd04 <_timer_init+0x27c>)
    dc8c:	4613      	mov	r3, r2
    dc8e:	009b      	lsls	r3, r3, #2
    dc90:	4413      	add	r3, r2
    dc92:	009b      	lsls	r3, r3, #2
    dc94:	440b      	add	r3, r1
    dc96:	3302      	adds	r3, #2
    dc98:	f9b3 3000 	ldrsh.w	r3, [r3]
    dc9c:	4618      	mov	r0, r3
    dc9e:	4b23      	ldr	r3, [pc, #140]	; (dd2c <_timer_init+0x2a4>)
    dca0:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    dca2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    dca6:	4917      	ldr	r1, [pc, #92]	; (dd04 <_timer_init+0x27c>)
    dca8:	4613      	mov	r3, r2
    dcaa:	009b      	lsls	r3, r3, #2
    dcac:	4413      	add	r3, r2
    dcae:	009b      	lsls	r3, r3, #2
    dcb0:	440b      	add	r3, r1
    dcb2:	3302      	adds	r3, #2
    dcb4:	f9b3 3000 	ldrsh.w	r3, [r3]
    dcb8:	4618      	mov	r0, r3
    dcba:	4b1d      	ldr	r3, [pc, #116]	; (dd30 <_timer_init+0x2a8>)
    dcbc:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    dcbe:	f997 200f 	ldrsb.w	r2, [r7, #15]
    dcc2:	4910      	ldr	r1, [pc, #64]	; (dd04 <_timer_init+0x27c>)
    dcc4:	4613      	mov	r3, r2
    dcc6:	009b      	lsls	r3, r3, #2
    dcc8:	4413      	add	r3, r2
    dcca:	009b      	lsls	r3, r3, #2
    dccc:	440b      	add	r3, r1
    dcce:	3302      	adds	r3, #2
    dcd0:	f9b3 3000 	ldrsh.w	r3, [r3]
    dcd4:	4618      	mov	r0, r3
    dcd6:	4b17      	ldr	r3, [pc, #92]	; (dd34 <_timer_init+0x2ac>)
    dcd8:	4798      	blx	r3

	return ERR_NONE;
    dcda:	2300      	movs	r3, #0
}
    dcdc:	4618      	mov	r0, r3
    dcde:	3710      	adds	r7, #16
    dce0:	46bd      	mov	sp, r7
    dce2:	bd80      	pop	{r7, pc}
    dce4:	0000e0a5 	.word	0x0000e0a5
    dce8:	0001405c 	.word	0x0001405c
    dcec:	000094ed 	.word	0x000094ed
    dcf0:	0000d82d 	.word	0x0000d82d
    dcf4:	0000d91d 	.word	0x0000d91d
    dcf8:	0000d8f5 	.word	0x0000d8f5
    dcfc:	0000d809 	.word	0x0000d809
    dd00:	0000d94d 	.word	0x0000d94d
    dd04:	20000440 	.word	0x20000440
    dd08:	0000d9ad 	.word	0x0000d9ad
    dd0c:	0000d971 	.word	0x0000d971
    dd10:	0000d98f 	.word	0x0000d98f
    dd14:	0000da59 	.word	0x0000da59
    dd18:	0000da25 	.word	0x0000da25
    dd1c:	0000d9f5 	.word	0x0000d9f5
    dd20:	0000d9cd 	.word	0x0000d9cd
    dd24:	0000d8b1 	.word	0x0000d8b1
    dd28:	0000e10d 	.word	0x0000e10d
    dd2c:	0000d789 	.word	0x0000d789
    dd30:	0000d7cd 	.word	0x0000d7cd
    dd34:	0000d74d 	.word	0x0000d74d

0000dd38 <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    dd38:	b580      	push	{r7, lr}
    dd3a:	b084      	sub	sp, #16
    dd3c:	af00      	add	r7, sp, #0
    dd3e:	6078      	str	r0, [r7, #4]
    dd40:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    dd42:	6838      	ldr	r0, [r7, #0]
    dd44:	4b73      	ldr	r3, [pc, #460]	; (df14 <_pwm_init+0x1dc>)
    dd46:	4798      	blx	r3
    dd48:	4603      	mov	r3, r0
    dd4a:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    dd4c:	687b      	ldr	r3, [r7, #4]
    dd4e:	683a      	ldr	r2, [r7, #0]
    dd50:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    dd52:	2101      	movs	r1, #1
    dd54:	6838      	ldr	r0, [r7, #0]
    dd56:	4b70      	ldr	r3, [pc, #448]	; (df18 <_pwm_init+0x1e0>)
    dd58:	4798      	blx	r3
    dd5a:	4603      	mov	r3, r0
    dd5c:	f083 0301 	eor.w	r3, r3, #1
    dd60:	b2db      	uxtb	r3, r3
    dd62:	2b00      	cmp	r3, #0
    dd64:	d011      	beq.n	dd8a <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    dd66:	2102      	movs	r1, #2
    dd68:	6838      	ldr	r0, [r7, #0]
    dd6a:	4b6c      	ldr	r3, [pc, #432]	; (df1c <_pwm_init+0x1e4>)
    dd6c:	4798      	blx	r3
    dd6e:	4603      	mov	r3, r0
    dd70:	2b00      	cmp	r3, #0
    dd72:	d006      	beq.n	dd82 <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    dd74:	6838      	ldr	r0, [r7, #0]
    dd76:	4b6a      	ldr	r3, [pc, #424]	; (df20 <_pwm_init+0x1e8>)
    dd78:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    dd7a:	2102      	movs	r1, #2
    dd7c:	6838      	ldr	r0, [r7, #0]
    dd7e:	4b69      	ldr	r3, [pc, #420]	; (df24 <_pwm_init+0x1ec>)
    dd80:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    dd82:	2101      	movs	r1, #1
    dd84:	6838      	ldr	r0, [r7, #0]
    dd86:	4b68      	ldr	r3, [pc, #416]	; (df28 <_pwm_init+0x1f0>)
    dd88:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    dd8a:	2101      	movs	r1, #1
    dd8c:	6838      	ldr	r0, [r7, #0]
    dd8e:	4b65      	ldr	r3, [pc, #404]	; (df24 <_pwm_init+0x1ec>)
    dd90:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    dd92:	f997 200f 	ldrsb.w	r2, [r7, #15]
    dd96:	4965      	ldr	r1, [pc, #404]	; (df2c <_pwm_init+0x1f4>)
    dd98:	4613      	mov	r3, r2
    dd9a:	009b      	lsls	r3, r3, #2
    dd9c:	4413      	add	r3, r2
    dd9e:	009b      	lsls	r3, r3, #2
    dda0:	440b      	add	r3, r1
    dda2:	3304      	adds	r3, #4
    dda4:	681b      	ldr	r3, [r3, #0]
    dda6:	4619      	mov	r1, r3
    dda8:	6838      	ldr	r0, [r7, #0]
    ddaa:	4b5f      	ldr	r3, [pc, #380]	; (df28 <_pwm_init+0x1f0>)
    ddac:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    ddae:	f997 200f 	ldrsb.w	r2, [r7, #15]
    ddb2:	495e      	ldr	r1, [pc, #376]	; (df2c <_pwm_init+0x1f4>)
    ddb4:	4613      	mov	r3, r2
    ddb6:	009b      	lsls	r3, r3, #2
    ddb8:	4413      	add	r3, r2
    ddba:	009b      	lsls	r3, r3, #2
    ddbc:	440b      	add	r3, r1
    ddbe:	330a      	adds	r3, #10
    ddc0:	781b      	ldrb	r3, [r3, #0]
    ddc2:	4619      	mov	r1, r3
    ddc4:	6838      	ldr	r0, [r7, #0]
    ddc6:	4b5a      	ldr	r3, [pc, #360]	; (df30 <_pwm_init+0x1f8>)
    ddc8:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    ddca:	f997 200f 	ldrsb.w	r2, [r7, #15]
    ddce:	4957      	ldr	r1, [pc, #348]	; (df2c <_pwm_init+0x1f4>)
    ddd0:	4613      	mov	r3, r2
    ddd2:	009b      	lsls	r3, r3, #2
    ddd4:	4413      	add	r3, r2
    ddd6:	009b      	lsls	r3, r3, #2
    ddd8:	440b      	add	r3, r1
    ddda:	3308      	adds	r3, #8
    dddc:	881b      	ldrh	r3, [r3, #0]
    ddde:	4619      	mov	r1, r3
    dde0:	6838      	ldr	r0, [r7, #0]
    dde2:	4b54      	ldr	r3, [pc, #336]	; (df34 <_pwm_init+0x1fc>)
    dde4:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    dde6:	2103      	movs	r1, #3
    dde8:	6838      	ldr	r0, [r7, #0]
    ddea:	4b53      	ldr	r3, [pc, #332]	; (df38 <_pwm_init+0x200>)
    ddec:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    ddee:	f997 200f 	ldrsb.w	r2, [r7, #15]
    ddf2:	494e      	ldr	r1, [pc, #312]	; (df2c <_pwm_init+0x1f4>)
    ddf4:	4613      	mov	r3, r2
    ddf6:	009b      	lsls	r3, r3, #2
    ddf8:	4413      	add	r3, r2
    ddfa:	009b      	lsls	r3, r3, #2
    ddfc:	440b      	add	r3, r1
    ddfe:	3304      	adds	r3, #4
    de00:	681b      	ldr	r3, [r3, #0]
    de02:	f003 030c 	and.w	r3, r3, #12
    de06:	2b08      	cmp	r3, #8
    de08:	d11e      	bne.n	de48 <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    de0a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    de0e:	4947      	ldr	r1, [pc, #284]	; (df2c <_pwm_init+0x1f4>)
    de10:	4613      	mov	r3, r2
    de12:	009b      	lsls	r3, r3, #2
    de14:	4413      	add	r3, r2
    de16:	009b      	lsls	r3, r3, #2
    de18:	440b      	add	r3, r1
    de1a:	330c      	adds	r3, #12
    de1c:	681b      	ldr	r3, [r3, #0]
    de1e:	461a      	mov	r2, r3
    de20:	2100      	movs	r1, #0
    de22:	6838      	ldr	r0, [r7, #0]
    de24:	4b45      	ldr	r3, [pc, #276]	; (df3c <_pwm_init+0x204>)
    de26:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    de28:	f997 200f 	ldrsb.w	r2, [r7, #15]
    de2c:	493f      	ldr	r1, [pc, #252]	; (df2c <_pwm_init+0x1f4>)
    de2e:	4613      	mov	r3, r2
    de30:	009b      	lsls	r3, r3, #2
    de32:	4413      	add	r3, r2
    de34:	009b      	lsls	r3, r3, #2
    de36:	440b      	add	r3, r1
    de38:	3310      	adds	r3, #16
    de3a:	681b      	ldr	r3, [r3, #0]
    de3c:	461a      	mov	r2, r3
    de3e:	2101      	movs	r1, #1
    de40:	6838      	ldr	r0, [r7, #0]
    de42:	4b3e      	ldr	r3, [pc, #248]	; (df3c <_pwm_init+0x204>)
    de44:	4798      	blx	r3
    de46:	e031      	b.n	deac <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    de48:	f997 200f 	ldrsb.w	r2, [r7, #15]
    de4c:	4937      	ldr	r1, [pc, #220]	; (df2c <_pwm_init+0x1f4>)
    de4e:	4613      	mov	r3, r2
    de50:	009b      	lsls	r3, r3, #2
    de52:	4413      	add	r3, r2
    de54:	009b      	lsls	r3, r3, #2
    de56:	440b      	add	r3, r1
    de58:	3304      	adds	r3, #4
    de5a:	681b      	ldr	r3, [r3, #0]
    de5c:	f003 030c 	and.w	r3, r3, #12
    de60:	2b00      	cmp	r3, #0
    de62:	d120      	bne.n	dea6 <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    de64:	f997 200f 	ldrsb.w	r2, [r7, #15]
    de68:	4930      	ldr	r1, [pc, #192]	; (df2c <_pwm_init+0x1f4>)
    de6a:	4613      	mov	r3, r2
    de6c:	009b      	lsls	r3, r3, #2
    de6e:	4413      	add	r3, r2
    de70:	009b      	lsls	r3, r3, #2
    de72:	440b      	add	r3, r1
    de74:	330c      	adds	r3, #12
    de76:	681b      	ldr	r3, [r3, #0]
    de78:	b29b      	uxth	r3, r3
    de7a:	461a      	mov	r2, r3
    de7c:	2100      	movs	r1, #0
    de7e:	6838      	ldr	r0, [r7, #0]
    de80:	4b2f      	ldr	r3, [pc, #188]	; (df40 <_pwm_init+0x208>)
    de82:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    de84:	f997 200f 	ldrsb.w	r2, [r7, #15]
    de88:	4928      	ldr	r1, [pc, #160]	; (df2c <_pwm_init+0x1f4>)
    de8a:	4613      	mov	r3, r2
    de8c:	009b      	lsls	r3, r3, #2
    de8e:	4413      	add	r3, r2
    de90:	009b      	lsls	r3, r3, #2
    de92:	440b      	add	r3, r1
    de94:	3310      	adds	r3, #16
    de96:	681b      	ldr	r3, [r3, #0]
    de98:	b29b      	uxth	r3, r3
    de9a:	461a      	mov	r2, r3
    de9c:	2101      	movs	r1, #1
    de9e:	6838      	ldr	r0, [r7, #0]
    dea0:	4b27      	ldr	r3, [pc, #156]	; (df40 <_pwm_init+0x208>)
    dea2:	4798      	blx	r3
    dea4:	e002      	b.n	deac <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    dea6:	f04f 33ff 	mov.w	r3, #4294967295
    deaa:	e02e      	b.n	df0a <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    deac:	6879      	ldr	r1, [r7, #4]
    deae:	6838      	ldr	r0, [r7, #0]
    deb0:	4b24      	ldr	r3, [pc, #144]	; (df44 <_pwm_init+0x20c>)
    deb2:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    deb4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    deb8:	491c      	ldr	r1, [pc, #112]	; (df2c <_pwm_init+0x1f4>)
    deba:	4613      	mov	r3, r2
    debc:	009b      	lsls	r3, r3, #2
    debe:	4413      	add	r3, r2
    dec0:	009b      	lsls	r3, r3, #2
    dec2:	440b      	add	r3, r1
    dec4:	3302      	adds	r3, #2
    dec6:	f9b3 3000 	ldrsh.w	r3, [r3]
    deca:	4618      	mov	r0, r3
    decc:	4b1e      	ldr	r3, [pc, #120]	; (df48 <_pwm_init+0x210>)
    dece:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    ded0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    ded4:	4915      	ldr	r1, [pc, #84]	; (df2c <_pwm_init+0x1f4>)
    ded6:	4613      	mov	r3, r2
    ded8:	009b      	lsls	r3, r3, #2
    deda:	4413      	add	r3, r2
    dedc:	009b      	lsls	r3, r3, #2
    dede:	440b      	add	r3, r1
    dee0:	3302      	adds	r3, #2
    dee2:	f9b3 3000 	ldrsh.w	r3, [r3]
    dee6:	4618      	mov	r0, r3
    dee8:	4b18      	ldr	r3, [pc, #96]	; (df4c <_pwm_init+0x214>)
    deea:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    deec:	f997 200f 	ldrsb.w	r2, [r7, #15]
    def0:	490e      	ldr	r1, [pc, #56]	; (df2c <_pwm_init+0x1f4>)
    def2:	4613      	mov	r3, r2
    def4:	009b      	lsls	r3, r3, #2
    def6:	4413      	add	r3, r2
    def8:	009b      	lsls	r3, r3, #2
    defa:	440b      	add	r3, r1
    defc:	3302      	adds	r3, #2
    defe:	f9b3 3000 	ldrsh.w	r3, [r3]
    df02:	4618      	mov	r0, r3
    df04:	4b12      	ldr	r3, [pc, #72]	; (df50 <_pwm_init+0x218>)
    df06:	4798      	blx	r3

	return 0;
    df08:	2300      	movs	r3, #0
}
    df0a:	4618      	mov	r0, r3
    df0c:	3710      	adds	r7, #16
    df0e:	46bd      	mov	sp, r7
    df10:	bd80      	pop	{r7, pc}
    df12:	bf00      	nop
    df14:	0000e0a5 	.word	0x0000e0a5
    df18:	0000d82d 	.word	0x0000d82d
    df1c:	0000d91d 	.word	0x0000d91d
    df20:	0000d8f5 	.word	0x0000d8f5
    df24:	0000d809 	.word	0x0000d809
    df28:	0000d94d 	.word	0x0000d94d
    df2c:	20000440 	.word	0x20000440
    df30:	0000d9ad 	.word	0x0000d9ad
    df34:	0000d971 	.word	0x0000d971
    df38:	0000d98f 	.word	0x0000d98f
    df3c:	0000da59 	.word	0x0000da59
    df40:	0000da25 	.word	0x0000da25
    df44:	0000e10d 	.word	0x0000e10d
    df48:	0000d789 	.word	0x0000d789
    df4c:	0000d7cd 	.word	0x0000d7cd
    df50:	0000d74d 	.word	0x0000d74d

0000df54 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    df54:	b480      	push	{r7}
    df56:	af00      	add	r7, sp, #0
	return NULL;
    df58:	2300      	movs	r3, #0
}
    df5a:	4618      	mov	r0, r3
    df5c:	46bd      	mov	sp, r7
    df5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    df62:	4770      	bx	lr

0000df64 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    df64:	b480      	push	{r7}
    df66:	af00      	add	r7, sp, #0
	return NULL;
    df68:	2300      	movs	r3, #0
}
    df6a:	4618      	mov	r0, r3
    df6c:	46bd      	mov	sp, r7
    df6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    df72:	4770      	bx	lr

0000df74 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    df74:	b580      	push	{r7, lr}
    df76:	b084      	sub	sp, #16
    df78:	af00      	add	r7, sp, #0
    df7a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    df7c:	687b      	ldr	r3, [r7, #4]
    df7e:	68db      	ldr	r3, [r3, #12]
    df80:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    df82:	68f8      	ldr	r0, [r7, #12]
    df84:	4b07      	ldr	r3, [pc, #28]	; (dfa4 <tc_interrupt_handler+0x30>)
    df86:	4798      	blx	r3
    df88:	4603      	mov	r3, r0
    df8a:	2b00      	cmp	r3, #0
    df8c:	d006      	beq.n	df9c <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    df8e:	68f8      	ldr	r0, [r7, #12]
    df90:	4b05      	ldr	r3, [pc, #20]	; (dfa8 <tc_interrupt_handler+0x34>)
    df92:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    df94:	687b      	ldr	r3, [r7, #4]
    df96:	681b      	ldr	r3, [r3, #0]
    df98:	6878      	ldr	r0, [r7, #4]
    df9a:	4798      	blx	r3
	}
}
    df9c:	bf00      	nop
    df9e:	3710      	adds	r7, #16
    dfa0:	46bd      	mov	sp, r7
    dfa2:	bd80      	pop	{r7, pc}
    dfa4:	0000d855 	.word	0x0000d855
    dfa8:	0000d87d 	.word	0x0000d87d

0000dfac <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    dfac:	b580      	push	{r7, lr}
    dfae:	b084      	sub	sp, #16
    dfb0:	af00      	add	r7, sp, #0
    dfb2:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    dfb4:	687b      	ldr	r3, [r7, #4]
    dfb6:	691b      	ldr	r3, [r3, #16]
    dfb8:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    dfba:	68f8      	ldr	r0, [r7, #12]
    dfbc:	4b12      	ldr	r3, [pc, #72]	; (e008 <tc_pwm_interrupt_handler+0x5c>)
    dfbe:	4798      	blx	r3
    dfc0:	4603      	mov	r3, r0
    dfc2:	2b00      	cmp	r3, #0
    dfc4:	d00a      	beq.n	dfdc <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    dfc6:	68f8      	ldr	r0, [r7, #12]
    dfc8:	4b10      	ldr	r3, [pc, #64]	; (e00c <tc_pwm_interrupt_handler+0x60>)
    dfca:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    dfcc:	687b      	ldr	r3, [r7, #4]
    dfce:	681b      	ldr	r3, [r3, #0]
    dfd0:	2b00      	cmp	r3, #0
    dfd2:	d003      	beq.n	dfdc <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    dfd4:	687b      	ldr	r3, [r7, #4]
    dfd6:	681b      	ldr	r3, [r3, #0]
    dfd8:	6878      	ldr	r0, [r7, #4]
    dfda:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    dfdc:	68f8      	ldr	r0, [r7, #12]
    dfde:	4b0c      	ldr	r3, [pc, #48]	; (e010 <tc_pwm_interrupt_handler+0x64>)
    dfe0:	4798      	blx	r3
    dfe2:	4603      	mov	r3, r0
    dfe4:	2b00      	cmp	r3, #0
    dfe6:	d00a      	beq.n	dffe <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    dfe8:	68f8      	ldr	r0, [r7, #12]
    dfea:	4b0a      	ldr	r3, [pc, #40]	; (e014 <tc_pwm_interrupt_handler+0x68>)
    dfec:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    dfee:	687b      	ldr	r3, [r7, #4]
    dff0:	685b      	ldr	r3, [r3, #4]
    dff2:	2b00      	cmp	r3, #0
    dff4:	d003      	beq.n	dffe <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    dff6:	687b      	ldr	r3, [r7, #4]
    dff8:	685b      	ldr	r3, [r3, #4]
    dffa:	6878      	ldr	r0, [r7, #4]
    dffc:	4798      	blx	r3
		}
	}
}
    dffe:	bf00      	nop
    e000:	3710      	adds	r7, #16
    e002:	46bd      	mov	sp, r7
    e004:	bd80      	pop	{r7, pc}
    e006:	bf00      	nop
    e008:	0000d855 	.word	0x0000d855
    e00c:	0000d87d 	.word	0x0000d87d
    e010:	0000d8cb 	.word	0x0000d8cb
    e014:	0000d897 	.word	0x0000d897

0000e018 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    e018:	b580      	push	{r7, lr}
    e01a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    e01c:	4b03      	ldr	r3, [pc, #12]	; (e02c <TC0_Handler+0x14>)
    e01e:	681b      	ldr	r3, [r3, #0]
    e020:	4618      	mov	r0, r3
    e022:	4b03      	ldr	r3, [pc, #12]	; (e030 <TC0_Handler+0x18>)
    e024:	4798      	blx	r3
}
    e026:	bf00      	nop
    e028:	bd80      	pop	{r7, pc}
    e02a:	bf00      	nop
    e02c:	200015c8 	.word	0x200015c8
    e030:	0000df75 	.word	0x0000df75

0000e034 <TC1_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC1_Handler(void)
{
    e034:	b580      	push	{r7, lr}
    e036:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc1_dev);
    e038:	4b03      	ldr	r3, [pc, #12]	; (e048 <TC1_Handler+0x14>)
    e03a:	681b      	ldr	r3, [r3, #0]
    e03c:	4618      	mov	r0, r3
    e03e:	4b03      	ldr	r3, [pc, #12]	; (e04c <TC1_Handler+0x18>)
    e040:	4798      	blx	r3
}
    e042:	bf00      	nop
    e044:	bd80      	pop	{r7, pc}
    e046:	bf00      	nop
    e048:	200015cc 	.word	0x200015cc
    e04c:	0000df75 	.word	0x0000df75

0000e050 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    e050:	b580      	push	{r7, lr}
    e052:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    e054:	4b03      	ldr	r3, [pc, #12]	; (e064 <TC2_Handler+0x14>)
    e056:	681b      	ldr	r3, [r3, #0]
    e058:	4618      	mov	r0, r3
    e05a:	4b03      	ldr	r3, [pc, #12]	; (e068 <TC2_Handler+0x18>)
    e05c:	4798      	blx	r3
}
    e05e:	bf00      	nop
    e060:	bd80      	pop	{r7, pc}
    e062:	bf00      	nop
    e064:	200015d0 	.word	0x200015d0
    e068:	0000df75 	.word	0x0000df75

0000e06c <TC3_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC3_Handler(void)
{
    e06c:	b580      	push	{r7, lr}
    e06e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc3_dev);
    e070:	4b03      	ldr	r3, [pc, #12]	; (e080 <TC3_Handler+0x14>)
    e072:	681b      	ldr	r3, [r3, #0]
    e074:	4618      	mov	r0, r3
    e076:	4b03      	ldr	r3, [pc, #12]	; (e084 <TC3_Handler+0x18>)
    e078:	4798      	blx	r3
}
    e07a:	bf00      	nop
    e07c:	bd80      	pop	{r7, pc}
    e07e:	bf00      	nop
    e080:	200015d4 	.word	0x200015d4
    e084:	0000df75 	.word	0x0000df75

0000e088 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    e088:	b580      	push	{r7, lr}
    e08a:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    e08c:	4b03      	ldr	r3, [pc, #12]	; (e09c <TC7_Handler+0x14>)
    e08e:	681b      	ldr	r3, [r3, #0]
    e090:	4618      	mov	r0, r3
    e092:	4b03      	ldr	r3, [pc, #12]	; (e0a0 <TC7_Handler+0x18>)
    e094:	4798      	blx	r3
}
    e096:	bf00      	nop
    e098:	bd80      	pop	{r7, pc}
    e09a:	bf00      	nop
    e09c:	200015d8 	.word	0x200015d8
    e0a0:	0000dfad 	.word	0x0000dfad

0000e0a4 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    e0a4:	b580      	push	{r7, lr}
    e0a6:	b084      	sub	sp, #16
    e0a8:	af00      	add	r7, sp, #0
    e0aa:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    e0ac:	6878      	ldr	r0, [r7, #4]
    e0ae:	4b13      	ldr	r3, [pc, #76]	; (e0fc <get_tc_index+0x58>)
    e0b0:	4798      	blx	r3
    e0b2:	4603      	mov	r3, r0
    e0b4:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    e0b6:	2300      	movs	r3, #0
    e0b8:	73fb      	strb	r3, [r7, #15]
    e0ba:	e010      	b.n	e0de <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    e0bc:	7bfa      	ldrb	r2, [r7, #15]
    e0be:	4910      	ldr	r1, [pc, #64]	; (e100 <get_tc_index+0x5c>)
    e0c0:	4613      	mov	r3, r2
    e0c2:	009b      	lsls	r3, r3, #2
    e0c4:	4413      	add	r3, r2
    e0c6:	009b      	lsls	r3, r3, #2
    e0c8:	440b      	add	r3, r1
    e0ca:	781b      	ldrb	r3, [r3, #0]
    e0cc:	7bba      	ldrb	r2, [r7, #14]
    e0ce:	429a      	cmp	r2, r3
    e0d0:	d102      	bne.n	e0d8 <get_tc_index+0x34>
			return i;
    e0d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    e0d6:	e00d      	b.n	e0f4 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    e0d8:	7bfb      	ldrb	r3, [r7, #15]
    e0da:	3301      	adds	r3, #1
    e0dc:	73fb      	strb	r3, [r7, #15]
    e0de:	7bfb      	ldrb	r3, [r7, #15]
    e0e0:	2b04      	cmp	r3, #4
    e0e2:	d9eb      	bls.n	e0bc <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    e0e4:	f240 2206 	movw	r2, #518	; 0x206
    e0e8:	4906      	ldr	r1, [pc, #24]	; (e104 <get_tc_index+0x60>)
    e0ea:	2000      	movs	r0, #0
    e0ec:	4b06      	ldr	r3, [pc, #24]	; (e108 <get_tc_index+0x64>)
    e0ee:	4798      	blx	r3
	return -1;
    e0f0:	f04f 33ff 	mov.w	r3, #4294967295
}
    e0f4:	4618      	mov	r0, r3
    e0f6:	3710      	adds	r7, #16
    e0f8:	46bd      	mov	sp, r7
    e0fa:	bd80      	pop	{r7, pc}
    e0fc:	0000e191 	.word	0x0000e191
    e100:	20000440 	.word	0x20000440
    e104:	0001405c 	.word	0x0001405c
    e108:	000094ed 	.word	0x000094ed

0000e10c <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    e10c:	b480      	push	{r7}
    e10e:	b083      	sub	sp, #12
    e110:	af00      	add	r7, sp, #0
    e112:	6078      	str	r0, [r7, #4]
    e114:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    e116:	687b      	ldr	r3, [r7, #4]
    e118:	4a13      	ldr	r2, [pc, #76]	; (e168 <_tc_init_irq_param+0x5c>)
    e11a:	4293      	cmp	r3, r2
    e11c:	d102      	bne.n	e124 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    e11e:	4a13      	ldr	r2, [pc, #76]	; (e16c <_tc_init_irq_param+0x60>)
    e120:	683b      	ldr	r3, [r7, #0]
    e122:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC1) {
    e124:	687b      	ldr	r3, [r7, #4]
    e126:	4a12      	ldr	r2, [pc, #72]	; (e170 <_tc_init_irq_param+0x64>)
    e128:	4293      	cmp	r3, r2
    e12a:	d102      	bne.n	e132 <_tc_init_irq_param+0x26>
		_tc1_dev = (struct _timer_device *)dev;
    e12c:	4a11      	ldr	r2, [pc, #68]	; (e174 <_tc_init_irq_param+0x68>)
    e12e:	683b      	ldr	r3, [r7, #0]
    e130:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    e132:	687b      	ldr	r3, [r7, #4]
    e134:	4a10      	ldr	r2, [pc, #64]	; (e178 <_tc_init_irq_param+0x6c>)
    e136:	4293      	cmp	r3, r2
    e138:	d102      	bne.n	e140 <_tc_init_irq_param+0x34>
		_tc2_dev = (struct _timer_device *)dev;
    e13a:	4a10      	ldr	r2, [pc, #64]	; (e17c <_tc_init_irq_param+0x70>)
    e13c:	683b      	ldr	r3, [r7, #0]
    e13e:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC3) {
    e140:	687b      	ldr	r3, [r7, #4]
    e142:	4a0f      	ldr	r2, [pc, #60]	; (e180 <_tc_init_irq_param+0x74>)
    e144:	4293      	cmp	r3, r2
    e146:	d102      	bne.n	e14e <_tc_init_irq_param+0x42>
		_tc3_dev = (struct _timer_device *)dev;
    e148:	4a0e      	ldr	r2, [pc, #56]	; (e184 <_tc_init_irq_param+0x78>)
    e14a:	683b      	ldr	r3, [r7, #0]
    e14c:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    e14e:	687b      	ldr	r3, [r7, #4]
    e150:	4a0d      	ldr	r2, [pc, #52]	; (e188 <_tc_init_irq_param+0x7c>)
    e152:	4293      	cmp	r3, r2
    e154:	d102      	bne.n	e15c <_tc_init_irq_param+0x50>
		_tc7_dev = (struct _pwm_device *)dev;
    e156:	4a0d      	ldr	r2, [pc, #52]	; (e18c <_tc_init_irq_param+0x80>)
    e158:	683b      	ldr	r3, [r7, #0]
    e15a:	6013      	str	r3, [r2, #0]
	}
}
    e15c:	bf00      	nop
    e15e:	370c      	adds	r7, #12
    e160:	46bd      	mov	sp, r7
    e162:	f85d 7b04 	ldr.w	r7, [sp], #4
    e166:	4770      	bx	lr
    e168:	40003800 	.word	0x40003800
    e16c:	200015c8 	.word	0x200015c8
    e170:	40003c00 	.word	0x40003c00
    e174:	200015cc 	.word	0x200015cc
    e178:	4101a000 	.word	0x4101a000
    e17c:	200015d0 	.word	0x200015d0
    e180:	4101c000 	.word	0x4101c000
    e184:	200015d4 	.word	0x200015d4
    e188:	43001800 	.word	0x43001800
    e18c:	200015d8 	.word	0x200015d8

0000e190 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    e190:	b4b0      	push	{r4, r5, r7}
    e192:	b08d      	sub	sp, #52	; 0x34
    e194:	af00      	add	r7, sp, #0
    e196:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    e198:	4b13      	ldr	r3, [pc, #76]	; (e1e8 <_get_hardware_offset+0x58>)
    e19a:	f107 040c 	add.w	r4, r7, #12
    e19e:	461d      	mov	r5, r3
    e1a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    e1a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    e1a4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    e1a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    e1ac:	2300      	movs	r3, #0
    e1ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    e1b0:	e010      	b.n	e1d4 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    e1b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e1b4:	009b      	lsls	r3, r3, #2
    e1b6:	f107 0230 	add.w	r2, r7, #48	; 0x30
    e1ba:	4413      	add	r3, r2
    e1bc:	f853 3c24 	ldr.w	r3, [r3, #-36]
    e1c0:	461a      	mov	r2, r3
    e1c2:	687b      	ldr	r3, [r7, #4]
    e1c4:	429a      	cmp	r2, r3
    e1c6:	d102      	bne.n	e1ce <_get_hardware_offset+0x3e>
			return i;
    e1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e1ca:	b2db      	uxtb	r3, r3
    e1cc:	e006      	b.n	e1dc <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    e1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e1d0:	3301      	adds	r3, #1
    e1d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    e1d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e1d6:	2b07      	cmp	r3, #7
    e1d8:	d9eb      	bls.n	e1b2 <_get_hardware_offset+0x22>
		}
	}
	return 0;
    e1da:	2300      	movs	r3, #0
}
    e1dc:	4618      	mov	r0, r3
    e1de:	3734      	adds	r7, #52	; 0x34
    e1e0:	46bd      	mov	sp, r7
    e1e2:	bcb0      	pop	{r4, r5, r7}
    e1e4:	4770      	bx	lr
    e1e6:	bf00      	nop
    e1e8:	00014070 	.word	0x00014070

0000e1ec <__NVIC_EnableIRQ>:
{
    e1ec:	b480      	push	{r7}
    e1ee:	b083      	sub	sp, #12
    e1f0:	af00      	add	r7, sp, #0
    e1f2:	4603      	mov	r3, r0
    e1f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    e1f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    e1fa:	2b00      	cmp	r3, #0
    e1fc:	db0b      	blt.n	e216 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    e1fe:	4909      	ldr	r1, [pc, #36]	; (e224 <__NVIC_EnableIRQ+0x38>)
    e200:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    e204:	095b      	lsrs	r3, r3, #5
    e206:	88fa      	ldrh	r2, [r7, #6]
    e208:	f002 021f 	and.w	r2, r2, #31
    e20c:	2001      	movs	r0, #1
    e20e:	fa00 f202 	lsl.w	r2, r0, r2
    e212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e216:	bf00      	nop
    e218:	370c      	adds	r7, #12
    e21a:	46bd      	mov	sp, r7
    e21c:	f85d 7b04 	ldr.w	r7, [sp], #4
    e220:	4770      	bx	lr
    e222:	bf00      	nop
    e224:	e000e100 	.word	0xe000e100

0000e228 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    e228:	b480      	push	{r7}
    e22a:	b087      	sub	sp, #28
    e22c:	af00      	add	r7, sp, #0
    e22e:	60f8      	str	r0, [r7, #12]
    e230:	460b      	mov	r3, r1
    e232:	607a      	str	r2, [r7, #4]
    e234:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    e236:	7afa      	ldrb	r2, [r7, #11]
    e238:	68f9      	ldr	r1, [r7, #12]
    e23a:	4613      	mov	r3, r2
    e23c:	009b      	lsls	r3, r3, #2
    e23e:	4413      	add	r3, r2
    e240:	009b      	lsls	r3, r3, #2
    e242:	440b      	add	r3, r1
    e244:	3340      	adds	r3, #64	; 0x40
    e246:	681b      	ldr	r3, [r3, #0]
    e248:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    e24a:	697a      	ldr	r2, [r7, #20]
    e24c:	687b      	ldr	r3, [r7, #4]
    e24e:	4013      	ands	r3, r2
    e250:	617b      	str	r3, [r7, #20]
	return tmp;
    e252:	697b      	ldr	r3, [r7, #20]
}
    e254:	4618      	mov	r0, r3
    e256:	371c      	adds	r7, #28
    e258:	46bd      	mov	sp, r7
    e25a:	f85d 7b04 	ldr.w	r7, [sp], #4
    e25e:	4770      	bx	lr

0000e260 <hri_oscctrl_get_STATUS_reg>:
{
    e260:	b480      	push	{r7}
    e262:	b085      	sub	sp, #20
    e264:	af00      	add	r7, sp, #0
    e266:	6078      	str	r0, [r7, #4]
    e268:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    e26a:	687b      	ldr	r3, [r7, #4]
    e26c:	691b      	ldr	r3, [r3, #16]
    e26e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    e270:	68fa      	ldr	r2, [r7, #12]
    e272:	683b      	ldr	r3, [r7, #0]
    e274:	4013      	ands	r3, r2
    e276:	60fb      	str	r3, [r7, #12]
	return tmp;
    e278:	68fb      	ldr	r3, [r7, #12]
}
    e27a:	4618      	mov	r0, r3
    e27c:	3714      	adds	r7, #20
    e27e:	46bd      	mov	sp, r7
    e280:	f85d 7b04 	ldr.w	r7, [sp], #4
    e284:	4770      	bx	lr

0000e286 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    e286:	b480      	push	{r7}
    e288:	b085      	sub	sp, #20
    e28a:	af00      	add	r7, sp, #0
    e28c:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    e28e:	687b      	ldr	r3, [r7, #4]
    e290:	f893 3020 	ldrb.w	r3, [r3, #32]
    e294:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    e296:	7bfb      	ldrb	r3, [r7, #15]
    e298:	f003 0301 	and.w	r3, r3, #1
    e29c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    e29e:	7bfb      	ldrb	r3, [r7, #15]
    e2a0:	2b00      	cmp	r3, #0
    e2a2:	bf14      	ite	ne
    e2a4:	2301      	movne	r3, #1
    e2a6:	2300      	moveq	r3, #0
    e2a8:	b2db      	uxtb	r3, r3
}
    e2aa:	4618      	mov	r0, r3
    e2ac:	3714      	adds	r7, #20
    e2ae:	46bd      	mov	sp, r7
    e2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    e2b4:	4770      	bx	lr

0000e2b6 <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    e2b6:	b480      	push	{r7}
    e2b8:	b083      	sub	sp, #12
    e2ba:	af00      	add	r7, sp, #0
    e2bc:	6078      	str	r0, [r7, #4]
    e2be:	460b      	mov	r3, r1
    e2c0:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    e2c2:	bf00      	nop
    e2c4:	687b      	ldr	r3, [r7, #4]
    e2c6:	789b      	ldrb	r3, [r3, #2]
    e2c8:	b2da      	uxtb	r2, r3
    e2ca:	78fb      	ldrb	r3, [r7, #3]
    e2cc:	4013      	ands	r3, r2
    e2ce:	b2db      	uxtb	r3, r3
    e2d0:	2b00      	cmp	r3, #0
    e2d2:	d1f7      	bne.n	e2c4 <hri_usb_wait_for_sync+0xe>
	};
}
    e2d4:	bf00      	nop
    e2d6:	370c      	adds	r7, #12
    e2d8:	46bd      	mov	sp, r7
    e2da:	f85d 7b04 	ldr.w	r7, [sp], #4
    e2de:	4770      	bx	lr

0000e2e0 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    e2e0:	b480      	push	{r7}
    e2e2:	b083      	sub	sp, #12
    e2e4:	af00      	add	r7, sp, #0
    e2e6:	6078      	str	r0, [r7, #4]
    e2e8:	460b      	mov	r3, r1
    e2ea:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    e2ec:	687b      	ldr	r3, [r7, #4]
    e2ee:	789b      	ldrb	r3, [r3, #2]
    e2f0:	b2da      	uxtb	r2, r3
    e2f2:	78fb      	ldrb	r3, [r7, #3]
    e2f4:	4013      	ands	r3, r2
    e2f6:	b2db      	uxtb	r3, r3
    e2f8:	2b00      	cmp	r3, #0
    e2fa:	bf14      	ite	ne
    e2fc:	2301      	movne	r3, #1
    e2fe:	2300      	moveq	r3, #0
    e300:	b2db      	uxtb	r3, r3
}
    e302:	4618      	mov	r0, r3
    e304:	370c      	adds	r7, #12
    e306:	46bd      	mov	sp, r7
    e308:	f85d 7b04 	ldr.w	r7, [sp], #4
    e30c:	4770      	bx	lr

0000e30e <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    e30e:	b480      	push	{r7}
    e310:	b085      	sub	sp, #20
    e312:	af00      	add	r7, sp, #0
    e314:	6078      	str	r0, [r7, #4]
    e316:	460b      	mov	r3, r1
    e318:	70fb      	strb	r3, [r7, #3]
    e31a:	4613      	mov	r3, r2
    e31c:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    e31e:	78fb      	ldrb	r3, [r7, #3]
    e320:	687a      	ldr	r2, [r7, #4]
    e322:	3308      	adds	r3, #8
    e324:	015b      	lsls	r3, r3, #5
    e326:	4413      	add	r3, r2
    e328:	3307      	adds	r3, #7
    e32a:	781b      	ldrb	r3, [r3, #0]
    e32c:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    e32e:	7bfa      	ldrb	r2, [r7, #15]
    e330:	78bb      	ldrb	r3, [r7, #2]
    e332:	4013      	ands	r3, r2
    e334:	73fb      	strb	r3, [r7, #15]
	return tmp;
    e336:	7bfb      	ldrb	r3, [r7, #15]
}
    e338:	4618      	mov	r0, r3
    e33a:	3714      	adds	r7, #20
    e33c:	46bd      	mov	sp, r7
    e33e:	f85d 7b04 	ldr.w	r7, [sp], #4
    e342:	4770      	bx	lr

0000e344 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    e344:	b480      	push	{r7}
    e346:	b083      	sub	sp, #12
    e348:	af00      	add	r7, sp, #0
    e34a:	6078      	str	r0, [r7, #4]
    e34c:	460b      	mov	r3, r1
    e34e:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    e350:	78fb      	ldrb	r3, [r7, #3]
    e352:	687a      	ldr	r2, [r7, #4]
    e354:	3308      	adds	r3, #8
    e356:	015b      	lsls	r3, r3, #5
    e358:	4413      	add	r3, r2
    e35a:	3307      	adds	r3, #7
    e35c:	781b      	ldrb	r3, [r3, #0]
    e35e:	b2db      	uxtb	r3, r3
}
    e360:	4618      	mov	r0, r3
    e362:	370c      	adds	r7, #12
    e364:	46bd      	mov	sp, r7
    e366:	f85d 7b04 	ldr.w	r7, [sp], #4
    e36a:	4770      	bx	lr

0000e36c <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    e36c:	b480      	push	{r7}
    e36e:	b083      	sub	sp, #12
    e370:	af00      	add	r7, sp, #0
    e372:	6078      	str	r0, [r7, #4]
    e374:	460b      	mov	r3, r1
    e376:	70fb      	strb	r3, [r7, #3]
    e378:	4613      	mov	r3, r2
    e37a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    e37c:	78fb      	ldrb	r3, [r7, #3]
    e37e:	687a      	ldr	r2, [r7, #4]
    e380:	3308      	adds	r3, #8
    e382:	015b      	lsls	r3, r3, #5
    e384:	4413      	add	r3, r2
    e386:	3307      	adds	r3, #7
    e388:	78ba      	ldrb	r2, [r7, #2]
    e38a:	701a      	strb	r2, [r3, #0]
}
    e38c:	bf00      	nop
    e38e:	370c      	adds	r7, #12
    e390:	46bd      	mov	sp, r7
    e392:	f85d 7b04 	ldr.w	r7, [sp], #4
    e396:	4770      	bx	lr

0000e398 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    e398:	b480      	push	{r7}
    e39a:	b083      	sub	sp, #12
    e39c:	af00      	add	r7, sp, #0
    e39e:	6078      	str	r0, [r7, #4]
    e3a0:	460b      	mov	r3, r1
    e3a2:	70fb      	strb	r3, [r7, #3]
    e3a4:	4613      	mov	r3, r2
    e3a6:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    e3a8:	78fb      	ldrb	r3, [r7, #3]
    e3aa:	687a      	ldr	r2, [r7, #4]
    e3ac:	3308      	adds	r3, #8
    e3ae:	015b      	lsls	r3, r3, #5
    e3b0:	4413      	add	r3, r2
    e3b2:	3305      	adds	r3, #5
    e3b4:	78ba      	ldrb	r2, [r7, #2]
    e3b6:	701a      	strb	r2, [r3, #0]
}
    e3b8:	bf00      	nop
    e3ba:	370c      	adds	r7, #12
    e3bc:	46bd      	mov	sp, r7
    e3be:	f85d 7b04 	ldr.w	r7, [sp], #4
    e3c2:	4770      	bx	lr

0000e3c4 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    e3c4:	b480      	push	{r7}
    e3c6:	b083      	sub	sp, #12
    e3c8:	af00      	add	r7, sp, #0
    e3ca:	6078      	str	r0, [r7, #4]
    e3cc:	460b      	mov	r3, r1
    e3ce:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    e3d0:	78fb      	ldrb	r3, [r7, #3]
    e3d2:	687a      	ldr	r2, [r7, #4]
    e3d4:	3308      	adds	r3, #8
    e3d6:	015b      	lsls	r3, r3, #5
    e3d8:	4413      	add	r3, r2
    e3da:	3306      	adds	r3, #6
    e3dc:	781b      	ldrb	r3, [r3, #0]
    e3de:	b2db      	uxtb	r3, r3
}
    e3e0:	4618      	mov	r0, r3
    e3e2:	370c      	adds	r7, #12
    e3e4:	46bd      	mov	sp, r7
    e3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    e3ea:	4770      	bx	lr

0000e3ec <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    e3ec:	b480      	push	{r7}
    e3ee:	b083      	sub	sp, #12
    e3f0:	af00      	add	r7, sp, #0
    e3f2:	6078      	str	r0, [r7, #4]
    e3f4:	460b      	mov	r3, r1
    e3f6:	70fb      	strb	r3, [r7, #3]
    e3f8:	4613      	mov	r3, r2
    e3fa:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    e3fc:	78fb      	ldrb	r3, [r7, #3]
    e3fe:	687a      	ldr	r2, [r7, #4]
    e400:	3308      	adds	r3, #8
    e402:	015b      	lsls	r3, r3, #5
    e404:	4413      	add	r3, r2
    e406:	3304      	adds	r3, #4
    e408:	78ba      	ldrb	r2, [r7, #2]
    e40a:	701a      	strb	r2, [r3, #0]
}
    e40c:	bf00      	nop
    e40e:	370c      	adds	r7, #12
    e410:	46bd      	mov	sp, r7
    e412:	f85d 7b04 	ldr.w	r7, [sp], #4
    e416:	4770      	bx	lr

0000e418 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    e418:	b480      	push	{r7}
    e41a:	b083      	sub	sp, #12
    e41c:	af00      	add	r7, sp, #0
    e41e:	6078      	str	r0, [r7, #4]
    e420:	460b      	mov	r3, r1
    e422:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    e424:	78fb      	ldrb	r3, [r7, #3]
    e426:	687a      	ldr	r2, [r7, #4]
    e428:	015b      	lsls	r3, r3, #5
    e42a:	4413      	add	r3, r2
    e42c:	f503 7384 	add.w	r3, r3, #264	; 0x108
    e430:	2210      	movs	r2, #16
    e432:	701a      	strb	r2, [r3, #0]
}
    e434:	bf00      	nop
    e436:	370c      	adds	r7, #12
    e438:	46bd      	mov	sp, r7
    e43a:	f85d 7b04 	ldr.w	r7, [sp], #4
    e43e:	4770      	bx	lr

0000e440 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    e440:	b480      	push	{r7}
    e442:	b083      	sub	sp, #12
    e444:	af00      	add	r7, sp, #0
    e446:	6078      	str	r0, [r7, #4]
    e448:	460b      	mov	r3, r1
    e44a:	70fb      	strb	r3, [r7, #3]
    e44c:	4613      	mov	r3, r2
    e44e:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    e450:	78fb      	ldrb	r3, [r7, #3]
    e452:	687a      	ldr	r2, [r7, #4]
    e454:	015b      	lsls	r3, r3, #5
    e456:	4413      	add	r3, r2
    e458:	f203 1309 	addw	r3, r3, #265	; 0x109
    e45c:	78ba      	ldrb	r2, [r7, #2]
    e45e:	701a      	strb	r2, [r3, #0]
}
    e460:	bf00      	nop
    e462:	370c      	adds	r7, #12
    e464:	46bd      	mov	sp, r7
    e466:	f85d 7b04 	ldr.w	r7, [sp], #4
    e46a:	4770      	bx	lr

0000e46c <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    e46c:	b480      	push	{r7}
    e46e:	b083      	sub	sp, #12
    e470:	af00      	add	r7, sp, #0
    e472:	6078      	str	r0, [r7, #4]
    e474:	460b      	mov	r3, r1
    e476:	70fb      	strb	r3, [r7, #3]
    e478:	4613      	mov	r3, r2
    e47a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    e47c:	78fb      	ldrb	r3, [r7, #3]
    e47e:	687a      	ldr	r2, [r7, #4]
    e480:	015b      	lsls	r3, r3, #5
    e482:	4413      	add	r3, r2
    e484:	f503 7384 	add.w	r3, r3, #264	; 0x108
    e488:	78ba      	ldrb	r2, [r7, #2]
    e48a:	701a      	strb	r2, [r3, #0]
}
    e48c:	bf00      	nop
    e48e:	370c      	adds	r7, #12
    e490:	46bd      	mov	sp, r7
    e492:	f85d 7b04 	ldr.w	r7, [sp], #4
    e496:	4770      	bx	lr

0000e498 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    e498:	b480      	push	{r7}
    e49a:	b085      	sub	sp, #20
    e49c:	af00      	add	r7, sp, #0
    e49e:	6078      	str	r0, [r7, #4]
    e4a0:	460b      	mov	r3, r1
    e4a2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    e4a4:	78fb      	ldrb	r3, [r7, #3]
    e4a6:	687a      	ldr	r2, [r7, #4]
    e4a8:	3308      	adds	r3, #8
    e4aa:	015b      	lsls	r3, r3, #5
    e4ac:	4413      	add	r3, r2
    e4ae:	781b      	ldrb	r3, [r3, #0]
    e4b0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    e4b2:	7bfb      	ldrb	r3, [r7, #15]
    e4b4:	f003 0307 	and.w	r3, r3, #7
    e4b8:	73fb      	strb	r3, [r7, #15]
	return tmp;
    e4ba:	7bfb      	ldrb	r3, [r7, #15]
}
    e4bc:	4618      	mov	r0, r3
    e4be:	3714      	adds	r7, #20
    e4c0:	46bd      	mov	sp, r7
    e4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    e4c6:	4770      	bx	lr

0000e4c8 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    e4c8:	b480      	push	{r7}
    e4ca:	b085      	sub	sp, #20
    e4cc:	af00      	add	r7, sp, #0
    e4ce:	6078      	str	r0, [r7, #4]
    e4d0:	460b      	mov	r3, r1
    e4d2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    e4d4:	78fb      	ldrb	r3, [r7, #3]
    e4d6:	687a      	ldr	r2, [r7, #4]
    e4d8:	3308      	adds	r3, #8
    e4da:	015b      	lsls	r3, r3, #5
    e4dc:	4413      	add	r3, r2
    e4de:	781b      	ldrb	r3, [r3, #0]
    e4e0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    e4e2:	7bfb      	ldrb	r3, [r7, #15]
    e4e4:	091b      	lsrs	r3, r3, #4
    e4e6:	b2db      	uxtb	r3, r3
    e4e8:	f003 0307 	and.w	r3, r3, #7
    e4ec:	73fb      	strb	r3, [r7, #15]
	return tmp;
    e4ee:	7bfb      	ldrb	r3, [r7, #15]
}
    e4f0:	4618      	mov	r0, r3
    e4f2:	3714      	adds	r7, #20
    e4f4:	46bd      	mov	sp, r7
    e4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    e4fa:	4770      	bx	lr

0000e4fc <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    e4fc:	b480      	push	{r7}
    e4fe:	b083      	sub	sp, #12
    e500:	af00      	add	r7, sp, #0
    e502:	6078      	str	r0, [r7, #4]
    e504:	460b      	mov	r3, r1
    e506:	70fb      	strb	r3, [r7, #3]
    e508:	4613      	mov	r3, r2
    e50a:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    e50c:	78fb      	ldrb	r3, [r7, #3]
    e50e:	687a      	ldr	r2, [r7, #4]
    e510:	3308      	adds	r3, #8
    e512:	015b      	lsls	r3, r3, #5
    e514:	4413      	add	r3, r2
    e516:	78ba      	ldrb	r2, [r7, #2]
    e518:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    e51a:	bf00      	nop
    e51c:	370c      	adds	r7, #12
    e51e:	46bd      	mov	sp, r7
    e520:	f85d 7b04 	ldr.w	r7, [sp], #4
    e524:	4770      	bx	lr

0000e526 <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    e526:	b480      	push	{r7}
    e528:	b083      	sub	sp, #12
    e52a:	af00      	add	r7, sp, #0
    e52c:	6078      	str	r0, [r7, #4]
    e52e:	460b      	mov	r3, r1
    e530:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    e532:	78fb      	ldrb	r3, [r7, #3]
    e534:	687a      	ldr	r2, [r7, #4]
    e536:	3308      	adds	r3, #8
    e538:	015b      	lsls	r3, r3, #5
    e53a:	4413      	add	r3, r2
    e53c:	781b      	ldrb	r3, [r3, #0]
    e53e:	b2db      	uxtb	r3, r3
}
    e540:	4618      	mov	r0, r3
    e542:	370c      	adds	r7, #12
    e544:	46bd      	mov	sp, r7
    e546:	f85d 7b04 	ldr.w	r7, [sp], #4
    e54a:	4770      	bx	lr

0000e54c <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    e54c:	b480      	push	{r7}
    e54e:	b083      	sub	sp, #12
    e550:	af00      	add	r7, sp, #0
    e552:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    e554:	687b      	ldr	r3, [r7, #4]
    e556:	8b9b      	ldrh	r3, [r3, #28]
    e558:	b29b      	uxth	r3, r3
}
    e55a:	4618      	mov	r0, r3
    e55c:	370c      	adds	r7, #12
    e55e:	46bd      	mov	sp, r7
    e560:	f85d 7b04 	ldr.w	r7, [sp], #4
    e564:	4770      	bx	lr

0000e566 <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    e566:	b480      	push	{r7}
    e568:	b083      	sub	sp, #12
    e56a:	af00      	add	r7, sp, #0
    e56c:	6078      	str	r0, [r7, #4]
    e56e:	460b      	mov	r3, r1
    e570:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    e572:	687b      	ldr	r3, [r7, #4]
    e574:	887a      	ldrh	r2, [r7, #2]
    e576:	839a      	strh	r2, [r3, #28]
}
    e578:	bf00      	nop
    e57a:	370c      	adds	r7, #12
    e57c:	46bd      	mov	sp, r7
    e57e:	f85d 7b04 	ldr.w	r7, [sp], #4
    e582:	4770      	bx	lr

0000e584 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    e584:	b480      	push	{r7}
    e586:	b083      	sub	sp, #12
    e588:	af00      	add	r7, sp, #0
    e58a:	6078      	str	r0, [r7, #4]
    e58c:	460b      	mov	r3, r1
    e58e:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    e590:	687b      	ldr	r3, [r7, #4]
    e592:	887a      	ldrh	r2, [r7, #2]
    e594:	831a      	strh	r2, [r3, #24]
}
    e596:	bf00      	nop
    e598:	370c      	adds	r7, #12
    e59a:	46bd      	mov	sp, r7
    e59c:	f85d 7b04 	ldr.w	r7, [sp], #4
    e5a0:	4770      	bx	lr

0000e5a2 <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    e5a2:	b480      	push	{r7}
    e5a4:	b083      	sub	sp, #12
    e5a6:	af00      	add	r7, sp, #0
    e5a8:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    e5aa:	687b      	ldr	r3, [r7, #4]
    e5ac:	8b1b      	ldrh	r3, [r3, #24]
    e5ae:	b29b      	uxth	r3, r3
}
    e5b0:	4618      	mov	r0, r3
    e5b2:	370c      	adds	r7, #12
    e5b4:	46bd      	mov	sp, r7
    e5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    e5ba:	4770      	bx	lr

0000e5bc <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    e5bc:	b480      	push	{r7}
    e5be:	b083      	sub	sp, #12
    e5c0:	af00      	add	r7, sp, #0
    e5c2:	6078      	str	r0, [r7, #4]
    e5c4:	460b      	mov	r3, r1
    e5c6:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    e5c8:	687b      	ldr	r3, [r7, #4]
    e5ca:	887a      	ldrh	r2, [r7, #2]
    e5cc:	829a      	strh	r2, [r3, #20]
}
    e5ce:	bf00      	nop
    e5d0:	370c      	adds	r7, #12
    e5d2:	46bd      	mov	sp, r7
    e5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    e5d8:	4770      	bx	lr

0000e5da <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    e5da:	b480      	push	{r7}
    e5dc:	b085      	sub	sp, #20
    e5de:	af00      	add	r7, sp, #0
    e5e0:	6078      	str	r0, [r7, #4]
    e5e2:	460b      	mov	r3, r1
    e5e4:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    e5e6:	687b      	ldr	r3, [r7, #4]
    e5e8:	789b      	ldrb	r3, [r3, #2]
    e5ea:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    e5ec:	7bfa      	ldrb	r2, [r7, #15]
    e5ee:	78fb      	ldrb	r3, [r7, #3]
    e5f0:	4013      	ands	r3, r2
    e5f2:	73fb      	strb	r3, [r7, #15]
	return tmp;
    e5f4:	7bfb      	ldrb	r3, [r7, #15]
}
    e5f6:	4618      	mov	r0, r3
    e5f8:	3714      	adds	r7, #20
    e5fa:	46bd      	mov	sp, r7
    e5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    e600:	4770      	bx	lr
	...

0000e604 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    e604:	b580      	push	{r7, lr}
    e606:	b082      	sub	sp, #8
    e608:	af00      	add	r7, sp, #0
    e60a:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    e60c:	687b      	ldr	r3, [r7, #4]
    e60e:	781b      	ldrb	r3, [r3, #0]
    e610:	b2db      	uxtb	r3, r3
    e612:	f023 0302 	bic.w	r3, r3, #2
    e616:	b2da      	uxtb	r2, r3
    e618:	687b      	ldr	r3, [r7, #4]
    e61a:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    e61c:	2103      	movs	r1, #3
    e61e:	6878      	ldr	r0, [r7, #4]
    e620:	4b02      	ldr	r3, [pc, #8]	; (e62c <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    e622:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    e624:	bf00      	nop
    e626:	3708      	adds	r7, #8
    e628:	46bd      	mov	sp, r7
    e62a:	bd80      	pop	{r7, pc}
    e62c:	0000e2b7 	.word	0x0000e2b7

0000e630 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    e630:	b580      	push	{r7, lr}
    e632:	b084      	sub	sp, #16
    e634:	af00      	add	r7, sp, #0
    e636:	6078      	str	r0, [r7, #4]
    e638:	460b      	mov	r3, r1
    e63a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    e63c:	2103      	movs	r1, #3
    e63e:	6878      	ldr	r0, [r7, #4]
    e640:	4b06      	ldr	r3, [pc, #24]	; (e65c <hri_usb_get_CTRLA_reg+0x2c>)
    e642:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    e644:	687b      	ldr	r3, [r7, #4]
    e646:	781b      	ldrb	r3, [r3, #0]
    e648:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    e64a:	7bfa      	ldrb	r2, [r7, #15]
    e64c:	78fb      	ldrb	r3, [r7, #3]
    e64e:	4013      	ands	r3, r2
    e650:	73fb      	strb	r3, [r7, #15]
	return tmp;
    e652:	7bfb      	ldrb	r3, [r7, #15]
}
    e654:	4618      	mov	r0, r3
    e656:	3710      	adds	r7, #16
    e658:	46bd      	mov	sp, r7
    e65a:	bd80      	pop	{r7, pc}
    e65c:	0000e2b7 	.word	0x0000e2b7

0000e660 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    e660:	b580      	push	{r7, lr}
    e662:	b082      	sub	sp, #8
    e664:	af00      	add	r7, sp, #0
    e666:	6078      	str	r0, [r7, #4]
    e668:	460b      	mov	r3, r1
    e66a:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    e66c:	687b      	ldr	r3, [r7, #4]
    e66e:	78fa      	ldrb	r2, [r7, #3]
    e670:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    e672:	2103      	movs	r1, #3
    e674:	6878      	ldr	r0, [r7, #4]
    e676:	4b03      	ldr	r3, [pc, #12]	; (e684 <hri_usb_write_CTRLA_reg+0x24>)
    e678:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    e67a:	bf00      	nop
    e67c:	3708      	adds	r7, #8
    e67e:	46bd      	mov	sp, r7
    e680:	bd80      	pop	{r7, pc}
    e682:	bf00      	nop
    e684:	0000e2b7 	.word	0x0000e2b7

0000e688 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    e688:	b580      	push	{r7, lr}
    e68a:	b082      	sub	sp, #8
    e68c:	af00      	add	r7, sp, #0
    e68e:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    e690:	2103      	movs	r1, #3
    e692:	6878      	ldr	r0, [r7, #4]
    e694:	4b04      	ldr	r3, [pc, #16]	; (e6a8 <hri_usb_read_CTRLA_reg+0x20>)
    e696:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    e698:	687b      	ldr	r3, [r7, #4]
    e69a:	781b      	ldrb	r3, [r3, #0]
    e69c:	b2db      	uxtb	r3, r3
}
    e69e:	4618      	mov	r0, r3
    e6a0:	3708      	adds	r7, #8
    e6a2:	46bd      	mov	sp, r7
    e6a4:	bd80      	pop	{r7, pc}
    e6a6:	bf00      	nop
    e6a8:	0000e2b7 	.word	0x0000e2b7

0000e6ac <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    e6ac:	b480      	push	{r7}
    e6ae:	b083      	sub	sp, #12
    e6b0:	af00      	add	r7, sp, #0
    e6b2:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    e6b4:	687b      	ldr	r3, [r7, #4]
    e6b6:	891b      	ldrh	r3, [r3, #8]
    e6b8:	b29b      	uxth	r3, r3
    e6ba:	f023 0301 	bic.w	r3, r3, #1
    e6be:	b29a      	uxth	r2, r3
    e6c0:	687b      	ldr	r3, [r7, #4]
    e6c2:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    e6c4:	bf00      	nop
    e6c6:	370c      	adds	r7, #12
    e6c8:	46bd      	mov	sp, r7
    e6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    e6ce:	4770      	bx	lr

0000e6d0 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    e6d0:	b480      	push	{r7}
    e6d2:	b083      	sub	sp, #12
    e6d4:	af00      	add	r7, sp, #0
    e6d6:	6078      	str	r0, [r7, #4]
    e6d8:	460b      	mov	r3, r1
    e6da:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    e6dc:	687b      	ldr	r3, [r7, #4]
    e6de:	887a      	ldrh	r2, [r7, #2]
    e6e0:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    e6e2:	bf00      	nop
    e6e4:	370c      	adds	r7, #12
    e6e6:	46bd      	mov	sp, r7
    e6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    e6ec:	4770      	bx	lr

0000e6ee <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    e6ee:	b480      	push	{r7}
    e6f0:	b083      	sub	sp, #12
    e6f2:	af00      	add	r7, sp, #0
    e6f4:	6078      	str	r0, [r7, #4]
    e6f6:	460b      	mov	r3, r1
    e6f8:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    e6fa:	687b      	ldr	r3, [r7, #4]
    e6fc:	78fa      	ldrb	r2, [r7, #3]
    e6fe:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    e700:	bf00      	nop
    e702:	370c      	adds	r7, #12
    e704:	46bd      	mov	sp, r7
    e706:	f85d 7b04 	ldr.w	r7, [sp], #4
    e70a:	4770      	bx	lr

0000e70c <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    e70c:	b480      	push	{r7}
    e70e:	b083      	sub	sp, #12
    e710:	af00      	add	r7, sp, #0
    e712:	6078      	str	r0, [r7, #4]
    e714:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    e716:	687b      	ldr	r3, [r7, #4]
    e718:	683a      	ldr	r2, [r7, #0]
    e71a:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    e71c:	bf00      	nop
    e71e:	370c      	adds	r7, #12
    e720:	46bd      	mov	sp, r7
    e722:	f85d 7b04 	ldr.w	r7, [sp], #4
    e726:	4770      	bx	lr

0000e728 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    e728:	b480      	push	{r7}
    e72a:	b083      	sub	sp, #12
    e72c:	af00      	add	r7, sp, #0
    e72e:	6078      	str	r0, [r7, #4]
    e730:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    e732:	2300      	movs	r3, #0
}
    e734:	4618      	mov	r0, r3
    e736:	370c      	adds	r7, #12
    e738:	46bd      	mov	sp, r7
    e73a:	f85d 7b04 	ldr.w	r7, [sp], #4
    e73e:	4770      	bx	lr

0000e740 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    e740:	b480      	push	{r7}
    e742:	b085      	sub	sp, #20
    e744:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    e746:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    e74a:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    e74c:	4b28      	ldr	r3, [pc, #160]	; (e7f0 <_usb_load_calib+0xb0>)
    e74e:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    e750:	f003 031f 	and.w	r3, r3, #31
    e754:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    e756:	4b26      	ldr	r3, [pc, #152]	; (e7f0 <_usb_load_calib+0xb0>)
    e758:	681b      	ldr	r3, [r3, #0]
    e75a:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    e75c:	f003 031f 	and.w	r3, r3, #31
    e760:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    e762:	4b23      	ldr	r3, [pc, #140]	; (e7f0 <_usb_load_calib+0xb0>)
    e764:	681b      	ldr	r3, [r3, #0]
    e766:	0a9b      	lsrs	r3, r3, #10
    e768:	f003 0307 	and.w	r3, r3, #7
    e76c:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    e76e:	68fb      	ldr	r3, [r7, #12]
    e770:	2b00      	cmp	r3, #0
    e772:	d002      	beq.n	e77a <_usb_load_calib+0x3a>
    e774:	68fb      	ldr	r3, [r7, #12]
    e776:	2b1f      	cmp	r3, #31
    e778:	d101      	bne.n	e77e <_usb_load_calib+0x3e>
		pad_transn = 9;
    e77a:	2309      	movs	r3, #9
    e77c:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    e77e:	68bb      	ldr	r3, [r7, #8]
    e780:	2b00      	cmp	r3, #0
    e782:	d002      	beq.n	e78a <_usb_load_calib+0x4a>
    e784:	68bb      	ldr	r3, [r7, #8]
    e786:	2b1f      	cmp	r3, #31
    e788:	d101      	bne.n	e78e <_usb_load_calib+0x4e>
		pad_transp = 25;
    e78a:	2319      	movs	r3, #25
    e78c:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    e78e:	687b      	ldr	r3, [r7, #4]
    e790:	2b00      	cmp	r3, #0
    e792:	d002      	beq.n	e79a <_usb_load_calib+0x5a>
    e794:	687b      	ldr	r3, [r7, #4]
    e796:	2b07      	cmp	r3, #7
    e798:	d101      	bne.n	e79e <_usb_load_calib+0x5e>
		pad_trim = 6;
    e79a:	2306      	movs	r3, #6
    e79c:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    e79e:	68fb      	ldr	r3, [r7, #12]
    e7a0:	b29b      	uxth	r3, r3
    e7a2:	019b      	lsls	r3, r3, #6
    e7a4:	b29b      	uxth	r3, r3
    e7a6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    e7aa:	b29a      	uxth	r2, r3
    e7ac:	68bb      	ldr	r3, [r7, #8]
    e7ae:	b29b      	uxth	r3, r3
    e7b0:	f003 031f 	and.w	r3, r3, #31
    e7b4:	b29b      	uxth	r3, r3
    e7b6:	4313      	orrs	r3, r2
    e7b8:	b29a      	uxth	r2, r3
    e7ba:	687b      	ldr	r3, [r7, #4]
    e7bc:	b29b      	uxth	r3, r3
    e7be:	031b      	lsls	r3, r3, #12
    e7c0:	b29b      	uxth	r3, r3
    e7c2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    e7c6:	b29b      	uxth	r3, r3
    e7c8:	4313      	orrs	r3, r2
    e7ca:	b29a      	uxth	r2, r3
    e7cc:	683b      	ldr	r3, [r7, #0]
    e7ce:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    e7d0:	683a      	ldr	r2, [r7, #0]
    e7d2:	78d3      	ldrb	r3, [r2, #3]
    e7d4:	f043 0303 	orr.w	r3, r3, #3
    e7d8:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    e7da:	683a      	ldr	r2, [r7, #0]
    e7dc:	78d3      	ldrb	r3, [r2, #3]
    e7de:	f043 030c 	orr.w	r3, r3, #12
    e7e2:	70d3      	strb	r3, [r2, #3]
}
    e7e4:	bf00      	nop
    e7e6:	3714      	adds	r7, #20
    e7e8:	46bd      	mov	sp, r7
    e7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    e7ee:	4770      	bx	lr
    e7f0:	00800084 	.word	0x00800084

0000e7f4 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    e7f4:	b580      	push	{r7, lr}
    e7f6:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    e7f8:	bf00      	nop
    e7fa:	2203      	movs	r2, #3
    e7fc:	2100      	movs	r1, #0
    e7fe:	4804      	ldr	r0, [pc, #16]	; (e810 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    e800:	4b04      	ldr	r3, [pc, #16]	; (e814 <_usb_d_dev_wait_dpll_rdy+0x20>)
    e802:	4798      	blx	r3
    e804:	4603      	mov	r3, r0
    e806:	2b03      	cmp	r3, #3
    e808:	d1f7      	bne.n	e7fa <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    e80a:	bf00      	nop
    e80c:	bd80      	pop	{r7, pc}
    e80e:	bf00      	nop
    e810:	40001000 	.word	0x40001000
    e814:	0000e229 	.word	0x0000e229

0000e818 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    e818:	b580      	push	{r7, lr}
    e81a:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    e81c:	480e      	ldr	r0, [pc, #56]	; (e858 <_usb_d_dev_wait_dfll_rdy+0x40>)
    e81e:	4b0f      	ldr	r3, [pc, #60]	; (e85c <_usb_d_dev_wait_dfll_rdy+0x44>)
    e820:	4798      	blx	r3
    e822:	4603      	mov	r3, r0
    e824:	2b00      	cmp	r3, #0
    e826:	d00a      	beq.n	e83e <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    e828:	bf00      	nop
    e82a:	f44f 6110 	mov.w	r1, #2304	; 0x900
    e82e:	480a      	ldr	r0, [pc, #40]	; (e858 <_usb_d_dev_wait_dfll_rdy+0x40>)
    e830:	4b0b      	ldr	r3, [pc, #44]	; (e860 <_usb_d_dev_wait_dfll_rdy+0x48>)
    e832:	4798      	blx	r3
    e834:	4603      	mov	r3, r0
    e836:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    e83a:	d1f6      	bne.n	e82a <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    e83c:	e009      	b.n	e852 <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    e83e:	bf00      	nop
    e840:	f44f 7180 	mov.w	r1, #256	; 0x100
    e844:	4804      	ldr	r0, [pc, #16]	; (e858 <_usb_d_dev_wait_dfll_rdy+0x40>)
    e846:	4b06      	ldr	r3, [pc, #24]	; (e860 <_usb_d_dev_wait_dfll_rdy+0x48>)
    e848:	4798      	blx	r3
    e84a:	4603      	mov	r3, r0
    e84c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    e850:	d1f6      	bne.n	e840 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    e852:	bf00      	nop
    e854:	bd80      	pop	{r7, pc}
    e856:	bf00      	nop
    e858:	40001000 	.word	0x40001000
    e85c:	0000e287 	.word	0x0000e287
    e860:	0000e261 	.word	0x0000e261

0000e864 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    e864:	b580      	push	{r7, lr}
    e866:	b082      	sub	sp, #8
    e868:	af00      	add	r7, sp, #0
    e86a:	4603      	mov	r3, r0
    e86c:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    e86e:	79fb      	ldrb	r3, [r7, #7]
    e870:	2b00      	cmp	r3, #0
    e872:	d102      	bne.n	e87a <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    e874:	4b05      	ldr	r3, [pc, #20]	; (e88c <_usb_d_dev_wait_clk_rdy+0x28>)
    e876:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    e878:	e004      	b.n	e884 <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    e87a:	79fb      	ldrb	r3, [r7, #7]
    e87c:	2b01      	cmp	r3, #1
    e87e:	d101      	bne.n	e884 <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    e880:	4b03      	ldr	r3, [pc, #12]	; (e890 <_usb_d_dev_wait_clk_rdy+0x2c>)
    e882:	4798      	blx	r3
}
    e884:	bf00      	nop
    e886:	3708      	adds	r7, #8
    e888:	46bd      	mov	sp, r7
    e88a:	bd80      	pop	{r7, pc}
    e88c:	0000e819 	.word	0x0000e819
    e890:	0000e7f5 	.word	0x0000e7f5

0000e894 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    e894:	b580      	push	{r7, lr}
    e896:	b082      	sub	sp, #8
    e898:	af00      	add	r7, sp, #0
    e89a:	4603      	mov	r3, r0
    e89c:	6039      	str	r1, [r7, #0]
    e89e:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    e8a0:	683b      	ldr	r3, [r7, #0]
    e8a2:	b2da      	uxtb	r2, r3
    e8a4:	79fb      	ldrb	r3, [r7, #7]
    e8a6:	4619      	mov	r1, r3
    e8a8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e8ac:	4b02      	ldr	r3, [pc, #8]	; (e8b8 <_usbd_ep_int_ack+0x24>)
    e8ae:	4798      	blx	r3
}
    e8b0:	bf00      	nop
    e8b2:	3708      	adds	r7, #8
    e8b4:	46bd      	mov	sp, r7
    e8b6:	bd80      	pop	{r7, pc}
    e8b8:	0000e36d 	.word	0x0000e36d

0000e8bc <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    e8bc:	b580      	push	{r7, lr}
    e8be:	b082      	sub	sp, #8
    e8c0:	af00      	add	r7, sp, #0
    e8c2:	4603      	mov	r3, r0
    e8c4:	6039      	str	r1, [r7, #0]
    e8c6:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    e8c8:	683b      	ldr	r3, [r7, #0]
    e8ca:	b2da      	uxtb	r2, r3
    e8cc:	79fb      	ldrb	r3, [r7, #7]
    e8ce:	4619      	mov	r1, r3
    e8d0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e8d4:	4b02      	ldr	r3, [pc, #8]	; (e8e0 <_usbd_ep_int_en+0x24>)
    e8d6:	4798      	blx	r3
}
    e8d8:	bf00      	nop
    e8da:	3708      	adds	r7, #8
    e8dc:	46bd      	mov	sp, r7
    e8de:	bd80      	pop	{r7, pc}
    e8e0:	0000e441 	.word	0x0000e441

0000e8e4 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    e8e4:	b580      	push	{r7, lr}
    e8e6:	b082      	sub	sp, #8
    e8e8:	af00      	add	r7, sp, #0
    e8ea:	4603      	mov	r3, r0
    e8ec:	6039      	str	r1, [r7, #0]
    e8ee:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    e8f0:	683b      	ldr	r3, [r7, #0]
    e8f2:	b2da      	uxtb	r2, r3
    e8f4:	79fb      	ldrb	r3, [r7, #7]
    e8f6:	4619      	mov	r1, r3
    e8f8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e8fc:	4b02      	ldr	r3, [pc, #8]	; (e908 <_usbd_ep_int_dis+0x24>)
    e8fe:	4798      	blx	r3
}
    e900:	bf00      	nop
    e902:	3708      	adds	r7, #8
    e904:	46bd      	mov	sp, r7
    e906:	bd80      	pop	{r7, pc}
    e908:	0000e46d 	.word	0x0000e46d

0000e90c <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    e90c:	b580      	push	{r7, lr}
    e90e:	b082      	sub	sp, #8
    e910:	af00      	add	r7, sp, #0
    e912:	4603      	mov	r3, r0
    e914:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    e916:	79fb      	ldrb	r3, [r7, #7]
    e918:	4619      	mov	r1, r3
    e91a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e91e:	4b06      	ldr	r3, [pc, #24]	; (e938 <_usbd_ep_is_ctrl+0x2c>)
    e920:	4798      	blx	r3
    e922:	4603      	mov	r3, r0
    e924:	2b11      	cmp	r3, #17
    e926:	bf0c      	ite	eq
    e928:	2301      	moveq	r3, #1
    e92a:	2300      	movne	r3, #0
    e92c:	b2db      	uxtb	r3, r3
}
    e92e:	4618      	mov	r0, r3
    e930:	3708      	adds	r7, #8
    e932:	46bd      	mov	sp, r7
    e934:	bd80      	pop	{r7, pc}
    e936:	bf00      	nop
    e938:	0000e527 	.word	0x0000e527

0000e93c <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    e93c:	b580      	push	{r7, lr}
    e93e:	b082      	sub	sp, #8
    e940:	af00      	add	r7, sp, #0
    e942:	4603      	mov	r3, r0
    e944:	71fb      	strb	r3, [r7, #7]
    e946:	460b      	mov	r3, r1
    e948:	71bb      	strb	r3, [r7, #6]
    e94a:	4613      	mov	r3, r2
    e94c:	717b      	strb	r3, [r7, #5]
	if (st) {
    e94e:	797b      	ldrb	r3, [r7, #5]
    e950:	2b00      	cmp	r3, #0
    e952:	d00b      	beq.n	e96c <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    e954:	79bb      	ldrb	r3, [r7, #6]
    e956:	2210      	movs	r2, #16
    e958:	fa02 f303 	lsl.w	r3, r2, r3
    e95c:	b2da      	uxtb	r2, r3
    e95e:	79fb      	ldrb	r3, [r7, #7]
    e960:	4619      	mov	r1, r3
    e962:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e966:	4b09      	ldr	r3, [pc, #36]	; (e98c <_usbd_ep_set_stall+0x50>)
    e968:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    e96a:	e00a      	b.n	e982 <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    e96c:	79bb      	ldrb	r3, [r7, #6]
    e96e:	2210      	movs	r2, #16
    e970:	fa02 f303 	lsl.w	r3, r2, r3
    e974:	b2da      	uxtb	r2, r3
    e976:	79fb      	ldrb	r3, [r7, #7]
    e978:	4619      	mov	r1, r3
    e97a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e97e:	4b04      	ldr	r3, [pc, #16]	; (e990 <_usbd_ep_set_stall+0x54>)
    e980:	4798      	blx	r3
}
    e982:	bf00      	nop
    e984:	3708      	adds	r7, #8
    e986:	46bd      	mov	sp, r7
    e988:	bd80      	pop	{r7, pc}
    e98a:	bf00      	nop
    e98c:	0000e399 	.word	0x0000e399
    e990:	0000e3ed 	.word	0x0000e3ed

0000e994 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    e994:	b580      	push	{r7, lr}
    e996:	b084      	sub	sp, #16
    e998:	af00      	add	r7, sp, #0
    e99a:	4603      	mov	r3, r0
    e99c:	460a      	mov	r2, r1
    e99e:	71fb      	strb	r3, [r7, #7]
    e9a0:	4613      	mov	r3, r2
    e9a2:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    e9a4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    e9a8:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    e9aa:	79fb      	ldrb	r3, [r7, #7]
    e9ac:	4619      	mov	r1, r3
    e9ae:	68f8      	ldr	r0, [r7, #12]
    e9b0:	4b08      	ldr	r3, [pc, #32]	; (e9d4 <_usbd_ep_is_stalled+0x40>)
    e9b2:	4798      	blx	r3
    e9b4:	4603      	mov	r3, r0
    e9b6:	4619      	mov	r1, r3
    e9b8:	79bb      	ldrb	r3, [r7, #6]
    e9ba:	2210      	movs	r2, #16
    e9bc:	fa02 f303 	lsl.w	r3, r2, r3
    e9c0:	400b      	ands	r3, r1
    e9c2:	2b00      	cmp	r3, #0
    e9c4:	bf14      	ite	ne
    e9c6:	2301      	movne	r3, #1
    e9c8:	2300      	moveq	r3, #0
    e9ca:	b2db      	uxtb	r3, r3
}
    e9cc:	4618      	mov	r0, r3
    e9ce:	3710      	adds	r7, #16
    e9d0:	46bd      	mov	sp, r7
    e9d2:	bd80      	pop	{r7, pc}
    e9d4:	0000e3c5 	.word	0x0000e3c5

0000e9d8 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    e9d8:	b580      	push	{r7, lr}
    e9da:	b084      	sub	sp, #16
    e9dc:	af00      	add	r7, sp, #0
    e9de:	4603      	mov	r3, r0
    e9e0:	460a      	mov	r2, r1
    e9e2:	71fb      	strb	r3, [r7, #7]
    e9e4:	4613      	mov	r3, r2
    e9e6:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    e9e8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    e9ec:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    e9ee:	79fb      	ldrb	r3, [r7, #7]
    e9f0:	4619      	mov	r1, r3
    e9f2:	68f8      	ldr	r0, [r7, #12]
    e9f4:	4b08      	ldr	r3, [pc, #32]	; (ea18 <_usbd_ep_is_stall_sent+0x40>)
    e9f6:	4798      	blx	r3
    e9f8:	4603      	mov	r3, r0
    e9fa:	4619      	mov	r1, r3
    e9fc:	79bb      	ldrb	r3, [r7, #6]
    e9fe:	2220      	movs	r2, #32
    ea00:	fa02 f303 	lsl.w	r3, r2, r3
    ea04:	400b      	ands	r3, r1
    ea06:	2b00      	cmp	r3, #0
    ea08:	bf14      	ite	ne
    ea0a:	2301      	movne	r3, #1
    ea0c:	2300      	moveq	r3, #0
    ea0e:	b2db      	uxtb	r3, r3
}
    ea10:	4618      	mov	r0, r3
    ea12:	3710      	adds	r7, #16
    ea14:	46bd      	mov	sp, r7
    ea16:	bd80      	pop	{r7, pc}
    ea18:	0000e345 	.word	0x0000e345

0000ea1c <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    ea1c:	b580      	push	{r7, lr}
    ea1e:	b082      	sub	sp, #8
    ea20:	af00      	add	r7, sp, #0
    ea22:	4603      	mov	r3, r0
    ea24:	460a      	mov	r2, r1
    ea26:	71fb      	strb	r3, [r7, #7]
    ea28:	4613      	mov	r3, r2
    ea2a:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    ea2c:	79bb      	ldrb	r3, [r7, #6]
    ea2e:	2220      	movs	r2, #32
    ea30:	409a      	lsls	r2, r3
    ea32:	79fb      	ldrb	r3, [r7, #7]
    ea34:	4611      	mov	r1, r2
    ea36:	4618      	mov	r0, r3
    ea38:	4b02      	ldr	r3, [pc, #8]	; (ea44 <_usbd_ep_ack_stall+0x28>)
    ea3a:	4798      	blx	r3
}
    ea3c:	bf00      	nop
    ea3e:	3708      	adds	r7, #8
    ea40:	46bd      	mov	sp, r7
    ea42:	bd80      	pop	{r7, pc}
    ea44:	0000e895 	.word	0x0000e895

0000ea48 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    ea48:	b580      	push	{r7, lr}
    ea4a:	b082      	sub	sp, #8
    ea4c:	af00      	add	r7, sp, #0
    ea4e:	4603      	mov	r3, r0
    ea50:	71fb      	strb	r3, [r7, #7]
    ea52:	460b      	mov	r3, r1
    ea54:	71bb      	strb	r3, [r7, #6]
    ea56:	4613      	mov	r3, r2
    ea58:	717b      	strb	r3, [r7, #5]
	if (en) {
    ea5a:	797b      	ldrb	r3, [r7, #5]
    ea5c:	2b00      	cmp	r3, #0
    ea5e:	d008      	beq.n	ea72 <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    ea60:	79bb      	ldrb	r3, [r7, #6]
    ea62:	2220      	movs	r2, #32
    ea64:	409a      	lsls	r2, r3
    ea66:	79fb      	ldrb	r3, [r7, #7]
    ea68:	4611      	mov	r1, r2
    ea6a:	4618      	mov	r0, r3
    ea6c:	4b07      	ldr	r3, [pc, #28]	; (ea8c <_usbd_ep_int_stall_en+0x44>)
    ea6e:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    ea70:	e007      	b.n	ea82 <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    ea72:	79bb      	ldrb	r3, [r7, #6]
    ea74:	2220      	movs	r2, #32
    ea76:	409a      	lsls	r2, r3
    ea78:	79fb      	ldrb	r3, [r7, #7]
    ea7a:	4611      	mov	r1, r2
    ea7c:	4618      	mov	r0, r3
    ea7e:	4b04      	ldr	r3, [pc, #16]	; (ea90 <_usbd_ep_int_stall_en+0x48>)
    ea80:	4798      	blx	r3
}
    ea82:	bf00      	nop
    ea84:	3708      	adds	r7, #8
    ea86:	46bd      	mov	sp, r7
    ea88:	bd80      	pop	{r7, pc}
    ea8a:	bf00      	nop
    ea8c:	0000e8bd 	.word	0x0000e8bd
    ea90:	0000e8e5 	.word	0x0000e8e5

0000ea94 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    ea94:	b580      	push	{r7, lr}
    ea96:	b082      	sub	sp, #8
    ea98:	af00      	add	r7, sp, #0
    ea9a:	4603      	mov	r3, r0
    ea9c:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    ea9e:	79fb      	ldrb	r3, [r7, #7]
    eaa0:	4619      	mov	r1, r3
    eaa2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    eaa6:	4b03      	ldr	r3, [pc, #12]	; (eab4 <_usbd_ep_stop_setup+0x20>)
    eaa8:	4798      	blx	r3
}
    eaaa:	bf00      	nop
    eaac:	3708      	adds	r7, #8
    eaae:	46bd      	mov	sp, r7
    eab0:	bd80      	pop	{r7, pc}
    eab2:	bf00      	nop
    eab4:	0000e419 	.word	0x0000e419

0000eab8 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    eab8:	b580      	push	{r7, lr}
    eaba:	b082      	sub	sp, #8
    eabc:	af00      	add	r7, sp, #0
    eabe:	4603      	mov	r3, r0
    eac0:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    eac2:	79fb      	ldrb	r3, [r7, #7]
    eac4:	2210      	movs	r2, #16
    eac6:	4619      	mov	r1, r3
    eac8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    eacc:	4b05      	ldr	r3, [pc, #20]	; (eae4 <_usbd_ep_is_setup+0x2c>)
    eace:	4798      	blx	r3
    ead0:	4603      	mov	r3, r0
    ead2:	2b00      	cmp	r3, #0
    ead4:	bf14      	ite	ne
    ead6:	2301      	movne	r3, #1
    ead8:	2300      	moveq	r3, #0
    eada:	b2db      	uxtb	r3, r3
}
    eadc:	4618      	mov	r0, r3
    eade:	3708      	adds	r7, #8
    eae0:	46bd      	mov	sp, r7
    eae2:	bd80      	pop	{r7, pc}
    eae4:	0000e30f 	.word	0x0000e30f

0000eae8 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    eae8:	b580      	push	{r7, lr}
    eaea:	b082      	sub	sp, #8
    eaec:	af00      	add	r7, sp, #0
    eaee:	4603      	mov	r3, r0
    eaf0:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    eaf2:	79fb      	ldrb	r3, [r7, #7]
    eaf4:	2110      	movs	r1, #16
    eaf6:	4618      	mov	r0, r3
    eaf8:	4b02      	ldr	r3, [pc, #8]	; (eb04 <_usbd_ep_ack_setup+0x1c>)
    eafa:	4798      	blx	r3
}
    eafc:	bf00      	nop
    eafe:	3708      	adds	r7, #8
    eb00:	46bd      	mov	sp, r7
    eb02:	bd80      	pop	{r7, pc}
    eb04:	0000e895 	.word	0x0000e895

0000eb08 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    eb08:	b580      	push	{r7, lr}
    eb0a:	b082      	sub	sp, #8
    eb0c:	af00      	add	r7, sp, #0
    eb0e:	4603      	mov	r3, r0
    eb10:	71fb      	strb	r3, [r7, #7]
    eb12:	460b      	mov	r3, r1
    eb14:	71bb      	strb	r3, [r7, #6]
    eb16:	4613      	mov	r3, r2
    eb18:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    eb1a:	797b      	ldrb	r3, [r7, #5]
    eb1c:	2b00      	cmp	r3, #0
    eb1e:	d00b      	beq.n	eb38 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    eb20:	79bb      	ldrb	r3, [r7, #6]
    eb22:	2201      	movs	r2, #1
    eb24:	fa02 f303 	lsl.w	r3, r2, r3
    eb28:	b2da      	uxtb	r2, r3
    eb2a:	79fb      	ldrb	r3, [r7, #7]
    eb2c:	4619      	mov	r1, r3
    eb2e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    eb32:	4b09      	ldr	r3, [pc, #36]	; (eb58 <_usbd_ep_set_toggle+0x50>)
    eb34:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    eb36:	e00a      	b.n	eb4e <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    eb38:	79bb      	ldrb	r3, [r7, #6]
    eb3a:	2201      	movs	r2, #1
    eb3c:	fa02 f303 	lsl.w	r3, r2, r3
    eb40:	b2da      	uxtb	r2, r3
    eb42:	79fb      	ldrb	r3, [r7, #7]
    eb44:	4619      	mov	r1, r3
    eb46:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    eb4a:	4b04      	ldr	r3, [pc, #16]	; (eb5c <_usbd_ep_set_toggle+0x54>)
    eb4c:	4798      	blx	r3
}
    eb4e:	bf00      	nop
    eb50:	3708      	adds	r7, #8
    eb52:	46bd      	mov	sp, r7
    eb54:	bd80      	pop	{r7, pc}
    eb56:	bf00      	nop
    eb58:	0000e399 	.word	0x0000e399
    eb5c:	0000e3ed 	.word	0x0000e3ed

0000eb60 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    eb60:	b580      	push	{r7, lr}
    eb62:	b082      	sub	sp, #8
    eb64:	af00      	add	r7, sp, #0
    eb66:	4603      	mov	r3, r0
    eb68:	460a      	mov	r2, r1
    eb6a:	71fb      	strb	r3, [r7, #7]
    eb6c:	4613      	mov	r3, r2
    eb6e:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    eb70:	79bb      	ldrb	r3, [r7, #6]
    eb72:	2201      	movs	r2, #1
    eb74:	409a      	lsls	r2, r3
    eb76:	79fb      	ldrb	r3, [r7, #7]
    eb78:	4611      	mov	r1, r2
    eb7a:	4618      	mov	r0, r3
    eb7c:	4b02      	ldr	r3, [pc, #8]	; (eb88 <_usbd_ep_ack_io_cpt+0x28>)
    eb7e:	4798      	blx	r3
}
    eb80:	bf00      	nop
    eb82:	3708      	adds	r7, #8
    eb84:	46bd      	mov	sp, r7
    eb86:	bd80      	pop	{r7, pc}
    eb88:	0000e895 	.word	0x0000e895

0000eb8c <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    eb8c:	b480      	push	{r7}
    eb8e:	b085      	sub	sp, #20
    eb90:	af00      	add	r7, sp, #0
    eb92:	4603      	mov	r3, r0
    eb94:	603a      	str	r2, [r7, #0]
    eb96:	71fb      	strb	r3, [r7, #7]
    eb98:	460b      	mov	r3, r1
    eb9a:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    eb9c:	79fa      	ldrb	r2, [r7, #7]
    eb9e:	79bb      	ldrb	r3, [r7, #6]
    eba0:	0052      	lsls	r2, r2, #1
    eba2:	4413      	add	r3, r2
    eba4:	011b      	lsls	r3, r3, #4
    eba6:	4a06      	ldr	r2, [pc, #24]	; (ebc0 <_usbd_ep_set_buf+0x34>)
    eba8:	4413      	add	r3, r2
    ebaa:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    ebac:	68fb      	ldr	r3, [r7, #12]
    ebae:	683a      	ldr	r2, [r7, #0]
    ebb0:	601a      	str	r2, [r3, #0]
}
    ebb2:	bf00      	nop
    ebb4:	3714      	adds	r7, #20
    ebb6:	46bd      	mov	sp, r7
    ebb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    ebbc:	4770      	bx	lr
    ebbe:	bf00      	nop
    ebc0:	200018e4 	.word	0x200018e4

0000ebc4 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    ebc4:	b480      	push	{r7}
    ebc6:	b085      	sub	sp, #20
    ebc8:	af00      	add	r7, sp, #0
    ebca:	4603      	mov	r3, r0
    ebcc:	71fb      	strb	r3, [r7, #7]
    ebce:	460b      	mov	r3, r1
    ebd0:	71bb      	strb	r3, [r7, #6]
    ebd2:	4613      	mov	r3, r2
    ebd4:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    ebd6:	79fa      	ldrb	r2, [r7, #7]
    ebd8:	79bb      	ldrb	r3, [r7, #6]
    ebda:	0052      	lsls	r2, r2, #1
    ebdc:	4413      	add	r3, r2
    ebde:	011b      	lsls	r3, r3, #4
    ebe0:	4a08      	ldr	r2, [pc, #32]	; (ec04 <_usbd_ep_set_in_count+0x40>)
    ebe2:	4413      	add	r3, r2
    ebe4:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    ebe6:	88bb      	ldrh	r3, [r7, #4]
    ebe8:	f3c3 030d 	ubfx	r3, r3, #0, #14
    ebec:	b299      	uxth	r1, r3
    ebee:	68fa      	ldr	r2, [r7, #12]
    ebf0:	6853      	ldr	r3, [r2, #4]
    ebf2:	f361 339b 	bfi	r3, r1, #14, #14
    ebf6:	6053      	str	r3, [r2, #4]
}
    ebf8:	bf00      	nop
    ebfa:	3714      	adds	r7, #20
    ebfc:	46bd      	mov	sp, r7
    ebfe:	f85d 7b04 	ldr.w	r7, [sp], #4
    ec02:	4770      	bx	lr
    ec04:	200018e4 	.word	0x200018e4

0000ec08 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    ec08:	b480      	push	{r7}
    ec0a:	b085      	sub	sp, #20
    ec0c:	af00      	add	r7, sp, #0
    ec0e:	4603      	mov	r3, r0
    ec10:	71fb      	strb	r3, [r7, #7]
    ec12:	460b      	mov	r3, r1
    ec14:	71bb      	strb	r3, [r7, #6]
    ec16:	4613      	mov	r3, r2
    ec18:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    ec1a:	79fa      	ldrb	r2, [r7, #7]
    ec1c:	79bb      	ldrb	r3, [r7, #6]
    ec1e:	0052      	lsls	r2, r2, #1
    ec20:	4413      	add	r3, r2
    ec22:	011b      	lsls	r3, r3, #4
    ec24:	4a08      	ldr	r2, [pc, #32]	; (ec48 <_usbd_ep_set_in_size+0x40>)
    ec26:	4413      	add	r3, r2
    ec28:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    ec2a:	88bb      	ldrh	r3, [r7, #4]
    ec2c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    ec30:	b299      	uxth	r1, r3
    ec32:	68fa      	ldr	r2, [r7, #12]
    ec34:	6853      	ldr	r3, [r2, #4]
    ec36:	f361 030d 	bfi	r3, r1, #0, #14
    ec3a:	6053      	str	r3, [r2, #4]
}
    ec3c:	bf00      	nop
    ec3e:	3714      	adds	r7, #20
    ec40:	46bd      	mov	sp, r7
    ec42:	f85d 7b04 	ldr.w	r7, [sp], #4
    ec46:	4770      	bx	lr
    ec48:	200018e4 	.word	0x200018e4

0000ec4c <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    ec4c:	b480      	push	{r7}
    ec4e:	b085      	sub	sp, #20
    ec50:	af00      	add	r7, sp, #0
    ec52:	4603      	mov	r3, r0
    ec54:	71fb      	strb	r3, [r7, #7]
    ec56:	460b      	mov	r3, r1
    ec58:	71bb      	strb	r3, [r7, #6]
    ec5a:	4613      	mov	r3, r2
    ec5c:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    ec5e:	79fa      	ldrb	r2, [r7, #7]
    ec60:	79bb      	ldrb	r3, [r7, #6]
    ec62:	0052      	lsls	r2, r2, #1
    ec64:	4413      	add	r3, r2
    ec66:	011b      	lsls	r3, r3, #4
    ec68:	4a08      	ldr	r2, [pc, #32]	; (ec8c <_usbd_ep_set_out_count+0x40>)
    ec6a:	4413      	add	r3, r2
    ec6c:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    ec6e:	88bb      	ldrh	r3, [r7, #4]
    ec70:	f3c3 030d 	ubfx	r3, r3, #0, #14
    ec74:	b299      	uxth	r1, r3
    ec76:	68fa      	ldr	r2, [r7, #12]
    ec78:	6853      	ldr	r3, [r2, #4]
    ec7a:	f361 030d 	bfi	r3, r1, #0, #14
    ec7e:	6053      	str	r3, [r2, #4]
}
    ec80:	bf00      	nop
    ec82:	3714      	adds	r7, #20
    ec84:	46bd      	mov	sp, r7
    ec86:	f85d 7b04 	ldr.w	r7, [sp], #4
    ec8a:	4770      	bx	lr
    ec8c:	200018e4 	.word	0x200018e4

0000ec90 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    ec90:	b480      	push	{r7}
    ec92:	b085      	sub	sp, #20
    ec94:	af00      	add	r7, sp, #0
    ec96:	4603      	mov	r3, r0
    ec98:	71fb      	strb	r3, [r7, #7]
    ec9a:	460b      	mov	r3, r1
    ec9c:	71bb      	strb	r3, [r7, #6]
    ec9e:	4613      	mov	r3, r2
    eca0:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    eca2:	79fa      	ldrb	r2, [r7, #7]
    eca4:	79bb      	ldrb	r3, [r7, #6]
    eca6:	0052      	lsls	r2, r2, #1
    eca8:	4413      	add	r3, r2
    ecaa:	011b      	lsls	r3, r3, #4
    ecac:	4a08      	ldr	r2, [pc, #32]	; (ecd0 <_usbd_ep_set_out_size+0x40>)
    ecae:	4413      	add	r3, r2
    ecb0:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    ecb2:	88bb      	ldrh	r3, [r7, #4]
    ecb4:	f3c3 030d 	ubfx	r3, r3, #0, #14
    ecb8:	b299      	uxth	r1, r3
    ecba:	68fa      	ldr	r2, [r7, #12]
    ecbc:	6853      	ldr	r3, [r2, #4]
    ecbe:	f361 339b 	bfi	r3, r1, #14, #14
    ecc2:	6053      	str	r3, [r2, #4]
}
    ecc4:	bf00      	nop
    ecc6:	3714      	adds	r7, #20
    ecc8:	46bd      	mov	sp, r7
    ecca:	f85d 7b04 	ldr.w	r7, [sp], #4
    ecce:	4770      	bx	lr
    ecd0:	200018e4 	.word	0x200018e4

0000ecd4 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    ecd4:	b580      	push	{r7, lr}
    ecd6:	b084      	sub	sp, #16
    ecd8:	af00      	add	r7, sp, #0
    ecda:	60ba      	str	r2, [r7, #8]
    ecdc:	607b      	str	r3, [r7, #4]
    ecde:	4603      	mov	r3, r0
    ece0:	73fb      	strb	r3, [r7, #15]
    ece2:	460b      	mov	r3, r1
    ece4:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    ece6:	68bb      	ldr	r3, [r7, #8]
    ece8:	b29a      	uxth	r2, r3
    ecea:	7bb9      	ldrb	r1, [r7, #14]
    ecec:	7bfb      	ldrb	r3, [r7, #15]
    ecee:	4618      	mov	r0, r3
    ecf0:	4b06      	ldr	r3, [pc, #24]	; (ed0c <_usbd_ep_set_in_trans+0x38>)
    ecf2:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    ecf4:	687b      	ldr	r3, [r7, #4]
    ecf6:	b29a      	uxth	r2, r3
    ecf8:	7bb9      	ldrb	r1, [r7, #14]
    ecfa:	7bfb      	ldrb	r3, [r7, #15]
    ecfc:	4618      	mov	r0, r3
    ecfe:	4b04      	ldr	r3, [pc, #16]	; (ed10 <_usbd_ep_set_in_trans+0x3c>)
    ed00:	4798      	blx	r3
}
    ed02:	bf00      	nop
    ed04:	3710      	adds	r7, #16
    ed06:	46bd      	mov	sp, r7
    ed08:	bd80      	pop	{r7, pc}
    ed0a:	bf00      	nop
    ed0c:	0000ec09 	.word	0x0000ec09
    ed10:	0000ebc5 	.word	0x0000ebc5

0000ed14 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    ed14:	b580      	push	{r7, lr}
    ed16:	b084      	sub	sp, #16
    ed18:	af00      	add	r7, sp, #0
    ed1a:	60ba      	str	r2, [r7, #8]
    ed1c:	607b      	str	r3, [r7, #4]
    ed1e:	4603      	mov	r3, r0
    ed20:	73fb      	strb	r3, [r7, #15]
    ed22:	460b      	mov	r3, r1
    ed24:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    ed26:	68bb      	ldr	r3, [r7, #8]
    ed28:	b29a      	uxth	r2, r3
    ed2a:	7bb9      	ldrb	r1, [r7, #14]
    ed2c:	7bfb      	ldrb	r3, [r7, #15]
    ed2e:	4618      	mov	r0, r3
    ed30:	4b06      	ldr	r3, [pc, #24]	; (ed4c <_usbd_ep_set_out_trans+0x38>)
    ed32:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    ed34:	687b      	ldr	r3, [r7, #4]
    ed36:	b29a      	uxth	r2, r3
    ed38:	7bb9      	ldrb	r1, [r7, #14]
    ed3a:	7bfb      	ldrb	r3, [r7, #15]
    ed3c:	4618      	mov	r0, r3
    ed3e:	4b04      	ldr	r3, [pc, #16]	; (ed50 <_usbd_ep_set_out_trans+0x3c>)
    ed40:	4798      	blx	r3
}
    ed42:	bf00      	nop
    ed44:	3710      	adds	r7, #16
    ed46:	46bd      	mov	sp, r7
    ed48:	bd80      	pop	{r7, pc}
    ed4a:	bf00      	nop
    ed4c:	0000ec91 	.word	0x0000ec91
    ed50:	0000ec4d 	.word	0x0000ec4d

0000ed54 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    ed54:	b480      	push	{r7}
    ed56:	b085      	sub	sp, #20
    ed58:	af00      	add	r7, sp, #0
    ed5a:	4603      	mov	r3, r0
    ed5c:	460a      	mov	r2, r1
    ed5e:	71fb      	strb	r3, [r7, #7]
    ed60:	4613      	mov	r3, r2
    ed62:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    ed64:	79fa      	ldrb	r2, [r7, #7]
    ed66:	79bb      	ldrb	r3, [r7, #6]
    ed68:	0052      	lsls	r2, r2, #1
    ed6a:	4413      	add	r3, r2
    ed6c:	011b      	lsls	r3, r3, #4
    ed6e:	4a06      	ldr	r2, [pc, #24]	; (ed88 <_usbd_ep_clear_bank_status+0x34>)
    ed70:	4413      	add	r3, r2
    ed72:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    ed74:	68fb      	ldr	r3, [r7, #12]
    ed76:	2200      	movs	r2, #0
    ed78:	729a      	strb	r2, [r3, #10]
}
    ed7a:	bf00      	nop
    ed7c:	3714      	adds	r7, #20
    ed7e:	46bd      	mov	sp, r7
    ed80:	f85d 7b04 	ldr.w	r7, [sp], #4
    ed84:	4770      	bx	lr
    ed86:	bf00      	nop
    ed88:	200018e4 	.word	0x200018e4

0000ed8c <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    ed8c:	b580      	push	{r7, lr}
    ed8e:	b082      	sub	sp, #8
    ed90:	af00      	add	r7, sp, #0
    ed92:	4603      	mov	r3, r0
    ed94:	71fb      	strb	r3, [r7, #7]
    ed96:	460b      	mov	r3, r1
    ed98:	71bb      	strb	r3, [r7, #6]
    ed9a:	4613      	mov	r3, r2
    ed9c:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    ed9e:	797b      	ldrb	r3, [r7, #5]
    eda0:	2b00      	cmp	r3, #0
    eda2:	d00b      	beq.n	edbc <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    eda4:	79bb      	ldrb	r3, [r7, #6]
    eda6:	2240      	movs	r2, #64	; 0x40
    eda8:	fa02 f303 	lsl.w	r3, r2, r3
    edac:	b2da      	uxtb	r2, r3
    edae:	79fb      	ldrb	r3, [r7, #7]
    edb0:	4619      	mov	r1, r3
    edb2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    edb6:	4b09      	ldr	r3, [pc, #36]	; (eddc <_usbd_ep_set_in_rdy+0x50>)
    edb8:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    edba:	e00a      	b.n	edd2 <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    edbc:	79bb      	ldrb	r3, [r7, #6]
    edbe:	2240      	movs	r2, #64	; 0x40
    edc0:	fa02 f303 	lsl.w	r3, r2, r3
    edc4:	b2da      	uxtb	r2, r3
    edc6:	79fb      	ldrb	r3, [r7, #7]
    edc8:	4619      	mov	r1, r3
    edca:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    edce:	4b04      	ldr	r3, [pc, #16]	; (ede0 <_usbd_ep_set_in_rdy+0x54>)
    edd0:	4798      	blx	r3
}
    edd2:	bf00      	nop
    edd4:	3708      	adds	r7, #8
    edd6:	46bd      	mov	sp, r7
    edd8:	bd80      	pop	{r7, pc}
    edda:	bf00      	nop
    eddc:	0000e399 	.word	0x0000e399
    ede0:	0000e3ed 	.word	0x0000e3ed

0000ede4 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    ede4:	b580      	push	{r7, lr}
    ede6:	b082      	sub	sp, #8
    ede8:	af00      	add	r7, sp, #0
    edea:	4603      	mov	r3, r0
    edec:	71fb      	strb	r3, [r7, #7]
    edee:	460b      	mov	r3, r1
    edf0:	71bb      	strb	r3, [r7, #6]
    edf2:	4613      	mov	r3, r2
    edf4:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    edf6:	797b      	ldrb	r3, [r7, #5]
    edf8:	2b00      	cmp	r3, #0
    edfa:	d00b      	beq.n	ee14 <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    edfc:	79bb      	ldrb	r3, [r7, #6]
    edfe:	2240      	movs	r2, #64	; 0x40
    ee00:	fa02 f303 	lsl.w	r3, r2, r3
    ee04:	b2da      	uxtb	r2, r3
    ee06:	79fb      	ldrb	r3, [r7, #7]
    ee08:	4619      	mov	r1, r3
    ee0a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ee0e:	4b09      	ldr	r3, [pc, #36]	; (ee34 <_usbd_ep_set_out_rdy+0x50>)
    ee10:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    ee12:	e00a      	b.n	ee2a <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    ee14:	79bb      	ldrb	r3, [r7, #6]
    ee16:	2240      	movs	r2, #64	; 0x40
    ee18:	fa02 f303 	lsl.w	r3, r2, r3
    ee1c:	b2da      	uxtb	r2, r3
    ee1e:	79fb      	ldrb	r3, [r7, #7]
    ee20:	4619      	mov	r1, r3
    ee22:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ee26:	4b04      	ldr	r3, [pc, #16]	; (ee38 <_usbd_ep_set_out_rdy+0x54>)
    ee28:	4798      	blx	r3
}
    ee2a:	bf00      	nop
    ee2c:	3708      	adds	r7, #8
    ee2e:	46bd      	mov	sp, r7
    ee30:	bd80      	pop	{r7, pc}
    ee32:	bf00      	nop
    ee34:	0000e3ed 	.word	0x0000e3ed
    ee38:	0000e399 	.word	0x0000e399

0000ee3c <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    ee3c:	b480      	push	{r7}
    ee3e:	b083      	sub	sp, #12
    ee40:	af00      	add	r7, sp, #0
    ee42:	4603      	mov	r3, r0
    ee44:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    ee46:	88fb      	ldrh	r3, [r7, #6]
    ee48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    ee4c:	d820      	bhi.n	ee90 <_usbd_ep_pcksize_size+0x54>
    ee4e:	88fb      	ldrh	r3, [r7, #6]
    ee50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    ee54:	d81a      	bhi.n	ee8c <_usbd_ep_pcksize_size+0x50>
    ee56:	88fb      	ldrh	r3, [r7, #6]
    ee58:	2b80      	cmp	r3, #128	; 0x80
    ee5a:	d815      	bhi.n	ee88 <_usbd_ep_pcksize_size+0x4c>
    ee5c:	88fb      	ldrh	r3, [r7, #6]
    ee5e:	2b40      	cmp	r3, #64	; 0x40
    ee60:	d810      	bhi.n	ee84 <_usbd_ep_pcksize_size+0x48>
    ee62:	88fb      	ldrh	r3, [r7, #6]
    ee64:	2b20      	cmp	r3, #32
    ee66:	d80b      	bhi.n	ee80 <_usbd_ep_pcksize_size+0x44>
    ee68:	88fb      	ldrh	r3, [r7, #6]
    ee6a:	2b10      	cmp	r3, #16
    ee6c:	d806      	bhi.n	ee7c <_usbd_ep_pcksize_size+0x40>
    ee6e:	88fb      	ldrh	r3, [r7, #6]
    ee70:	2b08      	cmp	r3, #8
    ee72:	bf8c      	ite	hi
    ee74:	2301      	movhi	r3, #1
    ee76:	2300      	movls	r3, #0
    ee78:	b2db      	uxtb	r3, r3
    ee7a:	e00a      	b.n	ee92 <_usbd_ep_pcksize_size+0x56>
    ee7c:	2302      	movs	r3, #2
    ee7e:	e008      	b.n	ee92 <_usbd_ep_pcksize_size+0x56>
    ee80:	2303      	movs	r3, #3
    ee82:	e006      	b.n	ee92 <_usbd_ep_pcksize_size+0x56>
    ee84:	2304      	movs	r3, #4
    ee86:	e004      	b.n	ee92 <_usbd_ep_pcksize_size+0x56>
    ee88:	2305      	movs	r3, #5
    ee8a:	e002      	b.n	ee92 <_usbd_ep_pcksize_size+0x56>
    ee8c:	2306      	movs	r3, #6
    ee8e:	e000      	b.n	ee92 <_usbd_ep_pcksize_size+0x56>
    ee90:	2307      	movs	r3, #7
}
    ee92:	4618      	mov	r0, r3
    ee94:	370c      	adds	r7, #12
    ee96:	46bd      	mov	sp, r7
    ee98:	f85d 7b04 	ldr.w	r7, [sp], #4
    ee9c:	4770      	bx	lr
	...

0000eea0 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    eea0:	b480      	push	{r7}
    eea2:	b085      	sub	sp, #20
    eea4:	af00      	add	r7, sp, #0
    eea6:	4603      	mov	r3, r0
    eea8:	460a      	mov	r2, r1
    eeaa:	71fb      	strb	r3, [r7, #7]
    eeac:	4613      	mov	r3, r2
    eeae:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    eeb0:	79fb      	ldrb	r3, [r7, #7]
    eeb2:	2b00      	cmp	r3, #0
    eeb4:	d008      	beq.n	eec8 <_usb_d_dev_ept+0x28>
    eeb6:	79bb      	ldrb	r3, [r7, #6]
    eeb8:	2b00      	cmp	r3, #0
    eeba:	d003      	beq.n	eec4 <_usb_d_dev_ept+0x24>
    eebc:	79fb      	ldrb	r3, [r7, #7]
    eebe:	3304      	adds	r3, #4
    eec0:	b2db      	uxtb	r3, r3
    eec2:	e002      	b.n	eeca <_usb_d_dev_ept+0x2a>
    eec4:	79fb      	ldrb	r3, [r7, #7]
    eec6:	e000      	b.n	eeca <_usb_d_dev_ept+0x2a>
    eec8:	2300      	movs	r3, #0
    eeca:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    eecc:	7bfa      	ldrb	r2, [r7, #15]
    eece:	4613      	mov	r3, r2
    eed0:	009b      	lsls	r3, r3, #2
    eed2:	4413      	add	r3, r2
    eed4:	009b      	lsls	r3, r3, #2
    eed6:	3310      	adds	r3, #16
    eed8:	4a04      	ldr	r2, [pc, #16]	; (eeec <_usb_d_dev_ept+0x4c>)
    eeda:	4413      	add	r3, r2
    eedc:	3304      	adds	r3, #4
}
    eede:	4618      	mov	r0, r3
    eee0:	3714      	adds	r7, #20
    eee2:	46bd      	mov	sp, r7
    eee4:	f85d 7b04 	ldr.w	r7, [sp], #4
    eee8:	4770      	bx	lr
    eeea:	bf00      	nop
    eeec:	2000181c 	.word	0x2000181c

0000eef0 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    eef0:	b580      	push	{r7, lr}
    eef2:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    eef4:	2104      	movs	r1, #4
    eef6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    eefa:	4b03      	ldr	r3, [pc, #12]	; (ef08 <_usb_d_dev_sof+0x18>)
    eefc:	4798      	blx	r3
	dev_inst.callbacks.sof();
    eefe:	4b03      	ldr	r3, [pc, #12]	; (ef0c <_usb_d_dev_sof+0x1c>)
    ef00:	681b      	ldr	r3, [r3, #0]
    ef02:	4798      	blx	r3
}
    ef04:	bf00      	nop
    ef06:	bd80      	pop	{r7, pc}
    ef08:	0000e567 	.word	0x0000e567
    ef0c:	2000181c 	.word	0x2000181c

0000ef10 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    ef10:	b580      	push	{r7, lr}
    ef12:	b084      	sub	sp, #16
    ef14:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    ef16:	2300      	movs	r3, #0
    ef18:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    ef1a:	f240 2101 	movw	r1, #513	; 0x201
    ef1e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ef22:	4b1a      	ldr	r3, [pc, #104]	; (ef8c <_usb_d_dev_lpmsusp+0x7c>)
    ef24:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    ef26:	f240 2101 	movw	r1, #513	; 0x201
    ef2a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ef2e:	4b18      	ldr	r3, [pc, #96]	; (ef90 <_usb_d_dev_lpmsusp+0x80>)
    ef30:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    ef32:	2170      	movs	r1, #112	; 0x70
    ef34:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ef38:	4b16      	ldr	r3, [pc, #88]	; (ef94 <_usb_d_dev_lpmsusp+0x84>)
    ef3a:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    ef3c:	2300      	movs	r3, #0
    ef3e:	73fb      	strb	r3, [r7, #15]
    ef40:	e018      	b.n	ef74 <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    ef42:	7bfb      	ldrb	r3, [r7, #15]
    ef44:	015b      	lsls	r3, r3, #5
    ef46:	4a14      	ldr	r2, [pc, #80]	; (ef98 <_usb_d_dev_lpmsusp+0x88>)
    ef48:	4413      	add	r3, r2
    ef4a:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    ef4c:	687b      	ldr	r3, [r7, #4]
    ef4e:	891b      	ldrh	r3, [r3, #8]
    ef50:	f3c3 0303 	ubfx	r3, r3, #0, #4
    ef54:	b2db      	uxtb	r3, r3
    ef56:	2b03      	cmp	r3, #3
    ef58:	d109      	bne.n	ef6e <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    ef5a:	687b      	ldr	r3, [r7, #4]
    ef5c:	891b      	ldrh	r3, [r3, #8]
    ef5e:	f3c3 130a 	ubfx	r3, r3, #4, #11
    ef62:	b29b      	uxth	r3, r3
    ef64:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    ef66:	687b      	ldr	r3, [r7, #4]
    ef68:	2200      	movs	r2, #0
    ef6a:	811a      	strh	r2, [r3, #8]
			break;
    ef6c:	e005      	b.n	ef7a <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    ef6e:	7bfb      	ldrb	r3, [r7, #15]
    ef70:	3301      	adds	r3, #1
    ef72:	73fb      	strb	r3, [r7, #15]
    ef74:	7bfb      	ldrb	r3, [r7, #15]
    ef76:	2b03      	cmp	r3, #3
    ef78:	d9e3      	bls.n	ef42 <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    ef7a:	4b08      	ldr	r3, [pc, #32]	; (ef9c <_usb_d_dev_lpmsusp+0x8c>)
    ef7c:	685b      	ldr	r3, [r3, #4]
    ef7e:	68b9      	ldr	r1, [r7, #8]
    ef80:	2003      	movs	r0, #3
    ef82:	4798      	blx	r3
}
    ef84:	bf00      	nop
    ef86:	3710      	adds	r7, #16
    ef88:	46bd      	mov	sp, r7
    ef8a:	bd80      	pop	{r7, pc}
    ef8c:	0000e567 	.word	0x0000e567
    ef90:	0000e5bd 	.word	0x0000e5bd
    ef94:	0000e585 	.word	0x0000e585
    ef98:	200018e4 	.word	0x200018e4
    ef9c:	2000181c 	.word	0x2000181c

0000efa0 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    efa0:	b580      	push	{r7, lr}
    efa2:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    efa4:	2180      	movs	r1, #128	; 0x80
    efa6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    efaa:	4b04      	ldr	r3, [pc, #16]	; (efbc <_usb_d_dev_ramerr+0x1c>)
    efac:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    efae:	4b04      	ldr	r3, [pc, #16]	; (efc0 <_usb_d_dev_ramerr+0x20>)
    efb0:	685b      	ldr	r3, [r3, #4]
    efb2:	2100      	movs	r1, #0
    efb4:	2005      	movs	r0, #5
    efb6:	4798      	blx	r3
}
    efb8:	bf00      	nop
    efba:	bd80      	pop	{r7, pc}
    efbc:	0000e567 	.word	0x0000e567
    efc0:	2000181c 	.word	0x2000181c

0000efc4 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    efc4:	b580      	push	{r7, lr}
    efc6:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    efc8:	2170      	movs	r1, #112	; 0x70
    efca:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    efce:	4b0b      	ldr	r3, [pc, #44]	; (effc <_usb_d_dev_wakeup+0x38>)
    efd0:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    efd2:	2170      	movs	r1, #112	; 0x70
    efd4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    efd8:	4b09      	ldr	r3, [pc, #36]	; (f000 <_usb_d_dev_wakeup+0x3c>)
    efda:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    efdc:	f240 2101 	movw	r1, #513	; 0x201
    efe0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    efe4:	4b07      	ldr	r3, [pc, #28]	; (f004 <_usb_d_dev_wakeup+0x40>)
    efe6:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    efe8:	2000      	movs	r0, #0
    efea:	4b07      	ldr	r3, [pc, #28]	; (f008 <_usb_d_dev_wakeup+0x44>)
    efec:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    efee:	4b07      	ldr	r3, [pc, #28]	; (f00c <_usb_d_dev_wakeup+0x48>)
    eff0:	685b      	ldr	r3, [r3, #4]
    eff2:	2100      	movs	r1, #0
    eff4:	2002      	movs	r0, #2
    eff6:	4798      	blx	r3
}
    eff8:	bf00      	nop
    effa:	bd80      	pop	{r7, pc}
    effc:	0000e567 	.word	0x0000e567
    f000:	0000e5bd 	.word	0x0000e5bd
    f004:	0000e585 	.word	0x0000e585
    f008:	0000e865 	.word	0x0000e865
    f00c:	2000181c 	.word	0x2000181c

0000f010 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    f010:	b580      	push	{r7, lr}
    f012:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    f014:	2200      	movs	r2, #0
    f016:	2100      	movs	r1, #0
    f018:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    f01c:	4b0d      	ldr	r3, [pc, #52]	; (f054 <_usb_d_dev_reset+0x44>)
    f01e:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    f020:	2108      	movs	r1, #8
    f022:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    f026:	4b0c      	ldr	r3, [pc, #48]	; (f058 <_usb_d_dev_reset+0x48>)
    f028:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    f02a:	2170      	movs	r1, #112	; 0x70
    f02c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    f030:	4b0a      	ldr	r3, [pc, #40]	; (f05c <_usb_d_dev_reset+0x4c>)
    f032:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    f034:	f240 2101 	movw	r1, #513	; 0x201
    f038:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    f03c:	4b08      	ldr	r3, [pc, #32]	; (f060 <_usb_d_dev_reset+0x50>)
    f03e:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    f040:	4b08      	ldr	r3, [pc, #32]	; (f064 <_usb_d_dev_reset+0x54>)
    f042:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    f044:	4b08      	ldr	r3, [pc, #32]	; (f068 <_usb_d_dev_reset+0x58>)
    f046:	685b      	ldr	r3, [r3, #4]
    f048:	2100      	movs	r1, #0
    f04a:	2001      	movs	r0, #1
    f04c:	4798      	blx	r3
}
    f04e:	bf00      	nop
    f050:	bd80      	pop	{r7, pc}
    f052:	bf00      	nop
    f054:	0000e4fd 	.word	0x0000e4fd
    f058:	0000e567 	.word	0x0000e567
    f05c:	0000e5bd 	.word	0x0000e5bd
    f060:	0000e585 	.word	0x0000e585
    f064:	0000fbcd 	.word	0x0000fbcd
    f068:	2000181c 	.word	0x2000181c

0000f06c <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    f06c:	b580      	push	{r7, lr}
    f06e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    f070:	f240 2101 	movw	r1, #513	; 0x201
    f074:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    f078:	4b09      	ldr	r3, [pc, #36]	; (f0a0 <_usb_d_dev_suspend+0x34>)
    f07a:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    f07c:	f240 2101 	movw	r1, #513	; 0x201
    f080:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    f084:	4b07      	ldr	r3, [pc, #28]	; (f0a4 <_usb_d_dev_suspend+0x38>)
    f086:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    f088:	2170      	movs	r1, #112	; 0x70
    f08a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    f08e:	4b06      	ldr	r3, [pc, #24]	; (f0a8 <_usb_d_dev_suspend+0x3c>)
    f090:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    f092:	4b06      	ldr	r3, [pc, #24]	; (f0ac <_usb_d_dev_suspend+0x40>)
    f094:	685b      	ldr	r3, [r3, #4]
    f096:	2100      	movs	r1, #0
    f098:	2004      	movs	r0, #4
    f09a:	4798      	blx	r3
}
    f09c:	bf00      	nop
    f09e:	bd80      	pop	{r7, pc}
    f0a0:	0000e567 	.word	0x0000e567
    f0a4:	0000e5bd 	.word	0x0000e5bd
    f0a8:	0000e585 	.word	0x0000e585
    f0ac:	2000181c 	.word	0x2000181c

0000f0b0 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    f0b0:	b580      	push	{r7, lr}
    f0b2:	b082      	sub	sp, #8
    f0b4:	af00      	add	r7, sp, #0
	bool     rc    = true;
    f0b6:	2301      	movs	r3, #1
    f0b8:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    f0ba:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    f0be:	4b22      	ldr	r3, [pc, #136]	; (f148 <_usb_d_dev_handle_nep+0x98>)
    f0c0:	4798      	blx	r3
    f0c2:	4603      	mov	r3, r0
    f0c4:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    f0c6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    f0ca:	4b20      	ldr	r3, [pc, #128]	; (f14c <_usb_d_dev_handle_nep+0x9c>)
    f0cc:	4798      	blx	r3
    f0ce:	4603      	mov	r3, r0
    f0d0:	461a      	mov	r2, r3
    f0d2:	88bb      	ldrh	r3, [r7, #4]
    f0d4:	4013      	ands	r3, r2
    f0d6:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    f0d8:	88bb      	ldrh	r3, [r7, #4]
    f0da:	f003 0304 	and.w	r3, r3, #4
    f0de:	2b00      	cmp	r3, #0
    f0e0:	d003      	beq.n	f0ea <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    f0e2:	4b1b      	ldr	r3, [pc, #108]	; (f150 <_usb_d_dev_handle_nep+0xa0>)
    f0e4:	4798      	blx	r3
		return true;
    f0e6:	2301      	movs	r3, #1
    f0e8:	e02a      	b.n	f140 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    f0ea:	88bb      	ldrh	r3, [r7, #4]
    f0ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
    f0f0:	2b00      	cmp	r3, #0
    f0f2:	d002      	beq.n	f0fa <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    f0f4:	4b17      	ldr	r3, [pc, #92]	; (f154 <_usb_d_dev_handle_nep+0xa4>)
    f0f6:	4798      	blx	r3
    f0f8:	e021      	b.n	f13e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    f0fa:	88bb      	ldrh	r3, [r7, #4]
    f0fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
    f100:	2b00      	cmp	r3, #0
    f102:	d002      	beq.n	f10a <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    f104:	4b14      	ldr	r3, [pc, #80]	; (f158 <_usb_d_dev_handle_nep+0xa8>)
    f106:	4798      	blx	r3
    f108:	e019      	b.n	f13e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    f10a:	88bb      	ldrh	r3, [r7, #4]
    f10c:	f003 0370 	and.w	r3, r3, #112	; 0x70
    f110:	2b00      	cmp	r3, #0
    f112:	d002      	beq.n	f11a <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    f114:	4b11      	ldr	r3, [pc, #68]	; (f15c <_usb_d_dev_handle_nep+0xac>)
    f116:	4798      	blx	r3
    f118:	e011      	b.n	f13e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    f11a:	88bb      	ldrh	r3, [r7, #4]
    f11c:	f003 0308 	and.w	r3, r3, #8
    f120:	2b00      	cmp	r3, #0
    f122:	d002      	beq.n	f12a <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    f124:	4b0e      	ldr	r3, [pc, #56]	; (f160 <_usb_d_dev_handle_nep+0xb0>)
    f126:	4798      	blx	r3
    f128:	e009      	b.n	f13e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    f12a:	88bb      	ldrh	r3, [r7, #4]
    f12c:	f003 0301 	and.w	r3, r3, #1
    f130:	2b00      	cmp	r3, #0
    f132:	d002      	beq.n	f13a <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    f134:	4b0b      	ldr	r3, [pc, #44]	; (f164 <_usb_d_dev_handle_nep+0xb4>)
    f136:	4798      	blx	r3
    f138:	e001      	b.n	f13e <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    f13a:	2300      	movs	r3, #0
    f13c:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    f13e:	79fb      	ldrb	r3, [r7, #7]
}
    f140:	4618      	mov	r0, r3
    f142:	3708      	adds	r7, #8
    f144:	46bd      	mov	sp, r7
    f146:	bd80      	pop	{r7, pc}
    f148:	0000e54d 	.word	0x0000e54d
    f14c:	0000e5a3 	.word	0x0000e5a3
    f150:	0000eef1 	.word	0x0000eef1
    f154:	0000ef11 	.word	0x0000ef11
    f158:	0000efa1 	.word	0x0000efa1
    f15c:	0000efc5 	.word	0x0000efc5
    f160:	0000f011 	.word	0x0000f011
    f164:	0000f06d 	.word	0x0000f06d

0000f168 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    f168:	b590      	push	{r4, r7, lr}
    f16a:	b089      	sub	sp, #36	; 0x24
    f16c:	af00      	add	r7, sp, #0
    f16e:	6078      	str	r0, [r7, #4]
    f170:	460b      	mov	r3, r1
    f172:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    f174:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    f178:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    f17a:	687b      	ldr	r3, [r7, #4]
    f17c:	7c9b      	ldrb	r3, [r3, #18]
    f17e:	f003 030f 	and.w	r3, r3, #15
    f182:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    f184:	7dfb      	ldrb	r3, [r7, #23]
    f186:	015b      	lsls	r3, r3, #5
    f188:	4a73      	ldr	r2, [pc, #460]	; (f358 <_usb_d_dev_in_next+0x1f0>)
    f18a:	4413      	add	r3, r2
    f18c:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    f18e:	78fb      	ldrb	r3, [r7, #3]
    f190:	2b00      	cmp	r3, #0
    f192:	d006      	beq.n	f1a2 <_usb_d_dev_in_next+0x3a>
    f194:	693b      	ldr	r3, [r7, #16]
    f196:	3310      	adds	r3, #16
    f198:	685b      	ldr	r3, [r3, #4]
    f19a:	f3c3 030d 	ubfx	r3, r3, #0, #14
    f19e:	b29b      	uxth	r3, r3
    f1a0:	e000      	b.n	f1a4 <_usb_d_dev_in_next+0x3c>
    f1a2:	2300      	movs	r3, #0
    f1a4:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    f1a6:	687b      	ldr	r3, [r7, #4]
    f1a8:	8a1b      	ldrh	r3, [r3, #16]
    f1aa:	f240 32ff 	movw	r2, #1023	; 0x3ff
    f1ae:	4293      	cmp	r3, r2
    f1b0:	d103      	bne.n	f1ba <_usb_d_dev_in_next+0x52>
    f1b2:	687b      	ldr	r3, [r7, #4]
    f1b4:	8a1b      	ldrh	r3, [r3, #16]
    f1b6:	b21b      	sxth	r3, r3
    f1b8:	e004      	b.n	f1c4 <_usb_d_dev_in_next+0x5c>
    f1ba:	687b      	ldr	r3, [r7, #4]
    f1bc:	8a1b      	ldrh	r3, [r3, #16]
    f1be:	3b01      	subs	r3, #1
    f1c0:	b29b      	uxth	r3, r3
    f1c2:	b21b      	sxth	r3, r3
    f1c4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    f1c8:	4013      	ands	r3, r2
    f1ca:	b21b      	sxth	r3, r3
    f1cc:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    f1ce:	2300      	movs	r3, #0
    f1d0:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    f1d2:	687b      	ldr	r3, [r7, #4]
    f1d4:	7cdb      	ldrb	r3, [r3, #19]
    f1d6:	f003 0307 	and.w	r3, r3, #7
    f1da:	b2db      	uxtb	r3, r3
    f1dc:	2b01      	cmp	r3, #1
    f1de:	bf0c      	ite	eq
    f1e0:	2301      	moveq	r3, #1
    f1e2:	2300      	movne	r3, #0
    f1e4:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    f1e6:	78fb      	ldrb	r3, [r7, #3]
    f1e8:	2b00      	cmp	r3, #0
    f1ea:	d004      	beq.n	f1f6 <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    f1ec:	7dfb      	ldrb	r3, [r7, #23]
    f1ee:	2101      	movs	r1, #1
    f1f0:	4618      	mov	r0, r3
    f1f2:	4b5a      	ldr	r3, [pc, #360]	; (f35c <_usb_d_dev_in_next+0x1f4>)
    f1f4:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    f1f6:	687b      	ldr	r3, [r7, #4]
    f1f8:	689a      	ldr	r2, [r3, #8]
    f1fa:	89fb      	ldrh	r3, [r7, #14]
    f1fc:	441a      	add	r2, r3
    f1fe:	687b      	ldr	r3, [r7, #4]
    f200:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    f202:	687b      	ldr	r3, [r7, #4]
    f204:	689a      	ldr	r2, [r3, #8]
    f206:	687b      	ldr	r3, [r7, #4]
    f208:	685b      	ldr	r3, [r3, #4]
    f20a:	429a      	cmp	r2, r3
    f20c:	d243      	bcs.n	f296 <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    f20e:	687b      	ldr	r3, [r7, #4]
    f210:	685b      	ldr	r3, [r3, #4]
    f212:	b29a      	uxth	r2, r3
    f214:	687b      	ldr	r3, [r7, #4]
    f216:	689b      	ldr	r3, [r3, #8]
    f218:	b29b      	uxth	r3, r3
    f21a:	1ad3      	subs	r3, r2, r3
    f21c:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    f21e:	687b      	ldr	r3, [r7, #4]
    f220:	7cdb      	ldrb	r3, [r3, #19]
    f222:	f003 0320 	and.w	r3, r3, #32
    f226:	b2db      	uxtb	r3, r3
    f228:	2b00      	cmp	r3, #0
    f22a:	d01b      	beq.n	f264 <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    f22c:	687b      	ldr	r3, [r7, #4]
    f22e:	8a1b      	ldrh	r3, [r3, #16]
    f230:	8bfa      	ldrh	r2, [r7, #30]
    f232:	429a      	cmp	r2, r3
    f234:	d902      	bls.n	f23c <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    f236:	687b      	ldr	r3, [r7, #4]
    f238:	8a1b      	ldrh	r3, [r3, #16]
    f23a:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    f23c:	687b      	ldr	r3, [r7, #4]
    f23e:	68d8      	ldr	r0, [r3, #12]
    f240:	687b      	ldr	r3, [r7, #4]
    f242:	681a      	ldr	r2, [r3, #0]
    f244:	687b      	ldr	r3, [r7, #4]
    f246:	689b      	ldr	r3, [r3, #8]
    f248:	4413      	add	r3, r2
    f24a:	8bfa      	ldrh	r2, [r7, #30]
    f24c:	4619      	mov	r1, r3
    f24e:	4b44      	ldr	r3, [pc, #272]	; (f360 <_usb_d_dev_in_next+0x1f8>)
    f250:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    f252:	687b      	ldr	r3, [r7, #4]
    f254:	68db      	ldr	r3, [r3, #12]
    f256:	461a      	mov	r2, r3
    f258:	7dfb      	ldrb	r3, [r7, #23]
    f25a:	2101      	movs	r1, #1
    f25c:	4618      	mov	r0, r3
    f25e:	4b41      	ldr	r3, [pc, #260]	; (f364 <_usb_d_dev_in_next+0x1fc>)
    f260:	4798      	blx	r3
    f262:	e011      	b.n	f288 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    f264:	8bfb      	ldrh	r3, [r7, #30]
    f266:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    f26a:	d902      	bls.n	f272 <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    f26c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    f270:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    f272:	687b      	ldr	r3, [r7, #4]
    f274:	681a      	ldr	r2, [r3, #0]
    f276:	687b      	ldr	r3, [r7, #4]
    f278:	689b      	ldr	r3, [r3, #8]
    f27a:	4413      	add	r3, r2
    f27c:	461a      	mov	r2, r3
    f27e:	7dfb      	ldrb	r3, [r7, #23]
    f280:	2101      	movs	r1, #1
    f282:	4618      	mov	r0, r3
    f284:	4b37      	ldr	r3, [pc, #220]	; (f364 <_usb_d_dev_in_next+0x1fc>)
    f286:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    f288:	8bfa      	ldrh	r2, [r7, #30]
    f28a:	7df8      	ldrb	r0, [r7, #23]
    f28c:	2300      	movs	r3, #0
    f28e:	2101      	movs	r1, #1
    f290:	4c35      	ldr	r4, [pc, #212]	; (f368 <_usb_d_dev_in_next+0x200>)
    f292:	47a0      	blx	r4
		goto _in_tx_exec;
    f294:	e041      	b.n	f31a <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    f296:	687b      	ldr	r3, [r7, #4]
    f298:	7cdb      	ldrb	r3, [r3, #19]
    f29a:	f003 0310 	and.w	r3, r3, #16
    f29e:	b2db      	uxtb	r3, r3
    f2a0:	2b00      	cmp	r3, #0
    f2a2:	d00b      	beq.n	f2bc <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    f2a4:	687a      	ldr	r2, [r7, #4]
    f2a6:	7cd3      	ldrb	r3, [r2, #19]
    f2a8:	f36f 1304 	bfc	r3, #4, #1
    f2ac:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    f2ae:	7df8      	ldrb	r0, [r7, #23]
    f2b0:	2300      	movs	r3, #0
    f2b2:	2200      	movs	r2, #0
    f2b4:	2101      	movs	r1, #1
    f2b6:	4c2c      	ldr	r4, [pc, #176]	; (f368 <_usb_d_dev_in_next+0x200>)
    f2b8:	47a0      	blx	r4
		goto _in_tx_exec;
    f2ba:	e02e      	b.n	f31a <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    f2bc:	7afb      	ldrb	r3, [r7, #11]
    f2be:	2b00      	cmp	r3, #0
    f2c0:	d006      	beq.n	f2d0 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    f2c2:	7dfb      	ldrb	r3, [r7, #23]
    f2c4:	224b      	movs	r2, #75	; 0x4b
    f2c6:	4619      	mov	r1, r3
    f2c8:	69b8      	ldr	r0, [r7, #24]
    f2ca:	4b28      	ldr	r3, [pc, #160]	; (f36c <_usb_d_dev_in_next+0x204>)
    f2cc:	4798      	blx	r3
    f2ce:	e005      	b.n	f2dc <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    f2d0:	7dfb      	ldrb	r3, [r7, #23]
    f2d2:	224a      	movs	r2, #74	; 0x4a
    f2d4:	4619      	mov	r1, r3
    f2d6:	69b8      	ldr	r0, [r7, #24]
    f2d8:	4b24      	ldr	r3, [pc, #144]	; (f36c <_usb_d_dev_in_next+0x204>)
    f2da:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    f2dc:	687b      	ldr	r3, [r7, #4]
    f2de:	8a1b      	ldrh	r3, [r3, #16]
    f2e0:	89ba      	ldrh	r2, [r7, #12]
    f2e2:	429a      	cmp	r2, r3
    f2e4:	d114      	bne.n	f310 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    f2e6:	687a      	ldr	r2, [r7, #4]
    f2e8:	7cd3      	ldrb	r3, [r2, #19]
    f2ea:	f36f 1386 	bfc	r3, #6, #1
    f2ee:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    f2f0:	4b1f      	ldr	r3, [pc, #124]	; (f370 <_usb_d_dev_in_next+0x208>)
    f2f2:	68db      	ldr	r3, [r3, #12]
    f2f4:	687a      	ldr	r2, [r7, #4]
    f2f6:	7c90      	ldrb	r0, [r2, #18]
    f2f8:	687a      	ldr	r2, [r7, #4]
    f2fa:	6892      	ldr	r2, [r2, #8]
    f2fc:	4611      	mov	r1, r2
    f2fe:	4798      	blx	r3
    f300:	4603      	mov	r3, r0
    f302:	2b00      	cmp	r3, #0
    f304:	d124      	bne.n	f350 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    f306:	687a      	ldr	r2, [r7, #4]
    f308:	7cd3      	ldrb	r3, [r2, #19]
    f30a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f30e:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    f310:	2100      	movs	r1, #0
    f312:	6878      	ldr	r0, [r7, #4]
    f314:	4b17      	ldr	r3, [pc, #92]	; (f374 <_usb_d_dev_in_next+0x20c>)
    f316:	4798      	blx	r3
	return;
    f318:	e01b      	b.n	f352 <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    f31a:	78fb      	ldrb	r3, [r7, #3]
    f31c:	f083 0301 	eor.w	r3, r3, #1
    f320:	b2db      	uxtb	r3, r3
    f322:	2b00      	cmp	r3, #0
    f324:	d00d      	beq.n	f342 <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    f326:	7afb      	ldrb	r3, [r7, #11]
    f328:	2b00      	cmp	r3, #0
    f32a:	d002      	beq.n	f332 <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    f32c:	234e      	movs	r3, #78	; 0x4e
    f32e:	777b      	strb	r3, [r7, #29]
    f330:	e001      	b.n	f336 <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    f332:	234a      	movs	r3, #74	; 0x4a
    f334:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    f336:	7f7a      	ldrb	r2, [r7, #29]
    f338:	7dfb      	ldrb	r3, [r7, #23]
    f33a:	4619      	mov	r1, r3
    f33c:	69b8      	ldr	r0, [r7, #24]
    f33e:	4b0e      	ldr	r3, [pc, #56]	; (f378 <_usb_d_dev_in_next+0x210>)
    f340:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    f342:	7dfb      	ldrb	r3, [r7, #23]
    f344:	2201      	movs	r2, #1
    f346:	2101      	movs	r1, #1
    f348:	4618      	mov	r0, r3
    f34a:	4b0c      	ldr	r3, [pc, #48]	; (f37c <_usb_d_dev_in_next+0x214>)
    f34c:	4798      	blx	r3
    f34e:	e000      	b.n	f352 <_usb_d_dev_in_next+0x1ea>
			return;
    f350:	bf00      	nop
}
    f352:	3724      	adds	r7, #36	; 0x24
    f354:	46bd      	mov	sp, r7
    f356:	bd90      	pop	{r4, r7, pc}
    f358:	200018e4 	.word	0x200018e4
    f35c:	0000eb61 	.word	0x0000eb61
    f360:	00012db5 	.word	0x00012db5
    f364:	0000eb8d 	.word	0x0000eb8d
    f368:	0000ecd5 	.word	0x0000ecd5
    f36c:	0000e46d 	.word	0x0000e46d
    f370:	2000181c 	.word	0x2000181c
    f374:	00010491 	.word	0x00010491
    f378:	0000e441 	.word	0x0000e441
    f37c:	0000ed8d 	.word	0x0000ed8d

0000f380 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    f380:	b590      	push	{r4, r7, lr}
    f382:	b08b      	sub	sp, #44	; 0x2c
    f384:	af00      	add	r7, sp, #0
    f386:	6078      	str	r0, [r7, #4]
    f388:	460b      	mov	r3, r1
    f38a:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    f38c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    f390:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    f392:	687b      	ldr	r3, [r7, #4]
    f394:	7c9b      	ldrb	r3, [r3, #18]
    f396:	f003 030f 	and.w	r3, r3, #15
    f39a:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    f39c:	7ffb      	ldrb	r3, [r7, #31]
    f39e:	015b      	lsls	r3, r3, #5
    f3a0:	4a94      	ldr	r2, [pc, #592]	; (f5f4 <_usb_d_dev_out_next+0x274>)
    f3a2:	4413      	add	r3, r2
    f3a4:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    f3a6:	78fb      	ldrb	r3, [r7, #3]
    f3a8:	2b00      	cmp	r3, #0
    f3aa:	d005      	beq.n	f3b8 <_usb_d_dev_out_next+0x38>
    f3ac:	69bb      	ldr	r3, [r7, #24]
    f3ae:	685b      	ldr	r3, [r3, #4]
    f3b0:	f3c3 338d 	ubfx	r3, r3, #14, #14
    f3b4:	b29b      	uxth	r3, r3
    f3b6:	e000      	b.n	f3ba <_usb_d_dev_out_next+0x3a>
    f3b8:	2300      	movs	r3, #0
    f3ba:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    f3bc:	78fb      	ldrb	r3, [r7, #3]
    f3be:	2b00      	cmp	r3, #0
    f3c0:	d005      	beq.n	f3ce <_usb_d_dev_out_next+0x4e>
    f3c2:	69bb      	ldr	r3, [r7, #24]
    f3c4:	685b      	ldr	r3, [r3, #4]
    f3c6:	f3c3 030d 	ubfx	r3, r3, #0, #14
    f3ca:	b29b      	uxth	r3, r3
    f3cc:	e000      	b.n	f3d0 <_usb_d_dev_out_next+0x50>
    f3ce:	2300      	movs	r3, #0
    f3d0:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    f3d2:	687b      	ldr	r3, [r7, #4]
    f3d4:	8a1b      	ldrh	r3, [r3, #16]
    f3d6:	f240 32ff 	movw	r2, #1023	; 0x3ff
    f3da:	4293      	cmp	r3, r2
    f3dc:	d004      	beq.n	f3e8 <_usb_d_dev_out_next+0x68>
    f3de:	687b      	ldr	r3, [r7, #4]
    f3e0:	8a1b      	ldrh	r3, [r3, #16]
    f3e2:	3b01      	subs	r3, #1
    f3e4:	b29b      	uxth	r3, r3
    f3e6:	e001      	b.n	f3ec <_usb_d_dev_out_next+0x6c>
    f3e8:	f240 33ff 	movw	r3, #1023	; 0x3ff
    f3ec:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    f3ee:	8aba      	ldrh	r2, [r7, #20]
    f3f0:	8a7b      	ldrh	r3, [r7, #18]
    f3f2:	4013      	ands	r3, r2
    f3f4:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    f3f6:	687b      	ldr	r3, [r7, #4]
    f3f8:	7cdb      	ldrb	r3, [r3, #19]
    f3fa:	f003 0307 	and.w	r3, r3, #7
    f3fe:	b2db      	uxtb	r3, r3
    f400:	2b01      	cmp	r3, #1
    f402:	bf0c      	ite	eq
    f404:	2301      	moveq	r3, #1
    f406:	2300      	movne	r3, #0
    f408:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    f40a:	78fb      	ldrb	r3, [r7, #3]
    f40c:	2b00      	cmp	r3, #0
    f40e:	d004      	beq.n	f41a <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    f410:	7ffb      	ldrb	r3, [r7, #31]
    f412:	2100      	movs	r1, #0
    f414:	4618      	mov	r0, r3
    f416:	4b78      	ldr	r3, [pc, #480]	; (f5f8 <_usb_d_dev_out_next+0x278>)
    f418:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    f41a:	687b      	ldr	r3, [r7, #4]
    f41c:	7cdb      	ldrb	r3, [r3, #19]
    f41e:	f003 0320 	and.w	r3, r3, #32
    f422:	b2db      	uxtb	r3, r3
    f424:	2b00      	cmp	r3, #0
    f426:	d01c      	beq.n	f462 <_usb_d_dev_out_next+0xe2>
    f428:	687b      	ldr	r3, [r7, #4]
    f42a:	685b      	ldr	r3, [r3, #4]
    f42c:	2b00      	cmp	r3, #0
    f42e:	d018      	beq.n	f462 <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    f430:	687b      	ldr	r3, [r7, #4]
    f432:	685b      	ldr	r3, [r3, #4]
    f434:	b29a      	uxth	r2, r3
    f436:	687b      	ldr	r3, [r7, #4]
    f438:	689b      	ldr	r3, [r3, #8]
    f43a:	b29b      	uxth	r3, r3
    f43c:	1ad3      	subs	r3, r2, r3
    f43e:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    f440:	687b      	ldr	r3, [r7, #4]
    f442:	681a      	ldr	r2, [r3, #0]
    f444:	687b      	ldr	r3, [r7, #4]
    f446:	689b      	ldr	r3, [r3, #8]
    f448:	18d0      	adds	r0, r2, r3
    f44a:	687b      	ldr	r3, [r7, #4]
    f44c:	68d9      	ldr	r1, [r3, #12]
    f44e:	89ba      	ldrh	r2, [r7, #12]
    f450:	8a3b      	ldrh	r3, [r7, #16]
    f452:	429a      	cmp	r2, r3
    f454:	d901      	bls.n	f45a <_usb_d_dev_out_next+0xda>
    f456:	8a3b      	ldrh	r3, [r7, #16]
    f458:	e000      	b.n	f45c <_usb_d_dev_out_next+0xdc>
    f45a:	89bb      	ldrh	r3, [r7, #12]
    f45c:	461a      	mov	r2, r3
    f45e:	4b67      	ldr	r3, [pc, #412]	; (f5fc <_usb_d_dev_out_next+0x27c>)
    f460:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    f462:	687b      	ldr	r3, [r7, #4]
    f464:	685b      	ldr	r3, [r3, #4]
    f466:	2b00      	cmp	r3, #0
    f468:	d121      	bne.n	f4ae <_usb_d_dev_out_next+0x12e>
    f46a:	687b      	ldr	r3, [r7, #4]
    f46c:	7cdb      	ldrb	r3, [r3, #19]
    f46e:	f003 0310 	and.w	r3, r3, #16
    f472:	b2db      	uxtb	r3, r3
    f474:	2b00      	cmp	r3, #0
    f476:	d01a      	beq.n	f4ae <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    f478:	687a      	ldr	r2, [r7, #4]
    f47a:	7cd3      	ldrb	r3, [r2, #19]
    f47c:	f36f 1304 	bfc	r3, #4, #1
    f480:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    f482:	687a      	ldr	r2, [r7, #4]
    f484:	7cd3      	ldrb	r3, [r2, #19]
    f486:	f043 0320 	orr.w	r3, r3, #32
    f48a:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    f48c:	687b      	ldr	r3, [r7, #4]
    f48e:	68db      	ldr	r3, [r3, #12]
    f490:	461a      	mov	r2, r3
    f492:	7ffb      	ldrb	r3, [r7, #31]
    f494:	2100      	movs	r1, #0
    f496:	4618      	mov	r0, r3
    f498:	4b59      	ldr	r3, [pc, #356]	; (f600 <_usb_d_dev_out_next+0x280>)
    f49a:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    f49c:	687b      	ldr	r3, [r7, #4]
    f49e:	8a1b      	ldrh	r3, [r3, #16]
    f4a0:	461a      	mov	r2, r3
    f4a2:	7ff8      	ldrb	r0, [r7, #31]
    f4a4:	2300      	movs	r3, #0
    f4a6:	2100      	movs	r1, #0
    f4a8:	4c56      	ldr	r4, [pc, #344]	; (f604 <_usb_d_dev_out_next+0x284>)
    f4aa:	47a0      	blx	r4
		goto _out_rx_exec;
    f4ac:	e090      	b.n	f5d0 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    f4ae:	78fb      	ldrb	r3, [r7, #3]
    f4b0:	2b00      	cmp	r3, #0
    f4b2:	d010      	beq.n	f4d6 <_usb_d_dev_out_next+0x156>
    f4b4:	687b      	ldr	r3, [r7, #4]
    f4b6:	8a1b      	ldrh	r3, [r3, #16]
    f4b8:	8a3a      	ldrh	r2, [r7, #16]
    f4ba:	429a      	cmp	r2, r3
    f4bc:	d20b      	bcs.n	f4d6 <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    f4be:	687a      	ldr	r2, [r7, #4]
    f4c0:	7cd3      	ldrb	r3, [r2, #19]
    f4c2:	f36f 1304 	bfc	r3, #4, #1
    f4c6:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    f4c8:	687b      	ldr	r3, [r7, #4]
    f4ca:	689a      	ldr	r2, [r3, #8]
    f4cc:	8abb      	ldrh	r3, [r7, #20]
    f4ce:	441a      	add	r2, r3
    f4d0:	687b      	ldr	r3, [r7, #4]
    f4d2:	609a      	str	r2, [r3, #8]
    f4d4:	e05c      	b.n	f590 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    f4d6:	687b      	ldr	r3, [r7, #4]
    f4d8:	689a      	ldr	r2, [r3, #8]
    f4da:	8afb      	ldrh	r3, [r7, #22]
    f4dc:	441a      	add	r2, r3
    f4de:	687b      	ldr	r3, [r7, #4]
    f4e0:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    f4e2:	687b      	ldr	r3, [r7, #4]
    f4e4:	689a      	ldr	r2, [r3, #8]
    f4e6:	687b      	ldr	r3, [r7, #4]
    f4e8:	685b      	ldr	r3, [r3, #4]
    f4ea:	429a      	cmp	r2, r3
    f4ec:	d250      	bcs.n	f590 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    f4ee:	687b      	ldr	r3, [r7, #4]
    f4f0:	685b      	ldr	r3, [r3, #4]
    f4f2:	b29a      	uxth	r2, r3
    f4f4:	687b      	ldr	r3, [r7, #4]
    f4f6:	689b      	ldr	r3, [r3, #8]
    f4f8:	b29b      	uxth	r3, r3
    f4fa:	1ad3      	subs	r3, r2, r3
    f4fc:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    f4fe:	687b      	ldr	r3, [r7, #4]
    f500:	7cdb      	ldrb	r3, [r3, #19]
    f502:	f003 0320 	and.w	r3, r3, #32
    f506:	b2db      	uxtb	r3, r3
    f508:	2b00      	cmp	r3, #0
    f50a:	d010      	beq.n	f52e <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    f50c:	687b      	ldr	r3, [r7, #4]
    f50e:	8a1b      	ldrh	r3, [r3, #16]
    f510:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    f512:	429a      	cmp	r2, r3
    f514:	d902      	bls.n	f51c <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    f516:	687b      	ldr	r3, [r7, #4]
    f518:	8a1b      	ldrh	r3, [r3, #16]
    f51a:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    f51c:	687b      	ldr	r3, [r7, #4]
    f51e:	68db      	ldr	r3, [r3, #12]
    f520:	461a      	mov	r2, r3
    f522:	7ffb      	ldrb	r3, [r7, #31]
    f524:	2100      	movs	r1, #0
    f526:	4618      	mov	r0, r3
    f528:	4b35      	ldr	r3, [pc, #212]	; (f600 <_usb_d_dev_out_next+0x280>)
    f52a:	4798      	blx	r3
    f52c:	e029      	b.n	f582 <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    f52e:	687b      	ldr	r3, [r7, #4]
    f530:	8a1b      	ldrh	r3, [r3, #16]
    f532:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    f534:	429a      	cmp	r2, r3
    f536:	d90f      	bls.n	f558 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    f538:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    f53a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    f53e:	d903      	bls.n	f548 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    f540:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    f544:	84fb      	strh	r3, [r7, #38]	; 0x26
    f546:	e011      	b.n	f56c <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    f548:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    f54a:	8a7b      	ldrh	r3, [r7, #18]
    f54c:	4013      	ands	r3, r2
    f54e:	b29b      	uxth	r3, r3
    f550:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    f552:	1ad3      	subs	r3, r2, r3
    f554:	84fb      	strh	r3, [r7, #38]	; 0x26
    f556:	e009      	b.n	f56c <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    f558:	687b      	ldr	r3, [r7, #4]
    f55a:	8a1b      	ldrh	r3, [r3, #16]
    f55c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    f55e:	429a      	cmp	r2, r3
    f560:	d204      	bcs.n	f56c <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    f562:	687a      	ldr	r2, [r7, #4]
    f564:	7cd3      	ldrb	r3, [r2, #19]
    f566:	f043 0320 	orr.w	r3, r3, #32
    f56a:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    f56c:	687b      	ldr	r3, [r7, #4]
    f56e:	681a      	ldr	r2, [r3, #0]
    f570:	687b      	ldr	r3, [r7, #4]
    f572:	689b      	ldr	r3, [r3, #8]
    f574:	4413      	add	r3, r2
    f576:	461a      	mov	r2, r3
    f578:	7ffb      	ldrb	r3, [r7, #31]
    f57a:	2100      	movs	r1, #0
    f57c:	4618      	mov	r0, r3
    f57e:	4b20      	ldr	r3, [pc, #128]	; (f600 <_usb_d_dev_out_next+0x280>)
    f580:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    f582:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    f584:	7ff8      	ldrb	r0, [r7, #31]
    f586:	2300      	movs	r3, #0
    f588:	2100      	movs	r1, #0
    f58a:	4c1e      	ldr	r4, [pc, #120]	; (f604 <_usb_d_dev_out_next+0x284>)
    f58c:	47a0      	blx	r4
			goto _out_rx_exec;
    f58e:	e01f      	b.n	f5d0 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    f590:	7bfb      	ldrb	r3, [r7, #15]
    f592:	2b00      	cmp	r3, #0
    f594:	d006      	beq.n	f5a4 <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    f596:	7ffb      	ldrb	r3, [r7, #31]
    f598:	222d      	movs	r2, #45	; 0x2d
    f59a:	4619      	mov	r1, r3
    f59c:	6a38      	ldr	r0, [r7, #32]
    f59e:	4b1a      	ldr	r3, [pc, #104]	; (f608 <_usb_d_dev_out_next+0x288>)
    f5a0:	4798      	blx	r3
    f5a2:	e005      	b.n	f5b0 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    f5a4:	7ffb      	ldrb	r3, [r7, #31]
    f5a6:	2225      	movs	r2, #37	; 0x25
    f5a8:	4619      	mov	r1, r3
    f5aa:	6a38      	ldr	r0, [r7, #32]
    f5ac:	4b16      	ldr	r3, [pc, #88]	; (f608 <_usb_d_dev_out_next+0x288>)
    f5ae:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    f5b0:	7ffb      	ldrb	r3, [r7, #31]
    f5b2:	2b00      	cmp	r3, #0
    f5b4:	d107      	bne.n	f5c6 <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    f5b6:	687b      	ldr	r3, [r7, #4]
    f5b8:	68db      	ldr	r3, [r3, #12]
    f5ba:	461a      	mov	r2, r3
    f5bc:	7ffb      	ldrb	r3, [r7, #31]
    f5be:	2100      	movs	r1, #0
    f5c0:	4618      	mov	r0, r3
    f5c2:	4b0f      	ldr	r3, [pc, #60]	; (f600 <_usb_d_dev_out_next+0x280>)
    f5c4:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    f5c6:	2100      	movs	r1, #0
    f5c8:	6878      	ldr	r0, [r7, #4]
    f5ca:	4b10      	ldr	r3, [pc, #64]	; (f60c <_usb_d_dev_out_next+0x28c>)
    f5cc:	4798      	blx	r3
	return;
    f5ce:	e031      	b.n	f634 <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    f5d0:	78fb      	ldrb	r3, [r7, #3]
    f5d2:	f083 0301 	eor.w	r3, r3, #1
    f5d6:	b2db      	uxtb	r3, r3
    f5d8:	2b00      	cmp	r3, #0
    f5da:	d025      	beq.n	f628 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    f5dc:	7bfb      	ldrb	r3, [r7, #15]
    f5de:	2b00      	cmp	r3, #0
    f5e0:	d018      	beq.n	f614 <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    f5e2:	7ffb      	ldrb	r3, [r7, #31]
    f5e4:	2101      	movs	r1, #1
    f5e6:	4618      	mov	r0, r3
    f5e8:	4b09      	ldr	r3, [pc, #36]	; (f610 <_usb_d_dev_out_next+0x290>)
    f5ea:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    f5ec:	232d      	movs	r3, #45	; 0x2d
    f5ee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    f5f2:	e012      	b.n	f61a <_usb_d_dev_out_next+0x29a>
    f5f4:	200018e4 	.word	0x200018e4
    f5f8:	0000eb61 	.word	0x0000eb61
    f5fc:	00012db5 	.word	0x00012db5
    f600:	0000eb8d 	.word	0x0000eb8d
    f604:	0000ed15 	.word	0x0000ed15
    f608:	0000e46d 	.word	0x0000e46d
    f60c:	00010491 	.word	0x00010491
    f610:	0000ed55 	.word	0x0000ed55
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    f614:	2325      	movs	r3, #37	; 0x25
    f616:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    f61a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    f61e:	7ffb      	ldrb	r3, [r7, #31]
    f620:	4619      	mov	r1, r3
    f622:	6a38      	ldr	r0, [r7, #32]
    f624:	4b05      	ldr	r3, [pc, #20]	; (f63c <_usb_d_dev_out_next+0x2bc>)
    f626:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    f628:	7ffb      	ldrb	r3, [r7, #31]
    f62a:	2201      	movs	r2, #1
    f62c:	2100      	movs	r1, #0
    f62e:	4618      	mov	r0, r3
    f630:	4b03      	ldr	r3, [pc, #12]	; (f640 <_usb_d_dev_out_next+0x2c0>)
    f632:	4798      	blx	r3
}
    f634:	372c      	adds	r7, #44	; 0x2c
    f636:	46bd      	mov	sp, r7
    f638:	bd90      	pop	{r4, r7, pc}
    f63a:	bf00      	nop
    f63c:	0000e441 	.word	0x0000e441
    f640:	0000ede5 	.word	0x0000ede5

0000f644 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    f644:	b580      	push	{r7, lr}
    f646:	b084      	sub	sp, #16
    f648:	af00      	add	r7, sp, #0
    f64a:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    f64c:	687b      	ldr	r3, [r7, #4]
    f64e:	7c9b      	ldrb	r3, [r3, #18]
    f650:	f003 030f 	and.w	r3, r3, #15
    f654:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    f656:	687b      	ldr	r3, [r7, #4]
    f658:	7cdb      	ldrb	r3, [r3, #19]
    f65a:	f003 0307 	and.w	r3, r3, #7
    f65e:	b2db      	uxtb	r3, r3
    f660:	2b01      	cmp	r3, #1
    f662:	bf0c      	ite	eq
    f664:	2301      	moveq	r3, #1
    f666:	2300      	movne	r3, #0
    f668:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    f66a:	7bbb      	ldrb	r3, [r7, #14]
    f66c:	f083 0301 	eor.w	r3, r3, #1
    f670:	b2db      	uxtb	r3, r3
    f672:	2b00      	cmp	r3, #0
    f674:	d008      	beq.n	f688 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    f676:	7bfb      	ldrb	r3, [r7, #15]
    f678:	4618      	mov	r0, r3
    f67a:	4b20      	ldr	r3, [pc, #128]	; (f6fc <_usb_d_dev_handle_setup+0xb8>)
    f67c:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    f67e:	7bfb      	ldrb	r3, [r7, #15]
    f680:	4618      	mov	r0, r3
    f682:	4b1f      	ldr	r3, [pc, #124]	; (f700 <_usb_d_dev_handle_setup+0xbc>)
    f684:	4798      	blx	r3
		return;
    f686:	e036      	b.n	f6f6 <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    f688:	687b      	ldr	r3, [r7, #4]
    f68a:	7cdb      	ldrb	r3, [r3, #19]
    f68c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    f690:	b2db      	uxtb	r3, r3
    f692:	2b00      	cmp	r3, #0
    f694:	d010      	beq.n	f6b8 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    f696:	687a      	ldr	r2, [r7, #4]
    f698:	7cd3      	ldrb	r3, [r2, #19]
    f69a:	f36f 1386 	bfc	r3, #6, #1
    f69e:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    f6a0:	7bfb      	ldrb	r3, [r7, #15]
    f6a2:	2200      	movs	r2, #0
    f6a4:	2101      	movs	r1, #1
    f6a6:	4618      	mov	r0, r3
    f6a8:	4b16      	ldr	r3, [pc, #88]	; (f704 <_usb_d_dev_handle_setup+0xc0>)
    f6aa:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    f6ac:	7bfb      	ldrb	r3, [r7, #15]
    f6ae:	2200      	movs	r2, #0
    f6b0:	2100      	movs	r1, #0
    f6b2:	4618      	mov	r0, r3
    f6b4:	4b14      	ldr	r3, [pc, #80]	; (f708 <_usb_d_dev_handle_setup+0xc4>)
    f6b6:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    f6b8:	687a      	ldr	r2, [r7, #4]
    f6ba:	7cd3      	ldrb	r3, [r2, #19]
    f6bc:	f36f 03c3 	bfc	r3, #3, #1
    f6c0:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    f6c2:	7bfb      	ldrb	r3, [r7, #15]
    f6c4:	2100      	movs	r1, #0
    f6c6:	4618      	mov	r0, r3
    f6c8:	4b10      	ldr	r3, [pc, #64]	; (f70c <_usb_d_dev_handle_setup+0xc8>)
    f6ca:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    f6cc:	7bfb      	ldrb	r3, [r7, #15]
    f6ce:	2101      	movs	r1, #1
    f6d0:	4618      	mov	r0, r3
    f6d2:	4b0e      	ldr	r3, [pc, #56]	; (f70c <_usb_d_dev_handle_setup+0xc8>)
    f6d4:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    f6d6:	7bfb      	ldrb	r3, [r7, #15]
    f6d8:	216f      	movs	r1, #111	; 0x6f
    f6da:	4618      	mov	r0, r3
    f6dc:	4b0c      	ldr	r3, [pc, #48]	; (f710 <_usb_d_dev_handle_setup+0xcc>)
    f6de:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    f6e0:	7bfb      	ldrb	r3, [r7, #15]
    f6e2:	216f      	movs	r1, #111	; 0x6f
    f6e4:	4618      	mov	r0, r3
    f6e6:	4b0b      	ldr	r3, [pc, #44]	; (f714 <_usb_d_dev_handle_setup+0xd0>)
    f6e8:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    f6ea:	4b0b      	ldr	r3, [pc, #44]	; (f718 <_usb_d_dev_handle_setup+0xd4>)
    f6ec:	689b      	ldr	r3, [r3, #8]
    f6ee:	687a      	ldr	r2, [r7, #4]
    f6f0:	7c92      	ldrb	r2, [r2, #18]
    f6f2:	4610      	mov	r0, r2
    f6f4:	4798      	blx	r3
}
    f6f6:	3710      	adds	r7, #16
    f6f8:	46bd      	mov	sp, r7
    f6fa:	bd80      	pop	{r7, pc}
    f6fc:	0000eae9 	.word	0x0000eae9
    f700:	0000ea95 	.word	0x0000ea95
    f704:	0000ed8d 	.word	0x0000ed8d
    f708:	0000ede5 	.word	0x0000ede5
    f70c:	0000ed55 	.word	0x0000ed55
    f710:	0000e895 	.word	0x0000e895
    f714:	0000e8e5 	.word	0x0000e8e5
    f718:	2000181c 	.word	0x2000181c

0000f71c <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    f71c:	b580      	push	{r7, lr}
    f71e:	b084      	sub	sp, #16
    f720:	af00      	add	r7, sp, #0
    f722:	6078      	str	r0, [r7, #4]
    f724:	460b      	mov	r3, r1
    f726:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    f728:	687b      	ldr	r3, [r7, #4]
    f72a:	7c9b      	ldrb	r3, [r3, #18]
    f72c:	f003 030f 	and.w	r3, r3, #15
    f730:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    f732:	78f9      	ldrb	r1, [r7, #3]
    f734:	7bfb      	ldrb	r3, [r7, #15]
    f736:	2200      	movs	r2, #0
    f738:	4618      	mov	r0, r3
    f73a:	4b07      	ldr	r3, [pc, #28]	; (f758 <_usb_d_dev_handle_stall+0x3c>)
    f73c:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    f73e:	4b07      	ldr	r3, [pc, #28]	; (f75c <_usb_d_dev_handle_stall+0x40>)
    f740:	691b      	ldr	r3, [r3, #16]
    f742:	687a      	ldr	r2, [r7, #4]
    f744:	7c90      	ldrb	r0, [r2, #18]
    f746:	687a      	ldr	r2, [r7, #4]
    f748:	6892      	ldr	r2, [r2, #8]
    f74a:	2101      	movs	r1, #1
    f74c:	4798      	blx	r3
}
    f74e:	bf00      	nop
    f750:	3710      	adds	r7, #16
    f752:	46bd      	mov	sp, r7
    f754:	bd80      	pop	{r7, pc}
    f756:	bf00      	nop
    f758:	0000ea49 	.word	0x0000ea49
    f75c:	2000181c 	.word	0x2000181c

0000f760 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    f760:	b580      	push	{r7, lr}
    f762:	b088      	sub	sp, #32
    f764:	af00      	add	r7, sp, #0
    f766:	6078      	str	r0, [r7, #4]
    f768:	460b      	mov	r3, r1
    f76a:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    f76c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    f770:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    f772:	687b      	ldr	r3, [r7, #4]
    f774:	7c9b      	ldrb	r3, [r3, #18]
    f776:	f003 030f 	and.w	r3, r3, #15
    f77a:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    f77c:	4b61      	ldr	r3, [pc, #388]	; (f904 <_usb_d_dev_handle_trfail+0x1a4>)
    f77e:	881b      	ldrh	r3, [r3, #0]
    f780:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    f782:	7efb      	ldrb	r3, [r7, #27]
    f784:	015b      	lsls	r3, r3, #5
    f786:	4a60      	ldr	r2, [pc, #384]	; (f908 <_usb_d_dev_handle_trfail+0x1a8>)
    f788:	4413      	add	r3, r2
    f78a:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    f78c:	78fb      	ldrb	r3, [r7, #3]
    f78e:	2b00      	cmp	r3, #0
    f790:	d006      	beq.n	f7a0 <_usb_d_dev_handle_trfail+0x40>
    f792:	7efb      	ldrb	r3, [r7, #27]
    f794:	4619      	mov	r1, r3
    f796:	69f8      	ldr	r0, [r7, #28]
    f798:	4b5c      	ldr	r3, [pc, #368]	; (f90c <_usb_d_dev_handle_trfail+0x1ac>)
    f79a:	4798      	blx	r3
    f79c:	4603      	mov	r3, r0
    f79e:	e005      	b.n	f7ac <_usb_d_dev_handle_trfail+0x4c>
    f7a0:	7efb      	ldrb	r3, [r7, #27]
    f7a2:	4619      	mov	r1, r3
    f7a4:	69f8      	ldr	r0, [r7, #28]
    f7a6:	4b5a      	ldr	r3, [pc, #360]	; (f910 <_usb_d_dev_handle_trfail+0x1b0>)
    f7a8:	4798      	blx	r3
    f7aa:	4603      	mov	r3, r0
    f7ac:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    f7ae:	687b      	ldr	r3, [r7, #4]
    f7b0:	7cdb      	ldrb	r3, [r3, #19]
    f7b2:	f003 0307 	and.w	r3, r3, #7
    f7b6:	b2db      	uxtb	r3, r3
    f7b8:	2b01      	cmp	r3, #1
    f7ba:	bf0c      	ite	eq
    f7bc:	2301      	moveq	r3, #1
    f7be:	2300      	movne	r3, #0
    f7c0:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    f7c2:	78fb      	ldrb	r3, [r7, #3]
    f7c4:	011b      	lsls	r3, r3, #4
    f7c6:	697a      	ldr	r2, [r7, #20]
    f7c8:	4413      	add	r3, r2
    f7ca:	7a9b      	ldrb	r3, [r3, #10]
    f7cc:	b2db      	uxtb	r3, r3
    f7ce:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    f7d0:	7cfb      	ldrb	r3, [r7, #19]
    f7d2:	2b02      	cmp	r3, #2
    f7d4:	d12f      	bne.n	f836 <_usb_d_dev_handle_trfail+0xd6>
    f7d6:	7b3b      	ldrb	r3, [r7, #12]
    f7d8:	f003 0301 	and.w	r3, r3, #1
    f7dc:	b2db      	uxtb	r3, r3
    f7de:	2b00      	cmp	r3, #0
    f7e0:	d029      	beq.n	f836 <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    f7e2:	78fb      	ldrb	r3, [r7, #3]
    f7e4:	011b      	lsls	r3, r3, #4
    f7e6:	697a      	ldr	r2, [r7, #20]
    f7e8:	441a      	add	r2, r3
    f7ea:	7a93      	ldrb	r3, [r2, #10]
    f7ec:	f36f 0300 	bfc	r3, #0, #1
    f7f0:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    f7f2:	78fb      	ldrb	r3, [r7, #3]
    f7f4:	f107 0220 	add.w	r2, r7, #32
    f7f8:	4413      	add	r3, r2
    f7fa:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    f7fe:	7efb      	ldrb	r3, [r7, #27]
    f800:	4619      	mov	r1, r3
    f802:	69f8      	ldr	r0, [r7, #28]
    f804:	4b43      	ldr	r3, [pc, #268]	; (f914 <_usb_d_dev_handle_trfail+0x1b4>)
    f806:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    f808:	78fb      	ldrb	r3, [r7, #3]
    f80a:	f107 0220 	add.w	r2, r7, #32
    f80e:	4413      	add	r3, r2
    f810:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    f814:	7efb      	ldrb	r3, [r7, #27]
    f816:	4619      	mov	r1, r3
    f818:	69f8      	ldr	r0, [r7, #28]
    f81a:	4b3f      	ldr	r3, [pc, #252]	; (f918 <_usb_d_dev_handle_trfail+0x1b8>)
    f81c:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    f81e:	78fb      	ldrb	r3, [r7, #3]
    f820:	2b00      	cmp	r3, #0
    f822:	bf14      	ite	ne
    f824:	2301      	movne	r3, #1
    f826:	2300      	moveq	r3, #0
    f828:	b2db      	uxtb	r3, r3
    f82a:	2204      	movs	r2, #4
    f82c:	4619      	mov	r1, r3
    f82e:	6878      	ldr	r0, [r7, #4]
    f830:	4b3a      	ldr	r3, [pc, #232]	; (f91c <_usb_d_dev_handle_trfail+0x1bc>)
    f832:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    f834:	e062      	b.n	f8fc <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    f836:	7b3b      	ldrb	r3, [r7, #12]
    f838:	f003 0302 	and.w	r3, r3, #2
    f83c:	b2db      	uxtb	r3, r3
    f83e:	2b00      	cmp	r3, #0
    f840:	d040      	beq.n	f8c4 <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    f842:	78fb      	ldrb	r3, [r7, #3]
    f844:	011b      	lsls	r3, r3, #4
    f846:	697a      	ldr	r2, [r7, #20]
    f848:	441a      	add	r2, r3
    f84a:	7a93      	ldrb	r3, [r2, #10]
    f84c:	f36f 0341 	bfc	r3, #1, #1
    f850:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    f852:	78fb      	ldrb	r3, [r7, #3]
    f854:	f107 0220 	add.w	r2, r7, #32
    f858:	4413      	add	r3, r2
    f85a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    f85e:	7efb      	ldrb	r3, [r7, #27]
    f860:	4619      	mov	r1, r3
    f862:	69f8      	ldr	r0, [r7, #28]
    f864:	4b2b      	ldr	r3, [pc, #172]	; (f914 <_usb_d_dev_handle_trfail+0x1b4>)
    f866:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    f868:	78fb      	ldrb	r3, [r7, #3]
    f86a:	f107 0220 	add.w	r2, r7, #32
    f86e:	4413      	add	r3, r2
    f870:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    f874:	7efb      	ldrb	r3, [r7, #27]
    f876:	4619      	mov	r1, r3
    f878:	69f8      	ldr	r0, [r7, #28]
    f87a:	4b27      	ldr	r3, [pc, #156]	; (f918 <_usb_d_dev_handle_trfail+0x1b8>)
    f87c:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    f87e:	7cbb      	ldrb	r3, [r7, #18]
    f880:	2b00      	cmp	r3, #0
    f882:	d03b      	beq.n	f8fc <_usb_d_dev_handle_trfail+0x19c>
    f884:	687b      	ldr	r3, [r7, #4]
    f886:	7cdb      	ldrb	r3, [r3, #19]
    f888:	f003 0340 	and.w	r3, r3, #64	; 0x40
    f88c:	b2db      	uxtb	r3, r3
    f88e:	2b00      	cmp	r3, #0
    f890:	d034      	beq.n	f8fc <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    f892:	687b      	ldr	r3, [r7, #4]
    f894:	7cdb      	ldrb	r3, [r3, #19]
    f896:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    f89a:	b2db      	uxtb	r3, r3
    f89c:	461a      	mov	r2, r3
    f89e:	78fb      	ldrb	r3, [r7, #3]
    f8a0:	4293      	cmp	r3, r2
    f8a2:	d02b      	beq.n	f8fc <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    f8a4:	687b      	ldr	r3, [r7, #4]
    f8a6:	7cdb      	ldrb	r3, [r3, #19]
    f8a8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    f8ac:	b2db      	uxtb	r3, r3
    f8ae:	2b00      	cmp	r3, #0
    f8b0:	bf14      	ite	ne
    f8b2:	2301      	movne	r3, #1
    f8b4:	2300      	moveq	r3, #0
    f8b6:	b2db      	uxtb	r3, r3
    f8b8:	2200      	movs	r2, #0
    f8ba:	4619      	mov	r1, r3
    f8bc:	6878      	ldr	r0, [r7, #4]
    f8be:	4b17      	ldr	r3, [pc, #92]	; (f91c <_usb_d_dev_handle_trfail+0x1bc>)
    f8c0:	4798      	blx	r3
}
    f8c2:	e01b      	b.n	f8fc <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    f8c4:	78fa      	ldrb	r2, [r7, #3]
    f8c6:	7efb      	ldrb	r3, [r7, #27]
    f8c8:	4611      	mov	r1, r2
    f8ca:	4618      	mov	r0, r3
    f8cc:	4b14      	ldr	r3, [pc, #80]	; (f920 <_usb_d_dev_handle_trfail+0x1c0>)
    f8ce:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    f8d0:	78fb      	ldrb	r3, [r7, #3]
    f8d2:	f107 0220 	add.w	r2, r7, #32
    f8d6:	4413      	add	r3, r2
    f8d8:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    f8dc:	7efb      	ldrb	r3, [r7, #27]
    f8de:	4619      	mov	r1, r3
    f8e0:	69f8      	ldr	r0, [r7, #28]
    f8e2:	4b0c      	ldr	r3, [pc, #48]	; (f914 <_usb_d_dev_handle_trfail+0x1b4>)
    f8e4:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    f8e6:	78fb      	ldrb	r3, [r7, #3]
    f8e8:	f107 0220 	add.w	r2, r7, #32
    f8ec:	4413      	add	r3, r2
    f8ee:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    f8f2:	7efb      	ldrb	r3, [r7, #27]
    f8f4:	4619      	mov	r1, r3
    f8f6:	69f8      	ldr	r0, [r7, #28]
    f8f8:	4b07      	ldr	r3, [pc, #28]	; (f918 <_usb_d_dev_handle_trfail+0x1b8>)
    f8fa:	4798      	blx	r3
}
    f8fc:	bf00      	nop
    f8fe:	3720      	adds	r7, #32
    f900:	46bd      	mov	sp, r7
    f902:	bd80      	pop	{r7, pc}
    f904:	000140cc 	.word	0x000140cc
    f908:	200018e4 	.word	0x200018e4
    f90c:	0000e4c9 	.word	0x0000e4c9
    f910:	0000e499 	.word	0x0000e499
    f914:	0000e36d 	.word	0x0000e36d
    f918:	0000e46d 	.word	0x0000e46d
    f91c:	000104d9 	.word	0x000104d9
    f920:	0000ed55 	.word	0x0000ed55

0000f924 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    f924:	b580      	push	{r7, lr}
    f926:	b082      	sub	sp, #8
    f928:	af00      	add	r7, sp, #0
    f92a:	6078      	str	r0, [r7, #4]
    f92c:	460b      	mov	r3, r1
    f92e:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    f930:	78fb      	ldrb	r3, [r7, #3]
    f932:	f003 0310 	and.w	r3, r3, #16
    f936:	2b00      	cmp	r3, #0
    f938:	d003      	beq.n	f942 <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    f93a:	6878      	ldr	r0, [r7, #4]
    f93c:	4b0c      	ldr	r3, [pc, #48]	; (f970 <_usb_d_dev_trans_setup_isr+0x4c>)
    f93e:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    f940:	e012      	b.n	f968 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    f942:	78fb      	ldrb	r3, [r7, #3]
    f944:	f003 0340 	and.w	r3, r3, #64	; 0x40
    f948:	2b00      	cmp	r3, #0
    f94a:	d004      	beq.n	f956 <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    f94c:	2101      	movs	r1, #1
    f94e:	6878      	ldr	r0, [r7, #4]
    f950:	4b08      	ldr	r3, [pc, #32]	; (f974 <_usb_d_dev_trans_setup_isr+0x50>)
    f952:	4798      	blx	r3
}
    f954:	e008      	b.n	f968 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    f956:	78fb      	ldrb	r3, [r7, #3]
    f958:	f003 0320 	and.w	r3, r3, #32
    f95c:	2b00      	cmp	r3, #0
    f95e:	d003      	beq.n	f968 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    f960:	2100      	movs	r1, #0
    f962:	6878      	ldr	r0, [r7, #4]
    f964:	4b03      	ldr	r3, [pc, #12]	; (f974 <_usb_d_dev_trans_setup_isr+0x50>)
    f966:	4798      	blx	r3
}
    f968:	bf00      	nop
    f96a:	3708      	adds	r7, #8
    f96c:	46bd      	mov	sp, r7
    f96e:	bd80      	pop	{r7, pc}
    f970:	0000f645 	.word	0x0000f645
    f974:	0000f71d 	.word	0x0000f71d

0000f978 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    f978:	b580      	push	{r7, lr}
    f97a:	b082      	sub	sp, #8
    f97c:	af00      	add	r7, sp, #0
    f97e:	6078      	str	r0, [r7, #4]
    f980:	460b      	mov	r3, r1
    f982:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    f984:	78fb      	ldrb	r3, [r7, #3]
    f986:	f003 0340 	and.w	r3, r3, #64	; 0x40
    f98a:	2b00      	cmp	r3, #0
    f98c:	d004      	beq.n	f998 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    f98e:	2101      	movs	r1, #1
    f990:	6878      	ldr	r0, [r7, #4]
    f992:	4b1a      	ldr	r3, [pc, #104]	; (f9fc <_usb_d_dev_trans_in_isr+0x84>)
    f994:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    f996:	e02c      	b.n	f9f2 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    f998:	78fb      	ldrb	r3, [r7, #3]
    f99a:	f003 0308 	and.w	r3, r3, #8
    f99e:	2b00      	cmp	r3, #0
    f9a0:	d004      	beq.n	f9ac <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    f9a2:	2101      	movs	r1, #1
    f9a4:	6878      	ldr	r0, [r7, #4]
    f9a6:	4b16      	ldr	r3, [pc, #88]	; (fa00 <_usb_d_dev_trans_in_isr+0x88>)
    f9a8:	4798      	blx	r3
}
    f9aa:	e022      	b.n	f9f2 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    f9ac:	78fb      	ldrb	r3, [r7, #3]
    f9ae:	f003 0302 	and.w	r3, r3, #2
    f9b2:	2b00      	cmp	r3, #0
    f9b4:	d004      	beq.n	f9c0 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    f9b6:	2101      	movs	r1, #1
    f9b8:	6878      	ldr	r0, [r7, #4]
    f9ba:	4b12      	ldr	r3, [pc, #72]	; (fa04 <_usb_d_dev_trans_in_isr+0x8c>)
    f9bc:	4798      	blx	r3
}
    f9be:	e018      	b.n	f9f2 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    f9c0:	687b      	ldr	r3, [r7, #4]
    f9c2:	7cdb      	ldrb	r3, [r3, #19]
    f9c4:	f003 0307 	and.w	r3, r3, #7
    f9c8:	b2db      	uxtb	r3, r3
    f9ca:	2b01      	cmp	r3, #1
    f9cc:	d111      	bne.n	f9f2 <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    f9ce:	78fb      	ldrb	r3, [r7, #3]
    f9d0:	f003 0304 	and.w	r3, r3, #4
    f9d4:	2b00      	cmp	r3, #0
    f9d6:	d004      	beq.n	f9e2 <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    f9d8:	2100      	movs	r1, #0
    f9da:	6878      	ldr	r0, [r7, #4]
    f9dc:	4b08      	ldr	r3, [pc, #32]	; (fa00 <_usb_d_dev_trans_in_isr+0x88>)
    f9de:	4798      	blx	r3
}
    f9e0:	e007      	b.n	f9f2 <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    f9e2:	78fb      	ldrb	r3, [r7, #3]
    f9e4:	f003 0310 	and.w	r3, r3, #16
    f9e8:	2b00      	cmp	r3, #0
    f9ea:	d002      	beq.n	f9f2 <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    f9ec:	6878      	ldr	r0, [r7, #4]
    f9ee:	4b06      	ldr	r3, [pc, #24]	; (fa08 <_usb_d_dev_trans_in_isr+0x90>)
    f9f0:	4798      	blx	r3
}
    f9f2:	bf00      	nop
    f9f4:	3708      	adds	r7, #8
    f9f6:	46bd      	mov	sp, r7
    f9f8:	bd80      	pop	{r7, pc}
    f9fa:	bf00      	nop
    f9fc:	0000f71d 	.word	0x0000f71d
    fa00:	0000f761 	.word	0x0000f761
    fa04:	0000f169 	.word	0x0000f169
    fa08:	0000f645 	.word	0x0000f645

0000fa0c <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    fa0c:	b580      	push	{r7, lr}
    fa0e:	b082      	sub	sp, #8
    fa10:	af00      	add	r7, sp, #0
    fa12:	6078      	str	r0, [r7, #4]
    fa14:	460b      	mov	r3, r1
    fa16:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    fa18:	78fb      	ldrb	r3, [r7, #3]
    fa1a:	f003 0320 	and.w	r3, r3, #32
    fa1e:	2b00      	cmp	r3, #0
    fa20:	d004      	beq.n	fa2c <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    fa22:	2100      	movs	r1, #0
    fa24:	6878      	ldr	r0, [r7, #4]
    fa26:	4b1a      	ldr	r3, [pc, #104]	; (fa90 <_usb_d_dev_trans_out_isr+0x84>)
    fa28:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    fa2a:	e02c      	b.n	fa86 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    fa2c:	78fb      	ldrb	r3, [r7, #3]
    fa2e:	f003 0304 	and.w	r3, r3, #4
    fa32:	2b00      	cmp	r3, #0
    fa34:	d004      	beq.n	fa40 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    fa36:	2100      	movs	r1, #0
    fa38:	6878      	ldr	r0, [r7, #4]
    fa3a:	4b16      	ldr	r3, [pc, #88]	; (fa94 <_usb_d_dev_trans_out_isr+0x88>)
    fa3c:	4798      	blx	r3
}
    fa3e:	e022      	b.n	fa86 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    fa40:	78fb      	ldrb	r3, [r7, #3]
    fa42:	f003 0301 	and.w	r3, r3, #1
    fa46:	2b00      	cmp	r3, #0
    fa48:	d004      	beq.n	fa54 <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    fa4a:	2101      	movs	r1, #1
    fa4c:	6878      	ldr	r0, [r7, #4]
    fa4e:	4b12      	ldr	r3, [pc, #72]	; (fa98 <_usb_d_dev_trans_out_isr+0x8c>)
    fa50:	4798      	blx	r3
}
    fa52:	e018      	b.n	fa86 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    fa54:	687b      	ldr	r3, [r7, #4]
    fa56:	7cdb      	ldrb	r3, [r3, #19]
    fa58:	f003 0307 	and.w	r3, r3, #7
    fa5c:	b2db      	uxtb	r3, r3
    fa5e:	2b01      	cmp	r3, #1
    fa60:	d111      	bne.n	fa86 <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    fa62:	78fb      	ldrb	r3, [r7, #3]
    fa64:	f003 0308 	and.w	r3, r3, #8
    fa68:	2b00      	cmp	r3, #0
    fa6a:	d004      	beq.n	fa76 <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    fa6c:	2101      	movs	r1, #1
    fa6e:	6878      	ldr	r0, [r7, #4]
    fa70:	4b08      	ldr	r3, [pc, #32]	; (fa94 <_usb_d_dev_trans_out_isr+0x88>)
    fa72:	4798      	blx	r3
}
    fa74:	e007      	b.n	fa86 <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    fa76:	78fb      	ldrb	r3, [r7, #3]
    fa78:	f003 0310 	and.w	r3, r3, #16
    fa7c:	2b00      	cmp	r3, #0
    fa7e:	d002      	beq.n	fa86 <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    fa80:	6878      	ldr	r0, [r7, #4]
    fa82:	4b06      	ldr	r3, [pc, #24]	; (fa9c <_usb_d_dev_trans_out_isr+0x90>)
    fa84:	4798      	blx	r3
}
    fa86:	bf00      	nop
    fa88:	3708      	adds	r7, #8
    fa8a:	46bd      	mov	sp, r7
    fa8c:	bd80      	pop	{r7, pc}
    fa8e:	bf00      	nop
    fa90:	0000f71d 	.word	0x0000f71d
    fa94:	0000f761 	.word	0x0000f761
    fa98:	0000f381 	.word	0x0000f381
    fa9c:	0000f645 	.word	0x0000f645

0000faa0 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    faa0:	b580      	push	{r7, lr}
    faa2:	b084      	sub	sp, #16
    faa4:	af00      	add	r7, sp, #0
    faa6:	6078      	str	r0, [r7, #4]
    faa8:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    faaa:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    faae:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    fab0:	683b      	ldr	r3, [r7, #0]
    fab2:	7c9b      	ldrb	r3, [r3, #18]
    fab4:	f003 030f 	and.w	r3, r3, #15
    fab8:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    faba:	7afb      	ldrb	r3, [r7, #11]
    fabc:	2201      	movs	r2, #1
    fabe:	409a      	lsls	r2, r3
    fac0:	687b      	ldr	r3, [r7, #4]
    fac2:	4013      	ands	r3, r2
    fac4:	2b00      	cmp	r3, #0
    fac6:	d03d      	beq.n	fb44 <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    fac8:	7afb      	ldrb	r3, [r7, #11]
    faca:	68fa      	ldr	r2, [r7, #12]
    facc:	3308      	adds	r3, #8
    face:	015b      	lsls	r3, r3, #5
    fad0:	4413      	add	r3, r2
    fad2:	3307      	adds	r3, #7
    fad4:	781b      	ldrb	r3, [r3, #0]
    fad6:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    fad8:	7afb      	ldrb	r3, [r7, #11]
    fada:	68fa      	ldr	r2, [r7, #12]
    fadc:	015b      	lsls	r3, r3, #5
    fade:	4413      	add	r3, r2
    fae0:	f203 1309 	addw	r3, r3, #265	; 0x109
    fae4:	781b      	ldrb	r3, [r3, #0]
    fae6:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    fae8:	7aba      	ldrb	r2, [r7, #10]
    faea:	7a7b      	ldrb	r3, [r7, #9]
    faec:	4013      	ands	r3, r2
    faee:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    faf0:	7abb      	ldrb	r3, [r7, #10]
    faf2:	2b00      	cmp	r3, #0
    faf4:	d027      	beq.n	fb46 <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    faf6:	683b      	ldr	r3, [r7, #0]
    faf8:	7cdb      	ldrb	r3, [r3, #19]
    fafa:	f003 0307 	and.w	r3, r3, #7
    fafe:	b2db      	uxtb	r3, r3
    fb00:	2b01      	cmp	r3, #1
    fb02:	d10c      	bne.n	fb1e <_usb_d_dev_handle_eps+0x7e>
    fb04:	683b      	ldr	r3, [r7, #0]
    fb06:	7cdb      	ldrb	r3, [r3, #19]
    fb08:	f003 0340 	and.w	r3, r3, #64	; 0x40
    fb0c:	b2db      	uxtb	r3, r3
    fb0e:	2b00      	cmp	r3, #0
    fb10:	d105      	bne.n	fb1e <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    fb12:	7abb      	ldrb	r3, [r7, #10]
    fb14:	4619      	mov	r1, r3
    fb16:	6838      	ldr	r0, [r7, #0]
    fb18:	4b0c      	ldr	r3, [pc, #48]	; (fb4c <_usb_d_dev_handle_eps+0xac>)
    fb1a:	4798      	blx	r3
    fb1c:	e013      	b.n	fb46 <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    fb1e:	683b      	ldr	r3, [r7, #0]
    fb20:	7cdb      	ldrb	r3, [r3, #19]
    fb22:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    fb26:	b2db      	uxtb	r3, r3
    fb28:	2b00      	cmp	r3, #0
    fb2a:	d005      	beq.n	fb38 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    fb2c:	7abb      	ldrb	r3, [r7, #10]
    fb2e:	4619      	mov	r1, r3
    fb30:	6838      	ldr	r0, [r7, #0]
    fb32:	4b07      	ldr	r3, [pc, #28]	; (fb50 <_usb_d_dev_handle_eps+0xb0>)
    fb34:	4798      	blx	r3
    fb36:	e006      	b.n	fb46 <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    fb38:	7abb      	ldrb	r3, [r7, #10]
    fb3a:	4619      	mov	r1, r3
    fb3c:	6838      	ldr	r0, [r7, #0]
    fb3e:	4b05      	ldr	r3, [pc, #20]	; (fb54 <_usb_d_dev_handle_eps+0xb4>)
    fb40:	4798      	blx	r3
    fb42:	e000      	b.n	fb46 <_usb_d_dev_handle_eps+0xa6>
		return;
    fb44:	bf00      	nop
		}
	}
}
    fb46:	3710      	adds	r7, #16
    fb48:	46bd      	mov	sp, r7
    fb4a:	bd80      	pop	{r7, pc}
    fb4c:	0000f925 	.word	0x0000f925
    fb50:	0000f979 	.word	0x0000f979
    fb54:	0000fa0d 	.word	0x0000fa0d

0000fb58 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    fb58:	b580      	push	{r7, lr}
    fb5a:	b084      	sub	sp, #16
    fb5c:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    fb5e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    fb62:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    fb64:	68bb      	ldr	r3, [r7, #8]
    fb66:	8c1b      	ldrh	r3, [r3, #32]
    fb68:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    fb6a:	88fb      	ldrh	r3, [r7, #6]
    fb6c:	2b00      	cmp	r3, #0
    fb6e:	d104      	bne.n	fb7a <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    fb70:	4b13      	ldr	r3, [pc, #76]	; (fbc0 <_usb_d_dev_handler+0x68>)
    fb72:	4798      	blx	r3
    fb74:	4603      	mov	r3, r0
    fb76:	2b00      	cmp	r3, #0
    fb78:	d11e      	bne.n	fbb8 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    fb7a:	2300      	movs	r3, #0
    fb7c:	73fb      	strb	r3, [r7, #15]
    fb7e:	e017      	b.n	fbb0 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    fb80:	7bfa      	ldrb	r2, [r7, #15]
    fb82:	4613      	mov	r3, r2
    fb84:	009b      	lsls	r3, r3, #2
    fb86:	4413      	add	r3, r2
    fb88:	009b      	lsls	r3, r3, #2
    fb8a:	3310      	adds	r3, #16
    fb8c:	4a0d      	ldr	r2, [pc, #52]	; (fbc4 <_usb_d_dev_handler+0x6c>)
    fb8e:	4413      	add	r3, r2
    fb90:	3304      	adds	r3, #4
    fb92:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    fb94:	683b      	ldr	r3, [r7, #0]
    fb96:	7c9b      	ldrb	r3, [r3, #18]
    fb98:	2bff      	cmp	r3, #255	; 0xff
    fb9a:	d005      	beq.n	fba8 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    fb9c:	88fb      	ldrh	r3, [r7, #6]
    fb9e:	6839      	ldr	r1, [r7, #0]
    fba0:	4618      	mov	r0, r3
    fba2:	4b09      	ldr	r3, [pc, #36]	; (fbc8 <_usb_d_dev_handler+0x70>)
    fba4:	4798      	blx	r3
    fba6:	e000      	b.n	fbaa <_usb_d_dev_handler+0x52>
			continue;
    fba8:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    fbaa:	7bfb      	ldrb	r3, [r7, #15]
    fbac:	3301      	adds	r3, #1
    fbae:	73fb      	strb	r3, [r7, #15]
    fbb0:	7bfb      	ldrb	r3, [r7, #15]
    fbb2:	2b08      	cmp	r3, #8
    fbb4:	d9e4      	bls.n	fb80 <_usb_d_dev_handler+0x28>
    fbb6:	e000      	b.n	fbba <_usb_d_dev_handler+0x62>
			return;
    fbb8:	bf00      	nop
	}
}
    fbba:	3710      	adds	r7, #16
    fbbc:	46bd      	mov	sp, r7
    fbbe:	bd80      	pop	{r7, pc}
    fbc0:	0000f0b1 	.word	0x0000f0b1
    fbc4:	2000181c 	.word	0x2000181c
    fbc8:	0000faa1 	.word	0x0000faa1

0000fbcc <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    fbcc:	b580      	push	{r7, lr}
    fbce:	b082      	sub	sp, #8
    fbd0:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    fbd2:	2300      	movs	r3, #0
    fbd4:	71fb      	strb	r3, [r7, #7]
    fbd6:	e023      	b.n	fc20 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    fbd8:	79fa      	ldrb	r2, [r7, #7]
    fbda:	4613      	mov	r3, r2
    fbdc:	009b      	lsls	r3, r3, #2
    fbde:	4413      	add	r3, r2
    fbe0:	009b      	lsls	r3, r3, #2
    fbe2:	3310      	adds	r3, #16
    fbe4:	4a14      	ldr	r2, [pc, #80]	; (fc38 <_usb_d_dev_reset_epts+0x6c>)
    fbe6:	4413      	add	r3, r2
    fbe8:	3304      	adds	r3, #4
    fbea:	2103      	movs	r1, #3
    fbec:	4618      	mov	r0, r3
    fbee:	4b13      	ldr	r3, [pc, #76]	; (fc3c <_usb_d_dev_reset_epts+0x70>)
    fbf0:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    fbf2:	79fa      	ldrb	r2, [r7, #7]
    fbf4:	4910      	ldr	r1, [pc, #64]	; (fc38 <_usb_d_dev_reset_epts+0x6c>)
    fbf6:	4613      	mov	r3, r2
    fbf8:	009b      	lsls	r3, r3, #2
    fbfa:	4413      	add	r3, r2
    fbfc:	009b      	lsls	r3, r3, #2
    fbfe:	440b      	add	r3, r1
    fc00:	3326      	adds	r3, #38	; 0x26
    fc02:	22ff      	movs	r2, #255	; 0xff
    fc04:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    fc06:	79fa      	ldrb	r2, [r7, #7]
    fc08:	490b      	ldr	r1, [pc, #44]	; (fc38 <_usb_d_dev_reset_epts+0x6c>)
    fc0a:	4613      	mov	r3, r2
    fc0c:	009b      	lsls	r3, r3, #2
    fc0e:	4413      	add	r3, r2
    fc10:	009b      	lsls	r3, r3, #2
    fc12:	440b      	add	r3, r1
    fc14:	3327      	adds	r3, #39	; 0x27
    fc16:	2200      	movs	r2, #0
    fc18:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    fc1a:	79fb      	ldrb	r3, [r7, #7]
    fc1c:	3301      	adds	r3, #1
    fc1e:	71fb      	strb	r3, [r7, #7]
    fc20:	79fb      	ldrb	r3, [r7, #7]
    fc22:	2b08      	cmp	r3, #8
    fc24:	d9d8      	bls.n	fbd8 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    fc26:	22a0      	movs	r2, #160	; 0xa0
    fc28:	2100      	movs	r1, #0
    fc2a:	4805      	ldr	r0, [pc, #20]	; (fc40 <_usb_d_dev_reset_epts+0x74>)
    fc2c:	4b05      	ldr	r3, [pc, #20]	; (fc44 <_usb_d_dev_reset_epts+0x78>)
    fc2e:	4798      	blx	r3
}
    fc30:	bf00      	nop
    fc32:	3708      	adds	r7, #8
    fc34:	46bd      	mov	sp, r7
    fc36:	bd80      	pop	{r7, pc}
    fc38:	2000181c 	.word	0x2000181c
    fc3c:	00010491 	.word	0x00010491
    fc40:	200018e4 	.word	0x200018e4
    fc44:	00012ee9 	.word	0x00012ee9

0000fc48 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    fc48:	b580      	push	{r7, lr}
    fc4a:	b084      	sub	sp, #16
    fc4c:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    fc4e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    fc52:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    fc54:	2301      	movs	r3, #1
    fc56:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    fc58:	2304      	movs	r3, #4
    fc5a:	713b      	strb	r3, [r7, #4]
    fc5c:	2300      	movs	r3, #0
    fc5e:	717b      	strb	r3, [r7, #5]
    fc60:	2300      	movs	r3, #0
    fc62:	71bb      	strb	r3, [r7, #6]
    fc64:	2300      	movs	r3, #0
    fc66:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    fc68:	2101      	movs	r1, #1
    fc6a:	68f8      	ldr	r0, [r7, #12]
    fc6c:	4b26      	ldr	r3, [pc, #152]	; (fd08 <_usb_d_dev_init+0xc0>)
    fc6e:	4798      	blx	r3
    fc70:	4603      	mov	r3, r0
    fc72:	f083 0301 	eor.w	r3, r3, #1
    fc76:	b2db      	uxtb	r3, r3
    fc78:	2b00      	cmp	r3, #0
    fc7a:	d011      	beq.n	fca0 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    fc7c:	2102      	movs	r1, #2
    fc7e:	68f8      	ldr	r0, [r7, #12]
    fc80:	4b22      	ldr	r3, [pc, #136]	; (fd0c <_usb_d_dev_init+0xc4>)
    fc82:	4798      	blx	r3
    fc84:	4603      	mov	r3, r0
    fc86:	2b00      	cmp	r3, #0
    fc88:	d006      	beq.n	fc98 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    fc8a:	68f8      	ldr	r0, [r7, #12]
    fc8c:	4b20      	ldr	r3, [pc, #128]	; (fd10 <_usb_d_dev_init+0xc8>)
    fc8e:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    fc90:	2102      	movs	r1, #2
    fc92:	68f8      	ldr	r0, [r7, #12]
    fc94:	4b1f      	ldr	r3, [pc, #124]	; (fd14 <_usb_d_dev_init+0xcc>)
    fc96:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    fc98:	2101      	movs	r1, #1
    fc9a:	68f8      	ldr	r0, [r7, #12]
    fc9c:	4b1e      	ldr	r3, [pc, #120]	; (fd18 <_usb_d_dev_init+0xd0>)
    fc9e:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    fca0:	2101      	movs	r1, #1
    fca2:	68f8      	ldr	r0, [r7, #12]
    fca4:	4b1b      	ldr	r3, [pc, #108]	; (fd14 <_usb_d_dev_init+0xcc>)
    fca6:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    fca8:	4b1c      	ldr	r3, [pc, #112]	; (fd1c <_usb_d_dev_init+0xd4>)
    fcaa:	4a1d      	ldr	r2, [pc, #116]	; (fd20 <_usb_d_dev_init+0xd8>)
    fcac:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    fcae:	4b1b      	ldr	r3, [pc, #108]	; (fd1c <_usb_d_dev_init+0xd4>)
    fcb0:	4a1b      	ldr	r2, [pc, #108]	; (fd20 <_usb_d_dev_init+0xd8>)
    fcb2:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    fcb4:	4b19      	ldr	r3, [pc, #100]	; (fd1c <_usb_d_dev_init+0xd4>)
    fcb6:	4a1a      	ldr	r2, [pc, #104]	; (fd20 <_usb_d_dev_init+0xd8>)
    fcb8:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    fcba:	4b18      	ldr	r3, [pc, #96]	; (fd1c <_usb_d_dev_init+0xd4>)
    fcbc:	4a18      	ldr	r2, [pc, #96]	; (fd20 <_usb_d_dev_init+0xd8>)
    fcbe:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    fcc0:	4b16      	ldr	r3, [pc, #88]	; (fd1c <_usb_d_dev_init+0xd4>)
    fcc2:	4a17      	ldr	r2, [pc, #92]	; (fd20 <_usb_d_dev_init+0xd8>)
    fcc4:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    fcc6:	4b17      	ldr	r3, [pc, #92]	; (fd24 <_usb_d_dev_init+0xdc>)
    fcc8:	4798      	blx	r3

	_usb_load_calib();
    fcca:	4b17      	ldr	r3, [pc, #92]	; (fd28 <_usb_d_dev_init+0xe0>)
    fccc:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    fcce:	2104      	movs	r1, #4
    fcd0:	68f8      	ldr	r0, [r7, #12]
    fcd2:	4b11      	ldr	r3, [pc, #68]	; (fd18 <_usb_d_dev_init+0xd0>)
    fcd4:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    fcd6:	4b15      	ldr	r3, [pc, #84]	; (fd2c <_usb_d_dev_init+0xe4>)
    fcd8:	4619      	mov	r1, r3
    fcda:	68f8      	ldr	r0, [r7, #12]
    fcdc:	4b14      	ldr	r3, [pc, #80]	; (fd30 <_usb_d_dev_init+0xe8>)
    fcde:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    fce0:	7afb      	ldrb	r3, [r7, #11]
    fce2:	f107 0210 	add.w	r2, r7, #16
    fce6:	4413      	add	r3, r2
    fce8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    fcec:	f043 0301 	orr.w	r3, r3, #1
    fcf0:	b2db      	uxtb	r3, r3
    fcf2:	b29b      	uxth	r3, r3
    fcf4:	4619      	mov	r1, r3
    fcf6:	68f8      	ldr	r0, [r7, #12]
    fcf8:	4b0e      	ldr	r3, [pc, #56]	; (fd34 <_usb_d_dev_init+0xec>)
    fcfa:	4798      	blx	r3

	return ERR_NONE;
    fcfc:	2300      	movs	r3, #0
}
    fcfe:	4618      	mov	r0, r3
    fd00:	3710      	adds	r7, #16
    fd02:	46bd      	mov	sp, r7
    fd04:	bd80      	pop	{r7, pc}
    fd06:	bf00      	nop
    fd08:	0000e2e1 	.word	0x0000e2e1
    fd0c:	0000e631 	.word	0x0000e631
    fd10:	0000e605 	.word	0x0000e605
    fd14:	0000e2b7 	.word	0x0000e2b7
    fd18:	0000e661 	.word	0x0000e661
    fd1c:	2000181c 	.word	0x2000181c
    fd20:	0000e729 	.word	0x0000e729
    fd24:	0000fbcd 	.word	0x0000fbcd
    fd28:	0000e741 	.word	0x0000e741
    fd2c:	200018e4 	.word	0x200018e4
    fd30:	0000e70d 	.word	0x0000e70d
    fd34:	0000e6d1 	.word	0x0000e6d1

0000fd38 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    fd38:	b580      	push	{r7, lr}
    fd3a:	b082      	sub	sp, #8
    fd3c:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    fd3e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    fd42:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    fd44:	2103      	movs	r1, #3
    fd46:	6878      	ldr	r0, [r7, #4]
    fd48:	4b17      	ldr	r3, [pc, #92]	; (fda8 <_usb_d_dev_enable+0x70>)
    fd4a:	4798      	blx	r3
    fd4c:	4603      	mov	r3, r0
    fd4e:	2b00      	cmp	r3, #0
    fd50:	d002      	beq.n	fd58 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    fd52:	f06f 0310 	mvn.w	r3, #16
    fd56:	e023      	b.n	fda0 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    fd58:	6878      	ldr	r0, [r7, #4]
    fd5a:	4b14      	ldr	r3, [pc, #80]	; (fdac <_usb_d_dev_enable+0x74>)
    fd5c:	4798      	blx	r3
    fd5e:	4603      	mov	r3, r0
    fd60:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    fd62:	78fb      	ldrb	r3, [r7, #3]
    fd64:	f003 0302 	and.w	r3, r3, #2
    fd68:	2b00      	cmp	r3, #0
    fd6a:	d107      	bne.n	fd7c <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    fd6c:	78fb      	ldrb	r3, [r7, #3]
    fd6e:	f043 0302 	orr.w	r3, r3, #2
    fd72:	b2db      	uxtb	r3, r3
    fd74:	4619      	mov	r1, r3
    fd76:	6878      	ldr	r0, [r7, #4]
    fd78:	4b0d      	ldr	r3, [pc, #52]	; (fdb0 <_usb_d_dev_enable+0x78>)
    fd7a:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    fd7c:	2050      	movs	r0, #80	; 0x50
    fd7e:	4b0d      	ldr	r3, [pc, #52]	; (fdb4 <_usb_d_dev_enable+0x7c>)
    fd80:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    fd82:	2051      	movs	r0, #81	; 0x51
    fd84:	4b0b      	ldr	r3, [pc, #44]	; (fdb4 <_usb_d_dev_enable+0x7c>)
    fd86:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    fd88:	2052      	movs	r0, #82	; 0x52
    fd8a:	4b0a      	ldr	r3, [pc, #40]	; (fdb4 <_usb_d_dev_enable+0x7c>)
    fd8c:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    fd8e:	2053      	movs	r0, #83	; 0x53
    fd90:	4b08      	ldr	r3, [pc, #32]	; (fdb4 <_usb_d_dev_enable+0x7c>)
    fd92:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    fd94:	f240 218d 	movw	r1, #653	; 0x28d
    fd98:	6878      	ldr	r0, [r7, #4]
    fd9a:	4b07      	ldr	r3, [pc, #28]	; (fdb8 <_usb_d_dev_enable+0x80>)
    fd9c:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    fd9e:	2300      	movs	r3, #0
}
    fda0:	4618      	mov	r0, r3
    fda2:	3708      	adds	r7, #8
    fda4:	46bd      	mov	sp, r7
    fda6:	bd80      	pop	{r7, pc}
    fda8:	0000e5db 	.word	0x0000e5db
    fdac:	0000e689 	.word	0x0000e689
    fdb0:	0000e661 	.word	0x0000e661
    fdb4:	0000e1ed 	.word	0x0000e1ed
    fdb8:	0000e585 	.word	0x0000e585

0000fdbc <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    fdbc:	b580      	push	{r7, lr}
    fdbe:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    fdc0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    fdc4:	4b01      	ldr	r3, [pc, #4]	; (fdcc <_usb_d_dev_attach+0x10>)
    fdc6:	4798      	blx	r3
}
    fdc8:	bf00      	nop
    fdca:	bd80      	pop	{r7, pc}
    fdcc:	0000e6ad 	.word	0x0000e6ad

0000fdd0 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    fdd0:	b580      	push	{r7, lr}
    fdd2:	b082      	sub	sp, #8
    fdd4:	af00      	add	r7, sp, #0
    fdd6:	4603      	mov	r3, r0
    fdd8:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    fdda:	79fb      	ldrb	r3, [r7, #7]
    fddc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    fde0:	b2db      	uxtb	r3, r3
    fde2:	4619      	mov	r1, r3
    fde4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    fde8:	4b02      	ldr	r3, [pc, #8]	; (fdf4 <_usb_d_dev_set_address+0x24>)
    fdea:	4798      	blx	r3
}
    fdec:	bf00      	nop
    fdee:	3708      	adds	r7, #8
    fdf0:	46bd      	mov	sp, r7
    fdf2:	bd80      	pop	{r7, pc}
    fdf4:	0000e6ef 	.word	0x0000e6ef

0000fdf8 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    fdf8:	b590      	push	{r4, r7, lr}
    fdfa:	b085      	sub	sp, #20
    fdfc:	af00      	add	r7, sp, #0
    fdfe:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    fe00:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    fe04:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    fe06:	687b      	ldr	r3, [r7, #4]
    fe08:	7c9b      	ldrb	r3, [r3, #18]
    fe0a:	f003 030f 	and.w	r3, r3, #15
    fe0e:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    fe10:	687b      	ldr	r3, [r7, #4]
    fe12:	68db      	ldr	r3, [r3, #12]
    fe14:	461a      	mov	r2, r3
    fe16:	7afb      	ldrb	r3, [r7, #11]
    fe18:	2100      	movs	r1, #0
    fe1a:	4618      	mov	r0, r3
    fe1c:	4b0f      	ldr	r3, [pc, #60]	; (fe5c <_usb_d_dev_trans_setup+0x64>)
    fe1e:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    fe20:	687b      	ldr	r3, [r7, #4]
    fe22:	8a1b      	ldrh	r3, [r3, #16]
    fe24:	461a      	mov	r2, r3
    fe26:	7af8      	ldrb	r0, [r7, #11]
    fe28:	2300      	movs	r3, #0
    fe2a:	2100      	movs	r1, #0
    fe2c:	4c0c      	ldr	r4, [pc, #48]	; (fe60 <_usb_d_dev_trans_setup+0x68>)
    fe2e:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    fe30:	7afb      	ldrb	r3, [r7, #11]
    fe32:	22b0      	movs	r2, #176	; 0xb0
    fe34:	4619      	mov	r1, r3
    fe36:	68f8      	ldr	r0, [r7, #12]
    fe38:	4b0a      	ldr	r3, [pc, #40]	; (fe64 <_usb_d_dev_trans_setup+0x6c>)
    fe3a:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    fe3c:	7afb      	ldrb	r3, [r7, #11]
    fe3e:	2200      	movs	r2, #0
    fe40:	2100      	movs	r1, #0
    fe42:	4618      	mov	r0, r3
    fe44:	4b08      	ldr	r3, [pc, #32]	; (fe68 <_usb_d_dev_trans_setup+0x70>)
    fe46:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    fe48:	7afb      	ldrb	r3, [r7, #11]
    fe4a:	2210      	movs	r2, #16
    fe4c:	4619      	mov	r1, r3
    fe4e:	68f8      	ldr	r0, [r7, #12]
    fe50:	4b06      	ldr	r3, [pc, #24]	; (fe6c <_usb_d_dev_trans_setup+0x74>)
    fe52:	4798      	blx	r3
}
    fe54:	bf00      	nop
    fe56:	3714      	adds	r7, #20
    fe58:	46bd      	mov	sp, r7
    fe5a:	bd90      	pop	{r4, r7, pc}
    fe5c:	0000eb8d 	.word	0x0000eb8d
    fe60:	0000ed15 	.word	0x0000ed15
    fe64:	0000e3ed 	.word	0x0000e3ed
    fe68:	0000ede5 	.word	0x0000ede5
    fe6c:	0000e441 	.word	0x0000e441

0000fe70 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    fe70:	b580      	push	{r7, lr}
    fe72:	b088      	sub	sp, #32
    fe74:	af00      	add	r7, sp, #0
    fe76:	4603      	mov	r3, r0
    fe78:	71fb      	strb	r3, [r7, #7]
    fe7a:	460b      	mov	r3, r1
    fe7c:	71bb      	strb	r3, [r7, #6]
    fe7e:	4613      	mov	r3, r2
    fe80:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    fe82:	79fb      	ldrb	r3, [r7, #7]
    fe84:	f003 030f 	and.w	r3, r3, #15
    fe88:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    fe8a:	79fb      	ldrb	r3, [r7, #7]
    fe8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    fe90:	2b00      	cmp	r3, #0
    fe92:	bf14      	ite	ne
    fe94:	2301      	movne	r3, #1
    fe96:	2300      	moveq	r3, #0
    fe98:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    fe9a:	7fba      	ldrb	r2, [r7, #30]
    fe9c:	7ffb      	ldrb	r3, [r7, #31]
    fe9e:	4611      	mov	r1, r2
    fea0:	4618      	mov	r0, r3
    fea2:	4b3e      	ldr	r3, [pc, #248]	; (ff9c <_usb_d_dev_ep_init+0x12c>)
    fea4:	4798      	blx	r3
    fea6:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    fea8:	79bb      	ldrb	r3, [r7, #6]
    feaa:	f003 0303 	and.w	r3, r3, #3
    feae:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    feb0:	7ffa      	ldrb	r2, [r7, #31]
    feb2:	4613      	mov	r3, r2
    feb4:	005b      	lsls	r3, r3, #1
    feb6:	4413      	add	r3, r2
    feb8:	009b      	lsls	r3, r3, #2
    feba:	4a39      	ldr	r2, [pc, #228]	; (ffa0 <_usb_d_dev_ep_init+0x130>)
    febc:	4413      	add	r3, r2
    febe:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    fec0:	7ffb      	ldrb	r3, [r7, #31]
    fec2:	2b04      	cmp	r3, #4
    fec4:	d902      	bls.n	fecc <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    fec6:	f06f 0311 	mvn.w	r3, #17
    feca:	e063      	b.n	ff94 <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    fecc:	69bb      	ldr	r3, [r7, #24]
    fece:	7c9b      	ldrb	r3, [r3, #18]
    fed0:	2bff      	cmp	r3, #255	; 0xff
    fed2:	d002      	beq.n	feda <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    fed4:	f06f 0313 	mvn.w	r3, #19
    fed8:	e05c      	b.n	ff94 <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    feda:	7dfb      	ldrb	r3, [r7, #23]
    fedc:	2b00      	cmp	r3, #0
    fede:	d11f      	bne.n	ff20 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    fee0:	7fbb      	ldrb	r3, [r7, #30]
    fee2:	2b00      	cmp	r3, #0
    fee4:	bf14      	ite	ne
    fee6:	2301      	movne	r3, #1
    fee8:	2300      	moveq	r3, #0
    feea:	b2db      	uxtb	r3, r3
    feec:	f083 0301 	eor.w	r3, r3, #1
    fef0:	b2db      	uxtb	r3, r3
    fef2:	f003 0301 	and.w	r3, r3, #1
    fef6:	b2da      	uxtb	r2, r3
    fef8:	7ffb      	ldrb	r3, [r7, #31]
    fefa:	4611      	mov	r1, r2
    fefc:	4618      	mov	r0, r3
    fefe:	4b27      	ldr	r3, [pc, #156]	; (ff9c <_usb_d_dev_ep_init+0x12c>)
    ff00:	4798      	blx	r3
    ff02:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    ff04:	68fb      	ldr	r3, [r7, #12]
    ff06:	7c9b      	ldrb	r3, [r3, #18]
    ff08:	2bff      	cmp	r3, #255	; 0xff
    ff0a:	d002      	beq.n	ff12 <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    ff0c:	f06f 0313 	mvn.w	r3, #19
    ff10:	e040      	b.n	ff94 <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    ff12:	693b      	ldr	r3, [r7, #16]
    ff14:	681b      	ldr	r3, [r3, #0]
    ff16:	2b00      	cmp	r3, #0
    ff18:	d102      	bne.n	ff20 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    ff1a:	f06f 0312 	mvn.w	r3, #18
    ff1e:	e039      	b.n	ff94 <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    ff20:	7fbb      	ldrb	r3, [r7, #30]
    ff22:	2b00      	cmp	r3, #0
    ff24:	d007      	beq.n	ff36 <_usb_d_dev_ep_init+0xc6>
    ff26:	693b      	ldr	r3, [r7, #16]
    ff28:	685b      	ldr	r3, [r3, #4]
    ff2a:	2b00      	cmp	r3, #0
    ff2c:	bf14      	ite	ne
    ff2e:	2301      	movne	r3, #1
    ff30:	2300      	moveq	r3, #0
    ff32:	b2db      	uxtb	r3, r3
    ff34:	e006      	b.n	ff44 <_usb_d_dev_ep_init+0xd4>
    ff36:	693b      	ldr	r3, [r7, #16]
    ff38:	681b      	ldr	r3, [r3, #0]
    ff3a:	2b00      	cmp	r3, #0
    ff3c:	bf14      	ite	ne
    ff3e:	2301      	movne	r3, #1
    ff40:	2300      	moveq	r3, #0
    ff42:	b2db      	uxtb	r3, r3
    ff44:	2b00      	cmp	r3, #0
    ff46:	d00f      	beq.n	ff68 <_usb_d_dev_ep_init+0xf8>
    ff48:	7fbb      	ldrb	r3, [r7, #30]
    ff4a:	2b00      	cmp	r3, #0
    ff4c:	d003      	beq.n	ff56 <_usb_d_dev_ep_init+0xe6>
    ff4e:	693b      	ldr	r3, [r7, #16]
    ff50:	895b      	ldrh	r3, [r3, #10]
    ff52:	461a      	mov	r2, r3
    ff54:	e002      	b.n	ff5c <_usb_d_dev_ep_init+0xec>
    ff56:	693b      	ldr	r3, [r7, #16]
    ff58:	891b      	ldrh	r3, [r3, #8]
    ff5a:	461a      	mov	r2, r3
    ff5c:	88bb      	ldrh	r3, [r7, #4]
    ff5e:	429a      	cmp	r2, r3
    ff60:	da02      	bge.n	ff68 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    ff62:	f06f 0312 	mvn.w	r3, #18
    ff66:	e015      	b.n	ff94 <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    ff68:	7fbb      	ldrb	r3, [r7, #30]
    ff6a:	2b00      	cmp	r3, #0
    ff6c:	d002      	beq.n	ff74 <_usb_d_dev_ep_init+0x104>
    ff6e:	693b      	ldr	r3, [r7, #16]
    ff70:	685b      	ldr	r3, [r3, #4]
    ff72:	e001      	b.n	ff78 <_usb_d_dev_ep_init+0x108>
    ff74:	693b      	ldr	r3, [r7, #16]
    ff76:	681b      	ldr	r3, [r3, #0]
    ff78:	69ba      	ldr	r2, [r7, #24]
    ff7a:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    ff7c:	69bb      	ldr	r3, [r7, #24]
    ff7e:	88ba      	ldrh	r2, [r7, #4]
    ff80:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    ff82:	7dfb      	ldrb	r3, [r7, #23]
    ff84:	3301      	adds	r3, #1
    ff86:	b2da      	uxtb	r2, r3
    ff88:	69bb      	ldr	r3, [r7, #24]
    ff8a:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    ff8c:	69bb      	ldr	r3, [r7, #24]
    ff8e:	79fa      	ldrb	r2, [r7, #7]
    ff90:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    ff92:	2300      	movs	r3, #0
}
    ff94:	4618      	mov	r0, r3
    ff96:	3720      	adds	r7, #32
    ff98:	46bd      	mov	sp, r7
    ff9a:	bd80      	pop	{r7, pc}
    ff9c:	0000eea1 	.word	0x0000eea1
    ffa0:	00014090 	.word	0x00014090

0000ffa4 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    ffa4:	b580      	push	{r7, lr}
    ffa6:	b086      	sub	sp, #24
    ffa8:	af00      	add	r7, sp, #0
    ffaa:	4603      	mov	r3, r0
    ffac:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    ffae:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ffb2:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    ffb4:	79fb      	ldrb	r3, [r7, #7]
    ffb6:	f003 030f 	and.w	r3, r3, #15
    ffba:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    ffbc:	79fb      	ldrb	r3, [r7, #7]
    ffbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ffc2:	2b00      	cmp	r3, #0
    ffc4:	bf14      	ite	ne
    ffc6:	2301      	movne	r3, #1
    ffc8:	2300      	moveq	r3, #0
    ffca:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    ffcc:	7cba      	ldrb	r2, [r7, #18]
    ffce:	7cfb      	ldrb	r3, [r7, #19]
    ffd0:	4611      	mov	r1, r2
    ffd2:	4618      	mov	r0, r3
    ffd4:	4b2a      	ldr	r3, [pc, #168]	; (10080 <STACK_SIZE+0x80>)
    ffd6:	4798      	blx	r3
    ffd8:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    ffda:	7cfb      	ldrb	r3, [r7, #19]
    ffdc:	2b04      	cmp	r3, #4
    ffde:	d84a      	bhi.n	10076 <STACK_SIZE+0x76>
    ffe0:	68fb      	ldr	r3, [r7, #12]
    ffe2:	7c9b      	ldrb	r3, [r3, #18]
    ffe4:	2bff      	cmp	r3, #255	; 0xff
    ffe6:	d046      	beq.n	10076 <STACK_SIZE+0x76>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    ffe8:	7cbb      	ldrb	r3, [r7, #18]
    ffea:	2203      	movs	r2, #3
    ffec:	4619      	mov	r1, r3
    ffee:	68f8      	ldr	r0, [r7, #12]
    fff0:	4b24      	ldr	r3, [pc, #144]	; (10084 <STACK_SIZE+0x84>)
    fff2:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    fff4:	68fb      	ldr	r3, [r7, #12]
    fff6:	7cdb      	ldrb	r3, [r3, #19]
    fff8:	f003 0307 	and.w	r3, r3, #7
    fffc:	b2db      	uxtb	r3, r3
    fffe:	2b01      	cmp	r3, #1
   10000:	d107      	bne.n	10012 <STACK_SIZE+0x12>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
   10002:	79fb      	ldrb	r3, [r7, #7]
   10004:	697a      	ldr	r2, [r7, #20]
   10006:	3308      	adds	r3, #8
   10008:	015b      	lsls	r3, r3, #5
   1000a:	4413      	add	r3, r2
   1000c:	2200      	movs	r2, #0
   1000e:	701a      	strb	r2, [r3, #0]
   10010:	e02a      	b.n	10068 <STACK_SIZE+0x68>
	} else if (USB_EP_GET_DIR(ep)) {
   10012:	f997 3007 	ldrsb.w	r3, [r7, #7]
   10016:	2b00      	cmp	r3, #0
   10018:	da15      	bge.n	10046 <STACK_SIZE+0x46>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
   1001a:	79fb      	ldrb	r3, [r7, #7]
   1001c:	f003 030f 	and.w	r3, r3, #15
   10020:	79fa      	ldrb	r2, [r7, #7]
   10022:	f002 020f 	and.w	r2, r2, #15
   10026:	6979      	ldr	r1, [r7, #20]
   10028:	3208      	adds	r2, #8
   1002a:	0152      	lsls	r2, r2, #5
   1002c:	440a      	add	r2, r1
   1002e:	7812      	ldrb	r2, [r2, #0]
   10030:	b2d2      	uxtb	r2, r2
   10032:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   10036:	b2d1      	uxtb	r1, r2
   10038:	697a      	ldr	r2, [r7, #20]
   1003a:	3308      	adds	r3, #8
   1003c:	015b      	lsls	r3, r3, #5
   1003e:	4413      	add	r3, r2
   10040:	460a      	mov	r2, r1
   10042:	701a      	strb	r2, [r3, #0]
   10044:	e010      	b.n	10068 <STACK_SIZE+0x68>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
   10046:	79fb      	ldrb	r3, [r7, #7]
   10048:	79fa      	ldrb	r2, [r7, #7]
   1004a:	6979      	ldr	r1, [r7, #20]
   1004c:	3208      	adds	r2, #8
   1004e:	0152      	lsls	r2, r2, #5
   10050:	440a      	add	r2, r1
   10052:	7812      	ldrb	r2, [r2, #0]
   10054:	b2d2      	uxtb	r2, r2
   10056:	f022 0207 	bic.w	r2, r2, #7
   1005a:	b2d1      	uxtb	r1, r2
   1005c:	697a      	ldr	r2, [r7, #20]
   1005e:	3308      	adds	r3, #8
   10060:	015b      	lsls	r3, r3, #5
   10062:	4413      	add	r3, r2
   10064:	460a      	mov	r2, r1
   10066:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
   10068:	68fb      	ldr	r3, [r7, #12]
   1006a:	2200      	movs	r2, #0
   1006c:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
   1006e:	68fb      	ldr	r3, [r7, #12]
   10070:	22ff      	movs	r2, #255	; 0xff
   10072:	749a      	strb	r2, [r3, #18]
   10074:	e000      	b.n	10078 <STACK_SIZE+0x78>
		return;
   10076:	bf00      	nop
}
   10078:	3718      	adds	r7, #24
   1007a:	46bd      	mov	sp, r7
   1007c:	bd80      	pop	{r7, pc}
   1007e:	bf00      	nop
   10080:	0000eea1 	.word	0x0000eea1
   10084:	000104d9 	.word	0x000104d9

00010088 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
   10088:	b5b0      	push	{r4, r5, r7, lr}
   1008a:	b088      	sub	sp, #32
   1008c:	af00      	add	r7, sp, #0
   1008e:	4603      	mov	r3, r0
   10090:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
   10092:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
   10096:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
   10098:	79fb      	ldrb	r3, [r7, #7]
   1009a:	f003 030f 	and.w	r3, r3, #15
   1009e:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
   100a0:	79fb      	ldrb	r3, [r7, #7]
   100a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
   100a6:	2b00      	cmp	r3, #0
   100a8:	bf14      	ite	ne
   100aa:	2301      	movne	r3, #1
   100ac:	2300      	moveq	r3, #0
   100ae:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
   100b0:	7eba      	ldrb	r2, [r7, #26]
   100b2:	7efb      	ldrb	r3, [r7, #27]
   100b4:	4611      	mov	r1, r2
   100b6:	4618      	mov	r0, r3
   100b8:	4b70      	ldr	r3, [pc, #448]	; (1027c <_usb_d_dev_ep_enable+0x1f4>)
   100ba:	4798      	blx	r3
   100bc:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
   100be:	7efb      	ldrb	r3, [r7, #27]
   100c0:	4619      	mov	r1, r3
   100c2:	69f8      	ldr	r0, [r7, #28]
   100c4:	4b6e      	ldr	r3, [pc, #440]	; (10280 <_usb_d_dev_ep_enable+0x1f8>)
   100c6:	4798      	blx	r3
   100c8:	4603      	mov	r3, r0
   100ca:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
   100cc:	7efb      	ldrb	r3, [r7, #27]
   100ce:	2b04      	cmp	r3, #4
   100d0:	d803      	bhi.n	100da <_usb_d_dev_ep_enable+0x52>
   100d2:	697b      	ldr	r3, [r7, #20]
   100d4:	7c9b      	ldrb	r3, [r3, #18]
   100d6:	2bff      	cmp	r3, #255	; 0xff
   100d8:	d102      	bne.n	100e0 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
   100da:	f06f 0311 	mvn.w	r3, #17
   100de:	e0c8      	b.n	10272 <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
   100e0:	7efb      	ldrb	r3, [r7, #27]
   100e2:	015b      	lsls	r3, r3, #5
   100e4:	4a67      	ldr	r2, [pc, #412]	; (10284 <_usb_d_dev_ep_enable+0x1fc>)
   100e6:	4413      	add	r3, r2
   100e8:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
   100ea:	697b      	ldr	r3, [r7, #20]
   100ec:	7cdb      	ldrb	r3, [r3, #19]
   100ee:	f003 0307 	and.w	r3, r3, #7
   100f2:	b2db      	uxtb	r3, r3
   100f4:	2b01      	cmp	r3, #1
   100f6:	d14b      	bne.n	10190 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
   100f8:	7cfb      	ldrb	r3, [r7, #19]
   100fa:	f003 0377 	and.w	r3, r3, #119	; 0x77
   100fe:	2b00      	cmp	r3, #0
   10100:	d002      	beq.n	10108 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
   10102:	f06f 0313 	mvn.w	r3, #19
   10106:	e0b4      	b.n	10272 <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
   10108:	7efb      	ldrb	r3, [r7, #27]
   1010a:	2211      	movs	r2, #17
   1010c:	4619      	mov	r1, r3
   1010e:	69f8      	ldr	r0, [r7, #28]
   10110:	4b5d      	ldr	r3, [pc, #372]	; (10288 <_usb_d_dev_ep_enable+0x200>)
   10112:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   10114:	697b      	ldr	r3, [r7, #20]
   10116:	8a1b      	ldrh	r3, [r3, #16]
   10118:	039b      	lsls	r3, r3, #14
   1011a:	4c5c      	ldr	r4, [pc, #368]	; (1028c <_usb_d_dev_ep_enable+0x204>)
   1011c:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   1011e:	697b      	ldr	r3, [r7, #20]
   10120:	8a1b      	ldrh	r3, [r3, #16]
   10122:	4618      	mov	r0, r3
   10124:	4b5a      	ldr	r3, [pc, #360]	; (10290 <_usb_d_dev_ep_enable+0x208>)
   10126:	4798      	blx	r3
   10128:	4603      	mov	r3, r0
   1012a:	071b      	lsls	r3, r3, #28
   1012c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
   10130:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   10134:	68fb      	ldr	r3, [r7, #12]
   10136:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
   10138:	68fb      	ldr	r3, [r7, #12]
   1013a:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   1013e:	697b      	ldr	r3, [r7, #20]
   10140:	8a1b      	ldrh	r3, [r3, #16]
   10142:	f3c3 050d 	ubfx	r5, r3, #0, #14
   10146:	697b      	ldr	r3, [r7, #20]
   10148:	8a1b      	ldrh	r3, [r3, #16]
   1014a:	4618      	mov	r0, r3
   1014c:	4b50      	ldr	r3, [pc, #320]	; (10290 <_usb_d_dev_ep_enable+0x208>)
   1014e:	4798      	blx	r3
   10150:	4603      	mov	r3, r0
   10152:	071b      	lsls	r3, r3, #28
   10154:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
   10158:	432b      	orrs	r3, r5
   1015a:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
   1015c:	7efb      	ldrb	r3, [r7, #27]
   1015e:	2200      	movs	r2, #0
   10160:	2100      	movs	r1, #0
   10162:	4618      	mov	r0, r3
   10164:	4b4b      	ldr	r3, [pc, #300]	; (10294 <_usb_d_dev_ep_enable+0x20c>)
   10166:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
   10168:	7efb      	ldrb	r3, [r7, #27]
   1016a:	2200      	movs	r2, #0
   1016c:	2101      	movs	r1, #1
   1016e:	4618      	mov	r0, r3
   10170:	4b49      	ldr	r3, [pc, #292]	; (10298 <_usb_d_dev_ep_enable+0x210>)
   10172:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
   10174:	7efb      	ldrb	r3, [r7, #27]
   10176:	2100      	movs	r1, #0
   10178:	4618      	mov	r0, r3
   1017a:	4b48      	ldr	r3, [pc, #288]	; (1029c <_usb_d_dev_ep_enable+0x214>)
   1017c:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
   1017e:	7efb      	ldrb	r3, [r7, #27]
   10180:	2101      	movs	r1, #1
   10182:	4618      	mov	r0, r3
   10184:	4b45      	ldr	r3, [pc, #276]	; (1029c <_usb_d_dev_ep_enable+0x214>)
   10186:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
   10188:	6978      	ldr	r0, [r7, #20]
   1018a:	4b45      	ldr	r3, [pc, #276]	; (102a0 <_usb_d_dev_ep_enable+0x218>)
   1018c:	4798      	blx	r3
   1018e:	e06f      	b.n	10270 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
   10190:	7ebb      	ldrb	r3, [r7, #26]
   10192:	2b00      	cmp	r3, #0
   10194:	d038      	beq.n	10208 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
   10196:	7cfb      	ldrb	r3, [r7, #19]
   10198:	f003 0370 	and.w	r3, r3, #112	; 0x70
   1019c:	2b00      	cmp	r3, #0
   1019e:	d002      	beq.n	101a6 <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
   101a0:	f06f 0313 	mvn.w	r3, #19
   101a4:	e065      	b.n	10272 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
   101a6:	697b      	ldr	r3, [r7, #20]
   101a8:	7cdb      	ldrb	r3, [r3, #19]
   101aa:	f3c3 0302 	ubfx	r3, r3, #0, #3
   101ae:	b2db      	uxtb	r3, r3
   101b0:	011b      	lsls	r3, r3, #4
   101b2:	b2db      	uxtb	r3, r3
   101b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
   101b8:	b2da      	uxtb	r2, r3
   101ba:	7cfb      	ldrb	r3, [r7, #19]
   101bc:	4313      	orrs	r3, r2
   101be:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
   101c0:	7cfa      	ldrb	r2, [r7, #19]
   101c2:	7efb      	ldrb	r3, [r7, #27]
   101c4:	4619      	mov	r1, r3
   101c6:	69f8      	ldr	r0, [r7, #28]
   101c8:	4b2f      	ldr	r3, [pc, #188]	; (10288 <_usb_d_dev_ep_enable+0x200>)
   101ca:	4798      	blx	r3

		bank[1].PCKSIZE.reg
   101cc:	68fb      	ldr	r3, [r7, #12]
   101ce:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   101d2:	697b      	ldr	r3, [r7, #20]
   101d4:	8a1b      	ldrh	r3, [r3, #16]
   101d6:	f3c3 050d 	ubfx	r5, r3, #0, #14
   101da:	697b      	ldr	r3, [r7, #20]
   101dc:	8a1b      	ldrh	r3, [r3, #16]
   101de:	4618      	mov	r0, r3
   101e0:	4b2b      	ldr	r3, [pc, #172]	; (10290 <_usb_d_dev_ep_enable+0x208>)
   101e2:	4798      	blx	r3
   101e4:	4603      	mov	r3, r0
   101e6:	071b      	lsls	r3, r3, #28
   101e8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
   101ec:	432b      	orrs	r3, r5
   101ee:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
   101f0:	7efb      	ldrb	r3, [r7, #27]
   101f2:	2200      	movs	r2, #0
   101f4:	2101      	movs	r1, #1
   101f6:	4618      	mov	r0, r3
   101f8:	4b27      	ldr	r3, [pc, #156]	; (10298 <_usb_d_dev_ep_enable+0x210>)
   101fa:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
   101fc:	7efb      	ldrb	r3, [r7, #27]
   101fe:	2101      	movs	r1, #1
   10200:	4618      	mov	r0, r3
   10202:	4b26      	ldr	r3, [pc, #152]	; (1029c <_usb_d_dev_ep_enable+0x214>)
   10204:	4798      	blx	r3
   10206:	e033      	b.n	10270 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
   10208:	7cfb      	ldrb	r3, [r7, #19]
   1020a:	f003 0307 	and.w	r3, r3, #7
   1020e:	2b00      	cmp	r3, #0
   10210:	d002      	beq.n	10218 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
   10212:	f06f 0313 	mvn.w	r3, #19
   10216:	e02c      	b.n	10272 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
   10218:	697b      	ldr	r3, [r7, #20]
   1021a:	7cdb      	ldrb	r3, [r3, #19]
   1021c:	f3c3 0302 	ubfx	r3, r3, #0, #3
   10220:	b2db      	uxtb	r3, r3
   10222:	461a      	mov	r2, r3
   10224:	7cfb      	ldrb	r3, [r7, #19]
   10226:	4313      	orrs	r3, r2
   10228:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
   1022a:	7cfa      	ldrb	r2, [r7, #19]
   1022c:	7efb      	ldrb	r3, [r7, #27]
   1022e:	4619      	mov	r1, r3
   10230:	69f8      	ldr	r0, [r7, #28]
   10232:	4b15      	ldr	r3, [pc, #84]	; (10288 <_usb_d_dev_ep_enable+0x200>)
   10234:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   10236:	697b      	ldr	r3, [r7, #20]
   10238:	8a1b      	ldrh	r3, [r3, #16]
   1023a:	039b      	lsls	r3, r3, #14
   1023c:	4c13      	ldr	r4, [pc, #76]	; (1028c <_usb_d_dev_ep_enable+0x204>)
   1023e:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   10240:	697b      	ldr	r3, [r7, #20]
   10242:	8a1b      	ldrh	r3, [r3, #16]
   10244:	4618      	mov	r0, r3
   10246:	4b12      	ldr	r3, [pc, #72]	; (10290 <_usb_d_dev_ep_enable+0x208>)
   10248:	4798      	blx	r3
   1024a:	4603      	mov	r3, r0
   1024c:	071b      	lsls	r3, r3, #28
   1024e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
   10252:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   10256:	68fb      	ldr	r3, [r7, #12]
   10258:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
   1025a:	7efb      	ldrb	r3, [r7, #27]
   1025c:	2200      	movs	r2, #0
   1025e:	2100      	movs	r1, #0
   10260:	4618      	mov	r0, r3
   10262:	4b0c      	ldr	r3, [pc, #48]	; (10294 <_usb_d_dev_ep_enable+0x20c>)
   10264:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
   10266:	7efb      	ldrb	r3, [r7, #27]
   10268:	2100      	movs	r1, #0
   1026a:	4618      	mov	r0, r3
   1026c:	4b0b      	ldr	r3, [pc, #44]	; (1029c <_usb_d_dev_ep_enable+0x214>)
   1026e:	4798      	blx	r3
	}

	return USB_OK;
   10270:	2300      	movs	r3, #0
}
   10272:	4618      	mov	r0, r3
   10274:	3720      	adds	r7, #32
   10276:	46bd      	mov	sp, r7
   10278:	bdb0      	pop	{r4, r5, r7, pc}
   1027a:	bf00      	nop
   1027c:	0000eea1 	.word	0x0000eea1
   10280:	0000e527 	.word	0x0000e527
   10284:	200018e4 	.word	0x200018e4
   10288:	0000e4fd 	.word	0x0000e4fd
   1028c:	0fffc000 	.word	0x0fffc000
   10290:	0000ee3d 	.word	0x0000ee3d
   10294:	0000ede5 	.word	0x0000ede5
   10298:	0000ed8d 	.word	0x0000ed8d
   1029c:	0000ed55 	.word	0x0000ed55
   102a0:	0000fdf9 	.word	0x0000fdf9

000102a4 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
   102a4:	b580      	push	{r7, lr}
   102a6:	b084      	sub	sp, #16
   102a8:	af00      	add	r7, sp, #0
   102aa:	6078      	str	r0, [r7, #4]
   102ac:	460b      	mov	r3, r1
   102ae:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
   102b0:	687b      	ldr	r3, [r7, #4]
   102b2:	7c9b      	ldrb	r3, [r3, #18]
   102b4:	f003 030f 	and.w	r3, r3, #15
   102b8:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
   102ba:	78fa      	ldrb	r2, [r7, #3]
   102bc:	7bfb      	ldrb	r3, [r7, #15]
   102be:	4611      	mov	r1, r2
   102c0:	4618      	mov	r0, r3
   102c2:	4b03      	ldr	r3, [pc, #12]	; (102d0 <_usb_d_dev_ep_stall_get+0x2c>)
   102c4:	4798      	blx	r3
   102c6:	4603      	mov	r3, r0
}
   102c8:	4618      	mov	r0, r3
   102ca:	3710      	adds	r7, #16
   102cc:	46bd      	mov	sp, r7
   102ce:	bd80      	pop	{r7, pc}
   102d0:	0000e995 	.word	0x0000e995

000102d4 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
   102d4:	b580      	push	{r7, lr}
   102d6:	b084      	sub	sp, #16
   102d8:	af00      	add	r7, sp, #0
   102da:	6078      	str	r0, [r7, #4]
   102dc:	460b      	mov	r3, r1
   102de:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
   102e0:	687b      	ldr	r3, [r7, #4]
   102e2:	7c9b      	ldrb	r3, [r3, #18]
   102e4:	f003 030f 	and.w	r3, r3, #15
   102e8:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
   102ea:	78f9      	ldrb	r1, [r7, #3]
   102ec:	7bfb      	ldrb	r3, [r7, #15]
   102ee:	2201      	movs	r2, #1
   102f0:	4618      	mov	r0, r3
   102f2:	4b0a      	ldr	r3, [pc, #40]	; (1031c <_usb_d_dev_ep_stall_set+0x48>)
   102f4:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
   102f6:	78fb      	ldrb	r3, [r7, #3]
   102f8:	2220      	movs	r2, #32
   102fa:	409a      	lsls	r2, r3
   102fc:	7bfb      	ldrb	r3, [r7, #15]
   102fe:	4611      	mov	r1, r2
   10300:	4618      	mov	r0, r3
   10302:	4b07      	ldr	r3, [pc, #28]	; (10320 <_usb_d_dev_ep_stall_set+0x4c>)
   10304:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
   10306:	687a      	ldr	r2, [r7, #4]
   10308:	7cd3      	ldrb	r3, [r2, #19]
   1030a:	f043 0308 	orr.w	r3, r3, #8
   1030e:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
   10310:	2300      	movs	r3, #0
}
   10312:	4618      	mov	r0, r3
   10314:	3710      	adds	r7, #16
   10316:	46bd      	mov	sp, r7
   10318:	bd80      	pop	{r7, pc}
   1031a:	bf00      	nop
   1031c:	0000e93d 	.word	0x0000e93d
   10320:	0000e8bd 	.word	0x0000e8bd

00010324 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
   10324:	b580      	push	{r7, lr}
   10326:	b084      	sub	sp, #16
   10328:	af00      	add	r7, sp, #0
   1032a:	6078      	str	r0, [r7, #4]
   1032c:	460b      	mov	r3, r1
   1032e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
   10330:	687b      	ldr	r3, [r7, #4]
   10332:	7c9b      	ldrb	r3, [r3, #18]
   10334:	f003 030f 	and.w	r3, r3, #15
   10338:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
   1033a:	78fa      	ldrb	r2, [r7, #3]
   1033c:	7bfb      	ldrb	r3, [r7, #15]
   1033e:	4611      	mov	r1, r2
   10340:	4618      	mov	r0, r3
   10342:	4b28      	ldr	r3, [pc, #160]	; (103e4 <_usb_d_dev_ep_stall_clr+0xc0>)
   10344:	4798      	blx	r3
   10346:	4603      	mov	r3, r0
   10348:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
   1034a:	7bbb      	ldrb	r3, [r7, #14]
   1034c:	f083 0301 	eor.w	r3, r3, #1
   10350:	b2db      	uxtb	r3, r3
   10352:	2b00      	cmp	r3, #0
   10354:	d001      	beq.n	1035a <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
   10356:	2300      	movs	r3, #0
   10358:	e040      	b.n	103dc <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
   1035a:	78f9      	ldrb	r1, [r7, #3]
   1035c:	7bfb      	ldrb	r3, [r7, #15]
   1035e:	2200      	movs	r2, #0
   10360:	4618      	mov	r0, r3
   10362:	4b21      	ldr	r3, [pc, #132]	; (103e8 <_usb_d_dev_ep_stall_clr+0xc4>)
   10364:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
   10366:	78fb      	ldrb	r3, [r7, #3]
   10368:	2220      	movs	r2, #32
   1036a:	409a      	lsls	r2, r3
   1036c:	7bfb      	ldrb	r3, [r7, #15]
   1036e:	4611      	mov	r1, r2
   10370:	4618      	mov	r0, r3
   10372:	4b1e      	ldr	r3, [pc, #120]	; (103ec <_usb_d_dev_ep_stall_clr+0xc8>)
   10374:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
   10376:	78fa      	ldrb	r2, [r7, #3]
   10378:	7bfb      	ldrb	r3, [r7, #15]
   1037a:	4611      	mov	r1, r2
   1037c:	4618      	mov	r0, r3
   1037e:	4b1c      	ldr	r3, [pc, #112]	; (103f0 <_usb_d_dev_ep_stall_clr+0xcc>)
   10380:	4798      	blx	r3
   10382:	4603      	mov	r3, r0
   10384:	2b00      	cmp	r3, #0
   10386:	d00b      	beq.n	103a0 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
   10388:	78fa      	ldrb	r2, [r7, #3]
   1038a:	7bfb      	ldrb	r3, [r7, #15]
   1038c:	4611      	mov	r1, r2
   1038e:	4618      	mov	r0, r3
   10390:	4b18      	ldr	r3, [pc, #96]	; (103f4 <_usb_d_dev_ep_stall_clr+0xd0>)
   10392:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
   10394:	78f9      	ldrb	r1, [r7, #3]
   10396:	7bfb      	ldrb	r3, [r7, #15]
   10398:	2200      	movs	r2, #0
   1039a:	4618      	mov	r0, r3
   1039c:	4b16      	ldr	r3, [pc, #88]	; (103f8 <_usb_d_dev_ep_stall_clr+0xd4>)
   1039e:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
   103a0:	687b      	ldr	r3, [r7, #4]
   103a2:	7cdb      	ldrb	r3, [r3, #19]
   103a4:	f003 0307 	and.w	r3, r3, #7
   103a8:	b2db      	uxtb	r3, r3
   103aa:	2b01      	cmp	r3, #1
   103ac:	d110      	bne.n	103d0 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
   103ae:	7bfb      	ldrb	r3, [r7, #15]
   103b0:	4619      	mov	r1, r3
   103b2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
   103b6:	4b11      	ldr	r3, [pc, #68]	; (103fc <_usb_d_dev_ep_stall_clr+0xd8>)
   103b8:	4798      	blx	r3
   103ba:	4603      	mov	r3, r0
   103bc:	f003 0330 	and.w	r3, r3, #48	; 0x30
   103c0:	2b00      	cmp	r3, #0
   103c2:	d10a      	bne.n	103da <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
   103c4:	687a      	ldr	r2, [r7, #4]
   103c6:	7cd3      	ldrb	r3, [r2, #19]
   103c8:	f36f 03c3 	bfc	r3, #3, #1
   103cc:	74d3      	strb	r3, [r2, #19]
   103ce:	e004      	b.n	103da <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
   103d0:	687a      	ldr	r2, [r7, #4]
   103d2:	7cd3      	ldrb	r3, [r2, #19]
   103d4:	f36f 03c3 	bfc	r3, #3, #1
   103d8:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
   103da:	2300      	movs	r3, #0
}
   103dc:	4618      	mov	r0, r3
   103de:	3710      	adds	r7, #16
   103e0:	46bd      	mov	sp, r7
   103e2:	bd80      	pop	{r7, pc}
   103e4:	0000e995 	.word	0x0000e995
   103e8:	0000e93d 	.word	0x0000e93d
   103ec:	0000e8e5 	.word	0x0000e8e5
   103f0:	0000e9d9 	.word	0x0000e9d9
   103f4:	0000ea1d 	.word	0x0000ea1d
   103f8:	0000eb09 	.word	0x0000eb09
   103fc:	0000e3c5 	.word	0x0000e3c5

00010400 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
   10400:	b580      	push	{r7, lr}
   10402:	b086      	sub	sp, #24
   10404:	af00      	add	r7, sp, #0
   10406:	4603      	mov	r3, r0
   10408:	460a      	mov	r2, r1
   1040a:	71fb      	strb	r3, [r7, #7]
   1040c:	4613      	mov	r3, r2
   1040e:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
   10410:	79fb      	ldrb	r3, [r7, #7]
   10412:	f003 030f 	and.w	r3, r3, #15
   10416:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
   10418:	79fb      	ldrb	r3, [r7, #7]
   1041a:	f003 0380 	and.w	r3, r3, #128	; 0x80
   1041e:	2b00      	cmp	r3, #0
   10420:	bf14      	ite	ne
   10422:	2301      	movne	r3, #1
   10424:	2300      	moveq	r3, #0
   10426:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
   10428:	7cba      	ldrb	r2, [r7, #18]
   1042a:	7cfb      	ldrb	r3, [r7, #19]
   1042c:	4611      	mov	r1, r2
   1042e:	4618      	mov	r0, r3
   10430:	4b13      	ldr	r3, [pc, #76]	; (10480 <_usb_d_dev_ep_stall+0x80>)
   10432:	4798      	blx	r3
   10434:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
   10436:	7cfb      	ldrb	r3, [r7, #19]
   10438:	2b04      	cmp	r3, #4
   1043a:	d902      	bls.n	10442 <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
   1043c:	f06f 0311 	mvn.w	r3, #17
   10440:	e01a      	b.n	10478 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
   10442:	79bb      	ldrb	r3, [r7, #6]
   10444:	2b01      	cmp	r3, #1
   10446:	d106      	bne.n	10456 <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
   10448:	7cbb      	ldrb	r3, [r7, #18]
   1044a:	4619      	mov	r1, r3
   1044c:	68f8      	ldr	r0, [r7, #12]
   1044e:	4b0d      	ldr	r3, [pc, #52]	; (10484 <_usb_d_dev_ep_stall+0x84>)
   10450:	4798      	blx	r3
   10452:	6178      	str	r0, [r7, #20]
   10454:	e00f      	b.n	10476 <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
   10456:	79bb      	ldrb	r3, [r7, #6]
   10458:	2b00      	cmp	r3, #0
   1045a:	d106      	bne.n	1046a <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
   1045c:	7cbb      	ldrb	r3, [r7, #18]
   1045e:	4619      	mov	r1, r3
   10460:	68f8      	ldr	r0, [r7, #12]
   10462:	4b09      	ldr	r3, [pc, #36]	; (10488 <_usb_d_dev_ep_stall+0x88>)
   10464:	4798      	blx	r3
   10466:	6178      	str	r0, [r7, #20]
   10468:	e005      	b.n	10476 <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
   1046a:	7cbb      	ldrb	r3, [r7, #18]
   1046c:	4619      	mov	r1, r3
   1046e:	68f8      	ldr	r0, [r7, #12]
   10470:	4b06      	ldr	r3, [pc, #24]	; (1048c <_usb_d_dev_ep_stall+0x8c>)
   10472:	4798      	blx	r3
   10474:	6178      	str	r0, [r7, #20]
	}
	return rc;
   10476:	697b      	ldr	r3, [r7, #20]
}
   10478:	4618      	mov	r0, r3
   1047a:	3718      	adds	r7, #24
   1047c:	46bd      	mov	sp, r7
   1047e:	bd80      	pop	{r7, pc}
   10480:	0000eea1 	.word	0x0000eea1
   10484:	000102d5 	.word	0x000102d5
   10488:	00010325 	.word	0x00010325
   1048c:	000102a5 	.word	0x000102a5

00010490 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
   10490:	b580      	push	{r7, lr}
   10492:	b082      	sub	sp, #8
   10494:	af00      	add	r7, sp, #0
   10496:	6078      	str	r0, [r7, #4]
   10498:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   1049a:	687b      	ldr	r3, [r7, #4]
   1049c:	7c9b      	ldrb	r3, [r3, #18]
   1049e:	2bff      	cmp	r3, #255	; 0xff
   104a0:	d014      	beq.n	104cc <_usb_d_dev_trans_done+0x3c>
   104a2:	687b      	ldr	r3, [r7, #4]
   104a4:	7cdb      	ldrb	r3, [r3, #19]
   104a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
   104aa:	b2db      	uxtb	r3, r3
   104ac:	2b00      	cmp	r3, #0
   104ae:	d00d      	beq.n	104cc <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
   104b0:	687a      	ldr	r2, [r7, #4]
   104b2:	7cd3      	ldrb	r3, [r2, #19]
   104b4:	f36f 1386 	bfc	r3, #6, #1
   104b8:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   104ba:	4b06      	ldr	r3, [pc, #24]	; (104d4 <_usb_d_dev_trans_done+0x44>)
   104bc:	691b      	ldr	r3, [r3, #16]
   104be:	687a      	ldr	r2, [r7, #4]
   104c0:	7c90      	ldrb	r0, [r2, #18]
   104c2:	687a      	ldr	r2, [r7, #4]
   104c4:	6892      	ldr	r2, [r2, #8]
   104c6:	6839      	ldr	r1, [r7, #0]
   104c8:	4798      	blx	r3
   104ca:	e000      	b.n	104ce <_usb_d_dev_trans_done+0x3e>
		return;
   104cc:	bf00      	nop
}
   104ce:	3708      	adds	r7, #8
   104d0:	46bd      	mov	sp, r7
   104d2:	bd80      	pop	{r7, pc}
   104d4:	2000181c 	.word	0x2000181c

000104d8 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
   104d8:	b580      	push	{r7, lr}
   104da:	b086      	sub	sp, #24
   104dc:	af00      	add	r7, sp, #0
   104de:	60f8      	str	r0, [r7, #12]
   104e0:	460b      	mov	r3, r1
   104e2:	607a      	str	r2, [r7, #4]
   104e4:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
   104e6:	68fb      	ldr	r3, [r7, #12]
   104e8:	7c9b      	ldrb	r3, [r3, #18]
   104ea:	f003 030f 	and.w	r3, r3, #15
   104ee:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
   104f0:	4b1f      	ldr	r3, [pc, #124]	; (10570 <_usb_d_dev_trans_stop+0x98>)
   104f2:	881b      	ldrh	r3, [r3, #0]
   104f4:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   104f6:	68fb      	ldr	r3, [r7, #12]
   104f8:	7c9b      	ldrb	r3, [r3, #18]
   104fa:	2bff      	cmp	r3, #255	; 0xff
   104fc:	d033      	beq.n	10566 <_usb_d_dev_trans_stop+0x8e>
   104fe:	68fb      	ldr	r3, [r7, #12]
   10500:	7cdb      	ldrb	r3, [r3, #19]
   10502:	f003 0340 	and.w	r3, r3, #64	; 0x40
   10506:	b2db      	uxtb	r3, r3
   10508:	2b00      	cmp	r3, #0
   1050a:	d02c      	beq.n	10566 <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
   1050c:	7afb      	ldrb	r3, [r7, #11]
   1050e:	2b00      	cmp	r3, #0
   10510:	d006      	beq.n	10520 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
   10512:	7dfb      	ldrb	r3, [r7, #23]
   10514:	2200      	movs	r2, #0
   10516:	2101      	movs	r1, #1
   10518:	4618      	mov	r0, r3
   1051a:	4b16      	ldr	r3, [pc, #88]	; (10574 <_usb_d_dev_trans_stop+0x9c>)
   1051c:	4798      	blx	r3
   1051e:	e005      	b.n	1052c <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
   10520:	7dfb      	ldrb	r3, [r7, #23]
   10522:	2200      	movs	r2, #0
   10524:	2100      	movs	r1, #0
   10526:	4618      	mov	r0, r3
   10528:	4b13      	ldr	r3, [pc, #76]	; (10578 <_usb_d_dev_trans_stop+0xa0>)
   1052a:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
   1052c:	7afb      	ldrb	r3, [r7, #11]
   1052e:	f107 0218 	add.w	r2, r7, #24
   10532:	4413      	add	r3, r2
   10534:	f813 3c04 	ldrb.w	r3, [r3, #-4]
   10538:	461a      	mov	r2, r3
   1053a:	7dfb      	ldrb	r3, [r7, #23]
   1053c:	4611      	mov	r1, r2
   1053e:	4618      	mov	r0, r3
   10540:	4b0e      	ldr	r3, [pc, #56]	; (1057c <_usb_d_dev_trans_stop+0xa4>)
   10542:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
   10544:	7afb      	ldrb	r3, [r7, #11]
   10546:	f107 0218 	add.w	r2, r7, #24
   1054a:	4413      	add	r3, r2
   1054c:	f813 3c04 	ldrb.w	r3, [r3, #-4]
   10550:	461a      	mov	r2, r3
   10552:	7dfb      	ldrb	r3, [r7, #23]
   10554:	4611      	mov	r1, r2
   10556:	4618      	mov	r0, r3
   10558:	4b09      	ldr	r3, [pc, #36]	; (10580 <_usb_d_dev_trans_stop+0xa8>)
   1055a:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
   1055c:	6879      	ldr	r1, [r7, #4]
   1055e:	68f8      	ldr	r0, [r7, #12]
   10560:	4b08      	ldr	r3, [pc, #32]	; (10584 <_usb_d_dev_trans_stop+0xac>)
   10562:	4798      	blx	r3
   10564:	e000      	b.n	10568 <_usb_d_dev_trans_stop+0x90>
		return;
   10566:	bf00      	nop
}
   10568:	3718      	adds	r7, #24
   1056a:	46bd      	mov	sp, r7
   1056c:	bd80      	pop	{r7, pc}
   1056e:	bf00      	nop
   10570:	000140d0 	.word	0x000140d0
   10574:	0000ed8d 	.word	0x0000ed8d
   10578:	0000ede5 	.word	0x0000ede5
   1057c:	0000e895 	.word	0x0000e895
   10580:	0000e8e5 	.word	0x0000e8e5
   10584:	00010491 	.word	0x00010491

00010588 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
   10588:	b580      	push	{r7, lr}
   1058a:	b086      	sub	sp, #24
   1058c:	af00      	add	r7, sp, #0
   1058e:	4603      	mov	r3, r0
   10590:	6039      	str	r1, [r7, #0]
   10592:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
   10594:	79fb      	ldrb	r3, [r7, #7]
   10596:	f003 030f 	and.w	r3, r3, #15
   1059a:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
   1059c:	7dfb      	ldrb	r3, [r7, #23]
   1059e:	015b      	lsls	r3, r3, #5
   105a0:	4a1e      	ldr	r2, [pc, #120]	; (1061c <_usb_d_dev_ep_read_req+0x94>)
   105a2:	4413      	add	r3, r2
   105a4:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
   105a6:	693b      	ldr	r3, [r7, #16]
   105a8:	681b      	ldr	r3, [r3, #0]
   105aa:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
   105ac:	693b      	ldr	r3, [r7, #16]
   105ae:	685b      	ldr	r3, [r3, #4]
   105b0:	f3c3 030d 	ubfx	r3, r3, #0, #14
   105b4:	b29b      	uxth	r3, r3
   105b6:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
   105b8:	7dfb      	ldrb	r3, [r7, #23]
   105ba:	2b04      	cmp	r3, #4
   105bc:	d802      	bhi.n	105c4 <_usb_d_dev_ep_read_req+0x3c>
   105be:	683b      	ldr	r3, [r7, #0]
   105c0:	2b00      	cmp	r3, #0
   105c2:	d102      	bne.n	105ca <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
   105c4:	f06f 0311 	mvn.w	r3, #17
   105c8:	e023      	b.n	10612 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
   105ca:	7dfb      	ldrb	r3, [r7, #23]
   105cc:	4618      	mov	r0, r3
   105ce:	4b14      	ldr	r3, [pc, #80]	; (10620 <_usb_d_dev_ep_read_req+0x98>)
   105d0:	4798      	blx	r3
   105d2:	4603      	mov	r3, r0
   105d4:	f083 0301 	eor.w	r3, r3, #1
   105d8:	b2db      	uxtb	r3, r3
   105da:	2b00      	cmp	r3, #0
   105dc:	d002      	beq.n	105e4 <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
   105de:	f06f 0312 	mvn.w	r3, #18
   105e2:	e016      	b.n	10612 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
   105e4:	7dfb      	ldrb	r3, [r7, #23]
   105e6:	4618      	mov	r0, r3
   105e8:	4b0e      	ldr	r3, [pc, #56]	; (10624 <_usb_d_dev_ep_read_req+0x9c>)
   105ea:	4798      	blx	r3
   105ec:	4603      	mov	r3, r0
   105ee:	f083 0301 	eor.w	r3, r3, #1
   105f2:	b2db      	uxtb	r3, r3
   105f4:	2b00      	cmp	r3, #0
   105f6:	d001      	beq.n	105fc <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
   105f8:	2300      	movs	r3, #0
   105fa:	e00a      	b.n	10612 <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
   105fc:	68fb      	ldr	r3, [r7, #12]
   105fe:	2208      	movs	r2, #8
   10600:	4619      	mov	r1, r3
   10602:	6838      	ldr	r0, [r7, #0]
   10604:	4b08      	ldr	r3, [pc, #32]	; (10628 <_usb_d_dev_ep_read_req+0xa0>)
   10606:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
   10608:	7dfb      	ldrb	r3, [r7, #23]
   1060a:	4618      	mov	r0, r3
   1060c:	4b07      	ldr	r3, [pc, #28]	; (1062c <_usb_d_dev_ep_read_req+0xa4>)
   1060e:	4798      	blx	r3

	return bytes;
   10610:	897b      	ldrh	r3, [r7, #10]
}
   10612:	4618      	mov	r0, r3
   10614:	3718      	adds	r7, #24
   10616:	46bd      	mov	sp, r7
   10618:	bd80      	pop	{r7, pc}
   1061a:	bf00      	nop
   1061c:	200018e4 	.word	0x200018e4
   10620:	0000e90d 	.word	0x0000e90d
   10624:	0000eab9 	.word	0x0000eab9
   10628:	00012db5 	.word	0x00012db5
   1062c:	0000eae9 	.word	0x0000eae9

00010630 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
   10630:	b580      	push	{r7, lr}
   10632:	b086      	sub	sp, #24
   10634:	af00      	add	r7, sp, #0
   10636:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
   10638:	687b      	ldr	r3, [r7, #4]
   1063a:	7a1b      	ldrb	r3, [r3, #8]
   1063c:	f003 030f 	and.w	r3, r3, #15
   10640:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
   10642:	687b      	ldr	r3, [r7, #4]
   10644:	7a1b      	ldrb	r3, [r3, #8]
   10646:	f003 0380 	and.w	r3, r3, #128	; 0x80
   1064a:	2b00      	cmp	r3, #0
   1064c:	bf14      	ite	ne
   1064e:	2301      	movne	r3, #1
   10650:	2300      	moveq	r3, #0
   10652:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
   10654:	7d7a      	ldrb	r2, [r7, #21]
   10656:	7dbb      	ldrb	r3, [r7, #22]
   10658:	4611      	mov	r1, r2
   1065a:	4618      	mov	r0, r3
   1065c:	4b5f      	ldr	r3, [pc, #380]	; (107dc <_usb_d_dev_ep_trans+0x1ac>)
   1065e:	4798      	blx	r3
   10660:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   10662:	693b      	ldr	r3, [r7, #16]
   10664:	8a1b      	ldrh	r3, [r3, #16]
   10666:	f240 32ff 	movw	r2, #1023	; 0x3ff
   1066a:	4293      	cmp	r3, r2
   1066c:	d004      	beq.n	10678 <_usb_d_dev_ep_trans+0x48>
   1066e:	693b      	ldr	r3, [r7, #16]
   10670:	8a1b      	ldrh	r3, [r3, #16]
   10672:	3b01      	subs	r3, #1
   10674:	b29b      	uxth	r3, r3
   10676:	e001      	b.n	1067c <_usb_d_dev_ep_trans+0x4c>
   10678:	f240 33ff 	movw	r3, #1023	; 0x3ff
   1067c:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
   1067e:	687b      	ldr	r3, [r7, #4]
   10680:	685a      	ldr	r2, [r3, #4]
   10682:	89fb      	ldrh	r3, [r7, #14]
   10684:	4013      	ands	r3, r2
   10686:	2b00      	cmp	r3, #0
   10688:	bf14      	ite	ne
   1068a:	2301      	movne	r3, #1
   1068c:	2300      	moveq	r3, #0
   1068e:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
   10690:	2300      	movs	r3, #0
   10692:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
   10694:	7dbb      	ldrb	r3, [r7, #22]
   10696:	2b04      	cmp	r3, #4
   10698:	d902      	bls.n	106a0 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
   1069a:	f06f 0311 	mvn.w	r3, #17
   1069e:	e098      	b.n	107d2 <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
   106a0:	687b      	ldr	r3, [r7, #4]
   106a2:	681b      	ldr	r3, [r3, #0]
   106a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   106a8:	d31a      	bcc.n	106e0 <_usb_d_dev_ep_trans+0xb0>
   106aa:	687b      	ldr	r3, [r7, #4]
   106ac:	681b      	ldr	r3, [r3, #0]
   106ae:	461a      	mov	r2, r3
   106b0:	687b      	ldr	r3, [r7, #4]
   106b2:	685b      	ldr	r3, [r3, #4]
   106b4:	4413      	add	r3, r2
   106b6:	4a4a      	ldr	r2, [pc, #296]	; (107e0 <_usb_d_dev_ep_trans+0x1b0>)
   106b8:	4293      	cmp	r3, r2
   106ba:	d811      	bhi.n	106e0 <_usb_d_dev_ep_trans+0xb0>
   106bc:	687b      	ldr	r3, [r7, #4]
   106be:	681b      	ldr	r3, [r3, #0]
   106c0:	f003 0303 	and.w	r3, r3, #3
   106c4:	2b00      	cmp	r3, #0
   106c6:	d10b      	bne.n	106e0 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
   106c8:	7d7b      	ldrb	r3, [r7, #21]
   106ca:	f083 0301 	eor.w	r3, r3, #1
   106ce:	b2db      	uxtb	r3, r3
   106d0:	2b00      	cmp	r3, #0
   106d2:	d00e      	beq.n	106f2 <_usb_d_dev_ep_trans+0xc2>
   106d4:	687b      	ldr	r3, [r7, #4]
   106d6:	685b      	ldr	r3, [r3, #4]
   106d8:	693a      	ldr	r2, [r7, #16]
   106da:	8a12      	ldrh	r2, [r2, #16]
   106dc:	4293      	cmp	r3, r2
   106de:	d208      	bcs.n	106f2 <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
   106e0:	693b      	ldr	r3, [r7, #16]
   106e2:	68db      	ldr	r3, [r3, #12]
   106e4:	2b00      	cmp	r3, #0
   106e6:	d102      	bne.n	106ee <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
   106e8:	f06f 0312 	mvn.w	r3, #18
   106ec:	e071      	b.n	107d2 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
   106ee:	2301      	movs	r3, #1
   106f0:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
   106f2:	7d7b      	ldrb	r3, [r7, #21]
   106f4:	f083 0301 	eor.w	r3, r3, #1
   106f8:	b2db      	uxtb	r3, r3
   106fa:	2b00      	cmp	r3, #0
   106fc:	d009      	beq.n	10712 <_usb_d_dev_ep_trans+0xe2>
   106fe:	7b7b      	ldrb	r3, [r7, #13]
   10700:	2b00      	cmp	r3, #0
   10702:	d006      	beq.n	10712 <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
   10704:	693b      	ldr	r3, [r7, #16]
   10706:	68db      	ldr	r3, [r3, #12]
   10708:	2b00      	cmp	r3, #0
   1070a:	d102      	bne.n	10712 <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
   1070c:	f06f 0311 	mvn.w	r3, #17
   10710:	e05f      	b.n	107d2 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
   10712:	693b      	ldr	r3, [r7, #16]
   10714:	7cdb      	ldrb	r3, [r3, #19]
   10716:	f003 0308 	and.w	r3, r3, #8
   1071a:	b2db      	uxtb	r3, r3
   1071c:	2b00      	cmp	r3, #0
   1071e:	d001      	beq.n	10724 <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
   10720:	2302      	movs	r3, #2
   10722:	e056      	b.n	107d2 <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
   10724:	f107 0308 	add.w	r3, r7, #8
   10728:	4618      	mov	r0, r3
   1072a:	4b2e      	ldr	r3, [pc, #184]	; (107e4 <_usb_d_dev_ep_trans+0x1b4>)
   1072c:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
   1072e:	693b      	ldr	r3, [r7, #16]
   10730:	7cdb      	ldrb	r3, [r3, #19]
   10732:	f003 0340 	and.w	r3, r3, #64	; 0x40
   10736:	b2db      	uxtb	r3, r3
   10738:	2b00      	cmp	r3, #0
   1073a:	d006      	beq.n	1074a <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
   1073c:	f107 0308 	add.w	r3, r7, #8
   10740:	4618      	mov	r0, r3
   10742:	4b29      	ldr	r3, [pc, #164]	; (107e8 <_usb_d_dev_ep_trans+0x1b8>)
   10744:	4798      	blx	r3
		return USB_BUSY;
   10746:	2301      	movs	r3, #1
   10748:	e043      	b.n	107d2 <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
   1074a:	693a      	ldr	r2, [r7, #16]
   1074c:	7cd3      	ldrb	r3, [r2, #19]
   1074e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10752:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
   10754:	f107 0308 	add.w	r3, r7, #8
   10758:	4618      	mov	r0, r3
   1075a:	4b23      	ldr	r3, [pc, #140]	; (107e8 <_usb_d_dev_ep_trans+0x1b8>)
   1075c:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
   1075e:	687b      	ldr	r3, [r7, #4]
   10760:	681a      	ldr	r2, [r3, #0]
   10762:	693b      	ldr	r3, [r7, #16]
   10764:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
   10766:	687b      	ldr	r3, [r7, #4]
   10768:	685a      	ldr	r2, [r3, #4]
   1076a:	693b      	ldr	r3, [r7, #16]
   1076c:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
   1076e:	693b      	ldr	r3, [r7, #16]
   10770:	2200      	movs	r2, #0
   10772:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
   10774:	693a      	ldr	r2, [r7, #16]
   10776:	7cd3      	ldrb	r3, [r2, #19]
   10778:	7d79      	ldrb	r1, [r7, #21]
   1077a:	f361 13c7 	bfi	r3, r1, #7, #1
   1077e:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
   10780:	693a      	ldr	r2, [r7, #16]
   10782:	7cd3      	ldrb	r3, [r2, #19]
   10784:	7df9      	ldrb	r1, [r7, #23]
   10786:	f361 1345 	bfi	r3, r1, #5, #1
   1078a:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
   1078c:	687b      	ldr	r3, [r7, #4]
   1078e:	7a5b      	ldrb	r3, [r3, #9]
   10790:	2b00      	cmp	r3, #0
   10792:	d007      	beq.n	107a4 <_usb_d_dev_ep_trans+0x174>
   10794:	7b7b      	ldrb	r3, [r7, #13]
   10796:	f083 0301 	eor.w	r3, r3, #1
   1079a:	b2db      	uxtb	r3, r3
   1079c:	2b00      	cmp	r3, #0
   1079e:	d001      	beq.n	107a4 <_usb_d_dev_ep_trans+0x174>
   107a0:	2301      	movs	r3, #1
   107a2:	e000      	b.n	107a6 <_usb_d_dev_ep_trans+0x176>
   107a4:	2300      	movs	r3, #0
   107a6:	b2db      	uxtb	r3, r3
   107a8:	f003 0301 	and.w	r3, r3, #1
   107ac:	b2d9      	uxtb	r1, r3
   107ae:	693a      	ldr	r2, [r7, #16]
   107b0:	7cd3      	ldrb	r3, [r2, #19]
   107b2:	f361 1304 	bfi	r3, r1, #4, #1
   107b6:	74d3      	strb	r3, [r2, #19]

	if (dir) {
   107b8:	7d7b      	ldrb	r3, [r7, #21]
   107ba:	2b00      	cmp	r3, #0
   107bc:	d004      	beq.n	107c8 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
   107be:	2100      	movs	r1, #0
   107c0:	6938      	ldr	r0, [r7, #16]
   107c2:	4b0a      	ldr	r3, [pc, #40]	; (107ec <_usb_d_dev_ep_trans+0x1bc>)
   107c4:	4798      	blx	r3
   107c6:	e003      	b.n	107d0 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
   107c8:	2100      	movs	r1, #0
   107ca:	6938      	ldr	r0, [r7, #16]
   107cc:	4b08      	ldr	r3, [pc, #32]	; (107f0 <_usb_d_dev_ep_trans+0x1c0>)
   107ce:	4798      	blx	r3
	}

	return ERR_NONE;
   107d0:	2300      	movs	r3, #0
}
   107d2:	4618      	mov	r0, r3
   107d4:	3718      	adds	r7, #24
   107d6:	46bd      	mov	sp, r7
   107d8:	bd80      	pop	{r7, pc}
   107da:	bf00      	nop
   107dc:	0000eea1 	.word	0x0000eea1
   107e0:	20041fff 	.word	0x20041fff
   107e4:	00010fa9 	.word	0x00010fa9
   107e8:	00010fcf 	.word	0x00010fcf
   107ec:	0000f169 	.word	0x0000f169
   107f0:	0000f381 	.word	0x0000f381

000107f4 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
   107f4:	b480      	push	{r7}
   107f6:	b085      	sub	sp, #20
   107f8:	af00      	add	r7, sp, #0
   107fa:	4603      	mov	r3, r0
   107fc:	6039      	str	r1, [r7, #0]
   107fe:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
   10800:	683b      	ldr	r3, [r7, #0]
   10802:	2b00      	cmp	r3, #0
   10804:	d001      	beq.n	1080a <_usb_d_dev_register_callback+0x16>
   10806:	683b      	ldr	r3, [r7, #0]
   10808:	e000      	b.n	1080c <_usb_d_dev_register_callback+0x18>
   1080a:	4b0a      	ldr	r3, [pc, #40]	; (10834 <_usb_d_dev_register_callback+0x40>)
   1080c:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
   1080e:	79fb      	ldrb	r3, [r7, #7]
   10810:	2b01      	cmp	r3, #1
   10812:	d103      	bne.n	1081c <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
   10814:	4a08      	ldr	r2, [pc, #32]	; (10838 <_usb_d_dev_register_callback+0x44>)
   10816:	68fb      	ldr	r3, [r7, #12]
   10818:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
   1081a:	e005      	b.n	10828 <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
   1081c:	79fb      	ldrb	r3, [r7, #7]
   1081e:	2b00      	cmp	r3, #0
   10820:	d102      	bne.n	10828 <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
   10822:	4a05      	ldr	r2, [pc, #20]	; (10838 <_usb_d_dev_register_callback+0x44>)
   10824:	68fb      	ldr	r3, [r7, #12]
   10826:	6013      	str	r3, [r2, #0]
}
   10828:	bf00      	nop
   1082a:	3714      	adds	r7, #20
   1082c:	46bd      	mov	sp, r7
   1082e:	f85d 7b04 	ldr.w	r7, [sp], #4
   10832:	4770      	bx	lr
   10834:	0000e729 	.word	0x0000e729
   10838:	2000181c 	.word	0x2000181c

0001083c <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
   1083c:	b480      	push	{r7}
   1083e:	b085      	sub	sp, #20
   10840:	af00      	add	r7, sp, #0
   10842:	4603      	mov	r3, r0
   10844:	6039      	str	r1, [r7, #0]
   10846:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
   10848:	683b      	ldr	r3, [r7, #0]
   1084a:	2b00      	cmp	r3, #0
   1084c:	d001      	beq.n	10852 <_usb_d_dev_register_ep_callback+0x16>
   1084e:	683b      	ldr	r3, [r7, #0]
   10850:	e000      	b.n	10854 <_usb_d_dev_register_ep_callback+0x18>
   10852:	4b0e      	ldr	r3, [pc, #56]	; (1088c <_usb_d_dev_register_ep_callback+0x50>)
   10854:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
   10856:	79fb      	ldrb	r3, [r7, #7]
   10858:	2b00      	cmp	r3, #0
   1085a:	d103      	bne.n	10864 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
   1085c:	4a0c      	ldr	r2, [pc, #48]	; (10890 <_usb_d_dev_register_ep_callback+0x54>)
   1085e:	68fb      	ldr	r3, [r7, #12]
   10860:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
   10862:	e00c      	b.n	1087e <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
   10864:	79fb      	ldrb	r3, [r7, #7]
   10866:	2b01      	cmp	r3, #1
   10868:	d103      	bne.n	10872 <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
   1086a:	4a09      	ldr	r2, [pc, #36]	; (10890 <_usb_d_dev_register_ep_callback+0x54>)
   1086c:	68fb      	ldr	r3, [r7, #12]
   1086e:	60d3      	str	r3, [r2, #12]
}
   10870:	e005      	b.n	1087e <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
   10872:	79fb      	ldrb	r3, [r7, #7]
   10874:	2b02      	cmp	r3, #2
   10876:	d102      	bne.n	1087e <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
   10878:	4a05      	ldr	r2, [pc, #20]	; (10890 <_usb_d_dev_register_ep_callback+0x54>)
   1087a:	68fb      	ldr	r3, [r7, #12]
   1087c:	6113      	str	r3, [r2, #16]
}
   1087e:	bf00      	nop
   10880:	3714      	adds	r7, #20
   10882:	46bd      	mov	sp, r7
   10884:	f85d 7b04 	ldr.w	r7, [sp], #4
   10888:	4770      	bx	lr
   1088a:	bf00      	nop
   1088c:	0000e729 	.word	0x0000e729
   10890:	2000181c 	.word	0x2000181c

00010894 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
   10894:	b580      	push	{r7, lr}
   10896:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
   10898:	4b01      	ldr	r3, [pc, #4]	; (108a0 <USB_0_Handler+0xc>)
   1089a:	4798      	blx	r3
}
   1089c:	bf00      	nop
   1089e:	bd80      	pop	{r7, pc}
   108a0:	0000fb59 	.word	0x0000fb59

000108a4 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
   108a4:	b580      	push	{r7, lr}
   108a6:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
   108a8:	4b01      	ldr	r3, [pc, #4]	; (108b0 <USB_1_Handler+0xc>)
   108aa:	4798      	blx	r3
}
   108ac:	bf00      	nop
   108ae:	bd80      	pop	{r7, pc}
   108b0:	0000fb59 	.word	0x0000fb59

000108b4 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
   108b4:	b580      	push	{r7, lr}
   108b6:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
   108b8:	4b01      	ldr	r3, [pc, #4]	; (108c0 <USB_2_Handler+0xc>)
   108ba:	4798      	blx	r3
}
   108bc:	bf00      	nop
   108be:	bd80      	pop	{r7, pc}
   108c0:	0000fb59 	.word	0x0000fb59

000108c4 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
   108c4:	b580      	push	{r7, lr}
   108c6:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
   108c8:	4b01      	ldr	r3, [pc, #4]	; (108d0 <USB_3_Handler+0xc>)
   108ca:	4798      	blx	r3
}
   108cc:	bf00      	nop
   108ce:	bd80      	pop	{r7, pc}
   108d0:	0000fb59 	.word	0x0000fb59

000108d4 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
   108d4:	b480      	push	{r7}
   108d6:	b083      	sub	sp, #12
   108d8:	af00      	add	r7, sp, #0
   108da:	6078      	str	r0, [r7, #4]
   108dc:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
   108de:	bf00      	nop
   108e0:	687b      	ldr	r3, [r7, #4]
   108e2:	689a      	ldr	r2, [r3, #8]
   108e4:	683b      	ldr	r3, [r7, #0]
   108e6:	4013      	ands	r3, r2
   108e8:	2b00      	cmp	r3, #0
   108ea:	d1f9      	bne.n	108e0 <hri_wdt_wait_for_sync+0xc>
	};
}
   108ec:	bf00      	nop
   108ee:	370c      	adds	r7, #12
   108f0:	46bd      	mov	sp, r7
   108f2:	f85d 7b04 	ldr.w	r7, [sp], #4
   108f6:	4770      	bx	lr

000108f8 <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
   108f8:	b580      	push	{r7, lr}
   108fa:	b084      	sub	sp, #16
   108fc:	af00      	add	r7, sp, #0
   108fe:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
   10900:	210e      	movs	r1, #14
   10902:	6878      	ldr	r0, [r7, #4]
   10904:	4b0a      	ldr	r3, [pc, #40]	; (10930 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
   10906:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
   10908:	687b      	ldr	r3, [r7, #4]
   1090a:	781b      	ldrb	r3, [r3, #0]
   1090c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
   1090e:	7bfb      	ldrb	r3, [r7, #15]
   10910:	085b      	lsrs	r3, r3, #1
   10912:	b2db      	uxtb	r3, r3
   10914:	f003 0301 	and.w	r3, r3, #1
   10918:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
   1091a:	7bfb      	ldrb	r3, [r7, #15]
   1091c:	2b00      	cmp	r3, #0
   1091e:	bf14      	ite	ne
   10920:	2301      	movne	r3, #1
   10922:	2300      	moveq	r3, #0
   10924:	b2db      	uxtb	r3, r3
}
   10926:	4618      	mov	r0, r3
   10928:	3710      	adds	r7, #16
   1092a:	46bd      	mov	sp, r7
   1092c:	bd80      	pop	{r7, pc}
   1092e:	bf00      	nop
   10930:	000108d5 	.word	0x000108d5

00010934 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
   10934:	b580      	push	{r7, lr}
   10936:	b082      	sub	sp, #8
   10938:	af00      	add	r7, sp, #0
   1093a:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
   1093c:	687b      	ldr	r3, [r7, #4]
   1093e:	781b      	ldrb	r3, [r3, #0]
   10940:	b2db      	uxtb	r3, r3
   10942:	f023 0304 	bic.w	r3, r3, #4
   10946:	b2da      	uxtb	r2, r3
   10948:	687b      	ldr	r3, [r7, #4]
   1094a:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
   1094c:	210e      	movs	r1, #14
   1094e:	6878      	ldr	r0, [r7, #4]
   10950:	4b02      	ldr	r3, [pc, #8]	; (1095c <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
   10952:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
   10954:	bf00      	nop
   10956:	3708      	adds	r7, #8
   10958:	46bd      	mov	sp, r7
   1095a:	bd80      	pop	{r7, pc}
   1095c:	000108d5 	.word	0x000108d5

00010960 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
   10960:	b580      	push	{r7, lr}
   10962:	b084      	sub	sp, #16
   10964:	af00      	add	r7, sp, #0
   10966:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
   10968:	210e      	movs	r1, #14
   1096a:	6878      	ldr	r0, [r7, #4]
   1096c:	4b08      	ldr	r3, [pc, #32]	; (10990 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
   1096e:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
   10970:	687b      	ldr	r3, [r7, #4]
   10972:	781b      	ldrb	r3, [r3, #0]
   10974:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
   10976:	7bfb      	ldrb	r3, [r7, #15]
   10978:	09db      	lsrs	r3, r3, #7
   1097a:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
   1097c:	7bfb      	ldrb	r3, [r7, #15]
   1097e:	2b00      	cmp	r3, #0
   10980:	bf14      	ite	ne
   10982:	2301      	movne	r3, #1
   10984:	2300      	moveq	r3, #0
   10986:	b2db      	uxtb	r3, r3
}
   10988:	4618      	mov	r0, r3
   1098a:	3710      	adds	r7, #16
   1098c:	46bd      	mov	sp, r7
   1098e:	bd80      	pop	{r7, pc}
   10990:	000108d5 	.word	0x000108d5

00010994 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
   10994:	b480      	push	{r7}
   10996:	b085      	sub	sp, #20
   10998:	af00      	add	r7, sp, #0
   1099a:	6078      	str	r0, [r7, #4]
   1099c:	460b      	mov	r3, r1
   1099e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
   109a0:	687b      	ldr	r3, [r7, #4]
   109a2:	785b      	ldrb	r3, [r3, #1]
   109a4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
   109a6:	7bfb      	ldrb	r3, [r7, #15]
   109a8:	f023 030f 	bic.w	r3, r3, #15
   109ac:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
   109ae:	78fb      	ldrb	r3, [r7, #3]
   109b0:	f003 030f 	and.w	r3, r3, #15
   109b4:	b2da      	uxtb	r2, r3
   109b6:	7bfb      	ldrb	r3, [r7, #15]
   109b8:	4313      	orrs	r3, r2
   109ba:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
   109bc:	687b      	ldr	r3, [r7, #4]
   109be:	7bfa      	ldrb	r2, [r7, #15]
   109c0:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
   109c2:	bf00      	nop
   109c4:	3714      	adds	r7, #20
   109c6:	46bd      	mov	sp, r7
   109c8:	f85d 7b04 	ldr.w	r7, [sp], #4
   109cc:	4770      	bx	lr
	...

000109d0 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
   109d0:	b580      	push	{r7, lr}
   109d2:	b082      	sub	sp, #8
   109d4:	af00      	add	r7, sp, #0
   109d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
   109d8:	687b      	ldr	r3, [r7, #4]
   109da:	2b00      	cmp	r3, #0
   109dc:	d005      	beq.n	109ea <_wdt_init+0x1a>
   109de:	687b      	ldr	r3, [r7, #4]
   109e0:	681b      	ldr	r3, [r3, #0]
   109e2:	2b00      	cmp	r3, #0
   109e4:	d001      	beq.n	109ea <_wdt_init+0x1a>
   109e6:	2301      	movs	r3, #1
   109e8:	e000      	b.n	109ec <_wdt_init+0x1c>
   109ea:	2300      	movs	r3, #0
   109ec:	f003 0301 	and.w	r3, r3, #1
   109f0:	b2db      	uxtb	r3, r3
   109f2:	2250      	movs	r2, #80	; 0x50
   109f4:	4913      	ldr	r1, [pc, #76]	; (10a44 <_wdt_init+0x74>)
   109f6:	4618      	mov	r0, r3
   109f8:	4b13      	ldr	r3, [pc, #76]	; (10a48 <_wdt_init+0x78>)
   109fa:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
   109fc:	687b      	ldr	r3, [r7, #4]
   109fe:	681b      	ldr	r3, [r3, #0]
   10a00:	4618      	mov	r0, r3
   10a02:	4b12      	ldr	r3, [pc, #72]	; (10a4c <_wdt_init+0x7c>)
   10a04:	4798      	blx	r3
   10a06:	4603      	mov	r3, r0
   10a08:	2b00      	cmp	r3, #0
   10a0a:	d107      	bne.n	10a1c <_wdt_init+0x4c>
   10a0c:	687b      	ldr	r3, [r7, #4]
   10a0e:	681b      	ldr	r3, [r3, #0]
   10a10:	4618      	mov	r0, r3
   10a12:	4b0f      	ldr	r3, [pc, #60]	; (10a50 <_wdt_init+0x80>)
   10a14:	4798      	blx	r3
   10a16:	4603      	mov	r3, r0
   10a18:	2b00      	cmp	r3, #0
   10a1a:	d002      	beq.n	10a22 <_wdt_init+0x52>
		return ERR_DENIED;
   10a1c:	f06f 0310 	mvn.w	r3, #16
   10a20:	e00b      	b.n	10a3a <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
   10a22:	687b      	ldr	r3, [r7, #4]
   10a24:	681b      	ldr	r3, [r3, #0]
   10a26:	4618      	mov	r0, r3
   10a28:	4b0a      	ldr	r3, [pc, #40]	; (10a54 <_wdt_init+0x84>)
   10a2a:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
   10a2c:	687b      	ldr	r3, [r7, #4]
   10a2e:	681b      	ldr	r3, [r3, #0]
   10a30:	210b      	movs	r1, #11
   10a32:	4618      	mov	r0, r3
   10a34:	4b08      	ldr	r3, [pc, #32]	; (10a58 <_wdt_init+0x88>)
   10a36:	4798      	blx	r3
	}

	return ERR_NONE;
   10a38:	2300      	movs	r3, #0
}
   10a3a:	4618      	mov	r0, r3
   10a3c:	3708      	adds	r7, #8
   10a3e:	46bd      	mov	sp, r7
   10a40:	bd80      	pop	{r7, pc}
   10a42:	bf00      	nop
   10a44:	000140d4 	.word	0x000140d4
   10a48:	000094ed 	.word	0x000094ed
   10a4c:	00010961 	.word	0x00010961
   10a50:	000108f9 	.word	0x000108f9
   10a54:	00010935 	.word	0x00010935
   10a58:	00010995 	.word	0x00010995

00010a5c <hri_port_set_DIR_reg>:
{
   10a5c:	b480      	push	{r7}
   10a5e:	b085      	sub	sp, #20
   10a60:	af00      	add	r7, sp, #0
   10a62:	60f8      	str	r0, [r7, #12]
   10a64:	460b      	mov	r3, r1
   10a66:	607a      	str	r2, [r7, #4]
   10a68:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
   10a6a:	7afb      	ldrb	r3, [r7, #11]
   10a6c:	68fa      	ldr	r2, [r7, #12]
   10a6e:	01db      	lsls	r3, r3, #7
   10a70:	4413      	add	r3, r2
   10a72:	3308      	adds	r3, #8
   10a74:	687a      	ldr	r2, [r7, #4]
   10a76:	601a      	str	r2, [r3, #0]
}
   10a78:	bf00      	nop
   10a7a:	3714      	adds	r7, #20
   10a7c:	46bd      	mov	sp, r7
   10a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
   10a82:	4770      	bx	lr

00010a84 <hri_port_clear_DIR_reg>:
{
   10a84:	b480      	push	{r7}
   10a86:	b085      	sub	sp, #20
   10a88:	af00      	add	r7, sp, #0
   10a8a:	60f8      	str	r0, [r7, #12]
   10a8c:	460b      	mov	r3, r1
   10a8e:	607a      	str	r2, [r7, #4]
   10a90:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
   10a92:	7afb      	ldrb	r3, [r7, #11]
   10a94:	68fa      	ldr	r2, [r7, #12]
   10a96:	01db      	lsls	r3, r3, #7
   10a98:	4413      	add	r3, r2
   10a9a:	3304      	adds	r3, #4
   10a9c:	687a      	ldr	r2, [r7, #4]
   10a9e:	601a      	str	r2, [r3, #0]
}
   10aa0:	bf00      	nop
   10aa2:	3714      	adds	r7, #20
   10aa4:	46bd      	mov	sp, r7
   10aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
   10aaa:	4770      	bx	lr

00010aac <hri_port_set_OUT_reg>:
{
   10aac:	b480      	push	{r7}
   10aae:	b085      	sub	sp, #20
   10ab0:	af00      	add	r7, sp, #0
   10ab2:	60f8      	str	r0, [r7, #12]
   10ab4:	460b      	mov	r3, r1
   10ab6:	607a      	str	r2, [r7, #4]
   10ab8:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   10aba:	7afb      	ldrb	r3, [r7, #11]
   10abc:	68fa      	ldr	r2, [r7, #12]
   10abe:	01db      	lsls	r3, r3, #7
   10ac0:	4413      	add	r3, r2
   10ac2:	3318      	adds	r3, #24
   10ac4:	687a      	ldr	r2, [r7, #4]
   10ac6:	601a      	str	r2, [r3, #0]
}
   10ac8:	bf00      	nop
   10aca:	3714      	adds	r7, #20
   10acc:	46bd      	mov	sp, r7
   10ace:	f85d 7b04 	ldr.w	r7, [sp], #4
   10ad2:	4770      	bx	lr

00010ad4 <hri_port_clear_OUT_reg>:
{
   10ad4:	b480      	push	{r7}
   10ad6:	b085      	sub	sp, #20
   10ad8:	af00      	add	r7, sp, #0
   10ada:	60f8      	str	r0, [r7, #12]
   10adc:	460b      	mov	r3, r1
   10ade:	607a      	str	r2, [r7, #4]
   10ae0:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   10ae2:	7afb      	ldrb	r3, [r7, #11]
   10ae4:	68fa      	ldr	r2, [r7, #12]
   10ae6:	01db      	lsls	r3, r3, #7
   10ae8:	4413      	add	r3, r2
   10aea:	3314      	adds	r3, #20
   10aec:	687a      	ldr	r2, [r7, #4]
   10aee:	601a      	str	r2, [r3, #0]
}
   10af0:	bf00      	nop
   10af2:	3714      	adds	r7, #20
   10af4:	46bd      	mov	sp, r7
   10af6:	f85d 7b04 	ldr.w	r7, [sp], #4
   10afa:	4770      	bx	lr

00010afc <hri_port_write_PMUX_PMUXE_bf>:
{
   10afc:	b480      	push	{r7}
   10afe:	b085      	sub	sp, #20
   10b00:	af00      	add	r7, sp, #0
   10b02:	6078      	str	r0, [r7, #4]
   10b04:	4608      	mov	r0, r1
   10b06:	4611      	mov	r1, r2
   10b08:	461a      	mov	r2, r3
   10b0a:	4603      	mov	r3, r0
   10b0c:	70fb      	strb	r3, [r7, #3]
   10b0e:	460b      	mov	r3, r1
   10b10:	70bb      	strb	r3, [r7, #2]
   10b12:	4613      	mov	r3, r2
   10b14:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   10b16:	78fa      	ldrb	r2, [r7, #3]
   10b18:	78bb      	ldrb	r3, [r7, #2]
   10b1a:	6879      	ldr	r1, [r7, #4]
   10b1c:	01d2      	lsls	r2, r2, #7
   10b1e:	440a      	add	r2, r1
   10b20:	4413      	add	r3, r2
   10b22:	3330      	adds	r3, #48	; 0x30
   10b24:	781b      	ldrb	r3, [r3, #0]
   10b26:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
   10b28:	7bfb      	ldrb	r3, [r7, #15]
   10b2a:	f023 030f 	bic.w	r3, r3, #15
   10b2e:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
   10b30:	787b      	ldrb	r3, [r7, #1]
   10b32:	f003 030f 	and.w	r3, r3, #15
   10b36:	b2da      	uxtb	r2, r3
   10b38:	7bfb      	ldrb	r3, [r7, #15]
   10b3a:	4313      	orrs	r3, r2
   10b3c:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   10b3e:	78fa      	ldrb	r2, [r7, #3]
   10b40:	78bb      	ldrb	r3, [r7, #2]
   10b42:	6879      	ldr	r1, [r7, #4]
   10b44:	01d2      	lsls	r2, r2, #7
   10b46:	440a      	add	r2, r1
   10b48:	4413      	add	r3, r2
   10b4a:	3330      	adds	r3, #48	; 0x30
   10b4c:	7bfa      	ldrb	r2, [r7, #15]
   10b4e:	701a      	strb	r2, [r3, #0]
}
   10b50:	bf00      	nop
   10b52:	3714      	adds	r7, #20
   10b54:	46bd      	mov	sp, r7
   10b56:	f85d 7b04 	ldr.w	r7, [sp], #4
   10b5a:	4770      	bx	lr

00010b5c <hri_port_write_PMUX_PMUXO_bf>:
{
   10b5c:	b480      	push	{r7}
   10b5e:	b085      	sub	sp, #20
   10b60:	af00      	add	r7, sp, #0
   10b62:	6078      	str	r0, [r7, #4]
   10b64:	4608      	mov	r0, r1
   10b66:	4611      	mov	r1, r2
   10b68:	461a      	mov	r2, r3
   10b6a:	4603      	mov	r3, r0
   10b6c:	70fb      	strb	r3, [r7, #3]
   10b6e:	460b      	mov	r3, r1
   10b70:	70bb      	strb	r3, [r7, #2]
   10b72:	4613      	mov	r3, r2
   10b74:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   10b76:	78fa      	ldrb	r2, [r7, #3]
   10b78:	78bb      	ldrb	r3, [r7, #2]
   10b7a:	6879      	ldr	r1, [r7, #4]
   10b7c:	01d2      	lsls	r2, r2, #7
   10b7e:	440a      	add	r2, r1
   10b80:	4413      	add	r3, r2
   10b82:	3330      	adds	r3, #48	; 0x30
   10b84:	781b      	ldrb	r3, [r3, #0]
   10b86:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
   10b88:	7bfb      	ldrb	r3, [r7, #15]
   10b8a:	f003 030f 	and.w	r3, r3, #15
   10b8e:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
   10b90:	787b      	ldrb	r3, [r7, #1]
   10b92:	011b      	lsls	r3, r3, #4
   10b94:	b2da      	uxtb	r2, r3
   10b96:	7bfb      	ldrb	r3, [r7, #15]
   10b98:	4313      	orrs	r3, r2
   10b9a:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   10b9c:	78fa      	ldrb	r2, [r7, #3]
   10b9e:	78bb      	ldrb	r3, [r7, #2]
   10ba0:	6879      	ldr	r1, [r7, #4]
   10ba2:	01d2      	lsls	r2, r2, #7
   10ba4:	440a      	add	r2, r1
   10ba6:	4413      	add	r3, r2
   10ba8:	3330      	adds	r3, #48	; 0x30
   10baa:	7bfa      	ldrb	r2, [r7, #15]
   10bac:	701a      	strb	r2, [r3, #0]
}
   10bae:	bf00      	nop
   10bb0:	3714      	adds	r7, #20
   10bb2:	46bd      	mov	sp, r7
   10bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
   10bb8:	4770      	bx	lr

00010bba <hri_port_write_PINCFG_PMUXEN_bit>:
{
   10bba:	b480      	push	{r7}
   10bbc:	b085      	sub	sp, #20
   10bbe:	af00      	add	r7, sp, #0
   10bc0:	6078      	str	r0, [r7, #4]
   10bc2:	4608      	mov	r0, r1
   10bc4:	4611      	mov	r1, r2
   10bc6:	461a      	mov	r2, r3
   10bc8:	4603      	mov	r3, r0
   10bca:	70fb      	strb	r3, [r7, #3]
   10bcc:	460b      	mov	r3, r1
   10bce:	70bb      	strb	r3, [r7, #2]
   10bd0:	4613      	mov	r3, r2
   10bd2:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
   10bd4:	78fa      	ldrb	r2, [r7, #3]
   10bd6:	78bb      	ldrb	r3, [r7, #2]
   10bd8:	6879      	ldr	r1, [r7, #4]
   10bda:	01d2      	lsls	r2, r2, #7
   10bdc:	440a      	add	r2, r1
   10bde:	4413      	add	r3, r2
   10be0:	3340      	adds	r3, #64	; 0x40
   10be2:	781b      	ldrb	r3, [r3, #0]
   10be4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
   10be6:	7bfb      	ldrb	r3, [r7, #15]
   10be8:	f023 0301 	bic.w	r3, r3, #1
   10bec:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
   10bee:	787a      	ldrb	r2, [r7, #1]
   10bf0:	7bfb      	ldrb	r3, [r7, #15]
   10bf2:	4313      	orrs	r3, r2
   10bf4:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
   10bf6:	78fa      	ldrb	r2, [r7, #3]
   10bf8:	78bb      	ldrb	r3, [r7, #2]
   10bfa:	6879      	ldr	r1, [r7, #4]
   10bfc:	01d2      	lsls	r2, r2, #7
   10bfe:	440a      	add	r2, r1
   10c00:	4413      	add	r3, r2
   10c02:	3340      	adds	r3, #64	; 0x40
   10c04:	7bfa      	ldrb	r2, [r7, #15]
   10c06:	701a      	strb	r2, [r3, #0]
}
   10c08:	bf00      	nop
   10c0a:	3714      	adds	r7, #20
   10c0c:	46bd      	mov	sp, r7
   10c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
   10c12:	4770      	bx	lr

00010c14 <hri_port_write_WRCONFIG_reg>:
{
   10c14:	b480      	push	{r7}
   10c16:	b085      	sub	sp, #20
   10c18:	af00      	add	r7, sp, #0
   10c1a:	60f8      	str	r0, [r7, #12]
   10c1c:	460b      	mov	r3, r1
   10c1e:	607a      	str	r2, [r7, #4]
   10c20:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
   10c22:	7afb      	ldrb	r3, [r7, #11]
   10c24:	68fa      	ldr	r2, [r7, #12]
   10c26:	01db      	lsls	r3, r3, #7
   10c28:	4413      	add	r3, r2
   10c2a:	3328      	adds	r3, #40	; 0x28
   10c2c:	687a      	ldr	r2, [r7, #4]
   10c2e:	601a      	str	r2, [r3, #0]
}
   10c30:	bf00      	nop
   10c32:	3714      	adds	r7, #20
   10c34:	46bd      	mov	sp, r7
   10c36:	f85d 7b04 	ldr.w	r7, [sp], #4
   10c3a:	4770      	bx	lr

00010c3c <_gpio_set_direction>:
{
   10c3c:	b580      	push	{r7, lr}
   10c3e:	b082      	sub	sp, #8
   10c40:	af00      	add	r7, sp, #0
   10c42:	4603      	mov	r3, r0
   10c44:	6039      	str	r1, [r7, #0]
   10c46:	71fb      	strb	r3, [r7, #7]
   10c48:	4613      	mov	r3, r2
   10c4a:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
   10c4c:	79bb      	ldrb	r3, [r7, #6]
   10c4e:	2b01      	cmp	r3, #1
   10c50:	d01c      	beq.n	10c8c <_gpio_set_direction+0x50>
   10c52:	2b02      	cmp	r3, #2
   10c54:	d037      	beq.n	10cc6 <_gpio_set_direction+0x8a>
   10c56:	2b00      	cmp	r3, #0
   10c58:	d14e      	bne.n	10cf8 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
   10c5a:	79fb      	ldrb	r3, [r7, #7]
   10c5c:	683a      	ldr	r2, [r7, #0]
   10c5e:	4619      	mov	r1, r3
   10c60:	482a      	ldr	r0, [pc, #168]	; (10d0c <_gpio_set_direction+0xd0>)
   10c62:	4b2b      	ldr	r3, [pc, #172]	; (10d10 <_gpio_set_direction+0xd4>)
   10c64:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   10c66:	683b      	ldr	r3, [r7, #0]
   10c68:	b29b      	uxth	r3, r3
   10c6a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   10c6e:	79fb      	ldrb	r3, [r7, #7]
   10c70:	4619      	mov	r1, r3
   10c72:	4826      	ldr	r0, [pc, #152]	; (10d0c <_gpio_set_direction+0xd0>)
   10c74:	4b27      	ldr	r3, [pc, #156]	; (10d14 <_gpio_set_direction+0xd8>)
   10c76:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   10c78:	683b      	ldr	r3, [r7, #0]
   10c7a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   10c7c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
   10c80:	79fb      	ldrb	r3, [r7, #7]
   10c82:	4619      	mov	r1, r3
   10c84:	4821      	ldr	r0, [pc, #132]	; (10d0c <_gpio_set_direction+0xd0>)
   10c86:	4b23      	ldr	r3, [pc, #140]	; (10d14 <_gpio_set_direction+0xd8>)
   10c88:	4798      	blx	r3
		break;
   10c8a:	e03a      	b.n	10d02 <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
   10c8c:	79fb      	ldrb	r3, [r7, #7]
   10c8e:	683a      	ldr	r2, [r7, #0]
   10c90:	4619      	mov	r1, r3
   10c92:	481e      	ldr	r0, [pc, #120]	; (10d0c <_gpio_set_direction+0xd0>)
   10c94:	4b1e      	ldr	r3, [pc, #120]	; (10d10 <_gpio_set_direction+0xd4>)
   10c96:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
   10c98:	683b      	ldr	r3, [r7, #0]
   10c9a:	b29b      	uxth	r3, r3
   10c9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   10ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   10ca4:	79f9      	ldrb	r1, [r7, #7]
   10ca6:	461a      	mov	r2, r3
   10ca8:	4818      	ldr	r0, [pc, #96]	; (10d0c <_gpio_set_direction+0xd0>)
   10caa:	4b1a      	ldr	r3, [pc, #104]	; (10d14 <_gpio_set_direction+0xd8>)
   10cac:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
   10cae:	683b      	ldr	r3, [r7, #0]
   10cb0:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
   10cb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   10cb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   10cba:	79f9      	ldrb	r1, [r7, #7]
   10cbc:	461a      	mov	r2, r3
   10cbe:	4813      	ldr	r0, [pc, #76]	; (10d0c <_gpio_set_direction+0xd0>)
   10cc0:	4b14      	ldr	r3, [pc, #80]	; (10d14 <_gpio_set_direction+0xd8>)
   10cc2:	4798      	blx	r3
		break;
   10cc4:	e01d      	b.n	10d02 <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
   10cc6:	79fb      	ldrb	r3, [r7, #7]
   10cc8:	683a      	ldr	r2, [r7, #0]
   10cca:	4619      	mov	r1, r3
   10ccc:	480f      	ldr	r0, [pc, #60]	; (10d0c <_gpio_set_direction+0xd0>)
   10cce:	4b12      	ldr	r3, [pc, #72]	; (10d18 <_gpio_set_direction+0xdc>)
   10cd0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   10cd2:	683b      	ldr	r3, [r7, #0]
   10cd4:	b29b      	uxth	r3, r3
   10cd6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   10cda:	79fb      	ldrb	r3, [r7, #7]
   10cdc:	4619      	mov	r1, r3
   10cde:	480b      	ldr	r0, [pc, #44]	; (10d0c <_gpio_set_direction+0xd0>)
   10ce0:	4b0c      	ldr	r3, [pc, #48]	; (10d14 <_gpio_set_direction+0xd8>)
   10ce2:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   10ce4:	683b      	ldr	r3, [r7, #0]
   10ce6:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   10ce8:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
   10cec:	79fb      	ldrb	r3, [r7, #7]
   10cee:	4619      	mov	r1, r3
   10cf0:	4806      	ldr	r0, [pc, #24]	; (10d0c <_gpio_set_direction+0xd0>)
   10cf2:	4b08      	ldr	r3, [pc, #32]	; (10d14 <_gpio_set_direction+0xd8>)
   10cf4:	4798      	blx	r3
		break;
   10cf6:	e004      	b.n	10d02 <_gpio_set_direction+0xc6>
		ASSERT(false);
   10cf8:	2246      	movs	r2, #70	; 0x46
   10cfa:	4908      	ldr	r1, [pc, #32]	; (10d1c <_gpio_set_direction+0xe0>)
   10cfc:	2000      	movs	r0, #0
   10cfe:	4b08      	ldr	r3, [pc, #32]	; (10d20 <_gpio_set_direction+0xe4>)
   10d00:	4798      	blx	r3
}
   10d02:	bf00      	nop
   10d04:	3708      	adds	r7, #8
   10d06:	46bd      	mov	sp, r7
   10d08:	bd80      	pop	{r7, pc}
   10d0a:	bf00      	nop
   10d0c:	41008000 	.word	0x41008000
   10d10:	00010a85 	.word	0x00010a85
   10d14:	00010c15 	.word	0x00010c15
   10d18:	00010a5d 	.word	0x00010a5d
   10d1c:	000140ec 	.word	0x000140ec
   10d20:	000094ed 	.word	0x000094ed

00010d24 <_gpio_set_level>:
{
   10d24:	b580      	push	{r7, lr}
   10d26:	b082      	sub	sp, #8
   10d28:	af00      	add	r7, sp, #0
   10d2a:	4603      	mov	r3, r0
   10d2c:	6039      	str	r1, [r7, #0]
   10d2e:	71fb      	strb	r3, [r7, #7]
   10d30:	4613      	mov	r3, r2
   10d32:	71bb      	strb	r3, [r7, #6]
	if (level) {
   10d34:	79bb      	ldrb	r3, [r7, #6]
   10d36:	2b00      	cmp	r3, #0
   10d38:	d006      	beq.n	10d48 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   10d3a:	79fb      	ldrb	r3, [r7, #7]
   10d3c:	683a      	ldr	r2, [r7, #0]
   10d3e:	4619      	mov	r1, r3
   10d40:	4806      	ldr	r0, [pc, #24]	; (10d5c <_gpio_set_level+0x38>)
   10d42:	4b07      	ldr	r3, [pc, #28]	; (10d60 <_gpio_set_level+0x3c>)
   10d44:	4798      	blx	r3
}
   10d46:	e005      	b.n	10d54 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   10d48:	79fb      	ldrb	r3, [r7, #7]
   10d4a:	683a      	ldr	r2, [r7, #0]
   10d4c:	4619      	mov	r1, r3
   10d4e:	4803      	ldr	r0, [pc, #12]	; (10d5c <_gpio_set_level+0x38>)
   10d50:	4b04      	ldr	r3, [pc, #16]	; (10d64 <_gpio_set_level+0x40>)
   10d52:	4798      	blx	r3
}
   10d54:	bf00      	nop
   10d56:	3708      	adds	r7, #8
   10d58:	46bd      	mov	sp, r7
   10d5a:	bd80      	pop	{r7, pc}
   10d5c:	41008000 	.word	0x41008000
   10d60:	00010aad 	.word	0x00010aad
   10d64:	00010ad5 	.word	0x00010ad5

00010d68 <_gpio_set_pin_function>:
{
   10d68:	b590      	push	{r4, r7, lr}
   10d6a:	b085      	sub	sp, #20
   10d6c:	af00      	add	r7, sp, #0
   10d6e:	6078      	str	r0, [r7, #4]
   10d70:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
   10d72:	687b      	ldr	r3, [r7, #4]
   10d74:	095b      	lsrs	r3, r3, #5
   10d76:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
   10d78:	687b      	ldr	r3, [r7, #4]
   10d7a:	b2db      	uxtb	r3, r3
   10d7c:	f003 031f 	and.w	r3, r3, #31
   10d80:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
   10d82:	683b      	ldr	r3, [r7, #0]
   10d84:	f1b3 3fff 	cmp.w	r3, #4294967295
   10d88:	d106      	bne.n	10d98 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
   10d8a:	7bba      	ldrb	r2, [r7, #14]
   10d8c:	7bf9      	ldrb	r1, [r7, #15]
   10d8e:	2300      	movs	r3, #0
   10d90:	4812      	ldr	r0, [pc, #72]	; (10ddc <_gpio_set_pin_function+0x74>)
   10d92:	4c13      	ldr	r4, [pc, #76]	; (10de0 <_gpio_set_pin_function+0x78>)
   10d94:	47a0      	blx	r4
}
   10d96:	e01d      	b.n	10dd4 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
   10d98:	7bba      	ldrb	r2, [r7, #14]
   10d9a:	7bf9      	ldrb	r1, [r7, #15]
   10d9c:	2301      	movs	r3, #1
   10d9e:	480f      	ldr	r0, [pc, #60]	; (10ddc <_gpio_set_pin_function+0x74>)
   10da0:	4c0f      	ldr	r4, [pc, #60]	; (10de0 <_gpio_set_pin_function+0x78>)
   10da2:	47a0      	blx	r4
		if (pin & 1) {
   10da4:	7bbb      	ldrb	r3, [r7, #14]
   10da6:	f003 0301 	and.w	r3, r3, #1
   10daa:	2b00      	cmp	r3, #0
   10dac:	d009      	beq.n	10dc2 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
   10dae:	7bbb      	ldrb	r3, [r7, #14]
   10db0:	085b      	lsrs	r3, r3, #1
   10db2:	b2da      	uxtb	r2, r3
   10db4:	683b      	ldr	r3, [r7, #0]
   10db6:	b2db      	uxtb	r3, r3
   10db8:	7bf9      	ldrb	r1, [r7, #15]
   10dba:	4808      	ldr	r0, [pc, #32]	; (10ddc <_gpio_set_pin_function+0x74>)
   10dbc:	4c09      	ldr	r4, [pc, #36]	; (10de4 <_gpio_set_pin_function+0x7c>)
   10dbe:	47a0      	blx	r4
}
   10dc0:	e008      	b.n	10dd4 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
   10dc2:	7bbb      	ldrb	r3, [r7, #14]
   10dc4:	085b      	lsrs	r3, r3, #1
   10dc6:	b2da      	uxtb	r2, r3
   10dc8:	683b      	ldr	r3, [r7, #0]
   10dca:	b2db      	uxtb	r3, r3
   10dcc:	7bf9      	ldrb	r1, [r7, #15]
   10dce:	4803      	ldr	r0, [pc, #12]	; (10ddc <_gpio_set_pin_function+0x74>)
   10dd0:	4c05      	ldr	r4, [pc, #20]	; (10de8 <_gpio_set_pin_function+0x80>)
   10dd2:	47a0      	blx	r4
}
   10dd4:	bf00      	nop
   10dd6:	3714      	adds	r7, #20
   10dd8:	46bd      	mov	sp, r7
   10dda:	bd90      	pop	{r4, r7, pc}
   10ddc:	41008000 	.word	0x41008000
   10de0:	00010bbb 	.word	0x00010bbb
   10de4:	00010b5d 	.word	0x00010b5d
   10de8:	00010afd 	.word	0x00010afd

00010dec <gpio_set_pin_function>:
{
   10dec:	b580      	push	{r7, lr}
   10dee:	b082      	sub	sp, #8
   10df0:	af00      	add	r7, sp, #0
   10df2:	6078      	str	r0, [r7, #4]
   10df4:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
   10df6:	6839      	ldr	r1, [r7, #0]
   10df8:	6878      	ldr	r0, [r7, #4]
   10dfa:	4b03      	ldr	r3, [pc, #12]	; (10e08 <gpio_set_pin_function+0x1c>)
   10dfc:	4798      	blx	r3
}
   10dfe:	bf00      	nop
   10e00:	3708      	adds	r7, #8
   10e02:	46bd      	mov	sp, r7
   10e04:	bd80      	pop	{r7, pc}
   10e06:	bf00      	nop
   10e08:	00010d69 	.word	0x00010d69

00010e0c <gpio_set_pin_direction>:
{
   10e0c:	b580      	push	{r7, lr}
   10e0e:	b082      	sub	sp, #8
   10e10:	af00      	add	r7, sp, #0
   10e12:	4603      	mov	r3, r0
   10e14:	460a      	mov	r2, r1
   10e16:	71fb      	strb	r3, [r7, #7]
   10e18:	4613      	mov	r3, r2
   10e1a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
   10e1c:	79fb      	ldrb	r3, [r7, #7]
   10e1e:	095b      	lsrs	r3, r3, #5
   10e20:	b2d8      	uxtb	r0, r3
   10e22:	79fb      	ldrb	r3, [r7, #7]
   10e24:	f003 031f 	and.w	r3, r3, #31
   10e28:	2201      	movs	r2, #1
   10e2a:	fa02 f303 	lsl.w	r3, r2, r3
   10e2e:	79ba      	ldrb	r2, [r7, #6]
   10e30:	4619      	mov	r1, r3
   10e32:	4b03      	ldr	r3, [pc, #12]	; (10e40 <gpio_set_pin_direction+0x34>)
   10e34:	4798      	blx	r3
}
   10e36:	bf00      	nop
   10e38:	3708      	adds	r7, #8
   10e3a:	46bd      	mov	sp, r7
   10e3c:	bd80      	pop	{r7, pc}
   10e3e:	bf00      	nop
   10e40:	00010c3d 	.word	0x00010c3d

00010e44 <gpio_set_pin_level>:
{
   10e44:	b580      	push	{r7, lr}
   10e46:	b082      	sub	sp, #8
   10e48:	af00      	add	r7, sp, #0
   10e4a:	4603      	mov	r3, r0
   10e4c:	460a      	mov	r2, r1
   10e4e:	71fb      	strb	r3, [r7, #7]
   10e50:	4613      	mov	r3, r2
   10e52:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   10e54:	79fb      	ldrb	r3, [r7, #7]
   10e56:	095b      	lsrs	r3, r3, #5
   10e58:	b2d8      	uxtb	r0, r3
   10e5a:	79fb      	ldrb	r3, [r7, #7]
   10e5c:	f003 031f 	and.w	r3, r3, #31
   10e60:	2201      	movs	r2, #1
   10e62:	fa02 f303 	lsl.w	r3, r2, r3
   10e66:	79ba      	ldrb	r2, [r7, #6]
   10e68:	4619      	mov	r1, r3
   10e6a:	4b03      	ldr	r3, [pc, #12]	; (10e78 <gpio_set_pin_level+0x34>)
   10e6c:	4798      	blx	r3
}
   10e6e:	bf00      	nop
   10e70:	3708      	adds	r7, #8
   10e72:	46bd      	mov	sp, r7
   10e74:	bd80      	pop	{r7, pc}
   10e76:	bf00      	nop
   10e78:	00010d25 	.word	0x00010d25

00010e7c <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
   10e7c:	b580      	push	{r7, lr}
   10e7e:	b082      	sub	sp, #8
   10e80:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
   10e82:	2100      	movs	r1, #0
   10e84:	2008      	movs	r0, #8
   10e86:	4b24      	ldr	r3, [pc, #144]	; (10f18 <QSPI_N25Q256_exit_xip+0x9c>)
   10e88:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
   10e8a:	2100      	movs	r1, #0
   10e8c:	202b      	movs	r0, #43	; 0x2b
   10e8e:	4b22      	ldr	r3, [pc, #136]	; (10f18 <QSPI_N25Q256_exit_xip+0x9c>)
   10e90:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
   10e92:	2100      	movs	r1, #0
   10e94:	202a      	movs	r0, #42	; 0x2a
   10e96:	4b20      	ldr	r3, [pc, #128]	; (10f18 <QSPI_N25Q256_exit_xip+0x9c>)
   10e98:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
   10e9a:	2102      	movs	r1, #2
   10e9c:	2008      	movs	r0, #8
   10e9e:	4b1f      	ldr	r3, [pc, #124]	; (10f1c <QSPI_N25Q256_exit_xip+0xa0>)
   10ea0:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
   10ea2:	2102      	movs	r1, #2
   10ea4:	202b      	movs	r0, #43	; 0x2b
   10ea6:	4b1d      	ldr	r3, [pc, #116]	; (10f1c <QSPI_N25Q256_exit_xip+0xa0>)
   10ea8:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
   10eaa:	2102      	movs	r1, #2
   10eac:	202a      	movs	r0, #42	; 0x2a
   10eae:	4b1b      	ldr	r3, [pc, #108]	; (10f1c <QSPI_N25Q256_exit_xip+0xa0>)
   10eb0:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
   10eb2:	2101      	movs	r1, #1
   10eb4:	2008      	movs	r0, #8
   10eb6:	4b1a      	ldr	r3, [pc, #104]	; (10f20 <QSPI_N25Q256_exit_xip+0xa4>)
   10eb8:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
   10eba:	2100      	movs	r1, #0
   10ebc:	202b      	movs	r0, #43	; 0x2b
   10ebe:	4b18      	ldr	r3, [pc, #96]	; (10f20 <QSPI_N25Q256_exit_xip+0xa4>)
   10ec0:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
   10ec2:	2100      	movs	r1, #0
   10ec4:	202a      	movs	r0, #42	; 0x2a
   10ec6:	4b16      	ldr	r3, [pc, #88]	; (10f20 <QSPI_N25Q256_exit_xip+0xa4>)
   10ec8:	4798      	blx	r3

	delay_us(1);
   10eca:	2001      	movs	r0, #1
   10ecc:	4b15      	ldr	r3, [pc, #84]	; (10f24 <QSPI_N25Q256_exit_xip+0xa8>)
   10ece:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
   10ed0:	2300      	movs	r3, #0
   10ed2:	607b      	str	r3, [r7, #4]
   10ed4:	e010      	b.n	10ef8 <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
   10ed6:	2101      	movs	r1, #1
   10ed8:	202a      	movs	r0, #42	; 0x2a
   10eda:	4b11      	ldr	r3, [pc, #68]	; (10f20 <QSPI_N25Q256_exit_xip+0xa4>)
   10edc:	4798      	blx	r3
		delay_us(1);
   10ede:	2001      	movs	r0, #1
   10ee0:	4b10      	ldr	r3, [pc, #64]	; (10f24 <QSPI_N25Q256_exit_xip+0xa8>)
   10ee2:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
   10ee4:	2100      	movs	r1, #0
   10ee6:	202a      	movs	r0, #42	; 0x2a
   10ee8:	4b0d      	ldr	r3, [pc, #52]	; (10f20 <QSPI_N25Q256_exit_xip+0xa4>)
   10eea:	4798      	blx	r3
		delay_us(1);
   10eec:	2001      	movs	r0, #1
   10eee:	4b0d      	ldr	r3, [pc, #52]	; (10f24 <QSPI_N25Q256_exit_xip+0xa8>)
   10ef0:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
   10ef2:	687b      	ldr	r3, [r7, #4]
   10ef4:	3301      	adds	r3, #1
   10ef6:	607b      	str	r3, [r7, #4]
   10ef8:	687b      	ldr	r3, [r7, #4]
   10efa:	2b06      	cmp	r3, #6
   10efc:	ddeb      	ble.n	10ed6 <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
   10efe:	2101      	movs	r1, #1
   10f00:	202b      	movs	r0, #43	; 0x2b
   10f02:	4b07      	ldr	r3, [pc, #28]	; (10f20 <QSPI_N25Q256_exit_xip+0xa4>)
   10f04:	4798      	blx	r3
	delay_us(1);
   10f06:	2001      	movs	r0, #1
   10f08:	4b06      	ldr	r3, [pc, #24]	; (10f24 <QSPI_N25Q256_exit_xip+0xa8>)
   10f0a:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
   10f0c:	4b06      	ldr	r3, [pc, #24]	; (10f28 <QSPI_N25Q256_exit_xip+0xac>)
   10f0e:	4798      	blx	r3
}
   10f10:	bf00      	nop
   10f12:	3708      	adds	r7, #8
   10f14:	46bd      	mov	sp, r7
   10f16:	bd80      	pop	{r7, pc}
   10f18:	00010ded 	.word	0x00010ded
   10f1c:	00010e0d 	.word	0x00010e0d
   10f20:	00010e45 	.word	0x00010e45
   10f24:	00007fad 	.word	0x00007fad
   10f28:	0000737d 	.word	0x0000737d

00010f2c <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
   10f2c:	b598      	push	{r3, r4, r7, lr}
   10f2e:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
   10f30:	4806      	ldr	r0, [pc, #24]	; (10f4c <spi_nor_flash_init+0x20>)
   10f32:	4b07      	ldr	r3, [pc, #28]	; (10f50 <spi_nor_flash_init+0x24>)
   10f34:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
   10f36:	2300      	movs	r3, #0
   10f38:	4a06      	ldr	r2, [pc, #24]	; (10f54 <spi_nor_flash_init+0x28>)
   10f3a:	4904      	ldr	r1, [pc, #16]	; (10f4c <spi_nor_flash_init+0x20>)
   10f3c:	4806      	ldr	r0, [pc, #24]	; (10f58 <spi_nor_flash_init+0x2c>)
   10f3e:	4c07      	ldr	r4, [pc, #28]	; (10f5c <spi_nor_flash_init+0x30>)
   10f40:	47a0      	blx	r4
   10f42:	4602      	mov	r2, r0
   10f44:	4b06      	ldr	r3, [pc, #24]	; (10f60 <spi_nor_flash_init+0x34>)
   10f46:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
   10f48:	bf00      	nop
   10f4a:	bd98      	pop	{r3, r4, r7, pc}
   10f4c:	20001ab8 	.word	0x20001ab8
   10f50:	000083c1 	.word	0x000083c1
   10f54:	00010e7d 	.word	0x00010e7d
   10f58:	20001984 	.word	0x20001984
   10f5c:	00011399 	.word	0x00011399
   10f60:	20001ca8 	.word	0x20001ca8

00010f64 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
   10f64:	b580      	push	{r7, lr}
   10f66:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
   10f68:	4805      	ldr	r0, [pc, #20]	; (10f80 <cdc_device_acm_init+0x1c>)
   10f6a:	4b06      	ldr	r3, [pc, #24]	; (10f84 <cdc_device_acm_init+0x20>)
   10f6c:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
   10f6e:	4b06      	ldr	r3, [pc, #24]	; (10f88 <cdc_device_acm_init+0x24>)
   10f70:	4798      	blx	r3

	usbdc_start(single_desc);
   10f72:	4806      	ldr	r0, [pc, #24]	; (10f8c <cdc_device_acm_init+0x28>)
   10f74:	4b06      	ldr	r3, [pc, #24]	; (10f90 <cdc_device_acm_init+0x2c>)
   10f76:	4798      	blx	r3
	usbdc_attach();
   10f78:	4b06      	ldr	r3, [pc, #24]	; (10f94 <cdc_device_acm_init+0x30>)
   10f7a:	4798      	blx	r3
}
   10f7c:	bf00      	nop
   10f7e:	bd80      	pop	{r7, pc}
   10f80:	200019d4 	.word	0x200019d4
   10f84:	00012985 	.word	0x00012985
   10f88:	00011d39 	.word	0x00011d39
   10f8c:	200004fc 	.word	0x200004fc
   10f90:	00012a21 	.word	0x00012a21
   10f94:	00012a71 	.word	0x00012a71

00010f98 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
   10f98:	b580      	push	{r7, lr}
   10f9a:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
   10f9c:	4b01      	ldr	r3, [pc, #4]	; (10fa4 <usb_init+0xc>)
   10f9e:	4798      	blx	r3
}
   10fa0:	bf00      	nop
   10fa2:	bd80      	pop	{r7, pc}
   10fa4:	00010f65 	.word	0x00010f65

00010fa8 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
   10fa8:	b480      	push	{r7}
   10faa:	b085      	sub	sp, #20
   10fac:	af00      	add	r7, sp, #0
   10fae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   10fb0:	f3ef 8310 	mrs	r3, PRIMASK
   10fb4:	60fb      	str	r3, [r7, #12]
  return(result);
   10fb6:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
   10fb8:	687b      	ldr	r3, [r7, #4]
   10fba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
   10fbc:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   10fbe:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
   10fc2:	bf00      	nop
   10fc4:	3714      	adds	r7, #20
   10fc6:	46bd      	mov	sp, r7
   10fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
   10fcc:	4770      	bx	lr

00010fce <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
   10fce:	b480      	push	{r7}
   10fd0:	b085      	sub	sp, #20
   10fd2:	af00      	add	r7, sp, #0
   10fd4:	6078      	str	r0, [r7, #4]
   10fd6:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
   10fda:	687b      	ldr	r3, [r7, #4]
   10fdc:	681b      	ldr	r3, [r3, #0]
   10fde:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   10fe0:	68fb      	ldr	r3, [r7, #12]
   10fe2:	f383 8810 	msr	PRIMASK, r3
}
   10fe6:	bf00      	nop
   10fe8:	3714      	adds	r7, #20
   10fea:	46bd      	mov	sp, r7
   10fec:	f85d 7b04 	ldr.w	r7, [sp], #4
   10ff0:	4770      	bx	lr
	...

00010ff4 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
   10ff4:	b580      	push	{r7, lr}
   10ff6:	b08c      	sub	sp, #48	; 0x30
   10ff8:	af00      	add	r7, sp, #0
   10ffa:	6078      	str	r0, [r7, #4]
   10ffc:	460b      	mov	r3, r1
   10ffe:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
   11000:	687b      	ldr	r3, [r7, #4]
   11002:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   11004:	687b      	ldr	r3, [r7, #4]
   11006:	681b      	ldr	r3, [r3, #0]
   11008:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
   1100a:	f107 030c 	add.w	r3, r7, #12
   1100e:	2200      	movs	r2, #0
   11010:	601a      	str	r2, [r3, #0]
   11012:	605a      	str	r2, [r3, #4]
   11014:	609a      	str	r2, [r3, #8]
   11016:	60da      	str	r2, [r3, #12]
   11018:	611a      	str	r2, [r3, #16]
   1101a:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
   1101c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1101e:	7b1b      	ldrb	r3, [r3, #12]
   11020:	2b00      	cmp	r3, #0
   11022:	d001      	beq.n	11028 <n25q256a_xip_confirm+0x34>
   11024:	2206      	movs	r2, #6
   11026:	e000      	b.n	1102a <n25q256a_xip_confirm+0x36>
   11028:	2200      	movs	r2, #0
	struct _qspi_command         cmd
   1102a:	7b3b      	ldrb	r3, [r7, #12]
   1102c:	f362 0302 	bfi	r3, r2, #0, #3
   11030:	733b      	strb	r3, [r7, #12]
   11032:	7b3b      	ldrb	r3, [r7, #12]
   11034:	f043 0310 	orr.w	r3, r3, #16
   11038:	733b      	strb	r3, [r7, #12]
   1103a:	7b3b      	ldrb	r3, [r7, #12]
   1103c:	f043 0320 	orr.w	r3, r3, #32
   11040:	733b      	strb	r3, [r7, #12]
   11042:	7b3b      	ldrb	r3, [r7, #12]
   11044:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11048:	733b      	strb	r3, [r7, #12]
   1104a:	7b3b      	ldrb	r3, [r7, #12]
   1104c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   11050:	733b      	strb	r3, [r7, #12]
   11052:	7b7b      	ldrb	r3, [r7, #13]
   11054:	f043 0303 	orr.w	r3, r3, #3
   11058:	737b      	strb	r3, [r7, #13]
   1105a:	7b7b      	ldrb	r3, [r7, #13]
   1105c:	2201      	movs	r2, #1
   1105e:	f362 1305 	bfi	r3, r2, #4, #2
   11062:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
   11064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11066:	7b1b      	ldrb	r3, [r3, #12]
   11068:	2b00      	cmp	r3, #0
   1106a:	d001      	beq.n	11070 <n25q256a_xip_confirm+0x7c>
   1106c:	2208      	movs	r2, #8
   1106e:	e000      	b.n	11072 <n25q256a_xip_confirm+0x7e>
   11070:	2200      	movs	r2, #0
	struct _qspi_command         cmd
   11072:	7bbb      	ldrb	r3, [r7, #14]
   11074:	f362 0304 	bfi	r3, r2, #0, #5
   11078:	73bb      	strb	r3, [r7, #14]
   1107a:	230b      	movs	r3, #11
   1107c:	743b      	strb	r3, [r7, #16]
   1107e:	78fb      	ldrb	r3, [r7, #3]
   11080:	2b00      	cmp	r3, #0
   11082:	d001      	beq.n	11088 <n25q256a_xip_confirm+0x94>
   11084:	2300      	movs	r3, #0
   11086:	e000      	b.n	1108a <n25q256a_xip_confirm+0x96>
   11088:	23ff      	movs	r3, #255	; 0xff
   1108a:	747b      	strb	r3, [r7, #17]
   1108c:	2301      	movs	r3, #1
   1108e:	61bb      	str	r3, [r7, #24]
   11090:	f107 0327 	add.w	r3, r7, #39	; 0x27
   11094:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
   11096:	f107 030c 	add.w	r3, r7, #12
   1109a:	4619      	mov	r1, r3
   1109c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1109e:	4b07      	ldr	r3, [pc, #28]	; (110bc <n25q256a_xip_confirm+0xc8>)
   110a0:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
   110a2:	78fb      	ldrb	r3, [r7, #3]
   110a4:	2b00      	cmp	r3, #0
   110a6:	d001      	beq.n	110ac <n25q256a_xip_confirm+0xb8>
   110a8:	2202      	movs	r2, #2
   110aa:	e000      	b.n	110ae <n25q256a_xip_confirm+0xba>
   110ac:	2201      	movs	r2, #1
   110ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   110b0:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
   110b2:	2300      	movs	r3, #0
}
   110b4:	4618      	mov	r0, r3
   110b6:	3730      	adds	r7, #48	; 0x30
   110b8:	46bd      	mov	sp, r7
   110ba:	bd80      	pop	{r7, pc}
   110bc:	00008439 	.word	0x00008439

000110c0 <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
   110c0:	b580      	push	{r7, lr}
   110c2:	b08c      	sub	sp, #48	; 0x30
   110c4:	af00      	add	r7, sp, #0
   110c6:	6078      	str	r0, [r7, #4]
   110c8:	460b      	mov	r3, r1
   110ca:	70fb      	strb	r3, [r7, #3]
   110cc:	4613      	mov	r3, r2
   110ce:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
   110d0:	2300      	movs	r3, #0
   110d2:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
   110d4:	687b      	ldr	r3, [r7, #4]
   110d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
   110d8:	687b      	ldr	r3, [r7, #4]
   110da:	681b      	ldr	r3, [r3, #0]
   110dc:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
   110de:	f107 030c 	add.w	r3, r7, #12
   110e2:	2200      	movs	r2, #0
   110e4:	601a      	str	r2, [r3, #0]
   110e6:	605a      	str	r2, [r3, #4]
   110e8:	609a      	str	r2, [r3, #8]
   110ea:	60da      	str	r2, [r3, #12]
   110ec:	611a      	str	r2, [r3, #16]
   110ee:	615a      	str	r2, [r3, #20]
   110f0:	78fb      	ldrb	r3, [r7, #3]
   110f2:	f003 0307 	and.w	r3, r3, #7
   110f6:	b2da      	uxtb	r2, r3
   110f8:	7b3b      	ldrb	r3, [r7, #12]
   110fa:	f362 0302 	bfi	r3, r2, #0, #3
   110fe:	733b      	strb	r3, [r7, #12]
   11100:	7b3b      	ldrb	r3, [r7, #12]
   11102:	f043 0310 	orr.w	r3, r3, #16
   11106:	733b      	strb	r3, [r7, #12]
   11108:	7b3b      	ldrb	r3, [r7, #12]
   1110a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1110e:	733b      	strb	r3, [r7, #12]
   11110:	78bb      	ldrb	r3, [r7, #2]
   11112:	743b      	strb	r3, [r7, #16]
   11114:	2301      	movs	r3, #1
   11116:	61bb      	str	r3, [r7, #24]
   11118:	f107 0324 	add.w	r3, r7, #36	; 0x24
   1111c:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
   1111e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11120:	7b5b      	ldrb	r3, [r3, #13]
   11122:	2b00      	cmp	r3, #0
   11124:	d003      	beq.n	1112e <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
   11126:	2100      	movs	r1, #0
   11128:	6878      	ldr	r0, [r7, #4]
   1112a:	4b0a      	ldr	r3, [pc, #40]	; (11154 <n25q256a_read_reg+0x94>)
   1112c:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
   1112e:	f107 030c 	add.w	r3, r7, #12
   11132:	4619      	mov	r1, r3
   11134:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   11136:	4b08      	ldr	r3, [pc, #32]	; (11158 <n25q256a_read_reg+0x98>)
   11138:	4798      	blx	r3
	if (n25q->xip_mode) {
   1113a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1113c:	7b5b      	ldrb	r3, [r3, #13]
   1113e:	2b00      	cmp	r3, #0
   11140:	d003      	beq.n	1114a <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
   11142:	2101      	movs	r1, #1
   11144:	6878      	ldr	r0, [r7, #4]
   11146:	4b03      	ldr	r3, [pc, #12]	; (11154 <n25q256a_read_reg+0x94>)
   11148:	4798      	blx	r3
	}
	return status;
   1114a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1114c:	4618      	mov	r0, r3
   1114e:	3730      	adds	r7, #48	; 0x30
   11150:	46bd      	mov	sp, r7
   11152:	bd80      	pop	{r7, pc}
   11154:	00010ff5 	.word	0x00010ff5
   11158:	00008439 	.word	0x00008439

0001115c <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
   1115c:	b580      	push	{r7, lr}
   1115e:	b08c      	sub	sp, #48	; 0x30
   11160:	af00      	add	r7, sp, #0
   11162:	60f8      	str	r0, [r7, #12]
   11164:	607b      	str	r3, [r7, #4]
   11166:	460b      	mov	r3, r1
   11168:	72fb      	strb	r3, [r7, #11]
   1116a:	4613      	mov	r3, r2
   1116c:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
   1116e:	68fb      	ldr	r3, [r7, #12]
   11170:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   11172:	68fb      	ldr	r3, [r7, #12]
   11174:	681b      	ldr	r3, [r3, #0]
   11176:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
   11178:	f107 0310 	add.w	r3, r7, #16
   1117c:	2200      	movs	r2, #0
   1117e:	601a      	str	r2, [r3, #0]
   11180:	605a      	str	r2, [r3, #4]
   11182:	609a      	str	r2, [r3, #8]
   11184:	60da      	str	r2, [r3, #12]
   11186:	611a      	str	r2, [r3, #16]
   11188:	615a      	str	r2, [r3, #20]
   1118a:	7afb      	ldrb	r3, [r7, #11]
   1118c:	f003 0307 	and.w	r3, r3, #7
   11190:	b2da      	uxtb	r2, r3
   11192:	7c3b      	ldrb	r3, [r7, #16]
   11194:	f362 0302 	bfi	r3, r2, #0, #3
   11198:	743b      	strb	r3, [r7, #16]
   1119a:	7c3b      	ldrb	r3, [r7, #16]
   1119c:	f043 0310 	orr.w	r3, r3, #16
   111a0:	743b      	strb	r3, [r7, #16]
   111a2:	7c3b      	ldrb	r3, [r7, #16]
   111a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   111a8:	743b      	strb	r3, [r7, #16]
   111aa:	7c7b      	ldrb	r3, [r7, #17]
   111ac:	2202      	movs	r2, #2
   111ae:	f362 1305 	bfi	r3, r2, #4, #2
   111b2:	747b      	strb	r3, [r7, #17]
   111b4:	7abb      	ldrb	r3, [r7, #10]
   111b6:	753b      	strb	r3, [r7, #20]
   111b8:	2301      	movs	r3, #1
   111ba:	61fb      	str	r3, [r7, #28]
   111bc:	1d3b      	adds	r3, r7, #4
   111be:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
   111c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   111c2:	7b5b      	ldrb	r3, [r3, #13]
   111c4:	2b00      	cmp	r3, #0
   111c6:	d003      	beq.n	111d0 <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
   111c8:	2100      	movs	r1, #0
   111ca:	68f8      	ldr	r0, [r7, #12]
   111cc:	4b09      	ldr	r3, [pc, #36]	; (111f4 <n25q256a_write_reg+0x98>)
   111ce:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
   111d0:	f107 0310 	add.w	r3, r7, #16
   111d4:	4619      	mov	r1, r3
   111d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   111d8:	4b07      	ldr	r3, [pc, #28]	; (111f8 <n25q256a_write_reg+0x9c>)
   111da:	4798      	blx	r3
	if (n25q->xip_mode) {
   111dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   111de:	7b5b      	ldrb	r3, [r3, #13]
   111e0:	2b00      	cmp	r3, #0
   111e2:	d003      	beq.n	111ec <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
   111e4:	2101      	movs	r1, #1
   111e6:	68f8      	ldr	r0, [r7, #12]
   111e8:	4b02      	ldr	r3, [pc, #8]	; (111f4 <n25q256a_write_reg+0x98>)
   111ea:	4798      	blx	r3
	}
}
   111ec:	bf00      	nop
   111ee:	3730      	adds	r7, #48	; 0x30
   111f0:	46bd      	mov	sp, r7
   111f2:	bd80      	pop	{r7, pc}
   111f4:	00010ff5 	.word	0x00010ff5
   111f8:	00008439 	.word	0x00008439

000111fc <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
   111fc:	b580      	push	{r7, lr}
   111fe:	b090      	sub	sp, #64	; 0x40
   11200:	af00      	add	r7, sp, #0
   11202:	6078      	str	r0, [r7, #4]
   11204:	460b      	mov	r3, r1
   11206:	70fb      	strb	r3, [r7, #3]
   11208:	4613      	mov	r3, r2
   1120a:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   1120c:	687b      	ldr	r3, [r7, #4]
   1120e:	681b      	ldr	r3, [r3, #0]
   11210:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
   11212:	78bb      	ldrb	r3, [r7, #2]
   11214:	2b00      	cmp	r3, #0
   11216:	d001      	beq.n	1121c <n25q256a_write_enable+0x20>
   11218:	2306      	movs	r3, #6
   1121a:	e000      	b.n	1121e <n25q256a_write_enable+0x22>
   1121c:	2304      	movs	r3, #4
   1121e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
   11222:	f107 0320 	add.w	r3, r7, #32
   11226:	2200      	movs	r2, #0
   11228:	601a      	str	r2, [r3, #0]
   1122a:	605a      	str	r2, [r3, #4]
   1122c:	609a      	str	r2, [r3, #8]
   1122e:	60da      	str	r2, [r3, #12]
   11230:	611a      	str	r2, [r3, #16]
   11232:	615a      	str	r2, [r3, #20]
   11234:	78fb      	ldrb	r3, [r7, #3]
   11236:	f003 0307 	and.w	r3, r3, #7
   1123a:	b2da      	uxtb	r2, r3
   1123c:	f897 3020 	ldrb.w	r3, [r7, #32]
   11240:	f362 0302 	bfi	r3, r2, #0, #3
   11244:	f887 3020 	strb.w	r3, [r7, #32]
   11248:	f897 3020 	ldrb.w	r3, [r7, #32]
   1124c:	f043 0310 	orr.w	r3, r3, #16
   11250:	f887 3020 	strb.w	r3, [r7, #32]
   11254:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
   11258:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
   1125c:	f107 0308 	add.w	r3, r7, #8
   11260:	2200      	movs	r2, #0
   11262:	601a      	str	r2, [r3, #0]
   11264:	605a      	str	r2, [r3, #4]
   11266:	609a      	str	r2, [r3, #8]
   11268:	60da      	str	r2, [r3, #12]
   1126a:	611a      	str	r2, [r3, #16]
   1126c:	615a      	str	r2, [r3, #20]
   1126e:	78fb      	ldrb	r3, [r7, #3]
   11270:	f003 0307 	and.w	r3, r3, #7
   11274:	b2da      	uxtb	r2, r3
   11276:	7a3b      	ldrb	r3, [r7, #8]
   11278:	f362 0302 	bfi	r3, r2, #0, #3
   1127c:	723b      	strb	r3, [r7, #8]
   1127e:	7a3b      	ldrb	r3, [r7, #8]
   11280:	f043 0310 	orr.w	r3, r3, #16
   11284:	723b      	strb	r3, [r7, #8]
   11286:	7a3b      	ldrb	r3, [r7, #8]
   11288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1128c:	723b      	strb	r3, [r7, #8]
   1128e:	2305      	movs	r3, #5
   11290:	733b      	strb	r3, [r7, #12]
   11292:	2301      	movs	r3, #1
   11294:	617b      	str	r3, [r7, #20]
   11296:	f107 033a 	add.w	r3, r7, #58	; 0x3a
   1129a:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
   1129c:	f107 0320 	add.w	r3, r7, #32
   112a0:	4619      	mov	r1, r3
   112a2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   112a4:	4b08      	ldr	r3, [pc, #32]	; (112c8 <n25q256a_write_enable+0xcc>)
   112a6:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
   112a8:	f107 0308 	add.w	r3, r7, #8
   112ac:	4619      	mov	r1, r3
   112ae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   112b0:	4b05      	ldr	r3, [pc, #20]	; (112c8 <n25q256a_write_enable+0xcc>)
   112b2:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
   112b4:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
   112b8:	f003 0302 	and.w	r3, r3, #2
   112bc:	2b00      	cmp	r3, #0
   112be:	d0ed      	beq.n	1129c <n25q256a_write_enable+0xa0>
}
   112c0:	bf00      	nop
   112c2:	3740      	adds	r7, #64	; 0x40
   112c4:	46bd      	mov	sp, r7
   112c6:	bd80      	pop	{r7, pc}
   112c8:	00008439 	.word	0x00008439

000112cc <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
   112cc:	b590      	push	{r4, r7, lr}
   112ce:	b087      	sub	sp, #28
   112d0:	af00      	add	r7, sp, #0
   112d2:	6078      	str	r0, [r7, #4]
   112d4:	460b      	mov	r3, r1
   112d6:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
   112d8:	687b      	ldr	r3, [r7, #4]
   112da:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
   112dc:	68fb      	ldr	r3, [r7, #12]
   112de:	7b1b      	ldrb	r3, [r3, #12]
   112e0:	2b00      	cmp	r3, #0
   112e2:	d001      	beq.n	112e8 <n25q256a_switch_mode+0x1c>
   112e4:	2306      	movs	r3, #6
   112e6:	e000      	b.n	112ea <n25q256a_switch_mode+0x1e>
   112e8:	2300      	movs	r3, #0
   112ea:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
   112ec:	7afb      	ldrb	r3, [r7, #11]
   112ee:	2265      	movs	r2, #101	; 0x65
   112f0:	4619      	mov	r1, r3
   112f2:	6878      	ldr	r0, [r7, #4]
   112f4:	4b25      	ldr	r3, [pc, #148]	; (1138c <n25q256a_switch_mode+0xc0>)
   112f6:	4798      	blx	r3
   112f8:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
   112fa:	2300      	movs	r3, #0
   112fc:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
   112fe:	68fb      	ldr	r3, [r7, #12]
   11300:	7b1b      	ldrb	r3, [r3, #12]
   11302:	78fa      	ldrb	r2, [r7, #3]
   11304:	429a      	cmp	r2, r3
   11306:	d03d      	beq.n	11384 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
   11308:	78fb      	ldrb	r3, [r7, #3]
   1130a:	2b00      	cmp	r3, #0
   1130c:	d00b      	beq.n	11326 <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
   1130e:	697b      	ldr	r3, [r7, #20]
   11310:	f003 0380 	and.w	r3, r3, #128	; 0x80
   11314:	2b00      	cmp	r3, #0
   11316:	d011      	beq.n	1133c <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
   11318:	697b      	ldr	r3, [r7, #20]
   1131a:	f003 031f 	and.w	r3, r3, #31
   1131e:	617b      	str	r3, [r7, #20]
			modify = 1;
   11320:	2301      	movs	r3, #1
   11322:	74fb      	strb	r3, [r7, #19]
   11324:	e00a      	b.n	1133c <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
   11326:	697b      	ldr	r3, [r7, #20]
   11328:	f003 0380 	and.w	r3, r3, #128	; 0x80
   1132c:	2b00      	cmp	r3, #0
   1132e:	d105      	bne.n	1133c <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
   11330:	697b      	ldr	r3, [r7, #20]
   11332:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
   11336:	617b      	str	r3, [r7, #20]
			modify = 1;
   11338:	2301      	movs	r3, #1
   1133a:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
   1133c:	7cfb      	ldrb	r3, [r7, #19]
   1133e:	2b00      	cmp	r3, #0
   11340:	d021      	beq.n	11386 <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
   11342:	68fb      	ldr	r3, [r7, #12]
   11344:	78fa      	ldrb	r2, [r7, #3]
   11346:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
   11348:	7afb      	ldrb	r3, [r7, #11]
   1134a:	2201      	movs	r2, #1
   1134c:	4619      	mov	r1, r3
   1134e:	6878      	ldr	r0, [r7, #4]
   11350:	4b0f      	ldr	r3, [pc, #60]	; (11390 <n25q256a_switch_mode+0xc4>)
   11352:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
   11354:	7af9      	ldrb	r1, [r7, #11]
   11356:	697b      	ldr	r3, [r7, #20]
   11358:	2261      	movs	r2, #97	; 0x61
   1135a:	6878      	ldr	r0, [r7, #4]
   1135c:	4c0d      	ldr	r4, [pc, #52]	; (11394 <n25q256a_switch_mode+0xc8>)
   1135e:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
   11360:	78fb      	ldrb	r3, [r7, #3]
   11362:	2b00      	cmp	r3, #0
   11364:	d001      	beq.n	1136a <n25q256a_switch_mode+0x9e>
   11366:	2306      	movs	r3, #6
   11368:	e000      	b.n	1136c <n25q256a_switch_mode+0xa0>
   1136a:	2300      	movs	r3, #0
   1136c:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
   1136e:	7afb      	ldrb	r3, [r7, #11]
   11370:	2265      	movs	r2, #101	; 0x65
   11372:	4619      	mov	r1, r3
   11374:	6878      	ldr	r0, [r7, #4]
   11376:	4b05      	ldr	r3, [pc, #20]	; (1138c <n25q256a_switch_mode+0xc0>)
   11378:	4798      	blx	r3
   1137a:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
   1137c:	68fb      	ldr	r3, [r7, #12]
   1137e:	78fa      	ldrb	r2, [r7, #3]
   11380:	731a      	strb	r2, [r3, #12]
   11382:	e000      	b.n	11386 <n25q256a_switch_mode+0xba>
		return;
   11384:	bf00      	nop
	}
}
   11386:	371c      	adds	r7, #28
   11388:	46bd      	mov	sp, r7
   1138a:	bd90      	pop	{r4, r7, pc}
   1138c:	000110c1 	.word	0x000110c1
   11390:	000111fd 	.word	0x000111fd
   11394:	0001115d 	.word	0x0001115d

00011398 <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
   11398:	b580      	push	{r7, lr}
   1139a:	b086      	sub	sp, #24
   1139c:	af00      	add	r7, sp, #0
   1139e:	60f8      	str	r0, [r7, #12]
   113a0:	60b9      	str	r1, [r7, #8]
   113a2:	607a      	str	r2, [r7, #4]
   113a4:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
   113a6:	68fb      	ldr	r3, [r7, #12]
   113a8:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
   113aa:	4a0c      	ldr	r2, [pc, #48]	; (113dc <n25q256a_construct+0x44>)
   113ac:	68b9      	ldr	r1, [r7, #8]
   113ae:	68f8      	ldr	r0, [r7, #12]
   113b0:	4b0b      	ldr	r3, [pc, #44]	; (113e0 <n25q256a_construct+0x48>)
   113b2:	4798      	blx	r3
	n25q->quad_mode    = 0;
   113b4:	697b      	ldr	r3, [r7, #20]
   113b6:	2200      	movs	r2, #0
   113b8:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
   113ba:	697b      	ldr	r3, [r7, #20]
   113bc:	2200      	movs	r2, #0
   113be:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
   113c0:	697b      	ldr	r3, [r7, #20]
   113c2:	687a      	ldr	r2, [r7, #4]
   113c4:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
   113c6:	78fb      	ldrb	r3, [r7, #3]
   113c8:	4619      	mov	r1, r3
   113ca:	68f8      	ldr	r0, [r7, #12]
   113cc:	4b05      	ldr	r3, [pc, #20]	; (113e4 <n25q256a_construct+0x4c>)
   113ce:	4798      	blx	r3
	return me;
   113d0:	68fb      	ldr	r3, [r7, #12]
}
   113d2:	4618      	mov	r0, r3
   113d4:	3718      	adds	r7, #24
   113d6:	46bd      	mov	sp, r7
   113d8:	bd80      	pop	{r7, pc}
   113da:	bf00      	nop
   113dc:	00014108 	.word	0x00014108
   113e0:	00011875 	.word	0x00011875
   113e4:	000112cd 	.word	0x000112cd

000113e8 <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
   113e8:	b580      	push	{r7, lr}
   113ea:	b08c      	sub	sp, #48	; 0x30
   113ec:	af00      	add	r7, sp, #0
   113ee:	60f8      	str	r0, [r7, #12]
   113f0:	60b9      	str	r1, [r7, #8]
   113f2:	607a      	str	r2, [r7, #4]
   113f4:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
   113f6:	68fb      	ldr	r3, [r7, #12]
   113f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   113fa:	68fb      	ldr	r3, [r7, #12]
   113fc:	681b      	ldr	r3, [r3, #0]
   113fe:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
   11400:	f107 0310 	add.w	r3, r7, #16
   11404:	2200      	movs	r2, #0
   11406:	601a      	str	r2, [r3, #0]
   11408:	605a      	str	r2, [r3, #4]
   1140a:	609a      	str	r2, [r3, #8]
   1140c:	60da      	str	r2, [r3, #12]
   1140e:	611a      	str	r2, [r3, #16]
   11410:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
   11412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11414:	7b1b      	ldrb	r3, [r3, #12]
   11416:	2b00      	cmp	r3, #0
   11418:	d001      	beq.n	1141e <n25q256a_read+0x36>
   1141a:	2206      	movs	r2, #6
   1141c:	e000      	b.n	11420 <n25q256a_read+0x38>
   1141e:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
   11420:	7c3b      	ldrb	r3, [r7, #16]
   11422:	f362 0302 	bfi	r3, r2, #0, #3
   11426:	743b      	strb	r3, [r7, #16]
   11428:	7c3b      	ldrb	r3, [r7, #16]
   1142a:	f043 0310 	orr.w	r3, r3, #16
   1142e:	743b      	strb	r3, [r7, #16]
   11430:	7c3b      	ldrb	r3, [r7, #16]
   11432:	f043 0320 	orr.w	r3, r3, #32
   11436:	743b      	strb	r3, [r7, #16]
   11438:	7c3b      	ldrb	r3, [r7, #16]
   1143a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1143e:	743b      	strb	r3, [r7, #16]
   11440:	7c7b      	ldrb	r3, [r7, #17]
   11442:	2201      	movs	r2, #1
   11444:	f362 1305 	bfi	r3, r2, #4, #2
   11448:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
   1144a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1144c:	7b1b      	ldrb	r3, [r3, #12]
   1144e:	2b00      	cmp	r3, #0
   11450:	d001      	beq.n	11456 <n25q256a_read+0x6e>
   11452:	220a      	movs	r2, #10
   11454:	e000      	b.n	11458 <n25q256a_read+0x70>
   11456:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
   11458:	7cbb      	ldrb	r3, [r7, #18]
   1145a:	f362 0304 	bfi	r3, r2, #0, #5
   1145e:	74bb      	strb	r3, [r7, #18]
   11460:	230b      	movs	r3, #11
   11462:	753b      	strb	r3, [r7, #20]
   11464:	687b      	ldr	r3, [r7, #4]
   11466:	61bb      	str	r3, [r7, #24]
   11468:	683b      	ldr	r3, [r7, #0]
   1146a:	61fb      	str	r3, [r7, #28]
   1146c:	68bb      	ldr	r3, [r7, #8]
   1146e:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
   11470:	f107 0310 	add.w	r3, r7, #16
   11474:	4619      	mov	r1, r3
   11476:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   11478:	4b03      	ldr	r3, [pc, #12]	; (11488 <n25q256a_read+0xa0>)
   1147a:	4798      	blx	r3
	return ERR_NONE;
   1147c:	2300      	movs	r3, #0
}
   1147e:	4618      	mov	r0, r3
   11480:	3730      	adds	r7, #48	; 0x30
   11482:	46bd      	mov	sp, r7
   11484:	bd80      	pop	{r7, pc}
   11486:	bf00      	nop
   11488:	00008439 	.word	0x00008439

0001148c <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
   1148c:	b580      	push	{r7, lr}
   1148e:	b08c      	sub	sp, #48	; 0x30
   11490:	af00      	add	r7, sp, #0
   11492:	60f8      	str	r0, [r7, #12]
   11494:	60b9      	str	r1, [r7, #8]
   11496:	607a      	str	r2, [r7, #4]
   11498:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
   1149a:	68fb      	ldr	r3, [r7, #12]
   1149c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   1149e:	68fb      	ldr	r3, [r7, #12]
   114a0:	681b      	ldr	r3, [r3, #0]
   114a2:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
   114a4:	f107 0310 	add.w	r3, r7, #16
   114a8:	2200      	movs	r2, #0
   114aa:	601a      	str	r2, [r3, #0]
   114ac:	605a      	str	r2, [r3, #4]
   114ae:	609a      	str	r2, [r3, #8]
   114b0:	60da      	str	r2, [r3, #12]
   114b2:	611a      	str	r2, [r3, #16]
   114b4:	615a      	str	r2, [r3, #20]
   114b6:	7c3b      	ldrb	r3, [r7, #16]
   114b8:	f043 0310 	orr.w	r3, r3, #16
   114bc:	743b      	strb	r3, [r7, #16]
   114be:	7c3b      	ldrb	r3, [r7, #16]
   114c0:	f043 0320 	orr.w	r3, r3, #32
   114c4:	743b      	strb	r3, [r7, #16]
   114c6:	7c3b      	ldrb	r3, [r7, #16]
   114c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   114cc:	743b      	strb	r3, [r7, #16]
   114ce:	7c7b      	ldrb	r3, [r7, #17]
   114d0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   114d4:	747b      	strb	r3, [r7, #17]
   114d6:	2302      	movs	r3, #2
   114d8:	753b      	strb	r3, [r7, #20]
   114da:	687b      	ldr	r3, [r7, #4]
   114dc:	61bb      	str	r3, [r7, #24]
   114de:	683b      	ldr	r3, [r7, #0]
   114e0:	61fb      	str	r3, [r7, #28]
   114e2:	68bb      	ldr	r3, [r7, #8]
   114e4:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
   114e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   114e8:	7b1b      	ldrb	r3, [r3, #12]
   114ea:	2b00      	cmp	r3, #0
   114ec:	d001      	beq.n	114f2 <n25q256a_write+0x66>
   114ee:	2206      	movs	r2, #6
   114f0:	e000      	b.n	114f4 <n25q256a_write+0x68>
   114f2:	2200      	movs	r2, #0
   114f4:	7c3b      	ldrb	r3, [r7, #16]
   114f6:	f362 0302 	bfi	r3, r2, #0, #3
   114fa:	743b      	strb	r3, [r7, #16]
	while (length) {
   114fc:	e035      	b.n	1156a <n25q256a_write+0xde>
		cmd.address = address;
   114fe:	687b      	ldr	r3, [r7, #4]
   11500:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
   11502:	683b      	ldr	r3, [r7, #0]
   11504:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   11508:	d802      	bhi.n	11510 <n25q256a_write+0x84>
			cmd.buf_len = length;
   1150a:	683b      	ldr	r3, [r7, #0]
   1150c:	61fb      	str	r3, [r7, #28]
   1150e:	e002      	b.n	11516 <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
   11510:	f44f 7380 	mov.w	r3, #256	; 0x100
   11514:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
   11516:	7c3b      	ldrb	r3, [r7, #16]
   11518:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1151c:	b2db      	uxtb	r3, r3
   1151e:	2201      	movs	r2, #1
   11520:	4619      	mov	r1, r3
   11522:	68f8      	ldr	r0, [r7, #12]
   11524:	4b19      	ldr	r3, [pc, #100]	; (1158c <n25q256a_write+0x100>)
   11526:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
   11528:	f107 0310 	add.w	r3, r7, #16
   1152c:	4619      	mov	r1, r3
   1152e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   11530:	4b17      	ldr	r3, [pc, #92]	; (11590 <n25q256a_write+0x104>)
   11532:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
   11534:	bf00      	nop
   11536:	7c3b      	ldrb	r3, [r7, #16]
   11538:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1153c:	b2db      	uxtb	r3, r3
   1153e:	2270      	movs	r2, #112	; 0x70
   11540:	4619      	mov	r1, r3
   11542:	68f8      	ldr	r0, [r7, #12]
   11544:	4b13      	ldr	r3, [pc, #76]	; (11594 <n25q256a_write+0x108>)
   11546:	4798      	blx	r3
   11548:	4603      	mov	r3, r0
   1154a:	f003 0380 	and.w	r3, r3, #128	; 0x80
   1154e:	2b00      	cmp	r3, #0
   11550:	d0f1      	beq.n	11536 <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
   11552:	6a3a      	ldr	r2, [r7, #32]
   11554:	69fb      	ldr	r3, [r7, #28]
   11556:	4413      	add	r3, r2
   11558:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
   1155a:	69fb      	ldr	r3, [r7, #28]
   1155c:	683a      	ldr	r2, [r7, #0]
   1155e:	1ad3      	subs	r3, r2, r3
   11560:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
   11562:	69fb      	ldr	r3, [r7, #28]
   11564:	687a      	ldr	r2, [r7, #4]
   11566:	4413      	add	r3, r2
   11568:	607b      	str	r3, [r7, #4]
	while (length) {
   1156a:	683b      	ldr	r3, [r7, #0]
   1156c:	2b00      	cmp	r3, #0
   1156e:	d1c6      	bne.n	114fe <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
   11570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11572:	7b5b      	ldrb	r3, [r3, #13]
   11574:	2b00      	cmp	r3, #0
   11576:	d003      	beq.n	11580 <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
   11578:	2101      	movs	r1, #1
   1157a:	68f8      	ldr	r0, [r7, #12]
   1157c:	4b06      	ldr	r3, [pc, #24]	; (11598 <n25q256a_write+0x10c>)
   1157e:	4798      	blx	r3
	}
	return ERR_NONE;
   11580:	2300      	movs	r3, #0
}
   11582:	4618      	mov	r0, r3
   11584:	3730      	adds	r7, #48	; 0x30
   11586:	46bd      	mov	sp, r7
   11588:	bd80      	pop	{r7, pc}
   1158a:	bf00      	nop
   1158c:	000111fd 	.word	0x000111fd
   11590:	00008439 	.word	0x00008439
   11594:	000110c1 	.word	0x000110c1
   11598:	00010ff5 	.word	0x00010ff5

0001159c <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
   1159c:	b580      	push	{r7, lr}
   1159e:	b090      	sub	sp, #64	; 0x40
   115a0:	af00      	add	r7, sp, #0
   115a2:	60f8      	str	r0, [r7, #12]
   115a4:	60b9      	str	r1, [r7, #8]
   115a6:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
   115a8:	68fb      	ldr	r3, [r7, #12]
   115aa:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   115ac:	68fb      	ldr	r3, [r7, #12]
   115ae:	681b      	ldr	r3, [r3, #0]
   115b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
   115b2:	f107 0314 	add.w	r3, r7, #20
   115b6:	2200      	movs	r2, #0
   115b8:	601a      	str	r2, [r3, #0]
   115ba:	605a      	str	r2, [r3, #4]
   115bc:	609a      	str	r2, [r3, #8]
   115be:	60da      	str	r2, [r3, #12]
   115c0:	611a      	str	r2, [r3, #16]
   115c2:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
   115c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   115c6:	7b1b      	ldrb	r3, [r3, #12]
   115c8:	2b00      	cmp	r3, #0
   115ca:	d001      	beq.n	115d0 <n25q256a_erase+0x34>
   115cc:	2206      	movs	r2, #6
   115ce:	e000      	b.n	115d2 <n25q256a_erase+0x36>
   115d0:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
   115d2:	7d3b      	ldrb	r3, [r7, #20]
   115d4:	f362 0302 	bfi	r3, r2, #0, #3
   115d8:	753b      	strb	r3, [r7, #20]
   115da:	7d3b      	ldrb	r3, [r7, #20]
   115dc:	f043 0310 	orr.w	r3, r3, #16
   115e0:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
   115e2:	687b      	ldr	r3, [r7, #4]
   115e4:	4a56      	ldr	r2, [pc, #344]	; (11740 <n25q256a_erase+0x1a4>)
   115e6:	4293      	cmp	r3, r2
   115e8:	bf94      	ite	ls
   115ea:	2301      	movls	r3, #1
   115ec:	2300      	movhi	r3, #0
   115ee:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
   115f0:	7d3b      	ldrb	r3, [r7, #20]
   115f2:	f362 1345 	bfi	r3, r2, #5, #1
   115f6:	753b      	strb	r3, [r7, #20]
   115f8:	7d7b      	ldrb	r3, [r7, #21]
   115fa:	2202      	movs	r2, #2
   115fc:	f362 1305 	bfi	r3, r2, #4, #2
   11600:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
   11602:	68bb      	ldr	r3, [r7, #8]
   11604:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
   11606:	687b      	ldr	r3, [r7, #4]
   11608:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
   1160a:	2300      	movs	r3, #0
   1160c:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
   1160e:	687b      	ldr	r3, [r7, #4]
   11610:	f3c3 030b 	ubfx	r3, r3, #0, #12
   11614:	2b00      	cmp	r3, #0
   11616:	d104      	bne.n	11622 <n25q256a_erase+0x86>
   11618:	68bb      	ldr	r3, [r7, #8]
   1161a:	f3c3 030b 	ubfx	r3, r3, #0, #12
   1161e:	2b00      	cmp	r3, #0
   11620:	d002      	beq.n	11628 <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
   11622:	f06f 030c 	mvn.w	r3, #12
   11626:	e087      	b.n	11738 <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
   11628:	687b      	ldr	r3, [r7, #4]
   1162a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
   1162e:	d368      	bcc.n	11702 <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
   11630:	23c7      	movs	r3, #199	; 0xc7
   11632:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
   11634:	7d3b      	ldrb	r3, [r7, #20]
   11636:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1163a:	b2db      	uxtb	r3, r3
   1163c:	2201      	movs	r2, #1
   1163e:	4619      	mov	r1, r3
   11640:	68f8      	ldr	r0, [r7, #12]
   11642:	4b40      	ldr	r3, [pc, #256]	; (11744 <n25q256a_erase+0x1a8>)
   11644:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
   11646:	f107 0314 	add.w	r3, r7, #20
   1164a:	4619      	mov	r1, r3
   1164c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1164e:	4b3e      	ldr	r3, [pc, #248]	; (11748 <n25q256a_erase+0x1ac>)
   11650:	4798      	blx	r3
   11652:	e059      	b.n	11708 <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
   11654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11656:	b29b      	uxth	r3, r3
   11658:	2b00      	cmp	r3, #0
   1165a:	d11f      	bne.n	1169c <n25q256a_erase+0x100>
   1165c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1165e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   11662:	d31b      	bcc.n	1169c <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
   11664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11666:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
   11668:	23d8      	movs	r3, #216	; 0xd8
   1166a:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
   1166c:	7d3b      	ldrb	r3, [r7, #20]
   1166e:	f3c3 0302 	ubfx	r3, r3, #0, #3
   11672:	b2db      	uxtb	r3, r3
   11674:	2201      	movs	r2, #1
   11676:	4619      	mov	r1, r3
   11678:	68f8      	ldr	r0, [r7, #12]
   1167a:	4b32      	ldr	r3, [pc, #200]	; (11744 <n25q256a_erase+0x1a8>)
   1167c:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
   1167e:	f107 0314 	add.w	r3, r7, #20
   11682:	4619      	mov	r1, r3
   11684:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   11686:	4b30      	ldr	r3, [pc, #192]	; (11748 <n25q256a_erase+0x1ac>)
   11688:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
   1168a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1168c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   11690:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
   11692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   11694:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
   11698:	63bb      	str	r3, [r7, #56]	; 0x38
   1169a:	e023      	b.n	116e4 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
   1169c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1169e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   116a2:	d31b      	bcc.n	116dc <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
   116a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   116a6:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
   116a8:	2320      	movs	r3, #32
   116aa:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
   116ac:	7d3b      	ldrb	r3, [r7, #20]
   116ae:	f3c3 0302 	ubfx	r3, r3, #0, #3
   116b2:	b2db      	uxtb	r3, r3
   116b4:	2201      	movs	r2, #1
   116b6:	4619      	mov	r1, r3
   116b8:	68f8      	ldr	r0, [r7, #12]
   116ba:	4b22      	ldr	r3, [pc, #136]	; (11744 <n25q256a_erase+0x1a8>)
   116bc:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
   116be:	f107 0314 	add.w	r3, r7, #20
   116c2:	4619      	mov	r1, r3
   116c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   116c6:	4b20      	ldr	r3, [pc, #128]	; (11748 <n25q256a_erase+0x1ac>)
   116c8:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
   116ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   116cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   116d0:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
   116d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   116d4:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   116d8:	63bb      	str	r3, [r7, #56]	; 0x38
   116da:	e003      	b.n	116e4 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
   116dc:	f06f 030c 	mvn.w	r3, #12
   116e0:	637b      	str	r3, [r7, #52]	; 0x34
				break;
   116e2:	e011      	b.n	11708 <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
   116e4:	bf00      	nop
   116e6:	7d3b      	ldrb	r3, [r7, #20]
   116e8:	f3c3 0302 	ubfx	r3, r3, #0, #3
   116ec:	b2db      	uxtb	r3, r3
   116ee:	2270      	movs	r2, #112	; 0x70
   116f0:	4619      	mov	r1, r3
   116f2:	68f8      	ldr	r0, [r7, #12]
   116f4:	4b15      	ldr	r3, [pc, #84]	; (1174c <n25q256a_erase+0x1b0>)
   116f6:	4798      	blx	r3
   116f8:	4603      	mov	r3, r0
   116fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
   116fe:	2b00      	cmp	r3, #0
   11700:	d0f1      	beq.n	116e6 <n25q256a_erase+0x14a>
		while (temp_len > 0) {
   11702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   11704:	2b00      	cmp	r3, #0
   11706:	d1a5      	bne.n	11654 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
   11708:	bf00      	nop
   1170a:	7d3b      	ldrb	r3, [r7, #20]
   1170c:	f3c3 0302 	ubfx	r3, r3, #0, #3
   11710:	b2db      	uxtb	r3, r3
   11712:	2270      	movs	r2, #112	; 0x70
   11714:	4619      	mov	r1, r3
   11716:	68f8      	ldr	r0, [r7, #12]
   11718:	4b0c      	ldr	r3, [pc, #48]	; (1174c <n25q256a_erase+0x1b0>)
   1171a:	4798      	blx	r3
   1171c:	4603      	mov	r3, r0
   1171e:	f003 0380 	and.w	r3, r3, #128	; 0x80
   11722:	2b00      	cmp	r3, #0
   11724:	d0f1      	beq.n	1170a <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
   11726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   11728:	7b5b      	ldrb	r3, [r3, #13]
   1172a:	2b00      	cmp	r3, #0
   1172c:	d003      	beq.n	11736 <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
   1172e:	2101      	movs	r1, #1
   11730:	68f8      	ldr	r0, [r7, #12]
   11732:	4b07      	ldr	r3, [pc, #28]	; (11750 <n25q256a_erase+0x1b4>)
   11734:	4798      	blx	r3
	}
	return rc;
   11736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   11738:	4618      	mov	r0, r3
   1173a:	3740      	adds	r7, #64	; 0x40
   1173c:	46bd      	mov	sp, r7
   1173e:	bd80      	pop	{r7, pc}
   11740:	001fffff 	.word	0x001fffff
   11744:	000111fd 	.word	0x000111fd
   11748:	00008439 	.word	0x00008439
   1174c:	000110c1 	.word	0x000110c1
   11750:	00010ff5 	.word	0x00010ff5

00011754 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
   11754:	b590      	push	{r4, r7, lr}
   11756:	b085      	sub	sp, #20
   11758:	af00      	add	r7, sp, #0
   1175a:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
   1175c:	687b      	ldr	r3, [r7, #4]
   1175e:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
   11760:	68fb      	ldr	r3, [r7, #12]
   11762:	7b1b      	ldrb	r3, [r3, #12]
   11764:	2b00      	cmp	r3, #0
   11766:	d001      	beq.n	1176c <n25q256a_enable_xip+0x18>
   11768:	2306      	movs	r3, #6
   1176a:	e000      	b.n	1176e <n25q256a_enable_xip+0x1a>
   1176c:	2300      	movs	r3, #0
   1176e:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
   11770:	68fb      	ldr	r3, [r7, #12]
   11772:	7b5b      	ldrb	r3, [r3, #13]
   11774:	2b00      	cmp	r3, #0
   11776:	d129      	bne.n	117cc <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
   11778:	7afb      	ldrb	r3, [r7, #11]
   1177a:	2285      	movs	r2, #133	; 0x85
   1177c:	4619      	mov	r1, r3
   1177e:	6878      	ldr	r0, [r7, #4]
   11780:	4b15      	ldr	r3, [pc, #84]	; (117d8 <n25q256a_enable_xip+0x84>)
   11782:	4798      	blx	r3
   11784:	4603      	mov	r3, r0
   11786:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
   11788:	7abb      	ldrb	r3, [r7, #10]
   1178a:	f003 0308 	and.w	r3, r3, #8
   1178e:	2b00      	cmp	r3, #0
   11790:	d015      	beq.n	117be <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
   11792:	7abb      	ldrb	r3, [r7, #10]
   11794:	f023 0308 	bic.w	r3, r3, #8
   11798:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
   1179a:	7abb      	ldrb	r3, [r7, #10]
   1179c:	7af9      	ldrb	r1, [r7, #11]
   1179e:	2281      	movs	r2, #129	; 0x81
   117a0:	6878      	ldr	r0, [r7, #4]
   117a2:	4c0e      	ldr	r4, [pc, #56]	; (117dc <n25q256a_enable_xip+0x88>)
   117a4:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
   117a6:	bf00      	nop
   117a8:	7afb      	ldrb	r3, [r7, #11]
   117aa:	2270      	movs	r2, #112	; 0x70
   117ac:	4619      	mov	r1, r3
   117ae:	6878      	ldr	r0, [r7, #4]
   117b0:	4b09      	ldr	r3, [pc, #36]	; (117d8 <n25q256a_enable_xip+0x84>)
   117b2:	4798      	blx	r3
   117b4:	4603      	mov	r3, r0
   117b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
   117ba:	2b00      	cmp	r3, #0
   117bc:	d0f4      	beq.n	117a8 <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
   117be:	68fb      	ldr	r3, [r7, #12]
   117c0:	2201      	movs	r2, #1
   117c2:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
   117c4:	2101      	movs	r1, #1
   117c6:	6878      	ldr	r0, [r7, #4]
   117c8:	4b05      	ldr	r3, [pc, #20]	; (117e0 <n25q256a_enable_xip+0x8c>)
   117ca:	4798      	blx	r3
	}
	return ERR_NONE;
   117cc:	2300      	movs	r3, #0
}
   117ce:	4618      	mov	r0, r3
   117d0:	3714      	adds	r7, #20
   117d2:	46bd      	mov	sp, r7
   117d4:	bd90      	pop	{r4, r7, pc}
   117d6:	bf00      	nop
   117d8:	000110c1 	.word	0x000110c1
   117dc:	0001115d 	.word	0x0001115d
   117e0:	00010ff5 	.word	0x00010ff5

000117e4 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
   117e4:	b580      	push	{r7, lr}
   117e6:	b086      	sub	sp, #24
   117e8:	af00      	add	r7, sp, #0
   117ea:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
   117ec:	687b      	ldr	r3, [r7, #4]
   117ee:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   117f0:	687b      	ldr	r3, [r7, #4]
   117f2:	681b      	ldr	r3, [r3, #0]
   117f4:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
   117f6:	697b      	ldr	r3, [r7, #20]
   117f8:	7b1b      	ldrb	r3, [r3, #12]
   117fa:	2b00      	cmp	r3, #0
   117fc:	d001      	beq.n	11802 <n25q256a_disable_xip+0x1e>
   117fe:	2306      	movs	r3, #6
   11800:	e000      	b.n	11804 <n25q256a_disable_xip+0x20>
   11802:	2300      	movs	r3, #0
   11804:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
   11806:	2100      	movs	r1, #0
   11808:	6878      	ldr	r0, [r7, #4]
   1180a:	4b15      	ldr	r3, [pc, #84]	; (11860 <n25q256a_disable_xip+0x7c>)
   1180c:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
   1180e:	7bfb      	ldrb	r3, [r7, #15]
   11810:	2285      	movs	r2, #133	; 0x85
   11812:	4619      	mov	r1, r3
   11814:	6878      	ldr	r0, [r7, #4]
   11816:	4b13      	ldr	r3, [pc, #76]	; (11864 <n25q256a_disable_xip+0x80>)
   11818:	4798      	blx	r3
   1181a:	4603      	mov	r3, r0
   1181c:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
   1181e:	7bbb      	ldrb	r3, [r7, #14]
   11820:	f003 0308 	and.w	r3, r3, #8
   11824:	2b00      	cmp	r3, #0
   11826:	d113      	bne.n	11850 <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
   11828:	697b      	ldr	r3, [r7, #20]
   1182a:	689b      	ldr	r3, [r3, #8]
   1182c:	2b00      	cmp	r3, #0
   1182e:	d00f      	beq.n	11850 <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
   11830:	693b      	ldr	r3, [r7, #16]
   11832:	681b      	ldr	r3, [r3, #0]
   11834:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
   11836:	6938      	ldr	r0, [r7, #16]
   11838:	4b0b      	ldr	r3, [pc, #44]	; (11868 <n25q256a_disable_xip+0x84>)
   1183a:	4798      	blx	r3
			n25q->pin_exit_xip();
   1183c:	697b      	ldr	r3, [r7, #20]
   1183e:	689b      	ldr	r3, [r3, #8]
   11840:	4798      	blx	r3

			qspi_sync_init(descr, hw);
   11842:	68b9      	ldr	r1, [r7, #8]
   11844:	6938      	ldr	r0, [r7, #16]
   11846:	4b09      	ldr	r3, [pc, #36]	; (1186c <n25q256a_disable_xip+0x88>)
   11848:	4798      	blx	r3
			qspi_sync_enable(descr);
   1184a:	6938      	ldr	r0, [r7, #16]
   1184c:	4b08      	ldr	r3, [pc, #32]	; (11870 <n25q256a_disable_xip+0x8c>)
   1184e:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
   11850:	697b      	ldr	r3, [r7, #20]
   11852:	2200      	movs	r2, #0
   11854:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
   11856:	2300      	movs	r3, #0
}
   11858:	4618      	mov	r0, r3
   1185a:	3718      	adds	r7, #24
   1185c:	46bd      	mov	sp, r7
   1185e:	bd80      	pop	{r7, pc}
   11860:	00010ff5 	.word	0x00010ff5
   11864:	000110c1 	.word	0x000110c1
   11868:	000083fd 	.word	0x000083fd
   1186c:	00008375 	.word	0x00008375
   11870:	000083c1 	.word	0x000083c1

00011874 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
   11874:	b480      	push	{r7}
   11876:	b085      	sub	sp, #20
   11878:	af00      	add	r7, sp, #0
   1187a:	60f8      	str	r0, [r7, #12]
   1187c:	60b9      	str	r1, [r7, #8]
   1187e:	607a      	str	r2, [r7, #4]
	me->io        = io;
   11880:	68fb      	ldr	r3, [r7, #12]
   11882:	68ba      	ldr	r2, [r7, #8]
   11884:	601a      	str	r2, [r3, #0]
	me->interface = interface;
   11886:	68fb      	ldr	r3, [r7, #12]
   11888:	687a      	ldr	r2, [r7, #4]
   1188a:	605a      	str	r2, [r3, #4]

	return me;
   1188c:	68fb      	ldr	r3, [r7, #12]
}
   1188e:	4618      	mov	r0, r3
   11890:	3714      	adds	r7, #20
   11892:	46bd      	mov	sp, r7
   11894:	f85d 7b04 	ldr.w	r7, [sp], #4
   11898:	4770      	bx	lr

0001189a <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
   1189a:	b480      	push	{r7}
   1189c:	b083      	sub	sp, #12
   1189e:	af00      	add	r7, sp, #0
   118a0:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
   118a2:	687b      	ldr	r3, [r7, #4]
   118a4:	781b      	ldrb	r3, [r3, #0]
   118a6:	b29a      	uxth	r2, r3
   118a8:	687b      	ldr	r3, [r7, #4]
   118aa:	3301      	adds	r3, #1
   118ac:	781b      	ldrb	r3, [r3, #0]
   118ae:	b29b      	uxth	r3, r3
   118b0:	021b      	lsls	r3, r3, #8
   118b2:	b29b      	uxth	r3, r3
   118b4:	4413      	add	r3, r2
   118b6:	b29b      	uxth	r3, r3
}
   118b8:	4618      	mov	r0, r3
   118ba:	370c      	adds	r7, #12
   118bc:	46bd      	mov	sp, r7
   118be:	f85d 7b04 	ldr.w	r7, [sp], #4
   118c2:	4770      	bx	lr

000118c4 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
   118c4:	b480      	push	{r7}
   118c6:	b083      	sub	sp, #12
   118c8:	af00      	add	r7, sp, #0
   118ca:	6078      	str	r0, [r7, #4]
	return desc[0];
   118cc:	687b      	ldr	r3, [r7, #4]
   118ce:	781b      	ldrb	r3, [r3, #0]
}
   118d0:	4618      	mov	r0, r3
   118d2:	370c      	adds	r7, #12
   118d4:	46bd      	mov	sp, r7
   118d6:	f85d 7b04 	ldr.w	r7, [sp], #4
   118da:	4770      	bx	lr

000118dc <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
   118dc:	b580      	push	{r7, lr}
   118de:	b082      	sub	sp, #8
   118e0:	af00      	add	r7, sp, #0
   118e2:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
   118e4:	6878      	ldr	r0, [r7, #4]
   118e6:	4b05      	ldr	r3, [pc, #20]	; (118fc <usb_desc_next+0x20>)
   118e8:	4798      	blx	r3
   118ea:	4603      	mov	r3, r0
   118ec:	461a      	mov	r2, r3
   118ee:	687b      	ldr	r3, [r7, #4]
   118f0:	4413      	add	r3, r2
}
   118f2:	4618      	mov	r0, r3
   118f4:	3708      	adds	r7, #8
   118f6:	46bd      	mov	sp, r7
   118f8:	bd80      	pop	{r7, pc}
   118fa:	bf00      	nop
   118fc:	000118c5 	.word	0x000118c5

00011900 <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
   11900:	b580      	push	{r7, lr}
   11902:	b08c      	sub	sp, #48	; 0x30
   11904:	af00      	add	r7, sp, #0
   11906:	6078      	str	r0, [r7, #4]
   11908:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
   1190a:	687b      	ldr	r3, [r7, #4]
   1190c:	689b      	ldr	r3, [r3, #8]
   1190e:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
   11910:	683b      	ldr	r3, [r7, #0]
   11912:	681b      	ldr	r3, [r3, #0]
   11914:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
   11916:	2300      	movs	r3, #0
   11918:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   1191c:	e08f      	b.n	11a3e <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
   1191e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11920:	2b00      	cmp	r3, #0
   11922:	d102      	bne.n	1192a <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
   11924:	f06f 0309 	mvn.w	r3, #9
   11928:	e092      	b.n	11a50 <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
   1192a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1192c:	789b      	ldrb	r3, [r3, #2]
   1192e:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
   11930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11932:	795b      	ldrb	r3, [r3, #5]
   11934:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
   11936:	7c7b      	ldrb	r3, [r7, #17]
   11938:	2b02      	cmp	r3, #2
   1193a:	d002      	beq.n	11942 <cdcdf_acm_enable+0x42>
   1193c:	7c7b      	ldrb	r3, [r7, #17]
   1193e:	2b0a      	cmp	r3, #10
   11940:	d121      	bne.n	11986 <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
   11942:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   11946:	6a3a      	ldr	r2, [r7, #32]
   11948:	5cd2      	ldrb	r2, [r2, r3]
   1194a:	7bbb      	ldrb	r3, [r7, #14]
   1194c:	429a      	cmp	r2, r3
   1194e:	d102      	bne.n	11956 <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
   11950:	f06f 0311 	mvn.w	r3, #17
   11954:	e07c      	b.n	11a50 <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
   11956:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   1195a:	6a3a      	ldr	r2, [r7, #32]
   1195c:	5cd3      	ldrb	r3, [r2, r3]
   1195e:	2bff      	cmp	r3, #255	; 0xff
   11960:	d002      	beq.n	11968 <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
   11962:	f06f 031b 	mvn.w	r3, #27
   11966:	e073      	b.n	11a50 <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
   11968:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   1196c:	7bb9      	ldrb	r1, [r7, #14]
   1196e:	6a3a      	ldr	r2, [r7, #32]
   11970:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
   11972:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
   11974:	683b      	ldr	r3, [r7, #0]
   11976:	685b      	ldr	r3, [r3, #4]
   11978:	2205      	movs	r2, #5
   1197a:	4619      	mov	r1, r3
   1197c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1197e:	4b36      	ldr	r3, [pc, #216]	; (11a58 <cdcdf_acm_enable+0x158>)
   11980:	4798      	blx	r3
   11982:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
   11984:	e047      	b.n	11a16 <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
   11986:	f06f 0309 	mvn.w	r3, #9
   1198a:	e061      	b.n	11a50 <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
   1198c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1198e:	789b      	ldrb	r3, [r3, #2]
   11990:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
   11992:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11994:	78db      	ldrb	r3, [r3, #3]
   11996:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
   11998:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1199a:	3304      	adds	r3, #4
   1199c:	4618      	mov	r0, r3
   1199e:	4b2f      	ldr	r3, [pc, #188]	; (11a5c <cdcdf_acm_enable+0x15c>)
   119a0:	4798      	blx	r3
   119a2:	4603      	mov	r3, r0
   119a4:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
   119a6:	7ebb      	ldrb	r3, [r7, #26]
   119a8:	7ef9      	ldrb	r1, [r7, #27]
   119aa:	8bba      	ldrh	r2, [r7, #28]
   119ac:	4618      	mov	r0, r3
   119ae:	4b2c      	ldr	r3, [pc, #176]	; (11a60 <cdcdf_acm_enable+0x160>)
   119b0:	4798      	blx	r3
   119b2:	4603      	mov	r3, r0
   119b4:	2b00      	cmp	r3, #0
   119b6:	d002      	beq.n	119be <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
   119b8:	f06f 0313 	mvn.w	r3, #19
   119bc:	e048      	b.n	11a50 <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
   119be:	7ebb      	ldrb	r3, [r7, #26]
   119c0:	b25b      	sxtb	r3, r3
   119c2:	2b00      	cmp	r3, #0
   119c4:	da0f      	bge.n	119e6 <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
   119c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   119ca:	7eb9      	ldrb	r1, [r7, #26]
   119cc:	6a3a      	ldr	r2, [r7, #32]
   119ce:	4413      	add	r3, r2
   119d0:	460a      	mov	r2, r1
   119d2:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
   119d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   119d8:	6a3a      	ldr	r2, [r7, #32]
   119da:	4413      	add	r3, r2
   119dc:	789b      	ldrb	r3, [r3, #2]
   119de:	4618      	mov	r0, r3
   119e0:	4b20      	ldr	r3, [pc, #128]	; (11a64 <cdcdf_acm_enable+0x164>)
   119e2:	4798      	blx	r3
   119e4:	e007      	b.n	119f6 <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
   119e6:	7eba      	ldrb	r2, [r7, #26]
   119e8:	6a3b      	ldr	r3, [r7, #32]
   119ea:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
   119ec:	6a3b      	ldr	r3, [r7, #32]
   119ee:	791b      	ldrb	r3, [r3, #4]
   119f0:	4618      	mov	r0, r3
   119f2:	4b1c      	ldr	r3, [pc, #112]	; (11a64 <cdcdf_acm_enable+0x164>)
   119f4:	4798      	blx	r3
			}
			desc->sod = ep;
   119f6:	683b      	ldr	r3, [r7, #0]
   119f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   119fa:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
   119fc:	683b      	ldr	r3, [r7, #0]
   119fe:	681b      	ldr	r3, [r3, #0]
   11a00:	4618      	mov	r0, r3
   11a02:	4b19      	ldr	r3, [pc, #100]	; (11a68 <cdcdf_acm_enable+0x168>)
   11a04:	4798      	blx	r3
   11a06:	4602      	mov	r2, r0
   11a08:	683b      	ldr	r3, [r7, #0]
   11a0a:	685b      	ldr	r3, [r3, #4]
   11a0c:	4619      	mov	r1, r3
   11a0e:	4610      	mov	r0, r2
   11a10:	4b16      	ldr	r3, [pc, #88]	; (11a6c <cdcdf_acm_enable+0x16c>)
   11a12:	4798      	blx	r3
   11a14:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
   11a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11a18:	2b00      	cmp	r3, #0
   11a1a:	d1b7      	bne.n	1198c <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
   11a1c:	683b      	ldr	r3, [r7, #0]
   11a1e:	681b      	ldr	r3, [r3, #0]
   11a20:	4618      	mov	r0, r3
   11a22:	4b11      	ldr	r3, [pc, #68]	; (11a68 <cdcdf_acm_enable+0x168>)
   11a24:	4798      	blx	r3
   11a26:	683b      	ldr	r3, [r7, #0]
   11a28:	685b      	ldr	r3, [r3, #4]
   11a2a:	2204      	movs	r2, #4
   11a2c:	4619      	mov	r1, r3
   11a2e:	4b0a      	ldr	r3, [pc, #40]	; (11a58 <cdcdf_acm_enable+0x158>)
   11a30:	4798      	blx	r3
   11a32:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
   11a34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   11a38:	3301      	adds	r3, #1
   11a3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   11a3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   11a42:	2b01      	cmp	r3, #1
   11a44:	f67f af6b 	bls.w	1191e <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
   11a48:	4b09      	ldr	r3, [pc, #36]	; (11a70 <cdcdf_acm_enable+0x170>)
   11a4a:	2201      	movs	r2, #1
   11a4c:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
   11a4e:	2300      	movs	r3, #0
}
   11a50:	4618      	mov	r0, r3
   11a52:	3730      	adds	r7, #48	; 0x30
   11a54:	46bd      	mov	sp, r7
   11a56:	bd80      	pop	{r7, pc}
   11a58:	00012b85 	.word	0x00012b85
   11a5c:	0001189b 	.word	0x0001189b
   11a60:	000090d5 	.word	0x000090d5
   11a64:	000091c1 	.word	0x000091c1
   11a68:	000118dd 	.word	0x000118dd
   11a6c:	00012be1 	.word	0x00012be1
   11a70:	20001a20 	.word	0x20001a20

00011a74 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
   11a74:	b580      	push	{r7, lr}
   11a76:	b088      	sub	sp, #32
   11a78:	af00      	add	r7, sp, #0
   11a7a:	6078      	str	r0, [r7, #4]
   11a7c:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
   11a7e:	687b      	ldr	r3, [r7, #4]
   11a80:	689b      	ldr	r3, [r3, #8]
   11a82:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
   11a84:	683b      	ldr	r3, [r7, #0]
   11a86:	2b00      	cmp	r3, #0
   11a88:	d00c      	beq.n	11aa4 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
   11a8a:	683b      	ldr	r3, [r7, #0]
   11a8c:	681b      	ldr	r3, [r3, #0]
   11a8e:	795b      	ldrb	r3, [r3, #5]
   11a90:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
   11a92:	7c7b      	ldrb	r3, [r7, #17]
   11a94:	2b02      	cmp	r3, #2
   11a96:	d005      	beq.n	11aa4 <cdcdf_acm_disable+0x30>
   11a98:	7c7b      	ldrb	r3, [r7, #17]
   11a9a:	2b0a      	cmp	r3, #10
   11a9c:	d002      	beq.n	11aa4 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
   11a9e:	f06f 0309 	mvn.w	r3, #9
   11aa2:	e035      	b.n	11b10 <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
   11aa4:	2300      	movs	r3, #0
   11aa6:	77fb      	strb	r3, [r7, #31]
   11aa8:	e01f      	b.n	11aea <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
   11aaa:	7ffb      	ldrb	r3, [r7, #31]
   11aac:	69ba      	ldr	r2, [r7, #24]
   11aae:	5cd3      	ldrb	r3, [r2, r3]
   11ab0:	2bff      	cmp	r3, #255	; 0xff
   11ab2:	d016      	beq.n	11ae2 <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
   11ab4:	7ffb      	ldrb	r3, [r7, #31]
   11ab6:	69ba      	ldr	r2, [r7, #24]
   11ab8:	21ff      	movs	r1, #255	; 0xff
   11aba:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
   11abc:	7ffb      	ldrb	r3, [r7, #31]
   11abe:	69ba      	ldr	r2, [r7, #24]
   11ac0:	4413      	add	r3, r2
   11ac2:	789b      	ldrb	r3, [r3, #2]
   11ac4:	2bff      	cmp	r3, #255	; 0xff
   11ac6:	d00d      	beq.n	11ae4 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
   11ac8:	7ffb      	ldrb	r3, [r7, #31]
   11aca:	69ba      	ldr	r2, [r7, #24]
   11acc:	4413      	add	r3, r2
   11ace:	789b      	ldrb	r3, [r3, #2]
   11ad0:	4618      	mov	r0, r3
   11ad2:	4b11      	ldr	r3, [pc, #68]	; (11b18 <cdcdf_acm_disable+0xa4>)
   11ad4:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
   11ad6:	7ffb      	ldrb	r3, [r7, #31]
   11ad8:	69ba      	ldr	r2, [r7, #24]
   11ada:	4413      	add	r3, r2
   11adc:	22ff      	movs	r2, #255	; 0xff
   11ade:	709a      	strb	r2, [r3, #2]
   11ae0:	e000      	b.n	11ae4 <cdcdf_acm_disable+0x70>
			continue;
   11ae2:	bf00      	nop
	for (i = 0; i < 2; i++) {
   11ae4:	7ffb      	ldrb	r3, [r7, #31]
   11ae6:	3301      	adds	r3, #1
   11ae8:	77fb      	strb	r3, [r7, #31]
   11aea:	7ffb      	ldrb	r3, [r7, #31]
   11aec:	2b01      	cmp	r3, #1
   11aee:	d9dc      	bls.n	11aaa <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
   11af0:	69bb      	ldr	r3, [r7, #24]
   11af2:	791b      	ldrb	r3, [r3, #4]
   11af4:	2bff      	cmp	r3, #255	; 0xff
   11af6:	d007      	beq.n	11b08 <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
   11af8:	69bb      	ldr	r3, [r7, #24]
   11afa:	791b      	ldrb	r3, [r3, #4]
   11afc:	4618      	mov	r0, r3
   11afe:	4b06      	ldr	r3, [pc, #24]	; (11b18 <cdcdf_acm_disable+0xa4>)
   11b00:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
   11b02:	69bb      	ldr	r3, [r7, #24]
   11b04:	22ff      	movs	r2, #255	; 0xff
   11b06:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
   11b08:	4b04      	ldr	r3, [pc, #16]	; (11b1c <cdcdf_acm_disable+0xa8>)
   11b0a:	2200      	movs	r2, #0
   11b0c:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
   11b0e:	2300      	movs	r3, #0
}
   11b10:	4618      	mov	r0, r3
   11b12:	3720      	adds	r7, #32
   11b14:	46bd      	mov	sp, r7
   11b16:	bd80      	pop	{r7, pc}
   11b18:	00009171 	.word	0x00009171
   11b1c:	20001a20 	.word	0x20001a20

00011b20 <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
   11b20:	b580      	push	{r7, lr}
   11b22:	b084      	sub	sp, #16
   11b24:	af00      	add	r7, sp, #0
   11b26:	60f8      	str	r0, [r7, #12]
   11b28:	460b      	mov	r3, r1
   11b2a:	607a      	str	r2, [r7, #4]
   11b2c:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
   11b2e:	7afb      	ldrb	r3, [r7, #11]
   11b30:	2b01      	cmp	r3, #1
   11b32:	d009      	beq.n	11b48 <cdcdf_acm_ctrl+0x28>
   11b34:	2b02      	cmp	r3, #2
   11b36:	d00d      	beq.n	11b54 <cdcdf_acm_ctrl+0x34>
   11b38:	2b00      	cmp	r3, #0
   11b3a:	d10e      	bne.n	11b5a <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
   11b3c:	6879      	ldr	r1, [r7, #4]
   11b3e:	68f8      	ldr	r0, [r7, #12]
   11b40:	4b09      	ldr	r3, [pc, #36]	; (11b68 <cdcdf_acm_ctrl+0x48>)
   11b42:	4798      	blx	r3
   11b44:	4603      	mov	r3, r0
   11b46:	e00a      	b.n	11b5e <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
   11b48:	6879      	ldr	r1, [r7, #4]
   11b4a:	68f8      	ldr	r0, [r7, #12]
   11b4c:	4b07      	ldr	r3, [pc, #28]	; (11b6c <cdcdf_acm_ctrl+0x4c>)
   11b4e:	4798      	blx	r3
   11b50:	4603      	mov	r3, r0
   11b52:	e004      	b.n	11b5e <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
   11b54:	f06f 031a 	mvn.w	r3, #26
   11b58:	e001      	b.n	11b5e <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
   11b5a:	f06f 030c 	mvn.w	r3, #12
	}
}
   11b5e:	4618      	mov	r0, r3
   11b60:	3710      	adds	r7, #16
   11b62:	46bd      	mov	sp, r7
   11b64:	bd80      	pop	{r7, pc}
   11b66:	bf00      	nop
   11b68:	00011901 	.word	0x00011901
   11b6c:	00011a75 	.word	0x00011a75

00011b70 <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
   11b70:	b590      	push	{r4, r7, lr}
   11b72:	b087      	sub	sp, #28
   11b74:	af00      	add	r7, sp, #0
   11b76:	4603      	mov	r3, r0
   11b78:	6039      	str	r1, [r7, #0]
   11b7a:	71fb      	strb	r3, [r7, #7]
   11b7c:	4613      	mov	r3, r2
   11b7e:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
   11b80:	683b      	ldr	r3, [r7, #0]
   11b82:	799a      	ldrb	r2, [r3, #6]
   11b84:	79db      	ldrb	r3, [r3, #7]
   11b86:	021b      	lsls	r3, r3, #8
   11b88:	4313      	orrs	r3, r2
   11b8a:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
   11b8c:	4b2b      	ldr	r3, [pc, #172]	; (11c3c <cdcdf_acm_set_req+0xcc>)
   11b8e:	4798      	blx	r3
   11b90:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
   11b92:	683b      	ldr	r3, [r7, #0]
   11b94:	785b      	ldrb	r3, [r3, #1]
   11b96:	2b20      	cmp	r3, #32
   11b98:	d002      	beq.n	11ba0 <cdcdf_acm_set_req+0x30>
   11b9a:	2b22      	cmp	r3, #34	; 0x22
   11b9c:	d034      	beq.n	11c08 <cdcdf_acm_set_req+0x98>
   11b9e:	e046      	b.n	11c2e <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
   11ba0:	8afb      	ldrh	r3, [r7, #22]
   11ba2:	2b07      	cmp	r3, #7
   11ba4:	d002      	beq.n	11bac <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
   11ba6:	f04f 33ff 	mov.w	r3, #4294967295
   11baa:	e042      	b.n	11c32 <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
   11bac:	79bb      	ldrb	r3, [r7, #6]
   11bae:	2b00      	cmp	r3, #0
   11bb0:	d107      	bne.n	11bc2 <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
   11bb2:	8afa      	ldrh	r2, [r7, #22]
   11bb4:	79f8      	ldrb	r0, [r7, #7]
   11bb6:	2300      	movs	r3, #0
   11bb8:	6939      	ldr	r1, [r7, #16]
   11bba:	4c21      	ldr	r4, [pc, #132]	; (11c40 <cdcdf_acm_set_req+0xd0>)
   11bbc:	47a0      	blx	r4
   11bbe:	4603      	mov	r3, r0
   11bc0:	e037      	b.n	11c32 <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
   11bc2:	693a      	ldr	r2, [r7, #16]
   11bc4:	f107 0308 	add.w	r3, r7, #8
   11bc8:	6810      	ldr	r0, [r2, #0]
   11bca:	6018      	str	r0, [r3, #0]
   11bcc:	8891      	ldrh	r1, [r2, #4]
   11bce:	7992      	ldrb	r2, [r2, #6]
   11bd0:	8099      	strh	r1, [r3, #4]
   11bd2:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
   11bd4:	4b1b      	ldr	r3, [pc, #108]	; (11c44 <cdcdf_acm_set_req+0xd4>)
   11bd6:	681b      	ldr	r3, [r3, #0]
   11bd8:	2b00      	cmp	r3, #0
   11bda:	d008      	beq.n	11bee <cdcdf_acm_set_req+0x7e>
   11bdc:	4b19      	ldr	r3, [pc, #100]	; (11c44 <cdcdf_acm_set_req+0xd4>)
   11bde:	681b      	ldr	r3, [r3, #0]
   11be0:	f107 0208 	add.w	r2, r7, #8
   11be4:	4610      	mov	r0, r2
   11be6:	4798      	blx	r3
   11be8:	4603      	mov	r3, r0
   11bea:	2b00      	cmp	r3, #0
   11bec:	d00a      	beq.n	11c04 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
   11bee:	4b16      	ldr	r3, [pc, #88]	; (11c48 <cdcdf_acm_set_req+0xd8>)
   11bf0:	f107 0208 	add.w	r2, r7, #8
   11bf4:	e892 0003 	ldmia.w	r2, {r0, r1}
   11bf8:	6018      	str	r0, [r3, #0]
   11bfa:	3304      	adds	r3, #4
   11bfc:	8019      	strh	r1, [r3, #0]
   11bfe:	3302      	adds	r3, #2
   11c00:	0c0a      	lsrs	r2, r1, #16
   11c02:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
   11c04:	2300      	movs	r3, #0
   11c06:	e014      	b.n	11c32 <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
   11c08:	2300      	movs	r3, #0
   11c0a:	2200      	movs	r2, #0
   11c0c:	2100      	movs	r1, #0
   11c0e:	2000      	movs	r0, #0
   11c10:	4c0b      	ldr	r4, [pc, #44]	; (11c40 <cdcdf_acm_set_req+0xd0>)
   11c12:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
   11c14:	4b0d      	ldr	r3, [pc, #52]	; (11c4c <cdcdf_acm_set_req+0xdc>)
   11c16:	681b      	ldr	r3, [r3, #0]
   11c18:	2b00      	cmp	r3, #0
   11c1a:	d006      	beq.n	11c2a <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
   11c1c:	4b0b      	ldr	r3, [pc, #44]	; (11c4c <cdcdf_acm_set_req+0xdc>)
   11c1e:	681b      	ldr	r3, [r3, #0]
   11c20:	683a      	ldr	r2, [r7, #0]
   11c22:	8852      	ldrh	r2, [r2, #2]
   11c24:	b292      	uxth	r2, r2
   11c26:	4610      	mov	r0, r2
   11c28:	4798      	blx	r3
		}
		return ERR_NONE;
   11c2a:	2300      	movs	r3, #0
   11c2c:	e001      	b.n	11c32 <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
   11c2e:	f06f 030c 	mvn.w	r3, #12
	}
}
   11c32:	4618      	mov	r0, r3
   11c34:	371c      	adds	r7, #28
   11c36:	46bd      	mov	sp, r7
   11c38:	bd90      	pop	{r4, r7, pc}
   11c3a:	bf00      	nop
   11c3c:	00012a81 	.word	0x00012a81
   11c40:	000128f5 	.word	0x000128f5
   11c44:	20001a34 	.word	0x20001a34
   11c48:	20001a28 	.word	0x20001a28
   11c4c:	20001a30 	.word	0x20001a30

00011c50 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
   11c50:	b590      	push	{r4, r7, lr}
   11c52:	b085      	sub	sp, #20
   11c54:	af00      	add	r7, sp, #0
   11c56:	4603      	mov	r3, r0
   11c58:	6039      	str	r1, [r7, #0]
   11c5a:	71fb      	strb	r3, [r7, #7]
   11c5c:	4613      	mov	r3, r2
   11c5e:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
   11c60:	683b      	ldr	r3, [r7, #0]
   11c62:	799a      	ldrb	r2, [r3, #6]
   11c64:	79db      	ldrb	r3, [r3, #7]
   11c66:	021b      	lsls	r3, r3, #8
   11c68:	4313      	orrs	r3, r2
   11c6a:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
   11c6c:	79bb      	ldrb	r3, [r7, #6]
   11c6e:	2b01      	cmp	r3, #1
   11c70:	d101      	bne.n	11c76 <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
   11c72:	2300      	movs	r3, #0
   11c74:	e013      	b.n	11c9e <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
   11c76:	683b      	ldr	r3, [r7, #0]
   11c78:	785b      	ldrb	r3, [r3, #1]
   11c7a:	2b21      	cmp	r3, #33	; 0x21
   11c7c:	d10d      	bne.n	11c9a <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
   11c7e:	89fb      	ldrh	r3, [r7, #14]
   11c80:	2b07      	cmp	r3, #7
   11c82:	d002      	beq.n	11c8a <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
   11c84:	f04f 33ff 	mov.w	r3, #4294967295
   11c88:	e009      	b.n	11c9e <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
   11c8a:	89fa      	ldrh	r2, [r7, #14]
   11c8c:	79f8      	ldrb	r0, [r7, #7]
   11c8e:	2300      	movs	r3, #0
   11c90:	4905      	ldr	r1, [pc, #20]	; (11ca8 <cdcdf_acm_get_req+0x58>)
   11c92:	4c06      	ldr	r4, [pc, #24]	; (11cac <cdcdf_acm_get_req+0x5c>)
   11c94:	47a0      	blx	r4
   11c96:	4603      	mov	r3, r0
   11c98:	e001      	b.n	11c9e <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
   11c9a:	f06f 030c 	mvn.w	r3, #12
	}
}
   11c9e:	4618      	mov	r0, r3
   11ca0:	3714      	adds	r7, #20
   11ca2:	46bd      	mov	sp, r7
   11ca4:	bd90      	pop	{r4, r7, pc}
   11ca6:	bf00      	nop
   11ca8:	20001a28 	.word	0x20001a28
   11cac:	000128f5 	.word	0x000128f5

00011cb0 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
   11cb0:	b580      	push	{r7, lr}
   11cb2:	b082      	sub	sp, #8
   11cb4:	af00      	add	r7, sp, #0
   11cb6:	4603      	mov	r3, r0
   11cb8:	6039      	str	r1, [r7, #0]
   11cba:	71fb      	strb	r3, [r7, #7]
   11cbc:	4613      	mov	r3, r2
   11cbe:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
   11cc0:	683b      	ldr	r3, [r7, #0]
   11cc2:	781b      	ldrb	r3, [r3, #0]
   11cc4:	095b      	lsrs	r3, r3, #5
   11cc6:	b2db      	uxtb	r3, r3
   11cc8:	f003 0303 	and.w	r3, r3, #3
   11ccc:	2b01      	cmp	r3, #1
   11cce:	d002      	beq.n	11cd6 <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
   11cd0:	f06f 0309 	mvn.w	r3, #9
   11cd4:	e026      	b.n	11d24 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
   11cd6:	683b      	ldr	r3, [r7, #0]
   11cd8:	889b      	ldrh	r3, [r3, #4]
   11cda:	b29a      	uxth	r2, r3
   11cdc:	4b13      	ldr	r3, [pc, #76]	; (11d2c <cdcdf_acm_req+0x7c>)
   11cde:	781b      	ldrb	r3, [r3, #0]
   11ce0:	b29b      	uxth	r3, r3
   11ce2:	429a      	cmp	r2, r3
   11ce4:	d007      	beq.n	11cf6 <cdcdf_acm_req+0x46>
   11ce6:	683b      	ldr	r3, [r7, #0]
   11ce8:	889b      	ldrh	r3, [r3, #4]
   11cea:	b29a      	uxth	r2, r3
   11cec:	4b0f      	ldr	r3, [pc, #60]	; (11d2c <cdcdf_acm_req+0x7c>)
   11cee:	785b      	ldrb	r3, [r3, #1]
   11cf0:	b29b      	uxth	r3, r3
   11cf2:	429a      	cmp	r2, r3
   11cf4:	d114      	bne.n	11d20 <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
   11cf6:	683b      	ldr	r3, [r7, #0]
   11cf8:	781b      	ldrb	r3, [r3, #0]
   11cfa:	b25b      	sxtb	r3, r3
   11cfc:	2b00      	cmp	r3, #0
   11cfe:	da07      	bge.n	11d10 <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
   11d00:	79ba      	ldrb	r2, [r7, #6]
   11d02:	79fb      	ldrb	r3, [r7, #7]
   11d04:	6839      	ldr	r1, [r7, #0]
   11d06:	4618      	mov	r0, r3
   11d08:	4b09      	ldr	r3, [pc, #36]	; (11d30 <cdcdf_acm_req+0x80>)
   11d0a:	4798      	blx	r3
   11d0c:	4603      	mov	r3, r0
   11d0e:	e009      	b.n	11d24 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
   11d10:	79ba      	ldrb	r2, [r7, #6]
   11d12:	79fb      	ldrb	r3, [r7, #7]
   11d14:	6839      	ldr	r1, [r7, #0]
   11d16:	4618      	mov	r0, r3
   11d18:	4b06      	ldr	r3, [pc, #24]	; (11d34 <cdcdf_acm_req+0x84>)
   11d1a:	4798      	blx	r3
   11d1c:	4603      	mov	r3, r0
   11d1e:	e001      	b.n	11d24 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
   11d20:	f06f 0309 	mvn.w	r3, #9
	}
}
   11d24:	4618      	mov	r0, r3
   11d26:	3708      	adds	r7, #8
   11d28:	46bd      	mov	sp, r7
   11d2a:	bd80      	pop	{r7, pc}
   11d2c:	20001a20 	.word	0x20001a20
   11d30:	00011c51 	.word	0x00011c51
   11d34:	00011b71 	.word	0x00011b71

00011d38 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
   11d38:	b580      	push	{r7, lr}
   11d3a:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
   11d3c:	4b0b      	ldr	r3, [pc, #44]	; (11d6c <cdcdf_acm_init+0x34>)
   11d3e:	4798      	blx	r3
   11d40:	4603      	mov	r3, r0
   11d42:	2b01      	cmp	r3, #1
   11d44:	d902      	bls.n	11d4c <cdcdf_acm_init+0x14>
		return ERR_DENIED;
   11d46:	f06f 0310 	mvn.w	r3, #16
   11d4a:	e00d      	b.n	11d68 <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
   11d4c:	4b08      	ldr	r3, [pc, #32]	; (11d70 <cdcdf_acm_init+0x38>)
   11d4e:	4a09      	ldr	r2, [pc, #36]	; (11d74 <cdcdf_acm_init+0x3c>)
   11d50:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
   11d52:	4b07      	ldr	r3, [pc, #28]	; (11d70 <cdcdf_acm_init+0x38>)
   11d54:	4a08      	ldr	r2, [pc, #32]	; (11d78 <cdcdf_acm_init+0x40>)
   11d56:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
   11d58:	4805      	ldr	r0, [pc, #20]	; (11d70 <cdcdf_acm_init+0x38>)
   11d5a:	4b08      	ldr	r3, [pc, #32]	; (11d7c <cdcdf_acm_init+0x44>)
   11d5c:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
   11d5e:	4908      	ldr	r1, [pc, #32]	; (11d80 <cdcdf_acm_init+0x48>)
   11d60:	2001      	movs	r0, #1
   11d62:	4b08      	ldr	r3, [pc, #32]	; (11d84 <cdcdf_acm_init+0x4c>)
   11d64:	4798      	blx	r3
	return ERR_NONE;
   11d66:	2300      	movs	r3, #0
}
   11d68:	4618      	mov	r0, r3
   11d6a:	bd80      	pop	{r7, pc}
   11d6c:	00012a99 	.word	0x00012a99
   11d70:	20001a14 	.word	0x20001a14
   11d74:	00011b21 	.word	0x00011b21
   11d78:	20001a20 	.word	0x20001a20
   11d7c:	00012a01 	.word	0x00012a01
   11d80:	20000504 	.word	0x20000504
   11d84:	00012931 	.word	0x00012931

00011d88 <usb_get_u16>:
{
   11d88:	b480      	push	{r7}
   11d8a:	b083      	sub	sp, #12
   11d8c:	af00      	add	r7, sp, #0
   11d8e:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
   11d90:	687b      	ldr	r3, [r7, #4]
   11d92:	781b      	ldrb	r3, [r3, #0]
   11d94:	b29a      	uxth	r2, r3
   11d96:	687b      	ldr	r3, [r7, #4]
   11d98:	3301      	adds	r3, #1
   11d9a:	781b      	ldrb	r3, [r3, #0]
   11d9c:	b29b      	uxth	r3, r3
   11d9e:	021b      	lsls	r3, r3, #8
   11da0:	b29b      	uxth	r3, r3
   11da2:	4413      	add	r3, r2
   11da4:	b29b      	uxth	r3, r3
}
   11da6:	4618      	mov	r0, r3
   11da8:	370c      	adds	r7, #12
   11daa:	46bd      	mov	sp, r7
   11dac:	f85d 7b04 	ldr.w	r7, [sp], #4
   11db0:	4770      	bx	lr

00011db2 <usb_desc_len>:
{
   11db2:	b480      	push	{r7}
   11db4:	b083      	sub	sp, #12
   11db6:	af00      	add	r7, sp, #0
   11db8:	6078      	str	r0, [r7, #4]
	return desc[0];
   11dba:	687b      	ldr	r3, [r7, #4]
   11dbc:	781b      	ldrb	r3, [r3, #0]
}
   11dbe:	4618      	mov	r0, r3
   11dc0:	370c      	adds	r7, #12
   11dc2:	46bd      	mov	sp, r7
   11dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
   11dc8:	4770      	bx	lr
	...

00011dcc <usb_desc_next>:
{
   11dcc:	b580      	push	{r7, lr}
   11dce:	b082      	sub	sp, #8
   11dd0:	af00      	add	r7, sp, #0
   11dd2:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
   11dd4:	6878      	ldr	r0, [r7, #4]
   11dd6:	4b05      	ldr	r3, [pc, #20]	; (11dec <usb_desc_next+0x20>)
   11dd8:	4798      	blx	r3
   11dda:	4603      	mov	r3, r0
   11ddc:	461a      	mov	r2, r3
   11dde:	687b      	ldr	r3, [r7, #4]
   11de0:	4413      	add	r3, r2
}
   11de2:	4618      	mov	r0, r3
   11de4:	3708      	adds	r7, #8
   11de6:	46bd      	mov	sp, r7
   11de8:	bd80      	pop	{r7, pc}
   11dea:	bf00      	nop
   11dec:	00011db3 	.word	0x00011db3

00011df0 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
   11df0:	b580      	push	{r7, lr}
   11df2:	b082      	sub	sp, #8
   11df4:	af00      	add	r7, sp, #0
   11df6:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
   11df8:	687b      	ldr	r3, [r7, #4]
   11dfa:	3302      	adds	r3, #2
   11dfc:	4618      	mov	r0, r3
   11dfe:	4b03      	ldr	r3, [pc, #12]	; (11e0c <usb_cfg_desc_total_len+0x1c>)
   11e00:	4798      	blx	r3
   11e02:	4603      	mov	r3, r0
}
   11e04:	4618      	mov	r0, r3
   11e06:	3708      	adds	r7, #8
   11e08:	46bd      	mov	sp, r7
   11e0a:	bd80      	pop	{r7, pc}
   11e0c:	00011d89 	.word	0x00011d89

00011e10 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
   11e10:	b590      	push	{r4, r7, lr}
   11e12:	b085      	sub	sp, #20
   11e14:	af00      	add	r7, sp, #0
   11e16:	4603      	mov	r3, r0
   11e18:	6039      	str	r1, [r7, #0]
   11e1a:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
   11e1c:	2300      	movs	r3, #0
   11e1e:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
   11e20:	683b      	ldr	r3, [r7, #0]
   11e22:	799a      	ldrb	r2, [r3, #6]
   11e24:	79db      	ldrb	r3, [r3, #7]
   11e26:	021b      	lsls	r3, r3, #8
   11e28:	4313      	orrs	r3, r2
   11e2a:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
   11e2c:	897b      	ldrh	r3, [r7, #10]
   11e2e:	2b12      	cmp	r3, #18
   11e30:	d901      	bls.n	11e36 <usbdc_get_dev_desc+0x26>
		length = 0x12;
   11e32:	2312      	movs	r3, #18
   11e34:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
   11e36:	68fb      	ldr	r3, [r7, #12]
   11e38:	2b00      	cmp	r3, #0
   11e3a:	d10a      	bne.n	11e52 <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
   11e3c:	4b0f      	ldr	r3, [pc, #60]	; (11e7c <usbdc_get_dev_desc+0x6c>)
   11e3e:	681b      	ldr	r3, [r3, #0]
   11e40:	6818      	ldr	r0, [r3, #0]
   11e42:	4b0e      	ldr	r3, [pc, #56]	; (11e7c <usbdc_get_dev_desc+0x6c>)
   11e44:	681b      	ldr	r3, [r3, #0]
   11e46:	685b      	ldr	r3, [r3, #4]
   11e48:	2201      	movs	r2, #1
   11e4a:	4619      	mov	r1, r3
   11e4c:	4b0c      	ldr	r3, [pc, #48]	; (11e80 <usbdc_get_dev_desc+0x70>)
   11e4e:	4798      	blx	r3
   11e50:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
   11e52:	68fb      	ldr	r3, [r7, #12]
   11e54:	2b00      	cmp	r3, #0
   11e56:	d101      	bne.n	11e5c <usbdc_get_dev_desc+0x4c>
		return false;
   11e58:	2300      	movs	r3, #0
   11e5a:	e00b      	b.n	11e74 <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
   11e5c:	897a      	ldrh	r2, [r7, #10]
   11e5e:	79f8      	ldrb	r0, [r7, #7]
   11e60:	2300      	movs	r3, #0
   11e62:	68f9      	ldr	r1, [r7, #12]
   11e64:	4c07      	ldr	r4, [pc, #28]	; (11e84 <usbdc_get_dev_desc+0x74>)
   11e66:	47a0      	blx	r4
   11e68:	4603      	mov	r3, r0
   11e6a:	2b00      	cmp	r3, #0
   11e6c:	d001      	beq.n	11e72 <usbdc_get_dev_desc+0x62>
		return false;
   11e6e:	2300      	movs	r3, #0
   11e70:	e000      	b.n	11e74 <usbdc_get_dev_desc+0x64>
	}
	return true;
   11e72:	2301      	movs	r3, #1
}
   11e74:	4618      	mov	r0, r3
   11e76:	3714      	adds	r7, #20
   11e78:	46bd      	mov	sp, r7
   11e7a:	bd90      	pop	{r4, r7, pc}
   11e7c:	20001a38 	.word	0x20001a38
   11e80:	00012b85 	.word	0x00012b85
   11e84:	000128f5 	.word	0x000128f5

00011e88 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
   11e88:	b590      	push	{r4, r7, lr}
   11e8a:	b087      	sub	sp, #28
   11e8c:	af00      	add	r7, sp, #0
   11e8e:	4603      	mov	r3, r0
   11e90:	6039      	str	r1, [r7, #0]
   11e92:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
   11e94:	2300      	movs	r3, #0
   11e96:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
   11e98:	683b      	ldr	r3, [r7, #0]
   11e9a:	799a      	ldrb	r2, [r3, #6]
   11e9c:	79db      	ldrb	r3, [r3, #7]
   11e9e:	021b      	lsls	r3, r3, #8
   11ea0:	4313      	orrs	r3, r2
   11ea2:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
   11ea4:	683b      	ldr	r3, [r7, #0]
   11ea6:	885b      	ldrh	r3, [r3, #2]
   11ea8:	b29b      	uxth	r3, r3
   11eaa:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
   11eac:	8a7a      	ldrh	r2, [r7, #18]
   11eae:	4b1e      	ldr	r3, [pc, #120]	; (11f28 <usbdc_get_cfg_desc+0xa0>)
   11eb0:	7f1b      	ldrb	r3, [r3, #28]
   11eb2:	3b01      	subs	r3, #1
   11eb4:	4013      	ands	r3, r2
   11eb6:	2b00      	cmp	r3, #0
   11eb8:	bf0c      	ite	eq
   11eba:	2301      	moveq	r3, #1
   11ebc:	2300      	movne	r3, #0
   11ebe:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
   11ec0:	697b      	ldr	r3, [r7, #20]
   11ec2:	2b00      	cmp	r3, #0
   11ec4:	d10c      	bne.n	11ee0 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
   11ec6:	4b18      	ldr	r3, [pc, #96]	; (11f28 <usbdc_get_cfg_desc+0xa0>)
   11ec8:	681b      	ldr	r3, [r3, #0]
   11eca:	6818      	ldr	r0, [r3, #0]
   11ecc:	4b16      	ldr	r3, [pc, #88]	; (11f28 <usbdc_get_cfg_desc+0xa0>)
   11ece:	681b      	ldr	r3, [r3, #0]
   11ed0:	6859      	ldr	r1, [r3, #4]
   11ed2:	7c3b      	ldrb	r3, [r7, #16]
   11ed4:	3301      	adds	r3, #1
   11ed6:	b2db      	uxtb	r3, r3
   11ed8:	461a      	mov	r2, r3
   11eda:	4b14      	ldr	r3, [pc, #80]	; (11f2c <usbdc_get_cfg_desc+0xa4>)
   11edc:	4798      	blx	r3
   11ede:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
   11ee0:	697b      	ldr	r3, [r7, #20]
   11ee2:	2b00      	cmp	r3, #0
   11ee4:	d101      	bne.n	11eea <usbdc_get_cfg_desc+0x62>
		return false;
   11ee6:	2300      	movs	r3, #0
   11ee8:	e019      	b.n	11f1e <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
   11eea:	6978      	ldr	r0, [r7, #20]
   11eec:	4b10      	ldr	r3, [pc, #64]	; (11f30 <usbdc_get_cfg_desc+0xa8>)
   11eee:	4798      	blx	r3
   11ef0:	4603      	mov	r3, r0
   11ef2:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
   11ef4:	8a7a      	ldrh	r2, [r7, #18]
   11ef6:	89fb      	ldrh	r3, [r7, #14]
   11ef8:	429a      	cmp	r2, r3
   11efa:	d802      	bhi.n	11f02 <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
   11efc:	2300      	movs	r3, #0
   11efe:	747b      	strb	r3, [r7, #17]
   11f00:	e001      	b.n	11f06 <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
   11f02:	89fb      	ldrh	r3, [r7, #14]
   11f04:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
   11f06:	8a7a      	ldrh	r2, [r7, #18]
   11f08:	7c7b      	ldrb	r3, [r7, #17]
   11f0a:	79f8      	ldrb	r0, [r7, #7]
   11f0c:	6979      	ldr	r1, [r7, #20]
   11f0e:	4c09      	ldr	r4, [pc, #36]	; (11f34 <usbdc_get_cfg_desc+0xac>)
   11f10:	47a0      	blx	r4
   11f12:	4603      	mov	r3, r0
   11f14:	2b00      	cmp	r3, #0
   11f16:	d001      	beq.n	11f1c <usbdc_get_cfg_desc+0x94>
		return false;
   11f18:	2300      	movs	r3, #0
   11f1a:	e000      	b.n	11f1e <usbdc_get_cfg_desc+0x96>
	}
	return true;
   11f1c:	2301      	movs	r3, #1
}
   11f1e:	4618      	mov	r0, r3
   11f20:	371c      	adds	r7, #28
   11f22:	46bd      	mov	sp, r7
   11f24:	bd90      	pop	{r4, r7, pc}
   11f26:	bf00      	nop
   11f28:	20001a38 	.word	0x20001a38
   11f2c:	00012c45 	.word	0x00012c45
   11f30:	00011df1 	.word	0x00011df1
   11f34:	000128f5 	.word	0x000128f5

00011f38 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
   11f38:	b590      	push	{r4, r7, lr}
   11f3a:	b085      	sub	sp, #20
   11f3c:	af00      	add	r7, sp, #0
   11f3e:	4603      	mov	r3, r0
   11f40:	6039      	str	r1, [r7, #0]
   11f42:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
   11f44:	683b      	ldr	r3, [r7, #0]
   11f46:	799a      	ldrb	r2, [r3, #6]
   11f48:	79db      	ldrb	r3, [r3, #7]
   11f4a:	021b      	lsls	r3, r3, #8
   11f4c:	4313      	orrs	r3, r2
   11f4e:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
   11f50:	683b      	ldr	r3, [r7, #0]
   11f52:	885b      	ldrh	r3, [r3, #2]
   11f54:	b29b      	uxth	r3, r3
   11f56:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
   11f58:	89fa      	ldrh	r2, [r7, #14]
   11f5a:	4b1a      	ldr	r3, [pc, #104]	; (11fc4 <usbdc_get_str_desc+0x8c>)
   11f5c:	7f1b      	ldrb	r3, [r3, #28]
   11f5e:	3b01      	subs	r3, #1
   11f60:	4013      	ands	r3, r2
   11f62:	2b00      	cmp	r3, #0
   11f64:	bf0c      	ite	eq
   11f66:	2301      	moveq	r3, #1
   11f68:	2300      	movne	r3, #0
   11f6a:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
   11f6c:	4b15      	ldr	r3, [pc, #84]	; (11fc4 <usbdc_get_str_desc+0x8c>)
   11f6e:	681b      	ldr	r3, [r3, #0]
   11f70:	6818      	ldr	r0, [r3, #0]
   11f72:	4b14      	ldr	r3, [pc, #80]	; (11fc4 <usbdc_get_str_desc+0x8c>)
   11f74:	681b      	ldr	r3, [r3, #0]
   11f76:	685b      	ldr	r3, [r3, #4]
   11f78:	7b3a      	ldrb	r2, [r7, #12]
   11f7a:	4619      	mov	r1, r3
   11f7c:	4b12      	ldr	r3, [pc, #72]	; (11fc8 <usbdc_get_str_desc+0x90>)
   11f7e:	4798      	blx	r3
   11f80:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
   11f82:	68bb      	ldr	r3, [r7, #8]
   11f84:	2b00      	cmp	r3, #0
   11f86:	d101      	bne.n	11f8c <usbdc_get_str_desc+0x54>
		return false;
   11f88:	2300      	movs	r3, #0
   11f8a:	e017      	b.n	11fbc <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
   11f8c:	68bb      	ldr	r3, [r7, #8]
   11f8e:	781b      	ldrb	r3, [r3, #0]
   11f90:	b29b      	uxth	r3, r3
   11f92:	89fa      	ldrh	r2, [r7, #14]
   11f94:	429a      	cmp	r2, r3
   11f96:	d802      	bhi.n	11f9e <usbdc_get_str_desc+0x66>
		need_zlp = false;
   11f98:	2300      	movs	r3, #0
   11f9a:	737b      	strb	r3, [r7, #13]
   11f9c:	e002      	b.n	11fa4 <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
   11f9e:	68bb      	ldr	r3, [r7, #8]
   11fa0:	781b      	ldrb	r3, [r3, #0]
   11fa2:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
   11fa4:	89fa      	ldrh	r2, [r7, #14]
   11fa6:	7b7b      	ldrb	r3, [r7, #13]
   11fa8:	79f8      	ldrb	r0, [r7, #7]
   11faa:	68b9      	ldr	r1, [r7, #8]
   11fac:	4c07      	ldr	r4, [pc, #28]	; (11fcc <usbdc_get_str_desc+0x94>)
   11fae:	47a0      	blx	r4
   11fb0:	4603      	mov	r3, r0
   11fb2:	2b00      	cmp	r3, #0
   11fb4:	d001      	beq.n	11fba <usbdc_get_str_desc+0x82>
		return false;
   11fb6:	2300      	movs	r3, #0
   11fb8:	e000      	b.n	11fbc <usbdc_get_str_desc+0x84>
	}
	return true;
   11fba:	2301      	movs	r3, #1
}
   11fbc:	4618      	mov	r0, r3
   11fbe:	3714      	adds	r7, #20
   11fc0:	46bd      	mov	sp, r7
   11fc2:	bd90      	pop	{r4, r7, pc}
   11fc4:	20001a38 	.word	0x20001a38
   11fc8:	00012cbd 	.word	0x00012cbd
   11fcc:	000128f5 	.word	0x000128f5

00011fd0 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
   11fd0:	b580      	push	{r7, lr}
   11fd2:	b084      	sub	sp, #16
   11fd4:	af00      	add	r7, sp, #0
   11fd6:	4603      	mov	r3, r0
   11fd8:	6039      	str	r1, [r7, #0]
   11fda:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
   11fdc:	683b      	ldr	r3, [r7, #0]
   11fde:	885b      	ldrh	r3, [r3, #2]
   11fe0:	b29b      	uxth	r3, r3
   11fe2:	0a1b      	lsrs	r3, r3, #8
   11fe4:	b29b      	uxth	r3, r3
   11fe6:	73fb      	strb	r3, [r7, #15]
	switch (type) {
   11fe8:	7bfb      	ldrb	r3, [r7, #15]
   11fea:	2b02      	cmp	r3, #2
   11fec:	d00d      	beq.n	1200a <usbdc_get_desc_req+0x3a>
   11fee:	2b03      	cmp	r3, #3
   11ff0:	d012      	beq.n	12018 <usbdc_get_desc_req+0x48>
   11ff2:	2b01      	cmp	r3, #1
   11ff4:	d002      	beq.n	11ffc <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
   11ff6:	bf00      	nop
	}
	return false;
   11ff8:	2300      	movs	r3, #0
   11ffa:	e013      	b.n	12024 <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
   11ffc:	79fb      	ldrb	r3, [r7, #7]
   11ffe:	6839      	ldr	r1, [r7, #0]
   12000:	4618      	mov	r0, r3
   12002:	4b0a      	ldr	r3, [pc, #40]	; (1202c <usbdc_get_desc_req+0x5c>)
   12004:	4798      	blx	r3
   12006:	4603      	mov	r3, r0
   12008:	e00c      	b.n	12024 <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
   1200a:	79fb      	ldrb	r3, [r7, #7]
   1200c:	6839      	ldr	r1, [r7, #0]
   1200e:	4618      	mov	r0, r3
   12010:	4b07      	ldr	r3, [pc, #28]	; (12030 <usbdc_get_desc_req+0x60>)
   12012:	4798      	blx	r3
   12014:	4603      	mov	r3, r0
   12016:	e005      	b.n	12024 <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
   12018:	79fb      	ldrb	r3, [r7, #7]
   1201a:	6839      	ldr	r1, [r7, #0]
   1201c:	4618      	mov	r0, r3
   1201e:	4b05      	ldr	r3, [pc, #20]	; (12034 <usbdc_get_desc_req+0x64>)
   12020:	4798      	blx	r3
   12022:	4603      	mov	r3, r0
}
   12024:	4618      	mov	r0, r3
   12026:	3710      	adds	r7, #16
   12028:	46bd      	mov	sp, r7
   1202a:	bd80      	pop	{r7, pc}
   1202c:	00011e11 	.word	0x00011e11
   12030:	00011e89 	.word	0x00011e89
   12034:	00011f39 	.word	0x00011f39

00012038 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
   12038:	b590      	push	{r4, r7, lr}
   1203a:	b085      	sub	sp, #20
   1203c:	af00      	add	r7, sp, #0
   1203e:	4603      	mov	r3, r0
   12040:	6039      	str	r1, [r7, #0]
   12042:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
   12044:	683b      	ldr	r3, [r7, #0]
   12046:	781b      	ldrb	r3, [r3, #0]
   12048:	f003 031f 	and.w	r3, r3, #31
   1204c:	2b00      	cmp	r3, #0
   1204e:	db1b      	blt.n	12088 <usbdc_get_status_req+0x50>
   12050:	2b01      	cmp	r3, #1
   12052:	dd02      	ble.n	1205a <usbdc_get_status_req+0x22>
   12054:	2b02      	cmp	r3, #2
   12056:	d003      	beq.n	12060 <usbdc_get_status_req+0x28>
   12058:	e016      	b.n	12088 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
   1205a:	2300      	movs	r3, #0
   1205c:	60fb      	str	r3, [r7, #12]
		break;
   1205e:	e015      	b.n	1208c <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
   12060:	683b      	ldr	r3, [r7, #0]
   12062:	889b      	ldrh	r3, [r3, #4]
   12064:	b29b      	uxth	r3, r3
   12066:	b2db      	uxtb	r3, r3
   12068:	2102      	movs	r1, #2
   1206a:	4618      	mov	r0, r3
   1206c:	4b0f      	ldr	r3, [pc, #60]	; (120ac <usbdc_get_status_req+0x74>)
   1206e:	4798      	blx	r3
   12070:	4603      	mov	r3, r0
   12072:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
   12074:	68fb      	ldr	r3, [r7, #12]
   12076:	2b00      	cmp	r3, #0
   12078:	da01      	bge.n	1207e <usbdc_get_status_req+0x46>
			return false;
   1207a:	2300      	movs	r3, #0
   1207c:	e012      	b.n	120a4 <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
   1207e:	68fb      	ldr	r3, [r7, #12]
   12080:	f003 0301 	and.w	r3, r3, #1
   12084:	60fb      	str	r3, [r7, #12]
		break;
   12086:	e001      	b.n	1208c <usbdc_get_status_req+0x54>
	default:
		return false;
   12088:	2300      	movs	r3, #0
   1208a:	e00b      	b.n	120a4 <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
   1208c:	4b08      	ldr	r3, [pc, #32]	; (120b0 <usbdc_get_status_req+0x78>)
   1208e:	695b      	ldr	r3, [r3, #20]
   12090:	89ba      	ldrh	r2, [r7, #12]
   12092:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
   12094:	4b06      	ldr	r3, [pc, #24]	; (120b0 <usbdc_get_status_req+0x78>)
   12096:	6959      	ldr	r1, [r3, #20]
   12098:	79f8      	ldrb	r0, [r7, #7]
   1209a:	2300      	movs	r3, #0
   1209c:	2202      	movs	r2, #2
   1209e:	4c05      	ldr	r4, [pc, #20]	; (120b4 <usbdc_get_status_req+0x7c>)
   120a0:	47a0      	blx	r4
	return true;
   120a2:	2301      	movs	r3, #1
}
   120a4:	4618      	mov	r0, r3
   120a6:	3714      	adds	r7, #20
   120a8:	46bd      	mov	sp, r7
   120aa:	bd90      	pop	{r4, r7, pc}
   120ac:	0000941d 	.word	0x0000941d
   120b0:	20001a38 	.word	0x20001a38
   120b4:	000128f5 	.word	0x000128f5

000120b8 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
   120b8:	b590      	push	{r4, r7, lr}
   120ba:	b085      	sub	sp, #20
   120bc:	af00      	add	r7, sp, #0
   120be:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
   120c0:	4b1f      	ldr	r3, [pc, #124]	; (12140 <usbdc_get_interface+0x88>)
   120c2:	691b      	ldr	r3, [r3, #16]
   120c4:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
   120c6:	4b1e      	ldr	r3, [pc, #120]	; (12140 <usbdc_get_interface+0x88>)
   120c8:	7f5b      	ldrb	r3, [r3, #29]
   120ca:	461a      	mov	r2, r3
   120cc:	687b      	ldr	r3, [r7, #4]
   120ce:	889b      	ldrh	r3, [r3, #4]
   120d0:	b29b      	uxth	r3, r3
   120d2:	fa42 f303 	asr.w	r3, r2, r3
   120d6:	f003 0301 	and.w	r3, r3, #1
   120da:	2b00      	cmp	r3, #0
   120dc:	d128      	bne.n	12130 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
   120de:	4b18      	ldr	r3, [pc, #96]	; (12140 <usbdc_get_interface+0x88>)
   120e0:	695b      	ldr	r3, [r3, #20]
   120e2:	2200      	movs	r2, #0
   120e4:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
   120e6:	4b16      	ldr	r3, [pc, #88]	; (12140 <usbdc_get_interface+0x88>)
   120e8:	6959      	ldr	r1, [r3, #20]
   120ea:	2300      	movs	r3, #0
   120ec:	2201      	movs	r2, #1
   120ee:	2000      	movs	r0, #0
   120f0:	4c14      	ldr	r4, [pc, #80]	; (12144 <usbdc_get_interface+0x8c>)
   120f2:	47a0      	blx	r4
		return true;
   120f4:	2301      	movs	r3, #1
   120f6:	e01f      	b.n	12138 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
   120f8:	68fb      	ldr	r3, [r7, #12]
   120fa:	685b      	ldr	r3, [r3, #4]
   120fc:	687a      	ldr	r2, [r7, #4]
   120fe:	2102      	movs	r1, #2
   12100:	68f8      	ldr	r0, [r7, #12]
   12102:	4798      	blx	r3
   12104:	60b8      	str	r0, [r7, #8]
   12106:	68bb      	ldr	r3, [r7, #8]
   12108:	2b00      	cmp	r3, #0
   1210a:	da03      	bge.n	12114 <usbdc_get_interface+0x5c>
			func = func->next;
   1210c:	68fb      	ldr	r3, [r7, #12]
   1210e:	681b      	ldr	r3, [r3, #0]
   12110:	60fb      	str	r3, [r7, #12]
   12112:	e00d      	b.n	12130 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
   12114:	4b0a      	ldr	r3, [pc, #40]	; (12140 <usbdc_get_interface+0x88>)
   12116:	695b      	ldr	r3, [r3, #20]
   12118:	68ba      	ldr	r2, [r7, #8]
   1211a:	b2d2      	uxtb	r2, r2
   1211c:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
   1211e:	4b08      	ldr	r3, [pc, #32]	; (12140 <usbdc_get_interface+0x88>)
   12120:	6959      	ldr	r1, [r3, #20]
   12122:	2300      	movs	r3, #0
   12124:	2201      	movs	r2, #1
   12126:	2000      	movs	r0, #0
   12128:	4c06      	ldr	r4, [pc, #24]	; (12144 <usbdc_get_interface+0x8c>)
   1212a:	47a0      	blx	r4
			return true;
   1212c:	2301      	movs	r3, #1
   1212e:	e003      	b.n	12138 <usbdc_get_interface+0x80>
	while (NULL != func) {
   12130:	68fb      	ldr	r3, [r7, #12]
   12132:	2b00      	cmp	r3, #0
   12134:	d1e0      	bne.n	120f8 <usbdc_get_interface+0x40>
		}
	}
	return false;
   12136:	2300      	movs	r3, #0
}
   12138:	4618      	mov	r0, r3
   1213a:	3714      	adds	r7, #20
   1213c:	46bd      	mov	sp, r7
   1213e:	bd90      	pop	{r4, r7, pc}
   12140:	20001a38 	.word	0x20001a38
   12144:	000128f5 	.word	0x000128f5

00012148 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
   12148:	b590      	push	{r4, r7, lr}
   1214a:	b083      	sub	sp, #12
   1214c:	af00      	add	r7, sp, #0
   1214e:	4603      	mov	r3, r0
   12150:	6039      	str	r1, [r7, #0]
   12152:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
   12154:	683b      	ldr	r3, [r7, #0]
   12156:	785b      	ldrb	r3, [r3, #1]
   12158:	2b0a      	cmp	r3, #10
   1215a:	d83a      	bhi.n	121d2 <usbdc_get_req+0x8a>
   1215c:	a201      	add	r2, pc, #4	; (adr r2, 12164 <usbdc_get_req+0x1c>)
   1215e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   12162:	bf00      	nop
   12164:	000121bb 	.word	0x000121bb
   12168:	000121d3 	.word	0x000121d3
   1216c:	000121d3 	.word	0x000121d3
   12170:	000121d3 	.word	0x000121d3
   12174:	000121d3 	.word	0x000121d3
   12178:	000121d3 	.word	0x000121d3
   1217c:	00012191 	.word	0x00012191
   12180:	000121d3 	.word	0x000121d3
   12184:	0001219f 	.word	0x0001219f
   12188:	000121d3 	.word	0x000121d3
   1218c:	000121c9 	.word	0x000121c9
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
   12190:	79fb      	ldrb	r3, [r7, #7]
   12192:	6839      	ldr	r1, [r7, #0]
   12194:	4618      	mov	r0, r3
   12196:	4b11      	ldr	r3, [pc, #68]	; (121dc <usbdc_get_req+0x94>)
   12198:	4798      	blx	r3
   1219a:	4603      	mov	r3, r0
   1219c:	e01a      	b.n	121d4 <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
   1219e:	4b10      	ldr	r3, [pc, #64]	; (121e0 <usbdc_get_req+0x98>)
   121a0:	695b      	ldr	r3, [r3, #20]
   121a2:	4a0f      	ldr	r2, [pc, #60]	; (121e0 <usbdc_get_req+0x98>)
   121a4:	7ed2      	ldrb	r2, [r2, #27]
   121a6:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
   121a8:	4b0d      	ldr	r3, [pc, #52]	; (121e0 <usbdc_get_req+0x98>)
   121aa:	6959      	ldr	r1, [r3, #20]
   121ac:	79f8      	ldrb	r0, [r7, #7]
   121ae:	2300      	movs	r3, #0
   121b0:	2201      	movs	r2, #1
   121b2:	4c0c      	ldr	r4, [pc, #48]	; (121e4 <usbdc_get_req+0x9c>)
   121b4:	47a0      	blx	r4
		return true;
   121b6:	2301      	movs	r3, #1
   121b8:	e00c      	b.n	121d4 <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
   121ba:	79fb      	ldrb	r3, [r7, #7]
   121bc:	6839      	ldr	r1, [r7, #0]
   121be:	4618      	mov	r0, r3
   121c0:	4b09      	ldr	r3, [pc, #36]	; (121e8 <usbdc_get_req+0xa0>)
   121c2:	4798      	blx	r3
   121c4:	4603      	mov	r3, r0
   121c6:	e005      	b.n	121d4 <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
   121c8:	6838      	ldr	r0, [r7, #0]
   121ca:	4b08      	ldr	r3, [pc, #32]	; (121ec <usbdc_get_req+0xa4>)
   121cc:	4798      	blx	r3
   121ce:	4603      	mov	r3, r0
   121d0:	e000      	b.n	121d4 <usbdc_get_req+0x8c>
	default:
		return false;
   121d2:	2300      	movs	r3, #0
	}
}
   121d4:	4618      	mov	r0, r3
   121d6:	370c      	adds	r7, #12
   121d8:	46bd      	mov	sp, r7
   121da:	bd90      	pop	{r4, r7, pc}
   121dc:	00011fd1 	.word	0x00011fd1
   121e0:	20001a38 	.word	0x20001a38
   121e4:	000128f5 	.word	0x000128f5
   121e8:	00012039 	.word	0x00012039
   121ec:	000120b9 	.word	0x000120b9

000121f0 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
   121f0:	b590      	push	{r4, r7, lr}
   121f2:	b083      	sub	sp, #12
   121f4:	af00      	add	r7, sp, #0
   121f6:	4603      	mov	r3, r0
   121f8:	6039      	str	r1, [r7, #0]
   121fa:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
   121fc:	683b      	ldr	r3, [r7, #0]
   121fe:	781b      	ldrb	r3, [r3, #0]
   12200:	f003 031f 	and.w	r3, r3, #31
   12204:	2b02      	cmp	r3, #2
   12206:	d116      	bne.n	12236 <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
   12208:	683b      	ldr	r3, [r7, #0]
   1220a:	88db      	ldrh	r3, [r3, #6]
   1220c:	b29b      	uxth	r3, r3
   1220e:	2b00      	cmp	r3, #0
   12210:	d001      	beq.n	12216 <usbdc_clear_ftr_req+0x26>
			return false;
   12212:	2300      	movs	r3, #0
   12214:	e010      	b.n	12238 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
   12216:	683b      	ldr	r3, [r7, #0]
   12218:	889b      	ldrh	r3, [r3, #4]
   1221a:	b29b      	uxth	r3, r3
   1221c:	b2db      	uxtb	r3, r3
   1221e:	2100      	movs	r1, #0
   12220:	4618      	mov	r0, r3
   12222:	4b07      	ldr	r3, [pc, #28]	; (12240 <usbdc_clear_ftr_req+0x50>)
   12224:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
   12226:	79f8      	ldrb	r0, [r7, #7]
   12228:	2301      	movs	r3, #1
   1222a:	2200      	movs	r2, #0
   1222c:	2100      	movs	r1, #0
   1222e:	4c05      	ldr	r4, [pc, #20]	; (12244 <usbdc_clear_ftr_req+0x54>)
   12230:	47a0      	blx	r4
		return true;
   12232:	2301      	movs	r3, #1
   12234:	e000      	b.n	12238 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
   12236:	2300      	movs	r3, #0
	}
}
   12238:	4618      	mov	r0, r3
   1223a:	370c      	adds	r7, #12
   1223c:	46bd      	mov	sp, r7
   1223e:	bd90      	pop	{r4, r7, pc}
   12240:	0000941d 	.word	0x0000941d
   12244:	000128f5 	.word	0x000128f5

00012248 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
   12248:	b590      	push	{r4, r7, lr}
   1224a:	b083      	sub	sp, #12
   1224c:	af00      	add	r7, sp, #0
   1224e:	4603      	mov	r3, r0
   12250:	6039      	str	r1, [r7, #0]
   12252:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
   12254:	683b      	ldr	r3, [r7, #0]
   12256:	781b      	ldrb	r3, [r3, #0]
   12258:	f003 031f 	and.w	r3, r3, #31
   1225c:	2b02      	cmp	r3, #2
   1225e:	d116      	bne.n	1228e <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
   12260:	683b      	ldr	r3, [r7, #0]
   12262:	88db      	ldrh	r3, [r3, #6]
   12264:	b29b      	uxth	r3, r3
   12266:	2b00      	cmp	r3, #0
   12268:	d001      	beq.n	1226e <usbdc_set_ftr_req+0x26>
			return false;
   1226a:	2300      	movs	r3, #0
   1226c:	e010      	b.n	12290 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
   1226e:	683b      	ldr	r3, [r7, #0]
   12270:	889b      	ldrh	r3, [r3, #4]
   12272:	b29b      	uxth	r3, r3
   12274:	b2db      	uxtb	r3, r3
   12276:	2101      	movs	r1, #1
   12278:	4618      	mov	r0, r3
   1227a:	4b07      	ldr	r3, [pc, #28]	; (12298 <usbdc_set_ftr_req+0x50>)
   1227c:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
   1227e:	79f8      	ldrb	r0, [r7, #7]
   12280:	2301      	movs	r3, #1
   12282:	2200      	movs	r2, #0
   12284:	2100      	movs	r1, #0
   12286:	4c05      	ldr	r4, [pc, #20]	; (1229c <usbdc_set_ftr_req+0x54>)
   12288:	47a0      	blx	r4
		return true;
   1228a:	2301      	movs	r3, #1
   1228c:	e000      	b.n	12290 <usbdc_set_ftr_req+0x48>
	default:
		return false;
   1228e:	2300      	movs	r3, #0
	}
}
   12290:	4618      	mov	r0, r3
   12292:	370c      	adds	r7, #12
   12294:	46bd      	mov	sp, r7
   12296:	bd90      	pop	{r4, r7, pc}
   12298:	0000941d 	.word	0x0000941d
   1229c:	000128f5 	.word	0x000128f5

000122a0 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
   122a0:	b580      	push	{r7, lr}
   122a2:	b082      	sub	sp, #8
   122a4:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
   122a6:	4b0a      	ldr	r3, [pc, #40]	; (122d0 <usbdc_unconfig+0x30>)
   122a8:	691b      	ldr	r3, [r3, #16]
   122aa:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
   122ac:	e008      	b.n	122c0 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
   122ae:	687b      	ldr	r3, [r7, #4]
   122b0:	685b      	ldr	r3, [r3, #4]
   122b2:	2200      	movs	r2, #0
   122b4:	2101      	movs	r1, #1
   122b6:	6878      	ldr	r0, [r7, #4]
   122b8:	4798      	blx	r3
		func = func->next;
   122ba:	687b      	ldr	r3, [r7, #4]
   122bc:	681b      	ldr	r3, [r3, #0]
   122be:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
   122c0:	687b      	ldr	r3, [r7, #4]
   122c2:	2b00      	cmp	r3, #0
   122c4:	d1f3      	bne.n	122ae <usbdc_unconfig+0xe>
	}
}
   122c6:	bf00      	nop
   122c8:	3708      	adds	r7, #8
   122ca:	46bd      	mov	sp, r7
   122cc:	bd80      	pop	{r7, pc}
   122ce:	bf00      	nop
   122d0:	20001a38 	.word	0x20001a38

000122d4 <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
   122d4:	b580      	push	{r7, lr}
   122d6:	b088      	sub	sp, #32
   122d8:	af00      	add	r7, sp, #0
   122da:	4603      	mov	r3, r0
   122dc:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
   122de:	2300      	movs	r3, #0
   122e0:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
   122e2:	23ff      	movs	r3, #255	; 0xff
   122e4:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
   122e6:	79fb      	ldrb	r3, [r7, #7]
   122e8:	2b00      	cmp	r3, #0
   122ea:	d103      	bne.n	122f4 <usbdc_set_config+0x20>
		usbdc_unconfig();
   122ec:	4b2e      	ldr	r3, [pc, #184]	; (123a8 <usbdc_set_config+0xd4>)
   122ee:	4798      	blx	r3
		return true;
   122f0:	2301      	movs	r3, #1
   122f2:	e055      	b.n	123a0 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
   122f4:	69bb      	ldr	r3, [r7, #24]
   122f6:	2b00      	cmp	r3, #0
   122f8:	d10a      	bne.n	12310 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
   122fa:	4b2c      	ldr	r3, [pc, #176]	; (123ac <usbdc_set_config+0xd8>)
   122fc:	681b      	ldr	r3, [r3, #0]
   122fe:	6818      	ldr	r0, [r3, #0]
   12300:	4b2a      	ldr	r3, [pc, #168]	; (123ac <usbdc_set_config+0xd8>)
   12302:	681b      	ldr	r3, [r3, #0]
   12304:	685b      	ldr	r3, [r3, #4]
   12306:	79fa      	ldrb	r2, [r7, #7]
   12308:	4619      	mov	r1, r3
   1230a:	4b29      	ldr	r3, [pc, #164]	; (123b0 <usbdc_set_config+0xdc>)
   1230c:	4798      	blx	r3
   1230e:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
   12310:	69bb      	ldr	r3, [r7, #24]
   12312:	2b00      	cmp	r3, #0
   12314:	d101      	bne.n	1231a <usbdc_set_config+0x46>
		return false;
   12316:	2300      	movs	r3, #0
   12318:	e042      	b.n	123a0 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
   1231a:	69b8      	ldr	r0, [r7, #24]
   1231c:	4b25      	ldr	r3, [pc, #148]	; (123b4 <usbdc_set_config+0xe0>)
   1231e:	4798      	blx	r3
   12320:	4603      	mov	r3, r0
   12322:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
   12324:	8abb      	ldrh	r3, [r7, #20]
   12326:	69ba      	ldr	r2, [r7, #24]
   12328:	4413      	add	r3, r2
   1232a:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
   1232c:	693b      	ldr	r3, [r7, #16]
   1232e:	2204      	movs	r2, #4
   12330:	4619      	mov	r1, r3
   12332:	69b8      	ldr	r0, [r7, #24]
   12334:	4b20      	ldr	r3, [pc, #128]	; (123b8 <usbdc_set_config+0xe4>)
   12336:	4798      	blx	r3
   12338:	4603      	mov	r3, r0
   1233a:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
   1233c:	e02c      	b.n	12398 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
   1233e:	68fb      	ldr	r3, [r7, #12]
   12340:	3302      	adds	r3, #2
   12342:	781b      	ldrb	r3, [r3, #0]
   12344:	7dfa      	ldrb	r2, [r7, #23]
   12346:	429a      	cmp	r2, r3
   12348:	d018      	beq.n	1237c <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
   1234a:	68fb      	ldr	r3, [r7, #12]
   1234c:	789b      	ldrb	r3, [r3, #2]
   1234e:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
   12350:	4b16      	ldr	r3, [pc, #88]	; (123ac <usbdc_set_config+0xd8>)
   12352:	691b      	ldr	r3, [r3, #16]
   12354:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
   12356:	e00c      	b.n	12372 <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
   12358:	69fb      	ldr	r3, [r7, #28]
   1235a:	685b      	ldr	r3, [r3, #4]
   1235c:	f107 020c 	add.w	r2, r7, #12
   12360:	2100      	movs	r1, #0
   12362:	69f8      	ldr	r0, [r7, #28]
   12364:	4798      	blx	r3
   12366:	4603      	mov	r3, r0
   12368:	2b00      	cmp	r3, #0
   1236a:	d006      	beq.n	1237a <usbdc_set_config+0xa6>
					func = func->next;
   1236c:	69fb      	ldr	r3, [r7, #28]
   1236e:	681b      	ldr	r3, [r3, #0]
   12370:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
   12372:	69fb      	ldr	r3, [r7, #28]
   12374:	2b00      	cmp	r3, #0
   12376:	d1ef      	bne.n	12358 <usbdc_set_config+0x84>
   12378:	e000      	b.n	1237c <usbdc_set_config+0xa8>
				} else {
					break;
   1237a:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
   1237c:	68fb      	ldr	r3, [r7, #12]
   1237e:	4618      	mov	r0, r3
   12380:	4b0e      	ldr	r3, [pc, #56]	; (123bc <usbdc_set_config+0xe8>)
   12382:	4798      	blx	r3
   12384:	4603      	mov	r3, r0
   12386:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
   12388:	68fb      	ldr	r3, [r7, #12]
   1238a:	6939      	ldr	r1, [r7, #16]
   1238c:	2204      	movs	r2, #4
   1238e:	4618      	mov	r0, r3
   12390:	4b09      	ldr	r3, [pc, #36]	; (123b8 <usbdc_set_config+0xe4>)
   12392:	4798      	blx	r3
   12394:	4603      	mov	r3, r0
   12396:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
   12398:	68fb      	ldr	r3, [r7, #12]
   1239a:	2b00      	cmp	r3, #0
   1239c:	d1cf      	bne.n	1233e <usbdc_set_config+0x6a>
	}
	return true;
   1239e:	2301      	movs	r3, #1
}
   123a0:	4618      	mov	r0, r3
   123a2:	3720      	adds	r7, #32
   123a4:	46bd      	mov	sp, r7
   123a6:	bd80      	pop	{r7, pc}
   123a8:	000122a1 	.word	0x000122a1
   123ac:	20001a38 	.word	0x20001a38
   123b0:	00012c45 	.word	0x00012c45
   123b4:	00011df1 	.word	0x00011df1
   123b8:	00012b85 	.word	0x00012b85
   123bc:	00011dcd 	.word	0x00011dcd

000123c0 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
   123c0:	b580      	push	{r7, lr}
   123c2:	b082      	sub	sp, #8
   123c4:	af00      	add	r7, sp, #0
   123c6:	4603      	mov	r3, r0
   123c8:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
   123ca:	79fb      	ldrb	r3, [r7, #7]
   123cc:	4618      	mov	r0, r3
   123ce:	4b03      	ldr	r3, [pc, #12]	; (123dc <usbdc_set_address+0x1c>)
   123d0:	4798      	blx	r3
}
   123d2:	bf00      	nop
   123d4:	3708      	adds	r7, #8
   123d6:	46bd      	mov	sp, r7
   123d8:	bd80      	pop	{r7, pc}
   123da:	bf00      	nop
   123dc:	0000908d 	.word	0x0000908d

000123e0 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
   123e0:	b590      	push	{r4, r7, lr}
   123e2:	b087      	sub	sp, #28
   123e4:	af00      	add	r7, sp, #0
   123e6:	4603      	mov	r3, r0
   123e8:	460a      	mov	r2, r1
   123ea:	80fb      	strh	r3, [r7, #6]
   123ec:	4613      	mov	r3, r2
   123ee:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
   123f0:	2300      	movs	r3, #0
   123f2:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
   123f4:	693b      	ldr	r3, [r7, #16]
   123f6:	2b00      	cmp	r3, #0
   123f8:	d10b      	bne.n	12412 <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
   123fa:	4b43      	ldr	r3, [pc, #268]	; (12508 <usbdc_set_interface+0x128>)
   123fc:	681b      	ldr	r3, [r3, #0]
   123fe:	6818      	ldr	r0, [r3, #0]
   12400:	4b41      	ldr	r3, [pc, #260]	; (12508 <usbdc_set_interface+0x128>)
   12402:	681b      	ldr	r3, [r3, #0]
   12404:	6859      	ldr	r1, [r3, #4]
   12406:	4b40      	ldr	r3, [pc, #256]	; (12508 <usbdc_set_interface+0x128>)
   12408:	7edb      	ldrb	r3, [r3, #27]
   1240a:	461a      	mov	r2, r3
   1240c:	4b3f      	ldr	r3, [pc, #252]	; (1250c <usbdc_set_interface+0x12c>)
   1240e:	4798      	blx	r3
   12410:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
   12412:	693b      	ldr	r3, [r7, #16]
   12414:	2b00      	cmp	r3, #0
   12416:	d101      	bne.n	1241c <usbdc_set_interface+0x3c>
		return false;
   12418:	2300      	movs	r3, #0
   1241a:	e071      	b.n	12500 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
   1241c:	693b      	ldr	r3, [r7, #16]
   1241e:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
   12420:	6938      	ldr	r0, [r7, #16]
   12422:	4b3b      	ldr	r3, [pc, #236]	; (12510 <usbdc_set_interface+0x130>)
   12424:	4798      	blx	r3
   12426:	4603      	mov	r3, r0
   12428:	461a      	mov	r2, r3
   1242a:	693b      	ldr	r3, [r7, #16]
   1242c:	4413      	add	r3, r2
   1242e:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
   12430:	68bb      	ldr	r3, [r7, #8]
   12432:	68f9      	ldr	r1, [r7, #12]
   12434:	2204      	movs	r2, #4
   12436:	4618      	mov	r0, r3
   12438:	4b36      	ldr	r3, [pc, #216]	; (12514 <usbdc_set_interface+0x134>)
   1243a:	4798      	blx	r3
   1243c:	6138      	str	r0, [r7, #16]
   1243e:	693b      	ldr	r3, [r7, #16]
   12440:	2b00      	cmp	r3, #0
   12442:	d113      	bne.n	1246c <usbdc_set_interface+0x8c>
		return false;
   12444:	2300      	movs	r3, #0
   12446:	e05b      	b.n	12500 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
   12448:	68bb      	ldr	r3, [r7, #8]
   1244a:	4618      	mov	r0, r3
   1244c:	4b32      	ldr	r3, [pc, #200]	; (12518 <usbdc_set_interface+0x138>)
   1244e:	4798      	blx	r3
   12450:	4603      	mov	r3, r0
   12452:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
   12454:	68bb      	ldr	r3, [r7, #8]
   12456:	68f9      	ldr	r1, [r7, #12]
   12458:	2204      	movs	r2, #4
   1245a:	4618      	mov	r0, r3
   1245c:	4b2d      	ldr	r3, [pc, #180]	; (12514 <usbdc_set_interface+0x134>)
   1245e:	4798      	blx	r3
   12460:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
   12462:	693b      	ldr	r3, [r7, #16]
   12464:	2b00      	cmp	r3, #0
   12466:	d101      	bne.n	1246c <usbdc_set_interface+0x8c>
			return false;
   12468:	2300      	movs	r3, #0
   1246a:	e049      	b.n	12500 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
   1246c:	693b      	ldr	r3, [r7, #16]
   1246e:	3302      	adds	r3, #2
   12470:	781b      	ldrb	r3, [r3, #0]
   12472:	b29b      	uxth	r3, r3
   12474:	88ba      	ldrh	r2, [r7, #4]
   12476:	429a      	cmp	r2, r3
   12478:	d1e6      	bne.n	12448 <usbdc_set_interface+0x68>
   1247a:	693b      	ldr	r3, [r7, #16]
   1247c:	3303      	adds	r3, #3
   1247e:	781b      	ldrb	r3, [r3, #0]
   12480:	b29b      	uxth	r3, r3
   12482:	88fa      	ldrh	r2, [r7, #6]
   12484:	429a      	cmp	r2, r3
   12486:	d1df      	bne.n	12448 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
   12488:	693b      	ldr	r3, [r7, #16]
   1248a:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
   1248c:	4b1e      	ldr	r3, [pc, #120]	; (12508 <usbdc_set_interface+0x128>)
   1248e:	691b      	ldr	r3, [r3, #16]
   12490:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
   12492:	e031      	b.n	124f8 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
   12494:	697b      	ldr	r3, [r7, #20]
   12496:	685b      	ldr	r3, [r3, #4]
   12498:	f107 0208 	add.w	r2, r7, #8
   1249c:	2101      	movs	r1, #1
   1249e:	6978      	ldr	r0, [r7, #20]
   124a0:	4798      	blx	r3
   124a2:	4603      	mov	r3, r0
   124a4:	2b00      	cmp	r3, #0
   124a6:	d003      	beq.n	124b0 <usbdc_set_interface+0xd0>
			func = func->next;
   124a8:	697b      	ldr	r3, [r7, #20]
   124aa:	681b      	ldr	r3, [r3, #0]
   124ac:	617b      	str	r3, [r7, #20]
   124ae:	e023      	b.n	124f8 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
   124b0:	697b      	ldr	r3, [r7, #20]
   124b2:	685b      	ldr	r3, [r3, #4]
   124b4:	f107 0208 	add.w	r2, r7, #8
   124b8:	2100      	movs	r1, #0
   124ba:	6978      	ldr	r0, [r7, #20]
   124bc:	4798      	blx	r3
   124be:	4603      	mov	r3, r0
   124c0:	2b00      	cmp	r3, #0
   124c2:	d117      	bne.n	124f4 <usbdc_set_interface+0x114>
			if (alt_set) {
   124c4:	88fb      	ldrh	r3, [r7, #6]
   124c6:	2b00      	cmp	r3, #0
   124c8:	d00c      	beq.n	124e4 <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
   124ca:	4b0f      	ldr	r3, [pc, #60]	; (12508 <usbdc_set_interface+0x128>)
   124cc:	7f5b      	ldrb	r3, [r3, #29]
   124ce:	b25a      	sxtb	r2, r3
   124d0:	88bb      	ldrh	r3, [r7, #4]
   124d2:	2101      	movs	r1, #1
   124d4:	fa01 f303 	lsl.w	r3, r1, r3
   124d8:	b25b      	sxtb	r3, r3
   124da:	4313      	orrs	r3, r2
   124dc:	b25b      	sxtb	r3, r3
   124de:	b2da      	uxtb	r2, r3
   124e0:	4b09      	ldr	r3, [pc, #36]	; (12508 <usbdc_set_interface+0x128>)
   124e2:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
   124e4:	2300      	movs	r3, #0
   124e6:	2200      	movs	r2, #0
   124e8:	2100      	movs	r1, #0
   124ea:	2000      	movs	r0, #0
   124ec:	4c0b      	ldr	r4, [pc, #44]	; (1251c <usbdc_set_interface+0x13c>)
   124ee:	47a0      	blx	r4
			return true;
   124f0:	2301      	movs	r3, #1
   124f2:	e005      	b.n	12500 <usbdc_set_interface+0x120>
		} else {
			return false;
   124f4:	2300      	movs	r3, #0
   124f6:	e003      	b.n	12500 <usbdc_set_interface+0x120>
	while (NULL != func) {
   124f8:	697b      	ldr	r3, [r7, #20]
   124fa:	2b00      	cmp	r3, #0
   124fc:	d1ca      	bne.n	12494 <usbdc_set_interface+0xb4>
		}
	}

	return false;
   124fe:	2300      	movs	r3, #0
}
   12500:	4618      	mov	r0, r3
   12502:	371c      	adds	r7, #28
   12504:	46bd      	mov	sp, r7
   12506:	bd90      	pop	{r4, r7, pc}
   12508:	20001a38 	.word	0x20001a38
   1250c:	00012c45 	.word	0x00012c45
   12510:	00011df1 	.word	0x00011df1
   12514:	00012b85 	.word	0x00012b85
   12518:	00011dcd 	.word	0x00011dcd
   1251c:	000128f5 	.word	0x000128f5

00012520 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
   12520:	b590      	push	{r4, r7, lr}
   12522:	b083      	sub	sp, #12
   12524:	af00      	add	r7, sp, #0
   12526:	4603      	mov	r3, r0
   12528:	6039      	str	r1, [r7, #0]
   1252a:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
   1252c:	683b      	ldr	r3, [r7, #0]
   1252e:	785b      	ldrb	r3, [r3, #1]
   12530:	3b01      	subs	r3, #1
   12532:	2b0a      	cmp	r3, #10
   12534:	d85b      	bhi.n	125ee <usbdc_set_req+0xce>
   12536:	a201      	add	r2, pc, #4	; (adr r2, 1253c <usbdc_set_req+0x1c>)
   12538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1253c:	000125bb 	.word	0x000125bb
   12540:	000125ef 	.word	0x000125ef
   12544:	000125c9 	.word	0x000125c9
   12548:	000125ef 	.word	0x000125ef
   1254c:	00012569 	.word	0x00012569
   12550:	000125ef 	.word	0x000125ef
   12554:	000125ef 	.word	0x000125ef
   12558:	000125ef 	.word	0x000125ef
   1255c:	00012583 	.word	0x00012583
   12560:	000125ef 	.word	0x000125ef
   12564:	000125d7 	.word	0x000125d7
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
   12568:	79f8      	ldrb	r0, [r7, #7]
   1256a:	2301      	movs	r3, #1
   1256c:	2200      	movs	r2, #0
   1256e:	2100      	movs	r1, #0
   12570:	4c21      	ldr	r4, [pc, #132]	; (125f8 <usbdc_set_req+0xd8>)
   12572:	47a0      	blx	r4
   12574:	4603      	mov	r3, r0
   12576:	2b00      	cmp	r3, #0
   12578:	bf0c      	ite	eq
   1257a:	2301      	moveq	r3, #1
   1257c:	2300      	movne	r3, #0
   1257e:	b2db      	uxtb	r3, r3
   12580:	e036      	b.n	125f0 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
   12582:	683b      	ldr	r3, [r7, #0]
   12584:	885b      	ldrh	r3, [r3, #2]
   12586:	b29b      	uxth	r3, r3
   12588:	b2db      	uxtb	r3, r3
   1258a:	4618      	mov	r0, r3
   1258c:	4b1b      	ldr	r3, [pc, #108]	; (125fc <usbdc_set_req+0xdc>)
   1258e:	4798      	blx	r3
   12590:	4603      	mov	r3, r0
   12592:	f083 0301 	eor.w	r3, r3, #1
   12596:	b2db      	uxtb	r3, r3
   12598:	2b00      	cmp	r3, #0
   1259a:	d001      	beq.n	125a0 <usbdc_set_req+0x80>
			return false;
   1259c:	2300      	movs	r3, #0
   1259e:	e027      	b.n	125f0 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
   125a0:	79f8      	ldrb	r0, [r7, #7]
   125a2:	2301      	movs	r3, #1
   125a4:	2200      	movs	r2, #0
   125a6:	2100      	movs	r1, #0
   125a8:	4c13      	ldr	r4, [pc, #76]	; (125f8 <usbdc_set_req+0xd8>)
   125aa:	47a0      	blx	r4
   125ac:	4603      	mov	r3, r0
   125ae:	2b00      	cmp	r3, #0
   125b0:	bf0c      	ite	eq
   125b2:	2301      	moveq	r3, #1
   125b4:	2300      	movne	r3, #0
   125b6:	b2db      	uxtb	r3, r3
   125b8:	e01a      	b.n	125f0 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
   125ba:	79fb      	ldrb	r3, [r7, #7]
   125bc:	6839      	ldr	r1, [r7, #0]
   125be:	4618      	mov	r0, r3
   125c0:	4b0f      	ldr	r3, [pc, #60]	; (12600 <usbdc_set_req+0xe0>)
   125c2:	4798      	blx	r3
   125c4:	4603      	mov	r3, r0
   125c6:	e013      	b.n	125f0 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
   125c8:	79fb      	ldrb	r3, [r7, #7]
   125ca:	6839      	ldr	r1, [r7, #0]
   125cc:	4618      	mov	r0, r3
   125ce:	4b0d      	ldr	r3, [pc, #52]	; (12604 <usbdc_set_req+0xe4>)
   125d0:	4798      	blx	r3
   125d2:	4603      	mov	r3, r0
   125d4:	e00c      	b.n	125f0 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
   125d6:	683b      	ldr	r3, [r7, #0]
   125d8:	885b      	ldrh	r3, [r3, #2]
   125da:	b29a      	uxth	r2, r3
   125dc:	683b      	ldr	r3, [r7, #0]
   125de:	889b      	ldrh	r3, [r3, #4]
   125e0:	b29b      	uxth	r3, r3
   125e2:	4619      	mov	r1, r3
   125e4:	4610      	mov	r0, r2
   125e6:	4b08      	ldr	r3, [pc, #32]	; (12608 <usbdc_set_req+0xe8>)
   125e8:	4798      	blx	r3
   125ea:	4603      	mov	r3, r0
   125ec:	e000      	b.n	125f0 <usbdc_set_req+0xd0>
	default:
		return false;
   125ee:	2300      	movs	r3, #0
	}
}
   125f0:	4618      	mov	r0, r3
   125f2:	370c      	adds	r7, #12
   125f4:	46bd      	mov	sp, r7
   125f6:	bd90      	pop	{r4, r7, pc}
   125f8:	000128f5 	.word	0x000128f5
   125fc:	000122d5 	.word	0x000122d5
   12600:	000121f1 	.word	0x000121f1
   12604:	00012249 	.word	0x00012249
   12608:	000123e1 	.word	0x000123e1

0001260c <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
   1260c:	b580      	push	{r7, lr}
   1260e:	b082      	sub	sp, #8
   12610:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
   12612:	4b0a      	ldr	r3, [pc, #40]	; (1263c <usbdc_sof_notify+0x30>)
   12614:	685b      	ldr	r3, [r3, #4]
   12616:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
   12618:	e009      	b.n	1262e <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
   1261a:	687b      	ldr	r3, [r7, #4]
   1261c:	685b      	ldr	r3, [r3, #4]
   1261e:	2b00      	cmp	r3, #0
   12620:	d002      	beq.n	12628 <usbdc_sof_notify+0x1c>
			sof->cb();
   12622:	687b      	ldr	r3, [r7, #4]
   12624:	685b      	ldr	r3, [r3, #4]
   12626:	4798      	blx	r3
		}
		sof = sof->next;
   12628:	687b      	ldr	r3, [r7, #4]
   1262a:	681b      	ldr	r3, [r3, #0]
   1262c:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
   1262e:	687b      	ldr	r3, [r7, #4]
   12630:	2b00      	cmp	r3, #0
   12632:	d1f2      	bne.n	1261a <usbdc_sof_notify+0xe>
	}
}
   12634:	bf00      	nop
   12636:	3708      	adds	r7, #8
   12638:	46bd      	mov	sp, r7
   1263a:	bd80      	pop	{r7, pc}
   1263c:	20001a38 	.word	0x20001a38

00012640 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
   12640:	b580      	push	{r7, lr}
   12642:	b084      	sub	sp, #16
   12644:	af00      	add	r7, sp, #0
   12646:	4603      	mov	r3, r0
   12648:	6039      	str	r1, [r7, #0]
   1264a:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
   1264c:	4b0b      	ldr	r3, [pc, #44]	; (1267c <usbdc_change_notify+0x3c>)
   1264e:	68db      	ldr	r3, [r3, #12]
   12650:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
   12652:	e00c      	b.n	1266e <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
   12654:	68fb      	ldr	r3, [r7, #12]
   12656:	685b      	ldr	r3, [r3, #4]
   12658:	2b00      	cmp	r3, #0
   1265a:	d005      	beq.n	12668 <usbdc_change_notify+0x28>
			cg->cb(change, value);
   1265c:	68fb      	ldr	r3, [r7, #12]
   1265e:	685b      	ldr	r3, [r3, #4]
   12660:	79fa      	ldrb	r2, [r7, #7]
   12662:	6839      	ldr	r1, [r7, #0]
   12664:	4610      	mov	r0, r2
   12666:	4798      	blx	r3
		}
		cg = cg->next;
   12668:	68fb      	ldr	r3, [r7, #12]
   1266a:	681b      	ldr	r3, [r3, #0]
   1266c:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
   1266e:	68fb      	ldr	r3, [r7, #12]
   12670:	2b00      	cmp	r3, #0
   12672:	d1ef      	bne.n	12654 <usbdc_change_notify+0x14>
	}
}
   12674:	bf00      	nop
   12676:	3710      	adds	r7, #16
   12678:	46bd      	mov	sp, r7
   1267a:	bd80      	pop	{r7, pc}
   1267c:	20001a38 	.word	0x20001a38

00012680 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
   12680:	b580      	push	{r7, lr}
   12682:	b084      	sub	sp, #16
   12684:	af00      	add	r7, sp, #0
   12686:	4603      	mov	r3, r0
   12688:	6039      	str	r1, [r7, #0]
   1268a:	71fb      	strb	r3, [r7, #7]
   1268c:	4613      	mov	r3, r2
   1268e:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
   12690:	4b12      	ldr	r3, [pc, #72]	; (126dc <usbdc_request_handler+0x5c>)
   12692:	689b      	ldr	r3, [r3, #8]
   12694:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
   12696:	e019      	b.n	126cc <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
   12698:	68fb      	ldr	r3, [r7, #12]
   1269a:	685b      	ldr	r3, [r3, #4]
   1269c:	2b00      	cmp	r3, #0
   1269e:	d012      	beq.n	126c6 <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
   126a0:	68fb      	ldr	r3, [r7, #12]
   126a2:	685b      	ldr	r3, [r3, #4]
   126a4:	79ba      	ldrb	r2, [r7, #6]
   126a6:	79f8      	ldrb	r0, [r7, #7]
   126a8:	6839      	ldr	r1, [r7, #0]
   126aa:	4798      	blx	r3
   126ac:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
   126ae:	68bb      	ldr	r3, [r7, #8]
   126b0:	2b00      	cmp	r3, #0
   126b2:	d101      	bne.n	126b8 <usbdc_request_handler+0x38>
				return true;
   126b4:	2301      	movs	r3, #1
   126b6:	e00d      	b.n	126d4 <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
   126b8:	68bb      	ldr	r3, [r7, #8]
   126ba:	f113 0f0a 	cmn.w	r3, #10
   126be:	d002      	beq.n	126c6 <usbdc_request_handler+0x46>
				return -1;
   126c0:	f04f 33ff 	mov.w	r3, #4294967295
   126c4:	e006      	b.n	126d4 <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
   126c6:	68fb      	ldr	r3, [r7, #12]
   126c8:	681b      	ldr	r3, [r3, #0]
   126ca:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
   126cc:	68fb      	ldr	r3, [r7, #12]
   126ce:	2b00      	cmp	r3, #0
   126d0:	d1e2      	bne.n	12698 <usbdc_request_handler+0x18>
	}
	return false;
   126d2:	2300      	movs	r3, #0
}
   126d4:	4618      	mov	r0, r3
   126d6:	3710      	adds	r7, #16
   126d8:	46bd      	mov	sp, r7
   126da:	bd80      	pop	{r7, pc}
   126dc:	20001a38 	.word	0x20001a38

000126e0 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
   126e0:	b580      	push	{r7, lr}
   126e2:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
   126e4:	4b01      	ldr	r3, [pc, #4]	; (126ec <usbd_sof_cb+0xc>)
   126e6:	4798      	blx	r3
}
   126e8:	bf00      	nop
   126ea:	bd80      	pop	{r7, pc}
   126ec:	0001260d 	.word	0x0001260d

000126f0 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
   126f0:	b580      	push	{r7, lr}
   126f2:	b082      	sub	sp, #8
   126f4:	af00      	add	r7, sp, #0
   126f6:	4603      	mov	r3, r0
   126f8:	6039      	str	r1, [r7, #0]
   126fa:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
   126fc:	79fb      	ldrb	r3, [r7, #7]
   126fe:	2200      	movs	r2, #0
   12700:	6839      	ldr	r1, [r7, #0]
   12702:	4618      	mov	r0, r3
   12704:	4b14      	ldr	r3, [pc, #80]	; (12758 <usbdc_cb_ctl_req+0x68>)
   12706:	4798      	blx	r3
   12708:	4603      	mov	r3, r0
   1270a:	f1b3 3fff 	cmp.w	r3, #4294967295
   1270e:	d00b      	beq.n	12728 <usbdc_cb_ctl_req+0x38>
   12710:	2b01      	cmp	r3, #1
   12712:	d007      	beq.n	12724 <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
   12714:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
   12716:	683b      	ldr	r3, [r7, #0]
   12718:	781b      	ldrb	r3, [r3, #0]
   1271a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
   1271e:	2b00      	cmp	r3, #0
   12720:	d007      	beq.n	12732 <usbdc_cb_ctl_req+0x42>
   12722:	e003      	b.n	1272c <usbdc_cb_ctl_req+0x3c>
		return true;
   12724:	2301      	movs	r3, #1
   12726:	e013      	b.n	12750 <usbdc_cb_ctl_req+0x60>
		return false;
   12728:	2300      	movs	r3, #0
   1272a:	e011      	b.n	12750 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
   1272c:	2b80      	cmp	r3, #128	; 0x80
   1272e:	d007      	beq.n	12740 <usbdc_cb_ctl_req+0x50>
   12730:	e00d      	b.n	1274e <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
   12732:	79fb      	ldrb	r3, [r7, #7]
   12734:	6839      	ldr	r1, [r7, #0]
   12736:	4618      	mov	r0, r3
   12738:	4b08      	ldr	r3, [pc, #32]	; (1275c <usbdc_cb_ctl_req+0x6c>)
   1273a:	4798      	blx	r3
   1273c:	4603      	mov	r3, r0
   1273e:	e007      	b.n	12750 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
   12740:	79fb      	ldrb	r3, [r7, #7]
   12742:	6839      	ldr	r1, [r7, #0]
   12744:	4618      	mov	r0, r3
   12746:	4b06      	ldr	r3, [pc, #24]	; (12760 <usbdc_cb_ctl_req+0x70>)
   12748:	4798      	blx	r3
   1274a:	4603      	mov	r3, r0
   1274c:	e000      	b.n	12750 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
   1274e:	2300      	movs	r3, #0
	}
}
   12750:	4618      	mov	r0, r3
   12752:	3708      	adds	r7, #8
   12754:	46bd      	mov	sp, r7
   12756:	bd80      	pop	{r7, pc}
   12758:	00012681 	.word	0x00012681
   1275c:	00012521 	.word	0x00012521
   12760:	00012149 	.word	0x00012149

00012764 <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
   12764:	b580      	push	{r7, lr}
   12766:	b082      	sub	sp, #8
   12768:	af00      	add	r7, sp, #0
   1276a:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
   1276c:	687b      	ldr	r3, [r7, #4]
   1276e:	781b      	ldrb	r3, [r3, #0]
   12770:	2b00      	cmp	r3, #0
   12772:	d135      	bne.n	127e0 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
   12774:	687b      	ldr	r3, [r7, #4]
   12776:	785b      	ldrb	r3, [r3, #1]
   12778:	2b05      	cmp	r3, #5
   1277a:	d019      	beq.n	127b0 <usbdc_ctrl_status_end+0x4c>
   1277c:	2b09      	cmp	r3, #9
   1277e:	d000      	beq.n	12782 <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
   12780:	e02f      	b.n	127e2 <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
   12782:	687b      	ldr	r3, [r7, #4]
   12784:	885b      	ldrh	r3, [r3, #2]
   12786:	b29b      	uxth	r3, r3
   12788:	b2da      	uxtb	r2, r3
   1278a:	4b17      	ldr	r3, [pc, #92]	; (127e8 <usbdc_ctrl_status_end+0x84>)
   1278c:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
   1278e:	687b      	ldr	r3, [r7, #4]
   12790:	885b      	ldrh	r3, [r3, #2]
   12792:	b29b      	uxth	r3, r3
   12794:	2b00      	cmp	r3, #0
   12796:	d001      	beq.n	1279c <usbdc_ctrl_status_end+0x38>
   12798:	2204      	movs	r2, #4
   1279a:	e000      	b.n	1279e <usbdc_ctrl_status_end+0x3a>
   1279c:	2203      	movs	r2, #3
   1279e:	4b12      	ldr	r3, [pc, #72]	; (127e8 <usbdc_ctrl_status_end+0x84>)
   127a0:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
   127a2:	4b11      	ldr	r3, [pc, #68]	; (127e8 <usbdc_ctrl_status_end+0x84>)
   127a4:	7e9b      	ldrb	r3, [r3, #26]
   127a6:	4619      	mov	r1, r3
   127a8:	2001      	movs	r0, #1
   127aa:	4b10      	ldr	r3, [pc, #64]	; (127ec <usbdc_ctrl_status_end+0x88>)
   127ac:	4798      	blx	r3
		break;
   127ae:	e018      	b.n	127e2 <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
   127b0:	687b      	ldr	r3, [r7, #4]
   127b2:	885b      	ldrh	r3, [r3, #2]
   127b4:	b29b      	uxth	r3, r3
   127b6:	b2db      	uxtb	r3, r3
   127b8:	4618      	mov	r0, r3
   127ba:	4b0d      	ldr	r3, [pc, #52]	; (127f0 <usbdc_ctrl_status_end+0x8c>)
   127bc:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
   127be:	687b      	ldr	r3, [r7, #4]
   127c0:	885b      	ldrh	r3, [r3, #2]
   127c2:	b29b      	uxth	r3, r3
   127c4:	2b00      	cmp	r3, #0
   127c6:	d001      	beq.n	127cc <usbdc_ctrl_status_end+0x68>
   127c8:	2203      	movs	r2, #3
   127ca:	e000      	b.n	127ce <usbdc_ctrl_status_end+0x6a>
   127cc:	2202      	movs	r2, #2
   127ce:	4b06      	ldr	r3, [pc, #24]	; (127e8 <usbdc_ctrl_status_end+0x84>)
   127d0:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
   127d2:	4b05      	ldr	r3, [pc, #20]	; (127e8 <usbdc_ctrl_status_end+0x84>)
   127d4:	7e9b      	ldrb	r3, [r3, #26]
   127d6:	4619      	mov	r1, r3
   127d8:	2001      	movs	r0, #1
   127da:	4b04      	ldr	r3, [pc, #16]	; (127ec <usbdc_ctrl_status_end+0x88>)
   127dc:	4798      	blx	r3
		break;
   127de:	e000      	b.n	127e2 <usbdc_ctrl_status_end+0x7e>
		return;
   127e0:	bf00      	nop
	}
}
   127e2:	3708      	adds	r7, #8
   127e4:	46bd      	mov	sp, r7
   127e6:	bd80      	pop	{r7, pc}
   127e8:	20001a38 	.word	0x20001a38
   127ec:	00012641 	.word	0x00012641
   127f0:	000123c1 	.word	0x000123c1

000127f4 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
   127f4:	b580      	push	{r7, lr}
   127f6:	b082      	sub	sp, #8
   127f8:	af00      	add	r7, sp, #0
   127fa:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
   127fc:	2201      	movs	r2, #1
   127fe:	6879      	ldr	r1, [r7, #4]
   12800:	2000      	movs	r0, #0
   12802:	4b03      	ldr	r3, [pc, #12]	; (12810 <usbdc_ctrl_data_end+0x1c>)
   12804:	4798      	blx	r3
	return false;
   12806:	2300      	movs	r3, #0
}
   12808:	4618      	mov	r0, r3
   1280a:	3708      	adds	r7, #8
   1280c:	46bd      	mov	sp, r7
   1280e:	bd80      	pop	{r7, pc}
   12810:	00012681 	.word	0x00012681

00012814 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
   12814:	b580      	push	{r7, lr}
   12816:	b082      	sub	sp, #8
   12818:	af00      	add	r7, sp, #0
   1281a:	4603      	mov	r3, r0
   1281c:	603a      	str	r2, [r7, #0]
   1281e:	71fb      	strb	r3, [r7, #7]
   12820:	460b      	mov	r3, r1
   12822:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
   12824:	79bb      	ldrb	r3, [r7, #6]
   12826:	2b00      	cmp	r3, #0
   12828:	d002      	beq.n	12830 <usbdc_cb_ctl_done+0x1c>
   1282a:	2b01      	cmp	r3, #1
   1282c:	d004      	beq.n	12838 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
   1282e:	e008      	b.n	12842 <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
   12830:	6838      	ldr	r0, [r7, #0]
   12832:	4b06      	ldr	r3, [pc, #24]	; (1284c <usbdc_cb_ctl_done+0x38>)
   12834:	4798      	blx	r3
		break;
   12836:	e004      	b.n	12842 <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
   12838:	6838      	ldr	r0, [r7, #0]
   1283a:	4b05      	ldr	r3, [pc, #20]	; (12850 <usbdc_cb_ctl_done+0x3c>)
   1283c:	4798      	blx	r3
   1283e:	4603      	mov	r3, r0
   12840:	e000      	b.n	12844 <usbdc_cb_ctl_done+0x30>
	}
	return false;
   12842:	2300      	movs	r3, #0
}
   12844:	4618      	mov	r0, r3
   12846:	3708      	adds	r7, #8
   12848:	46bd      	mov	sp, r7
   1284a:	bd80      	pop	{r7, pc}
   1284c:	00012765 	.word	0x00012765
   12850:	000127f5 	.word	0x000127f5

00012854 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
   12854:	b580      	push	{r7, lr}
   12856:	af00      	add	r7, sp, #0
	usbdc_unconfig();
   12858:	4b10      	ldr	r3, [pc, #64]	; (1289c <usbdc_reset+0x48>)
   1285a:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
   1285c:	4b10      	ldr	r3, [pc, #64]	; (128a0 <usbdc_reset+0x4c>)
   1285e:	2202      	movs	r2, #2
   12860:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
   12862:	4b0f      	ldr	r3, [pc, #60]	; (128a0 <usbdc_reset+0x4c>)
   12864:	2200      	movs	r2, #0
   12866:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
   12868:	4b0d      	ldr	r3, [pc, #52]	; (128a0 <usbdc_reset+0x4c>)
   1286a:	2200      	movs	r2, #0
   1286c:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
   1286e:	2000      	movs	r0, #0
   12870:	4b0c      	ldr	r3, [pc, #48]	; (128a4 <usbdc_reset+0x50>)
   12872:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
   12874:	4b0a      	ldr	r3, [pc, #40]	; (128a0 <usbdc_reset+0x4c>)
   12876:	7f1b      	ldrb	r3, [r3, #28]
   12878:	4618      	mov	r0, r3
   1287a:	4b0b      	ldr	r3, [pc, #44]	; (128a8 <usbdc_reset+0x54>)
   1287c:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
   1287e:	4a0b      	ldr	r2, [pc, #44]	; (128ac <usbdc_reset+0x58>)
   12880:	2100      	movs	r1, #0
   12882:	2000      	movs	r0, #0
   12884:	4b0a      	ldr	r3, [pc, #40]	; (128b0 <usbdc_reset+0x5c>)
   12886:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
   12888:	4a0a      	ldr	r2, [pc, #40]	; (128b4 <usbdc_reset+0x60>)
   1288a:	2102      	movs	r1, #2
   1288c:	2000      	movs	r0, #0
   1288e:	4b08      	ldr	r3, [pc, #32]	; (128b0 <usbdc_reset+0x5c>)
   12890:	4798      	blx	r3
	usb_d_ep_enable(0);
   12892:	2000      	movs	r0, #0
   12894:	4b08      	ldr	r3, [pc, #32]	; (128b8 <usbdc_reset+0x64>)
   12896:	4798      	blx	r3
}
   12898:	bf00      	nop
   1289a:	bd80      	pop	{r7, pc}
   1289c:	000122a1 	.word	0x000122a1
   128a0:	20001a38 	.word	0x20001a38
   128a4:	00009171 	.word	0x00009171
   128a8:	000090ad 	.word	0x000090ad
   128ac:	000126f1 	.word	0x000126f1
   128b0:	00009471 	.word	0x00009471
   128b4:	00012815 	.word	0x00012815
   128b8:	000091c1 	.word	0x000091c1

000128bc <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
   128bc:	b580      	push	{r7, lr}
   128be:	b082      	sub	sp, #8
   128c0:	af00      	add	r7, sp, #0
   128c2:	4603      	mov	r3, r0
   128c4:	6039      	str	r1, [r7, #0]
   128c6:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
   128c8:	79fb      	ldrb	r3, [r7, #7]
   128ca:	2b00      	cmp	r3, #0
   128cc:	d002      	beq.n	128d4 <usbd_event_cb+0x18>
   128ce:	2b01      	cmp	r3, #1
   128d0:	d005      	beq.n	128de <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
   128d2:	e007      	b.n	128e4 <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
   128d4:	6839      	ldr	r1, [r7, #0]
   128d6:	2000      	movs	r0, #0
   128d8:	4b04      	ldr	r3, [pc, #16]	; (128ec <usbd_event_cb+0x30>)
   128da:	4798      	blx	r3
		break;
   128dc:	e002      	b.n	128e4 <usbd_event_cb+0x28>
		usbdc_reset();
   128de:	4b04      	ldr	r3, [pc, #16]	; (128f0 <usbd_event_cb+0x34>)
   128e0:	4798      	blx	r3
		break;
   128e2:	bf00      	nop
	}
}
   128e4:	bf00      	nop
   128e6:	3708      	adds	r7, #8
   128e8:	46bd      	mov	sp, r7
   128ea:	bd80      	pop	{r7, pc}
   128ec:	00012641 	.word	0x00012641
   128f0:	00012855 	.word	0x00012855

000128f4 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
   128f4:	b580      	push	{r7, lr}
   128f6:	b088      	sub	sp, #32
   128f8:	af00      	add	r7, sp, #0
   128fa:	60b9      	str	r1, [r7, #8]
   128fc:	607a      	str	r2, [r7, #4]
   128fe:	461a      	mov	r2, r3
   12900:	4603      	mov	r3, r0
   12902:	73fb      	strb	r3, [r7, #15]
   12904:	4613      	mov	r3, r2
   12906:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
   12908:	68bb      	ldr	r3, [r7, #8]
   1290a:	617b      	str	r3, [r7, #20]
   1290c:	687b      	ldr	r3, [r7, #4]
   1290e:	61bb      	str	r3, [r7, #24]
   12910:	7bfb      	ldrb	r3, [r7, #15]
   12912:	773b      	strb	r3, [r7, #28]
   12914:	7bbb      	ldrb	r3, [r7, #14]
   12916:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
   12918:	f107 0314 	add.w	r3, r7, #20
   1291c:	4618      	mov	r0, r3
   1291e:	4b03      	ldr	r3, [pc, #12]	; (1292c <usbdc_xfer+0x38>)
   12920:	4798      	blx	r3
   12922:	4603      	mov	r3, r0
}
   12924:	4618      	mov	r0, r3
   12926:	3720      	adds	r7, #32
   12928:	46bd      	mov	sp, r7
   1292a:	bd80      	pop	{r7, pc}
   1292c:	00009231 	.word	0x00009231

00012930 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
   12930:	b580      	push	{r7, lr}
   12932:	b082      	sub	sp, #8
   12934:	af00      	add	r7, sp, #0
   12936:	4603      	mov	r3, r0
   12938:	6039      	str	r1, [r7, #0]
   1293a:	71fb      	strb	r3, [r7, #7]
	switch (type) {
   1293c:	79fb      	ldrb	r3, [r7, #7]
   1293e:	2b01      	cmp	r3, #1
   12940:	d009      	beq.n	12956 <usbdc_register_handler+0x26>
   12942:	2b02      	cmp	r3, #2
   12944:	d00c      	beq.n	12960 <usbdc_register_handler+0x30>
   12946:	2b00      	cmp	r3, #0
   12948:	d000      	beq.n	1294c <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
   1294a:	e00e      	b.n	1296a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
   1294c:	6839      	ldr	r1, [r7, #0]
   1294e:	4809      	ldr	r0, [pc, #36]	; (12974 <usbdc_register_handler+0x44>)
   12950:	4b09      	ldr	r3, [pc, #36]	; (12978 <usbdc_register_handler+0x48>)
   12952:	4798      	blx	r3
		break;
   12954:	e009      	b.n	1296a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
   12956:	6839      	ldr	r1, [r7, #0]
   12958:	4808      	ldr	r0, [pc, #32]	; (1297c <usbdc_register_handler+0x4c>)
   1295a:	4b07      	ldr	r3, [pc, #28]	; (12978 <usbdc_register_handler+0x48>)
   1295c:	4798      	blx	r3
		break;
   1295e:	e004      	b.n	1296a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
   12960:	6839      	ldr	r1, [r7, #0]
   12962:	4807      	ldr	r0, [pc, #28]	; (12980 <usbdc_register_handler+0x50>)
   12964:	4b04      	ldr	r3, [pc, #16]	; (12978 <usbdc_register_handler+0x48>)
   12966:	4798      	blx	r3
		break;
   12968:	bf00      	nop
	}
}
   1296a:	bf00      	nop
   1296c:	3708      	adds	r7, #8
   1296e:	46bd      	mov	sp, r7
   12970:	bd80      	pop	{r7, pc}
   12972:	bf00      	nop
   12974:	20001a3c 	.word	0x20001a3c
   12978:	000095c9 	.word	0x000095c9
   1297c:	20001a40 	.word	0x20001a40
   12980:	20001a44 	.word	0x20001a44

00012984 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
   12984:	b580      	push	{r7, lr}
   12986:	b084      	sub	sp, #16
   12988:	af00      	add	r7, sp, #0
   1298a:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
   1298c:	687b      	ldr	r3, [r7, #4]
   1298e:	2b00      	cmp	r3, #0
   12990:	bf14      	ite	ne
   12992:	2301      	movne	r3, #1
   12994:	2300      	moveq	r3, #0
   12996:	b2db      	uxtb	r3, r3
   12998:	f240 3255 	movw	r2, #853	; 0x355
   1299c:	4910      	ldr	r1, [pc, #64]	; (129e0 <usbdc_init+0x5c>)
   1299e:	4618      	mov	r0, r3
   129a0:	4b10      	ldr	r3, [pc, #64]	; (129e4 <usbdc_init+0x60>)
   129a2:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
   129a4:	4b10      	ldr	r3, [pc, #64]	; (129e8 <usbdc_init+0x64>)
   129a6:	4798      	blx	r3
   129a8:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
   129aa:	68fb      	ldr	r3, [r7, #12]
   129ac:	2b00      	cmp	r3, #0
   129ae:	da01      	bge.n	129b4 <usbdc_init+0x30>
		return rc;
   129b0:	68fb      	ldr	r3, [r7, #12]
   129b2:	e010      	b.n	129d6 <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
   129b4:	2220      	movs	r2, #32
   129b6:	2100      	movs	r1, #0
   129b8:	480c      	ldr	r0, [pc, #48]	; (129ec <usbdc_init+0x68>)
   129ba:	4b0d      	ldr	r3, [pc, #52]	; (129f0 <usbdc_init+0x6c>)
   129bc:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
   129be:	4a0b      	ldr	r2, [pc, #44]	; (129ec <usbdc_init+0x68>)
   129c0:	687b      	ldr	r3, [r7, #4]
   129c2:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
   129c4:	490b      	ldr	r1, [pc, #44]	; (129f4 <usbdc_init+0x70>)
   129c6:	2000      	movs	r0, #0
   129c8:	4b0b      	ldr	r3, [pc, #44]	; (129f8 <usbdc_init+0x74>)
   129ca:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
   129cc:	490b      	ldr	r1, [pc, #44]	; (129fc <usbdc_init+0x78>)
   129ce:	2001      	movs	r0, #1
   129d0:	4b09      	ldr	r3, [pc, #36]	; (129f8 <usbdc_init+0x74>)
   129d2:	4798      	blx	r3

	return 0;
   129d4:	2300      	movs	r3, #0
}
   129d6:	4618      	mov	r0, r3
   129d8:	3710      	adds	r7, #16
   129da:	46bd      	mov	sp, r7
   129dc:	bd80      	pop	{r7, pc}
   129de:	bf00      	nop
   129e0:	0001411c 	.word	0x0001411c
   129e4:	000094ed 	.word	0x000094ed
   129e8:	00008f99 	.word	0x00008f99
   129ec:	20001a38 	.word	0x20001a38
   129f0:	00012ee9 	.word	0x00012ee9
   129f4:	000126e1 	.word	0x000126e1
   129f8:	00009045 	.word	0x00009045
   129fc:	000128bd 	.word	0x000128bd

00012a00 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
   12a00:	b580      	push	{r7, lr}
   12a02:	b082      	sub	sp, #8
   12a04:	af00      	add	r7, sp, #0
   12a06:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
   12a08:	6879      	ldr	r1, [r7, #4]
   12a0a:	4803      	ldr	r0, [pc, #12]	; (12a18 <usbdc_register_function+0x18>)
   12a0c:	4b03      	ldr	r3, [pc, #12]	; (12a1c <usbdc_register_function+0x1c>)
   12a0e:	4798      	blx	r3
}
   12a10:	bf00      	nop
   12a12:	3708      	adds	r7, #8
   12a14:	46bd      	mov	sp, r7
   12a16:	bd80      	pop	{r7, pc}
   12a18:	20001a48 	.word	0x20001a48
   12a1c:	000095c9 	.word	0x000095c9

00012a20 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
   12a20:	b580      	push	{r7, lr}
   12a22:	b082      	sub	sp, #8
   12a24:	af00      	add	r7, sp, #0
   12a26:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
   12a28:	4b0f      	ldr	r3, [pc, #60]	; (12a68 <usbdc_start+0x48>)
   12a2a:	7e9b      	ldrb	r3, [r3, #26]
   12a2c:	2b00      	cmp	r3, #0
   12a2e:	d002      	beq.n	12a36 <usbdc_start+0x16>
		return ERR_BUSY;
   12a30:	f06f 0303 	mvn.w	r3, #3
   12a34:	e013      	b.n	12a5e <usbdc_start+0x3e>
	}

	if (desces) {
   12a36:	687b      	ldr	r3, [r7, #4]
   12a38:	2b00      	cmp	r3, #0
   12a3a:	d00e      	beq.n	12a5a <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
   12a3c:	4a0a      	ldr	r2, [pc, #40]	; (12a68 <usbdc_start+0x48>)
   12a3e:	687b      	ldr	r3, [r7, #4]
   12a40:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
   12a42:	687b      	ldr	r3, [r7, #4]
   12a44:	681b      	ldr	r3, [r3, #0]
   12a46:	79da      	ldrb	r2, [r3, #7]
   12a48:	4b07      	ldr	r3, [pc, #28]	; (12a68 <usbdc_start+0x48>)
   12a4a:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
   12a4c:	4b06      	ldr	r3, [pc, #24]	; (12a68 <usbdc_start+0x48>)
   12a4e:	2201      	movs	r2, #1
   12a50:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
   12a52:	4b06      	ldr	r3, [pc, #24]	; (12a6c <usbdc_start+0x4c>)
   12a54:	4798      	blx	r3
	return ERR_NONE;
   12a56:	2300      	movs	r3, #0
   12a58:	e001      	b.n	12a5e <usbdc_start+0x3e>
		return ERR_BAD_DATA;
   12a5a:	f06f 0308 	mvn.w	r3, #8
}
   12a5e:	4618      	mov	r0, r3
   12a60:	3708      	adds	r7, #8
   12a62:	46bd      	mov	sp, r7
   12a64:	bd80      	pop	{r7, pc}
   12a66:	bf00      	nop
   12a68:	20001a38 	.word	0x20001a38
   12a6c:	00009069 	.word	0x00009069

00012a70 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
   12a70:	b580      	push	{r7, lr}
   12a72:	af00      	add	r7, sp, #0
	usb_d_attach();
   12a74:	4b01      	ldr	r3, [pc, #4]	; (12a7c <usbdc_attach+0xc>)
   12a76:	4798      	blx	r3
}
   12a78:	bf00      	nop
   12a7a:	bd80      	pop	{r7, pc}
   12a7c:	0000907d 	.word	0x0000907d

00012a80 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
   12a80:	b480      	push	{r7}
   12a82:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
   12a84:	4b03      	ldr	r3, [pc, #12]	; (12a94 <usbdc_get_ctrl_buffer+0x14>)
   12a86:	695b      	ldr	r3, [r3, #20]
}
   12a88:	4618      	mov	r0, r3
   12a8a:	46bd      	mov	sp, r7
   12a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
   12a90:	4770      	bx	lr
   12a92:	bf00      	nop
   12a94:	20001a38 	.word	0x20001a38

00012a98 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
   12a98:	b480      	push	{r7}
   12a9a:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
   12a9c:	4b07      	ldr	r3, [pc, #28]	; (12abc <usbdc_get_state+0x24>)
   12a9e:	7e9b      	ldrb	r3, [r3, #26]
   12aa0:	f003 0310 	and.w	r3, r3, #16
   12aa4:	2b00      	cmp	r3, #0
   12aa6:	d001      	beq.n	12aac <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
   12aa8:	2310      	movs	r3, #16
   12aaa:	e001      	b.n	12ab0 <usbdc_get_state+0x18>
	}
	return usbdc.state;
   12aac:	4b03      	ldr	r3, [pc, #12]	; (12abc <usbdc_get_state+0x24>)
   12aae:	7e9b      	ldrb	r3, [r3, #26]
}
   12ab0:	4618      	mov	r0, r3
   12ab2:	46bd      	mov	sp, r7
   12ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
   12ab8:	4770      	bx	lr
   12aba:	bf00      	nop
   12abc:	20001a38 	.word	0x20001a38

00012ac0 <usb_get_u16>:
{
   12ac0:	b480      	push	{r7}
   12ac2:	b083      	sub	sp, #12
   12ac4:	af00      	add	r7, sp, #0
   12ac6:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
   12ac8:	687b      	ldr	r3, [r7, #4]
   12aca:	781b      	ldrb	r3, [r3, #0]
   12acc:	b29a      	uxth	r2, r3
   12ace:	687b      	ldr	r3, [r7, #4]
   12ad0:	3301      	adds	r3, #1
   12ad2:	781b      	ldrb	r3, [r3, #0]
   12ad4:	b29b      	uxth	r3, r3
   12ad6:	021b      	lsls	r3, r3, #8
   12ad8:	b29b      	uxth	r3, r3
   12ada:	4413      	add	r3, r2
   12adc:	b29b      	uxth	r3, r3
}
   12ade:	4618      	mov	r0, r3
   12ae0:	370c      	adds	r7, #12
   12ae2:	46bd      	mov	sp, r7
   12ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
   12ae8:	4770      	bx	lr

00012aea <usb_desc_len>:
{
   12aea:	b480      	push	{r7}
   12aec:	b083      	sub	sp, #12
   12aee:	af00      	add	r7, sp, #0
   12af0:	6078      	str	r0, [r7, #4]
	return desc[0];
   12af2:	687b      	ldr	r3, [r7, #4]
   12af4:	781b      	ldrb	r3, [r3, #0]
}
   12af6:	4618      	mov	r0, r3
   12af8:	370c      	adds	r7, #12
   12afa:	46bd      	mov	sp, r7
   12afc:	f85d 7b04 	ldr.w	r7, [sp], #4
   12b00:	4770      	bx	lr

00012b02 <usb_desc_type>:
{
   12b02:	b480      	push	{r7}
   12b04:	b083      	sub	sp, #12
   12b06:	af00      	add	r7, sp, #0
   12b08:	6078      	str	r0, [r7, #4]
	return desc[1];
   12b0a:	687b      	ldr	r3, [r7, #4]
   12b0c:	3301      	adds	r3, #1
   12b0e:	781b      	ldrb	r3, [r3, #0]
}
   12b10:	4618      	mov	r0, r3
   12b12:	370c      	adds	r7, #12
   12b14:	46bd      	mov	sp, r7
   12b16:	f85d 7b04 	ldr.w	r7, [sp], #4
   12b1a:	4770      	bx	lr

00012b1c <usb_desc_next>:
{
   12b1c:	b580      	push	{r7, lr}
   12b1e:	b082      	sub	sp, #8
   12b20:	af00      	add	r7, sp, #0
   12b22:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
   12b24:	6878      	ldr	r0, [r7, #4]
   12b26:	4b05      	ldr	r3, [pc, #20]	; (12b3c <usb_desc_next+0x20>)
   12b28:	4798      	blx	r3
   12b2a:	4603      	mov	r3, r0
   12b2c:	461a      	mov	r2, r3
   12b2e:	687b      	ldr	r3, [r7, #4]
   12b30:	4413      	add	r3, r2
}
   12b32:	4618      	mov	r0, r3
   12b34:	3708      	adds	r7, #8
   12b36:	46bd      	mov	sp, r7
   12b38:	bd80      	pop	{r7, pc}
   12b3a:	bf00      	nop
   12b3c:	00012aeb 	.word	0x00012aeb

00012b40 <usb_cfg_desc_total_len>:
{
   12b40:	b580      	push	{r7, lr}
   12b42:	b082      	sub	sp, #8
   12b44:	af00      	add	r7, sp, #0
   12b46:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
   12b48:	687b      	ldr	r3, [r7, #4]
   12b4a:	3302      	adds	r3, #2
   12b4c:	4618      	mov	r0, r3
   12b4e:	4b03      	ldr	r3, [pc, #12]	; (12b5c <usb_cfg_desc_total_len+0x1c>)
   12b50:	4798      	blx	r3
   12b52:	4603      	mov	r3, r0
}
   12b54:	4618      	mov	r0, r3
   12b56:	3708      	adds	r7, #8
   12b58:	46bd      	mov	sp, r7
   12b5a:	bd80      	pop	{r7, pc}
   12b5c:	00012ac1 	.word	0x00012ac1

00012b60 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
   12b60:	b580      	push	{r7, lr}
   12b62:	b082      	sub	sp, #8
   12b64:	af00      	add	r7, sp, #0
   12b66:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
   12b68:	6878      	ldr	r0, [r7, #4]
   12b6a:	4b05      	ldr	r3, [pc, #20]	; (12b80 <usb_cfg_desc_next+0x20>)
   12b6c:	4798      	blx	r3
   12b6e:	4603      	mov	r3, r0
   12b70:	461a      	mov	r2, r3
   12b72:	687b      	ldr	r3, [r7, #4]
   12b74:	4413      	add	r3, r2
}
   12b76:	4618      	mov	r0, r3
   12b78:	3708      	adds	r7, #8
   12b7a:	46bd      	mov	sp, r7
   12b7c:	bd80      	pop	{r7, pc}
   12b7e:	bf00      	nop
   12b80:	00012b41 	.word	0x00012b41

00012b84 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
   12b84:	b580      	push	{r7, lr}
   12b86:	b084      	sub	sp, #16
   12b88:	af00      	add	r7, sp, #0
   12b8a:	60f8      	str	r0, [r7, #12]
   12b8c:	60b9      	str	r1, [r7, #8]
   12b8e:	4613      	mov	r3, r2
   12b90:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
   12b92:	e015      	b.n	12bc0 <usb_find_desc+0x3c>
		_desc_len_check();
   12b94:	68f8      	ldr	r0, [r7, #12]
   12b96:	4b0f      	ldr	r3, [pc, #60]	; (12bd4 <usb_find_desc+0x50>)
   12b98:	4798      	blx	r3
   12b9a:	4603      	mov	r3, r0
   12b9c:	2b01      	cmp	r3, #1
   12b9e:	d801      	bhi.n	12ba4 <usb_find_desc+0x20>
   12ba0:	2300      	movs	r3, #0
   12ba2:	e012      	b.n	12bca <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
   12ba4:	68f8      	ldr	r0, [r7, #12]
   12ba6:	4b0c      	ldr	r3, [pc, #48]	; (12bd8 <usb_find_desc+0x54>)
   12ba8:	4798      	blx	r3
   12baa:	4603      	mov	r3, r0
   12bac:	461a      	mov	r2, r3
   12bae:	79fb      	ldrb	r3, [r7, #7]
   12bb0:	4293      	cmp	r3, r2
   12bb2:	d101      	bne.n	12bb8 <usb_find_desc+0x34>
			return desc;
   12bb4:	68fb      	ldr	r3, [r7, #12]
   12bb6:	e008      	b.n	12bca <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
   12bb8:	68f8      	ldr	r0, [r7, #12]
   12bba:	4b08      	ldr	r3, [pc, #32]	; (12bdc <usb_find_desc+0x58>)
   12bbc:	4798      	blx	r3
   12bbe:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
   12bc0:	68fa      	ldr	r2, [r7, #12]
   12bc2:	68bb      	ldr	r3, [r7, #8]
   12bc4:	429a      	cmp	r2, r3
   12bc6:	d3e5      	bcc.n	12b94 <usb_find_desc+0x10>
	}
	return NULL;
   12bc8:	2300      	movs	r3, #0
}
   12bca:	4618      	mov	r0, r3
   12bcc:	3710      	adds	r7, #16
   12bce:	46bd      	mov	sp, r7
   12bd0:	bd80      	pop	{r7, pc}
   12bd2:	bf00      	nop
   12bd4:	00012aeb 	.word	0x00012aeb
   12bd8:	00012b03 	.word	0x00012b03
   12bdc:	00012b1d 	.word	0x00012b1d

00012be0 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
   12be0:	b580      	push	{r7, lr}
   12be2:	b082      	sub	sp, #8
   12be4:	af00      	add	r7, sp, #0
   12be6:	6078      	str	r0, [r7, #4]
   12be8:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
   12bea:	e019      	b.n	12c20 <usb_find_ep_desc+0x40>
		_desc_len_check();
   12bec:	6878      	ldr	r0, [r7, #4]
   12bee:	4b12      	ldr	r3, [pc, #72]	; (12c38 <usb_find_ep_desc+0x58>)
   12bf0:	4798      	blx	r3
   12bf2:	4603      	mov	r3, r0
   12bf4:	2b01      	cmp	r3, #1
   12bf6:	d801      	bhi.n	12bfc <usb_find_ep_desc+0x1c>
   12bf8:	2300      	movs	r3, #0
   12bfa:	e018      	b.n	12c2e <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
   12bfc:	6878      	ldr	r0, [r7, #4]
   12bfe:	4b0f      	ldr	r3, [pc, #60]	; (12c3c <usb_find_ep_desc+0x5c>)
   12c00:	4798      	blx	r3
   12c02:	4603      	mov	r3, r0
   12c04:	2b04      	cmp	r3, #4
   12c06:	d010      	beq.n	12c2a <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
   12c08:	6878      	ldr	r0, [r7, #4]
   12c0a:	4b0c      	ldr	r3, [pc, #48]	; (12c3c <usb_find_ep_desc+0x5c>)
   12c0c:	4798      	blx	r3
   12c0e:	4603      	mov	r3, r0
   12c10:	2b05      	cmp	r3, #5
   12c12:	d101      	bne.n	12c18 <usb_find_ep_desc+0x38>
			return desc;
   12c14:	687b      	ldr	r3, [r7, #4]
   12c16:	e00a      	b.n	12c2e <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
   12c18:	6878      	ldr	r0, [r7, #4]
   12c1a:	4b09      	ldr	r3, [pc, #36]	; (12c40 <usb_find_ep_desc+0x60>)
   12c1c:	4798      	blx	r3
   12c1e:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
   12c20:	687a      	ldr	r2, [r7, #4]
   12c22:	683b      	ldr	r3, [r7, #0]
   12c24:	429a      	cmp	r2, r3
   12c26:	d3e1      	bcc.n	12bec <usb_find_ep_desc+0xc>
   12c28:	e000      	b.n	12c2c <usb_find_ep_desc+0x4c>
			break;
   12c2a:	bf00      	nop
	}
	return NULL;
   12c2c:	2300      	movs	r3, #0
}
   12c2e:	4618      	mov	r0, r3
   12c30:	3708      	adds	r7, #8
   12c32:	46bd      	mov	sp, r7
   12c34:	bd80      	pop	{r7, pc}
   12c36:	bf00      	nop
   12c38:	00012aeb 	.word	0x00012aeb
   12c3c:	00012b03 	.word	0x00012b03
   12c40:	00012b1d 	.word	0x00012b1d

00012c44 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
   12c44:	b580      	push	{r7, lr}
   12c46:	b084      	sub	sp, #16
   12c48:	af00      	add	r7, sp, #0
   12c4a:	60f8      	str	r0, [r7, #12]
   12c4c:	60b9      	str	r1, [r7, #8]
   12c4e:	4613      	mov	r3, r2
   12c50:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
   12c52:	2202      	movs	r2, #2
   12c54:	68b9      	ldr	r1, [r7, #8]
   12c56:	68f8      	ldr	r0, [r7, #12]
   12c58:	4b15      	ldr	r3, [pc, #84]	; (12cb0 <usb_find_cfg_desc+0x6c>)
   12c5a:	4798      	blx	r3
   12c5c:	60f8      	str	r0, [r7, #12]
	if (!desc) {
   12c5e:	68fb      	ldr	r3, [r7, #12]
   12c60:	2b00      	cmp	r3, #0
   12c62:	d11a      	bne.n	12c9a <usb_find_cfg_desc+0x56>
		return NULL;
   12c64:	2300      	movs	r3, #0
   12c66:	e01f      	b.n	12ca8 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
   12c68:	68f8      	ldr	r0, [r7, #12]
   12c6a:	4b12      	ldr	r3, [pc, #72]	; (12cb4 <usb_find_cfg_desc+0x70>)
   12c6c:	4798      	blx	r3
   12c6e:	4603      	mov	r3, r0
   12c70:	2b01      	cmp	r3, #1
   12c72:	d801      	bhi.n	12c78 <usb_find_cfg_desc+0x34>
   12c74:	2300      	movs	r3, #0
   12c76:	e017      	b.n	12ca8 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
   12c78:	68fb      	ldr	r3, [r7, #12]
   12c7a:	3301      	adds	r3, #1
   12c7c:	781b      	ldrb	r3, [r3, #0]
   12c7e:	2b02      	cmp	r3, #2
   12c80:	d110      	bne.n	12ca4 <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
   12c82:	68fb      	ldr	r3, [r7, #12]
   12c84:	3305      	adds	r3, #5
   12c86:	781b      	ldrb	r3, [r3, #0]
   12c88:	79fa      	ldrb	r2, [r7, #7]
   12c8a:	429a      	cmp	r2, r3
   12c8c:	d101      	bne.n	12c92 <usb_find_cfg_desc+0x4e>
			return desc;
   12c8e:	68fb      	ldr	r3, [r7, #12]
   12c90:	e00a      	b.n	12ca8 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
   12c92:	68f8      	ldr	r0, [r7, #12]
   12c94:	4b08      	ldr	r3, [pc, #32]	; (12cb8 <usb_find_cfg_desc+0x74>)
   12c96:	4798      	blx	r3
   12c98:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
   12c9a:	68fa      	ldr	r2, [r7, #12]
   12c9c:	68bb      	ldr	r3, [r7, #8]
   12c9e:	429a      	cmp	r2, r3
   12ca0:	d3e2      	bcc.n	12c68 <usb_find_cfg_desc+0x24>
   12ca2:	e000      	b.n	12ca6 <usb_find_cfg_desc+0x62>
			break;
   12ca4:	bf00      	nop
	}
	return NULL;
   12ca6:	2300      	movs	r3, #0
}
   12ca8:	4618      	mov	r0, r3
   12caa:	3710      	adds	r7, #16
   12cac:	46bd      	mov	sp, r7
   12cae:	bd80      	pop	{r7, pc}
   12cb0:	00012b85 	.word	0x00012b85
   12cb4:	00012aeb 	.word	0x00012aeb
   12cb8:	00012b61 	.word	0x00012b61

00012cbc <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
   12cbc:	b580      	push	{r7, lr}
   12cbe:	b086      	sub	sp, #24
   12cc0:	af00      	add	r7, sp, #0
   12cc2:	60f8      	str	r0, [r7, #12]
   12cc4:	60b9      	str	r1, [r7, #8]
   12cc6:	4613      	mov	r3, r2
   12cc8:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
   12cca:	2300      	movs	r3, #0
   12ccc:	75fb      	strb	r3, [r7, #23]
   12cce:	e020      	b.n	12d12 <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
   12cd0:	2203      	movs	r2, #3
   12cd2:	68b9      	ldr	r1, [r7, #8]
   12cd4:	68f8      	ldr	r0, [r7, #12]
   12cd6:	4b13      	ldr	r3, [pc, #76]	; (12d24 <usb_find_str_desc+0x68>)
   12cd8:	4798      	blx	r3
   12cda:	60f8      	str	r0, [r7, #12]
		if (desc) {
   12cdc:	68fb      	ldr	r3, [r7, #12]
   12cde:	2b00      	cmp	r3, #0
   12ce0:	d015      	beq.n	12d0e <usb_find_str_desc+0x52>
			_desc_len_check();
   12ce2:	68f8      	ldr	r0, [r7, #12]
   12ce4:	4b10      	ldr	r3, [pc, #64]	; (12d28 <usb_find_str_desc+0x6c>)
   12ce6:	4798      	blx	r3
   12ce8:	4603      	mov	r3, r0
   12cea:	2b01      	cmp	r3, #1
   12cec:	d801      	bhi.n	12cf2 <usb_find_str_desc+0x36>
   12cee:	2300      	movs	r3, #0
   12cf0:	e014      	b.n	12d1c <usb_find_str_desc+0x60>
			if (i == str_index) {
   12cf2:	7dfa      	ldrb	r2, [r7, #23]
   12cf4:	79fb      	ldrb	r3, [r7, #7]
   12cf6:	429a      	cmp	r2, r3
   12cf8:	d101      	bne.n	12cfe <usb_find_str_desc+0x42>
				return desc;
   12cfa:	68fb      	ldr	r3, [r7, #12]
   12cfc:	e00e      	b.n	12d1c <usb_find_str_desc+0x60>
			}
			i++;
   12cfe:	7dfb      	ldrb	r3, [r7, #23]
   12d00:	3301      	adds	r3, #1
   12d02:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
   12d04:	68f8      	ldr	r0, [r7, #12]
   12d06:	4b09      	ldr	r3, [pc, #36]	; (12d2c <usb_find_str_desc+0x70>)
   12d08:	4798      	blx	r3
   12d0a:	60f8      	str	r0, [r7, #12]
   12d0c:	e001      	b.n	12d12 <usb_find_str_desc+0x56>
		} else {
			return NULL;
   12d0e:	2300      	movs	r3, #0
   12d10:	e004      	b.n	12d1c <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
   12d12:	68fa      	ldr	r2, [r7, #12]
   12d14:	68bb      	ldr	r3, [r7, #8]
   12d16:	429a      	cmp	r2, r3
   12d18:	d3da      	bcc.n	12cd0 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
   12d1a:	2300      	movs	r3, #0
}
   12d1c:	4618      	mov	r0, r3
   12d1e:	3718      	adds	r7, #24
   12d20:	46bd      	mov	sp, r7
   12d22:	bd80      	pop	{r7, pc}
   12d24:	00012b85 	.word	0x00012b85
   12d28:	00012aeb 	.word	0x00012aeb
   12d2c:	00012b1d 	.word	0x00012b1d

00012d30 <__aeabi_atexit>:
   12d30:	460b      	mov	r3, r1
   12d32:	4601      	mov	r1, r0
   12d34:	4618      	mov	r0, r3
   12d36:	f000 b801 	b.w	12d3c <__cxa_atexit>
   12d3a:	bf00      	nop

00012d3c <__cxa_atexit>:
   12d3c:	4613      	mov	r3, r2
   12d3e:	460a      	mov	r2, r1
   12d40:	4601      	mov	r1, r0
   12d42:	2002      	movs	r0, #2
   12d44:	f000 b91e 	b.w	12f84 <__register_exitproc>

00012d48 <ffs>:
   12d48:	b140      	cbz	r0, 12d5c <ffs+0x14>
   12d4a:	2300      	movs	r3, #0
   12d4c:	fa40 f103 	asr.w	r1, r0, r3
   12d50:	1c5a      	adds	r2, r3, #1
   12d52:	07c9      	lsls	r1, r1, #31
   12d54:	4613      	mov	r3, r2
   12d56:	d5f9      	bpl.n	12d4c <ffs+0x4>
   12d58:	4610      	mov	r0, r2
   12d5a:	4770      	bx	lr
   12d5c:	4602      	mov	r2, r0
   12d5e:	4610      	mov	r0, r2
   12d60:	4770      	bx	lr
   12d62:	bf00      	nop

00012d64 <__libc_init_array>:
   12d64:	b570      	push	{r4, r5, r6, lr}
   12d66:	4e0f      	ldr	r6, [pc, #60]	; (12da4 <__libc_init_array+0x40>)
   12d68:	4d0f      	ldr	r5, [pc, #60]	; (12da8 <__libc_init_array+0x44>)
   12d6a:	1b76      	subs	r6, r6, r5
   12d6c:	10b6      	asrs	r6, r6, #2
   12d6e:	bf18      	it	ne
   12d70:	2400      	movne	r4, #0
   12d72:	d005      	beq.n	12d80 <__libc_init_array+0x1c>
   12d74:	3401      	adds	r4, #1
   12d76:	f855 3b04 	ldr.w	r3, [r5], #4
   12d7a:	4798      	blx	r3
   12d7c:	42a6      	cmp	r6, r4
   12d7e:	d1f9      	bne.n	12d74 <__libc_init_array+0x10>
   12d80:	4e0a      	ldr	r6, [pc, #40]	; (12dac <__libc_init_array+0x48>)
   12d82:	4d0b      	ldr	r5, [pc, #44]	; (12db0 <__libc_init_array+0x4c>)
   12d84:	1b76      	subs	r6, r6, r5
   12d86:	f001 f9d7 	bl	14138 <_init>
   12d8a:	10b6      	asrs	r6, r6, #2
   12d8c:	bf18      	it	ne
   12d8e:	2400      	movne	r4, #0
   12d90:	d006      	beq.n	12da0 <__libc_init_array+0x3c>
   12d92:	3401      	adds	r4, #1
   12d94:	f855 3b04 	ldr.w	r3, [r5], #4
   12d98:	4798      	blx	r3
   12d9a:	42a6      	cmp	r6, r4
   12d9c:	d1f9      	bne.n	12d92 <__libc_init_array+0x2e>
   12d9e:	bd70      	pop	{r4, r5, r6, pc}
   12da0:	bd70      	pop	{r4, r5, r6, pc}
   12da2:	bf00      	nop
   12da4:	00014144 	.word	0x00014144
   12da8:	00014144 	.word	0x00014144
   12dac:	00014150 	.word	0x00014150
   12db0:	00014144 	.word	0x00014144

00012db4 <memcpy>:
   12db4:	4684      	mov	ip, r0
   12db6:	ea41 0300 	orr.w	r3, r1, r0
   12dba:	f013 0303 	ands.w	r3, r3, #3
   12dbe:	d16d      	bne.n	12e9c <memcpy+0xe8>
   12dc0:	3a40      	subs	r2, #64	; 0x40
   12dc2:	d341      	bcc.n	12e48 <memcpy+0x94>
   12dc4:	f851 3b04 	ldr.w	r3, [r1], #4
   12dc8:	f840 3b04 	str.w	r3, [r0], #4
   12dcc:	f851 3b04 	ldr.w	r3, [r1], #4
   12dd0:	f840 3b04 	str.w	r3, [r0], #4
   12dd4:	f851 3b04 	ldr.w	r3, [r1], #4
   12dd8:	f840 3b04 	str.w	r3, [r0], #4
   12ddc:	f851 3b04 	ldr.w	r3, [r1], #4
   12de0:	f840 3b04 	str.w	r3, [r0], #4
   12de4:	f851 3b04 	ldr.w	r3, [r1], #4
   12de8:	f840 3b04 	str.w	r3, [r0], #4
   12dec:	f851 3b04 	ldr.w	r3, [r1], #4
   12df0:	f840 3b04 	str.w	r3, [r0], #4
   12df4:	f851 3b04 	ldr.w	r3, [r1], #4
   12df8:	f840 3b04 	str.w	r3, [r0], #4
   12dfc:	f851 3b04 	ldr.w	r3, [r1], #4
   12e00:	f840 3b04 	str.w	r3, [r0], #4
   12e04:	f851 3b04 	ldr.w	r3, [r1], #4
   12e08:	f840 3b04 	str.w	r3, [r0], #4
   12e0c:	f851 3b04 	ldr.w	r3, [r1], #4
   12e10:	f840 3b04 	str.w	r3, [r0], #4
   12e14:	f851 3b04 	ldr.w	r3, [r1], #4
   12e18:	f840 3b04 	str.w	r3, [r0], #4
   12e1c:	f851 3b04 	ldr.w	r3, [r1], #4
   12e20:	f840 3b04 	str.w	r3, [r0], #4
   12e24:	f851 3b04 	ldr.w	r3, [r1], #4
   12e28:	f840 3b04 	str.w	r3, [r0], #4
   12e2c:	f851 3b04 	ldr.w	r3, [r1], #4
   12e30:	f840 3b04 	str.w	r3, [r0], #4
   12e34:	f851 3b04 	ldr.w	r3, [r1], #4
   12e38:	f840 3b04 	str.w	r3, [r0], #4
   12e3c:	f851 3b04 	ldr.w	r3, [r1], #4
   12e40:	f840 3b04 	str.w	r3, [r0], #4
   12e44:	3a40      	subs	r2, #64	; 0x40
   12e46:	d2bd      	bcs.n	12dc4 <memcpy+0x10>
   12e48:	3230      	adds	r2, #48	; 0x30
   12e4a:	d311      	bcc.n	12e70 <memcpy+0xbc>
   12e4c:	f851 3b04 	ldr.w	r3, [r1], #4
   12e50:	f840 3b04 	str.w	r3, [r0], #4
   12e54:	f851 3b04 	ldr.w	r3, [r1], #4
   12e58:	f840 3b04 	str.w	r3, [r0], #4
   12e5c:	f851 3b04 	ldr.w	r3, [r1], #4
   12e60:	f840 3b04 	str.w	r3, [r0], #4
   12e64:	f851 3b04 	ldr.w	r3, [r1], #4
   12e68:	f840 3b04 	str.w	r3, [r0], #4
   12e6c:	3a10      	subs	r2, #16
   12e6e:	d2ed      	bcs.n	12e4c <memcpy+0x98>
   12e70:	320c      	adds	r2, #12
   12e72:	d305      	bcc.n	12e80 <memcpy+0xcc>
   12e74:	f851 3b04 	ldr.w	r3, [r1], #4
   12e78:	f840 3b04 	str.w	r3, [r0], #4
   12e7c:	3a04      	subs	r2, #4
   12e7e:	d2f9      	bcs.n	12e74 <memcpy+0xc0>
   12e80:	3204      	adds	r2, #4
   12e82:	d008      	beq.n	12e96 <memcpy+0xe2>
   12e84:	07d2      	lsls	r2, r2, #31
   12e86:	bf1c      	itt	ne
   12e88:	f811 3b01 	ldrbne.w	r3, [r1], #1
   12e8c:	f800 3b01 	strbne.w	r3, [r0], #1
   12e90:	d301      	bcc.n	12e96 <memcpy+0xe2>
   12e92:	880b      	ldrh	r3, [r1, #0]
   12e94:	8003      	strh	r3, [r0, #0]
   12e96:	4660      	mov	r0, ip
   12e98:	4770      	bx	lr
   12e9a:	bf00      	nop
   12e9c:	2a08      	cmp	r2, #8
   12e9e:	d313      	bcc.n	12ec8 <memcpy+0x114>
   12ea0:	078b      	lsls	r3, r1, #30
   12ea2:	d08d      	beq.n	12dc0 <memcpy+0xc>
   12ea4:	f010 0303 	ands.w	r3, r0, #3
   12ea8:	d08a      	beq.n	12dc0 <memcpy+0xc>
   12eaa:	f1c3 0304 	rsb	r3, r3, #4
   12eae:	1ad2      	subs	r2, r2, r3
   12eb0:	07db      	lsls	r3, r3, #31
   12eb2:	bf1c      	itt	ne
   12eb4:	f811 3b01 	ldrbne.w	r3, [r1], #1
   12eb8:	f800 3b01 	strbne.w	r3, [r0], #1
   12ebc:	d380      	bcc.n	12dc0 <memcpy+0xc>
   12ebe:	f831 3b02 	ldrh.w	r3, [r1], #2
   12ec2:	f820 3b02 	strh.w	r3, [r0], #2
   12ec6:	e77b      	b.n	12dc0 <memcpy+0xc>
   12ec8:	3a04      	subs	r2, #4
   12eca:	d3d9      	bcc.n	12e80 <memcpy+0xcc>
   12ecc:	3a01      	subs	r2, #1
   12ece:	f811 3b01 	ldrb.w	r3, [r1], #1
   12ed2:	f800 3b01 	strb.w	r3, [r0], #1
   12ed6:	d2f9      	bcs.n	12ecc <memcpy+0x118>
   12ed8:	780b      	ldrb	r3, [r1, #0]
   12eda:	7003      	strb	r3, [r0, #0]
   12edc:	784b      	ldrb	r3, [r1, #1]
   12ede:	7043      	strb	r3, [r0, #1]
   12ee0:	788b      	ldrb	r3, [r1, #2]
   12ee2:	7083      	strb	r3, [r0, #2]
   12ee4:	4660      	mov	r0, ip
   12ee6:	4770      	bx	lr

00012ee8 <memset>:
   12ee8:	b470      	push	{r4, r5, r6}
   12eea:	0786      	lsls	r6, r0, #30
   12eec:	d046      	beq.n	12f7c <memset+0x94>
   12eee:	1e54      	subs	r4, r2, #1
   12ef0:	2a00      	cmp	r2, #0
   12ef2:	d041      	beq.n	12f78 <memset+0x90>
   12ef4:	b2ca      	uxtb	r2, r1
   12ef6:	4603      	mov	r3, r0
   12ef8:	e002      	b.n	12f00 <memset+0x18>
   12efa:	f114 34ff 	adds.w	r4, r4, #4294967295
   12efe:	d33b      	bcc.n	12f78 <memset+0x90>
   12f00:	f803 2b01 	strb.w	r2, [r3], #1
   12f04:	079d      	lsls	r5, r3, #30
   12f06:	d1f8      	bne.n	12efa <memset+0x12>
   12f08:	2c03      	cmp	r4, #3
   12f0a:	d92e      	bls.n	12f6a <memset+0x82>
   12f0c:	b2cd      	uxtb	r5, r1
   12f0e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   12f12:	2c0f      	cmp	r4, #15
   12f14:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   12f18:	d919      	bls.n	12f4e <memset+0x66>
   12f1a:	f103 0210 	add.w	r2, r3, #16
   12f1e:	4626      	mov	r6, r4
   12f20:	3e10      	subs	r6, #16
   12f22:	2e0f      	cmp	r6, #15
   12f24:	f842 5c10 	str.w	r5, [r2, #-16]
   12f28:	f842 5c0c 	str.w	r5, [r2, #-12]
   12f2c:	f842 5c08 	str.w	r5, [r2, #-8]
   12f30:	f842 5c04 	str.w	r5, [r2, #-4]
   12f34:	f102 0210 	add.w	r2, r2, #16
   12f38:	d8f2      	bhi.n	12f20 <memset+0x38>
   12f3a:	f1a4 0210 	sub.w	r2, r4, #16
   12f3e:	f022 020f 	bic.w	r2, r2, #15
   12f42:	f004 040f 	and.w	r4, r4, #15
   12f46:	3210      	adds	r2, #16
   12f48:	2c03      	cmp	r4, #3
   12f4a:	4413      	add	r3, r2
   12f4c:	d90d      	bls.n	12f6a <memset+0x82>
   12f4e:	461e      	mov	r6, r3
   12f50:	4622      	mov	r2, r4
   12f52:	3a04      	subs	r2, #4
   12f54:	2a03      	cmp	r2, #3
   12f56:	f846 5b04 	str.w	r5, [r6], #4
   12f5a:	d8fa      	bhi.n	12f52 <memset+0x6a>
   12f5c:	1f22      	subs	r2, r4, #4
   12f5e:	f022 0203 	bic.w	r2, r2, #3
   12f62:	3204      	adds	r2, #4
   12f64:	4413      	add	r3, r2
   12f66:	f004 0403 	and.w	r4, r4, #3
   12f6a:	b12c      	cbz	r4, 12f78 <memset+0x90>
   12f6c:	b2c9      	uxtb	r1, r1
   12f6e:	441c      	add	r4, r3
   12f70:	f803 1b01 	strb.w	r1, [r3], #1
   12f74:	429c      	cmp	r4, r3
   12f76:	d1fb      	bne.n	12f70 <memset+0x88>
   12f78:	bc70      	pop	{r4, r5, r6}
   12f7a:	4770      	bx	lr
   12f7c:	4614      	mov	r4, r2
   12f7e:	4603      	mov	r3, r0
   12f80:	e7c2      	b.n	12f08 <memset+0x20>
   12f82:	bf00      	nop

00012f84 <__register_exitproc>:
   12f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12f88:	4d2c      	ldr	r5, [pc, #176]	; (1303c <__register_exitproc+0xb8>)
   12f8a:	4606      	mov	r6, r0
   12f8c:	6828      	ldr	r0, [r5, #0]
   12f8e:	4698      	mov	r8, r3
   12f90:	460f      	mov	r7, r1
   12f92:	4691      	mov	r9, r2
   12f94:	f000 f882 	bl	1309c <__retarget_lock_acquire_recursive>
   12f98:	4b29      	ldr	r3, [pc, #164]	; (13040 <__register_exitproc+0xbc>)
   12f9a:	681c      	ldr	r4, [r3, #0]
   12f9c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   12fa0:	2b00      	cmp	r3, #0
   12fa2:	d03e      	beq.n	13022 <__register_exitproc+0x9e>
   12fa4:	685a      	ldr	r2, [r3, #4]
   12fa6:	2a1f      	cmp	r2, #31
   12fa8:	dc1c      	bgt.n	12fe4 <__register_exitproc+0x60>
   12faa:	f102 0e01 	add.w	lr, r2, #1
   12fae:	b176      	cbz	r6, 12fce <__register_exitproc+0x4a>
   12fb0:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   12fb4:	2401      	movs	r4, #1
   12fb6:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   12fba:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   12fbe:	4094      	lsls	r4, r2
   12fc0:	4320      	orrs	r0, r4
   12fc2:	2e02      	cmp	r6, #2
   12fc4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   12fc8:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   12fcc:	d023      	beq.n	13016 <__register_exitproc+0x92>
   12fce:	3202      	adds	r2, #2
   12fd0:	f8c3 e004 	str.w	lr, [r3, #4]
   12fd4:	6828      	ldr	r0, [r5, #0]
   12fd6:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   12fda:	f000 f861 	bl	130a0 <__retarget_lock_release_recursive>
   12fde:	2000      	movs	r0, #0
   12fe0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12fe4:	4b17      	ldr	r3, [pc, #92]	; (13044 <__register_exitproc+0xc0>)
   12fe6:	b30b      	cbz	r3, 1302c <__register_exitproc+0xa8>
   12fe8:	f44f 70c8 	mov.w	r0, #400	; 0x190
   12fec:	f3af 8000 	nop.w
   12ff0:	4603      	mov	r3, r0
   12ff2:	b1d8      	cbz	r0, 1302c <__register_exitproc+0xa8>
   12ff4:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   12ff8:	6002      	str	r2, [r0, #0]
   12ffa:	2100      	movs	r1, #0
   12ffc:	6041      	str	r1, [r0, #4]
   12ffe:	460a      	mov	r2, r1
   13000:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   13004:	f04f 0e01 	mov.w	lr, #1
   13008:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   1300c:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   13010:	2e00      	cmp	r6, #0
   13012:	d0dc      	beq.n	12fce <__register_exitproc+0x4a>
   13014:	e7cc      	b.n	12fb0 <__register_exitproc+0x2c>
   13016:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   1301a:	430c      	orrs	r4, r1
   1301c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   13020:	e7d5      	b.n	12fce <__register_exitproc+0x4a>
   13022:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   13026:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   1302a:	e7bb      	b.n	12fa4 <__register_exitproc+0x20>
   1302c:	6828      	ldr	r0, [r5, #0]
   1302e:	f000 f837 	bl	130a0 <__retarget_lock_release_recursive>
   13032:	f04f 30ff 	mov.w	r0, #4294967295
   13036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1303a:	bf00      	nop
   1303c:	20000938 	.word	0x20000938
   13040:	00014134 	.word	0x00014134
   13044:	00000000 	.word	0x00000000

00013048 <register_fini>:
   13048:	4b02      	ldr	r3, [pc, #8]	; (13054 <register_fini+0xc>)
   1304a:	b113      	cbz	r3, 13052 <register_fini+0xa>
   1304c:	4802      	ldr	r0, [pc, #8]	; (13058 <register_fini+0x10>)
   1304e:	f000 b805 	b.w	1305c <atexit>
   13052:	4770      	bx	lr
   13054:	00000000 	.word	0x00000000
   13058:	00013069 	.word	0x00013069

0001305c <atexit>:
   1305c:	2300      	movs	r3, #0
   1305e:	4601      	mov	r1, r0
   13060:	461a      	mov	r2, r3
   13062:	4618      	mov	r0, r3
   13064:	f7ff bf8e 	b.w	12f84 <__register_exitproc>

00013068 <__libc_fini_array>:
   13068:	b538      	push	{r3, r4, r5, lr}
   1306a:	4c0a      	ldr	r4, [pc, #40]	; (13094 <__libc_fini_array+0x2c>)
   1306c:	4d0a      	ldr	r5, [pc, #40]	; (13098 <__libc_fini_array+0x30>)
   1306e:	1b64      	subs	r4, r4, r5
   13070:	10a4      	asrs	r4, r4, #2
   13072:	d00a      	beq.n	1308a <__libc_fini_array+0x22>
   13074:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   13078:	3b01      	subs	r3, #1
   1307a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   1307e:	3c01      	subs	r4, #1
   13080:	f855 3904 	ldr.w	r3, [r5], #-4
   13084:	4798      	blx	r3
   13086:	2c00      	cmp	r4, #0
   13088:	d1f9      	bne.n	1307e <__libc_fini_array+0x16>
   1308a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1308e:	f001 b85f 	b.w	14150 <_fini>
   13092:	bf00      	nop
   13094:	00014160 	.word	0x00014160
   13098:	0001415c 	.word	0x0001415c

0001309c <__retarget_lock_acquire_recursive>:
   1309c:	4770      	bx	lr
   1309e:	bf00      	nop

000130a0 <__retarget_lock_release_recursive>:
   130a0:	4770      	bx	lr
   130a2:	bf00      	nop

000130a4 <_ZTV13CANOpen_Class>:
	...
   130ac:	19fd 0000                                   ....

000130b0 <_ZTV8CO_Class>:
	...
   130b8:	19fd 0000                                   ....

000130bc <_ZL17crc16_ccitt_table>:
   130bc:	0000 1021 2042 3063 4084 50a5 60c6 70e7     ..!.B c0.@.P.`.p
   130cc:	8108 9129 a14a b16b c18c d1ad e1ce f1ef     ..).J.k.........
   130dc:	1231 0210 3273 2252 52b5 4294 72f7 62d6     1...s2R".R.B.r.b
   130ec:	9339 8318 b37b a35a d3bd c39c f3ff e3de     9...{.Z.........
   130fc:	2462 3443 0420 1401 64e6 74c7 44a4 5485     b$C4 ....d.t.D.T
   1310c:	a56a b54b 8528 9509 e5ee f5cf c5ac d58d     j.K.(...........
   1311c:	3653 2672 1611 0630 76d7 66f6 5695 46b4     S6r&..0..v.f.V.F
   1312c:	b75b a77a 9719 8738 f7df e7fe d79d c7bc     [.z...8.........
   1313c:	48c4 58e5 6886 78a7 0840 1861 2802 3823     .H.X.h.x@.a..(#8
   1314c:	c9cc d9ed e98e f9af 8948 9969 a90a b92b     ........H.i...+.
   1315c:	5af5 4ad4 7ab7 6a96 1a71 0a50 3a33 2a12     .Z.J.z.jq.P.3:.*
   1316c:	dbfd cbdc fbbf eb9e 9b79 8b58 bb3b ab1a     ........y.X.;...
   1317c:	6ca6 7c87 4ce4 5cc5 2c22 3c03 0c60 1c41     .l.|.L.\",.<`.A.
   1318c:	edae fd8f cdec ddcd ad2a bd0b 8d68 9d49     ........*...h.I.
   1319c:	7e97 6eb6 5ed5 4ef4 3e13 2e32 1e51 0e70     .~.n.^.N.>2.Q.p.
   131ac:	ff9f efbe dfdd cffc bf1b af3a 9f59 8f78     ..........:.Y.x.
   131bc:	9188 81a9 b1ca a1eb d10c c12d f14e e16f     ..........-.N.o.
   131cc:	1080 00a1 30c2 20e3 5004 4025 7046 6067     .....0. .P%@Fpg`
   131dc:	83b9 9398 a3fb b3da c33d d31c e37f f35e     ........=.....^.
   131ec:	02b1 1290 22f3 32d2 4235 5214 6277 7256     .....".25B.RwbVr
   131fc:	b5ea a5cb 95a8 8589 f56e e54f d52c c50d     ........n.O.,...
   1320c:	34e2 24c3 14a0 0481 7466 6447 5424 4405     .4.$....ftGd$T.D
   1321c:	a7db b7fa 8799 97b8 e75f f77e c71d d73c     ........_.~...<.
   1322c:	26d3 36f2 0691 16b0 6657 7676 4615 5634     .&.6....Wfvv.F4V
   1323c:	d94c c96d f90e e92f 99c8 89e9 b98a a9ab     L.m.../.........
   1324c:	5844 4865 7806 6827 18c0 08e1 3882 28a3     DXeH.x'h.....8.(
   1325c:	cb7d db5c eb3f fb1e 8bf9 9bd8 abbb bb9a     }.\.?...........
   1326c:	4a75 5a54 6a37 7a16 0af1 1ad0 2ab3 3a92     uJTZ7j.z.....*.:
   1327c:	fd2e ed0f dd6c cd4d bdaa ad8b 9de8 8dc9     ....l.M.........
   1328c:	7c26 6c07 5c64 4c45 3ca2 2c83 1ce0 0cc1     &|.ld\EL.<.,....
   1329c:	ef1f ff3e cf5d df7c af9b bfba 8fd9 9ff8     ..>.].|.........
   132ac:	6e17 7e36 4e55 5e74 2e93 3eb2 0ed1 1ef0     .n6~UNt^...>....

000132bc <_ZTV15CO_Driver_Class>:
	...
   132c4:	19fd 0000                                   ....

000132c8 <_ZL13OD_record1018>:
   132c8:	01c8 2000 0005 0000 0001 0000 01cc 2000     ... ........... 
   132d8:	0085 0000 0004 0000 01d0 2000 0085 0000     ........... ....
   132e8:	0004 0000 01d4 2000 0085 0000 0004 0000     ....... ........
   132f8:	01d8 2000 0085 0000 0004 0000               ... ........

00013304 <_ZL13OD_record1200>:
   13304:	01e4 2000 0005 0000 0001 0000 01e8 2000     ... ........... 
   13314:	0085 0000 0004 0000 01ec 2000 0085 0000     ........... ....
   13324:	0004 0000                                   ....

00013328 <_ZL13OD_record1400>:
   13328:	01f0 2000 0005 0000 0001 0000 01f4 2000     ... ........... 
   13338:	008d 0000 0004 0000 01f8 2000 000d 0000     ........... ....
   13348:	0001 0000                                   ....

0001334c <_ZL13OD_record1401>:
   1334c:	01fc 2000 0005 0000 0001 0000 0200 2000     ... ........... 
   1335c:	008d 0000 0004 0000 0204 2000 000d 0000     ........... ....
   1336c:	0001 0000                                   ....

00013370 <_ZL13OD_record1402>:
   13370:	0208 2000 0005 0000 0001 0000 020c 2000     ... ........... 
   13380:	008d 0000 0004 0000 0210 2000 000d 0000     ........... ....
   13390:	0001 0000                                   ....

00013394 <_ZL13OD_record1403>:
   13394:	0214 2000 0005 0000 0001 0000 0218 2000     ... ........... 
   133a4:	008d 0000 0004 0000 021c 2000 000d 0000     ........... ....
   133b4:	0001 0000                                   ....

000133b8 <_ZL13OD_record1600>:
   133b8:	0220 2000 000d 0000 0001 0000 0224 2000      .. ........$.. 
   133c8:	008d 0000 0004 0000 0228 2000 008d 0000     ........(.. ....
   133d8:	0004 0000 022c 2000 008d 0000 0004 0000     ....,.. ........
   133e8:	0230 2000 008d 0000 0004 0000 0234 2000     0.. ........4.. 
   133f8:	008d 0000 0004 0000 0238 2000 008d 0000     ........8.. ....
   13408:	0004 0000 023c 2000 008d 0000 0004 0000     ....<.. ........
   13418:	0240 2000 008d 0000 0004 0000               @.. ........

00013424 <_ZL13OD_record1601>:
   13424:	0244 2000 000d 0000 0001 0000 0248 2000     D.. ........H.. 
   13434:	008d 0000 0004 0000 024c 2000 008d 0000     ........L.. ....
   13444:	0004 0000 0250 2000 008d 0000 0004 0000     ....P.. ........
   13454:	0254 2000 008d 0000 0004 0000 0258 2000     T.. ........X.. 
   13464:	008d 0000 0004 0000 025c 2000 008d 0000     ........\.. ....
   13474:	0004 0000 0260 2000 008d 0000 0004 0000     ....`.. ........
   13484:	0264 2000 008d 0000 0004 0000               d.. ........

00013490 <_ZL13OD_record1602>:
   13490:	0268 2000 000d 0000 0001 0000 026c 2000     h.. ........l.. 
   134a0:	008d 0000 0004 0000 0270 2000 008d 0000     ........p.. ....
   134b0:	0004 0000 0274 2000 008d 0000 0004 0000     ....t.. ........
   134c0:	0278 2000 008d 0000 0004 0000 027c 2000     x.. ........|.. 
   134d0:	008d 0000 0004 0000 0280 2000 008d 0000     ........... ....
   134e0:	0004 0000 0284 2000 008d 0000 0004 0000     ....... ........
   134f0:	0288 2000 008d 0000 0004 0000               ... ........

000134fc <_ZL13OD_record1603>:
   134fc:	028c 2000 000d 0000 0001 0000 0290 2000     ... ........... 
   1350c:	008d 0000 0004 0000 0294 2000 008d 0000     ........... ....
   1351c:	0004 0000 0298 2000 008d 0000 0004 0000     ....... ........
   1352c:	029c 2000 008d 0000 0004 0000 02a0 2000     ... ........... 
   1353c:	008d 0000 0004 0000 02a4 2000 008d 0000     ........... ....
   1354c:	0004 0000 02a8 2000 008d 0000 0004 0000     ....... ........
   1355c:	02ac 2000 008d 0000 0004 0000               ... ........

00013568 <_ZL13OD_record1800>:
   13568:	02b0 2000 0005 0000 0001 0000 02b4 2000     ... ........... 
   13578:	008d 0000 0004 0000 02b8 2000 000d 0000     ........... ....
   13588:	0001 0000 02bc 2000 008d 0000 0002 0000     ....... ........
   13598:	02c0 2000 000d 0000 0001 0000 02c4 2000     ... ........... 
   135a8:	008d 0000 0002 0000 02c8 2000 000d 0000     ........... ....
   135b8:	0001 0000                                   ....

000135bc <_ZL13OD_record1801>:
   135bc:	02cc 2000 0005 0000 0001 0000 02d0 2000     ... ........... 
   135cc:	008d 0000 0004 0000 02d4 2000 000d 0000     ........... ....
   135dc:	0001 0000 02d8 2000 008d 0000 0002 0000     ....... ........
   135ec:	02dc 2000 000d 0000 0001 0000 02e0 2000     ... ........... 
   135fc:	008d 0000 0002 0000 02e4 2000 000d 0000     ........... ....
   1360c:	0001 0000                                   ....

00013610 <_ZL13OD_record1802>:
   13610:	02e8 2000 0005 0000 0001 0000 02ec 2000     ... ........... 
   13620:	008d 0000 0004 0000 02f0 2000 000d 0000     ........... ....
   13630:	0001 0000 02f4 2000 008d 0000 0002 0000     ....... ........
   13640:	02f8 2000 000d 0000 0001 0000 02fc 2000     ... ........... 
   13650:	008d 0000 0002 0000 0300 2000 000d 0000     ........... ....
   13660:	0001 0000                                   ....

00013664 <_ZL13OD_record1803>:
   13664:	0304 2000 0005 0000 0001 0000 0308 2000     ... ........... 
   13674:	008d 0000 0004 0000 030c 2000 000d 0000     ........... ....
   13684:	0001 0000 0310 2000 008d 0000 0002 0000     ....... ........
   13694:	0314 2000 000d 0000 0001 0000 0318 2000     ... ........... 
   136a4:	008d 0000 0002 0000 031c 2000 000d 0000     ........... ....
   136b4:	0001 0000                                   ....

000136b8 <_ZL13OD_record1A00>:
   136b8:	0320 2000 000d 0000 0001 0000 0324 2000      .. ........$.. 
   136c8:	008d 0000 0004 0000 0328 2000 008d 0000     ........(.. ....
   136d8:	0004 0000 032c 2000 008d 0000 0004 0000     ....,.. ........
   136e8:	0330 2000 008d 0000 0004 0000 0334 2000     0.. ........4.. 
   136f8:	008d 0000 0004 0000 0338 2000 008d 0000     ........8.. ....
   13708:	0004 0000 033c 2000 008d 0000 0004 0000     ....<.. ........
   13718:	0340 2000 008d 0000 0004 0000               @.. ........

00013724 <_ZL13OD_record1A01>:
   13724:	0344 2000 000d 0000 0001 0000 0348 2000     D.. ........H.. 
   13734:	008d 0000 0004 0000 034c 2000 008d 0000     ........L.. ....
   13744:	0004 0000 0350 2000 008d 0000 0004 0000     ....P.. ........
   13754:	0354 2000 008d 0000 0004 0000 0358 2000     T.. ........X.. 
   13764:	008d 0000 0004 0000 035c 2000 008d 0000     ........\.. ....
   13774:	0004 0000 0360 2000 008d 0000 0004 0000     ....`.. ........
   13784:	0364 2000 008d 0000 0004 0000               d.. ........

00013790 <_ZL13OD_record1A02>:
   13790:	0368 2000 000d 0000 0001 0000 036c 2000     h.. ........l.. 
   137a0:	008d 0000 0004 0000 0370 2000 008d 0000     ........p.. ....
   137b0:	0004 0000 0374 2000 008d 0000 0004 0000     ....t.. ........
   137c0:	0378 2000 008d 0000 0004 0000 037c 2000     x.. ........|.. 
   137d0:	008d 0000 0004 0000 0380 2000 008d 0000     ........... ....
   137e0:	0004 0000 0384 2000 008d 0000 0004 0000     ....... ........
   137f0:	0388 2000 008d 0000 0004 0000               ... ........

000137fc <_ZL13OD_record1A03>:
   137fc:	038c 2000 000d 0000 0001 0000 0390 2000     ... ........... 
   1380c:	008d 0000 0004 0000 0394 2000 008d 0000     ........... ....
   1381c:	0004 0000 0398 2000 008d 0000 0004 0000     ....... ........
   1382c:	039c 2000 008d 0000 0004 0000 03a0 2000     ... ........... 
   1383c:	008d 0000 0004 0000 03a4 2000 008d 0000     ........... ....
   1384c:	0004 0000 03a8 2000 008d 0000 0004 0000     ....... ........
   1385c:	03ac 2000 008d 0000 0004 0000               ... ........

00013868 <_ZL13OD_record2120>:
   13868:	0098 2000 0006 0000 0001 0000 00a0 2000     ... ........... 
   13878:	00be 0000 0008 0000 00a8 2000 00be 0000     ........... ....
   13888:	0008 0000 00b0 2000 00be 0000 0004 0000     ....... ........
   13898:	00b8 2000 00be 0000 0008 0000 0000 0000     ... ............
   138a8:	000e 0000 0000 0000                         ........

000138b0 <_ZL13OD_record2130>:
   138b0:	00c8 2000 0006 0000 0001 0000 00c9 2000     ... ........... 
   138c0:	0006 0000 001e 0000 00e8 2000 008e 0000     ........... ....
   138d0:	0008 0000 00f0 2000 00be 0000 0004 0000     ....... ........

000138e0 <CO_ObjDict>:
   138e0:	1000 0000 0000 0000 0085 0000 0004 0000     ................
   138f0:	0188 2000 1001 0000 0000 0000 0036 0000     ... ........6...
   13900:	0001 0000 000c 2000 1002 0000 0000 0000     ....... ........
   13910:	00b6 0000 0004 0000 0010 2000 1003 0000     ........... ....
   13920:	0008 0000 008e 0000 0004 0000 0014 2000     ............... 
   13930:	1005 0000 0000 0000 008d 0000 0004 0000     ................
   13940:	018c 2000 1006 0000 0000 0000 008d 0000     ... ............
   13950:	0004 0000 0190 2000 1007 0000 0000 0000     ....... ........
   13960:	008d 0000 0004 0000 0194 2000 1008 0000     ........... ....
   13970:	0000 0000 0005 0000 000b 0000 0198 2000     ............... 
   13980:	1009 0000 0000 0000 0005 0000 0004 0000     ................
   13990:	01a3 2000 100a 0000 0000 0000 0005 0000     ... ............
   139a0:	0004 0000 01a7 2000 1010 0000 0001 0000     ....... ........
   139b0:	008e 0000 0004 0000 0034 2000 1011 0000     ........4.. ....
   139c0:	0001 0000 008e 0000 0004 0000 0038 2000     ............8.. 
   139d0:	1014 0000 0000 0000 0085 0000 0004 0000     ................
   139e0:	01ac 2000 1015 0000 0000 0000 008d 0000     ... ............
   139f0:	0002 0000 01b0 2000 1016 0000 0004 0000     ....... ........
   13a00:	008d 0000 0004 0000 01b4 2000 1017 0000     ........... ....
   13a10:	0000 0000 008d 0000 0002 0000 01c4 2000     ............... 
   13a20:	1018 0000 0004 0000 0000 0000 0000 0000     ................
   13a30:	32c8 0001 1019 0000 0000 0000 000d 0000     .2..............
   13a40:	0001 0000 01dc 2000 1029 0000 0006 0000     ....... ).......
   13a50:	000d 0000 0001 0000 01dd 2000 1200 0000     ........... ....
   13a60:	0002 0000 0000 0000 0000 0000 3304 0001     .............3..
   13a70:	1400 0000 0002 0000 0000 0000 0000 0000     ................
   13a80:	3328 0001 1401 0000 0002 0000 0000 0000     (3..............
   13a90:	0000 0000 334c 0001 1402 0000 0002 0000     ....L3..........
	...
   13aa8:	3370 0001 1403 0000 0002 0000 0000 0000     p3..............
   13ab8:	0000 0000 3394 0001 1600 0000 0008 0000     .....3..........
	...
   13ad0:	33b8 0001 1601 0000 0008 0000 0000 0000     .3..............
   13ae0:	0000 0000 3424 0001 1602 0000 0008 0000     ....$4..........
	...
   13af8:	3490 0001 1603 0000 0008 0000 0000 0000     .4..............
   13b08:	0000 0000 34fc 0001 1800 0000 0006 0000     .....4..........
	...
   13b20:	3568 0001 1801 0000 0006 0000 0000 0000     h5..............
   13b30:	0000 0000 35bc 0001 1802 0000 0006 0000     .....5..........
	...
   13b48:	3610 0001 1803 0000 0006 0000 0000 0000     .6..............
   13b58:	0000 0000 3664 0001 1a00 0000 0008 0000     ....d6..........
	...
   13b70:	36b8 0001 1a01 0000 0008 0000 0000 0000     .6..............
   13b80:	0000 0000 3724 0001 1a02 0000 0008 0000     ....$7..........
	...
   13b98:	3790 0001 1a03 0000 0008 0000 0000 0000     .7..............
   13ba8:	0000 0000 37fc 0001 1f80 0000 0000 0000     .....7..........
   13bb8:	008d 0000 0004 0000 03b0 2000 2100 0000     ........... .!..
   13bc8:	0000 0000 0036 0000 000a 0000 003c 2000     ....6.......<.. 
   13bd8:	2101 0000 0000 0000 000d 0000 0001 0000     .!..............
   13be8:	03b4 2000 2102 0000 0000 0000 008d 0000     ... .!..........
   13bf8:	0002 0000 03b6 2000 2103 0000 0000 0000     ....... .!......
   13c08:	008e 0000 0002 0000 0046 2000 2104 0000     ........F.. .!..
   13c18:	0000 0000 0086 0000 0002 0000 0048 2000     ............H.. 
   13c28:	2106 0000 0000 0000 0087 0000 0004 0000     .!..............
   13c38:	013c 2000 2107 0000 0005 0000 00be 0000     <.. .!..........
   13c48:	0002 0000 004a 2000 2108 0000 0001 0000     ....J.. .!......
   13c58:	00b6 0000 0002 0000 0054 2000 2109 0000     ........T.. .!..
   13c68:	0001 0000 00b6 0000 0002 0000 0056 2000     ............V.. 
   13c78:	2110 0000 0010 0000 00fe 0000 0004 0000     .!..............
   13c88:	0058 2000 2111 0000 0010 0000 00fd 0000     X.. .!..........
   13c98:	0004 0000 03b8 2000 2112 0000 0010 0000     ....... .!......
   13ca8:	00ff 0000 0004 0000 0140 2000 2120 0000     ........@..  !..
   13cb8:	0005 0000 0000 0000 0000 0000 3868 0001     ............h8..
   13cc8:	2130 0000 0003 0000 0000 0000 0000 0000     0!..............
   13cd8:	38b0 0001 6000 0000 0008 0000 0076 0000     .8...`......v...
   13ce8:	0001 0000 00f8 2000 6200 0000 0008 0000     ....... .b......
   13cf8:	003e 0000 0001 0000 0100 2000 6401 0000     >.......... .d..
   13d08:	000c 0000 00b6 0000 0002 0000 0108 2000     ............... 
   13d18:	6411 0000 0008 0000 00be 0000 0002 0000     .d..............
   13d28:	0120 2000 2e2e 682f 6c70 702f 726f 2f74      .. ../hpl/port/
   13d38:	7068 5f6c 7067 6f69 625f 7361 2e65 0068     hpl_gpio_base.h.
   13d48:	2e2e 682f 6c61 692f 636e 756c 6564 682f     ../hal/include/h
   13d58:	6c61 775f 7464 682e 0000 0000 2e2e 682f     al_wdt.h....../h
   13d68:	6c61 732f 6372 682f 6c61 635f 6c61 6e65     al/src/hal_calen
   13d78:	6164 2e72 0063 0000 2e2e 682f 6c61 732f     dar.c...../hal/s
   13d88:	6372 682f 6c61 635f 6e61 615f 7973 636e     rc/hal_can_async
   13d98:	632e 0000 2e2e 682f 6c61 732f 6372 682f     .c..../hal/src/h
   13da8:	6c61 635f 6372 735f 6e79 2e63 0063 0000     al_crc_sync.c...
   13db8:	2e2e 682f 6c61 732f 6372 682f 6c61 695f     ../hal/src/hal_i
   13dc8:	6332 6d5f 615f 7973 636e 632e 0000 0000     2c_m_async.c....
   13dd8:	2e2e 682f 6c61 732f 6372 682f 6c61 705f     ../hal/src/hal_p
   13de8:	6d77 632e 0000 0000 2e2e 682f 6c61 732f     wm.c....../hal/s
   13df8:	6372 682f 6c61 715f 7073 5f69 7973 636e     rc/hal_qspi_sync
   13e08:	632e 0000 2e2e 682f 6c61 732f 6372 682f     .c..../hal/src/h
   13e18:	6c61 735f 6970 6d5f 615f 7973 636e 632e     al_spi_m_async.c
   13e28:	0000 0000 2e2e 682f 6c61 732f 6372 682f     ....../hal/src/h
   13e38:	6c61 735f 6970 6d5f 735f 6e79 2e63 0063     al_spi_m_sync.c.
   13e48:	2e2e 682f 6c61 732f 6372 682f 6c61 745f     ../hal/src/hal_t
   13e58:	6d69 7265 632e 0000 2e2e 682f 6c61 752f     imer.c..../hal/u
   13e68:	6974 736c 732f 6372 752f 6974 736c 6c5f     tils/src/utils_l
   13e78:	7369 2e74 0063 0000 0100 0302 0504 0706     ist.c...........
   13e88:	0c08 1410 2018 4030                         ..... 0@

00013e90 <_map>:
   13e90:	0004 0000 0004 0000 0005 0000 0005 0000     ................
   13ea0:	0006 0000 0056 0000 0007 0000 0057 0000     ....V.......W...
   13eb0:	2e2e 682f 6c70 652f 6369 682f 6c70 655f     ../hpl/eic/hpl_e
   13ec0:	6369 632e 0000 0000                         ic.c....

00013ec8 <user_mux_confs>:
   13ec8:	0100 0000 0000 0000 0000 0000 0000 0000     ................
	...

00013f0c <channel_confs>:
   13f0c:	065e 0000 0000 0000 0000 0000 0000 0000     ^...............
	...

00013f4c <interrupt_cfg>:
	...
   13fcc:	2e2e 682f 6c70 712f 7073 2f69 7068 5f6c     ../hpl/qspi/hpl_
   13fdc:	7371 6970 632e 0000 2e2e 682f 6c70 722f     qspi.c..../hpl/r
   13fec:	6374 682f 6c70 725f 6374 632e 0000 0000     tc/hpl_rtc.c....
   13ffc:	2e2e 682f 6c70 732f 7265 6f63 2f6d 7068     ../hpl/sercom/hp
   1400c:	5f6c 6573 6372 6d6f 632e 0000 3000 4000     l_sercom.c...0.@
   1401c:	3400 4000 2000 4101 4000 4101 0000 4300     .4.@. .A.@.A...C
   1402c:	0400 4300 0800 4300 0c00 4300               ...C...C...C

00014038 <sercomspi_regs>:
   14038:	000c 0020 0000 0002 0000 0000 009f 01ff     .. .............
   14048:	0c04 3000 0000 0200 0000 0000 9f00 ff00     ...0............
   14058:	0601 0000 2e2e 682f 6c70 742f 2f63 7068     ....../hpl/tc/hp
   14068:	5f6c 6374 632e 0000 3800 4000 3c00 4000     l_tc.c...8.@.<.@
   14078:	a000 4101 c000 4101 1400 4200 1800 4200     ...A...A...B...B
   14088:	1400 4300 1800 4300                         ...C...C

00014090 <_usb_ep_cfgs>:
   14090:	15dc 2000 0000 0000 0040 0000 161c 2000     ... ....@...... 
   140a0:	165c 2000 0040 0040 169c 2000 16dc 2000     \.. @.@.... ... 
   140b0:	0040 0040 171c 2000 175c 2000 0040 0040     @.@.... \.. @.@.
   140c0:	179c 2000 17dc 2000 0040 0040 0804 0000     ... ... @.@.....
   140d0:	4a25 0000 2e2e 682f 6c70 772f 7464 682f     %J..../hpl/wdt/h
   140e0:	6c70 775f 7464 632e 0000 0000 2e2e 682f     pl_wdt.c....../h
   140f0:	6c70 702f 726f 2f74 7068 5f6c 7067 6f69     pl/port/hpl_gpio
   14100:	625f 7361 2e65 0068                         _base.h.

00014108 <n25q256a_interface>:
   14108:	13e9 0001 148d 0001 159d 0001 1755 0001     ............U...
   14118:	17e5 0001 2e2e 752f 6273 642f 7665 6369     ....../usb/devic
   14128:	2f65 7375 6462 2e63 0063 0000               e/usbdc.c...

00014134 <_global_impure_ptr>:
   14134:	0510 2000                                   ... 

00014138 <_init>:
   14138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1413a:	bf00      	nop
   1413c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1413e:	bc08      	pop	{r3}
   14140:	469e      	mov	lr, r3
   14142:	4770      	bx	lr

00014144 <__init_array_start>:
   14144:	00013049 	.word	0x00013049

00014148 <__frame_dummy_init_array_entry>:
   14148:	00000289 000069a5                       .....i..

00014150 <_fini>:
   14150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14152:	bf00      	nop
   14154:	bcf8      	pop	{r3, r4, r5, r6, r7}
   14156:	bc08      	pop	{r3}
   14158:	469e      	mov	lr, r3
   1415a:	4770      	bx	lr

0001415c <__fini_array_start>:
   1415c:	00000265 	.word	0x00000265
