
CANOpenNMTMaster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00013f70  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00013f70  00013f70  00023f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000093c  20000000  00013f78  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0003093c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0003093c  2**0
                  CONTENTS
  5 .bss          00001284  2000093c  000148b4  0003093c  2**2
                  ALLOC
  6 .stack        00010000  20001bc0  00015b38  0003093c  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0003093c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0003096a  2**0
                  CONTENTS, READONLY
  9 .debug_info   00066f49  00000000  00000000  000309c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008614  00000000  00000000  0009790c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000184ef  00000000  00000000  0009ff20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002bb0  00000000  00000000  000b840f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000028b0  00000000  00000000  000bafbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0004a258  00000000  00000000  000bd86f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0003610c  00000000  00000000  00107ac7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    001359ff  00000000  00000000  0013dbd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000b760  00000000  00000000  002735d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
{0x6401, 0x0C, 0xB6,  2, (void*)&CO_OD_RAM.readAnalogueInput16Bit[0]},
{0x6411, 0x08, 0xBE,  2, (void*)&CO_OD_RAM.writeAnalogueOutput16Bit[0]},
};

// default constructor
CO_OD_Class::CO_OD_Class()
       0:	c0 1b 01 20 d5 02 00 00 d1 02 00 00 d1 02 00 00     ... ............
{
} //CO_OD
      10:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      2c:	d1 02 00 00 d1 02 00 00 00 00 00 00 d1 02 00 00     ................
      3c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      4c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      5c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      6c:	cd 57 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     .W..............
      7c:	d1 02 00 00 75 46 00 00 85 46 00 00 95 46 00 00     ....uF...F...F..
      8c:	a5 46 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     .F..............
      9c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      ac:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      bc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      cc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      dc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      f4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     104:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     114:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     124:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     134:	d1 02 00 00 c9 69 00 00 e5 69 00 00 01 6a 00 00     .....i...i...j..
     144:	1d 6a 00 00 39 6a 00 00 55 6a 00 00 71 6a 00 00     .j..9j..Uj..qj..
     154:	8d 6a 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     .j..............
     164:	d1 02 00 00 a9 6a 00 00 c5 6a 00 00 e1 6a 00 00     .....j...j...j..
     174:	fd 6a 00 00 d1 02 00 00 55 3c 00 00 ad a2 00 00     .j......U<......
     184:	bd a2 00 00 cd a2 00 00 dd a2 00 00 d1 02 00 00     ................
     194:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1a4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1b4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1c4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1d4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1e4:	d1 02 00 00 d1 02 00 00 31 7a 00 00 4d 7a 00 00     ........1z..Mz..
     1f4:	69 7a 00 00 85 7a 00 00 d1 02 00 00 d1 02 00 00     iz...z..........
     204:	d1 02 00 00 a1 7a 00 00 d1 02 00 00 d1 02 00 00     .....z..........
     214:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     224:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     234:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     244:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     254:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	2000093c 	.word	0x2000093c
     280:	00000000 	.word	0x00000000
     284:	00013f78 	.word	0x00013f78

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00013f78 	.word	0x00013f78
     2c4:	20000940 	.word	0x20000940
     2c8:	00013f78 	.word	0x00013f78
     2cc:	00000000 	.word	0x00000000

000002d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2d0:	e7fe      	b.n	2d0 <Dummy_Handler>
	...

000002d4 <Reset_Handler>:
{
     2d4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2d6:	4b17      	ldr	r3, [pc, #92]	; (334 <Reset_Handler+0x60>)
     2d8:	4a17      	ldr	r2, [pc, #92]	; (338 <Reset_Handler+0x64>)
     2da:	429a      	cmp	r2, r3
     2dc:	d010      	beq.n	300 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2de:	4b17      	ldr	r3, [pc, #92]	; (33c <Reset_Handler+0x68>)
     2e0:	4a14      	ldr	r2, [pc, #80]	; (334 <Reset_Handler+0x60>)
     2e2:	429a      	cmp	r2, r3
     2e4:	d20c      	bcs.n	300 <Reset_Handler+0x2c>
     2e6:	3b01      	subs	r3, #1
     2e8:	1a9b      	subs	r3, r3, r2
     2ea:	f023 0303 	bic.w	r3, r3, #3
     2ee:	3304      	adds	r3, #4
     2f0:	4413      	add	r3, r2
     2f2:	4911      	ldr	r1, [pc, #68]	; (338 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     2f4:	f851 0b04 	ldr.w	r0, [r1], #4
     2f8:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     2fc:	429a      	cmp	r2, r3
     2fe:	d1f9      	bne.n	2f4 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     300:	4b0f      	ldr	r3, [pc, #60]	; (340 <Reset_Handler+0x6c>)
     302:	4a10      	ldr	r2, [pc, #64]	; (344 <Reset_Handler+0x70>)
     304:	429a      	cmp	r2, r3
     306:	d20a      	bcs.n	31e <Reset_Handler+0x4a>
     308:	3b01      	subs	r3, #1
     30a:	1a9b      	subs	r3, r3, r2
     30c:	f023 0303 	bic.w	r3, r3, #3
     310:	3304      	adds	r3, #4
     312:	4413      	add	r3, r2
                *pDest++ = 0;
     314:	2100      	movs	r1, #0
     316:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     31a:	4293      	cmp	r3, r2
     31c:	d1fb      	bne.n	316 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31e:	4a0a      	ldr	r2, [pc, #40]	; (348 <Reset_Handler+0x74>)
     320:	4b0a      	ldr	r3, [pc, #40]	; (34c <Reset_Handler+0x78>)
     322:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     326:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     328:	4b09      	ldr	r3, [pc, #36]	; (350 <Reset_Handler+0x7c>)
     32a:	4798      	blx	r3
        main();
     32c:	4b09      	ldr	r3, [pc, #36]	; (354 <Reset_Handler+0x80>)
     32e:	4798      	blx	r3
     330:	e7fe      	b.n	330 <Reset_Handler+0x5c>
     332:	bf00      	nop
     334:	20000000 	.word	0x20000000
     338:	00013f78 	.word	0x00013f78
     33c:	2000093c 	.word	0x2000093c
     340:	20001bc0 	.word	0x20001bc0
     344:	2000093c 	.word	0x2000093c
     348:	e000ed00 	.word	0xe000ed00
     34c:	00000000 	.word	0x00000000
     350:	00012b75 	.word	0x00012b75
     354:	00000359 	.word	0x00000359

00000358 <main>:
#include "CANOpen_Class.h"

static CANOpen_Class cano(&CAN_CCU);

int main(void)
{
     358:	b580      	push	{r7, lr}
	atmel_start_init();
     35a:	4b0c      	ldr	r3, [pc, #48]	; (38c <main+0x34>)
     35c:	4798      	blx	r3
	cano.Init(NMT_MASTER_NODE);
     35e:	2101      	movs	r1, #1
     360:	480b      	ldr	r0, [pc, #44]	; (390 <main+0x38>)
     362:	4b0c      	ldr	r3, [pc, #48]	; (394 <main+0x3c>)
     364:	4798      	blx	r3
	/* Replace with your application code */
	while (1)
	{

	//	cano.StartNMTService();
		cano.Process();
     366:	4e0a      	ldr	r6, [pc, #40]	; (390 <main+0x38>)
     368:	4f0b      	ldr	r7, [pc, #44]	; (398 <main+0x40>)
		delay_ms(500);
     36a:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
		cano.Process();
     36e:	2200      	movs	r2, #0
     370:	2101      	movs	r1, #1
     372:	4630      	mov	r0, r6
     374:	47b8      	blx	r7
		delay_ms(500);
     376:	4620      	mov	r0, r4
     378:	4d08      	ldr	r5, [pc, #32]	; (39c <main+0x44>)
     37a:	47a8      	blx	r5
		
		cano.Periodic_Process();
     37c:	4621      	mov	r1, r4
     37e:	4630      	mov	r0, r6
     380:	4b07      	ldr	r3, [pc, #28]	; (3a0 <main+0x48>)
     382:	4798      	blx	r3
		delay_ms(500);
     384:	4620      	mov	r0, r4
     386:	47a8      	blx	r5
     388:	e7f1      	b.n	36e <main+0x16>
     38a:	bf00      	nop
     38c:	000003d5 	.word	0x000003d5
     390:	20000958 	.word	0x20000958
     394:	0000c7ad 	.word	0x0000c7ad
     398:	0000d0bd 	.word	0x0000d0bd
     39c:	000019fd 	.word	0x000019fd
     3a0:	0000c841 	.word	0x0000c841

000003a4 <_GLOBAL__sub_I_main>:
	}
     3a4:	b510      	push	{r4, lr}
static CANOpen_Class cano(&CAN_CCU);
     3a6:	4c05      	ldr	r4, [pc, #20]	; (3bc <_GLOBAL__sub_I_main+0x18>)
     3a8:	4905      	ldr	r1, [pc, #20]	; (3c0 <_GLOBAL__sub_I_main+0x1c>)
     3aa:	4620      	mov	r0, r4
     3ac:	4b05      	ldr	r3, [pc, #20]	; (3c4 <_GLOBAL__sub_I_main+0x20>)
     3ae:	4798      	blx	r3
     3b0:	4a05      	ldr	r2, [pc, #20]	; (3c8 <_GLOBAL__sub_I_main+0x24>)
     3b2:	4906      	ldr	r1, [pc, #24]	; (3cc <_GLOBAL__sub_I_main+0x28>)
     3b4:	4620      	mov	r0, r4
     3b6:	4b06      	ldr	r3, [pc, #24]	; (3d0 <_GLOBAL__sub_I_main+0x2c>)
     3b8:	4798      	blx	r3
     3ba:	bd10      	pop	{r4, pc}
     3bc:	20000958 	.word	0x20000958
     3c0:	20001a00 	.word	0x20001a00
     3c4:	0000c749 	.word	0x0000c749
     3c8:	20000000 	.word	0x20000000
     3cc:	0000c785 	.word	0x0000c785
     3d0:	00012b41 	.word	0x00012b41

000003d4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     3d4:	b580      	push	{r7, lr}
     3d6:	af00      	add	r7, sp, #0
	system_init();
     3d8:	4b03      	ldr	r3, [pc, #12]	; (3e8 <atmel_start_init+0x14>)
     3da:	4798      	blx	r3
	usb_init();
     3dc:	4b03      	ldr	r3, [pc, #12]	; (3ec <atmel_start_init+0x18>)
     3de:	4798      	blx	r3
	spi_nor_flash_init();
     3e0:	4b03      	ldr	r3, [pc, #12]	; (3f0 <atmel_start_init+0x1c>)
     3e2:	4798      	blx	r3
}
     3e4:	bf00      	nop
     3e6:	bd80      	pop	{r7, pc}
     3e8:	000014d1 	.word	0x000014d1
     3ec:	0000a9b1 	.word	0x0000a9b1
     3f0:	0000a945 	.word	0x0000a945

000003f4 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     3f4:	b480      	push	{r7}
     3f6:	b085      	sub	sp, #20
     3f8:	af00      	add	r7, sp, #0
     3fa:	60f8      	str	r0, [r7, #12]
     3fc:	460b      	mov	r3, r1
     3fe:	607a      	str	r2, [r7, #4]
     400:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     402:	7afa      	ldrb	r2, [r7, #11]
     404:	68fb      	ldr	r3, [r7, #12]
     406:	3220      	adds	r2, #32
     408:	6879      	ldr	r1, [r7, #4]
     40a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     40e:	bf00      	nop
     410:	3714      	adds	r7, #20
     412:	46bd      	mov	sp, r7
     414:	f85d 7b04 	ldr.w	r7, [sp], #4
     418:	4770      	bx	lr

0000041a <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
     41a:	b480      	push	{r7}
     41c:	b083      	sub	sp, #12
     41e:	af00      	add	r7, sp, #0
     420:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     422:	687b      	ldr	r3, [r7, #4]
     424:	691b      	ldr	r3, [r3, #16]
     426:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     42a:	687b      	ldr	r3, [r7, #4]
     42c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     42e:	bf00      	nop
     430:	370c      	adds	r7, #12
     432:	46bd      	mov	sp, r7
     434:	f85d 7b04 	ldr.w	r7, [sp], #4
     438:	4770      	bx	lr

0000043a <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
     43a:	b480      	push	{r7}
     43c:	b083      	sub	sp, #12
     43e:	af00      	add	r7, sp, #0
     440:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     442:	687b      	ldr	r3, [r7, #4]
     444:	691b      	ldr	r3, [r3, #16]
     446:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     44a:	687b      	ldr	r3, [r7, #4]
     44c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     44e:	bf00      	nop
     450:	370c      	adds	r7, #12
     452:	46bd      	mov	sp, r7
     454:	f85d 7b04 	ldr.w	r7, [sp], #4
     458:	4770      	bx	lr

0000045a <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
     45a:	b480      	push	{r7}
     45c:	b083      	sub	sp, #12
     45e:	af00      	add	r7, sp, #0
     460:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
     462:	687b      	ldr	r3, [r7, #4]
     464:	691b      	ldr	r3, [r3, #16]
     466:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
     46a:	687b      	ldr	r3, [r7, #4]
     46c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     46e:	bf00      	nop
     470:	370c      	adds	r7, #12
     472:	46bd      	mov	sp, r7
     474:	f85d 7b04 	ldr.w	r7, [sp], #4
     478:	4770      	bx	lr

0000047a <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
     47a:	b480      	push	{r7}
     47c:	b083      	sub	sp, #12
     47e:	af00      	add	r7, sp, #0
     480:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     482:	687b      	ldr	r3, [r7, #4]
     484:	691b      	ldr	r3, [r3, #16]
     486:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
     48a:	687b      	ldr	r3, [r7, #4]
     48c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     48e:	bf00      	nop
     490:	370c      	adds	r7, #12
     492:	46bd      	mov	sp, r7
     494:	f85d 7b04 	ldr.w	r7, [sp], #4
     498:	4770      	bx	lr

0000049a <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
     49a:	b480      	push	{r7}
     49c:	b083      	sub	sp, #12
     49e:	af00      	add	r7, sp, #0
     4a0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     4a2:	687b      	ldr	r3, [r7, #4]
     4a4:	695b      	ldr	r3, [r3, #20]
     4a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
     4aa:	687b      	ldr	r3, [r7, #4]
     4ac:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     4ae:	bf00      	nop
     4b0:	370c      	adds	r7, #12
     4b2:	46bd      	mov	sp, r7
     4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
     4b8:	4770      	bx	lr

000004ba <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
     4ba:	b480      	push	{r7}
     4bc:	b083      	sub	sp, #12
     4be:	af00      	add	r7, sp, #0
     4c0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     4c2:	687b      	ldr	r3, [r7, #4]
     4c4:	695b      	ldr	r3, [r3, #20]
     4c6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
     4ca:	687b      	ldr	r3, [r7, #4]
     4cc:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     4ce:	bf00      	nop
     4d0:	370c      	adds	r7, #12
     4d2:	46bd      	mov	sp, r7
     4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
     4d8:	4770      	bx	lr

000004da <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
     4da:	b480      	push	{r7}
     4dc:	b083      	sub	sp, #12
     4de:	af00      	add	r7, sp, #0
     4e0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     4e2:	687b      	ldr	r3, [r7, #4]
     4e4:	695b      	ldr	r3, [r3, #20]
     4e6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     4ea:	687b      	ldr	r3, [r7, #4]
     4ec:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     4ee:	bf00      	nop
     4f0:	370c      	adds	r7, #12
     4f2:	46bd      	mov	sp, r7
     4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
     4f8:	4770      	bx	lr

000004fa <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
     4fa:	b480      	push	{r7}
     4fc:	b083      	sub	sp, #12
     4fe:	af00      	add	r7, sp, #0
     500:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     502:	687b      	ldr	r3, [r7, #4]
     504:	695b      	ldr	r3, [r3, #20]
     506:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     50a:	687b      	ldr	r3, [r7, #4]
     50c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     50e:	bf00      	nop
     510:	370c      	adds	r7, #12
     512:	46bd      	mov	sp, r7
     514:	f85d 7b04 	ldr.w	r7, [sp], #4
     518:	4770      	bx	lr

0000051a <hri_mclk_set_APBAMASK_TC1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_TC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC1_bit(const void *const hw)
{
     51a:	b480      	push	{r7}
     51c:	b083      	sub	sp, #12
     51e:	af00      	add	r7, sp, #0
     520:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
     522:	687b      	ldr	r3, [r7, #4]
     524:	695b      	ldr	r3, [r3, #20]
     526:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
     52a:	687b      	ldr	r3, [r7, #4]
     52c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     52e:	bf00      	nop
     530:	370c      	adds	r7, #12
     532:	46bd      	mov	sp, r7
     534:	f85d 7b04 	ldr.w	r7, [sp], #4
     538:	4770      	bx	lr

0000053a <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
     53a:	b480      	push	{r7}
     53c:	b083      	sub	sp, #12
     53e:	af00      	add	r7, sp, #0
     540:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     542:	687b      	ldr	r3, [r7, #4]
     544:	699b      	ldr	r3, [r3, #24]
     546:	f043 0201 	orr.w	r2, r3, #1
     54a:	687b      	ldr	r3, [r7, #4]
     54c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     54e:	bf00      	nop
     550:	370c      	adds	r7, #12
     552:	46bd      	mov	sp, r7
     554:	f85d 7b04 	ldr.w	r7, [sp], #4
     558:	4770      	bx	lr

0000055a <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
     55a:	b480      	push	{r7}
     55c:	b083      	sub	sp, #12
     55e:	af00      	add	r7, sp, #0
     560:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     562:	687b      	ldr	r3, [r7, #4]
     564:	699b      	ldr	r3, [r3, #24]
     566:	f043 0202 	orr.w	r2, r3, #2
     56a:	687b      	ldr	r3, [r7, #4]
     56c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     56e:	bf00      	nop
     570:	370c      	adds	r7, #12
     572:	46bd      	mov	sp, r7
     574:	f85d 7b04 	ldr.w	r7, [sp], #4
     578:	4770      	bx	lr

0000057a <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
     57a:	b480      	push	{r7}
     57c:	b083      	sub	sp, #12
     57e:	af00      	add	r7, sp, #0
     580:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     582:	687b      	ldr	r3, [r7, #4]
     584:	699b      	ldr	r3, [r3, #24]
     586:	f043 0280 	orr.w	r2, r3, #128	; 0x80
     58a:	687b      	ldr	r3, [r7, #4]
     58c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     58e:	bf00      	nop
     590:	370c      	adds	r7, #12
     592:	46bd      	mov	sp, r7
     594:	f85d 7b04 	ldr.w	r7, [sp], #4
     598:	4770      	bx	lr

0000059a <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
     59a:	b480      	push	{r7}
     59c:	b083      	sub	sp, #12
     59e:	af00      	add	r7, sp, #0
     5a0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     5a2:	687b      	ldr	r3, [r7, #4]
     5a4:	699b      	ldr	r3, [r3, #24]
     5a6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     5aa:	687b      	ldr	r3, [r7, #4]
     5ac:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     5ae:	bf00      	nop
     5b0:	370c      	adds	r7, #12
     5b2:	46bd      	mov	sp, r7
     5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
     5b8:	4770      	bx	lr

000005ba <hri_mclk_set_APBBMASK_TC3_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TC2;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC3_bit(const void *const hw)
{
     5ba:	b480      	push	{r7}
     5bc:	b083      	sub	sp, #12
     5be:	af00      	add	r7, sp, #0
     5c0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
     5c2:	687b      	ldr	r3, [r7, #4]
     5c4:	699b      	ldr	r3, [r3, #24]
     5c6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     5ca:	687b      	ldr	r3, [r7, #4]
     5cc:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     5ce:	bf00      	nop
     5d0:	370c      	adds	r7, #12
     5d2:	46bd      	mov	sp, r7
     5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
     5d8:	4770      	bx	lr

000005da <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
     5da:	b480      	push	{r7}
     5dc:	b083      	sub	sp, #12
     5de:	af00      	add	r7, sp, #0
     5e0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     5e2:	687b      	ldr	r3, [r7, #4]
     5e4:	69db      	ldr	r3, [r3, #28]
     5e6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     5ea:	687b      	ldr	r3, [r7, #4]
     5ec:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     5ee:	bf00      	nop
     5f0:	370c      	adds	r7, #12
     5f2:	46bd      	mov	sp, r7
     5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
     5f8:	4770      	bx	lr

000005fa <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
     5fa:	b480      	push	{r7}
     5fc:	b083      	sub	sp, #12
     5fe:	af00      	add	r7, sp, #0
     600:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     602:	687b      	ldr	r3, [r7, #4]
     604:	6a1b      	ldr	r3, [r3, #32]
     606:	f043 0201 	orr.w	r2, r3, #1
     60a:	687b      	ldr	r3, [r7, #4]
     60c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     60e:	bf00      	nop
     610:	370c      	adds	r7, #12
     612:	46bd      	mov	sp, r7
     614:	f85d 7b04 	ldr.w	r7, [sp], #4
     618:	4770      	bx	lr

0000061a <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
     61a:	b480      	push	{r7}
     61c:	b083      	sub	sp, #12
     61e:	af00      	add	r7, sp, #0
     620:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     622:	687b      	ldr	r3, [r7, #4]
     624:	6a1b      	ldr	r3, [r3, #32]
     626:	f043 0202 	orr.w	r2, r3, #2
     62a:	687b      	ldr	r3, [r7, #4]
     62c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     62e:	bf00      	nop
     630:	370c      	adds	r7, #12
     632:	46bd      	mov	sp, r7
     634:	f85d 7b04 	ldr.w	r7, [sp], #4
     638:	4770      	bx	lr

0000063a <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
     63a:	b480      	push	{r7}
     63c:	b083      	sub	sp, #12
     63e:	af00      	add	r7, sp, #0
     640:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     642:	687b      	ldr	r3, [r7, #4]
     644:	6a1b      	ldr	r3, [r3, #32]
     646:	f043 0204 	orr.w	r2, r3, #4
     64a:	687b      	ldr	r3, [r7, #4]
     64c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     64e:	bf00      	nop
     650:	370c      	adds	r7, #12
     652:	46bd      	mov	sp, r7
     654:	f85d 7b04 	ldr.w	r7, [sp], #4
     658:	4770      	bx	lr

0000065a <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
     65a:	b480      	push	{r7}
     65c:	b083      	sub	sp, #12
     65e:	af00      	add	r7, sp, #0
     660:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     662:	687b      	ldr	r3, [r7, #4]
     664:	6a1b      	ldr	r3, [r3, #32]
     666:	f043 0208 	orr.w	r2, r3, #8
     66a:	687b      	ldr	r3, [r7, #4]
     66c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     66e:	bf00      	nop
     670:	370c      	adds	r7, #12
     672:	46bd      	mov	sp, r7
     674:	f85d 7b04 	ldr.w	r7, [sp], #4
     678:	4770      	bx	lr

0000067a <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
     67a:	b480      	push	{r7}
     67c:	b083      	sub	sp, #12
     67e:	af00      	add	r7, sp, #0
     680:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
     682:	687b      	ldr	r3, [r7, #4]
     684:	6a1b      	ldr	r3, [r3, #32]
     686:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     68a:	687b      	ldr	r3, [r7, #4]
     68c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     68e:	bf00      	nop
     690:	370c      	adds	r7, #12
     692:	46bd      	mov	sp, r7
     694:	f85d 7b04 	ldr.w	r7, [sp], #4
     698:	4770      	bx	lr

0000069a <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     69a:	b480      	push	{r7}
     69c:	b085      	sub	sp, #20
     69e:	af00      	add	r7, sp, #0
     6a0:	60f8      	str	r0, [r7, #12]
     6a2:	460b      	mov	r3, r1
     6a4:	607a      	str	r2, [r7, #4]
     6a6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     6a8:	7afb      	ldrb	r3, [r7, #11]
     6aa:	68fa      	ldr	r2, [r7, #12]
     6ac:	01db      	lsls	r3, r3, #7
     6ae:	4413      	add	r3, r2
     6b0:	3308      	adds	r3, #8
     6b2:	687a      	ldr	r2, [r7, #4]
     6b4:	601a      	str	r2, [r3, #0]
}
     6b6:	bf00      	nop
     6b8:	3714      	adds	r7, #20
     6ba:	46bd      	mov	sp, r7
     6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
     6c0:	4770      	bx	lr

000006c2 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     6c2:	b480      	push	{r7}
     6c4:	b085      	sub	sp, #20
     6c6:	af00      	add	r7, sp, #0
     6c8:	60f8      	str	r0, [r7, #12]
     6ca:	460b      	mov	r3, r1
     6cc:	607a      	str	r2, [r7, #4]
     6ce:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     6d0:	7afb      	ldrb	r3, [r7, #11]
     6d2:	68fa      	ldr	r2, [r7, #12]
     6d4:	01db      	lsls	r3, r3, #7
     6d6:	4413      	add	r3, r2
     6d8:	3304      	adds	r3, #4
     6da:	687a      	ldr	r2, [r7, #4]
     6dc:	601a      	str	r2, [r3, #0]
}
     6de:	bf00      	nop
     6e0:	3714      	adds	r7, #20
     6e2:	46bd      	mov	sp, r7
     6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
     6e8:	4770      	bx	lr

000006ea <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     6ea:	b480      	push	{r7}
     6ec:	b085      	sub	sp, #20
     6ee:	af00      	add	r7, sp, #0
     6f0:	60f8      	str	r0, [r7, #12]
     6f2:	460b      	mov	r3, r1
     6f4:	607a      	str	r2, [r7, #4]
     6f6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     6f8:	7afb      	ldrb	r3, [r7, #11]
     6fa:	68fa      	ldr	r2, [r7, #12]
     6fc:	01db      	lsls	r3, r3, #7
     6fe:	4413      	add	r3, r2
     700:	3318      	adds	r3, #24
     702:	687a      	ldr	r2, [r7, #4]
     704:	601a      	str	r2, [r3, #0]
}
     706:	bf00      	nop
     708:	3714      	adds	r7, #20
     70a:	46bd      	mov	sp, r7
     70c:	f85d 7b04 	ldr.w	r7, [sp], #4
     710:	4770      	bx	lr

00000712 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     712:	b480      	push	{r7}
     714:	b085      	sub	sp, #20
     716:	af00      	add	r7, sp, #0
     718:	60f8      	str	r0, [r7, #12]
     71a:	460b      	mov	r3, r1
     71c:	607a      	str	r2, [r7, #4]
     71e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     720:	7afb      	ldrb	r3, [r7, #11]
     722:	68fa      	ldr	r2, [r7, #12]
     724:	01db      	lsls	r3, r3, #7
     726:	4413      	add	r3, r2
     728:	3314      	adds	r3, #20
     72a:	687a      	ldr	r2, [r7, #4]
     72c:	601a      	str	r2, [r3, #0]
}
     72e:	bf00      	nop
     730:	3714      	adds	r7, #20
     732:	46bd      	mov	sp, r7
     734:	f85d 7b04 	ldr.w	r7, [sp], #4
     738:	4770      	bx	lr

0000073a <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     73a:	b480      	push	{r7}
     73c:	b085      	sub	sp, #20
     73e:	af00      	add	r7, sp, #0
     740:	6078      	str	r0, [r7, #4]
     742:	4608      	mov	r0, r1
     744:	4611      	mov	r1, r2
     746:	461a      	mov	r2, r3
     748:	4603      	mov	r3, r0
     74a:	70fb      	strb	r3, [r7, #3]
     74c:	460b      	mov	r3, r1
     74e:	70bb      	strb	r3, [r7, #2]
     750:	4613      	mov	r3, r2
     752:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     754:	78fa      	ldrb	r2, [r7, #3]
     756:	78bb      	ldrb	r3, [r7, #2]
     758:	6879      	ldr	r1, [r7, #4]
     75a:	01d2      	lsls	r2, r2, #7
     75c:	440a      	add	r2, r1
     75e:	4413      	add	r3, r2
     760:	3330      	adds	r3, #48	; 0x30
     762:	781b      	ldrb	r3, [r3, #0]
     764:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     766:	7bfb      	ldrb	r3, [r7, #15]
     768:	f023 030f 	bic.w	r3, r3, #15
     76c:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
     76e:	787b      	ldrb	r3, [r7, #1]
     770:	f003 030f 	and.w	r3, r3, #15
     774:	b2da      	uxtb	r2, r3
     776:	7bfb      	ldrb	r3, [r7, #15]
     778:	4313      	orrs	r3, r2
     77a:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     77c:	78fa      	ldrb	r2, [r7, #3]
     77e:	78bb      	ldrb	r3, [r7, #2]
     780:	6879      	ldr	r1, [r7, #4]
     782:	01d2      	lsls	r2, r2, #7
     784:	440a      	add	r2, r1
     786:	4413      	add	r3, r2
     788:	3330      	adds	r3, #48	; 0x30
     78a:	7bfa      	ldrb	r2, [r7, #15]
     78c:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     78e:	bf00      	nop
     790:	3714      	adds	r7, #20
     792:	46bd      	mov	sp, r7
     794:	f85d 7b04 	ldr.w	r7, [sp], #4
     798:	4770      	bx	lr

0000079a <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     79a:	b480      	push	{r7}
     79c:	b085      	sub	sp, #20
     79e:	af00      	add	r7, sp, #0
     7a0:	6078      	str	r0, [r7, #4]
     7a2:	4608      	mov	r0, r1
     7a4:	4611      	mov	r1, r2
     7a6:	461a      	mov	r2, r3
     7a8:	4603      	mov	r3, r0
     7aa:	70fb      	strb	r3, [r7, #3]
     7ac:	460b      	mov	r3, r1
     7ae:	70bb      	strb	r3, [r7, #2]
     7b0:	4613      	mov	r3, r2
     7b2:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7b4:	78fa      	ldrb	r2, [r7, #3]
     7b6:	78bb      	ldrb	r3, [r7, #2]
     7b8:	6879      	ldr	r1, [r7, #4]
     7ba:	01d2      	lsls	r2, r2, #7
     7bc:	440a      	add	r2, r1
     7be:	4413      	add	r3, r2
     7c0:	3330      	adds	r3, #48	; 0x30
     7c2:	781b      	ldrb	r3, [r3, #0]
     7c4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     7c6:	7bfb      	ldrb	r3, [r7, #15]
     7c8:	f003 030f 	and.w	r3, r3, #15
     7cc:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
     7ce:	787b      	ldrb	r3, [r7, #1]
     7d0:	011b      	lsls	r3, r3, #4
     7d2:	b2da      	uxtb	r2, r3
     7d4:	7bfb      	ldrb	r3, [r7, #15]
     7d6:	4313      	orrs	r3, r2
     7d8:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7da:	78fa      	ldrb	r2, [r7, #3]
     7dc:	78bb      	ldrb	r3, [r7, #2]
     7de:	6879      	ldr	r1, [r7, #4]
     7e0:	01d2      	lsls	r2, r2, #7
     7e2:	440a      	add	r2, r1
     7e4:	4413      	add	r3, r2
     7e6:	3330      	adds	r3, #48	; 0x30
     7e8:	7bfa      	ldrb	r2, [r7, #15]
     7ea:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     7ec:	bf00      	nop
     7ee:	3714      	adds	r7, #20
     7f0:	46bd      	mov	sp, r7
     7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
     7f6:	4770      	bx	lr

000007f8 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     7f8:	b480      	push	{r7}
     7fa:	b085      	sub	sp, #20
     7fc:	af00      	add	r7, sp, #0
     7fe:	6078      	str	r0, [r7, #4]
     800:	4608      	mov	r0, r1
     802:	4611      	mov	r1, r2
     804:	461a      	mov	r2, r3
     806:	4603      	mov	r3, r0
     808:	70fb      	strb	r3, [r7, #3]
     80a:	460b      	mov	r3, r1
     80c:	70bb      	strb	r3, [r7, #2]
     80e:	4613      	mov	r3, r2
     810:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     812:	78fa      	ldrb	r2, [r7, #3]
     814:	78bb      	ldrb	r3, [r7, #2]
     816:	6879      	ldr	r1, [r7, #4]
     818:	01d2      	lsls	r2, r2, #7
     81a:	440a      	add	r2, r1
     81c:	4413      	add	r3, r2
     81e:	3340      	adds	r3, #64	; 0x40
     820:	781b      	ldrb	r3, [r3, #0]
     822:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
     824:	7bfb      	ldrb	r3, [r7, #15]
     826:	f023 0301 	bic.w	r3, r3, #1
     82a:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     82c:	787a      	ldrb	r2, [r7, #1]
     82e:	7bfb      	ldrb	r3, [r7, #15]
     830:	4313      	orrs	r3, r2
     832:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     834:	78fa      	ldrb	r2, [r7, #3]
     836:	78bb      	ldrb	r3, [r7, #2]
     838:	6879      	ldr	r1, [r7, #4]
     83a:	01d2      	lsls	r2, r2, #7
     83c:	440a      	add	r2, r1
     83e:	4413      	add	r3, r2
     840:	3340      	adds	r3, #64	; 0x40
     842:	7bfa      	ldrb	r2, [r7, #15]
     844:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     846:	bf00      	nop
     848:	3714      	adds	r7, #20
     84a:	46bd      	mov	sp, r7
     84c:	f85d 7b04 	ldr.w	r7, [sp], #4
     850:	4770      	bx	lr

00000852 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     852:	b490      	push	{r4, r7}
     854:	b082      	sub	sp, #8
     856:	af00      	add	r7, sp, #0
     858:	6078      	str	r0, [r7, #4]
     85a:	460b      	mov	r3, r1
     85c:	70fb      	strb	r3, [r7, #3]
     85e:	4613      	mov	r3, r2
     860:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     862:	78fa      	ldrb	r2, [r7, #3]
     864:	78bb      	ldrb	r3, [r7, #2]
     866:	78f8      	ldrb	r0, [r7, #3]
     868:	78b9      	ldrb	r1, [r7, #2]
     86a:	687c      	ldr	r4, [r7, #4]
     86c:	01c0      	lsls	r0, r0, #7
     86e:	4420      	add	r0, r4
     870:	4401      	add	r1, r0
     872:	3140      	adds	r1, #64	; 0x40
     874:	7809      	ldrb	r1, [r1, #0]
     876:	b2c9      	uxtb	r1, r1
     878:	f041 0104 	orr.w	r1, r1, #4
     87c:	b2c8      	uxtb	r0, r1
     87e:	6879      	ldr	r1, [r7, #4]
     880:	01d2      	lsls	r2, r2, #7
     882:	440a      	add	r2, r1
     884:	4413      	add	r3, r2
     886:	3340      	adds	r3, #64	; 0x40
     888:	4602      	mov	r2, r0
     88a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     88c:	bf00      	nop
     88e:	3708      	adds	r7, #8
     890:	46bd      	mov	sp, r7
     892:	bc90      	pop	{r4, r7}
     894:	4770      	bx	lr

00000896 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     896:	b490      	push	{r4, r7}
     898:	b082      	sub	sp, #8
     89a:	af00      	add	r7, sp, #0
     89c:	6078      	str	r0, [r7, #4]
     89e:	460b      	mov	r3, r1
     8a0:	70fb      	strb	r3, [r7, #3]
     8a2:	4613      	mov	r3, r2
     8a4:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     8a6:	78fa      	ldrb	r2, [r7, #3]
     8a8:	78bb      	ldrb	r3, [r7, #2]
     8aa:	78f8      	ldrb	r0, [r7, #3]
     8ac:	78b9      	ldrb	r1, [r7, #2]
     8ae:	687c      	ldr	r4, [r7, #4]
     8b0:	01c0      	lsls	r0, r0, #7
     8b2:	4420      	add	r0, r4
     8b4:	4401      	add	r1, r0
     8b6:	3140      	adds	r1, #64	; 0x40
     8b8:	7809      	ldrb	r1, [r1, #0]
     8ba:	b2c9      	uxtb	r1, r1
     8bc:	f021 0104 	bic.w	r1, r1, #4
     8c0:	b2c8      	uxtb	r0, r1
     8c2:	6879      	ldr	r1, [r7, #4]
     8c4:	01d2      	lsls	r2, r2, #7
     8c6:	440a      	add	r2, r1
     8c8:	4413      	add	r3, r2
     8ca:	3340      	adds	r3, #64	; 0x40
     8cc:	4602      	mov	r2, r0
     8ce:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     8d0:	bf00      	nop
     8d2:	3708      	adds	r7, #8
     8d4:	46bd      	mov	sp, r7
     8d6:	bc90      	pop	{r4, r7}
     8d8:	4770      	bx	lr

000008da <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
     8da:	b480      	push	{r7}
     8dc:	b085      	sub	sp, #20
     8de:	af00      	add	r7, sp, #0
     8e0:	60f8      	str	r0, [r7, #12]
     8e2:	460b      	mov	r3, r1
     8e4:	607a      	str	r2, [r7, #4]
     8e6:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     8e8:	7afb      	ldrb	r3, [r7, #11]
     8ea:	68fa      	ldr	r2, [r7, #12]
     8ec:	01db      	lsls	r3, r3, #7
     8ee:	4413      	add	r3, r2
     8f0:	3328      	adds	r3, #40	; 0x28
     8f2:	687a      	ldr	r2, [r7, #4]
     8f4:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     8f6:	bf00      	nop
     8f8:	3714      	adds	r7, #20
     8fa:	46bd      	mov	sp, r7
     8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     900:	4770      	bx	lr
	...

00000904 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
     904:	b580      	push	{r7, lr}
     906:	b082      	sub	sp, #8
     908:	af00      	add	r7, sp, #0
     90a:	4603      	mov	r3, r0
     90c:	6039      	str	r1, [r7, #0]
     90e:	71fb      	strb	r3, [r7, #7]
     910:	4613      	mov	r3, r2
     912:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
     914:	79bb      	ldrb	r3, [r7, #6]
     916:	2b01      	cmp	r3, #1
     918:	d01c      	beq.n	954 <_gpio_set_direction+0x50>
     91a:	2b02      	cmp	r3, #2
     91c:	d037      	beq.n	98e <_gpio_set_direction+0x8a>
     91e:	2b00      	cmp	r3, #0
     920:	d14e      	bne.n	9c0 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
     922:	79fb      	ldrb	r3, [r7, #7]
     924:	683a      	ldr	r2, [r7, #0]
     926:	4619      	mov	r1, r3
     928:	482a      	ldr	r0, [pc, #168]	; (9d4 <_gpio_set_direction+0xd0>)
     92a:	4b2b      	ldr	r3, [pc, #172]	; (9d8 <_gpio_set_direction+0xd4>)
     92c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     92e:	683b      	ldr	r3, [r7, #0]
     930:	b29b      	uxth	r3, r3
     932:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     936:	79fb      	ldrb	r3, [r7, #7]
     938:	4619      	mov	r1, r3
     93a:	4826      	ldr	r0, [pc, #152]	; (9d4 <_gpio_set_direction+0xd0>)
     93c:	4b27      	ldr	r3, [pc, #156]	; (9dc <_gpio_set_direction+0xd8>)
     93e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     940:	683b      	ldr	r3, [r7, #0]
     942:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     944:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     948:	79fb      	ldrb	r3, [r7, #7]
     94a:	4619      	mov	r1, r3
     94c:	4821      	ldr	r0, [pc, #132]	; (9d4 <_gpio_set_direction+0xd0>)
     94e:	4b23      	ldr	r3, [pc, #140]	; (9dc <_gpio_set_direction+0xd8>)
     950:	4798      	blx	r3
		break;
     952:	e03a      	b.n	9ca <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
     954:	79fb      	ldrb	r3, [r7, #7]
     956:	683a      	ldr	r2, [r7, #0]
     958:	4619      	mov	r1, r3
     95a:	481e      	ldr	r0, [pc, #120]	; (9d4 <_gpio_set_direction+0xd0>)
     95c:	4b1e      	ldr	r3, [pc, #120]	; (9d8 <_gpio_set_direction+0xd4>)
     95e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     960:	683b      	ldr	r3, [r7, #0]
     962:	b29b      	uxth	r3, r3
     964:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
     968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     96c:	79f9      	ldrb	r1, [r7, #7]
     96e:	461a      	mov	r2, r3
     970:	4818      	ldr	r0, [pc, #96]	; (9d4 <_gpio_set_direction+0xd0>)
     972:	4b1a      	ldr	r3, [pc, #104]	; (9dc <_gpio_set_direction+0xd8>)
     974:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
     976:	683b      	ldr	r3, [r7, #0]
     978:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
     97a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
     97e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     982:	79f9      	ldrb	r1, [r7, #7]
     984:	461a      	mov	r2, r3
     986:	4813      	ldr	r0, [pc, #76]	; (9d4 <_gpio_set_direction+0xd0>)
     988:	4b14      	ldr	r3, [pc, #80]	; (9dc <_gpio_set_direction+0xd8>)
     98a:	4798      	blx	r3
		break;
     98c:	e01d      	b.n	9ca <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
     98e:	79fb      	ldrb	r3, [r7, #7]
     990:	683a      	ldr	r2, [r7, #0]
     992:	4619      	mov	r1, r3
     994:	480f      	ldr	r0, [pc, #60]	; (9d4 <_gpio_set_direction+0xd0>)
     996:	4b12      	ldr	r3, [pc, #72]	; (9e0 <_gpio_set_direction+0xdc>)
     998:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     99a:	683b      	ldr	r3, [r7, #0]
     99c:	b29b      	uxth	r3, r3
     99e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     9a2:	79fb      	ldrb	r3, [r7, #7]
     9a4:	4619      	mov	r1, r3
     9a6:	480b      	ldr	r0, [pc, #44]	; (9d4 <_gpio_set_direction+0xd0>)
     9a8:	4b0c      	ldr	r3, [pc, #48]	; (9dc <_gpio_set_direction+0xd8>)
     9aa:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     9ac:	683b      	ldr	r3, [r7, #0]
     9ae:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     9b0:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     9b4:	79fb      	ldrb	r3, [r7, #7]
     9b6:	4619      	mov	r1, r3
     9b8:	4806      	ldr	r0, [pc, #24]	; (9d4 <_gpio_set_direction+0xd0>)
     9ba:	4b08      	ldr	r3, [pc, #32]	; (9dc <_gpio_set_direction+0xd8>)
     9bc:	4798      	blx	r3
		break;
     9be:	e004      	b.n	9ca <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
     9c0:	2246      	movs	r2, #70	; 0x46
     9c2:	4908      	ldr	r1, [pc, #32]	; (9e4 <_gpio_set_direction+0xe0>)
     9c4:	2000      	movs	r0, #0
     9c6:	4b08      	ldr	r3, [pc, #32]	; (9e8 <_gpio_set_direction+0xe4>)
     9c8:	4798      	blx	r3
	}
}
     9ca:	bf00      	nop
     9cc:	3708      	adds	r7, #8
     9ce:	46bd      	mov	sp, r7
     9d0:	bd80      	pop	{r7, pc}
     9d2:	bf00      	nop
     9d4:	41008000 	.word	0x41008000
     9d8:	000006c3 	.word	0x000006c3
     9dc:	000008db 	.word	0x000008db
     9e0:	0000069b 	.word	0x0000069b
     9e4:	00012eb4 	.word	0x00012eb4
     9e8:	00002f09 	.word	0x00002f09

000009ec <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     9ec:	b580      	push	{r7, lr}
     9ee:	b082      	sub	sp, #8
     9f0:	af00      	add	r7, sp, #0
     9f2:	4603      	mov	r3, r0
     9f4:	6039      	str	r1, [r7, #0]
     9f6:	71fb      	strb	r3, [r7, #7]
     9f8:	4613      	mov	r3, r2
     9fa:	71bb      	strb	r3, [r7, #6]
	if (level) {
     9fc:	79bb      	ldrb	r3, [r7, #6]
     9fe:	2b00      	cmp	r3, #0
     a00:	d006      	beq.n	a10 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
     a02:	79fb      	ldrb	r3, [r7, #7]
     a04:	683a      	ldr	r2, [r7, #0]
     a06:	4619      	mov	r1, r3
     a08:	4806      	ldr	r0, [pc, #24]	; (a24 <_gpio_set_level+0x38>)
     a0a:	4b07      	ldr	r3, [pc, #28]	; (a28 <_gpio_set_level+0x3c>)
     a0c:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
     a0e:	e005      	b.n	a1c <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
     a10:	79fb      	ldrb	r3, [r7, #7]
     a12:	683a      	ldr	r2, [r7, #0]
     a14:	4619      	mov	r1, r3
     a16:	4803      	ldr	r0, [pc, #12]	; (a24 <_gpio_set_level+0x38>)
     a18:	4b04      	ldr	r3, [pc, #16]	; (a2c <_gpio_set_level+0x40>)
     a1a:	4798      	blx	r3
}
     a1c:	bf00      	nop
     a1e:	3708      	adds	r7, #8
     a20:	46bd      	mov	sp, r7
     a22:	bd80      	pop	{r7, pc}
     a24:	41008000 	.word	0x41008000
     a28:	000006eb 	.word	0x000006eb
     a2c:	00000713 	.word	0x00000713

00000a30 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
     a30:	b580      	push	{r7, lr}
     a32:	b082      	sub	sp, #8
     a34:	af00      	add	r7, sp, #0
     a36:	4603      	mov	r3, r0
     a38:	71fb      	strb	r3, [r7, #7]
     a3a:	460b      	mov	r3, r1
     a3c:	71bb      	strb	r3, [r7, #6]
     a3e:	4613      	mov	r3, r2
     a40:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
     a42:	797b      	ldrb	r3, [r7, #5]
     a44:	2b01      	cmp	r3, #1
     a46:	d00a      	beq.n	a5e <_gpio_set_pin_pull_mode+0x2e>
     a48:	2b02      	cmp	r3, #2
     a4a:	d01f      	beq.n	a8c <_gpio_set_pin_pull_mode+0x5c>
     a4c:	2b00      	cmp	r3, #0
     a4e:	d134      	bne.n	aba <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
     a50:	79ba      	ldrb	r2, [r7, #6]
     a52:	79fb      	ldrb	r3, [r7, #7]
     a54:	4619      	mov	r1, r3
     a56:	481e      	ldr	r0, [pc, #120]	; (ad0 <_gpio_set_pin_pull_mode+0xa0>)
     a58:	4b1e      	ldr	r3, [pc, #120]	; (ad4 <_gpio_set_pin_pull_mode+0xa4>)
     a5a:	4798      	blx	r3
		break;
     a5c:	e033      	b.n	ac6 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     a5e:	79bb      	ldrb	r3, [r7, #6]
     a60:	2201      	movs	r2, #1
     a62:	409a      	lsls	r2, r3
     a64:	79fb      	ldrb	r3, [r7, #7]
     a66:	4619      	mov	r1, r3
     a68:	4819      	ldr	r0, [pc, #100]	; (ad0 <_gpio_set_pin_pull_mode+0xa0>)
     a6a:	4b1b      	ldr	r3, [pc, #108]	; (ad8 <_gpio_set_pin_pull_mode+0xa8>)
     a6c:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     a6e:	79ba      	ldrb	r2, [r7, #6]
     a70:	79fb      	ldrb	r3, [r7, #7]
     a72:	4619      	mov	r1, r3
     a74:	4816      	ldr	r0, [pc, #88]	; (ad0 <_gpio_set_pin_pull_mode+0xa0>)
     a76:	4b19      	ldr	r3, [pc, #100]	; (adc <_gpio_set_pin_pull_mode+0xac>)
     a78:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
     a7a:	79bb      	ldrb	r3, [r7, #6]
     a7c:	2201      	movs	r2, #1
     a7e:	409a      	lsls	r2, r3
     a80:	79fb      	ldrb	r3, [r7, #7]
     a82:	4619      	mov	r1, r3
     a84:	4812      	ldr	r0, [pc, #72]	; (ad0 <_gpio_set_pin_pull_mode+0xa0>)
     a86:	4b16      	ldr	r3, [pc, #88]	; (ae0 <_gpio_set_pin_pull_mode+0xb0>)
     a88:	4798      	blx	r3
		break;
     a8a:	e01c      	b.n	ac6 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     a8c:	79bb      	ldrb	r3, [r7, #6]
     a8e:	2201      	movs	r2, #1
     a90:	409a      	lsls	r2, r3
     a92:	79fb      	ldrb	r3, [r7, #7]
     a94:	4619      	mov	r1, r3
     a96:	480e      	ldr	r0, [pc, #56]	; (ad0 <_gpio_set_pin_pull_mode+0xa0>)
     a98:	4b0f      	ldr	r3, [pc, #60]	; (ad8 <_gpio_set_pin_pull_mode+0xa8>)
     a9a:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     a9c:	79ba      	ldrb	r2, [r7, #6]
     a9e:	79fb      	ldrb	r3, [r7, #7]
     aa0:	4619      	mov	r1, r3
     aa2:	480b      	ldr	r0, [pc, #44]	; (ad0 <_gpio_set_pin_pull_mode+0xa0>)
     aa4:	4b0d      	ldr	r3, [pc, #52]	; (adc <_gpio_set_pin_pull_mode+0xac>)
     aa6:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
     aa8:	79bb      	ldrb	r3, [r7, #6]
     aaa:	2201      	movs	r2, #1
     aac:	409a      	lsls	r2, r3
     aae:	79fb      	ldrb	r3, [r7, #7]
     ab0:	4619      	mov	r1, r3
     ab2:	4807      	ldr	r0, [pc, #28]	; (ad0 <_gpio_set_pin_pull_mode+0xa0>)
     ab4:	4b0b      	ldr	r3, [pc, #44]	; (ae4 <_gpio_set_pin_pull_mode+0xb4>)
     ab6:	4798      	blx	r3
		break;
     ab8:	e005      	b.n	ac6 <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
     aba:	2289      	movs	r2, #137	; 0x89
     abc:	490a      	ldr	r1, [pc, #40]	; (ae8 <_gpio_set_pin_pull_mode+0xb8>)
     abe:	2000      	movs	r0, #0
     ac0:	4b0a      	ldr	r3, [pc, #40]	; (aec <_gpio_set_pin_pull_mode+0xbc>)
     ac2:	4798      	blx	r3
		break;
     ac4:	bf00      	nop
	}
}
     ac6:	bf00      	nop
     ac8:	3708      	adds	r7, #8
     aca:	46bd      	mov	sp, r7
     acc:	bd80      	pop	{r7, pc}
     ace:	bf00      	nop
     ad0:	41008000 	.word	0x41008000
     ad4:	00000897 	.word	0x00000897
     ad8:	000006c3 	.word	0x000006c3
     adc:	00000853 	.word	0x00000853
     ae0:	000006eb 	.word	0x000006eb
     ae4:	00000713 	.word	0x00000713
     ae8:	00012eb4 	.word	0x00012eb4
     aec:	00002f09 	.word	0x00002f09

00000af0 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
     af0:	b590      	push	{r4, r7, lr}
     af2:	b085      	sub	sp, #20
     af4:	af00      	add	r7, sp, #0
     af6:	6078      	str	r0, [r7, #4]
     af8:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
     afa:	687b      	ldr	r3, [r7, #4]
     afc:	095b      	lsrs	r3, r3, #5
     afe:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
     b00:	687b      	ldr	r3, [r7, #4]
     b02:	b2db      	uxtb	r3, r3
     b04:	f003 031f 	and.w	r3, r3, #31
     b08:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
     b0a:	683b      	ldr	r3, [r7, #0]
     b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
     b10:	d106      	bne.n	b20 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
     b12:	7bba      	ldrb	r2, [r7, #14]
     b14:	7bf9      	ldrb	r1, [r7, #15]
     b16:	2300      	movs	r3, #0
     b18:	4812      	ldr	r0, [pc, #72]	; (b64 <_gpio_set_pin_function+0x74>)
     b1a:	4c13      	ldr	r4, [pc, #76]	; (b68 <_gpio_set_pin_function+0x78>)
     b1c:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
     b1e:	e01d      	b.n	b5c <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
     b20:	7bba      	ldrb	r2, [r7, #14]
     b22:	7bf9      	ldrb	r1, [r7, #15]
     b24:	2301      	movs	r3, #1
     b26:	480f      	ldr	r0, [pc, #60]	; (b64 <_gpio_set_pin_function+0x74>)
     b28:	4c0f      	ldr	r4, [pc, #60]	; (b68 <_gpio_set_pin_function+0x78>)
     b2a:	47a0      	blx	r4
		if (pin & 1) {
     b2c:	7bbb      	ldrb	r3, [r7, #14]
     b2e:	f003 0301 	and.w	r3, r3, #1
     b32:	2b00      	cmp	r3, #0
     b34:	d009      	beq.n	b4a <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
     b36:	7bbb      	ldrb	r3, [r7, #14]
     b38:	085b      	lsrs	r3, r3, #1
     b3a:	b2da      	uxtb	r2, r3
     b3c:	683b      	ldr	r3, [r7, #0]
     b3e:	b2db      	uxtb	r3, r3
     b40:	7bf9      	ldrb	r1, [r7, #15]
     b42:	4808      	ldr	r0, [pc, #32]	; (b64 <_gpio_set_pin_function+0x74>)
     b44:	4c09      	ldr	r4, [pc, #36]	; (b6c <_gpio_set_pin_function+0x7c>)
     b46:	47a0      	blx	r4
}
     b48:	e008      	b.n	b5c <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
     b4a:	7bbb      	ldrb	r3, [r7, #14]
     b4c:	085b      	lsrs	r3, r3, #1
     b4e:	b2da      	uxtb	r2, r3
     b50:	683b      	ldr	r3, [r7, #0]
     b52:	b2db      	uxtb	r3, r3
     b54:	7bf9      	ldrb	r1, [r7, #15]
     b56:	4803      	ldr	r0, [pc, #12]	; (b64 <_gpio_set_pin_function+0x74>)
     b58:	4c05      	ldr	r4, [pc, #20]	; (b70 <_gpio_set_pin_function+0x80>)
     b5a:	47a0      	blx	r4
}
     b5c:	bf00      	nop
     b5e:	3714      	adds	r7, #20
     b60:	46bd      	mov	sp, r7
     b62:	bd90      	pop	{r4, r7, pc}
     b64:	41008000 	.word	0x41008000
     b68:	000007f9 	.word	0x000007f9
     b6c:	0000079b 	.word	0x0000079b
     b70:	0000073b 	.word	0x0000073b

00000b74 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
     b74:	b580      	push	{r7, lr}
     b76:	b082      	sub	sp, #8
     b78:	af00      	add	r7, sp, #0
     b7a:	4603      	mov	r3, r0
     b7c:	460a      	mov	r2, r1
     b7e:	71fb      	strb	r3, [r7, #7]
     b80:	4613      	mov	r3, r2
     b82:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     b84:	79fb      	ldrb	r3, [r7, #7]
     b86:	095b      	lsrs	r3, r3, #5
     b88:	b2d8      	uxtb	r0, r3
     b8a:	79fb      	ldrb	r3, [r7, #7]
     b8c:	f003 031f 	and.w	r3, r3, #31
     b90:	b2db      	uxtb	r3, r3
     b92:	79ba      	ldrb	r2, [r7, #6]
     b94:	4619      	mov	r1, r3
     b96:	4b03      	ldr	r3, [pc, #12]	; (ba4 <gpio_set_pin_pull_mode+0x30>)
     b98:	4798      	blx	r3
}
     b9a:	bf00      	nop
     b9c:	3708      	adds	r7, #8
     b9e:	46bd      	mov	sp, r7
     ba0:	bd80      	pop	{r7, pc}
     ba2:	bf00      	nop
     ba4:	00000a31 	.word	0x00000a31

00000ba8 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
     ba8:	b580      	push	{r7, lr}
     baa:	b082      	sub	sp, #8
     bac:	af00      	add	r7, sp, #0
     bae:	6078      	str	r0, [r7, #4]
     bb0:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
     bb2:	6839      	ldr	r1, [r7, #0]
     bb4:	6878      	ldr	r0, [r7, #4]
     bb6:	4b03      	ldr	r3, [pc, #12]	; (bc4 <gpio_set_pin_function+0x1c>)
     bb8:	4798      	blx	r3
}
     bba:	bf00      	nop
     bbc:	3708      	adds	r7, #8
     bbe:	46bd      	mov	sp, r7
     bc0:	bd80      	pop	{r7, pc}
     bc2:	bf00      	nop
     bc4:	00000af1 	.word	0x00000af1

00000bc8 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
     bc8:	b580      	push	{r7, lr}
     bca:	b082      	sub	sp, #8
     bcc:	af00      	add	r7, sp, #0
     bce:	4603      	mov	r3, r0
     bd0:	460a      	mov	r2, r1
     bd2:	71fb      	strb	r3, [r7, #7]
     bd4:	4613      	mov	r3, r2
     bd6:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
     bd8:	79fb      	ldrb	r3, [r7, #7]
     bda:	095b      	lsrs	r3, r3, #5
     bdc:	b2d8      	uxtb	r0, r3
     bde:	79fb      	ldrb	r3, [r7, #7]
     be0:	f003 031f 	and.w	r3, r3, #31
     be4:	2201      	movs	r2, #1
     be6:	fa02 f303 	lsl.w	r3, r2, r3
     bea:	79ba      	ldrb	r2, [r7, #6]
     bec:	4619      	mov	r1, r3
     bee:	4b03      	ldr	r3, [pc, #12]	; (bfc <gpio_set_pin_direction+0x34>)
     bf0:	4798      	blx	r3
}
     bf2:	bf00      	nop
     bf4:	3708      	adds	r7, #8
     bf6:	46bd      	mov	sp, r7
     bf8:	bd80      	pop	{r7, pc}
     bfa:	bf00      	nop
     bfc:	00000905 	.word	0x00000905

00000c00 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     c00:	b580      	push	{r7, lr}
     c02:	b082      	sub	sp, #8
     c04:	af00      	add	r7, sp, #0
     c06:	4603      	mov	r3, r0
     c08:	460a      	mov	r2, r1
     c0a:	71fb      	strb	r3, [r7, #7]
     c0c:	4613      	mov	r3, r2
     c0e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     c10:	79fb      	ldrb	r3, [r7, #7]
     c12:	095b      	lsrs	r3, r3, #5
     c14:	b2d8      	uxtb	r0, r3
     c16:	79fb      	ldrb	r3, [r7, #7]
     c18:	f003 031f 	and.w	r3, r3, #31
     c1c:	2201      	movs	r2, #1
     c1e:	fa02 f303 	lsl.w	r3, r2, r3
     c22:	79ba      	ldrb	r2, [r7, #6]
     c24:	4619      	mov	r1, r3
     c26:	4b03      	ldr	r3, [pc, #12]	; (c34 <gpio_set_pin_level+0x34>)
     c28:	4798      	blx	r3
}
     c2a:	bf00      	nop
     c2c:	3708      	adds	r7, #8
     c2e:	46bd      	mov	sp, r7
     c30:	bd80      	pop	{r7, pc}
     c32:	bf00      	nop
     c34:	000009ed 	.word	0x000009ed

00000c38 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
     c38:	b580      	push	{r7, lr}
     c3a:	af00      	add	r7, sp, #0
	_init_chip();
     c3c:	4b01      	ldr	r3, [pc, #4]	; (c44 <init_mcu+0xc>)
     c3e:	4798      	blx	r3
}
     c40:	bf00      	nop
     c42:	bd80      	pop	{r7, pc}
     c44:	000040b9 	.word	0x000040b9

00000c48 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
     c48:	b580      	push	{r7, lr}
     c4a:	b082      	sub	sp, #8
     c4c:	af00      	add	r7, sp, #0
     c4e:	6078      	str	r0, [r7, #4]
     c50:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
     c52:	687b      	ldr	r3, [r7, #4]
     c54:	2b00      	cmp	r3, #0
     c56:	d004      	beq.n	c62 <wdt_init+0x1a>
     c58:	683b      	ldr	r3, [r7, #0]
     c5a:	2b00      	cmp	r3, #0
     c5c:	d001      	beq.n	c62 <wdt_init+0x1a>
     c5e:	2301      	movs	r3, #1
     c60:	e000      	b.n	c64 <wdt_init+0x1c>
     c62:	2300      	movs	r3, #0
     c64:	f003 0301 	and.w	r3, r3, #1
     c68:	b2db      	uxtb	r3, r3
     c6a:	2248      	movs	r2, #72	; 0x48
     c6c:	4907      	ldr	r1, [pc, #28]	; (c8c <wdt_init+0x44>)
     c6e:	4618      	mov	r0, r3
     c70:	4b07      	ldr	r3, [pc, #28]	; (c90 <wdt_init+0x48>)
     c72:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     c74:	687b      	ldr	r3, [r7, #4]
     c76:	683a      	ldr	r2, [r7, #0]
     c78:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
     c7a:	687b      	ldr	r3, [r7, #4]
     c7c:	4618      	mov	r0, r3
     c7e:	4b05      	ldr	r3, [pc, #20]	; (c94 <wdt_init+0x4c>)
     c80:	4798      	blx	r3
     c82:	4603      	mov	r3, r0
}
     c84:	4618      	mov	r0, r3
     c86:	3708      	adds	r7, #8
     c88:	46bd      	mov	sp, r7
     c8a:	bd80      	pop	{r7, pc}
     c8c:	00012ed0 	.word	0x00012ed0
     c90:	00002f09 	.word	0x00002f09
     c94:	0000a3e9 	.word	0x0000a3e9

00000c98 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
     c98:	b580      	push	{r7, lr}
     c9a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
     c9c:	4804      	ldr	r0, [pc, #16]	; (cb0 <CRC_CALC_init+0x18>)
     c9e:	4b05      	ldr	r3, [pc, #20]	; (cb4 <CRC_CALC_init+0x1c>)
     ca0:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
     ca2:	4905      	ldr	r1, [pc, #20]	; (cb8 <CRC_CALC_init+0x20>)
     ca4:	4805      	ldr	r0, [pc, #20]	; (cbc <CRC_CALC_init+0x24>)
     ca6:	4b06      	ldr	r3, [pc, #24]	; (cc0 <CRC_CALC_init+0x28>)
     ca8:	4798      	blx	r3
}
     caa:	bf00      	nop
     cac:	bd80      	pop	{r7, pc}
     cae:	bf00      	nop
     cb0:	40000800 	.word	0x40000800
     cb4:	0000055b 	.word	0x0000055b
     cb8:	41002000 	.word	0x41002000
     cbc:	20001b04 	.word	0x20001b04
     cc0:	0000197d 	.word	0x0000197d

00000cc4 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
     cc4:	b580      	push	{r7, lr}
     cc6:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     cc8:	2244      	movs	r2, #68	; 0x44
     cca:	2104      	movs	r1, #4
     ccc:	481e      	ldr	r0, [pc, #120]	; (d48 <EXTERNAL_IRQ_0_init+0x84>)
     cce:	4b1f      	ldr	r3, [pc, #124]	; (d4c <EXTERNAL_IRQ_0_init+0x88>)
     cd0:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
     cd2:	481f      	ldr	r0, [pc, #124]	; (d50 <EXTERNAL_IRQ_0_init+0x8c>)
     cd4:	4b1f      	ldr	r3, [pc, #124]	; (d54 <EXTERNAL_IRQ_0_init+0x90>)
     cd6:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA04, GPIO_DIRECTION_IN);
     cd8:	2101      	movs	r1, #1
     cda:	2004      	movs	r0, #4
     cdc:	4b1e      	ldr	r3, [pc, #120]	; (d58 <EXTERNAL_IRQ_0_init+0x94>)
     cde:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA04,
     ce0:	2102      	movs	r1, #2
     ce2:	2004      	movs	r0, #4
     ce4:	4b1d      	ldr	r3, [pc, #116]	; (d5c <EXTERNAL_IRQ_0_init+0x98>)
     ce6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA04, PINMUX_PA04A_EIC_EXTINT4);
     ce8:	f44f 2180 	mov.w	r1, #262144	; 0x40000
     cec:	2004      	movs	r0, #4
     cee:	4b1c      	ldr	r3, [pc, #112]	; (d60 <EXTERNAL_IRQ_0_init+0x9c>)
     cf0:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA05, GPIO_DIRECTION_IN);
     cf2:	2101      	movs	r1, #1
     cf4:	2005      	movs	r0, #5
     cf6:	4b18      	ldr	r3, [pc, #96]	; (d58 <EXTERNAL_IRQ_0_init+0x94>)
     cf8:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA05,
     cfa:	2102      	movs	r1, #2
     cfc:	2005      	movs	r0, #5
     cfe:	4b17      	ldr	r3, [pc, #92]	; (d5c <EXTERNAL_IRQ_0_init+0x98>)
     d00:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA05, PINMUX_PA05A_EIC_EXTINT5);
     d02:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
     d06:	2005      	movs	r0, #5
     d08:	4b15      	ldr	r3, [pc, #84]	; (d60 <EXTERNAL_IRQ_0_init+0x9c>)
     d0a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(R2Int, GPIO_DIRECTION_IN);
     d0c:	2101      	movs	r1, #1
     d0e:	2056      	movs	r0, #86	; 0x56
     d10:	4b11      	ldr	r3, [pc, #68]	; (d58 <EXTERNAL_IRQ_0_init+0x94>)
     d12:	4798      	blx	r3

	gpio_set_pin_pull_mode(R2Int,
     d14:	2102      	movs	r1, #2
     d16:	2056      	movs	r0, #86	; 0x56
     d18:	4b10      	ldr	r3, [pc, #64]	; (d5c <EXTERNAL_IRQ_0_init+0x98>)
     d1a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(R2Int, PINMUX_PC22A_EIC_EXTINT6);
     d1c:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
     d20:	2056      	movs	r0, #86	; 0x56
     d22:	4b0f      	ldr	r3, [pc, #60]	; (d60 <EXTERNAL_IRQ_0_init+0x9c>)
     d24:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(R1Int, GPIO_DIRECTION_IN);
     d26:	2101      	movs	r1, #1
     d28:	2057      	movs	r0, #87	; 0x57
     d2a:	4b0b      	ldr	r3, [pc, #44]	; (d58 <EXTERNAL_IRQ_0_init+0x94>)
     d2c:	4798      	blx	r3

	gpio_set_pin_pull_mode(R1Int,
     d2e:	2102      	movs	r1, #2
     d30:	2057      	movs	r0, #87	; 0x57
     d32:	4b0a      	ldr	r3, [pc, #40]	; (d5c <EXTERNAL_IRQ_0_init+0x98>)
     d34:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(R1Int, PINMUX_PC23A_EIC_EXTINT7);
     d36:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
     d3a:	2057      	movs	r0, #87	; 0x57
     d3c:	4b08      	ldr	r3, [pc, #32]	; (d60 <EXTERNAL_IRQ_0_init+0x9c>)
     d3e:	4798      	blx	r3

	ext_irq_init();
     d40:	4b08      	ldr	r3, [pc, #32]	; (d64 <EXTERNAL_IRQ_0_init+0xa0>)
     d42:	4798      	blx	r3
}
     d44:	bf00      	nop
     d46:	bd80      	pop	{r7, pc}
     d48:	40001c00 	.word	0x40001c00
     d4c:	000003f5 	.word	0x000003f5
     d50:	40000800 	.word	0x40000800
     d54:	000004db 	.word	0x000004db
     d58:	00000bc9 	.word	0x00000bc9
     d5c:	00000b75 	.word	0x00000b75
     d60:	00000ba9 	.word	0x00000ba9
     d64:	00001a45 	.word	0x00001a45

00000d68 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
     d68:	b580      	push	{r7, lr}
     d6a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     d6c:	2244      	movs	r2, #68	; 0x44
     d6e:	210b      	movs	r1, #11
     d70:	4804      	ldr	r0, [pc, #16]	; (d84 <EVENT_SYSTEM_0_init+0x1c>)
     d72:	4b05      	ldr	r3, [pc, #20]	; (d88 <EVENT_SYSTEM_0_init+0x20>)
     d74:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
     d76:	4805      	ldr	r0, [pc, #20]	; (d8c <EVENT_SYSTEM_0_init+0x24>)
     d78:	4b05      	ldr	r3, [pc, #20]	; (d90 <EVENT_SYSTEM_0_init+0x28>)
     d7a:	4798      	blx	r3

	event_system_init();
     d7c:	4b05      	ldr	r3, [pc, #20]	; (d94 <EVENT_SYSTEM_0_init+0x2c>)
     d7e:	4798      	blx	r3
}
     d80:	bf00      	nop
     d82:	bd80      	pop	{r7, pc}
     d84:	40001c00 	.word	0x40001c00
     d88:	000003f5 	.word	0x000003f5
     d8c:	40000800 	.word	0x40000800
     d90:	0000057b 	.word	0x0000057b
     d94:	00001a31 	.word	0x00001a31

00000d98 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
     d98:	b580      	push	{r7, lr}
     d9a:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
     d9c:	2101      	movs	r1, #1
     d9e:	202b      	movs	r0, #43	; 0x2b
     da0:	4b2b      	ldr	r3, [pc, #172]	; (e50 <QSPI_N25Q256_PORT_init+0xb8>)
     da2:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
     da4:	2100      	movs	r1, #0
     da6:	202b      	movs	r0, #43	; 0x2b
     da8:	4b2a      	ldr	r3, [pc, #168]	; (e54 <QSPI_N25Q256_PORT_init+0xbc>)
     daa:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
     dac:	492a      	ldr	r1, [pc, #168]	; (e58 <QSPI_N25Q256_PORT_init+0xc0>)
     dae:	202b      	movs	r0, #43	; 0x2b
     db0:	4b2a      	ldr	r3, [pc, #168]	; (e5c <QSPI_N25Q256_PORT_init+0xc4>)
     db2:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
     db4:	2102      	movs	r1, #2
     db6:	2008      	movs	r0, #8
     db8:	4b25      	ldr	r3, [pc, #148]	; (e50 <QSPI_N25Q256_PORT_init+0xb8>)
     dba:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
     dbc:	2100      	movs	r1, #0
     dbe:	2008      	movs	r0, #8
     dc0:	4b27      	ldr	r3, [pc, #156]	; (e60 <QSPI_N25Q256_PORT_init+0xc8>)
     dc2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
     dc4:	2100      	movs	r1, #0
     dc6:	2008      	movs	r0, #8
     dc8:	4b22      	ldr	r3, [pc, #136]	; (e54 <QSPI_N25Q256_PORT_init+0xbc>)
     dca:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
     dcc:	4925      	ldr	r1, [pc, #148]	; (e64 <QSPI_N25Q256_PORT_init+0xcc>)
     dce:	2008      	movs	r0, #8
     dd0:	4b22      	ldr	r3, [pc, #136]	; (e5c <QSPI_N25Q256_PORT_init+0xc4>)
     dd2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
     dd4:	2102      	movs	r1, #2
     dd6:	2009      	movs	r0, #9
     dd8:	4b1d      	ldr	r3, [pc, #116]	; (e50 <QSPI_N25Q256_PORT_init+0xb8>)
     dda:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
     ddc:	2100      	movs	r1, #0
     dde:	2009      	movs	r0, #9
     de0:	4b1f      	ldr	r3, [pc, #124]	; (e60 <QSPI_N25Q256_PORT_init+0xc8>)
     de2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
     de4:	2100      	movs	r1, #0
     de6:	2009      	movs	r0, #9
     de8:	4b1a      	ldr	r3, [pc, #104]	; (e54 <QSPI_N25Q256_PORT_init+0xbc>)
     dea:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
     dec:	491e      	ldr	r1, [pc, #120]	; (e68 <QSPI_N25Q256_PORT_init+0xd0>)
     dee:	2009      	movs	r0, #9
     df0:	4b1a      	ldr	r3, [pc, #104]	; (e5c <QSPI_N25Q256_PORT_init+0xc4>)
     df2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
     df4:	2102      	movs	r1, #2
     df6:	200a      	movs	r0, #10
     df8:	4b15      	ldr	r3, [pc, #84]	; (e50 <QSPI_N25Q256_PORT_init+0xb8>)
     dfa:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
     dfc:	2100      	movs	r1, #0
     dfe:	200a      	movs	r0, #10
     e00:	4b17      	ldr	r3, [pc, #92]	; (e60 <QSPI_N25Q256_PORT_init+0xc8>)
     e02:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
     e04:	2100      	movs	r1, #0
     e06:	200a      	movs	r0, #10
     e08:	4b12      	ldr	r3, [pc, #72]	; (e54 <QSPI_N25Q256_PORT_init+0xbc>)
     e0a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
     e0c:	4917      	ldr	r1, [pc, #92]	; (e6c <QSPI_N25Q256_PORT_init+0xd4>)
     e0e:	200a      	movs	r0, #10
     e10:	4b12      	ldr	r3, [pc, #72]	; (e5c <QSPI_N25Q256_PORT_init+0xc4>)
     e12:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
     e14:	2102      	movs	r1, #2
     e16:	200b      	movs	r0, #11
     e18:	4b0d      	ldr	r3, [pc, #52]	; (e50 <QSPI_N25Q256_PORT_init+0xb8>)
     e1a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
     e1c:	2100      	movs	r1, #0
     e1e:	200b      	movs	r0, #11
     e20:	4b0f      	ldr	r3, [pc, #60]	; (e60 <QSPI_N25Q256_PORT_init+0xc8>)
     e22:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
     e24:	2100      	movs	r1, #0
     e26:	200b      	movs	r0, #11
     e28:	4b0a      	ldr	r3, [pc, #40]	; (e54 <QSPI_N25Q256_PORT_init+0xbc>)
     e2a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
     e2c:	4910      	ldr	r1, [pc, #64]	; (e70 <QSPI_N25Q256_PORT_init+0xd8>)
     e2e:	200b      	movs	r0, #11
     e30:	4b0a      	ldr	r3, [pc, #40]	; (e5c <QSPI_N25Q256_PORT_init+0xc4>)
     e32:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
     e34:	2101      	movs	r1, #1
     e36:	202a      	movs	r0, #42	; 0x2a
     e38:	4b05      	ldr	r3, [pc, #20]	; (e50 <QSPI_N25Q256_PORT_init+0xb8>)
     e3a:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
     e3c:	2100      	movs	r1, #0
     e3e:	202a      	movs	r0, #42	; 0x2a
     e40:	4b04      	ldr	r3, [pc, #16]	; (e54 <QSPI_N25Q256_PORT_init+0xbc>)
     e42:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
     e44:	490b      	ldr	r1, [pc, #44]	; (e74 <QSPI_N25Q256_PORT_init+0xdc>)
     e46:	202a      	movs	r0, #42	; 0x2a
     e48:	4b04      	ldr	r3, [pc, #16]	; (e5c <QSPI_N25Q256_PORT_init+0xc4>)
     e4a:	4798      	blx	r3
}
     e4c:	bf00      	nop
     e4e:	bd80      	pop	{r7, pc}
     e50:	00000bc9 	.word	0x00000bc9
     e54:	00000b75 	.word	0x00000b75
     e58:	002b0007 	.word	0x002b0007
     e5c:	00000ba9 	.word	0x00000ba9
     e60:	00000c01 	.word	0x00000c01
     e64:	00080007 	.word	0x00080007
     e68:	00090007 	.word	0x00090007
     e6c:	000a0007 	.word	0x000a0007
     e70:	000b0007 	.word	0x000b0007
     e74:	002a0007 	.word	0x002a0007

00000e78 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
     e78:	b580      	push	{r7, lr}
     e7a:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
     e7c:	4805      	ldr	r0, [pc, #20]	; (e94 <QSPI_N25Q256_CLOCK_init+0x1c>)
     e7e:	4b06      	ldr	r3, [pc, #24]	; (e98 <QSPI_N25Q256_CLOCK_init+0x20>)
     e80:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
     e82:	4804      	ldr	r0, [pc, #16]	; (e94 <QSPI_N25Q256_CLOCK_init+0x1c>)
     e84:	4b05      	ldr	r3, [pc, #20]	; (e9c <QSPI_N25Q256_CLOCK_init+0x24>)
     e86:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
     e88:	4802      	ldr	r0, [pc, #8]	; (e94 <QSPI_N25Q256_CLOCK_init+0x1c>)
     e8a:	4b05      	ldr	r3, [pc, #20]	; (ea0 <QSPI_N25Q256_CLOCK_init+0x28>)
     e8c:	4798      	blx	r3
}
     e8e:	bf00      	nop
     e90:	bd80      	pop	{r7, pc}
     e92:	bf00      	nop
     e94:	40000800 	.word	0x40000800
     e98:	0000043b 	.word	0x0000043b
     e9c:	0000047b 	.word	0x0000047b
     ea0:	000005db 	.word	0x000005db

00000ea4 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
     ea4:	b580      	push	{r7, lr}
     ea6:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
     ea8:	4b04      	ldr	r3, [pc, #16]	; (ebc <QSPI_N25Q256_init+0x18>)
     eaa:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
     eac:	4904      	ldr	r1, [pc, #16]	; (ec0 <QSPI_N25Q256_init+0x1c>)
     eae:	4805      	ldr	r0, [pc, #20]	; (ec4 <QSPI_N25Q256_init+0x20>)
     eb0:	4b05      	ldr	r3, [pc, #20]	; (ec8 <QSPI_N25Q256_init+0x24>)
     eb2:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
     eb4:	4b05      	ldr	r3, [pc, #20]	; (ecc <QSPI_N25Q256_init+0x28>)
     eb6:	4798      	blx	r3
}
     eb8:	bf00      	nop
     eba:	bd80      	pop	{r7, pc}
     ebc:	00000e79 	.word	0x00000e79
     ec0:	42003400 	.word	0x42003400
     ec4:	200019a8 	.word	0x200019a8
     ec8:	00001d91 	.word	0x00001d91
     ecc:	00000d99 	.word	0x00000d99

00000ed0 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
     ed0:	b580      	push	{r7, lr}
     ed2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
     ed4:	4802      	ldr	r0, [pc, #8]	; (ee0 <DATETIME_CLOCK_CLOCK_init+0x10>)
     ed6:	4b03      	ldr	r3, [pc, #12]	; (ee4 <DATETIME_CLOCK_CLOCK_init+0x14>)
     ed8:	4798      	blx	r3
}
     eda:	bf00      	nop
     edc:	bd80      	pop	{r7, pc}
     ede:	bf00      	nop
     ee0:	40000800 	.word	0x40000800
     ee4:	000004bb 	.word	0x000004bb

00000ee8 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
     ee8:	b580      	push	{r7, lr}
     eea:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
     eec:	4b03      	ldr	r3, [pc, #12]	; (efc <DATETIME_CLOCK_init+0x14>)
     eee:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
     ef0:	4903      	ldr	r1, [pc, #12]	; (f00 <DATETIME_CLOCK_init+0x18>)
     ef2:	4804      	ldr	r0, [pc, #16]	; (f04 <DATETIME_CLOCK_init+0x1c>)
     ef4:	4b04      	ldr	r3, [pc, #16]	; (f08 <DATETIME_CLOCK_init+0x20>)
     ef6:	4798      	blx	r3
}
     ef8:	bf00      	nop
     efa:	bd80      	pop	{r7, pc}
     efc:	00000ed1 	.word	0x00000ed1
     f00:	40002400 	.word	0x40002400
     f04:	20001ae0 	.word	0x20001ae0
     f08:	00001649 	.word	0x00001649

00000f0c <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
     f0c:	b580      	push	{r7, lr}
     f0e:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
     f10:	2100      	movs	r1, #0
     f12:	203b      	movs	r0, #59	; 0x3b
     f14:	4b11      	ldr	r3, [pc, #68]	; (f5c <SPI_TEMP_PORT_init+0x50>)
     f16:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
     f18:	2102      	movs	r1, #2
     f1a:	203b      	movs	r0, #59	; 0x3b
     f1c:	4b10      	ldr	r3, [pc, #64]	; (f60 <SPI_TEMP_PORT_init+0x54>)
     f1e:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
     f20:	4910      	ldr	r1, [pc, #64]	; (f64 <SPI_TEMP_PORT_init+0x58>)
     f22:	203b      	movs	r0, #59	; 0x3b
     f24:	4b10      	ldr	r3, [pc, #64]	; (f68 <SPI_TEMP_PORT_init+0x5c>)
     f26:	4798      	blx	r3

	gpio_set_pin_level(PB26,
     f28:	2100      	movs	r1, #0
     f2a:	203a      	movs	r0, #58	; 0x3a
     f2c:	4b0b      	ldr	r3, [pc, #44]	; (f5c <SPI_TEMP_PORT_init+0x50>)
     f2e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
     f30:	2102      	movs	r1, #2
     f32:	203a      	movs	r0, #58	; 0x3a
     f34:	4b0a      	ldr	r3, [pc, #40]	; (f60 <SPI_TEMP_PORT_init+0x54>)
     f36:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
     f38:	490c      	ldr	r1, [pc, #48]	; (f6c <SPI_TEMP_PORT_init+0x60>)
     f3a:	203a      	movs	r0, #58	; 0x3a
     f3c:	4b0a      	ldr	r3, [pc, #40]	; (f68 <SPI_TEMP_PORT_init+0x5c>)
     f3e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
     f40:	2101      	movs	r1, #1
     f42:	203c      	movs	r0, #60	; 0x3c
     f44:	4b06      	ldr	r3, [pc, #24]	; (f60 <SPI_TEMP_PORT_init+0x54>)
     f46:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
     f48:	2100      	movs	r1, #0
     f4a:	203c      	movs	r0, #60	; 0x3c
     f4c:	4b08      	ldr	r3, [pc, #32]	; (f70 <SPI_TEMP_PORT_init+0x64>)
     f4e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
     f50:	4908      	ldr	r1, [pc, #32]	; (f74 <SPI_TEMP_PORT_init+0x68>)
     f52:	203c      	movs	r0, #60	; 0x3c
     f54:	4b04      	ldr	r3, [pc, #16]	; (f68 <SPI_TEMP_PORT_init+0x5c>)
     f56:	4798      	blx	r3
}
     f58:	bf00      	nop
     f5a:	bd80      	pop	{r7, pc}
     f5c:	00000c01 	.word	0x00000c01
     f60:	00000bc9 	.word	0x00000bc9
     f64:	003b0003 	.word	0x003b0003
     f68:	00000ba9 	.word	0x00000ba9
     f6c:	003a0003 	.word	0x003a0003
     f70:	00000b75 	.word	0x00000b75
     f74:	003c0003 	.word	0x003c0003

00000f78 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
     f78:	b580      	push	{r7, lr}
     f7a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     f7c:	2243      	movs	r2, #67	; 0x43
     f7e:	2122      	movs	r1, #34	; 0x22
     f80:	4806      	ldr	r0, [pc, #24]	; (f9c <SPI_TEMP_CLOCK_init+0x24>)
     f82:	4b07      	ldr	r3, [pc, #28]	; (fa0 <SPI_TEMP_CLOCK_init+0x28>)
     f84:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     f86:	224a      	movs	r2, #74	; 0x4a
     f88:	2103      	movs	r1, #3
     f8a:	4804      	ldr	r0, [pc, #16]	; (f9c <SPI_TEMP_CLOCK_init+0x24>)
     f8c:	4b04      	ldr	r3, [pc, #16]	; (fa0 <SPI_TEMP_CLOCK_init+0x28>)
     f8e:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
     f90:	4804      	ldr	r0, [pc, #16]	; (fa4 <SPI_TEMP_CLOCK_init+0x2c>)
     f92:	4b05      	ldr	r3, [pc, #20]	; (fa8 <SPI_TEMP_CLOCK_init+0x30>)
     f94:	4798      	blx	r3
}
     f96:	bf00      	nop
     f98:	bd80      	pop	{r7, pc}
     f9a:	bf00      	nop
     f9c:	40001c00 	.word	0x40001c00
     fa0:	000003f5 	.word	0x000003f5
     fa4:	40000800 	.word	0x40000800
     fa8:	000005fb 	.word	0x000005fb

00000fac <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
     fac:	b580      	push	{r7, lr}
     fae:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
     fb0:	4b05      	ldr	r3, [pc, #20]	; (fc8 <SPI_TEMP_init+0x1c>)
     fb2:	4798      	blx	r3
	spi_m_async_init(&SPI_TEMP, SERCOM4);
     fb4:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
     fb8:	4804      	ldr	r0, [pc, #16]	; (fcc <SPI_TEMP_init+0x20>)
     fba:	4b05      	ldr	r3, [pc, #20]	; (fd0 <SPI_TEMP_init+0x24>)
     fbc:	4798      	blx	r3
	SPI_TEMP_PORT_init();
     fbe:	4b05      	ldr	r3, [pc, #20]	; (fd4 <SPI_TEMP_init+0x28>)
     fc0:	4798      	blx	r3
}
     fc2:	bf00      	nop
     fc4:	bd80      	pop	{r7, pc}
     fc6:	bf00      	nop
     fc8:	00000f79 	.word	0x00000f79
     fcc:	20001960 	.word	0x20001960
     fd0:	000020b9 	.word	0x000020b9
     fd4:	00000f0d 	.word	0x00000f0d

00000fd8 <I2C_EXPANDER_PORT_init>:

void I2C_EXPANDER_PORT_init(void)
{
     fd8:	b580      	push	{r7, lr}
     fda:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
     fdc:	2100      	movs	r1, #0
     fde:	2017      	movs	r0, #23
     fe0:	4b07      	ldr	r3, [pc, #28]	; (1000 <I2C_EXPANDER_PORT_init+0x28>)
     fe2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
     fe4:	4907      	ldr	r1, [pc, #28]	; (1004 <I2C_EXPANDER_PORT_init+0x2c>)
     fe6:	2017      	movs	r0, #23
     fe8:	4b07      	ldr	r3, [pc, #28]	; (1008 <I2C_EXPANDER_PORT_init+0x30>)
     fea:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
     fec:	2100      	movs	r1, #0
     fee:	2016      	movs	r0, #22
     ff0:	4b03      	ldr	r3, [pc, #12]	; (1000 <I2C_EXPANDER_PORT_init+0x28>)
     ff2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
     ff4:	4905      	ldr	r1, [pc, #20]	; (100c <I2C_EXPANDER_PORT_init+0x34>)
     ff6:	2016      	movs	r0, #22
     ff8:	4b03      	ldr	r3, [pc, #12]	; (1008 <I2C_EXPANDER_PORT_init+0x30>)
     ffa:	4798      	blx	r3
}
     ffc:	bf00      	nop
     ffe:	bd80      	pop	{r7, pc}
    1000:	00000b75 	.word	0x00000b75
    1004:	00170003 	.word	0x00170003
    1008:	00000ba9 	.word	0x00000ba9
    100c:	00160003 	.word	0x00160003

00001010 <I2C_EXPANDER_CLOCK_init>:

void I2C_EXPANDER_CLOCK_init(void)
{
    1010:	b580      	push	{r7, lr}
    1012:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1014:	2243      	movs	r2, #67	; 0x43
    1016:	2123      	movs	r1, #35	; 0x23
    1018:	4806      	ldr	r0, [pc, #24]	; (1034 <I2C_EXPANDER_CLOCK_init+0x24>)
    101a:	4b07      	ldr	r3, [pc, #28]	; (1038 <I2C_EXPANDER_CLOCK_init+0x28>)
    101c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    101e:	224a      	movs	r2, #74	; 0x4a
    1020:	2103      	movs	r1, #3
    1022:	4804      	ldr	r0, [pc, #16]	; (1034 <I2C_EXPANDER_CLOCK_init+0x24>)
    1024:	4b04      	ldr	r3, [pc, #16]	; (1038 <I2C_EXPANDER_CLOCK_init+0x28>)
    1026:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    1028:	4804      	ldr	r0, [pc, #16]	; (103c <I2C_EXPANDER_CLOCK_init+0x2c>)
    102a:	4b05      	ldr	r3, [pc, #20]	; (1040 <I2C_EXPANDER_CLOCK_init+0x30>)
    102c:	4798      	blx	r3
}
    102e:	bf00      	nop
    1030:	bd80      	pop	{r7, pc}
    1032:	bf00      	nop
    1034:	40001c00 	.word	0x40001c00
    1038:	000003f5 	.word	0x000003f5
    103c:	40000800 	.word	0x40000800
    1040:	0000061b 	.word	0x0000061b

00001044 <I2C_EXPANDER_init>:

void I2C_EXPANDER_init(void)
{
    1044:	b580      	push	{r7, lr}
    1046:	af00      	add	r7, sp, #0
	I2C_EXPANDER_CLOCK_init();
    1048:	4b04      	ldr	r3, [pc, #16]	; (105c <I2C_EXPANDER_init+0x18>)
    104a:	4798      	blx	r3
	i2c_m_async_init(&I2C_EXPANDER, SERCOM5);
    104c:	4904      	ldr	r1, [pc, #16]	; (1060 <I2C_EXPANDER_init+0x1c>)
    104e:	4805      	ldr	r0, [pc, #20]	; (1064 <I2C_EXPANDER_init+0x20>)
    1050:	4b05      	ldr	r3, [pc, #20]	; (1068 <I2C_EXPANDER_init+0x24>)
    1052:	4798      	blx	r3
	I2C_EXPANDER_PORT_init();
    1054:	4b05      	ldr	r3, [pc, #20]	; (106c <I2C_EXPANDER_init+0x28>)
    1056:	4798      	blx	r3
}
    1058:	bf00      	nop
    105a:	bd80      	pop	{r7, pc}
    105c:	00001011 	.word	0x00001011
    1060:	43000400 	.word	0x43000400
    1064:	20001a44 	.word	0x20001a44
    1068:	00001c51 	.word	0x00001c51
    106c:	00000fd9 	.word	0x00000fd9

00001070 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    1070:	b580      	push	{r7, lr}
    1072:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    1074:	2100      	movs	r1, #0
    1076:	2044      	movs	r0, #68	; 0x44
    1078:	4b11      	ldr	r3, [pc, #68]	; (10c0 <SPI_HI3593_PORT_init+0x50>)
    107a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    107c:	2102      	movs	r1, #2
    107e:	2044      	movs	r0, #68	; 0x44
    1080:	4b10      	ldr	r3, [pc, #64]	; (10c4 <SPI_HI3593_PORT_init+0x54>)
    1082:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    1084:	4910      	ldr	r1, [pc, #64]	; (10c8 <SPI_HI3593_PORT_init+0x58>)
    1086:	2044      	movs	r0, #68	; 0x44
    1088:	4b10      	ldr	r3, [pc, #64]	; (10cc <SPI_HI3593_PORT_init+0x5c>)
    108a:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    108c:	2100      	movs	r1, #0
    108e:	2045      	movs	r0, #69	; 0x45
    1090:	4b0b      	ldr	r3, [pc, #44]	; (10c0 <SPI_HI3593_PORT_init+0x50>)
    1092:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    1094:	2102      	movs	r1, #2
    1096:	2045      	movs	r0, #69	; 0x45
    1098:	4b0a      	ldr	r3, [pc, #40]	; (10c4 <SPI_HI3593_PORT_init+0x54>)
    109a:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    109c:	490c      	ldr	r1, [pc, #48]	; (10d0 <SPI_HI3593_PORT_init+0x60>)
    109e:	2045      	movs	r0, #69	; 0x45
    10a0:	4b0a      	ldr	r3, [pc, #40]	; (10cc <SPI_HI3593_PORT_init+0x5c>)
    10a2:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    10a4:	2101      	movs	r1, #1
    10a6:	2047      	movs	r0, #71	; 0x47
    10a8:	4b06      	ldr	r3, [pc, #24]	; (10c4 <SPI_HI3593_PORT_init+0x54>)
    10aa:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    10ac:	2100      	movs	r1, #0
    10ae:	2047      	movs	r0, #71	; 0x47
    10b0:	4b08      	ldr	r3, [pc, #32]	; (10d4 <SPI_HI3593_PORT_init+0x64>)
    10b2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    10b4:	4908      	ldr	r1, [pc, #32]	; (10d8 <SPI_HI3593_PORT_init+0x68>)
    10b6:	2047      	movs	r0, #71	; 0x47
    10b8:	4b04      	ldr	r3, [pc, #16]	; (10cc <SPI_HI3593_PORT_init+0x5c>)
    10ba:	4798      	blx	r3
}
    10bc:	bf00      	nop
    10be:	bd80      	pop	{r7, pc}
    10c0:	00000c01 	.word	0x00000c01
    10c4:	00000bc9 	.word	0x00000bc9
    10c8:	00440002 	.word	0x00440002
    10cc:	00000ba9 	.word	0x00000ba9
    10d0:	00450002 	.word	0x00450002
    10d4:	00000b75 	.word	0x00000b75
    10d8:	00470002 	.word	0x00470002

000010dc <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    10dc:	b580      	push	{r7, lr}
    10de:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    10e0:	2243      	movs	r2, #67	; 0x43
    10e2:	2124      	movs	r1, #36	; 0x24
    10e4:	4806      	ldr	r0, [pc, #24]	; (1100 <SPI_HI3593_CLOCK_init+0x24>)
    10e6:	4b07      	ldr	r3, [pc, #28]	; (1104 <SPI_HI3593_CLOCK_init+0x28>)
    10e8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    10ea:	224a      	movs	r2, #74	; 0x4a
    10ec:	2103      	movs	r1, #3
    10ee:	4804      	ldr	r0, [pc, #16]	; (1100 <SPI_HI3593_CLOCK_init+0x24>)
    10f0:	4b04      	ldr	r3, [pc, #16]	; (1104 <SPI_HI3593_CLOCK_init+0x28>)
    10f2:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    10f4:	4804      	ldr	r0, [pc, #16]	; (1108 <SPI_HI3593_CLOCK_init+0x2c>)
    10f6:	4b05      	ldr	r3, [pc, #20]	; (110c <SPI_HI3593_CLOCK_init+0x30>)
    10f8:	4798      	blx	r3
}
    10fa:	bf00      	nop
    10fc:	bd80      	pop	{r7, pc}
    10fe:	bf00      	nop
    1100:	40001c00 	.word	0x40001c00
    1104:	000003f5 	.word	0x000003f5
    1108:	40000800 	.word	0x40000800
    110c:	0000063b 	.word	0x0000063b

00001110 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    1110:	b580      	push	{r7, lr}
    1112:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    1114:	4b04      	ldr	r3, [pc, #16]	; (1128 <SPI_HI3593_init+0x18>)
    1116:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    1118:	4904      	ldr	r1, [pc, #16]	; (112c <SPI_HI3593_init+0x1c>)
    111a:	4805      	ldr	r0, [pc, #20]	; (1130 <SPI_HI3593_init+0x20>)
    111c:	4b05      	ldr	r3, [pc, #20]	; (1134 <SPI_HI3593_init+0x24>)
    111e:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    1120:	4b05      	ldr	r3, [pc, #20]	; (1138 <SPI_HI3593_init+0x28>)
    1122:	4798      	blx	r3
}
    1124:	bf00      	nop
    1126:	bd80      	pop	{r7, pc}
    1128:	000010dd 	.word	0x000010dd
    112c:	43000800 	.word	0x43000800
    1130:	20001948 	.word	0x20001948
    1134:	0000226d 	.word	0x0000226d
    1138:	00001071 	.word	0x00001071

0000113c <I2C_EEPROM_PORT_init>:

void I2C_EEPROM_PORT_init(void)
{
    113c:	b580      	push	{r7, lr}
    113e:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    1140:	2100      	movs	r1, #0
    1142:	2068      	movs	r0, #104	; 0x68
    1144:	4b07      	ldr	r3, [pc, #28]	; (1164 <I2C_EEPROM_PORT_init+0x28>)
    1146:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    1148:	4907      	ldr	r1, [pc, #28]	; (1168 <I2C_EEPROM_PORT_init+0x2c>)
    114a:	2068      	movs	r0, #104	; 0x68
    114c:	4b07      	ldr	r3, [pc, #28]	; (116c <I2C_EEPROM_PORT_init+0x30>)
    114e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    1150:	2100      	movs	r1, #0
    1152:	2069      	movs	r0, #105	; 0x69
    1154:	4b03      	ldr	r3, [pc, #12]	; (1164 <I2C_EEPROM_PORT_init+0x28>)
    1156:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    1158:	4905      	ldr	r1, [pc, #20]	; (1170 <I2C_EEPROM_PORT_init+0x34>)
    115a:	2069      	movs	r0, #105	; 0x69
    115c:	4b03      	ldr	r3, [pc, #12]	; (116c <I2C_EEPROM_PORT_init+0x30>)
    115e:	4798      	blx	r3
}
    1160:	bf00      	nop
    1162:	bd80      	pop	{r7, pc}
    1164:	00000b75 	.word	0x00000b75
    1168:	00680002 	.word	0x00680002
    116c:	00000ba9 	.word	0x00000ba9
    1170:	00690002 	.word	0x00690002

00001174 <I2C_EEPROM_CLOCK_init>:

void I2C_EEPROM_CLOCK_init(void)
{
    1174:	b580      	push	{r7, lr}
    1176:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1178:	2242      	movs	r2, #66	; 0x42
    117a:	2125      	movs	r1, #37	; 0x25
    117c:	4806      	ldr	r0, [pc, #24]	; (1198 <I2C_EEPROM_CLOCK_init+0x24>)
    117e:	4b07      	ldr	r3, [pc, #28]	; (119c <I2C_EEPROM_CLOCK_init+0x28>)
    1180:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1182:	224a      	movs	r2, #74	; 0x4a
    1184:	2103      	movs	r1, #3
    1186:	4804      	ldr	r0, [pc, #16]	; (1198 <I2C_EEPROM_CLOCK_init+0x24>)
    1188:	4b04      	ldr	r3, [pc, #16]	; (119c <I2C_EEPROM_CLOCK_init+0x28>)
    118a:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    118c:	4804      	ldr	r0, [pc, #16]	; (11a0 <I2C_EEPROM_CLOCK_init+0x2c>)
    118e:	4b05      	ldr	r3, [pc, #20]	; (11a4 <I2C_EEPROM_CLOCK_init+0x30>)
    1190:	4798      	blx	r3
}
    1192:	bf00      	nop
    1194:	bd80      	pop	{r7, pc}
    1196:	bf00      	nop
    1198:	40001c00 	.word	0x40001c00
    119c:	000003f5 	.word	0x000003f5
    11a0:	40000800 	.word	0x40000800
    11a4:	0000065b 	.word	0x0000065b

000011a8 <I2C_EEPROM_init>:

void I2C_EEPROM_init(void)
{
    11a8:	b580      	push	{r7, lr}
    11aa:	af00      	add	r7, sp, #0
	I2C_EEPROM_CLOCK_init();
    11ac:	4b04      	ldr	r3, [pc, #16]	; (11c0 <I2C_EEPROM_init+0x18>)
    11ae:	4798      	blx	r3
	i2c_m_async_init(&I2C_EEPROM, SERCOM7);
    11b0:	4904      	ldr	r1, [pc, #16]	; (11c4 <I2C_EEPROM_init+0x1c>)
    11b2:	4805      	ldr	r0, [pc, #20]	; (11c8 <I2C_EEPROM_init+0x20>)
    11b4:	4b05      	ldr	r3, [pc, #20]	; (11cc <I2C_EEPROM_init+0x24>)
    11b6:	4798      	blx	r3
	I2C_EEPROM_PORT_init();
    11b8:	4b05      	ldr	r3, [pc, #20]	; (11d0 <I2C_EEPROM_init+0x28>)
    11ba:	4798      	blx	r3
}
    11bc:	bf00      	nop
    11be:	bd80      	pop	{r7, pc}
    11c0:	00001175 	.word	0x00001175
    11c4:	43000c00 	.word	0x43000c00
    11c8:	20001aa0 	.word	0x20001aa0
    11cc:	00001c51 	.word	0x00001c51
    11d0:	0000113d 	.word	0x0000113d

000011d4 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    11d4:	b580      	push	{r7, lr}
    11d6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    11d8:	4808      	ldr	r0, [pc, #32]	; (11fc <TIMER_INTERFACE_init+0x28>)
    11da:	4b09      	ldr	r3, [pc, #36]	; (1200 <TIMER_INTERFACE_init+0x2c>)
    11dc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    11de:	2243      	movs	r2, #67	; 0x43
    11e0:	2109      	movs	r1, #9
    11e2:	4808      	ldr	r0, [pc, #32]	; (1204 <TIMER_INTERFACE_init+0x30>)
    11e4:	4b08      	ldr	r3, [pc, #32]	; (1208 <TIMER_INTERFACE_init+0x34>)
    11e6:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC0, _tc_get_timer());
    11e8:	4b08      	ldr	r3, [pc, #32]	; (120c <TIMER_INTERFACE_init+0x38>)
    11ea:	4798      	blx	r3
    11ec:	4603      	mov	r3, r0
    11ee:	461a      	mov	r2, r3
    11f0:	4907      	ldr	r1, [pc, #28]	; (1210 <TIMER_INTERFACE_init+0x3c>)
    11f2:	4808      	ldr	r0, [pc, #32]	; (1214 <TIMER_INTERFACE_init+0x40>)
    11f4:	4b08      	ldr	r3, [pc, #32]	; (1218 <TIMER_INTERFACE_init+0x44>)
    11f6:	4798      	blx	r3
}
    11f8:	bf00      	nop
    11fa:	bd80      	pop	{r7, pc}
    11fc:	40000800 	.word	0x40000800
    1200:	000004fb 	.word	0x000004fb
    1204:	40001c00 	.word	0x40001c00
    1208:	000003f5 	.word	0x000003f5
    120c:	0000796d 	.word	0x0000796d
    1210:	40003800 	.word	0x40003800
    1214:	200019c8 	.word	0x200019c8
    1218:	0000243d 	.word	0x0000243d

0000121c <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    121c:	b580      	push	{r7, lr}
    121e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
    1220:	4808      	ldr	r0, [pc, #32]	; (1244 <TIMER_EVENT_init+0x28>)
    1222:	4b09      	ldr	r3, [pc, #36]	; (1248 <TIMER_EVENT_init+0x2c>)
    1224:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1226:	2245      	movs	r2, #69	; 0x45
    1228:	2109      	movs	r1, #9
    122a:	4808      	ldr	r0, [pc, #32]	; (124c <TIMER_EVENT_init+0x30>)
    122c:	4b08      	ldr	r3, [pc, #32]	; (1250 <TIMER_EVENT_init+0x34>)
    122e:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC1, _tc_get_timer());
    1230:	4b08      	ldr	r3, [pc, #32]	; (1254 <TIMER_EVENT_init+0x38>)
    1232:	4798      	blx	r3
    1234:	4603      	mov	r3, r0
    1236:	461a      	mov	r2, r3
    1238:	4907      	ldr	r1, [pc, #28]	; (1258 <TIMER_EVENT_init+0x3c>)
    123a:	4808      	ldr	r0, [pc, #32]	; (125c <TIMER_EVENT_init+0x40>)
    123c:	4b08      	ldr	r3, [pc, #32]	; (1260 <TIMER_EVENT_init+0x44>)
    123e:	4798      	blx	r3
}
    1240:	bf00      	nop
    1242:	bd80      	pop	{r7, pc}
    1244:	40000800 	.word	0x40000800
    1248:	0000051b 	.word	0x0000051b
    124c:	40001c00 	.word	0x40001c00
    1250:	000003f5 	.word	0x000003f5
    1254:	0000796d 	.word	0x0000796d
    1258:	40003c00 	.word	0x40003c00
    125c:	200019ac 	.word	0x200019ac
    1260:	0000243d 	.word	0x0000243d

00001264 <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    1264:	b580      	push	{r7, lr}
    1266:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    1268:	4808      	ldr	r0, [pc, #32]	; (128c <TIMER_ARINC_init+0x28>)
    126a:	4b09      	ldr	r3, [pc, #36]	; (1290 <TIMER_ARINC_init+0x2c>)
    126c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    126e:	2244      	movs	r2, #68	; 0x44
    1270:	211a      	movs	r1, #26
    1272:	4808      	ldr	r0, [pc, #32]	; (1294 <TIMER_ARINC_init+0x30>)
    1274:	4b08      	ldr	r3, [pc, #32]	; (1298 <TIMER_ARINC_init+0x34>)
    1276:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    1278:	4b08      	ldr	r3, [pc, #32]	; (129c <TIMER_ARINC_init+0x38>)
    127a:	4798      	blx	r3
    127c:	4603      	mov	r3, r0
    127e:	461a      	mov	r2, r3
    1280:	4907      	ldr	r1, [pc, #28]	; (12a0 <TIMER_ARINC_init+0x3c>)
    1282:	4808      	ldr	r0, [pc, #32]	; (12a4 <TIMER_ARINC_init+0x40>)
    1284:	4b08      	ldr	r3, [pc, #32]	; (12a8 <TIMER_ARINC_init+0x44>)
    1286:	4798      	blx	r3
}
    1288:	bf00      	nop
    128a:	bd80      	pop	{r7, pc}
    128c:	40000800 	.word	0x40000800
    1290:	0000059b 	.word	0x0000059b
    1294:	40001c00 	.word	0x40001c00
    1298:	000003f5 	.word	0x000003f5
    129c:	0000796d 	.word	0x0000796d
    12a0:	4101a000 	.word	0x4101a000
    12a4:	20001a28 	.word	0x20001a28
    12a8:	0000243d 	.word	0x0000243d

000012ac <TIMER_HVAC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_HVAC_init(void)
{
    12ac:	b580      	push	{r7, lr}
    12ae:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC3_bit(MCLK);
    12b0:	4808      	ldr	r0, [pc, #32]	; (12d4 <TIMER_HVAC_init+0x28>)
    12b2:	4b09      	ldr	r3, [pc, #36]	; (12d8 <TIMER_HVAC_init+0x2c>)
    12b4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC3_GCLK_ID, CONF_GCLK_TC3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    12b6:	2245      	movs	r2, #69	; 0x45
    12b8:	211a      	movs	r1, #26
    12ba:	4808      	ldr	r0, [pc, #32]	; (12dc <TIMER_HVAC_init+0x30>)
    12bc:	4b08      	ldr	r3, [pc, #32]	; (12e0 <TIMER_HVAC_init+0x34>)
    12be:	4798      	blx	r3

	timer_init(&TIMER_HVAC, TC3, _tc_get_timer());
    12c0:	4b08      	ldr	r3, [pc, #32]	; (12e4 <TIMER_HVAC_init+0x38>)
    12c2:	4798      	blx	r3
    12c4:	4603      	mov	r3, r0
    12c6:	461a      	mov	r2, r3
    12c8:	4907      	ldr	r1, [pc, #28]	; (12e8 <TIMER_HVAC_init+0x3c>)
    12ca:	4808      	ldr	r0, [pc, #32]	; (12ec <TIMER_HVAC_init+0x40>)
    12cc:	4b08      	ldr	r3, [pc, #32]	; (12f0 <TIMER_HVAC_init+0x44>)
    12ce:	4798      	blx	r3
}
    12d0:	bf00      	nop
    12d2:	bd80      	pop	{r7, pc}
    12d4:	40000800 	.word	0x40000800
    12d8:	000005bb 	.word	0x000005bb
    12dc:	40001c00 	.word	0x40001c00
    12e0:	000003f5 	.word	0x000003f5
    12e4:	0000796d 	.word	0x0000796d
    12e8:	4101c000 	.word	0x4101c000
    12ec:	20001a84 	.word	0x20001a84
    12f0:	0000243d 	.word	0x0000243d

000012f4 <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    12f4:	b580      	push	{r7, lr}
    12f6:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB00, PINMUX_PB00E_TC7_WO0);
    12f8:	4904      	ldr	r1, [pc, #16]	; (130c <LIVE_PULSE_PORT_init+0x18>)
    12fa:	2020      	movs	r0, #32
    12fc:	4b04      	ldr	r3, [pc, #16]	; (1310 <LIVE_PULSE_PORT_init+0x1c>)
    12fe:	4798      	blx	r3

	gpio_set_pin_function(PB01, PINMUX_PB01E_TC7_WO1);
    1300:	4904      	ldr	r1, [pc, #16]	; (1314 <LIVE_PULSE_PORT_init+0x20>)
    1302:	2021      	movs	r0, #33	; 0x21
    1304:	4b02      	ldr	r3, [pc, #8]	; (1310 <LIVE_PULSE_PORT_init+0x1c>)
    1306:	4798      	blx	r3
}
    1308:	bf00      	nop
    130a:	bd80      	pop	{r7, pc}
    130c:	00200004 	.word	0x00200004
    1310:	00000ba9 	.word	0x00000ba9
    1314:	00210004 	.word	0x00210004

00001318 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    1318:	b580      	push	{r7, lr}
    131a:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    131c:	4804      	ldr	r0, [pc, #16]	; (1330 <LIVE_PULSE_CLOCK_init+0x18>)
    131e:	4b05      	ldr	r3, [pc, #20]	; (1334 <LIVE_PULSE_CLOCK_init+0x1c>)
    1320:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1322:	224b      	movs	r2, #75	; 0x4b
    1324:	2127      	movs	r1, #39	; 0x27
    1326:	4804      	ldr	r0, [pc, #16]	; (1338 <LIVE_PULSE_CLOCK_init+0x20>)
    1328:	4b04      	ldr	r3, [pc, #16]	; (133c <LIVE_PULSE_CLOCK_init+0x24>)
    132a:	4798      	blx	r3
}
    132c:	bf00      	nop
    132e:	bd80      	pop	{r7, pc}
    1330:	40000800 	.word	0x40000800
    1334:	0000067b 	.word	0x0000067b
    1338:	40001c00 	.word	0x40001c00
    133c:	000003f5 	.word	0x000003f5

00001340 <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    1340:	b580      	push	{r7, lr}
    1342:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    1344:	4b06      	ldr	r3, [pc, #24]	; (1360 <LIVE_PULSE_init+0x20>)
    1346:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    1348:	4b06      	ldr	r3, [pc, #24]	; (1364 <LIVE_PULSE_init+0x24>)
    134a:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    134c:	4b06      	ldr	r3, [pc, #24]	; (1368 <LIVE_PULSE_init+0x28>)
    134e:	4798      	blx	r3
    1350:	4603      	mov	r3, r0
    1352:	461a      	mov	r2, r3
    1354:	4905      	ldr	r1, [pc, #20]	; (136c <LIVE_PULSE_init+0x2c>)
    1356:	4806      	ldr	r0, [pc, #24]	; (1370 <LIVE_PULSE_init+0x30>)
    1358:	4b06      	ldr	r3, [pc, #24]	; (1374 <LIVE_PULSE_init+0x34>)
    135a:	4798      	blx	r3
}
    135c:	bf00      	nop
    135e:	bd80      	pop	{r7, pc}
    1360:	00001319 	.word	0x00001319
    1364:	000012f5 	.word	0x000012f5
    1368:	0000797d 	.word	0x0000797d
    136c:	43001800 	.word	0x43001800
    1370:	200019e4 	.word	0x200019e4
    1374:	00001ce5 	.word	0x00001ce5

00001378 <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    1378:	b580      	push	{r7, lr}
    137a:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    137c:	2102      	movs	r1, #2
    137e:	2018      	movs	r0, #24
    1380:	4b0f      	ldr	r3, [pc, #60]	; (13c0 <CDCUSB_PORT_init+0x48>)
    1382:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    1384:	2100      	movs	r1, #0
    1386:	2018      	movs	r0, #24
    1388:	4b0e      	ldr	r3, [pc, #56]	; (13c4 <CDCUSB_PORT_init+0x4c>)
    138a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    138c:	2100      	movs	r1, #0
    138e:	2018      	movs	r0, #24
    1390:	4b0d      	ldr	r3, [pc, #52]	; (13c8 <CDCUSB_PORT_init+0x50>)
    1392:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    1394:	490d      	ldr	r1, [pc, #52]	; (13cc <CDCUSB_PORT_init+0x54>)
    1396:	2018      	movs	r0, #24
    1398:	4b0d      	ldr	r3, [pc, #52]	; (13d0 <CDCUSB_PORT_init+0x58>)
    139a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    139c:	2102      	movs	r1, #2
    139e:	2019      	movs	r0, #25
    13a0:	4b07      	ldr	r3, [pc, #28]	; (13c0 <CDCUSB_PORT_init+0x48>)
    13a2:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    13a4:	2100      	movs	r1, #0
    13a6:	2019      	movs	r0, #25
    13a8:	4b06      	ldr	r3, [pc, #24]	; (13c4 <CDCUSB_PORT_init+0x4c>)
    13aa:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    13ac:	2100      	movs	r1, #0
    13ae:	2019      	movs	r0, #25
    13b0:	4b05      	ldr	r3, [pc, #20]	; (13c8 <CDCUSB_PORT_init+0x50>)
    13b2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    13b4:	4907      	ldr	r1, [pc, #28]	; (13d4 <CDCUSB_PORT_init+0x5c>)
    13b6:	2019      	movs	r0, #25
    13b8:	4b05      	ldr	r3, [pc, #20]	; (13d0 <CDCUSB_PORT_init+0x58>)
    13ba:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    13bc:	bf00      	nop
    13be:	bd80      	pop	{r7, pc}
    13c0:	00000bc9 	.word	0x00000bc9
    13c4:	00000c01 	.word	0x00000c01
    13c8:	00000b75 	.word	0x00000b75
    13cc:	00180007 	.word	0x00180007
    13d0:	00000ba9 	.word	0x00000ba9
    13d4:	00190007 	.word	0x00190007

000013d8 <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    13d8:	b580      	push	{r7, lr}
    13da:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    13dc:	2242      	movs	r2, #66	; 0x42
    13de:	210a      	movs	r1, #10
    13e0:	4805      	ldr	r0, [pc, #20]	; (13f8 <CDCUSB_CLOCK_init+0x20>)
    13e2:	4b06      	ldr	r3, [pc, #24]	; (13fc <CDCUSB_CLOCK_init+0x24>)
    13e4:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    13e6:	4806      	ldr	r0, [pc, #24]	; (1400 <CDCUSB_CLOCK_init+0x28>)
    13e8:	4b06      	ldr	r3, [pc, #24]	; (1404 <CDCUSB_CLOCK_init+0x2c>)
    13ea:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    13ec:	4804      	ldr	r0, [pc, #16]	; (1400 <CDCUSB_CLOCK_init+0x28>)
    13ee:	4b06      	ldr	r3, [pc, #24]	; (1408 <CDCUSB_CLOCK_init+0x30>)
    13f0:	4798      	blx	r3
}
    13f2:	bf00      	nop
    13f4:	bd80      	pop	{r7, pc}
    13f6:	bf00      	nop
    13f8:	40001c00 	.word	0x40001c00
    13fc:	000003f5 	.word	0x000003f5
    1400:	40000800 	.word	0x40000800
    1404:	0000041b 	.word	0x0000041b
    1408:	0000053b 	.word	0x0000053b

0000140c <CDCUSB_init>:

void CDCUSB_init(void)
{
    140c:	b580      	push	{r7, lr}
    140e:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    1410:	4b03      	ldr	r3, [pc, #12]	; (1420 <CDCUSB_init+0x14>)
    1412:	4798      	blx	r3
	usb_d_init();
    1414:	4b03      	ldr	r3, [pc, #12]	; (1424 <CDCUSB_init+0x18>)
    1416:	4798      	blx	r3
	CDCUSB_PORT_init();
    1418:	4b03      	ldr	r3, [pc, #12]	; (1428 <CDCUSB_init+0x1c>)
    141a:	4798      	blx	r3
}
    141c:	bf00      	nop
    141e:	bd80      	pop	{r7, pc}
    1420:	000013d9 	.word	0x000013d9
    1424:	000029b5 	.word	0x000029b5
    1428:	00001379 	.word	0x00001379

0000142c <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    142c:	b580      	push	{r7, lr}
    142e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    1430:	4802      	ldr	r0, [pc, #8]	; (143c <WATCHDOG_CLOCK_init+0x10>)
    1432:	4b03      	ldr	r3, [pc, #12]	; (1440 <WATCHDOG_CLOCK_init+0x14>)
    1434:	4798      	blx	r3
}
    1436:	bf00      	nop
    1438:	bd80      	pop	{r7, pc}
    143a:	bf00      	nop
    143c:	40000800 	.word	0x40000800
    1440:	0000049b 	.word	0x0000049b

00001444 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    1444:	b580      	push	{r7, lr}
    1446:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    1448:	4b03      	ldr	r3, [pc, #12]	; (1458 <WATCHDOG_init+0x14>)
    144a:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    144c:	4903      	ldr	r1, [pc, #12]	; (145c <WATCHDOG_init+0x18>)
    144e:	4804      	ldr	r0, [pc, #16]	; (1460 <WATCHDOG_init+0x1c>)
    1450:	4b04      	ldr	r3, [pc, #16]	; (1464 <WATCHDOG_init+0x20>)
    1452:	4798      	blx	r3
}
    1454:	bf00      	nop
    1456:	bd80      	pop	{r7, pc}
    1458:	0000142d 	.word	0x0000142d
    145c:	40002000 	.word	0x40002000
    1460:	20001b00 	.word	0x20001b00
    1464:	00000c49 	.word	0x00000c49

00001468 <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    1468:	b580      	push	{r7, lr}
    146a:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    146c:	4904      	ldr	r1, [pc, #16]	; (1480 <CAN_CCU_PORT_init+0x18>)
    146e:	202d      	movs	r0, #45	; 0x2d
    1470:	4b04      	ldr	r3, [pc, #16]	; (1484 <CAN_CCU_PORT_init+0x1c>)
    1472:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    1474:	4904      	ldr	r1, [pc, #16]	; (1488 <CAN_CCU_PORT_init+0x20>)
    1476:	202c      	movs	r0, #44	; 0x2c
    1478:	4b02      	ldr	r3, [pc, #8]	; (1484 <CAN_CCU_PORT_init+0x1c>)
    147a:	4798      	blx	r3
}
    147c:	bf00      	nop
    147e:	bd80      	pop	{r7, pc}
    1480:	002d0007 	.word	0x002d0007
    1484:	00000ba9 	.word	0x00000ba9
    1488:	002c0007 	.word	0x002c0007

0000148c <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    148c:	b580      	push	{r7, lr}
    148e:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    1490:	4807      	ldr	r0, [pc, #28]	; (14b0 <CAN_CCU_init+0x24>)
    1492:	4b08      	ldr	r3, [pc, #32]	; (14b4 <CAN_CCU_init+0x28>)
    1494:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1496:	2243      	movs	r2, #67	; 0x43
    1498:	211c      	movs	r1, #28
    149a:	4807      	ldr	r0, [pc, #28]	; (14b8 <CAN_CCU_init+0x2c>)
    149c:	4b07      	ldr	r3, [pc, #28]	; (14bc <CAN_CCU_init+0x30>)
    149e:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    14a0:	4907      	ldr	r1, [pc, #28]	; (14c0 <CAN_CCU_init+0x34>)
    14a2:	4808      	ldr	r0, [pc, #32]	; (14c4 <CAN_CCU_init+0x38>)
    14a4:	4b08      	ldr	r3, [pc, #32]	; (14c8 <CAN_CCU_init+0x3c>)
    14a6:	4798      	blx	r3
	CAN_CCU_PORT_init();
    14a8:	4b08      	ldr	r3, [pc, #32]	; (14cc <CAN_CCU_init+0x40>)
    14aa:	4798      	blx	r3
}
    14ac:	bf00      	nop
    14ae:	bd80      	pop	{r7, pc}
    14b0:	40000800 	.word	0x40000800
    14b4:	0000045b 	.word	0x0000045b
    14b8:	40001c00 	.word	0x40001c00
    14bc:	000003f5 	.word	0x000003f5
    14c0:	42000400 	.word	0x42000400
    14c4:	20001a00 	.word	0x20001a00
    14c8:	000016b9 	.word	0x000016b9
    14cc:	00001469 	.word	0x00001469

000014d0 <system_init>:

void system_init(void)
{
    14d0:	b580      	push	{r7, lr}
    14d2:	af00      	add	r7, sp, #0
	init_mcu();
    14d4:	4b46      	ldr	r3, [pc, #280]	; (15f0 <system_init+0x120>)
    14d6:	4798      	blx	r3

	// GPIO on PB07

	// Set pin direction to input
	gpio_set_pin_direction(INT_LTC2983, GPIO_DIRECTION_IN);
    14d8:	2101      	movs	r1, #1
    14da:	2027      	movs	r0, #39	; 0x27
    14dc:	4b45      	ldr	r3, [pc, #276]	; (15f4 <system_init+0x124>)
    14de:	4798      	blx	r3

	gpio_set_pin_pull_mode(INT_LTC2983,
    14e0:	2102      	movs	r1, #2
    14e2:	2027      	movs	r0, #39	; 0x27
    14e4:	4b44      	ldr	r3, [pc, #272]	; (15f8 <system_init+0x128>)
    14e6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(INT_LTC2983, GPIO_PIN_FUNCTION_OFF);
    14e8:	f04f 31ff 	mov.w	r1, #4294967295
    14ec:	2027      	movs	r0, #39	; 0x27
    14ee:	4b43      	ldr	r3, [pc, #268]	; (15fc <system_init+0x12c>)
    14f0:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_SPI_LTC,
    14f2:	2101      	movs	r1, #1
    14f4:	203d      	movs	r0, #61	; 0x3d
    14f6:	4b42      	ldr	r3, [pc, #264]	; (1600 <system_init+0x130>)
    14f8:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_SPI_LTC, GPIO_DIRECTION_OUT);
    14fa:	2102      	movs	r1, #2
    14fc:	203d      	movs	r0, #61	; 0x3d
    14fe:	4b3d      	ldr	r3, [pc, #244]	; (15f4 <system_init+0x124>)
    1500:	4798      	blx	r3

	gpio_set_pin_function(CS_SPI_LTC, GPIO_PIN_FUNCTION_OFF);
    1502:	f04f 31ff 	mov.w	r1, #4294967295
    1506:	203d      	movs	r0, #61	; 0x3d
    1508:	4b3c      	ldr	r3, [pc, #240]	; (15fc <system_init+0x12c>)
    150a:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    150c:	2101      	movs	r1, #1
    150e:	203f      	movs	r0, #63	; 0x3f
    1510:	4b38      	ldr	r3, [pc, #224]	; (15f4 <system_init+0x124>)
    1512:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    1514:	2101      	movs	r1, #1
    1516:	203f      	movs	r0, #63	; 0x3f
    1518:	4b37      	ldr	r3, [pc, #220]	; (15f8 <system_init+0x128>)
    151a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    151c:	f04f 31ff 	mov.w	r1, #4294967295
    1520:	203f      	movs	r0, #63	; 0x3f
    1522:	4b36      	ldr	r3, [pc, #216]	; (15fc <system_init+0x12c>)
    1524:	4798      	blx	r3

	// GPIO on PC00

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    1526:	2101      	movs	r1, #1
    1528:	2040      	movs	r0, #64	; 0x40
    152a:	4b32      	ldr	r3, [pc, #200]	; (15f4 <system_init+0x124>)
    152c:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    152e:	2102      	movs	r1, #2
    1530:	2040      	movs	r0, #64	; 0x40
    1532:	4b31      	ldr	r3, [pc, #196]	; (15f8 <system_init+0x128>)
    1534:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(VBUS_DETECTED, GPIO_PIN_FUNCTION_OFF);
    1536:	f04f 31ff 	mov.w	r1, #4294967295
    153a:	2040      	movs	r0, #64	; 0x40
    153c:	4b2f      	ldr	r3, [pc, #188]	; (15fc <system_init+0x12c>)
    153e:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    1540:	2100      	movs	r1, #0
    1542:	204d      	movs	r0, #77	; 0x4d
    1544:	4b2e      	ldr	r3, [pc, #184]	; (1600 <system_init+0x130>)
    1546:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    1548:	2102      	movs	r1, #2
    154a:	204d      	movs	r0, #77	; 0x4d
    154c:	4b29      	ldr	r3, [pc, #164]	; (15f4 <system_init+0x124>)
    154e:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    1550:	f04f 31ff 	mov.w	r1, #4294967295
    1554:	204d      	movs	r0, #77	; 0x4d
    1556:	4b29      	ldr	r3, [pc, #164]	; (15fc <system_init+0x12c>)
    1558:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    155a:	2101      	movs	r1, #1
    155c:	204e      	movs	r0, #78	; 0x4e
    155e:	4b28      	ldr	r3, [pc, #160]	; (1600 <system_init+0x130>)
    1560:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    1562:	2102      	movs	r1, #2
    1564:	204e      	movs	r0, #78	; 0x4e
    1566:	4b23      	ldr	r3, [pc, #140]	; (15f4 <system_init+0x124>)
    1568:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    156a:	f04f 31ff 	mov.w	r1, #4294967295
    156e:	204e      	movs	r0, #78	; 0x4e
    1570:	4b22      	ldr	r3, [pc, #136]	; (15fc <system_init+0x12c>)
    1572:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    1574:	2100      	movs	r1, #0
    1576:	204f      	movs	r0, #79	; 0x4f
    1578:	4b21      	ldr	r3, [pc, #132]	; (1600 <system_init+0x130>)
    157a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    157c:	2102      	movs	r1, #2
    157e:	204f      	movs	r0, #79	; 0x4f
    1580:	4b1c      	ldr	r3, [pc, #112]	; (15f4 <system_init+0x124>)
    1582:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    1584:	f04f 31ff 	mov.w	r1, #4294967295
    1588:	204f      	movs	r0, #79	; 0x4f
    158a:	4b1c      	ldr	r3, [pc, #112]	; (15fc <system_init+0x12c>)
    158c:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    158e:	2100      	movs	r1, #0
    1590:	2052      	movs	r0, #82	; 0x52
    1592:	4b1b      	ldr	r3, [pc, #108]	; (1600 <system_init+0x130>)
    1594:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    1596:	2102      	movs	r1, #2
    1598:	2052      	movs	r0, #82	; 0x52
    159a:	4b16      	ldr	r3, [pc, #88]	; (15f4 <system_init+0x124>)
    159c:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    159e:	f04f 31ff 	mov.w	r1, #4294967295
    15a2:	2052      	movs	r0, #82	; 0x52
    15a4:	4b15      	ldr	r3, [pc, #84]	; (15fc <system_init+0x12c>)
    15a6:	4798      	blx	r3

	CRC_CALC_init();
    15a8:	4b16      	ldr	r3, [pc, #88]	; (1604 <system_init+0x134>)
    15aa:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    15ac:	4b16      	ldr	r3, [pc, #88]	; (1608 <system_init+0x138>)
    15ae:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    15b0:	4b16      	ldr	r3, [pc, #88]	; (160c <system_init+0x13c>)
    15b2:	4798      	blx	r3

	QSPI_N25Q256_init();
    15b4:	4b16      	ldr	r3, [pc, #88]	; (1610 <system_init+0x140>)
    15b6:	4798      	blx	r3

	DATETIME_CLOCK_init();
    15b8:	4b16      	ldr	r3, [pc, #88]	; (1614 <system_init+0x144>)
    15ba:	4798      	blx	r3

	SPI_TEMP_init();
    15bc:	4b16      	ldr	r3, [pc, #88]	; (1618 <system_init+0x148>)
    15be:	4798      	blx	r3

	I2C_EXPANDER_init();
    15c0:	4b16      	ldr	r3, [pc, #88]	; (161c <system_init+0x14c>)
    15c2:	4798      	blx	r3

	SPI_HI3593_init();
    15c4:	4b16      	ldr	r3, [pc, #88]	; (1620 <system_init+0x150>)
    15c6:	4798      	blx	r3

	I2C_EEPROM_init();
    15c8:	4b16      	ldr	r3, [pc, #88]	; (1624 <system_init+0x154>)
    15ca:	4798      	blx	r3

	TIMER_INTERFACE_init();
    15cc:	4b16      	ldr	r3, [pc, #88]	; (1628 <system_init+0x158>)
    15ce:	4798      	blx	r3
	TIMER_EVENT_init();
    15d0:	4b16      	ldr	r3, [pc, #88]	; (162c <system_init+0x15c>)
    15d2:	4798      	blx	r3
	TIMER_ARINC_init();
    15d4:	4b16      	ldr	r3, [pc, #88]	; (1630 <system_init+0x160>)
    15d6:	4798      	blx	r3
	TIMER_HVAC_init();
    15d8:	4b16      	ldr	r3, [pc, #88]	; (1634 <system_init+0x164>)
    15da:	4798      	blx	r3
	LIVE_PULSE_init();
    15dc:	4b16      	ldr	r3, [pc, #88]	; (1638 <system_init+0x168>)
    15de:	4798      	blx	r3

	CDCUSB_init();
    15e0:	4b16      	ldr	r3, [pc, #88]	; (163c <system_init+0x16c>)
    15e2:	4798      	blx	r3

	WATCHDOG_init();
    15e4:	4b16      	ldr	r3, [pc, #88]	; (1640 <system_init+0x170>)
    15e6:	4798      	blx	r3
	CAN_CCU_init();
    15e8:	4b16      	ldr	r3, [pc, #88]	; (1644 <system_init+0x174>)
    15ea:	4798      	blx	r3
}
    15ec:	bf00      	nop
    15ee:	bd80      	pop	{r7, pc}
    15f0:	00000c39 	.word	0x00000c39
    15f4:	00000bc9 	.word	0x00000bc9
    15f8:	00000b75 	.word	0x00000b75
    15fc:	00000ba9 	.word	0x00000ba9
    1600:	00000c01 	.word	0x00000c01
    1604:	00000c99 	.word	0x00000c99
    1608:	00000cc5 	.word	0x00000cc5
    160c:	00000d69 	.word	0x00000d69
    1610:	00000ea5 	.word	0x00000ea5
    1614:	00000ee9 	.word	0x00000ee9
    1618:	00000fad 	.word	0x00000fad
    161c:	00001045 	.word	0x00001045
    1620:	00001111 	.word	0x00001111
    1624:	000011a9 	.word	0x000011a9
    1628:	000011d5 	.word	0x000011d5
    162c:	0000121d 	.word	0x0000121d
    1630:	00001265 	.word	0x00001265
    1634:	000012ad 	.word	0x000012ad
    1638:	00001341 	.word	0x00001341
    163c:	0000140d 	.word	0x0000140d
    1640:	00001445 	.word	0x00001445
    1644:	0000148d 	.word	0x0000148d

00001648 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    1648:	b580      	push	{r7, lr}
    164a:	b084      	sub	sp, #16
    164c:	af00      	add	r7, sp, #0
    164e:	6078      	str	r0, [r7, #4]
    1650:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    1652:	2300      	movs	r3, #0
    1654:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    1656:	687b      	ldr	r3, [r7, #4]
    1658:	2b00      	cmp	r3, #0
    165a:	bf14      	ite	ne
    165c:	2301      	movne	r3, #1
    165e:	2300      	moveq	r3, #0
    1660:	b2db      	uxtb	r3, r3
    1662:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    1666:	4911      	ldr	r1, [pc, #68]	; (16ac <calendar_init+0x64>)
    1668:	4618      	mov	r0, r3
    166a:	4b11      	ldr	r3, [pc, #68]	; (16b0 <calendar_init+0x68>)
    166c:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    166e:	687b      	ldr	r3, [r7, #4]
    1670:	681a      	ldr	r2, [r3, #0]
    1672:	683b      	ldr	r3, [r7, #0]
    1674:	429a      	cmp	r2, r3
    1676:	d101      	bne.n	167c <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    1678:	2300      	movs	r3, #0
    167a:	e013      	b.n	16a4 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    167c:	687b      	ldr	r3, [r7, #4]
    167e:	681b      	ldr	r3, [r3, #0]
    1680:	2b00      	cmp	r3, #0
    1682:	d002      	beq.n	168a <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    1684:	f06f 0311 	mvn.w	r3, #17
    1688:	e00c      	b.n	16a4 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    168a:	687b      	ldr	r3, [r7, #4]
    168c:	683a      	ldr	r2, [r7, #0]
    168e:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    1690:	687b      	ldr	r3, [r7, #4]
    1692:	4618      	mov	r0, r3
    1694:	4b07      	ldr	r3, [pc, #28]	; (16b4 <calendar_init+0x6c>)
    1696:	4798      	blx	r3
    1698:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    169a:	687b      	ldr	r3, [r7, #4]
    169c:	f240 72b2 	movw	r2, #1970	; 0x7b2
    16a0:	619a      	str	r2, [r3, #24]

	return ret;
    16a2:	68fb      	ldr	r3, [r7, #12]
}
    16a4:	4618      	mov	r0, r3
    16a6:	3710      	adds	r7, #16
    16a8:	46bd      	mov	sp, r7
    16aa:	bd80      	pop	{r7, pc}
    16ac:	00012eec 	.word	0x00012eec
    16b0:	00002f09 	.word	0x00002f09
    16b4:	00005685 	.word	0x00005685

000016b8 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    16b8:	b580      	push	{r7, lr}
    16ba:	b084      	sub	sp, #16
    16bc:	af00      	add	r7, sp, #0
    16be:	6078      	str	r0, [r7, #4]
    16c0:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    16c2:	687b      	ldr	r3, [r7, #4]
    16c4:	2b00      	cmp	r3, #0
    16c6:	d004      	beq.n	16d2 <can_async_init+0x1a>
    16c8:	683b      	ldr	r3, [r7, #0]
    16ca:	2b00      	cmp	r3, #0
    16cc:	d001      	beq.n	16d2 <can_async_init+0x1a>
    16ce:	2301      	movs	r3, #1
    16d0:	e000      	b.n	16d4 <can_async_init+0x1c>
    16d2:	2300      	movs	r3, #0
    16d4:	f003 0301 	and.w	r3, r3, #1
    16d8:	b2db      	uxtb	r3, r3
    16da:	2241      	movs	r2, #65	; 0x41
    16dc:	490e      	ldr	r1, [pc, #56]	; (1718 <can_async_init+0x60>)
    16de:	4618      	mov	r0, r3
    16e0:	4b0e      	ldr	r3, [pc, #56]	; (171c <can_async_init+0x64>)
    16e2:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    16e4:	687b      	ldr	r3, [r7, #4]
    16e6:	6839      	ldr	r1, [r7, #0]
    16e8:	4618      	mov	r0, r3
    16ea:	4b0d      	ldr	r3, [pc, #52]	; (1720 <can_async_init+0x68>)
    16ec:	4798      	blx	r3
    16ee:	60f8      	str	r0, [r7, #12]
	if (rc) {
    16f0:	68fb      	ldr	r3, [r7, #12]
    16f2:	2b00      	cmp	r3, #0
    16f4:	d001      	beq.n	16fa <can_async_init+0x42>
		return rc;
    16f6:	68fb      	ldr	r3, [r7, #12]
    16f8:	e009      	b.n	170e <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    16fa:	687b      	ldr	r3, [r7, #4]
    16fc:	4a09      	ldr	r2, [pc, #36]	; (1724 <can_async_init+0x6c>)
    16fe:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    1700:	687b      	ldr	r3, [r7, #4]
    1702:	4a09      	ldr	r2, [pc, #36]	; (1728 <can_async_init+0x70>)
    1704:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    1706:	687b      	ldr	r3, [r7, #4]
    1708:	4a08      	ldr	r2, [pc, #32]	; (172c <can_async_init+0x74>)
    170a:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    170c:	2300      	movs	r3, #0
}
    170e:	4618      	mov	r0, r3
    1710:	3710      	adds	r7, #16
    1712:	46bd      	mov	sp, r7
    1714:	bd80      	pop	{r7, pc}
    1716:	bf00      	nop
    1718:	00012f08 	.word	0x00012f08
    171c:	00002f09 	.word	0x00002f09
    1720:	00003609 	.word	0x00003609
    1724:	00001909 	.word	0x00001909
    1728:	0000192d 	.word	0x0000192d
    172c:	00001951 	.word	0x00001951

00001730 <can_async_enable>:

/**
 * \brief Enable CAN
 */
int32_t can_async_enable(struct can_async_descriptor *const descr)
{
    1730:	b580      	push	{r7, lr}
    1732:	b082      	sub	sp, #8
    1734:	af00      	add	r7, sp, #0
    1736:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    1738:	687b      	ldr	r3, [r7, #4]
    173a:	2b00      	cmp	r3, #0
    173c:	bf14      	ite	ne
    173e:	2301      	movne	r3, #1
    1740:	2300      	moveq	r3, #0
    1742:	b2db      	uxtb	r3, r3
    1744:	225c      	movs	r2, #92	; 0x5c
    1746:	4906      	ldr	r1, [pc, #24]	; (1760 <can_async_enable+0x30>)
    1748:	4618      	mov	r0, r3
    174a:	4b06      	ldr	r3, [pc, #24]	; (1764 <can_async_enable+0x34>)
    174c:	4798      	blx	r3
	return _can_async_enable(&descr->dev);
    174e:	687b      	ldr	r3, [r7, #4]
    1750:	4618      	mov	r0, r3
    1752:	4b05      	ldr	r3, [pc, #20]	; (1768 <can_async_enable+0x38>)
    1754:	4798      	blx	r3
    1756:	4603      	mov	r3, r0
}
    1758:	4618      	mov	r0, r3
    175a:	3708      	adds	r7, #8
    175c:	46bd      	mov	sp, r7
    175e:	bd80      	pop	{r7, pc}
    1760:	00012f08 	.word	0x00012f08
    1764:	00002f09 	.word	0x00002f09
    1768:	000037f5 	.word	0x000037f5

0000176c <can_async_disable>:

/**
 * \brief Disable CAN
 */
int32_t can_async_disable(struct can_async_descriptor *const descr)
{
    176c:	b580      	push	{r7, lr}
    176e:	b082      	sub	sp, #8
    1770:	af00      	add	r7, sp, #0
    1772:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    1774:	687b      	ldr	r3, [r7, #4]
    1776:	2b00      	cmp	r3, #0
    1778:	bf14      	ite	ne
    177a:	2301      	movne	r3, #1
    177c:	2300      	moveq	r3, #0
    177e:	b2db      	uxtb	r3, r3
    1780:	2265      	movs	r2, #101	; 0x65
    1782:	4906      	ldr	r1, [pc, #24]	; (179c <can_async_disable+0x30>)
    1784:	4618      	mov	r0, r3
    1786:	4b06      	ldr	r3, [pc, #24]	; (17a0 <can_async_disable+0x34>)
    1788:	4798      	blx	r3
	return _can_async_disable(&descr->dev);
    178a:	687b      	ldr	r3, [r7, #4]
    178c:	4618      	mov	r0, r3
    178e:	4b05      	ldr	r3, [pc, #20]	; (17a4 <can_async_disable+0x38>)
    1790:	4798      	blx	r3
    1792:	4603      	mov	r3, r0
}
    1794:	4618      	mov	r0, r3
    1796:	3708      	adds	r7, #8
    1798:	46bd      	mov	sp, r7
    179a:	bd80      	pop	{r7, pc}
    179c:	00012f08 	.word	0x00012f08
    17a0:	00002f09 	.word	0x00002f09
    17a4:	00003815 	.word	0x00003815

000017a8 <can_async_read>:

/**
 * \brief Read a CAN message
 */
int32_t can_async_read(struct can_async_descriptor *const descr, struct can_message *msg)
{
    17a8:	b580      	push	{r7, lr}
    17aa:	b082      	sub	sp, #8
    17ac:	af00      	add	r7, sp, #0
    17ae:	6078      	str	r0, [r7, #4]
    17b0:	6039      	str	r1, [r7, #0]
	ASSERT(descr && msg);
    17b2:	687b      	ldr	r3, [r7, #4]
    17b4:	2b00      	cmp	r3, #0
    17b6:	d004      	beq.n	17c2 <can_async_read+0x1a>
    17b8:	683b      	ldr	r3, [r7, #0]
    17ba:	2b00      	cmp	r3, #0
    17bc:	d001      	beq.n	17c2 <can_async_read+0x1a>
    17be:	2301      	movs	r3, #1
    17c0:	e000      	b.n	17c4 <can_async_read+0x1c>
    17c2:	2300      	movs	r3, #0
    17c4:	f003 0301 	and.w	r3, r3, #1
    17c8:	b2db      	uxtb	r3, r3
    17ca:	226e      	movs	r2, #110	; 0x6e
    17cc:	4906      	ldr	r1, [pc, #24]	; (17e8 <can_async_read+0x40>)
    17ce:	4618      	mov	r0, r3
    17d0:	4b06      	ldr	r3, [pc, #24]	; (17ec <can_async_read+0x44>)
    17d2:	4798      	blx	r3
	return _can_async_read(&descr->dev, msg);
    17d4:	687b      	ldr	r3, [r7, #4]
    17d6:	6839      	ldr	r1, [r7, #0]
    17d8:	4618      	mov	r0, r3
    17da:	4b05      	ldr	r3, [pc, #20]	; (17f0 <can_async_read+0x48>)
    17dc:	4798      	blx	r3
    17de:	4603      	mov	r3, r0
}
    17e0:	4618      	mov	r0, r3
    17e2:	3708      	adds	r7, #8
    17e4:	46bd      	mov	sp, r7
    17e6:	bd80      	pop	{r7, pc}
    17e8:	00012f08 	.word	0x00012f08
    17ec:	00002f09 	.word	0x00002f09
    17f0:	00003835 	.word	0x00003835

000017f4 <can_async_write>:

/**
 * \brief Write a CAN message
 */
int32_t can_async_write(struct can_async_descriptor *const descr, struct can_message *msg)
{
    17f4:	b580      	push	{r7, lr}
    17f6:	b082      	sub	sp, #8
    17f8:	af00      	add	r7, sp, #0
    17fa:	6078      	str	r0, [r7, #4]
    17fc:	6039      	str	r1, [r7, #0]
	ASSERT(descr && msg);
    17fe:	687b      	ldr	r3, [r7, #4]
    1800:	2b00      	cmp	r3, #0
    1802:	d004      	beq.n	180e <can_async_write+0x1a>
    1804:	683b      	ldr	r3, [r7, #0]
    1806:	2b00      	cmp	r3, #0
    1808:	d001      	beq.n	180e <can_async_write+0x1a>
    180a:	2301      	movs	r3, #1
    180c:	e000      	b.n	1810 <can_async_write+0x1c>
    180e:	2300      	movs	r3, #0
    1810:	f003 0301 	and.w	r3, r3, #1
    1814:	b2db      	uxtb	r3, r3
    1816:	2277      	movs	r2, #119	; 0x77
    1818:	4906      	ldr	r1, [pc, #24]	; (1834 <can_async_write+0x40>)
    181a:	4618      	mov	r0, r3
    181c:	4b06      	ldr	r3, [pc, #24]	; (1838 <can_async_write+0x44>)
    181e:	4798      	blx	r3
	return _can_async_write(&descr->dev, msg);
    1820:	687b      	ldr	r3, [r7, #4]
    1822:	6839      	ldr	r1, [r7, #0]
    1824:	4618      	mov	r0, r3
    1826:	4b05      	ldr	r3, [pc, #20]	; (183c <can_async_write+0x48>)
    1828:	4798      	blx	r3
    182a:	4603      	mov	r3, r0
}
    182c:	4618      	mov	r0, r3
    182e:	3708      	adds	r7, #8
    1830:	46bd      	mov	sp, r7
    1832:	bd80      	pop	{r7, pc}
    1834:	00012f08 	.word	0x00012f08
    1838:	00002f09 	.word	0x00002f09
    183c:	00003945 	.word	0x00003945

00001840 <can_async_register_callback>:
/**
 * \brief Register CAN callback function to interrupt
 */
int32_t can_async_register_callback(struct can_async_descriptor *const descr, enum can_async_callback_type type,
                                    FUNC_PTR cb)
{
    1840:	b580      	push	{r7, lr}
    1842:	b084      	sub	sp, #16
    1844:	af00      	add	r7, sp, #0
    1846:	60f8      	str	r0, [r7, #12]
    1848:	460b      	mov	r3, r1
    184a:	607a      	str	r2, [r7, #4]
    184c:	72fb      	strb	r3, [r7, #11]
	ASSERT(descr);
    184e:	68fb      	ldr	r3, [r7, #12]
    1850:	2b00      	cmp	r3, #0
    1852:	bf14      	ite	ne
    1854:	2301      	movne	r3, #1
    1856:	2300      	moveq	r3, #0
    1858:	b2db      	uxtb	r3, r3
    185a:	2281      	movs	r2, #129	; 0x81
    185c:	4914      	ldr	r1, [pc, #80]	; (18b0 <can_async_register_callback+0x70>)
    185e:	4618      	mov	r0, r3
    1860:	4b14      	ldr	r3, [pc, #80]	; (18b4 <can_async_register_callback+0x74>)
    1862:	4798      	blx	r3

	switch (type) {
    1864:	7afb      	ldrb	r3, [r7, #11]
    1866:	2b01      	cmp	r3, #1
    1868:	d007      	beq.n	187a <can_async_register_callback+0x3a>
    186a:	2b02      	cmp	r3, #2
    186c:	d009      	beq.n	1882 <can_async_register_callback+0x42>
    186e:	2b00      	cmp	r3, #0
    1870:	d10b      	bne.n	188a <can_async_register_callback+0x4a>
	case CAN_ASYNC_RX_CB:
		descr->cb.rx_done = (cb != NULL) ? (can_cb_t)cb : NULL;
    1872:	68fb      	ldr	r3, [r7, #12]
    1874:	687a      	ldr	r2, [r7, #4]
    1876:	621a      	str	r2, [r3, #32]
		break;
    1878:	e00a      	b.n	1890 <can_async_register_callback+0x50>
	case CAN_ASYNC_TX_CB:
		descr->cb.tx_done = (cb != NULL) ? (can_cb_t)cb : NULL;
    187a:	68fb      	ldr	r3, [r7, #12]
    187c:	687a      	ldr	r2, [r7, #4]
    187e:	61da      	str	r2, [r3, #28]
		break;
    1880:	e006      	b.n	1890 <can_async_register_callback+0x50>
	case CAN_ASYNC_IRQ_CB:
		descr->cb.irq_handler
		    = (cb != NULL) ? (void (*)(struct can_async_descriptor *const, enum can_async_interrupt_type))cb : NULL;
    1882:	68fb      	ldr	r3, [r7, #12]
    1884:	687a      	ldr	r2, [r7, #4]
    1886:	625a      	str	r2, [r3, #36]	; 0x24
		break;
    1888:	e002      	b.n	1890 <can_async_register_callback+0x50>
	default:
		return ERR_INVALID_ARG;
    188a:	f06f 030c 	mvn.w	r3, #12
    188e:	e00b      	b.n	18a8 <can_async_register_callback+0x68>
	}

	_can_async_set_irq_state(&descr->dev, type, NULL != cb);
    1890:	68f8      	ldr	r0, [r7, #12]
    1892:	687b      	ldr	r3, [r7, #4]
    1894:	2b00      	cmp	r3, #0
    1896:	bf14      	ite	ne
    1898:	2301      	movne	r3, #1
    189a:	2300      	moveq	r3, #0
    189c:	b2da      	uxtb	r2, r3
    189e:	7afb      	ldrb	r3, [r7, #11]
    18a0:	4619      	mov	r1, r3
    18a2:	4b05      	ldr	r3, [pc, #20]	; (18b8 <can_async_register_callback+0x78>)
    18a4:	4798      	blx	r3

	return ERR_NONE;
    18a6:	2300      	movs	r3, #0
}
    18a8:	4618      	mov	r0, r3
    18aa:	3710      	adds	r7, #16
    18ac:	46bd      	mov	sp, r7
    18ae:	bd80      	pop	{r7, pc}
    18b0:	00012f08 	.word	0x00012f08
    18b4:	00002f09 	.word	0x00002f09
    18b8:	00003b01 	.word	0x00003b01

000018bc <can_async_set_filter>:
/**
 * \brief Set CAN filter
 */
int32_t can_async_set_filter(struct can_async_descriptor *const descr, uint8_t index, enum can_format fmt,
                             struct can_filter *filter)
{
    18bc:	b590      	push	{r4, r7, lr}
    18be:	b085      	sub	sp, #20
    18c0:	af00      	add	r7, sp, #0
    18c2:	60f8      	str	r0, [r7, #12]
    18c4:	607b      	str	r3, [r7, #4]
    18c6:	460b      	mov	r3, r1
    18c8:	72fb      	strb	r3, [r7, #11]
    18ca:	4613      	mov	r3, r2
    18cc:	72bb      	strb	r3, [r7, #10]
	ASSERT(descr);
    18ce:	68fb      	ldr	r3, [r7, #12]
    18d0:	2b00      	cmp	r3, #0
    18d2:	bf14      	ite	ne
    18d4:	2301      	movne	r3, #1
    18d6:	2300      	moveq	r3, #0
    18d8:	b2db      	uxtb	r3, r3
    18da:	22b8      	movs	r2, #184	; 0xb8
    18dc:	4907      	ldr	r1, [pc, #28]	; (18fc <can_async_set_filter+0x40>)
    18de:	4618      	mov	r0, r3
    18e0:	4b07      	ldr	r3, [pc, #28]	; (1900 <can_async_set_filter+0x44>)
    18e2:	4798      	blx	r3
	return _can_async_set_filter(&descr->dev, index, fmt, filter);
    18e4:	68f8      	ldr	r0, [r7, #12]
    18e6:	7aba      	ldrb	r2, [r7, #10]
    18e8:	7af9      	ldrb	r1, [r7, #11]
    18ea:	687b      	ldr	r3, [r7, #4]
    18ec:	4c05      	ldr	r4, [pc, #20]	; (1904 <can_async_set_filter+0x48>)
    18ee:	47a0      	blx	r4
    18f0:	4603      	mov	r3, r0
}
    18f2:	4618      	mov	r0, r3
    18f4:	3714      	adds	r7, #20
    18f6:	46bd      	mov	sp, r7
    18f8:	bd90      	pop	{r4, r7, pc}
    18fa:	bf00      	nop
    18fc:	00012f08 	.word	0x00012f08
    1900:	00002f09 	.word	0x00002f09
    1904:	00003b8d 	.word	0x00003b8d

00001908 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    1908:	b580      	push	{r7, lr}
    190a:	b084      	sub	sp, #16
    190c:	af00      	add	r7, sp, #0
    190e:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    1910:	687b      	ldr	r3, [r7, #4]
    1912:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    1914:	68fb      	ldr	r3, [r7, #12]
    1916:	69db      	ldr	r3, [r3, #28]
    1918:	2b00      	cmp	r3, #0
    191a:	d003      	beq.n	1924 <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    191c:	68fb      	ldr	r3, [r7, #12]
    191e:	69db      	ldr	r3, [r3, #28]
    1920:	68f8      	ldr	r0, [r7, #12]
    1922:	4798      	blx	r3
	}
}
    1924:	bf00      	nop
    1926:	3710      	adds	r7, #16
    1928:	46bd      	mov	sp, r7
    192a:	bd80      	pop	{r7, pc}

0000192c <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    192c:	b580      	push	{r7, lr}
    192e:	b084      	sub	sp, #16
    1930:	af00      	add	r7, sp, #0
    1932:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    1934:	687b      	ldr	r3, [r7, #4]
    1936:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    1938:	68fb      	ldr	r3, [r7, #12]
    193a:	6a1b      	ldr	r3, [r3, #32]
    193c:	2b00      	cmp	r3, #0
    193e:	d003      	beq.n	1948 <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    1940:	68fb      	ldr	r3, [r7, #12]
    1942:	6a1b      	ldr	r3, [r3, #32]
    1944:	68f8      	ldr	r0, [r7, #12]
    1946:	4798      	blx	r3
	}
}
    1948:	bf00      	nop
    194a:	3710      	adds	r7, #16
    194c:	46bd      	mov	sp, r7
    194e:	bd80      	pop	{r7, pc}

00001950 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    1950:	b580      	push	{r7, lr}
    1952:	b084      	sub	sp, #16
    1954:	af00      	add	r7, sp, #0
    1956:	6078      	str	r0, [r7, #4]
    1958:	460b      	mov	r3, r1
    195a:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    195c:	687b      	ldr	r3, [r7, #4]
    195e:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    1960:	68fb      	ldr	r3, [r7, #12]
    1962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1964:	2b00      	cmp	r3, #0
    1966:	d005      	beq.n	1974 <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    1968:	68fb      	ldr	r3, [r7, #12]
    196a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    196c:	78fa      	ldrb	r2, [r7, #3]
    196e:	4611      	mov	r1, r2
    1970:	68f8      	ldr	r0, [r7, #12]
    1972:	4798      	blx	r3
	}
}
    1974:	bf00      	nop
    1976:	3710      	adds	r7, #16
    1978:	46bd      	mov	sp, r7
    197a:	bd80      	pop	{r7, pc}

0000197c <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    197c:	b580      	push	{r7, lr}
    197e:	b082      	sub	sp, #8
    1980:	af00      	add	r7, sp, #0
    1982:	6078      	str	r0, [r7, #4]
    1984:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    1986:	687b      	ldr	r3, [r7, #4]
    1988:	2b00      	cmp	r3, #0
    198a:	d004      	beq.n	1996 <crc_sync_init+0x1a>
    198c:	683b      	ldr	r3, [r7, #0]
    198e:	2b00      	cmp	r3, #0
    1990:	d001      	beq.n	1996 <crc_sync_init+0x1a>
    1992:	2301      	movs	r3, #1
    1994:	e000      	b.n	1998 <crc_sync_init+0x1c>
    1996:	2300      	movs	r3, #0
    1998:	f003 0301 	and.w	r3, r3, #1
    199c:	b2db      	uxtb	r3, r3
    199e:	222b      	movs	r2, #43	; 0x2b
    19a0:	4906      	ldr	r1, [pc, #24]	; (19bc <crc_sync_init+0x40>)
    19a2:	4618      	mov	r0, r3
    19a4:	4b06      	ldr	r3, [pc, #24]	; (19c0 <crc_sync_init+0x44>)
    19a6:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    19a8:	687b      	ldr	r3, [r7, #4]
    19aa:	6839      	ldr	r1, [r7, #0]
    19ac:	4618      	mov	r0, r3
    19ae:	4b05      	ldr	r3, [pc, #20]	; (19c4 <crc_sync_init+0x48>)
    19b0:	4798      	blx	r3
    19b2:	4603      	mov	r3, r0
}
    19b4:	4618      	mov	r0, r3
    19b6:	3708      	adds	r7, #8
    19b8:	46bd      	mov	sp, r7
    19ba:	bd80      	pop	{r7, pc}
    19bc:	00012f24 	.word	0x00012f24
    19c0:	00002f09 	.word	0x00002f09
    19c4:	0000410d 	.word	0x0000410d

000019c8 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    19c8:	b590      	push	{r4, r7, lr}
    19ca:	b083      	sub	sp, #12
    19cc:	af00      	add	r7, sp, #0
    19ce:	4603      	mov	r3, r0
    19d0:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    19d2:	4b07      	ldr	r3, [pc, #28]	; (19f0 <delay_us+0x28>)
    19d4:	681c      	ldr	r4, [r3, #0]
    19d6:	88fb      	ldrh	r3, [r7, #6]
    19d8:	4618      	mov	r0, r3
    19da:	4b06      	ldr	r3, [pc, #24]	; (19f4 <delay_us+0x2c>)
    19dc:	4798      	blx	r3
    19de:	4603      	mov	r3, r0
    19e0:	4619      	mov	r1, r3
    19e2:	4620      	mov	r0, r4
    19e4:	4b04      	ldr	r3, [pc, #16]	; (19f8 <delay_us+0x30>)
    19e6:	4798      	blx	r3
}
    19e8:	bf00      	nop
    19ea:	370c      	adds	r7, #12
    19ec:	46bd      	mov	sp, r7
    19ee:	bd90      	pop	{r4, r7, pc}
    19f0:	20001394 	.word	0x20001394
    19f4:	00003e65 	.word	0x00003e65
    19f8:	00003ff9 	.word	0x00003ff9

000019fc <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    19fc:	b590      	push	{r4, r7, lr}
    19fe:	b083      	sub	sp, #12
    1a00:	af00      	add	r7, sp, #0
    1a02:	4603      	mov	r3, r0
    1a04:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    1a06:	4b07      	ldr	r3, [pc, #28]	; (1a24 <delay_ms+0x28>)
    1a08:	681c      	ldr	r4, [r3, #0]
    1a0a:	88fb      	ldrh	r3, [r7, #6]
    1a0c:	4618      	mov	r0, r3
    1a0e:	4b06      	ldr	r3, [pc, #24]	; (1a28 <delay_ms+0x2c>)
    1a10:	4798      	blx	r3
    1a12:	4603      	mov	r3, r0
    1a14:	4619      	mov	r1, r3
    1a16:	4620      	mov	r0, r4
    1a18:	4b04      	ldr	r3, [pc, #16]	; (1a2c <delay_ms+0x30>)
    1a1a:	4798      	blx	r3
}
    1a1c:	bf00      	nop
    1a1e:	370c      	adds	r7, #12
    1a20:	46bd      	mov	sp, r7
    1a22:	bd90      	pop	{r4, r7, pc}
    1a24:	20001394 	.word	0x20001394
    1a28:	00003fd1 	.word	0x00003fd1
    1a2c:	00003ff9 	.word	0x00003ff9

00001a30 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    1a30:	b580      	push	{r7, lr}
    1a32:	af00      	add	r7, sp, #0
	return _event_system_init();
    1a34:	4b02      	ldr	r3, [pc, #8]	; (1a40 <event_system_init+0x10>)
    1a36:	4798      	blx	r3
    1a38:	4603      	mov	r3, r0
}
    1a3a:	4618      	mov	r0, r3
    1a3c:	bd80      	pop	{r7, pc}
    1a3e:	bf00      	nop
    1a40:	00004741 	.word	0x00004741

00001a44 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    1a44:	b580      	push	{r7, lr}
    1a46:	b082      	sub	sp, #8
    1a48:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1a4a:	2300      	movs	r3, #0
    1a4c:	80fb      	strh	r3, [r7, #6]
    1a4e:	e00e      	b.n	1a6e <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    1a50:	88fb      	ldrh	r3, [r7, #6]
    1a52:	4a0c      	ldr	r2, [pc, #48]	; (1a84 <ext_irq_init+0x40>)
    1a54:	00db      	lsls	r3, r3, #3
    1a56:	4413      	add	r3, r2
    1a58:	f04f 32ff 	mov.w	r2, #4294967295
    1a5c:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    1a5e:	88fb      	ldrh	r3, [r7, #6]
    1a60:	4a08      	ldr	r2, [pc, #32]	; (1a84 <ext_irq_init+0x40>)
    1a62:	2100      	movs	r1, #0
    1a64:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1a68:	88fb      	ldrh	r3, [r7, #6]
    1a6a:	3301      	adds	r3, #1
    1a6c:	80fb      	strh	r3, [r7, #6]
    1a6e:	88fb      	ldrh	r3, [r7, #6]
    1a70:	2b03      	cmp	r3, #3
    1a72:	d9ed      	bls.n	1a50 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    1a74:	4804      	ldr	r0, [pc, #16]	; (1a88 <ext_irq_init+0x44>)
    1a76:	4b05      	ldr	r3, [pc, #20]	; (1a8c <ext_irq_init+0x48>)
    1a78:	4798      	blx	r3
    1a7a:	4603      	mov	r3, r0
}
    1a7c:	4618      	mov	r0, r3
    1a7e:	3708      	adds	r7, #8
    1a80:	46bd      	mov	sp, r7
    1a82:	bd80      	pop	{r7, pc}
    1a84:	20001398 	.word	0x20001398
    1a88:	00001a91 	.word	0x00001a91
    1a8c:	00004415 	.word	0x00004415

00001a90 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    1a90:	b580      	push	{r7, lr}
    1a92:	b084      	sub	sp, #16
    1a94:	af00      	add	r7, sp, #0
    1a96:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    1a98:	2300      	movs	r3, #0
    1a9a:	73fb      	strb	r3, [r7, #15]
    1a9c:	2304      	movs	r3, #4
    1a9e:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    1aa0:	e02a      	b.n	1af8 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    1aa2:	7bba      	ldrb	r2, [r7, #14]
    1aa4:	7bfb      	ldrb	r3, [r7, #15]
    1aa6:	4413      	add	r3, r2
    1aa8:	105b      	asrs	r3, r3, #1
    1aaa:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    1aac:	7b7b      	ldrb	r3, [r7, #13]
    1aae:	2b03      	cmp	r3, #3
    1ab0:	d827      	bhi.n	1b02 <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    1ab2:	7b7b      	ldrb	r3, [r7, #13]
    1ab4:	4a16      	ldr	r2, [pc, #88]	; (1b10 <process_ext_irq+0x80>)
    1ab6:	00db      	lsls	r3, r3, #3
    1ab8:	4413      	add	r3, r2
    1aba:	685a      	ldr	r2, [r3, #4]
    1abc:	687b      	ldr	r3, [r7, #4]
    1abe:	429a      	cmp	r2, r3
    1ac0:	d10b      	bne.n	1ada <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    1ac2:	7b7b      	ldrb	r3, [r7, #13]
    1ac4:	4a12      	ldr	r2, [pc, #72]	; (1b10 <process_ext_irq+0x80>)
    1ac6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1aca:	2b00      	cmp	r3, #0
    1acc:	d01b      	beq.n	1b06 <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    1ace:	7b7b      	ldrb	r3, [r7, #13]
    1ad0:	4a0f      	ldr	r2, [pc, #60]	; (1b10 <process_ext_irq+0x80>)
    1ad2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1ad6:	4798      	blx	r3
			}
			return;
    1ad8:	e015      	b.n	1b06 <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    1ada:	7b7b      	ldrb	r3, [r7, #13]
    1adc:	4a0c      	ldr	r2, [pc, #48]	; (1b10 <process_ext_irq+0x80>)
    1ade:	00db      	lsls	r3, r3, #3
    1ae0:	4413      	add	r3, r2
    1ae2:	685a      	ldr	r2, [r3, #4]
    1ae4:	687b      	ldr	r3, [r7, #4]
    1ae6:	429a      	cmp	r2, r3
    1ae8:	d203      	bcs.n	1af2 <process_ext_irq+0x62>
			lower = middle + 1;
    1aea:	7b7b      	ldrb	r3, [r7, #13]
    1aec:	3301      	adds	r3, #1
    1aee:	73fb      	strb	r3, [r7, #15]
    1af0:	e002      	b.n	1af8 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    1af2:	7b7b      	ldrb	r3, [r7, #13]
    1af4:	3b01      	subs	r3, #1
    1af6:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    1af8:	7bba      	ldrb	r2, [r7, #14]
    1afa:	7bfb      	ldrb	r3, [r7, #15]
    1afc:	429a      	cmp	r2, r3
    1afe:	d2d0      	bcs.n	1aa2 <process_ext_irq+0x12>
    1b00:	e002      	b.n	1b08 <process_ext_irq+0x78>
			return;
    1b02:	bf00      	nop
    1b04:	e000      	b.n	1b08 <process_ext_irq+0x78>
			return;
    1b06:	bf00      	nop
		}
	}
}
    1b08:	3710      	adds	r7, #16
    1b0a:	46bd      	mov	sp, r7
    1b0c:	bd80      	pop	{r7, pc}
    1b0e:	bf00      	nop
    1b10:	20001398 	.word	0x20001398

00001b14 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    1b14:	b580      	push	{r7, lr}
    1b16:	b084      	sub	sp, #16
    1b18:	af00      	add	r7, sp, #0
    1b1a:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    1b1c:	687b      	ldr	r3, [r7, #4]
    1b1e:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	885b      	ldrh	r3, [r3, #2]
    1b24:	b29b      	uxth	r3, r3
    1b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
    1b2a:	2b00      	cmp	r3, #0
    1b2c:	d107      	bne.n	1b3e <i2c_tx_complete+0x2a>
		if (i2c->i2c_cb.tx_complete) {
    1b2e:	68fb      	ldr	r3, [r7, #12]
    1b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1b32:	2b00      	cmp	r3, #0
    1b34:	d003      	beq.n	1b3e <i2c_tx_complete+0x2a>
			i2c->i2c_cb.tx_complete(i2c);
    1b36:	68fb      	ldr	r3, [r7, #12]
    1b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1b3a:	68f8      	ldr	r0, [r7, #12]
    1b3c:	4798      	blx	r3
		}
	}
}
    1b3e:	bf00      	nop
    1b40:	3710      	adds	r7, #16
    1b42:	46bd      	mov	sp, r7
    1b44:	bd80      	pop	{r7, pc}

00001b46 <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    1b46:	b580      	push	{r7, lr}
    1b48:	b084      	sub	sp, #16
    1b4a:	af00      	add	r7, sp, #0
    1b4c:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    1b4e:	687b      	ldr	r3, [r7, #4]
    1b50:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    1b52:	687b      	ldr	r3, [r7, #4]
    1b54:	885b      	ldrh	r3, [r3, #2]
    1b56:	b29b      	uxth	r3, r3
    1b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
    1b5c:	2b00      	cmp	r3, #0
    1b5e:	d107      	bne.n	1b70 <i2c_rx_complete+0x2a>
		if (i2c->i2c_cb.rx_complete) {
    1b60:	68fb      	ldr	r3, [r7, #12]
    1b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1b64:	2b00      	cmp	r3, #0
    1b66:	d003      	beq.n	1b70 <i2c_rx_complete+0x2a>
			i2c->i2c_cb.rx_complete(i2c);
    1b68:	68fb      	ldr	r3, [r7, #12]
    1b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1b6c:	68f8      	ldr	r0, [r7, #12]
    1b6e:	4798      	blx	r3
		}
	}
}
    1b70:	bf00      	nop
    1b72:	3710      	adds	r7, #16
    1b74:	46bd      	mov	sp, r7
    1b76:	bd80      	pop	{r7, pc}

00001b78 <i2c_error>:

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    1b78:	b580      	push	{r7, lr}
    1b7a:	b084      	sub	sp, #16
    1b7c:	af00      	add	r7, sp, #0
    1b7e:	6078      	str	r0, [r7, #4]
    1b80:	6039      	str	r1, [r7, #0]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    1b82:	687b      	ldr	r3, [r7, #4]
    1b84:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    1b86:	687b      	ldr	r3, [r7, #4]
    1b88:	885b      	ldrh	r3, [r3, #2]
    1b8a:	b29b      	uxth	r3, r3
    1b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    1b90:	2b00      	cmp	r3, #0
    1b92:	d108      	bne.n	1ba6 <i2c_error+0x2e>
		if (i2c->i2c_cb.error) {
    1b94:	68fb      	ldr	r3, [r7, #12]
    1b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1b98:	2b00      	cmp	r3, #0
    1b9a:	d004      	beq.n	1ba6 <i2c_error+0x2e>
			i2c->i2c_cb.error(i2c, error);
    1b9c:	68fb      	ldr	r3, [r7, #12]
    1b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1ba0:	6839      	ldr	r1, [r7, #0]
    1ba2:	68f8      	ldr	r0, [r7, #12]
    1ba4:	4798      	blx	r3
		}
	}
}
    1ba6:	bf00      	nop
    1ba8:	3710      	adds	r7, #16
    1baa:	46bd      	mov	sp, r7
    1bac:	bd80      	pop	{r7, pc}
	...

00001bb0 <i2c_m_async_read>:

/**
 * \brief Async version of I2C I/O read
 */
static int32_t i2c_m_async_read(struct io_descriptor *const io, uint8_t *buf, const uint16_t n)
{
    1bb0:	b580      	push	{r7, lr}
    1bb2:	b08a      	sub	sp, #40	; 0x28
    1bb4:	af00      	add	r7, sp, #0
    1bb6:	60f8      	str	r0, [r7, #12]
    1bb8:	60b9      	str	r1, [r7, #8]
    1bba:	4613      	mov	r3, r2
    1bbc:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    1bbe:	68fb      	ldr	r3, [r7, #12]
    1bc0:	3b28      	subs	r3, #40	; 0x28
    1bc2:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    1bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1bc6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    1bc8:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    1bca:	88fb      	ldrh	r3, [r7, #6]
    1bcc:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    1bce:	f248 0301 	movw	r3, #32769	; 0x8001
    1bd2:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    1bd4:	68bb      	ldr	r3, [r7, #8]
    1bd6:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    1bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1bda:	f107 0214 	add.w	r2, r7, #20
    1bde:	4611      	mov	r1, r2
    1be0:	4618      	mov	r0, r3
    1be2:	4b06      	ldr	r3, [pc, #24]	; (1bfc <i2c_m_async_read+0x4c>)
    1be4:	4798      	blx	r3
    1be6:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    1be8:	6a3b      	ldr	r3, [r7, #32]
    1bea:	2b00      	cmp	r3, #0
    1bec:	d001      	beq.n	1bf2 <i2c_m_async_read+0x42>
		/* error occurred */
		return ret;
    1bee:	6a3b      	ldr	r3, [r7, #32]
    1bf0:	e000      	b.n	1bf4 <i2c_m_async_read+0x44>
	}

	return (int32_t)n;
    1bf2:	88fb      	ldrh	r3, [r7, #6]
}
    1bf4:	4618      	mov	r0, r3
    1bf6:	3728      	adds	r7, #40	; 0x28
    1bf8:	46bd      	mov	sp, r7
    1bfa:	bd80      	pop	{r7, pc}
    1bfc:	0000652d 	.word	0x0000652d

00001c00 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    1c00:	b580      	push	{r7, lr}
    1c02:	b08a      	sub	sp, #40	; 0x28
    1c04:	af00      	add	r7, sp, #0
    1c06:	60f8      	str	r0, [r7, #12]
    1c08:	60b9      	str	r1, [r7, #8]
    1c0a:	4613      	mov	r3, r2
    1c0c:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    1c0e:	68fb      	ldr	r3, [r7, #12]
    1c10:	3b28      	subs	r3, #40	; 0x28
    1c12:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    1c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1c16:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    1c18:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    1c1a:	88fb      	ldrh	r3, [r7, #6]
    1c1c:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    1c1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    1c22:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    1c24:	68bb      	ldr	r3, [r7, #8]
    1c26:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    1c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1c2a:	f107 0214 	add.w	r2, r7, #20
    1c2e:	4611      	mov	r1, r2
    1c30:	4618      	mov	r0, r3
    1c32:	4b06      	ldr	r3, [pc, #24]	; (1c4c <i2c_m_async_write+0x4c>)
    1c34:	4798      	blx	r3
    1c36:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    1c38:	6a3b      	ldr	r3, [r7, #32]
    1c3a:	2b00      	cmp	r3, #0
    1c3c:	d001      	beq.n	1c42 <i2c_m_async_write+0x42>
		/* error occurred */
		return ret;
    1c3e:	6a3b      	ldr	r3, [r7, #32]
    1c40:	e000      	b.n	1c44 <i2c_m_async_write+0x44>
	}

	return (int32_t)n;
    1c42:	88fb      	ldrh	r3, [r7, #6]
}
    1c44:	4618      	mov	r0, r3
    1c46:	3728      	adds	r7, #40	; 0x28
    1c48:	46bd      	mov	sp, r7
    1c4a:	bd80      	pop	{r7, pc}
    1c4c:	0000652d 	.word	0x0000652d

00001c50 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    1c50:	b580      	push	{r7, lr}
    1c52:	b084      	sub	sp, #16
    1c54:	af00      	add	r7, sp, #0
    1c56:	6078      	str	r0, [r7, #4]
    1c58:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    1c5a:	687b      	ldr	r3, [r7, #4]
    1c5c:	2b00      	cmp	r3, #0
    1c5e:	bf14      	ite	ne
    1c60:	2301      	movne	r3, #1
    1c62:	2300      	moveq	r3, #0
    1c64:	b2db      	uxtb	r3, r3
    1c66:	2289      	movs	r2, #137	; 0x89
    1c68:	4915      	ldr	r1, [pc, #84]	; (1cc0 <i2c_m_async_init+0x70>)
    1c6a:	4618      	mov	r0, r3
    1c6c:	4b15      	ldr	r3, [pc, #84]	; (1cc4 <i2c_m_async_init+0x74>)
    1c6e:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	6839      	ldr	r1, [r7, #0]
    1c74:	4618      	mov	r0, r3
    1c76:	4b14      	ldr	r3, [pc, #80]	; (1cc8 <i2c_m_async_init+0x78>)
    1c78:	4798      	blx	r3
    1c7a:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    1c7c:	68fb      	ldr	r3, [r7, #12]
    1c7e:	2b00      	cmp	r3, #0
    1c80:	d001      	beq.n	1c86 <i2c_m_async_init+0x36>
		return init_status;
    1c82:	68fb      	ldr	r3, [r7, #12]
    1c84:	e018      	b.n	1cb8 <i2c_m_async_init+0x68>
	}
	/* Init I/O */
	i2c->io.read  = i2c_m_async_read;
    1c86:	687b      	ldr	r3, [r7, #4]
    1c88:	4a10      	ldr	r2, [pc, #64]	; (1ccc <i2c_m_async_init+0x7c>)
    1c8a:	62da      	str	r2, [r3, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    1c8c:	687b      	ldr	r3, [r7, #4]
    1c8e:	4a10      	ldr	r2, [pc, #64]	; (1cd0 <i2c_m_async_init+0x80>)
    1c90:	629a      	str	r2, [r3, #40]	; 0x28

	/* Init callbacks */
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    1c92:	687b      	ldr	r3, [r7, #4]
    1c94:	4a0f      	ldr	r2, [pc, #60]	; (1cd4 <i2c_m_async_init+0x84>)
    1c96:	2101      	movs	r1, #1
    1c98:	4618      	mov	r0, r3
    1c9a:	4b0f      	ldr	r3, [pc, #60]	; (1cd8 <i2c_m_async_init+0x88>)
    1c9c:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    1c9e:	687b      	ldr	r3, [r7, #4]
    1ca0:	4a0e      	ldr	r2, [pc, #56]	; (1cdc <i2c_m_async_init+0x8c>)
    1ca2:	2102      	movs	r1, #2
    1ca4:	4618      	mov	r0, r3
    1ca6:	4b0c      	ldr	r3, [pc, #48]	; (1cd8 <i2c_m_async_init+0x88>)
    1ca8:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    1caa:	687b      	ldr	r3, [r7, #4]
    1cac:	4a0c      	ldr	r2, [pc, #48]	; (1ce0 <i2c_m_async_init+0x90>)
    1cae:	2100      	movs	r1, #0
    1cb0:	4618      	mov	r0, r3
    1cb2:	4b09      	ldr	r3, [pc, #36]	; (1cd8 <i2c_m_async_init+0x88>)
    1cb4:	4798      	blx	r3

	return ERR_NONE;
    1cb6:	2300      	movs	r3, #0
}
    1cb8:	4618      	mov	r0, r3
    1cba:	3710      	adds	r7, #16
    1cbc:	46bd      	mov	sp, r7
    1cbe:	bd80      	pop	{r7, pc}
    1cc0:	00012f40 	.word	0x00012f40
    1cc4:	00002f09 	.word	0x00002f09
    1cc8:	0000637d 	.word	0x0000637d
    1ccc:	00001bb1 	.word	0x00001bb1
    1cd0:	00001c01 	.word	0x00001c01
    1cd4:	00001b15 	.word	0x00001b15
    1cd8:	00006601 	.word	0x00006601
    1cdc:	00001b47 	.word	0x00001b47
    1ce0:	00001b79 	.word	0x00001b79

00001ce4 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    1ce4:	b580      	push	{r7, lr}
    1ce6:	b084      	sub	sp, #16
    1ce8:	af00      	add	r7, sp, #0
    1cea:	60f8      	str	r0, [r7, #12]
    1cec:	60b9      	str	r1, [r7, #8]
    1cee:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    1cf0:	68fb      	ldr	r3, [r7, #12]
    1cf2:	2b00      	cmp	r3, #0
    1cf4:	d004      	beq.n	1d00 <pwm_init+0x1c>
    1cf6:	68bb      	ldr	r3, [r7, #8]
    1cf8:	2b00      	cmp	r3, #0
    1cfa:	d001      	beq.n	1d00 <pwm_init+0x1c>
    1cfc:	2301      	movs	r3, #1
    1cfe:	e000      	b.n	1d02 <pwm_init+0x1e>
    1d00:	2300      	movs	r3, #0
    1d02:	f003 0301 	and.w	r3, r3, #1
    1d06:	b2db      	uxtb	r3, r3
    1d08:	2233      	movs	r2, #51	; 0x33
    1d0a:	490a      	ldr	r1, [pc, #40]	; (1d34 <pwm_init+0x50>)
    1d0c:	4618      	mov	r0, r3
    1d0e:	4b0a      	ldr	r3, [pc, #40]	; (1d38 <pwm_init+0x54>)
    1d10:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    1d12:	68fb      	ldr	r3, [r7, #12]
    1d14:	68b9      	ldr	r1, [r7, #8]
    1d16:	4618      	mov	r0, r3
    1d18:	4b08      	ldr	r3, [pc, #32]	; (1d3c <pwm_init+0x58>)
    1d1a:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    1d1c:	68fb      	ldr	r3, [r7, #12]
    1d1e:	4a08      	ldr	r2, [pc, #32]	; (1d40 <pwm_init+0x5c>)
    1d20:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    1d22:	68fb      	ldr	r3, [r7, #12]
    1d24:	4a07      	ldr	r2, [pc, #28]	; (1d44 <pwm_init+0x60>)
    1d26:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    1d28:	2300      	movs	r3, #0
}
    1d2a:	4618      	mov	r0, r3
    1d2c:	3710      	adds	r7, #16
    1d2e:	46bd      	mov	sp, r7
    1d30:	bd80      	pop	{r7, pc}
    1d32:	bf00      	nop
    1d34:	00012f60 	.word	0x00012f60
    1d38:	00002f09 	.word	0x00002f09
    1d3c:	00007751 	.word	0x00007751
    1d40:	00001d49 	.word	0x00001d49
    1d44:	00001d6d 	.word	0x00001d6d

00001d48 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    1d48:	b580      	push	{r7, lr}
    1d4a:	b084      	sub	sp, #16
    1d4c:	af00      	add	r7, sp, #0
    1d4e:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    1d50:	687b      	ldr	r3, [r7, #4]
    1d52:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    1d54:	68fb      	ldr	r3, [r7, #12]
    1d56:	695b      	ldr	r3, [r3, #20]
    1d58:	2b00      	cmp	r3, #0
    1d5a:	d003      	beq.n	1d64 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    1d5c:	68fb      	ldr	r3, [r7, #12]
    1d5e:	695b      	ldr	r3, [r3, #20]
    1d60:	68f8      	ldr	r0, [r7, #12]
    1d62:	4798      	blx	r3
	}
}
    1d64:	bf00      	nop
    1d66:	3710      	adds	r7, #16
    1d68:	46bd      	mov	sp, r7
    1d6a:	bd80      	pop	{r7, pc}

00001d6c <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    1d6c:	b580      	push	{r7, lr}
    1d6e:	b084      	sub	sp, #16
    1d70:	af00      	add	r7, sp, #0
    1d72:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    1d74:	687b      	ldr	r3, [r7, #4]
    1d76:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    1d78:	68fb      	ldr	r3, [r7, #12]
    1d7a:	699b      	ldr	r3, [r3, #24]
    1d7c:	2b00      	cmp	r3, #0
    1d7e:	d003      	beq.n	1d88 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    1d80:	68fb      	ldr	r3, [r7, #12]
    1d82:	699b      	ldr	r3, [r3, #24]
    1d84:	68f8      	ldr	r0, [r7, #12]
    1d86:	4798      	blx	r3
	}
}
    1d88:	bf00      	nop
    1d8a:	3710      	adds	r7, #16
    1d8c:	46bd      	mov	sp, r7
    1d8e:	bd80      	pop	{r7, pc}

00001d90 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    1d90:	b580      	push	{r7, lr}
    1d92:	b082      	sub	sp, #8
    1d94:	af00      	add	r7, sp, #0
    1d96:	6078      	str	r0, [r7, #4]
    1d98:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    1d9a:	687b      	ldr	r3, [r7, #4]
    1d9c:	2b00      	cmp	r3, #0
    1d9e:	d004      	beq.n	1daa <qspi_sync_init+0x1a>
    1da0:	683b      	ldr	r3, [r7, #0]
    1da2:	2b00      	cmp	r3, #0
    1da4:	d001      	beq.n	1daa <qspi_sync_init+0x1a>
    1da6:	2301      	movs	r3, #1
    1da8:	e000      	b.n	1dac <qspi_sync_init+0x1c>
    1daa:	2300      	movs	r3, #0
    1dac:	f003 0301 	and.w	r3, r3, #1
    1db0:	b2db      	uxtb	r3, r3
    1db2:	2231      	movs	r2, #49	; 0x31
    1db4:	4906      	ldr	r1, [pc, #24]	; (1dd0 <qspi_sync_init+0x40>)
    1db6:	4618      	mov	r0, r3
    1db8:	4b06      	ldr	r3, [pc, #24]	; (1dd4 <qspi_sync_init+0x44>)
    1dba:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    1dbc:	687b      	ldr	r3, [r7, #4]
    1dbe:	6839      	ldr	r1, [r7, #0]
    1dc0:	4618      	mov	r0, r3
    1dc2:	4b05      	ldr	r3, [pc, #20]	; (1dd8 <qspi_sync_init+0x48>)
    1dc4:	4798      	blx	r3
    1dc6:	4603      	mov	r3, r0
}
    1dc8:	4618      	mov	r0, r3
    1dca:	3708      	adds	r7, #8
    1dcc:	46bd      	mov	sp, r7
    1dce:	bd80      	pop	{r7, pc}
    1dd0:	00012f78 	.word	0x00012f78
    1dd4:	00002f09 	.word	0x00002f09
    1dd8:	000052c1 	.word	0x000052c1

00001ddc <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    1ddc:	b580      	push	{r7, lr}
    1dde:	b082      	sub	sp, #8
    1de0:	af00      	add	r7, sp, #0
    1de2:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    1de4:	687b      	ldr	r3, [r7, #4]
    1de6:	2b00      	cmp	r3, #0
    1de8:	bf14      	ite	ne
    1dea:	2301      	movne	r3, #1
    1dec:	2300      	moveq	r3, #0
    1dee:	b2db      	uxtb	r3, r3
    1df0:	223f      	movs	r2, #63	; 0x3f
    1df2:	4906      	ldr	r1, [pc, #24]	; (1e0c <qspi_sync_enable+0x30>)
    1df4:	4618      	mov	r0, r3
    1df6:	4b06      	ldr	r3, [pc, #24]	; (1e10 <qspi_sync_enable+0x34>)
    1df8:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    1dfa:	687b      	ldr	r3, [r7, #4]
    1dfc:	4618      	mov	r0, r3
    1dfe:	4b05      	ldr	r3, [pc, #20]	; (1e14 <qspi_sync_enable+0x38>)
    1e00:	4798      	blx	r3
    1e02:	4603      	mov	r3, r0
}
    1e04:	4618      	mov	r0, r3
    1e06:	3708      	adds	r7, #8
    1e08:	46bd      	mov	sp, r7
    1e0a:	bd80      	pop	{r7, pc}
    1e0c:	00012f78 	.word	0x00012f78
    1e10:	00002f09 	.word	0x00002f09
    1e14:	00005335 	.word	0x00005335

00001e18 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    1e18:	b580      	push	{r7, lr}
    1e1a:	b082      	sub	sp, #8
    1e1c:	af00      	add	r7, sp, #0
    1e1e:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    1e20:	687b      	ldr	r3, [r7, #4]
    1e22:	2b00      	cmp	r3, #0
    1e24:	bf14      	ite	ne
    1e26:	2301      	movne	r3, #1
    1e28:	2300      	moveq	r3, #0
    1e2a:	b2db      	uxtb	r3, r3
    1e2c:	2246      	movs	r2, #70	; 0x46
    1e2e:	4906      	ldr	r1, [pc, #24]	; (1e48 <qspi_sync_disable+0x30>)
    1e30:	4618      	mov	r0, r3
    1e32:	4b06      	ldr	r3, [pc, #24]	; (1e4c <qspi_sync_disable+0x34>)
    1e34:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    1e36:	687b      	ldr	r3, [r7, #4]
    1e38:	4618      	mov	r0, r3
    1e3a:	4b05      	ldr	r3, [pc, #20]	; (1e50 <qspi_sync_disable+0x38>)
    1e3c:	4798      	blx	r3
    1e3e:	4603      	mov	r3, r0
}
    1e40:	4618      	mov	r0, r3
    1e42:	3708      	adds	r7, #8
    1e44:	46bd      	mov	sp, r7
    1e46:	bd80      	pop	{r7, pc}
    1e48:	00012f78 	.word	0x00012f78
    1e4c:	00002f09 	.word	0x00002f09
    1e50:	00005359 	.word	0x00005359

00001e54 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    1e54:	b580      	push	{r7, lr}
    1e56:	b082      	sub	sp, #8
    1e58:	af00      	add	r7, sp, #0
    1e5a:	6078      	str	r0, [r7, #4]
    1e5c:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    1e5e:	687b      	ldr	r3, [r7, #4]
    1e60:	2b00      	cmp	r3, #0
    1e62:	d004      	beq.n	1e6e <qspi_sync_serial_run_command+0x1a>
    1e64:	683b      	ldr	r3, [r7, #0]
    1e66:	2b00      	cmp	r3, #0
    1e68:	d001      	beq.n	1e6e <qspi_sync_serial_run_command+0x1a>
    1e6a:	2301      	movs	r3, #1
    1e6c:	e000      	b.n	1e70 <qspi_sync_serial_run_command+0x1c>
    1e6e:	2300      	movs	r3, #0
    1e70:	f003 0301 	and.w	r3, r3, #1
    1e74:	b2db      	uxtb	r3, r3
    1e76:	224d      	movs	r2, #77	; 0x4d
    1e78:	4906      	ldr	r1, [pc, #24]	; (1e94 <qspi_sync_serial_run_command+0x40>)
    1e7a:	4618      	mov	r0, r3
    1e7c:	4b06      	ldr	r3, [pc, #24]	; (1e98 <qspi_sync_serial_run_command+0x44>)
    1e7e:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    1e80:	687b      	ldr	r3, [r7, #4]
    1e82:	6839      	ldr	r1, [r7, #0]
    1e84:	4618      	mov	r0, r3
    1e86:	4b05      	ldr	r3, [pc, #20]	; (1e9c <qspi_sync_serial_run_command+0x48>)
    1e88:	4798      	blx	r3
    1e8a:	4603      	mov	r3, r0
}
    1e8c:	4618      	mov	r0, r3
    1e8e:	3708      	adds	r7, #8
    1e90:	46bd      	mov	sp, r7
    1e92:	bd80      	pop	{r7, pc}
    1e94:	00012f78 	.word	0x00012f78
    1e98:	00002f09 	.word	0x00002f09
    1e9c:	000054a5 	.word	0x000054a5

00001ea0 <_spi_dev_tx>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_tx(struct _spi_m_async_dev *dev)
{
    1ea0:	b580      	push	{r7, lr}
    1ea2:	b084      	sub	sp, #16
    1ea4:	af00      	add	r7, sp, #0
    1ea6:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    1ea8:	687b      	ldr	r3, [r7, #4]
    1eaa:	3b04      	subs	r3, #4
    1eac:	60fb      	str	r3, [r7, #12]

	if (!(dev->char_size > 1)) {
    1eae:	687b      	ldr	r3, [r7, #4]
    1eb0:	791b      	ldrb	r3, [r3, #4]
    1eb2:	2b01      	cmp	r3, #1
    1eb4:	d80e      	bhi.n	1ed4 <_spi_dev_tx+0x34>
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    1eb6:	68fb      	ldr	r3, [r7, #12]
    1eb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    1eba:	68fb      	ldr	r3, [r7, #12]
    1ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1ebe:	1c58      	adds	r0, r3, #1
    1ec0:	68f9      	ldr	r1, [r7, #12]
    1ec2:	6448      	str	r0, [r1, #68]	; 0x44
    1ec4:	4413      	add	r3, r2
    1ec6:	781b      	ldrb	r3, [r3, #0]
    1ec8:	b29b      	uxth	r3, r3
    1eca:	4619      	mov	r1, r3
    1ecc:	6878      	ldr	r0, [r7, #4]
    1ece:	4b11      	ldr	r3, [pc, #68]	; (1f14 <_spi_dev_tx+0x74>)
    1ed0:	4798      	blx	r3
    1ed2:	e00d      	b.n	1ef0 <_spi_dev_tx+0x50>
	} else {
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    1ed4:	68fb      	ldr	r3, [r7, #12]
    1ed6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    1ed8:	68fb      	ldr	r3, [r7, #12]
    1eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1edc:	1c58      	adds	r0, r3, #1
    1ede:	68f9      	ldr	r1, [r7, #12]
    1ee0:	6448      	str	r0, [r1, #68]	; 0x44
    1ee2:	005b      	lsls	r3, r3, #1
    1ee4:	4413      	add	r3, r2
    1ee6:	881b      	ldrh	r3, [r3, #0]
    1ee8:	4619      	mov	r1, r3
    1eea:	6878      	ldr	r0, [r7, #4]
    1eec:	4b09      	ldr	r3, [pc, #36]	; (1f14 <_spi_dev_tx+0x74>)
    1eee:	4798      	blx	r3
	}

	if (spi->xfercnt == spi->xfer.size) {
    1ef0:	68fb      	ldr	r3, [r7, #12]
    1ef2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    1ef4:	68fb      	ldr	r3, [r7, #12]
    1ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1ef8:	429a      	cmp	r2, r3
    1efa:	d107      	bne.n	1f0c <_spi_dev_tx+0x6c>
		_spi_m_async_enable_tx(dev, false);
    1efc:	2100      	movs	r1, #0
    1efe:	6878      	ldr	r0, [r7, #4]
    1f00:	4b05      	ldr	r3, [pc, #20]	; (1f18 <_spi_dev_tx+0x78>)
    1f02:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    1f04:	2101      	movs	r1, #1
    1f06:	6878      	ldr	r0, [r7, #4]
    1f08:	4b04      	ldr	r3, [pc, #16]	; (1f1c <_spi_dev_tx+0x7c>)
    1f0a:	4798      	blx	r3
	}
}
    1f0c:	bf00      	nop
    1f0e:	3710      	adds	r7, #16
    1f10:	46bd      	mov	sp, r7
    1f12:	bd80      	pop	{r7, pc}
    1f14:	00007061 	.word	0x00007061
    1f18:	00006f25 	.word	0x00006f25
    1f1c:	00006ff9 	.word	0x00006ff9

00001f20 <_spi_dev_rx>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_rx(struct _spi_m_async_dev *dev)
{
    1f20:	b590      	push	{r4, r7, lr}
    1f22:	b085      	sub	sp, #20
    1f24:	af00      	add	r7, sp, #0
    1f26:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    1f28:	687b      	ldr	r3, [r7, #4]
    1f2a:	3b04      	subs	r3, #4
    1f2c:	60fb      	str	r3, [r7, #12]

	if (spi->xfer.rxbuf) {
    1f2e:	68fb      	ldr	r3, [r7, #12]
    1f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1f32:	2b00      	cmp	r3, #0
    1f34:	d021      	beq.n	1f7a <_spi_dev_rx+0x5a>
		if (!(dev->char_size > 1)) {
    1f36:	687b      	ldr	r3, [r7, #4]
    1f38:	791b      	ldrb	r3, [r3, #4]
    1f3a:	2b01      	cmp	r3, #1
    1f3c:	d80e      	bhi.n	1f5c <_spi_dev_rx+0x3c>
			/* 8-bit or less */
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    1f3e:	68fb      	ldr	r3, [r7, #12]
    1f40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    1f42:	68fb      	ldr	r3, [r7, #12]
    1f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1f46:	1c58      	adds	r0, r3, #1
    1f48:	68f9      	ldr	r1, [r7, #12]
    1f4a:	6448      	str	r0, [r1, #68]	; 0x44
    1f4c:	18d4      	adds	r4, r2, r3
    1f4e:	6878      	ldr	r0, [r7, #4]
    1f50:	4b2e      	ldr	r3, [pc, #184]	; (200c <_spi_dev_rx+0xec>)
    1f52:	4798      	blx	r3
    1f54:	4603      	mov	r3, r0
    1f56:	b2db      	uxtb	r3, r3
    1f58:	7023      	strb	r3, [r4, #0]
    1f5a:	e016      	b.n	1f8a <_spi_dev_rx+0x6a>
		} else {
			/* 9-bit or more */
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    1f5c:	68fb      	ldr	r3, [r7, #12]
    1f5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    1f60:	68fb      	ldr	r3, [r7, #12]
    1f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1f64:	1c58      	adds	r0, r3, #1
    1f66:	68f9      	ldr	r1, [r7, #12]
    1f68:	6448      	str	r0, [r1, #68]	; 0x44
    1f6a:	005b      	lsls	r3, r3, #1
    1f6c:	18d4      	adds	r4, r2, r3
    1f6e:	6878      	ldr	r0, [r7, #4]
    1f70:	4b26      	ldr	r3, [pc, #152]	; (200c <_spi_dev_rx+0xec>)
    1f72:	4798      	blx	r3
    1f74:	4603      	mov	r3, r0
    1f76:	8023      	strh	r3, [r4, #0]
    1f78:	e007      	b.n	1f8a <_spi_dev_rx+0x6a>
		}
	} else {
		/* dummy data read if rxbuf is NULL */
		_spi_m_async_read_one(dev);
    1f7a:	6878      	ldr	r0, [r7, #4]
    1f7c:	4b23      	ldr	r3, [pc, #140]	; (200c <_spi_dev_rx+0xec>)
    1f7e:	4798      	blx	r3
		spi->xfercnt++;
    1f80:	68fb      	ldr	r3, [r7, #12]
    1f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1f84:	1c5a      	adds	r2, r3, #1
    1f86:	68fb      	ldr	r3, [r7, #12]
    1f88:	645a      	str	r2, [r3, #68]	; 0x44
	}

	if (spi->xfercnt < spi->xfer.size) {
    1f8a:	68fb      	ldr	r3, [r7, #12]
    1f8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    1f8e:	68fb      	ldr	r3, [r7, #12]
    1f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1f92:	429a      	cmp	r2, r3
    1f94:	d226      	bcs.n	1fe4 <_spi_dev_rx+0xc4>
		if (spi->xfer.txbuf) {
    1f96:	68fb      	ldr	r3, [r7, #12]
    1f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1f9a:	2b00      	cmp	r3, #0
    1f9c:	d01b      	beq.n	1fd6 <_spi_dev_rx+0xb6>
			if (!(dev->char_size > 1)) {
    1f9e:	687b      	ldr	r3, [r7, #4]
    1fa0:	791b      	ldrb	r3, [r3, #4]
    1fa2:	2b01      	cmp	r3, #1
    1fa4:	d80b      	bhi.n	1fbe <_spi_dev_rx+0x9e>
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    1fa6:	68fb      	ldr	r3, [r7, #12]
    1fa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    1faa:	68fb      	ldr	r3, [r7, #12]
    1fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1fae:	4413      	add	r3, r2
    1fb0:	781b      	ldrb	r3, [r3, #0]
    1fb2:	b29b      	uxth	r3, r3
    1fb4:	4619      	mov	r1, r3
    1fb6:	6878      	ldr	r0, [r7, #4]
    1fb8:	4b15      	ldr	r3, [pc, #84]	; (2010 <_spi_dev_rx+0xf0>)
    1fba:	4798      	blx	r3

		if (spi->callbacks.cb_xfer) {
			spi->callbacks.cb_xfer(spi);
		}
	}
}
    1fbc:	e022      	b.n	2004 <_spi_dev_rx+0xe4>
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    1fbe:	68fb      	ldr	r3, [r7, #12]
    1fc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    1fc2:	68fb      	ldr	r3, [r7, #12]
    1fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1fc6:	005b      	lsls	r3, r3, #1
    1fc8:	4413      	add	r3, r2
    1fca:	881b      	ldrh	r3, [r3, #0]
    1fcc:	4619      	mov	r1, r3
    1fce:	6878      	ldr	r0, [r7, #4]
    1fd0:	4b0f      	ldr	r3, [pc, #60]	; (2010 <_spi_dev_rx+0xf0>)
    1fd2:	4798      	blx	r3
}
    1fd4:	e016      	b.n	2004 <_spi_dev_rx+0xe4>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    1fd6:	687b      	ldr	r3, [r7, #4]
    1fd8:	88db      	ldrh	r3, [r3, #6]
    1fda:	4619      	mov	r1, r3
    1fdc:	6878      	ldr	r0, [r7, #4]
    1fde:	4b0c      	ldr	r3, [pc, #48]	; (2010 <_spi_dev_rx+0xf0>)
    1fe0:	4798      	blx	r3
}
    1fe2:	e00f      	b.n	2004 <_spi_dev_rx+0xe4>
		_spi_m_async_enable_rx(dev, false);
    1fe4:	2100      	movs	r1, #0
    1fe6:	6878      	ldr	r0, [r7, #4]
    1fe8:	4b0a      	ldr	r3, [pc, #40]	; (2014 <_spi_dev_rx+0xf4>)
    1fea:	4798      	blx	r3
		spi->stat = 0;
    1fec:	68fb      	ldr	r3, [r7, #12]
    1fee:	2200      	movs	r2, #0
    1ff0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		if (spi->callbacks.cb_xfer) {
    1ff4:	68fb      	ldr	r3, [r7, #12]
    1ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1ff8:	2b00      	cmp	r3, #0
    1ffa:	d003      	beq.n	2004 <_spi_dev_rx+0xe4>
			spi->callbacks.cb_xfer(spi);
    1ffc:	68fb      	ldr	r3, [r7, #12]
    1ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2000:	68f8      	ldr	r0, [r7, #12]
    2002:	4798      	blx	r3
}
    2004:	bf00      	nop
    2006:	3714      	adds	r7, #20
    2008:	46bd      	mov	sp, r7
    200a:	bd90      	pop	{r4, r7, pc}
    200c:	000070b9 	.word	0x000070b9
    2010:	00007061 	.word	0x00007061
    2014:	00006f89 	.word	0x00006f89

00002018 <_spi_dev_complete>:
/**
 *  \brief Callback for complete
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_complete(struct _spi_m_async_dev *dev)
{
    2018:	b580      	push	{r7, lr}
    201a:	b084      	sub	sp, #16
    201c:	af00      	add	r7, sp, #0
    201e:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    2020:	687b      	ldr	r3, [r7, #4]
    2022:	3b04      	subs	r3, #4
    2024:	60fb      	str	r3, [r7, #12]

	if (spi->xfercnt >= spi->xfer.size) {
    2026:	68fb      	ldr	r3, [r7, #12]
    2028:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    202a:	68fb      	ldr	r3, [r7, #12]
    202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    202e:	429a      	cmp	r2, r3
    2030:	d30f      	bcc.n	2052 <_spi_dev_complete+0x3a>
		_spi_m_async_enable_tx_complete(dev, false);
    2032:	2100      	movs	r1, #0
    2034:	6878      	ldr	r0, [r7, #4]
    2036:	4b09      	ldr	r3, [pc, #36]	; (205c <_spi_dev_complete+0x44>)
    2038:	4798      	blx	r3
		spi->stat = 0;
    203a:	68fb      	ldr	r3, [r7, #12]
    203c:	2200      	movs	r2, #0
    203e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

		if (spi->callbacks.cb_xfer) {
    2042:	68fb      	ldr	r3, [r7, #12]
    2044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2046:	2b00      	cmp	r3, #0
    2048:	d003      	beq.n	2052 <_spi_dev_complete+0x3a>
			spi->callbacks.cb_xfer(spi);
    204a:	68fb      	ldr	r3, [r7, #12]
    204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    204e:	68f8      	ldr	r0, [r7, #12]
    2050:	4798      	blx	r3
		}
	}
}
    2052:	bf00      	nop
    2054:	3710      	adds	r7, #16
    2056:	46bd      	mov	sp, r7
    2058:	bd80      	pop	{r7, pc}
    205a:	bf00      	nop
    205c:	00006ff9 	.word	0x00006ff9

00002060 <_spi_dev_error>:
 *  \brief Callback for error
 *  \param[in, out] dev Pointer to the SPI device instance.
 *  \param[in] status Error status.
 */
static void _spi_dev_error(struct _spi_m_async_dev *dev, int32_t status)
{
    2060:	b580      	push	{r7, lr}
    2062:	b084      	sub	sp, #16
    2064:	af00      	add	r7, sp, #0
    2066:	6078      	str	r0, [r7, #4]
    2068:	6039      	str	r1, [r7, #0]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    206a:	687b      	ldr	r3, [r7, #4]
    206c:	3b04      	subs	r3, #4
    206e:	60fb      	str	r3, [r7, #12]

	_spi_m_async_enable_tx(dev, false);
    2070:	2100      	movs	r1, #0
    2072:	6878      	ldr	r0, [r7, #4]
    2074:	4b0d      	ldr	r3, [pc, #52]	; (20ac <_spi_dev_error+0x4c>)
    2076:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
    2078:	2100      	movs	r1, #0
    207a:	6878      	ldr	r0, [r7, #4]
    207c:	4b0c      	ldr	r3, [pc, #48]	; (20b0 <_spi_dev_error+0x50>)
    207e:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
    2080:	2100      	movs	r1, #0
    2082:	6878      	ldr	r0, [r7, #4]
    2084:	4b0b      	ldr	r3, [pc, #44]	; (20b4 <_spi_dev_error+0x54>)
    2086:	4798      	blx	r3
	spi->stat = 0;
    2088:	68fb      	ldr	r3, [r7, #12]
    208a:	2200      	movs	r2, #0
    208c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	/* Invoke complete callback */
	if (spi->callbacks.cb_error) {
    2090:	68fb      	ldr	r3, [r7, #12]
    2092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2094:	2b00      	cmp	r3, #0
    2096:	d004      	beq.n	20a2 <_spi_dev_error+0x42>
		spi->callbacks.cb_error(spi, status);
    2098:	68fb      	ldr	r3, [r7, #12]
    209a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    209c:	6839      	ldr	r1, [r7, #0]
    209e:	68f8      	ldr	r0, [r7, #12]
    20a0:	4798      	blx	r3
	}
}
    20a2:	bf00      	nop
    20a4:	3710      	adds	r7, #16
    20a6:	46bd      	mov	sp, r7
    20a8:	bd80      	pop	{r7, pc}
    20aa:	bf00      	nop
    20ac:	00006f25 	.word	0x00006f25
    20b0:	00006f89 	.word	0x00006f89
    20b4:	00006ff9 	.word	0x00006ff9

000020b8 <spi_m_async_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_async_hpl_interface *)func;
}

int32_t spi_m_async_init(struct spi_m_async_descriptor *spi, void *const hw)
{
    20b8:	b580      	push	{r7, lr}
    20ba:	b084      	sub	sp, #16
    20bc:	af00      	add	r7, sp, #0
    20be:	6078      	str	r0, [r7, #4]
    20c0:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    20c2:	2300      	movs	r3, #0
    20c4:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    20c6:	687b      	ldr	r3, [r7, #4]
    20c8:	2b00      	cmp	r3, #0
    20ca:	d004      	beq.n	20d6 <spi_m_async_init+0x1e>
    20cc:	683b      	ldr	r3, [r7, #0]
    20ce:	2b00      	cmp	r3, #0
    20d0:	d001      	beq.n	20d6 <spi_m_async_init+0x1e>
    20d2:	2301      	movs	r3, #1
    20d4:	e000      	b.n	20d8 <spi_m_async_init+0x20>
    20d6:	2300      	movs	r3, #0
    20d8:	f003 0301 	and.w	r3, r3, #1
    20dc:	b2db      	uxtb	r3, r3
    20de:	22a5      	movs	r2, #165	; 0xa5
    20e0:	491c      	ldr	r1, [pc, #112]	; (2154 <spi_m_async_init+0x9c>)
    20e2:	4618      	mov	r0, r3
    20e4:	4b1c      	ldr	r3, [pc, #112]	; (2158 <spi_m_async_init+0xa0>)
    20e6:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    20e8:	687b      	ldr	r3, [r7, #4]
    20ea:	683a      	ldr	r2, [r7, #0]
    20ec:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_async_init(&spi->dev, hw);
    20ee:	687b      	ldr	r3, [r7, #4]
    20f0:	3304      	adds	r3, #4
    20f2:	6839      	ldr	r1, [r7, #0]
    20f4:	4618      	mov	r0, r3
    20f6:	4b19      	ldr	r3, [pc, #100]	; (215c <spi_m_async_init+0xa4>)
    20f8:	4798      	blx	r3
    20fa:	60f8      	str	r0, [r7, #12]

	if (rc >= 0) {
    20fc:	68fb      	ldr	r3, [r7, #12]
    20fe:	2b00      	cmp	r3, #0
    2100:	db23      	blt.n	214a <spi_m_async_init+0x92>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    2102:	687b      	ldr	r3, [r7, #4]
    2104:	3304      	adds	r3, #4
    2106:	4a16      	ldr	r2, [pc, #88]	; (2160 <spi_m_async_init+0xa8>)
    2108:	2100      	movs	r1, #0
    210a:	4618      	mov	r0, r3
    210c:	4b15      	ldr	r3, [pc, #84]	; (2164 <spi_m_async_init+0xac>)
    210e:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    2110:	687b      	ldr	r3, [r7, #4]
    2112:	3304      	adds	r3, #4
    2114:	4a14      	ldr	r2, [pc, #80]	; (2168 <spi_m_async_init+0xb0>)
    2116:	2101      	movs	r1, #1
    2118:	4618      	mov	r0, r3
    211a:	4b12      	ldr	r3, [pc, #72]	; (2164 <spi_m_async_init+0xac>)
    211c:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    211e:	687b      	ldr	r3, [r7, #4]
    2120:	3304      	adds	r3, #4
    2122:	4a12      	ldr	r2, [pc, #72]	; (216c <spi_m_async_init+0xb4>)
    2124:	2102      	movs	r1, #2
    2126:	4618      	mov	r0, r3
    2128:	4b0e      	ldr	r3, [pc, #56]	; (2164 <spi_m_async_init+0xac>)
    212a:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    212c:	687b      	ldr	r3, [r7, #4]
    212e:	3304      	adds	r3, #4
    2130:	4a0f      	ldr	r2, [pc, #60]	; (2170 <spi_m_async_init+0xb8>)
    2132:	2103      	movs	r1, #3
    2134:	4618      	mov	r0, r3
    2136:	4b0b      	ldr	r3, [pc, #44]	; (2164 <spi_m_async_init+0xac>)
    2138:	4798      	blx	r3
	} else {
		return rc;
	}

	spi->io.read  = _spi_m_async_io_read;
    213a:	687b      	ldr	r3, [r7, #4]
    213c:	4a0d      	ldr	r2, [pc, #52]	; (2174 <spi_m_async_init+0xbc>)
    213e:	629a      	str	r2, [r3, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    2140:	687b      	ldr	r3, [r7, #4]
    2142:	4a0d      	ldr	r2, [pc, #52]	; (2178 <spi_m_async_init+0xc0>)
    2144:	625a      	str	r2, [r3, #36]	; 0x24
	return ERR_NONE;
    2146:	2300      	movs	r3, #0
    2148:	e000      	b.n	214c <spi_m_async_init+0x94>
		return rc;
    214a:	68fb      	ldr	r3, [r7, #12]
}
    214c:	4618      	mov	r0, r3
    214e:	3710      	adds	r7, #16
    2150:	46bd      	mov	sp, r7
    2152:	bd80      	pop	{r7, pc}
    2154:	00012f94 	.word	0x00012f94
    2158:	00002f09 	.word	0x00002f09
    215c:	00006c25 	.word	0x00006c25
    2160:	00001ea1 	.word	0x00001ea1
    2164:	00007109 	.word	0x00007109
    2168:	00001f21 	.word	0x00001f21
    216c:	00002019 	.word	0x00002019
    2170:	00002061 	.word	0x00002061
    2174:	0000217d 	.word	0x0000217d
    2178:	000021fd 	.word	0x000021fd

0000217c <_spi_m_async_io_read>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_read(struct io_descriptor *io, uint8_t *const buf, const uint16_t length)
{
    217c:	b580      	push	{r7, lr}
    217e:	b086      	sub	sp, #24
    2180:	af00      	add	r7, sp, #0
    2182:	60f8      	str	r0, [r7, #12]
    2184:	60b9      	str	r1, [r7, #8]
    2186:	4613      	mov	r3, r2
    2188:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    218a:	68fb      	ldr	r3, [r7, #12]
    218c:	2b00      	cmp	r3, #0
    218e:	bf14      	ite	ne
    2190:	2301      	movne	r3, #1
    2192:	2300      	moveq	r3, #0
    2194:	b2db      	uxtb	r3, r3
    2196:	f240 1205 	movw	r2, #261	; 0x105
    219a:	4914      	ldr	r1, [pc, #80]	; (21ec <_spi_m_async_io_read+0x70>)
    219c:	4618      	mov	r0, r3
    219e:	4b14      	ldr	r3, [pc, #80]	; (21f0 <_spi_m_async_io_read+0x74>)
    21a0:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);
    21a2:	68fb      	ldr	r3, [r7, #12]
    21a4:	3b24      	subs	r3, #36	; 0x24
    21a6:	617b      	str	r3, [r7, #20]

	spi->xfer.rxbuf = buf;
    21a8:	697b      	ldr	r3, [r7, #20]
    21aa:	68ba      	ldr	r2, [r7, #8]
    21ac:	63da      	str	r2, [r3, #60]	; 0x3c
	spi->xfer.txbuf = NULL;
    21ae:	697b      	ldr	r3, [r7, #20]
    21b0:	2200      	movs	r2, #0
    21b2:	639a      	str	r2, [r3, #56]	; 0x38
	spi->xfer.size  = length;
    21b4:	88fa      	ldrh	r2, [r7, #6]
    21b6:	697b      	ldr	r3, [r7, #20]
    21b8:	641a      	str	r2, [r3, #64]	; 0x40
	spi->xfercnt    = 0;
    21ba:	697b      	ldr	r3, [r7, #20]
    21bc:	2200      	movs	r2, #0
    21be:	645a      	str	r2, [r3, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    21c0:	697b      	ldr	r3, [r7, #20]
    21c2:	2210      	movs	r2, #16
    21c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	_spi_m_async_enable_rx(&spi->dev, true);
    21c8:	697b      	ldr	r3, [r7, #20]
    21ca:	3304      	adds	r3, #4
    21cc:	2101      	movs	r1, #1
    21ce:	4618      	mov	r0, r3
    21d0:	4b08      	ldr	r3, [pc, #32]	; (21f4 <_spi_m_async_io_read+0x78>)
    21d2:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
    21d4:	697b      	ldr	r3, [r7, #20]
    21d6:	3304      	adds	r3, #4
    21d8:	f240 11ff 	movw	r1, #511	; 0x1ff
    21dc:	4618      	mov	r0, r3
    21de:	4b06      	ldr	r3, [pc, #24]	; (21f8 <_spi_m_async_io_read+0x7c>)
    21e0:	4798      	blx	r3

	return ERR_NONE;
    21e2:	2300      	movs	r3, #0
}
    21e4:	4618      	mov	r0, r3
    21e6:	3718      	adds	r7, #24
    21e8:	46bd      	mov	sp, r7
    21ea:	bd80      	pop	{r7, pc}
    21ec:	00012f94 	.word	0x00012f94
    21f0:	00002f09 	.word	0x00002f09
    21f4:	00006f89 	.word	0x00006f89
    21f8:	00007061 	.word	0x00007061

000021fc <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    21fc:	b580      	push	{r7, lr}
    21fe:	b086      	sub	sp, #24
    2200:	af00      	add	r7, sp, #0
    2202:	60f8      	str	r0, [r7, #12]
    2204:	60b9      	str	r1, [r7, #8]
    2206:	4613      	mov	r3, r2
    2208:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    220a:	68fb      	ldr	r3, [r7, #12]
    220c:	2b00      	cmp	r3, #0
    220e:	bf14      	ite	ne
    2210:	2301      	movne	r3, #1
    2212:	2300      	moveq	r3, #0
    2214:	b2db      	uxtb	r3, r3
    2216:	f240 1227 	movw	r2, #295	; 0x127
    221a:	4911      	ldr	r1, [pc, #68]	; (2260 <_spi_m_async_io_write+0x64>)
    221c:	4618      	mov	r0, r3
    221e:	4b11      	ldr	r3, [pc, #68]	; (2264 <_spi_m_async_io_write+0x68>)
    2220:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);
    2222:	68fb      	ldr	r3, [r7, #12]
    2224:	3b24      	subs	r3, #36	; 0x24
    2226:	617b      	str	r3, [r7, #20]

	spi->xfer.rxbuf = NULL;
    2228:	697b      	ldr	r3, [r7, #20]
    222a:	2200      	movs	r2, #0
    222c:	63da      	str	r2, [r3, #60]	; 0x3c
	spi->xfer.txbuf = (uint8_t *)buf;
    222e:	697b      	ldr	r3, [r7, #20]
    2230:	68ba      	ldr	r2, [r7, #8]
    2232:	639a      	str	r2, [r3, #56]	; 0x38
	spi->xfer.size  = length;
    2234:	88fa      	ldrh	r2, [r7, #6]
    2236:	697b      	ldr	r3, [r7, #20]
    2238:	641a      	str	r2, [r3, #64]	; 0x40
	spi->xfercnt    = 0;
    223a:	697b      	ldr	r3, [r7, #20]
    223c:	2200      	movs	r2, #0
    223e:	645a      	str	r2, [r3, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    2240:	697b      	ldr	r3, [r7, #20]
    2242:	2210      	movs	r2, #16
    2244:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	_spi_m_async_enable_tx(&spi->dev, true);
    2248:	697b      	ldr	r3, [r7, #20]
    224a:	3304      	adds	r3, #4
    224c:	2101      	movs	r1, #1
    224e:	4618      	mov	r0, r3
    2250:	4b05      	ldr	r3, [pc, #20]	; (2268 <_spi_m_async_io_write+0x6c>)
    2252:	4798      	blx	r3

	return ERR_NONE;
    2254:	2300      	movs	r3, #0
}
    2256:	4618      	mov	r0, r3
    2258:	3718      	adds	r7, #24
    225a:	46bd      	mov	sp, r7
    225c:	bd80      	pop	{r7, pc}
    225e:	bf00      	nop
    2260:	00012f94 	.word	0x00012f94
    2264:	00002f09 	.word	0x00002f09
    2268:	00006f25 	.word	0x00006f25

0000226c <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    226c:	b580      	push	{r7, lr}
    226e:	b084      	sub	sp, #16
    2270:	af00      	add	r7, sp, #0
    2272:	6078      	str	r0, [r7, #4]
    2274:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    2276:	2300      	movs	r3, #0
    2278:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    227a:	687b      	ldr	r3, [r7, #4]
    227c:	2b00      	cmp	r3, #0
    227e:	d004      	beq.n	228a <spi_m_sync_init+0x1e>
    2280:	683b      	ldr	r3, [r7, #0]
    2282:	2b00      	cmp	r3, #0
    2284:	d001      	beq.n	228a <spi_m_sync_init+0x1e>
    2286:	2301      	movs	r3, #1
    2288:	e000      	b.n	228c <spi_m_sync_init+0x20>
    228a:	2300      	movs	r3, #0
    228c:	f003 0301 	and.w	r3, r3, #1
    2290:	b2db      	uxtb	r3, r3
    2292:	2240      	movs	r2, #64	; 0x40
    2294:	4910      	ldr	r1, [pc, #64]	; (22d8 <spi_m_sync_init+0x6c>)
    2296:	4618      	mov	r0, r3
    2298:	4b10      	ldr	r3, [pc, #64]	; (22dc <spi_m_sync_init+0x70>)
    229a:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    229c:	687b      	ldr	r3, [r7, #4]
    229e:	683a      	ldr	r2, [r7, #0]
    22a0:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    22a2:	687b      	ldr	r3, [r7, #4]
    22a4:	3304      	adds	r3, #4
    22a6:	6839      	ldr	r1, [r7, #0]
    22a8:	4618      	mov	r0, r3
    22aa:	4b0d      	ldr	r3, [pc, #52]	; (22e0 <spi_m_sync_init+0x74>)
    22ac:	4798      	blx	r3
    22ae:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    22b0:	68fb      	ldr	r3, [r7, #12]
    22b2:	2b00      	cmp	r3, #0
    22b4:	da01      	bge.n	22ba <spi_m_sync_init+0x4e>
		return rc;
    22b6:	68fb      	ldr	r3, [r7, #12]
    22b8:	e00a      	b.n	22d0 <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    22ba:	687b      	ldr	r3, [r7, #4]
    22bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    22c0:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    22c2:	687b      	ldr	r3, [r7, #4]
    22c4:	4a07      	ldr	r2, [pc, #28]	; (22e4 <spi_m_sync_init+0x78>)
    22c6:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    22c8:	687b      	ldr	r3, [r7, #4]
    22ca:	4a07      	ldr	r2, [pc, #28]	; (22e8 <spi_m_sync_init+0x7c>)
    22cc:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    22ce:	2300      	movs	r3, #0
}
    22d0:	4618      	mov	r0, r3
    22d2:	3710      	adds	r7, #16
    22d4:	46bd      	mov	sp, r7
    22d6:	bd80      	pop	{r7, pc}
    22d8:	00012fb4 	.word	0x00012fb4
    22dc:	00002f09 	.word	0x00002f09
    22e0:	00006b19 	.word	0x00006b19
    22e4:	000022ed 	.word	0x000022ed
    22e8:	00002345 	.word	0x00002345

000022ec <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    22ec:	b580      	push	{r7, lr}
    22ee:	b088      	sub	sp, #32
    22f0:	af00      	add	r7, sp, #0
    22f2:	60f8      	str	r0, [r7, #12]
    22f4:	60b9      	str	r1, [r7, #8]
    22f6:	4613      	mov	r3, r2
    22f8:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    22fa:	68fb      	ldr	r3, [r7, #12]
    22fc:	2b00      	cmp	r3, #0
    22fe:	bf14      	ite	ne
    2300:	2301      	movne	r3, #1
    2302:	2300      	moveq	r3, #0
    2304:	b2db      	uxtb	r3, r3
    2306:	2287      	movs	r2, #135	; 0x87
    2308:	490b      	ldr	r1, [pc, #44]	; (2338 <_spi_m_sync_io_read+0x4c>)
    230a:	4618      	mov	r0, r3
    230c:	4b0b      	ldr	r3, [pc, #44]	; (233c <_spi_m_sync_io_read+0x50>)
    230e:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2310:	68fb      	ldr	r3, [r7, #12]
    2312:	3b0c      	subs	r3, #12
    2314:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    2316:	68bb      	ldr	r3, [r7, #8]
    2318:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    231a:	2300      	movs	r3, #0
    231c:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    231e:	88fb      	ldrh	r3, [r7, #6]
    2320:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    2322:	f107 0310 	add.w	r3, r7, #16
    2326:	4619      	mov	r1, r3
    2328:	69f8      	ldr	r0, [r7, #28]
    232a:	4b05      	ldr	r3, [pc, #20]	; (2340 <_spi_m_sync_io_read+0x54>)
    232c:	4798      	blx	r3
    232e:	4603      	mov	r3, r0
}
    2330:	4618      	mov	r0, r3
    2332:	3720      	adds	r7, #32
    2334:	46bd      	mov	sp, r7
    2336:	bd80      	pop	{r7, pc}
    2338:	00012fb4 	.word	0x00012fb4
    233c:	00002f09 	.word	0x00002f09
    2340:	0000239d 	.word	0x0000239d

00002344 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    2344:	b580      	push	{r7, lr}
    2346:	b088      	sub	sp, #32
    2348:	af00      	add	r7, sp, #0
    234a:	60f8      	str	r0, [r7, #12]
    234c:	60b9      	str	r1, [r7, #8]
    234e:	4613      	mov	r3, r2
    2350:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    2352:	68fb      	ldr	r3, [r7, #12]
    2354:	2b00      	cmp	r3, #0
    2356:	bf14      	ite	ne
    2358:	2301      	movne	r3, #1
    235a:	2300      	moveq	r3, #0
    235c:	b2db      	uxtb	r3, r3
    235e:	22a3      	movs	r2, #163	; 0xa3
    2360:	490b      	ldr	r1, [pc, #44]	; (2390 <_spi_m_sync_io_write+0x4c>)
    2362:	4618      	mov	r0, r3
    2364:	4b0b      	ldr	r3, [pc, #44]	; (2394 <_spi_m_sync_io_write+0x50>)
    2366:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2368:	68fb      	ldr	r3, [r7, #12]
    236a:	3b0c      	subs	r3, #12
    236c:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    236e:	2300      	movs	r3, #0
    2370:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    2372:	68bb      	ldr	r3, [r7, #8]
    2374:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    2376:	88fb      	ldrh	r3, [r7, #6]
    2378:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    237a:	f107 0310 	add.w	r3, r7, #16
    237e:	4619      	mov	r1, r3
    2380:	69f8      	ldr	r0, [r7, #28]
    2382:	4b05      	ldr	r3, [pc, #20]	; (2398 <_spi_m_sync_io_write+0x54>)
    2384:	4798      	blx	r3
    2386:	4603      	mov	r3, r0
}
    2388:	4618      	mov	r0, r3
    238a:	3720      	adds	r7, #32
    238c:	46bd      	mov	sp, r7
    238e:	bd80      	pop	{r7, pc}
    2390:	00012fb4 	.word	0x00012fb4
    2394:	00002f09 	.word	0x00002f09
    2398:	0000239d 	.word	0x0000239d

0000239c <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    239c:	b580      	push	{r7, lr}
    239e:	b086      	sub	sp, #24
    23a0:	af00      	add	r7, sp, #0
    23a2:	6078      	str	r0, [r7, #4]
    23a4:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    23a6:	687b      	ldr	r3, [r7, #4]
    23a8:	2b00      	cmp	r3, #0
    23aa:	d004      	beq.n	23b6 <spi_m_sync_transfer+0x1a>
    23ac:	683b      	ldr	r3, [r7, #0]
    23ae:	2b00      	cmp	r3, #0
    23b0:	d001      	beq.n	23b6 <spi_m_sync_transfer+0x1a>
    23b2:	2301      	movs	r3, #1
    23b4:	e000      	b.n	23b8 <spi_m_sync_transfer+0x1c>
    23b6:	2300      	movs	r3, #0
    23b8:	f003 0301 	and.w	r3, r3, #1
    23bc:	b2db      	uxtb	r3, r3
    23be:	22b3      	movs	r2, #179	; 0xb3
    23c0:	490c      	ldr	r1, [pc, #48]	; (23f4 <spi_m_sync_transfer+0x58>)
    23c2:	4618      	mov	r0, r3
    23c4:	4b0c      	ldr	r3, [pc, #48]	; (23f8 <spi_m_sync_transfer+0x5c>)
    23c6:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    23c8:	683b      	ldr	r3, [r7, #0]
    23ca:	681b      	ldr	r3, [r3, #0]
    23cc:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    23ce:	683b      	ldr	r3, [r7, #0]
    23d0:	685b      	ldr	r3, [r3, #4]
    23d2:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    23d4:	683b      	ldr	r3, [r7, #0]
    23d6:	689b      	ldr	r3, [r3, #8]
    23d8:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    23da:	687b      	ldr	r3, [r7, #4]
    23dc:	3304      	adds	r3, #4
    23de:	f107 020c 	add.w	r2, r7, #12
    23e2:	4611      	mov	r1, r2
    23e4:	4618      	mov	r0, r3
    23e6:	4b05      	ldr	r3, [pc, #20]	; (23fc <spi_m_sync_transfer+0x60>)
    23e8:	4798      	blx	r3
    23ea:	4603      	mov	r3, r0
}
    23ec:	4618      	mov	r0, r3
    23ee:	3718      	adds	r7, #24
    23f0:	46bd      	mov	sp, r7
    23f2:	bd80      	pop	{r7, pc}
    23f4:	00012fb4 	.word	0x00012fb4
    23f8:	00002f09 	.word	0x00002f09
    23fc:	00006e09 	.word	0x00006e09

00002400 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    2400:	b480      	push	{r7}
    2402:	b083      	sub	sp, #12
    2404:	af00      	add	r7, sp, #0
    2406:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    2408:	687b      	ldr	r3, [r7, #4]
    240a:	681b      	ldr	r3, [r3, #0]
}
    240c:	4618      	mov	r0, r3
    240e:	370c      	adds	r7, #12
    2410:	46bd      	mov	sp, r7
    2412:	f85d 7b04 	ldr.w	r7, [sp], #4
    2416:	4770      	bx	lr

00002418 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    2418:	b480      	push	{r7}
    241a:	b083      	sub	sp, #12
    241c:	af00      	add	r7, sp, #0
    241e:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    2420:	687b      	ldr	r3, [r7, #4]
    2422:	2b00      	cmp	r3, #0
    2424:	d002      	beq.n	242c <list_get_next_element+0x14>
    2426:	687b      	ldr	r3, [r7, #4]
    2428:	681b      	ldr	r3, [r3, #0]
    242a:	e000      	b.n	242e <list_get_next_element+0x16>
    242c:	2300      	movs	r3, #0
}
    242e:	4618      	mov	r0, r3
    2430:	370c      	adds	r7, #12
    2432:	46bd      	mov	sp, r7
    2434:	f85d 7b04 	ldr.w	r7, [sp], #4
    2438:	4770      	bx	lr
	...

0000243c <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    243c:	b580      	push	{r7, lr}
    243e:	b084      	sub	sp, #16
    2440:	af00      	add	r7, sp, #0
    2442:	60f8      	str	r0, [r7, #12]
    2444:	60b9      	str	r1, [r7, #8]
    2446:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    2448:	68fb      	ldr	r3, [r7, #12]
    244a:	2b00      	cmp	r3, #0
    244c:	d004      	beq.n	2458 <timer_init+0x1c>
    244e:	68bb      	ldr	r3, [r7, #8]
    2450:	2b00      	cmp	r3, #0
    2452:	d001      	beq.n	2458 <timer_init+0x1c>
    2454:	2301      	movs	r3, #1
    2456:	e000      	b.n	245a <timer_init+0x1e>
    2458:	2300      	movs	r3, #0
    245a:	f003 0301 	and.w	r3, r3, #1
    245e:	b2db      	uxtb	r3, r3
    2460:	223b      	movs	r2, #59	; 0x3b
    2462:	490a      	ldr	r1, [pc, #40]	; (248c <timer_init+0x50>)
    2464:	4618      	mov	r0, r3
    2466:	4b0a      	ldr	r3, [pc, #40]	; (2490 <timer_init+0x54>)
    2468:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    246a:	68fb      	ldr	r3, [r7, #12]
    246c:	68b9      	ldr	r1, [r7, #8]
    246e:	4618      	mov	r0, r3
    2470:	4b08      	ldr	r3, [pc, #32]	; (2494 <timer_init+0x58>)
    2472:	4798      	blx	r3
	descr->time                           = 0;
    2474:	68fb      	ldr	r3, [r7, #12]
    2476:	2200      	movs	r2, #0
    2478:	611a      	str	r2, [r3, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    247a:	68fb      	ldr	r3, [r7, #12]
    247c:	4a06      	ldr	r2, [pc, #24]	; (2498 <timer_init+0x5c>)
    247e:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    2480:	2300      	movs	r3, #0
}
    2482:	4618      	mov	r0, r3
    2484:	3710      	adds	r7, #16
    2486:	46bd      	mov	sp, r7
    2488:	bd80      	pop	{r7, pc}
    248a:	bf00      	nop
    248c:	00012fd0 	.word	0x00012fd0
    2490:	00002f09 	.word	0x00002f09
    2494:	000074a1 	.word	0x000074a1
    2498:	0000254d 	.word	0x0000254d

0000249c <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    249c:	b580      	push	{r7, lr}
    249e:	b088      	sub	sp, #32
    24a0:	af00      	add	r7, sp, #0
    24a2:	60f8      	str	r0, [r7, #12]
    24a4:	60b9      	str	r1, [r7, #8]
    24a6:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    24a8:	2300      	movs	r3, #0
    24aa:	61bb      	str	r3, [r7, #24]
    24ac:	68f8      	ldr	r0, [r7, #12]
    24ae:	4b23      	ldr	r3, [pc, #140]	; (253c <timer_add_timer_task+0xa0>)
    24b0:	4798      	blx	r3
    24b2:	6138      	str	r0, [r7, #16]

	if (!head) {
    24b4:	693b      	ldr	r3, [r7, #16]
    24b6:	2b00      	cmp	r3, #0
    24b8:	d104      	bne.n	24c4 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    24ba:	68b9      	ldr	r1, [r7, #8]
    24bc:	68f8      	ldr	r0, [r7, #12]
    24be:	4b20      	ldr	r3, [pc, #128]	; (2540 <timer_add_timer_task+0xa4>)
    24c0:	4798      	blx	r3
		return;
    24c2:	e037      	b.n	2534 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    24c4:	693b      	ldr	r3, [r7, #16]
    24c6:	61fb      	str	r3, [r7, #28]
    24c8:	e022      	b.n	2510 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    24ca:	69fb      	ldr	r3, [r7, #28]
    24cc:	685a      	ldr	r2, [r3, #4]
    24ce:	687b      	ldr	r3, [r7, #4]
    24d0:	429a      	cmp	r2, r3
    24d2:	d808      	bhi.n	24e6 <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    24d4:	69fb      	ldr	r3, [r7, #28]
    24d6:	689a      	ldr	r2, [r3, #8]
    24d8:	69fb      	ldr	r3, [r7, #28]
    24da:	6859      	ldr	r1, [r3, #4]
    24dc:	687b      	ldr	r3, [r7, #4]
    24de:	1acb      	subs	r3, r1, r3
    24e0:	4413      	add	r3, r2
    24e2:	617b      	str	r3, [r7, #20]
    24e4:	e009      	b.n	24fa <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    24e6:	69fb      	ldr	r3, [r7, #28]
    24e8:	689a      	ldr	r2, [r3, #8]
    24ea:	69fb      	ldr	r3, [r7, #28]
    24ec:	685b      	ldr	r3, [r3, #4]
    24ee:	441a      	add	r2, r3
    24f0:	687b      	ldr	r3, [r7, #4]
    24f2:	425b      	negs	r3, r3
    24f4:	4413      	add	r3, r2
    24f6:	3301      	adds	r3, #1
    24f8:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    24fa:	68bb      	ldr	r3, [r7, #8]
    24fc:	689a      	ldr	r2, [r3, #8]
    24fe:	697b      	ldr	r3, [r7, #20]
    2500:	429a      	cmp	r2, r3
    2502:	d909      	bls.n	2518 <timer_add_timer_task+0x7c>
			break;
		prev = it;
    2504:	69fb      	ldr	r3, [r7, #28]
    2506:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2508:	69f8      	ldr	r0, [r7, #28]
    250a:	4b0e      	ldr	r3, [pc, #56]	; (2544 <timer_add_timer_task+0xa8>)
    250c:	4798      	blx	r3
    250e:	61f8      	str	r0, [r7, #28]
    2510:	69fb      	ldr	r3, [r7, #28]
    2512:	2b00      	cmp	r3, #0
    2514:	d1d9      	bne.n	24ca <timer_add_timer_task+0x2e>
    2516:	e000      	b.n	251a <timer_add_timer_task+0x7e>
			break;
    2518:	bf00      	nop
	}

	if (it == head) {
    251a:	69fa      	ldr	r2, [r7, #28]
    251c:	693b      	ldr	r3, [r7, #16]
    251e:	429a      	cmp	r2, r3
    2520:	d104      	bne.n	252c <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    2522:	68b9      	ldr	r1, [r7, #8]
    2524:	68f8      	ldr	r0, [r7, #12]
    2526:	4b06      	ldr	r3, [pc, #24]	; (2540 <timer_add_timer_task+0xa4>)
    2528:	4798      	blx	r3
    252a:	e003      	b.n	2534 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    252c:	68b9      	ldr	r1, [r7, #8]
    252e:	69b8      	ldr	r0, [r7, #24]
    2530:	4b05      	ldr	r3, [pc, #20]	; (2548 <timer_add_timer_task+0xac>)
    2532:	4798      	blx	r3
	}
}
    2534:	3720      	adds	r7, #32
    2536:	46bd      	mov	sp, r7
    2538:	bd80      	pop	{r7, pc}
    253a:	bf00      	nop
    253c:	00002401 	.word	0x00002401
    2540:	00002f69 	.word	0x00002f69
    2544:	00002419 	.word	0x00002419
    2548:	00002fc1 	.word	0x00002fc1

0000254c <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    254c:	b580      	push	{r7, lr}
    254e:	b086      	sub	sp, #24
    2550:	af00      	add	r7, sp, #0
    2552:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    2554:	687b      	ldr	r3, [r7, #4]
    2556:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    2558:	693b      	ldr	r3, [r7, #16]
    255a:	3314      	adds	r3, #20
    255c:	4618      	mov	r0, r3
    255e:	4b27      	ldr	r3, [pc, #156]	; (25fc <timer_process_counted+0xb0>)
    2560:	4798      	blx	r3
    2562:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    2564:	693b      	ldr	r3, [r7, #16]
    2566:	691b      	ldr	r3, [r3, #16]
    2568:	1c5a      	adds	r2, r3, #1
    256a:	693b      	ldr	r3, [r7, #16]
    256c:	611a      	str	r2, [r3, #16]
    256e:	693b      	ldr	r3, [r7, #16]
    2570:	691b      	ldr	r3, [r3, #16]
    2572:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    2574:	693b      	ldr	r3, [r7, #16]
    2576:	7e1b      	ldrb	r3, [r3, #24]
    2578:	b2db      	uxtb	r3, r3
    257a:	f003 0301 	and.w	r3, r3, #1
    257e:	2b00      	cmp	r3, #0
    2580:	d106      	bne.n	2590 <timer_process_counted+0x44>
    2582:	693b      	ldr	r3, [r7, #16]
    2584:	7e1b      	ldrb	r3, [r3, #24]
    2586:	b2db      	uxtb	r3, r3
    2588:	f003 0302 	and.w	r3, r3, #2
    258c:	2b00      	cmp	r3, #0
    258e:	d027      	beq.n	25e0 <timer_process_counted+0x94>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    2590:	693b      	ldr	r3, [r7, #16]
    2592:	7e1b      	ldrb	r3, [r3, #24]
    2594:	b2db      	uxtb	r3, r3
    2596:	f043 0302 	orr.w	r3, r3, #2
    259a:	b2da      	uxtb	r2, r3
    259c:	693b      	ldr	r3, [r7, #16]
    259e:	761a      	strb	r2, [r3, #24]
		return;
    25a0:	e029      	b.n	25f6 <timer_process_counted+0xaa>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    25a2:	697b      	ldr	r3, [r7, #20]
    25a4:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    25a6:	693b      	ldr	r3, [r7, #16]
    25a8:	3314      	adds	r3, #20
    25aa:	4618      	mov	r0, r3
    25ac:	4b14      	ldr	r3, [pc, #80]	; (2600 <timer_process_counted+0xb4>)
    25ae:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    25b0:	68bb      	ldr	r3, [r7, #8]
    25b2:	7c1b      	ldrb	r3, [r3, #16]
    25b4:	2b01      	cmp	r3, #1
    25b6:	d109      	bne.n	25cc <timer_process_counted+0x80>
			tmp->time_label = time;
    25b8:	68bb      	ldr	r3, [r7, #8]
    25ba:	68fa      	ldr	r2, [r7, #12]
    25bc:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    25be:	693b      	ldr	r3, [r7, #16]
    25c0:	3314      	adds	r3, #20
    25c2:	68fa      	ldr	r2, [r7, #12]
    25c4:	68b9      	ldr	r1, [r7, #8]
    25c6:	4618      	mov	r0, r3
    25c8:	4b0e      	ldr	r3, [pc, #56]	; (2604 <timer_process_counted+0xb8>)
    25ca:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    25cc:	693b      	ldr	r3, [r7, #16]
    25ce:	3314      	adds	r3, #20
    25d0:	4618      	mov	r0, r3
    25d2:	4b0a      	ldr	r3, [pc, #40]	; (25fc <timer_process_counted+0xb0>)
    25d4:	4798      	blx	r3
    25d6:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    25d8:	68bb      	ldr	r3, [r7, #8]
    25da:	68db      	ldr	r3, [r3, #12]
    25dc:	68b8      	ldr	r0, [r7, #8]
    25de:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    25e0:	697b      	ldr	r3, [r7, #20]
    25e2:	2b00      	cmp	r3, #0
    25e4:	d007      	beq.n	25f6 <timer_process_counted+0xaa>
    25e6:	697b      	ldr	r3, [r7, #20]
    25e8:	685b      	ldr	r3, [r3, #4]
    25ea:	68fa      	ldr	r2, [r7, #12]
    25ec:	1ad2      	subs	r2, r2, r3
    25ee:	697b      	ldr	r3, [r7, #20]
    25f0:	689b      	ldr	r3, [r3, #8]
    25f2:	429a      	cmp	r2, r3
    25f4:	d2d5      	bcs.n	25a2 <timer_process_counted+0x56>
	}
}
    25f6:	3718      	adds	r7, #24
    25f8:	46bd      	mov	sp, r7
    25fa:	bd80      	pop	{r7, pc}
    25fc:	00002401 	.word	0x00002401
    2600:	00003061 	.word	0x00003061
    2604:	0000249d 	.word	0x0000249d

00002608 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    2608:	b480      	push	{r7}
    260a:	b085      	sub	sp, #20
    260c:	af00      	add	r7, sp, #0
    260e:	4603      	mov	r3, r0
    2610:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2612:	2300      	movs	r3, #0
    2614:	73fb      	strb	r3, [r7, #15]
    2616:	e029      	b.n	266c <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    2618:	f997 300f 	ldrsb.w	r3, [r7, #15]
    261c:	4a19      	ldr	r2, [pc, #100]	; (2684 <_usb_d_find_ep+0x7c>)
    261e:	015b      	lsls	r3, r3, #5
    2620:	4413      	add	r3, r2
    2622:	3301      	adds	r3, #1
    2624:	781b      	ldrb	r3, [r3, #0]
    2626:	79fa      	ldrb	r2, [r7, #7]
    2628:	429a      	cmp	r2, r3
    262a:	d102      	bne.n	2632 <_usb_d_find_ep+0x2a>
			return i;
    262c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2630:	e022      	b.n	2678 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    2632:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2636:	4a13      	ldr	r2, [pc, #76]	; (2684 <_usb_d_find_ep+0x7c>)
    2638:	015b      	lsls	r3, r3, #5
    263a:	4413      	add	r3, r2
    263c:	781b      	ldrb	r3, [r3, #0]
    263e:	2b00      	cmp	r3, #0
    2640:	d10e      	bne.n	2660 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    2642:	79fb      	ldrb	r3, [r7, #7]
    2644:	f003 030f 	and.w	r3, r3, #15
    2648:	f997 200f 	ldrsb.w	r2, [r7, #15]
    264c:	490d      	ldr	r1, [pc, #52]	; (2684 <_usb_d_find_ep+0x7c>)
    264e:	0152      	lsls	r2, r2, #5
    2650:	440a      	add	r2, r1
    2652:	3201      	adds	r2, #1
    2654:	7812      	ldrb	r2, [r2, #0]
    2656:	4293      	cmp	r3, r2
    2658:	d102      	bne.n	2660 <_usb_d_find_ep+0x58>
			return i;
    265a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    265e:	e00b      	b.n	2678 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2660:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2664:	b2db      	uxtb	r3, r3
    2666:	3301      	adds	r3, #1
    2668:	b2db      	uxtb	r3, r3
    266a:	73fb      	strb	r3, [r7, #15]
    266c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2670:	2b03      	cmp	r3, #3
    2672:	ddd1      	ble.n	2618 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    2674:	f04f 33ff 	mov.w	r3, #4294967295
}
    2678:	4618      	mov	r0, r3
    267a:	3714      	adds	r7, #20
    267c:	46bd      	mov	sp, r7
    267e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2682:	4770      	bx	lr
    2684:	200013b8 	.word	0x200013b8

00002688 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    2688:	b580      	push	{r7, lr}
    268a:	b088      	sub	sp, #32
    268c:	af00      	add	r7, sp, #0
    268e:	60ba      	str	r2, [r7, #8]
    2690:	607b      	str	r3, [r7, #4]
    2692:	4603      	mov	r3, r0
    2694:	73fb      	strb	r3, [r7, #15]
    2696:	460b      	mov	r3, r1
    2698:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    269a:	68bb      	ldr	r3, [r7, #8]
    269c:	617b      	str	r3, [r7, #20]
    269e:	687b      	ldr	r3, [r7, #4]
    26a0:	61bb      	str	r3, [r7, #24]
    26a2:	7bbb      	ldrb	r3, [r7, #14]
    26a4:	2b00      	cmp	r3, #0
    26a6:	d004      	beq.n	26b2 <_usb_d_trans+0x2a>
    26a8:	7bfb      	ldrb	r3, [r7, #15]
    26aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
    26ae:	b2db      	uxtb	r3, r3
    26b0:	e003      	b.n	26ba <_usb_d_trans+0x32>
    26b2:	7bfb      	ldrb	r3, [r7, #15]
    26b4:	f003 030f 	and.w	r3, r3, #15
    26b8:	b2db      	uxtb	r3, r3
    26ba:	773b      	strb	r3, [r7, #28]
    26bc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    26c0:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    26c2:	f107 0314 	add.w	r3, r7, #20
    26c6:	4618      	mov	r0, r3
    26c8:	4b03      	ldr	r3, [pc, #12]	; (26d8 <_usb_d_trans+0x50>)
    26ca:	4798      	blx	r3
    26cc:	4603      	mov	r3, r0
}
    26ce:	4618      	mov	r0, r3
    26d0:	3720      	adds	r7, #32
    26d2:	46bd      	mov	sp, r7
    26d4:	bd80      	pop	{r7, pc}
    26d6:	bf00      	nop
    26d8:	0000a049 	.word	0x0000a049

000026dc <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    26dc:	b480      	push	{r7}
    26de:	b085      	sub	sp, #20
    26e0:	af00      	add	r7, sp, #0
    26e2:	60f8      	str	r0, [r7, #12]
    26e4:	60b9      	str	r1, [r7, #8]
    26e6:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    26e8:	2300      	movs	r3, #0
}
    26ea:	4618      	mov	r0, r3
    26ec:	3714      	adds	r7, #20
    26ee:	46bd      	mov	sp, r7
    26f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    26f4:	4770      	bx	lr
	...

000026f8 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    26f8:	b580      	push	{r7, lr}
    26fa:	b086      	sub	sp, #24
    26fc:	af00      	add	r7, sp, #0
    26fe:	4603      	mov	r3, r0
    2700:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2702:	79fb      	ldrb	r3, [r7, #7]
    2704:	4618      	mov	r0, r3
    2706:	4b2a      	ldr	r3, [pc, #168]	; (27b0 <usb_d_cb_trans_setup+0xb8>)
    2708:	4798      	blx	r3
    270a:	4603      	mov	r3, r0
    270c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    270e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2712:	015b      	lsls	r3, r3, #5
    2714:	4a27      	ldr	r2, [pc, #156]	; (27b4 <usb_d_cb_trans_setup+0xbc>)
    2716:	4413      	add	r3, r2
    2718:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    271a:	693b      	ldr	r3, [r7, #16]
    271c:	330c      	adds	r3, #12
    271e:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    2720:	79fb      	ldrb	r3, [r7, #7]
    2722:	68f9      	ldr	r1, [r7, #12]
    2724:	4618      	mov	r0, r3
    2726:	4b24      	ldr	r3, [pc, #144]	; (27b8 <usb_d_cb_trans_setup+0xc0>)
    2728:	4798      	blx	r3
    272a:	4603      	mov	r3, r0
    272c:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    272e:	7afb      	ldrb	r3, [r7, #11]
    2730:	2b08      	cmp	r3, #8
    2732:	d00d      	beq.n	2750 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2734:	79fb      	ldrb	r3, [r7, #7]
    2736:	2101      	movs	r1, #1
    2738:	4618      	mov	r0, r3
    273a:	4b20      	ldr	r3, [pc, #128]	; (27bc <usb_d_cb_trans_setup+0xc4>)
    273c:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    273e:	79fb      	ldrb	r3, [r7, #7]
    2740:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2744:	b2db      	uxtb	r3, r3
    2746:	2101      	movs	r1, #1
    2748:	4618      	mov	r0, r3
    274a:	4b1c      	ldr	r3, [pc, #112]	; (27bc <usb_d_cb_trans_setup+0xc4>)
    274c:	4798      	blx	r3
		return;
    274e:	e02b      	b.n	27a8 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2750:	79fb      	ldrb	r3, [r7, #7]
    2752:	2100      	movs	r1, #0
    2754:	4618      	mov	r0, r3
    2756:	4b19      	ldr	r3, [pc, #100]	; (27bc <usb_d_cb_trans_setup+0xc4>)
    2758:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    275a:	79fb      	ldrb	r3, [r7, #7]
    275c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2760:	b2db      	uxtb	r3, r3
    2762:	2100      	movs	r1, #0
    2764:	4618      	mov	r0, r3
    2766:	4b15      	ldr	r3, [pc, #84]	; (27bc <usb_d_cb_trans_setup+0xc4>)
    2768:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    276a:	693b      	ldr	r3, [r7, #16]
    276c:	2201      	movs	r2, #1
    276e:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    2770:	693b      	ldr	r3, [r7, #16]
    2772:	695b      	ldr	r3, [r3, #20]
    2774:	79fa      	ldrb	r2, [r7, #7]
    2776:	68f9      	ldr	r1, [r7, #12]
    2778:	4610      	mov	r0, r2
    277a:	4798      	blx	r3
    277c:	4603      	mov	r3, r0
    277e:	f083 0301 	eor.w	r3, r3, #1
    2782:	b2db      	uxtb	r3, r3
    2784:	2b00      	cmp	r3, #0
    2786:	d00f      	beq.n	27a8 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    2788:	693b      	ldr	r3, [r7, #16]
    278a:	2205      	movs	r2, #5
    278c:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    278e:	79fb      	ldrb	r3, [r7, #7]
    2790:	2101      	movs	r1, #1
    2792:	4618      	mov	r0, r3
    2794:	4b09      	ldr	r3, [pc, #36]	; (27bc <usb_d_cb_trans_setup+0xc4>)
    2796:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    2798:	79fb      	ldrb	r3, [r7, #7]
    279a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    279e:	b2db      	uxtb	r3, r3
    27a0:	2101      	movs	r1, #1
    27a2:	4618      	mov	r0, r3
    27a4:	4b05      	ldr	r3, [pc, #20]	; (27bc <usb_d_cb_trans_setup+0xc4>)
    27a6:	4798      	blx	r3
	}
}
    27a8:	3718      	adds	r7, #24
    27aa:	46bd      	mov	sp, r7
    27ac:	bd80      	pop	{r7, pc}
    27ae:	bf00      	nop
    27b0:	00002609 	.word	0x00002609
    27b4:	200013b8 	.word	0x200013b8
    27b8:	00009fa1 	.word	0x00009fa1
    27bc:	00009e19 	.word	0x00009e19

000027c0 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    27c0:	b580      	push	{r7, lr}
    27c2:	b084      	sub	sp, #16
    27c4:	af00      	add	r7, sp, #0
    27c6:	4603      	mov	r3, r0
    27c8:	6039      	str	r1, [r7, #0]
    27ca:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    27cc:	79fb      	ldrb	r3, [r7, #7]
    27ce:	4618      	mov	r0, r3
    27d0:	4b0d      	ldr	r3, [pc, #52]	; (2808 <usb_d_cb_trans_more+0x48>)
    27d2:	4798      	blx	r3
    27d4:	4603      	mov	r3, r0
    27d6:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    27d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
    27dc:	015b      	lsls	r3, r3, #5
    27de:	4a0b      	ldr	r2, [pc, #44]	; (280c <usb_d_cb_trans_more+0x4c>)
    27e0:	4413      	add	r3, r2
    27e2:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    27e4:	68bb      	ldr	r3, [r7, #8]
    27e6:	789b      	ldrb	r3, [r3, #2]
    27e8:	2b03      	cmp	r3, #3
    27ea:	d107      	bne.n	27fc <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    27ec:	68bb      	ldr	r3, [r7, #8]
    27ee:	699b      	ldr	r3, [r3, #24]
    27f0:	79fa      	ldrb	r2, [r7, #7]
    27f2:	6839      	ldr	r1, [r7, #0]
    27f4:	4610      	mov	r0, r2
    27f6:	4798      	blx	r3
    27f8:	4603      	mov	r3, r0
    27fa:	e000      	b.n	27fe <usb_d_cb_trans_more+0x3e>
	}
	return false;
    27fc:	2300      	movs	r3, #0
}
    27fe:	4618      	mov	r0, r3
    2800:	3710      	adds	r7, #16
    2802:	46bd      	mov	sp, r7
    2804:	bd80      	pop	{r7, pc}
    2806:	bf00      	nop
    2808:	00002609 	.word	0x00002609
    280c:	200013b8 	.word	0x200013b8

00002810 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    2810:	b590      	push	{r4, r7, lr}
    2812:	b087      	sub	sp, #28
    2814:	af02      	add	r7, sp, #8
    2816:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    2818:	687b      	ldr	r3, [r7, #4]
    281a:	789b      	ldrb	r3, [r3, #2]
    281c:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    281e:	687b      	ldr	r3, [r7, #4]
    2820:	7b1b      	ldrb	r3, [r3, #12]
    2822:	f003 0380 	and.w	r3, r3, #128	; 0x80
    2826:	2b00      	cmp	r3, #0
    2828:	bf14      	ite	ne
    282a:	2301      	movne	r3, #1
    282c:	2300      	moveq	r3, #0
    282e:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    2830:	7bfb      	ldrb	r3, [r7, #15]
    2832:	2b03      	cmp	r3, #3
    2834:	d13a      	bne.n	28ac <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    2836:	687b      	ldr	r3, [r7, #4]
    2838:	69db      	ldr	r3, [r3, #28]
    283a:	687a      	ldr	r2, [r7, #4]
    283c:	7850      	ldrb	r0, [r2, #1]
    283e:	687a      	ldr	r2, [r7, #4]
    2840:	320c      	adds	r2, #12
    2842:	2101      	movs	r1, #1
    2844:	4798      	blx	r3
    2846:	4603      	mov	r3, r0
    2848:	737b      	strb	r3, [r7, #13]
		if (err) {
    284a:	7b7b      	ldrb	r3, [r7, #13]
    284c:	2b00      	cmp	r3, #0
    284e:	d015      	beq.n	287c <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    2850:	687b      	ldr	r3, [r7, #4]
    2852:	2205      	movs	r2, #5
    2854:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    2856:	687b      	ldr	r3, [r7, #4]
    2858:	2202      	movs	r2, #2
    285a:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    285c:	7bbb      	ldrb	r3, [r7, #14]
    285e:	2b00      	cmp	r3, #0
    2860:	d002      	beq.n	2868 <usb_d_ctrl_trans_done+0x58>
    2862:	687b      	ldr	r3, [r7, #4]
    2864:	785b      	ldrb	r3, [r3, #1]
    2866:	e004      	b.n	2872 <usb_d_ctrl_trans_done+0x62>
    2868:	687b      	ldr	r3, [r7, #4]
    286a:	785b      	ldrb	r3, [r3, #1]
    286c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2870:	b2db      	uxtb	r3, r3
    2872:	2101      	movs	r1, #1
    2874:	4618      	mov	r0, r3
    2876:	4b15      	ldr	r3, [pc, #84]	; (28cc <usb_d_ctrl_trans_done+0xbc>)
    2878:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    287a:	e022      	b.n	28c2 <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    287c:	687b      	ldr	r3, [r7, #4]
    287e:	2204      	movs	r2, #4
    2880:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    2882:	687b      	ldr	r3, [r7, #4]
    2884:	7858      	ldrb	r0, [r3, #1]
    2886:	7bbb      	ldrb	r3, [r7, #14]
    2888:	2b00      	cmp	r3, #0
    288a:	bf14      	ite	ne
    288c:	2301      	movne	r3, #1
    288e:	2300      	moveq	r3, #0
    2890:	b2db      	uxtb	r3, r3
    2892:	f083 0301 	eor.w	r3, r3, #1
    2896:	b2db      	uxtb	r3, r3
    2898:	f003 0301 	and.w	r3, r3, #1
    289c:	b2d9      	uxtb	r1, r3
    289e:	2301      	movs	r3, #1
    28a0:	9300      	str	r3, [sp, #0]
    28a2:	2300      	movs	r3, #0
    28a4:	2200      	movs	r2, #0
    28a6:	4c0a      	ldr	r4, [pc, #40]	; (28d0 <usb_d_ctrl_trans_done+0xc0>)
    28a8:	47a0      	blx	r4
}
    28aa:	e00a      	b.n	28c2 <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    28ac:	687b      	ldr	r3, [r7, #4]
    28ae:	69db      	ldr	r3, [r3, #28]
    28b0:	687a      	ldr	r2, [r7, #4]
    28b2:	7850      	ldrb	r0, [r2, #1]
    28b4:	687a      	ldr	r2, [r7, #4]
    28b6:	320c      	adds	r2, #12
    28b8:	2100      	movs	r1, #0
    28ba:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    28bc:	687b      	ldr	r3, [r7, #4]
    28be:	2202      	movs	r2, #2
    28c0:	709a      	strb	r2, [r3, #2]
}
    28c2:	bf00      	nop
    28c4:	3714      	adds	r7, #20
    28c6:	46bd      	mov	sp, r7
    28c8:	bd90      	pop	{r4, r7, pc}
    28ca:	bf00      	nop
    28cc:	00009e19 	.word	0x00009e19
    28d0:	00002689 	.word	0x00002689

000028d4 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    28d4:	b580      	push	{r7, lr}
    28d6:	b086      	sub	sp, #24
    28d8:	af00      	add	r7, sp, #0
    28da:	4603      	mov	r3, r0
    28dc:	60b9      	str	r1, [r7, #8]
    28de:	607a      	str	r2, [r7, #4]
    28e0:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    28e2:	7bfb      	ldrb	r3, [r7, #15]
    28e4:	4618      	mov	r0, r3
    28e6:	4b2f      	ldr	r3, [pc, #188]	; (29a4 <_usb_d_cb_trans_done+0xd0>)
    28e8:	4798      	blx	r3
    28ea:	4603      	mov	r3, r0
    28ec:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    28ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
    28f2:	015b      	lsls	r3, r3, #5
    28f4:	4a2c      	ldr	r2, [pc, #176]	; (29a8 <_usb_d_cb_trans_done+0xd4>)
    28f6:	4413      	add	r3, r2
    28f8:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    28fa:	68bb      	ldr	r3, [r7, #8]
    28fc:	2b00      	cmp	r3, #0
    28fe:	d10e      	bne.n	291e <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    2900:	693b      	ldr	r3, [r7, #16]
    2902:	2200      	movs	r2, #0
    2904:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2906:	693b      	ldr	r3, [r7, #16]
    2908:	781b      	ldrb	r3, [r3, #0]
    290a:	2b00      	cmp	r3, #0
    290c:	d103      	bne.n	2916 <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    290e:	6938      	ldr	r0, [r7, #16]
    2910:	4b26      	ldr	r3, [pc, #152]	; (29ac <_usb_d_cb_trans_done+0xd8>)
    2912:	4798      	blx	r3
			return;
    2914:	e043      	b.n	299e <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    2916:	693b      	ldr	r3, [r7, #16]
    2918:	2201      	movs	r2, #1
    291a:	709a      	strb	r2, [r3, #2]
    291c:	e038      	b.n	2990 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    291e:	68bb      	ldr	r3, [r7, #8]
    2920:	2b01      	cmp	r3, #1
    2922:	d113      	bne.n	294c <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    2924:	693b      	ldr	r3, [r7, #16]
    2926:	2202      	movs	r2, #2
    2928:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    292a:	693b      	ldr	r3, [r7, #16]
    292c:	781b      	ldrb	r3, [r3, #0]
    292e:	2b00      	cmp	r3, #0
    2930:	d108      	bne.n	2944 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2932:	693b      	ldr	r3, [r7, #16]
    2934:	2202      	movs	r2, #2
    2936:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2938:	7bfb      	ldrb	r3, [r7, #15]
    293a:	2100      	movs	r1, #0
    293c:	4618      	mov	r0, r3
    293e:	4b1c      	ldr	r3, [pc, #112]	; (29b0 <_usb_d_cb_trans_done+0xdc>)
    2940:	4798      	blx	r3
    2942:	e025      	b.n	2990 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    2944:	693b      	ldr	r3, [r7, #16]
    2946:	2205      	movs	r2, #5
    2948:	709a      	strb	r2, [r3, #2]
    294a:	e021      	b.n	2990 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    294c:	68bb      	ldr	r3, [r7, #8]
    294e:	2b02      	cmp	r3, #2
    2950:	d10e      	bne.n	2970 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    2952:	693b      	ldr	r3, [r7, #16]
    2954:	2204      	movs	r2, #4
    2956:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2958:	693b      	ldr	r3, [r7, #16]
    295a:	781b      	ldrb	r3, [r3, #0]
    295c:	2b00      	cmp	r3, #0
    295e:	d103      	bne.n	2968 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2960:	693b      	ldr	r3, [r7, #16]
    2962:	2202      	movs	r2, #2
    2964:	709a      	strb	r2, [r3, #2]
			return;
    2966:	e01a      	b.n	299e <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    2968:	693b      	ldr	r3, [r7, #16]
    296a:	2201      	movs	r2, #1
    296c:	709a      	strb	r2, [r3, #2]
    296e:	e00f      	b.n	2990 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    2970:	68bb      	ldr	r3, [r7, #8]
    2972:	2b03      	cmp	r3, #3
    2974:	d106      	bne.n	2984 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    2976:	693b      	ldr	r3, [r7, #16]
    2978:	2200      	movs	r2, #0
    297a:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    297c:	693b      	ldr	r3, [r7, #16]
    297e:	2205      	movs	r2, #5
    2980:	70da      	strb	r2, [r3, #3]
    2982:	e005      	b.n	2990 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    2984:	693b      	ldr	r3, [r7, #16]
    2986:	2206      	movs	r2, #6
    2988:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    298a:	693b      	ldr	r3, [r7, #16]
    298c:	2206      	movs	r2, #6
    298e:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    2990:	693b      	ldr	r3, [r7, #16]
    2992:	69db      	ldr	r3, [r3, #28]
    2994:	693a      	ldr	r2, [r7, #16]
    2996:	78d1      	ldrb	r1, [r2, #3]
    2998:	687a      	ldr	r2, [r7, #4]
    299a:	7bf8      	ldrb	r0, [r7, #15]
    299c:	4798      	blx	r3
}
    299e:	3718      	adds	r7, #24
    29a0:	46bd      	mov	sp, r7
    29a2:	bd80      	pop	{r7, pc}
    29a4:	00002609 	.word	0x00002609
    29a8:	200013b8 	.word	0x200013b8
    29ac:	00002811 	.word	0x00002811
    29b0:	00009e19 	.word	0x00009e19

000029b4 <usb_d_init>:

int32_t usb_d_init(void)
{
    29b4:	b580      	push	{r7, lr}
    29b6:	b082      	sub	sp, #8
    29b8:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    29ba:	4b21      	ldr	r3, [pc, #132]	; (2a40 <usb_d_init+0x8c>)
    29bc:	4798      	blx	r3
    29be:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    29c0:	683b      	ldr	r3, [r7, #0]
    29c2:	2b00      	cmp	r3, #0
    29c4:	da01      	bge.n	29ca <usb_d_init+0x16>
		return rc;
    29c6:	683b      	ldr	r3, [r7, #0]
    29c8:	e036      	b.n	2a38 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    29ca:	2280      	movs	r2, #128	; 0x80
    29cc:	2100      	movs	r1, #0
    29ce:	481d      	ldr	r0, [pc, #116]	; (2a44 <usb_d_init+0x90>)
    29d0:	4b1d      	ldr	r3, [pc, #116]	; (2a48 <usb_d_init+0x94>)
    29d2:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    29d4:	2300      	movs	r3, #0
    29d6:	71fb      	strb	r3, [r7, #7]
    29d8:	e01e      	b.n	2a18 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    29da:	79fb      	ldrb	r3, [r7, #7]
    29dc:	4a19      	ldr	r2, [pc, #100]	; (2a44 <usb_d_init+0x90>)
    29de:	015b      	lsls	r3, r3, #5
    29e0:	4413      	add	r3, r2
    29e2:	3301      	adds	r3, #1
    29e4:	22ff      	movs	r2, #255	; 0xff
    29e6:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    29e8:	79fb      	ldrb	r3, [r7, #7]
    29ea:	4a16      	ldr	r2, [pc, #88]	; (2a44 <usb_d_init+0x90>)
    29ec:	015b      	lsls	r3, r3, #5
    29ee:	4413      	add	r3, r2
    29f0:	3314      	adds	r3, #20
    29f2:	4a16      	ldr	r2, [pc, #88]	; (2a4c <usb_d_init+0x98>)
    29f4:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    29f6:	79fb      	ldrb	r3, [r7, #7]
    29f8:	4a12      	ldr	r2, [pc, #72]	; (2a44 <usb_d_init+0x90>)
    29fa:	015b      	lsls	r3, r3, #5
    29fc:	4413      	add	r3, r2
    29fe:	3318      	adds	r3, #24
    2a00:	4a12      	ldr	r2, [pc, #72]	; (2a4c <usb_d_init+0x98>)
    2a02:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    2a04:	79fb      	ldrb	r3, [r7, #7]
    2a06:	4a0f      	ldr	r2, [pc, #60]	; (2a44 <usb_d_init+0x90>)
    2a08:	015b      	lsls	r3, r3, #5
    2a0a:	4413      	add	r3, r2
    2a0c:	331c      	adds	r3, #28
    2a0e:	4a0f      	ldr	r2, [pc, #60]	; (2a4c <usb_d_init+0x98>)
    2a10:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2a12:	79fb      	ldrb	r3, [r7, #7]
    2a14:	3301      	adds	r3, #1
    2a16:	71fb      	strb	r3, [r7, #7]
    2a18:	79fb      	ldrb	r3, [r7, #7]
    2a1a:	2b03      	cmp	r3, #3
    2a1c:	d9dd      	bls.n	29da <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    2a1e:	490c      	ldr	r1, [pc, #48]	; (2a50 <usb_d_init+0x9c>)
    2a20:	2000      	movs	r0, #0
    2a22:	4b0c      	ldr	r3, [pc, #48]	; (2a54 <usb_d_init+0xa0>)
    2a24:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    2a26:	490c      	ldr	r1, [pc, #48]	; (2a58 <usb_d_init+0xa4>)
    2a28:	2001      	movs	r0, #1
    2a2a:	4b0a      	ldr	r3, [pc, #40]	; (2a54 <usb_d_init+0xa0>)
    2a2c:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    2a2e:	490b      	ldr	r1, [pc, #44]	; (2a5c <usb_d_init+0xa8>)
    2a30:	2002      	movs	r0, #2
    2a32:	4b08      	ldr	r3, [pc, #32]	; (2a54 <usb_d_init+0xa0>)
    2a34:	4798      	blx	r3
	return ERR_NONE;
    2a36:	2300      	movs	r3, #0
}
    2a38:	4618      	mov	r0, r3
    2a3a:	3708      	adds	r7, #8
    2a3c:	46bd      	mov	sp, r7
    2a3e:	bd80      	pop	{r7, pc}
    2a40:	00009661 	.word	0x00009661
    2a44:	200013b8 	.word	0x200013b8
    2a48:	00012cf9 	.word	0x00012cf9
    2a4c:	000026dd 	.word	0x000026dd
    2a50:	000026f9 	.word	0x000026f9
    2a54:	0000a255 	.word	0x0000a255
    2a58:	000027c1 	.word	0x000027c1
    2a5c:	000028d5 	.word	0x000028d5

00002a60 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    2a60:	b580      	push	{r7, lr}
    2a62:	b082      	sub	sp, #8
    2a64:	af00      	add	r7, sp, #0
    2a66:	4603      	mov	r3, r0
    2a68:	6039      	str	r1, [r7, #0]
    2a6a:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    2a6c:	79fb      	ldrb	r3, [r7, #7]
    2a6e:	6839      	ldr	r1, [r7, #0]
    2a70:	4618      	mov	r0, r3
    2a72:	4b03      	ldr	r3, [pc, #12]	; (2a80 <usb_d_register_callback+0x20>)
    2a74:	4798      	blx	r3
}
    2a76:	bf00      	nop
    2a78:	3708      	adds	r7, #8
    2a7a:	46bd      	mov	sp, r7
    2a7c:	bd80      	pop	{r7, pc}
    2a7e:	bf00      	nop
    2a80:	0000a20d 	.word	0x0000a20d

00002a84 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    2a84:	b580      	push	{r7, lr}
    2a86:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    2a88:	4b02      	ldr	r3, [pc, #8]	; (2a94 <usb_d_enable+0x10>)
    2a8a:	4798      	blx	r3
    2a8c:	4603      	mov	r3, r0
}
    2a8e:	4618      	mov	r0, r3
    2a90:	bd80      	pop	{r7, pc}
    2a92:	bf00      	nop
    2a94:	00009751 	.word	0x00009751

00002a98 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    2a98:	b580      	push	{r7, lr}
    2a9a:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    2a9c:	4b01      	ldr	r3, [pc, #4]	; (2aa4 <usb_d_attach+0xc>)
    2a9e:	4798      	blx	r3
}
    2aa0:	bf00      	nop
    2aa2:	bd80      	pop	{r7, pc}
    2aa4:	000097d5 	.word	0x000097d5

00002aa8 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    2aa8:	b580      	push	{r7, lr}
    2aaa:	b082      	sub	sp, #8
    2aac:	af00      	add	r7, sp, #0
    2aae:	4603      	mov	r3, r0
    2ab0:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    2ab2:	79fb      	ldrb	r3, [r7, #7]
    2ab4:	4618      	mov	r0, r3
    2ab6:	4b03      	ldr	r3, [pc, #12]	; (2ac4 <usb_d_set_address+0x1c>)
    2ab8:	4798      	blx	r3
}
    2aba:	bf00      	nop
    2abc:	3708      	adds	r7, #8
    2abe:	46bd      	mov	sp, r7
    2ac0:	bd80      	pop	{r7, pc}
    2ac2:	bf00      	nop
    2ac4:	000097e9 	.word	0x000097e9

00002ac8 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    2ac8:	b580      	push	{r7, lr}
    2aca:	b082      	sub	sp, #8
    2acc:	af00      	add	r7, sp, #0
    2ace:	4603      	mov	r3, r0
    2ad0:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    2ad2:	79fb      	ldrb	r3, [r7, #7]
    2ad4:	b29b      	uxth	r3, r3
    2ad6:	461a      	mov	r2, r3
    2ad8:	2100      	movs	r1, #0
    2ada:	2000      	movs	r0, #0
    2adc:	4b03      	ldr	r3, [pc, #12]	; (2aec <usb_d_ep0_init+0x24>)
    2ade:	4798      	blx	r3
    2ae0:	4603      	mov	r3, r0
}
    2ae2:	4618      	mov	r0, r3
    2ae4:	3708      	adds	r7, #8
    2ae6:	46bd      	mov	sp, r7
    2ae8:	bd80      	pop	{r7, pc}
    2aea:	bf00      	nop
    2aec:	00002af1 	.word	0x00002af1

00002af0 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    2af0:	b580      	push	{r7, lr}
    2af2:	b086      	sub	sp, #24
    2af4:	af00      	add	r7, sp, #0
    2af6:	4603      	mov	r3, r0
    2af8:	71fb      	strb	r3, [r7, #7]
    2afa:	460b      	mov	r3, r1
    2afc:	71bb      	strb	r3, [r7, #6]
    2afe:	4613      	mov	r3, r2
    2b00:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    2b02:	79fb      	ldrb	r3, [r7, #7]
    2b04:	4618      	mov	r0, r3
    2b06:	4b1e      	ldr	r3, [pc, #120]	; (2b80 <usb_d_ep_init+0x90>)
    2b08:	4798      	blx	r3
    2b0a:	4603      	mov	r3, r0
    2b0c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2b0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2b12:	015b      	lsls	r3, r3, #5
    2b14:	4a1b      	ldr	r2, [pc, #108]	; (2b84 <usb_d_ep_init+0x94>)
    2b16:	4413      	add	r3, r2
    2b18:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    2b1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2b1e:	2b00      	cmp	r3, #0
    2b20:	db02      	blt.n	2b28 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    2b22:	f06f 0313 	mvn.w	r3, #19
    2b26:	e027      	b.n	2b78 <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    2b28:	20ff      	movs	r0, #255	; 0xff
    2b2a:	4b15      	ldr	r3, [pc, #84]	; (2b80 <usb_d_ep_init+0x90>)
    2b2c:	4798      	blx	r3
    2b2e:	4603      	mov	r3, r0
    2b30:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    2b32:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2b36:	2b00      	cmp	r3, #0
    2b38:	da02      	bge.n	2b40 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    2b3a:	f06f 0314 	mvn.w	r3, #20
    2b3e:	e01b      	b.n	2b78 <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    2b40:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2b44:	015b      	lsls	r3, r3, #5
    2b46:	4a0f      	ldr	r2, [pc, #60]	; (2b84 <usb_d_ep_init+0x94>)
    2b48:	4413      	add	r3, r2
    2b4a:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    2b4c:	88ba      	ldrh	r2, [r7, #4]
    2b4e:	79b9      	ldrb	r1, [r7, #6]
    2b50:	79fb      	ldrb	r3, [r7, #7]
    2b52:	4618      	mov	r0, r3
    2b54:	4b0c      	ldr	r3, [pc, #48]	; (2b88 <usb_d_ep_init+0x98>)
    2b56:	4798      	blx	r3
    2b58:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    2b5a:	68fb      	ldr	r3, [r7, #12]
    2b5c:	2b00      	cmp	r3, #0
    2b5e:	da01      	bge.n	2b64 <usb_d_ep_init+0x74>
		return rc;
    2b60:	68fb      	ldr	r3, [r7, #12]
    2b62:	e009      	b.n	2b78 <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    2b64:	693b      	ldr	r3, [r7, #16]
    2b66:	79fa      	ldrb	r2, [r7, #7]
    2b68:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    2b6a:	79bb      	ldrb	r3, [r7, #6]
    2b6c:	f003 0303 	and.w	r3, r3, #3
    2b70:	b2da      	uxtb	r2, r3
    2b72:	693b      	ldr	r3, [r7, #16]
    2b74:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    2b76:	2300      	movs	r3, #0
}
    2b78:	4618      	mov	r0, r3
    2b7a:	3718      	adds	r7, #24
    2b7c:	46bd      	mov	sp, r7
    2b7e:	bd80      	pop	{r7, pc}
    2b80:	00002609 	.word	0x00002609
    2b84:	200013b8 	.word	0x200013b8
    2b88:	00009889 	.word	0x00009889

00002b8c <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    2b8c:	b580      	push	{r7, lr}
    2b8e:	b084      	sub	sp, #16
    2b90:	af00      	add	r7, sp, #0
    2b92:	4603      	mov	r3, r0
    2b94:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2b96:	79fb      	ldrb	r3, [r7, #7]
    2b98:	4618      	mov	r0, r3
    2b9a:	4b0d      	ldr	r3, [pc, #52]	; (2bd0 <usb_d_ep_deinit+0x44>)
    2b9c:	4798      	blx	r3
    2b9e:	4603      	mov	r3, r0
    2ba0:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2ba6:	015b      	lsls	r3, r3, #5
    2ba8:	4a0a      	ldr	r2, [pc, #40]	; (2bd4 <usb_d_ep_deinit+0x48>)
    2baa:	4413      	add	r3, r2
    2bac:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    2bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2bb2:	2b00      	cmp	r3, #0
    2bb4:	db07      	blt.n	2bc6 <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    2bb6:	79fb      	ldrb	r3, [r7, #7]
    2bb8:	4618      	mov	r0, r3
    2bba:	4b07      	ldr	r3, [pc, #28]	; (2bd8 <usb_d_ep_deinit+0x4c>)
    2bbc:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    2bbe:	68bb      	ldr	r3, [r7, #8]
    2bc0:	22ff      	movs	r2, #255	; 0xff
    2bc2:	705a      	strb	r2, [r3, #1]
    2bc4:	e000      	b.n	2bc8 <usb_d_ep_deinit+0x3c>
		return;
    2bc6:	bf00      	nop
}
    2bc8:	3710      	adds	r7, #16
    2bca:	46bd      	mov	sp, r7
    2bcc:	bd80      	pop	{r7, pc}
    2bce:	bf00      	nop
    2bd0:	00002609 	.word	0x00002609
    2bd4:	200013b8 	.word	0x200013b8
    2bd8:	000099bd 	.word	0x000099bd

00002bdc <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    2bdc:	b580      	push	{r7, lr}
    2bde:	b086      	sub	sp, #24
    2be0:	af00      	add	r7, sp, #0
    2be2:	4603      	mov	r3, r0
    2be4:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2be6:	79fb      	ldrb	r3, [r7, #7]
    2be8:	4618      	mov	r0, r3
    2bea:	4b15      	ldr	r3, [pc, #84]	; (2c40 <usb_d_ep_enable+0x64>)
    2bec:	4798      	blx	r3
    2bee:	4603      	mov	r3, r0
    2bf0:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2bf2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2bf6:	015b      	lsls	r3, r3, #5
    2bf8:	4a12      	ldr	r2, [pc, #72]	; (2c44 <usb_d_ep_enable+0x68>)
    2bfa:	4413      	add	r3, r2
    2bfc:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    2bfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2c02:	2b00      	cmp	r3, #0
    2c04:	da02      	bge.n	2c0c <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    2c06:	f06f 0311 	mvn.w	r3, #17
    2c0a:	e014      	b.n	2c36 <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    2c0c:	693b      	ldr	r3, [r7, #16]
    2c0e:	781b      	ldrb	r3, [r3, #0]
    2c10:	2b00      	cmp	r3, #0
    2c12:	d101      	bne.n	2c18 <usb_d_ep_enable+0x3c>
    2c14:	2202      	movs	r2, #2
    2c16:	e000      	b.n	2c1a <usb_d_ep_enable+0x3e>
    2c18:	2201      	movs	r2, #1
    2c1a:	693b      	ldr	r3, [r7, #16]
    2c1c:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    2c1e:	79fb      	ldrb	r3, [r7, #7]
    2c20:	4618      	mov	r0, r3
    2c22:	4b09      	ldr	r3, [pc, #36]	; (2c48 <usb_d_ep_enable+0x6c>)
    2c24:	4798      	blx	r3
    2c26:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    2c28:	68fb      	ldr	r3, [r7, #12]
    2c2a:	2b00      	cmp	r3, #0
    2c2c:	da02      	bge.n	2c34 <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    2c2e:	693b      	ldr	r3, [r7, #16]
    2c30:	2200      	movs	r2, #0
    2c32:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    2c34:	68fb      	ldr	r3, [r7, #12]
}
    2c36:	4618      	mov	r0, r3
    2c38:	3718      	adds	r7, #24
    2c3a:	46bd      	mov	sp, r7
    2c3c:	bd80      	pop	{r7, pc}
    2c3e:	bf00      	nop
    2c40:	00002609 	.word	0x00002609
    2c44:	200013b8 	.word	0x200013b8
    2c48:	00009aa1 	.word	0x00009aa1

00002c4c <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    2c4c:	b590      	push	{r4, r7, lr}
    2c4e:	b08d      	sub	sp, #52	; 0x34
    2c50:	af02      	add	r7, sp, #8
    2c52:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    2c54:	687b      	ldr	r3, [r7, #4]
    2c56:	7a1b      	ldrb	r3, [r3, #8]
    2c58:	4618      	mov	r0, r3
    2c5a:	4b51      	ldr	r3, [pc, #324]	; (2da0 <usb_d_ep_transfer+0x154>)
    2c5c:	4798      	blx	r3
    2c5e:	4603      	mov	r3, r0
    2c60:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    2c62:	f997 301f 	ldrsb.w	r3, [r7, #31]
    2c66:	015b      	lsls	r3, r3, #5
    2c68:	4a4e      	ldr	r2, [pc, #312]	; (2da4 <usb_d_ep_transfer+0x158>)
    2c6a:	4413      	add	r3, r2
    2c6c:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    2c6e:	687b      	ldr	r3, [r7, #4]
    2c70:	7a1b      	ldrb	r3, [r3, #8]
    2c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
    2c76:	2b00      	cmp	r3, #0
    2c78:	bf14      	ite	ne
    2c7a:	2301      	movne	r3, #1
    2c7c:	2300      	moveq	r3, #0
    2c7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    2c82:	687b      	ldr	r3, [r7, #4]
    2c84:	7a5b      	ldrb	r3, [r3, #9]
    2c86:	2b00      	cmp	r3, #0
    2c88:	bf14      	ite	ne
    2c8a:	2301      	movne	r3, #1
    2c8c:	2300      	moveq	r3, #0
    2c8e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    2c92:	687b      	ldr	r3, [r7, #4]
    2c94:	685b      	ldr	r3, [r3, #4]
    2c96:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    2c98:	f997 301f 	ldrsb.w	r3, [r7, #31]
    2c9c:	2b00      	cmp	r3, #0
    2c9e:	da02      	bge.n	2ca6 <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    2ca0:	f06f 0311 	mvn.w	r3, #17
    2ca4:	e077      	b.n	2d96 <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    2ca6:	f107 0308 	add.w	r3, r7, #8
    2caa:	4618      	mov	r0, r3
    2cac:	4b3e      	ldr	r3, [pc, #248]	; (2da8 <usb_d_ep_transfer+0x15c>)
    2cae:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    2cb0:	69bb      	ldr	r3, [r7, #24]
    2cb2:	789b      	ldrb	r3, [r3, #2]
    2cb4:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    2cb6:	7bfb      	ldrb	r3, [r7, #15]
    2cb8:	b2db      	uxtb	r3, r3
    2cba:	2b01      	cmp	r3, #1
    2cbc:	d10c      	bne.n	2cd8 <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    2cbe:	69bb      	ldr	r3, [r7, #24]
    2cc0:	2203      	movs	r2, #3
    2cc2:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    2cc4:	f107 0308 	add.w	r3, r7, #8
    2cc8:	4618      	mov	r0, r3
    2cca:	4b38      	ldr	r3, [pc, #224]	; (2dac <usb_d_ep_transfer+0x160>)
    2ccc:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2cce:	69bb      	ldr	r3, [r7, #24]
    2cd0:	781b      	ldrb	r3, [r3, #0]
    2cd2:	2b00      	cmp	r3, #0
    2cd4:	d151      	bne.n	2d7a <usb_d_ep_transfer+0x12e>
    2cd6:	e017      	b.n	2d08 <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    2cd8:	f107 0308 	add.w	r3, r7, #8
    2cdc:	4618      	mov	r0, r3
    2cde:	4b33      	ldr	r3, [pc, #204]	; (2dac <usb_d_ep_transfer+0x160>)
    2ce0:	4798      	blx	r3
		switch (state) {
    2ce2:	7bfb      	ldrb	r3, [r7, #15]
    2ce4:	b2db      	uxtb	r3, r3
    2ce6:	2b05      	cmp	r3, #5
    2ce8:	d004      	beq.n	2cf4 <usb_d_ep_transfer+0xa8>
    2cea:	2b06      	cmp	r3, #6
    2cec:	d004      	beq.n	2cf8 <usb_d_ep_transfer+0xac>
    2cee:	2b00      	cmp	r3, #0
    2cf0:	d005      	beq.n	2cfe <usb_d_ep_transfer+0xb2>
    2cf2:	e007      	b.n	2d04 <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    2cf4:	2302      	movs	r3, #2
    2cf6:	e04e      	b.n	2d96 <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    2cf8:	f06f 030f 	mvn.w	r3, #15
    2cfc:	e04b      	b.n	2d96 <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    2cfe:	f06f 0312 	mvn.w	r3, #18
    2d02:	e048      	b.n	2d96 <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    2d04:	2301      	movs	r3, #1
    2d06:	e046      	b.n	2d96 <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    2d08:	69bb      	ldr	r3, [r7, #24]
    2d0a:	7c9b      	ldrb	r3, [r3, #18]
    2d0c:	b29a      	uxth	r2, r3
    2d0e:	69bb      	ldr	r3, [r7, #24]
    2d10:	7cdb      	ldrb	r3, [r3, #19]
    2d12:	b29b      	uxth	r3, r3
    2d14:	021b      	lsls	r3, r3, #8
    2d16:	b29b      	uxth	r3, r3
    2d18:	4413      	add	r3, r2
    2d1a:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    2d1c:	8afb      	ldrh	r3, [r7, #22]
    2d1e:	2b00      	cmp	r3, #0
    2d20:	d10b      	bne.n	2d3a <usb_d_ep_transfer+0xee>
			dir                 = true;
    2d22:	2301      	movs	r3, #1
    2d24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    2d28:	2300      	movs	r3, #0
    2d2a:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    2d2c:	2301      	movs	r3, #1
    2d2e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    2d32:	69bb      	ldr	r3, [r7, #24]
    2d34:	2204      	movs	r2, #4
    2d36:	709a      	strb	r2, [r3, #2]
    2d38:	e01f      	b.n	2d7a <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    2d3a:	69bb      	ldr	r3, [r7, #24]
    2d3c:	7b1b      	ldrb	r3, [r3, #12]
    2d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    2d42:	2b00      	cmp	r3, #0
    2d44:	bf14      	ite	ne
    2d46:	2301      	movne	r3, #1
    2d48:	2300      	moveq	r3, #0
    2d4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    2d4e:	8afa      	ldrh	r2, [r7, #22]
    2d50:	6a3b      	ldr	r3, [r7, #32]
    2d52:	429a      	cmp	r2, r3
    2d54:	d201      	bcs.n	2d5a <usb_d_ep_transfer+0x10e>
				len = req_len;
    2d56:	8afb      	ldrh	r3, [r7, #22]
    2d58:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    2d5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    2d5e:	2b00      	cmp	r3, #0
    2d60:	d008      	beq.n	2d74 <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    2d62:	8afa      	ldrh	r2, [r7, #22]
    2d64:	6a3b      	ldr	r3, [r7, #32]
    2d66:	429a      	cmp	r2, r3
    2d68:	bf8c      	ite	hi
    2d6a:	2301      	movhi	r3, #1
    2d6c:	2300      	movls	r3, #0
    2d6e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    2d72:	e002      	b.n	2d7a <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    2d74:	2300      	movs	r3, #0
    2d76:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    2d7a:	687b      	ldr	r3, [r7, #4]
    2d7c:	7a18      	ldrb	r0, [r3, #8]
    2d7e:	687b      	ldr	r3, [r7, #4]
    2d80:	681a      	ldr	r2, [r3, #0]
    2d82:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    2d86:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    2d8a:	9300      	str	r3, [sp, #0]
    2d8c:	6a3b      	ldr	r3, [r7, #32]
    2d8e:	4c08      	ldr	r4, [pc, #32]	; (2db0 <usb_d_ep_transfer+0x164>)
    2d90:	47a0      	blx	r4
    2d92:	6138      	str	r0, [r7, #16]
	return rc;
    2d94:	693b      	ldr	r3, [r7, #16]
}
    2d96:	4618      	mov	r0, r3
    2d98:	372c      	adds	r7, #44	; 0x2c
    2d9a:	46bd      	mov	sp, r7
    2d9c:	bd90      	pop	{r4, r7, pc}
    2d9e:	bf00      	nop
    2da0:	00002609 	.word	0x00002609
    2da4:	200013b8 	.word	0x200013b8
    2da8:	0000a9c1 	.word	0x0000a9c1
    2dac:	0000a9e7 	.word	0x0000a9e7
    2db0:	00002689 	.word	0x00002689

00002db4 <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    2db4:	b580      	push	{r7, lr}
    2db6:	b086      	sub	sp, #24
    2db8:	af00      	add	r7, sp, #0
    2dba:	4603      	mov	r3, r0
    2dbc:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2dbe:	79fb      	ldrb	r3, [r7, #7]
    2dc0:	4618      	mov	r0, r3
    2dc2:	4b1a      	ldr	r3, [pc, #104]	; (2e2c <_usb_d_ep_halt_clr+0x78>)
    2dc4:	4798      	blx	r3
    2dc6:	4603      	mov	r3, r0
    2dc8:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2dca:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2dce:	015b      	lsls	r3, r3, #5
    2dd0:	4a17      	ldr	r2, [pc, #92]	; (2e30 <_usb_d_ep_halt_clr+0x7c>)
    2dd2:	4413      	add	r3, r2
    2dd4:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    2dd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2dda:	2b00      	cmp	r3, #0
    2ddc:	da02      	bge.n	2de4 <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    2dde:	f06f 0311 	mvn.w	r3, #17
    2de2:	e01f      	b.n	2e24 <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    2de4:	79fb      	ldrb	r3, [r7, #7]
    2de6:	2102      	movs	r1, #2
    2de8:	4618      	mov	r0, r3
    2dea:	4b12      	ldr	r3, [pc, #72]	; (2e34 <_usb_d_ep_halt_clr+0x80>)
    2dec:	4798      	blx	r3
    2dee:	4603      	mov	r3, r0
    2df0:	2b00      	cmp	r3, #0
    2df2:	d016      	beq.n	2e22 <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2df4:	79fb      	ldrb	r3, [r7, #7]
    2df6:	2100      	movs	r1, #0
    2df8:	4618      	mov	r0, r3
    2dfa:	4b0e      	ldr	r3, [pc, #56]	; (2e34 <_usb_d_ep_halt_clr+0x80>)
    2dfc:	4798      	blx	r3
    2dfe:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    2e00:	68fb      	ldr	r3, [r7, #12]
    2e02:	2b00      	cmp	r3, #0
    2e04:	da01      	bge.n	2e0a <_usb_d_ep_halt_clr+0x56>
			return rc;
    2e06:	68fb      	ldr	r3, [r7, #12]
    2e08:	e00c      	b.n	2e24 <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    2e0a:	693b      	ldr	r3, [r7, #16]
    2e0c:	2201      	movs	r2, #1
    2e0e:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    2e10:	693b      	ldr	r3, [r7, #16]
    2e12:	2203      	movs	r2, #3
    2e14:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    2e16:	693b      	ldr	r3, [r7, #16]
    2e18:	69db      	ldr	r3, [r3, #28]
    2e1a:	79f8      	ldrb	r0, [r7, #7]
    2e1c:	2200      	movs	r2, #0
    2e1e:	2103      	movs	r1, #3
    2e20:	4798      	blx	r3
	}
	return ERR_NONE;
    2e22:	2300      	movs	r3, #0
}
    2e24:	4618      	mov	r0, r3
    2e26:	3718      	adds	r7, #24
    2e28:	46bd      	mov	sp, r7
    2e2a:	bd80      	pop	{r7, pc}
    2e2c:	00002609 	.word	0x00002609
    2e30:	200013b8 	.word	0x200013b8
    2e34:	00009e19 	.word	0x00009e19

00002e38 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    2e38:	b580      	push	{r7, lr}
    2e3a:	b082      	sub	sp, #8
    2e3c:	af00      	add	r7, sp, #0
    2e3e:	4603      	mov	r3, r0
    2e40:	460a      	mov	r2, r1
    2e42:	71fb      	strb	r3, [r7, #7]
    2e44:	4613      	mov	r3, r2
    2e46:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    2e48:	79bb      	ldrb	r3, [r7, #6]
    2e4a:	2b00      	cmp	r3, #0
    2e4c:	d105      	bne.n	2e5a <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    2e4e:	79fb      	ldrb	r3, [r7, #7]
    2e50:	4618      	mov	r0, r3
    2e52:	4b0c      	ldr	r3, [pc, #48]	; (2e84 <usb_d_ep_halt+0x4c>)
    2e54:	4798      	blx	r3
    2e56:	4603      	mov	r3, r0
    2e58:	e00f      	b.n	2e7a <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    2e5a:	79bb      	ldrb	r3, [r7, #6]
    2e5c:	2b01      	cmp	r3, #1
    2e5e:	d106      	bne.n	2e6e <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2e60:	79fb      	ldrb	r3, [r7, #7]
    2e62:	2101      	movs	r1, #1
    2e64:	4618      	mov	r0, r3
    2e66:	4b08      	ldr	r3, [pc, #32]	; (2e88 <usb_d_ep_halt+0x50>)
    2e68:	4798      	blx	r3
    2e6a:	4603      	mov	r3, r0
    2e6c:	e005      	b.n	2e7a <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    2e6e:	79fb      	ldrb	r3, [r7, #7]
    2e70:	2102      	movs	r1, #2
    2e72:	4618      	mov	r0, r3
    2e74:	4b04      	ldr	r3, [pc, #16]	; (2e88 <usb_d_ep_halt+0x50>)
    2e76:	4798      	blx	r3
    2e78:	4603      	mov	r3, r0
	}
}
    2e7a:	4618      	mov	r0, r3
    2e7c:	3708      	adds	r7, #8
    2e7e:	46bd      	mov	sp, r7
    2e80:	bd80      	pop	{r7, pc}
    2e82:	bf00      	nop
    2e84:	00002db5 	.word	0x00002db5
    2e88:	00009e19 	.word	0x00009e19

00002e8c <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    2e8c:	b580      	push	{r7, lr}
    2e8e:	b086      	sub	sp, #24
    2e90:	af00      	add	r7, sp, #0
    2e92:	4603      	mov	r3, r0
    2e94:	603a      	str	r2, [r7, #0]
    2e96:	71fb      	strb	r3, [r7, #7]
    2e98:	460b      	mov	r3, r1
    2e9a:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2e9c:	79fb      	ldrb	r3, [r7, #7]
    2e9e:	4618      	mov	r0, r3
    2ea0:	4b16      	ldr	r3, [pc, #88]	; (2efc <usb_d_ep_register_callback+0x70>)
    2ea2:	4798      	blx	r3
    2ea4:	4603      	mov	r3, r0
    2ea6:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2ea8:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2eac:	015b      	lsls	r3, r3, #5
    2eae:	4a14      	ldr	r2, [pc, #80]	; (2f00 <usb_d_ep_register_callback+0x74>)
    2eb0:	4413      	add	r3, r2
    2eb2:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    2eb4:	683b      	ldr	r3, [r7, #0]
    2eb6:	2b00      	cmp	r3, #0
    2eb8:	d001      	beq.n	2ebe <usb_d_ep_register_callback+0x32>
    2eba:	683b      	ldr	r3, [r7, #0]
    2ebc:	e000      	b.n	2ec0 <usb_d_ep_register_callback+0x34>
    2ebe:	4b11      	ldr	r3, [pc, #68]	; (2f04 <usb_d_ep_register_callback+0x78>)
    2ec0:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    2ec2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2ec6:	2b00      	cmp	r3, #0
    2ec8:	db13      	blt.n	2ef2 <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    2eca:	79bb      	ldrb	r3, [r7, #6]
    2ecc:	2b01      	cmp	r3, #1
    2ece:	d008      	beq.n	2ee2 <usb_d_ep_register_callback+0x56>
    2ed0:	2b02      	cmp	r3, #2
    2ed2:	d00a      	beq.n	2eea <usb_d_ep_register_callback+0x5e>
    2ed4:	2b00      	cmp	r3, #0
    2ed6:	d000      	beq.n	2eda <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    2ed8:	e00c      	b.n	2ef4 <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    2eda:	693b      	ldr	r3, [r7, #16]
    2edc:	68fa      	ldr	r2, [r7, #12]
    2ede:	615a      	str	r2, [r3, #20]
		break;
    2ee0:	e008      	b.n	2ef4 <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    2ee2:	693b      	ldr	r3, [r7, #16]
    2ee4:	68fa      	ldr	r2, [r7, #12]
    2ee6:	619a      	str	r2, [r3, #24]
		break;
    2ee8:	e004      	b.n	2ef4 <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    2eea:	693b      	ldr	r3, [r7, #16]
    2eec:	68fa      	ldr	r2, [r7, #12]
    2eee:	61da      	str	r2, [r3, #28]
		break;
    2ef0:	e000      	b.n	2ef4 <usb_d_ep_register_callback+0x68>
		return;
    2ef2:	bf00      	nop
	}
}
    2ef4:	3718      	adds	r7, #24
    2ef6:	46bd      	mov	sp, r7
    2ef8:	bd80      	pop	{r7, pc}
    2efa:	bf00      	nop
    2efc:	00002609 	.word	0x00002609
    2f00:	200013b8 	.word	0x200013b8
    2f04:	000026dd 	.word	0x000026dd

00002f08 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    2f08:	b480      	push	{r7}
    2f0a:	b085      	sub	sp, #20
    2f0c:	af00      	add	r7, sp, #0
    2f0e:	4603      	mov	r3, r0
    2f10:	60b9      	str	r1, [r7, #8]
    2f12:	607a      	str	r2, [r7, #4]
    2f14:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    2f16:	7bfb      	ldrb	r3, [r7, #15]
    2f18:	f083 0301 	eor.w	r3, r3, #1
    2f1c:	b2db      	uxtb	r3, r3
    2f1e:	2b00      	cmp	r3, #0
    2f20:	d000      	beq.n	2f24 <assert+0x1c>
		__asm("BKPT #0");
    2f22:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    2f24:	bf00      	nop
    2f26:	3714      	adds	r7, #20
    2f28:	46bd      	mov	sp, r7
    2f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f2e:	4770      	bx	lr

00002f30 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    2f30:	b480      	push	{r7}
    2f32:	b085      	sub	sp, #20
    2f34:	af00      	add	r7, sp, #0
    2f36:	6078      	str	r0, [r7, #4]
    2f38:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    2f3a:	687b      	ldr	r3, [r7, #4]
    2f3c:	681b      	ldr	r3, [r3, #0]
    2f3e:	60fb      	str	r3, [r7, #12]
    2f40:	e008      	b.n	2f54 <is_list_element+0x24>
		if (it == element) {
    2f42:	68fa      	ldr	r2, [r7, #12]
    2f44:	683b      	ldr	r3, [r7, #0]
    2f46:	429a      	cmp	r2, r3
    2f48:	d101      	bne.n	2f4e <is_list_element+0x1e>
			return true;
    2f4a:	2301      	movs	r3, #1
    2f4c:	e006      	b.n	2f5c <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    2f4e:	68fb      	ldr	r3, [r7, #12]
    2f50:	681b      	ldr	r3, [r3, #0]
    2f52:	60fb      	str	r3, [r7, #12]
    2f54:	68fb      	ldr	r3, [r7, #12]
    2f56:	2b00      	cmp	r3, #0
    2f58:	d1f3      	bne.n	2f42 <is_list_element+0x12>
		}
	}

	return false;
    2f5a:	2300      	movs	r3, #0
}
    2f5c:	4618      	mov	r0, r3
    2f5e:	3714      	adds	r7, #20
    2f60:	46bd      	mov	sp, r7
    2f62:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f66:	4770      	bx	lr

00002f68 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    2f68:	b580      	push	{r7, lr}
    2f6a:	b082      	sub	sp, #8
    2f6c:	af00      	add	r7, sp, #0
    2f6e:	6078      	str	r0, [r7, #4]
    2f70:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    2f72:	6839      	ldr	r1, [r7, #0]
    2f74:	6878      	ldr	r0, [r7, #4]
    2f76:	4b0f      	ldr	r3, [pc, #60]	; (2fb4 <list_insert_as_head+0x4c>)
    2f78:	4798      	blx	r3
    2f7a:	4603      	mov	r3, r0
    2f7c:	2b00      	cmp	r3, #0
    2f7e:	bf14      	ite	ne
    2f80:	2301      	movne	r3, #1
    2f82:	2300      	moveq	r3, #0
    2f84:	b2db      	uxtb	r3, r3
    2f86:	f083 0301 	eor.w	r3, r3, #1
    2f8a:	b2db      	uxtb	r3, r3
    2f8c:	f003 0301 	and.w	r3, r3, #1
    2f90:	b2db      	uxtb	r3, r3
    2f92:	2239      	movs	r2, #57	; 0x39
    2f94:	4908      	ldr	r1, [pc, #32]	; (2fb8 <list_insert_as_head+0x50>)
    2f96:	4618      	mov	r0, r3
    2f98:	4b08      	ldr	r3, [pc, #32]	; (2fbc <list_insert_as_head+0x54>)
    2f9a:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    2f9c:	687b      	ldr	r3, [r7, #4]
    2f9e:	681a      	ldr	r2, [r3, #0]
    2fa0:	683b      	ldr	r3, [r7, #0]
    2fa2:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    2fa4:	687b      	ldr	r3, [r7, #4]
    2fa6:	683a      	ldr	r2, [r7, #0]
    2fa8:	601a      	str	r2, [r3, #0]
}
    2faa:	bf00      	nop
    2fac:	3708      	adds	r7, #8
    2fae:	46bd      	mov	sp, r7
    2fb0:	bd80      	pop	{r7, pc}
    2fb2:	bf00      	nop
    2fb4:	00002f31 	.word	0x00002f31
    2fb8:	00012fe8 	.word	0x00012fe8
    2fbc:	00002f09 	.word	0x00002f09

00002fc0 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    2fc0:	b480      	push	{r7}
    2fc2:	b083      	sub	sp, #12
    2fc4:	af00      	add	r7, sp, #0
    2fc6:	6078      	str	r0, [r7, #4]
    2fc8:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    2fca:	687b      	ldr	r3, [r7, #4]
    2fcc:	681a      	ldr	r2, [r3, #0]
    2fce:	683b      	ldr	r3, [r7, #0]
    2fd0:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    2fd2:	687b      	ldr	r3, [r7, #4]
    2fd4:	683a      	ldr	r2, [r7, #0]
    2fd6:	601a      	str	r2, [r3, #0]
}
    2fd8:	bf00      	nop
    2fda:	370c      	adds	r7, #12
    2fdc:	46bd      	mov	sp, r7
    2fde:	f85d 7b04 	ldr.w	r7, [sp], #4
    2fe2:	4770      	bx	lr

00002fe4 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    2fe4:	b580      	push	{r7, lr}
    2fe6:	b084      	sub	sp, #16
    2fe8:	af00      	add	r7, sp, #0
    2fea:	6078      	str	r0, [r7, #4]
    2fec:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    2fee:	687b      	ldr	r3, [r7, #4]
    2ff0:	681b      	ldr	r3, [r3, #0]
    2ff2:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    2ff4:	6839      	ldr	r1, [r7, #0]
    2ff6:	6878      	ldr	r0, [r7, #4]
    2ff8:	4b16      	ldr	r3, [pc, #88]	; (3054 <list_insert_at_end+0x70>)
    2ffa:	4798      	blx	r3
    2ffc:	4603      	mov	r3, r0
    2ffe:	2b00      	cmp	r3, #0
    3000:	bf14      	ite	ne
    3002:	2301      	movne	r3, #1
    3004:	2300      	moveq	r3, #0
    3006:	b2db      	uxtb	r3, r3
    3008:	f083 0301 	eor.w	r3, r3, #1
    300c:	b2db      	uxtb	r3, r3
    300e:	f003 0301 	and.w	r3, r3, #1
    3012:	b2db      	uxtb	r3, r3
    3014:	224f      	movs	r2, #79	; 0x4f
    3016:	4910      	ldr	r1, [pc, #64]	; (3058 <list_insert_at_end+0x74>)
    3018:	4618      	mov	r0, r3
    301a:	4b10      	ldr	r3, [pc, #64]	; (305c <list_insert_at_end+0x78>)
    301c:	4798      	blx	r3

	if (!list->head) {
    301e:	687b      	ldr	r3, [r7, #4]
    3020:	681b      	ldr	r3, [r3, #0]
    3022:	2b00      	cmp	r3, #0
    3024:	d109      	bne.n	303a <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    3026:	687b      	ldr	r3, [r7, #4]
    3028:	683a      	ldr	r2, [r7, #0]
    302a:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    302c:	683b      	ldr	r3, [r7, #0]
    302e:	2200      	movs	r2, #0
    3030:	601a      	str	r2, [r3, #0]
		return;
    3032:	e00c      	b.n	304e <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    3034:	68fb      	ldr	r3, [r7, #12]
    3036:	681b      	ldr	r3, [r3, #0]
    3038:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    303a:	68fb      	ldr	r3, [r7, #12]
    303c:	681b      	ldr	r3, [r3, #0]
    303e:	2b00      	cmp	r3, #0
    3040:	d1f8      	bne.n	3034 <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    3042:	68fb      	ldr	r3, [r7, #12]
    3044:	683a      	ldr	r2, [r7, #0]
    3046:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    3048:	683b      	ldr	r3, [r7, #0]
    304a:	2200      	movs	r2, #0
    304c:	601a      	str	r2, [r3, #0]
}
    304e:	3710      	adds	r7, #16
    3050:	46bd      	mov	sp, r7
    3052:	bd80      	pop	{r7, pc}
    3054:	00002f31 	.word	0x00002f31
    3058:	00012fe8 	.word	0x00012fe8
    305c:	00002f09 	.word	0x00002f09

00003060 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    3060:	b480      	push	{r7}
    3062:	b085      	sub	sp, #20
    3064:	af00      	add	r7, sp, #0
    3066:	6078      	str	r0, [r7, #4]
	if (list->head) {
    3068:	687b      	ldr	r3, [r7, #4]
    306a:	681b      	ldr	r3, [r3, #0]
    306c:	2b00      	cmp	r3, #0
    306e:	d009      	beq.n	3084 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    3070:	687b      	ldr	r3, [r7, #4]
    3072:	681b      	ldr	r3, [r3, #0]
    3074:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    3076:	687b      	ldr	r3, [r7, #4]
    3078:	681b      	ldr	r3, [r3, #0]
    307a:	681a      	ldr	r2, [r3, #0]
    307c:	687b      	ldr	r3, [r7, #4]
    307e:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    3080:	68fb      	ldr	r3, [r7, #12]
    3082:	e000      	b.n	3086 <list_remove_head+0x26>
	}

	return NULL;
    3084:	2300      	movs	r3, #0
}
    3086:	4618      	mov	r0, r3
    3088:	3714      	adds	r7, #20
    308a:	46bd      	mov	sp, r7
    308c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3090:	4770      	bx	lr
	...

00003094 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    3094:	b480      	push	{r7}
    3096:	b083      	sub	sp, #12
    3098:	af00      	add	r7, sp, #0
    309a:	4603      	mov	r3, r0
    309c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    309e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    30a2:	2b00      	cmp	r3, #0
    30a4:	db0b      	blt.n	30be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    30a6:	4909      	ldr	r1, [pc, #36]	; (30cc <__NVIC_EnableIRQ+0x38>)
    30a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    30ac:	095b      	lsrs	r3, r3, #5
    30ae:	88fa      	ldrh	r2, [r7, #6]
    30b0:	f002 021f 	and.w	r2, r2, #31
    30b4:	2001      	movs	r0, #1
    30b6:	fa00 f202 	lsl.w	r2, r0, r2
    30ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    30be:	bf00      	nop
    30c0:	370c      	adds	r7, #12
    30c2:	46bd      	mov	sp, r7
    30c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    30c8:	4770      	bx	lr
    30ca:	bf00      	nop
    30cc:	e000e100 	.word	0xe000e100

000030d0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    30d0:	b480      	push	{r7}
    30d2:	b083      	sub	sp, #12
    30d4:	af00      	add	r7, sp, #0
    30d6:	4603      	mov	r3, r0
    30d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    30da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    30de:	2b00      	cmp	r3, #0
    30e0:	db10      	blt.n	3104 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    30e2:	490b      	ldr	r1, [pc, #44]	; (3110 <__NVIC_DisableIRQ+0x40>)
    30e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    30e8:	095b      	lsrs	r3, r3, #5
    30ea:	88fa      	ldrh	r2, [r7, #6]
    30ec:	f002 021f 	and.w	r2, r2, #31
    30f0:	2001      	movs	r0, #1
    30f2:	fa00 f202 	lsl.w	r2, r0, r2
    30f6:	3320      	adds	r3, #32
    30f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    30fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3100:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    3104:	bf00      	nop
    3106:	370c      	adds	r7, #12
    3108:	46bd      	mov	sp, r7
    310a:	f85d 7b04 	ldr.w	r7, [sp], #4
    310e:	4770      	bx	lr
    3110:	e000e100 	.word	0xe000e100

00003114 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    3114:	b480      	push	{r7}
    3116:	b083      	sub	sp, #12
    3118:	af00      	add	r7, sp, #0
    311a:	4603      	mov	r3, r0
    311c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    311e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3122:	2b00      	cmp	r3, #0
    3124:	db0c      	blt.n	3140 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3126:	4909      	ldr	r1, [pc, #36]	; (314c <__NVIC_ClearPendingIRQ+0x38>)
    3128:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    312c:	095b      	lsrs	r3, r3, #5
    312e:	88fa      	ldrh	r2, [r7, #6]
    3130:	f002 021f 	and.w	r2, r2, #31
    3134:	2001      	movs	r0, #1
    3136:	fa00 f202 	lsl.w	r2, r0, r2
    313a:	3360      	adds	r3, #96	; 0x60
    313c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    3140:	bf00      	nop
    3142:	370c      	adds	r7, #12
    3144:	46bd      	mov	sp, r7
    3146:	f85d 7b04 	ldr.w	r7, [sp], #4
    314a:	4770      	bx	lr
    314c:	e000e100 	.word	0xe000e100

00003150 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    3150:	b480      	push	{r7}
    3152:	b083      	sub	sp, #12
    3154:	af00      	add	r7, sp, #0
    3156:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    3158:	687b      	ldr	r3, [r7, #4]
    315a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    315c:	095b      	lsrs	r3, r3, #5
    315e:	f003 0301 	and.w	r3, r3, #1
    3162:	2b00      	cmp	r3, #0
    3164:	bf14      	ite	ne
    3166:	2301      	movne	r3, #1
    3168:	2300      	moveq	r3, #0
    316a:	b2db      	uxtb	r3, r3
}
    316c:	4618      	mov	r0, r3
    316e:	370c      	adds	r7, #12
    3170:	46bd      	mov	sp, r7
    3172:	f85d 7b04 	ldr.w	r7, [sp], #4
    3176:	4770      	bx	lr

00003178 <hri_can_read_RXF0S_F0FL_bf>:
{
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0FL(mask)) >> CAN_RXF0S_F0FL_Pos;
}

static inline hri_can_rxf0s_reg_t hri_can_read_RXF0S_F0FL_bf(const void *const hw)
{
    3178:	b480      	push	{r7}
    317a:	b083      	sub	sp, #12
    317c:	af00      	add	r7, sp, #0
    317e:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0FL_Msk) >> CAN_RXF0S_F0FL_Pos;
    3180:	687b      	ldr	r3, [r7, #4]
    3182:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    3186:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
    318a:	4618      	mov	r0, r3
    318c:	370c      	adds	r7, #12
    318e:	46bd      	mov	sp, r7
    3190:	f85d 7b04 	ldr.w	r7, [sp], #4
    3194:	4770      	bx	lr

00003196 <hri_can_read_RXF0S_F0GI_bf>:
{
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0GI(mask)) >> CAN_RXF0S_F0GI_Pos;
}

static inline hri_can_rxf0s_reg_t hri_can_read_RXF0S_F0GI_bf(const void *const hw)
{
    3196:	b480      	push	{r7}
    3198:	b083      	sub	sp, #12
    319a:	af00      	add	r7, sp, #0
    319c:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0GI_Msk) >> CAN_RXF0S_F0GI_Pos;
    319e:	687b      	ldr	r3, [r7, #4]
    31a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    31a4:	0a1b      	lsrs	r3, r3, #8
    31a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
    31aa:	4618      	mov	r0, r3
    31ac:	370c      	adds	r7, #12
    31ae:	46bd      	mov	sp, r7
    31b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    31b4:	4770      	bx	lr

000031b6 <hri_can_get_TXFQS_TFQF_bit>:
{
	return ((Can *)hw)->RXF1S.reg;
}

static inline bool hri_can_get_TXFQS_TFQF_bit(const void *const hw)
{
    31b6:	b480      	push	{r7}
    31b8:	b083      	sub	sp, #12
    31ba:	af00      	add	r7, sp, #0
    31bc:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFQF) >> CAN_TXFQS_TFQF_Pos;
    31be:	687b      	ldr	r3, [r7, #4]
    31c0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    31c4:	0d5b      	lsrs	r3, r3, #21
    31c6:	f003 0301 	and.w	r3, r3, #1
    31ca:	2b00      	cmp	r3, #0
    31cc:	bf14      	ite	ne
    31ce:	2301      	movne	r3, #1
    31d0:	2300      	moveq	r3, #0
    31d2:	b2db      	uxtb	r3, r3
}
    31d4:	4618      	mov	r0, r3
    31d6:	370c      	adds	r7, #12
    31d8:	46bd      	mov	sp, r7
    31da:	f85d 7b04 	ldr.w	r7, [sp], #4
    31de:	4770      	bx	lr

000031e0 <hri_can_read_TXFQS_TFQPI_bf>:
{
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFQPI(mask)) >> CAN_TXFQS_TFQPI_Pos;
}

static inline hri_can_txfqs_reg_t hri_can_read_TXFQS_TFQPI_bf(const void *const hw)
{
    31e0:	b480      	push	{r7}
    31e2:	b083      	sub	sp, #12
    31e4:	af00      	add	r7, sp, #0
    31e6:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFQPI_Msk) >> CAN_TXFQS_TFQPI_Pos;
    31e8:	687b      	ldr	r3, [r7, #4]
    31ea:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    31ee:	0c1b      	lsrs	r3, r3, #16
    31f0:	f003 031f 	and.w	r3, r3, #31
}
    31f4:	4618      	mov	r0, r3
    31f6:	370c      	adds	r7, #12
    31f8:	46bd      	mov	sp, r7
    31fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    31fe:	4770      	bx	lr

00003200 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    3200:	b480      	push	{r7}
    3202:	b083      	sub	sp, #12
    3204:	af00      	add	r7, sp, #0
    3206:	6078      	str	r0, [r7, #4]
    3208:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    320a:	687b      	ldr	r3, [r7, #4]
    320c:	683a      	ldr	r2, [r7, #0]
    320e:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3210:	bf00      	nop
    3212:	370c      	adds	r7, #12
    3214:	46bd      	mov	sp, r7
    3216:	f85d 7b04 	ldr.w	r7, [sp], #4
    321a:	4770      	bx	lr

0000321c <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    321c:	b480      	push	{r7}
    321e:	b083      	sub	sp, #12
    3220:	af00      	add	r7, sp, #0
    3222:	6078      	str	r0, [r7, #4]
    3224:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    3226:	687b      	ldr	r3, [r7, #4]
    3228:	683a      	ldr	r2, [r7, #0]
    322a:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    322c:	bf00      	nop
    322e:	370c      	adds	r7, #12
    3230:	46bd      	mov	sp, r7
    3232:	f85d 7b04 	ldr.w	r7, [sp], #4
    3236:	4770      	bx	lr

00003238 <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    3238:	b480      	push	{r7}
    323a:	b083      	sub	sp, #12
    323c:	af00      	add	r7, sp, #0
    323e:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    3240:	687b      	ldr	r3, [r7, #4]
    3242:	699b      	ldr	r3, [r3, #24]
    3244:	f043 0201 	orr.w	r2, r3, #1
    3248:	687b      	ldr	r3, [r7, #4]
    324a:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    324c:	bf00      	nop
    324e:	370c      	adds	r7, #12
    3250:	46bd      	mov	sp, r7
    3252:	f85d 7b04 	ldr.w	r7, [sp], #4
    3256:	4770      	bx	lr

00003258 <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    3258:	b480      	push	{r7}
    325a:	b085      	sub	sp, #20
    325c:	af00      	add	r7, sp, #0
    325e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    3260:	687b      	ldr	r3, [r7, #4]
    3262:	699b      	ldr	r3, [r3, #24]
    3264:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    3266:	68fb      	ldr	r3, [r7, #12]
    3268:	f003 0301 	and.w	r3, r3, #1
    326c:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    326e:	68fb      	ldr	r3, [r7, #12]
    3270:	2b00      	cmp	r3, #0
    3272:	bf14      	ite	ne
    3274:	2301      	movne	r3, #1
    3276:	2300      	moveq	r3, #0
    3278:	b2db      	uxtb	r3, r3
}
    327a:	4618      	mov	r0, r3
    327c:	3714      	adds	r7, #20
    327e:	46bd      	mov	sp, r7
    3280:	f85d 7b04 	ldr.w	r7, [sp], #4
    3284:	4770      	bx	lr

00003286 <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    3286:	b480      	push	{r7}
    3288:	b083      	sub	sp, #12
    328a:	af00      	add	r7, sp, #0
    328c:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    328e:	687b      	ldr	r3, [r7, #4]
    3290:	699b      	ldr	r3, [r3, #24]
    3292:	f023 0201 	bic.w	r2, r3, #1
    3296:	687b      	ldr	r3, [r7, #4]
    3298:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    329a:	bf00      	nop
    329c:	370c      	adds	r7, #12
    329e:	46bd      	mov	sp, r7
    32a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    32a4:	4770      	bx	lr

000032a6 <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    32a6:	b480      	push	{r7}
    32a8:	b083      	sub	sp, #12
    32aa:	af00      	add	r7, sp, #0
    32ac:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    32ae:	687b      	ldr	r3, [r7, #4]
    32b0:	699b      	ldr	r3, [r3, #24]
    32b2:	f043 0202 	orr.w	r2, r3, #2
    32b6:	687b      	ldr	r3, [r7, #4]
    32b8:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    32ba:	bf00      	nop
    32bc:	370c      	adds	r7, #12
    32be:	46bd      	mov	sp, r7
    32c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    32c4:	4770      	bx	lr

000032c6 <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    32c6:	b480      	push	{r7}
    32c8:	b083      	sub	sp, #12
    32ca:	af00      	add	r7, sp, #0
    32cc:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    32ce:	687b      	ldr	r3, [r7, #4]
    32d0:	699b      	ldr	r3, [r3, #24]
    32d2:	f023 0202 	bic.w	r2, r3, #2
    32d6:	687b      	ldr	r3, [r7, #4]
    32d8:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    32da:	bf00      	nop
    32dc:	370c      	adds	r7, #12
    32de:	46bd      	mov	sp, r7
    32e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    32e4:	4770      	bx	lr

000032e6 <hri_can_get_CCCR_FDOE_bit>:
	((Can *)hw)->CCCR.reg |= CAN_CCCR_FDOE;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_can_get_CCCR_FDOE_bit(const void *const hw)
{
    32e6:	b480      	push	{r7}
    32e8:	b085      	sub	sp, #20
    32ea:	af00      	add	r7, sp, #0
    32ec:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    32ee:	687b      	ldr	r3, [r7, #4]
    32f0:	699b      	ldr	r3, [r3, #24]
    32f2:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_FDOE) >> CAN_CCCR_FDOE_Pos;
    32f4:	68fb      	ldr	r3, [r7, #12]
    32f6:	0a1b      	lsrs	r3, r3, #8
    32f8:	f003 0301 	and.w	r3, r3, #1
    32fc:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    32fe:	68fb      	ldr	r3, [r7, #12]
    3300:	2b00      	cmp	r3, #0
    3302:	bf14      	ite	ne
    3304:	2301      	movne	r3, #1
    3306:	2300      	moveq	r3, #0
    3308:	b2db      	uxtb	r3, r3
}
    330a:	4618      	mov	r0, r3
    330c:	3714      	adds	r7, #20
    330e:	46bd      	mov	sp, r7
    3310:	f85d 7b04 	ldr.w	r7, [sp], #4
    3314:	4770      	bx	lr

00003316 <hri_can_get_CCCR_BRSE_bit>:
	((Can *)hw)->CCCR.reg |= CAN_CCCR_BRSE;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_can_get_CCCR_BRSE_bit(const void *const hw)
{
    3316:	b480      	push	{r7}
    3318:	b085      	sub	sp, #20
    331a:	af00      	add	r7, sp, #0
    331c:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    331e:	687b      	ldr	r3, [r7, #4]
    3320:	699b      	ldr	r3, [r3, #24]
    3322:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_BRSE) >> CAN_CCCR_BRSE_Pos;
    3324:	68fb      	ldr	r3, [r7, #12]
    3326:	0a5b      	lsrs	r3, r3, #9
    3328:	f003 0301 	and.w	r3, r3, #1
    332c:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    332e:	68fb      	ldr	r3, [r7, #12]
    3330:	2b00      	cmp	r3, #0
    3332:	bf14      	ite	ne
    3334:	2301      	movne	r3, #1
    3336:	2300      	moveq	r3, #0
    3338:	b2db      	uxtb	r3, r3
}
    333a:	4618      	mov	r0, r3
    333c:	3714      	adds	r7, #20
    333e:	46bd      	mov	sp, r7
    3340:	f85d 7b04 	ldr.w	r7, [sp], #4
    3344:	4770      	bx	lr

00003346 <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    3346:	b480      	push	{r7}
    3348:	b083      	sub	sp, #12
    334a:	af00      	add	r7, sp, #0
    334c:	6078      	str	r0, [r7, #4]
    334e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    3350:	687b      	ldr	r3, [r7, #4]
    3352:	699a      	ldr	r2, [r3, #24]
    3354:	683b      	ldr	r3, [r7, #0]
    3356:	431a      	orrs	r2, r3
    3358:	687b      	ldr	r3, [r7, #4]
    335a:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    335c:	bf00      	nop
    335e:	370c      	adds	r7, #12
    3360:	46bd      	mov	sp, r7
    3362:	f85d 7b04 	ldr.w	r7, [sp], #4
    3366:	4770      	bx	lr

00003368 <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    3368:	b480      	push	{r7}
    336a:	b083      	sub	sp, #12
    336c:	af00      	add	r7, sp, #0
    336e:	6078      	str	r0, [r7, #4]
    3370:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    3372:	687b      	ldr	r3, [r7, #4]
    3374:	683a      	ldr	r2, [r7, #0]
    3376:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3378:	bf00      	nop
    337a:	370c      	adds	r7, #12
    337c:	46bd      	mov	sp, r7
    337e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3382:	4770      	bx	lr

00003384 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    3384:	b480      	push	{r7}
    3386:	b083      	sub	sp, #12
    3388:	af00      	add	r7, sp, #0
    338a:	6078      	str	r0, [r7, #4]
    338c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    338e:	687b      	ldr	r3, [r7, #4]
    3390:	683a      	ldr	r2, [r7, #0]
    3392:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    3394:	bf00      	nop
    3396:	370c      	adds	r7, #12
    3398:	46bd      	mov	sp, r7
    339a:	f85d 7b04 	ldr.w	r7, [sp], #4
    339e:	4770      	bx	lr

000033a0 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    33a0:	b480      	push	{r7}
    33a2:	b083      	sub	sp, #12
    33a4:	af00      	add	r7, sp, #0
    33a6:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    33a8:	687b      	ldr	r3, [r7, #4]
    33aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    33ac:	4618      	mov	r0, r3
    33ae:	370c      	adds	r7, #12
    33b0:	46bd      	mov	sp, r7
    33b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    33b6:	4770      	bx	lr

000033b8 <hri_can_write_IE_RF0NE_bit>:
	tmp = (tmp & CAN_IE_RF0NE) >> CAN_IE_RF0NE_Pos;
	return (bool)tmp;
}

static inline void hri_can_write_IE_RF0NE_bit(const void *const hw, bool value)
{
    33b8:	b480      	push	{r7}
    33ba:	b085      	sub	sp, #20
    33bc:	af00      	add	r7, sp, #0
    33be:	6078      	str	r0, [r7, #4]
    33c0:	460b      	mov	r3, r1
    33c2:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	CAN_CRITICAL_SECTION_ENTER();
	tmp = ((Can *)hw)->IE.reg;
    33c4:	687b      	ldr	r3, [r7, #4]
    33c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    33c8:	60fb      	str	r3, [r7, #12]
	tmp &= ~CAN_IE_RF0NE;
    33ca:	68fb      	ldr	r3, [r7, #12]
    33cc:	f023 0301 	bic.w	r3, r3, #1
    33d0:	60fb      	str	r3, [r7, #12]
	tmp |= value << CAN_IE_RF0NE_Pos;
    33d2:	78fb      	ldrb	r3, [r7, #3]
    33d4:	68fa      	ldr	r2, [r7, #12]
    33d6:	4313      	orrs	r3, r2
    33d8:	60fb      	str	r3, [r7, #12]
	((Can *)hw)->IE.reg = tmp;
    33da:	687b      	ldr	r3, [r7, #4]
    33dc:	68fa      	ldr	r2, [r7, #12]
    33de:	655a      	str	r2, [r3, #84]	; 0x54
	CAN_CRITICAL_SECTION_LEAVE();
}
    33e0:	bf00      	nop
    33e2:	3714      	adds	r7, #20
    33e4:	46bd      	mov	sp, r7
    33e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    33ea:	4770      	bx	lr

000033ec <hri_can_write_IE_TCE_bit>:
	tmp = (tmp & CAN_IE_TCE) >> CAN_IE_TCE_Pos;
	return (bool)tmp;
}

static inline void hri_can_write_IE_TCE_bit(const void *const hw, bool value)
{
    33ec:	b480      	push	{r7}
    33ee:	b085      	sub	sp, #20
    33f0:	af00      	add	r7, sp, #0
    33f2:	6078      	str	r0, [r7, #4]
    33f4:	460b      	mov	r3, r1
    33f6:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	CAN_CRITICAL_SECTION_ENTER();
	tmp = ((Can *)hw)->IE.reg;
    33f8:	687b      	ldr	r3, [r7, #4]
    33fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    33fc:	60fb      	str	r3, [r7, #12]
	tmp &= ~CAN_IE_TCE;
    33fe:	68fb      	ldr	r3, [r7, #12]
    3400:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    3404:	60fb      	str	r3, [r7, #12]
	tmp |= value << CAN_IE_TCE_Pos;
    3406:	78fb      	ldrb	r3, [r7, #3]
    3408:	025b      	lsls	r3, r3, #9
    340a:	461a      	mov	r2, r3
    340c:	68fb      	ldr	r3, [r7, #12]
    340e:	4313      	orrs	r3, r2
    3410:	60fb      	str	r3, [r7, #12]
	((Can *)hw)->IE.reg = tmp;
    3412:	687b      	ldr	r3, [r7, #4]
    3414:	68fa      	ldr	r2, [r7, #12]
    3416:	655a      	str	r2, [r3, #84]	; 0x54
	CAN_CRITICAL_SECTION_LEAVE();
}
    3418:	bf00      	nop
    341a:	3714      	adds	r7, #20
    341c:	46bd      	mov	sp, r7
    341e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3422:	4770      	bx	lr

00003424 <hri_can_get_IE_reg>:
	((Can *)hw)->IE.reg |= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ie_reg_t hri_can_get_IE_reg(const void *const hw, hri_can_ie_reg_t mask)
{
    3424:	b480      	push	{r7}
    3426:	b085      	sub	sp, #20
    3428:	af00      	add	r7, sp, #0
    342a:	6078      	str	r0, [r7, #4]
    342c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Can *)hw)->IE.reg;
    342e:	687b      	ldr	r3, [r7, #4]
    3430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    3432:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    3434:	68fa      	ldr	r2, [r7, #12]
    3436:	683b      	ldr	r3, [r7, #0]
    3438:	4013      	ands	r3, r2
    343a:	60fb      	str	r3, [r7, #12]
	return tmp;
    343c:	68fb      	ldr	r3, [r7, #12]
}
    343e:	4618      	mov	r0, r3
    3440:	3714      	adds	r7, #20
    3442:	46bd      	mov	sp, r7
    3444:	f85d 7b04 	ldr.w	r7, [sp], #4
    3448:	4770      	bx	lr

0000344a <hri_can_write_IE_reg>:

static inline void hri_can_write_IE_reg(const void *const hw, hri_can_ie_reg_t data)
{
    344a:	b480      	push	{r7}
    344c:	b083      	sub	sp, #12
    344e:	af00      	add	r7, sp, #0
    3450:	6078      	str	r0, [r7, #4]
    3452:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IE.reg = data;
    3454:	687b      	ldr	r3, [r7, #4]
    3456:	683a      	ldr	r2, [r7, #0]
    3458:	655a      	str	r2, [r3, #84]	; 0x54
	CAN_CRITICAL_SECTION_LEAVE();
}
    345a:	bf00      	nop
    345c:	370c      	adds	r7, #12
    345e:	46bd      	mov	sp, r7
    3460:	f85d 7b04 	ldr.w	r7, [sp], #4
    3464:	4770      	bx	lr

00003466 <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    3466:	b480      	push	{r7}
    3468:	b083      	sub	sp, #12
    346a:	af00      	add	r7, sp, #0
    346c:	6078      	str	r0, [r7, #4]
    346e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    3470:	687b      	ldr	r3, [r7, #4]
    3472:	683a      	ldr	r2, [r7, #0]
    3474:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    3476:	bf00      	nop
    3478:	370c      	adds	r7, #12
    347a:	46bd      	mov	sp, r7
    347c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3480:	4770      	bx	lr

00003482 <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    3482:	b480      	push	{r7}
    3484:	b083      	sub	sp, #12
    3486:	af00      	add	r7, sp, #0
    3488:	6078      	str	r0, [r7, #4]
    348a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    348c:	687b      	ldr	r3, [r7, #4]
    348e:	683a      	ldr	r2, [r7, #0]
    3490:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    3494:	bf00      	nop
    3496:	370c      	adds	r7, #12
    3498:	46bd      	mov	sp, r7
    349a:	f85d 7b04 	ldr.w	r7, [sp], #4
    349e:	4770      	bx	lr

000034a0 <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    34a0:	b480      	push	{r7}
    34a2:	b083      	sub	sp, #12
    34a4:	af00      	add	r7, sp, #0
    34a6:	6078      	str	r0, [r7, #4]
    34a8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    34aa:	687b      	ldr	r3, [r7, #4]
    34ac:	683a      	ldr	r2, [r7, #0]
    34ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    34b2:	bf00      	nop
    34b4:	370c      	adds	r7, #12
    34b6:	46bd      	mov	sp, r7
    34b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    34bc:	4770      	bx	lr

000034be <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    34be:	b480      	push	{r7}
    34c0:	b083      	sub	sp, #12
    34c2:	af00      	add	r7, sp, #0
    34c4:	6078      	str	r0, [r7, #4]
    34c6:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    34c8:	687b      	ldr	r3, [r7, #4]
    34ca:	683a      	ldr	r2, [r7, #0]
    34cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    34d0:	bf00      	nop
    34d2:	370c      	adds	r7, #12
    34d4:	46bd      	mov	sp, r7
    34d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    34da:	4770      	bx	lr

000034dc <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    34dc:	b480      	push	{r7}
    34de:	b083      	sub	sp, #12
    34e0:	af00      	add	r7, sp, #0
    34e2:	6078      	str	r0, [r7, #4]
    34e4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    34e6:	687b      	ldr	r3, [r7, #4]
    34e8:	683a      	ldr	r2, [r7, #0]
    34ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    34ee:	bf00      	nop
    34f0:	370c      	adds	r7, #12
    34f2:	46bd      	mov	sp, r7
    34f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    34f8:	4770      	bx	lr

000034fa <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    34fa:	b480      	push	{r7}
    34fc:	b083      	sub	sp, #12
    34fe:	af00      	add	r7, sp, #0
    3500:	6078      	str	r0, [r7, #4]
    3502:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    3504:	687b      	ldr	r3, [r7, #4]
    3506:	683a      	ldr	r2, [r7, #0]
    3508:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    350c:	bf00      	nop
    350e:	370c      	adds	r7, #12
    3510:	46bd      	mov	sp, r7
    3512:	f85d 7b04 	ldr.w	r7, [sp], #4
    3516:	4770      	bx	lr

00003518 <hri_can_write_RXF0A_F0AI_bf>:
	tmp = (tmp & CAN_RXF0A_F0AI(mask)) >> CAN_RXF0A_F0AI_Pos;
	return tmp;
}

static inline void hri_can_write_RXF0A_F0AI_bf(const void *const hw, hri_can_rxf0a_reg_t data)
{
    3518:	b480      	push	{r7}
    351a:	b085      	sub	sp, #20
    351c:	af00      	add	r7, sp, #0
    351e:	6078      	str	r0, [r7, #4]
    3520:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	CAN_CRITICAL_SECTION_ENTER();
	tmp = ((Can *)hw)->RXF0A.reg;
    3522:	687b      	ldr	r3, [r7, #4]
    3524:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    3528:	60fb      	str	r3, [r7, #12]
	tmp &= ~CAN_RXF0A_F0AI_Msk;
    352a:	68fb      	ldr	r3, [r7, #12]
    352c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    3530:	60fb      	str	r3, [r7, #12]
	tmp |= CAN_RXF0A_F0AI(data);
    3532:	683b      	ldr	r3, [r7, #0]
    3534:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    3538:	68fa      	ldr	r2, [r7, #12]
    353a:	4313      	orrs	r3, r2
    353c:	60fb      	str	r3, [r7, #12]
	((Can *)hw)->RXF0A.reg = tmp;
    353e:	687b      	ldr	r3, [r7, #4]
    3540:	68fa      	ldr	r2, [r7, #12]
    3542:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	CAN_CRITICAL_SECTION_LEAVE();
}
    3546:	bf00      	nop
    3548:	3714      	adds	r7, #20
    354a:	46bd      	mov	sp, r7
    354c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3550:	4770      	bx	lr

00003552 <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    3552:	b480      	push	{r7}
    3554:	b083      	sub	sp, #12
    3556:	af00      	add	r7, sp, #0
    3558:	6078      	str	r0, [r7, #4]
    355a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    355c:	687b      	ldr	r3, [r7, #4]
    355e:	683a      	ldr	r2, [r7, #0]
    3560:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    3564:	bf00      	nop
    3566:	370c      	adds	r7, #12
    3568:	46bd      	mov	sp, r7
    356a:	f85d 7b04 	ldr.w	r7, [sp], #4
    356e:	4770      	bx	lr

00003570 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    3570:	b480      	push	{r7}
    3572:	b083      	sub	sp, #12
    3574:	af00      	add	r7, sp, #0
    3576:	6078      	str	r0, [r7, #4]
    3578:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    357a:	687b      	ldr	r3, [r7, #4]
    357c:	683a      	ldr	r2, [r7, #0]
    357e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3582:	bf00      	nop
    3584:	370c      	adds	r7, #12
    3586:	46bd      	mov	sp, r7
    3588:	f85d 7b04 	ldr.w	r7, [sp], #4
    358c:	4770      	bx	lr

0000358e <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    358e:	b480      	push	{r7}
    3590:	b083      	sub	sp, #12
    3592:	af00      	add	r7, sp, #0
    3594:	6078      	str	r0, [r7, #4]
    3596:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    3598:	687b      	ldr	r3, [r7, #4]
    359a:	683a      	ldr	r2, [r7, #0]
    359c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    35a0:	bf00      	nop
    35a2:	370c      	adds	r7, #12
    35a4:	46bd      	mov	sp, r7
    35a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    35aa:	4770      	bx	lr

000035ac <hri_can_write_TXBAR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBAR_reg(const void *const hw, hri_can_txbar_reg_t data)
{
    35ac:	b480      	push	{r7}
    35ae:	b083      	sub	sp, #12
    35b0:	af00      	add	r7, sp, #0
    35b2:	6078      	str	r0, [r7, #4]
    35b4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBAR.reg = data;
    35b6:	687b      	ldr	r3, [r7, #4]
    35b8:	683a      	ldr	r2, [r7, #0]
    35ba:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	CAN_CRITICAL_SECTION_LEAVE();
}
    35be:	bf00      	nop
    35c0:	370c      	adds	r7, #12
    35c2:	46bd      	mov	sp, r7
    35c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    35c8:	4770      	bx	lr

000035ca <hri_can_write_TXBTIE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBTIE_reg(const void *const hw, hri_can_txbtie_reg_t data)
{
    35ca:	b480      	push	{r7}
    35cc:	b083      	sub	sp, #12
    35ce:	af00      	add	r7, sp, #0
    35d0:	6078      	str	r0, [r7, #4]
    35d2:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBTIE.reg = data;
    35d4:	687b      	ldr	r3, [r7, #4]
    35d6:	683a      	ldr	r2, [r7, #0]
    35d8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	CAN_CRITICAL_SECTION_LEAVE();
}
    35dc:	bf00      	nop
    35de:	370c      	adds	r7, #12
    35e0:	46bd      	mov	sp, r7
    35e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    35e6:	4770      	bx	lr

000035e8 <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    35e8:	b480      	push	{r7}
    35ea:	b083      	sub	sp, #12
    35ec:	af00      	add	r7, sp, #0
    35ee:	6078      	str	r0, [r7, #4]
    35f0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    35f2:	687b      	ldr	r3, [r7, #4]
    35f4:	683a      	ldr	r2, [r7, #0]
    35f6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    35fa:	bf00      	nop
    35fc:	370c      	adds	r7, #12
    35fe:	46bd      	mov	sp, r7
    3600:	f85d 7b04 	ldr.w	r7, [sp], #4
    3604:	4770      	bx	lr
	...

00003608 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    3608:	b580      	push	{r7, lr}
    360a:	b082      	sub	sp, #8
    360c:	af00      	add	r7, sp, #0
    360e:	6078      	str	r0, [r7, #4]
    3610:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    3612:	687b      	ldr	r3, [r7, #4]
    3614:	683a      	ldr	r2, [r7, #0]
    3616:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    3618:	687b      	ldr	r3, [r7, #4]
    361a:	681b      	ldr	r3, [r3, #0]
    361c:	4618      	mov	r0, r3
    361e:	4b55      	ldr	r3, [pc, #340]	; (3774 <_can_async_init+0x16c>)
    3620:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    3622:	bf00      	nop
    3624:	687b      	ldr	r3, [r7, #4]
    3626:	681b      	ldr	r3, [r3, #0]
    3628:	4618      	mov	r0, r3
    362a:	4b53      	ldr	r3, [pc, #332]	; (3778 <_can_async_init+0x170>)
    362c:	4798      	blx	r3
    362e:	4603      	mov	r3, r0
    3630:	f083 0301 	eor.w	r3, r3, #1
    3634:	b2db      	uxtb	r3, r3
    3636:	2b00      	cmp	r3, #0
    3638:	d1f4      	bne.n	3624 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    363a:	687b      	ldr	r3, [r7, #4]
    363c:	681b      	ldr	r3, [r3, #0]
    363e:	4618      	mov	r0, r3
    3640:	4b4e      	ldr	r3, [pc, #312]	; (377c <_can_async_init+0x174>)
    3642:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    3644:	683b      	ldr	r3, [r7, #0]
    3646:	4a4e      	ldr	r2, [pc, #312]	; (3780 <_can_async_init+0x178>)
    3648:	4293      	cmp	r3, r2
    364a:	d17a      	bne.n	3742 <_can_async_init+0x13a>
		_can1_dev    = dev;
    364c:	4a4d      	ldr	r2, [pc, #308]	; (3784 <_can_async_init+0x17c>)
    364e:	687b      	ldr	r3, [r7, #4]
    3650:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    3652:	687b      	ldr	r3, [r7, #4]
    3654:	4a4c      	ldr	r2, [pc, #304]	; (3788 <_can_async_init+0x180>)
    3656:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    3658:	687b      	ldr	r3, [r7, #4]
    365a:	681b      	ldr	r3, [r3, #0]
    365c:	f44f 7140 	mov.w	r1, #768	; 0x300
    3660:	4618      	mov	r0, r3
    3662:	4b4a      	ldr	r3, [pc, #296]	; (378c <_can_async_init+0x184>)
    3664:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    3666:	687b      	ldr	r3, [r7, #4]
    3668:	681b      	ldr	r3, [r3, #0]
    366a:	2102      	movs	r1, #2
    366c:	4618      	mov	r0, r3
    366e:	4b48      	ldr	r3, [pc, #288]	; (3790 <_can_async_init+0x188>)
    3670:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    3672:	687b      	ldr	r3, [r7, #4]
    3674:	681b      	ldr	r3, [r3, #0]
    3676:	4947      	ldr	r1, [pc, #284]	; (3794 <_can_async_init+0x18c>)
    3678:	4618      	mov	r0, r3
    367a:	4b47      	ldr	r3, [pc, #284]	; (3798 <_can_async_init+0x190>)
    367c:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    367e:	687b      	ldr	r3, [r7, #4]
    3680:	681b      	ldr	r3, [r3, #0]
    3682:	4946      	ldr	r1, [pc, #280]	; (379c <_can_async_init+0x194>)
    3684:	4618      	mov	r0, r3
    3686:	4b46      	ldr	r3, [pc, #280]	; (37a0 <_can_async_init+0x198>)
    3688:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    368a:	687b      	ldr	r3, [r7, #4]
    368c:	681a      	ldr	r2, [r3, #0]
    368e:	4b45      	ldr	r3, [pc, #276]	; (37a4 <_can_async_init+0x19c>)
    3690:	b29b      	uxth	r3, r3
    3692:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    3696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    369a:	4619      	mov	r1, r3
    369c:	4610      	mov	r0, r2
    369e:	4b42      	ldr	r3, [pc, #264]	; (37a8 <_can_async_init+0x1a0>)
    36a0:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    36a2:	687b      	ldr	r3, [r7, #4]
    36a4:	681b      	ldr	r3, [r3, #0]
    36a6:	2107      	movs	r1, #7
    36a8:	4618      	mov	r0, r3
    36aa:	4b40      	ldr	r3, [pc, #256]	; (37ac <_can_async_init+0x1a4>)
    36ac:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    36ae:	687b      	ldr	r3, [r7, #4]
    36b0:	681b      	ldr	r3, [r3, #0]
    36b2:	2107      	movs	r1, #7
    36b4:	4618      	mov	r0, r3
    36b6:	4b3e      	ldr	r3, [pc, #248]	; (37b0 <_can_async_init+0x1a8>)
    36b8:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    36ba:	687b      	ldr	r3, [r7, #4]
    36bc:	681a      	ldr	r2, [r3, #0]
    36be:	4b3d      	ldr	r3, [pc, #244]	; (37b4 <_can_async_init+0x1ac>)
    36c0:	b29b      	uxth	r3, r3
    36c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    36c6:	4619      	mov	r1, r3
    36c8:	4610      	mov	r0, r2
    36ca:	4b3b      	ldr	r3, [pc, #236]	; (37b8 <_can_async_init+0x1b0>)
    36cc:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    36ce:	687b      	ldr	r3, [r7, #4]
    36d0:	681a      	ldr	r2, [r3, #0]
    36d2:	4b3a      	ldr	r3, [pc, #232]	; (37bc <_can_async_init+0x1b4>)
    36d4:	b29b      	uxth	r3, r3
    36d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    36da:	4619      	mov	r1, r3
    36dc:	4610      	mov	r0, r2
    36de:	4b38      	ldr	r3, [pc, #224]	; (37c0 <_can_async_init+0x1b8>)
    36e0:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    36e2:	687b      	ldr	r3, [r7, #4]
    36e4:	681b      	ldr	r3, [r3, #0]
    36e6:	2128      	movs	r1, #40	; 0x28
    36e8:	4618      	mov	r0, r3
    36ea:	4b36      	ldr	r3, [pc, #216]	; (37c4 <_can_async_init+0x1bc>)
    36ec:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    36ee:	687b      	ldr	r3, [r7, #4]
    36f0:	681a      	ldr	r2, [r3, #0]
    36f2:	4b35      	ldr	r3, [pc, #212]	; (37c8 <_can_async_init+0x1c0>)
    36f4:	b29b      	uxth	r3, r3
    36f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    36fa:	4619      	mov	r1, r3
    36fc:	4610      	mov	r0, r2
    36fe:	4b33      	ldr	r3, [pc, #204]	; (37cc <_can_async_init+0x1c4>)
    3700:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    3702:	687b      	ldr	r3, [r7, #4]
    3704:	681a      	ldr	r2, [r3, #0]
    3706:	4b32      	ldr	r3, [pc, #200]	; (37d0 <_can_async_init+0x1c8>)
    3708:	b29b      	uxth	r3, r3
    370a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    370e:	4619      	mov	r1, r3
    3710:	4610      	mov	r0, r2
    3712:	4b30      	ldr	r3, [pc, #192]	; (37d4 <_can_async_init+0x1cc>)
    3714:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    3716:	687b      	ldr	r3, [r7, #4]
    3718:	681b      	ldr	r3, [r3, #0]
    371a:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    371e:	4618      	mov	r0, r3
    3720:	4b2d      	ldr	r3, [pc, #180]	; (37d8 <_can_async_init+0x1d0>)
    3722:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    3724:	204f      	movs	r0, #79	; 0x4f
    3726:	4b2d      	ldr	r3, [pc, #180]	; (37dc <_can_async_init+0x1d4>)
    3728:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    372a:	204f      	movs	r0, #79	; 0x4f
    372c:	4b2c      	ldr	r3, [pc, #176]	; (37e0 <_can_async_init+0x1d8>)
    372e:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    3730:	204f      	movs	r0, #79	; 0x4f
    3732:	4b2c      	ldr	r3, [pc, #176]	; (37e4 <_can_async_init+0x1dc>)
    3734:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    3736:	687b      	ldr	r3, [r7, #4]
    3738:	681b      	ldr	r3, [r3, #0]
    373a:	2101      	movs	r1, #1
    373c:	4618      	mov	r0, r3
    373e:	4b2a      	ldr	r3, [pc, #168]	; (37e8 <_can_async_init+0x1e0>)
    3740:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    3742:	687b      	ldr	r3, [r7, #4]
    3744:	681b      	ldr	r3, [r3, #0]
    3746:	4618      	mov	r0, r3
    3748:	4b28      	ldr	r3, [pc, #160]	; (37ec <_can_async_init+0x1e4>)
    374a:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    374c:	687b      	ldr	r3, [r7, #4]
    374e:	681b      	ldr	r3, [r3, #0]
    3750:	4618      	mov	r0, r3
    3752:	4b27      	ldr	r3, [pc, #156]	; (37f0 <_can_async_init+0x1e8>)
    3754:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    3756:	bf00      	nop
    3758:	687b      	ldr	r3, [r7, #4]
    375a:	681b      	ldr	r3, [r3, #0]
    375c:	4618      	mov	r0, r3
    375e:	4b06      	ldr	r3, [pc, #24]	; (3778 <_can_async_init+0x170>)
    3760:	4798      	blx	r3
    3762:	4603      	mov	r3, r0
    3764:	2b00      	cmp	r3, #0
    3766:	d1f7      	bne.n	3758 <_can_async_init+0x150>
	};

	return ERR_NONE;
    3768:	2300      	movs	r3, #0
}
    376a:	4618      	mov	r0, r3
    376c:	3708      	adds	r7, #8
    376e:	46bd      	mov	sp, r7
    3770:	bd80      	pop	{r7, pc}
    3772:	bf00      	nop
    3774:	00003239 	.word	0x00003239
    3778:	00003259 	.word	0x00003259
    377c:	000032a7 	.word	0x000032a7
    3780:	42000400 	.word	0x42000400
    3784:	20001460 	.word	0x20001460
    3788:	20000004 	.word	0x20000004
    378c:	00003347 	.word	0x00003347
    3790:	00003201 	.word	0x00003201
    3794:	00010c01 	.word	0x00010c01
    3798:	00003369 	.word	0x00003369
    379c:	00010c10 	.word	0x00010c10
    37a0:	0000321d 	.word	0x0000321d
    37a4:	20001b50 	.word	0x20001b50
    37a8:	000034fb 	.word	0x000034fb
    37ac:	00003553 	.word	0x00003553
    37b0:	0000358f 	.word	0x0000358f
    37b4:	20001b08 	.word	0x20001b08
    37b8:	00003571 	.word	0x00003571
    37bc:	20001438 	.word	0x20001438
    37c0:	000035e9 	.word	0x000035e9
    37c4:	00003483 	.word	0x00003483
    37c8:	20001448 	.word	0x20001448
    37cc:	000034a1 	.word	0x000034a1
    37d0:	20001450 	.word	0x20001450
    37d4:	000034bf 	.word	0x000034bf
    37d8:	000034dd 	.word	0x000034dd
    37dc:	000030d1 	.word	0x000030d1
    37e0:	00003115 	.word	0x00003115
    37e4:	00003095 	.word	0x00003095
    37e8:	00003467 	.word	0x00003467
    37ec:	000032c7 	.word	0x000032c7
    37f0:	00003287 	.word	0x00003287

000037f4 <_can_async_enable>:

/**
 * \brief Enable CAN
 */
int32_t _can_async_enable(struct _can_async_device *const dev)
{
    37f4:	b580      	push	{r7, lr}
    37f6:	b082      	sub	sp, #8
    37f8:	af00      	add	r7, sp, #0
    37fa:	6078      	str	r0, [r7, #4]
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    37fc:	687b      	ldr	r3, [r7, #4]
    37fe:	681b      	ldr	r3, [r3, #0]
    3800:	4618      	mov	r0, r3
    3802:	4b03      	ldr	r3, [pc, #12]	; (3810 <_can_async_enable+0x1c>)
    3804:	4798      	blx	r3
	return ERR_NONE;
    3806:	2300      	movs	r3, #0
}
    3808:	4618      	mov	r0, r3
    380a:	3708      	adds	r7, #8
    380c:	46bd      	mov	sp, r7
    380e:	bd80      	pop	{r7, pc}
    3810:	00003287 	.word	0x00003287

00003814 <_can_async_disable>:

/**
 * \brief Disable CAN
 */
int32_t _can_async_disable(struct _can_async_device *const dev)
{
    3814:	b580      	push	{r7, lr}
    3816:	b082      	sub	sp, #8
    3818:	af00      	add	r7, sp, #0
    381a:	6078      	str	r0, [r7, #4]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    381c:	687b      	ldr	r3, [r7, #4]
    381e:	681b      	ldr	r3, [r3, #0]
    3820:	4618      	mov	r0, r3
    3822:	4b03      	ldr	r3, [pc, #12]	; (3830 <_can_async_disable+0x1c>)
    3824:	4798      	blx	r3
	return ERR_NONE;
    3826:	2300      	movs	r3, #0
}
    3828:	4618      	mov	r0, r3
    382a:	3708      	adds	r7, #8
    382c:	46bd      	mov	sp, r7
    382e:	bd80      	pop	{r7, pc}
    3830:	00003239 	.word	0x00003239

00003834 <_can_async_read>:

/**
 * \brief Read a CAN message
 */
int32_t _can_async_read(struct _can_async_device *const dev, struct can_message *msg)
{
    3834:	b590      	push	{r4, r7, lr}
    3836:	b089      	sub	sp, #36	; 0x24
    3838:	af00      	add	r7, sp, #0
    383a:	6078      	str	r0, [r7, #4]
    383c:	6039      	str	r1, [r7, #0]
	struct _can_rx_fifo_entry *f = NULL;
    383e:	2300      	movs	r3, #0
    3840:	61fb      	str	r3, [r7, #28]
	hri_can_rxf0s_reg_t        get_index;

	if (!hri_can_read_RXF0S_F0FL_bf(dev->hw)) {
    3842:	687b      	ldr	r3, [r7, #4]
    3844:	681b      	ldr	r3, [r3, #0]
    3846:	4618      	mov	r0, r3
    3848:	4b37      	ldr	r3, [pc, #220]	; (3928 <_can_async_read+0xf4>)
    384a:	4798      	blx	r3
    384c:	4603      	mov	r3, r0
    384e:	2b00      	cmp	r3, #0
    3850:	d102      	bne.n	3858 <_can_async_read+0x24>
		return ERR_NOT_FOUND;
    3852:	f06f 0309 	mvn.w	r3, #9
    3856:	e063      	b.n	3920 <_can_async_read+0xec>
	}

	get_index = hri_can_read_RXF0S_F0GI_bf(dev->hw);
    3858:	687b      	ldr	r3, [r7, #4]
    385a:	681b      	ldr	r3, [r3, #0]
    385c:	4618      	mov	r0, r3
    385e:	4b33      	ldr	r3, [pc, #204]	; (392c <_can_async_read+0xf8>)
    3860:	4798      	blx	r3
    3862:	61b8      	str	r0, [r7, #24]
	if (dev->hw == CAN0) {
		f = (struct _can_rx_fifo_entry *)(can0_rx_fifo + get_index * CONF_CAN0_F0DS);
	}
#endif
#ifdef CONF_CAN1_ENABLED
	if (dev->hw == CAN1) {
    3864:	687b      	ldr	r3, [r7, #4]
    3866:	681b      	ldr	r3, [r3, #0]
    3868:	4a31      	ldr	r2, [pc, #196]	; (3930 <_can_async_read+0xfc>)
    386a:	4293      	cmp	r3, r2
    386c:	d108      	bne.n	3880 <_can_async_read+0x4c>
		f = (struct _can_rx_fifo_entry *)(can1_rx_fifo + get_index * CONF_CAN1_F0DS);
    386e:	69ba      	ldr	r2, [r7, #24]
    3870:	4613      	mov	r3, r2
    3872:	00db      	lsls	r3, r3, #3
    3874:	4413      	add	r3, r2
    3876:	00db      	lsls	r3, r3, #3
    3878:	461a      	mov	r2, r3
    387a:	4b2e      	ldr	r3, [pc, #184]	; (3934 <_can_async_read+0x100>)
    387c:	4413      	add	r3, r2
    387e:	61fb      	str	r3, [r7, #28]
	}
#endif

	if (f == NULL) {
    3880:	69fb      	ldr	r3, [r7, #28]
    3882:	2b00      	cmp	r3, #0
    3884:	d102      	bne.n	388c <_can_async_read+0x58>
		return ERR_NO_RESOURCE;
    3886:	f06f 031b 	mvn.w	r3, #27
    388a:	e049      	b.n	3920 <_can_async_read+0xec>
	}

	if (f->R0.bit.XTD == 1) {
    388c:	69fb      	ldr	r3, [r7, #28]
    388e:	681b      	ldr	r3, [r3, #0]
    3890:	f3c3 7380 	ubfx	r3, r3, #30, #1
    3894:	b2db      	uxtb	r3, r3
    3896:	2b01      	cmp	r3, #1
    3898:	d10a      	bne.n	38b0 <_can_async_read+0x7c>
		msg->fmt = CAN_FMT_EXTID;
    389a:	683b      	ldr	r3, [r7, #0]
    389c:	2201      	movs	r2, #1
    389e:	735a      	strb	r2, [r3, #13]
		msg->id  = f->R0.bit.ID;
    38a0:	69fb      	ldr	r3, [r7, #28]
    38a2:	681b      	ldr	r3, [r3, #0]
    38a4:	f3c3 031c 	ubfx	r3, r3, #0, #29
    38a8:	461a      	mov	r2, r3
    38aa:	683b      	ldr	r3, [r7, #0]
    38ac:	601a      	str	r2, [r3, #0]
    38ae:	e00a      	b.n	38c6 <_can_async_read+0x92>
	} else {
		msg->fmt = CAN_FMT_STDID;
    38b0:	683b      	ldr	r3, [r7, #0]
    38b2:	2200      	movs	r2, #0
    38b4:	735a      	strb	r2, [r3, #13]
		/* A standard identifier is stored into ID[28:18] */
		msg->id = f->R0.bit.ID >> 18;
    38b6:	69fb      	ldr	r3, [r7, #28]
    38b8:	681b      	ldr	r3, [r3, #0]
    38ba:	f3c3 031c 	ubfx	r3, r3, #0, #29
    38be:	149b      	asrs	r3, r3, #18
    38c0:	461a      	mov	r2, r3
    38c2:	683b      	ldr	r3, [r7, #0]
    38c4:	601a      	str	r2, [r3, #0]
	}

	if (f->R0.bit.RTR == 1) {
    38c6:	69fb      	ldr	r3, [r7, #28]
    38c8:	681b      	ldr	r3, [r3, #0]
    38ca:	f3c3 7340 	ubfx	r3, r3, #29, #1
    38ce:	b2db      	uxtb	r3, r3
    38d0:	2b01      	cmp	r3, #1
    38d2:	d102      	bne.n	38da <_can_async_read+0xa6>
		msg->type = CAN_TYPE_REMOTE;
    38d4:	683b      	ldr	r3, [r7, #0]
    38d6:	2201      	movs	r2, #1
    38d8:	711a      	strb	r2, [r3, #4]
	}

	const uint8_t dlc2len[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 12, 16, 20, 24, 32, 48, 64};
    38da:	4b17      	ldr	r3, [pc, #92]	; (3938 <_can_async_read+0x104>)
    38dc:	f107 0408 	add.w	r4, r7, #8
    38e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    38e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	msg->len                = dlc2len[f->R1.bit.DLC];
    38e6:	69fb      	ldr	r3, [r7, #28]
    38e8:	685b      	ldr	r3, [r3, #4]
    38ea:	f3c3 4303 	ubfx	r3, r3, #16, #4
    38ee:	b2db      	uxtb	r3, r3
    38f0:	f107 0220 	add.w	r2, r7, #32
    38f4:	4413      	add	r3, r2
    38f6:	f813 2c18 	ldrb.w	r2, [r3, #-24]
    38fa:	683b      	ldr	r3, [r7, #0]
    38fc:	731a      	strb	r2, [r3, #12]

	memcpy(msg->data, f->data, msg->len);
    38fe:	683b      	ldr	r3, [r7, #0]
    3900:	6898      	ldr	r0, [r3, #8]
    3902:	69fb      	ldr	r3, [r7, #28]
    3904:	f103 0108 	add.w	r1, r3, #8
    3908:	683b      	ldr	r3, [r7, #0]
    390a:	7b1b      	ldrb	r3, [r3, #12]
    390c:	461a      	mov	r2, r3
    390e:	4b0b      	ldr	r3, [pc, #44]	; (393c <_can_async_read+0x108>)
    3910:	4798      	blx	r3

	hri_can_write_RXF0A_F0AI_bf(dev->hw, get_index);
    3912:	687b      	ldr	r3, [r7, #4]
    3914:	681b      	ldr	r3, [r3, #0]
    3916:	69b9      	ldr	r1, [r7, #24]
    3918:	4618      	mov	r0, r3
    391a:	4b09      	ldr	r3, [pc, #36]	; (3940 <_can_async_read+0x10c>)
    391c:	4798      	blx	r3

	return ERR_NONE;
    391e:	2300      	movs	r3, #0
}
    3920:	4618      	mov	r0, r3
    3922:	3724      	adds	r7, #36	; 0x24
    3924:	46bd      	mov	sp, r7
    3926:	bd90      	pop	{r4, r7, pc}
    3928:	00003179 	.word	0x00003179
    392c:	00003197 	.word	0x00003197
    3930:	42000400 	.word	0x42000400
    3934:	20001b50 	.word	0x20001b50
    3938:	00013008 	.word	0x00013008
    393c:	00012bc5 	.word	0x00012bc5
    3940:	00003519 	.word	0x00003519

00003944 <_can_async_write>:

/**
 * \brief Write a CAN message
 */
int32_t _can_async_write(struct _can_async_device *const dev, struct can_message *msg)
{
    3944:	b590      	push	{r4, r7, lr}
    3946:	b085      	sub	sp, #20
    3948:	af00      	add	r7, sp, #0
    394a:	6078      	str	r0, [r7, #4]
    394c:	6039      	str	r1, [r7, #0]
	struct _can_tx_fifo_entry *f = NULL;
    394e:	2300      	movs	r3, #0
    3950:	60fb      	str	r3, [r7, #12]
	hri_can_txfqs_reg_t        put_index;

	if (hri_can_get_TXFQS_TFQF_bit(dev->hw)) {
    3952:	687b      	ldr	r3, [r7, #4]
    3954:	681b      	ldr	r3, [r3, #0]
    3956:	4618      	mov	r0, r3
    3958:	4b61      	ldr	r3, [pc, #388]	; (3ae0 <_can_async_write+0x19c>)
    395a:	4798      	blx	r3
    395c:	4603      	mov	r3, r0
    395e:	2b00      	cmp	r3, #0
    3960:	d002      	beq.n	3968 <_can_async_write+0x24>
		return ERR_NO_RESOURCE;
    3962:	f06f 031b 	mvn.w	r3, #27
    3966:	e0b7      	b.n	3ad8 <_can_async_write+0x194>
	}

	put_index = hri_can_read_TXFQS_TFQPI_bf(dev->hw);
    3968:	687b      	ldr	r3, [r7, #4]
    396a:	681b      	ldr	r3, [r3, #0]
    396c:	4618      	mov	r0, r3
    396e:	4b5d      	ldr	r3, [pc, #372]	; (3ae4 <_can_async_write+0x1a0>)
    3970:	4798      	blx	r3
    3972:	60b8      	str	r0, [r7, #8]
	if (dev->hw == CAN0) {
		f = (struct _can_tx_fifo_entry *)(can0_tx_fifo + put_index * CONF_CAN0_TBDS);
	}
#endif
#ifdef CONF_CAN1_ENABLED
	if (dev->hw == CAN1) {
    3974:	687b      	ldr	r3, [r7, #4]
    3976:	681b      	ldr	r3, [r3, #0]
    3978:	4a5b      	ldr	r2, [pc, #364]	; (3ae8 <_can_async_write+0x1a4>)
    397a:	4293      	cmp	r3, r2
    397c:	d108      	bne.n	3990 <_can_async_write+0x4c>
		f = (struct _can_tx_fifo_entry *)(can1_tx_fifo + put_index * CONF_CAN1_TBDS);
    397e:	68ba      	ldr	r2, [r7, #8]
    3980:	4613      	mov	r3, r2
    3982:	00db      	lsls	r3, r3, #3
    3984:	4413      	add	r3, r2
    3986:	00db      	lsls	r3, r3, #3
    3988:	461a      	mov	r2, r3
    398a:	4b58      	ldr	r3, [pc, #352]	; (3aec <_can_async_write+0x1a8>)
    398c:	4413      	add	r3, r2
    398e:	60fb      	str	r3, [r7, #12]
	}
#endif
	if (f == NULL) {
    3990:	68fb      	ldr	r3, [r7, #12]
    3992:	2b00      	cmp	r3, #0
    3994:	d102      	bne.n	399c <_can_async_write+0x58>
		return ERR_NO_RESOURCE;
    3996:	f06f 031b 	mvn.w	r3, #27
    399a:	e09d      	b.n	3ad8 <_can_async_write+0x194>
	}

	if (msg->fmt == CAN_FMT_EXTID) {
    399c:	683b      	ldr	r3, [r7, #0]
    399e:	7b5b      	ldrb	r3, [r3, #13]
    39a0:	2b01      	cmp	r3, #1
    39a2:	d109      	bne.n	39b8 <_can_async_write+0x74>
		f->T0.val     = msg->id;
    39a4:	683b      	ldr	r3, [r7, #0]
    39a6:	681a      	ldr	r2, [r3, #0]
    39a8:	68fb      	ldr	r3, [r7, #12]
    39aa:	601a      	str	r2, [r3, #0]
		f->T0.bit.XTD = 1;
    39ac:	68fa      	ldr	r2, [r7, #12]
    39ae:	6813      	ldr	r3, [r2, #0]
    39b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    39b4:	6013      	str	r3, [r2, #0]
    39b6:	e004      	b.n	39c2 <_can_async_write+0x7e>
	} else {
		/* A standard identifier is stored into ID[28:18] */
		f->T0.val = msg->id << 18;
    39b8:	683b      	ldr	r3, [r7, #0]
    39ba:	681b      	ldr	r3, [r3, #0]
    39bc:	049a      	lsls	r2, r3, #18
    39be:	68fb      	ldr	r3, [r7, #12]
    39c0:	601a      	str	r2, [r3, #0]
	}

	if (msg->len <= 8) {
    39c2:	683b      	ldr	r3, [r7, #0]
    39c4:	7b1b      	ldrb	r3, [r3, #12]
    39c6:	2b08      	cmp	r3, #8
    39c8:	d80a      	bhi.n	39e0 <_can_async_write+0x9c>
		f->T1.bit.DLC = msg->len;
    39ca:	683b      	ldr	r3, [r7, #0]
    39cc:	7b1b      	ldrb	r3, [r3, #12]
    39ce:	f003 030f 	and.w	r3, r3, #15
    39d2:	b2d9      	uxtb	r1, r3
    39d4:	68fa      	ldr	r2, [r7, #12]
    39d6:	6853      	ldr	r3, [r2, #4]
    39d8:	f361 4313 	bfi	r3, r1, #16, #4
    39dc:	6053      	str	r3, [r2, #4]
    39de:	e04a      	b.n	3a76 <_can_async_write+0x132>
	} else if (msg->len <= 12) {
    39e0:	683b      	ldr	r3, [r7, #0]
    39e2:	7b1b      	ldrb	r3, [r3, #12]
    39e4:	2b0c      	cmp	r3, #12
    39e6:	d806      	bhi.n	39f6 <_can_async_write+0xb2>
		f->T1.bit.DLC = 0x9;
    39e8:	68fa      	ldr	r2, [r7, #12]
    39ea:	6853      	ldr	r3, [r2, #4]
    39ec:	2109      	movs	r1, #9
    39ee:	f361 4313 	bfi	r3, r1, #16, #4
    39f2:	6053      	str	r3, [r2, #4]
    39f4:	e03f      	b.n	3a76 <_can_async_write+0x132>
	} else if (msg->len <= 16) {
    39f6:	683b      	ldr	r3, [r7, #0]
    39f8:	7b1b      	ldrb	r3, [r3, #12]
    39fa:	2b10      	cmp	r3, #16
    39fc:	d806      	bhi.n	3a0c <_can_async_write+0xc8>
		f->T1.bit.DLC = 0xA;
    39fe:	68fa      	ldr	r2, [r7, #12]
    3a00:	6853      	ldr	r3, [r2, #4]
    3a02:	210a      	movs	r1, #10
    3a04:	f361 4313 	bfi	r3, r1, #16, #4
    3a08:	6053      	str	r3, [r2, #4]
    3a0a:	e034      	b.n	3a76 <_can_async_write+0x132>
	} else if (msg->len <= 20) {
    3a0c:	683b      	ldr	r3, [r7, #0]
    3a0e:	7b1b      	ldrb	r3, [r3, #12]
    3a10:	2b14      	cmp	r3, #20
    3a12:	d806      	bhi.n	3a22 <_can_async_write+0xde>
		f->T1.bit.DLC = 0xB;
    3a14:	68fa      	ldr	r2, [r7, #12]
    3a16:	6853      	ldr	r3, [r2, #4]
    3a18:	210b      	movs	r1, #11
    3a1a:	f361 4313 	bfi	r3, r1, #16, #4
    3a1e:	6053      	str	r3, [r2, #4]
    3a20:	e029      	b.n	3a76 <_can_async_write+0x132>
	} else if (msg->len <= 24) {
    3a22:	683b      	ldr	r3, [r7, #0]
    3a24:	7b1b      	ldrb	r3, [r3, #12]
    3a26:	2b18      	cmp	r3, #24
    3a28:	d806      	bhi.n	3a38 <_can_async_write+0xf4>
		f->T1.bit.DLC = 0xC;
    3a2a:	68fa      	ldr	r2, [r7, #12]
    3a2c:	6853      	ldr	r3, [r2, #4]
    3a2e:	210c      	movs	r1, #12
    3a30:	f361 4313 	bfi	r3, r1, #16, #4
    3a34:	6053      	str	r3, [r2, #4]
    3a36:	e01e      	b.n	3a76 <_can_async_write+0x132>
	} else if (msg->len <= 32) {
    3a38:	683b      	ldr	r3, [r7, #0]
    3a3a:	7b1b      	ldrb	r3, [r3, #12]
    3a3c:	2b20      	cmp	r3, #32
    3a3e:	d806      	bhi.n	3a4e <_can_async_write+0x10a>
		f->T1.bit.DLC = 0xD;
    3a40:	68fa      	ldr	r2, [r7, #12]
    3a42:	6853      	ldr	r3, [r2, #4]
    3a44:	210d      	movs	r1, #13
    3a46:	f361 4313 	bfi	r3, r1, #16, #4
    3a4a:	6053      	str	r3, [r2, #4]
    3a4c:	e013      	b.n	3a76 <_can_async_write+0x132>
	} else if (msg->len <= 48) {
    3a4e:	683b      	ldr	r3, [r7, #0]
    3a50:	7b1b      	ldrb	r3, [r3, #12]
    3a52:	2b30      	cmp	r3, #48	; 0x30
    3a54:	d806      	bhi.n	3a64 <_can_async_write+0x120>
		f->T1.bit.DLC = 0xE;
    3a56:	68fa      	ldr	r2, [r7, #12]
    3a58:	6853      	ldr	r3, [r2, #4]
    3a5a:	210e      	movs	r1, #14
    3a5c:	f361 4313 	bfi	r3, r1, #16, #4
    3a60:	6053      	str	r3, [r2, #4]
    3a62:	e008      	b.n	3a76 <_can_async_write+0x132>
	} else if (msg->len <= 64) {
    3a64:	683b      	ldr	r3, [r7, #0]
    3a66:	7b1b      	ldrb	r3, [r3, #12]
    3a68:	2b40      	cmp	r3, #64	; 0x40
    3a6a:	d804      	bhi.n	3a76 <_can_async_write+0x132>
		f->T1.bit.DLC = 0xF;
    3a6c:	68fa      	ldr	r2, [r7, #12]
    3a6e:	6853      	ldr	r3, [r2, #4]
    3a70:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
    3a74:	6053      	str	r3, [r2, #4]
	}

	f->T1.bit.FDF = hri_can_get_CCCR_FDOE_bit(dev->hw);
    3a76:	687b      	ldr	r3, [r7, #4]
    3a78:	681b      	ldr	r3, [r3, #0]
    3a7a:	4618      	mov	r0, r3
    3a7c:	4b1c      	ldr	r3, [pc, #112]	; (3af0 <_can_async_write+0x1ac>)
    3a7e:	4798      	blx	r3
    3a80:	4603      	mov	r3, r0
    3a82:	4619      	mov	r1, r3
    3a84:	68fa      	ldr	r2, [r7, #12]
    3a86:	6853      	ldr	r3, [r2, #4]
    3a88:	f361 5355 	bfi	r3, r1, #21, #1
    3a8c:	6053      	str	r3, [r2, #4]
	f->T1.bit.BRS = hri_can_get_CCCR_BRSE_bit(dev->hw);
    3a8e:	687b      	ldr	r3, [r7, #4]
    3a90:	681b      	ldr	r3, [r3, #0]
    3a92:	4618      	mov	r0, r3
    3a94:	4b17      	ldr	r3, [pc, #92]	; (3af4 <_can_async_write+0x1b0>)
    3a96:	4798      	blx	r3
    3a98:	4603      	mov	r3, r0
    3a9a:	4619      	mov	r1, r3
    3a9c:	68fa      	ldr	r2, [r7, #12]
    3a9e:	6853      	ldr	r3, [r2, #4]
    3aa0:	f361 5314 	bfi	r3, r1, #20, #1
    3aa4:	6053      	str	r3, [r2, #4]

	memcpy(f->data, msg->data, msg->len);
    3aa6:	68fb      	ldr	r3, [r7, #12]
    3aa8:	f103 0008 	add.w	r0, r3, #8
    3aac:	683b      	ldr	r3, [r7, #0]
    3aae:	6899      	ldr	r1, [r3, #8]
    3ab0:	683b      	ldr	r3, [r7, #0]
    3ab2:	7b1b      	ldrb	r3, [r3, #12]
    3ab4:	461a      	mov	r2, r3
    3ab6:	4b10      	ldr	r3, [pc, #64]	; (3af8 <_can_async_write+0x1b4>)
    3ab8:	4798      	blx	r3

	hri_can_write_TXBAR_reg(dev->hw, 1 << hri_can_read_TXFQS_TFQPI_bf(dev->hw));
    3aba:	687b      	ldr	r3, [r7, #4]
    3abc:	681c      	ldr	r4, [r3, #0]
    3abe:	687b      	ldr	r3, [r7, #4]
    3ac0:	681b      	ldr	r3, [r3, #0]
    3ac2:	4618      	mov	r0, r3
    3ac4:	4b07      	ldr	r3, [pc, #28]	; (3ae4 <_can_async_write+0x1a0>)
    3ac6:	4798      	blx	r3
    3ac8:	4602      	mov	r2, r0
    3aca:	2301      	movs	r3, #1
    3acc:	4093      	lsls	r3, r2
    3ace:	4619      	mov	r1, r3
    3ad0:	4620      	mov	r0, r4
    3ad2:	4b0a      	ldr	r3, [pc, #40]	; (3afc <_can_async_write+0x1b8>)
    3ad4:	4798      	blx	r3
	return ERR_NONE;
    3ad6:	2300      	movs	r3, #0
}
    3ad8:	4618      	mov	r0, r3
    3ada:	3714      	adds	r7, #20
    3adc:	46bd      	mov	sp, r7
    3ade:	bd90      	pop	{r4, r7, pc}
    3ae0:	000031b7 	.word	0x000031b7
    3ae4:	000031e1 	.word	0x000031e1
    3ae8:	42000400 	.word	0x42000400
    3aec:	20001b08 	.word	0x20001b08
    3af0:	000032e7 	.word	0x000032e7
    3af4:	00003317 	.word	0x00003317
    3af8:	00012bc5 	.word	0x00012bc5
    3afc:	000035ad 	.word	0x000035ad

00003b00 <_can_async_set_irq_state>:

/**
 * \brief Set CAN Interrupt State
 */
void _can_async_set_irq_state(struct _can_async_device *const dev, enum can_async_callback_type type, bool state)
{
    3b00:	b580      	push	{r7, lr}
    3b02:	b084      	sub	sp, #16
    3b04:	af00      	add	r7, sp, #0
    3b06:	6078      	str	r0, [r7, #4]
    3b08:	460b      	mov	r3, r1
    3b0a:	70fb      	strb	r3, [r7, #3]
    3b0c:	4613      	mov	r3, r2
    3b0e:	70bb      	strb	r3, [r7, #2]
	uint32_t ie;

	if (type == CAN_ASYNC_RX_CB) {
    3b10:	78fb      	ldrb	r3, [r7, #3]
    3b12:	2b00      	cmp	r3, #0
    3b14:	d107      	bne.n	3b26 <_can_async_set_irq_state+0x26>
		hri_can_write_IE_RF0NE_bit(dev->hw, state);
    3b16:	687b      	ldr	r3, [r7, #4]
    3b18:	681b      	ldr	r3, [r3, #0]
    3b1a:	78ba      	ldrb	r2, [r7, #2]
    3b1c:	4611      	mov	r1, r2
    3b1e:	4618      	mov	r0, r3
    3b20:	4b15      	ldr	r3, [pc, #84]	; (3b78 <_can_async_set_irq_state+0x78>)
    3b22:	4798      	blx	r3
	} else if (type == CAN_ASYNC_IRQ_CB) {
		ie = hri_can_get_IE_reg(dev->hw, CAN_IE_RF0NE | CAN_IE_TCE);
		hri_can_write_IE_reg(dev->hw, ie | CONF_CAN0_IE_REG);
	}

	return;
    3b24:	e023      	b.n	3b6e <_can_async_set_irq_state+0x6e>
	} else if (type == CAN_ASYNC_TX_CB) {
    3b26:	78fb      	ldrb	r3, [r7, #3]
    3b28:	2b01      	cmp	r3, #1
    3b2a:	d10e      	bne.n	3b4a <_can_async_set_irq_state+0x4a>
		hri_can_write_IE_TCE_bit(dev->hw, state);
    3b2c:	687b      	ldr	r3, [r7, #4]
    3b2e:	681b      	ldr	r3, [r3, #0]
    3b30:	78ba      	ldrb	r2, [r7, #2]
    3b32:	4611      	mov	r1, r2
    3b34:	4618      	mov	r0, r3
    3b36:	4b11      	ldr	r3, [pc, #68]	; (3b7c <_can_async_set_irq_state+0x7c>)
    3b38:	4798      	blx	r3
		hri_can_write_TXBTIE_reg(dev->hw, CAN_TXBTIE_MASK);
    3b3a:	687b      	ldr	r3, [r7, #4]
    3b3c:	681b      	ldr	r3, [r3, #0]
    3b3e:	f04f 31ff 	mov.w	r1, #4294967295
    3b42:	4618      	mov	r0, r3
    3b44:	4b0e      	ldr	r3, [pc, #56]	; (3b80 <_can_async_set_irq_state+0x80>)
    3b46:	4798      	blx	r3
	return;
    3b48:	e011      	b.n	3b6e <_can_async_set_irq_state+0x6e>
	} else if (type == CAN_ASYNC_IRQ_CB) {
    3b4a:	78fb      	ldrb	r3, [r7, #3]
    3b4c:	2b02      	cmp	r3, #2
    3b4e:	d10e      	bne.n	3b6e <_can_async_set_irq_state+0x6e>
		ie = hri_can_get_IE_reg(dev->hw, CAN_IE_RF0NE | CAN_IE_TCE);
    3b50:	687b      	ldr	r3, [r7, #4]
    3b52:	681b      	ldr	r3, [r3, #0]
    3b54:	f240 2101 	movw	r1, #513	; 0x201
    3b58:	4618      	mov	r0, r3
    3b5a:	4b0a      	ldr	r3, [pc, #40]	; (3b84 <_can_async_set_irq_state+0x84>)
    3b5c:	4798      	blx	r3
    3b5e:	60f8      	str	r0, [r7, #12]
		hri_can_write_IE_reg(dev->hw, ie | CONF_CAN0_IE_REG);
    3b60:	687b      	ldr	r3, [r7, #4]
    3b62:	681b      	ldr	r3, [r3, #0]
    3b64:	68f9      	ldr	r1, [r7, #12]
    3b66:	4618      	mov	r0, r3
    3b68:	4b07      	ldr	r3, [pc, #28]	; (3b88 <_can_async_set_irq_state+0x88>)
    3b6a:	4798      	blx	r3
	return;
    3b6c:	bf00      	nop
    3b6e:	bf00      	nop
}
    3b70:	3710      	adds	r7, #16
    3b72:	46bd      	mov	sp, r7
    3b74:	bd80      	pop	{r7, pc}
    3b76:	bf00      	nop
    3b78:	000033b9 	.word	0x000033b9
    3b7c:	000033ed 	.word	0x000033ed
    3b80:	000035cb 	.word	0x000035cb
    3b84:	00003425 	.word	0x00003425
    3b88:	0000344b 	.word	0x0000344b

00003b8c <_can_async_set_filter>:
/**
 * \brief Set CAN to the specified mode
 */
int32_t _can_async_set_filter(struct _can_async_device *const dev, uint8_t index, enum can_format fmt,
                              struct can_filter *filter)
{
    3b8c:	b480      	push	{r7}
    3b8e:	b087      	sub	sp, #28
    3b90:	af00      	add	r7, sp, #0
    3b92:	60f8      	str	r0, [r7, #12]
    3b94:	607b      	str	r3, [r7, #4]
    3b96:	460b      	mov	r3, r1
    3b98:	72fb      	strb	r3, [r7, #11]
    3b9a:	4613      	mov	r3, r2
    3b9c:	72bb      	strb	r3, [r7, #10]
	struct _can_standard_message_filter_element *sf;
	struct _can_extended_message_filter_element *ef;

	sf = &((struct _can_context *)dev->context)->rx_std_filter[index];
    3b9e:	68fb      	ldr	r3, [r7, #12]
    3ba0:	699b      	ldr	r3, [r3, #24]
    3ba2:	68da      	ldr	r2, [r3, #12]
    3ba4:	7afb      	ldrb	r3, [r7, #11]
    3ba6:	009b      	lsls	r3, r3, #2
    3ba8:	4413      	add	r3, r2
    3baa:	617b      	str	r3, [r7, #20]
	ef = &((struct _can_context *)dev->context)->rx_ext_filter[index];
    3bac:	68fb      	ldr	r3, [r7, #12]
    3bae:	699b      	ldr	r3, [r3, #24]
    3bb0:	691a      	ldr	r2, [r3, #16]
    3bb2:	7afb      	ldrb	r3, [r7, #11]
    3bb4:	00db      	lsls	r3, r3, #3
    3bb6:	4413      	add	r3, r2
    3bb8:	613b      	str	r3, [r7, #16]

	if (fmt == CAN_FMT_STDID) {
    3bba:	7abb      	ldrb	r3, [r7, #10]
    3bbc:	2b00      	cmp	r3, #0
    3bbe:	d123      	bne.n	3c08 <_can_async_set_filter+0x7c>
		if (filter == NULL) {
    3bc0:	687b      	ldr	r3, [r7, #4]
    3bc2:	2b00      	cmp	r3, #0
    3bc4:	d104      	bne.n	3bd0 <_can_async_set_filter+0x44>
			sf->S0.val = 0;
    3bc6:	697b      	ldr	r3, [r7, #20]
    3bc8:	2200      	movs	r2, #0
    3bca:	601a      	str	r2, [r3, #0]
			return ERR_NONE;
    3bcc:	2300      	movs	r3, #0
    3bce:	e03b      	b.n	3c48 <_can_async_set_filter+0xbc>
		}
		sf->S0.val       = filter->mask;
    3bd0:	687b      	ldr	r3, [r7, #4]
    3bd2:	685a      	ldr	r2, [r3, #4]
    3bd4:	697b      	ldr	r3, [r7, #20]
    3bd6:	601a      	str	r2, [r3, #0]
		sf->S0.bit.SFID1 = filter->id;
    3bd8:	687b      	ldr	r3, [r7, #4]
    3bda:	681b      	ldr	r3, [r3, #0]
    3bdc:	b29b      	uxth	r3, r3
    3bde:	f3c3 030a 	ubfx	r3, r3, #0, #11
    3be2:	b299      	uxth	r1, r3
    3be4:	697a      	ldr	r2, [r7, #20]
    3be6:	6813      	ldr	r3, [r2, #0]
    3be8:	f361 431a 	bfi	r3, r1, #16, #11
    3bec:	6013      	str	r3, [r2, #0]
		sf->S0.bit.SFT   = _CAN_SFT_CLASSIC;
    3bee:	697a      	ldr	r2, [r7, #20]
    3bf0:	6813      	ldr	r3, [r2, #0]
    3bf2:	2102      	movs	r1, #2
    3bf4:	f361 739f 	bfi	r3, r1, #30, #2
    3bf8:	6013      	str	r3, [r2, #0]
		sf->S0.bit.SFEC  = _CAN_SFEC_STF0M;
    3bfa:	697a      	ldr	r2, [r7, #20]
    3bfc:	6813      	ldr	r3, [r2, #0]
    3bfe:	2101      	movs	r1, #1
    3c00:	f361 63dd 	bfi	r3, r1, #27, #3
    3c04:	6013      	str	r3, [r2, #0]
    3c06:	e01e      	b.n	3c46 <_can_async_set_filter+0xba>
	} else if (fmt == CAN_FMT_EXTID) {
    3c08:	7abb      	ldrb	r3, [r7, #10]
    3c0a:	2b01      	cmp	r3, #1
    3c0c:	d11b      	bne.n	3c46 <_can_async_set_filter+0xba>
		if (filter == NULL) {
    3c0e:	687b      	ldr	r3, [r7, #4]
    3c10:	2b00      	cmp	r3, #0
    3c12:	d104      	bne.n	3c1e <_can_async_set_filter+0x92>
			ef->F0.val = 0;
    3c14:	693b      	ldr	r3, [r7, #16]
    3c16:	2200      	movs	r2, #0
    3c18:	601a      	str	r2, [r3, #0]
			return ERR_NONE;
    3c1a:	2300      	movs	r3, #0
    3c1c:	e014      	b.n	3c48 <_can_async_set_filter+0xbc>
		}
		ef->F0.val      = filter->id;
    3c1e:	687b      	ldr	r3, [r7, #4]
    3c20:	681a      	ldr	r2, [r3, #0]
    3c22:	693b      	ldr	r3, [r7, #16]
    3c24:	601a      	str	r2, [r3, #0]
		ef->F0.bit.EFEC = _CAN_EFEC_STF0M;
    3c26:	693a      	ldr	r2, [r7, #16]
    3c28:	6813      	ldr	r3, [r2, #0]
    3c2a:	2101      	movs	r1, #1
    3c2c:	f361 735f 	bfi	r3, r1, #29, #3
    3c30:	6013      	str	r3, [r2, #0]
		ef->F1.val      = filter->mask;
    3c32:	687b      	ldr	r3, [r7, #4]
    3c34:	685a      	ldr	r2, [r3, #4]
    3c36:	693b      	ldr	r3, [r7, #16]
    3c38:	605a      	str	r2, [r3, #4]
		ef->F1.bit.EFT  = _CAN_EFT_CLASSIC;
    3c3a:	693a      	ldr	r2, [r7, #16]
    3c3c:	6853      	ldr	r3, [r2, #4]
    3c3e:	2102      	movs	r1, #2
    3c40:	f361 739f 	bfi	r3, r1, #30, #2
    3c44:	6053      	str	r3, [r2, #4]
	}

	return ERR_NONE;
    3c46:	2300      	movs	r3, #0
}
    3c48:	4618      	mov	r0, r3
    3c4a:	371c      	adds	r7, #28
    3c4c:	46bd      	mov	sp, r7
    3c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c52:	4770      	bx	lr

00003c54 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    3c54:	b590      	push	{r4, r7, lr}
    3c56:	b083      	sub	sp, #12
    3c58:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    3c5a:	4b2c      	ldr	r3, [pc, #176]	; (3d0c <CAN1_Handler+0xb8>)
    3c5c:	681b      	ldr	r3, [r3, #0]
    3c5e:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    3c60:	687b      	ldr	r3, [r7, #4]
    3c62:	681b      	ldr	r3, [r3, #0]
    3c64:	4618      	mov	r0, r3
    3c66:	4b2a      	ldr	r3, [pc, #168]	; (3d10 <CAN1_Handler+0xbc>)
    3c68:	4798      	blx	r3
    3c6a:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    3c6c:	683b      	ldr	r3, [r7, #0]
    3c6e:	f003 0301 	and.w	r3, r3, #1
    3c72:	2b00      	cmp	r3, #0
    3c74:	d003      	beq.n	3c7e <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    3c76:	687b      	ldr	r3, [r7, #4]
    3c78:	689b      	ldr	r3, [r3, #8]
    3c7a:	6878      	ldr	r0, [r7, #4]
    3c7c:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    3c7e:	683b      	ldr	r3, [r7, #0]
    3c80:	f403 7300 	and.w	r3, r3, #512	; 0x200
    3c84:	2b00      	cmp	r3, #0
    3c86:	d003      	beq.n	3c90 <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    3c88:	687b      	ldr	r3, [r7, #4]
    3c8a:	685b      	ldr	r3, [r3, #4]
    3c8c:	6878      	ldr	r0, [r7, #4]
    3c8e:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    3c90:	683b      	ldr	r3, [r7, #0]
    3c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    3c96:	2b00      	cmp	r3, #0
    3c98:	d004      	beq.n	3ca4 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    3c9a:	687b      	ldr	r3, [r7, #4]
    3c9c:	68db      	ldr	r3, [r3, #12]
    3c9e:	2103      	movs	r1, #3
    3ca0:	6878      	ldr	r0, [r7, #4]
    3ca2:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    3ca4:	683b      	ldr	r3, [r7, #0]
    3ca6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    3caa:	2b00      	cmp	r3, #0
    3cac:	d004      	beq.n	3cb8 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    3cae:	687b      	ldr	r3, [r7, #4]
    3cb0:	68db      	ldr	r3, [r3, #12]
    3cb2:	2100      	movs	r1, #0
    3cb4:	6878      	ldr	r0, [r7, #4]
    3cb6:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    3cb8:	683b      	ldr	r3, [r7, #0]
    3cba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    3cbe:	2b00      	cmp	r3, #0
    3cc0:	d00f      	beq.n	3ce2 <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    3cc2:	687b      	ldr	r3, [r7, #4]
    3cc4:	68dc      	ldr	r4, [r3, #12]
    3cc6:	687b      	ldr	r3, [r7, #4]
    3cc8:	681b      	ldr	r3, [r3, #0]
    3cca:	4618      	mov	r0, r3
    3ccc:	4b11      	ldr	r3, [pc, #68]	; (3d14 <CAN1_Handler+0xc0>)
    3cce:	4798      	blx	r3
    3cd0:	4603      	mov	r3, r0
    3cd2:	2b00      	cmp	r3, #0
    3cd4:	d001      	beq.n	3cda <CAN1_Handler+0x86>
    3cd6:	2302      	movs	r3, #2
    3cd8:	e000      	b.n	3cdc <CAN1_Handler+0x88>
    3cda:	2301      	movs	r3, #1
    3cdc:	4619      	mov	r1, r3
    3cde:	6878      	ldr	r0, [r7, #4]
    3ce0:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    3ce2:	683b      	ldr	r3, [r7, #0]
    3ce4:	f003 0308 	and.w	r3, r3, #8
    3ce8:	2b00      	cmp	r3, #0
    3cea:	d004      	beq.n	3cf6 <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    3cec:	687b      	ldr	r3, [r7, #4]
    3cee:	68db      	ldr	r3, [r3, #12]
    3cf0:	2104      	movs	r1, #4
    3cf2:	6878      	ldr	r0, [r7, #4]
    3cf4:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    3cf6:	687b      	ldr	r3, [r7, #4]
    3cf8:	681b      	ldr	r3, [r3, #0]
    3cfa:	6839      	ldr	r1, [r7, #0]
    3cfc:	4618      	mov	r0, r3
    3cfe:	4b06      	ldr	r3, [pc, #24]	; (3d18 <CAN1_Handler+0xc4>)
    3d00:	4798      	blx	r3
}
    3d02:	bf00      	nop
    3d04:	370c      	adds	r7, #12
    3d06:	46bd      	mov	sp, r7
    3d08:	bd90      	pop	{r4, r7, pc}
    3d0a:	bf00      	nop
    3d0c:	20001460 	.word	0x20001460
    3d10:	000033a1 	.word	0x000033a1
    3d14:	00003151 	.word	0x00003151
    3d18:	00003385 	.word	0x00003385

00003d1c <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    3d1c:	b480      	push	{r7}
    3d1e:	b083      	sub	sp, #12
    3d20:	af00      	add	r7, sp, #0
    3d22:	4603      	mov	r3, r0
    3d24:	6039      	str	r1, [r7, #0]
    3d26:	80fb      	strh	r3, [r7, #6]
    3d28:	4613      	mov	r3, r2
    3d2a:	717b      	strb	r3, [r7, #5]
	switch (power) {
    3d2c:	797b      	ldrb	r3, [r7, #5]
    3d2e:	3b04      	subs	r3, #4
    3d30:	2b05      	cmp	r3, #5
    3d32:	d86b      	bhi.n	3e0c <_get_cycles_for_us_internal+0xf0>
    3d34:	a201      	add	r2, pc, #4	; (adr r2, 3d3c <_get_cycles_for_us_internal+0x20>)
    3d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3d3a:	bf00      	nop
    3d3c:	00003deb 	.word	0x00003deb
    3d40:	00003dcb 	.word	0x00003dcb
    3d44:	00003dad 	.word	0x00003dad
    3d48:	00003d8f 	.word	0x00003d8f
    3d4c:	00003d71 	.word	0x00003d71
    3d50:	00003d55 	.word	0x00003d55
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    3d54:	88fb      	ldrh	r3, [r7, #6]
    3d56:	683a      	ldr	r2, [r7, #0]
    3d58:	4935      	ldr	r1, [pc, #212]	; (3e30 <_get_cycles_for_us_internal+0x114>)
    3d5a:	fba1 1202 	umull	r1, r2, r1, r2
    3d5e:	0c92      	lsrs	r2, r2, #18
    3d60:	fb02 f303 	mul.w	r3, r2, r3
    3d64:	3302      	adds	r3, #2
    3d66:	4a33      	ldr	r2, [pc, #204]	; (3e34 <_get_cycles_for_us_internal+0x118>)
    3d68:	fba2 2303 	umull	r2, r3, r2, r3
    3d6c:	085b      	lsrs	r3, r3, #1
    3d6e:	e059      	b.n	3e24 <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    3d70:	88fb      	ldrh	r3, [r7, #6]
    3d72:	683a      	ldr	r2, [r7, #0]
    3d74:	0952      	lsrs	r2, r2, #5
    3d76:	4930      	ldr	r1, [pc, #192]	; (3e38 <_get_cycles_for_us_internal+0x11c>)
    3d78:	fba1 1202 	umull	r1, r2, r1, r2
    3d7c:	09d2      	lsrs	r2, r2, #7
    3d7e:	fb02 f303 	mul.w	r3, r2, r3
    3d82:	331d      	adds	r3, #29
    3d84:	4a2d      	ldr	r2, [pc, #180]	; (3e3c <_get_cycles_for_us_internal+0x120>)
    3d86:	fba2 2303 	umull	r2, r3, r2, r3
    3d8a:	091b      	lsrs	r3, r3, #4
    3d8c:	e04a      	b.n	3e24 <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    3d8e:	88fb      	ldrh	r3, [r7, #6]
    3d90:	683a      	ldr	r2, [r7, #0]
    3d92:	492b      	ldr	r1, [pc, #172]	; (3e40 <_get_cycles_for_us_internal+0x124>)
    3d94:	fba1 1202 	umull	r1, r2, r1, r2
    3d98:	0b52      	lsrs	r2, r2, #13
    3d9a:	fb02 f303 	mul.w	r3, r2, r3
    3d9e:	f203 132b 	addw	r3, r3, #299	; 0x12b
    3da2:	4a28      	ldr	r2, [pc, #160]	; (3e44 <_get_cycles_for_us_internal+0x128>)
    3da4:	fba2 2303 	umull	r2, r3, r2, r3
    3da8:	095b      	lsrs	r3, r3, #5
    3daa:	e03b      	b.n	3e24 <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    3dac:	88fb      	ldrh	r3, [r7, #6]
    3dae:	683a      	ldr	r2, [r7, #0]
    3db0:	4925      	ldr	r1, [pc, #148]	; (3e48 <_get_cycles_for_us_internal+0x12c>)
    3db2:	fba1 1202 	umull	r1, r2, r1, r2
    3db6:	0992      	lsrs	r2, r2, #6
    3db8:	fb02 f303 	mul.w	r3, r2, r3
    3dbc:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    3dc0:	4a22      	ldr	r2, [pc, #136]	; (3e4c <_get_cycles_for_us_internal+0x130>)
    3dc2:	fba2 2303 	umull	r2, r3, r2, r3
    3dc6:	099b      	lsrs	r3, r3, #6
    3dc8:	e02c      	b.n	3e24 <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    3dca:	88fb      	ldrh	r3, [r7, #6]
    3dcc:	683a      	ldr	r2, [r7, #0]
    3dce:	4920      	ldr	r1, [pc, #128]	; (3e50 <_get_cycles_for_us_internal+0x134>)
    3dd0:	fba1 1202 	umull	r1, r2, r1, r2
    3dd4:	0952      	lsrs	r2, r2, #5
    3dd6:	fb02 f303 	mul.w	r3, r2, r3
    3dda:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    3dde:	332f      	adds	r3, #47	; 0x2f
    3de0:	4a1c      	ldr	r2, [pc, #112]	; (3e54 <_get_cycles_for_us_internal+0x138>)
    3de2:	fba2 2303 	umull	r2, r3, r2, r3
    3de6:	0b5b      	lsrs	r3, r3, #13
    3de8:	e01c      	b.n	3e24 <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    3dea:	88fb      	ldrh	r3, [r7, #6]
    3dec:	683a      	ldr	r2, [r7, #0]
    3dee:	491a      	ldr	r1, [pc, #104]	; (3e58 <_get_cycles_for_us_internal+0x13c>)
    3df0:	fba1 1202 	umull	r1, r2, r1, r2
    3df4:	08d2      	lsrs	r2, r2, #3
    3df6:	fb02 f303 	mul.w	r3, r2, r3
    3dfa:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    3dfe:	f203 33df 	addw	r3, r3, #991	; 0x3df
    3e02:	4a16      	ldr	r2, [pc, #88]	; (3e5c <_get_cycles_for_us_internal+0x140>)
    3e04:	fba2 2303 	umull	r2, r3, r2, r3
    3e08:	0c5b      	lsrs	r3, r3, #17
    3e0a:	e00b      	b.n	3e24 <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    3e0c:	88fb      	ldrh	r3, [r7, #6]
    3e0e:	683a      	ldr	r2, [r7, #0]
    3e10:	fb02 f303 	mul.w	r3, r2, r3
    3e14:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    3e18:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    3e1c:	4a10      	ldr	r2, [pc, #64]	; (3e60 <_get_cycles_for_us_internal+0x144>)
    3e1e:	fba2 2303 	umull	r2, r3, r2, r3
    3e22:	0c9b      	lsrs	r3, r3, #18
	}
}
    3e24:	4618      	mov	r0, r3
    3e26:	370c      	adds	r7, #12
    3e28:	46bd      	mov	sp, r7
    3e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e2e:	4770      	bx	lr
    3e30:	431bde83 	.word	0x431bde83
    3e34:	aaaaaaab 	.word	0xaaaaaaab
    3e38:	0a7c5ac5 	.word	0x0a7c5ac5
    3e3c:	88888889 	.word	0x88888889
    3e40:	d1b71759 	.word	0xd1b71759
    3e44:	1b4e81b5 	.word	0x1b4e81b5
    3e48:	10624dd3 	.word	0x10624dd3
    3e4c:	057619f1 	.word	0x057619f1
    3e50:	51eb851f 	.word	0x51eb851f
    3e54:	45e7b273 	.word	0x45e7b273
    3e58:	cccccccd 	.word	0xcccccccd
    3e5c:	6fd91d85 	.word	0x6fd91d85
    3e60:	165e9f81 	.word	0x165e9f81

00003e64 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    3e64:	b580      	push	{r7, lr}
    3e66:	b082      	sub	sp, #8
    3e68:	af00      	add	r7, sp, #0
    3e6a:	4603      	mov	r3, r0
    3e6c:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    3e6e:	88fb      	ldrh	r3, [r7, #6]
    3e70:	2209      	movs	r2, #9
    3e72:	4904      	ldr	r1, [pc, #16]	; (3e84 <_get_cycles_for_us+0x20>)
    3e74:	4618      	mov	r0, r3
    3e76:	4b04      	ldr	r3, [pc, #16]	; (3e88 <_get_cycles_for_us+0x24>)
    3e78:	4798      	blx	r3
    3e7a:	4603      	mov	r3, r0
}
    3e7c:	4618      	mov	r0, r3
    3e7e:	3708      	adds	r7, #8
    3e80:	46bd      	mov	sp, r7
    3e82:	bd80      	pop	{r7, pc}
    3e84:	07270e00 	.word	0x07270e00
    3e88:	00003d1d 	.word	0x00003d1d

00003e8c <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    3e8c:	b480      	push	{r7}
    3e8e:	b083      	sub	sp, #12
    3e90:	af00      	add	r7, sp, #0
    3e92:	4603      	mov	r3, r0
    3e94:	6039      	str	r1, [r7, #0]
    3e96:	80fb      	strh	r3, [r7, #6]
    3e98:	4613      	mov	r3, r2
    3e9a:	717b      	strb	r3, [r7, #5]
	switch (power) {
    3e9c:	797b      	ldrb	r3, [r7, #5]
    3e9e:	3b04      	subs	r3, #4
    3ea0:	2b05      	cmp	r3, #5
    3ea2:	d870      	bhi.n	3f86 <_get_cycles_for_ms_internal+0xfa>
    3ea4:	a201      	add	r2, pc, #4	; (adr r2, 3eac <_get_cycles_for_ms_internal+0x20>)
    3ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3eaa:	bf00      	nop
    3eac:	00003f69 	.word	0x00003f69
    3eb0:	00003f4d 	.word	0x00003f4d
    3eb4:	00003f31 	.word	0x00003f31
    3eb8:	00003f0d 	.word	0x00003f0d
    3ebc:	00003ee9 	.word	0x00003ee9
    3ec0:	00003ec5 	.word	0x00003ec5
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    3ec4:	88fb      	ldrh	r3, [r7, #6]
    3ec6:	683a      	ldr	r2, [r7, #0]
    3ec8:	4937      	ldr	r1, [pc, #220]	; (3fa8 <_get_cycles_for_ms_internal+0x11c>)
    3eca:	fba1 1202 	umull	r1, r2, r1, r2
    3ece:	0c92      	lsrs	r2, r2, #18
    3ed0:	fb02 f303 	mul.w	r3, r2, r3
    3ed4:	3302      	adds	r3, #2
    3ed6:	4a35      	ldr	r2, [pc, #212]	; (3fac <_get_cycles_for_ms_internal+0x120>)
    3ed8:	fba2 2303 	umull	r2, r3, r2, r3
    3edc:	085b      	lsrs	r3, r3, #1
    3ede:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3ee2:	fb02 f303 	mul.w	r3, r2, r3
    3ee6:	e058      	b.n	3f9a <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    3ee8:	88fb      	ldrh	r3, [r7, #6]
    3eea:	683a      	ldr	r2, [r7, #0]
    3eec:	0952      	lsrs	r2, r2, #5
    3eee:	4930      	ldr	r1, [pc, #192]	; (3fb0 <_get_cycles_for_ms_internal+0x124>)
    3ef0:	fba1 1202 	umull	r1, r2, r1, r2
    3ef4:	09d2      	lsrs	r2, r2, #7
    3ef6:	fb02 f303 	mul.w	r3, r2, r3
    3efa:	3302      	adds	r3, #2
    3efc:	4a2b      	ldr	r2, [pc, #172]	; (3fac <_get_cycles_for_ms_internal+0x120>)
    3efe:	fba2 2303 	umull	r2, r3, r2, r3
    3f02:	085b      	lsrs	r3, r3, #1
    3f04:	2264      	movs	r2, #100	; 0x64
    3f06:	fb02 f303 	mul.w	r3, r2, r3
    3f0a:	e046      	b.n	3f9a <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    3f0c:	88fb      	ldrh	r3, [r7, #6]
    3f0e:	683a      	ldr	r2, [r7, #0]
    3f10:	4928      	ldr	r1, [pc, #160]	; (3fb4 <_get_cycles_for_ms_internal+0x128>)
    3f12:	fba1 1202 	umull	r1, r2, r1, r2
    3f16:	0b52      	lsrs	r2, r2, #13
    3f18:	fb02 f303 	mul.w	r3, r2, r3
    3f1c:	3302      	adds	r3, #2
    3f1e:	4a23      	ldr	r2, [pc, #140]	; (3fac <_get_cycles_for_ms_internal+0x120>)
    3f20:	fba2 2303 	umull	r2, r3, r2, r3
    3f24:	085a      	lsrs	r2, r3, #1
    3f26:	4613      	mov	r3, r2
    3f28:	009b      	lsls	r3, r3, #2
    3f2a:	4413      	add	r3, r2
    3f2c:	005b      	lsls	r3, r3, #1
    3f2e:	e034      	b.n	3f9a <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    3f30:	88fb      	ldrh	r3, [r7, #6]
    3f32:	683a      	ldr	r2, [r7, #0]
    3f34:	4920      	ldr	r1, [pc, #128]	; (3fb8 <_get_cycles_for_ms_internal+0x12c>)
    3f36:	fba1 1202 	umull	r1, r2, r1, r2
    3f3a:	0992      	lsrs	r2, r2, #6
    3f3c:	fb02 f303 	mul.w	r3, r2, r3
    3f40:	3302      	adds	r3, #2
    3f42:	4a1a      	ldr	r2, [pc, #104]	; (3fac <_get_cycles_for_ms_internal+0x120>)
    3f44:	fba2 2303 	umull	r2, r3, r2, r3
    3f48:	085b      	lsrs	r3, r3, #1
    3f4a:	e026      	b.n	3f9a <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    3f4c:	88fb      	ldrh	r3, [r7, #6]
    3f4e:	683a      	ldr	r2, [r7, #0]
    3f50:	491a      	ldr	r1, [pc, #104]	; (3fbc <_get_cycles_for_ms_internal+0x130>)
    3f52:	fba1 1202 	umull	r1, r2, r1, r2
    3f56:	0952      	lsrs	r2, r2, #5
    3f58:	fb02 f303 	mul.w	r3, r2, r3
    3f5c:	331d      	adds	r3, #29
    3f5e:	4a18      	ldr	r2, [pc, #96]	; (3fc0 <_get_cycles_for_ms_internal+0x134>)
    3f60:	fba2 2303 	umull	r2, r3, r2, r3
    3f64:	091b      	lsrs	r3, r3, #4
    3f66:	e018      	b.n	3f9a <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    3f68:	88fb      	ldrh	r3, [r7, #6]
    3f6a:	683a      	ldr	r2, [r7, #0]
    3f6c:	4915      	ldr	r1, [pc, #84]	; (3fc4 <_get_cycles_for_ms_internal+0x138>)
    3f6e:	fba1 1202 	umull	r1, r2, r1, r2
    3f72:	08d2      	lsrs	r2, r2, #3
    3f74:	fb02 f303 	mul.w	r3, r2, r3
    3f78:	f203 132b 	addw	r3, r3, #299	; 0x12b
    3f7c:	4a12      	ldr	r2, [pc, #72]	; (3fc8 <_get_cycles_for_ms_internal+0x13c>)
    3f7e:	fba2 2303 	umull	r2, r3, r2, r3
    3f82:	095b      	lsrs	r3, r3, #5
    3f84:	e009      	b.n	3f9a <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    3f86:	88fb      	ldrh	r3, [r7, #6]
    3f88:	683a      	ldr	r2, [r7, #0]
    3f8a:	fb02 f303 	mul.w	r3, r2, r3
    3f8e:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    3f92:	4a0e      	ldr	r2, [pc, #56]	; (3fcc <_get_cycles_for_ms_internal+0x140>)
    3f94:	fba2 2303 	umull	r2, r3, r2, r3
    3f98:	099b      	lsrs	r3, r3, #6
	}
}
    3f9a:	4618      	mov	r0, r3
    3f9c:	370c      	adds	r7, #12
    3f9e:	46bd      	mov	sp, r7
    3fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fa4:	4770      	bx	lr
    3fa6:	bf00      	nop
    3fa8:	431bde83 	.word	0x431bde83
    3fac:	aaaaaaab 	.word	0xaaaaaaab
    3fb0:	0a7c5ac5 	.word	0x0a7c5ac5
    3fb4:	d1b71759 	.word	0xd1b71759
    3fb8:	10624dd3 	.word	0x10624dd3
    3fbc:	51eb851f 	.word	0x51eb851f
    3fc0:	88888889 	.word	0x88888889
    3fc4:	cccccccd 	.word	0xcccccccd
    3fc8:	1b4e81b5 	.word	0x1b4e81b5
    3fcc:	057619f1 	.word	0x057619f1

00003fd0 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    3fd0:	b580      	push	{r7, lr}
    3fd2:	b082      	sub	sp, #8
    3fd4:	af00      	add	r7, sp, #0
    3fd6:	4603      	mov	r3, r0
    3fd8:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    3fda:	88fb      	ldrh	r3, [r7, #6]
    3fdc:	2209      	movs	r2, #9
    3fde:	4904      	ldr	r1, [pc, #16]	; (3ff0 <_get_cycles_for_ms+0x20>)
    3fe0:	4618      	mov	r0, r3
    3fe2:	4b04      	ldr	r3, [pc, #16]	; (3ff4 <_get_cycles_for_ms+0x24>)
    3fe4:	4798      	blx	r3
    3fe6:	4603      	mov	r3, r0
}
    3fe8:	4618      	mov	r0, r3
    3fea:	3708      	adds	r7, #8
    3fec:	46bd      	mov	sp, r7
    3fee:	bd80      	pop	{r7, pc}
    3ff0:	07270e00 	.word	0x07270e00
    3ff4:	00003e8d 	.word	0x00003e8d

00003ff8 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    3ff8:	b480      	push	{r7}
    3ffa:	b083      	sub	sp, #12
    3ffc:	af00      	add	r7, sp, #0
    3ffe:	6078      	str	r0, [r7, #4]
    4000:	6039      	str	r1, [r7, #0]
    4002:	bf00      	nop
    4004:	f3af 8000 	nop.w

00004008 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    4008:	3901      	subs	r1, #1
    400a:	d8fd      	bhi.n	4008 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    400c:	bf00      	nop
    400e:	370c      	adds	r7, #12
    4010:	46bd      	mov	sp, r7
    4012:	f85d 7b04 	ldr.w	r7, [sp], #4
    4016:	4770      	bx	lr

00004018 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    4018:	b480      	push	{r7}
    401a:	b083      	sub	sp, #12
    401c:	af00      	add	r7, sp, #0
    401e:	6078      	str	r0, [r7, #4]
    4020:	460b      	mov	r3, r1
    4022:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    4024:	687b      	ldr	r3, [r7, #4]
    4026:	881b      	ldrh	r3, [r3, #0]
    4028:	b29a      	uxth	r2, r3
    402a:	887b      	ldrh	r3, [r7, #2]
    402c:	021b      	lsls	r3, r3, #8
    402e:	b29b      	uxth	r3, r3
    4030:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    4034:	b29b      	uxth	r3, r3
    4036:	4313      	orrs	r3, r2
    4038:	b29a      	uxth	r2, r3
    403a:	687b      	ldr	r3, [r7, #4]
    403c:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    403e:	bf00      	nop
    4040:	370c      	adds	r7, #12
    4042:	46bd      	mov	sp, r7
    4044:	f85d 7b04 	ldr.w	r7, [sp], #4
    4048:	4770      	bx	lr

0000404a <hri_port_set_EVCTRL_reg>:
{
    404a:	b480      	push	{r7}
    404c:	b085      	sub	sp, #20
    404e:	af00      	add	r7, sp, #0
    4050:	60f8      	str	r0, [r7, #12]
    4052:	460b      	mov	r3, r1
    4054:	607a      	str	r2, [r7, #4]
    4056:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    4058:	7afb      	ldrb	r3, [r7, #11]
    405a:	7afa      	ldrb	r2, [r7, #11]
    405c:	68f9      	ldr	r1, [r7, #12]
    405e:	01d2      	lsls	r2, r2, #7
    4060:	440a      	add	r2, r1
    4062:	322c      	adds	r2, #44	; 0x2c
    4064:	6811      	ldr	r1, [r2, #0]
    4066:	687a      	ldr	r2, [r7, #4]
    4068:	430a      	orrs	r2, r1
    406a:	68f9      	ldr	r1, [r7, #12]
    406c:	01db      	lsls	r3, r3, #7
    406e:	440b      	add	r3, r1
    4070:	332c      	adds	r3, #44	; 0x2c
    4072:	601a      	str	r2, [r3, #0]
}
    4074:	bf00      	nop
    4076:	3714      	adds	r7, #20
    4078:	46bd      	mov	sp, r7
    407a:	f85d 7b04 	ldr.w	r7, [sp], #4
    407e:	4770      	bx	lr

00004080 <_port_event_init>:

static inline void _port_event_init()
{
    4080:	b580      	push	{r7, lr}
    4082:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    4084:	2200      	movs	r2, #0
    4086:	2100      	movs	r1, #0
    4088:	4809      	ldr	r0, [pc, #36]	; (40b0 <_port_event_init+0x30>)
    408a:	4b0a      	ldr	r3, [pc, #40]	; (40b4 <_port_event_init+0x34>)
    408c:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    408e:	2200      	movs	r2, #0
    4090:	2101      	movs	r1, #1
    4092:	4807      	ldr	r0, [pc, #28]	; (40b0 <_port_event_init+0x30>)
    4094:	4b07      	ldr	r3, [pc, #28]	; (40b4 <_port_event_init+0x34>)
    4096:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    4098:	22ef      	movs	r2, #239	; 0xef
    409a:	2102      	movs	r1, #2
    409c:	4804      	ldr	r0, [pc, #16]	; (40b0 <_port_event_init+0x30>)
    409e:	4b05      	ldr	r3, [pc, #20]	; (40b4 <_port_event_init+0x34>)
    40a0:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    40a2:	2200      	movs	r2, #0
    40a4:	2103      	movs	r1, #3
    40a6:	4802      	ldr	r0, [pc, #8]	; (40b0 <_port_event_init+0x30>)
    40a8:	4b02      	ldr	r3, [pc, #8]	; (40b4 <_port_event_init+0x34>)
    40aa:	4798      	blx	r3
}
    40ac:	bf00      	nop
    40ae:	bd80      	pop	{r7, pc}
    40b0:	41008000 	.word	0x41008000
    40b4:	0000404b 	.word	0x0000404b

000040b8 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    40b8:	b580      	push	{r7, lr}
    40ba:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    40bc:	2104      	movs	r1, #4
    40be:	480b      	ldr	r0, [pc, #44]	; (40ec <_init_chip+0x34>)
    40c0:	4b0b      	ldr	r3, [pc, #44]	; (40f0 <_init_chip+0x38>)
    40c2:	4798      	blx	r3

	_osc32kctrl_init_sources();
    40c4:	4b0b      	ldr	r3, [pc, #44]	; (40f4 <_init_chip+0x3c>)
    40c6:	4798      	blx	r3
	_oscctrl_init_sources();
    40c8:	4b0b      	ldr	r3, [pc, #44]	; (40f8 <_init_chip+0x40>)
    40ca:	4798      	blx	r3
	_mclk_init();
    40cc:	4b0b      	ldr	r3, [pc, #44]	; (40fc <_init_chip+0x44>)
    40ce:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    40d0:	f44f 6084 	mov.w	r0, #1056	; 0x420
    40d4:	4b0a      	ldr	r3, [pc, #40]	; (4100 <_init_chip+0x48>)
    40d6:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    40d8:	4b0a      	ldr	r3, [pc, #40]	; (4104 <_init_chip+0x4c>)
    40da:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    40dc:	f640 30df 	movw	r0, #3039	; 0xbdf
    40e0:	4b07      	ldr	r3, [pc, #28]	; (4100 <_init_chip+0x48>)
    40e2:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    40e4:	4b08      	ldr	r3, [pc, #32]	; (4108 <_init_chip+0x50>)
    40e6:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    40e8:	bf00      	nop
    40ea:	bd80      	pop	{r7, pc}
    40ec:	41004000 	.word	0x41004000
    40f0:	00004019 	.word	0x00004019
    40f4:	000049f9 	.word	0x000049f9
    40f8:	00004ec1 	.word	0x00004ec1
    40fc:	00004919 	.word	0x00004919
    4100:	00004821 	.word	0x00004821
    4104:	00004f01 	.word	0x00004f01
    4108:	00004081 	.word	0x00004081

0000410c <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    410c:	b480      	push	{r7}
    410e:	b083      	sub	sp, #12
    4110:	af00      	add	r7, sp, #0
    4112:	6078      	str	r0, [r7, #4]
    4114:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    4116:	687b      	ldr	r3, [r7, #4]
    4118:	683a      	ldr	r2, [r7, #0]
    411a:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    411c:	2300      	movs	r3, #0
}
    411e:	4618      	mov	r0, r3
    4120:	370c      	adds	r7, #12
    4122:	46bd      	mov	sp, r7
    4124:	f85d 7b04 	ldr.w	r7, [sp], #4
    4128:	4770      	bx	lr
	...

0000412c <__NVIC_EnableIRQ>:
{
    412c:	b480      	push	{r7}
    412e:	b083      	sub	sp, #12
    4130:	af00      	add	r7, sp, #0
    4132:	4603      	mov	r3, r0
    4134:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4136:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    413a:	2b00      	cmp	r3, #0
    413c:	db0b      	blt.n	4156 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    413e:	4909      	ldr	r1, [pc, #36]	; (4164 <__NVIC_EnableIRQ+0x38>)
    4140:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4144:	095b      	lsrs	r3, r3, #5
    4146:	88fa      	ldrh	r2, [r7, #6]
    4148:	f002 021f 	and.w	r2, r2, #31
    414c:	2001      	movs	r0, #1
    414e:	fa00 f202 	lsl.w	r2, r0, r2
    4152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4156:	bf00      	nop
    4158:	370c      	adds	r7, #12
    415a:	46bd      	mov	sp, r7
    415c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4160:	4770      	bx	lr
    4162:	bf00      	nop
    4164:	e000e100 	.word	0xe000e100

00004168 <__NVIC_DisableIRQ>:
{
    4168:	b480      	push	{r7}
    416a:	b083      	sub	sp, #12
    416c:	af00      	add	r7, sp, #0
    416e:	4603      	mov	r3, r0
    4170:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4172:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4176:	2b00      	cmp	r3, #0
    4178:	db10      	blt.n	419c <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    417a:	490b      	ldr	r1, [pc, #44]	; (41a8 <__NVIC_DisableIRQ+0x40>)
    417c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4180:	095b      	lsrs	r3, r3, #5
    4182:	88fa      	ldrh	r2, [r7, #6]
    4184:	f002 021f 	and.w	r2, r2, #31
    4188:	2001      	movs	r0, #1
    418a:	fa00 f202 	lsl.w	r2, r0, r2
    418e:	3320      	adds	r3, #32
    4190:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    4194:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4198:	f3bf 8f6f 	isb	sy
}
    419c:	bf00      	nop
    419e:	370c      	adds	r7, #12
    41a0:	46bd      	mov	sp, r7
    41a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    41a6:	4770      	bx	lr
    41a8:	e000e100 	.word	0xe000e100

000041ac <__NVIC_ClearPendingIRQ>:
{
    41ac:	b480      	push	{r7}
    41ae:	b083      	sub	sp, #12
    41b0:	af00      	add	r7, sp, #0
    41b2:	4603      	mov	r3, r0
    41b4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    41b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    41ba:	2b00      	cmp	r3, #0
    41bc:	db0c      	blt.n	41d8 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    41be:	4909      	ldr	r1, [pc, #36]	; (41e4 <__NVIC_ClearPendingIRQ+0x38>)
    41c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    41c4:	095b      	lsrs	r3, r3, #5
    41c6:	88fa      	ldrh	r2, [r7, #6]
    41c8:	f002 021f 	and.w	r2, r2, #31
    41cc:	2001      	movs	r0, #1
    41ce:	fa00 f202 	lsl.w	r2, r0, r2
    41d2:	3360      	adds	r3, #96	; 0x60
    41d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    41d8:	bf00      	nop
    41da:	370c      	adds	r7, #12
    41dc:	46bd      	mov	sp, r7
    41de:	f85d 7b04 	ldr.w	r7, [sp], #4
    41e2:	4770      	bx	lr
    41e4:	e000e100 	.word	0xe000e100

000041e8 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    41e8:	b480      	push	{r7}
    41ea:	b083      	sub	sp, #12
    41ec:	af00      	add	r7, sp, #0
    41ee:	6078      	str	r0, [r7, #4]
    41f0:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    41f2:	bf00      	nop
    41f4:	687b      	ldr	r3, [r7, #4]
    41f6:	685a      	ldr	r2, [r3, #4]
    41f8:	683b      	ldr	r3, [r7, #0]
    41fa:	4013      	ands	r3, r2
    41fc:	2b00      	cmp	r3, #0
    41fe:	d1f9      	bne.n	41f4 <hri_eic_wait_for_sync+0xc>
	};
}
    4200:	bf00      	nop
    4202:	370c      	adds	r7, #12
    4204:	46bd      	mov	sp, r7
    4206:	f85d 7b04 	ldr.w	r7, [sp], #4
    420a:	4770      	bx	lr

0000420c <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    420c:	b480      	push	{r7}
    420e:	b083      	sub	sp, #12
    4210:	af00      	add	r7, sp, #0
    4212:	6078      	str	r0, [r7, #4]
    4214:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    4216:	687b      	ldr	r3, [r7, #4]
    4218:	685a      	ldr	r2, [r3, #4]
    421a:	683b      	ldr	r3, [r7, #0]
    421c:	4013      	ands	r3, r2
    421e:	2b00      	cmp	r3, #0
    4220:	bf14      	ite	ne
    4222:	2301      	movne	r3, #1
    4224:	2300      	moveq	r3, #0
    4226:	b2db      	uxtb	r3, r3
}
    4228:	4618      	mov	r0, r3
    422a:	370c      	adds	r7, #12
    422c:	46bd      	mov	sp, r7
    422e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4232:	4770      	bx	lr

00004234 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    4234:	b480      	push	{r7}
    4236:	b083      	sub	sp, #12
    4238:	af00      	add	r7, sp, #0
    423a:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    423c:	687b      	ldr	r3, [r7, #4]
    423e:	695b      	ldr	r3, [r3, #20]
}
    4240:	4618      	mov	r0, r3
    4242:	370c      	adds	r7, #12
    4244:	46bd      	mov	sp, r7
    4246:	f85d 7b04 	ldr.w	r7, [sp], #4
    424a:	4770      	bx	lr

0000424c <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    424c:	b480      	push	{r7}
    424e:	b083      	sub	sp, #12
    4250:	af00      	add	r7, sp, #0
    4252:	6078      	str	r0, [r7, #4]
    4254:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    4256:	687b      	ldr	r3, [r7, #4]
    4258:	683a      	ldr	r2, [r7, #0]
    425a:	615a      	str	r2, [r3, #20]
}
    425c:	bf00      	nop
    425e:	370c      	adds	r7, #12
    4260:	46bd      	mov	sp, r7
    4262:	f85d 7b04 	ldr.w	r7, [sp], #4
    4266:	4770      	bx	lr

00004268 <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    4268:	b580      	push	{r7, lr}
    426a:	b082      	sub	sp, #8
    426c:	af00      	add	r7, sp, #0
    426e:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    4270:	687b      	ldr	r3, [r7, #4]
    4272:	781b      	ldrb	r3, [r3, #0]
    4274:	b2db      	uxtb	r3, r3
    4276:	f043 0302 	orr.w	r3, r3, #2
    427a:	b2da      	uxtb	r2, r3
    427c:	687b      	ldr	r3, [r7, #4]
    427e:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    4280:	2103      	movs	r1, #3
    4282:	6878      	ldr	r0, [r7, #4]
    4284:	4b02      	ldr	r3, [pc, #8]	; (4290 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    4286:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4288:	bf00      	nop
    428a:	3708      	adds	r7, #8
    428c:	46bd      	mov	sp, r7
    428e:	bd80      	pop	{r7, pc}
    4290:	000041e9 	.word	0x000041e9

00004294 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    4294:	b580      	push	{r7, lr}
    4296:	b082      	sub	sp, #8
    4298:	af00      	add	r7, sp, #0
    429a:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    429c:	687b      	ldr	r3, [r7, #4]
    429e:	781b      	ldrb	r3, [r3, #0]
    42a0:	b2db      	uxtb	r3, r3
    42a2:	f023 0302 	bic.w	r3, r3, #2
    42a6:	b2da      	uxtb	r2, r3
    42a8:	687b      	ldr	r3, [r7, #4]
    42aa:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    42ac:	2103      	movs	r1, #3
    42ae:	6878      	ldr	r0, [r7, #4]
    42b0:	4b02      	ldr	r3, [pc, #8]	; (42bc <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    42b2:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    42b4:	bf00      	nop
    42b6:	3708      	adds	r7, #8
    42b8:	46bd      	mov	sp, r7
    42ba:	bd80      	pop	{r7, pc}
    42bc:	000041e9 	.word	0x000041e9

000042c0 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    42c0:	b580      	push	{r7, lr}
    42c2:	b084      	sub	sp, #16
    42c4:	af00      	add	r7, sp, #0
    42c6:	6078      	str	r0, [r7, #4]
    42c8:	460b      	mov	r3, r1
    42ca:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    42cc:	687b      	ldr	r3, [r7, #4]
    42ce:	781b      	ldrb	r3, [r3, #0]
    42d0:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    42d2:	7bfb      	ldrb	r3, [r7, #15]
    42d4:	f023 0310 	bic.w	r3, r3, #16
    42d8:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    42da:	78fb      	ldrb	r3, [r7, #3]
    42dc:	011b      	lsls	r3, r3, #4
    42de:	b25a      	sxtb	r2, r3
    42e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    42e4:	4313      	orrs	r3, r2
    42e6:	b25b      	sxtb	r3, r3
    42e8:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    42ea:	687b      	ldr	r3, [r7, #4]
    42ec:	7bfa      	ldrb	r2, [r7, #15]
    42ee:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    42f0:	2103      	movs	r1, #3
    42f2:	6878      	ldr	r0, [r7, #4]
    42f4:	4b02      	ldr	r3, [pc, #8]	; (4300 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    42f6:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    42f8:	bf00      	nop
    42fa:	3710      	adds	r7, #16
    42fc:	46bd      	mov	sp, r7
    42fe:	bd80      	pop	{r7, pc}
    4300:	000041e9 	.word	0x000041e9

00004304 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    4304:	b580      	push	{r7, lr}
    4306:	b084      	sub	sp, #16
    4308:	af00      	add	r7, sp, #0
    430a:	6078      	str	r0, [r7, #4]
    430c:	460b      	mov	r3, r1
    430e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4310:	2103      	movs	r1, #3
    4312:	6878      	ldr	r0, [r7, #4]
    4314:	4b06      	ldr	r3, [pc, #24]	; (4330 <hri_eic_get_CTRLA_reg+0x2c>)
    4316:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    4318:	687b      	ldr	r3, [r7, #4]
    431a:	781b      	ldrb	r3, [r3, #0]
    431c:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    431e:	7bfa      	ldrb	r2, [r7, #15]
    4320:	78fb      	ldrb	r3, [r7, #3]
    4322:	4013      	ands	r3, r2
    4324:	73fb      	strb	r3, [r7, #15]
	return tmp;
    4326:	7bfb      	ldrb	r3, [r7, #15]
}
    4328:	4618      	mov	r0, r3
    432a:	3710      	adds	r7, #16
    432c:	46bd      	mov	sp, r7
    432e:	bd80      	pop	{r7, pc}
    4330:	000041e9 	.word	0x000041e9

00004334 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    4334:	b580      	push	{r7, lr}
    4336:	b082      	sub	sp, #8
    4338:	af00      	add	r7, sp, #0
    433a:	6078      	str	r0, [r7, #4]
    433c:	460b      	mov	r3, r1
    433e:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    4340:	687b      	ldr	r3, [r7, #4]
    4342:	78fa      	ldrb	r2, [r7, #3]
    4344:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4346:	2103      	movs	r1, #3
    4348:	6878      	ldr	r0, [r7, #4]
    434a:	4b03      	ldr	r3, [pc, #12]	; (4358 <hri_eic_write_CTRLA_reg+0x24>)
    434c:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    434e:	bf00      	nop
    4350:	3708      	adds	r7, #8
    4352:	46bd      	mov	sp, r7
    4354:	bd80      	pop	{r7, pc}
    4356:	bf00      	nop
    4358:	000041e9 	.word	0x000041e9

0000435c <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    435c:	b480      	push	{r7}
    435e:	b083      	sub	sp, #12
    4360:	af00      	add	r7, sp, #0
    4362:	6078      	str	r0, [r7, #4]
    4364:	460b      	mov	r3, r1
    4366:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    4368:	687b      	ldr	r3, [r7, #4]
    436a:	78fa      	ldrb	r2, [r7, #3]
    436c:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    436e:	bf00      	nop
    4370:	370c      	adds	r7, #12
    4372:	46bd      	mov	sp, r7
    4374:	f85d 7b04 	ldr.w	r7, [sp], #4
    4378:	4770      	bx	lr

0000437a <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    437a:	b480      	push	{r7}
    437c:	b083      	sub	sp, #12
    437e:	af00      	add	r7, sp, #0
    4380:	6078      	str	r0, [r7, #4]
    4382:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    4384:	687b      	ldr	r3, [r7, #4]
    4386:	683a      	ldr	r2, [r7, #0]
    4388:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    438a:	bf00      	nop
    438c:	370c      	adds	r7, #12
    438e:	46bd      	mov	sp, r7
    4390:	f85d 7b04 	ldr.w	r7, [sp], #4
    4394:	4770      	bx	lr

00004396 <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    4396:	b480      	push	{r7}
    4398:	b083      	sub	sp, #12
    439a:	af00      	add	r7, sp, #0
    439c:	6078      	str	r0, [r7, #4]
    439e:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    43a0:	687b      	ldr	r3, [r7, #4]
    43a2:	683a      	ldr	r2, [r7, #0]
    43a4:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    43a6:	bf00      	nop
    43a8:	370c      	adds	r7, #12
    43aa:	46bd      	mov	sp, r7
    43ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    43b0:	4770      	bx	lr

000043b2 <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    43b2:	b480      	push	{r7}
    43b4:	b085      	sub	sp, #20
    43b6:	af00      	add	r7, sp, #0
    43b8:	60f8      	str	r0, [r7, #12]
    43ba:	460b      	mov	r3, r1
    43bc:	607a      	str	r2, [r7, #4]
    43be:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    43c0:	7afb      	ldrb	r3, [r7, #11]
    43c2:	68fa      	ldr	r2, [r7, #12]
    43c4:	3306      	adds	r3, #6
    43c6:	009b      	lsls	r3, r3, #2
    43c8:	4413      	add	r3, r2
    43ca:	687a      	ldr	r2, [r7, #4]
    43cc:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    43ce:	bf00      	nop
    43d0:	3714      	adds	r7, #20
    43d2:	46bd      	mov	sp, r7
    43d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    43d8:	4770      	bx	lr

000043da <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    43da:	b480      	push	{r7}
    43dc:	b083      	sub	sp, #12
    43de:	af00      	add	r7, sp, #0
    43e0:	6078      	str	r0, [r7, #4]
    43e2:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    43e4:	687b      	ldr	r3, [r7, #4]
    43e6:	683a      	ldr	r2, [r7, #0]
    43e8:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    43ea:	bf00      	nop
    43ec:	370c      	adds	r7, #12
    43ee:	46bd      	mov	sp, r7
    43f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    43f4:	4770      	bx	lr

000043f6 <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    43f6:	b480      	push	{r7}
    43f8:	b083      	sub	sp, #12
    43fa:	af00      	add	r7, sp, #0
    43fc:	6078      	str	r0, [r7, #4]
    43fe:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    4400:	687b      	ldr	r3, [r7, #4]
    4402:	683a      	ldr	r2, [r7, #0]
    4404:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    4406:	bf00      	nop
    4408:	370c      	adds	r7, #12
    440a:	46bd      	mov	sp, r7
    440c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4410:	4770      	bx	lr
	...

00004414 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    4414:	b580      	push	{r7, lr}
    4416:	b082      	sub	sp, #8
    4418:	af00      	add	r7, sp, #0
    441a:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    441c:	2101      	movs	r1, #1
    441e:	4838      	ldr	r0, [pc, #224]	; (4500 <_ext_irq_init+0xec>)
    4420:	4b38      	ldr	r3, [pc, #224]	; (4504 <_ext_irq_init+0xf0>)
    4422:	4798      	blx	r3
    4424:	4603      	mov	r3, r0
    4426:	f083 0301 	eor.w	r3, r3, #1
    442a:	b2db      	uxtb	r3, r3
    442c:	2b00      	cmp	r3, #0
    442e:	d011      	beq.n	4454 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    4430:	2102      	movs	r1, #2
    4432:	4833      	ldr	r0, [pc, #204]	; (4500 <_ext_irq_init+0xec>)
    4434:	4b34      	ldr	r3, [pc, #208]	; (4508 <_ext_irq_init+0xf4>)
    4436:	4798      	blx	r3
    4438:	4603      	mov	r3, r0
    443a:	2b00      	cmp	r3, #0
    443c:	d006      	beq.n	444c <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    443e:	4830      	ldr	r0, [pc, #192]	; (4500 <_ext_irq_init+0xec>)
    4440:	4b32      	ldr	r3, [pc, #200]	; (450c <_ext_irq_init+0xf8>)
    4442:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    4444:	2102      	movs	r1, #2
    4446:	482e      	ldr	r0, [pc, #184]	; (4500 <_ext_irq_init+0xec>)
    4448:	4b31      	ldr	r3, [pc, #196]	; (4510 <_ext_irq_init+0xfc>)
    444a:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    444c:	2101      	movs	r1, #1
    444e:	482c      	ldr	r0, [pc, #176]	; (4500 <_ext_irq_init+0xec>)
    4450:	4b30      	ldr	r3, [pc, #192]	; (4514 <_ext_irq_init+0x100>)
    4452:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    4454:	2101      	movs	r1, #1
    4456:	482a      	ldr	r0, [pc, #168]	; (4500 <_ext_irq_init+0xec>)
    4458:	4b2d      	ldr	r3, [pc, #180]	; (4510 <_ext_irq_init+0xfc>)
    445a:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    445c:	2100      	movs	r1, #0
    445e:	4828      	ldr	r0, [pc, #160]	; (4500 <_ext_irq_init+0xec>)
    4460:	4b2d      	ldr	r3, [pc, #180]	; (4518 <_ext_irq_init+0x104>)
    4462:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    4464:	2100      	movs	r1, #0
    4466:	4826      	ldr	r0, [pc, #152]	; (4500 <_ext_irq_init+0xec>)
    4468:	4b2c      	ldr	r3, [pc, #176]	; (451c <_ext_irq_init+0x108>)
    446a:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    446c:	2100      	movs	r1, #0
    446e:	4824      	ldr	r0, [pc, #144]	; (4500 <_ext_irq_init+0xec>)
    4470:	4b2b      	ldr	r3, [pc, #172]	; (4520 <_ext_irq_init+0x10c>)
    4472:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    4474:	2130      	movs	r1, #48	; 0x30
    4476:	4822      	ldr	r0, [pc, #136]	; (4500 <_ext_irq_init+0xec>)
    4478:	4b2a      	ldr	r3, [pc, #168]	; (4524 <_ext_irq_init+0x110>)
    447a:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    447c:	2130      	movs	r1, #48	; 0x30
    447e:	4820      	ldr	r0, [pc, #128]	; (4500 <_ext_irq_init+0xec>)
    4480:	4b29      	ldr	r3, [pc, #164]	; (4528 <_ext_irq_init+0x114>)
    4482:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    4484:	2100      	movs	r1, #0
    4486:	481e      	ldr	r0, [pc, #120]	; (4500 <_ext_irq_init+0xec>)
    4488:	4b28      	ldr	r3, [pc, #160]	; (452c <_ext_irq_init+0x118>)
    448a:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    448c:	f44f 0219 	mov.w	r2, #10027008	; 0x990000
    4490:	2100      	movs	r1, #0
    4492:	481b      	ldr	r0, [pc, #108]	; (4500 <_ext_irq_init+0xec>)
    4494:	4b26      	ldr	r3, [pc, #152]	; (4530 <_ext_irq_init+0x11c>)
    4496:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    4498:	2200      	movs	r2, #0
    449a:	2101      	movs	r1, #1
    449c:	4818      	ldr	r0, [pc, #96]	; (4500 <_ext_irq_init+0xec>)
    449e:	4b24      	ldr	r3, [pc, #144]	; (4530 <_ext_irq_init+0x11c>)
    44a0:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    44a2:	4817      	ldr	r0, [pc, #92]	; (4500 <_ext_irq_init+0xec>)
    44a4:	4b23      	ldr	r3, [pc, #140]	; (4534 <_ext_irq_init+0x120>)
    44a6:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    44a8:	2010      	movs	r0, #16
    44aa:	4b23      	ldr	r3, [pc, #140]	; (4538 <_ext_irq_init+0x124>)
    44ac:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    44ae:	2010      	movs	r0, #16
    44b0:	4b22      	ldr	r3, [pc, #136]	; (453c <_ext_irq_init+0x128>)
    44b2:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    44b4:	2010      	movs	r0, #16
    44b6:	4b22      	ldr	r3, [pc, #136]	; (4540 <_ext_irq_init+0x12c>)
    44b8:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    44ba:	2011      	movs	r0, #17
    44bc:	4b1e      	ldr	r3, [pc, #120]	; (4538 <_ext_irq_init+0x124>)
    44be:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    44c0:	2011      	movs	r0, #17
    44c2:	4b1e      	ldr	r3, [pc, #120]	; (453c <_ext_irq_init+0x128>)
    44c4:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    44c6:	2011      	movs	r0, #17
    44c8:	4b1d      	ldr	r3, [pc, #116]	; (4540 <_ext_irq_init+0x12c>)
    44ca:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    44cc:	2012      	movs	r0, #18
    44ce:	4b1a      	ldr	r3, [pc, #104]	; (4538 <_ext_irq_init+0x124>)
    44d0:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    44d2:	2012      	movs	r0, #18
    44d4:	4b19      	ldr	r3, [pc, #100]	; (453c <_ext_irq_init+0x128>)
    44d6:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    44d8:	2012      	movs	r0, #18
    44da:	4b19      	ldr	r3, [pc, #100]	; (4540 <_ext_irq_init+0x12c>)
    44dc:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    44de:	2013      	movs	r0, #19
    44e0:	4b15      	ldr	r3, [pc, #84]	; (4538 <_ext_irq_init+0x124>)
    44e2:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    44e4:	2013      	movs	r0, #19
    44e6:	4b15      	ldr	r3, [pc, #84]	; (453c <_ext_irq_init+0x128>)
    44e8:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    44ea:	2013      	movs	r0, #19
    44ec:	4b14      	ldr	r3, [pc, #80]	; (4540 <_ext_irq_init+0x12c>)
    44ee:	4798      	blx	r3

	callback = cb;
    44f0:	4a14      	ldr	r2, [pc, #80]	; (4544 <_ext_irq_init+0x130>)
    44f2:	687b      	ldr	r3, [r7, #4]
    44f4:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    44f6:	2300      	movs	r3, #0
}
    44f8:	4618      	mov	r0, r3
    44fa:	3708      	adds	r7, #8
    44fc:	46bd      	mov	sp, r7
    44fe:	bd80      	pop	{r7, pc}
    4500:	40002800 	.word	0x40002800
    4504:	0000420d 	.word	0x0000420d
    4508:	00004305 	.word	0x00004305
    450c:	00004295 	.word	0x00004295
    4510:	000041e9 	.word	0x000041e9
    4514:	00004335 	.word	0x00004335
    4518:	000042c1 	.word	0x000042c1
    451c:	0000435d 	.word	0x0000435d
    4520:	0000437b 	.word	0x0000437b
    4524:	00004397 	.word	0x00004397
    4528:	000043db 	.word	0x000043db
    452c:	000043f7 	.word	0x000043f7
    4530:	000043b3 	.word	0x000043b3
    4534:	00004269 	.word	0x00004269
    4538:	00004169 	.word	0x00004169
    453c:	000041ad 	.word	0x000041ad
    4540:	0000412d 	.word	0x0000412d
    4544:	20001464 	.word	0x20001464

00004548 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    4548:	b580      	push	{r7, lr}
    454a:	b084      	sub	sp, #16
    454c:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    454e:	4841      	ldr	r0, [pc, #260]	; (4654 <_ext_irq_handler+0x10c>)
    4550:	4b41      	ldr	r3, [pc, #260]	; (4658 <_ext_irq_handler+0x110>)
    4552:	4798      	blx	r3
    4554:	4603      	mov	r3, r0
    4556:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    4558:	f04f 33ff 	mov.w	r3, #4294967295
    455c:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    455e:	683b      	ldr	r3, [r7, #0]
    4560:	4619      	mov	r1, r3
    4562:	483c      	ldr	r0, [pc, #240]	; (4654 <_ext_irq_handler+0x10c>)
    4564:	4b3d      	ldr	r3, [pc, #244]	; (465c <_ext_irq_handler+0x114>)
    4566:	4798      	blx	r3

	ASSERT(callback);
    4568:	4b3d      	ldr	r3, [pc, #244]	; (4660 <_ext_irq_handler+0x118>)
    456a:	681b      	ldr	r3, [r3, #0]
    456c:	2b00      	cmp	r3, #0
    456e:	bf14      	ite	ne
    4570:	2301      	movne	r3, #1
    4572:	2300      	moveq	r3, #0
    4574:	b2db      	uxtb	r3, r3
    4576:	22f4      	movs	r2, #244	; 0xf4
    4578:	493a      	ldr	r1, [pc, #232]	; (4664 <_ext_irq_handler+0x11c>)
    457a:	4618      	mov	r0, r3
    457c:	4b3a      	ldr	r3, [pc, #232]	; (4668 <_ext_irq_handler+0x120>)
    457e:	4798      	blx	r3

	while (flags) {
    4580:	e060      	b.n	4644 <_ext_irq_handler+0xfc>
		pos = ffs(flags) - 1;
    4582:	683b      	ldr	r3, [r7, #0]
    4584:	4618      	mov	r0, r3
    4586:	4b39      	ldr	r3, [pc, #228]	; (466c <_ext_irq_handler+0x124>)
    4588:	4798      	blx	r3
    458a:	4603      	mov	r3, r0
    458c:	b2db      	uxtb	r3, r3
    458e:	3b01      	subs	r3, #1
    4590:	b2db      	uxtb	r3, r3
    4592:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    4594:	e047      	b.n	4626 <_ext_irq_handler+0xde>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    4596:	2300      	movs	r3, #0
    4598:	71fb      	strb	r3, [r7, #7]
    459a:	2304      	movs	r3, #4
    459c:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    459e:	e024      	b.n	45ea <_ext_irq_handler+0xa2>
				middle = (upper + lower) >> 1;
    45a0:	79ba      	ldrb	r2, [r7, #6]
    45a2:	79fb      	ldrb	r3, [r7, #7]
    45a4:	4413      	add	r3, r2
    45a6:	105b      	asrs	r3, r3, #1
    45a8:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    45aa:	797b      	ldrb	r3, [r7, #5]
    45ac:	4a30      	ldr	r2, [pc, #192]	; (4670 <_ext_irq_handler+0x128>)
    45ae:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    45b2:	461a      	mov	r2, r3
    45b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    45b8:	429a      	cmp	r2, r3
    45ba:	d106      	bne.n	45ca <_ext_irq_handler+0x82>
					pin = _map[middle].pin;
    45bc:	797b      	ldrb	r3, [r7, #5]
    45be:	4a2c      	ldr	r2, [pc, #176]	; (4670 <_ext_irq_handler+0x128>)
    45c0:	00db      	lsls	r3, r3, #3
    45c2:	4413      	add	r3, r2
    45c4:	685b      	ldr	r3, [r3, #4]
    45c6:	60bb      	str	r3, [r7, #8]
					break;
    45c8:	e013      	b.n	45f2 <_ext_irq_handler+0xaa>
				}
				if (_map[middle].extint < pos) {
    45ca:	797b      	ldrb	r3, [r7, #5]
    45cc:	4a28      	ldr	r2, [pc, #160]	; (4670 <_ext_irq_handler+0x128>)
    45ce:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    45d2:	461a      	mov	r2, r3
    45d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    45d8:	429a      	cmp	r2, r3
    45da:	da03      	bge.n	45e4 <_ext_irq_handler+0x9c>
					lower = middle + 1;
    45dc:	797b      	ldrb	r3, [r7, #5]
    45de:	3301      	adds	r3, #1
    45e0:	71fb      	strb	r3, [r7, #7]
    45e2:	e002      	b.n	45ea <_ext_irq_handler+0xa2>
				} else {
					upper = middle - 1;
    45e4:	797b      	ldrb	r3, [r7, #5]
    45e6:	3b01      	subs	r3, #1
    45e8:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    45ea:	79ba      	ldrb	r2, [r7, #6]
    45ec:	79fb      	ldrb	r3, [r7, #7]
    45ee:	429a      	cmp	r2, r3
    45f0:	d2d6      	bcs.n	45a0 <_ext_irq_handler+0x58>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    45f2:	68bb      	ldr	r3, [r7, #8]
    45f4:	f1b3 3fff 	cmp.w	r3, #4294967295
    45f8:	d003      	beq.n	4602 <_ext_irq_handler+0xba>
				callback(pin);
    45fa:	4b19      	ldr	r3, [pc, #100]	; (4660 <_ext_irq_handler+0x118>)
    45fc:	681b      	ldr	r3, [r3, #0]
    45fe:	68b8      	ldr	r0, [r7, #8]
    4600:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    4602:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4606:	2201      	movs	r2, #1
    4608:	fa02 f303 	lsl.w	r3, r2, r3
    460c:	43da      	mvns	r2, r3
    460e:	683b      	ldr	r3, [r7, #0]
    4610:	4013      	ands	r3, r2
    4612:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    4614:	683b      	ldr	r3, [r7, #0]
    4616:	4618      	mov	r0, r3
    4618:	4b14      	ldr	r3, [pc, #80]	; (466c <_ext_irq_handler+0x124>)
    461a:	4798      	blx	r3
    461c:	4603      	mov	r3, r0
    461e:	b2db      	uxtb	r3, r3
    4620:	3b01      	subs	r3, #1
    4622:	b2db      	uxtb	r3, r3
    4624:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    4626:	f997 300f 	ldrsb.w	r3, [r7, #15]
    462a:	f1b3 3fff 	cmp.w	r3, #4294967295
    462e:	d1b2      	bne.n	4596 <_ext_irq_handler+0x4e>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    4630:	4808      	ldr	r0, [pc, #32]	; (4654 <_ext_irq_handler+0x10c>)
    4632:	4b09      	ldr	r3, [pc, #36]	; (4658 <_ext_irq_handler+0x110>)
    4634:	4798      	blx	r3
    4636:	4603      	mov	r3, r0
    4638:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    463a:	683b      	ldr	r3, [r7, #0]
    463c:	4619      	mov	r1, r3
    463e:	4805      	ldr	r0, [pc, #20]	; (4654 <_ext_irq_handler+0x10c>)
    4640:	4b06      	ldr	r3, [pc, #24]	; (465c <_ext_irq_handler+0x114>)
    4642:	4798      	blx	r3
	while (flags) {
    4644:	683b      	ldr	r3, [r7, #0]
    4646:	2b00      	cmp	r3, #0
    4648:	d19b      	bne.n	4582 <_ext_irq_handler+0x3a>
	}
}
    464a:	bf00      	nop
    464c:	3710      	adds	r7, #16
    464e:	46bd      	mov	sp, r7
    4650:	bd80      	pop	{r7, pc}
    4652:	bf00      	nop
    4654:	40002800 	.word	0x40002800
    4658:	00004235 	.word	0x00004235
    465c:	0000424d 	.word	0x0000424d
    4660:	20001464 	.word	0x20001464
    4664:	00013038 	.word	0x00013038
    4668:	00002f09 	.word	0x00002f09
    466c:	00012b59 	.word	0x00012b59
    4670:	00013018 	.word	0x00013018

00004674 <EIC_4_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_4_Handler(void)
{
    4674:	b580      	push	{r7, lr}
    4676:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4678:	4b01      	ldr	r3, [pc, #4]	; (4680 <EIC_4_Handler+0xc>)
    467a:	4798      	blx	r3
} /**
    467c:	bf00      	nop
    467e:	bd80      	pop	{r7, pc}
    4680:	00004549 	.word	0x00004549

00004684 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    4684:	b580      	push	{r7, lr}
    4686:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4688:	4b01      	ldr	r3, [pc, #4]	; (4690 <EIC_5_Handler+0xc>)
    468a:	4798      	blx	r3
} /**
    468c:	bf00      	nop
    468e:	bd80      	pop	{r7, pc}
    4690:	00004549 	.word	0x00004549

00004694 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    4694:	b580      	push	{r7, lr}
    4696:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4698:	4b01      	ldr	r3, [pc, #4]	; (46a0 <EIC_6_Handler+0xc>)
    469a:	4798      	blx	r3
} /**
    469c:	bf00      	nop
    469e:	bd80      	pop	{r7, pc}
    46a0:	00004549 	.word	0x00004549

000046a4 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    46a4:	b580      	push	{r7, lr}
    46a6:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    46a8:	4b01      	ldr	r3, [pc, #4]	; (46b0 <EIC_7_Handler+0xc>)
    46aa:	4798      	blx	r3
}
    46ac:	bf00      	nop
    46ae:	bd80      	pop	{r7, pc}
    46b0:	00004549 	.word	0x00004549

000046b4 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    46b4:	b480      	push	{r7}
    46b6:	b085      	sub	sp, #20
    46b8:	af00      	add	r7, sp, #0
    46ba:	60f8      	str	r0, [r7, #12]
    46bc:	460b      	mov	r3, r1
    46be:	607a      	str	r2, [r7, #4]
    46c0:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    46c2:	7afa      	ldrb	r2, [r7, #11]
    46c4:	68fb      	ldr	r3, [r7, #12]
    46c6:	3248      	adds	r2, #72	; 0x48
    46c8:	6879      	ldr	r1, [r7, #4]
    46ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    46ce:	bf00      	nop
    46d0:	3714      	adds	r7, #20
    46d2:	46bd      	mov	sp, r7
    46d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    46d8:	4770      	bx	lr

000046da <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    46da:	b480      	push	{r7}
    46dc:	b083      	sub	sp, #12
    46de:	af00      	add	r7, sp, #0
    46e0:	6078      	str	r0, [r7, #4]
    46e2:	460b      	mov	r3, r1
    46e4:	70fb      	strb	r3, [r7, #3]
    46e6:	4613      	mov	r3, r2
    46e8:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    46ea:	78fb      	ldrb	r3, [r7, #3]
    46ec:	687a      	ldr	r2, [r7, #4]
    46ee:	3304      	adds	r3, #4
    46f0:	00db      	lsls	r3, r3, #3
    46f2:	4413      	add	r3, r2
    46f4:	78ba      	ldrb	r2, [r7, #2]
    46f6:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    46f8:	78fb      	ldrb	r3, [r7, #3]
    46fa:	78ba      	ldrb	r2, [r7, #2]
    46fc:	43d2      	mvns	r2, r2
    46fe:	b2d1      	uxtb	r1, r2
    4700:	687a      	ldr	r2, [r7, #4]
    4702:	3304      	adds	r3, #4
    4704:	00db      	lsls	r3, r3, #3
    4706:	4413      	add	r3, r2
    4708:	460a      	mov	r2, r1
    470a:	711a      	strb	r2, [r3, #4]
}
    470c:	bf00      	nop
    470e:	370c      	adds	r7, #12
    4710:	46bd      	mov	sp, r7
    4712:	f85d 7b04 	ldr.w	r7, [sp], #4
    4716:	4770      	bx	lr

00004718 <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    4718:	b480      	push	{r7}
    471a:	b085      	sub	sp, #20
    471c:	af00      	add	r7, sp, #0
    471e:	60f8      	str	r0, [r7, #12]
    4720:	460b      	mov	r3, r1
    4722:	607a      	str	r2, [r7, #4]
    4724:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    4726:	7afa      	ldrb	r2, [r7, #11]
    4728:	68fb      	ldr	r3, [r7, #12]
    472a:	3204      	adds	r2, #4
    472c:	6879      	ldr	r1, [r7, #4]
    472e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    4732:	bf00      	nop
    4734:	3714      	adds	r7, #20
    4736:	46bd      	mov	sp, r7
    4738:	f85d 7b04 	ldr.w	r7, [sp], #4
    473c:	4770      	bx	lr
	...

00004740 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    4740:	b580      	push	{r7, lr}
    4742:	b082      	sub	sp, #8
    4744:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    4746:	2300      	movs	r3, #0
    4748:	71fb      	strb	r3, [r7, #7]
    474a:	e00b      	b.n	4764 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    474c:	79fb      	ldrb	r3, [r7, #7]
    474e:	4a18      	ldr	r2, [pc, #96]	; (47b0 <_event_system_init+0x70>)
    4750:	5cd3      	ldrb	r3, [r2, r3]
    4752:	461a      	mov	r2, r3
    4754:	79fb      	ldrb	r3, [r7, #7]
    4756:	4619      	mov	r1, r3
    4758:	4816      	ldr	r0, [pc, #88]	; (47b4 <_event_system_init+0x74>)
    475a:	4b17      	ldr	r3, [pc, #92]	; (47b8 <_event_system_init+0x78>)
    475c:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    475e:	79fb      	ldrb	r3, [r7, #7]
    4760:	3301      	adds	r3, #1
    4762:	71fb      	strb	r3, [r7, #7]
    4764:	79fb      	ldrb	r3, [r7, #7]
    4766:	2b42      	cmp	r3, #66	; 0x42
    4768:	d9f0      	bls.n	474c <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    476a:	2300      	movs	r3, #0
    476c:	71fb      	strb	r3, [r7, #7]
    476e:	e016      	b.n	479e <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    4770:	79fb      	ldrb	r3, [r7, #7]
    4772:	4a12      	ldr	r2, [pc, #72]	; (47bc <_event_system_init+0x7c>)
    4774:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    4778:	461a      	mov	r2, r3
    477a:	79fb      	ldrb	r3, [r7, #7]
    477c:	4619      	mov	r1, r3
    477e:	480d      	ldr	r0, [pc, #52]	; (47b4 <_event_system_init+0x74>)
    4780:	4b0f      	ldr	r3, [pc, #60]	; (47c0 <_event_system_init+0x80>)
    4782:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    4784:	79fb      	ldrb	r3, [r7, #7]
    4786:	4a0f      	ldr	r2, [pc, #60]	; (47c4 <_event_system_init+0x84>)
    4788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    478c:	b2da      	uxtb	r2, r3
    478e:	79fb      	ldrb	r3, [r7, #7]
    4790:	4619      	mov	r1, r3
    4792:	4808      	ldr	r0, [pc, #32]	; (47b4 <_event_system_init+0x74>)
    4794:	4b0c      	ldr	r3, [pc, #48]	; (47c8 <_event_system_init+0x88>)
    4796:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    4798:	79fb      	ldrb	r3, [r7, #7]
    479a:	3301      	adds	r3, #1
    479c:	71fb      	strb	r3, [r7, #7]
    479e:	79fb      	ldrb	r3, [r7, #7]
    47a0:	2b1f      	cmp	r3, #31
    47a2:	d9e5      	bls.n	4770 <_event_system_init+0x30>
	}

	return ERR_NONE;
    47a4:	2300      	movs	r3, #0
}
    47a6:	4618      	mov	r0, r3
    47a8:	3708      	adds	r7, #8
    47aa:	46bd      	mov	sp, r7
    47ac:	bd80      	pop	{r7, pc}
    47ae:	bf00      	nop
    47b0:	00013050 	.word	0x00013050
    47b4:	4100e000 	.word	0x4100e000
    47b8:	000046b5 	.word	0x000046b5
    47bc:	00013094 	.word	0x00013094
    47c0:	00004719 	.word	0x00004719
    47c4:	000130d4 	.word	0x000130d4
    47c8:	000046db 	.word	0x000046db

000047cc <hri_gclk_wait_for_sync>:
{
    47cc:	b480      	push	{r7}
    47ce:	b083      	sub	sp, #12
    47d0:	af00      	add	r7, sp, #0
    47d2:	6078      	str	r0, [r7, #4]
    47d4:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    47d6:	bf00      	nop
    47d8:	687b      	ldr	r3, [r7, #4]
    47da:	685a      	ldr	r2, [r3, #4]
    47dc:	683b      	ldr	r3, [r7, #0]
    47de:	4013      	ands	r3, r2
    47e0:	2b00      	cmp	r3, #0
    47e2:	d1f9      	bne.n	47d8 <hri_gclk_wait_for_sync+0xc>
}
    47e4:	bf00      	nop
    47e6:	370c      	adds	r7, #12
    47e8:	46bd      	mov	sp, r7
    47ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    47ee:	4770      	bx	lr

000047f0 <hri_gclk_write_GENCTRL_reg>:
{
    47f0:	b580      	push	{r7, lr}
    47f2:	b084      	sub	sp, #16
    47f4:	af00      	add	r7, sp, #0
    47f6:	60f8      	str	r0, [r7, #12]
    47f8:	460b      	mov	r3, r1
    47fa:	607a      	str	r2, [r7, #4]
    47fc:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    47fe:	7afa      	ldrb	r2, [r7, #11]
    4800:	68fb      	ldr	r3, [r7, #12]
    4802:	3208      	adds	r2, #8
    4804:	6879      	ldr	r1, [r7, #4]
    4806:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    480a:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    480e:	68f8      	ldr	r0, [r7, #12]
    4810:	4b02      	ldr	r3, [pc, #8]	; (481c <hri_gclk_write_GENCTRL_reg+0x2c>)
    4812:	4798      	blx	r3
}
    4814:	bf00      	nop
    4816:	3710      	adds	r7, #16
    4818:	46bd      	mov	sp, r7
    481a:	bd80      	pop	{r7, pc}
    481c:	000047cd 	.word	0x000047cd

00004820 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    4820:	b580      	push	{r7, lr}
    4822:	b082      	sub	sp, #8
    4824:	af00      	add	r7, sp, #0
    4826:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    4828:	687b      	ldr	r3, [r7, #4]
    482a:	f003 0301 	and.w	r3, r3, #1
    482e:	2b00      	cmp	r3, #0
    4830:	d004      	beq.n	483c <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    4832:	4a27      	ldr	r2, [pc, #156]	; (48d0 <_gclk_init_generators_by_fref+0xb0>)
    4834:	2100      	movs	r1, #0
    4836:	4827      	ldr	r0, [pc, #156]	; (48d4 <_gclk_init_generators_by_fref+0xb4>)
    4838:	4b27      	ldr	r3, [pc, #156]	; (48d8 <_gclk_init_generators_by_fref+0xb8>)
    483a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    483c:	687b      	ldr	r3, [r7, #4]
    483e:	f003 0302 	and.w	r3, r3, #2
    4842:	2b00      	cmp	r3, #0
    4844:	d004      	beq.n	4850 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    4846:	4a25      	ldr	r2, [pc, #148]	; (48dc <_gclk_init_generators_by_fref+0xbc>)
    4848:	2101      	movs	r1, #1
    484a:	4822      	ldr	r0, [pc, #136]	; (48d4 <_gclk_init_generators_by_fref+0xb4>)
    484c:	4b22      	ldr	r3, [pc, #136]	; (48d8 <_gclk_init_generators_by_fref+0xb8>)
    484e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    4850:	687b      	ldr	r3, [r7, #4]
    4852:	f003 0304 	and.w	r3, r3, #4
    4856:	2b00      	cmp	r3, #0
    4858:	d004      	beq.n	4864 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    485a:	4a21      	ldr	r2, [pc, #132]	; (48e0 <_gclk_init_generators_by_fref+0xc0>)
    485c:	2102      	movs	r1, #2
    485e:	481d      	ldr	r0, [pc, #116]	; (48d4 <_gclk_init_generators_by_fref+0xb4>)
    4860:	4b1d      	ldr	r3, [pc, #116]	; (48d8 <_gclk_init_generators_by_fref+0xb8>)
    4862:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    4864:	687b      	ldr	r3, [r7, #4]
    4866:	f003 0308 	and.w	r3, r3, #8
    486a:	2b00      	cmp	r3, #0
    486c:	d004      	beq.n	4878 <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    486e:	4a1d      	ldr	r2, [pc, #116]	; (48e4 <_gclk_init_generators_by_fref+0xc4>)
    4870:	2103      	movs	r1, #3
    4872:	4818      	ldr	r0, [pc, #96]	; (48d4 <_gclk_init_generators_by_fref+0xb4>)
    4874:	4b18      	ldr	r3, [pc, #96]	; (48d8 <_gclk_init_generators_by_fref+0xb8>)
    4876:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    4878:	687b      	ldr	r3, [r7, #4]
    487a:	f003 0310 	and.w	r3, r3, #16
    487e:	2b00      	cmp	r3, #0
    4880:	d004      	beq.n	488c <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    4882:	4a19      	ldr	r2, [pc, #100]	; (48e8 <_gclk_init_generators_by_fref+0xc8>)
    4884:	2104      	movs	r1, #4
    4886:	4813      	ldr	r0, [pc, #76]	; (48d4 <_gclk_init_generators_by_fref+0xb4>)
    4888:	4b13      	ldr	r3, [pc, #76]	; (48d8 <_gclk_init_generators_by_fref+0xb8>)
    488a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    488c:	687b      	ldr	r3, [r7, #4]
    488e:	f003 0320 	and.w	r3, r3, #32
    4892:	2b00      	cmp	r3, #0
    4894:	d004      	beq.n	48a0 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    4896:	4a15      	ldr	r2, [pc, #84]	; (48ec <_gclk_init_generators_by_fref+0xcc>)
    4898:	2105      	movs	r1, #5
    489a:	480e      	ldr	r0, [pc, #56]	; (48d4 <_gclk_init_generators_by_fref+0xb4>)
    489c:	4b0e      	ldr	r3, [pc, #56]	; (48d8 <_gclk_init_generators_by_fref+0xb8>)
    489e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    48a0:	687b      	ldr	r3, [r7, #4]
    48a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    48a6:	2b00      	cmp	r3, #0
    48a8:	d004      	beq.n	48b4 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    48aa:	4a11      	ldr	r2, [pc, #68]	; (48f0 <_gclk_init_generators_by_fref+0xd0>)
    48ac:	210a      	movs	r1, #10
    48ae:	4809      	ldr	r0, [pc, #36]	; (48d4 <_gclk_init_generators_by_fref+0xb4>)
    48b0:	4b09      	ldr	r3, [pc, #36]	; (48d8 <_gclk_init_generators_by_fref+0xb8>)
    48b2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    48b4:	687b      	ldr	r3, [r7, #4]
    48b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    48ba:	2b00      	cmp	r3, #0
    48bc:	d004      	beq.n	48c8 <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    48be:	4a0d      	ldr	r2, [pc, #52]	; (48f4 <_gclk_init_generators_by_fref+0xd4>)
    48c0:	210b      	movs	r1, #11
    48c2:	4804      	ldr	r0, [pc, #16]	; (48d4 <_gclk_init_generators_by_fref+0xb4>)
    48c4:	4b04      	ldr	r3, [pc, #16]	; (48d8 <_gclk_init_generators_by_fref+0xb8>)
    48c6:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    48c8:	bf00      	nop
    48ca:	3708      	adds	r7, #8
    48cc:	46bd      	mov	sp, r7
    48ce:	bd80      	pop	{r7, pc}
    48d0:	00010107 	.word	0x00010107
    48d4:	40001c00 	.word	0x40001c00
    48d8:	000047f1 	.word	0x000047f1
    48dc:	00010907 	.word	0x00010907
    48e0:	00010906 	.word	0x00010906
    48e4:	00020908 	.word	0x00020908
    48e8:	00010901 	.word	0x00010901
    48ec:	00062901 	.word	0x00062901
    48f0:	00010905 	.word	0x00010905
    48f4:	00041905 	.word	0x00041905

000048f8 <hri_mclk_write_CPUDIV_reg>:
{
    48f8:	b480      	push	{r7}
    48fa:	b083      	sub	sp, #12
    48fc:	af00      	add	r7, sp, #0
    48fe:	6078      	str	r0, [r7, #4]
    4900:	460b      	mov	r3, r1
    4902:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    4904:	687b      	ldr	r3, [r7, #4]
    4906:	78fa      	ldrb	r2, [r7, #3]
    4908:	715a      	strb	r2, [r3, #5]
}
    490a:	bf00      	nop
    490c:	370c      	adds	r7, #12
    490e:	46bd      	mov	sp, r7
    4910:	f85d 7b04 	ldr.w	r7, [sp], #4
    4914:	4770      	bx	lr
	...

00004918 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    4918:	b580      	push	{r7, lr}
    491a:	b082      	sub	sp, #8
    491c:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    491e:	4b05      	ldr	r3, [pc, #20]	; (4934 <_mclk_init+0x1c>)
    4920:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    4922:	2101      	movs	r1, #1
    4924:	6878      	ldr	r0, [r7, #4]
    4926:	4b04      	ldr	r3, [pc, #16]	; (4938 <_mclk_init+0x20>)
    4928:	4798      	blx	r3
}
    492a:	bf00      	nop
    492c:	3708      	adds	r7, #8
    492e:	46bd      	mov	sp, r7
    4930:	bd80      	pop	{r7, pc}
    4932:	bf00      	nop
    4934:	40000800 	.word	0x40000800
    4938:	000048f9 	.word	0x000048f9

0000493c <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    493c:	b480      	push	{r7}
    493e:	b083      	sub	sp, #12
    4940:	af00      	add	r7, sp, #0
    4942:	6078      	str	r0, [r7, #4]
    4944:	460b      	mov	r3, r1
    4946:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    4948:	687b      	ldr	r3, [r7, #4]
    494a:	78fa      	ldrb	r2, [r7, #3]
    494c:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    494e:	bf00      	nop
    4950:	370c      	adds	r7, #12
    4952:	46bd      	mov	sp, r7
    4954:	f85d 7b04 	ldr.w	r7, [sp], #4
    4958:	4770      	bx	lr

0000495a <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    495a:	b480      	push	{r7}
    495c:	b083      	sub	sp, #12
    495e:	af00      	add	r7, sp, #0
    4960:	6078      	str	r0, [r7, #4]
    4962:	460b      	mov	r3, r1
    4964:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    4966:	687b      	ldr	r3, [r7, #4]
    4968:	887a      	ldrh	r2, [r7, #2]
    496a:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    496c:	bf00      	nop
    496e:	370c      	adds	r7, #12
    4970:	46bd      	mov	sp, r7
    4972:	f85d 7b04 	ldr.w	r7, [sp], #4
    4976:	4770      	bx	lr

00004978 <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    4978:	b480      	push	{r7}
    497a:	b083      	sub	sp, #12
    497c:	af00      	add	r7, sp, #0
    497e:	6078      	str	r0, [r7, #4]
    4980:	460b      	mov	r3, r1
    4982:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    4984:	687b      	ldr	r3, [r7, #4]
    4986:	78fa      	ldrb	r2, [r7, #3]
    4988:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    498a:	bf00      	nop
    498c:	370c      	adds	r7, #12
    498e:	46bd      	mov	sp, r7
    4990:	f85d 7b04 	ldr.w	r7, [sp], #4
    4994:	4770      	bx	lr

00004996 <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    4996:	b480      	push	{r7}
    4998:	b083      	sub	sp, #12
    499a:	af00      	add	r7, sp, #0
    499c:	6078      	str	r0, [r7, #4]
    499e:	460b      	mov	r3, r1
    49a0:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    49a2:	687b      	ldr	r3, [r7, #4]
    49a4:	78fa      	ldrb	r2, [r7, #3]
    49a6:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    49a8:	bf00      	nop
    49aa:	370c      	adds	r7, #12
    49ac:	46bd      	mov	sp, r7
    49ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    49b2:	4770      	bx	lr

000049b4 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    49b4:	b480      	push	{r7}
    49b6:	b085      	sub	sp, #20
    49b8:	af00      	add	r7, sp, #0
    49ba:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    49bc:	687b      	ldr	r3, [r7, #4]
    49be:	69db      	ldr	r3, [r3, #28]
    49c0:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    49c2:	68fb      	ldr	r3, [r7, #12]
    49c4:	0a1b      	lsrs	r3, r3, #8
    49c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    49ca:	60fb      	str	r3, [r7, #12]
	return tmp;
    49cc:	68fb      	ldr	r3, [r7, #12]
}
    49ce:	4618      	mov	r0, r3
    49d0:	3714      	adds	r7, #20
    49d2:	46bd      	mov	sp, r7
    49d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    49d8:	4770      	bx	lr

000049da <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    49da:	b480      	push	{r7}
    49dc:	b083      	sub	sp, #12
    49de:	af00      	add	r7, sp, #0
    49e0:	6078      	str	r0, [r7, #4]
    49e2:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    49e4:	687b      	ldr	r3, [r7, #4]
    49e6:	683a      	ldr	r2, [r7, #0]
    49e8:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    49ea:	bf00      	nop
    49ec:	370c      	adds	r7, #12
    49ee:	46bd      	mov	sp, r7
    49f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    49f4:	4770      	bx	lr
	...

000049f8 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    49f8:	b580      	push	{r7, lr}
    49fa:	b082      	sub	sp, #8
    49fc:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    49fe:	4b13      	ldr	r3, [pc, #76]	; (4a4c <_osc32kctrl_init_sources+0x54>)
    4a00:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    4a02:	2300      	movs	r3, #0
    4a04:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    4a06:	f242 018e 	movw	r1, #8334	; 0x208e
    4a0a:	6878      	ldr	r0, [r7, #4]
    4a0c:	4b10      	ldr	r3, [pc, #64]	; (4a50 <_osc32kctrl_init_sources+0x58>)
    4a0e:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    4a10:	2100      	movs	r1, #0
    4a12:	6878      	ldr	r0, [r7, #4]
    4a14:	4b0f      	ldr	r3, [pc, #60]	; (4a54 <_osc32kctrl_init_sources+0x5c>)
    4a16:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    4a18:	2100      	movs	r1, #0
    4a1a:	6878      	ldr	r0, [r7, #4]
    4a1c:	4b0e      	ldr	r3, [pc, #56]	; (4a58 <_osc32kctrl_init_sources+0x60>)
    4a1e:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    4a20:	6878      	ldr	r0, [r7, #4]
    4a22:	4b0e      	ldr	r3, [pc, #56]	; (4a5c <_osc32kctrl_init_sources+0x64>)
    4a24:	4798      	blx	r3
    4a26:	4603      	mov	r3, r0
    4a28:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    4a2a:	887b      	ldrh	r3, [r7, #2]
    4a2c:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    4a2e:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    4a32:	4619      	mov	r1, r3
    4a34:	6878      	ldr	r0, [r7, #4]
    4a36:	4b0a      	ldr	r3, [pc, #40]	; (4a60 <_osc32kctrl_init_sources+0x68>)
    4a38:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    4a3a:	2100      	movs	r1, #0
    4a3c:	6878      	ldr	r0, [r7, #4]
    4a3e:	4b09      	ldr	r3, [pc, #36]	; (4a64 <_osc32kctrl_init_sources+0x6c>)
    4a40:	4798      	blx	r3
	(void)calib;
}
    4a42:	bf00      	nop
    4a44:	3708      	adds	r7, #8
    4a46:	46bd      	mov	sp, r7
    4a48:	bd80      	pop	{r7, pc}
    4a4a:	bf00      	nop
    4a4c:	40001400 	.word	0x40001400
    4a50:	0000495b 	.word	0x0000495b
    4a54:	00004979 	.word	0x00004979
    4a58:	00004997 	.word	0x00004997
    4a5c:	000049b5 	.word	0x000049b5
    4a60:	000049db 	.word	0x000049db
    4a64:	0000493d 	.word	0x0000493d

00004a68 <hri_gclk_wait_for_sync>:
{
    4a68:	b480      	push	{r7}
    4a6a:	b083      	sub	sp, #12
    4a6c:	af00      	add	r7, sp, #0
    4a6e:	6078      	str	r0, [r7, #4]
    4a70:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    4a72:	bf00      	nop
    4a74:	687b      	ldr	r3, [r7, #4]
    4a76:	685a      	ldr	r2, [r3, #4]
    4a78:	683b      	ldr	r3, [r7, #0]
    4a7a:	4013      	ands	r3, r2
    4a7c:	2b00      	cmp	r3, #0
    4a7e:	d1f9      	bne.n	4a74 <hri_gclk_wait_for_sync+0xc>
}
    4a80:	bf00      	nop
    4a82:	370c      	adds	r7, #12
    4a84:	46bd      	mov	sp, r7
    4a86:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a8a:	4770      	bx	lr

00004a8c <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    4a8c:	b480      	push	{r7}
    4a8e:	b083      	sub	sp, #12
    4a90:	af00      	add	r7, sp, #0
    4a92:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    4a94:	687b      	ldr	r3, [r7, #4]
    4a96:	685b      	ldr	r3, [r3, #4]
    4a98:	089b      	lsrs	r3, r3, #2
    4a9a:	f003 0301 	and.w	r3, r3, #1
    4a9e:	2b00      	cmp	r3, #0
    4aa0:	bf14      	ite	ne
    4aa2:	2301      	movne	r3, #1
    4aa4:	2300      	moveq	r3, #0
    4aa6:	b2db      	uxtb	r3, r3
}
    4aa8:	4618      	mov	r0, r3
    4aaa:	370c      	adds	r7, #12
    4aac:	46bd      	mov	sp, r7
    4aae:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ab2:	4770      	bx	lr

00004ab4 <hri_gclk_read_SYNCBUSY_reg>:
{
    4ab4:	b480      	push	{r7}
    4ab6:	b083      	sub	sp, #12
    4ab8:	af00      	add	r7, sp, #0
    4aba:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    4abc:	687b      	ldr	r3, [r7, #4]
    4abe:	685b      	ldr	r3, [r3, #4]
}
    4ac0:	4618      	mov	r0, r3
    4ac2:	370c      	adds	r7, #12
    4ac4:	46bd      	mov	sp, r7
    4ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
    4aca:	4770      	bx	lr

00004acc <hri_gclk_write_GENCTRL_SRC_bf>:
{
    4acc:	b580      	push	{r7, lr}
    4ace:	b086      	sub	sp, #24
    4ad0:	af00      	add	r7, sp, #0
    4ad2:	60f8      	str	r0, [r7, #12]
    4ad4:	460b      	mov	r3, r1
    4ad6:	607a      	str	r2, [r7, #4]
    4ad8:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    4ada:	7afa      	ldrb	r2, [r7, #11]
    4adc:	68fb      	ldr	r3, [r7, #12]
    4ade:	3208      	adds	r2, #8
    4ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4ae4:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    4ae6:	697b      	ldr	r3, [r7, #20]
    4ae8:	f023 030f 	bic.w	r3, r3, #15
    4aec:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    4aee:	687b      	ldr	r3, [r7, #4]
    4af0:	f003 030f 	and.w	r3, r3, #15
    4af4:	697a      	ldr	r2, [r7, #20]
    4af6:	4313      	orrs	r3, r2
    4af8:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    4afa:	7afa      	ldrb	r2, [r7, #11]
    4afc:	68fb      	ldr	r3, [r7, #12]
    4afe:	3208      	adds	r2, #8
    4b00:	6979      	ldr	r1, [r7, #20]
    4b02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    4b06:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    4b0a:	68f8      	ldr	r0, [r7, #12]
    4b0c:	4b02      	ldr	r3, [pc, #8]	; (4b18 <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    4b0e:	4798      	blx	r3
}
    4b10:	bf00      	nop
    4b12:	3718      	adds	r7, #24
    4b14:	46bd      	mov	sp, r7
    4b16:	bd80      	pop	{r7, pc}
    4b18:	00004a69 	.word	0x00004a69

00004b1c <hri_gclk_write_PCHCTRL_reg>:
{
    4b1c:	b480      	push	{r7}
    4b1e:	b085      	sub	sp, #20
    4b20:	af00      	add	r7, sp, #0
    4b22:	60f8      	str	r0, [r7, #12]
    4b24:	460b      	mov	r3, r1
    4b26:	607a      	str	r2, [r7, #4]
    4b28:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    4b2a:	7afa      	ldrb	r2, [r7, #11]
    4b2c:	68fb      	ldr	r3, [r7, #12]
    4b2e:	3220      	adds	r2, #32
    4b30:	6879      	ldr	r1, [r7, #4]
    4b32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    4b36:	bf00      	nop
    4b38:	3714      	adds	r7, #20
    4b3a:	46bd      	mov	sp, r7
    4b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b40:	4770      	bx	lr

00004b42 <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    4b42:	b480      	push	{r7}
    4b44:	b085      	sub	sp, #20
    4b46:	af00      	add	r7, sp, #0
    4b48:	60f8      	str	r0, [r7, #12]
    4b4a:	460b      	mov	r3, r1
    4b4c:	607a      	str	r2, [r7, #4]
    4b4e:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    4b50:	bf00      	nop
    4b52:	7afa      	ldrb	r2, [r7, #11]
    4b54:	68f9      	ldr	r1, [r7, #12]
    4b56:	4613      	mov	r3, r2
    4b58:	009b      	lsls	r3, r3, #2
    4b5a:	4413      	add	r3, r2
    4b5c:	009b      	lsls	r3, r3, #2
    4b5e:	440b      	add	r3, r1
    4b60:	333c      	adds	r3, #60	; 0x3c
    4b62:	681a      	ldr	r2, [r3, #0]
    4b64:	687b      	ldr	r3, [r7, #4]
    4b66:	4013      	ands	r3, r2
    4b68:	2b00      	cmp	r3, #0
    4b6a:	d1f2      	bne.n	4b52 <hri_oscctrl_wait_for_sync+0x10>
	};
}
    4b6c:	bf00      	nop
    4b6e:	3714      	adds	r7, #20
    4b70:	46bd      	mov	sp, r7
    4b72:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b76:	4770      	bx	lr

00004b78 <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    4b78:	b480      	push	{r7}
    4b7a:	b083      	sub	sp, #12
    4b7c:	af00      	add	r7, sp, #0
    4b7e:	6078      	str	r0, [r7, #4]
    4b80:	460b      	mov	r3, r1
    4b82:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    4b84:	78fa      	ldrb	r2, [r7, #3]
    4b86:	6879      	ldr	r1, [r7, #4]
    4b88:	4613      	mov	r3, r2
    4b8a:	009b      	lsls	r3, r3, #2
    4b8c:	4413      	add	r3, r2
    4b8e:	009b      	lsls	r3, r3, #2
    4b90:	440b      	add	r3, r1
    4b92:	3340      	adds	r3, #64	; 0x40
    4b94:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    4b96:	f003 0301 	and.w	r3, r3, #1
    4b9a:	2b00      	cmp	r3, #0
    4b9c:	bf14      	ite	ne
    4b9e:	2301      	movne	r3, #1
    4ba0:	2300      	moveq	r3, #0
    4ba2:	b2db      	uxtb	r3, r3
}
    4ba4:	4618      	mov	r0, r3
    4ba6:	370c      	adds	r7, #12
    4ba8:	46bd      	mov	sp, r7
    4baa:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bae:	4770      	bx	lr

00004bb0 <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    4bb0:	b480      	push	{r7}
    4bb2:	b083      	sub	sp, #12
    4bb4:	af00      	add	r7, sp, #0
    4bb6:	6078      	str	r0, [r7, #4]
    4bb8:	460b      	mov	r3, r1
    4bba:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    4bbc:	78fa      	ldrb	r2, [r7, #3]
    4bbe:	6879      	ldr	r1, [r7, #4]
    4bc0:	4613      	mov	r3, r2
    4bc2:	009b      	lsls	r3, r3, #2
    4bc4:	4413      	add	r3, r2
    4bc6:	009b      	lsls	r3, r3, #2
    4bc8:	440b      	add	r3, r1
    4bca:	3340      	adds	r3, #64	; 0x40
    4bcc:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    4bce:	085b      	lsrs	r3, r3, #1
    4bd0:	f003 0301 	and.w	r3, r3, #1
    4bd4:	2b00      	cmp	r3, #0
    4bd6:	bf14      	ite	ne
    4bd8:	2301      	movne	r3, #1
    4bda:	2300      	moveq	r3, #0
    4bdc:	b2db      	uxtb	r3, r3
}
    4bde:	4618      	mov	r0, r3
    4be0:	370c      	adds	r7, #12
    4be2:	46bd      	mov	sp, r7
    4be4:	f85d 7b04 	ldr.w	r7, [sp], #4
    4be8:	4770      	bx	lr
	...

00004bec <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    4bec:	b580      	push	{r7, lr}
    4bee:	b082      	sub	sp, #8
    4bf0:	af00      	add	r7, sp, #0
    4bf2:	6078      	str	r0, [r7, #4]
    4bf4:	460b      	mov	r3, r1
    4bf6:	70fb      	strb	r3, [r7, #3]
    4bf8:	4613      	mov	r3, r2
    4bfa:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    4bfc:	78fa      	ldrb	r2, [r7, #3]
    4bfe:	6879      	ldr	r1, [r7, #4]
    4c00:	4613      	mov	r3, r2
    4c02:	009b      	lsls	r3, r3, #2
    4c04:	4413      	add	r3, r2
    4c06:	009b      	lsls	r3, r3, #2
    4c08:	440b      	add	r3, r1
    4c0a:	3330      	adds	r3, #48	; 0x30
    4c0c:	78ba      	ldrb	r2, [r7, #2]
    4c0e:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    4c10:	78fb      	ldrb	r3, [r7, #3]
    4c12:	2202      	movs	r2, #2
    4c14:	4619      	mov	r1, r3
    4c16:	6878      	ldr	r0, [r7, #4]
    4c18:	4b02      	ldr	r3, [pc, #8]	; (4c24 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    4c1a:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4c1c:	bf00      	nop
    4c1e:	3708      	adds	r7, #8
    4c20:	46bd      	mov	sp, r7
    4c22:	bd80      	pop	{r7, pc}
    4c24:	00004b43 	.word	0x00004b43

00004c28 <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    4c28:	b580      	push	{r7, lr}
    4c2a:	b084      	sub	sp, #16
    4c2c:	af00      	add	r7, sp, #0
    4c2e:	60f8      	str	r0, [r7, #12]
    4c30:	460b      	mov	r3, r1
    4c32:	607a      	str	r2, [r7, #4]
    4c34:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    4c36:	7afa      	ldrb	r2, [r7, #11]
    4c38:	68f9      	ldr	r1, [r7, #12]
    4c3a:	4613      	mov	r3, r2
    4c3c:	009b      	lsls	r3, r3, #2
    4c3e:	4413      	add	r3, r2
    4c40:	009b      	lsls	r3, r3, #2
    4c42:	440b      	add	r3, r1
    4c44:	3334      	adds	r3, #52	; 0x34
    4c46:	687a      	ldr	r2, [r7, #4]
    4c48:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    4c4a:	7afb      	ldrb	r3, [r7, #11]
    4c4c:	2206      	movs	r2, #6
    4c4e:	4619      	mov	r1, r3
    4c50:	68f8      	ldr	r0, [r7, #12]
    4c52:	4b03      	ldr	r3, [pc, #12]	; (4c60 <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    4c54:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4c56:	bf00      	nop
    4c58:	3710      	adds	r7, #16
    4c5a:	46bd      	mov	sp, r7
    4c5c:	bd80      	pop	{r7, pc}
    4c5e:	bf00      	nop
    4c60:	00004b43 	.word	0x00004b43

00004c64 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    4c64:	b480      	push	{r7}
    4c66:	b085      	sub	sp, #20
    4c68:	af00      	add	r7, sp, #0
    4c6a:	60f8      	str	r0, [r7, #12]
    4c6c:	460b      	mov	r3, r1
    4c6e:	607a      	str	r2, [r7, #4]
    4c70:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    4c72:	7afa      	ldrb	r2, [r7, #11]
    4c74:	68f9      	ldr	r1, [r7, #12]
    4c76:	4613      	mov	r3, r2
    4c78:	009b      	lsls	r3, r3, #2
    4c7a:	4413      	add	r3, r2
    4c7c:	009b      	lsls	r3, r3, #2
    4c7e:	440b      	add	r3, r1
    4c80:	3338      	adds	r3, #56	; 0x38
    4c82:	687a      	ldr	r2, [r7, #4]
    4c84:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4c86:	bf00      	nop
    4c88:	3714      	adds	r7, #20
    4c8a:	46bd      	mov	sp, r7
    4c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c90:	4770      	bx	lr

00004c92 <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    4c92:	b480      	push	{r7}
    4c94:	b083      	sub	sp, #12
    4c96:	af00      	add	r7, sp, #0
    4c98:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    4c9a:	687b      	ldr	r3, [r7, #4]
    4c9c:	691b      	ldr	r3, [r3, #16]
    4c9e:	085b      	lsrs	r3, r3, #1
    4ca0:	f003 0301 	and.w	r3, r3, #1
    4ca4:	2b00      	cmp	r3, #0
    4ca6:	bf14      	ite	ne
    4ca8:	2301      	movne	r3, #1
    4caa:	2300      	moveq	r3, #0
    4cac:	b2db      	uxtb	r3, r3
}
    4cae:	4618      	mov	r0, r3
    4cb0:	370c      	adds	r7, #12
    4cb2:	46bd      	mov	sp, r7
    4cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
    4cb8:	4770      	bx	lr

00004cba <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    4cba:	b480      	push	{r7}
    4cbc:	b083      	sub	sp, #12
    4cbe:	af00      	add	r7, sp, #0
    4cc0:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    4cc2:	687b      	ldr	r3, [r7, #4]
    4cc4:	691b      	ldr	r3, [r3, #16]
    4cc6:	0a1b      	lsrs	r3, r3, #8
    4cc8:	f003 0301 	and.w	r3, r3, #1
    4ccc:	2b00      	cmp	r3, #0
    4cce:	bf14      	ite	ne
    4cd0:	2301      	movne	r3, #1
    4cd2:	2300      	moveq	r3, #0
    4cd4:	b2db      	uxtb	r3, r3
}
    4cd6:	4618      	mov	r0, r3
    4cd8:	370c      	adds	r7, #12
    4cda:	46bd      	mov	sp, r7
    4cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ce0:	4770      	bx	lr

00004ce2 <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    4ce2:	b480      	push	{r7}
    4ce4:	b085      	sub	sp, #20
    4ce6:	af00      	add	r7, sp, #0
    4ce8:	6078      	str	r0, [r7, #4]
    4cea:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    4cec:	687b      	ldr	r3, [r7, #4]
    4cee:	691b      	ldr	r3, [r3, #16]
    4cf0:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    4cf2:	68fa      	ldr	r2, [r7, #12]
    4cf4:	683b      	ldr	r3, [r7, #0]
    4cf6:	4013      	ands	r3, r2
    4cf8:	60fb      	str	r3, [r7, #12]
	return tmp;
    4cfa:	68fb      	ldr	r3, [r7, #12]
}
    4cfc:	4618      	mov	r0, r3
    4cfe:	3714      	adds	r7, #20
    4d00:	46bd      	mov	sp, r7
    4d02:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d06:	4770      	bx	lr

00004d08 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    4d08:	b480      	push	{r7}
    4d0a:	b085      	sub	sp, #20
    4d0c:	af00      	add	r7, sp, #0
    4d0e:	60f8      	str	r0, [r7, #12]
    4d10:	460b      	mov	r3, r1
    4d12:	607a      	str	r2, [r7, #4]
    4d14:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    4d16:	7afb      	ldrb	r3, [r7, #11]
    4d18:	68fa      	ldr	r2, [r7, #12]
    4d1a:	3304      	adds	r3, #4
    4d1c:	009b      	lsls	r3, r3, #2
    4d1e:	4413      	add	r3, r2
    4d20:	687a      	ldr	r2, [r7, #4]
    4d22:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4d24:	bf00      	nop
    4d26:	3714      	adds	r7, #20
    4d28:	46bd      	mov	sp, r7
    4d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d2e:	4770      	bx	lr

00004d30 <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    4d30:	b480      	push	{r7}
    4d32:	b083      	sub	sp, #12
    4d34:	af00      	add	r7, sp, #0
    4d36:	6078      	str	r0, [r7, #4]
    4d38:	460b      	mov	r3, r1
    4d3a:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    4d3c:	687b      	ldr	r3, [r7, #4]
    4d3e:	78fa      	ldrb	r2, [r7, #3]
    4d40:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4d42:	bf00      	nop
    4d44:	370c      	adds	r7, #12
    4d46:	46bd      	mov	sp, r7
    4d48:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d4c:	4770      	bx	lr

00004d4e <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    4d4e:	b480      	push	{r7}
    4d50:	b085      	sub	sp, #20
    4d52:	af00      	add	r7, sp, #0
    4d54:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    4d56:	687b      	ldr	r3, [r7, #4]
    4d58:	f893 3020 	ldrb.w	r3, [r3, #32]
    4d5c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    4d5e:	7bfb      	ldrb	r3, [r7, #15]
    4d60:	f003 0301 	and.w	r3, r3, #1
    4d64:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4d66:	7bfb      	ldrb	r3, [r7, #15]
    4d68:	2b00      	cmp	r3, #0
    4d6a:	bf14      	ite	ne
    4d6c:	2301      	movne	r3, #1
    4d6e:	2300      	moveq	r3, #0
    4d70:	b2db      	uxtb	r3, r3
}
    4d72:	4618      	mov	r0, r3
    4d74:	3714      	adds	r7, #20
    4d76:	46bd      	mov	sp, r7
    4d78:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d7c:	4770      	bx	lr

00004d7e <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    4d7e:	b480      	push	{r7}
    4d80:	b083      	sub	sp, #12
    4d82:	af00      	add	r7, sp, #0
    4d84:	6078      	str	r0, [r7, #4]
    4d86:	460b      	mov	r3, r1
    4d88:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    4d8a:	687b      	ldr	r3, [r7, #4]
    4d8c:	78fa      	ldrb	r2, [r7, #3]
    4d8e:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4d92:	bf00      	nop
    4d94:	370c      	adds	r7, #12
    4d96:	46bd      	mov	sp, r7
    4d98:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d9c:	4770      	bx	lr

00004d9e <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    4d9e:	b480      	push	{r7}
    4da0:	b083      	sub	sp, #12
    4da2:	af00      	add	r7, sp, #0
    4da4:	6078      	str	r0, [r7, #4]
    4da6:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    4da8:	687b      	ldr	r3, [r7, #4]
    4daa:	683a      	ldr	r2, [r7, #0]
    4dac:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4dae:	bf00      	nop
    4db0:	370c      	adds	r7, #12
    4db2:	46bd      	mov	sp, r7
    4db4:	f85d 7b04 	ldr.w	r7, [sp], #4
    4db8:	4770      	bx	lr

00004dba <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    4dba:	b480      	push	{r7}
    4dbc:	b083      	sub	sp, #12
    4dbe:	af00      	add	r7, sp, #0
    4dc0:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    4dc2:	687b      	ldr	r3, [r7, #4]
    4dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    4dc6:	4618      	mov	r0, r3
    4dc8:	370c      	adds	r7, #12
    4dca:	46bd      	mov	sp, r7
    4dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4dd0:	4770      	bx	lr

00004dd2 <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    4dd2:	b480      	push	{r7}
    4dd4:	b083      	sub	sp, #12
    4dd6:	af00      	add	r7, sp, #0
    4dd8:	6078      	str	r0, [r7, #4]
    4dda:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    4ddc:	687b      	ldr	r3, [r7, #4]
    4dde:	683a      	ldr	r2, [r7, #0]
    4de0:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4de2:	bf00      	nop
    4de4:	370c      	adds	r7, #12
    4de6:	46bd      	mov	sp, r7
    4de8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4dec:	4770      	bx	lr

00004dee <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    4dee:	b480      	push	{r7}
    4df0:	b085      	sub	sp, #20
    4df2:	af00      	add	r7, sp, #0
    4df4:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    4df6:	687b      	ldr	r3, [r7, #4]
    4df8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    4dfc:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    4dfe:	7bfb      	ldrb	r3, [r7, #15]
    4e00:	085b      	lsrs	r3, r3, #1
    4e02:	b2db      	uxtb	r3, r3
    4e04:	f003 0301 	and.w	r3, r3, #1
    4e08:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4e0a:	7bfb      	ldrb	r3, [r7, #15]
    4e0c:	2b00      	cmp	r3, #0
    4e0e:	bf14      	ite	ne
    4e10:	2301      	movne	r3, #1
    4e12:	2300      	moveq	r3, #0
    4e14:	b2db      	uxtb	r3, r3
}
    4e16:	4618      	mov	r0, r3
    4e18:	3714      	adds	r7, #20
    4e1a:	46bd      	mov	sp, r7
    4e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e20:	4770      	bx	lr

00004e22 <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    4e22:	b480      	push	{r7}
    4e24:	b085      	sub	sp, #20
    4e26:	af00      	add	r7, sp, #0
    4e28:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    4e2a:	687b      	ldr	r3, [r7, #4]
    4e2c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    4e30:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    4e32:	7bfb      	ldrb	r3, [r7, #15]
    4e34:	089b      	lsrs	r3, r3, #2
    4e36:	b2db      	uxtb	r3, r3
    4e38:	f003 0301 	and.w	r3, r3, #1
    4e3c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4e3e:	7bfb      	ldrb	r3, [r7, #15]
    4e40:	2b00      	cmp	r3, #0
    4e42:	bf14      	ite	ne
    4e44:	2301      	movne	r3, #1
    4e46:	2300      	moveq	r3, #0
    4e48:	b2db      	uxtb	r3, r3
}
    4e4a:	4618      	mov	r0, r3
    4e4c:	3714      	adds	r7, #20
    4e4e:	46bd      	mov	sp, r7
    4e50:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e54:	4770      	bx	lr

00004e56 <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    4e56:	b480      	push	{r7}
    4e58:	b085      	sub	sp, #20
    4e5a:	af00      	add	r7, sp, #0
    4e5c:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    4e5e:	687b      	ldr	r3, [r7, #4]
    4e60:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    4e64:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    4e66:	7bfb      	ldrb	r3, [r7, #15]
    4e68:	08db      	lsrs	r3, r3, #3
    4e6a:	b2db      	uxtb	r3, r3
    4e6c:	f003 0301 	and.w	r3, r3, #1
    4e70:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4e72:	7bfb      	ldrb	r3, [r7, #15]
    4e74:	2b00      	cmp	r3, #0
    4e76:	bf14      	ite	ne
    4e78:	2301      	movne	r3, #1
    4e7a:	2300      	moveq	r3, #0
    4e7c:	b2db      	uxtb	r3, r3
}
    4e7e:	4618      	mov	r0, r3
    4e80:	3714      	adds	r7, #20
    4e82:	46bd      	mov	sp, r7
    4e84:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e88:	4770      	bx	lr

00004e8a <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    4e8a:	b480      	push	{r7}
    4e8c:	b085      	sub	sp, #20
    4e8e:	af00      	add	r7, sp, #0
    4e90:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    4e92:	687b      	ldr	r3, [r7, #4]
    4e94:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    4e98:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    4e9a:	7bfb      	ldrb	r3, [r7, #15]
    4e9c:	091b      	lsrs	r3, r3, #4
    4e9e:	b2db      	uxtb	r3, r3
    4ea0:	f003 0301 	and.w	r3, r3, #1
    4ea4:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4ea6:	7bfb      	ldrb	r3, [r7, #15]
    4ea8:	2b00      	cmp	r3, #0
    4eaa:	bf14      	ite	ne
    4eac:	2301      	movne	r3, #1
    4eae:	2300      	moveq	r3, #0
    4eb0:	b2db      	uxtb	r3, r3
}
    4eb2:	4618      	mov	r0, r3
    4eb4:	3714      	adds	r7, #20
    4eb6:	46bd      	mov	sp, r7
    4eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ebc:	4770      	bx	lr
	...

00004ec0 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    4ec0:	b580      	push	{r7, lr}
    4ec2:	b082      	sub	sp, #8
    4ec4:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    4ec6:	4b0a      	ldr	r3, [pc, #40]	; (4ef0 <_oscctrl_init_sources+0x30>)
    4ec8:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    4eca:	4a0a      	ldr	r2, [pc, #40]	; (4ef4 <_oscctrl_init_sources+0x34>)
    4ecc:	2101      	movs	r1, #1
    4ece:	6878      	ldr	r0, [r7, #4]
    4ed0:	4b09      	ldr	r3, [pc, #36]	; (4ef8 <_oscctrl_init_sources+0x38>)
    4ed2:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    4ed4:	bf00      	nop
    4ed6:	6878      	ldr	r0, [r7, #4]
    4ed8:	4b08      	ldr	r3, [pc, #32]	; (4efc <_oscctrl_init_sources+0x3c>)
    4eda:	4798      	blx	r3
    4edc:	4603      	mov	r3, r0
    4ede:	f083 0301 	eor.w	r3, r3, #1
    4ee2:	b2db      	uxtb	r3, r3
    4ee4:	2b00      	cmp	r3, #0
    4ee6:	d1f6      	bne.n	4ed6 <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    4ee8:	bf00      	nop
    4eea:	3708      	adds	r7, #8
    4eec:	46bd      	mov	sp, r7
    4eee:	bd80      	pop	{r7, pc}
    4ef0:	40001000 	.word	0x40001000
    4ef4:	03002606 	.word	0x03002606
    4ef8:	00004d09 	.word	0x00004d09
    4efc:	00004c93 	.word	0x00004c93

00004f00 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    4f00:	b580      	push	{r7, lr}
    4f02:	b084      	sub	sp, #16
    4f04:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    4f06:	4b6b      	ldr	r3, [pc, #428]	; (50b4 <_oscctrl_init_referenced_generators+0x1b4>)
    4f08:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    4f0a:	2204      	movs	r2, #4
    4f0c:	2100      	movs	r1, #0
    4f0e:	486a      	ldr	r0, [pc, #424]	; (50b8 <_oscctrl_init_referenced_generators+0x1b8>)
    4f10:	4b6a      	ldr	r3, [pc, #424]	; (50bc <_oscctrl_init_referenced_generators+0x1bc>)
    4f12:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    4f14:	bf00      	nop
    4f16:	4868      	ldr	r0, [pc, #416]	; (50b8 <_oscctrl_init_referenced_generators+0x1b8>)
    4f18:	4b69      	ldr	r3, [pc, #420]	; (50c0 <_oscctrl_init_referenced_generators+0x1c0>)
    4f1a:	4798      	blx	r3
    4f1c:	4603      	mov	r3, r0
    4f1e:	2b00      	cmp	r3, #0
    4f20:	d1f9      	bne.n	4f16 <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    4f22:	2100      	movs	r1, #0
    4f24:	68f8      	ldr	r0, [r7, #12]
    4f26:	4b67      	ldr	r3, [pc, #412]	; (50c4 <_oscctrl_init_referenced_generators+0x1c4>)
    4f28:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    4f2a:	4967      	ldr	r1, [pc, #412]	; (50c8 <_oscctrl_init_referenced_generators+0x1c8>)
    4f2c:	68f8      	ldr	r0, [r7, #12]
    4f2e:	4b67      	ldr	r3, [pc, #412]	; (50cc <_oscctrl_init_referenced_generators+0x1cc>)
    4f30:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    4f32:	bf00      	nop
    4f34:	68f8      	ldr	r0, [r7, #12]
    4f36:	4b66      	ldr	r3, [pc, #408]	; (50d0 <_oscctrl_init_referenced_generators+0x1d0>)
    4f38:	4798      	blx	r3
    4f3a:	4603      	mov	r3, r0
    4f3c:	2b00      	cmp	r3, #0
    4f3e:	d1f9      	bne.n	4f34 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    4f40:	2100      	movs	r1, #0
    4f42:	68f8      	ldr	r0, [r7, #12]
    4f44:	4b63      	ldr	r3, [pc, #396]	; (50d4 <_oscctrl_init_referenced_generators+0x1d4>)
    4f46:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    4f48:	bf00      	nop
    4f4a:	68f8      	ldr	r0, [r7, #12]
    4f4c:	4b62      	ldr	r3, [pc, #392]	; (50d8 <_oscctrl_init_referenced_generators+0x1d8>)
    4f4e:	4798      	blx	r3
    4f50:	4603      	mov	r3, r0
    4f52:	2b00      	cmp	r3, #0
    4f54:	d1f9      	bne.n	4f4a <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    4f56:	2302      	movs	r3, #2
    4f58:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    4f5a:	7afb      	ldrb	r3, [r7, #11]
    4f5c:	4619      	mov	r1, r3
    4f5e:	68f8      	ldr	r0, [r7, #12]
    4f60:	4b58      	ldr	r3, [pc, #352]	; (50c4 <_oscctrl_init_referenced_generators+0x1c4>)
    4f62:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    4f64:	bf00      	nop
    4f66:	68f8      	ldr	r0, [r7, #12]
    4f68:	4b5c      	ldr	r3, [pc, #368]	; (50dc <_oscctrl_init_referenced_generators+0x1dc>)
    4f6a:	4798      	blx	r3
    4f6c:	4603      	mov	r3, r0
    4f6e:	2b00      	cmp	r3, #0
    4f70:	d1f9      	bne.n	4f66 <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    4f72:	68f8      	ldr	r0, [r7, #12]
    4f74:	4b5a      	ldr	r3, [pc, #360]	; (50e0 <_oscctrl_init_referenced_generators+0x1e0>)
    4f76:	4798      	blx	r3
    4f78:	4603      	mov	r3, r0
    4f7a:	4619      	mov	r1, r3
    4f7c:	68f8      	ldr	r0, [r7, #12]
    4f7e:	4b59      	ldr	r3, [pc, #356]	; (50e4 <_oscctrl_init_referenced_generators+0x1e4>)
    4f80:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    4f82:	bf00      	nop
    4f84:	68f8      	ldr	r0, [r7, #12]
    4f86:	4b58      	ldr	r3, [pc, #352]	; (50e8 <_oscctrl_init_referenced_generators+0x1e8>)
    4f88:	4798      	blx	r3
    4f8a:	4603      	mov	r3, r0
    4f8c:	2b00      	cmp	r3, #0
    4f8e:	d1f9      	bne.n	4f84 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    4f90:	2319      	movs	r3, #25
    4f92:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    4f94:	7afb      	ldrb	r3, [r7, #11]
    4f96:	4619      	mov	r1, r3
    4f98:	68f8      	ldr	r0, [r7, #12]
    4f9a:	4b4e      	ldr	r3, [pc, #312]	; (50d4 <_oscctrl_init_referenced_generators+0x1d4>)
    4f9c:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    4f9e:	bf00      	nop
    4fa0:	68f8      	ldr	r0, [r7, #12]
    4fa2:	4b4d      	ldr	r3, [pc, #308]	; (50d8 <_oscctrl_init_referenced_generators+0x1d8>)
    4fa4:	4798      	blx	r3
    4fa6:	4603      	mov	r3, r0
    4fa8:	2b00      	cmp	r3, #0
    4faa:	d1f9      	bne.n	4fa0 <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    4fac:	2245      	movs	r2, #69	; 0x45
    4fae:	2101      	movs	r1, #1
    4fb0:	4841      	ldr	r0, [pc, #260]	; (50b8 <_oscctrl_init_referenced_generators+0x1b8>)
    4fb2:	4b4e      	ldr	r3, [pc, #312]	; (50ec <_oscctrl_init_referenced_generators+0x1ec>)
    4fb4:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    4fb6:	223b      	movs	r2, #59	; 0x3b
    4fb8:	2100      	movs	r1, #0
    4fba:	68f8      	ldr	r0, [r7, #12]
    4fbc:	4b4c      	ldr	r3, [pc, #304]	; (50f0 <_oscctrl_init_referenced_generators+0x1f0>)
    4fbe:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    4fc0:	f44f 6201 	mov.w	r2, #2064	; 0x810
    4fc4:	2100      	movs	r1, #0
    4fc6:	68f8      	ldr	r0, [r7, #12]
    4fc8:	4b4a      	ldr	r3, [pc, #296]	; (50f4 <_oscctrl_init_referenced_generators+0x1f4>)
    4fca:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    4fcc:	2242      	movs	r2, #66	; 0x42
    4fce:	2100      	movs	r1, #0
    4fd0:	68f8      	ldr	r0, [r7, #12]
    4fd2:	4b49      	ldr	r3, [pc, #292]	; (50f8 <_oscctrl_init_referenced_generators+0x1f8>)
    4fd4:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    4fd6:	4a49      	ldr	r2, [pc, #292]	; (50fc <_oscctrl_init_referenced_generators+0x1fc>)
    4fd8:	2101      	movs	r1, #1
    4fda:	68f8      	ldr	r0, [r7, #12]
    4fdc:	4b44      	ldr	r3, [pc, #272]	; (50f0 <_oscctrl_init_referenced_generators+0x1f0>)
    4fde:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    4fe0:	f44f 6203 	mov.w	r2, #2096	; 0x830
    4fe4:	2101      	movs	r1, #1
    4fe6:	68f8      	ldr	r0, [r7, #12]
    4fe8:	4b42      	ldr	r3, [pc, #264]	; (50f4 <_oscctrl_init_referenced_generators+0x1f4>)
    4fea:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    4fec:	2202      	movs	r2, #2
    4fee:	2101      	movs	r1, #1
    4ff0:	68f8      	ldr	r0, [r7, #12]
    4ff2:	4b41      	ldr	r3, [pc, #260]	; (50f8 <_oscctrl_init_referenced_generators+0x1f8>)
    4ff4:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    4ff6:	68f8      	ldr	r0, [r7, #12]
    4ff8:	4b41      	ldr	r3, [pc, #260]	; (5100 <_oscctrl_init_referenced_generators+0x200>)
    4ffa:	4798      	blx	r3
    4ffc:	4603      	mov	r3, r0
    4ffe:	2b00      	cmp	r3, #0
    5000:	d00c      	beq.n	501c <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    5002:	f44f 6310 	mov.w	r3, #2304	; 0x900
    5006:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    5008:	bf00      	nop
    500a:	6879      	ldr	r1, [r7, #4]
    500c:	68f8      	ldr	r0, [r7, #12]
    500e:	4b3d      	ldr	r3, [pc, #244]	; (5104 <_oscctrl_init_referenced_generators+0x204>)
    5010:	4798      	blx	r3
    5012:	4602      	mov	r2, r0
    5014:	687b      	ldr	r3, [r7, #4]
    5016:	429a      	cmp	r2, r3
    5018:	d1f7      	bne.n	500a <_oscctrl_init_referenced_generators+0x10a>
    501a:	e009      	b.n	5030 <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    501c:	bf00      	nop
    501e:	68f8      	ldr	r0, [r7, #12]
    5020:	4b39      	ldr	r3, [pc, #228]	; (5108 <_oscctrl_init_referenced_generators+0x208>)
    5022:	4798      	blx	r3
    5024:	4603      	mov	r3, r0
    5026:	f083 0301 	eor.w	r3, r3, #1
    502a:	b2db      	uxtb	r3, r3
    502c:	2b00      	cmp	r3, #0
    502e:	d1f6      	bne.n	501e <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    5030:	bf00      	nop
    5032:	2100      	movs	r1, #0
    5034:	68f8      	ldr	r0, [r7, #12]
    5036:	4b35      	ldr	r3, [pc, #212]	; (510c <_oscctrl_init_referenced_generators+0x20c>)
    5038:	4798      	blx	r3
    503a:	4603      	mov	r3, r0
    503c:	f083 0301 	eor.w	r3, r3, #1
    5040:	b2db      	uxtb	r3, r3
    5042:	2b00      	cmp	r3, #0
    5044:	d009      	beq.n	505a <_oscctrl_init_referenced_generators+0x15a>
    5046:	2100      	movs	r1, #0
    5048:	68f8      	ldr	r0, [r7, #12]
    504a:	4b31      	ldr	r3, [pc, #196]	; (5110 <_oscctrl_init_referenced_generators+0x210>)
    504c:	4798      	blx	r3
    504e:	4603      	mov	r3, r0
    5050:	f083 0301 	eor.w	r3, r3, #1
    5054:	b2db      	uxtb	r3, r3
    5056:	2b00      	cmp	r3, #0
    5058:	d1eb      	bne.n	5032 <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    505a:	bf00      	nop
    505c:	2101      	movs	r1, #1
    505e:	68f8      	ldr	r0, [r7, #12]
    5060:	4b2a      	ldr	r3, [pc, #168]	; (510c <_oscctrl_init_referenced_generators+0x20c>)
    5062:	4798      	blx	r3
    5064:	4603      	mov	r3, r0
    5066:	f083 0301 	eor.w	r3, r3, #1
    506a:	b2db      	uxtb	r3, r3
    506c:	2b00      	cmp	r3, #0
    506e:	d009      	beq.n	5084 <_oscctrl_init_referenced_generators+0x184>
    5070:	2101      	movs	r1, #1
    5072:	68f8      	ldr	r0, [r7, #12]
    5074:	4b26      	ldr	r3, [pc, #152]	; (5110 <_oscctrl_init_referenced_generators+0x210>)
    5076:	4798      	blx	r3
    5078:	4603      	mov	r3, r0
    507a:	f083 0301 	eor.w	r3, r3, #1
    507e:	b2db      	uxtb	r3, r3
    5080:	2b00      	cmp	r3, #0
    5082:	d1eb      	bne.n	505c <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    5084:	bf00      	nop
    5086:	480c      	ldr	r0, [pc, #48]	; (50b8 <_oscctrl_init_referenced_generators+0x1b8>)
    5088:	4b22      	ldr	r3, [pc, #136]	; (5114 <_oscctrl_init_referenced_generators+0x214>)
    508a:	4798      	blx	r3
    508c:	4603      	mov	r3, r0
    508e:	2b00      	cmp	r3, #0
    5090:	d1f9      	bne.n	5086 <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    5092:	2207      	movs	r2, #7
    5094:	2100      	movs	r1, #0
    5096:	4808      	ldr	r0, [pc, #32]	; (50b8 <_oscctrl_init_referenced_generators+0x1b8>)
    5098:	4b08      	ldr	r3, [pc, #32]	; (50bc <_oscctrl_init_referenced_generators+0x1bc>)
    509a:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    509c:	bf00      	nop
    509e:	4806      	ldr	r0, [pc, #24]	; (50b8 <_oscctrl_init_referenced_generators+0x1b8>)
    50a0:	4b07      	ldr	r3, [pc, #28]	; (50c0 <_oscctrl_init_referenced_generators+0x1c0>)
    50a2:	4798      	blx	r3
    50a4:	4603      	mov	r3, r0
    50a6:	2b00      	cmp	r3, #0
    50a8:	d1f9      	bne.n	509e <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    50aa:	bf00      	nop
    50ac:	3710      	adds	r7, #16
    50ae:	46bd      	mov	sp, r7
    50b0:	bd80      	pop	{r7, pc}
    50b2:	bf00      	nop
    50b4:	40001000 	.word	0x40001000
    50b8:	40001c00 	.word	0x40001c00
    50bc:	00004acd 	.word	0x00004acd
    50c0:	00004a8d 	.word	0x00004a8d
    50c4:	00004d31 	.word	0x00004d31
    50c8:	0401bb80 	.word	0x0401bb80
    50cc:	00004dd3 	.word	0x00004dd3
    50d0:	00004e8b 	.word	0x00004e8b
    50d4:	00004d7f 	.word	0x00004d7f
    50d8:	00004e23 	.word	0x00004e23
    50dc:	00004def 	.word	0x00004def
    50e0:	00004dbb 	.word	0x00004dbb
    50e4:	00004d9f 	.word	0x00004d9f
    50e8:	00004e57 	.word	0x00004e57
    50ec:	00004b1d 	.word	0x00004b1d
    50f0:	00004c29 	.word	0x00004c29
    50f4:	00004c65 	.word	0x00004c65
    50f8:	00004bed 	.word	0x00004bed
    50fc:	000407a0 	.word	0x000407a0
    5100:	00004d4f 	.word	0x00004d4f
    5104:	00004ce3 	.word	0x00004ce3
    5108:	00004cbb 	.word	0x00004cbb
    510c:	00004b79 	.word	0x00004b79
    5110:	00004bb1 	.word	0x00004bb1
    5114:	00004ab5 	.word	0x00004ab5

00005118 <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    5118:	b480      	push	{r7}
    511a:	b083      	sub	sp, #12
    511c:	af00      	add	r7, sp, #0
    511e:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    5120:	687b      	ldr	r3, [r7, #4]
    5122:	69db      	ldr	r3, [r3, #28]
    5124:	0a9b      	lsrs	r3, r3, #10
    5126:	f003 0301 	and.w	r3, r3, #1
    512a:	2b00      	cmp	r3, #0
    512c:	bf14      	ite	ne
    512e:	2301      	movne	r3, #1
    5130:	2300      	moveq	r3, #0
    5132:	b2db      	uxtb	r3, r3
}
    5134:	4618      	mov	r0, r3
    5136:	370c      	adds	r7, #12
    5138:	46bd      	mov	sp, r7
    513a:	f85d 7b04 	ldr.w	r7, [sp], #4
    513e:	4770      	bx	lr

00005140 <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    5140:	b480      	push	{r7}
    5142:	b083      	sub	sp, #12
    5144:	af00      	add	r7, sp, #0
    5146:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    5148:	687b      	ldr	r3, [r7, #4]
    514a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    514e:	61da      	str	r2, [r3, #28]
}
    5150:	bf00      	nop
    5152:	370c      	adds	r7, #12
    5154:	46bd      	mov	sp, r7
    5156:	f85d 7b04 	ldr.w	r7, [sp], #4
    515a:	4770      	bx	lr

0000515c <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    515c:	b480      	push	{r7}
    515e:	b083      	sub	sp, #12
    5160:	af00      	add	r7, sp, #0
    5162:	6078      	str	r0, [r7, #4]
    5164:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    5166:	687b      	ldr	r3, [r7, #4]
    5168:	683a      	ldr	r2, [r7, #0]
    516a:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    516c:	bf00      	nop
    516e:	370c      	adds	r7, #12
    5170:	46bd      	mov	sp, r7
    5172:	f85d 7b04 	ldr.w	r7, [sp], #4
    5176:	4770      	bx	lr

00005178 <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    5178:	b480      	push	{r7}
    517a:	b083      	sub	sp, #12
    517c:	af00      	add	r7, sp, #0
    517e:	6078      	str	r0, [r7, #4]
    5180:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    5182:	687b      	ldr	r3, [r7, #4]
    5184:	683a      	ldr	r2, [r7, #0]
    5186:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5188:	bf00      	nop
    518a:	370c      	adds	r7, #12
    518c:	46bd      	mov	sp, r7
    518e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5192:	4770      	bx	lr

00005194 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    5194:	b480      	push	{r7}
    5196:	b083      	sub	sp, #12
    5198:	af00      	add	r7, sp, #0
    519a:	6078      	str	r0, [r7, #4]
    519c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    519e:	687b      	ldr	r3, [r7, #4]
    51a0:	683a      	ldr	r2, [r7, #0]
    51a2:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    51a4:	bf00      	nop
    51a6:	370c      	adds	r7, #12
    51a8:	46bd      	mov	sp, r7
    51aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    51ae:	4770      	bx	lr

000051b0 <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    51b0:	b480      	push	{r7}
    51b2:	b083      	sub	sp, #12
    51b4:	af00      	add	r7, sp, #0
    51b6:	6078      	str	r0, [r7, #4]
    51b8:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    51ba:	687b      	ldr	r3, [r7, #4]
    51bc:	683a      	ldr	r2, [r7, #0]
    51be:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    51c0:	bf00      	nop
    51c2:	370c      	adds	r7, #12
    51c4:	46bd      	mov	sp, r7
    51c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    51ca:	4770      	bx	lr

000051cc <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    51cc:	b480      	push	{r7}
    51ce:	b085      	sub	sp, #20
    51d0:	af00      	add	r7, sp, #0
    51d2:	6078      	str	r0, [r7, #4]
    51d4:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    51d6:	687b      	ldr	r3, [r7, #4]
    51d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    51da:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    51dc:	68fb      	ldr	r3, [r7, #12]
    51de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    51e2:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    51e4:	683b      	ldr	r3, [r7, #0]
    51e6:	b2db      	uxtb	r3, r3
    51e8:	68fa      	ldr	r2, [r7, #12]
    51ea:	4313      	orrs	r3, r2
    51ec:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    51ee:	687b      	ldr	r3, [r7, #4]
    51f0:	68fa      	ldr	r2, [r7, #12]
    51f2:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    51f4:	bf00      	nop
    51f6:	3714      	adds	r7, #20
    51f8:	46bd      	mov	sp, r7
    51fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    51fe:	4770      	bx	lr

00005200 <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    5200:	b480      	push	{r7}
    5202:	b085      	sub	sp, #20
    5204:	af00      	add	r7, sp, #0
    5206:	6078      	str	r0, [r7, #4]
    5208:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    520a:	687b      	ldr	r3, [r7, #4]
    520c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    520e:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    5210:	68fb      	ldr	r3, [r7, #12]
    5212:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    5216:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    5218:	683b      	ldr	r3, [r7, #0]
    521a:	041b      	lsls	r3, r3, #16
    521c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    5220:	68fa      	ldr	r2, [r7, #12]
    5222:	4313      	orrs	r3, r2
    5224:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    5226:	687b      	ldr	r3, [r7, #4]
    5228:	68fa      	ldr	r2, [r7, #12]
    522a:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    522c:	bf00      	nop
    522e:	3714      	adds	r7, #20
    5230:	46bd      	mov	sp, r7
    5232:	f85d 7b04 	ldr.w	r7, [sp], #4
    5236:	4770      	bx	lr

00005238 <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    5238:	b480      	push	{r7}
    523a:	b083      	sub	sp, #12
    523c:	af00      	add	r7, sp, #0
    523e:	6078      	str	r0, [r7, #4]
    5240:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    5242:	687b      	ldr	r3, [r7, #4]
    5244:	683a      	ldr	r2, [r7, #0]
    5246:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5248:	bf00      	nop
    524a:	370c      	adds	r7, #12
    524c:	46bd      	mov	sp, r7
    524e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5252:	4770      	bx	lr

00005254 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    5254:	b480      	push	{r7}
    5256:	b083      	sub	sp, #12
    5258:	af00      	add	r7, sp, #0
    525a:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    525c:	687b      	ldr	r3, [r7, #4]
    525e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    5260:	4618      	mov	r0, r3
    5262:	370c      	adds	r7, #12
    5264:	46bd      	mov	sp, r7
    5266:	f85d 7b04 	ldr.w	r7, [sp], #4
    526a:	4770      	bx	lr

0000526c <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    526c:	b480      	push	{r7}
    526e:	b085      	sub	sp, #20
    5270:	af00      	add	r7, sp, #0
    5272:	60f8      	str	r0, [r7, #12]
    5274:	60b9      	str	r1, [r7, #8]
    5276:	607a      	str	r2, [r7, #4]
	while (count--) {
    5278:	e007      	b.n	528a <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    527a:	68fb      	ldr	r3, [r7, #12]
    527c:	1c5a      	adds	r2, r3, #1
    527e:	60fa      	str	r2, [r7, #12]
    5280:	68ba      	ldr	r2, [r7, #8]
    5282:	1c51      	adds	r1, r2, #1
    5284:	60b9      	str	r1, [r7, #8]
    5286:	7812      	ldrb	r2, [r2, #0]
    5288:	701a      	strb	r2, [r3, #0]
	while (count--) {
    528a:	687b      	ldr	r3, [r7, #4]
    528c:	1e5a      	subs	r2, r3, #1
    528e:	607a      	str	r2, [r7, #4]
    5290:	2b00      	cmp	r3, #0
    5292:	d1f2      	bne.n	527a <_qspi_memcpy+0xe>
	}
}
    5294:	bf00      	nop
    5296:	3714      	adds	r7, #20
    5298:	46bd      	mov	sp, r7
    529a:	f85d 7b04 	ldr.w	r7, [sp], #4
    529e:	4770      	bx	lr

000052a0 <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    52a0:	b580      	push	{r7, lr}
    52a2:	b082      	sub	sp, #8
    52a4:	af00      	add	r7, sp, #0
    52a6:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    52a8:	4903      	ldr	r1, [pc, #12]	; (52b8 <_qspi_end_transfer+0x18>)
    52aa:	6878      	ldr	r0, [r7, #4]
    52ac:	4b03      	ldr	r3, [pc, #12]	; (52bc <_qspi_end_transfer+0x1c>)
    52ae:	4798      	blx	r3
}
    52b0:	bf00      	nop
    52b2:	3708      	adds	r7, #8
    52b4:	46bd      	mov	sp, r7
    52b6:	bd80      	pop	{r7, pc}
    52b8:	01000002 	.word	0x01000002
    52bc:	0000515d 	.word	0x0000515d

000052c0 <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    52c0:	b580      	push	{r7, lr}
    52c2:	b082      	sub	sp, #8
    52c4:	af00      	add	r7, sp, #0
    52c6:	6078      	str	r0, [r7, #4]
    52c8:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    52ca:	687b      	ldr	r3, [r7, #4]
    52cc:	2b00      	cmp	r3, #0
    52ce:	d004      	beq.n	52da <_qspi_sync_init+0x1a>
    52d0:	683b      	ldr	r3, [r7, #0]
    52d2:	2b00      	cmp	r3, #0
    52d4:	d001      	beq.n	52da <_qspi_sync_init+0x1a>
    52d6:	2301      	movs	r3, #1
    52d8:	e000      	b.n	52dc <_qspi_sync_init+0x1c>
    52da:	2300      	movs	r3, #0
    52dc:	f003 0301 	and.w	r3, r3, #1
    52e0:	b2db      	uxtb	r3, r3
    52e2:	2240      	movs	r2, #64	; 0x40
    52e4:	490c      	ldr	r1, [pc, #48]	; (5318 <_qspi_sync_init+0x58>)
    52e6:	4618      	mov	r0, r3
    52e8:	4b0c      	ldr	r3, [pc, #48]	; (531c <_qspi_sync_init+0x5c>)
    52ea:	4798      	blx	r3
	dev->prvt = hw;
    52ec:	687b      	ldr	r3, [r7, #4]
    52ee:	683a      	ldr	r2, [r7, #0]
    52f0:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    52f2:	687b      	ldr	r3, [r7, #4]
    52f4:	681b      	ldr	r3, [r3, #0]
    52f6:	2101      	movs	r1, #1
    52f8:	4618      	mov	r0, r3
    52fa:	4b09      	ldr	r3, [pc, #36]	; (5320 <_qspi_sync_init+0x60>)
    52fc:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    52fe:	4909      	ldr	r1, [pc, #36]	; (5324 <_qspi_sync_init+0x64>)
    5300:	6838      	ldr	r0, [r7, #0]
    5302:	4b09      	ldr	r3, [pc, #36]	; (5328 <_qspi_sync_init+0x68>)
    5304:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    5306:	4909      	ldr	r1, [pc, #36]	; (532c <_qspi_sync_init+0x6c>)
    5308:	6838      	ldr	r0, [r7, #0]
    530a:	4b09      	ldr	r3, [pc, #36]	; (5330 <_qspi_sync_init+0x70>)
    530c:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    530e:	2300      	movs	r3, #0
}
    5310:	4618      	mov	r0, r3
    5312:	3708      	adds	r7, #8
    5314:	46bd      	mov	sp, r7
    5316:	bd80      	pop	{r7, pc}
    5318:	00013154 	.word	0x00013154
    531c:	00002f09 	.word	0x00002f09
    5320:	0000515d 	.word	0x0000515d
    5324:	06000011 	.word	0x06000011
    5328:	00005179 	.word	0x00005179
    532c:	00241300 	.word	0x00241300
    5330:	00005195 	.word	0x00005195

00005334 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    5334:	b580      	push	{r7, lr}
    5336:	b082      	sub	sp, #8
    5338:	af00      	add	r7, sp, #0
    533a:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    533c:	687b      	ldr	r3, [r7, #4]
    533e:	681b      	ldr	r3, [r3, #0]
    5340:	2102      	movs	r1, #2
    5342:	4618      	mov	r0, r3
    5344:	4b03      	ldr	r3, [pc, #12]	; (5354 <_qspi_sync_enable+0x20>)
    5346:	4798      	blx	r3
	return ERR_NONE;
    5348:	2300      	movs	r3, #0
}
    534a:	4618      	mov	r0, r3
    534c:	3708      	adds	r7, #8
    534e:	46bd      	mov	sp, r7
    5350:	bd80      	pop	{r7, pc}
    5352:	bf00      	nop
    5354:	0000515d 	.word	0x0000515d

00005358 <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    5358:	b580      	push	{r7, lr}
    535a:	b082      	sub	sp, #8
    535c:	af00      	add	r7, sp, #0
    535e:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    5360:	687b      	ldr	r3, [r7, #4]
    5362:	681b      	ldr	r3, [r3, #0]
    5364:	2100      	movs	r1, #0
    5366:	4618      	mov	r0, r3
    5368:	4b03      	ldr	r3, [pc, #12]	; (5378 <_qspi_sync_disable+0x20>)
    536a:	4798      	blx	r3
	return ERR_NONE;
    536c:	2300      	movs	r3, #0
}
    536e:	4618      	mov	r0, r3
    5370:	3708      	adds	r7, #8
    5372:	46bd      	mov	sp, r7
    5374:	bd80      	pop	{r7, pc}
    5376:	bf00      	nop
    5378:	0000515d 	.word	0x0000515d

0000537c <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    537c:	b580      	push	{r7, lr}
    537e:	b084      	sub	sp, #16
    5380:	af00      	add	r7, sp, #0
    5382:	6078      	str	r0, [r7, #4]
    5384:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    5386:	687b      	ldr	r3, [r7, #4]
    5388:	681b      	ldr	r3, [r3, #0]
    538a:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    538c:	683b      	ldr	r3, [r7, #0]
    538e:	781b      	ldrb	r3, [r3, #0]
    5390:	f003 0320 	and.w	r3, r3, #32
    5394:	b2db      	uxtb	r3, r3
    5396:	2b00      	cmp	r3, #0
    5398:	d005      	beq.n	53a6 <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    539a:	683b      	ldr	r3, [r7, #0]
    539c:	689b      	ldr	r3, [r3, #8]
    539e:	4619      	mov	r1, r3
    53a0:	68f8      	ldr	r0, [r7, #12]
    53a2:	4b13      	ldr	r3, [pc, #76]	; (53f0 <_qspi_sync_command_set_ifr+0x74>)
    53a4:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    53a6:	683b      	ldr	r3, [r7, #0]
    53a8:	781b      	ldrb	r3, [r3, #0]
    53aa:	f003 0310 	and.w	r3, r3, #16
    53ae:	b2db      	uxtb	r3, r3
    53b0:	2b00      	cmp	r3, #0
    53b2:	d005      	beq.n	53c0 <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    53b4:	683b      	ldr	r3, [r7, #0]
    53b6:	791b      	ldrb	r3, [r3, #4]
    53b8:	4619      	mov	r1, r3
    53ba:	68f8      	ldr	r0, [r7, #12]
    53bc:	4b0d      	ldr	r3, [pc, #52]	; (53f4 <_qspi_sync_command_set_ifr+0x78>)
    53be:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    53c0:	683b      	ldr	r3, [r7, #0]
    53c2:	781b      	ldrb	r3, [r3, #0]
    53c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    53c8:	b2db      	uxtb	r3, r3
    53ca:	2b00      	cmp	r3, #0
    53cc:	d005      	beq.n	53da <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    53ce:	683b      	ldr	r3, [r7, #0]
    53d0:	795b      	ldrb	r3, [r3, #5]
    53d2:	4619      	mov	r1, r3
    53d4:	68f8      	ldr	r0, [r7, #12]
    53d6:	4b08      	ldr	r3, [pc, #32]	; (53f8 <_qspi_sync_command_set_ifr+0x7c>)
    53d8:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    53da:	683b      	ldr	r3, [r7, #0]
    53dc:	681b      	ldr	r3, [r3, #0]
    53de:	4619      	mov	r1, r3
    53e0:	68f8      	ldr	r0, [r7, #12]
    53e2:	4b06      	ldr	r3, [pc, #24]	; (53fc <_qspi_sync_command_set_ifr+0x80>)
    53e4:	4798      	blx	r3
}
    53e6:	bf00      	nop
    53e8:	3710      	adds	r7, #16
    53ea:	46bd      	mov	sp, r7
    53ec:	bd80      	pop	{r7, pc}
    53ee:	bf00      	nop
    53f0:	000051b1 	.word	0x000051b1
    53f4:	000051cd 	.word	0x000051cd
    53f8:	00005201 	.word	0x00005201
    53fc:	00005239 	.word	0x00005239

00005400 <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5400:	b580      	push	{r7, lr}
    5402:	b084      	sub	sp, #16
    5404:	af00      	add	r7, sp, #0
    5406:	6078      	str	r0, [r7, #4]
    5408:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    540a:	687b      	ldr	r3, [r7, #4]
    540c:	681b      	ldr	r3, [r3, #0]
    540e:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    5410:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    5414:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    5416:	683b      	ldr	r3, [r7, #0]
    5418:	781b      	ldrb	r3, [r3, #0]
    541a:	f003 0320 	and.w	r3, r3, #32
    541e:	b2db      	uxtb	r3, r3
    5420:	2b00      	cmp	r3, #0
    5422:	d004      	beq.n	542e <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    5424:	683b      	ldr	r3, [r7, #0]
    5426:	689b      	ldr	r3, [r3, #8]
    5428:	68fa      	ldr	r2, [r7, #12]
    542a:	4413      	add	r3, r2
    542c:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    542e:	68b8      	ldr	r0, [r7, #8]
    5430:	4b18      	ldr	r3, [pc, #96]	; (5494 <_qspi_sync_run_transfer+0x94>)
    5432:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    5434:	683b      	ldr	r3, [r7, #0]
    5436:	691b      	ldr	r3, [r3, #16]
    5438:	2b00      	cmp	r3, #0
    543a:	d103      	bne.n	5444 <_qspi_sync_run_transfer+0x44>
    543c:	683b      	ldr	r3, [r7, #0]
    543e:	695b      	ldr	r3, [r3, #20]
    5440:	2b00      	cmp	r3, #0
    5442:	d001      	beq.n	5448 <_qspi_sync_run_transfer+0x48>
    5444:	2301      	movs	r3, #1
    5446:	e000      	b.n	544a <_qspi_sync_run_transfer+0x4a>
    5448:	2300      	movs	r3, #0
    544a:	f003 0301 	and.w	r3, r3, #1
    544e:	b2db      	uxtb	r3, r3
    5450:	2282      	movs	r2, #130	; 0x82
    5452:	4911      	ldr	r1, [pc, #68]	; (5498 <_qspi_sync_run_transfer+0x98>)
    5454:	4618      	mov	r0, r3
    5456:	4b11      	ldr	r3, [pc, #68]	; (549c <_qspi_sync_run_transfer+0x9c>)
    5458:	4798      	blx	r3

	if (cmd->tx_buf) {
    545a:	683b      	ldr	r3, [r7, #0]
    545c:	691b      	ldr	r3, [r3, #16]
    545e:	2b00      	cmp	r3, #0
    5460:	d008      	beq.n	5474 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    5462:	683b      	ldr	r3, [r7, #0]
    5464:	6919      	ldr	r1, [r3, #16]
    5466:	683b      	ldr	r3, [r7, #0]
    5468:	68db      	ldr	r3, [r3, #12]
    546a:	461a      	mov	r2, r3
    546c:	68f8      	ldr	r0, [r7, #12]
    546e:	4b0c      	ldr	r3, [pc, #48]	; (54a0 <_qspi_sync_run_transfer+0xa0>)
    5470:	4798      	blx	r3
    5472:	e007      	b.n	5484 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    5474:	683b      	ldr	r3, [r7, #0]
    5476:	6958      	ldr	r0, [r3, #20]
    5478:	683b      	ldr	r3, [r7, #0]
    547a:	68db      	ldr	r3, [r3, #12]
    547c:	461a      	mov	r2, r3
    547e:	68f9      	ldr	r1, [r7, #12]
    5480:	4b07      	ldr	r3, [pc, #28]	; (54a0 <_qspi_sync_run_transfer+0xa0>)
    5482:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    5484:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5488:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    548c:	bf00      	nop
    548e:	3710      	adds	r7, #16
    5490:	46bd      	mov	sp, r7
    5492:	bd80      	pop	{r7, pc}
    5494:	00005255 	.word	0x00005255
    5498:	00013154 	.word	0x00013154
    549c:	00002f09 	.word	0x00002f09
    54a0:	0000526d 	.word	0x0000526d

000054a4 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    54a4:	b580      	push	{r7, lr}
    54a6:	b082      	sub	sp, #8
    54a8:	af00      	add	r7, sp, #0
    54aa:	6078      	str	r0, [r7, #4]
    54ac:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    54ae:	6839      	ldr	r1, [r7, #0]
    54b0:	6878      	ldr	r0, [r7, #4]
    54b2:	4b14      	ldr	r3, [pc, #80]	; (5504 <_qspi_sync_serial_run_command+0x60>)
    54b4:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    54b6:	683b      	ldr	r3, [r7, #0]
    54b8:	781b      	ldrb	r3, [r3, #0]
    54ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    54be:	b2db      	uxtb	r3, r3
    54c0:	2b00      	cmp	r3, #0
    54c2:	d003      	beq.n	54cc <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    54c4:	6839      	ldr	r1, [r7, #0]
    54c6:	6878      	ldr	r0, [r7, #4]
    54c8:	4b0f      	ldr	r3, [pc, #60]	; (5508 <_qspi_sync_serial_run_command+0x64>)
    54ca:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    54cc:	687b      	ldr	r3, [r7, #4]
    54ce:	681b      	ldr	r3, [r3, #0]
    54d0:	4618      	mov	r0, r3
    54d2:	4b0e      	ldr	r3, [pc, #56]	; (550c <_qspi_sync_serial_run_command+0x68>)
    54d4:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    54d6:	bf00      	nop
    54d8:	687b      	ldr	r3, [r7, #4]
    54da:	681b      	ldr	r3, [r3, #0]
    54dc:	4618      	mov	r0, r3
    54de:	4b0c      	ldr	r3, [pc, #48]	; (5510 <_qspi_sync_serial_run_command+0x6c>)
    54e0:	4798      	blx	r3
    54e2:	4603      	mov	r3, r0
    54e4:	f083 0301 	eor.w	r3, r3, #1
    54e8:	b2db      	uxtb	r3, r3
    54ea:	2b00      	cmp	r3, #0
    54ec:	d1f4      	bne.n	54d8 <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    54ee:	687b      	ldr	r3, [r7, #4]
    54f0:	681b      	ldr	r3, [r3, #0]
    54f2:	4618      	mov	r0, r3
    54f4:	4b07      	ldr	r3, [pc, #28]	; (5514 <_qspi_sync_serial_run_command+0x70>)
    54f6:	4798      	blx	r3
	return ERR_NONE;
    54f8:	2300      	movs	r3, #0
}
    54fa:	4618      	mov	r0, r3
    54fc:	3708      	adds	r7, #8
    54fe:	46bd      	mov	sp, r7
    5500:	bd80      	pop	{r7, pc}
    5502:	bf00      	nop
    5504:	0000537d 	.word	0x0000537d
    5508:	00005401 	.word	0x00005401
    550c:	000052a1 	.word	0x000052a1
    5510:	00005119 	.word	0x00005119
    5514:	00005141 	.word	0x00005141

00005518 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    5518:	b480      	push	{r7}
    551a:	b083      	sub	sp, #12
    551c:	af00      	add	r7, sp, #0
    551e:	6078      	str	r0, [r7, #4]
    5520:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    5522:	bf00      	nop
    5524:	687b      	ldr	r3, [r7, #4]
    5526:	691a      	ldr	r2, [r3, #16]
    5528:	683b      	ldr	r3, [r7, #0]
    552a:	4013      	ands	r3, r2
    552c:	2b00      	cmp	r3, #0
    552e:	d1f9      	bne.n	5524 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    5530:	bf00      	nop
    5532:	370c      	adds	r7, #12
    5534:	46bd      	mov	sp, r7
    5536:	f85d 7b04 	ldr.w	r7, [sp], #4
    553a:	4770      	bx	lr

0000553c <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    553c:	b480      	push	{r7}
    553e:	b083      	sub	sp, #12
    5540:	af00      	add	r7, sp, #0
    5542:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    5544:	687b      	ldr	r3, [r7, #4]
    5546:	f44f 7280 	mov.w	r2, #256	; 0x100
    554a:	819a      	strh	r2, [r3, #12]
}
    554c:	bf00      	nop
    554e:	370c      	adds	r7, #12
    5550:	46bd      	mov	sp, r7
    5552:	f85d 7b04 	ldr.w	r7, [sp], #4
    5556:	4770      	bx	lr

00005558 <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    5558:	b480      	push	{r7}
    555a:	b083      	sub	sp, #12
    555c:	af00      	add	r7, sp, #0
    555e:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    5560:	687b      	ldr	r3, [r7, #4]
    5562:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    5566:	819a      	strh	r2, [r3, #12]
}
    5568:	bf00      	nop
    556a:	370c      	adds	r7, #12
    556c:	46bd      	mov	sp, r7
    556e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5572:	4770      	bx	lr

00005574 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    5574:	b480      	push	{r7}
    5576:	b083      	sub	sp, #12
    5578:	af00      	add	r7, sp, #0
    557a:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    557c:	687b      	ldr	r3, [r7, #4]
    557e:	899b      	ldrh	r3, [r3, #12]
    5580:	b29b      	uxth	r3, r3
}
    5582:	4618      	mov	r0, r3
    5584:	370c      	adds	r7, #12
    5586:	46bd      	mov	sp, r7
    5588:	f85d 7b04 	ldr.w	r7, [sp], #4
    558c:	4770      	bx	lr

0000558e <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    558e:	b480      	push	{r7}
    5590:	b083      	sub	sp, #12
    5592:	af00      	add	r7, sp, #0
    5594:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    5596:	687b      	ldr	r3, [r7, #4]
    5598:	895b      	ldrh	r3, [r3, #10]
    559a:	b29b      	uxth	r3, r3
}
    559c:	4618      	mov	r0, r3
    559e:	370c      	adds	r7, #12
    55a0:	46bd      	mov	sp, r7
    55a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    55a6:	4770      	bx	lr

000055a8 <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    55a8:	b580      	push	{r7, lr}
    55aa:	b082      	sub	sp, #8
    55ac:	af00      	add	r7, sp, #0
    55ae:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    55b0:	687b      	ldr	r3, [r7, #4]
    55b2:	881b      	ldrh	r3, [r3, #0]
    55b4:	b29b      	uxth	r3, r3
    55b6:	f043 0301 	orr.w	r3, r3, #1
    55ba:	b29a      	uxth	r2, r3
    55bc:	687b      	ldr	r3, [r7, #4]
    55be:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    55c0:	2101      	movs	r1, #1
    55c2:	6878      	ldr	r0, [r7, #4]
    55c4:	4b02      	ldr	r3, [pc, #8]	; (55d0 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    55c6:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    55c8:	bf00      	nop
    55ca:	3708      	adds	r7, #8
    55cc:	46bd      	mov	sp, r7
    55ce:	bd80      	pop	{r7, pc}
    55d0:	00005519 	.word	0x00005519

000055d4 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    55d4:	b580      	push	{r7, lr}
    55d6:	b084      	sub	sp, #16
    55d8:	af00      	add	r7, sp, #0
    55da:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    55dc:	f248 0103 	movw	r1, #32771	; 0x8003
    55e0:	6878      	ldr	r0, [r7, #4]
    55e2:	4b0a      	ldr	r3, [pc, #40]	; (560c <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    55e4:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    55e6:	687b      	ldr	r3, [r7, #4]
    55e8:	881b      	ldrh	r3, [r3, #0]
    55ea:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    55ec:	89fb      	ldrh	r3, [r7, #14]
    55ee:	085b      	lsrs	r3, r3, #1
    55f0:	b29b      	uxth	r3, r3
    55f2:	f003 0301 	and.w	r3, r3, #1
    55f6:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    55f8:	89fb      	ldrh	r3, [r7, #14]
    55fa:	2b00      	cmp	r3, #0
    55fc:	bf14      	ite	ne
    55fe:	2301      	movne	r3, #1
    5600:	2300      	moveq	r3, #0
    5602:	b2db      	uxtb	r3, r3
}
    5604:	4618      	mov	r0, r3
    5606:	3710      	adds	r7, #16
    5608:	46bd      	mov	sp, r7
    560a:	bd80      	pop	{r7, pc}
    560c:	00005519 	.word	0x00005519

00005610 <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5610:	b580      	push	{r7, lr}
    5612:	b082      	sub	sp, #8
    5614:	af00      	add	r7, sp, #0
    5616:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    5618:	687b      	ldr	r3, [r7, #4]
    561a:	881b      	ldrh	r3, [r3, #0]
    561c:	b29b      	uxth	r3, r3
    561e:	f023 0302 	bic.w	r3, r3, #2
    5622:	b29a      	uxth	r2, r3
    5624:	687b      	ldr	r3, [r7, #4]
    5626:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5628:	f248 0103 	movw	r1, #32771	; 0x8003
    562c:	6878      	ldr	r0, [r7, #4]
    562e:	4b03      	ldr	r3, [pc, #12]	; (563c <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    5630:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5632:	bf00      	nop
    5634:	3708      	adds	r7, #8
    5636:	46bd      	mov	sp, r7
    5638:	bd80      	pop	{r7, pc}
    563a:	bf00      	nop
    563c:	00005519 	.word	0x00005519

00005640 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    5640:	b580      	push	{r7, lr}
    5642:	b082      	sub	sp, #8
    5644:	af00      	add	r7, sp, #0
    5646:	6078      	str	r0, [r7, #4]
    5648:	460b      	mov	r3, r1
    564a:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    564c:	687b      	ldr	r3, [r7, #4]
    564e:	887a      	ldrh	r2, [r7, #2]
    5650:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5652:	f248 0103 	movw	r1, #32771	; 0x8003
    5656:	6878      	ldr	r0, [r7, #4]
    5658:	4b02      	ldr	r3, [pc, #8]	; (5664 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    565a:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    565c:	bf00      	nop
    565e:	3708      	adds	r7, #8
    5660:	46bd      	mov	sp, r7
    5662:	bd80      	pop	{r7, pc}
    5664:	00005519 	.word	0x00005519

00005668 <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    5668:	b480      	push	{r7}
    566a:	b083      	sub	sp, #12
    566c:	af00      	add	r7, sp, #0
    566e:	6078      	str	r0, [r7, #4]
    5670:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    5672:	687b      	ldr	r3, [r7, #4]
    5674:	683a      	ldr	r2, [r7, #0]
    5676:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    5678:	bf00      	nop
    567a:	370c      	adds	r7, #12
    567c:	46bd      	mov	sp, r7
    567e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5682:	4770      	bx	lr

00005684 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    5684:	b580      	push	{r7, lr}
    5686:	b082      	sub	sp, #8
    5688:	af00      	add	r7, sp, #0
    568a:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    568c:	687b      	ldr	r3, [r7, #4]
    568e:	2b00      	cmp	r3, #0
    5690:	d005      	beq.n	569e <_calendar_init+0x1a>
    5692:	687b      	ldr	r3, [r7, #4]
    5694:	681b      	ldr	r3, [r3, #0]
    5696:	2b00      	cmp	r3, #0
    5698:	d001      	beq.n	569e <_calendar_init+0x1a>
    569a:	2301      	movs	r3, #1
    569c:	e000      	b.n	56a0 <_calendar_init+0x1c>
    569e:	2300      	movs	r3, #0
    56a0:	f003 0301 	and.w	r3, r3, #1
    56a4:	b2db      	uxtb	r3, r3
    56a6:	222f      	movs	r2, #47	; 0x2f
    56a8:	491e      	ldr	r1, [pc, #120]	; (5724 <_calendar_init+0xa0>)
    56aa:	4618      	mov	r0, r3
    56ac:	4b1e      	ldr	r3, [pc, #120]	; (5728 <_calendar_init+0xa4>)
    56ae:	4798      	blx	r3

	_rtc_dev = dev;
    56b0:	4a1e      	ldr	r2, [pc, #120]	; (572c <_calendar_init+0xa8>)
    56b2:	687b      	ldr	r3, [r7, #4]
    56b4:	6013      	str	r3, [r2, #0]

	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    56b6:	687b      	ldr	r3, [r7, #4]
    56b8:	681b      	ldr	r3, [r3, #0]
    56ba:	2101      	movs	r1, #1
    56bc:	4618      	mov	r0, r3
    56be:	4b1c      	ldr	r3, [pc, #112]	; (5730 <_calendar_init+0xac>)
    56c0:	4798      	blx	r3
	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    56c2:	687b      	ldr	r3, [r7, #4]
    56c4:	681b      	ldr	r3, [r3, #0]
    56c6:	4618      	mov	r0, r3
    56c8:	4b1a      	ldr	r3, [pc, #104]	; (5734 <_calendar_init+0xb0>)
    56ca:	4798      	blx	r3
    56cc:	4603      	mov	r3, r0
    56ce:	2b00      	cmp	r3, #0
    56d0:	d00a      	beq.n	56e8 <_calendar_init+0x64>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    56d2:	687b      	ldr	r3, [r7, #4]
    56d4:	681b      	ldr	r3, [r3, #0]
    56d6:	4618      	mov	r0, r3
    56d8:	4b17      	ldr	r3, [pc, #92]	; (5738 <_calendar_init+0xb4>)
    56da:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    56dc:	687b      	ldr	r3, [r7, #4]
    56de:	681b      	ldr	r3, [r3, #0]
    56e0:	2102      	movs	r1, #2
    56e2:	4618      	mov	r0, r3
    56e4:	4b12      	ldr	r3, [pc, #72]	; (5730 <_calendar_init+0xac>)
    56e6:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    56e8:	687b      	ldr	r3, [r7, #4]
    56ea:	681b      	ldr	r3, [r3, #0]
    56ec:	4618      	mov	r0, r3
    56ee:	4b13      	ldr	r3, [pc, #76]	; (573c <_calendar_init+0xb8>)
    56f0:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    56f2:	687b      	ldr	r3, [r7, #4]
    56f4:	681b      	ldr	r3, [r3, #0]
    56f6:	2101      	movs	r1, #1
    56f8:	4618      	mov	r0, r3
    56fa:	4b0d      	ldr	r3, [pc, #52]	; (5730 <_calendar_init+0xac>)
    56fc:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    56fe:	687b      	ldr	r3, [r7, #4]
    5700:	681b      	ldr	r3, [r3, #0]
    5702:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    5706:	4618      	mov	r0, r3
    5708:	4b0d      	ldr	r3, [pc, #52]	; (5740 <_calendar_init+0xbc>)
    570a:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    570c:	687b      	ldr	r3, [r7, #4]
    570e:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    5710:	2100      	movs	r1, #0
    5712:	4618      	mov	r0, r3
    5714:	4b0b      	ldr	r3, [pc, #44]	; (5744 <_calendar_init+0xc0>)
    5716:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    5718:	2300      	movs	r3, #0
}
    571a:	4618      	mov	r0, r3
    571c:	3708      	adds	r7, #8
    571e:	46bd      	mov	sp, r7
    5720:	bd80      	pop	{r7, pc}
    5722:	bf00      	nop
    5724:	0001316c 	.word	0x0001316c
    5728:	00002f09 	.word	0x00002f09
    572c:	20001468 	.word	0x20001468
    5730:	00005519 	.word	0x00005519
    5734:	000055d5 	.word	0x000055d5
    5738:	00005611 	.word	0x00005611
    573c:	000055a9 	.word	0x000055a9
    5740:	00005641 	.word	0x00005641
    5744:	00005669 	.word	0x00005669

00005748 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    5748:	b580      	push	{r7, lr}
    574a:	b084      	sub	sp, #16
    574c:	af00      	add	r7, sp, #0
    574e:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    5750:	687b      	ldr	r3, [r7, #4]
    5752:	681b      	ldr	r3, [r3, #0]
    5754:	4618      	mov	r0, r3
    5756:	4b19      	ldr	r3, [pc, #100]	; (57bc <_rtc_interrupt_handler+0x74>)
    5758:	4798      	blx	r3
    575a:	4603      	mov	r3, r0
    575c:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    575e:	687b      	ldr	r3, [r7, #4]
    5760:	681b      	ldr	r3, [r3, #0]
    5762:	4618      	mov	r0, r3
    5764:	4b16      	ldr	r3, [pc, #88]	; (57c0 <_rtc_interrupt_handler+0x78>)
    5766:	4798      	blx	r3
    5768:	4603      	mov	r3, r0
    576a:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    576c:	89fa      	ldrh	r2, [r7, #14]
    576e:	89bb      	ldrh	r3, [r7, #12]
    5770:	4013      	ands	r3, r2
    5772:	b29b      	uxth	r3, r3
    5774:	f403 7380 	and.w	r3, r3, #256	; 0x100
    5778:	2b00      	cmp	r3, #0
    577a:	d009      	beq.n	5790 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    577c:	687b      	ldr	r3, [r7, #4]
    577e:	685b      	ldr	r3, [r3, #4]
    5780:	6878      	ldr	r0, [r7, #4]
    5782:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    5784:	687b      	ldr	r3, [r7, #4]
    5786:	681b      	ldr	r3, [r3, #0]
    5788:	4618      	mov	r0, r3
    578a:	4b0e      	ldr	r3, [pc, #56]	; (57c4 <_rtc_interrupt_handler+0x7c>)
    578c:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    578e:	e010      	b.n	57b2 <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    5790:	89fa      	ldrh	r2, [r7, #14]
    5792:	89bb      	ldrh	r3, [r7, #12]
    5794:	4013      	ands	r3, r2
    5796:	b29b      	uxth	r3, r3
    5798:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    579c:	2b00      	cmp	r3, #0
    579e:	d008      	beq.n	57b2 <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    57a0:	687b      	ldr	r3, [r7, #4]
    57a2:	689b      	ldr	r3, [r3, #8]
    57a4:	6878      	ldr	r0, [r7, #4]
    57a6:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    57a8:	687b      	ldr	r3, [r7, #4]
    57aa:	681b      	ldr	r3, [r3, #0]
    57ac:	4618      	mov	r0, r3
    57ae:	4b06      	ldr	r3, [pc, #24]	; (57c8 <_rtc_interrupt_handler+0x80>)
    57b0:	4798      	blx	r3
}
    57b2:	bf00      	nop
    57b4:	3710      	adds	r7, #16
    57b6:	46bd      	mov	sp, r7
    57b8:	bd80      	pop	{r7, pc}
    57ba:	bf00      	nop
    57bc:	00005575 	.word	0x00005575
    57c0:	0000558f 	.word	0x0000558f
    57c4:	0000553d 	.word	0x0000553d
    57c8:	00005559 	.word	0x00005559

000057cc <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    57cc:	b580      	push	{r7, lr}
    57ce:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    57d0:	4b03      	ldr	r3, [pc, #12]	; (57e0 <RTC_Handler+0x14>)
    57d2:	681b      	ldr	r3, [r3, #0]
    57d4:	4618      	mov	r0, r3
    57d6:	4b03      	ldr	r3, [pc, #12]	; (57e4 <RTC_Handler+0x18>)
    57d8:	4798      	blx	r3
}
    57da:	bf00      	nop
    57dc:	bd80      	pop	{r7, pc}
    57de:	bf00      	nop
    57e0:	20001468 	.word	0x20001468
    57e4:	00005749 	.word	0x00005749

000057e8 <__NVIC_EnableIRQ>:
{
    57e8:	b480      	push	{r7}
    57ea:	b083      	sub	sp, #12
    57ec:	af00      	add	r7, sp, #0
    57ee:	4603      	mov	r3, r0
    57f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    57f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    57f6:	2b00      	cmp	r3, #0
    57f8:	db0b      	blt.n	5812 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    57fa:	4909      	ldr	r1, [pc, #36]	; (5820 <__NVIC_EnableIRQ+0x38>)
    57fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5800:	095b      	lsrs	r3, r3, #5
    5802:	88fa      	ldrh	r2, [r7, #6]
    5804:	f002 021f 	and.w	r2, r2, #31
    5808:	2001      	movs	r0, #1
    580a:	fa00 f202 	lsl.w	r2, r0, r2
    580e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5812:	bf00      	nop
    5814:	370c      	adds	r7, #12
    5816:	46bd      	mov	sp, r7
    5818:	f85d 7b04 	ldr.w	r7, [sp], #4
    581c:	4770      	bx	lr
    581e:	bf00      	nop
    5820:	e000e100 	.word	0xe000e100

00005824 <__NVIC_DisableIRQ>:
{
    5824:	b480      	push	{r7}
    5826:	b083      	sub	sp, #12
    5828:	af00      	add	r7, sp, #0
    582a:	4603      	mov	r3, r0
    582c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    582e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5832:	2b00      	cmp	r3, #0
    5834:	db10      	blt.n	5858 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5836:	490b      	ldr	r1, [pc, #44]	; (5864 <__NVIC_DisableIRQ+0x40>)
    5838:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    583c:	095b      	lsrs	r3, r3, #5
    583e:	88fa      	ldrh	r2, [r7, #6]
    5840:	f002 021f 	and.w	r2, r2, #31
    5844:	2001      	movs	r0, #1
    5846:	fa00 f202 	lsl.w	r2, r0, r2
    584a:	3320      	adds	r3, #32
    584c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    5850:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5854:	f3bf 8f6f 	isb	sy
}
    5858:	bf00      	nop
    585a:	370c      	adds	r7, #12
    585c:	46bd      	mov	sp, r7
    585e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5862:	4770      	bx	lr
    5864:	e000e100 	.word	0xe000e100

00005868 <__NVIC_ClearPendingIRQ>:
{
    5868:	b480      	push	{r7}
    586a:	b083      	sub	sp, #12
    586c:	af00      	add	r7, sp, #0
    586e:	4603      	mov	r3, r0
    5870:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5872:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5876:	2b00      	cmp	r3, #0
    5878:	db0c      	blt.n	5894 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    587a:	4909      	ldr	r1, [pc, #36]	; (58a0 <__NVIC_ClearPendingIRQ+0x38>)
    587c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5880:	095b      	lsrs	r3, r3, #5
    5882:	88fa      	ldrh	r2, [r7, #6]
    5884:	f002 021f 	and.w	r2, r2, #31
    5888:	2001      	movs	r0, #1
    588a:	fa00 f202 	lsl.w	r2, r0, r2
    588e:	3360      	adds	r3, #96	; 0x60
    5890:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5894:	bf00      	nop
    5896:	370c      	adds	r7, #12
    5898:	46bd      	mov	sp, r7
    589a:	f85d 7b04 	ldr.w	r7, [sp], #4
    589e:	4770      	bx	lr
    58a0:	e000e100 	.word	0xe000e100

000058a4 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    58a4:	b480      	push	{r7}
    58a6:	b083      	sub	sp, #12
    58a8:	af00      	add	r7, sp, #0
    58aa:	6078      	str	r0, [r7, #4]
    58ac:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    58ae:	bf00      	nop
    58b0:	687b      	ldr	r3, [r7, #4]
    58b2:	69da      	ldr	r2, [r3, #28]
    58b4:	683b      	ldr	r3, [r7, #0]
    58b6:	4013      	ands	r3, r2
    58b8:	2b00      	cmp	r3, #0
    58ba:	d1f9      	bne.n	58b0 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    58bc:	bf00      	nop
    58be:	370c      	adds	r7, #12
    58c0:	46bd      	mov	sp, r7
    58c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    58c6:	4770      	bx	lr

000058c8 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    58c8:	b480      	push	{r7}
    58ca:	b083      	sub	sp, #12
    58cc:	af00      	add	r7, sp, #0
    58ce:	6078      	str	r0, [r7, #4]
    58d0:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    58d2:	687b      	ldr	r3, [r7, #4]
    58d4:	69da      	ldr	r2, [r3, #28]
    58d6:	683b      	ldr	r3, [r7, #0]
    58d8:	4013      	ands	r3, r2
    58da:	2b00      	cmp	r3, #0
    58dc:	bf14      	ite	ne
    58de:	2301      	movne	r3, #1
    58e0:	2300      	moveq	r3, #0
    58e2:	b2db      	uxtb	r3, r3
}
    58e4:	4618      	mov	r0, r3
    58e6:	370c      	adds	r7, #12
    58e8:	46bd      	mov	sp, r7
    58ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    58ee:	4770      	bx	lr

000058f0 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    58f0:	b480      	push	{r7}
    58f2:	b083      	sub	sp, #12
    58f4:	af00      	add	r7, sp, #0
    58f6:	6078      	str	r0, [r7, #4]
    58f8:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    58fa:	bf00      	nop
    58fc:	687b      	ldr	r3, [r7, #4]
    58fe:	69da      	ldr	r2, [r3, #28]
    5900:	683b      	ldr	r3, [r7, #0]
    5902:	4013      	ands	r3, r2
    5904:	2b00      	cmp	r3, #0
    5906:	d1f9      	bne.n	58fc <hri_sercomspi_wait_for_sync+0xc>
	};
}
    5908:	bf00      	nop
    590a:	370c      	adds	r7, #12
    590c:	46bd      	mov	sp, r7
    590e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5912:	4770      	bx	lr

00005914 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    5914:	b480      	push	{r7}
    5916:	b083      	sub	sp, #12
    5918:	af00      	add	r7, sp, #0
    591a:	6078      	str	r0, [r7, #4]
    591c:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    591e:	687b      	ldr	r3, [r7, #4]
    5920:	69da      	ldr	r2, [r3, #28]
    5922:	683b      	ldr	r3, [r7, #0]
    5924:	4013      	ands	r3, r2
    5926:	2b00      	cmp	r3, #0
    5928:	bf14      	ite	ne
    592a:	2301      	movne	r3, #1
    592c:	2300      	moveq	r3, #0
    592e:	b2db      	uxtb	r3, r3
}
    5930:	4618      	mov	r0, r3
    5932:	370c      	adds	r7, #12
    5934:	46bd      	mov	sp, r7
    5936:	f85d 7b04 	ldr.w	r7, [sp], #4
    593a:	4770      	bx	lr

0000593c <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    593c:	b480      	push	{r7}
    593e:	b083      	sub	sp, #12
    5940:	af00      	add	r7, sp, #0
    5942:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    5944:	687b      	ldr	r3, [r7, #4]
    5946:	2201      	movs	r2, #1
    5948:	761a      	strb	r2, [r3, #24]
}
    594a:	bf00      	nop
    594c:	370c      	adds	r7, #12
    594e:	46bd      	mov	sp, r7
    5950:	f85d 7b04 	ldr.w	r7, [sp], #4
    5954:	4770      	bx	lr

00005956 <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    5956:	b480      	push	{r7}
    5958:	b083      	sub	sp, #12
    595a:	af00      	add	r7, sp, #0
    595c:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    595e:	687b      	ldr	r3, [r7, #4]
    5960:	2202      	movs	r2, #2
    5962:	761a      	strb	r2, [r3, #24]
}
    5964:	bf00      	nop
    5966:	370c      	adds	r7, #12
    5968:	46bd      	mov	sp, r7
    596a:	f85d 7b04 	ldr.w	r7, [sp], #4
    596e:	4770      	bx	lr

00005970 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    5970:	b480      	push	{r7}
    5972:	b083      	sub	sp, #12
    5974:	af00      	add	r7, sp, #0
    5976:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    5978:	687b      	ldr	r3, [r7, #4]
    597a:	7e1b      	ldrb	r3, [r3, #24]
    597c:	b2db      	uxtb	r3, r3
}
    597e:	4618      	mov	r0, r3
    5980:	370c      	adds	r7, #12
    5982:	46bd      	mov	sp, r7
    5984:	f85d 7b04 	ldr.w	r7, [sp], #4
    5988:	4770      	bx	lr

0000598a <hri_sercomi2cm_clear_INTFLAG_reg>:

static inline void hri_sercomi2cm_clear_INTFLAG_reg(const void *const hw, hri_sercomi2cm_intflag_reg_t mask)
{
    598a:	b480      	push	{r7}
    598c:	b083      	sub	sp, #12
    598e:	af00      	add	r7, sp, #0
    5990:	6078      	str	r0, [r7, #4]
    5992:	460b      	mov	r3, r1
    5994:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->I2CM.INTFLAG.reg = mask;
    5996:	687b      	ldr	r3, [r7, #4]
    5998:	78fa      	ldrb	r2, [r7, #3]
    599a:	761a      	strb	r2, [r3, #24]
}
    599c:	bf00      	nop
    599e:	370c      	adds	r7, #12
    59a0:	46bd      	mov	sp, r7
    59a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    59a6:	4770      	bx	lr

000059a8 <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    59a8:	b480      	push	{r7}
    59aa:	b085      	sub	sp, #20
    59ac:	af00      	add	r7, sp, #0
    59ae:	6078      	str	r0, [r7, #4]
    59b0:	460b      	mov	r3, r1
    59b2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    59b4:	687b      	ldr	r3, [r7, #4]
    59b6:	7e1b      	ldrb	r3, [r3, #24]
    59b8:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    59ba:	7bfa      	ldrb	r2, [r7, #15]
    59bc:	78fb      	ldrb	r3, [r7, #3]
    59be:	4013      	ands	r3, r2
    59c0:	73fb      	strb	r3, [r7, #15]
	return tmp;
    59c2:	7bfb      	ldrb	r3, [r7, #15]
}
    59c4:	4618      	mov	r0, r3
    59c6:	3714      	adds	r7, #20
    59c8:	46bd      	mov	sp, r7
    59ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    59ce:	4770      	bx	lr

000059d0 <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    59d0:	b480      	push	{r7}
    59d2:	b083      	sub	sp, #12
    59d4:	af00      	add	r7, sp, #0
    59d6:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    59d8:	687b      	ldr	r3, [r7, #4]
    59da:	7e1b      	ldrb	r3, [r3, #24]
    59dc:	b2db      	uxtb	r3, r3
}
    59de:	4618      	mov	r0, r3
    59e0:	370c      	adds	r7, #12
    59e2:	46bd      	mov	sp, r7
    59e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    59e8:	4770      	bx	lr

000059ea <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    59ea:	b480      	push	{r7}
    59ec:	b083      	sub	sp, #12
    59ee:	af00      	add	r7, sp, #0
    59f0:	6078      	str	r0, [r7, #4]
    59f2:	460b      	mov	r3, r1
    59f4:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    59f6:	687b      	ldr	r3, [r7, #4]
    59f8:	78fa      	ldrb	r2, [r7, #3]
    59fa:	761a      	strb	r2, [r3, #24]
}
    59fc:	bf00      	nop
    59fe:	370c      	adds	r7, #12
    5a00:	46bd      	mov	sp, r7
    5a02:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a06:	4770      	bx	lr

00005a08 <hri_sercomspi_set_INTEN_DRE_bit>:
{
	((Sercom *)hw)->I2CS.INTENCLR.reg = mask;
}

static inline void hri_sercomspi_set_INTEN_DRE_bit(const void *const hw)
{
    5a08:	b480      	push	{r7}
    5a0a:	b083      	sub	sp, #12
    5a0c:	af00      	add	r7, sp, #0
    5a0e:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    5a10:	687b      	ldr	r3, [r7, #4]
    5a12:	2201      	movs	r2, #1
    5a14:	759a      	strb	r2, [r3, #22]
}
    5a16:	bf00      	nop
    5a18:	370c      	adds	r7, #12
    5a1a:	46bd      	mov	sp, r7
    5a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a20:	4770      	bx	lr

00005a22 <hri_sercomspi_clear_INTEN_DRE_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
	}
}

static inline void hri_sercomspi_clear_INTEN_DRE_bit(const void *const hw)
{
    5a22:	b480      	push	{r7}
    5a24:	b083      	sub	sp, #12
    5a26:	af00      	add	r7, sp, #0
    5a28:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    5a2a:	687b      	ldr	r3, [r7, #4]
    5a2c:	2201      	movs	r2, #1
    5a2e:	751a      	strb	r2, [r3, #20]
}
    5a30:	bf00      	nop
    5a32:	370c      	adds	r7, #12
    5a34:	46bd      	mov	sp, r7
    5a36:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a3a:	4770      	bx	lr

00005a3c <hri_sercomspi_set_INTEN_TXC_bit>:

static inline void hri_sercomspi_set_INTEN_TXC_bit(const void *const hw)
{
    5a3c:	b480      	push	{r7}
    5a3e:	b083      	sub	sp, #12
    5a40:	af00      	add	r7, sp, #0
    5a42:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    5a44:	687b      	ldr	r3, [r7, #4]
    5a46:	2202      	movs	r2, #2
    5a48:	759a      	strb	r2, [r3, #22]
}
    5a4a:	bf00      	nop
    5a4c:	370c      	adds	r7, #12
    5a4e:	46bd      	mov	sp, r7
    5a50:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a54:	4770      	bx	lr

00005a56 <hri_sercomspi_clear_INTEN_TXC_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
	}
}

static inline void hri_sercomspi_clear_INTEN_TXC_bit(const void *const hw)
{
    5a56:	b480      	push	{r7}
    5a58:	b083      	sub	sp, #12
    5a5a:	af00      	add	r7, sp, #0
    5a5c:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    5a5e:	687b      	ldr	r3, [r7, #4]
    5a60:	2202      	movs	r2, #2
    5a62:	751a      	strb	r2, [r3, #20]
}
    5a64:	bf00      	nop
    5a66:	370c      	adds	r7, #12
    5a68:	46bd      	mov	sp, r7
    5a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a6e:	4770      	bx	lr

00005a70 <hri_sercomspi_set_INTEN_RXC_bit>:

static inline void hri_sercomspi_set_INTEN_RXC_bit(const void *const hw)
{
    5a70:	b480      	push	{r7}
    5a72:	b083      	sub	sp, #12
    5a74:	af00      	add	r7, sp, #0
    5a76:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    5a78:	687b      	ldr	r3, [r7, #4]
    5a7a:	2204      	movs	r2, #4
    5a7c:	759a      	strb	r2, [r3, #22]
}
    5a7e:	bf00      	nop
    5a80:	370c      	adds	r7, #12
    5a82:	46bd      	mov	sp, r7
    5a84:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a88:	4770      	bx	lr

00005a8a <hri_sercomspi_clear_INTEN_RXC_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
	}
}

static inline void hri_sercomspi_clear_INTEN_RXC_bit(const void *const hw)
{
    5a8a:	b480      	push	{r7}
    5a8c:	b083      	sub	sp, #12
    5a8e:	af00      	add	r7, sp, #0
    5a90:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    5a92:	687b      	ldr	r3, [r7, #4]
    5a94:	2204      	movs	r2, #4
    5a96:	751a      	strb	r2, [r3, #20]
}
    5a98:	bf00      	nop
    5a9a:	370c      	adds	r7, #12
    5a9c:	46bd      	mov	sp, r7
    5a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5aa2:	4770      	bx	lr

00005aa4 <hri_sercomspi_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomspi_intenset_reg_t hri_sercomspi_read_INTEN_reg(const void *const hw)
{
    5aa4:	b480      	push	{r7}
    5aa6:	b083      	sub	sp, #12
    5aa8:	af00      	add	r7, sp, #0
    5aaa:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    5aac:	687b      	ldr	r3, [r7, #4]
    5aae:	7d9b      	ldrb	r3, [r3, #22]
    5ab0:	b2db      	uxtb	r3, r3
}
    5ab2:	4618      	mov	r0, r3
    5ab4:	370c      	adds	r7, #12
    5ab6:	46bd      	mov	sp, r7
    5ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
    5abc:	4770      	bx	lr
	...

00005ac0 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5ac0:	b580      	push	{r7, lr}
    5ac2:	b082      	sub	sp, #8
    5ac4:	af00      	add	r7, sp, #0
    5ac6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    5ac8:	687b      	ldr	r3, [r7, #4]
    5aca:	681b      	ldr	r3, [r3, #0]
    5acc:	f023 0202 	bic.w	r2, r3, #2
    5ad0:	687b      	ldr	r3, [r7, #4]
    5ad2:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5ad4:	2103      	movs	r1, #3
    5ad6:	6878      	ldr	r0, [r7, #4]
    5ad8:	4b02      	ldr	r3, [pc, #8]	; (5ae4 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    5ada:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5adc:	bf00      	nop
    5ade:	3708      	adds	r7, #8
    5ae0:	46bd      	mov	sp, r7
    5ae2:	bd80      	pop	{r7, pc}
    5ae4:	000058a5 	.word	0x000058a5

00005ae8 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    5ae8:	b480      	push	{r7}
    5aea:	b085      	sub	sp, #20
    5aec:	af00      	add	r7, sp, #0
    5aee:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    5af0:	687b      	ldr	r3, [r7, #4]
    5af2:	681b      	ldr	r3, [r3, #0]
    5af4:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    5af6:	68fb      	ldr	r3, [r7, #12]
    5af8:	0edb      	lsrs	r3, r3, #27
    5afa:	f003 0301 	and.w	r3, r3, #1
    5afe:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    5b00:	68fb      	ldr	r3, [r7, #12]
    5b02:	2b00      	cmp	r3, #0
    5b04:	bf14      	ite	ne
    5b06:	2301      	movne	r3, #1
    5b08:	2300      	moveq	r3, #0
    5b0a:	b2db      	uxtb	r3, r3
}
    5b0c:	4618      	mov	r0, r3
    5b0e:	3714      	adds	r7, #20
    5b10:	46bd      	mov	sp, r7
    5b12:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b16:	4770      	bx	lr

00005b18 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    5b18:	b580      	push	{r7, lr}
    5b1a:	b084      	sub	sp, #16
    5b1c:	af00      	add	r7, sp, #0
    5b1e:	6078      	str	r0, [r7, #4]
    5b20:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5b22:	2103      	movs	r1, #3
    5b24:	6878      	ldr	r0, [r7, #4]
    5b26:	4b07      	ldr	r3, [pc, #28]	; (5b44 <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    5b28:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    5b2a:	687b      	ldr	r3, [r7, #4]
    5b2c:	681b      	ldr	r3, [r3, #0]
    5b2e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    5b30:	68fa      	ldr	r2, [r7, #12]
    5b32:	683b      	ldr	r3, [r7, #0]
    5b34:	4013      	ands	r3, r2
    5b36:	60fb      	str	r3, [r7, #12]
	return tmp;
    5b38:	68fb      	ldr	r3, [r7, #12]
}
    5b3a:	4618      	mov	r0, r3
    5b3c:	3710      	adds	r7, #16
    5b3e:	46bd      	mov	sp, r7
    5b40:	bd80      	pop	{r7, pc}
    5b42:	bf00      	nop
    5b44:	000058a5 	.word	0x000058a5

00005b48 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    5b48:	b580      	push	{r7, lr}
    5b4a:	b082      	sub	sp, #8
    5b4c:	af00      	add	r7, sp, #0
    5b4e:	6078      	str	r0, [r7, #4]
    5b50:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    5b52:	687b      	ldr	r3, [r7, #4]
    5b54:	683a      	ldr	r2, [r7, #0]
    5b56:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5b58:	2103      	movs	r1, #3
    5b5a:	6878      	ldr	r0, [r7, #4]
    5b5c:	4b02      	ldr	r3, [pc, #8]	; (5b68 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    5b5e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5b60:	bf00      	nop
    5b62:	3708      	adds	r7, #8
    5b64:	46bd      	mov	sp, r7
    5b66:	bd80      	pop	{r7, pc}
    5b68:	000058a5 	.word	0x000058a5

00005b6c <hri_sercomspi_get_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    5b6c:	b580      	push	{r7, lr}
    5b6e:	b084      	sub	sp, #16
    5b70:	af00      	add	r7, sp, #0
    5b72:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5b74:	2103      	movs	r1, #3
    5b76:	6878      	ldr	r0, [r7, #4]
    5b78:	4b09      	ldr	r3, [pc, #36]	; (5ba0 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    5b7a:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    5b7c:	687b      	ldr	r3, [r7, #4]
    5b7e:	681b      	ldr	r3, [r3, #0]
    5b80:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    5b82:	68fb      	ldr	r3, [r7, #12]
    5b84:	085b      	lsrs	r3, r3, #1
    5b86:	f003 0301 	and.w	r3, r3, #1
    5b8a:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    5b8c:	68fb      	ldr	r3, [r7, #12]
    5b8e:	2b00      	cmp	r3, #0
    5b90:	bf14      	ite	ne
    5b92:	2301      	movne	r3, #1
    5b94:	2300      	moveq	r3, #0
    5b96:	b2db      	uxtb	r3, r3
}
    5b98:	4618      	mov	r0, r3
    5b9a:	3710      	adds	r7, #16
    5b9c:	46bd      	mov	sp, r7
    5b9e:	bd80      	pop	{r7, pc}
    5ba0:	000058f1 	.word	0x000058f1

00005ba4 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5ba4:	b580      	push	{r7, lr}
    5ba6:	b082      	sub	sp, #8
    5ba8:	af00      	add	r7, sp, #0
    5baa:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    5bac:	687b      	ldr	r3, [r7, #4]
    5bae:	681b      	ldr	r3, [r3, #0]
    5bb0:	f023 0202 	bic.w	r2, r3, #2
    5bb4:	687b      	ldr	r3, [r7, #4]
    5bb6:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5bb8:	2103      	movs	r1, #3
    5bba:	6878      	ldr	r0, [r7, #4]
    5bbc:	4b02      	ldr	r3, [pc, #8]	; (5bc8 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    5bbe:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5bc0:	bf00      	nop
    5bc2:	3708      	adds	r7, #8
    5bc4:	46bd      	mov	sp, r7
    5bc6:	bd80      	pop	{r7, pc}
    5bc8:	000058f1 	.word	0x000058f1

00005bcc <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    5bcc:	b580      	push	{r7, lr}
    5bce:	b084      	sub	sp, #16
    5bd0:	af00      	add	r7, sp, #0
    5bd2:	6078      	str	r0, [r7, #4]
    5bd4:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5bd6:	2103      	movs	r1, #3
    5bd8:	6878      	ldr	r0, [r7, #4]
    5bda:	4b07      	ldr	r3, [pc, #28]	; (5bf8 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    5bdc:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    5bde:	687b      	ldr	r3, [r7, #4]
    5be0:	681b      	ldr	r3, [r3, #0]
    5be2:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    5be4:	68fa      	ldr	r2, [r7, #12]
    5be6:	683b      	ldr	r3, [r7, #0]
    5be8:	4013      	ands	r3, r2
    5bea:	60fb      	str	r3, [r7, #12]
	return tmp;
    5bec:	68fb      	ldr	r3, [r7, #12]
}
    5bee:	4618      	mov	r0, r3
    5bf0:	3710      	adds	r7, #16
    5bf2:	46bd      	mov	sp, r7
    5bf4:	bd80      	pop	{r7, pc}
    5bf6:	bf00      	nop
    5bf8:	000058f1 	.word	0x000058f1

00005bfc <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    5bfc:	b580      	push	{r7, lr}
    5bfe:	b082      	sub	sp, #8
    5c00:	af00      	add	r7, sp, #0
    5c02:	6078      	str	r0, [r7, #4]
    5c04:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    5c06:	687b      	ldr	r3, [r7, #4]
    5c08:	683a      	ldr	r2, [r7, #0]
    5c0a:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5c0c:	2103      	movs	r1, #3
    5c0e:	6878      	ldr	r0, [r7, #4]
    5c10:	4b02      	ldr	r3, [pc, #8]	; (5c1c <hri_sercomspi_write_CTRLA_reg+0x20>)
    5c12:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5c14:	bf00      	nop
    5c16:	3708      	adds	r7, #8
    5c18:	46bd      	mov	sp, r7
    5c1a:	bd80      	pop	{r7, pc}
    5c1c:	000058f1 	.word	0x000058f1

00005c20 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    5c20:	b580      	push	{r7, lr}
    5c22:	b082      	sub	sp, #8
    5c24:	af00      	add	r7, sp, #0
    5c26:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    5c28:	687b      	ldr	r3, [r7, #4]
    5c2a:	685b      	ldr	r3, [r3, #4]
    5c2c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    5c30:	687b      	ldr	r3, [r7, #4]
    5c32:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5c34:	2104      	movs	r1, #4
    5c36:	6878      	ldr	r0, [r7, #4]
    5c38:	4b02      	ldr	r3, [pc, #8]	; (5c44 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    5c3a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5c3c:	bf00      	nop
    5c3e:	3708      	adds	r7, #8
    5c40:	46bd      	mov	sp, r7
    5c42:	bd80      	pop	{r7, pc}
    5c44:	000058a5 	.word	0x000058a5

00005c48 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    5c48:	b580      	push	{r7, lr}
    5c4a:	b082      	sub	sp, #8
    5c4c:	af00      	add	r7, sp, #0
    5c4e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    5c50:	687b      	ldr	r3, [r7, #4]
    5c52:	685b      	ldr	r3, [r3, #4]
    5c54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    5c58:	687b      	ldr	r3, [r7, #4]
    5c5a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5c5c:	2104      	movs	r1, #4
    5c5e:	6878      	ldr	r0, [r7, #4]
    5c60:	4b02      	ldr	r3, [pc, #8]	; (5c6c <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    5c62:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5c64:	bf00      	nop
    5c66:	3708      	adds	r7, #8
    5c68:	46bd      	mov	sp, r7
    5c6a:	bd80      	pop	{r7, pc}
    5c6c:	000058a5 	.word	0x000058a5

00005c70 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    5c70:	b580      	push	{r7, lr}
    5c72:	b082      	sub	sp, #8
    5c74:	af00      	add	r7, sp, #0
    5c76:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    5c78:	687b      	ldr	r3, [r7, #4]
    5c7a:	685b      	ldr	r3, [r3, #4]
    5c7c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    5c80:	687b      	ldr	r3, [r7, #4]
    5c82:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5c84:	2104      	movs	r1, #4
    5c86:	6878      	ldr	r0, [r7, #4]
    5c88:	4b02      	ldr	r3, [pc, #8]	; (5c94 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    5c8a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5c8c:	bf00      	nop
    5c8e:	3708      	adds	r7, #8
    5c90:	46bd      	mov	sp, r7
    5c92:	bd80      	pop	{r7, pc}
    5c94:	000058a5 	.word	0x000058a5

00005c98 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    5c98:	b580      	push	{r7, lr}
    5c9a:	b082      	sub	sp, #8
    5c9c:	af00      	add	r7, sp, #0
    5c9e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    5ca0:	687b      	ldr	r3, [r7, #4]
    5ca2:	685b      	ldr	r3, [r3, #4]
    5ca4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    5ca8:	687b      	ldr	r3, [r7, #4]
    5caa:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5cac:	2104      	movs	r1, #4
    5cae:	6878      	ldr	r0, [r7, #4]
    5cb0:	4b02      	ldr	r3, [pc, #8]	; (5cbc <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    5cb2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5cb4:	bf00      	nop
    5cb6:	3708      	adds	r7, #8
    5cb8:	46bd      	mov	sp, r7
    5cba:	bd80      	pop	{r7, pc}
    5cbc:	000058a5 	.word	0x000058a5

00005cc0 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    5cc0:	b580      	push	{r7, lr}
    5cc2:	b082      	sub	sp, #8
    5cc4:	af00      	add	r7, sp, #0
    5cc6:	6078      	str	r0, [r7, #4]
    5cc8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    5cca:	687b      	ldr	r3, [r7, #4]
    5ccc:	685a      	ldr	r2, [r3, #4]
    5cce:	683b      	ldr	r3, [r7, #0]
    5cd0:	041b      	lsls	r3, r3, #16
    5cd2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    5cd6:	431a      	orrs	r2, r3
    5cd8:	687b      	ldr	r3, [r7, #4]
    5cda:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5cdc:	2104      	movs	r1, #4
    5cde:	6878      	ldr	r0, [r7, #4]
    5ce0:	4b02      	ldr	r3, [pc, #8]	; (5cec <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    5ce2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5ce4:	bf00      	nop
    5ce6:	3708      	adds	r7, #8
    5ce8:	46bd      	mov	sp, r7
    5cea:	bd80      	pop	{r7, pc}
    5cec:	000058a5 	.word	0x000058a5

00005cf0 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    5cf0:	b580      	push	{r7, lr}
    5cf2:	b082      	sub	sp, #8
    5cf4:	af00      	add	r7, sp, #0
    5cf6:	6078      	str	r0, [r7, #4]
    5cf8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    5cfa:	687b      	ldr	r3, [r7, #4]
    5cfc:	683a      	ldr	r2, [r7, #0]
    5cfe:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5d00:	2104      	movs	r1, #4
    5d02:	6878      	ldr	r0, [r7, #4]
    5d04:	4b02      	ldr	r3, [pc, #8]	; (5d10 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    5d06:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5d08:	bf00      	nop
    5d0a:	3708      	adds	r7, #8
    5d0c:	46bd      	mov	sp, r7
    5d0e:	bd80      	pop	{r7, pc}
    5d10:	000058a5 	.word	0x000058a5

00005d14 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    5d14:	b580      	push	{r7, lr}
    5d16:	b082      	sub	sp, #8
    5d18:	af00      	add	r7, sp, #0
    5d1a:	6078      	str	r0, [r7, #4]
    5d1c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    5d1e:	687b      	ldr	r3, [r7, #4]
    5d20:	683a      	ldr	r2, [r7, #0]
    5d22:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    5d24:	2117      	movs	r1, #23
    5d26:	6878      	ldr	r0, [r7, #4]
    5d28:	4b02      	ldr	r3, [pc, #8]	; (5d34 <hri_sercomspi_write_CTRLB_reg+0x20>)
    5d2a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5d2c:	bf00      	nop
    5d2e:	3708      	adds	r7, #8
    5d30:	46bd      	mov	sp, r7
    5d32:	bd80      	pop	{r7, pc}
    5d34:	000058f1 	.word	0x000058f1

00005d38 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    5d38:	b480      	push	{r7}
    5d3a:	b083      	sub	sp, #12
    5d3c:	af00      	add	r7, sp, #0
    5d3e:	6078      	str	r0, [r7, #4]
    5d40:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    5d42:	687b      	ldr	r3, [r7, #4]
    5d44:	683a      	ldr	r2, [r7, #0]
    5d46:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5d48:	bf00      	nop
    5d4a:	370c      	adds	r7, #12
    5d4c:	46bd      	mov	sp, r7
    5d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d52:	4770      	bx	lr

00005d54 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    5d54:	b480      	push	{r7}
    5d56:	b083      	sub	sp, #12
    5d58:	af00      	add	r7, sp, #0
    5d5a:	6078      	str	r0, [r7, #4]
    5d5c:	460b      	mov	r3, r1
    5d5e:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    5d60:	687b      	ldr	r3, [r7, #4]
    5d62:	78fa      	ldrb	r2, [r7, #3]
    5d64:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5d66:	bf00      	nop
    5d68:	370c      	adds	r7, #12
    5d6a:	46bd      	mov	sp, r7
    5d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d70:	4770      	bx	lr
	...

00005d74 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    5d74:	b580      	push	{r7, lr}
    5d76:	b084      	sub	sp, #16
    5d78:	af00      	add	r7, sp, #0
    5d7a:	6078      	str	r0, [r7, #4]
    5d7c:	460b      	mov	r3, r1
    5d7e:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    5d80:	687b      	ldr	r3, [r7, #4]
    5d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5d84:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    5d86:	68fb      	ldr	r3, [r7, #12]
    5d88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    5d8c:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    5d8e:	78fb      	ldrb	r3, [r7, #3]
    5d90:	039b      	lsls	r3, r3, #14
    5d92:	461a      	mov	r2, r3
    5d94:	68fb      	ldr	r3, [r7, #12]
    5d96:	4313      	orrs	r3, r2
    5d98:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    5d9a:	687b      	ldr	r3, [r7, #4]
    5d9c:	68fa      	ldr	r2, [r7, #12]
    5d9e:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5da0:	2104      	movs	r1, #4
    5da2:	6878      	ldr	r0, [r7, #4]
    5da4:	4b02      	ldr	r3, [pc, #8]	; (5db0 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    5da6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5da8:	bf00      	nop
    5daa:	3710      	adds	r7, #16
    5dac:	46bd      	mov	sp, r7
    5dae:	bd80      	pop	{r7, pc}
    5db0:	000058a5 	.word	0x000058a5

00005db4 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    5db4:	b580      	push	{r7, lr}
    5db6:	b082      	sub	sp, #8
    5db8:	af00      	add	r7, sp, #0
    5dba:	6078      	str	r0, [r7, #4]
    5dbc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    5dbe:	687b      	ldr	r3, [r7, #4]
    5dc0:	683a      	ldr	r2, [r7, #0]
    5dc2:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5dc4:	2104      	movs	r1, #4
    5dc6:	6878      	ldr	r0, [r7, #4]
    5dc8:	4b02      	ldr	r3, [pc, #8]	; (5dd4 <hri_sercomi2cm_write_ADDR_reg+0x20>)
    5dca:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5dcc:	bf00      	nop
    5dce:	3708      	adds	r7, #8
    5dd0:	46bd      	mov	sp, r7
    5dd2:	bd80      	pop	{r7, pc}
    5dd4:	000058a5 	.word	0x000058a5

00005dd8 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    5dd8:	b580      	push	{r7, lr}
    5dda:	b082      	sub	sp, #8
    5ddc:	af00      	add	r7, sp, #0
    5dde:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5de0:	2104      	movs	r1, #4
    5de2:	6878      	ldr	r0, [r7, #4]
    5de4:	4b03      	ldr	r3, [pc, #12]	; (5df4 <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    5de6:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    5de8:	687b      	ldr	r3, [r7, #4]
    5dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    5dec:	4618      	mov	r0, r3
    5dee:	3708      	adds	r7, #8
    5df0:	46bd      	mov	sp, r7
    5df2:	bd80      	pop	{r7, pc}
    5df4:	000058a5 	.word	0x000058a5

00005df8 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    5df8:	b480      	push	{r7}
    5dfa:	b083      	sub	sp, #12
    5dfc:	af00      	add	r7, sp, #0
    5dfe:	6078      	str	r0, [r7, #4]
    5e00:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    5e02:	687b      	ldr	r3, [r7, #4]
    5e04:	683a      	ldr	r2, [r7, #0]
    5e06:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5e08:	bf00      	nop
    5e0a:	370c      	adds	r7, #12
    5e0c:	46bd      	mov	sp, r7
    5e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e12:	4770      	bx	lr

00005e14 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    5e14:	b580      	push	{r7, lr}
    5e16:	b082      	sub	sp, #8
    5e18:	af00      	add	r7, sp, #0
    5e1a:	6078      	str	r0, [r7, #4]
    5e1c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    5e1e:	687b      	ldr	r3, [r7, #4]
    5e20:	683a      	ldr	r2, [r7, #0]
    5e22:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5e24:	2104      	movs	r1, #4
    5e26:	6878      	ldr	r0, [r7, #4]
    5e28:	4b02      	ldr	r3, [pc, #8]	; (5e34 <hri_sercomi2cm_write_DATA_reg+0x20>)
    5e2a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5e2c:	bf00      	nop
    5e2e:	3708      	adds	r7, #8
    5e30:	46bd      	mov	sp, r7
    5e32:	bd80      	pop	{r7, pc}
    5e34:	000058a5 	.word	0x000058a5

00005e38 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    5e38:	b580      	push	{r7, lr}
    5e3a:	b082      	sub	sp, #8
    5e3c:	af00      	add	r7, sp, #0
    5e3e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5e40:	2104      	movs	r1, #4
    5e42:	6878      	ldr	r0, [r7, #4]
    5e44:	4b03      	ldr	r3, [pc, #12]	; (5e54 <hri_sercomi2cm_read_DATA_reg+0x1c>)
    5e46:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    5e48:	687b      	ldr	r3, [r7, #4]
    5e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    5e4c:	4618      	mov	r0, r3
    5e4e:	3708      	adds	r7, #8
    5e50:	46bd      	mov	sp, r7
    5e52:	bd80      	pop	{r7, pc}
    5e54:	000058a5 	.word	0x000058a5

00005e58 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    5e58:	b480      	push	{r7}
    5e5a:	b083      	sub	sp, #12
    5e5c:	af00      	add	r7, sp, #0
    5e5e:	6078      	str	r0, [r7, #4]
    5e60:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    5e62:	687b      	ldr	r3, [r7, #4]
    5e64:	683a      	ldr	r2, [r7, #0]
    5e66:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5e68:	bf00      	nop
    5e6a:	370c      	adds	r7, #12
    5e6c:	46bd      	mov	sp, r7
    5e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e72:	4770      	bx	lr

00005e74 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    5e74:	b480      	push	{r7}
    5e76:	b083      	sub	sp, #12
    5e78:	af00      	add	r7, sp, #0
    5e7a:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    5e7c:	687b      	ldr	r3, [r7, #4]
    5e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    5e80:	4618      	mov	r0, r3
    5e82:	370c      	adds	r7, #12
    5e84:	46bd      	mov	sp, r7
    5e86:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e8a:	4770      	bx	lr

00005e8c <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    5e8c:	b480      	push	{r7}
    5e8e:	b083      	sub	sp, #12
    5e90:	af00      	add	r7, sp, #0
    5e92:	6078      	str	r0, [r7, #4]
    5e94:	460b      	mov	r3, r1
    5e96:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    5e98:	687b      	ldr	r3, [r7, #4]
    5e9a:	78fa      	ldrb	r2, [r7, #3]
    5e9c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5ea0:	bf00      	nop
    5ea2:	370c      	adds	r7, #12
    5ea4:	46bd      	mov	sp, r7
    5ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5eaa:	4770      	bx	lr

00005eac <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    5eac:	b480      	push	{r7}
    5eae:	b083      	sub	sp, #12
    5eb0:	af00      	add	r7, sp, #0
    5eb2:	6078      	str	r0, [r7, #4]
    5eb4:	460b      	mov	r3, r1
    5eb6:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    5eb8:	687b      	ldr	r3, [r7, #4]
    5eba:	887a      	ldrh	r2, [r7, #2]
    5ebc:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5ebe:	bf00      	nop
    5ec0:	370c      	adds	r7, #12
    5ec2:	46bd      	mov	sp, r7
    5ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ec8:	4770      	bx	lr
	...

00005ecc <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    5ecc:	b580      	push	{r7, lr}
    5ece:	b082      	sub	sp, #8
    5ed0:	af00      	add	r7, sp, #0
    5ed2:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5ed4:	2104      	movs	r1, #4
    5ed6:	6878      	ldr	r0, [r7, #4]
    5ed8:	4b04      	ldr	r3, [pc, #16]	; (5eec <hri_sercomi2cm_read_STATUS_reg+0x20>)
    5eda:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    5edc:	687b      	ldr	r3, [r7, #4]
    5ede:	8b5b      	ldrh	r3, [r3, #26]
    5ee0:	b29b      	uxth	r3, r3
}
    5ee2:	4618      	mov	r0, r3
    5ee4:	3708      	adds	r7, #8
    5ee6:	46bd      	mov	sp, r7
    5ee8:	bd80      	pop	{r7, pc}
    5eea:	bf00      	nop
    5eec:	000058a5 	.word	0x000058a5

00005ef0 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    5ef0:	b4b0      	push	{r4, r5, r7}
    5ef2:	b08d      	sub	sp, #52	; 0x34
    5ef4:	af00      	add	r7, sp, #0
    5ef6:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    5ef8:	4b13      	ldr	r3, [pc, #76]	; (5f48 <_sercom_get_hardware_index+0x58>)
    5efa:	f107 040c 	add.w	r4, r7, #12
    5efe:	461d      	mov	r5, r3
    5f00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    5f02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    5f04:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    5f08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5f0c:	2300      	movs	r3, #0
    5f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    5f10:	e010      	b.n	5f34 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    5f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5f14:	009b      	lsls	r3, r3, #2
    5f16:	f107 0230 	add.w	r2, r7, #48	; 0x30
    5f1a:	4413      	add	r3, r2
    5f1c:	f853 3c24 	ldr.w	r3, [r3, #-36]
    5f20:	461a      	mov	r2, r3
    5f22:	687b      	ldr	r3, [r7, #4]
    5f24:	429a      	cmp	r2, r3
    5f26:	d102      	bne.n	5f2e <_sercom_get_hardware_index+0x3e>
			return i;
    5f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5f2a:	b2db      	uxtb	r3, r3
    5f2c:	e006      	b.n	5f3c <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5f30:	3301      	adds	r3, #1
    5f32:	62fb      	str	r3, [r7, #44]	; 0x2c
    5f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5f36:	2b07      	cmp	r3, #7
    5f38:	d9eb      	bls.n	5f12 <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    5f3a:	2300      	movs	r3, #0
}
    5f3c:	4618      	mov	r0, r3
    5f3e:	3734      	adds	r7, #52	; 0x34
    5f40:	46bd      	mov	sp, r7
    5f42:	bcb0      	pop	{r4, r5, r7}
    5f44:	4770      	bx	lr
    5f46:	bf00      	nop
    5f48:	000131a0 	.word	0x000131a0

00005f4c <_sercom_init_irq_param>:

/**
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{
    5f4c:	b480      	push	{r7}
    5f4e:	b083      	sub	sp, #12
    5f50:	af00      	add	r7, sp, #0
    5f52:	6078      	str	r0, [r7, #4]
    5f54:	6039      	str	r1, [r7, #0]

	if (hw == SERCOM4) {
    5f56:	687b      	ldr	r3, [r7, #4]
    5f58:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
    5f5c:	d102      	bne.n	5f64 <_sercom_init_irq_param+0x18>
		_sercom4_dev = (struct _spi_async_dev *)dev;
    5f5e:	4a0b      	ldr	r2, [pc, #44]	; (5f8c <_sercom_init_irq_param+0x40>)
    5f60:	683b      	ldr	r3, [r7, #0]
    5f62:	6013      	str	r3, [r2, #0]
	}

	if (hw == SERCOM5) {
    5f64:	687b      	ldr	r3, [r7, #4]
    5f66:	4a0a      	ldr	r2, [pc, #40]	; (5f90 <_sercom_init_irq_param+0x44>)
    5f68:	4293      	cmp	r3, r2
    5f6a:	d102      	bne.n	5f72 <_sercom_init_irq_param+0x26>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    5f6c:	4a09      	ldr	r2, [pc, #36]	; (5f94 <_sercom_init_irq_param+0x48>)
    5f6e:	683b      	ldr	r3, [r7, #0]
    5f70:	6013      	str	r3, [r2, #0]
	}

	if (hw == SERCOM7) {
    5f72:	687b      	ldr	r3, [r7, #4]
    5f74:	4a08      	ldr	r2, [pc, #32]	; (5f98 <_sercom_init_irq_param+0x4c>)
    5f76:	4293      	cmp	r3, r2
    5f78:	d102      	bne.n	5f80 <_sercom_init_irq_param+0x34>
		_sercom7_dev = (struct _i2c_m_async_device *)dev;
    5f7a:	4a08      	ldr	r2, [pc, #32]	; (5f9c <_sercom_init_irq_param+0x50>)
    5f7c:	683b      	ldr	r3, [r7, #0]
    5f7e:	6013      	str	r3, [r2, #0]
	}
}
    5f80:	bf00      	nop
    5f82:	370c      	adds	r7, #12
    5f84:	46bd      	mov	sp, r7
    5f86:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f8a:	4770      	bx	lr
    5f8c:	20001484 	.word	0x20001484
    5f90:	43000400 	.word	0x43000400
    5f94:	20001488 	.word	0x20001488
    5f98:	43000c00 	.word	0x43000c00
    5f9c:	2000148c 	.word	0x2000148c

00005fa0 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    5fa0:	b580      	push	{r7, lr}
    5fa2:	b084      	sub	sp, #16
    5fa4:	af00      	add	r7, sp, #0
    5fa6:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    5fa8:	6878      	ldr	r0, [r7, #4]
    5faa:	4b13      	ldr	r3, [pc, #76]	; (5ff8 <_get_i2cm_index+0x58>)
    5fac:	4798      	blx	r3
    5fae:	4603      	mov	r3, r0
    5fb0:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    5fb2:	2300      	movs	r3, #0
    5fb4:	73fb      	strb	r3, [r7, #15]
    5fb6:	e010      	b.n	5fda <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    5fb8:	7bfa      	ldrb	r2, [r7, #15]
    5fba:	4910      	ldr	r1, [pc, #64]	; (5ffc <_get_i2cm_index+0x5c>)
    5fbc:	4613      	mov	r3, r2
    5fbe:	005b      	lsls	r3, r3, #1
    5fc0:	4413      	add	r3, r2
    5fc2:	00db      	lsls	r3, r3, #3
    5fc4:	440b      	add	r3, r1
    5fc6:	781b      	ldrb	r3, [r3, #0]
    5fc8:	7bba      	ldrb	r2, [r7, #14]
    5fca:	429a      	cmp	r2, r3
    5fcc:	d102      	bne.n	5fd4 <_get_i2cm_index+0x34>
			return i;
    5fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5fd2:	e00d      	b.n	5ff0 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    5fd4:	7bfb      	ldrb	r3, [r7, #15]
    5fd6:	3301      	adds	r3, #1
    5fd8:	73fb      	strb	r3, [r7, #15]
    5fda:	7bfb      	ldrb	r3, [r7, #15]
    5fdc:	2b01      	cmp	r3, #1
    5fde:	d9eb      	bls.n	5fb8 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    5fe0:	f44f 726e 	mov.w	r2, #952	; 0x3b8
    5fe4:	4906      	ldr	r1, [pc, #24]	; (6000 <_get_i2cm_index+0x60>)
    5fe6:	2000      	movs	r0, #0
    5fe8:	4b06      	ldr	r3, [pc, #24]	; (6004 <_get_i2cm_index+0x64>)
    5fea:	4798      	blx	r3
	return -1;
    5fec:	f04f 33ff 	mov.w	r3, #4294967295
}
    5ff0:	4618      	mov	r0, r3
    5ff2:	3710      	adds	r7, #16
    5ff4:	46bd      	mov	sp, r7
    5ff6:	bd80      	pop	{r7, pc}
    5ff8:	00005ef1 	.word	0x00005ef1
    5ffc:	20000018 	.word	0x20000018
    6000:	00013184 	.word	0x00013184
    6004:	00002f09 	.word	0x00002f09

00006008 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    6008:	b580      	push	{r7, lr}
    600a:	b082      	sub	sp, #8
    600c:	af00      	add	r7, sp, #0
    600e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    6010:	2103      	movs	r1, #3
    6012:	6878      	ldr	r0, [r7, #4]
    6014:	4b02      	ldr	r3, [pc, #8]	; (6020 <_sercom_i2c_send_stop+0x18>)
    6016:	4798      	blx	r3
}
    6018:	bf00      	nop
    601a:	3708      	adds	r7, #8
    601c:	46bd      	mov	sp, r7
    601e:	bd80      	pop	{r7, pc}
    6020:	00005cc1 	.word	0x00005cc1

00006024 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    6024:	b590      	push	{r4, r7, lr}
    6026:	b087      	sub	sp, #28
    6028:	af00      	add	r7, sp, #0
    602a:	60f8      	str	r0, [r7, #12]
    602c:	60b9      	str	r1, [r7, #8]
    602e:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    6030:	68f8      	ldr	r0, [r7, #12]
    6032:	4b7d      	ldr	r3, [pc, #500]	; (6228 <_sercom_i2c_sync_analyse_flags+0x204>)
    6034:	4798      	blx	r3
    6036:	4603      	mov	r3, r0
    6038:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    603a:	68f8      	ldr	r0, [r7, #12]
    603c:	4b7b      	ldr	r3, [pc, #492]	; (622c <_sercom_i2c_sync_analyse_flags+0x208>)
    603e:	4798      	blx	r3
    6040:	4603      	mov	r3, r0
    6042:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    6044:	68bb      	ldr	r3, [r7, #8]
    6046:	f003 0301 	and.w	r3, r3, #1
    604a:	2b00      	cmp	r3, #0
    604c:	f000 8095 	beq.w	617a <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    6050:	8a7b      	ldrh	r3, [r7, #18]
    6052:	f003 0302 	and.w	r3, r3, #2
    6056:	2b00      	cmp	r3, #0
    6058:	d01d      	beq.n	6096 <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    605a:	68f8      	ldr	r0, [r7, #12]
    605c:	4b74      	ldr	r3, [pc, #464]	; (6230 <_sercom_i2c_sync_analyse_flags+0x20c>)
    605e:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    6060:	687b      	ldr	r3, [r7, #4]
    6062:	885b      	ldrh	r3, [r3, #2]
    6064:	b29b      	uxth	r3, r3
    6066:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    606a:	b29a      	uxth	r2, r3
    606c:	687b      	ldr	r3, [r7, #4]
    606e:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    6070:	687b      	ldr	r3, [r7, #4]
    6072:	885b      	ldrh	r3, [r3, #2]
    6074:	b29b      	uxth	r3, r3
    6076:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    607a:	b29a      	uxth	r2, r3
    607c:	687b      	ldr	r3, [r7, #4]
    607e:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    6080:	8a7b      	ldrh	r3, [r7, #18]
    6082:	f003 0301 	and.w	r3, r3, #1
    6086:	2b00      	cmp	r3, #0
    6088:	d002      	beq.n	6090 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    608a:	f06f 0304 	mvn.w	r3, #4
    608e:	e0c6      	b.n	621e <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    6090:	f06f 0303 	mvn.w	r3, #3
    6094:	e0c3      	b.n	621e <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    6096:	8a7b      	ldrh	r3, [r7, #18]
    6098:	f003 0304 	and.w	r3, r3, #4
    609c:	2b00      	cmp	r3, #0
    609e:	d01f      	beq.n	60e0 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    60a0:	687b      	ldr	r3, [r7, #4]
    60a2:	685b      	ldr	r3, [r3, #4]
    60a4:	2b00      	cmp	r3, #0
    60a6:	dd07      	ble.n	60b8 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    60a8:	687b      	ldr	r3, [r7, #4]
    60aa:	885b      	ldrh	r3, [r3, #2]
    60ac:	b29b      	uxth	r3, r3
    60ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    60b2:	b29a      	uxth	r2, r3
    60b4:	687b      	ldr	r3, [r7, #4]
    60b6:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    60b8:	687b      	ldr	r3, [r7, #4]
    60ba:	885b      	ldrh	r3, [r3, #2]
    60bc:	b29b      	uxth	r3, r3
    60be:	b21b      	sxth	r3, r3
    60c0:	2b00      	cmp	r3, #0
    60c2:	da02      	bge.n	60ca <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    60c4:	68f8      	ldr	r0, [r7, #12]
    60c6:	4b5b      	ldr	r3, [pc, #364]	; (6234 <_sercom_i2c_sync_analyse_flags+0x210>)
    60c8:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    60ca:	687b      	ldr	r3, [r7, #4]
    60cc:	885b      	ldrh	r3, [r3, #2]
    60ce:	b29b      	uxth	r3, r3
    60d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    60d4:	b29a      	uxth	r2, r3
    60d6:	687b      	ldr	r3, [r7, #4]
    60d8:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    60da:	f06f 0301 	mvn.w	r3, #1
    60de:	e09e      	b.n	621e <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    60e0:	687b      	ldr	r3, [r7, #4]
    60e2:	885b      	ldrh	r3, [r3, #2]
    60e4:	b29b      	uxth	r3, r3
    60e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    60ea:	2b00      	cmp	r3, #0
    60ec:	d01c      	beq.n	6128 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    60ee:	687b      	ldr	r3, [r7, #4]
    60f0:	881b      	ldrh	r3, [r3, #0]
    60f2:	121b      	asrs	r3, r3, #8
    60f4:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    60f6:	f003 0406 	and.w	r4, r3, #6
    60fa:	68f8      	ldr	r0, [r7, #12]
    60fc:	4b4e      	ldr	r3, [pc, #312]	; (6238 <_sercom_i2c_sync_analyse_flags+0x214>)
    60fe:	4798      	blx	r3
    6100:	4603      	mov	r3, r0
    6102:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    6106:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    6108:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    610c:	4619      	mov	r1, r3
    610e:	68f8      	ldr	r0, [r7, #12]
    6110:	4b4a      	ldr	r3, [pc, #296]	; (623c <_sercom_i2c_sync_analyse_flags+0x218>)
    6112:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    6114:	687b      	ldr	r3, [r7, #4]
    6116:	885b      	ldrh	r3, [r3, #2]
    6118:	b29b      	uxth	r3, r3
    611a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    611e:	b29a      	uxth	r2, r3
    6120:	687b      	ldr	r3, [r7, #4]
    6122:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    6124:	2300      	movs	r3, #0
    6126:	e07a      	b.n	621e <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    6128:	687b      	ldr	r3, [r7, #4]
    612a:	685b      	ldr	r3, [r3, #4]
    612c:	2b00      	cmp	r3, #0
    612e:	d111      	bne.n	6154 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    6130:	687b      	ldr	r3, [r7, #4]
    6132:	885b      	ldrh	r3, [r3, #2]
    6134:	b29b      	uxth	r3, r3
    6136:	b21b      	sxth	r3, r3
    6138:	2b00      	cmp	r3, #0
    613a:	da02      	bge.n	6142 <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    613c:	68f8      	ldr	r0, [r7, #12]
    613e:	4b3d      	ldr	r3, [pc, #244]	; (6234 <_sercom_i2c_sync_analyse_flags+0x210>)
    6140:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6142:	687b      	ldr	r3, [r7, #4]
    6144:	885b      	ldrh	r3, [r3, #2]
    6146:	b29b      	uxth	r3, r3
    6148:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    614c:	b29a      	uxth	r2, r3
    614e:	687b      	ldr	r3, [r7, #4]
    6150:	805a      	strh	r2, [r3, #2]
    6152:	e010      	b.n	6176 <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    6154:	687b      	ldr	r3, [r7, #4]
    6156:	689b      	ldr	r3, [r3, #8]
    6158:	781b      	ldrb	r3, [r3, #0]
    615a:	4619      	mov	r1, r3
    615c:	68f8      	ldr	r0, [r7, #12]
    615e:	4b38      	ldr	r3, [pc, #224]	; (6240 <_sercom_i2c_sync_analyse_flags+0x21c>)
    6160:	4798      	blx	r3
				msg->buffer++;
    6162:	687b      	ldr	r3, [r7, #4]
    6164:	689b      	ldr	r3, [r3, #8]
    6166:	1c5a      	adds	r2, r3, #1
    6168:	687b      	ldr	r3, [r7, #4]
    616a:	609a      	str	r2, [r3, #8]
				msg->len--;
    616c:	687b      	ldr	r3, [r7, #4]
    616e:	685b      	ldr	r3, [r3, #4]
    6170:	1e5a      	subs	r2, r3, #1
    6172:	687b      	ldr	r3, [r7, #4]
    6174:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    6176:	2300      	movs	r3, #0
    6178:	e051      	b.n	621e <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    617a:	68bb      	ldr	r3, [r7, #8]
    617c:	f003 0302 	and.w	r3, r3, #2
    6180:	2b00      	cmp	r3, #0
    6182:	d04b      	beq.n	621c <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    6184:	687b      	ldr	r3, [r7, #4]
    6186:	685b      	ldr	r3, [r3, #4]
    6188:	2b00      	cmp	r3, #0
    618a:	d041      	beq.n	6210 <_sercom_i2c_sync_analyse_flags+0x1ec>
    618c:	8a7b      	ldrh	r3, [r7, #18]
    618e:	f003 0304 	and.w	r3, r3, #4
    6192:	2b00      	cmp	r3, #0
    6194:	d13c      	bne.n	6210 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    6196:	687b      	ldr	r3, [r7, #4]
    6198:	685b      	ldr	r3, [r3, #4]
    619a:	1e5a      	subs	r2, r3, #1
    619c:	687b      	ldr	r3, [r7, #4]
    619e:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    61a0:	687b      	ldr	r3, [r7, #4]
    61a2:	685b      	ldr	r3, [r3, #4]
    61a4:	2b00      	cmp	r3, #0
    61a6:	d102      	bne.n	61ae <_sercom_i2c_sync_analyse_flags+0x18a>
    61a8:	697b      	ldr	r3, [r7, #20]
    61aa:	2b00      	cmp	r3, #0
    61ac:	d006      	beq.n	61bc <_sercom_i2c_sync_analyse_flags+0x198>
    61ae:	687b      	ldr	r3, [r7, #4]
    61b0:	685b      	ldr	r3, [r3, #4]
    61b2:	2b01      	cmp	r3, #1
    61b4:	d105      	bne.n	61c2 <_sercom_i2c_sync_analyse_flags+0x19e>
    61b6:	697b      	ldr	r3, [r7, #20]
    61b8:	2b00      	cmp	r3, #0
    61ba:	d002      	beq.n	61c2 <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    61bc:	68f8      	ldr	r0, [r7, #12]
    61be:	4b21      	ldr	r3, [pc, #132]	; (6244 <_sercom_i2c_sync_analyse_flags+0x220>)
    61c0:	4798      	blx	r3
			}

			if (msg->len == 0) {
    61c2:	687b      	ldr	r3, [r7, #4]
    61c4:	685b      	ldr	r3, [r3, #4]
    61c6:	2b00      	cmp	r3, #0
    61c8:	d113      	bne.n	61f2 <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    61ca:	687b      	ldr	r3, [r7, #4]
    61cc:	885b      	ldrh	r3, [r3, #2]
    61ce:	b29b      	uxth	r3, r3
    61d0:	b21b      	sxth	r3, r3
    61d2:	2b00      	cmp	r3, #0
    61d4:	da05      	bge.n	61e2 <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    61d6:	68f8      	ldr	r0, [r7, #12]
    61d8:	4b1b      	ldr	r3, [pc, #108]	; (6248 <_sercom_i2c_sync_analyse_flags+0x224>)
    61da:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    61dc:	68f8      	ldr	r0, [r7, #12]
    61de:	4b15      	ldr	r3, [pc, #84]	; (6234 <_sercom_i2c_sync_analyse_flags+0x210>)
    61e0:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    61e2:	687b      	ldr	r3, [r7, #4]
    61e4:	885b      	ldrh	r3, [r3, #2]
    61e6:	b29b      	uxth	r3, r3
    61e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    61ec:	b29a      	uxth	r2, r3
    61ee:	687b      	ldr	r3, [r7, #4]
    61f0:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    61f2:	687b      	ldr	r3, [r7, #4]
    61f4:	689c      	ldr	r4, [r3, #8]
    61f6:	1c62      	adds	r2, r4, #1
    61f8:	687b      	ldr	r3, [r7, #4]
    61fa:	609a      	str	r2, [r3, #8]
    61fc:	68f8      	ldr	r0, [r7, #12]
    61fe:	4b13      	ldr	r3, [pc, #76]	; (624c <_sercom_i2c_sync_analyse_flags+0x228>)
    6200:	4798      	blx	r3
    6202:	4603      	mov	r3, r0
    6204:	b2db      	uxtb	r3, r3
    6206:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    6208:	68f8      	ldr	r0, [r7, #12]
    620a:	4b11      	ldr	r3, [pc, #68]	; (6250 <_sercom_i2c_sync_analyse_flags+0x22c>)
    620c:	4798      	blx	r3
    620e:	e005      	b.n	621c <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    6210:	68f8      	ldr	r0, [r7, #12]
    6212:	4b0f      	ldr	r3, [pc, #60]	; (6250 <_sercom_i2c_sync_analyse_flags+0x22c>)
    6214:	4798      	blx	r3
			return I2C_NACK;
    6216:	f06f 0301 	mvn.w	r3, #1
    621a:	e000      	b.n	621e <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    621c:	2300      	movs	r3, #0
}
    621e:	4618      	mov	r0, r3
    6220:	371c      	adds	r7, #28
    6222:	46bd      	mov	sp, r7
    6224:	bd90      	pop	{r4, r7, pc}
    6226:	bf00      	nop
    6228:	00005ae9 	.word	0x00005ae9
    622c:	00005ecd 	.word	0x00005ecd
    6230:	0000593d 	.word	0x0000593d
    6234:	00006009 	.word	0x00006009
    6238:	00005dd9 	.word	0x00005dd9
    623c:	00005db5 	.word	0x00005db5
    6240:	00005e15 	.word	0x00005e15
    6244:	00005c71 	.word	0x00005c71
    6248:	00005c49 	.word	0x00005c49
    624c:	00005e39 	.word	0x00005e39
    6250:	00005957 	.word	0x00005957

00006254 <_sercom_i2c_m_irq_handler>:
 * \internal Sercom i2c master interrupt handler
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static void _sercom_i2c_m_irq_handler(struct _i2c_m_async_device *i2c_dev)
{
    6254:	b580      	push	{r7, lr}
    6256:	b086      	sub	sp, #24
    6258:	af00      	add	r7, sp, #0
    625a:	6078      	str	r0, [r7, #4]
	void *   hw    = i2c_dev->hw;
    625c:	687b      	ldr	r3, [r7, #4]
    625e:	691b      	ldr	r3, [r3, #16]
    6260:	613b      	str	r3, [r7, #16]
	uint32_t flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    6262:	6938      	ldr	r0, [r7, #16]
    6264:	4b37      	ldr	r3, [pc, #220]	; (6344 <_sercom_i2c_m_irq_handler+0xf0>)
    6266:	4798      	blx	r3
    6268:	4603      	mov	r3, r0
    626a:	60fb      	str	r3, [r7, #12]
	int32_t  ret   = I2C_OK;
    626c:	2300      	movs	r3, #0
    626e:	617b      	str	r3, [r7, #20]

	ASSERT(i2c_dev);
    6270:	687b      	ldr	r3, [r7, #4]
    6272:	2b00      	cmp	r3, #0
    6274:	bf14      	ite	ne
    6276:	2301      	movne	r3, #1
    6278:	2300      	moveq	r3, #0
    627a:	b2db      	uxtb	r3, r3
    627c:	f240 422a 	movw	r2, #1066	; 0x42a
    6280:	4931      	ldr	r1, [pc, #196]	; (6348 <_sercom_i2c_m_irq_handler+0xf4>)
    6282:	4618      	mov	r0, r3
    6284:	4b31      	ldr	r3, [pc, #196]	; (634c <_sercom_i2c_m_irq_handler+0xf8>)
    6286:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    6288:	687b      	ldr	r3, [r7, #4]
    628a:	691b      	ldr	r3, [r3, #16]
    628c:	2b00      	cmp	r3, #0
    628e:	bf14      	ite	ne
    6290:	2301      	movne	r3, #1
    6292:	2300      	moveq	r3, #0
    6294:	b2db      	uxtb	r3, r3
    6296:	f240 422b 	movw	r2, #1067	; 0x42b
    629a:	492b      	ldr	r1, [pc, #172]	; (6348 <_sercom_i2c_m_irq_handler+0xf4>)
    629c:	4618      	mov	r0, r3
    629e:	4b2b      	ldr	r3, [pc, #172]	; (634c <_sercom_i2c_m_irq_handler+0xf8>)
    62a0:	4798      	blx	r3

	while (!(flags & ERROR_FLAG)) {
    62a2:	bf00      	nop
    62a4:	68fb      	ldr	r3, [r7, #12]
    62a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    62aa:	2b00      	cmp	r3, #0
    62ac:	d126      	bne.n	62fc <_sercom_i2c_m_irq_handler+0xa8>
		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    62ae:	687b      	ldr	r3, [r7, #4]
    62b0:	461a      	mov	r2, r3
    62b2:	68f9      	ldr	r1, [r7, #12]
    62b4:	6938      	ldr	r0, [r7, #16]
    62b6:	4b26      	ldr	r3, [pc, #152]	; (6350 <_sercom_i2c_m_irq_handler+0xfc>)
    62b8:	4798      	blx	r3
    62ba:	6178      	str	r0, [r7, #20]

		if (ret != 0) {
    62bc:	697b      	ldr	r3, [r7, #20]
    62be:	2b00      	cmp	r3, #0
    62c0:	d11b      	bne.n	62fa <_sercom_i2c_m_irq_handler+0xa6>
			break;
		}

		/* app callback */
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    62c2:	68fb      	ldr	r3, [r7, #12]
    62c4:	f003 0301 	and.w	r3, r3, #1
    62c8:	2b00      	cmp	r3, #0
    62ca:	d008      	beq.n	62de <_sercom_i2c_m_irq_handler+0x8a>
    62cc:	687b      	ldr	r3, [r7, #4]
    62ce:	699b      	ldr	r3, [r3, #24]
    62d0:	2b00      	cmp	r3, #0
    62d2:	d004      	beq.n	62de <_sercom_i2c_m_irq_handler+0x8a>
			i2c_dev->cb.tx_complete(i2c_dev);
    62d4:	687b      	ldr	r3, [r7, #4]
    62d6:	699b      	ldr	r3, [r3, #24]
    62d8:	6878      	ldr	r0, [r7, #4]
    62da:	4798      	blx	r3
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
			i2c_dev->cb.rx_complete(i2c_dev);
		}

		return;
    62dc:	e02e      	b.n	633c <_sercom_i2c_m_irq_handler+0xe8>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    62de:	68fb      	ldr	r3, [r7, #12]
    62e0:	f003 0302 	and.w	r3, r3, #2
    62e4:	2b00      	cmp	r3, #0
    62e6:	d029      	beq.n	633c <_sercom_i2c_m_irq_handler+0xe8>
    62e8:	687b      	ldr	r3, [r7, #4]
    62ea:	69db      	ldr	r3, [r3, #28]
    62ec:	2b00      	cmp	r3, #0
    62ee:	d025      	beq.n	633c <_sercom_i2c_m_irq_handler+0xe8>
			i2c_dev->cb.rx_complete(i2c_dev);
    62f0:	687b      	ldr	r3, [r7, #4]
    62f2:	69db      	ldr	r3, [r3, #28]
    62f4:	6878      	ldr	r0, [r7, #4]
    62f6:	4798      	blx	r3
		return;
    62f8:	e020      	b.n	633c <_sercom_i2c_m_irq_handler+0xe8>
			break;
    62fa:	bf00      	nop
	}

	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    62fc:	687b      	ldr	r3, [r7, #4]
    62fe:	885b      	ldrh	r3, [r3, #2]
    6300:	b29b      	uxth	r3, r3
    6302:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6306:	b29a      	uxth	r2, r3
    6308:	687b      	ldr	r3, [r7, #4]
    630a:	805a      	strh	r2, [r3, #2]
	if (i2c_dev->cb.error) {
    630c:	687b      	ldr	r3, [r7, #4]
    630e:	695b      	ldr	r3, [r3, #20]
    6310:	2b00      	cmp	r3, #0
    6312:	d014      	beq.n	633e <_sercom_i2c_m_irq_handler+0xea>
		if (ret != I2C_OK) {
    6314:	697b      	ldr	r3, [r7, #20]
    6316:	2b00      	cmp	r3, #0
    6318:	d005      	beq.n	6326 <_sercom_i2c_m_irq_handler+0xd2>
			i2c_dev->cb.error(i2c_dev, ret);
    631a:	687b      	ldr	r3, [r7, #4]
    631c:	695b      	ldr	r3, [r3, #20]
    631e:	6979      	ldr	r1, [r7, #20]
    6320:	6878      	ldr	r0, [r7, #4]
    6322:	4798      	blx	r3
    6324:	e005      	b.n	6332 <_sercom_i2c_m_irq_handler+0xde>
		} else {
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    6326:	687b      	ldr	r3, [r7, #4]
    6328:	695b      	ldr	r3, [r3, #20]
    632a:	f06f 0104 	mvn.w	r1, #4
    632e:	6878      	ldr	r0, [r7, #4]
    6330:	4798      	blx	r3
		}
		hri_sercomi2cm_clear_INTFLAG_reg(hw, SERCOM_I2CM_INTFLAG_ERROR);
    6332:	2180      	movs	r1, #128	; 0x80
    6334:	6938      	ldr	r0, [r7, #16]
    6336:	4b07      	ldr	r3, [pc, #28]	; (6354 <_sercom_i2c_m_irq_handler+0x100>)
    6338:	4798      	blx	r3
    633a:	e000      	b.n	633e <_sercom_i2c_m_irq_handler+0xea>
		return;
    633c:	bf00      	nop
	}
}
    633e:	3718      	adds	r7, #24
    6340:	46bd      	mov	sp, r7
    6342:	bd80      	pop	{r7, pc}
    6344:	00005971 	.word	0x00005971
    6348:	00013184 	.word	0x00013184
    634c:	00002f09 	.word	0x00002f09
    6350:	00006025 	.word	0x00006025
    6354:	0000598b 	.word	0x0000598b

00006358 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    6358:	b580      	push	{r7, lr}
    635a:	b082      	sub	sp, #8
    635c:	af00      	add	r7, sp, #0
    635e:	6078      	str	r0, [r7, #4]
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    6360:	6878      	ldr	r0, [r7, #4]
    6362:	4b05      	ldr	r3, [pc, #20]	; (6378 <_sercom_get_irq_num+0x20>)
    6364:	4798      	blx	r3
    6366:	4603      	mov	r3, r0
    6368:	009b      	lsls	r3, r3, #2
    636a:	b2db      	uxtb	r3, r3
    636c:	332e      	adds	r3, #46	; 0x2e
    636e:	b2db      	uxtb	r3, r3
}
    6370:	4618      	mov	r0, r3
    6372:	3708      	adds	r7, #8
    6374:	46bd      	mov	sp, r7
    6376:	bd80      	pop	{r7, pc}
    6378:	00005ef1 	.word	0x00005ef1

0000637c <_i2c_m_async_init>:
 * \brief Initialize sercom i2c module to use in async mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_init(struct _i2c_m_async_device *const i2c_dev, void *const hw)
{
    637c:	b580      	push	{r7, lr}
    637e:	b086      	sub	sp, #24
    6380:	af00      	add	r7, sp, #0
    6382:	6078      	str	r0, [r7, #4]
    6384:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(i2c_dev);
    6386:	687b      	ldr	r3, [r7, #4]
    6388:	2b00      	cmp	r3, #0
    638a:	bf14      	ite	ne
    638c:	2301      	movne	r3, #1
    638e:	2300      	moveq	r3, #0
    6390:	b2db      	uxtb	r3, r3
    6392:	f240 429e 	movw	r2, #1182	; 0x49e
    6396:	491d      	ldr	r1, [pc, #116]	; (640c <_i2c_m_async_init+0x90>)
    6398:	4618      	mov	r0, r3
    639a:	4b1d      	ldr	r3, [pc, #116]	; (6410 <_i2c_m_async_init+0x94>)
    639c:	4798      	blx	r3

	i2c_dev->hw = hw;
    639e:	687b      	ldr	r3, [r7, #4]
    63a0:	683a      	ldr	r2, [r7, #0]
    63a2:	611a      	str	r2, [r3, #16]

	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    63a4:	687b      	ldr	r3, [r7, #4]
    63a6:	6839      	ldr	r1, [r7, #0]
    63a8:	4618      	mov	r0, r3
    63aa:	4b1a      	ldr	r3, [pc, #104]	; (6414 <_i2c_m_async_init+0x98>)
    63ac:	4798      	blx	r3
    63ae:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    63b0:	68fb      	ldr	r3, [r7, #12]
    63b2:	2b00      	cmp	r3, #0
    63b4:	d001      	beq.n	63ba <_i2c_m_async_init+0x3e>
		return init_status;
    63b6:	68fb      	ldr	r3, [r7, #12]
    63b8:	e024      	b.n	6404 <_i2c_m_async_init+0x88>
	}

	_sercom_init_irq_param(hw, (void *)i2c_dev);
    63ba:	6879      	ldr	r1, [r7, #4]
    63bc:	6838      	ldr	r0, [r7, #0]
    63be:	4b16      	ldr	r3, [pc, #88]	; (6418 <_i2c_m_async_init+0x9c>)
    63c0:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    63c2:	6838      	ldr	r0, [r7, #0]
    63c4:	4b15      	ldr	r3, [pc, #84]	; (641c <_i2c_m_async_init+0xa0>)
    63c6:	4798      	blx	r3
    63c8:	4603      	mov	r3, r0
    63ca:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    63cc:	2300      	movs	r3, #0
    63ce:	613b      	str	r3, [r7, #16]
    63d0:	e014      	b.n	63fc <_i2c_m_async_init+0x80>
		NVIC_DisableIRQ((IRQn_Type)irq);
    63d2:	7dfb      	ldrb	r3, [r7, #23]
    63d4:	b21b      	sxth	r3, r3
    63d6:	4618      	mov	r0, r3
    63d8:	4b11      	ldr	r3, [pc, #68]	; (6420 <_i2c_m_async_init+0xa4>)
    63da:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    63dc:	7dfb      	ldrb	r3, [r7, #23]
    63de:	b21b      	sxth	r3, r3
    63e0:	4618      	mov	r0, r3
    63e2:	4b10      	ldr	r3, [pc, #64]	; (6424 <_i2c_m_async_init+0xa8>)
    63e4:	4798      	blx	r3
		NVIC_EnableIRQ((IRQn_Type)irq);
    63e6:	7dfb      	ldrb	r3, [r7, #23]
    63e8:	b21b      	sxth	r3, r3
    63ea:	4618      	mov	r0, r3
    63ec:	4b0e      	ldr	r3, [pc, #56]	; (6428 <_i2c_m_async_init+0xac>)
    63ee:	4798      	blx	r3
		irq++;
    63f0:	7dfb      	ldrb	r3, [r7, #23]
    63f2:	3301      	adds	r3, #1
    63f4:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    63f6:	693b      	ldr	r3, [r7, #16]
    63f8:	3301      	adds	r3, #1
    63fa:	613b      	str	r3, [r7, #16]
    63fc:	693b      	ldr	r3, [r7, #16]
    63fe:	2b03      	cmp	r3, #3
    6400:	d9e7      	bls.n	63d2 <_i2c_m_async_init+0x56>
	}
	return ERR_NONE;
    6402:	2300      	movs	r3, #0
}
    6404:	4618      	mov	r0, r3
    6406:	3718      	adds	r7, #24
    6408:	46bd      	mov	sp, r7
    640a:	bd80      	pop	{r7, pc}
    640c:	00013184 	.word	0x00013184
    6410:	00002f09 	.word	0x00002f09
    6414:	00006645 	.word	0x00006645
    6418:	00005f4d 	.word	0x00005f4d
    641c:	00006359 	.word	0x00006359
    6420:	00005825 	.word	0x00005825
    6424:	00005869 	.word	0x00005869
    6428:	000057e9 	.word	0x000057e9

0000642c <_sercom_i2c_send_address>:
 * \brief Transfer the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_send_address(struct _i2c_m_async_device *const i2c_dev)
{
    642c:	b590      	push	{r4, r7, lr}
    642e:	b087      	sub	sp, #28
    6430:	af00      	add	r7, sp, #0
    6432:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    6434:	687b      	ldr	r3, [r7, #4]
    6436:	691b      	ldr	r3, [r3, #16]
    6438:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    643a:	687b      	ldr	r3, [r7, #4]
    643c:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    643e:	6978      	ldr	r0, [r7, #20]
    6440:	4b33      	ldr	r3, [pc, #204]	; (6510 <_sercom_i2c_send_address+0xe4>)
    6442:	4798      	blx	r3
    6444:	4603      	mov	r3, r0
    6446:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    6448:	687b      	ldr	r3, [r7, #4]
    644a:	2b00      	cmp	r3, #0
    644c:	bf14      	ite	ne
    644e:	2301      	movne	r3, #1
    6450:	2300      	moveq	r3, #0
    6452:	b2db      	uxtb	r3, r3
    6454:	f240 42cc 	movw	r2, #1228	; 0x4cc
    6458:	492e      	ldr	r1, [pc, #184]	; (6514 <_sercom_i2c_send_address+0xe8>)
    645a:	4618      	mov	r0, r3
    645c:	4b2e      	ldr	r3, [pc, #184]	; (6518 <_sercom_i2c_send_address+0xec>)
    645e:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    6460:	693b      	ldr	r3, [r7, #16]
    6462:	685b      	ldr	r3, [r3, #4]
    6464:	2b01      	cmp	r3, #1
    6466:	d106      	bne.n	6476 <_sercom_i2c_send_address+0x4a>
    6468:	68fb      	ldr	r3, [r7, #12]
    646a:	2b00      	cmp	r3, #0
    646c:	d003      	beq.n	6476 <_sercom_i2c_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    646e:	6978      	ldr	r0, [r7, #20]
    6470:	4b2a      	ldr	r3, [pc, #168]	; (651c <_sercom_i2c_send_address+0xf0>)
    6472:	4798      	blx	r3
    6474:	e002      	b.n	647c <_sercom_i2c_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    6476:	6978      	ldr	r0, [r7, #20]
    6478:	4b29      	ldr	r3, [pc, #164]	; (6520 <_sercom_i2c_send_address+0xf4>)
    647a:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    647c:	693b      	ldr	r3, [r7, #16]
    647e:	881b      	ldrh	r3, [r3, #0]
    6480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6484:	2b00      	cmp	r3, #0
    6486:	d022      	beq.n	64ce <_sercom_i2c_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    6488:	693b      	ldr	r3, [r7, #16]
    648a:	885b      	ldrh	r3, [r3, #2]
    648c:	b29b      	uxth	r3, r3
    648e:	f003 0301 	and.w	r3, r3, #1
    6492:	2b00      	cmp	r3, #0
    6494:	d007      	beq.n	64a6 <_sercom_i2c_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    6496:	693b      	ldr	r3, [r7, #16]
    6498:	885b      	ldrh	r3, [r3, #2]
    649a:	b29b      	uxth	r3, r3
    649c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    64a0:	b29a      	uxth	r2, r3
    64a2:	693b      	ldr	r3, [r7, #16]
    64a4:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    64a6:	693b      	ldr	r3, [r7, #16]
    64a8:	881b      	ldrh	r3, [r3, #0]
    64aa:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    64ac:	f240 74fe 	movw	r4, #2046	; 0x7fe
    64b0:	401c      	ands	r4, r3
    64b2:	6978      	ldr	r0, [r7, #20]
    64b4:	4b1b      	ldr	r3, [pc, #108]	; (6524 <_sercom_i2c_send_address+0xf8>)
    64b6:	4798      	blx	r3
    64b8:	4603      	mov	r3, r0
    64ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    64be:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    64c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    64c4:	4619      	mov	r1, r3
    64c6:	6978      	ldr	r0, [r7, #20]
    64c8:	4b17      	ldr	r3, [pc, #92]	; (6528 <_sercom_i2c_send_address+0xfc>)
    64ca:	4798      	blx	r3
    64cc:	e01a      	b.n	6504 <_sercom_i2c_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    64ce:	693b      	ldr	r3, [r7, #16]
    64d0:	881b      	ldrh	r3, [r3, #0]
    64d2:	005b      	lsls	r3, r3, #1
    64d4:	b2db      	uxtb	r3, r3
    64d6:	693a      	ldr	r2, [r7, #16]
    64d8:	8852      	ldrh	r2, [r2, #2]
    64da:	b292      	uxth	r2, r2
    64dc:	f002 0201 	and.w	r2, r2, #1
    64e0:	2a00      	cmp	r2, #0
    64e2:	bf14      	ite	ne
    64e4:	2201      	movne	r2, #1
    64e6:	2200      	moveq	r2, #0
    64e8:	b2d2      	uxtb	r2, r2
    64ea:	4313      	orrs	r3, r2
    64ec:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    64ee:	6978      	ldr	r0, [r7, #20]
    64f0:	4b0c      	ldr	r3, [pc, #48]	; (6524 <_sercom_i2c_send_address+0xf8>)
    64f2:	4798      	blx	r3
    64f4:	4603      	mov	r3, r0
    64f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    64fa:	4323      	orrs	r3, r4
    64fc:	4619      	mov	r1, r3
    64fe:	6978      	ldr	r0, [r7, #20]
    6500:	4b09      	ldr	r3, [pc, #36]	; (6528 <_sercom_i2c_send_address+0xfc>)
    6502:	4798      	blx	r3
	}

	return ERR_NONE;
    6504:	2300      	movs	r3, #0
}
    6506:	4618      	mov	r0, r3
    6508:	371c      	adds	r7, #28
    650a:	46bd      	mov	sp, r7
    650c:	bd90      	pop	{r4, r7, pc}
    650e:	bf00      	nop
    6510:	00005ae9 	.word	0x00005ae9
    6514:	00013184 	.word	0x00013184
    6518:	00002f09 	.word	0x00002f09
    651c:	00005c71 	.word	0x00005c71
    6520:	00005c99 	.word	0x00005c99
    6524:	00005dd9 	.word	0x00005dd9
    6528:	00005db5 	.word	0x00005db5

0000652c <_i2c_m_async_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail, return the error code
 */
int32_t _i2c_m_async_transfer(struct _i2c_m_async_device *i2c_dev, struct _i2c_m_msg *msg)
{
    652c:	b580      	push	{r7, lr}
    652e:	b084      	sub	sp, #16
    6530:	af00      	add	r7, sp, #0
    6532:	6078      	str	r0, [r7, #4]
    6534:	6039      	str	r1, [r7, #0]
	int ret;

	ASSERT(i2c_dev);
    6536:	687b      	ldr	r3, [r7, #4]
    6538:	2b00      	cmp	r3, #0
    653a:	bf14      	ite	ne
    653c:	2301      	movne	r3, #1
    653e:	2300      	moveq	r3, #0
    6540:	b2db      	uxtb	r3, r3
    6542:	f240 42f4 	movw	r2, #1268	; 0x4f4
    6546:	492a      	ldr	r1, [pc, #168]	; (65f0 <_i2c_m_async_transfer+0xc4>)
    6548:	4618      	mov	r0, r3
    654a:	4b2a      	ldr	r3, [pc, #168]	; (65f4 <_i2c_m_async_transfer+0xc8>)
    654c:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    654e:	687b      	ldr	r3, [r7, #4]
    6550:	691b      	ldr	r3, [r3, #16]
    6552:	2b00      	cmp	r3, #0
    6554:	bf14      	ite	ne
    6556:	2301      	movne	r3, #1
    6558:	2300      	moveq	r3, #0
    655a:	b2db      	uxtb	r3, r3
    655c:	f240 42f5 	movw	r2, #1269	; 0x4f5
    6560:	4923      	ldr	r1, [pc, #140]	; (65f0 <_i2c_m_async_transfer+0xc4>)
    6562:	4618      	mov	r0, r3
    6564:	4b23      	ldr	r3, [pc, #140]	; (65f4 <_i2c_m_async_transfer+0xc8>)
    6566:	4798      	blx	r3
	ASSERT(msg);
    6568:	683b      	ldr	r3, [r7, #0]
    656a:	2b00      	cmp	r3, #0
    656c:	bf14      	ite	ne
    656e:	2301      	movne	r3, #1
    6570:	2300      	moveq	r3, #0
    6572:	b2db      	uxtb	r3, r3
    6574:	f240 42f6 	movw	r2, #1270	; 0x4f6
    6578:	491d      	ldr	r1, [pc, #116]	; (65f0 <_i2c_m_async_transfer+0xc4>)
    657a:	4618      	mov	r0, r3
    657c:	4b1d      	ldr	r3, [pc, #116]	; (65f4 <_i2c_m_async_transfer+0xc8>)
    657e:	4798      	blx	r3

	if (msg->len == 0) {
    6580:	683b      	ldr	r3, [r7, #0]
    6582:	685b      	ldr	r3, [r3, #4]
    6584:	2b00      	cmp	r3, #0
    6586:	d101      	bne.n	658c <_i2c_m_async_transfer+0x60>
		return ERR_NONE;
    6588:	2300      	movs	r3, #0
    658a:	e02d      	b.n	65e8 <_i2c_m_async_transfer+0xbc>
	}

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    658c:	687b      	ldr	r3, [r7, #4]
    658e:	885b      	ldrh	r3, [r3, #2]
    6590:	b29b      	uxth	r3, r3
    6592:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6596:	2b00      	cmp	r3, #0
    6598:	d002      	beq.n	65a0 <_i2c_m_async_transfer+0x74>
		return ERR_BUSY;
    659a:	f06f 0303 	mvn.w	r3, #3
    659e:	e023      	b.n	65e8 <_i2c_m_async_transfer+0xbc>
	}

	msg->flags |= I2C_M_BUSY;
    65a0:	683b      	ldr	r3, [r7, #0]
    65a2:	885b      	ldrh	r3, [r3, #2]
    65a4:	b29b      	uxth	r3, r3
    65a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    65aa:	b29a      	uxth	r2, r3
    65ac:	683b      	ldr	r3, [r7, #0]
    65ae:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    65b0:	687b      	ldr	r3, [r7, #4]
    65b2:	683a      	ldr	r2, [r7, #0]
    65b4:	ca07      	ldmia	r2, {r0, r1, r2}
    65b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    65ba:	687b      	ldr	r3, [r7, #4]
    65bc:	691b      	ldr	r3, [r3, #16]
    65be:	4618      	mov	r0, r3
    65c0:	4b0d      	ldr	r3, [pc, #52]	; (65f8 <_i2c_m_async_transfer+0xcc>)
    65c2:	4798      	blx	r3

	ret = _sercom_i2c_send_address(i2c_dev);
    65c4:	6878      	ldr	r0, [r7, #4]
    65c6:	4b0d      	ldr	r3, [pc, #52]	; (65fc <_i2c_m_async_transfer+0xd0>)
    65c8:	4798      	blx	r3
    65ca:	60f8      	str	r0, [r7, #12]

	if (ret) {
    65cc:	68fb      	ldr	r3, [r7, #12]
    65ce:	2b00      	cmp	r3, #0
    65d0:	d009      	beq.n	65e6 <_i2c_m_async_transfer+0xba>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    65d2:	687b      	ldr	r3, [r7, #4]
    65d4:	885b      	ldrh	r3, [r3, #2]
    65d6:	b29b      	uxth	r3, r3
    65d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    65dc:	b29a      	uxth	r2, r3
    65de:	687b      	ldr	r3, [r7, #4]
    65e0:	805a      	strh	r2, [r3, #2]

		return ret;
    65e2:	68fb      	ldr	r3, [r7, #12]
    65e4:	e000      	b.n	65e8 <_i2c_m_async_transfer+0xbc>
	}

	return ERR_NONE;
    65e6:	2300      	movs	r3, #0
}
    65e8:	4618      	mov	r0, r3
    65ea:	3710      	adds	r7, #16
    65ec:	46bd      	mov	sp, r7
    65ee:	bd80      	pop	{r7, pc}
    65f0:	00013184 	.word	0x00013184
    65f4:	00002f09 	.word	0x00002f09
    65f8:	00005c21 	.word	0x00005c21
    65fc:	0000642d 	.word	0x0000642d

00006600 <_i2c_m_async_register_callback>:
 * \param[in] type The callback type
 * \param[in] func The callback function pointer
 */
int32_t _i2c_m_async_register_callback(struct _i2c_m_async_device *const i2c_dev, enum _i2c_m_async_callback_type type,
                                       FUNC_PTR func)
{
    6600:	b480      	push	{r7}
    6602:	b085      	sub	sp, #20
    6604:	af00      	add	r7, sp, #0
    6606:	60f8      	str	r0, [r7, #12]
    6608:	460b      	mov	r3, r1
    660a:	607a      	str	r2, [r7, #4]
    660c:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    660e:	7afb      	ldrb	r3, [r7, #11]
    6610:	2b01      	cmp	r3, #1
    6612:	d008      	beq.n	6626 <_i2c_m_async_register_callback+0x26>
    6614:	2b02      	cmp	r3, #2
    6616:	d00a      	beq.n	662e <_i2c_m_async_register_callback+0x2e>
    6618:	2b00      	cmp	r3, #0
    661a:	d000      	beq.n	661e <_i2c_m_async_register_callback+0x1e>
	case I2C_M_ASYNC_DEVICE_RX_COMPLETE:
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
		break;
	default:
		/* error */
		break;
    661c:	e00b      	b.n	6636 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    661e:	68fb      	ldr	r3, [r7, #12]
    6620:	687a      	ldr	r2, [r7, #4]
    6622:	615a      	str	r2, [r3, #20]
		break;
    6624:	e007      	b.n	6636 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    6626:	68fb      	ldr	r3, [r7, #12]
    6628:	687a      	ldr	r2, [r7, #4]
    662a:	619a      	str	r2, [r3, #24]
		break;
    662c:	e003      	b.n	6636 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    662e:	68fb      	ldr	r3, [r7, #12]
    6630:	687a      	ldr	r2, [r7, #4]
    6632:	61da      	str	r2, [r3, #28]
		break;
    6634:	bf00      	nop
	}

	return ERR_NONE;
    6636:	2300      	movs	r3, #0
}
    6638:	4618      	mov	r0, r3
    663a:	3714      	adds	r7, #20
    663c:	46bd      	mov	sp, r7
    663e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6642:	4770      	bx	lr

00006644 <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    6644:	b580      	push	{r7, lr}
    6646:	b084      	sub	sp, #16
    6648:	af00      	add	r7, sp, #0
    664a:	6078      	str	r0, [r7, #4]
    664c:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    664e:	6838      	ldr	r0, [r7, #0]
    6650:	4b42      	ldr	r3, [pc, #264]	; (675c <_i2c_m_sync_init_impl+0x118>)
    6652:	4798      	blx	r3
    6654:	4603      	mov	r3, r0
    6656:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    6658:	2101      	movs	r1, #1
    665a:	6838      	ldr	r0, [r7, #0]
    665c:	4b40      	ldr	r3, [pc, #256]	; (6760 <_i2c_m_sync_init_impl+0x11c>)
    665e:	4798      	blx	r3
    6660:	4603      	mov	r3, r0
    6662:	f083 0301 	eor.w	r3, r3, #1
    6666:	b2db      	uxtb	r3, r3
    6668:	2b00      	cmp	r3, #0
    666a:	d020      	beq.n	66ae <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    666c:	7bfa      	ldrb	r2, [r7, #15]
    666e:	493d      	ldr	r1, [pc, #244]	; (6764 <_i2c_m_sync_init_impl+0x120>)
    6670:	4613      	mov	r3, r2
    6672:	005b      	lsls	r3, r3, #1
    6674:	4413      	add	r3, r2
    6676:	00db      	lsls	r3, r3, #3
    6678:	440b      	add	r3, r1
    667a:	3304      	adds	r3, #4
    667c:	681b      	ldr	r3, [r3, #0]
    667e:	f003 031c 	and.w	r3, r3, #28
    6682:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    6684:	2102      	movs	r1, #2
    6686:	6838      	ldr	r0, [r7, #0]
    6688:	4b37      	ldr	r3, [pc, #220]	; (6768 <_i2c_m_sync_init_impl+0x124>)
    668a:	4798      	blx	r3
    668c:	4603      	mov	r3, r0
    668e:	2b00      	cmp	r3, #0
    6690:	d006      	beq.n	66a0 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    6692:	6838      	ldr	r0, [r7, #0]
    6694:	4b35      	ldr	r3, [pc, #212]	; (676c <_i2c_m_sync_init_impl+0x128>)
    6696:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    6698:	2102      	movs	r1, #2
    669a:	6838      	ldr	r0, [r7, #0]
    669c:	4b34      	ldr	r3, [pc, #208]	; (6770 <_i2c_m_sync_init_impl+0x12c>)
    669e:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    66a0:	68bb      	ldr	r3, [r7, #8]
    66a2:	f043 0301 	orr.w	r3, r3, #1
    66a6:	4619      	mov	r1, r3
    66a8:	6838      	ldr	r0, [r7, #0]
    66aa:	4b32      	ldr	r3, [pc, #200]	; (6774 <_i2c_m_sync_init_impl+0x130>)
    66ac:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    66ae:	2101      	movs	r1, #1
    66b0:	6838      	ldr	r0, [r7, #0]
    66b2:	4b2f      	ldr	r3, [pc, #188]	; (6770 <_i2c_m_sync_init_impl+0x12c>)
    66b4:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    66b6:	7bfa      	ldrb	r2, [r7, #15]
    66b8:	492a      	ldr	r1, [pc, #168]	; (6764 <_i2c_m_sync_init_impl+0x120>)
    66ba:	4613      	mov	r3, r2
    66bc:	005b      	lsls	r3, r3, #1
    66be:	4413      	add	r3, r2
    66c0:	00db      	lsls	r3, r3, #3
    66c2:	440b      	add	r3, r1
    66c4:	3304      	adds	r3, #4
    66c6:	681b      	ldr	r3, [r3, #0]
    66c8:	4619      	mov	r1, r3
    66ca:	6838      	ldr	r0, [r7, #0]
    66cc:	4b29      	ldr	r3, [pc, #164]	; (6774 <_i2c_m_sync_init_impl+0x130>)
    66ce:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    66d0:	7bfa      	ldrb	r2, [r7, #15]
    66d2:	4924      	ldr	r1, [pc, #144]	; (6764 <_i2c_m_sync_init_impl+0x120>)
    66d4:	4613      	mov	r3, r2
    66d6:	005b      	lsls	r3, r3, #1
    66d8:	4413      	add	r3, r2
    66da:	00db      	lsls	r3, r3, #3
    66dc:	440b      	add	r3, r1
    66de:	3308      	adds	r3, #8
    66e0:	681b      	ldr	r3, [r3, #0]
    66e2:	4619      	mov	r1, r3
    66e4:	6838      	ldr	r0, [r7, #0]
    66e6:	4b24      	ldr	r3, [pc, #144]	; (6778 <_i2c_m_sync_init_impl+0x134>)
    66e8:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    66ea:	7bfa      	ldrb	r2, [r7, #15]
    66ec:	491d      	ldr	r1, [pc, #116]	; (6764 <_i2c_m_sync_init_impl+0x120>)
    66ee:	4613      	mov	r3, r2
    66f0:	005b      	lsls	r3, r3, #1
    66f2:	4413      	add	r3, r2
    66f4:	00db      	lsls	r3, r3, #3
    66f6:	440b      	add	r3, r1
    66f8:	330c      	adds	r3, #12
    66fa:	681b      	ldr	r3, [r3, #0]
    66fc:	4619      	mov	r1, r3
    66fe:	6838      	ldr	r0, [r7, #0]
    6700:	4b1e      	ldr	r3, [pc, #120]	; (677c <_i2c_m_sync_init_impl+0x138>)
    6702:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    6704:	7bfa      	ldrb	r2, [r7, #15]
    6706:	4917      	ldr	r1, [pc, #92]	; (6764 <_i2c_m_sync_init_impl+0x120>)
    6708:	4613      	mov	r3, r2
    670a:	005b      	lsls	r3, r3, #1
    670c:	4413      	add	r3, r2
    670e:	00db      	lsls	r3, r3, #3
    6710:	440b      	add	r3, r1
    6712:	3304      	adds	r3, #4
    6714:	681b      	ldr	r3, [r3, #0]
    6716:	0e1b      	lsrs	r3, r3, #24
    6718:	b29b      	uxth	r3, r3
    671a:	f003 0303 	and.w	r3, r3, #3
    671e:	b29a      	uxth	r2, r3
    6720:	687b      	ldr	r3, [r7, #4]
    6722:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    6724:	687b      	ldr	r3, [r7, #4]
    6726:	899b      	ldrh	r3, [r3, #12]
    6728:	2b01      	cmp	r3, #1
    672a:	bf8c      	ite	hi
    672c:	2301      	movhi	r3, #1
    672e:	2300      	movls	r3, #0
    6730:	b2db      	uxtb	r3, r3
    6732:	4619      	mov	r1, r3
    6734:	6838      	ldr	r0, [r7, #0]
    6736:	4b12      	ldr	r3, [pc, #72]	; (6780 <_i2c_m_sync_init_impl+0x13c>)
    6738:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    673a:	7bfa      	ldrb	r2, [r7, #15]
    673c:	4909      	ldr	r1, [pc, #36]	; (6764 <_i2c_m_sync_init_impl+0x120>)
    673e:	4613      	mov	r3, r2
    6740:	005b      	lsls	r3, r3, #1
    6742:	4413      	add	r3, r2
    6744:	00db      	lsls	r3, r3, #3
    6746:	440b      	add	r3, r1
    6748:	3312      	adds	r3, #18
    674a:	881a      	ldrh	r2, [r3, #0]
    674c:	687b      	ldr	r3, [r7, #4]
    674e:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    6750:	2300      	movs	r3, #0
}
    6752:	4618      	mov	r0, r3
    6754:	3710      	adds	r7, #16
    6756:	46bd      	mov	sp, r7
    6758:	bd80      	pop	{r7, pc}
    675a:	bf00      	nop
    675c:	00005fa1 	.word	0x00005fa1
    6760:	000058c9 	.word	0x000058c9
    6764:	20000018 	.word	0x20000018
    6768:	00005b19 	.word	0x00005b19
    676c:	00005ac1 	.word	0x00005ac1
    6770:	000058a5 	.word	0x000058a5
    6774:	00005b49 	.word	0x00005b49
    6778:	00005cf1 	.word	0x00005cf1
    677c:	00005d39 	.word	0x00005d39
    6780:	00005d75 	.word	0x00005d75

00006784 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    6784:	b580      	push	{r7, lr}
    6786:	b082      	sub	sp, #8
    6788:	af00      	add	r7, sp, #0
    678a:	6078      	str	r0, [r7, #4]
    678c:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    678e:	687b      	ldr	r3, [r7, #4]
    6790:	2b00      	cmp	r3, #0
    6792:	d004      	beq.n	679e <_spi_load_regs_master+0x1a>
    6794:	683b      	ldr	r3, [r7, #0]
    6796:	2b00      	cmp	r3, #0
    6798:	d001      	beq.n	679e <_spi_load_regs_master+0x1a>
    679a:	2301      	movs	r3, #1
    679c:	e000      	b.n	67a0 <_spi_load_regs_master+0x1c>
    679e:	2300      	movs	r3, #0
    67a0:	f003 0301 	and.w	r3, r3, #1
    67a4:	b2db      	uxtb	r3, r3
    67a6:	f640 1242 	movw	r2, #2370	; 0x942
    67aa:	4915      	ldr	r1, [pc, #84]	; (6800 <_spi_load_regs_master+0x7c>)
    67ac:	4618      	mov	r0, r3
    67ae:	4b15      	ldr	r3, [pc, #84]	; (6804 <_spi_load_regs_master+0x80>)
    67b0:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    67b2:	683b      	ldr	r3, [r7, #0]
    67b4:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    67b6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    67ba:	f023 0301 	bic.w	r3, r3, #1
    67be:	4619      	mov	r1, r3
    67c0:	6878      	ldr	r0, [r7, #4]
    67c2:	4b11      	ldr	r3, [pc, #68]	; (6808 <_spi_load_regs_master+0x84>)
    67c4:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    67c6:	683b      	ldr	r3, [r7, #0]
    67c8:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    67ca:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    67ce:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    67d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    67d6:	4619      	mov	r1, r3
    67d8:	6878      	ldr	r0, [r7, #4]
    67da:	4b0c      	ldr	r3, [pc, #48]	; (680c <_spi_load_regs_master+0x88>)
    67dc:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    67de:	683b      	ldr	r3, [r7, #0]
    67e0:	7b1b      	ldrb	r3, [r3, #12]
    67e2:	4619      	mov	r1, r3
    67e4:	6878      	ldr	r0, [r7, #4]
    67e6:	4b0a      	ldr	r3, [pc, #40]	; (6810 <_spi_load_regs_master+0x8c>)
    67e8:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    67ea:	683b      	ldr	r3, [r7, #0]
    67ec:	7b5b      	ldrb	r3, [r3, #13]
    67ee:	4619      	mov	r1, r3
    67f0:	6878      	ldr	r0, [r7, #4]
    67f2:	4b08      	ldr	r3, [pc, #32]	; (6814 <_spi_load_regs_master+0x90>)
    67f4:	4798      	blx	r3
}
    67f6:	bf00      	nop
    67f8:	3708      	adds	r7, #8
    67fa:	46bd      	mov	sp, r7
    67fc:	bd80      	pop	{r7, pc}
    67fe:	bf00      	nop
    6800:	00013184 	.word	0x00013184
    6804:	00002f09 	.word	0x00002f09
    6808:	00005bfd 	.word	0x00005bfd
    680c:	00005d15 	.word	0x00005d15
    6810:	00005d55 	.word	0x00005d55
    6814:	00005e8d 	.word	0x00005e8d

00006818 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    6818:	b580      	push	{r7, lr}
    681a:	b082      	sub	sp, #8
    681c:	af00      	add	r7, sp, #0
    681e:	6078      	str	r0, [r7, #4]
    6820:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    6822:	687b      	ldr	r3, [r7, #4]
    6824:	2b00      	cmp	r3, #0
    6826:	d004      	beq.n	6832 <_spi_load_regs_slave+0x1a>
    6828:	683b      	ldr	r3, [r7, #0]
    682a:	2b00      	cmp	r3, #0
    682c:	d001      	beq.n	6832 <_spi_load_regs_slave+0x1a>
    682e:	2301      	movs	r3, #1
    6830:	e000      	b.n	6834 <_spi_load_regs_slave+0x1c>
    6832:	2300      	movs	r3, #0
    6834:	f003 0301 	and.w	r3, r3, #1
    6838:	b2db      	uxtb	r3, r3
    683a:	f640 1256 	movw	r2, #2390	; 0x956
    683e:	491a      	ldr	r1, [pc, #104]	; (68a8 <_spi_load_regs_slave+0x90>)
    6840:	4618      	mov	r0, r3
    6842:	4b1a      	ldr	r3, [pc, #104]	; (68ac <_spi_load_regs_slave+0x94>)
    6844:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    6846:	683b      	ldr	r3, [r7, #0]
    6848:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    684a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    684e:	f023 0301 	bic.w	r3, r3, #1
    6852:	4619      	mov	r1, r3
    6854:	6878      	ldr	r0, [r7, #4]
    6856:	4b16      	ldr	r3, [pc, #88]	; (68b0 <_spi_load_regs_slave+0x98>)
    6858:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    685a:	683b      	ldr	r3, [r7, #0]
    685c:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    685e:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    6862:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    6866:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    686a:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    686e:	4619      	mov	r1, r3
    6870:	6878      	ldr	r0, [r7, #4]
    6872:	4b10      	ldr	r3, [pc, #64]	; (68b4 <_spi_load_regs_slave+0x9c>)
    6874:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    6876:	683b      	ldr	r3, [r7, #0]
    6878:	689b      	ldr	r3, [r3, #8]
    687a:	4619      	mov	r1, r3
    687c:	6878      	ldr	r0, [r7, #4]
    687e:	4b0e      	ldr	r3, [pc, #56]	; (68b8 <_spi_load_regs_slave+0xa0>)
    6880:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    6882:	683b      	ldr	r3, [r7, #0]
    6884:	7b5b      	ldrb	r3, [r3, #13]
    6886:	4619      	mov	r1, r3
    6888:	6878      	ldr	r0, [r7, #4]
    688a:	4b0c      	ldr	r3, [pc, #48]	; (68bc <_spi_load_regs_slave+0xa4>)
    688c:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    688e:	bf00      	nop
    6890:	f04f 31ff 	mov.w	r1, #4294967295
    6894:	6878      	ldr	r0, [r7, #4]
    6896:	4b0a      	ldr	r3, [pc, #40]	; (68c0 <_spi_load_regs_slave+0xa8>)
    6898:	4798      	blx	r3
    689a:	4603      	mov	r3, r0
    689c:	2b00      	cmp	r3, #0
    689e:	d1f7      	bne.n	6890 <_spi_load_regs_slave+0x78>
		;
}
    68a0:	bf00      	nop
    68a2:	3708      	adds	r7, #8
    68a4:	46bd      	mov	sp, r7
    68a6:	bd80      	pop	{r7, pc}
    68a8:	00013184 	.word	0x00013184
    68ac:	00002f09 	.word	0x00002f09
    68b0:	00005bfd 	.word	0x00005bfd
    68b4:	00005d15 	.word	0x00005d15
    68b8:	00005df9 	.word	0x00005df9
    68bc:	00005e8d 	.word	0x00005e8d
    68c0:	00005915 	.word	0x00005915

000068c4 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    68c4:	b580      	push	{r7, lr}
    68c6:	b084      	sub	sp, #16
    68c8:	af00      	add	r7, sp, #0
    68ca:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    68cc:	687b      	ldr	r3, [r7, #4]
    68ce:	4618      	mov	r0, r3
    68d0:	4b11      	ldr	r3, [pc, #68]	; (6918 <_spi_get_regs+0x54>)
    68d2:	4798      	blx	r3
    68d4:	4603      	mov	r3, r0
    68d6:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    68d8:	2300      	movs	r3, #0
    68da:	73fb      	strb	r3, [r7, #15]
    68dc:	e014      	b.n	6908 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    68de:	7bfa      	ldrb	r2, [r7, #15]
    68e0:	490e      	ldr	r1, [pc, #56]	; (691c <_spi_get_regs+0x58>)
    68e2:	4613      	mov	r3, r2
    68e4:	011b      	lsls	r3, r3, #4
    68e6:	4413      	add	r3, r2
    68e8:	440b      	add	r3, r1
    68ea:	3310      	adds	r3, #16
    68ec:	781b      	ldrb	r3, [r3, #0]
    68ee:	7bba      	ldrb	r2, [r7, #14]
    68f0:	429a      	cmp	r2, r3
    68f2:	d106      	bne.n	6902 <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    68f4:	7bfa      	ldrb	r2, [r7, #15]
    68f6:	4613      	mov	r3, r2
    68f8:	011b      	lsls	r3, r3, #4
    68fa:	4413      	add	r3, r2
    68fc:	4a07      	ldr	r2, [pc, #28]	; (691c <_spi_get_regs+0x58>)
    68fe:	4413      	add	r3, r2
    6900:	e006      	b.n	6910 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    6902:	7bfb      	ldrb	r3, [r7, #15]
    6904:	3301      	adds	r3, #1
    6906:	73fb      	strb	r3, [r7, #15]
    6908:	7bfb      	ldrb	r3, [r7, #15]
    690a:	2b01      	cmp	r3, #1
    690c:	d9e7      	bls.n	68de <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    690e:	2300      	movs	r3, #0
}
    6910:	4618      	mov	r0, r3
    6912:	3710      	adds	r7, #16
    6914:	46bd      	mov	sp, r7
    6916:	bd80      	pop	{r7, pc}
    6918:	00005ef1 	.word	0x00005ef1
    691c:	000131c0 	.word	0x000131c0

00006920 <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    6920:	b580      	push	{r7, lr}
    6922:	b084      	sub	sp, #16
    6924:	af00      	add	r7, sp, #0
    6926:	6078      	str	r0, [r7, #4]
	void *                      hw = dev->prvt;
    6928:	687b      	ldr	r3, [r7, #4]
    692a:	681b      	ldr	r3, [r3, #0]
    692c:	60fb      	str	r3, [r7, #12]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
    692e:	68f8      	ldr	r0, [r7, #12]
    6930:	4b21      	ldr	r3, [pc, #132]	; (69b8 <_spi_handler+0x98>)
    6932:	4798      	blx	r3
    6934:	4603      	mov	r3, r0
    6936:	72fb      	strb	r3, [r7, #11]
	st &= hri_sercomspi_read_INTEN_reg(hw);
    6938:	68f8      	ldr	r0, [r7, #12]
    693a:	4b20      	ldr	r3, [pc, #128]	; (69bc <_spi_handler+0x9c>)
    693c:	4798      	blx	r3
    693e:	4603      	mov	r3, r0
    6940:	461a      	mov	r2, r3
    6942:	7afb      	ldrb	r3, [r7, #11]
    6944:	4013      	ands	r3, r2
    6946:	72fb      	strb	r3, [r7, #11]

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    6948:	7afb      	ldrb	r3, [r7, #11]
    694a:	f003 0301 	and.w	r3, r3, #1
    694e:	2b00      	cmp	r3, #0
    6950:	d004      	beq.n	695c <_spi_handler+0x3c>
		dev->callbacks.tx(dev);
    6952:	687b      	ldr	r3, [r7, #4]
    6954:	689b      	ldr	r3, [r3, #8]
    6956:	6878      	ldr	r0, [r7, #4]
    6958:	4798      	blx	r3
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
	}
}
    695a:	e029      	b.n	69b0 <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    695c:	7afb      	ldrb	r3, [r7, #11]
    695e:	f003 0304 	and.w	r3, r3, #4
    6962:	2b00      	cmp	r3, #0
    6964:	d004      	beq.n	6970 <_spi_handler+0x50>
		dev->callbacks.rx(dev);
    6966:	687b      	ldr	r3, [r7, #4]
    6968:	68db      	ldr	r3, [r3, #12]
    696a:	6878      	ldr	r0, [r7, #4]
    696c:	4798      	blx	r3
}
    696e:	e01f      	b.n	69b0 <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    6970:	7afb      	ldrb	r3, [r7, #11]
    6972:	f003 0302 	and.w	r3, r3, #2
    6976:	2b00      	cmp	r3, #0
    6978:	d008      	beq.n	698c <_spi_handler+0x6c>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
    697a:	2102      	movs	r1, #2
    697c:	68f8      	ldr	r0, [r7, #12]
    697e:	4b10      	ldr	r3, [pc, #64]	; (69c0 <_spi_handler+0xa0>)
    6980:	4798      	blx	r3
		dev->callbacks.complete(dev);
    6982:	687b      	ldr	r3, [r7, #4]
    6984:	691b      	ldr	r3, [r3, #16]
    6986:	6878      	ldr	r0, [r7, #4]
    6988:	4798      	blx	r3
}
    698a:	e011      	b.n	69b0 <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    698c:	f997 300b 	ldrsb.w	r3, [r7, #11]
    6990:	2b00      	cmp	r3, #0
    6992:	da0d      	bge.n	69b0 <_spi_handler+0x90>
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
    6994:	2104      	movs	r1, #4
    6996:	68f8      	ldr	r0, [r7, #12]
    6998:	4b0a      	ldr	r3, [pc, #40]	; (69c4 <_spi_handler+0xa4>)
    699a:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    699c:	2180      	movs	r1, #128	; 0x80
    699e:	68f8      	ldr	r0, [r7, #12]
    69a0:	4b07      	ldr	r3, [pc, #28]	; (69c0 <_spi_handler+0xa0>)
    69a2:	4798      	blx	r3
		dev->callbacks.err(dev, ERR_OVERFLOW);
    69a4:	687b      	ldr	r3, [r7, #4]
    69a6:	695b      	ldr	r3, [r3, #20]
    69a8:	f06f 0112 	mvn.w	r1, #18
    69ac:	6878      	ldr	r0, [r7, #4]
    69ae:	4798      	blx	r3
}
    69b0:	bf00      	nop
    69b2:	3710      	adds	r7, #16
    69b4:	46bd      	mov	sp, r7
    69b6:	bd80      	pop	{r7, pc}
    69b8:	000059d1 	.word	0x000059d1
    69bc:	00005aa5 	.word	0x00005aa5
    69c0:	000059eb 	.word	0x000059eb
    69c4:	00005ead 	.word	0x00005ead

000069c8 <SERCOM4_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_0_Handler(void)
{
    69c8:	b580      	push	{r7, lr}
    69ca:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    69cc:	4b03      	ldr	r3, [pc, #12]	; (69dc <SERCOM4_0_Handler+0x14>)
    69ce:	681b      	ldr	r3, [r3, #0]
    69d0:	4618      	mov	r0, r3
    69d2:	4b03      	ldr	r3, [pc, #12]	; (69e0 <SERCOM4_0_Handler+0x18>)
    69d4:	4798      	blx	r3
}
    69d6:	bf00      	nop
    69d8:	bd80      	pop	{r7, pc}
    69da:	bf00      	nop
    69dc:	20001484 	.word	0x20001484
    69e0:	00006921 	.word	0x00006921

000069e4 <SERCOM4_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_1_Handler(void)
{
    69e4:	b580      	push	{r7, lr}
    69e6:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    69e8:	4b03      	ldr	r3, [pc, #12]	; (69f8 <SERCOM4_1_Handler+0x14>)
    69ea:	681b      	ldr	r3, [r3, #0]
    69ec:	4618      	mov	r0, r3
    69ee:	4b03      	ldr	r3, [pc, #12]	; (69fc <SERCOM4_1_Handler+0x18>)
    69f0:	4798      	blx	r3
}
    69f2:	bf00      	nop
    69f4:	bd80      	pop	{r7, pc}
    69f6:	bf00      	nop
    69f8:	20001484 	.word	0x20001484
    69fc:	00006921 	.word	0x00006921

00006a00 <SERCOM4_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_2_Handler(void)
{
    6a00:	b580      	push	{r7, lr}
    6a02:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    6a04:	4b03      	ldr	r3, [pc, #12]	; (6a14 <SERCOM4_2_Handler+0x14>)
    6a06:	681b      	ldr	r3, [r3, #0]
    6a08:	4618      	mov	r0, r3
    6a0a:	4b03      	ldr	r3, [pc, #12]	; (6a18 <SERCOM4_2_Handler+0x18>)
    6a0c:	4798      	blx	r3
}
    6a0e:	bf00      	nop
    6a10:	bd80      	pop	{r7, pc}
    6a12:	bf00      	nop
    6a14:	20001484 	.word	0x20001484
    6a18:	00006921 	.word	0x00006921

00006a1c <SERCOM4_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_3_Handler(void)
{
    6a1c:	b580      	push	{r7, lr}
    6a1e:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    6a20:	4b03      	ldr	r3, [pc, #12]	; (6a30 <SERCOM4_3_Handler+0x14>)
    6a22:	681b      	ldr	r3, [r3, #0]
    6a24:	4618      	mov	r0, r3
    6a26:	4b03      	ldr	r3, [pc, #12]	; (6a34 <SERCOM4_3_Handler+0x18>)
    6a28:	4798      	blx	r3
}
    6a2a:	bf00      	nop
    6a2c:	bd80      	pop	{r7, pc}
    6a2e:	bf00      	nop
    6a30:	20001484 	.word	0x20001484
    6a34:	00006921 	.word	0x00006921

00006a38 <SERCOM5_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_0_Handler(void)
{
    6a38:	b580      	push	{r7, lr}
    6a3a:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    6a3c:	4b03      	ldr	r3, [pc, #12]	; (6a4c <SERCOM5_0_Handler+0x14>)
    6a3e:	681b      	ldr	r3, [r3, #0]
    6a40:	4618      	mov	r0, r3
    6a42:	4b03      	ldr	r3, [pc, #12]	; (6a50 <SERCOM5_0_Handler+0x18>)
    6a44:	4798      	blx	r3
}
    6a46:	bf00      	nop
    6a48:	bd80      	pop	{r7, pc}
    6a4a:	bf00      	nop
    6a4c:	20001488 	.word	0x20001488
    6a50:	00006255 	.word	0x00006255

00006a54 <SERCOM5_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_1_Handler(void)
{
    6a54:	b580      	push	{r7, lr}
    6a56:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    6a58:	4b03      	ldr	r3, [pc, #12]	; (6a68 <SERCOM5_1_Handler+0x14>)
    6a5a:	681b      	ldr	r3, [r3, #0]
    6a5c:	4618      	mov	r0, r3
    6a5e:	4b03      	ldr	r3, [pc, #12]	; (6a6c <SERCOM5_1_Handler+0x18>)
    6a60:	4798      	blx	r3
}
    6a62:	bf00      	nop
    6a64:	bd80      	pop	{r7, pc}
    6a66:	bf00      	nop
    6a68:	20001488 	.word	0x20001488
    6a6c:	00006255 	.word	0x00006255

00006a70 <SERCOM5_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_2_Handler(void)
{
    6a70:	b580      	push	{r7, lr}
    6a72:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    6a74:	4b03      	ldr	r3, [pc, #12]	; (6a84 <SERCOM5_2_Handler+0x14>)
    6a76:	681b      	ldr	r3, [r3, #0]
    6a78:	4618      	mov	r0, r3
    6a7a:	4b03      	ldr	r3, [pc, #12]	; (6a88 <SERCOM5_2_Handler+0x18>)
    6a7c:	4798      	blx	r3
}
    6a7e:	bf00      	nop
    6a80:	bd80      	pop	{r7, pc}
    6a82:	bf00      	nop
    6a84:	20001488 	.word	0x20001488
    6a88:	00006255 	.word	0x00006255

00006a8c <SERCOM5_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_3_Handler(void)
{
    6a8c:	b580      	push	{r7, lr}
    6a8e:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    6a90:	4b03      	ldr	r3, [pc, #12]	; (6aa0 <SERCOM5_3_Handler+0x14>)
    6a92:	681b      	ldr	r3, [r3, #0]
    6a94:	4618      	mov	r0, r3
    6a96:	4b03      	ldr	r3, [pc, #12]	; (6aa4 <SERCOM5_3_Handler+0x18>)
    6a98:	4798      	blx	r3
}
    6a9a:	bf00      	nop
    6a9c:	bd80      	pop	{r7, pc}
    6a9e:	bf00      	nop
    6aa0:	20001488 	.word	0x20001488
    6aa4:	00006255 	.word	0x00006255

00006aa8 <SERCOM7_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_0_Handler(void)
{
    6aa8:	b580      	push	{r7, lr}
    6aaa:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    6aac:	4b03      	ldr	r3, [pc, #12]	; (6abc <SERCOM7_0_Handler+0x14>)
    6aae:	681b      	ldr	r3, [r3, #0]
    6ab0:	4618      	mov	r0, r3
    6ab2:	4b03      	ldr	r3, [pc, #12]	; (6ac0 <SERCOM7_0_Handler+0x18>)
    6ab4:	4798      	blx	r3
}
    6ab6:	bf00      	nop
    6ab8:	bd80      	pop	{r7, pc}
    6aba:	bf00      	nop
    6abc:	2000148c 	.word	0x2000148c
    6ac0:	00006255 	.word	0x00006255

00006ac4 <SERCOM7_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_1_Handler(void)
{
    6ac4:	b580      	push	{r7, lr}
    6ac6:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    6ac8:	4b03      	ldr	r3, [pc, #12]	; (6ad8 <SERCOM7_1_Handler+0x14>)
    6aca:	681b      	ldr	r3, [r3, #0]
    6acc:	4618      	mov	r0, r3
    6ace:	4b03      	ldr	r3, [pc, #12]	; (6adc <SERCOM7_1_Handler+0x18>)
    6ad0:	4798      	blx	r3
}
    6ad2:	bf00      	nop
    6ad4:	bd80      	pop	{r7, pc}
    6ad6:	bf00      	nop
    6ad8:	2000148c 	.word	0x2000148c
    6adc:	00006255 	.word	0x00006255

00006ae0 <SERCOM7_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_2_Handler(void)
{
    6ae0:	b580      	push	{r7, lr}
    6ae2:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    6ae4:	4b03      	ldr	r3, [pc, #12]	; (6af4 <SERCOM7_2_Handler+0x14>)
    6ae6:	681b      	ldr	r3, [r3, #0]
    6ae8:	4618      	mov	r0, r3
    6aea:	4b03      	ldr	r3, [pc, #12]	; (6af8 <SERCOM7_2_Handler+0x18>)
    6aec:	4798      	blx	r3
}
    6aee:	bf00      	nop
    6af0:	bd80      	pop	{r7, pc}
    6af2:	bf00      	nop
    6af4:	2000148c 	.word	0x2000148c
    6af8:	00006255 	.word	0x00006255

00006afc <SERCOM7_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_3_Handler(void)
{
    6afc:	b580      	push	{r7, lr}
    6afe:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    6b00:	4b03      	ldr	r3, [pc, #12]	; (6b10 <SERCOM7_3_Handler+0x14>)
    6b02:	681b      	ldr	r3, [r3, #0]
    6b04:	4618      	mov	r0, r3
    6b06:	4b03      	ldr	r3, [pc, #12]	; (6b14 <SERCOM7_3_Handler+0x18>)
    6b08:	4798      	blx	r3
}
    6b0a:	bf00      	nop
    6b0c:	bd80      	pop	{r7, pc}
    6b0e:	bf00      	nop
    6b10:	2000148c 	.word	0x2000148c
    6b14:	00006255 	.word	0x00006255

00006b18 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    6b18:	b580      	push	{r7, lr}
    6b1a:	b084      	sub	sp, #16
    6b1c:	af00      	add	r7, sp, #0
    6b1e:	6078      	str	r0, [r7, #4]
    6b20:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    6b22:	683b      	ldr	r3, [r7, #0]
    6b24:	4618      	mov	r0, r3
    6b26:	4b35      	ldr	r3, [pc, #212]	; (6bfc <_spi_m_sync_init+0xe4>)
    6b28:	4798      	blx	r3
    6b2a:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    6b2c:	687b      	ldr	r3, [r7, #4]
    6b2e:	2b00      	cmp	r3, #0
    6b30:	d004      	beq.n	6b3c <_spi_m_sync_init+0x24>
    6b32:	683b      	ldr	r3, [r7, #0]
    6b34:	2b00      	cmp	r3, #0
    6b36:	d001      	beq.n	6b3c <_spi_m_sync_init+0x24>
    6b38:	2301      	movs	r3, #1
    6b3a:	e000      	b.n	6b3e <_spi_m_sync_init+0x26>
    6b3c:	2300      	movs	r3, #0
    6b3e:	f003 0301 	and.w	r3, r3, #1
    6b42:	b2db      	uxtb	r3, r3
    6b44:	f640 12e9 	movw	r2, #2537	; 0x9e9
    6b48:	492d      	ldr	r1, [pc, #180]	; (6c00 <_spi_m_sync_init+0xe8>)
    6b4a:	4618      	mov	r0, r3
    6b4c:	4b2d      	ldr	r3, [pc, #180]	; (6c04 <_spi_m_sync_init+0xec>)
    6b4e:	4798      	blx	r3

	if (regs == NULL) {
    6b50:	68fb      	ldr	r3, [r7, #12]
    6b52:	2b00      	cmp	r3, #0
    6b54:	d102      	bne.n	6b5c <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    6b56:	f06f 030c 	mvn.w	r3, #12
    6b5a:	e04a      	b.n	6bf2 <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    6b5c:	2101      	movs	r1, #1
    6b5e:	6838      	ldr	r0, [r7, #0]
    6b60:	4b29      	ldr	r3, [pc, #164]	; (6c08 <_spi_m_sync_init+0xf0>)
    6b62:	4798      	blx	r3
    6b64:	4603      	mov	r3, r0
    6b66:	f083 0301 	eor.w	r3, r3, #1
    6b6a:	b2db      	uxtb	r3, r3
    6b6c:	2b00      	cmp	r3, #0
    6b6e:	d019      	beq.n	6ba4 <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    6b70:	68fb      	ldr	r3, [r7, #12]
    6b72:	681b      	ldr	r3, [r3, #0]
    6b74:	f003 031c 	and.w	r3, r3, #28
    6b78:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    6b7a:	2102      	movs	r1, #2
    6b7c:	6838      	ldr	r0, [r7, #0]
    6b7e:	4b23      	ldr	r3, [pc, #140]	; (6c0c <_spi_m_sync_init+0xf4>)
    6b80:	4798      	blx	r3
    6b82:	4603      	mov	r3, r0
    6b84:	2b00      	cmp	r3, #0
    6b86:	d006      	beq.n	6b96 <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    6b88:	6838      	ldr	r0, [r7, #0]
    6b8a:	4b21      	ldr	r3, [pc, #132]	; (6c10 <_spi_m_sync_init+0xf8>)
    6b8c:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    6b8e:	2102      	movs	r1, #2
    6b90:	6838      	ldr	r0, [r7, #0]
    6b92:	4b20      	ldr	r3, [pc, #128]	; (6c14 <_spi_m_sync_init+0xfc>)
    6b94:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    6b96:	68bb      	ldr	r3, [r7, #8]
    6b98:	f043 0301 	orr.w	r3, r3, #1
    6b9c:	4619      	mov	r1, r3
    6b9e:	6838      	ldr	r0, [r7, #0]
    6ba0:	4b1d      	ldr	r3, [pc, #116]	; (6c18 <_spi_m_sync_init+0x100>)
    6ba2:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    6ba4:	2101      	movs	r1, #1
    6ba6:	6838      	ldr	r0, [r7, #0]
    6ba8:	4b1a      	ldr	r3, [pc, #104]	; (6c14 <_spi_m_sync_init+0xfc>)
    6baa:	4798      	blx	r3

	dev->prvt = hw;
    6bac:	687b      	ldr	r3, [r7, #4]
    6bae:	683a      	ldr	r2, [r7, #0]
    6bb0:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    6bb2:	68fb      	ldr	r3, [r7, #12]
    6bb4:	681b      	ldr	r3, [r3, #0]
    6bb6:	f003 031c 	and.w	r3, r3, #28
    6bba:	2b08      	cmp	r3, #8
    6bbc:	d104      	bne.n	6bc8 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    6bbe:	68f9      	ldr	r1, [r7, #12]
    6bc0:	6838      	ldr	r0, [r7, #0]
    6bc2:	4b16      	ldr	r3, [pc, #88]	; (6c1c <_spi_m_sync_init+0x104>)
    6bc4:	4798      	blx	r3
    6bc6:	e003      	b.n	6bd0 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    6bc8:	68f9      	ldr	r1, [r7, #12]
    6bca:	6838      	ldr	r0, [r7, #0]
    6bcc:	4b14      	ldr	r3, [pc, #80]	; (6c20 <_spi_m_sync_init+0x108>)
    6bce:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    6bd0:	68fb      	ldr	r3, [r7, #12]
    6bd2:	685b      	ldr	r3, [r3, #4]
    6bd4:	f003 0307 	and.w	r3, r3, #7
    6bd8:	2b00      	cmp	r3, #0
    6bda:	d101      	bne.n	6be0 <_spi_m_sync_init+0xc8>
    6bdc:	2201      	movs	r2, #1
    6bde:	e000      	b.n	6be2 <_spi_m_sync_init+0xca>
    6be0:	2202      	movs	r2, #2
    6be2:	687b      	ldr	r3, [r7, #4]
    6be4:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    6be6:	68fb      	ldr	r3, [r7, #12]
    6be8:	89db      	ldrh	r3, [r3, #14]
    6bea:	b29a      	uxth	r2, r3
    6bec:	687b      	ldr	r3, [r7, #4]
    6bee:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    6bf0:	2300      	movs	r3, #0
}
    6bf2:	4618      	mov	r0, r3
    6bf4:	3710      	adds	r7, #16
    6bf6:	46bd      	mov	sp, r7
    6bf8:	bd80      	pop	{r7, pc}
    6bfa:	bf00      	nop
    6bfc:	000068c5 	.word	0x000068c5
    6c00:	00013184 	.word	0x00013184
    6c04:	00002f09 	.word	0x00002f09
    6c08:	00005915 	.word	0x00005915
    6c0c:	00005bcd 	.word	0x00005bcd
    6c10:	00005ba5 	.word	0x00005ba5
    6c14:	000058f1 	.word	0x000058f1
    6c18:	00005bfd 	.word	0x00005bfd
    6c1c:	00006819 	.word	0x00006819
    6c20:	00006785 	.word	0x00006785

00006c24 <_spi_m_async_init>:
{
	return _spi_m_sync_init(dev, hw);
}

int32_t _spi_m_async_init(struct _spi_async_dev *dev, void *const hw)
{
    6c24:	b580      	push	{r7, lr}
    6c26:	b086      	sub	sp, #24
    6c28:	af00      	add	r7, sp, #0
    6c2a:	6078      	str	r0, [r7, #4]
    6c2c:	6039      	str	r1, [r7, #0]
	struct _spi_async_dev *spid = dev;
    6c2e:	687b      	ldr	r3, [r7, #4]
    6c30:	60fb      	str	r3, [r7, #12]
	/* Do hardware initialize. */
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    6c32:	6839      	ldr	r1, [r7, #0]
    6c34:	6878      	ldr	r0, [r7, #4]
    6c36:	4b1a      	ldr	r3, [pc, #104]	; (6ca0 <_spi_m_async_init+0x7c>)
    6c38:	4798      	blx	r3
    6c3a:	60b8      	str	r0, [r7, #8]

	if (rc < 0) {
    6c3c:	68bb      	ldr	r3, [r7, #8]
    6c3e:	2b00      	cmp	r3, #0
    6c40:	da01      	bge.n	6c46 <_spi_m_async_init+0x22>
		return rc;
    6c42:	68bb      	ldr	r3, [r7, #8]
    6c44:	e028      	b.n	6c98 <_spi_m_async_init+0x74>
	}

	_sercom_init_irq_param(hw, (void *)dev);
    6c46:	6879      	ldr	r1, [r7, #4]
    6c48:	6838      	ldr	r0, [r7, #0]
    6c4a:	4b16      	ldr	r3, [pc, #88]	; (6ca4 <_spi_m_async_init+0x80>)
    6c4c:	4798      	blx	r3
	/* Initialize callbacks: must use them */
	spid->callbacks.complete = NULL;
    6c4e:	68fb      	ldr	r3, [r7, #12]
    6c50:	2200      	movs	r2, #0
    6c52:	611a      	str	r2, [r3, #16]
	spid->callbacks.rx       = NULL;
    6c54:	68fb      	ldr	r3, [r7, #12]
    6c56:	2200      	movs	r2, #0
    6c58:	60da      	str	r2, [r3, #12]
	spid->callbacks.tx       = NULL;
    6c5a:	68fb      	ldr	r3, [r7, #12]
    6c5c:	2200      	movs	r2, #0
    6c5e:	609a      	str	r2, [r3, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    6c60:	6838      	ldr	r0, [r7, #0]
    6c62:	4b11      	ldr	r3, [pc, #68]	; (6ca8 <_spi_m_async_init+0x84>)
    6c64:	4798      	blx	r3
    6c66:	4603      	mov	r3, r0
    6c68:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    6c6a:	2300      	movs	r3, #0
    6c6c:	613b      	str	r3, [r7, #16]
    6c6e:	e00f      	b.n	6c90 <_spi_m_async_init+0x6c>
		NVIC_DisableIRQ((IRQn_Type)irq);
    6c70:	7dfb      	ldrb	r3, [r7, #23]
    6c72:	b21b      	sxth	r3, r3
    6c74:	4618      	mov	r0, r3
    6c76:	4b0d      	ldr	r3, [pc, #52]	; (6cac <_spi_m_async_init+0x88>)
    6c78:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    6c7a:	7dfb      	ldrb	r3, [r7, #23]
    6c7c:	b21b      	sxth	r3, r3
    6c7e:	4618      	mov	r0, r3
    6c80:	4b0b      	ldr	r3, [pc, #44]	; (6cb0 <_spi_m_async_init+0x8c>)
    6c82:	4798      	blx	r3
		irq++;
    6c84:	7dfb      	ldrb	r3, [r7, #23]
    6c86:	3301      	adds	r3, #1
    6c88:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    6c8a:	693b      	ldr	r3, [r7, #16]
    6c8c:	3301      	adds	r3, #1
    6c8e:	613b      	str	r3, [r7, #16]
    6c90:	693b      	ldr	r3, [r7, #16]
    6c92:	2b03      	cmp	r3, #3
    6c94:	d9ec      	bls.n	6c70 <_spi_m_async_init+0x4c>
	}

	return ERR_NONE;
    6c96:	2300      	movs	r3, #0
}
    6c98:	4618      	mov	r0, r3
    6c9a:	3718      	adds	r7, #24
    6c9c:	46bd      	mov	sp, r7
    6c9e:	bd80      	pop	{r7, pc}
    6ca0:	00006b19 	.word	0x00006b19
    6ca4:	00005f4d 	.word	0x00005f4d
    6ca8:	00006359 	.word	0x00006359
    6cac:	00005825 	.word	0x00005825
    6cb0:	00005869 	.word	0x00005869

00006cb4 <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    6cb4:	b580      	push	{r7, lr}
    6cb6:	b082      	sub	sp, #8
    6cb8:	af00      	add	r7, sp, #0
    6cba:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    6cbc:	bf00      	nop
    6cbe:	2103      	movs	r1, #3
    6cc0:	6878      	ldr	r0, [r7, #4]
    6cc2:	4b06      	ldr	r3, [pc, #24]	; (6cdc <_spi_wait_bus_idle+0x28>)
    6cc4:	4798      	blx	r3
    6cc6:	4603      	mov	r3, r0
    6cc8:	2b00      	cmp	r3, #0
    6cca:	d0f8      	beq.n	6cbe <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    6ccc:	2103      	movs	r1, #3
    6cce:	6878      	ldr	r0, [r7, #4]
    6cd0:	4b03      	ldr	r3, [pc, #12]	; (6ce0 <_spi_wait_bus_idle+0x2c>)
    6cd2:	4798      	blx	r3
}
    6cd4:	bf00      	nop
    6cd6:	3708      	adds	r7, #8
    6cd8:	46bd      	mov	sp, r7
    6cda:	bd80      	pop	{r7, pc}
    6cdc:	000059a9 	.word	0x000059a9
    6ce0:	000059eb 	.word	0x000059eb

00006ce4 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    6ce4:	b580      	push	{r7, lr}
    6ce6:	b086      	sub	sp, #24
    6ce8:	af00      	add	r7, sp, #0
    6cea:	60f8      	str	r0, [r7, #12]
    6cec:	60b9      	str	r1, [r7, #8]
    6cee:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    6cf0:	68bb      	ldr	r3, [r7, #8]
    6cf2:	f003 0304 	and.w	r3, r3, #4
    6cf6:	2b00      	cmp	r3, #0
    6cf8:	d101      	bne.n	6cfe <_spi_rx_check_and_receive+0x1a>
		return false;
    6cfa:	2300      	movs	r3, #0
    6cfc:	e022      	b.n	6d44 <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    6cfe:	68f8      	ldr	r0, [r7, #12]
    6d00:	4b12      	ldr	r3, [pc, #72]	; (6d4c <_spi_rx_check_and_receive+0x68>)
    6d02:	4798      	blx	r3
    6d04:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    6d06:	687b      	ldr	r3, [r7, #4]
    6d08:	685b      	ldr	r3, [r3, #4]
    6d0a:	2b00      	cmp	r3, #0
    6d0c:	d014      	beq.n	6d38 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    6d0e:	687b      	ldr	r3, [r7, #4]
    6d10:	685b      	ldr	r3, [r3, #4]
    6d12:	1c59      	adds	r1, r3, #1
    6d14:	687a      	ldr	r2, [r7, #4]
    6d16:	6051      	str	r1, [r2, #4]
    6d18:	697a      	ldr	r2, [r7, #20]
    6d1a:	b2d2      	uxtb	r2, r2
    6d1c:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    6d1e:	687b      	ldr	r3, [r7, #4]
    6d20:	7c1b      	ldrb	r3, [r3, #16]
    6d22:	2b01      	cmp	r3, #1
    6d24:	d908      	bls.n	6d38 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    6d26:	687b      	ldr	r3, [r7, #4]
    6d28:	685b      	ldr	r3, [r3, #4]
    6d2a:	1c59      	adds	r1, r3, #1
    6d2c:	687a      	ldr	r2, [r7, #4]
    6d2e:	6051      	str	r1, [r2, #4]
    6d30:	697a      	ldr	r2, [r7, #20]
    6d32:	0a12      	lsrs	r2, r2, #8
    6d34:	b2d2      	uxtb	r2, r2
    6d36:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    6d38:	687b      	ldr	r3, [r7, #4]
    6d3a:	68db      	ldr	r3, [r3, #12]
    6d3c:	1c5a      	adds	r2, r3, #1
    6d3e:	687b      	ldr	r3, [r7, #4]
    6d40:	60da      	str	r2, [r3, #12]

	return true;
    6d42:	2301      	movs	r3, #1
}
    6d44:	4618      	mov	r0, r3
    6d46:	3718      	adds	r7, #24
    6d48:	46bd      	mov	sp, r7
    6d4a:	bd80      	pop	{r7, pc}
    6d4c:	00005e75 	.word	0x00005e75

00006d50 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    6d50:	b580      	push	{r7, lr}
    6d52:	b086      	sub	sp, #24
    6d54:	af00      	add	r7, sp, #0
    6d56:	60f8      	str	r0, [r7, #12]
    6d58:	60b9      	str	r1, [r7, #8]
    6d5a:	607a      	str	r2, [r7, #4]
    6d5c:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    6d5e:	68bb      	ldr	r3, [r7, #8]
    6d60:	f003 0301 	and.w	r3, r3, #1
    6d64:	2b00      	cmp	r3, #0
    6d66:	d028      	beq.n	6dba <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    6d68:	687b      	ldr	r3, [r7, #4]
    6d6a:	681b      	ldr	r3, [r3, #0]
    6d6c:	2b00      	cmp	r3, #0
    6d6e:	d018      	beq.n	6da2 <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    6d70:	687b      	ldr	r3, [r7, #4]
    6d72:	681b      	ldr	r3, [r3, #0]
    6d74:	1c59      	adds	r1, r3, #1
    6d76:	687a      	ldr	r2, [r7, #4]
    6d78:	6011      	str	r1, [r2, #0]
    6d7a:	781b      	ldrb	r3, [r3, #0]
    6d7c:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    6d7e:	687b      	ldr	r3, [r7, #4]
    6d80:	7c1b      	ldrb	r3, [r3, #16]
    6d82:	2b01      	cmp	r3, #1
    6d84:	d90f      	bls.n	6da6 <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    6d86:	687b      	ldr	r3, [r7, #4]
    6d88:	681b      	ldr	r3, [r3, #0]
    6d8a:	781b      	ldrb	r3, [r3, #0]
    6d8c:	021b      	lsls	r3, r3, #8
    6d8e:	461a      	mov	r2, r3
    6d90:	697b      	ldr	r3, [r7, #20]
    6d92:	4313      	orrs	r3, r2
    6d94:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    6d96:	687b      	ldr	r3, [r7, #4]
    6d98:	681b      	ldr	r3, [r3, #0]
    6d9a:	1c5a      	adds	r2, r3, #1
    6d9c:	687b      	ldr	r3, [r7, #4]
    6d9e:	601a      	str	r2, [r3, #0]
    6da0:	e001      	b.n	6da6 <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    6da2:	887b      	ldrh	r3, [r7, #2]
    6da4:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    6da6:	687b      	ldr	r3, [r7, #4]
    6da8:	689b      	ldr	r3, [r3, #8]
    6daa:	1c5a      	adds	r2, r3, #1
    6dac:	687b      	ldr	r3, [r7, #4]
    6dae:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    6db0:	6979      	ldr	r1, [r7, #20]
    6db2:	68f8      	ldr	r0, [r7, #12]
    6db4:	4b03      	ldr	r3, [pc, #12]	; (6dc4 <_spi_tx_check_and_send+0x74>)
    6db6:	4798      	blx	r3
    6db8:	e000      	b.n	6dbc <_spi_tx_check_and_send+0x6c>
		return;
    6dba:	bf00      	nop
}
    6dbc:	3718      	adds	r7, #24
    6dbe:	46bd      	mov	sp, r7
    6dc0:	bd80      	pop	{r7, pc}
    6dc2:	bf00      	nop
    6dc4:	00005e59 	.word	0x00005e59

00006dc8 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    6dc8:	b580      	push	{r7, lr}
    6dca:	b082      	sub	sp, #8
    6dcc:	af00      	add	r7, sp, #0
    6dce:	6078      	str	r0, [r7, #4]
    6dd0:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    6dd2:	687b      	ldr	r3, [r7, #4]
    6dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    6dd8:	2b00      	cmp	r3, #0
    6dda:	d00b      	beq.n	6df4 <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    6ddc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6de0:	6838      	ldr	r0, [r7, #0]
    6de2:	4b07      	ldr	r3, [pc, #28]	; (6e00 <_spi_err_check+0x38>)
    6de4:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    6de6:	2180      	movs	r1, #128	; 0x80
    6de8:	6838      	ldr	r0, [r7, #0]
    6dea:	4b06      	ldr	r3, [pc, #24]	; (6e04 <_spi_err_check+0x3c>)
    6dec:	4798      	blx	r3
		return ERR_OVERFLOW;
    6dee:	f06f 0312 	mvn.w	r3, #18
    6df2:	e000      	b.n	6df6 <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    6df4:	2300      	movs	r3, #0
}
    6df6:	4618      	mov	r0, r3
    6df8:	3708      	adds	r7, #8
    6dfa:	46bd      	mov	sp, r7
    6dfc:	bd80      	pop	{r7, pc}
    6dfe:	bf00      	nop
    6e00:	00005ead 	.word	0x00005ead
    6e04:	000059eb 	.word	0x000059eb

00006e08 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    6e08:	b590      	push	{r4, r7, lr}
    6e0a:	b08b      	sub	sp, #44	; 0x2c
    6e0c:	af00      	add	r7, sp, #0
    6e0e:	6078      	str	r0, [r7, #4]
    6e10:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    6e12:	687b      	ldr	r3, [r7, #4]
    6e14:	681b      	ldr	r3, [r3, #0]
    6e16:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    6e18:	2300      	movs	r3, #0
    6e1a:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    6e1c:	683b      	ldr	r3, [r7, #0]
    6e1e:	681b      	ldr	r3, [r3, #0]
    6e20:	60bb      	str	r3, [r7, #8]
    6e22:	683b      	ldr	r3, [r7, #0]
    6e24:	685b      	ldr	r3, [r3, #4]
    6e26:	60fb      	str	r3, [r7, #12]
    6e28:	2300      	movs	r3, #0
    6e2a:	613b      	str	r3, [r7, #16]
    6e2c:	2300      	movs	r3, #0
    6e2e:	617b      	str	r3, [r7, #20]
    6e30:	687b      	ldr	r3, [r7, #4]
    6e32:	791b      	ldrb	r3, [r3, #4]
    6e34:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    6e36:	687b      	ldr	r3, [r7, #4]
    6e38:	2b00      	cmp	r3, #0
    6e3a:	d004      	beq.n	6e46 <_spi_m_sync_trans+0x3e>
    6e3c:	6a3b      	ldr	r3, [r7, #32]
    6e3e:	2b00      	cmp	r3, #0
    6e40:	d001      	beq.n	6e46 <_spi_m_sync_trans+0x3e>
    6e42:	2301      	movs	r3, #1
    6e44:	e000      	b.n	6e48 <_spi_m_sync_trans+0x40>
    6e46:	2300      	movs	r3, #0
    6e48:	f003 0301 	and.w	r3, r3, #1
    6e4c:	b2db      	uxtb	r3, r3
    6e4e:	f640 324d 	movw	r2, #2893	; 0xb4d
    6e52:	492b      	ldr	r1, [pc, #172]	; (6f00 <_spi_m_sync_trans+0xf8>)
    6e54:	4618      	mov	r0, r3
    6e56:	4b2b      	ldr	r3, [pc, #172]	; (6f04 <_spi_m_sync_trans+0xfc>)
    6e58:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    6e5a:	2107      	movs	r1, #7
    6e5c:	6a38      	ldr	r0, [r7, #32]
    6e5e:	4b2a      	ldr	r3, [pc, #168]	; (6f08 <_spi_m_sync_trans+0x100>)
    6e60:	4798      	blx	r3
    6e62:	4603      	mov	r3, r0
    6e64:	2b00      	cmp	r3, #0
    6e66:	d002      	beq.n	6e6e <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    6e68:	f06f 0303 	mvn.w	r3, #3
    6e6c:	e043      	b.n	6ef6 <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    6e6e:	6a38      	ldr	r0, [r7, #32]
    6e70:	4b26      	ldr	r3, [pc, #152]	; (6f0c <_spi_m_sync_trans+0x104>)
    6e72:	4798      	blx	r3
    6e74:	4603      	mov	r3, r0
    6e76:	f083 0301 	eor.w	r3, r3, #1
    6e7a:	b2db      	uxtb	r3, r3
    6e7c:	2b00      	cmp	r3, #0
    6e7e:	d002      	beq.n	6e86 <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    6e80:	f06f 0313 	mvn.w	r3, #19
    6e84:	e037      	b.n	6ef6 <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    6e86:	6a38      	ldr	r0, [r7, #32]
    6e88:	4b21      	ldr	r3, [pc, #132]	; (6f10 <_spi_m_sync_trans+0x108>)
    6e8a:	4798      	blx	r3
    6e8c:	4603      	mov	r3, r0
    6e8e:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    6e90:	f107 0308 	add.w	r3, r7, #8
    6e94:	461a      	mov	r2, r3
    6e96:	69f9      	ldr	r1, [r7, #28]
    6e98:	6a38      	ldr	r0, [r7, #32]
    6e9a:	4b1e      	ldr	r3, [pc, #120]	; (6f14 <_spi_m_sync_trans+0x10c>)
    6e9c:	4798      	blx	r3
    6e9e:	4603      	mov	r3, r0
    6ea0:	f083 0301 	eor.w	r3, r3, #1
    6ea4:	b2db      	uxtb	r3, r3
    6ea6:	2b00      	cmp	r3, #0
    6ea8:	d00b      	beq.n	6ec2 <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    6eaa:	697a      	ldr	r2, [r7, #20]
    6eac:	693b      	ldr	r3, [r7, #16]
    6eae:	429a      	cmp	r2, r3
    6eb0:	d307      	bcc.n	6ec2 <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    6eb2:	687b      	ldr	r3, [r7, #4]
    6eb4:	88db      	ldrh	r3, [r3, #6]
    6eb6:	f107 0208 	add.w	r2, r7, #8
    6eba:	69f9      	ldr	r1, [r7, #28]
    6ebc:	6a38      	ldr	r0, [r7, #32]
    6ebe:	4c16      	ldr	r4, [pc, #88]	; (6f18 <_spi_m_sync_trans+0x110>)
    6ec0:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    6ec2:	6a39      	ldr	r1, [r7, #32]
    6ec4:	69f8      	ldr	r0, [r7, #28]
    6ec6:	4b15      	ldr	r3, [pc, #84]	; (6f1c <_spi_m_sync_trans+0x114>)
    6ec8:	4798      	blx	r3
    6eca:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    6ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6ece:	2b00      	cmp	r3, #0
    6ed0:	db0c      	blt.n	6eec <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    6ed2:	693a      	ldr	r2, [r7, #16]
    6ed4:	683b      	ldr	r3, [r7, #0]
    6ed6:	689b      	ldr	r3, [r3, #8]
    6ed8:	429a      	cmp	r2, r3
    6eda:	d3d4      	bcc.n	6e86 <_spi_m_sync_trans+0x7e>
    6edc:	697a      	ldr	r2, [r7, #20]
    6ede:	683b      	ldr	r3, [r7, #0]
    6ee0:	689b      	ldr	r3, [r3, #8]
    6ee2:	429a      	cmp	r2, r3
    6ee4:	d3cf      	bcc.n	6e86 <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    6ee6:	693b      	ldr	r3, [r7, #16]
    6ee8:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    6eea:	e000      	b.n	6eee <_spi_m_sync_trans+0xe6>
			break;
    6eec:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    6eee:	6a38      	ldr	r0, [r7, #32]
    6ef0:	4b0b      	ldr	r3, [pc, #44]	; (6f20 <_spi_m_sync_trans+0x118>)
    6ef2:	4798      	blx	r3

	return rc;
    6ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    6ef6:	4618      	mov	r0, r3
    6ef8:	372c      	adds	r7, #44	; 0x2c
    6efa:	46bd      	mov	sp, r7
    6efc:	bd90      	pop	{r4, r7, pc}
    6efe:	bf00      	nop
    6f00:	00013184 	.word	0x00013184
    6f04:	00002f09 	.word	0x00002f09
    6f08:	00005915 	.word	0x00005915
    6f0c:	00005b6d 	.word	0x00005b6d
    6f10:	000059d1 	.word	0x000059d1
    6f14:	00006ce5 	.word	0x00006ce5
    6f18:	00006d51 	.word	0x00006d51
    6f1c:	00006dc9 	.word	0x00006dc9
    6f20:	00006cb5 	.word	0x00006cb5

00006f24 <_spi_m_async_enable_tx>:

int32_t _spi_m_async_enable_tx(struct _spi_async_dev *dev, bool state)
{
    6f24:	b580      	push	{r7, lr}
    6f26:	b084      	sub	sp, #16
    6f28:	af00      	add	r7, sp, #0
    6f2a:	6078      	str	r0, [r7, #4]
    6f2c:	460b      	mov	r3, r1
    6f2e:	70fb      	strb	r3, [r7, #3]
	void *hw = dev->prvt;
    6f30:	687b      	ldr	r3, [r7, #4]
    6f32:	681b      	ldr	r3, [r3, #0]
    6f34:	60fb      	str	r3, [r7, #12]

	ASSERT(dev && hw);
    6f36:	687b      	ldr	r3, [r7, #4]
    6f38:	2b00      	cmp	r3, #0
    6f3a:	d004      	beq.n	6f46 <_spi_m_async_enable_tx+0x22>
    6f3c:	68fb      	ldr	r3, [r7, #12]
    6f3e:	2b00      	cmp	r3, #0
    6f40:	d001      	beq.n	6f46 <_spi_m_async_enable_tx+0x22>
    6f42:	2301      	movs	r3, #1
    6f44:	e000      	b.n	6f48 <_spi_m_async_enable_tx+0x24>
    6f46:	2300      	movs	r3, #0
    6f48:	f003 0301 	and.w	r3, r3, #1
    6f4c:	b2db      	uxtb	r3, r3
    6f4e:	f640 3279 	movw	r2, #2937	; 0xb79
    6f52:	4909      	ldr	r1, [pc, #36]	; (6f78 <_spi_m_async_enable_tx+0x54>)
    6f54:	4618      	mov	r0, r3
    6f56:	4b09      	ldr	r3, [pc, #36]	; (6f7c <_spi_m_async_enable_tx+0x58>)
    6f58:	4798      	blx	r3

	if (state) {
    6f5a:	78fb      	ldrb	r3, [r7, #3]
    6f5c:	2b00      	cmp	r3, #0
    6f5e:	d003      	beq.n	6f68 <_spi_m_async_enable_tx+0x44>
		hri_sercomspi_set_INTEN_DRE_bit(hw);
    6f60:	68f8      	ldr	r0, [r7, #12]
    6f62:	4b07      	ldr	r3, [pc, #28]	; (6f80 <_spi_m_async_enable_tx+0x5c>)
    6f64:	4798      	blx	r3
    6f66:	e002      	b.n	6f6e <_spi_m_async_enable_tx+0x4a>
	} else {
		hri_sercomspi_clear_INTEN_DRE_bit(hw);
    6f68:	68f8      	ldr	r0, [r7, #12]
    6f6a:	4b06      	ldr	r3, [pc, #24]	; (6f84 <_spi_m_async_enable_tx+0x60>)
    6f6c:	4798      	blx	r3
	}

	return ERR_NONE;
    6f6e:	2300      	movs	r3, #0
}
    6f70:	4618      	mov	r0, r3
    6f72:	3710      	adds	r7, #16
    6f74:	46bd      	mov	sp, r7
    6f76:	bd80      	pop	{r7, pc}
    6f78:	00013184 	.word	0x00013184
    6f7c:	00002f09 	.word	0x00002f09
    6f80:	00005a09 	.word	0x00005a09
    6f84:	00005a23 	.word	0x00005a23

00006f88 <_spi_m_async_enable_rx>:
{
	return _spi_m_async_enable_tx(dev, state);
}

int32_t _spi_m_async_enable_rx(struct _spi_async_dev *dev, bool state)
{
    6f88:	b580      	push	{r7, lr}
    6f8a:	b084      	sub	sp, #16
    6f8c:	af00      	add	r7, sp, #0
    6f8e:	6078      	str	r0, [r7, #4]
    6f90:	460b      	mov	r3, r1
    6f92:	70fb      	strb	r3, [r7, #3]
	void *hw = dev->prvt;
    6f94:	687b      	ldr	r3, [r7, #4]
    6f96:	681b      	ldr	r3, [r3, #0]
    6f98:	60fb      	str	r3, [r7, #12]

	ASSERT(dev);
    6f9a:	687b      	ldr	r3, [r7, #4]
    6f9c:	2b00      	cmp	r3, #0
    6f9e:	bf14      	ite	ne
    6fa0:	2301      	movne	r3, #1
    6fa2:	2300      	moveq	r3, #0
    6fa4:	b2db      	uxtb	r3, r3
    6fa6:	f640 328d 	movw	r2, #2957	; 0xb8d
    6faa:	490f      	ldr	r1, [pc, #60]	; (6fe8 <_spi_m_async_enable_rx+0x60>)
    6fac:	4618      	mov	r0, r3
    6fae:	4b0f      	ldr	r3, [pc, #60]	; (6fec <_spi_m_async_enable_rx+0x64>)
    6fb0:	4798      	blx	r3
	ASSERT(hw);
    6fb2:	68fb      	ldr	r3, [r7, #12]
    6fb4:	2b00      	cmp	r3, #0
    6fb6:	bf14      	ite	ne
    6fb8:	2301      	movne	r3, #1
    6fba:	2300      	moveq	r3, #0
    6fbc:	b2db      	uxtb	r3, r3
    6fbe:	f640 328e 	movw	r2, #2958	; 0xb8e
    6fc2:	4909      	ldr	r1, [pc, #36]	; (6fe8 <_spi_m_async_enable_rx+0x60>)
    6fc4:	4618      	mov	r0, r3
    6fc6:	4b09      	ldr	r3, [pc, #36]	; (6fec <_spi_m_async_enable_rx+0x64>)
    6fc8:	4798      	blx	r3

	if (state) {
    6fca:	78fb      	ldrb	r3, [r7, #3]
    6fcc:	2b00      	cmp	r3, #0
    6fce:	d003      	beq.n	6fd8 <_spi_m_async_enable_rx+0x50>
		hri_sercomspi_set_INTEN_RXC_bit(hw);
    6fd0:	68f8      	ldr	r0, [r7, #12]
    6fd2:	4b07      	ldr	r3, [pc, #28]	; (6ff0 <_spi_m_async_enable_rx+0x68>)
    6fd4:	4798      	blx	r3
    6fd6:	e002      	b.n	6fde <_spi_m_async_enable_rx+0x56>
	} else {
		hri_sercomspi_clear_INTEN_RXC_bit(hw);
    6fd8:	68f8      	ldr	r0, [r7, #12]
    6fda:	4b06      	ldr	r3, [pc, #24]	; (6ff4 <_spi_m_async_enable_rx+0x6c>)
    6fdc:	4798      	blx	r3
	}

	return ERR_NONE;
    6fde:	2300      	movs	r3, #0
}
    6fe0:	4618      	mov	r0, r3
    6fe2:	3710      	adds	r7, #16
    6fe4:	46bd      	mov	sp, r7
    6fe6:	bd80      	pop	{r7, pc}
    6fe8:	00013184 	.word	0x00013184
    6fec:	00002f09 	.word	0x00002f09
    6ff0:	00005a71 	.word	0x00005a71
    6ff4:	00005a8b 	.word	0x00005a8b

00006ff8 <_spi_m_async_enable_tx_complete>:
{
	return _spi_m_async_enable_rx(dev, state);
}

int32_t _spi_m_async_enable_tx_complete(struct _spi_async_dev *dev, bool state)
{
    6ff8:	b580      	push	{r7, lr}
    6ffa:	b082      	sub	sp, #8
    6ffc:	af00      	add	r7, sp, #0
    6ffe:	6078      	str	r0, [r7, #4]
    7000:	460b      	mov	r3, r1
    7002:	70fb      	strb	r3, [r7, #3]
	ASSERT(dev && dev->prvt);
    7004:	687b      	ldr	r3, [r7, #4]
    7006:	2b00      	cmp	r3, #0
    7008:	d005      	beq.n	7016 <_spi_m_async_enable_tx_complete+0x1e>
    700a:	687b      	ldr	r3, [r7, #4]
    700c:	681b      	ldr	r3, [r3, #0]
    700e:	2b00      	cmp	r3, #0
    7010:	d001      	beq.n	7016 <_spi_m_async_enable_tx_complete+0x1e>
    7012:	2301      	movs	r3, #1
    7014:	e000      	b.n	7018 <_spi_m_async_enable_tx_complete+0x20>
    7016:	2300      	movs	r3, #0
    7018:	f003 0301 	and.w	r3, r3, #1
    701c:	b2db      	uxtb	r3, r3
    701e:	f44f 623a 	mov.w	r2, #2976	; 0xba0
    7022:	490b      	ldr	r1, [pc, #44]	; (7050 <_spi_m_async_enable_tx_complete+0x58>)
    7024:	4618      	mov	r0, r3
    7026:	4b0b      	ldr	r3, [pc, #44]	; (7054 <_spi_m_async_enable_tx_complete+0x5c>)
    7028:	4798      	blx	r3

	if (state) {
    702a:	78fb      	ldrb	r3, [r7, #3]
    702c:	2b00      	cmp	r3, #0
    702e:	d005      	beq.n	703c <_spi_m_async_enable_tx_complete+0x44>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    7030:	687b      	ldr	r3, [r7, #4]
    7032:	681b      	ldr	r3, [r3, #0]
    7034:	4618      	mov	r0, r3
    7036:	4b08      	ldr	r3, [pc, #32]	; (7058 <_spi_m_async_enable_tx_complete+0x60>)
    7038:	4798      	blx	r3
    703a:	e004      	b.n	7046 <_spi_m_async_enable_tx_complete+0x4e>
	} else {
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    703c:	687b      	ldr	r3, [r7, #4]
    703e:	681b      	ldr	r3, [r3, #0]
    7040:	4618      	mov	r0, r3
    7042:	4b06      	ldr	r3, [pc, #24]	; (705c <_spi_m_async_enable_tx_complete+0x64>)
    7044:	4798      	blx	r3
	}

	return ERR_NONE;
    7046:	2300      	movs	r3, #0
}
    7048:	4618      	mov	r0, r3
    704a:	3708      	adds	r7, #8
    704c:	46bd      	mov	sp, r7
    704e:	bd80      	pop	{r7, pc}
    7050:	00013184 	.word	0x00013184
    7054:	00002f09 	.word	0x00002f09
    7058:	00005a3d 	.word	0x00005a3d
    705c:	00005a57 	.word	0x00005a57

00007060 <_spi_m_async_write_one>:
{
	return _spi_m_async_enable_tx_complete(dev, state);
}

int32_t _spi_m_async_write_one(struct _spi_async_dev *dev, uint16_t data)
{
    7060:	b580      	push	{r7, lr}
    7062:	b082      	sub	sp, #8
    7064:	af00      	add	r7, sp, #0
    7066:	6078      	str	r0, [r7, #4]
    7068:	460b      	mov	r3, r1
    706a:	807b      	strh	r3, [r7, #2]
	ASSERT(dev && dev->prvt);
    706c:	687b      	ldr	r3, [r7, #4]
    706e:	2b00      	cmp	r3, #0
    7070:	d005      	beq.n	707e <_spi_m_async_write_one+0x1e>
    7072:	687b      	ldr	r3, [r7, #4]
    7074:	681b      	ldr	r3, [r3, #0]
    7076:	2b00      	cmp	r3, #0
    7078:	d001      	beq.n	707e <_spi_m_async_write_one+0x1e>
    707a:	2301      	movs	r3, #1
    707c:	e000      	b.n	7080 <_spi_m_async_write_one+0x20>
    707e:	2300      	movs	r3, #0
    7080:	f003 0301 	and.w	r3, r3, #1
    7084:	b2db      	uxtb	r3, r3
    7086:	f640 32b2 	movw	r2, #2994	; 0xbb2
    708a:	4908      	ldr	r1, [pc, #32]	; (70ac <_spi_m_async_write_one+0x4c>)
    708c:	4618      	mov	r0, r3
    708e:	4b08      	ldr	r3, [pc, #32]	; (70b0 <_spi_m_async_write_one+0x50>)
    7090:	4798      	blx	r3

	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    7092:	687b      	ldr	r3, [r7, #4]
    7094:	681b      	ldr	r3, [r3, #0]
    7096:	887a      	ldrh	r2, [r7, #2]
    7098:	4611      	mov	r1, r2
    709a:	4618      	mov	r0, r3
    709c:	4b05      	ldr	r3, [pc, #20]	; (70b4 <_spi_m_async_write_one+0x54>)
    709e:	4798      	blx	r3

	return ERR_NONE;
    70a0:	2300      	movs	r3, #0
}
    70a2:	4618      	mov	r0, r3
    70a4:	3708      	adds	r7, #8
    70a6:	46bd      	mov	sp, r7
    70a8:	bd80      	pop	{r7, pc}
    70aa:	bf00      	nop
    70ac:	00013184 	.word	0x00013184
    70b0:	00002f09 	.word	0x00002f09
    70b4:	00005e59 	.word	0x00005e59

000070b8 <_spi_m_async_read_one>:

	return ERR_NONE;
}

uint16_t _spi_m_async_read_one(struct _spi_async_dev *dev)
{
    70b8:	b580      	push	{r7, lr}
    70ba:	b082      	sub	sp, #8
    70bc:	af00      	add	r7, sp, #0
    70be:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    70c0:	687b      	ldr	r3, [r7, #4]
    70c2:	2b00      	cmp	r3, #0
    70c4:	d005      	beq.n	70d2 <_spi_m_async_read_one+0x1a>
    70c6:	687b      	ldr	r3, [r7, #4]
    70c8:	681b      	ldr	r3, [r3, #0]
    70ca:	2b00      	cmp	r3, #0
    70cc:	d001      	beq.n	70d2 <_spi_m_async_read_one+0x1a>
    70ce:	2301      	movs	r3, #1
    70d0:	e000      	b.n	70d4 <_spi_m_async_read_one+0x1c>
    70d2:	2300      	movs	r3, #0
    70d4:	f003 0301 	and.w	r3, r3, #1
    70d8:	b2db      	uxtb	r3, r3
    70da:	f640 32cd 	movw	r2, #3021	; 0xbcd
    70de:	4907      	ldr	r1, [pc, #28]	; (70fc <_spi_m_async_read_one+0x44>)
    70e0:	4618      	mov	r0, r3
    70e2:	4b07      	ldr	r3, [pc, #28]	; (7100 <_spi_m_async_read_one+0x48>)
    70e4:	4798      	blx	r3

	return hri_sercomspi_read_DATA_reg(dev->prvt);
    70e6:	687b      	ldr	r3, [r7, #4]
    70e8:	681b      	ldr	r3, [r3, #0]
    70ea:	4618      	mov	r0, r3
    70ec:	4b05      	ldr	r3, [pc, #20]	; (7104 <_spi_m_async_read_one+0x4c>)
    70ee:	4798      	blx	r3
    70f0:	4603      	mov	r3, r0
    70f2:	b29b      	uxth	r3, r3
}
    70f4:	4618      	mov	r0, r3
    70f6:	3708      	adds	r7, #8
    70f8:	46bd      	mov	sp, r7
    70fa:	bd80      	pop	{r7, pc}
    70fc:	00013184 	.word	0x00013184
    7100:	00002f09 	.word	0x00002f09
    7104:	00005e75 	.word	0x00005e75

00007108 <_spi_m_async_register_callback>:
	return hri_sercomspi_read_DATA_reg(dev->prvt);
}

int32_t _spi_m_async_register_callback(struct _spi_async_dev *dev, const enum _spi_async_dev_cb_type cb_type,
                                       const FUNC_PTR func)
{
    7108:	b580      	push	{r7, lr}
    710a:	b086      	sub	sp, #24
    710c:	af00      	add	r7, sp, #0
    710e:	60f8      	str	r0, [r7, #12]
    7110:	460b      	mov	r3, r1
    7112:	607a      	str	r2, [r7, #4]
    7114:	72fb      	strb	r3, [r7, #11]
	typedef void (*func_t)(void);
	struct _spi_async_dev *spid = dev;
    7116:	68fb      	ldr	r3, [r7, #12]
    7118:	617b      	str	r3, [r7, #20]

	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    711a:	68fb      	ldr	r3, [r7, #12]
    711c:	2b00      	cmp	r3, #0
    711e:	d004      	beq.n	712a <_spi_m_async_register_callback+0x22>
    7120:	7afb      	ldrb	r3, [r7, #11]
    7122:	2b03      	cmp	r3, #3
    7124:	d801      	bhi.n	712a <_spi_m_async_register_callback+0x22>
    7126:	2301      	movs	r3, #1
    7128:	e000      	b.n	712c <_spi_m_async_register_callback+0x24>
    712a:	2300      	movs	r3, #0
    712c:	f003 0301 	and.w	r3, r3, #1
    7130:	b2db      	uxtb	r3, r3
    7132:	f640 32e6 	movw	r2, #3046	; 0xbe6
    7136:	4909      	ldr	r1, [pc, #36]	; (715c <_spi_m_async_register_callback+0x54>)
    7138:	4618      	mov	r0, r3
    713a:	4b09      	ldr	r3, [pc, #36]	; (7160 <_spi_m_async_register_callback+0x58>)
    713c:	4798      	blx	r3

	func_t *p_ls  = (func_t *)&spid->callbacks;
    713e:	697b      	ldr	r3, [r7, #20]
    7140:	3308      	adds	r3, #8
    7142:	613b      	str	r3, [r7, #16]
	p_ls[cb_type] = (func_t)func;
    7144:	7afb      	ldrb	r3, [r7, #11]
    7146:	009b      	lsls	r3, r3, #2
    7148:	693a      	ldr	r2, [r7, #16]
    714a:	4413      	add	r3, r2
    714c:	687a      	ldr	r2, [r7, #4]
    714e:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    7150:	2300      	movs	r3, #0
}
    7152:	4618      	mov	r0, r3
    7154:	3718      	adds	r7, #24
    7156:	46bd      	mov	sp, r7
    7158:	bd80      	pop	{r7, pc}
    715a:	bf00      	nop
    715c:	00013184 	.word	0x00013184
    7160:	00002f09 	.word	0x00002f09

00007164 <__NVIC_EnableIRQ>:
{
    7164:	b480      	push	{r7}
    7166:	b083      	sub	sp, #12
    7168:	af00      	add	r7, sp, #0
    716a:	4603      	mov	r3, r0
    716c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    716e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7172:	2b00      	cmp	r3, #0
    7174:	db0b      	blt.n	718e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7176:	4909      	ldr	r1, [pc, #36]	; (719c <__NVIC_EnableIRQ+0x38>)
    7178:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    717c:	095b      	lsrs	r3, r3, #5
    717e:	88fa      	ldrh	r2, [r7, #6]
    7180:	f002 021f 	and.w	r2, r2, #31
    7184:	2001      	movs	r0, #1
    7186:	fa00 f202 	lsl.w	r2, r0, r2
    718a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    718e:	bf00      	nop
    7190:	370c      	adds	r7, #12
    7192:	46bd      	mov	sp, r7
    7194:	f85d 7b04 	ldr.w	r7, [sp], #4
    7198:	4770      	bx	lr
    719a:	bf00      	nop
    719c:	e000e100 	.word	0xe000e100

000071a0 <__NVIC_DisableIRQ>:
{
    71a0:	b480      	push	{r7}
    71a2:	b083      	sub	sp, #12
    71a4:	af00      	add	r7, sp, #0
    71a6:	4603      	mov	r3, r0
    71a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    71aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    71ae:	2b00      	cmp	r3, #0
    71b0:	db10      	blt.n	71d4 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    71b2:	490b      	ldr	r1, [pc, #44]	; (71e0 <__NVIC_DisableIRQ+0x40>)
    71b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    71b8:	095b      	lsrs	r3, r3, #5
    71ba:	88fa      	ldrh	r2, [r7, #6]
    71bc:	f002 021f 	and.w	r2, r2, #31
    71c0:	2001      	movs	r0, #1
    71c2:	fa00 f202 	lsl.w	r2, r0, r2
    71c6:	3320      	adds	r3, #32
    71c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    71cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    71d0:	f3bf 8f6f 	isb	sy
}
    71d4:	bf00      	nop
    71d6:	370c      	adds	r7, #12
    71d8:	46bd      	mov	sp, r7
    71da:	f85d 7b04 	ldr.w	r7, [sp], #4
    71de:	4770      	bx	lr
    71e0:	e000e100 	.word	0xe000e100

000071e4 <__NVIC_ClearPendingIRQ>:
{
    71e4:	b480      	push	{r7}
    71e6:	b083      	sub	sp, #12
    71e8:	af00      	add	r7, sp, #0
    71ea:	4603      	mov	r3, r0
    71ec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    71ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    71f2:	2b00      	cmp	r3, #0
    71f4:	db0c      	blt.n	7210 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    71f6:	4909      	ldr	r1, [pc, #36]	; (721c <__NVIC_ClearPendingIRQ+0x38>)
    71f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    71fc:	095b      	lsrs	r3, r3, #5
    71fe:	88fa      	ldrh	r2, [r7, #6]
    7200:	f002 021f 	and.w	r2, r2, #31
    7204:	2001      	movs	r0, #1
    7206:	fa00 f202 	lsl.w	r2, r0, r2
    720a:	3360      	adds	r3, #96	; 0x60
    720c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7210:	bf00      	nop
    7212:	370c      	adds	r7, #12
    7214:	46bd      	mov	sp, r7
    7216:	f85d 7b04 	ldr.w	r7, [sp], #4
    721a:	4770      	bx	lr
    721c:	e000e100 	.word	0xe000e100

00007220 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    7220:	b480      	push	{r7}
    7222:	b083      	sub	sp, #12
    7224:	af00      	add	r7, sp, #0
    7226:	6078      	str	r0, [r7, #4]
    7228:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    722a:	bf00      	nop
    722c:	687b      	ldr	r3, [r7, #4]
    722e:	691a      	ldr	r2, [r3, #16]
    7230:	683b      	ldr	r3, [r7, #0]
    7232:	4013      	ands	r3, r2
    7234:	2b00      	cmp	r3, #0
    7236:	d1f9      	bne.n	722c <hri_tc_wait_for_sync+0xc>
	};
}
    7238:	bf00      	nop
    723a:	370c      	adds	r7, #12
    723c:	46bd      	mov	sp, r7
    723e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7242:	4770      	bx	lr

00007244 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    7244:	b480      	push	{r7}
    7246:	b083      	sub	sp, #12
    7248:	af00      	add	r7, sp, #0
    724a:	6078      	str	r0, [r7, #4]
    724c:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    724e:	687b      	ldr	r3, [r7, #4]
    7250:	691a      	ldr	r2, [r3, #16]
    7252:	683b      	ldr	r3, [r7, #0]
    7254:	4013      	ands	r3, r2
    7256:	2b00      	cmp	r3, #0
    7258:	bf14      	ite	ne
    725a:	2301      	movne	r3, #1
    725c:	2300      	moveq	r3, #0
    725e:	b2db      	uxtb	r3, r3
}
    7260:	4618      	mov	r0, r3
    7262:	370c      	adds	r7, #12
    7264:	46bd      	mov	sp, r7
    7266:	f85d 7b04 	ldr.w	r7, [sp], #4
    726a:	4770      	bx	lr

0000726c <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    726c:	b480      	push	{r7}
    726e:	b083      	sub	sp, #12
    7270:	af00      	add	r7, sp, #0
    7272:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    7274:	687b      	ldr	r3, [r7, #4]
    7276:	7a9b      	ldrb	r3, [r3, #10]
    7278:	b2db      	uxtb	r3, r3
    727a:	f003 0301 	and.w	r3, r3, #1
    727e:	2b00      	cmp	r3, #0
    7280:	bf14      	ite	ne
    7282:	2301      	movne	r3, #1
    7284:	2300      	moveq	r3, #0
    7286:	b2db      	uxtb	r3, r3
}
    7288:	4618      	mov	r0, r3
    728a:	370c      	adds	r7, #12
    728c:	46bd      	mov	sp, r7
    728e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7292:	4770      	bx	lr

00007294 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    7294:	b480      	push	{r7}
    7296:	b083      	sub	sp, #12
    7298:	af00      	add	r7, sp, #0
    729a:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    729c:	687b      	ldr	r3, [r7, #4]
    729e:	2201      	movs	r2, #1
    72a0:	729a      	strb	r2, [r3, #10]
}
    72a2:	bf00      	nop
    72a4:	370c      	adds	r7, #12
    72a6:	46bd      	mov	sp, r7
    72a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    72ac:	4770      	bx	lr

000072ae <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    72ae:	b480      	push	{r7}
    72b0:	b083      	sub	sp, #12
    72b2:	af00      	add	r7, sp, #0
    72b4:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    72b6:	687b      	ldr	r3, [r7, #4]
    72b8:	2202      	movs	r2, #2
    72ba:	729a      	strb	r2, [r3, #10]
}
    72bc:	bf00      	nop
    72be:	370c      	adds	r7, #12
    72c0:	46bd      	mov	sp, r7
    72c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    72c6:	4770      	bx	lr

000072c8 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    72c8:	b480      	push	{r7}
    72ca:	b083      	sub	sp, #12
    72cc:	af00      	add	r7, sp, #0
    72ce:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    72d0:	687b      	ldr	r3, [r7, #4]
    72d2:	2201      	movs	r2, #1
    72d4:	725a      	strb	r2, [r3, #9]
}
    72d6:	bf00      	nop
    72d8:	370c      	adds	r7, #12
    72da:	46bd      	mov	sp, r7
    72dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    72e0:	4770      	bx	lr

000072e2 <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    72e2:	b480      	push	{r7}
    72e4:	b083      	sub	sp, #12
    72e6:	af00      	add	r7, sp, #0
    72e8:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    72ea:	687b      	ldr	r3, [r7, #4]
    72ec:	7a5b      	ldrb	r3, [r3, #9]
    72ee:	b2db      	uxtb	r3, r3
    72f0:	085b      	lsrs	r3, r3, #1
    72f2:	f003 0301 	and.w	r3, r3, #1
    72f6:	2b00      	cmp	r3, #0
    72f8:	bf14      	ite	ne
    72fa:	2301      	movne	r3, #1
    72fc:	2300      	moveq	r3, #0
    72fe:	b2db      	uxtb	r3, r3
}
    7300:	4618      	mov	r0, r3
    7302:	370c      	adds	r7, #12
    7304:	46bd      	mov	sp, r7
    7306:	f85d 7b04 	ldr.w	r7, [sp], #4
    730a:	4770      	bx	lr

0000730c <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    730c:	b580      	push	{r7, lr}
    730e:	b082      	sub	sp, #8
    7310:	af00      	add	r7, sp, #0
    7312:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    7314:	687b      	ldr	r3, [r7, #4]
    7316:	681b      	ldr	r3, [r3, #0]
    7318:	f023 0202 	bic.w	r2, r3, #2
    731c:	687b      	ldr	r3, [r7, #4]
    731e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7320:	2103      	movs	r1, #3
    7322:	6878      	ldr	r0, [r7, #4]
    7324:	4b02      	ldr	r3, [pc, #8]	; (7330 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    7326:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7328:	bf00      	nop
    732a:	3708      	adds	r7, #8
    732c:	46bd      	mov	sp, r7
    732e:	bd80      	pop	{r7, pc}
    7330:	00007221 	.word	0x00007221

00007334 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    7334:	b580      	push	{r7, lr}
    7336:	b084      	sub	sp, #16
    7338:	af00      	add	r7, sp, #0
    733a:	6078      	str	r0, [r7, #4]
    733c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    733e:	2103      	movs	r1, #3
    7340:	6878      	ldr	r0, [r7, #4]
    7342:	4b07      	ldr	r3, [pc, #28]	; (7360 <hri_tc_get_CTRLA_reg+0x2c>)
    7344:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7346:	687b      	ldr	r3, [r7, #4]
    7348:	681b      	ldr	r3, [r3, #0]
    734a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    734c:	68fa      	ldr	r2, [r7, #12]
    734e:	683b      	ldr	r3, [r7, #0]
    7350:	4013      	ands	r3, r2
    7352:	60fb      	str	r3, [r7, #12]
	return tmp;
    7354:	68fb      	ldr	r3, [r7, #12]
}
    7356:	4618      	mov	r0, r3
    7358:	3710      	adds	r7, #16
    735a:	46bd      	mov	sp, r7
    735c:	bd80      	pop	{r7, pc}
    735e:	bf00      	nop
    7360:	00007221 	.word	0x00007221

00007364 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    7364:	b580      	push	{r7, lr}
    7366:	b082      	sub	sp, #8
    7368:	af00      	add	r7, sp, #0
    736a:	6078      	str	r0, [r7, #4]
    736c:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    736e:	687b      	ldr	r3, [r7, #4]
    7370:	683a      	ldr	r2, [r7, #0]
    7372:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7374:	2103      	movs	r1, #3
    7376:	6878      	ldr	r0, [r7, #4]
    7378:	4b02      	ldr	r3, [pc, #8]	; (7384 <hri_tc_write_CTRLA_reg+0x20>)
    737a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    737c:	bf00      	nop
    737e:	3708      	adds	r7, #8
    7380:	46bd      	mov	sp, r7
    7382:	bd80      	pop	{r7, pc}
    7384:	00007221 	.word	0x00007221

00007388 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    7388:	b480      	push	{r7}
    738a:	b083      	sub	sp, #12
    738c:	af00      	add	r7, sp, #0
    738e:	6078      	str	r0, [r7, #4]
    7390:	460b      	mov	r3, r1
    7392:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    7394:	687b      	ldr	r3, [r7, #4]
    7396:	887a      	ldrh	r2, [r7, #2]
    7398:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    739a:	bf00      	nop
    739c:	370c      	adds	r7, #12
    739e:	46bd      	mov	sp, r7
    73a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    73a4:	4770      	bx	lr

000073a6 <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    73a6:	b480      	push	{r7}
    73a8:	b083      	sub	sp, #12
    73aa:	af00      	add	r7, sp, #0
    73ac:	6078      	str	r0, [r7, #4]
    73ae:	460b      	mov	r3, r1
    73b0:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    73b2:	687b      	ldr	r3, [r7, #4]
    73b4:	78fa      	ldrb	r2, [r7, #3]
    73b6:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    73b8:	bf00      	nop
    73ba:	370c      	adds	r7, #12
    73bc:	46bd      	mov	sp, r7
    73be:	f85d 7b04 	ldr.w	r7, [sp], #4
    73c2:	4770      	bx	lr

000073c4 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    73c4:	b480      	push	{r7}
    73c6:	b083      	sub	sp, #12
    73c8:	af00      	add	r7, sp, #0
    73ca:	6078      	str	r0, [r7, #4]
    73cc:	460b      	mov	r3, r1
    73ce:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    73d0:	687b      	ldr	r3, [r7, #4]
    73d2:	78fa      	ldrb	r2, [r7, #3]
    73d4:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    73d6:	bf00      	nop
    73d8:	370c      	adds	r7, #12
    73da:	46bd      	mov	sp, r7
    73dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    73e0:	4770      	bx	lr
	...

000073e4 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    73e4:	b580      	push	{r7, lr}
    73e6:	b082      	sub	sp, #8
    73e8:	af00      	add	r7, sp, #0
    73ea:	6078      	str	r0, [r7, #4]
    73ec:	460b      	mov	r3, r1
    73ee:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    73f0:	687b      	ldr	r3, [r7, #4]
    73f2:	78fa      	ldrb	r2, [r7, #3]
    73f4:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    73f6:	2120      	movs	r1, #32
    73f8:	6878      	ldr	r0, [r7, #4]
    73fa:	4b03      	ldr	r3, [pc, #12]	; (7408 <hri_tccount8_write_PER_reg+0x24>)
    73fc:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    73fe:	bf00      	nop
    7400:	3708      	adds	r7, #8
    7402:	46bd      	mov	sp, r7
    7404:	bd80      	pop	{r7, pc}
    7406:	bf00      	nop
    7408:	00007221 	.word	0x00007221

0000740c <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    740c:	b580      	push	{r7, lr}
    740e:	b082      	sub	sp, #8
    7410:	af00      	add	r7, sp, #0
    7412:	6078      	str	r0, [r7, #4]
    7414:	460b      	mov	r3, r1
    7416:	70fb      	strb	r3, [r7, #3]
    7418:	4613      	mov	r3, r2
    741a:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    741c:	78fb      	ldrb	r3, [r7, #3]
    741e:	687a      	ldr	r2, [r7, #4]
    7420:	4413      	add	r3, r2
    7422:	78ba      	ldrb	r2, [r7, #2]
    7424:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7426:	21c0      	movs	r1, #192	; 0xc0
    7428:	6878      	ldr	r0, [r7, #4]
    742a:	4b03      	ldr	r3, [pc, #12]	; (7438 <hri_tccount8_write_CC_reg+0x2c>)
    742c:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    742e:	bf00      	nop
    7430:	3708      	adds	r7, #8
    7432:	46bd      	mov	sp, r7
    7434:	bd80      	pop	{r7, pc}
    7436:	bf00      	nop
    7438:	00007221 	.word	0x00007221

0000743c <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    743c:	b580      	push	{r7, lr}
    743e:	b082      	sub	sp, #8
    7440:	af00      	add	r7, sp, #0
    7442:	6078      	str	r0, [r7, #4]
    7444:	460b      	mov	r3, r1
    7446:	70fb      	strb	r3, [r7, #3]
    7448:	4613      	mov	r3, r2
    744a:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    744c:	78fb      	ldrb	r3, [r7, #3]
    744e:	687a      	ldr	r2, [r7, #4]
    7450:	330c      	adds	r3, #12
    7452:	005b      	lsls	r3, r3, #1
    7454:	4413      	add	r3, r2
    7456:	883a      	ldrh	r2, [r7, #0]
    7458:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    745a:	21c0      	movs	r1, #192	; 0xc0
    745c:	6878      	ldr	r0, [r7, #4]
    745e:	4b03      	ldr	r3, [pc, #12]	; (746c <hri_tccount16_write_CC_reg+0x30>)
    7460:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7462:	bf00      	nop
    7464:	3708      	adds	r7, #8
    7466:	46bd      	mov	sp, r7
    7468:	bd80      	pop	{r7, pc}
    746a:	bf00      	nop
    746c:	00007221 	.word	0x00007221

00007470 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    7470:	b580      	push	{r7, lr}
    7472:	b084      	sub	sp, #16
    7474:	af00      	add	r7, sp, #0
    7476:	60f8      	str	r0, [r7, #12]
    7478:	460b      	mov	r3, r1
    747a:	607a      	str	r2, [r7, #4]
    747c:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    747e:	7afb      	ldrb	r3, [r7, #11]
    7480:	68fa      	ldr	r2, [r7, #12]
    7482:	3306      	adds	r3, #6
    7484:	009b      	lsls	r3, r3, #2
    7486:	4413      	add	r3, r2
    7488:	687a      	ldr	r2, [r7, #4]
    748a:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    748c:	21c0      	movs	r1, #192	; 0xc0
    748e:	68f8      	ldr	r0, [r7, #12]
    7490:	4b02      	ldr	r3, [pc, #8]	; (749c <hri_tccount32_write_CC_reg+0x2c>)
    7492:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7494:	bf00      	nop
    7496:	3710      	adds	r7, #16
    7498:	46bd      	mov	sp, r7
    749a:	bd80      	pop	{r7, pc}
    749c:	00007221 	.word	0x00007221

000074a0 <_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _timer_init(struct _timer_device *const device, void *const hw)
{
    74a0:	b580      	push	{r7, lr}
    74a2:	b084      	sub	sp, #16
    74a4:	af00      	add	r7, sp, #0
    74a6:	6078      	str	r0, [r7, #4]
    74a8:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    74aa:	6838      	ldr	r0, [r7, #0]
    74ac:	4b93      	ldr	r3, [pc, #588]	; (76fc <_timer_init+0x25c>)
    74ae:	4798      	blx	r3
    74b0:	4603      	mov	r3, r0
    74b2:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    74b4:	687b      	ldr	r3, [r7, #4]
    74b6:	683a      	ldr	r2, [r7, #0]
    74b8:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    74ba:	2295      	movs	r2, #149	; 0x95
    74bc:	4990      	ldr	r1, [pc, #576]	; (7700 <_timer_init+0x260>)
    74be:	2001      	movs	r0, #1
    74c0:	4b90      	ldr	r3, [pc, #576]	; (7704 <_timer_init+0x264>)
    74c2:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    74c4:	2101      	movs	r1, #1
    74c6:	6838      	ldr	r0, [r7, #0]
    74c8:	4b8f      	ldr	r3, [pc, #572]	; (7708 <_timer_init+0x268>)
    74ca:	4798      	blx	r3
    74cc:	4603      	mov	r3, r0
    74ce:	f083 0301 	eor.w	r3, r3, #1
    74d2:	b2db      	uxtb	r3, r3
    74d4:	2b00      	cmp	r3, #0
    74d6:	d011      	beq.n	74fc <_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    74d8:	2102      	movs	r1, #2
    74da:	6838      	ldr	r0, [r7, #0]
    74dc:	4b8b      	ldr	r3, [pc, #556]	; (770c <_timer_init+0x26c>)
    74de:	4798      	blx	r3
    74e0:	4603      	mov	r3, r0
    74e2:	2b00      	cmp	r3, #0
    74e4:	d006      	beq.n	74f4 <_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    74e6:	6838      	ldr	r0, [r7, #0]
    74e8:	4b89      	ldr	r3, [pc, #548]	; (7710 <_timer_init+0x270>)
    74ea:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    74ec:	2102      	movs	r1, #2
    74ee:	6838      	ldr	r0, [r7, #0]
    74f0:	4b88      	ldr	r3, [pc, #544]	; (7714 <_timer_init+0x274>)
    74f2:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    74f4:	2101      	movs	r1, #1
    74f6:	6838      	ldr	r0, [r7, #0]
    74f8:	4b87      	ldr	r3, [pc, #540]	; (7718 <_timer_init+0x278>)
    74fa:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    74fc:	2101      	movs	r1, #1
    74fe:	6838      	ldr	r0, [r7, #0]
    7500:	4b84      	ldr	r3, [pc, #528]	; (7714 <_timer_init+0x274>)
    7502:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    7504:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7508:	4984      	ldr	r1, [pc, #528]	; (771c <_timer_init+0x27c>)
    750a:	4613      	mov	r3, r2
    750c:	009b      	lsls	r3, r3, #2
    750e:	4413      	add	r3, r2
    7510:	009b      	lsls	r3, r3, #2
    7512:	440b      	add	r3, r1
    7514:	3304      	adds	r3, #4
    7516:	681b      	ldr	r3, [r3, #0]
    7518:	4619      	mov	r1, r3
    751a:	6838      	ldr	r0, [r7, #0]
    751c:	4b7e      	ldr	r3, [pc, #504]	; (7718 <_timer_init+0x278>)
    751e:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    7520:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7524:	497d      	ldr	r1, [pc, #500]	; (771c <_timer_init+0x27c>)
    7526:	4613      	mov	r3, r2
    7528:	009b      	lsls	r3, r3, #2
    752a:	4413      	add	r3, r2
    752c:	009b      	lsls	r3, r3, #2
    752e:	440b      	add	r3, r1
    7530:	330a      	adds	r3, #10
    7532:	781b      	ldrb	r3, [r3, #0]
    7534:	4619      	mov	r1, r3
    7536:	6838      	ldr	r0, [r7, #0]
    7538:	4b79      	ldr	r3, [pc, #484]	; (7720 <_timer_init+0x280>)
    753a:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    753c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7540:	4976      	ldr	r1, [pc, #472]	; (771c <_timer_init+0x27c>)
    7542:	4613      	mov	r3, r2
    7544:	009b      	lsls	r3, r3, #2
    7546:	4413      	add	r3, r2
    7548:	009b      	lsls	r3, r3, #2
    754a:	440b      	add	r3, r1
    754c:	3308      	adds	r3, #8
    754e:	881b      	ldrh	r3, [r3, #0]
    7550:	4619      	mov	r1, r3
    7552:	6838      	ldr	r0, [r7, #0]
    7554:	4b73      	ldr	r3, [pc, #460]	; (7724 <_timer_init+0x284>)
    7556:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    7558:	2101      	movs	r1, #1
    755a:	6838      	ldr	r0, [r7, #0]
    755c:	4b72      	ldr	r3, [pc, #456]	; (7728 <_timer_init+0x288>)
    755e:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    7560:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7564:	496d      	ldr	r1, [pc, #436]	; (771c <_timer_init+0x27c>)
    7566:	4613      	mov	r3, r2
    7568:	009b      	lsls	r3, r3, #2
    756a:	4413      	add	r3, r2
    756c:	009b      	lsls	r3, r3, #2
    756e:	440b      	add	r3, r1
    7570:	3304      	adds	r3, #4
    7572:	681b      	ldr	r3, [r3, #0]
    7574:	f003 030c 	and.w	r3, r3, #12
    7578:	2b08      	cmp	r3, #8
    757a:	d11e      	bne.n	75ba <_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    757c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7580:	4966      	ldr	r1, [pc, #408]	; (771c <_timer_init+0x27c>)
    7582:	4613      	mov	r3, r2
    7584:	009b      	lsls	r3, r3, #2
    7586:	4413      	add	r3, r2
    7588:	009b      	lsls	r3, r3, #2
    758a:	440b      	add	r3, r1
    758c:	330c      	adds	r3, #12
    758e:	681b      	ldr	r3, [r3, #0]
    7590:	461a      	mov	r2, r3
    7592:	2100      	movs	r1, #0
    7594:	6838      	ldr	r0, [r7, #0]
    7596:	4b65      	ldr	r3, [pc, #404]	; (772c <_timer_init+0x28c>)
    7598:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    759a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    759e:	495f      	ldr	r1, [pc, #380]	; (771c <_timer_init+0x27c>)
    75a0:	4613      	mov	r3, r2
    75a2:	009b      	lsls	r3, r3, #2
    75a4:	4413      	add	r3, r2
    75a6:	009b      	lsls	r3, r3, #2
    75a8:	440b      	add	r3, r1
    75aa:	3310      	adds	r3, #16
    75ac:	681b      	ldr	r3, [r3, #0]
    75ae:	461a      	mov	r2, r3
    75b0:	2101      	movs	r1, #1
    75b2:	6838      	ldr	r0, [r7, #0]
    75b4:	4b5d      	ldr	r3, [pc, #372]	; (772c <_timer_init+0x28c>)
    75b6:	4798      	blx	r3
    75b8:	e06a      	b.n	7690 <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    75ba:	f997 200f 	ldrsb.w	r2, [r7, #15]
    75be:	4957      	ldr	r1, [pc, #348]	; (771c <_timer_init+0x27c>)
    75c0:	4613      	mov	r3, r2
    75c2:	009b      	lsls	r3, r3, #2
    75c4:	4413      	add	r3, r2
    75c6:	009b      	lsls	r3, r3, #2
    75c8:	440b      	add	r3, r1
    75ca:	3304      	adds	r3, #4
    75cc:	681b      	ldr	r3, [r3, #0]
    75ce:	f003 030c 	and.w	r3, r3, #12
    75d2:	2b00      	cmp	r3, #0
    75d4:	d120      	bne.n	7618 <_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    75d6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    75da:	4950      	ldr	r1, [pc, #320]	; (771c <_timer_init+0x27c>)
    75dc:	4613      	mov	r3, r2
    75de:	009b      	lsls	r3, r3, #2
    75e0:	4413      	add	r3, r2
    75e2:	009b      	lsls	r3, r3, #2
    75e4:	440b      	add	r3, r1
    75e6:	330c      	adds	r3, #12
    75e8:	681b      	ldr	r3, [r3, #0]
    75ea:	b29b      	uxth	r3, r3
    75ec:	461a      	mov	r2, r3
    75ee:	2100      	movs	r1, #0
    75f0:	6838      	ldr	r0, [r7, #0]
    75f2:	4b4f      	ldr	r3, [pc, #316]	; (7730 <_timer_init+0x290>)
    75f4:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    75f6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    75fa:	4948      	ldr	r1, [pc, #288]	; (771c <_timer_init+0x27c>)
    75fc:	4613      	mov	r3, r2
    75fe:	009b      	lsls	r3, r3, #2
    7600:	4413      	add	r3, r2
    7602:	009b      	lsls	r3, r3, #2
    7604:	440b      	add	r3, r1
    7606:	3310      	adds	r3, #16
    7608:	681b      	ldr	r3, [r3, #0]
    760a:	b29b      	uxth	r3, r3
    760c:	461a      	mov	r2, r3
    760e:	2101      	movs	r1, #1
    7610:	6838      	ldr	r0, [r7, #0]
    7612:	4b47      	ldr	r3, [pc, #284]	; (7730 <_timer_init+0x290>)
    7614:	4798      	blx	r3
    7616:	e03b      	b.n	7690 <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    7618:	f997 200f 	ldrsb.w	r2, [r7, #15]
    761c:	493f      	ldr	r1, [pc, #252]	; (771c <_timer_init+0x27c>)
    761e:	4613      	mov	r3, r2
    7620:	009b      	lsls	r3, r3, #2
    7622:	4413      	add	r3, r2
    7624:	009b      	lsls	r3, r3, #2
    7626:	440b      	add	r3, r1
    7628:	3304      	adds	r3, #4
    762a:	681b      	ldr	r3, [r3, #0]
    762c:	f003 030c 	and.w	r3, r3, #12
    7630:	2b04      	cmp	r3, #4
    7632:	d12d      	bne.n	7690 <_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    7634:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7638:	4938      	ldr	r1, [pc, #224]	; (771c <_timer_init+0x27c>)
    763a:	4613      	mov	r3, r2
    763c:	009b      	lsls	r3, r3, #2
    763e:	4413      	add	r3, r2
    7640:	009b      	lsls	r3, r3, #2
    7642:	440b      	add	r3, r1
    7644:	330c      	adds	r3, #12
    7646:	681b      	ldr	r3, [r3, #0]
    7648:	b2db      	uxtb	r3, r3
    764a:	461a      	mov	r2, r3
    764c:	2100      	movs	r1, #0
    764e:	6838      	ldr	r0, [r7, #0]
    7650:	4b38      	ldr	r3, [pc, #224]	; (7734 <_timer_init+0x294>)
    7652:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    7654:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7658:	4930      	ldr	r1, [pc, #192]	; (771c <_timer_init+0x27c>)
    765a:	4613      	mov	r3, r2
    765c:	009b      	lsls	r3, r3, #2
    765e:	4413      	add	r3, r2
    7660:	009b      	lsls	r3, r3, #2
    7662:	440b      	add	r3, r1
    7664:	3310      	adds	r3, #16
    7666:	681b      	ldr	r3, [r3, #0]
    7668:	b2db      	uxtb	r3, r3
    766a:	461a      	mov	r2, r3
    766c:	2101      	movs	r1, #1
    766e:	6838      	ldr	r0, [r7, #0]
    7670:	4b30      	ldr	r3, [pc, #192]	; (7734 <_timer_init+0x294>)
    7672:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    7674:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7678:	4928      	ldr	r1, [pc, #160]	; (771c <_timer_init+0x27c>)
    767a:	4613      	mov	r3, r2
    767c:	009b      	lsls	r3, r3, #2
    767e:	4413      	add	r3, r2
    7680:	009b      	lsls	r3, r3, #2
    7682:	440b      	add	r3, r1
    7684:	330b      	adds	r3, #11
    7686:	781b      	ldrb	r3, [r3, #0]
    7688:	4619      	mov	r1, r3
    768a:	6838      	ldr	r0, [r7, #0]
    768c:	4b2a      	ldr	r3, [pc, #168]	; (7738 <_timer_init+0x298>)
    768e:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    7690:	6838      	ldr	r0, [r7, #0]
    7692:	4b2a      	ldr	r3, [pc, #168]	; (773c <_timer_init+0x29c>)
    7694:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    7696:	6879      	ldr	r1, [r7, #4]
    7698:	6838      	ldr	r0, [r7, #0]
    769a:	4b29      	ldr	r3, [pc, #164]	; (7740 <_timer_init+0x2a0>)
    769c:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    769e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    76a2:	491e      	ldr	r1, [pc, #120]	; (771c <_timer_init+0x27c>)
    76a4:	4613      	mov	r3, r2
    76a6:	009b      	lsls	r3, r3, #2
    76a8:	4413      	add	r3, r2
    76aa:	009b      	lsls	r3, r3, #2
    76ac:	440b      	add	r3, r1
    76ae:	3302      	adds	r3, #2
    76b0:	f9b3 3000 	ldrsh.w	r3, [r3]
    76b4:	4618      	mov	r0, r3
    76b6:	4b23      	ldr	r3, [pc, #140]	; (7744 <_timer_init+0x2a4>)
    76b8:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    76ba:	f997 200f 	ldrsb.w	r2, [r7, #15]
    76be:	4917      	ldr	r1, [pc, #92]	; (771c <_timer_init+0x27c>)
    76c0:	4613      	mov	r3, r2
    76c2:	009b      	lsls	r3, r3, #2
    76c4:	4413      	add	r3, r2
    76c6:	009b      	lsls	r3, r3, #2
    76c8:	440b      	add	r3, r1
    76ca:	3302      	adds	r3, #2
    76cc:	f9b3 3000 	ldrsh.w	r3, [r3]
    76d0:	4618      	mov	r0, r3
    76d2:	4b1d      	ldr	r3, [pc, #116]	; (7748 <_timer_init+0x2a8>)
    76d4:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    76d6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    76da:	4910      	ldr	r1, [pc, #64]	; (771c <_timer_init+0x27c>)
    76dc:	4613      	mov	r3, r2
    76de:	009b      	lsls	r3, r3, #2
    76e0:	4413      	add	r3, r2
    76e2:	009b      	lsls	r3, r3, #2
    76e4:	440b      	add	r3, r1
    76e6:	3302      	adds	r3, #2
    76e8:	f9b3 3000 	ldrsh.w	r3, [r3]
    76ec:	4618      	mov	r0, r3
    76ee:	4b17      	ldr	r3, [pc, #92]	; (774c <_timer_init+0x2ac>)
    76f0:	4798      	blx	r3

	return ERR_NONE;
    76f2:	2300      	movs	r3, #0
}
    76f4:	4618      	mov	r0, r3
    76f6:	3710      	adds	r7, #16
    76f8:	46bd      	mov	sp, r7
    76fa:	bd80      	pop	{r7, pc}
    76fc:	00007abd 	.word	0x00007abd
    7700:	000131e4 	.word	0x000131e4
    7704:	00002f09 	.word	0x00002f09
    7708:	00007245 	.word	0x00007245
    770c:	00007335 	.word	0x00007335
    7710:	0000730d 	.word	0x0000730d
    7714:	00007221 	.word	0x00007221
    7718:	00007365 	.word	0x00007365
    771c:	20000048 	.word	0x20000048
    7720:	000073c5 	.word	0x000073c5
    7724:	00007389 	.word	0x00007389
    7728:	000073a7 	.word	0x000073a7
    772c:	00007471 	.word	0x00007471
    7730:	0000743d 	.word	0x0000743d
    7734:	0000740d 	.word	0x0000740d
    7738:	000073e5 	.word	0x000073e5
    773c:	000072c9 	.word	0x000072c9
    7740:	00007b25 	.word	0x00007b25
    7744:	000071a1 	.word	0x000071a1
    7748:	000071e5 	.word	0x000071e5
    774c:	00007165 	.word	0x00007165

00007750 <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    7750:	b580      	push	{r7, lr}
    7752:	b084      	sub	sp, #16
    7754:	af00      	add	r7, sp, #0
    7756:	6078      	str	r0, [r7, #4]
    7758:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    775a:	6838      	ldr	r0, [r7, #0]
    775c:	4b73      	ldr	r3, [pc, #460]	; (792c <_pwm_init+0x1dc>)
    775e:	4798      	blx	r3
    7760:	4603      	mov	r3, r0
    7762:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    7764:	687b      	ldr	r3, [r7, #4]
    7766:	683a      	ldr	r2, [r7, #0]
    7768:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    776a:	2101      	movs	r1, #1
    776c:	6838      	ldr	r0, [r7, #0]
    776e:	4b70      	ldr	r3, [pc, #448]	; (7930 <_pwm_init+0x1e0>)
    7770:	4798      	blx	r3
    7772:	4603      	mov	r3, r0
    7774:	f083 0301 	eor.w	r3, r3, #1
    7778:	b2db      	uxtb	r3, r3
    777a:	2b00      	cmp	r3, #0
    777c:	d011      	beq.n	77a2 <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    777e:	2102      	movs	r1, #2
    7780:	6838      	ldr	r0, [r7, #0]
    7782:	4b6c      	ldr	r3, [pc, #432]	; (7934 <_pwm_init+0x1e4>)
    7784:	4798      	blx	r3
    7786:	4603      	mov	r3, r0
    7788:	2b00      	cmp	r3, #0
    778a:	d006      	beq.n	779a <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    778c:	6838      	ldr	r0, [r7, #0]
    778e:	4b6a      	ldr	r3, [pc, #424]	; (7938 <_pwm_init+0x1e8>)
    7790:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    7792:	2102      	movs	r1, #2
    7794:	6838      	ldr	r0, [r7, #0]
    7796:	4b69      	ldr	r3, [pc, #420]	; (793c <_pwm_init+0x1ec>)
    7798:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    779a:	2101      	movs	r1, #1
    779c:	6838      	ldr	r0, [r7, #0]
    779e:	4b68      	ldr	r3, [pc, #416]	; (7940 <_pwm_init+0x1f0>)
    77a0:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    77a2:	2101      	movs	r1, #1
    77a4:	6838      	ldr	r0, [r7, #0]
    77a6:	4b65      	ldr	r3, [pc, #404]	; (793c <_pwm_init+0x1ec>)
    77a8:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    77aa:	f997 200f 	ldrsb.w	r2, [r7, #15]
    77ae:	4965      	ldr	r1, [pc, #404]	; (7944 <_pwm_init+0x1f4>)
    77b0:	4613      	mov	r3, r2
    77b2:	009b      	lsls	r3, r3, #2
    77b4:	4413      	add	r3, r2
    77b6:	009b      	lsls	r3, r3, #2
    77b8:	440b      	add	r3, r1
    77ba:	3304      	adds	r3, #4
    77bc:	681b      	ldr	r3, [r3, #0]
    77be:	4619      	mov	r1, r3
    77c0:	6838      	ldr	r0, [r7, #0]
    77c2:	4b5f      	ldr	r3, [pc, #380]	; (7940 <_pwm_init+0x1f0>)
    77c4:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    77c6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    77ca:	495e      	ldr	r1, [pc, #376]	; (7944 <_pwm_init+0x1f4>)
    77cc:	4613      	mov	r3, r2
    77ce:	009b      	lsls	r3, r3, #2
    77d0:	4413      	add	r3, r2
    77d2:	009b      	lsls	r3, r3, #2
    77d4:	440b      	add	r3, r1
    77d6:	330a      	adds	r3, #10
    77d8:	781b      	ldrb	r3, [r3, #0]
    77da:	4619      	mov	r1, r3
    77dc:	6838      	ldr	r0, [r7, #0]
    77de:	4b5a      	ldr	r3, [pc, #360]	; (7948 <_pwm_init+0x1f8>)
    77e0:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    77e2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    77e6:	4957      	ldr	r1, [pc, #348]	; (7944 <_pwm_init+0x1f4>)
    77e8:	4613      	mov	r3, r2
    77ea:	009b      	lsls	r3, r3, #2
    77ec:	4413      	add	r3, r2
    77ee:	009b      	lsls	r3, r3, #2
    77f0:	440b      	add	r3, r1
    77f2:	3308      	adds	r3, #8
    77f4:	881b      	ldrh	r3, [r3, #0]
    77f6:	4619      	mov	r1, r3
    77f8:	6838      	ldr	r0, [r7, #0]
    77fa:	4b54      	ldr	r3, [pc, #336]	; (794c <_pwm_init+0x1fc>)
    77fc:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    77fe:	2103      	movs	r1, #3
    7800:	6838      	ldr	r0, [r7, #0]
    7802:	4b53      	ldr	r3, [pc, #332]	; (7950 <_pwm_init+0x200>)
    7804:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    7806:	f997 200f 	ldrsb.w	r2, [r7, #15]
    780a:	494e      	ldr	r1, [pc, #312]	; (7944 <_pwm_init+0x1f4>)
    780c:	4613      	mov	r3, r2
    780e:	009b      	lsls	r3, r3, #2
    7810:	4413      	add	r3, r2
    7812:	009b      	lsls	r3, r3, #2
    7814:	440b      	add	r3, r1
    7816:	3304      	adds	r3, #4
    7818:	681b      	ldr	r3, [r3, #0]
    781a:	f003 030c 	and.w	r3, r3, #12
    781e:	2b08      	cmp	r3, #8
    7820:	d11e      	bne.n	7860 <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    7822:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7826:	4947      	ldr	r1, [pc, #284]	; (7944 <_pwm_init+0x1f4>)
    7828:	4613      	mov	r3, r2
    782a:	009b      	lsls	r3, r3, #2
    782c:	4413      	add	r3, r2
    782e:	009b      	lsls	r3, r3, #2
    7830:	440b      	add	r3, r1
    7832:	330c      	adds	r3, #12
    7834:	681b      	ldr	r3, [r3, #0]
    7836:	461a      	mov	r2, r3
    7838:	2100      	movs	r1, #0
    783a:	6838      	ldr	r0, [r7, #0]
    783c:	4b45      	ldr	r3, [pc, #276]	; (7954 <_pwm_init+0x204>)
    783e:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    7840:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7844:	493f      	ldr	r1, [pc, #252]	; (7944 <_pwm_init+0x1f4>)
    7846:	4613      	mov	r3, r2
    7848:	009b      	lsls	r3, r3, #2
    784a:	4413      	add	r3, r2
    784c:	009b      	lsls	r3, r3, #2
    784e:	440b      	add	r3, r1
    7850:	3310      	adds	r3, #16
    7852:	681b      	ldr	r3, [r3, #0]
    7854:	461a      	mov	r2, r3
    7856:	2101      	movs	r1, #1
    7858:	6838      	ldr	r0, [r7, #0]
    785a:	4b3e      	ldr	r3, [pc, #248]	; (7954 <_pwm_init+0x204>)
    785c:	4798      	blx	r3
    785e:	e031      	b.n	78c4 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    7860:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7864:	4937      	ldr	r1, [pc, #220]	; (7944 <_pwm_init+0x1f4>)
    7866:	4613      	mov	r3, r2
    7868:	009b      	lsls	r3, r3, #2
    786a:	4413      	add	r3, r2
    786c:	009b      	lsls	r3, r3, #2
    786e:	440b      	add	r3, r1
    7870:	3304      	adds	r3, #4
    7872:	681b      	ldr	r3, [r3, #0]
    7874:	f003 030c 	and.w	r3, r3, #12
    7878:	2b00      	cmp	r3, #0
    787a:	d120      	bne.n	78be <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    787c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7880:	4930      	ldr	r1, [pc, #192]	; (7944 <_pwm_init+0x1f4>)
    7882:	4613      	mov	r3, r2
    7884:	009b      	lsls	r3, r3, #2
    7886:	4413      	add	r3, r2
    7888:	009b      	lsls	r3, r3, #2
    788a:	440b      	add	r3, r1
    788c:	330c      	adds	r3, #12
    788e:	681b      	ldr	r3, [r3, #0]
    7890:	b29b      	uxth	r3, r3
    7892:	461a      	mov	r2, r3
    7894:	2100      	movs	r1, #0
    7896:	6838      	ldr	r0, [r7, #0]
    7898:	4b2f      	ldr	r3, [pc, #188]	; (7958 <_pwm_init+0x208>)
    789a:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    789c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    78a0:	4928      	ldr	r1, [pc, #160]	; (7944 <_pwm_init+0x1f4>)
    78a2:	4613      	mov	r3, r2
    78a4:	009b      	lsls	r3, r3, #2
    78a6:	4413      	add	r3, r2
    78a8:	009b      	lsls	r3, r3, #2
    78aa:	440b      	add	r3, r1
    78ac:	3310      	adds	r3, #16
    78ae:	681b      	ldr	r3, [r3, #0]
    78b0:	b29b      	uxth	r3, r3
    78b2:	461a      	mov	r2, r3
    78b4:	2101      	movs	r1, #1
    78b6:	6838      	ldr	r0, [r7, #0]
    78b8:	4b27      	ldr	r3, [pc, #156]	; (7958 <_pwm_init+0x208>)
    78ba:	4798      	blx	r3
    78bc:	e002      	b.n	78c4 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    78be:	f04f 33ff 	mov.w	r3, #4294967295
    78c2:	e02e      	b.n	7922 <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    78c4:	6879      	ldr	r1, [r7, #4]
    78c6:	6838      	ldr	r0, [r7, #0]
    78c8:	4b24      	ldr	r3, [pc, #144]	; (795c <_pwm_init+0x20c>)
    78ca:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    78cc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    78d0:	491c      	ldr	r1, [pc, #112]	; (7944 <_pwm_init+0x1f4>)
    78d2:	4613      	mov	r3, r2
    78d4:	009b      	lsls	r3, r3, #2
    78d6:	4413      	add	r3, r2
    78d8:	009b      	lsls	r3, r3, #2
    78da:	440b      	add	r3, r1
    78dc:	3302      	adds	r3, #2
    78de:	f9b3 3000 	ldrsh.w	r3, [r3]
    78e2:	4618      	mov	r0, r3
    78e4:	4b1e      	ldr	r3, [pc, #120]	; (7960 <_pwm_init+0x210>)
    78e6:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    78e8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    78ec:	4915      	ldr	r1, [pc, #84]	; (7944 <_pwm_init+0x1f4>)
    78ee:	4613      	mov	r3, r2
    78f0:	009b      	lsls	r3, r3, #2
    78f2:	4413      	add	r3, r2
    78f4:	009b      	lsls	r3, r3, #2
    78f6:	440b      	add	r3, r1
    78f8:	3302      	adds	r3, #2
    78fa:	f9b3 3000 	ldrsh.w	r3, [r3]
    78fe:	4618      	mov	r0, r3
    7900:	4b18      	ldr	r3, [pc, #96]	; (7964 <_pwm_init+0x214>)
    7902:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    7904:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7908:	490e      	ldr	r1, [pc, #56]	; (7944 <_pwm_init+0x1f4>)
    790a:	4613      	mov	r3, r2
    790c:	009b      	lsls	r3, r3, #2
    790e:	4413      	add	r3, r2
    7910:	009b      	lsls	r3, r3, #2
    7912:	440b      	add	r3, r1
    7914:	3302      	adds	r3, #2
    7916:	f9b3 3000 	ldrsh.w	r3, [r3]
    791a:	4618      	mov	r0, r3
    791c:	4b12      	ldr	r3, [pc, #72]	; (7968 <_pwm_init+0x218>)
    791e:	4798      	blx	r3

	return 0;
    7920:	2300      	movs	r3, #0
}
    7922:	4618      	mov	r0, r3
    7924:	3710      	adds	r7, #16
    7926:	46bd      	mov	sp, r7
    7928:	bd80      	pop	{r7, pc}
    792a:	bf00      	nop
    792c:	00007abd 	.word	0x00007abd
    7930:	00007245 	.word	0x00007245
    7934:	00007335 	.word	0x00007335
    7938:	0000730d 	.word	0x0000730d
    793c:	00007221 	.word	0x00007221
    7940:	00007365 	.word	0x00007365
    7944:	20000048 	.word	0x20000048
    7948:	000073c5 	.word	0x000073c5
    794c:	00007389 	.word	0x00007389
    7950:	000073a7 	.word	0x000073a7
    7954:	00007471 	.word	0x00007471
    7958:	0000743d 	.word	0x0000743d
    795c:	00007b25 	.word	0x00007b25
    7960:	000071a1 	.word	0x000071a1
    7964:	000071e5 	.word	0x000071e5
    7968:	00007165 	.word	0x00007165

0000796c <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    796c:	b480      	push	{r7}
    796e:	af00      	add	r7, sp, #0
	return NULL;
    7970:	2300      	movs	r3, #0
}
    7972:	4618      	mov	r0, r3
    7974:	46bd      	mov	sp, r7
    7976:	f85d 7b04 	ldr.w	r7, [sp], #4
    797a:	4770      	bx	lr

0000797c <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    797c:	b480      	push	{r7}
    797e:	af00      	add	r7, sp, #0
	return NULL;
    7980:	2300      	movs	r3, #0
}
    7982:	4618      	mov	r0, r3
    7984:	46bd      	mov	sp, r7
    7986:	f85d 7b04 	ldr.w	r7, [sp], #4
    798a:	4770      	bx	lr

0000798c <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    798c:	b580      	push	{r7, lr}
    798e:	b084      	sub	sp, #16
    7990:	af00      	add	r7, sp, #0
    7992:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7994:	687b      	ldr	r3, [r7, #4]
    7996:	68db      	ldr	r3, [r3, #12]
    7998:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    799a:	68f8      	ldr	r0, [r7, #12]
    799c:	4b07      	ldr	r3, [pc, #28]	; (79bc <tc_interrupt_handler+0x30>)
    799e:	4798      	blx	r3
    79a0:	4603      	mov	r3, r0
    79a2:	2b00      	cmp	r3, #0
    79a4:	d006      	beq.n	79b4 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    79a6:	68f8      	ldr	r0, [r7, #12]
    79a8:	4b05      	ldr	r3, [pc, #20]	; (79c0 <tc_interrupt_handler+0x34>)
    79aa:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    79ac:	687b      	ldr	r3, [r7, #4]
    79ae:	681b      	ldr	r3, [r3, #0]
    79b0:	6878      	ldr	r0, [r7, #4]
    79b2:	4798      	blx	r3
	}
}
    79b4:	bf00      	nop
    79b6:	3710      	adds	r7, #16
    79b8:	46bd      	mov	sp, r7
    79ba:	bd80      	pop	{r7, pc}
    79bc:	0000726d 	.word	0x0000726d
    79c0:	00007295 	.word	0x00007295

000079c4 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    79c4:	b580      	push	{r7, lr}
    79c6:	b084      	sub	sp, #16
    79c8:	af00      	add	r7, sp, #0
    79ca:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    79cc:	687b      	ldr	r3, [r7, #4]
    79ce:	691b      	ldr	r3, [r3, #16]
    79d0:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    79d2:	68f8      	ldr	r0, [r7, #12]
    79d4:	4b12      	ldr	r3, [pc, #72]	; (7a20 <tc_pwm_interrupt_handler+0x5c>)
    79d6:	4798      	blx	r3
    79d8:	4603      	mov	r3, r0
    79da:	2b00      	cmp	r3, #0
    79dc:	d00a      	beq.n	79f4 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    79de:	68f8      	ldr	r0, [r7, #12]
    79e0:	4b10      	ldr	r3, [pc, #64]	; (7a24 <tc_pwm_interrupt_handler+0x60>)
    79e2:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    79e4:	687b      	ldr	r3, [r7, #4]
    79e6:	681b      	ldr	r3, [r3, #0]
    79e8:	2b00      	cmp	r3, #0
    79ea:	d003      	beq.n	79f4 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    79ec:	687b      	ldr	r3, [r7, #4]
    79ee:	681b      	ldr	r3, [r3, #0]
    79f0:	6878      	ldr	r0, [r7, #4]
    79f2:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    79f4:	68f8      	ldr	r0, [r7, #12]
    79f6:	4b0c      	ldr	r3, [pc, #48]	; (7a28 <tc_pwm_interrupt_handler+0x64>)
    79f8:	4798      	blx	r3
    79fa:	4603      	mov	r3, r0
    79fc:	2b00      	cmp	r3, #0
    79fe:	d00a      	beq.n	7a16 <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    7a00:	68f8      	ldr	r0, [r7, #12]
    7a02:	4b0a      	ldr	r3, [pc, #40]	; (7a2c <tc_pwm_interrupt_handler+0x68>)
    7a04:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    7a06:	687b      	ldr	r3, [r7, #4]
    7a08:	685b      	ldr	r3, [r3, #4]
    7a0a:	2b00      	cmp	r3, #0
    7a0c:	d003      	beq.n	7a16 <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    7a0e:	687b      	ldr	r3, [r7, #4]
    7a10:	685b      	ldr	r3, [r3, #4]
    7a12:	6878      	ldr	r0, [r7, #4]
    7a14:	4798      	blx	r3
		}
	}
}
    7a16:	bf00      	nop
    7a18:	3710      	adds	r7, #16
    7a1a:	46bd      	mov	sp, r7
    7a1c:	bd80      	pop	{r7, pc}
    7a1e:	bf00      	nop
    7a20:	0000726d 	.word	0x0000726d
    7a24:	00007295 	.word	0x00007295
    7a28:	000072e3 	.word	0x000072e3
    7a2c:	000072af 	.word	0x000072af

00007a30 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    7a30:	b580      	push	{r7, lr}
    7a32:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    7a34:	4b03      	ldr	r3, [pc, #12]	; (7a44 <TC0_Handler+0x14>)
    7a36:	681b      	ldr	r3, [r3, #0]
    7a38:	4618      	mov	r0, r3
    7a3a:	4b03      	ldr	r3, [pc, #12]	; (7a48 <TC0_Handler+0x18>)
    7a3c:	4798      	blx	r3
}
    7a3e:	bf00      	nop
    7a40:	bd80      	pop	{r7, pc}
    7a42:	bf00      	nop
    7a44:	200014a0 	.word	0x200014a0
    7a48:	0000798d 	.word	0x0000798d

00007a4c <TC1_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC1_Handler(void)
{
    7a4c:	b580      	push	{r7, lr}
    7a4e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc1_dev);
    7a50:	4b03      	ldr	r3, [pc, #12]	; (7a60 <TC1_Handler+0x14>)
    7a52:	681b      	ldr	r3, [r3, #0]
    7a54:	4618      	mov	r0, r3
    7a56:	4b03      	ldr	r3, [pc, #12]	; (7a64 <TC1_Handler+0x18>)
    7a58:	4798      	blx	r3
}
    7a5a:	bf00      	nop
    7a5c:	bd80      	pop	{r7, pc}
    7a5e:	bf00      	nop
    7a60:	200014a4 	.word	0x200014a4
    7a64:	0000798d 	.word	0x0000798d

00007a68 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    7a68:	b580      	push	{r7, lr}
    7a6a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    7a6c:	4b03      	ldr	r3, [pc, #12]	; (7a7c <TC2_Handler+0x14>)
    7a6e:	681b      	ldr	r3, [r3, #0]
    7a70:	4618      	mov	r0, r3
    7a72:	4b03      	ldr	r3, [pc, #12]	; (7a80 <TC2_Handler+0x18>)
    7a74:	4798      	blx	r3
}
    7a76:	bf00      	nop
    7a78:	bd80      	pop	{r7, pc}
    7a7a:	bf00      	nop
    7a7c:	200014a8 	.word	0x200014a8
    7a80:	0000798d 	.word	0x0000798d

00007a84 <TC3_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC3_Handler(void)
{
    7a84:	b580      	push	{r7, lr}
    7a86:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc3_dev);
    7a88:	4b03      	ldr	r3, [pc, #12]	; (7a98 <TC3_Handler+0x14>)
    7a8a:	681b      	ldr	r3, [r3, #0]
    7a8c:	4618      	mov	r0, r3
    7a8e:	4b03      	ldr	r3, [pc, #12]	; (7a9c <TC3_Handler+0x18>)
    7a90:	4798      	blx	r3
}
    7a92:	bf00      	nop
    7a94:	bd80      	pop	{r7, pc}
    7a96:	bf00      	nop
    7a98:	200014ac 	.word	0x200014ac
    7a9c:	0000798d 	.word	0x0000798d

00007aa0 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    7aa0:	b580      	push	{r7, lr}
    7aa2:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    7aa4:	4b03      	ldr	r3, [pc, #12]	; (7ab4 <TC7_Handler+0x14>)
    7aa6:	681b      	ldr	r3, [r3, #0]
    7aa8:	4618      	mov	r0, r3
    7aaa:	4b03      	ldr	r3, [pc, #12]	; (7ab8 <TC7_Handler+0x18>)
    7aac:	4798      	blx	r3
}
    7aae:	bf00      	nop
    7ab0:	bd80      	pop	{r7, pc}
    7ab2:	bf00      	nop
    7ab4:	200014b0 	.word	0x200014b0
    7ab8:	000079c5 	.word	0x000079c5

00007abc <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    7abc:	b580      	push	{r7, lr}
    7abe:	b084      	sub	sp, #16
    7ac0:	af00      	add	r7, sp, #0
    7ac2:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    7ac4:	6878      	ldr	r0, [r7, #4]
    7ac6:	4b13      	ldr	r3, [pc, #76]	; (7b14 <get_tc_index+0x58>)
    7ac8:	4798      	blx	r3
    7aca:	4603      	mov	r3, r0
    7acc:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    7ace:	2300      	movs	r3, #0
    7ad0:	73fb      	strb	r3, [r7, #15]
    7ad2:	e010      	b.n	7af6 <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    7ad4:	7bfa      	ldrb	r2, [r7, #15]
    7ad6:	4910      	ldr	r1, [pc, #64]	; (7b18 <get_tc_index+0x5c>)
    7ad8:	4613      	mov	r3, r2
    7ada:	009b      	lsls	r3, r3, #2
    7adc:	4413      	add	r3, r2
    7ade:	009b      	lsls	r3, r3, #2
    7ae0:	440b      	add	r3, r1
    7ae2:	781b      	ldrb	r3, [r3, #0]
    7ae4:	7bba      	ldrb	r2, [r7, #14]
    7ae6:	429a      	cmp	r2, r3
    7ae8:	d102      	bne.n	7af0 <get_tc_index+0x34>
			return i;
    7aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7aee:	e00d      	b.n	7b0c <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    7af0:	7bfb      	ldrb	r3, [r7, #15]
    7af2:	3301      	adds	r3, #1
    7af4:	73fb      	strb	r3, [r7, #15]
    7af6:	7bfb      	ldrb	r3, [r7, #15]
    7af8:	2b04      	cmp	r3, #4
    7afa:	d9eb      	bls.n	7ad4 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    7afc:	f240 2206 	movw	r2, #518	; 0x206
    7b00:	4906      	ldr	r1, [pc, #24]	; (7b1c <get_tc_index+0x60>)
    7b02:	2000      	movs	r0, #0
    7b04:	4b06      	ldr	r3, [pc, #24]	; (7b20 <get_tc_index+0x64>)
    7b06:	4798      	blx	r3
	return -1;
    7b08:	f04f 33ff 	mov.w	r3, #4294967295
}
    7b0c:	4618      	mov	r0, r3
    7b0e:	3710      	adds	r7, #16
    7b10:	46bd      	mov	sp, r7
    7b12:	bd80      	pop	{r7, pc}
    7b14:	00007ba9 	.word	0x00007ba9
    7b18:	20000048 	.word	0x20000048
    7b1c:	000131e4 	.word	0x000131e4
    7b20:	00002f09 	.word	0x00002f09

00007b24 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    7b24:	b480      	push	{r7}
    7b26:	b083      	sub	sp, #12
    7b28:	af00      	add	r7, sp, #0
    7b2a:	6078      	str	r0, [r7, #4]
    7b2c:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    7b2e:	687b      	ldr	r3, [r7, #4]
    7b30:	4a13      	ldr	r2, [pc, #76]	; (7b80 <_tc_init_irq_param+0x5c>)
    7b32:	4293      	cmp	r3, r2
    7b34:	d102      	bne.n	7b3c <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    7b36:	4a13      	ldr	r2, [pc, #76]	; (7b84 <_tc_init_irq_param+0x60>)
    7b38:	683b      	ldr	r3, [r7, #0]
    7b3a:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC1) {
    7b3c:	687b      	ldr	r3, [r7, #4]
    7b3e:	4a12      	ldr	r2, [pc, #72]	; (7b88 <_tc_init_irq_param+0x64>)
    7b40:	4293      	cmp	r3, r2
    7b42:	d102      	bne.n	7b4a <_tc_init_irq_param+0x26>
		_tc1_dev = (struct _timer_device *)dev;
    7b44:	4a11      	ldr	r2, [pc, #68]	; (7b8c <_tc_init_irq_param+0x68>)
    7b46:	683b      	ldr	r3, [r7, #0]
    7b48:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    7b4a:	687b      	ldr	r3, [r7, #4]
    7b4c:	4a10      	ldr	r2, [pc, #64]	; (7b90 <_tc_init_irq_param+0x6c>)
    7b4e:	4293      	cmp	r3, r2
    7b50:	d102      	bne.n	7b58 <_tc_init_irq_param+0x34>
		_tc2_dev = (struct _timer_device *)dev;
    7b52:	4a10      	ldr	r2, [pc, #64]	; (7b94 <_tc_init_irq_param+0x70>)
    7b54:	683b      	ldr	r3, [r7, #0]
    7b56:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC3) {
    7b58:	687b      	ldr	r3, [r7, #4]
    7b5a:	4a0f      	ldr	r2, [pc, #60]	; (7b98 <_tc_init_irq_param+0x74>)
    7b5c:	4293      	cmp	r3, r2
    7b5e:	d102      	bne.n	7b66 <_tc_init_irq_param+0x42>
		_tc3_dev = (struct _timer_device *)dev;
    7b60:	4a0e      	ldr	r2, [pc, #56]	; (7b9c <_tc_init_irq_param+0x78>)
    7b62:	683b      	ldr	r3, [r7, #0]
    7b64:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    7b66:	687b      	ldr	r3, [r7, #4]
    7b68:	4a0d      	ldr	r2, [pc, #52]	; (7ba0 <_tc_init_irq_param+0x7c>)
    7b6a:	4293      	cmp	r3, r2
    7b6c:	d102      	bne.n	7b74 <_tc_init_irq_param+0x50>
		_tc7_dev = (struct _pwm_device *)dev;
    7b6e:	4a0d      	ldr	r2, [pc, #52]	; (7ba4 <_tc_init_irq_param+0x80>)
    7b70:	683b      	ldr	r3, [r7, #0]
    7b72:	6013      	str	r3, [r2, #0]
	}
}
    7b74:	bf00      	nop
    7b76:	370c      	adds	r7, #12
    7b78:	46bd      	mov	sp, r7
    7b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b7e:	4770      	bx	lr
    7b80:	40003800 	.word	0x40003800
    7b84:	200014a0 	.word	0x200014a0
    7b88:	40003c00 	.word	0x40003c00
    7b8c:	200014a4 	.word	0x200014a4
    7b90:	4101a000 	.word	0x4101a000
    7b94:	200014a8 	.word	0x200014a8
    7b98:	4101c000 	.word	0x4101c000
    7b9c:	200014ac 	.word	0x200014ac
    7ba0:	43001800 	.word	0x43001800
    7ba4:	200014b0 	.word	0x200014b0

00007ba8 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    7ba8:	b4b0      	push	{r4, r5, r7}
    7baa:	b08d      	sub	sp, #52	; 0x34
    7bac:	af00      	add	r7, sp, #0
    7bae:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    7bb0:	4b13      	ldr	r3, [pc, #76]	; (7c00 <_get_hardware_offset+0x58>)
    7bb2:	f107 040c 	add.w	r4, r7, #12
    7bb6:	461d      	mov	r5, r3
    7bb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7bba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    7bbc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    7bc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    7bc4:	2300      	movs	r3, #0
    7bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    7bc8:	e010      	b.n	7bec <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    7bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7bcc:	009b      	lsls	r3, r3, #2
    7bce:	f107 0230 	add.w	r2, r7, #48	; 0x30
    7bd2:	4413      	add	r3, r2
    7bd4:	f853 3c24 	ldr.w	r3, [r3, #-36]
    7bd8:	461a      	mov	r2, r3
    7bda:	687b      	ldr	r3, [r7, #4]
    7bdc:	429a      	cmp	r2, r3
    7bde:	d102      	bne.n	7be6 <_get_hardware_offset+0x3e>
			return i;
    7be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7be2:	b2db      	uxtb	r3, r3
    7be4:	e006      	b.n	7bf4 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    7be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7be8:	3301      	adds	r3, #1
    7bea:	62fb      	str	r3, [r7, #44]	; 0x2c
    7bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7bee:	2b07      	cmp	r3, #7
    7bf0:	d9eb      	bls.n	7bca <_get_hardware_offset+0x22>
		}
	}
	return 0;
    7bf2:	2300      	movs	r3, #0
}
    7bf4:	4618      	mov	r0, r3
    7bf6:	3734      	adds	r7, #52	; 0x34
    7bf8:	46bd      	mov	sp, r7
    7bfa:	bcb0      	pop	{r4, r5, r7}
    7bfc:	4770      	bx	lr
    7bfe:	bf00      	nop
    7c00:	000131f8 	.word	0x000131f8

00007c04 <__NVIC_EnableIRQ>:
{
    7c04:	b480      	push	{r7}
    7c06:	b083      	sub	sp, #12
    7c08:	af00      	add	r7, sp, #0
    7c0a:	4603      	mov	r3, r0
    7c0c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7c0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7c12:	2b00      	cmp	r3, #0
    7c14:	db0b      	blt.n	7c2e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7c16:	4909      	ldr	r1, [pc, #36]	; (7c3c <__NVIC_EnableIRQ+0x38>)
    7c18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7c1c:	095b      	lsrs	r3, r3, #5
    7c1e:	88fa      	ldrh	r2, [r7, #6]
    7c20:	f002 021f 	and.w	r2, r2, #31
    7c24:	2001      	movs	r0, #1
    7c26:	fa00 f202 	lsl.w	r2, r0, r2
    7c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7c2e:	bf00      	nop
    7c30:	370c      	adds	r7, #12
    7c32:	46bd      	mov	sp, r7
    7c34:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c38:	4770      	bx	lr
    7c3a:	bf00      	nop
    7c3c:	e000e100 	.word	0xe000e100

00007c40 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    7c40:	b480      	push	{r7}
    7c42:	b087      	sub	sp, #28
    7c44:	af00      	add	r7, sp, #0
    7c46:	60f8      	str	r0, [r7, #12]
    7c48:	460b      	mov	r3, r1
    7c4a:	607a      	str	r2, [r7, #4]
    7c4c:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    7c4e:	7afa      	ldrb	r2, [r7, #11]
    7c50:	68f9      	ldr	r1, [r7, #12]
    7c52:	4613      	mov	r3, r2
    7c54:	009b      	lsls	r3, r3, #2
    7c56:	4413      	add	r3, r2
    7c58:	009b      	lsls	r3, r3, #2
    7c5a:	440b      	add	r3, r1
    7c5c:	3340      	adds	r3, #64	; 0x40
    7c5e:	681b      	ldr	r3, [r3, #0]
    7c60:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    7c62:	697a      	ldr	r2, [r7, #20]
    7c64:	687b      	ldr	r3, [r7, #4]
    7c66:	4013      	ands	r3, r2
    7c68:	617b      	str	r3, [r7, #20]
	return tmp;
    7c6a:	697b      	ldr	r3, [r7, #20]
}
    7c6c:	4618      	mov	r0, r3
    7c6e:	371c      	adds	r7, #28
    7c70:	46bd      	mov	sp, r7
    7c72:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c76:	4770      	bx	lr

00007c78 <hri_oscctrl_get_STATUS_reg>:
{
    7c78:	b480      	push	{r7}
    7c7a:	b085      	sub	sp, #20
    7c7c:	af00      	add	r7, sp, #0
    7c7e:	6078      	str	r0, [r7, #4]
    7c80:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    7c82:	687b      	ldr	r3, [r7, #4]
    7c84:	691b      	ldr	r3, [r3, #16]
    7c86:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7c88:	68fa      	ldr	r2, [r7, #12]
    7c8a:	683b      	ldr	r3, [r7, #0]
    7c8c:	4013      	ands	r3, r2
    7c8e:	60fb      	str	r3, [r7, #12]
	return tmp;
    7c90:	68fb      	ldr	r3, [r7, #12]
}
    7c92:	4618      	mov	r0, r3
    7c94:	3714      	adds	r7, #20
    7c96:	46bd      	mov	sp, r7
    7c98:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c9c:	4770      	bx	lr

00007c9e <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    7c9e:	b480      	push	{r7}
    7ca0:	b085      	sub	sp, #20
    7ca2:	af00      	add	r7, sp, #0
    7ca4:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    7ca6:	687b      	ldr	r3, [r7, #4]
    7ca8:	f893 3020 	ldrb.w	r3, [r3, #32]
    7cac:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    7cae:	7bfb      	ldrb	r3, [r7, #15]
    7cb0:	f003 0301 	and.w	r3, r3, #1
    7cb4:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    7cb6:	7bfb      	ldrb	r3, [r7, #15]
    7cb8:	2b00      	cmp	r3, #0
    7cba:	bf14      	ite	ne
    7cbc:	2301      	movne	r3, #1
    7cbe:	2300      	moveq	r3, #0
    7cc0:	b2db      	uxtb	r3, r3
}
    7cc2:	4618      	mov	r0, r3
    7cc4:	3714      	adds	r7, #20
    7cc6:	46bd      	mov	sp, r7
    7cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ccc:	4770      	bx	lr

00007cce <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    7cce:	b480      	push	{r7}
    7cd0:	b083      	sub	sp, #12
    7cd2:	af00      	add	r7, sp, #0
    7cd4:	6078      	str	r0, [r7, #4]
    7cd6:	460b      	mov	r3, r1
    7cd8:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    7cda:	bf00      	nop
    7cdc:	687b      	ldr	r3, [r7, #4]
    7cde:	789b      	ldrb	r3, [r3, #2]
    7ce0:	b2da      	uxtb	r2, r3
    7ce2:	78fb      	ldrb	r3, [r7, #3]
    7ce4:	4013      	ands	r3, r2
    7ce6:	b2db      	uxtb	r3, r3
    7ce8:	2b00      	cmp	r3, #0
    7cea:	d1f7      	bne.n	7cdc <hri_usb_wait_for_sync+0xe>
	};
}
    7cec:	bf00      	nop
    7cee:	370c      	adds	r7, #12
    7cf0:	46bd      	mov	sp, r7
    7cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    7cf6:	4770      	bx	lr

00007cf8 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    7cf8:	b480      	push	{r7}
    7cfa:	b083      	sub	sp, #12
    7cfc:	af00      	add	r7, sp, #0
    7cfe:	6078      	str	r0, [r7, #4]
    7d00:	460b      	mov	r3, r1
    7d02:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    7d04:	687b      	ldr	r3, [r7, #4]
    7d06:	789b      	ldrb	r3, [r3, #2]
    7d08:	b2da      	uxtb	r2, r3
    7d0a:	78fb      	ldrb	r3, [r7, #3]
    7d0c:	4013      	ands	r3, r2
    7d0e:	b2db      	uxtb	r3, r3
    7d10:	2b00      	cmp	r3, #0
    7d12:	bf14      	ite	ne
    7d14:	2301      	movne	r3, #1
    7d16:	2300      	moveq	r3, #0
    7d18:	b2db      	uxtb	r3, r3
}
    7d1a:	4618      	mov	r0, r3
    7d1c:	370c      	adds	r7, #12
    7d1e:	46bd      	mov	sp, r7
    7d20:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d24:	4770      	bx	lr

00007d26 <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    7d26:	b480      	push	{r7}
    7d28:	b085      	sub	sp, #20
    7d2a:	af00      	add	r7, sp, #0
    7d2c:	6078      	str	r0, [r7, #4]
    7d2e:	460b      	mov	r3, r1
    7d30:	70fb      	strb	r3, [r7, #3]
    7d32:	4613      	mov	r3, r2
    7d34:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    7d36:	78fb      	ldrb	r3, [r7, #3]
    7d38:	687a      	ldr	r2, [r7, #4]
    7d3a:	3308      	adds	r3, #8
    7d3c:	015b      	lsls	r3, r3, #5
    7d3e:	4413      	add	r3, r2
    7d40:	3307      	adds	r3, #7
    7d42:	781b      	ldrb	r3, [r3, #0]
    7d44:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    7d46:	7bfa      	ldrb	r2, [r7, #15]
    7d48:	78bb      	ldrb	r3, [r7, #2]
    7d4a:	4013      	ands	r3, r2
    7d4c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    7d4e:	7bfb      	ldrb	r3, [r7, #15]
}
    7d50:	4618      	mov	r0, r3
    7d52:	3714      	adds	r7, #20
    7d54:	46bd      	mov	sp, r7
    7d56:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d5a:	4770      	bx	lr

00007d5c <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    7d5c:	b480      	push	{r7}
    7d5e:	b083      	sub	sp, #12
    7d60:	af00      	add	r7, sp, #0
    7d62:	6078      	str	r0, [r7, #4]
    7d64:	460b      	mov	r3, r1
    7d66:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    7d68:	78fb      	ldrb	r3, [r7, #3]
    7d6a:	687a      	ldr	r2, [r7, #4]
    7d6c:	3308      	adds	r3, #8
    7d6e:	015b      	lsls	r3, r3, #5
    7d70:	4413      	add	r3, r2
    7d72:	3307      	adds	r3, #7
    7d74:	781b      	ldrb	r3, [r3, #0]
    7d76:	b2db      	uxtb	r3, r3
}
    7d78:	4618      	mov	r0, r3
    7d7a:	370c      	adds	r7, #12
    7d7c:	46bd      	mov	sp, r7
    7d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d82:	4770      	bx	lr

00007d84 <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    7d84:	b480      	push	{r7}
    7d86:	b083      	sub	sp, #12
    7d88:	af00      	add	r7, sp, #0
    7d8a:	6078      	str	r0, [r7, #4]
    7d8c:	460b      	mov	r3, r1
    7d8e:	70fb      	strb	r3, [r7, #3]
    7d90:	4613      	mov	r3, r2
    7d92:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    7d94:	78fb      	ldrb	r3, [r7, #3]
    7d96:	687a      	ldr	r2, [r7, #4]
    7d98:	3308      	adds	r3, #8
    7d9a:	015b      	lsls	r3, r3, #5
    7d9c:	4413      	add	r3, r2
    7d9e:	3307      	adds	r3, #7
    7da0:	78ba      	ldrb	r2, [r7, #2]
    7da2:	701a      	strb	r2, [r3, #0]
}
    7da4:	bf00      	nop
    7da6:	370c      	adds	r7, #12
    7da8:	46bd      	mov	sp, r7
    7daa:	f85d 7b04 	ldr.w	r7, [sp], #4
    7dae:	4770      	bx	lr

00007db0 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    7db0:	b480      	push	{r7}
    7db2:	b083      	sub	sp, #12
    7db4:	af00      	add	r7, sp, #0
    7db6:	6078      	str	r0, [r7, #4]
    7db8:	460b      	mov	r3, r1
    7dba:	70fb      	strb	r3, [r7, #3]
    7dbc:	4613      	mov	r3, r2
    7dbe:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    7dc0:	78fb      	ldrb	r3, [r7, #3]
    7dc2:	687a      	ldr	r2, [r7, #4]
    7dc4:	3308      	adds	r3, #8
    7dc6:	015b      	lsls	r3, r3, #5
    7dc8:	4413      	add	r3, r2
    7dca:	3305      	adds	r3, #5
    7dcc:	78ba      	ldrb	r2, [r7, #2]
    7dce:	701a      	strb	r2, [r3, #0]
}
    7dd0:	bf00      	nop
    7dd2:	370c      	adds	r7, #12
    7dd4:	46bd      	mov	sp, r7
    7dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7dda:	4770      	bx	lr

00007ddc <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    7ddc:	b480      	push	{r7}
    7dde:	b083      	sub	sp, #12
    7de0:	af00      	add	r7, sp, #0
    7de2:	6078      	str	r0, [r7, #4]
    7de4:	460b      	mov	r3, r1
    7de6:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    7de8:	78fb      	ldrb	r3, [r7, #3]
    7dea:	687a      	ldr	r2, [r7, #4]
    7dec:	3308      	adds	r3, #8
    7dee:	015b      	lsls	r3, r3, #5
    7df0:	4413      	add	r3, r2
    7df2:	3306      	adds	r3, #6
    7df4:	781b      	ldrb	r3, [r3, #0]
    7df6:	b2db      	uxtb	r3, r3
}
    7df8:	4618      	mov	r0, r3
    7dfa:	370c      	adds	r7, #12
    7dfc:	46bd      	mov	sp, r7
    7dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e02:	4770      	bx	lr

00007e04 <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    7e04:	b480      	push	{r7}
    7e06:	b083      	sub	sp, #12
    7e08:	af00      	add	r7, sp, #0
    7e0a:	6078      	str	r0, [r7, #4]
    7e0c:	460b      	mov	r3, r1
    7e0e:	70fb      	strb	r3, [r7, #3]
    7e10:	4613      	mov	r3, r2
    7e12:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    7e14:	78fb      	ldrb	r3, [r7, #3]
    7e16:	687a      	ldr	r2, [r7, #4]
    7e18:	3308      	adds	r3, #8
    7e1a:	015b      	lsls	r3, r3, #5
    7e1c:	4413      	add	r3, r2
    7e1e:	3304      	adds	r3, #4
    7e20:	78ba      	ldrb	r2, [r7, #2]
    7e22:	701a      	strb	r2, [r3, #0]
}
    7e24:	bf00      	nop
    7e26:	370c      	adds	r7, #12
    7e28:	46bd      	mov	sp, r7
    7e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e2e:	4770      	bx	lr

00007e30 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    7e30:	b480      	push	{r7}
    7e32:	b083      	sub	sp, #12
    7e34:	af00      	add	r7, sp, #0
    7e36:	6078      	str	r0, [r7, #4]
    7e38:	460b      	mov	r3, r1
    7e3a:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    7e3c:	78fb      	ldrb	r3, [r7, #3]
    7e3e:	687a      	ldr	r2, [r7, #4]
    7e40:	015b      	lsls	r3, r3, #5
    7e42:	4413      	add	r3, r2
    7e44:	f503 7384 	add.w	r3, r3, #264	; 0x108
    7e48:	2210      	movs	r2, #16
    7e4a:	701a      	strb	r2, [r3, #0]
}
    7e4c:	bf00      	nop
    7e4e:	370c      	adds	r7, #12
    7e50:	46bd      	mov	sp, r7
    7e52:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e56:	4770      	bx	lr

00007e58 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    7e58:	b480      	push	{r7}
    7e5a:	b083      	sub	sp, #12
    7e5c:	af00      	add	r7, sp, #0
    7e5e:	6078      	str	r0, [r7, #4]
    7e60:	460b      	mov	r3, r1
    7e62:	70fb      	strb	r3, [r7, #3]
    7e64:	4613      	mov	r3, r2
    7e66:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    7e68:	78fb      	ldrb	r3, [r7, #3]
    7e6a:	687a      	ldr	r2, [r7, #4]
    7e6c:	015b      	lsls	r3, r3, #5
    7e6e:	4413      	add	r3, r2
    7e70:	f203 1309 	addw	r3, r3, #265	; 0x109
    7e74:	78ba      	ldrb	r2, [r7, #2]
    7e76:	701a      	strb	r2, [r3, #0]
}
    7e78:	bf00      	nop
    7e7a:	370c      	adds	r7, #12
    7e7c:	46bd      	mov	sp, r7
    7e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e82:	4770      	bx	lr

00007e84 <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    7e84:	b480      	push	{r7}
    7e86:	b083      	sub	sp, #12
    7e88:	af00      	add	r7, sp, #0
    7e8a:	6078      	str	r0, [r7, #4]
    7e8c:	460b      	mov	r3, r1
    7e8e:	70fb      	strb	r3, [r7, #3]
    7e90:	4613      	mov	r3, r2
    7e92:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    7e94:	78fb      	ldrb	r3, [r7, #3]
    7e96:	687a      	ldr	r2, [r7, #4]
    7e98:	015b      	lsls	r3, r3, #5
    7e9a:	4413      	add	r3, r2
    7e9c:	f503 7384 	add.w	r3, r3, #264	; 0x108
    7ea0:	78ba      	ldrb	r2, [r7, #2]
    7ea2:	701a      	strb	r2, [r3, #0]
}
    7ea4:	bf00      	nop
    7ea6:	370c      	adds	r7, #12
    7ea8:	46bd      	mov	sp, r7
    7eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
    7eae:	4770      	bx	lr

00007eb0 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    7eb0:	b480      	push	{r7}
    7eb2:	b085      	sub	sp, #20
    7eb4:	af00      	add	r7, sp, #0
    7eb6:	6078      	str	r0, [r7, #4]
    7eb8:	460b      	mov	r3, r1
    7eba:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    7ebc:	78fb      	ldrb	r3, [r7, #3]
    7ebe:	687a      	ldr	r2, [r7, #4]
    7ec0:	3308      	adds	r3, #8
    7ec2:	015b      	lsls	r3, r3, #5
    7ec4:	4413      	add	r3, r2
    7ec6:	781b      	ldrb	r3, [r3, #0]
    7ec8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    7eca:	7bfb      	ldrb	r3, [r7, #15]
    7ecc:	f003 0307 	and.w	r3, r3, #7
    7ed0:	73fb      	strb	r3, [r7, #15]
	return tmp;
    7ed2:	7bfb      	ldrb	r3, [r7, #15]
}
    7ed4:	4618      	mov	r0, r3
    7ed6:	3714      	adds	r7, #20
    7ed8:	46bd      	mov	sp, r7
    7eda:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ede:	4770      	bx	lr

00007ee0 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    7ee0:	b480      	push	{r7}
    7ee2:	b085      	sub	sp, #20
    7ee4:	af00      	add	r7, sp, #0
    7ee6:	6078      	str	r0, [r7, #4]
    7ee8:	460b      	mov	r3, r1
    7eea:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    7eec:	78fb      	ldrb	r3, [r7, #3]
    7eee:	687a      	ldr	r2, [r7, #4]
    7ef0:	3308      	adds	r3, #8
    7ef2:	015b      	lsls	r3, r3, #5
    7ef4:	4413      	add	r3, r2
    7ef6:	781b      	ldrb	r3, [r3, #0]
    7ef8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    7efa:	7bfb      	ldrb	r3, [r7, #15]
    7efc:	091b      	lsrs	r3, r3, #4
    7efe:	b2db      	uxtb	r3, r3
    7f00:	f003 0307 	and.w	r3, r3, #7
    7f04:	73fb      	strb	r3, [r7, #15]
	return tmp;
    7f06:	7bfb      	ldrb	r3, [r7, #15]
}
    7f08:	4618      	mov	r0, r3
    7f0a:	3714      	adds	r7, #20
    7f0c:	46bd      	mov	sp, r7
    7f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f12:	4770      	bx	lr

00007f14 <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    7f14:	b480      	push	{r7}
    7f16:	b083      	sub	sp, #12
    7f18:	af00      	add	r7, sp, #0
    7f1a:	6078      	str	r0, [r7, #4]
    7f1c:	460b      	mov	r3, r1
    7f1e:	70fb      	strb	r3, [r7, #3]
    7f20:	4613      	mov	r3, r2
    7f22:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    7f24:	78fb      	ldrb	r3, [r7, #3]
    7f26:	687a      	ldr	r2, [r7, #4]
    7f28:	3308      	adds	r3, #8
    7f2a:	015b      	lsls	r3, r3, #5
    7f2c:	4413      	add	r3, r2
    7f2e:	78ba      	ldrb	r2, [r7, #2]
    7f30:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    7f32:	bf00      	nop
    7f34:	370c      	adds	r7, #12
    7f36:	46bd      	mov	sp, r7
    7f38:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f3c:	4770      	bx	lr

00007f3e <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    7f3e:	b480      	push	{r7}
    7f40:	b083      	sub	sp, #12
    7f42:	af00      	add	r7, sp, #0
    7f44:	6078      	str	r0, [r7, #4]
    7f46:	460b      	mov	r3, r1
    7f48:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    7f4a:	78fb      	ldrb	r3, [r7, #3]
    7f4c:	687a      	ldr	r2, [r7, #4]
    7f4e:	3308      	adds	r3, #8
    7f50:	015b      	lsls	r3, r3, #5
    7f52:	4413      	add	r3, r2
    7f54:	781b      	ldrb	r3, [r3, #0]
    7f56:	b2db      	uxtb	r3, r3
}
    7f58:	4618      	mov	r0, r3
    7f5a:	370c      	adds	r7, #12
    7f5c:	46bd      	mov	sp, r7
    7f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f62:	4770      	bx	lr

00007f64 <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    7f64:	b480      	push	{r7}
    7f66:	b083      	sub	sp, #12
    7f68:	af00      	add	r7, sp, #0
    7f6a:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    7f6c:	687b      	ldr	r3, [r7, #4]
    7f6e:	8b9b      	ldrh	r3, [r3, #28]
    7f70:	b29b      	uxth	r3, r3
}
    7f72:	4618      	mov	r0, r3
    7f74:	370c      	adds	r7, #12
    7f76:	46bd      	mov	sp, r7
    7f78:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f7c:	4770      	bx	lr

00007f7e <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    7f7e:	b480      	push	{r7}
    7f80:	b083      	sub	sp, #12
    7f82:	af00      	add	r7, sp, #0
    7f84:	6078      	str	r0, [r7, #4]
    7f86:	460b      	mov	r3, r1
    7f88:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    7f8a:	687b      	ldr	r3, [r7, #4]
    7f8c:	887a      	ldrh	r2, [r7, #2]
    7f8e:	839a      	strh	r2, [r3, #28]
}
    7f90:	bf00      	nop
    7f92:	370c      	adds	r7, #12
    7f94:	46bd      	mov	sp, r7
    7f96:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f9a:	4770      	bx	lr

00007f9c <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    7f9c:	b480      	push	{r7}
    7f9e:	b083      	sub	sp, #12
    7fa0:	af00      	add	r7, sp, #0
    7fa2:	6078      	str	r0, [r7, #4]
    7fa4:	460b      	mov	r3, r1
    7fa6:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    7fa8:	687b      	ldr	r3, [r7, #4]
    7faa:	887a      	ldrh	r2, [r7, #2]
    7fac:	831a      	strh	r2, [r3, #24]
}
    7fae:	bf00      	nop
    7fb0:	370c      	adds	r7, #12
    7fb2:	46bd      	mov	sp, r7
    7fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
    7fb8:	4770      	bx	lr

00007fba <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    7fba:	b480      	push	{r7}
    7fbc:	b083      	sub	sp, #12
    7fbe:	af00      	add	r7, sp, #0
    7fc0:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    7fc2:	687b      	ldr	r3, [r7, #4]
    7fc4:	8b1b      	ldrh	r3, [r3, #24]
    7fc6:	b29b      	uxth	r3, r3
}
    7fc8:	4618      	mov	r0, r3
    7fca:	370c      	adds	r7, #12
    7fcc:	46bd      	mov	sp, r7
    7fce:	f85d 7b04 	ldr.w	r7, [sp], #4
    7fd2:	4770      	bx	lr

00007fd4 <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    7fd4:	b480      	push	{r7}
    7fd6:	b083      	sub	sp, #12
    7fd8:	af00      	add	r7, sp, #0
    7fda:	6078      	str	r0, [r7, #4]
    7fdc:	460b      	mov	r3, r1
    7fde:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    7fe0:	687b      	ldr	r3, [r7, #4]
    7fe2:	887a      	ldrh	r2, [r7, #2]
    7fe4:	829a      	strh	r2, [r3, #20]
}
    7fe6:	bf00      	nop
    7fe8:	370c      	adds	r7, #12
    7fea:	46bd      	mov	sp, r7
    7fec:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ff0:	4770      	bx	lr

00007ff2 <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    7ff2:	b480      	push	{r7}
    7ff4:	b085      	sub	sp, #20
    7ff6:	af00      	add	r7, sp, #0
    7ff8:	6078      	str	r0, [r7, #4]
    7ffa:	460b      	mov	r3, r1
    7ffc:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    7ffe:	687b      	ldr	r3, [r7, #4]
    8000:	789b      	ldrb	r3, [r3, #2]
    8002:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8004:	7bfa      	ldrb	r2, [r7, #15]
    8006:	78fb      	ldrb	r3, [r7, #3]
    8008:	4013      	ands	r3, r2
    800a:	73fb      	strb	r3, [r7, #15]
	return tmp;
    800c:	7bfb      	ldrb	r3, [r7, #15]
}
    800e:	4618      	mov	r0, r3
    8010:	3714      	adds	r7, #20
    8012:	46bd      	mov	sp, r7
    8014:	f85d 7b04 	ldr.w	r7, [sp], #4
    8018:	4770      	bx	lr
	...

0000801c <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    801c:	b580      	push	{r7, lr}
    801e:	b082      	sub	sp, #8
    8020:	af00      	add	r7, sp, #0
    8022:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    8024:	687b      	ldr	r3, [r7, #4]
    8026:	781b      	ldrb	r3, [r3, #0]
    8028:	b2db      	uxtb	r3, r3
    802a:	f023 0302 	bic.w	r3, r3, #2
    802e:	b2da      	uxtb	r2, r3
    8030:	687b      	ldr	r3, [r7, #4]
    8032:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    8034:	2103      	movs	r1, #3
    8036:	6878      	ldr	r0, [r7, #4]
    8038:	4b02      	ldr	r3, [pc, #8]	; (8044 <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    803a:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    803c:	bf00      	nop
    803e:	3708      	adds	r7, #8
    8040:	46bd      	mov	sp, r7
    8042:	bd80      	pop	{r7, pc}
    8044:	00007ccf 	.word	0x00007ccf

00008048 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    8048:	b580      	push	{r7, lr}
    804a:	b084      	sub	sp, #16
    804c:	af00      	add	r7, sp, #0
    804e:	6078      	str	r0, [r7, #4]
    8050:	460b      	mov	r3, r1
    8052:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    8054:	2103      	movs	r1, #3
    8056:	6878      	ldr	r0, [r7, #4]
    8058:	4b06      	ldr	r3, [pc, #24]	; (8074 <hri_usb_get_CTRLA_reg+0x2c>)
    805a:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    805c:	687b      	ldr	r3, [r7, #4]
    805e:	781b      	ldrb	r3, [r3, #0]
    8060:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8062:	7bfa      	ldrb	r2, [r7, #15]
    8064:	78fb      	ldrb	r3, [r7, #3]
    8066:	4013      	ands	r3, r2
    8068:	73fb      	strb	r3, [r7, #15]
	return tmp;
    806a:	7bfb      	ldrb	r3, [r7, #15]
}
    806c:	4618      	mov	r0, r3
    806e:	3710      	adds	r7, #16
    8070:	46bd      	mov	sp, r7
    8072:	bd80      	pop	{r7, pc}
    8074:	00007ccf 	.word	0x00007ccf

00008078 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    8078:	b580      	push	{r7, lr}
    807a:	b082      	sub	sp, #8
    807c:	af00      	add	r7, sp, #0
    807e:	6078      	str	r0, [r7, #4]
    8080:	460b      	mov	r3, r1
    8082:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    8084:	687b      	ldr	r3, [r7, #4]
    8086:	78fa      	ldrb	r2, [r7, #3]
    8088:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    808a:	2103      	movs	r1, #3
    808c:	6878      	ldr	r0, [r7, #4]
    808e:	4b03      	ldr	r3, [pc, #12]	; (809c <hri_usb_write_CTRLA_reg+0x24>)
    8090:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    8092:	bf00      	nop
    8094:	3708      	adds	r7, #8
    8096:	46bd      	mov	sp, r7
    8098:	bd80      	pop	{r7, pc}
    809a:	bf00      	nop
    809c:	00007ccf 	.word	0x00007ccf

000080a0 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    80a0:	b580      	push	{r7, lr}
    80a2:	b082      	sub	sp, #8
    80a4:	af00      	add	r7, sp, #0
    80a6:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    80a8:	2103      	movs	r1, #3
    80aa:	6878      	ldr	r0, [r7, #4]
    80ac:	4b04      	ldr	r3, [pc, #16]	; (80c0 <hri_usb_read_CTRLA_reg+0x20>)
    80ae:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    80b0:	687b      	ldr	r3, [r7, #4]
    80b2:	781b      	ldrb	r3, [r3, #0]
    80b4:	b2db      	uxtb	r3, r3
}
    80b6:	4618      	mov	r0, r3
    80b8:	3708      	adds	r7, #8
    80ba:	46bd      	mov	sp, r7
    80bc:	bd80      	pop	{r7, pc}
    80be:	bf00      	nop
    80c0:	00007ccf 	.word	0x00007ccf

000080c4 <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    80c4:	b480      	push	{r7}
    80c6:	b083      	sub	sp, #12
    80c8:	af00      	add	r7, sp, #0
    80ca:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    80cc:	687b      	ldr	r3, [r7, #4]
    80ce:	891b      	ldrh	r3, [r3, #8]
    80d0:	b29b      	uxth	r3, r3
    80d2:	f023 0301 	bic.w	r3, r3, #1
    80d6:	b29a      	uxth	r2, r3
    80d8:	687b      	ldr	r3, [r7, #4]
    80da:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    80dc:	bf00      	nop
    80de:	370c      	adds	r7, #12
    80e0:	46bd      	mov	sp, r7
    80e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    80e6:	4770      	bx	lr

000080e8 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    80e8:	b480      	push	{r7}
    80ea:	b083      	sub	sp, #12
    80ec:	af00      	add	r7, sp, #0
    80ee:	6078      	str	r0, [r7, #4]
    80f0:	460b      	mov	r3, r1
    80f2:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    80f4:	687b      	ldr	r3, [r7, #4]
    80f6:	887a      	ldrh	r2, [r7, #2]
    80f8:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    80fa:	bf00      	nop
    80fc:	370c      	adds	r7, #12
    80fe:	46bd      	mov	sp, r7
    8100:	f85d 7b04 	ldr.w	r7, [sp], #4
    8104:	4770      	bx	lr

00008106 <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    8106:	b480      	push	{r7}
    8108:	b083      	sub	sp, #12
    810a:	af00      	add	r7, sp, #0
    810c:	6078      	str	r0, [r7, #4]
    810e:	460b      	mov	r3, r1
    8110:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    8112:	687b      	ldr	r3, [r7, #4]
    8114:	78fa      	ldrb	r2, [r7, #3]
    8116:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    8118:	bf00      	nop
    811a:	370c      	adds	r7, #12
    811c:	46bd      	mov	sp, r7
    811e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8122:	4770      	bx	lr

00008124 <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    8124:	b480      	push	{r7}
    8126:	b083      	sub	sp, #12
    8128:	af00      	add	r7, sp, #0
    812a:	6078      	str	r0, [r7, #4]
    812c:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    812e:	687b      	ldr	r3, [r7, #4]
    8130:	683a      	ldr	r2, [r7, #0]
    8132:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    8134:	bf00      	nop
    8136:	370c      	adds	r7, #12
    8138:	46bd      	mov	sp, r7
    813a:	f85d 7b04 	ldr.w	r7, [sp], #4
    813e:	4770      	bx	lr

00008140 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    8140:	b480      	push	{r7}
    8142:	b083      	sub	sp, #12
    8144:	af00      	add	r7, sp, #0
    8146:	6078      	str	r0, [r7, #4]
    8148:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    814a:	2300      	movs	r3, #0
}
    814c:	4618      	mov	r0, r3
    814e:	370c      	adds	r7, #12
    8150:	46bd      	mov	sp, r7
    8152:	f85d 7b04 	ldr.w	r7, [sp], #4
    8156:	4770      	bx	lr

00008158 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    8158:	b480      	push	{r7}
    815a:	b085      	sub	sp, #20
    815c:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    815e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8162:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    8164:	4b28      	ldr	r3, [pc, #160]	; (8208 <_usb_load_calib+0xb0>)
    8166:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    8168:	f003 031f 	and.w	r3, r3, #31
    816c:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    816e:	4b26      	ldr	r3, [pc, #152]	; (8208 <_usb_load_calib+0xb0>)
    8170:	681b      	ldr	r3, [r3, #0]
    8172:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    8174:	f003 031f 	and.w	r3, r3, #31
    8178:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    817a:	4b23      	ldr	r3, [pc, #140]	; (8208 <_usb_load_calib+0xb0>)
    817c:	681b      	ldr	r3, [r3, #0]
    817e:	0a9b      	lsrs	r3, r3, #10
    8180:	f003 0307 	and.w	r3, r3, #7
    8184:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    8186:	68fb      	ldr	r3, [r7, #12]
    8188:	2b00      	cmp	r3, #0
    818a:	d002      	beq.n	8192 <_usb_load_calib+0x3a>
    818c:	68fb      	ldr	r3, [r7, #12]
    818e:	2b1f      	cmp	r3, #31
    8190:	d101      	bne.n	8196 <_usb_load_calib+0x3e>
		pad_transn = 9;
    8192:	2309      	movs	r3, #9
    8194:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    8196:	68bb      	ldr	r3, [r7, #8]
    8198:	2b00      	cmp	r3, #0
    819a:	d002      	beq.n	81a2 <_usb_load_calib+0x4a>
    819c:	68bb      	ldr	r3, [r7, #8]
    819e:	2b1f      	cmp	r3, #31
    81a0:	d101      	bne.n	81a6 <_usb_load_calib+0x4e>
		pad_transp = 25;
    81a2:	2319      	movs	r3, #25
    81a4:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    81a6:	687b      	ldr	r3, [r7, #4]
    81a8:	2b00      	cmp	r3, #0
    81aa:	d002      	beq.n	81b2 <_usb_load_calib+0x5a>
    81ac:	687b      	ldr	r3, [r7, #4]
    81ae:	2b07      	cmp	r3, #7
    81b0:	d101      	bne.n	81b6 <_usb_load_calib+0x5e>
		pad_trim = 6;
    81b2:	2306      	movs	r3, #6
    81b4:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    81b6:	68fb      	ldr	r3, [r7, #12]
    81b8:	b29b      	uxth	r3, r3
    81ba:	019b      	lsls	r3, r3, #6
    81bc:	b29b      	uxth	r3, r3
    81be:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    81c2:	b29a      	uxth	r2, r3
    81c4:	68bb      	ldr	r3, [r7, #8]
    81c6:	b29b      	uxth	r3, r3
    81c8:	f003 031f 	and.w	r3, r3, #31
    81cc:	b29b      	uxth	r3, r3
    81ce:	4313      	orrs	r3, r2
    81d0:	b29a      	uxth	r2, r3
    81d2:	687b      	ldr	r3, [r7, #4]
    81d4:	b29b      	uxth	r3, r3
    81d6:	031b      	lsls	r3, r3, #12
    81d8:	b29b      	uxth	r3, r3
    81da:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    81de:	b29b      	uxth	r3, r3
    81e0:	4313      	orrs	r3, r2
    81e2:	b29a      	uxth	r2, r3
    81e4:	683b      	ldr	r3, [r7, #0]
    81e6:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    81e8:	683a      	ldr	r2, [r7, #0]
    81ea:	78d3      	ldrb	r3, [r2, #3]
    81ec:	f043 0303 	orr.w	r3, r3, #3
    81f0:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    81f2:	683a      	ldr	r2, [r7, #0]
    81f4:	78d3      	ldrb	r3, [r2, #3]
    81f6:	f043 030c 	orr.w	r3, r3, #12
    81fa:	70d3      	strb	r3, [r2, #3]
}
    81fc:	bf00      	nop
    81fe:	3714      	adds	r7, #20
    8200:	46bd      	mov	sp, r7
    8202:	f85d 7b04 	ldr.w	r7, [sp], #4
    8206:	4770      	bx	lr
    8208:	00800084 	.word	0x00800084

0000820c <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    820c:	b580      	push	{r7, lr}
    820e:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    8210:	bf00      	nop
    8212:	2203      	movs	r2, #3
    8214:	2100      	movs	r1, #0
    8216:	4804      	ldr	r0, [pc, #16]	; (8228 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    8218:	4b04      	ldr	r3, [pc, #16]	; (822c <_usb_d_dev_wait_dpll_rdy+0x20>)
    821a:	4798      	blx	r3
    821c:	4603      	mov	r3, r0
    821e:	2b03      	cmp	r3, #3
    8220:	d1f7      	bne.n	8212 <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    8222:	bf00      	nop
    8224:	bd80      	pop	{r7, pc}
    8226:	bf00      	nop
    8228:	40001000 	.word	0x40001000
    822c:	00007c41 	.word	0x00007c41

00008230 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    8230:	b580      	push	{r7, lr}
    8232:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    8234:	480e      	ldr	r0, [pc, #56]	; (8270 <_usb_d_dev_wait_dfll_rdy+0x40>)
    8236:	4b0f      	ldr	r3, [pc, #60]	; (8274 <_usb_d_dev_wait_dfll_rdy+0x44>)
    8238:	4798      	blx	r3
    823a:	4603      	mov	r3, r0
    823c:	2b00      	cmp	r3, #0
    823e:	d00a      	beq.n	8256 <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    8240:	bf00      	nop
    8242:	f44f 6110 	mov.w	r1, #2304	; 0x900
    8246:	480a      	ldr	r0, [pc, #40]	; (8270 <_usb_d_dev_wait_dfll_rdy+0x40>)
    8248:	4b0b      	ldr	r3, [pc, #44]	; (8278 <_usb_d_dev_wait_dfll_rdy+0x48>)
    824a:	4798      	blx	r3
    824c:	4603      	mov	r3, r0
    824e:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    8252:	d1f6      	bne.n	8242 <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    8254:	e009      	b.n	826a <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    8256:	bf00      	nop
    8258:	f44f 7180 	mov.w	r1, #256	; 0x100
    825c:	4804      	ldr	r0, [pc, #16]	; (8270 <_usb_d_dev_wait_dfll_rdy+0x40>)
    825e:	4b06      	ldr	r3, [pc, #24]	; (8278 <_usb_d_dev_wait_dfll_rdy+0x48>)
    8260:	4798      	blx	r3
    8262:	4603      	mov	r3, r0
    8264:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8268:	d1f6      	bne.n	8258 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    826a:	bf00      	nop
    826c:	bd80      	pop	{r7, pc}
    826e:	bf00      	nop
    8270:	40001000 	.word	0x40001000
    8274:	00007c9f 	.word	0x00007c9f
    8278:	00007c79 	.word	0x00007c79

0000827c <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    827c:	b580      	push	{r7, lr}
    827e:	b082      	sub	sp, #8
    8280:	af00      	add	r7, sp, #0
    8282:	4603      	mov	r3, r0
    8284:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    8286:	79fb      	ldrb	r3, [r7, #7]
    8288:	2b00      	cmp	r3, #0
    828a:	d102      	bne.n	8292 <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    828c:	4b05      	ldr	r3, [pc, #20]	; (82a4 <_usb_d_dev_wait_clk_rdy+0x28>)
    828e:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    8290:	e004      	b.n	829c <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    8292:	79fb      	ldrb	r3, [r7, #7]
    8294:	2b01      	cmp	r3, #1
    8296:	d101      	bne.n	829c <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    8298:	4b03      	ldr	r3, [pc, #12]	; (82a8 <_usb_d_dev_wait_clk_rdy+0x2c>)
    829a:	4798      	blx	r3
}
    829c:	bf00      	nop
    829e:	3708      	adds	r7, #8
    82a0:	46bd      	mov	sp, r7
    82a2:	bd80      	pop	{r7, pc}
    82a4:	00008231 	.word	0x00008231
    82a8:	0000820d 	.word	0x0000820d

000082ac <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    82ac:	b580      	push	{r7, lr}
    82ae:	b082      	sub	sp, #8
    82b0:	af00      	add	r7, sp, #0
    82b2:	4603      	mov	r3, r0
    82b4:	6039      	str	r1, [r7, #0]
    82b6:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    82b8:	683b      	ldr	r3, [r7, #0]
    82ba:	b2da      	uxtb	r2, r3
    82bc:	79fb      	ldrb	r3, [r7, #7]
    82be:	4619      	mov	r1, r3
    82c0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    82c4:	4b02      	ldr	r3, [pc, #8]	; (82d0 <_usbd_ep_int_ack+0x24>)
    82c6:	4798      	blx	r3
}
    82c8:	bf00      	nop
    82ca:	3708      	adds	r7, #8
    82cc:	46bd      	mov	sp, r7
    82ce:	bd80      	pop	{r7, pc}
    82d0:	00007d85 	.word	0x00007d85

000082d4 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    82d4:	b580      	push	{r7, lr}
    82d6:	b082      	sub	sp, #8
    82d8:	af00      	add	r7, sp, #0
    82da:	4603      	mov	r3, r0
    82dc:	6039      	str	r1, [r7, #0]
    82de:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    82e0:	683b      	ldr	r3, [r7, #0]
    82e2:	b2da      	uxtb	r2, r3
    82e4:	79fb      	ldrb	r3, [r7, #7]
    82e6:	4619      	mov	r1, r3
    82e8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    82ec:	4b02      	ldr	r3, [pc, #8]	; (82f8 <_usbd_ep_int_en+0x24>)
    82ee:	4798      	blx	r3
}
    82f0:	bf00      	nop
    82f2:	3708      	adds	r7, #8
    82f4:	46bd      	mov	sp, r7
    82f6:	bd80      	pop	{r7, pc}
    82f8:	00007e59 	.word	0x00007e59

000082fc <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    82fc:	b580      	push	{r7, lr}
    82fe:	b082      	sub	sp, #8
    8300:	af00      	add	r7, sp, #0
    8302:	4603      	mov	r3, r0
    8304:	6039      	str	r1, [r7, #0]
    8306:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    8308:	683b      	ldr	r3, [r7, #0]
    830a:	b2da      	uxtb	r2, r3
    830c:	79fb      	ldrb	r3, [r7, #7]
    830e:	4619      	mov	r1, r3
    8310:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8314:	4b02      	ldr	r3, [pc, #8]	; (8320 <_usbd_ep_int_dis+0x24>)
    8316:	4798      	blx	r3
}
    8318:	bf00      	nop
    831a:	3708      	adds	r7, #8
    831c:	46bd      	mov	sp, r7
    831e:	bd80      	pop	{r7, pc}
    8320:	00007e85 	.word	0x00007e85

00008324 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    8324:	b580      	push	{r7, lr}
    8326:	b082      	sub	sp, #8
    8328:	af00      	add	r7, sp, #0
    832a:	4603      	mov	r3, r0
    832c:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    832e:	79fb      	ldrb	r3, [r7, #7]
    8330:	4619      	mov	r1, r3
    8332:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8336:	4b06      	ldr	r3, [pc, #24]	; (8350 <_usbd_ep_is_ctrl+0x2c>)
    8338:	4798      	blx	r3
    833a:	4603      	mov	r3, r0
    833c:	2b11      	cmp	r3, #17
    833e:	bf0c      	ite	eq
    8340:	2301      	moveq	r3, #1
    8342:	2300      	movne	r3, #0
    8344:	b2db      	uxtb	r3, r3
}
    8346:	4618      	mov	r0, r3
    8348:	3708      	adds	r7, #8
    834a:	46bd      	mov	sp, r7
    834c:	bd80      	pop	{r7, pc}
    834e:	bf00      	nop
    8350:	00007f3f 	.word	0x00007f3f

00008354 <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    8354:	b580      	push	{r7, lr}
    8356:	b082      	sub	sp, #8
    8358:	af00      	add	r7, sp, #0
    835a:	4603      	mov	r3, r0
    835c:	71fb      	strb	r3, [r7, #7]
    835e:	460b      	mov	r3, r1
    8360:	71bb      	strb	r3, [r7, #6]
    8362:	4613      	mov	r3, r2
    8364:	717b      	strb	r3, [r7, #5]
	if (st) {
    8366:	797b      	ldrb	r3, [r7, #5]
    8368:	2b00      	cmp	r3, #0
    836a:	d00b      	beq.n	8384 <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    836c:	79bb      	ldrb	r3, [r7, #6]
    836e:	2210      	movs	r2, #16
    8370:	fa02 f303 	lsl.w	r3, r2, r3
    8374:	b2da      	uxtb	r2, r3
    8376:	79fb      	ldrb	r3, [r7, #7]
    8378:	4619      	mov	r1, r3
    837a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    837e:	4b09      	ldr	r3, [pc, #36]	; (83a4 <_usbd_ep_set_stall+0x50>)
    8380:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    8382:	e00a      	b.n	839a <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8384:	79bb      	ldrb	r3, [r7, #6]
    8386:	2210      	movs	r2, #16
    8388:	fa02 f303 	lsl.w	r3, r2, r3
    838c:	b2da      	uxtb	r2, r3
    838e:	79fb      	ldrb	r3, [r7, #7]
    8390:	4619      	mov	r1, r3
    8392:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8396:	4b04      	ldr	r3, [pc, #16]	; (83a8 <_usbd_ep_set_stall+0x54>)
    8398:	4798      	blx	r3
}
    839a:	bf00      	nop
    839c:	3708      	adds	r7, #8
    839e:	46bd      	mov	sp, r7
    83a0:	bd80      	pop	{r7, pc}
    83a2:	bf00      	nop
    83a4:	00007db1 	.word	0x00007db1
    83a8:	00007e05 	.word	0x00007e05

000083ac <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    83ac:	b580      	push	{r7, lr}
    83ae:	b084      	sub	sp, #16
    83b0:	af00      	add	r7, sp, #0
    83b2:	4603      	mov	r3, r0
    83b4:	460a      	mov	r2, r1
    83b6:	71fb      	strb	r3, [r7, #7]
    83b8:	4613      	mov	r3, r2
    83ba:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    83bc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    83c0:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    83c2:	79fb      	ldrb	r3, [r7, #7]
    83c4:	4619      	mov	r1, r3
    83c6:	68f8      	ldr	r0, [r7, #12]
    83c8:	4b08      	ldr	r3, [pc, #32]	; (83ec <_usbd_ep_is_stalled+0x40>)
    83ca:	4798      	blx	r3
    83cc:	4603      	mov	r3, r0
    83ce:	4619      	mov	r1, r3
    83d0:	79bb      	ldrb	r3, [r7, #6]
    83d2:	2210      	movs	r2, #16
    83d4:	fa02 f303 	lsl.w	r3, r2, r3
    83d8:	400b      	ands	r3, r1
    83da:	2b00      	cmp	r3, #0
    83dc:	bf14      	ite	ne
    83de:	2301      	movne	r3, #1
    83e0:	2300      	moveq	r3, #0
    83e2:	b2db      	uxtb	r3, r3
}
    83e4:	4618      	mov	r0, r3
    83e6:	3710      	adds	r7, #16
    83e8:	46bd      	mov	sp, r7
    83ea:	bd80      	pop	{r7, pc}
    83ec:	00007ddd 	.word	0x00007ddd

000083f0 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    83f0:	b580      	push	{r7, lr}
    83f2:	b084      	sub	sp, #16
    83f4:	af00      	add	r7, sp, #0
    83f6:	4603      	mov	r3, r0
    83f8:	460a      	mov	r2, r1
    83fa:	71fb      	strb	r3, [r7, #7]
    83fc:	4613      	mov	r3, r2
    83fe:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    8400:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8404:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    8406:	79fb      	ldrb	r3, [r7, #7]
    8408:	4619      	mov	r1, r3
    840a:	68f8      	ldr	r0, [r7, #12]
    840c:	4b08      	ldr	r3, [pc, #32]	; (8430 <_usbd_ep_is_stall_sent+0x40>)
    840e:	4798      	blx	r3
    8410:	4603      	mov	r3, r0
    8412:	4619      	mov	r1, r3
    8414:	79bb      	ldrb	r3, [r7, #6]
    8416:	2220      	movs	r2, #32
    8418:	fa02 f303 	lsl.w	r3, r2, r3
    841c:	400b      	ands	r3, r1
    841e:	2b00      	cmp	r3, #0
    8420:	bf14      	ite	ne
    8422:	2301      	movne	r3, #1
    8424:	2300      	moveq	r3, #0
    8426:	b2db      	uxtb	r3, r3
}
    8428:	4618      	mov	r0, r3
    842a:	3710      	adds	r7, #16
    842c:	46bd      	mov	sp, r7
    842e:	bd80      	pop	{r7, pc}
    8430:	00007d5d 	.word	0x00007d5d

00008434 <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    8434:	b580      	push	{r7, lr}
    8436:	b082      	sub	sp, #8
    8438:	af00      	add	r7, sp, #0
    843a:	4603      	mov	r3, r0
    843c:	460a      	mov	r2, r1
    843e:	71fb      	strb	r3, [r7, #7]
    8440:	4613      	mov	r3, r2
    8442:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    8444:	79bb      	ldrb	r3, [r7, #6]
    8446:	2220      	movs	r2, #32
    8448:	409a      	lsls	r2, r3
    844a:	79fb      	ldrb	r3, [r7, #7]
    844c:	4611      	mov	r1, r2
    844e:	4618      	mov	r0, r3
    8450:	4b02      	ldr	r3, [pc, #8]	; (845c <_usbd_ep_ack_stall+0x28>)
    8452:	4798      	blx	r3
}
    8454:	bf00      	nop
    8456:	3708      	adds	r7, #8
    8458:	46bd      	mov	sp, r7
    845a:	bd80      	pop	{r7, pc}
    845c:	000082ad 	.word	0x000082ad

00008460 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    8460:	b580      	push	{r7, lr}
    8462:	b082      	sub	sp, #8
    8464:	af00      	add	r7, sp, #0
    8466:	4603      	mov	r3, r0
    8468:	71fb      	strb	r3, [r7, #7]
    846a:	460b      	mov	r3, r1
    846c:	71bb      	strb	r3, [r7, #6]
    846e:	4613      	mov	r3, r2
    8470:	717b      	strb	r3, [r7, #5]
	if (en) {
    8472:	797b      	ldrb	r3, [r7, #5]
    8474:	2b00      	cmp	r3, #0
    8476:	d008      	beq.n	848a <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    8478:	79bb      	ldrb	r3, [r7, #6]
    847a:	2220      	movs	r2, #32
    847c:	409a      	lsls	r2, r3
    847e:	79fb      	ldrb	r3, [r7, #7]
    8480:	4611      	mov	r1, r2
    8482:	4618      	mov	r0, r3
    8484:	4b07      	ldr	r3, [pc, #28]	; (84a4 <_usbd_ep_int_stall_en+0x44>)
    8486:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    8488:	e007      	b.n	849a <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    848a:	79bb      	ldrb	r3, [r7, #6]
    848c:	2220      	movs	r2, #32
    848e:	409a      	lsls	r2, r3
    8490:	79fb      	ldrb	r3, [r7, #7]
    8492:	4611      	mov	r1, r2
    8494:	4618      	mov	r0, r3
    8496:	4b04      	ldr	r3, [pc, #16]	; (84a8 <_usbd_ep_int_stall_en+0x48>)
    8498:	4798      	blx	r3
}
    849a:	bf00      	nop
    849c:	3708      	adds	r7, #8
    849e:	46bd      	mov	sp, r7
    84a0:	bd80      	pop	{r7, pc}
    84a2:	bf00      	nop
    84a4:	000082d5 	.word	0x000082d5
    84a8:	000082fd 	.word	0x000082fd

000084ac <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    84ac:	b580      	push	{r7, lr}
    84ae:	b082      	sub	sp, #8
    84b0:	af00      	add	r7, sp, #0
    84b2:	4603      	mov	r3, r0
    84b4:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    84b6:	79fb      	ldrb	r3, [r7, #7]
    84b8:	4619      	mov	r1, r3
    84ba:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    84be:	4b03      	ldr	r3, [pc, #12]	; (84cc <_usbd_ep_stop_setup+0x20>)
    84c0:	4798      	blx	r3
}
    84c2:	bf00      	nop
    84c4:	3708      	adds	r7, #8
    84c6:	46bd      	mov	sp, r7
    84c8:	bd80      	pop	{r7, pc}
    84ca:	bf00      	nop
    84cc:	00007e31 	.word	0x00007e31

000084d0 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    84d0:	b580      	push	{r7, lr}
    84d2:	b082      	sub	sp, #8
    84d4:	af00      	add	r7, sp, #0
    84d6:	4603      	mov	r3, r0
    84d8:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    84da:	79fb      	ldrb	r3, [r7, #7]
    84dc:	2210      	movs	r2, #16
    84de:	4619      	mov	r1, r3
    84e0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    84e4:	4b05      	ldr	r3, [pc, #20]	; (84fc <_usbd_ep_is_setup+0x2c>)
    84e6:	4798      	blx	r3
    84e8:	4603      	mov	r3, r0
    84ea:	2b00      	cmp	r3, #0
    84ec:	bf14      	ite	ne
    84ee:	2301      	movne	r3, #1
    84f0:	2300      	moveq	r3, #0
    84f2:	b2db      	uxtb	r3, r3
}
    84f4:	4618      	mov	r0, r3
    84f6:	3708      	adds	r7, #8
    84f8:	46bd      	mov	sp, r7
    84fa:	bd80      	pop	{r7, pc}
    84fc:	00007d27 	.word	0x00007d27

00008500 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    8500:	b580      	push	{r7, lr}
    8502:	b082      	sub	sp, #8
    8504:	af00      	add	r7, sp, #0
    8506:	4603      	mov	r3, r0
    8508:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    850a:	79fb      	ldrb	r3, [r7, #7]
    850c:	2110      	movs	r1, #16
    850e:	4618      	mov	r0, r3
    8510:	4b02      	ldr	r3, [pc, #8]	; (851c <_usbd_ep_ack_setup+0x1c>)
    8512:	4798      	blx	r3
}
    8514:	bf00      	nop
    8516:	3708      	adds	r7, #8
    8518:	46bd      	mov	sp, r7
    851a:	bd80      	pop	{r7, pc}
    851c:	000082ad 	.word	0x000082ad

00008520 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    8520:	b580      	push	{r7, lr}
    8522:	b082      	sub	sp, #8
    8524:	af00      	add	r7, sp, #0
    8526:	4603      	mov	r3, r0
    8528:	71fb      	strb	r3, [r7, #7]
    852a:	460b      	mov	r3, r1
    852c:	71bb      	strb	r3, [r7, #6]
    852e:	4613      	mov	r3, r2
    8530:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    8532:	797b      	ldrb	r3, [r7, #5]
    8534:	2b00      	cmp	r3, #0
    8536:	d00b      	beq.n	8550 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    8538:	79bb      	ldrb	r3, [r7, #6]
    853a:	2201      	movs	r2, #1
    853c:	fa02 f303 	lsl.w	r3, r2, r3
    8540:	b2da      	uxtb	r2, r3
    8542:	79fb      	ldrb	r3, [r7, #7]
    8544:	4619      	mov	r1, r3
    8546:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    854a:	4b09      	ldr	r3, [pc, #36]	; (8570 <_usbd_ep_set_toggle+0x50>)
    854c:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    854e:	e00a      	b.n	8566 <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    8550:	79bb      	ldrb	r3, [r7, #6]
    8552:	2201      	movs	r2, #1
    8554:	fa02 f303 	lsl.w	r3, r2, r3
    8558:	b2da      	uxtb	r2, r3
    855a:	79fb      	ldrb	r3, [r7, #7]
    855c:	4619      	mov	r1, r3
    855e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8562:	4b04      	ldr	r3, [pc, #16]	; (8574 <_usbd_ep_set_toggle+0x54>)
    8564:	4798      	blx	r3
}
    8566:	bf00      	nop
    8568:	3708      	adds	r7, #8
    856a:	46bd      	mov	sp, r7
    856c:	bd80      	pop	{r7, pc}
    856e:	bf00      	nop
    8570:	00007db1 	.word	0x00007db1
    8574:	00007e05 	.word	0x00007e05

00008578 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    8578:	b580      	push	{r7, lr}
    857a:	b082      	sub	sp, #8
    857c:	af00      	add	r7, sp, #0
    857e:	4603      	mov	r3, r0
    8580:	460a      	mov	r2, r1
    8582:	71fb      	strb	r3, [r7, #7]
    8584:	4613      	mov	r3, r2
    8586:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    8588:	79bb      	ldrb	r3, [r7, #6]
    858a:	2201      	movs	r2, #1
    858c:	409a      	lsls	r2, r3
    858e:	79fb      	ldrb	r3, [r7, #7]
    8590:	4611      	mov	r1, r2
    8592:	4618      	mov	r0, r3
    8594:	4b02      	ldr	r3, [pc, #8]	; (85a0 <_usbd_ep_ack_io_cpt+0x28>)
    8596:	4798      	blx	r3
}
    8598:	bf00      	nop
    859a:	3708      	adds	r7, #8
    859c:	46bd      	mov	sp, r7
    859e:	bd80      	pop	{r7, pc}
    85a0:	000082ad 	.word	0x000082ad

000085a4 <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    85a4:	b480      	push	{r7}
    85a6:	b085      	sub	sp, #20
    85a8:	af00      	add	r7, sp, #0
    85aa:	4603      	mov	r3, r0
    85ac:	603a      	str	r2, [r7, #0]
    85ae:	71fb      	strb	r3, [r7, #7]
    85b0:	460b      	mov	r3, r1
    85b2:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    85b4:	79fa      	ldrb	r2, [r7, #7]
    85b6:	79bb      	ldrb	r3, [r7, #6]
    85b8:	0052      	lsls	r2, r2, #1
    85ba:	4413      	add	r3, r2
    85bc:	011b      	lsls	r3, r3, #4
    85be:	4a06      	ldr	r2, [pc, #24]	; (85d8 <_usbd_ep_set_buf+0x34>)
    85c0:	4413      	add	r3, r2
    85c2:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    85c4:	68fb      	ldr	r3, [r7, #12]
    85c6:	683a      	ldr	r2, [r7, #0]
    85c8:	601a      	str	r2, [r3, #0]
}
    85ca:	bf00      	nop
    85cc:	3714      	adds	r7, #20
    85ce:	46bd      	mov	sp, r7
    85d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    85d4:	4770      	bx	lr
    85d6:	bf00      	nop
    85d8:	200017bc 	.word	0x200017bc

000085dc <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    85dc:	b480      	push	{r7}
    85de:	b085      	sub	sp, #20
    85e0:	af00      	add	r7, sp, #0
    85e2:	4603      	mov	r3, r0
    85e4:	71fb      	strb	r3, [r7, #7]
    85e6:	460b      	mov	r3, r1
    85e8:	71bb      	strb	r3, [r7, #6]
    85ea:	4613      	mov	r3, r2
    85ec:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    85ee:	79fa      	ldrb	r2, [r7, #7]
    85f0:	79bb      	ldrb	r3, [r7, #6]
    85f2:	0052      	lsls	r2, r2, #1
    85f4:	4413      	add	r3, r2
    85f6:	011b      	lsls	r3, r3, #4
    85f8:	4a08      	ldr	r2, [pc, #32]	; (861c <_usbd_ep_set_in_count+0x40>)
    85fa:	4413      	add	r3, r2
    85fc:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    85fe:	88bb      	ldrh	r3, [r7, #4]
    8600:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8604:	b299      	uxth	r1, r3
    8606:	68fa      	ldr	r2, [r7, #12]
    8608:	6853      	ldr	r3, [r2, #4]
    860a:	f361 339b 	bfi	r3, r1, #14, #14
    860e:	6053      	str	r3, [r2, #4]
}
    8610:	bf00      	nop
    8612:	3714      	adds	r7, #20
    8614:	46bd      	mov	sp, r7
    8616:	f85d 7b04 	ldr.w	r7, [sp], #4
    861a:	4770      	bx	lr
    861c:	200017bc 	.word	0x200017bc

00008620 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    8620:	b480      	push	{r7}
    8622:	b085      	sub	sp, #20
    8624:	af00      	add	r7, sp, #0
    8626:	4603      	mov	r3, r0
    8628:	71fb      	strb	r3, [r7, #7]
    862a:	460b      	mov	r3, r1
    862c:	71bb      	strb	r3, [r7, #6]
    862e:	4613      	mov	r3, r2
    8630:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8632:	79fa      	ldrb	r2, [r7, #7]
    8634:	79bb      	ldrb	r3, [r7, #6]
    8636:	0052      	lsls	r2, r2, #1
    8638:	4413      	add	r3, r2
    863a:	011b      	lsls	r3, r3, #4
    863c:	4a08      	ldr	r2, [pc, #32]	; (8660 <_usbd_ep_set_in_size+0x40>)
    863e:	4413      	add	r3, r2
    8640:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    8642:	88bb      	ldrh	r3, [r7, #4]
    8644:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8648:	b299      	uxth	r1, r3
    864a:	68fa      	ldr	r2, [r7, #12]
    864c:	6853      	ldr	r3, [r2, #4]
    864e:	f361 030d 	bfi	r3, r1, #0, #14
    8652:	6053      	str	r3, [r2, #4]
}
    8654:	bf00      	nop
    8656:	3714      	adds	r7, #20
    8658:	46bd      	mov	sp, r7
    865a:	f85d 7b04 	ldr.w	r7, [sp], #4
    865e:	4770      	bx	lr
    8660:	200017bc 	.word	0x200017bc

00008664 <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    8664:	b480      	push	{r7}
    8666:	b085      	sub	sp, #20
    8668:	af00      	add	r7, sp, #0
    866a:	4603      	mov	r3, r0
    866c:	71fb      	strb	r3, [r7, #7]
    866e:	460b      	mov	r3, r1
    8670:	71bb      	strb	r3, [r7, #6]
    8672:	4613      	mov	r3, r2
    8674:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8676:	79fa      	ldrb	r2, [r7, #7]
    8678:	79bb      	ldrb	r3, [r7, #6]
    867a:	0052      	lsls	r2, r2, #1
    867c:	4413      	add	r3, r2
    867e:	011b      	lsls	r3, r3, #4
    8680:	4a08      	ldr	r2, [pc, #32]	; (86a4 <_usbd_ep_set_out_count+0x40>)
    8682:	4413      	add	r3, r2
    8684:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    8686:	88bb      	ldrh	r3, [r7, #4]
    8688:	f3c3 030d 	ubfx	r3, r3, #0, #14
    868c:	b299      	uxth	r1, r3
    868e:	68fa      	ldr	r2, [r7, #12]
    8690:	6853      	ldr	r3, [r2, #4]
    8692:	f361 030d 	bfi	r3, r1, #0, #14
    8696:	6053      	str	r3, [r2, #4]
}
    8698:	bf00      	nop
    869a:	3714      	adds	r7, #20
    869c:	46bd      	mov	sp, r7
    869e:	f85d 7b04 	ldr.w	r7, [sp], #4
    86a2:	4770      	bx	lr
    86a4:	200017bc 	.word	0x200017bc

000086a8 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    86a8:	b480      	push	{r7}
    86aa:	b085      	sub	sp, #20
    86ac:	af00      	add	r7, sp, #0
    86ae:	4603      	mov	r3, r0
    86b0:	71fb      	strb	r3, [r7, #7]
    86b2:	460b      	mov	r3, r1
    86b4:	71bb      	strb	r3, [r7, #6]
    86b6:	4613      	mov	r3, r2
    86b8:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    86ba:	79fa      	ldrb	r2, [r7, #7]
    86bc:	79bb      	ldrb	r3, [r7, #6]
    86be:	0052      	lsls	r2, r2, #1
    86c0:	4413      	add	r3, r2
    86c2:	011b      	lsls	r3, r3, #4
    86c4:	4a08      	ldr	r2, [pc, #32]	; (86e8 <_usbd_ep_set_out_size+0x40>)
    86c6:	4413      	add	r3, r2
    86c8:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    86ca:	88bb      	ldrh	r3, [r7, #4]
    86cc:	f3c3 030d 	ubfx	r3, r3, #0, #14
    86d0:	b299      	uxth	r1, r3
    86d2:	68fa      	ldr	r2, [r7, #12]
    86d4:	6853      	ldr	r3, [r2, #4]
    86d6:	f361 339b 	bfi	r3, r1, #14, #14
    86da:	6053      	str	r3, [r2, #4]
}
    86dc:	bf00      	nop
    86de:	3714      	adds	r7, #20
    86e0:	46bd      	mov	sp, r7
    86e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    86e6:	4770      	bx	lr
    86e8:	200017bc 	.word	0x200017bc

000086ec <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    86ec:	b580      	push	{r7, lr}
    86ee:	b084      	sub	sp, #16
    86f0:	af00      	add	r7, sp, #0
    86f2:	60ba      	str	r2, [r7, #8]
    86f4:	607b      	str	r3, [r7, #4]
    86f6:	4603      	mov	r3, r0
    86f8:	73fb      	strb	r3, [r7, #15]
    86fa:	460b      	mov	r3, r1
    86fc:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    86fe:	68bb      	ldr	r3, [r7, #8]
    8700:	b29a      	uxth	r2, r3
    8702:	7bb9      	ldrb	r1, [r7, #14]
    8704:	7bfb      	ldrb	r3, [r7, #15]
    8706:	4618      	mov	r0, r3
    8708:	4b06      	ldr	r3, [pc, #24]	; (8724 <_usbd_ep_set_in_trans+0x38>)
    870a:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    870c:	687b      	ldr	r3, [r7, #4]
    870e:	b29a      	uxth	r2, r3
    8710:	7bb9      	ldrb	r1, [r7, #14]
    8712:	7bfb      	ldrb	r3, [r7, #15]
    8714:	4618      	mov	r0, r3
    8716:	4b04      	ldr	r3, [pc, #16]	; (8728 <_usbd_ep_set_in_trans+0x3c>)
    8718:	4798      	blx	r3
}
    871a:	bf00      	nop
    871c:	3710      	adds	r7, #16
    871e:	46bd      	mov	sp, r7
    8720:	bd80      	pop	{r7, pc}
    8722:	bf00      	nop
    8724:	00008621 	.word	0x00008621
    8728:	000085dd 	.word	0x000085dd

0000872c <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    872c:	b580      	push	{r7, lr}
    872e:	b084      	sub	sp, #16
    8730:	af00      	add	r7, sp, #0
    8732:	60ba      	str	r2, [r7, #8]
    8734:	607b      	str	r3, [r7, #4]
    8736:	4603      	mov	r3, r0
    8738:	73fb      	strb	r3, [r7, #15]
    873a:	460b      	mov	r3, r1
    873c:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    873e:	68bb      	ldr	r3, [r7, #8]
    8740:	b29a      	uxth	r2, r3
    8742:	7bb9      	ldrb	r1, [r7, #14]
    8744:	7bfb      	ldrb	r3, [r7, #15]
    8746:	4618      	mov	r0, r3
    8748:	4b06      	ldr	r3, [pc, #24]	; (8764 <_usbd_ep_set_out_trans+0x38>)
    874a:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    874c:	687b      	ldr	r3, [r7, #4]
    874e:	b29a      	uxth	r2, r3
    8750:	7bb9      	ldrb	r1, [r7, #14]
    8752:	7bfb      	ldrb	r3, [r7, #15]
    8754:	4618      	mov	r0, r3
    8756:	4b04      	ldr	r3, [pc, #16]	; (8768 <_usbd_ep_set_out_trans+0x3c>)
    8758:	4798      	blx	r3
}
    875a:	bf00      	nop
    875c:	3710      	adds	r7, #16
    875e:	46bd      	mov	sp, r7
    8760:	bd80      	pop	{r7, pc}
    8762:	bf00      	nop
    8764:	000086a9 	.word	0x000086a9
    8768:	00008665 	.word	0x00008665

0000876c <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    876c:	b480      	push	{r7}
    876e:	b085      	sub	sp, #20
    8770:	af00      	add	r7, sp, #0
    8772:	4603      	mov	r3, r0
    8774:	460a      	mov	r2, r1
    8776:	71fb      	strb	r3, [r7, #7]
    8778:	4613      	mov	r3, r2
    877a:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    877c:	79fa      	ldrb	r2, [r7, #7]
    877e:	79bb      	ldrb	r3, [r7, #6]
    8780:	0052      	lsls	r2, r2, #1
    8782:	4413      	add	r3, r2
    8784:	011b      	lsls	r3, r3, #4
    8786:	4a06      	ldr	r2, [pc, #24]	; (87a0 <_usbd_ep_clear_bank_status+0x34>)
    8788:	4413      	add	r3, r2
    878a:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    878c:	68fb      	ldr	r3, [r7, #12]
    878e:	2200      	movs	r2, #0
    8790:	729a      	strb	r2, [r3, #10]
}
    8792:	bf00      	nop
    8794:	3714      	adds	r7, #20
    8796:	46bd      	mov	sp, r7
    8798:	f85d 7b04 	ldr.w	r7, [sp], #4
    879c:	4770      	bx	lr
    879e:	bf00      	nop
    87a0:	200017bc 	.word	0x200017bc

000087a4 <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    87a4:	b580      	push	{r7, lr}
    87a6:	b082      	sub	sp, #8
    87a8:	af00      	add	r7, sp, #0
    87aa:	4603      	mov	r3, r0
    87ac:	71fb      	strb	r3, [r7, #7]
    87ae:	460b      	mov	r3, r1
    87b0:	71bb      	strb	r3, [r7, #6]
    87b2:	4613      	mov	r3, r2
    87b4:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    87b6:	797b      	ldrb	r3, [r7, #5]
    87b8:	2b00      	cmp	r3, #0
    87ba:	d00b      	beq.n	87d4 <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    87bc:	79bb      	ldrb	r3, [r7, #6]
    87be:	2240      	movs	r2, #64	; 0x40
    87c0:	fa02 f303 	lsl.w	r3, r2, r3
    87c4:	b2da      	uxtb	r2, r3
    87c6:	79fb      	ldrb	r3, [r7, #7]
    87c8:	4619      	mov	r1, r3
    87ca:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    87ce:	4b09      	ldr	r3, [pc, #36]	; (87f4 <_usbd_ep_set_in_rdy+0x50>)
    87d0:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    87d2:	e00a      	b.n	87ea <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    87d4:	79bb      	ldrb	r3, [r7, #6]
    87d6:	2240      	movs	r2, #64	; 0x40
    87d8:	fa02 f303 	lsl.w	r3, r2, r3
    87dc:	b2da      	uxtb	r2, r3
    87de:	79fb      	ldrb	r3, [r7, #7]
    87e0:	4619      	mov	r1, r3
    87e2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    87e6:	4b04      	ldr	r3, [pc, #16]	; (87f8 <_usbd_ep_set_in_rdy+0x54>)
    87e8:	4798      	blx	r3
}
    87ea:	bf00      	nop
    87ec:	3708      	adds	r7, #8
    87ee:	46bd      	mov	sp, r7
    87f0:	bd80      	pop	{r7, pc}
    87f2:	bf00      	nop
    87f4:	00007db1 	.word	0x00007db1
    87f8:	00007e05 	.word	0x00007e05

000087fc <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    87fc:	b580      	push	{r7, lr}
    87fe:	b082      	sub	sp, #8
    8800:	af00      	add	r7, sp, #0
    8802:	4603      	mov	r3, r0
    8804:	71fb      	strb	r3, [r7, #7]
    8806:	460b      	mov	r3, r1
    8808:	71bb      	strb	r3, [r7, #6]
    880a:	4613      	mov	r3, r2
    880c:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    880e:	797b      	ldrb	r3, [r7, #5]
    8810:	2b00      	cmp	r3, #0
    8812:	d00b      	beq.n	882c <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8814:	79bb      	ldrb	r3, [r7, #6]
    8816:	2240      	movs	r2, #64	; 0x40
    8818:	fa02 f303 	lsl.w	r3, r2, r3
    881c:	b2da      	uxtb	r2, r3
    881e:	79fb      	ldrb	r3, [r7, #7]
    8820:	4619      	mov	r1, r3
    8822:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8826:	4b09      	ldr	r3, [pc, #36]	; (884c <_usbd_ep_set_out_rdy+0x50>)
    8828:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    882a:	e00a      	b.n	8842 <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    882c:	79bb      	ldrb	r3, [r7, #6]
    882e:	2240      	movs	r2, #64	; 0x40
    8830:	fa02 f303 	lsl.w	r3, r2, r3
    8834:	b2da      	uxtb	r2, r3
    8836:	79fb      	ldrb	r3, [r7, #7]
    8838:	4619      	mov	r1, r3
    883a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    883e:	4b04      	ldr	r3, [pc, #16]	; (8850 <_usbd_ep_set_out_rdy+0x54>)
    8840:	4798      	blx	r3
}
    8842:	bf00      	nop
    8844:	3708      	adds	r7, #8
    8846:	46bd      	mov	sp, r7
    8848:	bd80      	pop	{r7, pc}
    884a:	bf00      	nop
    884c:	00007e05 	.word	0x00007e05
    8850:	00007db1 	.word	0x00007db1

00008854 <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    8854:	b480      	push	{r7}
    8856:	b083      	sub	sp, #12
    8858:	af00      	add	r7, sp, #0
    885a:	4603      	mov	r3, r0
    885c:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    885e:	88fb      	ldrh	r3, [r7, #6]
    8860:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    8864:	d820      	bhi.n	88a8 <_usbd_ep_pcksize_size+0x54>
    8866:	88fb      	ldrh	r3, [r7, #6]
    8868:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    886c:	d81a      	bhi.n	88a4 <_usbd_ep_pcksize_size+0x50>
    886e:	88fb      	ldrh	r3, [r7, #6]
    8870:	2b80      	cmp	r3, #128	; 0x80
    8872:	d815      	bhi.n	88a0 <_usbd_ep_pcksize_size+0x4c>
    8874:	88fb      	ldrh	r3, [r7, #6]
    8876:	2b40      	cmp	r3, #64	; 0x40
    8878:	d810      	bhi.n	889c <_usbd_ep_pcksize_size+0x48>
    887a:	88fb      	ldrh	r3, [r7, #6]
    887c:	2b20      	cmp	r3, #32
    887e:	d80b      	bhi.n	8898 <_usbd_ep_pcksize_size+0x44>
    8880:	88fb      	ldrh	r3, [r7, #6]
    8882:	2b10      	cmp	r3, #16
    8884:	d806      	bhi.n	8894 <_usbd_ep_pcksize_size+0x40>
    8886:	88fb      	ldrh	r3, [r7, #6]
    8888:	2b08      	cmp	r3, #8
    888a:	bf8c      	ite	hi
    888c:	2301      	movhi	r3, #1
    888e:	2300      	movls	r3, #0
    8890:	b2db      	uxtb	r3, r3
    8892:	e00a      	b.n	88aa <_usbd_ep_pcksize_size+0x56>
    8894:	2302      	movs	r3, #2
    8896:	e008      	b.n	88aa <_usbd_ep_pcksize_size+0x56>
    8898:	2303      	movs	r3, #3
    889a:	e006      	b.n	88aa <_usbd_ep_pcksize_size+0x56>
    889c:	2304      	movs	r3, #4
    889e:	e004      	b.n	88aa <_usbd_ep_pcksize_size+0x56>
    88a0:	2305      	movs	r3, #5
    88a2:	e002      	b.n	88aa <_usbd_ep_pcksize_size+0x56>
    88a4:	2306      	movs	r3, #6
    88a6:	e000      	b.n	88aa <_usbd_ep_pcksize_size+0x56>
    88a8:	2307      	movs	r3, #7
}
    88aa:	4618      	mov	r0, r3
    88ac:	370c      	adds	r7, #12
    88ae:	46bd      	mov	sp, r7
    88b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    88b4:	4770      	bx	lr
	...

000088b8 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    88b8:	b480      	push	{r7}
    88ba:	b085      	sub	sp, #20
    88bc:	af00      	add	r7, sp, #0
    88be:	4603      	mov	r3, r0
    88c0:	460a      	mov	r2, r1
    88c2:	71fb      	strb	r3, [r7, #7]
    88c4:	4613      	mov	r3, r2
    88c6:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    88c8:	79fb      	ldrb	r3, [r7, #7]
    88ca:	2b00      	cmp	r3, #0
    88cc:	d008      	beq.n	88e0 <_usb_d_dev_ept+0x28>
    88ce:	79bb      	ldrb	r3, [r7, #6]
    88d0:	2b00      	cmp	r3, #0
    88d2:	d003      	beq.n	88dc <_usb_d_dev_ept+0x24>
    88d4:	79fb      	ldrb	r3, [r7, #7]
    88d6:	3304      	adds	r3, #4
    88d8:	b2db      	uxtb	r3, r3
    88da:	e002      	b.n	88e2 <_usb_d_dev_ept+0x2a>
    88dc:	79fb      	ldrb	r3, [r7, #7]
    88de:	e000      	b.n	88e2 <_usb_d_dev_ept+0x2a>
    88e0:	2300      	movs	r3, #0
    88e2:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    88e4:	7bfa      	ldrb	r2, [r7, #15]
    88e6:	4613      	mov	r3, r2
    88e8:	009b      	lsls	r3, r3, #2
    88ea:	4413      	add	r3, r2
    88ec:	009b      	lsls	r3, r3, #2
    88ee:	3310      	adds	r3, #16
    88f0:	4a04      	ldr	r2, [pc, #16]	; (8904 <_usb_d_dev_ept+0x4c>)
    88f2:	4413      	add	r3, r2
    88f4:	3304      	adds	r3, #4
}
    88f6:	4618      	mov	r0, r3
    88f8:	3714      	adds	r7, #20
    88fa:	46bd      	mov	sp, r7
    88fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    8900:	4770      	bx	lr
    8902:	bf00      	nop
    8904:	200016f4 	.word	0x200016f4

00008908 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    8908:	b580      	push	{r7, lr}
    890a:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    890c:	2104      	movs	r1, #4
    890e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8912:	4b03      	ldr	r3, [pc, #12]	; (8920 <_usb_d_dev_sof+0x18>)
    8914:	4798      	blx	r3
	dev_inst.callbacks.sof();
    8916:	4b03      	ldr	r3, [pc, #12]	; (8924 <_usb_d_dev_sof+0x1c>)
    8918:	681b      	ldr	r3, [r3, #0]
    891a:	4798      	blx	r3
}
    891c:	bf00      	nop
    891e:	bd80      	pop	{r7, pc}
    8920:	00007f7f 	.word	0x00007f7f
    8924:	200016f4 	.word	0x200016f4

00008928 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    8928:	b580      	push	{r7, lr}
    892a:	b084      	sub	sp, #16
    892c:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    892e:	2300      	movs	r3, #0
    8930:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8932:	f240 2101 	movw	r1, #513	; 0x201
    8936:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    893a:	4b1a      	ldr	r3, [pc, #104]	; (89a4 <_usb_d_dev_lpmsusp+0x7c>)
    893c:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    893e:	f240 2101 	movw	r1, #513	; 0x201
    8942:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8946:	4b18      	ldr	r3, [pc, #96]	; (89a8 <_usb_d_dev_lpmsusp+0x80>)
    8948:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    894a:	2170      	movs	r1, #112	; 0x70
    894c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8950:	4b16      	ldr	r3, [pc, #88]	; (89ac <_usb_d_dev_lpmsusp+0x84>)
    8952:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    8954:	2300      	movs	r3, #0
    8956:	73fb      	strb	r3, [r7, #15]
    8958:	e018      	b.n	898c <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    895a:	7bfb      	ldrb	r3, [r7, #15]
    895c:	015b      	lsls	r3, r3, #5
    895e:	4a14      	ldr	r2, [pc, #80]	; (89b0 <_usb_d_dev_lpmsusp+0x88>)
    8960:	4413      	add	r3, r2
    8962:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    8964:	687b      	ldr	r3, [r7, #4]
    8966:	891b      	ldrh	r3, [r3, #8]
    8968:	f3c3 0303 	ubfx	r3, r3, #0, #4
    896c:	b2db      	uxtb	r3, r3
    896e:	2b03      	cmp	r3, #3
    8970:	d109      	bne.n	8986 <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    8972:	687b      	ldr	r3, [r7, #4]
    8974:	891b      	ldrh	r3, [r3, #8]
    8976:	f3c3 130a 	ubfx	r3, r3, #4, #11
    897a:	b29b      	uxth	r3, r3
    897c:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    897e:	687b      	ldr	r3, [r7, #4]
    8980:	2200      	movs	r2, #0
    8982:	811a      	strh	r2, [r3, #8]
			break;
    8984:	e005      	b.n	8992 <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    8986:	7bfb      	ldrb	r3, [r7, #15]
    8988:	3301      	adds	r3, #1
    898a:	73fb      	strb	r3, [r7, #15]
    898c:	7bfb      	ldrb	r3, [r7, #15]
    898e:	2b03      	cmp	r3, #3
    8990:	d9e3      	bls.n	895a <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    8992:	4b08      	ldr	r3, [pc, #32]	; (89b4 <_usb_d_dev_lpmsusp+0x8c>)
    8994:	685b      	ldr	r3, [r3, #4]
    8996:	68b9      	ldr	r1, [r7, #8]
    8998:	2003      	movs	r0, #3
    899a:	4798      	blx	r3
}
    899c:	bf00      	nop
    899e:	3710      	adds	r7, #16
    89a0:	46bd      	mov	sp, r7
    89a2:	bd80      	pop	{r7, pc}
    89a4:	00007f7f 	.word	0x00007f7f
    89a8:	00007fd5 	.word	0x00007fd5
    89ac:	00007f9d 	.word	0x00007f9d
    89b0:	200017bc 	.word	0x200017bc
    89b4:	200016f4 	.word	0x200016f4

000089b8 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    89b8:	b580      	push	{r7, lr}
    89ba:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    89bc:	2180      	movs	r1, #128	; 0x80
    89be:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    89c2:	4b04      	ldr	r3, [pc, #16]	; (89d4 <_usb_d_dev_ramerr+0x1c>)
    89c4:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    89c6:	4b04      	ldr	r3, [pc, #16]	; (89d8 <_usb_d_dev_ramerr+0x20>)
    89c8:	685b      	ldr	r3, [r3, #4]
    89ca:	2100      	movs	r1, #0
    89cc:	2005      	movs	r0, #5
    89ce:	4798      	blx	r3
}
    89d0:	bf00      	nop
    89d2:	bd80      	pop	{r7, pc}
    89d4:	00007f7f 	.word	0x00007f7f
    89d8:	200016f4 	.word	0x200016f4

000089dc <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    89dc:	b580      	push	{r7, lr}
    89de:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    89e0:	2170      	movs	r1, #112	; 0x70
    89e2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    89e6:	4b0b      	ldr	r3, [pc, #44]	; (8a14 <_usb_d_dev_wakeup+0x38>)
    89e8:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    89ea:	2170      	movs	r1, #112	; 0x70
    89ec:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    89f0:	4b09      	ldr	r3, [pc, #36]	; (8a18 <_usb_d_dev_wakeup+0x3c>)
    89f2:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    89f4:	f240 2101 	movw	r1, #513	; 0x201
    89f8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    89fc:	4b07      	ldr	r3, [pc, #28]	; (8a1c <_usb_d_dev_wakeup+0x40>)
    89fe:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    8a00:	2000      	movs	r0, #0
    8a02:	4b07      	ldr	r3, [pc, #28]	; (8a20 <_usb_d_dev_wakeup+0x44>)
    8a04:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    8a06:	4b07      	ldr	r3, [pc, #28]	; (8a24 <_usb_d_dev_wakeup+0x48>)
    8a08:	685b      	ldr	r3, [r3, #4]
    8a0a:	2100      	movs	r1, #0
    8a0c:	2002      	movs	r0, #2
    8a0e:	4798      	blx	r3
}
    8a10:	bf00      	nop
    8a12:	bd80      	pop	{r7, pc}
    8a14:	00007f7f 	.word	0x00007f7f
    8a18:	00007fd5 	.word	0x00007fd5
    8a1c:	00007f9d 	.word	0x00007f9d
    8a20:	0000827d 	.word	0x0000827d
    8a24:	200016f4 	.word	0x200016f4

00008a28 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    8a28:	b580      	push	{r7, lr}
    8a2a:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    8a2c:	2200      	movs	r2, #0
    8a2e:	2100      	movs	r1, #0
    8a30:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8a34:	4b0d      	ldr	r3, [pc, #52]	; (8a6c <_usb_d_dev_reset+0x44>)
    8a36:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    8a38:	2108      	movs	r1, #8
    8a3a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8a3e:	4b0c      	ldr	r3, [pc, #48]	; (8a70 <_usb_d_dev_reset+0x48>)
    8a40:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    8a42:	2170      	movs	r1, #112	; 0x70
    8a44:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8a48:	4b0a      	ldr	r3, [pc, #40]	; (8a74 <_usb_d_dev_reset+0x4c>)
    8a4a:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8a4c:	f240 2101 	movw	r1, #513	; 0x201
    8a50:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8a54:	4b08      	ldr	r3, [pc, #32]	; (8a78 <_usb_d_dev_reset+0x50>)
    8a56:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    8a58:	4b08      	ldr	r3, [pc, #32]	; (8a7c <_usb_d_dev_reset+0x54>)
    8a5a:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    8a5c:	4b08      	ldr	r3, [pc, #32]	; (8a80 <_usb_d_dev_reset+0x58>)
    8a5e:	685b      	ldr	r3, [r3, #4]
    8a60:	2100      	movs	r1, #0
    8a62:	2001      	movs	r0, #1
    8a64:	4798      	blx	r3
}
    8a66:	bf00      	nop
    8a68:	bd80      	pop	{r7, pc}
    8a6a:	bf00      	nop
    8a6c:	00007f15 	.word	0x00007f15
    8a70:	00007f7f 	.word	0x00007f7f
    8a74:	00007fd5 	.word	0x00007fd5
    8a78:	00007f9d 	.word	0x00007f9d
    8a7c:	000095e5 	.word	0x000095e5
    8a80:	200016f4 	.word	0x200016f4

00008a84 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    8a84:	b580      	push	{r7, lr}
    8a86:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8a88:	f240 2101 	movw	r1, #513	; 0x201
    8a8c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8a90:	4b09      	ldr	r3, [pc, #36]	; (8ab8 <_usb_d_dev_suspend+0x34>)
    8a92:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8a94:	f240 2101 	movw	r1, #513	; 0x201
    8a98:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8a9c:	4b07      	ldr	r3, [pc, #28]	; (8abc <_usb_d_dev_suspend+0x38>)
    8a9e:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    8aa0:	2170      	movs	r1, #112	; 0x70
    8aa2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8aa6:	4b06      	ldr	r3, [pc, #24]	; (8ac0 <_usb_d_dev_suspend+0x3c>)
    8aa8:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    8aaa:	4b06      	ldr	r3, [pc, #24]	; (8ac4 <_usb_d_dev_suspend+0x40>)
    8aac:	685b      	ldr	r3, [r3, #4]
    8aae:	2100      	movs	r1, #0
    8ab0:	2004      	movs	r0, #4
    8ab2:	4798      	blx	r3
}
    8ab4:	bf00      	nop
    8ab6:	bd80      	pop	{r7, pc}
    8ab8:	00007f7f 	.word	0x00007f7f
    8abc:	00007fd5 	.word	0x00007fd5
    8ac0:	00007f9d 	.word	0x00007f9d
    8ac4:	200016f4 	.word	0x200016f4

00008ac8 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    8ac8:	b580      	push	{r7, lr}
    8aca:	b082      	sub	sp, #8
    8acc:	af00      	add	r7, sp, #0
	bool     rc    = true;
    8ace:	2301      	movs	r3, #1
    8ad0:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    8ad2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8ad6:	4b22      	ldr	r3, [pc, #136]	; (8b60 <_usb_d_dev_handle_nep+0x98>)
    8ad8:	4798      	blx	r3
    8ada:	4603      	mov	r3, r0
    8adc:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    8ade:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8ae2:	4b20      	ldr	r3, [pc, #128]	; (8b64 <_usb_d_dev_handle_nep+0x9c>)
    8ae4:	4798      	blx	r3
    8ae6:	4603      	mov	r3, r0
    8ae8:	461a      	mov	r2, r3
    8aea:	88bb      	ldrh	r3, [r7, #4]
    8aec:	4013      	ands	r3, r2
    8aee:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    8af0:	88bb      	ldrh	r3, [r7, #4]
    8af2:	f003 0304 	and.w	r3, r3, #4
    8af6:	2b00      	cmp	r3, #0
    8af8:	d003      	beq.n	8b02 <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    8afa:	4b1b      	ldr	r3, [pc, #108]	; (8b68 <_usb_d_dev_handle_nep+0xa0>)
    8afc:	4798      	blx	r3
		return true;
    8afe:	2301      	movs	r3, #1
    8b00:	e02a      	b.n	8b58 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    8b02:	88bb      	ldrh	r3, [r7, #4]
    8b04:	f403 7300 	and.w	r3, r3, #512	; 0x200
    8b08:	2b00      	cmp	r3, #0
    8b0a:	d002      	beq.n	8b12 <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    8b0c:	4b17      	ldr	r3, [pc, #92]	; (8b6c <_usb_d_dev_handle_nep+0xa4>)
    8b0e:	4798      	blx	r3
    8b10:	e021      	b.n	8b56 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    8b12:	88bb      	ldrh	r3, [r7, #4]
    8b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
    8b18:	2b00      	cmp	r3, #0
    8b1a:	d002      	beq.n	8b22 <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    8b1c:	4b14      	ldr	r3, [pc, #80]	; (8b70 <_usb_d_dev_handle_nep+0xa8>)
    8b1e:	4798      	blx	r3
    8b20:	e019      	b.n	8b56 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    8b22:	88bb      	ldrh	r3, [r7, #4]
    8b24:	f003 0370 	and.w	r3, r3, #112	; 0x70
    8b28:	2b00      	cmp	r3, #0
    8b2a:	d002      	beq.n	8b32 <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    8b2c:	4b11      	ldr	r3, [pc, #68]	; (8b74 <_usb_d_dev_handle_nep+0xac>)
    8b2e:	4798      	blx	r3
    8b30:	e011      	b.n	8b56 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    8b32:	88bb      	ldrh	r3, [r7, #4]
    8b34:	f003 0308 	and.w	r3, r3, #8
    8b38:	2b00      	cmp	r3, #0
    8b3a:	d002      	beq.n	8b42 <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    8b3c:	4b0e      	ldr	r3, [pc, #56]	; (8b78 <_usb_d_dev_handle_nep+0xb0>)
    8b3e:	4798      	blx	r3
    8b40:	e009      	b.n	8b56 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    8b42:	88bb      	ldrh	r3, [r7, #4]
    8b44:	f003 0301 	and.w	r3, r3, #1
    8b48:	2b00      	cmp	r3, #0
    8b4a:	d002      	beq.n	8b52 <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    8b4c:	4b0b      	ldr	r3, [pc, #44]	; (8b7c <_usb_d_dev_handle_nep+0xb4>)
    8b4e:	4798      	blx	r3
    8b50:	e001      	b.n	8b56 <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    8b52:	2300      	movs	r3, #0
    8b54:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    8b56:	79fb      	ldrb	r3, [r7, #7]
}
    8b58:	4618      	mov	r0, r3
    8b5a:	3708      	adds	r7, #8
    8b5c:	46bd      	mov	sp, r7
    8b5e:	bd80      	pop	{r7, pc}
    8b60:	00007f65 	.word	0x00007f65
    8b64:	00007fbb 	.word	0x00007fbb
    8b68:	00008909 	.word	0x00008909
    8b6c:	00008929 	.word	0x00008929
    8b70:	000089b9 	.word	0x000089b9
    8b74:	000089dd 	.word	0x000089dd
    8b78:	00008a29 	.word	0x00008a29
    8b7c:	00008a85 	.word	0x00008a85

00008b80 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    8b80:	b590      	push	{r4, r7, lr}
    8b82:	b089      	sub	sp, #36	; 0x24
    8b84:	af00      	add	r7, sp, #0
    8b86:	6078      	str	r0, [r7, #4]
    8b88:	460b      	mov	r3, r1
    8b8a:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    8b8c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8b90:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    8b92:	687b      	ldr	r3, [r7, #4]
    8b94:	7c9b      	ldrb	r3, [r3, #18]
    8b96:	f003 030f 	and.w	r3, r3, #15
    8b9a:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    8b9c:	7dfb      	ldrb	r3, [r7, #23]
    8b9e:	015b      	lsls	r3, r3, #5
    8ba0:	4a73      	ldr	r2, [pc, #460]	; (8d70 <_usb_d_dev_in_next+0x1f0>)
    8ba2:	4413      	add	r3, r2
    8ba4:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    8ba6:	78fb      	ldrb	r3, [r7, #3]
    8ba8:	2b00      	cmp	r3, #0
    8baa:	d006      	beq.n	8bba <_usb_d_dev_in_next+0x3a>
    8bac:	693b      	ldr	r3, [r7, #16]
    8bae:	3310      	adds	r3, #16
    8bb0:	685b      	ldr	r3, [r3, #4]
    8bb2:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8bb6:	b29b      	uxth	r3, r3
    8bb8:	e000      	b.n	8bbc <_usb_d_dev_in_next+0x3c>
    8bba:	2300      	movs	r3, #0
    8bbc:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    8bbe:	687b      	ldr	r3, [r7, #4]
    8bc0:	8a1b      	ldrh	r3, [r3, #16]
    8bc2:	f240 32ff 	movw	r2, #1023	; 0x3ff
    8bc6:	4293      	cmp	r3, r2
    8bc8:	d103      	bne.n	8bd2 <_usb_d_dev_in_next+0x52>
    8bca:	687b      	ldr	r3, [r7, #4]
    8bcc:	8a1b      	ldrh	r3, [r3, #16]
    8bce:	b21b      	sxth	r3, r3
    8bd0:	e004      	b.n	8bdc <_usb_d_dev_in_next+0x5c>
    8bd2:	687b      	ldr	r3, [r7, #4]
    8bd4:	8a1b      	ldrh	r3, [r3, #16]
    8bd6:	3b01      	subs	r3, #1
    8bd8:	b29b      	uxth	r3, r3
    8bda:	b21b      	sxth	r3, r3
    8bdc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    8be0:	4013      	ands	r3, r2
    8be2:	b21b      	sxth	r3, r3
    8be4:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    8be6:	2300      	movs	r3, #0
    8be8:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    8bea:	687b      	ldr	r3, [r7, #4]
    8bec:	7cdb      	ldrb	r3, [r3, #19]
    8bee:	f003 0307 	and.w	r3, r3, #7
    8bf2:	b2db      	uxtb	r3, r3
    8bf4:	2b01      	cmp	r3, #1
    8bf6:	bf0c      	ite	eq
    8bf8:	2301      	moveq	r3, #1
    8bfa:	2300      	movne	r3, #0
    8bfc:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    8bfe:	78fb      	ldrb	r3, [r7, #3]
    8c00:	2b00      	cmp	r3, #0
    8c02:	d004      	beq.n	8c0e <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    8c04:	7dfb      	ldrb	r3, [r7, #23]
    8c06:	2101      	movs	r1, #1
    8c08:	4618      	mov	r0, r3
    8c0a:	4b5a      	ldr	r3, [pc, #360]	; (8d74 <_usb_d_dev_in_next+0x1f4>)
    8c0c:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    8c0e:	687b      	ldr	r3, [r7, #4]
    8c10:	689a      	ldr	r2, [r3, #8]
    8c12:	89fb      	ldrh	r3, [r7, #14]
    8c14:	441a      	add	r2, r3
    8c16:	687b      	ldr	r3, [r7, #4]
    8c18:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    8c1a:	687b      	ldr	r3, [r7, #4]
    8c1c:	689a      	ldr	r2, [r3, #8]
    8c1e:	687b      	ldr	r3, [r7, #4]
    8c20:	685b      	ldr	r3, [r3, #4]
    8c22:	429a      	cmp	r2, r3
    8c24:	d243      	bcs.n	8cae <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    8c26:	687b      	ldr	r3, [r7, #4]
    8c28:	685b      	ldr	r3, [r3, #4]
    8c2a:	b29a      	uxth	r2, r3
    8c2c:	687b      	ldr	r3, [r7, #4]
    8c2e:	689b      	ldr	r3, [r3, #8]
    8c30:	b29b      	uxth	r3, r3
    8c32:	1ad3      	subs	r3, r2, r3
    8c34:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    8c36:	687b      	ldr	r3, [r7, #4]
    8c38:	7cdb      	ldrb	r3, [r3, #19]
    8c3a:	f003 0320 	and.w	r3, r3, #32
    8c3e:	b2db      	uxtb	r3, r3
    8c40:	2b00      	cmp	r3, #0
    8c42:	d01b      	beq.n	8c7c <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    8c44:	687b      	ldr	r3, [r7, #4]
    8c46:	8a1b      	ldrh	r3, [r3, #16]
    8c48:	8bfa      	ldrh	r2, [r7, #30]
    8c4a:	429a      	cmp	r2, r3
    8c4c:	d902      	bls.n	8c54 <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    8c4e:	687b      	ldr	r3, [r7, #4]
    8c50:	8a1b      	ldrh	r3, [r3, #16]
    8c52:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    8c54:	687b      	ldr	r3, [r7, #4]
    8c56:	68d8      	ldr	r0, [r3, #12]
    8c58:	687b      	ldr	r3, [r7, #4]
    8c5a:	681a      	ldr	r2, [r3, #0]
    8c5c:	687b      	ldr	r3, [r7, #4]
    8c5e:	689b      	ldr	r3, [r3, #8]
    8c60:	4413      	add	r3, r2
    8c62:	8bfa      	ldrh	r2, [r7, #30]
    8c64:	4619      	mov	r1, r3
    8c66:	4b44      	ldr	r3, [pc, #272]	; (8d78 <_usb_d_dev_in_next+0x1f8>)
    8c68:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    8c6a:	687b      	ldr	r3, [r7, #4]
    8c6c:	68db      	ldr	r3, [r3, #12]
    8c6e:	461a      	mov	r2, r3
    8c70:	7dfb      	ldrb	r3, [r7, #23]
    8c72:	2101      	movs	r1, #1
    8c74:	4618      	mov	r0, r3
    8c76:	4b41      	ldr	r3, [pc, #260]	; (8d7c <_usb_d_dev_in_next+0x1fc>)
    8c78:	4798      	blx	r3
    8c7a:	e011      	b.n	8ca0 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    8c7c:	8bfb      	ldrh	r3, [r7, #30]
    8c7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    8c82:	d902      	bls.n	8c8a <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    8c84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    8c88:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    8c8a:	687b      	ldr	r3, [r7, #4]
    8c8c:	681a      	ldr	r2, [r3, #0]
    8c8e:	687b      	ldr	r3, [r7, #4]
    8c90:	689b      	ldr	r3, [r3, #8]
    8c92:	4413      	add	r3, r2
    8c94:	461a      	mov	r2, r3
    8c96:	7dfb      	ldrb	r3, [r7, #23]
    8c98:	2101      	movs	r1, #1
    8c9a:	4618      	mov	r0, r3
    8c9c:	4b37      	ldr	r3, [pc, #220]	; (8d7c <_usb_d_dev_in_next+0x1fc>)
    8c9e:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    8ca0:	8bfa      	ldrh	r2, [r7, #30]
    8ca2:	7df8      	ldrb	r0, [r7, #23]
    8ca4:	2300      	movs	r3, #0
    8ca6:	2101      	movs	r1, #1
    8ca8:	4c35      	ldr	r4, [pc, #212]	; (8d80 <_usb_d_dev_in_next+0x200>)
    8caa:	47a0      	blx	r4
		goto _in_tx_exec;
    8cac:	e041      	b.n	8d32 <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    8cae:	687b      	ldr	r3, [r7, #4]
    8cb0:	7cdb      	ldrb	r3, [r3, #19]
    8cb2:	f003 0310 	and.w	r3, r3, #16
    8cb6:	b2db      	uxtb	r3, r3
    8cb8:	2b00      	cmp	r3, #0
    8cba:	d00b      	beq.n	8cd4 <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    8cbc:	687a      	ldr	r2, [r7, #4]
    8cbe:	7cd3      	ldrb	r3, [r2, #19]
    8cc0:	f36f 1304 	bfc	r3, #4, #1
    8cc4:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    8cc6:	7df8      	ldrb	r0, [r7, #23]
    8cc8:	2300      	movs	r3, #0
    8cca:	2200      	movs	r2, #0
    8ccc:	2101      	movs	r1, #1
    8cce:	4c2c      	ldr	r4, [pc, #176]	; (8d80 <_usb_d_dev_in_next+0x200>)
    8cd0:	47a0      	blx	r4
		goto _in_tx_exec;
    8cd2:	e02e      	b.n	8d32 <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    8cd4:	7afb      	ldrb	r3, [r7, #11]
    8cd6:	2b00      	cmp	r3, #0
    8cd8:	d006      	beq.n	8ce8 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    8cda:	7dfb      	ldrb	r3, [r7, #23]
    8cdc:	224b      	movs	r2, #75	; 0x4b
    8cde:	4619      	mov	r1, r3
    8ce0:	69b8      	ldr	r0, [r7, #24]
    8ce2:	4b28      	ldr	r3, [pc, #160]	; (8d84 <_usb_d_dev_in_next+0x204>)
    8ce4:	4798      	blx	r3
    8ce6:	e005      	b.n	8cf4 <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    8ce8:	7dfb      	ldrb	r3, [r7, #23]
    8cea:	224a      	movs	r2, #74	; 0x4a
    8cec:	4619      	mov	r1, r3
    8cee:	69b8      	ldr	r0, [r7, #24]
    8cf0:	4b24      	ldr	r3, [pc, #144]	; (8d84 <_usb_d_dev_in_next+0x204>)
    8cf2:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    8cf4:	687b      	ldr	r3, [r7, #4]
    8cf6:	8a1b      	ldrh	r3, [r3, #16]
    8cf8:	89ba      	ldrh	r2, [r7, #12]
    8cfa:	429a      	cmp	r2, r3
    8cfc:	d114      	bne.n	8d28 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    8cfe:	687a      	ldr	r2, [r7, #4]
    8d00:	7cd3      	ldrb	r3, [r2, #19]
    8d02:	f36f 1386 	bfc	r3, #6, #1
    8d06:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    8d08:	4b1f      	ldr	r3, [pc, #124]	; (8d88 <_usb_d_dev_in_next+0x208>)
    8d0a:	68db      	ldr	r3, [r3, #12]
    8d0c:	687a      	ldr	r2, [r7, #4]
    8d0e:	7c90      	ldrb	r0, [r2, #18]
    8d10:	687a      	ldr	r2, [r7, #4]
    8d12:	6892      	ldr	r2, [r2, #8]
    8d14:	4611      	mov	r1, r2
    8d16:	4798      	blx	r3
    8d18:	4603      	mov	r3, r0
    8d1a:	2b00      	cmp	r3, #0
    8d1c:	d124      	bne.n	8d68 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    8d1e:	687a      	ldr	r2, [r7, #4]
    8d20:	7cd3      	ldrb	r3, [r2, #19]
    8d22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8d26:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    8d28:	2100      	movs	r1, #0
    8d2a:	6878      	ldr	r0, [r7, #4]
    8d2c:	4b17      	ldr	r3, [pc, #92]	; (8d8c <_usb_d_dev_in_next+0x20c>)
    8d2e:	4798      	blx	r3
	return;
    8d30:	e01b      	b.n	8d6a <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    8d32:	78fb      	ldrb	r3, [r7, #3]
    8d34:	f083 0301 	eor.w	r3, r3, #1
    8d38:	b2db      	uxtb	r3, r3
    8d3a:	2b00      	cmp	r3, #0
    8d3c:	d00d      	beq.n	8d5a <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    8d3e:	7afb      	ldrb	r3, [r7, #11]
    8d40:	2b00      	cmp	r3, #0
    8d42:	d002      	beq.n	8d4a <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    8d44:	234e      	movs	r3, #78	; 0x4e
    8d46:	777b      	strb	r3, [r7, #29]
    8d48:	e001      	b.n	8d4e <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    8d4a:	234a      	movs	r3, #74	; 0x4a
    8d4c:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    8d4e:	7f7a      	ldrb	r2, [r7, #29]
    8d50:	7dfb      	ldrb	r3, [r7, #23]
    8d52:	4619      	mov	r1, r3
    8d54:	69b8      	ldr	r0, [r7, #24]
    8d56:	4b0e      	ldr	r3, [pc, #56]	; (8d90 <_usb_d_dev_in_next+0x210>)
    8d58:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    8d5a:	7dfb      	ldrb	r3, [r7, #23]
    8d5c:	2201      	movs	r2, #1
    8d5e:	2101      	movs	r1, #1
    8d60:	4618      	mov	r0, r3
    8d62:	4b0c      	ldr	r3, [pc, #48]	; (8d94 <_usb_d_dev_in_next+0x214>)
    8d64:	4798      	blx	r3
    8d66:	e000      	b.n	8d6a <_usb_d_dev_in_next+0x1ea>
			return;
    8d68:	bf00      	nop
}
    8d6a:	3724      	adds	r7, #36	; 0x24
    8d6c:	46bd      	mov	sp, r7
    8d6e:	bd90      	pop	{r4, r7, pc}
    8d70:	200017bc 	.word	0x200017bc
    8d74:	00008579 	.word	0x00008579
    8d78:	00012bc5 	.word	0x00012bc5
    8d7c:	000085a5 	.word	0x000085a5
    8d80:	000086ed 	.word	0x000086ed
    8d84:	00007e85 	.word	0x00007e85
    8d88:	200016f4 	.word	0x200016f4
    8d8c:	00009ea9 	.word	0x00009ea9
    8d90:	00007e59 	.word	0x00007e59
    8d94:	000087a5 	.word	0x000087a5

00008d98 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    8d98:	b590      	push	{r4, r7, lr}
    8d9a:	b08b      	sub	sp, #44	; 0x2c
    8d9c:	af00      	add	r7, sp, #0
    8d9e:	6078      	str	r0, [r7, #4]
    8da0:	460b      	mov	r3, r1
    8da2:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    8da4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8da8:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    8daa:	687b      	ldr	r3, [r7, #4]
    8dac:	7c9b      	ldrb	r3, [r3, #18]
    8dae:	f003 030f 	and.w	r3, r3, #15
    8db2:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    8db4:	7ffb      	ldrb	r3, [r7, #31]
    8db6:	015b      	lsls	r3, r3, #5
    8db8:	4a94      	ldr	r2, [pc, #592]	; (900c <_usb_d_dev_out_next+0x274>)
    8dba:	4413      	add	r3, r2
    8dbc:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    8dbe:	78fb      	ldrb	r3, [r7, #3]
    8dc0:	2b00      	cmp	r3, #0
    8dc2:	d005      	beq.n	8dd0 <_usb_d_dev_out_next+0x38>
    8dc4:	69bb      	ldr	r3, [r7, #24]
    8dc6:	685b      	ldr	r3, [r3, #4]
    8dc8:	f3c3 338d 	ubfx	r3, r3, #14, #14
    8dcc:	b29b      	uxth	r3, r3
    8dce:	e000      	b.n	8dd2 <_usb_d_dev_out_next+0x3a>
    8dd0:	2300      	movs	r3, #0
    8dd2:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    8dd4:	78fb      	ldrb	r3, [r7, #3]
    8dd6:	2b00      	cmp	r3, #0
    8dd8:	d005      	beq.n	8de6 <_usb_d_dev_out_next+0x4e>
    8dda:	69bb      	ldr	r3, [r7, #24]
    8ddc:	685b      	ldr	r3, [r3, #4]
    8dde:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8de2:	b29b      	uxth	r3, r3
    8de4:	e000      	b.n	8de8 <_usb_d_dev_out_next+0x50>
    8de6:	2300      	movs	r3, #0
    8de8:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    8dea:	687b      	ldr	r3, [r7, #4]
    8dec:	8a1b      	ldrh	r3, [r3, #16]
    8dee:	f240 32ff 	movw	r2, #1023	; 0x3ff
    8df2:	4293      	cmp	r3, r2
    8df4:	d004      	beq.n	8e00 <_usb_d_dev_out_next+0x68>
    8df6:	687b      	ldr	r3, [r7, #4]
    8df8:	8a1b      	ldrh	r3, [r3, #16]
    8dfa:	3b01      	subs	r3, #1
    8dfc:	b29b      	uxth	r3, r3
    8dfe:	e001      	b.n	8e04 <_usb_d_dev_out_next+0x6c>
    8e00:	f240 33ff 	movw	r3, #1023	; 0x3ff
    8e04:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    8e06:	8aba      	ldrh	r2, [r7, #20]
    8e08:	8a7b      	ldrh	r3, [r7, #18]
    8e0a:	4013      	ands	r3, r2
    8e0c:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    8e0e:	687b      	ldr	r3, [r7, #4]
    8e10:	7cdb      	ldrb	r3, [r3, #19]
    8e12:	f003 0307 	and.w	r3, r3, #7
    8e16:	b2db      	uxtb	r3, r3
    8e18:	2b01      	cmp	r3, #1
    8e1a:	bf0c      	ite	eq
    8e1c:	2301      	moveq	r3, #1
    8e1e:	2300      	movne	r3, #0
    8e20:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    8e22:	78fb      	ldrb	r3, [r7, #3]
    8e24:	2b00      	cmp	r3, #0
    8e26:	d004      	beq.n	8e32 <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    8e28:	7ffb      	ldrb	r3, [r7, #31]
    8e2a:	2100      	movs	r1, #0
    8e2c:	4618      	mov	r0, r3
    8e2e:	4b78      	ldr	r3, [pc, #480]	; (9010 <_usb_d_dev_out_next+0x278>)
    8e30:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    8e32:	687b      	ldr	r3, [r7, #4]
    8e34:	7cdb      	ldrb	r3, [r3, #19]
    8e36:	f003 0320 	and.w	r3, r3, #32
    8e3a:	b2db      	uxtb	r3, r3
    8e3c:	2b00      	cmp	r3, #0
    8e3e:	d01c      	beq.n	8e7a <_usb_d_dev_out_next+0xe2>
    8e40:	687b      	ldr	r3, [r7, #4]
    8e42:	685b      	ldr	r3, [r3, #4]
    8e44:	2b00      	cmp	r3, #0
    8e46:	d018      	beq.n	8e7a <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    8e48:	687b      	ldr	r3, [r7, #4]
    8e4a:	685b      	ldr	r3, [r3, #4]
    8e4c:	b29a      	uxth	r2, r3
    8e4e:	687b      	ldr	r3, [r7, #4]
    8e50:	689b      	ldr	r3, [r3, #8]
    8e52:	b29b      	uxth	r3, r3
    8e54:	1ad3      	subs	r3, r2, r3
    8e56:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    8e58:	687b      	ldr	r3, [r7, #4]
    8e5a:	681a      	ldr	r2, [r3, #0]
    8e5c:	687b      	ldr	r3, [r7, #4]
    8e5e:	689b      	ldr	r3, [r3, #8]
    8e60:	18d0      	adds	r0, r2, r3
    8e62:	687b      	ldr	r3, [r7, #4]
    8e64:	68d9      	ldr	r1, [r3, #12]
    8e66:	89ba      	ldrh	r2, [r7, #12]
    8e68:	8a3b      	ldrh	r3, [r7, #16]
    8e6a:	429a      	cmp	r2, r3
    8e6c:	d901      	bls.n	8e72 <_usb_d_dev_out_next+0xda>
    8e6e:	8a3b      	ldrh	r3, [r7, #16]
    8e70:	e000      	b.n	8e74 <_usb_d_dev_out_next+0xdc>
    8e72:	89bb      	ldrh	r3, [r7, #12]
    8e74:	461a      	mov	r2, r3
    8e76:	4b67      	ldr	r3, [pc, #412]	; (9014 <_usb_d_dev_out_next+0x27c>)
    8e78:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    8e7a:	687b      	ldr	r3, [r7, #4]
    8e7c:	685b      	ldr	r3, [r3, #4]
    8e7e:	2b00      	cmp	r3, #0
    8e80:	d121      	bne.n	8ec6 <_usb_d_dev_out_next+0x12e>
    8e82:	687b      	ldr	r3, [r7, #4]
    8e84:	7cdb      	ldrb	r3, [r3, #19]
    8e86:	f003 0310 	and.w	r3, r3, #16
    8e8a:	b2db      	uxtb	r3, r3
    8e8c:	2b00      	cmp	r3, #0
    8e8e:	d01a      	beq.n	8ec6 <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    8e90:	687a      	ldr	r2, [r7, #4]
    8e92:	7cd3      	ldrb	r3, [r2, #19]
    8e94:	f36f 1304 	bfc	r3, #4, #1
    8e98:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    8e9a:	687a      	ldr	r2, [r7, #4]
    8e9c:	7cd3      	ldrb	r3, [r2, #19]
    8e9e:	f043 0320 	orr.w	r3, r3, #32
    8ea2:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8ea4:	687b      	ldr	r3, [r7, #4]
    8ea6:	68db      	ldr	r3, [r3, #12]
    8ea8:	461a      	mov	r2, r3
    8eaa:	7ffb      	ldrb	r3, [r7, #31]
    8eac:	2100      	movs	r1, #0
    8eae:	4618      	mov	r0, r3
    8eb0:	4b59      	ldr	r3, [pc, #356]	; (9018 <_usb_d_dev_out_next+0x280>)
    8eb2:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    8eb4:	687b      	ldr	r3, [r7, #4]
    8eb6:	8a1b      	ldrh	r3, [r3, #16]
    8eb8:	461a      	mov	r2, r3
    8eba:	7ff8      	ldrb	r0, [r7, #31]
    8ebc:	2300      	movs	r3, #0
    8ebe:	2100      	movs	r1, #0
    8ec0:	4c56      	ldr	r4, [pc, #344]	; (901c <_usb_d_dev_out_next+0x284>)
    8ec2:	47a0      	blx	r4
		goto _out_rx_exec;
    8ec4:	e090      	b.n	8fe8 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    8ec6:	78fb      	ldrb	r3, [r7, #3]
    8ec8:	2b00      	cmp	r3, #0
    8eca:	d010      	beq.n	8eee <_usb_d_dev_out_next+0x156>
    8ecc:	687b      	ldr	r3, [r7, #4]
    8ece:	8a1b      	ldrh	r3, [r3, #16]
    8ed0:	8a3a      	ldrh	r2, [r7, #16]
    8ed2:	429a      	cmp	r2, r3
    8ed4:	d20b      	bcs.n	8eee <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    8ed6:	687a      	ldr	r2, [r7, #4]
    8ed8:	7cd3      	ldrb	r3, [r2, #19]
    8eda:	f36f 1304 	bfc	r3, #4, #1
    8ede:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    8ee0:	687b      	ldr	r3, [r7, #4]
    8ee2:	689a      	ldr	r2, [r3, #8]
    8ee4:	8abb      	ldrh	r3, [r7, #20]
    8ee6:	441a      	add	r2, r3
    8ee8:	687b      	ldr	r3, [r7, #4]
    8eea:	609a      	str	r2, [r3, #8]
    8eec:	e05c      	b.n	8fa8 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    8eee:	687b      	ldr	r3, [r7, #4]
    8ef0:	689a      	ldr	r2, [r3, #8]
    8ef2:	8afb      	ldrh	r3, [r7, #22]
    8ef4:	441a      	add	r2, r3
    8ef6:	687b      	ldr	r3, [r7, #4]
    8ef8:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    8efa:	687b      	ldr	r3, [r7, #4]
    8efc:	689a      	ldr	r2, [r3, #8]
    8efe:	687b      	ldr	r3, [r7, #4]
    8f00:	685b      	ldr	r3, [r3, #4]
    8f02:	429a      	cmp	r2, r3
    8f04:	d250      	bcs.n	8fa8 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    8f06:	687b      	ldr	r3, [r7, #4]
    8f08:	685b      	ldr	r3, [r3, #4]
    8f0a:	b29a      	uxth	r2, r3
    8f0c:	687b      	ldr	r3, [r7, #4]
    8f0e:	689b      	ldr	r3, [r3, #8]
    8f10:	b29b      	uxth	r3, r3
    8f12:	1ad3      	subs	r3, r2, r3
    8f14:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    8f16:	687b      	ldr	r3, [r7, #4]
    8f18:	7cdb      	ldrb	r3, [r3, #19]
    8f1a:	f003 0320 	and.w	r3, r3, #32
    8f1e:	b2db      	uxtb	r3, r3
    8f20:	2b00      	cmp	r3, #0
    8f22:	d010      	beq.n	8f46 <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    8f24:	687b      	ldr	r3, [r7, #4]
    8f26:	8a1b      	ldrh	r3, [r3, #16]
    8f28:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8f2a:	429a      	cmp	r2, r3
    8f2c:	d902      	bls.n	8f34 <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    8f2e:	687b      	ldr	r3, [r7, #4]
    8f30:	8a1b      	ldrh	r3, [r3, #16]
    8f32:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8f34:	687b      	ldr	r3, [r7, #4]
    8f36:	68db      	ldr	r3, [r3, #12]
    8f38:	461a      	mov	r2, r3
    8f3a:	7ffb      	ldrb	r3, [r7, #31]
    8f3c:	2100      	movs	r1, #0
    8f3e:	4618      	mov	r0, r3
    8f40:	4b35      	ldr	r3, [pc, #212]	; (9018 <_usb_d_dev_out_next+0x280>)
    8f42:	4798      	blx	r3
    8f44:	e029      	b.n	8f9a <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    8f46:	687b      	ldr	r3, [r7, #4]
    8f48:	8a1b      	ldrh	r3, [r3, #16]
    8f4a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8f4c:	429a      	cmp	r2, r3
    8f4e:	d90f      	bls.n	8f70 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    8f50:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    8f52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    8f56:	d903      	bls.n	8f60 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    8f58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    8f5c:	84fb      	strh	r3, [r7, #38]	; 0x26
    8f5e:	e011      	b.n	8f84 <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    8f60:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8f62:	8a7b      	ldrh	r3, [r7, #18]
    8f64:	4013      	ands	r3, r2
    8f66:	b29b      	uxth	r3, r3
    8f68:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8f6a:	1ad3      	subs	r3, r2, r3
    8f6c:	84fb      	strh	r3, [r7, #38]	; 0x26
    8f6e:	e009      	b.n	8f84 <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    8f70:	687b      	ldr	r3, [r7, #4]
    8f72:	8a1b      	ldrh	r3, [r3, #16]
    8f74:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8f76:	429a      	cmp	r2, r3
    8f78:	d204      	bcs.n	8f84 <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    8f7a:	687a      	ldr	r2, [r7, #4]
    8f7c:	7cd3      	ldrb	r3, [r2, #19]
    8f7e:	f043 0320 	orr.w	r3, r3, #32
    8f82:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    8f84:	687b      	ldr	r3, [r7, #4]
    8f86:	681a      	ldr	r2, [r3, #0]
    8f88:	687b      	ldr	r3, [r7, #4]
    8f8a:	689b      	ldr	r3, [r3, #8]
    8f8c:	4413      	add	r3, r2
    8f8e:	461a      	mov	r2, r3
    8f90:	7ffb      	ldrb	r3, [r7, #31]
    8f92:	2100      	movs	r1, #0
    8f94:	4618      	mov	r0, r3
    8f96:	4b20      	ldr	r3, [pc, #128]	; (9018 <_usb_d_dev_out_next+0x280>)
    8f98:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    8f9a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8f9c:	7ff8      	ldrb	r0, [r7, #31]
    8f9e:	2300      	movs	r3, #0
    8fa0:	2100      	movs	r1, #0
    8fa2:	4c1e      	ldr	r4, [pc, #120]	; (901c <_usb_d_dev_out_next+0x284>)
    8fa4:	47a0      	blx	r4
			goto _out_rx_exec;
    8fa6:	e01f      	b.n	8fe8 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    8fa8:	7bfb      	ldrb	r3, [r7, #15]
    8faa:	2b00      	cmp	r3, #0
    8fac:	d006      	beq.n	8fbc <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    8fae:	7ffb      	ldrb	r3, [r7, #31]
    8fb0:	222d      	movs	r2, #45	; 0x2d
    8fb2:	4619      	mov	r1, r3
    8fb4:	6a38      	ldr	r0, [r7, #32]
    8fb6:	4b1a      	ldr	r3, [pc, #104]	; (9020 <_usb_d_dev_out_next+0x288>)
    8fb8:	4798      	blx	r3
    8fba:	e005      	b.n	8fc8 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    8fbc:	7ffb      	ldrb	r3, [r7, #31]
    8fbe:	2225      	movs	r2, #37	; 0x25
    8fc0:	4619      	mov	r1, r3
    8fc2:	6a38      	ldr	r0, [r7, #32]
    8fc4:	4b16      	ldr	r3, [pc, #88]	; (9020 <_usb_d_dev_out_next+0x288>)
    8fc6:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    8fc8:	7ffb      	ldrb	r3, [r7, #31]
    8fca:	2b00      	cmp	r3, #0
    8fcc:	d107      	bne.n	8fde <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8fce:	687b      	ldr	r3, [r7, #4]
    8fd0:	68db      	ldr	r3, [r3, #12]
    8fd2:	461a      	mov	r2, r3
    8fd4:	7ffb      	ldrb	r3, [r7, #31]
    8fd6:	2100      	movs	r1, #0
    8fd8:	4618      	mov	r0, r3
    8fda:	4b0f      	ldr	r3, [pc, #60]	; (9018 <_usb_d_dev_out_next+0x280>)
    8fdc:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    8fde:	2100      	movs	r1, #0
    8fe0:	6878      	ldr	r0, [r7, #4]
    8fe2:	4b10      	ldr	r3, [pc, #64]	; (9024 <_usb_d_dev_out_next+0x28c>)
    8fe4:	4798      	blx	r3
	return;
    8fe6:	e031      	b.n	904c <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    8fe8:	78fb      	ldrb	r3, [r7, #3]
    8fea:	f083 0301 	eor.w	r3, r3, #1
    8fee:	b2db      	uxtb	r3, r3
    8ff0:	2b00      	cmp	r3, #0
    8ff2:	d025      	beq.n	9040 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    8ff4:	7bfb      	ldrb	r3, [r7, #15]
    8ff6:	2b00      	cmp	r3, #0
    8ff8:	d018      	beq.n	902c <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    8ffa:	7ffb      	ldrb	r3, [r7, #31]
    8ffc:	2101      	movs	r1, #1
    8ffe:	4618      	mov	r0, r3
    9000:	4b09      	ldr	r3, [pc, #36]	; (9028 <_usb_d_dev_out_next+0x290>)
    9002:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    9004:	232d      	movs	r3, #45	; 0x2d
    9006:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    900a:	e012      	b.n	9032 <_usb_d_dev_out_next+0x29a>
    900c:	200017bc 	.word	0x200017bc
    9010:	00008579 	.word	0x00008579
    9014:	00012bc5 	.word	0x00012bc5
    9018:	000085a5 	.word	0x000085a5
    901c:	0000872d 	.word	0x0000872d
    9020:	00007e85 	.word	0x00007e85
    9024:	00009ea9 	.word	0x00009ea9
    9028:	0000876d 	.word	0x0000876d
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    902c:	2325      	movs	r3, #37	; 0x25
    902e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    9032:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    9036:	7ffb      	ldrb	r3, [r7, #31]
    9038:	4619      	mov	r1, r3
    903a:	6a38      	ldr	r0, [r7, #32]
    903c:	4b05      	ldr	r3, [pc, #20]	; (9054 <_usb_d_dev_out_next+0x2bc>)
    903e:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    9040:	7ffb      	ldrb	r3, [r7, #31]
    9042:	2201      	movs	r2, #1
    9044:	2100      	movs	r1, #0
    9046:	4618      	mov	r0, r3
    9048:	4b03      	ldr	r3, [pc, #12]	; (9058 <_usb_d_dev_out_next+0x2c0>)
    904a:	4798      	blx	r3
}
    904c:	372c      	adds	r7, #44	; 0x2c
    904e:	46bd      	mov	sp, r7
    9050:	bd90      	pop	{r4, r7, pc}
    9052:	bf00      	nop
    9054:	00007e59 	.word	0x00007e59
    9058:	000087fd 	.word	0x000087fd

0000905c <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    905c:	b580      	push	{r7, lr}
    905e:	b084      	sub	sp, #16
    9060:	af00      	add	r7, sp, #0
    9062:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    9064:	687b      	ldr	r3, [r7, #4]
    9066:	7c9b      	ldrb	r3, [r3, #18]
    9068:	f003 030f 	and.w	r3, r3, #15
    906c:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    906e:	687b      	ldr	r3, [r7, #4]
    9070:	7cdb      	ldrb	r3, [r3, #19]
    9072:	f003 0307 	and.w	r3, r3, #7
    9076:	b2db      	uxtb	r3, r3
    9078:	2b01      	cmp	r3, #1
    907a:	bf0c      	ite	eq
    907c:	2301      	moveq	r3, #1
    907e:	2300      	movne	r3, #0
    9080:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    9082:	7bbb      	ldrb	r3, [r7, #14]
    9084:	f083 0301 	eor.w	r3, r3, #1
    9088:	b2db      	uxtb	r3, r3
    908a:	2b00      	cmp	r3, #0
    908c:	d008      	beq.n	90a0 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    908e:	7bfb      	ldrb	r3, [r7, #15]
    9090:	4618      	mov	r0, r3
    9092:	4b20      	ldr	r3, [pc, #128]	; (9114 <_usb_d_dev_handle_setup+0xb8>)
    9094:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    9096:	7bfb      	ldrb	r3, [r7, #15]
    9098:	4618      	mov	r0, r3
    909a:	4b1f      	ldr	r3, [pc, #124]	; (9118 <_usb_d_dev_handle_setup+0xbc>)
    909c:	4798      	blx	r3
		return;
    909e:	e036      	b.n	910e <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    90a0:	687b      	ldr	r3, [r7, #4]
    90a2:	7cdb      	ldrb	r3, [r3, #19]
    90a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    90a8:	b2db      	uxtb	r3, r3
    90aa:	2b00      	cmp	r3, #0
    90ac:	d010      	beq.n	90d0 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    90ae:	687a      	ldr	r2, [r7, #4]
    90b0:	7cd3      	ldrb	r3, [r2, #19]
    90b2:	f36f 1386 	bfc	r3, #6, #1
    90b6:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    90b8:	7bfb      	ldrb	r3, [r7, #15]
    90ba:	2200      	movs	r2, #0
    90bc:	2101      	movs	r1, #1
    90be:	4618      	mov	r0, r3
    90c0:	4b16      	ldr	r3, [pc, #88]	; (911c <_usb_d_dev_handle_setup+0xc0>)
    90c2:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    90c4:	7bfb      	ldrb	r3, [r7, #15]
    90c6:	2200      	movs	r2, #0
    90c8:	2100      	movs	r1, #0
    90ca:	4618      	mov	r0, r3
    90cc:	4b14      	ldr	r3, [pc, #80]	; (9120 <_usb_d_dev_handle_setup+0xc4>)
    90ce:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    90d0:	687a      	ldr	r2, [r7, #4]
    90d2:	7cd3      	ldrb	r3, [r2, #19]
    90d4:	f36f 03c3 	bfc	r3, #3, #1
    90d8:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    90da:	7bfb      	ldrb	r3, [r7, #15]
    90dc:	2100      	movs	r1, #0
    90de:	4618      	mov	r0, r3
    90e0:	4b10      	ldr	r3, [pc, #64]	; (9124 <_usb_d_dev_handle_setup+0xc8>)
    90e2:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    90e4:	7bfb      	ldrb	r3, [r7, #15]
    90e6:	2101      	movs	r1, #1
    90e8:	4618      	mov	r0, r3
    90ea:	4b0e      	ldr	r3, [pc, #56]	; (9124 <_usb_d_dev_handle_setup+0xc8>)
    90ec:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    90ee:	7bfb      	ldrb	r3, [r7, #15]
    90f0:	216f      	movs	r1, #111	; 0x6f
    90f2:	4618      	mov	r0, r3
    90f4:	4b0c      	ldr	r3, [pc, #48]	; (9128 <_usb_d_dev_handle_setup+0xcc>)
    90f6:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    90f8:	7bfb      	ldrb	r3, [r7, #15]
    90fa:	216f      	movs	r1, #111	; 0x6f
    90fc:	4618      	mov	r0, r3
    90fe:	4b0b      	ldr	r3, [pc, #44]	; (912c <_usb_d_dev_handle_setup+0xd0>)
    9100:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    9102:	4b0b      	ldr	r3, [pc, #44]	; (9130 <_usb_d_dev_handle_setup+0xd4>)
    9104:	689b      	ldr	r3, [r3, #8]
    9106:	687a      	ldr	r2, [r7, #4]
    9108:	7c92      	ldrb	r2, [r2, #18]
    910a:	4610      	mov	r0, r2
    910c:	4798      	blx	r3
}
    910e:	3710      	adds	r7, #16
    9110:	46bd      	mov	sp, r7
    9112:	bd80      	pop	{r7, pc}
    9114:	00008501 	.word	0x00008501
    9118:	000084ad 	.word	0x000084ad
    911c:	000087a5 	.word	0x000087a5
    9120:	000087fd 	.word	0x000087fd
    9124:	0000876d 	.word	0x0000876d
    9128:	000082ad 	.word	0x000082ad
    912c:	000082fd 	.word	0x000082fd
    9130:	200016f4 	.word	0x200016f4

00009134 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    9134:	b580      	push	{r7, lr}
    9136:	b084      	sub	sp, #16
    9138:	af00      	add	r7, sp, #0
    913a:	6078      	str	r0, [r7, #4]
    913c:	460b      	mov	r3, r1
    913e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9140:	687b      	ldr	r3, [r7, #4]
    9142:	7c9b      	ldrb	r3, [r3, #18]
    9144:	f003 030f 	and.w	r3, r3, #15
    9148:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    914a:	78f9      	ldrb	r1, [r7, #3]
    914c:	7bfb      	ldrb	r3, [r7, #15]
    914e:	2200      	movs	r2, #0
    9150:	4618      	mov	r0, r3
    9152:	4b07      	ldr	r3, [pc, #28]	; (9170 <_usb_d_dev_handle_stall+0x3c>)
    9154:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    9156:	4b07      	ldr	r3, [pc, #28]	; (9174 <_usb_d_dev_handle_stall+0x40>)
    9158:	691b      	ldr	r3, [r3, #16]
    915a:	687a      	ldr	r2, [r7, #4]
    915c:	7c90      	ldrb	r0, [r2, #18]
    915e:	687a      	ldr	r2, [r7, #4]
    9160:	6892      	ldr	r2, [r2, #8]
    9162:	2101      	movs	r1, #1
    9164:	4798      	blx	r3
}
    9166:	bf00      	nop
    9168:	3710      	adds	r7, #16
    916a:	46bd      	mov	sp, r7
    916c:	bd80      	pop	{r7, pc}
    916e:	bf00      	nop
    9170:	00008461 	.word	0x00008461
    9174:	200016f4 	.word	0x200016f4

00009178 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    9178:	b580      	push	{r7, lr}
    917a:	b088      	sub	sp, #32
    917c:	af00      	add	r7, sp, #0
    917e:	6078      	str	r0, [r7, #4]
    9180:	460b      	mov	r3, r1
    9182:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    9184:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9188:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    918a:	687b      	ldr	r3, [r7, #4]
    918c:	7c9b      	ldrb	r3, [r3, #18]
    918e:	f003 030f 	and.w	r3, r3, #15
    9192:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    9194:	4b61      	ldr	r3, [pc, #388]	; (931c <_usb_d_dev_handle_trfail+0x1a4>)
    9196:	881b      	ldrh	r3, [r3, #0]
    9198:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    919a:	7efb      	ldrb	r3, [r7, #27]
    919c:	015b      	lsls	r3, r3, #5
    919e:	4a60      	ldr	r2, [pc, #384]	; (9320 <_usb_d_dev_handle_trfail+0x1a8>)
    91a0:	4413      	add	r3, r2
    91a2:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    91a4:	78fb      	ldrb	r3, [r7, #3]
    91a6:	2b00      	cmp	r3, #0
    91a8:	d006      	beq.n	91b8 <_usb_d_dev_handle_trfail+0x40>
    91aa:	7efb      	ldrb	r3, [r7, #27]
    91ac:	4619      	mov	r1, r3
    91ae:	69f8      	ldr	r0, [r7, #28]
    91b0:	4b5c      	ldr	r3, [pc, #368]	; (9324 <_usb_d_dev_handle_trfail+0x1ac>)
    91b2:	4798      	blx	r3
    91b4:	4603      	mov	r3, r0
    91b6:	e005      	b.n	91c4 <_usb_d_dev_handle_trfail+0x4c>
    91b8:	7efb      	ldrb	r3, [r7, #27]
    91ba:	4619      	mov	r1, r3
    91bc:	69f8      	ldr	r0, [r7, #28]
    91be:	4b5a      	ldr	r3, [pc, #360]	; (9328 <_usb_d_dev_handle_trfail+0x1b0>)
    91c0:	4798      	blx	r3
    91c2:	4603      	mov	r3, r0
    91c4:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    91c6:	687b      	ldr	r3, [r7, #4]
    91c8:	7cdb      	ldrb	r3, [r3, #19]
    91ca:	f003 0307 	and.w	r3, r3, #7
    91ce:	b2db      	uxtb	r3, r3
    91d0:	2b01      	cmp	r3, #1
    91d2:	bf0c      	ite	eq
    91d4:	2301      	moveq	r3, #1
    91d6:	2300      	movne	r3, #0
    91d8:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    91da:	78fb      	ldrb	r3, [r7, #3]
    91dc:	011b      	lsls	r3, r3, #4
    91de:	697a      	ldr	r2, [r7, #20]
    91e0:	4413      	add	r3, r2
    91e2:	7a9b      	ldrb	r3, [r3, #10]
    91e4:	b2db      	uxtb	r3, r3
    91e6:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    91e8:	7cfb      	ldrb	r3, [r7, #19]
    91ea:	2b02      	cmp	r3, #2
    91ec:	d12f      	bne.n	924e <_usb_d_dev_handle_trfail+0xd6>
    91ee:	7b3b      	ldrb	r3, [r7, #12]
    91f0:	f003 0301 	and.w	r3, r3, #1
    91f4:	b2db      	uxtb	r3, r3
    91f6:	2b00      	cmp	r3, #0
    91f8:	d029      	beq.n	924e <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    91fa:	78fb      	ldrb	r3, [r7, #3]
    91fc:	011b      	lsls	r3, r3, #4
    91fe:	697a      	ldr	r2, [r7, #20]
    9200:	441a      	add	r2, r3
    9202:	7a93      	ldrb	r3, [r2, #10]
    9204:	f36f 0300 	bfc	r3, #0, #1
    9208:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    920a:	78fb      	ldrb	r3, [r7, #3]
    920c:	f107 0220 	add.w	r2, r7, #32
    9210:	4413      	add	r3, r2
    9212:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9216:	7efb      	ldrb	r3, [r7, #27]
    9218:	4619      	mov	r1, r3
    921a:	69f8      	ldr	r0, [r7, #28]
    921c:	4b43      	ldr	r3, [pc, #268]	; (932c <_usb_d_dev_handle_trfail+0x1b4>)
    921e:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    9220:	78fb      	ldrb	r3, [r7, #3]
    9222:	f107 0220 	add.w	r2, r7, #32
    9226:	4413      	add	r3, r2
    9228:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    922c:	7efb      	ldrb	r3, [r7, #27]
    922e:	4619      	mov	r1, r3
    9230:	69f8      	ldr	r0, [r7, #28]
    9232:	4b3f      	ldr	r3, [pc, #252]	; (9330 <_usb_d_dev_handle_trfail+0x1b8>)
    9234:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    9236:	78fb      	ldrb	r3, [r7, #3]
    9238:	2b00      	cmp	r3, #0
    923a:	bf14      	ite	ne
    923c:	2301      	movne	r3, #1
    923e:	2300      	moveq	r3, #0
    9240:	b2db      	uxtb	r3, r3
    9242:	2204      	movs	r2, #4
    9244:	4619      	mov	r1, r3
    9246:	6878      	ldr	r0, [r7, #4]
    9248:	4b3a      	ldr	r3, [pc, #232]	; (9334 <_usb_d_dev_handle_trfail+0x1bc>)
    924a:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    924c:	e062      	b.n	9314 <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    924e:	7b3b      	ldrb	r3, [r7, #12]
    9250:	f003 0302 	and.w	r3, r3, #2
    9254:	b2db      	uxtb	r3, r3
    9256:	2b00      	cmp	r3, #0
    9258:	d040      	beq.n	92dc <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    925a:	78fb      	ldrb	r3, [r7, #3]
    925c:	011b      	lsls	r3, r3, #4
    925e:	697a      	ldr	r2, [r7, #20]
    9260:	441a      	add	r2, r3
    9262:	7a93      	ldrb	r3, [r2, #10]
    9264:	f36f 0341 	bfc	r3, #1, #1
    9268:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    926a:	78fb      	ldrb	r3, [r7, #3]
    926c:	f107 0220 	add.w	r2, r7, #32
    9270:	4413      	add	r3, r2
    9272:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9276:	7efb      	ldrb	r3, [r7, #27]
    9278:	4619      	mov	r1, r3
    927a:	69f8      	ldr	r0, [r7, #28]
    927c:	4b2b      	ldr	r3, [pc, #172]	; (932c <_usb_d_dev_handle_trfail+0x1b4>)
    927e:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    9280:	78fb      	ldrb	r3, [r7, #3]
    9282:	f107 0220 	add.w	r2, r7, #32
    9286:	4413      	add	r3, r2
    9288:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    928c:	7efb      	ldrb	r3, [r7, #27]
    928e:	4619      	mov	r1, r3
    9290:	69f8      	ldr	r0, [r7, #28]
    9292:	4b27      	ldr	r3, [pc, #156]	; (9330 <_usb_d_dev_handle_trfail+0x1b8>)
    9294:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    9296:	7cbb      	ldrb	r3, [r7, #18]
    9298:	2b00      	cmp	r3, #0
    929a:	d03b      	beq.n	9314 <_usb_d_dev_handle_trfail+0x19c>
    929c:	687b      	ldr	r3, [r7, #4]
    929e:	7cdb      	ldrb	r3, [r3, #19]
    92a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    92a4:	b2db      	uxtb	r3, r3
    92a6:	2b00      	cmp	r3, #0
    92a8:	d034      	beq.n	9314 <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    92aa:	687b      	ldr	r3, [r7, #4]
    92ac:	7cdb      	ldrb	r3, [r3, #19]
    92ae:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    92b2:	b2db      	uxtb	r3, r3
    92b4:	461a      	mov	r2, r3
    92b6:	78fb      	ldrb	r3, [r7, #3]
    92b8:	4293      	cmp	r3, r2
    92ba:	d02b      	beq.n	9314 <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    92bc:	687b      	ldr	r3, [r7, #4]
    92be:	7cdb      	ldrb	r3, [r3, #19]
    92c0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    92c4:	b2db      	uxtb	r3, r3
    92c6:	2b00      	cmp	r3, #0
    92c8:	bf14      	ite	ne
    92ca:	2301      	movne	r3, #1
    92cc:	2300      	moveq	r3, #0
    92ce:	b2db      	uxtb	r3, r3
    92d0:	2200      	movs	r2, #0
    92d2:	4619      	mov	r1, r3
    92d4:	6878      	ldr	r0, [r7, #4]
    92d6:	4b17      	ldr	r3, [pc, #92]	; (9334 <_usb_d_dev_handle_trfail+0x1bc>)
    92d8:	4798      	blx	r3
}
    92da:	e01b      	b.n	9314 <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    92dc:	78fa      	ldrb	r2, [r7, #3]
    92de:	7efb      	ldrb	r3, [r7, #27]
    92e0:	4611      	mov	r1, r2
    92e2:	4618      	mov	r0, r3
    92e4:	4b14      	ldr	r3, [pc, #80]	; (9338 <_usb_d_dev_handle_trfail+0x1c0>)
    92e6:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    92e8:	78fb      	ldrb	r3, [r7, #3]
    92ea:	f107 0220 	add.w	r2, r7, #32
    92ee:	4413      	add	r3, r2
    92f0:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    92f4:	7efb      	ldrb	r3, [r7, #27]
    92f6:	4619      	mov	r1, r3
    92f8:	69f8      	ldr	r0, [r7, #28]
    92fa:	4b0c      	ldr	r3, [pc, #48]	; (932c <_usb_d_dev_handle_trfail+0x1b4>)
    92fc:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    92fe:	78fb      	ldrb	r3, [r7, #3]
    9300:	f107 0220 	add.w	r2, r7, #32
    9304:	4413      	add	r3, r2
    9306:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    930a:	7efb      	ldrb	r3, [r7, #27]
    930c:	4619      	mov	r1, r3
    930e:	69f8      	ldr	r0, [r7, #28]
    9310:	4b07      	ldr	r3, [pc, #28]	; (9330 <_usb_d_dev_handle_trfail+0x1b8>)
    9312:	4798      	blx	r3
}
    9314:	bf00      	nop
    9316:	3720      	adds	r7, #32
    9318:	46bd      	mov	sp, r7
    931a:	bd80      	pop	{r7, pc}
    931c:	00013254 	.word	0x00013254
    9320:	200017bc 	.word	0x200017bc
    9324:	00007ee1 	.word	0x00007ee1
    9328:	00007eb1 	.word	0x00007eb1
    932c:	00007d85 	.word	0x00007d85
    9330:	00007e85 	.word	0x00007e85
    9334:	00009ef1 	.word	0x00009ef1
    9338:	0000876d 	.word	0x0000876d

0000933c <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    933c:	b580      	push	{r7, lr}
    933e:	b082      	sub	sp, #8
    9340:	af00      	add	r7, sp, #0
    9342:	6078      	str	r0, [r7, #4]
    9344:	460b      	mov	r3, r1
    9346:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9348:	78fb      	ldrb	r3, [r7, #3]
    934a:	f003 0310 	and.w	r3, r3, #16
    934e:	2b00      	cmp	r3, #0
    9350:	d003      	beq.n	935a <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    9352:	6878      	ldr	r0, [r7, #4]
    9354:	4b0c      	ldr	r3, [pc, #48]	; (9388 <_usb_d_dev_trans_setup_isr+0x4c>)
    9356:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    9358:	e012      	b.n	9380 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    935a:	78fb      	ldrb	r3, [r7, #3]
    935c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9360:	2b00      	cmp	r3, #0
    9362:	d004      	beq.n	936e <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    9364:	2101      	movs	r1, #1
    9366:	6878      	ldr	r0, [r7, #4]
    9368:	4b08      	ldr	r3, [pc, #32]	; (938c <_usb_d_dev_trans_setup_isr+0x50>)
    936a:	4798      	blx	r3
}
    936c:	e008      	b.n	9380 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    936e:	78fb      	ldrb	r3, [r7, #3]
    9370:	f003 0320 	and.w	r3, r3, #32
    9374:	2b00      	cmp	r3, #0
    9376:	d003      	beq.n	9380 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    9378:	2100      	movs	r1, #0
    937a:	6878      	ldr	r0, [r7, #4]
    937c:	4b03      	ldr	r3, [pc, #12]	; (938c <_usb_d_dev_trans_setup_isr+0x50>)
    937e:	4798      	blx	r3
}
    9380:	bf00      	nop
    9382:	3708      	adds	r7, #8
    9384:	46bd      	mov	sp, r7
    9386:	bd80      	pop	{r7, pc}
    9388:	0000905d 	.word	0x0000905d
    938c:	00009135 	.word	0x00009135

00009390 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9390:	b580      	push	{r7, lr}
    9392:	b082      	sub	sp, #8
    9394:	af00      	add	r7, sp, #0
    9396:	6078      	str	r0, [r7, #4]
    9398:	460b      	mov	r3, r1
    939a:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    939c:	78fb      	ldrb	r3, [r7, #3]
    939e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    93a2:	2b00      	cmp	r3, #0
    93a4:	d004      	beq.n	93b0 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    93a6:	2101      	movs	r1, #1
    93a8:	6878      	ldr	r0, [r7, #4]
    93aa:	4b1a      	ldr	r3, [pc, #104]	; (9414 <_usb_d_dev_trans_in_isr+0x84>)
    93ac:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    93ae:	e02c      	b.n	940a <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    93b0:	78fb      	ldrb	r3, [r7, #3]
    93b2:	f003 0308 	and.w	r3, r3, #8
    93b6:	2b00      	cmp	r3, #0
    93b8:	d004      	beq.n	93c4 <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    93ba:	2101      	movs	r1, #1
    93bc:	6878      	ldr	r0, [r7, #4]
    93be:	4b16      	ldr	r3, [pc, #88]	; (9418 <_usb_d_dev_trans_in_isr+0x88>)
    93c0:	4798      	blx	r3
}
    93c2:	e022      	b.n	940a <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    93c4:	78fb      	ldrb	r3, [r7, #3]
    93c6:	f003 0302 	and.w	r3, r3, #2
    93ca:	2b00      	cmp	r3, #0
    93cc:	d004      	beq.n	93d8 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    93ce:	2101      	movs	r1, #1
    93d0:	6878      	ldr	r0, [r7, #4]
    93d2:	4b12      	ldr	r3, [pc, #72]	; (941c <_usb_d_dev_trans_in_isr+0x8c>)
    93d4:	4798      	blx	r3
}
    93d6:	e018      	b.n	940a <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    93d8:	687b      	ldr	r3, [r7, #4]
    93da:	7cdb      	ldrb	r3, [r3, #19]
    93dc:	f003 0307 	and.w	r3, r3, #7
    93e0:	b2db      	uxtb	r3, r3
    93e2:	2b01      	cmp	r3, #1
    93e4:	d111      	bne.n	940a <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    93e6:	78fb      	ldrb	r3, [r7, #3]
    93e8:	f003 0304 	and.w	r3, r3, #4
    93ec:	2b00      	cmp	r3, #0
    93ee:	d004      	beq.n	93fa <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    93f0:	2100      	movs	r1, #0
    93f2:	6878      	ldr	r0, [r7, #4]
    93f4:	4b08      	ldr	r3, [pc, #32]	; (9418 <_usb_d_dev_trans_in_isr+0x88>)
    93f6:	4798      	blx	r3
}
    93f8:	e007      	b.n	940a <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    93fa:	78fb      	ldrb	r3, [r7, #3]
    93fc:	f003 0310 	and.w	r3, r3, #16
    9400:	2b00      	cmp	r3, #0
    9402:	d002      	beq.n	940a <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    9404:	6878      	ldr	r0, [r7, #4]
    9406:	4b06      	ldr	r3, [pc, #24]	; (9420 <_usb_d_dev_trans_in_isr+0x90>)
    9408:	4798      	blx	r3
}
    940a:	bf00      	nop
    940c:	3708      	adds	r7, #8
    940e:	46bd      	mov	sp, r7
    9410:	bd80      	pop	{r7, pc}
    9412:	bf00      	nop
    9414:	00009135 	.word	0x00009135
    9418:	00009179 	.word	0x00009179
    941c:	00008b81 	.word	0x00008b81
    9420:	0000905d 	.word	0x0000905d

00009424 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9424:	b580      	push	{r7, lr}
    9426:	b082      	sub	sp, #8
    9428:	af00      	add	r7, sp, #0
    942a:	6078      	str	r0, [r7, #4]
    942c:	460b      	mov	r3, r1
    942e:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    9430:	78fb      	ldrb	r3, [r7, #3]
    9432:	f003 0320 	and.w	r3, r3, #32
    9436:	2b00      	cmp	r3, #0
    9438:	d004      	beq.n	9444 <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    943a:	2100      	movs	r1, #0
    943c:	6878      	ldr	r0, [r7, #4]
    943e:	4b1a      	ldr	r3, [pc, #104]	; (94a8 <_usb_d_dev_trans_out_isr+0x84>)
    9440:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    9442:	e02c      	b.n	949e <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    9444:	78fb      	ldrb	r3, [r7, #3]
    9446:	f003 0304 	and.w	r3, r3, #4
    944a:	2b00      	cmp	r3, #0
    944c:	d004      	beq.n	9458 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    944e:	2100      	movs	r1, #0
    9450:	6878      	ldr	r0, [r7, #4]
    9452:	4b16      	ldr	r3, [pc, #88]	; (94ac <_usb_d_dev_trans_out_isr+0x88>)
    9454:	4798      	blx	r3
}
    9456:	e022      	b.n	949e <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    9458:	78fb      	ldrb	r3, [r7, #3]
    945a:	f003 0301 	and.w	r3, r3, #1
    945e:	2b00      	cmp	r3, #0
    9460:	d004      	beq.n	946c <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    9462:	2101      	movs	r1, #1
    9464:	6878      	ldr	r0, [r7, #4]
    9466:	4b12      	ldr	r3, [pc, #72]	; (94b0 <_usb_d_dev_trans_out_isr+0x8c>)
    9468:	4798      	blx	r3
}
    946a:	e018      	b.n	949e <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    946c:	687b      	ldr	r3, [r7, #4]
    946e:	7cdb      	ldrb	r3, [r3, #19]
    9470:	f003 0307 	and.w	r3, r3, #7
    9474:	b2db      	uxtb	r3, r3
    9476:	2b01      	cmp	r3, #1
    9478:	d111      	bne.n	949e <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    947a:	78fb      	ldrb	r3, [r7, #3]
    947c:	f003 0308 	and.w	r3, r3, #8
    9480:	2b00      	cmp	r3, #0
    9482:	d004      	beq.n	948e <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    9484:	2101      	movs	r1, #1
    9486:	6878      	ldr	r0, [r7, #4]
    9488:	4b08      	ldr	r3, [pc, #32]	; (94ac <_usb_d_dev_trans_out_isr+0x88>)
    948a:	4798      	blx	r3
}
    948c:	e007      	b.n	949e <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    948e:	78fb      	ldrb	r3, [r7, #3]
    9490:	f003 0310 	and.w	r3, r3, #16
    9494:	2b00      	cmp	r3, #0
    9496:	d002      	beq.n	949e <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    9498:	6878      	ldr	r0, [r7, #4]
    949a:	4b06      	ldr	r3, [pc, #24]	; (94b4 <_usb_d_dev_trans_out_isr+0x90>)
    949c:	4798      	blx	r3
}
    949e:	bf00      	nop
    94a0:	3708      	adds	r7, #8
    94a2:	46bd      	mov	sp, r7
    94a4:	bd80      	pop	{r7, pc}
    94a6:	bf00      	nop
    94a8:	00009135 	.word	0x00009135
    94ac:	00009179 	.word	0x00009179
    94b0:	00008d99 	.word	0x00008d99
    94b4:	0000905d 	.word	0x0000905d

000094b8 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    94b8:	b580      	push	{r7, lr}
    94ba:	b084      	sub	sp, #16
    94bc:	af00      	add	r7, sp, #0
    94be:	6078      	str	r0, [r7, #4]
    94c0:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    94c2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    94c6:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    94c8:	683b      	ldr	r3, [r7, #0]
    94ca:	7c9b      	ldrb	r3, [r3, #18]
    94cc:	f003 030f 	and.w	r3, r3, #15
    94d0:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    94d2:	7afb      	ldrb	r3, [r7, #11]
    94d4:	2201      	movs	r2, #1
    94d6:	409a      	lsls	r2, r3
    94d8:	687b      	ldr	r3, [r7, #4]
    94da:	4013      	ands	r3, r2
    94dc:	2b00      	cmp	r3, #0
    94de:	d03d      	beq.n	955c <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    94e0:	7afb      	ldrb	r3, [r7, #11]
    94e2:	68fa      	ldr	r2, [r7, #12]
    94e4:	3308      	adds	r3, #8
    94e6:	015b      	lsls	r3, r3, #5
    94e8:	4413      	add	r3, r2
    94ea:	3307      	adds	r3, #7
    94ec:	781b      	ldrb	r3, [r3, #0]
    94ee:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    94f0:	7afb      	ldrb	r3, [r7, #11]
    94f2:	68fa      	ldr	r2, [r7, #12]
    94f4:	015b      	lsls	r3, r3, #5
    94f6:	4413      	add	r3, r2
    94f8:	f203 1309 	addw	r3, r3, #265	; 0x109
    94fc:	781b      	ldrb	r3, [r3, #0]
    94fe:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    9500:	7aba      	ldrb	r2, [r7, #10]
    9502:	7a7b      	ldrb	r3, [r7, #9]
    9504:	4013      	ands	r3, r2
    9506:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    9508:	7abb      	ldrb	r3, [r7, #10]
    950a:	2b00      	cmp	r3, #0
    950c:	d027      	beq.n	955e <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    950e:	683b      	ldr	r3, [r7, #0]
    9510:	7cdb      	ldrb	r3, [r3, #19]
    9512:	f003 0307 	and.w	r3, r3, #7
    9516:	b2db      	uxtb	r3, r3
    9518:	2b01      	cmp	r3, #1
    951a:	d10c      	bne.n	9536 <_usb_d_dev_handle_eps+0x7e>
    951c:	683b      	ldr	r3, [r7, #0]
    951e:	7cdb      	ldrb	r3, [r3, #19]
    9520:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9524:	b2db      	uxtb	r3, r3
    9526:	2b00      	cmp	r3, #0
    9528:	d105      	bne.n	9536 <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    952a:	7abb      	ldrb	r3, [r7, #10]
    952c:	4619      	mov	r1, r3
    952e:	6838      	ldr	r0, [r7, #0]
    9530:	4b0c      	ldr	r3, [pc, #48]	; (9564 <_usb_d_dev_handle_eps+0xac>)
    9532:	4798      	blx	r3
    9534:	e013      	b.n	955e <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    9536:	683b      	ldr	r3, [r7, #0]
    9538:	7cdb      	ldrb	r3, [r3, #19]
    953a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    953e:	b2db      	uxtb	r3, r3
    9540:	2b00      	cmp	r3, #0
    9542:	d005      	beq.n	9550 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    9544:	7abb      	ldrb	r3, [r7, #10]
    9546:	4619      	mov	r1, r3
    9548:	6838      	ldr	r0, [r7, #0]
    954a:	4b07      	ldr	r3, [pc, #28]	; (9568 <_usb_d_dev_handle_eps+0xb0>)
    954c:	4798      	blx	r3
    954e:	e006      	b.n	955e <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    9550:	7abb      	ldrb	r3, [r7, #10]
    9552:	4619      	mov	r1, r3
    9554:	6838      	ldr	r0, [r7, #0]
    9556:	4b05      	ldr	r3, [pc, #20]	; (956c <_usb_d_dev_handle_eps+0xb4>)
    9558:	4798      	blx	r3
    955a:	e000      	b.n	955e <_usb_d_dev_handle_eps+0xa6>
		return;
    955c:	bf00      	nop
		}
	}
}
    955e:	3710      	adds	r7, #16
    9560:	46bd      	mov	sp, r7
    9562:	bd80      	pop	{r7, pc}
    9564:	0000933d 	.word	0x0000933d
    9568:	00009391 	.word	0x00009391
    956c:	00009425 	.word	0x00009425

00009570 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    9570:	b580      	push	{r7, lr}
    9572:	b084      	sub	sp, #16
    9574:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    9576:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    957a:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    957c:	68bb      	ldr	r3, [r7, #8]
    957e:	8c1b      	ldrh	r3, [r3, #32]
    9580:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    9582:	88fb      	ldrh	r3, [r7, #6]
    9584:	2b00      	cmp	r3, #0
    9586:	d104      	bne.n	9592 <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    9588:	4b13      	ldr	r3, [pc, #76]	; (95d8 <_usb_d_dev_handler+0x68>)
    958a:	4798      	blx	r3
    958c:	4603      	mov	r3, r0
    958e:	2b00      	cmp	r3, #0
    9590:	d11e      	bne.n	95d0 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    9592:	2300      	movs	r3, #0
    9594:	73fb      	strb	r3, [r7, #15]
    9596:	e017      	b.n	95c8 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    9598:	7bfa      	ldrb	r2, [r7, #15]
    959a:	4613      	mov	r3, r2
    959c:	009b      	lsls	r3, r3, #2
    959e:	4413      	add	r3, r2
    95a0:	009b      	lsls	r3, r3, #2
    95a2:	3310      	adds	r3, #16
    95a4:	4a0d      	ldr	r2, [pc, #52]	; (95dc <_usb_d_dev_handler+0x6c>)
    95a6:	4413      	add	r3, r2
    95a8:	3304      	adds	r3, #4
    95aa:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    95ac:	683b      	ldr	r3, [r7, #0]
    95ae:	7c9b      	ldrb	r3, [r3, #18]
    95b0:	2bff      	cmp	r3, #255	; 0xff
    95b2:	d005      	beq.n	95c0 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    95b4:	88fb      	ldrh	r3, [r7, #6]
    95b6:	6839      	ldr	r1, [r7, #0]
    95b8:	4618      	mov	r0, r3
    95ba:	4b09      	ldr	r3, [pc, #36]	; (95e0 <_usb_d_dev_handler+0x70>)
    95bc:	4798      	blx	r3
    95be:	e000      	b.n	95c2 <_usb_d_dev_handler+0x52>
			continue;
    95c0:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    95c2:	7bfb      	ldrb	r3, [r7, #15]
    95c4:	3301      	adds	r3, #1
    95c6:	73fb      	strb	r3, [r7, #15]
    95c8:	7bfb      	ldrb	r3, [r7, #15]
    95ca:	2b08      	cmp	r3, #8
    95cc:	d9e4      	bls.n	9598 <_usb_d_dev_handler+0x28>
    95ce:	e000      	b.n	95d2 <_usb_d_dev_handler+0x62>
			return;
    95d0:	bf00      	nop
	}
}
    95d2:	3710      	adds	r7, #16
    95d4:	46bd      	mov	sp, r7
    95d6:	bd80      	pop	{r7, pc}
    95d8:	00008ac9 	.word	0x00008ac9
    95dc:	200016f4 	.word	0x200016f4
    95e0:	000094b9 	.word	0x000094b9

000095e4 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    95e4:	b580      	push	{r7, lr}
    95e6:	b082      	sub	sp, #8
    95e8:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    95ea:	2300      	movs	r3, #0
    95ec:	71fb      	strb	r3, [r7, #7]
    95ee:	e023      	b.n	9638 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    95f0:	79fa      	ldrb	r2, [r7, #7]
    95f2:	4613      	mov	r3, r2
    95f4:	009b      	lsls	r3, r3, #2
    95f6:	4413      	add	r3, r2
    95f8:	009b      	lsls	r3, r3, #2
    95fa:	3310      	adds	r3, #16
    95fc:	4a14      	ldr	r2, [pc, #80]	; (9650 <_usb_d_dev_reset_epts+0x6c>)
    95fe:	4413      	add	r3, r2
    9600:	3304      	adds	r3, #4
    9602:	2103      	movs	r1, #3
    9604:	4618      	mov	r0, r3
    9606:	4b13      	ldr	r3, [pc, #76]	; (9654 <_usb_d_dev_reset_epts+0x70>)
    9608:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    960a:	79fa      	ldrb	r2, [r7, #7]
    960c:	4910      	ldr	r1, [pc, #64]	; (9650 <_usb_d_dev_reset_epts+0x6c>)
    960e:	4613      	mov	r3, r2
    9610:	009b      	lsls	r3, r3, #2
    9612:	4413      	add	r3, r2
    9614:	009b      	lsls	r3, r3, #2
    9616:	440b      	add	r3, r1
    9618:	3326      	adds	r3, #38	; 0x26
    961a:	22ff      	movs	r2, #255	; 0xff
    961c:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    961e:	79fa      	ldrb	r2, [r7, #7]
    9620:	490b      	ldr	r1, [pc, #44]	; (9650 <_usb_d_dev_reset_epts+0x6c>)
    9622:	4613      	mov	r3, r2
    9624:	009b      	lsls	r3, r3, #2
    9626:	4413      	add	r3, r2
    9628:	009b      	lsls	r3, r3, #2
    962a:	440b      	add	r3, r1
    962c:	3327      	adds	r3, #39	; 0x27
    962e:	2200      	movs	r2, #0
    9630:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    9632:	79fb      	ldrb	r3, [r7, #7]
    9634:	3301      	adds	r3, #1
    9636:	71fb      	strb	r3, [r7, #7]
    9638:	79fb      	ldrb	r3, [r7, #7]
    963a:	2b08      	cmp	r3, #8
    963c:	d9d8      	bls.n	95f0 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    963e:	22a0      	movs	r2, #160	; 0xa0
    9640:	2100      	movs	r1, #0
    9642:	4805      	ldr	r0, [pc, #20]	; (9658 <_usb_d_dev_reset_epts+0x74>)
    9644:	4b05      	ldr	r3, [pc, #20]	; (965c <_usb_d_dev_reset_epts+0x78>)
    9646:	4798      	blx	r3
}
    9648:	bf00      	nop
    964a:	3708      	adds	r7, #8
    964c:	46bd      	mov	sp, r7
    964e:	bd80      	pop	{r7, pc}
    9650:	200016f4 	.word	0x200016f4
    9654:	00009ea9 	.word	0x00009ea9
    9658:	200017bc 	.word	0x200017bc
    965c:	00012cf9 	.word	0x00012cf9

00009660 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    9660:	b580      	push	{r7, lr}
    9662:	b084      	sub	sp, #16
    9664:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    9666:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    966a:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    966c:	2301      	movs	r3, #1
    966e:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    9670:	2304      	movs	r3, #4
    9672:	713b      	strb	r3, [r7, #4]
    9674:	2300      	movs	r3, #0
    9676:	717b      	strb	r3, [r7, #5]
    9678:	2300      	movs	r3, #0
    967a:	71bb      	strb	r3, [r7, #6]
    967c:	2300      	movs	r3, #0
    967e:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    9680:	2101      	movs	r1, #1
    9682:	68f8      	ldr	r0, [r7, #12]
    9684:	4b26      	ldr	r3, [pc, #152]	; (9720 <_usb_d_dev_init+0xc0>)
    9686:	4798      	blx	r3
    9688:	4603      	mov	r3, r0
    968a:	f083 0301 	eor.w	r3, r3, #1
    968e:	b2db      	uxtb	r3, r3
    9690:	2b00      	cmp	r3, #0
    9692:	d011      	beq.n	96b8 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    9694:	2102      	movs	r1, #2
    9696:	68f8      	ldr	r0, [r7, #12]
    9698:	4b22      	ldr	r3, [pc, #136]	; (9724 <_usb_d_dev_init+0xc4>)
    969a:	4798      	blx	r3
    969c:	4603      	mov	r3, r0
    969e:	2b00      	cmp	r3, #0
    96a0:	d006      	beq.n	96b0 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    96a2:	68f8      	ldr	r0, [r7, #12]
    96a4:	4b20      	ldr	r3, [pc, #128]	; (9728 <_usb_d_dev_init+0xc8>)
    96a6:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    96a8:	2102      	movs	r1, #2
    96aa:	68f8      	ldr	r0, [r7, #12]
    96ac:	4b1f      	ldr	r3, [pc, #124]	; (972c <_usb_d_dev_init+0xcc>)
    96ae:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    96b0:	2101      	movs	r1, #1
    96b2:	68f8      	ldr	r0, [r7, #12]
    96b4:	4b1e      	ldr	r3, [pc, #120]	; (9730 <_usb_d_dev_init+0xd0>)
    96b6:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    96b8:	2101      	movs	r1, #1
    96ba:	68f8      	ldr	r0, [r7, #12]
    96bc:	4b1b      	ldr	r3, [pc, #108]	; (972c <_usb_d_dev_init+0xcc>)
    96be:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    96c0:	4b1c      	ldr	r3, [pc, #112]	; (9734 <_usb_d_dev_init+0xd4>)
    96c2:	4a1d      	ldr	r2, [pc, #116]	; (9738 <_usb_d_dev_init+0xd8>)
    96c4:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    96c6:	4b1b      	ldr	r3, [pc, #108]	; (9734 <_usb_d_dev_init+0xd4>)
    96c8:	4a1b      	ldr	r2, [pc, #108]	; (9738 <_usb_d_dev_init+0xd8>)
    96ca:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    96cc:	4b19      	ldr	r3, [pc, #100]	; (9734 <_usb_d_dev_init+0xd4>)
    96ce:	4a1a      	ldr	r2, [pc, #104]	; (9738 <_usb_d_dev_init+0xd8>)
    96d0:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    96d2:	4b18      	ldr	r3, [pc, #96]	; (9734 <_usb_d_dev_init+0xd4>)
    96d4:	4a18      	ldr	r2, [pc, #96]	; (9738 <_usb_d_dev_init+0xd8>)
    96d6:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    96d8:	4b16      	ldr	r3, [pc, #88]	; (9734 <_usb_d_dev_init+0xd4>)
    96da:	4a17      	ldr	r2, [pc, #92]	; (9738 <_usb_d_dev_init+0xd8>)
    96dc:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    96de:	4b17      	ldr	r3, [pc, #92]	; (973c <_usb_d_dev_init+0xdc>)
    96e0:	4798      	blx	r3

	_usb_load_calib();
    96e2:	4b17      	ldr	r3, [pc, #92]	; (9740 <_usb_d_dev_init+0xe0>)
    96e4:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    96e6:	2104      	movs	r1, #4
    96e8:	68f8      	ldr	r0, [r7, #12]
    96ea:	4b11      	ldr	r3, [pc, #68]	; (9730 <_usb_d_dev_init+0xd0>)
    96ec:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    96ee:	4b15      	ldr	r3, [pc, #84]	; (9744 <_usb_d_dev_init+0xe4>)
    96f0:	4619      	mov	r1, r3
    96f2:	68f8      	ldr	r0, [r7, #12]
    96f4:	4b14      	ldr	r3, [pc, #80]	; (9748 <_usb_d_dev_init+0xe8>)
    96f6:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    96f8:	7afb      	ldrb	r3, [r7, #11]
    96fa:	f107 0210 	add.w	r2, r7, #16
    96fe:	4413      	add	r3, r2
    9700:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    9704:	f043 0301 	orr.w	r3, r3, #1
    9708:	b2db      	uxtb	r3, r3
    970a:	b29b      	uxth	r3, r3
    970c:	4619      	mov	r1, r3
    970e:	68f8      	ldr	r0, [r7, #12]
    9710:	4b0e      	ldr	r3, [pc, #56]	; (974c <_usb_d_dev_init+0xec>)
    9712:	4798      	blx	r3

	return ERR_NONE;
    9714:	2300      	movs	r3, #0
}
    9716:	4618      	mov	r0, r3
    9718:	3710      	adds	r7, #16
    971a:	46bd      	mov	sp, r7
    971c:	bd80      	pop	{r7, pc}
    971e:	bf00      	nop
    9720:	00007cf9 	.word	0x00007cf9
    9724:	00008049 	.word	0x00008049
    9728:	0000801d 	.word	0x0000801d
    972c:	00007ccf 	.word	0x00007ccf
    9730:	00008079 	.word	0x00008079
    9734:	200016f4 	.word	0x200016f4
    9738:	00008141 	.word	0x00008141
    973c:	000095e5 	.word	0x000095e5
    9740:	00008159 	.word	0x00008159
    9744:	200017bc 	.word	0x200017bc
    9748:	00008125 	.word	0x00008125
    974c:	000080e9 	.word	0x000080e9

00009750 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    9750:	b580      	push	{r7, lr}
    9752:	b082      	sub	sp, #8
    9754:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    9756:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    975a:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    975c:	2103      	movs	r1, #3
    975e:	6878      	ldr	r0, [r7, #4]
    9760:	4b17      	ldr	r3, [pc, #92]	; (97c0 <_usb_d_dev_enable+0x70>)
    9762:	4798      	blx	r3
    9764:	4603      	mov	r3, r0
    9766:	2b00      	cmp	r3, #0
    9768:	d002      	beq.n	9770 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    976a:	f06f 0310 	mvn.w	r3, #16
    976e:	e023      	b.n	97b8 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    9770:	6878      	ldr	r0, [r7, #4]
    9772:	4b14      	ldr	r3, [pc, #80]	; (97c4 <_usb_d_dev_enable+0x74>)
    9774:	4798      	blx	r3
    9776:	4603      	mov	r3, r0
    9778:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    977a:	78fb      	ldrb	r3, [r7, #3]
    977c:	f003 0302 	and.w	r3, r3, #2
    9780:	2b00      	cmp	r3, #0
    9782:	d107      	bne.n	9794 <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    9784:	78fb      	ldrb	r3, [r7, #3]
    9786:	f043 0302 	orr.w	r3, r3, #2
    978a:	b2db      	uxtb	r3, r3
    978c:	4619      	mov	r1, r3
    978e:	6878      	ldr	r0, [r7, #4]
    9790:	4b0d      	ldr	r3, [pc, #52]	; (97c8 <_usb_d_dev_enable+0x78>)
    9792:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    9794:	2050      	movs	r0, #80	; 0x50
    9796:	4b0d      	ldr	r3, [pc, #52]	; (97cc <_usb_d_dev_enable+0x7c>)
    9798:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    979a:	2051      	movs	r0, #81	; 0x51
    979c:	4b0b      	ldr	r3, [pc, #44]	; (97cc <_usb_d_dev_enable+0x7c>)
    979e:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    97a0:	2052      	movs	r0, #82	; 0x52
    97a2:	4b0a      	ldr	r3, [pc, #40]	; (97cc <_usb_d_dev_enable+0x7c>)
    97a4:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    97a6:	2053      	movs	r0, #83	; 0x53
    97a8:	4b08      	ldr	r3, [pc, #32]	; (97cc <_usb_d_dev_enable+0x7c>)
    97aa:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    97ac:	f240 218d 	movw	r1, #653	; 0x28d
    97b0:	6878      	ldr	r0, [r7, #4]
    97b2:	4b07      	ldr	r3, [pc, #28]	; (97d0 <_usb_d_dev_enable+0x80>)
    97b4:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    97b6:	2300      	movs	r3, #0
}
    97b8:	4618      	mov	r0, r3
    97ba:	3708      	adds	r7, #8
    97bc:	46bd      	mov	sp, r7
    97be:	bd80      	pop	{r7, pc}
    97c0:	00007ff3 	.word	0x00007ff3
    97c4:	000080a1 	.word	0x000080a1
    97c8:	00008079 	.word	0x00008079
    97cc:	00007c05 	.word	0x00007c05
    97d0:	00007f9d 	.word	0x00007f9d

000097d4 <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    97d4:	b580      	push	{r7, lr}
    97d6:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    97d8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    97dc:	4b01      	ldr	r3, [pc, #4]	; (97e4 <_usb_d_dev_attach+0x10>)
    97de:	4798      	blx	r3
}
    97e0:	bf00      	nop
    97e2:	bd80      	pop	{r7, pc}
    97e4:	000080c5 	.word	0x000080c5

000097e8 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    97e8:	b580      	push	{r7, lr}
    97ea:	b082      	sub	sp, #8
    97ec:	af00      	add	r7, sp, #0
    97ee:	4603      	mov	r3, r0
    97f0:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    97f2:	79fb      	ldrb	r3, [r7, #7]
    97f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    97f8:	b2db      	uxtb	r3, r3
    97fa:	4619      	mov	r1, r3
    97fc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9800:	4b02      	ldr	r3, [pc, #8]	; (980c <_usb_d_dev_set_address+0x24>)
    9802:	4798      	blx	r3
}
    9804:	bf00      	nop
    9806:	3708      	adds	r7, #8
    9808:	46bd      	mov	sp, r7
    980a:	bd80      	pop	{r7, pc}
    980c:	00008107 	.word	0x00008107

00009810 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    9810:	b590      	push	{r4, r7, lr}
    9812:	b085      	sub	sp, #20
    9814:	af00      	add	r7, sp, #0
    9816:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    9818:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    981c:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    981e:	687b      	ldr	r3, [r7, #4]
    9820:	7c9b      	ldrb	r3, [r3, #18]
    9822:	f003 030f 	and.w	r3, r3, #15
    9826:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9828:	687b      	ldr	r3, [r7, #4]
    982a:	68db      	ldr	r3, [r3, #12]
    982c:	461a      	mov	r2, r3
    982e:	7afb      	ldrb	r3, [r7, #11]
    9830:	2100      	movs	r1, #0
    9832:	4618      	mov	r0, r3
    9834:	4b0f      	ldr	r3, [pc, #60]	; (9874 <_usb_d_dev_trans_setup+0x64>)
    9836:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    9838:	687b      	ldr	r3, [r7, #4]
    983a:	8a1b      	ldrh	r3, [r3, #16]
    983c:	461a      	mov	r2, r3
    983e:	7af8      	ldrb	r0, [r7, #11]
    9840:	2300      	movs	r3, #0
    9842:	2100      	movs	r1, #0
    9844:	4c0c      	ldr	r4, [pc, #48]	; (9878 <_usb_d_dev_trans_setup+0x68>)
    9846:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    9848:	7afb      	ldrb	r3, [r7, #11]
    984a:	22b0      	movs	r2, #176	; 0xb0
    984c:	4619      	mov	r1, r3
    984e:	68f8      	ldr	r0, [r7, #12]
    9850:	4b0a      	ldr	r3, [pc, #40]	; (987c <_usb_d_dev_trans_setup+0x6c>)
    9852:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    9854:	7afb      	ldrb	r3, [r7, #11]
    9856:	2200      	movs	r2, #0
    9858:	2100      	movs	r1, #0
    985a:	4618      	mov	r0, r3
    985c:	4b08      	ldr	r3, [pc, #32]	; (9880 <_usb_d_dev_trans_setup+0x70>)
    985e:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    9860:	7afb      	ldrb	r3, [r7, #11]
    9862:	2210      	movs	r2, #16
    9864:	4619      	mov	r1, r3
    9866:	68f8      	ldr	r0, [r7, #12]
    9868:	4b06      	ldr	r3, [pc, #24]	; (9884 <_usb_d_dev_trans_setup+0x74>)
    986a:	4798      	blx	r3
}
    986c:	bf00      	nop
    986e:	3714      	adds	r7, #20
    9870:	46bd      	mov	sp, r7
    9872:	bd90      	pop	{r4, r7, pc}
    9874:	000085a5 	.word	0x000085a5
    9878:	0000872d 	.word	0x0000872d
    987c:	00007e05 	.word	0x00007e05
    9880:	000087fd 	.word	0x000087fd
    9884:	00007e59 	.word	0x00007e59

00009888 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    9888:	b580      	push	{r7, lr}
    988a:	b088      	sub	sp, #32
    988c:	af00      	add	r7, sp, #0
    988e:	4603      	mov	r3, r0
    9890:	71fb      	strb	r3, [r7, #7]
    9892:	460b      	mov	r3, r1
    9894:	71bb      	strb	r3, [r7, #6]
    9896:	4613      	mov	r3, r2
    9898:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    989a:	79fb      	ldrb	r3, [r7, #7]
    989c:	f003 030f 	and.w	r3, r3, #15
    98a0:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    98a2:	79fb      	ldrb	r3, [r7, #7]
    98a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    98a8:	2b00      	cmp	r3, #0
    98aa:	bf14      	ite	ne
    98ac:	2301      	movne	r3, #1
    98ae:	2300      	moveq	r3, #0
    98b0:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    98b2:	7fba      	ldrb	r2, [r7, #30]
    98b4:	7ffb      	ldrb	r3, [r7, #31]
    98b6:	4611      	mov	r1, r2
    98b8:	4618      	mov	r0, r3
    98ba:	4b3e      	ldr	r3, [pc, #248]	; (99b4 <_usb_d_dev_ep_init+0x12c>)
    98bc:	4798      	blx	r3
    98be:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    98c0:	79bb      	ldrb	r3, [r7, #6]
    98c2:	f003 0303 	and.w	r3, r3, #3
    98c6:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    98c8:	7ffa      	ldrb	r2, [r7, #31]
    98ca:	4613      	mov	r3, r2
    98cc:	005b      	lsls	r3, r3, #1
    98ce:	4413      	add	r3, r2
    98d0:	009b      	lsls	r3, r3, #2
    98d2:	4a39      	ldr	r2, [pc, #228]	; (99b8 <_usb_d_dev_ep_init+0x130>)
    98d4:	4413      	add	r3, r2
    98d6:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    98d8:	7ffb      	ldrb	r3, [r7, #31]
    98da:	2b04      	cmp	r3, #4
    98dc:	d902      	bls.n	98e4 <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    98de:	f06f 0311 	mvn.w	r3, #17
    98e2:	e063      	b.n	99ac <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    98e4:	69bb      	ldr	r3, [r7, #24]
    98e6:	7c9b      	ldrb	r3, [r3, #18]
    98e8:	2bff      	cmp	r3, #255	; 0xff
    98ea:	d002      	beq.n	98f2 <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    98ec:	f06f 0313 	mvn.w	r3, #19
    98f0:	e05c      	b.n	99ac <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    98f2:	7dfb      	ldrb	r3, [r7, #23]
    98f4:	2b00      	cmp	r3, #0
    98f6:	d11f      	bne.n	9938 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    98f8:	7fbb      	ldrb	r3, [r7, #30]
    98fa:	2b00      	cmp	r3, #0
    98fc:	bf14      	ite	ne
    98fe:	2301      	movne	r3, #1
    9900:	2300      	moveq	r3, #0
    9902:	b2db      	uxtb	r3, r3
    9904:	f083 0301 	eor.w	r3, r3, #1
    9908:	b2db      	uxtb	r3, r3
    990a:	f003 0301 	and.w	r3, r3, #1
    990e:	b2da      	uxtb	r2, r3
    9910:	7ffb      	ldrb	r3, [r7, #31]
    9912:	4611      	mov	r1, r2
    9914:	4618      	mov	r0, r3
    9916:	4b27      	ldr	r3, [pc, #156]	; (99b4 <_usb_d_dev_ep_init+0x12c>)
    9918:	4798      	blx	r3
    991a:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    991c:	68fb      	ldr	r3, [r7, #12]
    991e:	7c9b      	ldrb	r3, [r3, #18]
    9920:	2bff      	cmp	r3, #255	; 0xff
    9922:	d002      	beq.n	992a <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    9924:	f06f 0313 	mvn.w	r3, #19
    9928:	e040      	b.n	99ac <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    992a:	693b      	ldr	r3, [r7, #16]
    992c:	681b      	ldr	r3, [r3, #0]
    992e:	2b00      	cmp	r3, #0
    9930:	d102      	bne.n	9938 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    9932:	f06f 0312 	mvn.w	r3, #18
    9936:	e039      	b.n	99ac <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    9938:	7fbb      	ldrb	r3, [r7, #30]
    993a:	2b00      	cmp	r3, #0
    993c:	d007      	beq.n	994e <_usb_d_dev_ep_init+0xc6>
    993e:	693b      	ldr	r3, [r7, #16]
    9940:	685b      	ldr	r3, [r3, #4]
    9942:	2b00      	cmp	r3, #0
    9944:	bf14      	ite	ne
    9946:	2301      	movne	r3, #1
    9948:	2300      	moveq	r3, #0
    994a:	b2db      	uxtb	r3, r3
    994c:	e006      	b.n	995c <_usb_d_dev_ep_init+0xd4>
    994e:	693b      	ldr	r3, [r7, #16]
    9950:	681b      	ldr	r3, [r3, #0]
    9952:	2b00      	cmp	r3, #0
    9954:	bf14      	ite	ne
    9956:	2301      	movne	r3, #1
    9958:	2300      	moveq	r3, #0
    995a:	b2db      	uxtb	r3, r3
    995c:	2b00      	cmp	r3, #0
    995e:	d00f      	beq.n	9980 <_usb_d_dev_ep_init+0xf8>
    9960:	7fbb      	ldrb	r3, [r7, #30]
    9962:	2b00      	cmp	r3, #0
    9964:	d003      	beq.n	996e <_usb_d_dev_ep_init+0xe6>
    9966:	693b      	ldr	r3, [r7, #16]
    9968:	895b      	ldrh	r3, [r3, #10]
    996a:	461a      	mov	r2, r3
    996c:	e002      	b.n	9974 <_usb_d_dev_ep_init+0xec>
    996e:	693b      	ldr	r3, [r7, #16]
    9970:	891b      	ldrh	r3, [r3, #8]
    9972:	461a      	mov	r2, r3
    9974:	88bb      	ldrh	r3, [r7, #4]
    9976:	429a      	cmp	r2, r3
    9978:	da02      	bge.n	9980 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    997a:	f06f 0312 	mvn.w	r3, #18
    997e:	e015      	b.n	99ac <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    9980:	7fbb      	ldrb	r3, [r7, #30]
    9982:	2b00      	cmp	r3, #0
    9984:	d002      	beq.n	998c <_usb_d_dev_ep_init+0x104>
    9986:	693b      	ldr	r3, [r7, #16]
    9988:	685b      	ldr	r3, [r3, #4]
    998a:	e001      	b.n	9990 <_usb_d_dev_ep_init+0x108>
    998c:	693b      	ldr	r3, [r7, #16]
    998e:	681b      	ldr	r3, [r3, #0]
    9990:	69ba      	ldr	r2, [r7, #24]
    9992:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    9994:	69bb      	ldr	r3, [r7, #24]
    9996:	88ba      	ldrh	r2, [r7, #4]
    9998:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    999a:	7dfb      	ldrb	r3, [r7, #23]
    999c:	3301      	adds	r3, #1
    999e:	b2da      	uxtb	r2, r3
    99a0:	69bb      	ldr	r3, [r7, #24]
    99a2:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    99a4:	69bb      	ldr	r3, [r7, #24]
    99a6:	79fa      	ldrb	r2, [r7, #7]
    99a8:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    99aa:	2300      	movs	r3, #0
}
    99ac:	4618      	mov	r0, r3
    99ae:	3720      	adds	r7, #32
    99b0:	46bd      	mov	sp, r7
    99b2:	bd80      	pop	{r7, pc}
    99b4:	000088b9 	.word	0x000088b9
    99b8:	00013218 	.word	0x00013218

000099bc <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    99bc:	b580      	push	{r7, lr}
    99be:	b086      	sub	sp, #24
    99c0:	af00      	add	r7, sp, #0
    99c2:	4603      	mov	r3, r0
    99c4:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    99c6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    99ca:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    99cc:	79fb      	ldrb	r3, [r7, #7]
    99ce:	f003 030f 	and.w	r3, r3, #15
    99d2:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    99d4:	79fb      	ldrb	r3, [r7, #7]
    99d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    99da:	2b00      	cmp	r3, #0
    99dc:	bf14      	ite	ne
    99de:	2301      	movne	r3, #1
    99e0:	2300      	moveq	r3, #0
    99e2:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    99e4:	7cba      	ldrb	r2, [r7, #18]
    99e6:	7cfb      	ldrb	r3, [r7, #19]
    99e8:	4611      	mov	r1, r2
    99ea:	4618      	mov	r0, r3
    99ec:	4b2a      	ldr	r3, [pc, #168]	; (9a98 <_usb_d_dev_ep_deinit+0xdc>)
    99ee:	4798      	blx	r3
    99f0:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    99f2:	7cfb      	ldrb	r3, [r7, #19]
    99f4:	2b04      	cmp	r3, #4
    99f6:	d84a      	bhi.n	9a8e <_usb_d_dev_ep_deinit+0xd2>
    99f8:	68fb      	ldr	r3, [r7, #12]
    99fa:	7c9b      	ldrb	r3, [r3, #18]
    99fc:	2bff      	cmp	r3, #255	; 0xff
    99fe:	d046      	beq.n	9a8e <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    9a00:	7cbb      	ldrb	r3, [r7, #18]
    9a02:	2203      	movs	r2, #3
    9a04:	4619      	mov	r1, r3
    9a06:	68f8      	ldr	r0, [r7, #12]
    9a08:	4b24      	ldr	r3, [pc, #144]	; (9a9c <_usb_d_dev_ep_deinit+0xe0>)
    9a0a:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    9a0c:	68fb      	ldr	r3, [r7, #12]
    9a0e:	7cdb      	ldrb	r3, [r3, #19]
    9a10:	f003 0307 	and.w	r3, r3, #7
    9a14:	b2db      	uxtb	r3, r3
    9a16:	2b01      	cmp	r3, #1
    9a18:	d107      	bne.n	9a2a <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    9a1a:	79fb      	ldrb	r3, [r7, #7]
    9a1c:	697a      	ldr	r2, [r7, #20]
    9a1e:	3308      	adds	r3, #8
    9a20:	015b      	lsls	r3, r3, #5
    9a22:	4413      	add	r3, r2
    9a24:	2200      	movs	r2, #0
    9a26:	701a      	strb	r2, [r3, #0]
    9a28:	e02a      	b.n	9a80 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    9a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
    9a2e:	2b00      	cmp	r3, #0
    9a30:	da15      	bge.n	9a5e <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    9a32:	79fb      	ldrb	r3, [r7, #7]
    9a34:	f003 030f 	and.w	r3, r3, #15
    9a38:	79fa      	ldrb	r2, [r7, #7]
    9a3a:	f002 020f 	and.w	r2, r2, #15
    9a3e:	6979      	ldr	r1, [r7, #20]
    9a40:	3208      	adds	r2, #8
    9a42:	0152      	lsls	r2, r2, #5
    9a44:	440a      	add	r2, r1
    9a46:	7812      	ldrb	r2, [r2, #0]
    9a48:	b2d2      	uxtb	r2, r2
    9a4a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    9a4e:	b2d1      	uxtb	r1, r2
    9a50:	697a      	ldr	r2, [r7, #20]
    9a52:	3308      	adds	r3, #8
    9a54:	015b      	lsls	r3, r3, #5
    9a56:	4413      	add	r3, r2
    9a58:	460a      	mov	r2, r1
    9a5a:	701a      	strb	r2, [r3, #0]
    9a5c:	e010      	b.n	9a80 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    9a5e:	79fb      	ldrb	r3, [r7, #7]
    9a60:	79fa      	ldrb	r2, [r7, #7]
    9a62:	6979      	ldr	r1, [r7, #20]
    9a64:	3208      	adds	r2, #8
    9a66:	0152      	lsls	r2, r2, #5
    9a68:	440a      	add	r2, r1
    9a6a:	7812      	ldrb	r2, [r2, #0]
    9a6c:	b2d2      	uxtb	r2, r2
    9a6e:	f022 0207 	bic.w	r2, r2, #7
    9a72:	b2d1      	uxtb	r1, r2
    9a74:	697a      	ldr	r2, [r7, #20]
    9a76:	3308      	adds	r3, #8
    9a78:	015b      	lsls	r3, r3, #5
    9a7a:	4413      	add	r3, r2
    9a7c:	460a      	mov	r2, r1
    9a7e:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    9a80:	68fb      	ldr	r3, [r7, #12]
    9a82:	2200      	movs	r2, #0
    9a84:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    9a86:	68fb      	ldr	r3, [r7, #12]
    9a88:	22ff      	movs	r2, #255	; 0xff
    9a8a:	749a      	strb	r2, [r3, #18]
    9a8c:	e000      	b.n	9a90 <_usb_d_dev_ep_deinit+0xd4>
		return;
    9a8e:	bf00      	nop
}
    9a90:	3718      	adds	r7, #24
    9a92:	46bd      	mov	sp, r7
    9a94:	bd80      	pop	{r7, pc}
    9a96:	bf00      	nop
    9a98:	000088b9 	.word	0x000088b9
    9a9c:	00009ef1 	.word	0x00009ef1

00009aa0 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    9aa0:	b5b0      	push	{r4, r5, r7, lr}
    9aa2:	b088      	sub	sp, #32
    9aa4:	af00      	add	r7, sp, #0
    9aa6:	4603      	mov	r3, r0
    9aa8:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    9aaa:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9aae:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    9ab0:	79fb      	ldrb	r3, [r7, #7]
    9ab2:	f003 030f 	and.w	r3, r3, #15
    9ab6:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    9ab8:	79fb      	ldrb	r3, [r7, #7]
    9aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9abe:	2b00      	cmp	r3, #0
    9ac0:	bf14      	ite	ne
    9ac2:	2301      	movne	r3, #1
    9ac4:	2300      	moveq	r3, #0
    9ac6:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    9ac8:	7eba      	ldrb	r2, [r7, #26]
    9aca:	7efb      	ldrb	r3, [r7, #27]
    9acc:	4611      	mov	r1, r2
    9ace:	4618      	mov	r0, r3
    9ad0:	4b70      	ldr	r3, [pc, #448]	; (9c94 <_usb_d_dev_ep_enable+0x1f4>)
    9ad2:	4798      	blx	r3
    9ad4:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    9ad6:	7efb      	ldrb	r3, [r7, #27]
    9ad8:	4619      	mov	r1, r3
    9ada:	69f8      	ldr	r0, [r7, #28]
    9adc:	4b6e      	ldr	r3, [pc, #440]	; (9c98 <_usb_d_dev_ep_enable+0x1f8>)
    9ade:	4798      	blx	r3
    9ae0:	4603      	mov	r3, r0
    9ae2:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    9ae4:	7efb      	ldrb	r3, [r7, #27]
    9ae6:	2b04      	cmp	r3, #4
    9ae8:	d803      	bhi.n	9af2 <_usb_d_dev_ep_enable+0x52>
    9aea:	697b      	ldr	r3, [r7, #20]
    9aec:	7c9b      	ldrb	r3, [r3, #18]
    9aee:	2bff      	cmp	r3, #255	; 0xff
    9af0:	d102      	bne.n	9af8 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    9af2:	f06f 0311 	mvn.w	r3, #17
    9af6:	e0c8      	b.n	9c8a <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    9af8:	7efb      	ldrb	r3, [r7, #27]
    9afa:	015b      	lsls	r3, r3, #5
    9afc:	4a67      	ldr	r2, [pc, #412]	; (9c9c <_usb_d_dev_ep_enable+0x1fc>)
    9afe:	4413      	add	r3, r2
    9b00:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    9b02:	697b      	ldr	r3, [r7, #20]
    9b04:	7cdb      	ldrb	r3, [r3, #19]
    9b06:	f003 0307 	and.w	r3, r3, #7
    9b0a:	b2db      	uxtb	r3, r3
    9b0c:	2b01      	cmp	r3, #1
    9b0e:	d14b      	bne.n	9ba8 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    9b10:	7cfb      	ldrb	r3, [r7, #19]
    9b12:	f003 0377 	and.w	r3, r3, #119	; 0x77
    9b16:	2b00      	cmp	r3, #0
    9b18:	d002      	beq.n	9b20 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    9b1a:	f06f 0313 	mvn.w	r3, #19
    9b1e:	e0b4      	b.n	9c8a <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    9b20:	7efb      	ldrb	r3, [r7, #27]
    9b22:	2211      	movs	r2, #17
    9b24:	4619      	mov	r1, r3
    9b26:	69f8      	ldr	r0, [r7, #28]
    9b28:	4b5d      	ldr	r3, [pc, #372]	; (9ca0 <_usb_d_dev_ep_enable+0x200>)
    9b2a:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9b2c:	697b      	ldr	r3, [r7, #20]
    9b2e:	8a1b      	ldrh	r3, [r3, #16]
    9b30:	039b      	lsls	r3, r3, #14
    9b32:	4c5c      	ldr	r4, [pc, #368]	; (9ca4 <_usb_d_dev_ep_enable+0x204>)
    9b34:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9b36:	697b      	ldr	r3, [r7, #20]
    9b38:	8a1b      	ldrh	r3, [r3, #16]
    9b3a:	4618      	mov	r0, r3
    9b3c:	4b5a      	ldr	r3, [pc, #360]	; (9ca8 <_usb_d_dev_ep_enable+0x208>)
    9b3e:	4798      	blx	r3
    9b40:	4603      	mov	r3, r0
    9b42:	071b      	lsls	r3, r3, #28
    9b44:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    9b48:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9b4c:	68fb      	ldr	r3, [r7, #12]
    9b4e:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    9b50:	68fb      	ldr	r3, [r7, #12]
    9b52:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9b56:	697b      	ldr	r3, [r7, #20]
    9b58:	8a1b      	ldrh	r3, [r3, #16]
    9b5a:	f3c3 050d 	ubfx	r5, r3, #0, #14
    9b5e:	697b      	ldr	r3, [r7, #20]
    9b60:	8a1b      	ldrh	r3, [r3, #16]
    9b62:	4618      	mov	r0, r3
    9b64:	4b50      	ldr	r3, [pc, #320]	; (9ca8 <_usb_d_dev_ep_enable+0x208>)
    9b66:	4798      	blx	r3
    9b68:	4603      	mov	r3, r0
    9b6a:	071b      	lsls	r3, r3, #28
    9b6c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    9b70:	432b      	orrs	r3, r5
    9b72:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    9b74:	7efb      	ldrb	r3, [r7, #27]
    9b76:	2200      	movs	r2, #0
    9b78:	2100      	movs	r1, #0
    9b7a:	4618      	mov	r0, r3
    9b7c:	4b4b      	ldr	r3, [pc, #300]	; (9cac <_usb_d_dev_ep_enable+0x20c>)
    9b7e:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    9b80:	7efb      	ldrb	r3, [r7, #27]
    9b82:	2200      	movs	r2, #0
    9b84:	2101      	movs	r1, #1
    9b86:	4618      	mov	r0, r3
    9b88:	4b49      	ldr	r3, [pc, #292]	; (9cb0 <_usb_d_dev_ep_enable+0x210>)
    9b8a:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    9b8c:	7efb      	ldrb	r3, [r7, #27]
    9b8e:	2100      	movs	r1, #0
    9b90:	4618      	mov	r0, r3
    9b92:	4b48      	ldr	r3, [pc, #288]	; (9cb4 <_usb_d_dev_ep_enable+0x214>)
    9b94:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    9b96:	7efb      	ldrb	r3, [r7, #27]
    9b98:	2101      	movs	r1, #1
    9b9a:	4618      	mov	r0, r3
    9b9c:	4b45      	ldr	r3, [pc, #276]	; (9cb4 <_usb_d_dev_ep_enable+0x214>)
    9b9e:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    9ba0:	6978      	ldr	r0, [r7, #20]
    9ba2:	4b45      	ldr	r3, [pc, #276]	; (9cb8 <_usb_d_dev_ep_enable+0x218>)
    9ba4:	4798      	blx	r3
    9ba6:	e06f      	b.n	9c88 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    9ba8:	7ebb      	ldrb	r3, [r7, #26]
    9baa:	2b00      	cmp	r3, #0
    9bac:	d038      	beq.n	9c20 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    9bae:	7cfb      	ldrb	r3, [r7, #19]
    9bb0:	f003 0370 	and.w	r3, r3, #112	; 0x70
    9bb4:	2b00      	cmp	r3, #0
    9bb6:	d002      	beq.n	9bbe <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    9bb8:	f06f 0313 	mvn.w	r3, #19
    9bbc:	e065      	b.n	9c8a <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    9bbe:	697b      	ldr	r3, [r7, #20]
    9bc0:	7cdb      	ldrb	r3, [r3, #19]
    9bc2:	f3c3 0302 	ubfx	r3, r3, #0, #3
    9bc6:	b2db      	uxtb	r3, r3
    9bc8:	011b      	lsls	r3, r3, #4
    9bca:	b2db      	uxtb	r3, r3
    9bcc:	f003 0370 	and.w	r3, r3, #112	; 0x70
    9bd0:	b2da      	uxtb	r2, r3
    9bd2:	7cfb      	ldrb	r3, [r7, #19]
    9bd4:	4313      	orrs	r3, r2
    9bd6:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    9bd8:	7cfa      	ldrb	r2, [r7, #19]
    9bda:	7efb      	ldrb	r3, [r7, #27]
    9bdc:	4619      	mov	r1, r3
    9bde:	69f8      	ldr	r0, [r7, #28]
    9be0:	4b2f      	ldr	r3, [pc, #188]	; (9ca0 <_usb_d_dev_ep_enable+0x200>)
    9be2:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    9be4:	68fb      	ldr	r3, [r7, #12]
    9be6:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9bea:	697b      	ldr	r3, [r7, #20]
    9bec:	8a1b      	ldrh	r3, [r3, #16]
    9bee:	f3c3 050d 	ubfx	r5, r3, #0, #14
    9bf2:	697b      	ldr	r3, [r7, #20]
    9bf4:	8a1b      	ldrh	r3, [r3, #16]
    9bf6:	4618      	mov	r0, r3
    9bf8:	4b2b      	ldr	r3, [pc, #172]	; (9ca8 <_usb_d_dev_ep_enable+0x208>)
    9bfa:	4798      	blx	r3
    9bfc:	4603      	mov	r3, r0
    9bfe:	071b      	lsls	r3, r3, #28
    9c00:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    9c04:	432b      	orrs	r3, r5
    9c06:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    9c08:	7efb      	ldrb	r3, [r7, #27]
    9c0a:	2200      	movs	r2, #0
    9c0c:	2101      	movs	r1, #1
    9c0e:	4618      	mov	r0, r3
    9c10:	4b27      	ldr	r3, [pc, #156]	; (9cb0 <_usb_d_dev_ep_enable+0x210>)
    9c12:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    9c14:	7efb      	ldrb	r3, [r7, #27]
    9c16:	2101      	movs	r1, #1
    9c18:	4618      	mov	r0, r3
    9c1a:	4b26      	ldr	r3, [pc, #152]	; (9cb4 <_usb_d_dev_ep_enable+0x214>)
    9c1c:	4798      	blx	r3
    9c1e:	e033      	b.n	9c88 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    9c20:	7cfb      	ldrb	r3, [r7, #19]
    9c22:	f003 0307 	and.w	r3, r3, #7
    9c26:	2b00      	cmp	r3, #0
    9c28:	d002      	beq.n	9c30 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    9c2a:	f06f 0313 	mvn.w	r3, #19
    9c2e:	e02c      	b.n	9c8a <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    9c30:	697b      	ldr	r3, [r7, #20]
    9c32:	7cdb      	ldrb	r3, [r3, #19]
    9c34:	f3c3 0302 	ubfx	r3, r3, #0, #3
    9c38:	b2db      	uxtb	r3, r3
    9c3a:	461a      	mov	r2, r3
    9c3c:	7cfb      	ldrb	r3, [r7, #19]
    9c3e:	4313      	orrs	r3, r2
    9c40:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    9c42:	7cfa      	ldrb	r2, [r7, #19]
    9c44:	7efb      	ldrb	r3, [r7, #27]
    9c46:	4619      	mov	r1, r3
    9c48:	69f8      	ldr	r0, [r7, #28]
    9c4a:	4b15      	ldr	r3, [pc, #84]	; (9ca0 <_usb_d_dev_ep_enable+0x200>)
    9c4c:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9c4e:	697b      	ldr	r3, [r7, #20]
    9c50:	8a1b      	ldrh	r3, [r3, #16]
    9c52:	039b      	lsls	r3, r3, #14
    9c54:	4c13      	ldr	r4, [pc, #76]	; (9ca4 <_usb_d_dev_ep_enable+0x204>)
    9c56:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9c58:	697b      	ldr	r3, [r7, #20]
    9c5a:	8a1b      	ldrh	r3, [r3, #16]
    9c5c:	4618      	mov	r0, r3
    9c5e:	4b12      	ldr	r3, [pc, #72]	; (9ca8 <_usb_d_dev_ep_enable+0x208>)
    9c60:	4798      	blx	r3
    9c62:	4603      	mov	r3, r0
    9c64:	071b      	lsls	r3, r3, #28
    9c66:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    9c6a:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9c6e:	68fb      	ldr	r3, [r7, #12]
    9c70:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    9c72:	7efb      	ldrb	r3, [r7, #27]
    9c74:	2200      	movs	r2, #0
    9c76:	2100      	movs	r1, #0
    9c78:	4618      	mov	r0, r3
    9c7a:	4b0c      	ldr	r3, [pc, #48]	; (9cac <_usb_d_dev_ep_enable+0x20c>)
    9c7c:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    9c7e:	7efb      	ldrb	r3, [r7, #27]
    9c80:	2100      	movs	r1, #0
    9c82:	4618      	mov	r0, r3
    9c84:	4b0b      	ldr	r3, [pc, #44]	; (9cb4 <_usb_d_dev_ep_enable+0x214>)
    9c86:	4798      	blx	r3
	}

	return USB_OK;
    9c88:	2300      	movs	r3, #0
}
    9c8a:	4618      	mov	r0, r3
    9c8c:	3720      	adds	r7, #32
    9c8e:	46bd      	mov	sp, r7
    9c90:	bdb0      	pop	{r4, r5, r7, pc}
    9c92:	bf00      	nop
    9c94:	000088b9 	.word	0x000088b9
    9c98:	00007f3f 	.word	0x00007f3f
    9c9c:	200017bc 	.word	0x200017bc
    9ca0:	00007f15 	.word	0x00007f15
    9ca4:	0fffc000 	.word	0x0fffc000
    9ca8:	00008855 	.word	0x00008855
    9cac:	000087fd 	.word	0x000087fd
    9cb0:	000087a5 	.word	0x000087a5
    9cb4:	0000876d 	.word	0x0000876d
    9cb8:	00009811 	.word	0x00009811

00009cbc <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    9cbc:	b580      	push	{r7, lr}
    9cbe:	b084      	sub	sp, #16
    9cc0:	af00      	add	r7, sp, #0
    9cc2:	6078      	str	r0, [r7, #4]
    9cc4:	460b      	mov	r3, r1
    9cc6:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9cc8:	687b      	ldr	r3, [r7, #4]
    9cca:	7c9b      	ldrb	r3, [r3, #18]
    9ccc:	f003 030f 	and.w	r3, r3, #15
    9cd0:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    9cd2:	78fa      	ldrb	r2, [r7, #3]
    9cd4:	7bfb      	ldrb	r3, [r7, #15]
    9cd6:	4611      	mov	r1, r2
    9cd8:	4618      	mov	r0, r3
    9cda:	4b03      	ldr	r3, [pc, #12]	; (9ce8 <_usb_d_dev_ep_stall_get+0x2c>)
    9cdc:	4798      	blx	r3
    9cde:	4603      	mov	r3, r0
}
    9ce0:	4618      	mov	r0, r3
    9ce2:	3710      	adds	r7, #16
    9ce4:	46bd      	mov	sp, r7
    9ce6:	bd80      	pop	{r7, pc}
    9ce8:	000083ad 	.word	0x000083ad

00009cec <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    9cec:	b580      	push	{r7, lr}
    9cee:	b084      	sub	sp, #16
    9cf0:	af00      	add	r7, sp, #0
    9cf2:	6078      	str	r0, [r7, #4]
    9cf4:	460b      	mov	r3, r1
    9cf6:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9cf8:	687b      	ldr	r3, [r7, #4]
    9cfa:	7c9b      	ldrb	r3, [r3, #18]
    9cfc:	f003 030f 	and.w	r3, r3, #15
    9d00:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    9d02:	78f9      	ldrb	r1, [r7, #3]
    9d04:	7bfb      	ldrb	r3, [r7, #15]
    9d06:	2201      	movs	r2, #1
    9d08:	4618      	mov	r0, r3
    9d0a:	4b0a      	ldr	r3, [pc, #40]	; (9d34 <_usb_d_dev_ep_stall_set+0x48>)
    9d0c:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    9d0e:	78fb      	ldrb	r3, [r7, #3]
    9d10:	2220      	movs	r2, #32
    9d12:	409a      	lsls	r2, r3
    9d14:	7bfb      	ldrb	r3, [r7, #15]
    9d16:	4611      	mov	r1, r2
    9d18:	4618      	mov	r0, r3
    9d1a:	4b07      	ldr	r3, [pc, #28]	; (9d38 <_usb_d_dev_ep_stall_set+0x4c>)
    9d1c:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    9d1e:	687a      	ldr	r2, [r7, #4]
    9d20:	7cd3      	ldrb	r3, [r2, #19]
    9d22:	f043 0308 	orr.w	r3, r3, #8
    9d26:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    9d28:	2300      	movs	r3, #0
}
    9d2a:	4618      	mov	r0, r3
    9d2c:	3710      	adds	r7, #16
    9d2e:	46bd      	mov	sp, r7
    9d30:	bd80      	pop	{r7, pc}
    9d32:	bf00      	nop
    9d34:	00008355 	.word	0x00008355
    9d38:	000082d5 	.word	0x000082d5

00009d3c <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    9d3c:	b580      	push	{r7, lr}
    9d3e:	b084      	sub	sp, #16
    9d40:	af00      	add	r7, sp, #0
    9d42:	6078      	str	r0, [r7, #4]
    9d44:	460b      	mov	r3, r1
    9d46:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    9d48:	687b      	ldr	r3, [r7, #4]
    9d4a:	7c9b      	ldrb	r3, [r3, #18]
    9d4c:	f003 030f 	and.w	r3, r3, #15
    9d50:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    9d52:	78fa      	ldrb	r2, [r7, #3]
    9d54:	7bfb      	ldrb	r3, [r7, #15]
    9d56:	4611      	mov	r1, r2
    9d58:	4618      	mov	r0, r3
    9d5a:	4b28      	ldr	r3, [pc, #160]	; (9dfc <_usb_d_dev_ep_stall_clr+0xc0>)
    9d5c:	4798      	blx	r3
    9d5e:	4603      	mov	r3, r0
    9d60:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    9d62:	7bbb      	ldrb	r3, [r7, #14]
    9d64:	f083 0301 	eor.w	r3, r3, #1
    9d68:	b2db      	uxtb	r3, r3
    9d6a:	2b00      	cmp	r3, #0
    9d6c:	d001      	beq.n	9d72 <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    9d6e:	2300      	movs	r3, #0
    9d70:	e040      	b.n	9df4 <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    9d72:	78f9      	ldrb	r1, [r7, #3]
    9d74:	7bfb      	ldrb	r3, [r7, #15]
    9d76:	2200      	movs	r2, #0
    9d78:	4618      	mov	r0, r3
    9d7a:	4b21      	ldr	r3, [pc, #132]	; (9e00 <_usb_d_dev_ep_stall_clr+0xc4>)
    9d7c:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    9d7e:	78fb      	ldrb	r3, [r7, #3]
    9d80:	2220      	movs	r2, #32
    9d82:	409a      	lsls	r2, r3
    9d84:	7bfb      	ldrb	r3, [r7, #15]
    9d86:	4611      	mov	r1, r2
    9d88:	4618      	mov	r0, r3
    9d8a:	4b1e      	ldr	r3, [pc, #120]	; (9e04 <_usb_d_dev_ep_stall_clr+0xc8>)
    9d8c:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    9d8e:	78fa      	ldrb	r2, [r7, #3]
    9d90:	7bfb      	ldrb	r3, [r7, #15]
    9d92:	4611      	mov	r1, r2
    9d94:	4618      	mov	r0, r3
    9d96:	4b1c      	ldr	r3, [pc, #112]	; (9e08 <_usb_d_dev_ep_stall_clr+0xcc>)
    9d98:	4798      	blx	r3
    9d9a:	4603      	mov	r3, r0
    9d9c:	2b00      	cmp	r3, #0
    9d9e:	d00b      	beq.n	9db8 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    9da0:	78fa      	ldrb	r2, [r7, #3]
    9da2:	7bfb      	ldrb	r3, [r7, #15]
    9da4:	4611      	mov	r1, r2
    9da6:	4618      	mov	r0, r3
    9da8:	4b18      	ldr	r3, [pc, #96]	; (9e0c <_usb_d_dev_ep_stall_clr+0xd0>)
    9daa:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    9dac:	78f9      	ldrb	r1, [r7, #3]
    9dae:	7bfb      	ldrb	r3, [r7, #15]
    9db0:	2200      	movs	r2, #0
    9db2:	4618      	mov	r0, r3
    9db4:	4b16      	ldr	r3, [pc, #88]	; (9e10 <_usb_d_dev_ep_stall_clr+0xd4>)
    9db6:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    9db8:	687b      	ldr	r3, [r7, #4]
    9dba:	7cdb      	ldrb	r3, [r3, #19]
    9dbc:	f003 0307 	and.w	r3, r3, #7
    9dc0:	b2db      	uxtb	r3, r3
    9dc2:	2b01      	cmp	r3, #1
    9dc4:	d110      	bne.n	9de8 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    9dc6:	7bfb      	ldrb	r3, [r7, #15]
    9dc8:	4619      	mov	r1, r3
    9dca:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9dce:	4b11      	ldr	r3, [pc, #68]	; (9e14 <_usb_d_dev_ep_stall_clr+0xd8>)
    9dd0:	4798      	blx	r3
    9dd2:	4603      	mov	r3, r0
    9dd4:	f003 0330 	and.w	r3, r3, #48	; 0x30
    9dd8:	2b00      	cmp	r3, #0
    9dda:	d10a      	bne.n	9df2 <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    9ddc:	687a      	ldr	r2, [r7, #4]
    9dde:	7cd3      	ldrb	r3, [r2, #19]
    9de0:	f36f 03c3 	bfc	r3, #3, #1
    9de4:	74d3      	strb	r3, [r2, #19]
    9de6:	e004      	b.n	9df2 <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    9de8:	687a      	ldr	r2, [r7, #4]
    9dea:	7cd3      	ldrb	r3, [r2, #19]
    9dec:	f36f 03c3 	bfc	r3, #3, #1
    9df0:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    9df2:	2300      	movs	r3, #0
}
    9df4:	4618      	mov	r0, r3
    9df6:	3710      	adds	r7, #16
    9df8:	46bd      	mov	sp, r7
    9dfa:	bd80      	pop	{r7, pc}
    9dfc:	000083ad 	.word	0x000083ad
    9e00:	00008355 	.word	0x00008355
    9e04:	000082fd 	.word	0x000082fd
    9e08:	000083f1 	.word	0x000083f1
    9e0c:	00008435 	.word	0x00008435
    9e10:	00008521 	.word	0x00008521
    9e14:	00007ddd 	.word	0x00007ddd

00009e18 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    9e18:	b580      	push	{r7, lr}
    9e1a:	b086      	sub	sp, #24
    9e1c:	af00      	add	r7, sp, #0
    9e1e:	4603      	mov	r3, r0
    9e20:	460a      	mov	r2, r1
    9e22:	71fb      	strb	r3, [r7, #7]
    9e24:	4613      	mov	r3, r2
    9e26:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    9e28:	79fb      	ldrb	r3, [r7, #7]
    9e2a:	f003 030f 	and.w	r3, r3, #15
    9e2e:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    9e30:	79fb      	ldrb	r3, [r7, #7]
    9e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9e36:	2b00      	cmp	r3, #0
    9e38:	bf14      	ite	ne
    9e3a:	2301      	movne	r3, #1
    9e3c:	2300      	moveq	r3, #0
    9e3e:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    9e40:	7cba      	ldrb	r2, [r7, #18]
    9e42:	7cfb      	ldrb	r3, [r7, #19]
    9e44:	4611      	mov	r1, r2
    9e46:	4618      	mov	r0, r3
    9e48:	4b13      	ldr	r3, [pc, #76]	; (9e98 <_usb_d_dev_ep_stall+0x80>)
    9e4a:	4798      	blx	r3
    9e4c:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    9e4e:	7cfb      	ldrb	r3, [r7, #19]
    9e50:	2b04      	cmp	r3, #4
    9e52:	d902      	bls.n	9e5a <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    9e54:	f06f 0311 	mvn.w	r3, #17
    9e58:	e01a      	b.n	9e90 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    9e5a:	79bb      	ldrb	r3, [r7, #6]
    9e5c:	2b01      	cmp	r3, #1
    9e5e:	d106      	bne.n	9e6e <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    9e60:	7cbb      	ldrb	r3, [r7, #18]
    9e62:	4619      	mov	r1, r3
    9e64:	68f8      	ldr	r0, [r7, #12]
    9e66:	4b0d      	ldr	r3, [pc, #52]	; (9e9c <_usb_d_dev_ep_stall+0x84>)
    9e68:	4798      	blx	r3
    9e6a:	6178      	str	r0, [r7, #20]
    9e6c:	e00f      	b.n	9e8e <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    9e6e:	79bb      	ldrb	r3, [r7, #6]
    9e70:	2b00      	cmp	r3, #0
    9e72:	d106      	bne.n	9e82 <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    9e74:	7cbb      	ldrb	r3, [r7, #18]
    9e76:	4619      	mov	r1, r3
    9e78:	68f8      	ldr	r0, [r7, #12]
    9e7a:	4b09      	ldr	r3, [pc, #36]	; (9ea0 <_usb_d_dev_ep_stall+0x88>)
    9e7c:	4798      	blx	r3
    9e7e:	6178      	str	r0, [r7, #20]
    9e80:	e005      	b.n	9e8e <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    9e82:	7cbb      	ldrb	r3, [r7, #18]
    9e84:	4619      	mov	r1, r3
    9e86:	68f8      	ldr	r0, [r7, #12]
    9e88:	4b06      	ldr	r3, [pc, #24]	; (9ea4 <_usb_d_dev_ep_stall+0x8c>)
    9e8a:	4798      	blx	r3
    9e8c:	6178      	str	r0, [r7, #20]
	}
	return rc;
    9e8e:	697b      	ldr	r3, [r7, #20]
}
    9e90:	4618      	mov	r0, r3
    9e92:	3718      	adds	r7, #24
    9e94:	46bd      	mov	sp, r7
    9e96:	bd80      	pop	{r7, pc}
    9e98:	000088b9 	.word	0x000088b9
    9e9c:	00009ced 	.word	0x00009ced
    9ea0:	00009d3d 	.word	0x00009d3d
    9ea4:	00009cbd 	.word	0x00009cbd

00009ea8 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    9ea8:	b580      	push	{r7, lr}
    9eaa:	b082      	sub	sp, #8
    9eac:	af00      	add	r7, sp, #0
    9eae:	6078      	str	r0, [r7, #4]
    9eb0:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    9eb2:	687b      	ldr	r3, [r7, #4]
    9eb4:	7c9b      	ldrb	r3, [r3, #18]
    9eb6:	2bff      	cmp	r3, #255	; 0xff
    9eb8:	d014      	beq.n	9ee4 <_usb_d_dev_trans_done+0x3c>
    9eba:	687b      	ldr	r3, [r7, #4]
    9ebc:	7cdb      	ldrb	r3, [r3, #19]
    9ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9ec2:	b2db      	uxtb	r3, r3
    9ec4:	2b00      	cmp	r3, #0
    9ec6:	d00d      	beq.n	9ee4 <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    9ec8:	687a      	ldr	r2, [r7, #4]
    9eca:	7cd3      	ldrb	r3, [r2, #19]
    9ecc:	f36f 1386 	bfc	r3, #6, #1
    9ed0:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    9ed2:	4b06      	ldr	r3, [pc, #24]	; (9eec <_usb_d_dev_trans_done+0x44>)
    9ed4:	691b      	ldr	r3, [r3, #16]
    9ed6:	687a      	ldr	r2, [r7, #4]
    9ed8:	7c90      	ldrb	r0, [r2, #18]
    9eda:	687a      	ldr	r2, [r7, #4]
    9edc:	6892      	ldr	r2, [r2, #8]
    9ede:	6839      	ldr	r1, [r7, #0]
    9ee0:	4798      	blx	r3
    9ee2:	e000      	b.n	9ee6 <_usb_d_dev_trans_done+0x3e>
		return;
    9ee4:	bf00      	nop
}
    9ee6:	3708      	adds	r7, #8
    9ee8:	46bd      	mov	sp, r7
    9eea:	bd80      	pop	{r7, pc}
    9eec:	200016f4 	.word	0x200016f4

00009ef0 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    9ef0:	b580      	push	{r7, lr}
    9ef2:	b086      	sub	sp, #24
    9ef4:	af00      	add	r7, sp, #0
    9ef6:	60f8      	str	r0, [r7, #12]
    9ef8:	460b      	mov	r3, r1
    9efa:	607a      	str	r2, [r7, #4]
    9efc:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9efe:	68fb      	ldr	r3, [r7, #12]
    9f00:	7c9b      	ldrb	r3, [r3, #18]
    9f02:	f003 030f 	and.w	r3, r3, #15
    9f06:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    9f08:	4b1f      	ldr	r3, [pc, #124]	; (9f88 <_usb_d_dev_trans_stop+0x98>)
    9f0a:	881b      	ldrh	r3, [r3, #0]
    9f0c:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    9f0e:	68fb      	ldr	r3, [r7, #12]
    9f10:	7c9b      	ldrb	r3, [r3, #18]
    9f12:	2bff      	cmp	r3, #255	; 0xff
    9f14:	d033      	beq.n	9f7e <_usb_d_dev_trans_stop+0x8e>
    9f16:	68fb      	ldr	r3, [r7, #12]
    9f18:	7cdb      	ldrb	r3, [r3, #19]
    9f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9f1e:	b2db      	uxtb	r3, r3
    9f20:	2b00      	cmp	r3, #0
    9f22:	d02c      	beq.n	9f7e <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    9f24:	7afb      	ldrb	r3, [r7, #11]
    9f26:	2b00      	cmp	r3, #0
    9f28:	d006      	beq.n	9f38 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    9f2a:	7dfb      	ldrb	r3, [r7, #23]
    9f2c:	2200      	movs	r2, #0
    9f2e:	2101      	movs	r1, #1
    9f30:	4618      	mov	r0, r3
    9f32:	4b16      	ldr	r3, [pc, #88]	; (9f8c <_usb_d_dev_trans_stop+0x9c>)
    9f34:	4798      	blx	r3
    9f36:	e005      	b.n	9f44 <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    9f38:	7dfb      	ldrb	r3, [r7, #23]
    9f3a:	2200      	movs	r2, #0
    9f3c:	2100      	movs	r1, #0
    9f3e:	4618      	mov	r0, r3
    9f40:	4b13      	ldr	r3, [pc, #76]	; (9f90 <_usb_d_dev_trans_stop+0xa0>)
    9f42:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    9f44:	7afb      	ldrb	r3, [r7, #11]
    9f46:	f107 0218 	add.w	r2, r7, #24
    9f4a:	4413      	add	r3, r2
    9f4c:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    9f50:	461a      	mov	r2, r3
    9f52:	7dfb      	ldrb	r3, [r7, #23]
    9f54:	4611      	mov	r1, r2
    9f56:	4618      	mov	r0, r3
    9f58:	4b0e      	ldr	r3, [pc, #56]	; (9f94 <_usb_d_dev_trans_stop+0xa4>)
    9f5a:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    9f5c:	7afb      	ldrb	r3, [r7, #11]
    9f5e:	f107 0218 	add.w	r2, r7, #24
    9f62:	4413      	add	r3, r2
    9f64:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    9f68:	461a      	mov	r2, r3
    9f6a:	7dfb      	ldrb	r3, [r7, #23]
    9f6c:	4611      	mov	r1, r2
    9f6e:	4618      	mov	r0, r3
    9f70:	4b09      	ldr	r3, [pc, #36]	; (9f98 <_usb_d_dev_trans_stop+0xa8>)
    9f72:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    9f74:	6879      	ldr	r1, [r7, #4]
    9f76:	68f8      	ldr	r0, [r7, #12]
    9f78:	4b08      	ldr	r3, [pc, #32]	; (9f9c <_usb_d_dev_trans_stop+0xac>)
    9f7a:	4798      	blx	r3
    9f7c:	e000      	b.n	9f80 <_usb_d_dev_trans_stop+0x90>
		return;
    9f7e:	bf00      	nop
}
    9f80:	3718      	adds	r7, #24
    9f82:	46bd      	mov	sp, r7
    9f84:	bd80      	pop	{r7, pc}
    9f86:	bf00      	nop
    9f88:	00013258 	.word	0x00013258
    9f8c:	000087a5 	.word	0x000087a5
    9f90:	000087fd 	.word	0x000087fd
    9f94:	000082ad 	.word	0x000082ad
    9f98:	000082fd 	.word	0x000082fd
    9f9c:	00009ea9 	.word	0x00009ea9

00009fa0 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    9fa0:	b580      	push	{r7, lr}
    9fa2:	b086      	sub	sp, #24
    9fa4:	af00      	add	r7, sp, #0
    9fa6:	4603      	mov	r3, r0
    9fa8:	6039      	str	r1, [r7, #0]
    9faa:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    9fac:	79fb      	ldrb	r3, [r7, #7]
    9fae:	f003 030f 	and.w	r3, r3, #15
    9fb2:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    9fb4:	7dfb      	ldrb	r3, [r7, #23]
    9fb6:	015b      	lsls	r3, r3, #5
    9fb8:	4a1e      	ldr	r2, [pc, #120]	; (a034 <_usb_d_dev_ep_read_req+0x94>)
    9fba:	4413      	add	r3, r2
    9fbc:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    9fbe:	693b      	ldr	r3, [r7, #16]
    9fc0:	681b      	ldr	r3, [r3, #0]
    9fc2:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    9fc4:	693b      	ldr	r3, [r7, #16]
    9fc6:	685b      	ldr	r3, [r3, #4]
    9fc8:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9fcc:	b29b      	uxth	r3, r3
    9fce:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    9fd0:	7dfb      	ldrb	r3, [r7, #23]
    9fd2:	2b04      	cmp	r3, #4
    9fd4:	d802      	bhi.n	9fdc <_usb_d_dev_ep_read_req+0x3c>
    9fd6:	683b      	ldr	r3, [r7, #0]
    9fd8:	2b00      	cmp	r3, #0
    9fda:	d102      	bne.n	9fe2 <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    9fdc:	f06f 0311 	mvn.w	r3, #17
    9fe0:	e023      	b.n	a02a <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    9fe2:	7dfb      	ldrb	r3, [r7, #23]
    9fe4:	4618      	mov	r0, r3
    9fe6:	4b14      	ldr	r3, [pc, #80]	; (a038 <_usb_d_dev_ep_read_req+0x98>)
    9fe8:	4798      	blx	r3
    9fea:	4603      	mov	r3, r0
    9fec:	f083 0301 	eor.w	r3, r3, #1
    9ff0:	b2db      	uxtb	r3, r3
    9ff2:	2b00      	cmp	r3, #0
    9ff4:	d002      	beq.n	9ffc <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    9ff6:	f06f 0312 	mvn.w	r3, #18
    9ffa:	e016      	b.n	a02a <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    9ffc:	7dfb      	ldrb	r3, [r7, #23]
    9ffe:	4618      	mov	r0, r3
    a000:	4b0e      	ldr	r3, [pc, #56]	; (a03c <_usb_d_dev_ep_read_req+0x9c>)
    a002:	4798      	blx	r3
    a004:	4603      	mov	r3, r0
    a006:	f083 0301 	eor.w	r3, r3, #1
    a00a:	b2db      	uxtb	r3, r3
    a00c:	2b00      	cmp	r3, #0
    a00e:	d001      	beq.n	a014 <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    a010:	2300      	movs	r3, #0
    a012:	e00a      	b.n	a02a <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    a014:	68fb      	ldr	r3, [r7, #12]
    a016:	2208      	movs	r2, #8
    a018:	4619      	mov	r1, r3
    a01a:	6838      	ldr	r0, [r7, #0]
    a01c:	4b08      	ldr	r3, [pc, #32]	; (a040 <_usb_d_dev_ep_read_req+0xa0>)
    a01e:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    a020:	7dfb      	ldrb	r3, [r7, #23]
    a022:	4618      	mov	r0, r3
    a024:	4b07      	ldr	r3, [pc, #28]	; (a044 <_usb_d_dev_ep_read_req+0xa4>)
    a026:	4798      	blx	r3

	return bytes;
    a028:	897b      	ldrh	r3, [r7, #10]
}
    a02a:	4618      	mov	r0, r3
    a02c:	3718      	adds	r7, #24
    a02e:	46bd      	mov	sp, r7
    a030:	bd80      	pop	{r7, pc}
    a032:	bf00      	nop
    a034:	200017bc 	.word	0x200017bc
    a038:	00008325 	.word	0x00008325
    a03c:	000084d1 	.word	0x000084d1
    a040:	00012bc5 	.word	0x00012bc5
    a044:	00008501 	.word	0x00008501

0000a048 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    a048:	b580      	push	{r7, lr}
    a04a:	b086      	sub	sp, #24
    a04c:	af00      	add	r7, sp, #0
    a04e:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    a050:	687b      	ldr	r3, [r7, #4]
    a052:	7a1b      	ldrb	r3, [r3, #8]
    a054:	f003 030f 	and.w	r3, r3, #15
    a058:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    a05a:	687b      	ldr	r3, [r7, #4]
    a05c:	7a1b      	ldrb	r3, [r3, #8]
    a05e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a062:	2b00      	cmp	r3, #0
    a064:	bf14      	ite	ne
    a066:	2301      	movne	r3, #1
    a068:	2300      	moveq	r3, #0
    a06a:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a06c:	7d7a      	ldrb	r2, [r7, #21]
    a06e:	7dbb      	ldrb	r3, [r7, #22]
    a070:	4611      	mov	r1, r2
    a072:	4618      	mov	r0, r3
    a074:	4b5f      	ldr	r3, [pc, #380]	; (a1f4 <_usb_d_dev_ep_trans+0x1ac>)
    a076:	4798      	blx	r3
    a078:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    a07a:	693b      	ldr	r3, [r7, #16]
    a07c:	8a1b      	ldrh	r3, [r3, #16]
    a07e:	f240 32ff 	movw	r2, #1023	; 0x3ff
    a082:	4293      	cmp	r3, r2
    a084:	d004      	beq.n	a090 <_usb_d_dev_ep_trans+0x48>
    a086:	693b      	ldr	r3, [r7, #16]
    a088:	8a1b      	ldrh	r3, [r3, #16]
    a08a:	3b01      	subs	r3, #1
    a08c:	b29b      	uxth	r3, r3
    a08e:	e001      	b.n	a094 <_usb_d_dev_ep_trans+0x4c>
    a090:	f240 33ff 	movw	r3, #1023	; 0x3ff
    a094:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    a096:	687b      	ldr	r3, [r7, #4]
    a098:	685a      	ldr	r2, [r3, #4]
    a09a:	89fb      	ldrh	r3, [r7, #14]
    a09c:	4013      	ands	r3, r2
    a09e:	2b00      	cmp	r3, #0
    a0a0:	bf14      	ite	ne
    a0a2:	2301      	movne	r3, #1
    a0a4:	2300      	moveq	r3, #0
    a0a6:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    a0a8:	2300      	movs	r3, #0
    a0aa:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    a0ac:	7dbb      	ldrb	r3, [r7, #22]
    a0ae:	2b04      	cmp	r3, #4
    a0b0:	d902      	bls.n	a0b8 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    a0b2:	f06f 0311 	mvn.w	r3, #17
    a0b6:	e098      	b.n	a1ea <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    a0b8:	687b      	ldr	r3, [r7, #4]
    a0ba:	681b      	ldr	r3, [r3, #0]
    a0bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    a0c0:	d31a      	bcc.n	a0f8 <_usb_d_dev_ep_trans+0xb0>
    a0c2:	687b      	ldr	r3, [r7, #4]
    a0c4:	681b      	ldr	r3, [r3, #0]
    a0c6:	461a      	mov	r2, r3
    a0c8:	687b      	ldr	r3, [r7, #4]
    a0ca:	685b      	ldr	r3, [r3, #4]
    a0cc:	4413      	add	r3, r2
    a0ce:	4a4a      	ldr	r2, [pc, #296]	; (a1f8 <_usb_d_dev_ep_trans+0x1b0>)
    a0d0:	4293      	cmp	r3, r2
    a0d2:	d811      	bhi.n	a0f8 <_usb_d_dev_ep_trans+0xb0>
    a0d4:	687b      	ldr	r3, [r7, #4]
    a0d6:	681b      	ldr	r3, [r3, #0]
    a0d8:	f003 0303 	and.w	r3, r3, #3
    a0dc:	2b00      	cmp	r3, #0
    a0de:	d10b      	bne.n	a0f8 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    a0e0:	7d7b      	ldrb	r3, [r7, #21]
    a0e2:	f083 0301 	eor.w	r3, r3, #1
    a0e6:	b2db      	uxtb	r3, r3
    a0e8:	2b00      	cmp	r3, #0
    a0ea:	d00e      	beq.n	a10a <_usb_d_dev_ep_trans+0xc2>
    a0ec:	687b      	ldr	r3, [r7, #4]
    a0ee:	685b      	ldr	r3, [r3, #4]
    a0f0:	693a      	ldr	r2, [r7, #16]
    a0f2:	8a12      	ldrh	r2, [r2, #16]
    a0f4:	4293      	cmp	r3, r2
    a0f6:	d208      	bcs.n	a10a <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    a0f8:	693b      	ldr	r3, [r7, #16]
    a0fa:	68db      	ldr	r3, [r3, #12]
    a0fc:	2b00      	cmp	r3, #0
    a0fe:	d102      	bne.n	a106 <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    a100:	f06f 0312 	mvn.w	r3, #18
    a104:	e071      	b.n	a1ea <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    a106:	2301      	movs	r3, #1
    a108:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    a10a:	7d7b      	ldrb	r3, [r7, #21]
    a10c:	f083 0301 	eor.w	r3, r3, #1
    a110:	b2db      	uxtb	r3, r3
    a112:	2b00      	cmp	r3, #0
    a114:	d009      	beq.n	a12a <_usb_d_dev_ep_trans+0xe2>
    a116:	7b7b      	ldrb	r3, [r7, #13]
    a118:	2b00      	cmp	r3, #0
    a11a:	d006      	beq.n	a12a <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    a11c:	693b      	ldr	r3, [r7, #16]
    a11e:	68db      	ldr	r3, [r3, #12]
    a120:	2b00      	cmp	r3, #0
    a122:	d102      	bne.n	a12a <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    a124:	f06f 0311 	mvn.w	r3, #17
    a128:	e05f      	b.n	a1ea <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    a12a:	693b      	ldr	r3, [r7, #16]
    a12c:	7cdb      	ldrb	r3, [r3, #19]
    a12e:	f003 0308 	and.w	r3, r3, #8
    a132:	b2db      	uxtb	r3, r3
    a134:	2b00      	cmp	r3, #0
    a136:	d001      	beq.n	a13c <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    a138:	2302      	movs	r3, #2
    a13a:	e056      	b.n	a1ea <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    a13c:	f107 0308 	add.w	r3, r7, #8
    a140:	4618      	mov	r0, r3
    a142:	4b2e      	ldr	r3, [pc, #184]	; (a1fc <_usb_d_dev_ep_trans+0x1b4>)
    a144:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    a146:	693b      	ldr	r3, [r7, #16]
    a148:	7cdb      	ldrb	r3, [r3, #19]
    a14a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a14e:	b2db      	uxtb	r3, r3
    a150:	2b00      	cmp	r3, #0
    a152:	d006      	beq.n	a162 <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    a154:	f107 0308 	add.w	r3, r7, #8
    a158:	4618      	mov	r0, r3
    a15a:	4b29      	ldr	r3, [pc, #164]	; (a200 <_usb_d_dev_ep_trans+0x1b8>)
    a15c:	4798      	blx	r3
		return USB_BUSY;
    a15e:	2301      	movs	r3, #1
    a160:	e043      	b.n	a1ea <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    a162:	693a      	ldr	r2, [r7, #16]
    a164:	7cd3      	ldrb	r3, [r2, #19]
    a166:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a16a:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    a16c:	f107 0308 	add.w	r3, r7, #8
    a170:	4618      	mov	r0, r3
    a172:	4b23      	ldr	r3, [pc, #140]	; (a200 <_usb_d_dev_ep_trans+0x1b8>)
    a174:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    a176:	687b      	ldr	r3, [r7, #4]
    a178:	681a      	ldr	r2, [r3, #0]
    a17a:	693b      	ldr	r3, [r7, #16]
    a17c:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    a17e:	687b      	ldr	r3, [r7, #4]
    a180:	685a      	ldr	r2, [r3, #4]
    a182:	693b      	ldr	r3, [r7, #16]
    a184:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    a186:	693b      	ldr	r3, [r7, #16]
    a188:	2200      	movs	r2, #0
    a18a:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    a18c:	693a      	ldr	r2, [r7, #16]
    a18e:	7cd3      	ldrb	r3, [r2, #19]
    a190:	7d79      	ldrb	r1, [r7, #21]
    a192:	f361 13c7 	bfi	r3, r1, #7, #1
    a196:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    a198:	693a      	ldr	r2, [r7, #16]
    a19a:	7cd3      	ldrb	r3, [r2, #19]
    a19c:	7df9      	ldrb	r1, [r7, #23]
    a19e:	f361 1345 	bfi	r3, r1, #5, #1
    a1a2:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    a1a4:	687b      	ldr	r3, [r7, #4]
    a1a6:	7a5b      	ldrb	r3, [r3, #9]
    a1a8:	2b00      	cmp	r3, #0
    a1aa:	d007      	beq.n	a1bc <_usb_d_dev_ep_trans+0x174>
    a1ac:	7b7b      	ldrb	r3, [r7, #13]
    a1ae:	f083 0301 	eor.w	r3, r3, #1
    a1b2:	b2db      	uxtb	r3, r3
    a1b4:	2b00      	cmp	r3, #0
    a1b6:	d001      	beq.n	a1bc <_usb_d_dev_ep_trans+0x174>
    a1b8:	2301      	movs	r3, #1
    a1ba:	e000      	b.n	a1be <_usb_d_dev_ep_trans+0x176>
    a1bc:	2300      	movs	r3, #0
    a1be:	b2db      	uxtb	r3, r3
    a1c0:	f003 0301 	and.w	r3, r3, #1
    a1c4:	b2d9      	uxtb	r1, r3
    a1c6:	693a      	ldr	r2, [r7, #16]
    a1c8:	7cd3      	ldrb	r3, [r2, #19]
    a1ca:	f361 1304 	bfi	r3, r1, #4, #1
    a1ce:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    a1d0:	7d7b      	ldrb	r3, [r7, #21]
    a1d2:	2b00      	cmp	r3, #0
    a1d4:	d004      	beq.n	a1e0 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    a1d6:	2100      	movs	r1, #0
    a1d8:	6938      	ldr	r0, [r7, #16]
    a1da:	4b0a      	ldr	r3, [pc, #40]	; (a204 <_usb_d_dev_ep_trans+0x1bc>)
    a1dc:	4798      	blx	r3
    a1de:	e003      	b.n	a1e8 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    a1e0:	2100      	movs	r1, #0
    a1e2:	6938      	ldr	r0, [r7, #16]
    a1e4:	4b08      	ldr	r3, [pc, #32]	; (a208 <_usb_d_dev_ep_trans+0x1c0>)
    a1e6:	4798      	blx	r3
	}

	return ERR_NONE;
    a1e8:	2300      	movs	r3, #0
}
    a1ea:	4618      	mov	r0, r3
    a1ec:	3718      	adds	r7, #24
    a1ee:	46bd      	mov	sp, r7
    a1f0:	bd80      	pop	{r7, pc}
    a1f2:	bf00      	nop
    a1f4:	000088b9 	.word	0x000088b9
    a1f8:	20041fff 	.word	0x20041fff
    a1fc:	0000a9c1 	.word	0x0000a9c1
    a200:	0000a9e7 	.word	0x0000a9e7
    a204:	00008b81 	.word	0x00008b81
    a208:	00008d99 	.word	0x00008d99

0000a20c <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    a20c:	b480      	push	{r7}
    a20e:	b085      	sub	sp, #20
    a210:	af00      	add	r7, sp, #0
    a212:	4603      	mov	r3, r0
    a214:	6039      	str	r1, [r7, #0]
    a216:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    a218:	683b      	ldr	r3, [r7, #0]
    a21a:	2b00      	cmp	r3, #0
    a21c:	d001      	beq.n	a222 <_usb_d_dev_register_callback+0x16>
    a21e:	683b      	ldr	r3, [r7, #0]
    a220:	e000      	b.n	a224 <_usb_d_dev_register_callback+0x18>
    a222:	4b0a      	ldr	r3, [pc, #40]	; (a24c <_usb_d_dev_register_callback+0x40>)
    a224:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    a226:	79fb      	ldrb	r3, [r7, #7]
    a228:	2b01      	cmp	r3, #1
    a22a:	d103      	bne.n	a234 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    a22c:	4a08      	ldr	r2, [pc, #32]	; (a250 <_usb_d_dev_register_callback+0x44>)
    a22e:	68fb      	ldr	r3, [r7, #12]
    a230:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    a232:	e005      	b.n	a240 <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    a234:	79fb      	ldrb	r3, [r7, #7]
    a236:	2b00      	cmp	r3, #0
    a238:	d102      	bne.n	a240 <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    a23a:	4a05      	ldr	r2, [pc, #20]	; (a250 <_usb_d_dev_register_callback+0x44>)
    a23c:	68fb      	ldr	r3, [r7, #12]
    a23e:	6013      	str	r3, [r2, #0]
}
    a240:	bf00      	nop
    a242:	3714      	adds	r7, #20
    a244:	46bd      	mov	sp, r7
    a246:	f85d 7b04 	ldr.w	r7, [sp], #4
    a24a:	4770      	bx	lr
    a24c:	00008141 	.word	0x00008141
    a250:	200016f4 	.word	0x200016f4

0000a254 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    a254:	b480      	push	{r7}
    a256:	b085      	sub	sp, #20
    a258:	af00      	add	r7, sp, #0
    a25a:	4603      	mov	r3, r0
    a25c:	6039      	str	r1, [r7, #0]
    a25e:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    a260:	683b      	ldr	r3, [r7, #0]
    a262:	2b00      	cmp	r3, #0
    a264:	d001      	beq.n	a26a <_usb_d_dev_register_ep_callback+0x16>
    a266:	683b      	ldr	r3, [r7, #0]
    a268:	e000      	b.n	a26c <_usb_d_dev_register_ep_callback+0x18>
    a26a:	4b0e      	ldr	r3, [pc, #56]	; (a2a4 <_usb_d_dev_register_ep_callback+0x50>)
    a26c:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    a26e:	79fb      	ldrb	r3, [r7, #7]
    a270:	2b00      	cmp	r3, #0
    a272:	d103      	bne.n	a27c <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    a274:	4a0c      	ldr	r2, [pc, #48]	; (a2a8 <_usb_d_dev_register_ep_callback+0x54>)
    a276:	68fb      	ldr	r3, [r7, #12]
    a278:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    a27a:	e00c      	b.n	a296 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    a27c:	79fb      	ldrb	r3, [r7, #7]
    a27e:	2b01      	cmp	r3, #1
    a280:	d103      	bne.n	a28a <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    a282:	4a09      	ldr	r2, [pc, #36]	; (a2a8 <_usb_d_dev_register_ep_callback+0x54>)
    a284:	68fb      	ldr	r3, [r7, #12]
    a286:	60d3      	str	r3, [r2, #12]
}
    a288:	e005      	b.n	a296 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    a28a:	79fb      	ldrb	r3, [r7, #7]
    a28c:	2b02      	cmp	r3, #2
    a28e:	d102      	bne.n	a296 <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    a290:	4a05      	ldr	r2, [pc, #20]	; (a2a8 <_usb_d_dev_register_ep_callback+0x54>)
    a292:	68fb      	ldr	r3, [r7, #12]
    a294:	6113      	str	r3, [r2, #16]
}
    a296:	bf00      	nop
    a298:	3714      	adds	r7, #20
    a29a:	46bd      	mov	sp, r7
    a29c:	f85d 7b04 	ldr.w	r7, [sp], #4
    a2a0:	4770      	bx	lr
    a2a2:	bf00      	nop
    a2a4:	00008141 	.word	0x00008141
    a2a8:	200016f4 	.word	0x200016f4

0000a2ac <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    a2ac:	b580      	push	{r7, lr}
    a2ae:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a2b0:	4b01      	ldr	r3, [pc, #4]	; (a2b8 <USB_0_Handler+0xc>)
    a2b2:	4798      	blx	r3
}
    a2b4:	bf00      	nop
    a2b6:	bd80      	pop	{r7, pc}
    a2b8:	00009571 	.word	0x00009571

0000a2bc <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    a2bc:	b580      	push	{r7, lr}
    a2be:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a2c0:	4b01      	ldr	r3, [pc, #4]	; (a2c8 <USB_1_Handler+0xc>)
    a2c2:	4798      	blx	r3
}
    a2c4:	bf00      	nop
    a2c6:	bd80      	pop	{r7, pc}
    a2c8:	00009571 	.word	0x00009571

0000a2cc <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    a2cc:	b580      	push	{r7, lr}
    a2ce:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a2d0:	4b01      	ldr	r3, [pc, #4]	; (a2d8 <USB_2_Handler+0xc>)
    a2d2:	4798      	blx	r3
}
    a2d4:	bf00      	nop
    a2d6:	bd80      	pop	{r7, pc}
    a2d8:	00009571 	.word	0x00009571

0000a2dc <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    a2dc:	b580      	push	{r7, lr}
    a2de:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a2e0:	4b01      	ldr	r3, [pc, #4]	; (a2e8 <USB_3_Handler+0xc>)
    a2e2:	4798      	blx	r3
}
    a2e4:	bf00      	nop
    a2e6:	bd80      	pop	{r7, pc}
    a2e8:	00009571 	.word	0x00009571

0000a2ec <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    a2ec:	b480      	push	{r7}
    a2ee:	b083      	sub	sp, #12
    a2f0:	af00      	add	r7, sp, #0
    a2f2:	6078      	str	r0, [r7, #4]
    a2f4:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    a2f6:	bf00      	nop
    a2f8:	687b      	ldr	r3, [r7, #4]
    a2fa:	689a      	ldr	r2, [r3, #8]
    a2fc:	683b      	ldr	r3, [r7, #0]
    a2fe:	4013      	ands	r3, r2
    a300:	2b00      	cmp	r3, #0
    a302:	d1f9      	bne.n	a2f8 <hri_wdt_wait_for_sync+0xc>
	};
}
    a304:	bf00      	nop
    a306:	370c      	adds	r7, #12
    a308:	46bd      	mov	sp, r7
    a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a30e:	4770      	bx	lr

0000a310 <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    a310:	b580      	push	{r7, lr}
    a312:	b084      	sub	sp, #16
    a314:	af00      	add	r7, sp, #0
    a316:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    a318:	210e      	movs	r1, #14
    a31a:	6878      	ldr	r0, [r7, #4]
    a31c:	4b0a      	ldr	r3, [pc, #40]	; (a348 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    a31e:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    a320:	687b      	ldr	r3, [r7, #4]
    a322:	781b      	ldrb	r3, [r3, #0]
    a324:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    a326:	7bfb      	ldrb	r3, [r7, #15]
    a328:	085b      	lsrs	r3, r3, #1
    a32a:	b2db      	uxtb	r3, r3
    a32c:	f003 0301 	and.w	r3, r3, #1
    a330:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    a332:	7bfb      	ldrb	r3, [r7, #15]
    a334:	2b00      	cmp	r3, #0
    a336:	bf14      	ite	ne
    a338:	2301      	movne	r3, #1
    a33a:	2300      	moveq	r3, #0
    a33c:	b2db      	uxtb	r3, r3
}
    a33e:	4618      	mov	r0, r3
    a340:	3710      	adds	r7, #16
    a342:	46bd      	mov	sp, r7
    a344:	bd80      	pop	{r7, pc}
    a346:	bf00      	nop
    a348:	0000a2ed 	.word	0x0000a2ed

0000a34c <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    a34c:	b580      	push	{r7, lr}
    a34e:	b082      	sub	sp, #8
    a350:	af00      	add	r7, sp, #0
    a352:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    a354:	687b      	ldr	r3, [r7, #4]
    a356:	781b      	ldrb	r3, [r3, #0]
    a358:	b2db      	uxtb	r3, r3
    a35a:	f023 0304 	bic.w	r3, r3, #4
    a35e:	b2da      	uxtb	r2, r3
    a360:	687b      	ldr	r3, [r7, #4]
    a362:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    a364:	210e      	movs	r1, #14
    a366:	6878      	ldr	r0, [r7, #4]
    a368:	4b02      	ldr	r3, [pc, #8]	; (a374 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    a36a:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    a36c:	bf00      	nop
    a36e:	3708      	adds	r7, #8
    a370:	46bd      	mov	sp, r7
    a372:	bd80      	pop	{r7, pc}
    a374:	0000a2ed 	.word	0x0000a2ed

0000a378 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    a378:	b580      	push	{r7, lr}
    a37a:	b084      	sub	sp, #16
    a37c:	af00      	add	r7, sp, #0
    a37e:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    a380:	210e      	movs	r1, #14
    a382:	6878      	ldr	r0, [r7, #4]
    a384:	4b08      	ldr	r3, [pc, #32]	; (a3a8 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    a386:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    a388:	687b      	ldr	r3, [r7, #4]
    a38a:	781b      	ldrb	r3, [r3, #0]
    a38c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    a38e:	7bfb      	ldrb	r3, [r7, #15]
    a390:	09db      	lsrs	r3, r3, #7
    a392:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    a394:	7bfb      	ldrb	r3, [r7, #15]
    a396:	2b00      	cmp	r3, #0
    a398:	bf14      	ite	ne
    a39a:	2301      	movne	r3, #1
    a39c:	2300      	moveq	r3, #0
    a39e:	b2db      	uxtb	r3, r3
}
    a3a0:	4618      	mov	r0, r3
    a3a2:	3710      	adds	r7, #16
    a3a4:	46bd      	mov	sp, r7
    a3a6:	bd80      	pop	{r7, pc}
    a3a8:	0000a2ed 	.word	0x0000a2ed

0000a3ac <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    a3ac:	b480      	push	{r7}
    a3ae:	b085      	sub	sp, #20
    a3b0:	af00      	add	r7, sp, #0
    a3b2:	6078      	str	r0, [r7, #4]
    a3b4:	460b      	mov	r3, r1
    a3b6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    a3b8:	687b      	ldr	r3, [r7, #4]
    a3ba:	785b      	ldrb	r3, [r3, #1]
    a3bc:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    a3be:	7bfb      	ldrb	r3, [r7, #15]
    a3c0:	f023 030f 	bic.w	r3, r3, #15
    a3c4:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    a3c6:	78fb      	ldrb	r3, [r7, #3]
    a3c8:	f003 030f 	and.w	r3, r3, #15
    a3cc:	b2da      	uxtb	r2, r3
    a3ce:	7bfb      	ldrb	r3, [r7, #15]
    a3d0:	4313      	orrs	r3, r2
    a3d2:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    a3d4:	687b      	ldr	r3, [r7, #4]
    a3d6:	7bfa      	ldrb	r2, [r7, #15]
    a3d8:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    a3da:	bf00      	nop
    a3dc:	3714      	adds	r7, #20
    a3de:	46bd      	mov	sp, r7
    a3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    a3e4:	4770      	bx	lr
	...

0000a3e8 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    a3e8:	b580      	push	{r7, lr}
    a3ea:	b082      	sub	sp, #8
    a3ec:	af00      	add	r7, sp, #0
    a3ee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    a3f0:	687b      	ldr	r3, [r7, #4]
    a3f2:	2b00      	cmp	r3, #0
    a3f4:	d005      	beq.n	a402 <_wdt_init+0x1a>
    a3f6:	687b      	ldr	r3, [r7, #4]
    a3f8:	681b      	ldr	r3, [r3, #0]
    a3fa:	2b00      	cmp	r3, #0
    a3fc:	d001      	beq.n	a402 <_wdt_init+0x1a>
    a3fe:	2301      	movs	r3, #1
    a400:	e000      	b.n	a404 <_wdt_init+0x1c>
    a402:	2300      	movs	r3, #0
    a404:	f003 0301 	and.w	r3, r3, #1
    a408:	b2db      	uxtb	r3, r3
    a40a:	2250      	movs	r2, #80	; 0x50
    a40c:	4913      	ldr	r1, [pc, #76]	; (a45c <_wdt_init+0x74>)
    a40e:	4618      	mov	r0, r3
    a410:	4b13      	ldr	r3, [pc, #76]	; (a460 <_wdt_init+0x78>)
    a412:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    a414:	687b      	ldr	r3, [r7, #4]
    a416:	681b      	ldr	r3, [r3, #0]
    a418:	4618      	mov	r0, r3
    a41a:	4b12      	ldr	r3, [pc, #72]	; (a464 <_wdt_init+0x7c>)
    a41c:	4798      	blx	r3
    a41e:	4603      	mov	r3, r0
    a420:	2b00      	cmp	r3, #0
    a422:	d107      	bne.n	a434 <_wdt_init+0x4c>
    a424:	687b      	ldr	r3, [r7, #4]
    a426:	681b      	ldr	r3, [r3, #0]
    a428:	4618      	mov	r0, r3
    a42a:	4b0f      	ldr	r3, [pc, #60]	; (a468 <_wdt_init+0x80>)
    a42c:	4798      	blx	r3
    a42e:	4603      	mov	r3, r0
    a430:	2b00      	cmp	r3, #0
    a432:	d002      	beq.n	a43a <_wdt_init+0x52>
		return ERR_DENIED;
    a434:	f06f 0310 	mvn.w	r3, #16
    a438:	e00b      	b.n	a452 <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    a43a:	687b      	ldr	r3, [r7, #4]
    a43c:	681b      	ldr	r3, [r3, #0]
    a43e:	4618      	mov	r0, r3
    a440:	4b0a      	ldr	r3, [pc, #40]	; (a46c <_wdt_init+0x84>)
    a442:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    a444:	687b      	ldr	r3, [r7, #4]
    a446:	681b      	ldr	r3, [r3, #0]
    a448:	210b      	movs	r1, #11
    a44a:	4618      	mov	r0, r3
    a44c:	4b08      	ldr	r3, [pc, #32]	; (a470 <_wdt_init+0x88>)
    a44e:	4798      	blx	r3
	}

	return ERR_NONE;
    a450:	2300      	movs	r3, #0
}
    a452:	4618      	mov	r0, r3
    a454:	3708      	adds	r7, #8
    a456:	46bd      	mov	sp, r7
    a458:	bd80      	pop	{r7, pc}
    a45a:	bf00      	nop
    a45c:	0001325c 	.word	0x0001325c
    a460:	00002f09 	.word	0x00002f09
    a464:	0000a379 	.word	0x0000a379
    a468:	0000a311 	.word	0x0000a311
    a46c:	0000a34d 	.word	0x0000a34d
    a470:	0000a3ad 	.word	0x0000a3ad

0000a474 <hri_port_set_DIR_reg>:
{
    a474:	b480      	push	{r7}
    a476:	b085      	sub	sp, #20
    a478:	af00      	add	r7, sp, #0
    a47a:	60f8      	str	r0, [r7, #12]
    a47c:	460b      	mov	r3, r1
    a47e:	607a      	str	r2, [r7, #4]
    a480:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    a482:	7afb      	ldrb	r3, [r7, #11]
    a484:	68fa      	ldr	r2, [r7, #12]
    a486:	01db      	lsls	r3, r3, #7
    a488:	4413      	add	r3, r2
    a48a:	3308      	adds	r3, #8
    a48c:	687a      	ldr	r2, [r7, #4]
    a48e:	601a      	str	r2, [r3, #0]
}
    a490:	bf00      	nop
    a492:	3714      	adds	r7, #20
    a494:	46bd      	mov	sp, r7
    a496:	f85d 7b04 	ldr.w	r7, [sp], #4
    a49a:	4770      	bx	lr

0000a49c <hri_port_clear_DIR_reg>:
{
    a49c:	b480      	push	{r7}
    a49e:	b085      	sub	sp, #20
    a4a0:	af00      	add	r7, sp, #0
    a4a2:	60f8      	str	r0, [r7, #12]
    a4a4:	460b      	mov	r3, r1
    a4a6:	607a      	str	r2, [r7, #4]
    a4a8:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    a4aa:	7afb      	ldrb	r3, [r7, #11]
    a4ac:	68fa      	ldr	r2, [r7, #12]
    a4ae:	01db      	lsls	r3, r3, #7
    a4b0:	4413      	add	r3, r2
    a4b2:	3304      	adds	r3, #4
    a4b4:	687a      	ldr	r2, [r7, #4]
    a4b6:	601a      	str	r2, [r3, #0]
}
    a4b8:	bf00      	nop
    a4ba:	3714      	adds	r7, #20
    a4bc:	46bd      	mov	sp, r7
    a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
    a4c2:	4770      	bx	lr

0000a4c4 <hri_port_set_OUT_reg>:
{
    a4c4:	b480      	push	{r7}
    a4c6:	b085      	sub	sp, #20
    a4c8:	af00      	add	r7, sp, #0
    a4ca:	60f8      	str	r0, [r7, #12]
    a4cc:	460b      	mov	r3, r1
    a4ce:	607a      	str	r2, [r7, #4]
    a4d0:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    a4d2:	7afb      	ldrb	r3, [r7, #11]
    a4d4:	68fa      	ldr	r2, [r7, #12]
    a4d6:	01db      	lsls	r3, r3, #7
    a4d8:	4413      	add	r3, r2
    a4da:	3318      	adds	r3, #24
    a4dc:	687a      	ldr	r2, [r7, #4]
    a4de:	601a      	str	r2, [r3, #0]
}
    a4e0:	bf00      	nop
    a4e2:	3714      	adds	r7, #20
    a4e4:	46bd      	mov	sp, r7
    a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    a4ea:	4770      	bx	lr

0000a4ec <hri_port_clear_OUT_reg>:
{
    a4ec:	b480      	push	{r7}
    a4ee:	b085      	sub	sp, #20
    a4f0:	af00      	add	r7, sp, #0
    a4f2:	60f8      	str	r0, [r7, #12]
    a4f4:	460b      	mov	r3, r1
    a4f6:	607a      	str	r2, [r7, #4]
    a4f8:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    a4fa:	7afb      	ldrb	r3, [r7, #11]
    a4fc:	68fa      	ldr	r2, [r7, #12]
    a4fe:	01db      	lsls	r3, r3, #7
    a500:	4413      	add	r3, r2
    a502:	3314      	adds	r3, #20
    a504:	687a      	ldr	r2, [r7, #4]
    a506:	601a      	str	r2, [r3, #0]
}
    a508:	bf00      	nop
    a50a:	3714      	adds	r7, #20
    a50c:	46bd      	mov	sp, r7
    a50e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a512:	4770      	bx	lr

0000a514 <hri_port_write_PMUX_PMUXE_bf>:
{
    a514:	b480      	push	{r7}
    a516:	b085      	sub	sp, #20
    a518:	af00      	add	r7, sp, #0
    a51a:	6078      	str	r0, [r7, #4]
    a51c:	4608      	mov	r0, r1
    a51e:	4611      	mov	r1, r2
    a520:	461a      	mov	r2, r3
    a522:	4603      	mov	r3, r0
    a524:	70fb      	strb	r3, [r7, #3]
    a526:	460b      	mov	r3, r1
    a528:	70bb      	strb	r3, [r7, #2]
    a52a:	4613      	mov	r3, r2
    a52c:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    a52e:	78fa      	ldrb	r2, [r7, #3]
    a530:	78bb      	ldrb	r3, [r7, #2]
    a532:	6879      	ldr	r1, [r7, #4]
    a534:	01d2      	lsls	r2, r2, #7
    a536:	440a      	add	r2, r1
    a538:	4413      	add	r3, r2
    a53a:	3330      	adds	r3, #48	; 0x30
    a53c:	781b      	ldrb	r3, [r3, #0]
    a53e:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    a540:	7bfb      	ldrb	r3, [r7, #15]
    a542:	f023 030f 	bic.w	r3, r3, #15
    a546:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    a548:	787b      	ldrb	r3, [r7, #1]
    a54a:	f003 030f 	and.w	r3, r3, #15
    a54e:	b2da      	uxtb	r2, r3
    a550:	7bfb      	ldrb	r3, [r7, #15]
    a552:	4313      	orrs	r3, r2
    a554:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    a556:	78fa      	ldrb	r2, [r7, #3]
    a558:	78bb      	ldrb	r3, [r7, #2]
    a55a:	6879      	ldr	r1, [r7, #4]
    a55c:	01d2      	lsls	r2, r2, #7
    a55e:	440a      	add	r2, r1
    a560:	4413      	add	r3, r2
    a562:	3330      	adds	r3, #48	; 0x30
    a564:	7bfa      	ldrb	r2, [r7, #15]
    a566:	701a      	strb	r2, [r3, #0]
}
    a568:	bf00      	nop
    a56a:	3714      	adds	r7, #20
    a56c:	46bd      	mov	sp, r7
    a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a572:	4770      	bx	lr

0000a574 <hri_port_write_PMUX_PMUXO_bf>:
{
    a574:	b480      	push	{r7}
    a576:	b085      	sub	sp, #20
    a578:	af00      	add	r7, sp, #0
    a57a:	6078      	str	r0, [r7, #4]
    a57c:	4608      	mov	r0, r1
    a57e:	4611      	mov	r1, r2
    a580:	461a      	mov	r2, r3
    a582:	4603      	mov	r3, r0
    a584:	70fb      	strb	r3, [r7, #3]
    a586:	460b      	mov	r3, r1
    a588:	70bb      	strb	r3, [r7, #2]
    a58a:	4613      	mov	r3, r2
    a58c:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    a58e:	78fa      	ldrb	r2, [r7, #3]
    a590:	78bb      	ldrb	r3, [r7, #2]
    a592:	6879      	ldr	r1, [r7, #4]
    a594:	01d2      	lsls	r2, r2, #7
    a596:	440a      	add	r2, r1
    a598:	4413      	add	r3, r2
    a59a:	3330      	adds	r3, #48	; 0x30
    a59c:	781b      	ldrb	r3, [r3, #0]
    a59e:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    a5a0:	7bfb      	ldrb	r3, [r7, #15]
    a5a2:	f003 030f 	and.w	r3, r3, #15
    a5a6:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    a5a8:	787b      	ldrb	r3, [r7, #1]
    a5aa:	011b      	lsls	r3, r3, #4
    a5ac:	b2da      	uxtb	r2, r3
    a5ae:	7bfb      	ldrb	r3, [r7, #15]
    a5b0:	4313      	orrs	r3, r2
    a5b2:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    a5b4:	78fa      	ldrb	r2, [r7, #3]
    a5b6:	78bb      	ldrb	r3, [r7, #2]
    a5b8:	6879      	ldr	r1, [r7, #4]
    a5ba:	01d2      	lsls	r2, r2, #7
    a5bc:	440a      	add	r2, r1
    a5be:	4413      	add	r3, r2
    a5c0:	3330      	adds	r3, #48	; 0x30
    a5c2:	7bfa      	ldrb	r2, [r7, #15]
    a5c4:	701a      	strb	r2, [r3, #0]
}
    a5c6:	bf00      	nop
    a5c8:	3714      	adds	r7, #20
    a5ca:	46bd      	mov	sp, r7
    a5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    a5d0:	4770      	bx	lr

0000a5d2 <hri_port_write_PINCFG_PMUXEN_bit>:
{
    a5d2:	b480      	push	{r7}
    a5d4:	b085      	sub	sp, #20
    a5d6:	af00      	add	r7, sp, #0
    a5d8:	6078      	str	r0, [r7, #4]
    a5da:	4608      	mov	r0, r1
    a5dc:	4611      	mov	r1, r2
    a5de:	461a      	mov	r2, r3
    a5e0:	4603      	mov	r3, r0
    a5e2:	70fb      	strb	r3, [r7, #3]
    a5e4:	460b      	mov	r3, r1
    a5e6:	70bb      	strb	r3, [r7, #2]
    a5e8:	4613      	mov	r3, r2
    a5ea:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    a5ec:	78fa      	ldrb	r2, [r7, #3]
    a5ee:	78bb      	ldrb	r3, [r7, #2]
    a5f0:	6879      	ldr	r1, [r7, #4]
    a5f2:	01d2      	lsls	r2, r2, #7
    a5f4:	440a      	add	r2, r1
    a5f6:	4413      	add	r3, r2
    a5f8:	3340      	adds	r3, #64	; 0x40
    a5fa:	781b      	ldrb	r3, [r3, #0]
    a5fc:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    a5fe:	7bfb      	ldrb	r3, [r7, #15]
    a600:	f023 0301 	bic.w	r3, r3, #1
    a604:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    a606:	787a      	ldrb	r2, [r7, #1]
    a608:	7bfb      	ldrb	r3, [r7, #15]
    a60a:	4313      	orrs	r3, r2
    a60c:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    a60e:	78fa      	ldrb	r2, [r7, #3]
    a610:	78bb      	ldrb	r3, [r7, #2]
    a612:	6879      	ldr	r1, [r7, #4]
    a614:	01d2      	lsls	r2, r2, #7
    a616:	440a      	add	r2, r1
    a618:	4413      	add	r3, r2
    a61a:	3340      	adds	r3, #64	; 0x40
    a61c:	7bfa      	ldrb	r2, [r7, #15]
    a61e:	701a      	strb	r2, [r3, #0]
}
    a620:	bf00      	nop
    a622:	3714      	adds	r7, #20
    a624:	46bd      	mov	sp, r7
    a626:	f85d 7b04 	ldr.w	r7, [sp], #4
    a62a:	4770      	bx	lr

0000a62c <hri_port_write_WRCONFIG_reg>:
{
    a62c:	b480      	push	{r7}
    a62e:	b085      	sub	sp, #20
    a630:	af00      	add	r7, sp, #0
    a632:	60f8      	str	r0, [r7, #12]
    a634:	460b      	mov	r3, r1
    a636:	607a      	str	r2, [r7, #4]
    a638:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    a63a:	7afb      	ldrb	r3, [r7, #11]
    a63c:	68fa      	ldr	r2, [r7, #12]
    a63e:	01db      	lsls	r3, r3, #7
    a640:	4413      	add	r3, r2
    a642:	3328      	adds	r3, #40	; 0x28
    a644:	687a      	ldr	r2, [r7, #4]
    a646:	601a      	str	r2, [r3, #0]
}
    a648:	bf00      	nop
    a64a:	3714      	adds	r7, #20
    a64c:	46bd      	mov	sp, r7
    a64e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a652:	4770      	bx	lr

0000a654 <_gpio_set_direction>:
{
    a654:	b580      	push	{r7, lr}
    a656:	b082      	sub	sp, #8
    a658:	af00      	add	r7, sp, #0
    a65a:	4603      	mov	r3, r0
    a65c:	6039      	str	r1, [r7, #0]
    a65e:	71fb      	strb	r3, [r7, #7]
    a660:	4613      	mov	r3, r2
    a662:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    a664:	79bb      	ldrb	r3, [r7, #6]
    a666:	2b01      	cmp	r3, #1
    a668:	d01c      	beq.n	a6a4 <_gpio_set_direction+0x50>
    a66a:	2b02      	cmp	r3, #2
    a66c:	d037      	beq.n	a6de <_gpio_set_direction+0x8a>
    a66e:	2b00      	cmp	r3, #0
    a670:	d14e      	bne.n	a710 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    a672:	79fb      	ldrb	r3, [r7, #7]
    a674:	683a      	ldr	r2, [r7, #0]
    a676:	4619      	mov	r1, r3
    a678:	482a      	ldr	r0, [pc, #168]	; (a724 <_gpio_set_direction+0xd0>)
    a67a:	4b2b      	ldr	r3, [pc, #172]	; (a728 <_gpio_set_direction+0xd4>)
    a67c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    a67e:	683b      	ldr	r3, [r7, #0]
    a680:	b29b      	uxth	r3, r3
    a682:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    a686:	79fb      	ldrb	r3, [r7, #7]
    a688:	4619      	mov	r1, r3
    a68a:	4826      	ldr	r0, [pc, #152]	; (a724 <_gpio_set_direction+0xd0>)
    a68c:	4b27      	ldr	r3, [pc, #156]	; (a72c <_gpio_set_direction+0xd8>)
    a68e:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    a690:	683b      	ldr	r3, [r7, #0]
    a692:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    a694:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    a698:	79fb      	ldrb	r3, [r7, #7]
    a69a:	4619      	mov	r1, r3
    a69c:	4821      	ldr	r0, [pc, #132]	; (a724 <_gpio_set_direction+0xd0>)
    a69e:	4b23      	ldr	r3, [pc, #140]	; (a72c <_gpio_set_direction+0xd8>)
    a6a0:	4798      	blx	r3
		break;
    a6a2:	e03a      	b.n	a71a <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    a6a4:	79fb      	ldrb	r3, [r7, #7]
    a6a6:	683a      	ldr	r2, [r7, #0]
    a6a8:	4619      	mov	r1, r3
    a6aa:	481e      	ldr	r0, [pc, #120]	; (a724 <_gpio_set_direction+0xd0>)
    a6ac:	4b1e      	ldr	r3, [pc, #120]	; (a728 <_gpio_set_direction+0xd4>)
    a6ae:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    a6b0:	683b      	ldr	r3, [r7, #0]
    a6b2:	b29b      	uxth	r3, r3
    a6b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    a6b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    a6bc:	79f9      	ldrb	r1, [r7, #7]
    a6be:	461a      	mov	r2, r3
    a6c0:	4818      	ldr	r0, [pc, #96]	; (a724 <_gpio_set_direction+0xd0>)
    a6c2:	4b1a      	ldr	r3, [pc, #104]	; (a72c <_gpio_set_direction+0xd8>)
    a6c4:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    a6c6:	683b      	ldr	r3, [r7, #0]
    a6c8:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    a6ca:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    a6ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    a6d2:	79f9      	ldrb	r1, [r7, #7]
    a6d4:	461a      	mov	r2, r3
    a6d6:	4813      	ldr	r0, [pc, #76]	; (a724 <_gpio_set_direction+0xd0>)
    a6d8:	4b14      	ldr	r3, [pc, #80]	; (a72c <_gpio_set_direction+0xd8>)
    a6da:	4798      	blx	r3
		break;
    a6dc:	e01d      	b.n	a71a <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    a6de:	79fb      	ldrb	r3, [r7, #7]
    a6e0:	683a      	ldr	r2, [r7, #0]
    a6e2:	4619      	mov	r1, r3
    a6e4:	480f      	ldr	r0, [pc, #60]	; (a724 <_gpio_set_direction+0xd0>)
    a6e6:	4b12      	ldr	r3, [pc, #72]	; (a730 <_gpio_set_direction+0xdc>)
    a6e8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    a6ea:	683b      	ldr	r3, [r7, #0]
    a6ec:	b29b      	uxth	r3, r3
    a6ee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    a6f2:	79fb      	ldrb	r3, [r7, #7]
    a6f4:	4619      	mov	r1, r3
    a6f6:	480b      	ldr	r0, [pc, #44]	; (a724 <_gpio_set_direction+0xd0>)
    a6f8:	4b0c      	ldr	r3, [pc, #48]	; (a72c <_gpio_set_direction+0xd8>)
    a6fa:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    a6fc:	683b      	ldr	r3, [r7, #0]
    a6fe:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    a700:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    a704:	79fb      	ldrb	r3, [r7, #7]
    a706:	4619      	mov	r1, r3
    a708:	4806      	ldr	r0, [pc, #24]	; (a724 <_gpio_set_direction+0xd0>)
    a70a:	4b08      	ldr	r3, [pc, #32]	; (a72c <_gpio_set_direction+0xd8>)
    a70c:	4798      	blx	r3
		break;
    a70e:	e004      	b.n	a71a <_gpio_set_direction+0xc6>
		ASSERT(false);
    a710:	2246      	movs	r2, #70	; 0x46
    a712:	4908      	ldr	r1, [pc, #32]	; (a734 <_gpio_set_direction+0xe0>)
    a714:	2000      	movs	r0, #0
    a716:	4b08      	ldr	r3, [pc, #32]	; (a738 <_gpio_set_direction+0xe4>)
    a718:	4798      	blx	r3
}
    a71a:	bf00      	nop
    a71c:	3708      	adds	r7, #8
    a71e:	46bd      	mov	sp, r7
    a720:	bd80      	pop	{r7, pc}
    a722:	bf00      	nop
    a724:	41008000 	.word	0x41008000
    a728:	0000a49d 	.word	0x0000a49d
    a72c:	0000a62d 	.word	0x0000a62d
    a730:	0000a475 	.word	0x0000a475
    a734:	00013274 	.word	0x00013274
    a738:	00002f09 	.word	0x00002f09

0000a73c <_gpio_set_level>:
{
    a73c:	b580      	push	{r7, lr}
    a73e:	b082      	sub	sp, #8
    a740:	af00      	add	r7, sp, #0
    a742:	4603      	mov	r3, r0
    a744:	6039      	str	r1, [r7, #0]
    a746:	71fb      	strb	r3, [r7, #7]
    a748:	4613      	mov	r3, r2
    a74a:	71bb      	strb	r3, [r7, #6]
	if (level) {
    a74c:	79bb      	ldrb	r3, [r7, #6]
    a74e:	2b00      	cmp	r3, #0
    a750:	d006      	beq.n	a760 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    a752:	79fb      	ldrb	r3, [r7, #7]
    a754:	683a      	ldr	r2, [r7, #0]
    a756:	4619      	mov	r1, r3
    a758:	4806      	ldr	r0, [pc, #24]	; (a774 <_gpio_set_level+0x38>)
    a75a:	4b07      	ldr	r3, [pc, #28]	; (a778 <_gpio_set_level+0x3c>)
    a75c:	4798      	blx	r3
}
    a75e:	e005      	b.n	a76c <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    a760:	79fb      	ldrb	r3, [r7, #7]
    a762:	683a      	ldr	r2, [r7, #0]
    a764:	4619      	mov	r1, r3
    a766:	4803      	ldr	r0, [pc, #12]	; (a774 <_gpio_set_level+0x38>)
    a768:	4b04      	ldr	r3, [pc, #16]	; (a77c <_gpio_set_level+0x40>)
    a76a:	4798      	blx	r3
}
    a76c:	bf00      	nop
    a76e:	3708      	adds	r7, #8
    a770:	46bd      	mov	sp, r7
    a772:	bd80      	pop	{r7, pc}
    a774:	41008000 	.word	0x41008000
    a778:	0000a4c5 	.word	0x0000a4c5
    a77c:	0000a4ed 	.word	0x0000a4ed

0000a780 <_gpio_set_pin_function>:
{
    a780:	b590      	push	{r4, r7, lr}
    a782:	b085      	sub	sp, #20
    a784:	af00      	add	r7, sp, #0
    a786:	6078      	str	r0, [r7, #4]
    a788:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    a78a:	687b      	ldr	r3, [r7, #4]
    a78c:	095b      	lsrs	r3, r3, #5
    a78e:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    a790:	687b      	ldr	r3, [r7, #4]
    a792:	b2db      	uxtb	r3, r3
    a794:	f003 031f 	and.w	r3, r3, #31
    a798:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    a79a:	683b      	ldr	r3, [r7, #0]
    a79c:	f1b3 3fff 	cmp.w	r3, #4294967295
    a7a0:	d106      	bne.n	a7b0 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    a7a2:	7bba      	ldrb	r2, [r7, #14]
    a7a4:	7bf9      	ldrb	r1, [r7, #15]
    a7a6:	2300      	movs	r3, #0
    a7a8:	4812      	ldr	r0, [pc, #72]	; (a7f4 <_gpio_set_pin_function+0x74>)
    a7aa:	4c13      	ldr	r4, [pc, #76]	; (a7f8 <_gpio_set_pin_function+0x78>)
    a7ac:	47a0      	blx	r4
}
    a7ae:	e01d      	b.n	a7ec <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    a7b0:	7bba      	ldrb	r2, [r7, #14]
    a7b2:	7bf9      	ldrb	r1, [r7, #15]
    a7b4:	2301      	movs	r3, #1
    a7b6:	480f      	ldr	r0, [pc, #60]	; (a7f4 <_gpio_set_pin_function+0x74>)
    a7b8:	4c0f      	ldr	r4, [pc, #60]	; (a7f8 <_gpio_set_pin_function+0x78>)
    a7ba:	47a0      	blx	r4
		if (pin & 1) {
    a7bc:	7bbb      	ldrb	r3, [r7, #14]
    a7be:	f003 0301 	and.w	r3, r3, #1
    a7c2:	2b00      	cmp	r3, #0
    a7c4:	d009      	beq.n	a7da <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    a7c6:	7bbb      	ldrb	r3, [r7, #14]
    a7c8:	085b      	lsrs	r3, r3, #1
    a7ca:	b2da      	uxtb	r2, r3
    a7cc:	683b      	ldr	r3, [r7, #0]
    a7ce:	b2db      	uxtb	r3, r3
    a7d0:	7bf9      	ldrb	r1, [r7, #15]
    a7d2:	4808      	ldr	r0, [pc, #32]	; (a7f4 <_gpio_set_pin_function+0x74>)
    a7d4:	4c09      	ldr	r4, [pc, #36]	; (a7fc <_gpio_set_pin_function+0x7c>)
    a7d6:	47a0      	blx	r4
}
    a7d8:	e008      	b.n	a7ec <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    a7da:	7bbb      	ldrb	r3, [r7, #14]
    a7dc:	085b      	lsrs	r3, r3, #1
    a7de:	b2da      	uxtb	r2, r3
    a7e0:	683b      	ldr	r3, [r7, #0]
    a7e2:	b2db      	uxtb	r3, r3
    a7e4:	7bf9      	ldrb	r1, [r7, #15]
    a7e6:	4803      	ldr	r0, [pc, #12]	; (a7f4 <_gpio_set_pin_function+0x74>)
    a7e8:	4c05      	ldr	r4, [pc, #20]	; (a800 <_gpio_set_pin_function+0x80>)
    a7ea:	47a0      	blx	r4
}
    a7ec:	bf00      	nop
    a7ee:	3714      	adds	r7, #20
    a7f0:	46bd      	mov	sp, r7
    a7f2:	bd90      	pop	{r4, r7, pc}
    a7f4:	41008000 	.word	0x41008000
    a7f8:	0000a5d3 	.word	0x0000a5d3
    a7fc:	0000a575 	.word	0x0000a575
    a800:	0000a515 	.word	0x0000a515

0000a804 <gpio_set_pin_function>:
{
    a804:	b580      	push	{r7, lr}
    a806:	b082      	sub	sp, #8
    a808:	af00      	add	r7, sp, #0
    a80a:	6078      	str	r0, [r7, #4]
    a80c:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    a80e:	6839      	ldr	r1, [r7, #0]
    a810:	6878      	ldr	r0, [r7, #4]
    a812:	4b03      	ldr	r3, [pc, #12]	; (a820 <gpio_set_pin_function+0x1c>)
    a814:	4798      	blx	r3
}
    a816:	bf00      	nop
    a818:	3708      	adds	r7, #8
    a81a:	46bd      	mov	sp, r7
    a81c:	bd80      	pop	{r7, pc}
    a81e:	bf00      	nop
    a820:	0000a781 	.word	0x0000a781

0000a824 <gpio_set_pin_direction>:
{
    a824:	b580      	push	{r7, lr}
    a826:	b082      	sub	sp, #8
    a828:	af00      	add	r7, sp, #0
    a82a:	4603      	mov	r3, r0
    a82c:	460a      	mov	r2, r1
    a82e:	71fb      	strb	r3, [r7, #7]
    a830:	4613      	mov	r3, r2
    a832:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    a834:	79fb      	ldrb	r3, [r7, #7]
    a836:	095b      	lsrs	r3, r3, #5
    a838:	b2d8      	uxtb	r0, r3
    a83a:	79fb      	ldrb	r3, [r7, #7]
    a83c:	f003 031f 	and.w	r3, r3, #31
    a840:	2201      	movs	r2, #1
    a842:	fa02 f303 	lsl.w	r3, r2, r3
    a846:	79ba      	ldrb	r2, [r7, #6]
    a848:	4619      	mov	r1, r3
    a84a:	4b03      	ldr	r3, [pc, #12]	; (a858 <gpio_set_pin_direction+0x34>)
    a84c:	4798      	blx	r3
}
    a84e:	bf00      	nop
    a850:	3708      	adds	r7, #8
    a852:	46bd      	mov	sp, r7
    a854:	bd80      	pop	{r7, pc}
    a856:	bf00      	nop
    a858:	0000a655 	.word	0x0000a655

0000a85c <gpio_set_pin_level>:
{
    a85c:	b580      	push	{r7, lr}
    a85e:	b082      	sub	sp, #8
    a860:	af00      	add	r7, sp, #0
    a862:	4603      	mov	r3, r0
    a864:	460a      	mov	r2, r1
    a866:	71fb      	strb	r3, [r7, #7]
    a868:	4613      	mov	r3, r2
    a86a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    a86c:	79fb      	ldrb	r3, [r7, #7]
    a86e:	095b      	lsrs	r3, r3, #5
    a870:	b2d8      	uxtb	r0, r3
    a872:	79fb      	ldrb	r3, [r7, #7]
    a874:	f003 031f 	and.w	r3, r3, #31
    a878:	2201      	movs	r2, #1
    a87a:	fa02 f303 	lsl.w	r3, r2, r3
    a87e:	79ba      	ldrb	r2, [r7, #6]
    a880:	4619      	mov	r1, r3
    a882:	4b03      	ldr	r3, [pc, #12]	; (a890 <gpio_set_pin_level+0x34>)
    a884:	4798      	blx	r3
}
    a886:	bf00      	nop
    a888:	3708      	adds	r7, #8
    a88a:	46bd      	mov	sp, r7
    a88c:	bd80      	pop	{r7, pc}
    a88e:	bf00      	nop
    a890:	0000a73d 	.word	0x0000a73d

0000a894 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    a894:	b580      	push	{r7, lr}
    a896:	b082      	sub	sp, #8
    a898:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    a89a:	2100      	movs	r1, #0
    a89c:	2008      	movs	r0, #8
    a89e:	4b24      	ldr	r3, [pc, #144]	; (a930 <QSPI_N25Q256_exit_xip+0x9c>)
    a8a0:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    a8a2:	2100      	movs	r1, #0
    a8a4:	202b      	movs	r0, #43	; 0x2b
    a8a6:	4b22      	ldr	r3, [pc, #136]	; (a930 <QSPI_N25Q256_exit_xip+0x9c>)
    a8a8:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    a8aa:	2100      	movs	r1, #0
    a8ac:	202a      	movs	r0, #42	; 0x2a
    a8ae:	4b20      	ldr	r3, [pc, #128]	; (a930 <QSPI_N25Q256_exit_xip+0x9c>)
    a8b0:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    a8b2:	2102      	movs	r1, #2
    a8b4:	2008      	movs	r0, #8
    a8b6:	4b1f      	ldr	r3, [pc, #124]	; (a934 <QSPI_N25Q256_exit_xip+0xa0>)
    a8b8:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    a8ba:	2102      	movs	r1, #2
    a8bc:	202b      	movs	r0, #43	; 0x2b
    a8be:	4b1d      	ldr	r3, [pc, #116]	; (a934 <QSPI_N25Q256_exit_xip+0xa0>)
    a8c0:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    a8c2:	2102      	movs	r1, #2
    a8c4:	202a      	movs	r0, #42	; 0x2a
    a8c6:	4b1b      	ldr	r3, [pc, #108]	; (a934 <QSPI_N25Q256_exit_xip+0xa0>)
    a8c8:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    a8ca:	2101      	movs	r1, #1
    a8cc:	2008      	movs	r0, #8
    a8ce:	4b1a      	ldr	r3, [pc, #104]	; (a938 <QSPI_N25Q256_exit_xip+0xa4>)
    a8d0:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    a8d2:	2100      	movs	r1, #0
    a8d4:	202b      	movs	r0, #43	; 0x2b
    a8d6:	4b18      	ldr	r3, [pc, #96]	; (a938 <QSPI_N25Q256_exit_xip+0xa4>)
    a8d8:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    a8da:	2100      	movs	r1, #0
    a8dc:	202a      	movs	r0, #42	; 0x2a
    a8de:	4b16      	ldr	r3, [pc, #88]	; (a938 <QSPI_N25Q256_exit_xip+0xa4>)
    a8e0:	4798      	blx	r3

	delay_us(1);
    a8e2:	2001      	movs	r0, #1
    a8e4:	4b15      	ldr	r3, [pc, #84]	; (a93c <QSPI_N25Q256_exit_xip+0xa8>)
    a8e6:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    a8e8:	2300      	movs	r3, #0
    a8ea:	607b      	str	r3, [r7, #4]
    a8ec:	e010      	b.n	a910 <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    a8ee:	2101      	movs	r1, #1
    a8f0:	202a      	movs	r0, #42	; 0x2a
    a8f2:	4b11      	ldr	r3, [pc, #68]	; (a938 <QSPI_N25Q256_exit_xip+0xa4>)
    a8f4:	4798      	blx	r3
		delay_us(1);
    a8f6:	2001      	movs	r0, #1
    a8f8:	4b10      	ldr	r3, [pc, #64]	; (a93c <QSPI_N25Q256_exit_xip+0xa8>)
    a8fa:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    a8fc:	2100      	movs	r1, #0
    a8fe:	202a      	movs	r0, #42	; 0x2a
    a900:	4b0d      	ldr	r3, [pc, #52]	; (a938 <QSPI_N25Q256_exit_xip+0xa4>)
    a902:	4798      	blx	r3
		delay_us(1);
    a904:	2001      	movs	r0, #1
    a906:	4b0d      	ldr	r3, [pc, #52]	; (a93c <QSPI_N25Q256_exit_xip+0xa8>)
    a908:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    a90a:	687b      	ldr	r3, [r7, #4]
    a90c:	3301      	adds	r3, #1
    a90e:	607b      	str	r3, [r7, #4]
    a910:	687b      	ldr	r3, [r7, #4]
    a912:	2b06      	cmp	r3, #6
    a914:	ddeb      	ble.n	a8ee <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    a916:	2101      	movs	r1, #1
    a918:	202b      	movs	r0, #43	; 0x2b
    a91a:	4b07      	ldr	r3, [pc, #28]	; (a938 <QSPI_N25Q256_exit_xip+0xa4>)
    a91c:	4798      	blx	r3
	delay_us(1);
    a91e:	2001      	movs	r0, #1
    a920:	4b06      	ldr	r3, [pc, #24]	; (a93c <QSPI_N25Q256_exit_xip+0xa8>)
    a922:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    a924:	4b06      	ldr	r3, [pc, #24]	; (a940 <QSPI_N25Q256_exit_xip+0xac>)
    a926:	4798      	blx	r3
}
    a928:	bf00      	nop
    a92a:	3708      	adds	r7, #8
    a92c:	46bd      	mov	sp, r7
    a92e:	bd80      	pop	{r7, pc}
    a930:	0000a805 	.word	0x0000a805
    a934:	0000a825 	.word	0x0000a825
    a938:	0000a85d 	.word	0x0000a85d
    a93c:	000019c9 	.word	0x000019c9
    a940:	00000d99 	.word	0x00000d99

0000a944 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    a944:	b598      	push	{r3, r4, r7, lr}
    a946:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    a948:	4806      	ldr	r0, [pc, #24]	; (a964 <spi_nor_flash_init+0x20>)
    a94a:	4b07      	ldr	r3, [pc, #28]	; (a968 <spi_nor_flash_init+0x24>)
    a94c:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    a94e:	2300      	movs	r3, #0
    a950:	4a06      	ldr	r2, [pc, #24]	; (a96c <spi_nor_flash_init+0x28>)
    a952:	4904      	ldr	r1, [pc, #16]	; (a964 <spi_nor_flash_init+0x20>)
    a954:	4806      	ldr	r0, [pc, #24]	; (a970 <spi_nor_flash_init+0x2c>)
    a956:	4c07      	ldr	r4, [pc, #28]	; (a974 <spi_nor_flash_init+0x30>)
    a958:	47a0      	blx	r4
    a95a:	4602      	mov	r2, r0
    a95c:	4b06      	ldr	r3, [pc, #24]	; (a978 <spi_nor_flash_init+0x34>)
    a95e:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    a960:	bf00      	nop
    a962:	bd98      	pop	{r3, r4, r7, pc}
    a964:	200019a8 	.word	0x200019a8
    a968:	00001ddd 	.word	0x00001ddd
    a96c:	0000a895 	.word	0x0000a895
    a970:	2000185c 	.word	0x2000185c
    a974:	0000adb1 	.word	0x0000adb1
    a978:	20001b98 	.word	0x20001b98

0000a97c <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    a97c:	b580      	push	{r7, lr}
    a97e:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    a980:	4805      	ldr	r0, [pc, #20]	; (a998 <cdc_device_acm_init+0x1c>)
    a982:	4b06      	ldr	r3, [pc, #24]	; (a99c <cdc_device_acm_init+0x20>)
    a984:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    a986:	4b06      	ldr	r3, [pc, #24]	; (a9a0 <cdc_device_acm_init+0x24>)
    a988:	4798      	blx	r3

	usbdc_start(single_desc);
    a98a:	4806      	ldr	r0, [pc, #24]	; (a9a4 <cdc_device_acm_init+0x28>)
    a98c:	4b06      	ldr	r3, [pc, #24]	; (a9a8 <cdc_device_acm_init+0x2c>)
    a98e:	4798      	blx	r3
	usbdc_attach();
    a990:	4b06      	ldr	r3, [pc, #24]	; (a9ac <cdc_device_acm_init+0x30>)
    a992:	4798      	blx	r3
}
    a994:	bf00      	nop
    a996:	bd80      	pop	{r7, pc}
    a998:	200018ac 	.word	0x200018ac
    a99c:	0000c39d 	.word	0x0000c39d
    a9a0:	0000b751 	.word	0x0000b751
    a9a4:	20000104 	.word	0x20000104
    a9a8:	0000c439 	.word	0x0000c439
    a9ac:	0000c489 	.word	0x0000c489

0000a9b0 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    a9b0:	b580      	push	{r7, lr}
    a9b2:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    a9b4:	4b01      	ldr	r3, [pc, #4]	; (a9bc <usb_init+0xc>)
    a9b6:	4798      	blx	r3
}
    a9b8:	bf00      	nop
    a9ba:	bd80      	pop	{r7, pc}
    a9bc:	0000a97d 	.word	0x0000a97d

0000a9c0 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    a9c0:	b480      	push	{r7}
    a9c2:	b085      	sub	sp, #20
    a9c4:	af00      	add	r7, sp, #0
    a9c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    a9c8:	f3ef 8310 	mrs	r3, PRIMASK
    a9cc:	60fb      	str	r3, [r7, #12]
  return(result);
    a9ce:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    a9d0:	687b      	ldr	r3, [r7, #4]
    a9d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    a9d4:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    a9d6:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    a9da:	bf00      	nop
    a9dc:	3714      	adds	r7, #20
    a9de:	46bd      	mov	sp, r7
    a9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    a9e4:	4770      	bx	lr

0000a9e6 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    a9e6:	b480      	push	{r7}
    a9e8:	b085      	sub	sp, #20
    a9ea:	af00      	add	r7, sp, #0
    a9ec:	6078      	str	r0, [r7, #4]
    a9ee:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    a9f2:	687b      	ldr	r3, [r7, #4]
    a9f4:	681b      	ldr	r3, [r3, #0]
    a9f6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    a9f8:	68fb      	ldr	r3, [r7, #12]
    a9fa:	f383 8810 	msr	PRIMASK, r3
}
    a9fe:	bf00      	nop
    aa00:	3714      	adds	r7, #20
    aa02:	46bd      	mov	sp, r7
    aa04:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa08:	4770      	bx	lr
	...

0000aa0c <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    aa0c:	b580      	push	{r7, lr}
    aa0e:	b08c      	sub	sp, #48	; 0x30
    aa10:	af00      	add	r7, sp, #0
    aa12:	6078      	str	r0, [r7, #4]
    aa14:	460b      	mov	r3, r1
    aa16:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    aa18:	687b      	ldr	r3, [r7, #4]
    aa1a:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    aa1c:	687b      	ldr	r3, [r7, #4]
    aa1e:	681b      	ldr	r3, [r3, #0]
    aa20:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    aa22:	f107 030c 	add.w	r3, r7, #12
    aa26:	2200      	movs	r2, #0
    aa28:	601a      	str	r2, [r3, #0]
    aa2a:	605a      	str	r2, [r3, #4]
    aa2c:	609a      	str	r2, [r3, #8]
    aa2e:	60da      	str	r2, [r3, #12]
    aa30:	611a      	str	r2, [r3, #16]
    aa32:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    aa34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    aa36:	7b1b      	ldrb	r3, [r3, #12]
    aa38:	2b00      	cmp	r3, #0
    aa3a:	d001      	beq.n	aa40 <n25q256a_xip_confirm+0x34>
    aa3c:	2206      	movs	r2, #6
    aa3e:	e000      	b.n	aa42 <n25q256a_xip_confirm+0x36>
    aa40:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    aa42:	7b3b      	ldrb	r3, [r7, #12]
    aa44:	f362 0302 	bfi	r3, r2, #0, #3
    aa48:	733b      	strb	r3, [r7, #12]
    aa4a:	7b3b      	ldrb	r3, [r7, #12]
    aa4c:	f043 0310 	orr.w	r3, r3, #16
    aa50:	733b      	strb	r3, [r7, #12]
    aa52:	7b3b      	ldrb	r3, [r7, #12]
    aa54:	f043 0320 	orr.w	r3, r3, #32
    aa58:	733b      	strb	r3, [r7, #12]
    aa5a:	7b3b      	ldrb	r3, [r7, #12]
    aa5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    aa60:	733b      	strb	r3, [r7, #12]
    aa62:	7b3b      	ldrb	r3, [r7, #12]
    aa64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    aa68:	733b      	strb	r3, [r7, #12]
    aa6a:	7b7b      	ldrb	r3, [r7, #13]
    aa6c:	f043 0303 	orr.w	r3, r3, #3
    aa70:	737b      	strb	r3, [r7, #13]
    aa72:	7b7b      	ldrb	r3, [r7, #13]
    aa74:	2201      	movs	r2, #1
    aa76:	f362 1305 	bfi	r3, r2, #4, #2
    aa7a:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    aa7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    aa7e:	7b1b      	ldrb	r3, [r3, #12]
    aa80:	2b00      	cmp	r3, #0
    aa82:	d001      	beq.n	aa88 <n25q256a_xip_confirm+0x7c>
    aa84:	2208      	movs	r2, #8
    aa86:	e000      	b.n	aa8a <n25q256a_xip_confirm+0x7e>
    aa88:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    aa8a:	7bbb      	ldrb	r3, [r7, #14]
    aa8c:	f362 0304 	bfi	r3, r2, #0, #5
    aa90:	73bb      	strb	r3, [r7, #14]
    aa92:	230b      	movs	r3, #11
    aa94:	743b      	strb	r3, [r7, #16]
    aa96:	78fb      	ldrb	r3, [r7, #3]
    aa98:	2b00      	cmp	r3, #0
    aa9a:	d001      	beq.n	aaa0 <n25q256a_xip_confirm+0x94>
    aa9c:	2300      	movs	r3, #0
    aa9e:	e000      	b.n	aaa2 <n25q256a_xip_confirm+0x96>
    aaa0:	23ff      	movs	r3, #255	; 0xff
    aaa2:	747b      	strb	r3, [r7, #17]
    aaa4:	2301      	movs	r3, #1
    aaa6:	61bb      	str	r3, [r7, #24]
    aaa8:	f107 0327 	add.w	r3, r7, #39	; 0x27
    aaac:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    aaae:	f107 030c 	add.w	r3, r7, #12
    aab2:	4619      	mov	r1, r3
    aab4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    aab6:	4b07      	ldr	r3, [pc, #28]	; (aad4 <n25q256a_xip_confirm+0xc8>)
    aab8:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    aaba:	78fb      	ldrb	r3, [r7, #3]
    aabc:	2b00      	cmp	r3, #0
    aabe:	d001      	beq.n	aac4 <n25q256a_xip_confirm+0xb8>
    aac0:	2202      	movs	r2, #2
    aac2:	e000      	b.n	aac6 <n25q256a_xip_confirm+0xba>
    aac4:	2201      	movs	r2, #1
    aac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    aac8:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    aaca:	2300      	movs	r3, #0
}
    aacc:	4618      	mov	r0, r3
    aace:	3730      	adds	r7, #48	; 0x30
    aad0:	46bd      	mov	sp, r7
    aad2:	bd80      	pop	{r7, pc}
    aad4:	00001e55 	.word	0x00001e55

0000aad8 <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    aad8:	b580      	push	{r7, lr}
    aada:	b08c      	sub	sp, #48	; 0x30
    aadc:	af00      	add	r7, sp, #0
    aade:	6078      	str	r0, [r7, #4]
    aae0:	460b      	mov	r3, r1
    aae2:	70fb      	strb	r3, [r7, #3]
    aae4:	4613      	mov	r3, r2
    aae6:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    aae8:	2300      	movs	r3, #0
    aaea:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    aaec:	687b      	ldr	r3, [r7, #4]
    aaee:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    aaf0:	687b      	ldr	r3, [r7, #4]
    aaf2:	681b      	ldr	r3, [r3, #0]
    aaf4:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    aaf6:	f107 030c 	add.w	r3, r7, #12
    aafa:	2200      	movs	r2, #0
    aafc:	601a      	str	r2, [r3, #0]
    aafe:	605a      	str	r2, [r3, #4]
    ab00:	609a      	str	r2, [r3, #8]
    ab02:	60da      	str	r2, [r3, #12]
    ab04:	611a      	str	r2, [r3, #16]
    ab06:	615a      	str	r2, [r3, #20]
    ab08:	78fb      	ldrb	r3, [r7, #3]
    ab0a:	f003 0307 	and.w	r3, r3, #7
    ab0e:	b2da      	uxtb	r2, r3
    ab10:	7b3b      	ldrb	r3, [r7, #12]
    ab12:	f362 0302 	bfi	r3, r2, #0, #3
    ab16:	733b      	strb	r3, [r7, #12]
    ab18:	7b3b      	ldrb	r3, [r7, #12]
    ab1a:	f043 0310 	orr.w	r3, r3, #16
    ab1e:	733b      	strb	r3, [r7, #12]
    ab20:	7b3b      	ldrb	r3, [r7, #12]
    ab22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ab26:	733b      	strb	r3, [r7, #12]
    ab28:	78bb      	ldrb	r3, [r7, #2]
    ab2a:	743b      	strb	r3, [r7, #16]
    ab2c:	2301      	movs	r3, #1
    ab2e:	61bb      	str	r3, [r7, #24]
    ab30:	f107 0324 	add.w	r3, r7, #36	; 0x24
    ab34:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    ab36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ab38:	7b5b      	ldrb	r3, [r3, #13]
    ab3a:	2b00      	cmp	r3, #0
    ab3c:	d003      	beq.n	ab46 <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    ab3e:	2100      	movs	r1, #0
    ab40:	6878      	ldr	r0, [r7, #4]
    ab42:	4b0a      	ldr	r3, [pc, #40]	; (ab6c <n25q256a_read_reg+0x94>)
    ab44:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    ab46:	f107 030c 	add.w	r3, r7, #12
    ab4a:	4619      	mov	r1, r3
    ab4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ab4e:	4b08      	ldr	r3, [pc, #32]	; (ab70 <n25q256a_read_reg+0x98>)
    ab50:	4798      	blx	r3
	if (n25q->xip_mode) {
    ab52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ab54:	7b5b      	ldrb	r3, [r3, #13]
    ab56:	2b00      	cmp	r3, #0
    ab58:	d003      	beq.n	ab62 <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    ab5a:	2101      	movs	r1, #1
    ab5c:	6878      	ldr	r0, [r7, #4]
    ab5e:	4b03      	ldr	r3, [pc, #12]	; (ab6c <n25q256a_read_reg+0x94>)
    ab60:	4798      	blx	r3
	}
	return status;
    ab62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    ab64:	4618      	mov	r0, r3
    ab66:	3730      	adds	r7, #48	; 0x30
    ab68:	46bd      	mov	sp, r7
    ab6a:	bd80      	pop	{r7, pc}
    ab6c:	0000aa0d 	.word	0x0000aa0d
    ab70:	00001e55 	.word	0x00001e55

0000ab74 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    ab74:	b580      	push	{r7, lr}
    ab76:	b08c      	sub	sp, #48	; 0x30
    ab78:	af00      	add	r7, sp, #0
    ab7a:	60f8      	str	r0, [r7, #12]
    ab7c:	607b      	str	r3, [r7, #4]
    ab7e:	460b      	mov	r3, r1
    ab80:	72fb      	strb	r3, [r7, #11]
    ab82:	4613      	mov	r3, r2
    ab84:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    ab86:	68fb      	ldr	r3, [r7, #12]
    ab88:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    ab8a:	68fb      	ldr	r3, [r7, #12]
    ab8c:	681b      	ldr	r3, [r3, #0]
    ab8e:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    ab90:	f107 0310 	add.w	r3, r7, #16
    ab94:	2200      	movs	r2, #0
    ab96:	601a      	str	r2, [r3, #0]
    ab98:	605a      	str	r2, [r3, #4]
    ab9a:	609a      	str	r2, [r3, #8]
    ab9c:	60da      	str	r2, [r3, #12]
    ab9e:	611a      	str	r2, [r3, #16]
    aba0:	615a      	str	r2, [r3, #20]
    aba2:	7afb      	ldrb	r3, [r7, #11]
    aba4:	f003 0307 	and.w	r3, r3, #7
    aba8:	b2da      	uxtb	r2, r3
    abaa:	7c3b      	ldrb	r3, [r7, #16]
    abac:	f362 0302 	bfi	r3, r2, #0, #3
    abb0:	743b      	strb	r3, [r7, #16]
    abb2:	7c3b      	ldrb	r3, [r7, #16]
    abb4:	f043 0310 	orr.w	r3, r3, #16
    abb8:	743b      	strb	r3, [r7, #16]
    abba:	7c3b      	ldrb	r3, [r7, #16]
    abbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    abc0:	743b      	strb	r3, [r7, #16]
    abc2:	7c7b      	ldrb	r3, [r7, #17]
    abc4:	2202      	movs	r2, #2
    abc6:	f362 1305 	bfi	r3, r2, #4, #2
    abca:	747b      	strb	r3, [r7, #17]
    abcc:	7abb      	ldrb	r3, [r7, #10]
    abce:	753b      	strb	r3, [r7, #20]
    abd0:	2301      	movs	r3, #1
    abd2:	61fb      	str	r3, [r7, #28]
    abd4:	1d3b      	adds	r3, r7, #4
    abd6:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    abd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    abda:	7b5b      	ldrb	r3, [r3, #13]
    abdc:	2b00      	cmp	r3, #0
    abde:	d003      	beq.n	abe8 <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    abe0:	2100      	movs	r1, #0
    abe2:	68f8      	ldr	r0, [r7, #12]
    abe4:	4b09      	ldr	r3, [pc, #36]	; (ac0c <n25q256a_write_reg+0x98>)
    abe6:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    abe8:	f107 0310 	add.w	r3, r7, #16
    abec:	4619      	mov	r1, r3
    abee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    abf0:	4b07      	ldr	r3, [pc, #28]	; (ac10 <n25q256a_write_reg+0x9c>)
    abf2:	4798      	blx	r3
	if (n25q->xip_mode) {
    abf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    abf6:	7b5b      	ldrb	r3, [r3, #13]
    abf8:	2b00      	cmp	r3, #0
    abfa:	d003      	beq.n	ac04 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    abfc:	2101      	movs	r1, #1
    abfe:	68f8      	ldr	r0, [r7, #12]
    ac00:	4b02      	ldr	r3, [pc, #8]	; (ac0c <n25q256a_write_reg+0x98>)
    ac02:	4798      	blx	r3
	}
}
    ac04:	bf00      	nop
    ac06:	3730      	adds	r7, #48	; 0x30
    ac08:	46bd      	mov	sp, r7
    ac0a:	bd80      	pop	{r7, pc}
    ac0c:	0000aa0d 	.word	0x0000aa0d
    ac10:	00001e55 	.word	0x00001e55

0000ac14 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    ac14:	b580      	push	{r7, lr}
    ac16:	b090      	sub	sp, #64	; 0x40
    ac18:	af00      	add	r7, sp, #0
    ac1a:	6078      	str	r0, [r7, #4]
    ac1c:	460b      	mov	r3, r1
    ac1e:	70fb      	strb	r3, [r7, #3]
    ac20:	4613      	mov	r3, r2
    ac22:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    ac24:	687b      	ldr	r3, [r7, #4]
    ac26:	681b      	ldr	r3, [r3, #0]
    ac28:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    ac2a:	78bb      	ldrb	r3, [r7, #2]
    ac2c:	2b00      	cmp	r3, #0
    ac2e:	d001      	beq.n	ac34 <n25q256a_write_enable+0x20>
    ac30:	2306      	movs	r3, #6
    ac32:	e000      	b.n	ac36 <n25q256a_write_enable+0x22>
    ac34:	2304      	movs	r3, #4
    ac36:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    ac3a:	f107 0320 	add.w	r3, r7, #32
    ac3e:	2200      	movs	r2, #0
    ac40:	601a      	str	r2, [r3, #0]
    ac42:	605a      	str	r2, [r3, #4]
    ac44:	609a      	str	r2, [r3, #8]
    ac46:	60da      	str	r2, [r3, #12]
    ac48:	611a      	str	r2, [r3, #16]
    ac4a:	615a      	str	r2, [r3, #20]
    ac4c:	78fb      	ldrb	r3, [r7, #3]
    ac4e:	f003 0307 	and.w	r3, r3, #7
    ac52:	b2da      	uxtb	r2, r3
    ac54:	f897 3020 	ldrb.w	r3, [r7, #32]
    ac58:	f362 0302 	bfi	r3, r2, #0, #3
    ac5c:	f887 3020 	strb.w	r3, [r7, #32]
    ac60:	f897 3020 	ldrb.w	r3, [r7, #32]
    ac64:	f043 0310 	orr.w	r3, r3, #16
    ac68:	f887 3020 	strb.w	r3, [r7, #32]
    ac6c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    ac70:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    ac74:	f107 0308 	add.w	r3, r7, #8
    ac78:	2200      	movs	r2, #0
    ac7a:	601a      	str	r2, [r3, #0]
    ac7c:	605a      	str	r2, [r3, #4]
    ac7e:	609a      	str	r2, [r3, #8]
    ac80:	60da      	str	r2, [r3, #12]
    ac82:	611a      	str	r2, [r3, #16]
    ac84:	615a      	str	r2, [r3, #20]
    ac86:	78fb      	ldrb	r3, [r7, #3]
    ac88:	f003 0307 	and.w	r3, r3, #7
    ac8c:	b2da      	uxtb	r2, r3
    ac8e:	7a3b      	ldrb	r3, [r7, #8]
    ac90:	f362 0302 	bfi	r3, r2, #0, #3
    ac94:	723b      	strb	r3, [r7, #8]
    ac96:	7a3b      	ldrb	r3, [r7, #8]
    ac98:	f043 0310 	orr.w	r3, r3, #16
    ac9c:	723b      	strb	r3, [r7, #8]
    ac9e:	7a3b      	ldrb	r3, [r7, #8]
    aca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    aca4:	723b      	strb	r3, [r7, #8]
    aca6:	2305      	movs	r3, #5
    aca8:	733b      	strb	r3, [r7, #12]
    acaa:	2301      	movs	r3, #1
    acac:	617b      	str	r3, [r7, #20]
    acae:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    acb2:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    acb4:	f107 0320 	add.w	r3, r7, #32
    acb8:	4619      	mov	r1, r3
    acba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    acbc:	4b08      	ldr	r3, [pc, #32]	; (ace0 <n25q256a_write_enable+0xcc>)
    acbe:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    acc0:	f107 0308 	add.w	r3, r7, #8
    acc4:	4619      	mov	r1, r3
    acc6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    acc8:	4b05      	ldr	r3, [pc, #20]	; (ace0 <n25q256a_write_enable+0xcc>)
    acca:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    accc:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    acd0:	f003 0302 	and.w	r3, r3, #2
    acd4:	2b00      	cmp	r3, #0
    acd6:	d0ed      	beq.n	acb4 <n25q256a_write_enable+0xa0>
}
    acd8:	bf00      	nop
    acda:	3740      	adds	r7, #64	; 0x40
    acdc:	46bd      	mov	sp, r7
    acde:	bd80      	pop	{r7, pc}
    ace0:	00001e55 	.word	0x00001e55

0000ace4 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    ace4:	b590      	push	{r4, r7, lr}
    ace6:	b087      	sub	sp, #28
    ace8:	af00      	add	r7, sp, #0
    acea:	6078      	str	r0, [r7, #4]
    acec:	460b      	mov	r3, r1
    acee:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    acf0:	687b      	ldr	r3, [r7, #4]
    acf2:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    acf4:	68fb      	ldr	r3, [r7, #12]
    acf6:	7b1b      	ldrb	r3, [r3, #12]
    acf8:	2b00      	cmp	r3, #0
    acfa:	d001      	beq.n	ad00 <n25q256a_switch_mode+0x1c>
    acfc:	2306      	movs	r3, #6
    acfe:	e000      	b.n	ad02 <n25q256a_switch_mode+0x1e>
    ad00:	2300      	movs	r3, #0
    ad02:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    ad04:	7afb      	ldrb	r3, [r7, #11]
    ad06:	2265      	movs	r2, #101	; 0x65
    ad08:	4619      	mov	r1, r3
    ad0a:	6878      	ldr	r0, [r7, #4]
    ad0c:	4b25      	ldr	r3, [pc, #148]	; (ada4 <n25q256a_switch_mode+0xc0>)
    ad0e:	4798      	blx	r3
    ad10:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    ad12:	2300      	movs	r3, #0
    ad14:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    ad16:	68fb      	ldr	r3, [r7, #12]
    ad18:	7b1b      	ldrb	r3, [r3, #12]
    ad1a:	78fa      	ldrb	r2, [r7, #3]
    ad1c:	429a      	cmp	r2, r3
    ad1e:	d03d      	beq.n	ad9c <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    ad20:	78fb      	ldrb	r3, [r7, #3]
    ad22:	2b00      	cmp	r3, #0
    ad24:	d00b      	beq.n	ad3e <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    ad26:	697b      	ldr	r3, [r7, #20]
    ad28:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ad2c:	2b00      	cmp	r3, #0
    ad2e:	d011      	beq.n	ad54 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    ad30:	697b      	ldr	r3, [r7, #20]
    ad32:	f003 031f 	and.w	r3, r3, #31
    ad36:	617b      	str	r3, [r7, #20]
			modify = 1;
    ad38:	2301      	movs	r3, #1
    ad3a:	74fb      	strb	r3, [r7, #19]
    ad3c:	e00a      	b.n	ad54 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    ad3e:	697b      	ldr	r3, [r7, #20]
    ad40:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ad44:	2b00      	cmp	r3, #0
    ad46:	d105      	bne.n	ad54 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    ad48:	697b      	ldr	r3, [r7, #20]
    ad4a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    ad4e:	617b      	str	r3, [r7, #20]
			modify = 1;
    ad50:	2301      	movs	r3, #1
    ad52:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    ad54:	7cfb      	ldrb	r3, [r7, #19]
    ad56:	2b00      	cmp	r3, #0
    ad58:	d021      	beq.n	ad9e <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    ad5a:	68fb      	ldr	r3, [r7, #12]
    ad5c:	78fa      	ldrb	r2, [r7, #3]
    ad5e:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    ad60:	7afb      	ldrb	r3, [r7, #11]
    ad62:	2201      	movs	r2, #1
    ad64:	4619      	mov	r1, r3
    ad66:	6878      	ldr	r0, [r7, #4]
    ad68:	4b0f      	ldr	r3, [pc, #60]	; (ada8 <n25q256a_switch_mode+0xc4>)
    ad6a:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    ad6c:	7af9      	ldrb	r1, [r7, #11]
    ad6e:	697b      	ldr	r3, [r7, #20]
    ad70:	2261      	movs	r2, #97	; 0x61
    ad72:	6878      	ldr	r0, [r7, #4]
    ad74:	4c0d      	ldr	r4, [pc, #52]	; (adac <n25q256a_switch_mode+0xc8>)
    ad76:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    ad78:	78fb      	ldrb	r3, [r7, #3]
    ad7a:	2b00      	cmp	r3, #0
    ad7c:	d001      	beq.n	ad82 <n25q256a_switch_mode+0x9e>
    ad7e:	2306      	movs	r3, #6
    ad80:	e000      	b.n	ad84 <n25q256a_switch_mode+0xa0>
    ad82:	2300      	movs	r3, #0
    ad84:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    ad86:	7afb      	ldrb	r3, [r7, #11]
    ad88:	2265      	movs	r2, #101	; 0x65
    ad8a:	4619      	mov	r1, r3
    ad8c:	6878      	ldr	r0, [r7, #4]
    ad8e:	4b05      	ldr	r3, [pc, #20]	; (ada4 <n25q256a_switch_mode+0xc0>)
    ad90:	4798      	blx	r3
    ad92:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    ad94:	68fb      	ldr	r3, [r7, #12]
    ad96:	78fa      	ldrb	r2, [r7, #3]
    ad98:	731a      	strb	r2, [r3, #12]
    ad9a:	e000      	b.n	ad9e <n25q256a_switch_mode+0xba>
		return;
    ad9c:	bf00      	nop
	}
}
    ad9e:	371c      	adds	r7, #28
    ada0:	46bd      	mov	sp, r7
    ada2:	bd90      	pop	{r4, r7, pc}
    ada4:	0000aad9 	.word	0x0000aad9
    ada8:	0000ac15 	.word	0x0000ac15
    adac:	0000ab75 	.word	0x0000ab75

0000adb0 <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    adb0:	b580      	push	{r7, lr}
    adb2:	b086      	sub	sp, #24
    adb4:	af00      	add	r7, sp, #0
    adb6:	60f8      	str	r0, [r7, #12]
    adb8:	60b9      	str	r1, [r7, #8]
    adba:	607a      	str	r2, [r7, #4]
    adbc:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    adbe:	68fb      	ldr	r3, [r7, #12]
    adc0:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    adc2:	4a0c      	ldr	r2, [pc, #48]	; (adf4 <n25q256a_construct+0x44>)
    adc4:	68b9      	ldr	r1, [r7, #8]
    adc6:	68f8      	ldr	r0, [r7, #12]
    adc8:	4b0b      	ldr	r3, [pc, #44]	; (adf8 <n25q256a_construct+0x48>)
    adca:	4798      	blx	r3
	n25q->quad_mode    = 0;
    adcc:	697b      	ldr	r3, [r7, #20]
    adce:	2200      	movs	r2, #0
    add0:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    add2:	697b      	ldr	r3, [r7, #20]
    add4:	2200      	movs	r2, #0
    add6:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    add8:	697b      	ldr	r3, [r7, #20]
    adda:	687a      	ldr	r2, [r7, #4]
    addc:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    adde:	78fb      	ldrb	r3, [r7, #3]
    ade0:	4619      	mov	r1, r3
    ade2:	68f8      	ldr	r0, [r7, #12]
    ade4:	4b05      	ldr	r3, [pc, #20]	; (adfc <n25q256a_construct+0x4c>)
    ade6:	4798      	blx	r3
	return me;
    ade8:	68fb      	ldr	r3, [r7, #12]
}
    adea:	4618      	mov	r0, r3
    adec:	3718      	adds	r7, #24
    adee:	46bd      	mov	sp, r7
    adf0:	bd80      	pop	{r7, pc}
    adf2:	bf00      	nop
    adf4:	00013290 	.word	0x00013290
    adf8:	0000b28d 	.word	0x0000b28d
    adfc:	0000ace5 	.word	0x0000ace5

0000ae00 <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    ae00:	b580      	push	{r7, lr}
    ae02:	b08c      	sub	sp, #48	; 0x30
    ae04:	af00      	add	r7, sp, #0
    ae06:	60f8      	str	r0, [r7, #12]
    ae08:	60b9      	str	r1, [r7, #8]
    ae0a:	607a      	str	r2, [r7, #4]
    ae0c:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    ae0e:	68fb      	ldr	r3, [r7, #12]
    ae10:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    ae12:	68fb      	ldr	r3, [r7, #12]
    ae14:	681b      	ldr	r3, [r3, #0]
    ae16:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    ae18:	f107 0310 	add.w	r3, r7, #16
    ae1c:	2200      	movs	r2, #0
    ae1e:	601a      	str	r2, [r3, #0]
    ae20:	605a      	str	r2, [r3, #4]
    ae22:	609a      	str	r2, [r3, #8]
    ae24:	60da      	str	r2, [r3, #12]
    ae26:	611a      	str	r2, [r3, #16]
    ae28:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    ae2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ae2c:	7b1b      	ldrb	r3, [r3, #12]
    ae2e:	2b00      	cmp	r3, #0
    ae30:	d001      	beq.n	ae36 <n25q256a_read+0x36>
    ae32:	2206      	movs	r2, #6
    ae34:	e000      	b.n	ae38 <n25q256a_read+0x38>
    ae36:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    ae38:	7c3b      	ldrb	r3, [r7, #16]
    ae3a:	f362 0302 	bfi	r3, r2, #0, #3
    ae3e:	743b      	strb	r3, [r7, #16]
    ae40:	7c3b      	ldrb	r3, [r7, #16]
    ae42:	f043 0310 	orr.w	r3, r3, #16
    ae46:	743b      	strb	r3, [r7, #16]
    ae48:	7c3b      	ldrb	r3, [r7, #16]
    ae4a:	f043 0320 	orr.w	r3, r3, #32
    ae4e:	743b      	strb	r3, [r7, #16]
    ae50:	7c3b      	ldrb	r3, [r7, #16]
    ae52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ae56:	743b      	strb	r3, [r7, #16]
    ae58:	7c7b      	ldrb	r3, [r7, #17]
    ae5a:	2201      	movs	r2, #1
    ae5c:	f362 1305 	bfi	r3, r2, #4, #2
    ae60:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    ae62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ae64:	7b1b      	ldrb	r3, [r3, #12]
    ae66:	2b00      	cmp	r3, #0
    ae68:	d001      	beq.n	ae6e <n25q256a_read+0x6e>
    ae6a:	220a      	movs	r2, #10
    ae6c:	e000      	b.n	ae70 <n25q256a_read+0x70>
    ae6e:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    ae70:	7cbb      	ldrb	r3, [r7, #18]
    ae72:	f362 0304 	bfi	r3, r2, #0, #5
    ae76:	74bb      	strb	r3, [r7, #18]
    ae78:	230b      	movs	r3, #11
    ae7a:	753b      	strb	r3, [r7, #20]
    ae7c:	687b      	ldr	r3, [r7, #4]
    ae7e:	61bb      	str	r3, [r7, #24]
    ae80:	683b      	ldr	r3, [r7, #0]
    ae82:	61fb      	str	r3, [r7, #28]
    ae84:	68bb      	ldr	r3, [r7, #8]
    ae86:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    ae88:	f107 0310 	add.w	r3, r7, #16
    ae8c:	4619      	mov	r1, r3
    ae8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ae90:	4b03      	ldr	r3, [pc, #12]	; (aea0 <n25q256a_read+0xa0>)
    ae92:	4798      	blx	r3
	return ERR_NONE;
    ae94:	2300      	movs	r3, #0
}
    ae96:	4618      	mov	r0, r3
    ae98:	3730      	adds	r7, #48	; 0x30
    ae9a:	46bd      	mov	sp, r7
    ae9c:	bd80      	pop	{r7, pc}
    ae9e:	bf00      	nop
    aea0:	00001e55 	.word	0x00001e55

0000aea4 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    aea4:	b580      	push	{r7, lr}
    aea6:	b08c      	sub	sp, #48	; 0x30
    aea8:	af00      	add	r7, sp, #0
    aeaa:	60f8      	str	r0, [r7, #12]
    aeac:	60b9      	str	r1, [r7, #8]
    aeae:	607a      	str	r2, [r7, #4]
    aeb0:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    aeb2:	68fb      	ldr	r3, [r7, #12]
    aeb4:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    aeb6:	68fb      	ldr	r3, [r7, #12]
    aeb8:	681b      	ldr	r3, [r3, #0]
    aeba:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    aebc:	f107 0310 	add.w	r3, r7, #16
    aec0:	2200      	movs	r2, #0
    aec2:	601a      	str	r2, [r3, #0]
    aec4:	605a      	str	r2, [r3, #4]
    aec6:	609a      	str	r2, [r3, #8]
    aec8:	60da      	str	r2, [r3, #12]
    aeca:	611a      	str	r2, [r3, #16]
    aecc:	615a      	str	r2, [r3, #20]
    aece:	7c3b      	ldrb	r3, [r7, #16]
    aed0:	f043 0310 	orr.w	r3, r3, #16
    aed4:	743b      	strb	r3, [r7, #16]
    aed6:	7c3b      	ldrb	r3, [r7, #16]
    aed8:	f043 0320 	orr.w	r3, r3, #32
    aedc:	743b      	strb	r3, [r7, #16]
    aede:	7c3b      	ldrb	r3, [r7, #16]
    aee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    aee4:	743b      	strb	r3, [r7, #16]
    aee6:	7c7b      	ldrb	r3, [r7, #17]
    aee8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    aeec:	747b      	strb	r3, [r7, #17]
    aeee:	2302      	movs	r3, #2
    aef0:	753b      	strb	r3, [r7, #20]
    aef2:	687b      	ldr	r3, [r7, #4]
    aef4:	61bb      	str	r3, [r7, #24]
    aef6:	683b      	ldr	r3, [r7, #0]
    aef8:	61fb      	str	r3, [r7, #28]
    aefa:	68bb      	ldr	r3, [r7, #8]
    aefc:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    aefe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    af00:	7b1b      	ldrb	r3, [r3, #12]
    af02:	2b00      	cmp	r3, #0
    af04:	d001      	beq.n	af0a <n25q256a_write+0x66>
    af06:	2206      	movs	r2, #6
    af08:	e000      	b.n	af0c <n25q256a_write+0x68>
    af0a:	2200      	movs	r2, #0
    af0c:	7c3b      	ldrb	r3, [r7, #16]
    af0e:	f362 0302 	bfi	r3, r2, #0, #3
    af12:	743b      	strb	r3, [r7, #16]
	while (length) {
    af14:	e035      	b.n	af82 <n25q256a_write+0xde>
		cmd.address = address;
    af16:	687b      	ldr	r3, [r7, #4]
    af18:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    af1a:	683b      	ldr	r3, [r7, #0]
    af1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    af20:	d802      	bhi.n	af28 <n25q256a_write+0x84>
			cmd.buf_len = length;
    af22:	683b      	ldr	r3, [r7, #0]
    af24:	61fb      	str	r3, [r7, #28]
    af26:	e002      	b.n	af2e <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    af28:	f44f 7380 	mov.w	r3, #256	; 0x100
    af2c:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    af2e:	7c3b      	ldrb	r3, [r7, #16]
    af30:	f3c3 0302 	ubfx	r3, r3, #0, #3
    af34:	b2db      	uxtb	r3, r3
    af36:	2201      	movs	r2, #1
    af38:	4619      	mov	r1, r3
    af3a:	68f8      	ldr	r0, [r7, #12]
    af3c:	4b19      	ldr	r3, [pc, #100]	; (afa4 <n25q256a_write+0x100>)
    af3e:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    af40:	f107 0310 	add.w	r3, r7, #16
    af44:	4619      	mov	r1, r3
    af46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    af48:	4b17      	ldr	r3, [pc, #92]	; (afa8 <n25q256a_write+0x104>)
    af4a:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    af4c:	bf00      	nop
    af4e:	7c3b      	ldrb	r3, [r7, #16]
    af50:	f3c3 0302 	ubfx	r3, r3, #0, #3
    af54:	b2db      	uxtb	r3, r3
    af56:	2270      	movs	r2, #112	; 0x70
    af58:	4619      	mov	r1, r3
    af5a:	68f8      	ldr	r0, [r7, #12]
    af5c:	4b13      	ldr	r3, [pc, #76]	; (afac <n25q256a_write+0x108>)
    af5e:	4798      	blx	r3
    af60:	4603      	mov	r3, r0
    af62:	f003 0380 	and.w	r3, r3, #128	; 0x80
    af66:	2b00      	cmp	r3, #0
    af68:	d0f1      	beq.n	af4e <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    af6a:	6a3a      	ldr	r2, [r7, #32]
    af6c:	69fb      	ldr	r3, [r7, #28]
    af6e:	4413      	add	r3, r2
    af70:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    af72:	69fb      	ldr	r3, [r7, #28]
    af74:	683a      	ldr	r2, [r7, #0]
    af76:	1ad3      	subs	r3, r2, r3
    af78:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    af7a:	69fb      	ldr	r3, [r7, #28]
    af7c:	687a      	ldr	r2, [r7, #4]
    af7e:	4413      	add	r3, r2
    af80:	607b      	str	r3, [r7, #4]
	while (length) {
    af82:	683b      	ldr	r3, [r7, #0]
    af84:	2b00      	cmp	r3, #0
    af86:	d1c6      	bne.n	af16 <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    af88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    af8a:	7b5b      	ldrb	r3, [r3, #13]
    af8c:	2b00      	cmp	r3, #0
    af8e:	d003      	beq.n	af98 <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    af90:	2101      	movs	r1, #1
    af92:	68f8      	ldr	r0, [r7, #12]
    af94:	4b06      	ldr	r3, [pc, #24]	; (afb0 <n25q256a_write+0x10c>)
    af96:	4798      	blx	r3
	}
	return ERR_NONE;
    af98:	2300      	movs	r3, #0
}
    af9a:	4618      	mov	r0, r3
    af9c:	3730      	adds	r7, #48	; 0x30
    af9e:	46bd      	mov	sp, r7
    afa0:	bd80      	pop	{r7, pc}
    afa2:	bf00      	nop
    afa4:	0000ac15 	.word	0x0000ac15
    afa8:	00001e55 	.word	0x00001e55
    afac:	0000aad9 	.word	0x0000aad9
    afb0:	0000aa0d 	.word	0x0000aa0d

0000afb4 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    afb4:	b580      	push	{r7, lr}
    afb6:	b090      	sub	sp, #64	; 0x40
    afb8:	af00      	add	r7, sp, #0
    afba:	60f8      	str	r0, [r7, #12]
    afbc:	60b9      	str	r1, [r7, #8]
    afbe:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    afc0:	68fb      	ldr	r3, [r7, #12]
    afc2:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    afc4:	68fb      	ldr	r3, [r7, #12]
    afc6:	681b      	ldr	r3, [r3, #0]
    afc8:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    afca:	f107 0314 	add.w	r3, r7, #20
    afce:	2200      	movs	r2, #0
    afd0:	601a      	str	r2, [r3, #0]
    afd2:	605a      	str	r2, [r3, #4]
    afd4:	609a      	str	r2, [r3, #8]
    afd6:	60da      	str	r2, [r3, #12]
    afd8:	611a      	str	r2, [r3, #16]
    afda:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    afdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    afde:	7b1b      	ldrb	r3, [r3, #12]
    afe0:	2b00      	cmp	r3, #0
    afe2:	d001      	beq.n	afe8 <n25q256a_erase+0x34>
    afe4:	2206      	movs	r2, #6
    afe6:	e000      	b.n	afea <n25q256a_erase+0x36>
    afe8:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    afea:	7d3b      	ldrb	r3, [r7, #20]
    afec:	f362 0302 	bfi	r3, r2, #0, #3
    aff0:	753b      	strb	r3, [r7, #20]
    aff2:	7d3b      	ldrb	r3, [r7, #20]
    aff4:	f043 0310 	orr.w	r3, r3, #16
    aff8:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    affa:	687b      	ldr	r3, [r7, #4]
    affc:	4a56      	ldr	r2, [pc, #344]	; (b158 <n25q256a_erase+0x1a4>)
    affe:	4293      	cmp	r3, r2
    b000:	bf94      	ite	ls
    b002:	2301      	movls	r3, #1
    b004:	2300      	movhi	r3, #0
    b006:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    b008:	7d3b      	ldrb	r3, [r7, #20]
    b00a:	f362 1345 	bfi	r3, r2, #5, #1
    b00e:	753b      	strb	r3, [r7, #20]
    b010:	7d7b      	ldrb	r3, [r7, #21]
    b012:	2202      	movs	r2, #2
    b014:	f362 1305 	bfi	r3, r2, #4, #2
    b018:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    b01a:	68bb      	ldr	r3, [r7, #8]
    b01c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    b01e:	687b      	ldr	r3, [r7, #4]
    b020:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    b022:	2300      	movs	r3, #0
    b024:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    b026:	687b      	ldr	r3, [r7, #4]
    b028:	f3c3 030b 	ubfx	r3, r3, #0, #12
    b02c:	2b00      	cmp	r3, #0
    b02e:	d104      	bne.n	b03a <n25q256a_erase+0x86>
    b030:	68bb      	ldr	r3, [r7, #8]
    b032:	f3c3 030b 	ubfx	r3, r3, #0, #12
    b036:	2b00      	cmp	r3, #0
    b038:	d002      	beq.n	b040 <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    b03a:	f06f 030c 	mvn.w	r3, #12
    b03e:	e087      	b.n	b150 <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    b040:	687b      	ldr	r3, [r7, #4]
    b042:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    b046:	d368      	bcc.n	b11a <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    b048:	23c7      	movs	r3, #199	; 0xc7
    b04a:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b04c:	7d3b      	ldrb	r3, [r7, #20]
    b04e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b052:	b2db      	uxtb	r3, r3
    b054:	2201      	movs	r2, #1
    b056:	4619      	mov	r1, r3
    b058:	68f8      	ldr	r0, [r7, #12]
    b05a:	4b40      	ldr	r3, [pc, #256]	; (b15c <n25q256a_erase+0x1a8>)
    b05c:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    b05e:	f107 0314 	add.w	r3, r7, #20
    b062:	4619      	mov	r1, r3
    b064:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b066:	4b3e      	ldr	r3, [pc, #248]	; (b160 <n25q256a_erase+0x1ac>)
    b068:	4798      	blx	r3
    b06a:	e059      	b.n	b120 <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    b06c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b06e:	b29b      	uxth	r3, r3
    b070:	2b00      	cmp	r3, #0
    b072:	d11f      	bne.n	b0b4 <n25q256a_erase+0x100>
    b074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b076:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    b07a:	d31b      	bcc.n	b0b4 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    b07c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b07e:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    b080:	23d8      	movs	r3, #216	; 0xd8
    b082:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b084:	7d3b      	ldrb	r3, [r7, #20]
    b086:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b08a:	b2db      	uxtb	r3, r3
    b08c:	2201      	movs	r2, #1
    b08e:	4619      	mov	r1, r3
    b090:	68f8      	ldr	r0, [r7, #12]
    b092:	4b32      	ldr	r3, [pc, #200]	; (b15c <n25q256a_erase+0x1a8>)
    b094:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    b096:	f107 0314 	add.w	r3, r7, #20
    b09a:	4619      	mov	r1, r3
    b09c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b09e:	4b30      	ldr	r3, [pc, #192]	; (b160 <n25q256a_erase+0x1ac>)
    b0a0:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    b0a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b0a4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    b0a8:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    b0aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b0ac:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    b0b0:	63bb      	str	r3, [r7, #56]	; 0x38
    b0b2:	e023      	b.n	b0fc <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    b0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b0b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    b0ba:	d31b      	bcc.n	b0f4 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    b0bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b0be:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    b0c0:	2320      	movs	r3, #32
    b0c2:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b0c4:	7d3b      	ldrb	r3, [r7, #20]
    b0c6:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b0ca:	b2db      	uxtb	r3, r3
    b0cc:	2201      	movs	r2, #1
    b0ce:	4619      	mov	r1, r3
    b0d0:	68f8      	ldr	r0, [r7, #12]
    b0d2:	4b22      	ldr	r3, [pc, #136]	; (b15c <n25q256a_erase+0x1a8>)
    b0d4:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    b0d6:	f107 0314 	add.w	r3, r7, #20
    b0da:	4619      	mov	r1, r3
    b0dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b0de:	4b20      	ldr	r3, [pc, #128]	; (b160 <n25q256a_erase+0x1ac>)
    b0e0:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    b0e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b0e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    b0e8:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    b0ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b0ec:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    b0f0:	63bb      	str	r3, [r7, #56]	; 0x38
    b0f2:	e003      	b.n	b0fc <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    b0f4:	f06f 030c 	mvn.w	r3, #12
    b0f8:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    b0fa:	e011      	b.n	b120 <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b0fc:	bf00      	nop
    b0fe:	7d3b      	ldrb	r3, [r7, #20]
    b100:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b104:	b2db      	uxtb	r3, r3
    b106:	2270      	movs	r2, #112	; 0x70
    b108:	4619      	mov	r1, r3
    b10a:	68f8      	ldr	r0, [r7, #12]
    b10c:	4b15      	ldr	r3, [pc, #84]	; (b164 <n25q256a_erase+0x1b0>)
    b10e:	4798      	blx	r3
    b110:	4603      	mov	r3, r0
    b112:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b116:	2b00      	cmp	r3, #0
    b118:	d0f1      	beq.n	b0fe <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    b11a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b11c:	2b00      	cmp	r3, #0
    b11e:	d1a5      	bne.n	b06c <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b120:	bf00      	nop
    b122:	7d3b      	ldrb	r3, [r7, #20]
    b124:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b128:	b2db      	uxtb	r3, r3
    b12a:	2270      	movs	r2, #112	; 0x70
    b12c:	4619      	mov	r1, r3
    b12e:	68f8      	ldr	r0, [r7, #12]
    b130:	4b0c      	ldr	r3, [pc, #48]	; (b164 <n25q256a_erase+0x1b0>)
    b132:	4798      	blx	r3
    b134:	4603      	mov	r3, r0
    b136:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b13a:	2b00      	cmp	r3, #0
    b13c:	d0f1      	beq.n	b122 <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    b13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b140:	7b5b      	ldrb	r3, [r3, #13]
    b142:	2b00      	cmp	r3, #0
    b144:	d003      	beq.n	b14e <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    b146:	2101      	movs	r1, #1
    b148:	68f8      	ldr	r0, [r7, #12]
    b14a:	4b07      	ldr	r3, [pc, #28]	; (b168 <n25q256a_erase+0x1b4>)
    b14c:	4798      	blx	r3
	}
	return rc;
    b14e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    b150:	4618      	mov	r0, r3
    b152:	3740      	adds	r7, #64	; 0x40
    b154:	46bd      	mov	sp, r7
    b156:	bd80      	pop	{r7, pc}
    b158:	001fffff 	.word	0x001fffff
    b15c:	0000ac15 	.word	0x0000ac15
    b160:	00001e55 	.word	0x00001e55
    b164:	0000aad9 	.word	0x0000aad9
    b168:	0000aa0d 	.word	0x0000aa0d

0000b16c <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    b16c:	b590      	push	{r4, r7, lr}
    b16e:	b085      	sub	sp, #20
    b170:	af00      	add	r7, sp, #0
    b172:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    b174:	687b      	ldr	r3, [r7, #4]
    b176:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b178:	68fb      	ldr	r3, [r7, #12]
    b17a:	7b1b      	ldrb	r3, [r3, #12]
    b17c:	2b00      	cmp	r3, #0
    b17e:	d001      	beq.n	b184 <n25q256a_enable_xip+0x18>
    b180:	2306      	movs	r3, #6
    b182:	e000      	b.n	b186 <n25q256a_enable_xip+0x1a>
    b184:	2300      	movs	r3, #0
    b186:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    b188:	68fb      	ldr	r3, [r7, #12]
    b18a:	7b5b      	ldrb	r3, [r3, #13]
    b18c:	2b00      	cmp	r3, #0
    b18e:	d129      	bne.n	b1e4 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    b190:	7afb      	ldrb	r3, [r7, #11]
    b192:	2285      	movs	r2, #133	; 0x85
    b194:	4619      	mov	r1, r3
    b196:	6878      	ldr	r0, [r7, #4]
    b198:	4b15      	ldr	r3, [pc, #84]	; (b1f0 <n25q256a_enable_xip+0x84>)
    b19a:	4798      	blx	r3
    b19c:	4603      	mov	r3, r0
    b19e:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    b1a0:	7abb      	ldrb	r3, [r7, #10]
    b1a2:	f003 0308 	and.w	r3, r3, #8
    b1a6:	2b00      	cmp	r3, #0
    b1a8:	d015      	beq.n	b1d6 <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    b1aa:	7abb      	ldrb	r3, [r7, #10]
    b1ac:	f023 0308 	bic.w	r3, r3, #8
    b1b0:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    b1b2:	7abb      	ldrb	r3, [r7, #10]
    b1b4:	7af9      	ldrb	r1, [r7, #11]
    b1b6:	2281      	movs	r2, #129	; 0x81
    b1b8:	6878      	ldr	r0, [r7, #4]
    b1ba:	4c0e      	ldr	r4, [pc, #56]	; (b1f4 <n25q256a_enable_xip+0x88>)
    b1bc:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b1be:	bf00      	nop
    b1c0:	7afb      	ldrb	r3, [r7, #11]
    b1c2:	2270      	movs	r2, #112	; 0x70
    b1c4:	4619      	mov	r1, r3
    b1c6:	6878      	ldr	r0, [r7, #4]
    b1c8:	4b09      	ldr	r3, [pc, #36]	; (b1f0 <n25q256a_enable_xip+0x84>)
    b1ca:	4798      	blx	r3
    b1cc:	4603      	mov	r3, r0
    b1ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b1d2:	2b00      	cmp	r3, #0
    b1d4:	d0f4      	beq.n	b1c0 <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    b1d6:	68fb      	ldr	r3, [r7, #12]
    b1d8:	2201      	movs	r2, #1
    b1da:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    b1dc:	2101      	movs	r1, #1
    b1de:	6878      	ldr	r0, [r7, #4]
    b1e0:	4b05      	ldr	r3, [pc, #20]	; (b1f8 <n25q256a_enable_xip+0x8c>)
    b1e2:	4798      	blx	r3
	}
	return ERR_NONE;
    b1e4:	2300      	movs	r3, #0
}
    b1e6:	4618      	mov	r0, r3
    b1e8:	3714      	adds	r7, #20
    b1ea:	46bd      	mov	sp, r7
    b1ec:	bd90      	pop	{r4, r7, pc}
    b1ee:	bf00      	nop
    b1f0:	0000aad9 	.word	0x0000aad9
    b1f4:	0000ab75 	.word	0x0000ab75
    b1f8:	0000aa0d 	.word	0x0000aa0d

0000b1fc <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    b1fc:	b580      	push	{r7, lr}
    b1fe:	b086      	sub	sp, #24
    b200:	af00      	add	r7, sp, #0
    b202:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b204:	687b      	ldr	r3, [r7, #4]
    b206:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b208:	687b      	ldr	r3, [r7, #4]
    b20a:	681b      	ldr	r3, [r3, #0]
    b20c:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b20e:	697b      	ldr	r3, [r7, #20]
    b210:	7b1b      	ldrb	r3, [r3, #12]
    b212:	2b00      	cmp	r3, #0
    b214:	d001      	beq.n	b21a <n25q256a_disable_xip+0x1e>
    b216:	2306      	movs	r3, #6
    b218:	e000      	b.n	b21c <n25q256a_disable_xip+0x20>
    b21a:	2300      	movs	r3, #0
    b21c:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    b21e:	2100      	movs	r1, #0
    b220:	6878      	ldr	r0, [r7, #4]
    b222:	4b15      	ldr	r3, [pc, #84]	; (b278 <n25q256a_disable_xip+0x7c>)
    b224:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    b226:	7bfb      	ldrb	r3, [r7, #15]
    b228:	2285      	movs	r2, #133	; 0x85
    b22a:	4619      	mov	r1, r3
    b22c:	6878      	ldr	r0, [r7, #4]
    b22e:	4b13      	ldr	r3, [pc, #76]	; (b27c <n25q256a_disable_xip+0x80>)
    b230:	4798      	blx	r3
    b232:	4603      	mov	r3, r0
    b234:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    b236:	7bbb      	ldrb	r3, [r7, #14]
    b238:	f003 0308 	and.w	r3, r3, #8
    b23c:	2b00      	cmp	r3, #0
    b23e:	d113      	bne.n	b268 <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    b240:	697b      	ldr	r3, [r7, #20]
    b242:	689b      	ldr	r3, [r3, #8]
    b244:	2b00      	cmp	r3, #0
    b246:	d00f      	beq.n	b268 <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    b248:	693b      	ldr	r3, [r7, #16]
    b24a:	681b      	ldr	r3, [r3, #0]
    b24c:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    b24e:	6938      	ldr	r0, [r7, #16]
    b250:	4b0b      	ldr	r3, [pc, #44]	; (b280 <n25q256a_disable_xip+0x84>)
    b252:	4798      	blx	r3
			n25q->pin_exit_xip();
    b254:	697b      	ldr	r3, [r7, #20]
    b256:	689b      	ldr	r3, [r3, #8]
    b258:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    b25a:	68b9      	ldr	r1, [r7, #8]
    b25c:	6938      	ldr	r0, [r7, #16]
    b25e:	4b09      	ldr	r3, [pc, #36]	; (b284 <n25q256a_disable_xip+0x88>)
    b260:	4798      	blx	r3
			qspi_sync_enable(descr);
    b262:	6938      	ldr	r0, [r7, #16]
    b264:	4b08      	ldr	r3, [pc, #32]	; (b288 <n25q256a_disable_xip+0x8c>)
    b266:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    b268:	697b      	ldr	r3, [r7, #20]
    b26a:	2200      	movs	r2, #0
    b26c:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    b26e:	2300      	movs	r3, #0
}
    b270:	4618      	mov	r0, r3
    b272:	3718      	adds	r7, #24
    b274:	46bd      	mov	sp, r7
    b276:	bd80      	pop	{r7, pc}
    b278:	0000aa0d 	.word	0x0000aa0d
    b27c:	0000aad9 	.word	0x0000aad9
    b280:	00001e19 	.word	0x00001e19
    b284:	00001d91 	.word	0x00001d91
    b288:	00001ddd 	.word	0x00001ddd

0000b28c <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    b28c:	b480      	push	{r7}
    b28e:	b085      	sub	sp, #20
    b290:	af00      	add	r7, sp, #0
    b292:	60f8      	str	r0, [r7, #12]
    b294:	60b9      	str	r1, [r7, #8]
    b296:	607a      	str	r2, [r7, #4]
	me->io        = io;
    b298:	68fb      	ldr	r3, [r7, #12]
    b29a:	68ba      	ldr	r2, [r7, #8]
    b29c:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    b29e:	68fb      	ldr	r3, [r7, #12]
    b2a0:	687a      	ldr	r2, [r7, #4]
    b2a2:	605a      	str	r2, [r3, #4]

	return me;
    b2a4:	68fb      	ldr	r3, [r7, #12]
}
    b2a6:	4618      	mov	r0, r3
    b2a8:	3714      	adds	r7, #20
    b2aa:	46bd      	mov	sp, r7
    b2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    b2b0:	4770      	bx	lr

0000b2b2 <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    b2b2:	b480      	push	{r7}
    b2b4:	b083      	sub	sp, #12
    b2b6:	af00      	add	r7, sp, #0
    b2b8:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    b2ba:	687b      	ldr	r3, [r7, #4]
    b2bc:	781b      	ldrb	r3, [r3, #0]
    b2be:	b29a      	uxth	r2, r3
    b2c0:	687b      	ldr	r3, [r7, #4]
    b2c2:	3301      	adds	r3, #1
    b2c4:	781b      	ldrb	r3, [r3, #0]
    b2c6:	b29b      	uxth	r3, r3
    b2c8:	021b      	lsls	r3, r3, #8
    b2ca:	b29b      	uxth	r3, r3
    b2cc:	4413      	add	r3, r2
    b2ce:	b29b      	uxth	r3, r3
}
    b2d0:	4618      	mov	r0, r3
    b2d2:	370c      	adds	r7, #12
    b2d4:	46bd      	mov	sp, r7
    b2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    b2da:	4770      	bx	lr

0000b2dc <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    b2dc:	b480      	push	{r7}
    b2de:	b083      	sub	sp, #12
    b2e0:	af00      	add	r7, sp, #0
    b2e2:	6078      	str	r0, [r7, #4]
	return desc[0];
    b2e4:	687b      	ldr	r3, [r7, #4]
    b2e6:	781b      	ldrb	r3, [r3, #0]
}
    b2e8:	4618      	mov	r0, r3
    b2ea:	370c      	adds	r7, #12
    b2ec:	46bd      	mov	sp, r7
    b2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    b2f2:	4770      	bx	lr

0000b2f4 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    b2f4:	b580      	push	{r7, lr}
    b2f6:	b082      	sub	sp, #8
    b2f8:	af00      	add	r7, sp, #0
    b2fa:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    b2fc:	6878      	ldr	r0, [r7, #4]
    b2fe:	4b05      	ldr	r3, [pc, #20]	; (b314 <usb_desc_next+0x20>)
    b300:	4798      	blx	r3
    b302:	4603      	mov	r3, r0
    b304:	461a      	mov	r2, r3
    b306:	687b      	ldr	r3, [r7, #4]
    b308:	4413      	add	r3, r2
}
    b30a:	4618      	mov	r0, r3
    b30c:	3708      	adds	r7, #8
    b30e:	46bd      	mov	sp, r7
    b310:	bd80      	pop	{r7, pc}
    b312:	bf00      	nop
    b314:	0000b2dd 	.word	0x0000b2dd

0000b318 <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    b318:	b580      	push	{r7, lr}
    b31a:	b08c      	sub	sp, #48	; 0x30
    b31c:	af00      	add	r7, sp, #0
    b31e:	6078      	str	r0, [r7, #4]
    b320:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    b322:	687b      	ldr	r3, [r7, #4]
    b324:	689b      	ldr	r3, [r3, #8]
    b326:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    b328:	683b      	ldr	r3, [r7, #0]
    b32a:	681b      	ldr	r3, [r3, #0]
    b32c:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    b32e:	2300      	movs	r3, #0
    b330:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    b334:	e08f      	b.n	b456 <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    b336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b338:	2b00      	cmp	r3, #0
    b33a:	d102      	bne.n	b342 <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    b33c:	f06f 0309 	mvn.w	r3, #9
    b340:	e092      	b.n	b468 <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    b342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b344:	789b      	ldrb	r3, [r3, #2]
    b346:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    b348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b34a:	795b      	ldrb	r3, [r3, #5]
    b34c:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    b34e:	7c7b      	ldrb	r3, [r7, #17]
    b350:	2b02      	cmp	r3, #2
    b352:	d002      	beq.n	b35a <cdcdf_acm_enable+0x42>
    b354:	7c7b      	ldrb	r3, [r7, #17]
    b356:	2b0a      	cmp	r3, #10
    b358:	d121      	bne.n	b39e <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    b35a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b35e:	6a3a      	ldr	r2, [r7, #32]
    b360:	5cd2      	ldrb	r2, [r2, r3]
    b362:	7bbb      	ldrb	r3, [r7, #14]
    b364:	429a      	cmp	r2, r3
    b366:	d102      	bne.n	b36e <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    b368:	f06f 0311 	mvn.w	r3, #17
    b36c:	e07c      	b.n	b468 <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    b36e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b372:	6a3a      	ldr	r2, [r7, #32]
    b374:	5cd3      	ldrb	r3, [r2, r3]
    b376:	2bff      	cmp	r3, #255	; 0xff
    b378:	d002      	beq.n	b380 <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    b37a:	f06f 031b 	mvn.w	r3, #27
    b37e:	e073      	b.n	b468 <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    b380:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b384:	7bb9      	ldrb	r1, [r7, #14]
    b386:	6a3a      	ldr	r2, [r7, #32]
    b388:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    b38a:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    b38c:	683b      	ldr	r3, [r7, #0]
    b38e:	685b      	ldr	r3, [r3, #4]
    b390:	2205      	movs	r2, #5
    b392:	4619      	mov	r1, r3
    b394:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b396:	4b36      	ldr	r3, [pc, #216]	; (b470 <cdcdf_acm_enable+0x158>)
    b398:	4798      	blx	r3
    b39a:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    b39c:	e047      	b.n	b42e <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    b39e:	f06f 0309 	mvn.w	r3, #9
    b3a2:	e061      	b.n	b468 <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    b3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b3a6:	789b      	ldrb	r3, [r3, #2]
    b3a8:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    b3aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b3ac:	78db      	ldrb	r3, [r3, #3]
    b3ae:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    b3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b3b2:	3304      	adds	r3, #4
    b3b4:	4618      	mov	r0, r3
    b3b6:	4b2f      	ldr	r3, [pc, #188]	; (b474 <cdcdf_acm_enable+0x15c>)
    b3b8:	4798      	blx	r3
    b3ba:	4603      	mov	r3, r0
    b3bc:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    b3be:	7ebb      	ldrb	r3, [r7, #26]
    b3c0:	7ef9      	ldrb	r1, [r7, #27]
    b3c2:	8bba      	ldrh	r2, [r7, #28]
    b3c4:	4618      	mov	r0, r3
    b3c6:	4b2c      	ldr	r3, [pc, #176]	; (b478 <cdcdf_acm_enable+0x160>)
    b3c8:	4798      	blx	r3
    b3ca:	4603      	mov	r3, r0
    b3cc:	2b00      	cmp	r3, #0
    b3ce:	d002      	beq.n	b3d6 <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    b3d0:	f06f 0313 	mvn.w	r3, #19
    b3d4:	e048      	b.n	b468 <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    b3d6:	7ebb      	ldrb	r3, [r7, #26]
    b3d8:	b25b      	sxtb	r3, r3
    b3da:	2b00      	cmp	r3, #0
    b3dc:	da0f      	bge.n	b3fe <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    b3de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b3e2:	7eb9      	ldrb	r1, [r7, #26]
    b3e4:	6a3a      	ldr	r2, [r7, #32]
    b3e6:	4413      	add	r3, r2
    b3e8:	460a      	mov	r2, r1
    b3ea:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    b3ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b3f0:	6a3a      	ldr	r2, [r7, #32]
    b3f2:	4413      	add	r3, r2
    b3f4:	789b      	ldrb	r3, [r3, #2]
    b3f6:	4618      	mov	r0, r3
    b3f8:	4b20      	ldr	r3, [pc, #128]	; (b47c <cdcdf_acm_enable+0x164>)
    b3fa:	4798      	blx	r3
    b3fc:	e007      	b.n	b40e <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    b3fe:	7eba      	ldrb	r2, [r7, #26]
    b400:	6a3b      	ldr	r3, [r7, #32]
    b402:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    b404:	6a3b      	ldr	r3, [r7, #32]
    b406:	791b      	ldrb	r3, [r3, #4]
    b408:	4618      	mov	r0, r3
    b40a:	4b1c      	ldr	r3, [pc, #112]	; (b47c <cdcdf_acm_enable+0x164>)
    b40c:	4798      	blx	r3
			}
			desc->sod = ep;
    b40e:	683b      	ldr	r3, [r7, #0]
    b410:	6aba      	ldr	r2, [r7, #40]	; 0x28
    b412:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    b414:	683b      	ldr	r3, [r7, #0]
    b416:	681b      	ldr	r3, [r3, #0]
    b418:	4618      	mov	r0, r3
    b41a:	4b19      	ldr	r3, [pc, #100]	; (b480 <cdcdf_acm_enable+0x168>)
    b41c:	4798      	blx	r3
    b41e:	4602      	mov	r2, r0
    b420:	683b      	ldr	r3, [r7, #0]
    b422:	685b      	ldr	r3, [r3, #4]
    b424:	4619      	mov	r1, r3
    b426:	4610      	mov	r0, r2
    b428:	4b16      	ldr	r3, [pc, #88]	; (b484 <cdcdf_acm_enable+0x16c>)
    b42a:	4798      	blx	r3
    b42c:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    b42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b430:	2b00      	cmp	r3, #0
    b432:	d1b7      	bne.n	b3a4 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    b434:	683b      	ldr	r3, [r7, #0]
    b436:	681b      	ldr	r3, [r3, #0]
    b438:	4618      	mov	r0, r3
    b43a:	4b11      	ldr	r3, [pc, #68]	; (b480 <cdcdf_acm_enable+0x168>)
    b43c:	4798      	blx	r3
    b43e:	683b      	ldr	r3, [r7, #0]
    b440:	685b      	ldr	r3, [r3, #4]
    b442:	2204      	movs	r2, #4
    b444:	4619      	mov	r1, r3
    b446:	4b0a      	ldr	r3, [pc, #40]	; (b470 <cdcdf_acm_enable+0x158>)
    b448:	4798      	blx	r3
    b44a:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    b44c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b450:	3301      	adds	r3, #1
    b452:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    b456:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b45a:	2b01      	cmp	r3, #1
    b45c:	f67f af6b 	bls.w	b336 <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    b460:	4b09      	ldr	r3, [pc, #36]	; (b488 <cdcdf_acm_enable+0x170>)
    b462:	2201      	movs	r2, #1
    b464:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    b466:	2300      	movs	r3, #0
}
    b468:	4618      	mov	r0, r3
    b46a:	3730      	adds	r7, #48	; 0x30
    b46c:	46bd      	mov	sp, r7
    b46e:	bd80      	pop	{r7, pc}
    b470:	0000c59d 	.word	0x0000c59d
    b474:	0000b2b3 	.word	0x0000b2b3
    b478:	00002af1 	.word	0x00002af1
    b47c:	00002bdd 	.word	0x00002bdd
    b480:	0000b2f5 	.word	0x0000b2f5
    b484:	0000c5f9 	.word	0x0000c5f9
    b488:	200018f8 	.word	0x200018f8

0000b48c <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    b48c:	b580      	push	{r7, lr}
    b48e:	b088      	sub	sp, #32
    b490:	af00      	add	r7, sp, #0
    b492:	6078      	str	r0, [r7, #4]
    b494:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    b496:	687b      	ldr	r3, [r7, #4]
    b498:	689b      	ldr	r3, [r3, #8]
    b49a:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    b49c:	683b      	ldr	r3, [r7, #0]
    b49e:	2b00      	cmp	r3, #0
    b4a0:	d00c      	beq.n	b4bc <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    b4a2:	683b      	ldr	r3, [r7, #0]
    b4a4:	681b      	ldr	r3, [r3, #0]
    b4a6:	795b      	ldrb	r3, [r3, #5]
    b4a8:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    b4aa:	7c7b      	ldrb	r3, [r7, #17]
    b4ac:	2b02      	cmp	r3, #2
    b4ae:	d005      	beq.n	b4bc <cdcdf_acm_disable+0x30>
    b4b0:	7c7b      	ldrb	r3, [r7, #17]
    b4b2:	2b0a      	cmp	r3, #10
    b4b4:	d002      	beq.n	b4bc <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    b4b6:	f06f 0309 	mvn.w	r3, #9
    b4ba:	e035      	b.n	b528 <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    b4bc:	2300      	movs	r3, #0
    b4be:	77fb      	strb	r3, [r7, #31]
    b4c0:	e01f      	b.n	b502 <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    b4c2:	7ffb      	ldrb	r3, [r7, #31]
    b4c4:	69ba      	ldr	r2, [r7, #24]
    b4c6:	5cd3      	ldrb	r3, [r2, r3]
    b4c8:	2bff      	cmp	r3, #255	; 0xff
    b4ca:	d016      	beq.n	b4fa <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    b4cc:	7ffb      	ldrb	r3, [r7, #31]
    b4ce:	69ba      	ldr	r2, [r7, #24]
    b4d0:	21ff      	movs	r1, #255	; 0xff
    b4d2:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    b4d4:	7ffb      	ldrb	r3, [r7, #31]
    b4d6:	69ba      	ldr	r2, [r7, #24]
    b4d8:	4413      	add	r3, r2
    b4da:	789b      	ldrb	r3, [r3, #2]
    b4dc:	2bff      	cmp	r3, #255	; 0xff
    b4de:	d00d      	beq.n	b4fc <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    b4e0:	7ffb      	ldrb	r3, [r7, #31]
    b4e2:	69ba      	ldr	r2, [r7, #24]
    b4e4:	4413      	add	r3, r2
    b4e6:	789b      	ldrb	r3, [r3, #2]
    b4e8:	4618      	mov	r0, r3
    b4ea:	4b11      	ldr	r3, [pc, #68]	; (b530 <cdcdf_acm_disable+0xa4>)
    b4ec:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    b4ee:	7ffb      	ldrb	r3, [r7, #31]
    b4f0:	69ba      	ldr	r2, [r7, #24]
    b4f2:	4413      	add	r3, r2
    b4f4:	22ff      	movs	r2, #255	; 0xff
    b4f6:	709a      	strb	r2, [r3, #2]
    b4f8:	e000      	b.n	b4fc <cdcdf_acm_disable+0x70>
			continue;
    b4fa:	bf00      	nop
	for (i = 0; i < 2; i++) {
    b4fc:	7ffb      	ldrb	r3, [r7, #31]
    b4fe:	3301      	adds	r3, #1
    b500:	77fb      	strb	r3, [r7, #31]
    b502:	7ffb      	ldrb	r3, [r7, #31]
    b504:	2b01      	cmp	r3, #1
    b506:	d9dc      	bls.n	b4c2 <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    b508:	69bb      	ldr	r3, [r7, #24]
    b50a:	791b      	ldrb	r3, [r3, #4]
    b50c:	2bff      	cmp	r3, #255	; 0xff
    b50e:	d007      	beq.n	b520 <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    b510:	69bb      	ldr	r3, [r7, #24]
    b512:	791b      	ldrb	r3, [r3, #4]
    b514:	4618      	mov	r0, r3
    b516:	4b06      	ldr	r3, [pc, #24]	; (b530 <cdcdf_acm_disable+0xa4>)
    b518:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    b51a:	69bb      	ldr	r3, [r7, #24]
    b51c:	22ff      	movs	r2, #255	; 0xff
    b51e:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    b520:	4b04      	ldr	r3, [pc, #16]	; (b534 <cdcdf_acm_disable+0xa8>)
    b522:	2200      	movs	r2, #0
    b524:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    b526:	2300      	movs	r3, #0
}
    b528:	4618      	mov	r0, r3
    b52a:	3720      	adds	r7, #32
    b52c:	46bd      	mov	sp, r7
    b52e:	bd80      	pop	{r7, pc}
    b530:	00002b8d 	.word	0x00002b8d
    b534:	200018f8 	.word	0x200018f8

0000b538 <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    b538:	b580      	push	{r7, lr}
    b53a:	b084      	sub	sp, #16
    b53c:	af00      	add	r7, sp, #0
    b53e:	60f8      	str	r0, [r7, #12]
    b540:	460b      	mov	r3, r1
    b542:	607a      	str	r2, [r7, #4]
    b544:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    b546:	7afb      	ldrb	r3, [r7, #11]
    b548:	2b01      	cmp	r3, #1
    b54a:	d009      	beq.n	b560 <cdcdf_acm_ctrl+0x28>
    b54c:	2b02      	cmp	r3, #2
    b54e:	d00d      	beq.n	b56c <cdcdf_acm_ctrl+0x34>
    b550:	2b00      	cmp	r3, #0
    b552:	d10e      	bne.n	b572 <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    b554:	6879      	ldr	r1, [r7, #4]
    b556:	68f8      	ldr	r0, [r7, #12]
    b558:	4b09      	ldr	r3, [pc, #36]	; (b580 <cdcdf_acm_ctrl+0x48>)
    b55a:	4798      	blx	r3
    b55c:	4603      	mov	r3, r0
    b55e:	e00a      	b.n	b576 <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    b560:	6879      	ldr	r1, [r7, #4]
    b562:	68f8      	ldr	r0, [r7, #12]
    b564:	4b07      	ldr	r3, [pc, #28]	; (b584 <cdcdf_acm_ctrl+0x4c>)
    b566:	4798      	blx	r3
    b568:	4603      	mov	r3, r0
    b56a:	e004      	b.n	b576 <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    b56c:	f06f 031a 	mvn.w	r3, #26
    b570:	e001      	b.n	b576 <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    b572:	f06f 030c 	mvn.w	r3, #12
	}
}
    b576:	4618      	mov	r0, r3
    b578:	3710      	adds	r7, #16
    b57a:	46bd      	mov	sp, r7
    b57c:	bd80      	pop	{r7, pc}
    b57e:	bf00      	nop
    b580:	0000b319 	.word	0x0000b319
    b584:	0000b48d 	.word	0x0000b48d

0000b588 <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    b588:	b590      	push	{r4, r7, lr}
    b58a:	b087      	sub	sp, #28
    b58c:	af00      	add	r7, sp, #0
    b58e:	4603      	mov	r3, r0
    b590:	6039      	str	r1, [r7, #0]
    b592:	71fb      	strb	r3, [r7, #7]
    b594:	4613      	mov	r3, r2
    b596:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    b598:	683b      	ldr	r3, [r7, #0]
    b59a:	799a      	ldrb	r2, [r3, #6]
    b59c:	79db      	ldrb	r3, [r3, #7]
    b59e:	021b      	lsls	r3, r3, #8
    b5a0:	4313      	orrs	r3, r2
    b5a2:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    b5a4:	4b2b      	ldr	r3, [pc, #172]	; (b654 <cdcdf_acm_set_req+0xcc>)
    b5a6:	4798      	blx	r3
    b5a8:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    b5aa:	683b      	ldr	r3, [r7, #0]
    b5ac:	785b      	ldrb	r3, [r3, #1]
    b5ae:	2b20      	cmp	r3, #32
    b5b0:	d002      	beq.n	b5b8 <cdcdf_acm_set_req+0x30>
    b5b2:	2b22      	cmp	r3, #34	; 0x22
    b5b4:	d034      	beq.n	b620 <cdcdf_acm_set_req+0x98>
    b5b6:	e046      	b.n	b646 <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    b5b8:	8afb      	ldrh	r3, [r7, #22]
    b5ba:	2b07      	cmp	r3, #7
    b5bc:	d002      	beq.n	b5c4 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    b5be:	f04f 33ff 	mov.w	r3, #4294967295
    b5c2:	e042      	b.n	b64a <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    b5c4:	79bb      	ldrb	r3, [r7, #6]
    b5c6:	2b00      	cmp	r3, #0
    b5c8:	d107      	bne.n	b5da <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    b5ca:	8afa      	ldrh	r2, [r7, #22]
    b5cc:	79f8      	ldrb	r0, [r7, #7]
    b5ce:	2300      	movs	r3, #0
    b5d0:	6939      	ldr	r1, [r7, #16]
    b5d2:	4c21      	ldr	r4, [pc, #132]	; (b658 <cdcdf_acm_set_req+0xd0>)
    b5d4:	47a0      	blx	r4
    b5d6:	4603      	mov	r3, r0
    b5d8:	e037      	b.n	b64a <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    b5da:	693a      	ldr	r2, [r7, #16]
    b5dc:	f107 0308 	add.w	r3, r7, #8
    b5e0:	6810      	ldr	r0, [r2, #0]
    b5e2:	6018      	str	r0, [r3, #0]
    b5e4:	8891      	ldrh	r1, [r2, #4]
    b5e6:	7992      	ldrb	r2, [r2, #6]
    b5e8:	8099      	strh	r1, [r3, #4]
    b5ea:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    b5ec:	4b1b      	ldr	r3, [pc, #108]	; (b65c <cdcdf_acm_set_req+0xd4>)
    b5ee:	681b      	ldr	r3, [r3, #0]
    b5f0:	2b00      	cmp	r3, #0
    b5f2:	d008      	beq.n	b606 <cdcdf_acm_set_req+0x7e>
    b5f4:	4b19      	ldr	r3, [pc, #100]	; (b65c <cdcdf_acm_set_req+0xd4>)
    b5f6:	681b      	ldr	r3, [r3, #0]
    b5f8:	f107 0208 	add.w	r2, r7, #8
    b5fc:	4610      	mov	r0, r2
    b5fe:	4798      	blx	r3
    b600:	4603      	mov	r3, r0
    b602:	2b00      	cmp	r3, #0
    b604:	d00a      	beq.n	b61c <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    b606:	4b16      	ldr	r3, [pc, #88]	; (b660 <cdcdf_acm_set_req+0xd8>)
    b608:	f107 0208 	add.w	r2, r7, #8
    b60c:	e892 0003 	ldmia.w	r2, {r0, r1}
    b610:	6018      	str	r0, [r3, #0]
    b612:	3304      	adds	r3, #4
    b614:	8019      	strh	r1, [r3, #0]
    b616:	3302      	adds	r3, #2
    b618:	0c0a      	lsrs	r2, r1, #16
    b61a:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    b61c:	2300      	movs	r3, #0
    b61e:	e014      	b.n	b64a <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    b620:	2300      	movs	r3, #0
    b622:	2200      	movs	r2, #0
    b624:	2100      	movs	r1, #0
    b626:	2000      	movs	r0, #0
    b628:	4c0b      	ldr	r4, [pc, #44]	; (b658 <cdcdf_acm_set_req+0xd0>)
    b62a:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    b62c:	4b0d      	ldr	r3, [pc, #52]	; (b664 <cdcdf_acm_set_req+0xdc>)
    b62e:	681b      	ldr	r3, [r3, #0]
    b630:	2b00      	cmp	r3, #0
    b632:	d006      	beq.n	b642 <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    b634:	4b0b      	ldr	r3, [pc, #44]	; (b664 <cdcdf_acm_set_req+0xdc>)
    b636:	681b      	ldr	r3, [r3, #0]
    b638:	683a      	ldr	r2, [r7, #0]
    b63a:	8852      	ldrh	r2, [r2, #2]
    b63c:	b292      	uxth	r2, r2
    b63e:	4610      	mov	r0, r2
    b640:	4798      	blx	r3
		}
		return ERR_NONE;
    b642:	2300      	movs	r3, #0
    b644:	e001      	b.n	b64a <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    b646:	f06f 030c 	mvn.w	r3, #12
	}
}
    b64a:	4618      	mov	r0, r3
    b64c:	371c      	adds	r7, #28
    b64e:	46bd      	mov	sp, r7
    b650:	bd90      	pop	{r4, r7, pc}
    b652:	bf00      	nop
    b654:	0000c499 	.word	0x0000c499
    b658:	0000c30d 	.word	0x0000c30d
    b65c:	2000190c 	.word	0x2000190c
    b660:	20001900 	.word	0x20001900
    b664:	20001908 	.word	0x20001908

0000b668 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    b668:	b590      	push	{r4, r7, lr}
    b66a:	b085      	sub	sp, #20
    b66c:	af00      	add	r7, sp, #0
    b66e:	4603      	mov	r3, r0
    b670:	6039      	str	r1, [r7, #0]
    b672:	71fb      	strb	r3, [r7, #7]
    b674:	4613      	mov	r3, r2
    b676:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    b678:	683b      	ldr	r3, [r7, #0]
    b67a:	799a      	ldrb	r2, [r3, #6]
    b67c:	79db      	ldrb	r3, [r3, #7]
    b67e:	021b      	lsls	r3, r3, #8
    b680:	4313      	orrs	r3, r2
    b682:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    b684:	79bb      	ldrb	r3, [r7, #6]
    b686:	2b01      	cmp	r3, #1
    b688:	d101      	bne.n	b68e <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    b68a:	2300      	movs	r3, #0
    b68c:	e013      	b.n	b6b6 <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    b68e:	683b      	ldr	r3, [r7, #0]
    b690:	785b      	ldrb	r3, [r3, #1]
    b692:	2b21      	cmp	r3, #33	; 0x21
    b694:	d10d      	bne.n	b6b2 <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    b696:	89fb      	ldrh	r3, [r7, #14]
    b698:	2b07      	cmp	r3, #7
    b69a:	d002      	beq.n	b6a2 <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    b69c:	f04f 33ff 	mov.w	r3, #4294967295
    b6a0:	e009      	b.n	b6b6 <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    b6a2:	89fa      	ldrh	r2, [r7, #14]
    b6a4:	79f8      	ldrb	r0, [r7, #7]
    b6a6:	2300      	movs	r3, #0
    b6a8:	4905      	ldr	r1, [pc, #20]	; (b6c0 <cdcdf_acm_get_req+0x58>)
    b6aa:	4c06      	ldr	r4, [pc, #24]	; (b6c4 <cdcdf_acm_get_req+0x5c>)
    b6ac:	47a0      	blx	r4
    b6ae:	4603      	mov	r3, r0
    b6b0:	e001      	b.n	b6b6 <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    b6b2:	f06f 030c 	mvn.w	r3, #12
	}
}
    b6b6:	4618      	mov	r0, r3
    b6b8:	3714      	adds	r7, #20
    b6ba:	46bd      	mov	sp, r7
    b6bc:	bd90      	pop	{r4, r7, pc}
    b6be:	bf00      	nop
    b6c0:	20001900 	.word	0x20001900
    b6c4:	0000c30d 	.word	0x0000c30d

0000b6c8 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    b6c8:	b580      	push	{r7, lr}
    b6ca:	b082      	sub	sp, #8
    b6cc:	af00      	add	r7, sp, #0
    b6ce:	4603      	mov	r3, r0
    b6d0:	6039      	str	r1, [r7, #0]
    b6d2:	71fb      	strb	r3, [r7, #7]
    b6d4:	4613      	mov	r3, r2
    b6d6:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    b6d8:	683b      	ldr	r3, [r7, #0]
    b6da:	781b      	ldrb	r3, [r3, #0]
    b6dc:	095b      	lsrs	r3, r3, #5
    b6de:	b2db      	uxtb	r3, r3
    b6e0:	f003 0303 	and.w	r3, r3, #3
    b6e4:	2b01      	cmp	r3, #1
    b6e6:	d002      	beq.n	b6ee <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    b6e8:	f06f 0309 	mvn.w	r3, #9
    b6ec:	e026      	b.n	b73c <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    b6ee:	683b      	ldr	r3, [r7, #0]
    b6f0:	889b      	ldrh	r3, [r3, #4]
    b6f2:	b29a      	uxth	r2, r3
    b6f4:	4b13      	ldr	r3, [pc, #76]	; (b744 <cdcdf_acm_req+0x7c>)
    b6f6:	781b      	ldrb	r3, [r3, #0]
    b6f8:	b29b      	uxth	r3, r3
    b6fa:	429a      	cmp	r2, r3
    b6fc:	d007      	beq.n	b70e <cdcdf_acm_req+0x46>
    b6fe:	683b      	ldr	r3, [r7, #0]
    b700:	889b      	ldrh	r3, [r3, #4]
    b702:	b29a      	uxth	r2, r3
    b704:	4b0f      	ldr	r3, [pc, #60]	; (b744 <cdcdf_acm_req+0x7c>)
    b706:	785b      	ldrb	r3, [r3, #1]
    b708:	b29b      	uxth	r3, r3
    b70a:	429a      	cmp	r2, r3
    b70c:	d114      	bne.n	b738 <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    b70e:	683b      	ldr	r3, [r7, #0]
    b710:	781b      	ldrb	r3, [r3, #0]
    b712:	b25b      	sxtb	r3, r3
    b714:	2b00      	cmp	r3, #0
    b716:	da07      	bge.n	b728 <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    b718:	79ba      	ldrb	r2, [r7, #6]
    b71a:	79fb      	ldrb	r3, [r7, #7]
    b71c:	6839      	ldr	r1, [r7, #0]
    b71e:	4618      	mov	r0, r3
    b720:	4b09      	ldr	r3, [pc, #36]	; (b748 <cdcdf_acm_req+0x80>)
    b722:	4798      	blx	r3
    b724:	4603      	mov	r3, r0
    b726:	e009      	b.n	b73c <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    b728:	79ba      	ldrb	r2, [r7, #6]
    b72a:	79fb      	ldrb	r3, [r7, #7]
    b72c:	6839      	ldr	r1, [r7, #0]
    b72e:	4618      	mov	r0, r3
    b730:	4b06      	ldr	r3, [pc, #24]	; (b74c <cdcdf_acm_req+0x84>)
    b732:	4798      	blx	r3
    b734:	4603      	mov	r3, r0
    b736:	e001      	b.n	b73c <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    b738:	f06f 0309 	mvn.w	r3, #9
	}
}
    b73c:	4618      	mov	r0, r3
    b73e:	3708      	adds	r7, #8
    b740:	46bd      	mov	sp, r7
    b742:	bd80      	pop	{r7, pc}
    b744:	200018f8 	.word	0x200018f8
    b748:	0000b669 	.word	0x0000b669
    b74c:	0000b589 	.word	0x0000b589

0000b750 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    b750:	b580      	push	{r7, lr}
    b752:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    b754:	4b0b      	ldr	r3, [pc, #44]	; (b784 <cdcdf_acm_init+0x34>)
    b756:	4798      	blx	r3
    b758:	4603      	mov	r3, r0
    b75a:	2b01      	cmp	r3, #1
    b75c:	d902      	bls.n	b764 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    b75e:	f06f 0310 	mvn.w	r3, #16
    b762:	e00d      	b.n	b780 <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    b764:	4b08      	ldr	r3, [pc, #32]	; (b788 <cdcdf_acm_init+0x38>)
    b766:	4a09      	ldr	r2, [pc, #36]	; (b78c <cdcdf_acm_init+0x3c>)
    b768:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    b76a:	4b07      	ldr	r3, [pc, #28]	; (b788 <cdcdf_acm_init+0x38>)
    b76c:	4a08      	ldr	r2, [pc, #32]	; (b790 <cdcdf_acm_init+0x40>)
    b76e:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    b770:	4805      	ldr	r0, [pc, #20]	; (b788 <cdcdf_acm_init+0x38>)
    b772:	4b08      	ldr	r3, [pc, #32]	; (b794 <cdcdf_acm_init+0x44>)
    b774:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    b776:	4908      	ldr	r1, [pc, #32]	; (b798 <cdcdf_acm_init+0x48>)
    b778:	2001      	movs	r0, #1
    b77a:	4b08      	ldr	r3, [pc, #32]	; (b79c <cdcdf_acm_init+0x4c>)
    b77c:	4798      	blx	r3
	return ERR_NONE;
    b77e:	2300      	movs	r3, #0
}
    b780:	4618      	mov	r0, r3
    b782:	bd80      	pop	{r7, pc}
    b784:	0000c4b1 	.word	0x0000c4b1
    b788:	200018ec 	.word	0x200018ec
    b78c:	0000b539 	.word	0x0000b539
    b790:	200018f8 	.word	0x200018f8
    b794:	0000c419 	.word	0x0000c419
    b798:	2000010c 	.word	0x2000010c
    b79c:	0000c349 	.word	0x0000c349

0000b7a0 <usb_get_u16>:
{
    b7a0:	b480      	push	{r7}
    b7a2:	b083      	sub	sp, #12
    b7a4:	af00      	add	r7, sp, #0
    b7a6:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    b7a8:	687b      	ldr	r3, [r7, #4]
    b7aa:	781b      	ldrb	r3, [r3, #0]
    b7ac:	b29a      	uxth	r2, r3
    b7ae:	687b      	ldr	r3, [r7, #4]
    b7b0:	3301      	adds	r3, #1
    b7b2:	781b      	ldrb	r3, [r3, #0]
    b7b4:	b29b      	uxth	r3, r3
    b7b6:	021b      	lsls	r3, r3, #8
    b7b8:	b29b      	uxth	r3, r3
    b7ba:	4413      	add	r3, r2
    b7bc:	b29b      	uxth	r3, r3
}
    b7be:	4618      	mov	r0, r3
    b7c0:	370c      	adds	r7, #12
    b7c2:	46bd      	mov	sp, r7
    b7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    b7c8:	4770      	bx	lr

0000b7ca <usb_desc_len>:
{
    b7ca:	b480      	push	{r7}
    b7cc:	b083      	sub	sp, #12
    b7ce:	af00      	add	r7, sp, #0
    b7d0:	6078      	str	r0, [r7, #4]
	return desc[0];
    b7d2:	687b      	ldr	r3, [r7, #4]
    b7d4:	781b      	ldrb	r3, [r3, #0]
}
    b7d6:	4618      	mov	r0, r3
    b7d8:	370c      	adds	r7, #12
    b7da:	46bd      	mov	sp, r7
    b7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    b7e0:	4770      	bx	lr
	...

0000b7e4 <usb_desc_next>:
{
    b7e4:	b580      	push	{r7, lr}
    b7e6:	b082      	sub	sp, #8
    b7e8:	af00      	add	r7, sp, #0
    b7ea:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    b7ec:	6878      	ldr	r0, [r7, #4]
    b7ee:	4b05      	ldr	r3, [pc, #20]	; (b804 <usb_desc_next+0x20>)
    b7f0:	4798      	blx	r3
    b7f2:	4603      	mov	r3, r0
    b7f4:	461a      	mov	r2, r3
    b7f6:	687b      	ldr	r3, [r7, #4]
    b7f8:	4413      	add	r3, r2
}
    b7fa:	4618      	mov	r0, r3
    b7fc:	3708      	adds	r7, #8
    b7fe:	46bd      	mov	sp, r7
    b800:	bd80      	pop	{r7, pc}
    b802:	bf00      	nop
    b804:	0000b7cb 	.word	0x0000b7cb

0000b808 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    b808:	b580      	push	{r7, lr}
    b80a:	b082      	sub	sp, #8
    b80c:	af00      	add	r7, sp, #0
    b80e:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    b810:	687b      	ldr	r3, [r7, #4]
    b812:	3302      	adds	r3, #2
    b814:	4618      	mov	r0, r3
    b816:	4b03      	ldr	r3, [pc, #12]	; (b824 <usb_cfg_desc_total_len+0x1c>)
    b818:	4798      	blx	r3
    b81a:	4603      	mov	r3, r0
}
    b81c:	4618      	mov	r0, r3
    b81e:	3708      	adds	r7, #8
    b820:	46bd      	mov	sp, r7
    b822:	bd80      	pop	{r7, pc}
    b824:	0000b7a1 	.word	0x0000b7a1

0000b828 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    b828:	b590      	push	{r4, r7, lr}
    b82a:	b085      	sub	sp, #20
    b82c:	af00      	add	r7, sp, #0
    b82e:	4603      	mov	r3, r0
    b830:	6039      	str	r1, [r7, #0]
    b832:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    b834:	2300      	movs	r3, #0
    b836:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    b838:	683b      	ldr	r3, [r7, #0]
    b83a:	799a      	ldrb	r2, [r3, #6]
    b83c:	79db      	ldrb	r3, [r3, #7]
    b83e:	021b      	lsls	r3, r3, #8
    b840:	4313      	orrs	r3, r2
    b842:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    b844:	897b      	ldrh	r3, [r7, #10]
    b846:	2b12      	cmp	r3, #18
    b848:	d901      	bls.n	b84e <usbdc_get_dev_desc+0x26>
		length = 0x12;
    b84a:	2312      	movs	r3, #18
    b84c:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    b84e:	68fb      	ldr	r3, [r7, #12]
    b850:	2b00      	cmp	r3, #0
    b852:	d10a      	bne.n	b86a <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    b854:	4b0f      	ldr	r3, [pc, #60]	; (b894 <usbdc_get_dev_desc+0x6c>)
    b856:	681b      	ldr	r3, [r3, #0]
    b858:	6818      	ldr	r0, [r3, #0]
    b85a:	4b0e      	ldr	r3, [pc, #56]	; (b894 <usbdc_get_dev_desc+0x6c>)
    b85c:	681b      	ldr	r3, [r3, #0]
    b85e:	685b      	ldr	r3, [r3, #4]
    b860:	2201      	movs	r2, #1
    b862:	4619      	mov	r1, r3
    b864:	4b0c      	ldr	r3, [pc, #48]	; (b898 <usbdc_get_dev_desc+0x70>)
    b866:	4798      	blx	r3
    b868:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    b86a:	68fb      	ldr	r3, [r7, #12]
    b86c:	2b00      	cmp	r3, #0
    b86e:	d101      	bne.n	b874 <usbdc_get_dev_desc+0x4c>
		return false;
    b870:	2300      	movs	r3, #0
    b872:	e00b      	b.n	b88c <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    b874:	897a      	ldrh	r2, [r7, #10]
    b876:	79f8      	ldrb	r0, [r7, #7]
    b878:	2300      	movs	r3, #0
    b87a:	68f9      	ldr	r1, [r7, #12]
    b87c:	4c07      	ldr	r4, [pc, #28]	; (b89c <usbdc_get_dev_desc+0x74>)
    b87e:	47a0      	blx	r4
    b880:	4603      	mov	r3, r0
    b882:	2b00      	cmp	r3, #0
    b884:	d001      	beq.n	b88a <usbdc_get_dev_desc+0x62>
		return false;
    b886:	2300      	movs	r3, #0
    b888:	e000      	b.n	b88c <usbdc_get_dev_desc+0x64>
	}
	return true;
    b88a:	2301      	movs	r3, #1
}
    b88c:	4618      	mov	r0, r3
    b88e:	3714      	adds	r7, #20
    b890:	46bd      	mov	sp, r7
    b892:	bd90      	pop	{r4, r7, pc}
    b894:	20001910 	.word	0x20001910
    b898:	0000c59d 	.word	0x0000c59d
    b89c:	0000c30d 	.word	0x0000c30d

0000b8a0 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    b8a0:	b590      	push	{r4, r7, lr}
    b8a2:	b087      	sub	sp, #28
    b8a4:	af00      	add	r7, sp, #0
    b8a6:	4603      	mov	r3, r0
    b8a8:	6039      	str	r1, [r7, #0]
    b8aa:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    b8ac:	2300      	movs	r3, #0
    b8ae:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    b8b0:	683b      	ldr	r3, [r7, #0]
    b8b2:	799a      	ldrb	r2, [r3, #6]
    b8b4:	79db      	ldrb	r3, [r3, #7]
    b8b6:	021b      	lsls	r3, r3, #8
    b8b8:	4313      	orrs	r3, r2
    b8ba:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    b8bc:	683b      	ldr	r3, [r7, #0]
    b8be:	885b      	ldrh	r3, [r3, #2]
    b8c0:	b29b      	uxth	r3, r3
    b8c2:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    b8c4:	8a7a      	ldrh	r2, [r7, #18]
    b8c6:	4b1e      	ldr	r3, [pc, #120]	; (b940 <usbdc_get_cfg_desc+0xa0>)
    b8c8:	7f1b      	ldrb	r3, [r3, #28]
    b8ca:	3b01      	subs	r3, #1
    b8cc:	4013      	ands	r3, r2
    b8ce:	2b00      	cmp	r3, #0
    b8d0:	bf0c      	ite	eq
    b8d2:	2301      	moveq	r3, #1
    b8d4:	2300      	movne	r3, #0
    b8d6:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    b8d8:	697b      	ldr	r3, [r7, #20]
    b8da:	2b00      	cmp	r3, #0
    b8dc:	d10c      	bne.n	b8f8 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    b8de:	4b18      	ldr	r3, [pc, #96]	; (b940 <usbdc_get_cfg_desc+0xa0>)
    b8e0:	681b      	ldr	r3, [r3, #0]
    b8e2:	6818      	ldr	r0, [r3, #0]
    b8e4:	4b16      	ldr	r3, [pc, #88]	; (b940 <usbdc_get_cfg_desc+0xa0>)
    b8e6:	681b      	ldr	r3, [r3, #0]
    b8e8:	6859      	ldr	r1, [r3, #4]
    b8ea:	7c3b      	ldrb	r3, [r7, #16]
    b8ec:	3301      	adds	r3, #1
    b8ee:	b2db      	uxtb	r3, r3
    b8f0:	461a      	mov	r2, r3
    b8f2:	4b14      	ldr	r3, [pc, #80]	; (b944 <usbdc_get_cfg_desc+0xa4>)
    b8f4:	4798      	blx	r3
    b8f6:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    b8f8:	697b      	ldr	r3, [r7, #20]
    b8fa:	2b00      	cmp	r3, #0
    b8fc:	d101      	bne.n	b902 <usbdc_get_cfg_desc+0x62>
		return false;
    b8fe:	2300      	movs	r3, #0
    b900:	e019      	b.n	b936 <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    b902:	6978      	ldr	r0, [r7, #20]
    b904:	4b10      	ldr	r3, [pc, #64]	; (b948 <usbdc_get_cfg_desc+0xa8>)
    b906:	4798      	blx	r3
    b908:	4603      	mov	r3, r0
    b90a:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    b90c:	8a7a      	ldrh	r2, [r7, #18]
    b90e:	89fb      	ldrh	r3, [r7, #14]
    b910:	429a      	cmp	r2, r3
    b912:	d802      	bhi.n	b91a <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    b914:	2300      	movs	r3, #0
    b916:	747b      	strb	r3, [r7, #17]
    b918:	e001      	b.n	b91e <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    b91a:	89fb      	ldrh	r3, [r7, #14]
    b91c:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    b91e:	8a7a      	ldrh	r2, [r7, #18]
    b920:	7c7b      	ldrb	r3, [r7, #17]
    b922:	79f8      	ldrb	r0, [r7, #7]
    b924:	6979      	ldr	r1, [r7, #20]
    b926:	4c09      	ldr	r4, [pc, #36]	; (b94c <usbdc_get_cfg_desc+0xac>)
    b928:	47a0      	blx	r4
    b92a:	4603      	mov	r3, r0
    b92c:	2b00      	cmp	r3, #0
    b92e:	d001      	beq.n	b934 <usbdc_get_cfg_desc+0x94>
		return false;
    b930:	2300      	movs	r3, #0
    b932:	e000      	b.n	b936 <usbdc_get_cfg_desc+0x96>
	}
	return true;
    b934:	2301      	movs	r3, #1
}
    b936:	4618      	mov	r0, r3
    b938:	371c      	adds	r7, #28
    b93a:	46bd      	mov	sp, r7
    b93c:	bd90      	pop	{r4, r7, pc}
    b93e:	bf00      	nop
    b940:	20001910 	.word	0x20001910
    b944:	0000c65d 	.word	0x0000c65d
    b948:	0000b809 	.word	0x0000b809
    b94c:	0000c30d 	.word	0x0000c30d

0000b950 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    b950:	b590      	push	{r4, r7, lr}
    b952:	b085      	sub	sp, #20
    b954:	af00      	add	r7, sp, #0
    b956:	4603      	mov	r3, r0
    b958:	6039      	str	r1, [r7, #0]
    b95a:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    b95c:	683b      	ldr	r3, [r7, #0]
    b95e:	799a      	ldrb	r2, [r3, #6]
    b960:	79db      	ldrb	r3, [r3, #7]
    b962:	021b      	lsls	r3, r3, #8
    b964:	4313      	orrs	r3, r2
    b966:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    b968:	683b      	ldr	r3, [r7, #0]
    b96a:	885b      	ldrh	r3, [r3, #2]
    b96c:	b29b      	uxth	r3, r3
    b96e:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    b970:	89fa      	ldrh	r2, [r7, #14]
    b972:	4b1a      	ldr	r3, [pc, #104]	; (b9dc <usbdc_get_str_desc+0x8c>)
    b974:	7f1b      	ldrb	r3, [r3, #28]
    b976:	3b01      	subs	r3, #1
    b978:	4013      	ands	r3, r2
    b97a:	2b00      	cmp	r3, #0
    b97c:	bf0c      	ite	eq
    b97e:	2301      	moveq	r3, #1
    b980:	2300      	movne	r3, #0
    b982:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    b984:	4b15      	ldr	r3, [pc, #84]	; (b9dc <usbdc_get_str_desc+0x8c>)
    b986:	681b      	ldr	r3, [r3, #0]
    b988:	6818      	ldr	r0, [r3, #0]
    b98a:	4b14      	ldr	r3, [pc, #80]	; (b9dc <usbdc_get_str_desc+0x8c>)
    b98c:	681b      	ldr	r3, [r3, #0]
    b98e:	685b      	ldr	r3, [r3, #4]
    b990:	7b3a      	ldrb	r2, [r7, #12]
    b992:	4619      	mov	r1, r3
    b994:	4b12      	ldr	r3, [pc, #72]	; (b9e0 <usbdc_get_str_desc+0x90>)
    b996:	4798      	blx	r3
    b998:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    b99a:	68bb      	ldr	r3, [r7, #8]
    b99c:	2b00      	cmp	r3, #0
    b99e:	d101      	bne.n	b9a4 <usbdc_get_str_desc+0x54>
		return false;
    b9a0:	2300      	movs	r3, #0
    b9a2:	e017      	b.n	b9d4 <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    b9a4:	68bb      	ldr	r3, [r7, #8]
    b9a6:	781b      	ldrb	r3, [r3, #0]
    b9a8:	b29b      	uxth	r3, r3
    b9aa:	89fa      	ldrh	r2, [r7, #14]
    b9ac:	429a      	cmp	r2, r3
    b9ae:	d802      	bhi.n	b9b6 <usbdc_get_str_desc+0x66>
		need_zlp = false;
    b9b0:	2300      	movs	r3, #0
    b9b2:	737b      	strb	r3, [r7, #13]
    b9b4:	e002      	b.n	b9bc <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    b9b6:	68bb      	ldr	r3, [r7, #8]
    b9b8:	781b      	ldrb	r3, [r3, #0]
    b9ba:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    b9bc:	89fa      	ldrh	r2, [r7, #14]
    b9be:	7b7b      	ldrb	r3, [r7, #13]
    b9c0:	79f8      	ldrb	r0, [r7, #7]
    b9c2:	68b9      	ldr	r1, [r7, #8]
    b9c4:	4c07      	ldr	r4, [pc, #28]	; (b9e4 <usbdc_get_str_desc+0x94>)
    b9c6:	47a0      	blx	r4
    b9c8:	4603      	mov	r3, r0
    b9ca:	2b00      	cmp	r3, #0
    b9cc:	d001      	beq.n	b9d2 <usbdc_get_str_desc+0x82>
		return false;
    b9ce:	2300      	movs	r3, #0
    b9d0:	e000      	b.n	b9d4 <usbdc_get_str_desc+0x84>
	}
	return true;
    b9d2:	2301      	movs	r3, #1
}
    b9d4:	4618      	mov	r0, r3
    b9d6:	3714      	adds	r7, #20
    b9d8:	46bd      	mov	sp, r7
    b9da:	bd90      	pop	{r4, r7, pc}
    b9dc:	20001910 	.word	0x20001910
    b9e0:	0000c6d5 	.word	0x0000c6d5
    b9e4:	0000c30d 	.word	0x0000c30d

0000b9e8 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    b9e8:	b580      	push	{r7, lr}
    b9ea:	b084      	sub	sp, #16
    b9ec:	af00      	add	r7, sp, #0
    b9ee:	4603      	mov	r3, r0
    b9f0:	6039      	str	r1, [r7, #0]
    b9f2:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    b9f4:	683b      	ldr	r3, [r7, #0]
    b9f6:	885b      	ldrh	r3, [r3, #2]
    b9f8:	b29b      	uxth	r3, r3
    b9fa:	0a1b      	lsrs	r3, r3, #8
    b9fc:	b29b      	uxth	r3, r3
    b9fe:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    ba00:	7bfb      	ldrb	r3, [r7, #15]
    ba02:	2b02      	cmp	r3, #2
    ba04:	d00d      	beq.n	ba22 <usbdc_get_desc_req+0x3a>
    ba06:	2b03      	cmp	r3, #3
    ba08:	d012      	beq.n	ba30 <usbdc_get_desc_req+0x48>
    ba0a:	2b01      	cmp	r3, #1
    ba0c:	d002      	beq.n	ba14 <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    ba0e:	bf00      	nop
	}
	return false;
    ba10:	2300      	movs	r3, #0
    ba12:	e013      	b.n	ba3c <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    ba14:	79fb      	ldrb	r3, [r7, #7]
    ba16:	6839      	ldr	r1, [r7, #0]
    ba18:	4618      	mov	r0, r3
    ba1a:	4b0a      	ldr	r3, [pc, #40]	; (ba44 <usbdc_get_desc_req+0x5c>)
    ba1c:	4798      	blx	r3
    ba1e:	4603      	mov	r3, r0
    ba20:	e00c      	b.n	ba3c <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    ba22:	79fb      	ldrb	r3, [r7, #7]
    ba24:	6839      	ldr	r1, [r7, #0]
    ba26:	4618      	mov	r0, r3
    ba28:	4b07      	ldr	r3, [pc, #28]	; (ba48 <usbdc_get_desc_req+0x60>)
    ba2a:	4798      	blx	r3
    ba2c:	4603      	mov	r3, r0
    ba2e:	e005      	b.n	ba3c <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    ba30:	79fb      	ldrb	r3, [r7, #7]
    ba32:	6839      	ldr	r1, [r7, #0]
    ba34:	4618      	mov	r0, r3
    ba36:	4b05      	ldr	r3, [pc, #20]	; (ba4c <usbdc_get_desc_req+0x64>)
    ba38:	4798      	blx	r3
    ba3a:	4603      	mov	r3, r0
}
    ba3c:	4618      	mov	r0, r3
    ba3e:	3710      	adds	r7, #16
    ba40:	46bd      	mov	sp, r7
    ba42:	bd80      	pop	{r7, pc}
    ba44:	0000b829 	.word	0x0000b829
    ba48:	0000b8a1 	.word	0x0000b8a1
    ba4c:	0000b951 	.word	0x0000b951

0000ba50 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    ba50:	b590      	push	{r4, r7, lr}
    ba52:	b085      	sub	sp, #20
    ba54:	af00      	add	r7, sp, #0
    ba56:	4603      	mov	r3, r0
    ba58:	6039      	str	r1, [r7, #0]
    ba5a:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    ba5c:	683b      	ldr	r3, [r7, #0]
    ba5e:	781b      	ldrb	r3, [r3, #0]
    ba60:	f003 031f 	and.w	r3, r3, #31
    ba64:	2b00      	cmp	r3, #0
    ba66:	db1b      	blt.n	baa0 <usbdc_get_status_req+0x50>
    ba68:	2b01      	cmp	r3, #1
    ba6a:	dd02      	ble.n	ba72 <usbdc_get_status_req+0x22>
    ba6c:	2b02      	cmp	r3, #2
    ba6e:	d003      	beq.n	ba78 <usbdc_get_status_req+0x28>
    ba70:	e016      	b.n	baa0 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    ba72:	2300      	movs	r3, #0
    ba74:	60fb      	str	r3, [r7, #12]
		break;
    ba76:	e015      	b.n	baa4 <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    ba78:	683b      	ldr	r3, [r7, #0]
    ba7a:	889b      	ldrh	r3, [r3, #4]
    ba7c:	b29b      	uxth	r3, r3
    ba7e:	b2db      	uxtb	r3, r3
    ba80:	2102      	movs	r1, #2
    ba82:	4618      	mov	r0, r3
    ba84:	4b0f      	ldr	r3, [pc, #60]	; (bac4 <usbdc_get_status_req+0x74>)
    ba86:	4798      	blx	r3
    ba88:	4603      	mov	r3, r0
    ba8a:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    ba8c:	68fb      	ldr	r3, [r7, #12]
    ba8e:	2b00      	cmp	r3, #0
    ba90:	da01      	bge.n	ba96 <usbdc_get_status_req+0x46>
			return false;
    ba92:	2300      	movs	r3, #0
    ba94:	e012      	b.n	babc <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    ba96:	68fb      	ldr	r3, [r7, #12]
    ba98:	f003 0301 	and.w	r3, r3, #1
    ba9c:	60fb      	str	r3, [r7, #12]
		break;
    ba9e:	e001      	b.n	baa4 <usbdc_get_status_req+0x54>
	default:
		return false;
    baa0:	2300      	movs	r3, #0
    baa2:	e00b      	b.n	babc <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    baa4:	4b08      	ldr	r3, [pc, #32]	; (bac8 <usbdc_get_status_req+0x78>)
    baa6:	695b      	ldr	r3, [r3, #20]
    baa8:	89ba      	ldrh	r2, [r7, #12]
    baaa:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    baac:	4b06      	ldr	r3, [pc, #24]	; (bac8 <usbdc_get_status_req+0x78>)
    baae:	6959      	ldr	r1, [r3, #20]
    bab0:	79f8      	ldrb	r0, [r7, #7]
    bab2:	2300      	movs	r3, #0
    bab4:	2202      	movs	r2, #2
    bab6:	4c05      	ldr	r4, [pc, #20]	; (bacc <usbdc_get_status_req+0x7c>)
    bab8:	47a0      	blx	r4
	return true;
    baba:	2301      	movs	r3, #1
}
    babc:	4618      	mov	r0, r3
    babe:	3714      	adds	r7, #20
    bac0:	46bd      	mov	sp, r7
    bac2:	bd90      	pop	{r4, r7, pc}
    bac4:	00002e39 	.word	0x00002e39
    bac8:	20001910 	.word	0x20001910
    bacc:	0000c30d 	.word	0x0000c30d

0000bad0 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    bad0:	b590      	push	{r4, r7, lr}
    bad2:	b085      	sub	sp, #20
    bad4:	af00      	add	r7, sp, #0
    bad6:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    bad8:	4b1f      	ldr	r3, [pc, #124]	; (bb58 <usbdc_get_interface+0x88>)
    bada:	691b      	ldr	r3, [r3, #16]
    badc:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    bade:	4b1e      	ldr	r3, [pc, #120]	; (bb58 <usbdc_get_interface+0x88>)
    bae0:	7f5b      	ldrb	r3, [r3, #29]
    bae2:	461a      	mov	r2, r3
    bae4:	687b      	ldr	r3, [r7, #4]
    bae6:	889b      	ldrh	r3, [r3, #4]
    bae8:	b29b      	uxth	r3, r3
    baea:	fa42 f303 	asr.w	r3, r2, r3
    baee:	f003 0301 	and.w	r3, r3, #1
    baf2:	2b00      	cmp	r3, #0
    baf4:	d128      	bne.n	bb48 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    baf6:	4b18      	ldr	r3, [pc, #96]	; (bb58 <usbdc_get_interface+0x88>)
    baf8:	695b      	ldr	r3, [r3, #20]
    bafa:	2200      	movs	r2, #0
    bafc:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    bafe:	4b16      	ldr	r3, [pc, #88]	; (bb58 <usbdc_get_interface+0x88>)
    bb00:	6959      	ldr	r1, [r3, #20]
    bb02:	2300      	movs	r3, #0
    bb04:	2201      	movs	r2, #1
    bb06:	2000      	movs	r0, #0
    bb08:	4c14      	ldr	r4, [pc, #80]	; (bb5c <usbdc_get_interface+0x8c>)
    bb0a:	47a0      	blx	r4
		return true;
    bb0c:	2301      	movs	r3, #1
    bb0e:	e01f      	b.n	bb50 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    bb10:	68fb      	ldr	r3, [r7, #12]
    bb12:	685b      	ldr	r3, [r3, #4]
    bb14:	687a      	ldr	r2, [r7, #4]
    bb16:	2102      	movs	r1, #2
    bb18:	68f8      	ldr	r0, [r7, #12]
    bb1a:	4798      	blx	r3
    bb1c:	60b8      	str	r0, [r7, #8]
    bb1e:	68bb      	ldr	r3, [r7, #8]
    bb20:	2b00      	cmp	r3, #0
    bb22:	da03      	bge.n	bb2c <usbdc_get_interface+0x5c>
			func = func->next;
    bb24:	68fb      	ldr	r3, [r7, #12]
    bb26:	681b      	ldr	r3, [r3, #0]
    bb28:	60fb      	str	r3, [r7, #12]
    bb2a:	e00d      	b.n	bb48 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    bb2c:	4b0a      	ldr	r3, [pc, #40]	; (bb58 <usbdc_get_interface+0x88>)
    bb2e:	695b      	ldr	r3, [r3, #20]
    bb30:	68ba      	ldr	r2, [r7, #8]
    bb32:	b2d2      	uxtb	r2, r2
    bb34:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    bb36:	4b08      	ldr	r3, [pc, #32]	; (bb58 <usbdc_get_interface+0x88>)
    bb38:	6959      	ldr	r1, [r3, #20]
    bb3a:	2300      	movs	r3, #0
    bb3c:	2201      	movs	r2, #1
    bb3e:	2000      	movs	r0, #0
    bb40:	4c06      	ldr	r4, [pc, #24]	; (bb5c <usbdc_get_interface+0x8c>)
    bb42:	47a0      	blx	r4
			return true;
    bb44:	2301      	movs	r3, #1
    bb46:	e003      	b.n	bb50 <usbdc_get_interface+0x80>
	while (NULL != func) {
    bb48:	68fb      	ldr	r3, [r7, #12]
    bb4a:	2b00      	cmp	r3, #0
    bb4c:	d1e0      	bne.n	bb10 <usbdc_get_interface+0x40>
		}
	}
	return false;
    bb4e:	2300      	movs	r3, #0
}
    bb50:	4618      	mov	r0, r3
    bb52:	3714      	adds	r7, #20
    bb54:	46bd      	mov	sp, r7
    bb56:	bd90      	pop	{r4, r7, pc}
    bb58:	20001910 	.word	0x20001910
    bb5c:	0000c30d 	.word	0x0000c30d

0000bb60 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    bb60:	b590      	push	{r4, r7, lr}
    bb62:	b083      	sub	sp, #12
    bb64:	af00      	add	r7, sp, #0
    bb66:	4603      	mov	r3, r0
    bb68:	6039      	str	r1, [r7, #0]
    bb6a:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    bb6c:	683b      	ldr	r3, [r7, #0]
    bb6e:	785b      	ldrb	r3, [r3, #1]
    bb70:	2b0a      	cmp	r3, #10
    bb72:	d83a      	bhi.n	bbea <usbdc_get_req+0x8a>
    bb74:	a201      	add	r2, pc, #4	; (adr r2, bb7c <usbdc_get_req+0x1c>)
    bb76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    bb7a:	bf00      	nop
    bb7c:	0000bbd3 	.word	0x0000bbd3
    bb80:	0000bbeb 	.word	0x0000bbeb
    bb84:	0000bbeb 	.word	0x0000bbeb
    bb88:	0000bbeb 	.word	0x0000bbeb
    bb8c:	0000bbeb 	.word	0x0000bbeb
    bb90:	0000bbeb 	.word	0x0000bbeb
    bb94:	0000bba9 	.word	0x0000bba9
    bb98:	0000bbeb 	.word	0x0000bbeb
    bb9c:	0000bbb7 	.word	0x0000bbb7
    bba0:	0000bbeb 	.word	0x0000bbeb
    bba4:	0000bbe1 	.word	0x0000bbe1
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    bba8:	79fb      	ldrb	r3, [r7, #7]
    bbaa:	6839      	ldr	r1, [r7, #0]
    bbac:	4618      	mov	r0, r3
    bbae:	4b11      	ldr	r3, [pc, #68]	; (bbf4 <usbdc_get_req+0x94>)
    bbb0:	4798      	blx	r3
    bbb2:	4603      	mov	r3, r0
    bbb4:	e01a      	b.n	bbec <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    bbb6:	4b10      	ldr	r3, [pc, #64]	; (bbf8 <usbdc_get_req+0x98>)
    bbb8:	695b      	ldr	r3, [r3, #20]
    bbba:	4a0f      	ldr	r2, [pc, #60]	; (bbf8 <usbdc_get_req+0x98>)
    bbbc:	7ed2      	ldrb	r2, [r2, #27]
    bbbe:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    bbc0:	4b0d      	ldr	r3, [pc, #52]	; (bbf8 <usbdc_get_req+0x98>)
    bbc2:	6959      	ldr	r1, [r3, #20]
    bbc4:	79f8      	ldrb	r0, [r7, #7]
    bbc6:	2300      	movs	r3, #0
    bbc8:	2201      	movs	r2, #1
    bbca:	4c0c      	ldr	r4, [pc, #48]	; (bbfc <usbdc_get_req+0x9c>)
    bbcc:	47a0      	blx	r4
		return true;
    bbce:	2301      	movs	r3, #1
    bbd0:	e00c      	b.n	bbec <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    bbd2:	79fb      	ldrb	r3, [r7, #7]
    bbd4:	6839      	ldr	r1, [r7, #0]
    bbd6:	4618      	mov	r0, r3
    bbd8:	4b09      	ldr	r3, [pc, #36]	; (bc00 <usbdc_get_req+0xa0>)
    bbda:	4798      	blx	r3
    bbdc:	4603      	mov	r3, r0
    bbde:	e005      	b.n	bbec <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    bbe0:	6838      	ldr	r0, [r7, #0]
    bbe2:	4b08      	ldr	r3, [pc, #32]	; (bc04 <usbdc_get_req+0xa4>)
    bbe4:	4798      	blx	r3
    bbe6:	4603      	mov	r3, r0
    bbe8:	e000      	b.n	bbec <usbdc_get_req+0x8c>
	default:
		return false;
    bbea:	2300      	movs	r3, #0
	}
}
    bbec:	4618      	mov	r0, r3
    bbee:	370c      	adds	r7, #12
    bbf0:	46bd      	mov	sp, r7
    bbf2:	bd90      	pop	{r4, r7, pc}
    bbf4:	0000b9e9 	.word	0x0000b9e9
    bbf8:	20001910 	.word	0x20001910
    bbfc:	0000c30d 	.word	0x0000c30d
    bc00:	0000ba51 	.word	0x0000ba51
    bc04:	0000bad1 	.word	0x0000bad1

0000bc08 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    bc08:	b590      	push	{r4, r7, lr}
    bc0a:	b083      	sub	sp, #12
    bc0c:	af00      	add	r7, sp, #0
    bc0e:	4603      	mov	r3, r0
    bc10:	6039      	str	r1, [r7, #0]
    bc12:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    bc14:	683b      	ldr	r3, [r7, #0]
    bc16:	781b      	ldrb	r3, [r3, #0]
    bc18:	f003 031f 	and.w	r3, r3, #31
    bc1c:	2b02      	cmp	r3, #2
    bc1e:	d116      	bne.n	bc4e <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    bc20:	683b      	ldr	r3, [r7, #0]
    bc22:	88db      	ldrh	r3, [r3, #6]
    bc24:	b29b      	uxth	r3, r3
    bc26:	2b00      	cmp	r3, #0
    bc28:	d001      	beq.n	bc2e <usbdc_clear_ftr_req+0x26>
			return false;
    bc2a:	2300      	movs	r3, #0
    bc2c:	e010      	b.n	bc50 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    bc2e:	683b      	ldr	r3, [r7, #0]
    bc30:	889b      	ldrh	r3, [r3, #4]
    bc32:	b29b      	uxth	r3, r3
    bc34:	b2db      	uxtb	r3, r3
    bc36:	2100      	movs	r1, #0
    bc38:	4618      	mov	r0, r3
    bc3a:	4b07      	ldr	r3, [pc, #28]	; (bc58 <usbdc_clear_ftr_req+0x50>)
    bc3c:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    bc3e:	79f8      	ldrb	r0, [r7, #7]
    bc40:	2301      	movs	r3, #1
    bc42:	2200      	movs	r2, #0
    bc44:	2100      	movs	r1, #0
    bc46:	4c05      	ldr	r4, [pc, #20]	; (bc5c <usbdc_clear_ftr_req+0x54>)
    bc48:	47a0      	blx	r4
		return true;
    bc4a:	2301      	movs	r3, #1
    bc4c:	e000      	b.n	bc50 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    bc4e:	2300      	movs	r3, #0
	}
}
    bc50:	4618      	mov	r0, r3
    bc52:	370c      	adds	r7, #12
    bc54:	46bd      	mov	sp, r7
    bc56:	bd90      	pop	{r4, r7, pc}
    bc58:	00002e39 	.word	0x00002e39
    bc5c:	0000c30d 	.word	0x0000c30d

0000bc60 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    bc60:	b590      	push	{r4, r7, lr}
    bc62:	b083      	sub	sp, #12
    bc64:	af00      	add	r7, sp, #0
    bc66:	4603      	mov	r3, r0
    bc68:	6039      	str	r1, [r7, #0]
    bc6a:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    bc6c:	683b      	ldr	r3, [r7, #0]
    bc6e:	781b      	ldrb	r3, [r3, #0]
    bc70:	f003 031f 	and.w	r3, r3, #31
    bc74:	2b02      	cmp	r3, #2
    bc76:	d116      	bne.n	bca6 <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    bc78:	683b      	ldr	r3, [r7, #0]
    bc7a:	88db      	ldrh	r3, [r3, #6]
    bc7c:	b29b      	uxth	r3, r3
    bc7e:	2b00      	cmp	r3, #0
    bc80:	d001      	beq.n	bc86 <usbdc_set_ftr_req+0x26>
			return false;
    bc82:	2300      	movs	r3, #0
    bc84:	e010      	b.n	bca8 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    bc86:	683b      	ldr	r3, [r7, #0]
    bc88:	889b      	ldrh	r3, [r3, #4]
    bc8a:	b29b      	uxth	r3, r3
    bc8c:	b2db      	uxtb	r3, r3
    bc8e:	2101      	movs	r1, #1
    bc90:	4618      	mov	r0, r3
    bc92:	4b07      	ldr	r3, [pc, #28]	; (bcb0 <usbdc_set_ftr_req+0x50>)
    bc94:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    bc96:	79f8      	ldrb	r0, [r7, #7]
    bc98:	2301      	movs	r3, #1
    bc9a:	2200      	movs	r2, #0
    bc9c:	2100      	movs	r1, #0
    bc9e:	4c05      	ldr	r4, [pc, #20]	; (bcb4 <usbdc_set_ftr_req+0x54>)
    bca0:	47a0      	blx	r4
		return true;
    bca2:	2301      	movs	r3, #1
    bca4:	e000      	b.n	bca8 <usbdc_set_ftr_req+0x48>
	default:
		return false;
    bca6:	2300      	movs	r3, #0
	}
}
    bca8:	4618      	mov	r0, r3
    bcaa:	370c      	adds	r7, #12
    bcac:	46bd      	mov	sp, r7
    bcae:	bd90      	pop	{r4, r7, pc}
    bcb0:	00002e39 	.word	0x00002e39
    bcb4:	0000c30d 	.word	0x0000c30d

0000bcb8 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    bcb8:	b580      	push	{r7, lr}
    bcba:	b082      	sub	sp, #8
    bcbc:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    bcbe:	4b0a      	ldr	r3, [pc, #40]	; (bce8 <usbdc_unconfig+0x30>)
    bcc0:	691b      	ldr	r3, [r3, #16]
    bcc2:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    bcc4:	e008      	b.n	bcd8 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    bcc6:	687b      	ldr	r3, [r7, #4]
    bcc8:	685b      	ldr	r3, [r3, #4]
    bcca:	2200      	movs	r2, #0
    bccc:	2101      	movs	r1, #1
    bcce:	6878      	ldr	r0, [r7, #4]
    bcd0:	4798      	blx	r3
		func = func->next;
    bcd2:	687b      	ldr	r3, [r7, #4]
    bcd4:	681b      	ldr	r3, [r3, #0]
    bcd6:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    bcd8:	687b      	ldr	r3, [r7, #4]
    bcda:	2b00      	cmp	r3, #0
    bcdc:	d1f3      	bne.n	bcc6 <usbdc_unconfig+0xe>
	}
}
    bcde:	bf00      	nop
    bce0:	3708      	adds	r7, #8
    bce2:	46bd      	mov	sp, r7
    bce4:	bd80      	pop	{r7, pc}
    bce6:	bf00      	nop
    bce8:	20001910 	.word	0x20001910

0000bcec <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    bcec:	b580      	push	{r7, lr}
    bcee:	b088      	sub	sp, #32
    bcf0:	af00      	add	r7, sp, #0
    bcf2:	4603      	mov	r3, r0
    bcf4:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    bcf6:	2300      	movs	r3, #0
    bcf8:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    bcfa:	23ff      	movs	r3, #255	; 0xff
    bcfc:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    bcfe:	79fb      	ldrb	r3, [r7, #7]
    bd00:	2b00      	cmp	r3, #0
    bd02:	d103      	bne.n	bd0c <usbdc_set_config+0x20>
		usbdc_unconfig();
    bd04:	4b2e      	ldr	r3, [pc, #184]	; (bdc0 <usbdc_set_config+0xd4>)
    bd06:	4798      	blx	r3
		return true;
    bd08:	2301      	movs	r3, #1
    bd0a:	e055      	b.n	bdb8 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    bd0c:	69bb      	ldr	r3, [r7, #24]
    bd0e:	2b00      	cmp	r3, #0
    bd10:	d10a      	bne.n	bd28 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    bd12:	4b2c      	ldr	r3, [pc, #176]	; (bdc4 <usbdc_set_config+0xd8>)
    bd14:	681b      	ldr	r3, [r3, #0]
    bd16:	6818      	ldr	r0, [r3, #0]
    bd18:	4b2a      	ldr	r3, [pc, #168]	; (bdc4 <usbdc_set_config+0xd8>)
    bd1a:	681b      	ldr	r3, [r3, #0]
    bd1c:	685b      	ldr	r3, [r3, #4]
    bd1e:	79fa      	ldrb	r2, [r7, #7]
    bd20:	4619      	mov	r1, r3
    bd22:	4b29      	ldr	r3, [pc, #164]	; (bdc8 <usbdc_set_config+0xdc>)
    bd24:	4798      	blx	r3
    bd26:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    bd28:	69bb      	ldr	r3, [r7, #24]
    bd2a:	2b00      	cmp	r3, #0
    bd2c:	d101      	bne.n	bd32 <usbdc_set_config+0x46>
		return false;
    bd2e:	2300      	movs	r3, #0
    bd30:	e042      	b.n	bdb8 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    bd32:	69b8      	ldr	r0, [r7, #24]
    bd34:	4b25      	ldr	r3, [pc, #148]	; (bdcc <usbdc_set_config+0xe0>)
    bd36:	4798      	blx	r3
    bd38:	4603      	mov	r3, r0
    bd3a:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    bd3c:	8abb      	ldrh	r3, [r7, #20]
    bd3e:	69ba      	ldr	r2, [r7, #24]
    bd40:	4413      	add	r3, r2
    bd42:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    bd44:	693b      	ldr	r3, [r7, #16]
    bd46:	2204      	movs	r2, #4
    bd48:	4619      	mov	r1, r3
    bd4a:	69b8      	ldr	r0, [r7, #24]
    bd4c:	4b20      	ldr	r3, [pc, #128]	; (bdd0 <usbdc_set_config+0xe4>)
    bd4e:	4798      	blx	r3
    bd50:	4603      	mov	r3, r0
    bd52:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    bd54:	e02c      	b.n	bdb0 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    bd56:	68fb      	ldr	r3, [r7, #12]
    bd58:	3302      	adds	r3, #2
    bd5a:	781b      	ldrb	r3, [r3, #0]
    bd5c:	7dfa      	ldrb	r2, [r7, #23]
    bd5e:	429a      	cmp	r2, r3
    bd60:	d018      	beq.n	bd94 <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    bd62:	68fb      	ldr	r3, [r7, #12]
    bd64:	789b      	ldrb	r3, [r3, #2]
    bd66:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    bd68:	4b16      	ldr	r3, [pc, #88]	; (bdc4 <usbdc_set_config+0xd8>)
    bd6a:	691b      	ldr	r3, [r3, #16]
    bd6c:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    bd6e:	e00c      	b.n	bd8a <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    bd70:	69fb      	ldr	r3, [r7, #28]
    bd72:	685b      	ldr	r3, [r3, #4]
    bd74:	f107 020c 	add.w	r2, r7, #12
    bd78:	2100      	movs	r1, #0
    bd7a:	69f8      	ldr	r0, [r7, #28]
    bd7c:	4798      	blx	r3
    bd7e:	4603      	mov	r3, r0
    bd80:	2b00      	cmp	r3, #0
    bd82:	d006      	beq.n	bd92 <usbdc_set_config+0xa6>
					func = func->next;
    bd84:	69fb      	ldr	r3, [r7, #28]
    bd86:	681b      	ldr	r3, [r3, #0]
    bd88:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    bd8a:	69fb      	ldr	r3, [r7, #28]
    bd8c:	2b00      	cmp	r3, #0
    bd8e:	d1ef      	bne.n	bd70 <usbdc_set_config+0x84>
    bd90:	e000      	b.n	bd94 <usbdc_set_config+0xa8>
				} else {
					break;
    bd92:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    bd94:	68fb      	ldr	r3, [r7, #12]
    bd96:	4618      	mov	r0, r3
    bd98:	4b0e      	ldr	r3, [pc, #56]	; (bdd4 <usbdc_set_config+0xe8>)
    bd9a:	4798      	blx	r3
    bd9c:	4603      	mov	r3, r0
    bd9e:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    bda0:	68fb      	ldr	r3, [r7, #12]
    bda2:	6939      	ldr	r1, [r7, #16]
    bda4:	2204      	movs	r2, #4
    bda6:	4618      	mov	r0, r3
    bda8:	4b09      	ldr	r3, [pc, #36]	; (bdd0 <usbdc_set_config+0xe4>)
    bdaa:	4798      	blx	r3
    bdac:	4603      	mov	r3, r0
    bdae:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    bdb0:	68fb      	ldr	r3, [r7, #12]
    bdb2:	2b00      	cmp	r3, #0
    bdb4:	d1cf      	bne.n	bd56 <usbdc_set_config+0x6a>
	}
	return true;
    bdb6:	2301      	movs	r3, #1
}
    bdb8:	4618      	mov	r0, r3
    bdba:	3720      	adds	r7, #32
    bdbc:	46bd      	mov	sp, r7
    bdbe:	bd80      	pop	{r7, pc}
    bdc0:	0000bcb9 	.word	0x0000bcb9
    bdc4:	20001910 	.word	0x20001910
    bdc8:	0000c65d 	.word	0x0000c65d
    bdcc:	0000b809 	.word	0x0000b809
    bdd0:	0000c59d 	.word	0x0000c59d
    bdd4:	0000b7e5 	.word	0x0000b7e5

0000bdd8 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    bdd8:	b580      	push	{r7, lr}
    bdda:	b082      	sub	sp, #8
    bddc:	af00      	add	r7, sp, #0
    bdde:	4603      	mov	r3, r0
    bde0:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    bde2:	79fb      	ldrb	r3, [r7, #7]
    bde4:	4618      	mov	r0, r3
    bde6:	4b03      	ldr	r3, [pc, #12]	; (bdf4 <usbdc_set_address+0x1c>)
    bde8:	4798      	blx	r3
}
    bdea:	bf00      	nop
    bdec:	3708      	adds	r7, #8
    bdee:	46bd      	mov	sp, r7
    bdf0:	bd80      	pop	{r7, pc}
    bdf2:	bf00      	nop
    bdf4:	00002aa9 	.word	0x00002aa9

0000bdf8 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    bdf8:	b590      	push	{r4, r7, lr}
    bdfa:	b087      	sub	sp, #28
    bdfc:	af00      	add	r7, sp, #0
    bdfe:	4603      	mov	r3, r0
    be00:	460a      	mov	r2, r1
    be02:	80fb      	strh	r3, [r7, #6]
    be04:	4613      	mov	r3, r2
    be06:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    be08:	2300      	movs	r3, #0
    be0a:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    be0c:	693b      	ldr	r3, [r7, #16]
    be0e:	2b00      	cmp	r3, #0
    be10:	d10b      	bne.n	be2a <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    be12:	4b43      	ldr	r3, [pc, #268]	; (bf20 <usbdc_set_interface+0x128>)
    be14:	681b      	ldr	r3, [r3, #0]
    be16:	6818      	ldr	r0, [r3, #0]
    be18:	4b41      	ldr	r3, [pc, #260]	; (bf20 <usbdc_set_interface+0x128>)
    be1a:	681b      	ldr	r3, [r3, #0]
    be1c:	6859      	ldr	r1, [r3, #4]
    be1e:	4b40      	ldr	r3, [pc, #256]	; (bf20 <usbdc_set_interface+0x128>)
    be20:	7edb      	ldrb	r3, [r3, #27]
    be22:	461a      	mov	r2, r3
    be24:	4b3f      	ldr	r3, [pc, #252]	; (bf24 <usbdc_set_interface+0x12c>)
    be26:	4798      	blx	r3
    be28:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    be2a:	693b      	ldr	r3, [r7, #16]
    be2c:	2b00      	cmp	r3, #0
    be2e:	d101      	bne.n	be34 <usbdc_set_interface+0x3c>
		return false;
    be30:	2300      	movs	r3, #0
    be32:	e071      	b.n	bf18 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    be34:	693b      	ldr	r3, [r7, #16]
    be36:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    be38:	6938      	ldr	r0, [r7, #16]
    be3a:	4b3b      	ldr	r3, [pc, #236]	; (bf28 <usbdc_set_interface+0x130>)
    be3c:	4798      	blx	r3
    be3e:	4603      	mov	r3, r0
    be40:	461a      	mov	r2, r3
    be42:	693b      	ldr	r3, [r7, #16]
    be44:	4413      	add	r3, r2
    be46:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    be48:	68bb      	ldr	r3, [r7, #8]
    be4a:	68f9      	ldr	r1, [r7, #12]
    be4c:	2204      	movs	r2, #4
    be4e:	4618      	mov	r0, r3
    be50:	4b36      	ldr	r3, [pc, #216]	; (bf2c <usbdc_set_interface+0x134>)
    be52:	4798      	blx	r3
    be54:	6138      	str	r0, [r7, #16]
    be56:	693b      	ldr	r3, [r7, #16]
    be58:	2b00      	cmp	r3, #0
    be5a:	d113      	bne.n	be84 <usbdc_set_interface+0x8c>
		return false;
    be5c:	2300      	movs	r3, #0
    be5e:	e05b      	b.n	bf18 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    be60:	68bb      	ldr	r3, [r7, #8]
    be62:	4618      	mov	r0, r3
    be64:	4b32      	ldr	r3, [pc, #200]	; (bf30 <usbdc_set_interface+0x138>)
    be66:	4798      	blx	r3
    be68:	4603      	mov	r3, r0
    be6a:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    be6c:	68bb      	ldr	r3, [r7, #8]
    be6e:	68f9      	ldr	r1, [r7, #12]
    be70:	2204      	movs	r2, #4
    be72:	4618      	mov	r0, r3
    be74:	4b2d      	ldr	r3, [pc, #180]	; (bf2c <usbdc_set_interface+0x134>)
    be76:	4798      	blx	r3
    be78:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    be7a:	693b      	ldr	r3, [r7, #16]
    be7c:	2b00      	cmp	r3, #0
    be7e:	d101      	bne.n	be84 <usbdc_set_interface+0x8c>
			return false;
    be80:	2300      	movs	r3, #0
    be82:	e049      	b.n	bf18 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    be84:	693b      	ldr	r3, [r7, #16]
    be86:	3302      	adds	r3, #2
    be88:	781b      	ldrb	r3, [r3, #0]
    be8a:	b29b      	uxth	r3, r3
    be8c:	88ba      	ldrh	r2, [r7, #4]
    be8e:	429a      	cmp	r2, r3
    be90:	d1e6      	bne.n	be60 <usbdc_set_interface+0x68>
    be92:	693b      	ldr	r3, [r7, #16]
    be94:	3303      	adds	r3, #3
    be96:	781b      	ldrb	r3, [r3, #0]
    be98:	b29b      	uxth	r3, r3
    be9a:	88fa      	ldrh	r2, [r7, #6]
    be9c:	429a      	cmp	r2, r3
    be9e:	d1df      	bne.n	be60 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    bea0:	693b      	ldr	r3, [r7, #16]
    bea2:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    bea4:	4b1e      	ldr	r3, [pc, #120]	; (bf20 <usbdc_set_interface+0x128>)
    bea6:	691b      	ldr	r3, [r3, #16]
    bea8:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    beaa:	e031      	b.n	bf10 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    beac:	697b      	ldr	r3, [r7, #20]
    beae:	685b      	ldr	r3, [r3, #4]
    beb0:	f107 0208 	add.w	r2, r7, #8
    beb4:	2101      	movs	r1, #1
    beb6:	6978      	ldr	r0, [r7, #20]
    beb8:	4798      	blx	r3
    beba:	4603      	mov	r3, r0
    bebc:	2b00      	cmp	r3, #0
    bebe:	d003      	beq.n	bec8 <usbdc_set_interface+0xd0>
			func = func->next;
    bec0:	697b      	ldr	r3, [r7, #20]
    bec2:	681b      	ldr	r3, [r3, #0]
    bec4:	617b      	str	r3, [r7, #20]
    bec6:	e023      	b.n	bf10 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    bec8:	697b      	ldr	r3, [r7, #20]
    beca:	685b      	ldr	r3, [r3, #4]
    becc:	f107 0208 	add.w	r2, r7, #8
    bed0:	2100      	movs	r1, #0
    bed2:	6978      	ldr	r0, [r7, #20]
    bed4:	4798      	blx	r3
    bed6:	4603      	mov	r3, r0
    bed8:	2b00      	cmp	r3, #0
    beda:	d117      	bne.n	bf0c <usbdc_set_interface+0x114>
			if (alt_set) {
    bedc:	88fb      	ldrh	r3, [r7, #6]
    bede:	2b00      	cmp	r3, #0
    bee0:	d00c      	beq.n	befc <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    bee2:	4b0f      	ldr	r3, [pc, #60]	; (bf20 <usbdc_set_interface+0x128>)
    bee4:	7f5b      	ldrb	r3, [r3, #29]
    bee6:	b25a      	sxtb	r2, r3
    bee8:	88bb      	ldrh	r3, [r7, #4]
    beea:	2101      	movs	r1, #1
    beec:	fa01 f303 	lsl.w	r3, r1, r3
    bef0:	b25b      	sxtb	r3, r3
    bef2:	4313      	orrs	r3, r2
    bef4:	b25b      	sxtb	r3, r3
    bef6:	b2da      	uxtb	r2, r3
    bef8:	4b09      	ldr	r3, [pc, #36]	; (bf20 <usbdc_set_interface+0x128>)
    befa:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    befc:	2300      	movs	r3, #0
    befe:	2200      	movs	r2, #0
    bf00:	2100      	movs	r1, #0
    bf02:	2000      	movs	r0, #0
    bf04:	4c0b      	ldr	r4, [pc, #44]	; (bf34 <usbdc_set_interface+0x13c>)
    bf06:	47a0      	blx	r4
			return true;
    bf08:	2301      	movs	r3, #1
    bf0a:	e005      	b.n	bf18 <usbdc_set_interface+0x120>
		} else {
			return false;
    bf0c:	2300      	movs	r3, #0
    bf0e:	e003      	b.n	bf18 <usbdc_set_interface+0x120>
	while (NULL != func) {
    bf10:	697b      	ldr	r3, [r7, #20]
    bf12:	2b00      	cmp	r3, #0
    bf14:	d1ca      	bne.n	beac <usbdc_set_interface+0xb4>
		}
	}

	return false;
    bf16:	2300      	movs	r3, #0
}
    bf18:	4618      	mov	r0, r3
    bf1a:	371c      	adds	r7, #28
    bf1c:	46bd      	mov	sp, r7
    bf1e:	bd90      	pop	{r4, r7, pc}
    bf20:	20001910 	.word	0x20001910
    bf24:	0000c65d 	.word	0x0000c65d
    bf28:	0000b809 	.word	0x0000b809
    bf2c:	0000c59d 	.word	0x0000c59d
    bf30:	0000b7e5 	.word	0x0000b7e5
    bf34:	0000c30d 	.word	0x0000c30d

0000bf38 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    bf38:	b590      	push	{r4, r7, lr}
    bf3a:	b083      	sub	sp, #12
    bf3c:	af00      	add	r7, sp, #0
    bf3e:	4603      	mov	r3, r0
    bf40:	6039      	str	r1, [r7, #0]
    bf42:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    bf44:	683b      	ldr	r3, [r7, #0]
    bf46:	785b      	ldrb	r3, [r3, #1]
    bf48:	3b01      	subs	r3, #1
    bf4a:	2b0a      	cmp	r3, #10
    bf4c:	d85b      	bhi.n	c006 <usbdc_set_req+0xce>
    bf4e:	a201      	add	r2, pc, #4	; (adr r2, bf54 <usbdc_set_req+0x1c>)
    bf50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    bf54:	0000bfd3 	.word	0x0000bfd3
    bf58:	0000c007 	.word	0x0000c007
    bf5c:	0000bfe1 	.word	0x0000bfe1
    bf60:	0000c007 	.word	0x0000c007
    bf64:	0000bf81 	.word	0x0000bf81
    bf68:	0000c007 	.word	0x0000c007
    bf6c:	0000c007 	.word	0x0000c007
    bf70:	0000c007 	.word	0x0000c007
    bf74:	0000bf9b 	.word	0x0000bf9b
    bf78:	0000c007 	.word	0x0000c007
    bf7c:	0000bfef 	.word	0x0000bfef
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    bf80:	79f8      	ldrb	r0, [r7, #7]
    bf82:	2301      	movs	r3, #1
    bf84:	2200      	movs	r2, #0
    bf86:	2100      	movs	r1, #0
    bf88:	4c21      	ldr	r4, [pc, #132]	; (c010 <usbdc_set_req+0xd8>)
    bf8a:	47a0      	blx	r4
    bf8c:	4603      	mov	r3, r0
    bf8e:	2b00      	cmp	r3, #0
    bf90:	bf0c      	ite	eq
    bf92:	2301      	moveq	r3, #1
    bf94:	2300      	movne	r3, #0
    bf96:	b2db      	uxtb	r3, r3
    bf98:	e036      	b.n	c008 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    bf9a:	683b      	ldr	r3, [r7, #0]
    bf9c:	885b      	ldrh	r3, [r3, #2]
    bf9e:	b29b      	uxth	r3, r3
    bfa0:	b2db      	uxtb	r3, r3
    bfa2:	4618      	mov	r0, r3
    bfa4:	4b1b      	ldr	r3, [pc, #108]	; (c014 <usbdc_set_req+0xdc>)
    bfa6:	4798      	blx	r3
    bfa8:	4603      	mov	r3, r0
    bfaa:	f083 0301 	eor.w	r3, r3, #1
    bfae:	b2db      	uxtb	r3, r3
    bfb0:	2b00      	cmp	r3, #0
    bfb2:	d001      	beq.n	bfb8 <usbdc_set_req+0x80>
			return false;
    bfb4:	2300      	movs	r3, #0
    bfb6:	e027      	b.n	c008 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    bfb8:	79f8      	ldrb	r0, [r7, #7]
    bfba:	2301      	movs	r3, #1
    bfbc:	2200      	movs	r2, #0
    bfbe:	2100      	movs	r1, #0
    bfc0:	4c13      	ldr	r4, [pc, #76]	; (c010 <usbdc_set_req+0xd8>)
    bfc2:	47a0      	blx	r4
    bfc4:	4603      	mov	r3, r0
    bfc6:	2b00      	cmp	r3, #0
    bfc8:	bf0c      	ite	eq
    bfca:	2301      	moveq	r3, #1
    bfcc:	2300      	movne	r3, #0
    bfce:	b2db      	uxtb	r3, r3
    bfd0:	e01a      	b.n	c008 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    bfd2:	79fb      	ldrb	r3, [r7, #7]
    bfd4:	6839      	ldr	r1, [r7, #0]
    bfd6:	4618      	mov	r0, r3
    bfd8:	4b0f      	ldr	r3, [pc, #60]	; (c018 <usbdc_set_req+0xe0>)
    bfda:	4798      	blx	r3
    bfdc:	4603      	mov	r3, r0
    bfde:	e013      	b.n	c008 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    bfe0:	79fb      	ldrb	r3, [r7, #7]
    bfe2:	6839      	ldr	r1, [r7, #0]
    bfe4:	4618      	mov	r0, r3
    bfe6:	4b0d      	ldr	r3, [pc, #52]	; (c01c <usbdc_set_req+0xe4>)
    bfe8:	4798      	blx	r3
    bfea:	4603      	mov	r3, r0
    bfec:	e00c      	b.n	c008 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    bfee:	683b      	ldr	r3, [r7, #0]
    bff0:	885b      	ldrh	r3, [r3, #2]
    bff2:	b29a      	uxth	r2, r3
    bff4:	683b      	ldr	r3, [r7, #0]
    bff6:	889b      	ldrh	r3, [r3, #4]
    bff8:	b29b      	uxth	r3, r3
    bffa:	4619      	mov	r1, r3
    bffc:	4610      	mov	r0, r2
    bffe:	4b08      	ldr	r3, [pc, #32]	; (c020 <usbdc_set_req+0xe8>)
    c000:	4798      	blx	r3
    c002:	4603      	mov	r3, r0
    c004:	e000      	b.n	c008 <usbdc_set_req+0xd0>
	default:
		return false;
    c006:	2300      	movs	r3, #0
	}
}
    c008:	4618      	mov	r0, r3
    c00a:	370c      	adds	r7, #12
    c00c:	46bd      	mov	sp, r7
    c00e:	bd90      	pop	{r4, r7, pc}
    c010:	0000c30d 	.word	0x0000c30d
    c014:	0000bced 	.word	0x0000bced
    c018:	0000bc09 	.word	0x0000bc09
    c01c:	0000bc61 	.word	0x0000bc61
    c020:	0000bdf9 	.word	0x0000bdf9

0000c024 <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    c024:	b580      	push	{r7, lr}
    c026:	b082      	sub	sp, #8
    c028:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    c02a:	4b0a      	ldr	r3, [pc, #40]	; (c054 <usbdc_sof_notify+0x30>)
    c02c:	685b      	ldr	r3, [r3, #4]
    c02e:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    c030:	e009      	b.n	c046 <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    c032:	687b      	ldr	r3, [r7, #4]
    c034:	685b      	ldr	r3, [r3, #4]
    c036:	2b00      	cmp	r3, #0
    c038:	d002      	beq.n	c040 <usbdc_sof_notify+0x1c>
			sof->cb();
    c03a:	687b      	ldr	r3, [r7, #4]
    c03c:	685b      	ldr	r3, [r3, #4]
    c03e:	4798      	blx	r3
		}
		sof = sof->next;
    c040:	687b      	ldr	r3, [r7, #4]
    c042:	681b      	ldr	r3, [r3, #0]
    c044:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    c046:	687b      	ldr	r3, [r7, #4]
    c048:	2b00      	cmp	r3, #0
    c04a:	d1f2      	bne.n	c032 <usbdc_sof_notify+0xe>
	}
}
    c04c:	bf00      	nop
    c04e:	3708      	adds	r7, #8
    c050:	46bd      	mov	sp, r7
    c052:	bd80      	pop	{r7, pc}
    c054:	20001910 	.word	0x20001910

0000c058 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    c058:	b580      	push	{r7, lr}
    c05a:	b084      	sub	sp, #16
    c05c:	af00      	add	r7, sp, #0
    c05e:	4603      	mov	r3, r0
    c060:	6039      	str	r1, [r7, #0]
    c062:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    c064:	4b0b      	ldr	r3, [pc, #44]	; (c094 <usbdc_change_notify+0x3c>)
    c066:	68db      	ldr	r3, [r3, #12]
    c068:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    c06a:	e00c      	b.n	c086 <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    c06c:	68fb      	ldr	r3, [r7, #12]
    c06e:	685b      	ldr	r3, [r3, #4]
    c070:	2b00      	cmp	r3, #0
    c072:	d005      	beq.n	c080 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    c074:	68fb      	ldr	r3, [r7, #12]
    c076:	685b      	ldr	r3, [r3, #4]
    c078:	79fa      	ldrb	r2, [r7, #7]
    c07a:	6839      	ldr	r1, [r7, #0]
    c07c:	4610      	mov	r0, r2
    c07e:	4798      	blx	r3
		}
		cg = cg->next;
    c080:	68fb      	ldr	r3, [r7, #12]
    c082:	681b      	ldr	r3, [r3, #0]
    c084:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    c086:	68fb      	ldr	r3, [r7, #12]
    c088:	2b00      	cmp	r3, #0
    c08a:	d1ef      	bne.n	c06c <usbdc_change_notify+0x14>
	}
}
    c08c:	bf00      	nop
    c08e:	3710      	adds	r7, #16
    c090:	46bd      	mov	sp, r7
    c092:	bd80      	pop	{r7, pc}
    c094:	20001910 	.word	0x20001910

0000c098 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c098:	b580      	push	{r7, lr}
    c09a:	b084      	sub	sp, #16
    c09c:	af00      	add	r7, sp, #0
    c09e:	4603      	mov	r3, r0
    c0a0:	6039      	str	r1, [r7, #0]
    c0a2:	71fb      	strb	r3, [r7, #7]
    c0a4:	4613      	mov	r3, r2
    c0a6:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    c0a8:	4b12      	ldr	r3, [pc, #72]	; (c0f4 <usbdc_request_handler+0x5c>)
    c0aa:	689b      	ldr	r3, [r3, #8]
    c0ac:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    c0ae:	e019      	b.n	c0e4 <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    c0b0:	68fb      	ldr	r3, [r7, #12]
    c0b2:	685b      	ldr	r3, [r3, #4]
    c0b4:	2b00      	cmp	r3, #0
    c0b6:	d012      	beq.n	c0de <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    c0b8:	68fb      	ldr	r3, [r7, #12]
    c0ba:	685b      	ldr	r3, [r3, #4]
    c0bc:	79ba      	ldrb	r2, [r7, #6]
    c0be:	79f8      	ldrb	r0, [r7, #7]
    c0c0:	6839      	ldr	r1, [r7, #0]
    c0c2:	4798      	blx	r3
    c0c4:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    c0c6:	68bb      	ldr	r3, [r7, #8]
    c0c8:	2b00      	cmp	r3, #0
    c0ca:	d101      	bne.n	c0d0 <usbdc_request_handler+0x38>
				return true;
    c0cc:	2301      	movs	r3, #1
    c0ce:	e00d      	b.n	c0ec <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    c0d0:	68bb      	ldr	r3, [r7, #8]
    c0d2:	f113 0f0a 	cmn.w	r3, #10
    c0d6:	d002      	beq.n	c0de <usbdc_request_handler+0x46>
				return -1;
    c0d8:	f04f 33ff 	mov.w	r3, #4294967295
    c0dc:	e006      	b.n	c0ec <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    c0de:	68fb      	ldr	r3, [r7, #12]
    c0e0:	681b      	ldr	r3, [r3, #0]
    c0e2:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    c0e4:	68fb      	ldr	r3, [r7, #12]
    c0e6:	2b00      	cmp	r3, #0
    c0e8:	d1e2      	bne.n	c0b0 <usbdc_request_handler+0x18>
	}
	return false;
    c0ea:	2300      	movs	r3, #0
}
    c0ec:	4618      	mov	r0, r3
    c0ee:	3710      	adds	r7, #16
    c0f0:	46bd      	mov	sp, r7
    c0f2:	bd80      	pop	{r7, pc}
    c0f4:	20001910 	.word	0x20001910

0000c0f8 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    c0f8:	b580      	push	{r7, lr}
    c0fa:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    c0fc:	4b01      	ldr	r3, [pc, #4]	; (c104 <usbd_sof_cb+0xc>)
    c0fe:	4798      	blx	r3
}
    c100:	bf00      	nop
    c102:	bd80      	pop	{r7, pc}
    c104:	0000c025 	.word	0x0000c025

0000c108 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    c108:	b580      	push	{r7, lr}
    c10a:	b082      	sub	sp, #8
    c10c:	af00      	add	r7, sp, #0
    c10e:	4603      	mov	r3, r0
    c110:	6039      	str	r1, [r7, #0]
    c112:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    c114:	79fb      	ldrb	r3, [r7, #7]
    c116:	2200      	movs	r2, #0
    c118:	6839      	ldr	r1, [r7, #0]
    c11a:	4618      	mov	r0, r3
    c11c:	4b14      	ldr	r3, [pc, #80]	; (c170 <usbdc_cb_ctl_req+0x68>)
    c11e:	4798      	blx	r3
    c120:	4603      	mov	r3, r0
    c122:	f1b3 3fff 	cmp.w	r3, #4294967295
    c126:	d00b      	beq.n	c140 <usbdc_cb_ctl_req+0x38>
    c128:	2b01      	cmp	r3, #1
    c12a:	d007      	beq.n	c13c <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    c12c:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    c12e:	683b      	ldr	r3, [r7, #0]
    c130:	781b      	ldrb	r3, [r3, #0]
    c132:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    c136:	2b00      	cmp	r3, #0
    c138:	d007      	beq.n	c14a <usbdc_cb_ctl_req+0x42>
    c13a:	e003      	b.n	c144 <usbdc_cb_ctl_req+0x3c>
		return true;
    c13c:	2301      	movs	r3, #1
    c13e:	e013      	b.n	c168 <usbdc_cb_ctl_req+0x60>
		return false;
    c140:	2300      	movs	r3, #0
    c142:	e011      	b.n	c168 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    c144:	2b80      	cmp	r3, #128	; 0x80
    c146:	d007      	beq.n	c158 <usbdc_cb_ctl_req+0x50>
    c148:	e00d      	b.n	c166 <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    c14a:	79fb      	ldrb	r3, [r7, #7]
    c14c:	6839      	ldr	r1, [r7, #0]
    c14e:	4618      	mov	r0, r3
    c150:	4b08      	ldr	r3, [pc, #32]	; (c174 <usbdc_cb_ctl_req+0x6c>)
    c152:	4798      	blx	r3
    c154:	4603      	mov	r3, r0
    c156:	e007      	b.n	c168 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    c158:	79fb      	ldrb	r3, [r7, #7]
    c15a:	6839      	ldr	r1, [r7, #0]
    c15c:	4618      	mov	r0, r3
    c15e:	4b06      	ldr	r3, [pc, #24]	; (c178 <usbdc_cb_ctl_req+0x70>)
    c160:	4798      	blx	r3
    c162:	4603      	mov	r3, r0
    c164:	e000      	b.n	c168 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    c166:	2300      	movs	r3, #0
	}
}
    c168:	4618      	mov	r0, r3
    c16a:	3708      	adds	r7, #8
    c16c:	46bd      	mov	sp, r7
    c16e:	bd80      	pop	{r7, pc}
    c170:	0000c099 	.word	0x0000c099
    c174:	0000bf39 	.word	0x0000bf39
    c178:	0000bb61 	.word	0x0000bb61

0000c17c <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    c17c:	b580      	push	{r7, lr}
    c17e:	b082      	sub	sp, #8
    c180:	af00      	add	r7, sp, #0
    c182:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    c184:	687b      	ldr	r3, [r7, #4]
    c186:	781b      	ldrb	r3, [r3, #0]
    c188:	2b00      	cmp	r3, #0
    c18a:	d135      	bne.n	c1f8 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    c18c:	687b      	ldr	r3, [r7, #4]
    c18e:	785b      	ldrb	r3, [r3, #1]
    c190:	2b05      	cmp	r3, #5
    c192:	d019      	beq.n	c1c8 <usbdc_ctrl_status_end+0x4c>
    c194:	2b09      	cmp	r3, #9
    c196:	d000      	beq.n	c19a <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    c198:	e02f      	b.n	c1fa <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    c19a:	687b      	ldr	r3, [r7, #4]
    c19c:	885b      	ldrh	r3, [r3, #2]
    c19e:	b29b      	uxth	r3, r3
    c1a0:	b2da      	uxtb	r2, r3
    c1a2:	4b17      	ldr	r3, [pc, #92]	; (c200 <usbdc_ctrl_status_end+0x84>)
    c1a4:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    c1a6:	687b      	ldr	r3, [r7, #4]
    c1a8:	885b      	ldrh	r3, [r3, #2]
    c1aa:	b29b      	uxth	r3, r3
    c1ac:	2b00      	cmp	r3, #0
    c1ae:	d001      	beq.n	c1b4 <usbdc_ctrl_status_end+0x38>
    c1b0:	2204      	movs	r2, #4
    c1b2:	e000      	b.n	c1b6 <usbdc_ctrl_status_end+0x3a>
    c1b4:	2203      	movs	r2, #3
    c1b6:	4b12      	ldr	r3, [pc, #72]	; (c200 <usbdc_ctrl_status_end+0x84>)
    c1b8:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    c1ba:	4b11      	ldr	r3, [pc, #68]	; (c200 <usbdc_ctrl_status_end+0x84>)
    c1bc:	7e9b      	ldrb	r3, [r3, #26]
    c1be:	4619      	mov	r1, r3
    c1c0:	2001      	movs	r0, #1
    c1c2:	4b10      	ldr	r3, [pc, #64]	; (c204 <usbdc_ctrl_status_end+0x88>)
    c1c4:	4798      	blx	r3
		break;
    c1c6:	e018      	b.n	c1fa <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    c1c8:	687b      	ldr	r3, [r7, #4]
    c1ca:	885b      	ldrh	r3, [r3, #2]
    c1cc:	b29b      	uxth	r3, r3
    c1ce:	b2db      	uxtb	r3, r3
    c1d0:	4618      	mov	r0, r3
    c1d2:	4b0d      	ldr	r3, [pc, #52]	; (c208 <usbdc_ctrl_status_end+0x8c>)
    c1d4:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    c1d6:	687b      	ldr	r3, [r7, #4]
    c1d8:	885b      	ldrh	r3, [r3, #2]
    c1da:	b29b      	uxth	r3, r3
    c1dc:	2b00      	cmp	r3, #0
    c1de:	d001      	beq.n	c1e4 <usbdc_ctrl_status_end+0x68>
    c1e0:	2203      	movs	r2, #3
    c1e2:	e000      	b.n	c1e6 <usbdc_ctrl_status_end+0x6a>
    c1e4:	2202      	movs	r2, #2
    c1e6:	4b06      	ldr	r3, [pc, #24]	; (c200 <usbdc_ctrl_status_end+0x84>)
    c1e8:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    c1ea:	4b05      	ldr	r3, [pc, #20]	; (c200 <usbdc_ctrl_status_end+0x84>)
    c1ec:	7e9b      	ldrb	r3, [r3, #26]
    c1ee:	4619      	mov	r1, r3
    c1f0:	2001      	movs	r0, #1
    c1f2:	4b04      	ldr	r3, [pc, #16]	; (c204 <usbdc_ctrl_status_end+0x88>)
    c1f4:	4798      	blx	r3
		break;
    c1f6:	e000      	b.n	c1fa <usbdc_ctrl_status_end+0x7e>
		return;
    c1f8:	bf00      	nop
	}
}
    c1fa:	3708      	adds	r7, #8
    c1fc:	46bd      	mov	sp, r7
    c1fe:	bd80      	pop	{r7, pc}
    c200:	20001910 	.word	0x20001910
    c204:	0000c059 	.word	0x0000c059
    c208:	0000bdd9 	.word	0x0000bdd9

0000c20c <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    c20c:	b580      	push	{r7, lr}
    c20e:	b082      	sub	sp, #8
    c210:	af00      	add	r7, sp, #0
    c212:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    c214:	2201      	movs	r2, #1
    c216:	6879      	ldr	r1, [r7, #4]
    c218:	2000      	movs	r0, #0
    c21a:	4b03      	ldr	r3, [pc, #12]	; (c228 <usbdc_ctrl_data_end+0x1c>)
    c21c:	4798      	blx	r3
	return false;
    c21e:	2300      	movs	r3, #0
}
    c220:	4618      	mov	r0, r3
    c222:	3708      	adds	r7, #8
    c224:	46bd      	mov	sp, r7
    c226:	bd80      	pop	{r7, pc}
    c228:	0000c099 	.word	0x0000c099

0000c22c <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    c22c:	b580      	push	{r7, lr}
    c22e:	b082      	sub	sp, #8
    c230:	af00      	add	r7, sp, #0
    c232:	4603      	mov	r3, r0
    c234:	603a      	str	r2, [r7, #0]
    c236:	71fb      	strb	r3, [r7, #7]
    c238:	460b      	mov	r3, r1
    c23a:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    c23c:	79bb      	ldrb	r3, [r7, #6]
    c23e:	2b00      	cmp	r3, #0
    c240:	d002      	beq.n	c248 <usbdc_cb_ctl_done+0x1c>
    c242:	2b01      	cmp	r3, #1
    c244:	d004      	beq.n	c250 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    c246:	e008      	b.n	c25a <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    c248:	6838      	ldr	r0, [r7, #0]
    c24a:	4b06      	ldr	r3, [pc, #24]	; (c264 <usbdc_cb_ctl_done+0x38>)
    c24c:	4798      	blx	r3
		break;
    c24e:	e004      	b.n	c25a <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    c250:	6838      	ldr	r0, [r7, #0]
    c252:	4b05      	ldr	r3, [pc, #20]	; (c268 <usbdc_cb_ctl_done+0x3c>)
    c254:	4798      	blx	r3
    c256:	4603      	mov	r3, r0
    c258:	e000      	b.n	c25c <usbdc_cb_ctl_done+0x30>
	}
	return false;
    c25a:	2300      	movs	r3, #0
}
    c25c:	4618      	mov	r0, r3
    c25e:	3708      	adds	r7, #8
    c260:	46bd      	mov	sp, r7
    c262:	bd80      	pop	{r7, pc}
    c264:	0000c17d 	.word	0x0000c17d
    c268:	0000c20d 	.word	0x0000c20d

0000c26c <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    c26c:	b580      	push	{r7, lr}
    c26e:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    c270:	4b10      	ldr	r3, [pc, #64]	; (c2b4 <usbdc_reset+0x48>)
    c272:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    c274:	4b10      	ldr	r3, [pc, #64]	; (c2b8 <usbdc_reset+0x4c>)
    c276:	2202      	movs	r2, #2
    c278:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    c27a:	4b0f      	ldr	r3, [pc, #60]	; (c2b8 <usbdc_reset+0x4c>)
    c27c:	2200      	movs	r2, #0
    c27e:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    c280:	4b0d      	ldr	r3, [pc, #52]	; (c2b8 <usbdc_reset+0x4c>)
    c282:	2200      	movs	r2, #0
    c284:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    c286:	2000      	movs	r0, #0
    c288:	4b0c      	ldr	r3, [pc, #48]	; (c2bc <usbdc_reset+0x50>)
    c28a:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    c28c:	4b0a      	ldr	r3, [pc, #40]	; (c2b8 <usbdc_reset+0x4c>)
    c28e:	7f1b      	ldrb	r3, [r3, #28]
    c290:	4618      	mov	r0, r3
    c292:	4b0b      	ldr	r3, [pc, #44]	; (c2c0 <usbdc_reset+0x54>)
    c294:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    c296:	4a0b      	ldr	r2, [pc, #44]	; (c2c4 <usbdc_reset+0x58>)
    c298:	2100      	movs	r1, #0
    c29a:	2000      	movs	r0, #0
    c29c:	4b0a      	ldr	r3, [pc, #40]	; (c2c8 <usbdc_reset+0x5c>)
    c29e:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    c2a0:	4a0a      	ldr	r2, [pc, #40]	; (c2cc <usbdc_reset+0x60>)
    c2a2:	2102      	movs	r1, #2
    c2a4:	2000      	movs	r0, #0
    c2a6:	4b08      	ldr	r3, [pc, #32]	; (c2c8 <usbdc_reset+0x5c>)
    c2a8:	4798      	blx	r3
	usb_d_ep_enable(0);
    c2aa:	2000      	movs	r0, #0
    c2ac:	4b08      	ldr	r3, [pc, #32]	; (c2d0 <usbdc_reset+0x64>)
    c2ae:	4798      	blx	r3
}
    c2b0:	bf00      	nop
    c2b2:	bd80      	pop	{r7, pc}
    c2b4:	0000bcb9 	.word	0x0000bcb9
    c2b8:	20001910 	.word	0x20001910
    c2bc:	00002b8d 	.word	0x00002b8d
    c2c0:	00002ac9 	.word	0x00002ac9
    c2c4:	0000c109 	.word	0x0000c109
    c2c8:	00002e8d 	.word	0x00002e8d
    c2cc:	0000c22d 	.word	0x0000c22d
    c2d0:	00002bdd 	.word	0x00002bdd

0000c2d4 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    c2d4:	b580      	push	{r7, lr}
    c2d6:	b082      	sub	sp, #8
    c2d8:	af00      	add	r7, sp, #0
    c2da:	4603      	mov	r3, r0
    c2dc:	6039      	str	r1, [r7, #0]
    c2de:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    c2e0:	79fb      	ldrb	r3, [r7, #7]
    c2e2:	2b00      	cmp	r3, #0
    c2e4:	d002      	beq.n	c2ec <usbd_event_cb+0x18>
    c2e6:	2b01      	cmp	r3, #1
    c2e8:	d005      	beq.n	c2f6 <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    c2ea:	e007      	b.n	c2fc <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    c2ec:	6839      	ldr	r1, [r7, #0]
    c2ee:	2000      	movs	r0, #0
    c2f0:	4b04      	ldr	r3, [pc, #16]	; (c304 <usbd_event_cb+0x30>)
    c2f2:	4798      	blx	r3
		break;
    c2f4:	e002      	b.n	c2fc <usbd_event_cb+0x28>
		usbdc_reset();
    c2f6:	4b04      	ldr	r3, [pc, #16]	; (c308 <usbd_event_cb+0x34>)
    c2f8:	4798      	blx	r3
		break;
    c2fa:	bf00      	nop
	}
}
    c2fc:	bf00      	nop
    c2fe:	3708      	adds	r7, #8
    c300:	46bd      	mov	sp, r7
    c302:	bd80      	pop	{r7, pc}
    c304:	0000c059 	.word	0x0000c059
    c308:	0000c26d 	.word	0x0000c26d

0000c30c <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    c30c:	b580      	push	{r7, lr}
    c30e:	b088      	sub	sp, #32
    c310:	af00      	add	r7, sp, #0
    c312:	60b9      	str	r1, [r7, #8]
    c314:	607a      	str	r2, [r7, #4]
    c316:	461a      	mov	r2, r3
    c318:	4603      	mov	r3, r0
    c31a:	73fb      	strb	r3, [r7, #15]
    c31c:	4613      	mov	r3, r2
    c31e:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c320:	68bb      	ldr	r3, [r7, #8]
    c322:	617b      	str	r3, [r7, #20]
    c324:	687b      	ldr	r3, [r7, #4]
    c326:	61bb      	str	r3, [r7, #24]
    c328:	7bfb      	ldrb	r3, [r7, #15]
    c32a:	773b      	strb	r3, [r7, #28]
    c32c:	7bbb      	ldrb	r3, [r7, #14]
    c32e:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    c330:	f107 0314 	add.w	r3, r7, #20
    c334:	4618      	mov	r0, r3
    c336:	4b03      	ldr	r3, [pc, #12]	; (c344 <usbdc_xfer+0x38>)
    c338:	4798      	blx	r3
    c33a:	4603      	mov	r3, r0
}
    c33c:	4618      	mov	r0, r3
    c33e:	3720      	adds	r7, #32
    c340:	46bd      	mov	sp, r7
    c342:	bd80      	pop	{r7, pc}
    c344:	00002c4d 	.word	0x00002c4d

0000c348 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    c348:	b580      	push	{r7, lr}
    c34a:	b082      	sub	sp, #8
    c34c:	af00      	add	r7, sp, #0
    c34e:	4603      	mov	r3, r0
    c350:	6039      	str	r1, [r7, #0]
    c352:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    c354:	79fb      	ldrb	r3, [r7, #7]
    c356:	2b01      	cmp	r3, #1
    c358:	d009      	beq.n	c36e <usbdc_register_handler+0x26>
    c35a:	2b02      	cmp	r3, #2
    c35c:	d00c      	beq.n	c378 <usbdc_register_handler+0x30>
    c35e:	2b00      	cmp	r3, #0
    c360:	d000      	beq.n	c364 <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    c362:	e00e      	b.n	c382 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    c364:	6839      	ldr	r1, [r7, #0]
    c366:	4809      	ldr	r0, [pc, #36]	; (c38c <usbdc_register_handler+0x44>)
    c368:	4b09      	ldr	r3, [pc, #36]	; (c390 <usbdc_register_handler+0x48>)
    c36a:	4798      	blx	r3
		break;
    c36c:	e009      	b.n	c382 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    c36e:	6839      	ldr	r1, [r7, #0]
    c370:	4808      	ldr	r0, [pc, #32]	; (c394 <usbdc_register_handler+0x4c>)
    c372:	4b07      	ldr	r3, [pc, #28]	; (c390 <usbdc_register_handler+0x48>)
    c374:	4798      	blx	r3
		break;
    c376:	e004      	b.n	c382 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    c378:	6839      	ldr	r1, [r7, #0]
    c37a:	4807      	ldr	r0, [pc, #28]	; (c398 <usbdc_register_handler+0x50>)
    c37c:	4b04      	ldr	r3, [pc, #16]	; (c390 <usbdc_register_handler+0x48>)
    c37e:	4798      	blx	r3
		break;
    c380:	bf00      	nop
	}
}
    c382:	bf00      	nop
    c384:	3708      	adds	r7, #8
    c386:	46bd      	mov	sp, r7
    c388:	bd80      	pop	{r7, pc}
    c38a:	bf00      	nop
    c38c:	20001914 	.word	0x20001914
    c390:	00002fe5 	.word	0x00002fe5
    c394:	20001918 	.word	0x20001918
    c398:	2000191c 	.word	0x2000191c

0000c39c <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    c39c:	b580      	push	{r7, lr}
    c39e:	b084      	sub	sp, #16
    c3a0:	af00      	add	r7, sp, #0
    c3a2:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    c3a4:	687b      	ldr	r3, [r7, #4]
    c3a6:	2b00      	cmp	r3, #0
    c3a8:	bf14      	ite	ne
    c3aa:	2301      	movne	r3, #1
    c3ac:	2300      	moveq	r3, #0
    c3ae:	b2db      	uxtb	r3, r3
    c3b0:	f240 3255 	movw	r2, #853	; 0x355
    c3b4:	4910      	ldr	r1, [pc, #64]	; (c3f8 <usbdc_init+0x5c>)
    c3b6:	4618      	mov	r0, r3
    c3b8:	4b10      	ldr	r3, [pc, #64]	; (c3fc <usbdc_init+0x60>)
    c3ba:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    c3bc:	4b10      	ldr	r3, [pc, #64]	; (c400 <usbdc_init+0x64>)
    c3be:	4798      	blx	r3
    c3c0:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    c3c2:	68fb      	ldr	r3, [r7, #12]
    c3c4:	2b00      	cmp	r3, #0
    c3c6:	da01      	bge.n	c3cc <usbdc_init+0x30>
		return rc;
    c3c8:	68fb      	ldr	r3, [r7, #12]
    c3ca:	e010      	b.n	c3ee <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    c3cc:	2220      	movs	r2, #32
    c3ce:	2100      	movs	r1, #0
    c3d0:	480c      	ldr	r0, [pc, #48]	; (c404 <usbdc_init+0x68>)
    c3d2:	4b0d      	ldr	r3, [pc, #52]	; (c408 <usbdc_init+0x6c>)
    c3d4:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    c3d6:	4a0b      	ldr	r2, [pc, #44]	; (c404 <usbdc_init+0x68>)
    c3d8:	687b      	ldr	r3, [r7, #4]
    c3da:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    c3dc:	490b      	ldr	r1, [pc, #44]	; (c40c <usbdc_init+0x70>)
    c3de:	2000      	movs	r0, #0
    c3e0:	4b0b      	ldr	r3, [pc, #44]	; (c410 <usbdc_init+0x74>)
    c3e2:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    c3e4:	490b      	ldr	r1, [pc, #44]	; (c414 <usbdc_init+0x78>)
    c3e6:	2001      	movs	r0, #1
    c3e8:	4b09      	ldr	r3, [pc, #36]	; (c410 <usbdc_init+0x74>)
    c3ea:	4798      	blx	r3

	return 0;
    c3ec:	2300      	movs	r3, #0
}
    c3ee:	4618      	mov	r0, r3
    c3f0:	3710      	adds	r7, #16
    c3f2:	46bd      	mov	sp, r7
    c3f4:	bd80      	pop	{r7, pc}
    c3f6:	bf00      	nop
    c3f8:	000132a4 	.word	0x000132a4
    c3fc:	00002f09 	.word	0x00002f09
    c400:	000029b5 	.word	0x000029b5
    c404:	20001910 	.word	0x20001910
    c408:	00012cf9 	.word	0x00012cf9
    c40c:	0000c0f9 	.word	0x0000c0f9
    c410:	00002a61 	.word	0x00002a61
    c414:	0000c2d5 	.word	0x0000c2d5

0000c418 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    c418:	b580      	push	{r7, lr}
    c41a:	b082      	sub	sp, #8
    c41c:	af00      	add	r7, sp, #0
    c41e:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    c420:	6879      	ldr	r1, [r7, #4]
    c422:	4803      	ldr	r0, [pc, #12]	; (c430 <usbdc_register_function+0x18>)
    c424:	4b03      	ldr	r3, [pc, #12]	; (c434 <usbdc_register_function+0x1c>)
    c426:	4798      	blx	r3
}
    c428:	bf00      	nop
    c42a:	3708      	adds	r7, #8
    c42c:	46bd      	mov	sp, r7
    c42e:	bd80      	pop	{r7, pc}
    c430:	20001920 	.word	0x20001920
    c434:	00002fe5 	.word	0x00002fe5

0000c438 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    c438:	b580      	push	{r7, lr}
    c43a:	b082      	sub	sp, #8
    c43c:	af00      	add	r7, sp, #0
    c43e:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    c440:	4b0f      	ldr	r3, [pc, #60]	; (c480 <usbdc_start+0x48>)
    c442:	7e9b      	ldrb	r3, [r3, #26]
    c444:	2b00      	cmp	r3, #0
    c446:	d002      	beq.n	c44e <usbdc_start+0x16>
		return ERR_BUSY;
    c448:	f06f 0303 	mvn.w	r3, #3
    c44c:	e013      	b.n	c476 <usbdc_start+0x3e>
	}

	if (desces) {
    c44e:	687b      	ldr	r3, [r7, #4]
    c450:	2b00      	cmp	r3, #0
    c452:	d00e      	beq.n	c472 <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    c454:	4a0a      	ldr	r2, [pc, #40]	; (c480 <usbdc_start+0x48>)
    c456:	687b      	ldr	r3, [r7, #4]
    c458:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    c45a:	687b      	ldr	r3, [r7, #4]
    c45c:	681b      	ldr	r3, [r3, #0]
    c45e:	79da      	ldrb	r2, [r3, #7]
    c460:	4b07      	ldr	r3, [pc, #28]	; (c480 <usbdc_start+0x48>)
    c462:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    c464:	4b06      	ldr	r3, [pc, #24]	; (c480 <usbdc_start+0x48>)
    c466:	2201      	movs	r2, #1
    c468:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    c46a:	4b06      	ldr	r3, [pc, #24]	; (c484 <usbdc_start+0x4c>)
    c46c:	4798      	blx	r3
	return ERR_NONE;
    c46e:	2300      	movs	r3, #0
    c470:	e001      	b.n	c476 <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    c472:	f06f 0308 	mvn.w	r3, #8
}
    c476:	4618      	mov	r0, r3
    c478:	3708      	adds	r7, #8
    c47a:	46bd      	mov	sp, r7
    c47c:	bd80      	pop	{r7, pc}
    c47e:	bf00      	nop
    c480:	20001910 	.word	0x20001910
    c484:	00002a85 	.word	0x00002a85

0000c488 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    c488:	b580      	push	{r7, lr}
    c48a:	af00      	add	r7, sp, #0
	usb_d_attach();
    c48c:	4b01      	ldr	r3, [pc, #4]	; (c494 <usbdc_attach+0xc>)
    c48e:	4798      	blx	r3
}
    c490:	bf00      	nop
    c492:	bd80      	pop	{r7, pc}
    c494:	00002a99 	.word	0x00002a99

0000c498 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    c498:	b480      	push	{r7}
    c49a:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    c49c:	4b03      	ldr	r3, [pc, #12]	; (c4ac <usbdc_get_ctrl_buffer+0x14>)
    c49e:	695b      	ldr	r3, [r3, #20]
}
    c4a0:	4618      	mov	r0, r3
    c4a2:	46bd      	mov	sp, r7
    c4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    c4a8:	4770      	bx	lr
    c4aa:	bf00      	nop
    c4ac:	20001910 	.word	0x20001910

0000c4b0 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    c4b0:	b480      	push	{r7}
    c4b2:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    c4b4:	4b07      	ldr	r3, [pc, #28]	; (c4d4 <usbdc_get_state+0x24>)
    c4b6:	7e9b      	ldrb	r3, [r3, #26]
    c4b8:	f003 0310 	and.w	r3, r3, #16
    c4bc:	2b00      	cmp	r3, #0
    c4be:	d001      	beq.n	c4c4 <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    c4c0:	2310      	movs	r3, #16
    c4c2:	e001      	b.n	c4c8 <usbdc_get_state+0x18>
	}
	return usbdc.state;
    c4c4:	4b03      	ldr	r3, [pc, #12]	; (c4d4 <usbdc_get_state+0x24>)
    c4c6:	7e9b      	ldrb	r3, [r3, #26]
}
    c4c8:	4618      	mov	r0, r3
    c4ca:	46bd      	mov	sp, r7
    c4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    c4d0:	4770      	bx	lr
    c4d2:	bf00      	nop
    c4d4:	20001910 	.word	0x20001910

0000c4d8 <usb_get_u16>:
{
    c4d8:	b480      	push	{r7}
    c4da:	b083      	sub	sp, #12
    c4dc:	af00      	add	r7, sp, #0
    c4de:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    c4e0:	687b      	ldr	r3, [r7, #4]
    c4e2:	781b      	ldrb	r3, [r3, #0]
    c4e4:	b29a      	uxth	r2, r3
    c4e6:	687b      	ldr	r3, [r7, #4]
    c4e8:	3301      	adds	r3, #1
    c4ea:	781b      	ldrb	r3, [r3, #0]
    c4ec:	b29b      	uxth	r3, r3
    c4ee:	021b      	lsls	r3, r3, #8
    c4f0:	b29b      	uxth	r3, r3
    c4f2:	4413      	add	r3, r2
    c4f4:	b29b      	uxth	r3, r3
}
    c4f6:	4618      	mov	r0, r3
    c4f8:	370c      	adds	r7, #12
    c4fa:	46bd      	mov	sp, r7
    c4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    c500:	4770      	bx	lr

0000c502 <usb_desc_len>:
{
    c502:	b480      	push	{r7}
    c504:	b083      	sub	sp, #12
    c506:	af00      	add	r7, sp, #0
    c508:	6078      	str	r0, [r7, #4]
	return desc[0];
    c50a:	687b      	ldr	r3, [r7, #4]
    c50c:	781b      	ldrb	r3, [r3, #0]
}
    c50e:	4618      	mov	r0, r3
    c510:	370c      	adds	r7, #12
    c512:	46bd      	mov	sp, r7
    c514:	f85d 7b04 	ldr.w	r7, [sp], #4
    c518:	4770      	bx	lr

0000c51a <usb_desc_type>:
{
    c51a:	b480      	push	{r7}
    c51c:	b083      	sub	sp, #12
    c51e:	af00      	add	r7, sp, #0
    c520:	6078      	str	r0, [r7, #4]
	return desc[1];
    c522:	687b      	ldr	r3, [r7, #4]
    c524:	3301      	adds	r3, #1
    c526:	781b      	ldrb	r3, [r3, #0]
}
    c528:	4618      	mov	r0, r3
    c52a:	370c      	adds	r7, #12
    c52c:	46bd      	mov	sp, r7
    c52e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c532:	4770      	bx	lr

0000c534 <usb_desc_next>:
{
    c534:	b580      	push	{r7, lr}
    c536:	b082      	sub	sp, #8
    c538:	af00      	add	r7, sp, #0
    c53a:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    c53c:	6878      	ldr	r0, [r7, #4]
    c53e:	4b05      	ldr	r3, [pc, #20]	; (c554 <usb_desc_next+0x20>)
    c540:	4798      	blx	r3
    c542:	4603      	mov	r3, r0
    c544:	461a      	mov	r2, r3
    c546:	687b      	ldr	r3, [r7, #4]
    c548:	4413      	add	r3, r2
}
    c54a:	4618      	mov	r0, r3
    c54c:	3708      	adds	r7, #8
    c54e:	46bd      	mov	sp, r7
    c550:	bd80      	pop	{r7, pc}
    c552:	bf00      	nop
    c554:	0000c503 	.word	0x0000c503

0000c558 <usb_cfg_desc_total_len>:
{
    c558:	b580      	push	{r7, lr}
    c55a:	b082      	sub	sp, #8
    c55c:	af00      	add	r7, sp, #0
    c55e:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    c560:	687b      	ldr	r3, [r7, #4]
    c562:	3302      	adds	r3, #2
    c564:	4618      	mov	r0, r3
    c566:	4b03      	ldr	r3, [pc, #12]	; (c574 <usb_cfg_desc_total_len+0x1c>)
    c568:	4798      	blx	r3
    c56a:	4603      	mov	r3, r0
}
    c56c:	4618      	mov	r0, r3
    c56e:	3708      	adds	r7, #8
    c570:	46bd      	mov	sp, r7
    c572:	bd80      	pop	{r7, pc}
    c574:	0000c4d9 	.word	0x0000c4d9

0000c578 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    c578:	b580      	push	{r7, lr}
    c57a:	b082      	sub	sp, #8
    c57c:	af00      	add	r7, sp, #0
    c57e:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    c580:	6878      	ldr	r0, [r7, #4]
    c582:	4b05      	ldr	r3, [pc, #20]	; (c598 <usb_cfg_desc_next+0x20>)
    c584:	4798      	blx	r3
    c586:	4603      	mov	r3, r0
    c588:	461a      	mov	r2, r3
    c58a:	687b      	ldr	r3, [r7, #4]
    c58c:	4413      	add	r3, r2
}
    c58e:	4618      	mov	r0, r3
    c590:	3708      	adds	r7, #8
    c592:	46bd      	mov	sp, r7
    c594:	bd80      	pop	{r7, pc}
    c596:	bf00      	nop
    c598:	0000c559 	.word	0x0000c559

0000c59c <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    c59c:	b580      	push	{r7, lr}
    c59e:	b084      	sub	sp, #16
    c5a0:	af00      	add	r7, sp, #0
    c5a2:	60f8      	str	r0, [r7, #12]
    c5a4:	60b9      	str	r1, [r7, #8]
    c5a6:	4613      	mov	r3, r2
    c5a8:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    c5aa:	e015      	b.n	c5d8 <usb_find_desc+0x3c>
		_desc_len_check();
    c5ac:	68f8      	ldr	r0, [r7, #12]
    c5ae:	4b0f      	ldr	r3, [pc, #60]	; (c5ec <usb_find_desc+0x50>)
    c5b0:	4798      	blx	r3
    c5b2:	4603      	mov	r3, r0
    c5b4:	2b01      	cmp	r3, #1
    c5b6:	d801      	bhi.n	c5bc <usb_find_desc+0x20>
    c5b8:	2300      	movs	r3, #0
    c5ba:	e012      	b.n	c5e2 <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    c5bc:	68f8      	ldr	r0, [r7, #12]
    c5be:	4b0c      	ldr	r3, [pc, #48]	; (c5f0 <usb_find_desc+0x54>)
    c5c0:	4798      	blx	r3
    c5c2:	4603      	mov	r3, r0
    c5c4:	461a      	mov	r2, r3
    c5c6:	79fb      	ldrb	r3, [r7, #7]
    c5c8:	4293      	cmp	r3, r2
    c5ca:	d101      	bne.n	c5d0 <usb_find_desc+0x34>
			return desc;
    c5cc:	68fb      	ldr	r3, [r7, #12]
    c5ce:	e008      	b.n	c5e2 <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    c5d0:	68f8      	ldr	r0, [r7, #12]
    c5d2:	4b08      	ldr	r3, [pc, #32]	; (c5f4 <usb_find_desc+0x58>)
    c5d4:	4798      	blx	r3
    c5d6:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    c5d8:	68fa      	ldr	r2, [r7, #12]
    c5da:	68bb      	ldr	r3, [r7, #8]
    c5dc:	429a      	cmp	r2, r3
    c5de:	d3e5      	bcc.n	c5ac <usb_find_desc+0x10>
	}
	return NULL;
    c5e0:	2300      	movs	r3, #0
}
    c5e2:	4618      	mov	r0, r3
    c5e4:	3710      	adds	r7, #16
    c5e6:	46bd      	mov	sp, r7
    c5e8:	bd80      	pop	{r7, pc}
    c5ea:	bf00      	nop
    c5ec:	0000c503 	.word	0x0000c503
    c5f0:	0000c51b 	.word	0x0000c51b
    c5f4:	0000c535 	.word	0x0000c535

0000c5f8 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    c5f8:	b580      	push	{r7, lr}
    c5fa:	b082      	sub	sp, #8
    c5fc:	af00      	add	r7, sp, #0
    c5fe:	6078      	str	r0, [r7, #4]
    c600:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    c602:	e019      	b.n	c638 <usb_find_ep_desc+0x40>
		_desc_len_check();
    c604:	6878      	ldr	r0, [r7, #4]
    c606:	4b12      	ldr	r3, [pc, #72]	; (c650 <usb_find_ep_desc+0x58>)
    c608:	4798      	blx	r3
    c60a:	4603      	mov	r3, r0
    c60c:	2b01      	cmp	r3, #1
    c60e:	d801      	bhi.n	c614 <usb_find_ep_desc+0x1c>
    c610:	2300      	movs	r3, #0
    c612:	e018      	b.n	c646 <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    c614:	6878      	ldr	r0, [r7, #4]
    c616:	4b0f      	ldr	r3, [pc, #60]	; (c654 <usb_find_ep_desc+0x5c>)
    c618:	4798      	blx	r3
    c61a:	4603      	mov	r3, r0
    c61c:	2b04      	cmp	r3, #4
    c61e:	d010      	beq.n	c642 <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    c620:	6878      	ldr	r0, [r7, #4]
    c622:	4b0c      	ldr	r3, [pc, #48]	; (c654 <usb_find_ep_desc+0x5c>)
    c624:	4798      	blx	r3
    c626:	4603      	mov	r3, r0
    c628:	2b05      	cmp	r3, #5
    c62a:	d101      	bne.n	c630 <usb_find_ep_desc+0x38>
			return desc;
    c62c:	687b      	ldr	r3, [r7, #4]
    c62e:	e00a      	b.n	c646 <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    c630:	6878      	ldr	r0, [r7, #4]
    c632:	4b09      	ldr	r3, [pc, #36]	; (c658 <usb_find_ep_desc+0x60>)
    c634:	4798      	blx	r3
    c636:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    c638:	687a      	ldr	r2, [r7, #4]
    c63a:	683b      	ldr	r3, [r7, #0]
    c63c:	429a      	cmp	r2, r3
    c63e:	d3e1      	bcc.n	c604 <usb_find_ep_desc+0xc>
    c640:	e000      	b.n	c644 <usb_find_ep_desc+0x4c>
			break;
    c642:	bf00      	nop
	}
	return NULL;
    c644:	2300      	movs	r3, #0
}
    c646:	4618      	mov	r0, r3
    c648:	3708      	adds	r7, #8
    c64a:	46bd      	mov	sp, r7
    c64c:	bd80      	pop	{r7, pc}
    c64e:	bf00      	nop
    c650:	0000c503 	.word	0x0000c503
    c654:	0000c51b 	.word	0x0000c51b
    c658:	0000c535 	.word	0x0000c535

0000c65c <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    c65c:	b580      	push	{r7, lr}
    c65e:	b084      	sub	sp, #16
    c660:	af00      	add	r7, sp, #0
    c662:	60f8      	str	r0, [r7, #12]
    c664:	60b9      	str	r1, [r7, #8]
    c666:	4613      	mov	r3, r2
    c668:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    c66a:	2202      	movs	r2, #2
    c66c:	68b9      	ldr	r1, [r7, #8]
    c66e:	68f8      	ldr	r0, [r7, #12]
    c670:	4b15      	ldr	r3, [pc, #84]	; (c6c8 <usb_find_cfg_desc+0x6c>)
    c672:	4798      	blx	r3
    c674:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    c676:	68fb      	ldr	r3, [r7, #12]
    c678:	2b00      	cmp	r3, #0
    c67a:	d11a      	bne.n	c6b2 <usb_find_cfg_desc+0x56>
		return NULL;
    c67c:	2300      	movs	r3, #0
    c67e:	e01f      	b.n	c6c0 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    c680:	68f8      	ldr	r0, [r7, #12]
    c682:	4b12      	ldr	r3, [pc, #72]	; (c6cc <usb_find_cfg_desc+0x70>)
    c684:	4798      	blx	r3
    c686:	4603      	mov	r3, r0
    c688:	2b01      	cmp	r3, #1
    c68a:	d801      	bhi.n	c690 <usb_find_cfg_desc+0x34>
    c68c:	2300      	movs	r3, #0
    c68e:	e017      	b.n	c6c0 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    c690:	68fb      	ldr	r3, [r7, #12]
    c692:	3301      	adds	r3, #1
    c694:	781b      	ldrb	r3, [r3, #0]
    c696:	2b02      	cmp	r3, #2
    c698:	d110      	bne.n	c6bc <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    c69a:	68fb      	ldr	r3, [r7, #12]
    c69c:	3305      	adds	r3, #5
    c69e:	781b      	ldrb	r3, [r3, #0]
    c6a0:	79fa      	ldrb	r2, [r7, #7]
    c6a2:	429a      	cmp	r2, r3
    c6a4:	d101      	bne.n	c6aa <usb_find_cfg_desc+0x4e>
			return desc;
    c6a6:	68fb      	ldr	r3, [r7, #12]
    c6a8:	e00a      	b.n	c6c0 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    c6aa:	68f8      	ldr	r0, [r7, #12]
    c6ac:	4b08      	ldr	r3, [pc, #32]	; (c6d0 <usb_find_cfg_desc+0x74>)
    c6ae:	4798      	blx	r3
    c6b0:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    c6b2:	68fa      	ldr	r2, [r7, #12]
    c6b4:	68bb      	ldr	r3, [r7, #8]
    c6b6:	429a      	cmp	r2, r3
    c6b8:	d3e2      	bcc.n	c680 <usb_find_cfg_desc+0x24>
    c6ba:	e000      	b.n	c6be <usb_find_cfg_desc+0x62>
			break;
    c6bc:	bf00      	nop
	}
	return NULL;
    c6be:	2300      	movs	r3, #0
}
    c6c0:	4618      	mov	r0, r3
    c6c2:	3710      	adds	r7, #16
    c6c4:	46bd      	mov	sp, r7
    c6c6:	bd80      	pop	{r7, pc}
    c6c8:	0000c59d 	.word	0x0000c59d
    c6cc:	0000c503 	.word	0x0000c503
    c6d0:	0000c579 	.word	0x0000c579

0000c6d4 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    c6d4:	b580      	push	{r7, lr}
    c6d6:	b086      	sub	sp, #24
    c6d8:	af00      	add	r7, sp, #0
    c6da:	60f8      	str	r0, [r7, #12]
    c6dc:	60b9      	str	r1, [r7, #8]
    c6de:	4613      	mov	r3, r2
    c6e0:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    c6e2:	2300      	movs	r3, #0
    c6e4:	75fb      	strb	r3, [r7, #23]
    c6e6:	e020      	b.n	c72a <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    c6e8:	2203      	movs	r2, #3
    c6ea:	68b9      	ldr	r1, [r7, #8]
    c6ec:	68f8      	ldr	r0, [r7, #12]
    c6ee:	4b13      	ldr	r3, [pc, #76]	; (c73c <usb_find_str_desc+0x68>)
    c6f0:	4798      	blx	r3
    c6f2:	60f8      	str	r0, [r7, #12]
		if (desc) {
    c6f4:	68fb      	ldr	r3, [r7, #12]
    c6f6:	2b00      	cmp	r3, #0
    c6f8:	d015      	beq.n	c726 <usb_find_str_desc+0x52>
			_desc_len_check();
    c6fa:	68f8      	ldr	r0, [r7, #12]
    c6fc:	4b10      	ldr	r3, [pc, #64]	; (c740 <usb_find_str_desc+0x6c>)
    c6fe:	4798      	blx	r3
    c700:	4603      	mov	r3, r0
    c702:	2b01      	cmp	r3, #1
    c704:	d801      	bhi.n	c70a <usb_find_str_desc+0x36>
    c706:	2300      	movs	r3, #0
    c708:	e014      	b.n	c734 <usb_find_str_desc+0x60>
			if (i == str_index) {
    c70a:	7dfa      	ldrb	r2, [r7, #23]
    c70c:	79fb      	ldrb	r3, [r7, #7]
    c70e:	429a      	cmp	r2, r3
    c710:	d101      	bne.n	c716 <usb_find_str_desc+0x42>
				return desc;
    c712:	68fb      	ldr	r3, [r7, #12]
    c714:	e00e      	b.n	c734 <usb_find_str_desc+0x60>
			}
			i++;
    c716:	7dfb      	ldrb	r3, [r7, #23]
    c718:	3301      	adds	r3, #1
    c71a:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    c71c:	68f8      	ldr	r0, [r7, #12]
    c71e:	4b09      	ldr	r3, [pc, #36]	; (c744 <usb_find_str_desc+0x70>)
    c720:	4798      	blx	r3
    c722:	60f8      	str	r0, [r7, #12]
    c724:	e001      	b.n	c72a <usb_find_str_desc+0x56>
		} else {
			return NULL;
    c726:	2300      	movs	r3, #0
    c728:	e004      	b.n	c734 <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    c72a:	68fa      	ldr	r2, [r7, #12]
    c72c:	68bb      	ldr	r3, [r7, #8]
    c72e:	429a      	cmp	r2, r3
    c730:	d3da      	bcc.n	c6e8 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    c732:	2300      	movs	r3, #0
}
    c734:	4618      	mov	r0, r3
    c736:	3718      	adds	r7, #24
    c738:	46bd      	mov	sp, r7
    c73a:	bd80      	pop	{r7, pc}
    c73c:	0000c59d 	.word	0x0000c59d
    c740:	0000c503 	.word	0x0000c503
    c744:	0000c535 	.word	0x0000c535

0000c748 <_ZN13CANOpen_ClassC1EP20can_async_descriptor>:
CANOpen_Class::CANOpen_Class()
{
	ptrCANOpenClass=this;
} //CANOpen_Class

CANOpen_Class::CANOpen_Class(can_async_descriptor  *descr)
    c748:	b580      	push	{r7, lr}
    c74a:	b082      	sub	sp, #8
    c74c:	af00      	add	r7, sp, #0
    c74e:	6078      	str	r0, [r7, #4]
    c750:	6039      	str	r1, [r7, #0]
    c752:	687b      	ldr	r3, [r7, #4]
    c754:	4618      	mov	r0, r3
    c756:	4b08      	ldr	r3, [pc, #32]	; (c778 <_ZN13CANOpen_ClassC1EP20can_async_descriptor+0x30>)
    c758:	4798      	blx	r3
    c75a:	4a08      	ldr	r2, [pc, #32]	; (c77c <_ZN13CANOpen_ClassC1EP20can_async_descriptor+0x34>)
    c75c:	687b      	ldr	r3, [r7, #4]
    c75e:	601a      	str	r2, [r3, #0]
{
	ptrCANOpenClass=this;
    c760:	4a07      	ldr	r2, [pc, #28]	; (c780 <_ZN13CANOpen_ClassC1EP20can_async_descriptor+0x38>)
    c762:	687b      	ldr	r3, [r7, #4]
    c764:	6013      	str	r3, [r2, #0]
	canDescr=descr;
    c766:	687b      	ldr	r3, [r7, #4]
    c768:	683a      	ldr	r2, [r7, #0]
    c76a:	f8c3 2a24 	str.w	r2, [r3, #2596]	; 0xa24
} //CANOpen_Class
    c76e:	687b      	ldr	r3, [r7, #4]
    c770:	4618      	mov	r0, r3
    c772:	3708      	adds	r7, #8
    c774:	46bd      	mov	sp, r7
    c776:	bd80      	pop	{r7, pc}
    c778:	0000c8ad 	.word	0x0000c8ad
    c77c:	000132c4 	.word	0x000132c4
    c780:	20001930 	.word	0x20001930

0000c784 <_ZN13CANOpen_ClassD1Ev>:

// default destructor
CANOpen_Class::~CANOpen_Class()
    c784:	b580      	push	{r7, lr}
    c786:	b082      	sub	sp, #8
    c788:	af00      	add	r7, sp, #0
    c78a:	6078      	str	r0, [r7, #4]
    c78c:	4a05      	ldr	r2, [pc, #20]	; (c7a4 <_ZN13CANOpen_ClassD1Ev+0x20>)
    c78e:	687b      	ldr	r3, [r7, #4]
    c790:	601a      	str	r2, [r3, #0]
    c792:	687b      	ldr	r3, [r7, #4]
    c794:	4618      	mov	r0, r3
    c796:	4b04      	ldr	r3, [pc, #16]	; (c7a8 <_ZN13CANOpen_ClassD1Ev+0x24>)
    c798:	4798      	blx	r3
{
} //~CANOpen_Class
    c79a:	687b      	ldr	r3, [r7, #4]
    c79c:	4618      	mov	r0, r3
    c79e:	3708      	adds	r7, #8
    c7a0:	46bd      	mov	sp, r7
    c7a2:	bd80      	pop	{r7, pc}
    c7a4:	000132c4 	.word	0x000132c4
    c7a8:	0000c8ed 	.word	0x0000c8ed

0000c7ac <_ZN13CANOpen_Class4InitEh>:

int	CANOpen_Class::Init(uint8_t node){
    c7ac:	b590      	push	{r4, r7, lr}
    c7ae:	b083      	sub	sp, #12
    c7b0:	af00      	add	r7, sp, #0
    c7b2:	6078      	str	r0, [r7, #4]
    c7b4:	460b      	mov	r3, r1
    c7b6:	70fb      	strb	r3, [r7, #3]
	//can.SetDescriptor(canDescr);
	err=CO_init(canDescr,node,1000);
    c7b8:	6878      	ldr	r0, [r7, #4]
    c7ba:	687b      	ldr	r3, [r7, #4]
    c7bc:	f8d3 1a24 	ldr.w	r1, [r3, #2596]	; 0xa24
    c7c0:	78fa      	ldrb	r2, [r7, #3]
    c7c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    c7c6:	4c0f      	ldr	r4, [pc, #60]	; (c804 <_ZN13CANOpen_Class4InitEh+0x58>)
    c7c8:	47a0      	blx	r4
    c7ca:	4603      	mov	r3, r0
    c7cc:	461a      	mov	r2, r3
    c7ce:	687b      	ldr	r3, [r7, #4]
    c7d0:	f883 2a29 	strb.w	r2, [r3, #2601]	; 0xa29
	
	if (err==0)
    c7d4:	687b      	ldr	r3, [r7, #4]
    c7d6:	f993 3a29 	ldrsb.w	r3, [r3, #2601]	; 0xa29
    c7da:	2b00      	cmp	r3, #0
    c7dc:	d10b      	bne.n	c7f6 <_ZN13CANOpen_Class4InitEh+0x4a>
	{
	
		err=(CO_ReturnError_t)SetInitialMode();
    c7de:	6878      	ldr	r0, [r7, #4]
    c7e0:	4b09      	ldr	r3, [pc, #36]	; (c808 <_ZN13CANOpen_Class4InitEh+0x5c>)
    c7e2:	4798      	blx	r3
    c7e4:	4603      	mov	r3, r0
    c7e6:	b25a      	sxtb	r2, r3
    c7e8:	687b      	ldr	r3, [r7, #4]
    c7ea:	f883 2a29 	strb.w	r2, [r3, #2601]	; 0xa29
		#endif
		
	}else{
		return	(int)err;
	}
	return	(int)err;
    c7ee:	687b      	ldr	r3, [r7, #4]
    c7f0:	f993 3a29 	ldrsb.w	r3, [r3, #2601]	; 0xa29
    c7f4:	e002      	b.n	c7fc <_ZN13CANOpen_Class4InitEh+0x50>
		return	(int)err;
    c7f6:	687b      	ldr	r3, [r7, #4]
    c7f8:	f993 3a29 	ldrsb.w	r3, [r3, #2601]	; 0xa29
}
    c7fc:	4618      	mov	r0, r3
    c7fe:	370c      	adds	r7, #12
    c800:	46bd      	mov	sp, r7
    c802:	bd90      	pop	{r4, r7, pc}
    c804:	0000c915 	.word	0x0000c915
    c808:	0000c80d 	.word	0x0000c80d

0000c80c <_ZN13CANOpen_Class14SetInitialModeEv>:

int	CANOpen_Class::SetInitialMode(void){
    c80c:	b580      	push	{r7, lr}
    c80e:	b082      	sub	sp, #8
    c810:	af00      	add	r7, sp, #0
    c812:	6078      	str	r0, [r7, #4]
	/* CAN module address, NodeID, Bitrate */
	/* We do not use CAN registers directly, so address here is a pointer to the CAN_HandleTypeDef object. */
	
	
	/* start CAN */
	err=CO_CANsetNormalMode();
    c814:	687b      	ldr	r3, [r7, #4]
    c816:	4618      	mov	r0, r3
    c818:	4b08      	ldr	r3, [pc, #32]	; (c83c <_ZN13CANOpen_Class14SetInitialModeEv+0x30>)
    c81a:	4798      	blx	r3
    c81c:	4603      	mov	r3, r0
    c81e:	461a      	mov	r2, r3
    c820:	687b      	ldr	r3, [r7, #4]
    c822:	f883 2a29 	strb.w	r2, [r3, #2601]	; 0xa29
	//err=CO_CANsetNormalMode(CO->CANmodule[0]);

	reset = CO_RESET_NOT;
    c826:	687b      	ldr	r3, [r7, #4]
    c828:	2200      	movs	r2, #0
    c82a:	f883 2a28 	strb.w	r2, [r3, #2600]	; 0xa28
	return	(int)err;
    c82e:	687b      	ldr	r3, [r7, #4]
    c830:	f993 3a29 	ldrsb.w	r3, [r3, #2601]	; 0xa29
}
    c834:	4618      	mov	r0, r3
    c836:	3708      	adds	r7, #8
    c838:	46bd      	mov	sp, r7
    c83a:	bd80      	pop	{r7, pc}
    c83c:	0000d51d 	.word	0x0000d51d

0000c840 <_ZN13CANOpen_Class16Periodic_ProcessEm>:

int	CANOpen_Class::Periodic_Process(uint32_t timeDifference){
    c840:	b580      	push	{r7, lr}
    c842:	b082      	sub	sp, #8
    c844:	af00      	add	r7, sp, #0
    c846:	6078      	str	r0, [r7, #4]
    c848:	6039      	str	r1, [r7, #0]
	if (CO->CANmodule[0]->CANnormal)
    c84a:	687b      	ldr	r3, [r7, #4]
    c84c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    c850:	681b      	ldr	r3, [r3, #0]
    c852:	7d1b      	ldrb	r3, [r3, #20]
    c854:	b2db      	uxtb	r3, r3
    c856:	2b00      	cmp	r3, #0
    c858:	bf14      	ite	ne
    c85a:	2301      	movne	r3, #1
    c85c:	2300      	moveq	r3, #0
    c85e:	b2db      	uxtb	r3, r3
    c860:	2b00      	cmp	r3, #0
    c862:	d015      	beq.n	c890 <_ZN13CANOpen_Class16Periodic_ProcessEm+0x50>
	{
		syncWas=CO_process_SYNC_RPDO(timeDifference);
    c864:	687b      	ldr	r3, [r7, #4]
    c866:	6839      	ldr	r1, [r7, #0]
    c868:	4618      	mov	r0, r3
    c86a:	4b0d      	ldr	r3, [pc, #52]	; (c8a0 <_ZN13CANOpen_Class16Periodic_ProcessEm+0x60>)
    c86c:	4798      	blx	r3
    c86e:	4603      	mov	r3, r0
    c870:	461a      	mov	r2, r3
    c872:	687b      	ldr	r3, [r7, #4]
    c874:	f883 2a2a 	strb.w	r2, [r3, #2602]	; 0xa2a
		CO_process_TPDO(syncWas,timeDifference);
    c878:	6878      	ldr	r0, [r7, #4]
    c87a:	687b      	ldr	r3, [r7, #4]
    c87c:	f893 3a2a 	ldrb.w	r3, [r3, #2602]	; 0xa2a
    c880:	683a      	ldr	r2, [r7, #0]
    c882:	4619      	mov	r1, r3
    c884:	4b07      	ldr	r3, [pc, #28]	; (c8a4 <_ZN13CANOpen_Class16Periodic_ProcessEm+0x64>)
    c886:	4798      	blx	r3
		CAN_Polling_Tx();
    c888:	687b      	ldr	r3, [r7, #4]
    c88a:	4618      	mov	r0, r3
    c88c:	4b06      	ldr	r3, [pc, #24]	; (c8a8 <_ZN13CANOpen_Class16Periodic_ProcessEm+0x68>)
    c88e:	4798      	blx	r3
	}
	
	return	int(syncWas);
    c890:	687b      	ldr	r3, [r7, #4]
    c892:	f893 3a2a 	ldrb.w	r3, [r3, #2602]	; 0xa2a
}
    c896:	4618      	mov	r0, r3
    c898:	3708      	adds	r7, #8
    c89a:	46bd      	mov	sp, r7
    c89c:	bd80      	pop	{r7, pc}
    c89e:	bf00      	nop
    c8a0:	0000d1fd 	.word	0x0000d1fd
    c8a4:	0000d281 	.word	0x0000d281
    c8a8:	0000dd21 	.word	0x0000dd21

0000c8ac <_ZN8CO_ClassC1Ev>:




// default constructor
CO_Class::CO_Class()
    c8ac:	b580      	push	{r7, lr}
    c8ae:	b082      	sub	sp, #8
    c8b0:	af00      	add	r7, sp, #0
    c8b2:	6078      	str	r0, [r7, #4]
    c8b4:	687b      	ldr	r3, [r7, #4]
    c8b6:	4618      	mov	r0, r3
    c8b8:	4b0a      	ldr	r3, [pc, #40]	; (c8e4 <_ZN8CO_ClassC1Ev+0x38>)
    c8ba:	4798      	blx	r3
    c8bc:	4a0a      	ldr	r2, [pc, #40]	; (c8e8 <_ZN8CO_ClassC1Ev+0x3c>)
    c8be:	687b      	ldr	r3, [r7, #4]
    c8c0:	601a      	str	r2, [r3, #0]
{
	CO = NULL;
    c8c2:	687b      	ldr	r3, [r7, #4]
    c8c4:	2200      	movs	r2, #0
    c8c6:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	coCanDescr=NULL;
    c8ca:	687b      	ldr	r3, [r7, #4]
    c8cc:	2200      	movs	r2, #0
    c8ce:	f8c3 2a08 	str.w	r2, [r3, #2568]	; 0xa08
	CO_memoryUsed=0;
    c8d2:	687b      	ldr	r3, [r7, #4]
    c8d4:	2200      	movs	r2, #0
    c8d6:	f8c3 29c8 	str.w	r2, [r3, #2504]	; 0x9c8
} //CO_Class
    c8da:	687b      	ldr	r3, [r7, #4]
    c8dc:	4618      	mov	r0, r3
    c8de:	3708      	adds	r7, #8
    c8e0:	46bd      	mov	sp, r7
    c8e2:	bd80      	pop	{r7, pc}
    c8e4:	0000d3c1 	.word	0x0000d3c1
    c8e8:	000132d0 	.word	0x000132d0

0000c8ec <_ZN8CO_ClassD1Ev>:

// default destructor
CO_Class::~CO_Class()
    c8ec:	b580      	push	{r7, lr}
    c8ee:	b082      	sub	sp, #8
    c8f0:	af00      	add	r7, sp, #0
    c8f2:	6078      	str	r0, [r7, #4]
    c8f4:	4a05      	ldr	r2, [pc, #20]	; (c90c <_ZN8CO_ClassD1Ev+0x20>)
    c8f6:	687b      	ldr	r3, [r7, #4]
    c8f8:	601a      	str	r2, [r3, #0]
    c8fa:	687b      	ldr	r3, [r7, #4]
    c8fc:	4618      	mov	r0, r3
    c8fe:	4b04      	ldr	r3, [pc, #16]	; (c910 <_ZN8CO_ClassD1Ev+0x24>)
    c900:	4798      	blx	r3
{
} //~CO_Class
    c902:	687b      	ldr	r3, [r7, #4]
    c904:	4618      	mov	r0, r3
    c906:	3708      	adds	r7, #8
    c908:	46bd      	mov	sp, r7
    c90a:	bd80      	pop	{r7, pc}
    c90c:	000132d0 	.word	0x000132d0
    c910:	0000d42d 	.word	0x0000d42d

0000c914 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm>:
/******************************************************************************/
CO_ReturnError_t CO_Class::CO_init(
can_async_descriptor   *CANbaseAddress,
uint8_t                 nodeId,
uint32_t                bitRate)
{
    c914:	b5f0      	push	{r4, r5, r6, r7, lr}
    c916:	b099      	sub	sp, #100	; 0x64
    c918:	af0c      	add	r7, sp, #48	; 0x30
    c91a:	61f8      	str	r0, [r7, #28]
    c91c:	61b9      	str	r1, [r7, #24]
    c91e:	613b      	str	r3, [r7, #16]
    c920:	4613      	mov	r3, r2
    c922:	75fb      	strb	r3, [r7, #23]
	coCanDescr=CANbaseAddress;
    c924:	69fb      	ldr	r3, [r7, #28]
    c926:	69ba      	ldr	r2, [r7, #24]
    c928:	f8c3 2a08 	str.w	r2, [r3, #2568]	; 0xa08
	#endif


	/* Initialize CANopen object */
	#ifdef CO_USE_GLOBALS
		CO = &COO;
    c92c:	69fb      	ldr	r3, [r7, #28]
    c92e:	f603 12cc 	addw	r2, r3, #2508	; 0x9cc
    c932:	69fb      	ldr	r3, [r7, #28]
    c934:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124

		CO->CANmodule[0]                    = &COO_CANmodule;
    c938:	69fb      	ldr	r3, [r7, #28]
    c93a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    c93e:	69fa      	ldr	r2, [r7, #28]
    c940:	f502 729c 	add.w	r2, r2, #312	; 0x138
    c944:	601a      	str	r2, [r3, #0]
		CO_CANmodule_rxArray0               = &COO_CANmodule_rxArray0[0];
    c946:	69fb      	ldr	r3, [r7, #28]
    c948:	f503 72ae 	add.w	r2, r3, #348	; 0x15c
    c94c:	69fb      	ldr	r3, [r7, #28]
    c94e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
		CO_CANmodule_txArray0               = &COO_CANmodule_txArray0[0];
    c952:	69fb      	ldr	r3, [r7, #28]
    c954:	f503 7203 	add.w	r2, r3, #524	; 0x20c
    c958:	69fb      	ldr	r3, [r7, #28]
    c95a:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
		for(i=0; i<CO_NO_SDO_SERVER; i++){
    c95e:	69fb      	ldr	r3, [r7, #28]
    c960:	2200      	movs	r2, #0
    c962:	f8c3 2a14 	str.w	r2, [r3, #2580]	; 0xa14
    c966:	69fb      	ldr	r3, [r7, #28]
    c968:	f8d3 3a14 	ldr.w	r3, [r3, #2580]	; 0xa14
    c96c:	2b00      	cmp	r3, #0
    c96e:	d11c      	bne.n	c9aa <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x96>
			CO->SDO[i]                      = &COO_SDO[i];
    c970:	69fb      	ldr	r3, [r7, #28]
    c972:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
    c976:	69fb      	ldr	r3, [r7, #28]
    c978:	f8d3 0a14 	ldr.w	r0, [r3, #2580]	; 0xa14
    c97c:	69fb      	ldr	r3, [r7, #28]
    c97e:	f8d3 2a14 	ldr.w	r2, [r3, #2580]	; 0xa14
    c982:	4613      	mov	r3, r2
    c984:	011b      	lsls	r3, r3, #4
    c986:	4413      	add	r3, r2
    c988:	00db      	lsls	r3, r3, #3
    c98a:	f503 7322 	add.w	r3, r3, #648	; 0x288
    c98e:	69fa      	ldr	r2, [r7, #28]
    c990:	4413      	add	r3, r2
    c992:	1d1a      	adds	r2, r3, #4
    c994:	0083      	lsls	r3, r0, #2
    c996:	440b      	add	r3, r1
    c998:	605a      	str	r2, [r3, #4]
		for(i=0; i<CO_NO_SDO_SERVER; i++){
    c99a:	69fb      	ldr	r3, [r7, #28]
    c99c:	f8d3 3a14 	ldr.w	r3, [r3, #2580]	; 0xa14
    c9a0:	1c5a      	adds	r2, r3, #1
    c9a2:	69fb      	ldr	r3, [r7, #28]
    c9a4:	f8c3 2a14 	str.w	r2, [r3, #2580]	; 0xa14
    c9a8:	e7dd      	b.n	c966 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x52>
		}

		CO_SDO_ODExtensions                 = &COO_SDO_ODExtensions[0];
    c9aa:	69fb      	ldr	r3, [r7, #28]
    c9ac:	f503 7245 	add.w	r2, r3, #788	; 0x314
    c9b0:	69fb      	ldr	r3, [r7, #28]
    c9b2:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
		CO->em                              = &COO_EM;
    c9b6:	69fb      	ldr	r3, [r7, #28]
    c9b8:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    c9bc:	69fa      	ldr	r2, [r7, #28]
    c9be:	f502 62b5 	add.w	r2, r2, #1448	; 0x5a8
    c9c2:	609a      	str	r2, [r3, #8]
		CO->emPr                            = &COO_EMpr;
    c9c4:	69fb      	ldr	r3, [r7, #28]
    c9c6:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    c9ca:	69fa      	ldr	r2, [r7, #28]
    c9cc:	f202 6214 	addw	r2, r2, #1556	; 0x614
    c9d0:	60da      	str	r2, [r3, #12]
		CO->NMT                             = &COO_NMT;
    c9d2:	69fb      	ldr	r3, [r7, #28]
    c9d4:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    c9d8:	69fa      	ldr	r2, [r7, #28]
    c9da:	f502 62c6 	add.w	r2, r2, #1584	; 0x630
    c9de:	611a      	str	r2, [r3, #16]
		CO->SYNC                            = &COO_SYNC;
    c9e0:	69fb      	ldr	r3, [r7, #28]
    c9e2:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    c9e6:	69fa      	ldr	r2, [r7, #28]
    c9e8:	f202 6254 	addw	r2, r2, #1620	; 0x654
    c9ec:	615a      	str	r2, [r3, #20]
		for(i=0; i<CO_NO_RPDO; i++){
    c9ee:	69fb      	ldr	r3, [r7, #28]
    c9f0:	2200      	movs	r2, #0
    c9f2:	f8c3 2a14 	str.w	r2, [r3, #2580]	; 0xa14
    c9f6:	69fb      	ldr	r3, [r7, #28]
    c9f8:	f8d3 3a14 	ldr.w	r3, [r3, #2580]	; 0xa14
    c9fc:	2b03      	cmp	r3, #3
    c9fe:	d81b      	bhi.n	ca38 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x124>
			CO->RPDO[i]                     = &COO_RPDO[i];
    ca00:	69fb      	ldr	r3, [r7, #28]
    ca02:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
    ca06:	69fb      	ldr	r3, [r7, #28]
    ca08:	f8d3 0a14 	ldr.w	r0, [r3, #2580]	; 0xa14
    ca0c:	69fb      	ldr	r3, [r7, #28]
    ca0e:	f8d3 2a14 	ldr.w	r2, [r3, #2580]	; 0xa14
    ca12:	4613      	mov	r3, r2
    ca14:	005b      	lsls	r3, r3, #1
    ca16:	4413      	add	r3, r2
    ca18:	015b      	lsls	r3, r3, #5
    ca1a:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
    ca1e:	69fa      	ldr	r2, [r7, #28]
    ca20:	441a      	add	r2, r3
    ca22:	1d83      	adds	r3, r0, #6
    ca24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(i=0; i<CO_NO_RPDO; i++){
    ca28:	69fb      	ldr	r3, [r7, #28]
    ca2a:	f8d3 3a14 	ldr.w	r3, [r3, #2580]	; 0xa14
    ca2e:	1c5a      	adds	r2, r3, #1
    ca30:	69fb      	ldr	r3, [r7, #28]
    ca32:	f8c3 2a14 	str.w	r2, [r3, #2580]	; 0xa14
    ca36:	e7de      	b.n	c9f6 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0xe2>
		}
		for(i=0; i<CO_NO_TPDO; i++){
    ca38:	69fb      	ldr	r3, [r7, #28]
    ca3a:	2200      	movs	r2, #0
    ca3c:	f8c3 2a14 	str.w	r2, [r3, #2580]	; 0xa14
    ca40:	69fb      	ldr	r3, [r7, #28]
    ca42:	f8d3 3a14 	ldr.w	r3, [r3, #2580]	; 0xa14
    ca46:	2b03      	cmp	r3, #3
    ca48:	d81a      	bhi.n	ca80 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x16c>
			CO->TPDO[i]                     = &COO_TPDO[i];
    ca4a:	69fb      	ldr	r3, [r7, #28]
    ca4c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    ca50:	69fa      	ldr	r2, [r7, #28]
    ca52:	f8d2 2a14 	ldr.w	r2, [r2, #2580]	; 0xa14
    ca56:	69f9      	ldr	r1, [r7, #28]
    ca58:	f8d1 1a14 	ldr.w	r1, [r1, #2580]	; 0xa14
    ca5c:	2058      	movs	r0, #88	; 0x58
    ca5e:	fb00 f101 	mul.w	r1, r0, r1
    ca62:	f501 6101 	add.w	r1, r1, #2064	; 0x810
    ca66:	69f8      	ldr	r0, [r7, #28]
    ca68:	4401      	add	r1, r0
    ca6a:	320a      	adds	r2, #10
    ca6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for(i=0; i<CO_NO_TPDO; i++){
    ca70:	69fb      	ldr	r3, [r7, #28]
    ca72:	f8d3 3a14 	ldr.w	r3, [r3, #2580]	; 0xa14
    ca76:	1c5a      	adds	r2, r3, #1
    ca78:	69fb      	ldr	r3, [r7, #28]
    ca7a:	f8c3 2a14 	str.w	r2, [r3, #2580]	; 0xa14
    ca7e:	e7df      	b.n	ca40 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x12c>
		}
		
		CO->HBcons                          = &COO_HBcons;
    ca80:	69fb      	ldr	r3, [r7, #28]
    ca82:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    ca86:	69fa      	ldr	r2, [r7, #28]
    ca88:	f502 6217 	add.w	r2, r2, #2416	; 0x970
    ca8c:	639a      	str	r2, [r3, #56]	; 0x38
		CO_HBcons_monitoredNodes            = &COO_HBcons_monitoredNodes[0];
    ca8e:	69fb      	ldr	r3, [r7, #28]
    ca90:	f603 1288 	addw	r2, r3, #2440	; 0x988
    ca94:	69fb      	ldr	r3, [r7, #28]
    ca96:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134

	if(errCnt != 0) return CO_ERROR_OUT_OF_MEMORY;
	#endif


	CO->CANmodule[0]->CANnormal = false;
    ca9a:	69fb      	ldr	r3, [r7, #28]
    ca9c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    caa0:	681b      	ldr	r3, [r3, #0]
    caa2:	2200      	movs	r2, #0
    caa4:	751a      	strb	r2, [r3, #20]
	CO_CANsetConfigurationMode(coCanDescr);
    caa6:	69fa      	ldr	r2, [r7, #28]
    caa8:	69fb      	ldr	r3, [r7, #28]
    caaa:	f8d3 3a08 	ldr.w	r3, [r3, #2568]	; 0xa08
    caae:	4619      	mov	r1, r3
    cab0:	4610      	mov	r0, r2
    cab2:	4b99      	ldr	r3, [pc, #612]	; (cd18 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x404>)
    cab4:	4798      	blx	r3

	/* Verify CANopen Node-ID */
	if(nodeId<1 || nodeId>127)
    cab6:	7dfb      	ldrb	r3, [r7, #23]
    cab8:	2b00      	cmp	r3, #0
    caba:	dd02      	ble.n	cac2 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x1ae>
    cabc:	7dfb      	ldrb	r3, [r7, #23]
    cabe:	2b7f      	cmp	r3, #127	; 0x7f
    cac0:	dd05      	ble.n	cace <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x1ba>
	{
		CO_delete();
    cac2:	69f8      	ldr	r0, [r7, #28]
    cac4:	4b95      	ldr	r3, [pc, #596]	; (cd1c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x408>)
    cac6:	4798      	blx	r3
		return CO_ERROR_PARAMETERS;
    cac8:	f06f 030b 	mvn.w	r3, #11
    cacc:	e2d3      	b.n	d076 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x762>
	}


	err = CANmodule_init(
    cace:	69f8      	ldr	r0, [r7, #28]
	CO->CANmodule[0],
    cad0:	69fb      	ldr	r3, [r7, #28]
    cad2:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	err = CANmodule_init(
    cad6:	6819      	ldr	r1, [r3, #0]
    cad8:	69fb      	ldr	r3, [r7, #28]
    cada:	f8d3 4a08 	ldr.w	r4, [r3, #2568]	; 0xa08
    cade:	69fb      	ldr	r3, [r7, #28]
    cae0:	f8d3 5128 	ldr.w	r5, [r3, #296]	; 0x128
    cae4:	69fb      	ldr	r3, [r7, #28]
    cae6:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
    caea:	693a      	ldr	r2, [r7, #16]
    caec:	9203      	str	r2, [sp, #12]
    caee:	2208      	movs	r2, #8
    caf0:	9202      	str	r2, [sp, #8]
    caf2:	9301      	str	r3, [sp, #4]
    caf4:	230b      	movs	r3, #11
    caf6:	9300      	str	r3, [sp, #0]
    caf8:	462b      	mov	r3, r5
    cafa:	4622      	mov	r2, r4
    cafc:	4c88      	ldr	r4, [pc, #544]	; (cd20 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x40c>)
    cafe:	47a0      	blx	r4
    cb00:	4603      	mov	r3, r0
    cb02:	461a      	mov	r2, r3
    cb04:	69fb      	ldr	r3, [r7, #28]
    cb06:	f883 2a18 	strb.w	r2, [r3, #2584]	; 0xa18
	CO_RXCAN_NO_MSGS,
	CO_CANmodule_txArray0,
	CO_TXCAN_NO_MSGS,
	bitRate);

	if(err){CO_delete(); return err;}
    cb0a:	69fb      	ldr	r3, [r7, #28]
    cb0c:	f993 3a18 	ldrsb.w	r3, [r3, #2584]	; 0xa18
    cb10:	2b00      	cmp	r3, #0
    cb12:	d006      	beq.n	cb22 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x20e>
    cb14:	69f8      	ldr	r0, [r7, #28]
    cb16:	4b81      	ldr	r3, [pc, #516]	; (cd1c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x408>)
    cb18:	4798      	blx	r3
    cb1a:	69fb      	ldr	r3, [r7, #28]
    cb1c:	f993 3a18 	ldrsb.w	r3, [r3, #2584]	; 0xa18
    cb20:	e2a9      	b.n	d076 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x762>

	for (i=0; i<CO_NO_SDO_SERVER; i++)
    cb22:	69fb      	ldr	r3, [r7, #28]
    cb24:	2200      	movs	r2, #0
    cb26:	f8c3 2a14 	str.w	r2, [r3, #2580]	; 0xa14
    cb2a:	69fb      	ldr	r3, [r7, #28]
    cb2c:	f8d3 3a14 	ldr.w	r3, [r3, #2580]	; 0xa14
    cb30:	2b00      	cmp	r3, #0
    cb32:	d175      	bne.n	cc20 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x30c>
	{
		uint32_t COB_IDClientToServer;
		uint32_t COB_IDServerToClient;
		if(i==0){
    cb34:	69fb      	ldr	r3, [r7, #28]
    cb36:	f8d3 3a14 	ldr.w	r3, [r3, #2580]	; 0xa14
    cb3a:	2b00      	cmp	r3, #0
    cb3c:	d108      	bne.n	cb50 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x23c>
			/*Default SDO server must be located at first index*/
			COB_IDClientToServer = CO_CAN_ID_RSDO + nodeId;
    cb3e:	7dfb      	ldrb	r3, [r7, #23]
    cb40:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
    cb44:	62fb      	str	r3, [r7, #44]	; 0x2c
			COB_IDServerToClient = CO_CAN_ID_TSDO + nodeId;
    cb46:	7dfb      	ldrb	r3, [r7, #23]
    cb48:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
    cb4c:	62bb      	str	r3, [r7, #40]	; 0x28
    cb4e:	e017      	b.n	cb80 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x26c>
			}else{
			COB_IDClientToServer = OD_SDOServerParameter[i].COB_IDClientToServer;
    cb50:	69fb      	ldr	r3, [r7, #28]
    cb52:	f8d3 2a14 	ldr.w	r2, [r3, #2580]	; 0xa14
    cb56:	4973      	ldr	r1, [pc, #460]	; (cd24 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x410>)
    cb58:	4613      	mov	r3, r2
    cb5a:	005b      	lsls	r3, r3, #1
    cb5c:	4413      	add	r3, r2
    cb5e:	009b      	lsls	r3, r3, #2
    cb60:	440b      	add	r3, r1
    cb62:	3364      	adds	r3, #100	; 0x64
    cb64:	681b      	ldr	r3, [r3, #0]
    cb66:	62fb      	str	r3, [r7, #44]	; 0x2c
			COB_IDServerToClient = OD_SDOServerParameter[i].COB_IDServerToClient;
    cb68:	69fb      	ldr	r3, [r7, #28]
    cb6a:	f8d3 2a14 	ldr.w	r2, [r3, #2580]	; 0xa14
    cb6e:	496d      	ldr	r1, [pc, #436]	; (cd24 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x410>)
    cb70:	4613      	mov	r3, r2
    cb72:	005b      	lsls	r3, r3, #1
    cb74:	4413      	add	r3, r2
    cb76:	009b      	lsls	r3, r3, #2
    cb78:	440b      	add	r3, r1
    cb7a:	3368      	adds	r3, #104	; 0x68
    cb7c:	681b      	ldr	r3, [r3, #0]
    cb7e:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		err = CO_SDO_init(
    cb80:	69fb      	ldr	r3, [r7, #28]
    cb82:	f103 0e04 	add.w	lr, r3, #4
			CO->SDO[i],
    cb86:	69fb      	ldr	r3, [r7, #28]
    cb88:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    cb8c:	69fb      	ldr	r3, [r7, #28]
    cb8e:	f8d3 3a14 	ldr.w	r3, [r3, #2580]	; 0xa14
		err = CO_SDO_init(
    cb92:	009b      	lsls	r3, r3, #2
    cb94:	4413      	add	r3, r2
    cb96:	685b      	ldr	r3, [r3, #4]
    cb98:	60fb      	str	r3, [r7, #12]
			COB_IDClientToServer,
			COB_IDServerToClient,
			OD_H1200_SDO_SERVER_PARAM+i,
    cb9a:	69fb      	ldr	r3, [r7, #28]
    cb9c:	f8d3 3a14 	ldr.w	r3, [r3, #2580]	; 0xa14
		err = CO_SDO_init(
    cba0:	f503 5290 	add.w	r2, r3, #4608	; 0x1200
			i==0 ? 0 : CO->SDO[0],
    cba4:	69fb      	ldr	r3, [r7, #28]
    cba6:	f8d3 3a14 	ldr.w	r3, [r3, #2580]	; 0xa14
		err = CO_SDO_init(
    cbaa:	2b00      	cmp	r3, #0
    cbac:	d004      	beq.n	cbb8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2a4>
			i==0 ? 0 : CO->SDO[0],
    cbae:	69fb      	ldr	r3, [r7, #28]
    cbb0:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
		err = CO_SDO_init(
    cbb4:	685b      	ldr	r3, [r3, #4]
    cbb6:	e000      	b.n	cbba <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2a6>
    cbb8:	2300      	movs	r3, #0
    cbba:	69f9      	ldr	r1, [r7, #28]
    cbbc:	f8d1 1130 	ldr.w	r1, [r1, #304]	; 0x130
			&CO_ObjDict[0],
			CO_OD_NoOfElements,
			CO_SDO_ODExtensions,
			nodeId,
			CO->CANmodule[0],
    cbc0:	69f8      	ldr	r0, [r7, #28]
    cbc2:	f8d0 0124 	ldr.w	r0, [r0, #292]	; 0x124
		err = CO_SDO_init(
    cbc6:	6800      	ldr	r0, [r0, #0]
			CO_RXCAN_SDO_SRV+i,
    cbc8:	69fc      	ldr	r4, [r7, #28]
    cbca:	f8d4 4a14 	ldr.w	r4, [r4, #2580]	; 0xa14
		err = CO_SDO_init(
    cbce:	3406      	adds	r4, #6
			CO->CANmodule[0],
    cbd0:	69fd      	ldr	r5, [r7, #28]
    cbd2:	f8d5 5124 	ldr.w	r5, [r5, #292]	; 0x124
		err = CO_SDO_init(
    cbd6:	682d      	ldr	r5, [r5, #0]
			CO_TXCAN_SDO_SRV+i);
    cbd8:	69fe      	ldr	r6, [r7, #28]
    cbda:	f8d6 6a14 	ldr.w	r6, [r6, #2580]	; 0xa14
		err = CO_SDO_init(
    cbde:	3606      	adds	r6, #6
    cbe0:	9609      	str	r6, [sp, #36]	; 0x24
    cbe2:	9508      	str	r5, [sp, #32]
    cbe4:	9407      	str	r4, [sp, #28]
    cbe6:	9006      	str	r0, [sp, #24]
    cbe8:	7df8      	ldrb	r0, [r7, #23]
    cbea:	9005      	str	r0, [sp, #20]
    cbec:	9104      	str	r1, [sp, #16]
    cbee:	2137      	movs	r1, #55	; 0x37
    cbf0:	9103      	str	r1, [sp, #12]
    cbf2:	494d      	ldr	r1, [pc, #308]	; (cd28 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x414>)
    cbf4:	9102      	str	r1, [sp, #8]
    cbf6:	9301      	str	r3, [sp, #4]
    cbf8:	9200      	str	r2, [sp, #0]
    cbfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    cbfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    cbfe:	68f9      	ldr	r1, [r7, #12]
    cc00:	4670      	mov	r0, lr
    cc02:	4c4a      	ldr	r4, [pc, #296]	; (cd2c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x418>)
    cc04:	47a0      	blx	r4
    cc06:	4603      	mov	r3, r0
    cc08:	461a      	mov	r2, r3
    cc0a:	69fb      	ldr	r3, [r7, #28]
    cc0c:	f883 2a18 	strb.w	r2, [r3, #2584]	; 0xa18
	for (i=0; i<CO_NO_SDO_SERVER; i++)
    cc10:	69fb      	ldr	r3, [r7, #28]
    cc12:	f8d3 3a14 	ldr.w	r3, [r3, #2580]	; 0xa14
    cc16:	1c5a      	adds	r2, r3, #1
    cc18:	69fb      	ldr	r3, [r7, #28]
    cc1a:	f8c3 2a14 	str.w	r2, [r3, #2580]	; 0xa14
    cc1e:	e784      	b.n	cb2a <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x216>
	}

	if(err){CO_delete(); return err;}
    cc20:	69fb      	ldr	r3, [r7, #28]
    cc22:	f993 3a18 	ldrsb.w	r3, [r3, #2584]	; 0xa18
    cc26:	2b00      	cmp	r3, #0
    cc28:	d006      	beq.n	cc38 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x324>
    cc2a:	69f8      	ldr	r0, [r7, #28]
    cc2c:	4b3b      	ldr	r3, [pc, #236]	; (cd1c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x408>)
    cc2e:	4798      	blx	r3
    cc30:	69fb      	ldr	r3, [r7, #28]
    cc32:	f993 3a18 	ldrsb.w	r3, [r3, #2584]	; 0xa18
    cc36:	e21e      	b.n	d076 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x762>


	err = EM_init(
    cc38:	69fb      	ldr	r3, [r7, #28]
    cc3a:	1d18      	adds	r0, r3, #4
			CO->em,
    cc3c:	69fb      	ldr	r3, [r7, #28]
    cc3e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	err = EM_init(
    cc42:	6899      	ldr	r1, [r3, #8]
			CO->emPr,
    cc44:	69fb      	ldr	r3, [r7, #28]
    cc46:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	err = EM_init(
    cc4a:	68dc      	ldr	r4, [r3, #12]
			CO->SDO[0],
    cc4c:	69fb      	ldr	r3, [r7, #28]
    cc4e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	err = EM_init(
    cc52:	685d      	ldr	r5, [r3, #4]
			&OD_errorStatusBits[0],
			ODL_errorStatusBits_stringLength,
			&OD_errorRegister,
			&OD_preDefinedErrorField[0],
			ODL_preDefinedErrorField_arrayLength,
			CO->CANmodule[0],
    cc54:	69fb      	ldr	r3, [r7, #28]
    cc56:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	err = EM_init(
    cc5a:	681b      	ldr	r3, [r3, #0]
			CO_TXCAN_EMERG,
			CO_CAN_ID_EMERGENCY + (uint32_t)nodeId);
    cc5c:	7dfa      	ldrb	r2, [r7, #23]
	err = EM_init(
    cc5e:	3280      	adds	r2, #128	; 0x80
    cc60:	9207      	str	r2, [sp, #28]
    cc62:	2201      	movs	r2, #1
    cc64:	9206      	str	r2, [sp, #24]
    cc66:	9305      	str	r3, [sp, #20]
    cc68:	2308      	movs	r3, #8
    cc6a:	9304      	str	r3, [sp, #16]
    cc6c:	4b30      	ldr	r3, [pc, #192]	; (cd30 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x41c>)
    cc6e:	9303      	str	r3, [sp, #12]
    cc70:	4b30      	ldr	r3, [pc, #192]	; (cd34 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x420>)
    cc72:	9302      	str	r3, [sp, #8]
    cc74:	230a      	movs	r3, #10
    cc76:	9301      	str	r3, [sp, #4]
    cc78:	4b2f      	ldr	r3, [pc, #188]	; (cd38 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x424>)
    cc7a:	9300      	str	r3, [sp, #0]
    cc7c:	462b      	mov	r3, r5
    cc7e:	4622      	mov	r2, r4
    cc80:	4c2e      	ldr	r4, [pc, #184]	; (cd3c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x428>)
    cc82:	47a0      	blx	r4
    cc84:	4603      	mov	r3, r0
    cc86:	461a      	mov	r2, r3
    cc88:	69fb      	ldr	r3, [r7, #28]
    cc8a:	f883 2a18 	strb.w	r2, [r3, #2584]	; 0xa18

	if(err){CO_delete(); return err;}
    cc8e:	69fb      	ldr	r3, [r7, #28]
    cc90:	f993 3a18 	ldrsb.w	r3, [r3, #2584]	; 0xa18
    cc94:	2b00      	cmp	r3, #0
    cc96:	d006      	beq.n	cca6 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x392>
    cc98:	69f8      	ldr	r0, [r7, #28]
    cc9a:	4b20      	ldr	r3, [pc, #128]	; (cd1c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x408>)
    cc9c:	4798      	blx	r3
    cc9e:	69fb      	ldr	r3, [r7, #28]
    cca0:	f993 3a18 	ldrsb.w	r3, [r3, #2584]	; 0xa18
    cca4:	e1e7      	b.n	d076 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x762>


	err = CO_NMT_init(
    cca6:	69fb      	ldr	r3, [r7, #28]
    cca8:	f103 0010 	add.w	r0, r3, #16
	CO->NMT,
    ccac:	69fb      	ldr	r3, [r7, #28]
    ccae:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	err = CO_NMT_init(
    ccb2:	691c      	ldr	r4, [r3, #16]
	CO->emPr,
    ccb4:	69fb      	ldr	r3, [r7, #28]
    ccb6:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	err = CO_NMT_init(
    ccba:	68dd      	ldr	r5, [r3, #12]
	nodeId,
	500,
	CO->CANmodule[0],
    ccbc:	69fb      	ldr	r3, [r7, #28]
    ccbe:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	err = CO_NMT_init(
    ccc2:	681b      	ldr	r3, [r3, #0]
	CO_RXCAN_NMT,
	CO_CAN_ID_NMT_SERVICE,
	CO->CANmodule[0],
    ccc4:	69fa      	ldr	r2, [r7, #28]
    ccc6:	f8d2 2124 	ldr.w	r2, [r2, #292]	; 0x124
	err = CO_NMT_init(
    ccca:	6812      	ldr	r2, [r2, #0]
	CO_TXCAN_HB,
	CO_CAN_ID_HEARTBEAT + nodeId);
    cccc:	7df9      	ldrb	r1, [r7, #23]
    ccce:	f501 61e0 	add.w	r1, r1, #1792	; 0x700
	err = CO_NMT_init(
    ccd2:	7dfe      	ldrb	r6, [r7, #23]
    ccd4:	9106      	str	r1, [sp, #24]
    ccd6:	2107      	movs	r1, #7
    ccd8:	9105      	str	r1, [sp, #20]
    ccda:	9204      	str	r2, [sp, #16]
    ccdc:	2200      	movs	r2, #0
    ccde:	9203      	str	r2, [sp, #12]
    cce0:	2200      	movs	r2, #0
    cce2:	9202      	str	r2, [sp, #8]
    cce4:	9301      	str	r3, [sp, #4]
    cce6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    ccea:	9300      	str	r3, [sp, #0]
    ccec:	4633      	mov	r3, r6
    ccee:	462a      	mov	r2, r5
    ccf0:	4621      	mov	r1, r4
    ccf2:	4c13      	ldr	r4, [pc, #76]	; (cd40 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x42c>)
    ccf4:	47a0      	blx	r4
    ccf6:	4603      	mov	r3, r0
    ccf8:	461a      	mov	r2, r3
    ccfa:	69fb      	ldr	r3, [r7, #28]
    ccfc:	f883 2a18 	strb.w	r2, [r3, #2584]	; 0xa18

	if(err){CO_delete(); return err;}
    cd00:	69fb      	ldr	r3, [r7, #28]
    cd02:	f993 3a18 	ldrsb.w	r3, [r3, #2584]	; 0xa18
    cd06:	2b00      	cmp	r3, #0
    cd08:	d01c      	beq.n	cd44 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x430>
    cd0a:	69f8      	ldr	r0, [r7, #28]
    cd0c:	4b03      	ldr	r3, [pc, #12]	; (cd1c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x408>)
    cd0e:	4798      	blx	r3
    cd10:	69fb      	ldr	r3, [r7, #28]
    cd12:	f993 3a18 	ldrsb.w	r3, [r3, #2584]	; 0xa18
    cd16:	e1ae      	b.n	d076 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x762>
    cd18:	0000d501 	.word	0x0000d501
    cd1c:	0000d08d 	.word	0x0000d08d
    cd20:	0000d565 	.word	0x0000d565
    cd24:	20000294 	.word	0x20000294
    cd28:	000138f8 	.word	0x000138f8
    cd2c:	000107d1 	.word	0x000107d1
    cd30:	20000124 	.word	0x20000124
    cd34:	2000011c 	.word	0x2000011c
    cd38:	2000014c 	.word	0x2000014c
    cd3c:	0000df89 	.word	0x0000df89
    cd40:	0000ea75 	.word	0x0000ea75
		0);               /* synchronous message flag bit */
	#endif


	err = CO_SYNC_init(
	CO->SYNC,
    cd44:	69fb      	ldr	r3, [r7, #28]
    cd46:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	err = CO_SYNC_init(
    cd4a:	695e      	ldr	r6, [r3, #20]
	CO->em,
    cd4c:	69fb      	ldr	r3, [r7, #28]
    cd4e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	err = CO_SYNC_init(
    cd52:	689b      	ldr	r3, [r3, #8]
    cd54:	60fb      	str	r3, [r7, #12]
	CO->SDO[0],
    cd56:	69fb      	ldr	r3, [r7, #28]
    cd58:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	err = CO_SYNC_init(
    cd5c:	6859      	ldr	r1, [r3, #4]
    cd5e:	60b9      	str	r1, [r7, #8]
	&CO->NMT->operatingState,
    cd60:	69fb      	ldr	r3, [r7, #28]
    cd62:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    cd66:	691b      	ldr	r3, [r3, #16]
	err = CO_SYNC_init(
    cd68:	607b      	str	r3, [r7, #4]
    cd6a:	4ba3      	ldr	r3, [pc, #652]	; (cff8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x6e4>)
    cd6c:	689b      	ldr	r3, [r3, #8]
    cd6e:	4aa2      	ldr	r2, [pc, #648]	; (cff8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x6e4>)
    cd70:	68d2      	ldr	r2, [r2, #12]
    cd72:	49a1      	ldr	r1, [pc, #644]	; (cff8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x6e4>)
    cd74:	f891 1058 	ldrb.w	r1, [r1, #88]	; 0x58
	OD_COB_ID_SYNCMessage,
	OD_communicationCyclePeriod,
	OD_synchronousCounterOverflowValue,
	CO->CANmodule[0],
    cd78:	69f8      	ldr	r0, [r7, #28]
    cd7a:	f8d0 0124 	ldr.w	r0, [r0, #292]	; 0x124
	err = CO_SYNC_init(
    cd7e:	6800      	ldr	r0, [r0, #0]
	CO_RXCAN_SYNC,
	CO->CANmodule[0],
    cd80:	69fc      	ldr	r4, [r7, #28]
    cd82:	f8d4 4124 	ldr.w	r4, [r4, #292]	; 0x124
	err = CO_SYNC_init(
    cd86:	6824      	ldr	r4, [r4, #0]
    cd88:	2500      	movs	r5, #0
    cd8a:	9507      	str	r5, [sp, #28]
    cd8c:	9406      	str	r4, [sp, #24]
    cd8e:	2401      	movs	r4, #1
    cd90:	9405      	str	r4, [sp, #20]
    cd92:	9004      	str	r0, [sp, #16]
    cd94:	9103      	str	r1, [sp, #12]
    cd96:	9202      	str	r2, [sp, #8]
    cd98:	9301      	str	r3, [sp, #4]
    cd9a:	6878      	ldr	r0, [r7, #4]
    cd9c:	9000      	str	r0, [sp, #0]
    cd9e:	68bb      	ldr	r3, [r7, #8]
    cda0:	68fa      	ldr	r2, [r7, #12]
    cda2:	4631      	mov	r1, r6
    cda4:	69f8      	ldr	r0, [r7, #28]
    cda6:	4c95      	ldr	r4, [pc, #596]	; (cffc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x6e8>)
    cda8:	47a0      	blx	r4
    cdaa:	4603      	mov	r3, r0
    cdac:	461a      	mov	r2, r3
    cdae:	69fb      	ldr	r3, [r7, #28]
    cdb0:	f883 2a18 	strb.w	r2, [r3, #2584]	; 0xa18
	CO_TXCAN_SYNC);

	if(err){CO_delete(); return err;}
    cdb4:	69fb      	ldr	r3, [r7, #28]
    cdb6:	f993 3a18 	ldrsb.w	r3, [r3, #2584]	; 0xa18
    cdba:	2b00      	cmp	r3, #0
    cdbc:	d006      	beq.n	cdcc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x4b8>
    cdbe:	69f8      	ldr	r0, [r7, #28]
    cdc0:	4b8f      	ldr	r3, [pc, #572]	; (d000 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x6ec>)
    cdc2:	4798      	blx	r3
    cdc4:	69fb      	ldr	r3, [r7, #28]
    cdc6:	f993 3a18 	ldrsb.w	r3, [r3, #2584]	; 0xa18
    cdca:	e154      	b.n	d076 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x762>


	for(i=0; i<CO_NO_RPDO; i++){
    cdcc:	69fb      	ldr	r3, [r7, #28]
    cdce:	2200      	movs	r2, #0
    cdd0:	f8c3 2a14 	str.w	r2, [r3, #2580]	; 0xa14
    cdd4:	69fb      	ldr	r3, [r7, #28]
    cdd6:	f8d3 3a14 	ldr.w	r3, [r3, #2580]	; 0xa14
    cdda:	2b03      	cmp	r3, #3
    cddc:	f200 8086 	bhi.w	ceec <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x5d8>
		CO_CANmodule_t *CANdevRx = CO->CANmodule[0];
    cde0:	69fb      	ldr	r3, [r7, #28]
    cde2:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    cde6:	681b      	ldr	r3, [r3, #0]
    cde8:	627b      	str	r3, [r7, #36]	; 0x24
		CANdevRxIdx = CO_RXCAN_RPDO + i;
    cdea:	69fb      	ldr	r3, [r7, #28]
    cdec:	f8d3 3a14 	ldr.w	r3, [r3, #2580]	; 0xa14
    cdf0:	1c9a      	adds	r2, r3, #2
    cdf2:	69fb      	ldr	r3, [r7, #28]
    cdf4:	f8c3 2a0c 	str.w	r2, [r3, #2572]	; 0xa0c

		err = CO_RPDO_init(
		CO->RPDO[i],
    cdf8:	69fb      	ldr	r3, [r7, #28]
    cdfa:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    cdfe:	69fa      	ldr	r2, [r7, #28]
    ce00:	f8d2 2a14 	ldr.w	r2, [r2, #2580]	; 0xa14
		err = CO_RPDO_init(
    ce04:	3206      	adds	r2, #6
    ce06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    ce0a:	60fb      	str	r3, [r7, #12]
		CO->em,
    ce0c:	69fb      	ldr	r3, [r7, #28]
    ce0e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
		err = CO_RPDO_init(
    ce12:	689b      	ldr	r3, [r3, #8]
    ce14:	60bb      	str	r3, [r7, #8]
		CO->SDO[0],
    ce16:	69fb      	ldr	r3, [r7, #28]
    ce18:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
		err = CO_RPDO_init(
    ce1c:	685b      	ldr	r3, [r3, #4]
    ce1e:	607b      	str	r3, [r7, #4]
		CO->SYNC,
    ce20:	69fb      	ldr	r3, [r7, #28]
    ce22:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
		err = CO_RPDO_init(
    ce26:	6958      	ldr	r0, [r3, #20]
		&CO->NMT->operatingState,
    ce28:	69fb      	ldr	r3, [r7, #28]
    ce2a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    ce2e:	691b      	ldr	r3, [r3, #16]
		err = CO_RPDO_init(
    ce30:	603b      	str	r3, [r7, #0]
		nodeId,
		((i<4) ? (CO_CAN_ID_RPDO_1+i*0x100) : 0),
    ce32:	69fb      	ldr	r3, [r7, #28]
    ce34:	f8d3 3a14 	ldr.w	r3, [r3, #2580]	; 0xa14
		err = CO_RPDO_init(
    ce38:	2b03      	cmp	r3, #3
    ce3a:	d805      	bhi.n	ce48 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x534>
		((i<4) ? (CO_CAN_ID_RPDO_1+i*0x100) : 0),
    ce3c:	69fb      	ldr	r3, [r7, #28]
    ce3e:	f8d3 3a14 	ldr.w	r3, [r3, #2580]	; 0xa14
		err = CO_RPDO_init(
    ce42:	3302      	adds	r3, #2
    ce44:	021a      	lsls	r2, r3, #8
    ce46:	e000      	b.n	ce4a <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x536>
    ce48:	2200      	movs	r2, #0
		0,
		(CO_RPDOCommPar_t*) &OD_RPDOCommunicationParameter[i],
    ce4a:	69fb      	ldr	r3, [r7, #28]
    ce4c:	f8d3 1a14 	ldr.w	r1, [r3, #2580]	; 0xa14
    ce50:	460b      	mov	r3, r1
    ce52:	005b      	lsls	r3, r3, #1
    ce54:	440b      	add	r3, r1
    ce56:	009b      	lsls	r3, r3, #2
    ce58:	3368      	adds	r3, #104	; 0x68
    ce5a:	4967      	ldr	r1, [pc, #412]	; (cff8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x6e4>)
    ce5c:	440b      	add	r3, r1
    ce5e:	1d1c      	adds	r4, r3, #4
		(CO_RPDOMapPar_t*) &OD_RPDOMappingParameter[i],
    ce60:	69fb      	ldr	r3, [r7, #28]
    ce62:	f8d3 1a14 	ldr.w	r1, [r3, #2580]	; 0xa14
    ce66:	460b      	mov	r3, r1
    ce68:	00db      	lsls	r3, r3, #3
    ce6a:	440b      	add	r3, r1
    ce6c:	009b      	lsls	r3, r3, #2
    ce6e:	3398      	adds	r3, #152	; 0x98
    ce70:	4961      	ldr	r1, [pc, #388]	; (cff8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x6e4>)
    ce72:	440b      	add	r3, r1
    ce74:	3304      	adds	r3, #4
		OD_H1400_RXPDO_1_PARAM+i,
    ce76:	69f9      	ldr	r1, [r7, #28]
    ce78:	f8d1 1a14 	ldr.w	r1, [r1, #2580]	; 0xa14
		err = CO_RPDO_init(
    ce7c:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
		OD_H1600_RXPDO_1_MAPPING+i,
    ce80:	69fd      	ldr	r5, [r7, #28]
    ce82:	f8d5 5a14 	ldr.w	r5, [r5, #2580]	; 0xa14
		err = CO_RPDO_init(
    ce86:	f505 55b0 	add.w	r5, r5, #5632	; 0x1600
    ce8a:	69fe      	ldr	r6, [r7, #28]
    ce8c:	f8d6 6a0c 	ldr.w	r6, [r6, #2572]	; 0xa0c
    ce90:	960a      	str	r6, [sp, #40]	; 0x28
    ce92:	6a7e      	ldr	r6, [r7, #36]	; 0x24
    ce94:	9609      	str	r6, [sp, #36]	; 0x24
    ce96:	9508      	str	r5, [sp, #32]
    ce98:	9107      	str	r1, [sp, #28]
    ce9a:	9306      	str	r3, [sp, #24]
    ce9c:	9405      	str	r4, [sp, #20]
    ce9e:	2300      	movs	r3, #0
    cea0:	9304      	str	r3, [sp, #16]
    cea2:	9203      	str	r2, [sp, #12]
    cea4:	7dfb      	ldrb	r3, [r7, #23]
    cea6:	9302      	str	r3, [sp, #8]
    cea8:	683b      	ldr	r3, [r7, #0]
    ceaa:	9301      	str	r3, [sp, #4]
    ceac:	9000      	str	r0, [sp, #0]
    ceae:	687b      	ldr	r3, [r7, #4]
    ceb0:	68ba      	ldr	r2, [r7, #8]
    ceb2:	68f9      	ldr	r1, [r7, #12]
    ceb4:	69f8      	ldr	r0, [r7, #28]
    ceb6:	4c53      	ldr	r4, [pc, #332]	; (d004 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x6f0>)
    ceb8:	47a0      	blx	r4
    ceba:	4603      	mov	r3, r0
    cebc:	461a      	mov	r2, r3
    cebe:	69fb      	ldr	r3, [r7, #28]
    cec0:	f883 2a18 	strb.w	r2, [r3, #2584]	; 0xa18
		CANdevRx,
		CANdevRxIdx);

		if(err){CO_delete(); return err;}
    cec4:	69fb      	ldr	r3, [r7, #28]
    cec6:	f993 3a18 	ldrsb.w	r3, [r3, #2584]	; 0xa18
    ceca:	2b00      	cmp	r3, #0
    cecc:	d006      	beq.n	cedc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x5c8>
    cece:	69f8      	ldr	r0, [r7, #28]
    ced0:	4b4b      	ldr	r3, [pc, #300]	; (d000 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x6ec>)
    ced2:	4798      	blx	r3
    ced4:	69fb      	ldr	r3, [r7, #28]
    ced6:	f993 3a18 	ldrsb.w	r3, [r3, #2584]	; 0xa18
    ceda:	e0cc      	b.n	d076 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x762>
	for(i=0; i<CO_NO_RPDO; i++){
    cedc:	69fb      	ldr	r3, [r7, #28]
    cede:	f8d3 3a14 	ldr.w	r3, [r3, #2580]	; 0xa14
    cee2:	1c5a      	adds	r2, r3, #1
    cee4:	69fb      	ldr	r3, [r7, #28]
    cee6:	f8c3 2a14 	str.w	r2, [r3, #2580]	; 0xa14
    ceea:	e773      	b.n	cdd4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x4c0>
	}


	for(i=0; i<CO_NO_TPDO; i++){
    ceec:	69fb      	ldr	r3, [r7, #28]
    ceee:	2200      	movs	r2, #0
    cef0:	f8c3 2a14 	str.w	r2, [r3, #2580]	; 0xa14
    cef4:	69fb      	ldr	r3, [r7, #28]
    cef6:	f8d3 3a14 	ldr.w	r3, [r3, #2580]	; 0xa14
    cefa:	2b03      	cmp	r3, #3
    cefc:	f200 8086 	bhi.w	d00c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x6f8>
		err = CO_TPDO_init(
		CO->TPDO[i],
    cf00:	69fb      	ldr	r3, [r7, #28]
    cf02:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    cf06:	69fa      	ldr	r2, [r7, #28]
    cf08:	f8d2 2a14 	ldr.w	r2, [r2, #2580]	; 0xa14
		err = CO_TPDO_init(
    cf0c:	320a      	adds	r2, #10
    cf0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    cf12:	60fb      	str	r3, [r7, #12]
		CO->em,
    cf14:	69fb      	ldr	r3, [r7, #28]
    cf16:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
		err = CO_TPDO_init(
    cf1a:	689b      	ldr	r3, [r3, #8]
    cf1c:	60bb      	str	r3, [r7, #8]
		CO->SDO[0],
    cf1e:	69fb      	ldr	r3, [r7, #28]
    cf20:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
		err = CO_TPDO_init(
    cf24:	685b      	ldr	r3, [r3, #4]
    cf26:	607b      	str	r3, [r7, #4]
		&CO->NMT->operatingState,
    cf28:	69fb      	ldr	r3, [r7, #28]
    cf2a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    cf2e:	691b      	ldr	r3, [r3, #16]
		err = CO_TPDO_init(
    cf30:	603b      	str	r3, [r7, #0]
		nodeId,
		((i<4) ? (CO_CAN_ID_TPDO_1+i*0x100) : 0),
    cf32:	69fb      	ldr	r3, [r7, #28]
    cf34:	f8d3 3a14 	ldr.w	r3, [r3, #2580]	; 0xa14
		err = CO_TPDO_init(
    cf38:	2b03      	cmp	r3, #3
    cf3a:	d806      	bhi.n	cf4a <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x636>
		((i<4) ? (CO_CAN_ID_TPDO_1+i*0x100) : 0),
    cf3c:	69fb      	ldr	r3, [r7, #28]
    cf3e:	f8d3 3a14 	ldr.w	r3, [r3, #2580]	; 0xa14
    cf42:	021b      	lsls	r3, r3, #8
		err = CO_TPDO_init(
    cf44:	f503 72c0 	add.w	r2, r3, #384	; 0x180
    cf48:	e000      	b.n	cf4c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x638>
    cf4a:	2200      	movs	r2, #0
		0,
		(CO_TPDOCommPar_t*) &OD_TPDOCommunicationParameter[i],
    cf4c:	69fb      	ldr	r3, [r7, #28]
    cf4e:	f8d3 1a14 	ldr.w	r1, [r3, #2580]	; 0xa14
    cf52:	460b      	mov	r3, r1
    cf54:	00db      	lsls	r3, r3, #3
    cf56:	1a5b      	subs	r3, r3, r1
    cf58:	009b      	lsls	r3, r3, #2
    cf5a:	f503 7394 	add.w	r3, r3, #296	; 0x128
    cf5e:	4926      	ldr	r1, [pc, #152]	; (cff8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x6e4>)
    cf60:	440b      	add	r3, r1
    cf62:	1d18      	adds	r0, r3, #4
		(CO_TPDOMapPar_t*) &OD_TPDOMappingParameter[i],
    cf64:	69fb      	ldr	r3, [r7, #28]
    cf66:	f8d3 1a14 	ldr.w	r1, [r3, #2580]	; 0xa14
    cf6a:	460b      	mov	r3, r1
    cf6c:	00db      	lsls	r3, r3, #3
    cf6e:	440b      	add	r3, r1
    cf70:	009b      	lsls	r3, r3, #2
    cf72:	f503 73cc 	add.w	r3, r3, #408	; 0x198
    cf76:	4920      	ldr	r1, [pc, #128]	; (cff8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x6e4>)
    cf78:	440b      	add	r3, r1
    cf7a:	3304      	adds	r3, #4
		OD_H1800_TXPDO_1_PARAM+i,
    cf7c:	69f9      	ldr	r1, [r7, #28]
    cf7e:	f8d1 1a14 	ldr.w	r1, [r1, #2580]	; 0xa14
		err = CO_TPDO_init(
    cf82:	f501 51c0 	add.w	r1, r1, #6144	; 0x1800
		OD_H1A00_TXPDO_1_MAPPING+i,
    cf86:	69fc      	ldr	r4, [r7, #28]
    cf88:	f8d4 4a14 	ldr.w	r4, [r4, #2580]	; 0xa14
		err = CO_TPDO_init(
    cf8c:	f504 54d0 	add.w	r4, r4, #6656	; 0x1a00
		CO->CANmodule[0],
    cf90:	69fd      	ldr	r5, [r7, #28]
    cf92:	f8d5 5124 	ldr.w	r5, [r5, #292]	; 0x124
		err = CO_TPDO_init(
    cf96:	682d      	ldr	r5, [r5, #0]
		CO_TXCAN_TPDO+i);
    cf98:	69fe      	ldr	r6, [r7, #28]
    cf9a:	f8d6 6a14 	ldr.w	r6, [r6, #2580]	; 0xa14
		err = CO_TPDO_init(
    cf9e:	3602      	adds	r6, #2
    cfa0:	9609      	str	r6, [sp, #36]	; 0x24
    cfa2:	9508      	str	r5, [sp, #32]
    cfa4:	9407      	str	r4, [sp, #28]
    cfa6:	9106      	str	r1, [sp, #24]
    cfa8:	9305      	str	r3, [sp, #20]
    cfaa:	9004      	str	r0, [sp, #16]
    cfac:	2300      	movs	r3, #0
    cfae:	9303      	str	r3, [sp, #12]
    cfb0:	9202      	str	r2, [sp, #8]
    cfb2:	7dfb      	ldrb	r3, [r7, #23]
    cfb4:	9301      	str	r3, [sp, #4]
    cfb6:	683b      	ldr	r3, [r7, #0]
    cfb8:	9300      	str	r3, [sp, #0]
    cfba:	687b      	ldr	r3, [r7, #4]
    cfbc:	68ba      	ldr	r2, [r7, #8]
    cfbe:	68f9      	ldr	r1, [r7, #12]
    cfc0:	69f8      	ldr	r0, [r7, #28]
    cfc2:	4c11      	ldr	r4, [pc, #68]	; (d008 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x6f4>)
    cfc4:	47a0      	blx	r4
    cfc6:	4603      	mov	r3, r0
    cfc8:	461a      	mov	r2, r3
    cfca:	69fb      	ldr	r3, [r7, #28]
    cfcc:	f883 2a18 	strb.w	r2, [r3, #2584]	; 0xa18
		if(err){CO_delete(); return err;}
    cfd0:	69fb      	ldr	r3, [r7, #28]
    cfd2:	f993 3a18 	ldrsb.w	r3, [r3, #2584]	; 0xa18
    cfd6:	2b00      	cmp	r3, #0
    cfd8:	d006      	beq.n	cfe8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x6d4>
    cfda:	69f8      	ldr	r0, [r7, #28]
    cfdc:	4b08      	ldr	r3, [pc, #32]	; (d000 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x6ec>)
    cfde:	4798      	blx	r3
    cfe0:	69fb      	ldr	r3, [r7, #28]
    cfe2:	f993 3a18 	ldrsb.w	r3, [r3, #2584]	; 0xa18
    cfe6:	e046      	b.n	d076 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x762>
	for(i=0; i<CO_NO_TPDO; i++){
    cfe8:	69fb      	ldr	r3, [r7, #28]
    cfea:	f8d3 3a14 	ldr.w	r3, [r3, #2580]	; 0xa14
    cfee:	1c5a      	adds	r2, r3, #1
    cff0:	69fb      	ldr	r3, [r7, #28]
    cff2:	f8c3 2a14 	str.w	r2, [r3, #2580]	; 0xa14
    cff6:	e77d      	b.n	cef4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x5e0>
    cff8:	20000294 	.word	0x20000294
    cffc:	0001279d 	.word	0x0001279d
    d000:	0000d08d 	.word	0x0000d08d
    d004:	0000fd5d 	.word	0x0000fd5d
    d008:	0000fe65 	.word	0x0000fe65
	}


	err = CO_HBconsumer_init(
    d00c:	69fb      	ldr	r3, [r7, #28]
    d00e:	f103 0014 	add.w	r0, r3, #20
	CO->HBcons,
    d012:	69fb      	ldr	r3, [r7, #28]
    d014:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	err = CO_HBconsumer_init(
    d018:	6b9c      	ldr	r4, [r3, #56]	; 0x38
	CO->em,
    d01a:	69fb      	ldr	r3, [r7, #28]
    d01c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	err = CO_HBconsumer_init(
    d020:	689d      	ldr	r5, [r3, #8]
	CO->SDO[0],
    d022:	69fb      	ldr	r3, [r7, #28]
    d024:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	err = CO_HBconsumer_init(
    d028:	685e      	ldr	r6, [r3, #4]
    d02a:	69fb      	ldr	r3, [r7, #28]
    d02c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
	&OD_consumerHeartbeatTime[0],
	CO_HBcons_monitoredNodes,
	CO_NO_HB_CONS,
	CO->CANmodule[0],
    d030:	69fa      	ldr	r2, [r7, #28]
    d032:	f8d2 2124 	ldr.w	r2, [r2, #292]	; 0x124
	err = CO_HBconsumer_init(
    d036:	6812      	ldr	r2, [r2, #0]
    d038:	2107      	movs	r1, #7
    d03a:	9104      	str	r1, [sp, #16]
    d03c:	9203      	str	r2, [sp, #12]
    d03e:	2204      	movs	r2, #4
    d040:	9202      	str	r2, [sp, #8]
    d042:	9301      	str	r3, [sp, #4]
    d044:	4b0e      	ldr	r3, [pc, #56]	; (d080 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x76c>)
    d046:	9300      	str	r3, [sp, #0]
    d048:	4633      	mov	r3, r6
    d04a:	462a      	mov	r2, r5
    d04c:	4621      	mov	r1, r4
    d04e:	4c0d      	ldr	r4, [pc, #52]	; (d084 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x770>)
    d050:	47a0      	blx	r4
    d052:	4603      	mov	r3, r0
    d054:	461a      	mov	r2, r3
    d056:	69fb      	ldr	r3, [r7, #28]
    d058:	f883 2a18 	strb.w	r2, [r3, #2584]	; 0xa18
	CO_RXCAN_CONS_HB);

	if(err){CO_delete(); return err;}
    d05c:	69fb      	ldr	r3, [r7, #28]
    d05e:	f993 3a18 	ldrsb.w	r3, [r3, #2584]	; 0xa18
    d062:	2b00      	cmp	r3, #0
    d064:	d006      	beq.n	d074 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x760>
    d066:	69f8      	ldr	r0, [r7, #28]
    d068:	4b07      	ldr	r3, [pc, #28]	; (d088 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x774>)
    d06a:	4798      	blx	r3
    d06c:	69fb      	ldr	r3, [r7, #28]
    d06e:	f993 3a18 	ldrsb.w	r3, [r3, #2584]	; 0xa18
    d072:	e000      	b.n	d076 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x762>
		OD_INDEX_TRACE + i);
	}
	#endif


	return CO_ERROR_NO;
    d074:	2300      	movs	r3, #0
}
    d076:	4618      	mov	r0, r3
    d078:	3734      	adds	r7, #52	; 0x34
    d07a:	46bd      	mov	sp, r7
    d07c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d07e:	bf00      	nop
    d080:	200002c4 	.word	0x200002c4
    d084:	0000e7a9 	.word	0x0000e7a9
    d088:	0000d08d 	.word	0x0000d08d

0000d08c <_ZN8CO_Class9CO_deleteEv>:


/******************************************************************************/
void CO_Class::CO_delete(void){
    d08c:	b580      	push	{r7, lr}
    d08e:	b082      	sub	sp, #8
    d090:	af00      	add	r7, sp, #0
    d092:	6078      	str	r0, [r7, #4]
	#ifndef CO_USE_GLOBALS
	uint32_t i;
	#endif

	CO_CANsetConfigurationMode(coCanDescr);
    d094:	687a      	ldr	r2, [r7, #4]
    d096:	687b      	ldr	r3, [r7, #4]
    d098:	f8d3 3a08 	ldr.w	r3, [r3, #2568]	; 0xa08
    d09c:	4619      	mov	r1, r3
    d09e:	4610      	mov	r0, r2
    d0a0:	4b04      	ldr	r3, [pc, #16]	; (d0b4 <_ZN8CO_Class9CO_deleteEv+0x28>)
    d0a2:	4798      	blx	r3
	CANmodule_Disable();
    d0a4:	687b      	ldr	r3, [r7, #4]
    d0a6:	4618      	mov	r0, r3
    d0a8:	4b03      	ldr	r3, [pc, #12]	; (d0b8 <_ZN8CO_Class9CO_deleteEv+0x2c>)
    d0aa:	4798      	blx	r3
		free(CO_CANmodule_txArray0);
		free(CO_CANmodule_rxArray0);
		free(CO->CANmodule[0]);
		CO = NULL;
	#endif
}
    d0ac:	bf00      	nop
    d0ae:	3708      	adds	r7, #8
    d0b0:	46bd      	mov	sp, r7
    d0b2:	bd80      	pop	{r7, pc}
    d0b4:	0000d501 	.word	0x0000d501
    d0b8:	0000d6b9 	.word	0x0000d6b9

0000d0bc <_ZN8CO_Class7ProcessEmPm>:


/******************************************************************************/
CO_NMT_reset_cmd_t CO_Class::Process(uint32_t                timeDifference_ms,
uint32_t               *timerNext_ms)
{
    d0bc:	b590      	push	{r4, r7, lr}
    d0be:	b08b      	sub	sp, #44	; 0x2c
    d0c0:	af04      	add	r7, sp, #16
    d0c2:	60f8      	str	r0, [r7, #12]
    d0c4:	60b9      	str	r1, [r7, #8]
    d0c6:	607a      	str	r2, [r7, #4]
	uint8_t i;
	bool_t NMTisPreOrOperational = false;
    d0c8:	2300      	movs	r3, #0
    d0ca:	75bb      	strb	r3, [r7, #22]
	CO_NMT_reset_cmd_t reset = CO_RESET_NOT;
    d0cc:	2300      	movs	r3, #0
    d0ce:	757b      	strb	r3, [r7, #21]
	ms50 = 0;
    d0d0:	68fb      	ldr	r3, [r7, #12]
    d0d2:	2200      	movs	r2, #0
    d0d4:	f8c3 2a10 	str.w	r2, [r3, #2576]	; 0xa10
	if(CO->NMT->operatingState == CO_NMT_PRE_OPERATIONAL || CO->NMT->operatingState == CO_NMT_OPERATIONAL)
    d0d8:	68fb      	ldr	r3, [r7, #12]
    d0da:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    d0de:	691b      	ldr	r3, [r3, #16]
    d0e0:	781b      	ldrb	r3, [r3, #0]
    d0e2:	2b7f      	cmp	r3, #127	; 0x7f
    d0e4:	d006      	beq.n	d0f4 <_ZN8CO_Class7ProcessEmPm+0x38>
    d0e6:	68fb      	ldr	r3, [r7, #12]
    d0e8:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    d0ec:	691b      	ldr	r3, [r3, #16]
    d0ee:	781b      	ldrb	r3, [r3, #0]
    d0f0:	2b05      	cmp	r3, #5
    d0f2:	d101      	bne.n	d0f8 <_ZN8CO_Class7ProcessEmPm+0x3c>
	NMTisPreOrOperational = true;
    d0f4:	2301      	movs	r3, #1
    d0f6:	75bb      	strb	r3, [r7, #22]

	ms50 += timeDifference_ms;
    d0f8:	68fb      	ldr	r3, [r7, #12]
    d0fa:	f8d3 2a10 	ldr.w	r2, [r3, #2576]	; 0xa10
    d0fe:	68bb      	ldr	r3, [r7, #8]
    d100:	441a      	add	r2, r3
    d102:	68fb      	ldr	r3, [r7, #12]
    d104:	f8c3 2a10 	str.w	r2, [r3, #2576]	; 0xa10
	if(ms50 >= 50){
    d108:	68fb      	ldr	r3, [r7, #12]
    d10a:	f8d3 3a10 	ldr.w	r3, [r3, #2576]	; 0xa10
    d10e:	2b31      	cmp	r3, #49	; 0x31
    d110:	d90c      	bls.n	d12c <_ZN8CO_Class7ProcessEmPm+0x70>
		ms50 -= 50;
    d112:	68fb      	ldr	r3, [r7, #12]
    d114:	f8d3 3a10 	ldr.w	r3, [r3, #2576]	; 0xa10
    d118:	f1a3 0232 	sub.w	r2, r3, #50	; 0x32
    d11c:	68fb      	ldr	r3, [r7, #12]
    d11e:	f8c3 2a10 	str.w	r2, [r3, #2576]	; 0xa10
		CO_NMT_blinkingProcess50ms();
    d122:	68fb      	ldr	r3, [r7, #12]
    d124:	3310      	adds	r3, #16
    d126:	4618      	mov	r0, r3
    d128:	4b2c      	ldr	r3, [pc, #176]	; (d1dc <_ZN8CO_Class7ProcessEmPm+0x120>)
    d12a:	4798      	blx	r3
	}
	if(timerNext_ms != NULL){
    d12c:	687b      	ldr	r3, [r7, #4]
    d12e:	2b00      	cmp	r3, #0
    d130:	d006      	beq.n	d140 <_ZN8CO_Class7ProcessEmPm+0x84>
		if(*timerNext_ms > 50){
    d132:	687b      	ldr	r3, [r7, #4]
    d134:	681b      	ldr	r3, [r3, #0]
    d136:	2b32      	cmp	r3, #50	; 0x32
    d138:	d902      	bls.n	d140 <_ZN8CO_Class7ProcessEmPm+0x84>
			*timerNext_ms = 50;
    d13a:	687b      	ldr	r3, [r7, #4]
    d13c:	2232      	movs	r2, #50	; 0x32
    d13e:	601a      	str	r2, [r3, #0]
		}
	}


	for(i=0; i<CO_NO_SDO_SERVER; i++){
    d140:	2300      	movs	r3, #0
    d142:	75fb      	strb	r3, [r7, #23]
    d144:	7dfb      	ldrb	r3, [r7, #23]
    d146:	2b00      	cmp	r3, #0
    d148:	dc0d      	bgt.n	d166 <_ZN8CO_Class7ProcessEmPm+0xaa>
		CO_SDO_process(
    d14a:	68fb      	ldr	r3, [r7, #12]
    d14c:	1d18      	adds	r0, r3, #4
	
		NMTisPreOrOperational,
		timeDifference_ms,
		1000,
		timerNext_ms);
    d14e:	7db9      	ldrb	r1, [r7, #22]
    d150:	687b      	ldr	r3, [r7, #4]
    d152:	9300      	str	r3, [sp, #0]
    d154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    d158:	68ba      	ldr	r2, [r7, #8]
    d15a:	4c21      	ldr	r4, [pc, #132]	; (d1e0 <_ZN8CO_Class7ProcessEmPm+0x124>)
    d15c:	47a0      	blx	r4
	for(i=0; i<CO_NO_SDO_SERVER; i++){
    d15e:	7dfb      	ldrb	r3, [r7, #23]
    d160:	3301      	adds	r3, #1
    d162:	75fb      	strb	r3, [r7, #23]
    d164:	e7ee      	b.n	d144 <_ZN8CO_Class7ProcessEmPm+0x88>
	}

	EM_process(
    d166:	68fb      	ldr	r3, [r7, #12]
    d168:	1d18      	adds	r0, r3, #4
	CO->emPr,
    d16a:	68fb      	ldr	r3, [r7, #12]
    d16c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	EM_process(
    d170:	68d9      	ldr	r1, [r3, #12]
    d172:	68ba      	ldr	r2, [r7, #8]
    d174:	4613      	mov	r3, r2
    d176:	009b      	lsls	r3, r3, #2
    d178:	4413      	add	r3, r2
    d17a:	005b      	lsls	r3, r3, #1
    d17c:	461c      	mov	r4, r3
	NMTisPreOrOperational,
	timeDifference_ms * 10,
	OD_inhibitTimeEMCY);
    d17e:	4b19      	ldr	r3, [pc, #100]	; (d1e4 <_ZN8CO_Class7ProcessEmPm+0x128>)
    d180:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    d182:	7dba      	ldrb	r2, [r7, #22]
    d184:	9300      	str	r3, [sp, #0]
    d186:	4623      	mov	r3, r4
    d188:	4c17      	ldr	r4, [pc, #92]	; (d1e8 <_ZN8CO_Class7ProcessEmPm+0x12c>)
    d18a:	47a0      	blx	r4


	reset = CO_NMT_process(
    d18c:	68fb      	ldr	r3, [r7, #12]
    d18e:	f103 0010 	add.w	r0, r3, #16
	timeDifference_ms,
	OD_producerHeartbeatTime,
    d192:	4b14      	ldr	r3, [pc, #80]	; (d1e4 <_ZN8CO_Class7ProcessEmPm+0x128>)
    d194:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
	reset = CO_NMT_process(
    d198:	461c      	mov	r4, r3
    d19a:	4b12      	ldr	r3, [pc, #72]	; (d1e4 <_ZN8CO_Class7ProcessEmPm+0x128>)
    d19c:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
    d1a0:	4b12      	ldr	r3, [pc, #72]	; (d1ec <_ZN8CO_Class7ProcessEmPm+0x130>)
    d1a2:	791b      	ldrb	r3, [r3, #4]
	OD_NMTStartup,
	OD_errorRegister,
	OD_errorBehavior,
	timerNext_ms);
    d1a4:	687a      	ldr	r2, [r7, #4]
    d1a6:	9202      	str	r2, [sp, #8]
    d1a8:	4a11      	ldr	r2, [pc, #68]	; (d1f0 <_ZN8CO_Class7ProcessEmPm+0x134>)
    d1aa:	9201      	str	r2, [sp, #4]
    d1ac:	9300      	str	r3, [sp, #0]
    d1ae:	460b      	mov	r3, r1
    d1b0:	4622      	mov	r2, r4
    d1b2:	68b9      	ldr	r1, [r7, #8]
    d1b4:	4c0f      	ldr	r4, [pc, #60]	; (d1f4 <_ZN8CO_Class7ProcessEmPm+0x138>)
    d1b6:	47a0      	blx	r4
    d1b8:	4603      	mov	r3, r0
    d1ba:	757b      	strb	r3, [r7, #21]


	CO_HBconsumer_process(
    d1bc:	68fb      	ldr	r3, [r7, #12]
    d1be:	f103 0014 	add.w	r0, r3, #20
	CO->HBcons,
    d1c2:	68fb      	ldr	r3, [r7, #12]
    d1c4:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	CO_HBconsumer_process(
    d1c8:	6b99      	ldr	r1, [r3, #56]	; 0x38
	NMTisPreOrOperational,
	timeDifference_ms);
    d1ca:	7dba      	ldrb	r2, [r7, #22]
    d1cc:	68bb      	ldr	r3, [r7, #8]
    d1ce:	4c0a      	ldr	r4, [pc, #40]	; (d1f8 <_ZN8CO_Class7ProcessEmPm+0x13c>)
    d1d0:	47a0      	blx	r4

	return reset;
    d1d2:	7d7b      	ldrb	r3, [r7, #21]
}
    d1d4:	4618      	mov	r0, r3
    d1d6:	371c      	adds	r7, #28
    d1d8:	46bd      	mov	sp, r7
    d1da:	bd90      	pop	{r4, r7, pc}
    d1dc:	0000eb81 	.word	0x0000eb81
    d1e0:	0001116d 	.word	0x0001116d
    d1e4:	20000294 	.word	0x20000294
    d1e8:	0000e0d1 	.word	0x0000e0d1
    d1ec:	20000118 	.word	0x20000118
    d1f0:	200002ed 	.word	0x200002ed
    d1f4:	0000ed49 	.word	0x0000ed49
    d1f8:	0000e86d 	.word	0x0000e86d

0000d1fc <_ZN8CO_Class20CO_process_SYNC_RPDOEm>:


/******************************************************************************/
bool_t CO_Class::CO_process_SYNC_RPDO(uint32_t                timeDifference_us)
{
    d1fc:	b590      	push	{r4, r7, lr}
    d1fe:	b085      	sub	sp, #20
    d200:	af00      	add	r7, sp, #0
    d202:	6078      	str	r0, [r7, #4]
    d204:	6039      	str	r1, [r7, #0]
	uint32_t i;
	bool_t syncWas = false;
    d206:	2300      	movs	r3, #0
    d208:	72fb      	strb	r3, [r7, #11]

	switch(CO_SYNC_process(CO->SYNC, timeDifference_us, OD_synchronousWindowLength)){
    d20a:	687b      	ldr	r3, [r7, #4]
    d20c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    d210:	6959      	ldr	r1, [r3, #20]
    d212:	4b17      	ldr	r3, [pc, #92]	; (d270 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x74>)
    d214:	691b      	ldr	r3, [r3, #16]
    d216:	683a      	ldr	r2, [r7, #0]
    d218:	6878      	ldr	r0, [r7, #4]
    d21a:	4c16      	ldr	r4, [pc, #88]	; (d274 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x78>)
    d21c:	47a0      	blx	r4
    d21e:	4603      	mov	r3, r0
    d220:	2b01      	cmp	r3, #1
    d222:	d002      	beq.n	d22a <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x2e>
    d224:	2b02      	cmp	r3, #2
    d226:	d003      	beq.n	d230 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x34>
    d228:	e007      	b.n	d23a <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x3e>
		case 1:     //immediately after the SYNC message
		syncWas = true;
    d22a:	2301      	movs	r3, #1
    d22c:	72fb      	strb	r3, [r7, #11]
		break;
    d22e:	e004      	b.n	d23a <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x3e>
		case 2:     //outside SYNC window
		CANClearPendingSyncPDOs();
    d230:	687b      	ldr	r3, [r7, #4]
    d232:	4618      	mov	r0, r3
    d234:	4b10      	ldr	r3, [pc, #64]	; (d278 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x7c>)
    d236:	4798      	blx	r3
		break;
    d238:	bf00      	nop
	}

	for(i=0; i<CO_NO_RPDO; i++){
    d23a:	2300      	movs	r3, #0
    d23c:	60fb      	str	r3, [r7, #12]
    d23e:	68fb      	ldr	r3, [r7, #12]
    d240:	2b03      	cmp	r3, #3
    d242:	d80f      	bhi.n	d264 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x68>
		CO_RPDO_process(CO->RPDO[i], syncWas);
    d244:	687b      	ldr	r3, [r7, #4]
    d246:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    d24a:	68fa      	ldr	r2, [r7, #12]
    d24c:	3206      	adds	r2, #6
    d24e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    d252:	7afa      	ldrb	r2, [r7, #11]
    d254:	4619      	mov	r1, r3
    d256:	6878      	ldr	r0, [r7, #4]
    d258:	4b08      	ldr	r3, [pc, #32]	; (d27c <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x80>)
    d25a:	4798      	blx	r3
	for(i=0; i<CO_NO_RPDO; i++){
    d25c:	68fb      	ldr	r3, [r7, #12]
    d25e:	3301      	adds	r3, #1
    d260:	60fb      	str	r3, [r7, #12]
    d262:	e7ec      	b.n	d23e <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x42>
	}

	return syncWas;
    d264:	7afb      	ldrb	r3, [r7, #11]
}
    d266:	4618      	mov	r0, r3
    d268:	3714      	adds	r7, #20
    d26a:	46bd      	mov	sp, r7
    d26c:	bd90      	pop	{r4, r7, pc}
    d26e:	bf00      	nop
    d270:	20000294 	.word	0x20000294
    d274:	00012931 	.word	0x00012931
    d278:	0000d999 	.word	0x0000d999
    d27c:	00010221 	.word	0x00010221

0000d280 <_ZN8CO_Class15CO_process_TPDOEhm>:


/******************************************************************************/
void CO_Class::CO_process_TPDO(bool_t                  syncWas,
uint32_t                timeDifference_us)
{
    d280:	b590      	push	{r4, r7, lr}
    d282:	b089      	sub	sp, #36	; 0x24
    d284:	af02      	add	r7, sp, #8
    d286:	60f8      	str	r0, [r7, #12]
    d288:	460b      	mov	r3, r1
    d28a:	607a      	str	r2, [r7, #4]
    d28c:	72fb      	strb	r3, [r7, #11]
	uint32_t i;

	/* Verify PDO Change Of State and process PDOs */
	for(i=0; i<CO_NO_TPDO; i++){
    d28e:	2300      	movs	r3, #0
    d290:	617b      	str	r3, [r7, #20]
    d292:	697b      	ldr	r3, [r7, #20]
    d294:	2b03      	cmp	r3, #3
    d296:	d833      	bhi.n	d300 <_ZN8CO_Class15CO_process_TPDOEhm+0x80>
		if(!CO->TPDO[i]->sendRequest) CO->TPDO[i]->sendRequest = CO_TPDOisCOS(CO->TPDO[i]);
    d298:	68fb      	ldr	r3, [r7, #12]
    d29a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    d29e:	697a      	ldr	r2, [r7, #20]
    d2a0:	320a      	adds	r2, #10
    d2a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    d2a6:	7fdb      	ldrb	r3, [r3, #31]
    d2a8:	2b00      	cmp	r3, #0
    d2aa:	d113      	bne.n	d2d4 <_ZN8CO_Class15CO_process_TPDOEhm+0x54>
    d2ac:	68fb      	ldr	r3, [r7, #12]
    d2ae:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    d2b2:	697a      	ldr	r2, [r7, #20]
    d2b4:	320a      	adds	r2, #10
    d2b6:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
    d2ba:	68fb      	ldr	r3, [r7, #12]
    d2bc:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    d2c0:	697a      	ldr	r2, [r7, #20]
    d2c2:	320a      	adds	r2, #10
    d2c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    d2c8:	4619      	mov	r1, r3
    d2ca:	68f8      	ldr	r0, [r7, #12]
    d2cc:	4b0e      	ldr	r3, [pc, #56]	; (d308 <_ZN8CO_Class15CO_process_TPDOEhm+0x88>)
    d2ce:	4798      	blx	r3
    d2d0:	4603      	mov	r3, r0
    d2d2:	77e3      	strb	r3, [r4, #31]
		CO_TPDO_process(CO->TPDO[i], CO->SYNC, syncWas, timeDifference_us);
    d2d4:	68fb      	ldr	r3, [r7, #12]
    d2d6:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    d2da:	697a      	ldr	r2, [r7, #20]
    d2dc:	320a      	adds	r2, #10
    d2de:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    d2e2:	68fb      	ldr	r3, [r7, #12]
    d2e4:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    d2e8:	695a      	ldr	r2, [r3, #20]
    d2ea:	7af8      	ldrb	r0, [r7, #11]
    d2ec:	687b      	ldr	r3, [r7, #4]
    d2ee:	9300      	str	r3, [sp, #0]
    d2f0:	4603      	mov	r3, r0
    d2f2:	68f8      	ldr	r0, [r7, #12]
    d2f4:	4c05      	ldr	r4, [pc, #20]	; (d30c <_ZN8CO_Class15CO_process_TPDOEhm+0x8c>)
    d2f6:	47a0      	blx	r4
	for(i=0; i<CO_NO_TPDO; i++){
    d2f8:	697b      	ldr	r3, [r7, #20]
    d2fa:	3301      	adds	r3, #1
    d2fc:	617b      	str	r3, [r7, #20]
    d2fe:	e7c8      	b.n	d292 <_ZN8CO_Class15CO_process_TPDOEhm+0x12>
	}
}
    d300:	bf00      	nop
    d302:	371c      	adds	r7, #28
    d304:	46bd      	mov	sp, r7
    d306:	bd90      	pop	{r4, r7, pc}
    d308:	0000ffa5 	.word	0x0000ffa5
    d30c:	000102f1 	.word	0x000102f1

0000d310 <hri_can_read_TXFQS_TFFL_bf>:
{
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFFL(mask)) >> CAN_TXFQS_TFFL_Pos;
}

static inline hri_can_txfqs_reg_t hri_can_read_TXFQS_TFFL_bf(const void *const hw)
{
    d310:	b480      	push	{r7}
    d312:	b083      	sub	sp, #12
    d314:	af00      	add	r7, sp, #0
    d316:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFFL_Msk) >> CAN_TXFQS_TFFL_Pos;
    d318:	687b      	ldr	r3, [r7, #4]
    d31a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    d31e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
    d322:	4618      	mov	r0, r3
    d324:	370c      	adds	r7, #12
    d326:	46bd      	mov	sp, r7
    d328:	bc80      	pop	{r7}
    d32a:	4770      	bx	lr

0000d32c <_ZL14CO_rx_callbackP20can_async_descriptor>:
#include "CO_Driver_Class.h"

CO_Driver_Class		*ptrCODriverClass;

static void CO_rx_callback(struct can_async_descriptor *const descr)
{
    d32c:	b580      	push	{r7, lr}
    d32e:	b082      	sub	sp, #8
    d330:	af00      	add	r7, sp, #0
    d332:	6078      	str	r0, [r7, #4]
	ptrCODriverClass->receivedCOMsg.data=ptrCODriverClass->co_rx_buffer_64;
    d334:	4b0a      	ldr	r3, [pc, #40]	; (d360 <_ZL14CO_rx_callbackP20can_async_descriptor+0x34>)
    d336:	681b      	ldr	r3, [r3, #0]
    d338:	4a09      	ldr	r2, [pc, #36]	; (d360 <_ZL14CO_rx_callbackP20can_async_descriptor+0x34>)
    d33a:	6812      	ldr	r2, [r2, #0]
    d33c:	321f      	adds	r2, #31
    d33e:	669a      	str	r2, [r3, #104]	; 0x68
	can_async_read(descr, &(ptrCODriverClass->receivedCOMsg));
    d340:	4b07      	ldr	r3, [pc, #28]	; (d360 <_ZL14CO_rx_callbackP20can_async_descriptor+0x34>)
    d342:	681b      	ldr	r3, [r3, #0]
    d344:	3360      	adds	r3, #96	; 0x60
    d346:	4619      	mov	r1, r3
    d348:	6878      	ldr	r0, [r7, #4]
    d34a:	4b06      	ldr	r3, [pc, #24]	; (d364 <_ZL14CO_rx_callbackP20can_async_descriptor+0x38>)
    d34c:	4798      	blx	r3
	ptrCODriverClass->receivedRxCOCallback=true;
    d34e:	4b04      	ldr	r3, [pc, #16]	; (d360 <_ZL14CO_rx_callbackP20can_async_descriptor+0x34>)
    d350:	681b      	ldr	r3, [r3, #0]
    d352:	2201      	movs	r2, #1
    d354:	771a      	strb	r2, [r3, #28]
// 	if(ptrCODriver->RxFifo_Callback_CanModule_p != NULL)
// 	{
// 		ProcessInterrupt_Rx();
// 	
}
    d356:	bf00      	nop
    d358:	3708      	adds	r7, #8
    d35a:	46bd      	mov	sp, r7
    d35c:	bd80      	pop	{r7, pc}
    d35e:	bf00      	nop
    d360:	20001934 	.word	0x20001934
    d364:	000017a9 	.word	0x000017a9

0000d368 <_ZL21CO_IRQ_Error_CallbackP20can_async_descriptor>:

static void CO_IRQ_Error_Callback(struct can_async_descriptor *const descr)
{
    d368:	b590      	push	{r4, r7, lr}
    d36a:	b083      	sub	sp, #12
    d36c:	af00      	add	r7, sp, #0
    d36e:	6078      	str	r0, [r7, #4]
	
	ptrCODriverClass->HalCanErrorCode= can_async_read(descr, &(ptrCODriverClass->receivedCOMsg));
    d370:	4b09      	ldr	r3, [pc, #36]	; (d398 <_ZL21CO_IRQ_Error_CallbackP20can_async_descriptor+0x30>)
    d372:	681c      	ldr	r4, [r3, #0]
    d374:	4b08      	ldr	r3, [pc, #32]	; (d398 <_ZL21CO_IRQ_Error_CallbackP20can_async_descriptor+0x30>)
    d376:	681b      	ldr	r3, [r3, #0]
    d378:	3360      	adds	r3, #96	; 0x60
    d37a:	4619      	mov	r1, r3
    d37c:	6878      	ldr	r0, [r7, #4]
    d37e:	4b07      	ldr	r3, [pc, #28]	; (d39c <_ZL21CO_IRQ_Error_CallbackP20can_async_descriptor+0x34>)
    d380:	4798      	blx	r3
    d382:	4603      	mov	r3, r0
    d384:	61a3      	str	r3, [r4, #24]
	ptrCODriverClass->receivedIntCOCallback=true;
    d386:	4b04      	ldr	r3, [pc, #16]	; (d398 <_ZL21CO_IRQ_Error_CallbackP20can_async_descriptor+0x30>)
    d388:	681b      	ldr	r3, [r3, #0]
    d38a:	2201      	movs	r2, #1
    d38c:	779a      	strb	r2, [r3, #30]
}
    d38e:	bf00      	nop
    d390:	370c      	adds	r7, #12
    d392:	46bd      	mov	sp, r7
    d394:	bd90      	pop	{r4, r7, pc}
    d396:	bf00      	nop
    d398:	20001934 	.word	0x20001934
    d39c:	000017a9 	.word	0x000017a9

0000d3a0 <_ZL14CO_tx_callbackP20can_async_descriptor>:


static void CO_tx_callback(struct can_async_descriptor *const descr)
{
    d3a0:	b480      	push	{r7}
    d3a2:	b083      	sub	sp, #12
    d3a4:	af00      	add	r7, sp, #0
    d3a6:	6078      	str	r0, [r7, #4]
	(void)descr;
	ptrCODriverClass->receivedtxCOCallback=true;
    d3a8:	4b04      	ldr	r3, [pc, #16]	; (d3bc <_ZL14CO_tx_callbackP20can_async_descriptor+0x1c>)
    d3aa:	681b      	ldr	r3, [r3, #0]
    d3ac:	2201      	movs	r2, #1
    d3ae:	775a      	strb	r2, [r3, #29]
	
}
    d3b0:	bf00      	nop
    d3b2:	370c      	adds	r7, #12
    d3b4:	46bd      	mov	sp, r7
    d3b6:	bc80      	pop	{r7}
    d3b8:	4770      	bx	lr
    d3ba:	bf00      	nop
    d3bc:	20001934 	.word	0x20001934

0000d3c0 <_ZN15CO_Driver_ClassC1Ev>:

// default constructor
CO_Driver_Class::CO_Driver_Class()
    d3c0:	b580      	push	{r7, lr}
    d3c2:	b082      	sub	sp, #8
    d3c4:	af00      	add	r7, sp, #0
    d3c6:	6078      	str	r0, [r7, #4]
    d3c8:	687b      	ldr	r3, [r7, #4]
    d3ca:	3304      	adds	r3, #4
    d3cc:	4618      	mov	r0, r3
    d3ce:	4b10      	ldr	r3, [pc, #64]	; (d410 <_ZN15CO_Driver_ClassC1Ev+0x50>)
    d3d0:	4798      	blx	r3
    d3d2:	687b      	ldr	r3, [r7, #4]
    d3d4:	3310      	adds	r3, #16
    d3d6:	4618      	mov	r0, r3
    d3d8:	4b0e      	ldr	r3, [pc, #56]	; (d414 <_ZN15CO_Driver_ClassC1Ev+0x54>)
    d3da:	4798      	blx	r3
    d3dc:	6878      	ldr	r0, [r7, #4]
    d3de:	4b0e      	ldr	r3, [pc, #56]	; (d418 <_ZN15CO_Driver_ClassC1Ev+0x58>)
    d3e0:	4798      	blx	r3
    d3e2:	6878      	ldr	r0, [r7, #4]
    d3e4:	4b0d      	ldr	r3, [pc, #52]	; (d41c <_ZN15CO_Driver_ClassC1Ev+0x5c>)
    d3e6:	4798      	blx	r3
    d3e8:	687b      	ldr	r3, [r7, #4]
    d3ea:	3314      	adds	r3, #20
    d3ec:	4618      	mov	r0, r3
    d3ee:	4b0c      	ldr	r3, [pc, #48]	; (d420 <_ZN15CO_Driver_ClassC1Ev+0x60>)
    d3f0:	4798      	blx	r3
    d3f2:	4a0c      	ldr	r2, [pc, #48]	; (d424 <_ZN15CO_Driver_ClassC1Ev+0x64>)
    d3f4:	687b      	ldr	r3, [r7, #4]
    d3f6:	601a      	str	r2, [r3, #0]
{
	RxFifo_Callback_CanModule_p = NULL;
    d3f8:	687b      	ldr	r3, [r7, #4]
    d3fa:	2200      	movs	r2, #0
    d3fc:	671a      	str	r2, [r3, #112]	; 0x70
	ptrCODriverClass=this;
    d3fe:	4a0a      	ldr	r2, [pc, #40]	; (d428 <_ZN15CO_Driver_ClassC1Ev+0x68>)
    d400:	687b      	ldr	r3, [r7, #4]
    d402:	6013      	str	r3, [r2, #0]
} //CO_Driver_Class
    d404:	687b      	ldr	r3, [r7, #4]
    d406:	4618      	mov	r0, r3
    d408:	3708      	adds	r7, #8
    d40a:	46bd      	mov	sp, r7
    d40c:	bd80      	pop	{r7, pc}
    d40e:	bf00      	nop
    d410:	0000de55 	.word	0x0000de55
    d414:	0000ea4b 	.word	0x0000ea4b
    d418:	000124c5 	.word	0x000124c5
    d41c:	0000f1c5 	.word	0x0000f1c5
    d420:	0000e781 	.word	0x0000e781
    d424:	000132dc 	.word	0x000132dc
    d428:	20001934 	.word	0x20001934

0000d42c <_ZN15CO_Driver_ClassD1Ev>:

// default destructor
CO_Driver_Class::~CO_Driver_Class()
    d42c:	b580      	push	{r7, lr}
    d42e:	b082      	sub	sp, #8
    d430:	af00      	add	r7, sp, #0
    d432:	6078      	str	r0, [r7, #4]
    d434:	4a0e      	ldr	r2, [pc, #56]	; (d470 <_ZN15CO_Driver_ClassD1Ev+0x44>)
    d436:	687b      	ldr	r3, [r7, #4]
    d438:	601a      	str	r2, [r3, #0]
    d43a:	687b      	ldr	r3, [r7, #4]
    d43c:	3314      	adds	r3, #20
    d43e:	4618      	mov	r0, r3
    d440:	4b0c      	ldr	r3, [pc, #48]	; (d474 <_ZN15CO_Driver_ClassD1Ev+0x48>)
    d442:	4798      	blx	r3
    d444:	6878      	ldr	r0, [r7, #4]
    d446:	4b0c      	ldr	r3, [pc, #48]	; (d478 <_ZN15CO_Driver_ClassD1Ev+0x4c>)
    d448:	4798      	blx	r3
    d44a:	6878      	ldr	r0, [r7, #4]
    d44c:	4b0b      	ldr	r3, [pc, #44]	; (d47c <_ZN15CO_Driver_ClassD1Ev+0x50>)
    d44e:	4798      	blx	r3
    d450:	687b      	ldr	r3, [r7, #4]
    d452:	3310      	adds	r3, #16
    d454:	4618      	mov	r0, r3
    d456:	4b0a      	ldr	r3, [pc, #40]	; (d480 <_ZN15CO_Driver_ClassD1Ev+0x54>)
    d458:	4798      	blx	r3
    d45a:	687b      	ldr	r3, [r7, #4]
    d45c:	3304      	adds	r3, #4
    d45e:	4618      	mov	r0, r3
    d460:	4b08      	ldr	r3, [pc, #32]	; (d484 <_ZN15CO_Driver_ClassD1Ev+0x58>)
    d462:	4798      	blx	r3
{
} //~CO_Driver_Class
    d464:	687b      	ldr	r3, [r7, #4]
    d466:	4618      	mov	r0, r3
    d468:	3708      	adds	r7, #8
    d46a:	46bd      	mov	sp, r7
    d46c:	bd80      	pop	{r7, pc}
    d46e:	bf00      	nop
    d470:	000132dc 	.word	0x000132dc
    d474:	0000e795 	.word	0x0000e795
    d478:	0000f1d9 	.word	0x0000f1d9
    d47c:	000124d9 	.word	0x000124d9
    d480:	0000ea5f 	.word	0x0000ea5f
    d484:	0000de7d 	.word	0x0000de7d

0000d488 <_ZN15CO_Driver_Class15PrepareTxHeaderEP11can_messageP10CO_CANtx_t>:
 * \param [in]	buffer ponyer to CO_CANtx_t with CANopen configuration data
 *
 * \ingroup CO_driver
 ******************************************************************************/
void CO_Driver_Class::PrepareTxHeader(struct can_message *msgHeader, CO_CANtx_t *buffer)
{
    d488:	b480      	push	{r7}
    d48a:	b085      	sub	sp, #20
    d48c:	af00      	add	r7, sp, #0
    d48e:	60f8      	str	r0, [r7, #12]
    d490:	60b9      	str	r1, [r7, #8]
    d492:	607a      	str	r2, [r7, #4]
	/* Map buffer data to the HAL CAN tx header data*/
	//TxHeader->ExtId = 0u;
	msgHeader->id=0;
    d494:	68bb      	ldr	r3, [r7, #8]
    d496:	2200      	movs	r2, #0
    d498:	601a      	str	r2, [r3, #0]
	//TxHeader->IDE = 0;
	msgHeader->fmt=CAN_FMT_STDID;
    d49a:	68bb      	ldr	r3, [r7, #8]
    d49c:	2200      	movs	r2, #0
    d49e:	735a      	strb	r2, [r3, #13]
	
	//TxHeader->DLC = buffer->DLC;
	msgHeader->len=buffer->DLC;
    d4a0:	687b      	ldr	r3, [r7, #4]
    d4a2:	791a      	ldrb	r2, [r3, #4]
    d4a4:	68bb      	ldr	r3, [r7, #8]
    d4a6:	731a      	strb	r2, [r3, #12]
	
	//TxHeader->StdId = ( buffer->ident >> 2 );
	msgHeader->id=( buffer->ident >> 2 );
    d4a8:	687b      	ldr	r3, [r7, #4]
    d4aa:	681b      	ldr	r3, [r3, #0]
    d4ac:	089a      	lsrs	r2, r3, #2
    d4ae:	68bb      	ldr	r3, [r7, #8]
    d4b0:	601a      	str	r2, [r3, #0]
	
	//TxHeader->RTR = ( buffer->ident & 0x2 );
	msgHeader->type=(can_type)( buffer->ident & 0x2 );
    d4b2:	687b      	ldr	r3, [r7, #4]
    d4b4:	681b      	ldr	r3, [r3, #0]
    d4b6:	b2db      	uxtb	r3, r3
    d4b8:	f003 0302 	and.w	r3, r3, #2
    d4bc:	b2da      	uxtb	r2, r3
    d4be:	68bb      	ldr	r3, [r7, #8]
    d4c0:	711a      	strb	r2, [r3, #4]
}
    d4c2:	bf00      	nop
    d4c4:	3714      	adds	r7, #20
    d4c6:	46bd      	mov	sp, r7
    d4c8:	bc80      	pop	{r7}
    d4ca:	4770      	bx	lr

0000d4cc <_ZN15CO_Driver_Class21ConvertCANMsg2CORxMsgER11can_messageP13CO_CANrxMsg_t>:

void CO_Driver_Class::ConvertCANMsg2CORxMsg(can_message& msgHeader, CO_CANrxMsg_t *rxMsg)
{
    d4cc:	b490      	push	{r4, r7}
    d4ce:	b084      	sub	sp, #16
    d4d0:	af00      	add	r7, sp, #0
    d4d2:	60f8      	str	r0, [r7, #12]
    d4d4:	60b9      	str	r1, [r7, #8]
    d4d6:	607a      	str	r2, [r7, #4]
	rxMsg->RxHeader=msgHeader;
    d4d8:	687a      	ldr	r2, [r7, #4]
    d4da:	68bb      	ldr	r3, [r7, #8]
    d4dc:	4614      	mov	r4, r2
    d4de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    d4e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	rxMsg->DLC=msgHeader.len;
    d4e4:	68bb      	ldr	r3, [r7, #8]
    d4e6:	7b1a      	ldrb	r2, [r3, #12]
    d4e8:	687b      	ldr	r3, [r7, #4]
    d4ea:	751a      	strb	r2, [r3, #20]
	rxMsg->ident=msgHeader.id<<2;
    d4ec:	68bb      	ldr	r3, [r7, #8]
    d4ee:	681b      	ldr	r3, [r3, #0]
    d4f0:	009a      	lsls	r2, r3, #2
    d4f2:	687b      	ldr	r3, [r7, #4]
    d4f4:	611a      	str	r2, [r3, #16]
	/* Map buffer data to the HAL CAN tx header data*/
	//TxHeader->ExtId = 0u;

}
    d4f6:	bf00      	nop
    d4f8:	3710      	adds	r7, #16
    d4fa:	46bd      	mov	sp, r7
    d4fc:	bc90      	pop	{r4, r7}
    d4fe:	4770      	bx	lr

0000d500 <_ZN15CO_Driver_Class26CO_CANsetConfigurationModeEP20can_async_descriptor>:
	{
		;//TODO add assert here
	}
}

void CO_Driver_Class::CO_CANsetConfigurationMode(can_async_descriptor *descr){
    d500:	b480      	push	{r7}
    d502:	b083      	sub	sp, #12
    d504:	af00      	add	r7, sp, #0
    d506:	6078      	str	r0, [r7, #4]
    d508:	6039      	str	r1, [r7, #0]
	
	canDescr=descr;
    d50a:	687b      	ldr	r3, [r7, #4]
    d50c:	683a      	ldr	r2, [r7, #0]
    d50e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	/* Put CAN module in configuration mode */
	/* HAL is responsible for that */
}
    d512:	bf00      	nop
    d514:	370c      	adds	r7, #12
    d516:	46bd      	mov	sp, r7
    d518:	bc80      	pop	{r7}
    d51a:	4770      	bx	lr

0000d51c <_ZN15CO_Driver_Class19CO_CANsetNormalModeEv>:

/******************************************************************************/
CO_ReturnError_t CO_Driver_Class::CO_CANsetNormalMode(void){
    d51c:	b580      	push	{r7, lr}
    d51e:	b084      	sub	sp, #16
    d520:	af00      	add	r7, sp, #0
    d522:	6078      	str	r0, [r7, #4]
	/* Put CAN module in normal mode */
	int32_t		error_CAN_hal;
	Error = CO_ERROR_NO;
    d524:	687b      	ldr	r3, [r7, #4]
    d526:	2200      	movs	r2, #0
    d528:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	error_CAN_hal=can_async_enable(CAN_Module->CANBaseDescriptor);
    d52c:	687b      	ldr	r3, [r7, #4]
    d52e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    d532:	681b      	ldr	r3, [r3, #0]
    d534:	4618      	mov	r0, r3
    d536:	4b0a      	ldr	r3, [pc, #40]	; (d560 <_ZN15CO_Driver_Class19CO_CANsetNormalModeEv+0x44>)
    d538:	4798      	blx	r3
    d53a:	60f8      	str	r0, [r7, #12]
	//    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
	//    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
	//    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 1, 0);
	//    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);

	if (error_CAN_hal != CO_ERROR_NO)
    d53c:	68fb      	ldr	r3, [r7, #12]
    d53e:	2b00      	cmp	r3, #0
    d540:	d002      	beq.n	d548 <_ZN15CO_Driver_Class19CO_CANsetNormalModeEv+0x2c>
	{
		//_Error_Handler(__FILE__, __LINE__);
		return CO_ERROR_HAL;
    d542:	f06f 030e 	mvn.w	r3, #14
    d546:	e007      	b.n	d558 <_ZN15CO_Driver_Class19CO_CANsetNormalModeEv+0x3c>
	}
	CAN_Module->CANnormal = true;
    d548:	687b      	ldr	r3, [r7, #4]
    d54a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    d54e:	2201      	movs	r2, #1
    d550:	751a      	strb	r2, [r3, #20]
	return Error;
    d552:	687b      	ldr	r3, [r7, #4]
    d554:	f993 3098 	ldrsb.w	r3, [r3, #152]	; 0x98
}
    d558:	4618      	mov	r0, r3
    d55a:	3710      	adds	r7, #16
    d55c:	46bd      	mov	sp, r7
    d55e:	bd80      	pop	{r7, pc}
    d560:	00001731 	.word	0x00001731

0000d564 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm>:
		CO_CANrx_t              rxArray[],
		uint32_t                rxSize,
		CO_CANtx_t              txArray[],
		uint32_t                txSize,
		uint32_t                CANbitRate)
{
    d564:	b580      	push	{r7, lr}
    d566:	b086      	sub	sp, #24
    d568:	af00      	add	r7, sp, #0
    d56a:	60f8      	str	r0, [r7, #12]
    d56c:	60b9      	str	r1, [r7, #8]
    d56e:	607a      	str	r2, [r7, #4]
    d570:	603b      	str	r3, [r7, #0]
	canDescr=HALCanObject;
    d572:	68fb      	ldr	r3, [r7, #12]
    d574:	687a      	ldr	r2, [r7, #4]
    d576:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	
	int32_t		error_CAN_hal;

	/* verify arguments */
	if(CANmodule==NULL || rxArray==NULL || txArray==NULL)
    d57a:	68bb      	ldr	r3, [r7, #8]
    d57c:	2b00      	cmp	r3, #0
    d57e:	d005      	beq.n	d58c <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x28>
    d580:	683b      	ldr	r3, [r7, #0]
    d582:	2b00      	cmp	r3, #0
    d584:	d002      	beq.n	d58c <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x28>
    d586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d588:	2b00      	cmp	r3, #0
    d58a:	d102      	bne.n	d592 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x2e>
	{
		return CO_ERROR_ILLEGAL_ARGUMENT;
    d58c:	f04f 33ff 	mov.w	r3, #4294967295
    d590:	e084      	b.n	d69c <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x138>
	else
	{
		;//do nothing
	}

	RxFifo_Callback_CanModule_p = CANmodule;
    d592:	68fb      	ldr	r3, [r7, #12]
    d594:	68ba      	ldr	r2, [r7, #8]
    d596:	671a      	str	r2, [r3, #112]	; 0x70

	/* Configure object variables */
	CANmodule->CANBaseDescriptor = (can_async_descriptor*)HALCanObject;
    d598:	68bb      	ldr	r3, [r7, #8]
    d59a:	687a      	ldr	r2, [r7, #4]
    d59c:	601a      	str	r2, [r3, #0]
	CANmodule->rxArray = rxArray;
    d59e:	68bb      	ldr	r3, [r7, #8]
    d5a0:	683a      	ldr	r2, [r7, #0]
    d5a2:	605a      	str	r2, [r3, #4]
	CANmodule->rxSize = rxSize;
    d5a4:	68bb      	ldr	r3, [r7, #8]
    d5a6:	6a3a      	ldr	r2, [r7, #32]
    d5a8:	609a      	str	r2, [r3, #8]
	CANmodule->txArray = txArray;
    d5aa:	68bb      	ldr	r3, [r7, #8]
    d5ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    d5ae:	60da      	str	r2, [r3, #12]
	CANmodule->txSize = txSize;
    d5b0:	68bb      	ldr	r3, [r7, #8]
    d5b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d5b4:	611a      	str	r2, [r3, #16]
	CANmodule->CANnormal = false;
    d5b6:	68bb      	ldr	r3, [r7, #8]
    d5b8:	2200      	movs	r2, #0
    d5ba:	751a      	strb	r2, [r3, #20]
	CANmodule->useCANrxFilters = false;
    d5bc:	68bb      	ldr	r3, [r7, #8]
    d5be:	2200      	movs	r2, #0
    d5c0:	755a      	strb	r2, [r3, #21]
	CANmodule->bufferInhibitFlag = false;
    d5c2:	68bb      	ldr	r3, [r7, #8]
    d5c4:	2200      	movs	r2, #0
    d5c6:	759a      	strb	r2, [r3, #22]
	CANmodule->firstCANtxMessage = true;
    d5c8:	68bb      	ldr	r3, [r7, #8]
    d5ca:	2201      	movs	r2, #1
    d5cc:	75da      	strb	r2, [r3, #23]
	CANmodule->CANtxCount = 0U;
    d5ce:	68bb      	ldr	r3, [r7, #8]
    d5d0:	2200      	movs	r2, #0
    d5d2:	619a      	str	r2, [r3, #24]
	CANmodule->errOld = 0U;
    d5d4:	68bb      	ldr	r3, [r7, #8]
    d5d6:	2200      	movs	r2, #0
    d5d8:	61da      	str	r2, [r3, #28]
	CANmodule->em = NULL;
    d5da:	68bb      	ldr	r3, [r7, #8]
    d5dc:	2200      	movs	r2, #0
    d5de:	621a      	str	r2, [r3, #32]

	for(i=0U; i<rxSize; i++)
    d5e0:	68fb      	ldr	r3, [r7, #12]
    d5e2:	2200      	movs	r2, #0
    d5e4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    d5e8:	68fb      	ldr	r3, [r7, #12]
    d5ea:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    d5ee:	6a3b      	ldr	r3, [r7, #32]
    d5f0:	429a      	cmp	r2, r3
    d5f2:	d217      	bcs.n	d624 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0xc0>
	{
		rxArray[i].ident = 0U;
    d5f4:	68fb      	ldr	r3, [r7, #12]
    d5f6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    d5fa:	011b      	lsls	r3, r3, #4
    d5fc:	683a      	ldr	r2, [r7, #0]
    d5fe:	4413      	add	r3, r2
    d600:	2200      	movs	r2, #0
    d602:	601a      	str	r2, [r3, #0]
		rxArray[i].pFunct = NULL;
    d604:	68fb      	ldr	r3, [r7, #12]
    d606:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    d60a:	011b      	lsls	r3, r3, #4
    d60c:	683a      	ldr	r2, [r7, #0]
    d60e:	4413      	add	r3, r2
    d610:	2200      	movs	r2, #0
    d612:	60da      	str	r2, [r3, #12]
	for(i=0U; i<rxSize; i++)
    d614:	68fb      	ldr	r3, [r7, #12]
    d616:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    d61a:	1c5a      	adds	r2, r3, #1
    d61c:	68fb      	ldr	r3, [r7, #12]
    d61e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    d622:	e7e1      	b.n	d5e8 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x84>
	}

	for(i=0U; i<txSize; i++)
    d624:	68fb      	ldr	r3, [r7, #12]
    d626:	2200      	movs	r2, #0
    d628:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    d62c:	68fb      	ldr	r3, [r7, #12]
    d62e:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    d632:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d634:	429a      	cmp	r2, r3
    d636:	d20f      	bcs.n	d658 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0xf4>
	{
		txArray[i].bufferFull = false;
    d638:	68fb      	ldr	r3, [r7, #12]
    d63a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    d63e:	011b      	lsls	r3, r3, #4
    d640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    d642:	4413      	add	r3, r2
    d644:	2200      	movs	r2, #0
    d646:	735a      	strb	r2, [r3, #13]
	for(i=0U; i<txSize; i++)
    d648:	68fb      	ldr	r3, [r7, #12]
    d64a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    d64e:	1c5a      	adds	r2, r3, #1
    d650:	68fb      	ldr	r3, [r7, #12]
    d652:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    d656:	e7e9      	b.n	d62c <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0xc8>
	}


	CANmodule_Disable();
    d658:	68f8      	ldr	r0, [r7, #12]
    d65a:	4b12      	ldr	r3, [pc, #72]	; (d6a4 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x140>)
    d65c:	4798      	blx	r3
	error_CAN_hal=can_async_enable(HALCanObject);
    d65e:	6878      	ldr	r0, [r7, #4]
    d660:	4b11      	ldr	r3, [pc, #68]	; (d6a8 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x144>)
    d662:	4798      	blx	r3
    d664:	6178      	str	r0, [r7, #20]
	can_async_register_callback(canDescr, CAN_ASYNC_RX_CB, (FUNC_PTR)CO_rx_callback);
    d666:	68fb      	ldr	r3, [r7, #12]
    d668:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    d66c:	4a0f      	ldr	r2, [pc, #60]	; (d6ac <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x148>)
    d66e:	2100      	movs	r1, #0
    d670:	4618      	mov	r0, r3
    d672:	4b0f      	ldr	r3, [pc, #60]	; (d6b0 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x14c>)
    d674:	4798      	blx	r3
	can_async_register_callback(canDescr, CAN_ASYNC_IRQ_CB, (FUNC_PTR)CO_IRQ_Error_Callback);
    d676:	68fb      	ldr	r3, [r7, #12]
    d678:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    d67c:	4a0d      	ldr	r2, [pc, #52]	; (d6b4 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x150>)
    d67e:	2102      	movs	r1, #2
    d680:	4618      	mov	r0, r3
    d682:	4b0b      	ldr	r3, [pc, #44]	; (d6b0 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x14c>)
    d684:	4798      	blx	r3
	if (error_CAN_hal != CO_ERROR_NO)
    d686:	697b      	ldr	r3, [r7, #20]
    d688:	2b00      	cmp	r3, #0
    d68a:	d002      	beq.n	d692 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x12e>
	{
		//_Error_Handler(__FILE__, __LINE__);
		return CO_ERROR_HAL;
    d68c:	f06f 030e 	mvn.w	r3, #14
    d690:	e004      	b.n	d69c <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x138>
	}
	CAN_Module=CANmodule;
    d692:	68fb      	ldr	r3, [r7, #12]
    d694:	68ba      	ldr	r2, [r7, #8]
    d696:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	return CO_ERROR_NO;
    d69a:	2300      	movs	r3, #0
}
    d69c:	4618      	mov	r0, r3
    d69e:	3718      	adds	r7, #24
    d6a0:	46bd      	mov	sp, r7
    d6a2:	bd80      	pop	{r7, pc}
    d6a4:	0000d6b9 	.word	0x0000d6b9
    d6a8:	00001731 	.word	0x00001731
    d6ac:	0000d32d 	.word	0x0000d32d
    d6b0:	00001841 	.word	0x00001841
    d6b4:	0000d369 	.word	0x0000d369

0000d6b8 <_ZN15CO_Driver_Class17CANmodule_DisableEv>:


/******************************************************************************/
void CO_Driver_Class::CANmodule_Disable(void){
    d6b8:	b580      	push	{r7, lr}
    d6ba:	b082      	sub	sp, #8
    d6bc:	af00      	add	r7, sp, #0
    d6be:	6078      	str	r0, [r7, #4]
			CAN_IT_RX_FIFO0_MSG_PENDING |
			CAN_IT_RX_FIFO1_MSG_PENDING |
			CAN_IT_TX_MAILBOX_EMPTY);
	HAL_CAN_Stop(CANmodule->CANbaseAddress);
	*/
	can_async_disable(CAN_Module->CANBaseDescriptor);
    d6c0:	687b      	ldr	r3, [r7, #4]
    d6c2:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    d6c6:	681b      	ldr	r3, [r3, #0]
    d6c8:	4618      	mov	r0, r3
    d6ca:	4b03      	ldr	r3, [pc, #12]	; (d6d8 <_ZN15CO_Driver_Class17CANmodule_DisableEv+0x20>)
    d6cc:	4798      	blx	r3
}
    d6ce:	bf00      	nop
    d6d0:	3708      	adds	r7, #8
    d6d2:	46bd      	mov	sp, r7
    d6d4:	bd80      	pop	{r7, pc}
    d6d6:	bf00      	nop
    d6d8:	0000176d 	.word	0x0000176d

0000d6dc <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE>:
		uint32_t                ident,
		uint32_t                mask,
		bool_t                  rtr,
		void                   *object,
		void                  (*pFunct)(void *object, const CO_CANrxMsg_t *message))
{
    d6dc:	b590      	push	{r4, r7, lr}
    d6de:	b087      	sub	sp, #28
    d6e0:	af00      	add	r7, sp, #0
    d6e2:	60f8      	str	r0, [r7, #12]
    d6e4:	60b9      	str	r1, [r7, #8]
    d6e6:	607a      	str	r2, [r7, #4]
    d6e8:	603b      	str	r3, [r7, #0]
	ret = CO_ERROR_NO;
    d6ea:	68fb      	ldr	r3, [r7, #12]
    d6ec:	2200      	movs	r2, #0
    d6ee:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

	if((CAN_Module!=NULL) && (object!=NULL) && (pFunct!=NULL) && (index < CAN_Module->rxSize)){
    d6f2:	68fb      	ldr	r3, [r7, #12]
    d6f4:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    d6f8:	2b00      	cmp	r3, #0
    d6fa:	d05d      	beq.n	d7b8 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xdc>
    d6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d6fe:	2b00      	cmp	r3, #0
    d700:	d05a      	beq.n	d7b8 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xdc>
    d702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    d704:	2b00      	cmp	r3, #0
    d706:	d057      	beq.n	d7b8 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xdc>
    d708:	68fb      	ldr	r3, [r7, #12]
    d70a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    d70e:	689a      	ldr	r2, [r3, #8]
    d710:	68bb      	ldr	r3, [r7, #8]
    d712:	429a      	cmp	r2, r3
    d714:	d950      	bls.n	d7b8 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xdc>
		/* buffer, which will be configured */
		CO_CANrx_t *buffer = &CAN_Module->rxArray[index];
    d716:	68fb      	ldr	r3, [r7, #12]
    d718:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    d71c:	685a      	ldr	r2, [r3, #4]
    d71e:	68bb      	ldr	r3, [r7, #8]
    d720:	011b      	lsls	r3, r3, #4
    d722:	4413      	add	r3, r2
    d724:	617b      	str	r3, [r7, #20]

		/* Configure object variables */
		buffer->object = object;
    d726:	697b      	ldr	r3, [r7, #20]
    d728:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    d72a:	609a      	str	r2, [r3, #8]
		buffer->pFunct = pFunct;
    d72c:	697b      	ldr	r3, [r7, #20]
    d72e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    d730:	60da      	str	r2, [r3, #12]

		/* CAN identifier and CAN mask, bit aligned with CAN module. Different on different microcontrollers. */
		buffer->ident = (ident & 0x07FF) << 2;
    d732:	687b      	ldr	r3, [r7, #4]
    d734:	009a      	lsls	r2, r3, #2
    d736:	f641 73fc 	movw	r3, #8188	; 0x1ffc
    d73a:	4013      	ands	r3, r2
    d73c:	697a      	ldr	r2, [r7, #20]
    d73e:	6013      	str	r3, [r2, #0]
		if (rtr)
    d740:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    d744:	2b00      	cmp	r3, #0
    d746:	d005      	beq.n	d754 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0x78>
		{
			buffer->ident |= 0x02;
    d748:	697b      	ldr	r3, [r7, #20]
    d74a:	681b      	ldr	r3, [r3, #0]
    d74c:	f043 0202 	orr.w	r2, r3, #2
    d750:	697b      	ldr	r3, [r7, #20]
    d752:	601a      	str	r2, [r3, #0]
		}
		buffer->mask = (mask & 0x07FF) << 2;
    d754:	683b      	ldr	r3, [r7, #0]
    d756:	009a      	lsls	r2, r3, #2
    d758:	f641 73fc 	movw	r3, #8188	; 0x1ffc
    d75c:	4013      	ands	r3, r2
    d75e:	697a      	ldr	r2, [r7, #20]
    d760:	6053      	str	r3, [r2, #4]
		buffer->mask |= 0x02;
    d762:	697b      	ldr	r3, [r7, #20]
    d764:	685b      	ldr	r3, [r3, #4]
    d766:	f043 0202 	orr.w	r2, r3, #2
    d76a:	697b      	ldr	r3, [r7, #20]
    d76c:	605a      	str	r2, [r3, #4]

		/* Set CAN hardware module filter and mask. */
		if(CAN_Module->useCANrxFilters)
    d76e:	68fb      	ldr	r3, [r7, #12]
    d770:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    d774:	7d5b      	ldrb	r3, [r3, #21]
    d776:	b2db      	uxtb	r3, r3
    d778:	2b00      	cmp	r3, #0
    d77a:	bf14      	ite	ne
    d77c:	2301      	movne	r3, #1
    d77e:	2300      	moveq	r3, #0
    d780:	b2db      	uxtb	r3, r3
    d782:	2b00      	cmp	r3, #0
    d784:	d11d      	bne.n	d7c2 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xe6>
		else
		{
			/*no hardware filters*/
			//CAN_FilterTypeDef FilterConfig;
		
			CO_Filter.id   = 0;
    d786:	68fb      	ldr	r3, [r7, #12]
    d788:	2200      	movs	r2, #0
    d78a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
			CO_Filter.mask = 0;
    d78e:	68fb      	ldr	r3, [r7, #12]
    d790:	2200      	movs	r2, #0
    d792:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
			ret= (CO_ReturnError_t)can_async_set_filter(CAN_Module->CANBaseDescriptor, 0, CAN_FMT_STDID, &CO_Filter);
    d796:	68fb      	ldr	r3, [r7, #12]
    d798:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    d79c:	6818      	ldr	r0, [r3, #0]
    d79e:	68fb      	ldr	r3, [r7, #12]
    d7a0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
    d7a4:	2200      	movs	r2, #0
    d7a6:	2100      	movs	r1, #0
    d7a8:	4c0a      	ldr	r4, [pc, #40]	; (d7d4 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xf8>)
    d7aa:	47a0      	blx	r4
    d7ac:	4603      	mov	r3, r0
    d7ae:	b25a      	sxtb	r2, r3
    d7b0:	68fb      	ldr	r3, [r7, #12]
    d7b2:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
		}
    d7b6:	e004      	b.n	d7c2 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xe6>
	}
	else
	{
		ret = CO_ERROR_ILLEGAL_ARGUMENT;
    d7b8:	68fb      	ldr	r3, [r7, #12]
    d7ba:	22ff      	movs	r2, #255	; 0xff
    d7bc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
    d7c0:	e000      	b.n	d7c4 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xe8>
		}
    d7c2:	bf00      	nop
	}
	return ret;
    d7c4:	68fb      	ldr	r3, [r7, #12]
    d7c6:	f993 3099 	ldrsb.w	r3, [r3, #153]	; 0x99
}
    d7ca:	4618      	mov	r0, r3
    d7cc:	371c      	adds	r7, #28
    d7ce:	46bd      	mov	sp, r7
    d7d0:	bd90      	pop	{r4, r7, pc}
    d7d2:	bf00      	nop
    d7d4:	000018bd 	.word	0x000018bd

0000d7d8 <_ZN15CO_Driver_Class17CAN_Tx_BufferInitEmmhhh>:
		uint32_t                index,
		uint32_t                ident,
		bool_t                  rtr,
		uint8_t                 noOfBytes,
		bool_t                  syncFlag)
{
    d7d8:	b480      	push	{r7}
    d7da:	b085      	sub	sp, #20
    d7dc:	af00      	add	r7, sp, #0
    d7de:	60f8      	str	r0, [r7, #12]
    d7e0:	60b9      	str	r1, [r7, #8]
    d7e2:	607a      	str	r2, [r7, #4]
    d7e4:	70fb      	strb	r3, [r7, #3]
	buffer = NULL;
    d7e6:	68fb      	ldr	r3, [r7, #12]
    d7e8:	2200      	movs	r2, #0
    d7ea:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	if((CAN_Module != NULL) && (index < CAN_Module->txSize)){
    d7ee:	68fb      	ldr	r3, [r7, #12]
    d7f0:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    d7f4:	2b00      	cmp	r3, #0
    d7f6:	d03c      	beq.n	d872 <_ZN15CO_Driver_Class17CAN_Tx_BufferInitEmmhhh+0x9a>
    d7f8:	68fb      	ldr	r3, [r7, #12]
    d7fa:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    d7fe:	691a      	ldr	r2, [r3, #16]
    d800:	68bb      	ldr	r3, [r7, #8]
    d802:	429a      	cmp	r2, r3
    d804:	d935      	bls.n	d872 <_ZN15CO_Driver_Class17CAN_Tx_BufferInitEmmhhh+0x9a>
		/* get specific buffer */
		buffer = &CAN_Module->txArray[index];
    d806:	68fb      	ldr	r3, [r7, #12]
    d808:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    d80c:	68da      	ldr	r2, [r3, #12]
    d80e:	68bb      	ldr	r3, [r7, #8]
    d810:	011b      	lsls	r3, r3, #4
    d812:	441a      	add	r2, r3
    d814:	68fb      	ldr	r3, [r7, #12]
    d816:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

		/* CAN identifier, DLC and rtr, bit aligned with CAN module transmit buffer.*/

		buffer->ident &= 0x7FF;
    d81a:	68fb      	ldr	r3, [r7, #12]
    d81c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    d820:	68fa      	ldr	r2, [r7, #12]
    d822:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
    d826:	6812      	ldr	r2, [r2, #0]
    d828:	f3c2 020a 	ubfx	r2, r2, #0, #11
    d82c:	601a      	str	r2, [r3, #0]
		buffer->ident = ident << 2;
    d82e:	68fb      	ldr	r3, [r7, #12]
    d830:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    d834:	687a      	ldr	r2, [r7, #4]
    d836:	0092      	lsls	r2, r2, #2
    d838:	601a      	str	r2, [r3, #0]
		if (rtr) buffer->ident |= 0x02;
    d83a:	78fb      	ldrb	r3, [r7, #3]
    d83c:	2b00      	cmp	r3, #0
    d83e:	d009      	beq.n	d854 <_ZN15CO_Driver_Class17CAN_Tx_BufferInitEmmhhh+0x7c>
    d840:	68fb      	ldr	r3, [r7, #12]
    d842:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    d846:	68fa      	ldr	r2, [r7, #12]
    d848:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
    d84c:	6812      	ldr	r2, [r2, #0]
    d84e:	f042 0202 	orr.w	r2, r2, #2
    d852:	601a      	str	r2, [r3, #0]

		buffer->DLC = noOfBytes;
    d854:	68fb      	ldr	r3, [r7, #12]
    d856:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    d85a:	7e3a      	ldrb	r2, [r7, #24]
    d85c:	711a      	strb	r2, [r3, #4]
		buffer->bufferFull = false;
    d85e:	68fb      	ldr	r3, [r7, #12]
    d860:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    d864:	2200      	movs	r2, #0
    d866:	735a      	strb	r2, [r3, #13]
		buffer->syncFlag = syncFlag;
    d868:	68fb      	ldr	r3, [r7, #12]
    d86a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    d86e:	7f3a      	ldrb	r2, [r7, #28]
    d870:	739a      	strb	r2, [r3, #14]
	}

	return buffer;
    d872:	68fb      	ldr	r3, [r7, #12]
    d874:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
}
    d878:	4618      	mov	r0, r3
    d87a:	3714      	adds	r7, #20
    d87c:	46bd      	mov	sp, r7
    d87e:	bc80      	pop	{r7}
    d880:	4770      	bx	lr
	...

0000d884 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t>:

/******************************************************************************/
CO_ReturnError_t CO_Driver_Class::CAN_Send(CO_CANtx_t *buffer)
{
    d884:	b590      	push	{r4, r7, lr}
    d886:	b089      	sub	sp, #36	; 0x24
    d888:	af02      	add	r7, sp, #8
    d88a:	6078      	str	r0, [r7, #4]
    d88c:	6039      	str	r1, [r7, #0]
	err = CO_ERROR_NO;
    d88e:	687b      	ldr	r3, [r7, #4]
    d890:	2200      	movs	r2, #0
    d892:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

	if(buffer->bufferFull){
    d896:	683b      	ldr	r3, [r7, #0]
    d898:	7b5b      	ldrb	r3, [r3, #13]
    d89a:	b2db      	uxtb	r3, r3
    d89c:	2b00      	cmp	r3, #0
    d89e:	bf14      	ite	ne
    d8a0:	2301      	movne	r3, #1
    d8a2:	2300      	moveq	r3, #0
    d8a4:	b2db      	uxtb	r3, r3
    d8a6:	2b00      	cmp	r3, #0
    d8a8:	d01d      	beq.n	d8e6 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x62>
		if(!CAN_Module->firstCANtxMessage){
    d8aa:	687b      	ldr	r3, [r7, #4]
    d8ac:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    d8b0:	7ddb      	ldrb	r3, [r3, #23]
    d8b2:	b2db      	uxtb	r3, r3
    d8b4:	2b00      	cmp	r3, #0
    d8b6:	bf0c      	ite	eq
    d8b8:	2301      	moveq	r3, #1
    d8ba:	2300      	movne	r3, #0
    d8bc:	b2db      	uxtb	r3, r3
    d8be:	2b00      	cmp	r3, #0
    d8c0:	d00d      	beq.n	d8de <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x5a>
			/* don't set error, if bootup message is still on buffers */
			EM_ErrorReport((CO_EM_t*)CAN_Module->em, CO_EM_CAN_TX_OVERFLOW, CO_EMC_CAN_OVERRUN, buffer->ident);
    d8c2:	687b      	ldr	r3, [r7, #4]
    d8c4:	1d18      	adds	r0, r3, #4
    d8c6:	687b      	ldr	r3, [r7, #4]
    d8c8:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    d8cc:	6a19      	ldr	r1, [r3, #32]
    d8ce:	683b      	ldr	r3, [r7, #0]
    d8d0:	681b      	ldr	r3, [r3, #0]
    d8d2:	9300      	str	r3, [sp, #0]
    d8d4:	f248 1310 	movw	r3, #33040	; 0x8110
    d8d8:	2214      	movs	r2, #20
    d8da:	4c2c      	ldr	r4, [pc, #176]	; (d98c <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x108>)
    d8dc:	47a0      	blx	r4
		}
		err = CO_ERROR_TX_OVERFLOW;
    d8de:	687b      	ldr	r3, [r7, #4]
    d8e0:	22f7      	movs	r2, #247	; 0xf7
    d8e2:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    d8e6:	f3ef 8310 	mrs	r3, PRIMASK
    d8ea:	60fb      	str	r3, [r7, #12]
  return(result);
    d8ec:	68fb      	ldr	r3, [r7, #12]
	}

	uint32_t TxMailboxNum;
	/* if CAN TX buffer is free, send message */
	CO_LOCK_CAN_SEND();
    d8ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    d8f0:	b672      	cpsid	i

	PrepareTxHeader(&msgHeader, buffer);
    d8f2:	687b      	ldr	r3, [r7, #4]
    d8f4:	3374      	adds	r3, #116	; 0x74
    d8f6:	683a      	ldr	r2, [r7, #0]
    d8f8:	4619      	mov	r1, r3
    d8fa:	6878      	ldr	r0, [r7, #4]
    d8fc:	4b24      	ldr	r3, [pc, #144]	; (d990 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x10c>)
    d8fe:	4798      	blx	r3

	if ((CAN_Module->CANtxCount == 0) ) {
    d900:	687b      	ldr	r3, [r7, #4]
    d902:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    d906:	699b      	ldr	r3, [r3, #24]
    d908:	2b00      	cmp	r3, #0
    d90a:	bf0c      	ite	eq
    d90c:	2301      	moveq	r3, #1
    d90e:	2300      	movne	r3, #0
    d910:	b2db      	uxtb	r3, r3
    d912:	2b00      	cmp	r3, #0
    d914:	d025      	beq.n	d962 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0xde>
	//	((uint32_t)hri_can_read_TXFQS_TFFL_bf(canHandler->dev.hw) > 0 )) {
		CAN_Module->bufferInhibitFlag = buffer->syncFlag;
    d916:	687b      	ldr	r3, [r7, #4]
    d918:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    d91c:	683a      	ldr	r2, [r7, #0]
    d91e:	7b92      	ldrb	r2, [r2, #14]
    d920:	b2d2      	uxtb	r2, r2
    d922:	759a      	strb	r2, [r3, #22]
		receivedtxCOCallback=false;
    d924:	687b      	ldr	r3, [r7, #4]
    d926:	2200      	movs	r2, #0
    d928:	775a      	strb	r2, [r3, #29]
		HalCanErrorCode=can_async_write(CAN_Module->CANBaseDescriptor, &msgHeader);
    d92a:	687b      	ldr	r3, [r7, #4]
    d92c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    d930:	681a      	ldr	r2, [r3, #0]
    d932:	687b      	ldr	r3, [r7, #4]
    d934:	3374      	adds	r3, #116	; 0x74
    d936:	4619      	mov	r1, r3
    d938:	4610      	mov	r0, r2
    d93a:	4b16      	ldr	r3, [pc, #88]	; (d994 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x110>)
    d93c:	4798      	blx	r3
    d93e:	4603      	mov	r3, r0
    d940:	461a      	mov	r2, r3
    d942:	687b      	ldr	r3, [r7, #4]
    d944:	619a      	str	r2, [r3, #24]
		if(HalCanErrorCode != CO_ERROR_NO)
    d946:	687b      	ldr	r3, [r7, #4]
    d948:	699b      	ldr	r3, [r3, #24]
    d94a:	2b00      	cmp	r3, #0
    d94c:	bf14      	ite	ne
    d94e:	2301      	movne	r3, #1
    d950:	2300      	moveq	r3, #0
    d952:	b2db      	uxtb	r3, r3
    d954:	2b00      	cmp	r3, #0
    d956:	d00d      	beq.n	d974 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0xf0>
		{
			err = CO_ERROR_HAL;
    d958:	687b      	ldr	r3, [r7, #4]
    d95a:	22f1      	movs	r2, #241	; 0xf1
    d95c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    d960:	e008      	b.n	d974 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0xf0>
			//CANmodule->CANtxCount++;
		}
	}	/* if no buffer is free, message will be sent in the task */
	else
	{
		buffer->bufferFull = true;
    d962:	683b      	ldr	r3, [r7, #0]
    d964:	2201      	movs	r2, #1
    d966:	735a      	strb	r2, [r3, #13]
		CAN_Module->CANtxCount++;
    d968:	687b      	ldr	r3, [r7, #4]
    d96a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    d96e:	699a      	ldr	r2, [r3, #24]
    d970:	3201      	adds	r2, #1
    d972:	619a      	str	r2, [r3, #24]
    d974:	697b      	ldr	r3, [r7, #20]
    d976:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    d978:	693b      	ldr	r3, [r7, #16]
    d97a:	f383 8810 	msr	PRIMASK, r3
	}
	CO_UNLOCK_CAN_SEND();

	return err;
    d97e:	687b      	ldr	r3, [r7, #4]
    d980:	f993 309a 	ldrsb.w	r3, [r3, #154]	; 0x9a
}
    d984:	4618      	mov	r0, r3
    d986:	371c      	adds	r7, #28
    d988:	46bd      	mov	sp, r7
    d98a:	bd90      	pop	{r4, r7, pc}
    d98c:	0000e2cd 	.word	0x0000e2cd
    d990:	0000d489 	.word	0x0000d489
    d994:	000017f5 	.word	0x000017f5

0000d998 <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv>:


/******************************************************************************/
void CO_Driver_Class::CANClearPendingSyncPDOs(void)
{
    d998:	b590      	push	{r4, r7, lr}
    d99a:	b089      	sub	sp, #36	; 0x24
    d99c:	af02      	add	r7, sp, #8
    d99e:	6078      	str	r0, [r7, #4]
	tpdoDeleted = 0U;
    d9a0:	687b      	ldr	r3, [r7, #4]
    d9a2:	2200      	movs	r2, #0
    d9a4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    d9a8:	f3ef 8310 	mrs	r3, PRIMASK
    d9ac:	60bb      	str	r3, [r7, #8]
  return(result);
    d9ae:	68bb      	ldr	r3, [r7, #8]

	CO_LOCK_CAN_SEND();
    d9b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
    d9b2:	b672      	cpsid	i
      {
    	HAL_CAN_AbortTxRequest(CANmodule->);
      }
	 */

	if(/*messageIsOnCanBuffer && */CAN_Module->bufferInhibitFlag){
    d9b4:	687b      	ldr	r3, [r7, #4]
    d9b6:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    d9ba:	7d9b      	ldrb	r3, [r3, #22]
    d9bc:	b2db      	uxtb	r3, r3
    d9be:	2b00      	cmp	r3, #0
    d9c0:	bf14      	ite	ne
    d9c2:	2301      	movne	r3, #1
    d9c4:	2300      	moveq	r3, #0
    d9c6:	b2db      	uxtb	r3, r3
    d9c8:	2b00      	cmp	r3, #0
    d9ca:	d008      	beq.n	d9de <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv+0x46>
		/* clear TXREQ */
		CAN_Module->bufferInhibitFlag = false;
    d9cc:	687b      	ldr	r3, [r7, #4]
    d9ce:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    d9d2:	2200      	movs	r2, #0
    d9d4:	759a      	strb	r2, [r3, #22]
		tpdoDeleted = 1U;
    d9d6:	687b      	ldr	r3, [r7, #4]
    d9d8:	2201      	movs	r2, #1
    d9da:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	}
	/* delete also pending synchronous TPDOs in TX buffers */
	if(CAN_Module->CANtxCount != 0U){
    d9de:	687b      	ldr	r3, [r7, #4]
    d9e0:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    d9e4:	699b      	ldr	r3, [r3, #24]
    d9e6:	2b00      	cmp	r3, #0
    d9e8:	bf14      	ite	ne
    d9ea:	2301      	movne	r3, #1
    d9ec:	2300      	moveq	r3, #0
    d9ee:	b2db      	uxtb	r3, r3
    d9f0:	2b00      	cmp	r3, #0
    d9f2:	d03c      	beq.n	da6e <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv+0xd6>
	
		CO_CANtx_t *buffer = &CAN_Module->txArray[0];
    d9f4:	687b      	ldr	r3, [r7, #4]
    d9f6:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    d9fa:	68db      	ldr	r3, [r3, #12]
    d9fc:	617b      	str	r3, [r7, #20]
		for(i = CAN_Module->txSize; i > 0U; i--){
    d9fe:	687b      	ldr	r3, [r7, #4]
    da00:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    da04:	691a      	ldr	r2, [r3, #16]
    da06:	687b      	ldr	r3, [r7, #4]
    da08:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    da0c:	687b      	ldr	r3, [r7, #4]
    da0e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    da12:	2b00      	cmp	r3, #0
    da14:	d02b      	beq.n	da6e <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv+0xd6>
			if(buffer->bufferFull){
    da16:	697b      	ldr	r3, [r7, #20]
    da18:	7b5b      	ldrb	r3, [r3, #13]
    da1a:	b2db      	uxtb	r3, r3
    da1c:	2b00      	cmp	r3, #0
    da1e:	bf14      	ite	ne
    da20:	2301      	movne	r3, #1
    da22:	2300      	moveq	r3, #0
    da24:	b2db      	uxtb	r3, r3
    da26:	2b00      	cmp	r3, #0
    da28:	d016      	beq.n	da58 <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv+0xc0>
				if(buffer->syncFlag){
    da2a:	697b      	ldr	r3, [r7, #20]
    da2c:	7b9b      	ldrb	r3, [r3, #14]
    da2e:	b2db      	uxtb	r3, r3
    da30:	2b00      	cmp	r3, #0
    da32:	bf14      	ite	ne
    da34:	2301      	movne	r3, #1
    da36:	2300      	moveq	r3, #0
    da38:	b2db      	uxtb	r3, r3
    da3a:	2b00      	cmp	r3, #0
    da3c:	d00c      	beq.n	da58 <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv+0xc0>
					buffer->bufferFull = false;
    da3e:	697b      	ldr	r3, [r7, #20]
    da40:	2200      	movs	r2, #0
    da42:	735a      	strb	r2, [r3, #13]
					CAN_Module->CANtxCount--;
    da44:	687b      	ldr	r3, [r7, #4]
    da46:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    da4a:	699a      	ldr	r2, [r3, #24]
    da4c:	3a01      	subs	r2, #1
    da4e:	619a      	str	r2, [r3, #24]
					tpdoDeleted = 2U;
    da50:	687b      	ldr	r3, [r7, #4]
    da52:	2202      	movs	r2, #2
    da54:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
				}
			}
			buffer++;
    da58:	697b      	ldr	r3, [r7, #20]
    da5a:	3310      	adds	r3, #16
    da5c:	617b      	str	r3, [r7, #20]
		for(i = CAN_Module->txSize; i > 0U; i--){
    da5e:	687b      	ldr	r3, [r7, #4]
    da60:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    da64:	1e5a      	subs	r2, r3, #1
    da66:	687b      	ldr	r3, [r7, #4]
    da68:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    da6c:	e7ce      	b.n	da0c <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv+0x74>
    da6e:	693b      	ldr	r3, [r7, #16]
    da70:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    da72:	68fb      	ldr	r3, [r7, #12]
    da74:	f383 8810 	msr	PRIMASK, r3
		}
	}
	CO_UNLOCK_CAN_SEND();


	if(tpdoDeleted != 0U){
    da78:	687b      	ldr	r3, [r7, #4]
    da7a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    da7e:	2b00      	cmp	r3, #0
    da80:	d00e      	beq.n	daa0 <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv+0x108>
		EM_ErrorReport((CO_EM_t*)CAN_Module->em, CO_EM_TPDO_OUTSIDE_WINDOW, CO_EMC_COMMUNICATION, tpdoDeleted);
    da82:	687b      	ldr	r3, [r7, #4]
    da84:	1d18      	adds	r0, r3, #4
    da86:	687b      	ldr	r3, [r7, #4]
    da88:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    da8c:	6a19      	ldr	r1, [r3, #32]
    da8e:	687b      	ldr	r3, [r7, #4]
    da90:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    da94:	9300      	str	r3, [sp, #0]
    da96:	f44f 4301 	mov.w	r3, #33024	; 0x8100
    da9a:	2215      	movs	r2, #21
    da9c:	4c02      	ldr	r4, [pc, #8]	; (daa8 <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv+0x110>)
    da9e:	47a0      	blx	r4
	}
}
    daa0:	bf00      	nop
    daa2:	371c      	adds	r7, #28
    daa4:	46bd      	mov	sp, r7
    daa6:	bd90      	pop	{r4, r7, pc}
    daa8:	0000e2cd 	.word	0x0000e2cd

0000daac <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv>:


/******************************************************************************/
void CO_Driver_Class::CAN_VerifyErrors(void){
    daac:	b590      	push	{r4, r7, lr}
    daae:	b087      	sub	sp, #28
    dab0:	af02      	add	r7, sp, #8
    dab2:	6078      	str	r0, [r7, #4]
	em = (CO_EM_t*)CAN_Module->em;
    dab4:	687b      	ldr	r3, [r7, #4]
    dab6:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    daba:	6a1a      	ldr	r2, [r3, #32]
    dabc:	687b      	ldr	r3, [r7, #4]
    dabe:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	//uint32_t HalCanErrorCode = canHandler->dev.cb->irq_handler();

	if(CAN_Module->errOld != HalCanErrorCode)
    dac2:	687b      	ldr	r3, [r7, #4]
    dac4:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    dac8:	69da      	ldr	r2, [r3, #28]
    daca:	687b      	ldr	r3, [r7, #4]
    dacc:	699b      	ldr	r3, [r3, #24]
    dace:	429a      	cmp	r2, r3
    dad0:	bf14      	ite	ne
    dad2:	2301      	movne	r3, #1
    dad4:	2300      	moveq	r3, #0
    dad6:	b2db      	uxtb	r3, r3
    dad8:	2b00      	cmp	r3, #0
    dada:	f000 80ae 	beq.w	dc3a <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x18e>
	{
		CAN_Module->errOld = HalCanErrorCode;
    dade:	687b      	ldr	r3, [r7, #4]
    dae0:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    dae4:	687a      	ldr	r2, [r7, #4]
    dae6:	6992      	ldr	r2, [r2, #24]
    dae8:	61da      	str	r2, [r3, #28]
		if(HalCanErrorCode & CAN_IRQ_BO)
    daea:	687b      	ldr	r3, [r7, #4]
    daec:	699b      	ldr	r3, [r3, #24]
    daee:	f003 0303 	and.w	r3, r3, #3
    daf2:	2b00      	cmp	r3, #0
    daf4:	bf14      	ite	ne
    daf6:	2301      	movne	r3, #1
    daf8:	2300      	moveq	r3, #0
    dafa:	b2db      	uxtb	r3, r3
    dafc:	2b00      	cmp	r3, #0
    dafe:	d00d      	beq.n	db1c <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x70>
		{                               /* bus off */
			EM_ErrorReport(em, CO_EM_CAN_TX_BUS_OFF, CO_EMC_BUS_OFF_RECOVERED, HalCanErrorCode);
    db00:	687b      	ldr	r3, [r7, #4]
    db02:	1d18      	adds	r0, r3, #4
    db04:	687b      	ldr	r3, [r7, #4]
    db06:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
    db0a:	687b      	ldr	r3, [r7, #4]
    db0c:	699b      	ldr	r3, [r3, #24]
    db0e:	9300      	str	r3, [sp, #0]
    db10:	f248 1340 	movw	r3, #33088	; 0x8140
    db14:	2212      	movs	r2, #18
    db16:	4c4c      	ldr	r4, [pc, #304]	; (dc48 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x19c>)
    db18:	47a0      	blx	r4
    db1a:	e076      	b.n	dc0a <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x15e>
		}
		else{                                               /* not bus off */
			EM_ErrorReset(em, CO_EM_CAN_TX_BUS_OFF, HalCanErrorCode);
    db1c:	687b      	ldr	r3, [r7, #4]
    db1e:	1d18      	adds	r0, r3, #4
    db20:	687b      	ldr	r3, [r7, #4]
    db22:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
    db26:	687b      	ldr	r3, [r7, #4]
    db28:	699b      	ldr	r3, [r3, #24]
    db2a:	2212      	movs	r2, #18
    db2c:	4c47      	ldr	r4, [pc, #284]	; (dc4c <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x1a0>)
    db2e:	47a0      	blx	r4

			if(HalCanErrorCode & CAN_IRQ_EW)
    db30:	687b      	ldr	r3, [r7, #4]
    db32:	699b      	ldr	r3, [r3, #24]
    db34:	2300      	movs	r3, #0
    db36:	2b00      	cmp	r3, #0
    db38:	d00b      	beq.n	db52 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0xa6>
			{     											/* bus warning */
				EM_ErrorReport(em, CO_EM_CAN_BUS_WARNING, CO_EMC_NO_ERROR, HalCanErrorCode);
    db3a:	687b      	ldr	r3, [r7, #4]
    db3c:	1d18      	adds	r0, r3, #4
    db3e:	687b      	ldr	r3, [r7, #4]
    db40:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
    db44:	687b      	ldr	r3, [r7, #4]
    db46:	699b      	ldr	r3, [r3, #24]
    db48:	9300      	str	r3, [sp, #0]
    db4a:	2300      	movs	r3, #0
    db4c:	2201      	movs	r2, #1
    db4e:	4c3e      	ldr	r4, [pc, #248]	; (dc48 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x19c>)
    db50:	47a0      	blx	r4
			}
			else
			{
				//do nothing
			}
			if(HalCanErrorCode & CAN_IRQ_EP)
    db52:	687b      	ldr	r3, [r7, #4]
    db54:	699b      	ldr	r3, [r3, #24]
    db56:	f003 0302 	and.w	r3, r3, #2
    db5a:	2b00      	cmp	r3, #0
    db5c:	bf14      	ite	ne
    db5e:	2301      	movne	r3, #1
    db60:	2300      	moveq	r3, #0
    db62:	b2db      	uxtb	r3, r3
    db64:	2b00      	cmp	r3, #0
    db66:	d019      	beq.n	db9c <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0xf0>
			{      											/* TX/RX bus passive */
				if(!CAN_Module->firstCANtxMessage)
    db68:	687b      	ldr	r3, [r7, #4]
    db6a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    db6e:	7ddb      	ldrb	r3, [r3, #23]
    db70:	b2db      	uxtb	r3, r3
    db72:	2b00      	cmp	r3, #0
    db74:	bf0c      	ite	eq
    db76:	2301      	moveq	r3, #1
    db78:	2300      	movne	r3, #0
    db7a:	b2db      	uxtb	r3, r3
    db7c:	2b00      	cmp	r3, #0
    db7e:	d02f      	beq.n	dbe0 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x134>
				{
					EM_ErrorReport(em, CO_EM_CAN_TX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, HalCanErrorCode);
    db80:	687b      	ldr	r3, [r7, #4]
    db82:	1d18      	adds	r0, r3, #4
    db84:	687b      	ldr	r3, [r7, #4]
    db86:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
    db8a:	687b      	ldr	r3, [r7, #4]
    db8c:	699b      	ldr	r3, [r3, #24]
    db8e:	9300      	str	r3, [sp, #0]
    db90:	f248 1320 	movw	r3, #33056	; 0x8120
    db94:	2207      	movs	r2, #7
    db96:	4c2c      	ldr	r4, [pc, #176]	; (dc48 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x19c>)
    db98:	47a0      	blx	r4
    db9a:	e021      	b.n	dbe0 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x134>
				{
					//do nothing
				}
			}
			else{
				bool_t isError = EM_IsError(em, CO_EM_CAN_TX_BUS_PASSIVE);
    db9c:	687b      	ldr	r3, [r7, #4]
    db9e:	1d18      	adds	r0, r3, #4
    dba0:	687b      	ldr	r3, [r7, #4]
    dba2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    dba6:	2207      	movs	r2, #7
    dba8:	4619      	mov	r1, r3
    dbaa:	4b29      	ldr	r3, [pc, #164]	; (dc50 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x1a4>)
    dbac:	4798      	blx	r3
    dbae:	4603      	mov	r3, r0
    dbb0:	73fb      	strb	r3, [r7, #15]
				if(isError)
    dbb2:	7bfb      	ldrb	r3, [r7, #15]
    dbb4:	2b00      	cmp	r3, #0
    dbb6:	d013      	beq.n	dbe0 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x134>
				{
					EM_ErrorReset(em, CO_EM_CAN_TX_BUS_PASSIVE, HalCanErrorCode);
    dbb8:	687b      	ldr	r3, [r7, #4]
    dbba:	1d18      	adds	r0, r3, #4
    dbbc:	687b      	ldr	r3, [r7, #4]
    dbbe:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
    dbc2:	687b      	ldr	r3, [r7, #4]
    dbc4:	699b      	ldr	r3, [r3, #24]
    dbc6:	2207      	movs	r2, #7
    dbc8:	4c20      	ldr	r4, [pc, #128]	; (dc4c <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x1a0>)
    dbca:	47a0      	blx	r4
					EM_ErrorReset(em, CO_EM_CAN_TX_OVERFLOW, HalCanErrorCode);
    dbcc:	687b      	ldr	r3, [r7, #4]
    dbce:	1d18      	adds	r0, r3, #4
    dbd0:	687b      	ldr	r3, [r7, #4]
    dbd2:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
    dbd6:	687b      	ldr	r3, [r7, #4]
    dbd8:	699b      	ldr	r3, [r3, #24]
    dbda:	2214      	movs	r2, #20
    dbdc:	4c1b      	ldr	r4, [pc, #108]	; (dc4c <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x1a0>)
    dbde:	47a0      	blx	r4
				{
					//do nothing
				}
			}

			if(HalCanErrorCode & CAN_IRQ_EA)
    dbe0:	687b      	ldr	r3, [r7, #4]
    dbe2:	699b      	ldr	r3, [r3, #24]
    dbe4:	f003 0301 	and.w	r3, r3, #1
    dbe8:	2b00      	cmp	r3, #0
    dbea:	bf14      	ite	ne
    dbec:	2301      	movne	r3, #1
    dbee:	2300      	moveq	r3, #0
    dbf0:	b2db      	uxtb	r3, r3
    dbf2:	2b00      	cmp	r3, #0
    dbf4:	d009      	beq.n	dc0a <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x15e>
			{      											 /* no error */
				EM_ErrorReset(em, CO_EM_CAN_BUS_WARNING, HalCanErrorCode);
    dbf6:	687b      	ldr	r3, [r7, #4]
    dbf8:	1d18      	adds	r0, r3, #4
    dbfa:	687b      	ldr	r3, [r7, #4]
    dbfc:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
    dc00:	687b      	ldr	r3, [r7, #4]
    dc02:	699b      	ldr	r3, [r3, #24]
    dc04:	2201      	movs	r2, #1
    dc06:	4c11      	ldr	r4, [pc, #68]	; (dc4c <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x1a0>)
    dc08:	47a0      	blx	r4
				//do nothing
			}

		}

		if((HalCanErrorCode & CAN_IRQ_DO) )
    dc0a:	687b      	ldr	r3, [r7, #4]
    dc0c:	699b      	ldr	r3, [r3, #24]
    dc0e:	f003 0304 	and.w	r3, r3, #4
    dc12:	2b00      	cmp	r3, #0
    dc14:	bf14      	ite	ne
    dc16:	2301      	movne	r3, #1
    dc18:	2300      	moveq	r3, #0
    dc1a:	b2db      	uxtb	r3, r3
    dc1c:	2b00      	cmp	r3, #0
    dc1e:	d00c      	beq.n	dc3a <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x18e>
		{                                 					/* CAN RX bus overflow */
			EM_ErrorReport(em, CO_EM_CAN_RXB_OVERFLOW, CO_EMC_CAN_OVERRUN, HalCanErrorCode);
    dc20:	687b      	ldr	r3, [r7, #4]
    dc22:	1d18      	adds	r0, r3, #4
    dc24:	687b      	ldr	r3, [r7, #4]
    dc26:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
    dc2a:	687b      	ldr	r3, [r7, #4]
    dc2c:	699b      	ldr	r3, [r3, #24]
    dc2e:	9300      	str	r3, [sp, #0]
    dc30:	f248 1310 	movw	r3, #33040	; 0x8110
    dc34:	2213      	movs	r2, #19
    dc36:	4c04      	ldr	r4, [pc, #16]	; (dc48 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x19c>)
    dc38:	47a0      	blx	r4
		else
		{
			//do nothing
		}
	}
		receivedIntCOCallback=false;
    dc3a:	687b      	ldr	r3, [r7, #4]
    dc3c:	2200      	movs	r2, #0
    dc3e:	779a      	strb	r2, [r3, #30]
}
    dc40:	bf00      	nop
    dc42:	3714      	adds	r7, #20
    dc44:	46bd      	mov	sp, r7
    dc46:	bd90      	pop	{r4, r7, pc}
    dc48:	0000e2cd 	.word	0x0000e2cd
    dc4c:	0000e421 	.word	0x0000e421
    dc50:	0000e56d 	.word	0x0000e56d

0000dc54 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv>:

/*Interrupt handlers*/
/******************************************************************************/
void CO_Driver_Class::ProcessInterrupt_Rx(void)
{
    dc54:	b580      	push	{r7, lr}
    dc56:	b084      	sub	sp, #16
    dc58:	af00      	add	r7, sp, #0
    dc5a:	6078      	str	r0, [r7, #4]

	

	ConvertCANMsg2CORxMsg(msg,&CANmessage);
    dc5c:	687b      	ldr	r3, [r7, #4]
    dc5e:	f103 0188 	add.w	r1, r3, #136	; 0x88
    dc62:	687b      	ldr	r3, [r7, #4]
    dc64:	33f0      	adds	r3, #240	; 0xf0
    dc66:	461a      	mov	r2, r3
    dc68:	6878      	ldr	r0, [r7, #4]
    dc6a:	4b2c      	ldr	r3, [pc, #176]	; (dd1c <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xc8>)
    dc6c:	4798      	blx	r3
	
	/* Search rxArray form CANmodule for the same CAN-ID. */
	
	for (index = 0; index < RxFifo_Callback_CanModule_p->rxSize; index++)
    dc6e:	687b      	ldr	r3, [r7, #4]
    dc70:	2200      	movs	r2, #0
    dc72:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    dc76:	687b      	ldr	r3, [r7, #4]
    dc78:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    dc7c:	687b      	ldr	r3, [r7, #4]
    dc7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    dc80:	689b      	ldr	r3, [r3, #8]
    dc82:	429a      	cmp	r2, r3
    dc84:	d22a      	bcs.n	dcdc <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x88>
	{
		uint32_t msgCO = (((uint32_t)(CANmessage.ident << 2)) | (uint32_t)(msg.type));
    dc86:	687b      	ldr	r3, [r7, #4]
    dc88:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    dc8c:	009b      	lsls	r3, r3, #2
    dc8e:	687a      	ldr	r2, [r7, #4]
    dc90:	f892 208c 	ldrb.w	r2, [r2, #140]	; 0x8c
    dc94:	4313      	orrs	r3, r2
    dc96:	60fb      	str	r3, [r7, #12]
		if (((msgCO ^ MsgBuff->ident) & MsgBuff->mask) == 0)
    dc98:	687b      	ldr	r3, [r7, #4]
    dc9a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    dc9e:	681a      	ldr	r2, [r3, #0]
    dca0:	68fb      	ldr	r3, [r7, #12]
    dca2:	405a      	eors	r2, r3
    dca4:	687b      	ldr	r3, [r7, #4]
    dca6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    dcaa:	685b      	ldr	r3, [r3, #4]
    dcac:	4013      	ands	r3, r2
    dcae:	2b00      	cmp	r3, #0
    dcb0:	d104      	bne.n	dcbc <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x68>
		{
			msgMatched = true;
    dcb2:	687b      	ldr	r3, [r7, #4]
    dcb4:	2201      	movs	r2, #1
    dcb6:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
			break;
    dcba:	e00f      	b.n	dcdc <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x88>
		}
		MsgBuff++;
    dcbc:	687b      	ldr	r3, [r7, #4]
    dcbe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    dcc2:	f103 0210 	add.w	r2, r3, #16
    dcc6:	687b      	ldr	r3, [r7, #4]
    dcc8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	for (index = 0; index < RxFifo_Callback_CanModule_p->rxSize; index++)
    dccc:	687b      	ldr	r3, [r7, #4]
    dcce:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    dcd2:	1c5a      	adds	r2, r3, #1
    dcd4:	687b      	ldr	r3, [r7, #4]
    dcd6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    dcda:	e7cc      	b.n	dc76 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x22>
	}

	/* Call specific function, which will process the message */
	if(msgMatched && (MsgBuff != NULL) && (MsgBuff->pFunct != NULL))
    dcdc:	687b      	ldr	r3, [r7, #4]
    dcde:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
    dce2:	2b00      	cmp	r3, #0
    dce4:	d016      	beq.n	dd14 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xc0>
    dce6:	687b      	ldr	r3, [r7, #4]
    dce8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    dcec:	2b00      	cmp	r3, #0
    dcee:	d011      	beq.n	dd14 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xc0>
    dcf0:	687b      	ldr	r3, [r7, #4]
    dcf2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    dcf6:	68db      	ldr	r3, [r3, #12]
    dcf8:	2b00      	cmp	r3, #0
    dcfa:	d00b      	beq.n	dd14 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xc0>
	{
			//printf("  %X", CANmessage.ident);
			MsgBuff->pFunct(MsgBuff->object, &CANmessage);
    dcfc:	687b      	ldr	r3, [r7, #4]
    dcfe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    dd02:	68db      	ldr	r3, [r3, #12]
    dd04:	687a      	ldr	r2, [r7, #4]
    dd06:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
    dd0a:	6890      	ldr	r0, [r2, #8]
    dd0c:	687a      	ldr	r2, [r7, #4]
    dd0e:	32f0      	adds	r2, #240	; 0xf0
    dd10:	4611      	mov	r1, r2
    dd12:	4798      	blx	r3
	//                buffer++;
	//            }
	//        }

	/*CubeMx HAL is responsible for clearing interrupt flags and all the dirty work. */
}
    dd14:	bf00      	nop
    dd16:	3710      	adds	r7, #16
    dd18:	46bd      	mov	sp, r7
    dd1a:	bd80      	pop	{r7, pc}
    dd1c:	0000d4cd 	.word	0x0000d4cd

0000dd20 <_ZN15CO_Driver_Class14CAN_Polling_TxEv>:


void CO_Driver_Class::CAN_Polling_Tx(void)
{
    dd20:	b580      	push	{r7, lr}
    dd22:	b084      	sub	sp, #16
    dd24:	af00      	add	r7, sp, #0
    dd26:	6078      	str	r0, [r7, #4]
	
	//struct can_async_descriptor canStruct= (* struct can_async_descriptor )canHandler;
	if (hri_can_read_TXFQS_TFFL_bf(CAN1) > 0)
    dd28:	4843      	ldr	r0, [pc, #268]	; (de38 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x118>)
    dd2a:	4b44      	ldr	r3, [pc, #272]	; (de3c <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x11c>)
    dd2c:	4798      	blx	r3
    dd2e:	4603      	mov	r3, r0
    dd30:	2b00      	cmp	r3, #0
    dd32:	bf14      	ite	ne
    dd34:	2301      	movne	r3, #1
    dd36:	2300      	moveq	r3, #0
    dd38:	b2db      	uxtb	r3, r3
    dd3a:	2b00      	cmp	r3, #0
    dd3c:	d077      	beq.n	de2e <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x10e>
	{
		/* First CAN message (bootup) was sent successfully */
		CAN_Module->firstCANtxMessage = false;
    dd3e:	687b      	ldr	r3, [r7, #4]
    dd40:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    dd44:	2200      	movs	r2, #0
    dd46:	75da      	strb	r2, [r3, #23]
		/* Clear flag from previous message */
		CAN_Module->bufferInhibitFlag = false;
    dd48:	687b      	ldr	r3, [r7, #4]
    dd4a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    dd4e:	2200      	movs	r2, #0
    dd50:	759a      	strb	r2, [r3, #22]
		/* Are there any new messages waiting to be send */
		if(CAN_Module->CANtxCount > 0U)
    dd52:	687b      	ldr	r3, [r7, #4]
    dd54:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    dd58:	699b      	ldr	r3, [r3, #24]
    dd5a:	2b00      	cmp	r3, #0
    dd5c:	bf14      	ite	ne
    dd5e:	2301      	movne	r3, #1
    dd60:	2300      	moveq	r3, #0
    dd62:	b2db      	uxtb	r3, r3
    dd64:	2b00      	cmp	r3, #0
    dd66:	d062      	beq.n	de2e <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x10e>
		{
			uint32_t i;             /* index of transmitting message */

			/* first buffer */
			CO_CANtx_t *buffer = &CAN_Module->txArray[0];
    dd68:	687b      	ldr	r3, [r7, #4]
    dd6a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    dd6e:	68db      	ldr	r3, [r3, #12]
    dd70:	60bb      	str	r3, [r7, #8]
			/* search through whole array of pointers to transmit message buffers. */
			for(i = CAN_Module->txSize; i > 0U; i--)
    dd72:	687b      	ldr	r3, [r7, #4]
    dd74:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    dd78:	691b      	ldr	r3, [r3, #16]
    dd7a:	60fb      	str	r3, [r7, #12]
    dd7c:	68fb      	ldr	r3, [r7, #12]
    dd7e:	2b00      	cmp	r3, #0
    dd80:	d04d      	beq.n	de1e <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0xfe>
			{
				/* if message buffer is full, send it. */
				if(buffer->bufferFull)
    dd82:	68bb      	ldr	r3, [r7, #8]
    dd84:	7b5b      	ldrb	r3, [r3, #13]
    dd86:	b2db      	uxtb	r3, r3
    dd88:	2b00      	cmp	r3, #0
    dd8a:	bf14      	ite	ne
    dd8c:	2301      	movne	r3, #1
    dd8e:	2300      	moveq	r3, #0
    dd90:	b2db      	uxtb	r3, r3
    dd92:	2b00      	cmp	r3, #0
    dd94:	d03b      	beq.n	de0e <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0xee>
				{

					/* Copy message to CAN buffer */
					CAN_Module->bufferInhibitFlag = buffer->syncFlag;
    dd96:	687b      	ldr	r3, [r7, #4]
    dd98:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    dd9c:	68ba      	ldr	r2, [r7, #8]
    dd9e:	7b92      	ldrb	r2, [r2, #14]
    dda0:	b2d2      	uxtb	r2, r2
    dda2:	759a      	strb	r2, [r3, #22]

					uint32_t TxMailboxNum;

					PrepareTxHeader(&msgHeader, buffer);
    dda4:	687b      	ldr	r3, [r7, #4]
    dda6:	3374      	adds	r3, #116	; 0x74
    dda8:	68ba      	ldr	r2, [r7, #8]
    ddaa:	4619      	mov	r1, r3
    ddac:	6878      	ldr	r0, [r7, #4]
    ddae:	4b24      	ldr	r3, [pc, #144]	; (de40 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x120>)
    ddb0:	4798      	blx	r3
					can_async_register_callback(canDescr, CAN_ASYNC_TX_CB, (FUNC_PTR)CO_tx_callback);
    ddb2:	687b      	ldr	r3, [r7, #4]
    ddb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    ddb8:	4a22      	ldr	r2, [pc, #136]	; (de44 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x124>)
    ddba:	2101      	movs	r1, #1
    ddbc:	4618      	mov	r0, r3
    ddbe:	4b22      	ldr	r3, [pc, #136]	; (de48 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x128>)
    ddc0:	4798      	blx	r3
					can_async_enable(canDescr);
    ddc2:	687b      	ldr	r3, [r7, #4]
    ddc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    ddc8:	4618      	mov	r0, r3
    ddca:	4b20      	ldr	r3, [pc, #128]	; (de4c <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x12c>)
    ddcc:	4798      	blx	r3
					HalCanErrorCode=can_async_write(canDescr, &msgHeader);
    ddce:	687b      	ldr	r3, [r7, #4]
    ddd0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
    ddd4:	687b      	ldr	r3, [r7, #4]
    ddd6:	3374      	adds	r3, #116	; 0x74
    ddd8:	4619      	mov	r1, r3
    ddda:	4610      	mov	r0, r2
    dddc:	4b1c      	ldr	r3, [pc, #112]	; (de50 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x130>)
    ddde:	4798      	blx	r3
    dde0:	4603      	mov	r3, r0
    dde2:	461a      	mov	r2, r3
    dde4:	687b      	ldr	r3, [r7, #4]
    dde6:	619a      	str	r2, [r3, #24]
					if( HalCanErrorCode != CO_ERROR_NO)
    dde8:	687b      	ldr	r3, [r7, #4]
    ddea:	699b      	ldr	r3, [r3, #24]
    ddec:	2b00      	cmp	r3, #0
    ddee:	bf14      	ite	ne
    ddf0:	2301      	movne	r3, #1
    ddf2:	2300      	moveq	r3, #0
    ddf4:	b2db      	uxtb	r3, r3
    ddf6:	2b00      	cmp	r3, #0
    ddf8:	d110      	bne.n	de1c <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0xfc>
					{
						;//do nothing
					}
					else
					{
						buffer->bufferFull = false;
    ddfa:	68bb      	ldr	r3, [r7, #8]
    ddfc:	2200      	movs	r2, #0
    ddfe:	735a      	strb	r2, [r3, #13]
						CAN_Module->CANtxCount--;
    de00:	687b      	ldr	r3, [r7, #4]
    de02:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    de06:	699a      	ldr	r2, [r3, #24]
    de08:	3a01      	subs	r2, #1
    de0a:	619a      	str	r2, [r3, #24]
					}

					break;                      /* exit for loop */
    de0c:	e006      	b.n	de1c <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0xfc>
				}
				else
				{
					/*do nothing*/;
				}
				buffer++;
    de0e:	68bb      	ldr	r3, [r7, #8]
    de10:	3310      	adds	r3, #16
    de12:	60bb      	str	r3, [r7, #8]
			for(i = CAN_Module->txSize; i > 0U; i--)
    de14:	68fb      	ldr	r3, [r7, #12]
    de16:	3b01      	subs	r3, #1
    de18:	60fb      	str	r3, [r7, #12]
    de1a:	e7af      	b.n	dd7c <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x5c>
					break;                      /* exit for loop */
    de1c:	bf00      	nop
			}/* end of for loop */

			/* Clear counter if no more messages */
			if(i == 0U)
    de1e:	68fb      	ldr	r3, [r7, #12]
    de20:	2b00      	cmp	r3, #0
    de22:	d104      	bne.n	de2e <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x10e>
			{
				CAN_Module->CANtxCount = 0U;
    de24:	687b      	ldr	r3, [r7, #4]
    de26:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    de2a:	2200      	movs	r2, #0
    de2c:	619a      	str	r2, [r3, #24]
			{
				/*do nothing*/;
			}
		}
	}
}
    de2e:	bf00      	nop
    de30:	3710      	adds	r7, #16
    de32:	46bd      	mov	sp, r7
    de34:	bd80      	pop	{r7, pc}
    de36:	bf00      	nop
    de38:	42000400 	.word	0x42000400
    de3c:	0000d311 	.word	0x0000d311
    de40:	0000d489 	.word	0x0000d489
    de44:	0000d3a1 	.word	0x0000d3a1
    de48:	00001841 	.word	0x00001841
    de4c:	00001731 	.word	0x00001731
    de50:	000017f5 	.word	0x000017f5

0000de54 <_ZN18CO_Emergency_ClassC1Ev>:
#include "CO_Driver_Class.h"

CO_Emergency_Class	*ptrCOEMClass;

// default constructor
CO_Emergency_Class::CO_Emergency_Class()
    de54:	b580      	push	{r7, lr}
    de56:	b082      	sub	sp, #8
    de58:	af00      	add	r7, sp, #0
    de5a:	6078      	str	r0, [r7, #4]
    de5c:	687b      	ldr	r3, [r7, #4]
    de5e:	4618      	mov	r0, r3
    de60:	4b04      	ldr	r3, [pc, #16]	; (de74 <_ZN18CO_Emergency_ClassC1Ev+0x20>)
    de62:	4798      	blx	r3
{
	ptrCOEMClass=this;
    de64:	4a04      	ldr	r2, [pc, #16]	; (de78 <_ZN18CO_Emergency_ClassC1Ev+0x24>)
    de66:	687b      	ldr	r3, [r7, #4]
    de68:	6013      	str	r3, [r2, #0]
} //CO_Emergency_Class
    de6a:	687b      	ldr	r3, [r7, #4]
    de6c:	4618      	mov	r0, r3
    de6e:	3708      	adds	r7, #8
    de70:	46bd      	mov	sp, r7
    de72:	bd80      	pop	{r7, pc}
    de74:	000104a1 	.word	0x000104a1
    de78:	20001938 	.word	0x20001938

0000de7c <_ZN18CO_Emergency_ClassD1Ev>:

// default destructor
CO_Emergency_Class::~CO_Emergency_Class()
    de7c:	b580      	push	{r7, lr}
    de7e:	b082      	sub	sp, #8
    de80:	af00      	add	r7, sp, #0
    de82:	6078      	str	r0, [r7, #4]
    de84:	687b      	ldr	r3, [r7, #4]
    de86:	4618      	mov	r0, r3
    de88:	4b03      	ldr	r3, [pc, #12]	; (de98 <_ZN18CO_Emergency_ClassD1Ev+0x1c>)
    de8a:	4798      	blx	r3
{
} //~CO_Emergency_Class
    de8c:	687b      	ldr	r3, [r7, #4]
    de8e:	4618      	mov	r0, r3
    de90:	3708      	adds	r7, #8
    de92:	46bd      	mov	sp, r7
    de94:	bd80      	pop	{r7, pc}
    de96:	bf00      	nop
    de98:	000104c9 	.word	0x000104c9

0000de9c <_ZL11CO_ODF_1003P12CO_ODF_arg_t>:
 * Function for accessing _Pre-Defined Error Field_ (index 0x1003) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */

static   CO_SDO_abortCode_t CO_ODF_1003(CO_ODF_arg_t *ODF_arg){
    de9c:	b480      	push	{r7}
    de9e:	b087      	sub	sp, #28
    dea0:	af00      	add	r7, sp, #0
    dea2:	6078      	str	r0, [r7, #4]
    
    uint8_t value;
	CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
    dea4:	2300      	movs	r3, #0
    dea6:	617b      	str	r3, [r7, #20]

    CO_EMpr_t *emPr = (CO_EMpr_t*) ODF_arg->object;
    dea8:	687b      	ldr	r3, [r7, #4]
    deaa:	681b      	ldr	r3, [r3, #0]
    deac:	613b      	str	r3, [r7, #16]
    value = ODF_arg->data[0];
    deae:	687b      	ldr	r3, [r7, #4]
    deb0:	685b      	ldr	r3, [r3, #4]
    deb2:	781b      	ldrb	r3, [r3, #0]
    deb4:	73fb      	strb	r3, [r7, #15]

    if(ODF_arg->reading){
    deb6:	687b      	ldr	r3, [r7, #4]
    deb8:	7f5b      	ldrb	r3, [r3, #29]
    deba:	2b00      	cmp	r3, #0
    debc:	d017      	beq.n	deee <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x52>
        uint8_t noOfErrors;
        noOfErrors = emPr->preDefErrNoOfErrors;
    debe:	693b      	ldr	r3, [r7, #16]
    dec0:	7a5b      	ldrb	r3, [r3, #9]
    dec2:	73bb      	strb	r3, [r7, #14]

        if(ODF_arg->subIndex == 0U){
    dec4:	687b      	ldr	r3, [r7, #4]
    dec6:	7f1b      	ldrb	r3, [r3, #28]
    dec8:	2b00      	cmp	r3, #0
    deca:	d104      	bne.n	ded6 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x3a>
            ODF_arg->data[0] = noOfErrors;
    decc:	687b      	ldr	r3, [r7, #4]
    dece:	685b      	ldr	r3, [r3, #4]
    ded0:	7bba      	ldrb	r2, [r7, #14]
    ded2:	701a      	strb	r2, [r3, #0]
    ded4:	e01b      	b.n	df0e <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
        }
        else if(ODF_arg->subIndex > noOfErrors){
    ded6:	687b      	ldr	r3, [r7, #4]
    ded8:	7f1b      	ldrb	r3, [r3, #28]
    deda:	461a      	mov	r2, r3
    dedc:	7bbb      	ldrb	r3, [r7, #14]
    dede:	429a      	cmp	r2, r3
    dee0:	dd02      	ble.n	dee8 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x4c>
            ret = CO_SDO_AB_NO_DATA;
    dee2:	4b0e      	ldr	r3, [pc, #56]	; (df1c <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x80>)
    dee4:	617b      	str	r3, [r7, #20]
    dee6:	e012      	b.n	df0e <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
        }
        else{
            ret = CO_SDO_AB_NONE;
    dee8:	2300      	movs	r3, #0
    deea:	617b      	str	r3, [r7, #20]
    deec:	e00f      	b.n	df0e <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
        }
    }
    else{
        /* only '0' may be written to subIndex 0 */
        if(ODF_arg->subIndex == 0U){
    deee:	687b      	ldr	r3, [r7, #4]
    def0:	7f1b      	ldrb	r3, [r3, #28]
    def2:	2b00      	cmp	r3, #0
    def4:	d109      	bne.n	df0a <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x6e>
            if(value == 0U){
    def6:	7bfb      	ldrb	r3, [r7, #15]
    def8:	2b00      	cmp	r3, #0
    defa:	d103      	bne.n	df04 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x68>
                emPr->preDefErrNoOfErrors = 0U;
    defc:	693b      	ldr	r3, [r7, #16]
    defe:	2200      	movs	r2, #0
    df00:	725a      	strb	r2, [r3, #9]
    df02:	e004      	b.n	df0e <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
            }
            else{
                ret = CO_SDO_AB_INVALID_VALUE;
    df04:	4b06      	ldr	r3, [pc, #24]	; (df20 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x84>)
    df06:	617b      	str	r3, [r7, #20]
    df08:	e001      	b.n	df0e <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
            }
        }
        else{
            ret = CO_SDO_AB_READONLY;
    df0a:	4b06      	ldr	r3, [pc, #24]	; (df24 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x88>)
    df0c:	617b      	str	r3, [r7, #20]
        }
    }

    return ret;
    df0e:	697b      	ldr	r3, [r7, #20]
}
    df10:	4618      	mov	r0, r3
    df12:	371c      	adds	r7, #28
    df14:	46bd      	mov	sp, r7
    df16:	bc80      	pop	{r7}
    df18:	4770      	bx	lr
    df1a:	bf00      	nop
    df1c:	08000024 	.word	0x08000024
    df20:	06090030 	.word	0x06090030
    df24:	06010002 	.word	0x06010002

0000df28 <_ZL11CO_ODF_1014P12CO_ODF_arg_t>:
 * Function for accessing _COB ID EMCY_ (index 0x1014) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */

static  CO_SDO_abortCode_t CO_ODF_1014(CO_ODF_arg_t *ODF_arg){
    df28:	b580      	push	{r7, lr}
    df2a:	b086      	sub	sp, #24
    df2c:	af00      	add	r7, sp, #0
    df2e:	6078      	str	r0, [r7, #4]
    uint8_t *nodeId;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
    df30:	2300      	movs	r3, #0
    df32:	617b      	str	r3, [r7, #20]
    nodeId = (uint8_t*) ODF_arg->object;
    df34:	687b      	ldr	r3, [r7, #4]
    df36:	681b      	ldr	r3, [r3, #0]
    df38:	613b      	str	r3, [r7, #16]
    value =ptrCOEMClass->CO_getUint32(ODF_arg->data);
    df3a:	4b10      	ldr	r3, [pc, #64]	; (df7c <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x54>)
    df3c:	681b      	ldr	r3, [r3, #0]
    df3e:	461a      	mov	r2, r3
    df40:	687b      	ldr	r3, [r7, #4]
    df42:	685b      	ldr	r3, [r3, #4]
    df44:	4619      	mov	r1, r3
    df46:	4610      	mov	r0, r2
    df48:	4b0d      	ldr	r3, [pc, #52]	; (df80 <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x58>)
    df4a:	4798      	blx	r3
    df4c:	60f8      	str	r0, [r7, #12]

    /* add nodeId to the value */
    if(ODF_arg->reading){
    df4e:	687b      	ldr	r3, [r7, #4]
    df50:	7f5b      	ldrb	r3, [r3, #29]
    df52:	2b00      	cmp	r3, #0
    df54:	d00c      	beq.n	df70 <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x48>
        ptrCOEMClass->CO_setUint32(ODF_arg->data, value + *nodeId);
    df56:	4b09      	ldr	r3, [pc, #36]	; (df7c <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x54>)
    df58:	681b      	ldr	r3, [r3, #0]
    df5a:	4618      	mov	r0, r3
    df5c:	687b      	ldr	r3, [r7, #4]
    df5e:	6859      	ldr	r1, [r3, #4]
    df60:	693b      	ldr	r3, [r7, #16]
    df62:	781b      	ldrb	r3, [r3, #0]
    df64:	461a      	mov	r2, r3
    df66:	68fb      	ldr	r3, [r7, #12]
    df68:	4413      	add	r3, r2
    df6a:	461a      	mov	r2, r3
    df6c:	4b05      	ldr	r3, [pc, #20]	; (df84 <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x5c>)
    df6e:	4798      	blx	r3
    }

    return ret;
    df70:	697b      	ldr	r3, [r7, #20]
}
    df72:	4618      	mov	r0, r3
    df74:	3718      	adds	r7, #24
    df76:	46bd      	mov	sp, r7
    df78:	bd80      	pop	{r7, pc}
    df7a:	bf00      	nop
    df7c:	20001938 	.word	0x20001938
    df80:	00010521 	.word	0x00010521
    df84:	00010555 	.word	0x00010555

0000df88 <_ZN18CO_Emergency_Class7EM_initEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm>:
        uint32_t               *preDefErr,
        uint8_t                 preDefErrSize,
        CO_CANmodule_t         *CANdev,
        uint32_t                CANdevTxIdx,
        uint32_t                CANidTxEM)
{
    df88:	b590      	push	{r4, r7, lr}
    df8a:	b089      	sub	sp, #36	; 0x24
    df8c:	af02      	add	r7, sp, #8
    df8e:	60f8      	str	r0, [r7, #12]
    df90:	60b9      	str	r1, [r7, #8]
    df92:	607a      	str	r2, [r7, #4]
    df94:	603b      	str	r3, [r7, #0]
    uint8_t i;

    /* verify arguments */
    if(em==NULL || emPr==NULL || SDO==NULL || errorStatusBits==NULL ||
    df96:	68bb      	ldr	r3, [r7, #8]
    df98:	2b00      	cmp	r3, #0
    df9a:	d015      	beq.n	dfc8 <_ZN18CO_Emergency_Class7EM_initEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
    df9c:	687b      	ldr	r3, [r7, #4]
    df9e:	2b00      	cmp	r3, #0
    dfa0:	d012      	beq.n	dfc8 <_ZN18CO_Emergency_Class7EM_initEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
    dfa2:	683b      	ldr	r3, [r7, #0]
    dfa4:	2b00      	cmp	r3, #0
    dfa6:	d00f      	beq.n	dfc8 <_ZN18CO_Emergency_Class7EM_initEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
    dfa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    dfaa:	2b00      	cmp	r3, #0
    dfac:	d00c      	beq.n	dfc8 <_ZN18CO_Emergency_Class7EM_initEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
    dfae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    dfb2:	2b05      	cmp	r3, #5
    dfb4:	d908      	bls.n	dfc8 <_ZN18CO_Emergency_Class7EM_initEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
        errorStatusBitsSize<6U || errorRegister==NULL || preDefErr==NULL || CANdev==NULL){
    dfb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    dfb8:	2b00      	cmp	r3, #0
    dfba:	d005      	beq.n	dfc8 <_ZN18CO_Emergency_Class7EM_initEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
    dfbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    dfbe:	2b00      	cmp	r3, #0
    dfc0:	d002      	beq.n	dfc8 <_ZN18CO_Emergency_Class7EM_initEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
    dfc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dfc4:	2b00      	cmp	r3, #0
    dfc6:	d102      	bne.n	dfce <_ZN18CO_Emergency_Class7EM_initEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x46>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    dfc8:	f04f 33ff 	mov.w	r3, #4294967295
    dfcc:	e072      	b.n	e0b4 <_ZN18CO_Emergency_Class7EM_initEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x12c>
    }

    /* Configure object variables */
    em->errorStatusBits         = errorStatusBits;
    dfce:	68bb      	ldr	r3, [r7, #8]
    dfd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
    dfd2:	601a      	str	r2, [r3, #0]
    em->errorStatusBitsSize     = errorStatusBitsSize;
    dfd4:	68bb      	ldr	r3, [r7, #8]
    dfd6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
    dfda:	711a      	strb	r2, [r3, #4]
    em->bufEnd                  = em->buf + (CO_EM_INTERNAL_BUFFER_SIZE * 8);
    dfdc:	68bb      	ldr	r3, [r7, #8]
    dfde:	3305      	adds	r3, #5
    dfe0:	f103 0250 	add.w	r2, r3, #80	; 0x50
    dfe4:	68bb      	ldr	r3, [r7, #8]
    dfe6:	659a      	str	r2, [r3, #88]	; 0x58
    em->bufWritePtr             = em->buf;
    dfe8:	68bb      	ldr	r3, [r7, #8]
    dfea:	1d5a      	adds	r2, r3, #5
    dfec:	68bb      	ldr	r3, [r7, #8]
    dfee:	65da      	str	r2, [r3, #92]	; 0x5c
    em->bufReadPtr              = em->buf;
    dff0:	68bb      	ldr	r3, [r7, #8]
    dff2:	1d5a      	adds	r2, r3, #5
    dff4:	68bb      	ldr	r3, [r7, #8]
    dff6:	661a      	str	r2, [r3, #96]	; 0x60
    em->bufFull                 = 0U;
    dff8:	68bb      	ldr	r3, [r7, #8]
    dffa:	2200      	movs	r2, #0
    dffc:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    em->wrongErrorReport        = 0U;
    e000:	68bb      	ldr	r3, [r7, #8]
    e002:	2200      	movs	r2, #0
    e004:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    em->handler            = NULL;
    e008:	68bb      	ldr	r3, [r7, #8]
    e00a:	2200      	movs	r2, #0
    e00c:	669a      	str	r2, [r3, #104]	; 0x68
    emPr->em                    = em;
    e00e:	687b      	ldr	r3, [r7, #4]
    e010:	68ba      	ldr	r2, [r7, #8]
    e012:	611a      	str	r2, [r3, #16]
    emPr->errorRegister         = errorRegister;
    e014:	687b      	ldr	r3, [r7, #4]
    e016:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    e018:	601a      	str	r2, [r3, #0]
    emPr->preDefErr             = preDefErr;
    e01a:	687b      	ldr	r3, [r7, #4]
    e01c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    e01e:	605a      	str	r2, [r3, #4]
    emPr->preDefErrSize         = preDefErrSize;
    e020:	687b      	ldr	r3, [r7, #4]
    e022:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
    e026:	721a      	strb	r2, [r3, #8]
    emPr->preDefErrNoOfErrors   = 0U;
    e028:	687b      	ldr	r3, [r7, #4]
    e02a:	2200      	movs	r2, #0
    e02c:	725a      	strb	r2, [r3, #9]
    emPr->inhibitEmTimer        = 0U;
    e02e:	687b      	ldr	r3, [r7, #4]
    e030:	2200      	movs	r2, #0
    e032:	60da      	str	r2, [r3, #12]
 
    /* clear error status bits */
    for(i=0U; i<errorStatusBitsSize; i++){
    e034:	2300      	movs	r3, #0
    e036:	75fb      	strb	r3, [r7, #23]
    e038:	7dfa      	ldrb	r2, [r7, #23]
    e03a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    e03e:	429a      	cmp	r2, r3
    e040:	da09      	bge.n	e056 <_ZN18CO_Emergency_Class7EM_initEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0xce>
        em->errorStatusBits[i] = 0U;
    e042:	68bb      	ldr	r3, [r7, #8]
    e044:	681a      	ldr	r2, [r3, #0]
    e046:	7dfb      	ldrb	r3, [r7, #23]
    e048:	4413      	add	r3, r2
    e04a:	2200      	movs	r2, #0
    e04c:	701a      	strb	r2, [r3, #0]
    for(i=0U; i<errorStatusBitsSize; i++){
    e04e:	7dfb      	ldrb	r3, [r7, #23]
    e050:	3301      	adds	r3, #1
    e052:	75fb      	strb	r3, [r7, #23]
    e054:	e7f0      	b.n	e038 <_ZN18CO_Emergency_Class7EM_initEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0xb0>
    }

    /* Configure Object dictionary entry at index 0x1003 and 0x1014 */
    CO_OD_configure( OD_H1003_PREDEF_ERR_FIELD,CO_ODF_1003, (void*)emPr, 0, 0U);
    e056:	68f8      	ldr	r0, [r7, #12]
    e058:	2300      	movs	r3, #0
    e05a:	9301      	str	r3, [sp, #4]
    e05c:	2300      	movs	r3, #0
    e05e:	9300      	str	r3, [sp, #0]
    e060:	687b      	ldr	r3, [r7, #4]
    e062:	4a16      	ldr	r2, [pc, #88]	; (e0bc <_ZN18CO_Emergency_Class7EM_initEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x134>)
    e064:	f241 0103 	movw	r1, #4099	; 0x1003
    e068:	4c15      	ldr	r4, [pc, #84]	; (e0c0 <_ZN18CO_Emergency_Class7EM_initEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x138>)
    e06a:	47a0      	blx	r4
    CO_OD_configure( OD_H1014_COBID_EMERGENCY,CO_ODF_1014, (void*)&SDO->nodeId, 0, 0U);
    e06c:	68f8      	ldr	r0, [r7, #12]
    e06e:	683b      	ldr	r3, [r7, #0]
    e070:	f103 0268 	add.w	r2, r3, #104	; 0x68
    e074:	2300      	movs	r3, #0
    e076:	9301      	str	r3, [sp, #4]
    e078:	2300      	movs	r3, #0
    e07a:	9300      	str	r3, [sp, #0]
    e07c:	4613      	mov	r3, r2
    e07e:	4a11      	ldr	r2, [pc, #68]	; (e0c4 <_ZN18CO_Emergency_Class7EM_initEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x13c>)
    e080:	f241 0114 	movw	r1, #4116	; 0x1014
    e084:	4c0e      	ldr	r4, [pc, #56]	; (e0c0 <_ZN18CO_Emergency_Class7EM_initEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x138>)
    e086:	47a0      	blx	r4

    /* configure emergency message CAN transmission */
    emPr->CANdev = CANdev;
    e088:	687b      	ldr	r3, [r7, #4]
    e08a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    e08c:	615a      	str	r2, [r3, #20]
    emPr->CANdev->em = (void*)em; /* update pointer inside CAN device. */
    e08e:	687b      	ldr	r3, [r7, #4]
    e090:	695b      	ldr	r3, [r3, #20]
    e092:	68ba      	ldr	r2, [r7, #8]
    e094:	621a      	str	r2, [r3, #32]
    emPr->CANtxBuff =ptrCODriverClass->CAN_Tx_BufferInit(
    e096:	4b0c      	ldr	r3, [pc, #48]	; (e0c8 <_ZN18CO_Emergency_Class7EM_initEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x140>)
    e098:	6818      	ldr	r0, [r3, #0]
    e09a:	2300      	movs	r3, #0
    e09c:	9301      	str	r3, [sp, #4]
    e09e:	2308      	movs	r3, #8
    e0a0:	9300      	str	r3, [sp, #0]
    e0a2:	2300      	movs	r3, #0
    e0a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    e0a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
    e0a8:	4c08      	ldr	r4, [pc, #32]	; (e0cc <_ZN18CO_Emergency_Class7EM_initEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x144>)
    e0aa:	47a0      	blx	r4
    e0ac:	4602      	mov	r2, r0
    e0ae:	687b      	ldr	r3, [r7, #4]
    e0b0:	619a      	str	r2, [r3, #24]
            CANidTxEM,          /* CAN identifier */
            0,                  /* rtr */
            8U,                  /* number of data bytes */
            0);                 /* synchronous message flag bit */

    return CO_ERROR_NO;
    e0b2:	2300      	movs	r3, #0
}
    e0b4:	4618      	mov	r0, r3
    e0b6:	371c      	adds	r7, #28
    e0b8:	46bd      	mov	sp, r7
    e0ba:	bd90      	pop	{r4, r7, pc}
    e0bc:	0000de9d 	.word	0x0000de9d
    e0c0:	00010971 	.word	0x00010971
    e0c4:	0000df29 	.word	0x0000df29
    e0c8:	20001934 	.word	0x20001934
    e0cc:	0000d7d9 	.word	0x0000d7d9

0000e0d0 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm>:
void CO_Emergency_Class::EM_process(
        CO_EMpr_t              *emPr,
        bool_t                  NMTisPreOrOperational,
        uint32_t                timeDifference_100us,
        uint32_t                emInhTime)
{
    e0d0:	b590      	push	{r4, r7, lr}
    e0d2:	b08b      	sub	sp, #44	; 0x2c
    e0d4:	af02      	add	r7, sp, #8
    e0d6:	60f8      	str	r0, [r7, #12]
    e0d8:	60b9      	str	r1, [r7, #8]
    e0da:	603b      	str	r3, [r7, #0]
    e0dc:	4613      	mov	r3, r2
    e0de:	71fb      	strb	r3, [r7, #7]

    CO_EM_t *em = emPr->em;
    e0e0:	68bb      	ldr	r3, [r7, #8]
    e0e2:	691b      	ldr	r3, [r3, #16]
    e0e4:	61bb      	str	r3, [r7, #24]
    uint8_t errorRegister;

    /* verify errors from driver and other */
   ptrCODriverClass->CAN_VerifyErrors();
    e0e6:	4b74      	ldr	r3, [pc, #464]	; (e2b8 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1e8>)
    e0e8:	681b      	ldr	r3, [r3, #0]
    e0ea:	4618      	mov	r0, r3
    e0ec:	4b73      	ldr	r3, [pc, #460]	; (e2bc <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1ec>)
    e0ee:	4798      	blx	r3
    if(em->wrongErrorReport != 0U){
    e0f0:	69bb      	ldr	r3, [r7, #24]
    e0f2:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
    e0f6:	2b00      	cmp	r3, #0
    e0f8:	d00e      	beq.n	e118 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x48>
        EM_ErrorReport(em, CO_EM_WRONG_ERROR_REPORT, CO_EMC_SOFTWARE_INTERNAL, (uint32_t)em->wrongErrorReport);
    e0fa:	69bb      	ldr	r3, [r7, #24]
    e0fc:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
    e100:	9300      	str	r3, [sp, #0]
    e102:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
    e106:	2228      	movs	r2, #40	; 0x28
    e108:	69b9      	ldr	r1, [r7, #24]
    e10a:	68f8      	ldr	r0, [r7, #12]
    e10c:	4c6c      	ldr	r4, [pc, #432]	; (e2c0 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1f0>)
    e10e:	47a0      	blx	r4
        em->wrongErrorReport = 0U;
    e110:	69bb      	ldr	r3, [r7, #24]
    e112:	2200      	movs	r2, #0
    e114:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    }


    /* calculate Error register */
    errorRegister = 0U;
    e118:	2300      	movs	r3, #0
    e11a:	77fb      	strb	r3, [r7, #31]
    /* generic error */
    if(em->errorStatusBits[5]){
    e11c:	69bb      	ldr	r3, [r7, #24]
    e11e:	681b      	ldr	r3, [r3, #0]
    e120:	3305      	adds	r3, #5
    e122:	781b      	ldrb	r3, [r3, #0]
    e124:	2b00      	cmp	r3, #0
    e126:	d003      	beq.n	e130 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x60>
        errorRegister |= CO_ERR_REG_GENERIC_ERR;
    e128:	7ffb      	ldrb	r3, [r7, #31]
    e12a:	f043 0301 	orr.w	r3, r3, #1
    e12e:	77fb      	strb	r3, [r7, #31]
    }
    /* communication error (overrun, error state) */
    if(em->errorStatusBits[2] || em->errorStatusBits[3]){
    e130:	69bb      	ldr	r3, [r7, #24]
    e132:	681b      	ldr	r3, [r3, #0]
    e134:	3302      	adds	r3, #2
    e136:	781b      	ldrb	r3, [r3, #0]
    e138:	2b00      	cmp	r3, #0
    e13a:	d105      	bne.n	e148 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x78>
    e13c:	69bb      	ldr	r3, [r7, #24]
    e13e:	681b      	ldr	r3, [r3, #0]
    e140:	3303      	adds	r3, #3
    e142:	781b      	ldrb	r3, [r3, #0]
    e144:	2b00      	cmp	r3, #0
    e146:	d003      	beq.n	e150 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x80>
        errorRegister |= CO_ERR_REG_COMM_ERR;
    e148:	7ffb      	ldrb	r3, [r7, #31]
    e14a:	f043 0310 	orr.w	r3, r3, #16
    e14e:	77fb      	strb	r3, [r7, #31]
    }
    *emPr->errorRegister = (*emPr->errorRegister & 0xEEU) | errorRegister;
    e150:	68bb      	ldr	r3, [r7, #8]
    e152:	681b      	ldr	r3, [r3, #0]
    e154:	68ba      	ldr	r2, [r7, #8]
    e156:	6812      	ldr	r2, [r2, #0]
    e158:	7812      	ldrb	r2, [r2, #0]
    e15a:	f022 0211 	bic.w	r2, r2, #17
    e15e:	b2d1      	uxtb	r1, r2
    e160:	7ffa      	ldrb	r2, [r7, #31]
    e162:	430a      	orrs	r2, r1
    e164:	b2d2      	uxtb	r2, r2
    e166:	701a      	strb	r2, [r3, #0]

    /* inhibit time */
    if(emPr->inhibitEmTimer < emInhTime){
    e168:	68bb      	ldr	r3, [r7, #8]
    e16a:	68da      	ldr	r2, [r3, #12]
    e16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e16e:	429a      	cmp	r2, r3
    e170:	d205      	bcs.n	e17e <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0xae>
        emPr->inhibitEmTimer += timeDifference_100us;
    e172:	68bb      	ldr	r3, [r7, #8]
    e174:	68da      	ldr	r2, [r3, #12]
    e176:	683b      	ldr	r3, [r7, #0]
    e178:	441a      	add	r2, r3
    e17a:	68bb      	ldr	r3, [r7, #8]
    e17c:	60da      	str	r2, [r3, #12]
    }

    /* send Emergency message. */
    if(     NMTisPreOrOperational &&
            !emPr->CANtxBuff->bufferFull &&
            emPr->inhibitEmTimer >= emInhTime &&
    e17e:	79fb      	ldrb	r3, [r7, #7]
    e180:	2b00      	cmp	r3, #0
    e182:	d017      	beq.n	e1b4 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0xe4>
            !emPr->CANtxBuff->bufferFull &&
    e184:	68bb      	ldr	r3, [r7, #8]
    e186:	699b      	ldr	r3, [r3, #24]
    e188:	7b5b      	ldrb	r3, [r3, #13]
    e18a:	b2db      	uxtb	r3, r3
    if(     NMTisPreOrOperational &&
    e18c:	2b00      	cmp	r3, #0
    e18e:	d111      	bne.n	e1b4 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0xe4>
            emPr->inhibitEmTimer >= emInhTime &&
    e190:	68bb      	ldr	r3, [r7, #8]
    e192:	68da      	ldr	r2, [r3, #12]
            !emPr->CANtxBuff->bufferFull &&
    e194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e196:	429a      	cmp	r2, r3
    e198:	d30c      	bcc.n	e1b4 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0xe4>
            (em->bufReadPtr != em->bufWritePtr || em->bufFull))
    e19a:	69bb      	ldr	r3, [r7, #24]
    e19c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    e19e:	69bb      	ldr	r3, [r7, #24]
    e1a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
            emPr->inhibitEmTimer >= emInhTime &&
    e1a2:	429a      	cmp	r2, r3
    e1a4:	d104      	bne.n	e1b0 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0xe0>
            (em->bufReadPtr != em->bufWritePtr || em->bufFull))
    e1a6:	69bb      	ldr	r3, [r7, #24]
    e1a8:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
    e1ac:	2b00      	cmp	r3, #0
    e1ae:	d001      	beq.n	e1b4 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0xe4>
            emPr->inhibitEmTimer >= emInhTime &&
    e1b0:	2301      	movs	r3, #1
    e1b2:	e000      	b.n	e1b6 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0xe6>
    e1b4:	2300      	movs	r3, #0
    if(     NMTisPreOrOperational &&
    e1b6:	2b00      	cmp	r3, #0
    e1b8:	d079      	beq.n	e2ae <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1de>
    {
        uint32_t preDEF;    /* preDefinedErrorField */
        
        /* add error register */
        em->bufReadPtr[2] = *emPr->errorRegister;
    e1ba:	69bb      	ldr	r3, [r7, #24]
    e1bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    e1be:	3302      	adds	r3, #2
    e1c0:	68ba      	ldr	r2, [r7, #8]
    e1c2:	6812      	ldr	r2, [r2, #0]
    e1c4:	7812      	ldrb	r2, [r2, #0]
    e1c6:	701a      	strb	r2, [r3, #0]

        /* copy data to CAN emergency message */
        CO_memcpy(emPr->CANtxBuff->data, em->bufReadPtr, 8U);
    e1c8:	68f8      	ldr	r0, [r7, #12]
    e1ca:	68bb      	ldr	r3, [r7, #8]
    e1cc:	699b      	ldr	r3, [r3, #24]
    e1ce:	1d59      	adds	r1, r3, #5
    e1d0:	69bb      	ldr	r3, [r7, #24]
    e1d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    e1d4:	2308      	movs	r3, #8
    e1d6:	4c3b      	ldr	r4, [pc, #236]	; (e2c4 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1f4>)
    e1d8:	47a0      	blx	r4
        CO_memcpy((uint8_t*)&preDEF, em->bufReadPtr, 4U);
    e1da:	68f8      	ldr	r0, [r7, #12]
    e1dc:	69bb      	ldr	r3, [r7, #24]
    e1de:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    e1e0:	f107 0114 	add.w	r1, r7, #20
    e1e4:	2304      	movs	r3, #4
    e1e6:	4c37      	ldr	r4, [pc, #220]	; (e2c4 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1f4>)
    e1e8:	47a0      	blx	r4
        em->bufReadPtr += 8;
    e1ea:	69bb      	ldr	r3, [r7, #24]
    e1ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    e1ee:	f103 0208 	add.w	r2, r3, #8
    e1f2:	69bb      	ldr	r3, [r7, #24]
    e1f4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Update read buffer pointer and reset inhibit timer */
        if(em->bufReadPtr == em->bufEnd){
    e1f6:	69bb      	ldr	r3, [r7, #24]
    e1f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    e1fa:	69bb      	ldr	r3, [r7, #24]
    e1fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    e1fe:	429a      	cmp	r2, r3
    e200:	d103      	bne.n	e20a <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x13a>
            em->bufReadPtr = em->buf;
    e202:	69bb      	ldr	r3, [r7, #24]
    e204:	1d5a      	adds	r2, r3, #5
    e206:	69bb      	ldr	r3, [r7, #24]
    e208:	661a      	str	r2, [r3, #96]	; 0x60
        }
        emPr->inhibitEmTimer = 0U;
    e20a:	68bb      	ldr	r3, [r7, #8]
    e20c:	2200      	movs	r2, #0
    e20e:	60da      	str	r2, [r3, #12]

        /* verify message buffer overflow, then clear full flag */
        if(em->bufFull == 2U){
    e210:	69bb      	ldr	r3, [r7, #24]
    e212:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
    e216:	2b02      	cmp	r3, #2
    e218:	d10d      	bne.n	e236 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x166>
            em->bufFull = 0U;    /* will be updated below */
    e21a:	69bb      	ldr	r3, [r7, #24]
    e21c:	2200      	movs	r2, #0
    e21e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
            EM_ErrorReport(em, CO_EM_EMERGENCY_BUFFER_FULL, CO_EMC_GENERIC, 0U);
    e222:	2300      	movs	r3, #0
    e224:	9300      	str	r3, [sp, #0]
    e226:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    e22a:	2220      	movs	r2, #32
    e22c:	69b9      	ldr	r1, [r7, #24]
    e22e:	68f8      	ldr	r0, [r7, #12]
    e230:	4c23      	ldr	r4, [pc, #140]	; (e2c0 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1f0>)
    e232:	47a0      	blx	r4
    e234:	e003      	b.n	e23e <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x16e>
        }
        else{
            em->bufFull = 0;
    e236:	69bb      	ldr	r3, [r7, #24]
    e238:	2200      	movs	r2, #0
    e23a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        }

        /* write to 'pre-defined error field' (object dictionary, index 0x1003) */
        if(emPr->preDefErr){
    e23e:	68bb      	ldr	r3, [r7, #8]
    e240:	685b      	ldr	r3, [r3, #4]
    e242:	2b00      	cmp	r3, #0
    e244:	d02a      	beq.n	e29c <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1cc>
            uint8_t i;

            if(emPr->preDefErrNoOfErrors < emPr->preDefErrSize)
    e246:	68bb      	ldr	r3, [r7, #8]
    e248:	7a5b      	ldrb	r3, [r3, #9]
    e24a:	461a      	mov	r2, r3
    e24c:	68bb      	ldr	r3, [r7, #8]
    e24e:	7a1b      	ldrb	r3, [r3, #8]
    e250:	429a      	cmp	r2, r3
    e252:	da05      	bge.n	e260 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x190>
                emPr->preDefErrNoOfErrors++;
    e254:	68bb      	ldr	r3, [r7, #8]
    e256:	7a5b      	ldrb	r3, [r3, #9]
    e258:	3301      	adds	r3, #1
    e25a:	b2da      	uxtb	r2, r3
    e25c:	68bb      	ldr	r3, [r7, #8]
    e25e:	725a      	strb	r2, [r3, #9]
            for(i=emPr->preDefErrNoOfErrors-1; i>0; i--)
    e260:	68bb      	ldr	r3, [r7, #8]
    e262:	7a5b      	ldrb	r3, [r3, #9]
    e264:	3b01      	subs	r3, #1
    e266:	77bb      	strb	r3, [r7, #30]
    e268:	7fbb      	ldrb	r3, [r7, #30]
    e26a:	2b00      	cmp	r3, #0
    e26c:	dd12      	ble.n	e294 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1c4>
                emPr->preDefErr[i] = emPr->preDefErr[i-1];
    e26e:	68bb      	ldr	r3, [r7, #8]
    e270:	685a      	ldr	r2, [r3, #4]
    e272:	7fbb      	ldrb	r3, [r7, #30]
    e274:	009b      	lsls	r3, r3, #2
    e276:	441a      	add	r2, r3
    e278:	68bb      	ldr	r3, [r7, #8]
    e27a:	6859      	ldr	r1, [r3, #4]
    e27c:	7fbb      	ldrb	r3, [r7, #30]
    e27e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    e282:	3b01      	subs	r3, #1
    e284:	009b      	lsls	r3, r3, #2
    e286:	440b      	add	r3, r1
    e288:	681b      	ldr	r3, [r3, #0]
    e28a:	6013      	str	r3, [r2, #0]
            for(i=emPr->preDefErrNoOfErrors-1; i>0; i--)
    e28c:	7fbb      	ldrb	r3, [r7, #30]
    e28e:	3b01      	subs	r3, #1
    e290:	77bb      	strb	r3, [r7, #30]
    e292:	e7e9      	b.n	e268 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x198>
            emPr->preDefErr[0] = preDEF;
    e294:	68bb      	ldr	r3, [r7, #8]
    e296:	685b      	ldr	r3, [r3, #4]
    e298:	697a      	ldr	r2, [r7, #20]
    e29a:	601a      	str	r2, [r3, #0]
        }

        /* send CAN message */
        ptrCODriverClass->CAN_Send(emPr->CANtxBuff);
    e29c:	4b06      	ldr	r3, [pc, #24]	; (e2b8 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1e8>)
    e29e:	681a      	ldr	r2, [r3, #0]
    e2a0:	68bb      	ldr	r3, [r7, #8]
    e2a2:	699b      	ldr	r3, [r3, #24]
    e2a4:	4619      	mov	r1, r3
    e2a6:	4610      	mov	r0, r2
    e2a8:	4b07      	ldr	r3, [pc, #28]	; (e2c8 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1f8>)
    e2aa:	4798      	blx	r3
    }

    return;
    e2ac:	bf00      	nop
    e2ae:	bf00      	nop
}
    e2b0:	3724      	adds	r7, #36	; 0x24
    e2b2:	46bd      	mov	sp, r7
    e2b4:	bd90      	pop	{r4, r7, pc}
    e2b6:	bf00      	nop
    e2b8:	20001934 	.word	0x20001934
    e2bc:	0000daad 	.word	0x0000daad
    e2c0:	0000e2cd 	.word	0x0000e2cd
    e2c4:	000104e5 	.word	0x000104e5
    e2c8:	0000d885 	.word	0x0000d885

0000e2cc <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm>:


/******************************************************************************/
void CO_Emergency_Class::EM_ErrorReport(CO_EM_t *em, const uint8_t errorBit, const uint32_t errorCode, const uint32_t infoCode){
    e2cc:	b590      	push	{r4, r7, lr}
    e2ce:	b08d      	sub	sp, #52	; 0x34
    e2d0:	af00      	add	r7, sp, #0
    e2d2:	60f8      	str	r0, [r7, #12]
    e2d4:	60b9      	str	r1, [r7, #8]
    e2d6:	603b      	str	r3, [r7, #0]
    e2d8:	4613      	mov	r3, r2
    e2da:	71fb      	strb	r3, [r7, #7]
    uint8_t index = errorBit >> 3;
    e2dc:	79fb      	ldrb	r3, [r7, #7]
    e2de:	10db      	asrs	r3, r3, #3
    e2e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    uint8_t bitmask = 1 << (errorBit & 0x7);
    e2e4:	79fb      	ldrb	r3, [r7, #7]
    e2e6:	f003 0307 	and.w	r3, r3, #7
    e2ea:	2201      	movs	r2, #1
    e2ec:	fa02 f303 	lsl.w	r3, r2, r3
    e2f0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    uint8_t *errorStatusBits = 0;
    e2f4:	2300      	movs	r3, #0
    e2f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t sendEmergency = true;
    e2f8:	2301      	movs	r3, #1
    e2fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if(em == NULL){
    e2fe:	68bb      	ldr	r3, [r7, #8]
    e300:	2b00      	cmp	r3, #0
    e302:	d103      	bne.n	e30c <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x40>
        sendEmergency = false;
    e304:	2300      	movs	r3, #0
    e306:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    e30a:	e01e      	b.n	e34a <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x7e>
    }
    else if(index >= em->errorStatusBitsSize){
    e30c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
    e310:	68ba      	ldr	r2, [r7, #8]
    e312:	7912      	ldrb	r2, [r2, #4]
    e314:	4293      	cmp	r3, r2
    e316:	db07      	blt.n	e328 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x5c>
        /* if errorBit value not supported, send emergency 'CO_EM_WRONG_ERROR_REPORT' */
        em->wrongErrorReport = errorBit;
    e318:	68bb      	ldr	r3, [r7, #8]
    e31a:	79fa      	ldrb	r2, [r7, #7]
    e31c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        sendEmergency = false;
    e320:	2300      	movs	r3, #0
    e322:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    e326:	e010      	b.n	e34a <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x7e>
    }
    else{
        errorStatusBits = &em->errorStatusBits[index];
    e328:	68bb      	ldr	r3, [r7, #8]
    e32a:	681a      	ldr	r2, [r3, #0]
    e32c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
    e330:	4413      	add	r3, r2
    e332:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* if error was already reported, do nothing */
        if((*errorStatusBits & bitmask) != 0){
    e334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e336:	781a      	ldrb	r2, [r3, #0]
    e338:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
    e33c:	4013      	ands	r3, r2
    e33e:	b2db      	uxtb	r3, r3
    e340:	2b00      	cmp	r3, #0
    e342:	d002      	beq.n	e34a <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x7e>
            sendEmergency = false;
    e344:	2300      	movs	r3, #0
    e346:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }
    }

    if(sendEmergency){
    e34a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    e34e:	2b00      	cmp	r3, #0
    e350:	d05c      	beq.n	e40c <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x140>
        /* set error bit */
        if(errorBit){
    e352:	79fb      	ldrb	r3, [r7, #7]
    e354:	2b00      	cmp	r3, #0
    e356:	d007      	beq.n	e368 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x9c>
            /* any error except NO_ERROR */
            *errorStatusBits |= bitmask;
    e358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e35a:	781a      	ldrb	r2, [r3, #0]
    e35c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
    e360:	4313      	orrs	r3, r2
    e362:	b2da      	uxtb	r2, r3
    e364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e366:	701a      	strb	r2, [r3, #0]
        }

        /* verify buffer full, set overflow */
        if(em->bufFull){
    e368:	68bb      	ldr	r3, [r7, #8]
    e36a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
    e36e:	2b00      	cmp	r3, #0
    e370:	d004      	beq.n	e37c <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0xb0>
            em->bufFull = 2;
    e372:	68bb      	ldr	r3, [r7, #8]
    e374:	2202      	movs	r2, #2
    e376:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
            if(em->handler != NULL) {
                em->handler();
            }
        }
    }
}
    e37a:	e047      	b.n	e40c <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x140>
            CO_memcpySwap2(&bufCopy[0], &errorCode);
    e37c:	68fb      	ldr	r3, [r7, #12]
    e37e:	463a      	mov	r2, r7
    e380:	f107 0118 	add.w	r1, r7, #24
    e384:	4618      	mov	r0, r3
    e386:	4b23      	ldr	r3, [pc, #140]	; (e414 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x148>)
    e388:	4798      	blx	r3
            bufCopy[2] = 0; /* error register will be set later */
    e38a:	2300      	movs	r3, #0
    e38c:	76bb      	strb	r3, [r7, #26]
            bufCopy[3] = errorBit;
    e38e:	79fb      	ldrb	r3, [r7, #7]
    e390:	76fb      	strb	r3, [r7, #27]
            CO_memcpySwap4(&bufCopy[4], &infoCode);
    e392:	68f8      	ldr	r0, [r7, #12]
    e394:	f107 0318 	add.w	r3, r7, #24
    e398:	3304      	adds	r3, #4
    e39a:	f107 0240 	add.w	r2, r7, #64	; 0x40
    e39e:	4619      	mov	r1, r3
    e3a0:	4b1d      	ldr	r3, [pc, #116]	; (e418 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x14c>)
    e3a2:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    e3a4:	f3ef 8310 	mrs	r3, PRIMASK
    e3a8:	617b      	str	r3, [r7, #20]
  return(result);
    e3aa:	697b      	ldr	r3, [r7, #20]
            CO_LOCK_EMCY();
    e3ac:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
    e3ae:	b672      	cpsid	i
            CO_memcpy(em->bufWritePtr, &bufCopy[0], 8);
    e3b0:	68f8      	ldr	r0, [r7, #12]
    e3b2:	68bb      	ldr	r3, [r7, #8]
    e3b4:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
    e3b6:	f107 0218 	add.w	r2, r7, #24
    e3ba:	2308      	movs	r3, #8
    e3bc:	4c17      	ldr	r4, [pc, #92]	; (e41c <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x150>)
    e3be:	47a0      	blx	r4
            em->bufWritePtr += 8;
    e3c0:	68bb      	ldr	r3, [r7, #8]
    e3c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    e3c4:	f103 0208 	add.w	r2, r3, #8
    e3c8:	68bb      	ldr	r3, [r7, #8]
    e3ca:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufEnd) em->bufWritePtr = em->buf;
    e3cc:	68bb      	ldr	r3, [r7, #8]
    e3ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    e3d0:	68bb      	ldr	r3, [r7, #8]
    e3d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    e3d4:	429a      	cmp	r2, r3
    e3d6:	d103      	bne.n	e3e0 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x114>
    e3d8:	68bb      	ldr	r3, [r7, #8]
    e3da:	1d5a      	adds	r2, r3, #5
    e3dc:	68bb      	ldr	r3, [r7, #8]
    e3de:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufReadPtr) em->bufFull = 1;
    e3e0:	68bb      	ldr	r3, [r7, #8]
    e3e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    e3e4:	68bb      	ldr	r3, [r7, #8]
    e3e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    e3e8:	429a      	cmp	r2, r3
    e3ea:	d103      	bne.n	e3f4 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x128>
    e3ec:	68bb      	ldr	r3, [r7, #8]
    e3ee:	2201      	movs	r2, #1
    e3f0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    e3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e3f6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    e3f8:	6a3b      	ldr	r3, [r7, #32]
    e3fa:	f383 8810 	msr	PRIMASK, r3
            if(em->handler != NULL) {
    e3fe:	68bb      	ldr	r3, [r7, #8]
    e400:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    e402:	2b00      	cmp	r3, #0
    e404:	d002      	beq.n	e40c <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x140>
                em->handler();
    e406:	68bb      	ldr	r3, [r7, #8]
    e408:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    e40a:	4798      	blx	r3
}
    e40c:	bf00      	nop
    e40e:	3734      	adds	r7, #52	; 0x34
    e410:	46bd      	mov	sp, r7
    e412:	bd90      	pop	{r4, r7, pc}
    e414:	0001058d 	.word	0x0001058d
    e418:	000105bd 	.word	0x000105bd
    e41c:	000104e5 	.word	0x000104e5

0000e420 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm>:


/******************************************************************************/
void CO_Emergency_Class::EM_ErrorReset(CO_EM_t *em, const uint8_t errorBit, const uint32_t infoCode){
    e420:	b590      	push	{r4, r7, lr}
    e422:	b08d      	sub	sp, #52	; 0x34
    e424:	af00      	add	r7, sp, #0
    e426:	60f8      	str	r0, [r7, #12]
    e428:	60b9      	str	r1, [r7, #8]
    e42a:	603b      	str	r3, [r7, #0]
    e42c:	4613      	mov	r3, r2
    e42e:	71fb      	strb	r3, [r7, #7]
    uint8_t index = errorBit >> 3;
    e430:	79fb      	ldrb	r3, [r7, #7]
    e432:	10db      	asrs	r3, r3, #3
    e434:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    uint8_t bitmask = 1 << (errorBit & 0x7);
    e438:	79fb      	ldrb	r3, [r7, #7]
    e43a:	f003 0307 	and.w	r3, r3, #7
    e43e:	2201      	movs	r2, #1
    e440:	fa02 f303 	lsl.w	r3, r2, r3
    e444:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    uint8_t *errorStatusBits = 0;
    e448:	2300      	movs	r3, #0
    e44a:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t sendEmergency = true;
    e44c:	2301      	movs	r3, #1
    e44e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if(em == NULL){
    e452:	68bb      	ldr	r3, [r7, #8]
    e454:	2b00      	cmp	r3, #0
    e456:	d103      	bne.n	e460 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x40>
        sendEmergency = false;
    e458:	2300      	movs	r3, #0
    e45a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    e45e:	e01e      	b.n	e49e <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x7e>
    }
    else if(index >= em->errorStatusBitsSize){
    e460:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
    e464:	68ba      	ldr	r2, [r7, #8]
    e466:	7912      	ldrb	r2, [r2, #4]
    e468:	4293      	cmp	r3, r2
    e46a:	db07      	blt.n	e47c <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x5c>
        /* if errorBit value not supported, send emergency 'CO_EM_WRONG_ERROR_REPORT' */
        em->wrongErrorReport = errorBit;
    e46c:	68bb      	ldr	r3, [r7, #8]
    e46e:	79fa      	ldrb	r2, [r7, #7]
    e470:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        sendEmergency = false;
    e474:	2300      	movs	r3, #0
    e476:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    e47a:	e010      	b.n	e49e <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x7e>
    }
    else{
        errorStatusBits = &em->errorStatusBits[index];
    e47c:	68bb      	ldr	r3, [r7, #8]
    e47e:	681a      	ldr	r2, [r3, #0]
    e480:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
    e484:	4413      	add	r3, r2
    e486:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* if error was allready cleared, do nothing */
        if((*errorStatusBits & bitmask) == 0){
    e488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e48a:	781a      	ldrb	r2, [r3, #0]
    e48c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
    e490:	4013      	ands	r3, r2
    e492:	b2db      	uxtb	r3, r3
    e494:	2b00      	cmp	r3, #0
    e496:	d102      	bne.n	e49e <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x7e>
            sendEmergency = false;
    e498:	2300      	movs	r3, #0
    e49a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }
    }

    if(sendEmergency){
    e49e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    e4a2:	2b00      	cmp	r3, #0
    e4a4:	d059      	beq.n	e55a <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x13a>
        /* erase error bit */
        *errorStatusBits &= ~bitmask;
    e4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e4a8:	781b      	ldrb	r3, [r3, #0]
    e4aa:	b25a      	sxtb	r2, r3
    e4ac:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
    e4b0:	43db      	mvns	r3, r3
    e4b2:	b25b      	sxtb	r3, r3
    e4b4:	4013      	ands	r3, r2
    e4b6:	b25b      	sxtb	r3, r3
    e4b8:	b2da      	uxtb	r2, r3
    e4ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e4bc:	701a      	strb	r2, [r3, #0]

        /* verify buffer full */
        if(em->bufFull){
    e4be:	68bb      	ldr	r3, [r7, #8]
    e4c0:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
    e4c4:	2b00      	cmp	r3, #0
    e4c6:	d004      	beq.n	e4d2 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0xb2>
            em->bufFull = 2;
    e4c8:	68bb      	ldr	r3, [r7, #8]
    e4ca:	2202      	movs	r2, #2
    e4cc:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
            if(em->handler != NULL) {
                em->handler();
            }
        }
    }
}
    e4d0:	e043      	b.n	e55a <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x13a>
            bufCopy[0] = 0;
    e4d2:	2300      	movs	r3, #0
    e4d4:	763b      	strb	r3, [r7, #24]
            bufCopy[1] = 0;
    e4d6:	2300      	movs	r3, #0
    e4d8:	767b      	strb	r3, [r7, #25]
            bufCopy[2] = 0; /* error register will be set later */
    e4da:	2300      	movs	r3, #0
    e4dc:	76bb      	strb	r3, [r7, #26]
            bufCopy[3] = errorBit;
    e4de:	79fb      	ldrb	r3, [r7, #7]
    e4e0:	76fb      	strb	r3, [r7, #27]
            CO_memcpySwap4(&bufCopy[4], &infoCode);
    e4e2:	68f8      	ldr	r0, [r7, #12]
    e4e4:	463a      	mov	r2, r7
    e4e6:	f107 0318 	add.w	r3, r7, #24
    e4ea:	3304      	adds	r3, #4
    e4ec:	4619      	mov	r1, r3
    e4ee:	4b1d      	ldr	r3, [pc, #116]	; (e564 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x144>)
    e4f0:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    e4f2:	f3ef 8310 	mrs	r3, PRIMASK
    e4f6:	617b      	str	r3, [r7, #20]
  return(result);
    e4f8:	697b      	ldr	r3, [r7, #20]
            CO_LOCK_EMCY();
    e4fa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
    e4fc:	b672      	cpsid	i
            CO_memcpy(em->bufWritePtr, &bufCopy[0], 8);
    e4fe:	68f8      	ldr	r0, [r7, #12]
    e500:	68bb      	ldr	r3, [r7, #8]
    e502:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
    e504:	f107 0218 	add.w	r2, r7, #24
    e508:	2308      	movs	r3, #8
    e50a:	4c17      	ldr	r4, [pc, #92]	; (e568 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x148>)
    e50c:	47a0      	blx	r4
            em->bufWritePtr += 8;
    e50e:	68bb      	ldr	r3, [r7, #8]
    e510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    e512:	f103 0208 	add.w	r2, r3, #8
    e516:	68bb      	ldr	r3, [r7, #8]
    e518:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufEnd) em->bufWritePtr = em->buf;
    e51a:	68bb      	ldr	r3, [r7, #8]
    e51c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    e51e:	68bb      	ldr	r3, [r7, #8]
    e520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    e522:	429a      	cmp	r2, r3
    e524:	d103      	bne.n	e52e <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x10e>
    e526:	68bb      	ldr	r3, [r7, #8]
    e528:	1d5a      	adds	r2, r3, #5
    e52a:	68bb      	ldr	r3, [r7, #8]
    e52c:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufReadPtr) em->bufFull = 1;
    e52e:	68bb      	ldr	r3, [r7, #8]
    e530:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    e532:	68bb      	ldr	r3, [r7, #8]
    e534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    e536:	429a      	cmp	r2, r3
    e538:	d103      	bne.n	e542 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x122>
    e53a:	68bb      	ldr	r3, [r7, #8]
    e53c:	2201      	movs	r2, #1
    e53e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    e542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e544:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    e546:	6a3b      	ldr	r3, [r7, #32]
    e548:	f383 8810 	msr	PRIMASK, r3
            if(em->handler != NULL) {
    e54c:	68bb      	ldr	r3, [r7, #8]
    e54e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    e550:	2b00      	cmp	r3, #0
    e552:	d002      	beq.n	e55a <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x13a>
                em->handler();
    e554:	68bb      	ldr	r3, [r7, #8]
    e556:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    e558:	4798      	blx	r3
}
    e55a:	bf00      	nop
    e55c:	3734      	adds	r7, #52	; 0x34
    e55e:	46bd      	mov	sp, r7
    e560:	bd90      	pop	{r4, r7, pc}
    e562:	bf00      	nop
    e564:	000105bd 	.word	0x000105bd
    e568:	000104e5 	.word	0x000104e5

0000e56c <_ZN18CO_Emergency_Class10EM_IsErrorEP7CO_EM_th>:


/******************************************************************************/
bool_t CO_Emergency_Class::EM_IsError(CO_EM_t *em, const uint8_t errorBit){
    e56c:	b480      	push	{r7}
    e56e:	b087      	sub	sp, #28
    e570:	af00      	add	r7, sp, #0
    e572:	60f8      	str	r0, [r7, #12]
    e574:	60b9      	str	r1, [r7, #8]
    e576:	4613      	mov	r3, r2
    e578:	71fb      	strb	r3, [r7, #7]
    uint8_t index = errorBit >> 3;
    e57a:	79fb      	ldrb	r3, [r7, #7]
    e57c:	10db      	asrs	r3, r3, #3
    e57e:	75bb      	strb	r3, [r7, #22]
    uint8_t bitmask = 1 << (errorBit & 0x7);
    e580:	79fb      	ldrb	r3, [r7, #7]
    e582:	f003 0307 	and.w	r3, r3, #7
    e586:	2201      	movs	r2, #1
    e588:	fa02 f303 	lsl.w	r3, r2, r3
    e58c:	757b      	strb	r3, [r7, #21]
    bool_t ret = false;
    e58e:	2300      	movs	r3, #0
    e590:	75fb      	strb	r3, [r7, #23]

    if(em != NULL && index < em->errorStatusBitsSize){
    e592:	68bb      	ldr	r3, [r7, #8]
    e594:	2b00      	cmp	r3, #0
    e596:	d010      	beq.n	e5ba <_ZN18CO_Emergency_Class10EM_IsErrorEP7CO_EM_th+0x4e>
    e598:	7dbb      	ldrb	r3, [r7, #22]
    e59a:	68ba      	ldr	r2, [r7, #8]
    e59c:	7912      	ldrb	r2, [r2, #4]
    e59e:	4293      	cmp	r3, r2
    e5a0:	da0b      	bge.n	e5ba <_ZN18CO_Emergency_Class10EM_IsErrorEP7CO_EM_th+0x4e>
        if((em->errorStatusBits[index] & bitmask) != 0){
    e5a2:	68bb      	ldr	r3, [r7, #8]
    e5a4:	681a      	ldr	r2, [r3, #0]
    e5a6:	7dbb      	ldrb	r3, [r7, #22]
    e5a8:	4413      	add	r3, r2
    e5aa:	781a      	ldrb	r2, [r3, #0]
    e5ac:	7d7b      	ldrb	r3, [r7, #21]
    e5ae:	4013      	ands	r3, r2
    e5b0:	b2db      	uxtb	r3, r3
    e5b2:	2b00      	cmp	r3, #0
    e5b4:	d001      	beq.n	e5ba <_ZN18CO_Emergency_Class10EM_IsErrorEP7CO_EM_th+0x4e>
            ret = true;
    e5b6:	2301      	movs	r3, #1
    e5b8:	75fb      	strb	r3, [r7, #23]
        }
    }

    return ret;
    e5ba:	7dfb      	ldrb	r3, [r7, #23]
    e5bc:	4618      	mov	r0, r3
    e5be:	371c      	adds	r7, #28
    e5c0:	46bd      	mov	sp, r7
    e5c2:	bc80      	pop	{r7}
    e5c4:	4770      	bx	lr

0000e5c6 <_ZL17CO_HBcons_receivePvPK13CO_CANrxMsg_t>:
#include "CO_Emergency_Class.h"

CO_HB_Consumer_Class	*ptrHBConsumerClass;


static void CO_HBcons_receive(void *object,const CO_CANrxMsg_t *msg){
    e5c6:	b480      	push	{r7}
    e5c8:	b085      	sub	sp, #20
    e5ca:	af00      	add	r7, sp, #0
    e5cc:	6078      	str	r0, [r7, #4]
    e5ce:	6039      	str	r1, [r7, #0]
	CO_HBconsNode_t *HBconsNode;

	HBconsNode = (CO_HBconsNode_t*) object; /* this is the correct pointer type of the first argument */
    e5d0:	687b      	ldr	r3, [r7, #4]
    e5d2:	60fb      	str	r3, [r7, #12]

	/* verify message length */
	if(msg->DLC == 1){
    e5d4:	683b      	ldr	r3, [r7, #0]
    e5d6:	7d1b      	ldrb	r3, [r3, #20]
    e5d8:	2b01      	cmp	r3, #1
    e5da:	d106      	bne.n	e5ea <_ZL17CO_HBcons_receivePvPK13CO_CANrxMsg_t+0x24>
		/* copy data and set 'new message' flag. */
		HBconsNode->NMTstate = msg->data[0];
    e5dc:	683b      	ldr	r3, [r7, #0]
    e5de:	7d5a      	ldrb	r2, [r3, #21]
    e5e0:	68fb      	ldr	r3, [r7, #12]
    e5e2:	701a      	strb	r2, [r3, #0]
		HBconsNode->CANrxNew = true;
    e5e4:	68fb      	ldr	r3, [r7, #12]
    e5e6:	2201      	movs	r2, #1
    e5e8:	731a      	strb	r2, [r3, #12]
	}
}
    e5ea:	bf00      	nop
    e5ec:	3714      	adds	r7, #20
    e5ee:	46bd      	mov	sp, r7
    e5f0:	bc80      	pop	{r7}
    e5f2:	4770      	bx	lr

0000e5f4 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm>:
static void CO_HBcons_monitoredNodeConfig(
CO_HBconsumer_t        *HBcons,
uint8_t                 idx,
uint32_t                HBconsTime)
{
    e5f4:	b590      	push	{r4, r7, lr}
    e5f6:	b08d      	sub	sp, #52	; 0x34
    e5f8:	af04      	add	r7, sp, #16
    e5fa:	60f8      	str	r0, [r7, #12]
    e5fc:	460b      	mov	r3, r1
    e5fe:	607a      	str	r2, [r7, #4]
    e600:	72fb      	strb	r3, [r7, #11]
	uint32_t COB_ID;
	uint32_t NodeID;
	CO_HBconsNode_t *monitoredNode;

	if(idx >= HBcons->numberOfMonitoredNodes) return;
    e602:	7afb      	ldrb	r3, [r7, #11]
    e604:	68fa      	ldr	r2, [r7, #12]
    e606:	7b12      	ldrb	r2, [r2, #12]
    e608:	4293      	cmp	r3, r2
    e60a:	da39      	bge.n	e680 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x8c>

	NodeID = (uint32_t)((HBconsTime>>16)&0xFF);
    e60c:	687b      	ldr	r3, [r7, #4]
    e60e:	0c1b      	lsrs	r3, r3, #16
    e610:	b2db      	uxtb	r3, r3
    e612:	61bb      	str	r3, [r7, #24]
	monitoredNode = &HBcons->monitoredNodes[idx];
    e614:	68fb      	ldr	r3, [r7, #12]
    e616:	689a      	ldr	r2, [r3, #8]
    e618:	7afb      	ldrb	r3, [r7, #11]
    e61a:	011b      	lsls	r3, r3, #4
    e61c:	4413      	add	r3, r2
    e61e:	617b      	str	r3, [r7, #20]
	monitoredNode->time = (uint32_t)HBconsTime;
    e620:	697b      	ldr	r3, [r7, #20]
    e622:	687a      	ldr	r2, [r7, #4]
    e624:	609a      	str	r2, [r3, #8]
	monitoredNode->NMTstate = 0;
    e626:	697b      	ldr	r3, [r7, #20]
    e628:	2200      	movs	r2, #0
    e62a:	701a      	strb	r2, [r3, #0]
	monitoredNode->monStarted = false;
    e62c:	697b      	ldr	r3, [r7, #20]
    e62e:	2200      	movs	r2, #0
    e630:	705a      	strb	r2, [r3, #1]

	/* is channel used */
	if(NodeID && monitoredNode->time){
    e632:	69bb      	ldr	r3, [r7, #24]
    e634:	2b00      	cmp	r3, #0
    e636:	d008      	beq.n	e64a <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x56>
    e638:	697b      	ldr	r3, [r7, #20]
    e63a:	689b      	ldr	r3, [r3, #8]
    e63c:	2b00      	cmp	r3, #0
    e63e:	d004      	beq.n	e64a <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x56>
		COB_ID = NodeID + 0x700;
    e640:	69bb      	ldr	r3, [r7, #24]
    e642:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
    e646:	61fb      	str	r3, [r7, #28]
    e648:	e004      	b.n	e654 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x60>
	}
	else{
		COB_ID = 0;
    e64a:	2300      	movs	r3, #0
    e64c:	61fb      	str	r3, [r7, #28]
		monitoredNode->time = 0;
    e64e:	697b      	ldr	r3, [r7, #20]
    e650:	2200      	movs	r2, #0
    e652:	609a      	str	r2, [r3, #8]
	}

	/* configure Heartbeat consumer CAN reception */
	ptrCODriverClass->CAN_Rx_BufferInit(
    e654:	4b0c      	ldr	r3, [pc, #48]	; (e688 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x94>)
    e656:	6818      	ldr	r0, [r3, #0]
	HBcons->CANdevRxIdxStart + idx,
    e658:	68fb      	ldr	r3, [r7, #12]
    e65a:	695a      	ldr	r2, [r3, #20]
	ptrCODriverClass->CAN_Rx_BufferInit(
    e65c:	7afb      	ldrb	r3, [r7, #11]
    e65e:	18d1      	adds	r1, r2, r3
	COB_ID,
	0x7FF,
	0,
	(void*)&HBcons->monitoredNodes[idx],
    e660:	68fb      	ldr	r3, [r7, #12]
    e662:	689a      	ldr	r2, [r3, #8]
    e664:	7afb      	ldrb	r3, [r7, #11]
    e666:	011b      	lsls	r3, r3, #4
    e668:	4413      	add	r3, r2
	CO_HBcons_receive);
    e66a:	4a08      	ldr	r2, [pc, #32]	; (e68c <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x98>)
    e66c:	9202      	str	r2, [sp, #8]
    e66e:	9301      	str	r3, [sp, #4]
    e670:	2300      	movs	r3, #0
    e672:	9300      	str	r3, [sp, #0]
    e674:	f240 73ff 	movw	r3, #2047	; 0x7ff
    e678:	69fa      	ldr	r2, [r7, #28]
    e67a:	4c05      	ldr	r4, [pc, #20]	; (e690 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x9c>)
    e67c:	47a0      	blx	r4
    e67e:	e000      	b.n	e682 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x8e>
	if(idx >= HBcons->numberOfMonitoredNodes) return;
    e680:	bf00      	nop
}
    e682:	3724      	adds	r7, #36	; 0x24
    e684:	46bd      	mov	sp, r7
    e686:	bd90      	pop	{r4, r7, pc}
    e688:	20001934 	.word	0x20001934
    e68c:	0000e5c7 	.word	0x0000e5c7
    e690:	0000d6dd 	.word	0x0000d6dd

0000e694 <_ZL11CO_ODF_1016P12CO_ODF_arg_t>:
static CO_SDO_abortCode_t CO_ODF_1016(CO_ODF_arg_t *ODF_arg){
    e694:	b580      	push	{r7, lr}
    e696:	b08c      	sub	sp, #48	; 0x30
    e698:	af00      	add	r7, sp, #0
    e69a:	6078      	str	r0, [r7, #4]
	CO_HBconsumer_t *HBcons;
	uint32_t value;
	CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
    e69c:	2300      	movs	r3, #0
    e69e:	62fb      	str	r3, [r7, #44]	; 0x2c

	HBcons = (CO_HBconsumer_t*) ODF_arg->object;
    e6a0:	687b      	ldr	r3, [r7, #4]
    e6a2:	681b      	ldr	r3, [r3, #0]
    e6a4:	627b      	str	r3, [r7, #36]	; 0x24
	value =ptrCODriverClass->CO_getUint32(ODF_arg->data);
    e6a6:	4b32      	ldr	r3, [pc, #200]	; (e770 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xdc>)
    e6a8:	681b      	ldr	r3, [r3, #0]
    e6aa:	1d1a      	adds	r2, r3, #4
    e6ac:	687b      	ldr	r3, [r7, #4]
    e6ae:	685b      	ldr	r3, [r3, #4]
    e6b0:	4619      	mov	r1, r3
    e6b2:	4610      	mov	r0, r2
    e6b4:	4b2f      	ldr	r3, [pc, #188]	; (e774 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xe0>)
    e6b6:	4798      	blx	r3
    e6b8:	6238      	str	r0, [r7, #32]

	if(!ODF_arg->reading){
    e6ba:	687b      	ldr	r3, [r7, #4]
    e6bc:	7f5b      	ldrb	r3, [r3, #29]
    e6be:	2b00      	cmp	r3, #0
    e6c0:	d150      	bne.n	e764 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xd0>
		uint8_t NodeID;
		uint32_t HBconsTime;

		NodeID = (value >> 16U) & 0xFFU;
    e6c2:	6a3b      	ldr	r3, [r7, #32]
    e6c4:	0c1b      	lsrs	r3, r3, #16
    e6c6:	77fb      	strb	r3, [r7, #31]
		HBconsTime = value & 0xFFFFU;
    e6c8:	6a3b      	ldr	r3, [r7, #32]
    e6ca:	b29b      	uxth	r3, r3
    e6cc:	61bb      	str	r3, [r7, #24]

		if((value & 0xFF800000U) != 0){
    e6ce:	6a3b      	ldr	r3, [r7, #32]
    e6d0:	0ddb      	lsrs	r3, r3, #23
    e6d2:	05db      	lsls	r3, r3, #23
    e6d4:	2b00      	cmp	r3, #0
    e6d6:	d002      	beq.n	e6de <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0x4a>
			ret = CO_SDO_AB_PRAM_INCOMPAT;
    e6d8:	4b27      	ldr	r3, [pc, #156]	; (e778 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xe4>)
    e6da:	62fb      	str	r3, [r7, #44]	; 0x2c
    e6dc:	e036      	b.n	e74c <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb8>
		}
		else if((HBconsTime != 0) && (NodeID != 0)){
    e6de:	69bb      	ldr	r3, [r7, #24]
    e6e0:	2b00      	cmp	r3, #0
    e6e2:	d02f      	beq.n	e744 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb0>
    e6e4:	7ffb      	ldrb	r3, [r7, #31]
    e6e6:	2b00      	cmp	r3, #0
    e6e8:	d02c      	beq.n	e744 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb0>
			uint8_t i;
			/* there must not be more entries with same index and time different than zero */
			for(i = 0U; i<HBcons->numberOfMonitoredNodes; i++){
    e6ea:	2300      	movs	r3, #0
    e6ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    e6f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    e6f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    e6f6:	7b12      	ldrb	r2, [r2, #12]
    e6f8:	4293      	cmp	r3, r2
    e6fa:	da26      	bge.n	e74a <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb6>
				uint32_t objectCopy = HBcons->HBconsTime[i];
    e6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e6fe:	685a      	ldr	r2, [r3, #4]
    e700:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    e704:	009b      	lsls	r3, r3, #2
    e706:	4413      	add	r3, r2
    e708:	681b      	ldr	r3, [r3, #0]
    e70a:	617b      	str	r3, [r7, #20]
				uint8_t NodeIDObj = (objectCopy >> 16U) & 0xFFU;
    e70c:	697b      	ldr	r3, [r7, #20]
    e70e:	0c1b      	lsrs	r3, r3, #16
    e710:	74fb      	strb	r3, [r7, #19]
				uint32_t HBconsTimeObj = objectCopy & 0xFFFFU;
    e712:	697b      	ldr	r3, [r7, #20]
    e714:	b29b      	uxth	r3, r3
    e716:	60fb      	str	r3, [r7, #12]
				if(((ODF_arg->subIndex-1U) != i) && (HBconsTimeObj != 0) && (NodeID == NodeIDObj)){
    e718:	687b      	ldr	r3, [r7, #4]
    e71a:	7f1b      	ldrb	r3, [r3, #28]
    e71c:	1e5a      	subs	r2, r3, #1
    e71e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    e722:	429a      	cmp	r2, r3
    e724:	d008      	beq.n	e738 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xa4>
    e726:	68fb      	ldr	r3, [r7, #12]
    e728:	2b00      	cmp	r3, #0
    e72a:	d005      	beq.n	e738 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xa4>
    e72c:	7ffa      	ldrb	r2, [r7, #31]
    e72e:	7cfb      	ldrb	r3, [r7, #19]
    e730:	429a      	cmp	r2, r3
    e732:	d101      	bne.n	e738 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xa4>
					ret = CO_SDO_AB_PRAM_INCOMPAT;
    e734:	4b10      	ldr	r3, [pc, #64]	; (e778 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xe4>)
    e736:	62fb      	str	r3, [r7, #44]	; 0x2c
			for(i = 0U; i<HBcons->numberOfMonitoredNodes; i++){
    e738:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    e73c:	3301      	adds	r3, #1
    e73e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    e742:	e7d5      	b.n	e6f0 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0x5c>
				}
			}
		}
		else{
			ret = CO_SDO_AB_NONE;
    e744:	2300      	movs	r3, #0
    e746:	62fb      	str	r3, [r7, #44]	; 0x2c
    e748:	e000      	b.n	e74c <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb8>
			}
    e74a:	bf00      	nop
		}

		/* Configure */
		if(ret == CO_SDO_AB_NONE){
    e74c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e74e:	2b00      	cmp	r3, #0
    e750:	d108      	bne.n	e764 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xd0>
			CO_HBcons_monitoredNodeConfig(HBcons, ODF_arg->subIndex-1U, value);
    e752:	687b      	ldr	r3, [r7, #4]
    e754:	7f1b      	ldrb	r3, [r3, #28]
    e756:	3b01      	subs	r3, #1
    e758:	b2db      	uxtb	r3, r3
    e75a:	6a3a      	ldr	r2, [r7, #32]
    e75c:	4619      	mov	r1, r3
    e75e:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e760:	4b06      	ldr	r3, [pc, #24]	; (e77c <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xe8>)
    e762:	4798      	blx	r3
		}
	}

	return ret;
    e764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
    e766:	4618      	mov	r0, r3
    e768:	3730      	adds	r7, #48	; 0x30
    e76a:	46bd      	mov	sp, r7
    e76c:	bd80      	pop	{r7, pc}
    e76e:	bf00      	nop
    e770:	20001934 	.word	0x20001934
    e774:	00010521 	.word	0x00010521
    e778:	06040043 	.word	0x06040043
    e77c:	0000e5f5 	.word	0x0000e5f5

0000e780 <_ZN20CO_HB_Consumer_ClassC1Ev>:


// default constructor
CO_HB_Consumer_Class::CO_HB_Consumer_Class()
    e780:	b480      	push	{r7}
    e782:	b083      	sub	sp, #12
    e784:	af00      	add	r7, sp, #0
    e786:	6078      	str	r0, [r7, #4]
{
} //CO_HB_Consumer_Class
    e788:	687b      	ldr	r3, [r7, #4]
    e78a:	4618      	mov	r0, r3
    e78c:	370c      	adds	r7, #12
    e78e:	46bd      	mov	sp, r7
    e790:	bc80      	pop	{r7}
    e792:	4770      	bx	lr

0000e794 <_ZN20CO_HB_Consumer_ClassD1Ev>:

// default destructor
CO_HB_Consumer_Class::~CO_HB_Consumer_Class()
    e794:	b480      	push	{r7}
    e796:	b083      	sub	sp, #12
    e798:	af00      	add	r7, sp, #0
    e79a:	6078      	str	r0, [r7, #4]
{
} //~CO_HB_Consumer_Class
    e79c:	687b      	ldr	r3, [r7, #4]
    e79e:	4618      	mov	r0, r3
    e7a0:	370c      	adds	r7, #12
    e7a2:	46bd      	mov	sp, r7
    e7a4:	bc80      	pop	{r7}
    e7a6:	4770      	bx	lr

0000e7a8 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm>:
const uint32_t          HBconsTime[],
CO_HBconsNode_t         monitoredNodes[],
uint8_t                 numberOfMonitoredNodes,
CO_CANmodule_t         *CANdevRx,
uint32_t                CANdevRxIdxStart)
{
    e7a8:	b590      	push	{r4, r7, lr}
    e7aa:	b089      	sub	sp, #36	; 0x24
    e7ac:	af02      	add	r7, sp, #8
    e7ae:	60f8      	str	r0, [r7, #12]
    e7b0:	60b9      	str	r1, [r7, #8]
    e7b2:	607a      	str	r2, [r7, #4]
    e7b4:	603b      	str	r3, [r7, #0]
	uint8_t i;

	/* verify arguments */
	if(HBcons==NULL || em==NULL || SDO==NULL || HBconsTime==NULL ||
    e7b6:	68bb      	ldr	r3, [r7, #8]
    e7b8:	2b00      	cmp	r3, #0
    e7ba:	d00e      	beq.n	e7da <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x32>
    e7bc:	687b      	ldr	r3, [r7, #4]
    e7be:	2b00      	cmp	r3, #0
    e7c0:	d00b      	beq.n	e7da <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x32>
    e7c2:	683b      	ldr	r3, [r7, #0]
    e7c4:	2b00      	cmp	r3, #0
    e7c6:	d008      	beq.n	e7da <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x32>
    e7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e7ca:	2b00      	cmp	r3, #0
    e7cc:	d005      	beq.n	e7da <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x32>
    e7ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e7d0:	2b00      	cmp	r3, #0
    e7d2:	d002      	beq.n	e7da <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x32>
	monitoredNodes==NULL || CANdevRx==NULL){
    e7d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e7d6:	2b00      	cmp	r3, #0
    e7d8:	d102      	bne.n	e7e0 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x38>
		return CO_ERROR_ILLEGAL_ARGUMENT;
    e7da:	f04f 33ff 	mov.w	r3, #4294967295
    e7de:	e039      	b.n	e854 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xac>
	}

	/* Configure object variables */
	HBcons->em = em;
    e7e0:	68bb      	ldr	r3, [r7, #8]
    e7e2:	687a      	ldr	r2, [r7, #4]
    e7e4:	601a      	str	r2, [r3, #0]
	HBcons->HBconsTime = HBconsTime;
    e7e6:	68bb      	ldr	r3, [r7, #8]
    e7e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    e7ea:	605a      	str	r2, [r3, #4]
	HBcons->monitoredNodes = monitoredNodes;
    e7ec:	68bb      	ldr	r3, [r7, #8]
    e7ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    e7f0:	609a      	str	r2, [r3, #8]
	HBcons->numberOfMonitoredNodes = numberOfMonitoredNodes;
    e7f2:	68bb      	ldr	r3, [r7, #8]
    e7f4:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
    e7f8:	731a      	strb	r2, [r3, #12]
	HBcons->allMonitoredOperational = 0;
    e7fa:	68bb      	ldr	r3, [r7, #8]
    e7fc:	2200      	movs	r2, #0
    e7fe:	735a      	strb	r2, [r3, #13]
	HBcons->CANdevRx = CANdevRx;
    e800:	68bb      	ldr	r3, [r7, #8]
    e802:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    e804:	611a      	str	r2, [r3, #16]
	HBcons->CANdevRxIdxStart = CANdevRxIdxStart;
    e806:	68bb      	ldr	r3, [r7, #8]
    e808:	6bba      	ldr	r2, [r7, #56]	; 0x38
    e80a:	615a      	str	r2, [r3, #20]

	for(i=0; i<HBcons->numberOfMonitoredNodes; i++)
    e80c:	2300      	movs	r3, #0
    e80e:	75fb      	strb	r3, [r7, #23]
    e810:	7dfb      	ldrb	r3, [r7, #23]
    e812:	68ba      	ldr	r2, [r7, #8]
    e814:	7b12      	ldrb	r2, [r2, #12]
    e816:	4293      	cmp	r3, r2
    e818:	da0e      	bge.n	e838 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x90>
	CO_HBcons_monitoredNodeConfig(HBcons, i, HBcons->HBconsTime[i]);
    e81a:	68bb      	ldr	r3, [r7, #8]
    e81c:	685a      	ldr	r2, [r3, #4]
    e81e:	7dfb      	ldrb	r3, [r7, #23]
    e820:	009b      	lsls	r3, r3, #2
    e822:	4413      	add	r3, r2
    e824:	681a      	ldr	r2, [r3, #0]
    e826:	7dfb      	ldrb	r3, [r7, #23]
    e828:	4619      	mov	r1, r3
    e82a:	68b8      	ldr	r0, [r7, #8]
    e82c:	4b0b      	ldr	r3, [pc, #44]	; (e85c <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xb4>)
    e82e:	4798      	blx	r3
	for(i=0; i<HBcons->numberOfMonitoredNodes; i++)
    e830:	7dfb      	ldrb	r3, [r7, #23]
    e832:	3301      	adds	r3, #1
    e834:	75fb      	strb	r3, [r7, #23]
    e836:	e7eb      	b.n	e810 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x68>

	/* Configure Object dictionary entry at index 0x1016 */
	ptrCODriverClass->CO_OD_configure( OD_H1016_CONSUMER_HB_TIME, CO_ODF_1016, (void*)HBcons, 0, 0);
    e838:	4b09      	ldr	r3, [pc, #36]	; (e860 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xb8>)
    e83a:	681b      	ldr	r3, [r3, #0]
    e83c:	1d18      	adds	r0, r3, #4
    e83e:	2300      	movs	r3, #0
    e840:	9301      	str	r3, [sp, #4]
    e842:	2300      	movs	r3, #0
    e844:	9300      	str	r3, [sp, #0]
    e846:	68bb      	ldr	r3, [r7, #8]
    e848:	4a06      	ldr	r2, [pc, #24]	; (e864 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xbc>)
    e84a:	f241 0116 	movw	r1, #4118	; 0x1016
    e84e:	4c06      	ldr	r4, [pc, #24]	; (e868 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xc0>)
    e850:	47a0      	blx	r4

	return CO_ERROR_NO;
    e852:	2300      	movs	r3, #0
}
    e854:	4618      	mov	r0, r3
    e856:	371c      	adds	r7, #28
    e858:	46bd      	mov	sp, r7
    e85a:	bd90      	pop	{r4, r7, pc}
    e85c:	0000e5f5 	.word	0x0000e5f5
    e860:	20001934 	.word	0x20001934
    e864:	0000e695 	.word	0x0000e695
    e868:	00010971 	.word	0x00010971

0000e86c <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm>:
/******************************************************************************/
void CO_HB_Consumer_Class::CO_HBconsumer_process(
CO_HBconsumer_t        *HBcons,
bool_t                  NMTisPreOrOperational,
uint32_t                timeDifference_ms)
{
    e86c:	b590      	push	{r4, r7, lr}
    e86e:	b089      	sub	sp, #36	; 0x24
    e870:	af02      	add	r7, sp, #8
    e872:	60f8      	str	r0, [r7, #12]
    e874:	60b9      	str	r1, [r7, #8]
    e876:	603b      	str	r3, [r7, #0]
    e878:	4613      	mov	r3, r2
    e87a:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	uint8_t AllMonitoredOperationalCopy;
	CO_HBconsNode_t *monitoredNode;

	AllMonitoredOperationalCopy = 5;
    e87c:	2305      	movs	r3, #5
    e87e:	75bb      	strb	r3, [r7, #22]
	monitoredNode = &HBcons->monitoredNodes[0];
    e880:	68bb      	ldr	r3, [r7, #8]
    e882:	689b      	ldr	r3, [r3, #8]
    e884:	613b      	str	r3, [r7, #16]

	if(NMTisPreOrOperational){
    e886:	79fb      	ldrb	r3, [r7, #7]
    e888:	2b00      	cmp	r3, #0
    e88a:	d060      	beq.n	e94e <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0xe2>
		for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
    e88c:	2300      	movs	r3, #0
    e88e:	75fb      	strb	r3, [r7, #23]
    e890:	7dfb      	ldrb	r3, [r7, #23]
    e892:	68ba      	ldr	r2, [r7, #8]
    e894:	7b12      	ldrb	r2, [r2, #12]
    e896:	4293      	cmp	r3, r2
    e898:	da72      	bge.n	e980 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x114>
			if(monitoredNode->time){/* is node monitored */
    e89a:	693b      	ldr	r3, [r7, #16]
    e89c:	689b      	ldr	r3, [r3, #8]
    e89e:	2b00      	cmp	r3, #0
    e8a0:	d04e      	beq.n	e940 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0xd4>
				/* Verify if new Consumer Heartbeat message received */
				if(monitoredNode->CANrxNew){
    e8a2:	693b      	ldr	r3, [r7, #16]
    e8a4:	7b1b      	ldrb	r3, [r3, #12]
    e8a6:	2b00      	cmp	r3, #0
    e8a8:	d00e      	beq.n	e8c8 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x5c>
					if(monitoredNode->NMTstate){
    e8aa:	693b      	ldr	r3, [r7, #16]
    e8ac:	781b      	ldrb	r3, [r3, #0]
    e8ae:	2b00      	cmp	r3, #0
    e8b0:	d007      	beq.n	e8c2 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x56>
						/* not a bootup message */
						monitoredNode->monStarted = true;
    e8b2:	693b      	ldr	r3, [r7, #16]
    e8b4:	2201      	movs	r2, #1
    e8b6:	705a      	strb	r2, [r3, #1]
						monitoredNode->timeoutTimer = 0;  /* reset timer */
    e8b8:	693b      	ldr	r3, [r7, #16]
    e8ba:	2200      	movs	r2, #0
    e8bc:	605a      	str	r2, [r3, #4]
						timeDifference_ms = 0;
    e8be:	2300      	movs	r3, #0
    e8c0:	603b      	str	r3, [r7, #0]
					}
					monitoredNode->CANrxNew = false;
    e8c2:	693b      	ldr	r3, [r7, #16]
    e8c4:	2200      	movs	r2, #0
    e8c6:	731a      	strb	r2, [r3, #12]
				}
				/* Verify timeout */
				if(monitoredNode->timeoutTimer < monitoredNode->time) monitoredNode->timeoutTimer += timeDifference_ms;
    e8c8:	693b      	ldr	r3, [r7, #16]
    e8ca:	685a      	ldr	r2, [r3, #4]
    e8cc:	693b      	ldr	r3, [r7, #16]
    e8ce:	689b      	ldr	r3, [r3, #8]
    e8d0:	429a      	cmp	r2, r3
    e8d2:	d205      	bcs.n	e8e0 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x74>
    e8d4:	693b      	ldr	r3, [r7, #16]
    e8d6:	685a      	ldr	r2, [r3, #4]
    e8d8:	683b      	ldr	r3, [r7, #0]
    e8da:	441a      	add	r2, r3
    e8dc:	693b      	ldr	r3, [r7, #16]
    e8de:	605a      	str	r2, [r3, #4]

				if(monitoredNode->monStarted){
    e8e0:	693b      	ldr	r3, [r7, #16]
    e8e2:	785b      	ldrb	r3, [r3, #1]
    e8e4:	2b00      	cmp	r3, #0
    e8e6:	d025      	beq.n	e934 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0xc8>
					if(monitoredNode->timeoutTimer >= monitoredNode->time){
    e8e8:	693b      	ldr	r3, [r7, #16]
    e8ea:	685a      	ldr	r2, [r3, #4]
    e8ec:	693b      	ldr	r3, [r7, #16]
    e8ee:	689b      	ldr	r3, [r3, #8]
    e8f0:	429a      	cmp	r2, r3
    e8f2:	d30f      	bcc.n	e914 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0xa8>
						ptrCODriverClass->EM_ErrorReport(HBcons->em, CO_EM_HEARTBEAT_CONSUMER, CO_EMC_HEARTBEAT, i);
    e8f4:	4b26      	ldr	r3, [pc, #152]	; (e990 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x124>)
    e8f6:	681b      	ldr	r3, [r3, #0]
    e8f8:	1d18      	adds	r0, r3, #4
    e8fa:	68bb      	ldr	r3, [r7, #8]
    e8fc:	6819      	ldr	r1, [r3, #0]
    e8fe:	7dfb      	ldrb	r3, [r7, #23]
    e900:	9300      	str	r3, [sp, #0]
    e902:	f248 1330 	movw	r3, #33072	; 0x8130
    e906:	221b      	movs	r2, #27
    e908:	4c22      	ldr	r4, [pc, #136]	; (e994 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x128>)
    e90a:	47a0      	blx	r4
						monitoredNode->NMTstate = 0;
    e90c:	693b      	ldr	r3, [r7, #16]
    e90e:	2200      	movs	r2, #0
    e910:	701a      	strb	r2, [r3, #0]
    e912:	e00f      	b.n	e934 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0xc8>
					}
					else if(monitoredNode->NMTstate == 0){
    e914:	693b      	ldr	r3, [r7, #16]
    e916:	781b      	ldrb	r3, [r3, #0]
    e918:	2b00      	cmp	r3, #0
    e91a:	d10b      	bne.n	e934 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0xc8>
						/* there was a bootup message */
						ptrCODriverClass->EM_ErrorReport(HBcons->em, CO_EM_HB_CONSUMER_REMOTE_RESET, CO_EMC_HEARTBEAT, i);
    e91c:	4b1c      	ldr	r3, [pc, #112]	; (e990 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x124>)
    e91e:	681b      	ldr	r3, [r3, #0]
    e920:	1d18      	adds	r0, r3, #4
    e922:	68bb      	ldr	r3, [r7, #8]
    e924:	6819      	ldr	r1, [r3, #0]
    e926:	7dfb      	ldrb	r3, [r7, #23]
    e928:	9300      	str	r3, [sp, #0]
    e92a:	f248 1330 	movw	r3, #33072	; 0x8130
    e92e:	221c      	movs	r2, #28
    e930:	4c18      	ldr	r4, [pc, #96]	; (e994 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x128>)
    e932:	47a0      	blx	r4
					}
				}
				if(monitoredNode->NMTstate != CO_NMT_OPERATIONAL)
    e934:	693b      	ldr	r3, [r7, #16]
    e936:	781b      	ldrb	r3, [r3, #0]
    e938:	2b05      	cmp	r3, #5
    e93a:	d001      	beq.n	e940 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0xd4>
				AllMonitoredOperationalCopy = 0;
    e93c:	2300      	movs	r3, #0
    e93e:	75bb      	strb	r3, [r7, #22]
			}
			monitoredNode++;
    e940:	693b      	ldr	r3, [r7, #16]
    e942:	3310      	adds	r3, #16
    e944:	613b      	str	r3, [r7, #16]
		for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
    e946:	7dfb      	ldrb	r3, [r7, #23]
    e948:	3301      	adds	r3, #1
    e94a:	75fb      	strb	r3, [r7, #23]
    e94c:	e7a0      	b.n	e890 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x24>
		}
	}
	else{ /* not in (pre)operational state */
		for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
    e94e:	2300      	movs	r3, #0
    e950:	75fb      	strb	r3, [r7, #23]
    e952:	7dfb      	ldrb	r3, [r7, #23]
    e954:	68ba      	ldr	r2, [r7, #8]
    e956:	7b12      	ldrb	r2, [r2, #12]
    e958:	4293      	cmp	r3, r2
    e95a:	da0f      	bge.n	e97c <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x110>
			monitoredNode->NMTstate = 0;
    e95c:	693b      	ldr	r3, [r7, #16]
    e95e:	2200      	movs	r2, #0
    e960:	701a      	strb	r2, [r3, #0]
			monitoredNode->CANrxNew = false;
    e962:	693b      	ldr	r3, [r7, #16]
    e964:	2200      	movs	r2, #0
    e966:	731a      	strb	r2, [r3, #12]
			monitoredNode->monStarted = false;
    e968:	693b      	ldr	r3, [r7, #16]
    e96a:	2200      	movs	r2, #0
    e96c:	705a      	strb	r2, [r3, #1]
			monitoredNode++;
    e96e:	693b      	ldr	r3, [r7, #16]
    e970:	3310      	adds	r3, #16
    e972:	613b      	str	r3, [r7, #16]
		for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
    e974:	7dfb      	ldrb	r3, [r7, #23]
    e976:	3301      	adds	r3, #1
    e978:	75fb      	strb	r3, [r7, #23]
    e97a:	e7ea      	b.n	e952 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0xe6>
		}
		AllMonitoredOperationalCopy = 0;
    e97c:	2300      	movs	r3, #0
    e97e:	75bb      	strb	r3, [r7, #22]
	}
	HBcons->allMonitoredOperational = AllMonitoredOperationalCopy;
    e980:	68bb      	ldr	r3, [r7, #8]
    e982:	7dba      	ldrb	r2, [r7, #22]
    e984:	735a      	strb	r2, [r3, #13]
}
    e986:	bf00      	nop
    e988:	371c      	adds	r7, #28
    e98a:	46bd      	mov	sp, r7
    e98c:	bd90      	pop	{r4, r7, pc}
    e98e:	bf00      	nop
    e990:	20001934 	.word	0x20001934
    e994:	0000e2cd 	.word	0x0000e2cd

0000e998 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t>:
#include "CO_NMT_Heartbeat_Class.h"
#include "CO_Driver_Class.h"



static void CO_NMT_receive(void *object, const CO_CANrxMsg_t *msg){
    e998:	b580      	push	{r7, lr}
    e99a:	b084      	sub	sp, #16
    e99c:	af00      	add	r7, sp, #0
    e99e:	6078      	str	r0, [r7, #4]
    e9a0:	6039      	str	r1, [r7, #0]
    CO_NMT_t *NMT;
    uint8_t nodeId;

    NMT = (CO_NMT_t*)object;   /* this is the correct pointer type of the first argument */
    e9a2:	687b      	ldr	r3, [r7, #4]
    e9a4:	60fb      	str	r3, [r7, #12]

    nodeId = msg->data[1];
    e9a6:	683b      	ldr	r3, [r7, #0]
    e9a8:	7d9b      	ldrb	r3, [r3, #22]
    e9aa:	72fb      	strb	r3, [r7, #11]

    if((msg->DLC == 2) && ((nodeId == 0) || (nodeId == NMT->nodeId))){
    e9ac:	683b      	ldr	r3, [r7, #0]
    e9ae:	7d1b      	ldrb	r3, [r3, #20]
    e9b0:	2b02      	cmp	r3, #2
    e9b2:	d146      	bne.n	ea42 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0xaa>
    e9b4:	7afb      	ldrb	r3, [r7, #11]
    e9b6:	2b00      	cmp	r3, #0
    e9b8:	d004      	beq.n	e9c4 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x2c>
    e9ba:	68fb      	ldr	r3, [r7, #12]
    e9bc:	7a9b      	ldrb	r3, [r3, #10]
    e9be:	7afa      	ldrb	r2, [r7, #11]
    e9c0:	429a      	cmp	r2, r3
    e9c2:	d13e      	bne.n	ea42 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0xaa>
        uint8_t command = msg->data[0];
    e9c4:	683b      	ldr	r3, [r7, #0]
    e9c6:	7d5b      	ldrb	r3, [r3, #21]
    e9c8:	72bb      	strb	r3, [r7, #10]
        uint8_t currentOperatingState = NMT->operatingState;
    e9ca:	68fb      	ldr	r3, [r7, #12]
    e9cc:	781b      	ldrb	r3, [r3, #0]
    e9ce:	727b      	strb	r3, [r7, #9]

        switch(command){
    e9d0:	7abb      	ldrb	r3, [r7, #10]
    e9d2:	2b80      	cmp	r3, #128	; 0x80
    e9d4:	d019      	beq.n	ea0a <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x72>
    e9d6:	2b80      	cmp	r3, #128	; 0x80
    e9d8:	dc04      	bgt.n	e9e4 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x4c>
    e9da:	2b01      	cmp	r3, #1
    e9dc:	d007      	beq.n	e9ee <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x56>
    e9de:	2b02      	cmp	r3, #2
    e9e0:	d00f      	beq.n	ea02 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x6a>
    e9e2:	e01f      	b.n	ea24 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
    e9e4:	2b81      	cmp	r3, #129	; 0x81
    e9e6:	d014      	beq.n	ea12 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x7a>
    e9e8:	2b82      	cmp	r3, #130	; 0x82
    e9ea:	d016      	beq.n	ea1a <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x82>
    e9ec:	e01a      	b.n	ea24 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
            case CO_NMT_ENTER_OPERATIONAL:
                if((*NMT->emPr->errorRegister) == 0U){
    e9ee:	68fb      	ldr	r3, [r7, #12]
    e9f0:	695b      	ldr	r3, [r3, #20]
    e9f2:	681b      	ldr	r3, [r3, #0]
    e9f4:	781b      	ldrb	r3, [r3, #0]
    e9f6:	2b00      	cmp	r3, #0
    e9f8:	d113      	bne.n	ea22 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8a>
                    NMT->operatingState = CO_NMT_OPERATIONAL;
    e9fa:	68fb      	ldr	r3, [r7, #12]
    e9fc:	2205      	movs	r2, #5
    e9fe:	701a      	strb	r2, [r3, #0]
                }
                break;
    ea00:	e00f      	b.n	ea22 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8a>
            case CO_NMT_ENTER_STOPPED:
                NMT->operatingState = CO_NMT_STOPPED;
    ea02:	68fb      	ldr	r3, [r7, #12]
    ea04:	2204      	movs	r2, #4
    ea06:	701a      	strb	r2, [r3, #0]
                break;
    ea08:	e00c      	b.n	ea24 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
            case CO_NMT_ENTER_PRE_OPERATIONAL:
                NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
    ea0a:	68fb      	ldr	r3, [r7, #12]
    ea0c:	227f      	movs	r2, #127	; 0x7f
    ea0e:	701a      	strb	r2, [r3, #0]
                break;
    ea10:	e008      	b.n	ea24 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
            case CO_NMT_RESET_NODE:
                NMT->resetCommand = CO_RESET_APP;
    ea12:	68fb      	ldr	r3, [r7, #12]
    ea14:	2202      	movs	r2, #2
    ea16:	725a      	strb	r2, [r3, #9]
                break;
    ea18:	e004      	b.n	ea24 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
            case CO_NMT_RESET_COMMUNICATION:
                NMT->resetCommand = CO_RESET_COMM;
    ea1a:	68fb      	ldr	r3, [r7, #12]
    ea1c:	2201      	movs	r2, #1
    ea1e:	725a      	strb	r2, [r3, #9]
                break;
    ea20:	e000      	b.n	ea24 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
                break;
    ea22:	bf00      	nop
        }

        if(NMT->ptrState!=NULL && currentOperatingState!=NMT->operatingState){
    ea24:	68fb      	ldr	r3, [r7, #12]
    ea26:	69db      	ldr	r3, [r3, #28]
    ea28:	2b00      	cmp	r3, #0
    ea2a:	d00a      	beq.n	ea42 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0xaa>
    ea2c:	68fb      	ldr	r3, [r7, #12]
    ea2e:	781b      	ldrb	r3, [r3, #0]
    ea30:	7a7a      	ldrb	r2, [r7, #9]
    ea32:	429a      	cmp	r2, r3
    ea34:	d005      	beq.n	ea42 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0xaa>
            NMT->ptrState((CO_NMT_internalState_t)NMT->operatingState);
    ea36:	68fb      	ldr	r3, [r7, #12]
    ea38:	69db      	ldr	r3, [r3, #28]
    ea3a:	68fa      	ldr	r2, [r7, #12]
    ea3c:	7812      	ldrb	r2, [r2, #0]
    ea3e:	4610      	mov	r0, r2
    ea40:	4798      	blx	r3
        }
    }
}
    ea42:	bf00      	nop
    ea44:	3710      	adds	r7, #16
    ea46:	46bd      	mov	sp, r7
    ea48:	bd80      	pop	{r7, pc}

0000ea4a <_ZN22CO_NMT_Heartbeat_ClassC1Ev>:
// default constructor
CO_NMT_Heartbeat_Class::CO_NMT_Heartbeat_Class()
    ea4a:	b480      	push	{r7}
    ea4c:	b083      	sub	sp, #12
    ea4e:	af00      	add	r7, sp, #0
    ea50:	6078      	str	r0, [r7, #4]
{
} //CO_NMT_Heartbeat
    ea52:	687b      	ldr	r3, [r7, #4]
    ea54:	4618      	mov	r0, r3
    ea56:	370c      	adds	r7, #12
    ea58:	46bd      	mov	sp, r7
    ea5a:	bc80      	pop	{r7}
    ea5c:	4770      	bx	lr

0000ea5e <_ZN22CO_NMT_Heartbeat_ClassD1Ev>:

// default destructor
CO_NMT_Heartbeat_Class::~CO_NMT_Heartbeat_Class()
    ea5e:	b480      	push	{r7}
    ea60:	b083      	sub	sp, #12
    ea62:	af00      	add	r7, sp, #0
    ea64:	6078      	str	r0, [r7, #4]
{
} //~CO_NMT_Heartbeat
    ea66:	687b      	ldr	r3, [r7, #4]
    ea68:	4618      	mov	r0, r3
    ea6a:	370c      	adds	r7, #12
    ea6c:	46bd      	mov	sp, r7
    ea6e:	bc80      	pop	{r7}
    ea70:	4770      	bx	lr
	...

0000ea74 <_ZN22CO_NMT_Heartbeat_Class11CO_NMT_initEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm>:
        uint32_t                NMT_rxIdx,
        uint32_t                CANidRxNMT,
        CO_CANmodule_t         *HB_CANdev,
        uint32_t                HB_txIdx,
        uint32_t                CANidTxHB)
{
    ea74:	b5b0      	push	{r4, r5, r7, lr}
    ea76:	b088      	sub	sp, #32
    ea78:	af04      	add	r7, sp, #16
    ea7a:	60f8      	str	r0, [r7, #12]
    ea7c:	60b9      	str	r1, [r7, #8]
    ea7e:	607a      	str	r2, [r7, #4]
    ea80:	70fb      	strb	r3, [r7, #3]
    /* verify arguments */
    if(NMT_Init==NULL || emPr==NULL || NMT_CANdev==NULL || HB_CANdev==NULL){
    ea82:	68bb      	ldr	r3, [r7, #8]
    ea84:	2b00      	cmp	r3, #0
    ea86:	d008      	beq.n	ea9a <_ZN22CO_NMT_Heartbeat_Class11CO_NMT_initEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x26>
    ea88:	687b      	ldr	r3, [r7, #4]
    ea8a:	2b00      	cmp	r3, #0
    ea8c:	d005      	beq.n	ea9a <_ZN22CO_NMT_Heartbeat_Class11CO_NMT_initEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x26>
    ea8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ea90:	2b00      	cmp	r3, #0
    ea92:	d002      	beq.n	ea9a <_ZN22CO_NMT_Heartbeat_Class11CO_NMT_initEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x26>
    ea94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ea96:	2b00      	cmp	r3, #0
    ea98:	d102      	bne.n	eaa0 <_ZN22CO_NMT_Heartbeat_Class11CO_NMT_initEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x2c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    ea9a:	f04f 33ff 	mov.w	r3, #4294967295
    ea9e:	e062      	b.n	eb66 <_ZN22CO_NMT_Heartbeat_Class11CO_NMT_initEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xf2>
    }else{
		NMT=NMT_Init;
    eaa0:	68fb      	ldr	r3, [r7, #12]
    eaa2:	68ba      	ldr	r2, [r7, #8]
    eaa4:	601a      	str	r2, [r3, #0]
	}

    /* blinking bytes */
    NMT->LEDflickering          = 0;
    eaa6:	68fb      	ldr	r3, [r7, #12]
    eaa8:	681b      	ldr	r3, [r3, #0]
    eaaa:	2200      	movs	r2, #0
    eaac:	705a      	strb	r2, [r3, #1]
    NMT->LEDblinking            = 0;
    eaae:	68fb      	ldr	r3, [r7, #12]
    eab0:	681b      	ldr	r3, [r3, #0]
    eab2:	2200      	movs	r2, #0
    eab4:	709a      	strb	r2, [r3, #2]
    NMT->LEDsingleFlash         = 0;
    eab6:	68fb      	ldr	r3, [r7, #12]
    eab8:	681b      	ldr	r3, [r3, #0]
    eaba:	2200      	movs	r2, #0
    eabc:	70da      	strb	r2, [r3, #3]
    NMT->LEDdoubleFlash         = 0;
    eabe:	68fb      	ldr	r3, [r7, #12]
    eac0:	681b      	ldr	r3, [r3, #0]
    eac2:	2200      	movs	r2, #0
    eac4:	711a      	strb	r2, [r3, #4]
    NMT->LEDtripleFlash         = 0;
    eac6:	68fb      	ldr	r3, [r7, #12]
    eac8:	681b      	ldr	r3, [r3, #0]
    eaca:	2200      	movs	r2, #0
    eacc:	715a      	strb	r2, [r3, #5]
    NMT->LEDquadrupleFlash      = 0;
    eace:	68fb      	ldr	r3, [r7, #12]
    ead0:	681b      	ldr	r3, [r3, #0]
    ead2:	2200      	movs	r2, #0
    ead4:	719a      	strb	r2, [r3, #6]

    /* Configure object variables */
    NMT->operatingState         = CO_NMT_INITIALIZING;
    ead6:	68fb      	ldr	r3, [r7, #12]
    ead8:	681b      	ldr	r3, [r3, #0]
    eada:	2200      	movs	r2, #0
    eadc:	701a      	strb	r2, [r3, #0]
    NMT->LEDgreenRun            = -1;
    eade:	68fb      	ldr	r3, [r7, #12]
    eae0:	681b      	ldr	r3, [r3, #0]
    eae2:	22ff      	movs	r2, #255	; 0xff
    eae4:	71da      	strb	r2, [r3, #7]
    NMT->LEDredError            = 1;
    eae6:	68fb      	ldr	r3, [r7, #12]
    eae8:	681b      	ldr	r3, [r3, #0]
    eaea:	2201      	movs	r2, #1
    eaec:	721a      	strb	r2, [r3, #8]
    NMT->nodeId                 = nodeId;
    eaee:	68fb      	ldr	r3, [r7, #12]
    eaf0:	681b      	ldr	r3, [r3, #0]
    eaf2:	78fa      	ldrb	r2, [r7, #3]
    eaf4:	729a      	strb	r2, [r3, #10]
    NMT->firstHBTime            = firstHBTime;
    eaf6:	68fb      	ldr	r3, [r7, #12]
    eaf8:	681b      	ldr	r3, [r3, #0]
    eafa:	6a3a      	ldr	r2, [r7, #32]
    eafc:	611a      	str	r2, [r3, #16]
    NMT->resetCommand           = 0;
    eafe:	68fb      	ldr	r3, [r7, #12]
    eb00:	681b      	ldr	r3, [r3, #0]
    eb02:	2200      	movs	r2, #0
    eb04:	725a      	strb	r2, [r3, #9]
    NMT->HBproducerTimer        = 0xFFFF;
    eb06:	68fb      	ldr	r3, [r7, #12]
    eb08:	681b      	ldr	r3, [r3, #0]
    eb0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    eb0e:	60da      	str	r2, [r3, #12]
    NMT->emPr                   = emPr;
    eb10:	68fb      	ldr	r3, [r7, #12]
    eb12:	681b      	ldr	r3, [r3, #0]
    eb14:	687a      	ldr	r2, [r7, #4]
    eb16:	615a      	str	r2, [r3, #20]
    NMT->ptrState             = NULL;
    eb18:	68fb      	ldr	r3, [r7, #12]
    eb1a:	681b      	ldr	r3, [r3, #0]
    eb1c:	2200      	movs	r2, #0
    eb1e:	61da      	str	r2, [r3, #28]

    /* configure NMT CAN reception */
   ptrCODriverClass->CAN_Rx_BufferInit(
    eb20:	4b13      	ldr	r3, [pc, #76]	; (eb70 <_ZN22CO_NMT_Heartbeat_Class11CO_NMT_initEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    eb22:	6818      	ldr	r0, [r3, #0]
      
            NMT_rxIdx,          /* rx buffer index */
            CANidRxNMT,         /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)NMT,         /* object passed to receive function */
    eb24:	68fb      	ldr	r3, [r7, #12]
    eb26:	681b      	ldr	r3, [r3, #0]
            CO_NMT_receive);    /* this function will process received message */
    eb28:	4a12      	ldr	r2, [pc, #72]	; (eb74 <_ZN22CO_NMT_Heartbeat_Class11CO_NMT_initEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x100>)
    eb2a:	9202      	str	r2, [sp, #8]
    eb2c:	9301      	str	r3, [sp, #4]
    eb2e:	2300      	movs	r3, #0
    eb30:	9300      	str	r3, [sp, #0]
    eb32:	f240 73ff 	movw	r3, #2047	; 0x7ff
    eb36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    eb38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    eb3a:	4c0f      	ldr	r4, [pc, #60]	; (eb78 <_ZN22CO_NMT_Heartbeat_Class11CO_NMT_initEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x104>)
    eb3c:	47a0      	blx	r4

    /* configure HB CAN transmission */
    NMT->HB_CANdev = HB_CANdev;
    eb3e:	68fb      	ldr	r3, [r7, #12]
    eb40:	681b      	ldr	r3, [r3, #0]
    eb42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    eb44:	619a      	str	r2, [r3, #24]
    NMT->HB_TXbuff =ptrCODriverClass->CAN_Tx_BufferInit(
    eb46:	68fb      	ldr	r3, [r7, #12]
    eb48:	681c      	ldr	r4, [r3, #0]
    eb4a:	4b09      	ldr	r3, [pc, #36]	; (eb70 <_ZN22CO_NMT_Heartbeat_Class11CO_NMT_initEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    eb4c:	6818      	ldr	r0, [r3, #0]
    eb4e:	2300      	movs	r3, #0
    eb50:	9301      	str	r3, [sp, #4]
    eb52:	2301      	movs	r3, #1
    eb54:	9300      	str	r3, [sp, #0]
    eb56:	2300      	movs	r3, #0
    eb58:	6bba      	ldr	r2, [r7, #56]	; 0x38
    eb5a:	6b79      	ldr	r1, [r7, #52]	; 0x34
    eb5c:	4d07      	ldr	r5, [pc, #28]	; (eb7c <_ZN22CO_NMT_Heartbeat_Class11CO_NMT_initEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x108>)
    eb5e:	47a8      	blx	r5
    eb60:	4603      	mov	r3, r0
    eb62:	6223      	str	r3, [r4, #32]
            CANidTxHB,          /* CAN identifier */
            0,                  /* rtr */
            1,                  /* number of data bytes */
            0);                 /* synchronous message flag bit */

    return CO_ERROR_NO;
    eb64:	2300      	movs	r3, #0
}
    eb66:	4618      	mov	r0, r3
    eb68:	3710      	adds	r7, #16
    eb6a:	46bd      	mov	sp, r7
    eb6c:	bdb0      	pop	{r4, r5, r7, pc}
    eb6e:	bf00      	nop
    eb70:	20001934 	.word	0x20001934
    eb74:	0000e999 	.word	0x0000e999
    eb78:	0000d6dd 	.word	0x0000d6dd
    eb7c:	0000d7d9 	.word	0x0000d7d9

0000eb80 <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv>:
    }
}


/******************************************************************************/
void CO_NMT_Heartbeat_Class::CO_NMT_blinkingProcess50ms(void){
    eb80:	b480      	push	{r7}
    eb82:	b083      	sub	sp, #12
    eb84:	af00      	add	r7, sp, #0
    eb86:	6078      	str	r0, [r7, #4]

    if(++NMT->LEDflickering >= 1) NMT->LEDflickering = -1;
    eb88:	687b      	ldr	r3, [r7, #4]
    eb8a:	681b      	ldr	r3, [r3, #0]
    eb8c:	f993 2001 	ldrsb.w	r2, [r3, #1]
    eb90:	b2d2      	uxtb	r2, r2
    eb92:	3201      	adds	r2, #1
    eb94:	b2d2      	uxtb	r2, r2
    eb96:	b252      	sxtb	r2, r2
    eb98:	705a      	strb	r2, [r3, #1]
    eb9a:	f993 3001 	ldrsb.w	r3, [r3, #1]
    eb9e:	2b00      	cmp	r3, #0
    eba0:	bfcc      	ite	gt
    eba2:	2301      	movgt	r3, #1
    eba4:	2300      	movle	r3, #0
    eba6:	b2db      	uxtb	r3, r3
    eba8:	2b00      	cmp	r3, #0
    ebaa:	d003      	beq.n	ebb4 <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x34>
    ebac:	687b      	ldr	r3, [r7, #4]
    ebae:	681b      	ldr	r3, [r3, #0]
    ebb0:	22ff      	movs	r2, #255	; 0xff
    ebb2:	705a      	strb	r2, [r3, #1]

    if(++NMT->LEDblinking >= 4) NMT->LEDblinking = -4;
    ebb4:	687b      	ldr	r3, [r7, #4]
    ebb6:	681b      	ldr	r3, [r3, #0]
    ebb8:	f993 2002 	ldrsb.w	r2, [r3, #2]
    ebbc:	b2d2      	uxtb	r2, r2
    ebbe:	3201      	adds	r2, #1
    ebc0:	b2d2      	uxtb	r2, r2
    ebc2:	b252      	sxtb	r2, r2
    ebc4:	709a      	strb	r2, [r3, #2]
    ebc6:	f993 3002 	ldrsb.w	r3, [r3, #2]
    ebca:	2b03      	cmp	r3, #3
    ebcc:	bfcc      	ite	gt
    ebce:	2301      	movgt	r3, #1
    ebd0:	2300      	movle	r3, #0
    ebd2:	b2db      	uxtb	r3, r3
    ebd4:	2b00      	cmp	r3, #0
    ebd6:	d003      	beq.n	ebe0 <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x60>
    ebd8:	687b      	ldr	r3, [r7, #4]
    ebda:	681b      	ldr	r3, [r3, #0]
    ebdc:	22fc      	movs	r2, #252	; 0xfc
    ebde:	709a      	strb	r2, [r3, #2]

    if(++NMT->LEDsingleFlash >= 4) NMT->LEDsingleFlash = -20;
    ebe0:	687b      	ldr	r3, [r7, #4]
    ebe2:	681b      	ldr	r3, [r3, #0]
    ebe4:	f993 2003 	ldrsb.w	r2, [r3, #3]
    ebe8:	b2d2      	uxtb	r2, r2
    ebea:	3201      	adds	r2, #1
    ebec:	b2d2      	uxtb	r2, r2
    ebee:	b252      	sxtb	r2, r2
    ebf0:	70da      	strb	r2, [r3, #3]
    ebf2:	f993 3003 	ldrsb.w	r3, [r3, #3]
    ebf6:	2b03      	cmp	r3, #3
    ebf8:	bfcc      	ite	gt
    ebfa:	2301      	movgt	r3, #1
    ebfc:	2300      	movle	r3, #0
    ebfe:	b2db      	uxtb	r3, r3
    ec00:	2b00      	cmp	r3, #0
    ec02:	d003      	beq.n	ec0c <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x8c>
    ec04:	687b      	ldr	r3, [r7, #4]
    ec06:	681b      	ldr	r3, [r3, #0]
    ec08:	22ec      	movs	r2, #236	; 0xec
    ec0a:	70da      	strb	r2, [r3, #3]

    switch(++NMT->LEDdoubleFlash){
    ec0c:	687b      	ldr	r3, [r7, #4]
    ec0e:	681b      	ldr	r3, [r3, #0]
    ec10:	f993 2004 	ldrsb.w	r2, [r3, #4]
    ec14:	b2d2      	uxtb	r2, r2
    ec16:	3201      	adds	r2, #1
    ec18:	b2d2      	uxtb	r2, r2
    ec1a:	b252      	sxtb	r2, r2
    ec1c:	711a      	strb	r2, [r3, #4]
    ec1e:	f993 3004 	ldrsb.w	r3, [r3, #4]
    ec22:	2b04      	cmp	r3, #4
    ec24:	d005      	beq.n	ec32 <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0xb2>
    ec26:	2b68      	cmp	r3, #104	; 0x68
    ec28:	d00d      	beq.n	ec46 <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0xc6>
    ec2a:	f113 0f64 	cmn.w	r3, #100	; 0x64
    ec2e:	d005      	beq.n	ec3c <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0xbc>
    ec30:	e00e      	b.n	ec50 <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0xd0>
        case    4:  NMT->LEDdoubleFlash = -104; break;
    ec32:	687b      	ldr	r3, [r7, #4]
    ec34:	681b      	ldr	r3, [r3, #0]
    ec36:	2298      	movs	r2, #152	; 0x98
    ec38:	711a      	strb	r2, [r3, #4]
    ec3a:	e009      	b.n	ec50 <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0xd0>
        case -100:  NMT->LEDdoubleFlash =  100; break;
    ec3c:	687b      	ldr	r3, [r7, #4]
    ec3e:	681b      	ldr	r3, [r3, #0]
    ec40:	2264      	movs	r2, #100	; 0x64
    ec42:	711a      	strb	r2, [r3, #4]
    ec44:	e004      	b.n	ec50 <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0xd0>
        case  104:  NMT->LEDdoubleFlash =  -20; break;
    ec46:	687b      	ldr	r3, [r7, #4]
    ec48:	681b      	ldr	r3, [r3, #0]
    ec4a:	22ec      	movs	r2, #236	; 0xec
    ec4c:	711a      	strb	r2, [r3, #4]
    ec4e:	bf00      	nop
    }

    switch(++NMT->LEDtripleFlash){
    ec50:	687b      	ldr	r3, [r7, #4]
    ec52:	681b      	ldr	r3, [r3, #0]
    ec54:	f993 2005 	ldrsb.w	r2, [r3, #5]
    ec58:	b2d2      	uxtb	r2, r2
    ec5a:	3201      	adds	r2, #1
    ec5c:	b2d2      	uxtb	r2, r2
    ec5e:	b252      	sxtb	r2, r2
    ec60:	715a      	strb	r2, [r3, #5]
    ec62:	f993 3005 	ldrsb.w	r3, [r3, #5]
    ec66:	2b04      	cmp	r3, #4
    ec68:	d00d      	beq.n	ec86 <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x106>
    ec6a:	2b04      	cmp	r3, #4
    ec6c:	dc06      	bgt.n	ec7c <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0xfc>
    ec6e:	f113 0f6e 	cmn.w	r3, #110	; 0x6e
    ec72:	d017      	beq.n	eca4 <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x124>
    ec74:	f113 0f64 	cmn.w	r3, #100	; 0x64
    ec78:	d00a      	beq.n	ec90 <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x110>
    ec7a:	e01d      	b.n	ecb8 <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x138>
    ec7c:	2b68      	cmp	r3, #104	; 0x68
    ec7e:	d00c      	beq.n	ec9a <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x11a>
    ec80:	2b72      	cmp	r3, #114	; 0x72
    ec82:	d014      	beq.n	ecae <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x12e>
    ec84:	e018      	b.n	ecb8 <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x138>
        case    4:  NMT->LEDtripleFlash = -104; break;
    ec86:	687b      	ldr	r3, [r7, #4]
    ec88:	681b      	ldr	r3, [r3, #0]
    ec8a:	2298      	movs	r2, #152	; 0x98
    ec8c:	715a      	strb	r2, [r3, #5]
    ec8e:	e013      	b.n	ecb8 <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x138>
        case -100:  NMT->LEDtripleFlash =  100; break;
    ec90:	687b      	ldr	r3, [r7, #4]
    ec92:	681b      	ldr	r3, [r3, #0]
    ec94:	2264      	movs	r2, #100	; 0x64
    ec96:	715a      	strb	r2, [r3, #5]
    ec98:	e00e      	b.n	ecb8 <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x138>
        case  104:  NMT->LEDtripleFlash = -114; break;
    ec9a:	687b      	ldr	r3, [r7, #4]
    ec9c:	681b      	ldr	r3, [r3, #0]
    ec9e:	228e      	movs	r2, #142	; 0x8e
    eca0:	715a      	strb	r2, [r3, #5]
    eca2:	e009      	b.n	ecb8 <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x138>
        case -110:  NMT->LEDtripleFlash =  110; break;
    eca4:	687b      	ldr	r3, [r7, #4]
    eca6:	681b      	ldr	r3, [r3, #0]
    eca8:	226e      	movs	r2, #110	; 0x6e
    ecaa:	715a      	strb	r2, [r3, #5]
    ecac:	e004      	b.n	ecb8 <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x138>
        case  114:  NMT->LEDtripleFlash =  -20; break;
    ecae:	687b      	ldr	r3, [r7, #4]
    ecb0:	681b      	ldr	r3, [r3, #0]
    ecb2:	22ec      	movs	r2, #236	; 0xec
    ecb4:	715a      	strb	r2, [r3, #5]
    ecb6:	bf00      	nop
    }

    switch(++NMT->LEDquadrupleFlash){
    ecb8:	687b      	ldr	r3, [r7, #4]
    ecba:	681b      	ldr	r3, [r3, #0]
    ecbc:	f993 2006 	ldrsb.w	r2, [r3, #6]
    ecc0:	b2d2      	uxtb	r2, r2
    ecc2:	3201      	adds	r2, #1
    ecc4:	b2d2      	uxtb	r2, r2
    ecc6:	b252      	sxtb	r2, r2
    ecc8:	719a      	strb	r2, [r3, #6]
    ecca:	f993 3006 	ldrsb.w	r3, [r3, #6]
    ecce:	2b04      	cmp	r3, #4
    ecd0:	d012      	beq.n	ecf8 <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x178>
    ecd2:	2b04      	cmp	r3, #4
    ecd4:	dc09      	bgt.n	ecea <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x16a>
    ecd6:	f113 0f6e 	cmn.w	r3, #110	; 0x6e
    ecda:	d01c      	beq.n	ed16 <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x196>
    ecdc:	f113 0f64 	cmn.w	r3, #100	; 0x64
    ece0:	d00f      	beq.n	ed02 <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x182>
    ece2:	f113 0f78 	cmn.w	r3, #120	; 0x78
    ece6:	d020      	beq.n	ed2a <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x1aa>
        case -110:  NMT->LEDquadrupleFlash =  110; break;
        case  114:  NMT->LEDquadrupleFlash = -124; break;
        case -120:  NMT->LEDquadrupleFlash =  120; break;
        case  124:  NMT->LEDquadrupleFlash =  -20; break;
    }
}
    ece8:	e029      	b.n	ed3e <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x1be>
    switch(++NMT->LEDquadrupleFlash){
    ecea:	2b72      	cmp	r3, #114	; 0x72
    ecec:	d018      	beq.n	ed20 <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x1a0>
    ecee:	2b7c      	cmp	r3, #124	; 0x7c
    ecf0:	d020      	beq.n	ed34 <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x1b4>
    ecf2:	2b68      	cmp	r3, #104	; 0x68
    ecf4:	d00a      	beq.n	ed0c <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x18c>
}
    ecf6:	e022      	b.n	ed3e <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x1be>
        case    4:  NMT->LEDquadrupleFlash = -104; break;
    ecf8:	687b      	ldr	r3, [r7, #4]
    ecfa:	681b      	ldr	r3, [r3, #0]
    ecfc:	2298      	movs	r2, #152	; 0x98
    ecfe:	719a      	strb	r2, [r3, #6]
    ed00:	e01d      	b.n	ed3e <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x1be>
        case -100:  NMT->LEDquadrupleFlash =  100; break;
    ed02:	687b      	ldr	r3, [r7, #4]
    ed04:	681b      	ldr	r3, [r3, #0]
    ed06:	2264      	movs	r2, #100	; 0x64
    ed08:	719a      	strb	r2, [r3, #6]
    ed0a:	e018      	b.n	ed3e <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x1be>
        case  104:  NMT->LEDquadrupleFlash = -114; break;
    ed0c:	687b      	ldr	r3, [r7, #4]
    ed0e:	681b      	ldr	r3, [r3, #0]
    ed10:	228e      	movs	r2, #142	; 0x8e
    ed12:	719a      	strb	r2, [r3, #6]
    ed14:	e013      	b.n	ed3e <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x1be>
        case -110:  NMT->LEDquadrupleFlash =  110; break;
    ed16:	687b      	ldr	r3, [r7, #4]
    ed18:	681b      	ldr	r3, [r3, #0]
    ed1a:	226e      	movs	r2, #110	; 0x6e
    ed1c:	719a      	strb	r2, [r3, #6]
    ed1e:	e00e      	b.n	ed3e <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x1be>
        case  114:  NMT->LEDquadrupleFlash = -124; break;
    ed20:	687b      	ldr	r3, [r7, #4]
    ed22:	681b      	ldr	r3, [r3, #0]
    ed24:	2284      	movs	r2, #132	; 0x84
    ed26:	719a      	strb	r2, [r3, #6]
    ed28:	e009      	b.n	ed3e <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x1be>
        case -120:  NMT->LEDquadrupleFlash =  120; break;
    ed2a:	687b      	ldr	r3, [r7, #4]
    ed2c:	681b      	ldr	r3, [r3, #0]
    ed2e:	2278      	movs	r2, #120	; 0x78
    ed30:	719a      	strb	r2, [r3, #6]
    ed32:	e004      	b.n	ed3e <_ZN22CO_NMT_Heartbeat_Class26CO_NMT_blinkingProcess50msEv+0x1be>
        case  124:  NMT->LEDquadrupleFlash =  -20; break;
    ed34:	687b      	ldr	r3, [r7, #4]
    ed36:	681b      	ldr	r3, [r3, #0]
    ed38:	22ec      	movs	r2, #236	; 0xec
    ed3a:	719a      	strb	r2, [r3, #6]
    ed3c:	bf00      	nop
}
    ed3e:	bf00      	nop
    ed40:	370c      	adds	r7, #12
    ed42:	46bd      	mov	sp, r7
    ed44:	bc80      	pop	{r7}
    ed46:	4770      	bx	lr

0000ed48 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm>:
        uint32_t                HBtime,
        uint32_t                NMTstartup,
        uint8_t                 errorRegister,
        const uint8_t           errorBehavior[],
        uint32_t               *timerNext_ms)
{
    ed48:	b580      	push	{r7, lr}
    ed4a:	b086      	sub	sp, #24
    ed4c:	af00      	add	r7, sp, #0
    ed4e:	60f8      	str	r0, [r7, #12]
    ed50:	60b9      	str	r1, [r7, #8]
    ed52:	607a      	str	r2, [r7, #4]
    ed54:	603b      	str	r3, [r7, #0]
    uint8_t CANpassive;

    uint8_t currentOperatingState = NMT->operatingState;
    ed56:	68fb      	ldr	r3, [r7, #12]
    ed58:	681b      	ldr	r3, [r3, #0]
    ed5a:	781b      	ldrb	r3, [r3, #0]
    ed5c:	75bb      	strb	r3, [r7, #22]

    NMT->HBproducerTimer += timeDifference_ms;
    ed5e:	68fb      	ldr	r3, [r7, #12]
    ed60:	681b      	ldr	r3, [r3, #0]
    ed62:	68fa      	ldr	r2, [r7, #12]
    ed64:	6812      	ldr	r2, [r2, #0]
    ed66:	68d1      	ldr	r1, [r2, #12]
    ed68:	68ba      	ldr	r2, [r7, #8]
    ed6a:	440a      	add	r2, r1
    ed6c:	60da      	str	r2, [r3, #12]

    /* Heartbeat producer message & Bootup message */
    if((HBtime != 0 && NMT->HBproducerTimer >= HBtime) || NMT->operatingState == CO_NMT_INITIALIZING){
    ed6e:	687b      	ldr	r3, [r7, #4]
    ed70:	2b00      	cmp	r3, #0
    ed72:	d005      	beq.n	ed80 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x38>
    ed74:	68fb      	ldr	r3, [r7, #12]
    ed76:	681b      	ldr	r3, [r3, #0]
    ed78:	68da      	ldr	r2, [r3, #12]
    ed7a:	687b      	ldr	r3, [r7, #4]
    ed7c:	429a      	cmp	r2, r3
    ed7e:	d204      	bcs.n	ed8a <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x42>
    ed80:	68fb      	ldr	r3, [r7, #12]
    ed82:	681b      	ldr	r3, [r3, #0]
    ed84:	781b      	ldrb	r3, [r3, #0]
    ed86:	2b00      	cmp	r3, #0
    ed88:	d139      	bne.n	edfe <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0xb6>

        /* Start from the beginning. If OS is slow, time sliding may occur. However, heartbeat is
         * not for synchronization, it is for health report. */
        NMT->HBproducerTimer = 0;
    ed8a:	68fb      	ldr	r3, [r7, #12]
    ed8c:	681b      	ldr	r3, [r3, #0]
    ed8e:	2200      	movs	r2, #0
    ed90:	60da      	str	r2, [r3, #12]

        NMT->HB_TXbuff->data[0] = NMT->operatingState;
    ed92:	68fb      	ldr	r3, [r7, #12]
    ed94:	681b      	ldr	r3, [r3, #0]
    ed96:	6a1b      	ldr	r3, [r3, #32]
    ed98:	68fa      	ldr	r2, [r7, #12]
    ed9a:	6812      	ldr	r2, [r2, #0]
    ed9c:	7812      	ldrb	r2, [r2, #0]
    ed9e:	715a      	strb	r2, [r3, #5]
        ptrCODriverClass->CAN_Send(NMT->HB_TXbuff);
    eda0:	4b8d      	ldr	r3, [pc, #564]	; (efd8 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x290>)
    eda2:	681a      	ldr	r2, [r3, #0]
    eda4:	68fb      	ldr	r3, [r7, #12]
    eda6:	681b      	ldr	r3, [r3, #0]
    eda8:	6a1b      	ldr	r3, [r3, #32]
    edaa:	4619      	mov	r1, r3
    edac:	4610      	mov	r0, r2
    edae:	4b8b      	ldr	r3, [pc, #556]	; (efdc <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x294>)
    edb0:	4798      	blx	r3

        if(NMT->operatingState == CO_NMT_INITIALIZING){
    edb2:	68fb      	ldr	r3, [r7, #12]
    edb4:	681b      	ldr	r3, [r3, #0]
    edb6:	781b      	ldrb	r3, [r3, #0]
    edb8:	2b00      	cmp	r3, #0
    edba:	d120      	bne.n	edfe <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0xb6>
            if(HBtime > NMT->firstHBTime) NMT->HBproducerTimer = HBtime - NMT->firstHBTime;
    edbc:	68fb      	ldr	r3, [r7, #12]
    edbe:	681b      	ldr	r3, [r3, #0]
    edc0:	691a      	ldr	r2, [r3, #16]
    edc2:	687b      	ldr	r3, [r7, #4]
    edc4:	429a      	cmp	r2, r3
    edc6:	d208      	bcs.n	edda <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x92>
    edc8:	68fb      	ldr	r3, [r7, #12]
    edca:	681b      	ldr	r3, [r3, #0]
    edcc:	68fa      	ldr	r2, [r7, #12]
    edce:	6812      	ldr	r2, [r2, #0]
    edd0:	6912      	ldr	r2, [r2, #16]
    edd2:	6879      	ldr	r1, [r7, #4]
    edd4:	1a8a      	subs	r2, r1, r2
    edd6:	60da      	str	r2, [r3, #12]
    edd8:	e003      	b.n	ede2 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x9a>
            else                          NMT->HBproducerTimer = 0;
    edda:	68fb      	ldr	r3, [r7, #12]
    eddc:	681b      	ldr	r3, [r3, #0]
    edde:	2200      	movs	r2, #0
    ede0:	60da      	str	r2, [r3, #12]

            if((NMTstartup & 0x04) == 0) NMT->operatingState = CO_NMT_OPERATIONAL;
    ede2:	683b      	ldr	r3, [r7, #0]
    ede4:	f003 0304 	and.w	r3, r3, #4
    ede8:	2b00      	cmp	r3, #0
    edea:	d104      	bne.n	edf6 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0xae>
    edec:	68fb      	ldr	r3, [r7, #12]
    edee:	681b      	ldr	r3, [r3, #0]
    edf0:	2205      	movs	r2, #5
    edf2:	701a      	strb	r2, [r3, #0]
    edf4:	e003      	b.n	edfe <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0xb6>
            else                         NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
    edf6:	68fb      	ldr	r3, [r7, #12]
    edf8:	681b      	ldr	r3, [r3, #0]
    edfa:	227f      	movs	r2, #127	; 0x7f
    edfc:	701a      	strb	r2, [r3, #0]
        }
    }


    /* Calculate, when next Heartbeat needs to be send and lower timerNext_ms if necessary. */
    if(HBtime != 0 && timerNext_ms != NULL){
    edfe:	687b      	ldr	r3, [r7, #4]
    ee00:	2b00      	cmp	r3, #0
    ee02:	d01a      	beq.n	ee3a <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0xf2>
    ee04:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ee06:	2b00      	cmp	r3, #0
    ee08:	d017      	beq.n	ee3a <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0xf2>
        if(NMT->HBproducerTimer < HBtime){
    ee0a:	68fb      	ldr	r3, [r7, #12]
    ee0c:	681b      	ldr	r3, [r3, #0]
    ee0e:	68da      	ldr	r2, [r3, #12]
    ee10:	687b      	ldr	r3, [r7, #4]
    ee12:	429a      	cmp	r2, r3
    ee14:	d20e      	bcs.n	ee34 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0xec>
            uint32_t diff = HBtime - NMT->HBproducerTimer;
    ee16:	68fb      	ldr	r3, [r7, #12]
    ee18:	681b      	ldr	r3, [r3, #0]
    ee1a:	68db      	ldr	r3, [r3, #12]
    ee1c:	687a      	ldr	r2, [r7, #4]
    ee1e:	1ad3      	subs	r3, r2, r3
    ee20:	613b      	str	r3, [r7, #16]
            if(*timerNext_ms > diff){
    ee22:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ee24:	681a      	ldr	r2, [r3, #0]
    ee26:	693b      	ldr	r3, [r7, #16]
    ee28:	429a      	cmp	r2, r3
    ee2a:	d906      	bls.n	ee3a <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0xf2>
                *timerNext_ms = diff;
    ee2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ee2e:	693a      	ldr	r2, [r7, #16]
    ee30:	601a      	str	r2, [r3, #0]
    ee32:	e002      	b.n	ee3a <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0xf2>
            }
        }else{
            *timerNext_ms = 0;
    ee34:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ee36:	2200      	movs	r2, #0
    ee38:	601a      	str	r2, [r3, #0]
        }
    }


    /* CAN passive flag */
    CANpassive = 0;
    ee3a:	2300      	movs	r3, #0
    ee3c:	75fb      	strb	r3, [r7, #23]
    if(ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_CAN_TX_BUS_PASSIVE) || ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_CAN_RX_BUS_PASSIVE))
    ee3e:	4b66      	ldr	r3, [pc, #408]	; (efd8 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x290>)
    ee40:	681b      	ldr	r3, [r3, #0]
    ee42:	1d18      	adds	r0, r3, #4
    ee44:	68fb      	ldr	r3, [r7, #12]
    ee46:	681b      	ldr	r3, [r3, #0]
    ee48:	695b      	ldr	r3, [r3, #20]
    ee4a:	691b      	ldr	r3, [r3, #16]
    ee4c:	2207      	movs	r2, #7
    ee4e:	4619      	mov	r1, r3
    ee50:	4b63      	ldr	r3, [pc, #396]	; (efe0 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x298>)
    ee52:	4798      	blx	r3
    ee54:	4603      	mov	r3, r0
    ee56:	2b00      	cmp	r3, #0
    ee58:	d10d      	bne.n	ee76 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x12e>
    ee5a:	4b5f      	ldr	r3, [pc, #380]	; (efd8 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x290>)
    ee5c:	681b      	ldr	r3, [r3, #0]
    ee5e:	1d18      	adds	r0, r3, #4
    ee60:	68fb      	ldr	r3, [r7, #12]
    ee62:	681b      	ldr	r3, [r3, #0]
    ee64:	695b      	ldr	r3, [r3, #20]
    ee66:	691b      	ldr	r3, [r3, #16]
    ee68:	2206      	movs	r2, #6
    ee6a:	4619      	mov	r1, r3
    ee6c:	4b5c      	ldr	r3, [pc, #368]	; (efe0 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x298>)
    ee6e:	4798      	blx	r3
    ee70:	4603      	mov	r3, r0
    ee72:	2b00      	cmp	r3, #0
    ee74:	d001      	beq.n	ee7a <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x132>
    ee76:	2301      	movs	r3, #1
    ee78:	e000      	b.n	ee7c <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x134>
    ee7a:	2300      	movs	r3, #0
    ee7c:	2b00      	cmp	r3, #0
    ee7e:	d001      	beq.n	ee84 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x13c>
        CANpassive = 1;
    ee80:	2301      	movs	r3, #1
    ee82:	75fb      	strb	r3, [r7, #23]


    /* CANopen green RUN LED (DR 303-3) */
    switch(NMT->operatingState){
    ee84:	68fb      	ldr	r3, [r7, #12]
    ee86:	681b      	ldr	r3, [r3, #0]
    ee88:	781b      	ldrb	r3, [r3, #0]
    ee8a:	2b05      	cmp	r3, #5
    ee8c:	d013      	beq.n	eeb6 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x16e>
    ee8e:	2b7f      	cmp	r3, #127	; 0x7f
    ee90:	d009      	beq.n	eea6 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x15e>
    ee92:	2b04      	cmp	r3, #4
    ee94:	d114      	bne.n	eec0 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x178>
        case CO_NMT_STOPPED:          NMT->LEDgreenRun = NMT->LEDsingleFlash;   break;
    ee96:	68fb      	ldr	r3, [r7, #12]
    ee98:	681b      	ldr	r3, [r3, #0]
    ee9a:	68fa      	ldr	r2, [r7, #12]
    ee9c:	6812      	ldr	r2, [r2, #0]
    ee9e:	f992 2003 	ldrsb.w	r2, [r2, #3]
    eea2:	71da      	strb	r2, [r3, #7]
    eea4:	e00c      	b.n	eec0 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x178>
        case CO_NMT_PRE_OPERATIONAL:  NMT->LEDgreenRun = NMT->LEDblinking;      break;
    eea6:	68fb      	ldr	r3, [r7, #12]
    eea8:	681b      	ldr	r3, [r3, #0]
    eeaa:	68fa      	ldr	r2, [r7, #12]
    eeac:	6812      	ldr	r2, [r2, #0]
    eeae:	f992 2002 	ldrsb.w	r2, [r2, #2]
    eeb2:	71da      	strb	r2, [r3, #7]
    eeb4:	e004      	b.n	eec0 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x178>
        case CO_NMT_OPERATIONAL:      NMT->LEDgreenRun = 1;                     break;
    eeb6:	68fb      	ldr	r3, [r7, #12]
    eeb8:	681b      	ldr	r3, [r3, #0]
    eeba:	2201      	movs	r2, #1
    eebc:	71da      	strb	r2, [r3, #7]
    eebe:	bf00      	nop
    }


    /* CANopen red ERROR LED (DR 303-3) */
    if(ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_CAN_TX_BUS_OFF))
    eec0:	4b45      	ldr	r3, [pc, #276]	; (efd8 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x290>)
    eec2:	681b      	ldr	r3, [r3, #0]
    eec4:	1d18      	adds	r0, r3, #4
    eec6:	68fb      	ldr	r3, [r7, #12]
    eec8:	681b      	ldr	r3, [r3, #0]
    eeca:	695b      	ldr	r3, [r3, #20]
    eecc:	691b      	ldr	r3, [r3, #16]
    eece:	2212      	movs	r2, #18
    eed0:	4619      	mov	r1, r3
    eed2:	4b43      	ldr	r3, [pc, #268]	; (efe0 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x298>)
    eed4:	4798      	blx	r3
    eed6:	4603      	mov	r3, r0
    eed8:	2b00      	cmp	r3, #0
    eeda:	bf14      	ite	ne
    eedc:	2301      	movne	r3, #1
    eede:	2300      	moveq	r3, #0
    eee0:	b2db      	uxtb	r3, r3
    eee2:	2b00      	cmp	r3, #0
    eee4:	d004      	beq.n	eef0 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x1a8>
        NMT->LEDredError = 1;
    eee6:	68fb      	ldr	r3, [r7, #12]
    eee8:	681b      	ldr	r3, [r3, #0]
    eeea:	2201      	movs	r2, #1
    eeec:	721a      	strb	r2, [r3, #8]
    eeee:	e07d      	b.n	efec <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x2a4>

    else if(ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_SYNC_TIME_OUT))
    eef0:	4b39      	ldr	r3, [pc, #228]	; (efd8 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x290>)
    eef2:	681b      	ldr	r3, [r3, #0]
    eef4:	1d18      	adds	r0, r3, #4
    eef6:	68fb      	ldr	r3, [r7, #12]
    eef8:	681b      	ldr	r3, [r3, #0]
    eefa:	695b      	ldr	r3, [r3, #20]
    eefc:	691b      	ldr	r3, [r3, #16]
    eefe:	2218      	movs	r2, #24
    ef00:	4619      	mov	r1, r3
    ef02:	4b37      	ldr	r3, [pc, #220]	; (efe0 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x298>)
    ef04:	4798      	blx	r3
    ef06:	4603      	mov	r3, r0
    ef08:	2b00      	cmp	r3, #0
    ef0a:	bf14      	ite	ne
    ef0c:	2301      	movne	r3, #1
    ef0e:	2300      	moveq	r3, #0
    ef10:	b2db      	uxtb	r3, r3
    ef12:	2b00      	cmp	r3, #0
    ef14:	d007      	beq.n	ef26 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x1de>
        NMT->LEDredError = NMT->LEDtripleFlash;
    ef16:	68fb      	ldr	r3, [r7, #12]
    ef18:	681b      	ldr	r3, [r3, #0]
    ef1a:	68fa      	ldr	r2, [r7, #12]
    ef1c:	6812      	ldr	r2, [r2, #0]
    ef1e:	f992 2005 	ldrsb.w	r2, [r2, #5]
    ef22:	721a      	strb	r2, [r3, #8]
    ef24:	e062      	b.n	efec <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x2a4>

    else if(ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_HEARTBEAT_CONSUMER) || ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_HB_CONSUMER_REMOTE_RESET))
    ef26:	4b2c      	ldr	r3, [pc, #176]	; (efd8 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x290>)
    ef28:	681b      	ldr	r3, [r3, #0]
    ef2a:	1d18      	adds	r0, r3, #4
    ef2c:	68fb      	ldr	r3, [r7, #12]
    ef2e:	681b      	ldr	r3, [r3, #0]
    ef30:	695b      	ldr	r3, [r3, #20]
    ef32:	691b      	ldr	r3, [r3, #16]
    ef34:	221b      	movs	r2, #27
    ef36:	4619      	mov	r1, r3
    ef38:	4b29      	ldr	r3, [pc, #164]	; (efe0 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x298>)
    ef3a:	4798      	blx	r3
    ef3c:	4603      	mov	r3, r0
    ef3e:	2b00      	cmp	r3, #0
    ef40:	d10d      	bne.n	ef5e <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x216>
    ef42:	4b25      	ldr	r3, [pc, #148]	; (efd8 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x290>)
    ef44:	681b      	ldr	r3, [r3, #0]
    ef46:	1d18      	adds	r0, r3, #4
    ef48:	68fb      	ldr	r3, [r7, #12]
    ef4a:	681b      	ldr	r3, [r3, #0]
    ef4c:	695b      	ldr	r3, [r3, #20]
    ef4e:	691b      	ldr	r3, [r3, #16]
    ef50:	221c      	movs	r2, #28
    ef52:	4619      	mov	r1, r3
    ef54:	4b22      	ldr	r3, [pc, #136]	; (efe0 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x298>)
    ef56:	4798      	blx	r3
    ef58:	4603      	mov	r3, r0
    ef5a:	2b00      	cmp	r3, #0
    ef5c:	d001      	beq.n	ef62 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x21a>
    ef5e:	2301      	movs	r3, #1
    ef60:	e000      	b.n	ef64 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x21c>
    ef62:	2300      	movs	r3, #0
    ef64:	2b00      	cmp	r3, #0
    ef66:	d007      	beq.n	ef78 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x230>
        NMT->LEDredError = NMT->LEDdoubleFlash;
    ef68:	68fb      	ldr	r3, [r7, #12]
    ef6a:	681b      	ldr	r3, [r3, #0]
    ef6c:	68fa      	ldr	r2, [r7, #12]
    ef6e:	6812      	ldr	r2, [r2, #0]
    ef70:	f992 2004 	ldrsb.w	r2, [r2, #4]
    ef74:	721a      	strb	r2, [r3, #8]
    ef76:	e039      	b.n	efec <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x2a4>

    else if(CANpassive ||  ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_CAN_BUS_WARNING))
    ef78:	7dfb      	ldrb	r3, [r7, #23]
    ef7a:	2b00      	cmp	r3, #0
    ef7c:	d10d      	bne.n	ef9a <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x252>
    ef7e:	4b16      	ldr	r3, [pc, #88]	; (efd8 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x290>)
    ef80:	681b      	ldr	r3, [r3, #0]
    ef82:	1d18      	adds	r0, r3, #4
    ef84:	68fb      	ldr	r3, [r7, #12]
    ef86:	681b      	ldr	r3, [r3, #0]
    ef88:	695b      	ldr	r3, [r3, #20]
    ef8a:	691b      	ldr	r3, [r3, #16]
    ef8c:	2201      	movs	r2, #1
    ef8e:	4619      	mov	r1, r3
    ef90:	4b13      	ldr	r3, [pc, #76]	; (efe0 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x298>)
    ef92:	4798      	blx	r3
    ef94:	4603      	mov	r3, r0
    ef96:	2b00      	cmp	r3, #0
    ef98:	d001      	beq.n	ef9e <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x256>
    ef9a:	2301      	movs	r3, #1
    ef9c:	e000      	b.n	efa0 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x258>
    ef9e:	2300      	movs	r3, #0
    efa0:	2b00      	cmp	r3, #0
    efa2:	d007      	beq.n	efb4 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x26c>
        NMT->LEDredError = NMT->LEDsingleFlash;
    efa4:	68fb      	ldr	r3, [r7, #12]
    efa6:	681b      	ldr	r3, [r3, #0]
    efa8:	68fa      	ldr	r2, [r7, #12]
    efaa:	6812      	ldr	r2, [r2, #0]
    efac:	f992 2003 	ldrsb.w	r2, [r2, #3]
    efb0:	721a      	strb	r2, [r3, #8]
    efb2:	e01b      	b.n	efec <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x2a4>

    else if(errorRegister)
    efb4:	f897 3020 	ldrb.w	r3, [r7, #32]
    efb8:	2b00      	cmp	r3, #0
    efba:	d013      	beq.n	efe4 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x29c>
        NMT->LEDredError = (NMT->LEDblinking>=0)?-1:1;
    efbc:	68fb      	ldr	r3, [r7, #12]
    efbe:	681b      	ldr	r3, [r3, #0]
    efc0:	68fa      	ldr	r2, [r7, #12]
    efc2:	6812      	ldr	r2, [r2, #0]
    efc4:	f992 2002 	ldrsb.w	r2, [r2, #2]
    efc8:	2a00      	cmp	r2, #0
    efca:	db02      	blt.n	efd2 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x28a>
    efcc:	f04f 32ff 	mov.w	r2, #4294967295
    efd0:	e000      	b.n	efd4 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x28c>
    efd2:	2201      	movs	r2, #1
    efd4:	721a      	strb	r2, [r3, #8]
    efd6:	e009      	b.n	efec <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x2a4>
    efd8:	20001934 	.word	0x20001934
    efdc:	0000d885 	.word	0x0000d885
    efe0:	0000e56d 	.word	0x0000e56d

    else
        NMT->LEDredError = -1;
    efe4:	68fb      	ldr	r3, [r7, #12]
    efe6:	681b      	ldr	r3, [r3, #0]
    efe8:	22ff      	movs	r2, #255	; 0xff
    efea:	721a      	strb	r2, [r3, #8]


    /* in case of error enter pre-operational state */
    if(errorBehavior && (NMT->operatingState == CO_NMT_OPERATIONAL)){
    efec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    efee:	2b00      	cmp	r3, #0
    eff0:	f000 80ca 	beq.w	f188 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x440>
    eff4:	68fb      	ldr	r3, [r7, #12]
    eff6:	681b      	ldr	r3, [r3, #0]
    eff8:	781b      	ldrb	r3, [r3, #0]
    effa:	2b05      	cmp	r3, #5
    effc:	f040 80c4 	bne.w	f188 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x440>
        if(CANpassive && (errorBehavior[2] == 0 || errorBehavior[2] == 2)) errorRegister |= 0x10;
    f000:	7dfb      	ldrb	r3, [r7, #23]
    f002:	2b00      	cmp	r3, #0
    f004:	d00f      	beq.n	f026 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x2de>
    f006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f008:	3302      	adds	r3, #2
    f00a:	781b      	ldrb	r3, [r3, #0]
    f00c:	2b00      	cmp	r3, #0
    f00e:	d004      	beq.n	f01a <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x2d2>
    f010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f012:	3302      	adds	r3, #2
    f014:	781b      	ldrb	r3, [r3, #0]
    f016:	2b02      	cmp	r3, #2
    f018:	d105      	bne.n	f026 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x2de>
    f01a:	f897 3020 	ldrb.w	r3, [r7, #32]
    f01e:	f043 0310 	orr.w	r3, r3, #16
    f022:	f887 3020 	strb.w	r3, [r7, #32]

        if(errorRegister){
    f026:	f897 3020 	ldrb.w	r3, [r7, #32]
    f02a:	2b00      	cmp	r3, #0
    f02c:	f000 80ac 	beq.w	f188 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x440>
            /* Communication error */
            if(errorRegister & CO_ERR_REG_COMM_ERR){
    f030:	f897 3020 	ldrb.w	r3, [r7, #32]
    f034:	f003 0310 	and.w	r3, r3, #16
    f038:	2b00      	cmp	r3, #0
    f03a:	d053      	beq.n	f0e4 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x39c>
                if(errorBehavior[1] == 0){
    f03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f03e:	3301      	adds	r3, #1
    f040:	781b      	ldrb	r3, [r3, #0]
    f042:	2b00      	cmp	r3, #0
    f044:	d104      	bne.n	f050 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x308>
                    NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
    f046:	68fb      	ldr	r3, [r7, #12]
    f048:	681b      	ldr	r3, [r3, #0]
    f04a:	227f      	movs	r2, #127	; 0x7f
    f04c:	701a      	strb	r2, [r3, #0]
    f04e:	e049      	b.n	f0e4 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x39c>
                }
                else if(errorBehavior[1] == 2){
    f050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f052:	3301      	adds	r3, #1
    f054:	781b      	ldrb	r3, [r3, #0]
    f056:	2b02      	cmp	r3, #2
    f058:	d104      	bne.n	f064 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x31c>
                    NMT->operatingState = CO_NMT_STOPPED;
    f05a:	68fb      	ldr	r3, [r7, #12]
    f05c:	681b      	ldr	r3, [r3, #0]
    f05e:	2204      	movs	r2, #4
    f060:	701a      	strb	r2, [r3, #0]
    f062:	e03f      	b.n	f0e4 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x39c>
                }
                else if( ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_CAN_TX_BUS_OFF)
    f064:	4b55      	ldr	r3, [pc, #340]	; (f1bc <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x474>)
    f066:	681b      	ldr	r3, [r3, #0]
    f068:	1d18      	adds	r0, r3, #4
    f06a:	68fb      	ldr	r3, [r7, #12]
    f06c:	681b      	ldr	r3, [r3, #0]
    f06e:	695b      	ldr	r3, [r3, #20]
    f070:	691b      	ldr	r3, [r3, #16]
    f072:	2212      	movs	r2, #18
    f074:	4619      	mov	r1, r3
    f076:	4b52      	ldr	r3, [pc, #328]	; (f1c0 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x478>)
    f078:	4798      	blx	r3
    f07a:	4603      	mov	r3, r0
                     ||  ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_HEARTBEAT_CONSUMER)
                     ||  ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_HB_CONSUMER_REMOTE_RESET))
    f07c:	2b00      	cmp	r3, #0
    f07e:	d11b      	bne.n	f0b8 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x370>
                     ||  ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_HEARTBEAT_CONSUMER)
    f080:	4b4e      	ldr	r3, [pc, #312]	; (f1bc <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x474>)
    f082:	681b      	ldr	r3, [r3, #0]
    f084:	1d18      	adds	r0, r3, #4
    f086:	68fb      	ldr	r3, [r7, #12]
    f088:	681b      	ldr	r3, [r3, #0]
    f08a:	695b      	ldr	r3, [r3, #20]
    f08c:	691b      	ldr	r3, [r3, #16]
    f08e:	221b      	movs	r2, #27
    f090:	4619      	mov	r1, r3
    f092:	4b4b      	ldr	r3, [pc, #300]	; (f1c0 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x478>)
    f094:	4798      	blx	r3
    f096:	4603      	mov	r3, r0
    f098:	2b00      	cmp	r3, #0
    f09a:	d10d      	bne.n	f0b8 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x370>
                     ||  ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_HB_CONSUMER_REMOTE_RESET))
    f09c:	4b47      	ldr	r3, [pc, #284]	; (f1bc <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x474>)
    f09e:	681b      	ldr	r3, [r3, #0]
    f0a0:	1d18      	adds	r0, r3, #4
    f0a2:	68fb      	ldr	r3, [r7, #12]
    f0a4:	681b      	ldr	r3, [r3, #0]
    f0a6:	695b      	ldr	r3, [r3, #20]
    f0a8:	691b      	ldr	r3, [r3, #16]
    f0aa:	221c      	movs	r2, #28
    f0ac:	4619      	mov	r1, r3
    f0ae:	4b44      	ldr	r3, [pc, #272]	; (f1c0 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x478>)
    f0b0:	4798      	blx	r3
    f0b2:	4603      	mov	r3, r0
    f0b4:	2b00      	cmp	r3, #0
    f0b6:	d001      	beq.n	f0bc <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x374>
    f0b8:	2301      	movs	r3, #1
    f0ba:	e000      	b.n	f0be <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x376>
    f0bc:	2300      	movs	r3, #0
                else if( ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_CAN_TX_BUS_OFF)
    f0be:	2b00      	cmp	r3, #0
    f0c0:	d010      	beq.n	f0e4 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x39c>
                {
                    if(errorBehavior[0] == 0){
    f0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f0c4:	781b      	ldrb	r3, [r3, #0]
    f0c6:	2b00      	cmp	r3, #0
    f0c8:	d104      	bne.n	f0d4 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x38c>
                        NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
    f0ca:	68fb      	ldr	r3, [r7, #12]
    f0cc:	681b      	ldr	r3, [r3, #0]
    f0ce:	227f      	movs	r2, #127	; 0x7f
    f0d0:	701a      	strb	r2, [r3, #0]
    f0d2:	e007      	b.n	f0e4 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x39c>
                    }
                    else if(errorBehavior[0] == 2){
    f0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f0d6:	781b      	ldrb	r3, [r3, #0]
    f0d8:	2b02      	cmp	r3, #2
    f0da:	d103      	bne.n	f0e4 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x39c>
                        NMT->operatingState = CO_NMT_STOPPED;
    f0dc:	68fb      	ldr	r3, [r7, #12]
    f0de:	681b      	ldr	r3, [r3, #0]
    f0e0:	2204      	movs	r2, #4
    f0e2:	701a      	strb	r2, [r3, #0]
                    }
                }
            }

            /* Generic error */
            if(errorRegister & CO_ERR_REG_GENERIC_ERR){
    f0e4:	f897 3020 	ldrb.w	r3, [r7, #32]
    f0e8:	f003 0301 	and.w	r3, r3, #1
    f0ec:	2b00      	cmp	r3, #0
    f0ee:	d012      	beq.n	f116 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x3ce>
                if      (errorBehavior[3] == 0) NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
    f0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f0f2:	3303      	adds	r3, #3
    f0f4:	781b      	ldrb	r3, [r3, #0]
    f0f6:	2b00      	cmp	r3, #0
    f0f8:	d104      	bne.n	f104 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x3bc>
    f0fa:	68fb      	ldr	r3, [r7, #12]
    f0fc:	681b      	ldr	r3, [r3, #0]
    f0fe:	227f      	movs	r2, #127	; 0x7f
    f100:	701a      	strb	r2, [r3, #0]
    f102:	e008      	b.n	f116 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x3ce>
                else if (errorBehavior[3] == 2) NMT->operatingState = CO_NMT_STOPPED;
    f104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f106:	3303      	adds	r3, #3
    f108:	781b      	ldrb	r3, [r3, #0]
    f10a:	2b02      	cmp	r3, #2
    f10c:	d103      	bne.n	f116 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x3ce>
    f10e:	68fb      	ldr	r3, [r7, #12]
    f110:	681b      	ldr	r3, [r3, #0]
    f112:	2204      	movs	r2, #4
    f114:	701a      	strb	r2, [r3, #0]
            }

            /* Device profile error */
            if(errorRegister & CO_ERR_REG_DEV_PROFILE){
    f116:	f897 3020 	ldrb.w	r3, [r7, #32]
    f11a:	f003 0320 	and.w	r3, r3, #32
    f11e:	2b00      	cmp	r3, #0
    f120:	d012      	beq.n	f148 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x400>
                if      (errorBehavior[4] == 0) NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
    f122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f124:	3304      	adds	r3, #4
    f126:	781b      	ldrb	r3, [r3, #0]
    f128:	2b00      	cmp	r3, #0
    f12a:	d104      	bne.n	f136 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x3ee>
    f12c:	68fb      	ldr	r3, [r7, #12]
    f12e:	681b      	ldr	r3, [r3, #0]
    f130:	227f      	movs	r2, #127	; 0x7f
    f132:	701a      	strb	r2, [r3, #0]
    f134:	e008      	b.n	f148 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x400>
                else if (errorBehavior[4] == 2) NMT->operatingState = CO_NMT_STOPPED;
    f136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f138:	3304      	adds	r3, #4
    f13a:	781b      	ldrb	r3, [r3, #0]
    f13c:	2b02      	cmp	r3, #2
    f13e:	d103      	bne.n	f148 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x400>
    f140:	68fb      	ldr	r3, [r7, #12]
    f142:	681b      	ldr	r3, [r3, #0]
    f144:	2204      	movs	r2, #4
    f146:	701a      	strb	r2, [r3, #0]
            }

            /* Manufacturer specific error */
            if(errorRegister & CO_ERR_REG_MANUFACTURER){
    f148:	f997 3020 	ldrsb.w	r3, [r7, #32]
    f14c:	2b00      	cmp	r3, #0
    f14e:	da12      	bge.n	f176 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x42e>
                if      (errorBehavior[5] == 0) NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
    f150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f152:	3305      	adds	r3, #5
    f154:	781b      	ldrb	r3, [r3, #0]
    f156:	2b00      	cmp	r3, #0
    f158:	d104      	bne.n	f164 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x41c>
    f15a:	68fb      	ldr	r3, [r7, #12]
    f15c:	681b      	ldr	r3, [r3, #0]
    f15e:	227f      	movs	r2, #127	; 0x7f
    f160:	701a      	strb	r2, [r3, #0]
    f162:	e008      	b.n	f176 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x42e>
                else if (errorBehavior[5] == 2) NMT->operatingState = CO_NMT_STOPPED;
    f164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f166:	3305      	adds	r3, #5
    f168:	781b      	ldrb	r3, [r3, #0]
    f16a:	2b02      	cmp	r3, #2
    f16c:	d103      	bne.n	f176 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x42e>
    f16e:	68fb      	ldr	r3, [r7, #12]
    f170:	681b      	ldr	r3, [r3, #0]
    f172:	2204      	movs	r2, #4
    f174:	701a      	strb	r2, [r3, #0]
            }

            /* if operational state is lost, send HB immediately. */
            if(NMT->operatingState != CO_NMT_OPERATIONAL)
    f176:	68fb      	ldr	r3, [r7, #12]
    f178:	681b      	ldr	r3, [r3, #0]
    f17a:	781b      	ldrb	r3, [r3, #0]
    f17c:	2b05      	cmp	r3, #5
    f17e:	d003      	beq.n	f188 <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x440>
                NMT->HBproducerTimer = HBtime;
    f180:	68fb      	ldr	r3, [r7, #12]
    f182:	681b      	ldr	r3, [r3, #0]
    f184:	687a      	ldr	r2, [r7, #4]
    f186:	60da      	str	r2, [r3, #12]
        }
    }

    if(NMT->ptrState!=NULL && currentOperatingState!=NMT->operatingState){
    f188:	68fb      	ldr	r3, [r7, #12]
    f18a:	681b      	ldr	r3, [r3, #0]
    f18c:	69db      	ldr	r3, [r3, #28]
    f18e:	2b00      	cmp	r3, #0
    f190:	d00d      	beq.n	f1ae <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x466>
    f192:	68fb      	ldr	r3, [r7, #12]
    f194:	681b      	ldr	r3, [r3, #0]
    f196:	781b      	ldrb	r3, [r3, #0]
    f198:	7dba      	ldrb	r2, [r7, #22]
    f19a:	429a      	cmp	r2, r3
    f19c:	d007      	beq.n	f1ae <_ZN22CO_NMT_Heartbeat_Class14CO_NMT_processEmmmhPKhPm+0x466>
        NMT->ptrState((CO_NMT_internalState_t)NMT->operatingState);
    f19e:	68fb      	ldr	r3, [r7, #12]
    f1a0:	681b      	ldr	r3, [r3, #0]
    f1a2:	69db      	ldr	r3, [r3, #28]
    f1a4:	68fa      	ldr	r2, [r7, #12]
    f1a6:	6812      	ldr	r2, [r2, #0]
    f1a8:	7812      	ldrb	r2, [r2, #0]
    f1aa:	4610      	mov	r0, r2
    f1ac:	4798      	blx	r3
    }

    return (CO_NMT_reset_cmd_t)NMT->resetCommand;
    f1ae:	68fb      	ldr	r3, [r7, #12]
    f1b0:	681b      	ldr	r3, [r3, #0]
    f1b2:	7a5b      	ldrb	r3, [r3, #9]
}
    f1b4:	4618      	mov	r0, r3
    f1b6:	3718      	adds	r7, #24
    f1b8:	46bd      	mov	sp, r7
    f1ba:	bd80      	pop	{r7, pc}
    f1bc:	20001934 	.word	0x20001934
    f1c0:	0000e56d 	.word	0x0000e56d

0000f1c4 <_ZN12CO_PDO_ClassC1Ev>:


#include "CO_PDO_Class.h"
#include "CO_Driver_Class.h"
// default constructor
CO_PDO_Class::CO_PDO_Class()
    f1c4:	b480      	push	{r7}
    f1c6:	b083      	sub	sp, #12
    f1c8:	af00      	add	r7, sp, #0
    f1ca:	6078      	str	r0, [r7, #4]
{
} //CO_PDO_Class
    f1cc:	687b      	ldr	r3, [r7, #4]
    f1ce:	4618      	mov	r0, r3
    f1d0:	370c      	adds	r7, #12
    f1d2:	46bd      	mov	sp, r7
    f1d4:	bc80      	pop	{r7}
    f1d6:	4770      	bx	lr

0000f1d8 <_ZN12CO_PDO_ClassD1Ev>:

// default destructor
CO_PDO_Class::~CO_PDO_Class()
    f1d8:	b480      	push	{r7}
    f1da:	b083      	sub	sp, #12
    f1dc:	af00      	add	r7, sp, #0
    f1de:	6078      	str	r0, [r7, #4]
{
} //~CO_PDO_Class
    f1e0:	687b      	ldr	r3, [r7, #4]
    f1e2:	4618      	mov	r0, r3
    f1e4:	370c      	adds	r7, #12
    f1e6:	46bd      	mov	sp, r7
    f1e8:	bc80      	pop	{r7}
    f1ea:	4770      	bx	lr

0000f1ec <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t>:
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 * If new message arrives and previous message wasn't processed yet, then
 * previous message will be lost and overwritten by new message. That's OK with PDOs.
 */
static void CO_PDO_receive(void *object, const CO_CANrxMsg_t *msg){
    f1ec:	b480      	push	{r7}
    f1ee:	b085      	sub	sp, #20
    f1f0:	af00      	add	r7, sp, #0
    f1f2:	6078      	str	r0, [r7, #4]
    f1f4:	6039      	str	r1, [r7, #0]
    CO_RPDO_t *RPDO;

    RPDO = (CO_RPDO_t*)object;   /* this is the correct pointer type of the first argument */
    f1f6:	687b      	ldr	r3, [r7, #4]
    f1f8:	60fb      	str	r3, [r7, #12]

    if( (RPDO->valid) &&
    f1fa:	68fb      	ldr	r3, [r7, #12]
    f1fc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
    f200:	2b00      	cmp	r3, #0
    f202:	d070      	beq.n	f2e6 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0xfa>
        (*RPDO->operatingState == CO_NMT_OPERATIONAL) &&
    f204:	68fb      	ldr	r3, [r7, #12]
    f206:	695b      	ldr	r3, [r3, #20]
    f208:	781b      	ldrb	r3, [r3, #0]
    if( (RPDO->valid) &&
    f20a:	2b05      	cmp	r3, #5
    f20c:	d16b      	bne.n	f2e6 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0xfa>
        (msg->DLC >= RPDO->dataLength))
    f20e:	683b      	ldr	r3, [r7, #0]
    f210:	7d1b      	ldrb	r3, [r3, #20]
    f212:	461a      	mov	r2, r3
    f214:	68fb      	ldr	r3, [r7, #12]
    f216:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
        (*RPDO->operatingState == CO_NMT_OPERATIONAL) &&
    f21a:	429a      	cmp	r2, r3
    f21c:	db63      	blt.n	f2e6 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0xfa>
    {
        if(RPDO->synchronous && RPDO->SYNC->CANrxToggle) {
    f21e:	68fb      	ldr	r3, [r7, #12]
    f220:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
    f224:	2b00      	cmp	r3, #0
    f226:	d032      	beq.n	f28e <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0xa2>
    f228:	68fb      	ldr	r3, [r7, #12]
    f22a:	689b      	ldr	r3, [r3, #8]
    f22c:	7edb      	ldrb	r3, [r3, #27]
    f22e:	2b00      	cmp	r3, #0
    f230:	d02d      	beq.n	f28e <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0xa2>
            /* copy data into second buffer and set 'new message' flag */
            RPDO->CANrxData[1][0] = msg->data[0];
    f232:	683b      	ldr	r3, [r7, #0]
    f234:	7d5a      	ldrb	r2, [r3, #21]
    f236:	68fb      	ldr	r3, [r7, #12]
    f238:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            RPDO->CANrxData[1][1] = msg->data[1];
    f23c:	683b      	ldr	r3, [r7, #0]
    f23e:	7d9a      	ldrb	r2, [r3, #22]
    f240:	68fb      	ldr	r3, [r7, #12]
    f242:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
            RPDO->CANrxData[1][2] = msg->data[2];
    f246:	683b      	ldr	r3, [r7, #0]
    f248:	7dda      	ldrb	r2, [r3, #23]
    f24a:	68fb      	ldr	r3, [r7, #12]
    f24c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            RPDO->CANrxData[1][3] = msg->data[3];
    f250:	683b      	ldr	r3, [r7, #0]
    f252:	7e1a      	ldrb	r2, [r3, #24]
    f254:	68fb      	ldr	r3, [r7, #12]
    f256:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            RPDO->CANrxData[1][4] = msg->data[4];
    f25a:	683b      	ldr	r3, [r7, #0]
    f25c:	7e5a      	ldrb	r2, [r3, #25]
    f25e:	68fb      	ldr	r3, [r7, #12]
    f260:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
            RPDO->CANrxData[1][5] = msg->data[5];
    f264:	683b      	ldr	r3, [r7, #0]
    f266:	7e9a      	ldrb	r2, [r3, #26]
    f268:	68fb      	ldr	r3, [r7, #12]
    f26a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            RPDO->CANrxData[1][6] = msg->data[6];
    f26e:	683b      	ldr	r3, [r7, #0]
    f270:	7eda      	ldrb	r2, [r3, #27]
    f272:	68fb      	ldr	r3, [r7, #12]
    f274:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            RPDO->CANrxData[1][7] = msg->data[7];
    f278:	683b      	ldr	r3, [r7, #0]
    f27a:	7f1a      	ldrb	r2, [r3, #28]
    f27c:	68fb      	ldr	r3, [r7, #12]
    f27e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

            RPDO->CANrxNew[1] = true;
    f282:	68fb      	ldr	r3, [r7, #12]
    f284:	2201      	movs	r2, #1
    f286:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    f28a:	bf00      	nop
            RPDO->CANrxData[0][7] = msg->data[7];

            RPDO->CANrxNew[0] = true;
        }
    }
}
    f28c:	e02b      	b.n	f2e6 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0xfa>
            RPDO->CANrxData[0][0] = msg->data[0];
    f28e:	683b      	ldr	r3, [r7, #0]
    f290:	7d5a      	ldrb	r2, [r3, #21]
    f292:	68fb      	ldr	r3, [r7, #12]
    f294:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
            RPDO->CANrxData[0][1] = msg->data[1];
    f298:	683b      	ldr	r3, [r7, #0]
    f29a:	7d9a      	ldrb	r2, [r3, #22]
    f29c:	68fb      	ldr	r3, [r7, #12]
    f29e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
            RPDO->CANrxData[0][2] = msg->data[2];
    f2a2:	683b      	ldr	r3, [r7, #0]
    f2a4:	7dda      	ldrb	r2, [r3, #23]
    f2a6:	68fb      	ldr	r3, [r7, #12]
    f2a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            RPDO->CANrxData[0][3] = msg->data[3];
    f2ac:	683b      	ldr	r3, [r7, #0]
    f2ae:	7e1a      	ldrb	r2, [r3, #24]
    f2b0:	68fb      	ldr	r3, [r7, #12]
    f2b2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
            RPDO->CANrxData[0][4] = msg->data[4];
    f2b6:	683b      	ldr	r3, [r7, #0]
    f2b8:	7e5a      	ldrb	r2, [r3, #25]
    f2ba:	68fb      	ldr	r3, [r7, #12]
    f2bc:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
            RPDO->CANrxData[0][5] = msg->data[5];
    f2c0:	683b      	ldr	r3, [r7, #0]
    f2c2:	7e9a      	ldrb	r2, [r3, #26]
    f2c4:	68fb      	ldr	r3, [r7, #12]
    f2c6:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
            RPDO->CANrxData[0][6] = msg->data[6];
    f2ca:	683b      	ldr	r3, [r7, #0]
    f2cc:	7eda      	ldrb	r2, [r3, #27]
    f2ce:	68fb      	ldr	r3, [r7, #12]
    f2d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            RPDO->CANrxData[0][7] = msg->data[7];
    f2d4:	683b      	ldr	r3, [r7, #0]
    f2d6:	7f1a      	ldrb	r2, [r3, #28]
    f2d8:	68fb      	ldr	r3, [r7, #12]
    f2da:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
            RPDO->CANrxNew[0] = true;
    f2de:	68fb      	ldr	r3, [r7, #12]
    f2e0:	2201      	movs	r2, #1
    f2e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
    f2e6:	bf00      	nop
    f2e8:	3714      	adds	r7, #20
    f2ea:	46bd      	mov	sp, r7
    f2ec:	bc80      	pop	{r7}
    f2ee:	4770      	bx	lr

0000f2f0 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm>:
 *
 * @param RPDO RPDO object.
 * @param COB_IDUsedByRPDO _RPDO communication parameter_, _COB-ID for PDO_ variable
 * from Object dictionary (index 0x1400+, subindex 1).
 */
static void CO_RPDOconfigCom(CO_RPDO_t* RPDO, uint32_t COB_IDUsedByRPDO){
    f2f0:	b590      	push	{r4, r7, lr}
    f2f2:	b089      	sub	sp, #36	; 0x24
    f2f4:	af04      	add	r7, sp, #16
    f2f6:	6078      	str	r0, [r7, #4]
    f2f8:	6039      	str	r1, [r7, #0]
    uint32_t ID;
    CO_ReturnError_t r;

    ID = (uint32_t)COB_IDUsedByRPDO;
    f2fa:	683b      	ldr	r3, [r7, #0]
    f2fc:	60fb      	str	r3, [r7, #12]

    /* is RPDO used? */
    if((COB_IDUsedByRPDO & 0xBFFFF800L) == 0 && RPDO->dataLength && ID){
    f2fe:	683a      	ldr	r2, [r7, #0]
    f300:	4b2d      	ldr	r3, [pc, #180]	; (f3b8 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xc8>)
    f302:	4013      	ands	r3, r2
    f304:	2b00      	cmp	r3, #0
    f306:	d123      	bne.n	f350 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x60>
    f308:	687b      	ldr	r3, [r7, #4]
    f30a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
    f30e:	2b00      	cmp	r3, #0
    f310:	d01e      	beq.n	f350 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x60>
    f312:	68fb      	ldr	r3, [r7, #12]
    f314:	2b00      	cmp	r3, #0
    f316:	d01b      	beq.n	f350 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x60>
        /* is used default COB-ID? */
        if(ID == RPDO->defaultCOB_ID) ID += RPDO->nodeId;
    f318:	687b      	ldr	r3, [r7, #4]
    f31a:	69da      	ldr	r2, [r3, #28]
    f31c:	68fb      	ldr	r3, [r7, #12]
    f31e:	429a      	cmp	r2, r3
    f320:	d105      	bne.n	f32e <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x3e>
    f322:	687b      	ldr	r3, [r7, #4]
    f324:	7e1b      	ldrb	r3, [r3, #24]
    f326:	461a      	mov	r2, r3
    f328:	68fb      	ldr	r3, [r7, #12]
    f32a:	4413      	add	r3, r2
    f32c:	60fb      	str	r3, [r7, #12]
        RPDO->valid = true;
    f32e:	687b      	ldr	r3, [r7, #4]
    f330:	2201      	movs	r2, #1
    f332:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RPDO->synchronous = (RPDO->RPDOCommPar->transmissionType <= 240) ? true : false;
    f336:	687b      	ldr	r3, [r7, #4]
    f338:	68db      	ldr	r3, [r3, #12]
    f33a:	7a1b      	ldrb	r3, [r3, #8]
    f33c:	2bf0      	cmp	r3, #240	; 0xf0
    f33e:	bfd4      	ite	le
    f340:	2301      	movle	r3, #1
    f342:	2300      	movgt	r3, #0
    f344:	b2db      	uxtb	r3, r3
    f346:	461a      	mov	r2, r3
    f348:	687b      	ldr	r3, [r7, #4]
    f34a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    f34e:	e00d      	b.n	f36c <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x7c>
    }
    else{
        ID = 0;
    f350:	2300      	movs	r3, #0
    f352:	60fb      	str	r3, [r7, #12]
        RPDO->valid = false;
    f354:	687b      	ldr	r3, [r7, #4]
    f356:	2200      	movs	r2, #0
    f358:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
    f35c:	687b      	ldr	r3, [r7, #4]
    f35e:	2200      	movs	r2, #0
    f360:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    f364:	687b      	ldr	r3, [r7, #4]
    f366:	2200      	movs	r2, #0
    f368:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    r = ptrCODriverClass->CAN_Rx_BufferInit(
    f36c:	4b13      	ldr	r3, [pc, #76]	; (f3bc <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xcc>)
    f36e:	6818      	ldr	r0, [r3, #0]
    f370:	687b      	ldr	r3, [r7, #4]
    f372:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
            RPDO->CANdevRxIdx,      /* rx buffer index */
            ID,                     /* CAN identifier */
            0x7FF,                  /* mask */
            0,                      /* rtr */
            (void*)RPDO,            /* object passed to receive function */
            CO_PDO_receive);        /* this function will process received message */
    f374:	4b12      	ldr	r3, [pc, #72]	; (f3c0 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xd0>)
    f376:	9302      	str	r3, [sp, #8]
    f378:	687b      	ldr	r3, [r7, #4]
    f37a:	9301      	str	r3, [sp, #4]
    f37c:	2300      	movs	r3, #0
    f37e:	9300      	str	r3, [sp, #0]
    f380:	f240 73ff 	movw	r3, #2047	; 0x7ff
    f384:	68fa      	ldr	r2, [r7, #12]
    f386:	4c0f      	ldr	r4, [pc, #60]	; (f3c4 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xd4>)
    f388:	47a0      	blx	r4
    f38a:	4603      	mov	r3, r0
    f38c:	72fb      	strb	r3, [r7, #11]
    if(r != CO_ERROR_NO){
    f38e:	f997 300b 	ldrsb.w	r3, [r7, #11]
    f392:	2b00      	cmp	r3, #0
    f394:	d00b      	beq.n	f3ae <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xbe>
        RPDO->valid = false;
    f396:	687b      	ldr	r3, [r7, #4]
    f398:	2200      	movs	r2, #0
    f39a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
    f39e:	687b      	ldr	r3, [r7, #4]
    f3a0:	2200      	movs	r2, #0
    f3a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    f3a6:	687b      	ldr	r3, [r7, #4]
    f3a8:	2200      	movs	r2, #0
    f3aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
}
    f3ae:	bf00      	nop
    f3b0:	3714      	adds	r7, #20
    f3b2:	46bd      	mov	sp, r7
    f3b4:	bd90      	pop	{r4, r7, pc}
    f3b6:	bf00      	nop
    f3b8:	bffff800 	.word	0xbffff800
    f3bc:	20001934 	.word	0x20001934
    f3c0:	0000f1ed 	.word	0x0000f1ed
    f3c4:	0000d6dd 	.word	0x0000d6dd

0000f3c8 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh>:
 * @param TPDO TPDO object.
 * @param COB_IDUsedByTPDO _TPDO communication parameter_, _COB-ID for PDO_ variable
 * from Object dictionary (index 0x1400+, subindex 1).
 * @param syncFlag Indicate, if TPDO is synchronous.
 */
static void CO_TPDOconfigCom(CO_TPDO_t* TPDO, uint32_t COB_IDUsedByTPDO, uint8_t syncFlag){
    f3c8:	b590      	push	{r4, r7, lr}
    f3ca:	b089      	sub	sp, #36	; 0x24
    f3cc:	af02      	add	r7, sp, #8
    f3ce:	60f8      	str	r0, [r7, #12]
    f3d0:	60b9      	str	r1, [r7, #8]
    f3d2:	4613      	mov	r3, r2
    f3d4:	71fb      	strb	r3, [r7, #7]
    uint32_t ID;

    ID = (uint32_t)COB_IDUsedByTPDO;
    f3d6:	68bb      	ldr	r3, [r7, #8]
    f3d8:	617b      	str	r3, [r7, #20]

    /* is TPDO used? */
    if((COB_IDUsedByTPDO & 0xBFFFF800L) == 0 && TPDO->dataLength && ID){
    f3da:	68ba      	ldr	r2, [r7, #8]
    f3dc:	4b1c      	ldr	r3, [pc, #112]	; (f450 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x88>)
    f3de:	4013      	ands	r3, r2
    f3e0:	2b00      	cmp	r3, #0
    f3e2:	d115      	bne.n	f410 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x48>
    f3e4:	68fb      	ldr	r3, [r7, #12]
    f3e6:	7f9b      	ldrb	r3, [r3, #30]
    f3e8:	2b00      	cmp	r3, #0
    f3ea:	d011      	beq.n	f410 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x48>
    f3ec:	697b      	ldr	r3, [r7, #20]
    f3ee:	2b00      	cmp	r3, #0
    f3f0:	d00e      	beq.n	f410 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x48>
        /* is used default COB-ID? */
        if(ID == TPDO->defaultCOB_ID) ID += TPDO->nodeId;
    f3f2:	68fb      	ldr	r3, [r7, #12]
    f3f4:	699a      	ldr	r2, [r3, #24]
    f3f6:	697b      	ldr	r3, [r7, #20]
    f3f8:	429a      	cmp	r2, r3
    f3fa:	d105      	bne.n	f408 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x40>
    f3fc:	68fb      	ldr	r3, [r7, #12]
    f3fe:	7d1b      	ldrb	r3, [r3, #20]
    f400:	461a      	mov	r2, r3
    f402:	697b      	ldr	r3, [r7, #20]
    f404:	4413      	add	r3, r2
    f406:	617b      	str	r3, [r7, #20]
        TPDO->valid = true;
    f408:	68fb      	ldr	r3, [r7, #12]
    f40a:	2201      	movs	r2, #1
    f40c:	775a      	strb	r2, [r3, #29]
    f40e:	e004      	b.n	f41a <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x52>
    }
    else{
        ID = 0;
    f410:	2300      	movs	r3, #0
    f412:	617b      	str	r3, [r7, #20]
        TPDO->valid = false;
    f414:	68fb      	ldr	r3, [r7, #12]
    f416:	2200      	movs	r2, #0
    f418:	775a      	strb	r2, [r3, #29]
    }

    TPDO->CANtxBuff = ptrCODriverClass->CAN_Tx_BufferInit(
    f41a:	4b0e      	ldr	r3, [pc, #56]	; (f454 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x8c>)
    f41c:	6818      	ldr	r0, [r3, #0]
    f41e:	68fb      	ldr	r3, [r7, #12]
    f420:	6d59      	ldr	r1, [r3, #84]	; 0x54
    f422:	68fb      	ldr	r3, [r7, #12]
    f424:	7f9b      	ldrb	r3, [r3, #30]
    f426:	79fa      	ldrb	r2, [r7, #7]
    f428:	9201      	str	r2, [sp, #4]
    f42a:	9300      	str	r3, [sp, #0]
    f42c:	2300      	movs	r3, #0
    f42e:	697a      	ldr	r2, [r7, #20]
    f430:	4c09      	ldr	r4, [pc, #36]	; (f458 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x90>)
    f432:	47a0      	blx	r4
    f434:	4602      	mov	r2, r0
    f436:	68fb      	ldr	r3, [r7, #12]
    f438:	651a      	str	r2, [r3, #80]	; 0x50
            ID,                        /* CAN identifier */
            0,                         /* rtr */
            TPDO->dataLength,          /* number of data bytes */
            syncFlag);                 /* synchronous message flag bit */

    if(TPDO->CANtxBuff == 0){
    f43a:	68fb      	ldr	r3, [r7, #12]
    f43c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    f43e:	2b00      	cmp	r3, #0
    f440:	d102      	bne.n	f448 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x80>
        TPDO->valid = false;
    f442:	68fb      	ldr	r3, [r7, #12]
    f444:	2200      	movs	r2, #0
    f446:	775a      	strb	r2, [r3, #29]
    }
}
    f448:	bf00      	nop
    f44a:	371c      	adds	r7, #28
    f44c:	46bd      	mov	sp, r7
    f44e:	bd90      	pop	{r4, r7, pc}
    f450:	bffff800 	.word	0xbffff800
    f454:	20001934 	.word	0x20001934
    f458:	0000d7d9 	.word	0x0000d7d9

0000f45c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_>:
        uint8_t                 R_T,
        uint8_t               **ppData,
        uint8_t                *pLength,
        uint8_t                *pSendIfCOSFlags,
        uint8_t                *pIsMultibyteVar)
{
    f45c:	b580      	push	{r7, lr}
    f45e:	b08a      	sub	sp, #40	; 0x28
    f460:	af00      	add	r7, sp, #0
    f462:	60f8      	str	r0, [r7, #12]
    f464:	60b9      	str	r1, [r7, #8]
    f466:	603b      	str	r3, [r7, #0]
    f468:	4613      	mov	r3, r2
    f46a:	71fb      	strb	r3, [r7, #7]
    uint8_t subIndex;
    uint8_t dataLen;
    uint8_t objectLen;
    uint8_t attr;

    index = (uint32_t)(map>>16);
    f46c:	68bb      	ldr	r3, [r7, #8]
    f46e:	0c1b      	lsrs	r3, r3, #16
    f470:	61fb      	str	r3, [r7, #28]
    subIndex = (uint8_t)(map>>8);
    f472:	68bb      	ldr	r3, [r7, #8]
    f474:	0a1b      	lsrs	r3, r3, #8
    f476:	76fb      	strb	r3, [r7, #27]
    dataLen = (uint8_t) map;   /* data length in bits */
    f478:	68bb      	ldr	r3, [r7, #8]
    f47a:	76bb      	strb	r3, [r7, #26]

    /* data length must be byte aligned */
    if(dataLen&0x07) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
    f47c:	7ebb      	ldrb	r3, [r7, #26]
    f47e:	f003 0307 	and.w	r3, r3, #7
    f482:	2b00      	cmp	r3, #0
    f484:	d001      	beq.n	f48a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x2e>
    f486:	4b6b      	ldr	r3, [pc, #428]	; (f634 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
    f488:	e0cf      	b.n	f62a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    dataLen >>= 3;    /* new data length is in bytes */
    f48a:	7ebb      	ldrb	r3, [r7, #26]
    f48c:	10db      	asrs	r3, r3, #3
    f48e:	76bb      	strb	r3, [r7, #26]
    *pLength += dataLen;
    f490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f492:	781a      	ldrb	r2, [r3, #0]
    f494:	7ebb      	ldrb	r3, [r7, #26]
    f496:	4413      	add	r3, r2
    f498:	b2da      	uxtb	r2, r3
    f49a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f49c:	701a      	strb	r2, [r3, #0]

    /* total PDO length can not be more than 8 bytes */
    if(*pLength > 8) return CO_SDO_AB_MAP_LEN;  /* The number and length of the objects to be mapped would exceed PDO length. */
    f49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f4a0:	781b      	ldrb	r3, [r3, #0]
    f4a2:	2b08      	cmp	r3, #8
    f4a4:	dd01      	ble.n	f4aa <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x4e>
    f4a6:	4b64      	ldr	r3, [pc, #400]	; (f638 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1dc>)
    f4a8:	e0bf      	b.n	f62a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    /* is there a reference to dummy entries */
    if(index <=7 && subIndex == 0){
    f4aa:	69fb      	ldr	r3, [r7, #28]
    f4ac:	2b07      	cmp	r3, #7
    f4ae:	d832      	bhi.n	f516 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xba>
    f4b0:	7efb      	ldrb	r3, [r7, #27]
    f4b2:	2b00      	cmp	r3, #0
    f4b4:	d12f      	bne.n	f516 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xba>
        static uint32_t dummyTX = 0;
        static uint32_t dummyRX;
        uint8_t dummySize = 4;
    f4b6:	2304      	movs	r3, #4
    f4b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if(index<2) dummySize = 0;
    f4bc:	69fb      	ldr	r3, [r7, #28]
    f4be:	2b01      	cmp	r3, #1
    f4c0:	d803      	bhi.n	f4ca <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x6e>
    f4c2:	2300      	movs	r3, #0
    f4c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    f4c8:	e012      	b.n	f4f0 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x94>
        else if(index==2 || index==5) dummySize = 1;
    f4ca:	69fb      	ldr	r3, [r7, #28]
    f4cc:	2b02      	cmp	r3, #2
    f4ce:	d002      	beq.n	f4d6 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x7a>
    f4d0:	69fb      	ldr	r3, [r7, #28]
    f4d2:	2b05      	cmp	r3, #5
    f4d4:	d103      	bne.n	f4de <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x82>
    f4d6:	2301      	movs	r3, #1
    f4d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    f4dc:	e008      	b.n	f4f0 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x94>
        else if(index==3 || index==6) dummySize = 2;
    f4de:	69fb      	ldr	r3, [r7, #28]
    f4e0:	2b03      	cmp	r3, #3
    f4e2:	d002      	beq.n	f4ea <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x8e>
    f4e4:	69fb      	ldr	r3, [r7, #28]
    f4e6:	2b06      	cmp	r3, #6
    f4e8:	d102      	bne.n	f4f0 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x94>
    f4ea:	2302      	movs	r3, #2
    f4ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        /* is size of variable big enough for map */
        if(dummySize < dataLen) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
    f4f0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
    f4f4:	7ebb      	ldrb	r3, [r7, #26]
    f4f6:	429a      	cmp	r2, r3
    f4f8:	da01      	bge.n	f4fe <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xa2>
    f4fa:	4b4e      	ldr	r3, [pc, #312]	; (f634 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
    f4fc:	e095      	b.n	f62a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

        /* Data and ODE pointer */
        if(R_T == 0) *ppData = (uint8_t*) &dummyRX;
    f4fe:	79fb      	ldrb	r3, [r7, #7]
    f500:	2b00      	cmp	r3, #0
    f502:	d103      	bne.n	f50c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xb0>
    f504:	683b      	ldr	r3, [r7, #0]
    f506:	4a4d      	ldr	r2, [pc, #308]	; (f63c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e0>)
    f508:	601a      	str	r2, [r3, #0]
    f50a:	e002      	b.n	f512 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xb6>
        else         *ppData = (uint8_t*) &dummyTX;
    f50c:	683b      	ldr	r3, [r7, #0]
    f50e:	4a4c      	ldr	r2, [pc, #304]	; (f640 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e4>)
    f510:	601a      	str	r2, [r3, #0]

        return 0;
    f512:	2300      	movs	r3, #0
    f514:	e089      	b.n	f62a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>
    }

    /* find object in Object Dictionary */
    entryNo = ptrCODriverClass->CO_OD_find( index);
    f516:	4b4b      	ldr	r3, [pc, #300]	; (f644 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e8>)
    f518:	681b      	ldr	r3, [r3, #0]
    f51a:	3304      	adds	r3, #4
    f51c:	69f9      	ldr	r1, [r7, #28]
    f51e:	4618      	mov	r0, r3
    f520:	4b49      	ldr	r3, [pc, #292]	; (f648 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ec>)
    f522:	4798      	blx	r3
    f524:	6178      	str	r0, [r7, #20]

    /* Does object exist in OD? */
    if(entryNo == 0xFFFF || subIndex > SDO->OD[entryNo].maxSubIndex)
    f526:	697b      	ldr	r3, [r7, #20]
    f528:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f52c:	4293      	cmp	r3, r2
    f52e:	d00b      	beq.n	f548 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xec>
    f530:	7ef9      	ldrb	r1, [r7, #27]
    f532:	68fb      	ldr	r3, [r7, #12]
    f534:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    f536:	697a      	ldr	r2, [r7, #20]
    f538:	4613      	mov	r3, r2
    f53a:	009b      	lsls	r3, r3, #2
    f53c:	4413      	add	r3, r2
    f53e:	009b      	lsls	r3, r3, #2
    f540:	4403      	add	r3, r0
    f542:	791b      	ldrb	r3, [r3, #4]
    f544:	4299      	cmp	r1, r3
    f546:	dd01      	ble.n	f54c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xf0>
        return CO_SDO_AB_NOT_EXIST;   /* Object does not exist in the object dictionary. */
    f548:	4b40      	ldr	r3, [pc, #256]	; (f64c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1f0>)
    f54a:	e06e      	b.n	f62a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    attr = ptrCODriverClass->CO_OD_getAttribute( entryNo, subIndex);
    f54c:	4b3d      	ldr	r3, [pc, #244]	; (f644 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e8>)
    f54e:	681b      	ldr	r3, [r3, #0]
    f550:	3304      	adds	r3, #4
    f552:	7efa      	ldrb	r2, [r7, #27]
    f554:	6979      	ldr	r1, [r7, #20]
    f556:	4618      	mov	r0, r3
    f558:	4b3d      	ldr	r3, [pc, #244]	; (f650 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1f4>)
    f55a:	4798      	blx	r3
    f55c:	4603      	mov	r3, r0
    f55e:	74fb      	strb	r3, [r7, #19]
    /* Is object Mappable for RPDO? */
    if(R_T==0 && !((attr&CO_ODA_RPDO_MAPABLE) && (attr&CO_ODA_WRITEABLE))) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
    f560:	79fb      	ldrb	r3, [r7, #7]
    f562:	2b00      	cmp	r3, #0
    f564:	d10b      	bne.n	f57e <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x122>
    f566:	7cfb      	ldrb	r3, [r7, #19]
    f568:	f003 0310 	and.w	r3, r3, #16
    f56c:	2b00      	cmp	r3, #0
    f56e:	d004      	beq.n	f57a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x11e>
    f570:	7cfb      	ldrb	r3, [r7, #19]
    f572:	f003 0308 	and.w	r3, r3, #8
    f576:	2b00      	cmp	r3, #0
    f578:	d101      	bne.n	f57e <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x122>
    f57a:	4b2e      	ldr	r3, [pc, #184]	; (f634 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
    f57c:	e055      	b.n	f62a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>
    /* Is object Mappable for TPDO? */
    if(R_T!=0 && !((attr&CO_ODA_TPDO_MAPABLE) && (attr&CO_ODA_READABLE))) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
    f57e:	79fb      	ldrb	r3, [r7, #7]
    f580:	2b00      	cmp	r3, #0
    f582:	d00b      	beq.n	f59c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x140>
    f584:	7cfb      	ldrb	r3, [r7, #19]
    f586:	f003 0320 	and.w	r3, r3, #32
    f58a:	2b00      	cmp	r3, #0
    f58c:	d004      	beq.n	f598 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x13c>
    f58e:	7cfb      	ldrb	r3, [r7, #19]
    f590:	f003 0304 	and.w	r3, r3, #4
    f594:	2b00      	cmp	r3, #0
    f596:	d101      	bne.n	f59c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x140>
    f598:	4b26      	ldr	r3, [pc, #152]	; (f634 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
    f59a:	e046      	b.n	f62a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    /* is size of variable big enough for map */
    objectLen = ptrCODriverClass->CO_OD_getLength( entryNo, subIndex);
    f59c:	4b29      	ldr	r3, [pc, #164]	; (f644 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e8>)
    f59e:	681b      	ldr	r3, [r3, #0]
    f5a0:	3304      	adds	r3, #4
    f5a2:	7efa      	ldrb	r2, [r7, #27]
    f5a4:	6979      	ldr	r1, [r7, #20]
    f5a6:	4618      	mov	r0, r3
    f5a8:	4b2a      	ldr	r3, [pc, #168]	; (f654 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1f8>)
    f5aa:	4798      	blx	r3
    f5ac:	4603      	mov	r3, r0
    f5ae:	74bb      	strb	r3, [r7, #18]
    if(objectLen < dataLen) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
    f5b0:	7cba      	ldrb	r2, [r7, #18]
    f5b2:	7ebb      	ldrb	r3, [r7, #26]
    f5b4:	429a      	cmp	r2, r3
    f5b6:	da01      	bge.n	f5bc <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x160>
    f5b8:	4b1e      	ldr	r3, [pc, #120]	; (f634 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
    f5ba:	e036      	b.n	f62a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    /* mark multibyte variable */
    *pIsMultibyteVar = (attr&CO_ODA_MB_VALUE) ? 1 : 0;
    f5bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
    f5c0:	2b00      	cmp	r3, #0
    f5c2:	da01      	bge.n	f5c8 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x16c>
    f5c4:	2201      	movs	r2, #1
    f5c6:	e000      	b.n	f5ca <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x16e>
    f5c8:	2200      	movs	r2, #0
    f5ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    f5cc:	701a      	strb	r2, [r3, #0]

    /* pointer to data */
    *ppData = (uint8_t*) (ptrCODriverClass->CO_OD_getDataPointer( entryNo, subIndex));
    f5ce:	4b1d      	ldr	r3, [pc, #116]	; (f644 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e8>)
    f5d0:	681b      	ldr	r3, [r3, #0]
    f5d2:	3304      	adds	r3, #4
    f5d4:	7efa      	ldrb	r2, [r7, #27]
    f5d6:	6979      	ldr	r1, [r7, #20]
    f5d8:	4618      	mov	r0, r3
    f5da:	4b1f      	ldr	r3, [pc, #124]	; (f658 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1fc>)
    f5dc:	4798      	blx	r3
    f5de:	4602      	mov	r2, r0
    f5e0:	683b      	ldr	r3, [r7, #0]
    f5e2:	601a      	str	r2, [r3, #0]
        *ppData += objectLen - dataLen;
    }
#endif

    /* setup change of state flags */
    if(attr&CO_ODA_TPDO_DETECT_COS){
    f5e4:	7cfb      	ldrb	r3, [r7, #19]
    f5e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    f5ea:	2b00      	cmp	r3, #0
    f5ec:	d01c      	beq.n	f628 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1cc>
        uint32_t i;
        for(i=*pLength-dataLen; i<*pLength; i++){
    f5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f5f0:	781b      	ldrb	r3, [r3, #0]
    f5f2:	461a      	mov	r2, r3
    f5f4:	7ebb      	ldrb	r3, [r7, #26]
    f5f6:	1ad3      	subs	r3, r2, r3
    f5f8:	623b      	str	r3, [r7, #32]
    f5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f5fc:	781b      	ldrb	r3, [r3, #0]
    f5fe:	461a      	mov	r2, r3
    f600:	6a3b      	ldr	r3, [r7, #32]
    f602:	429a      	cmp	r2, r3
    f604:	d910      	bls.n	f628 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1cc>
            *pSendIfCOSFlags |= 1<<i;
    f606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f608:	781b      	ldrb	r3, [r3, #0]
    f60a:	b25a      	sxtb	r2, r3
    f60c:	2101      	movs	r1, #1
    f60e:	6a3b      	ldr	r3, [r7, #32]
    f610:	fa01 f303 	lsl.w	r3, r1, r3
    f614:	b25b      	sxtb	r3, r3
    f616:	4313      	orrs	r3, r2
    f618:	b25b      	sxtb	r3, r3
    f61a:	b2da      	uxtb	r2, r3
    f61c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f61e:	701a      	strb	r2, [r3, #0]
        for(i=*pLength-dataLen; i<*pLength; i++){
    f620:	6a3b      	ldr	r3, [r7, #32]
    f622:	3301      	adds	r3, #1
    f624:	623b      	str	r3, [r7, #32]
    f626:	e7e8      	b.n	f5fa <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x19e>
        }
    }

    return 0;
    f628:	2300      	movs	r3, #0
}
    f62a:	4618      	mov	r0, r3
    f62c:	3728      	adds	r7, #40	; 0x28
    f62e:	46bd      	mov	sp, r7
    f630:	bd80      	pop	{r7, pc}
    f632:	bf00      	nop
    f634:	06040041 	.word	0x06040041
    f638:	06040042 	.word	0x06040042
    f63c:	20001940 	.word	0x20001940
    f640:	2000193c 	.word	0x2000193c
    f644:	20001934 	.word	0x20001934
    f648:	00010a29 	.word	0x00010a29
    f64c:	06020000 	.word	0x06020000
    f650:	00010b75 	.word	0x00010b75
    f654:	00010ad1 	.word	0x00010ad1
    f658:	00010c1f 	.word	0x00010c1f

0000f65c <_ZL16CO_RPDOconfigMapP9CO_RPDO_th>:
 * @param RPDO RPDO object.
 * @param noOfMappedObjects Number of mapped object (from OD).
 *
 * @return 0 on success, otherwise SDO abort code.
 */
static uint32_t CO_RPDOconfigMap(CO_RPDO_t* RPDO, uint8_t noOfMappedObjects){
    f65c:	b590      	push	{r4, r7, lr}
    f65e:	b091      	sub	sp, #68	; 0x44
    f660:	af04      	add	r7, sp, #16
    f662:	6078      	str	r0, [r7, #4]
    f664:	460b      	mov	r3, r1
    f666:	70fb      	strb	r3, [r7, #3]
    uint32_t i;
    uint8_t length = 0;
    f668:	2300      	movs	r3, #0
    f66a:	75fb      	strb	r3, [r7, #23]
    uint32_t ret = 0;
    f66c:	2300      	movs	r3, #0
    f66e:	62bb      	str	r3, [r7, #40]	; 0x28
    const uint32_t* pMap = &RPDO->RPDOMapPar->mappedObject1;
    f670:	687b      	ldr	r3, [r7, #4]
    f672:	691b      	ldr	r3, [r3, #16]
    f674:	3304      	adds	r3, #4
    f676:	627b      	str	r3, [r7, #36]	; 0x24

    for(i=noOfMappedObjects; i>0; i--){
    f678:	78fb      	ldrb	r3, [r7, #3]
    f67a:	62fb      	str	r3, [r7, #44]	; 0x2c
    f67c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f67e:	2b00      	cmp	r3, #0
    f680:	d045      	beq.n	f70e <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xb2>
        uint32_t j;
        uint8_t* pData;
        uint8_t dummy = 0;
    f682:	2300      	movs	r3, #0
    f684:	73fb      	strb	r3, [r7, #15]
        uint8_t prevLength = length;
    f686:	7dfb      	ldrb	r3, [r7, #23]
    f688:	77fb      	strb	r3, [r7, #31]
        uint8_t MBvar;
        uint32_t map = *(pMap++);
    f68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f68c:	1d1a      	adds	r2, r3, #4
    f68e:	627a      	str	r2, [r7, #36]	; 0x24
    f690:	681b      	ldr	r3, [r3, #0]
    f692:	61bb      	str	r3, [r7, #24]

        /* function do much checking of errors in map */
        ret = CO_PDOfindMap(
    f694:	687b      	ldr	r3, [r7, #4]
    f696:	6858      	ldr	r0, [r3, #4]
                map,
                0,
                &pData,
                &length,
                &dummy,
                &MBvar);
    f698:	f107 0210 	add.w	r2, r7, #16
    f69c:	f107 030e 	add.w	r3, r7, #14
    f6a0:	9302      	str	r3, [sp, #8]
    f6a2:	f107 030f 	add.w	r3, r7, #15
    f6a6:	9301      	str	r3, [sp, #4]
    f6a8:	f107 0317 	add.w	r3, r7, #23
    f6ac:	9300      	str	r3, [sp, #0]
    f6ae:	4613      	mov	r3, r2
    f6b0:	2200      	movs	r2, #0
    f6b2:	69b9      	ldr	r1, [r7, #24]
    f6b4:	4c1a      	ldr	r4, [pc, #104]	; (f720 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xc4>)
    f6b6:	47a0      	blx	r4
    f6b8:	62b8      	str	r0, [r7, #40]	; 0x28
        if(ret){
    f6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f6bc:	2b00      	cmp	r3, #0
    f6be:	d00e      	beq.n	f6de <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0x82>
            length = 0;
    f6c0:	2300      	movs	r3, #0
    f6c2:	75fb      	strb	r3, [r7, #23]
           ptrCODriverClass->EM_ErrorReport(RPDO->em, CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR, map);
    f6c4:	4b17      	ldr	r3, [pc, #92]	; (f724 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xc8>)
    f6c6:	681b      	ldr	r3, [r3, #0]
    f6c8:	1d18      	adds	r0, r3, #4
    f6ca:	687b      	ldr	r3, [r7, #4]
    f6cc:	6819      	ldr	r1, [r3, #0]
    f6ce:	69bb      	ldr	r3, [r7, #24]
    f6d0:	9300      	str	r3, [sp, #0]
    f6d2:	f44f 4302 	mov.w	r3, #33280	; 0x8200
    f6d6:	221a      	movs	r2, #26
    f6d8:	4c13      	ldr	r4, [pc, #76]	; (f728 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xcc>)
    f6da:	47a0      	blx	r4
    f6dc:	e017      	b.n	f70e <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xb2>
        else{
            for(j=prevLength; j<length; j++)
                RPDO->mapPointer[j] = pData++;
        }
#else
        for(j=prevLength; j<length; j++){
    f6de:	7ffb      	ldrb	r3, [r7, #31]
    f6e0:	623b      	str	r3, [r7, #32]
    f6e2:	7dfb      	ldrb	r3, [r7, #23]
    f6e4:	461a      	mov	r2, r3
    f6e6:	6a3b      	ldr	r3, [r7, #32]
    f6e8:	429a      	cmp	r2, r3
    f6ea:	d90c      	bls.n	f706 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xaa>
            RPDO->mapPointer[j] = pData++;
    f6ec:	693a      	ldr	r2, [r7, #16]
    f6ee:	1c53      	adds	r3, r2, #1
    f6f0:	613b      	str	r3, [r7, #16]
    f6f2:	6879      	ldr	r1, [r7, #4]
    f6f4:	6a3b      	ldr	r3, [r7, #32]
    f6f6:	3308      	adds	r3, #8
    f6f8:	009b      	lsls	r3, r3, #2
    f6fa:	440b      	add	r3, r1
    f6fc:	605a      	str	r2, [r3, #4]
        for(j=prevLength; j<length; j++){
    f6fe:	6a3b      	ldr	r3, [r7, #32]
    f700:	3301      	adds	r3, #1
    f702:	623b      	str	r3, [r7, #32]
    f704:	e7ed      	b.n	f6e2 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0x86>
    for(i=noOfMappedObjects; i>0; i--){
    f706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f708:	3b01      	subs	r3, #1
    f70a:	62fb      	str	r3, [r7, #44]	; 0x2c
    f70c:	e7b6      	b.n	f67c <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0x20>
        }
#endif

    }

    RPDO->dataLength = length;
    f70e:	7dfa      	ldrb	r2, [r7, #23]
    f710:	687b      	ldr	r3, [r7, #4]
    f712:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

    return ret;
    f716:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
    f718:	4618      	mov	r0, r3
    f71a:	3734      	adds	r7, #52	; 0x34
    f71c:	46bd      	mov	sp, r7
    f71e:	bd90      	pop	{r4, r7, pc}
    f720:	0000f45d 	.word	0x0000f45d
    f724:	20001934 	.word	0x20001934
    f728:	0000e2cd 	.word	0x0000e2cd

0000f72c <_ZL16CO_TPDOconfigMapP9CO_TPDO_th>:
 * @param TPDO TPDO object.
 * @param noOfMappedObjects Number of mapped object (from OD).
 *
 * @return 0 on success, otherwise SDO abort code.
 */
static uint32_t CO_TPDOconfigMap(CO_TPDO_t* TPDO, uint8_t noOfMappedObjects){
    f72c:	b590      	push	{r4, r7, lr}
    f72e:	b091      	sub	sp, #68	; 0x44
    f730:	af04      	add	r7, sp, #16
    f732:	6078      	str	r0, [r7, #4]
    f734:	460b      	mov	r3, r1
    f736:	70fb      	strb	r3, [r7, #3]
    uint32_t i;
    uint8_t length = 0;
    f738:	2300      	movs	r3, #0
    f73a:	75fb      	strb	r3, [r7, #23]
    uint32_t ret = 0;
    f73c:	2300      	movs	r3, #0
    f73e:	62bb      	str	r3, [r7, #40]	; 0x28
    const uint32_t* pMap = &TPDO->TPDOMapPar->mappedObject1;
    f740:	687b      	ldr	r3, [r7, #4]
    f742:	68db      	ldr	r3, [r3, #12]
    f744:	3304      	adds	r3, #4
    f746:	627b      	str	r3, [r7, #36]	; 0x24

    TPDO->sendIfCOSFlags = 0;
    f748:	687b      	ldr	r3, [r7, #4]
    f74a:	2200      	movs	r2, #0
    f74c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    for(i=noOfMappedObjects; i>0; i--){
    f750:	78fb      	ldrb	r3, [r7, #3]
    f752:	62fb      	str	r3, [r7, #44]	; 0x2c
    f754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f756:	2b00      	cmp	r3, #0
    f758:	d042      	beq.n	f7e0 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xb4>
        uint32_t j;
        uint8_t* pData;
        uint8_t prevLength = length;
    f75a:	7dfb      	ldrb	r3, [r7, #23]
    f75c:	77fb      	strb	r3, [r7, #31]
        uint8_t MBvar;
        uint32_t map = *(pMap++);
    f75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f760:	1d1a      	adds	r2, r3, #4
    f762:	627a      	str	r2, [r7, #36]	; 0x24
    f764:	681b      	ldr	r3, [r3, #0]
    f766:	61bb      	str	r3, [r7, #24]

        /* function do much checking of errors in map */
        ret = CO_PDOfindMap(
    f768:	687b      	ldr	r3, [r7, #4]
    f76a:	6858      	ldr	r0, [r3, #4]
    f76c:	687b      	ldr	r3, [r7, #4]
    f76e:	3340      	adds	r3, #64	; 0x40
                map,
                1,
                &pData,
                &length,
                &TPDO->sendIfCOSFlags,
                &MBvar);
    f770:	f107 0110 	add.w	r1, r7, #16
    f774:	f107 020f 	add.w	r2, r7, #15
    f778:	9202      	str	r2, [sp, #8]
    f77a:	9301      	str	r3, [sp, #4]
    f77c:	f107 0317 	add.w	r3, r7, #23
    f780:	9300      	str	r3, [sp, #0]
    f782:	460b      	mov	r3, r1
    f784:	2201      	movs	r2, #1
    f786:	69b9      	ldr	r1, [r7, #24]
    f788:	4c19      	ldr	r4, [pc, #100]	; (f7f0 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xc4>)
    f78a:	47a0      	blx	r4
    f78c:	62b8      	str	r0, [r7, #40]	; 0x28
        if(ret){
    f78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f790:	2b00      	cmp	r3, #0
    f792:	d00e      	beq.n	f7b2 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0x86>
            length = 0;
    f794:	2300      	movs	r3, #0
    f796:	75fb      	strb	r3, [r7, #23]
            ptrCODriverClass->EM_ErrorReport(TPDO->em, CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR, map);
    f798:	4b16      	ldr	r3, [pc, #88]	; (f7f4 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xc8>)
    f79a:	681b      	ldr	r3, [r3, #0]
    f79c:	1d18      	adds	r0, r3, #4
    f79e:	687b      	ldr	r3, [r7, #4]
    f7a0:	6819      	ldr	r1, [r3, #0]
    f7a2:	69bb      	ldr	r3, [r7, #24]
    f7a4:	9300      	str	r3, [sp, #0]
    f7a6:	f44f 4302 	mov.w	r3, #33280	; 0x8200
    f7aa:	221a      	movs	r2, #26
    f7ac:	4c12      	ldr	r4, [pc, #72]	; (f7f8 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xcc>)
    f7ae:	47a0      	blx	r4
    f7b0:	e016      	b.n	f7e0 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xb4>
        else{
            for(j=prevLength; j<length; j++)
                TPDO->mapPointer[j] = pData++;
        }
#else
        for(j=prevLength; j<length; j++){
    f7b2:	7ffb      	ldrb	r3, [r7, #31]
    f7b4:	623b      	str	r3, [r7, #32]
    f7b6:	7dfb      	ldrb	r3, [r7, #23]
    f7b8:	461a      	mov	r2, r3
    f7ba:	6a3b      	ldr	r3, [r7, #32]
    f7bc:	429a      	cmp	r2, r3
    f7be:	d90b      	bls.n	f7d8 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xac>
            TPDO->mapPointer[j] = pData++;
    f7c0:	693b      	ldr	r3, [r7, #16]
    f7c2:	1c5a      	adds	r2, r3, #1
    f7c4:	613a      	str	r2, [r7, #16]
    f7c6:	687a      	ldr	r2, [r7, #4]
    f7c8:	6a39      	ldr	r1, [r7, #32]
    f7ca:	3108      	adds	r1, #8
    f7cc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        for(j=prevLength; j<length; j++){
    f7d0:	6a3b      	ldr	r3, [r7, #32]
    f7d2:	3301      	adds	r3, #1
    f7d4:	623b      	str	r3, [r7, #32]
    f7d6:	e7ee      	b.n	f7b6 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0x8a>
    for(i=noOfMappedObjects; i>0; i--){
    f7d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f7da:	3b01      	subs	r3, #1
    f7dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    f7de:	e7b9      	b.n	f754 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0x28>
        }
#endif

    }

    TPDO->dataLength = length;
    f7e0:	7dfa      	ldrb	r2, [r7, #23]
    f7e2:	687b      	ldr	r3, [r7, #4]
    f7e4:	779a      	strb	r2, [r3, #30]

    return ret;
    f7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
    f7e8:	4618      	mov	r0, r3
    f7ea:	3734      	adds	r7, #52	; 0x34
    f7ec:	46bd      	mov	sp, r7
    f7ee:	bd90      	pop	{r4, r7, pc}
    f7f0:	0000f45d 	.word	0x0000f45d
    f7f4:	20001934 	.word	0x20001934
    f7f8:	0000e2cd 	.word	0x0000e2cd

0000f7fc <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t>:
/*
 * Function for accessing _RPDO communication parameter_ (index 0x1400+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_RPDOcom(CO_ODF_arg_t *ODF_arg){
    f7fc:	b580      	push	{r7, lr}
    f7fe:	b088      	sub	sp, #32
    f800:	af00      	add	r7, sp, #0
    f802:	6078      	str	r0, [r7, #4]
    CO_RPDO_t *RPDO;

    RPDO = (CO_RPDO_t*) ODF_arg->object;
    f804:	687b      	ldr	r3, [r7, #4]
    f806:	681b      	ldr	r3, [r3, #0]
    f808:	61fb      	str	r3, [r7, #28]

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
    f80a:	687b      	ldr	r3, [r7, #4]
    f80c:	7f5b      	ldrb	r3, [r3, #29]
    f80e:	2b00      	cmp	r3, #0
    f810:	d025      	beq.n	f85e <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x62>
        if(ODF_arg->subIndex == 1){
    f812:	687b      	ldr	r3, [r7, #4]
    f814:	7f1b      	ldrb	r3, [r3, #28]
    f816:	2b01      	cmp	r3, #1
    f818:	d11f      	bne.n	f85a <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x5e>
            uint32_t *value = (uint32_t*) ODF_arg->data;
    f81a:	687b      	ldr	r3, [r7, #4]
    f81c:	685b      	ldr	r3, [r3, #4]
    f81e:	61bb      	str	r3, [r7, #24]

            /* if default COB ID is used, write default value here */
            if(((*value)&0xFFFF) == RPDO->defaultCOB_ID && RPDO->defaultCOB_ID)
    f820:	69bb      	ldr	r3, [r7, #24]
    f822:	681b      	ldr	r3, [r3, #0]
    f824:	b29a      	uxth	r2, r3
    f826:	69fb      	ldr	r3, [r7, #28]
    f828:	69db      	ldr	r3, [r3, #28]
    f82a:	429a      	cmp	r2, r3
    f82c:	d10a      	bne.n	f844 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x48>
    f82e:	69fb      	ldr	r3, [r7, #28]
    f830:	69db      	ldr	r3, [r3, #28]
    f832:	2b00      	cmp	r3, #0
    f834:	d006      	beq.n	f844 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x48>
                *value += RPDO->nodeId;
    f836:	69bb      	ldr	r3, [r7, #24]
    f838:	681b      	ldr	r3, [r3, #0]
    f83a:	69fa      	ldr	r2, [r7, #28]
    f83c:	7e12      	ldrb	r2, [r2, #24]
    f83e:	441a      	add	r2, r3
    f840:	69bb      	ldr	r3, [r7, #24]
    f842:	601a      	str	r2, [r3, #0]

            /* If PDO is not valid, set bit 31 */
            if(!RPDO->valid) *value |= 0x80000000L;
    f844:	69fb      	ldr	r3, [r7, #28]
    f846:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
    f84a:	2b00      	cmp	r3, #0
    f84c:	d105      	bne.n	f85a <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x5e>
    f84e:	69bb      	ldr	r3, [r7, #24]
    f850:	681b      	ldr	r3, [r3, #0]
    f852:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    f856:	69bb      	ldr	r3, [r7, #24]
    f858:	601a      	str	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
    f85a:	2300      	movs	r3, #0
    f85c:	e07f      	b.n	f95e <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>
    }

    /* Writing Object Dictionary variable */
    if(RPDO->restrictionFlags & 0x04)
    f85e:	69fb      	ldr	r3, [r7, #28]
    f860:	f893 3020 	ldrb.w	r3, [r3, #32]
    f864:	f003 0304 	and.w	r3, r3, #4
    f868:	2b00      	cmp	r3, #0
    f86a:	d001      	beq.n	f870 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x74>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
    f86c:	4b3e      	ldr	r3, [pc, #248]	; (f968 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x16c>)
    f86e:	e076      	b.n	f95e <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>
    if(*RPDO->operatingState == CO_NMT_OPERATIONAL && (RPDO->restrictionFlags & 0x01))
    f870:	69fb      	ldr	r3, [r7, #28]
    f872:	695b      	ldr	r3, [r3, #20]
    f874:	781b      	ldrb	r3, [r3, #0]
    f876:	2b05      	cmp	r3, #5
    f878:	d108      	bne.n	f88c <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x90>
    f87a:	69fb      	ldr	r3, [r7, #28]
    f87c:	f893 3020 	ldrb.w	r3, [r3, #32]
    f880:	f003 0301 	and.w	r3, r3, #1
    f884:	2b00      	cmp	r3, #0
    f886:	d001      	beq.n	f88c <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x90>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
    f888:	4b38      	ldr	r3, [pc, #224]	; (f96c <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x170>)
    f88a:	e068      	b.n	f95e <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>

    if(ODF_arg->subIndex == 1){   /* COB_ID */
    f88c:	687b      	ldr	r3, [r7, #4]
    f88e:	7f1b      	ldrb	r3, [r3, #28]
    f890:	2b01      	cmp	r3, #1
    f892:	d139      	bne.n	f908 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x10c>
        uint32_t *value = (uint32_t*) ODF_arg->data;
    f894:	687b      	ldr	r3, [r7, #4]
    f896:	685b      	ldr	r3, [r3, #4]
    f898:	617b      	str	r3, [r7, #20]

        /* bits 11...29 must be zero */
        if(*value & 0x3FFF8000L)
    f89a:	697b      	ldr	r3, [r7, #20]
    f89c:	681a      	ldr	r2, [r3, #0]
    f89e:	4b34      	ldr	r3, [pc, #208]	; (f970 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x174>)
    f8a0:	4013      	ands	r3, r2
    f8a2:	2b00      	cmp	r3, #0
    f8a4:	d001      	beq.n	f8aa <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0xae>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    f8a6:	4b33      	ldr	r3, [pc, #204]	; (f974 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x178>)
    f8a8:	e059      	b.n	f95e <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>

        /* if default COB-ID is being written, write defaultCOB_ID without nodeId */
        if(((*value)&0xFFFF) == (RPDO->defaultCOB_ID + RPDO->nodeId)){
    f8aa:	697b      	ldr	r3, [r7, #20]
    f8ac:	681b      	ldr	r3, [r3, #0]
    f8ae:	b29a      	uxth	r2, r3
    f8b0:	69fb      	ldr	r3, [r7, #28]
    f8b2:	69db      	ldr	r3, [r3, #28]
    f8b4:	69f9      	ldr	r1, [r7, #28]
    f8b6:	7e09      	ldrb	r1, [r1, #24]
    f8b8:	440b      	add	r3, r1
    f8ba:	429a      	cmp	r2, r3
    f8bc:	d10c      	bne.n	f8d8 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0xdc>
            *value &= 0xC0000000L;
    f8be:	697b      	ldr	r3, [r7, #20]
    f8c0:	681b      	ldr	r3, [r3, #0]
    f8c2:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
    f8c6:	697b      	ldr	r3, [r7, #20]
    f8c8:	601a      	str	r2, [r3, #0]
            *value += RPDO->defaultCOB_ID;
    f8ca:	697b      	ldr	r3, [r7, #20]
    f8cc:	681a      	ldr	r2, [r3, #0]
    f8ce:	69fb      	ldr	r3, [r7, #28]
    f8d0:	69db      	ldr	r3, [r3, #28]
    f8d2:	441a      	add	r2, r3
    f8d4:	697b      	ldr	r3, [r7, #20]
    f8d6:	601a      	str	r2, [r3, #0]
        }

        /* if PDO is valid, bits 0..29 can not be changed */
        if(RPDO->valid && ((*value ^ RPDO->RPDOCommPar->COB_IDUsedByRPDO) & 0x3FFFFFFFL))
    f8d8:	69fb      	ldr	r3, [r7, #28]
    f8da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
    f8de:	2b00      	cmp	r3, #0
    f8e0:	d00b      	beq.n	f8fa <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0xfe>
    f8e2:	697b      	ldr	r3, [r7, #20]
    f8e4:	681a      	ldr	r2, [r3, #0]
    f8e6:	69fb      	ldr	r3, [r7, #28]
    f8e8:	68db      	ldr	r3, [r3, #12]
    f8ea:	685b      	ldr	r3, [r3, #4]
    f8ec:	4053      	eors	r3, r2
    f8ee:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    f8f2:	2b00      	cmp	r3, #0
    f8f4:	d001      	beq.n	f8fa <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0xfe>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    f8f6:	4b1f      	ldr	r3, [pc, #124]	; (f974 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x178>)
    f8f8:	e031      	b.n	f95e <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>

        /* configure RPDO */
        CO_RPDOconfigCom(RPDO, *value);
    f8fa:	697b      	ldr	r3, [r7, #20]
    f8fc:	681b      	ldr	r3, [r3, #0]
    f8fe:	4619      	mov	r1, r3
    f900:	69f8      	ldr	r0, [r7, #28]
    f902:	4b1d      	ldr	r3, [pc, #116]	; (f978 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x17c>)
    f904:	4798      	blx	r3
    f906:	e029      	b.n	f95c <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x160>
    }
    else if(ODF_arg->subIndex == 2){   /* Transmission_type */
    f908:	687b      	ldr	r3, [r7, #4]
    f90a:	7f1b      	ldrb	r3, [r3, #28]
    f90c:	2b02      	cmp	r3, #2
    f90e:	d125      	bne.n	f95c <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x160>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    f910:	687b      	ldr	r3, [r7, #4]
    f912:	685b      	ldr	r3, [r3, #4]
    f914:	613b      	str	r3, [r7, #16]
        bool_t synchronousPrev = RPDO->synchronous;
    f916:	69fb      	ldr	r3, [r7, #28]
    f918:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
    f91c:	73fb      	strb	r3, [r7, #15]

        /* values from 241...253 are not valid */
        if(*value >= 241 && *value <= 253)
    f91e:	693b      	ldr	r3, [r7, #16]
    f920:	781b      	ldrb	r3, [r3, #0]
    f922:	2bf0      	cmp	r3, #240	; 0xf0
    f924:	dd05      	ble.n	f932 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x136>
    f926:	693b      	ldr	r3, [r7, #16]
    f928:	781b      	ldrb	r3, [r3, #0]
    f92a:	2bfd      	cmp	r3, #253	; 0xfd
    f92c:	dc01      	bgt.n	f932 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x136>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    f92e:	4b11      	ldr	r3, [pc, #68]	; (f974 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x178>)
    f930:	e015      	b.n	f95e <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>

        RPDO->synchronous = (*value <= 240) ? true : false;
    f932:	693b      	ldr	r3, [r7, #16]
    f934:	781b      	ldrb	r3, [r3, #0]
    f936:	2bf0      	cmp	r3, #240	; 0xf0
    f938:	bfd4      	ite	le
    f93a:	2301      	movle	r3, #1
    f93c:	2300      	movgt	r3, #0
    f93e:	b2db      	uxtb	r3, r3
    f940:	461a      	mov	r2, r3
    f942:	69fb      	ldr	r3, [r7, #28]
    f944:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

        /* Remove old message from second buffer. */
        if(RPDO->synchronous != synchronousPrev) {
    f948:	69fb      	ldr	r3, [r7, #28]
    f94a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
    f94e:	7bfa      	ldrb	r2, [r7, #15]
    f950:	429a      	cmp	r2, r3
    f952:	d003      	beq.n	f95c <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x160>
            RPDO->CANrxNew[1] = false;
    f954:	69fb      	ldr	r3, [r7, #28]
    f956:	2200      	movs	r2, #0
    f958:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        }
    }

    return CO_SDO_AB_NONE;
    f95c:	2300      	movs	r3, #0
}
    f95e:	4618      	mov	r0, r3
    f960:	3720      	adds	r7, #32
    f962:	46bd      	mov	sp, r7
    f964:	bd80      	pop	{r7, pc}
    f966:	bf00      	nop
    f968:	06010002 	.word	0x06010002
    f96c:	08000022 	.word	0x08000022
    f970:	3fff8000 	.word	0x3fff8000
    f974:	06090030 	.word	0x06090030
    f978:	0000f2f1 	.word	0x0000f2f1

0000f97c <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t>:
/*
 * Function for accessing _TPDO communication parameter_ (index 0x1800+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_TPDOcom(CO_ODF_arg_t *ODF_arg){
    f97c:	b580      	push	{r7, lr}
    f97e:	b088      	sub	sp, #32
    f980:	af00      	add	r7, sp, #0
    f982:	6078      	str	r0, [r7, #4]
    CO_TPDO_t *TPDO;

    TPDO = (CO_TPDO_t*) ODF_arg->object;
    f984:	687b      	ldr	r3, [r7, #4]
    f986:	681b      	ldr	r3, [r3, #0]
    f988:	61fb      	str	r3, [r7, #28]

    if(ODF_arg->subIndex == 4) return CO_SDO_AB_SUB_UNKNOWN;  /* Sub-index does not exist. */
    f98a:	687b      	ldr	r3, [r7, #4]
    f98c:	7f1b      	ldrb	r3, [r3, #28]
    f98e:	2b04      	cmp	r3, #4
    f990:	d101      	bne.n	f996 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1a>
    f992:	4b6d      	ldr	r3, [pc, #436]	; (fb48 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1cc>)
    f994:	e0d4      	b.n	fb40 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
    f996:	687b      	ldr	r3, [r7, #4]
    f998:	7f5b      	ldrb	r3, [r3, #29]
    f99a:	2b00      	cmp	r3, #0
    f99c:	d024      	beq.n	f9e8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x6c>
        if(ODF_arg->subIndex == 1){   /* COB_ID */
    f99e:	687b      	ldr	r3, [r7, #4]
    f9a0:	7f1b      	ldrb	r3, [r3, #28]
    f9a2:	2b01      	cmp	r3, #1
    f9a4:	d11e      	bne.n	f9e4 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x68>
            uint32_t *value = (uint32_t*) ODF_arg->data;
    f9a6:	687b      	ldr	r3, [r7, #4]
    f9a8:	685b      	ldr	r3, [r3, #4]
    f9aa:	61bb      	str	r3, [r7, #24]

            /* if default COB ID is used, write default value here */
            if(((*value)&0xFFFF) == TPDO->defaultCOB_ID && TPDO->defaultCOB_ID)
    f9ac:	69bb      	ldr	r3, [r7, #24]
    f9ae:	681b      	ldr	r3, [r3, #0]
    f9b0:	b29a      	uxth	r2, r3
    f9b2:	69fb      	ldr	r3, [r7, #28]
    f9b4:	699b      	ldr	r3, [r3, #24]
    f9b6:	429a      	cmp	r2, r3
    f9b8:	d10a      	bne.n	f9d0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x54>
    f9ba:	69fb      	ldr	r3, [r7, #28]
    f9bc:	699b      	ldr	r3, [r3, #24]
    f9be:	2b00      	cmp	r3, #0
    f9c0:	d006      	beq.n	f9d0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x54>
                *value += TPDO->nodeId;
    f9c2:	69bb      	ldr	r3, [r7, #24]
    f9c4:	681b      	ldr	r3, [r3, #0]
    f9c6:	69fa      	ldr	r2, [r7, #28]
    f9c8:	7d12      	ldrb	r2, [r2, #20]
    f9ca:	441a      	add	r2, r3
    f9cc:	69bb      	ldr	r3, [r7, #24]
    f9ce:	601a      	str	r2, [r3, #0]

            /* If PDO is not valid, set bit 31 */
            if(!TPDO->valid) *value |= 0x80000000L;
    f9d0:	69fb      	ldr	r3, [r7, #28]
    f9d2:	7f5b      	ldrb	r3, [r3, #29]
    f9d4:	2b00      	cmp	r3, #0
    f9d6:	d105      	bne.n	f9e4 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x68>
    f9d8:	69bb      	ldr	r3, [r7, #24]
    f9da:	681b      	ldr	r3, [r3, #0]
    f9dc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    f9e0:	69bb      	ldr	r3, [r7, #24]
    f9e2:	601a      	str	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
    f9e4:	2300      	movs	r3, #0
    f9e6:	e0ab      	b.n	fb40 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>
    }

    /* Writing Object Dictionary variable */
    if(TPDO->restrictionFlags & 0x04)
    f9e8:	69fb      	ldr	r3, [r7, #28]
    f9ea:	7f1b      	ldrb	r3, [r3, #28]
    f9ec:	f003 0304 	and.w	r3, r3, #4
    f9f0:	2b00      	cmp	r3, #0
    f9f2:	d001      	beq.n	f9f8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x7c>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
    f9f4:	4b55      	ldr	r3, [pc, #340]	; (fb4c <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1d0>)
    f9f6:	e0a3      	b.n	fb40 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>
    if(*TPDO->operatingState == CO_NMT_OPERATIONAL && (TPDO->restrictionFlags & 0x01))
    f9f8:	69fb      	ldr	r3, [r7, #28]
    f9fa:	691b      	ldr	r3, [r3, #16]
    f9fc:	781b      	ldrb	r3, [r3, #0]
    f9fe:	2b05      	cmp	r3, #5
    fa00:	d107      	bne.n	fa12 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x96>
    fa02:	69fb      	ldr	r3, [r7, #28]
    fa04:	7f1b      	ldrb	r3, [r3, #28]
    fa06:	f003 0301 	and.w	r3, r3, #1
    fa0a:	2b00      	cmp	r3, #0
    fa0c:	d001      	beq.n	fa12 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x96>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
    fa0e:	4b50      	ldr	r3, [pc, #320]	; (fb50 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1d4>)
    fa10:	e096      	b.n	fb40 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

    if(ODF_arg->subIndex == 1){   /* COB_ID */
    fa12:	687b      	ldr	r3, [r7, #4]
    fa14:	7f1b      	ldrb	r3, [r3, #28]
    fa16:	2b01      	cmp	r3, #1
    fa18:	d140      	bne.n	fa9c <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x120>
        uint32_t *value = (uint32_t*) ODF_arg->data;
    fa1a:	687b      	ldr	r3, [r7, #4]
    fa1c:	685b      	ldr	r3, [r3, #4]
    fa1e:	617b      	str	r3, [r7, #20]

        /* bits 11...29 must be zero */
        if(*value & 0x3FFF8000L)
    fa20:	697b      	ldr	r3, [r7, #20]
    fa22:	681a      	ldr	r2, [r3, #0]
    fa24:	4b4b      	ldr	r3, [pc, #300]	; (fb54 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1d8>)
    fa26:	4013      	ands	r3, r2
    fa28:	2b00      	cmp	r3, #0
    fa2a:	d001      	beq.n	fa30 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0xb4>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    fa2c:	4b4a      	ldr	r3, [pc, #296]	; (fb58 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
    fa2e:	e087      	b.n	fb40 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

        /* if default COB-ID is being written, write defaultCOB_ID without nodeId */
        if(((*value)&0xFFFF) == (TPDO->defaultCOB_ID + TPDO->nodeId)){
    fa30:	697b      	ldr	r3, [r7, #20]
    fa32:	681b      	ldr	r3, [r3, #0]
    fa34:	b29a      	uxth	r2, r3
    fa36:	69fb      	ldr	r3, [r7, #28]
    fa38:	699b      	ldr	r3, [r3, #24]
    fa3a:	69f9      	ldr	r1, [r7, #28]
    fa3c:	7d09      	ldrb	r1, [r1, #20]
    fa3e:	440b      	add	r3, r1
    fa40:	429a      	cmp	r2, r3
    fa42:	d10c      	bne.n	fa5e <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0xe2>
            *value &= 0xC0000000L;
    fa44:	697b      	ldr	r3, [r7, #20]
    fa46:	681b      	ldr	r3, [r3, #0]
    fa48:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
    fa4c:	697b      	ldr	r3, [r7, #20]
    fa4e:	601a      	str	r2, [r3, #0]
            *value += TPDO->defaultCOB_ID;
    fa50:	697b      	ldr	r3, [r7, #20]
    fa52:	681a      	ldr	r2, [r3, #0]
    fa54:	69fb      	ldr	r3, [r7, #28]
    fa56:	699b      	ldr	r3, [r3, #24]
    fa58:	441a      	add	r2, r3
    fa5a:	697b      	ldr	r3, [r7, #20]
    fa5c:	601a      	str	r2, [r3, #0]
        }

        /* if PDO is valid, bits 0..29 can not be changed */
        if(TPDO->valid && ((*value ^ TPDO->TPDOCommPar->COB_IDUsedByTPDO) & 0x3FFFFFFFL))
    fa5e:	69fb      	ldr	r3, [r7, #28]
    fa60:	7f5b      	ldrb	r3, [r3, #29]
    fa62:	2b00      	cmp	r3, #0
    fa64:	d00b      	beq.n	fa7e <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x102>
    fa66:	697b      	ldr	r3, [r7, #20]
    fa68:	681a      	ldr	r2, [r3, #0]
    fa6a:	69fb      	ldr	r3, [r7, #28]
    fa6c:	689b      	ldr	r3, [r3, #8]
    fa6e:	685b      	ldr	r3, [r3, #4]
    fa70:	4053      	eors	r3, r2
    fa72:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    fa76:	2b00      	cmp	r3, #0
    fa78:	d001      	beq.n	fa7e <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x102>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    fa7a:	4b37      	ldr	r3, [pc, #220]	; (fb58 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
    fa7c:	e060      	b.n	fb40 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

        /* configure TPDO */
        CO_TPDOconfigCom(TPDO, *value, TPDO->CANtxBuff->syncFlag);
    fa7e:	697b      	ldr	r3, [r7, #20]
    fa80:	6819      	ldr	r1, [r3, #0]
    fa82:	69fb      	ldr	r3, [r7, #28]
    fa84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    fa86:	7b9b      	ldrb	r3, [r3, #14]
    fa88:	b2db      	uxtb	r3, r3
    fa8a:	461a      	mov	r2, r3
    fa8c:	69f8      	ldr	r0, [r7, #28]
    fa8e:	4b33      	ldr	r3, [pc, #204]	; (fb5c <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1e0>)
    fa90:	4798      	blx	r3
        TPDO->syncCounter = 255;
    fa92:	69fb      	ldr	r3, [r7, #28]
    fa94:	22ff      	movs	r2, #255	; 0xff
    fa96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    fa9a:	e050      	b.n	fb3e <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
    }
    else if(ODF_arg->subIndex == 2){   /* Transmission_type */
    fa9c:	687b      	ldr	r3, [r7, #4]
    fa9e:	7f1b      	ldrb	r3, [r3, #28]
    faa0:	2b02      	cmp	r3, #2
    faa2:	d11b      	bne.n	fadc <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x160>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    faa4:	687b      	ldr	r3, [r7, #4]
    faa6:	685b      	ldr	r3, [r3, #4]
    faa8:	613b      	str	r3, [r7, #16]

        /* values from 241...253 are not valid */
        if(*value >= 241 && *value <= 253)
    faaa:	693b      	ldr	r3, [r7, #16]
    faac:	781b      	ldrb	r3, [r3, #0]
    faae:	2bf0      	cmp	r3, #240	; 0xf0
    fab0:	dd05      	ble.n	fabe <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x142>
    fab2:	693b      	ldr	r3, [r7, #16]
    fab4:	781b      	ldrb	r3, [r3, #0]
    fab6:	2bfd      	cmp	r3, #253	; 0xfd
    fab8:	dc01      	bgt.n	fabe <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x142>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    faba:	4b27      	ldr	r3, [pc, #156]	; (fb58 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
    fabc:	e040      	b.n	fb40 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>
        TPDO->CANtxBuff->syncFlag = (*value <= 240) ? 1 : 0;
    fabe:	69fb      	ldr	r3, [r7, #28]
    fac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    fac2:	693a      	ldr	r2, [r7, #16]
    fac4:	7812      	ldrb	r2, [r2, #0]
    fac6:	2af0      	cmp	r2, #240	; 0xf0
    fac8:	dc01      	bgt.n	face <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x152>
    faca:	2201      	movs	r2, #1
    facc:	e000      	b.n	fad0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x154>
    face:	2200      	movs	r2, #0
    fad0:	739a      	strb	r2, [r3, #14]
        TPDO->syncCounter = 255;
    fad2:	69fb      	ldr	r3, [r7, #28]
    fad4:	22ff      	movs	r2, #255	; 0xff
    fad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    fada:	e030      	b.n	fb3e <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
    }
    else if(ODF_arg->subIndex == 3){   /* Inhibit_Time */
    fadc:	687b      	ldr	r3, [r7, #4]
    fade:	7f1b      	ldrb	r3, [r3, #28]
    fae0:	2b03      	cmp	r3, #3
    fae2:	d109      	bne.n	faf8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x17c>
        /* if PDO is valid, value can not be changed */
        if(TPDO->valid)
    fae4:	69fb      	ldr	r3, [r7, #28]
    fae6:	7f5b      	ldrb	r3, [r3, #29]
    fae8:	2b00      	cmp	r3, #0
    faea:	d001      	beq.n	faf0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x174>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    faec:	4b1a      	ldr	r3, [pc, #104]	; (fb58 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
    faee:	e027      	b.n	fb40 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

        TPDO->inhibitTimer = 0;
    faf0:	69fb      	ldr	r3, [r7, #28]
    faf2:	2200      	movs	r2, #0
    faf4:	645a      	str	r2, [r3, #68]	; 0x44
    faf6:	e022      	b.n	fb3e <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
    }
    else if(ODF_arg->subIndex == 5){   /* Event_Timer */
    faf8:	687b      	ldr	r3, [r7, #4]
    fafa:	7f1b      	ldrb	r3, [r3, #28]
    fafc:	2b05      	cmp	r3, #5
    fafe:	d10b      	bne.n	fb18 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x19c>
        uint32_t *value = (uint32_t*) ODF_arg->data;
    fb00:	687b      	ldr	r3, [r7, #4]
    fb02:	685b      	ldr	r3, [r3, #4]
    fb04:	60bb      	str	r3, [r7, #8]

        TPDO->eventTimer = ((uint32_t) *value) * 1000;
    fb06:	68bb      	ldr	r3, [r7, #8]
    fb08:	681b      	ldr	r3, [r3, #0]
    fb0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    fb0e:	fb02 f203 	mul.w	r2, r2, r3
    fb12:	69fb      	ldr	r3, [r7, #28]
    fb14:	649a      	str	r2, [r3, #72]	; 0x48
    fb16:	e012      	b.n	fb3e <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
    }
    else if(ODF_arg->subIndex == 6){   /* SYNC start value */
    fb18:	687b      	ldr	r3, [r7, #4]
    fb1a:	7f1b      	ldrb	r3, [r3, #28]
    fb1c:	2b06      	cmp	r3, #6
    fb1e:	d10e      	bne.n	fb3e <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    fb20:	687b      	ldr	r3, [r7, #4]
    fb22:	685b      	ldr	r3, [r3, #4]
    fb24:	60fb      	str	r3, [r7, #12]

        /* if PDO is valid, value can not be changed */
        if(TPDO->valid)
    fb26:	69fb      	ldr	r3, [r7, #28]
    fb28:	7f5b      	ldrb	r3, [r3, #29]
    fb2a:	2b00      	cmp	r3, #0
    fb2c:	d001      	beq.n	fb32 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1b6>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    fb2e:	4b0a      	ldr	r3, [pc, #40]	; (fb58 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
    fb30:	e006      	b.n	fb40 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

        /* values from 240...255 are not valid */
        if(*value > 240)
    fb32:	68fb      	ldr	r3, [r7, #12]
    fb34:	781b      	ldrb	r3, [r3, #0]
    fb36:	2bf0      	cmp	r3, #240	; 0xf0
    fb38:	dd01      	ble.n	fb3e <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    fb3a:	4b07      	ldr	r3, [pc, #28]	; (fb58 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
    fb3c:	e000      	b.n	fb40 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>
    }

    return CO_SDO_AB_NONE;
    fb3e:	2300      	movs	r3, #0
}
    fb40:	4618      	mov	r0, r3
    fb42:	3720      	adds	r7, #32
    fb44:	46bd      	mov	sp, r7
    fb46:	bd80      	pop	{r7, pc}
    fb48:	06090011 	.word	0x06090011
    fb4c:	06010002 	.word	0x06010002
    fb50:	08000022 	.word	0x08000022
    fb54:	3fff8000 	.word	0x3fff8000
    fb58:	06090030 	.word	0x06090030
    fb5c:	0000f3c9 	.word	0x0000f3c9

0000fb60 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t>:
/*
 * Function for accessing _RPDO mapping parameter_ (index 0x1600+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_RPDOmap(CO_ODF_arg_t *ODF_arg){
    fb60:	b590      	push	{r4, r7, lr}
    fb62:	b08d      	sub	sp, #52	; 0x34
    fb64:	af04      	add	r7, sp, #16
    fb66:	6078      	str	r0, [r7, #4]
    CO_RPDO_t *RPDO;

    RPDO = (CO_RPDO_t*) ODF_arg->object;
    fb68:	687b      	ldr	r3, [r7, #4]
    fb6a:	681b      	ldr	r3, [r3, #0]
    fb6c:	61fb      	str	r3, [r7, #28]

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
    fb6e:	687b      	ldr	r3, [r7, #4]
    fb70:	7f5b      	ldrb	r3, [r3, #29]
    fb72:	2b00      	cmp	r3, #0
    fb74:	d010      	beq.n	fb98 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x38>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    fb76:	687b      	ldr	r3, [r7, #4]
    fb78:	685b      	ldr	r3, [r3, #4]
    fb7a:	61bb      	str	r3, [r7, #24]

        if(ODF_arg->subIndex == 0){
    fb7c:	687b      	ldr	r3, [r7, #4]
    fb7e:	7f1b      	ldrb	r3, [r3, #28]
    fb80:	2b00      	cmp	r3, #0
    fb82:	d107      	bne.n	fb94 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x34>
            /* If there is error in mapping, dataLength is 0, so numberOfMappedObjects is 0. */
            if(!RPDO->dataLength) *value = 0;
    fb84:	69fb      	ldr	r3, [r7, #28]
    fb86:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
    fb8a:	2b00      	cmp	r3, #0
    fb8c:	d102      	bne.n	fb94 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x34>
    fb8e:	69bb      	ldr	r3, [r7, #24]
    fb90:	2200      	movs	r2, #0
    fb92:	701a      	strb	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
    fb94:	2300      	movs	r3, #0
    fb96:	e054      	b.n	fc42 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>
    }

    /* Writing Object Dictionary variable */
    if(RPDO->restrictionFlags & 0x08)
    fb98:	69fb      	ldr	r3, [r7, #28]
    fb9a:	f893 3020 	ldrb.w	r3, [r3, #32]
    fb9e:	f003 0308 	and.w	r3, r3, #8
    fba2:	2b00      	cmp	r3, #0
    fba4:	d001      	beq.n	fbaa <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x4a>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
    fba6:	4b29      	ldr	r3, [pc, #164]	; (fc4c <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xec>)
    fba8:	e04b      	b.n	fc42 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>
    if(*RPDO->operatingState == CO_NMT_OPERATIONAL && (RPDO->restrictionFlags & 0x02))
    fbaa:	69fb      	ldr	r3, [r7, #28]
    fbac:	695b      	ldr	r3, [r3, #20]
    fbae:	781b      	ldrb	r3, [r3, #0]
    fbb0:	2b05      	cmp	r3, #5
    fbb2:	d108      	bne.n	fbc6 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x66>
    fbb4:	69fb      	ldr	r3, [r7, #28]
    fbb6:	f893 3020 	ldrb.w	r3, [r3, #32]
    fbba:	f003 0302 	and.w	r3, r3, #2
    fbbe:	2b00      	cmp	r3, #0
    fbc0:	d001      	beq.n	fbc6 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x66>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
    fbc2:	4b23      	ldr	r3, [pc, #140]	; (fc50 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xf0>)
    fbc4:	e03d      	b.n	fc42 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>
    if(RPDO->valid)
    fbc6:	69fb      	ldr	r3, [r7, #28]
    fbc8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
    fbcc:	2b00      	cmp	r3, #0
    fbce:	d001      	beq.n	fbd4 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x74>
        return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
    fbd0:	4b20      	ldr	r3, [pc, #128]	; (fc54 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xf4>)
    fbd2:	e036      	b.n	fc42 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>

    /* numberOfMappedObjects */
    if(ODF_arg->subIndex == 0){
    fbd4:	687b      	ldr	r3, [r7, #4]
    fbd6:	7f1b      	ldrb	r3, [r3, #28]
    fbd8:	2b00      	cmp	r3, #0
    fbda:	d110      	bne.n	fbfe <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x9e>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    fbdc:	687b      	ldr	r3, [r7, #4]
    fbde:	685b      	ldr	r3, [r3, #4]
    fbe0:	617b      	str	r3, [r7, #20]

        if(*value > 8)
    fbe2:	697b      	ldr	r3, [r7, #20]
    fbe4:	781b      	ldrb	r3, [r3, #0]
    fbe6:	2b08      	cmp	r3, #8
    fbe8:	dd01      	ble.n	fbee <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x8e>
            return CO_SDO_AB_MAP_LEN;  /* Number and length of object to be mapped exceeds PDO length. */
    fbea:	4b1b      	ldr	r3, [pc, #108]	; (fc58 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xf8>)
    fbec:	e029      	b.n	fc42 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>

        /* configure mapping */
        return (CO_SDO_abortCode_t)CO_RPDOconfigMap(RPDO, *value);
    fbee:	697b      	ldr	r3, [r7, #20]
    fbf0:	781b      	ldrb	r3, [r3, #0]
    fbf2:	4619      	mov	r1, r3
    fbf4:	69f8      	ldr	r0, [r7, #28]
    fbf6:	4b19      	ldr	r3, [pc, #100]	; (fc5c <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xfc>)
    fbf8:	4798      	blx	r3
    fbfa:	4603      	mov	r3, r0
    fbfc:	e021      	b.n	fc42 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>
    }

    /* mappedObject */
    else{
        uint32_t *value = (uint32_t*) ODF_arg->data;
    fbfe:	687b      	ldr	r3, [r7, #4]
    fc00:	685b      	ldr	r3, [r3, #4]
    fc02:	613b      	str	r3, [r7, #16]
        uint8_t* pData;
        uint8_t length = 0;
    fc04:	2300      	movs	r3, #0
    fc06:	72fb      	strb	r3, [r7, #11]
        uint8_t dummy = 0;
    fc08:	2300      	movs	r3, #0
    fc0a:	72bb      	strb	r3, [r7, #10]
        uint8_t MBvar;

        if(RPDO->dataLength)
    fc0c:	69fb      	ldr	r3, [r7, #28]
    fc0e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
    fc12:	2b00      	cmp	r3, #0
    fc14:	d001      	beq.n	fc1a <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xba>
            return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
    fc16:	4b0f      	ldr	r3, [pc, #60]	; (fc54 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xf4>)
    fc18:	e013      	b.n	fc42 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>

        /* verify if mapping is correct */
        return  (CO_SDO_abortCode_t)CO_PDOfindMap(
    fc1a:	69fb      	ldr	r3, [r7, #28]
    fc1c:	6858      	ldr	r0, [r3, #4]
    fc1e:	693b      	ldr	r3, [r7, #16]
    fc20:	6819      	ldr	r1, [r3, #0]
               *value,
                0,
               &pData,
               &length,
               &dummy,
               &MBvar);
    fc22:	f107 020c 	add.w	r2, r7, #12
    fc26:	f107 0309 	add.w	r3, r7, #9
    fc2a:	9302      	str	r3, [sp, #8]
    fc2c:	f107 030a 	add.w	r3, r7, #10
    fc30:	9301      	str	r3, [sp, #4]
    fc32:	f107 030b 	add.w	r3, r7, #11
    fc36:	9300      	str	r3, [sp, #0]
    fc38:	4613      	mov	r3, r2
    fc3a:	2200      	movs	r2, #0
    fc3c:	4c08      	ldr	r4, [pc, #32]	; (fc60 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x100>)
    fc3e:	47a0      	blx	r4
    fc40:	4603      	mov	r3, r0
    }

    return CO_SDO_AB_NONE;
}
    fc42:	4618      	mov	r0, r3
    fc44:	3724      	adds	r7, #36	; 0x24
    fc46:	46bd      	mov	sp, r7
    fc48:	bd90      	pop	{r4, r7, pc}
    fc4a:	bf00      	nop
    fc4c:	06010002 	.word	0x06010002
    fc50:	08000022 	.word	0x08000022
    fc54:	06010000 	.word	0x06010000
    fc58:	06040042 	.word	0x06040042
    fc5c:	0000f65d 	.word	0x0000f65d
    fc60:	0000f45d 	.word	0x0000f45d

0000fc64 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t>:
/*
 * Function for accessing _TPDO mapping parameter_ (index 0x1A00+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_TPDOmap(CO_ODF_arg_t *ODF_arg){
    fc64:	b590      	push	{r4, r7, lr}
    fc66:	b08d      	sub	sp, #52	; 0x34
    fc68:	af04      	add	r7, sp, #16
    fc6a:	6078      	str	r0, [r7, #4]
    CO_TPDO_t *TPDO;

    TPDO = (CO_TPDO_t*) ODF_arg->object;
    fc6c:	687b      	ldr	r3, [r7, #4]
    fc6e:	681b      	ldr	r3, [r3, #0]
    fc70:	61fb      	str	r3, [r7, #28]

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
    fc72:	687b      	ldr	r3, [r7, #4]
    fc74:	7f5b      	ldrb	r3, [r3, #29]
    fc76:	2b00      	cmp	r3, #0
    fc78:	d00f      	beq.n	fc9a <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x36>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    fc7a:	687b      	ldr	r3, [r7, #4]
    fc7c:	685b      	ldr	r3, [r3, #4]
    fc7e:	61bb      	str	r3, [r7, #24]

        if(ODF_arg->subIndex == 0){
    fc80:	687b      	ldr	r3, [r7, #4]
    fc82:	7f1b      	ldrb	r3, [r3, #28]
    fc84:	2b00      	cmp	r3, #0
    fc86:	d106      	bne.n	fc96 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x32>
            /* If there is error in mapping, dataLength is 0, so numberOfMappedObjects is 0. */
            if(!TPDO->dataLength) *value = 0;
    fc88:	69fb      	ldr	r3, [r7, #28]
    fc8a:	7f9b      	ldrb	r3, [r3, #30]
    fc8c:	2b00      	cmp	r3, #0
    fc8e:	d102      	bne.n	fc96 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x32>
    fc90:	69bb      	ldr	r3, [r7, #24]
    fc92:	2200      	movs	r2, #0
    fc94:	701a      	strb	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
    fc96:	2300      	movs	r3, #0
    fc98:	e050      	b.n	fd3c <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>
    }

    /* Writing Object Dictionary variable */
    if(TPDO->restrictionFlags & 0x08)
    fc9a:	69fb      	ldr	r3, [r7, #28]
    fc9c:	7f1b      	ldrb	r3, [r3, #28]
    fc9e:	f003 0308 	and.w	r3, r3, #8
    fca2:	2b00      	cmp	r3, #0
    fca4:	d001      	beq.n	fcaa <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x46>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
    fca6:	4b27      	ldr	r3, [pc, #156]	; (fd44 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xe0>)
    fca8:	e048      	b.n	fd3c <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>
    if(*TPDO->operatingState == CO_NMT_OPERATIONAL && (TPDO->restrictionFlags & 0x02))
    fcaa:	69fb      	ldr	r3, [r7, #28]
    fcac:	691b      	ldr	r3, [r3, #16]
    fcae:	781b      	ldrb	r3, [r3, #0]
    fcb0:	2b05      	cmp	r3, #5
    fcb2:	d107      	bne.n	fcc4 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x60>
    fcb4:	69fb      	ldr	r3, [r7, #28]
    fcb6:	7f1b      	ldrb	r3, [r3, #28]
    fcb8:	f003 0302 	and.w	r3, r3, #2
    fcbc:	2b00      	cmp	r3, #0
    fcbe:	d001      	beq.n	fcc4 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x60>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
    fcc0:	4b21      	ldr	r3, [pc, #132]	; (fd48 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xe4>)
    fcc2:	e03b      	b.n	fd3c <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>
    if(TPDO->valid)
    fcc4:	69fb      	ldr	r3, [r7, #28]
    fcc6:	7f5b      	ldrb	r3, [r3, #29]
    fcc8:	2b00      	cmp	r3, #0
    fcca:	d001      	beq.n	fcd0 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x6c>
        return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
    fccc:	4b1f      	ldr	r3, [pc, #124]	; (fd4c <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xe8>)
    fcce:	e035      	b.n	fd3c <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>

    /* numberOfMappedObjects */
    if(ODF_arg->subIndex == 0){
    fcd0:	687b      	ldr	r3, [r7, #4]
    fcd2:	7f1b      	ldrb	r3, [r3, #28]
    fcd4:	2b00      	cmp	r3, #0
    fcd6:	d110      	bne.n	fcfa <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x96>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    fcd8:	687b      	ldr	r3, [r7, #4]
    fcda:	685b      	ldr	r3, [r3, #4]
    fcdc:	617b      	str	r3, [r7, #20]

        if(*value > 8)
    fcde:	697b      	ldr	r3, [r7, #20]
    fce0:	781b      	ldrb	r3, [r3, #0]
    fce2:	2b08      	cmp	r3, #8
    fce4:	dd01      	ble.n	fcea <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x86>
            return CO_SDO_AB_MAP_LEN;  /* Number and length of object to be mapped exceeds PDO length. */
    fce6:	4b1a      	ldr	r3, [pc, #104]	; (fd50 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xec>)
    fce8:	e028      	b.n	fd3c <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>

        /* configure mapping */
        return (CO_SDO_abortCode_t)CO_TPDOconfigMap(TPDO, *value);
    fcea:	697b      	ldr	r3, [r7, #20]
    fcec:	781b      	ldrb	r3, [r3, #0]
    fcee:	4619      	mov	r1, r3
    fcf0:	69f8      	ldr	r0, [r7, #28]
    fcf2:	4b18      	ldr	r3, [pc, #96]	; (fd54 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xf0>)
    fcf4:	4798      	blx	r3
    fcf6:	4603      	mov	r3, r0
    fcf8:	e020      	b.n	fd3c <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>
    }

    /* mappedObject */
    else{
        uint32_t *value = (uint32_t*) ODF_arg->data;
    fcfa:	687b      	ldr	r3, [r7, #4]
    fcfc:	685b      	ldr	r3, [r3, #4]
    fcfe:	613b      	str	r3, [r7, #16]
        uint8_t* pData;
        uint8_t length = 0;
    fd00:	2300      	movs	r3, #0
    fd02:	72fb      	strb	r3, [r7, #11]
        uint8_t dummy = 0;
    fd04:	2300      	movs	r3, #0
    fd06:	72bb      	strb	r3, [r7, #10]
        uint8_t MBvar;

        if(TPDO->dataLength)
    fd08:	69fb      	ldr	r3, [r7, #28]
    fd0a:	7f9b      	ldrb	r3, [r3, #30]
    fd0c:	2b00      	cmp	r3, #0
    fd0e:	d001      	beq.n	fd14 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xb0>
            return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
    fd10:	4b0e      	ldr	r3, [pc, #56]	; (fd4c <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xe8>)
    fd12:	e013      	b.n	fd3c <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>

        /* verify if mapping is correct */
        return (CO_SDO_abortCode_t)CO_PDOfindMap(
    fd14:	69fb      	ldr	r3, [r7, #28]
    fd16:	6858      	ldr	r0, [r3, #4]
    fd18:	693b      	ldr	r3, [r7, #16]
    fd1a:	6819      	ldr	r1, [r3, #0]
               *value,
                1,
               &pData,
               &length,
               &dummy,
               &MBvar);
    fd1c:	f107 020c 	add.w	r2, r7, #12
    fd20:	f107 0309 	add.w	r3, r7, #9
    fd24:	9302      	str	r3, [sp, #8]
    fd26:	f107 030a 	add.w	r3, r7, #10
    fd2a:	9301      	str	r3, [sp, #4]
    fd2c:	f107 030b 	add.w	r3, r7, #11
    fd30:	9300      	str	r3, [sp, #0]
    fd32:	4613      	mov	r3, r2
    fd34:	2201      	movs	r2, #1
    fd36:	4c08      	ldr	r4, [pc, #32]	; (fd58 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xf4>)
    fd38:	47a0      	blx	r4
    fd3a:	4603      	mov	r3, r0
    }

    return CO_SDO_AB_NONE;
}
    fd3c:	4618      	mov	r0, r3
    fd3e:	3724      	adds	r7, #36	; 0x24
    fd40:	46bd      	mov	sp, r7
    fd42:	bd90      	pop	{r4, r7, pc}
    fd44:	06010002 	.word	0x06010002
    fd48:	08000022 	.word	0x08000022
    fd4c:	06010000 	.word	0x06010000
    fd50:	06040042 	.word	0x06040042
    fd54:	0000f72d 	.word	0x0000f72d
    fd58:	0000f45d 	.word	0x0000f45d

0000fd5c <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm>:
        const CO_RPDOMapPar_t  *RPDOMapPar,
        uint32_t                idx_RPDOCommPar,
        uint32_t                idx_RPDOMapPar,
        CO_CANmodule_t         *CANdevRx,
        uint32_t                CANdevRxIdx)
{
    fd5c:	b590      	push	{r4, r7, lr}
    fd5e:	b087      	sub	sp, #28
    fd60:	af02      	add	r7, sp, #8
    fd62:	60f8      	str	r0, [r7, #12]
    fd64:	60b9      	str	r1, [r7, #8]
    fd66:	607a      	str	r2, [r7, #4]
    fd68:	603b      	str	r3, [r7, #0]
    /* verify arguments */
    if(RPDO==NULL || em==NULL || SDO==NULL || SYNC==NULL || operatingState==NULL ||
    fd6a:	68bb      	ldr	r3, [r7, #8]
    fd6c:	2b00      	cmp	r3, #0
    fd6e:	d014      	beq.n	fd9a <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
    fd70:	687b      	ldr	r3, [r7, #4]
    fd72:	2b00      	cmp	r3, #0
    fd74:	d011      	beq.n	fd9a <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
    fd76:	683b      	ldr	r3, [r7, #0]
    fd78:	2b00      	cmp	r3, #0
    fd7a:	d00e      	beq.n	fd9a <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
    fd7c:	6a3b      	ldr	r3, [r7, #32]
    fd7e:	2b00      	cmp	r3, #0
    fd80:	d00b      	beq.n	fd9a <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
    fd82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    fd84:	2b00      	cmp	r3, #0
    fd86:	d008      	beq.n	fd9a <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
    fd88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fd8a:	2b00      	cmp	r3, #0
    fd8c:	d005      	beq.n	fd9a <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
        RPDOCommPar==NULL || RPDOMapPar==NULL || CANdevRx==NULL){
    fd8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    fd90:	2b00      	cmp	r3, #0
    fd92:	d002      	beq.n	fd9a <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
    fd94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    fd96:	2b00      	cmp	r3, #0
    fd98:	d102      	bne.n	fda0 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x44>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    fd9a:	f04f 33ff 	mov.w	r3, #4294967295
    fd9e:	e050      	b.n	fe42 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xe6>
    }

    /* Configure object variables */
    RPDO->em = em;
    fda0:	68bb      	ldr	r3, [r7, #8]
    fda2:	687a      	ldr	r2, [r7, #4]
    fda4:	601a      	str	r2, [r3, #0]
    RPDO->SDO = SDO;
    fda6:	68bb      	ldr	r3, [r7, #8]
    fda8:	683a      	ldr	r2, [r7, #0]
    fdaa:	605a      	str	r2, [r3, #4]
    RPDO->SYNC = SYNC;
    fdac:	68bb      	ldr	r3, [r7, #8]
    fdae:	6a3a      	ldr	r2, [r7, #32]
    fdb0:	609a      	str	r2, [r3, #8]
    RPDO->RPDOCommPar = RPDOCommPar;
    fdb2:	68bb      	ldr	r3, [r7, #8]
    fdb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    fdb6:	60da      	str	r2, [r3, #12]
    RPDO->RPDOMapPar = RPDOMapPar;
    fdb8:	68bb      	ldr	r3, [r7, #8]
    fdba:	6bba      	ldr	r2, [r7, #56]	; 0x38
    fdbc:	611a      	str	r2, [r3, #16]
    RPDO->operatingState = operatingState;
    fdbe:	68bb      	ldr	r3, [r7, #8]
    fdc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    fdc2:	615a      	str	r2, [r3, #20]
    RPDO->nodeId = nodeId;
    fdc4:	68bb      	ldr	r3, [r7, #8]
    fdc6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
    fdca:	761a      	strb	r2, [r3, #24]
    RPDO->defaultCOB_ID = defaultCOB_ID;
    fdcc:	68bb      	ldr	r3, [r7, #8]
    fdce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    fdd0:	61da      	str	r2, [r3, #28]
    RPDO->restrictionFlags = restrictionFlags;
    fdd2:	68bb      	ldr	r3, [r7, #8]
    fdd4:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
    fdd8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Configure Object dictionary entry at index 0x1400+ and 0x1600+ */
    ptrCODriverClass->CO_OD_configure( idx_RPDOCommPar, CO_ODF_RPDOcom, (void*)RPDO, 0, 0);
    fddc:	4b1b      	ldr	r3, [pc, #108]	; (fe4c <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf0>)
    fdde:	681b      	ldr	r3, [r3, #0]
    fde0:	1d18      	adds	r0, r3, #4
    fde2:	2300      	movs	r3, #0
    fde4:	9301      	str	r3, [sp, #4]
    fde6:	2300      	movs	r3, #0
    fde8:	9300      	str	r3, [sp, #0]
    fdea:	68bb      	ldr	r3, [r7, #8]
    fdec:	4a18      	ldr	r2, [pc, #96]	; (fe50 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf4>)
    fdee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    fdf0:	4c18      	ldr	r4, [pc, #96]	; (fe54 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf8>)
    fdf2:	47a0      	blx	r4
    ptrCODriverClass->CO_OD_configure( idx_RPDOMapPar, CO_ODF_RPDOmap, (void*)RPDO, 0, 0);
    fdf4:	4b15      	ldr	r3, [pc, #84]	; (fe4c <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf0>)
    fdf6:	681b      	ldr	r3, [r3, #0]
    fdf8:	1d18      	adds	r0, r3, #4
    fdfa:	2300      	movs	r3, #0
    fdfc:	9301      	str	r3, [sp, #4]
    fdfe:	2300      	movs	r3, #0
    fe00:	9300      	str	r3, [sp, #0]
    fe02:	68bb      	ldr	r3, [r7, #8]
    fe04:	4a14      	ldr	r2, [pc, #80]	; (fe58 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xfc>)
    fe06:	6c39      	ldr	r1, [r7, #64]	; 0x40
    fe08:	4c12      	ldr	r4, [pc, #72]	; (fe54 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf8>)
    fe0a:	47a0      	blx	r4

    /* configure communication and mapping */
    RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
    fe0c:	68bb      	ldr	r3, [r7, #8]
    fe0e:	2200      	movs	r2, #0
    fe10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    fe14:	68bb      	ldr	r3, [r7, #8]
    fe16:	2200      	movs	r2, #0
    fe18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    RPDO->CANdevRx = CANdevRx;
    fe1c:	68bb      	ldr	r3, [r7, #8]
    fe1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    fe20:	659a      	str	r2, [r3, #88]	; 0x58
    RPDO->CANdevRxIdx = CANdevRxIdx;
    fe22:	68bb      	ldr	r3, [r7, #8]
    fe24:	6cba      	ldr	r2, [r7, #72]	; 0x48
    fe26:	65da      	str	r2, [r3, #92]	; 0x5c

    CO_RPDOconfigMap(RPDO, RPDOMapPar->numberOfMappedObjects);
    fe28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    fe2a:	781b      	ldrb	r3, [r3, #0]
    fe2c:	4619      	mov	r1, r3
    fe2e:	68b8      	ldr	r0, [r7, #8]
    fe30:	4b0a      	ldr	r3, [pc, #40]	; (fe5c <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x100>)
    fe32:	4798      	blx	r3
    CO_RPDOconfigCom(RPDO, RPDOCommPar->COB_IDUsedByRPDO);
    fe34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fe36:	685b      	ldr	r3, [r3, #4]
    fe38:	4619      	mov	r1, r3
    fe3a:	68b8      	ldr	r0, [r7, #8]
    fe3c:	4b08      	ldr	r3, [pc, #32]	; (fe60 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x104>)
    fe3e:	4798      	blx	r3

    return CO_ERROR_NO;
    fe40:	2300      	movs	r3, #0
}
    fe42:	4618      	mov	r0, r3
    fe44:	3714      	adds	r7, #20
    fe46:	46bd      	mov	sp, r7
    fe48:	bd90      	pop	{r4, r7, pc}
    fe4a:	bf00      	nop
    fe4c:	20001934 	.word	0x20001934
    fe50:	0000f7fd 	.word	0x0000f7fd
    fe54:	00010971 	.word	0x00010971
    fe58:	0000fb61 	.word	0x0000fb61
    fe5c:	0000f65d 	.word	0x0000f65d
    fe60:	0000f2f1 	.word	0x0000f2f1

0000fe64 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm>:
        const CO_TPDOMapPar_t  *TPDOMapPar,
        uint32_t                idx_TPDOCommPar,
        uint32_t                idx_TPDOMapPar,
        CO_CANmodule_t         *CANdevTx,
        uint32_t                CANdevTxIdx)
{
    fe64:	b590      	push	{r4, r7, lr}
    fe66:	b087      	sub	sp, #28
    fe68:	af02      	add	r7, sp, #8
    fe6a:	60f8      	str	r0, [r7, #12]
    fe6c:	60b9      	str	r1, [r7, #8]
    fe6e:	607a      	str	r2, [r7, #4]
    fe70:	603b      	str	r3, [r7, #0]
    /* verify arguments */
    if(TPDO==NULL || em==NULL || SDO==NULL || operatingState==NULL ||
    fe72:	68bb      	ldr	r3, [r7, #8]
    fe74:	2b00      	cmp	r3, #0
    fe76:	d011      	beq.n	fe9c <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
    fe78:	687b      	ldr	r3, [r7, #4]
    fe7a:	2b00      	cmp	r3, #0
    fe7c:	d00e      	beq.n	fe9c <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
    fe7e:	683b      	ldr	r3, [r7, #0]
    fe80:	2b00      	cmp	r3, #0
    fe82:	d00b      	beq.n	fe9c <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
    fe84:	6a3b      	ldr	r3, [r7, #32]
    fe86:	2b00      	cmp	r3, #0
    fe88:	d008      	beq.n	fe9c <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
    fe8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    fe8c:	2b00      	cmp	r3, #0
    fe8e:	d005      	beq.n	fe9c <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
        TPDOCommPar==NULL || TPDOMapPar==NULL || CANdevTx==NULL){
    fe90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fe92:	2b00      	cmp	r3, #0
    fe94:	d002      	beq.n	fe9c <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
    fe96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    fe98:	2b00      	cmp	r3, #0
    fe9a:	d102      	bne.n	fea2 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    fe9c:	f04f 33ff 	mov.w	r3, #4294967295
    fea0:	e070      	b.n	ff84 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x120>
    }

    /* Configure object variables */
    TPDO->em = em;
    fea2:	68bb      	ldr	r3, [r7, #8]
    fea4:	687a      	ldr	r2, [r7, #4]
    fea6:	601a      	str	r2, [r3, #0]
    TPDO->SDO = SDO;
    fea8:	68bb      	ldr	r3, [r7, #8]
    feaa:	683a      	ldr	r2, [r7, #0]
    feac:	605a      	str	r2, [r3, #4]
    TPDO->TPDOCommPar = TPDOCommPar;
    feae:	68bb      	ldr	r3, [r7, #8]
    feb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    feb2:	609a      	str	r2, [r3, #8]
    TPDO->TPDOMapPar = TPDOMapPar;
    feb4:	68bb      	ldr	r3, [r7, #8]
    feb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    feb8:	60da      	str	r2, [r3, #12]
    TPDO->operatingState = operatingState;
    feba:	68bb      	ldr	r3, [r7, #8]
    febc:	6a3a      	ldr	r2, [r7, #32]
    febe:	611a      	str	r2, [r3, #16]
    TPDO->nodeId = nodeId;
    fec0:	68bb      	ldr	r3, [r7, #8]
    fec2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
    fec6:	751a      	strb	r2, [r3, #20]
    TPDO->defaultCOB_ID = defaultCOB_ID;
    fec8:	68bb      	ldr	r3, [r7, #8]
    feca:	6aba      	ldr	r2, [r7, #40]	; 0x28
    fecc:	619a      	str	r2, [r3, #24]
    TPDO->restrictionFlags = restrictionFlags;
    fece:	68bb      	ldr	r3, [r7, #8]
    fed0:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
    fed4:	771a      	strb	r2, [r3, #28]

    /* Configure Object dictionary entry at index 0x1800+ and 0x1A00+ */
    ptrCODriverClass->CO_OD_configure( idx_TPDOCommPar, CO_ODF_TPDOcom, (void*)TPDO, 0, 0);
    fed6:	4b2d      	ldr	r3, [pc, #180]	; (ff8c <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x128>)
    fed8:	681b      	ldr	r3, [r3, #0]
    feda:	1d18      	adds	r0, r3, #4
    fedc:	2300      	movs	r3, #0
    fede:	9301      	str	r3, [sp, #4]
    fee0:	2300      	movs	r3, #0
    fee2:	9300      	str	r3, [sp, #0]
    fee4:	68bb      	ldr	r3, [r7, #8]
    fee6:	4a2a      	ldr	r2, [pc, #168]	; (ff90 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x12c>)
    fee8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    feea:	4c2a      	ldr	r4, [pc, #168]	; (ff94 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x130>)
    feec:	47a0      	blx	r4
    ptrCODriverClass->CO_OD_configure( idx_TPDOMapPar, CO_ODF_TPDOmap, (void*)TPDO, 0, 0);
    feee:	4b27      	ldr	r3, [pc, #156]	; (ff8c <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x128>)
    fef0:	681b      	ldr	r3, [r3, #0]
    fef2:	1d18      	adds	r0, r3, #4
    fef4:	2300      	movs	r3, #0
    fef6:	9301      	str	r3, [sp, #4]
    fef8:	2300      	movs	r3, #0
    fefa:	9300      	str	r3, [sp, #0]
    fefc:	68bb      	ldr	r3, [r7, #8]
    fefe:	4a26      	ldr	r2, [pc, #152]	; (ff98 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x134>)
    ff00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    ff02:	4c24      	ldr	r4, [pc, #144]	; (ff94 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x130>)
    ff04:	47a0      	blx	r4

    /* configure communication and mapping */
    TPDO->CANdevTx = CANdevTx;
    ff06:	68bb      	ldr	r3, [r7, #8]
    ff08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    ff0a:	64da      	str	r2, [r3, #76]	; 0x4c
    TPDO->CANdevTxIdx = CANdevTxIdx;
    ff0c:	68bb      	ldr	r3, [r7, #8]
    ff0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    ff10:	655a      	str	r2, [r3, #84]	; 0x54
    TPDO->syncCounter = 255;
    ff12:	68bb      	ldr	r3, [r7, #8]
    ff14:	22ff      	movs	r2, #255	; 0xff
    ff16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TPDO->inhibitTimer = 0;
    ff1a:	68bb      	ldr	r3, [r7, #8]
    ff1c:	2200      	movs	r2, #0
    ff1e:	645a      	str	r2, [r3, #68]	; 0x44
    TPDO->eventTimer = ((uint32_t) TPDOCommPar->eventTimer) * 1000;
    ff20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ff22:	695b      	ldr	r3, [r3, #20]
    ff24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ff28:	fb02 f203 	mul.w	r2, r2, r3
    ff2c:	68bb      	ldr	r3, [r7, #8]
    ff2e:	649a      	str	r2, [r3, #72]	; 0x48
    if(TPDOCommPar->transmissionType>=254) TPDO->sendRequest = 1;
    ff30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ff32:	7a1b      	ldrb	r3, [r3, #8]
    ff34:	2bfd      	cmp	r3, #253	; 0xfd
    ff36:	dd02      	ble.n	ff3e <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0xda>
    ff38:	68bb      	ldr	r3, [r7, #8]
    ff3a:	2201      	movs	r2, #1
    ff3c:	77da      	strb	r2, [r3, #31]

    CO_TPDOconfigMap(TPDO, TPDOMapPar->numberOfMappedObjects);
    ff3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ff40:	781b      	ldrb	r3, [r3, #0]
    ff42:	4619      	mov	r1, r3
    ff44:	68b8      	ldr	r0, [r7, #8]
    ff46:	4b15      	ldr	r3, [pc, #84]	; (ff9c <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x138>)
    ff48:	4798      	blx	r3
    CO_TPDOconfigCom(TPDO, TPDOCommPar->COB_IDUsedByTPDO, ((TPDOCommPar->transmissionType<=240) ? 1 : 0));
    ff4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ff4c:	6859      	ldr	r1, [r3, #4]
    ff4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ff50:	7a1b      	ldrb	r3, [r3, #8]
    ff52:	2bf0      	cmp	r3, #240	; 0xf0
    ff54:	dc01      	bgt.n	ff5a <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0xf6>
    ff56:	2301      	movs	r3, #1
    ff58:	e000      	b.n	ff5c <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0xf8>
    ff5a:	2300      	movs	r3, #0
    ff5c:	461a      	mov	r2, r3
    ff5e:	68b8      	ldr	r0, [r7, #8]
    ff60:	4b0f      	ldr	r3, [pc, #60]	; (ffa0 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x13c>)
    ff62:	4798      	blx	r3

    if((TPDOCommPar->transmissionType>240 &&
    ff64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ff66:	7a1b      	ldrb	r3, [r3, #8]
    ff68:	2bf0      	cmp	r3, #240	; 0xf0
    ff6a:	dd03      	ble.n	ff74 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x110>
         TPDOCommPar->transmissionType<254) ||
    ff6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ff6e:	7a1b      	ldrb	r3, [r3, #8]
    if((TPDOCommPar->transmissionType>240 &&
    ff70:	2bfd      	cmp	r3, #253	; 0xfd
    ff72:	dd03      	ble.n	ff7c <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x118>
         TPDOCommPar->SYNCStartValue>240){
    ff74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ff76:	7e1b      	ldrb	r3, [r3, #24]
         TPDOCommPar->transmissionType<254) ||
    ff78:	2bf0      	cmp	r3, #240	; 0xf0
    ff7a:	dd02      	ble.n	ff82 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x11e>
            TPDO->valid = false;
    ff7c:	68bb      	ldr	r3, [r7, #8]
    ff7e:	2200      	movs	r2, #0
    ff80:	775a      	strb	r2, [r3, #29]
    }

    return CO_ERROR_NO;
    ff82:	2300      	movs	r3, #0
}
    ff84:	4618      	mov	r0, r3
    ff86:	3714      	adds	r7, #20
    ff88:	46bd      	mov	sp, r7
    ff8a:	bd90      	pop	{r4, r7, pc}
    ff8c:	20001934 	.word	0x20001934
    ff90:	0000f97d 	.word	0x0000f97d
    ff94:	00010971 	.word	0x00010971
    ff98:	0000fc65 	.word	0x0000fc65
    ff9c:	0000f72d 	.word	0x0000f72d
    ffa0:	0000f3c9 	.word	0x0000f3c9

0000ffa4 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t>:


/******************************************************************************/
uint8_t CO_PDO_Class::CO_TPDOisCOS(CO_TPDO_t *TPDO){
    ffa4:	b480      	push	{r7}
    ffa6:	b085      	sub	sp, #20
    ffa8:	af00      	add	r7, sp, #0
    ffaa:	6078      	str	r0, [r7, #4]
    ffac:	6039      	str	r1, [r7, #0]

    /* Prepare TPDO data automatically from Object Dictionary variables */
    uint8_t* pPDOdataByte;
    uint8_t** ppODdataByte;

    pPDOdataByte = &TPDO->CANtxBuff->data[TPDO->dataLength];
    ffae:	683b      	ldr	r3, [r7, #0]
    ffb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    ffb2:	683a      	ldr	r2, [r7, #0]
    ffb4:	7f92      	ldrb	r2, [r2, #30]
    ffb6:	4413      	add	r3, r2
    ffb8:	3305      	adds	r3, #5
    ffba:	60fb      	str	r3, [r7, #12]
    ppODdataByte = &TPDO->mapPointer[TPDO->dataLength];
    ffbc:	683b      	ldr	r3, [r7, #0]
    ffbe:	7f9b      	ldrb	r3, [r3, #30]
    ffc0:	3308      	adds	r3, #8
    ffc2:	009b      	lsls	r3, r3, #2
    ffc4:	683a      	ldr	r2, [r7, #0]
    ffc6:	4413      	add	r3, r2
    ffc8:	60bb      	str	r3, [r7, #8]

    switch(TPDO->dataLength){
    ffca:	683b      	ldr	r3, [r7, #0]
    ffcc:	7f9b      	ldrb	r3, [r3, #30]
    ffce:	3b01      	subs	r3, #1
    ffd0:	2b07      	cmp	r3, #7
    ffd2:	f200 80ea 	bhi.w	101aa <STACK_SIZE+0x1aa>
    ffd6:	a201      	add	r2, pc, #4	; (adr r2, ffdc <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x38>)
    ffd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ffdc:	00010175 	.word	0x00010175
    ffe0:	0001013f 	.word	0x0001013f
    ffe4:	00010109 	.word	0x00010109
    ffe8:	000100d3 	.word	0x000100d3
    ffec:	0001009d 	.word	0x0001009d
    fff0:	00010067 	.word	0x00010067
    fff4:	00010031 	.word	0x00010031
    fff8:	0000fffd 	.word	0x0000fffd
        case 8: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x80)) return 1;
    fffc:	68fb      	ldr	r3, [r7, #12]
    fffe:	3b01      	subs	r3, #1
   10000:	60fb      	str	r3, [r7, #12]
   10002:	68fb      	ldr	r3, [r7, #12]
   10004:	781a      	ldrb	r2, [r3, #0]
   10006:	68bb      	ldr	r3, [r7, #8]
   10008:	3b04      	subs	r3, #4
   1000a:	60bb      	str	r3, [r7, #8]
   1000c:	68bb      	ldr	r3, [r7, #8]
   1000e:	681b      	ldr	r3, [r3, #0]
   10010:	781b      	ldrb	r3, [r3, #0]
   10012:	429a      	cmp	r2, r3
   10014:	d007      	beq.n	10026 <STACK_SIZE+0x26>
   10016:	683b      	ldr	r3, [r7, #0]
   10018:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   1001c:	b25b      	sxtb	r3, r3
   1001e:	2b00      	cmp	r3, #0
   10020:	da01      	bge.n	10026 <STACK_SIZE+0x26>
   10022:	2301      	movs	r3, #1
   10024:	e000      	b.n	10028 <STACK_SIZE+0x28>
   10026:	2300      	movs	r3, #0
   10028:	2b00      	cmp	r3, #0
   1002a:	d001      	beq.n	10030 <STACK_SIZE+0x30>
   1002c:	2301      	movs	r3, #1
   1002e:	e0bd      	b.n	101ac <STACK_SIZE+0x1ac>
        case 7: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x40)) return 1;
   10030:	68fb      	ldr	r3, [r7, #12]
   10032:	3b01      	subs	r3, #1
   10034:	60fb      	str	r3, [r7, #12]
   10036:	68fb      	ldr	r3, [r7, #12]
   10038:	781a      	ldrb	r2, [r3, #0]
   1003a:	68bb      	ldr	r3, [r7, #8]
   1003c:	3b04      	subs	r3, #4
   1003e:	60bb      	str	r3, [r7, #8]
   10040:	68bb      	ldr	r3, [r7, #8]
   10042:	681b      	ldr	r3, [r3, #0]
   10044:	781b      	ldrb	r3, [r3, #0]
   10046:	429a      	cmp	r2, r3
   10048:	d008      	beq.n	1005c <STACK_SIZE+0x5c>
   1004a:	683b      	ldr	r3, [r7, #0]
   1004c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   10050:	f003 0340 	and.w	r3, r3, #64	; 0x40
   10054:	2b00      	cmp	r3, #0
   10056:	d001      	beq.n	1005c <STACK_SIZE+0x5c>
   10058:	2301      	movs	r3, #1
   1005a:	e000      	b.n	1005e <STACK_SIZE+0x5e>
   1005c:	2300      	movs	r3, #0
   1005e:	2b00      	cmp	r3, #0
   10060:	d001      	beq.n	10066 <STACK_SIZE+0x66>
   10062:	2301      	movs	r3, #1
   10064:	e0a2      	b.n	101ac <STACK_SIZE+0x1ac>
        case 6: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x20)) return 1;
   10066:	68fb      	ldr	r3, [r7, #12]
   10068:	3b01      	subs	r3, #1
   1006a:	60fb      	str	r3, [r7, #12]
   1006c:	68fb      	ldr	r3, [r7, #12]
   1006e:	781a      	ldrb	r2, [r3, #0]
   10070:	68bb      	ldr	r3, [r7, #8]
   10072:	3b04      	subs	r3, #4
   10074:	60bb      	str	r3, [r7, #8]
   10076:	68bb      	ldr	r3, [r7, #8]
   10078:	681b      	ldr	r3, [r3, #0]
   1007a:	781b      	ldrb	r3, [r3, #0]
   1007c:	429a      	cmp	r2, r3
   1007e:	d008      	beq.n	10092 <STACK_SIZE+0x92>
   10080:	683b      	ldr	r3, [r7, #0]
   10082:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   10086:	f003 0320 	and.w	r3, r3, #32
   1008a:	2b00      	cmp	r3, #0
   1008c:	d001      	beq.n	10092 <STACK_SIZE+0x92>
   1008e:	2301      	movs	r3, #1
   10090:	e000      	b.n	10094 <STACK_SIZE+0x94>
   10092:	2300      	movs	r3, #0
   10094:	2b00      	cmp	r3, #0
   10096:	d001      	beq.n	1009c <STACK_SIZE+0x9c>
   10098:	2301      	movs	r3, #1
   1009a:	e087      	b.n	101ac <STACK_SIZE+0x1ac>
        case 5: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x10)) return 1;
   1009c:	68fb      	ldr	r3, [r7, #12]
   1009e:	3b01      	subs	r3, #1
   100a0:	60fb      	str	r3, [r7, #12]
   100a2:	68fb      	ldr	r3, [r7, #12]
   100a4:	781a      	ldrb	r2, [r3, #0]
   100a6:	68bb      	ldr	r3, [r7, #8]
   100a8:	3b04      	subs	r3, #4
   100aa:	60bb      	str	r3, [r7, #8]
   100ac:	68bb      	ldr	r3, [r7, #8]
   100ae:	681b      	ldr	r3, [r3, #0]
   100b0:	781b      	ldrb	r3, [r3, #0]
   100b2:	429a      	cmp	r2, r3
   100b4:	d008      	beq.n	100c8 <STACK_SIZE+0xc8>
   100b6:	683b      	ldr	r3, [r7, #0]
   100b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   100bc:	f003 0310 	and.w	r3, r3, #16
   100c0:	2b00      	cmp	r3, #0
   100c2:	d001      	beq.n	100c8 <STACK_SIZE+0xc8>
   100c4:	2301      	movs	r3, #1
   100c6:	e000      	b.n	100ca <STACK_SIZE+0xca>
   100c8:	2300      	movs	r3, #0
   100ca:	2b00      	cmp	r3, #0
   100cc:	d001      	beq.n	100d2 <STACK_SIZE+0xd2>
   100ce:	2301      	movs	r3, #1
   100d0:	e06c      	b.n	101ac <STACK_SIZE+0x1ac>
        case 4: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x08)) return 1;
   100d2:	68fb      	ldr	r3, [r7, #12]
   100d4:	3b01      	subs	r3, #1
   100d6:	60fb      	str	r3, [r7, #12]
   100d8:	68fb      	ldr	r3, [r7, #12]
   100da:	781a      	ldrb	r2, [r3, #0]
   100dc:	68bb      	ldr	r3, [r7, #8]
   100de:	3b04      	subs	r3, #4
   100e0:	60bb      	str	r3, [r7, #8]
   100e2:	68bb      	ldr	r3, [r7, #8]
   100e4:	681b      	ldr	r3, [r3, #0]
   100e6:	781b      	ldrb	r3, [r3, #0]
   100e8:	429a      	cmp	r2, r3
   100ea:	d008      	beq.n	100fe <STACK_SIZE+0xfe>
   100ec:	683b      	ldr	r3, [r7, #0]
   100ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   100f2:	f003 0308 	and.w	r3, r3, #8
   100f6:	2b00      	cmp	r3, #0
   100f8:	d001      	beq.n	100fe <STACK_SIZE+0xfe>
   100fa:	2301      	movs	r3, #1
   100fc:	e000      	b.n	10100 <STACK_SIZE+0x100>
   100fe:	2300      	movs	r3, #0
   10100:	2b00      	cmp	r3, #0
   10102:	d001      	beq.n	10108 <STACK_SIZE+0x108>
   10104:	2301      	movs	r3, #1
   10106:	e051      	b.n	101ac <STACK_SIZE+0x1ac>
        case 3: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x04)) return 1;
   10108:	68fb      	ldr	r3, [r7, #12]
   1010a:	3b01      	subs	r3, #1
   1010c:	60fb      	str	r3, [r7, #12]
   1010e:	68fb      	ldr	r3, [r7, #12]
   10110:	781a      	ldrb	r2, [r3, #0]
   10112:	68bb      	ldr	r3, [r7, #8]
   10114:	3b04      	subs	r3, #4
   10116:	60bb      	str	r3, [r7, #8]
   10118:	68bb      	ldr	r3, [r7, #8]
   1011a:	681b      	ldr	r3, [r3, #0]
   1011c:	781b      	ldrb	r3, [r3, #0]
   1011e:	429a      	cmp	r2, r3
   10120:	d008      	beq.n	10134 <STACK_SIZE+0x134>
   10122:	683b      	ldr	r3, [r7, #0]
   10124:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   10128:	f003 0304 	and.w	r3, r3, #4
   1012c:	2b00      	cmp	r3, #0
   1012e:	d001      	beq.n	10134 <STACK_SIZE+0x134>
   10130:	2301      	movs	r3, #1
   10132:	e000      	b.n	10136 <STACK_SIZE+0x136>
   10134:	2300      	movs	r3, #0
   10136:	2b00      	cmp	r3, #0
   10138:	d001      	beq.n	1013e <STACK_SIZE+0x13e>
   1013a:	2301      	movs	r3, #1
   1013c:	e036      	b.n	101ac <STACK_SIZE+0x1ac>
        case 2: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x02)) return 1;
   1013e:	68fb      	ldr	r3, [r7, #12]
   10140:	3b01      	subs	r3, #1
   10142:	60fb      	str	r3, [r7, #12]
   10144:	68fb      	ldr	r3, [r7, #12]
   10146:	781a      	ldrb	r2, [r3, #0]
   10148:	68bb      	ldr	r3, [r7, #8]
   1014a:	3b04      	subs	r3, #4
   1014c:	60bb      	str	r3, [r7, #8]
   1014e:	68bb      	ldr	r3, [r7, #8]
   10150:	681b      	ldr	r3, [r3, #0]
   10152:	781b      	ldrb	r3, [r3, #0]
   10154:	429a      	cmp	r2, r3
   10156:	d008      	beq.n	1016a <STACK_SIZE+0x16a>
   10158:	683b      	ldr	r3, [r7, #0]
   1015a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   1015e:	f003 0302 	and.w	r3, r3, #2
   10162:	2b00      	cmp	r3, #0
   10164:	d001      	beq.n	1016a <STACK_SIZE+0x16a>
   10166:	2301      	movs	r3, #1
   10168:	e000      	b.n	1016c <STACK_SIZE+0x16c>
   1016a:	2300      	movs	r3, #0
   1016c:	2b00      	cmp	r3, #0
   1016e:	d001      	beq.n	10174 <STACK_SIZE+0x174>
   10170:	2301      	movs	r3, #1
   10172:	e01b      	b.n	101ac <STACK_SIZE+0x1ac>
        case 1: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x01)) return 1;
   10174:	68fb      	ldr	r3, [r7, #12]
   10176:	3b01      	subs	r3, #1
   10178:	60fb      	str	r3, [r7, #12]
   1017a:	68fb      	ldr	r3, [r7, #12]
   1017c:	781a      	ldrb	r2, [r3, #0]
   1017e:	68bb      	ldr	r3, [r7, #8]
   10180:	3b04      	subs	r3, #4
   10182:	60bb      	str	r3, [r7, #8]
   10184:	68bb      	ldr	r3, [r7, #8]
   10186:	681b      	ldr	r3, [r3, #0]
   10188:	781b      	ldrb	r3, [r3, #0]
   1018a:	429a      	cmp	r2, r3
   1018c:	d008      	beq.n	101a0 <STACK_SIZE+0x1a0>
   1018e:	683b      	ldr	r3, [r7, #0]
   10190:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   10194:	f003 0301 	and.w	r3, r3, #1
   10198:	2b00      	cmp	r3, #0
   1019a:	d001      	beq.n	101a0 <STACK_SIZE+0x1a0>
   1019c:	2301      	movs	r3, #1
   1019e:	e000      	b.n	101a2 <STACK_SIZE+0x1a2>
   101a0:	2300      	movs	r3, #0
   101a2:	2b00      	cmp	r3, #0
   101a4:	d001      	beq.n	101aa <STACK_SIZE+0x1aa>
   101a6:	2301      	movs	r3, #1
   101a8:	e000      	b.n	101ac <STACK_SIZE+0x1ac>
    }

    return 0;
   101aa:	2300      	movs	r3, #0
}
   101ac:	4618      	mov	r0, r3
   101ae:	3714      	adds	r7, #20
   101b0:	46bd      	mov	sp, r7
   101b2:	bc80      	pop	{r7}
   101b4:	4770      	bx	lr
   101b6:	bf00      	nop

000101b8 <_ZN12CO_PDO_Class11CO_TPDOsendEP9CO_TPDO_t>:

//#define TPDO_CALLS_EXTENSION
/******************************************************************************/
uint32_t CO_PDO_Class::CO_TPDOsend(CO_TPDO_t *TPDO){
   101b8:	b580      	push	{r7, lr}
   101ba:	b086      	sub	sp, #24
   101bc:	af00      	add	r7, sp, #0
   101be:	6078      	str	r0, [r7, #4]
   101c0:	6039      	str	r1, [r7, #0]
            ODF_arg.dataLength = CO_OD_getLength(pSDO, entryNo, subIndex);
            ext->pODFunc(&ODF_arg);
        }
    }
#endif
    i = TPDO->dataLength;
   101c2:	683b      	ldr	r3, [r7, #0]
   101c4:	7f9b      	ldrb	r3, [r3, #30]
   101c6:	617b      	str	r3, [r7, #20]
    pPDOdataByte = &TPDO->CANtxBuff->data[0];
   101c8:	683b      	ldr	r3, [r7, #0]
   101ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   101cc:	3305      	adds	r3, #5
   101ce:	613b      	str	r3, [r7, #16]
    ppODdataByte = &TPDO->mapPointer[0];
   101d0:	683b      	ldr	r3, [r7, #0]
   101d2:	3320      	adds	r3, #32
   101d4:	60fb      	str	r3, [r7, #12]

    /* Copy data from Object dictionary. */
    for(; i>0; i--) {
   101d6:	697b      	ldr	r3, [r7, #20]
   101d8:	2b00      	cmp	r3, #0
   101da:	d00c      	beq.n	101f6 <_ZN12CO_PDO_Class11CO_TPDOsendEP9CO_TPDO_t+0x3e>
        *(pPDOdataByte++) = **(ppODdataByte++);
   101dc:	693b      	ldr	r3, [r7, #16]
   101de:	1c5a      	adds	r2, r3, #1
   101e0:	613a      	str	r2, [r7, #16]
   101e2:	68fa      	ldr	r2, [r7, #12]
   101e4:	1d11      	adds	r1, r2, #4
   101e6:	60f9      	str	r1, [r7, #12]
   101e8:	6812      	ldr	r2, [r2, #0]
   101ea:	7812      	ldrb	r2, [r2, #0]
   101ec:	701a      	strb	r2, [r3, #0]
    for(; i>0; i--) {
   101ee:	697b      	ldr	r3, [r7, #20]
   101f0:	3b01      	subs	r3, #1
   101f2:	617b      	str	r3, [r7, #20]
   101f4:	e7ef      	b.n	101d6 <_ZN12CO_PDO_Class11CO_TPDOsendEP9CO_TPDO_t+0x1e>
    }

    TPDO->sendRequest = 0;
   101f6:	683b      	ldr	r3, [r7, #0]
   101f8:	2200      	movs	r2, #0
   101fa:	77da      	strb	r2, [r3, #31]

    return   ptrCODriverClass->CAN_Send( TPDO->CANtxBuff);
   101fc:	4b06      	ldr	r3, [pc, #24]	; (10218 <_ZN12CO_PDO_Class11CO_TPDOsendEP9CO_TPDO_t+0x60>)
   101fe:	681a      	ldr	r2, [r3, #0]
   10200:	683b      	ldr	r3, [r7, #0]
   10202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   10204:	4619      	mov	r1, r3
   10206:	4610      	mov	r0, r2
   10208:	4b04      	ldr	r3, [pc, #16]	; (1021c <_ZN12CO_PDO_Class11CO_TPDOsendEP9CO_TPDO_t+0x64>)
   1020a:	4798      	blx	r3
   1020c:	4603      	mov	r3, r0
}
   1020e:	4618      	mov	r0, r3
   10210:	3718      	adds	r7, #24
   10212:	46bd      	mov	sp, r7
   10214:	bd80      	pop	{r7, pc}
   10216:	bf00      	nop
   10218:	20001934 	.word	0x20001934
   1021c:	0000d885 	.word	0x0000d885

00010220 <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th>:

//#define RPDO_CALLS_EXTENSION
/******************************************************************************/
void CO_PDO_Class::CO_RPDO_process(CO_RPDO_t *RPDO, bool_t syncWas){
   10220:	b480      	push	{r7}
   10222:	b089      	sub	sp, #36	; 0x24
   10224:	af00      	add	r7, sp, #0
   10226:	60f8      	str	r0, [r7, #12]
   10228:	60b9      	str	r1, [r7, #8]
   1022a:	4613      	mov	r3, r2
   1022c:	71fb      	strb	r3, [r7, #7]

    if(!RPDO->valid || !(*RPDO->operatingState == CO_NMT_OPERATIONAL))
   1022e:	68bb      	ldr	r3, [r7, #8]
   10230:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   10234:	2b00      	cmp	r3, #0
   10236:	d004      	beq.n	10242 <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0x22>
   10238:	68bb      	ldr	r3, [r7, #8]
   1023a:	695b      	ldr	r3, [r3, #20]
   1023c:	781b      	ldrb	r3, [r3, #0]
   1023e:	2b05      	cmp	r3, #5
   10240:	d009      	beq.n	10256 <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0x36>
    {
        RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
   10242:	68bb      	ldr	r3, [r7, #8]
   10244:	2200      	movs	r2, #0
   10246:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   1024a:	68bb      	ldr	r3, [r7, #8]
   1024c:	2200      	movs	r2, #0
   1024e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
   10252:	bf00      	nop
                }
            }
#endif
        }
    }
}
   10254:	e046      	b.n	102e4 <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0xc4>
    else if(!RPDO->synchronous || syncWas)
   10256:	68bb      	ldr	r3, [r7, #8]
   10258:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
   1025c:	2b00      	cmp	r3, #0
   1025e:	d002      	beq.n	10266 <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0x46>
   10260:	79fb      	ldrb	r3, [r7, #7]
   10262:	2b00      	cmp	r3, #0
   10264:	d03e      	beq.n	102e4 <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0xc4>
        uint8_t bufNo = 0;
   10266:	2300      	movs	r3, #0
   10268:	77fb      	strb	r3, [r7, #31]
        if(RPDO->synchronous && !RPDO->SYNC->CANrxToggle) {
   1026a:	68bb      	ldr	r3, [r7, #8]
   1026c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
   10270:	2b00      	cmp	r3, #0
   10272:	d006      	beq.n	10282 <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0x62>
   10274:	68bb      	ldr	r3, [r7, #8]
   10276:	689b      	ldr	r3, [r3, #8]
   10278:	7edb      	ldrb	r3, [r3, #27]
   1027a:	2b00      	cmp	r3, #0
   1027c:	d101      	bne.n	10282 <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0x62>
            bufNo = 1;
   1027e:	2301      	movs	r3, #1
   10280:	77fb      	strb	r3, [r7, #31]
        while(RPDO->CANrxNew[bufNo]){
   10282:	7ffb      	ldrb	r3, [r7, #31]
   10284:	68ba      	ldr	r2, [r7, #8]
   10286:	4413      	add	r3, r2
   10288:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
   1028c:	b2db      	uxtb	r3, r3
   1028e:	2b00      	cmp	r3, #0
   10290:	bf14      	ite	ne
   10292:	2301      	movne	r3, #1
   10294:	2300      	moveq	r3, #0
   10296:	b2db      	uxtb	r3, r3
   10298:	2b00      	cmp	r3, #0
   1029a:	d023      	beq.n	102e4 <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0xc4>
            i = RPDO->dataLength;
   1029c:	68bb      	ldr	r3, [r7, #8]
   1029e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   102a2:	61bb      	str	r3, [r7, #24]
            pPDOdataByte = &RPDO->CANrxData[bufNo][0];
   102a4:	7ffb      	ldrb	r3, [r7, #31]
   102a6:	3308      	adds	r3, #8
   102a8:	00db      	lsls	r3, r3, #3
   102aa:	68ba      	ldr	r2, [r7, #8]
   102ac:	4413      	add	r3, r2
   102ae:	3306      	adds	r3, #6
   102b0:	617b      	str	r3, [r7, #20]
            ppODdataByte = &RPDO->mapPointer[0];
   102b2:	68bb      	ldr	r3, [r7, #8]
   102b4:	3324      	adds	r3, #36	; 0x24
   102b6:	613b      	str	r3, [r7, #16]
            RPDO->CANrxNew[bufNo] = false;
   102b8:	7ffb      	ldrb	r3, [r7, #31]
   102ba:	68ba      	ldr	r2, [r7, #8]
   102bc:	4413      	add	r3, r2
   102be:	2200      	movs	r2, #0
   102c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            for(; i>0; i--) {
   102c4:	69bb      	ldr	r3, [r7, #24]
   102c6:	2b00      	cmp	r3, #0
   102c8:	d0db      	beq.n	10282 <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0x62>
                **(ppODdataByte++) = *(pPDOdataByte++);
   102ca:	693b      	ldr	r3, [r7, #16]
   102cc:	1d1a      	adds	r2, r3, #4
   102ce:	613a      	str	r2, [r7, #16]
   102d0:	681a      	ldr	r2, [r3, #0]
   102d2:	697b      	ldr	r3, [r7, #20]
   102d4:	1c59      	adds	r1, r3, #1
   102d6:	6179      	str	r1, [r7, #20]
   102d8:	781b      	ldrb	r3, [r3, #0]
   102da:	7013      	strb	r3, [r2, #0]
            for(; i>0; i--) {
   102dc:	69bb      	ldr	r3, [r7, #24]
   102de:	3b01      	subs	r3, #1
   102e0:	61bb      	str	r3, [r7, #24]
   102e2:	e7ef      	b.n	102c4 <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0xa4>
}
   102e4:	bf00      	nop
   102e6:	3724      	adds	r7, #36	; 0x24
   102e8:	46bd      	mov	sp, r7
   102ea:	bc80      	pop	{r7}
   102ec:	4770      	bx	lr
	...

000102f0 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm>:
void CO_PDO_Class::CO_TPDO_process(
        CO_TPDO_t              *TPDO,
        CO_SYNC_t              *SYNC,
        bool_t                  syncWas,
        uint32_t                timeDifference_us)
{
   102f0:	b580      	push	{r7, lr}
   102f2:	b084      	sub	sp, #16
   102f4:	af00      	add	r7, sp, #0
   102f6:	60f8      	str	r0, [r7, #12]
   102f8:	60b9      	str	r1, [r7, #8]
   102fa:	607a      	str	r2, [r7, #4]
   102fc:	70fb      	strb	r3, [r7, #3]
    if(TPDO->valid && *TPDO->operatingState == CO_NMT_OPERATIONAL){
   102fe:	68bb      	ldr	r3, [r7, #8]
   10300:	7f5b      	ldrb	r3, [r3, #29]
   10302:	2b00      	cmp	r3, #0
   10304:	f000 809e 	beq.w	10444 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x154>
   10308:	68bb      	ldr	r3, [r7, #8]
   1030a:	691b      	ldr	r3, [r3, #16]
   1030c:	781b      	ldrb	r3, [r3, #0]
   1030e:	2b05      	cmp	r3, #5
   10310:	f040 8098 	bne.w	10444 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x154>

        /* Send PDO by application request or by Event timer */
        if(TPDO->TPDOCommPar->transmissionType >= 253){
   10314:	68bb      	ldr	r3, [r7, #8]
   10316:	689b      	ldr	r3, [r3, #8]
   10318:	7a1b      	ldrb	r3, [r3, #8]
   1031a:	2bfc      	cmp	r3, #252	; 0xfc
   1031c:	dd31      	ble.n	10382 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x92>
            if(TPDO->inhibitTimer == 0 && (TPDO->sendRequest || (TPDO->TPDOCommPar->eventTimer && TPDO->eventTimer == 0))){
   1031e:	68bb      	ldr	r3, [r7, #8]
   10320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   10322:	2b00      	cmp	r3, #0
   10324:	f040 809b 	bne.w	1045e <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
   10328:	68bb      	ldr	r3, [r7, #8]
   1032a:	7fdb      	ldrb	r3, [r3, #31]
   1032c:	2b00      	cmp	r3, #0
   1032e:	d10a      	bne.n	10346 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x56>
   10330:	68bb      	ldr	r3, [r7, #8]
   10332:	689b      	ldr	r3, [r3, #8]
   10334:	695b      	ldr	r3, [r3, #20]
   10336:	2b00      	cmp	r3, #0
   10338:	f000 8091 	beq.w	1045e <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
   1033c:	68bb      	ldr	r3, [r7, #8]
   1033e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   10340:	2b00      	cmp	r3, #0
   10342:	f040 808c 	bne.w	1045e <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
                if(CO_TPDOsend(TPDO) == CO_ERROR_NO){
   10346:	68b9      	ldr	r1, [r7, #8]
   10348:	68f8      	ldr	r0, [r7, #12]
   1034a:	4b54      	ldr	r3, [pc, #336]	; (1049c <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x1ac>)
   1034c:	4798      	blx	r3
   1034e:	4603      	mov	r3, r0
   10350:	2b00      	cmp	r3, #0
   10352:	bf0c      	ite	eq
   10354:	2301      	moveq	r3, #1
   10356:	2300      	movne	r3, #0
   10358:	b2db      	uxtb	r3, r3
   1035a:	2b00      	cmp	r3, #0
   1035c:	d07f      	beq.n	1045e <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
                    /* successfully sent */
                    TPDO->inhibitTimer = ((uint32_t) TPDO->TPDOCommPar->inhibitTime) * 100;
   1035e:	68bb      	ldr	r3, [r7, #8]
   10360:	689b      	ldr	r3, [r3, #8]
   10362:	68db      	ldr	r3, [r3, #12]
   10364:	2264      	movs	r2, #100	; 0x64
   10366:	fb02 f203 	mul.w	r2, r2, r3
   1036a:	68bb      	ldr	r3, [r7, #8]
   1036c:	645a      	str	r2, [r3, #68]	; 0x44
                    TPDO->eventTimer = ((uint32_t) TPDO->TPDOCommPar->eventTimer) * 1000;
   1036e:	68bb      	ldr	r3, [r7, #8]
   10370:	689b      	ldr	r3, [r3, #8]
   10372:	695b      	ldr	r3, [r3, #20]
   10374:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10378:	fb02 f203 	mul.w	r2, r2, r3
   1037c:	68bb      	ldr	r3, [r7, #8]
   1037e:	649a      	str	r2, [r3, #72]	; 0x48
        if(TPDO->TPDOCommPar->transmissionType >= 253){
   10380:	e06d      	b.n	1045e <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
                }
            }
        }

        /* Synchronous PDOs */
        else if(SYNC && syncWas){
   10382:	687b      	ldr	r3, [r7, #4]
   10384:	2b00      	cmp	r3, #0
   10386:	d06a      	beq.n	1045e <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
   10388:	78fb      	ldrb	r3, [r7, #3]
   1038a:	2b00      	cmp	r3, #0
   1038c:	d067      	beq.n	1045e <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
            /* send synchronous acyclic PDO */
            if(TPDO->TPDOCommPar->transmissionType == 0){
   1038e:	68bb      	ldr	r3, [r7, #8]
   10390:	689b      	ldr	r3, [r3, #8]
   10392:	7a1b      	ldrb	r3, [r3, #8]
   10394:	2b00      	cmp	r3, #0
   10396:	d108      	bne.n	103aa <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0xba>
                if(TPDO->sendRequest) CO_TPDOsend(TPDO);
   10398:	68bb      	ldr	r3, [r7, #8]
   1039a:	7fdb      	ldrb	r3, [r3, #31]
   1039c:	2b00      	cmp	r3, #0
   1039e:	d05e      	beq.n	1045e <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
   103a0:	68b9      	ldr	r1, [r7, #8]
   103a2:	68f8      	ldr	r0, [r7, #12]
   103a4:	4b3d      	ldr	r3, [pc, #244]	; (1049c <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x1ac>)
   103a6:	4798      	blx	r3
        if(TPDO->TPDOCommPar->transmissionType >= 253){
   103a8:	e059      	b.n	1045e <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
            }
            /* send synchronous cyclic PDO */
            else{
                /* is the start of synchronous TPDO transmission */
                if(TPDO->syncCounter == 255){
   103aa:	68bb      	ldr	r3, [r7, #8]
   103ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   103b0:	2bff      	cmp	r3, #255	; 0xff
   103b2:	d113      	bne.n	103dc <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0xec>
                    if(SYNC->counterOverflowValue && TPDO->TPDOCommPar->SYNCStartValue)
   103b4:	687b      	ldr	r3, [r7, #4]
   103b6:	7e1b      	ldrb	r3, [r3, #24]
   103b8:	2b00      	cmp	r3, #0
   103ba:	d009      	beq.n	103d0 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0xe0>
   103bc:	68bb      	ldr	r3, [r7, #8]
   103be:	689b      	ldr	r3, [r3, #8]
   103c0:	7e1b      	ldrb	r3, [r3, #24]
   103c2:	2b00      	cmp	r3, #0
   103c4:	d004      	beq.n	103d0 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0xe0>
                        TPDO->syncCounter = 254;   /* SYNCStartValue is in use */
   103c6:	68bb      	ldr	r3, [r7, #8]
   103c8:	22fe      	movs	r2, #254	; 0xfe
   103ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
   103ce:	e005      	b.n	103dc <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0xec>
                    else
                        TPDO->syncCounter = TPDO->TPDOCommPar->transmissionType;
   103d0:	68bb      	ldr	r3, [r7, #8]
   103d2:	689b      	ldr	r3, [r3, #8]
   103d4:	7a1a      	ldrb	r2, [r3, #8]
   103d6:	68bb      	ldr	r3, [r7, #8]
   103d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                }
                /* if the SYNCStartValue is in use, start first TPDO after SYNC with matched SYNCStartValue. */
                if(TPDO->syncCounter == 254){
   103dc:	68bb      	ldr	r3, [r7, #8]
   103de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   103e2:	2bfe      	cmp	r3, #254	; 0xfe
   103e4:	d111      	bne.n	1040a <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x11a>
                    if(SYNC->counter == TPDO->TPDOCommPar->SYNCStartValue){
   103e6:	687b      	ldr	r3, [r7, #4]
   103e8:	7f1a      	ldrb	r2, [r3, #28]
   103ea:	68bb      	ldr	r3, [r7, #8]
   103ec:	689b      	ldr	r3, [r3, #8]
   103ee:	7e1b      	ldrb	r3, [r3, #24]
   103f0:	429a      	cmp	r2, r3
   103f2:	d134      	bne.n	1045e <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
                        TPDO->syncCounter = TPDO->TPDOCommPar->transmissionType;
   103f4:	68bb      	ldr	r3, [r7, #8]
   103f6:	689b      	ldr	r3, [r3, #8]
   103f8:	7a1a      	ldrb	r2, [r3, #8]
   103fa:	68bb      	ldr	r3, [r7, #8]
   103fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                        CO_TPDOsend(TPDO);
   10400:	68b9      	ldr	r1, [r7, #8]
   10402:	68f8      	ldr	r0, [r7, #12]
   10404:	4b25      	ldr	r3, [pc, #148]	; (1049c <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x1ac>)
   10406:	4798      	blx	r3
        if(TPDO->TPDOCommPar->transmissionType >= 253){
   10408:	e029      	b.n	1045e <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
                    }
                }
                /* Send PDO after every N-th Sync */
                else if(--TPDO->syncCounter == 0){
   1040a:	68bb      	ldr	r3, [r7, #8]
   1040c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   10410:	3b01      	subs	r3, #1
   10412:	b2da      	uxtb	r2, r3
   10414:	68bb      	ldr	r3, [r7, #8]
   10416:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
   1041a:	68bb      	ldr	r3, [r7, #8]
   1041c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   10420:	2b00      	cmp	r3, #0
   10422:	bf0c      	ite	eq
   10424:	2301      	moveq	r3, #1
   10426:	2300      	movne	r3, #0
   10428:	b2db      	uxtb	r3, r3
   1042a:	2b00      	cmp	r3, #0
   1042c:	d017      	beq.n	1045e <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
                    TPDO->syncCounter = TPDO->TPDOCommPar->transmissionType;
   1042e:	68bb      	ldr	r3, [r7, #8]
   10430:	689b      	ldr	r3, [r3, #8]
   10432:	7a1a      	ldrb	r2, [r3, #8]
   10434:	68bb      	ldr	r3, [r7, #8]
   10436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                    CO_TPDOsend(TPDO);
   1043a:	68b9      	ldr	r1, [r7, #8]
   1043c:	68f8      	ldr	r0, [r7, #12]
   1043e:	4b17      	ldr	r3, [pc, #92]	; (1049c <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x1ac>)
   10440:	4798      	blx	r3
        if(TPDO->TPDOCommPar->transmissionType >= 253){
   10442:	e00c      	b.n	1045e <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
        }

    }
    else{
        /* Not operational or valid. Force TPDO first send after operational or valid. */
        if(TPDO->TPDOCommPar->transmissionType>=254) TPDO->sendRequest = 1;
   10444:	68bb      	ldr	r3, [r7, #8]
   10446:	689b      	ldr	r3, [r3, #8]
   10448:	7a1b      	ldrb	r3, [r3, #8]
   1044a:	2bfd      	cmp	r3, #253	; 0xfd
   1044c:	dd03      	ble.n	10456 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x166>
   1044e:	68bb      	ldr	r3, [r7, #8]
   10450:	2201      	movs	r2, #1
   10452:	77da      	strb	r2, [r3, #31]
   10454:	e004      	b.n	10460 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x170>
        else                                         TPDO->sendRequest = 0;
   10456:	68bb      	ldr	r3, [r7, #8]
   10458:	2200      	movs	r2, #0
   1045a:	77da      	strb	r2, [r3, #31]
   1045c:	e000      	b.n	10460 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x170>
        if(TPDO->TPDOCommPar->transmissionType >= 253){
   1045e:	bf00      	nop
    }

    /* update timers */
    TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us) ? (TPDO->inhibitTimer - timeDifference_us) : 0;
   10460:	68bb      	ldr	r3, [r7, #8]
   10462:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   10464:	69bb      	ldr	r3, [r7, #24]
   10466:	429a      	cmp	r2, r3
   10468:	d904      	bls.n	10474 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x184>
   1046a:	68bb      	ldr	r3, [r7, #8]
   1046c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1046e:	69bb      	ldr	r3, [r7, #24]
   10470:	1ad3      	subs	r3, r2, r3
   10472:	e000      	b.n	10476 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x186>
   10474:	2300      	movs	r3, #0
   10476:	68ba      	ldr	r2, [r7, #8]
   10478:	6453      	str	r3, [r2, #68]	; 0x44
    TPDO->eventTimer = (TPDO->eventTimer > timeDifference_us) ? (TPDO->eventTimer - timeDifference_us) : 0;
   1047a:	68bb      	ldr	r3, [r7, #8]
   1047c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1047e:	69bb      	ldr	r3, [r7, #24]
   10480:	429a      	cmp	r2, r3
   10482:	d904      	bls.n	1048e <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x19e>
   10484:	68bb      	ldr	r3, [r7, #8]
   10486:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   10488:	69bb      	ldr	r3, [r7, #24]
   1048a:	1ad3      	subs	r3, r2, r3
   1048c:	e000      	b.n	10490 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x1a0>
   1048e:	2300      	movs	r3, #0
   10490:	68ba      	ldr	r2, [r7, #8]
   10492:	6493      	str	r3, [r2, #72]	; 0x48
   10494:	bf00      	nop
   10496:	3710      	adds	r7, #16
   10498:	46bd      	mov	sp, r7
   1049a:	bd80      	pop	{r7, pc}
   1049c:	000101b9 	.word	0x000101b9

000104a0 <_ZN12CO_SDO_ClassC1Ev>:
#include "CO_Driver_Class.h"

CO_SDO_Class	*ptrCOSDOClass;

// default constructor
CO_SDO_Class::CO_SDO_Class()
   104a0:	b580      	push	{r7, lr}
   104a2:	b082      	sub	sp, #8
   104a4:	af00      	add	r7, sp, #0
   104a6:	6078      	str	r0, [r7, #4]
   104a8:	6878      	ldr	r0, [r7, #4]
   104aa:	4b05      	ldr	r3, [pc, #20]	; (104c0 <_ZN12CO_SDO_ClassC1Ev+0x20>)
   104ac:	4798      	blx	r3
{
	ptrCOSDOClass=this;
   104ae:	4a05      	ldr	r2, [pc, #20]	; (104c4 <_ZN12CO_SDO_ClassC1Ev+0x24>)
   104b0:	687b      	ldr	r3, [r7, #4]
   104b2:	6013      	str	r3, [r2, #0]
} //CO_SDO_Class
   104b4:	687b      	ldr	r3, [r7, #4]
   104b6:	4618      	mov	r0, r3
   104b8:	3708      	adds	r7, #8
   104ba:	46bd      	mov	sp, r7
   104bc:	bd80      	pop	{r7, pc}
   104be:	bf00      	nop
   104c0:	00012abd 	.word	0x00012abd
   104c4:	20001944 	.word	0x20001944

000104c8 <_ZN12CO_SDO_ClassD1Ev>:

// default destructor
CO_SDO_Class::~CO_SDO_Class()
   104c8:	b580      	push	{r7, lr}
   104ca:	b082      	sub	sp, #8
   104cc:	af00      	add	r7, sp, #0
   104ce:	6078      	str	r0, [r7, #4]
   104d0:	6878      	ldr	r0, [r7, #4]
   104d2:	4b03      	ldr	r3, [pc, #12]	; (104e0 <_ZN12CO_SDO_ClassD1Ev+0x18>)
   104d4:	4798      	blx	r3
{
} //~CO_SDO_Class
   104d6:	687b      	ldr	r3, [r7, #4]
   104d8:	4618      	mov	r0, r3
   104da:	3708      	adds	r7, #8
   104dc:	46bd      	mov	sp, r7
   104de:	bd80      	pop	{r7, pc}
   104e0:	00012ad1 	.word	0x00012ad1

000104e4 <_ZN12CO_SDO_Class9CO_memcpyEPhPKhm>:

void CO_SDO_Class::CO_memcpy(uint8_t dest[], const uint8_t src[], const uint32_t size){
   104e4:	b480      	push	{r7}
   104e6:	b087      	sub	sp, #28
   104e8:	af00      	add	r7, sp, #0
   104ea:	60f8      	str	r0, [r7, #12]
   104ec:	60b9      	str	r1, [r7, #8]
   104ee:	607a      	str	r2, [r7, #4]
   104f0:	603b      	str	r3, [r7, #0]
    uint32_t i;
    for(i = 0; i < size; i++){
   104f2:	2300      	movs	r3, #0
   104f4:	617b      	str	r3, [r7, #20]
   104f6:	697a      	ldr	r2, [r7, #20]
   104f8:	683b      	ldr	r3, [r7, #0]
   104fa:	429a      	cmp	r2, r3
   104fc:	d20b      	bcs.n	10516 <_ZN12CO_SDO_Class9CO_memcpyEPhPKhm+0x32>
        dest[i] = src[i];
   104fe:	68ba      	ldr	r2, [r7, #8]
   10500:	697b      	ldr	r3, [r7, #20]
   10502:	4413      	add	r3, r2
   10504:	6879      	ldr	r1, [r7, #4]
   10506:	697a      	ldr	r2, [r7, #20]
   10508:	440a      	add	r2, r1
   1050a:	7812      	ldrb	r2, [r2, #0]
   1050c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < size; i++){
   1050e:	697b      	ldr	r3, [r7, #20]
   10510:	3301      	adds	r3, #1
   10512:	617b      	str	r3, [r7, #20]
   10514:	e7ef      	b.n	104f6 <_ZN12CO_SDO_Class9CO_memcpyEPhPKhm+0x12>
    }
}
   10516:	bf00      	nop
   10518:	371c      	adds	r7, #28
   1051a:	46bd      	mov	sp, r7
   1051c:	bc80      	pop	{r7}
   1051e:	4770      	bx	lr

00010520 <_ZN12CO_SDO_Class12CO_getUint32EPKh>:
    b.u8[0] = data[0];
    b.u8[1] = data[1];
    return b.u16[0];
}

uint32_t CO_SDO_Class::CO_getUint32(const uint8_t data[]){
   10520:	b480      	push	{r7}
   10522:	b087      	sub	sp, #28
   10524:	af00      	add	r7, sp, #0
   10526:	6078      	str	r0, [r7, #4]
   10528:	6039      	str	r1, [r7, #0]
    CO_bytes_t b;
    b.u8[0] = data[0];
   1052a:	683b      	ldr	r3, [r7, #0]
   1052c:	781b      	ldrb	r3, [r3, #0]
   1052e:	723b      	strb	r3, [r7, #8]
    b.u8[1] = data[1];
   10530:	683b      	ldr	r3, [r7, #0]
   10532:	3301      	adds	r3, #1
   10534:	781b      	ldrb	r3, [r3, #0]
   10536:	727b      	strb	r3, [r7, #9]
    b.u8[2] = data[2];
   10538:	683b      	ldr	r3, [r7, #0]
   1053a:	3302      	adds	r3, #2
   1053c:	781b      	ldrb	r3, [r3, #0]
   1053e:	72bb      	strb	r3, [r7, #10]
    b.u8[3] = data[3];
   10540:	683b      	ldr	r3, [r7, #0]
   10542:	3303      	adds	r3, #3
   10544:	781b      	ldrb	r3, [r3, #0]
   10546:	72fb      	strb	r3, [r7, #11]
    return b.u32[0];
   10548:	68bb      	ldr	r3, [r7, #8]
}
   1054a:	4618      	mov	r0, r3
   1054c:	371c      	adds	r7, #28
   1054e:	46bd      	mov	sp, r7
   10550:	bc80      	pop	{r7}
   10552:	4770      	bx	lr

00010554 <_ZN12CO_SDO_Class12CO_setUint32EPhm>:
    b.u16[0] = value;
    data[0] = b.u8[0];
    data[1] = b.u8[1];
}

void CO_SDO_Class::CO_setUint32(uint8_t data[], const uint32_t value){
   10554:	b480      	push	{r7}
   10556:	b089      	sub	sp, #36	; 0x24
   10558:	af00      	add	r7, sp, #0
   1055a:	60f8      	str	r0, [r7, #12]
   1055c:	60b9      	str	r1, [r7, #8]
   1055e:	607a      	str	r2, [r7, #4]
    CO_bytes_t b;
    b.u32[0] = value;
   10560:	687b      	ldr	r3, [r7, #4]
   10562:	613b      	str	r3, [r7, #16]
    data[0] = b.u8[0];
   10564:	7c3a      	ldrb	r2, [r7, #16]
   10566:	68bb      	ldr	r3, [r7, #8]
   10568:	701a      	strb	r2, [r3, #0]
    data[1] = b.u8[1];
   1056a:	68bb      	ldr	r3, [r7, #8]
   1056c:	3301      	adds	r3, #1
   1056e:	7c7a      	ldrb	r2, [r7, #17]
   10570:	701a      	strb	r2, [r3, #0]
    data[2] = b.u8[2];
   10572:	68bb      	ldr	r3, [r7, #8]
   10574:	3302      	adds	r3, #2
   10576:	7cba      	ldrb	r2, [r7, #18]
   10578:	701a      	strb	r2, [r3, #0]
    data[3] = b.u8[3];
   1057a:	68bb      	ldr	r3, [r7, #8]
   1057c:	3303      	adds	r3, #3
   1057e:	7cfa      	ldrb	r2, [r7, #19]
   10580:	701a      	strb	r2, [r3, #0]
}
   10582:	bf00      	nop
   10584:	3724      	adds	r7, #36	; 0x24
   10586:	46bd      	mov	sp, r7
   10588:	bc80      	pop	{r7}
   1058a:	4770      	bx	lr

0001058c <_ZN12CO_SDO_Class14CO_memcpySwap2EPvPKv>:

#ifdef CO_LITTLE_ENDIAN
void CO_SDO_Class::CO_memcpySwap2(void* dest, const void* src){
   1058c:	b480      	push	{r7}
   1058e:	b087      	sub	sp, #28
   10590:	af00      	add	r7, sp, #0
   10592:	60f8      	str	r0, [r7, #12]
   10594:	60b9      	str	r1, [r7, #8]
   10596:	607a      	str	r2, [r7, #4]
    char *cdest;
    char *csrc;
    cdest = (char *) dest;
   10598:	68bb      	ldr	r3, [r7, #8]
   1059a:	617b      	str	r3, [r7, #20]
    csrc = (char *) src;
   1059c:	687b      	ldr	r3, [r7, #4]
   1059e:	613b      	str	r3, [r7, #16]
    cdest[0] = csrc[0];
   105a0:	693b      	ldr	r3, [r7, #16]
   105a2:	781a      	ldrb	r2, [r3, #0]
   105a4:	697b      	ldr	r3, [r7, #20]
   105a6:	701a      	strb	r2, [r3, #0]
    cdest[1] = csrc[1];
   105a8:	697b      	ldr	r3, [r7, #20]
   105aa:	3301      	adds	r3, #1
   105ac:	693a      	ldr	r2, [r7, #16]
   105ae:	7852      	ldrb	r2, [r2, #1]
   105b0:	701a      	strb	r2, [r3, #0]
}
   105b2:	bf00      	nop
   105b4:	371c      	adds	r7, #28
   105b6:	46bd      	mov	sp, r7
   105b8:	bc80      	pop	{r7}
   105ba:	4770      	bx	lr

000105bc <_ZN12CO_SDO_Class14CO_memcpySwap4EPvPKv>:
void CO_SDO_Class::CO_memcpySwap4(void* dest, const void* src){
   105bc:	b480      	push	{r7}
   105be:	b087      	sub	sp, #28
   105c0:	af00      	add	r7, sp, #0
   105c2:	60f8      	str	r0, [r7, #12]
   105c4:	60b9      	str	r1, [r7, #8]
   105c6:	607a      	str	r2, [r7, #4]
    char *cdest;
    char *csrc;
    cdest = (char *) dest;
   105c8:	68bb      	ldr	r3, [r7, #8]
   105ca:	617b      	str	r3, [r7, #20]
    csrc = (char *) src;
   105cc:	687b      	ldr	r3, [r7, #4]
   105ce:	613b      	str	r3, [r7, #16]
    cdest[0] = csrc[0];
   105d0:	693b      	ldr	r3, [r7, #16]
   105d2:	781a      	ldrb	r2, [r3, #0]
   105d4:	697b      	ldr	r3, [r7, #20]
   105d6:	701a      	strb	r2, [r3, #0]
    cdest[1] = csrc[1];
   105d8:	697b      	ldr	r3, [r7, #20]
   105da:	3301      	adds	r3, #1
   105dc:	693a      	ldr	r2, [r7, #16]
   105de:	7852      	ldrb	r2, [r2, #1]
   105e0:	701a      	strb	r2, [r3, #0]
    cdest[2] = csrc[2];
   105e2:	697b      	ldr	r3, [r7, #20]
   105e4:	3302      	adds	r3, #2
   105e6:	693a      	ldr	r2, [r7, #16]
   105e8:	7892      	ldrb	r2, [r2, #2]
   105ea:	701a      	strb	r2, [r3, #0]
    cdest[3] = csrc[3];
   105ec:	697b      	ldr	r3, [r7, #20]
   105ee:	3303      	adds	r3, #3
   105f0:	693a      	ldr	r2, [r7, #16]
   105f2:	78d2      	ldrb	r2, [r2, #3]
   105f4:	701a      	strb	r2, [r3, #0]
}
   105f6:	bf00      	nop
   105f8:	371c      	adds	r7, #28
   105fa:	46bd      	mov	sp, r7
   105fc:	bc80      	pop	{r7}
   105fe:	4770      	bx	lr

00010600 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t>:
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */

static void CO_SDO_receive(void *object, const CO_CANrxMsg_t *msg){
   10600:	b580      	push	{r7, lr}
   10602:	b086      	sub	sp, #24
   10604:	af00      	add	r7, sp, #0
   10606:	6078      	str	r0, [r7, #4]
   10608:	6039      	str	r1, [r7, #0]
    CO_SDO_t *SDO;
	
    SDO = (CO_SDO_t*)object;   /* this is the correct pointer type of the first argument */
   1060a:	687b      	ldr	r3, [r7, #4]
   1060c:	613b      	str	r3, [r7, #16]
     * starting another SDO request, this request is dropped. Especially if
     * processing function has slow response.
     * See: https://github.com/CANopenNode/CANopenNode/issues/39 */

    /* verify message length and message overflow (previous message was not processed yet) */
    if((msg->DLC == 8U) && (!SDO->CANrxNew)){
   1060e:	683b      	ldr	r3, [r7, #0]
   10610:	7d1b      	ldrb	r3, [r3, #20]
   10612:	2b08      	cmp	r3, #8
   10614:	f040 80a4 	bne.w	10760 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x160>
   10618:	693b      	ldr	r3, [r7, #16]
   1061a:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
   1061e:	2b00      	cmp	r3, #0
   10620:	f040 809e 	bne.w	10760 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x160>
        if(SDO->state != CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK) {
   10624:	693b      	ldr	r3, [r7, #16]
   10626:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   1062a:	2b15      	cmp	r3, #21
   1062c:	d024      	beq.n	10678 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x78>
            /* copy data and set 'new message' flag */
            SDO->CANrxData[0] = msg->data[0];
   1062e:	683b      	ldr	r3, [r7, #0]
   10630:	7d5a      	ldrb	r2, [r3, #21]
   10632:	693b      	ldr	r3, [r7, #16]
   10634:	701a      	strb	r2, [r3, #0]
            SDO->CANrxData[1] = msg->data[1];
   10636:	683b      	ldr	r3, [r7, #0]
   10638:	7d9a      	ldrb	r2, [r3, #22]
   1063a:	693b      	ldr	r3, [r7, #16]
   1063c:	705a      	strb	r2, [r3, #1]
            SDO->CANrxData[2] = msg->data[2];
   1063e:	683b      	ldr	r3, [r7, #0]
   10640:	7dda      	ldrb	r2, [r3, #23]
   10642:	693b      	ldr	r3, [r7, #16]
   10644:	709a      	strb	r2, [r3, #2]
            SDO->CANrxData[3] = msg->data[3];
   10646:	683b      	ldr	r3, [r7, #0]
   10648:	7e1a      	ldrb	r2, [r3, #24]
   1064a:	693b      	ldr	r3, [r7, #16]
   1064c:	70da      	strb	r2, [r3, #3]
            SDO->CANrxData[4] = msg->data[4];
   1064e:	683b      	ldr	r3, [r7, #0]
   10650:	7e5a      	ldrb	r2, [r3, #25]
   10652:	693b      	ldr	r3, [r7, #16]
   10654:	711a      	strb	r2, [r3, #4]
            SDO->CANrxData[5] = msg->data[5];
   10656:	683b      	ldr	r3, [r7, #0]
   10658:	7e9a      	ldrb	r2, [r3, #26]
   1065a:	693b      	ldr	r3, [r7, #16]
   1065c:	715a      	strb	r2, [r3, #5]
            SDO->CANrxData[6] = msg->data[6];
   1065e:	683b      	ldr	r3, [r7, #0]
   10660:	7eda      	ldrb	r2, [r3, #27]
   10662:	693b      	ldr	r3, [r7, #16]
   10664:	719a      	strb	r2, [r3, #6]
            SDO->CANrxData[7] = msg->data[7];
   10666:	683b      	ldr	r3, [r7, #0]
   10668:	7f1a      	ldrb	r2, [r3, #28]
   1066a:	693b      	ldr	r3, [r7, #16]
   1066c:	71da      	strb	r2, [r3, #7]

            SDO->CANrxNew = true;
   1066e:	693b      	ldr	r3, [r7, #16]
   10670:	2201      	movs	r2, #1
   10672:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
   10676:	e067      	b.n	10748 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
        }
        else {
            /* block download, copy data directly */
            uint8_t seqno;

            SDO->CANrxData[0] = msg->data[0];
   10678:	683b      	ldr	r3, [r7, #0]
   1067a:	7d5a      	ldrb	r2, [r3, #21]
   1067c:	693b      	ldr	r3, [r7, #16]
   1067e:	701a      	strb	r2, [r3, #0]
            seqno = SDO->CANrxData[0] & 0x7fU;
   10680:	693b      	ldr	r3, [r7, #16]
   10682:	781b      	ldrb	r3, [r3, #0]
   10684:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   10688:	73fb      	strb	r3, [r7, #15]
            SDO->timeoutTimer = 0;
   1068a:	693b      	ldr	r3, [r7, #16]
   1068c:	2200      	movs	r2, #0
   1068e:	66da      	str	r2, [r3, #108]	; 0x6c

            /* check correct sequence number. */
            if(seqno == (SDO->sequence + 1U)) {
   10690:	7bfa      	ldrb	r2, [r7, #15]
   10692:	693b      	ldr	r3, [r7, #16]
   10694:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   10698:	3301      	adds	r3, #1
   1069a:	429a      	cmp	r2, r3
   1069c:	d141      	bne.n	10722 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x122>
                /* sequence is correct */
                uint8_t i;

                SDO->sequence++;
   1069e:	693b      	ldr	r3, [r7, #16]
   106a0:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   106a4:	3301      	adds	r3, #1
   106a6:	b2da      	uxtb	r2, r3
   106a8:	693b      	ldr	r3, [r7, #16]
   106aa:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

                /* copy data */
                for(i=1; i<8; i++) {
   106ae:	2301      	movs	r3, #1
   106b0:	75fb      	strb	r3, [r7, #23]
   106b2:	7dfb      	ldrb	r3, [r7, #23]
   106b4:	2b07      	cmp	r3, #7
   106b6:	dc1d      	bgt.n	106f4 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0xf4>
                    SDO->ODF_arg.data[SDO->bufferOffset++] = msg->data[i]; //SDO->ODF_arg.data is equal as SDO->databuffer
   106b8:	693b      	ldr	r3, [r7, #16]
   106ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   106bc:	693b      	ldr	r3, [r7, #16]
   106be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   106c0:	1c58      	adds	r0, r3, #1
   106c2:	6939      	ldr	r1, [r7, #16]
   106c4:	6388      	str	r0, [r1, #56]	; 0x38
   106c6:	4413      	add	r3, r2
   106c8:	7dfa      	ldrb	r2, [r7, #23]
   106ca:	6839      	ldr	r1, [r7, #0]
   106cc:	440a      	add	r2, r1
   106ce:	7d52      	ldrb	r2, [r2, #21]
   106d0:	701a      	strb	r2, [r3, #0]
                    if(SDO->bufferOffset >= CO_SDO_BUFFER_SIZE) {
   106d2:	693b      	ldr	r3, [r7, #16]
   106d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   106d6:	2b1f      	cmp	r3, #31
   106d8:	d908      	bls.n	106ec <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0xec>
                        /* buffer full, break reception */
                        SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
   106da:	693b      	ldr	r3, [r7, #16]
   106dc:	2216      	movs	r2, #22
   106de:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                        SDO->CANrxNew = true;
   106e2:	693b      	ldr	r3, [r7, #16]
   106e4:	2201      	movs	r2, #1
   106e6:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
                        break;
   106ea:	e003      	b.n	106f4 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0xf4>
                for(i=1; i<8; i++) {
   106ec:	7dfb      	ldrb	r3, [r7, #23]
   106ee:	3301      	adds	r3, #1
   106f0:	75fb      	strb	r3, [r7, #23]
   106f2:	e7de      	b.n	106b2 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0xb2>
                    }
                }

                /* break reception if last segment or block sequence is too large */
                if(((SDO->CANrxData[0] & 0x80U) == 0x80U) || (SDO->sequence >= SDO->blksize)) {
   106f4:	693b      	ldr	r3, [r7, #16]
   106f6:	781b      	ldrb	r3, [r3, #0]
   106f8:	b25b      	sxtb	r3, r3
   106fa:	2b00      	cmp	r3, #0
   106fc:	db08      	blt.n	10710 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x110>
   106fe:	693b      	ldr	r3, [r7, #16]
   10700:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   10704:	461a      	mov	r2, r3
   10706:	693b      	ldr	r3, [r7, #16]
   10708:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
   1070c:	429a      	cmp	r2, r3
   1070e:	db1b      	blt.n	10748 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
                    SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
   10710:	693b      	ldr	r3, [r7, #16]
   10712:	2216      	movs	r2, #22
   10714:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                    SDO->CANrxNew = true;
   10718:	693b      	ldr	r3, [r7, #16]
   1071a:	2201      	movs	r2, #1
   1071c:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
   10720:	e012      	b.n	10748 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
                }
            }
            else if((seqno == SDO->sequence) || (SDO->sequence == 0U)){
   10722:	693b      	ldr	r3, [r7, #16]
   10724:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   10728:	7bfa      	ldrb	r2, [r7, #15]
   1072a:	429a      	cmp	r2, r3
   1072c:	d00c      	beq.n	10748 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
   1072e:	693b      	ldr	r3, [r7, #16]
   10730:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   10734:	2b00      	cmp	r3, #0
   10736:	d007      	beq.n	10748 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
                /* Ignore message, if it is duplicate or if sequence didn't started yet. */
            }
            else {
                /* seqno is totally wrong, break reception. */
                SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
   10738:	693b      	ldr	r3, [r7, #16]
   1073a:	2216      	movs	r2, #22
   1073c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                SDO->CANrxNew = true;
   10740:	693b      	ldr	r3, [r7, #16]
   10742:	2201      	movs	r2, #1
   10744:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
            }
        }

        /* Optional signal to RTOS, which can resume task, which handles SDO server. */
        if(SDO->CANrxNew && SDO->ptrFunctSignal != NULL) {
   10748:	693b      	ldr	r3, [r7, #16]
   1074a:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
   1074e:	2b00      	cmp	r3, #0
   10750:	d006      	beq.n	10760 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x160>
   10752:	693b      	ldr	r3, [r7, #16]
   10754:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   10756:	2b00      	cmp	r3, #0
   10758:	d002      	beq.n	10760 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x160>
            SDO->ptrFunctSignal();
   1075a:	693b      	ldr	r3, [r7, #16]
   1075c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   1075e:	4798      	blx	r3
        }
    }
}
   10760:	bf00      	nop
   10762:	3718      	adds	r7, #24
   10764:	46bd      	mov	sp, r7
   10766:	bd80      	pop	{r7, pc}

00010768 <_ZL11CO_ODF_1200P12CO_ODF_arg_t>:
 * Function for accessing _SDO server parameter_ for default SDO (index 0x1200)
 * from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
 static CO_SDO_abortCode_t  CO_ODF_1200(CO_ODF_arg_t *ODF_arg){
   10768:	b580      	push	{r7, lr}
   1076a:	b086      	sub	sp, #24
   1076c:	af00      	add	r7, sp, #0
   1076e:	6078      	str	r0, [r7, #4]
    uint8_t *nodeId;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
   10770:	2300      	movs	r3, #0
   10772:	617b      	str	r3, [r7, #20]

    nodeId = (uint8_t*) ODF_arg->object;
   10774:	687b      	ldr	r3, [r7, #4]
   10776:	681b      	ldr	r3, [r3, #0]
   10778:	613b      	str	r3, [r7, #16]
    value = ptrCODriverClass->CO_getUint32(ODF_arg->data);
   1077a:	4b12      	ldr	r3, [pc, #72]	; (107c4 <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x5c>)
   1077c:	681b      	ldr	r3, [r3, #0]
   1077e:	1d1a      	adds	r2, r3, #4
   10780:	687b      	ldr	r3, [r7, #4]
   10782:	685b      	ldr	r3, [r3, #4]
   10784:	4619      	mov	r1, r3
   10786:	4610      	mov	r0, r2
   10788:	4b0f      	ldr	r3, [pc, #60]	; (107c8 <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x60>)
   1078a:	4798      	blx	r3
   1078c:	60f8      	str	r0, [r7, #12]

    /* if SDO reading Object dictionary 0x1200, add nodeId to the value */
    if((ODF_arg->reading) && (ODF_arg->subIndex > 0U)){
   1078e:	687b      	ldr	r3, [r7, #4]
   10790:	7f5b      	ldrb	r3, [r3, #29]
   10792:	2b00      	cmp	r3, #0
   10794:	d010      	beq.n	107b8 <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x50>
   10796:	687b      	ldr	r3, [r7, #4]
   10798:	7f1b      	ldrb	r3, [r3, #28]
   1079a:	2b00      	cmp	r3, #0
   1079c:	d00c      	beq.n	107b8 <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x50>
        ptrCODriverClass->CO_setUint32(ODF_arg->data, value + *nodeId);
   1079e:	4b09      	ldr	r3, [pc, #36]	; (107c4 <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x5c>)
   107a0:	681b      	ldr	r3, [r3, #0]
   107a2:	1d18      	adds	r0, r3, #4
   107a4:	687b      	ldr	r3, [r7, #4]
   107a6:	6859      	ldr	r1, [r3, #4]
   107a8:	693b      	ldr	r3, [r7, #16]
   107aa:	781b      	ldrb	r3, [r3, #0]
   107ac:	461a      	mov	r2, r3
   107ae:	68fb      	ldr	r3, [r7, #12]
   107b0:	4413      	add	r3, r2
   107b2:	461a      	mov	r2, r3
   107b4:	4b05      	ldr	r3, [pc, #20]	; (107cc <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x64>)
   107b6:	4798      	blx	r3
    }

    return ret;
   107b8:	697b      	ldr	r3, [r7, #20]
}
   107ba:	4618      	mov	r0, r3
   107bc:	3718      	adds	r7, #24
   107be:	46bd      	mov	sp, r7
   107c0:	bd80      	pop	{r7, pc}
   107c2:	bf00      	nop
   107c4:	20001934 	.word	0x20001934
   107c8:	00010521 	.word	0x00010521
   107cc:	00010555 	.word	0x00010555

000107d0 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m>:
        uint8_t                 nodeId,
        CO_CANmodule_t         *CANdevRx,
        uint32_t                CANdevRxIdx,
        CO_CANmodule_t         *CANdevTx,
        uint32_t                CANdevTxIdx)
{
   107d0:	b5b0      	push	{r4, r5, r7, lr}
   107d2:	b08a      	sub	sp, #40	; 0x28
   107d4:	af04      	add	r7, sp, #16
   107d6:	60f8      	str	r0, [r7, #12]
   107d8:	60b9      	str	r1, [r7, #8]
   107da:	607a      	str	r2, [r7, #4]
   107dc:	603b      	str	r3, [r7, #0]
    /* verify arguments */
    if(SDO_init==NULL || CANdevRx==NULL || CANdevTx==NULL){
   107de:	68bb      	ldr	r3, [r7, #8]
   107e0:	2b00      	cmp	r3, #0
   107e2:	d005      	beq.n	107f0 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x20>
   107e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   107e6:	2b00      	cmp	r3, #0
   107e8:	d002      	beq.n	107f0 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x20>
   107ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   107ec:	2b00      	cmp	r3, #0
   107ee:	d102      	bne.n	107f6 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x26>
        return CO_ERROR_ILLEGAL_ARGUMENT;
   107f0:	f04f 33ff 	mov.w	r3, #4294967295
   107f4:	e0ac      	b.n	10950 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x180>
    }else{
		SDO=SDO_init;
   107f6:	68fb      	ldr	r3, [r7, #12]
   107f8:	68ba      	ldr	r2, [r7, #8]
   107fa:	601a      	str	r2, [r3, #0]
	}
	
    /* configure own object dictionary */
    if(parentSDO == NULL){
   107fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   107fe:	2b00      	cmp	r3, #0
   10800:	d13b      	bne.n	1087a <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0xaa>
        uint32_t i;

        SDO->ownOD = true;
   10802:	68fb      	ldr	r3, [r7, #12]
   10804:	681b      	ldr	r3, [r3, #0]
   10806:	2201      	movs	r2, #1
   10808:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        SDO->OD = OD;
   1080c:	68fb      	ldr	r3, [r7, #12]
   1080e:	681b      	ldr	r3, [r3, #0]
   10810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   10812:	62da      	str	r2, [r3, #44]	; 0x2c
        SDO->ODSize = ODSize;
   10814:	68fb      	ldr	r3, [r7, #12]
   10816:	681b      	ldr	r3, [r3, #0]
   10818:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1081a:	631a      	str	r2, [r3, #48]	; 0x30
        SDO->ODExtensions = ODExtensions;
   1081c:	68fb      	ldr	r3, [r7, #12]
   1081e:	681b      	ldr	r3, [r3, #0]
   10820:	6bba      	ldr	r2, [r7, #56]	; 0x38
   10822:	635a      	str	r2, [r3, #52]	; 0x34

        /* clear pointers in ODExtensions */
        for(i=0U; i<ODSize; i++){
   10824:	2300      	movs	r3, #0
   10826:	617b      	str	r3, [r7, #20]
   10828:	697a      	ldr	r2, [r7, #20]
   1082a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1082c:	429a      	cmp	r2, r3
   1082e:	d238      	bcs.n	108a2 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0xd2>
            SDO->ODExtensions[i].pODFunc = NULL;
   10830:	68fb      	ldr	r3, [r7, #12]
   10832:	681b      	ldr	r3, [r3, #0]
   10834:	6b59      	ldr	r1, [r3, #52]	; 0x34
   10836:	697a      	ldr	r2, [r7, #20]
   10838:	4613      	mov	r3, r2
   1083a:	005b      	lsls	r3, r3, #1
   1083c:	4413      	add	r3, r2
   1083e:	009b      	lsls	r3, r3, #2
   10840:	440b      	add	r3, r1
   10842:	2200      	movs	r2, #0
   10844:	601a      	str	r2, [r3, #0]
            SDO->ODExtensions[i].object = NULL;
   10846:	68fb      	ldr	r3, [r7, #12]
   10848:	681b      	ldr	r3, [r3, #0]
   1084a:	6b59      	ldr	r1, [r3, #52]	; 0x34
   1084c:	697a      	ldr	r2, [r7, #20]
   1084e:	4613      	mov	r3, r2
   10850:	005b      	lsls	r3, r3, #1
   10852:	4413      	add	r3, r2
   10854:	009b      	lsls	r3, r3, #2
   10856:	440b      	add	r3, r1
   10858:	2200      	movs	r2, #0
   1085a:	605a      	str	r2, [r3, #4]
            SDO->ODExtensions[i].flags = NULL;
   1085c:	68fb      	ldr	r3, [r7, #12]
   1085e:	681b      	ldr	r3, [r3, #0]
   10860:	6b59      	ldr	r1, [r3, #52]	; 0x34
   10862:	697a      	ldr	r2, [r7, #20]
   10864:	4613      	mov	r3, r2
   10866:	005b      	lsls	r3, r3, #1
   10868:	4413      	add	r3, r2
   1086a:	009b      	lsls	r3, r3, #2
   1086c:	440b      	add	r3, r1
   1086e:	2200      	movs	r2, #0
   10870:	609a      	str	r2, [r3, #8]
        for(i=0U; i<ODSize; i++){
   10872:	697b      	ldr	r3, [r7, #20]
   10874:	3301      	adds	r3, #1
   10876:	617b      	str	r3, [r7, #20]
   10878:	e7d6      	b.n	10828 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x58>
        }
    }
    /* copy object dictionary from parent */
    else{
        SDO->ownOD = false;
   1087a:	68fb      	ldr	r3, [r7, #12]
   1087c:	681b      	ldr	r3, [r3, #0]
   1087e:	2200      	movs	r2, #0
   10880:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        SDO->OD = parentSDO->OD;
   10884:	68fb      	ldr	r3, [r7, #12]
   10886:	681b      	ldr	r3, [r3, #0]
   10888:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1088a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   1088c:	62da      	str	r2, [r3, #44]	; 0x2c
        SDO->ODSize = parentSDO->ODSize;
   1088e:	68fb      	ldr	r3, [r7, #12]
   10890:	681b      	ldr	r3, [r3, #0]
   10892:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   10894:	6b12      	ldr	r2, [r2, #48]	; 0x30
   10896:	631a      	str	r2, [r3, #48]	; 0x30
        SDO->ODExtensions = parentSDO->ODExtensions;
   10898:	68fb      	ldr	r3, [r7, #12]
   1089a:	681b      	ldr	r3, [r3, #0]
   1089c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1089e:	6b52      	ldr	r2, [r2, #52]	; 0x34
   108a0:	635a      	str	r2, [r3, #52]	; 0x34
    }

    /* Configure object variables */
    SDO->nodeId = nodeId;
   108a2:	68fb      	ldr	r3, [r7, #12]
   108a4:	681b      	ldr	r3, [r3, #0]
   108a6:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
   108aa:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    SDO->state = CO_SDO_ST_IDLE;
   108ae:	68fb      	ldr	r3, [r7, #12]
   108b0:	681b      	ldr	r3, [r3, #0]
   108b2:	2200      	movs	r2, #0
   108b4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    SDO->CANrxNew = false;
   108b8:	68fb      	ldr	r3, [r7, #12]
   108ba:	681b      	ldr	r3, [r3, #0]
   108bc:	2200      	movs	r2, #0
   108be:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
    SDO->ptrFunctSignal = NULL;
   108c2:	68fb      	ldr	r3, [r7, #12]
   108c4:	681b      	ldr	r3, [r3, #0]
   108c6:	2200      	movs	r2, #0
   108c8:	67da      	str	r2, [r3, #124]	; 0x7c


    /* Configure Object dictionary entry at index 0x1200 */
    if(ObjDictIndex_SDOServerParameter == OD_H1200_SDO_SERVER_PARAM){
   108ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
   108cc:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
   108d0:	d10f      	bne.n	108f2 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x122>
        ptrCODriverClass->CO_OD_configure( ObjDictIndex_SDOServerParameter, CO_ODF_1200, (void*)&SDO->nodeId, 0U, 0U);
   108d2:	4b21      	ldr	r3, [pc, #132]	; (10958 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   108d4:	681b      	ldr	r3, [r3, #0]
   108d6:	1d18      	adds	r0, r3, #4
   108d8:	68fb      	ldr	r3, [r7, #12]
   108da:	681b      	ldr	r3, [r3, #0]
   108dc:	f103 0268 	add.w	r2, r3, #104	; 0x68
   108e0:	2300      	movs	r3, #0
   108e2:	9301      	str	r3, [sp, #4]
   108e4:	2300      	movs	r3, #0
   108e6:	9300      	str	r3, [sp, #0]
   108e8:	4613      	mov	r3, r2
   108ea:	4a1c      	ldr	r2, [pc, #112]	; (1095c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x18c>)
   108ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   108ee:	4c1c      	ldr	r4, [pc, #112]	; (10960 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x190>)
   108f0:	47a0      	blx	r4
    }

    if((COB_IDClientToServer & 0x80000000) != 0 || (COB_IDServerToClient & 0x80000000) != 0 ){
   108f2:	687b      	ldr	r3, [r7, #4]
   108f4:	2b00      	cmp	r3, #0
   108f6:	db02      	blt.n	108fe <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x12e>
   108f8:	683b      	ldr	r3, [r7, #0]
   108fa:	2b00      	cmp	r3, #0
   108fc:	da03      	bge.n	10906 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x136>
        // SDO is invalid
        COB_IDClientToServer = 0;
   108fe:	2300      	movs	r3, #0
   10900:	607b      	str	r3, [r7, #4]
        COB_IDServerToClient = 0;
   10902:	2300      	movs	r3, #0
   10904:	603b      	str	r3, [r7, #0]
    }
    /* configure SDO server CAN reception */
  ptrCODriverClass->CAN_Rx_BufferInit(
   10906:	4b14      	ldr	r3, [pc, #80]	; (10958 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   10908:	6818      	ldr	r0, [r3, #0]
            CANdevRxIdx,            /* rx buffer index */
            COB_IDClientToServer,   /* CAN identifier */
            0x7FF,                  /* mask */
            0,                      /* rtr */
            (void*)SDO,             /* object passed to receive function */
   1090a:	68fb      	ldr	r3, [r7, #12]
   1090c:	681b      	ldr	r3, [r3, #0]
            CO_SDO_receive);        /* this function will process received message */
   1090e:	4a15      	ldr	r2, [pc, #84]	; (10964 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x194>)
   10910:	9202      	str	r2, [sp, #8]
   10912:	9301      	str	r3, [sp, #4]
   10914:	2300      	movs	r3, #0
   10916:	9300      	str	r3, [sp, #0]
   10918:	f240 73ff 	movw	r3, #2047	; 0x7ff
   1091c:	687a      	ldr	r2, [r7, #4]
   1091e:	6c79      	ldr	r1, [r7, #68]	; 0x44
   10920:	4c11      	ldr	r4, [pc, #68]	; (10968 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x198>)
   10922:	47a0      	blx	r4
	//printf("Config_SDO_recieve");
    /* configure SDO server CAN transmission */
    SDO->CANdevTx = CANdevTx;
   10924:	68fb      	ldr	r3, [r7, #12]
   10926:	681b      	ldr	r3, [r3, #0]
   10928:	6cba      	ldr	r2, [r7, #72]	; 0x48
   1092a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    SDO->CANtxBuff = ptrCODriverClass->CAN_Tx_BufferInit(
   1092e:	68fb      	ldr	r3, [r7, #12]
   10930:	681c      	ldr	r4, [r3, #0]
   10932:	4b09      	ldr	r3, [pc, #36]	; (10958 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   10934:	6818      	ldr	r0, [r3, #0]
   10936:	2300      	movs	r3, #0
   10938:	9301      	str	r3, [sp, #4]
   1093a:	2308      	movs	r3, #8
   1093c:	9300      	str	r3, [sp, #0]
   1093e:	2300      	movs	r3, #0
   10940:	683a      	ldr	r2, [r7, #0]
   10942:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   10944:	4d09      	ldr	r5, [pc, #36]	; (1096c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x19c>)
   10946:	47a8      	blx	r5
   10948:	4603      	mov	r3, r0
   1094a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
            COB_IDServerToClient,   /* CAN identifier */
            0,                      /* rtr */
            8,                      /* number of data bytes */
            0);                     /* synchronous message flag bit */
	
    return CO_ERROR_NO;
   1094e:	2300      	movs	r3, #0
}
   10950:	4618      	mov	r0, r3
   10952:	3718      	adds	r7, #24
   10954:	46bd      	mov	sp, r7
   10956:	bdb0      	pop	{r4, r5, r7, pc}
   10958:	20001934 	.word	0x20001934
   1095c:	00010769 	.word	0x00010769
   10960:	00010971 	.word	0x00010971
   10964:	00010601 	.word	0x00010601
   10968:	0000d6dd 	.word	0x0000d6dd
   1096c:	0000d7d9 	.word	0x0000d7d9

00010970 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh>:
        uint32_t                index,
        CO_SDO_abortCode_t    (*pODFunc)(CO_ODF_arg_t *ODF_arg),
        void                   *object,
        uint8_t                *flags,
        uint8_t                 flagsSize)
{
   10970:	b580      	push	{r7, lr}
   10972:	b088      	sub	sp, #32
   10974:	af00      	add	r7, sp, #0
   10976:	60f8      	str	r0, [r7, #12]
   10978:	60b9      	str	r1, [r7, #8]
   1097a:	607a      	str	r2, [r7, #4]
   1097c:	603b      	str	r3, [r7, #0]
    uint32_t entryNo;

    entryNo = ptrCODriverClass->CO_OD_find(index);
   1097e:	4b28      	ldr	r3, [pc, #160]	; (10a20 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xb0>)
   10980:	681b      	ldr	r3, [r3, #0]
   10982:	3304      	adds	r3, #4
   10984:	68b9      	ldr	r1, [r7, #8]
   10986:	4618      	mov	r0, r3
   10988:	4b26      	ldr	r3, [pc, #152]	; (10a24 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xb4>)
   1098a:	4798      	blx	r3
   1098c:	61b8      	str	r0, [r7, #24]
    if(entryNo < 0xFFFFU){
   1098e:	69bb      	ldr	r3, [r7, #24]
   10990:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   10994:	4293      	cmp	r3, r2
   10996:	d83e      	bhi.n	10a16 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xa6>
        CO_OD_extension_t *ext = &SDO->ODExtensions[entryNo];
   10998:	68fb      	ldr	r3, [r7, #12]
   1099a:	681b      	ldr	r3, [r3, #0]
   1099c:	6b59      	ldr	r1, [r3, #52]	; 0x34
   1099e:	69ba      	ldr	r2, [r7, #24]
   109a0:	4613      	mov	r3, r2
   109a2:	005b      	lsls	r3, r3, #1
   109a4:	4413      	add	r3, r2
   109a6:	009b      	lsls	r3, r3, #2
   109a8:	440b      	add	r3, r1
   109aa:	617b      	str	r3, [r7, #20]
        uint8_t maxSubIndex = SDO->OD[entryNo].maxSubIndex;
   109ac:	68fb      	ldr	r3, [r7, #12]
   109ae:	681b      	ldr	r3, [r3, #0]
   109b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   109b2:	69ba      	ldr	r2, [r7, #24]
   109b4:	4613      	mov	r3, r2
   109b6:	009b      	lsls	r3, r3, #2
   109b8:	4413      	add	r3, r2
   109ba:	009b      	lsls	r3, r3, #2
   109bc:	440b      	add	r3, r1
   109be:	791b      	ldrb	r3, [r3, #4]
   109c0:	74fb      	strb	r3, [r7, #19]

        ext->pODFunc = pODFunc;
   109c2:	697b      	ldr	r3, [r7, #20]
   109c4:	687a      	ldr	r2, [r7, #4]
   109c6:	601a      	str	r2, [r3, #0]
        ext->object = object;
   109c8:	697b      	ldr	r3, [r7, #20]
   109ca:	683a      	ldr	r2, [r7, #0]
   109cc:	605a      	str	r2, [r3, #4]
        if((flags != NULL) && (flagsSize != 0U) && (flagsSize == maxSubIndex)){
   109ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
   109d0:	2b00      	cmp	r3, #0
   109d2:	d01b      	beq.n	10a0c <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0x9c>
   109d4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   109d8:	2b00      	cmp	r3, #0
   109da:	d017      	beq.n	10a0c <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0x9c>
   109dc:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
   109e0:	7cfb      	ldrb	r3, [r7, #19]
   109e2:	429a      	cmp	r2, r3
   109e4:	d112      	bne.n	10a0c <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0x9c>
            uint32_t i;
            ext->flags = flags;
   109e6:	697b      	ldr	r3, [r7, #20]
   109e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   109ea:	609a      	str	r2, [r3, #8]
            for(i=0U; i<=maxSubIndex; i++){
   109ec:	2300      	movs	r3, #0
   109ee:	61fb      	str	r3, [r7, #28]
   109f0:	7cfa      	ldrb	r2, [r7, #19]
   109f2:	69fb      	ldr	r3, [r7, #28]
   109f4:	429a      	cmp	r2, r3
   109f6:	d30d      	bcc.n	10a14 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xa4>
                ext->flags[i] = 0U;
   109f8:	697b      	ldr	r3, [r7, #20]
   109fa:	689a      	ldr	r2, [r3, #8]
   109fc:	69fb      	ldr	r3, [r7, #28]
   109fe:	4413      	add	r3, r2
   10a00:	2200      	movs	r2, #0
   10a02:	701a      	strb	r2, [r3, #0]
            for(i=0U; i<=maxSubIndex; i++){
   10a04:	69fb      	ldr	r3, [r7, #28]
   10a06:	3301      	adds	r3, #1
   10a08:	61fb      	str	r3, [r7, #28]
   10a0a:	e7f1      	b.n	109f0 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0x80>
            }
        }
        else{
            ext->flags = NULL;
   10a0c:	697b      	ldr	r3, [r7, #20]
   10a0e:	2200      	movs	r2, #0
   10a10:	609a      	str	r2, [r3, #8]
        }
    }
}
   10a12:	e000      	b.n	10a16 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xa6>
            }
   10a14:	bf00      	nop
}
   10a16:	bf00      	nop
   10a18:	3720      	adds	r7, #32
   10a1a:	46bd      	mov	sp, r7
   10a1c:	bd80      	pop	{r7, pc}
   10a1e:	bf00      	nop
   10a20:	20001934 	.word	0x20001934
   10a24:	00010a29 	.word	0x00010a29

00010a28 <_ZN12CO_SDO_Class10CO_OD_findEm>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_OD_find( uint32_t index){
   10a28:	b480      	push	{r7}
   10a2a:	b087      	sub	sp, #28
   10a2c:	af00      	add	r7, sp, #0
   10a2e:	6078      	str	r0, [r7, #4]
   10a30:	6039      	str	r1, [r7, #0]
    /* Fast search in ordered Object Dictionary. If indexes are mixed, this won't work. */
    /* If Object Dictionary has up to 2^N entries, then N is max number of loop passes. */
    uint32_t cur, min, max;
    const CO_OD_entry_t* object;

    min = 0U;
   10a32:	2300      	movs	r3, #0
   10a34:	617b      	str	r3, [r7, #20]
    max = SDO->ODSize - 1U;
   10a36:	687b      	ldr	r3, [r7, #4]
   10a38:	681b      	ldr	r3, [r3, #0]
   10a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   10a3c:	3b01      	subs	r3, #1
   10a3e:	613b      	str	r3, [r7, #16]
    while(min < max){
   10a40:	697a      	ldr	r2, [r7, #20]
   10a42:	693b      	ldr	r3, [r7, #16]
   10a44:	429a      	cmp	r2, r3
   10a46:	d227      	bcs.n	10a98 <_ZN12CO_SDO_Class10CO_OD_findEm+0x70>
        cur = (min + max) / 2;
   10a48:	697a      	ldr	r2, [r7, #20]
   10a4a:	693b      	ldr	r3, [r7, #16]
   10a4c:	4413      	add	r3, r2
   10a4e:	085b      	lsrs	r3, r3, #1
   10a50:	60fb      	str	r3, [r7, #12]
        object = &SDO->OD[cur];
   10a52:	687b      	ldr	r3, [r7, #4]
   10a54:	681b      	ldr	r3, [r3, #0]
   10a56:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   10a58:	68fa      	ldr	r2, [r7, #12]
   10a5a:	4613      	mov	r3, r2
   10a5c:	009b      	lsls	r3, r3, #2
   10a5e:	4413      	add	r3, r2
   10a60:	009b      	lsls	r3, r3, #2
   10a62:	440b      	add	r3, r1
   10a64:	60bb      	str	r3, [r7, #8]
        /* Is object matched */
        if(index == object->index){
   10a66:	68bb      	ldr	r3, [r7, #8]
   10a68:	681a      	ldr	r2, [r3, #0]
   10a6a:	683b      	ldr	r3, [r7, #0]
   10a6c:	429a      	cmp	r2, r3
   10a6e:	d101      	bne.n	10a74 <_ZN12CO_SDO_Class10CO_OD_findEm+0x4c>
            return cur;
   10a70:	68fb      	ldr	r3, [r7, #12]
   10a72:	e028      	b.n	10ac6 <_ZN12CO_SDO_Class10CO_OD_findEm+0x9e>
        }
        if(index < object->index){
   10a74:	68bb      	ldr	r3, [r7, #8]
   10a76:	681a      	ldr	r2, [r3, #0]
   10a78:	683b      	ldr	r3, [r7, #0]
   10a7a:	429a      	cmp	r2, r3
   10a7c:	d908      	bls.n	10a90 <_ZN12CO_SDO_Class10CO_OD_findEm+0x68>
            max = cur;
   10a7e:	68fb      	ldr	r3, [r7, #12]
   10a80:	613b      	str	r3, [r7, #16]
            if(max) max--;
   10a82:	693b      	ldr	r3, [r7, #16]
   10a84:	2b00      	cmp	r3, #0
   10a86:	d0db      	beq.n	10a40 <_ZN12CO_SDO_Class10CO_OD_findEm+0x18>
   10a88:	693b      	ldr	r3, [r7, #16]
   10a8a:	3b01      	subs	r3, #1
   10a8c:	613b      	str	r3, [r7, #16]
   10a8e:	e7d7      	b.n	10a40 <_ZN12CO_SDO_Class10CO_OD_findEm+0x18>
        }
        else
            min = cur + 1U;
   10a90:	68fb      	ldr	r3, [r7, #12]
   10a92:	3301      	adds	r3, #1
   10a94:	617b      	str	r3, [r7, #20]
    while(min < max){
   10a96:	e7d3      	b.n	10a40 <_ZN12CO_SDO_Class10CO_OD_findEm+0x18>
    }

    if(min == max){
   10a98:	697a      	ldr	r2, [r7, #20]
   10a9a:	693b      	ldr	r3, [r7, #16]
   10a9c:	429a      	cmp	r2, r3
   10a9e:	d110      	bne.n	10ac2 <_ZN12CO_SDO_Class10CO_OD_findEm+0x9a>
        object = &SDO->OD[min];
   10aa0:	687b      	ldr	r3, [r7, #4]
   10aa2:	681b      	ldr	r3, [r3, #0]
   10aa4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   10aa6:	697a      	ldr	r2, [r7, #20]
   10aa8:	4613      	mov	r3, r2
   10aaa:	009b      	lsls	r3, r3, #2
   10aac:	4413      	add	r3, r2
   10aae:	009b      	lsls	r3, r3, #2
   10ab0:	440b      	add	r3, r1
   10ab2:	60bb      	str	r3, [r7, #8]
        /* Is object matched */
        if(index == object->index){
   10ab4:	68bb      	ldr	r3, [r7, #8]
   10ab6:	681a      	ldr	r2, [r3, #0]
   10ab8:	683b      	ldr	r3, [r7, #0]
   10aba:	429a      	cmp	r2, r3
   10abc:	d101      	bne.n	10ac2 <_ZN12CO_SDO_Class10CO_OD_findEm+0x9a>
            return min;
   10abe:	697b      	ldr	r3, [r7, #20]
   10ac0:	e001      	b.n	10ac6 <_ZN12CO_SDO_Class10CO_OD_findEm+0x9e>
        }
    }

    return 0xFFFFU;  /* object does not exist in OD */
   10ac2:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
   10ac6:	4618      	mov	r0, r3
   10ac8:	371c      	adds	r7, #28
   10aca:	46bd      	mov	sp, r7
   10acc:	bc80      	pop	{r7}
   10ace:	4770      	bx	lr

00010ad0 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_OD_getLength(uint32_t entryNo, uint8_t subIndex){
   10ad0:	b480      	push	{r7}
   10ad2:	b087      	sub	sp, #28
   10ad4:	af00      	add	r7, sp, #0
   10ad6:	60f8      	str	r0, [r7, #12]
   10ad8:	60b9      	str	r1, [r7, #8]
   10ada:	4613      	mov	r3, r2
   10adc:	71fb      	strb	r3, [r7, #7]
    const CO_OD_entry_t* object = &SDO->OD[entryNo];
   10ade:	68fb      	ldr	r3, [r7, #12]
   10ae0:	681b      	ldr	r3, [r3, #0]
   10ae2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   10ae4:	68ba      	ldr	r2, [r7, #8]
   10ae6:	4613      	mov	r3, r2
   10ae8:	009b      	lsls	r3, r3, #2
   10aea:	4413      	add	r3, r2
   10aec:	009b      	lsls	r3, r3, #2
   10aee:	440b      	add	r3, r1
   10af0:	617b      	str	r3, [r7, #20]

    if(entryNo == 0xFFFFU){
   10af2:	68bb      	ldr	r3, [r7, #8]
   10af4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10af8:	4293      	cmp	r3, r2
   10afa:	d101      	bne.n	10b00 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x30>
        return 0U;
   10afc:	2300      	movs	r3, #0
   10afe:	e034      	b.n	10b6a <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
    }

    if(object->maxSubIndex == 0U){    /* Object type is Var */
   10b00:	697b      	ldr	r3, [r7, #20]
   10b02:	791b      	ldrb	r3, [r3, #4]
   10b04:	2b00      	cmp	r3, #0
   10b06:	d108      	bne.n	10b1a <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x4a>
        if(object->pData == 0){ /* data type is domain */
   10b08:	697b      	ldr	r3, [r7, #20]
   10b0a:	691b      	ldr	r3, [r3, #16]
   10b0c:	2b00      	cmp	r3, #0
   10b0e:	d101      	bne.n	10b14 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x44>
            return CO_SDO_BUFFER_SIZE;
   10b10:	2320      	movs	r3, #32
   10b12:	e02a      	b.n	10b6a <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
        else{
            return object->length;
   10b14:	697b      	ldr	r3, [r7, #20]
   10b16:	68db      	ldr	r3, [r3, #12]
   10b18:	e027      	b.n	10b6a <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
    }
    else if(object->attribute != 0U){ /* Object type is Array */
   10b1a:	697b      	ldr	r3, [r7, #20]
   10b1c:	689b      	ldr	r3, [r3, #8]
   10b1e:	2b00      	cmp	r3, #0
   10b20:	d00d      	beq.n	10b3e <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x6e>
        if(subIndex == 0U){
   10b22:	79fb      	ldrb	r3, [r7, #7]
   10b24:	2b00      	cmp	r3, #0
   10b26:	d101      	bne.n	10b2c <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x5c>
            return 1U;
   10b28:	2301      	movs	r3, #1
   10b2a:	e01e      	b.n	10b6a <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
        else if(object->pData == 0){
   10b2c:	697b      	ldr	r3, [r7, #20]
   10b2e:	691b      	ldr	r3, [r3, #16]
   10b30:	2b00      	cmp	r3, #0
   10b32:	d101      	bne.n	10b38 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x68>
            /* data type is domain */
            return CO_SDO_BUFFER_SIZE;
   10b34:	2320      	movs	r3, #32
   10b36:	e018      	b.n	10b6a <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
        else{
            return object->length;
   10b38:	697b      	ldr	r3, [r7, #20]
   10b3a:	68db      	ldr	r3, [r3, #12]
   10b3c:	e015      	b.n	10b6a <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
    }
    else{                            /* Object type is Record */
        if(((const CO_OD_entryRecord_t*)(object->pData))[subIndex].pData == 0){
   10b3e:	697b      	ldr	r3, [r7, #20]
   10b40:	6919      	ldr	r1, [r3, #16]
   10b42:	79fa      	ldrb	r2, [r7, #7]
   10b44:	4613      	mov	r3, r2
   10b46:	005b      	lsls	r3, r3, #1
   10b48:	4413      	add	r3, r2
   10b4a:	009b      	lsls	r3, r3, #2
   10b4c:	440b      	add	r3, r1
   10b4e:	681b      	ldr	r3, [r3, #0]
   10b50:	2b00      	cmp	r3, #0
   10b52:	d101      	bne.n	10b58 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x88>
            /* data type is domain */
            return CO_SDO_BUFFER_SIZE;
   10b54:	2320      	movs	r3, #32
   10b56:	e008      	b.n	10b6a <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
        else{
            return ((const CO_OD_entryRecord_t*)(object->pData))[subIndex].length;
   10b58:	697b      	ldr	r3, [r7, #20]
   10b5a:	6919      	ldr	r1, [r3, #16]
   10b5c:	79fa      	ldrb	r2, [r7, #7]
   10b5e:	4613      	mov	r3, r2
   10b60:	005b      	lsls	r3, r3, #1
   10b62:	4413      	add	r3, r2
   10b64:	009b      	lsls	r3, r3, #2
   10b66:	440b      	add	r3, r1
   10b68:	689b      	ldr	r3, [r3, #8]
        }
    }
}
   10b6a:	4618      	mov	r0, r3
   10b6c:	371c      	adds	r7, #28
   10b6e:	46bd      	mov	sp, r7
   10b70:	bc80      	pop	{r7}
   10b72:	4770      	bx	lr

00010b74 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_OD_getAttribute(uint32_t entryNo, uint8_t subIndex){
   10b74:	b480      	push	{r7}
   10b76:	b089      	sub	sp, #36	; 0x24
   10b78:	af00      	add	r7, sp, #0
   10b7a:	60f8      	str	r0, [r7, #12]
   10b7c:	60b9      	str	r1, [r7, #8]
   10b7e:	4613      	mov	r3, r2
   10b80:	71fb      	strb	r3, [r7, #7]
    const CO_OD_entry_t* object = &SDO->OD[entryNo];
   10b82:	68fb      	ldr	r3, [r7, #12]
   10b84:	681b      	ldr	r3, [r3, #0]
   10b86:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   10b88:	68ba      	ldr	r2, [r7, #8]
   10b8a:	4613      	mov	r3, r2
   10b8c:	009b      	lsls	r3, r3, #2
   10b8e:	4413      	add	r3, r2
   10b90:	009b      	lsls	r3, r3, #2
   10b92:	440b      	add	r3, r1
   10b94:	617b      	str	r3, [r7, #20]

    if(entryNo == 0xFFFFU){
   10b96:	68bb      	ldr	r3, [r7, #8]
   10b98:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10b9c:	4293      	cmp	r3, r2
   10b9e:	d101      	bne.n	10ba4 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x30>
        return 0U;
   10ba0:	2300      	movs	r3, #0
   10ba2:	e037      	b.n	10c14 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0xa0>
    }

    if(object->maxSubIndex == 0U){   /* Object type is Var */
   10ba4:	697b      	ldr	r3, [r7, #20]
   10ba6:	791b      	ldrb	r3, [r3, #4]
   10ba8:	2b00      	cmp	r3, #0
   10baa:	d102      	bne.n	10bb2 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x3e>
        return object->attribute;
   10bac:	697b      	ldr	r3, [r7, #20]
   10bae:	689b      	ldr	r3, [r3, #8]
   10bb0:	e030      	b.n	10c14 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0xa0>
    }
    else if(object->attribute != 0U){/* Object type is Array */
   10bb2:	697b      	ldr	r3, [r7, #20]
   10bb4:	689b      	ldr	r3, [r3, #8]
   10bb6:	2b00      	cmp	r3, #0
   10bb8:	d023      	beq.n	10c02 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x8e>
        bool_t exception_1003 = false;
   10bba:	2300      	movs	r3, #0
   10bbc:	77fb      	strb	r3, [r7, #31]
        uint32_t attr = object->attribute;
   10bbe:	697b      	ldr	r3, [r7, #20]
   10bc0:	689b      	ldr	r3, [r3, #8]
   10bc2:	61bb      	str	r3, [r7, #24]

        /* Special exception: Object 1003,00 should be writable */
        if(object->index == 0x1003 && subIndex == 0) {
   10bc4:	697b      	ldr	r3, [r7, #20]
   10bc6:	681b      	ldr	r3, [r3, #0]
   10bc8:	f241 0203 	movw	r2, #4099	; 0x1003
   10bcc:	4293      	cmp	r3, r2
   10bce:	d108      	bne.n	10be2 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x6e>
   10bd0:	79fb      	ldrb	r3, [r7, #7]
   10bd2:	2b00      	cmp	r3, #0
   10bd4:	d105      	bne.n	10be2 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x6e>
            exception_1003 = true;
   10bd6:	2301      	movs	r3, #1
   10bd8:	77fb      	strb	r3, [r7, #31]
            attr |= CO_ODA_WRITEABLE;
   10bda:	69bb      	ldr	r3, [r7, #24]
   10bdc:	f043 0308 	orr.w	r3, r3, #8
   10be0:	61bb      	str	r3, [r7, #24]
        }

        if(subIndex == 0U  && exception_1003 == false){
   10be2:	79fb      	ldrb	r3, [r7, #7]
   10be4:	2b00      	cmp	r3, #0
   10be6:	d10a      	bne.n	10bfe <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x8a>
   10be8:	7ffb      	ldrb	r3, [r7, #31]
   10bea:	2b00      	cmp	r3, #0
   10bec:	d107      	bne.n	10bfe <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x8a>
            /* First subIndex is readonly */
            attr &= ~(CO_ODA_WRITEABLE | CO_ODA_RPDO_MAPABLE);
   10bee:	69bb      	ldr	r3, [r7, #24]
   10bf0:	f023 0318 	bic.w	r3, r3, #24
   10bf4:	61bb      	str	r3, [r7, #24]
            attr |= CO_ODA_READABLE;
   10bf6:	69bb      	ldr	r3, [r7, #24]
   10bf8:	f043 0304 	orr.w	r3, r3, #4
   10bfc:	61bb      	str	r3, [r7, #24]
        }
        return attr;
   10bfe:	69bb      	ldr	r3, [r7, #24]
   10c00:	e008      	b.n	10c14 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0xa0>
    }
    else{                            /* Object type is Record */
        return ((const CO_OD_entryRecord_t*)(object->pData))[subIndex].attribute;
   10c02:	697b      	ldr	r3, [r7, #20]
   10c04:	6919      	ldr	r1, [r3, #16]
   10c06:	79fa      	ldrb	r2, [r7, #7]
   10c08:	4613      	mov	r3, r2
   10c0a:	005b      	lsls	r3, r3, #1
   10c0c:	4413      	add	r3, r2
   10c0e:	009b      	lsls	r3, r3, #2
   10c10:	440b      	add	r3, r1
   10c12:	685b      	ldr	r3, [r3, #4]
    }
}
   10c14:	4618      	mov	r0, r3
   10c16:	3724      	adds	r7, #36	; 0x24
   10c18:	46bd      	mov	sp, r7
   10c1a:	bc80      	pop	{r7}
   10c1c:	4770      	bx	lr

00010c1e <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh>:


/******************************************************************************/
void* CO_SDO_Class::CO_OD_getDataPointer( uint32_t entryNo, uint8_t subIndex){
   10c1e:	b480      	push	{r7}
   10c20:	b087      	sub	sp, #28
   10c22:	af00      	add	r7, sp, #0
   10c24:	60f8      	str	r0, [r7, #12]
   10c26:	60b9      	str	r1, [r7, #8]
   10c28:	4613      	mov	r3, r2
   10c2a:	71fb      	strb	r3, [r7, #7]
    const CO_OD_entry_t* object = &SDO->OD[entryNo];
   10c2c:	68fb      	ldr	r3, [r7, #12]
   10c2e:	681b      	ldr	r3, [r3, #0]
   10c30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   10c32:	68ba      	ldr	r2, [r7, #8]
   10c34:	4613      	mov	r3, r2
   10c36:	009b      	lsls	r3, r3, #2
   10c38:	4413      	add	r3, r2
   10c3a:	009b      	lsls	r3, r3, #2
   10c3c:	440b      	add	r3, r1
   10c3e:	617b      	str	r3, [r7, #20]

    if(entryNo == 0xFFFFU){
   10c40:	68bb      	ldr	r3, [r7, #8]
   10c42:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10c46:	4293      	cmp	r3, r2
   10c48:	d101      	bne.n	10c4e <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x30>
        return 0;
   10c4a:	2300      	movs	r3, #0
   10c4c:	e02a      	b.n	10ca4 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
    }

    if(object->maxSubIndex == 0U){   /* Object type is Var */
   10c4e:	697b      	ldr	r3, [r7, #20]
   10c50:	791b      	ldrb	r3, [r3, #4]
   10c52:	2b00      	cmp	r3, #0
   10c54:	d102      	bne.n	10c5c <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x3e>
        return object->pData;
   10c56:	697b      	ldr	r3, [r7, #20]
   10c58:	691b      	ldr	r3, [r3, #16]
   10c5a:	e023      	b.n	10ca4 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
    }
    else if(object->attribute != 0U){/* Object type is Array */
   10c5c:	697b      	ldr	r3, [r7, #20]
   10c5e:	689b      	ldr	r3, [r3, #8]
   10c60:	2b00      	cmp	r3, #0
   10c62:	d016      	beq.n	10c92 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x74>
        if(subIndex==0){
   10c64:	79fb      	ldrb	r3, [r7, #7]
   10c66:	2b00      	cmp	r3, #0
   10c68:	d102      	bne.n	10c70 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x52>
            /* this is the data, for the subIndex 0 in the array */
            return (void*) &object->maxSubIndex;
   10c6a:	697b      	ldr	r3, [r7, #20]
   10c6c:	3304      	adds	r3, #4
   10c6e:	e019      	b.n	10ca4 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
        }
        else if(object->pData == 0){
   10c70:	697b      	ldr	r3, [r7, #20]
   10c72:	691b      	ldr	r3, [r3, #16]
   10c74:	2b00      	cmp	r3, #0
   10c76:	d101      	bne.n	10c7c <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x5e>
            /* data type is domain */
            return 0;
   10c78:	2300      	movs	r3, #0
   10c7a:	e013      	b.n	10ca4 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
        }
        else{
            return (void*)(((int8_t*)object->pData) + ((subIndex-1) * object->length));
   10c7c:	697b      	ldr	r3, [r7, #20]
   10c7e:	691a      	ldr	r2, [r3, #16]
   10c80:	79fb      	ldrb	r3, [r7, #7]
   10c82:	3b01      	subs	r3, #1
   10c84:	4619      	mov	r1, r3
   10c86:	697b      	ldr	r3, [r7, #20]
   10c88:	68db      	ldr	r3, [r3, #12]
   10c8a:	fb03 f301 	mul.w	r3, r3, r1
   10c8e:	4413      	add	r3, r2
   10c90:	e008      	b.n	10ca4 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
        }
    }
    else{                            /* Object Type is Record */
        return ((const CO_OD_entryRecord_t*)(object->pData))[subIndex].pData;
   10c92:	697b      	ldr	r3, [r7, #20]
   10c94:	6919      	ldr	r1, [r3, #16]
   10c96:	79fa      	ldrb	r2, [r7, #7]
   10c98:	4613      	mov	r3, r2
   10c9a:	005b      	lsls	r3, r3, #1
   10c9c:	4413      	add	r3, r2
   10c9e:	009b      	lsls	r3, r3, #2
   10ca0:	440b      	add	r3, r1
   10ca2:	681b      	ldr	r3, [r3, #0]
    }
}
   10ca4:	4618      	mov	r0, r3
   10ca6:	371c      	adds	r7, #28
   10ca8:	46bd      	mov	sp, r7
   10caa:	bc80      	pop	{r7}
   10cac:	4770      	bx	lr

00010cae <_ZN12CO_SDO_Class21CO_OD_getFlagsPointerEmh>:


/******************************************************************************/
uint8_t* CO_SDO_Class::CO_OD_getFlagsPointer( uint32_t entryNo, uint8_t subIndex){
   10cae:	b480      	push	{r7}
   10cb0:	b087      	sub	sp, #28
   10cb2:	af00      	add	r7, sp, #0
   10cb4:	60f8      	str	r0, [r7, #12]
   10cb6:	60b9      	str	r1, [r7, #8]
   10cb8:	4613      	mov	r3, r2
   10cba:	71fb      	strb	r3, [r7, #7]
    CO_OD_extension_t* ext;

    if((entryNo == 0xFFFFU) || (SDO->ODExtensions == 0)){
   10cbc:	68bb      	ldr	r3, [r7, #8]
   10cbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10cc2:	4293      	cmp	r3, r2
   10cc4:	d004      	beq.n	10cd0 <_ZN12CO_SDO_Class21CO_OD_getFlagsPointerEmh+0x22>
   10cc6:	68fb      	ldr	r3, [r7, #12]
   10cc8:	681b      	ldr	r3, [r3, #0]
   10cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   10ccc:	2b00      	cmp	r3, #0
   10cce:	d101      	bne.n	10cd4 <_ZN12CO_SDO_Class21CO_OD_getFlagsPointerEmh+0x26>
        return 0;
   10cd0:	2300      	movs	r3, #0
   10cd2:	e00d      	b.n	10cf0 <_ZN12CO_SDO_Class21CO_OD_getFlagsPointerEmh+0x42>
    }

    ext = &SDO->ODExtensions[entryNo];
   10cd4:	68fb      	ldr	r3, [r7, #12]
   10cd6:	681b      	ldr	r3, [r3, #0]
   10cd8:	6b59      	ldr	r1, [r3, #52]	; 0x34
   10cda:	68ba      	ldr	r2, [r7, #8]
   10cdc:	4613      	mov	r3, r2
   10cde:	005b      	lsls	r3, r3, #1
   10ce0:	4413      	add	r3, r2
   10ce2:	009b      	lsls	r3, r3, #2
   10ce4:	440b      	add	r3, r1
   10ce6:	617b      	str	r3, [r7, #20]

    return &ext->flags[subIndex];
   10ce8:	697b      	ldr	r3, [r7, #20]
   10cea:	689a      	ldr	r2, [r3, #8]
   10cec:	79fb      	ldrb	r3, [r7, #7]
   10cee:	4413      	add	r3, r2
}
   10cf0:	4618      	mov	r0, r3
   10cf2:	371c      	adds	r7, #28
   10cf4:	46bd      	mov	sp, r7
   10cf6:	bc80      	pop	{r7}
   10cf8:	4770      	bx	lr
	...

00010cfc <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_SDO_initTransfer( uint32_t index, uint8_t subIndex){
   10cfc:	b590      	push	{r4, r7, lr}
   10cfe:	b087      	sub	sp, #28
   10d00:	af00      	add	r7, sp, #0
   10d02:	60f8      	str	r0, [r7, #12]
   10d04:	60b9      	str	r1, [r7, #8]
   10d06:	4613      	mov	r3, r2
   10d08:	71fb      	strb	r3, [r7, #7]

    SDO->ODF_arg.index = index;
   10d0a:	68fb      	ldr	r3, [r7, #12]
   10d0c:	681b      	ldr	r3, [r3, #0]
   10d0e:	68ba      	ldr	r2, [r7, #8]
   10d10:	659a      	str	r2, [r3, #88]	; 0x58
    SDO->ODF_arg.subIndex = subIndex;
   10d12:	68fb      	ldr	r3, [r7, #12]
   10d14:	681b      	ldr	r3, [r3, #0]
   10d16:	79fa      	ldrb	r2, [r7, #7]
   10d18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* find object in Object Dictionary */
    SDO->entryNo = CO_OD_find( index);
   10d1c:	68fb      	ldr	r3, [r7, #12]
   10d1e:	681c      	ldr	r4, [r3, #0]
   10d20:	68b9      	ldr	r1, [r7, #8]
   10d22:	68f8      	ldr	r0, [r7, #12]
   10d24:	4b51      	ldr	r3, [pc, #324]	; (10e6c <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
   10d26:	4798      	blx	r3
   10d28:	4603      	mov	r3, r0
   10d2a:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(SDO->entryNo == 0xFFFFU){
   10d2c:	68fb      	ldr	r3, [r7, #12]
   10d2e:	681b      	ldr	r3, [r3, #0]
   10d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   10d32:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10d36:	4293      	cmp	r3, r2
   10d38:	d101      	bne.n	10d3e <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x42>
        return CO_SDO_AB_NOT_EXIST ;     /* object does not exist in OD */
   10d3a:	4b4d      	ldr	r3, [pc, #308]	; (10e70 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x174>)
   10d3c:	e091      	b.n	10e62 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x166>
    }

    /* verify existance of subIndex */
    if(subIndex > SDO->OD[SDO->entryNo].maxSubIndex &&
   10d3e:	79f9      	ldrb	r1, [r7, #7]
   10d40:	68fb      	ldr	r3, [r7, #12]
   10d42:	681b      	ldr	r3, [r3, #0]
   10d44:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   10d46:	68fb      	ldr	r3, [r7, #12]
   10d48:	681b      	ldr	r3, [r3, #0]
   10d4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   10d4c:	4613      	mov	r3, r2
   10d4e:	009b      	lsls	r3, r3, #2
   10d50:	4413      	add	r3, r2
   10d52:	009b      	lsls	r3, r3, #2
   10d54:	4403      	add	r3, r0
   10d56:	791b      	ldrb	r3, [r3, #4]
   10d58:	4299      	cmp	r1, r3
   10d5a:	dd0f      	ble.n	10d7c <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x80>
            SDO->OD[SDO->entryNo].pData != NULL)
   10d5c:	68fb      	ldr	r3, [r7, #12]
   10d5e:	681b      	ldr	r3, [r3, #0]
   10d60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   10d62:	68fb      	ldr	r3, [r7, #12]
   10d64:	681b      	ldr	r3, [r3, #0]
   10d66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   10d68:	4613      	mov	r3, r2
   10d6a:	009b      	lsls	r3, r3, #2
   10d6c:	4413      	add	r3, r2
   10d6e:	009b      	lsls	r3, r3, #2
   10d70:	440b      	add	r3, r1
   10d72:	691b      	ldr	r3, [r3, #16]
    if(subIndex > SDO->OD[SDO->entryNo].maxSubIndex &&
   10d74:	2b00      	cmp	r3, #0
   10d76:	d001      	beq.n	10d7c <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x80>
    {
        return CO_SDO_AB_SUB_UNKNOWN;     /* Sub-index does not exist. */
   10d78:	4b3e      	ldr	r3, [pc, #248]	; (10e74 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x178>)
   10d7a:	e072      	b.n	10e62 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x166>
    }

    /* pointer to data in Object dictionary */
    SDO->ODF_arg.ODdataStorage = CO_OD_getDataPointer(SDO->entryNo, subIndex);
   10d7c:	68fb      	ldr	r3, [r7, #12]
   10d7e:	681c      	ldr	r4, [r3, #0]
   10d80:	68fb      	ldr	r3, [r7, #12]
   10d82:	681b      	ldr	r3, [r3, #0]
   10d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   10d86:	79fa      	ldrb	r2, [r7, #7]
   10d88:	4619      	mov	r1, r3
   10d8a:	68f8      	ldr	r0, [r7, #12]
   10d8c:	4b3a      	ldr	r3, [pc, #232]	; (10e78 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x17c>)
   10d8e:	4798      	blx	r3
   10d90:	4603      	mov	r3, r0
   10d92:	64a3      	str	r3, [r4, #72]	; 0x48

    /* fill ODF_arg */
    SDO->ODF_arg.object = NULL;
   10d94:	68fb      	ldr	r3, [r7, #12]
   10d96:	681b      	ldr	r3, [r3, #0]
   10d98:	2200      	movs	r2, #0
   10d9a:	641a      	str	r2, [r3, #64]	; 0x40
    if(SDO->ODExtensions){
   10d9c:	68fb      	ldr	r3, [r7, #12]
   10d9e:	681b      	ldr	r3, [r3, #0]
   10da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   10da2:	2b00      	cmp	r3, #0
   10da4:	d010      	beq.n	10dc8 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0xcc>
        CO_OD_extension_t *ext = &SDO->ODExtensions[SDO->entryNo];
   10da6:	68fb      	ldr	r3, [r7, #12]
   10da8:	681b      	ldr	r3, [r3, #0]
   10daa:	6b59      	ldr	r1, [r3, #52]	; 0x34
   10dac:	68fb      	ldr	r3, [r7, #12]
   10dae:	681b      	ldr	r3, [r3, #0]
   10db0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   10db2:	4613      	mov	r3, r2
   10db4:	005b      	lsls	r3, r3, #1
   10db6:	4413      	add	r3, r2
   10db8:	009b      	lsls	r3, r3, #2
   10dba:	440b      	add	r3, r1
   10dbc:	617b      	str	r3, [r7, #20]
        SDO->ODF_arg.object = ext->object;
   10dbe:	68fb      	ldr	r3, [r7, #12]
   10dc0:	681b      	ldr	r3, [r3, #0]
   10dc2:	697a      	ldr	r2, [r7, #20]
   10dc4:	6852      	ldr	r2, [r2, #4]
   10dc6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    SDO->ODF_arg.data = SDO->databuffer;
   10dc8:	68fb      	ldr	r3, [r7, #12]
   10dca:	681b      	ldr	r3, [r3, #0]
   10dcc:	68fa      	ldr	r2, [r7, #12]
   10dce:	6812      	ldr	r2, [r2, #0]
   10dd0:	3208      	adds	r2, #8
   10dd2:	645a      	str	r2, [r3, #68]	; 0x44
    SDO->ODF_arg.dataLength = CO_OD_getLength(SDO->entryNo, subIndex);
   10dd4:	68fb      	ldr	r3, [r7, #12]
   10dd6:	681c      	ldr	r4, [r3, #0]
   10dd8:	68fb      	ldr	r3, [r7, #12]
   10dda:	681b      	ldr	r3, [r3, #0]
   10ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   10dde:	79fa      	ldrb	r2, [r7, #7]
   10de0:	4619      	mov	r1, r3
   10de2:	68f8      	ldr	r0, [r7, #12]
   10de4:	4b25      	ldr	r3, [pc, #148]	; (10e7c <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x180>)
   10de6:	4798      	blx	r3
   10de8:	4603      	mov	r3, r0
   10dea:	64e3      	str	r3, [r4, #76]	; 0x4c
    SDO->ODF_arg.attribute = CO_OD_getAttribute(SDO->entryNo, subIndex);
   10dec:	68fb      	ldr	r3, [r7, #12]
   10dee:	681c      	ldr	r4, [r3, #0]
   10df0:	68fb      	ldr	r3, [r7, #12]
   10df2:	681b      	ldr	r3, [r3, #0]
   10df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   10df6:	79fa      	ldrb	r2, [r7, #7]
   10df8:	4619      	mov	r1, r3
   10dfa:	68f8      	ldr	r0, [r7, #12]
   10dfc:	4b20      	ldr	r3, [pc, #128]	; (10e80 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x184>)
   10dfe:	4798      	blx	r3
   10e00:	4603      	mov	r3, r0
   10e02:	6523      	str	r3, [r4, #80]	; 0x50
    SDO->ODF_arg.pFlags = CO_OD_getFlagsPointer( SDO->entryNo, subIndex);
   10e04:	68fb      	ldr	r3, [r7, #12]
   10e06:	681c      	ldr	r4, [r3, #0]
   10e08:	68fb      	ldr	r3, [r7, #12]
   10e0a:	681b      	ldr	r3, [r3, #0]
   10e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   10e0e:	79fa      	ldrb	r2, [r7, #7]
   10e10:	4619      	mov	r1, r3
   10e12:	68f8      	ldr	r0, [r7, #12]
   10e14:	4b1b      	ldr	r3, [pc, #108]	; (10e84 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x188>)
   10e16:	4798      	blx	r3
   10e18:	4603      	mov	r3, r0
   10e1a:	6563      	str	r3, [r4, #84]	; 0x54

    SDO->ODF_arg.firstSegment = true;
   10e1c:	68fb      	ldr	r3, [r7, #12]
   10e1e:	681b      	ldr	r3, [r3, #0]
   10e20:	2201      	movs	r2, #1
   10e22:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
    SDO->ODF_arg.lastSegment = true;
   10e26:	68fb      	ldr	r3, [r7, #12]
   10e28:	681b      	ldr	r3, [r3, #0]
   10e2a:	2201      	movs	r2, #1
   10e2c:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f

    /* indicate total data length, if not domain */
    SDO->ODF_arg.dataLengthTotal = (SDO->ODF_arg.ODdataStorage) ? SDO->ODF_arg.dataLength : 0U;
   10e30:	68fb      	ldr	r3, [r7, #12]
   10e32:	681a      	ldr	r2, [r3, #0]
   10e34:	68fb      	ldr	r3, [r7, #12]
   10e36:	681b      	ldr	r3, [r3, #0]
   10e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   10e3a:	2b00      	cmp	r3, #0
   10e3c:	d003      	beq.n	10e46 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x14a>
   10e3e:	68fb      	ldr	r3, [r7, #12]
   10e40:	681b      	ldr	r3, [r3, #0]
   10e42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   10e44:	e000      	b.n	10e48 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x14c>
   10e46:	2300      	movs	r3, #0
   10e48:	6613      	str	r3, [r2, #96]	; 0x60

    SDO->ODF_arg.offset = 0U;
   10e4a:	68fb      	ldr	r3, [r7, #12]
   10e4c:	681b      	ldr	r3, [r3, #0]
   10e4e:	2200      	movs	r2, #0
   10e50:	665a      	str	r2, [r3, #100]	; 0x64

    /* verify length */
    if(SDO->ODF_arg.dataLength > CO_SDO_BUFFER_SIZE){
   10e52:	68fb      	ldr	r3, [r7, #12]
   10e54:	681b      	ldr	r3, [r3, #0]
   10e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   10e58:	2b20      	cmp	r3, #32
   10e5a:	d901      	bls.n	10e60 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x164>
        return CO_SDO_AB_DEVICE_INCOMPAT;     /* general internal incompatibility in the device */
   10e5c:	4b0a      	ldr	r3, [pc, #40]	; (10e88 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x18c>)
   10e5e:	e000      	b.n	10e62 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x166>
    }

    return 0U;
   10e60:	2300      	movs	r3, #0
}
   10e62:	4618      	mov	r0, r3
   10e64:	371c      	adds	r7, #28
   10e66:	46bd      	mov	sp, r7
   10e68:	bd90      	pop	{r4, r7, pc}
   10e6a:	bf00      	nop
   10e6c:	00010a29 	.word	0x00010a29
   10e70:	06020000 	.word	0x06020000
   10e74:	06090011 	.word	0x06090011
   10e78:	00010c1f 	.word	0x00010c1f
   10e7c:	00010ad1 	.word	0x00010ad1
   10e80:	00010b75 	.word	0x00010b75
   10e84:	00010caf 	.word	0x00010caf
   10e88:	06040047 	.word	0x06040047

00010e8c <_ZN12CO_SDO_Class13CO_SDO_readODEm>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_SDO_readOD(uint32_t SDOBufferSize){
   10e8c:	b580      	push	{r7, lr}
   10e8e:	b08a      	sub	sp, #40	; 0x28
   10e90:	af00      	add	r7, sp, #0
   10e92:	6078      	str	r0, [r7, #4]
   10e94:	6039      	str	r1, [r7, #0]
    uint8_t *SDObuffer = SDO->ODF_arg.data;
   10e96:	687b      	ldr	r3, [r7, #4]
   10e98:	681b      	ldr	r3, [r3, #0]
   10e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   10e9c:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t *ODdata = (uint8_t*)SDO->ODF_arg.ODdataStorage;
   10e9e:	687b      	ldr	r3, [r7, #4]
   10ea0:	681b      	ldr	r3, [r3, #0]
   10ea2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   10ea4:	623b      	str	r3, [r7, #32]
    uint32_t length = SDO->ODF_arg.dataLength;
   10ea6:	687b      	ldr	r3, [r7, #4]
   10ea8:	681b      	ldr	r3, [r3, #0]
   10eaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   10eac:	61fb      	str	r3, [r7, #28]
    CO_OD_extension_t *ext = 0;
   10eae:	2300      	movs	r3, #0
   10eb0:	61bb      	str	r3, [r7, #24]

    /* is object readable? */
    if((SDO->ODF_arg.attribute & CO_ODA_READABLE) == 0)
   10eb2:	687b      	ldr	r3, [r7, #4]
   10eb4:	681b      	ldr	r3, [r3, #0]
   10eb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   10eb8:	f003 0304 	and.w	r3, r3, #4
   10ebc:	2b00      	cmp	r3, #0
   10ebe:	d101      	bne.n	10ec4 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x38>
        return CO_SDO_AB_WRITEONLY;     /* attempt to read a write-only object */
   10ec0:	4b38      	ldr	r3, [pc, #224]	; (10fa4 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x118>)
   10ec2:	e06b      	b.n	10f9c <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x110>

    /* find extension */
    if(SDO->ODExtensions != NULL){
   10ec4:	687b      	ldr	r3, [r7, #4]
   10ec6:	681b      	ldr	r3, [r3, #0]
   10ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   10eca:	2b00      	cmp	r3, #0
   10ecc:	d00b      	beq.n	10ee6 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x5a>
        ext = &SDO->ODExtensions[SDO->entryNo];
   10ece:	687b      	ldr	r3, [r7, #4]
   10ed0:	681b      	ldr	r3, [r3, #0]
   10ed2:	6b59      	ldr	r1, [r3, #52]	; 0x34
   10ed4:	687b      	ldr	r3, [r7, #4]
   10ed6:	681b      	ldr	r3, [r3, #0]
   10ed8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   10eda:	4613      	mov	r3, r2
   10edc:	005b      	lsls	r3, r3, #1
   10ede:	4413      	add	r3, r2
   10ee0:	009b      	lsls	r3, r3, #2
   10ee2:	440b      	add	r3, r1
   10ee4:	61bb      	str	r3, [r7, #24]
    }

    /* copy data from OD to SDO buffer if not domain */
    if(ODdata != NULL){
   10ee6:	6a3b      	ldr	r3, [r7, #32]
   10ee8:	2b00      	cmp	r3, #0
   10eea:	d01e      	beq.n	10f2a <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x9e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   10eec:	f3ef 8310 	mrs	r3, PRIMASK
   10ef0:	60bb      	str	r3, [r7, #8]
  return(result);
   10ef2:	68bb      	ldr	r3, [r7, #8]
        CO_LOCK_OD();
   10ef4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
   10ef6:	b672      	cpsid	i
        while(length--) *(SDObuffer++) = *(ODdata++);
   10ef8:	69fb      	ldr	r3, [r7, #28]
   10efa:	1e5a      	subs	r2, r3, #1
   10efc:	61fa      	str	r2, [r7, #28]
   10efe:	2b00      	cmp	r3, #0
   10f00:	bf14      	ite	ne
   10f02:	2301      	movne	r3, #1
   10f04:	2300      	moveq	r3, #0
   10f06:	b2db      	uxtb	r3, r3
   10f08:	2b00      	cmp	r3, #0
   10f0a:	d008      	beq.n	10f1e <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x92>
   10f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10f0e:	1c5a      	adds	r2, r3, #1
   10f10:	627a      	str	r2, [r7, #36]	; 0x24
   10f12:	6a3a      	ldr	r2, [r7, #32]
   10f14:	1c51      	adds	r1, r2, #1
   10f16:	6239      	str	r1, [r7, #32]
   10f18:	7812      	ldrb	r2, [r2, #0]
   10f1a:	701a      	strb	r2, [r3, #0]
   10f1c:	e7ec      	b.n	10ef8 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x6c>
   10f1e:	697b      	ldr	r3, [r7, #20]
   10f20:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   10f22:	68fb      	ldr	r3, [r7, #12]
   10f24:	f383 8810 	msr	PRIMASK, r3
   10f28:	e005      	b.n	10f36 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0xaa>
        CO_UNLOCK_OD();
    }
    /* if domain, Object dictionary function MUST exist */
    else{
        if(ext->pODFunc == NULL){
   10f2a:	69bb      	ldr	r3, [r7, #24]
   10f2c:	681b      	ldr	r3, [r3, #0]
   10f2e:	2b00      	cmp	r3, #0
   10f30:	d101      	bne.n	10f36 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0xaa>
            return CO_SDO_AB_DEVICE_INCOMPAT;     /* general internal incompatibility in the device */
   10f32:	4b1d      	ldr	r3, [pc, #116]	; (10fa8 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x11c>)
   10f34:	e032      	b.n	10f9c <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x110>
        }
    }

    /* call Object dictionary function if registered */
    SDO->ODF_arg.reading = true;
   10f36:	687b      	ldr	r3, [r7, #4]
   10f38:	681b      	ldr	r3, [r3, #0]
   10f3a:	2201      	movs	r2, #1
   10f3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if(ext->pODFunc != NULL){
   10f40:	69bb      	ldr	r3, [r7, #24]
   10f42:	681b      	ldr	r3, [r3, #0]
   10f44:	2b00      	cmp	r3, #0
   10f46:	d019      	beq.n	10f7c <_ZN12CO_SDO_Class13CO_SDO_readODEm+0xf0>
        uint32_t abortCode = ext->pODFunc(&SDO->ODF_arg);
   10f48:	69bb      	ldr	r3, [r7, #24]
   10f4a:	681b      	ldr	r3, [r3, #0]
   10f4c:	687a      	ldr	r2, [r7, #4]
   10f4e:	6812      	ldr	r2, [r2, #0]
   10f50:	3240      	adds	r2, #64	; 0x40
   10f52:	4610      	mov	r0, r2
   10f54:	4798      	blx	r3
   10f56:	6138      	str	r0, [r7, #16]
        if(abortCode != 0U){
   10f58:	693b      	ldr	r3, [r7, #16]
   10f5a:	2b00      	cmp	r3, #0
   10f5c:	d001      	beq.n	10f62 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0xd6>
            return abortCode;
   10f5e:	693b      	ldr	r3, [r7, #16]
   10f60:	e01c      	b.n	10f9c <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x110>
        }

        /* dataLength (upadted by pODFunc) must be inside limits */
        if((SDO->ODF_arg.dataLength == 0U) || (SDO->ODF_arg.dataLength > SDOBufferSize)){
   10f62:	687b      	ldr	r3, [r7, #4]
   10f64:	681b      	ldr	r3, [r3, #0]
   10f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   10f68:	2b00      	cmp	r3, #0
   10f6a:	d005      	beq.n	10f78 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0xec>
   10f6c:	687b      	ldr	r3, [r7, #4]
   10f6e:	681b      	ldr	r3, [r3, #0]
   10f70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   10f72:	683b      	ldr	r3, [r7, #0]
   10f74:	429a      	cmp	r2, r3
   10f76:	d901      	bls.n	10f7c <_ZN12CO_SDO_Class13CO_SDO_readODEm+0xf0>
            return CO_SDO_AB_DEVICE_INCOMPAT;     /* general internal incompatibility in the device */
   10f78:	4b0b      	ldr	r3, [pc, #44]	; (10fa8 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x11c>)
   10f7a:	e00f      	b.n	10f9c <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x110>
        }
    }
    SDO->ODF_arg.offset += SDO->ODF_arg.dataLength;
   10f7c:	687b      	ldr	r3, [r7, #4]
   10f7e:	681b      	ldr	r3, [r3, #0]
   10f80:	687a      	ldr	r2, [r7, #4]
   10f82:	6812      	ldr	r2, [r2, #0]
   10f84:	6e51      	ldr	r1, [r2, #100]	; 0x64
   10f86:	687a      	ldr	r2, [r7, #4]
   10f88:	6812      	ldr	r2, [r2, #0]
   10f8a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   10f8c:	440a      	add	r2, r1
   10f8e:	665a      	str	r2, [r3, #100]	; 0x64
    SDO->ODF_arg.firstSegment = false;
   10f90:	687b      	ldr	r3, [r7, #4]
   10f92:	681b      	ldr	r3, [r3, #0]
   10f94:	2200      	movs	r2, #0
   10f96:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
            *(buf2--) = b;
        }
    }
#endif

    return 0U;
   10f9a:	2300      	movs	r3, #0
}
   10f9c:	4618      	mov	r0, r3
   10f9e:	3728      	adds	r7, #40	; 0x28
   10fa0:	46bd      	mov	sp, r7
   10fa2:	bd80      	pop	{r7, pc}
   10fa4:	06010001 	.word	0x06010001
   10fa8:	06040047 	.word	0x06040047

00010fac <_ZN12CO_SDO_Class14CO_SDO_writeODEm>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_SDO_writeOD(uint32_t length){
   10fac:	b580      	push	{r7, lr}
   10fae:	b08a      	sub	sp, #40	; 0x28
   10fb0:	af00      	add	r7, sp, #0
   10fb2:	6078      	str	r0, [r7, #4]
   10fb4:	6039      	str	r1, [r7, #0]
    uint8_t *SDObuffer = SDO->ODF_arg.data;
   10fb6:	687b      	ldr	r3, [r7, #4]
   10fb8:	681b      	ldr	r3, [r3, #0]
   10fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   10fbc:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t *ODdata = (uint8_t*)SDO->ODF_arg.ODdataStorage;
   10fbe:	687b      	ldr	r3, [r7, #4]
   10fc0:	681b      	ldr	r3, [r3, #0]
   10fc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   10fc4:	623b      	str	r3, [r7, #32]
    bool_t exception_1003 = false;
   10fc6:	2300      	movs	r3, #0
   10fc8:	77fb      	strb	r3, [r7, #31]

    /* is object writeable? */
    if((SDO->ODF_arg.attribute & CO_ODA_WRITEABLE) == 0){
   10fca:	687b      	ldr	r3, [r7, #4]
   10fcc:	681b      	ldr	r3, [r3, #0]
   10fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   10fd0:	f003 0308 	and.w	r3, r3, #8
   10fd4:	2b00      	cmp	r3, #0
   10fd6:	d101      	bne.n	10fdc <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x30>
        return CO_SDO_AB_READONLY;     /* attempt to write a read-only object */
   10fd8:	4b3f      	ldr	r3, [pc, #252]	; (110d8 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x12c>)
   10fda:	e079      	b.n	110d0 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x124>
    }

    /* length of domain data is application specific and not verified */
    if(ODdata == 0){
   10fdc:	6a3b      	ldr	r3, [r7, #32]
   10fde:	2b00      	cmp	r3, #0
   10fe0:	d104      	bne.n	10fec <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x40>
        SDO->ODF_arg.dataLength = length;
   10fe2:	687b      	ldr	r3, [r7, #4]
   10fe4:	681b      	ldr	r3, [r3, #0]
   10fe6:	683a      	ldr	r2, [r7, #0]
   10fe8:	64da      	str	r2, [r3, #76]	; 0x4c
   10fea:	e007      	b.n	10ffc <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x50>
    }

    /* verify length except for domain data type */
    else if(SDO->ODF_arg.dataLength != length){
   10fec:	687b      	ldr	r3, [r7, #4]
   10fee:	681b      	ldr	r3, [r3, #0]
   10ff0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   10ff2:	683b      	ldr	r3, [r7, #0]
   10ff4:	429a      	cmp	r2, r3
   10ff6:	d001      	beq.n	10ffc <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x50>
        return CO_SDO_AB_TYPE_MISMATCH;     /* Length of service parameter does not match */
   10ff8:	4b38      	ldr	r3, [pc, #224]	; (110dc <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x130>)
   10ffa:	e069      	b.n	110d0 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x124>
        }
    }
#endif

    /* call Object dictionary function if registered */
    SDO->ODF_arg.reading = false;
   10ffc:	687b      	ldr	r3, [r7, #4]
   10ffe:	681b      	ldr	r3, [r3, #0]
   11000:	2200      	movs	r2, #0
   11002:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if(SDO->ODExtensions != NULL){
   11006:	687b      	ldr	r3, [r7, #4]
   11008:	681b      	ldr	r3, [r3, #0]
   1100a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1100c:	2b00      	cmp	r3, #0
   1100e:	d01c      	beq.n	1104a <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x9e>
        CO_OD_extension_t *ext = &SDO->ODExtensions[SDO->entryNo];
   11010:	687b      	ldr	r3, [r7, #4]
   11012:	681b      	ldr	r3, [r3, #0]
   11014:	6b59      	ldr	r1, [r3, #52]	; 0x34
   11016:	687b      	ldr	r3, [r7, #4]
   11018:	681b      	ldr	r3, [r3, #0]
   1101a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1101c:	4613      	mov	r3, r2
   1101e:	005b      	lsls	r3, r3, #1
   11020:	4413      	add	r3, r2
   11022:	009b      	lsls	r3, r3, #2
   11024:	440b      	add	r3, r1
   11026:	61bb      	str	r3, [r7, #24]

        if(ext->pODFunc != NULL){
   11028:	69bb      	ldr	r3, [r7, #24]
   1102a:	681b      	ldr	r3, [r3, #0]
   1102c:	2b00      	cmp	r3, #0
   1102e:	d00c      	beq.n	1104a <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x9e>
            uint32_t abortCode = ext->pODFunc(&SDO->ODF_arg);
   11030:	69bb      	ldr	r3, [r7, #24]
   11032:	681b      	ldr	r3, [r3, #0]
   11034:	687a      	ldr	r2, [r7, #4]
   11036:	6812      	ldr	r2, [r2, #0]
   11038:	3240      	adds	r2, #64	; 0x40
   1103a:	4610      	mov	r0, r2
   1103c:	4798      	blx	r3
   1103e:	6178      	str	r0, [r7, #20]
            if(abortCode != 0U){
   11040:	697b      	ldr	r3, [r7, #20]
   11042:	2b00      	cmp	r3, #0
   11044:	d001      	beq.n	1104a <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x9e>
                return abortCode;
   11046:	697b      	ldr	r3, [r7, #20]
   11048:	e042      	b.n	110d0 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x124>
            }
        }
    }
    SDO->ODF_arg.offset += SDO->ODF_arg.dataLength;
   1104a:	687b      	ldr	r3, [r7, #4]
   1104c:	681b      	ldr	r3, [r3, #0]
   1104e:	687a      	ldr	r2, [r7, #4]
   11050:	6812      	ldr	r2, [r2, #0]
   11052:	6e51      	ldr	r1, [r2, #100]	; 0x64
   11054:	687a      	ldr	r2, [r7, #4]
   11056:	6812      	ldr	r2, [r2, #0]
   11058:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   1105a:	440a      	add	r2, r1
   1105c:	665a      	str	r2, [r3, #100]	; 0x64
    SDO->ODF_arg.firstSegment = false;
   1105e:	687b      	ldr	r3, [r7, #4]
   11060:	681b      	ldr	r3, [r3, #0]
   11062:	2200      	movs	r2, #0
   11064:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e

    /* Special exception: 1003,00 is writable from network, but not in OD  */
    if(SDO->ODF_arg.index == 0x1003 && SDO->ODF_arg.subIndex == 0) {
   11068:	687b      	ldr	r3, [r7, #4]
   1106a:	681b      	ldr	r3, [r3, #0]
   1106c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   1106e:	f241 0203 	movw	r2, #4099	; 0x1003
   11072:	4293      	cmp	r3, r2
   11074:	d107      	bne.n	11086 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0xda>
   11076:	687b      	ldr	r3, [r7, #4]
   11078:	681b      	ldr	r3, [r3, #0]
   1107a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
   1107e:	2b00      	cmp	r3, #0
   11080:	d101      	bne.n	11086 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0xda>
        exception_1003 = true;
   11082:	2301      	movs	r3, #1
   11084:	77fb      	strb	r3, [r7, #31]
    }

    /* copy data from SDO buffer to OD if not domain */
    if(ODdata != NULL && exception_1003 == false){
   11086:	6a3b      	ldr	r3, [r7, #32]
   11088:	2b00      	cmp	r3, #0
   1108a:	d020      	beq.n	110ce <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x122>
   1108c:	7ffb      	ldrb	r3, [r7, #31]
   1108e:	2b00      	cmp	r3, #0
   11090:	d11d      	bne.n	110ce <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x122>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   11092:	f3ef 8310 	mrs	r3, PRIMASK
   11096:	60bb      	str	r3, [r7, #8]
  return(result);
   11098:	68bb      	ldr	r3, [r7, #8]
        CO_LOCK_OD();
   1109a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
   1109c:	b672      	cpsid	i
        while(length--){
   1109e:	683b      	ldr	r3, [r7, #0]
   110a0:	1e5a      	subs	r2, r3, #1
   110a2:	603a      	str	r2, [r7, #0]
   110a4:	2b00      	cmp	r3, #0
   110a6:	bf14      	ite	ne
   110a8:	2301      	movne	r3, #1
   110aa:	2300      	moveq	r3, #0
   110ac:	b2db      	uxtb	r3, r3
   110ae:	2b00      	cmp	r3, #0
   110b0:	d008      	beq.n	110c4 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x118>
            *(ODdata++) = *(SDObuffer++);
   110b2:	6a3b      	ldr	r3, [r7, #32]
   110b4:	1c5a      	adds	r2, r3, #1
   110b6:	623a      	str	r2, [r7, #32]
   110b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   110ba:	1c51      	adds	r1, r2, #1
   110bc:	6279      	str	r1, [r7, #36]	; 0x24
   110be:	7812      	ldrb	r2, [r2, #0]
   110c0:	701a      	strb	r2, [r3, #0]
        while(length--){
   110c2:	e7ec      	b.n	1109e <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0xf2>
   110c4:	693b      	ldr	r3, [r7, #16]
   110c6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   110c8:	68fb      	ldr	r3, [r7, #12]
   110ca:	f383 8810 	msr	PRIMASK, r3
        }
        CO_UNLOCK_OD();
    }

    return 0;
   110ce:	2300      	movs	r3, #0
}
   110d0:	4618      	mov	r0, r3
   110d2:	3728      	adds	r7, #40	; 0x28
   110d4:	46bd      	mov	sp, r7
   110d6:	bd80      	pop	{r7, pc}
   110d8:	06010002 	.word	0x06010002
   110dc:	06070010 	.word	0x06070010

000110e0 <_ZL12CO_SDO_abortP8CO_SDO_tm>:


/******************************************************************************/
static void CO_SDO_abort(CO_SDO_t *SDO,uint32_t code){
   110e0:	b580      	push	{r7, lr}
   110e2:	b082      	sub	sp, #8
   110e4:	af00      	add	r7, sp, #0
   110e6:	6078      	str	r0, [r7, #4]
   110e8:	6039      	str	r1, [r7, #0]
    SDO->CANtxBuff->data[0] = 0x80;
   110ea:	687b      	ldr	r3, [r7, #4]
   110ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   110f0:	2280      	movs	r2, #128	; 0x80
   110f2:	715a      	strb	r2, [r3, #5]
    SDO->CANtxBuff->data[1] = SDO->ODF_arg.index & 0xFF;
   110f4:	687b      	ldr	r3, [r7, #4]
   110f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   110fa:	687a      	ldr	r2, [r7, #4]
   110fc:	6d92      	ldr	r2, [r2, #88]	; 0x58
   110fe:	b2d2      	uxtb	r2, r2
   11100:	719a      	strb	r2, [r3, #6]
    SDO->CANtxBuff->data[2] = (SDO->ODF_arg.index>>8) & 0xFF;
   11102:	687b      	ldr	r3, [r7, #4]
   11104:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11108:	687a      	ldr	r2, [r7, #4]
   1110a:	6d92      	ldr	r2, [r2, #88]	; 0x58
   1110c:	0a12      	lsrs	r2, r2, #8
   1110e:	b2d2      	uxtb	r2, r2
   11110:	71da      	strb	r2, [r3, #7]
    SDO->CANtxBuff->data[3] = SDO->ODF_arg.subIndex;
   11112:	687b      	ldr	r3, [r7, #4]
   11114:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11118:	687a      	ldr	r2, [r7, #4]
   1111a:	f892 205c 	ldrb.w	r2, [r2, #92]	; 0x5c
   1111e:	721a      	strb	r2, [r3, #8]
   ptrCODriverClass->CO_memcpySwap4(&SDO->CANtxBuff->data[4], &code);
   11120:	4b0f      	ldr	r3, [pc, #60]	; (11160 <_ZL12CO_SDO_abortP8CO_SDO_tm+0x80>)
   11122:	681b      	ldr	r3, [r3, #0]
   11124:	1d18      	adds	r0, r3, #4
   11126:	687b      	ldr	r3, [r7, #4]
   11128:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   1112c:	3309      	adds	r3, #9
   1112e:	463a      	mov	r2, r7
   11130:	4619      	mov	r1, r3
   11132:	4b0c      	ldr	r3, [pc, #48]	; (11164 <_ZL12CO_SDO_abortP8CO_SDO_tm+0x84>)
   11134:	4798      	blx	r3
    SDO->state = CO_SDO_ST_IDLE;
   11136:	687b      	ldr	r3, [r7, #4]
   11138:	2200      	movs	r2, #0
   1113a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    SDO->CANrxNew = false;
   1113e:	687b      	ldr	r3, [r7, #4]
   11140:	2200      	movs	r2, #0
   11142:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
    ptrCODriverClass->CAN_Send(SDO->CANtxBuff);
   11146:	4b06      	ldr	r3, [pc, #24]	; (11160 <_ZL12CO_SDO_abortP8CO_SDO_tm+0x80>)
   11148:	681a      	ldr	r2, [r3, #0]
   1114a:	687b      	ldr	r3, [r7, #4]
   1114c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11150:	4619      	mov	r1, r3
   11152:	4610      	mov	r0, r2
   11154:	4b04      	ldr	r3, [pc, #16]	; (11168 <_ZL12CO_SDO_abortP8CO_SDO_tm+0x88>)
   11156:	4798      	blx	r3
}
   11158:	bf00      	nop
   1115a:	3708      	adds	r7, #8
   1115c:	46bd      	mov	sp, r7
   1115e:	bd80      	pop	{r7, pc}
   11160:	20001934 	.word	0x20001934
   11164:	000105bd 	.word	0x000105bd
   11168:	0000d885 	.word	0x0000d885

0001116c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm>:
int8_t CO_SDO_Class::CO_SDO_process(
         bool_t                  NMTisPreOrOperational,
        uint32_t                timeDifference_ms,
        uint32_t                SDOtimeoutTime,
        uint32_t               *timerNext_ms)
{
   1116c:	b5b0      	push	{r4, r5, r7, lr}
   1116e:	b092      	sub	sp, #72	; 0x48
   11170:	af00      	add	r7, sp, #0
   11172:	60f8      	str	r0, [r7, #12]
   11174:	607a      	str	r2, [r7, #4]
   11176:	603b      	str	r3, [r7, #0]
   11178:	460b      	mov	r3, r1
   1117a:	72fb      	strb	r3, [r7, #11]
    CO_SDO_state_t state = CO_SDO_ST_IDLE;
   1117c:	2300      	movs	r3, #0
   1117e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    bool_t timeoutSubblockDownolad = false;
   11182:	2300      	movs	r3, #0
   11184:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    bool_t sendResponse = false;
   11188:	2300      	movs	r3, #0
   1118a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	
    /* return if idle */
    if((SDO->state == CO_SDO_ST_IDLE) && (!SDO->CANrxNew)){
   1118e:	68fb      	ldr	r3, [r7, #12]
   11190:	681b      	ldr	r3, [r3, #0]
   11192:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   11196:	2b00      	cmp	r3, #0
   11198:	d108      	bne.n	111ac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x40>
   1119a:	68fb      	ldr	r3, [r7, #12]
   1119c:	681b      	ldr	r3, [r3, #0]
   1119e:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
   111a2:	2b00      	cmp	r3, #0
   111a4:	d102      	bne.n	111ac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x40>
	//	printf("CO_SDO_ST_IDLE\n\r");
        return 0;
   111a6:	2300      	movs	r3, #0
   111a8:	f001 b976 	b.w	12498 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
    }

    /* SDO is allowed to work only in operational or pre-operational NMT state */
    if(!NMTisPreOrOperational){
   111ac:	7afb      	ldrb	r3, [r7, #11]
   111ae:	2b00      	cmp	r3, #0
   111b0:	d10c      	bne.n	111cc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x60>
        SDO->state = CO_SDO_ST_IDLE;
   111b2:	68fb      	ldr	r3, [r7, #12]
   111b4:	681b      	ldr	r3, [r3, #0]
   111b6:	2200      	movs	r2, #0
   111b8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        SDO->CANrxNew = false;
   111bc:	68fb      	ldr	r3, [r7, #12]
   111be:	681b      	ldr	r3, [r3, #0]
   111c0:	2200      	movs	r2, #0
   111c2:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	//	printf("!NMTisPreOrOperational\n\r");
        return 0;
   111c6:	2300      	movs	r3, #0
   111c8:	f001 b966 	b.w	12498 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
    }

    /* Is something new to process? */
    if((!SDO->CANtxBuff->bufferFull) && ((SDO->CANrxNew) || (SDO->state == CO_SDO_ST_UPLOAD_BL_SUBBLOCK))){
   111cc:	68fb      	ldr	r3, [r7, #12]
   111ce:	681b      	ldr	r3, [r3, #0]
   111d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   111d4:	7b5b      	ldrb	r3, [r3, #13]
   111d6:	b2db      	uxtb	r3, r3
   111d8:	2b00      	cmp	r3, #0
   111da:	d10d      	bne.n	111f8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x8c>
   111dc:	68fb      	ldr	r3, [r7, #12]
   111de:	681b      	ldr	r3, [r3, #0]
   111e0:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
   111e4:	2b00      	cmp	r3, #0
   111e6:	d105      	bne.n	111f4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x88>
   111e8:	68fb      	ldr	r3, [r7, #12]
   111ea:	681b      	ldr	r3, [r3, #0]
   111ec:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   111f0:	2b26      	cmp	r3, #38	; 0x26
   111f2:	d101      	bne.n	111f8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x8c>
   111f4:	2301      	movs	r3, #1
   111f6:	e000      	b.n	111fa <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x8e>
   111f8:	2300      	movs	r3, #0
   111fa:	2b00      	cmp	r3, #0
   111fc:	f000 80eb 	beq.w	113d6 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x26a>
        uint8_t CCS = SDO->CANrxData[0] >> 5;   /* Client command specifier */
   11200:	68fb      	ldr	r3, [r7, #12]
   11202:	681b      	ldr	r3, [r3, #0]
   11204:	781b      	ldrb	r3, [r3, #0]
   11206:	115b      	asrs	r3, r3, #5
   11208:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		//printf("Is something new to process\n\r");
        /* reset timeout */
        if(SDO->state != CO_SDO_ST_UPLOAD_BL_SUBBLOCK)
   1120c:	68fb      	ldr	r3, [r7, #12]
   1120e:	681b      	ldr	r3, [r3, #0]
   11210:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   11214:	2b26      	cmp	r3, #38	; 0x26
   11216:	d003      	beq.n	11220 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xb4>
            SDO->timeoutTimer = 0;
   11218:	68fb      	ldr	r3, [r7, #12]
   1121a:	681b      	ldr	r3, [r3, #0]
   1121c:	2200      	movs	r2, #0
   1121e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* clear response buffer */
        SDO->CANtxBuff->data[0] = SDO->CANtxBuff->data[1] = SDO->CANtxBuff->data[2] = SDO->CANtxBuff->data[3] = 0;
   11220:	68fb      	ldr	r3, [r7, #12]
   11222:	681b      	ldr	r3, [r3, #0]
   11224:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   11228:	68fb      	ldr	r3, [r7, #12]
   1122a:	681b      	ldr	r3, [r3, #0]
   1122c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11230:	68fa      	ldr	r2, [r7, #12]
   11232:	6812      	ldr	r2, [r2, #0]
   11234:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
   11238:	68f9      	ldr	r1, [r7, #12]
   1123a:	6809      	ldr	r1, [r1, #0]
   1123c:	f8d1 1084 	ldr.w	r1, [r1, #132]	; 0x84
   11240:	2400      	movs	r4, #0
   11242:	720c      	strb	r4, [r1, #8]
   11244:	7a09      	ldrb	r1, [r1, #8]
   11246:	71d1      	strb	r1, [r2, #7]
   11248:	79d2      	ldrb	r2, [r2, #7]
   1124a:	719a      	strb	r2, [r3, #6]
   1124c:	799b      	ldrb	r3, [r3, #6]
   1124e:	7143      	strb	r3, [r0, #5]
        SDO->CANtxBuff->data[4] = SDO->CANtxBuff->data[5] = SDO->CANtxBuff->data[6] = SDO->CANtxBuff->data[7] = 0;
   11250:	68fb      	ldr	r3, [r7, #12]
   11252:	681b      	ldr	r3, [r3, #0]
   11254:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   11258:	68fb      	ldr	r3, [r7, #12]
   1125a:	681b      	ldr	r3, [r3, #0]
   1125c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11260:	68fa      	ldr	r2, [r7, #12]
   11262:	6812      	ldr	r2, [r2, #0]
   11264:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
   11268:	68f9      	ldr	r1, [r7, #12]
   1126a:	6809      	ldr	r1, [r1, #0]
   1126c:	f8d1 1084 	ldr.w	r1, [r1, #132]	; 0x84
   11270:	2400      	movs	r4, #0
   11272:	730c      	strb	r4, [r1, #12]
   11274:	7b09      	ldrb	r1, [r1, #12]
   11276:	72d1      	strb	r1, [r2, #11]
   11278:	7ad2      	ldrb	r2, [r2, #11]
   1127a:	729a      	strb	r2, [r3, #10]
   1127c:	7a9b      	ldrb	r3, [r3, #10]
   1127e:	7243      	strb	r3, [r0, #9]

        /* Is abort from client? */
        if((SDO->CANrxNew) && (SDO->CANrxData[0] == CCS_ABORT)){
   11280:	68fb      	ldr	r3, [r7, #12]
   11282:	681b      	ldr	r3, [r3, #0]
   11284:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
   11288:	2b00      	cmp	r3, #0
   1128a:	d012      	beq.n	112b2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x146>
   1128c:	68fb      	ldr	r3, [r7, #12]
   1128e:	681b      	ldr	r3, [r3, #0]
   11290:	781b      	ldrb	r3, [r3, #0]
   11292:	2b80      	cmp	r3, #128	; 0x80
   11294:	d10d      	bne.n	112b2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x146>
            SDO->state = CO_SDO_ST_IDLE;
   11296:	68fb      	ldr	r3, [r7, #12]
   11298:	681b      	ldr	r3, [r3, #0]
   1129a:	2200      	movs	r2, #0
   1129c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            SDO->CANrxNew = false;
   112a0:	68fb      	ldr	r3, [r7, #12]
   112a2:	681b      	ldr	r3, [r3, #0]
   112a4:	2200      	movs	r2, #0
   112a6:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
            return -1;
   112aa:	f04f 33ff 	mov.w	r3, #4294967295
   112ae:	f001 b8f3 	b.w	12498 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
        }

        /* continue with previous SDO communication or start new */
        if(SDO->state != CO_SDO_ST_IDLE){
   112b2:	68fb      	ldr	r3, [r7, #12]
   112b4:	681b      	ldr	r3, [r3, #0]
   112b6:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   112ba:	2b00      	cmp	r3, #0
   112bc:	d006      	beq.n	112cc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x160>
            state = SDO->state;
   112be:	68fb      	ldr	r3, [r7, #12]
   112c0:	681b      	ldr	r3, [r3, #0]
   112c2:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   112c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   112ca:	e084      	b.n	113d6 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x26a>
        else{
            uint32_t abortCode;
            uint32_t index;
			
            /* Is client command specifier valid */
            if((CCS != CCS_DOWNLOAD_INITIATE) && (CCS != CCS_UPLOAD_INITIATE) &&
   112cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   112d0:	2b01      	cmp	r3, #1
   112d2:	d015      	beq.n	11300 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x194>
   112d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   112d8:	2b02      	cmp	r3, #2
   112da:	d011      	beq.n	11300 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x194>
   112dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   112e0:	2b06      	cmp	r3, #6
   112e2:	d00d      	beq.n	11300 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x194>
                (CCS != CCS_DOWNLOAD_BLOCK) && (CCS != CCS_UPLOAD_BLOCK)){
   112e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   112e8:	2b05      	cmp	r3, #5
   112ea:	d009      	beq.n	11300 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x194>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
   112ec:	68fb      	ldr	r3, [r7, #12]
   112ee:	681b      	ldr	r3, [r3, #0]
   112f0:	4992      	ldr	r1, [pc, #584]	; (1153c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3d0>)
   112f2:	4618      	mov	r0, r3
   112f4:	4b92      	ldr	r3, [pc, #584]	; (11540 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3d4>)
   112f6:	4798      	blx	r3
                return -1;
   112f8:	f04f 33ff 	mov.w	r3, #4294967295
   112fc:	f001 b8cc 	b.w	12498 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            /* init ODF_arg */
            index = SDO->CANrxData[2];
   11300:	68fb      	ldr	r3, [r7, #12]
   11302:	681b      	ldr	r3, [r3, #0]
   11304:	789b      	ldrb	r3, [r3, #2]
   11306:	633b      	str	r3, [r7, #48]	; 0x30
            index = index << 8 | SDO->CANrxData[1];
   11308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1130a:	021b      	lsls	r3, r3, #8
   1130c:	68fa      	ldr	r2, [r7, #12]
   1130e:	6812      	ldr	r2, [r2, #0]
   11310:	7852      	ldrb	r2, [r2, #1]
   11312:	4313      	orrs	r3, r2
   11314:	633b      	str	r3, [r7, #48]	; 0x30
            abortCode = CO_SDO_initTransfer( index, SDO->CANrxData[3]);
   11316:	68fb      	ldr	r3, [r7, #12]
   11318:	681b      	ldr	r3, [r3, #0]
   1131a:	78db      	ldrb	r3, [r3, #3]
   1131c:	461a      	mov	r2, r3
   1131e:	6b39      	ldr	r1, [r7, #48]	; 0x30
   11320:	68f8      	ldr	r0, [r7, #12]
   11322:	4b88      	ldr	r3, [pc, #544]	; (11544 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3d8>)
   11324:	4798      	blx	r3
   11326:	62f8      	str	r0, [r7, #44]	; 0x2c
            if(abortCode != 0U){
   11328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1132a:	2b00      	cmp	r3, #0
   1132c:	d009      	beq.n	11342 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1d6>
                CO_SDO_abort(SDO, abortCode);
   1132e:	68fb      	ldr	r3, [r7, #12]
   11330:	681b      	ldr	r3, [r3, #0]
   11332:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   11334:	4618      	mov	r0, r3
   11336:	4b82      	ldr	r3, [pc, #520]	; (11540 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3d4>)
   11338:	4798      	blx	r3
                return -1;
   1133a:	f04f 33ff 	mov.w	r3, #4294967295
   1133e:	f001 b8ab 	b.w	12498 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            /* download */
            if((CCS == CCS_DOWNLOAD_INITIATE) || (CCS == CCS_DOWNLOAD_BLOCK)){
   11342:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   11346:	2b01      	cmp	r3, #1
   11348:	d003      	beq.n	11352 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1e6>
   1134a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   1134e:	2b06      	cmp	r3, #6
   11350:	d11c      	bne.n	1138c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x220>
                if((SDO->ODF_arg.attribute & CO_ODA_WRITEABLE) == 0U){
   11352:	68fb      	ldr	r3, [r7, #12]
   11354:	681b      	ldr	r3, [r3, #0]
   11356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   11358:	f003 0308 	and.w	r3, r3, #8
   1135c:	2b00      	cmp	r3, #0
   1135e:	d109      	bne.n	11374 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x208>
                    CO_SDO_abort(SDO, CO_SDO_AB_READONLY); /* attempt to write a read-only object */
   11360:	68fb      	ldr	r3, [r7, #12]
   11362:	681b      	ldr	r3, [r3, #0]
   11364:	4978      	ldr	r1, [pc, #480]	; (11548 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3dc>)
   11366:	4618      	mov	r0, r3
   11368:	4b75      	ldr	r3, [pc, #468]	; (11540 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3d4>)
   1136a:	4798      	blx	r3
                    return -1;
   1136c:	f04f 33ff 	mov.w	r3, #4294967295
   11370:	f001 b892 	b.w	12498 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                }

                /* set state machine to normal or block download */
                if(CCS == CCS_DOWNLOAD_INITIATE){
   11374:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   11378:	2b01      	cmp	r3, #1
   1137a:	d103      	bne.n	11384 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x218>
                    state = CO_SDO_ST_DOWNLOAD_INITIATE;
   1137c:	2311      	movs	r3, #17
   1137e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                if(CCS == CCS_DOWNLOAD_INITIATE){
   11382:	e028      	b.n	113d6 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x26a>
                }
                else{
                    state = CO_SDO_ST_DOWNLOAD_BL_INITIATE;
   11384:	2314      	movs	r3, #20
   11386:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                if(CCS == CCS_DOWNLOAD_INITIATE){
   1138a:	e024      	b.n	113d6 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x26a>
                }
            }

            /* upload */
            else{
                abortCode = CO_SDO_readOD( CO_SDO_BUFFER_SIZE);
   1138c:	2120      	movs	r1, #32
   1138e:	68f8      	ldr	r0, [r7, #12]
   11390:	4b6e      	ldr	r3, [pc, #440]	; (1154c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3e0>)
   11392:	4798      	blx	r3
   11394:	62f8      	str	r0, [r7, #44]	; 0x2c
                if(abortCode != 0U){
   11396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11398:	2b00      	cmp	r3, #0
   1139a:	d009      	beq.n	113b0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x244>
                    CO_SDO_abort(SDO, abortCode);
   1139c:	68fb      	ldr	r3, [r7, #12]
   1139e:	681b      	ldr	r3, [r3, #0]
   113a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   113a2:	4618      	mov	r0, r3
   113a4:	4b66      	ldr	r3, [pc, #408]	; (11540 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3d4>)
   113a6:	4798      	blx	r3
                    return -1;
   113a8:	f04f 33ff 	mov.w	r3, #4294967295
   113ac:	f001 b874 	b.w	12498 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                }

                /* if data size is large enough set state machine to block upload, otherwise set to normal transfer */
                if((CCS == CCS_UPLOAD_BLOCK) && (SDO->ODF_arg.dataLength > SDO->CANrxData[5])){
   113b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   113b4:	2b05      	cmp	r3, #5
   113b6:	d10b      	bne.n	113d0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x264>
   113b8:	68fb      	ldr	r3, [r7, #12]
   113ba:	681b      	ldr	r3, [r3, #0]
   113bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   113be:	68fa      	ldr	r2, [r7, #12]
   113c0:	6812      	ldr	r2, [r2, #0]
   113c2:	7952      	ldrb	r2, [r2, #5]
   113c4:	4293      	cmp	r3, r2
   113c6:	d903      	bls.n	113d0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x264>
                    state = CO_SDO_ST_UPLOAD_BL_INITIATE;
   113c8:	2324      	movs	r3, #36	; 0x24
   113ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   113ce:	e002      	b.n	113d6 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x26a>
                }
                else{
                    state = CO_SDO_ST_UPLOAD_INITIATE;
   113d0:	2321      	movs	r3, #33	; 0x21
   113d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            }
        }
    }

    /* verify SDO timeout */
    if(SDO->timeoutTimer < SDOtimeoutTime){
   113d6:	68fb      	ldr	r3, [r7, #12]
   113d8:	681b      	ldr	r3, [r3, #0]
   113da:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   113dc:	683b      	ldr	r3, [r7, #0]
   113de:	429a      	cmp	r2, r3
   113e0:	d207      	bcs.n	113f2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x286>
        SDO->timeoutTimer += timeDifference_ms;
   113e2:	68fb      	ldr	r3, [r7, #12]
   113e4:	681b      	ldr	r3, [r3, #0]
   113e6:	68fa      	ldr	r2, [r7, #12]
   113e8:	6812      	ldr	r2, [r2, #0]
   113ea:	6ed1      	ldr	r1, [r2, #108]	; 0x6c
   113ec:	687a      	ldr	r2, [r7, #4]
   113ee:	440a      	add	r2, r1
   113f0:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    if(SDO->timeoutTimer >= SDOtimeoutTime){
   113f2:	68fb      	ldr	r3, [r7, #12]
   113f4:	681b      	ldr	r3, [r3, #0]
   113f6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   113f8:	683b      	ldr	r3, [r7, #0]
   113fa:	429a      	cmp	r2, r3
   113fc:	d329      	bcc.n	11452 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2e6>
        if((SDO->state == CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK) && (SDO->sequence != 0) && (!SDO->CANtxBuff->bufferFull)){
   113fe:	68fb      	ldr	r3, [r7, #12]
   11400:	681b      	ldr	r3, [r3, #0]
   11402:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   11406:	2b15      	cmp	r3, #21
   11408:	d10f      	bne.n	1142a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2be>
   1140a:	68fb      	ldr	r3, [r7, #12]
   1140c:	681b      	ldr	r3, [r3, #0]
   1140e:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   11412:	2b00      	cmp	r3, #0
   11414:	d009      	beq.n	1142a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2be>
   11416:	68fb      	ldr	r3, [r7, #12]
   11418:	681b      	ldr	r3, [r3, #0]
   1141a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   1141e:	7b5b      	ldrb	r3, [r3, #13]
   11420:	b2db      	uxtb	r3, r3
   11422:	2b00      	cmp	r3, #0
   11424:	d101      	bne.n	1142a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2be>
   11426:	2301      	movs	r3, #1
   11428:	e000      	b.n	1142c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>
   1142a:	2300      	movs	r3, #0
   1142c:	2b00      	cmp	r3, #0
   1142e:	d006      	beq.n	1143e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2d2>
            timeoutSubblockDownolad = true;
   11430:	2301      	movs	r3, #1
   11432:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
            state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
   11436:	2316      	movs	r3, #22
   11438:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   1143c:	e009      	b.n	11452 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2e6>
        }
        else{
            CO_SDO_abort(SDO, CO_SDO_AB_TIMEOUT); /* SDO protocol timed out */
   1143e:	68fb      	ldr	r3, [r7, #12]
   11440:	681b      	ldr	r3, [r3, #0]
   11442:	4943      	ldr	r1, [pc, #268]	; (11550 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3e4>)
   11444:	4618      	mov	r0, r3
   11446:	4b3e      	ldr	r3, [pc, #248]	; (11540 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3d4>)
   11448:	4798      	blx	r3
            return -1;
   1144a:	f04f 33ff 	mov.w	r3, #4294967295
   1144e:	f001 b823 	b.w	12498 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
        }
    }

    /* return immediately if still idle */
    if(state == CO_SDO_ST_IDLE){
   11452:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   11456:	2b00      	cmp	r3, #0
   11458:	d102      	bne.n	11460 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2f4>
        return 0;
   1145a:	2300      	movs	r3, #0
   1145c:	f001 b81c 	b.w	12498 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
    }

    /* state machine (buffer is freed (SDO->CANrxNew = 0;) at the end) */
    switch(state){
   11460:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   11464:	3b11      	subs	r3, #17
   11466:	2b16      	cmp	r3, #22
   11468:	f200 87f0 	bhi.w	1244c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12e0>
   1146c:	a201      	add	r2, pc, #4	; (adr r2, 11474 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x308>)
   1146e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   11472:	bf00      	nop
   11474:	000114d1 	.word	0x000114d1
   11478:	0001164b 	.word	0x0001164b
   1147c:	0001244d 	.word	0x0001244d
   11480:	000117eb 	.word	0x000117eb
   11484:	0001245f 	.word	0x0001245f
   11488:	0001191d 	.word	0x0001191d
   1148c:	00011a7d 	.word	0x00011a7d
   11490:	0001244d 	.word	0x0001244d
   11494:	0001244d 	.word	0x0001244d
   11498:	0001244d 	.word	0x0001244d
   1149c:	0001244d 	.word	0x0001244d
   114a0:	0001244d 	.word	0x0001244d
   114a4:	0001244d 	.word	0x0001244d
   114a8:	0001244d 	.word	0x0001244d
   114ac:	0001244d 	.word	0x0001244d
   114b0:	0001244d 	.word	0x0001244d
   114b4:	00011b99 	.word	0x00011b99
   114b8:	00011ca5 	.word	0x00011ca5
   114bc:	0001244d 	.word	0x0001244d
   114c0:	00011edd 	.word	0x00011edd
   114c4:	00012029 	.word	0x00012029
   114c8:	00012079 	.word	0x00012079
   114cc:	00012421 	.word	0x00012421
        uint32_t len, i;
        bool_t lastSegmentInSubblock;

        case CO_SDO_ST_DOWNLOAD_INITIATE:{
            /* default response */
            SDO->CANtxBuff->data[0] = 0x60;
   114d0:	68fb      	ldr	r3, [r7, #12]
   114d2:	681b      	ldr	r3, [r3, #0]
   114d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   114d8:	2260      	movs	r2, #96	; 0x60
   114da:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = SDO->CANrxData[1];
   114dc:	68fb      	ldr	r3, [r7, #12]
   114de:	681b      	ldr	r3, [r3, #0]
   114e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   114e4:	68fa      	ldr	r2, [r7, #12]
   114e6:	6812      	ldr	r2, [r2, #0]
   114e8:	7852      	ldrb	r2, [r2, #1]
   114ea:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = SDO->CANrxData[2];
   114ec:	68fb      	ldr	r3, [r7, #12]
   114ee:	681b      	ldr	r3, [r3, #0]
   114f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   114f4:	68fa      	ldr	r2, [r7, #12]
   114f6:	6812      	ldr	r2, [r2, #0]
   114f8:	7892      	ldrb	r2, [r2, #2]
   114fa:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->CANrxData[3];
   114fc:	68fb      	ldr	r3, [r7, #12]
   114fe:	681b      	ldr	r3, [r3, #0]
   11500:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11504:	68fa      	ldr	r2, [r7, #12]
   11506:	6812      	ldr	r2, [r2, #0]
   11508:	78d2      	ldrb	r2, [r2, #3]
   1150a:	721a      	strb	r2, [r3, #8]

            /* Expedited transfer */
            if((SDO->CANrxData[0] & 0x02U) != 0U){
   1150c:	68fb      	ldr	r3, [r7, #12]
   1150e:	681b      	ldr	r3, [r3, #0]
   11510:	781b      	ldrb	r3, [r3, #0]
   11512:	f003 0302 	and.w	r3, r3, #2
   11516:	2b00      	cmp	r3, #0
   11518:	d05b      	beq.n	115d2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x466>
                /* is size indicated? Get message length */
                if((SDO->CANrxData[0] & 0x01U) != 0U){
   1151a:	68fb      	ldr	r3, [r7, #12]
   1151c:	681b      	ldr	r3, [r3, #0]
   1151e:	781b      	ldrb	r3, [r3, #0]
   11520:	f003 0301 	and.w	r3, r3, #1
   11524:	2b00      	cmp	r3, #0
   11526:	d015      	beq.n	11554 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3e8>
                    len = 4U - ((SDO->CANrxData[0] >> 2U) & 0x03U);
   11528:	68fb      	ldr	r3, [r7, #12]
   1152a:	681b      	ldr	r3, [r3, #0]
   1152c:	781b      	ldrb	r3, [r3, #0]
   1152e:	109b      	asrs	r3, r3, #2
   11530:	f003 0303 	and.w	r3, r3, #3
   11534:	f1c3 0304 	rsb	r3, r3, #4
   11538:	643b      	str	r3, [r7, #64]	; 0x40
   1153a:	e00f      	b.n	1155c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3f0>
   1153c:	05040001 	.word	0x05040001
   11540:	000110e1 	.word	0x000110e1
   11544:	00010cfd 	.word	0x00010cfd
   11548:	06010002 	.word	0x06010002
   1154c:	00010e8d 	.word	0x00010e8d
   11550:	05040000 	.word	0x05040000
                }
                else{
                    len = SDO->ODF_arg.dataLength;
   11554:	68fb      	ldr	r3, [r7, #12]
   11556:	681b      	ldr	r3, [r3, #0]
   11558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1155a:	643b      	str	r3, [r7, #64]	; 0x40
                }

                /* copy data to SDO buffer */
                SDO->ODF_arg.data[0] = SDO->CANrxData[4];
   1155c:	68fb      	ldr	r3, [r7, #12]
   1155e:	681b      	ldr	r3, [r3, #0]
   11560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   11562:	68fa      	ldr	r2, [r7, #12]
   11564:	6812      	ldr	r2, [r2, #0]
   11566:	7912      	ldrb	r2, [r2, #4]
   11568:	701a      	strb	r2, [r3, #0]
                SDO->ODF_arg.data[1] = SDO->CANrxData[5];
   1156a:	68fb      	ldr	r3, [r7, #12]
   1156c:	681b      	ldr	r3, [r3, #0]
   1156e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   11570:	3301      	adds	r3, #1
   11572:	68fa      	ldr	r2, [r7, #12]
   11574:	6812      	ldr	r2, [r2, #0]
   11576:	7952      	ldrb	r2, [r2, #5]
   11578:	701a      	strb	r2, [r3, #0]
                SDO->ODF_arg.data[2] = SDO->CANrxData[6];
   1157a:	68fb      	ldr	r3, [r7, #12]
   1157c:	681b      	ldr	r3, [r3, #0]
   1157e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   11580:	3302      	adds	r3, #2
   11582:	68fa      	ldr	r2, [r7, #12]
   11584:	6812      	ldr	r2, [r2, #0]
   11586:	7992      	ldrb	r2, [r2, #6]
   11588:	701a      	strb	r2, [r3, #0]
                SDO->ODF_arg.data[3] = SDO->CANrxData[7];
   1158a:	68fb      	ldr	r3, [r7, #12]
   1158c:	681b      	ldr	r3, [r3, #0]
   1158e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   11590:	3303      	adds	r3, #3
   11592:	68fa      	ldr	r2, [r7, #12]
   11594:	6812      	ldr	r2, [r2, #0]
   11596:	79d2      	ldrb	r2, [r2, #7]
   11598:	701a      	strb	r2, [r3, #0]

                /* write data to the Object dictionary */
                abortCode = CO_SDO_writeOD( len);
   1159a:	6c39      	ldr	r1, [r7, #64]	; 0x40
   1159c:	68f8      	ldr	r0, [r7, #12]
   1159e:	4b9b      	ldr	r3, [pc, #620]	; (1180c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a0>)
   115a0:	4798      	blx	r3
   115a2:	62b8      	str	r0, [r7, #40]	; 0x28
                if(abortCode != 0U){
   115a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   115a6:	2b00      	cmp	r3, #0
   115a8:	d009      	beq.n	115be <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x452>
                    CO_SDO_abort(SDO, abortCode);
   115aa:	68fb      	ldr	r3, [r7, #12]
   115ac:	681b      	ldr	r3, [r3, #0]
   115ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   115b0:	4618      	mov	r0, r3
   115b2:	4b97      	ldr	r3, [pc, #604]	; (11810 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a4>)
   115b4:	4798      	blx	r3
                    return -1;
   115b6:	f04f 33ff 	mov.w	r3, #4294967295
   115ba:	f000 bf6d 	b.w	12498 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                }

                /* finish the communication */
                SDO->state = CO_SDO_ST_IDLE;
   115be:	68fb      	ldr	r3, [r7, #12]
   115c0:	681b      	ldr	r3, [r3, #0]
   115c2:	2200      	movs	r2, #0
   115c4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                sendResponse = true;
   115c8:	2301      	movs	r3, #1
   115ca:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                SDO->bufferOffset = 0;
                SDO->sequence = 0;
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENTED;
                sendResponse = true;
            }
            break;
   115ce:	f000 bf47 	b.w	12460 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
                if((SDO->CANrxData[0]&0x01) != 0){
   115d2:	68fb      	ldr	r3, [r7, #12]
   115d4:	681b      	ldr	r3, [r3, #0]
   115d6:	781b      	ldrb	r3, [r3, #0]
   115d8:	f003 0301 	and.w	r3, r3, #1
   115dc:	2b00      	cmp	r3, #0
   115de:	d021      	beq.n	11624 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x4b8>
                    CO_memcpySwap4(&lenRx, &SDO->CANrxData[4]);
   115e0:	68fb      	ldr	r3, [r7, #12]
   115e2:	681b      	ldr	r3, [r3, #0]
   115e4:	1d1a      	adds	r2, r3, #4
   115e6:	f107 0320 	add.w	r3, r7, #32
   115ea:	4619      	mov	r1, r3
   115ec:	68f8      	ldr	r0, [r7, #12]
   115ee:	4b89      	ldr	r3, [pc, #548]	; (11814 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a8>)
   115f0:	4798      	blx	r3
                    SDO->ODF_arg.dataLengthTotal = lenRx;
   115f2:	68fb      	ldr	r3, [r7, #12]
   115f4:	681b      	ldr	r3, [r3, #0]
   115f6:	6a3a      	ldr	r2, [r7, #32]
   115f8:	661a      	str	r2, [r3, #96]	; 0x60
                    if((lenRx != SDO->ODF_arg.dataLength) && (SDO->ODF_arg.ODdataStorage != 0)){
   115fa:	68fb      	ldr	r3, [r7, #12]
   115fc:	681b      	ldr	r3, [r3, #0]
   115fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   11600:	6a3b      	ldr	r3, [r7, #32]
   11602:	429a      	cmp	r2, r3
   11604:	d00e      	beq.n	11624 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x4b8>
   11606:	68fb      	ldr	r3, [r7, #12]
   11608:	681b      	ldr	r3, [r3, #0]
   1160a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1160c:	2b00      	cmp	r3, #0
   1160e:	d009      	beq.n	11624 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x4b8>
                        CO_SDO_abort(SDO, CO_SDO_AB_TYPE_MISMATCH);  /* Length of service parameter does not match */
   11610:	68fb      	ldr	r3, [r7, #12]
   11612:	681b      	ldr	r3, [r3, #0]
   11614:	4980      	ldr	r1, [pc, #512]	; (11818 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6ac>)
   11616:	4618      	mov	r0, r3
   11618:	4b7d      	ldr	r3, [pc, #500]	; (11810 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a4>)
   1161a:	4798      	blx	r3
                        return -1;
   1161c:	f04f 33ff 	mov.w	r3, #4294967295
   11620:	f000 bf3a 	b.w	12498 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                SDO->bufferOffset = 0;
   11624:	68fb      	ldr	r3, [r7, #12]
   11626:	681b      	ldr	r3, [r3, #0]
   11628:	2200      	movs	r2, #0
   1162a:	639a      	str	r2, [r3, #56]	; 0x38
                SDO->sequence = 0;
   1162c:	68fb      	ldr	r3, [r7, #12]
   1162e:	681b      	ldr	r3, [r3, #0]
   11630:	2200      	movs	r2, #0
   11632:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENTED;
   11636:	68fb      	ldr	r3, [r7, #12]
   11638:	681b      	ldr	r3, [r3, #0]
   1163a:	2212      	movs	r2, #18
   1163c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                sendResponse = true;
   11640:	2301      	movs	r3, #1
   11642:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
   11646:	f000 bf0b 	b.w	12460 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
        }

        case CO_SDO_ST_DOWNLOAD_SEGMENTED:{
            /* verify client command specifier */
            if((SDO->CANrxData[0]&0xE0) != 0x00U){
   1164a:	68fb      	ldr	r3, [r7, #12]
   1164c:	681b      	ldr	r3, [r3, #0]
   1164e:	781b      	ldrb	r3, [r3, #0]
   11650:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
   11654:	2b00      	cmp	r3, #0
   11656:	d009      	beq.n	1166c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x500>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
   11658:	68fb      	ldr	r3, [r7, #12]
   1165a:	681b      	ldr	r3, [r3, #0]
   1165c:	496f      	ldr	r1, [pc, #444]	; (1181c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6b0>)
   1165e:	4618      	mov	r0, r3
   11660:	4b6b      	ldr	r3, [pc, #428]	; (11810 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a4>)
   11662:	4798      	blx	r3
                return -1;
   11664:	f04f 33ff 	mov.w	r3, #4294967295
   11668:	f000 bf16 	b.w	12498 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            /* verify toggle bit */
            i = (SDO->CANrxData[0]&0x10U) ? 1U : 0U;
   1166c:	68fb      	ldr	r3, [r7, #12]
   1166e:	681b      	ldr	r3, [r3, #0]
   11670:	781b      	ldrb	r3, [r3, #0]
   11672:	f003 0310 	and.w	r3, r3, #16
   11676:	2b00      	cmp	r3, #0
   11678:	d001      	beq.n	1167e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x512>
   1167a:	2301      	movs	r3, #1
   1167c:	e000      	b.n	11680 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x514>
   1167e:	2300      	movs	r3, #0
   11680:	63fb      	str	r3, [r7, #60]	; 0x3c
            if(i != SDO->sequence){
   11682:	68fb      	ldr	r3, [r7, #12]
   11684:	681b      	ldr	r3, [r3, #0]
   11686:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   1168a:	461a      	mov	r2, r3
   1168c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1168e:	429a      	cmp	r2, r3
   11690:	d009      	beq.n	116a6 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x53a>
                CO_SDO_abort(SDO, CO_SDO_AB_TOGGLE_BIT);/* toggle bit not alternated */
   11692:	68fb      	ldr	r3, [r7, #12]
   11694:	681b      	ldr	r3, [r3, #0]
   11696:	4962      	ldr	r1, [pc, #392]	; (11820 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6b4>)
   11698:	4618      	mov	r0, r3
   1169a:	4b5d      	ldr	r3, [pc, #372]	; (11810 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a4>)
   1169c:	4798      	blx	r3
                return -1;
   1169e:	f04f 33ff 	mov.w	r3, #4294967295
   116a2:	f000 bef9 	b.w	12498 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            /* get size of data in message */
            len = 7U - ((SDO->CANrxData[0] >> 1U) & 0x07U);
   116a6:	68fb      	ldr	r3, [r7, #12]
   116a8:	681b      	ldr	r3, [r3, #0]
   116aa:	781b      	ldrb	r3, [r3, #0]
   116ac:	105b      	asrs	r3, r3, #1
   116ae:	43db      	mvns	r3, r3
   116b0:	f003 0307 	and.w	r3, r3, #7
   116b4:	643b      	str	r3, [r7, #64]	; 0x40

            /* verify length. Domain data type enables length larger than SDO buffer size */
            if((SDO->bufferOffset + len) > SDO->ODF_arg.dataLength){
   116b6:	68fb      	ldr	r3, [r7, #12]
   116b8:	681b      	ldr	r3, [r3, #0]
   116ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   116bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   116be:	441a      	add	r2, r3
   116c0:	68fb      	ldr	r3, [r7, #12]
   116c2:	681b      	ldr	r3, [r3, #0]
   116c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   116c6:	429a      	cmp	r2, r3
   116c8:	d930      	bls.n	1172c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x5c0>
                if(SDO->ODF_arg.ODdataStorage != 0){
   116ca:	68fb      	ldr	r3, [r7, #12]
   116cc:	681b      	ldr	r3, [r3, #0]
   116ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   116d0:	2b00      	cmp	r3, #0
   116d2:	d009      	beq.n	116e8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>
                    CO_SDO_abort(SDO, CO_SDO_AB_DATA_LONG);  /* Length of service parameter too high */
   116d4:	68fb      	ldr	r3, [r7, #12]
   116d6:	681b      	ldr	r3, [r3, #0]
   116d8:	4952      	ldr	r1, [pc, #328]	; (11824 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6b8>)
   116da:	4618      	mov	r0, r3
   116dc:	4b4c      	ldr	r3, [pc, #304]	; (11810 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a4>)
   116de:	4798      	blx	r3
                    return -1;
   116e0:	f04f 33ff 	mov.w	r3, #4294967295
   116e4:	f000 bed8 	b.w	12498 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                }
                else{
                    /* empty buffer in domain data type */
                    SDO->ODF_arg.lastSegment = false;
   116e8:	68fb      	ldr	r3, [r7, #12]
   116ea:	681b      	ldr	r3, [r3, #0]
   116ec:	2200      	movs	r2, #0
   116ee:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
                    abortCode = CO_SDO_writeOD( SDO->bufferOffset);
   116f2:	68fb      	ldr	r3, [r7, #12]
   116f4:	681b      	ldr	r3, [r3, #0]
   116f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   116f8:	4619      	mov	r1, r3
   116fa:	68f8      	ldr	r0, [r7, #12]
   116fc:	4b43      	ldr	r3, [pc, #268]	; (1180c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a0>)
   116fe:	4798      	blx	r3
   11700:	62b8      	str	r0, [r7, #40]	; 0x28
                    if(abortCode != 0U){
   11702:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11704:	2b00      	cmp	r3, #0
   11706:	d009      	beq.n	1171c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x5b0>
                        CO_SDO_abort(SDO, abortCode);
   11708:	68fb      	ldr	r3, [r7, #12]
   1170a:	681b      	ldr	r3, [r3, #0]
   1170c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1170e:	4618      	mov	r0, r3
   11710:	4b3f      	ldr	r3, [pc, #252]	; (11810 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a4>)
   11712:	4798      	blx	r3
                        return -1;
   11714:	f04f 33ff 	mov.w	r3, #4294967295
   11718:	f000 bebe 	b.w	12498 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                    }

                    SDO->ODF_arg.dataLength = CO_SDO_BUFFER_SIZE;
   1171c:	68fb      	ldr	r3, [r7, #12]
   1171e:	681b      	ldr	r3, [r3, #0]
   11720:	2220      	movs	r2, #32
   11722:	64da      	str	r2, [r3, #76]	; 0x4c
                    SDO->bufferOffset = 0;
   11724:	68fb      	ldr	r3, [r7, #12]
   11726:	681b      	ldr	r3, [r3, #0]
   11728:	2200      	movs	r2, #0
   1172a:	639a      	str	r2, [r3, #56]	; 0x38
                }
            }

            /* copy data to buffer */
            for(i=0U; i<len; i++)
   1172c:	2300      	movs	r3, #0
   1172e:	63fb      	str	r3, [r7, #60]	; 0x3c
   11730:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   11732:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11734:	429a      	cmp	r2, r3
   11736:	d212      	bcs.n	1175e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x5f2>
                SDO->ODF_arg.data[SDO->bufferOffset++] = SDO->CANrxData[i+1];
   11738:	68fb      	ldr	r3, [r7, #12]
   1173a:	681b      	ldr	r3, [r3, #0]
   1173c:	6c59      	ldr	r1, [r3, #68]	; 0x44
   1173e:	68fb      	ldr	r3, [r7, #12]
   11740:	681a      	ldr	r2, [r3, #0]
   11742:	6b93      	ldr	r3, [r2, #56]	; 0x38
   11744:	1c58      	adds	r0, r3, #1
   11746:	6390      	str	r0, [r2, #56]	; 0x38
   11748:	440b      	add	r3, r1
   1174a:	68fa      	ldr	r2, [r7, #12]
   1174c:	6811      	ldr	r1, [r2, #0]
   1174e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   11750:	3201      	adds	r2, #1
   11752:	5c8a      	ldrb	r2, [r1, r2]
   11754:	701a      	strb	r2, [r3, #0]
            for(i=0U; i<len; i++)
   11756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11758:	3301      	adds	r3, #1
   1175a:	63fb      	str	r3, [r7, #60]	; 0x3c
   1175c:	e7e8      	b.n	11730 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x5c4>

            /* If no more segments to be downloaded, write data to the Object dictionary */
            if((SDO->CANrxData[0] & 0x01U) != 0U){
   1175e:	68fb      	ldr	r3, [r7, #12]
   11760:	681b      	ldr	r3, [r3, #0]
   11762:	781b      	ldrb	r3, [r3, #0]
   11764:	f003 0301 	and.w	r3, r3, #1
   11768:	2b00      	cmp	r3, #0
   1176a:	d01e      	beq.n	117aa <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x63e>
                SDO->ODF_arg.lastSegment = true;
   1176c:	68fb      	ldr	r3, [r7, #12]
   1176e:	681b      	ldr	r3, [r3, #0]
   11770:	2201      	movs	r2, #1
   11772:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
                abortCode = CO_SDO_writeOD( SDO->bufferOffset);
   11776:	68fb      	ldr	r3, [r7, #12]
   11778:	681b      	ldr	r3, [r3, #0]
   1177a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1177c:	4619      	mov	r1, r3
   1177e:	68f8      	ldr	r0, [r7, #12]
   11780:	4b22      	ldr	r3, [pc, #136]	; (1180c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a0>)
   11782:	4798      	blx	r3
   11784:	62b8      	str	r0, [r7, #40]	; 0x28
                if(abortCode != 0U){
   11786:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11788:	2b00      	cmp	r3, #0
   1178a:	d009      	beq.n	117a0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x634>
                    CO_SDO_abort(SDO, abortCode);
   1178c:	68fb      	ldr	r3, [r7, #12]
   1178e:	681b      	ldr	r3, [r3, #0]
   11790:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   11792:	4618      	mov	r0, r3
   11794:	4b1e      	ldr	r3, [pc, #120]	; (11810 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a4>)
   11796:	4798      	blx	r3
                    return -1;
   11798:	f04f 33ff 	mov.w	r3, #4294967295
   1179c:	f000 be7c 	b.w	12498 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                }

                /* finish */
                SDO->state = CO_SDO_ST_IDLE;
   117a0:	68fb      	ldr	r3, [r7, #12]
   117a2:	681b      	ldr	r3, [r3, #0]
   117a4:	2200      	movs	r2, #0
   117a6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            }

            /* download segment response and alternate toggle bit */
            SDO->CANtxBuff->data[0] = 0x20 | (SDO->sequence ? 0x10 : 0x00);
   117aa:	68fb      	ldr	r3, [r7, #12]
   117ac:	681b      	ldr	r3, [r3, #0]
   117ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   117b2:	68fa      	ldr	r2, [r7, #12]
   117b4:	6812      	ldr	r2, [r2, #0]
   117b6:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
   117ba:	2a00      	cmp	r2, #0
   117bc:	d001      	beq.n	117c2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x656>
   117be:	2230      	movs	r2, #48	; 0x30
   117c0:	e000      	b.n	117c4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x658>
   117c2:	2220      	movs	r2, #32
   117c4:	715a      	strb	r2, [r3, #5]
            SDO->sequence = (SDO->sequence) ? 0 : 1;
   117c6:	68fb      	ldr	r3, [r7, #12]
   117c8:	681b      	ldr	r3, [r3, #0]
   117ca:	68fa      	ldr	r2, [r7, #12]
   117cc:	6812      	ldr	r2, [r2, #0]
   117ce:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
   117d2:	2a00      	cmp	r2, #0
   117d4:	bf0c      	ite	eq
   117d6:	2201      	moveq	r2, #1
   117d8:	2200      	movne	r2, #0
   117da:	b2d2      	uxtb	r2, r2
   117dc:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
            sendResponse = true;
   117e0:	2301      	movs	r3, #1
   117e2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
   117e6:	f000 be3b 	b.w	12460 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
        }

        case CO_SDO_ST_DOWNLOAD_BL_INITIATE:{
            /* verify client command specifier and subcommand */
            if((SDO->CANrxData[0]&0xE1U) != 0xC0U){
   117ea:	68fb      	ldr	r3, [r7, #12]
   117ec:	681b      	ldr	r3, [r3, #0]
   117ee:	781b      	ldrb	r3, [r3, #0]
   117f0:	f003 03e1 	and.w	r3, r3, #225	; 0xe1
   117f4:	2bc0      	cmp	r3, #192	; 0xc0
   117f6:	d017      	beq.n	11828 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6bc>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
   117f8:	68fb      	ldr	r3, [r7, #12]
   117fa:	681b      	ldr	r3, [r3, #0]
   117fc:	4907      	ldr	r1, [pc, #28]	; (1181c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6b0>)
   117fe:	4618      	mov	r0, r3
   11800:	4b03      	ldr	r3, [pc, #12]	; (11810 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a4>)
   11802:	4798      	blx	r3
                return -1;
   11804:	f04f 33ff 	mov.w	r3, #4294967295
   11808:	f000 be46 	b.w	12498 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
   1180c:	00010fad 	.word	0x00010fad
   11810:	000110e1 	.word	0x000110e1
   11814:	000105bd 	.word	0x000105bd
   11818:	06070010 	.word	0x06070010
   1181c:	05040001 	.word	0x05040001
   11820:	05030000 	.word	0x05030000
   11824:	06070012 	.word	0x06070012
            }

            /* prepare response */
            SDO->CANtxBuff->data[0] = 0xA4;
   11828:	68fb      	ldr	r3, [r7, #12]
   1182a:	681b      	ldr	r3, [r3, #0]
   1182c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11830:	22a4      	movs	r2, #164	; 0xa4
   11832:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = SDO->CANrxData[1];
   11834:	68fb      	ldr	r3, [r7, #12]
   11836:	681b      	ldr	r3, [r3, #0]
   11838:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   1183c:	68fa      	ldr	r2, [r7, #12]
   1183e:	6812      	ldr	r2, [r2, #0]
   11840:	7852      	ldrb	r2, [r2, #1]
   11842:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = SDO->CANrxData[2];
   11844:	68fb      	ldr	r3, [r7, #12]
   11846:	681b      	ldr	r3, [r3, #0]
   11848:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   1184c:	68fa      	ldr	r2, [r7, #12]
   1184e:	6812      	ldr	r2, [r2, #0]
   11850:	7892      	ldrb	r2, [r2, #2]
   11852:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->CANrxData[3];
   11854:	68fb      	ldr	r3, [r7, #12]
   11856:	681b      	ldr	r3, [r3, #0]
   11858:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   1185c:	68fa      	ldr	r2, [r7, #12]
   1185e:	6812      	ldr	r2, [r2, #0]
   11860:	78d2      	ldrb	r2, [r2, #3]
   11862:	721a      	strb	r2, [r3, #8]

            /* blksize */
            SDO->blksize = (CO_SDO_BUFFER_SIZE > (7*127)) ? 127 : (CO_SDO_BUFFER_SIZE / 7);
   11864:	68fb      	ldr	r3, [r7, #12]
   11866:	681b      	ldr	r3, [r3, #0]
   11868:	2204      	movs	r2, #4
   1186a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
            SDO->CANtxBuff->data[4] = SDO->blksize;
   1186e:	68fb      	ldr	r3, [r7, #12]
   11870:	681b      	ldr	r3, [r3, #0]
   11872:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11876:	68fa      	ldr	r2, [r7, #12]
   11878:	6812      	ldr	r2, [r2, #0]
   1187a:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
   1187e:	725a      	strb	r2, [r3, #9]

            /* is CRC enabled */
            SDO->crcEnabled = (SDO->CANrxData[0] & 0x04) ? true : false;
   11880:	68fb      	ldr	r3, [r7, #12]
   11882:	681b      	ldr	r3, [r3, #0]
   11884:	68fa      	ldr	r2, [r7, #12]
   11886:	6812      	ldr	r2, [r2, #0]
   11888:	7812      	ldrb	r2, [r2, #0]
   1188a:	f002 0204 	and.w	r2, r2, #4
   1188e:	2a00      	cmp	r2, #0
   11890:	bf14      	ite	ne
   11892:	2201      	movne	r2, #1
   11894:	2200      	moveq	r2, #0
   11896:	b2d2      	uxtb	r2, r2
   11898:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
            SDO->crc = 0;
   1189c:	68fb      	ldr	r3, [r7, #12]
   1189e:	681b      	ldr	r3, [r3, #0]
   118a0:	2200      	movs	r2, #0
   118a2:	675a      	str	r2, [r3, #116]	; 0x74

            /* verify length if size is indicated */
            if((SDO->CANrxData[0]&0x02) != 0U){
   118a4:	68fb      	ldr	r3, [r7, #12]
   118a6:	681b      	ldr	r3, [r3, #0]
   118a8:	781b      	ldrb	r3, [r3, #0]
   118aa:	f003 0302 	and.w	r3, r3, #2
   118ae:	2b00      	cmp	r3, #0
   118b0:	d021      	beq.n	118f6 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x78a>
                uint32_t lenRx;
                CO_memcpySwap4(&lenRx, &SDO->CANrxData[4]);
   118b2:	68fb      	ldr	r3, [r7, #12]
   118b4:	681b      	ldr	r3, [r3, #0]
   118b6:	1d1a      	adds	r2, r3, #4
   118b8:	f107 031c 	add.w	r3, r7, #28
   118bc:	4619      	mov	r1, r3
   118be:	68f8      	ldr	r0, [r7, #12]
   118c0:	4b96      	ldr	r3, [pc, #600]	; (11b1c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9b0>)
   118c2:	4798      	blx	r3
                SDO->ODF_arg.dataLengthTotal = lenRx;
   118c4:	68fb      	ldr	r3, [r7, #12]
   118c6:	681b      	ldr	r3, [r3, #0]
   118c8:	69fa      	ldr	r2, [r7, #28]
   118ca:	661a      	str	r2, [r3, #96]	; 0x60

                /* verify length except for domain data type */
                if((lenRx != SDO->ODF_arg.dataLength) && (SDO->ODF_arg.ODdataStorage != 0)){
   118cc:	68fb      	ldr	r3, [r7, #12]
   118ce:	681b      	ldr	r3, [r3, #0]
   118d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   118d2:	69fb      	ldr	r3, [r7, #28]
   118d4:	429a      	cmp	r2, r3
   118d6:	d00e      	beq.n	118f6 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x78a>
   118d8:	68fb      	ldr	r3, [r7, #12]
   118da:	681b      	ldr	r3, [r3, #0]
   118dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   118de:	2b00      	cmp	r3, #0
   118e0:	d009      	beq.n	118f6 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x78a>
                    CO_SDO_abort(SDO, CO_SDO_AB_TYPE_MISMATCH);  /* Length of service parameter does not match */
   118e2:	68fb      	ldr	r3, [r7, #12]
   118e4:	681b      	ldr	r3, [r3, #0]
   118e6:	498e      	ldr	r1, [pc, #568]	; (11b20 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9b4>)
   118e8:	4618      	mov	r0, r3
   118ea:	4b8e      	ldr	r3, [pc, #568]	; (11b24 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9b8>)
   118ec:	4798      	blx	r3
                    return -1;
   118ee:	f04f 33ff 	mov.w	r3, #4294967295
   118f2:	f000 bdd1 	b.w	12498 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                }
            }

            SDO->bufferOffset = 0;
   118f6:	68fb      	ldr	r3, [r7, #12]
   118f8:	681b      	ldr	r3, [r3, #0]
   118fa:	2200      	movs	r2, #0
   118fc:	639a      	str	r2, [r3, #56]	; 0x38
            SDO->sequence = 0;
   118fe:	68fb      	ldr	r3, [r7, #12]
   11900:	681b      	ldr	r3, [r3, #0]
   11902:	2200      	movs	r2, #0
   11904:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
            SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK;
   11908:	68fb      	ldr	r3, [r7, #12]
   1190a:	681b      	ldr	r3, [r3, #0]
   1190c:	2215      	movs	r2, #21
   1190e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

            /* send response */
            sendResponse = true;
   11912:	2301      	movs	r3, #1
   11914:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
   11918:	f000 bda2 	b.w	12460 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
        }

        case CO_SDO_ST_DOWNLOAD_BL_SUB_RESP:{
            /* no new message received, SDO timeout occured, try to response */
            lastSegmentInSubblock = (!timeoutSubblockDownolad &&
                        ((SDO->CANrxData[0] & 0x80U) == 0x80U)) ? true : false;
   1191c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   11920:	2b00      	cmp	r3, #0
   11922:	d107      	bne.n	11934 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7c8>
   11924:	68fb      	ldr	r3, [r7, #12]
   11926:	681b      	ldr	r3, [r3, #0]
   11928:	781b      	ldrb	r3, [r3, #0]
   1192a:	b25b      	sxtb	r3, r3
   1192c:	2b00      	cmp	r3, #0
   1192e:	da01      	bge.n	11934 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7c8>
   11930:	2301      	movs	r3, #1
   11932:	e000      	b.n	11936 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7ca>
   11934:	2300      	movs	r3, #0
            lastSegmentInSubblock = (!timeoutSubblockDownolad &&
   11936:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            /* prepare response */
            SDO->CANtxBuff->data[0] = 0xA2;
   1193a:	68fb      	ldr	r3, [r7, #12]
   1193c:	681b      	ldr	r3, [r3, #0]
   1193e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11942:	22a2      	movs	r2, #162	; 0xa2
   11944:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = SDO->sequence;
   11946:	68fb      	ldr	r3, [r7, #12]
   11948:	681b      	ldr	r3, [r3, #0]
   1194a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   1194e:	68fa      	ldr	r2, [r7, #12]
   11950:	6812      	ldr	r2, [r2, #0]
   11952:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
   11956:	719a      	strb	r2, [r3, #6]
            SDO->sequence = 0;
   11958:	68fb      	ldr	r3, [r7, #12]
   1195a:	681b      	ldr	r3, [r3, #0]
   1195c:	2200      	movs	r2, #0
   1195e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

            /* empty buffer in domain data type if not last segment */
            if((SDO->ODF_arg.ODdataStorage == 0) && (SDO->bufferOffset != 0) && !lastSegmentInSubblock){
   11962:	68fb      	ldr	r3, [r7, #12]
   11964:	681b      	ldr	r3, [r3, #0]
   11966:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   11968:	2b00      	cmp	r3, #0
   1196a:	d141      	bne.n	119f0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x884>
   1196c:	68fb      	ldr	r3, [r7, #12]
   1196e:	681b      	ldr	r3, [r3, #0]
   11970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   11972:	2b00      	cmp	r3, #0
   11974:	d03c      	beq.n	119f0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x884>
   11976:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   1197a:	2b00      	cmp	r3, #0
   1197c:	d138      	bne.n	119f0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x884>
                /* calculate CRC on next bytes, if enabled */
                if(SDO->crcEnabled){
   1197e:	68fb      	ldr	r3, [r7, #12]
   11980:	681b      	ldr	r3, [r3, #0]
   11982:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
   11986:	2b00      	cmp	r3, #0
   11988:	d010      	beq.n	119ac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x840>
                    SDO->crc = crc16_ccitt(SDO->ODF_arg.data, SDO->bufferOffset, SDO->crc);
   1198a:	68fb      	ldr	r3, [r7, #12]
   1198c:	681c      	ldr	r4, [r3, #0]
   1198e:	68fb      	ldr	r3, [r7, #12]
   11990:	681b      	ldr	r3, [r3, #0]
   11992:	6c59      	ldr	r1, [r3, #68]	; 0x44
   11994:	68fb      	ldr	r3, [r7, #12]
   11996:	681b      	ldr	r3, [r3, #0]
   11998:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1199a:	68fb      	ldr	r3, [r7, #12]
   1199c:	681b      	ldr	r3, [r3, #0]
   1199e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   119a0:	b29b      	uxth	r3, r3
   119a2:	68f8      	ldr	r0, [r7, #12]
   119a4:	4d60      	ldr	r5, [pc, #384]	; (11b28 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9bc>)
   119a6:	47a8      	blx	r5
   119a8:	4603      	mov	r3, r0
   119aa:	6763      	str	r3, [r4, #116]	; 0x74
                }

                /* write data to the Object dictionary */
                SDO->ODF_arg.lastSegment = false;
   119ac:	68fb      	ldr	r3, [r7, #12]
   119ae:	681b      	ldr	r3, [r3, #0]
   119b0:	2200      	movs	r2, #0
   119b2:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
                abortCode = CO_SDO_writeOD(SDO->bufferOffset);
   119b6:	68fb      	ldr	r3, [r7, #12]
   119b8:	681b      	ldr	r3, [r3, #0]
   119ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   119bc:	4619      	mov	r1, r3
   119be:	68f8      	ldr	r0, [r7, #12]
   119c0:	4b5a      	ldr	r3, [pc, #360]	; (11b2c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9c0>)
   119c2:	4798      	blx	r3
   119c4:	62b8      	str	r0, [r7, #40]	; 0x28
                if(abortCode != 0U){
   119c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   119c8:	2b00      	cmp	r3, #0
   119ca:	d009      	beq.n	119e0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x874>
                    CO_SDO_abort(SDO, abortCode);
   119cc:	68fb      	ldr	r3, [r7, #12]
   119ce:	681b      	ldr	r3, [r3, #0]
   119d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   119d2:	4618      	mov	r0, r3
   119d4:	4b53      	ldr	r3, [pc, #332]	; (11b24 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9b8>)
   119d6:	4798      	blx	r3
                    return -1;
   119d8:	f04f 33ff 	mov.w	r3, #4294967295
   119dc:	f000 bd5c 	b.w	12498 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                }

                SDO->ODF_arg.dataLength = CO_SDO_BUFFER_SIZE;
   119e0:	68fb      	ldr	r3, [r7, #12]
   119e2:	681b      	ldr	r3, [r3, #0]
   119e4:	2220      	movs	r2, #32
   119e6:	64da      	str	r2, [r3, #76]	; 0x4c
                SDO->bufferOffset = 0;
   119e8:	68fb      	ldr	r3, [r7, #12]
   119ea:	681b      	ldr	r3, [r3, #0]
   119ec:	2200      	movs	r2, #0
   119ee:	639a      	str	r2, [r3, #56]	; 0x38
            }

            /* blksize */
            len = CO_SDO_BUFFER_SIZE - SDO->bufferOffset;
   119f0:	68fb      	ldr	r3, [r7, #12]
   119f2:	681b      	ldr	r3, [r3, #0]
   119f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   119f6:	f1c3 0320 	rsb	r3, r3, #32
   119fa:	643b      	str	r3, [r7, #64]	; 0x40
            SDO->blksize = (len > (7*127)) ? 127 : (len / 7);
   119fc:	68fb      	ldr	r3, [r7, #12]
   119fe:	6819      	ldr	r1, [r3, #0]
   11a00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11a02:	f240 3279 	movw	r2, #889	; 0x379
   11a06:	4293      	cmp	r3, r2
   11a08:	d809      	bhi.n	11a1e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x8b2>
   11a0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   11a0c:	4b48      	ldr	r3, [pc, #288]	; (11b30 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9c4>)
   11a0e:	fba3 0302 	umull	r0, r3, r3, r2
   11a12:	1ad2      	subs	r2, r2, r3
   11a14:	0852      	lsrs	r2, r2, #1
   11a16:	4413      	add	r3, r2
   11a18:	089b      	lsrs	r3, r3, #2
   11a1a:	b2db      	uxtb	r3, r3
   11a1c:	e000      	b.n	11a20 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x8b4>
   11a1e:	237f      	movs	r3, #127	; 0x7f
   11a20:	f881 3070 	strb.w	r3, [r1, #112]	; 0x70
            SDO->CANtxBuff->data[2] = SDO->blksize;
   11a24:	68fb      	ldr	r3, [r7, #12]
   11a26:	681b      	ldr	r3, [r3, #0]
   11a28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11a2c:	68fa      	ldr	r2, [r7, #12]
   11a2e:	6812      	ldr	r2, [r2, #0]
   11a30:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
   11a34:	71da      	strb	r2, [r3, #7]

            /* set next state */
            if(lastSegmentInSubblock) {
   11a36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   11a3a:	2b00      	cmp	r3, #0
   11a3c:	d005      	beq.n	11a4a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x8de>
                SDO->state = CO_SDO_ST_DOWNLOAD_BL_END;
   11a3e:	68fb      	ldr	r3, [r7, #12]
   11a40:	681b      	ldr	r3, [r3, #0]
   11a42:	2217      	movs	r2, #23
   11a44:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
   11a48:	e013      	b.n	11a72 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x906>
            }
            else if(SDO->bufferOffset >= CO_SDO_BUFFER_SIZE) {
   11a4a:	68fb      	ldr	r3, [r7, #12]
   11a4c:	681b      	ldr	r3, [r3, #0]
   11a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   11a50:	2b1f      	cmp	r3, #31
   11a52:	d909      	bls.n	11a68 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x8fc>
                CO_SDO_abort(SDO, CO_SDO_AB_DEVICE_INCOMPAT);
   11a54:	68fb      	ldr	r3, [r7, #12]
   11a56:	681b      	ldr	r3, [r3, #0]
   11a58:	4936      	ldr	r1, [pc, #216]	; (11b34 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9c8>)
   11a5a:	4618      	mov	r0, r3
   11a5c:	4b31      	ldr	r3, [pc, #196]	; (11b24 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9b8>)
   11a5e:	4798      	blx	r3
                return -1;
   11a60:	f04f 33ff 	mov.w	r3, #4294967295
   11a64:	f000 bd18 	b.w	12498 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }
            else {
                SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK;
   11a68:	68fb      	ldr	r3, [r7, #12]
   11a6a:	681b      	ldr	r3, [r3, #0]
   11a6c:	2215      	movs	r2, #21
   11a6e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            }

            /* send response */
            sendResponse = true;
   11a72:	2301      	movs	r3, #1
   11a74:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

            break;
   11a78:	f000 bcf2 	b.w	12460 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
        }

        case CO_SDO_ST_DOWNLOAD_BL_END:{
            /* verify client command specifier and subcommand */
            if((SDO->CANrxData[0]&0xE1U) != 0xC1U){
   11a7c:	68fb      	ldr	r3, [r7, #12]
   11a7e:	681b      	ldr	r3, [r3, #0]
   11a80:	781b      	ldrb	r3, [r3, #0]
   11a82:	f003 03e1 	and.w	r3, r3, #225	; 0xe1
   11a86:	2bc1      	cmp	r3, #193	; 0xc1
   11a88:	d009      	beq.n	11a9e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x932>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
   11a8a:	68fb      	ldr	r3, [r7, #12]
   11a8c:	681b      	ldr	r3, [r3, #0]
   11a8e:	492a      	ldr	r1, [pc, #168]	; (11b38 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9cc>)
   11a90:	4618      	mov	r0, r3
   11a92:	4b24      	ldr	r3, [pc, #144]	; (11b24 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9b8>)
   11a94:	4798      	blx	r3
                return -1;
   11a96:	f04f 33ff 	mov.w	r3, #4294967295
   11a9a:	f000 bcfd 	b.w	12498 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            /* number of bytes in the last segment of the last block that do not contain data. */
            len = (SDO->CANrxData[0]>>2U) & 0x07U;
   11a9e:	68fb      	ldr	r3, [r7, #12]
   11aa0:	681b      	ldr	r3, [r3, #0]
   11aa2:	781b      	ldrb	r3, [r3, #0]
   11aa4:	109b      	asrs	r3, r3, #2
   11aa6:	f003 0307 	and.w	r3, r3, #7
   11aaa:	643b      	str	r3, [r7, #64]	; 0x40
            SDO->bufferOffset -= len;
   11aac:	68fb      	ldr	r3, [r7, #12]
   11aae:	681b      	ldr	r3, [r3, #0]
   11ab0:	68fa      	ldr	r2, [r7, #12]
   11ab2:	6812      	ldr	r2, [r2, #0]
   11ab4:	6b91      	ldr	r1, [r2, #56]	; 0x38
   11ab6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   11ab8:	1a8a      	subs	r2, r1, r2
   11aba:	639a      	str	r2, [r3, #56]	; 0x38

            /* calculate and verify CRC, if enabled */
            if(SDO->crcEnabled){
   11abc:	68fb      	ldr	r3, [r7, #12]
   11abe:	681b      	ldr	r3, [r3, #0]
   11ac0:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
   11ac4:	2b00      	cmp	r3, #0
   11ac6:	d03d      	beq.n	11b44 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9d8>
                uint32_t crc;
                SDO->crc = crc16_ccitt(SDO->ODF_arg.data, SDO->bufferOffset, SDO->crc);
   11ac8:	68fb      	ldr	r3, [r7, #12]
   11aca:	681c      	ldr	r4, [r3, #0]
   11acc:	68fb      	ldr	r3, [r7, #12]
   11ace:	681b      	ldr	r3, [r3, #0]
   11ad0:	6c59      	ldr	r1, [r3, #68]	; 0x44
   11ad2:	68fb      	ldr	r3, [r7, #12]
   11ad4:	681b      	ldr	r3, [r3, #0]
   11ad6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   11ad8:	68fb      	ldr	r3, [r7, #12]
   11ada:	681b      	ldr	r3, [r3, #0]
   11adc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   11ade:	b29b      	uxth	r3, r3
   11ae0:	68f8      	ldr	r0, [r7, #12]
   11ae2:	4d11      	ldr	r5, [pc, #68]	; (11b28 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9bc>)
   11ae4:	47a8      	blx	r5
   11ae6:	4603      	mov	r3, r0
   11ae8:	6763      	str	r3, [r4, #116]	; 0x74

                CO_memcpySwap2(&crc, &SDO->CANrxData[1]);
   11aea:	68fb      	ldr	r3, [r7, #12]
   11aec:	681b      	ldr	r3, [r3, #0]
   11aee:	1c5a      	adds	r2, r3, #1
   11af0:	f107 0318 	add.w	r3, r7, #24
   11af4:	4619      	mov	r1, r3
   11af6:	68f8      	ldr	r0, [r7, #12]
   11af8:	4b10      	ldr	r3, [pc, #64]	; (11b3c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9d0>)
   11afa:	4798      	blx	r3

                if(SDO->crc != crc){
   11afc:	68fb      	ldr	r3, [r7, #12]
   11afe:	681b      	ldr	r3, [r3, #0]
   11b00:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   11b02:	69bb      	ldr	r3, [r7, #24]
   11b04:	429a      	cmp	r2, r3
   11b06:	d01d      	beq.n	11b44 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9d8>
                    CO_SDO_abort(SDO, CO_SDO_AB_CRC);   /* CRC error (block mode only). */
   11b08:	68fb      	ldr	r3, [r7, #12]
   11b0a:	681b      	ldr	r3, [r3, #0]
   11b0c:	490c      	ldr	r1, [pc, #48]	; (11b40 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9d4>)
   11b0e:	4618      	mov	r0, r3
   11b10:	4b04      	ldr	r3, [pc, #16]	; (11b24 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9b8>)
   11b12:	4798      	blx	r3
                    return -1;
   11b14:	f04f 33ff 	mov.w	r3, #4294967295
   11b18:	f000 bcbe 	b.w	12498 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
   11b1c:	000105bd 	.word	0x000105bd
   11b20:	06070010 	.word	0x06070010
   11b24:	000110e1 	.word	0x000110e1
   11b28:	00012ae5 	.word	0x00012ae5
   11b2c:	00010fad 	.word	0x00010fad
   11b30:	24924925 	.word	0x24924925
   11b34:	06040047 	.word	0x06040047
   11b38:	05040001 	.word	0x05040001
   11b3c:	0001058d 	.word	0x0001058d
   11b40:	05040004 	.word	0x05040004
                }
            }

            /* write data to the Object dictionary */
            SDO->ODF_arg.lastSegment = true;
   11b44:	68fb      	ldr	r3, [r7, #12]
   11b46:	681b      	ldr	r3, [r3, #0]
   11b48:	2201      	movs	r2, #1
   11b4a:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
            abortCode = CO_SDO_writeOD( SDO->bufferOffset);
   11b4e:	68fb      	ldr	r3, [r7, #12]
   11b50:	681b      	ldr	r3, [r3, #0]
   11b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   11b54:	4619      	mov	r1, r3
   11b56:	68f8      	ldr	r0, [r7, #12]
   11b58:	4b98      	ldr	r3, [pc, #608]	; (11dbc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc50>)
   11b5a:	4798      	blx	r3
   11b5c:	62b8      	str	r0, [r7, #40]	; 0x28
            if(abortCode != 0U){
   11b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11b60:	2b00      	cmp	r3, #0
   11b62:	d009      	beq.n	11b78 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa0c>
                CO_SDO_abort(SDO, abortCode);
   11b64:	68fb      	ldr	r3, [r7, #12]
   11b66:	681b      	ldr	r3, [r3, #0]
   11b68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   11b6a:	4618      	mov	r0, r3
   11b6c:	4b94      	ldr	r3, [pc, #592]	; (11dc0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc54>)
   11b6e:	4798      	blx	r3
                return -1;
   11b70:	f04f 33ff 	mov.w	r3, #4294967295
   11b74:	f000 bc90 	b.w	12498 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            /* send response */
            SDO->CANtxBuff->data[0] = 0xA1;
   11b78:	68fb      	ldr	r3, [r7, #12]
   11b7a:	681b      	ldr	r3, [r3, #0]
   11b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11b80:	22a1      	movs	r2, #161	; 0xa1
   11b82:	715a      	strb	r2, [r3, #5]
            SDO->state = CO_SDO_ST_IDLE;
   11b84:	68fb      	ldr	r3, [r7, #12]
   11b86:	681b      	ldr	r3, [r3, #0]
   11b88:	2200      	movs	r2, #0
   11b8a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            sendResponse = true;
   11b8e:	2301      	movs	r3, #1
   11b90:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
   11b94:	f000 bc64 	b.w	12460 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
        }

        case CO_SDO_ST_UPLOAD_INITIATE:{
            /* default response */
            SDO->CANtxBuff->data[1] = SDO->CANrxData[1];
   11b98:	68fb      	ldr	r3, [r7, #12]
   11b9a:	681b      	ldr	r3, [r3, #0]
   11b9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11ba0:	68fa      	ldr	r2, [r7, #12]
   11ba2:	6812      	ldr	r2, [r2, #0]
   11ba4:	7852      	ldrb	r2, [r2, #1]
   11ba6:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = SDO->CANrxData[2];
   11ba8:	68fb      	ldr	r3, [r7, #12]
   11baa:	681b      	ldr	r3, [r3, #0]
   11bac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11bb0:	68fa      	ldr	r2, [r7, #12]
   11bb2:	6812      	ldr	r2, [r2, #0]
   11bb4:	7892      	ldrb	r2, [r2, #2]
   11bb6:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->CANrxData[3];
   11bb8:	68fb      	ldr	r3, [r7, #12]
   11bba:	681b      	ldr	r3, [r3, #0]
   11bbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11bc0:	68fa      	ldr	r2, [r7, #12]
   11bc2:	6812      	ldr	r2, [r2, #0]
   11bc4:	78d2      	ldrb	r2, [r2, #3]
   11bc6:	721a      	strb	r2, [r3, #8]

            /* Expedited transfer */
            if(SDO->ODF_arg.dataLength <= 4U){
   11bc8:	68fb      	ldr	r3, [r7, #12]
   11bca:	681b      	ldr	r3, [r3, #0]
   11bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   11bce:	2b04      	cmp	r3, #4
   11bd0:	d835      	bhi.n	11c3e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xad2>
                for(i=0U; i<SDO->ODF_arg.dataLength; i++)
   11bd2:	2300      	movs	r3, #0
   11bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
   11bd6:	68fb      	ldr	r3, [r7, #12]
   11bd8:	681b      	ldr	r3, [r3, #0]
   11bda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   11bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11bde:	429a      	cmp	r2, r3
   11be0:	d912      	bls.n	11c08 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa9c>
                    SDO->CANtxBuff->data[4U+i] = SDO->ODF_arg.data[i];
   11be2:	68fb      	ldr	r3, [r7, #12]
   11be4:	681b      	ldr	r3, [r3, #0]
   11be6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
   11bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11bec:	3304      	adds	r3, #4
   11bee:	68f9      	ldr	r1, [r7, #12]
   11bf0:	6809      	ldr	r1, [r1, #0]
   11bf2:	6c48      	ldr	r0, [r1, #68]	; 0x44
   11bf4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   11bf6:	4401      	add	r1, r0
   11bf8:	7809      	ldrb	r1, [r1, #0]
   11bfa:	4413      	add	r3, r2
   11bfc:	460a      	mov	r2, r1
   11bfe:	715a      	strb	r2, [r3, #5]
                for(i=0U; i<SDO->ODF_arg.dataLength; i++)
   11c00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11c02:	3301      	adds	r3, #1
   11c04:	63fb      	str	r3, [r7, #60]	; 0x3c
   11c06:	e7e6      	b.n	11bd6 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa6a>

                SDO->CANtxBuff->data[0] = 0x43U | ((4U-SDO->ODF_arg.dataLength) << 2U);
   11c08:	68fb      	ldr	r3, [r7, #12]
   11c0a:	681b      	ldr	r3, [r3, #0]
   11c0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11c10:	68fa      	ldr	r2, [r7, #12]
   11c12:	6812      	ldr	r2, [r2, #0]
   11c14:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   11c16:	b2d2      	uxtb	r2, r2
   11c18:	f1c2 0204 	rsb	r2, r2, #4
   11c1c:	b2d2      	uxtb	r2, r2
   11c1e:	0092      	lsls	r2, r2, #2
   11c20:	b2d2      	uxtb	r2, r2
   11c22:	f042 0243 	orr.w	r2, r2, #67	; 0x43
   11c26:	b2d2      	uxtb	r2, r2
   11c28:	715a      	strb	r2, [r3, #5]
                SDO->state = CO_SDO_ST_IDLE;
   11c2a:	68fb      	ldr	r3, [r7, #12]
   11c2c:	681b      	ldr	r3, [r3, #0]
   11c2e:	2200      	movs	r2, #0
   11c30:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

                sendResponse = true;
   11c34:	2301      	movs	r3, #1
   11c36:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                }

                /* send response */
                sendResponse = true;
            }
            break;
   11c3a:	f000 bc11 	b.w	12460 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
                SDO->bufferOffset = 0U;
   11c3e:	68fb      	ldr	r3, [r7, #12]
   11c40:	681b      	ldr	r3, [r3, #0]
   11c42:	2200      	movs	r2, #0
   11c44:	639a      	str	r2, [r3, #56]	; 0x38
                SDO->sequence = 0U;
   11c46:	68fb      	ldr	r3, [r7, #12]
   11c48:	681b      	ldr	r3, [r3, #0]
   11c4a:	2200      	movs	r2, #0
   11c4c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENTED;
   11c50:	68fb      	ldr	r3, [r7, #12]
   11c52:	681b      	ldr	r3, [r3, #0]
   11c54:	2222      	movs	r2, #34	; 0x22
   11c56:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                if(SDO->ODF_arg.dataLengthTotal != 0U){
   11c5a:	68fb      	ldr	r3, [r7, #12]
   11c5c:	681b      	ldr	r3, [r3, #0]
   11c5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   11c60:	2b00      	cmp	r3, #0
   11c62:	d015      	beq.n	11c90 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xb24>
                    uint32_t len = SDO->ODF_arg.dataLengthTotal;
   11c64:	68fb      	ldr	r3, [r7, #12]
   11c66:	681b      	ldr	r3, [r3, #0]
   11c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   11c6a:	617b      	str	r3, [r7, #20]
                    CO_memcpySwap4(&SDO->CANtxBuff->data[4], &len);
   11c6c:	68fb      	ldr	r3, [r7, #12]
   11c6e:	681b      	ldr	r3, [r3, #0]
   11c70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11c74:	3309      	adds	r3, #9
   11c76:	f107 0214 	add.w	r2, r7, #20
   11c7a:	4619      	mov	r1, r3
   11c7c:	68f8      	ldr	r0, [r7, #12]
   11c7e:	4b51      	ldr	r3, [pc, #324]	; (11dc4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc58>)
   11c80:	4798      	blx	r3
                    SDO->CANtxBuff->data[0] = 0x41U;
   11c82:	68fb      	ldr	r3, [r7, #12]
   11c84:	681b      	ldr	r3, [r3, #0]
   11c86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11c8a:	2241      	movs	r2, #65	; 0x41
   11c8c:	715a      	strb	r2, [r3, #5]
   11c8e:	e005      	b.n	11c9c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xb30>
                    SDO->CANtxBuff->data[0] = 0x40U;
   11c90:	68fb      	ldr	r3, [r7, #12]
   11c92:	681b      	ldr	r3, [r3, #0]
   11c94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11c98:	2240      	movs	r2, #64	; 0x40
   11c9a:	715a      	strb	r2, [r3, #5]
                sendResponse = true;
   11c9c:	2301      	movs	r3, #1
   11c9e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
   11ca2:	e3dd      	b.n	12460 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
        }

        case CO_SDO_ST_UPLOAD_SEGMENTED:{
            /* verify client command specifier */
            if((SDO->CANrxData[0]&0xE0U) != 0x60U){
   11ca4:	68fb      	ldr	r3, [r7, #12]
   11ca6:	681b      	ldr	r3, [r3, #0]
   11ca8:	781b      	ldrb	r3, [r3, #0]
   11caa:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
   11cae:	2b60      	cmp	r3, #96	; 0x60
   11cb0:	d008      	beq.n	11cc4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xb58>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
   11cb2:	68fb      	ldr	r3, [r7, #12]
   11cb4:	681b      	ldr	r3, [r3, #0]
   11cb6:	4944      	ldr	r1, [pc, #272]	; (11dc8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc5c>)
   11cb8:	4618      	mov	r0, r3
   11cba:	4b41      	ldr	r3, [pc, #260]	; (11dc0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc54>)
   11cbc:	4798      	blx	r3
                return -1;
   11cbe:	f04f 33ff 	mov.w	r3, #4294967295
   11cc2:	e3e9      	b.n	12498 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            /* verify toggle bit */
            i = ((SDO->CANrxData[0]&0x10U) != 0) ? 1U : 0U;
   11cc4:	68fb      	ldr	r3, [r7, #12]
   11cc6:	681b      	ldr	r3, [r3, #0]
   11cc8:	781b      	ldrb	r3, [r3, #0]
   11cca:	f003 0310 	and.w	r3, r3, #16
   11cce:	2b00      	cmp	r3, #0
   11cd0:	d001      	beq.n	11cd6 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xb6a>
   11cd2:	2301      	movs	r3, #1
   11cd4:	e000      	b.n	11cd8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xb6c>
   11cd6:	2300      	movs	r3, #0
   11cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
            if(i != SDO->sequence){
   11cda:	68fb      	ldr	r3, [r7, #12]
   11cdc:	681b      	ldr	r3, [r3, #0]
   11cde:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   11ce2:	461a      	mov	r2, r3
   11ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11ce6:	429a      	cmp	r2, r3
   11ce8:	d008      	beq.n	11cfc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xb90>
                CO_SDO_abort(SDO, CO_SDO_AB_TOGGLE_BIT);/* toggle bit not alternated */
   11cea:	68fb      	ldr	r3, [r7, #12]
   11cec:	681b      	ldr	r3, [r3, #0]
   11cee:	4937      	ldr	r1, [pc, #220]	; (11dcc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc60>)
   11cf0:	4618      	mov	r0, r3
   11cf2:	4b33      	ldr	r3, [pc, #204]	; (11dc0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc54>)
   11cf4:	4798      	blx	r3
                return -1;
   11cf6:	f04f 33ff 	mov.w	r3, #4294967295
   11cfa:	e3cd      	b.n	12498 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            /* calculate length to be sent */
            len = SDO->ODF_arg.dataLength - SDO->bufferOffset;
   11cfc:	68fb      	ldr	r3, [r7, #12]
   11cfe:	681b      	ldr	r3, [r3, #0]
   11d00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   11d02:	68fb      	ldr	r3, [r7, #12]
   11d04:	681b      	ldr	r3, [r3, #0]
   11d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   11d08:	1ad3      	subs	r3, r2, r3
   11d0a:	643b      	str	r3, [r7, #64]	; 0x40
            if(len > 7U) len = 7U;
   11d0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11d0e:	2b07      	cmp	r3, #7
   11d10:	d901      	bls.n	11d16 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xbaa>
   11d12:	2307      	movs	r3, #7
   11d14:	643b      	str	r3, [r7, #64]	; 0x40

            /* If data type is domain, re-fill the data buffer if neccessary and indicated so. */
            if((SDO->ODF_arg.ODdataStorage == 0) && (len < 7U) && (!SDO->ODF_arg.lastSegment)){
   11d16:	68fb      	ldr	r3, [r7, #12]
   11d18:	681b      	ldr	r3, [r3, #0]
   11d1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   11d1c:	2b00      	cmp	r3, #0
   11d1e:	d179      	bne.n	11e14 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xca8>
   11d20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11d22:	2b06      	cmp	r3, #6
   11d24:	d876      	bhi.n	11e14 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xca8>
   11d26:	68fb      	ldr	r3, [r7, #12]
   11d28:	681b      	ldr	r3, [r3, #0]
   11d2a:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
   11d2e:	2b00      	cmp	r3, #0
   11d30:	d170      	bne.n	11e14 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xca8>
                /* copy previous data to the beginning */
                for(i=0U; i<len; i++){
   11d32:	2300      	movs	r3, #0
   11d34:	63fb      	str	r3, [r7, #60]	; 0x3c
   11d36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   11d38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11d3a:	429a      	cmp	r2, r3
   11d3c:	d213      	bcs.n	11d66 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xbfa>
                    SDO->ODF_arg.data[i] = SDO->ODF_arg.data[SDO->bufferOffset+i];
   11d3e:	68fb      	ldr	r3, [r7, #12]
   11d40:	681b      	ldr	r3, [r3, #0]
   11d42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   11d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11d46:	4413      	add	r3, r2
   11d48:	68fa      	ldr	r2, [r7, #12]
   11d4a:	6812      	ldr	r2, [r2, #0]
   11d4c:	6c51      	ldr	r1, [r2, #68]	; 0x44
   11d4e:	68fa      	ldr	r2, [r7, #12]
   11d50:	6812      	ldr	r2, [r2, #0]
   11d52:	6b90      	ldr	r0, [r2, #56]	; 0x38
   11d54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   11d56:	4402      	add	r2, r0
   11d58:	440a      	add	r2, r1
   11d5a:	7812      	ldrb	r2, [r2, #0]
   11d5c:	701a      	strb	r2, [r3, #0]
                for(i=0U; i<len; i++){
   11d5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11d60:	3301      	adds	r3, #1
   11d62:	63fb      	str	r3, [r7, #60]	; 0x3c
   11d64:	e7e7      	b.n	11d36 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xbca>
                }

                /* move the beginning of the data buffer */
                SDO->ODF_arg.data += len;
   11d66:	68fb      	ldr	r3, [r7, #12]
   11d68:	681b      	ldr	r3, [r3, #0]
   11d6a:	68fa      	ldr	r2, [r7, #12]
   11d6c:	6812      	ldr	r2, [r2, #0]
   11d6e:	6c51      	ldr	r1, [r2, #68]	; 0x44
   11d70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   11d72:	440a      	add	r2, r1
   11d74:	645a      	str	r2, [r3, #68]	; 0x44
                SDO->ODF_arg.dataLength = CO_OD_getLength( SDO->entryNo, SDO->ODF_arg.subIndex) - len;
   11d76:	68fb      	ldr	r3, [r7, #12]
   11d78:	681c      	ldr	r4, [r3, #0]
   11d7a:	68fb      	ldr	r3, [r7, #12]
   11d7c:	681b      	ldr	r3, [r3, #0]
   11d7e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   11d80:	68fb      	ldr	r3, [r7, #12]
   11d82:	681b      	ldr	r3, [r3, #0]
   11d84:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
   11d88:	461a      	mov	r2, r3
   11d8a:	68f8      	ldr	r0, [r7, #12]
   11d8c:	4b10      	ldr	r3, [pc, #64]	; (11dd0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc64>)
   11d8e:	4798      	blx	r3
   11d90:	4602      	mov	r2, r0
   11d92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11d94:	1ad3      	subs	r3, r2, r3
   11d96:	64e3      	str	r3, [r4, #76]	; 0x4c

                /* read next data from Object dictionary function */
                abortCode = CO_SDO_readOD( CO_SDO_BUFFER_SIZE);
   11d98:	2120      	movs	r1, #32
   11d9a:	68f8      	ldr	r0, [r7, #12]
   11d9c:	4b0d      	ldr	r3, [pc, #52]	; (11dd4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc68>)
   11d9e:	4798      	blx	r3
   11da0:	62b8      	str	r0, [r7, #40]	; 0x28
                if(abortCode != 0U){
   11da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11da4:	2b00      	cmp	r3, #0
   11da6:	d017      	beq.n	11dd8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>
                    CO_SDO_abort(SDO, abortCode);
   11da8:	68fb      	ldr	r3, [r7, #12]
   11daa:	681b      	ldr	r3, [r3, #0]
   11dac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   11dae:	4618      	mov	r0, r3
   11db0:	4b03      	ldr	r3, [pc, #12]	; (11dc0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc54>)
   11db2:	4798      	blx	r3
                    return -1;
   11db4:	f04f 33ff 	mov.w	r3, #4294967295
   11db8:	e36e      	b.n	12498 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
   11dba:	bf00      	nop
   11dbc:	00010fad 	.word	0x00010fad
   11dc0:	000110e1 	.word	0x000110e1
   11dc4:	000105bd 	.word	0x000105bd
   11dc8:	05040001 	.word	0x05040001
   11dcc:	05030000 	.word	0x05030000
   11dd0:	00010ad1 	.word	0x00010ad1
   11dd4:	00010e8d 	.word	0x00010e8d
                }

                /* return to the original data buffer */
                SDO->ODF_arg.data -= len;
   11dd8:	68fb      	ldr	r3, [r7, #12]
   11dda:	681b      	ldr	r3, [r3, #0]
   11ddc:	68fa      	ldr	r2, [r7, #12]
   11dde:	6812      	ldr	r2, [r2, #0]
   11de0:	6c51      	ldr	r1, [r2, #68]	; 0x44
   11de2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   11de4:	4252      	negs	r2, r2
   11de6:	440a      	add	r2, r1
   11de8:	645a      	str	r2, [r3, #68]	; 0x44
                SDO->ODF_arg.dataLength +=  len;
   11dea:	68fb      	ldr	r3, [r7, #12]
   11dec:	681b      	ldr	r3, [r3, #0]
   11dee:	68fa      	ldr	r2, [r7, #12]
   11df0:	6812      	ldr	r2, [r2, #0]
   11df2:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
   11df4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   11df6:	440a      	add	r2, r1
   11df8:	64da      	str	r2, [r3, #76]	; 0x4c
                SDO->bufferOffset = 0;
   11dfa:	68fb      	ldr	r3, [r7, #12]
   11dfc:	681b      	ldr	r3, [r3, #0]
   11dfe:	2200      	movs	r2, #0
   11e00:	639a      	str	r2, [r3, #56]	; 0x38

                /* re-calculate the length */
                len = SDO->ODF_arg.dataLength;
   11e02:	68fb      	ldr	r3, [r7, #12]
   11e04:	681b      	ldr	r3, [r3, #0]
   11e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   11e08:	643b      	str	r3, [r7, #64]	; 0x40
                if(len > 7U) len = 7U;
   11e0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11e0c:	2b07      	cmp	r3, #7
   11e0e:	d901      	bls.n	11e14 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xca8>
   11e10:	2307      	movs	r3, #7
   11e12:	643b      	str	r3, [r7, #64]	; 0x40
            }

            /* fill response data bytes */
            for(i=0U; i<len; i++)
   11e14:	2300      	movs	r3, #0
   11e16:	63fb      	str	r3, [r7, #60]	; 0x3c
   11e18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   11e1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11e1c:	429a      	cmp	r2, r3
   11e1e:	d215      	bcs.n	11e4c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xce0>
                SDO->CANtxBuff->data[i+1] = SDO->ODF_arg.data[SDO->bufferOffset++];
   11e20:	68fb      	ldr	r3, [r7, #12]
   11e22:	681b      	ldr	r3, [r3, #0]
   11e24:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   11e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11e2a:	1c59      	adds	r1, r3, #1
   11e2c:	68fb      	ldr	r3, [r7, #12]
   11e2e:	681b      	ldr	r3, [r3, #0]
   11e30:	6c5c      	ldr	r4, [r3, #68]	; 0x44
   11e32:	68fb      	ldr	r3, [r7, #12]
   11e34:	681a      	ldr	r2, [r3, #0]
   11e36:	6b93      	ldr	r3, [r2, #56]	; 0x38
   11e38:	1c5d      	adds	r5, r3, #1
   11e3a:	6395      	str	r5, [r2, #56]	; 0x38
   11e3c:	4423      	add	r3, r4
   11e3e:	781a      	ldrb	r2, [r3, #0]
   11e40:	1843      	adds	r3, r0, r1
   11e42:	715a      	strb	r2, [r3, #5]
            for(i=0U; i<len; i++)
   11e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11e46:	3301      	adds	r3, #1
   11e48:	63fb      	str	r3, [r7, #60]	; 0x3c
   11e4a:	e7e5      	b.n	11e18 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xcac>

            /* first response byte */
            SDO->CANtxBuff->data[0] = 0x00 | (SDO->sequence ? 0x10 : 0x00) | ((7-len)<<1);
   11e4c:	68fb      	ldr	r3, [r7, #12]
   11e4e:	681b      	ldr	r3, [r3, #0]
   11e50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11e54:	68fa      	ldr	r2, [r7, #12]
   11e56:	6812      	ldr	r2, [r2, #0]
   11e58:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
   11e5c:	2a00      	cmp	r2, #0
   11e5e:	d001      	beq.n	11e64 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xcf8>
   11e60:	2110      	movs	r1, #16
   11e62:	e000      	b.n	11e66 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xcfa>
   11e64:	2100      	movs	r1, #0
   11e66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   11e68:	b2d2      	uxtb	r2, r2
   11e6a:	f1c2 0207 	rsb	r2, r2, #7
   11e6e:	b2d2      	uxtb	r2, r2
   11e70:	0052      	lsls	r2, r2, #1
   11e72:	b2d2      	uxtb	r2, r2
   11e74:	430a      	orrs	r2, r1
   11e76:	b2d2      	uxtb	r2, r2
   11e78:	715a      	strb	r2, [r3, #5]
            SDO->sequence = (SDO->sequence) ? 0 : 1;
   11e7a:	68fb      	ldr	r3, [r7, #12]
   11e7c:	681b      	ldr	r3, [r3, #0]
   11e7e:	68fa      	ldr	r2, [r7, #12]
   11e80:	6812      	ldr	r2, [r2, #0]
   11e82:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
   11e86:	2a00      	cmp	r2, #0
   11e88:	bf0c      	ite	eq
   11e8a:	2201      	moveq	r2, #1
   11e8c:	2200      	movne	r2, #0
   11e8e:	b2d2      	uxtb	r2, r2
   11e90:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

            /* verify end of transfer */
            if((SDO->bufferOffset == SDO->ODF_arg.dataLength) && (SDO->ODF_arg.lastSegment)){
   11e94:	68fb      	ldr	r3, [r7, #12]
   11e96:	681b      	ldr	r3, [r3, #0]
   11e98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   11e9a:	68fb      	ldr	r3, [r7, #12]
   11e9c:	681b      	ldr	r3, [r3, #0]
   11e9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   11ea0:	429a      	cmp	r2, r3
   11ea2:	d117      	bne.n	11ed4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xd68>
   11ea4:	68fb      	ldr	r3, [r7, #12]
   11ea6:	681b      	ldr	r3, [r3, #0]
   11ea8:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
   11eac:	2b00      	cmp	r3, #0
   11eae:	d011      	beq.n	11ed4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xd68>
                SDO->CANtxBuff->data[0] |= 0x01;
   11eb0:	68fb      	ldr	r3, [r7, #12]
   11eb2:	681b      	ldr	r3, [r3, #0]
   11eb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11eb8:	68fa      	ldr	r2, [r7, #12]
   11eba:	6812      	ldr	r2, [r2, #0]
   11ebc:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
   11ec0:	7952      	ldrb	r2, [r2, #5]
   11ec2:	f042 0201 	orr.w	r2, r2, #1
   11ec6:	b2d2      	uxtb	r2, r2
   11ec8:	715a      	strb	r2, [r3, #5]
                SDO->state = CO_SDO_ST_IDLE;
   11eca:	68fb      	ldr	r3, [r7, #12]
   11ecc:	681b      	ldr	r3, [r3, #0]
   11ece:	2200      	movs	r2, #0
   11ed0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            }

            /* send response */
            sendResponse = true;
   11ed4:	2301      	movs	r3, #1
   11ed6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
   11eda:	e2c1      	b.n	12460 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
        }

        case CO_SDO_ST_UPLOAD_BL_INITIATE:{
            /* default response */
            SDO->CANtxBuff->data[1] = SDO->CANrxData[1];
   11edc:	68fb      	ldr	r3, [r7, #12]
   11ede:	681b      	ldr	r3, [r3, #0]
   11ee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11ee4:	68fa      	ldr	r2, [r7, #12]
   11ee6:	6812      	ldr	r2, [r2, #0]
   11ee8:	7852      	ldrb	r2, [r2, #1]
   11eea:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = SDO->CANrxData[2];
   11eec:	68fb      	ldr	r3, [r7, #12]
   11eee:	681b      	ldr	r3, [r3, #0]
   11ef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11ef4:	68fa      	ldr	r2, [r7, #12]
   11ef6:	6812      	ldr	r2, [r2, #0]
   11ef8:	7892      	ldrb	r2, [r2, #2]
   11efa:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->CANrxData[3];
   11efc:	68fb      	ldr	r3, [r7, #12]
   11efe:	681b      	ldr	r3, [r3, #0]
   11f00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11f04:	68fa      	ldr	r2, [r7, #12]
   11f06:	6812      	ldr	r2, [r2, #0]
   11f08:	78d2      	ldrb	r2, [r2, #3]
   11f0a:	721a      	strb	r2, [r3, #8]

            /* calculate CRC, if enabled */
            if((SDO->CANrxData[0] & 0x04U) != 0U){
   11f0c:	68fb      	ldr	r3, [r7, #12]
   11f0e:	681b      	ldr	r3, [r3, #0]
   11f10:	781b      	ldrb	r3, [r3, #0]
   11f12:	f003 0304 	and.w	r3, r3, #4
   11f16:	2b00      	cmp	r3, #0
   11f18:	d013      	beq.n	11f42 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xdd6>
                SDO->crcEnabled = true;
   11f1a:	68fb      	ldr	r3, [r7, #12]
   11f1c:	681b      	ldr	r3, [r3, #0]
   11f1e:	2201      	movs	r2, #1
   11f20:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                SDO->crc = crc16_ccitt(SDO->ODF_arg.data, SDO->ODF_arg.dataLength, 0);
   11f24:	68fb      	ldr	r3, [r7, #12]
   11f26:	681c      	ldr	r4, [r3, #0]
   11f28:	68fb      	ldr	r3, [r7, #12]
   11f2a:	681b      	ldr	r3, [r3, #0]
   11f2c:	6c59      	ldr	r1, [r3, #68]	; 0x44
   11f2e:	68fb      	ldr	r3, [r7, #12]
   11f30:	681b      	ldr	r3, [r3, #0]
   11f32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   11f34:	2300      	movs	r3, #0
   11f36:	68f8      	ldr	r0, [r7, #12]
   11f38:	4d93      	ldr	r5, [pc, #588]	; (12188 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x101c>)
   11f3a:	47a8      	blx	r5
   11f3c:	4603      	mov	r3, r0
   11f3e:	6763      	str	r3, [r4, #116]	; 0x74
   11f40:	e008      	b.n	11f54 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xde8>
            }
            else{
                SDO->crcEnabled = false;
   11f42:	68fb      	ldr	r3, [r7, #12]
   11f44:	681b      	ldr	r3, [r3, #0]
   11f46:	2200      	movs	r2, #0
   11f48:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                SDO->crc = 0;
   11f4c:	68fb      	ldr	r3, [r7, #12]
   11f4e:	681b      	ldr	r3, [r3, #0]
   11f50:	2200      	movs	r2, #0
   11f52:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Number of segments per block */
            SDO->blksize = SDO->CANrxData[4];
   11f54:	68fb      	ldr	r3, [r7, #12]
   11f56:	681b      	ldr	r3, [r3, #0]
   11f58:	68fa      	ldr	r2, [r7, #12]
   11f5a:	6812      	ldr	r2, [r2, #0]
   11f5c:	7912      	ldrb	r2, [r2, #4]
   11f5e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

            /* verify client subcommand */
            if((SDO->CANrxData[0]&0x03U) != 0x00U){
   11f62:	68fb      	ldr	r3, [r7, #12]
   11f64:	681b      	ldr	r3, [r3, #0]
   11f66:	781b      	ldrb	r3, [r3, #0]
   11f68:	f003 0303 	and.w	r3, r3, #3
   11f6c:	2b00      	cmp	r3, #0
   11f6e:	d008      	beq.n	11f82 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xe16>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
   11f70:	68fb      	ldr	r3, [r7, #12]
   11f72:	681b      	ldr	r3, [r3, #0]
   11f74:	4985      	ldr	r1, [pc, #532]	; (1218c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1020>)
   11f76:	4618      	mov	r0, r3
   11f78:	4b85      	ldr	r3, [pc, #532]	; (12190 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1024>)
   11f7a:	4798      	blx	r3
                return -1;
   11f7c:	f04f 33ff 	mov.w	r3, #4294967295
   11f80:	e28a      	b.n	12498 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            /* verify blksize and if SDO data buffer is large enough */
            if((SDO->blksize < 1U) || (SDO->blksize > 127U) ||
   11f82:	68fb      	ldr	r3, [r7, #12]
   11f84:	681b      	ldr	r3, [r3, #0]
   11f86:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
   11f8a:	2b00      	cmp	r3, #0
   11f8c:	d019      	beq.n	11fc2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xe56>
   11f8e:	68fb      	ldr	r3, [r7, #12]
   11f90:	681b      	ldr	r3, [r3, #0]
   11f92:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
   11f96:	b25b      	sxtb	r3, r3
   11f98:	2b00      	cmp	r3, #0
   11f9a:	db12      	blt.n	11fc2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xe56>
               (((SDO->blksize*7U) > SDO->ODF_arg.dataLength) && (!SDO->ODF_arg.lastSegment))){
   11f9c:	68fb      	ldr	r3, [r7, #12]
   11f9e:	681b      	ldr	r3, [r3, #0]
   11fa0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
   11fa4:	461a      	mov	r2, r3
   11fa6:	4613      	mov	r3, r2
   11fa8:	00db      	lsls	r3, r3, #3
   11faa:	1a9a      	subs	r2, r3, r2
   11fac:	68fb      	ldr	r3, [r7, #12]
   11fae:	681b      	ldr	r3, [r3, #0]
   11fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            if((SDO->blksize < 1U) || (SDO->blksize > 127U) ||
   11fb2:	429a      	cmp	r2, r3
   11fb4:	d90e      	bls.n	11fd4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xe68>
               (((SDO->blksize*7U) > SDO->ODF_arg.dataLength) && (!SDO->ODF_arg.lastSegment))){
   11fb6:	68fb      	ldr	r3, [r7, #12]
   11fb8:	681b      	ldr	r3, [r3, #0]
   11fba:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
   11fbe:	2b00      	cmp	r3, #0
   11fc0:	d108      	bne.n	11fd4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xe68>
                CO_SDO_abort(SDO, CO_SDO_AB_BLOCK_SIZE); /* Invalid block size (block mode only). */
   11fc2:	68fb      	ldr	r3, [r7, #12]
   11fc4:	681b      	ldr	r3, [r3, #0]
   11fc6:	4973      	ldr	r1, [pc, #460]	; (12194 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1028>)
   11fc8:	4618      	mov	r0, r3
   11fca:	4b71      	ldr	r3, [pc, #452]	; (12190 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1024>)
   11fcc:	4798      	blx	r3
                return -1;
   11fce:	f04f 33ff 	mov.w	r3, #4294967295
   11fd2:	e261      	b.n	12498 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            /* indicate data size, if known */
            if(SDO->ODF_arg.dataLengthTotal != 0U){
   11fd4:	68fb      	ldr	r3, [r7, #12]
   11fd6:	681b      	ldr	r3, [r3, #0]
   11fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   11fda:	2b00      	cmp	r3, #0
   11fdc:	d015      	beq.n	1200a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xe9e>
                uint32_t len = SDO->ODF_arg.dataLengthTotal;
   11fde:	68fb      	ldr	r3, [r7, #12]
   11fe0:	681b      	ldr	r3, [r3, #0]
   11fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   11fe4:	613b      	str	r3, [r7, #16]
                CO_memcpySwap4(&SDO->CANtxBuff->data[4], &len);
   11fe6:	68fb      	ldr	r3, [r7, #12]
   11fe8:	681b      	ldr	r3, [r3, #0]
   11fea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11fee:	3309      	adds	r3, #9
   11ff0:	f107 0210 	add.w	r2, r7, #16
   11ff4:	4619      	mov	r1, r3
   11ff6:	68f8      	ldr	r0, [r7, #12]
   11ff8:	4b67      	ldr	r3, [pc, #412]	; (12198 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x102c>)
   11ffa:	4798      	blx	r3
                SDO->CANtxBuff->data[0] = 0xC6U;
   11ffc:	68fb      	ldr	r3, [r7, #12]
   11ffe:	681b      	ldr	r3, [r3, #0]
   12000:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   12004:	22c6      	movs	r2, #198	; 0xc6
   12006:	715a      	strb	r2, [r3, #5]
   12008:	e005      	b.n	12016 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xeaa>
            }
            else{
                SDO->CANtxBuff->data[0] = 0xC4U;
   1200a:	68fb      	ldr	r3, [r7, #12]
   1200c:	681b      	ldr	r3, [r3, #0]
   1200e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   12012:	22c4      	movs	r2, #196	; 0xc4
   12014:	715a      	strb	r2, [r3, #5]
            }

            /* send response */
            SDO->state = CO_SDO_ST_UPLOAD_BL_INITIATE_2;
   12016:	68fb      	ldr	r3, [r7, #12]
   12018:	681b      	ldr	r3, [r3, #0]
   1201a:	2225      	movs	r2, #37	; 0x25
   1201c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            sendResponse = true;
   12020:	2301      	movs	r3, #1
   12022:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
   12026:	e21b      	b.n	12460 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
        }

        case CO_SDO_ST_UPLOAD_BL_INITIATE_2:{
            /* verify client command specifier and subcommand */
            if((SDO->CANrxData[0]&0xE3U) != 0xA3U){
   12028:	68fb      	ldr	r3, [r7, #12]
   1202a:	681b      	ldr	r3, [r3, #0]
   1202c:	781b      	ldrb	r3, [r3, #0]
   1202e:	f003 03e3 	and.w	r3, r3, #227	; 0xe3
   12032:	2ba3      	cmp	r3, #163	; 0xa3
   12034:	d008      	beq.n	12048 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xedc>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
   12036:	68fb      	ldr	r3, [r7, #12]
   12038:	681b      	ldr	r3, [r3, #0]
   1203a:	4954      	ldr	r1, [pc, #336]	; (1218c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1020>)
   1203c:	4618      	mov	r0, r3
   1203e:	4b54      	ldr	r3, [pc, #336]	; (12190 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1024>)
   12040:	4798      	blx	r3
                return -1;
   12042:	f04f 33ff 	mov.w	r3, #4294967295
   12046:	e227      	b.n	12498 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            SDO->bufferOffset = 0;
   12048:	68fb      	ldr	r3, [r7, #12]
   1204a:	681b      	ldr	r3, [r3, #0]
   1204c:	2200      	movs	r2, #0
   1204e:	639a      	str	r2, [r3, #56]	; 0x38
            SDO->sequence = 0;
   12050:	68fb      	ldr	r3, [r7, #12]
   12052:	681b      	ldr	r3, [r3, #0]
   12054:	2200      	movs	r2, #0
   12056:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
            SDO->endOfTransfer = false;
   1205a:	68fb      	ldr	r3, [r7, #12]
   1205c:	681b      	ldr	r3, [r3, #0]
   1205e:	2200      	movs	r2, #0
   12060:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
            SDO->CANrxNew = false;
   12064:	68fb      	ldr	r3, [r7, #12]
   12066:	681b      	ldr	r3, [r3, #0]
   12068:	2200      	movs	r2, #0
   1206a:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
            SDO->state = CO_SDO_ST_UPLOAD_BL_SUBBLOCK;
   1206e:	68fb      	ldr	r3, [r7, #12]
   12070:	681b      	ldr	r3, [r3, #0]
   12072:	2226      	movs	r2, #38	; 0x26
   12074:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            /* continue in next case */
        }

        case CO_SDO_ST_UPLOAD_BL_SUBBLOCK:{
            /* is block confirmation received */
            if(SDO->CANrxNew){
   12078:	68fb      	ldr	r3, [r7, #12]
   1207a:	681b      	ldr	r3, [r3, #0]
   1207c:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
   12080:	2b00      	cmp	r3, #0
   12082:	f000 813f 	beq.w	12304 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1198>
                uint8_t ackseq;
                uint32_t j;

                /* verify client command specifier and subcommand */
                if((SDO->CANrxData[0]&0xE3U) != 0xA2U){
   12086:	68fb      	ldr	r3, [r7, #12]
   12088:	681b      	ldr	r3, [r3, #0]
   1208a:	781b      	ldrb	r3, [r3, #0]
   1208c:	f003 03e3 	and.w	r3, r3, #227	; 0xe3
   12090:	2ba2      	cmp	r3, #162	; 0xa2
   12092:	d008      	beq.n	120a6 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xf3a>
                    CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
   12094:	68fb      	ldr	r3, [r7, #12]
   12096:	681b      	ldr	r3, [r3, #0]
   12098:	493c      	ldr	r1, [pc, #240]	; (1218c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1020>)
   1209a:	4618      	mov	r0, r3
   1209c:	4b3c      	ldr	r3, [pc, #240]	; (12190 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1024>)
   1209e:	4798      	blx	r3
                    return -1;
   120a0:	f04f 33ff 	mov.w	r3, #4294967295
   120a4:	e1f8      	b.n	12498 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                }

                ackseq = SDO->CANrxData[1];   /* sequence number of the last segment, that was received correctly. */
   120a6:	68fb      	ldr	r3, [r7, #12]
   120a8:	681b      	ldr	r3, [r3, #0]
   120aa:	785b      	ldrb	r3, [r3, #1]
   120ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

                /* verify if response is too early */
                if(ackseq > SDO->sequence){
   120b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   120b4:	68fa      	ldr	r2, [r7, #12]
   120b6:	6812      	ldr	r2, [r2, #0]
   120b8:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
   120bc:	4293      	cmp	r3, r2
   120be:	dd08      	ble.n	120d2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xf66>
                    CO_SDO_abort(SDO, CO_SDO_AB_SEQ_NUM); /* Invalid sequence */
   120c0:	68fb      	ldr	r3, [r7, #12]
   120c2:	681b      	ldr	r3, [r3, #0]
   120c4:	4935      	ldr	r1, [pc, #212]	; (1219c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1030>)
   120c6:	4618      	mov	r0, r3
   120c8:	4b31      	ldr	r3, [pc, #196]	; (12190 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1024>)
   120ca:	4798      	blx	r3
                    return -1;
   120cc:	f04f 33ff 	mov.w	r3, #4294967295
   120d0:	e1e2      	b.n	12498 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                }

                /* end of transfer */
                if((SDO->endOfTransfer) && (ackseq == SDO->blksize)){
   120d2:	68fb      	ldr	r3, [r7, #12]
   120d4:	681b      	ldr	r3, [r3, #0]
   120d6:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
   120da:	2b00      	cmp	r3, #0
   120dc:	d033      	beq.n	12146 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xfda>
   120de:	68fb      	ldr	r3, [r7, #12]
   120e0:	681b      	ldr	r3, [r3, #0]
   120e2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
   120e6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   120ea:	429a      	cmp	r2, r3
   120ec:	d12b      	bne.n	12146 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xfda>
                    /* first response byte */
                    SDO->CANtxBuff->data[0] = 0xC1 | ((7 - SDO->lastLen) << 2);
   120ee:	68fb      	ldr	r3, [r7, #12]
   120f0:	681b      	ldr	r3, [r3, #0]
   120f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   120f6:	68fa      	ldr	r2, [r7, #12]
   120f8:	6812      	ldr	r2, [r2, #0]
   120fa:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
   120fe:	f1c2 0207 	rsb	r2, r2, #7
   12102:	0092      	lsls	r2, r2, #2
   12104:	b252      	sxtb	r2, r2
   12106:	f062 023e 	orn	r2, r2, #62	; 0x3e
   1210a:	b252      	sxtb	r2, r2
   1210c:	b2d2      	uxtb	r2, r2
   1210e:	715a      	strb	r2, [r3, #5]

                    /* CRC */
                    if(SDO->crcEnabled)
   12110:	68fb      	ldr	r3, [r7, #12]
   12112:	681b      	ldr	r3, [r3, #0]
   12114:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
   12118:	2b00      	cmp	r3, #0
   1211a:	d00b      	beq.n	12134 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xfc8>
                        CO_memcpySwap2(&SDO->CANtxBuff->data[1], &SDO->crc);
   1211c:	68fb      	ldr	r3, [r7, #12]
   1211e:	681b      	ldr	r3, [r3, #0]
   12120:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   12124:	1d99      	adds	r1, r3, #6
   12126:	68fb      	ldr	r3, [r7, #12]
   12128:	681b      	ldr	r3, [r3, #0]
   1212a:	3374      	adds	r3, #116	; 0x74
   1212c:	461a      	mov	r2, r3
   1212e:	68f8      	ldr	r0, [r7, #12]
   12130:	4b1b      	ldr	r3, [pc, #108]	; (121a0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1034>)
   12132:	4798      	blx	r3

                    SDO->state = CO_SDO_ST_UPLOAD_BL_END;
   12134:	68fb      	ldr	r3, [r7, #12]
   12136:	681b      	ldr	r3, [r3, #0]
   12138:	2227      	movs	r2, #39	; 0x27
   1213a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

                    /* send response */
                    sendResponse = true;
   1213e:	2301      	movs	r3, #1
   12140:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                    break;
   12144:	e18c      	b.n	12460 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
                }

                /* move remaining data to the beginning */
                for(i=ackseq*7, j=0; i<SDO->ODF_arg.dataLength; i++, j++)
   12146:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   1214a:	4613      	mov	r3, r2
   1214c:	00db      	lsls	r3, r3, #3
   1214e:	1a9b      	subs	r3, r3, r2
   12150:	63fb      	str	r3, [r7, #60]	; 0x3c
   12152:	2300      	movs	r3, #0
   12154:	63bb      	str	r3, [r7, #56]	; 0x38
   12156:	68fb      	ldr	r3, [r7, #12]
   12158:	681b      	ldr	r3, [r3, #0]
   1215a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   1215c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1215e:	429a      	cmp	r2, r3
   12160:	d920      	bls.n	121a4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1038>
                    SDO->ODF_arg.data[j] = SDO->ODF_arg.data[i];
   12162:	68fb      	ldr	r3, [r7, #12]
   12164:	681b      	ldr	r3, [r3, #0]
   12166:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   12168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1216a:	4413      	add	r3, r2
   1216c:	68fa      	ldr	r2, [r7, #12]
   1216e:	6812      	ldr	r2, [r2, #0]
   12170:	6c51      	ldr	r1, [r2, #68]	; 0x44
   12172:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   12174:	440a      	add	r2, r1
   12176:	7812      	ldrb	r2, [r2, #0]
   12178:	701a      	strb	r2, [r3, #0]
                for(i=ackseq*7, j=0; i<SDO->ODF_arg.dataLength; i++, j++)
   1217a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1217c:	3301      	adds	r3, #1
   1217e:	63fb      	str	r3, [r7, #60]	; 0x3c
   12180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12182:	3301      	adds	r3, #1
   12184:	63bb      	str	r3, [r7, #56]	; 0x38
   12186:	e7e6      	b.n	12156 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xfea>
   12188:	00012ae5 	.word	0x00012ae5
   1218c:	05040001 	.word	0x05040001
   12190:	000110e1 	.word	0x000110e1
   12194:	05040002 	.word	0x05040002
   12198:	000105bd 	.word	0x000105bd
   1219c:	05040003 	.word	0x05040003
   121a0:	0001058d 	.word	0x0001058d

                /* set remaining data length in buffer */
                SDO->ODF_arg.dataLength -= ackseq * 7U;
   121a4:	68fb      	ldr	r3, [r7, #12]
   121a6:	6819      	ldr	r1, [r3, #0]
   121a8:	68fb      	ldr	r3, [r7, #12]
   121aa:	681b      	ldr	r3, [r3, #0]
   121ac:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   121ae:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   121b2:	4613      	mov	r3, r2
   121b4:	00db      	lsls	r3, r3, #3
   121b6:	1a9b      	subs	r3, r3, r2
   121b8:	1ac3      	subs	r3, r0, r3
   121ba:	64cb      	str	r3, [r1, #76]	; 0x4c

                /* new block size */
                SDO->blksize = SDO->CANrxData[2];
   121bc:	68fb      	ldr	r3, [r7, #12]
   121be:	681b      	ldr	r3, [r3, #0]
   121c0:	68fa      	ldr	r2, [r7, #12]
   121c2:	6812      	ldr	r2, [r2, #0]
   121c4:	7892      	ldrb	r2, [r2, #2]
   121c6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                /* If data type is domain, re-fill the data buffer if necessary and indicated so. */
                if((SDO->ODF_arg.ODdataStorage == 0) && (SDO->ODF_arg.dataLength < (SDO->blksize*7U)) && (!SDO->ODF_arg.lastSegment)){
   121ca:	68fb      	ldr	r3, [r7, #12]
   121cc:	681b      	ldr	r3, [r3, #0]
   121ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   121d0:	2b00      	cmp	r3, #0
   121d2:	d168      	bne.n	122a6 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x113a>
   121d4:	68fb      	ldr	r3, [r7, #12]
   121d6:	681b      	ldr	r3, [r3, #0]
   121d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   121da:	68fb      	ldr	r3, [r7, #12]
   121dc:	681b      	ldr	r3, [r3, #0]
   121de:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
   121e2:	4619      	mov	r1, r3
   121e4:	460b      	mov	r3, r1
   121e6:	00db      	lsls	r3, r3, #3
   121e8:	1a5b      	subs	r3, r3, r1
   121ea:	429a      	cmp	r2, r3
   121ec:	d25b      	bcs.n	122a6 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x113a>
   121ee:	68fb      	ldr	r3, [r7, #12]
   121f0:	681b      	ldr	r3, [r3, #0]
   121f2:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
   121f6:	2b00      	cmp	r3, #0
   121f8:	d155      	bne.n	122a6 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x113a>
                    /* move the beginning of the data buffer */
                    len = SDO->ODF_arg.dataLength; /* length of valid data in buffer */
   121fa:	68fb      	ldr	r3, [r7, #12]
   121fc:	681b      	ldr	r3, [r3, #0]
   121fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   12200:	643b      	str	r3, [r7, #64]	; 0x40
                    SDO->ODF_arg.data += len;
   12202:	68fb      	ldr	r3, [r7, #12]
   12204:	681b      	ldr	r3, [r3, #0]
   12206:	68fa      	ldr	r2, [r7, #12]
   12208:	6812      	ldr	r2, [r2, #0]
   1220a:	6c51      	ldr	r1, [r2, #68]	; 0x44
   1220c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1220e:	440a      	add	r2, r1
   12210:	645a      	str	r2, [r3, #68]	; 0x44
                    SDO->ODF_arg.dataLength = CO_OD_getLength( SDO->entryNo, SDO->ODF_arg.subIndex) - len;
   12212:	68fb      	ldr	r3, [r7, #12]
   12214:	681c      	ldr	r4, [r3, #0]
   12216:	68fb      	ldr	r3, [r7, #12]
   12218:	681b      	ldr	r3, [r3, #0]
   1221a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   1221c:	68fb      	ldr	r3, [r7, #12]
   1221e:	681b      	ldr	r3, [r3, #0]
   12220:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
   12224:	461a      	mov	r2, r3
   12226:	68f8      	ldr	r0, [r7, #12]
   12228:	4b9d      	ldr	r3, [pc, #628]	; (124a0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1334>)
   1222a:	4798      	blx	r3
   1222c:	4602      	mov	r2, r0
   1222e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   12230:	1ad3      	subs	r3, r2, r3
   12232:	64e3      	str	r3, [r4, #76]	; 0x4c

                    /* read next data from Object dictionary function */
                    abortCode = CO_SDO_readOD( CO_SDO_BUFFER_SIZE);
   12234:	2120      	movs	r1, #32
   12236:	68f8      	ldr	r0, [r7, #12]
   12238:	4b9a      	ldr	r3, [pc, #616]	; (124a4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1338>)
   1223a:	4798      	blx	r3
   1223c:	62b8      	str	r0, [r7, #40]	; 0x28
                    if(abortCode != 0U){
   1223e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12240:	2b00      	cmp	r3, #0
   12242:	d008      	beq.n	12256 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x10ea>
                        CO_SDO_abort(SDO, abortCode);
   12244:	68fb      	ldr	r3, [r7, #12]
   12246:	681b      	ldr	r3, [r3, #0]
   12248:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1224a:	4618      	mov	r0, r3
   1224c:	4b96      	ldr	r3, [pc, #600]	; (124a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x133c>)
   1224e:	4798      	blx	r3
                        return -1;
   12250:	f04f 33ff 	mov.w	r3, #4294967295
   12254:	e120      	b.n	12498 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                    }

                    /* calculate CRC on next bytes, if enabled */
                    if(SDO->crcEnabled){
   12256:	68fb      	ldr	r3, [r7, #12]
   12258:	681b      	ldr	r3, [r3, #0]
   1225a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
   1225e:	2b00      	cmp	r3, #0
   12260:	d010      	beq.n	12284 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1118>
                        SDO->crc = crc16_ccitt(SDO->ODF_arg.data, SDO->ODF_arg.dataLength, SDO->crc);
   12262:	68fb      	ldr	r3, [r7, #12]
   12264:	681c      	ldr	r4, [r3, #0]
   12266:	68fb      	ldr	r3, [r7, #12]
   12268:	681b      	ldr	r3, [r3, #0]
   1226a:	6c59      	ldr	r1, [r3, #68]	; 0x44
   1226c:	68fb      	ldr	r3, [r7, #12]
   1226e:	681b      	ldr	r3, [r3, #0]
   12270:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   12272:	68fb      	ldr	r3, [r7, #12]
   12274:	681b      	ldr	r3, [r3, #0]
   12276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   12278:	b29b      	uxth	r3, r3
   1227a:	68f8      	ldr	r0, [r7, #12]
   1227c:	4d8b      	ldr	r5, [pc, #556]	; (124ac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1340>)
   1227e:	47a8      	blx	r5
   12280:	4603      	mov	r3, r0
   12282:	6763      	str	r3, [r4, #116]	; 0x74
                    }

                  /* return to the original data buffer */
                    SDO->ODF_arg.data -= len;
   12284:	68fb      	ldr	r3, [r7, #12]
   12286:	681b      	ldr	r3, [r3, #0]
   12288:	68fa      	ldr	r2, [r7, #12]
   1228a:	6812      	ldr	r2, [r2, #0]
   1228c:	6c51      	ldr	r1, [r2, #68]	; 0x44
   1228e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   12290:	4252      	negs	r2, r2
   12292:	440a      	add	r2, r1
   12294:	645a      	str	r2, [r3, #68]	; 0x44
                    SDO->ODF_arg.dataLength +=  len;
   12296:	68fb      	ldr	r3, [r7, #12]
   12298:	681b      	ldr	r3, [r3, #0]
   1229a:	68fa      	ldr	r2, [r7, #12]
   1229c:	6812      	ldr	r2, [r2, #0]
   1229e:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
   122a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   122a2:	440a      	add	r2, r1
   122a4:	64da      	str	r2, [r3, #76]	; 0x4c
                }

                /* verify if SDO data buffer is large enough */
                if(((SDO->blksize*7U) > SDO->ODF_arg.dataLength) && (!SDO->ODF_arg.lastSegment)){
   122a6:	68fb      	ldr	r3, [r7, #12]
   122a8:	681b      	ldr	r3, [r3, #0]
   122aa:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
   122ae:	461a      	mov	r2, r3
   122b0:	4613      	mov	r3, r2
   122b2:	00db      	lsls	r3, r3, #3
   122b4:	1a9a      	subs	r2, r3, r2
   122b6:	68fb      	ldr	r3, [r7, #12]
   122b8:	681b      	ldr	r3, [r3, #0]
   122ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   122bc:	429a      	cmp	r2, r3
   122be:	d90e      	bls.n	122de <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1172>
   122c0:	68fb      	ldr	r3, [r7, #12]
   122c2:	681b      	ldr	r3, [r3, #0]
   122c4:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
   122c8:	2b00      	cmp	r3, #0
   122ca:	d108      	bne.n	122de <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1172>
                    CO_SDO_abort(SDO, CO_SDO_AB_BLOCK_SIZE); /* Invalid block size (block mode only). */
   122cc:	68fb      	ldr	r3, [r7, #12]
   122ce:	681b      	ldr	r3, [r3, #0]
   122d0:	4977      	ldr	r1, [pc, #476]	; (124b0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1344>)
   122d2:	4618      	mov	r0, r3
   122d4:	4b74      	ldr	r3, [pc, #464]	; (124a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x133c>)
   122d6:	4798      	blx	r3
                    return -1;
   122d8:	f04f 33ff 	mov.w	r3, #4294967295
   122dc:	e0dc      	b.n	12498 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                }

                SDO->bufferOffset = 0U;
   122de:	68fb      	ldr	r3, [r7, #12]
   122e0:	681b      	ldr	r3, [r3, #0]
   122e2:	2200      	movs	r2, #0
   122e4:	639a      	str	r2, [r3, #56]	; 0x38
                SDO->sequence = 0U;
   122e6:	68fb      	ldr	r3, [r7, #12]
   122e8:	681b      	ldr	r3, [r3, #0]
   122ea:	2200      	movs	r2, #0
   122ec:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                SDO->endOfTransfer = false;
   122f0:	68fb      	ldr	r3, [r7, #12]
   122f2:	681b      	ldr	r3, [r3, #0]
   122f4:	2200      	movs	r2, #0
   122f6:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

                /* clear flag here */
                SDO->CANrxNew = false;
   122fa:	68fb      	ldr	r3, [r7, #12]
   122fc:	681b      	ldr	r3, [r3, #0]
   122fe:	2200      	movs	r2, #0
   12300:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
            }

            /* return, if all segments was already transfered or on end of transfer */
            if((SDO->sequence == SDO->blksize) || (SDO->endOfTransfer)){
   12304:	68fb      	ldr	r3, [r7, #12]
   12306:	681b      	ldr	r3, [r3, #0]
   12308:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
   1230c:	68fb      	ldr	r3, [r7, #12]
   1230e:	681b      	ldr	r3, [r3, #0]
   12310:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
   12314:	429a      	cmp	r2, r3
   12316:	d005      	beq.n	12324 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x11b8>
   12318:	68fb      	ldr	r3, [r7, #12]
   1231a:	681b      	ldr	r3, [r3, #0]
   1231c:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
   12320:	2b00      	cmp	r3, #0
   12322:	d001      	beq.n	12328 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x11bc>
                return 1;/* don't clear the SDO->CANrxNew flag, so return directly */
   12324:	2301      	movs	r3, #1
   12326:	e0b7      	b.n	12498 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            /* reset timeout */
            SDO->timeoutTimer = 0;
   12328:	68fb      	ldr	r3, [r7, #12]
   1232a:	681b      	ldr	r3, [r3, #0]
   1232c:	2200      	movs	r2, #0
   1232e:	66da      	str	r2, [r3, #108]	; 0x6c

            /* calculate length to be sent */
            len = SDO->ODF_arg.dataLength - SDO->bufferOffset;
   12330:	68fb      	ldr	r3, [r7, #12]
   12332:	681b      	ldr	r3, [r3, #0]
   12334:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   12336:	68fb      	ldr	r3, [r7, #12]
   12338:	681b      	ldr	r3, [r3, #0]
   1233a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1233c:	1ad3      	subs	r3, r2, r3
   1233e:	643b      	str	r3, [r7, #64]	; 0x40
            if(len > 7U){
   12340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   12342:	2b07      	cmp	r3, #7
   12344:	d901      	bls.n	1234a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x11de>
                len = 7U;
   12346:	2307      	movs	r3, #7
   12348:	643b      	str	r3, [r7, #64]	; 0x40
            }

            /* fill response data bytes */
            for(i=0U; i<len; i++){
   1234a:	2300      	movs	r3, #0
   1234c:	63fb      	str	r3, [r7, #60]	; 0x3c
   1234e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   12350:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   12352:	429a      	cmp	r2, r3
   12354:	d215      	bcs.n	12382 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1216>
                SDO->CANtxBuff->data[i+1] = SDO->ODF_arg.data[SDO->bufferOffset++];
   12356:	68fb      	ldr	r3, [r7, #12]
   12358:	681b      	ldr	r3, [r3, #0]
   1235a:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   1235e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12360:	1c59      	adds	r1, r3, #1
   12362:	68fb      	ldr	r3, [r7, #12]
   12364:	681b      	ldr	r3, [r3, #0]
   12366:	6c5c      	ldr	r4, [r3, #68]	; 0x44
   12368:	68fb      	ldr	r3, [r7, #12]
   1236a:	681a      	ldr	r2, [r3, #0]
   1236c:	6b93      	ldr	r3, [r2, #56]	; 0x38
   1236e:	1c5d      	adds	r5, r3, #1
   12370:	6395      	str	r5, [r2, #56]	; 0x38
   12372:	4423      	add	r3, r4
   12374:	781a      	ldrb	r2, [r3, #0]
   12376:	1843      	adds	r3, r0, r1
   12378:	715a      	strb	r2, [r3, #5]
            for(i=0U; i<len; i++){
   1237a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1237c:	3301      	adds	r3, #1
   1237e:	63fb      	str	r3, [r7, #60]	; 0x3c
   12380:	e7e5      	b.n	1234e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x11e2>
            }

            /* first response byte */
            SDO->CANtxBuff->data[0] = ++SDO->sequence;
   12382:	68fb      	ldr	r3, [r7, #12]
   12384:	681b      	ldr	r3, [r3, #0]
   12386:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
   1238a:	68fb      	ldr	r3, [r7, #12]
   1238c:	681b      	ldr	r3, [r3, #0]
   1238e:	f893 106a 	ldrb.w	r1, [r3, #106]	; 0x6a
   12392:	3101      	adds	r1, #1
   12394:	b2c9      	uxtb	r1, r1
   12396:	f883 106a 	strb.w	r1, [r3, #106]	; 0x6a
   1239a:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   1239e:	7153      	strb	r3, [r2, #5]

            /* verify end of transfer */
            if((SDO->bufferOffset == SDO->ODF_arg.dataLength) && (SDO->ODF_arg.lastSegment)){
   123a0:	68fb      	ldr	r3, [r7, #12]
   123a2:	681b      	ldr	r3, [r3, #0]
   123a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   123a6:	68fb      	ldr	r3, [r7, #12]
   123a8:	681b      	ldr	r3, [r3, #0]
   123aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   123ac:	429a      	cmp	r2, r3
   123ae:	d125      	bne.n	123fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1290>
   123b0:	68fb      	ldr	r3, [r7, #12]
   123b2:	681b      	ldr	r3, [r3, #0]
   123b4:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
   123b8:	2b00      	cmp	r3, #0
   123ba:	d01f      	beq.n	123fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1290>
                SDO->CANtxBuff->data[0] |= 0x80;
   123bc:	68fb      	ldr	r3, [r7, #12]
   123be:	681b      	ldr	r3, [r3, #0]
   123c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   123c4:	68fa      	ldr	r2, [r7, #12]
   123c6:	6812      	ldr	r2, [r2, #0]
   123c8:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
   123cc:	7952      	ldrb	r2, [r2, #5]
   123ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
   123d2:	b2d2      	uxtb	r2, r2
   123d4:	715a      	strb	r2, [r3, #5]
                SDO->lastLen = len;
   123d6:	68fb      	ldr	r3, [r7, #12]
   123d8:	681b      	ldr	r3, [r3, #0]
   123da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   123dc:	b2d2      	uxtb	r2, r2
   123de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                SDO->blksize = SDO->sequence;
   123e2:	68fb      	ldr	r3, [r7, #12]
   123e4:	681b      	ldr	r3, [r3, #0]
   123e6:	68fa      	ldr	r2, [r7, #12]
   123e8:	6812      	ldr	r2, [r2, #0]
   123ea:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
   123ee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                SDO->endOfTransfer = true;
   123f2:	68fb      	ldr	r3, [r7, #12]
   123f4:	681b      	ldr	r3, [r3, #0]
   123f6:	2201      	movs	r2, #1
   123f8:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
            }

            /* send response */
             ptrCODriverClass->CAN_Send(SDO->CANtxBuff);
   123fc:	4b2d      	ldr	r3, [pc, #180]	; (124b4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1348>)
   123fe:	681a      	ldr	r2, [r3, #0]
   12400:	68fb      	ldr	r3, [r7, #12]
   12402:	681b      	ldr	r3, [r3, #0]
   12404:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   12408:	4619      	mov	r1, r3
   1240a:	4610      	mov	r0, r2
   1240c:	4b2a      	ldr	r3, [pc, #168]	; (124b8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x134c>)
   1240e:	4798      	blx	r3

            /* Set timerNext_ms to 0 to inform OS to call this function again without delay. */
            if(timerNext_ms != NULL){
   12410:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12412:	2b00      	cmp	r3, #0
   12414:	d002      	beq.n	1241c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12b0>
                *timerNext_ms = 0;
   12416:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12418:	2200      	movs	r2, #0
   1241a:	601a      	str	r2, [r3, #0]
            }

            /* don't clear the SDO->CANrxNew flag, so return directly */
            return 1;
   1241c:	2301      	movs	r3, #1
   1241e:	e03b      	b.n	12498 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
        }

        case CO_SDO_ST_UPLOAD_BL_END:{
            /* verify client command specifier */
            if((SDO->CANrxData[0]&0xE1U) != 0xA1U){
   12420:	68fb      	ldr	r3, [r7, #12]
   12422:	681b      	ldr	r3, [r3, #0]
   12424:	781b      	ldrb	r3, [r3, #0]
   12426:	f003 03e1 	and.w	r3, r3, #225	; 0xe1
   1242a:	2ba1      	cmp	r3, #161	; 0xa1
   1242c:	d008      	beq.n	12440 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12d4>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
   1242e:	68fb      	ldr	r3, [r7, #12]
   12430:	681b      	ldr	r3, [r3, #0]
   12432:	4922      	ldr	r1, [pc, #136]	; (124bc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1350>)
   12434:	4618      	mov	r0, r3
   12436:	4b1c      	ldr	r3, [pc, #112]	; (124a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x133c>)
   12438:	4798      	blx	r3
                return -1;
   1243a:	f04f 33ff 	mov.w	r3, #4294967295
   1243e:	e02b      	b.n	12498 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            SDO->state = CO_SDO_ST_IDLE;
   12440:	68fb      	ldr	r3, [r7, #12]
   12442:	681b      	ldr	r3, [r3, #0]
   12444:	2200      	movs	r2, #0
   12446:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            break;
   1244a:	e009      	b.n	12460 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
        }

        default:{
            CO_SDO_abort(SDO, CO_SDO_AB_DEVICE_INCOMPAT);/* general internal incompatibility in the device */
   1244c:	68fb      	ldr	r3, [r7, #12]
   1244e:	681b      	ldr	r3, [r3, #0]
   12450:	491b      	ldr	r1, [pc, #108]	; (124c0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1354>)
   12452:	4618      	mov	r0, r3
   12454:	4b14      	ldr	r3, [pc, #80]	; (124a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x133c>)
   12456:	4798      	blx	r3
            return -1;
   12458:	f04f 33ff 	mov.w	r3, #4294967295
   1245c:	e01c      	b.n	12498 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            break;
   1245e:	bf00      	nop
        }
    }

    /* free buffer and send message */
    SDO->CANrxNew = false;
   12460:	68fb      	ldr	r3, [r7, #12]
   12462:	681b      	ldr	r3, [r3, #0]
   12464:	2200      	movs	r2, #0
   12466:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
    if(sendResponse) {
   1246a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
   1246e:	2b00      	cmp	r3, #0
   12470:	d009      	beq.n	12486 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x131a>
        ptrCODriverClass->CAN_Send(SDO->CANtxBuff);
   12472:	4b10      	ldr	r3, [pc, #64]	; (124b4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1348>)
   12474:	681a      	ldr	r2, [r3, #0]
   12476:	68fb      	ldr	r3, [r7, #12]
   12478:	681b      	ldr	r3, [r3, #0]
   1247a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   1247e:	4619      	mov	r1, r3
   12480:	4610      	mov	r0, r2
   12482:	4b0d      	ldr	r3, [pc, #52]	; (124b8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x134c>)
   12484:	4798      	blx	r3
    }

    if(SDO->state != CO_SDO_ST_IDLE){
   12486:	68fb      	ldr	r3, [r7, #12]
   12488:	681b      	ldr	r3, [r3, #0]
   1248a:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   1248e:	2b00      	cmp	r3, #0
   12490:	d001      	beq.n	12496 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132a>
        return 1;
   12492:	2301      	movs	r3, #1
   12494:	e000      	b.n	12498 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
    }

    return 0;
   12496:	2300      	movs	r3, #0
}
   12498:	4618      	mov	r0, r3
   1249a:	3748      	adds	r7, #72	; 0x48
   1249c:	46bd      	mov	sp, r7
   1249e:	bdb0      	pop	{r4, r5, r7, pc}
   124a0:	00010ad1 	.word	0x00010ad1
   124a4:	00010e8d 	.word	0x00010e8d
   124a8:	000110e1 	.word	0x000110e1
   124ac:	00012ae5 	.word	0x00012ae5
   124b0:	05040002 	.word	0x05040002
   124b4:	20001934 	.word	0x20001934
   124b8:	0000d885 	.word	0x0000d885
   124bc:	05040001 	.word	0x05040001
   124c0:	06040047 	.word	0x06040047

000124c4 <_ZN13CO_SYNC_ClassC1Ev>:

#include "CO_SYNC_Class.h"
#include "CO_Driver_Class.h"

// default constructor
CO_SYNC_Class::CO_SYNC_Class()
   124c4:	b480      	push	{r7}
   124c6:	b083      	sub	sp, #12
   124c8:	af00      	add	r7, sp, #0
   124ca:	6078      	str	r0, [r7, #4]
{
} //CO_SYNC_Class
   124cc:	687b      	ldr	r3, [r7, #4]
   124ce:	4618      	mov	r0, r3
   124d0:	370c      	adds	r7, #12
   124d2:	46bd      	mov	sp, r7
   124d4:	bc80      	pop	{r7}
   124d6:	4770      	bx	lr

000124d8 <_ZN13CO_SYNC_ClassD1Ev>:

// default destructor
CO_SYNC_Class::~CO_SYNC_Class()
   124d8:	b480      	push	{r7}
   124da:	b083      	sub	sp, #12
   124dc:	af00      	add	r7, sp, #0
   124de:	6078      	str	r0, [r7, #4]
{
} //~CO_SYNC_Class
   124e0:	687b      	ldr	r3, [r7, #4]
   124e2:	4618      	mov	r0, r3
   124e4:	370c      	adds	r7, #12
   124e6:	46bd      	mov	sp, r7
   124e8:	bc80      	pop	{r7}
   124ea:	4770      	bx	lr

000124ec <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SYNC_receive(void *object, const CO_CANrxMsg_t *msg){
   124ec:	b480      	push	{r7}
   124ee:	b085      	sub	sp, #20
   124f0:	af00      	add	r7, sp, #0
   124f2:	6078      	str	r0, [r7, #4]
   124f4:	6039      	str	r1, [r7, #0]
	
    CO_SYNC_t *SYNC;
    uint8_t operState;

    SYNC = (CO_SYNC_t*)object;   /* this is the correct pointer type of the first argument */
   124f6:	687b      	ldr	r3, [r7, #4]
   124f8:	60fb      	str	r3, [r7, #12]
    operState = *SYNC->operatingState;
   124fa:	68fb      	ldr	r3, [r7, #12]
   124fc:	685b      	ldr	r3, [r3, #4]
   124fe:	781b      	ldrb	r3, [r3, #0]
   12500:	72fb      	strb	r3, [r7, #11]

    if((operState == CO_NMT_OPERATIONAL) || (operState == CO_NMT_PRE_OPERATIONAL)){
   12502:	7afb      	ldrb	r3, [r7, #11]
   12504:	2b05      	cmp	r3, #5
   12506:	d002      	beq.n	1250e <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x22>
   12508:	7afb      	ldrb	r3, [r7, #11]
   1250a:	2b7f      	cmp	r3, #127	; 0x7f
   1250c:	d132      	bne.n	12574 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x88>
        if(SYNC->counterOverflowValue == 0){
   1250e:	68fb      	ldr	r3, [r7, #12]
   12510:	7e1b      	ldrb	r3, [r3, #24]
   12512:	2b00      	cmp	r3, #0
   12514:	d10e      	bne.n	12534 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x48>
            if(msg->DLC == 0U){
   12516:	683b      	ldr	r3, [r7, #0]
   12518:	7d1b      	ldrb	r3, [r3, #20]
   1251a:	2b00      	cmp	r3, #0
   1251c:	d103      	bne.n	12526 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x3a>
                SYNC->CANrxNew = true;
   1251e:	68fb      	ldr	r3, [r7, #12]
   12520:	2201      	movs	r2, #1
   12522:	769a      	strb	r2, [r3, #26]
   12524:	e018      	b.n	12558 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x6c>
            }
            else{
                SYNC->receiveError = (uint32_t)msg->DLC | 0x0100U;
   12526:	683b      	ldr	r3, [r7, #0]
   12528:	7d1b      	ldrb	r3, [r3, #20]
   1252a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
   1252e:	68fb      	ldr	r3, [r7, #12]
   12530:	625a      	str	r2, [r3, #36]	; 0x24
   12532:	e011      	b.n	12558 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x6c>
            }
        }
        else{
            if(msg->DLC == 1U){
   12534:	683b      	ldr	r3, [r7, #0]
   12536:	7d1b      	ldrb	r3, [r3, #20]
   12538:	2b01      	cmp	r3, #1
   1253a:	d107      	bne.n	1254c <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x60>
                SYNC->counter = msg->data[0];
   1253c:	683b      	ldr	r3, [r7, #0]
   1253e:	7d5a      	ldrb	r2, [r3, #21]
   12540:	68fb      	ldr	r3, [r7, #12]
   12542:	771a      	strb	r2, [r3, #28]
                SYNC->CANrxNew = true;
   12544:	68fb      	ldr	r3, [r7, #12]
   12546:	2201      	movs	r2, #1
   12548:	769a      	strb	r2, [r3, #26]
   1254a:	e005      	b.n	12558 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x6c>
            }
            else{
                SYNC->receiveError = (uint32_t)msg->DLC | 0x0200U;
   1254c:	683b      	ldr	r3, [r7, #0]
   1254e:	7d1b      	ldrb	r3, [r3, #20]
   12550:	f443 7200 	orr.w	r2, r3, #512	; 0x200
   12554:	68fb      	ldr	r3, [r7, #12]
   12556:	625a      	str	r2, [r3, #36]	; 0x24
            }
        }
        if(SYNC->CANrxNew) {
   12558:	68fb      	ldr	r3, [r7, #12]
   1255a:	7e9b      	ldrb	r3, [r3, #26]
   1255c:	2b00      	cmp	r3, #0
   1255e:	d009      	beq.n	12574 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x88>
            SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
   12560:	68fb      	ldr	r3, [r7, #12]
   12562:	7edb      	ldrb	r3, [r3, #27]
   12564:	2b00      	cmp	r3, #0
   12566:	bf0c      	ite	eq
   12568:	2301      	moveq	r3, #1
   1256a:	2300      	movne	r3, #0
   1256c:	b2db      	uxtb	r3, r3
   1256e:	461a      	mov	r2, r3
   12570:	68fb      	ldr	r3, [r7, #12]
   12572:	76da      	strb	r2, [r3, #27]
        }
    }
}
   12574:	bf00      	nop
   12576:	3714      	adds	r7, #20
   12578:	46bd      	mov	sp, r7
   1257a:	bc80      	pop	{r7}
   1257c:	4770      	bx	lr
	...

00012580 <_ZL11CO_ODF_1005P12CO_ODF_arg_t>:
/*
 * Function for accessing _COB ID SYNC Message_ (index 0x1005) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1005(CO_ODF_arg_t *ODF_arg){
   12580:	b590      	push	{r4, r7, lr}
   12582:	b08b      	sub	sp, #44	; 0x2c
   12584:	af04      	add	r7, sp, #16
   12586:	6078      	str	r0, [r7, #4]
    CO_SYNC_t *SYNC;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
   12588:	2300      	movs	r3, #0
   1258a:	617b      	str	r3, [r7, #20]

    SYNC = (CO_SYNC_t*) ODF_arg->object;
   1258c:	687b      	ldr	r3, [r7, #4]
   1258e:	681b      	ldr	r3, [r3, #0]
   12590:	60fb      	str	r3, [r7, #12]
    value =ptrCODriverClass->CO_getUint32(ODF_arg->data);
   12592:	4b35      	ldr	r3, [pc, #212]	; (12668 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xe8>)
   12594:	681b      	ldr	r3, [r3, #0]
   12596:	1d1a      	adds	r2, r3, #4
   12598:	687b      	ldr	r3, [r7, #4]
   1259a:	685b      	ldr	r3, [r3, #4]
   1259c:	4619      	mov	r1, r3
   1259e:	4610      	mov	r0, r2
   125a0:	4b32      	ldr	r3, [pc, #200]	; (1266c <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xec>)
   125a2:	4798      	blx	r3
   125a4:	60b8      	str	r0, [r7, #8]

    if(!ODF_arg->reading){
   125a6:	687b      	ldr	r3, [r7, #4]
   125a8:	7f5b      	ldrb	r3, [r3, #29]
   125aa:	2b00      	cmp	r3, #0
   125ac:	d157      	bne.n	1265e <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xde>
        uint8_t configureSyncProducer = 0;
   125ae:	2300      	movs	r3, #0
   125b0:	74fb      	strb	r3, [r7, #19]

        /* only 11-bit CAN identifier is supported */
        if(value & 0x20000000UL){
   125b2:	68bb      	ldr	r3, [r7, #8]
   125b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
   125b8:	2b00      	cmp	r3, #0
   125ba:	d002      	beq.n	125c2 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x42>
            ret = CO_SDO_AB_INVALID_VALUE;
   125bc:	4b2c      	ldr	r3, [pc, #176]	; (12670 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xf0>)
   125be:	617b      	str	r3, [r7, #20]
   125c0:	e00d      	b.n	125de <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x5e>
        }
        else{
            /* is 'generate Sync messge' bit set? */
            if(value & 0x40000000UL){
   125c2:	68bb      	ldr	r3, [r7, #8]
   125c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
   125c8:	2b00      	cmp	r3, #0
   125ca:	d008      	beq.n	125de <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x5e>
                /* if bit was set before, value can not be changed */
                if(SYNC->isProducer){
   125cc:	68fb      	ldr	r3, [r7, #12]
   125ce:	7a1b      	ldrb	r3, [r3, #8]
   125d0:	2b00      	cmp	r3, #0
   125d2:	d002      	beq.n	125da <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x5a>
                    ret = CO_SDO_AB_DATA_DEV_STATE;
   125d4:	4b27      	ldr	r3, [pc, #156]	; (12674 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xf4>)
   125d6:	617b      	str	r3, [r7, #20]
   125d8:	e001      	b.n	125de <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x5e>
                }
                else{
                    configureSyncProducer = 1;
   125da:	2301      	movs	r3, #1
   125dc:	74fb      	strb	r3, [r7, #19]
                }
            }
        }

        /* configure sync producer and consumer */
        if(ret == CO_SDO_AB_NONE){
   125de:	697b      	ldr	r3, [r7, #20]
   125e0:	2b00      	cmp	r3, #0
   125e2:	d13c      	bne.n	1265e <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xde>
            SYNC->COB_ID = (uint32_t)(value & 0x7FFU);
   125e4:	68bb      	ldr	r3, [r7, #8]
   125e6:	f3c3 020a 	ubfx	r2, r3, #0, #11
   125ea:	68fb      	ldr	r3, [r7, #12]
   125ec:	60da      	str	r2, [r3, #12]

            if(configureSyncProducer){
   125ee:	7cfb      	ldrb	r3, [r7, #19]
   125f0:	2b00      	cmp	r3, #0
   125f2:	d021      	beq.n	12638 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xb8>
                uint8_t len = 0U;
   125f4:	2300      	movs	r3, #0
   125f6:	74bb      	strb	r3, [r7, #18]
                if(SYNC->counterOverflowValue != 0U){
   125f8:	68fb      	ldr	r3, [r7, #12]
   125fa:	7e1b      	ldrb	r3, [r3, #24]
   125fc:	2b00      	cmp	r3, #0
   125fe:	d007      	beq.n	12610 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x90>
                    len = 1U;
   12600:	2301      	movs	r3, #1
   12602:	74bb      	strb	r3, [r7, #18]
                    SYNC->counter = 0U;
   12604:	68fb      	ldr	r3, [r7, #12]
   12606:	2200      	movs	r2, #0
   12608:	771a      	strb	r2, [r3, #28]
                    SYNC->timer = 0U;
   1260a:	68fb      	ldr	r3, [r7, #12]
   1260c:	2200      	movs	r2, #0
   1260e:	621a      	str	r2, [r3, #32]
                }
                SYNC->CANtxBuff = ptrCODriverClass->CAN_Tx_BufferInit(
   12610:	4b15      	ldr	r3, [pc, #84]	; (12668 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xe8>)
   12612:	6818      	ldr	r0, [r3, #0]
   12614:	68fb      	ldr	r3, [r7, #12]
   12616:	6b99      	ldr	r1, [r3, #56]	; 0x38
   12618:	68fb      	ldr	r3, [r7, #12]
   1261a:	68da      	ldr	r2, [r3, #12]
   1261c:	2300      	movs	r3, #0
   1261e:	9301      	str	r3, [sp, #4]
   12620:	7cbb      	ldrb	r3, [r7, #18]
   12622:	9300      	str	r3, [sp, #0]
   12624:	2300      	movs	r3, #0
   12626:	4c14      	ldr	r4, [pc, #80]	; (12678 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xf8>)
   12628:	47a0      	blx	r4
   1262a:	4602      	mov	r2, r0
   1262c:	68fb      	ldr	r3, [r7, #12]
   1262e:	635a      	str	r2, [r3, #52]	; 0x34
                        SYNC->CANdevTxIdx,      /* index of specific buffer inside CAN module */
                        SYNC->COB_ID,           /* CAN identifier */
                        0,                      /* rtr */
                        len,                    /* number of data bytes */
                        0);                     /* synchronous message flag bit */
                SYNC->isProducer = true;
   12630:	68fb      	ldr	r3, [r7, #12]
   12632:	2201      	movs	r2, #1
   12634:	721a      	strb	r2, [r3, #8]
   12636:	e002      	b.n	1263e <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xbe>
            }
            else{
                SYNC->isProducer = false;
   12638:	68fb      	ldr	r3, [r7, #12]
   1263a:	2200      	movs	r2, #0
   1263c:	721a      	strb	r2, [r3, #8]
            }

            ptrCODriverClass->CAN_Rx_BufferInit(
   1263e:	4b0a      	ldr	r3, [pc, #40]	; (12668 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xe8>)
   12640:	6818      	ldr	r0, [r3, #0]
   12642:	68fb      	ldr	r3, [r7, #12]
   12644:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   12646:	68fb      	ldr	r3, [r7, #12]
   12648:	68da      	ldr	r2, [r3, #12]
                    SYNC->CANdevRxIdx,      /* rx buffer index */
                    SYNC->COB_ID,           /* CAN identifier */
                    0x7FF,                  /* mask */
                    0,                      /* rtr */
                    (void*)SYNC,            /* object passed to receive function */
                    CO_SYNC_receive);       /* this function will process received message */
   1264a:	4b0c      	ldr	r3, [pc, #48]	; (1267c <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xfc>)
   1264c:	9302      	str	r3, [sp, #8]
   1264e:	68fb      	ldr	r3, [r7, #12]
   12650:	9301      	str	r3, [sp, #4]
   12652:	2300      	movs	r3, #0
   12654:	9300      	str	r3, [sp, #0]
   12656:	f240 73ff 	movw	r3, #2047	; 0x7ff
   1265a:	4c09      	ldr	r4, [pc, #36]	; (12680 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x100>)
   1265c:	47a0      	blx	r4
        }
    }

    return ret;
   1265e:	697b      	ldr	r3, [r7, #20]
}
   12660:	4618      	mov	r0, r3
   12662:	371c      	adds	r7, #28
   12664:	46bd      	mov	sp, r7
   12666:	bd90      	pop	{r4, r7, pc}
   12668:	20001934 	.word	0x20001934
   1266c:	00010521 	.word	0x00010521
   12670:	06090030 	.word	0x06090030
   12674:	08000022 	.word	0x08000022
   12678:	0000d7d9 	.word	0x0000d7d9
   1267c:	000124ed 	.word	0x000124ed
   12680:	0000d6dd 	.word	0x0000d6dd

00012684 <_ZL11CO_ODF_1006P12CO_ODF_arg_t>:
/*
 * Function for accessing _Communication cycle period_ (index 0x1006) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1006(CO_ODF_arg_t *ODF_arg){
   12684:	b580      	push	{r7, lr}
   12686:	b086      	sub	sp, #24
   12688:	af00      	add	r7, sp, #0
   1268a:	6078      	str	r0, [r7, #4]
    CO_SYNC_t *SYNC;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
   1268c:	2300      	movs	r3, #0
   1268e:	617b      	str	r3, [r7, #20]

    SYNC = (CO_SYNC_t*) ODF_arg->object;
   12690:	687b      	ldr	r3, [r7, #4]
   12692:	681b      	ldr	r3, [r3, #0]
   12694:	613b      	str	r3, [r7, #16]
    value = ptrCODriverClass->CO_getUint32(ODF_arg->data);
   12696:	4b19      	ldr	r3, [pc, #100]	; (126fc <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x78>)
   12698:	681b      	ldr	r3, [r3, #0]
   1269a:	1d1a      	adds	r2, r3, #4
   1269c:	687b      	ldr	r3, [r7, #4]
   1269e:	685b      	ldr	r3, [r3, #4]
   126a0:	4619      	mov	r1, r3
   126a2:	4610      	mov	r0, r2
   126a4:	4b16      	ldr	r3, [pc, #88]	; (12700 <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x7c>)
   126a6:	4798      	blx	r3
   126a8:	60f8      	str	r0, [r7, #12]

    if(!ODF_arg->reading){
   126aa:	687b      	ldr	r3, [r7, #4]
   126ac:	7f5b      	ldrb	r3, [r3, #29]
   126ae:	2b00      	cmp	r3, #0
   126b0:	d11f      	bne.n	126f2 <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x6e>
        /* period transition from 0 to something */
        if((SYNC->periodTime == 0) && (value != 0)){
   126b2:	693b      	ldr	r3, [r7, #16]
   126b4:	691b      	ldr	r3, [r3, #16]
   126b6:	2b00      	cmp	r3, #0
   126b8:	d105      	bne.n	126c6 <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x42>
   126ba:	68fb      	ldr	r3, [r7, #12]
   126bc:	2b00      	cmp	r3, #0
   126be:	d002      	beq.n	126c6 <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x42>
            SYNC->counter = 0;
   126c0:	693b      	ldr	r3, [r7, #16]
   126c2:	2200      	movs	r2, #0
   126c4:	771a      	strb	r2, [r3, #28]
        }

        SYNC->periodTime = value;
   126c6:	693b      	ldr	r3, [r7, #16]
   126c8:	68fa      	ldr	r2, [r7, #12]
   126ca:	611a      	str	r2, [r3, #16]
        SYNC->periodTimeoutTime = (value / 2U) * 3U;
   126cc:	68fb      	ldr	r3, [r7, #12]
   126ce:	085a      	lsrs	r2, r3, #1
   126d0:	4613      	mov	r3, r2
   126d2:	005b      	lsls	r3, r3, #1
   126d4:	441a      	add	r2, r3
   126d6:	693b      	ldr	r3, [r7, #16]
   126d8:	615a      	str	r2, [r3, #20]
        /* overflow? */
        if(SYNC->periodTimeoutTime < value){
   126da:	693b      	ldr	r3, [r7, #16]
   126dc:	695a      	ldr	r2, [r3, #20]
   126de:	68fb      	ldr	r3, [r7, #12]
   126e0:	429a      	cmp	r2, r3
   126e2:	d203      	bcs.n	126ec <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x68>
            SYNC->periodTimeoutTime = 0xFFFFFFFFUL;
   126e4:	693b      	ldr	r3, [r7, #16]
   126e6:	f04f 32ff 	mov.w	r2, #4294967295
   126ea:	615a      	str	r2, [r3, #20]
        }

        SYNC->timer = 0;
   126ec:	693b      	ldr	r3, [r7, #16]
   126ee:	2200      	movs	r2, #0
   126f0:	621a      	str	r2, [r3, #32]
    }

    return ret;
   126f2:	697b      	ldr	r3, [r7, #20]
}
   126f4:	4618      	mov	r0, r3
   126f6:	3718      	adds	r7, #24
   126f8:	46bd      	mov	sp, r7
   126fa:	bd80      	pop	{r7, pc}
   126fc:	20001934 	.word	0x20001934
   12700:	00010521 	.word	0x00010521

00012704 <_ZL11CO_ODF_1019P12CO_ODF_arg_t>:
/**
 * Function for accessing _Synchronous counter overflow value_ (index 0x1019) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1019(CO_ODF_arg_t *ODF_arg){
   12704:	b590      	push	{r4, r7, lr}
   12706:	b089      	sub	sp, #36	; 0x24
   12708:	af02      	add	r7, sp, #8
   1270a:	6078      	str	r0, [r7, #4]
    CO_SYNC_t *SYNC;
    uint8_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
   1270c:	2300      	movs	r3, #0
   1270e:	617b      	str	r3, [r7, #20]

    SYNC = (CO_SYNC_t*) ODF_arg->object;
   12710:	687b      	ldr	r3, [r7, #4]
   12712:	681b      	ldr	r3, [r3, #0]
   12714:	60fb      	str	r3, [r7, #12]
    value = ODF_arg->data[0];
   12716:	687b      	ldr	r3, [r7, #4]
   12718:	685b      	ldr	r3, [r3, #4]
   1271a:	781b      	ldrb	r3, [r3, #0]
   1271c:	72fb      	strb	r3, [r7, #11]

    if(!ODF_arg->reading){
   1271e:	687b      	ldr	r3, [r7, #4]
   12720:	7f5b      	ldrb	r3, [r3, #29]
   12722:	2b00      	cmp	r3, #0
   12724:	d12c      	bne.n	12780 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x7c>
        uint8_t len = 0U;
   12726:	2300      	movs	r3, #0
   12728:	74fb      	strb	r3, [r7, #19]

        if(SYNC->periodTime){
   1272a:	68fb      	ldr	r3, [r7, #12]
   1272c:	691b      	ldr	r3, [r3, #16]
   1272e:	2b00      	cmp	r3, #0
   12730:	d002      	beq.n	12738 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x34>
            ret = CO_SDO_AB_DATA_DEV_STATE;
   12732:	4b16      	ldr	r3, [pc, #88]	; (1278c <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x88>)
   12734:	617b      	str	r3, [r7, #20]
   12736:	e023      	b.n	12780 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x7c>
        }
        else if((value == 1) || (value > 240 && value <= 255)){
   12738:	7afb      	ldrb	r3, [r7, #11]
   1273a:	2b01      	cmp	r3, #1
   1273c:	d005      	beq.n	1274a <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x46>
   1273e:	7afb      	ldrb	r3, [r7, #11]
   12740:	2bf0      	cmp	r3, #240	; 0xf0
   12742:	dd05      	ble.n	12750 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x4c>
   12744:	7afb      	ldrb	r3, [r7, #11]
   12746:	2bff      	cmp	r3, #255	; 0xff
   12748:	dc02      	bgt.n	12750 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x4c>
            ret = CO_SDO_AB_INVALID_VALUE;
   1274a:	4b11      	ldr	r3, [pc, #68]	; (12790 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x8c>)
   1274c:	617b      	str	r3, [r7, #20]
   1274e:	e017      	b.n	12780 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x7c>
        }
        else{
            SYNC->counterOverflowValue = value;
   12750:	68fb      	ldr	r3, [r7, #12]
   12752:	7afa      	ldrb	r2, [r7, #11]
   12754:	761a      	strb	r2, [r3, #24]
            if(value != 0){
   12756:	7afb      	ldrb	r3, [r7, #11]
   12758:	2b00      	cmp	r3, #0
   1275a:	d001      	beq.n	12760 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x5c>
                len = 1U;
   1275c:	2301      	movs	r3, #1
   1275e:	74fb      	strb	r3, [r7, #19]
            }

            SYNC->CANtxBuff =ptrCODriverClass->CAN_Tx_BufferInit(
   12760:	4b0c      	ldr	r3, [pc, #48]	; (12794 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x90>)
   12762:	6818      	ldr	r0, [r3, #0]
   12764:	68fb      	ldr	r3, [r7, #12]
   12766:	6b99      	ldr	r1, [r3, #56]	; 0x38
   12768:	68fb      	ldr	r3, [r7, #12]
   1276a:	68da      	ldr	r2, [r3, #12]
   1276c:	2300      	movs	r3, #0
   1276e:	9301      	str	r3, [sp, #4]
   12770:	7cfb      	ldrb	r3, [r7, #19]
   12772:	9300      	str	r3, [sp, #0]
   12774:	2300      	movs	r3, #0
   12776:	4c08      	ldr	r4, [pc, #32]	; (12798 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x94>)
   12778:	47a0      	blx	r4
   1277a:	4602      	mov	r2, r0
   1277c:	68fb      	ldr	r3, [r7, #12]
   1277e:	635a      	str	r2, [r3, #52]	; 0x34
                    len,                    /* number of data bytes */
                    0);                     /* synchronous message flag bit */
        }
    }

    return ret;
   12780:	697b      	ldr	r3, [r7, #20]
}
   12782:	4618      	mov	r0, r3
   12784:	371c      	adds	r7, #28
   12786:	46bd      	mov	sp, r7
   12788:	bd90      	pop	{r4, r7, pc}
   1278a:	bf00      	nop
   1278c:	08000022 	.word	0x08000022
   12790:	06090030 	.word	0x06090030
   12794:	20001934 	.word	0x20001934
   12798:	0000d7d9 	.word	0x0000d7d9

0001279c <_ZN13CO_SYNC_Class12CO_SYNC_initEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m>:
        uint8_t                 synchronousCounterOverflowValue,
        CO_CANmodule_t         *CANdevRx,
        uint32_t                CANdevRxIdx,
        CO_CANmodule_t         *CANdevTx,
        uint32_t                CANdevTxIdx)
{
   1279c:	b590      	push	{r4, r7, lr}
   1279e:	b08b      	sub	sp, #44	; 0x2c
   127a0:	af04      	add	r7, sp, #16
   127a2:	60f8      	str	r0, [r7, #12]
   127a4:	60b9      	str	r1, [r7, #8]
   127a6:	607a      	str	r2, [r7, #4]
   127a8:	603b      	str	r3, [r7, #0]
    uint8_t len = 0;
   127aa:	2300      	movs	r3, #0
   127ac:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if(SYNC==NULL || em==NULL || SDO==NULL || operatingState==NULL ||
   127ae:	68bb      	ldr	r3, [r7, #8]
   127b0:	2b00      	cmp	r3, #0
   127b2:	d00e      	beq.n	127d2 <_ZN13CO_SYNC_Class12CO_SYNC_initEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
   127b4:	687b      	ldr	r3, [r7, #4]
   127b6:	2b00      	cmp	r3, #0
   127b8:	d00b      	beq.n	127d2 <_ZN13CO_SYNC_Class12CO_SYNC_initEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
   127ba:	683b      	ldr	r3, [r7, #0]
   127bc:	2b00      	cmp	r3, #0
   127be:	d008      	beq.n	127d2 <_ZN13CO_SYNC_Class12CO_SYNC_initEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
   127c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   127c2:	2b00      	cmp	r3, #0
   127c4:	d005      	beq.n	127d2 <_ZN13CO_SYNC_Class12CO_SYNC_initEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
   127c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   127c8:	2b00      	cmp	r3, #0
   127ca:	d002      	beq.n	127d2 <_ZN13CO_SYNC_Class12CO_SYNC_initEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
        CANdevRx==NULL || CANdevTx==NULL){
   127cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   127ce:	2b00      	cmp	r3, #0
   127d0:	d102      	bne.n	127d8 <_ZN13CO_SYNC_Class12CO_SYNC_initEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x3c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
   127d2:	f04f 33ff 	mov.w	r3, #4294967295
   127d6:	e096      	b.n	12906 <_ZN13CO_SYNC_Class12CO_SYNC_initEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x16a>
    }

    /* Configure object variables */
    SYNC->isProducer = (COB_ID_SYNCMessage&0x40000000L) ? true : false;
   127d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   127da:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
   127de:	2b00      	cmp	r3, #0
   127e0:	bf14      	ite	ne
   127e2:	2301      	movne	r3, #1
   127e4:	2300      	moveq	r3, #0
   127e6:	b2db      	uxtb	r3, r3
   127e8:	461a      	mov	r2, r3
   127ea:	68bb      	ldr	r3, [r7, #8]
   127ec:	721a      	strb	r2, [r3, #8]
    SYNC->COB_ID = COB_ID_SYNCMessage&0x7FF;
   127ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   127f0:	f3c3 020a 	ubfx	r2, r3, #0, #11
   127f4:	68bb      	ldr	r3, [r7, #8]
   127f6:	60da      	str	r2, [r3, #12]

    SYNC->periodTime = communicationCyclePeriod;
   127f8:	68bb      	ldr	r3, [r7, #8]
   127fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   127fc:	611a      	str	r2, [r3, #16]
    SYNC->periodTimeoutTime = communicationCyclePeriod / 2 * 3;
   127fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12800:	085a      	lsrs	r2, r3, #1
   12802:	4613      	mov	r3, r2
   12804:	005b      	lsls	r3, r3, #1
   12806:	441a      	add	r2, r3
   12808:	68bb      	ldr	r3, [r7, #8]
   1280a:	615a      	str	r2, [r3, #20]
    /* overflow? */
    if(SYNC->periodTimeoutTime < communicationCyclePeriod) SYNC->periodTimeoutTime = 0xFFFFFFFFL;
   1280c:	68bb      	ldr	r3, [r7, #8]
   1280e:	695a      	ldr	r2, [r3, #20]
   12810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12812:	429a      	cmp	r2, r3
   12814:	d203      	bcs.n	1281e <_ZN13CO_SYNC_Class12CO_SYNC_initEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x82>
   12816:	68bb      	ldr	r3, [r7, #8]
   12818:	f04f 32ff 	mov.w	r2, #4294967295
   1281c:	615a      	str	r2, [r3, #20]

    SYNC->counterOverflowValue = synchronousCounterOverflowValue;
   1281e:	68bb      	ldr	r3, [r7, #8]
   12820:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
   12824:	761a      	strb	r2, [r3, #24]
    if(synchronousCounterOverflowValue) len = 1;
   12826:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
   1282a:	2b00      	cmp	r3, #0
   1282c:	d001      	beq.n	12832 <_ZN13CO_SYNC_Class12CO_SYNC_initEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x96>
   1282e:	2301      	movs	r3, #1
   12830:	75fb      	strb	r3, [r7, #23]

    SYNC->curentSyncTimeIsInsideWindow = true;
   12832:	68bb      	ldr	r3, [r7, #8]
   12834:	2201      	movs	r2, #1
   12836:	765a      	strb	r2, [r3, #25]

    SYNC->CANrxNew = false;
   12838:	68bb      	ldr	r3, [r7, #8]
   1283a:	2200      	movs	r2, #0
   1283c:	769a      	strb	r2, [r3, #26]
    SYNC->CANrxToggle = false;
   1283e:	68bb      	ldr	r3, [r7, #8]
   12840:	2200      	movs	r2, #0
   12842:	76da      	strb	r2, [r3, #27]
    SYNC->timer = 0;
   12844:	68bb      	ldr	r3, [r7, #8]
   12846:	2200      	movs	r2, #0
   12848:	621a      	str	r2, [r3, #32]
    SYNC->counter = 0;
   1284a:	68bb      	ldr	r3, [r7, #8]
   1284c:	2200      	movs	r2, #0
   1284e:	771a      	strb	r2, [r3, #28]
    SYNC->receiveError = 0U;
   12850:	68bb      	ldr	r3, [r7, #8]
   12852:	2200      	movs	r2, #0
   12854:	625a      	str	r2, [r3, #36]	; 0x24

    SYNC->em = em;
   12856:	68bb      	ldr	r3, [r7, #8]
   12858:	687a      	ldr	r2, [r7, #4]
   1285a:	601a      	str	r2, [r3, #0]
    SYNC->operatingState = operatingState;
   1285c:	68bb      	ldr	r3, [r7, #8]
   1285e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   12860:	605a      	str	r2, [r3, #4]

    SYNC->CANdevRx = CANdevRx;
   12862:	68bb      	ldr	r3, [r7, #8]
   12864:	6bba      	ldr	r2, [r7, #56]	; 0x38
   12866:	629a      	str	r2, [r3, #40]	; 0x28
    SYNC->CANdevRxIdx = CANdevRxIdx;
   12868:	68bb      	ldr	r3, [r7, #8]
   1286a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1286c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Configure Object dictionary entry at index 0x1005, 0x1006 and 0x1019 */
    ptrCODriverClass->CO_OD_configure( OD_H1005_COBID_SYNC,        CO_ODF_1005, (void*)SYNC, 0, 0);
   1286e:	4b28      	ldr	r3, [pc, #160]	; (12910 <_ZN13CO_SYNC_Class12CO_SYNC_initEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
   12870:	681b      	ldr	r3, [r3, #0]
   12872:	1d18      	adds	r0, r3, #4
   12874:	2300      	movs	r3, #0
   12876:	9301      	str	r3, [sp, #4]
   12878:	2300      	movs	r3, #0
   1287a:	9300      	str	r3, [sp, #0]
   1287c:	68bb      	ldr	r3, [r7, #8]
   1287e:	4a25      	ldr	r2, [pc, #148]	; (12914 <_ZN13CO_SYNC_Class12CO_SYNC_initEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x178>)
   12880:	f241 0105 	movw	r1, #4101	; 0x1005
   12884:	4c24      	ldr	r4, [pc, #144]	; (12918 <_ZN13CO_SYNC_Class12CO_SYNC_initEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x17c>)
   12886:	47a0      	blx	r4
    ptrCODriverClass->CO_OD_configure( OD_H1006_COMM_CYCL_PERIOD,  CO_ODF_1006, (void*)SYNC, 0, 0);
   12888:	4b21      	ldr	r3, [pc, #132]	; (12910 <_ZN13CO_SYNC_Class12CO_SYNC_initEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
   1288a:	681b      	ldr	r3, [r3, #0]
   1288c:	1d18      	adds	r0, r3, #4
   1288e:	2300      	movs	r3, #0
   12890:	9301      	str	r3, [sp, #4]
   12892:	2300      	movs	r3, #0
   12894:	9300      	str	r3, [sp, #0]
   12896:	68bb      	ldr	r3, [r7, #8]
   12898:	4a20      	ldr	r2, [pc, #128]	; (1291c <_ZN13CO_SYNC_Class12CO_SYNC_initEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x180>)
   1289a:	f241 0106 	movw	r1, #4102	; 0x1006
   1289e:	4c1e      	ldr	r4, [pc, #120]	; (12918 <_ZN13CO_SYNC_Class12CO_SYNC_initEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x17c>)
   128a0:	47a0      	blx	r4
    ptrCODriverClass->CO_OD_configure( OD_H1019_SYNC_CNT_OVERFLOW, CO_ODF_1019, (void*)SYNC, 0, 0);
   128a2:	4b1b      	ldr	r3, [pc, #108]	; (12910 <_ZN13CO_SYNC_Class12CO_SYNC_initEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
   128a4:	681b      	ldr	r3, [r3, #0]
   128a6:	1d18      	adds	r0, r3, #4
   128a8:	2300      	movs	r3, #0
   128aa:	9301      	str	r3, [sp, #4]
   128ac:	2300      	movs	r3, #0
   128ae:	9300      	str	r3, [sp, #0]
   128b0:	68bb      	ldr	r3, [r7, #8]
   128b2:	4a1b      	ldr	r2, [pc, #108]	; (12920 <_ZN13CO_SYNC_Class12CO_SYNC_initEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x184>)
   128b4:	f241 0119 	movw	r1, #4121	; 0x1019
   128b8:	4c17      	ldr	r4, [pc, #92]	; (12918 <_ZN13CO_SYNC_Class12CO_SYNC_initEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x17c>)
   128ba:	47a0      	blx	r4

    /* configure SYNC CAN reception */
    ptrCODriverClass->CAN_Rx_BufferInit(
   128bc:	4b14      	ldr	r3, [pc, #80]	; (12910 <_ZN13CO_SYNC_Class12CO_SYNC_initEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
   128be:	6818      	ldr	r0, [r3, #0]
   128c0:	68bb      	ldr	r3, [r7, #8]
   128c2:	68da      	ldr	r2, [r3, #12]
            CANdevRxIdx,            /* rx buffer index */
            SYNC->COB_ID,           /* CAN identifier */
            0x7FF,                  /* mask */
            0,                      /* rtr */
            (void*)SYNC,            /* object passed to receive function */
            CO_SYNC_receive);       /* this function will process received message */
   128c4:	4b17      	ldr	r3, [pc, #92]	; (12924 <_ZN13CO_SYNC_Class12CO_SYNC_initEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x188>)
   128c6:	9302      	str	r3, [sp, #8]
   128c8:	68bb      	ldr	r3, [r7, #8]
   128ca:	9301      	str	r3, [sp, #4]
   128cc:	2300      	movs	r3, #0
   128ce:	9300      	str	r3, [sp, #0]
   128d0:	f240 73ff 	movw	r3, #2047	; 0x7ff
   128d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   128d6:	4c14      	ldr	r4, [pc, #80]	; (12928 <_ZN13CO_SYNC_Class12CO_SYNC_initEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x18c>)
   128d8:	47a0      	blx	r4

    /* configure SYNC CAN transmission */
    SYNC->CANdevTx = CANdevTx;
   128da:	68bb      	ldr	r3, [r7, #8]
   128dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   128de:	631a      	str	r2, [r3, #48]	; 0x30
    SYNC->CANdevTxIdx = CANdevTxIdx;
   128e0:	68bb      	ldr	r3, [r7, #8]
   128e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   128e4:	639a      	str	r2, [r3, #56]	; 0x38
    SYNC->CANtxBuff =  ptrCODriverClass->CAN_Tx_BufferInit(
   128e6:	4b0a      	ldr	r3, [pc, #40]	; (12910 <_ZN13CO_SYNC_Class12CO_SYNC_initEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
   128e8:	6818      	ldr	r0, [r3, #0]
   128ea:	68bb      	ldr	r3, [r7, #8]
   128ec:	68da      	ldr	r2, [r3, #12]
   128ee:	2300      	movs	r3, #0
   128f0:	9301      	str	r3, [sp, #4]
   128f2:	7dfb      	ldrb	r3, [r7, #23]
   128f4:	9300      	str	r3, [sp, #0]
   128f6:	2300      	movs	r3, #0
   128f8:	6c79      	ldr	r1, [r7, #68]	; 0x44
   128fa:	4c0c      	ldr	r4, [pc, #48]	; (1292c <_ZN13CO_SYNC_Class12CO_SYNC_initEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x190>)
   128fc:	47a0      	blx	r4
   128fe:	4602      	mov	r2, r0
   12900:	68bb      	ldr	r3, [r7, #8]
   12902:	635a      	str	r2, [r3, #52]	; 0x34
            SYNC->COB_ID,           /* CAN identifier */
            0,                      /* rtr */
            len,                    /* number of data bytes */
            0);                     /* synchronous message flag bit */

    return CO_ERROR_NO;
   12904:	2300      	movs	r3, #0
}
   12906:	4618      	mov	r0, r3
   12908:	371c      	adds	r7, #28
   1290a:	46bd      	mov	sp, r7
   1290c:	bd90      	pop	{r4, r7, pc}
   1290e:	bf00      	nop
   12910:	20001934 	.word	0x20001934
   12914:	00012581 	.word	0x00012581
   12918:	00010971 	.word	0x00010971
   1291c:	00012685 	.word	0x00012685
   12920:	00012705 	.word	0x00012705
   12924:	000124ed 	.word	0x000124ed
   12928:	0000d6dd 	.word	0x0000d6dd
   1292c:	0000d7d9 	.word	0x0000d7d9

00012930 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm>:
/******************************************************************************/
uint8_t CO_SYNC_Class::CO_SYNC_process(
        CO_SYNC_t              *SYNC,
        uint32_t                timeDifference_us,
        uint32_t                ObjDict_synchronousWindowLength)
{
   12930:	b590      	push	{r4, r7, lr}
   12932:	b089      	sub	sp, #36	; 0x24
   12934:	af02      	add	r7, sp, #8
   12936:	60f8      	str	r0, [r7, #12]
   12938:	60b9      	str	r1, [r7, #8]
   1293a:	607a      	str	r2, [r7, #4]
   1293c:	603b      	str	r3, [r7, #0]
    uint8_t ret = 0;
   1293e:	2300      	movs	r3, #0
   12940:	75fb      	strb	r3, [r7, #23]
    uint32_t timerNew;

    if(*SYNC->operatingState == CO_NMT_OPERATIONAL || *SYNC->operatingState == CO_NMT_PRE_OPERATIONAL){
   12942:	68bb      	ldr	r3, [r7, #8]
   12944:	685b      	ldr	r3, [r3, #4]
   12946:	781b      	ldrb	r3, [r3, #0]
   12948:	2b05      	cmp	r3, #5
   1294a:	d005      	beq.n	12958 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x28>
   1294c:	68bb      	ldr	r3, [r7, #8]
   1294e:	685b      	ldr	r3, [r3, #4]
   12950:	781b      	ldrb	r3, [r3, #0]
   12952:	2b7f      	cmp	r3, #127	; 0x7f
   12954:	f040 808e 	bne.w	12a74 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x144>
        /* update sync timer, no overflow */
        timerNew = SYNC->timer + timeDifference_us;
   12958:	68bb      	ldr	r3, [r7, #8]
   1295a:	6a1a      	ldr	r2, [r3, #32]
   1295c:	687b      	ldr	r3, [r7, #4]
   1295e:	4413      	add	r3, r2
   12960:	613b      	str	r3, [r7, #16]
        if(timerNew > SYNC->timer) SYNC->timer = timerNew;
   12962:	68bb      	ldr	r3, [r7, #8]
   12964:	6a1a      	ldr	r2, [r3, #32]
   12966:	693b      	ldr	r3, [r7, #16]
   12968:	429a      	cmp	r2, r3
   1296a:	d202      	bcs.n	12972 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x42>
   1296c:	68bb      	ldr	r3, [r7, #8]
   1296e:	693a      	ldr	r2, [r7, #16]
   12970:	621a      	str	r2, [r3, #32]

        /* was SYNC just received */
        if(SYNC->CANrxNew){
   12972:	68bb      	ldr	r3, [r7, #8]
   12974:	7e9b      	ldrb	r3, [r3, #26]
   12976:	2b00      	cmp	r3, #0
   12978:	d007      	beq.n	1298a <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x5a>
            SYNC->timer = 0;
   1297a:	68bb      	ldr	r3, [r7, #8]
   1297c:	2200      	movs	r2, #0
   1297e:	621a      	str	r2, [r3, #32]
            ret = 1;
   12980:	2301      	movs	r3, #1
   12982:	75fb      	strb	r3, [r7, #23]
            SYNC->CANrxNew = false;
   12984:	68bb      	ldr	r3, [r7, #8]
   12986:	2200      	movs	r2, #0
   12988:	769a      	strb	r2, [r3, #26]
        }

        /* SYNC producer */
        if(SYNC->isProducer && SYNC->periodTime){
   1298a:	68bb      	ldr	r3, [r7, #8]
   1298c:	7a1b      	ldrb	r3, [r3, #8]
   1298e:	2b00      	cmp	r3, #0
   12990:	d03a      	beq.n	12a08 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0xd8>
   12992:	68bb      	ldr	r3, [r7, #8]
   12994:	691b      	ldr	r3, [r3, #16]
   12996:	2b00      	cmp	r3, #0
   12998:	d036      	beq.n	12a08 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0xd8>
            if(SYNC->timer >= SYNC->periodTime){
   1299a:	68bb      	ldr	r3, [r7, #8]
   1299c:	6a1a      	ldr	r2, [r3, #32]
   1299e:	68bb      	ldr	r3, [r7, #8]
   129a0:	691b      	ldr	r3, [r3, #16]
   129a2:	429a      	cmp	r2, r3
   129a4:	d330      	bcc.n	12a08 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0xd8>
                if(++SYNC->counter > SYNC->counterOverflowValue) SYNC->counter = 1;
   129a6:	68bb      	ldr	r3, [r7, #8]
   129a8:	7f1b      	ldrb	r3, [r3, #28]
   129aa:	3301      	adds	r3, #1
   129ac:	b2da      	uxtb	r2, r3
   129ae:	68bb      	ldr	r3, [r7, #8]
   129b0:	771a      	strb	r2, [r3, #28]
   129b2:	68bb      	ldr	r3, [r7, #8]
   129b4:	7f1b      	ldrb	r3, [r3, #28]
   129b6:	461a      	mov	r2, r3
   129b8:	68bb      	ldr	r3, [r7, #8]
   129ba:	7e1b      	ldrb	r3, [r3, #24]
   129bc:	429a      	cmp	r2, r3
   129be:	bfcc      	ite	gt
   129c0:	2301      	movgt	r3, #1
   129c2:	2300      	movle	r3, #0
   129c4:	b2db      	uxtb	r3, r3
   129c6:	2b00      	cmp	r3, #0
   129c8:	d002      	beq.n	129d0 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0xa0>
   129ca:	68bb      	ldr	r3, [r7, #8]
   129cc:	2201      	movs	r2, #1
   129ce:	771a      	strb	r2, [r3, #28]
                SYNC->timer = 0;
   129d0:	68bb      	ldr	r3, [r7, #8]
   129d2:	2200      	movs	r2, #0
   129d4:	621a      	str	r2, [r3, #32]
                ret = 1;
   129d6:	2301      	movs	r3, #1
   129d8:	75fb      	strb	r3, [r7, #23]
                SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
   129da:	68bb      	ldr	r3, [r7, #8]
   129dc:	7edb      	ldrb	r3, [r3, #27]
   129de:	2b00      	cmp	r3, #0
   129e0:	bf0c      	ite	eq
   129e2:	2301      	moveq	r3, #1
   129e4:	2300      	movne	r3, #0
   129e6:	b2db      	uxtb	r3, r3
   129e8:	461a      	mov	r2, r3
   129ea:	68bb      	ldr	r3, [r7, #8]
   129ec:	76da      	strb	r2, [r3, #27]
                SYNC->CANtxBuff->data[0] = SYNC->counter;
   129ee:	68bb      	ldr	r3, [r7, #8]
   129f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   129f2:	68ba      	ldr	r2, [r7, #8]
   129f4:	7f12      	ldrb	r2, [r2, #28]
   129f6:	715a      	strb	r2, [r3, #5]
                ptrCODriverClass->CAN_Send(SYNC->CANtxBuff);
   129f8:	4b2d      	ldr	r3, [pc, #180]	; (12ab0 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x180>)
   129fa:	681a      	ldr	r2, [r3, #0]
   129fc:	68bb      	ldr	r3, [r7, #8]
   129fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   12a00:	4619      	mov	r1, r3
   12a02:	4610      	mov	r0, r2
   12a04:	4b2b      	ldr	r3, [pc, #172]	; (12ab4 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x184>)
   12a06:	4798      	blx	r3
            }
        }

        /* Synchronous PDOs are allowed only inside time window */
        if(ObjDict_synchronousWindowLength){
   12a08:	683b      	ldr	r3, [r7, #0]
   12a0a:	2b00      	cmp	r3, #0
   12a0c:	d012      	beq.n	12a34 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x104>
            if(SYNC->timer > ObjDict_synchronousWindowLength){
   12a0e:	68bb      	ldr	r3, [r7, #8]
   12a10:	6a1a      	ldr	r2, [r3, #32]
   12a12:	683b      	ldr	r3, [r7, #0]
   12a14:	429a      	cmp	r2, r3
   12a16:	d909      	bls.n	12a2c <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0xfc>
                if(SYNC->curentSyncTimeIsInsideWindow){
   12a18:	68bb      	ldr	r3, [r7, #8]
   12a1a:	7e5b      	ldrb	r3, [r3, #25]
   12a1c:	2b00      	cmp	r3, #0
   12a1e:	d001      	beq.n	12a24 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0xf4>
                    ret = 2;
   12a20:	2302      	movs	r3, #2
   12a22:	75fb      	strb	r3, [r7, #23]
                }
                SYNC->curentSyncTimeIsInsideWindow = false;
   12a24:	68bb      	ldr	r3, [r7, #8]
   12a26:	2200      	movs	r2, #0
   12a28:	765a      	strb	r2, [r3, #25]
   12a2a:	e006      	b.n	12a3a <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x10a>
            }
            else{
                SYNC->curentSyncTimeIsInsideWindow = true;
   12a2c:	68bb      	ldr	r3, [r7, #8]
   12a2e:	2201      	movs	r2, #1
   12a30:	765a      	strb	r2, [r3, #25]
   12a32:	e002      	b.n	12a3a <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x10a>
            }
        }
        else{
            SYNC->curentSyncTimeIsInsideWindow = true;
   12a34:	68bb      	ldr	r3, [r7, #8]
   12a36:	2201      	movs	r2, #1
   12a38:	765a      	strb	r2, [r3, #25]
        }

        /* Verify timeout of SYNC */
        if(SYNC->periodTime && SYNC->timer > SYNC->periodTimeoutTime && *SYNC->operatingState == CO_NMT_OPERATIONAL)
   12a3a:	68bb      	ldr	r3, [r7, #8]
   12a3c:	691b      	ldr	r3, [r3, #16]
   12a3e:	2b00      	cmp	r3, #0
   12a40:	d01c      	beq.n	12a7c <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x14c>
   12a42:	68bb      	ldr	r3, [r7, #8]
   12a44:	6a1a      	ldr	r2, [r3, #32]
   12a46:	68bb      	ldr	r3, [r7, #8]
   12a48:	695b      	ldr	r3, [r3, #20]
   12a4a:	429a      	cmp	r2, r3
   12a4c:	d916      	bls.n	12a7c <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x14c>
   12a4e:	68bb      	ldr	r3, [r7, #8]
   12a50:	685b      	ldr	r3, [r3, #4]
   12a52:	781b      	ldrb	r3, [r3, #0]
   12a54:	2b05      	cmp	r3, #5
   12a56:	d111      	bne.n	12a7c <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x14c>
             ptrCODriverClass->EM_ErrorReport(SYNC->em, CO_EM_SYNC_TIME_OUT, CO_EMC_COMMUNICATION, SYNC->timer);
   12a58:	4b15      	ldr	r3, [pc, #84]	; (12ab0 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x180>)
   12a5a:	681b      	ldr	r3, [r3, #0]
   12a5c:	1d18      	adds	r0, r3, #4
   12a5e:	68bb      	ldr	r3, [r7, #8]
   12a60:	6819      	ldr	r1, [r3, #0]
   12a62:	68bb      	ldr	r3, [r7, #8]
   12a64:	6a1b      	ldr	r3, [r3, #32]
   12a66:	9300      	str	r3, [sp, #0]
   12a68:	f44f 4301 	mov.w	r3, #33024	; 0x8100
   12a6c:	2218      	movs	r2, #24
   12a6e:	4c12      	ldr	r4, [pc, #72]	; (12ab8 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x188>)
   12a70:	47a0      	blx	r4
        if(SYNC->periodTime && SYNC->timer > SYNC->periodTimeoutTime && *SYNC->operatingState == CO_NMT_OPERATIONAL)
   12a72:	e003      	b.n	12a7c <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x14c>
    }
    else {
        SYNC->CANrxNew = false;
   12a74:	68bb      	ldr	r3, [r7, #8]
   12a76:	2200      	movs	r2, #0
   12a78:	769a      	strb	r2, [r3, #26]
   12a7a:	e000      	b.n	12a7e <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x14e>
        if(SYNC->periodTime && SYNC->timer > SYNC->periodTimeoutTime && *SYNC->operatingState == CO_NMT_OPERATIONAL)
   12a7c:	bf00      	nop
    }

    /* verify error from receive function */
    if(SYNC->receiveError != 0U){
   12a7e:	68bb      	ldr	r3, [r7, #8]
   12a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   12a82:	2b00      	cmp	r3, #0
   12a84:	d00f      	beq.n	12aa6 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x176>
        ptrCODriverClass->EM_ErrorReport(SYNC->em, CO_EM_SYNC_LENGTH, CO_EMC_SYNC_DATA_LENGTH, (uint32_t)SYNC->receiveError);
   12a86:	4b0a      	ldr	r3, [pc, #40]	; (12ab0 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x180>)
   12a88:	681b      	ldr	r3, [r3, #0]
   12a8a:	1d18      	adds	r0, r3, #4
   12a8c:	68bb      	ldr	r3, [r7, #8]
   12a8e:	6819      	ldr	r1, [r3, #0]
   12a90:	68bb      	ldr	r3, [r7, #8]
   12a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   12a94:	9300      	str	r3, [sp, #0]
   12a96:	f248 2340 	movw	r3, #33344	; 0x8240
   12a9a:	2219      	movs	r2, #25
   12a9c:	4c06      	ldr	r4, [pc, #24]	; (12ab8 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x188>)
   12a9e:	47a0      	blx	r4
        SYNC->receiveError = 0U;
   12aa0:	68bb      	ldr	r3, [r7, #8]
   12aa2:	2200      	movs	r2, #0
   12aa4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return ret;
   12aa6:	7dfb      	ldrb	r3, [r7, #23]
   12aa8:	4618      	mov	r0, r3
   12aaa:	371c      	adds	r7, #28
   12aac:	46bd      	mov	sp, r7
   12aae:	bd90      	pop	{r4, r7, pc}
   12ab0:	20001934 	.word	0x20001934
   12ab4:	0000d885 	.word	0x0000d885
   12ab8:	0000e2cd 	.word	0x0000e2cd

00012abc <_ZN14CO_CRC16_ClassC1Ev>:
	0x6E17U, 0x7E36U, 0x4E55U, 0x5E74U, 0x2E93U, 0x3EB2U, 0x0ED1U, 0x1EF0U
};


// default constructor
CO_CRC16_Class::CO_CRC16_Class()
   12abc:	b480      	push	{r7}
   12abe:	b083      	sub	sp, #12
   12ac0:	af00      	add	r7, sp, #0
   12ac2:	6078      	str	r0, [r7, #4]
{
} //CO_CRC16_Class
   12ac4:	687b      	ldr	r3, [r7, #4]
   12ac6:	4618      	mov	r0, r3
   12ac8:	370c      	adds	r7, #12
   12aca:	46bd      	mov	sp, r7
   12acc:	bc80      	pop	{r7}
   12ace:	4770      	bx	lr

00012ad0 <_ZN14CO_CRC16_ClassD1Ev>:

// default destructor
CO_CRC16_Class::~CO_CRC16_Class()
   12ad0:	b480      	push	{r7}
   12ad2:	b083      	sub	sp, #12
   12ad4:	af00      	add	r7, sp, #0
   12ad6:	6078      	str	r0, [r7, #4]
{
} //~CO_CRC16_Class
   12ad8:	687b      	ldr	r3, [r7, #4]
   12ada:	4618      	mov	r0, r3
   12adc:	370c      	adds	r7, #12
   12ade:	46bd      	mov	sp, r7
   12ae0:	bc80      	pop	{r7}
   12ae2:	4770      	bx	lr

00012ae4 <_ZN14CO_CRC16_Class11crc16_ccittEPKhjt>:
/******************************************************************************/
unsigned short CO_CRC16_Class::crc16_ccitt(
const unsigned char     block[],
unsigned int            blockLength,
unsigned short          crc)
{
   12ae4:	b480      	push	{r7}
   12ae6:	b087      	sub	sp, #28
   12ae8:	af00      	add	r7, sp, #0
   12aea:	60f8      	str	r0, [r7, #12]
   12aec:	60b9      	str	r1, [r7, #8]
   12aee:	607a      	str	r2, [r7, #4]
   12af0:	807b      	strh	r3, [r7, #2]
	unsigned int i;

	for(i=0U; i<blockLength; i++){
   12af2:	2300      	movs	r3, #0
   12af4:	617b      	str	r3, [r7, #20]
   12af6:	697a      	ldr	r2, [r7, #20]
   12af8:	687b      	ldr	r3, [r7, #4]
   12afa:	429a      	cmp	r2, r3
   12afc:	d217      	bcs.n	12b2e <_ZN14CO_CRC16_Class11crc16_ccittEPKhjt+0x4a>
		unsigned short tmp = (crc >> 8) ^ (unsigned short) block[i];
   12afe:	887b      	ldrh	r3, [r7, #2]
   12b00:	121b      	asrs	r3, r3, #8
   12b02:	b21a      	sxth	r2, r3
   12b04:	68b9      	ldr	r1, [r7, #8]
   12b06:	697b      	ldr	r3, [r7, #20]
   12b08:	440b      	add	r3, r1
   12b0a:	781b      	ldrb	r3, [r3, #0]
   12b0c:	b21b      	sxth	r3, r3
   12b0e:	4053      	eors	r3, r2
   12b10:	b21b      	sxth	r3, r3
   12b12:	827b      	strh	r3, [r7, #18]
		crc = ((unsigned short)(crc << 8U)) ^ crc16_ccitt_table[tmp];
   12b14:	887b      	ldrh	r3, [r7, #2]
   12b16:	021b      	lsls	r3, r3, #8
   12b18:	b29a      	uxth	r2, r3
   12b1a:	8a7b      	ldrh	r3, [r7, #18]
   12b1c:	4907      	ldr	r1, [pc, #28]	; (12b3c <_ZN14CO_CRC16_Class11crc16_ccittEPKhjt+0x58>)
   12b1e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   12b22:	4053      	eors	r3, r2
   12b24:	807b      	strh	r3, [r7, #2]
	for(i=0U; i<blockLength; i++){
   12b26:	697b      	ldr	r3, [r7, #20]
   12b28:	3301      	adds	r3, #1
   12b2a:	617b      	str	r3, [r7, #20]
   12b2c:	e7e3      	b.n	12af6 <_ZN14CO_CRC16_Class11crc16_ccittEPKhjt+0x12>
	}
	return crc;
   12b2e:	887b      	ldrh	r3, [r7, #2]
   12b30:	4618      	mov	r0, r3
   12b32:	371c      	adds	r7, #28
   12b34:	46bd      	mov	sp, r7
   12b36:	bc80      	pop	{r7}
   12b38:	4770      	bx	lr
   12b3a:	bf00      	nop
   12b3c:	00013d44 	.word	0x00013d44

00012b40 <__aeabi_atexit>:
   12b40:	460b      	mov	r3, r1
   12b42:	4601      	mov	r1, r0
   12b44:	4618      	mov	r0, r3
   12b46:	f000 b801 	b.w	12b4c <__cxa_atexit>
   12b4a:	bf00      	nop

00012b4c <__cxa_atexit>:
   12b4c:	4613      	mov	r3, r2
   12b4e:	460a      	mov	r2, r1
   12b50:	4601      	mov	r1, r0
   12b52:	2002      	movs	r0, #2
   12b54:	f000 b91e 	b.w	12d94 <__register_exitproc>

00012b58 <ffs>:
   12b58:	b140      	cbz	r0, 12b6c <ffs+0x14>
   12b5a:	2300      	movs	r3, #0
   12b5c:	fa40 f103 	asr.w	r1, r0, r3
   12b60:	1c5a      	adds	r2, r3, #1
   12b62:	07c9      	lsls	r1, r1, #31
   12b64:	4613      	mov	r3, r2
   12b66:	d5f9      	bpl.n	12b5c <ffs+0x4>
   12b68:	4610      	mov	r0, r2
   12b6a:	4770      	bx	lr
   12b6c:	4602      	mov	r2, r0
   12b6e:	4610      	mov	r0, r2
   12b70:	4770      	bx	lr
   12b72:	bf00      	nop

00012b74 <__libc_init_array>:
   12b74:	b570      	push	{r4, r5, r6, lr}
   12b76:	4e0f      	ldr	r6, [pc, #60]	; (12bb4 <__libc_init_array+0x40>)
   12b78:	4d0f      	ldr	r5, [pc, #60]	; (12bb8 <__libc_init_array+0x44>)
   12b7a:	1b76      	subs	r6, r6, r5
   12b7c:	10b6      	asrs	r6, r6, #2
   12b7e:	bf18      	it	ne
   12b80:	2400      	movne	r4, #0
   12b82:	d005      	beq.n	12b90 <__libc_init_array+0x1c>
   12b84:	3401      	adds	r4, #1
   12b86:	f855 3b04 	ldr.w	r3, [r5], #4
   12b8a:	4798      	blx	r3
   12b8c:	42a6      	cmp	r6, r4
   12b8e:	d1f9      	bne.n	12b84 <__libc_init_array+0x10>
   12b90:	4e0a      	ldr	r6, [pc, #40]	; (12bbc <__libc_init_array+0x48>)
   12b92:	4d0b      	ldr	r5, [pc, #44]	; (12bc0 <__libc_init_array+0x4c>)
   12b94:	1b76      	subs	r6, r6, r5
   12b96:	f001 f9d7 	bl	13f48 <_init>
   12b9a:	10b6      	asrs	r6, r6, #2
   12b9c:	bf18      	it	ne
   12b9e:	2400      	movne	r4, #0
   12ba0:	d006      	beq.n	12bb0 <__libc_init_array+0x3c>
   12ba2:	3401      	adds	r4, #1
   12ba4:	f855 3b04 	ldr.w	r3, [r5], #4
   12ba8:	4798      	blx	r3
   12baa:	42a6      	cmp	r6, r4
   12bac:	d1f9      	bne.n	12ba2 <__libc_init_array+0x2e>
   12bae:	bd70      	pop	{r4, r5, r6, pc}
   12bb0:	bd70      	pop	{r4, r5, r6, pc}
   12bb2:	bf00      	nop
   12bb4:	00013f54 	.word	0x00013f54
   12bb8:	00013f54 	.word	0x00013f54
   12bbc:	00013f60 	.word	0x00013f60
   12bc0:	00013f54 	.word	0x00013f54

00012bc4 <memcpy>:
   12bc4:	4684      	mov	ip, r0
   12bc6:	ea41 0300 	orr.w	r3, r1, r0
   12bca:	f013 0303 	ands.w	r3, r3, #3
   12bce:	d16d      	bne.n	12cac <memcpy+0xe8>
   12bd0:	3a40      	subs	r2, #64	; 0x40
   12bd2:	d341      	bcc.n	12c58 <memcpy+0x94>
   12bd4:	f851 3b04 	ldr.w	r3, [r1], #4
   12bd8:	f840 3b04 	str.w	r3, [r0], #4
   12bdc:	f851 3b04 	ldr.w	r3, [r1], #4
   12be0:	f840 3b04 	str.w	r3, [r0], #4
   12be4:	f851 3b04 	ldr.w	r3, [r1], #4
   12be8:	f840 3b04 	str.w	r3, [r0], #4
   12bec:	f851 3b04 	ldr.w	r3, [r1], #4
   12bf0:	f840 3b04 	str.w	r3, [r0], #4
   12bf4:	f851 3b04 	ldr.w	r3, [r1], #4
   12bf8:	f840 3b04 	str.w	r3, [r0], #4
   12bfc:	f851 3b04 	ldr.w	r3, [r1], #4
   12c00:	f840 3b04 	str.w	r3, [r0], #4
   12c04:	f851 3b04 	ldr.w	r3, [r1], #4
   12c08:	f840 3b04 	str.w	r3, [r0], #4
   12c0c:	f851 3b04 	ldr.w	r3, [r1], #4
   12c10:	f840 3b04 	str.w	r3, [r0], #4
   12c14:	f851 3b04 	ldr.w	r3, [r1], #4
   12c18:	f840 3b04 	str.w	r3, [r0], #4
   12c1c:	f851 3b04 	ldr.w	r3, [r1], #4
   12c20:	f840 3b04 	str.w	r3, [r0], #4
   12c24:	f851 3b04 	ldr.w	r3, [r1], #4
   12c28:	f840 3b04 	str.w	r3, [r0], #4
   12c2c:	f851 3b04 	ldr.w	r3, [r1], #4
   12c30:	f840 3b04 	str.w	r3, [r0], #4
   12c34:	f851 3b04 	ldr.w	r3, [r1], #4
   12c38:	f840 3b04 	str.w	r3, [r0], #4
   12c3c:	f851 3b04 	ldr.w	r3, [r1], #4
   12c40:	f840 3b04 	str.w	r3, [r0], #4
   12c44:	f851 3b04 	ldr.w	r3, [r1], #4
   12c48:	f840 3b04 	str.w	r3, [r0], #4
   12c4c:	f851 3b04 	ldr.w	r3, [r1], #4
   12c50:	f840 3b04 	str.w	r3, [r0], #4
   12c54:	3a40      	subs	r2, #64	; 0x40
   12c56:	d2bd      	bcs.n	12bd4 <memcpy+0x10>
   12c58:	3230      	adds	r2, #48	; 0x30
   12c5a:	d311      	bcc.n	12c80 <memcpy+0xbc>
   12c5c:	f851 3b04 	ldr.w	r3, [r1], #4
   12c60:	f840 3b04 	str.w	r3, [r0], #4
   12c64:	f851 3b04 	ldr.w	r3, [r1], #4
   12c68:	f840 3b04 	str.w	r3, [r0], #4
   12c6c:	f851 3b04 	ldr.w	r3, [r1], #4
   12c70:	f840 3b04 	str.w	r3, [r0], #4
   12c74:	f851 3b04 	ldr.w	r3, [r1], #4
   12c78:	f840 3b04 	str.w	r3, [r0], #4
   12c7c:	3a10      	subs	r2, #16
   12c7e:	d2ed      	bcs.n	12c5c <memcpy+0x98>
   12c80:	320c      	adds	r2, #12
   12c82:	d305      	bcc.n	12c90 <memcpy+0xcc>
   12c84:	f851 3b04 	ldr.w	r3, [r1], #4
   12c88:	f840 3b04 	str.w	r3, [r0], #4
   12c8c:	3a04      	subs	r2, #4
   12c8e:	d2f9      	bcs.n	12c84 <memcpy+0xc0>
   12c90:	3204      	adds	r2, #4
   12c92:	d008      	beq.n	12ca6 <memcpy+0xe2>
   12c94:	07d2      	lsls	r2, r2, #31
   12c96:	bf1c      	itt	ne
   12c98:	f811 3b01 	ldrbne.w	r3, [r1], #1
   12c9c:	f800 3b01 	strbne.w	r3, [r0], #1
   12ca0:	d301      	bcc.n	12ca6 <memcpy+0xe2>
   12ca2:	880b      	ldrh	r3, [r1, #0]
   12ca4:	8003      	strh	r3, [r0, #0]
   12ca6:	4660      	mov	r0, ip
   12ca8:	4770      	bx	lr
   12caa:	bf00      	nop
   12cac:	2a08      	cmp	r2, #8
   12cae:	d313      	bcc.n	12cd8 <memcpy+0x114>
   12cb0:	078b      	lsls	r3, r1, #30
   12cb2:	d08d      	beq.n	12bd0 <memcpy+0xc>
   12cb4:	f010 0303 	ands.w	r3, r0, #3
   12cb8:	d08a      	beq.n	12bd0 <memcpy+0xc>
   12cba:	f1c3 0304 	rsb	r3, r3, #4
   12cbe:	1ad2      	subs	r2, r2, r3
   12cc0:	07db      	lsls	r3, r3, #31
   12cc2:	bf1c      	itt	ne
   12cc4:	f811 3b01 	ldrbne.w	r3, [r1], #1
   12cc8:	f800 3b01 	strbne.w	r3, [r0], #1
   12ccc:	d380      	bcc.n	12bd0 <memcpy+0xc>
   12cce:	f831 3b02 	ldrh.w	r3, [r1], #2
   12cd2:	f820 3b02 	strh.w	r3, [r0], #2
   12cd6:	e77b      	b.n	12bd0 <memcpy+0xc>
   12cd8:	3a04      	subs	r2, #4
   12cda:	d3d9      	bcc.n	12c90 <memcpy+0xcc>
   12cdc:	3a01      	subs	r2, #1
   12cde:	f811 3b01 	ldrb.w	r3, [r1], #1
   12ce2:	f800 3b01 	strb.w	r3, [r0], #1
   12ce6:	d2f9      	bcs.n	12cdc <memcpy+0x118>
   12ce8:	780b      	ldrb	r3, [r1, #0]
   12cea:	7003      	strb	r3, [r0, #0]
   12cec:	784b      	ldrb	r3, [r1, #1]
   12cee:	7043      	strb	r3, [r0, #1]
   12cf0:	788b      	ldrb	r3, [r1, #2]
   12cf2:	7083      	strb	r3, [r0, #2]
   12cf4:	4660      	mov	r0, ip
   12cf6:	4770      	bx	lr

00012cf8 <memset>:
   12cf8:	b470      	push	{r4, r5, r6}
   12cfa:	0786      	lsls	r6, r0, #30
   12cfc:	d046      	beq.n	12d8c <memset+0x94>
   12cfe:	1e54      	subs	r4, r2, #1
   12d00:	2a00      	cmp	r2, #0
   12d02:	d041      	beq.n	12d88 <memset+0x90>
   12d04:	b2ca      	uxtb	r2, r1
   12d06:	4603      	mov	r3, r0
   12d08:	e002      	b.n	12d10 <memset+0x18>
   12d0a:	f114 34ff 	adds.w	r4, r4, #4294967295
   12d0e:	d33b      	bcc.n	12d88 <memset+0x90>
   12d10:	f803 2b01 	strb.w	r2, [r3], #1
   12d14:	079d      	lsls	r5, r3, #30
   12d16:	d1f8      	bne.n	12d0a <memset+0x12>
   12d18:	2c03      	cmp	r4, #3
   12d1a:	d92e      	bls.n	12d7a <memset+0x82>
   12d1c:	b2cd      	uxtb	r5, r1
   12d1e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   12d22:	2c0f      	cmp	r4, #15
   12d24:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   12d28:	d919      	bls.n	12d5e <memset+0x66>
   12d2a:	f103 0210 	add.w	r2, r3, #16
   12d2e:	4626      	mov	r6, r4
   12d30:	3e10      	subs	r6, #16
   12d32:	2e0f      	cmp	r6, #15
   12d34:	f842 5c10 	str.w	r5, [r2, #-16]
   12d38:	f842 5c0c 	str.w	r5, [r2, #-12]
   12d3c:	f842 5c08 	str.w	r5, [r2, #-8]
   12d40:	f842 5c04 	str.w	r5, [r2, #-4]
   12d44:	f102 0210 	add.w	r2, r2, #16
   12d48:	d8f2      	bhi.n	12d30 <memset+0x38>
   12d4a:	f1a4 0210 	sub.w	r2, r4, #16
   12d4e:	f022 020f 	bic.w	r2, r2, #15
   12d52:	f004 040f 	and.w	r4, r4, #15
   12d56:	3210      	adds	r2, #16
   12d58:	2c03      	cmp	r4, #3
   12d5a:	4413      	add	r3, r2
   12d5c:	d90d      	bls.n	12d7a <memset+0x82>
   12d5e:	461e      	mov	r6, r3
   12d60:	4622      	mov	r2, r4
   12d62:	3a04      	subs	r2, #4
   12d64:	2a03      	cmp	r2, #3
   12d66:	f846 5b04 	str.w	r5, [r6], #4
   12d6a:	d8fa      	bhi.n	12d62 <memset+0x6a>
   12d6c:	1f22      	subs	r2, r4, #4
   12d6e:	f022 0203 	bic.w	r2, r2, #3
   12d72:	3204      	adds	r2, #4
   12d74:	4413      	add	r3, r2
   12d76:	f004 0403 	and.w	r4, r4, #3
   12d7a:	b12c      	cbz	r4, 12d88 <memset+0x90>
   12d7c:	b2c9      	uxtb	r1, r1
   12d7e:	441c      	add	r4, r3
   12d80:	f803 1b01 	strb.w	r1, [r3], #1
   12d84:	429c      	cmp	r4, r3
   12d86:	d1fb      	bne.n	12d80 <memset+0x88>
   12d88:	bc70      	pop	{r4, r5, r6}
   12d8a:	4770      	bx	lr
   12d8c:	4614      	mov	r4, r2
   12d8e:	4603      	mov	r3, r0
   12d90:	e7c2      	b.n	12d18 <memset+0x20>
   12d92:	bf00      	nop

00012d94 <__register_exitproc>:
   12d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12d98:	4d2c      	ldr	r5, [pc, #176]	; (12e4c <__register_exitproc+0xb8>)
   12d9a:	4606      	mov	r6, r0
   12d9c:	6828      	ldr	r0, [r5, #0]
   12d9e:	4698      	mov	r8, r3
   12da0:	460f      	mov	r7, r1
   12da2:	4691      	mov	r9, r2
   12da4:	f000 f882 	bl	12eac <__retarget_lock_acquire_recursive>
   12da8:	4b29      	ldr	r3, [pc, #164]	; (12e50 <__register_exitproc+0xbc>)
   12daa:	681c      	ldr	r4, [r3, #0]
   12dac:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   12db0:	2b00      	cmp	r3, #0
   12db2:	d03e      	beq.n	12e32 <__register_exitproc+0x9e>
   12db4:	685a      	ldr	r2, [r3, #4]
   12db6:	2a1f      	cmp	r2, #31
   12db8:	dc1c      	bgt.n	12df4 <__register_exitproc+0x60>
   12dba:	f102 0e01 	add.w	lr, r2, #1
   12dbe:	b176      	cbz	r6, 12dde <__register_exitproc+0x4a>
   12dc0:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   12dc4:	2401      	movs	r4, #1
   12dc6:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   12dca:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   12dce:	4094      	lsls	r4, r2
   12dd0:	4320      	orrs	r0, r4
   12dd2:	2e02      	cmp	r6, #2
   12dd4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   12dd8:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   12ddc:	d023      	beq.n	12e26 <__register_exitproc+0x92>
   12dde:	3202      	adds	r2, #2
   12de0:	f8c3 e004 	str.w	lr, [r3, #4]
   12de4:	6828      	ldr	r0, [r5, #0]
   12de6:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   12dea:	f000 f861 	bl	12eb0 <__retarget_lock_release_recursive>
   12dee:	2000      	movs	r0, #0
   12df0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12df4:	4b17      	ldr	r3, [pc, #92]	; (12e54 <__register_exitproc+0xc0>)
   12df6:	b30b      	cbz	r3, 12e3c <__register_exitproc+0xa8>
   12df8:	f44f 70c8 	mov.w	r0, #400	; 0x190
   12dfc:	f3af 8000 	nop.w
   12e00:	4603      	mov	r3, r0
   12e02:	b1d8      	cbz	r0, 12e3c <__register_exitproc+0xa8>
   12e04:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   12e08:	6002      	str	r2, [r0, #0]
   12e0a:	2100      	movs	r1, #0
   12e0c:	6041      	str	r1, [r0, #4]
   12e0e:	460a      	mov	r2, r1
   12e10:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   12e14:	f04f 0e01 	mov.w	lr, #1
   12e18:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   12e1c:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   12e20:	2e00      	cmp	r6, #0
   12e22:	d0dc      	beq.n	12dde <__register_exitproc+0x4a>
   12e24:	e7cc      	b.n	12dc0 <__register_exitproc+0x2c>
   12e26:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   12e2a:	430c      	orrs	r4, r1
   12e2c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   12e30:	e7d5      	b.n	12dde <__register_exitproc+0x4a>
   12e32:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   12e36:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   12e3a:	e7bb      	b.n	12db4 <__register_exitproc+0x20>
   12e3c:	6828      	ldr	r0, [r5, #0]
   12e3e:	f000 f837 	bl	12eb0 <__retarget_lock_release_recursive>
   12e42:	f04f 30ff 	mov.w	r0, #4294967295
   12e46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12e4a:	bf00      	nop
   12e4c:	20000938 	.word	0x20000938
   12e50:	00013f44 	.word	0x00013f44
   12e54:	00000000 	.word	0x00000000

00012e58 <register_fini>:
   12e58:	4b02      	ldr	r3, [pc, #8]	; (12e64 <register_fini+0xc>)
   12e5a:	b113      	cbz	r3, 12e62 <register_fini+0xa>
   12e5c:	4802      	ldr	r0, [pc, #8]	; (12e68 <register_fini+0x10>)
   12e5e:	f000 b805 	b.w	12e6c <atexit>
   12e62:	4770      	bx	lr
   12e64:	00000000 	.word	0x00000000
   12e68:	00012e79 	.word	0x00012e79

00012e6c <atexit>:
   12e6c:	2300      	movs	r3, #0
   12e6e:	4601      	mov	r1, r0
   12e70:	461a      	mov	r2, r3
   12e72:	4618      	mov	r0, r3
   12e74:	f7ff bf8e 	b.w	12d94 <__register_exitproc>

00012e78 <__libc_fini_array>:
   12e78:	b538      	push	{r3, r4, r5, lr}
   12e7a:	4c0a      	ldr	r4, [pc, #40]	; (12ea4 <__libc_fini_array+0x2c>)
   12e7c:	4d0a      	ldr	r5, [pc, #40]	; (12ea8 <__libc_fini_array+0x30>)
   12e7e:	1b64      	subs	r4, r4, r5
   12e80:	10a4      	asrs	r4, r4, #2
   12e82:	d00a      	beq.n	12e9a <__libc_fini_array+0x22>
   12e84:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   12e88:	3b01      	subs	r3, #1
   12e8a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   12e8e:	3c01      	subs	r4, #1
   12e90:	f855 3904 	ldr.w	r3, [r5], #-4
   12e94:	4798      	blx	r3
   12e96:	2c00      	cmp	r4, #0
   12e98:	d1f9      	bne.n	12e8e <__libc_fini_array+0x16>
   12e9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12e9e:	f001 b85f 	b.w	13f60 <_fini>
   12ea2:	bf00      	nop
   12ea4:	00013f70 	.word	0x00013f70
   12ea8:	00013f6c 	.word	0x00013f6c

00012eac <__retarget_lock_acquire_recursive>:
   12eac:	4770      	bx	lr
   12eae:	bf00      	nop

00012eb0 <__retarget_lock_release_recursive>:
   12eb0:	4770      	bx	lr
   12eb2:	bf00      	nop
   12eb4:	682f2e2e 	.word	0x682f2e2e
   12eb8:	702f6c70 	.word	0x702f6c70
   12ebc:	2f74726f 	.word	0x2f74726f
   12ec0:	5f6c7068 	.word	0x5f6c7068
   12ec4:	6f697067 	.word	0x6f697067
   12ec8:	7361625f 	.word	0x7361625f
   12ecc:	00682e65 	.word	0x00682e65
   12ed0:	682f2e2e 	.word	0x682f2e2e
   12ed4:	692f6c61 	.word	0x692f6c61
   12ed8:	756c636e 	.word	0x756c636e
   12edc:	682f6564 	.word	0x682f6564
   12ee0:	775f6c61 	.word	0x775f6c61
   12ee4:	682e7464 	.word	0x682e7464
   12ee8:	00000000 	.word	0x00000000
   12eec:	682f2e2e 	.word	0x682f2e2e
   12ef0:	732f6c61 	.word	0x732f6c61
   12ef4:	682f6372 	.word	0x682f6372
   12ef8:	635f6c61 	.word	0x635f6c61
   12efc:	6e656c61 	.word	0x6e656c61
   12f00:	2e726164 	.word	0x2e726164
   12f04:	00000063 	.word	0x00000063
   12f08:	682f2e2e 	.word	0x682f2e2e
   12f0c:	732f6c61 	.word	0x732f6c61
   12f10:	682f6372 	.word	0x682f6372
   12f14:	635f6c61 	.word	0x635f6c61
   12f18:	615f6e61 	.word	0x615f6e61
   12f1c:	636e7973 	.word	0x636e7973
   12f20:	0000632e 	.word	0x0000632e
   12f24:	682f2e2e 	.word	0x682f2e2e
   12f28:	732f6c61 	.word	0x732f6c61
   12f2c:	682f6372 	.word	0x682f6372
   12f30:	635f6c61 	.word	0x635f6c61
   12f34:	735f6372 	.word	0x735f6372
   12f38:	2e636e79 	.word	0x2e636e79
   12f3c:	00000063 	.word	0x00000063
   12f40:	682f2e2e 	.word	0x682f2e2e
   12f44:	732f6c61 	.word	0x732f6c61
   12f48:	682f6372 	.word	0x682f6372
   12f4c:	695f6c61 	.word	0x695f6c61
   12f50:	6d5f6332 	.word	0x6d5f6332
   12f54:	7973615f 	.word	0x7973615f
   12f58:	632e636e 	.word	0x632e636e
   12f5c:	00000000 	.word	0x00000000
   12f60:	682f2e2e 	.word	0x682f2e2e
   12f64:	732f6c61 	.word	0x732f6c61
   12f68:	682f6372 	.word	0x682f6372
   12f6c:	705f6c61 	.word	0x705f6c61
   12f70:	632e6d77 	.word	0x632e6d77
   12f74:	00000000 	.word	0x00000000
   12f78:	682f2e2e 	.word	0x682f2e2e
   12f7c:	732f6c61 	.word	0x732f6c61
   12f80:	682f6372 	.word	0x682f6372
   12f84:	715f6c61 	.word	0x715f6c61
   12f88:	5f697073 	.word	0x5f697073
   12f8c:	636e7973 	.word	0x636e7973
   12f90:	0000632e 	.word	0x0000632e
   12f94:	682f2e2e 	.word	0x682f2e2e
   12f98:	732f6c61 	.word	0x732f6c61
   12f9c:	682f6372 	.word	0x682f6372
   12fa0:	735f6c61 	.word	0x735f6c61
   12fa4:	6d5f6970 	.word	0x6d5f6970
   12fa8:	7973615f 	.word	0x7973615f
   12fac:	632e636e 	.word	0x632e636e
   12fb0:	00000000 	.word	0x00000000
   12fb4:	682f2e2e 	.word	0x682f2e2e
   12fb8:	732f6c61 	.word	0x732f6c61
   12fbc:	682f6372 	.word	0x682f6372
   12fc0:	735f6c61 	.word	0x735f6c61
   12fc4:	6d5f6970 	.word	0x6d5f6970
   12fc8:	6e79735f 	.word	0x6e79735f
   12fcc:	00632e63 	.word	0x00632e63
   12fd0:	682f2e2e 	.word	0x682f2e2e
   12fd4:	732f6c61 	.word	0x732f6c61
   12fd8:	682f6372 	.word	0x682f6372
   12fdc:	745f6c61 	.word	0x745f6c61
   12fe0:	72656d69 	.word	0x72656d69
   12fe4:	0000632e 	.word	0x0000632e
   12fe8:	682f2e2e 	.word	0x682f2e2e
   12fec:	752f6c61 	.word	0x752f6c61
   12ff0:	736c6974 	.word	0x736c6974
   12ff4:	6372732f 	.word	0x6372732f
   12ff8:	6974752f 	.word	0x6974752f
   12ffc:	6c5f736c 	.word	0x6c5f736c
   13000:	2e747369 	.word	0x2e747369
   13004:	00000063 	.word	0x00000063
   13008:	03020100 	.word	0x03020100
   1300c:	07060504 	.word	0x07060504
   13010:	14100c08 	.word	0x14100c08
   13014:	40302018 	.word	0x40302018

00013018 <_map>:
   13018:	00000004 00000004 00000005 00000005     ................
   13028:	00000006 00000056 00000007 00000057     ....V.......W...
   13038:	682f2e2e 652f6c70 682f6369 655f6c70     ../hpl/eic/hpl_e
   13048:	632e6369 00000000                       ic.c....

00013050 <user_mux_confs>:
   13050:	00000100 00000000 00000000 00000000     ................
	...

00013094 <channel_confs>:
   13094:	0000065e 00000000 00000000 00000000     ^...............
	...

000130d4 <interrupt_cfg>:
	...
   13154:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
   13164:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
   13174:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
   13184:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
   13194:	65735f6c 6d6f6372 0000632e 40003000     l_sercom.c...0.@
   131a4:	40003400 41012000 41014000 43000000     .4.@. .A.@.A...C
   131b4:	43000400 43000800 43000c00              ...C...C...C

000131c0 <sercomspi_regs>:
   131c0:	0020000c 00020000 00000000 01ff009f     .. .............
   131d0:	30000c04 02000000 00000000 ff009f00     ...0............
   131e0:	00000601 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
   131f0:	63745f6c 0000632e 40003800 40003c00     l_tc.c...8.@.<.@
   13200:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
   13210:	43001400 43001800                       ...C...C

00013218 <_usb_ep_cfgs>:
   13218:	200014b4 00000000 00000040 200014f4     ... ....@...... 
   13228:	20001534 00400040 20001574 200015b4     4.. @.@.t.. ... 
   13238:	00400040 200015f4 20001634 00400040     @.@.... 4.. @.@.
   13248:	20001674 200016b4 00400040 00000804     t.. ... @.@.....
   13258:	00004a25 682f2e2e 772f6c70 682f7464     %J..../hpl/wdt/h
   13268:	775f6c70 632e7464 00000000 682f2e2e     pl_wdt.c....../h
   13278:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
   13288:	7361625f 00682e65                       _base.h.

00013290 <n25q256a_interface>:
   13290:	0000ae01 0000aea5 0000afb5 0000b16d     ............m...
   132a0:	0000b1fd 752f2e2e 642f6273 63697665     ....../usb/devic
   132b0:	73752f65 2e636462 00000063              e/usbdc.c...

000132bc <_ZTV13CANOpen_Class>:
	...
   132c4:	0000dc55                                U...

000132c8 <_ZTV8CO_Class>:
	...
   132d0:	0000dc55                                U...

000132d4 <_ZTV15CO_Driver_Class>:
	...
   132dc:	0000dc55                                U...

000132e0 <_ZL13OD_record1018>:
   132e0:	200002d8 00000005 00000001 200002dc     ... ........... 
   132f0:	00000085 00000004 200002e0 00000085     ........... ....
   13300:	00000004 200002e4 00000085 00000004     ....... ........
   13310:	200002e8 00000085 00000004              ... ........

0001331c <_ZL13OD_record1200>:
   1331c:	200002f4 00000005 00000001 200002f8     ... ........... 
   1332c:	00000085 00000004 200002fc 00000085     ........... ....
   1333c:	00000004                                ....

00013340 <_ZL13OD_record1400>:
   13340:	20000300 00000005 00000001 20000304     ... ........... 
   13350:	0000008d 00000004 20000308 0000000d     ........... ....
   13360:	00000001                                ....

00013364 <_ZL13OD_record1401>:
   13364:	2000030c 00000005 00000001 20000310     ... ........... 
   13374:	0000008d 00000004 20000314 0000000d     ........... ....
   13384:	00000001                                ....

00013388 <_ZL13OD_record1402>:
   13388:	20000318 00000005 00000001 2000031c     ... ........... 
   13398:	0000008d 00000004 20000320 0000000d     ........ .. ....
   133a8:	00000001                                ....

000133ac <_ZL13OD_record1403>:
   133ac:	20000324 00000005 00000001 20000328     $.. ........(.. 
   133bc:	0000008d 00000004 2000032c 0000000d     ........,.. ....
   133cc:	00000001                                ....

000133d0 <_ZL13OD_record1600>:
   133d0:	20000330 0000000d 00000001 20000334     0.. ........4.. 
   133e0:	0000008d 00000004 20000338 0000008d     ........8.. ....
   133f0:	00000004 2000033c 0000008d 00000004     ....<.. ........
   13400:	20000340 0000008d 00000004 20000344     @.. ........D.. 
   13410:	0000008d 00000004 20000348 0000008d     ........H.. ....
   13420:	00000004 2000034c 0000008d 00000004     ....L.. ........
   13430:	20000350 0000008d 00000004              P.. ........

0001343c <_ZL13OD_record1601>:
   1343c:	20000354 0000000d 00000001 20000358     T.. ........X.. 
   1344c:	0000008d 00000004 2000035c 0000008d     ........\.. ....
   1345c:	00000004 20000360 0000008d 00000004     ....`.. ........
   1346c:	20000364 0000008d 00000004 20000368     d.. ........h.. 
   1347c:	0000008d 00000004 2000036c 0000008d     ........l.. ....
   1348c:	00000004 20000370 0000008d 00000004     ....p.. ........
   1349c:	20000374 0000008d 00000004              t.. ........

000134a8 <_ZL13OD_record1602>:
   134a8:	20000378 0000000d 00000001 2000037c     x.. ........|.. 
   134b8:	0000008d 00000004 20000380 0000008d     ........... ....
   134c8:	00000004 20000384 0000008d 00000004     ....... ........
   134d8:	20000388 0000008d 00000004 2000038c     ... ........... 
   134e8:	0000008d 00000004 20000390 0000008d     ........... ....
   134f8:	00000004 20000394 0000008d 00000004     ....... ........
   13508:	20000398 0000008d 00000004              ... ........

00013514 <_ZL13OD_record1603>:
   13514:	2000039c 0000000d 00000001 200003a0     ... ........... 
   13524:	0000008d 00000004 200003a4 0000008d     ........... ....
   13534:	00000004 200003a8 0000008d 00000004     ....... ........
   13544:	200003ac 0000008d 00000004 200003b0     ... ........... 
   13554:	0000008d 00000004 200003b4 0000008d     ........... ....
   13564:	00000004 200003b8 0000008d 00000004     ....... ........
   13574:	200003bc 0000008d 00000004              ... ........

00013580 <_ZL13OD_record1800>:
   13580:	200003c0 00000005 00000001 200003c4     ... ........... 
   13590:	0000008d 00000004 200003c8 0000000d     ........... ....
   135a0:	00000001 200003cc 0000008d 00000002     ....... ........
   135b0:	200003d0 0000000d 00000001 200003d4     ... ........... 
   135c0:	0000008d 00000002 200003d8 0000000d     ........... ....
   135d0:	00000001                                ....

000135d4 <_ZL13OD_record1801>:
   135d4:	200003dc 00000005 00000001 200003e0     ... ........... 
   135e4:	0000008d 00000004 200003e4 0000000d     ........... ....
   135f4:	00000001 200003e8 0000008d 00000002     ....... ........
   13604:	200003ec 0000000d 00000001 200003f0     ... ........... 
   13614:	0000008d 00000002 200003f4 0000000d     ........... ....
   13624:	00000001                                ....

00013628 <_ZL13OD_record1802>:
   13628:	200003f8 00000005 00000001 200003fc     ... ........... 
   13638:	0000008d 00000004 20000400 0000000d     ........... ....
   13648:	00000001 20000404 0000008d 00000002     ....... ........
   13658:	20000408 0000000d 00000001 2000040c     ... ........... 
   13668:	0000008d 00000002 20000410 0000000d     ........... ....
   13678:	00000001                                ....

0001367c <_ZL13OD_record1803>:
   1367c:	20000414 00000005 00000001 20000418     ... ........... 
   1368c:	0000008d 00000004 2000041c 0000000d     ........... ....
   1369c:	00000001 20000420 0000008d 00000002     .... .. ........
   136ac:	20000424 0000000d 00000001 20000428     $.. ........(.. 
   136bc:	0000008d 00000002 2000042c 0000000d     ........,.. ....
   136cc:	00000001                                ....

000136d0 <_ZL13OD_record1A00>:
   136d0:	20000430 0000000d 00000001 20000434     0.. ........4.. 
   136e0:	0000008d 00000004 20000438 0000008d     ........8.. ....
   136f0:	00000004 2000043c 0000008d 00000004     ....<.. ........
   13700:	20000440 0000008d 00000004 20000444     @.. ........D.. 
   13710:	0000008d 00000004 20000448 0000008d     ........H.. ....
   13720:	00000004 2000044c 0000008d 00000004     ....L.. ........
   13730:	20000450 0000008d 00000004              P.. ........

0001373c <_ZL13OD_record1A01>:
   1373c:	20000454 0000000d 00000001 20000458     T.. ........X.. 
   1374c:	0000008d 00000004 2000045c 0000008d     ........\.. ....
   1375c:	00000004 20000460 0000008d 00000004     ....`.. ........
   1376c:	20000464 0000008d 00000004 20000468     d.. ........h.. 
   1377c:	0000008d 00000004 2000046c 0000008d     ........l.. ....
   1378c:	00000004 20000470 0000008d 00000004     ....p.. ........
   1379c:	20000474 0000008d 00000004              t.. ........

000137a8 <_ZL13OD_record1A02>:
   137a8:	20000478 0000000d 00000001 2000047c     x.. ........|.. 
   137b8:	0000008d 00000004 20000480 0000008d     ........... ....
   137c8:	00000004 20000484 0000008d 00000004     ....... ........
   137d8:	20000488 0000008d 00000004 2000048c     ... ........... 
   137e8:	0000008d 00000004 20000490 0000008d     ........... ....
   137f8:	00000004 20000494 0000008d 00000004     ....... ........
   13808:	20000498 0000008d 00000004              ... ........

00013814 <_ZL13OD_record1A03>:
   13814:	2000049c 0000000d 00000001 200004a0     ... ........... 
   13824:	0000008d 00000004 200004a4 0000008d     ........... ....
   13834:	00000004 200004a8 0000008d 00000004     ....... ........
   13844:	200004ac 0000008d 00000004 200004b0     ... ........... 
   13854:	0000008d 00000004 200004b4 0000008d     ........... ....
   13864:	00000004 200004b8 0000008d 00000004     ....... ........
   13874:	200004bc 0000008d 00000004              ... ........

00013880 <_ZL13OD_record2120>:
   13880:	200001a8 00000006 00000001 200001b0     ... ........... 
   13890:	000000be 00000008 200001b8 000000be     ........... ....
   138a0:	00000008 200001c0 000000be 00000004     ....... ........
   138b0:	200001c8 000000be 00000008 00000000     ... ............
   138c0:	0000000e 00000000                       ........

000138c8 <_ZL13OD_record2130>:
   138c8:	200001d8 00000006 00000001 200001d9     ... ........... 
   138d8:	00000006 0000001e 200001f8 0000008e     ........... ....
   138e8:	00000008 20000200 000000be 00000004     ....... ........

000138f8 <CO_ObjDict>:
   138f8:	00001000 00000000 00000085 00000004     ................
   13908:	20000298 00001001 00000000 00000036     ... ........6...
   13918:	00000001 2000011c 00001002 00000000     ....... ........
   13928:	000000b6 00000004 20000120 00001003     ........ .. ....
   13938:	00000008 0000008e 00000004 20000124     ............$.. 
   13948:	00001005 00000000 0000008d 00000004     ................
   13958:	2000029c 00001006 00000000 0000008d     ... ............
   13968:	00000004 200002a0 00001007 00000000     ....... ........
   13978:	0000008d 00000004 200002a4 00001008     ........... ....
   13988:	00000000 00000005 0000000b 200002a8     ............... 
   13998:	00001009 00000000 00000005 00000004     ................
   139a8:	200002b3 0000100a 00000000 00000005     ... ............
   139b8:	00000004 200002b7 00001010 00000001     ....... ........
   139c8:	0000008e 00000004 20000144 00001011     ........D.. ....
   139d8:	00000001 0000008e 00000004 20000148     ............H.. 
   139e8:	00001014 00000000 00000085 00000004     ................
   139f8:	200002bc 00001015 00000000 0000008d     ... ............
   13a08:	00000002 200002c0 00001016 00000004     ....... ........
   13a18:	0000008d 00000004 200002c4 00001017     ........... ....
   13a28:	00000000 0000008d 00000002 200002d4     ............... 
   13a38:	00001018 00000004 00000000 00000000     ................
   13a48:	000132e0 00001019 00000000 0000000d     .2..............
   13a58:	00000001 200002ec 00001029 00000006     ....... ).......
   13a68:	0000000d 00000001 200002ed 00001200     ........... ....
   13a78:	00000002 00000000 00000000 0001331c     .............3..
   13a88:	00001400 00000002 00000000 00000000     ................
   13a98:	00013340 00001401 00000002 00000000     @3..............
   13aa8:	00000000 00013364 00001402 00000002     ....d3..........
	...
   13ac0:	00013388 00001403 00000002 00000000     .3..............
   13ad0:	00000000 000133ac 00001600 00000008     .....3..........
	...
   13ae8:	000133d0 00001601 00000008 00000000     .3..............
   13af8:	00000000 0001343c 00001602 00000008     ....<4..........
	...
   13b10:	000134a8 00001603 00000008 00000000     .4..............
   13b20:	00000000 00013514 00001800 00000006     .....5..........
	...
   13b38:	00013580 00001801 00000006 00000000     .5..............
   13b48:	00000000 000135d4 00001802 00000006     .....5..........
	...
   13b60:	00013628 00001803 00000006 00000000     (6..............
   13b70:	00000000 0001367c 00001a00 00000008     ....|6..........
	...
   13b88:	000136d0 00001a01 00000008 00000000     .6..............
   13b98:	00000000 0001373c 00001a02 00000008     ....<7..........
	...
   13bb0:	000137a8 00001a03 00000008 00000000     .7..............
   13bc0:	00000000 00013814 00001f80 00000000     .....8..........
   13bd0:	0000008d 00000004 200004c0 00002100     ........... .!..
   13be0:	00000000 00000036 0000000a 2000014c     ....6.......L.. 
   13bf0:	00002101 00000000 0000000d 00000001     .!..............
   13c00:	200004c4 00002102 00000000 0000008d     ... .!..........
   13c10:	00000002 200004c6 00002103 00000000     ....... .!......
   13c20:	0000008e 00000002 20000156 00002104     ........V.. .!..
   13c30:	00000000 00000086 00000002 20000158     ............X.. 
   13c40:	00002106 00000000 00000087 00000004     .!..............
   13c50:	2000024c 00002107 00000005 000000be     L.. .!..........
   13c60:	00000002 2000015a 00002108 00000001     ....Z.. .!......
   13c70:	000000b6 00000002 20000164 00002109     ........d.. .!..
   13c80:	00000001 000000b6 00000002 20000166     ............f.. 
   13c90:	00002110 00000010 000000fe 00000004     .!..............
   13ca0:	20000168 00002111 00000010 000000fd     h.. .!..........
   13cb0:	00000004 200004c8 00002112 00000010     ....... .!......
   13cc0:	000000ff 00000004 20000250 00002120     ........P..  !..
   13cd0:	00000005 00000000 00000000 00013880     .............8..
   13ce0:	00002130 00000003 00000000 00000000     0!..............
   13cf0:	000138c8 00006000 00000008 00000076     .8...`......v...
   13d00:	00000001 20000208 00006200 00000008     ....... .b......
   13d10:	0000003e 00000001 20000210 00006401     >.......... .d..
   13d20:	0000000c 000000b6 00000002 20000218     ............... 
   13d30:	00006411 00000008 000000be 00000002     .d..............
   13d40:	20000230                                0.. 

00013d44 <_ZL17crc16_ccitt_table>:
   13d44:	10210000 30632042 50a54084 70e760c6     ..!.B c0.@.P.`.p
   13d54:	91298108 b16ba14a d1adc18c f1efe1ce     ..).J.k.........
   13d64:	02101231 22523273 429452b5 62d672f7     1...s2R".R.B.r.b
   13d74:	83189339 a35ab37b c39cd3bd e3def3ff     9...{.Z.........
   13d84:	34432462 14010420 74c764e6 548544a4     b$C4 ....d.t.D.T
   13d94:	b54ba56a 95098528 f5cfe5ee d58dc5ac     j.K.(...........
   13da4:	26723653 06301611 66f676d7 46b45695     S6r&..0..v.f.V.F
   13db4:	a77ab75b 87389719 e7fef7df c7bcd79d     [.z...8.........
   13dc4:	58e548c4 78a76886 18610840 38232802     .H.X.h.x@.a..(#8
   13dd4:	d9edc9cc f9afe98e 99698948 b92ba90a     ........H.i...+.
   13de4:	4ad45af5 6a967ab7 0a501a71 2a123a33     .Z.J.z.jq.P.3:.*
   13df4:	cbdcdbfd eb9efbbf 8b589b79 ab1abb3b     ........y.X.;...
   13e04:	7c876ca6 5cc54ce4 3c032c22 1c410c60     .l.|.L.\",.<`.A.
   13e14:	fd8fedae ddcdcdec bd0bad2a 9d498d68     ........*...h.I.
   13e24:	6eb67e97 4ef45ed5 2e323e13 0e701e51     .~.n.^.N.>2.Q.p.
   13e34:	efbeff9f cffcdfdd af3abf1b 8f789f59     ..........:.Y.x.
   13e44:	81a99188 a1ebb1ca c12dd10c e16ff14e     ..........-.N.o.
   13e54:	00a11080 20e330c2 40255004 60677046     .....0. .P%@Fpg`
   13e64:	939883b9 b3daa3fb d31cc33d f35ee37f     ........=.....^.
   13e74:	129002b1 32d222f3 52144235 72566277     .....".25B.RwbVr
   13e84:	a5cbb5ea 858995a8 e54ff56e c50dd52c     ........n.O.,...
   13e94:	24c334e2 048114a0 64477466 44055424     .4.$....ftGd$T.D
   13ea4:	b7faa7db 97b88799 f77ee75f d73cc71d     ........_.~...<.
   13eb4:	36f226d3 16b00691 76766657 56344615     .&.6....Wfvv.F4V
   13ec4:	c96dd94c e92ff90e 89e999c8 a9abb98a     L.m.../.........
   13ed4:	48655844 68277806 08e118c0 28a33882     DXeH.x'h.....8.(
   13ee4:	db5ccb7d fb1eeb3f 9bd88bf9 bb9aabbb     }.\.?...........
   13ef4:	5a544a75 7a166a37 1ad00af1 3a922ab3     uJTZ7j.z.....*.:
   13f04:	ed0ffd2e cd4ddd6c ad8bbdaa 8dc99de8     ....l.M.........
   13f14:	6c077c26 4c455c64 2c833ca2 0cc11ce0     &|.ld\EL.<.,....
   13f24:	ff3eef1f df7ccf5d bfbaaf9b 9ff88fd9     ..>.].|.........
   13f34:	7e366e17 5e744e55 3eb22e93 1ef00ed1     .n6~UNt^...>....

00013f44 <_global_impure_ptr>:
   13f44:	20000510                                ... 

00013f48 <_init>:
   13f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13f4a:	bf00      	nop
   13f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   13f4e:	bc08      	pop	{r3}
   13f50:	469e      	mov	lr, r3
   13f52:	4770      	bx	lr

00013f54 <__init_array_start>:
   13f54:	00012e59 	.word	0x00012e59

00013f58 <__frame_dummy_init_array_entry>:
   13f58:	00000289 000003a5                       ........

00013f60 <_fini>:
   13f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13f62:	bf00      	nop
   13f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
   13f66:	bc08      	pop	{r3}
   13f68:	469e      	mov	lr, r3
   13f6a:	4770      	bx	lr

00013f6c <__fini_array_start>:
   13f6c:	00000265 	.word	0x00000265
