
CANOpenMaster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00013f20  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00013f20  00013f20  00023f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000093c  20000000  00013f28  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0003093c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0003093c  2**0
                  CONTENTS
  5 .bss          00001304  2000093c  00014864  0003093c  2**2
                  ALLOC
  6 .stack        00010000  20001c40  00015b68  0003093c  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0003093c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0003096a  2**0
                  CONTENTS, READONLY
  9 .debug_info   000691bb  00000000  00000000  000309c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008809  00000000  00000000  00099b7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001868b  00000000  00000000  000a2387  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002bd8  00000000  00000000  000baa12  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000028c0  00000000  00000000  000bd5ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0004aa45  00000000  00000000  000bfeaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00036335  00000000  00000000  0010a8ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00137295  00000000  00000000  00140c24  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000b820  00000000  00000000  00277ebc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
{0x6401, 0x0C, 0xB6,  2, (void*)&CO_OD_RAM.readAnalogueInput16Bit[0]},
{0x6411, 0x08, 0xBE,  2, (void*)&CO_OD_RAM.writeAnalogueOutput16Bit[0]},
};

// default constructor
CO_OD_Class::CO_OD_Class()
       0:	40 1c 01 20 d5 02 00 00 d1 02 00 00 d1 02 00 00     @.. ............
{
} //CO_OD
      10:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      2c:	d1 02 00 00 d1 02 00 00 00 00 00 00 d1 02 00 00     ................
      3c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      4c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      5c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      6c:	85 57 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     .W..............
      7c:	d1 02 00 00 2d 46 00 00 3d 46 00 00 4d 46 00 00     ....-F..=F..MF..
      8c:	5d 46 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ]F..............
      9c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      ac:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      bc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      cc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      dc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      f4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     104:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     114:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     124:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     134:	d1 02 00 00 81 69 00 00 9d 69 00 00 b9 69 00 00     .....i...i...i..
     144:	d5 69 00 00 f1 69 00 00 0d 6a 00 00 29 6a 00 00     .i...i...j..)j..
     154:	45 6a 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     Ej..............
     164:	d1 02 00 00 61 6a 00 00 7d 6a 00 00 99 6a 00 00     ....aj..}j...j..
     174:	b5 6a 00 00 d1 02 00 00 09 3c 00 00 65 a2 00 00     .j.......<..e...
     184:	75 a2 00 00 85 a2 00 00 95 a2 00 00 d1 02 00 00     u...............
     194:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1a4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1b4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1c4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1d4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1e4:	d1 02 00 00 d1 02 00 00 e9 79 00 00 05 7a 00 00     .........y...z..
     1f4:	21 7a 00 00 3d 7a 00 00 d1 02 00 00 d1 02 00 00     !z..=z..........
     204:	d1 02 00 00 59 7a 00 00 d1 02 00 00 d1 02 00 00     ....Yz..........
     214:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     224:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     234:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     244:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     254:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	2000093c 	.word	0x2000093c
     280:	00000000 	.word	0x00000000
     284:	00013f28 	.word	0x00013f28

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00013f28 	.word	0x00013f28
     2c4:	20000940 	.word	0x20000940
     2c8:	00013f28 	.word	0x00013f28
     2cc:	00000000 	.word	0x00000000

000002d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2d0:	e7fe      	b.n	2d0 <Dummy_Handler>
	...

000002d4 <Reset_Handler>:
{
     2d4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2d6:	4b17      	ldr	r3, [pc, #92]	; (334 <Reset_Handler+0x60>)
     2d8:	4a17      	ldr	r2, [pc, #92]	; (338 <Reset_Handler+0x64>)
     2da:	429a      	cmp	r2, r3
     2dc:	d010      	beq.n	300 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2de:	4b17      	ldr	r3, [pc, #92]	; (33c <Reset_Handler+0x68>)
     2e0:	4a14      	ldr	r2, [pc, #80]	; (334 <Reset_Handler+0x60>)
     2e2:	429a      	cmp	r2, r3
     2e4:	d20c      	bcs.n	300 <Reset_Handler+0x2c>
     2e6:	3b01      	subs	r3, #1
     2e8:	1a9b      	subs	r3, r3, r2
     2ea:	f023 0303 	bic.w	r3, r3, #3
     2ee:	3304      	adds	r3, #4
     2f0:	4413      	add	r3, r2
     2f2:	4911      	ldr	r1, [pc, #68]	; (338 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     2f4:	f851 0b04 	ldr.w	r0, [r1], #4
     2f8:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     2fc:	429a      	cmp	r2, r3
     2fe:	d1f9      	bne.n	2f4 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     300:	4b0f      	ldr	r3, [pc, #60]	; (340 <Reset_Handler+0x6c>)
     302:	4a10      	ldr	r2, [pc, #64]	; (344 <Reset_Handler+0x70>)
     304:	429a      	cmp	r2, r3
     306:	d20a      	bcs.n	31e <Reset_Handler+0x4a>
     308:	3b01      	subs	r3, #1
     30a:	1a9b      	subs	r3, r3, r2
     30c:	f023 0303 	bic.w	r3, r3, #3
     310:	3304      	adds	r3, #4
     312:	4413      	add	r3, r2
                *pDest++ = 0;
     314:	2100      	movs	r1, #0
     316:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     31a:	4293      	cmp	r3, r2
     31c:	d1fb      	bne.n	316 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31e:	4a0a      	ldr	r2, [pc, #40]	; (348 <Reset_Handler+0x74>)
     320:	4b0a      	ldr	r3, [pc, #40]	; (34c <Reset_Handler+0x78>)
     322:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     326:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     328:	4b09      	ldr	r3, [pc, #36]	; (350 <Reset_Handler+0x7c>)
     32a:	4798      	blx	r3
        main();
     32c:	4b09      	ldr	r3, [pc, #36]	; (354 <Reset_Handler+0x80>)
     32e:	4798      	blx	r3
     330:	e7fe      	b.n	330 <Reset_Handler+0x5c>
     332:	bf00      	nop
     334:	20000000 	.word	0x20000000
     338:	00013f28 	.word	0x00013f28
     33c:	2000093c 	.word	0x2000093c
     340:	20001c40 	.word	0x20001c40
     344:	2000093c 	.word	0x2000093c
     348:	e000ed00 	.word	0xe000ed00
     34c:	00000000 	.word	0x00000000
     350:	00012b25 	.word	0x00012b25
     354:	00000359 	.word	0x00000359

00000358 <main>:
#include "CANOpen_Class.h"

static CANOpen_Class cano(&CAN_CCU);

int main(void)
{
     358:	b580      	push	{r7, lr}
	atmel_start_init();
     35a:	4b0f      	ldr	r3, [pc, #60]	; (398 <main+0x40>)
     35c:	4798      	blx	r3
	cano.Init(1);
     35e:	2101      	movs	r1, #1
     360:	480e      	ldr	r0, [pc, #56]	; (39c <main+0x44>)
     362:	4b0f      	ldr	r3, [pc, #60]	; (3a0 <main+0x48>)
     364:	4798      	blx	r3
	while(!cano.StartNMTService());
     366:	4d0d      	ldr	r5, [pc, #52]	; (39c <main+0x44>)
     368:	4c0e      	ldr	r4, [pc, #56]	; (3a4 <main+0x4c>)
     36a:	4628      	mov	r0, r5
     36c:	47a0      	blx	r4
     36e:	2800      	cmp	r0, #0
     370:	d0fb      	beq.n	36a <main+0x12>
	/* Replace with your application code */
	while (1)
	{
		
		cano.Process();
     372:	4e0a      	ldr	r6, [pc, #40]	; (39c <main+0x44>)
     374:	4f0c      	ldr	r7, [pc, #48]	; (3a8 <main+0x50>)
		delay_us(500);
     376:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
		cano.Process();
     37a:	2200      	movs	r2, #0
     37c:	2101      	movs	r1, #1
     37e:	4630      	mov	r0, r6
     380:	47b8      	blx	r7
		delay_us(500);
     382:	4620      	mov	r0, r4
     384:	4d09      	ldr	r5, [pc, #36]	; (3ac <main+0x54>)
     386:	47a8      	blx	r5
		
		cano.Periodic_Process();
     388:	4621      	mov	r1, r4
     38a:	4630      	mov	r0, r6
     38c:	4b08      	ldr	r3, [pc, #32]	; (3b0 <main+0x58>)
     38e:	4798      	blx	r3
		delay_us(500);
     390:	4620      	mov	r0, r4
     392:	47a8      	blx	r5
     394:	e7f1      	b.n	37a <main+0x22>
     396:	bf00      	nop
     398:	000003e5 	.word	0x000003e5
     39c:	20000958 	.word	0x20000958
     3a0:	0000c765 	.word	0x0000c765
     3a4:	0000c885 	.word	0x0000c885
     3a8:	0000d1c5 	.word	0x0000d1c5
     3ac:	0000199d 	.word	0x0000199d
     3b0:	0000c819 	.word	0x0000c819

000003b4 <_GLOBAL__sub_I_main>:
	}
}
     3b4:	b510      	push	{r4, lr}
static CANOpen_Class cano(&CAN_CCU);
     3b6:	4c05      	ldr	r4, [pc, #20]	; (3cc <_GLOBAL__sub_I_main+0x18>)
     3b8:	4905      	ldr	r1, [pc, #20]	; (3d0 <_GLOBAL__sub_I_main+0x1c>)
     3ba:	4620      	mov	r0, r4
     3bc:	4b05      	ldr	r3, [pc, #20]	; (3d4 <_GLOBAL__sub_I_main+0x20>)
     3be:	4798      	blx	r3
     3c0:	4a05      	ldr	r2, [pc, #20]	; (3d8 <_GLOBAL__sub_I_main+0x24>)
     3c2:	4906      	ldr	r1, [pc, #24]	; (3dc <_GLOBAL__sub_I_main+0x28>)
     3c4:	4620      	mov	r0, r4
     3c6:	4b06      	ldr	r3, [pc, #24]	; (3e0 <_GLOBAL__sub_I_main+0x2c>)
     3c8:	4798      	blx	r3
     3ca:	bd10      	pop	{r4, pc}
     3cc:	20000958 	.word	0x20000958
     3d0:	20001a80 	.word	0x20001a80
     3d4:	0000c701 	.word	0x0000c701
     3d8:	20000000 	.word	0x20000000
     3dc:	0000c73d 	.word	0x0000c73d
     3e0:	00012af1 	.word	0x00012af1

000003e4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     3e4:	b580      	push	{r7, lr}
     3e6:	af00      	add	r7, sp, #0
	system_init();
     3e8:	4b03      	ldr	r3, [pc, #12]	; (3f8 <atmel_start_init+0x14>)
     3ea:	4798      	blx	r3
	usb_init();
     3ec:	4b03      	ldr	r3, [pc, #12]	; (3fc <atmel_start_init+0x18>)
     3ee:	4798      	blx	r3
	spi_nor_flash_init();
     3f0:	4b03      	ldr	r3, [pc, #12]	; (400 <atmel_start_init+0x1c>)
     3f2:	4798      	blx	r3
}
     3f4:	bf00      	nop
     3f6:	bd80      	pop	{r7, pc}
     3f8:	000014e1 	.word	0x000014e1
     3fc:	0000a969 	.word	0x0000a969
     400:	0000a8fd 	.word	0x0000a8fd

00000404 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     404:	b480      	push	{r7}
     406:	b085      	sub	sp, #20
     408:	af00      	add	r7, sp, #0
     40a:	60f8      	str	r0, [r7, #12]
     40c:	460b      	mov	r3, r1
     40e:	607a      	str	r2, [r7, #4]
     410:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     412:	7afa      	ldrb	r2, [r7, #11]
     414:	68fb      	ldr	r3, [r7, #12]
     416:	3220      	adds	r2, #32
     418:	6879      	ldr	r1, [r7, #4]
     41a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     41e:	bf00      	nop
     420:	3714      	adds	r7, #20
     422:	46bd      	mov	sp, r7
     424:	f85d 7b04 	ldr.w	r7, [sp], #4
     428:	4770      	bx	lr

0000042a <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
     42a:	b480      	push	{r7}
     42c:	b083      	sub	sp, #12
     42e:	af00      	add	r7, sp, #0
     430:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     432:	687b      	ldr	r3, [r7, #4]
     434:	691b      	ldr	r3, [r3, #16]
     436:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     43a:	687b      	ldr	r3, [r7, #4]
     43c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     43e:	bf00      	nop
     440:	370c      	adds	r7, #12
     442:	46bd      	mov	sp, r7
     444:	f85d 7b04 	ldr.w	r7, [sp], #4
     448:	4770      	bx	lr

0000044a <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
     44a:	b480      	push	{r7}
     44c:	b083      	sub	sp, #12
     44e:	af00      	add	r7, sp, #0
     450:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     452:	687b      	ldr	r3, [r7, #4]
     454:	691b      	ldr	r3, [r3, #16]
     456:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     45a:	687b      	ldr	r3, [r7, #4]
     45c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     45e:	bf00      	nop
     460:	370c      	adds	r7, #12
     462:	46bd      	mov	sp, r7
     464:	f85d 7b04 	ldr.w	r7, [sp], #4
     468:	4770      	bx	lr

0000046a <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
     46a:	b480      	push	{r7}
     46c:	b083      	sub	sp, #12
     46e:	af00      	add	r7, sp, #0
     470:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
     472:	687b      	ldr	r3, [r7, #4]
     474:	691b      	ldr	r3, [r3, #16]
     476:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
     47a:	687b      	ldr	r3, [r7, #4]
     47c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     47e:	bf00      	nop
     480:	370c      	adds	r7, #12
     482:	46bd      	mov	sp, r7
     484:	f85d 7b04 	ldr.w	r7, [sp], #4
     488:	4770      	bx	lr

0000048a <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
     48a:	b480      	push	{r7}
     48c:	b083      	sub	sp, #12
     48e:	af00      	add	r7, sp, #0
     490:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     492:	687b      	ldr	r3, [r7, #4]
     494:	691b      	ldr	r3, [r3, #16]
     496:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
     49a:	687b      	ldr	r3, [r7, #4]
     49c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     49e:	bf00      	nop
     4a0:	370c      	adds	r7, #12
     4a2:	46bd      	mov	sp, r7
     4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
     4a8:	4770      	bx	lr

000004aa <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
     4aa:	b480      	push	{r7}
     4ac:	b083      	sub	sp, #12
     4ae:	af00      	add	r7, sp, #0
     4b0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     4b2:	687b      	ldr	r3, [r7, #4]
     4b4:	695b      	ldr	r3, [r3, #20]
     4b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
     4ba:	687b      	ldr	r3, [r7, #4]
     4bc:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     4be:	bf00      	nop
     4c0:	370c      	adds	r7, #12
     4c2:	46bd      	mov	sp, r7
     4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     4c8:	4770      	bx	lr

000004ca <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
     4ca:	b480      	push	{r7}
     4cc:	b083      	sub	sp, #12
     4ce:	af00      	add	r7, sp, #0
     4d0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     4d2:	687b      	ldr	r3, [r7, #4]
     4d4:	695b      	ldr	r3, [r3, #20]
     4d6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
     4da:	687b      	ldr	r3, [r7, #4]
     4dc:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     4de:	bf00      	nop
     4e0:	370c      	adds	r7, #12
     4e2:	46bd      	mov	sp, r7
     4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
     4e8:	4770      	bx	lr

000004ea <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
     4ea:	b480      	push	{r7}
     4ec:	b083      	sub	sp, #12
     4ee:	af00      	add	r7, sp, #0
     4f0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     4f2:	687b      	ldr	r3, [r7, #4]
     4f4:	695b      	ldr	r3, [r3, #20]
     4f6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     4fa:	687b      	ldr	r3, [r7, #4]
     4fc:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     4fe:	bf00      	nop
     500:	370c      	adds	r7, #12
     502:	46bd      	mov	sp, r7
     504:	f85d 7b04 	ldr.w	r7, [sp], #4
     508:	4770      	bx	lr

0000050a <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
     50a:	b480      	push	{r7}
     50c:	b083      	sub	sp, #12
     50e:	af00      	add	r7, sp, #0
     510:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     512:	687b      	ldr	r3, [r7, #4]
     514:	695b      	ldr	r3, [r3, #20]
     516:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     51a:	687b      	ldr	r3, [r7, #4]
     51c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     51e:	bf00      	nop
     520:	370c      	adds	r7, #12
     522:	46bd      	mov	sp, r7
     524:	f85d 7b04 	ldr.w	r7, [sp], #4
     528:	4770      	bx	lr

0000052a <hri_mclk_set_APBAMASK_TC1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_TC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC1_bit(const void *const hw)
{
     52a:	b480      	push	{r7}
     52c:	b083      	sub	sp, #12
     52e:	af00      	add	r7, sp, #0
     530:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
     532:	687b      	ldr	r3, [r7, #4]
     534:	695b      	ldr	r3, [r3, #20]
     536:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
     53a:	687b      	ldr	r3, [r7, #4]
     53c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     53e:	bf00      	nop
     540:	370c      	adds	r7, #12
     542:	46bd      	mov	sp, r7
     544:	f85d 7b04 	ldr.w	r7, [sp], #4
     548:	4770      	bx	lr

0000054a <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
     54a:	b480      	push	{r7}
     54c:	b083      	sub	sp, #12
     54e:	af00      	add	r7, sp, #0
     550:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     552:	687b      	ldr	r3, [r7, #4]
     554:	699b      	ldr	r3, [r3, #24]
     556:	f043 0201 	orr.w	r2, r3, #1
     55a:	687b      	ldr	r3, [r7, #4]
     55c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     55e:	bf00      	nop
     560:	370c      	adds	r7, #12
     562:	46bd      	mov	sp, r7
     564:	f85d 7b04 	ldr.w	r7, [sp], #4
     568:	4770      	bx	lr

0000056a <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
     56a:	b480      	push	{r7}
     56c:	b083      	sub	sp, #12
     56e:	af00      	add	r7, sp, #0
     570:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     572:	687b      	ldr	r3, [r7, #4]
     574:	699b      	ldr	r3, [r3, #24]
     576:	f043 0202 	orr.w	r2, r3, #2
     57a:	687b      	ldr	r3, [r7, #4]
     57c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     57e:	bf00      	nop
     580:	370c      	adds	r7, #12
     582:	46bd      	mov	sp, r7
     584:	f85d 7b04 	ldr.w	r7, [sp], #4
     588:	4770      	bx	lr

0000058a <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
     58a:	b480      	push	{r7}
     58c:	b083      	sub	sp, #12
     58e:	af00      	add	r7, sp, #0
     590:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     592:	687b      	ldr	r3, [r7, #4]
     594:	699b      	ldr	r3, [r3, #24]
     596:	f043 0280 	orr.w	r2, r3, #128	; 0x80
     59a:	687b      	ldr	r3, [r7, #4]
     59c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     59e:	bf00      	nop
     5a0:	370c      	adds	r7, #12
     5a2:	46bd      	mov	sp, r7
     5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
     5a8:	4770      	bx	lr

000005aa <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
     5aa:	b480      	push	{r7}
     5ac:	b083      	sub	sp, #12
     5ae:	af00      	add	r7, sp, #0
     5b0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     5b2:	687b      	ldr	r3, [r7, #4]
     5b4:	699b      	ldr	r3, [r3, #24]
     5b6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     5ba:	687b      	ldr	r3, [r7, #4]
     5bc:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     5be:	bf00      	nop
     5c0:	370c      	adds	r7, #12
     5c2:	46bd      	mov	sp, r7
     5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     5c8:	4770      	bx	lr

000005ca <hri_mclk_set_APBBMASK_TC3_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TC2;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC3_bit(const void *const hw)
{
     5ca:	b480      	push	{r7}
     5cc:	b083      	sub	sp, #12
     5ce:	af00      	add	r7, sp, #0
     5d0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
     5d2:	687b      	ldr	r3, [r7, #4]
     5d4:	699b      	ldr	r3, [r3, #24]
     5d6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     5da:	687b      	ldr	r3, [r7, #4]
     5dc:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     5de:	bf00      	nop
     5e0:	370c      	adds	r7, #12
     5e2:	46bd      	mov	sp, r7
     5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
     5e8:	4770      	bx	lr

000005ea <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
     5ea:	b480      	push	{r7}
     5ec:	b083      	sub	sp, #12
     5ee:	af00      	add	r7, sp, #0
     5f0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     5f2:	687b      	ldr	r3, [r7, #4]
     5f4:	69db      	ldr	r3, [r3, #28]
     5f6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     5fa:	687b      	ldr	r3, [r7, #4]
     5fc:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     5fe:	bf00      	nop
     600:	370c      	adds	r7, #12
     602:	46bd      	mov	sp, r7
     604:	f85d 7b04 	ldr.w	r7, [sp], #4
     608:	4770      	bx	lr

0000060a <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
     60a:	b480      	push	{r7}
     60c:	b083      	sub	sp, #12
     60e:	af00      	add	r7, sp, #0
     610:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     612:	687b      	ldr	r3, [r7, #4]
     614:	6a1b      	ldr	r3, [r3, #32]
     616:	f043 0201 	orr.w	r2, r3, #1
     61a:	687b      	ldr	r3, [r7, #4]
     61c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     61e:	bf00      	nop
     620:	370c      	adds	r7, #12
     622:	46bd      	mov	sp, r7
     624:	f85d 7b04 	ldr.w	r7, [sp], #4
     628:	4770      	bx	lr

0000062a <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
     62a:	b480      	push	{r7}
     62c:	b083      	sub	sp, #12
     62e:	af00      	add	r7, sp, #0
     630:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     632:	687b      	ldr	r3, [r7, #4]
     634:	6a1b      	ldr	r3, [r3, #32]
     636:	f043 0202 	orr.w	r2, r3, #2
     63a:	687b      	ldr	r3, [r7, #4]
     63c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     63e:	bf00      	nop
     640:	370c      	adds	r7, #12
     642:	46bd      	mov	sp, r7
     644:	f85d 7b04 	ldr.w	r7, [sp], #4
     648:	4770      	bx	lr

0000064a <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
     64a:	b480      	push	{r7}
     64c:	b083      	sub	sp, #12
     64e:	af00      	add	r7, sp, #0
     650:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     652:	687b      	ldr	r3, [r7, #4]
     654:	6a1b      	ldr	r3, [r3, #32]
     656:	f043 0204 	orr.w	r2, r3, #4
     65a:	687b      	ldr	r3, [r7, #4]
     65c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     65e:	bf00      	nop
     660:	370c      	adds	r7, #12
     662:	46bd      	mov	sp, r7
     664:	f85d 7b04 	ldr.w	r7, [sp], #4
     668:	4770      	bx	lr

0000066a <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
     66a:	b480      	push	{r7}
     66c:	b083      	sub	sp, #12
     66e:	af00      	add	r7, sp, #0
     670:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     672:	687b      	ldr	r3, [r7, #4]
     674:	6a1b      	ldr	r3, [r3, #32]
     676:	f043 0208 	orr.w	r2, r3, #8
     67a:	687b      	ldr	r3, [r7, #4]
     67c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     67e:	bf00      	nop
     680:	370c      	adds	r7, #12
     682:	46bd      	mov	sp, r7
     684:	f85d 7b04 	ldr.w	r7, [sp], #4
     688:	4770      	bx	lr

0000068a <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
     68a:	b480      	push	{r7}
     68c:	b083      	sub	sp, #12
     68e:	af00      	add	r7, sp, #0
     690:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
     692:	687b      	ldr	r3, [r7, #4]
     694:	6a1b      	ldr	r3, [r3, #32]
     696:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     69a:	687b      	ldr	r3, [r7, #4]
     69c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     69e:	bf00      	nop
     6a0:	370c      	adds	r7, #12
     6a2:	46bd      	mov	sp, r7
     6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
     6a8:	4770      	bx	lr

000006aa <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     6aa:	b480      	push	{r7}
     6ac:	b085      	sub	sp, #20
     6ae:	af00      	add	r7, sp, #0
     6b0:	60f8      	str	r0, [r7, #12]
     6b2:	460b      	mov	r3, r1
     6b4:	607a      	str	r2, [r7, #4]
     6b6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     6b8:	7afb      	ldrb	r3, [r7, #11]
     6ba:	68fa      	ldr	r2, [r7, #12]
     6bc:	01db      	lsls	r3, r3, #7
     6be:	4413      	add	r3, r2
     6c0:	3308      	adds	r3, #8
     6c2:	687a      	ldr	r2, [r7, #4]
     6c4:	601a      	str	r2, [r3, #0]
}
     6c6:	bf00      	nop
     6c8:	3714      	adds	r7, #20
     6ca:	46bd      	mov	sp, r7
     6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
     6d0:	4770      	bx	lr

000006d2 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     6d2:	b480      	push	{r7}
     6d4:	b085      	sub	sp, #20
     6d6:	af00      	add	r7, sp, #0
     6d8:	60f8      	str	r0, [r7, #12]
     6da:	460b      	mov	r3, r1
     6dc:	607a      	str	r2, [r7, #4]
     6de:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     6e0:	7afb      	ldrb	r3, [r7, #11]
     6e2:	68fa      	ldr	r2, [r7, #12]
     6e4:	01db      	lsls	r3, r3, #7
     6e6:	4413      	add	r3, r2
     6e8:	3304      	adds	r3, #4
     6ea:	687a      	ldr	r2, [r7, #4]
     6ec:	601a      	str	r2, [r3, #0]
}
     6ee:	bf00      	nop
     6f0:	3714      	adds	r7, #20
     6f2:	46bd      	mov	sp, r7
     6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
     6f8:	4770      	bx	lr

000006fa <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     6fa:	b480      	push	{r7}
     6fc:	b085      	sub	sp, #20
     6fe:	af00      	add	r7, sp, #0
     700:	60f8      	str	r0, [r7, #12]
     702:	460b      	mov	r3, r1
     704:	607a      	str	r2, [r7, #4]
     706:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     708:	7afb      	ldrb	r3, [r7, #11]
     70a:	68fa      	ldr	r2, [r7, #12]
     70c:	01db      	lsls	r3, r3, #7
     70e:	4413      	add	r3, r2
     710:	3318      	adds	r3, #24
     712:	687a      	ldr	r2, [r7, #4]
     714:	601a      	str	r2, [r3, #0]
}
     716:	bf00      	nop
     718:	3714      	adds	r7, #20
     71a:	46bd      	mov	sp, r7
     71c:	f85d 7b04 	ldr.w	r7, [sp], #4
     720:	4770      	bx	lr

00000722 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     722:	b480      	push	{r7}
     724:	b085      	sub	sp, #20
     726:	af00      	add	r7, sp, #0
     728:	60f8      	str	r0, [r7, #12]
     72a:	460b      	mov	r3, r1
     72c:	607a      	str	r2, [r7, #4]
     72e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     730:	7afb      	ldrb	r3, [r7, #11]
     732:	68fa      	ldr	r2, [r7, #12]
     734:	01db      	lsls	r3, r3, #7
     736:	4413      	add	r3, r2
     738:	3314      	adds	r3, #20
     73a:	687a      	ldr	r2, [r7, #4]
     73c:	601a      	str	r2, [r3, #0]
}
     73e:	bf00      	nop
     740:	3714      	adds	r7, #20
     742:	46bd      	mov	sp, r7
     744:	f85d 7b04 	ldr.w	r7, [sp], #4
     748:	4770      	bx	lr

0000074a <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     74a:	b480      	push	{r7}
     74c:	b085      	sub	sp, #20
     74e:	af00      	add	r7, sp, #0
     750:	6078      	str	r0, [r7, #4]
     752:	4608      	mov	r0, r1
     754:	4611      	mov	r1, r2
     756:	461a      	mov	r2, r3
     758:	4603      	mov	r3, r0
     75a:	70fb      	strb	r3, [r7, #3]
     75c:	460b      	mov	r3, r1
     75e:	70bb      	strb	r3, [r7, #2]
     760:	4613      	mov	r3, r2
     762:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     764:	78fa      	ldrb	r2, [r7, #3]
     766:	78bb      	ldrb	r3, [r7, #2]
     768:	6879      	ldr	r1, [r7, #4]
     76a:	01d2      	lsls	r2, r2, #7
     76c:	440a      	add	r2, r1
     76e:	4413      	add	r3, r2
     770:	3330      	adds	r3, #48	; 0x30
     772:	781b      	ldrb	r3, [r3, #0]
     774:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     776:	7bfb      	ldrb	r3, [r7, #15]
     778:	f023 030f 	bic.w	r3, r3, #15
     77c:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
     77e:	787b      	ldrb	r3, [r7, #1]
     780:	f003 030f 	and.w	r3, r3, #15
     784:	b2da      	uxtb	r2, r3
     786:	7bfb      	ldrb	r3, [r7, #15]
     788:	4313      	orrs	r3, r2
     78a:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     78c:	78fa      	ldrb	r2, [r7, #3]
     78e:	78bb      	ldrb	r3, [r7, #2]
     790:	6879      	ldr	r1, [r7, #4]
     792:	01d2      	lsls	r2, r2, #7
     794:	440a      	add	r2, r1
     796:	4413      	add	r3, r2
     798:	3330      	adds	r3, #48	; 0x30
     79a:	7bfa      	ldrb	r2, [r7, #15]
     79c:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     79e:	bf00      	nop
     7a0:	3714      	adds	r7, #20
     7a2:	46bd      	mov	sp, r7
     7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
     7a8:	4770      	bx	lr

000007aa <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     7aa:	b480      	push	{r7}
     7ac:	b085      	sub	sp, #20
     7ae:	af00      	add	r7, sp, #0
     7b0:	6078      	str	r0, [r7, #4]
     7b2:	4608      	mov	r0, r1
     7b4:	4611      	mov	r1, r2
     7b6:	461a      	mov	r2, r3
     7b8:	4603      	mov	r3, r0
     7ba:	70fb      	strb	r3, [r7, #3]
     7bc:	460b      	mov	r3, r1
     7be:	70bb      	strb	r3, [r7, #2]
     7c0:	4613      	mov	r3, r2
     7c2:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7c4:	78fa      	ldrb	r2, [r7, #3]
     7c6:	78bb      	ldrb	r3, [r7, #2]
     7c8:	6879      	ldr	r1, [r7, #4]
     7ca:	01d2      	lsls	r2, r2, #7
     7cc:	440a      	add	r2, r1
     7ce:	4413      	add	r3, r2
     7d0:	3330      	adds	r3, #48	; 0x30
     7d2:	781b      	ldrb	r3, [r3, #0]
     7d4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     7d6:	7bfb      	ldrb	r3, [r7, #15]
     7d8:	f003 030f 	and.w	r3, r3, #15
     7dc:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
     7de:	787b      	ldrb	r3, [r7, #1]
     7e0:	011b      	lsls	r3, r3, #4
     7e2:	b2da      	uxtb	r2, r3
     7e4:	7bfb      	ldrb	r3, [r7, #15]
     7e6:	4313      	orrs	r3, r2
     7e8:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7ea:	78fa      	ldrb	r2, [r7, #3]
     7ec:	78bb      	ldrb	r3, [r7, #2]
     7ee:	6879      	ldr	r1, [r7, #4]
     7f0:	01d2      	lsls	r2, r2, #7
     7f2:	440a      	add	r2, r1
     7f4:	4413      	add	r3, r2
     7f6:	3330      	adds	r3, #48	; 0x30
     7f8:	7bfa      	ldrb	r2, [r7, #15]
     7fa:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     7fc:	bf00      	nop
     7fe:	3714      	adds	r7, #20
     800:	46bd      	mov	sp, r7
     802:	f85d 7b04 	ldr.w	r7, [sp], #4
     806:	4770      	bx	lr

00000808 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     808:	b480      	push	{r7}
     80a:	b085      	sub	sp, #20
     80c:	af00      	add	r7, sp, #0
     80e:	6078      	str	r0, [r7, #4]
     810:	4608      	mov	r0, r1
     812:	4611      	mov	r1, r2
     814:	461a      	mov	r2, r3
     816:	4603      	mov	r3, r0
     818:	70fb      	strb	r3, [r7, #3]
     81a:	460b      	mov	r3, r1
     81c:	70bb      	strb	r3, [r7, #2]
     81e:	4613      	mov	r3, r2
     820:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     822:	78fa      	ldrb	r2, [r7, #3]
     824:	78bb      	ldrb	r3, [r7, #2]
     826:	6879      	ldr	r1, [r7, #4]
     828:	01d2      	lsls	r2, r2, #7
     82a:	440a      	add	r2, r1
     82c:	4413      	add	r3, r2
     82e:	3340      	adds	r3, #64	; 0x40
     830:	781b      	ldrb	r3, [r3, #0]
     832:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
     834:	7bfb      	ldrb	r3, [r7, #15]
     836:	f023 0301 	bic.w	r3, r3, #1
     83a:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     83c:	787a      	ldrb	r2, [r7, #1]
     83e:	7bfb      	ldrb	r3, [r7, #15]
     840:	4313      	orrs	r3, r2
     842:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     844:	78fa      	ldrb	r2, [r7, #3]
     846:	78bb      	ldrb	r3, [r7, #2]
     848:	6879      	ldr	r1, [r7, #4]
     84a:	01d2      	lsls	r2, r2, #7
     84c:	440a      	add	r2, r1
     84e:	4413      	add	r3, r2
     850:	3340      	adds	r3, #64	; 0x40
     852:	7bfa      	ldrb	r2, [r7, #15]
     854:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     856:	bf00      	nop
     858:	3714      	adds	r7, #20
     85a:	46bd      	mov	sp, r7
     85c:	f85d 7b04 	ldr.w	r7, [sp], #4
     860:	4770      	bx	lr

00000862 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     862:	b490      	push	{r4, r7}
     864:	b082      	sub	sp, #8
     866:	af00      	add	r7, sp, #0
     868:	6078      	str	r0, [r7, #4]
     86a:	460b      	mov	r3, r1
     86c:	70fb      	strb	r3, [r7, #3]
     86e:	4613      	mov	r3, r2
     870:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     872:	78fa      	ldrb	r2, [r7, #3]
     874:	78bb      	ldrb	r3, [r7, #2]
     876:	78f8      	ldrb	r0, [r7, #3]
     878:	78b9      	ldrb	r1, [r7, #2]
     87a:	687c      	ldr	r4, [r7, #4]
     87c:	01c0      	lsls	r0, r0, #7
     87e:	4420      	add	r0, r4
     880:	4401      	add	r1, r0
     882:	3140      	adds	r1, #64	; 0x40
     884:	7809      	ldrb	r1, [r1, #0]
     886:	b2c9      	uxtb	r1, r1
     888:	f041 0104 	orr.w	r1, r1, #4
     88c:	b2c8      	uxtb	r0, r1
     88e:	6879      	ldr	r1, [r7, #4]
     890:	01d2      	lsls	r2, r2, #7
     892:	440a      	add	r2, r1
     894:	4413      	add	r3, r2
     896:	3340      	adds	r3, #64	; 0x40
     898:	4602      	mov	r2, r0
     89a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     89c:	bf00      	nop
     89e:	3708      	adds	r7, #8
     8a0:	46bd      	mov	sp, r7
     8a2:	bc90      	pop	{r4, r7}
     8a4:	4770      	bx	lr

000008a6 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     8a6:	b490      	push	{r4, r7}
     8a8:	b082      	sub	sp, #8
     8aa:	af00      	add	r7, sp, #0
     8ac:	6078      	str	r0, [r7, #4]
     8ae:	460b      	mov	r3, r1
     8b0:	70fb      	strb	r3, [r7, #3]
     8b2:	4613      	mov	r3, r2
     8b4:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     8b6:	78fa      	ldrb	r2, [r7, #3]
     8b8:	78bb      	ldrb	r3, [r7, #2]
     8ba:	78f8      	ldrb	r0, [r7, #3]
     8bc:	78b9      	ldrb	r1, [r7, #2]
     8be:	687c      	ldr	r4, [r7, #4]
     8c0:	01c0      	lsls	r0, r0, #7
     8c2:	4420      	add	r0, r4
     8c4:	4401      	add	r1, r0
     8c6:	3140      	adds	r1, #64	; 0x40
     8c8:	7809      	ldrb	r1, [r1, #0]
     8ca:	b2c9      	uxtb	r1, r1
     8cc:	f021 0104 	bic.w	r1, r1, #4
     8d0:	b2c8      	uxtb	r0, r1
     8d2:	6879      	ldr	r1, [r7, #4]
     8d4:	01d2      	lsls	r2, r2, #7
     8d6:	440a      	add	r2, r1
     8d8:	4413      	add	r3, r2
     8da:	3340      	adds	r3, #64	; 0x40
     8dc:	4602      	mov	r2, r0
     8de:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     8e0:	bf00      	nop
     8e2:	3708      	adds	r7, #8
     8e4:	46bd      	mov	sp, r7
     8e6:	bc90      	pop	{r4, r7}
     8e8:	4770      	bx	lr

000008ea <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
     8ea:	b480      	push	{r7}
     8ec:	b085      	sub	sp, #20
     8ee:	af00      	add	r7, sp, #0
     8f0:	60f8      	str	r0, [r7, #12]
     8f2:	460b      	mov	r3, r1
     8f4:	607a      	str	r2, [r7, #4]
     8f6:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     8f8:	7afb      	ldrb	r3, [r7, #11]
     8fa:	68fa      	ldr	r2, [r7, #12]
     8fc:	01db      	lsls	r3, r3, #7
     8fe:	4413      	add	r3, r2
     900:	3328      	adds	r3, #40	; 0x28
     902:	687a      	ldr	r2, [r7, #4]
     904:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     906:	bf00      	nop
     908:	3714      	adds	r7, #20
     90a:	46bd      	mov	sp, r7
     90c:	f85d 7b04 	ldr.w	r7, [sp], #4
     910:	4770      	bx	lr
	...

00000914 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
     914:	b580      	push	{r7, lr}
     916:	b082      	sub	sp, #8
     918:	af00      	add	r7, sp, #0
     91a:	4603      	mov	r3, r0
     91c:	6039      	str	r1, [r7, #0]
     91e:	71fb      	strb	r3, [r7, #7]
     920:	4613      	mov	r3, r2
     922:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
     924:	79bb      	ldrb	r3, [r7, #6]
     926:	2b01      	cmp	r3, #1
     928:	d01c      	beq.n	964 <_gpio_set_direction+0x50>
     92a:	2b02      	cmp	r3, #2
     92c:	d037      	beq.n	99e <_gpio_set_direction+0x8a>
     92e:	2b00      	cmp	r3, #0
     930:	d14e      	bne.n	9d0 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
     932:	79fb      	ldrb	r3, [r7, #7]
     934:	683a      	ldr	r2, [r7, #0]
     936:	4619      	mov	r1, r3
     938:	482a      	ldr	r0, [pc, #168]	; (9e4 <_gpio_set_direction+0xd0>)
     93a:	4b2b      	ldr	r3, [pc, #172]	; (9e8 <_gpio_set_direction+0xd4>)
     93c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     93e:	683b      	ldr	r3, [r7, #0]
     940:	b29b      	uxth	r3, r3
     942:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     946:	79fb      	ldrb	r3, [r7, #7]
     948:	4619      	mov	r1, r3
     94a:	4826      	ldr	r0, [pc, #152]	; (9e4 <_gpio_set_direction+0xd0>)
     94c:	4b27      	ldr	r3, [pc, #156]	; (9ec <_gpio_set_direction+0xd8>)
     94e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     950:	683b      	ldr	r3, [r7, #0]
     952:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     954:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     958:	79fb      	ldrb	r3, [r7, #7]
     95a:	4619      	mov	r1, r3
     95c:	4821      	ldr	r0, [pc, #132]	; (9e4 <_gpio_set_direction+0xd0>)
     95e:	4b23      	ldr	r3, [pc, #140]	; (9ec <_gpio_set_direction+0xd8>)
     960:	4798      	blx	r3
		break;
     962:	e03a      	b.n	9da <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
     964:	79fb      	ldrb	r3, [r7, #7]
     966:	683a      	ldr	r2, [r7, #0]
     968:	4619      	mov	r1, r3
     96a:	481e      	ldr	r0, [pc, #120]	; (9e4 <_gpio_set_direction+0xd0>)
     96c:	4b1e      	ldr	r3, [pc, #120]	; (9e8 <_gpio_set_direction+0xd4>)
     96e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     970:	683b      	ldr	r3, [r7, #0]
     972:	b29b      	uxth	r3, r3
     974:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
     978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     97c:	79f9      	ldrb	r1, [r7, #7]
     97e:	461a      	mov	r2, r3
     980:	4818      	ldr	r0, [pc, #96]	; (9e4 <_gpio_set_direction+0xd0>)
     982:	4b1a      	ldr	r3, [pc, #104]	; (9ec <_gpio_set_direction+0xd8>)
     984:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
     986:	683b      	ldr	r3, [r7, #0]
     988:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
     98a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
     98e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     992:	79f9      	ldrb	r1, [r7, #7]
     994:	461a      	mov	r2, r3
     996:	4813      	ldr	r0, [pc, #76]	; (9e4 <_gpio_set_direction+0xd0>)
     998:	4b14      	ldr	r3, [pc, #80]	; (9ec <_gpio_set_direction+0xd8>)
     99a:	4798      	blx	r3
		break;
     99c:	e01d      	b.n	9da <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
     99e:	79fb      	ldrb	r3, [r7, #7]
     9a0:	683a      	ldr	r2, [r7, #0]
     9a2:	4619      	mov	r1, r3
     9a4:	480f      	ldr	r0, [pc, #60]	; (9e4 <_gpio_set_direction+0xd0>)
     9a6:	4b12      	ldr	r3, [pc, #72]	; (9f0 <_gpio_set_direction+0xdc>)
     9a8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     9aa:	683b      	ldr	r3, [r7, #0]
     9ac:	b29b      	uxth	r3, r3
     9ae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     9b2:	79fb      	ldrb	r3, [r7, #7]
     9b4:	4619      	mov	r1, r3
     9b6:	480b      	ldr	r0, [pc, #44]	; (9e4 <_gpio_set_direction+0xd0>)
     9b8:	4b0c      	ldr	r3, [pc, #48]	; (9ec <_gpio_set_direction+0xd8>)
     9ba:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     9bc:	683b      	ldr	r3, [r7, #0]
     9be:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     9c0:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     9c4:	79fb      	ldrb	r3, [r7, #7]
     9c6:	4619      	mov	r1, r3
     9c8:	4806      	ldr	r0, [pc, #24]	; (9e4 <_gpio_set_direction+0xd0>)
     9ca:	4b08      	ldr	r3, [pc, #32]	; (9ec <_gpio_set_direction+0xd8>)
     9cc:	4798      	blx	r3
		break;
     9ce:	e004      	b.n	9da <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
     9d0:	2246      	movs	r2, #70	; 0x46
     9d2:	4908      	ldr	r1, [pc, #32]	; (9f4 <_gpio_set_direction+0xe0>)
     9d4:	2000      	movs	r0, #0
     9d6:	4b08      	ldr	r3, [pc, #32]	; (9f8 <_gpio_set_direction+0xe4>)
     9d8:	4798      	blx	r3
	}
}
     9da:	bf00      	nop
     9dc:	3708      	adds	r7, #8
     9de:	46bd      	mov	sp, r7
     9e0:	bd80      	pop	{r7, pc}
     9e2:	bf00      	nop
     9e4:	41008000 	.word	0x41008000
     9e8:	000006d3 	.word	0x000006d3
     9ec:	000008eb 	.word	0x000008eb
     9f0:	000006ab 	.word	0x000006ab
     9f4:	00012e64 	.word	0x00012e64
     9f8:	00002edd 	.word	0x00002edd

000009fc <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     9fc:	b580      	push	{r7, lr}
     9fe:	b082      	sub	sp, #8
     a00:	af00      	add	r7, sp, #0
     a02:	4603      	mov	r3, r0
     a04:	6039      	str	r1, [r7, #0]
     a06:	71fb      	strb	r3, [r7, #7]
     a08:	4613      	mov	r3, r2
     a0a:	71bb      	strb	r3, [r7, #6]
	if (level) {
     a0c:	79bb      	ldrb	r3, [r7, #6]
     a0e:	2b00      	cmp	r3, #0
     a10:	d006      	beq.n	a20 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
     a12:	79fb      	ldrb	r3, [r7, #7]
     a14:	683a      	ldr	r2, [r7, #0]
     a16:	4619      	mov	r1, r3
     a18:	4806      	ldr	r0, [pc, #24]	; (a34 <_gpio_set_level+0x38>)
     a1a:	4b07      	ldr	r3, [pc, #28]	; (a38 <_gpio_set_level+0x3c>)
     a1c:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
     a1e:	e005      	b.n	a2c <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
     a20:	79fb      	ldrb	r3, [r7, #7]
     a22:	683a      	ldr	r2, [r7, #0]
     a24:	4619      	mov	r1, r3
     a26:	4803      	ldr	r0, [pc, #12]	; (a34 <_gpio_set_level+0x38>)
     a28:	4b04      	ldr	r3, [pc, #16]	; (a3c <_gpio_set_level+0x40>)
     a2a:	4798      	blx	r3
}
     a2c:	bf00      	nop
     a2e:	3708      	adds	r7, #8
     a30:	46bd      	mov	sp, r7
     a32:	bd80      	pop	{r7, pc}
     a34:	41008000 	.word	0x41008000
     a38:	000006fb 	.word	0x000006fb
     a3c:	00000723 	.word	0x00000723

00000a40 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
     a40:	b580      	push	{r7, lr}
     a42:	b082      	sub	sp, #8
     a44:	af00      	add	r7, sp, #0
     a46:	4603      	mov	r3, r0
     a48:	71fb      	strb	r3, [r7, #7]
     a4a:	460b      	mov	r3, r1
     a4c:	71bb      	strb	r3, [r7, #6]
     a4e:	4613      	mov	r3, r2
     a50:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
     a52:	797b      	ldrb	r3, [r7, #5]
     a54:	2b01      	cmp	r3, #1
     a56:	d00a      	beq.n	a6e <_gpio_set_pin_pull_mode+0x2e>
     a58:	2b02      	cmp	r3, #2
     a5a:	d01f      	beq.n	a9c <_gpio_set_pin_pull_mode+0x5c>
     a5c:	2b00      	cmp	r3, #0
     a5e:	d134      	bne.n	aca <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
     a60:	79ba      	ldrb	r2, [r7, #6]
     a62:	79fb      	ldrb	r3, [r7, #7]
     a64:	4619      	mov	r1, r3
     a66:	481e      	ldr	r0, [pc, #120]	; (ae0 <_gpio_set_pin_pull_mode+0xa0>)
     a68:	4b1e      	ldr	r3, [pc, #120]	; (ae4 <_gpio_set_pin_pull_mode+0xa4>)
     a6a:	4798      	blx	r3
		break;
     a6c:	e033      	b.n	ad6 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     a6e:	79bb      	ldrb	r3, [r7, #6]
     a70:	2201      	movs	r2, #1
     a72:	409a      	lsls	r2, r3
     a74:	79fb      	ldrb	r3, [r7, #7]
     a76:	4619      	mov	r1, r3
     a78:	4819      	ldr	r0, [pc, #100]	; (ae0 <_gpio_set_pin_pull_mode+0xa0>)
     a7a:	4b1b      	ldr	r3, [pc, #108]	; (ae8 <_gpio_set_pin_pull_mode+0xa8>)
     a7c:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     a7e:	79ba      	ldrb	r2, [r7, #6]
     a80:	79fb      	ldrb	r3, [r7, #7]
     a82:	4619      	mov	r1, r3
     a84:	4816      	ldr	r0, [pc, #88]	; (ae0 <_gpio_set_pin_pull_mode+0xa0>)
     a86:	4b19      	ldr	r3, [pc, #100]	; (aec <_gpio_set_pin_pull_mode+0xac>)
     a88:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
     a8a:	79bb      	ldrb	r3, [r7, #6]
     a8c:	2201      	movs	r2, #1
     a8e:	409a      	lsls	r2, r3
     a90:	79fb      	ldrb	r3, [r7, #7]
     a92:	4619      	mov	r1, r3
     a94:	4812      	ldr	r0, [pc, #72]	; (ae0 <_gpio_set_pin_pull_mode+0xa0>)
     a96:	4b16      	ldr	r3, [pc, #88]	; (af0 <_gpio_set_pin_pull_mode+0xb0>)
     a98:	4798      	blx	r3
		break;
     a9a:	e01c      	b.n	ad6 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     a9c:	79bb      	ldrb	r3, [r7, #6]
     a9e:	2201      	movs	r2, #1
     aa0:	409a      	lsls	r2, r3
     aa2:	79fb      	ldrb	r3, [r7, #7]
     aa4:	4619      	mov	r1, r3
     aa6:	480e      	ldr	r0, [pc, #56]	; (ae0 <_gpio_set_pin_pull_mode+0xa0>)
     aa8:	4b0f      	ldr	r3, [pc, #60]	; (ae8 <_gpio_set_pin_pull_mode+0xa8>)
     aaa:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     aac:	79ba      	ldrb	r2, [r7, #6]
     aae:	79fb      	ldrb	r3, [r7, #7]
     ab0:	4619      	mov	r1, r3
     ab2:	480b      	ldr	r0, [pc, #44]	; (ae0 <_gpio_set_pin_pull_mode+0xa0>)
     ab4:	4b0d      	ldr	r3, [pc, #52]	; (aec <_gpio_set_pin_pull_mode+0xac>)
     ab6:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
     ab8:	79bb      	ldrb	r3, [r7, #6]
     aba:	2201      	movs	r2, #1
     abc:	409a      	lsls	r2, r3
     abe:	79fb      	ldrb	r3, [r7, #7]
     ac0:	4619      	mov	r1, r3
     ac2:	4807      	ldr	r0, [pc, #28]	; (ae0 <_gpio_set_pin_pull_mode+0xa0>)
     ac4:	4b0b      	ldr	r3, [pc, #44]	; (af4 <_gpio_set_pin_pull_mode+0xb4>)
     ac6:	4798      	blx	r3
		break;
     ac8:	e005      	b.n	ad6 <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
     aca:	2289      	movs	r2, #137	; 0x89
     acc:	490a      	ldr	r1, [pc, #40]	; (af8 <_gpio_set_pin_pull_mode+0xb8>)
     ace:	2000      	movs	r0, #0
     ad0:	4b0a      	ldr	r3, [pc, #40]	; (afc <_gpio_set_pin_pull_mode+0xbc>)
     ad2:	4798      	blx	r3
		break;
     ad4:	bf00      	nop
	}
}
     ad6:	bf00      	nop
     ad8:	3708      	adds	r7, #8
     ada:	46bd      	mov	sp, r7
     adc:	bd80      	pop	{r7, pc}
     ade:	bf00      	nop
     ae0:	41008000 	.word	0x41008000
     ae4:	000008a7 	.word	0x000008a7
     ae8:	000006d3 	.word	0x000006d3
     aec:	00000863 	.word	0x00000863
     af0:	000006fb 	.word	0x000006fb
     af4:	00000723 	.word	0x00000723
     af8:	00012e64 	.word	0x00012e64
     afc:	00002edd 	.word	0x00002edd

00000b00 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
     b00:	b590      	push	{r4, r7, lr}
     b02:	b085      	sub	sp, #20
     b04:	af00      	add	r7, sp, #0
     b06:	6078      	str	r0, [r7, #4]
     b08:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
     b0a:	687b      	ldr	r3, [r7, #4]
     b0c:	095b      	lsrs	r3, r3, #5
     b0e:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
     b10:	687b      	ldr	r3, [r7, #4]
     b12:	b2db      	uxtb	r3, r3
     b14:	f003 031f 	and.w	r3, r3, #31
     b18:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
     b1a:	683b      	ldr	r3, [r7, #0]
     b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
     b20:	d106      	bne.n	b30 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
     b22:	7bba      	ldrb	r2, [r7, #14]
     b24:	7bf9      	ldrb	r1, [r7, #15]
     b26:	2300      	movs	r3, #0
     b28:	4812      	ldr	r0, [pc, #72]	; (b74 <_gpio_set_pin_function+0x74>)
     b2a:	4c13      	ldr	r4, [pc, #76]	; (b78 <_gpio_set_pin_function+0x78>)
     b2c:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
     b2e:	e01d      	b.n	b6c <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
     b30:	7bba      	ldrb	r2, [r7, #14]
     b32:	7bf9      	ldrb	r1, [r7, #15]
     b34:	2301      	movs	r3, #1
     b36:	480f      	ldr	r0, [pc, #60]	; (b74 <_gpio_set_pin_function+0x74>)
     b38:	4c0f      	ldr	r4, [pc, #60]	; (b78 <_gpio_set_pin_function+0x78>)
     b3a:	47a0      	blx	r4
		if (pin & 1) {
     b3c:	7bbb      	ldrb	r3, [r7, #14]
     b3e:	f003 0301 	and.w	r3, r3, #1
     b42:	2b00      	cmp	r3, #0
     b44:	d009      	beq.n	b5a <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
     b46:	7bbb      	ldrb	r3, [r7, #14]
     b48:	085b      	lsrs	r3, r3, #1
     b4a:	b2da      	uxtb	r2, r3
     b4c:	683b      	ldr	r3, [r7, #0]
     b4e:	b2db      	uxtb	r3, r3
     b50:	7bf9      	ldrb	r1, [r7, #15]
     b52:	4808      	ldr	r0, [pc, #32]	; (b74 <_gpio_set_pin_function+0x74>)
     b54:	4c09      	ldr	r4, [pc, #36]	; (b7c <_gpio_set_pin_function+0x7c>)
     b56:	47a0      	blx	r4
}
     b58:	e008      	b.n	b6c <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
     b5a:	7bbb      	ldrb	r3, [r7, #14]
     b5c:	085b      	lsrs	r3, r3, #1
     b5e:	b2da      	uxtb	r2, r3
     b60:	683b      	ldr	r3, [r7, #0]
     b62:	b2db      	uxtb	r3, r3
     b64:	7bf9      	ldrb	r1, [r7, #15]
     b66:	4803      	ldr	r0, [pc, #12]	; (b74 <_gpio_set_pin_function+0x74>)
     b68:	4c05      	ldr	r4, [pc, #20]	; (b80 <_gpio_set_pin_function+0x80>)
     b6a:	47a0      	blx	r4
}
     b6c:	bf00      	nop
     b6e:	3714      	adds	r7, #20
     b70:	46bd      	mov	sp, r7
     b72:	bd90      	pop	{r4, r7, pc}
     b74:	41008000 	.word	0x41008000
     b78:	00000809 	.word	0x00000809
     b7c:	000007ab 	.word	0x000007ab
     b80:	0000074b 	.word	0x0000074b

00000b84 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
     b84:	b580      	push	{r7, lr}
     b86:	b082      	sub	sp, #8
     b88:	af00      	add	r7, sp, #0
     b8a:	4603      	mov	r3, r0
     b8c:	460a      	mov	r2, r1
     b8e:	71fb      	strb	r3, [r7, #7]
     b90:	4613      	mov	r3, r2
     b92:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     b94:	79fb      	ldrb	r3, [r7, #7]
     b96:	095b      	lsrs	r3, r3, #5
     b98:	b2d8      	uxtb	r0, r3
     b9a:	79fb      	ldrb	r3, [r7, #7]
     b9c:	f003 031f 	and.w	r3, r3, #31
     ba0:	b2db      	uxtb	r3, r3
     ba2:	79ba      	ldrb	r2, [r7, #6]
     ba4:	4619      	mov	r1, r3
     ba6:	4b03      	ldr	r3, [pc, #12]	; (bb4 <gpio_set_pin_pull_mode+0x30>)
     ba8:	4798      	blx	r3
}
     baa:	bf00      	nop
     bac:	3708      	adds	r7, #8
     bae:	46bd      	mov	sp, r7
     bb0:	bd80      	pop	{r7, pc}
     bb2:	bf00      	nop
     bb4:	00000a41 	.word	0x00000a41

00000bb8 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
     bb8:	b580      	push	{r7, lr}
     bba:	b082      	sub	sp, #8
     bbc:	af00      	add	r7, sp, #0
     bbe:	6078      	str	r0, [r7, #4]
     bc0:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
     bc2:	6839      	ldr	r1, [r7, #0]
     bc4:	6878      	ldr	r0, [r7, #4]
     bc6:	4b03      	ldr	r3, [pc, #12]	; (bd4 <gpio_set_pin_function+0x1c>)
     bc8:	4798      	blx	r3
}
     bca:	bf00      	nop
     bcc:	3708      	adds	r7, #8
     bce:	46bd      	mov	sp, r7
     bd0:	bd80      	pop	{r7, pc}
     bd2:	bf00      	nop
     bd4:	00000b01 	.word	0x00000b01

00000bd8 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
     bd8:	b580      	push	{r7, lr}
     bda:	b082      	sub	sp, #8
     bdc:	af00      	add	r7, sp, #0
     bde:	4603      	mov	r3, r0
     be0:	460a      	mov	r2, r1
     be2:	71fb      	strb	r3, [r7, #7]
     be4:	4613      	mov	r3, r2
     be6:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
     be8:	79fb      	ldrb	r3, [r7, #7]
     bea:	095b      	lsrs	r3, r3, #5
     bec:	b2d8      	uxtb	r0, r3
     bee:	79fb      	ldrb	r3, [r7, #7]
     bf0:	f003 031f 	and.w	r3, r3, #31
     bf4:	2201      	movs	r2, #1
     bf6:	fa02 f303 	lsl.w	r3, r2, r3
     bfa:	79ba      	ldrb	r2, [r7, #6]
     bfc:	4619      	mov	r1, r3
     bfe:	4b03      	ldr	r3, [pc, #12]	; (c0c <gpio_set_pin_direction+0x34>)
     c00:	4798      	blx	r3
}
     c02:	bf00      	nop
     c04:	3708      	adds	r7, #8
     c06:	46bd      	mov	sp, r7
     c08:	bd80      	pop	{r7, pc}
     c0a:	bf00      	nop
     c0c:	00000915 	.word	0x00000915

00000c10 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     c10:	b580      	push	{r7, lr}
     c12:	b082      	sub	sp, #8
     c14:	af00      	add	r7, sp, #0
     c16:	4603      	mov	r3, r0
     c18:	460a      	mov	r2, r1
     c1a:	71fb      	strb	r3, [r7, #7]
     c1c:	4613      	mov	r3, r2
     c1e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     c20:	79fb      	ldrb	r3, [r7, #7]
     c22:	095b      	lsrs	r3, r3, #5
     c24:	b2d8      	uxtb	r0, r3
     c26:	79fb      	ldrb	r3, [r7, #7]
     c28:	f003 031f 	and.w	r3, r3, #31
     c2c:	2201      	movs	r2, #1
     c2e:	fa02 f303 	lsl.w	r3, r2, r3
     c32:	79ba      	ldrb	r2, [r7, #6]
     c34:	4619      	mov	r1, r3
     c36:	4b03      	ldr	r3, [pc, #12]	; (c44 <gpio_set_pin_level+0x34>)
     c38:	4798      	blx	r3
}
     c3a:	bf00      	nop
     c3c:	3708      	adds	r7, #8
     c3e:	46bd      	mov	sp, r7
     c40:	bd80      	pop	{r7, pc}
     c42:	bf00      	nop
     c44:	000009fd 	.word	0x000009fd

00000c48 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
     c48:	b580      	push	{r7, lr}
     c4a:	af00      	add	r7, sp, #0
	_init_chip();
     c4c:	4b01      	ldr	r3, [pc, #4]	; (c54 <init_mcu+0xc>)
     c4e:	4798      	blx	r3
}
     c50:	bf00      	nop
     c52:	bd80      	pop	{r7, pc}
     c54:	00004071 	.word	0x00004071

00000c58 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
     c58:	b580      	push	{r7, lr}
     c5a:	b082      	sub	sp, #8
     c5c:	af00      	add	r7, sp, #0
     c5e:	6078      	str	r0, [r7, #4]
     c60:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
     c62:	687b      	ldr	r3, [r7, #4]
     c64:	2b00      	cmp	r3, #0
     c66:	d004      	beq.n	c72 <wdt_init+0x1a>
     c68:	683b      	ldr	r3, [r7, #0]
     c6a:	2b00      	cmp	r3, #0
     c6c:	d001      	beq.n	c72 <wdt_init+0x1a>
     c6e:	2301      	movs	r3, #1
     c70:	e000      	b.n	c74 <wdt_init+0x1c>
     c72:	2300      	movs	r3, #0
     c74:	f003 0301 	and.w	r3, r3, #1
     c78:	b2db      	uxtb	r3, r3
     c7a:	2248      	movs	r2, #72	; 0x48
     c7c:	4907      	ldr	r1, [pc, #28]	; (c9c <wdt_init+0x44>)
     c7e:	4618      	mov	r0, r3
     c80:	4b07      	ldr	r3, [pc, #28]	; (ca0 <wdt_init+0x48>)
     c82:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     c84:	687b      	ldr	r3, [r7, #4]
     c86:	683a      	ldr	r2, [r7, #0]
     c88:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
     c8a:	687b      	ldr	r3, [r7, #4]
     c8c:	4618      	mov	r0, r3
     c8e:	4b05      	ldr	r3, [pc, #20]	; (ca4 <wdt_init+0x4c>)
     c90:	4798      	blx	r3
     c92:	4603      	mov	r3, r0
}
     c94:	4618      	mov	r0, r3
     c96:	3708      	adds	r7, #8
     c98:	46bd      	mov	sp, r7
     c9a:	bd80      	pop	{r7, pc}
     c9c:	00012e80 	.word	0x00012e80
     ca0:	00002edd 	.word	0x00002edd
     ca4:	0000a3a1 	.word	0x0000a3a1

00000ca8 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
     ca8:	b580      	push	{r7, lr}
     caa:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
     cac:	4804      	ldr	r0, [pc, #16]	; (cc0 <CRC_CALC_init+0x18>)
     cae:	4b05      	ldr	r3, [pc, #20]	; (cc4 <CRC_CALC_init+0x1c>)
     cb0:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
     cb2:	4905      	ldr	r1, [pc, #20]	; (cc8 <CRC_CALC_init+0x20>)
     cb4:	4805      	ldr	r0, [pc, #20]	; (ccc <CRC_CALC_init+0x24>)
     cb6:	4b06      	ldr	r3, [pc, #24]	; (cd0 <CRC_CALC_init+0x28>)
     cb8:	4798      	blx	r3
}
     cba:	bf00      	nop
     cbc:	bd80      	pop	{r7, pc}
     cbe:	bf00      	nop
     cc0:	40000800 	.word	0x40000800
     cc4:	0000056b 	.word	0x0000056b
     cc8:	41002000 	.word	0x41002000
     ccc:	20001b84 	.word	0x20001b84
     cd0:	00001951 	.word	0x00001951

00000cd4 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
     cd4:	b580      	push	{r7, lr}
     cd6:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     cd8:	2244      	movs	r2, #68	; 0x44
     cda:	2104      	movs	r1, #4
     cdc:	481e      	ldr	r0, [pc, #120]	; (d58 <EXTERNAL_IRQ_0_init+0x84>)
     cde:	4b1f      	ldr	r3, [pc, #124]	; (d5c <EXTERNAL_IRQ_0_init+0x88>)
     ce0:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
     ce2:	481f      	ldr	r0, [pc, #124]	; (d60 <EXTERNAL_IRQ_0_init+0x8c>)
     ce4:	4b1f      	ldr	r3, [pc, #124]	; (d64 <EXTERNAL_IRQ_0_init+0x90>)
     ce6:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA04, GPIO_DIRECTION_IN);
     ce8:	2101      	movs	r1, #1
     cea:	2004      	movs	r0, #4
     cec:	4b1e      	ldr	r3, [pc, #120]	; (d68 <EXTERNAL_IRQ_0_init+0x94>)
     cee:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA04,
     cf0:	2102      	movs	r1, #2
     cf2:	2004      	movs	r0, #4
     cf4:	4b1d      	ldr	r3, [pc, #116]	; (d6c <EXTERNAL_IRQ_0_init+0x98>)
     cf6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA04, PINMUX_PA04A_EIC_EXTINT4);
     cf8:	f44f 2180 	mov.w	r1, #262144	; 0x40000
     cfc:	2004      	movs	r0, #4
     cfe:	4b1c      	ldr	r3, [pc, #112]	; (d70 <EXTERNAL_IRQ_0_init+0x9c>)
     d00:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA05, GPIO_DIRECTION_IN);
     d02:	2101      	movs	r1, #1
     d04:	2005      	movs	r0, #5
     d06:	4b18      	ldr	r3, [pc, #96]	; (d68 <EXTERNAL_IRQ_0_init+0x94>)
     d08:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA05,
     d0a:	2102      	movs	r1, #2
     d0c:	2005      	movs	r0, #5
     d0e:	4b17      	ldr	r3, [pc, #92]	; (d6c <EXTERNAL_IRQ_0_init+0x98>)
     d10:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA05, PINMUX_PA05A_EIC_EXTINT5);
     d12:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
     d16:	2005      	movs	r0, #5
     d18:	4b15      	ldr	r3, [pc, #84]	; (d70 <EXTERNAL_IRQ_0_init+0x9c>)
     d1a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(R2Int, GPIO_DIRECTION_IN);
     d1c:	2101      	movs	r1, #1
     d1e:	2056      	movs	r0, #86	; 0x56
     d20:	4b11      	ldr	r3, [pc, #68]	; (d68 <EXTERNAL_IRQ_0_init+0x94>)
     d22:	4798      	blx	r3

	gpio_set_pin_pull_mode(R2Int,
     d24:	2102      	movs	r1, #2
     d26:	2056      	movs	r0, #86	; 0x56
     d28:	4b10      	ldr	r3, [pc, #64]	; (d6c <EXTERNAL_IRQ_0_init+0x98>)
     d2a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(R2Int, PINMUX_PC22A_EIC_EXTINT6);
     d2c:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
     d30:	2056      	movs	r0, #86	; 0x56
     d32:	4b0f      	ldr	r3, [pc, #60]	; (d70 <EXTERNAL_IRQ_0_init+0x9c>)
     d34:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(R1Int, GPIO_DIRECTION_IN);
     d36:	2101      	movs	r1, #1
     d38:	2057      	movs	r0, #87	; 0x57
     d3a:	4b0b      	ldr	r3, [pc, #44]	; (d68 <EXTERNAL_IRQ_0_init+0x94>)
     d3c:	4798      	blx	r3

	gpio_set_pin_pull_mode(R1Int,
     d3e:	2102      	movs	r1, #2
     d40:	2057      	movs	r0, #87	; 0x57
     d42:	4b0a      	ldr	r3, [pc, #40]	; (d6c <EXTERNAL_IRQ_0_init+0x98>)
     d44:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(R1Int, PINMUX_PC23A_EIC_EXTINT7);
     d46:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
     d4a:	2057      	movs	r0, #87	; 0x57
     d4c:	4b08      	ldr	r3, [pc, #32]	; (d70 <EXTERNAL_IRQ_0_init+0x9c>)
     d4e:	4798      	blx	r3

	ext_irq_init();
     d50:	4b08      	ldr	r3, [pc, #32]	; (d74 <EXTERNAL_IRQ_0_init+0xa0>)
     d52:	4798      	blx	r3
}
     d54:	bf00      	nop
     d56:	bd80      	pop	{r7, pc}
     d58:	40001c00 	.word	0x40001c00
     d5c:	00000405 	.word	0x00000405
     d60:	40000800 	.word	0x40000800
     d64:	000004eb 	.word	0x000004eb
     d68:	00000bd9 	.word	0x00000bd9
     d6c:	00000b85 	.word	0x00000b85
     d70:	00000bb9 	.word	0x00000bb9
     d74:	00001a19 	.word	0x00001a19

00000d78 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
     d78:	b580      	push	{r7, lr}
     d7a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     d7c:	2244      	movs	r2, #68	; 0x44
     d7e:	210b      	movs	r1, #11
     d80:	4804      	ldr	r0, [pc, #16]	; (d94 <EVENT_SYSTEM_0_init+0x1c>)
     d82:	4b05      	ldr	r3, [pc, #20]	; (d98 <EVENT_SYSTEM_0_init+0x20>)
     d84:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
     d86:	4805      	ldr	r0, [pc, #20]	; (d9c <EVENT_SYSTEM_0_init+0x24>)
     d88:	4b05      	ldr	r3, [pc, #20]	; (da0 <EVENT_SYSTEM_0_init+0x28>)
     d8a:	4798      	blx	r3

	event_system_init();
     d8c:	4b05      	ldr	r3, [pc, #20]	; (da4 <EVENT_SYSTEM_0_init+0x2c>)
     d8e:	4798      	blx	r3
}
     d90:	bf00      	nop
     d92:	bd80      	pop	{r7, pc}
     d94:	40001c00 	.word	0x40001c00
     d98:	00000405 	.word	0x00000405
     d9c:	40000800 	.word	0x40000800
     da0:	0000058b 	.word	0x0000058b
     da4:	00001a05 	.word	0x00001a05

00000da8 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
     da8:	b580      	push	{r7, lr}
     daa:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
     dac:	2101      	movs	r1, #1
     dae:	202b      	movs	r0, #43	; 0x2b
     db0:	4b2b      	ldr	r3, [pc, #172]	; (e60 <QSPI_N25Q256_PORT_init+0xb8>)
     db2:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
     db4:	2100      	movs	r1, #0
     db6:	202b      	movs	r0, #43	; 0x2b
     db8:	4b2a      	ldr	r3, [pc, #168]	; (e64 <QSPI_N25Q256_PORT_init+0xbc>)
     dba:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
     dbc:	492a      	ldr	r1, [pc, #168]	; (e68 <QSPI_N25Q256_PORT_init+0xc0>)
     dbe:	202b      	movs	r0, #43	; 0x2b
     dc0:	4b2a      	ldr	r3, [pc, #168]	; (e6c <QSPI_N25Q256_PORT_init+0xc4>)
     dc2:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
     dc4:	2102      	movs	r1, #2
     dc6:	2008      	movs	r0, #8
     dc8:	4b25      	ldr	r3, [pc, #148]	; (e60 <QSPI_N25Q256_PORT_init+0xb8>)
     dca:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
     dcc:	2100      	movs	r1, #0
     dce:	2008      	movs	r0, #8
     dd0:	4b27      	ldr	r3, [pc, #156]	; (e70 <QSPI_N25Q256_PORT_init+0xc8>)
     dd2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
     dd4:	2100      	movs	r1, #0
     dd6:	2008      	movs	r0, #8
     dd8:	4b22      	ldr	r3, [pc, #136]	; (e64 <QSPI_N25Q256_PORT_init+0xbc>)
     dda:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
     ddc:	4925      	ldr	r1, [pc, #148]	; (e74 <QSPI_N25Q256_PORT_init+0xcc>)
     dde:	2008      	movs	r0, #8
     de0:	4b22      	ldr	r3, [pc, #136]	; (e6c <QSPI_N25Q256_PORT_init+0xc4>)
     de2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
     de4:	2102      	movs	r1, #2
     de6:	2009      	movs	r0, #9
     de8:	4b1d      	ldr	r3, [pc, #116]	; (e60 <QSPI_N25Q256_PORT_init+0xb8>)
     dea:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
     dec:	2100      	movs	r1, #0
     dee:	2009      	movs	r0, #9
     df0:	4b1f      	ldr	r3, [pc, #124]	; (e70 <QSPI_N25Q256_PORT_init+0xc8>)
     df2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
     df4:	2100      	movs	r1, #0
     df6:	2009      	movs	r0, #9
     df8:	4b1a      	ldr	r3, [pc, #104]	; (e64 <QSPI_N25Q256_PORT_init+0xbc>)
     dfa:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
     dfc:	491e      	ldr	r1, [pc, #120]	; (e78 <QSPI_N25Q256_PORT_init+0xd0>)
     dfe:	2009      	movs	r0, #9
     e00:	4b1a      	ldr	r3, [pc, #104]	; (e6c <QSPI_N25Q256_PORT_init+0xc4>)
     e02:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
     e04:	2102      	movs	r1, #2
     e06:	200a      	movs	r0, #10
     e08:	4b15      	ldr	r3, [pc, #84]	; (e60 <QSPI_N25Q256_PORT_init+0xb8>)
     e0a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
     e0c:	2100      	movs	r1, #0
     e0e:	200a      	movs	r0, #10
     e10:	4b17      	ldr	r3, [pc, #92]	; (e70 <QSPI_N25Q256_PORT_init+0xc8>)
     e12:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
     e14:	2100      	movs	r1, #0
     e16:	200a      	movs	r0, #10
     e18:	4b12      	ldr	r3, [pc, #72]	; (e64 <QSPI_N25Q256_PORT_init+0xbc>)
     e1a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
     e1c:	4917      	ldr	r1, [pc, #92]	; (e7c <QSPI_N25Q256_PORT_init+0xd4>)
     e1e:	200a      	movs	r0, #10
     e20:	4b12      	ldr	r3, [pc, #72]	; (e6c <QSPI_N25Q256_PORT_init+0xc4>)
     e22:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
     e24:	2102      	movs	r1, #2
     e26:	200b      	movs	r0, #11
     e28:	4b0d      	ldr	r3, [pc, #52]	; (e60 <QSPI_N25Q256_PORT_init+0xb8>)
     e2a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
     e2c:	2100      	movs	r1, #0
     e2e:	200b      	movs	r0, #11
     e30:	4b0f      	ldr	r3, [pc, #60]	; (e70 <QSPI_N25Q256_PORT_init+0xc8>)
     e32:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
     e34:	2100      	movs	r1, #0
     e36:	200b      	movs	r0, #11
     e38:	4b0a      	ldr	r3, [pc, #40]	; (e64 <QSPI_N25Q256_PORT_init+0xbc>)
     e3a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
     e3c:	4910      	ldr	r1, [pc, #64]	; (e80 <QSPI_N25Q256_PORT_init+0xd8>)
     e3e:	200b      	movs	r0, #11
     e40:	4b0a      	ldr	r3, [pc, #40]	; (e6c <QSPI_N25Q256_PORT_init+0xc4>)
     e42:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
     e44:	2101      	movs	r1, #1
     e46:	202a      	movs	r0, #42	; 0x2a
     e48:	4b05      	ldr	r3, [pc, #20]	; (e60 <QSPI_N25Q256_PORT_init+0xb8>)
     e4a:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
     e4c:	2100      	movs	r1, #0
     e4e:	202a      	movs	r0, #42	; 0x2a
     e50:	4b04      	ldr	r3, [pc, #16]	; (e64 <QSPI_N25Q256_PORT_init+0xbc>)
     e52:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
     e54:	490b      	ldr	r1, [pc, #44]	; (e84 <QSPI_N25Q256_PORT_init+0xdc>)
     e56:	202a      	movs	r0, #42	; 0x2a
     e58:	4b04      	ldr	r3, [pc, #16]	; (e6c <QSPI_N25Q256_PORT_init+0xc4>)
     e5a:	4798      	blx	r3
}
     e5c:	bf00      	nop
     e5e:	bd80      	pop	{r7, pc}
     e60:	00000bd9 	.word	0x00000bd9
     e64:	00000b85 	.word	0x00000b85
     e68:	002b0007 	.word	0x002b0007
     e6c:	00000bb9 	.word	0x00000bb9
     e70:	00000c11 	.word	0x00000c11
     e74:	00080007 	.word	0x00080007
     e78:	00090007 	.word	0x00090007
     e7c:	000a0007 	.word	0x000a0007
     e80:	000b0007 	.word	0x000b0007
     e84:	002a0007 	.word	0x002a0007

00000e88 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
     e88:	b580      	push	{r7, lr}
     e8a:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
     e8c:	4805      	ldr	r0, [pc, #20]	; (ea4 <QSPI_N25Q256_CLOCK_init+0x1c>)
     e8e:	4b06      	ldr	r3, [pc, #24]	; (ea8 <QSPI_N25Q256_CLOCK_init+0x20>)
     e90:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
     e92:	4804      	ldr	r0, [pc, #16]	; (ea4 <QSPI_N25Q256_CLOCK_init+0x1c>)
     e94:	4b05      	ldr	r3, [pc, #20]	; (eac <QSPI_N25Q256_CLOCK_init+0x24>)
     e96:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
     e98:	4802      	ldr	r0, [pc, #8]	; (ea4 <QSPI_N25Q256_CLOCK_init+0x1c>)
     e9a:	4b05      	ldr	r3, [pc, #20]	; (eb0 <QSPI_N25Q256_CLOCK_init+0x28>)
     e9c:	4798      	blx	r3
}
     e9e:	bf00      	nop
     ea0:	bd80      	pop	{r7, pc}
     ea2:	bf00      	nop
     ea4:	40000800 	.word	0x40000800
     ea8:	0000044b 	.word	0x0000044b
     eac:	0000048b 	.word	0x0000048b
     eb0:	000005eb 	.word	0x000005eb

00000eb4 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
     eb4:	b580      	push	{r7, lr}
     eb6:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
     eb8:	4b04      	ldr	r3, [pc, #16]	; (ecc <QSPI_N25Q256_init+0x18>)
     eba:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
     ebc:	4904      	ldr	r1, [pc, #16]	; (ed0 <QSPI_N25Q256_init+0x1c>)
     ebe:	4805      	ldr	r0, [pc, #20]	; (ed4 <QSPI_N25Q256_init+0x20>)
     ec0:	4b05      	ldr	r3, [pc, #20]	; (ed8 <QSPI_N25Q256_init+0x24>)
     ec2:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
     ec4:	4b05      	ldr	r3, [pc, #20]	; (edc <QSPI_N25Q256_init+0x28>)
     ec6:	4798      	blx	r3
}
     ec8:	bf00      	nop
     eca:	bd80      	pop	{r7, pc}
     ecc:	00000e89 	.word	0x00000e89
     ed0:	42003400 	.word	0x42003400
     ed4:	20001a28 	.word	0x20001a28
     ed8:	00001d65 	.word	0x00001d65
     edc:	00000da9 	.word	0x00000da9

00000ee0 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
     ee0:	b580      	push	{r7, lr}
     ee2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
     ee4:	4802      	ldr	r0, [pc, #8]	; (ef0 <DATETIME_CLOCK_CLOCK_init+0x10>)
     ee6:	4b03      	ldr	r3, [pc, #12]	; (ef4 <DATETIME_CLOCK_CLOCK_init+0x14>)
     ee8:	4798      	blx	r3
}
     eea:	bf00      	nop
     eec:	bd80      	pop	{r7, pc}
     eee:	bf00      	nop
     ef0:	40000800 	.word	0x40000800
     ef4:	000004cb 	.word	0x000004cb

00000ef8 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
     ef8:	b580      	push	{r7, lr}
     efa:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
     efc:	4b03      	ldr	r3, [pc, #12]	; (f0c <DATETIME_CLOCK_init+0x14>)
     efe:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
     f00:	4903      	ldr	r1, [pc, #12]	; (f10 <DATETIME_CLOCK_init+0x18>)
     f02:	4804      	ldr	r0, [pc, #16]	; (f14 <DATETIME_CLOCK_init+0x1c>)
     f04:	4b04      	ldr	r3, [pc, #16]	; (f18 <DATETIME_CLOCK_init+0x20>)
     f06:	4798      	blx	r3
}
     f08:	bf00      	nop
     f0a:	bd80      	pop	{r7, pc}
     f0c:	00000ee1 	.word	0x00000ee1
     f10:	40002400 	.word	0x40002400
     f14:	20001b60 	.word	0x20001b60
     f18:	00001659 	.word	0x00001659

00000f1c <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
     f1c:	b580      	push	{r7, lr}
     f1e:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
     f20:	2100      	movs	r1, #0
     f22:	203b      	movs	r0, #59	; 0x3b
     f24:	4b11      	ldr	r3, [pc, #68]	; (f6c <SPI_TEMP_PORT_init+0x50>)
     f26:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
     f28:	2102      	movs	r1, #2
     f2a:	203b      	movs	r0, #59	; 0x3b
     f2c:	4b10      	ldr	r3, [pc, #64]	; (f70 <SPI_TEMP_PORT_init+0x54>)
     f2e:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
     f30:	4910      	ldr	r1, [pc, #64]	; (f74 <SPI_TEMP_PORT_init+0x58>)
     f32:	203b      	movs	r0, #59	; 0x3b
     f34:	4b10      	ldr	r3, [pc, #64]	; (f78 <SPI_TEMP_PORT_init+0x5c>)
     f36:	4798      	blx	r3

	gpio_set_pin_level(PB26,
     f38:	2100      	movs	r1, #0
     f3a:	203a      	movs	r0, #58	; 0x3a
     f3c:	4b0b      	ldr	r3, [pc, #44]	; (f6c <SPI_TEMP_PORT_init+0x50>)
     f3e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
     f40:	2102      	movs	r1, #2
     f42:	203a      	movs	r0, #58	; 0x3a
     f44:	4b0a      	ldr	r3, [pc, #40]	; (f70 <SPI_TEMP_PORT_init+0x54>)
     f46:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
     f48:	490c      	ldr	r1, [pc, #48]	; (f7c <SPI_TEMP_PORT_init+0x60>)
     f4a:	203a      	movs	r0, #58	; 0x3a
     f4c:	4b0a      	ldr	r3, [pc, #40]	; (f78 <SPI_TEMP_PORT_init+0x5c>)
     f4e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
     f50:	2101      	movs	r1, #1
     f52:	203c      	movs	r0, #60	; 0x3c
     f54:	4b06      	ldr	r3, [pc, #24]	; (f70 <SPI_TEMP_PORT_init+0x54>)
     f56:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
     f58:	2100      	movs	r1, #0
     f5a:	203c      	movs	r0, #60	; 0x3c
     f5c:	4b08      	ldr	r3, [pc, #32]	; (f80 <SPI_TEMP_PORT_init+0x64>)
     f5e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
     f60:	4908      	ldr	r1, [pc, #32]	; (f84 <SPI_TEMP_PORT_init+0x68>)
     f62:	203c      	movs	r0, #60	; 0x3c
     f64:	4b04      	ldr	r3, [pc, #16]	; (f78 <SPI_TEMP_PORT_init+0x5c>)
     f66:	4798      	blx	r3
}
     f68:	bf00      	nop
     f6a:	bd80      	pop	{r7, pc}
     f6c:	00000c11 	.word	0x00000c11
     f70:	00000bd9 	.word	0x00000bd9
     f74:	003b0003 	.word	0x003b0003
     f78:	00000bb9 	.word	0x00000bb9
     f7c:	003a0003 	.word	0x003a0003
     f80:	00000b85 	.word	0x00000b85
     f84:	003c0003 	.word	0x003c0003

00000f88 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
     f88:	b580      	push	{r7, lr}
     f8a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     f8c:	2243      	movs	r2, #67	; 0x43
     f8e:	2122      	movs	r1, #34	; 0x22
     f90:	4806      	ldr	r0, [pc, #24]	; (fac <SPI_TEMP_CLOCK_init+0x24>)
     f92:	4b07      	ldr	r3, [pc, #28]	; (fb0 <SPI_TEMP_CLOCK_init+0x28>)
     f94:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     f96:	224a      	movs	r2, #74	; 0x4a
     f98:	2103      	movs	r1, #3
     f9a:	4804      	ldr	r0, [pc, #16]	; (fac <SPI_TEMP_CLOCK_init+0x24>)
     f9c:	4b04      	ldr	r3, [pc, #16]	; (fb0 <SPI_TEMP_CLOCK_init+0x28>)
     f9e:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
     fa0:	4804      	ldr	r0, [pc, #16]	; (fb4 <SPI_TEMP_CLOCK_init+0x2c>)
     fa2:	4b05      	ldr	r3, [pc, #20]	; (fb8 <SPI_TEMP_CLOCK_init+0x30>)
     fa4:	4798      	blx	r3
}
     fa6:	bf00      	nop
     fa8:	bd80      	pop	{r7, pc}
     faa:	bf00      	nop
     fac:	40001c00 	.word	0x40001c00
     fb0:	00000405 	.word	0x00000405
     fb4:	40000800 	.word	0x40000800
     fb8:	0000060b 	.word	0x0000060b

00000fbc <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
     fbc:	b580      	push	{r7, lr}
     fbe:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
     fc0:	4b05      	ldr	r3, [pc, #20]	; (fd8 <SPI_TEMP_init+0x1c>)
     fc2:	4798      	blx	r3
	spi_m_async_init(&SPI_TEMP, SERCOM4);
     fc4:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
     fc8:	4804      	ldr	r0, [pc, #16]	; (fdc <SPI_TEMP_init+0x20>)
     fca:	4b05      	ldr	r3, [pc, #20]	; (fe0 <SPI_TEMP_init+0x24>)
     fcc:	4798      	blx	r3
	SPI_TEMP_PORT_init();
     fce:	4b05      	ldr	r3, [pc, #20]	; (fe4 <SPI_TEMP_init+0x28>)
     fd0:	4798      	blx	r3
}
     fd2:	bf00      	nop
     fd4:	bd80      	pop	{r7, pc}
     fd6:	bf00      	nop
     fd8:	00000f89 	.word	0x00000f89
     fdc:	200019e0 	.word	0x200019e0
     fe0:	0000208d 	.word	0x0000208d
     fe4:	00000f1d 	.word	0x00000f1d

00000fe8 <I2C_EXPANDER_PORT_init>:

void I2C_EXPANDER_PORT_init(void)
{
     fe8:	b580      	push	{r7, lr}
     fea:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
     fec:	2100      	movs	r1, #0
     fee:	2017      	movs	r0, #23
     ff0:	4b07      	ldr	r3, [pc, #28]	; (1010 <I2C_EXPANDER_PORT_init+0x28>)
     ff2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
     ff4:	4907      	ldr	r1, [pc, #28]	; (1014 <I2C_EXPANDER_PORT_init+0x2c>)
     ff6:	2017      	movs	r0, #23
     ff8:	4b07      	ldr	r3, [pc, #28]	; (1018 <I2C_EXPANDER_PORT_init+0x30>)
     ffa:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
     ffc:	2100      	movs	r1, #0
     ffe:	2016      	movs	r0, #22
    1000:	4b03      	ldr	r3, [pc, #12]	; (1010 <I2C_EXPANDER_PORT_init+0x28>)
    1002:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    1004:	4905      	ldr	r1, [pc, #20]	; (101c <I2C_EXPANDER_PORT_init+0x34>)
    1006:	2016      	movs	r0, #22
    1008:	4b03      	ldr	r3, [pc, #12]	; (1018 <I2C_EXPANDER_PORT_init+0x30>)
    100a:	4798      	blx	r3
}
    100c:	bf00      	nop
    100e:	bd80      	pop	{r7, pc}
    1010:	00000b85 	.word	0x00000b85
    1014:	00170003 	.word	0x00170003
    1018:	00000bb9 	.word	0x00000bb9
    101c:	00160003 	.word	0x00160003

00001020 <I2C_EXPANDER_CLOCK_init>:

void I2C_EXPANDER_CLOCK_init(void)
{
    1020:	b580      	push	{r7, lr}
    1022:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1024:	2243      	movs	r2, #67	; 0x43
    1026:	2123      	movs	r1, #35	; 0x23
    1028:	4806      	ldr	r0, [pc, #24]	; (1044 <I2C_EXPANDER_CLOCK_init+0x24>)
    102a:	4b07      	ldr	r3, [pc, #28]	; (1048 <I2C_EXPANDER_CLOCK_init+0x28>)
    102c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    102e:	224a      	movs	r2, #74	; 0x4a
    1030:	2103      	movs	r1, #3
    1032:	4804      	ldr	r0, [pc, #16]	; (1044 <I2C_EXPANDER_CLOCK_init+0x24>)
    1034:	4b04      	ldr	r3, [pc, #16]	; (1048 <I2C_EXPANDER_CLOCK_init+0x28>)
    1036:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    1038:	4804      	ldr	r0, [pc, #16]	; (104c <I2C_EXPANDER_CLOCK_init+0x2c>)
    103a:	4b05      	ldr	r3, [pc, #20]	; (1050 <I2C_EXPANDER_CLOCK_init+0x30>)
    103c:	4798      	blx	r3
}
    103e:	bf00      	nop
    1040:	bd80      	pop	{r7, pc}
    1042:	bf00      	nop
    1044:	40001c00 	.word	0x40001c00
    1048:	00000405 	.word	0x00000405
    104c:	40000800 	.word	0x40000800
    1050:	0000062b 	.word	0x0000062b

00001054 <I2C_EXPANDER_init>:

void I2C_EXPANDER_init(void)
{
    1054:	b580      	push	{r7, lr}
    1056:	af00      	add	r7, sp, #0
	I2C_EXPANDER_CLOCK_init();
    1058:	4b04      	ldr	r3, [pc, #16]	; (106c <I2C_EXPANDER_init+0x18>)
    105a:	4798      	blx	r3
	i2c_m_async_init(&I2C_EXPANDER, SERCOM5);
    105c:	4904      	ldr	r1, [pc, #16]	; (1070 <I2C_EXPANDER_init+0x1c>)
    105e:	4805      	ldr	r0, [pc, #20]	; (1074 <I2C_EXPANDER_init+0x20>)
    1060:	4b05      	ldr	r3, [pc, #20]	; (1078 <I2C_EXPANDER_init+0x24>)
    1062:	4798      	blx	r3
	I2C_EXPANDER_PORT_init();
    1064:	4b05      	ldr	r3, [pc, #20]	; (107c <I2C_EXPANDER_init+0x28>)
    1066:	4798      	blx	r3
}
    1068:	bf00      	nop
    106a:	bd80      	pop	{r7, pc}
    106c:	00001021 	.word	0x00001021
    1070:	43000400 	.word	0x43000400
    1074:	20001ac4 	.word	0x20001ac4
    1078:	00001c25 	.word	0x00001c25
    107c:	00000fe9 	.word	0x00000fe9

00001080 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    1080:	b580      	push	{r7, lr}
    1082:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    1084:	2100      	movs	r1, #0
    1086:	2044      	movs	r0, #68	; 0x44
    1088:	4b11      	ldr	r3, [pc, #68]	; (10d0 <SPI_HI3593_PORT_init+0x50>)
    108a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    108c:	2102      	movs	r1, #2
    108e:	2044      	movs	r0, #68	; 0x44
    1090:	4b10      	ldr	r3, [pc, #64]	; (10d4 <SPI_HI3593_PORT_init+0x54>)
    1092:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    1094:	4910      	ldr	r1, [pc, #64]	; (10d8 <SPI_HI3593_PORT_init+0x58>)
    1096:	2044      	movs	r0, #68	; 0x44
    1098:	4b10      	ldr	r3, [pc, #64]	; (10dc <SPI_HI3593_PORT_init+0x5c>)
    109a:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    109c:	2100      	movs	r1, #0
    109e:	2045      	movs	r0, #69	; 0x45
    10a0:	4b0b      	ldr	r3, [pc, #44]	; (10d0 <SPI_HI3593_PORT_init+0x50>)
    10a2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    10a4:	2102      	movs	r1, #2
    10a6:	2045      	movs	r0, #69	; 0x45
    10a8:	4b0a      	ldr	r3, [pc, #40]	; (10d4 <SPI_HI3593_PORT_init+0x54>)
    10aa:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    10ac:	490c      	ldr	r1, [pc, #48]	; (10e0 <SPI_HI3593_PORT_init+0x60>)
    10ae:	2045      	movs	r0, #69	; 0x45
    10b0:	4b0a      	ldr	r3, [pc, #40]	; (10dc <SPI_HI3593_PORT_init+0x5c>)
    10b2:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    10b4:	2101      	movs	r1, #1
    10b6:	2047      	movs	r0, #71	; 0x47
    10b8:	4b06      	ldr	r3, [pc, #24]	; (10d4 <SPI_HI3593_PORT_init+0x54>)
    10ba:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    10bc:	2100      	movs	r1, #0
    10be:	2047      	movs	r0, #71	; 0x47
    10c0:	4b08      	ldr	r3, [pc, #32]	; (10e4 <SPI_HI3593_PORT_init+0x64>)
    10c2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    10c4:	4908      	ldr	r1, [pc, #32]	; (10e8 <SPI_HI3593_PORT_init+0x68>)
    10c6:	2047      	movs	r0, #71	; 0x47
    10c8:	4b04      	ldr	r3, [pc, #16]	; (10dc <SPI_HI3593_PORT_init+0x5c>)
    10ca:	4798      	blx	r3
}
    10cc:	bf00      	nop
    10ce:	bd80      	pop	{r7, pc}
    10d0:	00000c11 	.word	0x00000c11
    10d4:	00000bd9 	.word	0x00000bd9
    10d8:	00440002 	.word	0x00440002
    10dc:	00000bb9 	.word	0x00000bb9
    10e0:	00450002 	.word	0x00450002
    10e4:	00000b85 	.word	0x00000b85
    10e8:	00470002 	.word	0x00470002

000010ec <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    10ec:	b580      	push	{r7, lr}
    10ee:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    10f0:	2243      	movs	r2, #67	; 0x43
    10f2:	2124      	movs	r1, #36	; 0x24
    10f4:	4806      	ldr	r0, [pc, #24]	; (1110 <SPI_HI3593_CLOCK_init+0x24>)
    10f6:	4b07      	ldr	r3, [pc, #28]	; (1114 <SPI_HI3593_CLOCK_init+0x28>)
    10f8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    10fa:	224a      	movs	r2, #74	; 0x4a
    10fc:	2103      	movs	r1, #3
    10fe:	4804      	ldr	r0, [pc, #16]	; (1110 <SPI_HI3593_CLOCK_init+0x24>)
    1100:	4b04      	ldr	r3, [pc, #16]	; (1114 <SPI_HI3593_CLOCK_init+0x28>)
    1102:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    1104:	4804      	ldr	r0, [pc, #16]	; (1118 <SPI_HI3593_CLOCK_init+0x2c>)
    1106:	4b05      	ldr	r3, [pc, #20]	; (111c <SPI_HI3593_CLOCK_init+0x30>)
    1108:	4798      	blx	r3
}
    110a:	bf00      	nop
    110c:	bd80      	pop	{r7, pc}
    110e:	bf00      	nop
    1110:	40001c00 	.word	0x40001c00
    1114:	00000405 	.word	0x00000405
    1118:	40000800 	.word	0x40000800
    111c:	0000064b 	.word	0x0000064b

00001120 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    1120:	b580      	push	{r7, lr}
    1122:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    1124:	4b04      	ldr	r3, [pc, #16]	; (1138 <SPI_HI3593_init+0x18>)
    1126:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    1128:	4904      	ldr	r1, [pc, #16]	; (113c <SPI_HI3593_init+0x1c>)
    112a:	4805      	ldr	r0, [pc, #20]	; (1140 <SPI_HI3593_init+0x20>)
    112c:	4b05      	ldr	r3, [pc, #20]	; (1144 <SPI_HI3593_init+0x24>)
    112e:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    1130:	4b05      	ldr	r3, [pc, #20]	; (1148 <SPI_HI3593_init+0x28>)
    1132:	4798      	blx	r3
}
    1134:	bf00      	nop
    1136:	bd80      	pop	{r7, pc}
    1138:	000010ed 	.word	0x000010ed
    113c:	43000800 	.word	0x43000800
    1140:	200019c8 	.word	0x200019c8
    1144:	00002241 	.word	0x00002241
    1148:	00001081 	.word	0x00001081

0000114c <I2C_EEPROM_PORT_init>:

void I2C_EEPROM_PORT_init(void)
{
    114c:	b580      	push	{r7, lr}
    114e:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    1150:	2100      	movs	r1, #0
    1152:	2068      	movs	r0, #104	; 0x68
    1154:	4b07      	ldr	r3, [pc, #28]	; (1174 <I2C_EEPROM_PORT_init+0x28>)
    1156:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    1158:	4907      	ldr	r1, [pc, #28]	; (1178 <I2C_EEPROM_PORT_init+0x2c>)
    115a:	2068      	movs	r0, #104	; 0x68
    115c:	4b07      	ldr	r3, [pc, #28]	; (117c <I2C_EEPROM_PORT_init+0x30>)
    115e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    1160:	2100      	movs	r1, #0
    1162:	2069      	movs	r0, #105	; 0x69
    1164:	4b03      	ldr	r3, [pc, #12]	; (1174 <I2C_EEPROM_PORT_init+0x28>)
    1166:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    1168:	4905      	ldr	r1, [pc, #20]	; (1180 <I2C_EEPROM_PORT_init+0x34>)
    116a:	2069      	movs	r0, #105	; 0x69
    116c:	4b03      	ldr	r3, [pc, #12]	; (117c <I2C_EEPROM_PORT_init+0x30>)
    116e:	4798      	blx	r3
}
    1170:	bf00      	nop
    1172:	bd80      	pop	{r7, pc}
    1174:	00000b85 	.word	0x00000b85
    1178:	00680002 	.word	0x00680002
    117c:	00000bb9 	.word	0x00000bb9
    1180:	00690002 	.word	0x00690002

00001184 <I2C_EEPROM_CLOCK_init>:

void I2C_EEPROM_CLOCK_init(void)
{
    1184:	b580      	push	{r7, lr}
    1186:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1188:	2242      	movs	r2, #66	; 0x42
    118a:	2125      	movs	r1, #37	; 0x25
    118c:	4806      	ldr	r0, [pc, #24]	; (11a8 <I2C_EEPROM_CLOCK_init+0x24>)
    118e:	4b07      	ldr	r3, [pc, #28]	; (11ac <I2C_EEPROM_CLOCK_init+0x28>)
    1190:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1192:	224a      	movs	r2, #74	; 0x4a
    1194:	2103      	movs	r1, #3
    1196:	4804      	ldr	r0, [pc, #16]	; (11a8 <I2C_EEPROM_CLOCK_init+0x24>)
    1198:	4b04      	ldr	r3, [pc, #16]	; (11ac <I2C_EEPROM_CLOCK_init+0x28>)
    119a:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    119c:	4804      	ldr	r0, [pc, #16]	; (11b0 <I2C_EEPROM_CLOCK_init+0x2c>)
    119e:	4b05      	ldr	r3, [pc, #20]	; (11b4 <I2C_EEPROM_CLOCK_init+0x30>)
    11a0:	4798      	blx	r3
}
    11a2:	bf00      	nop
    11a4:	bd80      	pop	{r7, pc}
    11a6:	bf00      	nop
    11a8:	40001c00 	.word	0x40001c00
    11ac:	00000405 	.word	0x00000405
    11b0:	40000800 	.word	0x40000800
    11b4:	0000066b 	.word	0x0000066b

000011b8 <I2C_EEPROM_init>:

void I2C_EEPROM_init(void)
{
    11b8:	b580      	push	{r7, lr}
    11ba:	af00      	add	r7, sp, #0
	I2C_EEPROM_CLOCK_init();
    11bc:	4b04      	ldr	r3, [pc, #16]	; (11d0 <I2C_EEPROM_init+0x18>)
    11be:	4798      	blx	r3
	i2c_m_async_init(&I2C_EEPROM, SERCOM7);
    11c0:	4904      	ldr	r1, [pc, #16]	; (11d4 <I2C_EEPROM_init+0x1c>)
    11c2:	4805      	ldr	r0, [pc, #20]	; (11d8 <I2C_EEPROM_init+0x20>)
    11c4:	4b05      	ldr	r3, [pc, #20]	; (11dc <I2C_EEPROM_init+0x24>)
    11c6:	4798      	blx	r3
	I2C_EEPROM_PORT_init();
    11c8:	4b05      	ldr	r3, [pc, #20]	; (11e0 <I2C_EEPROM_init+0x28>)
    11ca:	4798      	blx	r3
}
    11cc:	bf00      	nop
    11ce:	bd80      	pop	{r7, pc}
    11d0:	00001185 	.word	0x00001185
    11d4:	43000c00 	.word	0x43000c00
    11d8:	20001b20 	.word	0x20001b20
    11dc:	00001c25 	.word	0x00001c25
    11e0:	0000114d 	.word	0x0000114d

000011e4 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    11e4:	b580      	push	{r7, lr}
    11e6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    11e8:	4808      	ldr	r0, [pc, #32]	; (120c <TIMER_INTERFACE_init+0x28>)
    11ea:	4b09      	ldr	r3, [pc, #36]	; (1210 <TIMER_INTERFACE_init+0x2c>)
    11ec:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    11ee:	2243      	movs	r2, #67	; 0x43
    11f0:	2109      	movs	r1, #9
    11f2:	4808      	ldr	r0, [pc, #32]	; (1214 <TIMER_INTERFACE_init+0x30>)
    11f4:	4b08      	ldr	r3, [pc, #32]	; (1218 <TIMER_INTERFACE_init+0x34>)
    11f6:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC0, _tc_get_timer());
    11f8:	4b08      	ldr	r3, [pc, #32]	; (121c <TIMER_INTERFACE_init+0x38>)
    11fa:	4798      	blx	r3
    11fc:	4603      	mov	r3, r0
    11fe:	461a      	mov	r2, r3
    1200:	4907      	ldr	r1, [pc, #28]	; (1220 <TIMER_INTERFACE_init+0x3c>)
    1202:	4808      	ldr	r0, [pc, #32]	; (1224 <TIMER_INTERFACE_init+0x40>)
    1204:	4b08      	ldr	r3, [pc, #32]	; (1228 <TIMER_INTERFACE_init+0x44>)
    1206:	4798      	blx	r3
}
    1208:	bf00      	nop
    120a:	bd80      	pop	{r7, pc}
    120c:	40000800 	.word	0x40000800
    1210:	0000050b 	.word	0x0000050b
    1214:	40001c00 	.word	0x40001c00
    1218:	00000405 	.word	0x00000405
    121c:	00007925 	.word	0x00007925
    1220:	40003800 	.word	0x40003800
    1224:	20001a48 	.word	0x20001a48
    1228:	00002411 	.word	0x00002411

0000122c <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    122c:	b580      	push	{r7, lr}
    122e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
    1230:	4808      	ldr	r0, [pc, #32]	; (1254 <TIMER_EVENT_init+0x28>)
    1232:	4b09      	ldr	r3, [pc, #36]	; (1258 <TIMER_EVENT_init+0x2c>)
    1234:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1236:	2245      	movs	r2, #69	; 0x45
    1238:	2109      	movs	r1, #9
    123a:	4808      	ldr	r0, [pc, #32]	; (125c <TIMER_EVENT_init+0x30>)
    123c:	4b08      	ldr	r3, [pc, #32]	; (1260 <TIMER_EVENT_init+0x34>)
    123e:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC1, _tc_get_timer());
    1240:	4b08      	ldr	r3, [pc, #32]	; (1264 <TIMER_EVENT_init+0x38>)
    1242:	4798      	blx	r3
    1244:	4603      	mov	r3, r0
    1246:	461a      	mov	r2, r3
    1248:	4907      	ldr	r1, [pc, #28]	; (1268 <TIMER_EVENT_init+0x3c>)
    124a:	4808      	ldr	r0, [pc, #32]	; (126c <TIMER_EVENT_init+0x40>)
    124c:	4b08      	ldr	r3, [pc, #32]	; (1270 <TIMER_EVENT_init+0x44>)
    124e:	4798      	blx	r3
}
    1250:	bf00      	nop
    1252:	bd80      	pop	{r7, pc}
    1254:	40000800 	.word	0x40000800
    1258:	0000052b 	.word	0x0000052b
    125c:	40001c00 	.word	0x40001c00
    1260:	00000405 	.word	0x00000405
    1264:	00007925 	.word	0x00007925
    1268:	40003c00 	.word	0x40003c00
    126c:	20001a2c 	.word	0x20001a2c
    1270:	00002411 	.word	0x00002411

00001274 <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    1274:	b580      	push	{r7, lr}
    1276:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    1278:	4808      	ldr	r0, [pc, #32]	; (129c <TIMER_ARINC_init+0x28>)
    127a:	4b09      	ldr	r3, [pc, #36]	; (12a0 <TIMER_ARINC_init+0x2c>)
    127c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    127e:	2244      	movs	r2, #68	; 0x44
    1280:	211a      	movs	r1, #26
    1282:	4808      	ldr	r0, [pc, #32]	; (12a4 <TIMER_ARINC_init+0x30>)
    1284:	4b08      	ldr	r3, [pc, #32]	; (12a8 <TIMER_ARINC_init+0x34>)
    1286:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    1288:	4b08      	ldr	r3, [pc, #32]	; (12ac <TIMER_ARINC_init+0x38>)
    128a:	4798      	blx	r3
    128c:	4603      	mov	r3, r0
    128e:	461a      	mov	r2, r3
    1290:	4907      	ldr	r1, [pc, #28]	; (12b0 <TIMER_ARINC_init+0x3c>)
    1292:	4808      	ldr	r0, [pc, #32]	; (12b4 <TIMER_ARINC_init+0x40>)
    1294:	4b08      	ldr	r3, [pc, #32]	; (12b8 <TIMER_ARINC_init+0x44>)
    1296:	4798      	blx	r3
}
    1298:	bf00      	nop
    129a:	bd80      	pop	{r7, pc}
    129c:	40000800 	.word	0x40000800
    12a0:	000005ab 	.word	0x000005ab
    12a4:	40001c00 	.word	0x40001c00
    12a8:	00000405 	.word	0x00000405
    12ac:	00007925 	.word	0x00007925
    12b0:	4101a000 	.word	0x4101a000
    12b4:	20001aa8 	.word	0x20001aa8
    12b8:	00002411 	.word	0x00002411

000012bc <TIMER_HVAC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_HVAC_init(void)
{
    12bc:	b580      	push	{r7, lr}
    12be:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC3_bit(MCLK);
    12c0:	4808      	ldr	r0, [pc, #32]	; (12e4 <TIMER_HVAC_init+0x28>)
    12c2:	4b09      	ldr	r3, [pc, #36]	; (12e8 <TIMER_HVAC_init+0x2c>)
    12c4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC3_GCLK_ID, CONF_GCLK_TC3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    12c6:	2245      	movs	r2, #69	; 0x45
    12c8:	211a      	movs	r1, #26
    12ca:	4808      	ldr	r0, [pc, #32]	; (12ec <TIMER_HVAC_init+0x30>)
    12cc:	4b08      	ldr	r3, [pc, #32]	; (12f0 <TIMER_HVAC_init+0x34>)
    12ce:	4798      	blx	r3

	timer_init(&TIMER_HVAC, TC3, _tc_get_timer());
    12d0:	4b08      	ldr	r3, [pc, #32]	; (12f4 <TIMER_HVAC_init+0x38>)
    12d2:	4798      	blx	r3
    12d4:	4603      	mov	r3, r0
    12d6:	461a      	mov	r2, r3
    12d8:	4907      	ldr	r1, [pc, #28]	; (12f8 <TIMER_HVAC_init+0x3c>)
    12da:	4808      	ldr	r0, [pc, #32]	; (12fc <TIMER_HVAC_init+0x40>)
    12dc:	4b08      	ldr	r3, [pc, #32]	; (1300 <TIMER_HVAC_init+0x44>)
    12de:	4798      	blx	r3
}
    12e0:	bf00      	nop
    12e2:	bd80      	pop	{r7, pc}
    12e4:	40000800 	.word	0x40000800
    12e8:	000005cb 	.word	0x000005cb
    12ec:	40001c00 	.word	0x40001c00
    12f0:	00000405 	.word	0x00000405
    12f4:	00007925 	.word	0x00007925
    12f8:	4101c000 	.word	0x4101c000
    12fc:	20001b04 	.word	0x20001b04
    1300:	00002411 	.word	0x00002411

00001304 <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    1304:	b580      	push	{r7, lr}
    1306:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB00, PINMUX_PB00E_TC7_WO0);
    1308:	4904      	ldr	r1, [pc, #16]	; (131c <LIVE_PULSE_PORT_init+0x18>)
    130a:	2020      	movs	r0, #32
    130c:	4b04      	ldr	r3, [pc, #16]	; (1320 <LIVE_PULSE_PORT_init+0x1c>)
    130e:	4798      	blx	r3

	gpio_set_pin_function(PB01, PINMUX_PB01E_TC7_WO1);
    1310:	4904      	ldr	r1, [pc, #16]	; (1324 <LIVE_PULSE_PORT_init+0x20>)
    1312:	2021      	movs	r0, #33	; 0x21
    1314:	4b02      	ldr	r3, [pc, #8]	; (1320 <LIVE_PULSE_PORT_init+0x1c>)
    1316:	4798      	blx	r3
}
    1318:	bf00      	nop
    131a:	bd80      	pop	{r7, pc}
    131c:	00200004 	.word	0x00200004
    1320:	00000bb9 	.word	0x00000bb9
    1324:	00210004 	.word	0x00210004

00001328 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    1328:	b580      	push	{r7, lr}
    132a:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    132c:	4804      	ldr	r0, [pc, #16]	; (1340 <LIVE_PULSE_CLOCK_init+0x18>)
    132e:	4b05      	ldr	r3, [pc, #20]	; (1344 <LIVE_PULSE_CLOCK_init+0x1c>)
    1330:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1332:	224b      	movs	r2, #75	; 0x4b
    1334:	2127      	movs	r1, #39	; 0x27
    1336:	4804      	ldr	r0, [pc, #16]	; (1348 <LIVE_PULSE_CLOCK_init+0x20>)
    1338:	4b04      	ldr	r3, [pc, #16]	; (134c <LIVE_PULSE_CLOCK_init+0x24>)
    133a:	4798      	blx	r3
}
    133c:	bf00      	nop
    133e:	bd80      	pop	{r7, pc}
    1340:	40000800 	.word	0x40000800
    1344:	0000068b 	.word	0x0000068b
    1348:	40001c00 	.word	0x40001c00
    134c:	00000405 	.word	0x00000405

00001350 <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    1350:	b580      	push	{r7, lr}
    1352:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    1354:	4b06      	ldr	r3, [pc, #24]	; (1370 <LIVE_PULSE_init+0x20>)
    1356:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    1358:	4b06      	ldr	r3, [pc, #24]	; (1374 <LIVE_PULSE_init+0x24>)
    135a:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    135c:	4b06      	ldr	r3, [pc, #24]	; (1378 <LIVE_PULSE_init+0x28>)
    135e:	4798      	blx	r3
    1360:	4603      	mov	r3, r0
    1362:	461a      	mov	r2, r3
    1364:	4905      	ldr	r1, [pc, #20]	; (137c <LIVE_PULSE_init+0x2c>)
    1366:	4806      	ldr	r0, [pc, #24]	; (1380 <LIVE_PULSE_init+0x30>)
    1368:	4b06      	ldr	r3, [pc, #24]	; (1384 <LIVE_PULSE_init+0x34>)
    136a:	4798      	blx	r3
}
    136c:	bf00      	nop
    136e:	bd80      	pop	{r7, pc}
    1370:	00001329 	.word	0x00001329
    1374:	00001305 	.word	0x00001305
    1378:	00007935 	.word	0x00007935
    137c:	43001800 	.word	0x43001800
    1380:	20001a64 	.word	0x20001a64
    1384:	00001cb9 	.word	0x00001cb9

00001388 <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    1388:	b580      	push	{r7, lr}
    138a:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    138c:	2102      	movs	r1, #2
    138e:	2018      	movs	r0, #24
    1390:	4b0f      	ldr	r3, [pc, #60]	; (13d0 <CDCUSB_PORT_init+0x48>)
    1392:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    1394:	2100      	movs	r1, #0
    1396:	2018      	movs	r0, #24
    1398:	4b0e      	ldr	r3, [pc, #56]	; (13d4 <CDCUSB_PORT_init+0x4c>)
    139a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    139c:	2100      	movs	r1, #0
    139e:	2018      	movs	r0, #24
    13a0:	4b0d      	ldr	r3, [pc, #52]	; (13d8 <CDCUSB_PORT_init+0x50>)
    13a2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    13a4:	490d      	ldr	r1, [pc, #52]	; (13dc <CDCUSB_PORT_init+0x54>)
    13a6:	2018      	movs	r0, #24
    13a8:	4b0d      	ldr	r3, [pc, #52]	; (13e0 <CDCUSB_PORT_init+0x58>)
    13aa:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    13ac:	2102      	movs	r1, #2
    13ae:	2019      	movs	r0, #25
    13b0:	4b07      	ldr	r3, [pc, #28]	; (13d0 <CDCUSB_PORT_init+0x48>)
    13b2:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    13b4:	2100      	movs	r1, #0
    13b6:	2019      	movs	r0, #25
    13b8:	4b06      	ldr	r3, [pc, #24]	; (13d4 <CDCUSB_PORT_init+0x4c>)
    13ba:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    13bc:	2100      	movs	r1, #0
    13be:	2019      	movs	r0, #25
    13c0:	4b05      	ldr	r3, [pc, #20]	; (13d8 <CDCUSB_PORT_init+0x50>)
    13c2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    13c4:	4907      	ldr	r1, [pc, #28]	; (13e4 <CDCUSB_PORT_init+0x5c>)
    13c6:	2019      	movs	r0, #25
    13c8:	4b05      	ldr	r3, [pc, #20]	; (13e0 <CDCUSB_PORT_init+0x58>)
    13ca:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    13cc:	bf00      	nop
    13ce:	bd80      	pop	{r7, pc}
    13d0:	00000bd9 	.word	0x00000bd9
    13d4:	00000c11 	.word	0x00000c11
    13d8:	00000b85 	.word	0x00000b85
    13dc:	00180007 	.word	0x00180007
    13e0:	00000bb9 	.word	0x00000bb9
    13e4:	00190007 	.word	0x00190007

000013e8 <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    13e8:	b580      	push	{r7, lr}
    13ea:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    13ec:	2242      	movs	r2, #66	; 0x42
    13ee:	210a      	movs	r1, #10
    13f0:	4805      	ldr	r0, [pc, #20]	; (1408 <CDCUSB_CLOCK_init+0x20>)
    13f2:	4b06      	ldr	r3, [pc, #24]	; (140c <CDCUSB_CLOCK_init+0x24>)
    13f4:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    13f6:	4806      	ldr	r0, [pc, #24]	; (1410 <CDCUSB_CLOCK_init+0x28>)
    13f8:	4b06      	ldr	r3, [pc, #24]	; (1414 <CDCUSB_CLOCK_init+0x2c>)
    13fa:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    13fc:	4804      	ldr	r0, [pc, #16]	; (1410 <CDCUSB_CLOCK_init+0x28>)
    13fe:	4b06      	ldr	r3, [pc, #24]	; (1418 <CDCUSB_CLOCK_init+0x30>)
    1400:	4798      	blx	r3
}
    1402:	bf00      	nop
    1404:	bd80      	pop	{r7, pc}
    1406:	bf00      	nop
    1408:	40001c00 	.word	0x40001c00
    140c:	00000405 	.word	0x00000405
    1410:	40000800 	.word	0x40000800
    1414:	0000042b 	.word	0x0000042b
    1418:	0000054b 	.word	0x0000054b

0000141c <CDCUSB_init>:

void CDCUSB_init(void)
{
    141c:	b580      	push	{r7, lr}
    141e:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    1420:	4b03      	ldr	r3, [pc, #12]	; (1430 <CDCUSB_init+0x14>)
    1422:	4798      	blx	r3
	usb_d_init();
    1424:	4b03      	ldr	r3, [pc, #12]	; (1434 <CDCUSB_init+0x18>)
    1426:	4798      	blx	r3
	CDCUSB_PORT_init();
    1428:	4b03      	ldr	r3, [pc, #12]	; (1438 <CDCUSB_init+0x1c>)
    142a:	4798      	blx	r3
}
    142c:	bf00      	nop
    142e:	bd80      	pop	{r7, pc}
    1430:	000013e9 	.word	0x000013e9
    1434:	00002989 	.word	0x00002989
    1438:	00001389 	.word	0x00001389

0000143c <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    143c:	b580      	push	{r7, lr}
    143e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    1440:	4802      	ldr	r0, [pc, #8]	; (144c <WATCHDOG_CLOCK_init+0x10>)
    1442:	4b03      	ldr	r3, [pc, #12]	; (1450 <WATCHDOG_CLOCK_init+0x14>)
    1444:	4798      	blx	r3
}
    1446:	bf00      	nop
    1448:	bd80      	pop	{r7, pc}
    144a:	bf00      	nop
    144c:	40000800 	.word	0x40000800
    1450:	000004ab 	.word	0x000004ab

00001454 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    1454:	b580      	push	{r7, lr}
    1456:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    1458:	4b03      	ldr	r3, [pc, #12]	; (1468 <WATCHDOG_init+0x14>)
    145a:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    145c:	4903      	ldr	r1, [pc, #12]	; (146c <WATCHDOG_init+0x18>)
    145e:	4804      	ldr	r0, [pc, #16]	; (1470 <WATCHDOG_init+0x1c>)
    1460:	4b04      	ldr	r3, [pc, #16]	; (1474 <WATCHDOG_init+0x20>)
    1462:	4798      	blx	r3
}
    1464:	bf00      	nop
    1466:	bd80      	pop	{r7, pc}
    1468:	0000143d 	.word	0x0000143d
    146c:	40002000 	.word	0x40002000
    1470:	20001b80 	.word	0x20001b80
    1474:	00000c59 	.word	0x00000c59

00001478 <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    1478:	b580      	push	{r7, lr}
    147a:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    147c:	4904      	ldr	r1, [pc, #16]	; (1490 <CAN_CCU_PORT_init+0x18>)
    147e:	202d      	movs	r0, #45	; 0x2d
    1480:	4b04      	ldr	r3, [pc, #16]	; (1494 <CAN_CCU_PORT_init+0x1c>)
    1482:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    1484:	4904      	ldr	r1, [pc, #16]	; (1498 <CAN_CCU_PORT_init+0x20>)
    1486:	202c      	movs	r0, #44	; 0x2c
    1488:	4b02      	ldr	r3, [pc, #8]	; (1494 <CAN_CCU_PORT_init+0x1c>)
    148a:	4798      	blx	r3
}
    148c:	bf00      	nop
    148e:	bd80      	pop	{r7, pc}
    1490:	002d0007 	.word	0x002d0007
    1494:	00000bb9 	.word	0x00000bb9
    1498:	002c0007 	.word	0x002c0007

0000149c <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    149c:	b580      	push	{r7, lr}
    149e:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    14a0:	4807      	ldr	r0, [pc, #28]	; (14c0 <CAN_CCU_init+0x24>)
    14a2:	4b08      	ldr	r3, [pc, #32]	; (14c4 <CAN_CCU_init+0x28>)
    14a4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    14a6:	2243      	movs	r2, #67	; 0x43
    14a8:	211c      	movs	r1, #28
    14aa:	4807      	ldr	r0, [pc, #28]	; (14c8 <CAN_CCU_init+0x2c>)
    14ac:	4b07      	ldr	r3, [pc, #28]	; (14cc <CAN_CCU_init+0x30>)
    14ae:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    14b0:	4907      	ldr	r1, [pc, #28]	; (14d0 <CAN_CCU_init+0x34>)
    14b2:	4808      	ldr	r0, [pc, #32]	; (14d4 <CAN_CCU_init+0x38>)
    14b4:	4b08      	ldr	r3, [pc, #32]	; (14d8 <CAN_CCU_init+0x3c>)
    14b6:	4798      	blx	r3
	CAN_CCU_PORT_init();
    14b8:	4b08      	ldr	r3, [pc, #32]	; (14dc <CAN_CCU_init+0x40>)
    14ba:	4798      	blx	r3
}
    14bc:	bf00      	nop
    14be:	bd80      	pop	{r7, pc}
    14c0:	40000800 	.word	0x40000800
    14c4:	0000046b 	.word	0x0000046b
    14c8:	40001c00 	.word	0x40001c00
    14cc:	00000405 	.word	0x00000405
    14d0:	42000400 	.word	0x42000400
    14d4:	20001a80 	.word	0x20001a80
    14d8:	000016c9 	.word	0x000016c9
    14dc:	00001479 	.word	0x00001479

000014e0 <system_init>:

void system_init(void)
{
    14e0:	b580      	push	{r7, lr}
    14e2:	af00      	add	r7, sp, #0
	init_mcu();
    14e4:	4b46      	ldr	r3, [pc, #280]	; (1600 <system_init+0x120>)
    14e6:	4798      	blx	r3

	// GPIO on PB07

	// Set pin direction to input
	gpio_set_pin_direction(INT_LTC2983, GPIO_DIRECTION_IN);
    14e8:	2101      	movs	r1, #1
    14ea:	2027      	movs	r0, #39	; 0x27
    14ec:	4b45      	ldr	r3, [pc, #276]	; (1604 <system_init+0x124>)
    14ee:	4798      	blx	r3

	gpio_set_pin_pull_mode(INT_LTC2983,
    14f0:	2102      	movs	r1, #2
    14f2:	2027      	movs	r0, #39	; 0x27
    14f4:	4b44      	ldr	r3, [pc, #272]	; (1608 <system_init+0x128>)
    14f6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(INT_LTC2983, GPIO_PIN_FUNCTION_OFF);
    14f8:	f04f 31ff 	mov.w	r1, #4294967295
    14fc:	2027      	movs	r0, #39	; 0x27
    14fe:	4b43      	ldr	r3, [pc, #268]	; (160c <system_init+0x12c>)
    1500:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_SPI_LTC,
    1502:	2101      	movs	r1, #1
    1504:	203d      	movs	r0, #61	; 0x3d
    1506:	4b42      	ldr	r3, [pc, #264]	; (1610 <system_init+0x130>)
    1508:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_SPI_LTC, GPIO_DIRECTION_OUT);
    150a:	2102      	movs	r1, #2
    150c:	203d      	movs	r0, #61	; 0x3d
    150e:	4b3d      	ldr	r3, [pc, #244]	; (1604 <system_init+0x124>)
    1510:	4798      	blx	r3

	gpio_set_pin_function(CS_SPI_LTC, GPIO_PIN_FUNCTION_OFF);
    1512:	f04f 31ff 	mov.w	r1, #4294967295
    1516:	203d      	movs	r0, #61	; 0x3d
    1518:	4b3c      	ldr	r3, [pc, #240]	; (160c <system_init+0x12c>)
    151a:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    151c:	2101      	movs	r1, #1
    151e:	203f      	movs	r0, #63	; 0x3f
    1520:	4b38      	ldr	r3, [pc, #224]	; (1604 <system_init+0x124>)
    1522:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    1524:	2101      	movs	r1, #1
    1526:	203f      	movs	r0, #63	; 0x3f
    1528:	4b37      	ldr	r3, [pc, #220]	; (1608 <system_init+0x128>)
    152a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    152c:	f04f 31ff 	mov.w	r1, #4294967295
    1530:	203f      	movs	r0, #63	; 0x3f
    1532:	4b36      	ldr	r3, [pc, #216]	; (160c <system_init+0x12c>)
    1534:	4798      	blx	r3

	// GPIO on PC00

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    1536:	2101      	movs	r1, #1
    1538:	2040      	movs	r0, #64	; 0x40
    153a:	4b32      	ldr	r3, [pc, #200]	; (1604 <system_init+0x124>)
    153c:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    153e:	2102      	movs	r1, #2
    1540:	2040      	movs	r0, #64	; 0x40
    1542:	4b31      	ldr	r3, [pc, #196]	; (1608 <system_init+0x128>)
    1544:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(VBUS_DETECTED, GPIO_PIN_FUNCTION_OFF);
    1546:	f04f 31ff 	mov.w	r1, #4294967295
    154a:	2040      	movs	r0, #64	; 0x40
    154c:	4b2f      	ldr	r3, [pc, #188]	; (160c <system_init+0x12c>)
    154e:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    1550:	2100      	movs	r1, #0
    1552:	204d      	movs	r0, #77	; 0x4d
    1554:	4b2e      	ldr	r3, [pc, #184]	; (1610 <system_init+0x130>)
    1556:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    1558:	2102      	movs	r1, #2
    155a:	204d      	movs	r0, #77	; 0x4d
    155c:	4b29      	ldr	r3, [pc, #164]	; (1604 <system_init+0x124>)
    155e:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    1560:	f04f 31ff 	mov.w	r1, #4294967295
    1564:	204d      	movs	r0, #77	; 0x4d
    1566:	4b29      	ldr	r3, [pc, #164]	; (160c <system_init+0x12c>)
    1568:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    156a:	2101      	movs	r1, #1
    156c:	204e      	movs	r0, #78	; 0x4e
    156e:	4b28      	ldr	r3, [pc, #160]	; (1610 <system_init+0x130>)
    1570:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    1572:	2102      	movs	r1, #2
    1574:	204e      	movs	r0, #78	; 0x4e
    1576:	4b23      	ldr	r3, [pc, #140]	; (1604 <system_init+0x124>)
    1578:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    157a:	f04f 31ff 	mov.w	r1, #4294967295
    157e:	204e      	movs	r0, #78	; 0x4e
    1580:	4b22      	ldr	r3, [pc, #136]	; (160c <system_init+0x12c>)
    1582:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    1584:	2100      	movs	r1, #0
    1586:	204f      	movs	r0, #79	; 0x4f
    1588:	4b21      	ldr	r3, [pc, #132]	; (1610 <system_init+0x130>)
    158a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    158c:	2102      	movs	r1, #2
    158e:	204f      	movs	r0, #79	; 0x4f
    1590:	4b1c      	ldr	r3, [pc, #112]	; (1604 <system_init+0x124>)
    1592:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    1594:	f04f 31ff 	mov.w	r1, #4294967295
    1598:	204f      	movs	r0, #79	; 0x4f
    159a:	4b1c      	ldr	r3, [pc, #112]	; (160c <system_init+0x12c>)
    159c:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    159e:	2100      	movs	r1, #0
    15a0:	2052      	movs	r0, #82	; 0x52
    15a2:	4b1b      	ldr	r3, [pc, #108]	; (1610 <system_init+0x130>)
    15a4:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    15a6:	2102      	movs	r1, #2
    15a8:	2052      	movs	r0, #82	; 0x52
    15aa:	4b16      	ldr	r3, [pc, #88]	; (1604 <system_init+0x124>)
    15ac:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    15ae:	f04f 31ff 	mov.w	r1, #4294967295
    15b2:	2052      	movs	r0, #82	; 0x52
    15b4:	4b15      	ldr	r3, [pc, #84]	; (160c <system_init+0x12c>)
    15b6:	4798      	blx	r3

	CRC_CALC_init();
    15b8:	4b16      	ldr	r3, [pc, #88]	; (1614 <system_init+0x134>)
    15ba:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    15bc:	4b16      	ldr	r3, [pc, #88]	; (1618 <system_init+0x138>)
    15be:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    15c0:	4b16      	ldr	r3, [pc, #88]	; (161c <system_init+0x13c>)
    15c2:	4798      	blx	r3

	QSPI_N25Q256_init();
    15c4:	4b16      	ldr	r3, [pc, #88]	; (1620 <system_init+0x140>)
    15c6:	4798      	blx	r3

	DATETIME_CLOCK_init();
    15c8:	4b16      	ldr	r3, [pc, #88]	; (1624 <system_init+0x144>)
    15ca:	4798      	blx	r3

	SPI_TEMP_init();
    15cc:	4b16      	ldr	r3, [pc, #88]	; (1628 <system_init+0x148>)
    15ce:	4798      	blx	r3

	I2C_EXPANDER_init();
    15d0:	4b16      	ldr	r3, [pc, #88]	; (162c <system_init+0x14c>)
    15d2:	4798      	blx	r3

	SPI_HI3593_init();
    15d4:	4b16      	ldr	r3, [pc, #88]	; (1630 <system_init+0x150>)
    15d6:	4798      	blx	r3

	I2C_EEPROM_init();
    15d8:	4b16      	ldr	r3, [pc, #88]	; (1634 <system_init+0x154>)
    15da:	4798      	blx	r3

	TIMER_INTERFACE_init();
    15dc:	4b16      	ldr	r3, [pc, #88]	; (1638 <system_init+0x158>)
    15de:	4798      	blx	r3
	TIMER_EVENT_init();
    15e0:	4b16      	ldr	r3, [pc, #88]	; (163c <system_init+0x15c>)
    15e2:	4798      	blx	r3
	TIMER_ARINC_init();
    15e4:	4b16      	ldr	r3, [pc, #88]	; (1640 <system_init+0x160>)
    15e6:	4798      	blx	r3
	TIMER_HVAC_init();
    15e8:	4b16      	ldr	r3, [pc, #88]	; (1644 <system_init+0x164>)
    15ea:	4798      	blx	r3
	LIVE_PULSE_init();
    15ec:	4b16      	ldr	r3, [pc, #88]	; (1648 <system_init+0x168>)
    15ee:	4798      	blx	r3

	CDCUSB_init();
    15f0:	4b16      	ldr	r3, [pc, #88]	; (164c <system_init+0x16c>)
    15f2:	4798      	blx	r3

	WATCHDOG_init();
    15f4:	4b16      	ldr	r3, [pc, #88]	; (1650 <system_init+0x170>)
    15f6:	4798      	blx	r3
	CAN_CCU_init();
    15f8:	4b16      	ldr	r3, [pc, #88]	; (1654 <system_init+0x174>)
    15fa:	4798      	blx	r3
}
    15fc:	bf00      	nop
    15fe:	bd80      	pop	{r7, pc}
    1600:	00000c49 	.word	0x00000c49
    1604:	00000bd9 	.word	0x00000bd9
    1608:	00000b85 	.word	0x00000b85
    160c:	00000bb9 	.word	0x00000bb9
    1610:	00000c11 	.word	0x00000c11
    1614:	00000ca9 	.word	0x00000ca9
    1618:	00000cd5 	.word	0x00000cd5
    161c:	00000d79 	.word	0x00000d79
    1620:	00000eb5 	.word	0x00000eb5
    1624:	00000ef9 	.word	0x00000ef9
    1628:	00000fbd 	.word	0x00000fbd
    162c:	00001055 	.word	0x00001055
    1630:	00001121 	.word	0x00001121
    1634:	000011b9 	.word	0x000011b9
    1638:	000011e5 	.word	0x000011e5
    163c:	0000122d 	.word	0x0000122d
    1640:	00001275 	.word	0x00001275
    1644:	000012bd 	.word	0x000012bd
    1648:	00001351 	.word	0x00001351
    164c:	0000141d 	.word	0x0000141d
    1650:	00001455 	.word	0x00001455
    1654:	0000149d 	.word	0x0000149d

00001658 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    1658:	b580      	push	{r7, lr}
    165a:	b084      	sub	sp, #16
    165c:	af00      	add	r7, sp, #0
    165e:	6078      	str	r0, [r7, #4]
    1660:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    1662:	2300      	movs	r3, #0
    1664:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    1666:	687b      	ldr	r3, [r7, #4]
    1668:	2b00      	cmp	r3, #0
    166a:	bf14      	ite	ne
    166c:	2301      	movne	r3, #1
    166e:	2300      	moveq	r3, #0
    1670:	b2db      	uxtb	r3, r3
    1672:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    1676:	4911      	ldr	r1, [pc, #68]	; (16bc <calendar_init+0x64>)
    1678:	4618      	mov	r0, r3
    167a:	4b11      	ldr	r3, [pc, #68]	; (16c0 <calendar_init+0x68>)
    167c:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    167e:	687b      	ldr	r3, [r7, #4]
    1680:	681a      	ldr	r2, [r3, #0]
    1682:	683b      	ldr	r3, [r7, #0]
    1684:	429a      	cmp	r2, r3
    1686:	d101      	bne.n	168c <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    1688:	2300      	movs	r3, #0
    168a:	e013      	b.n	16b4 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    168c:	687b      	ldr	r3, [r7, #4]
    168e:	681b      	ldr	r3, [r3, #0]
    1690:	2b00      	cmp	r3, #0
    1692:	d002      	beq.n	169a <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    1694:	f06f 0311 	mvn.w	r3, #17
    1698:	e00c      	b.n	16b4 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    169a:	687b      	ldr	r3, [r7, #4]
    169c:	683a      	ldr	r2, [r7, #0]
    169e:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    16a0:	687b      	ldr	r3, [r7, #4]
    16a2:	4618      	mov	r0, r3
    16a4:	4b07      	ldr	r3, [pc, #28]	; (16c4 <calendar_init+0x6c>)
    16a6:	4798      	blx	r3
    16a8:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    16aa:	687b      	ldr	r3, [r7, #4]
    16ac:	f240 72b2 	movw	r2, #1970	; 0x7b2
    16b0:	619a      	str	r2, [r3, #24]

	return ret;
    16b2:	68fb      	ldr	r3, [r7, #12]
}
    16b4:	4618      	mov	r0, r3
    16b6:	3710      	adds	r7, #16
    16b8:	46bd      	mov	sp, r7
    16ba:	bd80      	pop	{r7, pc}
    16bc:	00012e9c 	.word	0x00012e9c
    16c0:	00002edd 	.word	0x00002edd
    16c4:	0000563d 	.word	0x0000563d

000016c8 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    16c8:	b580      	push	{r7, lr}
    16ca:	b084      	sub	sp, #16
    16cc:	af00      	add	r7, sp, #0
    16ce:	6078      	str	r0, [r7, #4]
    16d0:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    16d2:	687b      	ldr	r3, [r7, #4]
    16d4:	2b00      	cmp	r3, #0
    16d6:	d004      	beq.n	16e2 <can_async_init+0x1a>
    16d8:	683b      	ldr	r3, [r7, #0]
    16da:	2b00      	cmp	r3, #0
    16dc:	d001      	beq.n	16e2 <can_async_init+0x1a>
    16de:	2301      	movs	r3, #1
    16e0:	e000      	b.n	16e4 <can_async_init+0x1c>
    16e2:	2300      	movs	r3, #0
    16e4:	f003 0301 	and.w	r3, r3, #1
    16e8:	b2db      	uxtb	r3, r3
    16ea:	2241      	movs	r2, #65	; 0x41
    16ec:	490e      	ldr	r1, [pc, #56]	; (1728 <can_async_init+0x60>)
    16ee:	4618      	mov	r0, r3
    16f0:	4b0e      	ldr	r3, [pc, #56]	; (172c <can_async_init+0x64>)
    16f2:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    16f4:	687b      	ldr	r3, [r7, #4]
    16f6:	6839      	ldr	r1, [r7, #0]
    16f8:	4618      	mov	r0, r3
    16fa:	4b0d      	ldr	r3, [pc, #52]	; (1730 <can_async_init+0x68>)
    16fc:	4798      	blx	r3
    16fe:	60f8      	str	r0, [r7, #12]
	if (rc) {
    1700:	68fb      	ldr	r3, [r7, #12]
    1702:	2b00      	cmp	r3, #0
    1704:	d001      	beq.n	170a <can_async_init+0x42>
		return rc;
    1706:	68fb      	ldr	r3, [r7, #12]
    1708:	e009      	b.n	171e <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    170a:	687b      	ldr	r3, [r7, #4]
    170c:	4a09      	ldr	r2, [pc, #36]	; (1734 <can_async_init+0x6c>)
    170e:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    1710:	687b      	ldr	r3, [r7, #4]
    1712:	4a09      	ldr	r2, [pc, #36]	; (1738 <can_async_init+0x70>)
    1714:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    1716:	687b      	ldr	r3, [r7, #4]
    1718:	4a08      	ldr	r2, [pc, #32]	; (173c <can_async_init+0x74>)
    171a:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    171c:	2300      	movs	r3, #0
}
    171e:	4618      	mov	r0, r3
    1720:	3710      	adds	r7, #16
    1722:	46bd      	mov	sp, r7
    1724:	bd80      	pop	{r7, pc}
    1726:	bf00      	nop
    1728:	00012eb8 	.word	0x00012eb8
    172c:	00002edd 	.word	0x00002edd
    1730:	000035dd 	.word	0x000035dd
    1734:	000018dd 	.word	0x000018dd
    1738:	00001901 	.word	0x00001901
    173c:	00001925 	.word	0x00001925

00001740 <can_async_enable>:

/**
 * \brief Enable CAN
 */
int32_t can_async_enable(struct can_async_descriptor *const descr)
{
    1740:	b580      	push	{r7, lr}
    1742:	b082      	sub	sp, #8
    1744:	af00      	add	r7, sp, #0
    1746:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    1748:	687b      	ldr	r3, [r7, #4]
    174a:	2b00      	cmp	r3, #0
    174c:	bf14      	ite	ne
    174e:	2301      	movne	r3, #1
    1750:	2300      	moveq	r3, #0
    1752:	b2db      	uxtb	r3, r3
    1754:	225c      	movs	r2, #92	; 0x5c
    1756:	4906      	ldr	r1, [pc, #24]	; (1770 <can_async_enable+0x30>)
    1758:	4618      	mov	r0, r3
    175a:	4b06      	ldr	r3, [pc, #24]	; (1774 <can_async_enable+0x34>)
    175c:	4798      	blx	r3
	return _can_async_enable(&descr->dev);
    175e:	687b      	ldr	r3, [r7, #4]
    1760:	4618      	mov	r0, r3
    1762:	4b05      	ldr	r3, [pc, #20]	; (1778 <can_async_enable+0x38>)
    1764:	4798      	blx	r3
    1766:	4603      	mov	r3, r0
}
    1768:	4618      	mov	r0, r3
    176a:	3708      	adds	r7, #8
    176c:	46bd      	mov	sp, r7
    176e:	bd80      	pop	{r7, pc}
    1770:	00012eb8 	.word	0x00012eb8
    1774:	00002edd 	.word	0x00002edd
    1778:	000037c9 	.word	0x000037c9

0000177c <can_async_read>:

/**
 * \brief Read a CAN message
 */
int32_t can_async_read(struct can_async_descriptor *const descr, struct can_message *msg)
{
    177c:	b580      	push	{r7, lr}
    177e:	b082      	sub	sp, #8
    1780:	af00      	add	r7, sp, #0
    1782:	6078      	str	r0, [r7, #4]
    1784:	6039      	str	r1, [r7, #0]
	ASSERT(descr && msg);
    1786:	687b      	ldr	r3, [r7, #4]
    1788:	2b00      	cmp	r3, #0
    178a:	d004      	beq.n	1796 <can_async_read+0x1a>
    178c:	683b      	ldr	r3, [r7, #0]
    178e:	2b00      	cmp	r3, #0
    1790:	d001      	beq.n	1796 <can_async_read+0x1a>
    1792:	2301      	movs	r3, #1
    1794:	e000      	b.n	1798 <can_async_read+0x1c>
    1796:	2300      	movs	r3, #0
    1798:	f003 0301 	and.w	r3, r3, #1
    179c:	b2db      	uxtb	r3, r3
    179e:	226e      	movs	r2, #110	; 0x6e
    17a0:	4906      	ldr	r1, [pc, #24]	; (17bc <can_async_read+0x40>)
    17a2:	4618      	mov	r0, r3
    17a4:	4b06      	ldr	r3, [pc, #24]	; (17c0 <can_async_read+0x44>)
    17a6:	4798      	blx	r3
	return _can_async_read(&descr->dev, msg);
    17a8:	687b      	ldr	r3, [r7, #4]
    17aa:	6839      	ldr	r1, [r7, #0]
    17ac:	4618      	mov	r0, r3
    17ae:	4b05      	ldr	r3, [pc, #20]	; (17c4 <can_async_read+0x48>)
    17b0:	4798      	blx	r3
    17b2:	4603      	mov	r3, r0
}
    17b4:	4618      	mov	r0, r3
    17b6:	3708      	adds	r7, #8
    17b8:	46bd      	mov	sp, r7
    17ba:	bd80      	pop	{r7, pc}
    17bc:	00012eb8 	.word	0x00012eb8
    17c0:	00002edd 	.word	0x00002edd
    17c4:	000037e9 	.word	0x000037e9

000017c8 <can_async_write>:

/**
 * \brief Write a CAN message
 */
int32_t can_async_write(struct can_async_descriptor *const descr, struct can_message *msg)
{
    17c8:	b580      	push	{r7, lr}
    17ca:	b082      	sub	sp, #8
    17cc:	af00      	add	r7, sp, #0
    17ce:	6078      	str	r0, [r7, #4]
    17d0:	6039      	str	r1, [r7, #0]
	ASSERT(descr && msg);
    17d2:	687b      	ldr	r3, [r7, #4]
    17d4:	2b00      	cmp	r3, #0
    17d6:	d004      	beq.n	17e2 <can_async_write+0x1a>
    17d8:	683b      	ldr	r3, [r7, #0]
    17da:	2b00      	cmp	r3, #0
    17dc:	d001      	beq.n	17e2 <can_async_write+0x1a>
    17de:	2301      	movs	r3, #1
    17e0:	e000      	b.n	17e4 <can_async_write+0x1c>
    17e2:	2300      	movs	r3, #0
    17e4:	f003 0301 	and.w	r3, r3, #1
    17e8:	b2db      	uxtb	r3, r3
    17ea:	2277      	movs	r2, #119	; 0x77
    17ec:	4906      	ldr	r1, [pc, #24]	; (1808 <can_async_write+0x40>)
    17ee:	4618      	mov	r0, r3
    17f0:	4b06      	ldr	r3, [pc, #24]	; (180c <can_async_write+0x44>)
    17f2:	4798      	blx	r3
	return _can_async_write(&descr->dev, msg);
    17f4:	687b      	ldr	r3, [r7, #4]
    17f6:	6839      	ldr	r1, [r7, #0]
    17f8:	4618      	mov	r0, r3
    17fa:	4b05      	ldr	r3, [pc, #20]	; (1810 <can_async_write+0x48>)
    17fc:	4798      	blx	r3
    17fe:	4603      	mov	r3, r0
}
    1800:	4618      	mov	r0, r3
    1802:	3708      	adds	r7, #8
    1804:	46bd      	mov	sp, r7
    1806:	bd80      	pop	{r7, pc}
    1808:	00012eb8 	.word	0x00012eb8
    180c:	00002edd 	.word	0x00002edd
    1810:	000038f9 	.word	0x000038f9

00001814 <can_async_register_callback>:
/**
 * \brief Register CAN callback function to interrupt
 */
int32_t can_async_register_callback(struct can_async_descriptor *const descr, enum can_async_callback_type type,
                                    FUNC_PTR cb)
{
    1814:	b580      	push	{r7, lr}
    1816:	b084      	sub	sp, #16
    1818:	af00      	add	r7, sp, #0
    181a:	60f8      	str	r0, [r7, #12]
    181c:	460b      	mov	r3, r1
    181e:	607a      	str	r2, [r7, #4]
    1820:	72fb      	strb	r3, [r7, #11]
	ASSERT(descr);
    1822:	68fb      	ldr	r3, [r7, #12]
    1824:	2b00      	cmp	r3, #0
    1826:	bf14      	ite	ne
    1828:	2301      	movne	r3, #1
    182a:	2300      	moveq	r3, #0
    182c:	b2db      	uxtb	r3, r3
    182e:	2281      	movs	r2, #129	; 0x81
    1830:	4914      	ldr	r1, [pc, #80]	; (1884 <can_async_register_callback+0x70>)
    1832:	4618      	mov	r0, r3
    1834:	4b14      	ldr	r3, [pc, #80]	; (1888 <can_async_register_callback+0x74>)
    1836:	4798      	blx	r3

	switch (type) {
    1838:	7afb      	ldrb	r3, [r7, #11]
    183a:	2b01      	cmp	r3, #1
    183c:	d007      	beq.n	184e <can_async_register_callback+0x3a>
    183e:	2b02      	cmp	r3, #2
    1840:	d009      	beq.n	1856 <can_async_register_callback+0x42>
    1842:	2b00      	cmp	r3, #0
    1844:	d10b      	bne.n	185e <can_async_register_callback+0x4a>
	case CAN_ASYNC_RX_CB:
		descr->cb.rx_done = (cb != NULL) ? (can_cb_t)cb : NULL;
    1846:	68fb      	ldr	r3, [r7, #12]
    1848:	687a      	ldr	r2, [r7, #4]
    184a:	621a      	str	r2, [r3, #32]
		break;
    184c:	e00a      	b.n	1864 <can_async_register_callback+0x50>
	case CAN_ASYNC_TX_CB:
		descr->cb.tx_done = (cb != NULL) ? (can_cb_t)cb : NULL;
    184e:	68fb      	ldr	r3, [r7, #12]
    1850:	687a      	ldr	r2, [r7, #4]
    1852:	61da      	str	r2, [r3, #28]
		break;
    1854:	e006      	b.n	1864 <can_async_register_callback+0x50>
	case CAN_ASYNC_IRQ_CB:
		descr->cb.irq_handler
		    = (cb != NULL) ? (void (*)(struct can_async_descriptor *const, enum can_async_interrupt_type))cb : NULL;
    1856:	68fb      	ldr	r3, [r7, #12]
    1858:	687a      	ldr	r2, [r7, #4]
    185a:	625a      	str	r2, [r3, #36]	; 0x24
		break;
    185c:	e002      	b.n	1864 <can_async_register_callback+0x50>
	default:
		return ERR_INVALID_ARG;
    185e:	f06f 030c 	mvn.w	r3, #12
    1862:	e00b      	b.n	187c <can_async_register_callback+0x68>
	}

	_can_async_set_irq_state(&descr->dev, type, NULL != cb);
    1864:	68f8      	ldr	r0, [r7, #12]
    1866:	687b      	ldr	r3, [r7, #4]
    1868:	2b00      	cmp	r3, #0
    186a:	bf14      	ite	ne
    186c:	2301      	movne	r3, #1
    186e:	2300      	moveq	r3, #0
    1870:	b2da      	uxtb	r2, r3
    1872:	7afb      	ldrb	r3, [r7, #11]
    1874:	4619      	mov	r1, r3
    1876:	4b05      	ldr	r3, [pc, #20]	; (188c <can_async_register_callback+0x78>)
    1878:	4798      	blx	r3

	return ERR_NONE;
    187a:	2300      	movs	r3, #0
}
    187c:	4618      	mov	r0, r3
    187e:	3710      	adds	r7, #16
    1880:	46bd      	mov	sp, r7
    1882:	bd80      	pop	{r7, pc}
    1884:	00012eb8 	.word	0x00012eb8
    1888:	00002edd 	.word	0x00002edd
    188c:	00003ab5 	.word	0x00003ab5

00001890 <can_async_set_filter>:
/**
 * \brief Set CAN filter
 */
int32_t can_async_set_filter(struct can_async_descriptor *const descr, uint8_t index, enum can_format fmt,
                             struct can_filter *filter)
{
    1890:	b590      	push	{r4, r7, lr}
    1892:	b085      	sub	sp, #20
    1894:	af00      	add	r7, sp, #0
    1896:	60f8      	str	r0, [r7, #12]
    1898:	607b      	str	r3, [r7, #4]
    189a:	460b      	mov	r3, r1
    189c:	72fb      	strb	r3, [r7, #11]
    189e:	4613      	mov	r3, r2
    18a0:	72bb      	strb	r3, [r7, #10]
	ASSERT(descr);
    18a2:	68fb      	ldr	r3, [r7, #12]
    18a4:	2b00      	cmp	r3, #0
    18a6:	bf14      	ite	ne
    18a8:	2301      	movne	r3, #1
    18aa:	2300      	moveq	r3, #0
    18ac:	b2db      	uxtb	r3, r3
    18ae:	22b8      	movs	r2, #184	; 0xb8
    18b0:	4907      	ldr	r1, [pc, #28]	; (18d0 <can_async_set_filter+0x40>)
    18b2:	4618      	mov	r0, r3
    18b4:	4b07      	ldr	r3, [pc, #28]	; (18d4 <can_async_set_filter+0x44>)
    18b6:	4798      	blx	r3
	return _can_async_set_filter(&descr->dev, index, fmt, filter);
    18b8:	68f8      	ldr	r0, [r7, #12]
    18ba:	7aba      	ldrb	r2, [r7, #10]
    18bc:	7af9      	ldrb	r1, [r7, #11]
    18be:	687b      	ldr	r3, [r7, #4]
    18c0:	4c05      	ldr	r4, [pc, #20]	; (18d8 <can_async_set_filter+0x48>)
    18c2:	47a0      	blx	r4
    18c4:	4603      	mov	r3, r0
}
    18c6:	4618      	mov	r0, r3
    18c8:	3714      	adds	r7, #20
    18ca:	46bd      	mov	sp, r7
    18cc:	bd90      	pop	{r4, r7, pc}
    18ce:	bf00      	nop
    18d0:	00012eb8 	.word	0x00012eb8
    18d4:	00002edd 	.word	0x00002edd
    18d8:	00003b41 	.word	0x00003b41

000018dc <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    18dc:	b580      	push	{r7, lr}
    18de:	b084      	sub	sp, #16
    18e0:	af00      	add	r7, sp, #0
    18e2:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    18e4:	687b      	ldr	r3, [r7, #4]
    18e6:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    18e8:	68fb      	ldr	r3, [r7, #12]
    18ea:	69db      	ldr	r3, [r3, #28]
    18ec:	2b00      	cmp	r3, #0
    18ee:	d003      	beq.n	18f8 <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    18f0:	68fb      	ldr	r3, [r7, #12]
    18f2:	69db      	ldr	r3, [r3, #28]
    18f4:	68f8      	ldr	r0, [r7, #12]
    18f6:	4798      	blx	r3
	}
}
    18f8:	bf00      	nop
    18fa:	3710      	adds	r7, #16
    18fc:	46bd      	mov	sp, r7
    18fe:	bd80      	pop	{r7, pc}

00001900 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    1900:	b580      	push	{r7, lr}
    1902:	b084      	sub	sp, #16
    1904:	af00      	add	r7, sp, #0
    1906:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    1908:	687b      	ldr	r3, [r7, #4]
    190a:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    190c:	68fb      	ldr	r3, [r7, #12]
    190e:	6a1b      	ldr	r3, [r3, #32]
    1910:	2b00      	cmp	r3, #0
    1912:	d003      	beq.n	191c <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    1914:	68fb      	ldr	r3, [r7, #12]
    1916:	6a1b      	ldr	r3, [r3, #32]
    1918:	68f8      	ldr	r0, [r7, #12]
    191a:	4798      	blx	r3
	}
}
    191c:	bf00      	nop
    191e:	3710      	adds	r7, #16
    1920:	46bd      	mov	sp, r7
    1922:	bd80      	pop	{r7, pc}

00001924 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    1924:	b580      	push	{r7, lr}
    1926:	b084      	sub	sp, #16
    1928:	af00      	add	r7, sp, #0
    192a:	6078      	str	r0, [r7, #4]
    192c:	460b      	mov	r3, r1
    192e:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    1930:	687b      	ldr	r3, [r7, #4]
    1932:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    1934:	68fb      	ldr	r3, [r7, #12]
    1936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1938:	2b00      	cmp	r3, #0
    193a:	d005      	beq.n	1948 <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    193c:	68fb      	ldr	r3, [r7, #12]
    193e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1940:	78fa      	ldrb	r2, [r7, #3]
    1942:	4611      	mov	r1, r2
    1944:	68f8      	ldr	r0, [r7, #12]
    1946:	4798      	blx	r3
	}
}
    1948:	bf00      	nop
    194a:	3710      	adds	r7, #16
    194c:	46bd      	mov	sp, r7
    194e:	bd80      	pop	{r7, pc}

00001950 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    1950:	b580      	push	{r7, lr}
    1952:	b082      	sub	sp, #8
    1954:	af00      	add	r7, sp, #0
    1956:	6078      	str	r0, [r7, #4]
    1958:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    195a:	687b      	ldr	r3, [r7, #4]
    195c:	2b00      	cmp	r3, #0
    195e:	d004      	beq.n	196a <crc_sync_init+0x1a>
    1960:	683b      	ldr	r3, [r7, #0]
    1962:	2b00      	cmp	r3, #0
    1964:	d001      	beq.n	196a <crc_sync_init+0x1a>
    1966:	2301      	movs	r3, #1
    1968:	e000      	b.n	196c <crc_sync_init+0x1c>
    196a:	2300      	movs	r3, #0
    196c:	f003 0301 	and.w	r3, r3, #1
    1970:	b2db      	uxtb	r3, r3
    1972:	222b      	movs	r2, #43	; 0x2b
    1974:	4906      	ldr	r1, [pc, #24]	; (1990 <crc_sync_init+0x40>)
    1976:	4618      	mov	r0, r3
    1978:	4b06      	ldr	r3, [pc, #24]	; (1994 <crc_sync_init+0x44>)
    197a:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    197c:	687b      	ldr	r3, [r7, #4]
    197e:	6839      	ldr	r1, [r7, #0]
    1980:	4618      	mov	r0, r3
    1982:	4b05      	ldr	r3, [pc, #20]	; (1998 <crc_sync_init+0x48>)
    1984:	4798      	blx	r3
    1986:	4603      	mov	r3, r0
}
    1988:	4618      	mov	r0, r3
    198a:	3708      	adds	r7, #8
    198c:	46bd      	mov	sp, r7
    198e:	bd80      	pop	{r7, pc}
    1990:	00012ed4 	.word	0x00012ed4
    1994:	00002edd 	.word	0x00002edd
    1998:	000040c5 	.word	0x000040c5

0000199c <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    199c:	b590      	push	{r4, r7, lr}
    199e:	b083      	sub	sp, #12
    19a0:	af00      	add	r7, sp, #0
    19a2:	4603      	mov	r3, r0
    19a4:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    19a6:	4b07      	ldr	r3, [pc, #28]	; (19c4 <delay_us+0x28>)
    19a8:	681c      	ldr	r4, [r3, #0]
    19aa:	88fb      	ldrh	r3, [r7, #6]
    19ac:	4618      	mov	r0, r3
    19ae:	4b06      	ldr	r3, [pc, #24]	; (19c8 <delay_us+0x2c>)
    19b0:	4798      	blx	r3
    19b2:	4603      	mov	r3, r0
    19b4:	4619      	mov	r1, r3
    19b6:	4620      	mov	r0, r4
    19b8:	4b04      	ldr	r3, [pc, #16]	; (19cc <delay_us+0x30>)
    19ba:	4798      	blx	r3
}
    19bc:	bf00      	nop
    19be:	370c      	adds	r7, #12
    19c0:	46bd      	mov	sp, r7
    19c2:	bd90      	pop	{r4, r7, pc}
    19c4:	20000aac 	.word	0x20000aac
    19c8:	00003e19 	.word	0x00003e19
    19cc:	00003fb1 	.word	0x00003fb1

000019d0 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    19d0:	b590      	push	{r4, r7, lr}
    19d2:	b083      	sub	sp, #12
    19d4:	af00      	add	r7, sp, #0
    19d6:	4603      	mov	r3, r0
    19d8:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    19da:	4b07      	ldr	r3, [pc, #28]	; (19f8 <delay_ms+0x28>)
    19dc:	681c      	ldr	r4, [r3, #0]
    19de:	88fb      	ldrh	r3, [r7, #6]
    19e0:	4618      	mov	r0, r3
    19e2:	4b06      	ldr	r3, [pc, #24]	; (19fc <delay_ms+0x2c>)
    19e4:	4798      	blx	r3
    19e6:	4603      	mov	r3, r0
    19e8:	4619      	mov	r1, r3
    19ea:	4620      	mov	r0, r4
    19ec:	4b04      	ldr	r3, [pc, #16]	; (1a00 <delay_ms+0x30>)
    19ee:	4798      	blx	r3
}
    19f0:	bf00      	nop
    19f2:	370c      	adds	r7, #12
    19f4:	46bd      	mov	sp, r7
    19f6:	bd90      	pop	{r4, r7, pc}
    19f8:	20000aac 	.word	0x20000aac
    19fc:	00003f85 	.word	0x00003f85
    1a00:	00003fb1 	.word	0x00003fb1

00001a04 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    1a04:	b580      	push	{r7, lr}
    1a06:	af00      	add	r7, sp, #0
	return _event_system_init();
    1a08:	4b02      	ldr	r3, [pc, #8]	; (1a14 <event_system_init+0x10>)
    1a0a:	4798      	blx	r3
    1a0c:	4603      	mov	r3, r0
}
    1a0e:	4618      	mov	r0, r3
    1a10:	bd80      	pop	{r7, pc}
    1a12:	bf00      	nop
    1a14:	000046f9 	.word	0x000046f9

00001a18 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    1a18:	b580      	push	{r7, lr}
    1a1a:	b082      	sub	sp, #8
    1a1c:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1a1e:	2300      	movs	r3, #0
    1a20:	80fb      	strh	r3, [r7, #6]
    1a22:	e00e      	b.n	1a42 <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    1a24:	88fb      	ldrh	r3, [r7, #6]
    1a26:	4a0c      	ldr	r2, [pc, #48]	; (1a58 <ext_irq_init+0x40>)
    1a28:	00db      	lsls	r3, r3, #3
    1a2a:	4413      	add	r3, r2
    1a2c:	f04f 32ff 	mov.w	r2, #4294967295
    1a30:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    1a32:	88fb      	ldrh	r3, [r7, #6]
    1a34:	4a08      	ldr	r2, [pc, #32]	; (1a58 <ext_irq_init+0x40>)
    1a36:	2100      	movs	r1, #0
    1a38:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1a3c:	88fb      	ldrh	r3, [r7, #6]
    1a3e:	3301      	adds	r3, #1
    1a40:	80fb      	strh	r3, [r7, #6]
    1a42:	88fb      	ldrh	r3, [r7, #6]
    1a44:	2b03      	cmp	r3, #3
    1a46:	d9ed      	bls.n	1a24 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    1a48:	4804      	ldr	r0, [pc, #16]	; (1a5c <ext_irq_init+0x44>)
    1a4a:	4b05      	ldr	r3, [pc, #20]	; (1a60 <ext_irq_init+0x48>)
    1a4c:	4798      	blx	r3
    1a4e:	4603      	mov	r3, r0
}
    1a50:	4618      	mov	r0, r3
    1a52:	3708      	adds	r7, #8
    1a54:	46bd      	mov	sp, r7
    1a56:	bd80      	pop	{r7, pc}
    1a58:	20000ab0 	.word	0x20000ab0
    1a5c:	00001a65 	.word	0x00001a65
    1a60:	000043cd 	.word	0x000043cd

00001a64 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    1a64:	b580      	push	{r7, lr}
    1a66:	b084      	sub	sp, #16
    1a68:	af00      	add	r7, sp, #0
    1a6a:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    1a6c:	2300      	movs	r3, #0
    1a6e:	73fb      	strb	r3, [r7, #15]
    1a70:	2304      	movs	r3, #4
    1a72:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    1a74:	e02a      	b.n	1acc <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    1a76:	7bba      	ldrb	r2, [r7, #14]
    1a78:	7bfb      	ldrb	r3, [r7, #15]
    1a7a:	4413      	add	r3, r2
    1a7c:	105b      	asrs	r3, r3, #1
    1a7e:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    1a80:	7b7b      	ldrb	r3, [r7, #13]
    1a82:	2b03      	cmp	r3, #3
    1a84:	d827      	bhi.n	1ad6 <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    1a86:	7b7b      	ldrb	r3, [r7, #13]
    1a88:	4a16      	ldr	r2, [pc, #88]	; (1ae4 <process_ext_irq+0x80>)
    1a8a:	00db      	lsls	r3, r3, #3
    1a8c:	4413      	add	r3, r2
    1a8e:	685a      	ldr	r2, [r3, #4]
    1a90:	687b      	ldr	r3, [r7, #4]
    1a92:	429a      	cmp	r2, r3
    1a94:	d10b      	bne.n	1aae <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    1a96:	7b7b      	ldrb	r3, [r7, #13]
    1a98:	4a12      	ldr	r2, [pc, #72]	; (1ae4 <process_ext_irq+0x80>)
    1a9a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1a9e:	2b00      	cmp	r3, #0
    1aa0:	d01b      	beq.n	1ada <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    1aa2:	7b7b      	ldrb	r3, [r7, #13]
    1aa4:	4a0f      	ldr	r2, [pc, #60]	; (1ae4 <process_ext_irq+0x80>)
    1aa6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1aaa:	4798      	blx	r3
			}
			return;
    1aac:	e015      	b.n	1ada <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    1aae:	7b7b      	ldrb	r3, [r7, #13]
    1ab0:	4a0c      	ldr	r2, [pc, #48]	; (1ae4 <process_ext_irq+0x80>)
    1ab2:	00db      	lsls	r3, r3, #3
    1ab4:	4413      	add	r3, r2
    1ab6:	685a      	ldr	r2, [r3, #4]
    1ab8:	687b      	ldr	r3, [r7, #4]
    1aba:	429a      	cmp	r2, r3
    1abc:	d203      	bcs.n	1ac6 <process_ext_irq+0x62>
			lower = middle + 1;
    1abe:	7b7b      	ldrb	r3, [r7, #13]
    1ac0:	3301      	adds	r3, #1
    1ac2:	73fb      	strb	r3, [r7, #15]
    1ac4:	e002      	b.n	1acc <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    1ac6:	7b7b      	ldrb	r3, [r7, #13]
    1ac8:	3b01      	subs	r3, #1
    1aca:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    1acc:	7bba      	ldrb	r2, [r7, #14]
    1ace:	7bfb      	ldrb	r3, [r7, #15]
    1ad0:	429a      	cmp	r2, r3
    1ad2:	d2d0      	bcs.n	1a76 <process_ext_irq+0x12>
    1ad4:	e002      	b.n	1adc <process_ext_irq+0x78>
			return;
    1ad6:	bf00      	nop
    1ad8:	e000      	b.n	1adc <process_ext_irq+0x78>
			return;
    1ada:	bf00      	nop
		}
	}
}
    1adc:	3710      	adds	r7, #16
    1ade:	46bd      	mov	sp, r7
    1ae0:	bd80      	pop	{r7, pc}
    1ae2:	bf00      	nop
    1ae4:	20000ab0 	.word	0x20000ab0

00001ae8 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    1ae8:	b580      	push	{r7, lr}
    1aea:	b084      	sub	sp, #16
    1aec:	af00      	add	r7, sp, #0
    1aee:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    1af0:	687b      	ldr	r3, [r7, #4]
    1af2:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    1af4:	687b      	ldr	r3, [r7, #4]
    1af6:	885b      	ldrh	r3, [r3, #2]
    1af8:	b29b      	uxth	r3, r3
    1afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
    1afe:	2b00      	cmp	r3, #0
    1b00:	d107      	bne.n	1b12 <i2c_tx_complete+0x2a>
		if (i2c->i2c_cb.tx_complete) {
    1b02:	68fb      	ldr	r3, [r7, #12]
    1b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1b06:	2b00      	cmp	r3, #0
    1b08:	d003      	beq.n	1b12 <i2c_tx_complete+0x2a>
			i2c->i2c_cb.tx_complete(i2c);
    1b0a:	68fb      	ldr	r3, [r7, #12]
    1b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1b0e:	68f8      	ldr	r0, [r7, #12]
    1b10:	4798      	blx	r3
		}
	}
}
    1b12:	bf00      	nop
    1b14:	3710      	adds	r7, #16
    1b16:	46bd      	mov	sp, r7
    1b18:	bd80      	pop	{r7, pc}

00001b1a <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    1b1a:	b580      	push	{r7, lr}
    1b1c:	b084      	sub	sp, #16
    1b1e:	af00      	add	r7, sp, #0
    1b20:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    1b22:	687b      	ldr	r3, [r7, #4]
    1b24:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    1b26:	687b      	ldr	r3, [r7, #4]
    1b28:	885b      	ldrh	r3, [r3, #2]
    1b2a:	b29b      	uxth	r3, r3
    1b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    1b30:	2b00      	cmp	r3, #0
    1b32:	d107      	bne.n	1b44 <i2c_rx_complete+0x2a>
		if (i2c->i2c_cb.rx_complete) {
    1b34:	68fb      	ldr	r3, [r7, #12]
    1b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1b38:	2b00      	cmp	r3, #0
    1b3a:	d003      	beq.n	1b44 <i2c_rx_complete+0x2a>
			i2c->i2c_cb.rx_complete(i2c);
    1b3c:	68fb      	ldr	r3, [r7, #12]
    1b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1b40:	68f8      	ldr	r0, [r7, #12]
    1b42:	4798      	blx	r3
		}
	}
}
    1b44:	bf00      	nop
    1b46:	3710      	adds	r7, #16
    1b48:	46bd      	mov	sp, r7
    1b4a:	bd80      	pop	{r7, pc}

00001b4c <i2c_error>:

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    1b4c:	b580      	push	{r7, lr}
    1b4e:	b084      	sub	sp, #16
    1b50:	af00      	add	r7, sp, #0
    1b52:	6078      	str	r0, [r7, #4]
    1b54:	6039      	str	r1, [r7, #0]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    1b56:	687b      	ldr	r3, [r7, #4]
    1b58:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    1b5a:	687b      	ldr	r3, [r7, #4]
    1b5c:	885b      	ldrh	r3, [r3, #2]
    1b5e:	b29b      	uxth	r3, r3
    1b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
    1b64:	2b00      	cmp	r3, #0
    1b66:	d108      	bne.n	1b7a <i2c_error+0x2e>
		if (i2c->i2c_cb.error) {
    1b68:	68fb      	ldr	r3, [r7, #12]
    1b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1b6c:	2b00      	cmp	r3, #0
    1b6e:	d004      	beq.n	1b7a <i2c_error+0x2e>
			i2c->i2c_cb.error(i2c, error);
    1b70:	68fb      	ldr	r3, [r7, #12]
    1b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1b74:	6839      	ldr	r1, [r7, #0]
    1b76:	68f8      	ldr	r0, [r7, #12]
    1b78:	4798      	blx	r3
		}
	}
}
    1b7a:	bf00      	nop
    1b7c:	3710      	adds	r7, #16
    1b7e:	46bd      	mov	sp, r7
    1b80:	bd80      	pop	{r7, pc}
	...

00001b84 <i2c_m_async_read>:

/**
 * \brief Async version of I2C I/O read
 */
static int32_t i2c_m_async_read(struct io_descriptor *const io, uint8_t *buf, const uint16_t n)
{
    1b84:	b580      	push	{r7, lr}
    1b86:	b08a      	sub	sp, #40	; 0x28
    1b88:	af00      	add	r7, sp, #0
    1b8a:	60f8      	str	r0, [r7, #12]
    1b8c:	60b9      	str	r1, [r7, #8]
    1b8e:	4613      	mov	r3, r2
    1b90:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    1b92:	68fb      	ldr	r3, [r7, #12]
    1b94:	3b28      	subs	r3, #40	; 0x28
    1b96:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    1b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1b9a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    1b9c:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    1b9e:	88fb      	ldrh	r3, [r7, #6]
    1ba0:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    1ba2:	f248 0301 	movw	r3, #32769	; 0x8001
    1ba6:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    1ba8:	68bb      	ldr	r3, [r7, #8]
    1baa:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    1bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1bae:	f107 0214 	add.w	r2, r7, #20
    1bb2:	4611      	mov	r1, r2
    1bb4:	4618      	mov	r0, r3
    1bb6:	4b06      	ldr	r3, [pc, #24]	; (1bd0 <i2c_m_async_read+0x4c>)
    1bb8:	4798      	blx	r3
    1bba:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    1bbc:	6a3b      	ldr	r3, [r7, #32]
    1bbe:	2b00      	cmp	r3, #0
    1bc0:	d001      	beq.n	1bc6 <i2c_m_async_read+0x42>
		/* error occurred */
		return ret;
    1bc2:	6a3b      	ldr	r3, [r7, #32]
    1bc4:	e000      	b.n	1bc8 <i2c_m_async_read+0x44>
	}

	return (int32_t)n;
    1bc6:	88fb      	ldrh	r3, [r7, #6]
}
    1bc8:	4618      	mov	r0, r3
    1bca:	3728      	adds	r7, #40	; 0x28
    1bcc:	46bd      	mov	sp, r7
    1bce:	bd80      	pop	{r7, pc}
    1bd0:	000064e5 	.word	0x000064e5

00001bd4 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    1bd4:	b580      	push	{r7, lr}
    1bd6:	b08a      	sub	sp, #40	; 0x28
    1bd8:	af00      	add	r7, sp, #0
    1bda:	60f8      	str	r0, [r7, #12]
    1bdc:	60b9      	str	r1, [r7, #8]
    1bde:	4613      	mov	r3, r2
    1be0:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    1be2:	68fb      	ldr	r3, [r7, #12]
    1be4:	3b28      	subs	r3, #40	; 0x28
    1be6:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    1be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1bea:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    1bec:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    1bee:	88fb      	ldrh	r3, [r7, #6]
    1bf0:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    1bf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    1bf6:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    1bf8:	68bb      	ldr	r3, [r7, #8]
    1bfa:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    1bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1bfe:	f107 0214 	add.w	r2, r7, #20
    1c02:	4611      	mov	r1, r2
    1c04:	4618      	mov	r0, r3
    1c06:	4b06      	ldr	r3, [pc, #24]	; (1c20 <i2c_m_async_write+0x4c>)
    1c08:	4798      	blx	r3
    1c0a:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    1c0c:	6a3b      	ldr	r3, [r7, #32]
    1c0e:	2b00      	cmp	r3, #0
    1c10:	d001      	beq.n	1c16 <i2c_m_async_write+0x42>
		/* error occurred */
		return ret;
    1c12:	6a3b      	ldr	r3, [r7, #32]
    1c14:	e000      	b.n	1c18 <i2c_m_async_write+0x44>
	}

	return (int32_t)n;
    1c16:	88fb      	ldrh	r3, [r7, #6]
}
    1c18:	4618      	mov	r0, r3
    1c1a:	3728      	adds	r7, #40	; 0x28
    1c1c:	46bd      	mov	sp, r7
    1c1e:	bd80      	pop	{r7, pc}
    1c20:	000064e5 	.word	0x000064e5

00001c24 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    1c24:	b580      	push	{r7, lr}
    1c26:	b084      	sub	sp, #16
    1c28:	af00      	add	r7, sp, #0
    1c2a:	6078      	str	r0, [r7, #4]
    1c2c:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    1c2e:	687b      	ldr	r3, [r7, #4]
    1c30:	2b00      	cmp	r3, #0
    1c32:	bf14      	ite	ne
    1c34:	2301      	movne	r3, #1
    1c36:	2300      	moveq	r3, #0
    1c38:	b2db      	uxtb	r3, r3
    1c3a:	2289      	movs	r2, #137	; 0x89
    1c3c:	4915      	ldr	r1, [pc, #84]	; (1c94 <i2c_m_async_init+0x70>)
    1c3e:	4618      	mov	r0, r3
    1c40:	4b15      	ldr	r3, [pc, #84]	; (1c98 <i2c_m_async_init+0x74>)
    1c42:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    1c44:	687b      	ldr	r3, [r7, #4]
    1c46:	6839      	ldr	r1, [r7, #0]
    1c48:	4618      	mov	r0, r3
    1c4a:	4b14      	ldr	r3, [pc, #80]	; (1c9c <i2c_m_async_init+0x78>)
    1c4c:	4798      	blx	r3
    1c4e:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    1c50:	68fb      	ldr	r3, [r7, #12]
    1c52:	2b00      	cmp	r3, #0
    1c54:	d001      	beq.n	1c5a <i2c_m_async_init+0x36>
		return init_status;
    1c56:	68fb      	ldr	r3, [r7, #12]
    1c58:	e018      	b.n	1c8c <i2c_m_async_init+0x68>
	}
	/* Init I/O */
	i2c->io.read  = i2c_m_async_read;
    1c5a:	687b      	ldr	r3, [r7, #4]
    1c5c:	4a10      	ldr	r2, [pc, #64]	; (1ca0 <i2c_m_async_init+0x7c>)
    1c5e:	62da      	str	r2, [r3, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    1c60:	687b      	ldr	r3, [r7, #4]
    1c62:	4a10      	ldr	r2, [pc, #64]	; (1ca4 <i2c_m_async_init+0x80>)
    1c64:	629a      	str	r2, [r3, #40]	; 0x28

	/* Init callbacks */
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    1c66:	687b      	ldr	r3, [r7, #4]
    1c68:	4a0f      	ldr	r2, [pc, #60]	; (1ca8 <i2c_m_async_init+0x84>)
    1c6a:	2101      	movs	r1, #1
    1c6c:	4618      	mov	r0, r3
    1c6e:	4b0f      	ldr	r3, [pc, #60]	; (1cac <i2c_m_async_init+0x88>)
    1c70:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    1c72:	687b      	ldr	r3, [r7, #4]
    1c74:	4a0e      	ldr	r2, [pc, #56]	; (1cb0 <i2c_m_async_init+0x8c>)
    1c76:	2102      	movs	r1, #2
    1c78:	4618      	mov	r0, r3
    1c7a:	4b0c      	ldr	r3, [pc, #48]	; (1cac <i2c_m_async_init+0x88>)
    1c7c:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    1c7e:	687b      	ldr	r3, [r7, #4]
    1c80:	4a0c      	ldr	r2, [pc, #48]	; (1cb4 <i2c_m_async_init+0x90>)
    1c82:	2100      	movs	r1, #0
    1c84:	4618      	mov	r0, r3
    1c86:	4b09      	ldr	r3, [pc, #36]	; (1cac <i2c_m_async_init+0x88>)
    1c88:	4798      	blx	r3

	return ERR_NONE;
    1c8a:	2300      	movs	r3, #0
}
    1c8c:	4618      	mov	r0, r3
    1c8e:	3710      	adds	r7, #16
    1c90:	46bd      	mov	sp, r7
    1c92:	bd80      	pop	{r7, pc}
    1c94:	00012ef0 	.word	0x00012ef0
    1c98:	00002edd 	.word	0x00002edd
    1c9c:	00006335 	.word	0x00006335
    1ca0:	00001b85 	.word	0x00001b85
    1ca4:	00001bd5 	.word	0x00001bd5
    1ca8:	00001ae9 	.word	0x00001ae9
    1cac:	000065b9 	.word	0x000065b9
    1cb0:	00001b1b 	.word	0x00001b1b
    1cb4:	00001b4d 	.word	0x00001b4d

00001cb8 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    1cb8:	b580      	push	{r7, lr}
    1cba:	b084      	sub	sp, #16
    1cbc:	af00      	add	r7, sp, #0
    1cbe:	60f8      	str	r0, [r7, #12]
    1cc0:	60b9      	str	r1, [r7, #8]
    1cc2:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    1cc4:	68fb      	ldr	r3, [r7, #12]
    1cc6:	2b00      	cmp	r3, #0
    1cc8:	d004      	beq.n	1cd4 <pwm_init+0x1c>
    1cca:	68bb      	ldr	r3, [r7, #8]
    1ccc:	2b00      	cmp	r3, #0
    1cce:	d001      	beq.n	1cd4 <pwm_init+0x1c>
    1cd0:	2301      	movs	r3, #1
    1cd2:	e000      	b.n	1cd6 <pwm_init+0x1e>
    1cd4:	2300      	movs	r3, #0
    1cd6:	f003 0301 	and.w	r3, r3, #1
    1cda:	b2db      	uxtb	r3, r3
    1cdc:	2233      	movs	r2, #51	; 0x33
    1cde:	490a      	ldr	r1, [pc, #40]	; (1d08 <pwm_init+0x50>)
    1ce0:	4618      	mov	r0, r3
    1ce2:	4b0a      	ldr	r3, [pc, #40]	; (1d0c <pwm_init+0x54>)
    1ce4:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    1ce6:	68fb      	ldr	r3, [r7, #12]
    1ce8:	68b9      	ldr	r1, [r7, #8]
    1cea:	4618      	mov	r0, r3
    1cec:	4b08      	ldr	r3, [pc, #32]	; (1d10 <pwm_init+0x58>)
    1cee:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    1cf0:	68fb      	ldr	r3, [r7, #12]
    1cf2:	4a08      	ldr	r2, [pc, #32]	; (1d14 <pwm_init+0x5c>)
    1cf4:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    1cf6:	68fb      	ldr	r3, [r7, #12]
    1cf8:	4a07      	ldr	r2, [pc, #28]	; (1d18 <pwm_init+0x60>)
    1cfa:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    1cfc:	2300      	movs	r3, #0
}
    1cfe:	4618      	mov	r0, r3
    1d00:	3710      	adds	r7, #16
    1d02:	46bd      	mov	sp, r7
    1d04:	bd80      	pop	{r7, pc}
    1d06:	bf00      	nop
    1d08:	00012f10 	.word	0x00012f10
    1d0c:	00002edd 	.word	0x00002edd
    1d10:	00007709 	.word	0x00007709
    1d14:	00001d1d 	.word	0x00001d1d
    1d18:	00001d41 	.word	0x00001d41

00001d1c <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    1d1c:	b580      	push	{r7, lr}
    1d1e:	b084      	sub	sp, #16
    1d20:	af00      	add	r7, sp, #0
    1d22:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    1d24:	687b      	ldr	r3, [r7, #4]
    1d26:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    1d28:	68fb      	ldr	r3, [r7, #12]
    1d2a:	695b      	ldr	r3, [r3, #20]
    1d2c:	2b00      	cmp	r3, #0
    1d2e:	d003      	beq.n	1d38 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    1d30:	68fb      	ldr	r3, [r7, #12]
    1d32:	695b      	ldr	r3, [r3, #20]
    1d34:	68f8      	ldr	r0, [r7, #12]
    1d36:	4798      	blx	r3
	}
}
    1d38:	bf00      	nop
    1d3a:	3710      	adds	r7, #16
    1d3c:	46bd      	mov	sp, r7
    1d3e:	bd80      	pop	{r7, pc}

00001d40 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    1d40:	b580      	push	{r7, lr}
    1d42:	b084      	sub	sp, #16
    1d44:	af00      	add	r7, sp, #0
    1d46:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    1d48:	687b      	ldr	r3, [r7, #4]
    1d4a:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    1d4c:	68fb      	ldr	r3, [r7, #12]
    1d4e:	699b      	ldr	r3, [r3, #24]
    1d50:	2b00      	cmp	r3, #0
    1d52:	d003      	beq.n	1d5c <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    1d54:	68fb      	ldr	r3, [r7, #12]
    1d56:	699b      	ldr	r3, [r3, #24]
    1d58:	68f8      	ldr	r0, [r7, #12]
    1d5a:	4798      	blx	r3
	}
}
    1d5c:	bf00      	nop
    1d5e:	3710      	adds	r7, #16
    1d60:	46bd      	mov	sp, r7
    1d62:	bd80      	pop	{r7, pc}

00001d64 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    1d64:	b580      	push	{r7, lr}
    1d66:	b082      	sub	sp, #8
    1d68:	af00      	add	r7, sp, #0
    1d6a:	6078      	str	r0, [r7, #4]
    1d6c:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    1d6e:	687b      	ldr	r3, [r7, #4]
    1d70:	2b00      	cmp	r3, #0
    1d72:	d004      	beq.n	1d7e <qspi_sync_init+0x1a>
    1d74:	683b      	ldr	r3, [r7, #0]
    1d76:	2b00      	cmp	r3, #0
    1d78:	d001      	beq.n	1d7e <qspi_sync_init+0x1a>
    1d7a:	2301      	movs	r3, #1
    1d7c:	e000      	b.n	1d80 <qspi_sync_init+0x1c>
    1d7e:	2300      	movs	r3, #0
    1d80:	f003 0301 	and.w	r3, r3, #1
    1d84:	b2db      	uxtb	r3, r3
    1d86:	2231      	movs	r2, #49	; 0x31
    1d88:	4906      	ldr	r1, [pc, #24]	; (1da4 <qspi_sync_init+0x40>)
    1d8a:	4618      	mov	r0, r3
    1d8c:	4b06      	ldr	r3, [pc, #24]	; (1da8 <qspi_sync_init+0x44>)
    1d8e:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    1d90:	687b      	ldr	r3, [r7, #4]
    1d92:	6839      	ldr	r1, [r7, #0]
    1d94:	4618      	mov	r0, r3
    1d96:	4b05      	ldr	r3, [pc, #20]	; (1dac <qspi_sync_init+0x48>)
    1d98:	4798      	blx	r3
    1d9a:	4603      	mov	r3, r0
}
    1d9c:	4618      	mov	r0, r3
    1d9e:	3708      	adds	r7, #8
    1da0:	46bd      	mov	sp, r7
    1da2:	bd80      	pop	{r7, pc}
    1da4:	00012f28 	.word	0x00012f28
    1da8:	00002edd 	.word	0x00002edd
    1dac:	00005279 	.word	0x00005279

00001db0 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    1db0:	b580      	push	{r7, lr}
    1db2:	b082      	sub	sp, #8
    1db4:	af00      	add	r7, sp, #0
    1db6:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    1db8:	687b      	ldr	r3, [r7, #4]
    1dba:	2b00      	cmp	r3, #0
    1dbc:	bf14      	ite	ne
    1dbe:	2301      	movne	r3, #1
    1dc0:	2300      	moveq	r3, #0
    1dc2:	b2db      	uxtb	r3, r3
    1dc4:	223f      	movs	r2, #63	; 0x3f
    1dc6:	4906      	ldr	r1, [pc, #24]	; (1de0 <qspi_sync_enable+0x30>)
    1dc8:	4618      	mov	r0, r3
    1dca:	4b06      	ldr	r3, [pc, #24]	; (1de4 <qspi_sync_enable+0x34>)
    1dcc:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    1dce:	687b      	ldr	r3, [r7, #4]
    1dd0:	4618      	mov	r0, r3
    1dd2:	4b05      	ldr	r3, [pc, #20]	; (1de8 <qspi_sync_enable+0x38>)
    1dd4:	4798      	blx	r3
    1dd6:	4603      	mov	r3, r0
}
    1dd8:	4618      	mov	r0, r3
    1dda:	3708      	adds	r7, #8
    1ddc:	46bd      	mov	sp, r7
    1dde:	bd80      	pop	{r7, pc}
    1de0:	00012f28 	.word	0x00012f28
    1de4:	00002edd 	.word	0x00002edd
    1de8:	000052ed 	.word	0x000052ed

00001dec <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    1dec:	b580      	push	{r7, lr}
    1dee:	b082      	sub	sp, #8
    1df0:	af00      	add	r7, sp, #0
    1df2:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    1df4:	687b      	ldr	r3, [r7, #4]
    1df6:	2b00      	cmp	r3, #0
    1df8:	bf14      	ite	ne
    1dfa:	2301      	movne	r3, #1
    1dfc:	2300      	moveq	r3, #0
    1dfe:	b2db      	uxtb	r3, r3
    1e00:	2246      	movs	r2, #70	; 0x46
    1e02:	4906      	ldr	r1, [pc, #24]	; (1e1c <qspi_sync_disable+0x30>)
    1e04:	4618      	mov	r0, r3
    1e06:	4b06      	ldr	r3, [pc, #24]	; (1e20 <qspi_sync_disable+0x34>)
    1e08:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    1e0a:	687b      	ldr	r3, [r7, #4]
    1e0c:	4618      	mov	r0, r3
    1e0e:	4b05      	ldr	r3, [pc, #20]	; (1e24 <qspi_sync_disable+0x38>)
    1e10:	4798      	blx	r3
    1e12:	4603      	mov	r3, r0
}
    1e14:	4618      	mov	r0, r3
    1e16:	3708      	adds	r7, #8
    1e18:	46bd      	mov	sp, r7
    1e1a:	bd80      	pop	{r7, pc}
    1e1c:	00012f28 	.word	0x00012f28
    1e20:	00002edd 	.word	0x00002edd
    1e24:	00005311 	.word	0x00005311

00001e28 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    1e28:	b580      	push	{r7, lr}
    1e2a:	b082      	sub	sp, #8
    1e2c:	af00      	add	r7, sp, #0
    1e2e:	6078      	str	r0, [r7, #4]
    1e30:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    1e32:	687b      	ldr	r3, [r7, #4]
    1e34:	2b00      	cmp	r3, #0
    1e36:	d004      	beq.n	1e42 <qspi_sync_serial_run_command+0x1a>
    1e38:	683b      	ldr	r3, [r7, #0]
    1e3a:	2b00      	cmp	r3, #0
    1e3c:	d001      	beq.n	1e42 <qspi_sync_serial_run_command+0x1a>
    1e3e:	2301      	movs	r3, #1
    1e40:	e000      	b.n	1e44 <qspi_sync_serial_run_command+0x1c>
    1e42:	2300      	movs	r3, #0
    1e44:	f003 0301 	and.w	r3, r3, #1
    1e48:	b2db      	uxtb	r3, r3
    1e4a:	224d      	movs	r2, #77	; 0x4d
    1e4c:	4906      	ldr	r1, [pc, #24]	; (1e68 <qspi_sync_serial_run_command+0x40>)
    1e4e:	4618      	mov	r0, r3
    1e50:	4b06      	ldr	r3, [pc, #24]	; (1e6c <qspi_sync_serial_run_command+0x44>)
    1e52:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    1e54:	687b      	ldr	r3, [r7, #4]
    1e56:	6839      	ldr	r1, [r7, #0]
    1e58:	4618      	mov	r0, r3
    1e5a:	4b05      	ldr	r3, [pc, #20]	; (1e70 <qspi_sync_serial_run_command+0x48>)
    1e5c:	4798      	blx	r3
    1e5e:	4603      	mov	r3, r0
}
    1e60:	4618      	mov	r0, r3
    1e62:	3708      	adds	r7, #8
    1e64:	46bd      	mov	sp, r7
    1e66:	bd80      	pop	{r7, pc}
    1e68:	00012f28 	.word	0x00012f28
    1e6c:	00002edd 	.word	0x00002edd
    1e70:	0000545d 	.word	0x0000545d

00001e74 <_spi_dev_tx>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_tx(struct _spi_m_async_dev *dev)
{
    1e74:	b580      	push	{r7, lr}
    1e76:	b084      	sub	sp, #16
    1e78:	af00      	add	r7, sp, #0
    1e7a:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    1e7c:	687b      	ldr	r3, [r7, #4]
    1e7e:	3b04      	subs	r3, #4
    1e80:	60fb      	str	r3, [r7, #12]

	if (!(dev->char_size > 1)) {
    1e82:	687b      	ldr	r3, [r7, #4]
    1e84:	791b      	ldrb	r3, [r3, #4]
    1e86:	2b01      	cmp	r3, #1
    1e88:	d80e      	bhi.n	1ea8 <_spi_dev_tx+0x34>
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    1e8a:	68fb      	ldr	r3, [r7, #12]
    1e8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    1e8e:	68fb      	ldr	r3, [r7, #12]
    1e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1e92:	1c58      	adds	r0, r3, #1
    1e94:	68f9      	ldr	r1, [r7, #12]
    1e96:	6448      	str	r0, [r1, #68]	; 0x44
    1e98:	4413      	add	r3, r2
    1e9a:	781b      	ldrb	r3, [r3, #0]
    1e9c:	b29b      	uxth	r3, r3
    1e9e:	4619      	mov	r1, r3
    1ea0:	6878      	ldr	r0, [r7, #4]
    1ea2:	4b11      	ldr	r3, [pc, #68]	; (1ee8 <_spi_dev_tx+0x74>)
    1ea4:	4798      	blx	r3
    1ea6:	e00d      	b.n	1ec4 <_spi_dev_tx+0x50>
	} else {
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    1ea8:	68fb      	ldr	r3, [r7, #12]
    1eaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    1eac:	68fb      	ldr	r3, [r7, #12]
    1eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1eb0:	1c58      	adds	r0, r3, #1
    1eb2:	68f9      	ldr	r1, [r7, #12]
    1eb4:	6448      	str	r0, [r1, #68]	; 0x44
    1eb6:	005b      	lsls	r3, r3, #1
    1eb8:	4413      	add	r3, r2
    1eba:	881b      	ldrh	r3, [r3, #0]
    1ebc:	4619      	mov	r1, r3
    1ebe:	6878      	ldr	r0, [r7, #4]
    1ec0:	4b09      	ldr	r3, [pc, #36]	; (1ee8 <_spi_dev_tx+0x74>)
    1ec2:	4798      	blx	r3
	}

	if (spi->xfercnt == spi->xfer.size) {
    1ec4:	68fb      	ldr	r3, [r7, #12]
    1ec6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    1ec8:	68fb      	ldr	r3, [r7, #12]
    1eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1ecc:	429a      	cmp	r2, r3
    1ece:	d107      	bne.n	1ee0 <_spi_dev_tx+0x6c>
		_spi_m_async_enable_tx(dev, false);
    1ed0:	2100      	movs	r1, #0
    1ed2:	6878      	ldr	r0, [r7, #4]
    1ed4:	4b05      	ldr	r3, [pc, #20]	; (1eec <_spi_dev_tx+0x78>)
    1ed6:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    1ed8:	2101      	movs	r1, #1
    1eda:	6878      	ldr	r0, [r7, #4]
    1edc:	4b04      	ldr	r3, [pc, #16]	; (1ef0 <_spi_dev_tx+0x7c>)
    1ede:	4798      	blx	r3
	}
}
    1ee0:	bf00      	nop
    1ee2:	3710      	adds	r7, #16
    1ee4:	46bd      	mov	sp, r7
    1ee6:	bd80      	pop	{r7, pc}
    1ee8:	00007019 	.word	0x00007019
    1eec:	00006edd 	.word	0x00006edd
    1ef0:	00006fb1 	.word	0x00006fb1

00001ef4 <_spi_dev_rx>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_rx(struct _spi_m_async_dev *dev)
{
    1ef4:	b590      	push	{r4, r7, lr}
    1ef6:	b085      	sub	sp, #20
    1ef8:	af00      	add	r7, sp, #0
    1efa:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    1efc:	687b      	ldr	r3, [r7, #4]
    1efe:	3b04      	subs	r3, #4
    1f00:	60fb      	str	r3, [r7, #12]

	if (spi->xfer.rxbuf) {
    1f02:	68fb      	ldr	r3, [r7, #12]
    1f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1f06:	2b00      	cmp	r3, #0
    1f08:	d021      	beq.n	1f4e <_spi_dev_rx+0x5a>
		if (!(dev->char_size > 1)) {
    1f0a:	687b      	ldr	r3, [r7, #4]
    1f0c:	791b      	ldrb	r3, [r3, #4]
    1f0e:	2b01      	cmp	r3, #1
    1f10:	d80e      	bhi.n	1f30 <_spi_dev_rx+0x3c>
			/* 8-bit or less */
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    1f12:	68fb      	ldr	r3, [r7, #12]
    1f14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    1f16:	68fb      	ldr	r3, [r7, #12]
    1f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1f1a:	1c58      	adds	r0, r3, #1
    1f1c:	68f9      	ldr	r1, [r7, #12]
    1f1e:	6448      	str	r0, [r1, #68]	; 0x44
    1f20:	18d4      	adds	r4, r2, r3
    1f22:	6878      	ldr	r0, [r7, #4]
    1f24:	4b2e      	ldr	r3, [pc, #184]	; (1fe0 <_spi_dev_rx+0xec>)
    1f26:	4798      	blx	r3
    1f28:	4603      	mov	r3, r0
    1f2a:	b2db      	uxtb	r3, r3
    1f2c:	7023      	strb	r3, [r4, #0]
    1f2e:	e016      	b.n	1f5e <_spi_dev_rx+0x6a>
		} else {
			/* 9-bit or more */
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    1f30:	68fb      	ldr	r3, [r7, #12]
    1f32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    1f34:	68fb      	ldr	r3, [r7, #12]
    1f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1f38:	1c58      	adds	r0, r3, #1
    1f3a:	68f9      	ldr	r1, [r7, #12]
    1f3c:	6448      	str	r0, [r1, #68]	; 0x44
    1f3e:	005b      	lsls	r3, r3, #1
    1f40:	18d4      	adds	r4, r2, r3
    1f42:	6878      	ldr	r0, [r7, #4]
    1f44:	4b26      	ldr	r3, [pc, #152]	; (1fe0 <_spi_dev_rx+0xec>)
    1f46:	4798      	blx	r3
    1f48:	4603      	mov	r3, r0
    1f4a:	8023      	strh	r3, [r4, #0]
    1f4c:	e007      	b.n	1f5e <_spi_dev_rx+0x6a>
		}
	} else {
		/* dummy data read if rxbuf is NULL */
		_spi_m_async_read_one(dev);
    1f4e:	6878      	ldr	r0, [r7, #4]
    1f50:	4b23      	ldr	r3, [pc, #140]	; (1fe0 <_spi_dev_rx+0xec>)
    1f52:	4798      	blx	r3
		spi->xfercnt++;
    1f54:	68fb      	ldr	r3, [r7, #12]
    1f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1f58:	1c5a      	adds	r2, r3, #1
    1f5a:	68fb      	ldr	r3, [r7, #12]
    1f5c:	645a      	str	r2, [r3, #68]	; 0x44
	}

	if (spi->xfercnt < spi->xfer.size) {
    1f5e:	68fb      	ldr	r3, [r7, #12]
    1f60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    1f62:	68fb      	ldr	r3, [r7, #12]
    1f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1f66:	429a      	cmp	r2, r3
    1f68:	d226      	bcs.n	1fb8 <_spi_dev_rx+0xc4>
		if (spi->xfer.txbuf) {
    1f6a:	68fb      	ldr	r3, [r7, #12]
    1f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1f6e:	2b00      	cmp	r3, #0
    1f70:	d01b      	beq.n	1faa <_spi_dev_rx+0xb6>
			if (!(dev->char_size > 1)) {
    1f72:	687b      	ldr	r3, [r7, #4]
    1f74:	791b      	ldrb	r3, [r3, #4]
    1f76:	2b01      	cmp	r3, #1
    1f78:	d80b      	bhi.n	1f92 <_spi_dev_rx+0x9e>
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    1f7a:	68fb      	ldr	r3, [r7, #12]
    1f7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    1f7e:	68fb      	ldr	r3, [r7, #12]
    1f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1f82:	4413      	add	r3, r2
    1f84:	781b      	ldrb	r3, [r3, #0]
    1f86:	b29b      	uxth	r3, r3
    1f88:	4619      	mov	r1, r3
    1f8a:	6878      	ldr	r0, [r7, #4]
    1f8c:	4b15      	ldr	r3, [pc, #84]	; (1fe4 <_spi_dev_rx+0xf0>)
    1f8e:	4798      	blx	r3

		if (spi->callbacks.cb_xfer) {
			spi->callbacks.cb_xfer(spi);
		}
	}
}
    1f90:	e022      	b.n	1fd8 <_spi_dev_rx+0xe4>
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    1f92:	68fb      	ldr	r3, [r7, #12]
    1f94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    1f96:	68fb      	ldr	r3, [r7, #12]
    1f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1f9a:	005b      	lsls	r3, r3, #1
    1f9c:	4413      	add	r3, r2
    1f9e:	881b      	ldrh	r3, [r3, #0]
    1fa0:	4619      	mov	r1, r3
    1fa2:	6878      	ldr	r0, [r7, #4]
    1fa4:	4b0f      	ldr	r3, [pc, #60]	; (1fe4 <_spi_dev_rx+0xf0>)
    1fa6:	4798      	blx	r3
}
    1fa8:	e016      	b.n	1fd8 <_spi_dev_rx+0xe4>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    1faa:	687b      	ldr	r3, [r7, #4]
    1fac:	88db      	ldrh	r3, [r3, #6]
    1fae:	4619      	mov	r1, r3
    1fb0:	6878      	ldr	r0, [r7, #4]
    1fb2:	4b0c      	ldr	r3, [pc, #48]	; (1fe4 <_spi_dev_rx+0xf0>)
    1fb4:	4798      	blx	r3
}
    1fb6:	e00f      	b.n	1fd8 <_spi_dev_rx+0xe4>
		_spi_m_async_enable_rx(dev, false);
    1fb8:	2100      	movs	r1, #0
    1fba:	6878      	ldr	r0, [r7, #4]
    1fbc:	4b0a      	ldr	r3, [pc, #40]	; (1fe8 <_spi_dev_rx+0xf4>)
    1fbe:	4798      	blx	r3
		spi->stat = 0;
    1fc0:	68fb      	ldr	r3, [r7, #12]
    1fc2:	2200      	movs	r2, #0
    1fc4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		if (spi->callbacks.cb_xfer) {
    1fc8:	68fb      	ldr	r3, [r7, #12]
    1fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1fcc:	2b00      	cmp	r3, #0
    1fce:	d003      	beq.n	1fd8 <_spi_dev_rx+0xe4>
			spi->callbacks.cb_xfer(spi);
    1fd0:	68fb      	ldr	r3, [r7, #12]
    1fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1fd4:	68f8      	ldr	r0, [r7, #12]
    1fd6:	4798      	blx	r3
}
    1fd8:	bf00      	nop
    1fda:	3714      	adds	r7, #20
    1fdc:	46bd      	mov	sp, r7
    1fde:	bd90      	pop	{r4, r7, pc}
    1fe0:	00007071 	.word	0x00007071
    1fe4:	00007019 	.word	0x00007019
    1fe8:	00006f41 	.word	0x00006f41

00001fec <_spi_dev_complete>:
/**
 *  \brief Callback for complete
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_complete(struct _spi_m_async_dev *dev)
{
    1fec:	b580      	push	{r7, lr}
    1fee:	b084      	sub	sp, #16
    1ff0:	af00      	add	r7, sp, #0
    1ff2:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    1ff4:	687b      	ldr	r3, [r7, #4]
    1ff6:	3b04      	subs	r3, #4
    1ff8:	60fb      	str	r3, [r7, #12]

	if (spi->xfercnt >= spi->xfer.size) {
    1ffa:	68fb      	ldr	r3, [r7, #12]
    1ffc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    1ffe:	68fb      	ldr	r3, [r7, #12]
    2000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2002:	429a      	cmp	r2, r3
    2004:	d30f      	bcc.n	2026 <_spi_dev_complete+0x3a>
		_spi_m_async_enable_tx_complete(dev, false);
    2006:	2100      	movs	r1, #0
    2008:	6878      	ldr	r0, [r7, #4]
    200a:	4b09      	ldr	r3, [pc, #36]	; (2030 <_spi_dev_complete+0x44>)
    200c:	4798      	blx	r3
		spi->stat = 0;
    200e:	68fb      	ldr	r3, [r7, #12]
    2010:	2200      	movs	r2, #0
    2012:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

		if (spi->callbacks.cb_xfer) {
    2016:	68fb      	ldr	r3, [r7, #12]
    2018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    201a:	2b00      	cmp	r3, #0
    201c:	d003      	beq.n	2026 <_spi_dev_complete+0x3a>
			spi->callbacks.cb_xfer(spi);
    201e:	68fb      	ldr	r3, [r7, #12]
    2020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2022:	68f8      	ldr	r0, [r7, #12]
    2024:	4798      	blx	r3
		}
	}
}
    2026:	bf00      	nop
    2028:	3710      	adds	r7, #16
    202a:	46bd      	mov	sp, r7
    202c:	bd80      	pop	{r7, pc}
    202e:	bf00      	nop
    2030:	00006fb1 	.word	0x00006fb1

00002034 <_spi_dev_error>:
 *  \brief Callback for error
 *  \param[in, out] dev Pointer to the SPI device instance.
 *  \param[in] status Error status.
 */
static void _spi_dev_error(struct _spi_m_async_dev *dev, int32_t status)
{
    2034:	b580      	push	{r7, lr}
    2036:	b084      	sub	sp, #16
    2038:	af00      	add	r7, sp, #0
    203a:	6078      	str	r0, [r7, #4]
    203c:	6039      	str	r1, [r7, #0]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    203e:	687b      	ldr	r3, [r7, #4]
    2040:	3b04      	subs	r3, #4
    2042:	60fb      	str	r3, [r7, #12]

	_spi_m_async_enable_tx(dev, false);
    2044:	2100      	movs	r1, #0
    2046:	6878      	ldr	r0, [r7, #4]
    2048:	4b0d      	ldr	r3, [pc, #52]	; (2080 <_spi_dev_error+0x4c>)
    204a:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
    204c:	2100      	movs	r1, #0
    204e:	6878      	ldr	r0, [r7, #4]
    2050:	4b0c      	ldr	r3, [pc, #48]	; (2084 <_spi_dev_error+0x50>)
    2052:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
    2054:	2100      	movs	r1, #0
    2056:	6878      	ldr	r0, [r7, #4]
    2058:	4b0b      	ldr	r3, [pc, #44]	; (2088 <_spi_dev_error+0x54>)
    205a:	4798      	blx	r3
	spi->stat = 0;
    205c:	68fb      	ldr	r3, [r7, #12]
    205e:	2200      	movs	r2, #0
    2060:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	/* Invoke complete callback */
	if (spi->callbacks.cb_error) {
    2064:	68fb      	ldr	r3, [r7, #12]
    2066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2068:	2b00      	cmp	r3, #0
    206a:	d004      	beq.n	2076 <_spi_dev_error+0x42>
		spi->callbacks.cb_error(spi, status);
    206c:	68fb      	ldr	r3, [r7, #12]
    206e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2070:	6839      	ldr	r1, [r7, #0]
    2072:	68f8      	ldr	r0, [r7, #12]
    2074:	4798      	blx	r3
	}
}
    2076:	bf00      	nop
    2078:	3710      	adds	r7, #16
    207a:	46bd      	mov	sp, r7
    207c:	bd80      	pop	{r7, pc}
    207e:	bf00      	nop
    2080:	00006edd 	.word	0x00006edd
    2084:	00006f41 	.word	0x00006f41
    2088:	00006fb1 	.word	0x00006fb1

0000208c <spi_m_async_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_async_hpl_interface *)func;
}

int32_t spi_m_async_init(struct spi_m_async_descriptor *spi, void *const hw)
{
    208c:	b580      	push	{r7, lr}
    208e:	b084      	sub	sp, #16
    2090:	af00      	add	r7, sp, #0
    2092:	6078      	str	r0, [r7, #4]
    2094:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    2096:	2300      	movs	r3, #0
    2098:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    209a:	687b      	ldr	r3, [r7, #4]
    209c:	2b00      	cmp	r3, #0
    209e:	d004      	beq.n	20aa <spi_m_async_init+0x1e>
    20a0:	683b      	ldr	r3, [r7, #0]
    20a2:	2b00      	cmp	r3, #0
    20a4:	d001      	beq.n	20aa <spi_m_async_init+0x1e>
    20a6:	2301      	movs	r3, #1
    20a8:	e000      	b.n	20ac <spi_m_async_init+0x20>
    20aa:	2300      	movs	r3, #0
    20ac:	f003 0301 	and.w	r3, r3, #1
    20b0:	b2db      	uxtb	r3, r3
    20b2:	22a5      	movs	r2, #165	; 0xa5
    20b4:	491c      	ldr	r1, [pc, #112]	; (2128 <spi_m_async_init+0x9c>)
    20b6:	4618      	mov	r0, r3
    20b8:	4b1c      	ldr	r3, [pc, #112]	; (212c <spi_m_async_init+0xa0>)
    20ba:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    20bc:	687b      	ldr	r3, [r7, #4]
    20be:	683a      	ldr	r2, [r7, #0]
    20c0:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_async_init(&spi->dev, hw);
    20c2:	687b      	ldr	r3, [r7, #4]
    20c4:	3304      	adds	r3, #4
    20c6:	6839      	ldr	r1, [r7, #0]
    20c8:	4618      	mov	r0, r3
    20ca:	4b19      	ldr	r3, [pc, #100]	; (2130 <spi_m_async_init+0xa4>)
    20cc:	4798      	blx	r3
    20ce:	60f8      	str	r0, [r7, #12]

	if (rc >= 0) {
    20d0:	68fb      	ldr	r3, [r7, #12]
    20d2:	2b00      	cmp	r3, #0
    20d4:	db23      	blt.n	211e <spi_m_async_init+0x92>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    20d6:	687b      	ldr	r3, [r7, #4]
    20d8:	3304      	adds	r3, #4
    20da:	4a16      	ldr	r2, [pc, #88]	; (2134 <spi_m_async_init+0xa8>)
    20dc:	2100      	movs	r1, #0
    20de:	4618      	mov	r0, r3
    20e0:	4b15      	ldr	r3, [pc, #84]	; (2138 <spi_m_async_init+0xac>)
    20e2:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    20e4:	687b      	ldr	r3, [r7, #4]
    20e6:	3304      	adds	r3, #4
    20e8:	4a14      	ldr	r2, [pc, #80]	; (213c <spi_m_async_init+0xb0>)
    20ea:	2101      	movs	r1, #1
    20ec:	4618      	mov	r0, r3
    20ee:	4b12      	ldr	r3, [pc, #72]	; (2138 <spi_m_async_init+0xac>)
    20f0:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    20f2:	687b      	ldr	r3, [r7, #4]
    20f4:	3304      	adds	r3, #4
    20f6:	4a12      	ldr	r2, [pc, #72]	; (2140 <spi_m_async_init+0xb4>)
    20f8:	2102      	movs	r1, #2
    20fa:	4618      	mov	r0, r3
    20fc:	4b0e      	ldr	r3, [pc, #56]	; (2138 <spi_m_async_init+0xac>)
    20fe:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    2100:	687b      	ldr	r3, [r7, #4]
    2102:	3304      	adds	r3, #4
    2104:	4a0f      	ldr	r2, [pc, #60]	; (2144 <spi_m_async_init+0xb8>)
    2106:	2103      	movs	r1, #3
    2108:	4618      	mov	r0, r3
    210a:	4b0b      	ldr	r3, [pc, #44]	; (2138 <spi_m_async_init+0xac>)
    210c:	4798      	blx	r3
	} else {
		return rc;
	}

	spi->io.read  = _spi_m_async_io_read;
    210e:	687b      	ldr	r3, [r7, #4]
    2110:	4a0d      	ldr	r2, [pc, #52]	; (2148 <spi_m_async_init+0xbc>)
    2112:	629a      	str	r2, [r3, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    2114:	687b      	ldr	r3, [r7, #4]
    2116:	4a0d      	ldr	r2, [pc, #52]	; (214c <spi_m_async_init+0xc0>)
    2118:	625a      	str	r2, [r3, #36]	; 0x24
	return ERR_NONE;
    211a:	2300      	movs	r3, #0
    211c:	e000      	b.n	2120 <spi_m_async_init+0x94>
		return rc;
    211e:	68fb      	ldr	r3, [r7, #12]
}
    2120:	4618      	mov	r0, r3
    2122:	3710      	adds	r7, #16
    2124:	46bd      	mov	sp, r7
    2126:	bd80      	pop	{r7, pc}
    2128:	00012f44 	.word	0x00012f44
    212c:	00002edd 	.word	0x00002edd
    2130:	00006bdd 	.word	0x00006bdd
    2134:	00001e75 	.word	0x00001e75
    2138:	000070c1 	.word	0x000070c1
    213c:	00001ef5 	.word	0x00001ef5
    2140:	00001fed 	.word	0x00001fed
    2144:	00002035 	.word	0x00002035
    2148:	00002151 	.word	0x00002151
    214c:	000021d1 	.word	0x000021d1

00002150 <_spi_m_async_io_read>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_read(struct io_descriptor *io, uint8_t *const buf, const uint16_t length)
{
    2150:	b580      	push	{r7, lr}
    2152:	b086      	sub	sp, #24
    2154:	af00      	add	r7, sp, #0
    2156:	60f8      	str	r0, [r7, #12]
    2158:	60b9      	str	r1, [r7, #8]
    215a:	4613      	mov	r3, r2
    215c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    215e:	68fb      	ldr	r3, [r7, #12]
    2160:	2b00      	cmp	r3, #0
    2162:	bf14      	ite	ne
    2164:	2301      	movne	r3, #1
    2166:	2300      	moveq	r3, #0
    2168:	b2db      	uxtb	r3, r3
    216a:	f240 1205 	movw	r2, #261	; 0x105
    216e:	4914      	ldr	r1, [pc, #80]	; (21c0 <_spi_m_async_io_read+0x70>)
    2170:	4618      	mov	r0, r3
    2172:	4b14      	ldr	r3, [pc, #80]	; (21c4 <_spi_m_async_io_read+0x74>)
    2174:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);
    2176:	68fb      	ldr	r3, [r7, #12]
    2178:	3b24      	subs	r3, #36	; 0x24
    217a:	617b      	str	r3, [r7, #20]

	spi->xfer.rxbuf = buf;
    217c:	697b      	ldr	r3, [r7, #20]
    217e:	68ba      	ldr	r2, [r7, #8]
    2180:	63da      	str	r2, [r3, #60]	; 0x3c
	spi->xfer.txbuf = NULL;
    2182:	697b      	ldr	r3, [r7, #20]
    2184:	2200      	movs	r2, #0
    2186:	639a      	str	r2, [r3, #56]	; 0x38
	spi->xfer.size  = length;
    2188:	88fa      	ldrh	r2, [r7, #6]
    218a:	697b      	ldr	r3, [r7, #20]
    218c:	641a      	str	r2, [r3, #64]	; 0x40
	spi->xfercnt    = 0;
    218e:	697b      	ldr	r3, [r7, #20]
    2190:	2200      	movs	r2, #0
    2192:	645a      	str	r2, [r3, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    2194:	697b      	ldr	r3, [r7, #20]
    2196:	2210      	movs	r2, #16
    2198:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	_spi_m_async_enable_rx(&spi->dev, true);
    219c:	697b      	ldr	r3, [r7, #20]
    219e:	3304      	adds	r3, #4
    21a0:	2101      	movs	r1, #1
    21a2:	4618      	mov	r0, r3
    21a4:	4b08      	ldr	r3, [pc, #32]	; (21c8 <_spi_m_async_io_read+0x78>)
    21a6:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
    21a8:	697b      	ldr	r3, [r7, #20]
    21aa:	3304      	adds	r3, #4
    21ac:	f240 11ff 	movw	r1, #511	; 0x1ff
    21b0:	4618      	mov	r0, r3
    21b2:	4b06      	ldr	r3, [pc, #24]	; (21cc <_spi_m_async_io_read+0x7c>)
    21b4:	4798      	blx	r3

	return ERR_NONE;
    21b6:	2300      	movs	r3, #0
}
    21b8:	4618      	mov	r0, r3
    21ba:	3718      	adds	r7, #24
    21bc:	46bd      	mov	sp, r7
    21be:	bd80      	pop	{r7, pc}
    21c0:	00012f44 	.word	0x00012f44
    21c4:	00002edd 	.word	0x00002edd
    21c8:	00006f41 	.word	0x00006f41
    21cc:	00007019 	.word	0x00007019

000021d0 <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    21d0:	b580      	push	{r7, lr}
    21d2:	b086      	sub	sp, #24
    21d4:	af00      	add	r7, sp, #0
    21d6:	60f8      	str	r0, [r7, #12]
    21d8:	60b9      	str	r1, [r7, #8]
    21da:	4613      	mov	r3, r2
    21dc:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    21de:	68fb      	ldr	r3, [r7, #12]
    21e0:	2b00      	cmp	r3, #0
    21e2:	bf14      	ite	ne
    21e4:	2301      	movne	r3, #1
    21e6:	2300      	moveq	r3, #0
    21e8:	b2db      	uxtb	r3, r3
    21ea:	f240 1227 	movw	r2, #295	; 0x127
    21ee:	4911      	ldr	r1, [pc, #68]	; (2234 <_spi_m_async_io_write+0x64>)
    21f0:	4618      	mov	r0, r3
    21f2:	4b11      	ldr	r3, [pc, #68]	; (2238 <_spi_m_async_io_write+0x68>)
    21f4:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);
    21f6:	68fb      	ldr	r3, [r7, #12]
    21f8:	3b24      	subs	r3, #36	; 0x24
    21fa:	617b      	str	r3, [r7, #20]

	spi->xfer.rxbuf = NULL;
    21fc:	697b      	ldr	r3, [r7, #20]
    21fe:	2200      	movs	r2, #0
    2200:	63da      	str	r2, [r3, #60]	; 0x3c
	spi->xfer.txbuf = (uint8_t *)buf;
    2202:	697b      	ldr	r3, [r7, #20]
    2204:	68ba      	ldr	r2, [r7, #8]
    2206:	639a      	str	r2, [r3, #56]	; 0x38
	spi->xfer.size  = length;
    2208:	88fa      	ldrh	r2, [r7, #6]
    220a:	697b      	ldr	r3, [r7, #20]
    220c:	641a      	str	r2, [r3, #64]	; 0x40
	spi->xfercnt    = 0;
    220e:	697b      	ldr	r3, [r7, #20]
    2210:	2200      	movs	r2, #0
    2212:	645a      	str	r2, [r3, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    2214:	697b      	ldr	r3, [r7, #20]
    2216:	2210      	movs	r2, #16
    2218:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	_spi_m_async_enable_tx(&spi->dev, true);
    221c:	697b      	ldr	r3, [r7, #20]
    221e:	3304      	adds	r3, #4
    2220:	2101      	movs	r1, #1
    2222:	4618      	mov	r0, r3
    2224:	4b05      	ldr	r3, [pc, #20]	; (223c <_spi_m_async_io_write+0x6c>)
    2226:	4798      	blx	r3

	return ERR_NONE;
    2228:	2300      	movs	r3, #0
}
    222a:	4618      	mov	r0, r3
    222c:	3718      	adds	r7, #24
    222e:	46bd      	mov	sp, r7
    2230:	bd80      	pop	{r7, pc}
    2232:	bf00      	nop
    2234:	00012f44 	.word	0x00012f44
    2238:	00002edd 	.word	0x00002edd
    223c:	00006edd 	.word	0x00006edd

00002240 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    2240:	b580      	push	{r7, lr}
    2242:	b084      	sub	sp, #16
    2244:	af00      	add	r7, sp, #0
    2246:	6078      	str	r0, [r7, #4]
    2248:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    224a:	2300      	movs	r3, #0
    224c:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    224e:	687b      	ldr	r3, [r7, #4]
    2250:	2b00      	cmp	r3, #0
    2252:	d004      	beq.n	225e <spi_m_sync_init+0x1e>
    2254:	683b      	ldr	r3, [r7, #0]
    2256:	2b00      	cmp	r3, #0
    2258:	d001      	beq.n	225e <spi_m_sync_init+0x1e>
    225a:	2301      	movs	r3, #1
    225c:	e000      	b.n	2260 <spi_m_sync_init+0x20>
    225e:	2300      	movs	r3, #0
    2260:	f003 0301 	and.w	r3, r3, #1
    2264:	b2db      	uxtb	r3, r3
    2266:	2240      	movs	r2, #64	; 0x40
    2268:	4910      	ldr	r1, [pc, #64]	; (22ac <spi_m_sync_init+0x6c>)
    226a:	4618      	mov	r0, r3
    226c:	4b10      	ldr	r3, [pc, #64]	; (22b0 <spi_m_sync_init+0x70>)
    226e:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    2270:	687b      	ldr	r3, [r7, #4]
    2272:	683a      	ldr	r2, [r7, #0]
    2274:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    2276:	687b      	ldr	r3, [r7, #4]
    2278:	3304      	adds	r3, #4
    227a:	6839      	ldr	r1, [r7, #0]
    227c:	4618      	mov	r0, r3
    227e:	4b0d      	ldr	r3, [pc, #52]	; (22b4 <spi_m_sync_init+0x74>)
    2280:	4798      	blx	r3
    2282:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    2284:	68fb      	ldr	r3, [r7, #12]
    2286:	2b00      	cmp	r3, #0
    2288:	da01      	bge.n	228e <spi_m_sync_init+0x4e>
		return rc;
    228a:	68fb      	ldr	r3, [r7, #12]
    228c:	e00a      	b.n	22a4 <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    228e:	687b      	ldr	r3, [r7, #4]
    2290:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2294:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    2296:	687b      	ldr	r3, [r7, #4]
    2298:	4a07      	ldr	r2, [pc, #28]	; (22b8 <spi_m_sync_init+0x78>)
    229a:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    229c:	687b      	ldr	r3, [r7, #4]
    229e:	4a07      	ldr	r2, [pc, #28]	; (22bc <spi_m_sync_init+0x7c>)
    22a0:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    22a2:	2300      	movs	r3, #0
}
    22a4:	4618      	mov	r0, r3
    22a6:	3710      	adds	r7, #16
    22a8:	46bd      	mov	sp, r7
    22aa:	bd80      	pop	{r7, pc}
    22ac:	00012f64 	.word	0x00012f64
    22b0:	00002edd 	.word	0x00002edd
    22b4:	00006ad1 	.word	0x00006ad1
    22b8:	000022c1 	.word	0x000022c1
    22bc:	00002319 	.word	0x00002319

000022c0 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    22c0:	b580      	push	{r7, lr}
    22c2:	b088      	sub	sp, #32
    22c4:	af00      	add	r7, sp, #0
    22c6:	60f8      	str	r0, [r7, #12]
    22c8:	60b9      	str	r1, [r7, #8]
    22ca:	4613      	mov	r3, r2
    22cc:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    22ce:	68fb      	ldr	r3, [r7, #12]
    22d0:	2b00      	cmp	r3, #0
    22d2:	bf14      	ite	ne
    22d4:	2301      	movne	r3, #1
    22d6:	2300      	moveq	r3, #0
    22d8:	b2db      	uxtb	r3, r3
    22da:	2287      	movs	r2, #135	; 0x87
    22dc:	490b      	ldr	r1, [pc, #44]	; (230c <_spi_m_sync_io_read+0x4c>)
    22de:	4618      	mov	r0, r3
    22e0:	4b0b      	ldr	r3, [pc, #44]	; (2310 <_spi_m_sync_io_read+0x50>)
    22e2:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    22e4:	68fb      	ldr	r3, [r7, #12]
    22e6:	3b0c      	subs	r3, #12
    22e8:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    22ea:	68bb      	ldr	r3, [r7, #8]
    22ec:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    22ee:	2300      	movs	r3, #0
    22f0:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    22f2:	88fb      	ldrh	r3, [r7, #6]
    22f4:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    22f6:	f107 0310 	add.w	r3, r7, #16
    22fa:	4619      	mov	r1, r3
    22fc:	69f8      	ldr	r0, [r7, #28]
    22fe:	4b05      	ldr	r3, [pc, #20]	; (2314 <_spi_m_sync_io_read+0x54>)
    2300:	4798      	blx	r3
    2302:	4603      	mov	r3, r0
}
    2304:	4618      	mov	r0, r3
    2306:	3720      	adds	r7, #32
    2308:	46bd      	mov	sp, r7
    230a:	bd80      	pop	{r7, pc}
    230c:	00012f64 	.word	0x00012f64
    2310:	00002edd 	.word	0x00002edd
    2314:	00002371 	.word	0x00002371

00002318 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    2318:	b580      	push	{r7, lr}
    231a:	b088      	sub	sp, #32
    231c:	af00      	add	r7, sp, #0
    231e:	60f8      	str	r0, [r7, #12]
    2320:	60b9      	str	r1, [r7, #8]
    2322:	4613      	mov	r3, r2
    2324:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    2326:	68fb      	ldr	r3, [r7, #12]
    2328:	2b00      	cmp	r3, #0
    232a:	bf14      	ite	ne
    232c:	2301      	movne	r3, #1
    232e:	2300      	moveq	r3, #0
    2330:	b2db      	uxtb	r3, r3
    2332:	22a3      	movs	r2, #163	; 0xa3
    2334:	490b      	ldr	r1, [pc, #44]	; (2364 <_spi_m_sync_io_write+0x4c>)
    2336:	4618      	mov	r0, r3
    2338:	4b0b      	ldr	r3, [pc, #44]	; (2368 <_spi_m_sync_io_write+0x50>)
    233a:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    233c:	68fb      	ldr	r3, [r7, #12]
    233e:	3b0c      	subs	r3, #12
    2340:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    2342:	2300      	movs	r3, #0
    2344:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    2346:	68bb      	ldr	r3, [r7, #8]
    2348:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    234a:	88fb      	ldrh	r3, [r7, #6]
    234c:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    234e:	f107 0310 	add.w	r3, r7, #16
    2352:	4619      	mov	r1, r3
    2354:	69f8      	ldr	r0, [r7, #28]
    2356:	4b05      	ldr	r3, [pc, #20]	; (236c <_spi_m_sync_io_write+0x54>)
    2358:	4798      	blx	r3
    235a:	4603      	mov	r3, r0
}
    235c:	4618      	mov	r0, r3
    235e:	3720      	adds	r7, #32
    2360:	46bd      	mov	sp, r7
    2362:	bd80      	pop	{r7, pc}
    2364:	00012f64 	.word	0x00012f64
    2368:	00002edd 	.word	0x00002edd
    236c:	00002371 	.word	0x00002371

00002370 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    2370:	b580      	push	{r7, lr}
    2372:	b086      	sub	sp, #24
    2374:	af00      	add	r7, sp, #0
    2376:	6078      	str	r0, [r7, #4]
    2378:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    237a:	687b      	ldr	r3, [r7, #4]
    237c:	2b00      	cmp	r3, #0
    237e:	d004      	beq.n	238a <spi_m_sync_transfer+0x1a>
    2380:	683b      	ldr	r3, [r7, #0]
    2382:	2b00      	cmp	r3, #0
    2384:	d001      	beq.n	238a <spi_m_sync_transfer+0x1a>
    2386:	2301      	movs	r3, #1
    2388:	e000      	b.n	238c <spi_m_sync_transfer+0x1c>
    238a:	2300      	movs	r3, #0
    238c:	f003 0301 	and.w	r3, r3, #1
    2390:	b2db      	uxtb	r3, r3
    2392:	22b3      	movs	r2, #179	; 0xb3
    2394:	490c      	ldr	r1, [pc, #48]	; (23c8 <spi_m_sync_transfer+0x58>)
    2396:	4618      	mov	r0, r3
    2398:	4b0c      	ldr	r3, [pc, #48]	; (23cc <spi_m_sync_transfer+0x5c>)
    239a:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    239c:	683b      	ldr	r3, [r7, #0]
    239e:	681b      	ldr	r3, [r3, #0]
    23a0:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    23a2:	683b      	ldr	r3, [r7, #0]
    23a4:	685b      	ldr	r3, [r3, #4]
    23a6:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    23a8:	683b      	ldr	r3, [r7, #0]
    23aa:	689b      	ldr	r3, [r3, #8]
    23ac:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    23ae:	687b      	ldr	r3, [r7, #4]
    23b0:	3304      	adds	r3, #4
    23b2:	f107 020c 	add.w	r2, r7, #12
    23b6:	4611      	mov	r1, r2
    23b8:	4618      	mov	r0, r3
    23ba:	4b05      	ldr	r3, [pc, #20]	; (23d0 <spi_m_sync_transfer+0x60>)
    23bc:	4798      	blx	r3
    23be:	4603      	mov	r3, r0
}
    23c0:	4618      	mov	r0, r3
    23c2:	3718      	adds	r7, #24
    23c4:	46bd      	mov	sp, r7
    23c6:	bd80      	pop	{r7, pc}
    23c8:	00012f64 	.word	0x00012f64
    23cc:	00002edd 	.word	0x00002edd
    23d0:	00006dc1 	.word	0x00006dc1

000023d4 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    23d4:	b480      	push	{r7}
    23d6:	b083      	sub	sp, #12
    23d8:	af00      	add	r7, sp, #0
    23da:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    23dc:	687b      	ldr	r3, [r7, #4]
    23de:	681b      	ldr	r3, [r3, #0]
}
    23e0:	4618      	mov	r0, r3
    23e2:	370c      	adds	r7, #12
    23e4:	46bd      	mov	sp, r7
    23e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    23ea:	4770      	bx	lr

000023ec <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    23ec:	b480      	push	{r7}
    23ee:	b083      	sub	sp, #12
    23f0:	af00      	add	r7, sp, #0
    23f2:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    23f4:	687b      	ldr	r3, [r7, #4]
    23f6:	2b00      	cmp	r3, #0
    23f8:	d002      	beq.n	2400 <list_get_next_element+0x14>
    23fa:	687b      	ldr	r3, [r7, #4]
    23fc:	681b      	ldr	r3, [r3, #0]
    23fe:	e000      	b.n	2402 <list_get_next_element+0x16>
    2400:	2300      	movs	r3, #0
}
    2402:	4618      	mov	r0, r3
    2404:	370c      	adds	r7, #12
    2406:	46bd      	mov	sp, r7
    2408:	f85d 7b04 	ldr.w	r7, [sp], #4
    240c:	4770      	bx	lr
	...

00002410 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    2410:	b580      	push	{r7, lr}
    2412:	b084      	sub	sp, #16
    2414:	af00      	add	r7, sp, #0
    2416:	60f8      	str	r0, [r7, #12]
    2418:	60b9      	str	r1, [r7, #8]
    241a:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    241c:	68fb      	ldr	r3, [r7, #12]
    241e:	2b00      	cmp	r3, #0
    2420:	d004      	beq.n	242c <timer_init+0x1c>
    2422:	68bb      	ldr	r3, [r7, #8]
    2424:	2b00      	cmp	r3, #0
    2426:	d001      	beq.n	242c <timer_init+0x1c>
    2428:	2301      	movs	r3, #1
    242a:	e000      	b.n	242e <timer_init+0x1e>
    242c:	2300      	movs	r3, #0
    242e:	f003 0301 	and.w	r3, r3, #1
    2432:	b2db      	uxtb	r3, r3
    2434:	223b      	movs	r2, #59	; 0x3b
    2436:	490a      	ldr	r1, [pc, #40]	; (2460 <timer_init+0x50>)
    2438:	4618      	mov	r0, r3
    243a:	4b0a      	ldr	r3, [pc, #40]	; (2464 <timer_init+0x54>)
    243c:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    243e:	68fb      	ldr	r3, [r7, #12]
    2440:	68b9      	ldr	r1, [r7, #8]
    2442:	4618      	mov	r0, r3
    2444:	4b08      	ldr	r3, [pc, #32]	; (2468 <timer_init+0x58>)
    2446:	4798      	blx	r3
	descr->time                           = 0;
    2448:	68fb      	ldr	r3, [r7, #12]
    244a:	2200      	movs	r2, #0
    244c:	611a      	str	r2, [r3, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    244e:	68fb      	ldr	r3, [r7, #12]
    2450:	4a06      	ldr	r2, [pc, #24]	; (246c <timer_init+0x5c>)
    2452:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    2454:	2300      	movs	r3, #0
}
    2456:	4618      	mov	r0, r3
    2458:	3710      	adds	r7, #16
    245a:	46bd      	mov	sp, r7
    245c:	bd80      	pop	{r7, pc}
    245e:	bf00      	nop
    2460:	00012f80 	.word	0x00012f80
    2464:	00002edd 	.word	0x00002edd
    2468:	00007459 	.word	0x00007459
    246c:	00002521 	.word	0x00002521

00002470 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    2470:	b580      	push	{r7, lr}
    2472:	b088      	sub	sp, #32
    2474:	af00      	add	r7, sp, #0
    2476:	60f8      	str	r0, [r7, #12]
    2478:	60b9      	str	r1, [r7, #8]
    247a:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    247c:	2300      	movs	r3, #0
    247e:	61bb      	str	r3, [r7, #24]
    2480:	68f8      	ldr	r0, [r7, #12]
    2482:	4b23      	ldr	r3, [pc, #140]	; (2510 <timer_add_timer_task+0xa0>)
    2484:	4798      	blx	r3
    2486:	6138      	str	r0, [r7, #16]

	if (!head) {
    2488:	693b      	ldr	r3, [r7, #16]
    248a:	2b00      	cmp	r3, #0
    248c:	d104      	bne.n	2498 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    248e:	68b9      	ldr	r1, [r7, #8]
    2490:	68f8      	ldr	r0, [r7, #12]
    2492:	4b20      	ldr	r3, [pc, #128]	; (2514 <timer_add_timer_task+0xa4>)
    2494:	4798      	blx	r3
		return;
    2496:	e037      	b.n	2508 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2498:	693b      	ldr	r3, [r7, #16]
    249a:	61fb      	str	r3, [r7, #28]
    249c:	e022      	b.n	24e4 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    249e:	69fb      	ldr	r3, [r7, #28]
    24a0:	685a      	ldr	r2, [r3, #4]
    24a2:	687b      	ldr	r3, [r7, #4]
    24a4:	429a      	cmp	r2, r3
    24a6:	d808      	bhi.n	24ba <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    24a8:	69fb      	ldr	r3, [r7, #28]
    24aa:	689a      	ldr	r2, [r3, #8]
    24ac:	69fb      	ldr	r3, [r7, #28]
    24ae:	6859      	ldr	r1, [r3, #4]
    24b0:	687b      	ldr	r3, [r7, #4]
    24b2:	1acb      	subs	r3, r1, r3
    24b4:	4413      	add	r3, r2
    24b6:	617b      	str	r3, [r7, #20]
    24b8:	e009      	b.n	24ce <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    24ba:	69fb      	ldr	r3, [r7, #28]
    24bc:	689a      	ldr	r2, [r3, #8]
    24be:	69fb      	ldr	r3, [r7, #28]
    24c0:	685b      	ldr	r3, [r3, #4]
    24c2:	441a      	add	r2, r3
    24c4:	687b      	ldr	r3, [r7, #4]
    24c6:	425b      	negs	r3, r3
    24c8:	4413      	add	r3, r2
    24ca:	3301      	adds	r3, #1
    24cc:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    24ce:	68bb      	ldr	r3, [r7, #8]
    24d0:	689a      	ldr	r2, [r3, #8]
    24d2:	697b      	ldr	r3, [r7, #20]
    24d4:	429a      	cmp	r2, r3
    24d6:	d909      	bls.n	24ec <timer_add_timer_task+0x7c>
			break;
		prev = it;
    24d8:	69fb      	ldr	r3, [r7, #28]
    24da:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    24dc:	69f8      	ldr	r0, [r7, #28]
    24de:	4b0e      	ldr	r3, [pc, #56]	; (2518 <timer_add_timer_task+0xa8>)
    24e0:	4798      	blx	r3
    24e2:	61f8      	str	r0, [r7, #28]
    24e4:	69fb      	ldr	r3, [r7, #28]
    24e6:	2b00      	cmp	r3, #0
    24e8:	d1d9      	bne.n	249e <timer_add_timer_task+0x2e>
    24ea:	e000      	b.n	24ee <timer_add_timer_task+0x7e>
			break;
    24ec:	bf00      	nop
	}

	if (it == head) {
    24ee:	69fa      	ldr	r2, [r7, #28]
    24f0:	693b      	ldr	r3, [r7, #16]
    24f2:	429a      	cmp	r2, r3
    24f4:	d104      	bne.n	2500 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    24f6:	68b9      	ldr	r1, [r7, #8]
    24f8:	68f8      	ldr	r0, [r7, #12]
    24fa:	4b06      	ldr	r3, [pc, #24]	; (2514 <timer_add_timer_task+0xa4>)
    24fc:	4798      	blx	r3
    24fe:	e003      	b.n	2508 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    2500:	68b9      	ldr	r1, [r7, #8]
    2502:	69b8      	ldr	r0, [r7, #24]
    2504:	4b05      	ldr	r3, [pc, #20]	; (251c <timer_add_timer_task+0xac>)
    2506:	4798      	blx	r3
	}
}
    2508:	3720      	adds	r7, #32
    250a:	46bd      	mov	sp, r7
    250c:	bd80      	pop	{r7, pc}
    250e:	bf00      	nop
    2510:	000023d5 	.word	0x000023d5
    2514:	00002f3d 	.word	0x00002f3d
    2518:	000023ed 	.word	0x000023ed
    251c:	00002f95 	.word	0x00002f95

00002520 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    2520:	b580      	push	{r7, lr}
    2522:	b086      	sub	sp, #24
    2524:	af00      	add	r7, sp, #0
    2526:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    2528:	687b      	ldr	r3, [r7, #4]
    252a:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    252c:	693b      	ldr	r3, [r7, #16]
    252e:	3314      	adds	r3, #20
    2530:	4618      	mov	r0, r3
    2532:	4b27      	ldr	r3, [pc, #156]	; (25d0 <timer_process_counted+0xb0>)
    2534:	4798      	blx	r3
    2536:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    2538:	693b      	ldr	r3, [r7, #16]
    253a:	691b      	ldr	r3, [r3, #16]
    253c:	1c5a      	adds	r2, r3, #1
    253e:	693b      	ldr	r3, [r7, #16]
    2540:	611a      	str	r2, [r3, #16]
    2542:	693b      	ldr	r3, [r7, #16]
    2544:	691b      	ldr	r3, [r3, #16]
    2546:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    2548:	693b      	ldr	r3, [r7, #16]
    254a:	7e1b      	ldrb	r3, [r3, #24]
    254c:	b2db      	uxtb	r3, r3
    254e:	f003 0301 	and.w	r3, r3, #1
    2552:	2b00      	cmp	r3, #0
    2554:	d106      	bne.n	2564 <timer_process_counted+0x44>
    2556:	693b      	ldr	r3, [r7, #16]
    2558:	7e1b      	ldrb	r3, [r3, #24]
    255a:	b2db      	uxtb	r3, r3
    255c:	f003 0302 	and.w	r3, r3, #2
    2560:	2b00      	cmp	r3, #0
    2562:	d027      	beq.n	25b4 <timer_process_counted+0x94>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    2564:	693b      	ldr	r3, [r7, #16]
    2566:	7e1b      	ldrb	r3, [r3, #24]
    2568:	b2db      	uxtb	r3, r3
    256a:	f043 0302 	orr.w	r3, r3, #2
    256e:	b2da      	uxtb	r2, r3
    2570:	693b      	ldr	r3, [r7, #16]
    2572:	761a      	strb	r2, [r3, #24]
		return;
    2574:	e029      	b.n	25ca <timer_process_counted+0xaa>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    2576:	697b      	ldr	r3, [r7, #20]
    2578:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    257a:	693b      	ldr	r3, [r7, #16]
    257c:	3314      	adds	r3, #20
    257e:	4618      	mov	r0, r3
    2580:	4b14      	ldr	r3, [pc, #80]	; (25d4 <timer_process_counted+0xb4>)
    2582:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    2584:	68bb      	ldr	r3, [r7, #8]
    2586:	7c1b      	ldrb	r3, [r3, #16]
    2588:	2b01      	cmp	r3, #1
    258a:	d109      	bne.n	25a0 <timer_process_counted+0x80>
			tmp->time_label = time;
    258c:	68bb      	ldr	r3, [r7, #8]
    258e:	68fa      	ldr	r2, [r7, #12]
    2590:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    2592:	693b      	ldr	r3, [r7, #16]
    2594:	3314      	adds	r3, #20
    2596:	68fa      	ldr	r2, [r7, #12]
    2598:	68b9      	ldr	r1, [r7, #8]
    259a:	4618      	mov	r0, r3
    259c:	4b0e      	ldr	r3, [pc, #56]	; (25d8 <timer_process_counted+0xb8>)
    259e:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    25a0:	693b      	ldr	r3, [r7, #16]
    25a2:	3314      	adds	r3, #20
    25a4:	4618      	mov	r0, r3
    25a6:	4b0a      	ldr	r3, [pc, #40]	; (25d0 <timer_process_counted+0xb0>)
    25a8:	4798      	blx	r3
    25aa:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    25ac:	68bb      	ldr	r3, [r7, #8]
    25ae:	68db      	ldr	r3, [r3, #12]
    25b0:	68b8      	ldr	r0, [r7, #8]
    25b2:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    25b4:	697b      	ldr	r3, [r7, #20]
    25b6:	2b00      	cmp	r3, #0
    25b8:	d007      	beq.n	25ca <timer_process_counted+0xaa>
    25ba:	697b      	ldr	r3, [r7, #20]
    25bc:	685b      	ldr	r3, [r3, #4]
    25be:	68fa      	ldr	r2, [r7, #12]
    25c0:	1ad2      	subs	r2, r2, r3
    25c2:	697b      	ldr	r3, [r7, #20]
    25c4:	689b      	ldr	r3, [r3, #8]
    25c6:	429a      	cmp	r2, r3
    25c8:	d2d5      	bcs.n	2576 <timer_process_counted+0x56>
	}
}
    25ca:	3718      	adds	r7, #24
    25cc:	46bd      	mov	sp, r7
    25ce:	bd80      	pop	{r7, pc}
    25d0:	000023d5 	.word	0x000023d5
    25d4:	00003035 	.word	0x00003035
    25d8:	00002471 	.word	0x00002471

000025dc <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    25dc:	b480      	push	{r7}
    25de:	b085      	sub	sp, #20
    25e0:	af00      	add	r7, sp, #0
    25e2:	4603      	mov	r3, r0
    25e4:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    25e6:	2300      	movs	r3, #0
    25e8:	73fb      	strb	r3, [r7, #15]
    25ea:	e029      	b.n	2640 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    25ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
    25f0:	4a19      	ldr	r2, [pc, #100]	; (2658 <_usb_d_find_ep+0x7c>)
    25f2:	015b      	lsls	r3, r3, #5
    25f4:	4413      	add	r3, r2
    25f6:	3301      	adds	r3, #1
    25f8:	781b      	ldrb	r3, [r3, #0]
    25fa:	79fa      	ldrb	r2, [r7, #7]
    25fc:	429a      	cmp	r2, r3
    25fe:	d102      	bne.n	2606 <_usb_d_find_ep+0x2a>
			return i;
    2600:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2604:	e022      	b.n	264c <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    2606:	f997 300f 	ldrsb.w	r3, [r7, #15]
    260a:	4a13      	ldr	r2, [pc, #76]	; (2658 <_usb_d_find_ep+0x7c>)
    260c:	015b      	lsls	r3, r3, #5
    260e:	4413      	add	r3, r2
    2610:	781b      	ldrb	r3, [r3, #0]
    2612:	2b00      	cmp	r3, #0
    2614:	d10e      	bne.n	2634 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    2616:	79fb      	ldrb	r3, [r7, #7]
    2618:	f003 030f 	and.w	r3, r3, #15
    261c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2620:	490d      	ldr	r1, [pc, #52]	; (2658 <_usb_d_find_ep+0x7c>)
    2622:	0152      	lsls	r2, r2, #5
    2624:	440a      	add	r2, r1
    2626:	3201      	adds	r2, #1
    2628:	7812      	ldrb	r2, [r2, #0]
    262a:	4293      	cmp	r3, r2
    262c:	d102      	bne.n	2634 <_usb_d_find_ep+0x58>
			return i;
    262e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2632:	e00b      	b.n	264c <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2634:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2638:	b2db      	uxtb	r3, r3
    263a:	3301      	adds	r3, #1
    263c:	b2db      	uxtb	r3, r3
    263e:	73fb      	strb	r3, [r7, #15]
    2640:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2644:	2b03      	cmp	r3, #3
    2646:	ddd1      	ble.n	25ec <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    2648:	f04f 33ff 	mov.w	r3, #4294967295
}
    264c:	4618      	mov	r0, r3
    264e:	3714      	adds	r7, #20
    2650:	46bd      	mov	sp, r7
    2652:	f85d 7b04 	ldr.w	r7, [sp], #4
    2656:	4770      	bx	lr
    2658:	20000ad0 	.word	0x20000ad0

0000265c <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    265c:	b580      	push	{r7, lr}
    265e:	b088      	sub	sp, #32
    2660:	af00      	add	r7, sp, #0
    2662:	60ba      	str	r2, [r7, #8]
    2664:	607b      	str	r3, [r7, #4]
    2666:	4603      	mov	r3, r0
    2668:	73fb      	strb	r3, [r7, #15]
    266a:	460b      	mov	r3, r1
    266c:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    266e:	68bb      	ldr	r3, [r7, #8]
    2670:	617b      	str	r3, [r7, #20]
    2672:	687b      	ldr	r3, [r7, #4]
    2674:	61bb      	str	r3, [r7, #24]
    2676:	7bbb      	ldrb	r3, [r7, #14]
    2678:	2b00      	cmp	r3, #0
    267a:	d004      	beq.n	2686 <_usb_d_trans+0x2a>
    267c:	7bfb      	ldrb	r3, [r7, #15]
    267e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2682:	b2db      	uxtb	r3, r3
    2684:	e003      	b.n	268e <_usb_d_trans+0x32>
    2686:	7bfb      	ldrb	r3, [r7, #15]
    2688:	f003 030f 	and.w	r3, r3, #15
    268c:	b2db      	uxtb	r3, r3
    268e:	773b      	strb	r3, [r7, #28]
    2690:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    2694:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    2696:	f107 0314 	add.w	r3, r7, #20
    269a:	4618      	mov	r0, r3
    269c:	4b03      	ldr	r3, [pc, #12]	; (26ac <_usb_d_trans+0x50>)
    269e:	4798      	blx	r3
    26a0:	4603      	mov	r3, r0
}
    26a2:	4618      	mov	r0, r3
    26a4:	3720      	adds	r7, #32
    26a6:	46bd      	mov	sp, r7
    26a8:	bd80      	pop	{r7, pc}
    26aa:	bf00      	nop
    26ac:	0000a001 	.word	0x0000a001

000026b0 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    26b0:	b480      	push	{r7}
    26b2:	b085      	sub	sp, #20
    26b4:	af00      	add	r7, sp, #0
    26b6:	60f8      	str	r0, [r7, #12]
    26b8:	60b9      	str	r1, [r7, #8]
    26ba:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    26bc:	2300      	movs	r3, #0
}
    26be:	4618      	mov	r0, r3
    26c0:	3714      	adds	r7, #20
    26c2:	46bd      	mov	sp, r7
    26c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    26c8:	4770      	bx	lr
	...

000026cc <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    26cc:	b580      	push	{r7, lr}
    26ce:	b086      	sub	sp, #24
    26d0:	af00      	add	r7, sp, #0
    26d2:	4603      	mov	r3, r0
    26d4:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    26d6:	79fb      	ldrb	r3, [r7, #7]
    26d8:	4618      	mov	r0, r3
    26da:	4b2a      	ldr	r3, [pc, #168]	; (2784 <usb_d_cb_trans_setup+0xb8>)
    26dc:	4798      	blx	r3
    26de:	4603      	mov	r3, r0
    26e0:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    26e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    26e6:	015b      	lsls	r3, r3, #5
    26e8:	4a27      	ldr	r2, [pc, #156]	; (2788 <usb_d_cb_trans_setup+0xbc>)
    26ea:	4413      	add	r3, r2
    26ec:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    26ee:	693b      	ldr	r3, [r7, #16]
    26f0:	330c      	adds	r3, #12
    26f2:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    26f4:	79fb      	ldrb	r3, [r7, #7]
    26f6:	68f9      	ldr	r1, [r7, #12]
    26f8:	4618      	mov	r0, r3
    26fa:	4b24      	ldr	r3, [pc, #144]	; (278c <usb_d_cb_trans_setup+0xc0>)
    26fc:	4798      	blx	r3
    26fe:	4603      	mov	r3, r0
    2700:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    2702:	7afb      	ldrb	r3, [r7, #11]
    2704:	2b08      	cmp	r3, #8
    2706:	d00d      	beq.n	2724 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2708:	79fb      	ldrb	r3, [r7, #7]
    270a:	2101      	movs	r1, #1
    270c:	4618      	mov	r0, r3
    270e:	4b20      	ldr	r3, [pc, #128]	; (2790 <usb_d_cb_trans_setup+0xc4>)
    2710:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    2712:	79fb      	ldrb	r3, [r7, #7]
    2714:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2718:	b2db      	uxtb	r3, r3
    271a:	2101      	movs	r1, #1
    271c:	4618      	mov	r0, r3
    271e:	4b1c      	ldr	r3, [pc, #112]	; (2790 <usb_d_cb_trans_setup+0xc4>)
    2720:	4798      	blx	r3
		return;
    2722:	e02b      	b.n	277c <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2724:	79fb      	ldrb	r3, [r7, #7]
    2726:	2100      	movs	r1, #0
    2728:	4618      	mov	r0, r3
    272a:	4b19      	ldr	r3, [pc, #100]	; (2790 <usb_d_cb_trans_setup+0xc4>)
    272c:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    272e:	79fb      	ldrb	r3, [r7, #7]
    2730:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2734:	b2db      	uxtb	r3, r3
    2736:	2100      	movs	r1, #0
    2738:	4618      	mov	r0, r3
    273a:	4b15      	ldr	r3, [pc, #84]	; (2790 <usb_d_cb_trans_setup+0xc4>)
    273c:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    273e:	693b      	ldr	r3, [r7, #16]
    2740:	2201      	movs	r2, #1
    2742:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    2744:	693b      	ldr	r3, [r7, #16]
    2746:	695b      	ldr	r3, [r3, #20]
    2748:	79fa      	ldrb	r2, [r7, #7]
    274a:	68f9      	ldr	r1, [r7, #12]
    274c:	4610      	mov	r0, r2
    274e:	4798      	blx	r3
    2750:	4603      	mov	r3, r0
    2752:	f083 0301 	eor.w	r3, r3, #1
    2756:	b2db      	uxtb	r3, r3
    2758:	2b00      	cmp	r3, #0
    275a:	d00f      	beq.n	277c <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    275c:	693b      	ldr	r3, [r7, #16]
    275e:	2205      	movs	r2, #5
    2760:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2762:	79fb      	ldrb	r3, [r7, #7]
    2764:	2101      	movs	r1, #1
    2766:	4618      	mov	r0, r3
    2768:	4b09      	ldr	r3, [pc, #36]	; (2790 <usb_d_cb_trans_setup+0xc4>)
    276a:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    276c:	79fb      	ldrb	r3, [r7, #7]
    276e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2772:	b2db      	uxtb	r3, r3
    2774:	2101      	movs	r1, #1
    2776:	4618      	mov	r0, r3
    2778:	4b05      	ldr	r3, [pc, #20]	; (2790 <usb_d_cb_trans_setup+0xc4>)
    277a:	4798      	blx	r3
	}
}
    277c:	3718      	adds	r7, #24
    277e:	46bd      	mov	sp, r7
    2780:	bd80      	pop	{r7, pc}
    2782:	bf00      	nop
    2784:	000025dd 	.word	0x000025dd
    2788:	20000ad0 	.word	0x20000ad0
    278c:	00009f59 	.word	0x00009f59
    2790:	00009dd1 	.word	0x00009dd1

00002794 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    2794:	b580      	push	{r7, lr}
    2796:	b084      	sub	sp, #16
    2798:	af00      	add	r7, sp, #0
    279a:	4603      	mov	r3, r0
    279c:	6039      	str	r1, [r7, #0]
    279e:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    27a0:	79fb      	ldrb	r3, [r7, #7]
    27a2:	4618      	mov	r0, r3
    27a4:	4b0d      	ldr	r3, [pc, #52]	; (27dc <usb_d_cb_trans_more+0x48>)
    27a6:	4798      	blx	r3
    27a8:	4603      	mov	r3, r0
    27aa:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    27ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
    27b0:	015b      	lsls	r3, r3, #5
    27b2:	4a0b      	ldr	r2, [pc, #44]	; (27e0 <usb_d_cb_trans_more+0x4c>)
    27b4:	4413      	add	r3, r2
    27b6:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    27b8:	68bb      	ldr	r3, [r7, #8]
    27ba:	789b      	ldrb	r3, [r3, #2]
    27bc:	2b03      	cmp	r3, #3
    27be:	d107      	bne.n	27d0 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    27c0:	68bb      	ldr	r3, [r7, #8]
    27c2:	699b      	ldr	r3, [r3, #24]
    27c4:	79fa      	ldrb	r2, [r7, #7]
    27c6:	6839      	ldr	r1, [r7, #0]
    27c8:	4610      	mov	r0, r2
    27ca:	4798      	blx	r3
    27cc:	4603      	mov	r3, r0
    27ce:	e000      	b.n	27d2 <usb_d_cb_trans_more+0x3e>
	}
	return false;
    27d0:	2300      	movs	r3, #0
}
    27d2:	4618      	mov	r0, r3
    27d4:	3710      	adds	r7, #16
    27d6:	46bd      	mov	sp, r7
    27d8:	bd80      	pop	{r7, pc}
    27da:	bf00      	nop
    27dc:	000025dd 	.word	0x000025dd
    27e0:	20000ad0 	.word	0x20000ad0

000027e4 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    27e4:	b590      	push	{r4, r7, lr}
    27e6:	b087      	sub	sp, #28
    27e8:	af02      	add	r7, sp, #8
    27ea:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    27ec:	687b      	ldr	r3, [r7, #4]
    27ee:	789b      	ldrb	r3, [r3, #2]
    27f0:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    27f2:	687b      	ldr	r3, [r7, #4]
    27f4:	7b1b      	ldrb	r3, [r3, #12]
    27f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    27fa:	2b00      	cmp	r3, #0
    27fc:	bf14      	ite	ne
    27fe:	2301      	movne	r3, #1
    2800:	2300      	moveq	r3, #0
    2802:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    2804:	7bfb      	ldrb	r3, [r7, #15]
    2806:	2b03      	cmp	r3, #3
    2808:	d13a      	bne.n	2880 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    280a:	687b      	ldr	r3, [r7, #4]
    280c:	69db      	ldr	r3, [r3, #28]
    280e:	687a      	ldr	r2, [r7, #4]
    2810:	7850      	ldrb	r0, [r2, #1]
    2812:	687a      	ldr	r2, [r7, #4]
    2814:	320c      	adds	r2, #12
    2816:	2101      	movs	r1, #1
    2818:	4798      	blx	r3
    281a:	4603      	mov	r3, r0
    281c:	737b      	strb	r3, [r7, #13]
		if (err) {
    281e:	7b7b      	ldrb	r3, [r7, #13]
    2820:	2b00      	cmp	r3, #0
    2822:	d015      	beq.n	2850 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    2824:	687b      	ldr	r3, [r7, #4]
    2826:	2205      	movs	r2, #5
    2828:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    282a:	687b      	ldr	r3, [r7, #4]
    282c:	2202      	movs	r2, #2
    282e:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    2830:	7bbb      	ldrb	r3, [r7, #14]
    2832:	2b00      	cmp	r3, #0
    2834:	d002      	beq.n	283c <usb_d_ctrl_trans_done+0x58>
    2836:	687b      	ldr	r3, [r7, #4]
    2838:	785b      	ldrb	r3, [r3, #1]
    283a:	e004      	b.n	2846 <usb_d_ctrl_trans_done+0x62>
    283c:	687b      	ldr	r3, [r7, #4]
    283e:	785b      	ldrb	r3, [r3, #1]
    2840:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2844:	b2db      	uxtb	r3, r3
    2846:	2101      	movs	r1, #1
    2848:	4618      	mov	r0, r3
    284a:	4b15      	ldr	r3, [pc, #84]	; (28a0 <usb_d_ctrl_trans_done+0xbc>)
    284c:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    284e:	e022      	b.n	2896 <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    2850:	687b      	ldr	r3, [r7, #4]
    2852:	2204      	movs	r2, #4
    2854:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    2856:	687b      	ldr	r3, [r7, #4]
    2858:	7858      	ldrb	r0, [r3, #1]
    285a:	7bbb      	ldrb	r3, [r7, #14]
    285c:	2b00      	cmp	r3, #0
    285e:	bf14      	ite	ne
    2860:	2301      	movne	r3, #1
    2862:	2300      	moveq	r3, #0
    2864:	b2db      	uxtb	r3, r3
    2866:	f083 0301 	eor.w	r3, r3, #1
    286a:	b2db      	uxtb	r3, r3
    286c:	f003 0301 	and.w	r3, r3, #1
    2870:	b2d9      	uxtb	r1, r3
    2872:	2301      	movs	r3, #1
    2874:	9300      	str	r3, [sp, #0]
    2876:	2300      	movs	r3, #0
    2878:	2200      	movs	r2, #0
    287a:	4c0a      	ldr	r4, [pc, #40]	; (28a4 <usb_d_ctrl_trans_done+0xc0>)
    287c:	47a0      	blx	r4
}
    287e:	e00a      	b.n	2896 <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    2880:	687b      	ldr	r3, [r7, #4]
    2882:	69db      	ldr	r3, [r3, #28]
    2884:	687a      	ldr	r2, [r7, #4]
    2886:	7850      	ldrb	r0, [r2, #1]
    2888:	687a      	ldr	r2, [r7, #4]
    288a:	320c      	adds	r2, #12
    288c:	2100      	movs	r1, #0
    288e:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2890:	687b      	ldr	r3, [r7, #4]
    2892:	2202      	movs	r2, #2
    2894:	709a      	strb	r2, [r3, #2]
}
    2896:	bf00      	nop
    2898:	3714      	adds	r7, #20
    289a:	46bd      	mov	sp, r7
    289c:	bd90      	pop	{r4, r7, pc}
    289e:	bf00      	nop
    28a0:	00009dd1 	.word	0x00009dd1
    28a4:	0000265d 	.word	0x0000265d

000028a8 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    28a8:	b580      	push	{r7, lr}
    28aa:	b086      	sub	sp, #24
    28ac:	af00      	add	r7, sp, #0
    28ae:	4603      	mov	r3, r0
    28b0:	60b9      	str	r1, [r7, #8]
    28b2:	607a      	str	r2, [r7, #4]
    28b4:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    28b6:	7bfb      	ldrb	r3, [r7, #15]
    28b8:	4618      	mov	r0, r3
    28ba:	4b2f      	ldr	r3, [pc, #188]	; (2978 <_usb_d_cb_trans_done+0xd0>)
    28bc:	4798      	blx	r3
    28be:	4603      	mov	r3, r0
    28c0:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    28c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    28c6:	015b      	lsls	r3, r3, #5
    28c8:	4a2c      	ldr	r2, [pc, #176]	; (297c <_usb_d_cb_trans_done+0xd4>)
    28ca:	4413      	add	r3, r2
    28cc:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    28ce:	68bb      	ldr	r3, [r7, #8]
    28d0:	2b00      	cmp	r3, #0
    28d2:	d10e      	bne.n	28f2 <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    28d4:	693b      	ldr	r3, [r7, #16]
    28d6:	2200      	movs	r2, #0
    28d8:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    28da:	693b      	ldr	r3, [r7, #16]
    28dc:	781b      	ldrb	r3, [r3, #0]
    28de:	2b00      	cmp	r3, #0
    28e0:	d103      	bne.n	28ea <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    28e2:	6938      	ldr	r0, [r7, #16]
    28e4:	4b26      	ldr	r3, [pc, #152]	; (2980 <_usb_d_cb_trans_done+0xd8>)
    28e6:	4798      	blx	r3
			return;
    28e8:	e043      	b.n	2972 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    28ea:	693b      	ldr	r3, [r7, #16]
    28ec:	2201      	movs	r2, #1
    28ee:	709a      	strb	r2, [r3, #2]
    28f0:	e038      	b.n	2964 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    28f2:	68bb      	ldr	r3, [r7, #8]
    28f4:	2b01      	cmp	r3, #1
    28f6:	d113      	bne.n	2920 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    28f8:	693b      	ldr	r3, [r7, #16]
    28fa:	2202      	movs	r2, #2
    28fc:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    28fe:	693b      	ldr	r3, [r7, #16]
    2900:	781b      	ldrb	r3, [r3, #0]
    2902:	2b00      	cmp	r3, #0
    2904:	d108      	bne.n	2918 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2906:	693b      	ldr	r3, [r7, #16]
    2908:	2202      	movs	r2, #2
    290a:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    290c:	7bfb      	ldrb	r3, [r7, #15]
    290e:	2100      	movs	r1, #0
    2910:	4618      	mov	r0, r3
    2912:	4b1c      	ldr	r3, [pc, #112]	; (2984 <_usb_d_cb_trans_done+0xdc>)
    2914:	4798      	blx	r3
    2916:	e025      	b.n	2964 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    2918:	693b      	ldr	r3, [r7, #16]
    291a:	2205      	movs	r2, #5
    291c:	709a      	strb	r2, [r3, #2]
    291e:	e021      	b.n	2964 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    2920:	68bb      	ldr	r3, [r7, #8]
    2922:	2b02      	cmp	r3, #2
    2924:	d10e      	bne.n	2944 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    2926:	693b      	ldr	r3, [r7, #16]
    2928:	2204      	movs	r2, #4
    292a:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    292c:	693b      	ldr	r3, [r7, #16]
    292e:	781b      	ldrb	r3, [r3, #0]
    2930:	2b00      	cmp	r3, #0
    2932:	d103      	bne.n	293c <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2934:	693b      	ldr	r3, [r7, #16]
    2936:	2202      	movs	r2, #2
    2938:	709a      	strb	r2, [r3, #2]
			return;
    293a:	e01a      	b.n	2972 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    293c:	693b      	ldr	r3, [r7, #16]
    293e:	2201      	movs	r2, #1
    2940:	709a      	strb	r2, [r3, #2]
    2942:	e00f      	b.n	2964 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    2944:	68bb      	ldr	r3, [r7, #8]
    2946:	2b03      	cmp	r3, #3
    2948:	d106      	bne.n	2958 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    294a:	693b      	ldr	r3, [r7, #16]
    294c:	2200      	movs	r2, #0
    294e:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    2950:	693b      	ldr	r3, [r7, #16]
    2952:	2205      	movs	r2, #5
    2954:	70da      	strb	r2, [r3, #3]
    2956:	e005      	b.n	2964 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    2958:	693b      	ldr	r3, [r7, #16]
    295a:	2206      	movs	r2, #6
    295c:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    295e:	693b      	ldr	r3, [r7, #16]
    2960:	2206      	movs	r2, #6
    2962:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    2964:	693b      	ldr	r3, [r7, #16]
    2966:	69db      	ldr	r3, [r3, #28]
    2968:	693a      	ldr	r2, [r7, #16]
    296a:	78d1      	ldrb	r1, [r2, #3]
    296c:	687a      	ldr	r2, [r7, #4]
    296e:	7bf8      	ldrb	r0, [r7, #15]
    2970:	4798      	blx	r3
}
    2972:	3718      	adds	r7, #24
    2974:	46bd      	mov	sp, r7
    2976:	bd80      	pop	{r7, pc}
    2978:	000025dd 	.word	0x000025dd
    297c:	20000ad0 	.word	0x20000ad0
    2980:	000027e5 	.word	0x000027e5
    2984:	00009dd1 	.word	0x00009dd1

00002988 <usb_d_init>:

int32_t usb_d_init(void)
{
    2988:	b580      	push	{r7, lr}
    298a:	b082      	sub	sp, #8
    298c:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    298e:	4b21      	ldr	r3, [pc, #132]	; (2a14 <usb_d_init+0x8c>)
    2990:	4798      	blx	r3
    2992:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    2994:	683b      	ldr	r3, [r7, #0]
    2996:	2b00      	cmp	r3, #0
    2998:	da01      	bge.n	299e <usb_d_init+0x16>
		return rc;
    299a:	683b      	ldr	r3, [r7, #0]
    299c:	e036      	b.n	2a0c <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    299e:	2280      	movs	r2, #128	; 0x80
    29a0:	2100      	movs	r1, #0
    29a2:	481d      	ldr	r0, [pc, #116]	; (2a18 <usb_d_init+0x90>)
    29a4:	4b1d      	ldr	r3, [pc, #116]	; (2a1c <usb_d_init+0x94>)
    29a6:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    29a8:	2300      	movs	r3, #0
    29aa:	71fb      	strb	r3, [r7, #7]
    29ac:	e01e      	b.n	29ec <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    29ae:	79fb      	ldrb	r3, [r7, #7]
    29b0:	4a19      	ldr	r2, [pc, #100]	; (2a18 <usb_d_init+0x90>)
    29b2:	015b      	lsls	r3, r3, #5
    29b4:	4413      	add	r3, r2
    29b6:	3301      	adds	r3, #1
    29b8:	22ff      	movs	r2, #255	; 0xff
    29ba:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    29bc:	79fb      	ldrb	r3, [r7, #7]
    29be:	4a16      	ldr	r2, [pc, #88]	; (2a18 <usb_d_init+0x90>)
    29c0:	015b      	lsls	r3, r3, #5
    29c2:	4413      	add	r3, r2
    29c4:	3314      	adds	r3, #20
    29c6:	4a16      	ldr	r2, [pc, #88]	; (2a20 <usb_d_init+0x98>)
    29c8:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    29ca:	79fb      	ldrb	r3, [r7, #7]
    29cc:	4a12      	ldr	r2, [pc, #72]	; (2a18 <usb_d_init+0x90>)
    29ce:	015b      	lsls	r3, r3, #5
    29d0:	4413      	add	r3, r2
    29d2:	3318      	adds	r3, #24
    29d4:	4a12      	ldr	r2, [pc, #72]	; (2a20 <usb_d_init+0x98>)
    29d6:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    29d8:	79fb      	ldrb	r3, [r7, #7]
    29da:	4a0f      	ldr	r2, [pc, #60]	; (2a18 <usb_d_init+0x90>)
    29dc:	015b      	lsls	r3, r3, #5
    29de:	4413      	add	r3, r2
    29e0:	331c      	adds	r3, #28
    29e2:	4a0f      	ldr	r2, [pc, #60]	; (2a20 <usb_d_init+0x98>)
    29e4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    29e6:	79fb      	ldrb	r3, [r7, #7]
    29e8:	3301      	adds	r3, #1
    29ea:	71fb      	strb	r3, [r7, #7]
    29ec:	79fb      	ldrb	r3, [r7, #7]
    29ee:	2b03      	cmp	r3, #3
    29f0:	d9dd      	bls.n	29ae <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    29f2:	490c      	ldr	r1, [pc, #48]	; (2a24 <usb_d_init+0x9c>)
    29f4:	2000      	movs	r0, #0
    29f6:	4b0c      	ldr	r3, [pc, #48]	; (2a28 <usb_d_init+0xa0>)
    29f8:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    29fa:	490c      	ldr	r1, [pc, #48]	; (2a2c <usb_d_init+0xa4>)
    29fc:	2001      	movs	r0, #1
    29fe:	4b0a      	ldr	r3, [pc, #40]	; (2a28 <usb_d_init+0xa0>)
    2a00:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    2a02:	490b      	ldr	r1, [pc, #44]	; (2a30 <usb_d_init+0xa8>)
    2a04:	2002      	movs	r0, #2
    2a06:	4b08      	ldr	r3, [pc, #32]	; (2a28 <usb_d_init+0xa0>)
    2a08:	4798      	blx	r3
	return ERR_NONE;
    2a0a:	2300      	movs	r3, #0
}
    2a0c:	4618      	mov	r0, r3
    2a0e:	3708      	adds	r7, #8
    2a10:	46bd      	mov	sp, r7
    2a12:	bd80      	pop	{r7, pc}
    2a14:	00009619 	.word	0x00009619
    2a18:	20000ad0 	.word	0x20000ad0
    2a1c:	00012ca9 	.word	0x00012ca9
    2a20:	000026b1 	.word	0x000026b1
    2a24:	000026cd 	.word	0x000026cd
    2a28:	0000a20d 	.word	0x0000a20d
    2a2c:	00002795 	.word	0x00002795
    2a30:	000028a9 	.word	0x000028a9

00002a34 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    2a34:	b580      	push	{r7, lr}
    2a36:	b082      	sub	sp, #8
    2a38:	af00      	add	r7, sp, #0
    2a3a:	4603      	mov	r3, r0
    2a3c:	6039      	str	r1, [r7, #0]
    2a3e:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    2a40:	79fb      	ldrb	r3, [r7, #7]
    2a42:	6839      	ldr	r1, [r7, #0]
    2a44:	4618      	mov	r0, r3
    2a46:	4b03      	ldr	r3, [pc, #12]	; (2a54 <usb_d_register_callback+0x20>)
    2a48:	4798      	blx	r3
}
    2a4a:	bf00      	nop
    2a4c:	3708      	adds	r7, #8
    2a4e:	46bd      	mov	sp, r7
    2a50:	bd80      	pop	{r7, pc}
    2a52:	bf00      	nop
    2a54:	0000a1c5 	.word	0x0000a1c5

00002a58 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    2a58:	b580      	push	{r7, lr}
    2a5a:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    2a5c:	4b02      	ldr	r3, [pc, #8]	; (2a68 <usb_d_enable+0x10>)
    2a5e:	4798      	blx	r3
    2a60:	4603      	mov	r3, r0
}
    2a62:	4618      	mov	r0, r3
    2a64:	bd80      	pop	{r7, pc}
    2a66:	bf00      	nop
    2a68:	00009709 	.word	0x00009709

00002a6c <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    2a6c:	b580      	push	{r7, lr}
    2a6e:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    2a70:	4b01      	ldr	r3, [pc, #4]	; (2a78 <usb_d_attach+0xc>)
    2a72:	4798      	blx	r3
}
    2a74:	bf00      	nop
    2a76:	bd80      	pop	{r7, pc}
    2a78:	0000978d 	.word	0x0000978d

00002a7c <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    2a7c:	b580      	push	{r7, lr}
    2a7e:	b082      	sub	sp, #8
    2a80:	af00      	add	r7, sp, #0
    2a82:	4603      	mov	r3, r0
    2a84:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    2a86:	79fb      	ldrb	r3, [r7, #7]
    2a88:	4618      	mov	r0, r3
    2a8a:	4b03      	ldr	r3, [pc, #12]	; (2a98 <usb_d_set_address+0x1c>)
    2a8c:	4798      	blx	r3
}
    2a8e:	bf00      	nop
    2a90:	3708      	adds	r7, #8
    2a92:	46bd      	mov	sp, r7
    2a94:	bd80      	pop	{r7, pc}
    2a96:	bf00      	nop
    2a98:	000097a1 	.word	0x000097a1

00002a9c <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    2a9c:	b580      	push	{r7, lr}
    2a9e:	b082      	sub	sp, #8
    2aa0:	af00      	add	r7, sp, #0
    2aa2:	4603      	mov	r3, r0
    2aa4:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    2aa6:	79fb      	ldrb	r3, [r7, #7]
    2aa8:	b29b      	uxth	r3, r3
    2aaa:	461a      	mov	r2, r3
    2aac:	2100      	movs	r1, #0
    2aae:	2000      	movs	r0, #0
    2ab0:	4b03      	ldr	r3, [pc, #12]	; (2ac0 <usb_d_ep0_init+0x24>)
    2ab2:	4798      	blx	r3
    2ab4:	4603      	mov	r3, r0
}
    2ab6:	4618      	mov	r0, r3
    2ab8:	3708      	adds	r7, #8
    2aba:	46bd      	mov	sp, r7
    2abc:	bd80      	pop	{r7, pc}
    2abe:	bf00      	nop
    2ac0:	00002ac5 	.word	0x00002ac5

00002ac4 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    2ac4:	b580      	push	{r7, lr}
    2ac6:	b086      	sub	sp, #24
    2ac8:	af00      	add	r7, sp, #0
    2aca:	4603      	mov	r3, r0
    2acc:	71fb      	strb	r3, [r7, #7]
    2ace:	460b      	mov	r3, r1
    2ad0:	71bb      	strb	r3, [r7, #6]
    2ad2:	4613      	mov	r3, r2
    2ad4:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    2ad6:	79fb      	ldrb	r3, [r7, #7]
    2ad8:	4618      	mov	r0, r3
    2ada:	4b1e      	ldr	r3, [pc, #120]	; (2b54 <usb_d_ep_init+0x90>)
    2adc:	4798      	blx	r3
    2ade:	4603      	mov	r3, r0
    2ae0:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2ae2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2ae6:	015b      	lsls	r3, r3, #5
    2ae8:	4a1b      	ldr	r2, [pc, #108]	; (2b58 <usb_d_ep_init+0x94>)
    2aea:	4413      	add	r3, r2
    2aec:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    2aee:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2af2:	2b00      	cmp	r3, #0
    2af4:	db02      	blt.n	2afc <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    2af6:	f06f 0313 	mvn.w	r3, #19
    2afa:	e027      	b.n	2b4c <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    2afc:	20ff      	movs	r0, #255	; 0xff
    2afe:	4b15      	ldr	r3, [pc, #84]	; (2b54 <usb_d_ep_init+0x90>)
    2b00:	4798      	blx	r3
    2b02:	4603      	mov	r3, r0
    2b04:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    2b06:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2b0a:	2b00      	cmp	r3, #0
    2b0c:	da02      	bge.n	2b14 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    2b0e:	f06f 0314 	mvn.w	r3, #20
    2b12:	e01b      	b.n	2b4c <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    2b14:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2b18:	015b      	lsls	r3, r3, #5
    2b1a:	4a0f      	ldr	r2, [pc, #60]	; (2b58 <usb_d_ep_init+0x94>)
    2b1c:	4413      	add	r3, r2
    2b1e:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    2b20:	88ba      	ldrh	r2, [r7, #4]
    2b22:	79b9      	ldrb	r1, [r7, #6]
    2b24:	79fb      	ldrb	r3, [r7, #7]
    2b26:	4618      	mov	r0, r3
    2b28:	4b0c      	ldr	r3, [pc, #48]	; (2b5c <usb_d_ep_init+0x98>)
    2b2a:	4798      	blx	r3
    2b2c:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    2b2e:	68fb      	ldr	r3, [r7, #12]
    2b30:	2b00      	cmp	r3, #0
    2b32:	da01      	bge.n	2b38 <usb_d_ep_init+0x74>
		return rc;
    2b34:	68fb      	ldr	r3, [r7, #12]
    2b36:	e009      	b.n	2b4c <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    2b38:	693b      	ldr	r3, [r7, #16]
    2b3a:	79fa      	ldrb	r2, [r7, #7]
    2b3c:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    2b3e:	79bb      	ldrb	r3, [r7, #6]
    2b40:	f003 0303 	and.w	r3, r3, #3
    2b44:	b2da      	uxtb	r2, r3
    2b46:	693b      	ldr	r3, [r7, #16]
    2b48:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    2b4a:	2300      	movs	r3, #0
}
    2b4c:	4618      	mov	r0, r3
    2b4e:	3718      	adds	r7, #24
    2b50:	46bd      	mov	sp, r7
    2b52:	bd80      	pop	{r7, pc}
    2b54:	000025dd 	.word	0x000025dd
    2b58:	20000ad0 	.word	0x20000ad0
    2b5c:	00009841 	.word	0x00009841

00002b60 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    2b60:	b580      	push	{r7, lr}
    2b62:	b084      	sub	sp, #16
    2b64:	af00      	add	r7, sp, #0
    2b66:	4603      	mov	r3, r0
    2b68:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2b6a:	79fb      	ldrb	r3, [r7, #7]
    2b6c:	4618      	mov	r0, r3
    2b6e:	4b0d      	ldr	r3, [pc, #52]	; (2ba4 <usb_d_ep_deinit+0x44>)
    2b70:	4798      	blx	r3
    2b72:	4603      	mov	r3, r0
    2b74:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2b7a:	015b      	lsls	r3, r3, #5
    2b7c:	4a0a      	ldr	r2, [pc, #40]	; (2ba8 <usb_d_ep_deinit+0x48>)
    2b7e:	4413      	add	r3, r2
    2b80:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    2b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2b86:	2b00      	cmp	r3, #0
    2b88:	db07      	blt.n	2b9a <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    2b8a:	79fb      	ldrb	r3, [r7, #7]
    2b8c:	4618      	mov	r0, r3
    2b8e:	4b07      	ldr	r3, [pc, #28]	; (2bac <usb_d_ep_deinit+0x4c>)
    2b90:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    2b92:	68bb      	ldr	r3, [r7, #8]
    2b94:	22ff      	movs	r2, #255	; 0xff
    2b96:	705a      	strb	r2, [r3, #1]
    2b98:	e000      	b.n	2b9c <usb_d_ep_deinit+0x3c>
		return;
    2b9a:	bf00      	nop
}
    2b9c:	3710      	adds	r7, #16
    2b9e:	46bd      	mov	sp, r7
    2ba0:	bd80      	pop	{r7, pc}
    2ba2:	bf00      	nop
    2ba4:	000025dd 	.word	0x000025dd
    2ba8:	20000ad0 	.word	0x20000ad0
    2bac:	00009975 	.word	0x00009975

00002bb0 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    2bb0:	b580      	push	{r7, lr}
    2bb2:	b086      	sub	sp, #24
    2bb4:	af00      	add	r7, sp, #0
    2bb6:	4603      	mov	r3, r0
    2bb8:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2bba:	79fb      	ldrb	r3, [r7, #7]
    2bbc:	4618      	mov	r0, r3
    2bbe:	4b15      	ldr	r3, [pc, #84]	; (2c14 <usb_d_ep_enable+0x64>)
    2bc0:	4798      	blx	r3
    2bc2:	4603      	mov	r3, r0
    2bc4:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2bc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2bca:	015b      	lsls	r3, r3, #5
    2bcc:	4a12      	ldr	r2, [pc, #72]	; (2c18 <usb_d_ep_enable+0x68>)
    2bce:	4413      	add	r3, r2
    2bd0:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    2bd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2bd6:	2b00      	cmp	r3, #0
    2bd8:	da02      	bge.n	2be0 <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    2bda:	f06f 0311 	mvn.w	r3, #17
    2bde:	e014      	b.n	2c0a <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    2be0:	693b      	ldr	r3, [r7, #16]
    2be2:	781b      	ldrb	r3, [r3, #0]
    2be4:	2b00      	cmp	r3, #0
    2be6:	d101      	bne.n	2bec <usb_d_ep_enable+0x3c>
    2be8:	2202      	movs	r2, #2
    2bea:	e000      	b.n	2bee <usb_d_ep_enable+0x3e>
    2bec:	2201      	movs	r2, #1
    2bee:	693b      	ldr	r3, [r7, #16]
    2bf0:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    2bf2:	79fb      	ldrb	r3, [r7, #7]
    2bf4:	4618      	mov	r0, r3
    2bf6:	4b09      	ldr	r3, [pc, #36]	; (2c1c <usb_d_ep_enable+0x6c>)
    2bf8:	4798      	blx	r3
    2bfa:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    2bfc:	68fb      	ldr	r3, [r7, #12]
    2bfe:	2b00      	cmp	r3, #0
    2c00:	da02      	bge.n	2c08 <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    2c02:	693b      	ldr	r3, [r7, #16]
    2c04:	2200      	movs	r2, #0
    2c06:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    2c08:	68fb      	ldr	r3, [r7, #12]
}
    2c0a:	4618      	mov	r0, r3
    2c0c:	3718      	adds	r7, #24
    2c0e:	46bd      	mov	sp, r7
    2c10:	bd80      	pop	{r7, pc}
    2c12:	bf00      	nop
    2c14:	000025dd 	.word	0x000025dd
    2c18:	20000ad0 	.word	0x20000ad0
    2c1c:	00009a59 	.word	0x00009a59

00002c20 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    2c20:	b590      	push	{r4, r7, lr}
    2c22:	b08d      	sub	sp, #52	; 0x34
    2c24:	af02      	add	r7, sp, #8
    2c26:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    2c28:	687b      	ldr	r3, [r7, #4]
    2c2a:	7a1b      	ldrb	r3, [r3, #8]
    2c2c:	4618      	mov	r0, r3
    2c2e:	4b51      	ldr	r3, [pc, #324]	; (2d74 <usb_d_ep_transfer+0x154>)
    2c30:	4798      	blx	r3
    2c32:	4603      	mov	r3, r0
    2c34:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    2c36:	f997 301f 	ldrsb.w	r3, [r7, #31]
    2c3a:	015b      	lsls	r3, r3, #5
    2c3c:	4a4e      	ldr	r2, [pc, #312]	; (2d78 <usb_d_ep_transfer+0x158>)
    2c3e:	4413      	add	r3, r2
    2c40:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    2c42:	687b      	ldr	r3, [r7, #4]
    2c44:	7a1b      	ldrb	r3, [r3, #8]
    2c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
    2c4a:	2b00      	cmp	r3, #0
    2c4c:	bf14      	ite	ne
    2c4e:	2301      	movne	r3, #1
    2c50:	2300      	moveq	r3, #0
    2c52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    2c56:	687b      	ldr	r3, [r7, #4]
    2c58:	7a5b      	ldrb	r3, [r3, #9]
    2c5a:	2b00      	cmp	r3, #0
    2c5c:	bf14      	ite	ne
    2c5e:	2301      	movne	r3, #1
    2c60:	2300      	moveq	r3, #0
    2c62:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    2c66:	687b      	ldr	r3, [r7, #4]
    2c68:	685b      	ldr	r3, [r3, #4]
    2c6a:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    2c6c:	f997 301f 	ldrsb.w	r3, [r7, #31]
    2c70:	2b00      	cmp	r3, #0
    2c72:	da02      	bge.n	2c7a <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    2c74:	f06f 0311 	mvn.w	r3, #17
    2c78:	e077      	b.n	2d6a <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    2c7a:	f107 0308 	add.w	r3, r7, #8
    2c7e:	4618      	mov	r0, r3
    2c80:	4b3e      	ldr	r3, [pc, #248]	; (2d7c <usb_d_ep_transfer+0x15c>)
    2c82:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    2c84:	69bb      	ldr	r3, [r7, #24]
    2c86:	789b      	ldrb	r3, [r3, #2]
    2c88:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    2c8a:	7bfb      	ldrb	r3, [r7, #15]
    2c8c:	b2db      	uxtb	r3, r3
    2c8e:	2b01      	cmp	r3, #1
    2c90:	d10c      	bne.n	2cac <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    2c92:	69bb      	ldr	r3, [r7, #24]
    2c94:	2203      	movs	r2, #3
    2c96:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    2c98:	f107 0308 	add.w	r3, r7, #8
    2c9c:	4618      	mov	r0, r3
    2c9e:	4b38      	ldr	r3, [pc, #224]	; (2d80 <usb_d_ep_transfer+0x160>)
    2ca0:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2ca2:	69bb      	ldr	r3, [r7, #24]
    2ca4:	781b      	ldrb	r3, [r3, #0]
    2ca6:	2b00      	cmp	r3, #0
    2ca8:	d151      	bne.n	2d4e <usb_d_ep_transfer+0x12e>
    2caa:	e017      	b.n	2cdc <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    2cac:	f107 0308 	add.w	r3, r7, #8
    2cb0:	4618      	mov	r0, r3
    2cb2:	4b33      	ldr	r3, [pc, #204]	; (2d80 <usb_d_ep_transfer+0x160>)
    2cb4:	4798      	blx	r3
		switch (state) {
    2cb6:	7bfb      	ldrb	r3, [r7, #15]
    2cb8:	b2db      	uxtb	r3, r3
    2cba:	2b05      	cmp	r3, #5
    2cbc:	d004      	beq.n	2cc8 <usb_d_ep_transfer+0xa8>
    2cbe:	2b06      	cmp	r3, #6
    2cc0:	d004      	beq.n	2ccc <usb_d_ep_transfer+0xac>
    2cc2:	2b00      	cmp	r3, #0
    2cc4:	d005      	beq.n	2cd2 <usb_d_ep_transfer+0xb2>
    2cc6:	e007      	b.n	2cd8 <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    2cc8:	2302      	movs	r3, #2
    2cca:	e04e      	b.n	2d6a <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    2ccc:	f06f 030f 	mvn.w	r3, #15
    2cd0:	e04b      	b.n	2d6a <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    2cd2:	f06f 0312 	mvn.w	r3, #18
    2cd6:	e048      	b.n	2d6a <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    2cd8:	2301      	movs	r3, #1
    2cda:	e046      	b.n	2d6a <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    2cdc:	69bb      	ldr	r3, [r7, #24]
    2cde:	7c9b      	ldrb	r3, [r3, #18]
    2ce0:	b29a      	uxth	r2, r3
    2ce2:	69bb      	ldr	r3, [r7, #24]
    2ce4:	7cdb      	ldrb	r3, [r3, #19]
    2ce6:	b29b      	uxth	r3, r3
    2ce8:	021b      	lsls	r3, r3, #8
    2cea:	b29b      	uxth	r3, r3
    2cec:	4413      	add	r3, r2
    2cee:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    2cf0:	8afb      	ldrh	r3, [r7, #22]
    2cf2:	2b00      	cmp	r3, #0
    2cf4:	d10b      	bne.n	2d0e <usb_d_ep_transfer+0xee>
			dir                 = true;
    2cf6:	2301      	movs	r3, #1
    2cf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    2cfc:	2300      	movs	r3, #0
    2cfe:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    2d00:	2301      	movs	r3, #1
    2d02:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    2d06:	69bb      	ldr	r3, [r7, #24]
    2d08:	2204      	movs	r2, #4
    2d0a:	709a      	strb	r2, [r3, #2]
    2d0c:	e01f      	b.n	2d4e <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    2d0e:	69bb      	ldr	r3, [r7, #24]
    2d10:	7b1b      	ldrb	r3, [r3, #12]
    2d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
    2d16:	2b00      	cmp	r3, #0
    2d18:	bf14      	ite	ne
    2d1a:	2301      	movne	r3, #1
    2d1c:	2300      	moveq	r3, #0
    2d1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    2d22:	8afa      	ldrh	r2, [r7, #22]
    2d24:	6a3b      	ldr	r3, [r7, #32]
    2d26:	429a      	cmp	r2, r3
    2d28:	d201      	bcs.n	2d2e <usb_d_ep_transfer+0x10e>
				len = req_len;
    2d2a:	8afb      	ldrh	r3, [r7, #22]
    2d2c:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    2d2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    2d32:	2b00      	cmp	r3, #0
    2d34:	d008      	beq.n	2d48 <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    2d36:	8afa      	ldrh	r2, [r7, #22]
    2d38:	6a3b      	ldr	r3, [r7, #32]
    2d3a:	429a      	cmp	r2, r3
    2d3c:	bf8c      	ite	hi
    2d3e:	2301      	movhi	r3, #1
    2d40:	2300      	movls	r3, #0
    2d42:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    2d46:	e002      	b.n	2d4e <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    2d48:	2300      	movs	r3, #0
    2d4a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    2d4e:	687b      	ldr	r3, [r7, #4]
    2d50:	7a18      	ldrb	r0, [r3, #8]
    2d52:	687b      	ldr	r3, [r7, #4]
    2d54:	681a      	ldr	r2, [r3, #0]
    2d56:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    2d5a:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    2d5e:	9300      	str	r3, [sp, #0]
    2d60:	6a3b      	ldr	r3, [r7, #32]
    2d62:	4c08      	ldr	r4, [pc, #32]	; (2d84 <usb_d_ep_transfer+0x164>)
    2d64:	47a0      	blx	r4
    2d66:	6138      	str	r0, [r7, #16]
	return rc;
    2d68:	693b      	ldr	r3, [r7, #16]
}
    2d6a:	4618      	mov	r0, r3
    2d6c:	372c      	adds	r7, #44	; 0x2c
    2d6e:	46bd      	mov	sp, r7
    2d70:	bd90      	pop	{r4, r7, pc}
    2d72:	bf00      	nop
    2d74:	000025dd 	.word	0x000025dd
    2d78:	20000ad0 	.word	0x20000ad0
    2d7c:	0000a979 	.word	0x0000a979
    2d80:	0000a99f 	.word	0x0000a99f
    2d84:	0000265d 	.word	0x0000265d

00002d88 <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    2d88:	b580      	push	{r7, lr}
    2d8a:	b086      	sub	sp, #24
    2d8c:	af00      	add	r7, sp, #0
    2d8e:	4603      	mov	r3, r0
    2d90:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2d92:	79fb      	ldrb	r3, [r7, #7]
    2d94:	4618      	mov	r0, r3
    2d96:	4b1a      	ldr	r3, [pc, #104]	; (2e00 <_usb_d_ep_halt_clr+0x78>)
    2d98:	4798      	blx	r3
    2d9a:	4603      	mov	r3, r0
    2d9c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2d9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2da2:	015b      	lsls	r3, r3, #5
    2da4:	4a17      	ldr	r2, [pc, #92]	; (2e04 <_usb_d_ep_halt_clr+0x7c>)
    2da6:	4413      	add	r3, r2
    2da8:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    2daa:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2dae:	2b00      	cmp	r3, #0
    2db0:	da02      	bge.n	2db8 <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    2db2:	f06f 0311 	mvn.w	r3, #17
    2db6:	e01f      	b.n	2df8 <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    2db8:	79fb      	ldrb	r3, [r7, #7]
    2dba:	2102      	movs	r1, #2
    2dbc:	4618      	mov	r0, r3
    2dbe:	4b12      	ldr	r3, [pc, #72]	; (2e08 <_usb_d_ep_halt_clr+0x80>)
    2dc0:	4798      	blx	r3
    2dc2:	4603      	mov	r3, r0
    2dc4:	2b00      	cmp	r3, #0
    2dc6:	d016      	beq.n	2df6 <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2dc8:	79fb      	ldrb	r3, [r7, #7]
    2dca:	2100      	movs	r1, #0
    2dcc:	4618      	mov	r0, r3
    2dce:	4b0e      	ldr	r3, [pc, #56]	; (2e08 <_usb_d_ep_halt_clr+0x80>)
    2dd0:	4798      	blx	r3
    2dd2:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    2dd4:	68fb      	ldr	r3, [r7, #12]
    2dd6:	2b00      	cmp	r3, #0
    2dd8:	da01      	bge.n	2dde <_usb_d_ep_halt_clr+0x56>
			return rc;
    2dda:	68fb      	ldr	r3, [r7, #12]
    2ddc:	e00c      	b.n	2df8 <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    2dde:	693b      	ldr	r3, [r7, #16]
    2de0:	2201      	movs	r2, #1
    2de2:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    2de4:	693b      	ldr	r3, [r7, #16]
    2de6:	2203      	movs	r2, #3
    2de8:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    2dea:	693b      	ldr	r3, [r7, #16]
    2dec:	69db      	ldr	r3, [r3, #28]
    2dee:	79f8      	ldrb	r0, [r7, #7]
    2df0:	2200      	movs	r2, #0
    2df2:	2103      	movs	r1, #3
    2df4:	4798      	blx	r3
	}
	return ERR_NONE;
    2df6:	2300      	movs	r3, #0
}
    2df8:	4618      	mov	r0, r3
    2dfa:	3718      	adds	r7, #24
    2dfc:	46bd      	mov	sp, r7
    2dfe:	bd80      	pop	{r7, pc}
    2e00:	000025dd 	.word	0x000025dd
    2e04:	20000ad0 	.word	0x20000ad0
    2e08:	00009dd1 	.word	0x00009dd1

00002e0c <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    2e0c:	b580      	push	{r7, lr}
    2e0e:	b082      	sub	sp, #8
    2e10:	af00      	add	r7, sp, #0
    2e12:	4603      	mov	r3, r0
    2e14:	460a      	mov	r2, r1
    2e16:	71fb      	strb	r3, [r7, #7]
    2e18:	4613      	mov	r3, r2
    2e1a:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    2e1c:	79bb      	ldrb	r3, [r7, #6]
    2e1e:	2b00      	cmp	r3, #0
    2e20:	d105      	bne.n	2e2e <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    2e22:	79fb      	ldrb	r3, [r7, #7]
    2e24:	4618      	mov	r0, r3
    2e26:	4b0c      	ldr	r3, [pc, #48]	; (2e58 <usb_d_ep_halt+0x4c>)
    2e28:	4798      	blx	r3
    2e2a:	4603      	mov	r3, r0
    2e2c:	e00f      	b.n	2e4e <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    2e2e:	79bb      	ldrb	r3, [r7, #6]
    2e30:	2b01      	cmp	r3, #1
    2e32:	d106      	bne.n	2e42 <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2e34:	79fb      	ldrb	r3, [r7, #7]
    2e36:	2101      	movs	r1, #1
    2e38:	4618      	mov	r0, r3
    2e3a:	4b08      	ldr	r3, [pc, #32]	; (2e5c <usb_d_ep_halt+0x50>)
    2e3c:	4798      	blx	r3
    2e3e:	4603      	mov	r3, r0
    2e40:	e005      	b.n	2e4e <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    2e42:	79fb      	ldrb	r3, [r7, #7]
    2e44:	2102      	movs	r1, #2
    2e46:	4618      	mov	r0, r3
    2e48:	4b04      	ldr	r3, [pc, #16]	; (2e5c <usb_d_ep_halt+0x50>)
    2e4a:	4798      	blx	r3
    2e4c:	4603      	mov	r3, r0
	}
}
    2e4e:	4618      	mov	r0, r3
    2e50:	3708      	adds	r7, #8
    2e52:	46bd      	mov	sp, r7
    2e54:	bd80      	pop	{r7, pc}
    2e56:	bf00      	nop
    2e58:	00002d89 	.word	0x00002d89
    2e5c:	00009dd1 	.word	0x00009dd1

00002e60 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    2e60:	b580      	push	{r7, lr}
    2e62:	b086      	sub	sp, #24
    2e64:	af00      	add	r7, sp, #0
    2e66:	4603      	mov	r3, r0
    2e68:	603a      	str	r2, [r7, #0]
    2e6a:	71fb      	strb	r3, [r7, #7]
    2e6c:	460b      	mov	r3, r1
    2e6e:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2e70:	79fb      	ldrb	r3, [r7, #7]
    2e72:	4618      	mov	r0, r3
    2e74:	4b16      	ldr	r3, [pc, #88]	; (2ed0 <usb_d_ep_register_callback+0x70>)
    2e76:	4798      	blx	r3
    2e78:	4603      	mov	r3, r0
    2e7a:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2e7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2e80:	015b      	lsls	r3, r3, #5
    2e82:	4a14      	ldr	r2, [pc, #80]	; (2ed4 <usb_d_ep_register_callback+0x74>)
    2e84:	4413      	add	r3, r2
    2e86:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    2e88:	683b      	ldr	r3, [r7, #0]
    2e8a:	2b00      	cmp	r3, #0
    2e8c:	d001      	beq.n	2e92 <usb_d_ep_register_callback+0x32>
    2e8e:	683b      	ldr	r3, [r7, #0]
    2e90:	e000      	b.n	2e94 <usb_d_ep_register_callback+0x34>
    2e92:	4b11      	ldr	r3, [pc, #68]	; (2ed8 <usb_d_ep_register_callback+0x78>)
    2e94:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    2e96:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2e9a:	2b00      	cmp	r3, #0
    2e9c:	db13      	blt.n	2ec6 <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    2e9e:	79bb      	ldrb	r3, [r7, #6]
    2ea0:	2b01      	cmp	r3, #1
    2ea2:	d008      	beq.n	2eb6 <usb_d_ep_register_callback+0x56>
    2ea4:	2b02      	cmp	r3, #2
    2ea6:	d00a      	beq.n	2ebe <usb_d_ep_register_callback+0x5e>
    2ea8:	2b00      	cmp	r3, #0
    2eaa:	d000      	beq.n	2eae <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    2eac:	e00c      	b.n	2ec8 <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    2eae:	693b      	ldr	r3, [r7, #16]
    2eb0:	68fa      	ldr	r2, [r7, #12]
    2eb2:	615a      	str	r2, [r3, #20]
		break;
    2eb4:	e008      	b.n	2ec8 <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    2eb6:	693b      	ldr	r3, [r7, #16]
    2eb8:	68fa      	ldr	r2, [r7, #12]
    2eba:	619a      	str	r2, [r3, #24]
		break;
    2ebc:	e004      	b.n	2ec8 <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    2ebe:	693b      	ldr	r3, [r7, #16]
    2ec0:	68fa      	ldr	r2, [r7, #12]
    2ec2:	61da      	str	r2, [r3, #28]
		break;
    2ec4:	e000      	b.n	2ec8 <usb_d_ep_register_callback+0x68>
		return;
    2ec6:	bf00      	nop
	}
}
    2ec8:	3718      	adds	r7, #24
    2eca:	46bd      	mov	sp, r7
    2ecc:	bd80      	pop	{r7, pc}
    2ece:	bf00      	nop
    2ed0:	000025dd 	.word	0x000025dd
    2ed4:	20000ad0 	.word	0x20000ad0
    2ed8:	000026b1 	.word	0x000026b1

00002edc <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    2edc:	b480      	push	{r7}
    2ede:	b085      	sub	sp, #20
    2ee0:	af00      	add	r7, sp, #0
    2ee2:	4603      	mov	r3, r0
    2ee4:	60b9      	str	r1, [r7, #8]
    2ee6:	607a      	str	r2, [r7, #4]
    2ee8:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    2eea:	7bfb      	ldrb	r3, [r7, #15]
    2eec:	f083 0301 	eor.w	r3, r3, #1
    2ef0:	b2db      	uxtb	r3, r3
    2ef2:	2b00      	cmp	r3, #0
    2ef4:	d000      	beq.n	2ef8 <assert+0x1c>
		__asm("BKPT #0");
    2ef6:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    2ef8:	bf00      	nop
    2efa:	3714      	adds	r7, #20
    2efc:	46bd      	mov	sp, r7
    2efe:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f02:	4770      	bx	lr

00002f04 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    2f04:	b480      	push	{r7}
    2f06:	b085      	sub	sp, #20
    2f08:	af00      	add	r7, sp, #0
    2f0a:	6078      	str	r0, [r7, #4]
    2f0c:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    2f0e:	687b      	ldr	r3, [r7, #4]
    2f10:	681b      	ldr	r3, [r3, #0]
    2f12:	60fb      	str	r3, [r7, #12]
    2f14:	e008      	b.n	2f28 <is_list_element+0x24>
		if (it == element) {
    2f16:	68fa      	ldr	r2, [r7, #12]
    2f18:	683b      	ldr	r3, [r7, #0]
    2f1a:	429a      	cmp	r2, r3
    2f1c:	d101      	bne.n	2f22 <is_list_element+0x1e>
			return true;
    2f1e:	2301      	movs	r3, #1
    2f20:	e006      	b.n	2f30 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    2f22:	68fb      	ldr	r3, [r7, #12]
    2f24:	681b      	ldr	r3, [r3, #0]
    2f26:	60fb      	str	r3, [r7, #12]
    2f28:	68fb      	ldr	r3, [r7, #12]
    2f2a:	2b00      	cmp	r3, #0
    2f2c:	d1f3      	bne.n	2f16 <is_list_element+0x12>
		}
	}

	return false;
    2f2e:	2300      	movs	r3, #0
}
    2f30:	4618      	mov	r0, r3
    2f32:	3714      	adds	r7, #20
    2f34:	46bd      	mov	sp, r7
    2f36:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f3a:	4770      	bx	lr

00002f3c <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    2f3c:	b580      	push	{r7, lr}
    2f3e:	b082      	sub	sp, #8
    2f40:	af00      	add	r7, sp, #0
    2f42:	6078      	str	r0, [r7, #4]
    2f44:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    2f46:	6839      	ldr	r1, [r7, #0]
    2f48:	6878      	ldr	r0, [r7, #4]
    2f4a:	4b0f      	ldr	r3, [pc, #60]	; (2f88 <list_insert_as_head+0x4c>)
    2f4c:	4798      	blx	r3
    2f4e:	4603      	mov	r3, r0
    2f50:	2b00      	cmp	r3, #0
    2f52:	bf14      	ite	ne
    2f54:	2301      	movne	r3, #1
    2f56:	2300      	moveq	r3, #0
    2f58:	b2db      	uxtb	r3, r3
    2f5a:	f083 0301 	eor.w	r3, r3, #1
    2f5e:	b2db      	uxtb	r3, r3
    2f60:	f003 0301 	and.w	r3, r3, #1
    2f64:	b2db      	uxtb	r3, r3
    2f66:	2239      	movs	r2, #57	; 0x39
    2f68:	4908      	ldr	r1, [pc, #32]	; (2f8c <list_insert_as_head+0x50>)
    2f6a:	4618      	mov	r0, r3
    2f6c:	4b08      	ldr	r3, [pc, #32]	; (2f90 <list_insert_as_head+0x54>)
    2f6e:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    2f70:	687b      	ldr	r3, [r7, #4]
    2f72:	681a      	ldr	r2, [r3, #0]
    2f74:	683b      	ldr	r3, [r7, #0]
    2f76:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    2f78:	687b      	ldr	r3, [r7, #4]
    2f7a:	683a      	ldr	r2, [r7, #0]
    2f7c:	601a      	str	r2, [r3, #0]
}
    2f7e:	bf00      	nop
    2f80:	3708      	adds	r7, #8
    2f82:	46bd      	mov	sp, r7
    2f84:	bd80      	pop	{r7, pc}
    2f86:	bf00      	nop
    2f88:	00002f05 	.word	0x00002f05
    2f8c:	00012f98 	.word	0x00012f98
    2f90:	00002edd 	.word	0x00002edd

00002f94 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    2f94:	b480      	push	{r7}
    2f96:	b083      	sub	sp, #12
    2f98:	af00      	add	r7, sp, #0
    2f9a:	6078      	str	r0, [r7, #4]
    2f9c:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    2f9e:	687b      	ldr	r3, [r7, #4]
    2fa0:	681a      	ldr	r2, [r3, #0]
    2fa2:	683b      	ldr	r3, [r7, #0]
    2fa4:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    2fa6:	687b      	ldr	r3, [r7, #4]
    2fa8:	683a      	ldr	r2, [r7, #0]
    2faa:	601a      	str	r2, [r3, #0]
}
    2fac:	bf00      	nop
    2fae:	370c      	adds	r7, #12
    2fb0:	46bd      	mov	sp, r7
    2fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
    2fb6:	4770      	bx	lr

00002fb8 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    2fb8:	b580      	push	{r7, lr}
    2fba:	b084      	sub	sp, #16
    2fbc:	af00      	add	r7, sp, #0
    2fbe:	6078      	str	r0, [r7, #4]
    2fc0:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    2fc2:	687b      	ldr	r3, [r7, #4]
    2fc4:	681b      	ldr	r3, [r3, #0]
    2fc6:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    2fc8:	6839      	ldr	r1, [r7, #0]
    2fca:	6878      	ldr	r0, [r7, #4]
    2fcc:	4b16      	ldr	r3, [pc, #88]	; (3028 <list_insert_at_end+0x70>)
    2fce:	4798      	blx	r3
    2fd0:	4603      	mov	r3, r0
    2fd2:	2b00      	cmp	r3, #0
    2fd4:	bf14      	ite	ne
    2fd6:	2301      	movne	r3, #1
    2fd8:	2300      	moveq	r3, #0
    2fda:	b2db      	uxtb	r3, r3
    2fdc:	f083 0301 	eor.w	r3, r3, #1
    2fe0:	b2db      	uxtb	r3, r3
    2fe2:	f003 0301 	and.w	r3, r3, #1
    2fe6:	b2db      	uxtb	r3, r3
    2fe8:	224f      	movs	r2, #79	; 0x4f
    2fea:	4910      	ldr	r1, [pc, #64]	; (302c <list_insert_at_end+0x74>)
    2fec:	4618      	mov	r0, r3
    2fee:	4b10      	ldr	r3, [pc, #64]	; (3030 <list_insert_at_end+0x78>)
    2ff0:	4798      	blx	r3

	if (!list->head) {
    2ff2:	687b      	ldr	r3, [r7, #4]
    2ff4:	681b      	ldr	r3, [r3, #0]
    2ff6:	2b00      	cmp	r3, #0
    2ff8:	d109      	bne.n	300e <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    2ffa:	687b      	ldr	r3, [r7, #4]
    2ffc:	683a      	ldr	r2, [r7, #0]
    2ffe:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    3000:	683b      	ldr	r3, [r7, #0]
    3002:	2200      	movs	r2, #0
    3004:	601a      	str	r2, [r3, #0]
		return;
    3006:	e00c      	b.n	3022 <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    3008:	68fb      	ldr	r3, [r7, #12]
    300a:	681b      	ldr	r3, [r3, #0]
    300c:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    300e:	68fb      	ldr	r3, [r7, #12]
    3010:	681b      	ldr	r3, [r3, #0]
    3012:	2b00      	cmp	r3, #0
    3014:	d1f8      	bne.n	3008 <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    3016:	68fb      	ldr	r3, [r7, #12]
    3018:	683a      	ldr	r2, [r7, #0]
    301a:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    301c:	683b      	ldr	r3, [r7, #0]
    301e:	2200      	movs	r2, #0
    3020:	601a      	str	r2, [r3, #0]
}
    3022:	3710      	adds	r7, #16
    3024:	46bd      	mov	sp, r7
    3026:	bd80      	pop	{r7, pc}
    3028:	00002f05 	.word	0x00002f05
    302c:	00012f98 	.word	0x00012f98
    3030:	00002edd 	.word	0x00002edd

00003034 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    3034:	b480      	push	{r7}
    3036:	b085      	sub	sp, #20
    3038:	af00      	add	r7, sp, #0
    303a:	6078      	str	r0, [r7, #4]
	if (list->head) {
    303c:	687b      	ldr	r3, [r7, #4]
    303e:	681b      	ldr	r3, [r3, #0]
    3040:	2b00      	cmp	r3, #0
    3042:	d009      	beq.n	3058 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    3044:	687b      	ldr	r3, [r7, #4]
    3046:	681b      	ldr	r3, [r3, #0]
    3048:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    304a:	687b      	ldr	r3, [r7, #4]
    304c:	681b      	ldr	r3, [r3, #0]
    304e:	681a      	ldr	r2, [r3, #0]
    3050:	687b      	ldr	r3, [r7, #4]
    3052:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    3054:	68fb      	ldr	r3, [r7, #12]
    3056:	e000      	b.n	305a <list_remove_head+0x26>
	}

	return NULL;
    3058:	2300      	movs	r3, #0
}
    305a:	4618      	mov	r0, r3
    305c:	3714      	adds	r7, #20
    305e:	46bd      	mov	sp, r7
    3060:	f85d 7b04 	ldr.w	r7, [sp], #4
    3064:	4770      	bx	lr
	...

00003068 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    3068:	b480      	push	{r7}
    306a:	b083      	sub	sp, #12
    306c:	af00      	add	r7, sp, #0
    306e:	4603      	mov	r3, r0
    3070:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3072:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3076:	2b00      	cmp	r3, #0
    3078:	db0b      	blt.n	3092 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    307a:	4909      	ldr	r1, [pc, #36]	; (30a0 <__NVIC_EnableIRQ+0x38>)
    307c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3080:	095b      	lsrs	r3, r3, #5
    3082:	88fa      	ldrh	r2, [r7, #6]
    3084:	f002 021f 	and.w	r2, r2, #31
    3088:	2001      	movs	r0, #1
    308a:	fa00 f202 	lsl.w	r2, r0, r2
    308e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    3092:	bf00      	nop
    3094:	370c      	adds	r7, #12
    3096:	46bd      	mov	sp, r7
    3098:	f85d 7b04 	ldr.w	r7, [sp], #4
    309c:	4770      	bx	lr
    309e:	bf00      	nop
    30a0:	e000e100 	.word	0xe000e100

000030a4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    30a4:	b480      	push	{r7}
    30a6:	b083      	sub	sp, #12
    30a8:	af00      	add	r7, sp, #0
    30aa:	4603      	mov	r3, r0
    30ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    30ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    30b2:	2b00      	cmp	r3, #0
    30b4:	db10      	blt.n	30d8 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    30b6:	490b      	ldr	r1, [pc, #44]	; (30e4 <__NVIC_DisableIRQ+0x40>)
    30b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    30bc:	095b      	lsrs	r3, r3, #5
    30be:	88fa      	ldrh	r2, [r7, #6]
    30c0:	f002 021f 	and.w	r2, r2, #31
    30c4:	2001      	movs	r0, #1
    30c6:	fa00 f202 	lsl.w	r2, r0, r2
    30ca:	3320      	adds	r3, #32
    30cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    30d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    30d4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    30d8:	bf00      	nop
    30da:	370c      	adds	r7, #12
    30dc:	46bd      	mov	sp, r7
    30de:	f85d 7b04 	ldr.w	r7, [sp], #4
    30e2:	4770      	bx	lr
    30e4:	e000e100 	.word	0xe000e100

000030e8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    30e8:	b480      	push	{r7}
    30ea:	b083      	sub	sp, #12
    30ec:	af00      	add	r7, sp, #0
    30ee:	4603      	mov	r3, r0
    30f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    30f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    30f6:	2b00      	cmp	r3, #0
    30f8:	db0c      	blt.n	3114 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    30fa:	4909      	ldr	r1, [pc, #36]	; (3120 <__NVIC_ClearPendingIRQ+0x38>)
    30fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3100:	095b      	lsrs	r3, r3, #5
    3102:	88fa      	ldrh	r2, [r7, #6]
    3104:	f002 021f 	and.w	r2, r2, #31
    3108:	2001      	movs	r0, #1
    310a:	fa00 f202 	lsl.w	r2, r0, r2
    310e:	3360      	adds	r3, #96	; 0x60
    3110:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    3114:	bf00      	nop
    3116:	370c      	adds	r7, #12
    3118:	46bd      	mov	sp, r7
    311a:	f85d 7b04 	ldr.w	r7, [sp], #4
    311e:	4770      	bx	lr
    3120:	e000e100 	.word	0xe000e100

00003124 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    3124:	b480      	push	{r7}
    3126:	b083      	sub	sp, #12
    3128:	af00      	add	r7, sp, #0
    312a:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    312c:	687b      	ldr	r3, [r7, #4]
    312e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3130:	095b      	lsrs	r3, r3, #5
    3132:	f003 0301 	and.w	r3, r3, #1
    3136:	2b00      	cmp	r3, #0
    3138:	bf14      	ite	ne
    313a:	2301      	movne	r3, #1
    313c:	2300      	moveq	r3, #0
    313e:	b2db      	uxtb	r3, r3
}
    3140:	4618      	mov	r0, r3
    3142:	370c      	adds	r7, #12
    3144:	46bd      	mov	sp, r7
    3146:	f85d 7b04 	ldr.w	r7, [sp], #4
    314a:	4770      	bx	lr

0000314c <hri_can_read_RXF0S_F0FL_bf>:
{
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0FL(mask)) >> CAN_RXF0S_F0FL_Pos;
}

static inline hri_can_rxf0s_reg_t hri_can_read_RXF0S_F0FL_bf(const void *const hw)
{
    314c:	b480      	push	{r7}
    314e:	b083      	sub	sp, #12
    3150:	af00      	add	r7, sp, #0
    3152:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0FL_Msk) >> CAN_RXF0S_F0FL_Pos;
    3154:	687b      	ldr	r3, [r7, #4]
    3156:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    315a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
    315e:	4618      	mov	r0, r3
    3160:	370c      	adds	r7, #12
    3162:	46bd      	mov	sp, r7
    3164:	f85d 7b04 	ldr.w	r7, [sp], #4
    3168:	4770      	bx	lr

0000316a <hri_can_read_RXF0S_F0GI_bf>:
{
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0GI(mask)) >> CAN_RXF0S_F0GI_Pos;
}

static inline hri_can_rxf0s_reg_t hri_can_read_RXF0S_F0GI_bf(const void *const hw)
{
    316a:	b480      	push	{r7}
    316c:	b083      	sub	sp, #12
    316e:	af00      	add	r7, sp, #0
    3170:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0GI_Msk) >> CAN_RXF0S_F0GI_Pos;
    3172:	687b      	ldr	r3, [r7, #4]
    3174:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    3178:	0a1b      	lsrs	r3, r3, #8
    317a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
    317e:	4618      	mov	r0, r3
    3180:	370c      	adds	r7, #12
    3182:	46bd      	mov	sp, r7
    3184:	f85d 7b04 	ldr.w	r7, [sp], #4
    3188:	4770      	bx	lr

0000318a <hri_can_get_TXFQS_TFQF_bit>:
{
	return ((Can *)hw)->RXF1S.reg;
}

static inline bool hri_can_get_TXFQS_TFQF_bit(const void *const hw)
{
    318a:	b480      	push	{r7}
    318c:	b083      	sub	sp, #12
    318e:	af00      	add	r7, sp, #0
    3190:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFQF) >> CAN_TXFQS_TFQF_Pos;
    3192:	687b      	ldr	r3, [r7, #4]
    3194:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    3198:	0d5b      	lsrs	r3, r3, #21
    319a:	f003 0301 	and.w	r3, r3, #1
    319e:	2b00      	cmp	r3, #0
    31a0:	bf14      	ite	ne
    31a2:	2301      	movne	r3, #1
    31a4:	2300      	moveq	r3, #0
    31a6:	b2db      	uxtb	r3, r3
}
    31a8:	4618      	mov	r0, r3
    31aa:	370c      	adds	r7, #12
    31ac:	46bd      	mov	sp, r7
    31ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    31b2:	4770      	bx	lr

000031b4 <hri_can_read_TXFQS_TFQPI_bf>:
{
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFQPI(mask)) >> CAN_TXFQS_TFQPI_Pos;
}

static inline hri_can_txfqs_reg_t hri_can_read_TXFQS_TFQPI_bf(const void *const hw)
{
    31b4:	b480      	push	{r7}
    31b6:	b083      	sub	sp, #12
    31b8:	af00      	add	r7, sp, #0
    31ba:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFQPI_Msk) >> CAN_TXFQS_TFQPI_Pos;
    31bc:	687b      	ldr	r3, [r7, #4]
    31be:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    31c2:	0c1b      	lsrs	r3, r3, #16
    31c4:	f003 031f 	and.w	r3, r3, #31
}
    31c8:	4618      	mov	r0, r3
    31ca:	370c      	adds	r7, #12
    31cc:	46bd      	mov	sp, r7
    31ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    31d2:	4770      	bx	lr

000031d4 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    31d4:	b480      	push	{r7}
    31d6:	b083      	sub	sp, #12
    31d8:	af00      	add	r7, sp, #0
    31da:	6078      	str	r0, [r7, #4]
    31dc:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    31de:	687b      	ldr	r3, [r7, #4]
    31e0:	683a      	ldr	r2, [r7, #0]
    31e2:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    31e4:	bf00      	nop
    31e6:	370c      	adds	r7, #12
    31e8:	46bd      	mov	sp, r7
    31ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    31ee:	4770      	bx	lr

000031f0 <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    31f0:	b480      	push	{r7}
    31f2:	b083      	sub	sp, #12
    31f4:	af00      	add	r7, sp, #0
    31f6:	6078      	str	r0, [r7, #4]
    31f8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    31fa:	687b      	ldr	r3, [r7, #4]
    31fc:	683a      	ldr	r2, [r7, #0]
    31fe:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3200:	bf00      	nop
    3202:	370c      	adds	r7, #12
    3204:	46bd      	mov	sp, r7
    3206:	f85d 7b04 	ldr.w	r7, [sp], #4
    320a:	4770      	bx	lr

0000320c <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    320c:	b480      	push	{r7}
    320e:	b083      	sub	sp, #12
    3210:	af00      	add	r7, sp, #0
    3212:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    3214:	687b      	ldr	r3, [r7, #4]
    3216:	699b      	ldr	r3, [r3, #24]
    3218:	f043 0201 	orr.w	r2, r3, #1
    321c:	687b      	ldr	r3, [r7, #4]
    321e:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3220:	bf00      	nop
    3222:	370c      	adds	r7, #12
    3224:	46bd      	mov	sp, r7
    3226:	f85d 7b04 	ldr.w	r7, [sp], #4
    322a:	4770      	bx	lr

0000322c <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    322c:	b480      	push	{r7}
    322e:	b085      	sub	sp, #20
    3230:	af00      	add	r7, sp, #0
    3232:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    3234:	687b      	ldr	r3, [r7, #4]
    3236:	699b      	ldr	r3, [r3, #24]
    3238:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    323a:	68fb      	ldr	r3, [r7, #12]
    323c:	f003 0301 	and.w	r3, r3, #1
    3240:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    3242:	68fb      	ldr	r3, [r7, #12]
    3244:	2b00      	cmp	r3, #0
    3246:	bf14      	ite	ne
    3248:	2301      	movne	r3, #1
    324a:	2300      	moveq	r3, #0
    324c:	b2db      	uxtb	r3, r3
}
    324e:	4618      	mov	r0, r3
    3250:	3714      	adds	r7, #20
    3252:	46bd      	mov	sp, r7
    3254:	f85d 7b04 	ldr.w	r7, [sp], #4
    3258:	4770      	bx	lr

0000325a <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    325a:	b480      	push	{r7}
    325c:	b083      	sub	sp, #12
    325e:	af00      	add	r7, sp, #0
    3260:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    3262:	687b      	ldr	r3, [r7, #4]
    3264:	699b      	ldr	r3, [r3, #24]
    3266:	f023 0201 	bic.w	r2, r3, #1
    326a:	687b      	ldr	r3, [r7, #4]
    326c:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    326e:	bf00      	nop
    3270:	370c      	adds	r7, #12
    3272:	46bd      	mov	sp, r7
    3274:	f85d 7b04 	ldr.w	r7, [sp], #4
    3278:	4770      	bx	lr

0000327a <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    327a:	b480      	push	{r7}
    327c:	b083      	sub	sp, #12
    327e:	af00      	add	r7, sp, #0
    3280:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    3282:	687b      	ldr	r3, [r7, #4]
    3284:	699b      	ldr	r3, [r3, #24]
    3286:	f043 0202 	orr.w	r2, r3, #2
    328a:	687b      	ldr	r3, [r7, #4]
    328c:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    328e:	bf00      	nop
    3290:	370c      	adds	r7, #12
    3292:	46bd      	mov	sp, r7
    3294:	f85d 7b04 	ldr.w	r7, [sp], #4
    3298:	4770      	bx	lr

0000329a <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    329a:	b480      	push	{r7}
    329c:	b083      	sub	sp, #12
    329e:	af00      	add	r7, sp, #0
    32a0:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    32a2:	687b      	ldr	r3, [r7, #4]
    32a4:	699b      	ldr	r3, [r3, #24]
    32a6:	f023 0202 	bic.w	r2, r3, #2
    32aa:	687b      	ldr	r3, [r7, #4]
    32ac:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    32ae:	bf00      	nop
    32b0:	370c      	adds	r7, #12
    32b2:	46bd      	mov	sp, r7
    32b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    32b8:	4770      	bx	lr

000032ba <hri_can_get_CCCR_FDOE_bit>:
	((Can *)hw)->CCCR.reg |= CAN_CCCR_FDOE;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_can_get_CCCR_FDOE_bit(const void *const hw)
{
    32ba:	b480      	push	{r7}
    32bc:	b085      	sub	sp, #20
    32be:	af00      	add	r7, sp, #0
    32c0:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    32c2:	687b      	ldr	r3, [r7, #4]
    32c4:	699b      	ldr	r3, [r3, #24]
    32c6:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_FDOE) >> CAN_CCCR_FDOE_Pos;
    32c8:	68fb      	ldr	r3, [r7, #12]
    32ca:	0a1b      	lsrs	r3, r3, #8
    32cc:	f003 0301 	and.w	r3, r3, #1
    32d0:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    32d2:	68fb      	ldr	r3, [r7, #12]
    32d4:	2b00      	cmp	r3, #0
    32d6:	bf14      	ite	ne
    32d8:	2301      	movne	r3, #1
    32da:	2300      	moveq	r3, #0
    32dc:	b2db      	uxtb	r3, r3
}
    32de:	4618      	mov	r0, r3
    32e0:	3714      	adds	r7, #20
    32e2:	46bd      	mov	sp, r7
    32e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    32e8:	4770      	bx	lr

000032ea <hri_can_get_CCCR_BRSE_bit>:
	((Can *)hw)->CCCR.reg |= CAN_CCCR_BRSE;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_can_get_CCCR_BRSE_bit(const void *const hw)
{
    32ea:	b480      	push	{r7}
    32ec:	b085      	sub	sp, #20
    32ee:	af00      	add	r7, sp, #0
    32f0:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    32f2:	687b      	ldr	r3, [r7, #4]
    32f4:	699b      	ldr	r3, [r3, #24]
    32f6:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_BRSE) >> CAN_CCCR_BRSE_Pos;
    32f8:	68fb      	ldr	r3, [r7, #12]
    32fa:	0a5b      	lsrs	r3, r3, #9
    32fc:	f003 0301 	and.w	r3, r3, #1
    3300:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    3302:	68fb      	ldr	r3, [r7, #12]
    3304:	2b00      	cmp	r3, #0
    3306:	bf14      	ite	ne
    3308:	2301      	movne	r3, #1
    330a:	2300      	moveq	r3, #0
    330c:	b2db      	uxtb	r3, r3
}
    330e:	4618      	mov	r0, r3
    3310:	3714      	adds	r7, #20
    3312:	46bd      	mov	sp, r7
    3314:	f85d 7b04 	ldr.w	r7, [sp], #4
    3318:	4770      	bx	lr

0000331a <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    331a:	b480      	push	{r7}
    331c:	b083      	sub	sp, #12
    331e:	af00      	add	r7, sp, #0
    3320:	6078      	str	r0, [r7, #4]
    3322:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    3324:	687b      	ldr	r3, [r7, #4]
    3326:	699a      	ldr	r2, [r3, #24]
    3328:	683b      	ldr	r3, [r7, #0]
    332a:	431a      	orrs	r2, r3
    332c:	687b      	ldr	r3, [r7, #4]
    332e:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3330:	bf00      	nop
    3332:	370c      	adds	r7, #12
    3334:	46bd      	mov	sp, r7
    3336:	f85d 7b04 	ldr.w	r7, [sp], #4
    333a:	4770      	bx	lr

0000333c <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    333c:	b480      	push	{r7}
    333e:	b083      	sub	sp, #12
    3340:	af00      	add	r7, sp, #0
    3342:	6078      	str	r0, [r7, #4]
    3344:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    3346:	687b      	ldr	r3, [r7, #4]
    3348:	683a      	ldr	r2, [r7, #0]
    334a:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    334c:	bf00      	nop
    334e:	370c      	adds	r7, #12
    3350:	46bd      	mov	sp, r7
    3352:	f85d 7b04 	ldr.w	r7, [sp], #4
    3356:	4770      	bx	lr

00003358 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    3358:	b480      	push	{r7}
    335a:	b083      	sub	sp, #12
    335c:	af00      	add	r7, sp, #0
    335e:	6078      	str	r0, [r7, #4]
    3360:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    3362:	687b      	ldr	r3, [r7, #4]
    3364:	683a      	ldr	r2, [r7, #0]
    3366:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    3368:	bf00      	nop
    336a:	370c      	adds	r7, #12
    336c:	46bd      	mov	sp, r7
    336e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3372:	4770      	bx	lr

00003374 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    3374:	b480      	push	{r7}
    3376:	b083      	sub	sp, #12
    3378:	af00      	add	r7, sp, #0
    337a:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    337c:	687b      	ldr	r3, [r7, #4]
    337e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    3380:	4618      	mov	r0, r3
    3382:	370c      	adds	r7, #12
    3384:	46bd      	mov	sp, r7
    3386:	f85d 7b04 	ldr.w	r7, [sp], #4
    338a:	4770      	bx	lr

0000338c <hri_can_write_IE_RF0NE_bit>:
	tmp = (tmp & CAN_IE_RF0NE) >> CAN_IE_RF0NE_Pos;
	return (bool)tmp;
}

static inline void hri_can_write_IE_RF0NE_bit(const void *const hw, bool value)
{
    338c:	b480      	push	{r7}
    338e:	b085      	sub	sp, #20
    3390:	af00      	add	r7, sp, #0
    3392:	6078      	str	r0, [r7, #4]
    3394:	460b      	mov	r3, r1
    3396:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	CAN_CRITICAL_SECTION_ENTER();
	tmp = ((Can *)hw)->IE.reg;
    3398:	687b      	ldr	r3, [r7, #4]
    339a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    339c:	60fb      	str	r3, [r7, #12]
	tmp &= ~CAN_IE_RF0NE;
    339e:	68fb      	ldr	r3, [r7, #12]
    33a0:	f023 0301 	bic.w	r3, r3, #1
    33a4:	60fb      	str	r3, [r7, #12]
	tmp |= value << CAN_IE_RF0NE_Pos;
    33a6:	78fb      	ldrb	r3, [r7, #3]
    33a8:	68fa      	ldr	r2, [r7, #12]
    33aa:	4313      	orrs	r3, r2
    33ac:	60fb      	str	r3, [r7, #12]
	((Can *)hw)->IE.reg = tmp;
    33ae:	687b      	ldr	r3, [r7, #4]
    33b0:	68fa      	ldr	r2, [r7, #12]
    33b2:	655a      	str	r2, [r3, #84]	; 0x54
	CAN_CRITICAL_SECTION_LEAVE();
}
    33b4:	bf00      	nop
    33b6:	3714      	adds	r7, #20
    33b8:	46bd      	mov	sp, r7
    33ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    33be:	4770      	bx	lr

000033c0 <hri_can_write_IE_TCE_bit>:
	tmp = (tmp & CAN_IE_TCE) >> CAN_IE_TCE_Pos;
	return (bool)tmp;
}

static inline void hri_can_write_IE_TCE_bit(const void *const hw, bool value)
{
    33c0:	b480      	push	{r7}
    33c2:	b085      	sub	sp, #20
    33c4:	af00      	add	r7, sp, #0
    33c6:	6078      	str	r0, [r7, #4]
    33c8:	460b      	mov	r3, r1
    33ca:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	CAN_CRITICAL_SECTION_ENTER();
	tmp = ((Can *)hw)->IE.reg;
    33cc:	687b      	ldr	r3, [r7, #4]
    33ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    33d0:	60fb      	str	r3, [r7, #12]
	tmp &= ~CAN_IE_TCE;
    33d2:	68fb      	ldr	r3, [r7, #12]
    33d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    33d8:	60fb      	str	r3, [r7, #12]
	tmp |= value << CAN_IE_TCE_Pos;
    33da:	78fb      	ldrb	r3, [r7, #3]
    33dc:	025b      	lsls	r3, r3, #9
    33de:	461a      	mov	r2, r3
    33e0:	68fb      	ldr	r3, [r7, #12]
    33e2:	4313      	orrs	r3, r2
    33e4:	60fb      	str	r3, [r7, #12]
	((Can *)hw)->IE.reg = tmp;
    33e6:	687b      	ldr	r3, [r7, #4]
    33e8:	68fa      	ldr	r2, [r7, #12]
    33ea:	655a      	str	r2, [r3, #84]	; 0x54
	CAN_CRITICAL_SECTION_LEAVE();
}
    33ec:	bf00      	nop
    33ee:	3714      	adds	r7, #20
    33f0:	46bd      	mov	sp, r7
    33f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    33f6:	4770      	bx	lr

000033f8 <hri_can_get_IE_reg>:
	((Can *)hw)->IE.reg |= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ie_reg_t hri_can_get_IE_reg(const void *const hw, hri_can_ie_reg_t mask)
{
    33f8:	b480      	push	{r7}
    33fa:	b085      	sub	sp, #20
    33fc:	af00      	add	r7, sp, #0
    33fe:	6078      	str	r0, [r7, #4]
    3400:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Can *)hw)->IE.reg;
    3402:	687b      	ldr	r3, [r7, #4]
    3404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    3406:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    3408:	68fa      	ldr	r2, [r7, #12]
    340a:	683b      	ldr	r3, [r7, #0]
    340c:	4013      	ands	r3, r2
    340e:	60fb      	str	r3, [r7, #12]
	return tmp;
    3410:	68fb      	ldr	r3, [r7, #12]
}
    3412:	4618      	mov	r0, r3
    3414:	3714      	adds	r7, #20
    3416:	46bd      	mov	sp, r7
    3418:	f85d 7b04 	ldr.w	r7, [sp], #4
    341c:	4770      	bx	lr

0000341e <hri_can_write_IE_reg>:

static inline void hri_can_write_IE_reg(const void *const hw, hri_can_ie_reg_t data)
{
    341e:	b480      	push	{r7}
    3420:	b083      	sub	sp, #12
    3422:	af00      	add	r7, sp, #0
    3424:	6078      	str	r0, [r7, #4]
    3426:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IE.reg = data;
    3428:	687b      	ldr	r3, [r7, #4]
    342a:	683a      	ldr	r2, [r7, #0]
    342c:	655a      	str	r2, [r3, #84]	; 0x54
	CAN_CRITICAL_SECTION_LEAVE();
}
    342e:	bf00      	nop
    3430:	370c      	adds	r7, #12
    3432:	46bd      	mov	sp, r7
    3434:	f85d 7b04 	ldr.w	r7, [sp], #4
    3438:	4770      	bx	lr

0000343a <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    343a:	b480      	push	{r7}
    343c:	b083      	sub	sp, #12
    343e:	af00      	add	r7, sp, #0
    3440:	6078      	str	r0, [r7, #4]
    3442:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    3444:	687b      	ldr	r3, [r7, #4]
    3446:	683a      	ldr	r2, [r7, #0]
    3448:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    344a:	bf00      	nop
    344c:	370c      	adds	r7, #12
    344e:	46bd      	mov	sp, r7
    3450:	f85d 7b04 	ldr.w	r7, [sp], #4
    3454:	4770      	bx	lr

00003456 <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    3456:	b480      	push	{r7}
    3458:	b083      	sub	sp, #12
    345a:	af00      	add	r7, sp, #0
    345c:	6078      	str	r0, [r7, #4]
    345e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    3460:	687b      	ldr	r3, [r7, #4]
    3462:	683a      	ldr	r2, [r7, #0]
    3464:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    3468:	bf00      	nop
    346a:	370c      	adds	r7, #12
    346c:	46bd      	mov	sp, r7
    346e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3472:	4770      	bx	lr

00003474 <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    3474:	b480      	push	{r7}
    3476:	b083      	sub	sp, #12
    3478:	af00      	add	r7, sp, #0
    347a:	6078      	str	r0, [r7, #4]
    347c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    347e:	687b      	ldr	r3, [r7, #4]
    3480:	683a      	ldr	r2, [r7, #0]
    3482:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    3486:	bf00      	nop
    3488:	370c      	adds	r7, #12
    348a:	46bd      	mov	sp, r7
    348c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3490:	4770      	bx	lr

00003492 <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    3492:	b480      	push	{r7}
    3494:	b083      	sub	sp, #12
    3496:	af00      	add	r7, sp, #0
    3498:	6078      	str	r0, [r7, #4]
    349a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    349c:	687b      	ldr	r3, [r7, #4]
    349e:	683a      	ldr	r2, [r7, #0]
    34a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    34a4:	bf00      	nop
    34a6:	370c      	adds	r7, #12
    34a8:	46bd      	mov	sp, r7
    34aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    34ae:	4770      	bx	lr

000034b0 <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    34b0:	b480      	push	{r7}
    34b2:	b083      	sub	sp, #12
    34b4:	af00      	add	r7, sp, #0
    34b6:	6078      	str	r0, [r7, #4]
    34b8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    34ba:	687b      	ldr	r3, [r7, #4]
    34bc:	683a      	ldr	r2, [r7, #0]
    34be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    34c2:	bf00      	nop
    34c4:	370c      	adds	r7, #12
    34c6:	46bd      	mov	sp, r7
    34c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    34cc:	4770      	bx	lr

000034ce <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    34ce:	b480      	push	{r7}
    34d0:	b083      	sub	sp, #12
    34d2:	af00      	add	r7, sp, #0
    34d4:	6078      	str	r0, [r7, #4]
    34d6:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    34d8:	687b      	ldr	r3, [r7, #4]
    34da:	683a      	ldr	r2, [r7, #0]
    34dc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    34e0:	bf00      	nop
    34e2:	370c      	adds	r7, #12
    34e4:	46bd      	mov	sp, r7
    34e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    34ea:	4770      	bx	lr

000034ec <hri_can_write_RXF0A_F0AI_bf>:
	tmp = (tmp & CAN_RXF0A_F0AI(mask)) >> CAN_RXF0A_F0AI_Pos;
	return tmp;
}

static inline void hri_can_write_RXF0A_F0AI_bf(const void *const hw, hri_can_rxf0a_reg_t data)
{
    34ec:	b480      	push	{r7}
    34ee:	b085      	sub	sp, #20
    34f0:	af00      	add	r7, sp, #0
    34f2:	6078      	str	r0, [r7, #4]
    34f4:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	CAN_CRITICAL_SECTION_ENTER();
	tmp = ((Can *)hw)->RXF0A.reg;
    34f6:	687b      	ldr	r3, [r7, #4]
    34f8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    34fc:	60fb      	str	r3, [r7, #12]
	tmp &= ~CAN_RXF0A_F0AI_Msk;
    34fe:	68fb      	ldr	r3, [r7, #12]
    3500:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    3504:	60fb      	str	r3, [r7, #12]
	tmp |= CAN_RXF0A_F0AI(data);
    3506:	683b      	ldr	r3, [r7, #0]
    3508:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    350c:	68fa      	ldr	r2, [r7, #12]
    350e:	4313      	orrs	r3, r2
    3510:	60fb      	str	r3, [r7, #12]
	((Can *)hw)->RXF0A.reg = tmp;
    3512:	687b      	ldr	r3, [r7, #4]
    3514:	68fa      	ldr	r2, [r7, #12]
    3516:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	CAN_CRITICAL_SECTION_LEAVE();
}
    351a:	bf00      	nop
    351c:	3714      	adds	r7, #20
    351e:	46bd      	mov	sp, r7
    3520:	f85d 7b04 	ldr.w	r7, [sp], #4
    3524:	4770      	bx	lr

00003526 <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    3526:	b480      	push	{r7}
    3528:	b083      	sub	sp, #12
    352a:	af00      	add	r7, sp, #0
    352c:	6078      	str	r0, [r7, #4]
    352e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    3530:	687b      	ldr	r3, [r7, #4]
    3532:	683a      	ldr	r2, [r7, #0]
    3534:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    3538:	bf00      	nop
    353a:	370c      	adds	r7, #12
    353c:	46bd      	mov	sp, r7
    353e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3542:	4770      	bx	lr

00003544 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    3544:	b480      	push	{r7}
    3546:	b083      	sub	sp, #12
    3548:	af00      	add	r7, sp, #0
    354a:	6078      	str	r0, [r7, #4]
    354c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    354e:	687b      	ldr	r3, [r7, #4]
    3550:	683a      	ldr	r2, [r7, #0]
    3552:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3556:	bf00      	nop
    3558:	370c      	adds	r7, #12
    355a:	46bd      	mov	sp, r7
    355c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3560:	4770      	bx	lr

00003562 <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    3562:	b480      	push	{r7}
    3564:	b083      	sub	sp, #12
    3566:	af00      	add	r7, sp, #0
    3568:	6078      	str	r0, [r7, #4]
    356a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    356c:	687b      	ldr	r3, [r7, #4]
    356e:	683a      	ldr	r2, [r7, #0]
    3570:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    3574:	bf00      	nop
    3576:	370c      	adds	r7, #12
    3578:	46bd      	mov	sp, r7
    357a:	f85d 7b04 	ldr.w	r7, [sp], #4
    357e:	4770      	bx	lr

00003580 <hri_can_write_TXBAR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBAR_reg(const void *const hw, hri_can_txbar_reg_t data)
{
    3580:	b480      	push	{r7}
    3582:	b083      	sub	sp, #12
    3584:	af00      	add	r7, sp, #0
    3586:	6078      	str	r0, [r7, #4]
    3588:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBAR.reg = data;
    358a:	687b      	ldr	r3, [r7, #4]
    358c:	683a      	ldr	r2, [r7, #0]
    358e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3592:	bf00      	nop
    3594:	370c      	adds	r7, #12
    3596:	46bd      	mov	sp, r7
    3598:	f85d 7b04 	ldr.w	r7, [sp], #4
    359c:	4770      	bx	lr

0000359e <hri_can_write_TXBTIE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBTIE_reg(const void *const hw, hri_can_txbtie_reg_t data)
{
    359e:	b480      	push	{r7}
    35a0:	b083      	sub	sp, #12
    35a2:	af00      	add	r7, sp, #0
    35a4:	6078      	str	r0, [r7, #4]
    35a6:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBTIE.reg = data;
    35a8:	687b      	ldr	r3, [r7, #4]
    35aa:	683a      	ldr	r2, [r7, #0]
    35ac:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	CAN_CRITICAL_SECTION_LEAVE();
}
    35b0:	bf00      	nop
    35b2:	370c      	adds	r7, #12
    35b4:	46bd      	mov	sp, r7
    35b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    35ba:	4770      	bx	lr

000035bc <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    35bc:	b480      	push	{r7}
    35be:	b083      	sub	sp, #12
    35c0:	af00      	add	r7, sp, #0
    35c2:	6078      	str	r0, [r7, #4]
    35c4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    35c6:	687b      	ldr	r3, [r7, #4]
    35c8:	683a      	ldr	r2, [r7, #0]
    35ca:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    35ce:	bf00      	nop
    35d0:	370c      	adds	r7, #12
    35d2:	46bd      	mov	sp, r7
    35d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    35d8:	4770      	bx	lr
	...

000035dc <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    35dc:	b580      	push	{r7, lr}
    35de:	b082      	sub	sp, #8
    35e0:	af00      	add	r7, sp, #0
    35e2:	6078      	str	r0, [r7, #4]
    35e4:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    35e6:	687b      	ldr	r3, [r7, #4]
    35e8:	683a      	ldr	r2, [r7, #0]
    35ea:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    35ec:	687b      	ldr	r3, [r7, #4]
    35ee:	681b      	ldr	r3, [r3, #0]
    35f0:	4618      	mov	r0, r3
    35f2:	4b55      	ldr	r3, [pc, #340]	; (3748 <_can_async_init+0x16c>)
    35f4:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    35f6:	bf00      	nop
    35f8:	687b      	ldr	r3, [r7, #4]
    35fa:	681b      	ldr	r3, [r3, #0]
    35fc:	4618      	mov	r0, r3
    35fe:	4b53      	ldr	r3, [pc, #332]	; (374c <_can_async_init+0x170>)
    3600:	4798      	blx	r3
    3602:	4603      	mov	r3, r0
    3604:	f083 0301 	eor.w	r3, r3, #1
    3608:	b2db      	uxtb	r3, r3
    360a:	2b00      	cmp	r3, #0
    360c:	d1f4      	bne.n	35f8 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    360e:	687b      	ldr	r3, [r7, #4]
    3610:	681b      	ldr	r3, [r3, #0]
    3612:	4618      	mov	r0, r3
    3614:	4b4e      	ldr	r3, [pc, #312]	; (3750 <_can_async_init+0x174>)
    3616:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    3618:	683b      	ldr	r3, [r7, #0]
    361a:	4a4e      	ldr	r2, [pc, #312]	; (3754 <_can_async_init+0x178>)
    361c:	4293      	cmp	r3, r2
    361e:	d17a      	bne.n	3716 <_can_async_init+0x13a>
		_can1_dev    = dev;
    3620:	4a4d      	ldr	r2, [pc, #308]	; (3758 <_can_async_init+0x17c>)
    3622:	687b      	ldr	r3, [r7, #4]
    3624:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    3626:	687b      	ldr	r3, [r7, #4]
    3628:	4a4c      	ldr	r2, [pc, #304]	; (375c <_can_async_init+0x180>)
    362a:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    362c:	687b      	ldr	r3, [r7, #4]
    362e:	681b      	ldr	r3, [r3, #0]
    3630:	f44f 7140 	mov.w	r1, #768	; 0x300
    3634:	4618      	mov	r0, r3
    3636:	4b4a      	ldr	r3, [pc, #296]	; (3760 <_can_async_init+0x184>)
    3638:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    363a:	687b      	ldr	r3, [r7, #4]
    363c:	681b      	ldr	r3, [r3, #0]
    363e:	2102      	movs	r1, #2
    3640:	4618      	mov	r0, r3
    3642:	4b48      	ldr	r3, [pc, #288]	; (3764 <_can_async_init+0x188>)
    3644:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    3646:	687b      	ldr	r3, [r7, #4]
    3648:	681b      	ldr	r3, [r3, #0]
    364a:	4947      	ldr	r1, [pc, #284]	; (3768 <_can_async_init+0x18c>)
    364c:	4618      	mov	r0, r3
    364e:	4b47      	ldr	r3, [pc, #284]	; (376c <_can_async_init+0x190>)
    3650:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    3652:	687b      	ldr	r3, [r7, #4]
    3654:	681b      	ldr	r3, [r3, #0]
    3656:	4946      	ldr	r1, [pc, #280]	; (3770 <_can_async_init+0x194>)
    3658:	4618      	mov	r0, r3
    365a:	4b46      	ldr	r3, [pc, #280]	; (3774 <_can_async_init+0x198>)
    365c:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    365e:	687b      	ldr	r3, [r7, #4]
    3660:	681a      	ldr	r2, [r3, #0]
    3662:	4b45      	ldr	r3, [pc, #276]	; (3778 <_can_async_init+0x19c>)
    3664:	b29b      	uxth	r3, r3
    3666:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    366a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    366e:	4619      	mov	r1, r3
    3670:	4610      	mov	r0, r2
    3672:	4b42      	ldr	r3, [pc, #264]	; (377c <_can_async_init+0x1a0>)
    3674:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    3676:	687b      	ldr	r3, [r7, #4]
    3678:	681b      	ldr	r3, [r3, #0]
    367a:	2107      	movs	r1, #7
    367c:	4618      	mov	r0, r3
    367e:	4b40      	ldr	r3, [pc, #256]	; (3780 <_can_async_init+0x1a4>)
    3680:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    3682:	687b      	ldr	r3, [r7, #4]
    3684:	681b      	ldr	r3, [r3, #0]
    3686:	2107      	movs	r1, #7
    3688:	4618      	mov	r0, r3
    368a:	4b3e      	ldr	r3, [pc, #248]	; (3784 <_can_async_init+0x1a8>)
    368c:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    368e:	687b      	ldr	r3, [r7, #4]
    3690:	681a      	ldr	r2, [r3, #0]
    3692:	4b3d      	ldr	r3, [pc, #244]	; (3788 <_can_async_init+0x1ac>)
    3694:	b29b      	uxth	r3, r3
    3696:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    369a:	4619      	mov	r1, r3
    369c:	4610      	mov	r0, r2
    369e:	4b3b      	ldr	r3, [pc, #236]	; (378c <_can_async_init+0x1b0>)
    36a0:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    36a2:	687b      	ldr	r3, [r7, #4]
    36a4:	681a      	ldr	r2, [r3, #0]
    36a6:	4b3a      	ldr	r3, [pc, #232]	; (3790 <_can_async_init+0x1b4>)
    36a8:	b29b      	uxth	r3, r3
    36aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    36ae:	4619      	mov	r1, r3
    36b0:	4610      	mov	r0, r2
    36b2:	4b38      	ldr	r3, [pc, #224]	; (3794 <_can_async_init+0x1b8>)
    36b4:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    36b6:	687b      	ldr	r3, [r7, #4]
    36b8:	681b      	ldr	r3, [r3, #0]
    36ba:	2108      	movs	r1, #8
    36bc:	4618      	mov	r0, r3
    36be:	4b36      	ldr	r3, [pc, #216]	; (3798 <_can_async_init+0x1bc>)
    36c0:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    36c2:	687b      	ldr	r3, [r7, #4]
    36c4:	681a      	ldr	r2, [r3, #0]
    36c6:	4b35      	ldr	r3, [pc, #212]	; (379c <_can_async_init+0x1c0>)
    36c8:	b29b      	uxth	r3, r3
    36ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    36ce:	4619      	mov	r1, r3
    36d0:	4610      	mov	r0, r2
    36d2:	4b33      	ldr	r3, [pc, #204]	; (37a0 <_can_async_init+0x1c4>)
    36d4:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    36d6:	687b      	ldr	r3, [r7, #4]
    36d8:	681a      	ldr	r2, [r3, #0]
    36da:	4b32      	ldr	r3, [pc, #200]	; (37a4 <_can_async_init+0x1c8>)
    36dc:	b29b      	uxth	r3, r3
    36de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    36e2:	4619      	mov	r1, r3
    36e4:	4610      	mov	r0, r2
    36e6:	4b30      	ldr	r3, [pc, #192]	; (37a8 <_can_async_init+0x1cc>)
    36e8:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    36ea:	687b      	ldr	r3, [r7, #4]
    36ec:	681b      	ldr	r3, [r3, #0]
    36ee:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    36f2:	4618      	mov	r0, r3
    36f4:	4b2d      	ldr	r3, [pc, #180]	; (37ac <_can_async_init+0x1d0>)
    36f6:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    36f8:	204f      	movs	r0, #79	; 0x4f
    36fa:	4b2d      	ldr	r3, [pc, #180]	; (37b0 <_can_async_init+0x1d4>)
    36fc:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    36fe:	204f      	movs	r0, #79	; 0x4f
    3700:	4b2c      	ldr	r3, [pc, #176]	; (37b4 <_can_async_init+0x1d8>)
    3702:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    3704:	204f      	movs	r0, #79	; 0x4f
    3706:	4b2c      	ldr	r3, [pc, #176]	; (37b8 <_can_async_init+0x1dc>)
    3708:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    370a:	687b      	ldr	r3, [r7, #4]
    370c:	681b      	ldr	r3, [r3, #0]
    370e:	2101      	movs	r1, #1
    3710:	4618      	mov	r0, r3
    3712:	4b2a      	ldr	r3, [pc, #168]	; (37bc <_can_async_init+0x1e0>)
    3714:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    3716:	687b      	ldr	r3, [r7, #4]
    3718:	681b      	ldr	r3, [r3, #0]
    371a:	4618      	mov	r0, r3
    371c:	4b28      	ldr	r3, [pc, #160]	; (37c0 <_can_async_init+0x1e4>)
    371e:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    3720:	687b      	ldr	r3, [r7, #4]
    3722:	681b      	ldr	r3, [r3, #0]
    3724:	4618      	mov	r0, r3
    3726:	4b27      	ldr	r3, [pc, #156]	; (37c4 <_can_async_init+0x1e8>)
    3728:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    372a:	bf00      	nop
    372c:	687b      	ldr	r3, [r7, #4]
    372e:	681b      	ldr	r3, [r3, #0]
    3730:	4618      	mov	r0, r3
    3732:	4b06      	ldr	r3, [pc, #24]	; (374c <_can_async_init+0x170>)
    3734:	4798      	blx	r3
    3736:	4603      	mov	r3, r0
    3738:	2b00      	cmp	r3, #0
    373a:	d1f7      	bne.n	372c <_can_async_init+0x150>
	};

	return ERR_NONE;
    373c:	2300      	movs	r3, #0
}
    373e:	4618      	mov	r0, r3
    3740:	3708      	adds	r7, #8
    3742:	46bd      	mov	sp, r7
    3744:	bd80      	pop	{r7, pc}
    3746:	bf00      	nop
    3748:	0000320d 	.word	0x0000320d
    374c:	0000322d 	.word	0x0000322d
    3750:	0000327b 	.word	0x0000327b
    3754:	42000400 	.word	0x42000400
    3758:	20000bf0 	.word	0x20000bf0
    375c:	20000004 	.word	0x20000004
    3760:	0000331b 	.word	0x0000331b
    3764:	000031d5 	.word	0x000031d5
    3768:	00010c01 	.word	0x00010c01
    376c:	0000333d 	.word	0x0000333d
    3770:	00010c10 	.word	0x00010c10
    3774:	000031f1 	.word	0x000031f1
    3778:	20001bd0 	.word	0x20001bd0
    377c:	000034cf 	.word	0x000034cf
    3780:	00003527 	.word	0x00003527
    3784:	00003563 	.word	0x00003563
    3788:	20001b88 	.word	0x20001b88
    378c:	00003545 	.word	0x00003545
    3790:	20000b50 	.word	0x20000b50
    3794:	000035bd 	.word	0x000035bd
    3798:	00003457 	.word	0x00003457
    379c:	20000b60 	.word	0x20000b60
    37a0:	00003475 	.word	0x00003475
    37a4:	20000be0 	.word	0x20000be0
    37a8:	00003493 	.word	0x00003493
    37ac:	000034b1 	.word	0x000034b1
    37b0:	000030a5 	.word	0x000030a5
    37b4:	000030e9 	.word	0x000030e9
    37b8:	00003069 	.word	0x00003069
    37bc:	0000343b 	.word	0x0000343b
    37c0:	0000329b 	.word	0x0000329b
    37c4:	0000325b 	.word	0x0000325b

000037c8 <_can_async_enable>:

/**
 * \brief Enable CAN
 */
int32_t _can_async_enable(struct _can_async_device *const dev)
{
    37c8:	b580      	push	{r7, lr}
    37ca:	b082      	sub	sp, #8
    37cc:	af00      	add	r7, sp, #0
    37ce:	6078      	str	r0, [r7, #4]
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    37d0:	687b      	ldr	r3, [r7, #4]
    37d2:	681b      	ldr	r3, [r3, #0]
    37d4:	4618      	mov	r0, r3
    37d6:	4b03      	ldr	r3, [pc, #12]	; (37e4 <_can_async_enable+0x1c>)
    37d8:	4798      	blx	r3
	return ERR_NONE;
    37da:	2300      	movs	r3, #0
}
    37dc:	4618      	mov	r0, r3
    37de:	3708      	adds	r7, #8
    37e0:	46bd      	mov	sp, r7
    37e2:	bd80      	pop	{r7, pc}
    37e4:	0000325b 	.word	0x0000325b

000037e8 <_can_async_read>:

/**
 * \brief Read a CAN message
 */
int32_t _can_async_read(struct _can_async_device *const dev, struct can_message *msg)
{
    37e8:	b590      	push	{r4, r7, lr}
    37ea:	b089      	sub	sp, #36	; 0x24
    37ec:	af00      	add	r7, sp, #0
    37ee:	6078      	str	r0, [r7, #4]
    37f0:	6039      	str	r1, [r7, #0]
	struct _can_rx_fifo_entry *f = NULL;
    37f2:	2300      	movs	r3, #0
    37f4:	61fb      	str	r3, [r7, #28]
	hri_can_rxf0s_reg_t        get_index;

	if (!hri_can_read_RXF0S_F0FL_bf(dev->hw)) {
    37f6:	687b      	ldr	r3, [r7, #4]
    37f8:	681b      	ldr	r3, [r3, #0]
    37fa:	4618      	mov	r0, r3
    37fc:	4b37      	ldr	r3, [pc, #220]	; (38dc <_can_async_read+0xf4>)
    37fe:	4798      	blx	r3
    3800:	4603      	mov	r3, r0
    3802:	2b00      	cmp	r3, #0
    3804:	d102      	bne.n	380c <_can_async_read+0x24>
		return ERR_NOT_FOUND;
    3806:	f06f 0309 	mvn.w	r3, #9
    380a:	e063      	b.n	38d4 <_can_async_read+0xec>
	}

	get_index = hri_can_read_RXF0S_F0GI_bf(dev->hw);
    380c:	687b      	ldr	r3, [r7, #4]
    380e:	681b      	ldr	r3, [r3, #0]
    3810:	4618      	mov	r0, r3
    3812:	4b33      	ldr	r3, [pc, #204]	; (38e0 <_can_async_read+0xf8>)
    3814:	4798      	blx	r3
    3816:	61b8      	str	r0, [r7, #24]
	if (dev->hw == CAN0) {
		f = (struct _can_rx_fifo_entry *)(can0_rx_fifo + get_index * CONF_CAN0_F0DS);
	}
#endif
#ifdef CONF_CAN1_ENABLED
	if (dev->hw == CAN1) {
    3818:	687b      	ldr	r3, [r7, #4]
    381a:	681b      	ldr	r3, [r3, #0]
    381c:	4a31      	ldr	r2, [pc, #196]	; (38e4 <_can_async_read+0xfc>)
    381e:	4293      	cmp	r3, r2
    3820:	d108      	bne.n	3834 <_can_async_read+0x4c>
		f = (struct _can_rx_fifo_entry *)(can1_rx_fifo + get_index * CONF_CAN1_F0DS);
    3822:	69ba      	ldr	r2, [r7, #24]
    3824:	4613      	mov	r3, r2
    3826:	00db      	lsls	r3, r3, #3
    3828:	4413      	add	r3, r2
    382a:	00db      	lsls	r3, r3, #3
    382c:	461a      	mov	r2, r3
    382e:	4b2e      	ldr	r3, [pc, #184]	; (38e8 <_can_async_read+0x100>)
    3830:	4413      	add	r3, r2
    3832:	61fb      	str	r3, [r7, #28]
	}
#endif

	if (f == NULL) {
    3834:	69fb      	ldr	r3, [r7, #28]
    3836:	2b00      	cmp	r3, #0
    3838:	d102      	bne.n	3840 <_can_async_read+0x58>
		return ERR_NO_RESOURCE;
    383a:	f06f 031b 	mvn.w	r3, #27
    383e:	e049      	b.n	38d4 <_can_async_read+0xec>
	}

	if (f->R0.bit.XTD == 1) {
    3840:	69fb      	ldr	r3, [r7, #28]
    3842:	681b      	ldr	r3, [r3, #0]
    3844:	f3c3 7380 	ubfx	r3, r3, #30, #1
    3848:	b2db      	uxtb	r3, r3
    384a:	2b01      	cmp	r3, #1
    384c:	d10a      	bne.n	3864 <_can_async_read+0x7c>
		msg->fmt = CAN_FMT_EXTID;
    384e:	683b      	ldr	r3, [r7, #0]
    3850:	2201      	movs	r2, #1
    3852:	735a      	strb	r2, [r3, #13]
		msg->id  = f->R0.bit.ID;
    3854:	69fb      	ldr	r3, [r7, #28]
    3856:	681b      	ldr	r3, [r3, #0]
    3858:	f3c3 031c 	ubfx	r3, r3, #0, #29
    385c:	461a      	mov	r2, r3
    385e:	683b      	ldr	r3, [r7, #0]
    3860:	601a      	str	r2, [r3, #0]
    3862:	e00a      	b.n	387a <_can_async_read+0x92>
	} else {
		msg->fmt = CAN_FMT_STDID;
    3864:	683b      	ldr	r3, [r7, #0]
    3866:	2200      	movs	r2, #0
    3868:	735a      	strb	r2, [r3, #13]
		/* A standard identifier is stored into ID[28:18] */
		msg->id = f->R0.bit.ID >> 18;
    386a:	69fb      	ldr	r3, [r7, #28]
    386c:	681b      	ldr	r3, [r3, #0]
    386e:	f3c3 031c 	ubfx	r3, r3, #0, #29
    3872:	149b      	asrs	r3, r3, #18
    3874:	461a      	mov	r2, r3
    3876:	683b      	ldr	r3, [r7, #0]
    3878:	601a      	str	r2, [r3, #0]
	}

	if (f->R0.bit.RTR == 1) {
    387a:	69fb      	ldr	r3, [r7, #28]
    387c:	681b      	ldr	r3, [r3, #0]
    387e:	f3c3 7340 	ubfx	r3, r3, #29, #1
    3882:	b2db      	uxtb	r3, r3
    3884:	2b01      	cmp	r3, #1
    3886:	d102      	bne.n	388e <_can_async_read+0xa6>
		msg->type = CAN_TYPE_REMOTE;
    3888:	683b      	ldr	r3, [r7, #0]
    388a:	2201      	movs	r2, #1
    388c:	711a      	strb	r2, [r3, #4]
	}

	const uint8_t dlc2len[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 12, 16, 20, 24, 32, 48, 64};
    388e:	4b17      	ldr	r3, [pc, #92]	; (38ec <_can_async_read+0x104>)
    3890:	f107 0408 	add.w	r4, r7, #8
    3894:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    3896:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	msg->len                = dlc2len[f->R1.bit.DLC];
    389a:	69fb      	ldr	r3, [r7, #28]
    389c:	685b      	ldr	r3, [r3, #4]
    389e:	f3c3 4303 	ubfx	r3, r3, #16, #4
    38a2:	b2db      	uxtb	r3, r3
    38a4:	f107 0220 	add.w	r2, r7, #32
    38a8:	4413      	add	r3, r2
    38aa:	f813 2c18 	ldrb.w	r2, [r3, #-24]
    38ae:	683b      	ldr	r3, [r7, #0]
    38b0:	731a      	strb	r2, [r3, #12]

	memcpy(msg->data, f->data, msg->len);
    38b2:	683b      	ldr	r3, [r7, #0]
    38b4:	6898      	ldr	r0, [r3, #8]
    38b6:	69fb      	ldr	r3, [r7, #28]
    38b8:	f103 0108 	add.w	r1, r3, #8
    38bc:	683b      	ldr	r3, [r7, #0]
    38be:	7b1b      	ldrb	r3, [r3, #12]
    38c0:	461a      	mov	r2, r3
    38c2:	4b0b      	ldr	r3, [pc, #44]	; (38f0 <_can_async_read+0x108>)
    38c4:	4798      	blx	r3

	hri_can_write_RXF0A_F0AI_bf(dev->hw, get_index);
    38c6:	687b      	ldr	r3, [r7, #4]
    38c8:	681b      	ldr	r3, [r3, #0]
    38ca:	69b9      	ldr	r1, [r7, #24]
    38cc:	4618      	mov	r0, r3
    38ce:	4b09      	ldr	r3, [pc, #36]	; (38f4 <_can_async_read+0x10c>)
    38d0:	4798      	blx	r3

	return ERR_NONE;
    38d2:	2300      	movs	r3, #0
}
    38d4:	4618      	mov	r0, r3
    38d6:	3724      	adds	r7, #36	; 0x24
    38d8:	46bd      	mov	sp, r7
    38da:	bd90      	pop	{r4, r7, pc}
    38dc:	0000314d 	.word	0x0000314d
    38e0:	0000316b 	.word	0x0000316b
    38e4:	42000400 	.word	0x42000400
    38e8:	20001bd0 	.word	0x20001bd0
    38ec:	00012fb8 	.word	0x00012fb8
    38f0:	00012b75 	.word	0x00012b75
    38f4:	000034ed 	.word	0x000034ed

000038f8 <_can_async_write>:

/**
 * \brief Write a CAN message
 */
int32_t _can_async_write(struct _can_async_device *const dev, struct can_message *msg)
{
    38f8:	b590      	push	{r4, r7, lr}
    38fa:	b085      	sub	sp, #20
    38fc:	af00      	add	r7, sp, #0
    38fe:	6078      	str	r0, [r7, #4]
    3900:	6039      	str	r1, [r7, #0]
	struct _can_tx_fifo_entry *f = NULL;
    3902:	2300      	movs	r3, #0
    3904:	60fb      	str	r3, [r7, #12]
	hri_can_txfqs_reg_t        put_index;

	if (hri_can_get_TXFQS_TFQF_bit(dev->hw)) {
    3906:	687b      	ldr	r3, [r7, #4]
    3908:	681b      	ldr	r3, [r3, #0]
    390a:	4618      	mov	r0, r3
    390c:	4b61      	ldr	r3, [pc, #388]	; (3a94 <_can_async_write+0x19c>)
    390e:	4798      	blx	r3
    3910:	4603      	mov	r3, r0
    3912:	2b00      	cmp	r3, #0
    3914:	d002      	beq.n	391c <_can_async_write+0x24>
		return ERR_NO_RESOURCE;
    3916:	f06f 031b 	mvn.w	r3, #27
    391a:	e0b7      	b.n	3a8c <_can_async_write+0x194>
	}

	put_index = hri_can_read_TXFQS_TFQPI_bf(dev->hw);
    391c:	687b      	ldr	r3, [r7, #4]
    391e:	681b      	ldr	r3, [r3, #0]
    3920:	4618      	mov	r0, r3
    3922:	4b5d      	ldr	r3, [pc, #372]	; (3a98 <_can_async_write+0x1a0>)
    3924:	4798      	blx	r3
    3926:	60b8      	str	r0, [r7, #8]
	if (dev->hw == CAN0) {
		f = (struct _can_tx_fifo_entry *)(can0_tx_fifo + put_index * CONF_CAN0_TBDS);
	}
#endif
#ifdef CONF_CAN1_ENABLED
	if (dev->hw == CAN1) {
    3928:	687b      	ldr	r3, [r7, #4]
    392a:	681b      	ldr	r3, [r3, #0]
    392c:	4a5b      	ldr	r2, [pc, #364]	; (3a9c <_can_async_write+0x1a4>)
    392e:	4293      	cmp	r3, r2
    3930:	d108      	bne.n	3944 <_can_async_write+0x4c>
		f = (struct _can_tx_fifo_entry *)(can1_tx_fifo + put_index * CONF_CAN1_TBDS);
    3932:	68ba      	ldr	r2, [r7, #8]
    3934:	4613      	mov	r3, r2
    3936:	00db      	lsls	r3, r3, #3
    3938:	4413      	add	r3, r2
    393a:	00db      	lsls	r3, r3, #3
    393c:	461a      	mov	r2, r3
    393e:	4b58      	ldr	r3, [pc, #352]	; (3aa0 <_can_async_write+0x1a8>)
    3940:	4413      	add	r3, r2
    3942:	60fb      	str	r3, [r7, #12]
	}
#endif
	if (f == NULL) {
    3944:	68fb      	ldr	r3, [r7, #12]
    3946:	2b00      	cmp	r3, #0
    3948:	d102      	bne.n	3950 <_can_async_write+0x58>
		return ERR_NO_RESOURCE;
    394a:	f06f 031b 	mvn.w	r3, #27
    394e:	e09d      	b.n	3a8c <_can_async_write+0x194>
	}

	if (msg->fmt == CAN_FMT_EXTID) {
    3950:	683b      	ldr	r3, [r7, #0]
    3952:	7b5b      	ldrb	r3, [r3, #13]
    3954:	2b01      	cmp	r3, #1
    3956:	d109      	bne.n	396c <_can_async_write+0x74>
		f->T0.val     = msg->id;
    3958:	683b      	ldr	r3, [r7, #0]
    395a:	681a      	ldr	r2, [r3, #0]
    395c:	68fb      	ldr	r3, [r7, #12]
    395e:	601a      	str	r2, [r3, #0]
		f->T0.bit.XTD = 1;
    3960:	68fa      	ldr	r2, [r7, #12]
    3962:	6813      	ldr	r3, [r2, #0]
    3964:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    3968:	6013      	str	r3, [r2, #0]
    396a:	e004      	b.n	3976 <_can_async_write+0x7e>
	} else {
		/* A standard identifier is stored into ID[28:18] */
		f->T0.val = msg->id << 18;
    396c:	683b      	ldr	r3, [r7, #0]
    396e:	681b      	ldr	r3, [r3, #0]
    3970:	049a      	lsls	r2, r3, #18
    3972:	68fb      	ldr	r3, [r7, #12]
    3974:	601a      	str	r2, [r3, #0]
	}

	if (msg->len <= 8) {
    3976:	683b      	ldr	r3, [r7, #0]
    3978:	7b1b      	ldrb	r3, [r3, #12]
    397a:	2b08      	cmp	r3, #8
    397c:	d80a      	bhi.n	3994 <_can_async_write+0x9c>
		f->T1.bit.DLC = msg->len;
    397e:	683b      	ldr	r3, [r7, #0]
    3980:	7b1b      	ldrb	r3, [r3, #12]
    3982:	f003 030f 	and.w	r3, r3, #15
    3986:	b2d9      	uxtb	r1, r3
    3988:	68fa      	ldr	r2, [r7, #12]
    398a:	6853      	ldr	r3, [r2, #4]
    398c:	f361 4313 	bfi	r3, r1, #16, #4
    3990:	6053      	str	r3, [r2, #4]
    3992:	e04a      	b.n	3a2a <_can_async_write+0x132>
	} else if (msg->len <= 12) {
    3994:	683b      	ldr	r3, [r7, #0]
    3996:	7b1b      	ldrb	r3, [r3, #12]
    3998:	2b0c      	cmp	r3, #12
    399a:	d806      	bhi.n	39aa <_can_async_write+0xb2>
		f->T1.bit.DLC = 0x9;
    399c:	68fa      	ldr	r2, [r7, #12]
    399e:	6853      	ldr	r3, [r2, #4]
    39a0:	2109      	movs	r1, #9
    39a2:	f361 4313 	bfi	r3, r1, #16, #4
    39a6:	6053      	str	r3, [r2, #4]
    39a8:	e03f      	b.n	3a2a <_can_async_write+0x132>
	} else if (msg->len <= 16) {
    39aa:	683b      	ldr	r3, [r7, #0]
    39ac:	7b1b      	ldrb	r3, [r3, #12]
    39ae:	2b10      	cmp	r3, #16
    39b0:	d806      	bhi.n	39c0 <_can_async_write+0xc8>
		f->T1.bit.DLC = 0xA;
    39b2:	68fa      	ldr	r2, [r7, #12]
    39b4:	6853      	ldr	r3, [r2, #4]
    39b6:	210a      	movs	r1, #10
    39b8:	f361 4313 	bfi	r3, r1, #16, #4
    39bc:	6053      	str	r3, [r2, #4]
    39be:	e034      	b.n	3a2a <_can_async_write+0x132>
	} else if (msg->len <= 20) {
    39c0:	683b      	ldr	r3, [r7, #0]
    39c2:	7b1b      	ldrb	r3, [r3, #12]
    39c4:	2b14      	cmp	r3, #20
    39c6:	d806      	bhi.n	39d6 <_can_async_write+0xde>
		f->T1.bit.DLC = 0xB;
    39c8:	68fa      	ldr	r2, [r7, #12]
    39ca:	6853      	ldr	r3, [r2, #4]
    39cc:	210b      	movs	r1, #11
    39ce:	f361 4313 	bfi	r3, r1, #16, #4
    39d2:	6053      	str	r3, [r2, #4]
    39d4:	e029      	b.n	3a2a <_can_async_write+0x132>
	} else if (msg->len <= 24) {
    39d6:	683b      	ldr	r3, [r7, #0]
    39d8:	7b1b      	ldrb	r3, [r3, #12]
    39da:	2b18      	cmp	r3, #24
    39dc:	d806      	bhi.n	39ec <_can_async_write+0xf4>
		f->T1.bit.DLC = 0xC;
    39de:	68fa      	ldr	r2, [r7, #12]
    39e0:	6853      	ldr	r3, [r2, #4]
    39e2:	210c      	movs	r1, #12
    39e4:	f361 4313 	bfi	r3, r1, #16, #4
    39e8:	6053      	str	r3, [r2, #4]
    39ea:	e01e      	b.n	3a2a <_can_async_write+0x132>
	} else if (msg->len <= 32) {
    39ec:	683b      	ldr	r3, [r7, #0]
    39ee:	7b1b      	ldrb	r3, [r3, #12]
    39f0:	2b20      	cmp	r3, #32
    39f2:	d806      	bhi.n	3a02 <_can_async_write+0x10a>
		f->T1.bit.DLC = 0xD;
    39f4:	68fa      	ldr	r2, [r7, #12]
    39f6:	6853      	ldr	r3, [r2, #4]
    39f8:	210d      	movs	r1, #13
    39fa:	f361 4313 	bfi	r3, r1, #16, #4
    39fe:	6053      	str	r3, [r2, #4]
    3a00:	e013      	b.n	3a2a <_can_async_write+0x132>
	} else if (msg->len <= 48) {
    3a02:	683b      	ldr	r3, [r7, #0]
    3a04:	7b1b      	ldrb	r3, [r3, #12]
    3a06:	2b30      	cmp	r3, #48	; 0x30
    3a08:	d806      	bhi.n	3a18 <_can_async_write+0x120>
		f->T1.bit.DLC = 0xE;
    3a0a:	68fa      	ldr	r2, [r7, #12]
    3a0c:	6853      	ldr	r3, [r2, #4]
    3a0e:	210e      	movs	r1, #14
    3a10:	f361 4313 	bfi	r3, r1, #16, #4
    3a14:	6053      	str	r3, [r2, #4]
    3a16:	e008      	b.n	3a2a <_can_async_write+0x132>
	} else if (msg->len <= 64) {
    3a18:	683b      	ldr	r3, [r7, #0]
    3a1a:	7b1b      	ldrb	r3, [r3, #12]
    3a1c:	2b40      	cmp	r3, #64	; 0x40
    3a1e:	d804      	bhi.n	3a2a <_can_async_write+0x132>
		f->T1.bit.DLC = 0xF;
    3a20:	68fa      	ldr	r2, [r7, #12]
    3a22:	6853      	ldr	r3, [r2, #4]
    3a24:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
    3a28:	6053      	str	r3, [r2, #4]
	}

	f->T1.bit.FDF = hri_can_get_CCCR_FDOE_bit(dev->hw);
    3a2a:	687b      	ldr	r3, [r7, #4]
    3a2c:	681b      	ldr	r3, [r3, #0]
    3a2e:	4618      	mov	r0, r3
    3a30:	4b1c      	ldr	r3, [pc, #112]	; (3aa4 <_can_async_write+0x1ac>)
    3a32:	4798      	blx	r3
    3a34:	4603      	mov	r3, r0
    3a36:	4619      	mov	r1, r3
    3a38:	68fa      	ldr	r2, [r7, #12]
    3a3a:	6853      	ldr	r3, [r2, #4]
    3a3c:	f361 5355 	bfi	r3, r1, #21, #1
    3a40:	6053      	str	r3, [r2, #4]
	f->T1.bit.BRS = hri_can_get_CCCR_BRSE_bit(dev->hw);
    3a42:	687b      	ldr	r3, [r7, #4]
    3a44:	681b      	ldr	r3, [r3, #0]
    3a46:	4618      	mov	r0, r3
    3a48:	4b17      	ldr	r3, [pc, #92]	; (3aa8 <_can_async_write+0x1b0>)
    3a4a:	4798      	blx	r3
    3a4c:	4603      	mov	r3, r0
    3a4e:	4619      	mov	r1, r3
    3a50:	68fa      	ldr	r2, [r7, #12]
    3a52:	6853      	ldr	r3, [r2, #4]
    3a54:	f361 5314 	bfi	r3, r1, #20, #1
    3a58:	6053      	str	r3, [r2, #4]

	memcpy(f->data, msg->data, msg->len);
    3a5a:	68fb      	ldr	r3, [r7, #12]
    3a5c:	f103 0008 	add.w	r0, r3, #8
    3a60:	683b      	ldr	r3, [r7, #0]
    3a62:	6899      	ldr	r1, [r3, #8]
    3a64:	683b      	ldr	r3, [r7, #0]
    3a66:	7b1b      	ldrb	r3, [r3, #12]
    3a68:	461a      	mov	r2, r3
    3a6a:	4b10      	ldr	r3, [pc, #64]	; (3aac <_can_async_write+0x1b4>)
    3a6c:	4798      	blx	r3

	hri_can_write_TXBAR_reg(dev->hw, 1 << hri_can_read_TXFQS_TFQPI_bf(dev->hw));
    3a6e:	687b      	ldr	r3, [r7, #4]
    3a70:	681c      	ldr	r4, [r3, #0]
    3a72:	687b      	ldr	r3, [r7, #4]
    3a74:	681b      	ldr	r3, [r3, #0]
    3a76:	4618      	mov	r0, r3
    3a78:	4b07      	ldr	r3, [pc, #28]	; (3a98 <_can_async_write+0x1a0>)
    3a7a:	4798      	blx	r3
    3a7c:	4602      	mov	r2, r0
    3a7e:	2301      	movs	r3, #1
    3a80:	4093      	lsls	r3, r2
    3a82:	4619      	mov	r1, r3
    3a84:	4620      	mov	r0, r4
    3a86:	4b0a      	ldr	r3, [pc, #40]	; (3ab0 <_can_async_write+0x1b8>)
    3a88:	4798      	blx	r3
	return ERR_NONE;
    3a8a:	2300      	movs	r3, #0
}
    3a8c:	4618      	mov	r0, r3
    3a8e:	3714      	adds	r7, #20
    3a90:	46bd      	mov	sp, r7
    3a92:	bd90      	pop	{r4, r7, pc}
    3a94:	0000318b 	.word	0x0000318b
    3a98:	000031b5 	.word	0x000031b5
    3a9c:	42000400 	.word	0x42000400
    3aa0:	20001b88 	.word	0x20001b88
    3aa4:	000032bb 	.word	0x000032bb
    3aa8:	000032eb 	.word	0x000032eb
    3aac:	00012b75 	.word	0x00012b75
    3ab0:	00003581 	.word	0x00003581

00003ab4 <_can_async_set_irq_state>:

/**
 * \brief Set CAN Interrupt State
 */
void _can_async_set_irq_state(struct _can_async_device *const dev, enum can_async_callback_type type, bool state)
{
    3ab4:	b580      	push	{r7, lr}
    3ab6:	b084      	sub	sp, #16
    3ab8:	af00      	add	r7, sp, #0
    3aba:	6078      	str	r0, [r7, #4]
    3abc:	460b      	mov	r3, r1
    3abe:	70fb      	strb	r3, [r7, #3]
    3ac0:	4613      	mov	r3, r2
    3ac2:	70bb      	strb	r3, [r7, #2]
	uint32_t ie;

	if (type == CAN_ASYNC_RX_CB) {
    3ac4:	78fb      	ldrb	r3, [r7, #3]
    3ac6:	2b00      	cmp	r3, #0
    3ac8:	d107      	bne.n	3ada <_can_async_set_irq_state+0x26>
		hri_can_write_IE_RF0NE_bit(dev->hw, state);
    3aca:	687b      	ldr	r3, [r7, #4]
    3acc:	681b      	ldr	r3, [r3, #0]
    3ace:	78ba      	ldrb	r2, [r7, #2]
    3ad0:	4611      	mov	r1, r2
    3ad2:	4618      	mov	r0, r3
    3ad4:	4b15      	ldr	r3, [pc, #84]	; (3b2c <_can_async_set_irq_state+0x78>)
    3ad6:	4798      	blx	r3
	} else if (type == CAN_ASYNC_IRQ_CB) {
		ie = hri_can_get_IE_reg(dev->hw, CAN_IE_RF0NE | CAN_IE_TCE);
		hri_can_write_IE_reg(dev->hw, ie | CONF_CAN0_IE_REG);
	}

	return;
    3ad8:	e023      	b.n	3b22 <_can_async_set_irq_state+0x6e>
	} else if (type == CAN_ASYNC_TX_CB) {
    3ada:	78fb      	ldrb	r3, [r7, #3]
    3adc:	2b01      	cmp	r3, #1
    3ade:	d10e      	bne.n	3afe <_can_async_set_irq_state+0x4a>
		hri_can_write_IE_TCE_bit(dev->hw, state);
    3ae0:	687b      	ldr	r3, [r7, #4]
    3ae2:	681b      	ldr	r3, [r3, #0]
    3ae4:	78ba      	ldrb	r2, [r7, #2]
    3ae6:	4611      	mov	r1, r2
    3ae8:	4618      	mov	r0, r3
    3aea:	4b11      	ldr	r3, [pc, #68]	; (3b30 <_can_async_set_irq_state+0x7c>)
    3aec:	4798      	blx	r3
		hri_can_write_TXBTIE_reg(dev->hw, CAN_TXBTIE_MASK);
    3aee:	687b      	ldr	r3, [r7, #4]
    3af0:	681b      	ldr	r3, [r3, #0]
    3af2:	f04f 31ff 	mov.w	r1, #4294967295
    3af6:	4618      	mov	r0, r3
    3af8:	4b0e      	ldr	r3, [pc, #56]	; (3b34 <_can_async_set_irq_state+0x80>)
    3afa:	4798      	blx	r3
	return;
    3afc:	e011      	b.n	3b22 <_can_async_set_irq_state+0x6e>
	} else if (type == CAN_ASYNC_IRQ_CB) {
    3afe:	78fb      	ldrb	r3, [r7, #3]
    3b00:	2b02      	cmp	r3, #2
    3b02:	d10e      	bne.n	3b22 <_can_async_set_irq_state+0x6e>
		ie = hri_can_get_IE_reg(dev->hw, CAN_IE_RF0NE | CAN_IE_TCE);
    3b04:	687b      	ldr	r3, [r7, #4]
    3b06:	681b      	ldr	r3, [r3, #0]
    3b08:	f240 2101 	movw	r1, #513	; 0x201
    3b0c:	4618      	mov	r0, r3
    3b0e:	4b0a      	ldr	r3, [pc, #40]	; (3b38 <_can_async_set_irq_state+0x84>)
    3b10:	4798      	blx	r3
    3b12:	60f8      	str	r0, [r7, #12]
		hri_can_write_IE_reg(dev->hw, ie | CONF_CAN0_IE_REG);
    3b14:	687b      	ldr	r3, [r7, #4]
    3b16:	681b      	ldr	r3, [r3, #0]
    3b18:	68f9      	ldr	r1, [r7, #12]
    3b1a:	4618      	mov	r0, r3
    3b1c:	4b07      	ldr	r3, [pc, #28]	; (3b3c <_can_async_set_irq_state+0x88>)
    3b1e:	4798      	blx	r3
	return;
    3b20:	bf00      	nop
    3b22:	bf00      	nop
}
    3b24:	3710      	adds	r7, #16
    3b26:	46bd      	mov	sp, r7
    3b28:	bd80      	pop	{r7, pc}
    3b2a:	bf00      	nop
    3b2c:	0000338d 	.word	0x0000338d
    3b30:	000033c1 	.word	0x000033c1
    3b34:	0000359f 	.word	0x0000359f
    3b38:	000033f9 	.word	0x000033f9
    3b3c:	0000341f 	.word	0x0000341f

00003b40 <_can_async_set_filter>:
/**
 * \brief Set CAN to the specified mode
 */
int32_t _can_async_set_filter(struct _can_async_device *const dev, uint8_t index, enum can_format fmt,
                              struct can_filter *filter)
{
    3b40:	b480      	push	{r7}
    3b42:	b087      	sub	sp, #28
    3b44:	af00      	add	r7, sp, #0
    3b46:	60f8      	str	r0, [r7, #12]
    3b48:	607b      	str	r3, [r7, #4]
    3b4a:	460b      	mov	r3, r1
    3b4c:	72fb      	strb	r3, [r7, #11]
    3b4e:	4613      	mov	r3, r2
    3b50:	72bb      	strb	r3, [r7, #10]
	struct _can_standard_message_filter_element *sf;
	struct _can_extended_message_filter_element *ef;

	sf = &((struct _can_context *)dev->context)->rx_std_filter[index];
    3b52:	68fb      	ldr	r3, [r7, #12]
    3b54:	699b      	ldr	r3, [r3, #24]
    3b56:	68da      	ldr	r2, [r3, #12]
    3b58:	7afb      	ldrb	r3, [r7, #11]
    3b5a:	009b      	lsls	r3, r3, #2
    3b5c:	4413      	add	r3, r2
    3b5e:	617b      	str	r3, [r7, #20]
	ef = &((struct _can_context *)dev->context)->rx_ext_filter[index];
    3b60:	68fb      	ldr	r3, [r7, #12]
    3b62:	699b      	ldr	r3, [r3, #24]
    3b64:	691a      	ldr	r2, [r3, #16]
    3b66:	7afb      	ldrb	r3, [r7, #11]
    3b68:	00db      	lsls	r3, r3, #3
    3b6a:	4413      	add	r3, r2
    3b6c:	613b      	str	r3, [r7, #16]

	if (fmt == CAN_FMT_STDID) {
    3b6e:	7abb      	ldrb	r3, [r7, #10]
    3b70:	2b00      	cmp	r3, #0
    3b72:	d123      	bne.n	3bbc <_can_async_set_filter+0x7c>
		if (filter == NULL) {
    3b74:	687b      	ldr	r3, [r7, #4]
    3b76:	2b00      	cmp	r3, #0
    3b78:	d104      	bne.n	3b84 <_can_async_set_filter+0x44>
			sf->S0.val = 0;
    3b7a:	697b      	ldr	r3, [r7, #20]
    3b7c:	2200      	movs	r2, #0
    3b7e:	601a      	str	r2, [r3, #0]
			return ERR_NONE;
    3b80:	2300      	movs	r3, #0
    3b82:	e03b      	b.n	3bfc <_can_async_set_filter+0xbc>
		}
		sf->S0.val       = filter->mask;
    3b84:	687b      	ldr	r3, [r7, #4]
    3b86:	685a      	ldr	r2, [r3, #4]
    3b88:	697b      	ldr	r3, [r7, #20]
    3b8a:	601a      	str	r2, [r3, #0]
		sf->S0.bit.SFID1 = filter->id;
    3b8c:	687b      	ldr	r3, [r7, #4]
    3b8e:	681b      	ldr	r3, [r3, #0]
    3b90:	b29b      	uxth	r3, r3
    3b92:	f3c3 030a 	ubfx	r3, r3, #0, #11
    3b96:	b299      	uxth	r1, r3
    3b98:	697a      	ldr	r2, [r7, #20]
    3b9a:	6813      	ldr	r3, [r2, #0]
    3b9c:	f361 431a 	bfi	r3, r1, #16, #11
    3ba0:	6013      	str	r3, [r2, #0]
		sf->S0.bit.SFT   = _CAN_SFT_CLASSIC;
    3ba2:	697a      	ldr	r2, [r7, #20]
    3ba4:	6813      	ldr	r3, [r2, #0]
    3ba6:	2102      	movs	r1, #2
    3ba8:	f361 739f 	bfi	r3, r1, #30, #2
    3bac:	6013      	str	r3, [r2, #0]
		sf->S0.bit.SFEC  = _CAN_SFEC_STF0M;
    3bae:	697a      	ldr	r2, [r7, #20]
    3bb0:	6813      	ldr	r3, [r2, #0]
    3bb2:	2101      	movs	r1, #1
    3bb4:	f361 63dd 	bfi	r3, r1, #27, #3
    3bb8:	6013      	str	r3, [r2, #0]
    3bba:	e01e      	b.n	3bfa <_can_async_set_filter+0xba>
	} else if (fmt == CAN_FMT_EXTID) {
    3bbc:	7abb      	ldrb	r3, [r7, #10]
    3bbe:	2b01      	cmp	r3, #1
    3bc0:	d11b      	bne.n	3bfa <_can_async_set_filter+0xba>
		if (filter == NULL) {
    3bc2:	687b      	ldr	r3, [r7, #4]
    3bc4:	2b00      	cmp	r3, #0
    3bc6:	d104      	bne.n	3bd2 <_can_async_set_filter+0x92>
			ef->F0.val = 0;
    3bc8:	693b      	ldr	r3, [r7, #16]
    3bca:	2200      	movs	r2, #0
    3bcc:	601a      	str	r2, [r3, #0]
			return ERR_NONE;
    3bce:	2300      	movs	r3, #0
    3bd0:	e014      	b.n	3bfc <_can_async_set_filter+0xbc>
		}
		ef->F0.val      = filter->id;
    3bd2:	687b      	ldr	r3, [r7, #4]
    3bd4:	681a      	ldr	r2, [r3, #0]
    3bd6:	693b      	ldr	r3, [r7, #16]
    3bd8:	601a      	str	r2, [r3, #0]
		ef->F0.bit.EFEC = _CAN_EFEC_STF0M;
    3bda:	693a      	ldr	r2, [r7, #16]
    3bdc:	6813      	ldr	r3, [r2, #0]
    3bde:	2101      	movs	r1, #1
    3be0:	f361 735f 	bfi	r3, r1, #29, #3
    3be4:	6013      	str	r3, [r2, #0]
		ef->F1.val      = filter->mask;
    3be6:	687b      	ldr	r3, [r7, #4]
    3be8:	685a      	ldr	r2, [r3, #4]
    3bea:	693b      	ldr	r3, [r7, #16]
    3bec:	605a      	str	r2, [r3, #4]
		ef->F1.bit.EFT  = _CAN_EFT_CLASSIC;
    3bee:	693a      	ldr	r2, [r7, #16]
    3bf0:	6853      	ldr	r3, [r2, #4]
    3bf2:	2102      	movs	r1, #2
    3bf4:	f361 739f 	bfi	r3, r1, #30, #2
    3bf8:	6053      	str	r3, [r2, #4]
	}

	return ERR_NONE;
    3bfa:	2300      	movs	r3, #0
}
    3bfc:	4618      	mov	r0, r3
    3bfe:	371c      	adds	r7, #28
    3c00:	46bd      	mov	sp, r7
    3c02:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c06:	4770      	bx	lr

00003c08 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    3c08:	b590      	push	{r4, r7, lr}
    3c0a:	b083      	sub	sp, #12
    3c0c:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    3c0e:	4b2c      	ldr	r3, [pc, #176]	; (3cc0 <CAN1_Handler+0xb8>)
    3c10:	681b      	ldr	r3, [r3, #0]
    3c12:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    3c14:	687b      	ldr	r3, [r7, #4]
    3c16:	681b      	ldr	r3, [r3, #0]
    3c18:	4618      	mov	r0, r3
    3c1a:	4b2a      	ldr	r3, [pc, #168]	; (3cc4 <CAN1_Handler+0xbc>)
    3c1c:	4798      	blx	r3
    3c1e:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    3c20:	683b      	ldr	r3, [r7, #0]
    3c22:	f003 0301 	and.w	r3, r3, #1
    3c26:	2b00      	cmp	r3, #0
    3c28:	d003      	beq.n	3c32 <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    3c2a:	687b      	ldr	r3, [r7, #4]
    3c2c:	689b      	ldr	r3, [r3, #8]
    3c2e:	6878      	ldr	r0, [r7, #4]
    3c30:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    3c32:	683b      	ldr	r3, [r7, #0]
    3c34:	f403 7300 	and.w	r3, r3, #512	; 0x200
    3c38:	2b00      	cmp	r3, #0
    3c3a:	d003      	beq.n	3c44 <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    3c3c:	687b      	ldr	r3, [r7, #4]
    3c3e:	685b      	ldr	r3, [r3, #4]
    3c40:	6878      	ldr	r0, [r7, #4]
    3c42:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    3c44:	683b      	ldr	r3, [r7, #0]
    3c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    3c4a:	2b00      	cmp	r3, #0
    3c4c:	d004      	beq.n	3c58 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    3c4e:	687b      	ldr	r3, [r7, #4]
    3c50:	68db      	ldr	r3, [r3, #12]
    3c52:	2103      	movs	r1, #3
    3c54:	6878      	ldr	r0, [r7, #4]
    3c56:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    3c58:	683b      	ldr	r3, [r7, #0]
    3c5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    3c5e:	2b00      	cmp	r3, #0
    3c60:	d004      	beq.n	3c6c <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    3c62:	687b      	ldr	r3, [r7, #4]
    3c64:	68db      	ldr	r3, [r3, #12]
    3c66:	2100      	movs	r1, #0
    3c68:	6878      	ldr	r0, [r7, #4]
    3c6a:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    3c6c:	683b      	ldr	r3, [r7, #0]
    3c6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    3c72:	2b00      	cmp	r3, #0
    3c74:	d00f      	beq.n	3c96 <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    3c76:	687b      	ldr	r3, [r7, #4]
    3c78:	68dc      	ldr	r4, [r3, #12]
    3c7a:	687b      	ldr	r3, [r7, #4]
    3c7c:	681b      	ldr	r3, [r3, #0]
    3c7e:	4618      	mov	r0, r3
    3c80:	4b11      	ldr	r3, [pc, #68]	; (3cc8 <CAN1_Handler+0xc0>)
    3c82:	4798      	blx	r3
    3c84:	4603      	mov	r3, r0
    3c86:	2b00      	cmp	r3, #0
    3c88:	d001      	beq.n	3c8e <CAN1_Handler+0x86>
    3c8a:	2302      	movs	r3, #2
    3c8c:	e000      	b.n	3c90 <CAN1_Handler+0x88>
    3c8e:	2301      	movs	r3, #1
    3c90:	4619      	mov	r1, r3
    3c92:	6878      	ldr	r0, [r7, #4]
    3c94:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    3c96:	683b      	ldr	r3, [r7, #0]
    3c98:	f003 0308 	and.w	r3, r3, #8
    3c9c:	2b00      	cmp	r3, #0
    3c9e:	d004      	beq.n	3caa <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    3ca0:	687b      	ldr	r3, [r7, #4]
    3ca2:	68db      	ldr	r3, [r3, #12]
    3ca4:	2104      	movs	r1, #4
    3ca6:	6878      	ldr	r0, [r7, #4]
    3ca8:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    3caa:	687b      	ldr	r3, [r7, #4]
    3cac:	681b      	ldr	r3, [r3, #0]
    3cae:	6839      	ldr	r1, [r7, #0]
    3cb0:	4618      	mov	r0, r3
    3cb2:	4b06      	ldr	r3, [pc, #24]	; (3ccc <CAN1_Handler+0xc4>)
    3cb4:	4798      	blx	r3
}
    3cb6:	bf00      	nop
    3cb8:	370c      	adds	r7, #12
    3cba:	46bd      	mov	sp, r7
    3cbc:	bd90      	pop	{r4, r7, pc}
    3cbe:	bf00      	nop
    3cc0:	20000bf0 	.word	0x20000bf0
    3cc4:	00003375 	.word	0x00003375
    3cc8:	00003125 	.word	0x00003125
    3ccc:	00003359 	.word	0x00003359

00003cd0 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    3cd0:	b480      	push	{r7}
    3cd2:	b083      	sub	sp, #12
    3cd4:	af00      	add	r7, sp, #0
    3cd6:	4603      	mov	r3, r0
    3cd8:	6039      	str	r1, [r7, #0]
    3cda:	80fb      	strh	r3, [r7, #6]
    3cdc:	4613      	mov	r3, r2
    3cde:	717b      	strb	r3, [r7, #5]
	switch (power) {
    3ce0:	797b      	ldrb	r3, [r7, #5]
    3ce2:	3b04      	subs	r3, #4
    3ce4:	2b05      	cmp	r3, #5
    3ce6:	d86b      	bhi.n	3dc0 <_get_cycles_for_us_internal+0xf0>
    3ce8:	a201      	add	r2, pc, #4	; (adr r2, 3cf0 <_get_cycles_for_us_internal+0x20>)
    3cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3cee:	bf00      	nop
    3cf0:	00003d9f 	.word	0x00003d9f
    3cf4:	00003d7f 	.word	0x00003d7f
    3cf8:	00003d61 	.word	0x00003d61
    3cfc:	00003d43 	.word	0x00003d43
    3d00:	00003d25 	.word	0x00003d25
    3d04:	00003d09 	.word	0x00003d09
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    3d08:	88fb      	ldrh	r3, [r7, #6]
    3d0a:	683a      	ldr	r2, [r7, #0]
    3d0c:	4935      	ldr	r1, [pc, #212]	; (3de4 <_get_cycles_for_us_internal+0x114>)
    3d0e:	fba1 1202 	umull	r1, r2, r1, r2
    3d12:	0c92      	lsrs	r2, r2, #18
    3d14:	fb02 f303 	mul.w	r3, r2, r3
    3d18:	3302      	adds	r3, #2
    3d1a:	4a33      	ldr	r2, [pc, #204]	; (3de8 <_get_cycles_for_us_internal+0x118>)
    3d1c:	fba2 2303 	umull	r2, r3, r2, r3
    3d20:	085b      	lsrs	r3, r3, #1
    3d22:	e059      	b.n	3dd8 <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    3d24:	88fb      	ldrh	r3, [r7, #6]
    3d26:	683a      	ldr	r2, [r7, #0]
    3d28:	0952      	lsrs	r2, r2, #5
    3d2a:	4930      	ldr	r1, [pc, #192]	; (3dec <_get_cycles_for_us_internal+0x11c>)
    3d2c:	fba1 1202 	umull	r1, r2, r1, r2
    3d30:	09d2      	lsrs	r2, r2, #7
    3d32:	fb02 f303 	mul.w	r3, r2, r3
    3d36:	331d      	adds	r3, #29
    3d38:	4a2d      	ldr	r2, [pc, #180]	; (3df0 <_get_cycles_for_us_internal+0x120>)
    3d3a:	fba2 2303 	umull	r2, r3, r2, r3
    3d3e:	091b      	lsrs	r3, r3, #4
    3d40:	e04a      	b.n	3dd8 <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    3d42:	88fb      	ldrh	r3, [r7, #6]
    3d44:	683a      	ldr	r2, [r7, #0]
    3d46:	492b      	ldr	r1, [pc, #172]	; (3df4 <_get_cycles_for_us_internal+0x124>)
    3d48:	fba1 1202 	umull	r1, r2, r1, r2
    3d4c:	0b52      	lsrs	r2, r2, #13
    3d4e:	fb02 f303 	mul.w	r3, r2, r3
    3d52:	f203 132b 	addw	r3, r3, #299	; 0x12b
    3d56:	4a28      	ldr	r2, [pc, #160]	; (3df8 <_get_cycles_for_us_internal+0x128>)
    3d58:	fba2 2303 	umull	r2, r3, r2, r3
    3d5c:	095b      	lsrs	r3, r3, #5
    3d5e:	e03b      	b.n	3dd8 <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    3d60:	88fb      	ldrh	r3, [r7, #6]
    3d62:	683a      	ldr	r2, [r7, #0]
    3d64:	4925      	ldr	r1, [pc, #148]	; (3dfc <_get_cycles_for_us_internal+0x12c>)
    3d66:	fba1 1202 	umull	r1, r2, r1, r2
    3d6a:	0992      	lsrs	r2, r2, #6
    3d6c:	fb02 f303 	mul.w	r3, r2, r3
    3d70:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    3d74:	4a22      	ldr	r2, [pc, #136]	; (3e00 <_get_cycles_for_us_internal+0x130>)
    3d76:	fba2 2303 	umull	r2, r3, r2, r3
    3d7a:	099b      	lsrs	r3, r3, #6
    3d7c:	e02c      	b.n	3dd8 <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    3d7e:	88fb      	ldrh	r3, [r7, #6]
    3d80:	683a      	ldr	r2, [r7, #0]
    3d82:	4920      	ldr	r1, [pc, #128]	; (3e04 <_get_cycles_for_us_internal+0x134>)
    3d84:	fba1 1202 	umull	r1, r2, r1, r2
    3d88:	0952      	lsrs	r2, r2, #5
    3d8a:	fb02 f303 	mul.w	r3, r2, r3
    3d8e:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    3d92:	332f      	adds	r3, #47	; 0x2f
    3d94:	4a1c      	ldr	r2, [pc, #112]	; (3e08 <_get_cycles_for_us_internal+0x138>)
    3d96:	fba2 2303 	umull	r2, r3, r2, r3
    3d9a:	0b5b      	lsrs	r3, r3, #13
    3d9c:	e01c      	b.n	3dd8 <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    3d9e:	88fb      	ldrh	r3, [r7, #6]
    3da0:	683a      	ldr	r2, [r7, #0]
    3da2:	491a      	ldr	r1, [pc, #104]	; (3e0c <_get_cycles_for_us_internal+0x13c>)
    3da4:	fba1 1202 	umull	r1, r2, r1, r2
    3da8:	08d2      	lsrs	r2, r2, #3
    3daa:	fb02 f303 	mul.w	r3, r2, r3
    3dae:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    3db2:	f203 33df 	addw	r3, r3, #991	; 0x3df
    3db6:	4a16      	ldr	r2, [pc, #88]	; (3e10 <_get_cycles_for_us_internal+0x140>)
    3db8:	fba2 2303 	umull	r2, r3, r2, r3
    3dbc:	0c5b      	lsrs	r3, r3, #17
    3dbe:	e00b      	b.n	3dd8 <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    3dc0:	88fb      	ldrh	r3, [r7, #6]
    3dc2:	683a      	ldr	r2, [r7, #0]
    3dc4:	fb02 f303 	mul.w	r3, r2, r3
    3dc8:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    3dcc:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    3dd0:	4a10      	ldr	r2, [pc, #64]	; (3e14 <_get_cycles_for_us_internal+0x144>)
    3dd2:	fba2 2303 	umull	r2, r3, r2, r3
    3dd6:	0c9b      	lsrs	r3, r3, #18
	}
}
    3dd8:	4618      	mov	r0, r3
    3dda:	370c      	adds	r7, #12
    3ddc:	46bd      	mov	sp, r7
    3dde:	f85d 7b04 	ldr.w	r7, [sp], #4
    3de2:	4770      	bx	lr
    3de4:	431bde83 	.word	0x431bde83
    3de8:	aaaaaaab 	.word	0xaaaaaaab
    3dec:	0a7c5ac5 	.word	0x0a7c5ac5
    3df0:	88888889 	.word	0x88888889
    3df4:	d1b71759 	.word	0xd1b71759
    3df8:	1b4e81b5 	.word	0x1b4e81b5
    3dfc:	10624dd3 	.word	0x10624dd3
    3e00:	057619f1 	.word	0x057619f1
    3e04:	51eb851f 	.word	0x51eb851f
    3e08:	45e7b273 	.word	0x45e7b273
    3e0c:	cccccccd 	.word	0xcccccccd
    3e10:	6fd91d85 	.word	0x6fd91d85
    3e14:	165e9f81 	.word	0x165e9f81

00003e18 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    3e18:	b580      	push	{r7, lr}
    3e1a:	b082      	sub	sp, #8
    3e1c:	af00      	add	r7, sp, #0
    3e1e:	4603      	mov	r3, r0
    3e20:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    3e22:	88fb      	ldrh	r3, [r7, #6]
    3e24:	2209      	movs	r2, #9
    3e26:	4904      	ldr	r1, [pc, #16]	; (3e38 <_get_cycles_for_us+0x20>)
    3e28:	4618      	mov	r0, r3
    3e2a:	4b04      	ldr	r3, [pc, #16]	; (3e3c <_get_cycles_for_us+0x24>)
    3e2c:	4798      	blx	r3
    3e2e:	4603      	mov	r3, r0
}
    3e30:	4618      	mov	r0, r3
    3e32:	3708      	adds	r7, #8
    3e34:	46bd      	mov	sp, r7
    3e36:	bd80      	pop	{r7, pc}
    3e38:	07270e00 	.word	0x07270e00
    3e3c:	00003cd1 	.word	0x00003cd1

00003e40 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    3e40:	b480      	push	{r7}
    3e42:	b083      	sub	sp, #12
    3e44:	af00      	add	r7, sp, #0
    3e46:	4603      	mov	r3, r0
    3e48:	6039      	str	r1, [r7, #0]
    3e4a:	80fb      	strh	r3, [r7, #6]
    3e4c:	4613      	mov	r3, r2
    3e4e:	717b      	strb	r3, [r7, #5]
	switch (power) {
    3e50:	797b      	ldrb	r3, [r7, #5]
    3e52:	3b04      	subs	r3, #4
    3e54:	2b05      	cmp	r3, #5
    3e56:	d870      	bhi.n	3f3a <_get_cycles_for_ms_internal+0xfa>
    3e58:	a201      	add	r2, pc, #4	; (adr r2, 3e60 <_get_cycles_for_ms_internal+0x20>)
    3e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3e5e:	bf00      	nop
    3e60:	00003f1d 	.word	0x00003f1d
    3e64:	00003f01 	.word	0x00003f01
    3e68:	00003ee5 	.word	0x00003ee5
    3e6c:	00003ec1 	.word	0x00003ec1
    3e70:	00003e9d 	.word	0x00003e9d
    3e74:	00003e79 	.word	0x00003e79
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    3e78:	88fb      	ldrh	r3, [r7, #6]
    3e7a:	683a      	ldr	r2, [r7, #0]
    3e7c:	4937      	ldr	r1, [pc, #220]	; (3f5c <_get_cycles_for_ms_internal+0x11c>)
    3e7e:	fba1 1202 	umull	r1, r2, r1, r2
    3e82:	0c92      	lsrs	r2, r2, #18
    3e84:	fb02 f303 	mul.w	r3, r2, r3
    3e88:	3302      	adds	r3, #2
    3e8a:	4a35      	ldr	r2, [pc, #212]	; (3f60 <_get_cycles_for_ms_internal+0x120>)
    3e8c:	fba2 2303 	umull	r2, r3, r2, r3
    3e90:	085b      	lsrs	r3, r3, #1
    3e92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3e96:	fb02 f303 	mul.w	r3, r2, r3
    3e9a:	e058      	b.n	3f4e <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    3e9c:	88fb      	ldrh	r3, [r7, #6]
    3e9e:	683a      	ldr	r2, [r7, #0]
    3ea0:	0952      	lsrs	r2, r2, #5
    3ea2:	4930      	ldr	r1, [pc, #192]	; (3f64 <_get_cycles_for_ms_internal+0x124>)
    3ea4:	fba1 1202 	umull	r1, r2, r1, r2
    3ea8:	09d2      	lsrs	r2, r2, #7
    3eaa:	fb02 f303 	mul.w	r3, r2, r3
    3eae:	3302      	adds	r3, #2
    3eb0:	4a2b      	ldr	r2, [pc, #172]	; (3f60 <_get_cycles_for_ms_internal+0x120>)
    3eb2:	fba2 2303 	umull	r2, r3, r2, r3
    3eb6:	085b      	lsrs	r3, r3, #1
    3eb8:	2264      	movs	r2, #100	; 0x64
    3eba:	fb02 f303 	mul.w	r3, r2, r3
    3ebe:	e046      	b.n	3f4e <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    3ec0:	88fb      	ldrh	r3, [r7, #6]
    3ec2:	683a      	ldr	r2, [r7, #0]
    3ec4:	4928      	ldr	r1, [pc, #160]	; (3f68 <_get_cycles_for_ms_internal+0x128>)
    3ec6:	fba1 1202 	umull	r1, r2, r1, r2
    3eca:	0b52      	lsrs	r2, r2, #13
    3ecc:	fb02 f303 	mul.w	r3, r2, r3
    3ed0:	3302      	adds	r3, #2
    3ed2:	4a23      	ldr	r2, [pc, #140]	; (3f60 <_get_cycles_for_ms_internal+0x120>)
    3ed4:	fba2 2303 	umull	r2, r3, r2, r3
    3ed8:	085a      	lsrs	r2, r3, #1
    3eda:	4613      	mov	r3, r2
    3edc:	009b      	lsls	r3, r3, #2
    3ede:	4413      	add	r3, r2
    3ee0:	005b      	lsls	r3, r3, #1
    3ee2:	e034      	b.n	3f4e <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    3ee4:	88fb      	ldrh	r3, [r7, #6]
    3ee6:	683a      	ldr	r2, [r7, #0]
    3ee8:	4920      	ldr	r1, [pc, #128]	; (3f6c <_get_cycles_for_ms_internal+0x12c>)
    3eea:	fba1 1202 	umull	r1, r2, r1, r2
    3eee:	0992      	lsrs	r2, r2, #6
    3ef0:	fb02 f303 	mul.w	r3, r2, r3
    3ef4:	3302      	adds	r3, #2
    3ef6:	4a1a      	ldr	r2, [pc, #104]	; (3f60 <_get_cycles_for_ms_internal+0x120>)
    3ef8:	fba2 2303 	umull	r2, r3, r2, r3
    3efc:	085b      	lsrs	r3, r3, #1
    3efe:	e026      	b.n	3f4e <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    3f00:	88fb      	ldrh	r3, [r7, #6]
    3f02:	683a      	ldr	r2, [r7, #0]
    3f04:	491a      	ldr	r1, [pc, #104]	; (3f70 <_get_cycles_for_ms_internal+0x130>)
    3f06:	fba1 1202 	umull	r1, r2, r1, r2
    3f0a:	0952      	lsrs	r2, r2, #5
    3f0c:	fb02 f303 	mul.w	r3, r2, r3
    3f10:	331d      	adds	r3, #29
    3f12:	4a18      	ldr	r2, [pc, #96]	; (3f74 <_get_cycles_for_ms_internal+0x134>)
    3f14:	fba2 2303 	umull	r2, r3, r2, r3
    3f18:	091b      	lsrs	r3, r3, #4
    3f1a:	e018      	b.n	3f4e <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    3f1c:	88fb      	ldrh	r3, [r7, #6]
    3f1e:	683a      	ldr	r2, [r7, #0]
    3f20:	4915      	ldr	r1, [pc, #84]	; (3f78 <_get_cycles_for_ms_internal+0x138>)
    3f22:	fba1 1202 	umull	r1, r2, r1, r2
    3f26:	08d2      	lsrs	r2, r2, #3
    3f28:	fb02 f303 	mul.w	r3, r2, r3
    3f2c:	f203 132b 	addw	r3, r3, #299	; 0x12b
    3f30:	4a12      	ldr	r2, [pc, #72]	; (3f7c <_get_cycles_for_ms_internal+0x13c>)
    3f32:	fba2 2303 	umull	r2, r3, r2, r3
    3f36:	095b      	lsrs	r3, r3, #5
    3f38:	e009      	b.n	3f4e <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    3f3a:	88fb      	ldrh	r3, [r7, #6]
    3f3c:	683a      	ldr	r2, [r7, #0]
    3f3e:	fb02 f303 	mul.w	r3, r2, r3
    3f42:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    3f46:	4a0e      	ldr	r2, [pc, #56]	; (3f80 <_get_cycles_for_ms_internal+0x140>)
    3f48:	fba2 2303 	umull	r2, r3, r2, r3
    3f4c:	099b      	lsrs	r3, r3, #6
	}
}
    3f4e:	4618      	mov	r0, r3
    3f50:	370c      	adds	r7, #12
    3f52:	46bd      	mov	sp, r7
    3f54:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f58:	4770      	bx	lr
    3f5a:	bf00      	nop
    3f5c:	431bde83 	.word	0x431bde83
    3f60:	aaaaaaab 	.word	0xaaaaaaab
    3f64:	0a7c5ac5 	.word	0x0a7c5ac5
    3f68:	d1b71759 	.word	0xd1b71759
    3f6c:	10624dd3 	.word	0x10624dd3
    3f70:	51eb851f 	.word	0x51eb851f
    3f74:	88888889 	.word	0x88888889
    3f78:	cccccccd 	.word	0xcccccccd
    3f7c:	1b4e81b5 	.word	0x1b4e81b5
    3f80:	057619f1 	.word	0x057619f1

00003f84 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    3f84:	b580      	push	{r7, lr}
    3f86:	b082      	sub	sp, #8
    3f88:	af00      	add	r7, sp, #0
    3f8a:	4603      	mov	r3, r0
    3f8c:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    3f8e:	88fb      	ldrh	r3, [r7, #6]
    3f90:	2209      	movs	r2, #9
    3f92:	4904      	ldr	r1, [pc, #16]	; (3fa4 <_get_cycles_for_ms+0x20>)
    3f94:	4618      	mov	r0, r3
    3f96:	4b04      	ldr	r3, [pc, #16]	; (3fa8 <_get_cycles_for_ms+0x24>)
    3f98:	4798      	blx	r3
    3f9a:	4603      	mov	r3, r0
}
    3f9c:	4618      	mov	r0, r3
    3f9e:	3708      	adds	r7, #8
    3fa0:	46bd      	mov	sp, r7
    3fa2:	bd80      	pop	{r7, pc}
    3fa4:	07270e00 	.word	0x07270e00
    3fa8:	00003e41 	.word	0x00003e41
    3fac:	00000000 	.word	0x00000000

00003fb0 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    3fb0:	b480      	push	{r7}
    3fb2:	b083      	sub	sp, #12
    3fb4:	af00      	add	r7, sp, #0
    3fb6:	6078      	str	r0, [r7, #4]
    3fb8:	6039      	str	r1, [r7, #0]
    3fba:	bf00      	nop
    3fbc:	f3af 8000 	nop.w

00003fc0 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    3fc0:	3901      	subs	r1, #1
    3fc2:	d8fd      	bhi.n	3fc0 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    3fc4:	bf00      	nop
    3fc6:	370c      	adds	r7, #12
    3fc8:	46bd      	mov	sp, r7
    3fca:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fce:	4770      	bx	lr

00003fd0 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    3fd0:	b480      	push	{r7}
    3fd2:	b083      	sub	sp, #12
    3fd4:	af00      	add	r7, sp, #0
    3fd6:	6078      	str	r0, [r7, #4]
    3fd8:	460b      	mov	r3, r1
    3fda:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    3fdc:	687b      	ldr	r3, [r7, #4]
    3fde:	881b      	ldrh	r3, [r3, #0]
    3fe0:	b29a      	uxth	r2, r3
    3fe2:	887b      	ldrh	r3, [r7, #2]
    3fe4:	021b      	lsls	r3, r3, #8
    3fe6:	b29b      	uxth	r3, r3
    3fe8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    3fec:	b29b      	uxth	r3, r3
    3fee:	4313      	orrs	r3, r2
    3ff0:	b29a      	uxth	r2, r3
    3ff2:	687b      	ldr	r3, [r7, #4]
    3ff4:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    3ff6:	bf00      	nop
    3ff8:	370c      	adds	r7, #12
    3ffa:	46bd      	mov	sp, r7
    3ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4000:	4770      	bx	lr

00004002 <hri_port_set_EVCTRL_reg>:
{
    4002:	b480      	push	{r7}
    4004:	b085      	sub	sp, #20
    4006:	af00      	add	r7, sp, #0
    4008:	60f8      	str	r0, [r7, #12]
    400a:	460b      	mov	r3, r1
    400c:	607a      	str	r2, [r7, #4]
    400e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    4010:	7afb      	ldrb	r3, [r7, #11]
    4012:	7afa      	ldrb	r2, [r7, #11]
    4014:	68f9      	ldr	r1, [r7, #12]
    4016:	01d2      	lsls	r2, r2, #7
    4018:	440a      	add	r2, r1
    401a:	322c      	adds	r2, #44	; 0x2c
    401c:	6811      	ldr	r1, [r2, #0]
    401e:	687a      	ldr	r2, [r7, #4]
    4020:	430a      	orrs	r2, r1
    4022:	68f9      	ldr	r1, [r7, #12]
    4024:	01db      	lsls	r3, r3, #7
    4026:	440b      	add	r3, r1
    4028:	332c      	adds	r3, #44	; 0x2c
    402a:	601a      	str	r2, [r3, #0]
}
    402c:	bf00      	nop
    402e:	3714      	adds	r7, #20
    4030:	46bd      	mov	sp, r7
    4032:	f85d 7b04 	ldr.w	r7, [sp], #4
    4036:	4770      	bx	lr

00004038 <_port_event_init>:

static inline void _port_event_init()
{
    4038:	b580      	push	{r7, lr}
    403a:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    403c:	2200      	movs	r2, #0
    403e:	2100      	movs	r1, #0
    4040:	4809      	ldr	r0, [pc, #36]	; (4068 <_port_event_init+0x30>)
    4042:	4b0a      	ldr	r3, [pc, #40]	; (406c <_port_event_init+0x34>)
    4044:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    4046:	2200      	movs	r2, #0
    4048:	2101      	movs	r1, #1
    404a:	4807      	ldr	r0, [pc, #28]	; (4068 <_port_event_init+0x30>)
    404c:	4b07      	ldr	r3, [pc, #28]	; (406c <_port_event_init+0x34>)
    404e:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    4050:	22ef      	movs	r2, #239	; 0xef
    4052:	2102      	movs	r1, #2
    4054:	4804      	ldr	r0, [pc, #16]	; (4068 <_port_event_init+0x30>)
    4056:	4b05      	ldr	r3, [pc, #20]	; (406c <_port_event_init+0x34>)
    4058:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    405a:	2200      	movs	r2, #0
    405c:	2103      	movs	r1, #3
    405e:	4802      	ldr	r0, [pc, #8]	; (4068 <_port_event_init+0x30>)
    4060:	4b02      	ldr	r3, [pc, #8]	; (406c <_port_event_init+0x34>)
    4062:	4798      	blx	r3
}
    4064:	bf00      	nop
    4066:	bd80      	pop	{r7, pc}
    4068:	41008000 	.word	0x41008000
    406c:	00004003 	.word	0x00004003

00004070 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    4070:	b580      	push	{r7, lr}
    4072:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    4074:	2104      	movs	r1, #4
    4076:	480b      	ldr	r0, [pc, #44]	; (40a4 <_init_chip+0x34>)
    4078:	4b0b      	ldr	r3, [pc, #44]	; (40a8 <_init_chip+0x38>)
    407a:	4798      	blx	r3

	_osc32kctrl_init_sources();
    407c:	4b0b      	ldr	r3, [pc, #44]	; (40ac <_init_chip+0x3c>)
    407e:	4798      	blx	r3
	_oscctrl_init_sources();
    4080:	4b0b      	ldr	r3, [pc, #44]	; (40b0 <_init_chip+0x40>)
    4082:	4798      	blx	r3
	_mclk_init();
    4084:	4b0b      	ldr	r3, [pc, #44]	; (40b4 <_init_chip+0x44>)
    4086:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    4088:	f44f 6084 	mov.w	r0, #1056	; 0x420
    408c:	4b0a      	ldr	r3, [pc, #40]	; (40b8 <_init_chip+0x48>)
    408e:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    4090:	4b0a      	ldr	r3, [pc, #40]	; (40bc <_init_chip+0x4c>)
    4092:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    4094:	f640 30df 	movw	r0, #3039	; 0xbdf
    4098:	4b07      	ldr	r3, [pc, #28]	; (40b8 <_init_chip+0x48>)
    409a:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    409c:	4b08      	ldr	r3, [pc, #32]	; (40c0 <_init_chip+0x50>)
    409e:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    40a0:	bf00      	nop
    40a2:	bd80      	pop	{r7, pc}
    40a4:	41004000 	.word	0x41004000
    40a8:	00003fd1 	.word	0x00003fd1
    40ac:	000049b1 	.word	0x000049b1
    40b0:	00004e79 	.word	0x00004e79
    40b4:	000048d1 	.word	0x000048d1
    40b8:	000047d9 	.word	0x000047d9
    40bc:	00004eb9 	.word	0x00004eb9
    40c0:	00004039 	.word	0x00004039

000040c4 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    40c4:	b480      	push	{r7}
    40c6:	b083      	sub	sp, #12
    40c8:	af00      	add	r7, sp, #0
    40ca:	6078      	str	r0, [r7, #4]
    40cc:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    40ce:	687b      	ldr	r3, [r7, #4]
    40d0:	683a      	ldr	r2, [r7, #0]
    40d2:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    40d4:	2300      	movs	r3, #0
}
    40d6:	4618      	mov	r0, r3
    40d8:	370c      	adds	r7, #12
    40da:	46bd      	mov	sp, r7
    40dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    40e0:	4770      	bx	lr
	...

000040e4 <__NVIC_EnableIRQ>:
{
    40e4:	b480      	push	{r7}
    40e6:	b083      	sub	sp, #12
    40e8:	af00      	add	r7, sp, #0
    40ea:	4603      	mov	r3, r0
    40ec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    40ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    40f2:	2b00      	cmp	r3, #0
    40f4:	db0b      	blt.n	410e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    40f6:	4909      	ldr	r1, [pc, #36]	; (411c <__NVIC_EnableIRQ+0x38>)
    40f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    40fc:	095b      	lsrs	r3, r3, #5
    40fe:	88fa      	ldrh	r2, [r7, #6]
    4100:	f002 021f 	and.w	r2, r2, #31
    4104:	2001      	movs	r0, #1
    4106:	fa00 f202 	lsl.w	r2, r0, r2
    410a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    410e:	bf00      	nop
    4110:	370c      	adds	r7, #12
    4112:	46bd      	mov	sp, r7
    4114:	f85d 7b04 	ldr.w	r7, [sp], #4
    4118:	4770      	bx	lr
    411a:	bf00      	nop
    411c:	e000e100 	.word	0xe000e100

00004120 <__NVIC_DisableIRQ>:
{
    4120:	b480      	push	{r7}
    4122:	b083      	sub	sp, #12
    4124:	af00      	add	r7, sp, #0
    4126:	4603      	mov	r3, r0
    4128:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    412a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    412e:	2b00      	cmp	r3, #0
    4130:	db10      	blt.n	4154 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4132:	490b      	ldr	r1, [pc, #44]	; (4160 <__NVIC_DisableIRQ+0x40>)
    4134:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4138:	095b      	lsrs	r3, r3, #5
    413a:	88fa      	ldrh	r2, [r7, #6]
    413c:	f002 021f 	and.w	r2, r2, #31
    4140:	2001      	movs	r0, #1
    4142:	fa00 f202 	lsl.w	r2, r0, r2
    4146:	3320      	adds	r3, #32
    4148:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    414c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4150:	f3bf 8f6f 	isb	sy
}
    4154:	bf00      	nop
    4156:	370c      	adds	r7, #12
    4158:	46bd      	mov	sp, r7
    415a:	f85d 7b04 	ldr.w	r7, [sp], #4
    415e:	4770      	bx	lr
    4160:	e000e100 	.word	0xe000e100

00004164 <__NVIC_ClearPendingIRQ>:
{
    4164:	b480      	push	{r7}
    4166:	b083      	sub	sp, #12
    4168:	af00      	add	r7, sp, #0
    416a:	4603      	mov	r3, r0
    416c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    416e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4172:	2b00      	cmp	r3, #0
    4174:	db0c      	blt.n	4190 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4176:	4909      	ldr	r1, [pc, #36]	; (419c <__NVIC_ClearPendingIRQ+0x38>)
    4178:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    417c:	095b      	lsrs	r3, r3, #5
    417e:	88fa      	ldrh	r2, [r7, #6]
    4180:	f002 021f 	and.w	r2, r2, #31
    4184:	2001      	movs	r0, #1
    4186:	fa00 f202 	lsl.w	r2, r0, r2
    418a:	3360      	adds	r3, #96	; 0x60
    418c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4190:	bf00      	nop
    4192:	370c      	adds	r7, #12
    4194:	46bd      	mov	sp, r7
    4196:	f85d 7b04 	ldr.w	r7, [sp], #4
    419a:	4770      	bx	lr
    419c:	e000e100 	.word	0xe000e100

000041a0 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    41a0:	b480      	push	{r7}
    41a2:	b083      	sub	sp, #12
    41a4:	af00      	add	r7, sp, #0
    41a6:	6078      	str	r0, [r7, #4]
    41a8:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    41aa:	bf00      	nop
    41ac:	687b      	ldr	r3, [r7, #4]
    41ae:	685a      	ldr	r2, [r3, #4]
    41b0:	683b      	ldr	r3, [r7, #0]
    41b2:	4013      	ands	r3, r2
    41b4:	2b00      	cmp	r3, #0
    41b6:	d1f9      	bne.n	41ac <hri_eic_wait_for_sync+0xc>
	};
}
    41b8:	bf00      	nop
    41ba:	370c      	adds	r7, #12
    41bc:	46bd      	mov	sp, r7
    41be:	f85d 7b04 	ldr.w	r7, [sp], #4
    41c2:	4770      	bx	lr

000041c4 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    41c4:	b480      	push	{r7}
    41c6:	b083      	sub	sp, #12
    41c8:	af00      	add	r7, sp, #0
    41ca:	6078      	str	r0, [r7, #4]
    41cc:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    41ce:	687b      	ldr	r3, [r7, #4]
    41d0:	685a      	ldr	r2, [r3, #4]
    41d2:	683b      	ldr	r3, [r7, #0]
    41d4:	4013      	ands	r3, r2
    41d6:	2b00      	cmp	r3, #0
    41d8:	bf14      	ite	ne
    41da:	2301      	movne	r3, #1
    41dc:	2300      	moveq	r3, #0
    41de:	b2db      	uxtb	r3, r3
}
    41e0:	4618      	mov	r0, r3
    41e2:	370c      	adds	r7, #12
    41e4:	46bd      	mov	sp, r7
    41e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    41ea:	4770      	bx	lr

000041ec <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    41ec:	b480      	push	{r7}
    41ee:	b083      	sub	sp, #12
    41f0:	af00      	add	r7, sp, #0
    41f2:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    41f4:	687b      	ldr	r3, [r7, #4]
    41f6:	695b      	ldr	r3, [r3, #20]
}
    41f8:	4618      	mov	r0, r3
    41fa:	370c      	adds	r7, #12
    41fc:	46bd      	mov	sp, r7
    41fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    4202:	4770      	bx	lr

00004204 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    4204:	b480      	push	{r7}
    4206:	b083      	sub	sp, #12
    4208:	af00      	add	r7, sp, #0
    420a:	6078      	str	r0, [r7, #4]
    420c:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    420e:	687b      	ldr	r3, [r7, #4]
    4210:	683a      	ldr	r2, [r7, #0]
    4212:	615a      	str	r2, [r3, #20]
}
    4214:	bf00      	nop
    4216:	370c      	adds	r7, #12
    4218:	46bd      	mov	sp, r7
    421a:	f85d 7b04 	ldr.w	r7, [sp], #4
    421e:	4770      	bx	lr

00004220 <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    4220:	b580      	push	{r7, lr}
    4222:	b082      	sub	sp, #8
    4224:	af00      	add	r7, sp, #0
    4226:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    4228:	687b      	ldr	r3, [r7, #4]
    422a:	781b      	ldrb	r3, [r3, #0]
    422c:	b2db      	uxtb	r3, r3
    422e:	f043 0302 	orr.w	r3, r3, #2
    4232:	b2da      	uxtb	r2, r3
    4234:	687b      	ldr	r3, [r7, #4]
    4236:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    4238:	2103      	movs	r1, #3
    423a:	6878      	ldr	r0, [r7, #4]
    423c:	4b02      	ldr	r3, [pc, #8]	; (4248 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    423e:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4240:	bf00      	nop
    4242:	3708      	adds	r7, #8
    4244:	46bd      	mov	sp, r7
    4246:	bd80      	pop	{r7, pc}
    4248:	000041a1 	.word	0x000041a1

0000424c <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    424c:	b580      	push	{r7, lr}
    424e:	b082      	sub	sp, #8
    4250:	af00      	add	r7, sp, #0
    4252:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    4254:	687b      	ldr	r3, [r7, #4]
    4256:	781b      	ldrb	r3, [r3, #0]
    4258:	b2db      	uxtb	r3, r3
    425a:	f023 0302 	bic.w	r3, r3, #2
    425e:	b2da      	uxtb	r2, r3
    4260:	687b      	ldr	r3, [r7, #4]
    4262:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    4264:	2103      	movs	r1, #3
    4266:	6878      	ldr	r0, [r7, #4]
    4268:	4b02      	ldr	r3, [pc, #8]	; (4274 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    426a:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    426c:	bf00      	nop
    426e:	3708      	adds	r7, #8
    4270:	46bd      	mov	sp, r7
    4272:	bd80      	pop	{r7, pc}
    4274:	000041a1 	.word	0x000041a1

00004278 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    4278:	b580      	push	{r7, lr}
    427a:	b084      	sub	sp, #16
    427c:	af00      	add	r7, sp, #0
    427e:	6078      	str	r0, [r7, #4]
    4280:	460b      	mov	r3, r1
    4282:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    4284:	687b      	ldr	r3, [r7, #4]
    4286:	781b      	ldrb	r3, [r3, #0]
    4288:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    428a:	7bfb      	ldrb	r3, [r7, #15]
    428c:	f023 0310 	bic.w	r3, r3, #16
    4290:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    4292:	78fb      	ldrb	r3, [r7, #3]
    4294:	011b      	lsls	r3, r3, #4
    4296:	b25a      	sxtb	r2, r3
    4298:	f997 300f 	ldrsb.w	r3, [r7, #15]
    429c:	4313      	orrs	r3, r2
    429e:	b25b      	sxtb	r3, r3
    42a0:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    42a2:	687b      	ldr	r3, [r7, #4]
    42a4:	7bfa      	ldrb	r2, [r7, #15]
    42a6:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    42a8:	2103      	movs	r1, #3
    42aa:	6878      	ldr	r0, [r7, #4]
    42ac:	4b02      	ldr	r3, [pc, #8]	; (42b8 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    42ae:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    42b0:	bf00      	nop
    42b2:	3710      	adds	r7, #16
    42b4:	46bd      	mov	sp, r7
    42b6:	bd80      	pop	{r7, pc}
    42b8:	000041a1 	.word	0x000041a1

000042bc <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    42bc:	b580      	push	{r7, lr}
    42be:	b084      	sub	sp, #16
    42c0:	af00      	add	r7, sp, #0
    42c2:	6078      	str	r0, [r7, #4]
    42c4:	460b      	mov	r3, r1
    42c6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    42c8:	2103      	movs	r1, #3
    42ca:	6878      	ldr	r0, [r7, #4]
    42cc:	4b06      	ldr	r3, [pc, #24]	; (42e8 <hri_eic_get_CTRLA_reg+0x2c>)
    42ce:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    42d0:	687b      	ldr	r3, [r7, #4]
    42d2:	781b      	ldrb	r3, [r3, #0]
    42d4:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    42d6:	7bfa      	ldrb	r2, [r7, #15]
    42d8:	78fb      	ldrb	r3, [r7, #3]
    42da:	4013      	ands	r3, r2
    42dc:	73fb      	strb	r3, [r7, #15]
	return tmp;
    42de:	7bfb      	ldrb	r3, [r7, #15]
}
    42e0:	4618      	mov	r0, r3
    42e2:	3710      	adds	r7, #16
    42e4:	46bd      	mov	sp, r7
    42e6:	bd80      	pop	{r7, pc}
    42e8:	000041a1 	.word	0x000041a1

000042ec <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    42ec:	b580      	push	{r7, lr}
    42ee:	b082      	sub	sp, #8
    42f0:	af00      	add	r7, sp, #0
    42f2:	6078      	str	r0, [r7, #4]
    42f4:	460b      	mov	r3, r1
    42f6:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    42f8:	687b      	ldr	r3, [r7, #4]
    42fa:	78fa      	ldrb	r2, [r7, #3]
    42fc:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    42fe:	2103      	movs	r1, #3
    4300:	6878      	ldr	r0, [r7, #4]
    4302:	4b03      	ldr	r3, [pc, #12]	; (4310 <hri_eic_write_CTRLA_reg+0x24>)
    4304:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4306:	bf00      	nop
    4308:	3708      	adds	r7, #8
    430a:	46bd      	mov	sp, r7
    430c:	bd80      	pop	{r7, pc}
    430e:	bf00      	nop
    4310:	000041a1 	.word	0x000041a1

00004314 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    4314:	b480      	push	{r7}
    4316:	b083      	sub	sp, #12
    4318:	af00      	add	r7, sp, #0
    431a:	6078      	str	r0, [r7, #4]
    431c:	460b      	mov	r3, r1
    431e:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    4320:	687b      	ldr	r3, [r7, #4]
    4322:	78fa      	ldrb	r2, [r7, #3]
    4324:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4326:	bf00      	nop
    4328:	370c      	adds	r7, #12
    432a:	46bd      	mov	sp, r7
    432c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4330:	4770      	bx	lr

00004332 <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    4332:	b480      	push	{r7}
    4334:	b083      	sub	sp, #12
    4336:	af00      	add	r7, sp, #0
    4338:	6078      	str	r0, [r7, #4]
    433a:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    433c:	687b      	ldr	r3, [r7, #4]
    433e:	683a      	ldr	r2, [r7, #0]
    4340:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4342:	bf00      	nop
    4344:	370c      	adds	r7, #12
    4346:	46bd      	mov	sp, r7
    4348:	f85d 7b04 	ldr.w	r7, [sp], #4
    434c:	4770      	bx	lr

0000434e <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    434e:	b480      	push	{r7}
    4350:	b083      	sub	sp, #12
    4352:	af00      	add	r7, sp, #0
    4354:	6078      	str	r0, [r7, #4]
    4356:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    4358:	687b      	ldr	r3, [r7, #4]
    435a:	683a      	ldr	r2, [r7, #0]
    435c:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    435e:	bf00      	nop
    4360:	370c      	adds	r7, #12
    4362:	46bd      	mov	sp, r7
    4364:	f85d 7b04 	ldr.w	r7, [sp], #4
    4368:	4770      	bx	lr

0000436a <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    436a:	b480      	push	{r7}
    436c:	b085      	sub	sp, #20
    436e:	af00      	add	r7, sp, #0
    4370:	60f8      	str	r0, [r7, #12]
    4372:	460b      	mov	r3, r1
    4374:	607a      	str	r2, [r7, #4]
    4376:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    4378:	7afb      	ldrb	r3, [r7, #11]
    437a:	68fa      	ldr	r2, [r7, #12]
    437c:	3306      	adds	r3, #6
    437e:	009b      	lsls	r3, r3, #2
    4380:	4413      	add	r3, r2
    4382:	687a      	ldr	r2, [r7, #4]
    4384:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4386:	bf00      	nop
    4388:	3714      	adds	r7, #20
    438a:	46bd      	mov	sp, r7
    438c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4390:	4770      	bx	lr

00004392 <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    4392:	b480      	push	{r7}
    4394:	b083      	sub	sp, #12
    4396:	af00      	add	r7, sp, #0
    4398:	6078      	str	r0, [r7, #4]
    439a:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    439c:	687b      	ldr	r3, [r7, #4]
    439e:	683a      	ldr	r2, [r7, #0]
    43a0:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    43a2:	bf00      	nop
    43a4:	370c      	adds	r7, #12
    43a6:	46bd      	mov	sp, r7
    43a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    43ac:	4770      	bx	lr

000043ae <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    43ae:	b480      	push	{r7}
    43b0:	b083      	sub	sp, #12
    43b2:	af00      	add	r7, sp, #0
    43b4:	6078      	str	r0, [r7, #4]
    43b6:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    43b8:	687b      	ldr	r3, [r7, #4]
    43ba:	683a      	ldr	r2, [r7, #0]
    43bc:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    43be:	bf00      	nop
    43c0:	370c      	adds	r7, #12
    43c2:	46bd      	mov	sp, r7
    43c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    43c8:	4770      	bx	lr
	...

000043cc <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    43cc:	b580      	push	{r7, lr}
    43ce:	b082      	sub	sp, #8
    43d0:	af00      	add	r7, sp, #0
    43d2:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    43d4:	2101      	movs	r1, #1
    43d6:	4838      	ldr	r0, [pc, #224]	; (44b8 <_ext_irq_init+0xec>)
    43d8:	4b38      	ldr	r3, [pc, #224]	; (44bc <_ext_irq_init+0xf0>)
    43da:	4798      	blx	r3
    43dc:	4603      	mov	r3, r0
    43de:	f083 0301 	eor.w	r3, r3, #1
    43e2:	b2db      	uxtb	r3, r3
    43e4:	2b00      	cmp	r3, #0
    43e6:	d011      	beq.n	440c <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    43e8:	2102      	movs	r1, #2
    43ea:	4833      	ldr	r0, [pc, #204]	; (44b8 <_ext_irq_init+0xec>)
    43ec:	4b34      	ldr	r3, [pc, #208]	; (44c0 <_ext_irq_init+0xf4>)
    43ee:	4798      	blx	r3
    43f0:	4603      	mov	r3, r0
    43f2:	2b00      	cmp	r3, #0
    43f4:	d006      	beq.n	4404 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    43f6:	4830      	ldr	r0, [pc, #192]	; (44b8 <_ext_irq_init+0xec>)
    43f8:	4b32      	ldr	r3, [pc, #200]	; (44c4 <_ext_irq_init+0xf8>)
    43fa:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    43fc:	2102      	movs	r1, #2
    43fe:	482e      	ldr	r0, [pc, #184]	; (44b8 <_ext_irq_init+0xec>)
    4400:	4b31      	ldr	r3, [pc, #196]	; (44c8 <_ext_irq_init+0xfc>)
    4402:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    4404:	2101      	movs	r1, #1
    4406:	482c      	ldr	r0, [pc, #176]	; (44b8 <_ext_irq_init+0xec>)
    4408:	4b30      	ldr	r3, [pc, #192]	; (44cc <_ext_irq_init+0x100>)
    440a:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    440c:	2101      	movs	r1, #1
    440e:	482a      	ldr	r0, [pc, #168]	; (44b8 <_ext_irq_init+0xec>)
    4410:	4b2d      	ldr	r3, [pc, #180]	; (44c8 <_ext_irq_init+0xfc>)
    4412:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    4414:	2100      	movs	r1, #0
    4416:	4828      	ldr	r0, [pc, #160]	; (44b8 <_ext_irq_init+0xec>)
    4418:	4b2d      	ldr	r3, [pc, #180]	; (44d0 <_ext_irq_init+0x104>)
    441a:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    441c:	2100      	movs	r1, #0
    441e:	4826      	ldr	r0, [pc, #152]	; (44b8 <_ext_irq_init+0xec>)
    4420:	4b2c      	ldr	r3, [pc, #176]	; (44d4 <_ext_irq_init+0x108>)
    4422:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    4424:	2100      	movs	r1, #0
    4426:	4824      	ldr	r0, [pc, #144]	; (44b8 <_ext_irq_init+0xec>)
    4428:	4b2b      	ldr	r3, [pc, #172]	; (44d8 <_ext_irq_init+0x10c>)
    442a:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    442c:	2130      	movs	r1, #48	; 0x30
    442e:	4822      	ldr	r0, [pc, #136]	; (44b8 <_ext_irq_init+0xec>)
    4430:	4b2a      	ldr	r3, [pc, #168]	; (44dc <_ext_irq_init+0x110>)
    4432:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    4434:	2130      	movs	r1, #48	; 0x30
    4436:	4820      	ldr	r0, [pc, #128]	; (44b8 <_ext_irq_init+0xec>)
    4438:	4b29      	ldr	r3, [pc, #164]	; (44e0 <_ext_irq_init+0x114>)
    443a:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    443c:	2100      	movs	r1, #0
    443e:	481e      	ldr	r0, [pc, #120]	; (44b8 <_ext_irq_init+0xec>)
    4440:	4b28      	ldr	r3, [pc, #160]	; (44e4 <_ext_irq_init+0x118>)
    4442:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    4444:	f44f 0219 	mov.w	r2, #10027008	; 0x990000
    4448:	2100      	movs	r1, #0
    444a:	481b      	ldr	r0, [pc, #108]	; (44b8 <_ext_irq_init+0xec>)
    444c:	4b26      	ldr	r3, [pc, #152]	; (44e8 <_ext_irq_init+0x11c>)
    444e:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    4450:	2200      	movs	r2, #0
    4452:	2101      	movs	r1, #1
    4454:	4818      	ldr	r0, [pc, #96]	; (44b8 <_ext_irq_init+0xec>)
    4456:	4b24      	ldr	r3, [pc, #144]	; (44e8 <_ext_irq_init+0x11c>)
    4458:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    445a:	4817      	ldr	r0, [pc, #92]	; (44b8 <_ext_irq_init+0xec>)
    445c:	4b23      	ldr	r3, [pc, #140]	; (44ec <_ext_irq_init+0x120>)
    445e:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    4460:	2010      	movs	r0, #16
    4462:	4b23      	ldr	r3, [pc, #140]	; (44f0 <_ext_irq_init+0x124>)
    4464:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    4466:	2010      	movs	r0, #16
    4468:	4b22      	ldr	r3, [pc, #136]	; (44f4 <_ext_irq_init+0x128>)
    446a:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    446c:	2010      	movs	r0, #16
    446e:	4b22      	ldr	r3, [pc, #136]	; (44f8 <_ext_irq_init+0x12c>)
    4470:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    4472:	2011      	movs	r0, #17
    4474:	4b1e      	ldr	r3, [pc, #120]	; (44f0 <_ext_irq_init+0x124>)
    4476:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    4478:	2011      	movs	r0, #17
    447a:	4b1e      	ldr	r3, [pc, #120]	; (44f4 <_ext_irq_init+0x128>)
    447c:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    447e:	2011      	movs	r0, #17
    4480:	4b1d      	ldr	r3, [pc, #116]	; (44f8 <_ext_irq_init+0x12c>)
    4482:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    4484:	2012      	movs	r0, #18
    4486:	4b1a      	ldr	r3, [pc, #104]	; (44f0 <_ext_irq_init+0x124>)
    4488:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    448a:	2012      	movs	r0, #18
    448c:	4b19      	ldr	r3, [pc, #100]	; (44f4 <_ext_irq_init+0x128>)
    448e:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    4490:	2012      	movs	r0, #18
    4492:	4b19      	ldr	r3, [pc, #100]	; (44f8 <_ext_irq_init+0x12c>)
    4494:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    4496:	2013      	movs	r0, #19
    4498:	4b15      	ldr	r3, [pc, #84]	; (44f0 <_ext_irq_init+0x124>)
    449a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    449c:	2013      	movs	r0, #19
    449e:	4b15      	ldr	r3, [pc, #84]	; (44f4 <_ext_irq_init+0x128>)
    44a0:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    44a2:	2013      	movs	r0, #19
    44a4:	4b14      	ldr	r3, [pc, #80]	; (44f8 <_ext_irq_init+0x12c>)
    44a6:	4798      	blx	r3

	callback = cb;
    44a8:	4a14      	ldr	r2, [pc, #80]	; (44fc <_ext_irq_init+0x130>)
    44aa:	687b      	ldr	r3, [r7, #4]
    44ac:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    44ae:	2300      	movs	r3, #0
}
    44b0:	4618      	mov	r0, r3
    44b2:	3708      	adds	r7, #8
    44b4:	46bd      	mov	sp, r7
    44b6:	bd80      	pop	{r7, pc}
    44b8:	40002800 	.word	0x40002800
    44bc:	000041c5 	.word	0x000041c5
    44c0:	000042bd 	.word	0x000042bd
    44c4:	0000424d 	.word	0x0000424d
    44c8:	000041a1 	.word	0x000041a1
    44cc:	000042ed 	.word	0x000042ed
    44d0:	00004279 	.word	0x00004279
    44d4:	00004315 	.word	0x00004315
    44d8:	00004333 	.word	0x00004333
    44dc:	0000434f 	.word	0x0000434f
    44e0:	00004393 	.word	0x00004393
    44e4:	000043af 	.word	0x000043af
    44e8:	0000436b 	.word	0x0000436b
    44ec:	00004221 	.word	0x00004221
    44f0:	00004121 	.word	0x00004121
    44f4:	00004165 	.word	0x00004165
    44f8:	000040e5 	.word	0x000040e5
    44fc:	20000bf4 	.word	0x20000bf4

00004500 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    4500:	b580      	push	{r7, lr}
    4502:	b084      	sub	sp, #16
    4504:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    4506:	4841      	ldr	r0, [pc, #260]	; (460c <_ext_irq_handler+0x10c>)
    4508:	4b41      	ldr	r3, [pc, #260]	; (4610 <_ext_irq_handler+0x110>)
    450a:	4798      	blx	r3
    450c:	4603      	mov	r3, r0
    450e:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    4510:	f04f 33ff 	mov.w	r3, #4294967295
    4514:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    4516:	683b      	ldr	r3, [r7, #0]
    4518:	4619      	mov	r1, r3
    451a:	483c      	ldr	r0, [pc, #240]	; (460c <_ext_irq_handler+0x10c>)
    451c:	4b3d      	ldr	r3, [pc, #244]	; (4614 <_ext_irq_handler+0x114>)
    451e:	4798      	blx	r3

	ASSERT(callback);
    4520:	4b3d      	ldr	r3, [pc, #244]	; (4618 <_ext_irq_handler+0x118>)
    4522:	681b      	ldr	r3, [r3, #0]
    4524:	2b00      	cmp	r3, #0
    4526:	bf14      	ite	ne
    4528:	2301      	movne	r3, #1
    452a:	2300      	moveq	r3, #0
    452c:	b2db      	uxtb	r3, r3
    452e:	22f4      	movs	r2, #244	; 0xf4
    4530:	493a      	ldr	r1, [pc, #232]	; (461c <_ext_irq_handler+0x11c>)
    4532:	4618      	mov	r0, r3
    4534:	4b3a      	ldr	r3, [pc, #232]	; (4620 <_ext_irq_handler+0x120>)
    4536:	4798      	blx	r3

	while (flags) {
    4538:	e060      	b.n	45fc <_ext_irq_handler+0xfc>
		pos = ffs(flags) - 1;
    453a:	683b      	ldr	r3, [r7, #0]
    453c:	4618      	mov	r0, r3
    453e:	4b39      	ldr	r3, [pc, #228]	; (4624 <_ext_irq_handler+0x124>)
    4540:	4798      	blx	r3
    4542:	4603      	mov	r3, r0
    4544:	b2db      	uxtb	r3, r3
    4546:	3b01      	subs	r3, #1
    4548:	b2db      	uxtb	r3, r3
    454a:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    454c:	e047      	b.n	45de <_ext_irq_handler+0xde>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    454e:	2300      	movs	r3, #0
    4550:	71fb      	strb	r3, [r7, #7]
    4552:	2304      	movs	r3, #4
    4554:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    4556:	e024      	b.n	45a2 <_ext_irq_handler+0xa2>
				middle = (upper + lower) >> 1;
    4558:	79ba      	ldrb	r2, [r7, #6]
    455a:	79fb      	ldrb	r3, [r7, #7]
    455c:	4413      	add	r3, r2
    455e:	105b      	asrs	r3, r3, #1
    4560:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    4562:	797b      	ldrb	r3, [r7, #5]
    4564:	4a30      	ldr	r2, [pc, #192]	; (4628 <_ext_irq_handler+0x128>)
    4566:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    456a:	461a      	mov	r2, r3
    456c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4570:	429a      	cmp	r2, r3
    4572:	d106      	bne.n	4582 <_ext_irq_handler+0x82>
					pin = _map[middle].pin;
    4574:	797b      	ldrb	r3, [r7, #5]
    4576:	4a2c      	ldr	r2, [pc, #176]	; (4628 <_ext_irq_handler+0x128>)
    4578:	00db      	lsls	r3, r3, #3
    457a:	4413      	add	r3, r2
    457c:	685b      	ldr	r3, [r3, #4]
    457e:	60bb      	str	r3, [r7, #8]
					break;
    4580:	e013      	b.n	45aa <_ext_irq_handler+0xaa>
				}
				if (_map[middle].extint < pos) {
    4582:	797b      	ldrb	r3, [r7, #5]
    4584:	4a28      	ldr	r2, [pc, #160]	; (4628 <_ext_irq_handler+0x128>)
    4586:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    458a:	461a      	mov	r2, r3
    458c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4590:	429a      	cmp	r2, r3
    4592:	da03      	bge.n	459c <_ext_irq_handler+0x9c>
					lower = middle + 1;
    4594:	797b      	ldrb	r3, [r7, #5]
    4596:	3301      	adds	r3, #1
    4598:	71fb      	strb	r3, [r7, #7]
    459a:	e002      	b.n	45a2 <_ext_irq_handler+0xa2>
				} else {
					upper = middle - 1;
    459c:	797b      	ldrb	r3, [r7, #5]
    459e:	3b01      	subs	r3, #1
    45a0:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    45a2:	79ba      	ldrb	r2, [r7, #6]
    45a4:	79fb      	ldrb	r3, [r7, #7]
    45a6:	429a      	cmp	r2, r3
    45a8:	d2d6      	bcs.n	4558 <_ext_irq_handler+0x58>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    45aa:	68bb      	ldr	r3, [r7, #8]
    45ac:	f1b3 3fff 	cmp.w	r3, #4294967295
    45b0:	d003      	beq.n	45ba <_ext_irq_handler+0xba>
				callback(pin);
    45b2:	4b19      	ldr	r3, [pc, #100]	; (4618 <_ext_irq_handler+0x118>)
    45b4:	681b      	ldr	r3, [r3, #0]
    45b6:	68b8      	ldr	r0, [r7, #8]
    45b8:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    45ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
    45be:	2201      	movs	r2, #1
    45c0:	fa02 f303 	lsl.w	r3, r2, r3
    45c4:	43da      	mvns	r2, r3
    45c6:	683b      	ldr	r3, [r7, #0]
    45c8:	4013      	ands	r3, r2
    45ca:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    45cc:	683b      	ldr	r3, [r7, #0]
    45ce:	4618      	mov	r0, r3
    45d0:	4b14      	ldr	r3, [pc, #80]	; (4624 <_ext_irq_handler+0x124>)
    45d2:	4798      	blx	r3
    45d4:	4603      	mov	r3, r0
    45d6:	b2db      	uxtb	r3, r3
    45d8:	3b01      	subs	r3, #1
    45da:	b2db      	uxtb	r3, r3
    45dc:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    45de:	f997 300f 	ldrsb.w	r3, [r7, #15]
    45e2:	f1b3 3fff 	cmp.w	r3, #4294967295
    45e6:	d1b2      	bne.n	454e <_ext_irq_handler+0x4e>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    45e8:	4808      	ldr	r0, [pc, #32]	; (460c <_ext_irq_handler+0x10c>)
    45ea:	4b09      	ldr	r3, [pc, #36]	; (4610 <_ext_irq_handler+0x110>)
    45ec:	4798      	blx	r3
    45ee:	4603      	mov	r3, r0
    45f0:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    45f2:	683b      	ldr	r3, [r7, #0]
    45f4:	4619      	mov	r1, r3
    45f6:	4805      	ldr	r0, [pc, #20]	; (460c <_ext_irq_handler+0x10c>)
    45f8:	4b06      	ldr	r3, [pc, #24]	; (4614 <_ext_irq_handler+0x114>)
    45fa:	4798      	blx	r3
	while (flags) {
    45fc:	683b      	ldr	r3, [r7, #0]
    45fe:	2b00      	cmp	r3, #0
    4600:	d19b      	bne.n	453a <_ext_irq_handler+0x3a>
	}
}
    4602:	bf00      	nop
    4604:	3710      	adds	r7, #16
    4606:	46bd      	mov	sp, r7
    4608:	bd80      	pop	{r7, pc}
    460a:	bf00      	nop
    460c:	40002800 	.word	0x40002800
    4610:	000041ed 	.word	0x000041ed
    4614:	00004205 	.word	0x00004205
    4618:	20000bf4 	.word	0x20000bf4
    461c:	00012fe8 	.word	0x00012fe8
    4620:	00002edd 	.word	0x00002edd
    4624:	00012b09 	.word	0x00012b09
    4628:	00012fc8 	.word	0x00012fc8

0000462c <EIC_4_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_4_Handler(void)
{
    462c:	b580      	push	{r7, lr}
    462e:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4630:	4b01      	ldr	r3, [pc, #4]	; (4638 <EIC_4_Handler+0xc>)
    4632:	4798      	blx	r3
} /**
    4634:	bf00      	nop
    4636:	bd80      	pop	{r7, pc}
    4638:	00004501 	.word	0x00004501

0000463c <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    463c:	b580      	push	{r7, lr}
    463e:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4640:	4b01      	ldr	r3, [pc, #4]	; (4648 <EIC_5_Handler+0xc>)
    4642:	4798      	blx	r3
} /**
    4644:	bf00      	nop
    4646:	bd80      	pop	{r7, pc}
    4648:	00004501 	.word	0x00004501

0000464c <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    464c:	b580      	push	{r7, lr}
    464e:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4650:	4b01      	ldr	r3, [pc, #4]	; (4658 <EIC_6_Handler+0xc>)
    4652:	4798      	blx	r3
} /**
    4654:	bf00      	nop
    4656:	bd80      	pop	{r7, pc}
    4658:	00004501 	.word	0x00004501

0000465c <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    465c:	b580      	push	{r7, lr}
    465e:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4660:	4b01      	ldr	r3, [pc, #4]	; (4668 <EIC_7_Handler+0xc>)
    4662:	4798      	blx	r3
}
    4664:	bf00      	nop
    4666:	bd80      	pop	{r7, pc}
    4668:	00004501 	.word	0x00004501

0000466c <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    466c:	b480      	push	{r7}
    466e:	b085      	sub	sp, #20
    4670:	af00      	add	r7, sp, #0
    4672:	60f8      	str	r0, [r7, #12]
    4674:	460b      	mov	r3, r1
    4676:	607a      	str	r2, [r7, #4]
    4678:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    467a:	7afa      	ldrb	r2, [r7, #11]
    467c:	68fb      	ldr	r3, [r7, #12]
    467e:	3248      	adds	r2, #72	; 0x48
    4680:	6879      	ldr	r1, [r7, #4]
    4682:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    4686:	bf00      	nop
    4688:	3714      	adds	r7, #20
    468a:	46bd      	mov	sp, r7
    468c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4690:	4770      	bx	lr

00004692 <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    4692:	b480      	push	{r7}
    4694:	b083      	sub	sp, #12
    4696:	af00      	add	r7, sp, #0
    4698:	6078      	str	r0, [r7, #4]
    469a:	460b      	mov	r3, r1
    469c:	70fb      	strb	r3, [r7, #3]
    469e:	4613      	mov	r3, r2
    46a0:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    46a2:	78fb      	ldrb	r3, [r7, #3]
    46a4:	687a      	ldr	r2, [r7, #4]
    46a6:	3304      	adds	r3, #4
    46a8:	00db      	lsls	r3, r3, #3
    46aa:	4413      	add	r3, r2
    46ac:	78ba      	ldrb	r2, [r7, #2]
    46ae:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    46b0:	78fb      	ldrb	r3, [r7, #3]
    46b2:	78ba      	ldrb	r2, [r7, #2]
    46b4:	43d2      	mvns	r2, r2
    46b6:	b2d1      	uxtb	r1, r2
    46b8:	687a      	ldr	r2, [r7, #4]
    46ba:	3304      	adds	r3, #4
    46bc:	00db      	lsls	r3, r3, #3
    46be:	4413      	add	r3, r2
    46c0:	460a      	mov	r2, r1
    46c2:	711a      	strb	r2, [r3, #4]
}
    46c4:	bf00      	nop
    46c6:	370c      	adds	r7, #12
    46c8:	46bd      	mov	sp, r7
    46ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    46ce:	4770      	bx	lr

000046d0 <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    46d0:	b480      	push	{r7}
    46d2:	b085      	sub	sp, #20
    46d4:	af00      	add	r7, sp, #0
    46d6:	60f8      	str	r0, [r7, #12]
    46d8:	460b      	mov	r3, r1
    46da:	607a      	str	r2, [r7, #4]
    46dc:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    46de:	7afa      	ldrb	r2, [r7, #11]
    46e0:	68fb      	ldr	r3, [r7, #12]
    46e2:	3204      	adds	r2, #4
    46e4:	6879      	ldr	r1, [r7, #4]
    46e6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    46ea:	bf00      	nop
    46ec:	3714      	adds	r7, #20
    46ee:	46bd      	mov	sp, r7
    46f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    46f4:	4770      	bx	lr
	...

000046f8 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    46f8:	b580      	push	{r7, lr}
    46fa:	b082      	sub	sp, #8
    46fc:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    46fe:	2300      	movs	r3, #0
    4700:	71fb      	strb	r3, [r7, #7]
    4702:	e00b      	b.n	471c <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    4704:	79fb      	ldrb	r3, [r7, #7]
    4706:	4a18      	ldr	r2, [pc, #96]	; (4768 <_event_system_init+0x70>)
    4708:	5cd3      	ldrb	r3, [r2, r3]
    470a:	461a      	mov	r2, r3
    470c:	79fb      	ldrb	r3, [r7, #7]
    470e:	4619      	mov	r1, r3
    4710:	4816      	ldr	r0, [pc, #88]	; (476c <_event_system_init+0x74>)
    4712:	4b17      	ldr	r3, [pc, #92]	; (4770 <_event_system_init+0x78>)
    4714:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    4716:	79fb      	ldrb	r3, [r7, #7]
    4718:	3301      	adds	r3, #1
    471a:	71fb      	strb	r3, [r7, #7]
    471c:	79fb      	ldrb	r3, [r7, #7]
    471e:	2b42      	cmp	r3, #66	; 0x42
    4720:	d9f0      	bls.n	4704 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    4722:	2300      	movs	r3, #0
    4724:	71fb      	strb	r3, [r7, #7]
    4726:	e016      	b.n	4756 <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    4728:	79fb      	ldrb	r3, [r7, #7]
    472a:	4a12      	ldr	r2, [pc, #72]	; (4774 <_event_system_init+0x7c>)
    472c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    4730:	461a      	mov	r2, r3
    4732:	79fb      	ldrb	r3, [r7, #7]
    4734:	4619      	mov	r1, r3
    4736:	480d      	ldr	r0, [pc, #52]	; (476c <_event_system_init+0x74>)
    4738:	4b0f      	ldr	r3, [pc, #60]	; (4778 <_event_system_init+0x80>)
    473a:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    473c:	79fb      	ldrb	r3, [r7, #7]
    473e:	4a0f      	ldr	r2, [pc, #60]	; (477c <_event_system_init+0x84>)
    4740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4744:	b2da      	uxtb	r2, r3
    4746:	79fb      	ldrb	r3, [r7, #7]
    4748:	4619      	mov	r1, r3
    474a:	4808      	ldr	r0, [pc, #32]	; (476c <_event_system_init+0x74>)
    474c:	4b0c      	ldr	r3, [pc, #48]	; (4780 <_event_system_init+0x88>)
    474e:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    4750:	79fb      	ldrb	r3, [r7, #7]
    4752:	3301      	adds	r3, #1
    4754:	71fb      	strb	r3, [r7, #7]
    4756:	79fb      	ldrb	r3, [r7, #7]
    4758:	2b1f      	cmp	r3, #31
    475a:	d9e5      	bls.n	4728 <_event_system_init+0x30>
	}

	return ERR_NONE;
    475c:	2300      	movs	r3, #0
}
    475e:	4618      	mov	r0, r3
    4760:	3708      	adds	r7, #8
    4762:	46bd      	mov	sp, r7
    4764:	bd80      	pop	{r7, pc}
    4766:	bf00      	nop
    4768:	00013000 	.word	0x00013000
    476c:	4100e000 	.word	0x4100e000
    4770:	0000466d 	.word	0x0000466d
    4774:	00013044 	.word	0x00013044
    4778:	000046d1 	.word	0x000046d1
    477c:	00013084 	.word	0x00013084
    4780:	00004693 	.word	0x00004693

00004784 <hri_gclk_wait_for_sync>:
{
    4784:	b480      	push	{r7}
    4786:	b083      	sub	sp, #12
    4788:	af00      	add	r7, sp, #0
    478a:	6078      	str	r0, [r7, #4]
    478c:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    478e:	bf00      	nop
    4790:	687b      	ldr	r3, [r7, #4]
    4792:	685a      	ldr	r2, [r3, #4]
    4794:	683b      	ldr	r3, [r7, #0]
    4796:	4013      	ands	r3, r2
    4798:	2b00      	cmp	r3, #0
    479a:	d1f9      	bne.n	4790 <hri_gclk_wait_for_sync+0xc>
}
    479c:	bf00      	nop
    479e:	370c      	adds	r7, #12
    47a0:	46bd      	mov	sp, r7
    47a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    47a6:	4770      	bx	lr

000047a8 <hri_gclk_write_GENCTRL_reg>:
{
    47a8:	b580      	push	{r7, lr}
    47aa:	b084      	sub	sp, #16
    47ac:	af00      	add	r7, sp, #0
    47ae:	60f8      	str	r0, [r7, #12]
    47b0:	460b      	mov	r3, r1
    47b2:	607a      	str	r2, [r7, #4]
    47b4:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    47b6:	7afa      	ldrb	r2, [r7, #11]
    47b8:	68fb      	ldr	r3, [r7, #12]
    47ba:	3208      	adds	r2, #8
    47bc:	6879      	ldr	r1, [r7, #4]
    47be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    47c2:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    47c6:	68f8      	ldr	r0, [r7, #12]
    47c8:	4b02      	ldr	r3, [pc, #8]	; (47d4 <hri_gclk_write_GENCTRL_reg+0x2c>)
    47ca:	4798      	blx	r3
}
    47cc:	bf00      	nop
    47ce:	3710      	adds	r7, #16
    47d0:	46bd      	mov	sp, r7
    47d2:	bd80      	pop	{r7, pc}
    47d4:	00004785 	.word	0x00004785

000047d8 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    47d8:	b580      	push	{r7, lr}
    47da:	b082      	sub	sp, #8
    47dc:	af00      	add	r7, sp, #0
    47de:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    47e0:	687b      	ldr	r3, [r7, #4]
    47e2:	f003 0301 	and.w	r3, r3, #1
    47e6:	2b00      	cmp	r3, #0
    47e8:	d004      	beq.n	47f4 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    47ea:	4a27      	ldr	r2, [pc, #156]	; (4888 <_gclk_init_generators_by_fref+0xb0>)
    47ec:	2100      	movs	r1, #0
    47ee:	4827      	ldr	r0, [pc, #156]	; (488c <_gclk_init_generators_by_fref+0xb4>)
    47f0:	4b27      	ldr	r3, [pc, #156]	; (4890 <_gclk_init_generators_by_fref+0xb8>)
    47f2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    47f4:	687b      	ldr	r3, [r7, #4]
    47f6:	f003 0302 	and.w	r3, r3, #2
    47fa:	2b00      	cmp	r3, #0
    47fc:	d004      	beq.n	4808 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    47fe:	4a25      	ldr	r2, [pc, #148]	; (4894 <_gclk_init_generators_by_fref+0xbc>)
    4800:	2101      	movs	r1, #1
    4802:	4822      	ldr	r0, [pc, #136]	; (488c <_gclk_init_generators_by_fref+0xb4>)
    4804:	4b22      	ldr	r3, [pc, #136]	; (4890 <_gclk_init_generators_by_fref+0xb8>)
    4806:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    4808:	687b      	ldr	r3, [r7, #4]
    480a:	f003 0304 	and.w	r3, r3, #4
    480e:	2b00      	cmp	r3, #0
    4810:	d004      	beq.n	481c <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    4812:	4a21      	ldr	r2, [pc, #132]	; (4898 <_gclk_init_generators_by_fref+0xc0>)
    4814:	2102      	movs	r1, #2
    4816:	481d      	ldr	r0, [pc, #116]	; (488c <_gclk_init_generators_by_fref+0xb4>)
    4818:	4b1d      	ldr	r3, [pc, #116]	; (4890 <_gclk_init_generators_by_fref+0xb8>)
    481a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    481c:	687b      	ldr	r3, [r7, #4]
    481e:	f003 0308 	and.w	r3, r3, #8
    4822:	2b00      	cmp	r3, #0
    4824:	d004      	beq.n	4830 <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    4826:	4a1d      	ldr	r2, [pc, #116]	; (489c <_gclk_init_generators_by_fref+0xc4>)
    4828:	2103      	movs	r1, #3
    482a:	4818      	ldr	r0, [pc, #96]	; (488c <_gclk_init_generators_by_fref+0xb4>)
    482c:	4b18      	ldr	r3, [pc, #96]	; (4890 <_gclk_init_generators_by_fref+0xb8>)
    482e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    4830:	687b      	ldr	r3, [r7, #4]
    4832:	f003 0310 	and.w	r3, r3, #16
    4836:	2b00      	cmp	r3, #0
    4838:	d004      	beq.n	4844 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    483a:	4a19      	ldr	r2, [pc, #100]	; (48a0 <_gclk_init_generators_by_fref+0xc8>)
    483c:	2104      	movs	r1, #4
    483e:	4813      	ldr	r0, [pc, #76]	; (488c <_gclk_init_generators_by_fref+0xb4>)
    4840:	4b13      	ldr	r3, [pc, #76]	; (4890 <_gclk_init_generators_by_fref+0xb8>)
    4842:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    4844:	687b      	ldr	r3, [r7, #4]
    4846:	f003 0320 	and.w	r3, r3, #32
    484a:	2b00      	cmp	r3, #0
    484c:	d004      	beq.n	4858 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    484e:	4a15      	ldr	r2, [pc, #84]	; (48a4 <_gclk_init_generators_by_fref+0xcc>)
    4850:	2105      	movs	r1, #5
    4852:	480e      	ldr	r0, [pc, #56]	; (488c <_gclk_init_generators_by_fref+0xb4>)
    4854:	4b0e      	ldr	r3, [pc, #56]	; (4890 <_gclk_init_generators_by_fref+0xb8>)
    4856:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    4858:	687b      	ldr	r3, [r7, #4]
    485a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    485e:	2b00      	cmp	r3, #0
    4860:	d004      	beq.n	486c <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    4862:	4a11      	ldr	r2, [pc, #68]	; (48a8 <_gclk_init_generators_by_fref+0xd0>)
    4864:	210a      	movs	r1, #10
    4866:	4809      	ldr	r0, [pc, #36]	; (488c <_gclk_init_generators_by_fref+0xb4>)
    4868:	4b09      	ldr	r3, [pc, #36]	; (4890 <_gclk_init_generators_by_fref+0xb8>)
    486a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    486c:	687b      	ldr	r3, [r7, #4]
    486e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    4872:	2b00      	cmp	r3, #0
    4874:	d004      	beq.n	4880 <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    4876:	4a0d      	ldr	r2, [pc, #52]	; (48ac <_gclk_init_generators_by_fref+0xd4>)
    4878:	210b      	movs	r1, #11
    487a:	4804      	ldr	r0, [pc, #16]	; (488c <_gclk_init_generators_by_fref+0xb4>)
    487c:	4b04      	ldr	r3, [pc, #16]	; (4890 <_gclk_init_generators_by_fref+0xb8>)
    487e:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    4880:	bf00      	nop
    4882:	3708      	adds	r7, #8
    4884:	46bd      	mov	sp, r7
    4886:	bd80      	pop	{r7, pc}
    4888:	00010107 	.word	0x00010107
    488c:	40001c00 	.word	0x40001c00
    4890:	000047a9 	.word	0x000047a9
    4894:	00010907 	.word	0x00010907
    4898:	00010906 	.word	0x00010906
    489c:	00020908 	.word	0x00020908
    48a0:	00010901 	.word	0x00010901
    48a4:	00062901 	.word	0x00062901
    48a8:	00010905 	.word	0x00010905
    48ac:	00041905 	.word	0x00041905

000048b0 <hri_mclk_write_CPUDIV_reg>:
{
    48b0:	b480      	push	{r7}
    48b2:	b083      	sub	sp, #12
    48b4:	af00      	add	r7, sp, #0
    48b6:	6078      	str	r0, [r7, #4]
    48b8:	460b      	mov	r3, r1
    48ba:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    48bc:	687b      	ldr	r3, [r7, #4]
    48be:	78fa      	ldrb	r2, [r7, #3]
    48c0:	715a      	strb	r2, [r3, #5]
}
    48c2:	bf00      	nop
    48c4:	370c      	adds	r7, #12
    48c6:	46bd      	mov	sp, r7
    48c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    48cc:	4770      	bx	lr
	...

000048d0 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    48d0:	b580      	push	{r7, lr}
    48d2:	b082      	sub	sp, #8
    48d4:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    48d6:	4b05      	ldr	r3, [pc, #20]	; (48ec <_mclk_init+0x1c>)
    48d8:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    48da:	2101      	movs	r1, #1
    48dc:	6878      	ldr	r0, [r7, #4]
    48de:	4b04      	ldr	r3, [pc, #16]	; (48f0 <_mclk_init+0x20>)
    48e0:	4798      	blx	r3
}
    48e2:	bf00      	nop
    48e4:	3708      	adds	r7, #8
    48e6:	46bd      	mov	sp, r7
    48e8:	bd80      	pop	{r7, pc}
    48ea:	bf00      	nop
    48ec:	40000800 	.word	0x40000800
    48f0:	000048b1 	.word	0x000048b1

000048f4 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    48f4:	b480      	push	{r7}
    48f6:	b083      	sub	sp, #12
    48f8:	af00      	add	r7, sp, #0
    48fa:	6078      	str	r0, [r7, #4]
    48fc:	460b      	mov	r3, r1
    48fe:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    4900:	687b      	ldr	r3, [r7, #4]
    4902:	78fa      	ldrb	r2, [r7, #3]
    4904:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4906:	bf00      	nop
    4908:	370c      	adds	r7, #12
    490a:	46bd      	mov	sp, r7
    490c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4910:	4770      	bx	lr

00004912 <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    4912:	b480      	push	{r7}
    4914:	b083      	sub	sp, #12
    4916:	af00      	add	r7, sp, #0
    4918:	6078      	str	r0, [r7, #4]
    491a:	460b      	mov	r3, r1
    491c:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    491e:	687b      	ldr	r3, [r7, #4]
    4920:	887a      	ldrh	r2, [r7, #2]
    4922:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4924:	bf00      	nop
    4926:	370c      	adds	r7, #12
    4928:	46bd      	mov	sp, r7
    492a:	f85d 7b04 	ldr.w	r7, [sp], #4
    492e:	4770      	bx	lr

00004930 <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    4930:	b480      	push	{r7}
    4932:	b083      	sub	sp, #12
    4934:	af00      	add	r7, sp, #0
    4936:	6078      	str	r0, [r7, #4]
    4938:	460b      	mov	r3, r1
    493a:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    493c:	687b      	ldr	r3, [r7, #4]
    493e:	78fa      	ldrb	r2, [r7, #3]
    4940:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4942:	bf00      	nop
    4944:	370c      	adds	r7, #12
    4946:	46bd      	mov	sp, r7
    4948:	f85d 7b04 	ldr.w	r7, [sp], #4
    494c:	4770      	bx	lr

0000494e <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    494e:	b480      	push	{r7}
    4950:	b083      	sub	sp, #12
    4952:	af00      	add	r7, sp, #0
    4954:	6078      	str	r0, [r7, #4]
    4956:	460b      	mov	r3, r1
    4958:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    495a:	687b      	ldr	r3, [r7, #4]
    495c:	78fa      	ldrb	r2, [r7, #3]
    495e:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4960:	bf00      	nop
    4962:	370c      	adds	r7, #12
    4964:	46bd      	mov	sp, r7
    4966:	f85d 7b04 	ldr.w	r7, [sp], #4
    496a:	4770      	bx	lr

0000496c <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    496c:	b480      	push	{r7}
    496e:	b085      	sub	sp, #20
    4970:	af00      	add	r7, sp, #0
    4972:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    4974:	687b      	ldr	r3, [r7, #4]
    4976:	69db      	ldr	r3, [r3, #28]
    4978:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    497a:	68fb      	ldr	r3, [r7, #12]
    497c:	0a1b      	lsrs	r3, r3, #8
    497e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4982:	60fb      	str	r3, [r7, #12]
	return tmp;
    4984:	68fb      	ldr	r3, [r7, #12]
}
    4986:	4618      	mov	r0, r3
    4988:	3714      	adds	r7, #20
    498a:	46bd      	mov	sp, r7
    498c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4990:	4770      	bx	lr

00004992 <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    4992:	b480      	push	{r7}
    4994:	b083      	sub	sp, #12
    4996:	af00      	add	r7, sp, #0
    4998:	6078      	str	r0, [r7, #4]
    499a:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    499c:	687b      	ldr	r3, [r7, #4]
    499e:	683a      	ldr	r2, [r7, #0]
    49a0:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    49a2:	bf00      	nop
    49a4:	370c      	adds	r7, #12
    49a6:	46bd      	mov	sp, r7
    49a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    49ac:	4770      	bx	lr
	...

000049b0 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    49b0:	b580      	push	{r7, lr}
    49b2:	b082      	sub	sp, #8
    49b4:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    49b6:	4b13      	ldr	r3, [pc, #76]	; (4a04 <_osc32kctrl_init_sources+0x54>)
    49b8:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    49ba:	2300      	movs	r3, #0
    49bc:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    49be:	f242 018e 	movw	r1, #8334	; 0x208e
    49c2:	6878      	ldr	r0, [r7, #4]
    49c4:	4b10      	ldr	r3, [pc, #64]	; (4a08 <_osc32kctrl_init_sources+0x58>)
    49c6:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    49c8:	2100      	movs	r1, #0
    49ca:	6878      	ldr	r0, [r7, #4]
    49cc:	4b0f      	ldr	r3, [pc, #60]	; (4a0c <_osc32kctrl_init_sources+0x5c>)
    49ce:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    49d0:	2100      	movs	r1, #0
    49d2:	6878      	ldr	r0, [r7, #4]
    49d4:	4b0e      	ldr	r3, [pc, #56]	; (4a10 <_osc32kctrl_init_sources+0x60>)
    49d6:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    49d8:	6878      	ldr	r0, [r7, #4]
    49da:	4b0e      	ldr	r3, [pc, #56]	; (4a14 <_osc32kctrl_init_sources+0x64>)
    49dc:	4798      	blx	r3
    49de:	4603      	mov	r3, r0
    49e0:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    49e2:	887b      	ldrh	r3, [r7, #2]
    49e4:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    49e6:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    49ea:	4619      	mov	r1, r3
    49ec:	6878      	ldr	r0, [r7, #4]
    49ee:	4b0a      	ldr	r3, [pc, #40]	; (4a18 <_osc32kctrl_init_sources+0x68>)
    49f0:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    49f2:	2100      	movs	r1, #0
    49f4:	6878      	ldr	r0, [r7, #4]
    49f6:	4b09      	ldr	r3, [pc, #36]	; (4a1c <_osc32kctrl_init_sources+0x6c>)
    49f8:	4798      	blx	r3
	(void)calib;
}
    49fa:	bf00      	nop
    49fc:	3708      	adds	r7, #8
    49fe:	46bd      	mov	sp, r7
    4a00:	bd80      	pop	{r7, pc}
    4a02:	bf00      	nop
    4a04:	40001400 	.word	0x40001400
    4a08:	00004913 	.word	0x00004913
    4a0c:	00004931 	.word	0x00004931
    4a10:	0000494f 	.word	0x0000494f
    4a14:	0000496d 	.word	0x0000496d
    4a18:	00004993 	.word	0x00004993
    4a1c:	000048f5 	.word	0x000048f5

00004a20 <hri_gclk_wait_for_sync>:
{
    4a20:	b480      	push	{r7}
    4a22:	b083      	sub	sp, #12
    4a24:	af00      	add	r7, sp, #0
    4a26:	6078      	str	r0, [r7, #4]
    4a28:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    4a2a:	bf00      	nop
    4a2c:	687b      	ldr	r3, [r7, #4]
    4a2e:	685a      	ldr	r2, [r3, #4]
    4a30:	683b      	ldr	r3, [r7, #0]
    4a32:	4013      	ands	r3, r2
    4a34:	2b00      	cmp	r3, #0
    4a36:	d1f9      	bne.n	4a2c <hri_gclk_wait_for_sync+0xc>
}
    4a38:	bf00      	nop
    4a3a:	370c      	adds	r7, #12
    4a3c:	46bd      	mov	sp, r7
    4a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a42:	4770      	bx	lr

00004a44 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    4a44:	b480      	push	{r7}
    4a46:	b083      	sub	sp, #12
    4a48:	af00      	add	r7, sp, #0
    4a4a:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    4a4c:	687b      	ldr	r3, [r7, #4]
    4a4e:	685b      	ldr	r3, [r3, #4]
    4a50:	089b      	lsrs	r3, r3, #2
    4a52:	f003 0301 	and.w	r3, r3, #1
    4a56:	2b00      	cmp	r3, #0
    4a58:	bf14      	ite	ne
    4a5a:	2301      	movne	r3, #1
    4a5c:	2300      	moveq	r3, #0
    4a5e:	b2db      	uxtb	r3, r3
}
    4a60:	4618      	mov	r0, r3
    4a62:	370c      	adds	r7, #12
    4a64:	46bd      	mov	sp, r7
    4a66:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a6a:	4770      	bx	lr

00004a6c <hri_gclk_read_SYNCBUSY_reg>:
{
    4a6c:	b480      	push	{r7}
    4a6e:	b083      	sub	sp, #12
    4a70:	af00      	add	r7, sp, #0
    4a72:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    4a74:	687b      	ldr	r3, [r7, #4]
    4a76:	685b      	ldr	r3, [r3, #4]
}
    4a78:	4618      	mov	r0, r3
    4a7a:	370c      	adds	r7, #12
    4a7c:	46bd      	mov	sp, r7
    4a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a82:	4770      	bx	lr

00004a84 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    4a84:	b580      	push	{r7, lr}
    4a86:	b086      	sub	sp, #24
    4a88:	af00      	add	r7, sp, #0
    4a8a:	60f8      	str	r0, [r7, #12]
    4a8c:	460b      	mov	r3, r1
    4a8e:	607a      	str	r2, [r7, #4]
    4a90:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    4a92:	7afa      	ldrb	r2, [r7, #11]
    4a94:	68fb      	ldr	r3, [r7, #12]
    4a96:	3208      	adds	r2, #8
    4a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4a9c:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    4a9e:	697b      	ldr	r3, [r7, #20]
    4aa0:	f023 030f 	bic.w	r3, r3, #15
    4aa4:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    4aa6:	687b      	ldr	r3, [r7, #4]
    4aa8:	f003 030f 	and.w	r3, r3, #15
    4aac:	697a      	ldr	r2, [r7, #20]
    4aae:	4313      	orrs	r3, r2
    4ab0:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    4ab2:	7afa      	ldrb	r2, [r7, #11]
    4ab4:	68fb      	ldr	r3, [r7, #12]
    4ab6:	3208      	adds	r2, #8
    4ab8:	6979      	ldr	r1, [r7, #20]
    4aba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    4abe:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    4ac2:	68f8      	ldr	r0, [r7, #12]
    4ac4:	4b02      	ldr	r3, [pc, #8]	; (4ad0 <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    4ac6:	4798      	blx	r3
}
    4ac8:	bf00      	nop
    4aca:	3718      	adds	r7, #24
    4acc:	46bd      	mov	sp, r7
    4ace:	bd80      	pop	{r7, pc}
    4ad0:	00004a21 	.word	0x00004a21

00004ad4 <hri_gclk_write_PCHCTRL_reg>:
{
    4ad4:	b480      	push	{r7}
    4ad6:	b085      	sub	sp, #20
    4ad8:	af00      	add	r7, sp, #0
    4ada:	60f8      	str	r0, [r7, #12]
    4adc:	460b      	mov	r3, r1
    4ade:	607a      	str	r2, [r7, #4]
    4ae0:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    4ae2:	7afa      	ldrb	r2, [r7, #11]
    4ae4:	68fb      	ldr	r3, [r7, #12]
    4ae6:	3220      	adds	r2, #32
    4ae8:	6879      	ldr	r1, [r7, #4]
    4aea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    4aee:	bf00      	nop
    4af0:	3714      	adds	r7, #20
    4af2:	46bd      	mov	sp, r7
    4af4:	f85d 7b04 	ldr.w	r7, [sp], #4
    4af8:	4770      	bx	lr

00004afa <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    4afa:	b480      	push	{r7}
    4afc:	b085      	sub	sp, #20
    4afe:	af00      	add	r7, sp, #0
    4b00:	60f8      	str	r0, [r7, #12]
    4b02:	460b      	mov	r3, r1
    4b04:	607a      	str	r2, [r7, #4]
    4b06:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    4b08:	bf00      	nop
    4b0a:	7afa      	ldrb	r2, [r7, #11]
    4b0c:	68f9      	ldr	r1, [r7, #12]
    4b0e:	4613      	mov	r3, r2
    4b10:	009b      	lsls	r3, r3, #2
    4b12:	4413      	add	r3, r2
    4b14:	009b      	lsls	r3, r3, #2
    4b16:	440b      	add	r3, r1
    4b18:	333c      	adds	r3, #60	; 0x3c
    4b1a:	681a      	ldr	r2, [r3, #0]
    4b1c:	687b      	ldr	r3, [r7, #4]
    4b1e:	4013      	ands	r3, r2
    4b20:	2b00      	cmp	r3, #0
    4b22:	d1f2      	bne.n	4b0a <hri_oscctrl_wait_for_sync+0x10>
	};
}
    4b24:	bf00      	nop
    4b26:	3714      	adds	r7, #20
    4b28:	46bd      	mov	sp, r7
    4b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b2e:	4770      	bx	lr

00004b30 <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    4b30:	b480      	push	{r7}
    4b32:	b083      	sub	sp, #12
    4b34:	af00      	add	r7, sp, #0
    4b36:	6078      	str	r0, [r7, #4]
    4b38:	460b      	mov	r3, r1
    4b3a:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    4b3c:	78fa      	ldrb	r2, [r7, #3]
    4b3e:	6879      	ldr	r1, [r7, #4]
    4b40:	4613      	mov	r3, r2
    4b42:	009b      	lsls	r3, r3, #2
    4b44:	4413      	add	r3, r2
    4b46:	009b      	lsls	r3, r3, #2
    4b48:	440b      	add	r3, r1
    4b4a:	3340      	adds	r3, #64	; 0x40
    4b4c:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    4b4e:	f003 0301 	and.w	r3, r3, #1
    4b52:	2b00      	cmp	r3, #0
    4b54:	bf14      	ite	ne
    4b56:	2301      	movne	r3, #1
    4b58:	2300      	moveq	r3, #0
    4b5a:	b2db      	uxtb	r3, r3
}
    4b5c:	4618      	mov	r0, r3
    4b5e:	370c      	adds	r7, #12
    4b60:	46bd      	mov	sp, r7
    4b62:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b66:	4770      	bx	lr

00004b68 <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    4b68:	b480      	push	{r7}
    4b6a:	b083      	sub	sp, #12
    4b6c:	af00      	add	r7, sp, #0
    4b6e:	6078      	str	r0, [r7, #4]
    4b70:	460b      	mov	r3, r1
    4b72:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    4b74:	78fa      	ldrb	r2, [r7, #3]
    4b76:	6879      	ldr	r1, [r7, #4]
    4b78:	4613      	mov	r3, r2
    4b7a:	009b      	lsls	r3, r3, #2
    4b7c:	4413      	add	r3, r2
    4b7e:	009b      	lsls	r3, r3, #2
    4b80:	440b      	add	r3, r1
    4b82:	3340      	adds	r3, #64	; 0x40
    4b84:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    4b86:	085b      	lsrs	r3, r3, #1
    4b88:	f003 0301 	and.w	r3, r3, #1
    4b8c:	2b00      	cmp	r3, #0
    4b8e:	bf14      	ite	ne
    4b90:	2301      	movne	r3, #1
    4b92:	2300      	moveq	r3, #0
    4b94:	b2db      	uxtb	r3, r3
}
    4b96:	4618      	mov	r0, r3
    4b98:	370c      	adds	r7, #12
    4b9a:	46bd      	mov	sp, r7
    4b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ba0:	4770      	bx	lr
	...

00004ba4 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    4ba4:	b580      	push	{r7, lr}
    4ba6:	b082      	sub	sp, #8
    4ba8:	af00      	add	r7, sp, #0
    4baa:	6078      	str	r0, [r7, #4]
    4bac:	460b      	mov	r3, r1
    4bae:	70fb      	strb	r3, [r7, #3]
    4bb0:	4613      	mov	r3, r2
    4bb2:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    4bb4:	78fa      	ldrb	r2, [r7, #3]
    4bb6:	6879      	ldr	r1, [r7, #4]
    4bb8:	4613      	mov	r3, r2
    4bba:	009b      	lsls	r3, r3, #2
    4bbc:	4413      	add	r3, r2
    4bbe:	009b      	lsls	r3, r3, #2
    4bc0:	440b      	add	r3, r1
    4bc2:	3330      	adds	r3, #48	; 0x30
    4bc4:	78ba      	ldrb	r2, [r7, #2]
    4bc6:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    4bc8:	78fb      	ldrb	r3, [r7, #3]
    4bca:	2202      	movs	r2, #2
    4bcc:	4619      	mov	r1, r3
    4bce:	6878      	ldr	r0, [r7, #4]
    4bd0:	4b02      	ldr	r3, [pc, #8]	; (4bdc <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    4bd2:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4bd4:	bf00      	nop
    4bd6:	3708      	adds	r7, #8
    4bd8:	46bd      	mov	sp, r7
    4bda:	bd80      	pop	{r7, pc}
    4bdc:	00004afb 	.word	0x00004afb

00004be0 <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    4be0:	b580      	push	{r7, lr}
    4be2:	b084      	sub	sp, #16
    4be4:	af00      	add	r7, sp, #0
    4be6:	60f8      	str	r0, [r7, #12]
    4be8:	460b      	mov	r3, r1
    4bea:	607a      	str	r2, [r7, #4]
    4bec:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    4bee:	7afa      	ldrb	r2, [r7, #11]
    4bf0:	68f9      	ldr	r1, [r7, #12]
    4bf2:	4613      	mov	r3, r2
    4bf4:	009b      	lsls	r3, r3, #2
    4bf6:	4413      	add	r3, r2
    4bf8:	009b      	lsls	r3, r3, #2
    4bfa:	440b      	add	r3, r1
    4bfc:	3334      	adds	r3, #52	; 0x34
    4bfe:	687a      	ldr	r2, [r7, #4]
    4c00:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    4c02:	7afb      	ldrb	r3, [r7, #11]
    4c04:	2206      	movs	r2, #6
    4c06:	4619      	mov	r1, r3
    4c08:	68f8      	ldr	r0, [r7, #12]
    4c0a:	4b03      	ldr	r3, [pc, #12]	; (4c18 <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    4c0c:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4c0e:	bf00      	nop
    4c10:	3710      	adds	r7, #16
    4c12:	46bd      	mov	sp, r7
    4c14:	bd80      	pop	{r7, pc}
    4c16:	bf00      	nop
    4c18:	00004afb 	.word	0x00004afb

00004c1c <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    4c1c:	b480      	push	{r7}
    4c1e:	b085      	sub	sp, #20
    4c20:	af00      	add	r7, sp, #0
    4c22:	60f8      	str	r0, [r7, #12]
    4c24:	460b      	mov	r3, r1
    4c26:	607a      	str	r2, [r7, #4]
    4c28:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    4c2a:	7afa      	ldrb	r2, [r7, #11]
    4c2c:	68f9      	ldr	r1, [r7, #12]
    4c2e:	4613      	mov	r3, r2
    4c30:	009b      	lsls	r3, r3, #2
    4c32:	4413      	add	r3, r2
    4c34:	009b      	lsls	r3, r3, #2
    4c36:	440b      	add	r3, r1
    4c38:	3338      	adds	r3, #56	; 0x38
    4c3a:	687a      	ldr	r2, [r7, #4]
    4c3c:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4c3e:	bf00      	nop
    4c40:	3714      	adds	r7, #20
    4c42:	46bd      	mov	sp, r7
    4c44:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c48:	4770      	bx	lr

00004c4a <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    4c4a:	b480      	push	{r7}
    4c4c:	b083      	sub	sp, #12
    4c4e:	af00      	add	r7, sp, #0
    4c50:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    4c52:	687b      	ldr	r3, [r7, #4]
    4c54:	691b      	ldr	r3, [r3, #16]
    4c56:	085b      	lsrs	r3, r3, #1
    4c58:	f003 0301 	and.w	r3, r3, #1
    4c5c:	2b00      	cmp	r3, #0
    4c5e:	bf14      	ite	ne
    4c60:	2301      	movne	r3, #1
    4c62:	2300      	moveq	r3, #0
    4c64:	b2db      	uxtb	r3, r3
}
    4c66:	4618      	mov	r0, r3
    4c68:	370c      	adds	r7, #12
    4c6a:	46bd      	mov	sp, r7
    4c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c70:	4770      	bx	lr

00004c72 <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    4c72:	b480      	push	{r7}
    4c74:	b083      	sub	sp, #12
    4c76:	af00      	add	r7, sp, #0
    4c78:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    4c7a:	687b      	ldr	r3, [r7, #4]
    4c7c:	691b      	ldr	r3, [r3, #16]
    4c7e:	0a1b      	lsrs	r3, r3, #8
    4c80:	f003 0301 	and.w	r3, r3, #1
    4c84:	2b00      	cmp	r3, #0
    4c86:	bf14      	ite	ne
    4c88:	2301      	movne	r3, #1
    4c8a:	2300      	moveq	r3, #0
    4c8c:	b2db      	uxtb	r3, r3
}
    4c8e:	4618      	mov	r0, r3
    4c90:	370c      	adds	r7, #12
    4c92:	46bd      	mov	sp, r7
    4c94:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c98:	4770      	bx	lr

00004c9a <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    4c9a:	b480      	push	{r7}
    4c9c:	b085      	sub	sp, #20
    4c9e:	af00      	add	r7, sp, #0
    4ca0:	6078      	str	r0, [r7, #4]
    4ca2:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    4ca4:	687b      	ldr	r3, [r7, #4]
    4ca6:	691b      	ldr	r3, [r3, #16]
    4ca8:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    4caa:	68fa      	ldr	r2, [r7, #12]
    4cac:	683b      	ldr	r3, [r7, #0]
    4cae:	4013      	ands	r3, r2
    4cb0:	60fb      	str	r3, [r7, #12]
	return tmp;
    4cb2:	68fb      	ldr	r3, [r7, #12]
}
    4cb4:	4618      	mov	r0, r3
    4cb6:	3714      	adds	r7, #20
    4cb8:	46bd      	mov	sp, r7
    4cba:	f85d 7b04 	ldr.w	r7, [sp], #4
    4cbe:	4770      	bx	lr

00004cc0 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    4cc0:	b480      	push	{r7}
    4cc2:	b085      	sub	sp, #20
    4cc4:	af00      	add	r7, sp, #0
    4cc6:	60f8      	str	r0, [r7, #12]
    4cc8:	460b      	mov	r3, r1
    4cca:	607a      	str	r2, [r7, #4]
    4ccc:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    4cce:	7afb      	ldrb	r3, [r7, #11]
    4cd0:	68fa      	ldr	r2, [r7, #12]
    4cd2:	3304      	adds	r3, #4
    4cd4:	009b      	lsls	r3, r3, #2
    4cd6:	4413      	add	r3, r2
    4cd8:	687a      	ldr	r2, [r7, #4]
    4cda:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4cdc:	bf00      	nop
    4cde:	3714      	adds	r7, #20
    4ce0:	46bd      	mov	sp, r7
    4ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ce6:	4770      	bx	lr

00004ce8 <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    4ce8:	b480      	push	{r7}
    4cea:	b083      	sub	sp, #12
    4cec:	af00      	add	r7, sp, #0
    4cee:	6078      	str	r0, [r7, #4]
    4cf0:	460b      	mov	r3, r1
    4cf2:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    4cf4:	687b      	ldr	r3, [r7, #4]
    4cf6:	78fa      	ldrb	r2, [r7, #3]
    4cf8:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4cfa:	bf00      	nop
    4cfc:	370c      	adds	r7, #12
    4cfe:	46bd      	mov	sp, r7
    4d00:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d04:	4770      	bx	lr

00004d06 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    4d06:	b480      	push	{r7}
    4d08:	b085      	sub	sp, #20
    4d0a:	af00      	add	r7, sp, #0
    4d0c:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    4d0e:	687b      	ldr	r3, [r7, #4]
    4d10:	f893 3020 	ldrb.w	r3, [r3, #32]
    4d14:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    4d16:	7bfb      	ldrb	r3, [r7, #15]
    4d18:	f003 0301 	and.w	r3, r3, #1
    4d1c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4d1e:	7bfb      	ldrb	r3, [r7, #15]
    4d20:	2b00      	cmp	r3, #0
    4d22:	bf14      	ite	ne
    4d24:	2301      	movne	r3, #1
    4d26:	2300      	moveq	r3, #0
    4d28:	b2db      	uxtb	r3, r3
}
    4d2a:	4618      	mov	r0, r3
    4d2c:	3714      	adds	r7, #20
    4d2e:	46bd      	mov	sp, r7
    4d30:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d34:	4770      	bx	lr

00004d36 <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    4d36:	b480      	push	{r7}
    4d38:	b083      	sub	sp, #12
    4d3a:	af00      	add	r7, sp, #0
    4d3c:	6078      	str	r0, [r7, #4]
    4d3e:	460b      	mov	r3, r1
    4d40:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    4d42:	687b      	ldr	r3, [r7, #4]
    4d44:	78fa      	ldrb	r2, [r7, #3]
    4d46:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4d4a:	bf00      	nop
    4d4c:	370c      	adds	r7, #12
    4d4e:	46bd      	mov	sp, r7
    4d50:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d54:	4770      	bx	lr

00004d56 <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    4d56:	b480      	push	{r7}
    4d58:	b083      	sub	sp, #12
    4d5a:	af00      	add	r7, sp, #0
    4d5c:	6078      	str	r0, [r7, #4]
    4d5e:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    4d60:	687b      	ldr	r3, [r7, #4]
    4d62:	683a      	ldr	r2, [r7, #0]
    4d64:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4d66:	bf00      	nop
    4d68:	370c      	adds	r7, #12
    4d6a:	46bd      	mov	sp, r7
    4d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d70:	4770      	bx	lr

00004d72 <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    4d72:	b480      	push	{r7}
    4d74:	b083      	sub	sp, #12
    4d76:	af00      	add	r7, sp, #0
    4d78:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    4d7a:	687b      	ldr	r3, [r7, #4]
    4d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    4d7e:	4618      	mov	r0, r3
    4d80:	370c      	adds	r7, #12
    4d82:	46bd      	mov	sp, r7
    4d84:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d88:	4770      	bx	lr

00004d8a <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    4d8a:	b480      	push	{r7}
    4d8c:	b083      	sub	sp, #12
    4d8e:	af00      	add	r7, sp, #0
    4d90:	6078      	str	r0, [r7, #4]
    4d92:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    4d94:	687b      	ldr	r3, [r7, #4]
    4d96:	683a      	ldr	r2, [r7, #0]
    4d98:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4d9a:	bf00      	nop
    4d9c:	370c      	adds	r7, #12
    4d9e:	46bd      	mov	sp, r7
    4da0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4da4:	4770      	bx	lr

00004da6 <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    4da6:	b480      	push	{r7}
    4da8:	b085      	sub	sp, #20
    4daa:	af00      	add	r7, sp, #0
    4dac:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    4dae:	687b      	ldr	r3, [r7, #4]
    4db0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    4db4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    4db6:	7bfb      	ldrb	r3, [r7, #15]
    4db8:	085b      	lsrs	r3, r3, #1
    4dba:	b2db      	uxtb	r3, r3
    4dbc:	f003 0301 	and.w	r3, r3, #1
    4dc0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4dc2:	7bfb      	ldrb	r3, [r7, #15]
    4dc4:	2b00      	cmp	r3, #0
    4dc6:	bf14      	ite	ne
    4dc8:	2301      	movne	r3, #1
    4dca:	2300      	moveq	r3, #0
    4dcc:	b2db      	uxtb	r3, r3
}
    4dce:	4618      	mov	r0, r3
    4dd0:	3714      	adds	r7, #20
    4dd2:	46bd      	mov	sp, r7
    4dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    4dd8:	4770      	bx	lr

00004dda <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    4dda:	b480      	push	{r7}
    4ddc:	b085      	sub	sp, #20
    4dde:	af00      	add	r7, sp, #0
    4de0:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    4de2:	687b      	ldr	r3, [r7, #4]
    4de4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    4de8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    4dea:	7bfb      	ldrb	r3, [r7, #15]
    4dec:	089b      	lsrs	r3, r3, #2
    4dee:	b2db      	uxtb	r3, r3
    4df0:	f003 0301 	and.w	r3, r3, #1
    4df4:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4df6:	7bfb      	ldrb	r3, [r7, #15]
    4df8:	2b00      	cmp	r3, #0
    4dfa:	bf14      	ite	ne
    4dfc:	2301      	movne	r3, #1
    4dfe:	2300      	moveq	r3, #0
    4e00:	b2db      	uxtb	r3, r3
}
    4e02:	4618      	mov	r0, r3
    4e04:	3714      	adds	r7, #20
    4e06:	46bd      	mov	sp, r7
    4e08:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e0c:	4770      	bx	lr

00004e0e <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    4e0e:	b480      	push	{r7}
    4e10:	b085      	sub	sp, #20
    4e12:	af00      	add	r7, sp, #0
    4e14:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    4e16:	687b      	ldr	r3, [r7, #4]
    4e18:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    4e1c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    4e1e:	7bfb      	ldrb	r3, [r7, #15]
    4e20:	08db      	lsrs	r3, r3, #3
    4e22:	b2db      	uxtb	r3, r3
    4e24:	f003 0301 	and.w	r3, r3, #1
    4e28:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4e2a:	7bfb      	ldrb	r3, [r7, #15]
    4e2c:	2b00      	cmp	r3, #0
    4e2e:	bf14      	ite	ne
    4e30:	2301      	movne	r3, #1
    4e32:	2300      	moveq	r3, #0
    4e34:	b2db      	uxtb	r3, r3
}
    4e36:	4618      	mov	r0, r3
    4e38:	3714      	adds	r7, #20
    4e3a:	46bd      	mov	sp, r7
    4e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e40:	4770      	bx	lr

00004e42 <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    4e42:	b480      	push	{r7}
    4e44:	b085      	sub	sp, #20
    4e46:	af00      	add	r7, sp, #0
    4e48:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    4e4a:	687b      	ldr	r3, [r7, #4]
    4e4c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    4e50:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    4e52:	7bfb      	ldrb	r3, [r7, #15]
    4e54:	091b      	lsrs	r3, r3, #4
    4e56:	b2db      	uxtb	r3, r3
    4e58:	f003 0301 	and.w	r3, r3, #1
    4e5c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4e5e:	7bfb      	ldrb	r3, [r7, #15]
    4e60:	2b00      	cmp	r3, #0
    4e62:	bf14      	ite	ne
    4e64:	2301      	movne	r3, #1
    4e66:	2300      	moveq	r3, #0
    4e68:	b2db      	uxtb	r3, r3
}
    4e6a:	4618      	mov	r0, r3
    4e6c:	3714      	adds	r7, #20
    4e6e:	46bd      	mov	sp, r7
    4e70:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e74:	4770      	bx	lr
	...

00004e78 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    4e78:	b580      	push	{r7, lr}
    4e7a:	b082      	sub	sp, #8
    4e7c:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    4e7e:	4b0a      	ldr	r3, [pc, #40]	; (4ea8 <_oscctrl_init_sources+0x30>)
    4e80:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    4e82:	4a0a      	ldr	r2, [pc, #40]	; (4eac <_oscctrl_init_sources+0x34>)
    4e84:	2101      	movs	r1, #1
    4e86:	6878      	ldr	r0, [r7, #4]
    4e88:	4b09      	ldr	r3, [pc, #36]	; (4eb0 <_oscctrl_init_sources+0x38>)
    4e8a:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    4e8c:	bf00      	nop
    4e8e:	6878      	ldr	r0, [r7, #4]
    4e90:	4b08      	ldr	r3, [pc, #32]	; (4eb4 <_oscctrl_init_sources+0x3c>)
    4e92:	4798      	blx	r3
    4e94:	4603      	mov	r3, r0
    4e96:	f083 0301 	eor.w	r3, r3, #1
    4e9a:	b2db      	uxtb	r3, r3
    4e9c:	2b00      	cmp	r3, #0
    4e9e:	d1f6      	bne.n	4e8e <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    4ea0:	bf00      	nop
    4ea2:	3708      	adds	r7, #8
    4ea4:	46bd      	mov	sp, r7
    4ea6:	bd80      	pop	{r7, pc}
    4ea8:	40001000 	.word	0x40001000
    4eac:	03002606 	.word	0x03002606
    4eb0:	00004cc1 	.word	0x00004cc1
    4eb4:	00004c4b 	.word	0x00004c4b

00004eb8 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    4eb8:	b580      	push	{r7, lr}
    4eba:	b084      	sub	sp, #16
    4ebc:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    4ebe:	4b6b      	ldr	r3, [pc, #428]	; (506c <_oscctrl_init_referenced_generators+0x1b4>)
    4ec0:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    4ec2:	2204      	movs	r2, #4
    4ec4:	2100      	movs	r1, #0
    4ec6:	486a      	ldr	r0, [pc, #424]	; (5070 <_oscctrl_init_referenced_generators+0x1b8>)
    4ec8:	4b6a      	ldr	r3, [pc, #424]	; (5074 <_oscctrl_init_referenced_generators+0x1bc>)
    4eca:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    4ecc:	bf00      	nop
    4ece:	4868      	ldr	r0, [pc, #416]	; (5070 <_oscctrl_init_referenced_generators+0x1b8>)
    4ed0:	4b69      	ldr	r3, [pc, #420]	; (5078 <_oscctrl_init_referenced_generators+0x1c0>)
    4ed2:	4798      	blx	r3
    4ed4:	4603      	mov	r3, r0
    4ed6:	2b00      	cmp	r3, #0
    4ed8:	d1f9      	bne.n	4ece <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    4eda:	2100      	movs	r1, #0
    4edc:	68f8      	ldr	r0, [r7, #12]
    4ede:	4b67      	ldr	r3, [pc, #412]	; (507c <_oscctrl_init_referenced_generators+0x1c4>)
    4ee0:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    4ee2:	4967      	ldr	r1, [pc, #412]	; (5080 <_oscctrl_init_referenced_generators+0x1c8>)
    4ee4:	68f8      	ldr	r0, [r7, #12]
    4ee6:	4b67      	ldr	r3, [pc, #412]	; (5084 <_oscctrl_init_referenced_generators+0x1cc>)
    4ee8:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    4eea:	bf00      	nop
    4eec:	68f8      	ldr	r0, [r7, #12]
    4eee:	4b66      	ldr	r3, [pc, #408]	; (5088 <_oscctrl_init_referenced_generators+0x1d0>)
    4ef0:	4798      	blx	r3
    4ef2:	4603      	mov	r3, r0
    4ef4:	2b00      	cmp	r3, #0
    4ef6:	d1f9      	bne.n	4eec <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    4ef8:	2100      	movs	r1, #0
    4efa:	68f8      	ldr	r0, [r7, #12]
    4efc:	4b63      	ldr	r3, [pc, #396]	; (508c <_oscctrl_init_referenced_generators+0x1d4>)
    4efe:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    4f00:	bf00      	nop
    4f02:	68f8      	ldr	r0, [r7, #12]
    4f04:	4b62      	ldr	r3, [pc, #392]	; (5090 <_oscctrl_init_referenced_generators+0x1d8>)
    4f06:	4798      	blx	r3
    4f08:	4603      	mov	r3, r0
    4f0a:	2b00      	cmp	r3, #0
    4f0c:	d1f9      	bne.n	4f02 <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    4f0e:	2302      	movs	r3, #2
    4f10:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    4f12:	7afb      	ldrb	r3, [r7, #11]
    4f14:	4619      	mov	r1, r3
    4f16:	68f8      	ldr	r0, [r7, #12]
    4f18:	4b58      	ldr	r3, [pc, #352]	; (507c <_oscctrl_init_referenced_generators+0x1c4>)
    4f1a:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    4f1c:	bf00      	nop
    4f1e:	68f8      	ldr	r0, [r7, #12]
    4f20:	4b5c      	ldr	r3, [pc, #368]	; (5094 <_oscctrl_init_referenced_generators+0x1dc>)
    4f22:	4798      	blx	r3
    4f24:	4603      	mov	r3, r0
    4f26:	2b00      	cmp	r3, #0
    4f28:	d1f9      	bne.n	4f1e <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    4f2a:	68f8      	ldr	r0, [r7, #12]
    4f2c:	4b5a      	ldr	r3, [pc, #360]	; (5098 <_oscctrl_init_referenced_generators+0x1e0>)
    4f2e:	4798      	blx	r3
    4f30:	4603      	mov	r3, r0
    4f32:	4619      	mov	r1, r3
    4f34:	68f8      	ldr	r0, [r7, #12]
    4f36:	4b59      	ldr	r3, [pc, #356]	; (509c <_oscctrl_init_referenced_generators+0x1e4>)
    4f38:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    4f3a:	bf00      	nop
    4f3c:	68f8      	ldr	r0, [r7, #12]
    4f3e:	4b58      	ldr	r3, [pc, #352]	; (50a0 <_oscctrl_init_referenced_generators+0x1e8>)
    4f40:	4798      	blx	r3
    4f42:	4603      	mov	r3, r0
    4f44:	2b00      	cmp	r3, #0
    4f46:	d1f9      	bne.n	4f3c <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    4f48:	2319      	movs	r3, #25
    4f4a:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    4f4c:	7afb      	ldrb	r3, [r7, #11]
    4f4e:	4619      	mov	r1, r3
    4f50:	68f8      	ldr	r0, [r7, #12]
    4f52:	4b4e      	ldr	r3, [pc, #312]	; (508c <_oscctrl_init_referenced_generators+0x1d4>)
    4f54:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    4f56:	bf00      	nop
    4f58:	68f8      	ldr	r0, [r7, #12]
    4f5a:	4b4d      	ldr	r3, [pc, #308]	; (5090 <_oscctrl_init_referenced_generators+0x1d8>)
    4f5c:	4798      	blx	r3
    4f5e:	4603      	mov	r3, r0
    4f60:	2b00      	cmp	r3, #0
    4f62:	d1f9      	bne.n	4f58 <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    4f64:	2245      	movs	r2, #69	; 0x45
    4f66:	2101      	movs	r1, #1
    4f68:	4841      	ldr	r0, [pc, #260]	; (5070 <_oscctrl_init_referenced_generators+0x1b8>)
    4f6a:	4b4e      	ldr	r3, [pc, #312]	; (50a4 <_oscctrl_init_referenced_generators+0x1ec>)
    4f6c:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    4f6e:	223b      	movs	r2, #59	; 0x3b
    4f70:	2100      	movs	r1, #0
    4f72:	68f8      	ldr	r0, [r7, #12]
    4f74:	4b4c      	ldr	r3, [pc, #304]	; (50a8 <_oscctrl_init_referenced_generators+0x1f0>)
    4f76:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    4f78:	f44f 6201 	mov.w	r2, #2064	; 0x810
    4f7c:	2100      	movs	r1, #0
    4f7e:	68f8      	ldr	r0, [r7, #12]
    4f80:	4b4a      	ldr	r3, [pc, #296]	; (50ac <_oscctrl_init_referenced_generators+0x1f4>)
    4f82:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    4f84:	2242      	movs	r2, #66	; 0x42
    4f86:	2100      	movs	r1, #0
    4f88:	68f8      	ldr	r0, [r7, #12]
    4f8a:	4b49      	ldr	r3, [pc, #292]	; (50b0 <_oscctrl_init_referenced_generators+0x1f8>)
    4f8c:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    4f8e:	4a49      	ldr	r2, [pc, #292]	; (50b4 <_oscctrl_init_referenced_generators+0x1fc>)
    4f90:	2101      	movs	r1, #1
    4f92:	68f8      	ldr	r0, [r7, #12]
    4f94:	4b44      	ldr	r3, [pc, #272]	; (50a8 <_oscctrl_init_referenced_generators+0x1f0>)
    4f96:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    4f98:	f44f 6203 	mov.w	r2, #2096	; 0x830
    4f9c:	2101      	movs	r1, #1
    4f9e:	68f8      	ldr	r0, [r7, #12]
    4fa0:	4b42      	ldr	r3, [pc, #264]	; (50ac <_oscctrl_init_referenced_generators+0x1f4>)
    4fa2:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    4fa4:	2202      	movs	r2, #2
    4fa6:	2101      	movs	r1, #1
    4fa8:	68f8      	ldr	r0, [r7, #12]
    4faa:	4b41      	ldr	r3, [pc, #260]	; (50b0 <_oscctrl_init_referenced_generators+0x1f8>)
    4fac:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    4fae:	68f8      	ldr	r0, [r7, #12]
    4fb0:	4b41      	ldr	r3, [pc, #260]	; (50b8 <_oscctrl_init_referenced_generators+0x200>)
    4fb2:	4798      	blx	r3
    4fb4:	4603      	mov	r3, r0
    4fb6:	2b00      	cmp	r3, #0
    4fb8:	d00c      	beq.n	4fd4 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    4fba:	f44f 6310 	mov.w	r3, #2304	; 0x900
    4fbe:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    4fc0:	bf00      	nop
    4fc2:	6879      	ldr	r1, [r7, #4]
    4fc4:	68f8      	ldr	r0, [r7, #12]
    4fc6:	4b3d      	ldr	r3, [pc, #244]	; (50bc <_oscctrl_init_referenced_generators+0x204>)
    4fc8:	4798      	blx	r3
    4fca:	4602      	mov	r2, r0
    4fcc:	687b      	ldr	r3, [r7, #4]
    4fce:	429a      	cmp	r2, r3
    4fd0:	d1f7      	bne.n	4fc2 <_oscctrl_init_referenced_generators+0x10a>
    4fd2:	e009      	b.n	4fe8 <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    4fd4:	bf00      	nop
    4fd6:	68f8      	ldr	r0, [r7, #12]
    4fd8:	4b39      	ldr	r3, [pc, #228]	; (50c0 <_oscctrl_init_referenced_generators+0x208>)
    4fda:	4798      	blx	r3
    4fdc:	4603      	mov	r3, r0
    4fde:	f083 0301 	eor.w	r3, r3, #1
    4fe2:	b2db      	uxtb	r3, r3
    4fe4:	2b00      	cmp	r3, #0
    4fe6:	d1f6      	bne.n	4fd6 <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    4fe8:	bf00      	nop
    4fea:	2100      	movs	r1, #0
    4fec:	68f8      	ldr	r0, [r7, #12]
    4fee:	4b35      	ldr	r3, [pc, #212]	; (50c4 <_oscctrl_init_referenced_generators+0x20c>)
    4ff0:	4798      	blx	r3
    4ff2:	4603      	mov	r3, r0
    4ff4:	f083 0301 	eor.w	r3, r3, #1
    4ff8:	b2db      	uxtb	r3, r3
    4ffa:	2b00      	cmp	r3, #0
    4ffc:	d009      	beq.n	5012 <_oscctrl_init_referenced_generators+0x15a>
    4ffe:	2100      	movs	r1, #0
    5000:	68f8      	ldr	r0, [r7, #12]
    5002:	4b31      	ldr	r3, [pc, #196]	; (50c8 <_oscctrl_init_referenced_generators+0x210>)
    5004:	4798      	blx	r3
    5006:	4603      	mov	r3, r0
    5008:	f083 0301 	eor.w	r3, r3, #1
    500c:	b2db      	uxtb	r3, r3
    500e:	2b00      	cmp	r3, #0
    5010:	d1eb      	bne.n	4fea <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    5012:	bf00      	nop
    5014:	2101      	movs	r1, #1
    5016:	68f8      	ldr	r0, [r7, #12]
    5018:	4b2a      	ldr	r3, [pc, #168]	; (50c4 <_oscctrl_init_referenced_generators+0x20c>)
    501a:	4798      	blx	r3
    501c:	4603      	mov	r3, r0
    501e:	f083 0301 	eor.w	r3, r3, #1
    5022:	b2db      	uxtb	r3, r3
    5024:	2b00      	cmp	r3, #0
    5026:	d009      	beq.n	503c <_oscctrl_init_referenced_generators+0x184>
    5028:	2101      	movs	r1, #1
    502a:	68f8      	ldr	r0, [r7, #12]
    502c:	4b26      	ldr	r3, [pc, #152]	; (50c8 <_oscctrl_init_referenced_generators+0x210>)
    502e:	4798      	blx	r3
    5030:	4603      	mov	r3, r0
    5032:	f083 0301 	eor.w	r3, r3, #1
    5036:	b2db      	uxtb	r3, r3
    5038:	2b00      	cmp	r3, #0
    503a:	d1eb      	bne.n	5014 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    503c:	bf00      	nop
    503e:	480c      	ldr	r0, [pc, #48]	; (5070 <_oscctrl_init_referenced_generators+0x1b8>)
    5040:	4b22      	ldr	r3, [pc, #136]	; (50cc <_oscctrl_init_referenced_generators+0x214>)
    5042:	4798      	blx	r3
    5044:	4603      	mov	r3, r0
    5046:	2b00      	cmp	r3, #0
    5048:	d1f9      	bne.n	503e <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    504a:	2207      	movs	r2, #7
    504c:	2100      	movs	r1, #0
    504e:	4808      	ldr	r0, [pc, #32]	; (5070 <_oscctrl_init_referenced_generators+0x1b8>)
    5050:	4b08      	ldr	r3, [pc, #32]	; (5074 <_oscctrl_init_referenced_generators+0x1bc>)
    5052:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    5054:	bf00      	nop
    5056:	4806      	ldr	r0, [pc, #24]	; (5070 <_oscctrl_init_referenced_generators+0x1b8>)
    5058:	4b07      	ldr	r3, [pc, #28]	; (5078 <_oscctrl_init_referenced_generators+0x1c0>)
    505a:	4798      	blx	r3
    505c:	4603      	mov	r3, r0
    505e:	2b00      	cmp	r3, #0
    5060:	d1f9      	bne.n	5056 <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    5062:	bf00      	nop
    5064:	3710      	adds	r7, #16
    5066:	46bd      	mov	sp, r7
    5068:	bd80      	pop	{r7, pc}
    506a:	bf00      	nop
    506c:	40001000 	.word	0x40001000
    5070:	40001c00 	.word	0x40001c00
    5074:	00004a85 	.word	0x00004a85
    5078:	00004a45 	.word	0x00004a45
    507c:	00004ce9 	.word	0x00004ce9
    5080:	0401bb80 	.word	0x0401bb80
    5084:	00004d8b 	.word	0x00004d8b
    5088:	00004e43 	.word	0x00004e43
    508c:	00004d37 	.word	0x00004d37
    5090:	00004ddb 	.word	0x00004ddb
    5094:	00004da7 	.word	0x00004da7
    5098:	00004d73 	.word	0x00004d73
    509c:	00004d57 	.word	0x00004d57
    50a0:	00004e0f 	.word	0x00004e0f
    50a4:	00004ad5 	.word	0x00004ad5
    50a8:	00004be1 	.word	0x00004be1
    50ac:	00004c1d 	.word	0x00004c1d
    50b0:	00004ba5 	.word	0x00004ba5
    50b4:	000407a0 	.word	0x000407a0
    50b8:	00004d07 	.word	0x00004d07
    50bc:	00004c9b 	.word	0x00004c9b
    50c0:	00004c73 	.word	0x00004c73
    50c4:	00004b31 	.word	0x00004b31
    50c8:	00004b69 	.word	0x00004b69
    50cc:	00004a6d 	.word	0x00004a6d

000050d0 <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    50d0:	b480      	push	{r7}
    50d2:	b083      	sub	sp, #12
    50d4:	af00      	add	r7, sp, #0
    50d6:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    50d8:	687b      	ldr	r3, [r7, #4]
    50da:	69db      	ldr	r3, [r3, #28]
    50dc:	0a9b      	lsrs	r3, r3, #10
    50de:	f003 0301 	and.w	r3, r3, #1
    50e2:	2b00      	cmp	r3, #0
    50e4:	bf14      	ite	ne
    50e6:	2301      	movne	r3, #1
    50e8:	2300      	moveq	r3, #0
    50ea:	b2db      	uxtb	r3, r3
}
    50ec:	4618      	mov	r0, r3
    50ee:	370c      	adds	r7, #12
    50f0:	46bd      	mov	sp, r7
    50f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    50f6:	4770      	bx	lr

000050f8 <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    50f8:	b480      	push	{r7}
    50fa:	b083      	sub	sp, #12
    50fc:	af00      	add	r7, sp, #0
    50fe:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    5100:	687b      	ldr	r3, [r7, #4]
    5102:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5106:	61da      	str	r2, [r3, #28]
}
    5108:	bf00      	nop
    510a:	370c      	adds	r7, #12
    510c:	46bd      	mov	sp, r7
    510e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5112:	4770      	bx	lr

00005114 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    5114:	b480      	push	{r7}
    5116:	b083      	sub	sp, #12
    5118:	af00      	add	r7, sp, #0
    511a:	6078      	str	r0, [r7, #4]
    511c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    511e:	687b      	ldr	r3, [r7, #4]
    5120:	683a      	ldr	r2, [r7, #0]
    5122:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5124:	bf00      	nop
    5126:	370c      	adds	r7, #12
    5128:	46bd      	mov	sp, r7
    512a:	f85d 7b04 	ldr.w	r7, [sp], #4
    512e:	4770      	bx	lr

00005130 <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    5130:	b480      	push	{r7}
    5132:	b083      	sub	sp, #12
    5134:	af00      	add	r7, sp, #0
    5136:	6078      	str	r0, [r7, #4]
    5138:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    513a:	687b      	ldr	r3, [r7, #4]
    513c:	683a      	ldr	r2, [r7, #0]
    513e:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5140:	bf00      	nop
    5142:	370c      	adds	r7, #12
    5144:	46bd      	mov	sp, r7
    5146:	f85d 7b04 	ldr.w	r7, [sp], #4
    514a:	4770      	bx	lr

0000514c <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    514c:	b480      	push	{r7}
    514e:	b083      	sub	sp, #12
    5150:	af00      	add	r7, sp, #0
    5152:	6078      	str	r0, [r7, #4]
    5154:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    5156:	687b      	ldr	r3, [r7, #4]
    5158:	683a      	ldr	r2, [r7, #0]
    515a:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    515c:	bf00      	nop
    515e:	370c      	adds	r7, #12
    5160:	46bd      	mov	sp, r7
    5162:	f85d 7b04 	ldr.w	r7, [sp], #4
    5166:	4770      	bx	lr

00005168 <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    5168:	b480      	push	{r7}
    516a:	b083      	sub	sp, #12
    516c:	af00      	add	r7, sp, #0
    516e:	6078      	str	r0, [r7, #4]
    5170:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    5172:	687b      	ldr	r3, [r7, #4]
    5174:	683a      	ldr	r2, [r7, #0]
    5176:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5178:	bf00      	nop
    517a:	370c      	adds	r7, #12
    517c:	46bd      	mov	sp, r7
    517e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5182:	4770      	bx	lr

00005184 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    5184:	b480      	push	{r7}
    5186:	b085      	sub	sp, #20
    5188:	af00      	add	r7, sp, #0
    518a:	6078      	str	r0, [r7, #4]
    518c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    518e:	687b      	ldr	r3, [r7, #4]
    5190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5192:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    5194:	68fb      	ldr	r3, [r7, #12]
    5196:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    519a:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    519c:	683b      	ldr	r3, [r7, #0]
    519e:	b2db      	uxtb	r3, r3
    51a0:	68fa      	ldr	r2, [r7, #12]
    51a2:	4313      	orrs	r3, r2
    51a4:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    51a6:	687b      	ldr	r3, [r7, #4]
    51a8:	68fa      	ldr	r2, [r7, #12]
    51aa:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    51ac:	bf00      	nop
    51ae:	3714      	adds	r7, #20
    51b0:	46bd      	mov	sp, r7
    51b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    51b6:	4770      	bx	lr

000051b8 <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    51b8:	b480      	push	{r7}
    51ba:	b085      	sub	sp, #20
    51bc:	af00      	add	r7, sp, #0
    51be:	6078      	str	r0, [r7, #4]
    51c0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    51c2:	687b      	ldr	r3, [r7, #4]
    51c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    51c6:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    51c8:	68fb      	ldr	r3, [r7, #12]
    51ca:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    51ce:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    51d0:	683b      	ldr	r3, [r7, #0]
    51d2:	041b      	lsls	r3, r3, #16
    51d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    51d8:	68fa      	ldr	r2, [r7, #12]
    51da:	4313      	orrs	r3, r2
    51dc:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    51de:	687b      	ldr	r3, [r7, #4]
    51e0:	68fa      	ldr	r2, [r7, #12]
    51e2:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    51e4:	bf00      	nop
    51e6:	3714      	adds	r7, #20
    51e8:	46bd      	mov	sp, r7
    51ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    51ee:	4770      	bx	lr

000051f0 <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    51f0:	b480      	push	{r7}
    51f2:	b083      	sub	sp, #12
    51f4:	af00      	add	r7, sp, #0
    51f6:	6078      	str	r0, [r7, #4]
    51f8:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    51fa:	687b      	ldr	r3, [r7, #4]
    51fc:	683a      	ldr	r2, [r7, #0]
    51fe:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5200:	bf00      	nop
    5202:	370c      	adds	r7, #12
    5204:	46bd      	mov	sp, r7
    5206:	f85d 7b04 	ldr.w	r7, [sp], #4
    520a:	4770      	bx	lr

0000520c <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    520c:	b480      	push	{r7}
    520e:	b083      	sub	sp, #12
    5210:	af00      	add	r7, sp, #0
    5212:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    5214:	687b      	ldr	r3, [r7, #4]
    5216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    5218:	4618      	mov	r0, r3
    521a:	370c      	adds	r7, #12
    521c:	46bd      	mov	sp, r7
    521e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5222:	4770      	bx	lr

00005224 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    5224:	b480      	push	{r7}
    5226:	b085      	sub	sp, #20
    5228:	af00      	add	r7, sp, #0
    522a:	60f8      	str	r0, [r7, #12]
    522c:	60b9      	str	r1, [r7, #8]
    522e:	607a      	str	r2, [r7, #4]
	while (count--) {
    5230:	e007      	b.n	5242 <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    5232:	68fb      	ldr	r3, [r7, #12]
    5234:	1c5a      	adds	r2, r3, #1
    5236:	60fa      	str	r2, [r7, #12]
    5238:	68ba      	ldr	r2, [r7, #8]
    523a:	1c51      	adds	r1, r2, #1
    523c:	60b9      	str	r1, [r7, #8]
    523e:	7812      	ldrb	r2, [r2, #0]
    5240:	701a      	strb	r2, [r3, #0]
	while (count--) {
    5242:	687b      	ldr	r3, [r7, #4]
    5244:	1e5a      	subs	r2, r3, #1
    5246:	607a      	str	r2, [r7, #4]
    5248:	2b00      	cmp	r3, #0
    524a:	d1f2      	bne.n	5232 <_qspi_memcpy+0xe>
	}
}
    524c:	bf00      	nop
    524e:	3714      	adds	r7, #20
    5250:	46bd      	mov	sp, r7
    5252:	f85d 7b04 	ldr.w	r7, [sp], #4
    5256:	4770      	bx	lr

00005258 <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    5258:	b580      	push	{r7, lr}
    525a:	b082      	sub	sp, #8
    525c:	af00      	add	r7, sp, #0
    525e:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    5260:	4903      	ldr	r1, [pc, #12]	; (5270 <_qspi_end_transfer+0x18>)
    5262:	6878      	ldr	r0, [r7, #4]
    5264:	4b03      	ldr	r3, [pc, #12]	; (5274 <_qspi_end_transfer+0x1c>)
    5266:	4798      	blx	r3
}
    5268:	bf00      	nop
    526a:	3708      	adds	r7, #8
    526c:	46bd      	mov	sp, r7
    526e:	bd80      	pop	{r7, pc}
    5270:	01000002 	.word	0x01000002
    5274:	00005115 	.word	0x00005115

00005278 <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    5278:	b580      	push	{r7, lr}
    527a:	b082      	sub	sp, #8
    527c:	af00      	add	r7, sp, #0
    527e:	6078      	str	r0, [r7, #4]
    5280:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    5282:	687b      	ldr	r3, [r7, #4]
    5284:	2b00      	cmp	r3, #0
    5286:	d004      	beq.n	5292 <_qspi_sync_init+0x1a>
    5288:	683b      	ldr	r3, [r7, #0]
    528a:	2b00      	cmp	r3, #0
    528c:	d001      	beq.n	5292 <_qspi_sync_init+0x1a>
    528e:	2301      	movs	r3, #1
    5290:	e000      	b.n	5294 <_qspi_sync_init+0x1c>
    5292:	2300      	movs	r3, #0
    5294:	f003 0301 	and.w	r3, r3, #1
    5298:	b2db      	uxtb	r3, r3
    529a:	2240      	movs	r2, #64	; 0x40
    529c:	490c      	ldr	r1, [pc, #48]	; (52d0 <_qspi_sync_init+0x58>)
    529e:	4618      	mov	r0, r3
    52a0:	4b0c      	ldr	r3, [pc, #48]	; (52d4 <_qspi_sync_init+0x5c>)
    52a2:	4798      	blx	r3
	dev->prvt = hw;
    52a4:	687b      	ldr	r3, [r7, #4]
    52a6:	683a      	ldr	r2, [r7, #0]
    52a8:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    52aa:	687b      	ldr	r3, [r7, #4]
    52ac:	681b      	ldr	r3, [r3, #0]
    52ae:	2101      	movs	r1, #1
    52b0:	4618      	mov	r0, r3
    52b2:	4b09      	ldr	r3, [pc, #36]	; (52d8 <_qspi_sync_init+0x60>)
    52b4:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    52b6:	4909      	ldr	r1, [pc, #36]	; (52dc <_qspi_sync_init+0x64>)
    52b8:	6838      	ldr	r0, [r7, #0]
    52ba:	4b09      	ldr	r3, [pc, #36]	; (52e0 <_qspi_sync_init+0x68>)
    52bc:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    52be:	4909      	ldr	r1, [pc, #36]	; (52e4 <_qspi_sync_init+0x6c>)
    52c0:	6838      	ldr	r0, [r7, #0]
    52c2:	4b09      	ldr	r3, [pc, #36]	; (52e8 <_qspi_sync_init+0x70>)
    52c4:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    52c6:	2300      	movs	r3, #0
}
    52c8:	4618      	mov	r0, r3
    52ca:	3708      	adds	r7, #8
    52cc:	46bd      	mov	sp, r7
    52ce:	bd80      	pop	{r7, pc}
    52d0:	00013104 	.word	0x00013104
    52d4:	00002edd 	.word	0x00002edd
    52d8:	00005115 	.word	0x00005115
    52dc:	06000011 	.word	0x06000011
    52e0:	00005131 	.word	0x00005131
    52e4:	00241300 	.word	0x00241300
    52e8:	0000514d 	.word	0x0000514d

000052ec <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    52ec:	b580      	push	{r7, lr}
    52ee:	b082      	sub	sp, #8
    52f0:	af00      	add	r7, sp, #0
    52f2:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    52f4:	687b      	ldr	r3, [r7, #4]
    52f6:	681b      	ldr	r3, [r3, #0]
    52f8:	2102      	movs	r1, #2
    52fa:	4618      	mov	r0, r3
    52fc:	4b03      	ldr	r3, [pc, #12]	; (530c <_qspi_sync_enable+0x20>)
    52fe:	4798      	blx	r3
	return ERR_NONE;
    5300:	2300      	movs	r3, #0
}
    5302:	4618      	mov	r0, r3
    5304:	3708      	adds	r7, #8
    5306:	46bd      	mov	sp, r7
    5308:	bd80      	pop	{r7, pc}
    530a:	bf00      	nop
    530c:	00005115 	.word	0x00005115

00005310 <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    5310:	b580      	push	{r7, lr}
    5312:	b082      	sub	sp, #8
    5314:	af00      	add	r7, sp, #0
    5316:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    5318:	687b      	ldr	r3, [r7, #4]
    531a:	681b      	ldr	r3, [r3, #0]
    531c:	2100      	movs	r1, #0
    531e:	4618      	mov	r0, r3
    5320:	4b03      	ldr	r3, [pc, #12]	; (5330 <_qspi_sync_disable+0x20>)
    5322:	4798      	blx	r3
	return ERR_NONE;
    5324:	2300      	movs	r3, #0
}
    5326:	4618      	mov	r0, r3
    5328:	3708      	adds	r7, #8
    532a:	46bd      	mov	sp, r7
    532c:	bd80      	pop	{r7, pc}
    532e:	bf00      	nop
    5330:	00005115 	.word	0x00005115

00005334 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5334:	b580      	push	{r7, lr}
    5336:	b084      	sub	sp, #16
    5338:	af00      	add	r7, sp, #0
    533a:	6078      	str	r0, [r7, #4]
    533c:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    533e:	687b      	ldr	r3, [r7, #4]
    5340:	681b      	ldr	r3, [r3, #0]
    5342:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    5344:	683b      	ldr	r3, [r7, #0]
    5346:	781b      	ldrb	r3, [r3, #0]
    5348:	f003 0320 	and.w	r3, r3, #32
    534c:	b2db      	uxtb	r3, r3
    534e:	2b00      	cmp	r3, #0
    5350:	d005      	beq.n	535e <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    5352:	683b      	ldr	r3, [r7, #0]
    5354:	689b      	ldr	r3, [r3, #8]
    5356:	4619      	mov	r1, r3
    5358:	68f8      	ldr	r0, [r7, #12]
    535a:	4b13      	ldr	r3, [pc, #76]	; (53a8 <_qspi_sync_command_set_ifr+0x74>)
    535c:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    535e:	683b      	ldr	r3, [r7, #0]
    5360:	781b      	ldrb	r3, [r3, #0]
    5362:	f003 0310 	and.w	r3, r3, #16
    5366:	b2db      	uxtb	r3, r3
    5368:	2b00      	cmp	r3, #0
    536a:	d005      	beq.n	5378 <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    536c:	683b      	ldr	r3, [r7, #0]
    536e:	791b      	ldrb	r3, [r3, #4]
    5370:	4619      	mov	r1, r3
    5372:	68f8      	ldr	r0, [r7, #12]
    5374:	4b0d      	ldr	r3, [pc, #52]	; (53ac <_qspi_sync_command_set_ifr+0x78>)
    5376:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    5378:	683b      	ldr	r3, [r7, #0]
    537a:	781b      	ldrb	r3, [r3, #0]
    537c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5380:	b2db      	uxtb	r3, r3
    5382:	2b00      	cmp	r3, #0
    5384:	d005      	beq.n	5392 <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    5386:	683b      	ldr	r3, [r7, #0]
    5388:	795b      	ldrb	r3, [r3, #5]
    538a:	4619      	mov	r1, r3
    538c:	68f8      	ldr	r0, [r7, #12]
    538e:	4b08      	ldr	r3, [pc, #32]	; (53b0 <_qspi_sync_command_set_ifr+0x7c>)
    5390:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    5392:	683b      	ldr	r3, [r7, #0]
    5394:	681b      	ldr	r3, [r3, #0]
    5396:	4619      	mov	r1, r3
    5398:	68f8      	ldr	r0, [r7, #12]
    539a:	4b06      	ldr	r3, [pc, #24]	; (53b4 <_qspi_sync_command_set_ifr+0x80>)
    539c:	4798      	blx	r3
}
    539e:	bf00      	nop
    53a0:	3710      	adds	r7, #16
    53a2:	46bd      	mov	sp, r7
    53a4:	bd80      	pop	{r7, pc}
    53a6:	bf00      	nop
    53a8:	00005169 	.word	0x00005169
    53ac:	00005185 	.word	0x00005185
    53b0:	000051b9 	.word	0x000051b9
    53b4:	000051f1 	.word	0x000051f1

000053b8 <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    53b8:	b580      	push	{r7, lr}
    53ba:	b084      	sub	sp, #16
    53bc:	af00      	add	r7, sp, #0
    53be:	6078      	str	r0, [r7, #4]
    53c0:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    53c2:	687b      	ldr	r3, [r7, #4]
    53c4:	681b      	ldr	r3, [r3, #0]
    53c6:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    53c8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    53cc:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    53ce:	683b      	ldr	r3, [r7, #0]
    53d0:	781b      	ldrb	r3, [r3, #0]
    53d2:	f003 0320 	and.w	r3, r3, #32
    53d6:	b2db      	uxtb	r3, r3
    53d8:	2b00      	cmp	r3, #0
    53da:	d004      	beq.n	53e6 <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    53dc:	683b      	ldr	r3, [r7, #0]
    53de:	689b      	ldr	r3, [r3, #8]
    53e0:	68fa      	ldr	r2, [r7, #12]
    53e2:	4413      	add	r3, r2
    53e4:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    53e6:	68b8      	ldr	r0, [r7, #8]
    53e8:	4b18      	ldr	r3, [pc, #96]	; (544c <_qspi_sync_run_transfer+0x94>)
    53ea:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    53ec:	683b      	ldr	r3, [r7, #0]
    53ee:	691b      	ldr	r3, [r3, #16]
    53f0:	2b00      	cmp	r3, #0
    53f2:	d103      	bne.n	53fc <_qspi_sync_run_transfer+0x44>
    53f4:	683b      	ldr	r3, [r7, #0]
    53f6:	695b      	ldr	r3, [r3, #20]
    53f8:	2b00      	cmp	r3, #0
    53fa:	d001      	beq.n	5400 <_qspi_sync_run_transfer+0x48>
    53fc:	2301      	movs	r3, #1
    53fe:	e000      	b.n	5402 <_qspi_sync_run_transfer+0x4a>
    5400:	2300      	movs	r3, #0
    5402:	f003 0301 	and.w	r3, r3, #1
    5406:	b2db      	uxtb	r3, r3
    5408:	2282      	movs	r2, #130	; 0x82
    540a:	4911      	ldr	r1, [pc, #68]	; (5450 <_qspi_sync_run_transfer+0x98>)
    540c:	4618      	mov	r0, r3
    540e:	4b11      	ldr	r3, [pc, #68]	; (5454 <_qspi_sync_run_transfer+0x9c>)
    5410:	4798      	blx	r3

	if (cmd->tx_buf) {
    5412:	683b      	ldr	r3, [r7, #0]
    5414:	691b      	ldr	r3, [r3, #16]
    5416:	2b00      	cmp	r3, #0
    5418:	d008      	beq.n	542c <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    541a:	683b      	ldr	r3, [r7, #0]
    541c:	6919      	ldr	r1, [r3, #16]
    541e:	683b      	ldr	r3, [r7, #0]
    5420:	68db      	ldr	r3, [r3, #12]
    5422:	461a      	mov	r2, r3
    5424:	68f8      	ldr	r0, [r7, #12]
    5426:	4b0c      	ldr	r3, [pc, #48]	; (5458 <_qspi_sync_run_transfer+0xa0>)
    5428:	4798      	blx	r3
    542a:	e007      	b.n	543c <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    542c:	683b      	ldr	r3, [r7, #0]
    542e:	6958      	ldr	r0, [r3, #20]
    5430:	683b      	ldr	r3, [r7, #0]
    5432:	68db      	ldr	r3, [r3, #12]
    5434:	461a      	mov	r2, r3
    5436:	68f9      	ldr	r1, [r7, #12]
    5438:	4b07      	ldr	r3, [pc, #28]	; (5458 <_qspi_sync_run_transfer+0xa0>)
    543a:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    543c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5440:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    5444:	bf00      	nop
    5446:	3710      	adds	r7, #16
    5448:	46bd      	mov	sp, r7
    544a:	bd80      	pop	{r7, pc}
    544c:	0000520d 	.word	0x0000520d
    5450:	00013104 	.word	0x00013104
    5454:	00002edd 	.word	0x00002edd
    5458:	00005225 	.word	0x00005225

0000545c <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    545c:	b580      	push	{r7, lr}
    545e:	b082      	sub	sp, #8
    5460:	af00      	add	r7, sp, #0
    5462:	6078      	str	r0, [r7, #4]
    5464:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    5466:	6839      	ldr	r1, [r7, #0]
    5468:	6878      	ldr	r0, [r7, #4]
    546a:	4b14      	ldr	r3, [pc, #80]	; (54bc <_qspi_sync_serial_run_command+0x60>)
    546c:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    546e:	683b      	ldr	r3, [r7, #0]
    5470:	781b      	ldrb	r3, [r3, #0]
    5472:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    5476:	b2db      	uxtb	r3, r3
    5478:	2b00      	cmp	r3, #0
    547a:	d003      	beq.n	5484 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    547c:	6839      	ldr	r1, [r7, #0]
    547e:	6878      	ldr	r0, [r7, #4]
    5480:	4b0f      	ldr	r3, [pc, #60]	; (54c0 <_qspi_sync_serial_run_command+0x64>)
    5482:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    5484:	687b      	ldr	r3, [r7, #4]
    5486:	681b      	ldr	r3, [r3, #0]
    5488:	4618      	mov	r0, r3
    548a:	4b0e      	ldr	r3, [pc, #56]	; (54c4 <_qspi_sync_serial_run_command+0x68>)
    548c:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    548e:	bf00      	nop
    5490:	687b      	ldr	r3, [r7, #4]
    5492:	681b      	ldr	r3, [r3, #0]
    5494:	4618      	mov	r0, r3
    5496:	4b0c      	ldr	r3, [pc, #48]	; (54c8 <_qspi_sync_serial_run_command+0x6c>)
    5498:	4798      	blx	r3
    549a:	4603      	mov	r3, r0
    549c:	f083 0301 	eor.w	r3, r3, #1
    54a0:	b2db      	uxtb	r3, r3
    54a2:	2b00      	cmp	r3, #0
    54a4:	d1f4      	bne.n	5490 <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    54a6:	687b      	ldr	r3, [r7, #4]
    54a8:	681b      	ldr	r3, [r3, #0]
    54aa:	4618      	mov	r0, r3
    54ac:	4b07      	ldr	r3, [pc, #28]	; (54cc <_qspi_sync_serial_run_command+0x70>)
    54ae:	4798      	blx	r3
	return ERR_NONE;
    54b0:	2300      	movs	r3, #0
}
    54b2:	4618      	mov	r0, r3
    54b4:	3708      	adds	r7, #8
    54b6:	46bd      	mov	sp, r7
    54b8:	bd80      	pop	{r7, pc}
    54ba:	bf00      	nop
    54bc:	00005335 	.word	0x00005335
    54c0:	000053b9 	.word	0x000053b9
    54c4:	00005259 	.word	0x00005259
    54c8:	000050d1 	.word	0x000050d1
    54cc:	000050f9 	.word	0x000050f9

000054d0 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    54d0:	b480      	push	{r7}
    54d2:	b083      	sub	sp, #12
    54d4:	af00      	add	r7, sp, #0
    54d6:	6078      	str	r0, [r7, #4]
    54d8:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    54da:	bf00      	nop
    54dc:	687b      	ldr	r3, [r7, #4]
    54de:	691a      	ldr	r2, [r3, #16]
    54e0:	683b      	ldr	r3, [r7, #0]
    54e2:	4013      	ands	r3, r2
    54e4:	2b00      	cmp	r3, #0
    54e6:	d1f9      	bne.n	54dc <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    54e8:	bf00      	nop
    54ea:	370c      	adds	r7, #12
    54ec:	46bd      	mov	sp, r7
    54ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    54f2:	4770      	bx	lr

000054f4 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    54f4:	b480      	push	{r7}
    54f6:	b083      	sub	sp, #12
    54f8:	af00      	add	r7, sp, #0
    54fa:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    54fc:	687b      	ldr	r3, [r7, #4]
    54fe:	f44f 7280 	mov.w	r2, #256	; 0x100
    5502:	819a      	strh	r2, [r3, #12]
}
    5504:	bf00      	nop
    5506:	370c      	adds	r7, #12
    5508:	46bd      	mov	sp, r7
    550a:	f85d 7b04 	ldr.w	r7, [sp], #4
    550e:	4770      	bx	lr

00005510 <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    5510:	b480      	push	{r7}
    5512:	b083      	sub	sp, #12
    5514:	af00      	add	r7, sp, #0
    5516:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    5518:	687b      	ldr	r3, [r7, #4]
    551a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    551e:	819a      	strh	r2, [r3, #12]
}
    5520:	bf00      	nop
    5522:	370c      	adds	r7, #12
    5524:	46bd      	mov	sp, r7
    5526:	f85d 7b04 	ldr.w	r7, [sp], #4
    552a:	4770      	bx	lr

0000552c <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    552c:	b480      	push	{r7}
    552e:	b083      	sub	sp, #12
    5530:	af00      	add	r7, sp, #0
    5532:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    5534:	687b      	ldr	r3, [r7, #4]
    5536:	899b      	ldrh	r3, [r3, #12]
    5538:	b29b      	uxth	r3, r3
}
    553a:	4618      	mov	r0, r3
    553c:	370c      	adds	r7, #12
    553e:	46bd      	mov	sp, r7
    5540:	f85d 7b04 	ldr.w	r7, [sp], #4
    5544:	4770      	bx	lr

00005546 <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    5546:	b480      	push	{r7}
    5548:	b083      	sub	sp, #12
    554a:	af00      	add	r7, sp, #0
    554c:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    554e:	687b      	ldr	r3, [r7, #4]
    5550:	895b      	ldrh	r3, [r3, #10]
    5552:	b29b      	uxth	r3, r3
}
    5554:	4618      	mov	r0, r3
    5556:	370c      	adds	r7, #12
    5558:	46bd      	mov	sp, r7
    555a:	f85d 7b04 	ldr.w	r7, [sp], #4
    555e:	4770      	bx	lr

00005560 <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    5560:	b580      	push	{r7, lr}
    5562:	b082      	sub	sp, #8
    5564:	af00      	add	r7, sp, #0
    5566:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    5568:	687b      	ldr	r3, [r7, #4]
    556a:	881b      	ldrh	r3, [r3, #0]
    556c:	b29b      	uxth	r3, r3
    556e:	f043 0301 	orr.w	r3, r3, #1
    5572:	b29a      	uxth	r2, r3
    5574:	687b      	ldr	r3, [r7, #4]
    5576:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    5578:	2101      	movs	r1, #1
    557a:	6878      	ldr	r0, [r7, #4]
    557c:	4b02      	ldr	r3, [pc, #8]	; (5588 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    557e:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5580:	bf00      	nop
    5582:	3708      	adds	r7, #8
    5584:	46bd      	mov	sp, r7
    5586:	bd80      	pop	{r7, pc}
    5588:	000054d1 	.word	0x000054d1

0000558c <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    558c:	b580      	push	{r7, lr}
    558e:	b084      	sub	sp, #16
    5590:	af00      	add	r7, sp, #0
    5592:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5594:	f248 0103 	movw	r1, #32771	; 0x8003
    5598:	6878      	ldr	r0, [r7, #4]
    559a:	4b0a      	ldr	r3, [pc, #40]	; (55c4 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    559c:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    559e:	687b      	ldr	r3, [r7, #4]
    55a0:	881b      	ldrh	r3, [r3, #0]
    55a2:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    55a4:	89fb      	ldrh	r3, [r7, #14]
    55a6:	085b      	lsrs	r3, r3, #1
    55a8:	b29b      	uxth	r3, r3
    55aa:	f003 0301 	and.w	r3, r3, #1
    55ae:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    55b0:	89fb      	ldrh	r3, [r7, #14]
    55b2:	2b00      	cmp	r3, #0
    55b4:	bf14      	ite	ne
    55b6:	2301      	movne	r3, #1
    55b8:	2300      	moveq	r3, #0
    55ba:	b2db      	uxtb	r3, r3
}
    55bc:	4618      	mov	r0, r3
    55be:	3710      	adds	r7, #16
    55c0:	46bd      	mov	sp, r7
    55c2:	bd80      	pop	{r7, pc}
    55c4:	000054d1 	.word	0x000054d1

000055c8 <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    55c8:	b580      	push	{r7, lr}
    55ca:	b082      	sub	sp, #8
    55cc:	af00      	add	r7, sp, #0
    55ce:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    55d0:	687b      	ldr	r3, [r7, #4]
    55d2:	881b      	ldrh	r3, [r3, #0]
    55d4:	b29b      	uxth	r3, r3
    55d6:	f023 0302 	bic.w	r3, r3, #2
    55da:	b29a      	uxth	r2, r3
    55dc:	687b      	ldr	r3, [r7, #4]
    55de:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    55e0:	f248 0103 	movw	r1, #32771	; 0x8003
    55e4:	6878      	ldr	r0, [r7, #4]
    55e6:	4b03      	ldr	r3, [pc, #12]	; (55f4 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    55e8:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    55ea:	bf00      	nop
    55ec:	3708      	adds	r7, #8
    55ee:	46bd      	mov	sp, r7
    55f0:	bd80      	pop	{r7, pc}
    55f2:	bf00      	nop
    55f4:	000054d1 	.word	0x000054d1

000055f8 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    55f8:	b580      	push	{r7, lr}
    55fa:	b082      	sub	sp, #8
    55fc:	af00      	add	r7, sp, #0
    55fe:	6078      	str	r0, [r7, #4]
    5600:	460b      	mov	r3, r1
    5602:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    5604:	687b      	ldr	r3, [r7, #4]
    5606:	887a      	ldrh	r2, [r7, #2]
    5608:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    560a:	f248 0103 	movw	r1, #32771	; 0x8003
    560e:	6878      	ldr	r0, [r7, #4]
    5610:	4b02      	ldr	r3, [pc, #8]	; (561c <hri_rtcmode0_write_CTRLA_reg+0x24>)
    5612:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5614:	bf00      	nop
    5616:	3708      	adds	r7, #8
    5618:	46bd      	mov	sp, r7
    561a:	bd80      	pop	{r7, pc}
    561c:	000054d1 	.word	0x000054d1

00005620 <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    5620:	b480      	push	{r7}
    5622:	b083      	sub	sp, #12
    5624:	af00      	add	r7, sp, #0
    5626:	6078      	str	r0, [r7, #4]
    5628:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    562a:	687b      	ldr	r3, [r7, #4]
    562c:	683a      	ldr	r2, [r7, #0]
    562e:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    5630:	bf00      	nop
    5632:	370c      	adds	r7, #12
    5634:	46bd      	mov	sp, r7
    5636:	f85d 7b04 	ldr.w	r7, [sp], #4
    563a:	4770      	bx	lr

0000563c <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    563c:	b580      	push	{r7, lr}
    563e:	b082      	sub	sp, #8
    5640:	af00      	add	r7, sp, #0
    5642:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    5644:	687b      	ldr	r3, [r7, #4]
    5646:	2b00      	cmp	r3, #0
    5648:	d005      	beq.n	5656 <_calendar_init+0x1a>
    564a:	687b      	ldr	r3, [r7, #4]
    564c:	681b      	ldr	r3, [r3, #0]
    564e:	2b00      	cmp	r3, #0
    5650:	d001      	beq.n	5656 <_calendar_init+0x1a>
    5652:	2301      	movs	r3, #1
    5654:	e000      	b.n	5658 <_calendar_init+0x1c>
    5656:	2300      	movs	r3, #0
    5658:	f003 0301 	and.w	r3, r3, #1
    565c:	b2db      	uxtb	r3, r3
    565e:	222f      	movs	r2, #47	; 0x2f
    5660:	491e      	ldr	r1, [pc, #120]	; (56dc <_calendar_init+0xa0>)
    5662:	4618      	mov	r0, r3
    5664:	4b1e      	ldr	r3, [pc, #120]	; (56e0 <_calendar_init+0xa4>)
    5666:	4798      	blx	r3

	_rtc_dev = dev;
    5668:	4a1e      	ldr	r2, [pc, #120]	; (56e4 <_calendar_init+0xa8>)
    566a:	687b      	ldr	r3, [r7, #4]
    566c:	6013      	str	r3, [r2, #0]

	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    566e:	687b      	ldr	r3, [r7, #4]
    5670:	681b      	ldr	r3, [r3, #0]
    5672:	2101      	movs	r1, #1
    5674:	4618      	mov	r0, r3
    5676:	4b1c      	ldr	r3, [pc, #112]	; (56e8 <_calendar_init+0xac>)
    5678:	4798      	blx	r3
	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    567a:	687b      	ldr	r3, [r7, #4]
    567c:	681b      	ldr	r3, [r3, #0]
    567e:	4618      	mov	r0, r3
    5680:	4b1a      	ldr	r3, [pc, #104]	; (56ec <_calendar_init+0xb0>)
    5682:	4798      	blx	r3
    5684:	4603      	mov	r3, r0
    5686:	2b00      	cmp	r3, #0
    5688:	d00a      	beq.n	56a0 <_calendar_init+0x64>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    568a:	687b      	ldr	r3, [r7, #4]
    568c:	681b      	ldr	r3, [r3, #0]
    568e:	4618      	mov	r0, r3
    5690:	4b17      	ldr	r3, [pc, #92]	; (56f0 <_calendar_init+0xb4>)
    5692:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    5694:	687b      	ldr	r3, [r7, #4]
    5696:	681b      	ldr	r3, [r3, #0]
    5698:	2102      	movs	r1, #2
    569a:	4618      	mov	r0, r3
    569c:	4b12      	ldr	r3, [pc, #72]	; (56e8 <_calendar_init+0xac>)
    569e:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    56a0:	687b      	ldr	r3, [r7, #4]
    56a2:	681b      	ldr	r3, [r3, #0]
    56a4:	4618      	mov	r0, r3
    56a6:	4b13      	ldr	r3, [pc, #76]	; (56f4 <_calendar_init+0xb8>)
    56a8:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    56aa:	687b      	ldr	r3, [r7, #4]
    56ac:	681b      	ldr	r3, [r3, #0]
    56ae:	2101      	movs	r1, #1
    56b0:	4618      	mov	r0, r3
    56b2:	4b0d      	ldr	r3, [pc, #52]	; (56e8 <_calendar_init+0xac>)
    56b4:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    56b6:	687b      	ldr	r3, [r7, #4]
    56b8:	681b      	ldr	r3, [r3, #0]
    56ba:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    56be:	4618      	mov	r0, r3
    56c0:	4b0d      	ldr	r3, [pc, #52]	; (56f8 <_calendar_init+0xbc>)
    56c2:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    56c4:	687b      	ldr	r3, [r7, #4]
    56c6:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    56c8:	2100      	movs	r1, #0
    56ca:	4618      	mov	r0, r3
    56cc:	4b0b      	ldr	r3, [pc, #44]	; (56fc <_calendar_init+0xc0>)
    56ce:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    56d0:	2300      	movs	r3, #0
}
    56d2:	4618      	mov	r0, r3
    56d4:	3708      	adds	r7, #8
    56d6:	46bd      	mov	sp, r7
    56d8:	bd80      	pop	{r7, pc}
    56da:	bf00      	nop
    56dc:	0001311c 	.word	0x0001311c
    56e0:	00002edd 	.word	0x00002edd
    56e4:	20000bf8 	.word	0x20000bf8
    56e8:	000054d1 	.word	0x000054d1
    56ec:	0000558d 	.word	0x0000558d
    56f0:	000055c9 	.word	0x000055c9
    56f4:	00005561 	.word	0x00005561
    56f8:	000055f9 	.word	0x000055f9
    56fc:	00005621 	.word	0x00005621

00005700 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    5700:	b580      	push	{r7, lr}
    5702:	b084      	sub	sp, #16
    5704:	af00      	add	r7, sp, #0
    5706:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    5708:	687b      	ldr	r3, [r7, #4]
    570a:	681b      	ldr	r3, [r3, #0]
    570c:	4618      	mov	r0, r3
    570e:	4b19      	ldr	r3, [pc, #100]	; (5774 <_rtc_interrupt_handler+0x74>)
    5710:	4798      	blx	r3
    5712:	4603      	mov	r3, r0
    5714:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    5716:	687b      	ldr	r3, [r7, #4]
    5718:	681b      	ldr	r3, [r3, #0]
    571a:	4618      	mov	r0, r3
    571c:	4b16      	ldr	r3, [pc, #88]	; (5778 <_rtc_interrupt_handler+0x78>)
    571e:	4798      	blx	r3
    5720:	4603      	mov	r3, r0
    5722:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    5724:	89fa      	ldrh	r2, [r7, #14]
    5726:	89bb      	ldrh	r3, [r7, #12]
    5728:	4013      	ands	r3, r2
    572a:	b29b      	uxth	r3, r3
    572c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    5730:	2b00      	cmp	r3, #0
    5732:	d009      	beq.n	5748 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    5734:	687b      	ldr	r3, [r7, #4]
    5736:	685b      	ldr	r3, [r3, #4]
    5738:	6878      	ldr	r0, [r7, #4]
    573a:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    573c:	687b      	ldr	r3, [r7, #4]
    573e:	681b      	ldr	r3, [r3, #0]
    5740:	4618      	mov	r0, r3
    5742:	4b0e      	ldr	r3, [pc, #56]	; (577c <_rtc_interrupt_handler+0x7c>)
    5744:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    5746:	e010      	b.n	576a <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    5748:	89fa      	ldrh	r2, [r7, #14]
    574a:	89bb      	ldrh	r3, [r7, #12]
    574c:	4013      	ands	r3, r2
    574e:	b29b      	uxth	r3, r3
    5750:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    5754:	2b00      	cmp	r3, #0
    5756:	d008      	beq.n	576a <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    5758:	687b      	ldr	r3, [r7, #4]
    575a:	689b      	ldr	r3, [r3, #8]
    575c:	6878      	ldr	r0, [r7, #4]
    575e:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    5760:	687b      	ldr	r3, [r7, #4]
    5762:	681b      	ldr	r3, [r3, #0]
    5764:	4618      	mov	r0, r3
    5766:	4b06      	ldr	r3, [pc, #24]	; (5780 <_rtc_interrupt_handler+0x80>)
    5768:	4798      	blx	r3
}
    576a:	bf00      	nop
    576c:	3710      	adds	r7, #16
    576e:	46bd      	mov	sp, r7
    5770:	bd80      	pop	{r7, pc}
    5772:	bf00      	nop
    5774:	0000552d 	.word	0x0000552d
    5778:	00005547 	.word	0x00005547
    577c:	000054f5 	.word	0x000054f5
    5780:	00005511 	.word	0x00005511

00005784 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    5784:	b580      	push	{r7, lr}
    5786:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    5788:	4b03      	ldr	r3, [pc, #12]	; (5798 <RTC_Handler+0x14>)
    578a:	681b      	ldr	r3, [r3, #0]
    578c:	4618      	mov	r0, r3
    578e:	4b03      	ldr	r3, [pc, #12]	; (579c <RTC_Handler+0x18>)
    5790:	4798      	blx	r3
}
    5792:	bf00      	nop
    5794:	bd80      	pop	{r7, pc}
    5796:	bf00      	nop
    5798:	20000bf8 	.word	0x20000bf8
    579c:	00005701 	.word	0x00005701

000057a0 <__NVIC_EnableIRQ>:
{
    57a0:	b480      	push	{r7}
    57a2:	b083      	sub	sp, #12
    57a4:	af00      	add	r7, sp, #0
    57a6:	4603      	mov	r3, r0
    57a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    57aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    57ae:	2b00      	cmp	r3, #0
    57b0:	db0b      	blt.n	57ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    57b2:	4909      	ldr	r1, [pc, #36]	; (57d8 <__NVIC_EnableIRQ+0x38>)
    57b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    57b8:	095b      	lsrs	r3, r3, #5
    57ba:	88fa      	ldrh	r2, [r7, #6]
    57bc:	f002 021f 	and.w	r2, r2, #31
    57c0:	2001      	movs	r0, #1
    57c2:	fa00 f202 	lsl.w	r2, r0, r2
    57c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    57ca:	bf00      	nop
    57cc:	370c      	adds	r7, #12
    57ce:	46bd      	mov	sp, r7
    57d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    57d4:	4770      	bx	lr
    57d6:	bf00      	nop
    57d8:	e000e100 	.word	0xe000e100

000057dc <__NVIC_DisableIRQ>:
{
    57dc:	b480      	push	{r7}
    57de:	b083      	sub	sp, #12
    57e0:	af00      	add	r7, sp, #0
    57e2:	4603      	mov	r3, r0
    57e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    57e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    57ea:	2b00      	cmp	r3, #0
    57ec:	db10      	blt.n	5810 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    57ee:	490b      	ldr	r1, [pc, #44]	; (581c <__NVIC_DisableIRQ+0x40>)
    57f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    57f4:	095b      	lsrs	r3, r3, #5
    57f6:	88fa      	ldrh	r2, [r7, #6]
    57f8:	f002 021f 	and.w	r2, r2, #31
    57fc:	2001      	movs	r0, #1
    57fe:	fa00 f202 	lsl.w	r2, r0, r2
    5802:	3320      	adds	r3, #32
    5804:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    5808:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    580c:	f3bf 8f6f 	isb	sy
}
    5810:	bf00      	nop
    5812:	370c      	adds	r7, #12
    5814:	46bd      	mov	sp, r7
    5816:	f85d 7b04 	ldr.w	r7, [sp], #4
    581a:	4770      	bx	lr
    581c:	e000e100 	.word	0xe000e100

00005820 <__NVIC_ClearPendingIRQ>:
{
    5820:	b480      	push	{r7}
    5822:	b083      	sub	sp, #12
    5824:	af00      	add	r7, sp, #0
    5826:	4603      	mov	r3, r0
    5828:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    582a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    582e:	2b00      	cmp	r3, #0
    5830:	db0c      	blt.n	584c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5832:	4909      	ldr	r1, [pc, #36]	; (5858 <__NVIC_ClearPendingIRQ+0x38>)
    5834:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5838:	095b      	lsrs	r3, r3, #5
    583a:	88fa      	ldrh	r2, [r7, #6]
    583c:	f002 021f 	and.w	r2, r2, #31
    5840:	2001      	movs	r0, #1
    5842:	fa00 f202 	lsl.w	r2, r0, r2
    5846:	3360      	adds	r3, #96	; 0x60
    5848:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    584c:	bf00      	nop
    584e:	370c      	adds	r7, #12
    5850:	46bd      	mov	sp, r7
    5852:	f85d 7b04 	ldr.w	r7, [sp], #4
    5856:	4770      	bx	lr
    5858:	e000e100 	.word	0xe000e100

0000585c <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    585c:	b480      	push	{r7}
    585e:	b083      	sub	sp, #12
    5860:	af00      	add	r7, sp, #0
    5862:	6078      	str	r0, [r7, #4]
    5864:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    5866:	bf00      	nop
    5868:	687b      	ldr	r3, [r7, #4]
    586a:	69da      	ldr	r2, [r3, #28]
    586c:	683b      	ldr	r3, [r7, #0]
    586e:	4013      	ands	r3, r2
    5870:	2b00      	cmp	r3, #0
    5872:	d1f9      	bne.n	5868 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    5874:	bf00      	nop
    5876:	370c      	adds	r7, #12
    5878:	46bd      	mov	sp, r7
    587a:	f85d 7b04 	ldr.w	r7, [sp], #4
    587e:	4770      	bx	lr

00005880 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    5880:	b480      	push	{r7}
    5882:	b083      	sub	sp, #12
    5884:	af00      	add	r7, sp, #0
    5886:	6078      	str	r0, [r7, #4]
    5888:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    588a:	687b      	ldr	r3, [r7, #4]
    588c:	69da      	ldr	r2, [r3, #28]
    588e:	683b      	ldr	r3, [r7, #0]
    5890:	4013      	ands	r3, r2
    5892:	2b00      	cmp	r3, #0
    5894:	bf14      	ite	ne
    5896:	2301      	movne	r3, #1
    5898:	2300      	moveq	r3, #0
    589a:	b2db      	uxtb	r3, r3
}
    589c:	4618      	mov	r0, r3
    589e:	370c      	adds	r7, #12
    58a0:	46bd      	mov	sp, r7
    58a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    58a6:	4770      	bx	lr

000058a8 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    58a8:	b480      	push	{r7}
    58aa:	b083      	sub	sp, #12
    58ac:	af00      	add	r7, sp, #0
    58ae:	6078      	str	r0, [r7, #4]
    58b0:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    58b2:	bf00      	nop
    58b4:	687b      	ldr	r3, [r7, #4]
    58b6:	69da      	ldr	r2, [r3, #28]
    58b8:	683b      	ldr	r3, [r7, #0]
    58ba:	4013      	ands	r3, r2
    58bc:	2b00      	cmp	r3, #0
    58be:	d1f9      	bne.n	58b4 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    58c0:	bf00      	nop
    58c2:	370c      	adds	r7, #12
    58c4:	46bd      	mov	sp, r7
    58c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    58ca:	4770      	bx	lr

000058cc <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    58cc:	b480      	push	{r7}
    58ce:	b083      	sub	sp, #12
    58d0:	af00      	add	r7, sp, #0
    58d2:	6078      	str	r0, [r7, #4]
    58d4:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    58d6:	687b      	ldr	r3, [r7, #4]
    58d8:	69da      	ldr	r2, [r3, #28]
    58da:	683b      	ldr	r3, [r7, #0]
    58dc:	4013      	ands	r3, r2
    58de:	2b00      	cmp	r3, #0
    58e0:	bf14      	ite	ne
    58e2:	2301      	movne	r3, #1
    58e4:	2300      	moveq	r3, #0
    58e6:	b2db      	uxtb	r3, r3
}
    58e8:	4618      	mov	r0, r3
    58ea:	370c      	adds	r7, #12
    58ec:	46bd      	mov	sp, r7
    58ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    58f2:	4770      	bx	lr

000058f4 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    58f4:	b480      	push	{r7}
    58f6:	b083      	sub	sp, #12
    58f8:	af00      	add	r7, sp, #0
    58fa:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    58fc:	687b      	ldr	r3, [r7, #4]
    58fe:	2201      	movs	r2, #1
    5900:	761a      	strb	r2, [r3, #24]
}
    5902:	bf00      	nop
    5904:	370c      	adds	r7, #12
    5906:	46bd      	mov	sp, r7
    5908:	f85d 7b04 	ldr.w	r7, [sp], #4
    590c:	4770      	bx	lr

0000590e <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    590e:	b480      	push	{r7}
    5910:	b083      	sub	sp, #12
    5912:	af00      	add	r7, sp, #0
    5914:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    5916:	687b      	ldr	r3, [r7, #4]
    5918:	2202      	movs	r2, #2
    591a:	761a      	strb	r2, [r3, #24]
}
    591c:	bf00      	nop
    591e:	370c      	adds	r7, #12
    5920:	46bd      	mov	sp, r7
    5922:	f85d 7b04 	ldr.w	r7, [sp], #4
    5926:	4770      	bx	lr

00005928 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    5928:	b480      	push	{r7}
    592a:	b083      	sub	sp, #12
    592c:	af00      	add	r7, sp, #0
    592e:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    5930:	687b      	ldr	r3, [r7, #4]
    5932:	7e1b      	ldrb	r3, [r3, #24]
    5934:	b2db      	uxtb	r3, r3
}
    5936:	4618      	mov	r0, r3
    5938:	370c      	adds	r7, #12
    593a:	46bd      	mov	sp, r7
    593c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5940:	4770      	bx	lr

00005942 <hri_sercomi2cm_clear_INTFLAG_reg>:

static inline void hri_sercomi2cm_clear_INTFLAG_reg(const void *const hw, hri_sercomi2cm_intflag_reg_t mask)
{
    5942:	b480      	push	{r7}
    5944:	b083      	sub	sp, #12
    5946:	af00      	add	r7, sp, #0
    5948:	6078      	str	r0, [r7, #4]
    594a:	460b      	mov	r3, r1
    594c:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->I2CM.INTFLAG.reg = mask;
    594e:	687b      	ldr	r3, [r7, #4]
    5950:	78fa      	ldrb	r2, [r7, #3]
    5952:	761a      	strb	r2, [r3, #24]
}
    5954:	bf00      	nop
    5956:	370c      	adds	r7, #12
    5958:	46bd      	mov	sp, r7
    595a:	f85d 7b04 	ldr.w	r7, [sp], #4
    595e:	4770      	bx	lr

00005960 <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    5960:	b480      	push	{r7}
    5962:	b085      	sub	sp, #20
    5964:	af00      	add	r7, sp, #0
    5966:	6078      	str	r0, [r7, #4]
    5968:	460b      	mov	r3, r1
    596a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    596c:	687b      	ldr	r3, [r7, #4]
    596e:	7e1b      	ldrb	r3, [r3, #24]
    5970:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    5972:	7bfa      	ldrb	r2, [r7, #15]
    5974:	78fb      	ldrb	r3, [r7, #3]
    5976:	4013      	ands	r3, r2
    5978:	73fb      	strb	r3, [r7, #15]
	return tmp;
    597a:	7bfb      	ldrb	r3, [r7, #15]
}
    597c:	4618      	mov	r0, r3
    597e:	3714      	adds	r7, #20
    5980:	46bd      	mov	sp, r7
    5982:	f85d 7b04 	ldr.w	r7, [sp], #4
    5986:	4770      	bx	lr

00005988 <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    5988:	b480      	push	{r7}
    598a:	b083      	sub	sp, #12
    598c:	af00      	add	r7, sp, #0
    598e:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    5990:	687b      	ldr	r3, [r7, #4]
    5992:	7e1b      	ldrb	r3, [r3, #24]
    5994:	b2db      	uxtb	r3, r3
}
    5996:	4618      	mov	r0, r3
    5998:	370c      	adds	r7, #12
    599a:	46bd      	mov	sp, r7
    599c:	f85d 7b04 	ldr.w	r7, [sp], #4
    59a0:	4770      	bx	lr

000059a2 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    59a2:	b480      	push	{r7}
    59a4:	b083      	sub	sp, #12
    59a6:	af00      	add	r7, sp, #0
    59a8:	6078      	str	r0, [r7, #4]
    59aa:	460b      	mov	r3, r1
    59ac:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    59ae:	687b      	ldr	r3, [r7, #4]
    59b0:	78fa      	ldrb	r2, [r7, #3]
    59b2:	761a      	strb	r2, [r3, #24]
}
    59b4:	bf00      	nop
    59b6:	370c      	adds	r7, #12
    59b8:	46bd      	mov	sp, r7
    59ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    59be:	4770      	bx	lr

000059c0 <hri_sercomspi_set_INTEN_DRE_bit>:
{
	((Sercom *)hw)->I2CS.INTENCLR.reg = mask;
}

static inline void hri_sercomspi_set_INTEN_DRE_bit(const void *const hw)
{
    59c0:	b480      	push	{r7}
    59c2:	b083      	sub	sp, #12
    59c4:	af00      	add	r7, sp, #0
    59c6:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    59c8:	687b      	ldr	r3, [r7, #4]
    59ca:	2201      	movs	r2, #1
    59cc:	759a      	strb	r2, [r3, #22]
}
    59ce:	bf00      	nop
    59d0:	370c      	adds	r7, #12
    59d2:	46bd      	mov	sp, r7
    59d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    59d8:	4770      	bx	lr

000059da <hri_sercomspi_clear_INTEN_DRE_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
	}
}

static inline void hri_sercomspi_clear_INTEN_DRE_bit(const void *const hw)
{
    59da:	b480      	push	{r7}
    59dc:	b083      	sub	sp, #12
    59de:	af00      	add	r7, sp, #0
    59e0:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    59e2:	687b      	ldr	r3, [r7, #4]
    59e4:	2201      	movs	r2, #1
    59e6:	751a      	strb	r2, [r3, #20]
}
    59e8:	bf00      	nop
    59ea:	370c      	adds	r7, #12
    59ec:	46bd      	mov	sp, r7
    59ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    59f2:	4770      	bx	lr

000059f4 <hri_sercomspi_set_INTEN_TXC_bit>:

static inline void hri_sercomspi_set_INTEN_TXC_bit(const void *const hw)
{
    59f4:	b480      	push	{r7}
    59f6:	b083      	sub	sp, #12
    59f8:	af00      	add	r7, sp, #0
    59fa:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    59fc:	687b      	ldr	r3, [r7, #4]
    59fe:	2202      	movs	r2, #2
    5a00:	759a      	strb	r2, [r3, #22]
}
    5a02:	bf00      	nop
    5a04:	370c      	adds	r7, #12
    5a06:	46bd      	mov	sp, r7
    5a08:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a0c:	4770      	bx	lr

00005a0e <hri_sercomspi_clear_INTEN_TXC_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
	}
}

static inline void hri_sercomspi_clear_INTEN_TXC_bit(const void *const hw)
{
    5a0e:	b480      	push	{r7}
    5a10:	b083      	sub	sp, #12
    5a12:	af00      	add	r7, sp, #0
    5a14:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    5a16:	687b      	ldr	r3, [r7, #4]
    5a18:	2202      	movs	r2, #2
    5a1a:	751a      	strb	r2, [r3, #20]
}
    5a1c:	bf00      	nop
    5a1e:	370c      	adds	r7, #12
    5a20:	46bd      	mov	sp, r7
    5a22:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a26:	4770      	bx	lr

00005a28 <hri_sercomspi_set_INTEN_RXC_bit>:

static inline void hri_sercomspi_set_INTEN_RXC_bit(const void *const hw)
{
    5a28:	b480      	push	{r7}
    5a2a:	b083      	sub	sp, #12
    5a2c:	af00      	add	r7, sp, #0
    5a2e:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    5a30:	687b      	ldr	r3, [r7, #4]
    5a32:	2204      	movs	r2, #4
    5a34:	759a      	strb	r2, [r3, #22]
}
    5a36:	bf00      	nop
    5a38:	370c      	adds	r7, #12
    5a3a:	46bd      	mov	sp, r7
    5a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a40:	4770      	bx	lr

00005a42 <hri_sercomspi_clear_INTEN_RXC_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
	}
}

static inline void hri_sercomspi_clear_INTEN_RXC_bit(const void *const hw)
{
    5a42:	b480      	push	{r7}
    5a44:	b083      	sub	sp, #12
    5a46:	af00      	add	r7, sp, #0
    5a48:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    5a4a:	687b      	ldr	r3, [r7, #4]
    5a4c:	2204      	movs	r2, #4
    5a4e:	751a      	strb	r2, [r3, #20]
}
    5a50:	bf00      	nop
    5a52:	370c      	adds	r7, #12
    5a54:	46bd      	mov	sp, r7
    5a56:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a5a:	4770      	bx	lr

00005a5c <hri_sercomspi_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomspi_intenset_reg_t hri_sercomspi_read_INTEN_reg(const void *const hw)
{
    5a5c:	b480      	push	{r7}
    5a5e:	b083      	sub	sp, #12
    5a60:	af00      	add	r7, sp, #0
    5a62:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    5a64:	687b      	ldr	r3, [r7, #4]
    5a66:	7d9b      	ldrb	r3, [r3, #22]
    5a68:	b2db      	uxtb	r3, r3
}
    5a6a:	4618      	mov	r0, r3
    5a6c:	370c      	adds	r7, #12
    5a6e:	46bd      	mov	sp, r7
    5a70:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a74:	4770      	bx	lr
	...

00005a78 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5a78:	b580      	push	{r7, lr}
    5a7a:	b082      	sub	sp, #8
    5a7c:	af00      	add	r7, sp, #0
    5a7e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    5a80:	687b      	ldr	r3, [r7, #4]
    5a82:	681b      	ldr	r3, [r3, #0]
    5a84:	f023 0202 	bic.w	r2, r3, #2
    5a88:	687b      	ldr	r3, [r7, #4]
    5a8a:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5a8c:	2103      	movs	r1, #3
    5a8e:	6878      	ldr	r0, [r7, #4]
    5a90:	4b02      	ldr	r3, [pc, #8]	; (5a9c <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    5a92:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5a94:	bf00      	nop
    5a96:	3708      	adds	r7, #8
    5a98:	46bd      	mov	sp, r7
    5a9a:	bd80      	pop	{r7, pc}
    5a9c:	0000585d 	.word	0x0000585d

00005aa0 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    5aa0:	b480      	push	{r7}
    5aa2:	b085      	sub	sp, #20
    5aa4:	af00      	add	r7, sp, #0
    5aa6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    5aa8:	687b      	ldr	r3, [r7, #4]
    5aaa:	681b      	ldr	r3, [r3, #0]
    5aac:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    5aae:	68fb      	ldr	r3, [r7, #12]
    5ab0:	0edb      	lsrs	r3, r3, #27
    5ab2:	f003 0301 	and.w	r3, r3, #1
    5ab6:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    5ab8:	68fb      	ldr	r3, [r7, #12]
    5aba:	2b00      	cmp	r3, #0
    5abc:	bf14      	ite	ne
    5abe:	2301      	movne	r3, #1
    5ac0:	2300      	moveq	r3, #0
    5ac2:	b2db      	uxtb	r3, r3
}
    5ac4:	4618      	mov	r0, r3
    5ac6:	3714      	adds	r7, #20
    5ac8:	46bd      	mov	sp, r7
    5aca:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ace:	4770      	bx	lr

00005ad0 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    5ad0:	b580      	push	{r7, lr}
    5ad2:	b084      	sub	sp, #16
    5ad4:	af00      	add	r7, sp, #0
    5ad6:	6078      	str	r0, [r7, #4]
    5ad8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5ada:	2103      	movs	r1, #3
    5adc:	6878      	ldr	r0, [r7, #4]
    5ade:	4b07      	ldr	r3, [pc, #28]	; (5afc <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    5ae0:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    5ae2:	687b      	ldr	r3, [r7, #4]
    5ae4:	681b      	ldr	r3, [r3, #0]
    5ae6:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    5ae8:	68fa      	ldr	r2, [r7, #12]
    5aea:	683b      	ldr	r3, [r7, #0]
    5aec:	4013      	ands	r3, r2
    5aee:	60fb      	str	r3, [r7, #12]
	return tmp;
    5af0:	68fb      	ldr	r3, [r7, #12]
}
    5af2:	4618      	mov	r0, r3
    5af4:	3710      	adds	r7, #16
    5af6:	46bd      	mov	sp, r7
    5af8:	bd80      	pop	{r7, pc}
    5afa:	bf00      	nop
    5afc:	0000585d 	.word	0x0000585d

00005b00 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    5b00:	b580      	push	{r7, lr}
    5b02:	b082      	sub	sp, #8
    5b04:	af00      	add	r7, sp, #0
    5b06:	6078      	str	r0, [r7, #4]
    5b08:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    5b0a:	687b      	ldr	r3, [r7, #4]
    5b0c:	683a      	ldr	r2, [r7, #0]
    5b0e:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5b10:	2103      	movs	r1, #3
    5b12:	6878      	ldr	r0, [r7, #4]
    5b14:	4b02      	ldr	r3, [pc, #8]	; (5b20 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    5b16:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5b18:	bf00      	nop
    5b1a:	3708      	adds	r7, #8
    5b1c:	46bd      	mov	sp, r7
    5b1e:	bd80      	pop	{r7, pc}
    5b20:	0000585d 	.word	0x0000585d

00005b24 <hri_sercomspi_get_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    5b24:	b580      	push	{r7, lr}
    5b26:	b084      	sub	sp, #16
    5b28:	af00      	add	r7, sp, #0
    5b2a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5b2c:	2103      	movs	r1, #3
    5b2e:	6878      	ldr	r0, [r7, #4]
    5b30:	4b09      	ldr	r3, [pc, #36]	; (5b58 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    5b32:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    5b34:	687b      	ldr	r3, [r7, #4]
    5b36:	681b      	ldr	r3, [r3, #0]
    5b38:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    5b3a:	68fb      	ldr	r3, [r7, #12]
    5b3c:	085b      	lsrs	r3, r3, #1
    5b3e:	f003 0301 	and.w	r3, r3, #1
    5b42:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    5b44:	68fb      	ldr	r3, [r7, #12]
    5b46:	2b00      	cmp	r3, #0
    5b48:	bf14      	ite	ne
    5b4a:	2301      	movne	r3, #1
    5b4c:	2300      	moveq	r3, #0
    5b4e:	b2db      	uxtb	r3, r3
}
    5b50:	4618      	mov	r0, r3
    5b52:	3710      	adds	r7, #16
    5b54:	46bd      	mov	sp, r7
    5b56:	bd80      	pop	{r7, pc}
    5b58:	000058a9 	.word	0x000058a9

00005b5c <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5b5c:	b580      	push	{r7, lr}
    5b5e:	b082      	sub	sp, #8
    5b60:	af00      	add	r7, sp, #0
    5b62:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    5b64:	687b      	ldr	r3, [r7, #4]
    5b66:	681b      	ldr	r3, [r3, #0]
    5b68:	f023 0202 	bic.w	r2, r3, #2
    5b6c:	687b      	ldr	r3, [r7, #4]
    5b6e:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5b70:	2103      	movs	r1, #3
    5b72:	6878      	ldr	r0, [r7, #4]
    5b74:	4b02      	ldr	r3, [pc, #8]	; (5b80 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    5b76:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5b78:	bf00      	nop
    5b7a:	3708      	adds	r7, #8
    5b7c:	46bd      	mov	sp, r7
    5b7e:	bd80      	pop	{r7, pc}
    5b80:	000058a9 	.word	0x000058a9

00005b84 <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    5b84:	b580      	push	{r7, lr}
    5b86:	b084      	sub	sp, #16
    5b88:	af00      	add	r7, sp, #0
    5b8a:	6078      	str	r0, [r7, #4]
    5b8c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5b8e:	2103      	movs	r1, #3
    5b90:	6878      	ldr	r0, [r7, #4]
    5b92:	4b07      	ldr	r3, [pc, #28]	; (5bb0 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    5b94:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    5b96:	687b      	ldr	r3, [r7, #4]
    5b98:	681b      	ldr	r3, [r3, #0]
    5b9a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    5b9c:	68fa      	ldr	r2, [r7, #12]
    5b9e:	683b      	ldr	r3, [r7, #0]
    5ba0:	4013      	ands	r3, r2
    5ba2:	60fb      	str	r3, [r7, #12]
	return tmp;
    5ba4:	68fb      	ldr	r3, [r7, #12]
}
    5ba6:	4618      	mov	r0, r3
    5ba8:	3710      	adds	r7, #16
    5baa:	46bd      	mov	sp, r7
    5bac:	bd80      	pop	{r7, pc}
    5bae:	bf00      	nop
    5bb0:	000058a9 	.word	0x000058a9

00005bb4 <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    5bb4:	b580      	push	{r7, lr}
    5bb6:	b082      	sub	sp, #8
    5bb8:	af00      	add	r7, sp, #0
    5bba:	6078      	str	r0, [r7, #4]
    5bbc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    5bbe:	687b      	ldr	r3, [r7, #4]
    5bc0:	683a      	ldr	r2, [r7, #0]
    5bc2:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5bc4:	2103      	movs	r1, #3
    5bc6:	6878      	ldr	r0, [r7, #4]
    5bc8:	4b02      	ldr	r3, [pc, #8]	; (5bd4 <hri_sercomspi_write_CTRLA_reg+0x20>)
    5bca:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5bcc:	bf00      	nop
    5bce:	3708      	adds	r7, #8
    5bd0:	46bd      	mov	sp, r7
    5bd2:	bd80      	pop	{r7, pc}
    5bd4:	000058a9 	.word	0x000058a9

00005bd8 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    5bd8:	b580      	push	{r7, lr}
    5bda:	b082      	sub	sp, #8
    5bdc:	af00      	add	r7, sp, #0
    5bde:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    5be0:	687b      	ldr	r3, [r7, #4]
    5be2:	685b      	ldr	r3, [r3, #4]
    5be4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    5be8:	687b      	ldr	r3, [r7, #4]
    5bea:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5bec:	2104      	movs	r1, #4
    5bee:	6878      	ldr	r0, [r7, #4]
    5bf0:	4b02      	ldr	r3, [pc, #8]	; (5bfc <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    5bf2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5bf4:	bf00      	nop
    5bf6:	3708      	adds	r7, #8
    5bf8:	46bd      	mov	sp, r7
    5bfa:	bd80      	pop	{r7, pc}
    5bfc:	0000585d 	.word	0x0000585d

00005c00 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    5c00:	b580      	push	{r7, lr}
    5c02:	b082      	sub	sp, #8
    5c04:	af00      	add	r7, sp, #0
    5c06:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    5c08:	687b      	ldr	r3, [r7, #4]
    5c0a:	685b      	ldr	r3, [r3, #4]
    5c0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    5c10:	687b      	ldr	r3, [r7, #4]
    5c12:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5c14:	2104      	movs	r1, #4
    5c16:	6878      	ldr	r0, [r7, #4]
    5c18:	4b02      	ldr	r3, [pc, #8]	; (5c24 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    5c1a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5c1c:	bf00      	nop
    5c1e:	3708      	adds	r7, #8
    5c20:	46bd      	mov	sp, r7
    5c22:	bd80      	pop	{r7, pc}
    5c24:	0000585d 	.word	0x0000585d

00005c28 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    5c28:	b580      	push	{r7, lr}
    5c2a:	b082      	sub	sp, #8
    5c2c:	af00      	add	r7, sp, #0
    5c2e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    5c30:	687b      	ldr	r3, [r7, #4]
    5c32:	685b      	ldr	r3, [r3, #4]
    5c34:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    5c38:	687b      	ldr	r3, [r7, #4]
    5c3a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5c3c:	2104      	movs	r1, #4
    5c3e:	6878      	ldr	r0, [r7, #4]
    5c40:	4b02      	ldr	r3, [pc, #8]	; (5c4c <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    5c42:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5c44:	bf00      	nop
    5c46:	3708      	adds	r7, #8
    5c48:	46bd      	mov	sp, r7
    5c4a:	bd80      	pop	{r7, pc}
    5c4c:	0000585d 	.word	0x0000585d

00005c50 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    5c50:	b580      	push	{r7, lr}
    5c52:	b082      	sub	sp, #8
    5c54:	af00      	add	r7, sp, #0
    5c56:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    5c58:	687b      	ldr	r3, [r7, #4]
    5c5a:	685b      	ldr	r3, [r3, #4]
    5c5c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    5c60:	687b      	ldr	r3, [r7, #4]
    5c62:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5c64:	2104      	movs	r1, #4
    5c66:	6878      	ldr	r0, [r7, #4]
    5c68:	4b02      	ldr	r3, [pc, #8]	; (5c74 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    5c6a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5c6c:	bf00      	nop
    5c6e:	3708      	adds	r7, #8
    5c70:	46bd      	mov	sp, r7
    5c72:	bd80      	pop	{r7, pc}
    5c74:	0000585d 	.word	0x0000585d

00005c78 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    5c78:	b580      	push	{r7, lr}
    5c7a:	b082      	sub	sp, #8
    5c7c:	af00      	add	r7, sp, #0
    5c7e:	6078      	str	r0, [r7, #4]
    5c80:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    5c82:	687b      	ldr	r3, [r7, #4]
    5c84:	685a      	ldr	r2, [r3, #4]
    5c86:	683b      	ldr	r3, [r7, #0]
    5c88:	041b      	lsls	r3, r3, #16
    5c8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    5c8e:	431a      	orrs	r2, r3
    5c90:	687b      	ldr	r3, [r7, #4]
    5c92:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5c94:	2104      	movs	r1, #4
    5c96:	6878      	ldr	r0, [r7, #4]
    5c98:	4b02      	ldr	r3, [pc, #8]	; (5ca4 <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    5c9a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5c9c:	bf00      	nop
    5c9e:	3708      	adds	r7, #8
    5ca0:	46bd      	mov	sp, r7
    5ca2:	bd80      	pop	{r7, pc}
    5ca4:	0000585d 	.word	0x0000585d

00005ca8 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    5ca8:	b580      	push	{r7, lr}
    5caa:	b082      	sub	sp, #8
    5cac:	af00      	add	r7, sp, #0
    5cae:	6078      	str	r0, [r7, #4]
    5cb0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    5cb2:	687b      	ldr	r3, [r7, #4]
    5cb4:	683a      	ldr	r2, [r7, #0]
    5cb6:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5cb8:	2104      	movs	r1, #4
    5cba:	6878      	ldr	r0, [r7, #4]
    5cbc:	4b02      	ldr	r3, [pc, #8]	; (5cc8 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    5cbe:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5cc0:	bf00      	nop
    5cc2:	3708      	adds	r7, #8
    5cc4:	46bd      	mov	sp, r7
    5cc6:	bd80      	pop	{r7, pc}
    5cc8:	0000585d 	.word	0x0000585d

00005ccc <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    5ccc:	b580      	push	{r7, lr}
    5cce:	b082      	sub	sp, #8
    5cd0:	af00      	add	r7, sp, #0
    5cd2:	6078      	str	r0, [r7, #4]
    5cd4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    5cd6:	687b      	ldr	r3, [r7, #4]
    5cd8:	683a      	ldr	r2, [r7, #0]
    5cda:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    5cdc:	2117      	movs	r1, #23
    5cde:	6878      	ldr	r0, [r7, #4]
    5ce0:	4b02      	ldr	r3, [pc, #8]	; (5cec <hri_sercomspi_write_CTRLB_reg+0x20>)
    5ce2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5ce4:	bf00      	nop
    5ce6:	3708      	adds	r7, #8
    5ce8:	46bd      	mov	sp, r7
    5cea:	bd80      	pop	{r7, pc}
    5cec:	000058a9 	.word	0x000058a9

00005cf0 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    5cf0:	b480      	push	{r7}
    5cf2:	b083      	sub	sp, #12
    5cf4:	af00      	add	r7, sp, #0
    5cf6:	6078      	str	r0, [r7, #4]
    5cf8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    5cfa:	687b      	ldr	r3, [r7, #4]
    5cfc:	683a      	ldr	r2, [r7, #0]
    5cfe:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5d00:	bf00      	nop
    5d02:	370c      	adds	r7, #12
    5d04:	46bd      	mov	sp, r7
    5d06:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d0a:	4770      	bx	lr

00005d0c <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    5d0c:	b480      	push	{r7}
    5d0e:	b083      	sub	sp, #12
    5d10:	af00      	add	r7, sp, #0
    5d12:	6078      	str	r0, [r7, #4]
    5d14:	460b      	mov	r3, r1
    5d16:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    5d18:	687b      	ldr	r3, [r7, #4]
    5d1a:	78fa      	ldrb	r2, [r7, #3]
    5d1c:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5d1e:	bf00      	nop
    5d20:	370c      	adds	r7, #12
    5d22:	46bd      	mov	sp, r7
    5d24:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d28:	4770      	bx	lr
	...

00005d2c <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    5d2c:	b580      	push	{r7, lr}
    5d2e:	b084      	sub	sp, #16
    5d30:	af00      	add	r7, sp, #0
    5d32:	6078      	str	r0, [r7, #4]
    5d34:	460b      	mov	r3, r1
    5d36:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    5d38:	687b      	ldr	r3, [r7, #4]
    5d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5d3c:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    5d3e:	68fb      	ldr	r3, [r7, #12]
    5d40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    5d44:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    5d46:	78fb      	ldrb	r3, [r7, #3]
    5d48:	039b      	lsls	r3, r3, #14
    5d4a:	461a      	mov	r2, r3
    5d4c:	68fb      	ldr	r3, [r7, #12]
    5d4e:	4313      	orrs	r3, r2
    5d50:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    5d52:	687b      	ldr	r3, [r7, #4]
    5d54:	68fa      	ldr	r2, [r7, #12]
    5d56:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5d58:	2104      	movs	r1, #4
    5d5a:	6878      	ldr	r0, [r7, #4]
    5d5c:	4b02      	ldr	r3, [pc, #8]	; (5d68 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    5d5e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5d60:	bf00      	nop
    5d62:	3710      	adds	r7, #16
    5d64:	46bd      	mov	sp, r7
    5d66:	bd80      	pop	{r7, pc}
    5d68:	0000585d 	.word	0x0000585d

00005d6c <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    5d6c:	b580      	push	{r7, lr}
    5d6e:	b082      	sub	sp, #8
    5d70:	af00      	add	r7, sp, #0
    5d72:	6078      	str	r0, [r7, #4]
    5d74:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    5d76:	687b      	ldr	r3, [r7, #4]
    5d78:	683a      	ldr	r2, [r7, #0]
    5d7a:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5d7c:	2104      	movs	r1, #4
    5d7e:	6878      	ldr	r0, [r7, #4]
    5d80:	4b02      	ldr	r3, [pc, #8]	; (5d8c <hri_sercomi2cm_write_ADDR_reg+0x20>)
    5d82:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5d84:	bf00      	nop
    5d86:	3708      	adds	r7, #8
    5d88:	46bd      	mov	sp, r7
    5d8a:	bd80      	pop	{r7, pc}
    5d8c:	0000585d 	.word	0x0000585d

00005d90 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    5d90:	b580      	push	{r7, lr}
    5d92:	b082      	sub	sp, #8
    5d94:	af00      	add	r7, sp, #0
    5d96:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5d98:	2104      	movs	r1, #4
    5d9a:	6878      	ldr	r0, [r7, #4]
    5d9c:	4b03      	ldr	r3, [pc, #12]	; (5dac <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    5d9e:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    5da0:	687b      	ldr	r3, [r7, #4]
    5da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    5da4:	4618      	mov	r0, r3
    5da6:	3708      	adds	r7, #8
    5da8:	46bd      	mov	sp, r7
    5daa:	bd80      	pop	{r7, pc}
    5dac:	0000585d 	.word	0x0000585d

00005db0 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    5db0:	b480      	push	{r7}
    5db2:	b083      	sub	sp, #12
    5db4:	af00      	add	r7, sp, #0
    5db6:	6078      	str	r0, [r7, #4]
    5db8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    5dba:	687b      	ldr	r3, [r7, #4]
    5dbc:	683a      	ldr	r2, [r7, #0]
    5dbe:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5dc0:	bf00      	nop
    5dc2:	370c      	adds	r7, #12
    5dc4:	46bd      	mov	sp, r7
    5dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5dca:	4770      	bx	lr

00005dcc <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    5dcc:	b580      	push	{r7, lr}
    5dce:	b082      	sub	sp, #8
    5dd0:	af00      	add	r7, sp, #0
    5dd2:	6078      	str	r0, [r7, #4]
    5dd4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    5dd6:	687b      	ldr	r3, [r7, #4]
    5dd8:	683a      	ldr	r2, [r7, #0]
    5dda:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5ddc:	2104      	movs	r1, #4
    5dde:	6878      	ldr	r0, [r7, #4]
    5de0:	4b02      	ldr	r3, [pc, #8]	; (5dec <hri_sercomi2cm_write_DATA_reg+0x20>)
    5de2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5de4:	bf00      	nop
    5de6:	3708      	adds	r7, #8
    5de8:	46bd      	mov	sp, r7
    5dea:	bd80      	pop	{r7, pc}
    5dec:	0000585d 	.word	0x0000585d

00005df0 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    5df0:	b580      	push	{r7, lr}
    5df2:	b082      	sub	sp, #8
    5df4:	af00      	add	r7, sp, #0
    5df6:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5df8:	2104      	movs	r1, #4
    5dfa:	6878      	ldr	r0, [r7, #4]
    5dfc:	4b03      	ldr	r3, [pc, #12]	; (5e0c <hri_sercomi2cm_read_DATA_reg+0x1c>)
    5dfe:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    5e00:	687b      	ldr	r3, [r7, #4]
    5e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    5e04:	4618      	mov	r0, r3
    5e06:	3708      	adds	r7, #8
    5e08:	46bd      	mov	sp, r7
    5e0a:	bd80      	pop	{r7, pc}
    5e0c:	0000585d 	.word	0x0000585d

00005e10 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    5e10:	b480      	push	{r7}
    5e12:	b083      	sub	sp, #12
    5e14:	af00      	add	r7, sp, #0
    5e16:	6078      	str	r0, [r7, #4]
    5e18:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    5e1a:	687b      	ldr	r3, [r7, #4]
    5e1c:	683a      	ldr	r2, [r7, #0]
    5e1e:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5e20:	bf00      	nop
    5e22:	370c      	adds	r7, #12
    5e24:	46bd      	mov	sp, r7
    5e26:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e2a:	4770      	bx	lr

00005e2c <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    5e2c:	b480      	push	{r7}
    5e2e:	b083      	sub	sp, #12
    5e30:	af00      	add	r7, sp, #0
    5e32:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    5e34:	687b      	ldr	r3, [r7, #4]
    5e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    5e38:	4618      	mov	r0, r3
    5e3a:	370c      	adds	r7, #12
    5e3c:	46bd      	mov	sp, r7
    5e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e42:	4770      	bx	lr

00005e44 <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    5e44:	b480      	push	{r7}
    5e46:	b083      	sub	sp, #12
    5e48:	af00      	add	r7, sp, #0
    5e4a:	6078      	str	r0, [r7, #4]
    5e4c:	460b      	mov	r3, r1
    5e4e:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    5e50:	687b      	ldr	r3, [r7, #4]
    5e52:	78fa      	ldrb	r2, [r7, #3]
    5e54:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5e58:	bf00      	nop
    5e5a:	370c      	adds	r7, #12
    5e5c:	46bd      	mov	sp, r7
    5e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e62:	4770      	bx	lr

00005e64 <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    5e64:	b480      	push	{r7}
    5e66:	b083      	sub	sp, #12
    5e68:	af00      	add	r7, sp, #0
    5e6a:	6078      	str	r0, [r7, #4]
    5e6c:	460b      	mov	r3, r1
    5e6e:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    5e70:	687b      	ldr	r3, [r7, #4]
    5e72:	887a      	ldrh	r2, [r7, #2]
    5e74:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5e76:	bf00      	nop
    5e78:	370c      	adds	r7, #12
    5e7a:	46bd      	mov	sp, r7
    5e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e80:	4770      	bx	lr
	...

00005e84 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    5e84:	b580      	push	{r7, lr}
    5e86:	b082      	sub	sp, #8
    5e88:	af00      	add	r7, sp, #0
    5e8a:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5e8c:	2104      	movs	r1, #4
    5e8e:	6878      	ldr	r0, [r7, #4]
    5e90:	4b04      	ldr	r3, [pc, #16]	; (5ea4 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    5e92:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    5e94:	687b      	ldr	r3, [r7, #4]
    5e96:	8b5b      	ldrh	r3, [r3, #26]
    5e98:	b29b      	uxth	r3, r3
}
    5e9a:	4618      	mov	r0, r3
    5e9c:	3708      	adds	r7, #8
    5e9e:	46bd      	mov	sp, r7
    5ea0:	bd80      	pop	{r7, pc}
    5ea2:	bf00      	nop
    5ea4:	0000585d 	.word	0x0000585d

00005ea8 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    5ea8:	b4b0      	push	{r4, r5, r7}
    5eaa:	b08d      	sub	sp, #52	; 0x34
    5eac:	af00      	add	r7, sp, #0
    5eae:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    5eb0:	4b13      	ldr	r3, [pc, #76]	; (5f00 <_sercom_get_hardware_index+0x58>)
    5eb2:	f107 040c 	add.w	r4, r7, #12
    5eb6:	461d      	mov	r5, r3
    5eb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    5eba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    5ebc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    5ec0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5ec4:	2300      	movs	r3, #0
    5ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
    5ec8:	e010      	b.n	5eec <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    5eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5ecc:	009b      	lsls	r3, r3, #2
    5ece:	f107 0230 	add.w	r2, r7, #48	; 0x30
    5ed2:	4413      	add	r3, r2
    5ed4:	f853 3c24 	ldr.w	r3, [r3, #-36]
    5ed8:	461a      	mov	r2, r3
    5eda:	687b      	ldr	r3, [r7, #4]
    5edc:	429a      	cmp	r2, r3
    5ede:	d102      	bne.n	5ee6 <_sercom_get_hardware_index+0x3e>
			return i;
    5ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5ee2:	b2db      	uxtb	r3, r3
    5ee4:	e006      	b.n	5ef4 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5ee8:	3301      	adds	r3, #1
    5eea:	62fb      	str	r3, [r7, #44]	; 0x2c
    5eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5eee:	2b07      	cmp	r3, #7
    5ef0:	d9eb      	bls.n	5eca <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    5ef2:	2300      	movs	r3, #0
}
    5ef4:	4618      	mov	r0, r3
    5ef6:	3734      	adds	r7, #52	; 0x34
    5ef8:	46bd      	mov	sp, r7
    5efa:	bcb0      	pop	{r4, r5, r7}
    5efc:	4770      	bx	lr
    5efe:	bf00      	nop
    5f00:	00013150 	.word	0x00013150

00005f04 <_sercom_init_irq_param>:

/**
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{
    5f04:	b480      	push	{r7}
    5f06:	b083      	sub	sp, #12
    5f08:	af00      	add	r7, sp, #0
    5f0a:	6078      	str	r0, [r7, #4]
    5f0c:	6039      	str	r1, [r7, #0]

	if (hw == SERCOM4) {
    5f0e:	687b      	ldr	r3, [r7, #4]
    5f10:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
    5f14:	d102      	bne.n	5f1c <_sercom_init_irq_param+0x18>
		_sercom4_dev = (struct _spi_async_dev *)dev;
    5f16:	4a0b      	ldr	r2, [pc, #44]	; (5f44 <_sercom_init_irq_param+0x40>)
    5f18:	683b      	ldr	r3, [r7, #0]
    5f1a:	6013      	str	r3, [r2, #0]
	}

	if (hw == SERCOM5) {
    5f1c:	687b      	ldr	r3, [r7, #4]
    5f1e:	4a0a      	ldr	r2, [pc, #40]	; (5f48 <_sercom_init_irq_param+0x44>)
    5f20:	4293      	cmp	r3, r2
    5f22:	d102      	bne.n	5f2a <_sercom_init_irq_param+0x26>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    5f24:	4a09      	ldr	r2, [pc, #36]	; (5f4c <_sercom_init_irq_param+0x48>)
    5f26:	683b      	ldr	r3, [r7, #0]
    5f28:	6013      	str	r3, [r2, #0]
	}

	if (hw == SERCOM7) {
    5f2a:	687b      	ldr	r3, [r7, #4]
    5f2c:	4a08      	ldr	r2, [pc, #32]	; (5f50 <_sercom_init_irq_param+0x4c>)
    5f2e:	4293      	cmp	r3, r2
    5f30:	d102      	bne.n	5f38 <_sercom_init_irq_param+0x34>
		_sercom7_dev = (struct _i2c_m_async_device *)dev;
    5f32:	4a08      	ldr	r2, [pc, #32]	; (5f54 <_sercom_init_irq_param+0x50>)
    5f34:	683b      	ldr	r3, [r7, #0]
    5f36:	6013      	str	r3, [r2, #0]
	}
}
    5f38:	bf00      	nop
    5f3a:	370c      	adds	r7, #12
    5f3c:	46bd      	mov	sp, r7
    5f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f42:	4770      	bx	lr
    5f44:	20000c14 	.word	0x20000c14
    5f48:	43000400 	.word	0x43000400
    5f4c:	20000c18 	.word	0x20000c18
    5f50:	43000c00 	.word	0x43000c00
    5f54:	20000c1c 	.word	0x20000c1c

00005f58 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    5f58:	b580      	push	{r7, lr}
    5f5a:	b084      	sub	sp, #16
    5f5c:	af00      	add	r7, sp, #0
    5f5e:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    5f60:	6878      	ldr	r0, [r7, #4]
    5f62:	4b13      	ldr	r3, [pc, #76]	; (5fb0 <_get_i2cm_index+0x58>)
    5f64:	4798      	blx	r3
    5f66:	4603      	mov	r3, r0
    5f68:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    5f6a:	2300      	movs	r3, #0
    5f6c:	73fb      	strb	r3, [r7, #15]
    5f6e:	e010      	b.n	5f92 <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    5f70:	7bfa      	ldrb	r2, [r7, #15]
    5f72:	4910      	ldr	r1, [pc, #64]	; (5fb4 <_get_i2cm_index+0x5c>)
    5f74:	4613      	mov	r3, r2
    5f76:	005b      	lsls	r3, r3, #1
    5f78:	4413      	add	r3, r2
    5f7a:	00db      	lsls	r3, r3, #3
    5f7c:	440b      	add	r3, r1
    5f7e:	781b      	ldrb	r3, [r3, #0]
    5f80:	7bba      	ldrb	r2, [r7, #14]
    5f82:	429a      	cmp	r2, r3
    5f84:	d102      	bne.n	5f8c <_get_i2cm_index+0x34>
			return i;
    5f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5f8a:	e00d      	b.n	5fa8 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    5f8c:	7bfb      	ldrb	r3, [r7, #15]
    5f8e:	3301      	adds	r3, #1
    5f90:	73fb      	strb	r3, [r7, #15]
    5f92:	7bfb      	ldrb	r3, [r7, #15]
    5f94:	2b01      	cmp	r3, #1
    5f96:	d9eb      	bls.n	5f70 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    5f98:	f44f 726e 	mov.w	r2, #952	; 0x3b8
    5f9c:	4906      	ldr	r1, [pc, #24]	; (5fb8 <_get_i2cm_index+0x60>)
    5f9e:	2000      	movs	r0, #0
    5fa0:	4b06      	ldr	r3, [pc, #24]	; (5fbc <_get_i2cm_index+0x64>)
    5fa2:	4798      	blx	r3
	return -1;
    5fa4:	f04f 33ff 	mov.w	r3, #4294967295
}
    5fa8:	4618      	mov	r0, r3
    5faa:	3710      	adds	r7, #16
    5fac:	46bd      	mov	sp, r7
    5fae:	bd80      	pop	{r7, pc}
    5fb0:	00005ea9 	.word	0x00005ea9
    5fb4:	20000018 	.word	0x20000018
    5fb8:	00013134 	.word	0x00013134
    5fbc:	00002edd 	.word	0x00002edd

00005fc0 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    5fc0:	b580      	push	{r7, lr}
    5fc2:	b082      	sub	sp, #8
    5fc4:	af00      	add	r7, sp, #0
    5fc6:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    5fc8:	2103      	movs	r1, #3
    5fca:	6878      	ldr	r0, [r7, #4]
    5fcc:	4b02      	ldr	r3, [pc, #8]	; (5fd8 <_sercom_i2c_send_stop+0x18>)
    5fce:	4798      	blx	r3
}
    5fd0:	bf00      	nop
    5fd2:	3708      	adds	r7, #8
    5fd4:	46bd      	mov	sp, r7
    5fd6:	bd80      	pop	{r7, pc}
    5fd8:	00005c79 	.word	0x00005c79

00005fdc <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    5fdc:	b590      	push	{r4, r7, lr}
    5fde:	b087      	sub	sp, #28
    5fe0:	af00      	add	r7, sp, #0
    5fe2:	60f8      	str	r0, [r7, #12]
    5fe4:	60b9      	str	r1, [r7, #8]
    5fe6:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    5fe8:	68f8      	ldr	r0, [r7, #12]
    5fea:	4b7d      	ldr	r3, [pc, #500]	; (61e0 <_sercom_i2c_sync_analyse_flags+0x204>)
    5fec:	4798      	blx	r3
    5fee:	4603      	mov	r3, r0
    5ff0:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    5ff2:	68f8      	ldr	r0, [r7, #12]
    5ff4:	4b7b      	ldr	r3, [pc, #492]	; (61e4 <_sercom_i2c_sync_analyse_flags+0x208>)
    5ff6:	4798      	blx	r3
    5ff8:	4603      	mov	r3, r0
    5ffa:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    5ffc:	68bb      	ldr	r3, [r7, #8]
    5ffe:	f003 0301 	and.w	r3, r3, #1
    6002:	2b00      	cmp	r3, #0
    6004:	f000 8095 	beq.w	6132 <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    6008:	8a7b      	ldrh	r3, [r7, #18]
    600a:	f003 0302 	and.w	r3, r3, #2
    600e:	2b00      	cmp	r3, #0
    6010:	d01d      	beq.n	604e <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    6012:	68f8      	ldr	r0, [r7, #12]
    6014:	4b74      	ldr	r3, [pc, #464]	; (61e8 <_sercom_i2c_sync_analyse_flags+0x20c>)
    6016:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    6018:	687b      	ldr	r3, [r7, #4]
    601a:	885b      	ldrh	r3, [r3, #2]
    601c:	b29b      	uxth	r3, r3
    601e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    6022:	b29a      	uxth	r2, r3
    6024:	687b      	ldr	r3, [r7, #4]
    6026:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    6028:	687b      	ldr	r3, [r7, #4]
    602a:	885b      	ldrh	r3, [r3, #2]
    602c:	b29b      	uxth	r3, r3
    602e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6032:	b29a      	uxth	r2, r3
    6034:	687b      	ldr	r3, [r7, #4]
    6036:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    6038:	8a7b      	ldrh	r3, [r7, #18]
    603a:	f003 0301 	and.w	r3, r3, #1
    603e:	2b00      	cmp	r3, #0
    6040:	d002      	beq.n	6048 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    6042:	f06f 0304 	mvn.w	r3, #4
    6046:	e0c6      	b.n	61d6 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    6048:	f06f 0303 	mvn.w	r3, #3
    604c:	e0c3      	b.n	61d6 <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    604e:	8a7b      	ldrh	r3, [r7, #18]
    6050:	f003 0304 	and.w	r3, r3, #4
    6054:	2b00      	cmp	r3, #0
    6056:	d01f      	beq.n	6098 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    6058:	687b      	ldr	r3, [r7, #4]
    605a:	685b      	ldr	r3, [r3, #4]
    605c:	2b00      	cmp	r3, #0
    605e:	dd07      	ble.n	6070 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    6060:	687b      	ldr	r3, [r7, #4]
    6062:	885b      	ldrh	r3, [r3, #2]
    6064:	b29b      	uxth	r3, r3
    6066:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    606a:	b29a      	uxth	r2, r3
    606c:	687b      	ldr	r3, [r7, #4]
    606e:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    6070:	687b      	ldr	r3, [r7, #4]
    6072:	885b      	ldrh	r3, [r3, #2]
    6074:	b29b      	uxth	r3, r3
    6076:	b21b      	sxth	r3, r3
    6078:	2b00      	cmp	r3, #0
    607a:	da02      	bge.n	6082 <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    607c:	68f8      	ldr	r0, [r7, #12]
    607e:	4b5b      	ldr	r3, [pc, #364]	; (61ec <_sercom_i2c_sync_analyse_flags+0x210>)
    6080:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6082:	687b      	ldr	r3, [r7, #4]
    6084:	885b      	ldrh	r3, [r3, #2]
    6086:	b29b      	uxth	r3, r3
    6088:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    608c:	b29a      	uxth	r2, r3
    608e:	687b      	ldr	r3, [r7, #4]
    6090:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    6092:	f06f 0301 	mvn.w	r3, #1
    6096:	e09e      	b.n	61d6 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    6098:	687b      	ldr	r3, [r7, #4]
    609a:	885b      	ldrh	r3, [r3, #2]
    609c:	b29b      	uxth	r3, r3
    609e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    60a2:	2b00      	cmp	r3, #0
    60a4:	d01c      	beq.n	60e0 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    60a6:	687b      	ldr	r3, [r7, #4]
    60a8:	881b      	ldrh	r3, [r3, #0]
    60aa:	121b      	asrs	r3, r3, #8
    60ac:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    60ae:	f003 0406 	and.w	r4, r3, #6
    60b2:	68f8      	ldr	r0, [r7, #12]
    60b4:	4b4e      	ldr	r3, [pc, #312]	; (61f0 <_sercom_i2c_sync_analyse_flags+0x214>)
    60b6:	4798      	blx	r3
    60b8:	4603      	mov	r3, r0
    60ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    60be:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    60c0:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    60c4:	4619      	mov	r1, r3
    60c6:	68f8      	ldr	r0, [r7, #12]
    60c8:	4b4a      	ldr	r3, [pc, #296]	; (61f4 <_sercom_i2c_sync_analyse_flags+0x218>)
    60ca:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    60cc:	687b      	ldr	r3, [r7, #4]
    60ce:	885b      	ldrh	r3, [r3, #2]
    60d0:	b29b      	uxth	r3, r3
    60d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    60d6:	b29a      	uxth	r2, r3
    60d8:	687b      	ldr	r3, [r7, #4]
    60da:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    60dc:	2300      	movs	r3, #0
    60de:	e07a      	b.n	61d6 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    60e0:	687b      	ldr	r3, [r7, #4]
    60e2:	685b      	ldr	r3, [r3, #4]
    60e4:	2b00      	cmp	r3, #0
    60e6:	d111      	bne.n	610c <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    60e8:	687b      	ldr	r3, [r7, #4]
    60ea:	885b      	ldrh	r3, [r3, #2]
    60ec:	b29b      	uxth	r3, r3
    60ee:	b21b      	sxth	r3, r3
    60f0:	2b00      	cmp	r3, #0
    60f2:	da02      	bge.n	60fa <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    60f4:	68f8      	ldr	r0, [r7, #12]
    60f6:	4b3d      	ldr	r3, [pc, #244]	; (61ec <_sercom_i2c_sync_analyse_flags+0x210>)
    60f8:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    60fa:	687b      	ldr	r3, [r7, #4]
    60fc:	885b      	ldrh	r3, [r3, #2]
    60fe:	b29b      	uxth	r3, r3
    6100:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6104:	b29a      	uxth	r2, r3
    6106:	687b      	ldr	r3, [r7, #4]
    6108:	805a      	strh	r2, [r3, #2]
    610a:	e010      	b.n	612e <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    610c:	687b      	ldr	r3, [r7, #4]
    610e:	689b      	ldr	r3, [r3, #8]
    6110:	781b      	ldrb	r3, [r3, #0]
    6112:	4619      	mov	r1, r3
    6114:	68f8      	ldr	r0, [r7, #12]
    6116:	4b38      	ldr	r3, [pc, #224]	; (61f8 <_sercom_i2c_sync_analyse_flags+0x21c>)
    6118:	4798      	blx	r3
				msg->buffer++;
    611a:	687b      	ldr	r3, [r7, #4]
    611c:	689b      	ldr	r3, [r3, #8]
    611e:	1c5a      	adds	r2, r3, #1
    6120:	687b      	ldr	r3, [r7, #4]
    6122:	609a      	str	r2, [r3, #8]
				msg->len--;
    6124:	687b      	ldr	r3, [r7, #4]
    6126:	685b      	ldr	r3, [r3, #4]
    6128:	1e5a      	subs	r2, r3, #1
    612a:	687b      	ldr	r3, [r7, #4]
    612c:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    612e:	2300      	movs	r3, #0
    6130:	e051      	b.n	61d6 <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    6132:	68bb      	ldr	r3, [r7, #8]
    6134:	f003 0302 	and.w	r3, r3, #2
    6138:	2b00      	cmp	r3, #0
    613a:	d04b      	beq.n	61d4 <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    613c:	687b      	ldr	r3, [r7, #4]
    613e:	685b      	ldr	r3, [r3, #4]
    6140:	2b00      	cmp	r3, #0
    6142:	d041      	beq.n	61c8 <_sercom_i2c_sync_analyse_flags+0x1ec>
    6144:	8a7b      	ldrh	r3, [r7, #18]
    6146:	f003 0304 	and.w	r3, r3, #4
    614a:	2b00      	cmp	r3, #0
    614c:	d13c      	bne.n	61c8 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    614e:	687b      	ldr	r3, [r7, #4]
    6150:	685b      	ldr	r3, [r3, #4]
    6152:	1e5a      	subs	r2, r3, #1
    6154:	687b      	ldr	r3, [r7, #4]
    6156:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    6158:	687b      	ldr	r3, [r7, #4]
    615a:	685b      	ldr	r3, [r3, #4]
    615c:	2b00      	cmp	r3, #0
    615e:	d102      	bne.n	6166 <_sercom_i2c_sync_analyse_flags+0x18a>
    6160:	697b      	ldr	r3, [r7, #20]
    6162:	2b00      	cmp	r3, #0
    6164:	d006      	beq.n	6174 <_sercom_i2c_sync_analyse_flags+0x198>
    6166:	687b      	ldr	r3, [r7, #4]
    6168:	685b      	ldr	r3, [r3, #4]
    616a:	2b01      	cmp	r3, #1
    616c:	d105      	bne.n	617a <_sercom_i2c_sync_analyse_flags+0x19e>
    616e:	697b      	ldr	r3, [r7, #20]
    6170:	2b00      	cmp	r3, #0
    6172:	d002      	beq.n	617a <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    6174:	68f8      	ldr	r0, [r7, #12]
    6176:	4b21      	ldr	r3, [pc, #132]	; (61fc <_sercom_i2c_sync_analyse_flags+0x220>)
    6178:	4798      	blx	r3
			}

			if (msg->len == 0) {
    617a:	687b      	ldr	r3, [r7, #4]
    617c:	685b      	ldr	r3, [r3, #4]
    617e:	2b00      	cmp	r3, #0
    6180:	d113      	bne.n	61aa <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    6182:	687b      	ldr	r3, [r7, #4]
    6184:	885b      	ldrh	r3, [r3, #2]
    6186:	b29b      	uxth	r3, r3
    6188:	b21b      	sxth	r3, r3
    618a:	2b00      	cmp	r3, #0
    618c:	da05      	bge.n	619a <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    618e:	68f8      	ldr	r0, [r7, #12]
    6190:	4b1b      	ldr	r3, [pc, #108]	; (6200 <_sercom_i2c_sync_analyse_flags+0x224>)
    6192:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    6194:	68f8      	ldr	r0, [r7, #12]
    6196:	4b15      	ldr	r3, [pc, #84]	; (61ec <_sercom_i2c_sync_analyse_flags+0x210>)
    6198:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    619a:	687b      	ldr	r3, [r7, #4]
    619c:	885b      	ldrh	r3, [r3, #2]
    619e:	b29b      	uxth	r3, r3
    61a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    61a4:	b29a      	uxth	r2, r3
    61a6:	687b      	ldr	r3, [r7, #4]
    61a8:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    61aa:	687b      	ldr	r3, [r7, #4]
    61ac:	689c      	ldr	r4, [r3, #8]
    61ae:	1c62      	adds	r2, r4, #1
    61b0:	687b      	ldr	r3, [r7, #4]
    61b2:	609a      	str	r2, [r3, #8]
    61b4:	68f8      	ldr	r0, [r7, #12]
    61b6:	4b13      	ldr	r3, [pc, #76]	; (6204 <_sercom_i2c_sync_analyse_flags+0x228>)
    61b8:	4798      	blx	r3
    61ba:	4603      	mov	r3, r0
    61bc:	b2db      	uxtb	r3, r3
    61be:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    61c0:	68f8      	ldr	r0, [r7, #12]
    61c2:	4b11      	ldr	r3, [pc, #68]	; (6208 <_sercom_i2c_sync_analyse_flags+0x22c>)
    61c4:	4798      	blx	r3
    61c6:	e005      	b.n	61d4 <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    61c8:	68f8      	ldr	r0, [r7, #12]
    61ca:	4b0f      	ldr	r3, [pc, #60]	; (6208 <_sercom_i2c_sync_analyse_flags+0x22c>)
    61cc:	4798      	blx	r3
			return I2C_NACK;
    61ce:	f06f 0301 	mvn.w	r3, #1
    61d2:	e000      	b.n	61d6 <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    61d4:	2300      	movs	r3, #0
}
    61d6:	4618      	mov	r0, r3
    61d8:	371c      	adds	r7, #28
    61da:	46bd      	mov	sp, r7
    61dc:	bd90      	pop	{r4, r7, pc}
    61de:	bf00      	nop
    61e0:	00005aa1 	.word	0x00005aa1
    61e4:	00005e85 	.word	0x00005e85
    61e8:	000058f5 	.word	0x000058f5
    61ec:	00005fc1 	.word	0x00005fc1
    61f0:	00005d91 	.word	0x00005d91
    61f4:	00005d6d 	.word	0x00005d6d
    61f8:	00005dcd 	.word	0x00005dcd
    61fc:	00005c29 	.word	0x00005c29
    6200:	00005c01 	.word	0x00005c01
    6204:	00005df1 	.word	0x00005df1
    6208:	0000590f 	.word	0x0000590f

0000620c <_sercom_i2c_m_irq_handler>:
 * \internal Sercom i2c master interrupt handler
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static void _sercom_i2c_m_irq_handler(struct _i2c_m_async_device *i2c_dev)
{
    620c:	b580      	push	{r7, lr}
    620e:	b086      	sub	sp, #24
    6210:	af00      	add	r7, sp, #0
    6212:	6078      	str	r0, [r7, #4]
	void *   hw    = i2c_dev->hw;
    6214:	687b      	ldr	r3, [r7, #4]
    6216:	691b      	ldr	r3, [r3, #16]
    6218:	613b      	str	r3, [r7, #16]
	uint32_t flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    621a:	6938      	ldr	r0, [r7, #16]
    621c:	4b37      	ldr	r3, [pc, #220]	; (62fc <_sercom_i2c_m_irq_handler+0xf0>)
    621e:	4798      	blx	r3
    6220:	4603      	mov	r3, r0
    6222:	60fb      	str	r3, [r7, #12]
	int32_t  ret   = I2C_OK;
    6224:	2300      	movs	r3, #0
    6226:	617b      	str	r3, [r7, #20]

	ASSERT(i2c_dev);
    6228:	687b      	ldr	r3, [r7, #4]
    622a:	2b00      	cmp	r3, #0
    622c:	bf14      	ite	ne
    622e:	2301      	movne	r3, #1
    6230:	2300      	moveq	r3, #0
    6232:	b2db      	uxtb	r3, r3
    6234:	f240 422a 	movw	r2, #1066	; 0x42a
    6238:	4931      	ldr	r1, [pc, #196]	; (6300 <_sercom_i2c_m_irq_handler+0xf4>)
    623a:	4618      	mov	r0, r3
    623c:	4b31      	ldr	r3, [pc, #196]	; (6304 <_sercom_i2c_m_irq_handler+0xf8>)
    623e:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    6240:	687b      	ldr	r3, [r7, #4]
    6242:	691b      	ldr	r3, [r3, #16]
    6244:	2b00      	cmp	r3, #0
    6246:	bf14      	ite	ne
    6248:	2301      	movne	r3, #1
    624a:	2300      	moveq	r3, #0
    624c:	b2db      	uxtb	r3, r3
    624e:	f240 422b 	movw	r2, #1067	; 0x42b
    6252:	492b      	ldr	r1, [pc, #172]	; (6300 <_sercom_i2c_m_irq_handler+0xf4>)
    6254:	4618      	mov	r0, r3
    6256:	4b2b      	ldr	r3, [pc, #172]	; (6304 <_sercom_i2c_m_irq_handler+0xf8>)
    6258:	4798      	blx	r3

	while (!(flags & ERROR_FLAG)) {
    625a:	bf00      	nop
    625c:	68fb      	ldr	r3, [r7, #12]
    625e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    6262:	2b00      	cmp	r3, #0
    6264:	d126      	bne.n	62b4 <_sercom_i2c_m_irq_handler+0xa8>
		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    6266:	687b      	ldr	r3, [r7, #4]
    6268:	461a      	mov	r2, r3
    626a:	68f9      	ldr	r1, [r7, #12]
    626c:	6938      	ldr	r0, [r7, #16]
    626e:	4b26      	ldr	r3, [pc, #152]	; (6308 <_sercom_i2c_m_irq_handler+0xfc>)
    6270:	4798      	blx	r3
    6272:	6178      	str	r0, [r7, #20]

		if (ret != 0) {
    6274:	697b      	ldr	r3, [r7, #20]
    6276:	2b00      	cmp	r3, #0
    6278:	d11b      	bne.n	62b2 <_sercom_i2c_m_irq_handler+0xa6>
			break;
		}

		/* app callback */
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    627a:	68fb      	ldr	r3, [r7, #12]
    627c:	f003 0301 	and.w	r3, r3, #1
    6280:	2b00      	cmp	r3, #0
    6282:	d008      	beq.n	6296 <_sercom_i2c_m_irq_handler+0x8a>
    6284:	687b      	ldr	r3, [r7, #4]
    6286:	699b      	ldr	r3, [r3, #24]
    6288:	2b00      	cmp	r3, #0
    628a:	d004      	beq.n	6296 <_sercom_i2c_m_irq_handler+0x8a>
			i2c_dev->cb.tx_complete(i2c_dev);
    628c:	687b      	ldr	r3, [r7, #4]
    628e:	699b      	ldr	r3, [r3, #24]
    6290:	6878      	ldr	r0, [r7, #4]
    6292:	4798      	blx	r3
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
			i2c_dev->cb.rx_complete(i2c_dev);
		}

		return;
    6294:	e02e      	b.n	62f4 <_sercom_i2c_m_irq_handler+0xe8>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    6296:	68fb      	ldr	r3, [r7, #12]
    6298:	f003 0302 	and.w	r3, r3, #2
    629c:	2b00      	cmp	r3, #0
    629e:	d029      	beq.n	62f4 <_sercom_i2c_m_irq_handler+0xe8>
    62a0:	687b      	ldr	r3, [r7, #4]
    62a2:	69db      	ldr	r3, [r3, #28]
    62a4:	2b00      	cmp	r3, #0
    62a6:	d025      	beq.n	62f4 <_sercom_i2c_m_irq_handler+0xe8>
			i2c_dev->cb.rx_complete(i2c_dev);
    62a8:	687b      	ldr	r3, [r7, #4]
    62aa:	69db      	ldr	r3, [r3, #28]
    62ac:	6878      	ldr	r0, [r7, #4]
    62ae:	4798      	blx	r3
		return;
    62b0:	e020      	b.n	62f4 <_sercom_i2c_m_irq_handler+0xe8>
			break;
    62b2:	bf00      	nop
	}

	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    62b4:	687b      	ldr	r3, [r7, #4]
    62b6:	885b      	ldrh	r3, [r3, #2]
    62b8:	b29b      	uxth	r3, r3
    62ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    62be:	b29a      	uxth	r2, r3
    62c0:	687b      	ldr	r3, [r7, #4]
    62c2:	805a      	strh	r2, [r3, #2]
	if (i2c_dev->cb.error) {
    62c4:	687b      	ldr	r3, [r7, #4]
    62c6:	695b      	ldr	r3, [r3, #20]
    62c8:	2b00      	cmp	r3, #0
    62ca:	d014      	beq.n	62f6 <_sercom_i2c_m_irq_handler+0xea>
		if (ret != I2C_OK) {
    62cc:	697b      	ldr	r3, [r7, #20]
    62ce:	2b00      	cmp	r3, #0
    62d0:	d005      	beq.n	62de <_sercom_i2c_m_irq_handler+0xd2>
			i2c_dev->cb.error(i2c_dev, ret);
    62d2:	687b      	ldr	r3, [r7, #4]
    62d4:	695b      	ldr	r3, [r3, #20]
    62d6:	6979      	ldr	r1, [r7, #20]
    62d8:	6878      	ldr	r0, [r7, #4]
    62da:	4798      	blx	r3
    62dc:	e005      	b.n	62ea <_sercom_i2c_m_irq_handler+0xde>
		} else {
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    62de:	687b      	ldr	r3, [r7, #4]
    62e0:	695b      	ldr	r3, [r3, #20]
    62e2:	f06f 0104 	mvn.w	r1, #4
    62e6:	6878      	ldr	r0, [r7, #4]
    62e8:	4798      	blx	r3
		}
		hri_sercomi2cm_clear_INTFLAG_reg(hw, SERCOM_I2CM_INTFLAG_ERROR);
    62ea:	2180      	movs	r1, #128	; 0x80
    62ec:	6938      	ldr	r0, [r7, #16]
    62ee:	4b07      	ldr	r3, [pc, #28]	; (630c <_sercom_i2c_m_irq_handler+0x100>)
    62f0:	4798      	blx	r3
    62f2:	e000      	b.n	62f6 <_sercom_i2c_m_irq_handler+0xea>
		return;
    62f4:	bf00      	nop
	}
}
    62f6:	3718      	adds	r7, #24
    62f8:	46bd      	mov	sp, r7
    62fa:	bd80      	pop	{r7, pc}
    62fc:	00005929 	.word	0x00005929
    6300:	00013134 	.word	0x00013134
    6304:	00002edd 	.word	0x00002edd
    6308:	00005fdd 	.word	0x00005fdd
    630c:	00005943 	.word	0x00005943

00006310 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    6310:	b580      	push	{r7, lr}
    6312:	b082      	sub	sp, #8
    6314:	af00      	add	r7, sp, #0
    6316:	6078      	str	r0, [r7, #4]
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    6318:	6878      	ldr	r0, [r7, #4]
    631a:	4b05      	ldr	r3, [pc, #20]	; (6330 <_sercom_get_irq_num+0x20>)
    631c:	4798      	blx	r3
    631e:	4603      	mov	r3, r0
    6320:	009b      	lsls	r3, r3, #2
    6322:	b2db      	uxtb	r3, r3
    6324:	332e      	adds	r3, #46	; 0x2e
    6326:	b2db      	uxtb	r3, r3
}
    6328:	4618      	mov	r0, r3
    632a:	3708      	adds	r7, #8
    632c:	46bd      	mov	sp, r7
    632e:	bd80      	pop	{r7, pc}
    6330:	00005ea9 	.word	0x00005ea9

00006334 <_i2c_m_async_init>:
 * \brief Initialize sercom i2c module to use in async mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_init(struct _i2c_m_async_device *const i2c_dev, void *const hw)
{
    6334:	b580      	push	{r7, lr}
    6336:	b086      	sub	sp, #24
    6338:	af00      	add	r7, sp, #0
    633a:	6078      	str	r0, [r7, #4]
    633c:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(i2c_dev);
    633e:	687b      	ldr	r3, [r7, #4]
    6340:	2b00      	cmp	r3, #0
    6342:	bf14      	ite	ne
    6344:	2301      	movne	r3, #1
    6346:	2300      	moveq	r3, #0
    6348:	b2db      	uxtb	r3, r3
    634a:	f240 429e 	movw	r2, #1182	; 0x49e
    634e:	491d      	ldr	r1, [pc, #116]	; (63c4 <_i2c_m_async_init+0x90>)
    6350:	4618      	mov	r0, r3
    6352:	4b1d      	ldr	r3, [pc, #116]	; (63c8 <_i2c_m_async_init+0x94>)
    6354:	4798      	blx	r3

	i2c_dev->hw = hw;
    6356:	687b      	ldr	r3, [r7, #4]
    6358:	683a      	ldr	r2, [r7, #0]
    635a:	611a      	str	r2, [r3, #16]

	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    635c:	687b      	ldr	r3, [r7, #4]
    635e:	6839      	ldr	r1, [r7, #0]
    6360:	4618      	mov	r0, r3
    6362:	4b1a      	ldr	r3, [pc, #104]	; (63cc <_i2c_m_async_init+0x98>)
    6364:	4798      	blx	r3
    6366:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    6368:	68fb      	ldr	r3, [r7, #12]
    636a:	2b00      	cmp	r3, #0
    636c:	d001      	beq.n	6372 <_i2c_m_async_init+0x3e>
		return init_status;
    636e:	68fb      	ldr	r3, [r7, #12]
    6370:	e024      	b.n	63bc <_i2c_m_async_init+0x88>
	}

	_sercom_init_irq_param(hw, (void *)i2c_dev);
    6372:	6879      	ldr	r1, [r7, #4]
    6374:	6838      	ldr	r0, [r7, #0]
    6376:	4b16      	ldr	r3, [pc, #88]	; (63d0 <_i2c_m_async_init+0x9c>)
    6378:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    637a:	6838      	ldr	r0, [r7, #0]
    637c:	4b15      	ldr	r3, [pc, #84]	; (63d4 <_i2c_m_async_init+0xa0>)
    637e:	4798      	blx	r3
    6380:	4603      	mov	r3, r0
    6382:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    6384:	2300      	movs	r3, #0
    6386:	613b      	str	r3, [r7, #16]
    6388:	e014      	b.n	63b4 <_i2c_m_async_init+0x80>
		NVIC_DisableIRQ((IRQn_Type)irq);
    638a:	7dfb      	ldrb	r3, [r7, #23]
    638c:	b21b      	sxth	r3, r3
    638e:	4618      	mov	r0, r3
    6390:	4b11      	ldr	r3, [pc, #68]	; (63d8 <_i2c_m_async_init+0xa4>)
    6392:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    6394:	7dfb      	ldrb	r3, [r7, #23]
    6396:	b21b      	sxth	r3, r3
    6398:	4618      	mov	r0, r3
    639a:	4b10      	ldr	r3, [pc, #64]	; (63dc <_i2c_m_async_init+0xa8>)
    639c:	4798      	blx	r3
		NVIC_EnableIRQ((IRQn_Type)irq);
    639e:	7dfb      	ldrb	r3, [r7, #23]
    63a0:	b21b      	sxth	r3, r3
    63a2:	4618      	mov	r0, r3
    63a4:	4b0e      	ldr	r3, [pc, #56]	; (63e0 <_i2c_m_async_init+0xac>)
    63a6:	4798      	blx	r3
		irq++;
    63a8:	7dfb      	ldrb	r3, [r7, #23]
    63aa:	3301      	adds	r3, #1
    63ac:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    63ae:	693b      	ldr	r3, [r7, #16]
    63b0:	3301      	adds	r3, #1
    63b2:	613b      	str	r3, [r7, #16]
    63b4:	693b      	ldr	r3, [r7, #16]
    63b6:	2b03      	cmp	r3, #3
    63b8:	d9e7      	bls.n	638a <_i2c_m_async_init+0x56>
	}
	return ERR_NONE;
    63ba:	2300      	movs	r3, #0
}
    63bc:	4618      	mov	r0, r3
    63be:	3718      	adds	r7, #24
    63c0:	46bd      	mov	sp, r7
    63c2:	bd80      	pop	{r7, pc}
    63c4:	00013134 	.word	0x00013134
    63c8:	00002edd 	.word	0x00002edd
    63cc:	000065fd 	.word	0x000065fd
    63d0:	00005f05 	.word	0x00005f05
    63d4:	00006311 	.word	0x00006311
    63d8:	000057dd 	.word	0x000057dd
    63dc:	00005821 	.word	0x00005821
    63e0:	000057a1 	.word	0x000057a1

000063e4 <_sercom_i2c_send_address>:
 * \brief Transfer the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_send_address(struct _i2c_m_async_device *const i2c_dev)
{
    63e4:	b590      	push	{r4, r7, lr}
    63e6:	b087      	sub	sp, #28
    63e8:	af00      	add	r7, sp, #0
    63ea:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    63ec:	687b      	ldr	r3, [r7, #4]
    63ee:	691b      	ldr	r3, [r3, #16]
    63f0:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    63f2:	687b      	ldr	r3, [r7, #4]
    63f4:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    63f6:	6978      	ldr	r0, [r7, #20]
    63f8:	4b33      	ldr	r3, [pc, #204]	; (64c8 <_sercom_i2c_send_address+0xe4>)
    63fa:	4798      	blx	r3
    63fc:	4603      	mov	r3, r0
    63fe:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    6400:	687b      	ldr	r3, [r7, #4]
    6402:	2b00      	cmp	r3, #0
    6404:	bf14      	ite	ne
    6406:	2301      	movne	r3, #1
    6408:	2300      	moveq	r3, #0
    640a:	b2db      	uxtb	r3, r3
    640c:	f240 42cc 	movw	r2, #1228	; 0x4cc
    6410:	492e      	ldr	r1, [pc, #184]	; (64cc <_sercom_i2c_send_address+0xe8>)
    6412:	4618      	mov	r0, r3
    6414:	4b2e      	ldr	r3, [pc, #184]	; (64d0 <_sercom_i2c_send_address+0xec>)
    6416:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    6418:	693b      	ldr	r3, [r7, #16]
    641a:	685b      	ldr	r3, [r3, #4]
    641c:	2b01      	cmp	r3, #1
    641e:	d106      	bne.n	642e <_sercom_i2c_send_address+0x4a>
    6420:	68fb      	ldr	r3, [r7, #12]
    6422:	2b00      	cmp	r3, #0
    6424:	d003      	beq.n	642e <_sercom_i2c_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    6426:	6978      	ldr	r0, [r7, #20]
    6428:	4b2a      	ldr	r3, [pc, #168]	; (64d4 <_sercom_i2c_send_address+0xf0>)
    642a:	4798      	blx	r3
    642c:	e002      	b.n	6434 <_sercom_i2c_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    642e:	6978      	ldr	r0, [r7, #20]
    6430:	4b29      	ldr	r3, [pc, #164]	; (64d8 <_sercom_i2c_send_address+0xf4>)
    6432:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    6434:	693b      	ldr	r3, [r7, #16]
    6436:	881b      	ldrh	r3, [r3, #0]
    6438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    643c:	2b00      	cmp	r3, #0
    643e:	d022      	beq.n	6486 <_sercom_i2c_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    6440:	693b      	ldr	r3, [r7, #16]
    6442:	885b      	ldrh	r3, [r3, #2]
    6444:	b29b      	uxth	r3, r3
    6446:	f003 0301 	and.w	r3, r3, #1
    644a:	2b00      	cmp	r3, #0
    644c:	d007      	beq.n	645e <_sercom_i2c_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    644e:	693b      	ldr	r3, [r7, #16]
    6450:	885b      	ldrh	r3, [r3, #2]
    6452:	b29b      	uxth	r3, r3
    6454:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    6458:	b29a      	uxth	r2, r3
    645a:	693b      	ldr	r3, [r7, #16]
    645c:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    645e:	693b      	ldr	r3, [r7, #16]
    6460:	881b      	ldrh	r3, [r3, #0]
    6462:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6464:	f240 74fe 	movw	r4, #2046	; 0x7fe
    6468:	401c      	ands	r4, r3
    646a:	6978      	ldr	r0, [r7, #20]
    646c:	4b1b      	ldr	r3, [pc, #108]	; (64dc <_sercom_i2c_send_address+0xf8>)
    646e:	4798      	blx	r3
    6470:	4603      	mov	r3, r0
    6472:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    6476:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    6478:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    647c:	4619      	mov	r1, r3
    647e:	6978      	ldr	r0, [r7, #20]
    6480:	4b17      	ldr	r3, [pc, #92]	; (64e0 <_sercom_i2c_send_address+0xfc>)
    6482:	4798      	blx	r3
    6484:	e01a      	b.n	64bc <_sercom_i2c_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    6486:	693b      	ldr	r3, [r7, #16]
    6488:	881b      	ldrh	r3, [r3, #0]
    648a:	005b      	lsls	r3, r3, #1
    648c:	b2db      	uxtb	r3, r3
    648e:	693a      	ldr	r2, [r7, #16]
    6490:	8852      	ldrh	r2, [r2, #2]
    6492:	b292      	uxth	r2, r2
    6494:	f002 0201 	and.w	r2, r2, #1
    6498:	2a00      	cmp	r2, #0
    649a:	bf14      	ite	ne
    649c:	2201      	movne	r2, #1
    649e:	2200      	moveq	r2, #0
    64a0:	b2d2      	uxtb	r2, r2
    64a2:	4313      	orrs	r3, r2
    64a4:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    64a6:	6978      	ldr	r0, [r7, #20]
    64a8:	4b0c      	ldr	r3, [pc, #48]	; (64dc <_sercom_i2c_send_address+0xf8>)
    64aa:	4798      	blx	r3
    64ac:	4603      	mov	r3, r0
    64ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    64b2:	4323      	orrs	r3, r4
    64b4:	4619      	mov	r1, r3
    64b6:	6978      	ldr	r0, [r7, #20]
    64b8:	4b09      	ldr	r3, [pc, #36]	; (64e0 <_sercom_i2c_send_address+0xfc>)
    64ba:	4798      	blx	r3
	}

	return ERR_NONE;
    64bc:	2300      	movs	r3, #0
}
    64be:	4618      	mov	r0, r3
    64c0:	371c      	adds	r7, #28
    64c2:	46bd      	mov	sp, r7
    64c4:	bd90      	pop	{r4, r7, pc}
    64c6:	bf00      	nop
    64c8:	00005aa1 	.word	0x00005aa1
    64cc:	00013134 	.word	0x00013134
    64d0:	00002edd 	.word	0x00002edd
    64d4:	00005c29 	.word	0x00005c29
    64d8:	00005c51 	.word	0x00005c51
    64dc:	00005d91 	.word	0x00005d91
    64e0:	00005d6d 	.word	0x00005d6d

000064e4 <_i2c_m_async_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail, return the error code
 */
int32_t _i2c_m_async_transfer(struct _i2c_m_async_device *i2c_dev, struct _i2c_m_msg *msg)
{
    64e4:	b580      	push	{r7, lr}
    64e6:	b084      	sub	sp, #16
    64e8:	af00      	add	r7, sp, #0
    64ea:	6078      	str	r0, [r7, #4]
    64ec:	6039      	str	r1, [r7, #0]
	int ret;

	ASSERT(i2c_dev);
    64ee:	687b      	ldr	r3, [r7, #4]
    64f0:	2b00      	cmp	r3, #0
    64f2:	bf14      	ite	ne
    64f4:	2301      	movne	r3, #1
    64f6:	2300      	moveq	r3, #0
    64f8:	b2db      	uxtb	r3, r3
    64fa:	f240 42f4 	movw	r2, #1268	; 0x4f4
    64fe:	492a      	ldr	r1, [pc, #168]	; (65a8 <_i2c_m_async_transfer+0xc4>)
    6500:	4618      	mov	r0, r3
    6502:	4b2a      	ldr	r3, [pc, #168]	; (65ac <_i2c_m_async_transfer+0xc8>)
    6504:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    6506:	687b      	ldr	r3, [r7, #4]
    6508:	691b      	ldr	r3, [r3, #16]
    650a:	2b00      	cmp	r3, #0
    650c:	bf14      	ite	ne
    650e:	2301      	movne	r3, #1
    6510:	2300      	moveq	r3, #0
    6512:	b2db      	uxtb	r3, r3
    6514:	f240 42f5 	movw	r2, #1269	; 0x4f5
    6518:	4923      	ldr	r1, [pc, #140]	; (65a8 <_i2c_m_async_transfer+0xc4>)
    651a:	4618      	mov	r0, r3
    651c:	4b23      	ldr	r3, [pc, #140]	; (65ac <_i2c_m_async_transfer+0xc8>)
    651e:	4798      	blx	r3
	ASSERT(msg);
    6520:	683b      	ldr	r3, [r7, #0]
    6522:	2b00      	cmp	r3, #0
    6524:	bf14      	ite	ne
    6526:	2301      	movne	r3, #1
    6528:	2300      	moveq	r3, #0
    652a:	b2db      	uxtb	r3, r3
    652c:	f240 42f6 	movw	r2, #1270	; 0x4f6
    6530:	491d      	ldr	r1, [pc, #116]	; (65a8 <_i2c_m_async_transfer+0xc4>)
    6532:	4618      	mov	r0, r3
    6534:	4b1d      	ldr	r3, [pc, #116]	; (65ac <_i2c_m_async_transfer+0xc8>)
    6536:	4798      	blx	r3

	if (msg->len == 0) {
    6538:	683b      	ldr	r3, [r7, #0]
    653a:	685b      	ldr	r3, [r3, #4]
    653c:	2b00      	cmp	r3, #0
    653e:	d101      	bne.n	6544 <_i2c_m_async_transfer+0x60>
		return ERR_NONE;
    6540:	2300      	movs	r3, #0
    6542:	e02d      	b.n	65a0 <_i2c_m_async_transfer+0xbc>
	}

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    6544:	687b      	ldr	r3, [r7, #4]
    6546:	885b      	ldrh	r3, [r3, #2]
    6548:	b29b      	uxth	r3, r3
    654a:	f403 7380 	and.w	r3, r3, #256	; 0x100
    654e:	2b00      	cmp	r3, #0
    6550:	d002      	beq.n	6558 <_i2c_m_async_transfer+0x74>
		return ERR_BUSY;
    6552:	f06f 0303 	mvn.w	r3, #3
    6556:	e023      	b.n	65a0 <_i2c_m_async_transfer+0xbc>
	}

	msg->flags |= I2C_M_BUSY;
    6558:	683b      	ldr	r3, [r7, #0]
    655a:	885b      	ldrh	r3, [r3, #2]
    655c:	b29b      	uxth	r3, r3
    655e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6562:	b29a      	uxth	r2, r3
    6564:	683b      	ldr	r3, [r7, #0]
    6566:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    6568:	687b      	ldr	r3, [r7, #4]
    656a:	683a      	ldr	r2, [r7, #0]
    656c:	ca07      	ldmia	r2, {r0, r1, r2}
    656e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    6572:	687b      	ldr	r3, [r7, #4]
    6574:	691b      	ldr	r3, [r3, #16]
    6576:	4618      	mov	r0, r3
    6578:	4b0d      	ldr	r3, [pc, #52]	; (65b0 <_i2c_m_async_transfer+0xcc>)
    657a:	4798      	blx	r3

	ret = _sercom_i2c_send_address(i2c_dev);
    657c:	6878      	ldr	r0, [r7, #4]
    657e:	4b0d      	ldr	r3, [pc, #52]	; (65b4 <_i2c_m_async_transfer+0xd0>)
    6580:	4798      	blx	r3
    6582:	60f8      	str	r0, [r7, #12]

	if (ret) {
    6584:	68fb      	ldr	r3, [r7, #12]
    6586:	2b00      	cmp	r3, #0
    6588:	d009      	beq.n	659e <_i2c_m_async_transfer+0xba>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    658a:	687b      	ldr	r3, [r7, #4]
    658c:	885b      	ldrh	r3, [r3, #2]
    658e:	b29b      	uxth	r3, r3
    6590:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6594:	b29a      	uxth	r2, r3
    6596:	687b      	ldr	r3, [r7, #4]
    6598:	805a      	strh	r2, [r3, #2]

		return ret;
    659a:	68fb      	ldr	r3, [r7, #12]
    659c:	e000      	b.n	65a0 <_i2c_m_async_transfer+0xbc>
	}

	return ERR_NONE;
    659e:	2300      	movs	r3, #0
}
    65a0:	4618      	mov	r0, r3
    65a2:	3710      	adds	r7, #16
    65a4:	46bd      	mov	sp, r7
    65a6:	bd80      	pop	{r7, pc}
    65a8:	00013134 	.word	0x00013134
    65ac:	00002edd 	.word	0x00002edd
    65b0:	00005bd9 	.word	0x00005bd9
    65b4:	000063e5 	.word	0x000063e5

000065b8 <_i2c_m_async_register_callback>:
 * \param[in] type The callback type
 * \param[in] func The callback function pointer
 */
int32_t _i2c_m_async_register_callback(struct _i2c_m_async_device *const i2c_dev, enum _i2c_m_async_callback_type type,
                                       FUNC_PTR func)
{
    65b8:	b480      	push	{r7}
    65ba:	b085      	sub	sp, #20
    65bc:	af00      	add	r7, sp, #0
    65be:	60f8      	str	r0, [r7, #12]
    65c0:	460b      	mov	r3, r1
    65c2:	607a      	str	r2, [r7, #4]
    65c4:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    65c6:	7afb      	ldrb	r3, [r7, #11]
    65c8:	2b01      	cmp	r3, #1
    65ca:	d008      	beq.n	65de <_i2c_m_async_register_callback+0x26>
    65cc:	2b02      	cmp	r3, #2
    65ce:	d00a      	beq.n	65e6 <_i2c_m_async_register_callback+0x2e>
    65d0:	2b00      	cmp	r3, #0
    65d2:	d000      	beq.n	65d6 <_i2c_m_async_register_callback+0x1e>
	case I2C_M_ASYNC_DEVICE_RX_COMPLETE:
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
		break;
	default:
		/* error */
		break;
    65d4:	e00b      	b.n	65ee <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    65d6:	68fb      	ldr	r3, [r7, #12]
    65d8:	687a      	ldr	r2, [r7, #4]
    65da:	615a      	str	r2, [r3, #20]
		break;
    65dc:	e007      	b.n	65ee <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    65de:	68fb      	ldr	r3, [r7, #12]
    65e0:	687a      	ldr	r2, [r7, #4]
    65e2:	619a      	str	r2, [r3, #24]
		break;
    65e4:	e003      	b.n	65ee <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    65e6:	68fb      	ldr	r3, [r7, #12]
    65e8:	687a      	ldr	r2, [r7, #4]
    65ea:	61da      	str	r2, [r3, #28]
		break;
    65ec:	bf00      	nop
	}

	return ERR_NONE;
    65ee:	2300      	movs	r3, #0
}
    65f0:	4618      	mov	r0, r3
    65f2:	3714      	adds	r7, #20
    65f4:	46bd      	mov	sp, r7
    65f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    65fa:	4770      	bx	lr

000065fc <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    65fc:	b580      	push	{r7, lr}
    65fe:	b084      	sub	sp, #16
    6600:	af00      	add	r7, sp, #0
    6602:	6078      	str	r0, [r7, #4]
    6604:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    6606:	6838      	ldr	r0, [r7, #0]
    6608:	4b42      	ldr	r3, [pc, #264]	; (6714 <_i2c_m_sync_init_impl+0x118>)
    660a:	4798      	blx	r3
    660c:	4603      	mov	r3, r0
    660e:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    6610:	2101      	movs	r1, #1
    6612:	6838      	ldr	r0, [r7, #0]
    6614:	4b40      	ldr	r3, [pc, #256]	; (6718 <_i2c_m_sync_init_impl+0x11c>)
    6616:	4798      	blx	r3
    6618:	4603      	mov	r3, r0
    661a:	f083 0301 	eor.w	r3, r3, #1
    661e:	b2db      	uxtb	r3, r3
    6620:	2b00      	cmp	r3, #0
    6622:	d020      	beq.n	6666 <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    6624:	7bfa      	ldrb	r2, [r7, #15]
    6626:	493d      	ldr	r1, [pc, #244]	; (671c <_i2c_m_sync_init_impl+0x120>)
    6628:	4613      	mov	r3, r2
    662a:	005b      	lsls	r3, r3, #1
    662c:	4413      	add	r3, r2
    662e:	00db      	lsls	r3, r3, #3
    6630:	440b      	add	r3, r1
    6632:	3304      	adds	r3, #4
    6634:	681b      	ldr	r3, [r3, #0]
    6636:	f003 031c 	and.w	r3, r3, #28
    663a:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    663c:	2102      	movs	r1, #2
    663e:	6838      	ldr	r0, [r7, #0]
    6640:	4b37      	ldr	r3, [pc, #220]	; (6720 <_i2c_m_sync_init_impl+0x124>)
    6642:	4798      	blx	r3
    6644:	4603      	mov	r3, r0
    6646:	2b00      	cmp	r3, #0
    6648:	d006      	beq.n	6658 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    664a:	6838      	ldr	r0, [r7, #0]
    664c:	4b35      	ldr	r3, [pc, #212]	; (6724 <_i2c_m_sync_init_impl+0x128>)
    664e:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    6650:	2102      	movs	r1, #2
    6652:	6838      	ldr	r0, [r7, #0]
    6654:	4b34      	ldr	r3, [pc, #208]	; (6728 <_i2c_m_sync_init_impl+0x12c>)
    6656:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    6658:	68bb      	ldr	r3, [r7, #8]
    665a:	f043 0301 	orr.w	r3, r3, #1
    665e:	4619      	mov	r1, r3
    6660:	6838      	ldr	r0, [r7, #0]
    6662:	4b32      	ldr	r3, [pc, #200]	; (672c <_i2c_m_sync_init_impl+0x130>)
    6664:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    6666:	2101      	movs	r1, #1
    6668:	6838      	ldr	r0, [r7, #0]
    666a:	4b2f      	ldr	r3, [pc, #188]	; (6728 <_i2c_m_sync_init_impl+0x12c>)
    666c:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    666e:	7bfa      	ldrb	r2, [r7, #15]
    6670:	492a      	ldr	r1, [pc, #168]	; (671c <_i2c_m_sync_init_impl+0x120>)
    6672:	4613      	mov	r3, r2
    6674:	005b      	lsls	r3, r3, #1
    6676:	4413      	add	r3, r2
    6678:	00db      	lsls	r3, r3, #3
    667a:	440b      	add	r3, r1
    667c:	3304      	adds	r3, #4
    667e:	681b      	ldr	r3, [r3, #0]
    6680:	4619      	mov	r1, r3
    6682:	6838      	ldr	r0, [r7, #0]
    6684:	4b29      	ldr	r3, [pc, #164]	; (672c <_i2c_m_sync_init_impl+0x130>)
    6686:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    6688:	7bfa      	ldrb	r2, [r7, #15]
    668a:	4924      	ldr	r1, [pc, #144]	; (671c <_i2c_m_sync_init_impl+0x120>)
    668c:	4613      	mov	r3, r2
    668e:	005b      	lsls	r3, r3, #1
    6690:	4413      	add	r3, r2
    6692:	00db      	lsls	r3, r3, #3
    6694:	440b      	add	r3, r1
    6696:	3308      	adds	r3, #8
    6698:	681b      	ldr	r3, [r3, #0]
    669a:	4619      	mov	r1, r3
    669c:	6838      	ldr	r0, [r7, #0]
    669e:	4b24      	ldr	r3, [pc, #144]	; (6730 <_i2c_m_sync_init_impl+0x134>)
    66a0:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    66a2:	7bfa      	ldrb	r2, [r7, #15]
    66a4:	491d      	ldr	r1, [pc, #116]	; (671c <_i2c_m_sync_init_impl+0x120>)
    66a6:	4613      	mov	r3, r2
    66a8:	005b      	lsls	r3, r3, #1
    66aa:	4413      	add	r3, r2
    66ac:	00db      	lsls	r3, r3, #3
    66ae:	440b      	add	r3, r1
    66b0:	330c      	adds	r3, #12
    66b2:	681b      	ldr	r3, [r3, #0]
    66b4:	4619      	mov	r1, r3
    66b6:	6838      	ldr	r0, [r7, #0]
    66b8:	4b1e      	ldr	r3, [pc, #120]	; (6734 <_i2c_m_sync_init_impl+0x138>)
    66ba:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    66bc:	7bfa      	ldrb	r2, [r7, #15]
    66be:	4917      	ldr	r1, [pc, #92]	; (671c <_i2c_m_sync_init_impl+0x120>)
    66c0:	4613      	mov	r3, r2
    66c2:	005b      	lsls	r3, r3, #1
    66c4:	4413      	add	r3, r2
    66c6:	00db      	lsls	r3, r3, #3
    66c8:	440b      	add	r3, r1
    66ca:	3304      	adds	r3, #4
    66cc:	681b      	ldr	r3, [r3, #0]
    66ce:	0e1b      	lsrs	r3, r3, #24
    66d0:	b29b      	uxth	r3, r3
    66d2:	f003 0303 	and.w	r3, r3, #3
    66d6:	b29a      	uxth	r2, r3
    66d8:	687b      	ldr	r3, [r7, #4]
    66da:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    66dc:	687b      	ldr	r3, [r7, #4]
    66de:	899b      	ldrh	r3, [r3, #12]
    66e0:	2b01      	cmp	r3, #1
    66e2:	bf8c      	ite	hi
    66e4:	2301      	movhi	r3, #1
    66e6:	2300      	movls	r3, #0
    66e8:	b2db      	uxtb	r3, r3
    66ea:	4619      	mov	r1, r3
    66ec:	6838      	ldr	r0, [r7, #0]
    66ee:	4b12      	ldr	r3, [pc, #72]	; (6738 <_i2c_m_sync_init_impl+0x13c>)
    66f0:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    66f2:	7bfa      	ldrb	r2, [r7, #15]
    66f4:	4909      	ldr	r1, [pc, #36]	; (671c <_i2c_m_sync_init_impl+0x120>)
    66f6:	4613      	mov	r3, r2
    66f8:	005b      	lsls	r3, r3, #1
    66fa:	4413      	add	r3, r2
    66fc:	00db      	lsls	r3, r3, #3
    66fe:	440b      	add	r3, r1
    6700:	3312      	adds	r3, #18
    6702:	881a      	ldrh	r2, [r3, #0]
    6704:	687b      	ldr	r3, [r7, #4]
    6706:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    6708:	2300      	movs	r3, #0
}
    670a:	4618      	mov	r0, r3
    670c:	3710      	adds	r7, #16
    670e:	46bd      	mov	sp, r7
    6710:	bd80      	pop	{r7, pc}
    6712:	bf00      	nop
    6714:	00005f59 	.word	0x00005f59
    6718:	00005881 	.word	0x00005881
    671c:	20000018 	.word	0x20000018
    6720:	00005ad1 	.word	0x00005ad1
    6724:	00005a79 	.word	0x00005a79
    6728:	0000585d 	.word	0x0000585d
    672c:	00005b01 	.word	0x00005b01
    6730:	00005ca9 	.word	0x00005ca9
    6734:	00005cf1 	.word	0x00005cf1
    6738:	00005d2d 	.word	0x00005d2d

0000673c <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    673c:	b580      	push	{r7, lr}
    673e:	b082      	sub	sp, #8
    6740:	af00      	add	r7, sp, #0
    6742:	6078      	str	r0, [r7, #4]
    6744:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    6746:	687b      	ldr	r3, [r7, #4]
    6748:	2b00      	cmp	r3, #0
    674a:	d004      	beq.n	6756 <_spi_load_regs_master+0x1a>
    674c:	683b      	ldr	r3, [r7, #0]
    674e:	2b00      	cmp	r3, #0
    6750:	d001      	beq.n	6756 <_spi_load_regs_master+0x1a>
    6752:	2301      	movs	r3, #1
    6754:	e000      	b.n	6758 <_spi_load_regs_master+0x1c>
    6756:	2300      	movs	r3, #0
    6758:	f003 0301 	and.w	r3, r3, #1
    675c:	b2db      	uxtb	r3, r3
    675e:	f640 1242 	movw	r2, #2370	; 0x942
    6762:	4915      	ldr	r1, [pc, #84]	; (67b8 <_spi_load_regs_master+0x7c>)
    6764:	4618      	mov	r0, r3
    6766:	4b15      	ldr	r3, [pc, #84]	; (67bc <_spi_load_regs_master+0x80>)
    6768:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    676a:	683b      	ldr	r3, [r7, #0]
    676c:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    676e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    6772:	f023 0301 	bic.w	r3, r3, #1
    6776:	4619      	mov	r1, r3
    6778:	6878      	ldr	r0, [r7, #4]
    677a:	4b11      	ldr	r3, [pc, #68]	; (67c0 <_spi_load_regs_master+0x84>)
    677c:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    677e:	683b      	ldr	r3, [r7, #0]
    6780:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    6782:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    6786:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    678a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    678e:	4619      	mov	r1, r3
    6790:	6878      	ldr	r0, [r7, #4]
    6792:	4b0c      	ldr	r3, [pc, #48]	; (67c4 <_spi_load_regs_master+0x88>)
    6794:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    6796:	683b      	ldr	r3, [r7, #0]
    6798:	7b1b      	ldrb	r3, [r3, #12]
    679a:	4619      	mov	r1, r3
    679c:	6878      	ldr	r0, [r7, #4]
    679e:	4b0a      	ldr	r3, [pc, #40]	; (67c8 <_spi_load_regs_master+0x8c>)
    67a0:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    67a2:	683b      	ldr	r3, [r7, #0]
    67a4:	7b5b      	ldrb	r3, [r3, #13]
    67a6:	4619      	mov	r1, r3
    67a8:	6878      	ldr	r0, [r7, #4]
    67aa:	4b08      	ldr	r3, [pc, #32]	; (67cc <_spi_load_regs_master+0x90>)
    67ac:	4798      	blx	r3
}
    67ae:	bf00      	nop
    67b0:	3708      	adds	r7, #8
    67b2:	46bd      	mov	sp, r7
    67b4:	bd80      	pop	{r7, pc}
    67b6:	bf00      	nop
    67b8:	00013134 	.word	0x00013134
    67bc:	00002edd 	.word	0x00002edd
    67c0:	00005bb5 	.word	0x00005bb5
    67c4:	00005ccd 	.word	0x00005ccd
    67c8:	00005d0d 	.word	0x00005d0d
    67cc:	00005e45 	.word	0x00005e45

000067d0 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    67d0:	b580      	push	{r7, lr}
    67d2:	b082      	sub	sp, #8
    67d4:	af00      	add	r7, sp, #0
    67d6:	6078      	str	r0, [r7, #4]
    67d8:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    67da:	687b      	ldr	r3, [r7, #4]
    67dc:	2b00      	cmp	r3, #0
    67de:	d004      	beq.n	67ea <_spi_load_regs_slave+0x1a>
    67e0:	683b      	ldr	r3, [r7, #0]
    67e2:	2b00      	cmp	r3, #0
    67e4:	d001      	beq.n	67ea <_spi_load_regs_slave+0x1a>
    67e6:	2301      	movs	r3, #1
    67e8:	e000      	b.n	67ec <_spi_load_regs_slave+0x1c>
    67ea:	2300      	movs	r3, #0
    67ec:	f003 0301 	and.w	r3, r3, #1
    67f0:	b2db      	uxtb	r3, r3
    67f2:	f640 1256 	movw	r2, #2390	; 0x956
    67f6:	491a      	ldr	r1, [pc, #104]	; (6860 <_spi_load_regs_slave+0x90>)
    67f8:	4618      	mov	r0, r3
    67fa:	4b1a      	ldr	r3, [pc, #104]	; (6864 <_spi_load_regs_slave+0x94>)
    67fc:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    67fe:	683b      	ldr	r3, [r7, #0]
    6800:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    6802:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    6806:	f023 0301 	bic.w	r3, r3, #1
    680a:	4619      	mov	r1, r3
    680c:	6878      	ldr	r0, [r7, #4]
    680e:	4b16      	ldr	r3, [pc, #88]	; (6868 <_spi_load_regs_slave+0x98>)
    6810:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    6812:	683b      	ldr	r3, [r7, #0]
    6814:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    6816:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    681a:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    681e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    6822:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    6826:	4619      	mov	r1, r3
    6828:	6878      	ldr	r0, [r7, #4]
    682a:	4b10      	ldr	r3, [pc, #64]	; (686c <_spi_load_regs_slave+0x9c>)
    682c:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    682e:	683b      	ldr	r3, [r7, #0]
    6830:	689b      	ldr	r3, [r3, #8]
    6832:	4619      	mov	r1, r3
    6834:	6878      	ldr	r0, [r7, #4]
    6836:	4b0e      	ldr	r3, [pc, #56]	; (6870 <_spi_load_regs_slave+0xa0>)
    6838:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    683a:	683b      	ldr	r3, [r7, #0]
    683c:	7b5b      	ldrb	r3, [r3, #13]
    683e:	4619      	mov	r1, r3
    6840:	6878      	ldr	r0, [r7, #4]
    6842:	4b0c      	ldr	r3, [pc, #48]	; (6874 <_spi_load_regs_slave+0xa4>)
    6844:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    6846:	bf00      	nop
    6848:	f04f 31ff 	mov.w	r1, #4294967295
    684c:	6878      	ldr	r0, [r7, #4]
    684e:	4b0a      	ldr	r3, [pc, #40]	; (6878 <_spi_load_regs_slave+0xa8>)
    6850:	4798      	blx	r3
    6852:	4603      	mov	r3, r0
    6854:	2b00      	cmp	r3, #0
    6856:	d1f7      	bne.n	6848 <_spi_load_regs_slave+0x78>
		;
}
    6858:	bf00      	nop
    685a:	3708      	adds	r7, #8
    685c:	46bd      	mov	sp, r7
    685e:	bd80      	pop	{r7, pc}
    6860:	00013134 	.word	0x00013134
    6864:	00002edd 	.word	0x00002edd
    6868:	00005bb5 	.word	0x00005bb5
    686c:	00005ccd 	.word	0x00005ccd
    6870:	00005db1 	.word	0x00005db1
    6874:	00005e45 	.word	0x00005e45
    6878:	000058cd 	.word	0x000058cd

0000687c <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    687c:	b580      	push	{r7, lr}
    687e:	b084      	sub	sp, #16
    6880:	af00      	add	r7, sp, #0
    6882:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    6884:	687b      	ldr	r3, [r7, #4]
    6886:	4618      	mov	r0, r3
    6888:	4b11      	ldr	r3, [pc, #68]	; (68d0 <_spi_get_regs+0x54>)
    688a:	4798      	blx	r3
    688c:	4603      	mov	r3, r0
    688e:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    6890:	2300      	movs	r3, #0
    6892:	73fb      	strb	r3, [r7, #15]
    6894:	e014      	b.n	68c0 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    6896:	7bfa      	ldrb	r2, [r7, #15]
    6898:	490e      	ldr	r1, [pc, #56]	; (68d4 <_spi_get_regs+0x58>)
    689a:	4613      	mov	r3, r2
    689c:	011b      	lsls	r3, r3, #4
    689e:	4413      	add	r3, r2
    68a0:	440b      	add	r3, r1
    68a2:	3310      	adds	r3, #16
    68a4:	781b      	ldrb	r3, [r3, #0]
    68a6:	7bba      	ldrb	r2, [r7, #14]
    68a8:	429a      	cmp	r2, r3
    68aa:	d106      	bne.n	68ba <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    68ac:	7bfa      	ldrb	r2, [r7, #15]
    68ae:	4613      	mov	r3, r2
    68b0:	011b      	lsls	r3, r3, #4
    68b2:	4413      	add	r3, r2
    68b4:	4a07      	ldr	r2, [pc, #28]	; (68d4 <_spi_get_regs+0x58>)
    68b6:	4413      	add	r3, r2
    68b8:	e006      	b.n	68c8 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    68ba:	7bfb      	ldrb	r3, [r7, #15]
    68bc:	3301      	adds	r3, #1
    68be:	73fb      	strb	r3, [r7, #15]
    68c0:	7bfb      	ldrb	r3, [r7, #15]
    68c2:	2b01      	cmp	r3, #1
    68c4:	d9e7      	bls.n	6896 <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    68c6:	2300      	movs	r3, #0
}
    68c8:	4618      	mov	r0, r3
    68ca:	3710      	adds	r7, #16
    68cc:	46bd      	mov	sp, r7
    68ce:	bd80      	pop	{r7, pc}
    68d0:	00005ea9 	.word	0x00005ea9
    68d4:	00013170 	.word	0x00013170

000068d8 <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    68d8:	b580      	push	{r7, lr}
    68da:	b084      	sub	sp, #16
    68dc:	af00      	add	r7, sp, #0
    68de:	6078      	str	r0, [r7, #4]
	void *                      hw = dev->prvt;
    68e0:	687b      	ldr	r3, [r7, #4]
    68e2:	681b      	ldr	r3, [r3, #0]
    68e4:	60fb      	str	r3, [r7, #12]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
    68e6:	68f8      	ldr	r0, [r7, #12]
    68e8:	4b21      	ldr	r3, [pc, #132]	; (6970 <_spi_handler+0x98>)
    68ea:	4798      	blx	r3
    68ec:	4603      	mov	r3, r0
    68ee:	72fb      	strb	r3, [r7, #11]
	st &= hri_sercomspi_read_INTEN_reg(hw);
    68f0:	68f8      	ldr	r0, [r7, #12]
    68f2:	4b20      	ldr	r3, [pc, #128]	; (6974 <_spi_handler+0x9c>)
    68f4:	4798      	blx	r3
    68f6:	4603      	mov	r3, r0
    68f8:	461a      	mov	r2, r3
    68fa:	7afb      	ldrb	r3, [r7, #11]
    68fc:	4013      	ands	r3, r2
    68fe:	72fb      	strb	r3, [r7, #11]

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    6900:	7afb      	ldrb	r3, [r7, #11]
    6902:	f003 0301 	and.w	r3, r3, #1
    6906:	2b00      	cmp	r3, #0
    6908:	d004      	beq.n	6914 <_spi_handler+0x3c>
		dev->callbacks.tx(dev);
    690a:	687b      	ldr	r3, [r7, #4]
    690c:	689b      	ldr	r3, [r3, #8]
    690e:	6878      	ldr	r0, [r7, #4]
    6910:	4798      	blx	r3
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
	}
}
    6912:	e029      	b.n	6968 <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    6914:	7afb      	ldrb	r3, [r7, #11]
    6916:	f003 0304 	and.w	r3, r3, #4
    691a:	2b00      	cmp	r3, #0
    691c:	d004      	beq.n	6928 <_spi_handler+0x50>
		dev->callbacks.rx(dev);
    691e:	687b      	ldr	r3, [r7, #4]
    6920:	68db      	ldr	r3, [r3, #12]
    6922:	6878      	ldr	r0, [r7, #4]
    6924:	4798      	blx	r3
}
    6926:	e01f      	b.n	6968 <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    6928:	7afb      	ldrb	r3, [r7, #11]
    692a:	f003 0302 	and.w	r3, r3, #2
    692e:	2b00      	cmp	r3, #0
    6930:	d008      	beq.n	6944 <_spi_handler+0x6c>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
    6932:	2102      	movs	r1, #2
    6934:	68f8      	ldr	r0, [r7, #12]
    6936:	4b10      	ldr	r3, [pc, #64]	; (6978 <_spi_handler+0xa0>)
    6938:	4798      	blx	r3
		dev->callbacks.complete(dev);
    693a:	687b      	ldr	r3, [r7, #4]
    693c:	691b      	ldr	r3, [r3, #16]
    693e:	6878      	ldr	r0, [r7, #4]
    6940:	4798      	blx	r3
}
    6942:	e011      	b.n	6968 <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    6944:	f997 300b 	ldrsb.w	r3, [r7, #11]
    6948:	2b00      	cmp	r3, #0
    694a:	da0d      	bge.n	6968 <_spi_handler+0x90>
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
    694c:	2104      	movs	r1, #4
    694e:	68f8      	ldr	r0, [r7, #12]
    6950:	4b0a      	ldr	r3, [pc, #40]	; (697c <_spi_handler+0xa4>)
    6952:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    6954:	2180      	movs	r1, #128	; 0x80
    6956:	68f8      	ldr	r0, [r7, #12]
    6958:	4b07      	ldr	r3, [pc, #28]	; (6978 <_spi_handler+0xa0>)
    695a:	4798      	blx	r3
		dev->callbacks.err(dev, ERR_OVERFLOW);
    695c:	687b      	ldr	r3, [r7, #4]
    695e:	695b      	ldr	r3, [r3, #20]
    6960:	f06f 0112 	mvn.w	r1, #18
    6964:	6878      	ldr	r0, [r7, #4]
    6966:	4798      	blx	r3
}
    6968:	bf00      	nop
    696a:	3710      	adds	r7, #16
    696c:	46bd      	mov	sp, r7
    696e:	bd80      	pop	{r7, pc}
    6970:	00005989 	.word	0x00005989
    6974:	00005a5d 	.word	0x00005a5d
    6978:	000059a3 	.word	0x000059a3
    697c:	00005e65 	.word	0x00005e65

00006980 <SERCOM4_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_0_Handler(void)
{
    6980:	b580      	push	{r7, lr}
    6982:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    6984:	4b03      	ldr	r3, [pc, #12]	; (6994 <SERCOM4_0_Handler+0x14>)
    6986:	681b      	ldr	r3, [r3, #0]
    6988:	4618      	mov	r0, r3
    698a:	4b03      	ldr	r3, [pc, #12]	; (6998 <SERCOM4_0_Handler+0x18>)
    698c:	4798      	blx	r3
}
    698e:	bf00      	nop
    6990:	bd80      	pop	{r7, pc}
    6992:	bf00      	nop
    6994:	20000c14 	.word	0x20000c14
    6998:	000068d9 	.word	0x000068d9

0000699c <SERCOM4_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_1_Handler(void)
{
    699c:	b580      	push	{r7, lr}
    699e:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    69a0:	4b03      	ldr	r3, [pc, #12]	; (69b0 <SERCOM4_1_Handler+0x14>)
    69a2:	681b      	ldr	r3, [r3, #0]
    69a4:	4618      	mov	r0, r3
    69a6:	4b03      	ldr	r3, [pc, #12]	; (69b4 <SERCOM4_1_Handler+0x18>)
    69a8:	4798      	blx	r3
}
    69aa:	bf00      	nop
    69ac:	bd80      	pop	{r7, pc}
    69ae:	bf00      	nop
    69b0:	20000c14 	.word	0x20000c14
    69b4:	000068d9 	.word	0x000068d9

000069b8 <SERCOM4_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_2_Handler(void)
{
    69b8:	b580      	push	{r7, lr}
    69ba:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    69bc:	4b03      	ldr	r3, [pc, #12]	; (69cc <SERCOM4_2_Handler+0x14>)
    69be:	681b      	ldr	r3, [r3, #0]
    69c0:	4618      	mov	r0, r3
    69c2:	4b03      	ldr	r3, [pc, #12]	; (69d0 <SERCOM4_2_Handler+0x18>)
    69c4:	4798      	blx	r3
}
    69c6:	bf00      	nop
    69c8:	bd80      	pop	{r7, pc}
    69ca:	bf00      	nop
    69cc:	20000c14 	.word	0x20000c14
    69d0:	000068d9 	.word	0x000068d9

000069d4 <SERCOM4_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_3_Handler(void)
{
    69d4:	b580      	push	{r7, lr}
    69d6:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    69d8:	4b03      	ldr	r3, [pc, #12]	; (69e8 <SERCOM4_3_Handler+0x14>)
    69da:	681b      	ldr	r3, [r3, #0]
    69dc:	4618      	mov	r0, r3
    69de:	4b03      	ldr	r3, [pc, #12]	; (69ec <SERCOM4_3_Handler+0x18>)
    69e0:	4798      	blx	r3
}
    69e2:	bf00      	nop
    69e4:	bd80      	pop	{r7, pc}
    69e6:	bf00      	nop
    69e8:	20000c14 	.word	0x20000c14
    69ec:	000068d9 	.word	0x000068d9

000069f0 <SERCOM5_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_0_Handler(void)
{
    69f0:	b580      	push	{r7, lr}
    69f2:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    69f4:	4b03      	ldr	r3, [pc, #12]	; (6a04 <SERCOM5_0_Handler+0x14>)
    69f6:	681b      	ldr	r3, [r3, #0]
    69f8:	4618      	mov	r0, r3
    69fa:	4b03      	ldr	r3, [pc, #12]	; (6a08 <SERCOM5_0_Handler+0x18>)
    69fc:	4798      	blx	r3
}
    69fe:	bf00      	nop
    6a00:	bd80      	pop	{r7, pc}
    6a02:	bf00      	nop
    6a04:	20000c18 	.word	0x20000c18
    6a08:	0000620d 	.word	0x0000620d

00006a0c <SERCOM5_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_1_Handler(void)
{
    6a0c:	b580      	push	{r7, lr}
    6a0e:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    6a10:	4b03      	ldr	r3, [pc, #12]	; (6a20 <SERCOM5_1_Handler+0x14>)
    6a12:	681b      	ldr	r3, [r3, #0]
    6a14:	4618      	mov	r0, r3
    6a16:	4b03      	ldr	r3, [pc, #12]	; (6a24 <SERCOM5_1_Handler+0x18>)
    6a18:	4798      	blx	r3
}
    6a1a:	bf00      	nop
    6a1c:	bd80      	pop	{r7, pc}
    6a1e:	bf00      	nop
    6a20:	20000c18 	.word	0x20000c18
    6a24:	0000620d 	.word	0x0000620d

00006a28 <SERCOM5_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_2_Handler(void)
{
    6a28:	b580      	push	{r7, lr}
    6a2a:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    6a2c:	4b03      	ldr	r3, [pc, #12]	; (6a3c <SERCOM5_2_Handler+0x14>)
    6a2e:	681b      	ldr	r3, [r3, #0]
    6a30:	4618      	mov	r0, r3
    6a32:	4b03      	ldr	r3, [pc, #12]	; (6a40 <SERCOM5_2_Handler+0x18>)
    6a34:	4798      	blx	r3
}
    6a36:	bf00      	nop
    6a38:	bd80      	pop	{r7, pc}
    6a3a:	bf00      	nop
    6a3c:	20000c18 	.word	0x20000c18
    6a40:	0000620d 	.word	0x0000620d

00006a44 <SERCOM5_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_3_Handler(void)
{
    6a44:	b580      	push	{r7, lr}
    6a46:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    6a48:	4b03      	ldr	r3, [pc, #12]	; (6a58 <SERCOM5_3_Handler+0x14>)
    6a4a:	681b      	ldr	r3, [r3, #0]
    6a4c:	4618      	mov	r0, r3
    6a4e:	4b03      	ldr	r3, [pc, #12]	; (6a5c <SERCOM5_3_Handler+0x18>)
    6a50:	4798      	blx	r3
}
    6a52:	bf00      	nop
    6a54:	bd80      	pop	{r7, pc}
    6a56:	bf00      	nop
    6a58:	20000c18 	.word	0x20000c18
    6a5c:	0000620d 	.word	0x0000620d

00006a60 <SERCOM7_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_0_Handler(void)
{
    6a60:	b580      	push	{r7, lr}
    6a62:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    6a64:	4b03      	ldr	r3, [pc, #12]	; (6a74 <SERCOM7_0_Handler+0x14>)
    6a66:	681b      	ldr	r3, [r3, #0]
    6a68:	4618      	mov	r0, r3
    6a6a:	4b03      	ldr	r3, [pc, #12]	; (6a78 <SERCOM7_0_Handler+0x18>)
    6a6c:	4798      	blx	r3
}
    6a6e:	bf00      	nop
    6a70:	bd80      	pop	{r7, pc}
    6a72:	bf00      	nop
    6a74:	20000c1c 	.word	0x20000c1c
    6a78:	0000620d 	.word	0x0000620d

00006a7c <SERCOM7_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_1_Handler(void)
{
    6a7c:	b580      	push	{r7, lr}
    6a7e:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    6a80:	4b03      	ldr	r3, [pc, #12]	; (6a90 <SERCOM7_1_Handler+0x14>)
    6a82:	681b      	ldr	r3, [r3, #0]
    6a84:	4618      	mov	r0, r3
    6a86:	4b03      	ldr	r3, [pc, #12]	; (6a94 <SERCOM7_1_Handler+0x18>)
    6a88:	4798      	blx	r3
}
    6a8a:	bf00      	nop
    6a8c:	bd80      	pop	{r7, pc}
    6a8e:	bf00      	nop
    6a90:	20000c1c 	.word	0x20000c1c
    6a94:	0000620d 	.word	0x0000620d

00006a98 <SERCOM7_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_2_Handler(void)
{
    6a98:	b580      	push	{r7, lr}
    6a9a:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    6a9c:	4b03      	ldr	r3, [pc, #12]	; (6aac <SERCOM7_2_Handler+0x14>)
    6a9e:	681b      	ldr	r3, [r3, #0]
    6aa0:	4618      	mov	r0, r3
    6aa2:	4b03      	ldr	r3, [pc, #12]	; (6ab0 <SERCOM7_2_Handler+0x18>)
    6aa4:	4798      	blx	r3
}
    6aa6:	bf00      	nop
    6aa8:	bd80      	pop	{r7, pc}
    6aaa:	bf00      	nop
    6aac:	20000c1c 	.word	0x20000c1c
    6ab0:	0000620d 	.word	0x0000620d

00006ab4 <SERCOM7_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_3_Handler(void)
{
    6ab4:	b580      	push	{r7, lr}
    6ab6:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    6ab8:	4b03      	ldr	r3, [pc, #12]	; (6ac8 <SERCOM7_3_Handler+0x14>)
    6aba:	681b      	ldr	r3, [r3, #0]
    6abc:	4618      	mov	r0, r3
    6abe:	4b03      	ldr	r3, [pc, #12]	; (6acc <SERCOM7_3_Handler+0x18>)
    6ac0:	4798      	blx	r3
}
    6ac2:	bf00      	nop
    6ac4:	bd80      	pop	{r7, pc}
    6ac6:	bf00      	nop
    6ac8:	20000c1c 	.word	0x20000c1c
    6acc:	0000620d 	.word	0x0000620d

00006ad0 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    6ad0:	b580      	push	{r7, lr}
    6ad2:	b084      	sub	sp, #16
    6ad4:	af00      	add	r7, sp, #0
    6ad6:	6078      	str	r0, [r7, #4]
    6ad8:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    6ada:	683b      	ldr	r3, [r7, #0]
    6adc:	4618      	mov	r0, r3
    6ade:	4b35      	ldr	r3, [pc, #212]	; (6bb4 <_spi_m_sync_init+0xe4>)
    6ae0:	4798      	blx	r3
    6ae2:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    6ae4:	687b      	ldr	r3, [r7, #4]
    6ae6:	2b00      	cmp	r3, #0
    6ae8:	d004      	beq.n	6af4 <_spi_m_sync_init+0x24>
    6aea:	683b      	ldr	r3, [r7, #0]
    6aec:	2b00      	cmp	r3, #0
    6aee:	d001      	beq.n	6af4 <_spi_m_sync_init+0x24>
    6af0:	2301      	movs	r3, #1
    6af2:	e000      	b.n	6af6 <_spi_m_sync_init+0x26>
    6af4:	2300      	movs	r3, #0
    6af6:	f003 0301 	and.w	r3, r3, #1
    6afa:	b2db      	uxtb	r3, r3
    6afc:	f640 12e9 	movw	r2, #2537	; 0x9e9
    6b00:	492d      	ldr	r1, [pc, #180]	; (6bb8 <_spi_m_sync_init+0xe8>)
    6b02:	4618      	mov	r0, r3
    6b04:	4b2d      	ldr	r3, [pc, #180]	; (6bbc <_spi_m_sync_init+0xec>)
    6b06:	4798      	blx	r3

	if (regs == NULL) {
    6b08:	68fb      	ldr	r3, [r7, #12]
    6b0a:	2b00      	cmp	r3, #0
    6b0c:	d102      	bne.n	6b14 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    6b0e:	f06f 030c 	mvn.w	r3, #12
    6b12:	e04a      	b.n	6baa <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    6b14:	2101      	movs	r1, #1
    6b16:	6838      	ldr	r0, [r7, #0]
    6b18:	4b29      	ldr	r3, [pc, #164]	; (6bc0 <_spi_m_sync_init+0xf0>)
    6b1a:	4798      	blx	r3
    6b1c:	4603      	mov	r3, r0
    6b1e:	f083 0301 	eor.w	r3, r3, #1
    6b22:	b2db      	uxtb	r3, r3
    6b24:	2b00      	cmp	r3, #0
    6b26:	d019      	beq.n	6b5c <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    6b28:	68fb      	ldr	r3, [r7, #12]
    6b2a:	681b      	ldr	r3, [r3, #0]
    6b2c:	f003 031c 	and.w	r3, r3, #28
    6b30:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    6b32:	2102      	movs	r1, #2
    6b34:	6838      	ldr	r0, [r7, #0]
    6b36:	4b23      	ldr	r3, [pc, #140]	; (6bc4 <_spi_m_sync_init+0xf4>)
    6b38:	4798      	blx	r3
    6b3a:	4603      	mov	r3, r0
    6b3c:	2b00      	cmp	r3, #0
    6b3e:	d006      	beq.n	6b4e <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    6b40:	6838      	ldr	r0, [r7, #0]
    6b42:	4b21      	ldr	r3, [pc, #132]	; (6bc8 <_spi_m_sync_init+0xf8>)
    6b44:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    6b46:	2102      	movs	r1, #2
    6b48:	6838      	ldr	r0, [r7, #0]
    6b4a:	4b20      	ldr	r3, [pc, #128]	; (6bcc <_spi_m_sync_init+0xfc>)
    6b4c:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    6b4e:	68bb      	ldr	r3, [r7, #8]
    6b50:	f043 0301 	orr.w	r3, r3, #1
    6b54:	4619      	mov	r1, r3
    6b56:	6838      	ldr	r0, [r7, #0]
    6b58:	4b1d      	ldr	r3, [pc, #116]	; (6bd0 <_spi_m_sync_init+0x100>)
    6b5a:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    6b5c:	2101      	movs	r1, #1
    6b5e:	6838      	ldr	r0, [r7, #0]
    6b60:	4b1a      	ldr	r3, [pc, #104]	; (6bcc <_spi_m_sync_init+0xfc>)
    6b62:	4798      	blx	r3

	dev->prvt = hw;
    6b64:	687b      	ldr	r3, [r7, #4]
    6b66:	683a      	ldr	r2, [r7, #0]
    6b68:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    6b6a:	68fb      	ldr	r3, [r7, #12]
    6b6c:	681b      	ldr	r3, [r3, #0]
    6b6e:	f003 031c 	and.w	r3, r3, #28
    6b72:	2b08      	cmp	r3, #8
    6b74:	d104      	bne.n	6b80 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    6b76:	68f9      	ldr	r1, [r7, #12]
    6b78:	6838      	ldr	r0, [r7, #0]
    6b7a:	4b16      	ldr	r3, [pc, #88]	; (6bd4 <_spi_m_sync_init+0x104>)
    6b7c:	4798      	blx	r3
    6b7e:	e003      	b.n	6b88 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    6b80:	68f9      	ldr	r1, [r7, #12]
    6b82:	6838      	ldr	r0, [r7, #0]
    6b84:	4b14      	ldr	r3, [pc, #80]	; (6bd8 <_spi_m_sync_init+0x108>)
    6b86:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    6b88:	68fb      	ldr	r3, [r7, #12]
    6b8a:	685b      	ldr	r3, [r3, #4]
    6b8c:	f003 0307 	and.w	r3, r3, #7
    6b90:	2b00      	cmp	r3, #0
    6b92:	d101      	bne.n	6b98 <_spi_m_sync_init+0xc8>
    6b94:	2201      	movs	r2, #1
    6b96:	e000      	b.n	6b9a <_spi_m_sync_init+0xca>
    6b98:	2202      	movs	r2, #2
    6b9a:	687b      	ldr	r3, [r7, #4]
    6b9c:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    6b9e:	68fb      	ldr	r3, [r7, #12]
    6ba0:	89db      	ldrh	r3, [r3, #14]
    6ba2:	b29a      	uxth	r2, r3
    6ba4:	687b      	ldr	r3, [r7, #4]
    6ba6:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    6ba8:	2300      	movs	r3, #0
}
    6baa:	4618      	mov	r0, r3
    6bac:	3710      	adds	r7, #16
    6bae:	46bd      	mov	sp, r7
    6bb0:	bd80      	pop	{r7, pc}
    6bb2:	bf00      	nop
    6bb4:	0000687d 	.word	0x0000687d
    6bb8:	00013134 	.word	0x00013134
    6bbc:	00002edd 	.word	0x00002edd
    6bc0:	000058cd 	.word	0x000058cd
    6bc4:	00005b85 	.word	0x00005b85
    6bc8:	00005b5d 	.word	0x00005b5d
    6bcc:	000058a9 	.word	0x000058a9
    6bd0:	00005bb5 	.word	0x00005bb5
    6bd4:	000067d1 	.word	0x000067d1
    6bd8:	0000673d 	.word	0x0000673d

00006bdc <_spi_m_async_init>:
{
	return _spi_m_sync_init(dev, hw);
}

int32_t _spi_m_async_init(struct _spi_async_dev *dev, void *const hw)
{
    6bdc:	b580      	push	{r7, lr}
    6bde:	b086      	sub	sp, #24
    6be0:	af00      	add	r7, sp, #0
    6be2:	6078      	str	r0, [r7, #4]
    6be4:	6039      	str	r1, [r7, #0]
	struct _spi_async_dev *spid = dev;
    6be6:	687b      	ldr	r3, [r7, #4]
    6be8:	60fb      	str	r3, [r7, #12]
	/* Do hardware initialize. */
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    6bea:	6839      	ldr	r1, [r7, #0]
    6bec:	6878      	ldr	r0, [r7, #4]
    6bee:	4b1a      	ldr	r3, [pc, #104]	; (6c58 <_spi_m_async_init+0x7c>)
    6bf0:	4798      	blx	r3
    6bf2:	60b8      	str	r0, [r7, #8]

	if (rc < 0) {
    6bf4:	68bb      	ldr	r3, [r7, #8]
    6bf6:	2b00      	cmp	r3, #0
    6bf8:	da01      	bge.n	6bfe <_spi_m_async_init+0x22>
		return rc;
    6bfa:	68bb      	ldr	r3, [r7, #8]
    6bfc:	e028      	b.n	6c50 <_spi_m_async_init+0x74>
	}

	_sercom_init_irq_param(hw, (void *)dev);
    6bfe:	6879      	ldr	r1, [r7, #4]
    6c00:	6838      	ldr	r0, [r7, #0]
    6c02:	4b16      	ldr	r3, [pc, #88]	; (6c5c <_spi_m_async_init+0x80>)
    6c04:	4798      	blx	r3
	/* Initialize callbacks: must use them */
	spid->callbacks.complete = NULL;
    6c06:	68fb      	ldr	r3, [r7, #12]
    6c08:	2200      	movs	r2, #0
    6c0a:	611a      	str	r2, [r3, #16]
	spid->callbacks.rx       = NULL;
    6c0c:	68fb      	ldr	r3, [r7, #12]
    6c0e:	2200      	movs	r2, #0
    6c10:	60da      	str	r2, [r3, #12]
	spid->callbacks.tx       = NULL;
    6c12:	68fb      	ldr	r3, [r7, #12]
    6c14:	2200      	movs	r2, #0
    6c16:	609a      	str	r2, [r3, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    6c18:	6838      	ldr	r0, [r7, #0]
    6c1a:	4b11      	ldr	r3, [pc, #68]	; (6c60 <_spi_m_async_init+0x84>)
    6c1c:	4798      	blx	r3
    6c1e:	4603      	mov	r3, r0
    6c20:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    6c22:	2300      	movs	r3, #0
    6c24:	613b      	str	r3, [r7, #16]
    6c26:	e00f      	b.n	6c48 <_spi_m_async_init+0x6c>
		NVIC_DisableIRQ((IRQn_Type)irq);
    6c28:	7dfb      	ldrb	r3, [r7, #23]
    6c2a:	b21b      	sxth	r3, r3
    6c2c:	4618      	mov	r0, r3
    6c2e:	4b0d      	ldr	r3, [pc, #52]	; (6c64 <_spi_m_async_init+0x88>)
    6c30:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    6c32:	7dfb      	ldrb	r3, [r7, #23]
    6c34:	b21b      	sxth	r3, r3
    6c36:	4618      	mov	r0, r3
    6c38:	4b0b      	ldr	r3, [pc, #44]	; (6c68 <_spi_m_async_init+0x8c>)
    6c3a:	4798      	blx	r3
		irq++;
    6c3c:	7dfb      	ldrb	r3, [r7, #23]
    6c3e:	3301      	adds	r3, #1
    6c40:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    6c42:	693b      	ldr	r3, [r7, #16]
    6c44:	3301      	adds	r3, #1
    6c46:	613b      	str	r3, [r7, #16]
    6c48:	693b      	ldr	r3, [r7, #16]
    6c4a:	2b03      	cmp	r3, #3
    6c4c:	d9ec      	bls.n	6c28 <_spi_m_async_init+0x4c>
	}

	return ERR_NONE;
    6c4e:	2300      	movs	r3, #0
}
    6c50:	4618      	mov	r0, r3
    6c52:	3718      	adds	r7, #24
    6c54:	46bd      	mov	sp, r7
    6c56:	bd80      	pop	{r7, pc}
    6c58:	00006ad1 	.word	0x00006ad1
    6c5c:	00005f05 	.word	0x00005f05
    6c60:	00006311 	.word	0x00006311
    6c64:	000057dd 	.word	0x000057dd
    6c68:	00005821 	.word	0x00005821

00006c6c <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    6c6c:	b580      	push	{r7, lr}
    6c6e:	b082      	sub	sp, #8
    6c70:	af00      	add	r7, sp, #0
    6c72:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    6c74:	bf00      	nop
    6c76:	2103      	movs	r1, #3
    6c78:	6878      	ldr	r0, [r7, #4]
    6c7a:	4b06      	ldr	r3, [pc, #24]	; (6c94 <_spi_wait_bus_idle+0x28>)
    6c7c:	4798      	blx	r3
    6c7e:	4603      	mov	r3, r0
    6c80:	2b00      	cmp	r3, #0
    6c82:	d0f8      	beq.n	6c76 <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    6c84:	2103      	movs	r1, #3
    6c86:	6878      	ldr	r0, [r7, #4]
    6c88:	4b03      	ldr	r3, [pc, #12]	; (6c98 <_spi_wait_bus_idle+0x2c>)
    6c8a:	4798      	blx	r3
}
    6c8c:	bf00      	nop
    6c8e:	3708      	adds	r7, #8
    6c90:	46bd      	mov	sp, r7
    6c92:	bd80      	pop	{r7, pc}
    6c94:	00005961 	.word	0x00005961
    6c98:	000059a3 	.word	0x000059a3

00006c9c <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    6c9c:	b580      	push	{r7, lr}
    6c9e:	b086      	sub	sp, #24
    6ca0:	af00      	add	r7, sp, #0
    6ca2:	60f8      	str	r0, [r7, #12]
    6ca4:	60b9      	str	r1, [r7, #8]
    6ca6:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    6ca8:	68bb      	ldr	r3, [r7, #8]
    6caa:	f003 0304 	and.w	r3, r3, #4
    6cae:	2b00      	cmp	r3, #0
    6cb0:	d101      	bne.n	6cb6 <_spi_rx_check_and_receive+0x1a>
		return false;
    6cb2:	2300      	movs	r3, #0
    6cb4:	e022      	b.n	6cfc <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    6cb6:	68f8      	ldr	r0, [r7, #12]
    6cb8:	4b12      	ldr	r3, [pc, #72]	; (6d04 <_spi_rx_check_and_receive+0x68>)
    6cba:	4798      	blx	r3
    6cbc:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    6cbe:	687b      	ldr	r3, [r7, #4]
    6cc0:	685b      	ldr	r3, [r3, #4]
    6cc2:	2b00      	cmp	r3, #0
    6cc4:	d014      	beq.n	6cf0 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    6cc6:	687b      	ldr	r3, [r7, #4]
    6cc8:	685b      	ldr	r3, [r3, #4]
    6cca:	1c59      	adds	r1, r3, #1
    6ccc:	687a      	ldr	r2, [r7, #4]
    6cce:	6051      	str	r1, [r2, #4]
    6cd0:	697a      	ldr	r2, [r7, #20]
    6cd2:	b2d2      	uxtb	r2, r2
    6cd4:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    6cd6:	687b      	ldr	r3, [r7, #4]
    6cd8:	7c1b      	ldrb	r3, [r3, #16]
    6cda:	2b01      	cmp	r3, #1
    6cdc:	d908      	bls.n	6cf0 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    6cde:	687b      	ldr	r3, [r7, #4]
    6ce0:	685b      	ldr	r3, [r3, #4]
    6ce2:	1c59      	adds	r1, r3, #1
    6ce4:	687a      	ldr	r2, [r7, #4]
    6ce6:	6051      	str	r1, [r2, #4]
    6ce8:	697a      	ldr	r2, [r7, #20]
    6cea:	0a12      	lsrs	r2, r2, #8
    6cec:	b2d2      	uxtb	r2, r2
    6cee:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    6cf0:	687b      	ldr	r3, [r7, #4]
    6cf2:	68db      	ldr	r3, [r3, #12]
    6cf4:	1c5a      	adds	r2, r3, #1
    6cf6:	687b      	ldr	r3, [r7, #4]
    6cf8:	60da      	str	r2, [r3, #12]

	return true;
    6cfa:	2301      	movs	r3, #1
}
    6cfc:	4618      	mov	r0, r3
    6cfe:	3718      	adds	r7, #24
    6d00:	46bd      	mov	sp, r7
    6d02:	bd80      	pop	{r7, pc}
    6d04:	00005e2d 	.word	0x00005e2d

00006d08 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    6d08:	b580      	push	{r7, lr}
    6d0a:	b086      	sub	sp, #24
    6d0c:	af00      	add	r7, sp, #0
    6d0e:	60f8      	str	r0, [r7, #12]
    6d10:	60b9      	str	r1, [r7, #8]
    6d12:	607a      	str	r2, [r7, #4]
    6d14:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    6d16:	68bb      	ldr	r3, [r7, #8]
    6d18:	f003 0301 	and.w	r3, r3, #1
    6d1c:	2b00      	cmp	r3, #0
    6d1e:	d028      	beq.n	6d72 <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    6d20:	687b      	ldr	r3, [r7, #4]
    6d22:	681b      	ldr	r3, [r3, #0]
    6d24:	2b00      	cmp	r3, #0
    6d26:	d018      	beq.n	6d5a <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    6d28:	687b      	ldr	r3, [r7, #4]
    6d2a:	681b      	ldr	r3, [r3, #0]
    6d2c:	1c59      	adds	r1, r3, #1
    6d2e:	687a      	ldr	r2, [r7, #4]
    6d30:	6011      	str	r1, [r2, #0]
    6d32:	781b      	ldrb	r3, [r3, #0]
    6d34:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    6d36:	687b      	ldr	r3, [r7, #4]
    6d38:	7c1b      	ldrb	r3, [r3, #16]
    6d3a:	2b01      	cmp	r3, #1
    6d3c:	d90f      	bls.n	6d5e <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    6d3e:	687b      	ldr	r3, [r7, #4]
    6d40:	681b      	ldr	r3, [r3, #0]
    6d42:	781b      	ldrb	r3, [r3, #0]
    6d44:	021b      	lsls	r3, r3, #8
    6d46:	461a      	mov	r2, r3
    6d48:	697b      	ldr	r3, [r7, #20]
    6d4a:	4313      	orrs	r3, r2
    6d4c:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    6d4e:	687b      	ldr	r3, [r7, #4]
    6d50:	681b      	ldr	r3, [r3, #0]
    6d52:	1c5a      	adds	r2, r3, #1
    6d54:	687b      	ldr	r3, [r7, #4]
    6d56:	601a      	str	r2, [r3, #0]
    6d58:	e001      	b.n	6d5e <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    6d5a:	887b      	ldrh	r3, [r7, #2]
    6d5c:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    6d5e:	687b      	ldr	r3, [r7, #4]
    6d60:	689b      	ldr	r3, [r3, #8]
    6d62:	1c5a      	adds	r2, r3, #1
    6d64:	687b      	ldr	r3, [r7, #4]
    6d66:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    6d68:	6979      	ldr	r1, [r7, #20]
    6d6a:	68f8      	ldr	r0, [r7, #12]
    6d6c:	4b03      	ldr	r3, [pc, #12]	; (6d7c <_spi_tx_check_and_send+0x74>)
    6d6e:	4798      	blx	r3
    6d70:	e000      	b.n	6d74 <_spi_tx_check_and_send+0x6c>
		return;
    6d72:	bf00      	nop
}
    6d74:	3718      	adds	r7, #24
    6d76:	46bd      	mov	sp, r7
    6d78:	bd80      	pop	{r7, pc}
    6d7a:	bf00      	nop
    6d7c:	00005e11 	.word	0x00005e11

00006d80 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    6d80:	b580      	push	{r7, lr}
    6d82:	b082      	sub	sp, #8
    6d84:	af00      	add	r7, sp, #0
    6d86:	6078      	str	r0, [r7, #4]
    6d88:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    6d8a:	687b      	ldr	r3, [r7, #4]
    6d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    6d90:	2b00      	cmp	r3, #0
    6d92:	d00b      	beq.n	6dac <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    6d94:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6d98:	6838      	ldr	r0, [r7, #0]
    6d9a:	4b07      	ldr	r3, [pc, #28]	; (6db8 <_spi_err_check+0x38>)
    6d9c:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    6d9e:	2180      	movs	r1, #128	; 0x80
    6da0:	6838      	ldr	r0, [r7, #0]
    6da2:	4b06      	ldr	r3, [pc, #24]	; (6dbc <_spi_err_check+0x3c>)
    6da4:	4798      	blx	r3
		return ERR_OVERFLOW;
    6da6:	f06f 0312 	mvn.w	r3, #18
    6daa:	e000      	b.n	6dae <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    6dac:	2300      	movs	r3, #0
}
    6dae:	4618      	mov	r0, r3
    6db0:	3708      	adds	r7, #8
    6db2:	46bd      	mov	sp, r7
    6db4:	bd80      	pop	{r7, pc}
    6db6:	bf00      	nop
    6db8:	00005e65 	.word	0x00005e65
    6dbc:	000059a3 	.word	0x000059a3

00006dc0 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    6dc0:	b590      	push	{r4, r7, lr}
    6dc2:	b08b      	sub	sp, #44	; 0x2c
    6dc4:	af00      	add	r7, sp, #0
    6dc6:	6078      	str	r0, [r7, #4]
    6dc8:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    6dca:	687b      	ldr	r3, [r7, #4]
    6dcc:	681b      	ldr	r3, [r3, #0]
    6dce:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    6dd0:	2300      	movs	r3, #0
    6dd2:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    6dd4:	683b      	ldr	r3, [r7, #0]
    6dd6:	681b      	ldr	r3, [r3, #0]
    6dd8:	60bb      	str	r3, [r7, #8]
    6dda:	683b      	ldr	r3, [r7, #0]
    6ddc:	685b      	ldr	r3, [r3, #4]
    6dde:	60fb      	str	r3, [r7, #12]
    6de0:	2300      	movs	r3, #0
    6de2:	613b      	str	r3, [r7, #16]
    6de4:	2300      	movs	r3, #0
    6de6:	617b      	str	r3, [r7, #20]
    6de8:	687b      	ldr	r3, [r7, #4]
    6dea:	791b      	ldrb	r3, [r3, #4]
    6dec:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    6dee:	687b      	ldr	r3, [r7, #4]
    6df0:	2b00      	cmp	r3, #0
    6df2:	d004      	beq.n	6dfe <_spi_m_sync_trans+0x3e>
    6df4:	6a3b      	ldr	r3, [r7, #32]
    6df6:	2b00      	cmp	r3, #0
    6df8:	d001      	beq.n	6dfe <_spi_m_sync_trans+0x3e>
    6dfa:	2301      	movs	r3, #1
    6dfc:	e000      	b.n	6e00 <_spi_m_sync_trans+0x40>
    6dfe:	2300      	movs	r3, #0
    6e00:	f003 0301 	and.w	r3, r3, #1
    6e04:	b2db      	uxtb	r3, r3
    6e06:	f640 324d 	movw	r2, #2893	; 0xb4d
    6e0a:	492b      	ldr	r1, [pc, #172]	; (6eb8 <_spi_m_sync_trans+0xf8>)
    6e0c:	4618      	mov	r0, r3
    6e0e:	4b2b      	ldr	r3, [pc, #172]	; (6ebc <_spi_m_sync_trans+0xfc>)
    6e10:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    6e12:	2107      	movs	r1, #7
    6e14:	6a38      	ldr	r0, [r7, #32]
    6e16:	4b2a      	ldr	r3, [pc, #168]	; (6ec0 <_spi_m_sync_trans+0x100>)
    6e18:	4798      	blx	r3
    6e1a:	4603      	mov	r3, r0
    6e1c:	2b00      	cmp	r3, #0
    6e1e:	d002      	beq.n	6e26 <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    6e20:	f06f 0303 	mvn.w	r3, #3
    6e24:	e043      	b.n	6eae <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    6e26:	6a38      	ldr	r0, [r7, #32]
    6e28:	4b26      	ldr	r3, [pc, #152]	; (6ec4 <_spi_m_sync_trans+0x104>)
    6e2a:	4798      	blx	r3
    6e2c:	4603      	mov	r3, r0
    6e2e:	f083 0301 	eor.w	r3, r3, #1
    6e32:	b2db      	uxtb	r3, r3
    6e34:	2b00      	cmp	r3, #0
    6e36:	d002      	beq.n	6e3e <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    6e38:	f06f 0313 	mvn.w	r3, #19
    6e3c:	e037      	b.n	6eae <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    6e3e:	6a38      	ldr	r0, [r7, #32]
    6e40:	4b21      	ldr	r3, [pc, #132]	; (6ec8 <_spi_m_sync_trans+0x108>)
    6e42:	4798      	blx	r3
    6e44:	4603      	mov	r3, r0
    6e46:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    6e48:	f107 0308 	add.w	r3, r7, #8
    6e4c:	461a      	mov	r2, r3
    6e4e:	69f9      	ldr	r1, [r7, #28]
    6e50:	6a38      	ldr	r0, [r7, #32]
    6e52:	4b1e      	ldr	r3, [pc, #120]	; (6ecc <_spi_m_sync_trans+0x10c>)
    6e54:	4798      	blx	r3
    6e56:	4603      	mov	r3, r0
    6e58:	f083 0301 	eor.w	r3, r3, #1
    6e5c:	b2db      	uxtb	r3, r3
    6e5e:	2b00      	cmp	r3, #0
    6e60:	d00b      	beq.n	6e7a <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    6e62:	697a      	ldr	r2, [r7, #20]
    6e64:	693b      	ldr	r3, [r7, #16]
    6e66:	429a      	cmp	r2, r3
    6e68:	d307      	bcc.n	6e7a <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    6e6a:	687b      	ldr	r3, [r7, #4]
    6e6c:	88db      	ldrh	r3, [r3, #6]
    6e6e:	f107 0208 	add.w	r2, r7, #8
    6e72:	69f9      	ldr	r1, [r7, #28]
    6e74:	6a38      	ldr	r0, [r7, #32]
    6e76:	4c16      	ldr	r4, [pc, #88]	; (6ed0 <_spi_m_sync_trans+0x110>)
    6e78:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    6e7a:	6a39      	ldr	r1, [r7, #32]
    6e7c:	69f8      	ldr	r0, [r7, #28]
    6e7e:	4b15      	ldr	r3, [pc, #84]	; (6ed4 <_spi_m_sync_trans+0x114>)
    6e80:	4798      	blx	r3
    6e82:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    6e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6e86:	2b00      	cmp	r3, #0
    6e88:	db0c      	blt.n	6ea4 <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    6e8a:	693a      	ldr	r2, [r7, #16]
    6e8c:	683b      	ldr	r3, [r7, #0]
    6e8e:	689b      	ldr	r3, [r3, #8]
    6e90:	429a      	cmp	r2, r3
    6e92:	d3d4      	bcc.n	6e3e <_spi_m_sync_trans+0x7e>
    6e94:	697a      	ldr	r2, [r7, #20]
    6e96:	683b      	ldr	r3, [r7, #0]
    6e98:	689b      	ldr	r3, [r3, #8]
    6e9a:	429a      	cmp	r2, r3
    6e9c:	d3cf      	bcc.n	6e3e <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    6e9e:	693b      	ldr	r3, [r7, #16]
    6ea0:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    6ea2:	e000      	b.n	6ea6 <_spi_m_sync_trans+0xe6>
			break;
    6ea4:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    6ea6:	6a38      	ldr	r0, [r7, #32]
    6ea8:	4b0b      	ldr	r3, [pc, #44]	; (6ed8 <_spi_m_sync_trans+0x118>)
    6eaa:	4798      	blx	r3

	return rc;
    6eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    6eae:	4618      	mov	r0, r3
    6eb0:	372c      	adds	r7, #44	; 0x2c
    6eb2:	46bd      	mov	sp, r7
    6eb4:	bd90      	pop	{r4, r7, pc}
    6eb6:	bf00      	nop
    6eb8:	00013134 	.word	0x00013134
    6ebc:	00002edd 	.word	0x00002edd
    6ec0:	000058cd 	.word	0x000058cd
    6ec4:	00005b25 	.word	0x00005b25
    6ec8:	00005989 	.word	0x00005989
    6ecc:	00006c9d 	.word	0x00006c9d
    6ed0:	00006d09 	.word	0x00006d09
    6ed4:	00006d81 	.word	0x00006d81
    6ed8:	00006c6d 	.word	0x00006c6d

00006edc <_spi_m_async_enable_tx>:

int32_t _spi_m_async_enable_tx(struct _spi_async_dev *dev, bool state)
{
    6edc:	b580      	push	{r7, lr}
    6ede:	b084      	sub	sp, #16
    6ee0:	af00      	add	r7, sp, #0
    6ee2:	6078      	str	r0, [r7, #4]
    6ee4:	460b      	mov	r3, r1
    6ee6:	70fb      	strb	r3, [r7, #3]
	void *hw = dev->prvt;
    6ee8:	687b      	ldr	r3, [r7, #4]
    6eea:	681b      	ldr	r3, [r3, #0]
    6eec:	60fb      	str	r3, [r7, #12]

	ASSERT(dev && hw);
    6eee:	687b      	ldr	r3, [r7, #4]
    6ef0:	2b00      	cmp	r3, #0
    6ef2:	d004      	beq.n	6efe <_spi_m_async_enable_tx+0x22>
    6ef4:	68fb      	ldr	r3, [r7, #12]
    6ef6:	2b00      	cmp	r3, #0
    6ef8:	d001      	beq.n	6efe <_spi_m_async_enable_tx+0x22>
    6efa:	2301      	movs	r3, #1
    6efc:	e000      	b.n	6f00 <_spi_m_async_enable_tx+0x24>
    6efe:	2300      	movs	r3, #0
    6f00:	f003 0301 	and.w	r3, r3, #1
    6f04:	b2db      	uxtb	r3, r3
    6f06:	f640 3279 	movw	r2, #2937	; 0xb79
    6f0a:	4909      	ldr	r1, [pc, #36]	; (6f30 <_spi_m_async_enable_tx+0x54>)
    6f0c:	4618      	mov	r0, r3
    6f0e:	4b09      	ldr	r3, [pc, #36]	; (6f34 <_spi_m_async_enable_tx+0x58>)
    6f10:	4798      	blx	r3

	if (state) {
    6f12:	78fb      	ldrb	r3, [r7, #3]
    6f14:	2b00      	cmp	r3, #0
    6f16:	d003      	beq.n	6f20 <_spi_m_async_enable_tx+0x44>
		hri_sercomspi_set_INTEN_DRE_bit(hw);
    6f18:	68f8      	ldr	r0, [r7, #12]
    6f1a:	4b07      	ldr	r3, [pc, #28]	; (6f38 <_spi_m_async_enable_tx+0x5c>)
    6f1c:	4798      	blx	r3
    6f1e:	e002      	b.n	6f26 <_spi_m_async_enable_tx+0x4a>
	} else {
		hri_sercomspi_clear_INTEN_DRE_bit(hw);
    6f20:	68f8      	ldr	r0, [r7, #12]
    6f22:	4b06      	ldr	r3, [pc, #24]	; (6f3c <_spi_m_async_enable_tx+0x60>)
    6f24:	4798      	blx	r3
	}

	return ERR_NONE;
    6f26:	2300      	movs	r3, #0
}
    6f28:	4618      	mov	r0, r3
    6f2a:	3710      	adds	r7, #16
    6f2c:	46bd      	mov	sp, r7
    6f2e:	bd80      	pop	{r7, pc}
    6f30:	00013134 	.word	0x00013134
    6f34:	00002edd 	.word	0x00002edd
    6f38:	000059c1 	.word	0x000059c1
    6f3c:	000059db 	.word	0x000059db

00006f40 <_spi_m_async_enable_rx>:
{
	return _spi_m_async_enable_tx(dev, state);
}

int32_t _spi_m_async_enable_rx(struct _spi_async_dev *dev, bool state)
{
    6f40:	b580      	push	{r7, lr}
    6f42:	b084      	sub	sp, #16
    6f44:	af00      	add	r7, sp, #0
    6f46:	6078      	str	r0, [r7, #4]
    6f48:	460b      	mov	r3, r1
    6f4a:	70fb      	strb	r3, [r7, #3]
	void *hw = dev->prvt;
    6f4c:	687b      	ldr	r3, [r7, #4]
    6f4e:	681b      	ldr	r3, [r3, #0]
    6f50:	60fb      	str	r3, [r7, #12]

	ASSERT(dev);
    6f52:	687b      	ldr	r3, [r7, #4]
    6f54:	2b00      	cmp	r3, #0
    6f56:	bf14      	ite	ne
    6f58:	2301      	movne	r3, #1
    6f5a:	2300      	moveq	r3, #0
    6f5c:	b2db      	uxtb	r3, r3
    6f5e:	f640 328d 	movw	r2, #2957	; 0xb8d
    6f62:	490f      	ldr	r1, [pc, #60]	; (6fa0 <_spi_m_async_enable_rx+0x60>)
    6f64:	4618      	mov	r0, r3
    6f66:	4b0f      	ldr	r3, [pc, #60]	; (6fa4 <_spi_m_async_enable_rx+0x64>)
    6f68:	4798      	blx	r3
	ASSERT(hw);
    6f6a:	68fb      	ldr	r3, [r7, #12]
    6f6c:	2b00      	cmp	r3, #0
    6f6e:	bf14      	ite	ne
    6f70:	2301      	movne	r3, #1
    6f72:	2300      	moveq	r3, #0
    6f74:	b2db      	uxtb	r3, r3
    6f76:	f640 328e 	movw	r2, #2958	; 0xb8e
    6f7a:	4909      	ldr	r1, [pc, #36]	; (6fa0 <_spi_m_async_enable_rx+0x60>)
    6f7c:	4618      	mov	r0, r3
    6f7e:	4b09      	ldr	r3, [pc, #36]	; (6fa4 <_spi_m_async_enable_rx+0x64>)
    6f80:	4798      	blx	r3

	if (state) {
    6f82:	78fb      	ldrb	r3, [r7, #3]
    6f84:	2b00      	cmp	r3, #0
    6f86:	d003      	beq.n	6f90 <_spi_m_async_enable_rx+0x50>
		hri_sercomspi_set_INTEN_RXC_bit(hw);
    6f88:	68f8      	ldr	r0, [r7, #12]
    6f8a:	4b07      	ldr	r3, [pc, #28]	; (6fa8 <_spi_m_async_enable_rx+0x68>)
    6f8c:	4798      	blx	r3
    6f8e:	e002      	b.n	6f96 <_spi_m_async_enable_rx+0x56>
	} else {
		hri_sercomspi_clear_INTEN_RXC_bit(hw);
    6f90:	68f8      	ldr	r0, [r7, #12]
    6f92:	4b06      	ldr	r3, [pc, #24]	; (6fac <_spi_m_async_enable_rx+0x6c>)
    6f94:	4798      	blx	r3
	}

	return ERR_NONE;
    6f96:	2300      	movs	r3, #0
}
    6f98:	4618      	mov	r0, r3
    6f9a:	3710      	adds	r7, #16
    6f9c:	46bd      	mov	sp, r7
    6f9e:	bd80      	pop	{r7, pc}
    6fa0:	00013134 	.word	0x00013134
    6fa4:	00002edd 	.word	0x00002edd
    6fa8:	00005a29 	.word	0x00005a29
    6fac:	00005a43 	.word	0x00005a43

00006fb0 <_spi_m_async_enable_tx_complete>:
{
	return _spi_m_async_enable_rx(dev, state);
}

int32_t _spi_m_async_enable_tx_complete(struct _spi_async_dev *dev, bool state)
{
    6fb0:	b580      	push	{r7, lr}
    6fb2:	b082      	sub	sp, #8
    6fb4:	af00      	add	r7, sp, #0
    6fb6:	6078      	str	r0, [r7, #4]
    6fb8:	460b      	mov	r3, r1
    6fba:	70fb      	strb	r3, [r7, #3]
	ASSERT(dev && dev->prvt);
    6fbc:	687b      	ldr	r3, [r7, #4]
    6fbe:	2b00      	cmp	r3, #0
    6fc0:	d005      	beq.n	6fce <_spi_m_async_enable_tx_complete+0x1e>
    6fc2:	687b      	ldr	r3, [r7, #4]
    6fc4:	681b      	ldr	r3, [r3, #0]
    6fc6:	2b00      	cmp	r3, #0
    6fc8:	d001      	beq.n	6fce <_spi_m_async_enable_tx_complete+0x1e>
    6fca:	2301      	movs	r3, #1
    6fcc:	e000      	b.n	6fd0 <_spi_m_async_enable_tx_complete+0x20>
    6fce:	2300      	movs	r3, #0
    6fd0:	f003 0301 	and.w	r3, r3, #1
    6fd4:	b2db      	uxtb	r3, r3
    6fd6:	f44f 623a 	mov.w	r2, #2976	; 0xba0
    6fda:	490b      	ldr	r1, [pc, #44]	; (7008 <_spi_m_async_enable_tx_complete+0x58>)
    6fdc:	4618      	mov	r0, r3
    6fde:	4b0b      	ldr	r3, [pc, #44]	; (700c <_spi_m_async_enable_tx_complete+0x5c>)
    6fe0:	4798      	blx	r3

	if (state) {
    6fe2:	78fb      	ldrb	r3, [r7, #3]
    6fe4:	2b00      	cmp	r3, #0
    6fe6:	d005      	beq.n	6ff4 <_spi_m_async_enable_tx_complete+0x44>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    6fe8:	687b      	ldr	r3, [r7, #4]
    6fea:	681b      	ldr	r3, [r3, #0]
    6fec:	4618      	mov	r0, r3
    6fee:	4b08      	ldr	r3, [pc, #32]	; (7010 <_spi_m_async_enable_tx_complete+0x60>)
    6ff0:	4798      	blx	r3
    6ff2:	e004      	b.n	6ffe <_spi_m_async_enable_tx_complete+0x4e>
	} else {
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    6ff4:	687b      	ldr	r3, [r7, #4]
    6ff6:	681b      	ldr	r3, [r3, #0]
    6ff8:	4618      	mov	r0, r3
    6ffa:	4b06      	ldr	r3, [pc, #24]	; (7014 <_spi_m_async_enable_tx_complete+0x64>)
    6ffc:	4798      	blx	r3
	}

	return ERR_NONE;
    6ffe:	2300      	movs	r3, #0
}
    7000:	4618      	mov	r0, r3
    7002:	3708      	adds	r7, #8
    7004:	46bd      	mov	sp, r7
    7006:	bd80      	pop	{r7, pc}
    7008:	00013134 	.word	0x00013134
    700c:	00002edd 	.word	0x00002edd
    7010:	000059f5 	.word	0x000059f5
    7014:	00005a0f 	.word	0x00005a0f

00007018 <_spi_m_async_write_one>:
{
	return _spi_m_async_enable_tx_complete(dev, state);
}

int32_t _spi_m_async_write_one(struct _spi_async_dev *dev, uint16_t data)
{
    7018:	b580      	push	{r7, lr}
    701a:	b082      	sub	sp, #8
    701c:	af00      	add	r7, sp, #0
    701e:	6078      	str	r0, [r7, #4]
    7020:	460b      	mov	r3, r1
    7022:	807b      	strh	r3, [r7, #2]
	ASSERT(dev && dev->prvt);
    7024:	687b      	ldr	r3, [r7, #4]
    7026:	2b00      	cmp	r3, #0
    7028:	d005      	beq.n	7036 <_spi_m_async_write_one+0x1e>
    702a:	687b      	ldr	r3, [r7, #4]
    702c:	681b      	ldr	r3, [r3, #0]
    702e:	2b00      	cmp	r3, #0
    7030:	d001      	beq.n	7036 <_spi_m_async_write_one+0x1e>
    7032:	2301      	movs	r3, #1
    7034:	e000      	b.n	7038 <_spi_m_async_write_one+0x20>
    7036:	2300      	movs	r3, #0
    7038:	f003 0301 	and.w	r3, r3, #1
    703c:	b2db      	uxtb	r3, r3
    703e:	f640 32b2 	movw	r2, #2994	; 0xbb2
    7042:	4908      	ldr	r1, [pc, #32]	; (7064 <_spi_m_async_write_one+0x4c>)
    7044:	4618      	mov	r0, r3
    7046:	4b08      	ldr	r3, [pc, #32]	; (7068 <_spi_m_async_write_one+0x50>)
    7048:	4798      	blx	r3

	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    704a:	687b      	ldr	r3, [r7, #4]
    704c:	681b      	ldr	r3, [r3, #0]
    704e:	887a      	ldrh	r2, [r7, #2]
    7050:	4611      	mov	r1, r2
    7052:	4618      	mov	r0, r3
    7054:	4b05      	ldr	r3, [pc, #20]	; (706c <_spi_m_async_write_one+0x54>)
    7056:	4798      	blx	r3

	return ERR_NONE;
    7058:	2300      	movs	r3, #0
}
    705a:	4618      	mov	r0, r3
    705c:	3708      	adds	r7, #8
    705e:	46bd      	mov	sp, r7
    7060:	bd80      	pop	{r7, pc}
    7062:	bf00      	nop
    7064:	00013134 	.word	0x00013134
    7068:	00002edd 	.word	0x00002edd
    706c:	00005e11 	.word	0x00005e11

00007070 <_spi_m_async_read_one>:

	return ERR_NONE;
}

uint16_t _spi_m_async_read_one(struct _spi_async_dev *dev)
{
    7070:	b580      	push	{r7, lr}
    7072:	b082      	sub	sp, #8
    7074:	af00      	add	r7, sp, #0
    7076:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    7078:	687b      	ldr	r3, [r7, #4]
    707a:	2b00      	cmp	r3, #0
    707c:	d005      	beq.n	708a <_spi_m_async_read_one+0x1a>
    707e:	687b      	ldr	r3, [r7, #4]
    7080:	681b      	ldr	r3, [r3, #0]
    7082:	2b00      	cmp	r3, #0
    7084:	d001      	beq.n	708a <_spi_m_async_read_one+0x1a>
    7086:	2301      	movs	r3, #1
    7088:	e000      	b.n	708c <_spi_m_async_read_one+0x1c>
    708a:	2300      	movs	r3, #0
    708c:	f003 0301 	and.w	r3, r3, #1
    7090:	b2db      	uxtb	r3, r3
    7092:	f640 32cd 	movw	r2, #3021	; 0xbcd
    7096:	4907      	ldr	r1, [pc, #28]	; (70b4 <_spi_m_async_read_one+0x44>)
    7098:	4618      	mov	r0, r3
    709a:	4b07      	ldr	r3, [pc, #28]	; (70b8 <_spi_m_async_read_one+0x48>)
    709c:	4798      	blx	r3

	return hri_sercomspi_read_DATA_reg(dev->prvt);
    709e:	687b      	ldr	r3, [r7, #4]
    70a0:	681b      	ldr	r3, [r3, #0]
    70a2:	4618      	mov	r0, r3
    70a4:	4b05      	ldr	r3, [pc, #20]	; (70bc <_spi_m_async_read_one+0x4c>)
    70a6:	4798      	blx	r3
    70a8:	4603      	mov	r3, r0
    70aa:	b29b      	uxth	r3, r3
}
    70ac:	4618      	mov	r0, r3
    70ae:	3708      	adds	r7, #8
    70b0:	46bd      	mov	sp, r7
    70b2:	bd80      	pop	{r7, pc}
    70b4:	00013134 	.word	0x00013134
    70b8:	00002edd 	.word	0x00002edd
    70bc:	00005e2d 	.word	0x00005e2d

000070c0 <_spi_m_async_register_callback>:
	return hri_sercomspi_read_DATA_reg(dev->prvt);
}

int32_t _spi_m_async_register_callback(struct _spi_async_dev *dev, const enum _spi_async_dev_cb_type cb_type,
                                       const FUNC_PTR func)
{
    70c0:	b580      	push	{r7, lr}
    70c2:	b086      	sub	sp, #24
    70c4:	af00      	add	r7, sp, #0
    70c6:	60f8      	str	r0, [r7, #12]
    70c8:	460b      	mov	r3, r1
    70ca:	607a      	str	r2, [r7, #4]
    70cc:	72fb      	strb	r3, [r7, #11]
	typedef void (*func_t)(void);
	struct _spi_async_dev *spid = dev;
    70ce:	68fb      	ldr	r3, [r7, #12]
    70d0:	617b      	str	r3, [r7, #20]

	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    70d2:	68fb      	ldr	r3, [r7, #12]
    70d4:	2b00      	cmp	r3, #0
    70d6:	d004      	beq.n	70e2 <_spi_m_async_register_callback+0x22>
    70d8:	7afb      	ldrb	r3, [r7, #11]
    70da:	2b03      	cmp	r3, #3
    70dc:	d801      	bhi.n	70e2 <_spi_m_async_register_callback+0x22>
    70de:	2301      	movs	r3, #1
    70e0:	e000      	b.n	70e4 <_spi_m_async_register_callback+0x24>
    70e2:	2300      	movs	r3, #0
    70e4:	f003 0301 	and.w	r3, r3, #1
    70e8:	b2db      	uxtb	r3, r3
    70ea:	f640 32e6 	movw	r2, #3046	; 0xbe6
    70ee:	4909      	ldr	r1, [pc, #36]	; (7114 <_spi_m_async_register_callback+0x54>)
    70f0:	4618      	mov	r0, r3
    70f2:	4b09      	ldr	r3, [pc, #36]	; (7118 <_spi_m_async_register_callback+0x58>)
    70f4:	4798      	blx	r3

	func_t *p_ls  = (func_t *)&spid->callbacks;
    70f6:	697b      	ldr	r3, [r7, #20]
    70f8:	3308      	adds	r3, #8
    70fa:	613b      	str	r3, [r7, #16]
	p_ls[cb_type] = (func_t)func;
    70fc:	7afb      	ldrb	r3, [r7, #11]
    70fe:	009b      	lsls	r3, r3, #2
    7100:	693a      	ldr	r2, [r7, #16]
    7102:	4413      	add	r3, r2
    7104:	687a      	ldr	r2, [r7, #4]
    7106:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    7108:	2300      	movs	r3, #0
}
    710a:	4618      	mov	r0, r3
    710c:	3718      	adds	r7, #24
    710e:	46bd      	mov	sp, r7
    7110:	bd80      	pop	{r7, pc}
    7112:	bf00      	nop
    7114:	00013134 	.word	0x00013134
    7118:	00002edd 	.word	0x00002edd

0000711c <__NVIC_EnableIRQ>:
{
    711c:	b480      	push	{r7}
    711e:	b083      	sub	sp, #12
    7120:	af00      	add	r7, sp, #0
    7122:	4603      	mov	r3, r0
    7124:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7126:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    712a:	2b00      	cmp	r3, #0
    712c:	db0b      	blt.n	7146 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    712e:	4909      	ldr	r1, [pc, #36]	; (7154 <__NVIC_EnableIRQ+0x38>)
    7130:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7134:	095b      	lsrs	r3, r3, #5
    7136:	88fa      	ldrh	r2, [r7, #6]
    7138:	f002 021f 	and.w	r2, r2, #31
    713c:	2001      	movs	r0, #1
    713e:	fa00 f202 	lsl.w	r2, r0, r2
    7142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7146:	bf00      	nop
    7148:	370c      	adds	r7, #12
    714a:	46bd      	mov	sp, r7
    714c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7150:	4770      	bx	lr
    7152:	bf00      	nop
    7154:	e000e100 	.word	0xe000e100

00007158 <__NVIC_DisableIRQ>:
{
    7158:	b480      	push	{r7}
    715a:	b083      	sub	sp, #12
    715c:	af00      	add	r7, sp, #0
    715e:	4603      	mov	r3, r0
    7160:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7162:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7166:	2b00      	cmp	r3, #0
    7168:	db10      	blt.n	718c <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    716a:	490b      	ldr	r1, [pc, #44]	; (7198 <__NVIC_DisableIRQ+0x40>)
    716c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7170:	095b      	lsrs	r3, r3, #5
    7172:	88fa      	ldrh	r2, [r7, #6]
    7174:	f002 021f 	and.w	r2, r2, #31
    7178:	2001      	movs	r0, #1
    717a:	fa00 f202 	lsl.w	r2, r0, r2
    717e:	3320      	adds	r3, #32
    7180:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    7184:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7188:	f3bf 8f6f 	isb	sy
}
    718c:	bf00      	nop
    718e:	370c      	adds	r7, #12
    7190:	46bd      	mov	sp, r7
    7192:	f85d 7b04 	ldr.w	r7, [sp], #4
    7196:	4770      	bx	lr
    7198:	e000e100 	.word	0xe000e100

0000719c <__NVIC_ClearPendingIRQ>:
{
    719c:	b480      	push	{r7}
    719e:	b083      	sub	sp, #12
    71a0:	af00      	add	r7, sp, #0
    71a2:	4603      	mov	r3, r0
    71a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    71a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    71aa:	2b00      	cmp	r3, #0
    71ac:	db0c      	blt.n	71c8 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    71ae:	4909      	ldr	r1, [pc, #36]	; (71d4 <__NVIC_ClearPendingIRQ+0x38>)
    71b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    71b4:	095b      	lsrs	r3, r3, #5
    71b6:	88fa      	ldrh	r2, [r7, #6]
    71b8:	f002 021f 	and.w	r2, r2, #31
    71bc:	2001      	movs	r0, #1
    71be:	fa00 f202 	lsl.w	r2, r0, r2
    71c2:	3360      	adds	r3, #96	; 0x60
    71c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    71c8:	bf00      	nop
    71ca:	370c      	adds	r7, #12
    71cc:	46bd      	mov	sp, r7
    71ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    71d2:	4770      	bx	lr
    71d4:	e000e100 	.word	0xe000e100

000071d8 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    71d8:	b480      	push	{r7}
    71da:	b083      	sub	sp, #12
    71dc:	af00      	add	r7, sp, #0
    71de:	6078      	str	r0, [r7, #4]
    71e0:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    71e2:	bf00      	nop
    71e4:	687b      	ldr	r3, [r7, #4]
    71e6:	691a      	ldr	r2, [r3, #16]
    71e8:	683b      	ldr	r3, [r7, #0]
    71ea:	4013      	ands	r3, r2
    71ec:	2b00      	cmp	r3, #0
    71ee:	d1f9      	bne.n	71e4 <hri_tc_wait_for_sync+0xc>
	};
}
    71f0:	bf00      	nop
    71f2:	370c      	adds	r7, #12
    71f4:	46bd      	mov	sp, r7
    71f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    71fa:	4770      	bx	lr

000071fc <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    71fc:	b480      	push	{r7}
    71fe:	b083      	sub	sp, #12
    7200:	af00      	add	r7, sp, #0
    7202:	6078      	str	r0, [r7, #4]
    7204:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    7206:	687b      	ldr	r3, [r7, #4]
    7208:	691a      	ldr	r2, [r3, #16]
    720a:	683b      	ldr	r3, [r7, #0]
    720c:	4013      	ands	r3, r2
    720e:	2b00      	cmp	r3, #0
    7210:	bf14      	ite	ne
    7212:	2301      	movne	r3, #1
    7214:	2300      	moveq	r3, #0
    7216:	b2db      	uxtb	r3, r3
}
    7218:	4618      	mov	r0, r3
    721a:	370c      	adds	r7, #12
    721c:	46bd      	mov	sp, r7
    721e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7222:	4770      	bx	lr

00007224 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    7224:	b480      	push	{r7}
    7226:	b083      	sub	sp, #12
    7228:	af00      	add	r7, sp, #0
    722a:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    722c:	687b      	ldr	r3, [r7, #4]
    722e:	7a9b      	ldrb	r3, [r3, #10]
    7230:	b2db      	uxtb	r3, r3
    7232:	f003 0301 	and.w	r3, r3, #1
    7236:	2b00      	cmp	r3, #0
    7238:	bf14      	ite	ne
    723a:	2301      	movne	r3, #1
    723c:	2300      	moveq	r3, #0
    723e:	b2db      	uxtb	r3, r3
}
    7240:	4618      	mov	r0, r3
    7242:	370c      	adds	r7, #12
    7244:	46bd      	mov	sp, r7
    7246:	f85d 7b04 	ldr.w	r7, [sp], #4
    724a:	4770      	bx	lr

0000724c <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    724c:	b480      	push	{r7}
    724e:	b083      	sub	sp, #12
    7250:	af00      	add	r7, sp, #0
    7252:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    7254:	687b      	ldr	r3, [r7, #4]
    7256:	2201      	movs	r2, #1
    7258:	729a      	strb	r2, [r3, #10]
}
    725a:	bf00      	nop
    725c:	370c      	adds	r7, #12
    725e:	46bd      	mov	sp, r7
    7260:	f85d 7b04 	ldr.w	r7, [sp], #4
    7264:	4770      	bx	lr

00007266 <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    7266:	b480      	push	{r7}
    7268:	b083      	sub	sp, #12
    726a:	af00      	add	r7, sp, #0
    726c:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    726e:	687b      	ldr	r3, [r7, #4]
    7270:	2202      	movs	r2, #2
    7272:	729a      	strb	r2, [r3, #10]
}
    7274:	bf00      	nop
    7276:	370c      	adds	r7, #12
    7278:	46bd      	mov	sp, r7
    727a:	f85d 7b04 	ldr.w	r7, [sp], #4
    727e:	4770      	bx	lr

00007280 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    7280:	b480      	push	{r7}
    7282:	b083      	sub	sp, #12
    7284:	af00      	add	r7, sp, #0
    7286:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    7288:	687b      	ldr	r3, [r7, #4]
    728a:	2201      	movs	r2, #1
    728c:	725a      	strb	r2, [r3, #9]
}
    728e:	bf00      	nop
    7290:	370c      	adds	r7, #12
    7292:	46bd      	mov	sp, r7
    7294:	f85d 7b04 	ldr.w	r7, [sp], #4
    7298:	4770      	bx	lr

0000729a <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    729a:	b480      	push	{r7}
    729c:	b083      	sub	sp, #12
    729e:	af00      	add	r7, sp, #0
    72a0:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    72a2:	687b      	ldr	r3, [r7, #4]
    72a4:	7a5b      	ldrb	r3, [r3, #9]
    72a6:	b2db      	uxtb	r3, r3
    72a8:	085b      	lsrs	r3, r3, #1
    72aa:	f003 0301 	and.w	r3, r3, #1
    72ae:	2b00      	cmp	r3, #0
    72b0:	bf14      	ite	ne
    72b2:	2301      	movne	r3, #1
    72b4:	2300      	moveq	r3, #0
    72b6:	b2db      	uxtb	r3, r3
}
    72b8:	4618      	mov	r0, r3
    72ba:	370c      	adds	r7, #12
    72bc:	46bd      	mov	sp, r7
    72be:	f85d 7b04 	ldr.w	r7, [sp], #4
    72c2:	4770      	bx	lr

000072c4 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    72c4:	b580      	push	{r7, lr}
    72c6:	b082      	sub	sp, #8
    72c8:	af00      	add	r7, sp, #0
    72ca:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    72cc:	687b      	ldr	r3, [r7, #4]
    72ce:	681b      	ldr	r3, [r3, #0]
    72d0:	f023 0202 	bic.w	r2, r3, #2
    72d4:	687b      	ldr	r3, [r7, #4]
    72d6:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    72d8:	2103      	movs	r1, #3
    72da:	6878      	ldr	r0, [r7, #4]
    72dc:	4b02      	ldr	r3, [pc, #8]	; (72e8 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    72de:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    72e0:	bf00      	nop
    72e2:	3708      	adds	r7, #8
    72e4:	46bd      	mov	sp, r7
    72e6:	bd80      	pop	{r7, pc}
    72e8:	000071d9 	.word	0x000071d9

000072ec <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    72ec:	b580      	push	{r7, lr}
    72ee:	b084      	sub	sp, #16
    72f0:	af00      	add	r7, sp, #0
    72f2:	6078      	str	r0, [r7, #4]
    72f4:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    72f6:	2103      	movs	r1, #3
    72f8:	6878      	ldr	r0, [r7, #4]
    72fa:	4b07      	ldr	r3, [pc, #28]	; (7318 <hri_tc_get_CTRLA_reg+0x2c>)
    72fc:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    72fe:	687b      	ldr	r3, [r7, #4]
    7300:	681b      	ldr	r3, [r3, #0]
    7302:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7304:	68fa      	ldr	r2, [r7, #12]
    7306:	683b      	ldr	r3, [r7, #0]
    7308:	4013      	ands	r3, r2
    730a:	60fb      	str	r3, [r7, #12]
	return tmp;
    730c:	68fb      	ldr	r3, [r7, #12]
}
    730e:	4618      	mov	r0, r3
    7310:	3710      	adds	r7, #16
    7312:	46bd      	mov	sp, r7
    7314:	bd80      	pop	{r7, pc}
    7316:	bf00      	nop
    7318:	000071d9 	.word	0x000071d9

0000731c <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    731c:	b580      	push	{r7, lr}
    731e:	b082      	sub	sp, #8
    7320:	af00      	add	r7, sp, #0
    7322:	6078      	str	r0, [r7, #4]
    7324:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    7326:	687b      	ldr	r3, [r7, #4]
    7328:	683a      	ldr	r2, [r7, #0]
    732a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    732c:	2103      	movs	r1, #3
    732e:	6878      	ldr	r0, [r7, #4]
    7330:	4b02      	ldr	r3, [pc, #8]	; (733c <hri_tc_write_CTRLA_reg+0x20>)
    7332:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7334:	bf00      	nop
    7336:	3708      	adds	r7, #8
    7338:	46bd      	mov	sp, r7
    733a:	bd80      	pop	{r7, pc}
    733c:	000071d9 	.word	0x000071d9

00007340 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    7340:	b480      	push	{r7}
    7342:	b083      	sub	sp, #12
    7344:	af00      	add	r7, sp, #0
    7346:	6078      	str	r0, [r7, #4]
    7348:	460b      	mov	r3, r1
    734a:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    734c:	687b      	ldr	r3, [r7, #4]
    734e:	887a      	ldrh	r2, [r7, #2]
    7350:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    7352:	bf00      	nop
    7354:	370c      	adds	r7, #12
    7356:	46bd      	mov	sp, r7
    7358:	f85d 7b04 	ldr.w	r7, [sp], #4
    735c:	4770      	bx	lr

0000735e <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    735e:	b480      	push	{r7}
    7360:	b083      	sub	sp, #12
    7362:	af00      	add	r7, sp, #0
    7364:	6078      	str	r0, [r7, #4]
    7366:	460b      	mov	r3, r1
    7368:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    736a:	687b      	ldr	r3, [r7, #4]
    736c:	78fa      	ldrb	r2, [r7, #3]
    736e:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    7370:	bf00      	nop
    7372:	370c      	adds	r7, #12
    7374:	46bd      	mov	sp, r7
    7376:	f85d 7b04 	ldr.w	r7, [sp], #4
    737a:	4770      	bx	lr

0000737c <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    737c:	b480      	push	{r7}
    737e:	b083      	sub	sp, #12
    7380:	af00      	add	r7, sp, #0
    7382:	6078      	str	r0, [r7, #4]
    7384:	460b      	mov	r3, r1
    7386:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    7388:	687b      	ldr	r3, [r7, #4]
    738a:	78fa      	ldrb	r2, [r7, #3]
    738c:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    738e:	bf00      	nop
    7390:	370c      	adds	r7, #12
    7392:	46bd      	mov	sp, r7
    7394:	f85d 7b04 	ldr.w	r7, [sp], #4
    7398:	4770      	bx	lr
	...

0000739c <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    739c:	b580      	push	{r7, lr}
    739e:	b082      	sub	sp, #8
    73a0:	af00      	add	r7, sp, #0
    73a2:	6078      	str	r0, [r7, #4]
    73a4:	460b      	mov	r3, r1
    73a6:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    73a8:	687b      	ldr	r3, [r7, #4]
    73aa:	78fa      	ldrb	r2, [r7, #3]
    73ac:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    73ae:	2120      	movs	r1, #32
    73b0:	6878      	ldr	r0, [r7, #4]
    73b2:	4b03      	ldr	r3, [pc, #12]	; (73c0 <hri_tccount8_write_PER_reg+0x24>)
    73b4:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    73b6:	bf00      	nop
    73b8:	3708      	adds	r7, #8
    73ba:	46bd      	mov	sp, r7
    73bc:	bd80      	pop	{r7, pc}
    73be:	bf00      	nop
    73c0:	000071d9 	.word	0x000071d9

000073c4 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    73c4:	b580      	push	{r7, lr}
    73c6:	b082      	sub	sp, #8
    73c8:	af00      	add	r7, sp, #0
    73ca:	6078      	str	r0, [r7, #4]
    73cc:	460b      	mov	r3, r1
    73ce:	70fb      	strb	r3, [r7, #3]
    73d0:	4613      	mov	r3, r2
    73d2:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    73d4:	78fb      	ldrb	r3, [r7, #3]
    73d6:	687a      	ldr	r2, [r7, #4]
    73d8:	4413      	add	r3, r2
    73da:	78ba      	ldrb	r2, [r7, #2]
    73dc:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    73de:	21c0      	movs	r1, #192	; 0xc0
    73e0:	6878      	ldr	r0, [r7, #4]
    73e2:	4b03      	ldr	r3, [pc, #12]	; (73f0 <hri_tccount8_write_CC_reg+0x2c>)
    73e4:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    73e6:	bf00      	nop
    73e8:	3708      	adds	r7, #8
    73ea:	46bd      	mov	sp, r7
    73ec:	bd80      	pop	{r7, pc}
    73ee:	bf00      	nop
    73f0:	000071d9 	.word	0x000071d9

000073f4 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    73f4:	b580      	push	{r7, lr}
    73f6:	b082      	sub	sp, #8
    73f8:	af00      	add	r7, sp, #0
    73fa:	6078      	str	r0, [r7, #4]
    73fc:	460b      	mov	r3, r1
    73fe:	70fb      	strb	r3, [r7, #3]
    7400:	4613      	mov	r3, r2
    7402:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    7404:	78fb      	ldrb	r3, [r7, #3]
    7406:	687a      	ldr	r2, [r7, #4]
    7408:	330c      	adds	r3, #12
    740a:	005b      	lsls	r3, r3, #1
    740c:	4413      	add	r3, r2
    740e:	883a      	ldrh	r2, [r7, #0]
    7410:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7412:	21c0      	movs	r1, #192	; 0xc0
    7414:	6878      	ldr	r0, [r7, #4]
    7416:	4b03      	ldr	r3, [pc, #12]	; (7424 <hri_tccount16_write_CC_reg+0x30>)
    7418:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    741a:	bf00      	nop
    741c:	3708      	adds	r7, #8
    741e:	46bd      	mov	sp, r7
    7420:	bd80      	pop	{r7, pc}
    7422:	bf00      	nop
    7424:	000071d9 	.word	0x000071d9

00007428 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    7428:	b580      	push	{r7, lr}
    742a:	b084      	sub	sp, #16
    742c:	af00      	add	r7, sp, #0
    742e:	60f8      	str	r0, [r7, #12]
    7430:	460b      	mov	r3, r1
    7432:	607a      	str	r2, [r7, #4]
    7434:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    7436:	7afb      	ldrb	r3, [r7, #11]
    7438:	68fa      	ldr	r2, [r7, #12]
    743a:	3306      	adds	r3, #6
    743c:	009b      	lsls	r3, r3, #2
    743e:	4413      	add	r3, r2
    7440:	687a      	ldr	r2, [r7, #4]
    7442:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7444:	21c0      	movs	r1, #192	; 0xc0
    7446:	68f8      	ldr	r0, [r7, #12]
    7448:	4b02      	ldr	r3, [pc, #8]	; (7454 <hri_tccount32_write_CC_reg+0x2c>)
    744a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    744c:	bf00      	nop
    744e:	3710      	adds	r7, #16
    7450:	46bd      	mov	sp, r7
    7452:	bd80      	pop	{r7, pc}
    7454:	000071d9 	.word	0x000071d9

00007458 <_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _timer_init(struct _timer_device *const device, void *const hw)
{
    7458:	b580      	push	{r7, lr}
    745a:	b084      	sub	sp, #16
    745c:	af00      	add	r7, sp, #0
    745e:	6078      	str	r0, [r7, #4]
    7460:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    7462:	6838      	ldr	r0, [r7, #0]
    7464:	4b93      	ldr	r3, [pc, #588]	; (76b4 <_timer_init+0x25c>)
    7466:	4798      	blx	r3
    7468:	4603      	mov	r3, r0
    746a:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    746c:	687b      	ldr	r3, [r7, #4]
    746e:	683a      	ldr	r2, [r7, #0]
    7470:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    7472:	2295      	movs	r2, #149	; 0x95
    7474:	4990      	ldr	r1, [pc, #576]	; (76b8 <_timer_init+0x260>)
    7476:	2001      	movs	r0, #1
    7478:	4b90      	ldr	r3, [pc, #576]	; (76bc <_timer_init+0x264>)
    747a:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    747c:	2101      	movs	r1, #1
    747e:	6838      	ldr	r0, [r7, #0]
    7480:	4b8f      	ldr	r3, [pc, #572]	; (76c0 <_timer_init+0x268>)
    7482:	4798      	blx	r3
    7484:	4603      	mov	r3, r0
    7486:	f083 0301 	eor.w	r3, r3, #1
    748a:	b2db      	uxtb	r3, r3
    748c:	2b00      	cmp	r3, #0
    748e:	d011      	beq.n	74b4 <_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    7490:	2102      	movs	r1, #2
    7492:	6838      	ldr	r0, [r7, #0]
    7494:	4b8b      	ldr	r3, [pc, #556]	; (76c4 <_timer_init+0x26c>)
    7496:	4798      	blx	r3
    7498:	4603      	mov	r3, r0
    749a:	2b00      	cmp	r3, #0
    749c:	d006      	beq.n	74ac <_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    749e:	6838      	ldr	r0, [r7, #0]
    74a0:	4b89      	ldr	r3, [pc, #548]	; (76c8 <_timer_init+0x270>)
    74a2:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    74a4:	2102      	movs	r1, #2
    74a6:	6838      	ldr	r0, [r7, #0]
    74a8:	4b88      	ldr	r3, [pc, #544]	; (76cc <_timer_init+0x274>)
    74aa:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    74ac:	2101      	movs	r1, #1
    74ae:	6838      	ldr	r0, [r7, #0]
    74b0:	4b87      	ldr	r3, [pc, #540]	; (76d0 <_timer_init+0x278>)
    74b2:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    74b4:	2101      	movs	r1, #1
    74b6:	6838      	ldr	r0, [r7, #0]
    74b8:	4b84      	ldr	r3, [pc, #528]	; (76cc <_timer_init+0x274>)
    74ba:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    74bc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    74c0:	4984      	ldr	r1, [pc, #528]	; (76d4 <_timer_init+0x27c>)
    74c2:	4613      	mov	r3, r2
    74c4:	009b      	lsls	r3, r3, #2
    74c6:	4413      	add	r3, r2
    74c8:	009b      	lsls	r3, r3, #2
    74ca:	440b      	add	r3, r1
    74cc:	3304      	adds	r3, #4
    74ce:	681b      	ldr	r3, [r3, #0]
    74d0:	4619      	mov	r1, r3
    74d2:	6838      	ldr	r0, [r7, #0]
    74d4:	4b7e      	ldr	r3, [pc, #504]	; (76d0 <_timer_init+0x278>)
    74d6:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    74d8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    74dc:	497d      	ldr	r1, [pc, #500]	; (76d4 <_timer_init+0x27c>)
    74de:	4613      	mov	r3, r2
    74e0:	009b      	lsls	r3, r3, #2
    74e2:	4413      	add	r3, r2
    74e4:	009b      	lsls	r3, r3, #2
    74e6:	440b      	add	r3, r1
    74e8:	330a      	adds	r3, #10
    74ea:	781b      	ldrb	r3, [r3, #0]
    74ec:	4619      	mov	r1, r3
    74ee:	6838      	ldr	r0, [r7, #0]
    74f0:	4b79      	ldr	r3, [pc, #484]	; (76d8 <_timer_init+0x280>)
    74f2:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    74f4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    74f8:	4976      	ldr	r1, [pc, #472]	; (76d4 <_timer_init+0x27c>)
    74fa:	4613      	mov	r3, r2
    74fc:	009b      	lsls	r3, r3, #2
    74fe:	4413      	add	r3, r2
    7500:	009b      	lsls	r3, r3, #2
    7502:	440b      	add	r3, r1
    7504:	3308      	adds	r3, #8
    7506:	881b      	ldrh	r3, [r3, #0]
    7508:	4619      	mov	r1, r3
    750a:	6838      	ldr	r0, [r7, #0]
    750c:	4b73      	ldr	r3, [pc, #460]	; (76dc <_timer_init+0x284>)
    750e:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    7510:	2101      	movs	r1, #1
    7512:	6838      	ldr	r0, [r7, #0]
    7514:	4b72      	ldr	r3, [pc, #456]	; (76e0 <_timer_init+0x288>)
    7516:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    7518:	f997 200f 	ldrsb.w	r2, [r7, #15]
    751c:	496d      	ldr	r1, [pc, #436]	; (76d4 <_timer_init+0x27c>)
    751e:	4613      	mov	r3, r2
    7520:	009b      	lsls	r3, r3, #2
    7522:	4413      	add	r3, r2
    7524:	009b      	lsls	r3, r3, #2
    7526:	440b      	add	r3, r1
    7528:	3304      	adds	r3, #4
    752a:	681b      	ldr	r3, [r3, #0]
    752c:	f003 030c 	and.w	r3, r3, #12
    7530:	2b08      	cmp	r3, #8
    7532:	d11e      	bne.n	7572 <_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    7534:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7538:	4966      	ldr	r1, [pc, #408]	; (76d4 <_timer_init+0x27c>)
    753a:	4613      	mov	r3, r2
    753c:	009b      	lsls	r3, r3, #2
    753e:	4413      	add	r3, r2
    7540:	009b      	lsls	r3, r3, #2
    7542:	440b      	add	r3, r1
    7544:	330c      	adds	r3, #12
    7546:	681b      	ldr	r3, [r3, #0]
    7548:	461a      	mov	r2, r3
    754a:	2100      	movs	r1, #0
    754c:	6838      	ldr	r0, [r7, #0]
    754e:	4b65      	ldr	r3, [pc, #404]	; (76e4 <_timer_init+0x28c>)
    7550:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    7552:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7556:	495f      	ldr	r1, [pc, #380]	; (76d4 <_timer_init+0x27c>)
    7558:	4613      	mov	r3, r2
    755a:	009b      	lsls	r3, r3, #2
    755c:	4413      	add	r3, r2
    755e:	009b      	lsls	r3, r3, #2
    7560:	440b      	add	r3, r1
    7562:	3310      	adds	r3, #16
    7564:	681b      	ldr	r3, [r3, #0]
    7566:	461a      	mov	r2, r3
    7568:	2101      	movs	r1, #1
    756a:	6838      	ldr	r0, [r7, #0]
    756c:	4b5d      	ldr	r3, [pc, #372]	; (76e4 <_timer_init+0x28c>)
    756e:	4798      	blx	r3
    7570:	e06a      	b.n	7648 <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    7572:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7576:	4957      	ldr	r1, [pc, #348]	; (76d4 <_timer_init+0x27c>)
    7578:	4613      	mov	r3, r2
    757a:	009b      	lsls	r3, r3, #2
    757c:	4413      	add	r3, r2
    757e:	009b      	lsls	r3, r3, #2
    7580:	440b      	add	r3, r1
    7582:	3304      	adds	r3, #4
    7584:	681b      	ldr	r3, [r3, #0]
    7586:	f003 030c 	and.w	r3, r3, #12
    758a:	2b00      	cmp	r3, #0
    758c:	d120      	bne.n	75d0 <_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    758e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7592:	4950      	ldr	r1, [pc, #320]	; (76d4 <_timer_init+0x27c>)
    7594:	4613      	mov	r3, r2
    7596:	009b      	lsls	r3, r3, #2
    7598:	4413      	add	r3, r2
    759a:	009b      	lsls	r3, r3, #2
    759c:	440b      	add	r3, r1
    759e:	330c      	adds	r3, #12
    75a0:	681b      	ldr	r3, [r3, #0]
    75a2:	b29b      	uxth	r3, r3
    75a4:	461a      	mov	r2, r3
    75a6:	2100      	movs	r1, #0
    75a8:	6838      	ldr	r0, [r7, #0]
    75aa:	4b4f      	ldr	r3, [pc, #316]	; (76e8 <_timer_init+0x290>)
    75ac:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    75ae:	f997 200f 	ldrsb.w	r2, [r7, #15]
    75b2:	4948      	ldr	r1, [pc, #288]	; (76d4 <_timer_init+0x27c>)
    75b4:	4613      	mov	r3, r2
    75b6:	009b      	lsls	r3, r3, #2
    75b8:	4413      	add	r3, r2
    75ba:	009b      	lsls	r3, r3, #2
    75bc:	440b      	add	r3, r1
    75be:	3310      	adds	r3, #16
    75c0:	681b      	ldr	r3, [r3, #0]
    75c2:	b29b      	uxth	r3, r3
    75c4:	461a      	mov	r2, r3
    75c6:	2101      	movs	r1, #1
    75c8:	6838      	ldr	r0, [r7, #0]
    75ca:	4b47      	ldr	r3, [pc, #284]	; (76e8 <_timer_init+0x290>)
    75cc:	4798      	blx	r3
    75ce:	e03b      	b.n	7648 <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    75d0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    75d4:	493f      	ldr	r1, [pc, #252]	; (76d4 <_timer_init+0x27c>)
    75d6:	4613      	mov	r3, r2
    75d8:	009b      	lsls	r3, r3, #2
    75da:	4413      	add	r3, r2
    75dc:	009b      	lsls	r3, r3, #2
    75de:	440b      	add	r3, r1
    75e0:	3304      	adds	r3, #4
    75e2:	681b      	ldr	r3, [r3, #0]
    75e4:	f003 030c 	and.w	r3, r3, #12
    75e8:	2b04      	cmp	r3, #4
    75ea:	d12d      	bne.n	7648 <_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    75ec:	f997 200f 	ldrsb.w	r2, [r7, #15]
    75f0:	4938      	ldr	r1, [pc, #224]	; (76d4 <_timer_init+0x27c>)
    75f2:	4613      	mov	r3, r2
    75f4:	009b      	lsls	r3, r3, #2
    75f6:	4413      	add	r3, r2
    75f8:	009b      	lsls	r3, r3, #2
    75fa:	440b      	add	r3, r1
    75fc:	330c      	adds	r3, #12
    75fe:	681b      	ldr	r3, [r3, #0]
    7600:	b2db      	uxtb	r3, r3
    7602:	461a      	mov	r2, r3
    7604:	2100      	movs	r1, #0
    7606:	6838      	ldr	r0, [r7, #0]
    7608:	4b38      	ldr	r3, [pc, #224]	; (76ec <_timer_init+0x294>)
    760a:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    760c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7610:	4930      	ldr	r1, [pc, #192]	; (76d4 <_timer_init+0x27c>)
    7612:	4613      	mov	r3, r2
    7614:	009b      	lsls	r3, r3, #2
    7616:	4413      	add	r3, r2
    7618:	009b      	lsls	r3, r3, #2
    761a:	440b      	add	r3, r1
    761c:	3310      	adds	r3, #16
    761e:	681b      	ldr	r3, [r3, #0]
    7620:	b2db      	uxtb	r3, r3
    7622:	461a      	mov	r2, r3
    7624:	2101      	movs	r1, #1
    7626:	6838      	ldr	r0, [r7, #0]
    7628:	4b30      	ldr	r3, [pc, #192]	; (76ec <_timer_init+0x294>)
    762a:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    762c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7630:	4928      	ldr	r1, [pc, #160]	; (76d4 <_timer_init+0x27c>)
    7632:	4613      	mov	r3, r2
    7634:	009b      	lsls	r3, r3, #2
    7636:	4413      	add	r3, r2
    7638:	009b      	lsls	r3, r3, #2
    763a:	440b      	add	r3, r1
    763c:	330b      	adds	r3, #11
    763e:	781b      	ldrb	r3, [r3, #0]
    7640:	4619      	mov	r1, r3
    7642:	6838      	ldr	r0, [r7, #0]
    7644:	4b2a      	ldr	r3, [pc, #168]	; (76f0 <_timer_init+0x298>)
    7646:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    7648:	6838      	ldr	r0, [r7, #0]
    764a:	4b2a      	ldr	r3, [pc, #168]	; (76f4 <_timer_init+0x29c>)
    764c:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    764e:	6879      	ldr	r1, [r7, #4]
    7650:	6838      	ldr	r0, [r7, #0]
    7652:	4b29      	ldr	r3, [pc, #164]	; (76f8 <_timer_init+0x2a0>)
    7654:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    7656:	f997 200f 	ldrsb.w	r2, [r7, #15]
    765a:	491e      	ldr	r1, [pc, #120]	; (76d4 <_timer_init+0x27c>)
    765c:	4613      	mov	r3, r2
    765e:	009b      	lsls	r3, r3, #2
    7660:	4413      	add	r3, r2
    7662:	009b      	lsls	r3, r3, #2
    7664:	440b      	add	r3, r1
    7666:	3302      	adds	r3, #2
    7668:	f9b3 3000 	ldrsh.w	r3, [r3]
    766c:	4618      	mov	r0, r3
    766e:	4b23      	ldr	r3, [pc, #140]	; (76fc <_timer_init+0x2a4>)
    7670:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    7672:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7676:	4917      	ldr	r1, [pc, #92]	; (76d4 <_timer_init+0x27c>)
    7678:	4613      	mov	r3, r2
    767a:	009b      	lsls	r3, r3, #2
    767c:	4413      	add	r3, r2
    767e:	009b      	lsls	r3, r3, #2
    7680:	440b      	add	r3, r1
    7682:	3302      	adds	r3, #2
    7684:	f9b3 3000 	ldrsh.w	r3, [r3]
    7688:	4618      	mov	r0, r3
    768a:	4b1d      	ldr	r3, [pc, #116]	; (7700 <_timer_init+0x2a8>)
    768c:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    768e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7692:	4910      	ldr	r1, [pc, #64]	; (76d4 <_timer_init+0x27c>)
    7694:	4613      	mov	r3, r2
    7696:	009b      	lsls	r3, r3, #2
    7698:	4413      	add	r3, r2
    769a:	009b      	lsls	r3, r3, #2
    769c:	440b      	add	r3, r1
    769e:	3302      	adds	r3, #2
    76a0:	f9b3 3000 	ldrsh.w	r3, [r3]
    76a4:	4618      	mov	r0, r3
    76a6:	4b17      	ldr	r3, [pc, #92]	; (7704 <_timer_init+0x2ac>)
    76a8:	4798      	blx	r3

	return ERR_NONE;
    76aa:	2300      	movs	r3, #0
}
    76ac:	4618      	mov	r0, r3
    76ae:	3710      	adds	r7, #16
    76b0:	46bd      	mov	sp, r7
    76b2:	bd80      	pop	{r7, pc}
    76b4:	00007a75 	.word	0x00007a75
    76b8:	00013194 	.word	0x00013194
    76bc:	00002edd 	.word	0x00002edd
    76c0:	000071fd 	.word	0x000071fd
    76c4:	000072ed 	.word	0x000072ed
    76c8:	000072c5 	.word	0x000072c5
    76cc:	000071d9 	.word	0x000071d9
    76d0:	0000731d 	.word	0x0000731d
    76d4:	20000048 	.word	0x20000048
    76d8:	0000737d 	.word	0x0000737d
    76dc:	00007341 	.word	0x00007341
    76e0:	0000735f 	.word	0x0000735f
    76e4:	00007429 	.word	0x00007429
    76e8:	000073f5 	.word	0x000073f5
    76ec:	000073c5 	.word	0x000073c5
    76f0:	0000739d 	.word	0x0000739d
    76f4:	00007281 	.word	0x00007281
    76f8:	00007add 	.word	0x00007add
    76fc:	00007159 	.word	0x00007159
    7700:	0000719d 	.word	0x0000719d
    7704:	0000711d 	.word	0x0000711d

00007708 <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    7708:	b580      	push	{r7, lr}
    770a:	b084      	sub	sp, #16
    770c:	af00      	add	r7, sp, #0
    770e:	6078      	str	r0, [r7, #4]
    7710:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    7712:	6838      	ldr	r0, [r7, #0]
    7714:	4b73      	ldr	r3, [pc, #460]	; (78e4 <_pwm_init+0x1dc>)
    7716:	4798      	blx	r3
    7718:	4603      	mov	r3, r0
    771a:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    771c:	687b      	ldr	r3, [r7, #4]
    771e:	683a      	ldr	r2, [r7, #0]
    7720:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    7722:	2101      	movs	r1, #1
    7724:	6838      	ldr	r0, [r7, #0]
    7726:	4b70      	ldr	r3, [pc, #448]	; (78e8 <_pwm_init+0x1e0>)
    7728:	4798      	blx	r3
    772a:	4603      	mov	r3, r0
    772c:	f083 0301 	eor.w	r3, r3, #1
    7730:	b2db      	uxtb	r3, r3
    7732:	2b00      	cmp	r3, #0
    7734:	d011      	beq.n	775a <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    7736:	2102      	movs	r1, #2
    7738:	6838      	ldr	r0, [r7, #0]
    773a:	4b6c      	ldr	r3, [pc, #432]	; (78ec <_pwm_init+0x1e4>)
    773c:	4798      	blx	r3
    773e:	4603      	mov	r3, r0
    7740:	2b00      	cmp	r3, #0
    7742:	d006      	beq.n	7752 <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    7744:	6838      	ldr	r0, [r7, #0]
    7746:	4b6a      	ldr	r3, [pc, #424]	; (78f0 <_pwm_init+0x1e8>)
    7748:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    774a:	2102      	movs	r1, #2
    774c:	6838      	ldr	r0, [r7, #0]
    774e:	4b69      	ldr	r3, [pc, #420]	; (78f4 <_pwm_init+0x1ec>)
    7750:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    7752:	2101      	movs	r1, #1
    7754:	6838      	ldr	r0, [r7, #0]
    7756:	4b68      	ldr	r3, [pc, #416]	; (78f8 <_pwm_init+0x1f0>)
    7758:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    775a:	2101      	movs	r1, #1
    775c:	6838      	ldr	r0, [r7, #0]
    775e:	4b65      	ldr	r3, [pc, #404]	; (78f4 <_pwm_init+0x1ec>)
    7760:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    7762:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7766:	4965      	ldr	r1, [pc, #404]	; (78fc <_pwm_init+0x1f4>)
    7768:	4613      	mov	r3, r2
    776a:	009b      	lsls	r3, r3, #2
    776c:	4413      	add	r3, r2
    776e:	009b      	lsls	r3, r3, #2
    7770:	440b      	add	r3, r1
    7772:	3304      	adds	r3, #4
    7774:	681b      	ldr	r3, [r3, #0]
    7776:	4619      	mov	r1, r3
    7778:	6838      	ldr	r0, [r7, #0]
    777a:	4b5f      	ldr	r3, [pc, #380]	; (78f8 <_pwm_init+0x1f0>)
    777c:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    777e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7782:	495e      	ldr	r1, [pc, #376]	; (78fc <_pwm_init+0x1f4>)
    7784:	4613      	mov	r3, r2
    7786:	009b      	lsls	r3, r3, #2
    7788:	4413      	add	r3, r2
    778a:	009b      	lsls	r3, r3, #2
    778c:	440b      	add	r3, r1
    778e:	330a      	adds	r3, #10
    7790:	781b      	ldrb	r3, [r3, #0]
    7792:	4619      	mov	r1, r3
    7794:	6838      	ldr	r0, [r7, #0]
    7796:	4b5a      	ldr	r3, [pc, #360]	; (7900 <_pwm_init+0x1f8>)
    7798:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    779a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    779e:	4957      	ldr	r1, [pc, #348]	; (78fc <_pwm_init+0x1f4>)
    77a0:	4613      	mov	r3, r2
    77a2:	009b      	lsls	r3, r3, #2
    77a4:	4413      	add	r3, r2
    77a6:	009b      	lsls	r3, r3, #2
    77a8:	440b      	add	r3, r1
    77aa:	3308      	adds	r3, #8
    77ac:	881b      	ldrh	r3, [r3, #0]
    77ae:	4619      	mov	r1, r3
    77b0:	6838      	ldr	r0, [r7, #0]
    77b2:	4b54      	ldr	r3, [pc, #336]	; (7904 <_pwm_init+0x1fc>)
    77b4:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    77b6:	2103      	movs	r1, #3
    77b8:	6838      	ldr	r0, [r7, #0]
    77ba:	4b53      	ldr	r3, [pc, #332]	; (7908 <_pwm_init+0x200>)
    77bc:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    77be:	f997 200f 	ldrsb.w	r2, [r7, #15]
    77c2:	494e      	ldr	r1, [pc, #312]	; (78fc <_pwm_init+0x1f4>)
    77c4:	4613      	mov	r3, r2
    77c6:	009b      	lsls	r3, r3, #2
    77c8:	4413      	add	r3, r2
    77ca:	009b      	lsls	r3, r3, #2
    77cc:	440b      	add	r3, r1
    77ce:	3304      	adds	r3, #4
    77d0:	681b      	ldr	r3, [r3, #0]
    77d2:	f003 030c 	and.w	r3, r3, #12
    77d6:	2b08      	cmp	r3, #8
    77d8:	d11e      	bne.n	7818 <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    77da:	f997 200f 	ldrsb.w	r2, [r7, #15]
    77de:	4947      	ldr	r1, [pc, #284]	; (78fc <_pwm_init+0x1f4>)
    77e0:	4613      	mov	r3, r2
    77e2:	009b      	lsls	r3, r3, #2
    77e4:	4413      	add	r3, r2
    77e6:	009b      	lsls	r3, r3, #2
    77e8:	440b      	add	r3, r1
    77ea:	330c      	adds	r3, #12
    77ec:	681b      	ldr	r3, [r3, #0]
    77ee:	461a      	mov	r2, r3
    77f0:	2100      	movs	r1, #0
    77f2:	6838      	ldr	r0, [r7, #0]
    77f4:	4b45      	ldr	r3, [pc, #276]	; (790c <_pwm_init+0x204>)
    77f6:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    77f8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    77fc:	493f      	ldr	r1, [pc, #252]	; (78fc <_pwm_init+0x1f4>)
    77fe:	4613      	mov	r3, r2
    7800:	009b      	lsls	r3, r3, #2
    7802:	4413      	add	r3, r2
    7804:	009b      	lsls	r3, r3, #2
    7806:	440b      	add	r3, r1
    7808:	3310      	adds	r3, #16
    780a:	681b      	ldr	r3, [r3, #0]
    780c:	461a      	mov	r2, r3
    780e:	2101      	movs	r1, #1
    7810:	6838      	ldr	r0, [r7, #0]
    7812:	4b3e      	ldr	r3, [pc, #248]	; (790c <_pwm_init+0x204>)
    7814:	4798      	blx	r3
    7816:	e031      	b.n	787c <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    7818:	f997 200f 	ldrsb.w	r2, [r7, #15]
    781c:	4937      	ldr	r1, [pc, #220]	; (78fc <_pwm_init+0x1f4>)
    781e:	4613      	mov	r3, r2
    7820:	009b      	lsls	r3, r3, #2
    7822:	4413      	add	r3, r2
    7824:	009b      	lsls	r3, r3, #2
    7826:	440b      	add	r3, r1
    7828:	3304      	adds	r3, #4
    782a:	681b      	ldr	r3, [r3, #0]
    782c:	f003 030c 	and.w	r3, r3, #12
    7830:	2b00      	cmp	r3, #0
    7832:	d120      	bne.n	7876 <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    7834:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7838:	4930      	ldr	r1, [pc, #192]	; (78fc <_pwm_init+0x1f4>)
    783a:	4613      	mov	r3, r2
    783c:	009b      	lsls	r3, r3, #2
    783e:	4413      	add	r3, r2
    7840:	009b      	lsls	r3, r3, #2
    7842:	440b      	add	r3, r1
    7844:	330c      	adds	r3, #12
    7846:	681b      	ldr	r3, [r3, #0]
    7848:	b29b      	uxth	r3, r3
    784a:	461a      	mov	r2, r3
    784c:	2100      	movs	r1, #0
    784e:	6838      	ldr	r0, [r7, #0]
    7850:	4b2f      	ldr	r3, [pc, #188]	; (7910 <_pwm_init+0x208>)
    7852:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    7854:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7858:	4928      	ldr	r1, [pc, #160]	; (78fc <_pwm_init+0x1f4>)
    785a:	4613      	mov	r3, r2
    785c:	009b      	lsls	r3, r3, #2
    785e:	4413      	add	r3, r2
    7860:	009b      	lsls	r3, r3, #2
    7862:	440b      	add	r3, r1
    7864:	3310      	adds	r3, #16
    7866:	681b      	ldr	r3, [r3, #0]
    7868:	b29b      	uxth	r3, r3
    786a:	461a      	mov	r2, r3
    786c:	2101      	movs	r1, #1
    786e:	6838      	ldr	r0, [r7, #0]
    7870:	4b27      	ldr	r3, [pc, #156]	; (7910 <_pwm_init+0x208>)
    7872:	4798      	blx	r3
    7874:	e002      	b.n	787c <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    7876:	f04f 33ff 	mov.w	r3, #4294967295
    787a:	e02e      	b.n	78da <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    787c:	6879      	ldr	r1, [r7, #4]
    787e:	6838      	ldr	r0, [r7, #0]
    7880:	4b24      	ldr	r3, [pc, #144]	; (7914 <_pwm_init+0x20c>)
    7882:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    7884:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7888:	491c      	ldr	r1, [pc, #112]	; (78fc <_pwm_init+0x1f4>)
    788a:	4613      	mov	r3, r2
    788c:	009b      	lsls	r3, r3, #2
    788e:	4413      	add	r3, r2
    7890:	009b      	lsls	r3, r3, #2
    7892:	440b      	add	r3, r1
    7894:	3302      	adds	r3, #2
    7896:	f9b3 3000 	ldrsh.w	r3, [r3]
    789a:	4618      	mov	r0, r3
    789c:	4b1e      	ldr	r3, [pc, #120]	; (7918 <_pwm_init+0x210>)
    789e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    78a0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    78a4:	4915      	ldr	r1, [pc, #84]	; (78fc <_pwm_init+0x1f4>)
    78a6:	4613      	mov	r3, r2
    78a8:	009b      	lsls	r3, r3, #2
    78aa:	4413      	add	r3, r2
    78ac:	009b      	lsls	r3, r3, #2
    78ae:	440b      	add	r3, r1
    78b0:	3302      	adds	r3, #2
    78b2:	f9b3 3000 	ldrsh.w	r3, [r3]
    78b6:	4618      	mov	r0, r3
    78b8:	4b18      	ldr	r3, [pc, #96]	; (791c <_pwm_init+0x214>)
    78ba:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    78bc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    78c0:	490e      	ldr	r1, [pc, #56]	; (78fc <_pwm_init+0x1f4>)
    78c2:	4613      	mov	r3, r2
    78c4:	009b      	lsls	r3, r3, #2
    78c6:	4413      	add	r3, r2
    78c8:	009b      	lsls	r3, r3, #2
    78ca:	440b      	add	r3, r1
    78cc:	3302      	adds	r3, #2
    78ce:	f9b3 3000 	ldrsh.w	r3, [r3]
    78d2:	4618      	mov	r0, r3
    78d4:	4b12      	ldr	r3, [pc, #72]	; (7920 <_pwm_init+0x218>)
    78d6:	4798      	blx	r3

	return 0;
    78d8:	2300      	movs	r3, #0
}
    78da:	4618      	mov	r0, r3
    78dc:	3710      	adds	r7, #16
    78de:	46bd      	mov	sp, r7
    78e0:	bd80      	pop	{r7, pc}
    78e2:	bf00      	nop
    78e4:	00007a75 	.word	0x00007a75
    78e8:	000071fd 	.word	0x000071fd
    78ec:	000072ed 	.word	0x000072ed
    78f0:	000072c5 	.word	0x000072c5
    78f4:	000071d9 	.word	0x000071d9
    78f8:	0000731d 	.word	0x0000731d
    78fc:	20000048 	.word	0x20000048
    7900:	0000737d 	.word	0x0000737d
    7904:	00007341 	.word	0x00007341
    7908:	0000735f 	.word	0x0000735f
    790c:	00007429 	.word	0x00007429
    7910:	000073f5 	.word	0x000073f5
    7914:	00007add 	.word	0x00007add
    7918:	00007159 	.word	0x00007159
    791c:	0000719d 	.word	0x0000719d
    7920:	0000711d 	.word	0x0000711d

00007924 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    7924:	b480      	push	{r7}
    7926:	af00      	add	r7, sp, #0
	return NULL;
    7928:	2300      	movs	r3, #0
}
    792a:	4618      	mov	r0, r3
    792c:	46bd      	mov	sp, r7
    792e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7932:	4770      	bx	lr

00007934 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    7934:	b480      	push	{r7}
    7936:	af00      	add	r7, sp, #0
	return NULL;
    7938:	2300      	movs	r3, #0
}
    793a:	4618      	mov	r0, r3
    793c:	46bd      	mov	sp, r7
    793e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7942:	4770      	bx	lr

00007944 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    7944:	b580      	push	{r7, lr}
    7946:	b084      	sub	sp, #16
    7948:	af00      	add	r7, sp, #0
    794a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    794c:	687b      	ldr	r3, [r7, #4]
    794e:	68db      	ldr	r3, [r3, #12]
    7950:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    7952:	68f8      	ldr	r0, [r7, #12]
    7954:	4b07      	ldr	r3, [pc, #28]	; (7974 <tc_interrupt_handler+0x30>)
    7956:	4798      	blx	r3
    7958:	4603      	mov	r3, r0
    795a:	2b00      	cmp	r3, #0
    795c:	d006      	beq.n	796c <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    795e:	68f8      	ldr	r0, [r7, #12]
    7960:	4b05      	ldr	r3, [pc, #20]	; (7978 <tc_interrupt_handler+0x34>)
    7962:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    7964:	687b      	ldr	r3, [r7, #4]
    7966:	681b      	ldr	r3, [r3, #0]
    7968:	6878      	ldr	r0, [r7, #4]
    796a:	4798      	blx	r3
	}
}
    796c:	bf00      	nop
    796e:	3710      	adds	r7, #16
    7970:	46bd      	mov	sp, r7
    7972:	bd80      	pop	{r7, pc}
    7974:	00007225 	.word	0x00007225
    7978:	0000724d 	.word	0x0000724d

0000797c <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    797c:	b580      	push	{r7, lr}
    797e:	b084      	sub	sp, #16
    7980:	af00      	add	r7, sp, #0
    7982:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7984:	687b      	ldr	r3, [r7, #4]
    7986:	691b      	ldr	r3, [r3, #16]
    7988:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    798a:	68f8      	ldr	r0, [r7, #12]
    798c:	4b12      	ldr	r3, [pc, #72]	; (79d8 <tc_pwm_interrupt_handler+0x5c>)
    798e:	4798      	blx	r3
    7990:	4603      	mov	r3, r0
    7992:	2b00      	cmp	r3, #0
    7994:	d00a      	beq.n	79ac <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    7996:	68f8      	ldr	r0, [r7, #12]
    7998:	4b10      	ldr	r3, [pc, #64]	; (79dc <tc_pwm_interrupt_handler+0x60>)
    799a:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    799c:	687b      	ldr	r3, [r7, #4]
    799e:	681b      	ldr	r3, [r3, #0]
    79a0:	2b00      	cmp	r3, #0
    79a2:	d003      	beq.n	79ac <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    79a4:	687b      	ldr	r3, [r7, #4]
    79a6:	681b      	ldr	r3, [r3, #0]
    79a8:	6878      	ldr	r0, [r7, #4]
    79aa:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    79ac:	68f8      	ldr	r0, [r7, #12]
    79ae:	4b0c      	ldr	r3, [pc, #48]	; (79e0 <tc_pwm_interrupt_handler+0x64>)
    79b0:	4798      	blx	r3
    79b2:	4603      	mov	r3, r0
    79b4:	2b00      	cmp	r3, #0
    79b6:	d00a      	beq.n	79ce <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    79b8:	68f8      	ldr	r0, [r7, #12]
    79ba:	4b0a      	ldr	r3, [pc, #40]	; (79e4 <tc_pwm_interrupt_handler+0x68>)
    79bc:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    79be:	687b      	ldr	r3, [r7, #4]
    79c0:	685b      	ldr	r3, [r3, #4]
    79c2:	2b00      	cmp	r3, #0
    79c4:	d003      	beq.n	79ce <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    79c6:	687b      	ldr	r3, [r7, #4]
    79c8:	685b      	ldr	r3, [r3, #4]
    79ca:	6878      	ldr	r0, [r7, #4]
    79cc:	4798      	blx	r3
		}
	}
}
    79ce:	bf00      	nop
    79d0:	3710      	adds	r7, #16
    79d2:	46bd      	mov	sp, r7
    79d4:	bd80      	pop	{r7, pc}
    79d6:	bf00      	nop
    79d8:	00007225 	.word	0x00007225
    79dc:	0000724d 	.word	0x0000724d
    79e0:	0000729b 	.word	0x0000729b
    79e4:	00007267 	.word	0x00007267

000079e8 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    79e8:	b580      	push	{r7, lr}
    79ea:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    79ec:	4b03      	ldr	r3, [pc, #12]	; (79fc <TC0_Handler+0x14>)
    79ee:	681b      	ldr	r3, [r3, #0]
    79f0:	4618      	mov	r0, r3
    79f2:	4b03      	ldr	r3, [pc, #12]	; (7a00 <TC0_Handler+0x18>)
    79f4:	4798      	blx	r3
}
    79f6:	bf00      	nop
    79f8:	bd80      	pop	{r7, pc}
    79fa:	bf00      	nop
    79fc:	20000c30 	.word	0x20000c30
    7a00:	00007945 	.word	0x00007945

00007a04 <TC1_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC1_Handler(void)
{
    7a04:	b580      	push	{r7, lr}
    7a06:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc1_dev);
    7a08:	4b03      	ldr	r3, [pc, #12]	; (7a18 <TC1_Handler+0x14>)
    7a0a:	681b      	ldr	r3, [r3, #0]
    7a0c:	4618      	mov	r0, r3
    7a0e:	4b03      	ldr	r3, [pc, #12]	; (7a1c <TC1_Handler+0x18>)
    7a10:	4798      	blx	r3
}
    7a12:	bf00      	nop
    7a14:	bd80      	pop	{r7, pc}
    7a16:	bf00      	nop
    7a18:	20000c34 	.word	0x20000c34
    7a1c:	00007945 	.word	0x00007945

00007a20 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    7a20:	b580      	push	{r7, lr}
    7a22:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    7a24:	4b03      	ldr	r3, [pc, #12]	; (7a34 <TC2_Handler+0x14>)
    7a26:	681b      	ldr	r3, [r3, #0]
    7a28:	4618      	mov	r0, r3
    7a2a:	4b03      	ldr	r3, [pc, #12]	; (7a38 <TC2_Handler+0x18>)
    7a2c:	4798      	blx	r3
}
    7a2e:	bf00      	nop
    7a30:	bd80      	pop	{r7, pc}
    7a32:	bf00      	nop
    7a34:	20000c38 	.word	0x20000c38
    7a38:	00007945 	.word	0x00007945

00007a3c <TC3_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC3_Handler(void)
{
    7a3c:	b580      	push	{r7, lr}
    7a3e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc3_dev);
    7a40:	4b03      	ldr	r3, [pc, #12]	; (7a50 <TC3_Handler+0x14>)
    7a42:	681b      	ldr	r3, [r3, #0]
    7a44:	4618      	mov	r0, r3
    7a46:	4b03      	ldr	r3, [pc, #12]	; (7a54 <TC3_Handler+0x18>)
    7a48:	4798      	blx	r3
}
    7a4a:	bf00      	nop
    7a4c:	bd80      	pop	{r7, pc}
    7a4e:	bf00      	nop
    7a50:	20000c3c 	.word	0x20000c3c
    7a54:	00007945 	.word	0x00007945

00007a58 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    7a58:	b580      	push	{r7, lr}
    7a5a:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    7a5c:	4b03      	ldr	r3, [pc, #12]	; (7a6c <TC7_Handler+0x14>)
    7a5e:	681b      	ldr	r3, [r3, #0]
    7a60:	4618      	mov	r0, r3
    7a62:	4b03      	ldr	r3, [pc, #12]	; (7a70 <TC7_Handler+0x18>)
    7a64:	4798      	blx	r3
}
    7a66:	bf00      	nop
    7a68:	bd80      	pop	{r7, pc}
    7a6a:	bf00      	nop
    7a6c:	20000c40 	.word	0x20000c40
    7a70:	0000797d 	.word	0x0000797d

00007a74 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    7a74:	b580      	push	{r7, lr}
    7a76:	b084      	sub	sp, #16
    7a78:	af00      	add	r7, sp, #0
    7a7a:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    7a7c:	6878      	ldr	r0, [r7, #4]
    7a7e:	4b13      	ldr	r3, [pc, #76]	; (7acc <get_tc_index+0x58>)
    7a80:	4798      	blx	r3
    7a82:	4603      	mov	r3, r0
    7a84:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    7a86:	2300      	movs	r3, #0
    7a88:	73fb      	strb	r3, [r7, #15]
    7a8a:	e010      	b.n	7aae <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    7a8c:	7bfa      	ldrb	r2, [r7, #15]
    7a8e:	4910      	ldr	r1, [pc, #64]	; (7ad0 <get_tc_index+0x5c>)
    7a90:	4613      	mov	r3, r2
    7a92:	009b      	lsls	r3, r3, #2
    7a94:	4413      	add	r3, r2
    7a96:	009b      	lsls	r3, r3, #2
    7a98:	440b      	add	r3, r1
    7a9a:	781b      	ldrb	r3, [r3, #0]
    7a9c:	7bba      	ldrb	r2, [r7, #14]
    7a9e:	429a      	cmp	r2, r3
    7aa0:	d102      	bne.n	7aa8 <get_tc_index+0x34>
			return i;
    7aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7aa6:	e00d      	b.n	7ac4 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    7aa8:	7bfb      	ldrb	r3, [r7, #15]
    7aaa:	3301      	adds	r3, #1
    7aac:	73fb      	strb	r3, [r7, #15]
    7aae:	7bfb      	ldrb	r3, [r7, #15]
    7ab0:	2b04      	cmp	r3, #4
    7ab2:	d9eb      	bls.n	7a8c <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    7ab4:	f240 2206 	movw	r2, #518	; 0x206
    7ab8:	4906      	ldr	r1, [pc, #24]	; (7ad4 <get_tc_index+0x60>)
    7aba:	2000      	movs	r0, #0
    7abc:	4b06      	ldr	r3, [pc, #24]	; (7ad8 <get_tc_index+0x64>)
    7abe:	4798      	blx	r3
	return -1;
    7ac0:	f04f 33ff 	mov.w	r3, #4294967295
}
    7ac4:	4618      	mov	r0, r3
    7ac6:	3710      	adds	r7, #16
    7ac8:	46bd      	mov	sp, r7
    7aca:	bd80      	pop	{r7, pc}
    7acc:	00007b61 	.word	0x00007b61
    7ad0:	20000048 	.word	0x20000048
    7ad4:	00013194 	.word	0x00013194
    7ad8:	00002edd 	.word	0x00002edd

00007adc <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    7adc:	b480      	push	{r7}
    7ade:	b083      	sub	sp, #12
    7ae0:	af00      	add	r7, sp, #0
    7ae2:	6078      	str	r0, [r7, #4]
    7ae4:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    7ae6:	687b      	ldr	r3, [r7, #4]
    7ae8:	4a13      	ldr	r2, [pc, #76]	; (7b38 <_tc_init_irq_param+0x5c>)
    7aea:	4293      	cmp	r3, r2
    7aec:	d102      	bne.n	7af4 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    7aee:	4a13      	ldr	r2, [pc, #76]	; (7b3c <_tc_init_irq_param+0x60>)
    7af0:	683b      	ldr	r3, [r7, #0]
    7af2:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC1) {
    7af4:	687b      	ldr	r3, [r7, #4]
    7af6:	4a12      	ldr	r2, [pc, #72]	; (7b40 <_tc_init_irq_param+0x64>)
    7af8:	4293      	cmp	r3, r2
    7afa:	d102      	bne.n	7b02 <_tc_init_irq_param+0x26>
		_tc1_dev = (struct _timer_device *)dev;
    7afc:	4a11      	ldr	r2, [pc, #68]	; (7b44 <_tc_init_irq_param+0x68>)
    7afe:	683b      	ldr	r3, [r7, #0]
    7b00:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    7b02:	687b      	ldr	r3, [r7, #4]
    7b04:	4a10      	ldr	r2, [pc, #64]	; (7b48 <_tc_init_irq_param+0x6c>)
    7b06:	4293      	cmp	r3, r2
    7b08:	d102      	bne.n	7b10 <_tc_init_irq_param+0x34>
		_tc2_dev = (struct _timer_device *)dev;
    7b0a:	4a10      	ldr	r2, [pc, #64]	; (7b4c <_tc_init_irq_param+0x70>)
    7b0c:	683b      	ldr	r3, [r7, #0]
    7b0e:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC3) {
    7b10:	687b      	ldr	r3, [r7, #4]
    7b12:	4a0f      	ldr	r2, [pc, #60]	; (7b50 <_tc_init_irq_param+0x74>)
    7b14:	4293      	cmp	r3, r2
    7b16:	d102      	bne.n	7b1e <_tc_init_irq_param+0x42>
		_tc3_dev = (struct _timer_device *)dev;
    7b18:	4a0e      	ldr	r2, [pc, #56]	; (7b54 <_tc_init_irq_param+0x78>)
    7b1a:	683b      	ldr	r3, [r7, #0]
    7b1c:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    7b1e:	687b      	ldr	r3, [r7, #4]
    7b20:	4a0d      	ldr	r2, [pc, #52]	; (7b58 <_tc_init_irq_param+0x7c>)
    7b22:	4293      	cmp	r3, r2
    7b24:	d102      	bne.n	7b2c <_tc_init_irq_param+0x50>
		_tc7_dev = (struct _pwm_device *)dev;
    7b26:	4a0d      	ldr	r2, [pc, #52]	; (7b5c <_tc_init_irq_param+0x80>)
    7b28:	683b      	ldr	r3, [r7, #0]
    7b2a:	6013      	str	r3, [r2, #0]
	}
}
    7b2c:	bf00      	nop
    7b2e:	370c      	adds	r7, #12
    7b30:	46bd      	mov	sp, r7
    7b32:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b36:	4770      	bx	lr
    7b38:	40003800 	.word	0x40003800
    7b3c:	20000c30 	.word	0x20000c30
    7b40:	40003c00 	.word	0x40003c00
    7b44:	20000c34 	.word	0x20000c34
    7b48:	4101a000 	.word	0x4101a000
    7b4c:	20000c38 	.word	0x20000c38
    7b50:	4101c000 	.word	0x4101c000
    7b54:	20000c3c 	.word	0x20000c3c
    7b58:	43001800 	.word	0x43001800
    7b5c:	20000c40 	.word	0x20000c40

00007b60 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    7b60:	b4b0      	push	{r4, r5, r7}
    7b62:	b08d      	sub	sp, #52	; 0x34
    7b64:	af00      	add	r7, sp, #0
    7b66:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    7b68:	4b13      	ldr	r3, [pc, #76]	; (7bb8 <_get_hardware_offset+0x58>)
    7b6a:	f107 040c 	add.w	r4, r7, #12
    7b6e:	461d      	mov	r5, r3
    7b70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7b72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    7b74:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    7b78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    7b7c:	2300      	movs	r3, #0
    7b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    7b80:	e010      	b.n	7ba4 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    7b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7b84:	009b      	lsls	r3, r3, #2
    7b86:	f107 0230 	add.w	r2, r7, #48	; 0x30
    7b8a:	4413      	add	r3, r2
    7b8c:	f853 3c24 	ldr.w	r3, [r3, #-36]
    7b90:	461a      	mov	r2, r3
    7b92:	687b      	ldr	r3, [r7, #4]
    7b94:	429a      	cmp	r2, r3
    7b96:	d102      	bne.n	7b9e <_get_hardware_offset+0x3e>
			return i;
    7b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7b9a:	b2db      	uxtb	r3, r3
    7b9c:	e006      	b.n	7bac <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    7b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7ba0:	3301      	adds	r3, #1
    7ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
    7ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7ba6:	2b07      	cmp	r3, #7
    7ba8:	d9eb      	bls.n	7b82 <_get_hardware_offset+0x22>
		}
	}
	return 0;
    7baa:	2300      	movs	r3, #0
}
    7bac:	4618      	mov	r0, r3
    7bae:	3734      	adds	r7, #52	; 0x34
    7bb0:	46bd      	mov	sp, r7
    7bb2:	bcb0      	pop	{r4, r5, r7}
    7bb4:	4770      	bx	lr
    7bb6:	bf00      	nop
    7bb8:	000131a8 	.word	0x000131a8

00007bbc <__NVIC_EnableIRQ>:
{
    7bbc:	b480      	push	{r7}
    7bbe:	b083      	sub	sp, #12
    7bc0:	af00      	add	r7, sp, #0
    7bc2:	4603      	mov	r3, r0
    7bc4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7bc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7bca:	2b00      	cmp	r3, #0
    7bcc:	db0b      	blt.n	7be6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7bce:	4909      	ldr	r1, [pc, #36]	; (7bf4 <__NVIC_EnableIRQ+0x38>)
    7bd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7bd4:	095b      	lsrs	r3, r3, #5
    7bd6:	88fa      	ldrh	r2, [r7, #6]
    7bd8:	f002 021f 	and.w	r2, r2, #31
    7bdc:	2001      	movs	r0, #1
    7bde:	fa00 f202 	lsl.w	r2, r0, r2
    7be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7be6:	bf00      	nop
    7be8:	370c      	adds	r7, #12
    7bea:	46bd      	mov	sp, r7
    7bec:	f85d 7b04 	ldr.w	r7, [sp], #4
    7bf0:	4770      	bx	lr
    7bf2:	bf00      	nop
    7bf4:	e000e100 	.word	0xe000e100

00007bf8 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    7bf8:	b480      	push	{r7}
    7bfa:	b087      	sub	sp, #28
    7bfc:	af00      	add	r7, sp, #0
    7bfe:	60f8      	str	r0, [r7, #12]
    7c00:	460b      	mov	r3, r1
    7c02:	607a      	str	r2, [r7, #4]
    7c04:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    7c06:	7afa      	ldrb	r2, [r7, #11]
    7c08:	68f9      	ldr	r1, [r7, #12]
    7c0a:	4613      	mov	r3, r2
    7c0c:	009b      	lsls	r3, r3, #2
    7c0e:	4413      	add	r3, r2
    7c10:	009b      	lsls	r3, r3, #2
    7c12:	440b      	add	r3, r1
    7c14:	3340      	adds	r3, #64	; 0x40
    7c16:	681b      	ldr	r3, [r3, #0]
    7c18:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    7c1a:	697a      	ldr	r2, [r7, #20]
    7c1c:	687b      	ldr	r3, [r7, #4]
    7c1e:	4013      	ands	r3, r2
    7c20:	617b      	str	r3, [r7, #20]
	return tmp;
    7c22:	697b      	ldr	r3, [r7, #20]
}
    7c24:	4618      	mov	r0, r3
    7c26:	371c      	adds	r7, #28
    7c28:	46bd      	mov	sp, r7
    7c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c2e:	4770      	bx	lr

00007c30 <hri_oscctrl_get_STATUS_reg>:
{
    7c30:	b480      	push	{r7}
    7c32:	b085      	sub	sp, #20
    7c34:	af00      	add	r7, sp, #0
    7c36:	6078      	str	r0, [r7, #4]
    7c38:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    7c3a:	687b      	ldr	r3, [r7, #4]
    7c3c:	691b      	ldr	r3, [r3, #16]
    7c3e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7c40:	68fa      	ldr	r2, [r7, #12]
    7c42:	683b      	ldr	r3, [r7, #0]
    7c44:	4013      	ands	r3, r2
    7c46:	60fb      	str	r3, [r7, #12]
	return tmp;
    7c48:	68fb      	ldr	r3, [r7, #12]
}
    7c4a:	4618      	mov	r0, r3
    7c4c:	3714      	adds	r7, #20
    7c4e:	46bd      	mov	sp, r7
    7c50:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c54:	4770      	bx	lr

00007c56 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    7c56:	b480      	push	{r7}
    7c58:	b085      	sub	sp, #20
    7c5a:	af00      	add	r7, sp, #0
    7c5c:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    7c5e:	687b      	ldr	r3, [r7, #4]
    7c60:	f893 3020 	ldrb.w	r3, [r3, #32]
    7c64:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    7c66:	7bfb      	ldrb	r3, [r7, #15]
    7c68:	f003 0301 	and.w	r3, r3, #1
    7c6c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    7c6e:	7bfb      	ldrb	r3, [r7, #15]
    7c70:	2b00      	cmp	r3, #0
    7c72:	bf14      	ite	ne
    7c74:	2301      	movne	r3, #1
    7c76:	2300      	moveq	r3, #0
    7c78:	b2db      	uxtb	r3, r3
}
    7c7a:	4618      	mov	r0, r3
    7c7c:	3714      	adds	r7, #20
    7c7e:	46bd      	mov	sp, r7
    7c80:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c84:	4770      	bx	lr

00007c86 <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    7c86:	b480      	push	{r7}
    7c88:	b083      	sub	sp, #12
    7c8a:	af00      	add	r7, sp, #0
    7c8c:	6078      	str	r0, [r7, #4]
    7c8e:	460b      	mov	r3, r1
    7c90:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    7c92:	bf00      	nop
    7c94:	687b      	ldr	r3, [r7, #4]
    7c96:	789b      	ldrb	r3, [r3, #2]
    7c98:	b2da      	uxtb	r2, r3
    7c9a:	78fb      	ldrb	r3, [r7, #3]
    7c9c:	4013      	ands	r3, r2
    7c9e:	b2db      	uxtb	r3, r3
    7ca0:	2b00      	cmp	r3, #0
    7ca2:	d1f7      	bne.n	7c94 <hri_usb_wait_for_sync+0xe>
	};
}
    7ca4:	bf00      	nop
    7ca6:	370c      	adds	r7, #12
    7ca8:	46bd      	mov	sp, r7
    7caa:	f85d 7b04 	ldr.w	r7, [sp], #4
    7cae:	4770      	bx	lr

00007cb0 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    7cb0:	b480      	push	{r7}
    7cb2:	b083      	sub	sp, #12
    7cb4:	af00      	add	r7, sp, #0
    7cb6:	6078      	str	r0, [r7, #4]
    7cb8:	460b      	mov	r3, r1
    7cba:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    7cbc:	687b      	ldr	r3, [r7, #4]
    7cbe:	789b      	ldrb	r3, [r3, #2]
    7cc0:	b2da      	uxtb	r2, r3
    7cc2:	78fb      	ldrb	r3, [r7, #3]
    7cc4:	4013      	ands	r3, r2
    7cc6:	b2db      	uxtb	r3, r3
    7cc8:	2b00      	cmp	r3, #0
    7cca:	bf14      	ite	ne
    7ccc:	2301      	movne	r3, #1
    7cce:	2300      	moveq	r3, #0
    7cd0:	b2db      	uxtb	r3, r3
}
    7cd2:	4618      	mov	r0, r3
    7cd4:	370c      	adds	r7, #12
    7cd6:	46bd      	mov	sp, r7
    7cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
    7cdc:	4770      	bx	lr

00007cde <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    7cde:	b480      	push	{r7}
    7ce0:	b085      	sub	sp, #20
    7ce2:	af00      	add	r7, sp, #0
    7ce4:	6078      	str	r0, [r7, #4]
    7ce6:	460b      	mov	r3, r1
    7ce8:	70fb      	strb	r3, [r7, #3]
    7cea:	4613      	mov	r3, r2
    7cec:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    7cee:	78fb      	ldrb	r3, [r7, #3]
    7cf0:	687a      	ldr	r2, [r7, #4]
    7cf2:	3308      	adds	r3, #8
    7cf4:	015b      	lsls	r3, r3, #5
    7cf6:	4413      	add	r3, r2
    7cf8:	3307      	adds	r3, #7
    7cfa:	781b      	ldrb	r3, [r3, #0]
    7cfc:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    7cfe:	7bfa      	ldrb	r2, [r7, #15]
    7d00:	78bb      	ldrb	r3, [r7, #2]
    7d02:	4013      	ands	r3, r2
    7d04:	73fb      	strb	r3, [r7, #15]
	return tmp;
    7d06:	7bfb      	ldrb	r3, [r7, #15]
}
    7d08:	4618      	mov	r0, r3
    7d0a:	3714      	adds	r7, #20
    7d0c:	46bd      	mov	sp, r7
    7d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d12:	4770      	bx	lr

00007d14 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    7d14:	b480      	push	{r7}
    7d16:	b083      	sub	sp, #12
    7d18:	af00      	add	r7, sp, #0
    7d1a:	6078      	str	r0, [r7, #4]
    7d1c:	460b      	mov	r3, r1
    7d1e:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    7d20:	78fb      	ldrb	r3, [r7, #3]
    7d22:	687a      	ldr	r2, [r7, #4]
    7d24:	3308      	adds	r3, #8
    7d26:	015b      	lsls	r3, r3, #5
    7d28:	4413      	add	r3, r2
    7d2a:	3307      	adds	r3, #7
    7d2c:	781b      	ldrb	r3, [r3, #0]
    7d2e:	b2db      	uxtb	r3, r3
}
    7d30:	4618      	mov	r0, r3
    7d32:	370c      	adds	r7, #12
    7d34:	46bd      	mov	sp, r7
    7d36:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d3a:	4770      	bx	lr

00007d3c <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    7d3c:	b480      	push	{r7}
    7d3e:	b083      	sub	sp, #12
    7d40:	af00      	add	r7, sp, #0
    7d42:	6078      	str	r0, [r7, #4]
    7d44:	460b      	mov	r3, r1
    7d46:	70fb      	strb	r3, [r7, #3]
    7d48:	4613      	mov	r3, r2
    7d4a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    7d4c:	78fb      	ldrb	r3, [r7, #3]
    7d4e:	687a      	ldr	r2, [r7, #4]
    7d50:	3308      	adds	r3, #8
    7d52:	015b      	lsls	r3, r3, #5
    7d54:	4413      	add	r3, r2
    7d56:	3307      	adds	r3, #7
    7d58:	78ba      	ldrb	r2, [r7, #2]
    7d5a:	701a      	strb	r2, [r3, #0]
}
    7d5c:	bf00      	nop
    7d5e:	370c      	adds	r7, #12
    7d60:	46bd      	mov	sp, r7
    7d62:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d66:	4770      	bx	lr

00007d68 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    7d68:	b480      	push	{r7}
    7d6a:	b083      	sub	sp, #12
    7d6c:	af00      	add	r7, sp, #0
    7d6e:	6078      	str	r0, [r7, #4]
    7d70:	460b      	mov	r3, r1
    7d72:	70fb      	strb	r3, [r7, #3]
    7d74:	4613      	mov	r3, r2
    7d76:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    7d78:	78fb      	ldrb	r3, [r7, #3]
    7d7a:	687a      	ldr	r2, [r7, #4]
    7d7c:	3308      	adds	r3, #8
    7d7e:	015b      	lsls	r3, r3, #5
    7d80:	4413      	add	r3, r2
    7d82:	3305      	adds	r3, #5
    7d84:	78ba      	ldrb	r2, [r7, #2]
    7d86:	701a      	strb	r2, [r3, #0]
}
    7d88:	bf00      	nop
    7d8a:	370c      	adds	r7, #12
    7d8c:	46bd      	mov	sp, r7
    7d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d92:	4770      	bx	lr

00007d94 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    7d94:	b480      	push	{r7}
    7d96:	b083      	sub	sp, #12
    7d98:	af00      	add	r7, sp, #0
    7d9a:	6078      	str	r0, [r7, #4]
    7d9c:	460b      	mov	r3, r1
    7d9e:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    7da0:	78fb      	ldrb	r3, [r7, #3]
    7da2:	687a      	ldr	r2, [r7, #4]
    7da4:	3308      	adds	r3, #8
    7da6:	015b      	lsls	r3, r3, #5
    7da8:	4413      	add	r3, r2
    7daa:	3306      	adds	r3, #6
    7dac:	781b      	ldrb	r3, [r3, #0]
    7dae:	b2db      	uxtb	r3, r3
}
    7db0:	4618      	mov	r0, r3
    7db2:	370c      	adds	r7, #12
    7db4:	46bd      	mov	sp, r7
    7db6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7dba:	4770      	bx	lr

00007dbc <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    7dbc:	b480      	push	{r7}
    7dbe:	b083      	sub	sp, #12
    7dc0:	af00      	add	r7, sp, #0
    7dc2:	6078      	str	r0, [r7, #4]
    7dc4:	460b      	mov	r3, r1
    7dc6:	70fb      	strb	r3, [r7, #3]
    7dc8:	4613      	mov	r3, r2
    7dca:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    7dcc:	78fb      	ldrb	r3, [r7, #3]
    7dce:	687a      	ldr	r2, [r7, #4]
    7dd0:	3308      	adds	r3, #8
    7dd2:	015b      	lsls	r3, r3, #5
    7dd4:	4413      	add	r3, r2
    7dd6:	3304      	adds	r3, #4
    7dd8:	78ba      	ldrb	r2, [r7, #2]
    7dda:	701a      	strb	r2, [r3, #0]
}
    7ddc:	bf00      	nop
    7dde:	370c      	adds	r7, #12
    7de0:	46bd      	mov	sp, r7
    7de2:	f85d 7b04 	ldr.w	r7, [sp], #4
    7de6:	4770      	bx	lr

00007de8 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    7de8:	b480      	push	{r7}
    7dea:	b083      	sub	sp, #12
    7dec:	af00      	add	r7, sp, #0
    7dee:	6078      	str	r0, [r7, #4]
    7df0:	460b      	mov	r3, r1
    7df2:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    7df4:	78fb      	ldrb	r3, [r7, #3]
    7df6:	687a      	ldr	r2, [r7, #4]
    7df8:	015b      	lsls	r3, r3, #5
    7dfa:	4413      	add	r3, r2
    7dfc:	f503 7384 	add.w	r3, r3, #264	; 0x108
    7e00:	2210      	movs	r2, #16
    7e02:	701a      	strb	r2, [r3, #0]
}
    7e04:	bf00      	nop
    7e06:	370c      	adds	r7, #12
    7e08:	46bd      	mov	sp, r7
    7e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e0e:	4770      	bx	lr

00007e10 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    7e10:	b480      	push	{r7}
    7e12:	b083      	sub	sp, #12
    7e14:	af00      	add	r7, sp, #0
    7e16:	6078      	str	r0, [r7, #4]
    7e18:	460b      	mov	r3, r1
    7e1a:	70fb      	strb	r3, [r7, #3]
    7e1c:	4613      	mov	r3, r2
    7e1e:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    7e20:	78fb      	ldrb	r3, [r7, #3]
    7e22:	687a      	ldr	r2, [r7, #4]
    7e24:	015b      	lsls	r3, r3, #5
    7e26:	4413      	add	r3, r2
    7e28:	f203 1309 	addw	r3, r3, #265	; 0x109
    7e2c:	78ba      	ldrb	r2, [r7, #2]
    7e2e:	701a      	strb	r2, [r3, #0]
}
    7e30:	bf00      	nop
    7e32:	370c      	adds	r7, #12
    7e34:	46bd      	mov	sp, r7
    7e36:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e3a:	4770      	bx	lr

00007e3c <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    7e3c:	b480      	push	{r7}
    7e3e:	b083      	sub	sp, #12
    7e40:	af00      	add	r7, sp, #0
    7e42:	6078      	str	r0, [r7, #4]
    7e44:	460b      	mov	r3, r1
    7e46:	70fb      	strb	r3, [r7, #3]
    7e48:	4613      	mov	r3, r2
    7e4a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    7e4c:	78fb      	ldrb	r3, [r7, #3]
    7e4e:	687a      	ldr	r2, [r7, #4]
    7e50:	015b      	lsls	r3, r3, #5
    7e52:	4413      	add	r3, r2
    7e54:	f503 7384 	add.w	r3, r3, #264	; 0x108
    7e58:	78ba      	ldrb	r2, [r7, #2]
    7e5a:	701a      	strb	r2, [r3, #0]
}
    7e5c:	bf00      	nop
    7e5e:	370c      	adds	r7, #12
    7e60:	46bd      	mov	sp, r7
    7e62:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e66:	4770      	bx	lr

00007e68 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    7e68:	b480      	push	{r7}
    7e6a:	b085      	sub	sp, #20
    7e6c:	af00      	add	r7, sp, #0
    7e6e:	6078      	str	r0, [r7, #4]
    7e70:	460b      	mov	r3, r1
    7e72:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    7e74:	78fb      	ldrb	r3, [r7, #3]
    7e76:	687a      	ldr	r2, [r7, #4]
    7e78:	3308      	adds	r3, #8
    7e7a:	015b      	lsls	r3, r3, #5
    7e7c:	4413      	add	r3, r2
    7e7e:	781b      	ldrb	r3, [r3, #0]
    7e80:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    7e82:	7bfb      	ldrb	r3, [r7, #15]
    7e84:	f003 0307 	and.w	r3, r3, #7
    7e88:	73fb      	strb	r3, [r7, #15]
	return tmp;
    7e8a:	7bfb      	ldrb	r3, [r7, #15]
}
    7e8c:	4618      	mov	r0, r3
    7e8e:	3714      	adds	r7, #20
    7e90:	46bd      	mov	sp, r7
    7e92:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e96:	4770      	bx	lr

00007e98 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    7e98:	b480      	push	{r7}
    7e9a:	b085      	sub	sp, #20
    7e9c:	af00      	add	r7, sp, #0
    7e9e:	6078      	str	r0, [r7, #4]
    7ea0:	460b      	mov	r3, r1
    7ea2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    7ea4:	78fb      	ldrb	r3, [r7, #3]
    7ea6:	687a      	ldr	r2, [r7, #4]
    7ea8:	3308      	adds	r3, #8
    7eaa:	015b      	lsls	r3, r3, #5
    7eac:	4413      	add	r3, r2
    7eae:	781b      	ldrb	r3, [r3, #0]
    7eb0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    7eb2:	7bfb      	ldrb	r3, [r7, #15]
    7eb4:	091b      	lsrs	r3, r3, #4
    7eb6:	b2db      	uxtb	r3, r3
    7eb8:	f003 0307 	and.w	r3, r3, #7
    7ebc:	73fb      	strb	r3, [r7, #15]
	return tmp;
    7ebe:	7bfb      	ldrb	r3, [r7, #15]
}
    7ec0:	4618      	mov	r0, r3
    7ec2:	3714      	adds	r7, #20
    7ec4:	46bd      	mov	sp, r7
    7ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7eca:	4770      	bx	lr

00007ecc <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    7ecc:	b480      	push	{r7}
    7ece:	b083      	sub	sp, #12
    7ed0:	af00      	add	r7, sp, #0
    7ed2:	6078      	str	r0, [r7, #4]
    7ed4:	460b      	mov	r3, r1
    7ed6:	70fb      	strb	r3, [r7, #3]
    7ed8:	4613      	mov	r3, r2
    7eda:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    7edc:	78fb      	ldrb	r3, [r7, #3]
    7ede:	687a      	ldr	r2, [r7, #4]
    7ee0:	3308      	adds	r3, #8
    7ee2:	015b      	lsls	r3, r3, #5
    7ee4:	4413      	add	r3, r2
    7ee6:	78ba      	ldrb	r2, [r7, #2]
    7ee8:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    7eea:	bf00      	nop
    7eec:	370c      	adds	r7, #12
    7eee:	46bd      	mov	sp, r7
    7ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ef4:	4770      	bx	lr

00007ef6 <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    7ef6:	b480      	push	{r7}
    7ef8:	b083      	sub	sp, #12
    7efa:	af00      	add	r7, sp, #0
    7efc:	6078      	str	r0, [r7, #4]
    7efe:	460b      	mov	r3, r1
    7f00:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    7f02:	78fb      	ldrb	r3, [r7, #3]
    7f04:	687a      	ldr	r2, [r7, #4]
    7f06:	3308      	adds	r3, #8
    7f08:	015b      	lsls	r3, r3, #5
    7f0a:	4413      	add	r3, r2
    7f0c:	781b      	ldrb	r3, [r3, #0]
    7f0e:	b2db      	uxtb	r3, r3
}
    7f10:	4618      	mov	r0, r3
    7f12:	370c      	adds	r7, #12
    7f14:	46bd      	mov	sp, r7
    7f16:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f1a:	4770      	bx	lr

00007f1c <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    7f1c:	b480      	push	{r7}
    7f1e:	b083      	sub	sp, #12
    7f20:	af00      	add	r7, sp, #0
    7f22:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    7f24:	687b      	ldr	r3, [r7, #4]
    7f26:	8b9b      	ldrh	r3, [r3, #28]
    7f28:	b29b      	uxth	r3, r3
}
    7f2a:	4618      	mov	r0, r3
    7f2c:	370c      	adds	r7, #12
    7f2e:	46bd      	mov	sp, r7
    7f30:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f34:	4770      	bx	lr

00007f36 <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    7f36:	b480      	push	{r7}
    7f38:	b083      	sub	sp, #12
    7f3a:	af00      	add	r7, sp, #0
    7f3c:	6078      	str	r0, [r7, #4]
    7f3e:	460b      	mov	r3, r1
    7f40:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    7f42:	687b      	ldr	r3, [r7, #4]
    7f44:	887a      	ldrh	r2, [r7, #2]
    7f46:	839a      	strh	r2, [r3, #28]
}
    7f48:	bf00      	nop
    7f4a:	370c      	adds	r7, #12
    7f4c:	46bd      	mov	sp, r7
    7f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f52:	4770      	bx	lr

00007f54 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    7f54:	b480      	push	{r7}
    7f56:	b083      	sub	sp, #12
    7f58:	af00      	add	r7, sp, #0
    7f5a:	6078      	str	r0, [r7, #4]
    7f5c:	460b      	mov	r3, r1
    7f5e:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    7f60:	687b      	ldr	r3, [r7, #4]
    7f62:	887a      	ldrh	r2, [r7, #2]
    7f64:	831a      	strh	r2, [r3, #24]
}
    7f66:	bf00      	nop
    7f68:	370c      	adds	r7, #12
    7f6a:	46bd      	mov	sp, r7
    7f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f70:	4770      	bx	lr

00007f72 <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    7f72:	b480      	push	{r7}
    7f74:	b083      	sub	sp, #12
    7f76:	af00      	add	r7, sp, #0
    7f78:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    7f7a:	687b      	ldr	r3, [r7, #4]
    7f7c:	8b1b      	ldrh	r3, [r3, #24]
    7f7e:	b29b      	uxth	r3, r3
}
    7f80:	4618      	mov	r0, r3
    7f82:	370c      	adds	r7, #12
    7f84:	46bd      	mov	sp, r7
    7f86:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f8a:	4770      	bx	lr

00007f8c <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    7f8c:	b480      	push	{r7}
    7f8e:	b083      	sub	sp, #12
    7f90:	af00      	add	r7, sp, #0
    7f92:	6078      	str	r0, [r7, #4]
    7f94:	460b      	mov	r3, r1
    7f96:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    7f98:	687b      	ldr	r3, [r7, #4]
    7f9a:	887a      	ldrh	r2, [r7, #2]
    7f9c:	829a      	strh	r2, [r3, #20]
}
    7f9e:	bf00      	nop
    7fa0:	370c      	adds	r7, #12
    7fa2:	46bd      	mov	sp, r7
    7fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
    7fa8:	4770      	bx	lr

00007faa <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    7faa:	b480      	push	{r7}
    7fac:	b085      	sub	sp, #20
    7fae:	af00      	add	r7, sp, #0
    7fb0:	6078      	str	r0, [r7, #4]
    7fb2:	460b      	mov	r3, r1
    7fb4:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    7fb6:	687b      	ldr	r3, [r7, #4]
    7fb8:	789b      	ldrb	r3, [r3, #2]
    7fba:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    7fbc:	7bfa      	ldrb	r2, [r7, #15]
    7fbe:	78fb      	ldrb	r3, [r7, #3]
    7fc0:	4013      	ands	r3, r2
    7fc2:	73fb      	strb	r3, [r7, #15]
	return tmp;
    7fc4:	7bfb      	ldrb	r3, [r7, #15]
}
    7fc6:	4618      	mov	r0, r3
    7fc8:	3714      	adds	r7, #20
    7fca:	46bd      	mov	sp, r7
    7fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    7fd0:	4770      	bx	lr
	...

00007fd4 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7fd4:	b580      	push	{r7, lr}
    7fd6:	b082      	sub	sp, #8
    7fd8:	af00      	add	r7, sp, #0
    7fda:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    7fdc:	687b      	ldr	r3, [r7, #4]
    7fde:	781b      	ldrb	r3, [r3, #0]
    7fe0:	b2db      	uxtb	r3, r3
    7fe2:	f023 0302 	bic.w	r3, r3, #2
    7fe6:	b2da      	uxtb	r2, r3
    7fe8:	687b      	ldr	r3, [r7, #4]
    7fea:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    7fec:	2103      	movs	r1, #3
    7fee:	6878      	ldr	r0, [r7, #4]
    7ff0:	4b02      	ldr	r3, [pc, #8]	; (7ffc <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    7ff2:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    7ff4:	bf00      	nop
    7ff6:	3708      	adds	r7, #8
    7ff8:	46bd      	mov	sp, r7
    7ffa:	bd80      	pop	{r7, pc}
    7ffc:	00007c87 	.word	0x00007c87

00008000 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    8000:	b580      	push	{r7, lr}
    8002:	b084      	sub	sp, #16
    8004:	af00      	add	r7, sp, #0
    8006:	6078      	str	r0, [r7, #4]
    8008:	460b      	mov	r3, r1
    800a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    800c:	2103      	movs	r1, #3
    800e:	6878      	ldr	r0, [r7, #4]
    8010:	4b06      	ldr	r3, [pc, #24]	; (802c <hri_usb_get_CTRLA_reg+0x2c>)
    8012:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    8014:	687b      	ldr	r3, [r7, #4]
    8016:	781b      	ldrb	r3, [r3, #0]
    8018:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    801a:	7bfa      	ldrb	r2, [r7, #15]
    801c:	78fb      	ldrb	r3, [r7, #3]
    801e:	4013      	ands	r3, r2
    8020:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8022:	7bfb      	ldrb	r3, [r7, #15]
}
    8024:	4618      	mov	r0, r3
    8026:	3710      	adds	r7, #16
    8028:	46bd      	mov	sp, r7
    802a:	bd80      	pop	{r7, pc}
    802c:	00007c87 	.word	0x00007c87

00008030 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    8030:	b580      	push	{r7, lr}
    8032:	b082      	sub	sp, #8
    8034:	af00      	add	r7, sp, #0
    8036:	6078      	str	r0, [r7, #4]
    8038:	460b      	mov	r3, r1
    803a:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    803c:	687b      	ldr	r3, [r7, #4]
    803e:	78fa      	ldrb	r2, [r7, #3]
    8040:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    8042:	2103      	movs	r1, #3
    8044:	6878      	ldr	r0, [r7, #4]
    8046:	4b03      	ldr	r3, [pc, #12]	; (8054 <hri_usb_write_CTRLA_reg+0x24>)
    8048:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    804a:	bf00      	nop
    804c:	3708      	adds	r7, #8
    804e:	46bd      	mov	sp, r7
    8050:	bd80      	pop	{r7, pc}
    8052:	bf00      	nop
    8054:	00007c87 	.word	0x00007c87

00008058 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    8058:	b580      	push	{r7, lr}
    805a:	b082      	sub	sp, #8
    805c:	af00      	add	r7, sp, #0
    805e:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    8060:	2103      	movs	r1, #3
    8062:	6878      	ldr	r0, [r7, #4]
    8064:	4b04      	ldr	r3, [pc, #16]	; (8078 <hri_usb_read_CTRLA_reg+0x20>)
    8066:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    8068:	687b      	ldr	r3, [r7, #4]
    806a:	781b      	ldrb	r3, [r3, #0]
    806c:	b2db      	uxtb	r3, r3
}
    806e:	4618      	mov	r0, r3
    8070:	3708      	adds	r7, #8
    8072:	46bd      	mov	sp, r7
    8074:	bd80      	pop	{r7, pc}
    8076:	bf00      	nop
    8078:	00007c87 	.word	0x00007c87

0000807c <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    807c:	b480      	push	{r7}
    807e:	b083      	sub	sp, #12
    8080:	af00      	add	r7, sp, #0
    8082:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    8084:	687b      	ldr	r3, [r7, #4]
    8086:	891b      	ldrh	r3, [r3, #8]
    8088:	b29b      	uxth	r3, r3
    808a:	f023 0301 	bic.w	r3, r3, #1
    808e:	b29a      	uxth	r2, r3
    8090:	687b      	ldr	r3, [r7, #4]
    8092:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    8094:	bf00      	nop
    8096:	370c      	adds	r7, #12
    8098:	46bd      	mov	sp, r7
    809a:	f85d 7b04 	ldr.w	r7, [sp], #4
    809e:	4770      	bx	lr

000080a0 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    80a0:	b480      	push	{r7}
    80a2:	b083      	sub	sp, #12
    80a4:	af00      	add	r7, sp, #0
    80a6:	6078      	str	r0, [r7, #4]
    80a8:	460b      	mov	r3, r1
    80aa:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    80ac:	687b      	ldr	r3, [r7, #4]
    80ae:	887a      	ldrh	r2, [r7, #2]
    80b0:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    80b2:	bf00      	nop
    80b4:	370c      	adds	r7, #12
    80b6:	46bd      	mov	sp, r7
    80b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    80bc:	4770      	bx	lr

000080be <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    80be:	b480      	push	{r7}
    80c0:	b083      	sub	sp, #12
    80c2:	af00      	add	r7, sp, #0
    80c4:	6078      	str	r0, [r7, #4]
    80c6:	460b      	mov	r3, r1
    80c8:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    80ca:	687b      	ldr	r3, [r7, #4]
    80cc:	78fa      	ldrb	r2, [r7, #3]
    80ce:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    80d0:	bf00      	nop
    80d2:	370c      	adds	r7, #12
    80d4:	46bd      	mov	sp, r7
    80d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    80da:	4770      	bx	lr

000080dc <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    80dc:	b480      	push	{r7}
    80de:	b083      	sub	sp, #12
    80e0:	af00      	add	r7, sp, #0
    80e2:	6078      	str	r0, [r7, #4]
    80e4:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    80e6:	687b      	ldr	r3, [r7, #4]
    80e8:	683a      	ldr	r2, [r7, #0]
    80ea:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    80ec:	bf00      	nop
    80ee:	370c      	adds	r7, #12
    80f0:	46bd      	mov	sp, r7
    80f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    80f6:	4770      	bx	lr

000080f8 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    80f8:	b480      	push	{r7}
    80fa:	b083      	sub	sp, #12
    80fc:	af00      	add	r7, sp, #0
    80fe:	6078      	str	r0, [r7, #4]
    8100:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    8102:	2300      	movs	r3, #0
}
    8104:	4618      	mov	r0, r3
    8106:	370c      	adds	r7, #12
    8108:	46bd      	mov	sp, r7
    810a:	f85d 7b04 	ldr.w	r7, [sp], #4
    810e:	4770      	bx	lr

00008110 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    8110:	b480      	push	{r7}
    8112:	b085      	sub	sp, #20
    8114:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    8116:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    811a:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    811c:	4b28      	ldr	r3, [pc, #160]	; (81c0 <_usb_load_calib+0xb0>)
    811e:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    8120:	f003 031f 	and.w	r3, r3, #31
    8124:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    8126:	4b26      	ldr	r3, [pc, #152]	; (81c0 <_usb_load_calib+0xb0>)
    8128:	681b      	ldr	r3, [r3, #0]
    812a:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    812c:	f003 031f 	and.w	r3, r3, #31
    8130:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    8132:	4b23      	ldr	r3, [pc, #140]	; (81c0 <_usb_load_calib+0xb0>)
    8134:	681b      	ldr	r3, [r3, #0]
    8136:	0a9b      	lsrs	r3, r3, #10
    8138:	f003 0307 	and.w	r3, r3, #7
    813c:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    813e:	68fb      	ldr	r3, [r7, #12]
    8140:	2b00      	cmp	r3, #0
    8142:	d002      	beq.n	814a <_usb_load_calib+0x3a>
    8144:	68fb      	ldr	r3, [r7, #12]
    8146:	2b1f      	cmp	r3, #31
    8148:	d101      	bne.n	814e <_usb_load_calib+0x3e>
		pad_transn = 9;
    814a:	2309      	movs	r3, #9
    814c:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    814e:	68bb      	ldr	r3, [r7, #8]
    8150:	2b00      	cmp	r3, #0
    8152:	d002      	beq.n	815a <_usb_load_calib+0x4a>
    8154:	68bb      	ldr	r3, [r7, #8]
    8156:	2b1f      	cmp	r3, #31
    8158:	d101      	bne.n	815e <_usb_load_calib+0x4e>
		pad_transp = 25;
    815a:	2319      	movs	r3, #25
    815c:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    815e:	687b      	ldr	r3, [r7, #4]
    8160:	2b00      	cmp	r3, #0
    8162:	d002      	beq.n	816a <_usb_load_calib+0x5a>
    8164:	687b      	ldr	r3, [r7, #4]
    8166:	2b07      	cmp	r3, #7
    8168:	d101      	bne.n	816e <_usb_load_calib+0x5e>
		pad_trim = 6;
    816a:	2306      	movs	r3, #6
    816c:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    816e:	68fb      	ldr	r3, [r7, #12]
    8170:	b29b      	uxth	r3, r3
    8172:	019b      	lsls	r3, r3, #6
    8174:	b29b      	uxth	r3, r3
    8176:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    817a:	b29a      	uxth	r2, r3
    817c:	68bb      	ldr	r3, [r7, #8]
    817e:	b29b      	uxth	r3, r3
    8180:	f003 031f 	and.w	r3, r3, #31
    8184:	b29b      	uxth	r3, r3
    8186:	4313      	orrs	r3, r2
    8188:	b29a      	uxth	r2, r3
    818a:	687b      	ldr	r3, [r7, #4]
    818c:	b29b      	uxth	r3, r3
    818e:	031b      	lsls	r3, r3, #12
    8190:	b29b      	uxth	r3, r3
    8192:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    8196:	b29b      	uxth	r3, r3
    8198:	4313      	orrs	r3, r2
    819a:	b29a      	uxth	r2, r3
    819c:	683b      	ldr	r3, [r7, #0]
    819e:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    81a0:	683a      	ldr	r2, [r7, #0]
    81a2:	78d3      	ldrb	r3, [r2, #3]
    81a4:	f043 0303 	orr.w	r3, r3, #3
    81a8:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    81aa:	683a      	ldr	r2, [r7, #0]
    81ac:	78d3      	ldrb	r3, [r2, #3]
    81ae:	f043 030c 	orr.w	r3, r3, #12
    81b2:	70d3      	strb	r3, [r2, #3]
}
    81b4:	bf00      	nop
    81b6:	3714      	adds	r7, #20
    81b8:	46bd      	mov	sp, r7
    81ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    81be:	4770      	bx	lr
    81c0:	00800084 	.word	0x00800084

000081c4 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    81c4:	b580      	push	{r7, lr}
    81c6:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    81c8:	bf00      	nop
    81ca:	2203      	movs	r2, #3
    81cc:	2100      	movs	r1, #0
    81ce:	4804      	ldr	r0, [pc, #16]	; (81e0 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    81d0:	4b04      	ldr	r3, [pc, #16]	; (81e4 <_usb_d_dev_wait_dpll_rdy+0x20>)
    81d2:	4798      	blx	r3
    81d4:	4603      	mov	r3, r0
    81d6:	2b03      	cmp	r3, #3
    81d8:	d1f7      	bne.n	81ca <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    81da:	bf00      	nop
    81dc:	bd80      	pop	{r7, pc}
    81de:	bf00      	nop
    81e0:	40001000 	.word	0x40001000
    81e4:	00007bf9 	.word	0x00007bf9

000081e8 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    81e8:	b580      	push	{r7, lr}
    81ea:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    81ec:	480e      	ldr	r0, [pc, #56]	; (8228 <_usb_d_dev_wait_dfll_rdy+0x40>)
    81ee:	4b0f      	ldr	r3, [pc, #60]	; (822c <_usb_d_dev_wait_dfll_rdy+0x44>)
    81f0:	4798      	blx	r3
    81f2:	4603      	mov	r3, r0
    81f4:	2b00      	cmp	r3, #0
    81f6:	d00a      	beq.n	820e <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    81f8:	bf00      	nop
    81fa:	f44f 6110 	mov.w	r1, #2304	; 0x900
    81fe:	480a      	ldr	r0, [pc, #40]	; (8228 <_usb_d_dev_wait_dfll_rdy+0x40>)
    8200:	4b0b      	ldr	r3, [pc, #44]	; (8230 <_usb_d_dev_wait_dfll_rdy+0x48>)
    8202:	4798      	blx	r3
    8204:	4603      	mov	r3, r0
    8206:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    820a:	d1f6      	bne.n	81fa <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    820c:	e009      	b.n	8222 <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    820e:	bf00      	nop
    8210:	f44f 7180 	mov.w	r1, #256	; 0x100
    8214:	4804      	ldr	r0, [pc, #16]	; (8228 <_usb_d_dev_wait_dfll_rdy+0x40>)
    8216:	4b06      	ldr	r3, [pc, #24]	; (8230 <_usb_d_dev_wait_dfll_rdy+0x48>)
    8218:	4798      	blx	r3
    821a:	4603      	mov	r3, r0
    821c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8220:	d1f6      	bne.n	8210 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    8222:	bf00      	nop
    8224:	bd80      	pop	{r7, pc}
    8226:	bf00      	nop
    8228:	40001000 	.word	0x40001000
    822c:	00007c57 	.word	0x00007c57
    8230:	00007c31 	.word	0x00007c31

00008234 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    8234:	b580      	push	{r7, lr}
    8236:	b082      	sub	sp, #8
    8238:	af00      	add	r7, sp, #0
    823a:	4603      	mov	r3, r0
    823c:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    823e:	79fb      	ldrb	r3, [r7, #7]
    8240:	2b00      	cmp	r3, #0
    8242:	d102      	bne.n	824a <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    8244:	4b05      	ldr	r3, [pc, #20]	; (825c <_usb_d_dev_wait_clk_rdy+0x28>)
    8246:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    8248:	e004      	b.n	8254 <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    824a:	79fb      	ldrb	r3, [r7, #7]
    824c:	2b01      	cmp	r3, #1
    824e:	d101      	bne.n	8254 <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    8250:	4b03      	ldr	r3, [pc, #12]	; (8260 <_usb_d_dev_wait_clk_rdy+0x2c>)
    8252:	4798      	blx	r3
}
    8254:	bf00      	nop
    8256:	3708      	adds	r7, #8
    8258:	46bd      	mov	sp, r7
    825a:	bd80      	pop	{r7, pc}
    825c:	000081e9 	.word	0x000081e9
    8260:	000081c5 	.word	0x000081c5

00008264 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    8264:	b580      	push	{r7, lr}
    8266:	b082      	sub	sp, #8
    8268:	af00      	add	r7, sp, #0
    826a:	4603      	mov	r3, r0
    826c:	6039      	str	r1, [r7, #0]
    826e:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    8270:	683b      	ldr	r3, [r7, #0]
    8272:	b2da      	uxtb	r2, r3
    8274:	79fb      	ldrb	r3, [r7, #7]
    8276:	4619      	mov	r1, r3
    8278:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    827c:	4b02      	ldr	r3, [pc, #8]	; (8288 <_usbd_ep_int_ack+0x24>)
    827e:	4798      	blx	r3
}
    8280:	bf00      	nop
    8282:	3708      	adds	r7, #8
    8284:	46bd      	mov	sp, r7
    8286:	bd80      	pop	{r7, pc}
    8288:	00007d3d 	.word	0x00007d3d

0000828c <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    828c:	b580      	push	{r7, lr}
    828e:	b082      	sub	sp, #8
    8290:	af00      	add	r7, sp, #0
    8292:	4603      	mov	r3, r0
    8294:	6039      	str	r1, [r7, #0]
    8296:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    8298:	683b      	ldr	r3, [r7, #0]
    829a:	b2da      	uxtb	r2, r3
    829c:	79fb      	ldrb	r3, [r7, #7]
    829e:	4619      	mov	r1, r3
    82a0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    82a4:	4b02      	ldr	r3, [pc, #8]	; (82b0 <_usbd_ep_int_en+0x24>)
    82a6:	4798      	blx	r3
}
    82a8:	bf00      	nop
    82aa:	3708      	adds	r7, #8
    82ac:	46bd      	mov	sp, r7
    82ae:	bd80      	pop	{r7, pc}
    82b0:	00007e11 	.word	0x00007e11

000082b4 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    82b4:	b580      	push	{r7, lr}
    82b6:	b082      	sub	sp, #8
    82b8:	af00      	add	r7, sp, #0
    82ba:	4603      	mov	r3, r0
    82bc:	6039      	str	r1, [r7, #0]
    82be:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    82c0:	683b      	ldr	r3, [r7, #0]
    82c2:	b2da      	uxtb	r2, r3
    82c4:	79fb      	ldrb	r3, [r7, #7]
    82c6:	4619      	mov	r1, r3
    82c8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    82cc:	4b02      	ldr	r3, [pc, #8]	; (82d8 <_usbd_ep_int_dis+0x24>)
    82ce:	4798      	blx	r3
}
    82d0:	bf00      	nop
    82d2:	3708      	adds	r7, #8
    82d4:	46bd      	mov	sp, r7
    82d6:	bd80      	pop	{r7, pc}
    82d8:	00007e3d 	.word	0x00007e3d

000082dc <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    82dc:	b580      	push	{r7, lr}
    82de:	b082      	sub	sp, #8
    82e0:	af00      	add	r7, sp, #0
    82e2:	4603      	mov	r3, r0
    82e4:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    82e6:	79fb      	ldrb	r3, [r7, #7]
    82e8:	4619      	mov	r1, r3
    82ea:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    82ee:	4b06      	ldr	r3, [pc, #24]	; (8308 <_usbd_ep_is_ctrl+0x2c>)
    82f0:	4798      	blx	r3
    82f2:	4603      	mov	r3, r0
    82f4:	2b11      	cmp	r3, #17
    82f6:	bf0c      	ite	eq
    82f8:	2301      	moveq	r3, #1
    82fa:	2300      	movne	r3, #0
    82fc:	b2db      	uxtb	r3, r3
}
    82fe:	4618      	mov	r0, r3
    8300:	3708      	adds	r7, #8
    8302:	46bd      	mov	sp, r7
    8304:	bd80      	pop	{r7, pc}
    8306:	bf00      	nop
    8308:	00007ef7 	.word	0x00007ef7

0000830c <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    830c:	b580      	push	{r7, lr}
    830e:	b082      	sub	sp, #8
    8310:	af00      	add	r7, sp, #0
    8312:	4603      	mov	r3, r0
    8314:	71fb      	strb	r3, [r7, #7]
    8316:	460b      	mov	r3, r1
    8318:	71bb      	strb	r3, [r7, #6]
    831a:	4613      	mov	r3, r2
    831c:	717b      	strb	r3, [r7, #5]
	if (st) {
    831e:	797b      	ldrb	r3, [r7, #5]
    8320:	2b00      	cmp	r3, #0
    8322:	d00b      	beq.n	833c <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8324:	79bb      	ldrb	r3, [r7, #6]
    8326:	2210      	movs	r2, #16
    8328:	fa02 f303 	lsl.w	r3, r2, r3
    832c:	b2da      	uxtb	r2, r3
    832e:	79fb      	ldrb	r3, [r7, #7]
    8330:	4619      	mov	r1, r3
    8332:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8336:	4b09      	ldr	r3, [pc, #36]	; (835c <_usbd_ep_set_stall+0x50>)
    8338:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    833a:	e00a      	b.n	8352 <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    833c:	79bb      	ldrb	r3, [r7, #6]
    833e:	2210      	movs	r2, #16
    8340:	fa02 f303 	lsl.w	r3, r2, r3
    8344:	b2da      	uxtb	r2, r3
    8346:	79fb      	ldrb	r3, [r7, #7]
    8348:	4619      	mov	r1, r3
    834a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    834e:	4b04      	ldr	r3, [pc, #16]	; (8360 <_usbd_ep_set_stall+0x54>)
    8350:	4798      	blx	r3
}
    8352:	bf00      	nop
    8354:	3708      	adds	r7, #8
    8356:	46bd      	mov	sp, r7
    8358:	bd80      	pop	{r7, pc}
    835a:	bf00      	nop
    835c:	00007d69 	.word	0x00007d69
    8360:	00007dbd 	.word	0x00007dbd

00008364 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    8364:	b580      	push	{r7, lr}
    8366:	b084      	sub	sp, #16
    8368:	af00      	add	r7, sp, #0
    836a:	4603      	mov	r3, r0
    836c:	460a      	mov	r2, r1
    836e:	71fb      	strb	r3, [r7, #7]
    8370:	4613      	mov	r3, r2
    8372:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    8374:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8378:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    837a:	79fb      	ldrb	r3, [r7, #7]
    837c:	4619      	mov	r1, r3
    837e:	68f8      	ldr	r0, [r7, #12]
    8380:	4b08      	ldr	r3, [pc, #32]	; (83a4 <_usbd_ep_is_stalled+0x40>)
    8382:	4798      	blx	r3
    8384:	4603      	mov	r3, r0
    8386:	4619      	mov	r1, r3
    8388:	79bb      	ldrb	r3, [r7, #6]
    838a:	2210      	movs	r2, #16
    838c:	fa02 f303 	lsl.w	r3, r2, r3
    8390:	400b      	ands	r3, r1
    8392:	2b00      	cmp	r3, #0
    8394:	bf14      	ite	ne
    8396:	2301      	movne	r3, #1
    8398:	2300      	moveq	r3, #0
    839a:	b2db      	uxtb	r3, r3
}
    839c:	4618      	mov	r0, r3
    839e:	3710      	adds	r7, #16
    83a0:	46bd      	mov	sp, r7
    83a2:	bd80      	pop	{r7, pc}
    83a4:	00007d95 	.word	0x00007d95

000083a8 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    83a8:	b580      	push	{r7, lr}
    83aa:	b084      	sub	sp, #16
    83ac:	af00      	add	r7, sp, #0
    83ae:	4603      	mov	r3, r0
    83b0:	460a      	mov	r2, r1
    83b2:	71fb      	strb	r3, [r7, #7]
    83b4:	4613      	mov	r3, r2
    83b6:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    83b8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    83bc:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    83be:	79fb      	ldrb	r3, [r7, #7]
    83c0:	4619      	mov	r1, r3
    83c2:	68f8      	ldr	r0, [r7, #12]
    83c4:	4b08      	ldr	r3, [pc, #32]	; (83e8 <_usbd_ep_is_stall_sent+0x40>)
    83c6:	4798      	blx	r3
    83c8:	4603      	mov	r3, r0
    83ca:	4619      	mov	r1, r3
    83cc:	79bb      	ldrb	r3, [r7, #6]
    83ce:	2220      	movs	r2, #32
    83d0:	fa02 f303 	lsl.w	r3, r2, r3
    83d4:	400b      	ands	r3, r1
    83d6:	2b00      	cmp	r3, #0
    83d8:	bf14      	ite	ne
    83da:	2301      	movne	r3, #1
    83dc:	2300      	moveq	r3, #0
    83de:	b2db      	uxtb	r3, r3
}
    83e0:	4618      	mov	r0, r3
    83e2:	3710      	adds	r7, #16
    83e4:	46bd      	mov	sp, r7
    83e6:	bd80      	pop	{r7, pc}
    83e8:	00007d15 	.word	0x00007d15

000083ec <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    83ec:	b580      	push	{r7, lr}
    83ee:	b082      	sub	sp, #8
    83f0:	af00      	add	r7, sp, #0
    83f2:	4603      	mov	r3, r0
    83f4:	460a      	mov	r2, r1
    83f6:	71fb      	strb	r3, [r7, #7]
    83f8:	4613      	mov	r3, r2
    83fa:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    83fc:	79bb      	ldrb	r3, [r7, #6]
    83fe:	2220      	movs	r2, #32
    8400:	409a      	lsls	r2, r3
    8402:	79fb      	ldrb	r3, [r7, #7]
    8404:	4611      	mov	r1, r2
    8406:	4618      	mov	r0, r3
    8408:	4b02      	ldr	r3, [pc, #8]	; (8414 <_usbd_ep_ack_stall+0x28>)
    840a:	4798      	blx	r3
}
    840c:	bf00      	nop
    840e:	3708      	adds	r7, #8
    8410:	46bd      	mov	sp, r7
    8412:	bd80      	pop	{r7, pc}
    8414:	00008265 	.word	0x00008265

00008418 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    8418:	b580      	push	{r7, lr}
    841a:	b082      	sub	sp, #8
    841c:	af00      	add	r7, sp, #0
    841e:	4603      	mov	r3, r0
    8420:	71fb      	strb	r3, [r7, #7]
    8422:	460b      	mov	r3, r1
    8424:	71bb      	strb	r3, [r7, #6]
    8426:	4613      	mov	r3, r2
    8428:	717b      	strb	r3, [r7, #5]
	if (en) {
    842a:	797b      	ldrb	r3, [r7, #5]
    842c:	2b00      	cmp	r3, #0
    842e:	d008      	beq.n	8442 <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    8430:	79bb      	ldrb	r3, [r7, #6]
    8432:	2220      	movs	r2, #32
    8434:	409a      	lsls	r2, r3
    8436:	79fb      	ldrb	r3, [r7, #7]
    8438:	4611      	mov	r1, r2
    843a:	4618      	mov	r0, r3
    843c:	4b07      	ldr	r3, [pc, #28]	; (845c <_usbd_ep_int_stall_en+0x44>)
    843e:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    8440:	e007      	b.n	8452 <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    8442:	79bb      	ldrb	r3, [r7, #6]
    8444:	2220      	movs	r2, #32
    8446:	409a      	lsls	r2, r3
    8448:	79fb      	ldrb	r3, [r7, #7]
    844a:	4611      	mov	r1, r2
    844c:	4618      	mov	r0, r3
    844e:	4b04      	ldr	r3, [pc, #16]	; (8460 <_usbd_ep_int_stall_en+0x48>)
    8450:	4798      	blx	r3
}
    8452:	bf00      	nop
    8454:	3708      	adds	r7, #8
    8456:	46bd      	mov	sp, r7
    8458:	bd80      	pop	{r7, pc}
    845a:	bf00      	nop
    845c:	0000828d 	.word	0x0000828d
    8460:	000082b5 	.word	0x000082b5

00008464 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    8464:	b580      	push	{r7, lr}
    8466:	b082      	sub	sp, #8
    8468:	af00      	add	r7, sp, #0
    846a:	4603      	mov	r3, r0
    846c:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    846e:	79fb      	ldrb	r3, [r7, #7]
    8470:	4619      	mov	r1, r3
    8472:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8476:	4b03      	ldr	r3, [pc, #12]	; (8484 <_usbd_ep_stop_setup+0x20>)
    8478:	4798      	blx	r3
}
    847a:	bf00      	nop
    847c:	3708      	adds	r7, #8
    847e:	46bd      	mov	sp, r7
    8480:	bd80      	pop	{r7, pc}
    8482:	bf00      	nop
    8484:	00007de9 	.word	0x00007de9

00008488 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    8488:	b580      	push	{r7, lr}
    848a:	b082      	sub	sp, #8
    848c:	af00      	add	r7, sp, #0
    848e:	4603      	mov	r3, r0
    8490:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    8492:	79fb      	ldrb	r3, [r7, #7]
    8494:	2210      	movs	r2, #16
    8496:	4619      	mov	r1, r3
    8498:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    849c:	4b05      	ldr	r3, [pc, #20]	; (84b4 <_usbd_ep_is_setup+0x2c>)
    849e:	4798      	blx	r3
    84a0:	4603      	mov	r3, r0
    84a2:	2b00      	cmp	r3, #0
    84a4:	bf14      	ite	ne
    84a6:	2301      	movne	r3, #1
    84a8:	2300      	moveq	r3, #0
    84aa:	b2db      	uxtb	r3, r3
}
    84ac:	4618      	mov	r0, r3
    84ae:	3708      	adds	r7, #8
    84b0:	46bd      	mov	sp, r7
    84b2:	bd80      	pop	{r7, pc}
    84b4:	00007cdf 	.word	0x00007cdf

000084b8 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    84b8:	b580      	push	{r7, lr}
    84ba:	b082      	sub	sp, #8
    84bc:	af00      	add	r7, sp, #0
    84be:	4603      	mov	r3, r0
    84c0:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    84c2:	79fb      	ldrb	r3, [r7, #7]
    84c4:	2110      	movs	r1, #16
    84c6:	4618      	mov	r0, r3
    84c8:	4b02      	ldr	r3, [pc, #8]	; (84d4 <_usbd_ep_ack_setup+0x1c>)
    84ca:	4798      	blx	r3
}
    84cc:	bf00      	nop
    84ce:	3708      	adds	r7, #8
    84d0:	46bd      	mov	sp, r7
    84d2:	bd80      	pop	{r7, pc}
    84d4:	00008265 	.word	0x00008265

000084d8 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    84d8:	b580      	push	{r7, lr}
    84da:	b082      	sub	sp, #8
    84dc:	af00      	add	r7, sp, #0
    84de:	4603      	mov	r3, r0
    84e0:	71fb      	strb	r3, [r7, #7]
    84e2:	460b      	mov	r3, r1
    84e4:	71bb      	strb	r3, [r7, #6]
    84e6:	4613      	mov	r3, r2
    84e8:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    84ea:	797b      	ldrb	r3, [r7, #5]
    84ec:	2b00      	cmp	r3, #0
    84ee:	d00b      	beq.n	8508 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    84f0:	79bb      	ldrb	r3, [r7, #6]
    84f2:	2201      	movs	r2, #1
    84f4:	fa02 f303 	lsl.w	r3, r2, r3
    84f8:	b2da      	uxtb	r2, r3
    84fa:	79fb      	ldrb	r3, [r7, #7]
    84fc:	4619      	mov	r1, r3
    84fe:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8502:	4b09      	ldr	r3, [pc, #36]	; (8528 <_usbd_ep_set_toggle+0x50>)
    8504:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    8506:	e00a      	b.n	851e <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    8508:	79bb      	ldrb	r3, [r7, #6]
    850a:	2201      	movs	r2, #1
    850c:	fa02 f303 	lsl.w	r3, r2, r3
    8510:	b2da      	uxtb	r2, r3
    8512:	79fb      	ldrb	r3, [r7, #7]
    8514:	4619      	mov	r1, r3
    8516:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    851a:	4b04      	ldr	r3, [pc, #16]	; (852c <_usbd_ep_set_toggle+0x54>)
    851c:	4798      	blx	r3
}
    851e:	bf00      	nop
    8520:	3708      	adds	r7, #8
    8522:	46bd      	mov	sp, r7
    8524:	bd80      	pop	{r7, pc}
    8526:	bf00      	nop
    8528:	00007d69 	.word	0x00007d69
    852c:	00007dbd 	.word	0x00007dbd

00008530 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    8530:	b580      	push	{r7, lr}
    8532:	b082      	sub	sp, #8
    8534:	af00      	add	r7, sp, #0
    8536:	4603      	mov	r3, r0
    8538:	460a      	mov	r2, r1
    853a:	71fb      	strb	r3, [r7, #7]
    853c:	4613      	mov	r3, r2
    853e:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    8540:	79bb      	ldrb	r3, [r7, #6]
    8542:	2201      	movs	r2, #1
    8544:	409a      	lsls	r2, r3
    8546:	79fb      	ldrb	r3, [r7, #7]
    8548:	4611      	mov	r1, r2
    854a:	4618      	mov	r0, r3
    854c:	4b02      	ldr	r3, [pc, #8]	; (8558 <_usbd_ep_ack_io_cpt+0x28>)
    854e:	4798      	blx	r3
}
    8550:	bf00      	nop
    8552:	3708      	adds	r7, #8
    8554:	46bd      	mov	sp, r7
    8556:	bd80      	pop	{r7, pc}
    8558:	00008265 	.word	0x00008265

0000855c <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    855c:	b480      	push	{r7}
    855e:	b085      	sub	sp, #20
    8560:	af00      	add	r7, sp, #0
    8562:	4603      	mov	r3, r0
    8564:	603a      	str	r2, [r7, #0]
    8566:	71fb      	strb	r3, [r7, #7]
    8568:	460b      	mov	r3, r1
    856a:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    856c:	79fa      	ldrb	r2, [r7, #7]
    856e:	79bb      	ldrb	r3, [r7, #6]
    8570:	0052      	lsls	r2, r2, #1
    8572:	4413      	add	r3, r2
    8574:	011b      	lsls	r3, r3, #4
    8576:	4a06      	ldr	r2, [pc, #24]	; (8590 <_usbd_ep_set_buf+0x34>)
    8578:	4413      	add	r3, r2
    857a:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    857c:	68fb      	ldr	r3, [r7, #12]
    857e:	683a      	ldr	r2, [r7, #0]
    8580:	601a      	str	r2, [r3, #0]
}
    8582:	bf00      	nop
    8584:	3714      	adds	r7, #20
    8586:	46bd      	mov	sp, r7
    8588:	f85d 7b04 	ldr.w	r7, [sp], #4
    858c:	4770      	bx	lr
    858e:	bf00      	nop
    8590:	20000f4c 	.word	0x20000f4c

00008594 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    8594:	b480      	push	{r7}
    8596:	b085      	sub	sp, #20
    8598:	af00      	add	r7, sp, #0
    859a:	4603      	mov	r3, r0
    859c:	71fb      	strb	r3, [r7, #7]
    859e:	460b      	mov	r3, r1
    85a0:	71bb      	strb	r3, [r7, #6]
    85a2:	4613      	mov	r3, r2
    85a4:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    85a6:	79fa      	ldrb	r2, [r7, #7]
    85a8:	79bb      	ldrb	r3, [r7, #6]
    85aa:	0052      	lsls	r2, r2, #1
    85ac:	4413      	add	r3, r2
    85ae:	011b      	lsls	r3, r3, #4
    85b0:	4a08      	ldr	r2, [pc, #32]	; (85d4 <_usbd_ep_set_in_count+0x40>)
    85b2:	4413      	add	r3, r2
    85b4:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    85b6:	88bb      	ldrh	r3, [r7, #4]
    85b8:	f3c3 030d 	ubfx	r3, r3, #0, #14
    85bc:	b299      	uxth	r1, r3
    85be:	68fa      	ldr	r2, [r7, #12]
    85c0:	6853      	ldr	r3, [r2, #4]
    85c2:	f361 339b 	bfi	r3, r1, #14, #14
    85c6:	6053      	str	r3, [r2, #4]
}
    85c8:	bf00      	nop
    85ca:	3714      	adds	r7, #20
    85cc:	46bd      	mov	sp, r7
    85ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    85d2:	4770      	bx	lr
    85d4:	20000f4c 	.word	0x20000f4c

000085d8 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    85d8:	b480      	push	{r7}
    85da:	b085      	sub	sp, #20
    85dc:	af00      	add	r7, sp, #0
    85de:	4603      	mov	r3, r0
    85e0:	71fb      	strb	r3, [r7, #7]
    85e2:	460b      	mov	r3, r1
    85e4:	71bb      	strb	r3, [r7, #6]
    85e6:	4613      	mov	r3, r2
    85e8:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    85ea:	79fa      	ldrb	r2, [r7, #7]
    85ec:	79bb      	ldrb	r3, [r7, #6]
    85ee:	0052      	lsls	r2, r2, #1
    85f0:	4413      	add	r3, r2
    85f2:	011b      	lsls	r3, r3, #4
    85f4:	4a08      	ldr	r2, [pc, #32]	; (8618 <_usbd_ep_set_in_size+0x40>)
    85f6:	4413      	add	r3, r2
    85f8:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    85fa:	88bb      	ldrh	r3, [r7, #4]
    85fc:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8600:	b299      	uxth	r1, r3
    8602:	68fa      	ldr	r2, [r7, #12]
    8604:	6853      	ldr	r3, [r2, #4]
    8606:	f361 030d 	bfi	r3, r1, #0, #14
    860a:	6053      	str	r3, [r2, #4]
}
    860c:	bf00      	nop
    860e:	3714      	adds	r7, #20
    8610:	46bd      	mov	sp, r7
    8612:	f85d 7b04 	ldr.w	r7, [sp], #4
    8616:	4770      	bx	lr
    8618:	20000f4c 	.word	0x20000f4c

0000861c <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    861c:	b480      	push	{r7}
    861e:	b085      	sub	sp, #20
    8620:	af00      	add	r7, sp, #0
    8622:	4603      	mov	r3, r0
    8624:	71fb      	strb	r3, [r7, #7]
    8626:	460b      	mov	r3, r1
    8628:	71bb      	strb	r3, [r7, #6]
    862a:	4613      	mov	r3, r2
    862c:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    862e:	79fa      	ldrb	r2, [r7, #7]
    8630:	79bb      	ldrb	r3, [r7, #6]
    8632:	0052      	lsls	r2, r2, #1
    8634:	4413      	add	r3, r2
    8636:	011b      	lsls	r3, r3, #4
    8638:	4a08      	ldr	r2, [pc, #32]	; (865c <_usbd_ep_set_out_count+0x40>)
    863a:	4413      	add	r3, r2
    863c:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    863e:	88bb      	ldrh	r3, [r7, #4]
    8640:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8644:	b299      	uxth	r1, r3
    8646:	68fa      	ldr	r2, [r7, #12]
    8648:	6853      	ldr	r3, [r2, #4]
    864a:	f361 030d 	bfi	r3, r1, #0, #14
    864e:	6053      	str	r3, [r2, #4]
}
    8650:	bf00      	nop
    8652:	3714      	adds	r7, #20
    8654:	46bd      	mov	sp, r7
    8656:	f85d 7b04 	ldr.w	r7, [sp], #4
    865a:	4770      	bx	lr
    865c:	20000f4c 	.word	0x20000f4c

00008660 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    8660:	b480      	push	{r7}
    8662:	b085      	sub	sp, #20
    8664:	af00      	add	r7, sp, #0
    8666:	4603      	mov	r3, r0
    8668:	71fb      	strb	r3, [r7, #7]
    866a:	460b      	mov	r3, r1
    866c:	71bb      	strb	r3, [r7, #6]
    866e:	4613      	mov	r3, r2
    8670:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8672:	79fa      	ldrb	r2, [r7, #7]
    8674:	79bb      	ldrb	r3, [r7, #6]
    8676:	0052      	lsls	r2, r2, #1
    8678:	4413      	add	r3, r2
    867a:	011b      	lsls	r3, r3, #4
    867c:	4a08      	ldr	r2, [pc, #32]	; (86a0 <_usbd_ep_set_out_size+0x40>)
    867e:	4413      	add	r3, r2
    8680:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    8682:	88bb      	ldrh	r3, [r7, #4]
    8684:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8688:	b299      	uxth	r1, r3
    868a:	68fa      	ldr	r2, [r7, #12]
    868c:	6853      	ldr	r3, [r2, #4]
    868e:	f361 339b 	bfi	r3, r1, #14, #14
    8692:	6053      	str	r3, [r2, #4]
}
    8694:	bf00      	nop
    8696:	3714      	adds	r7, #20
    8698:	46bd      	mov	sp, r7
    869a:	f85d 7b04 	ldr.w	r7, [sp], #4
    869e:	4770      	bx	lr
    86a0:	20000f4c 	.word	0x20000f4c

000086a4 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    86a4:	b580      	push	{r7, lr}
    86a6:	b084      	sub	sp, #16
    86a8:	af00      	add	r7, sp, #0
    86aa:	60ba      	str	r2, [r7, #8]
    86ac:	607b      	str	r3, [r7, #4]
    86ae:	4603      	mov	r3, r0
    86b0:	73fb      	strb	r3, [r7, #15]
    86b2:	460b      	mov	r3, r1
    86b4:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    86b6:	68bb      	ldr	r3, [r7, #8]
    86b8:	b29a      	uxth	r2, r3
    86ba:	7bb9      	ldrb	r1, [r7, #14]
    86bc:	7bfb      	ldrb	r3, [r7, #15]
    86be:	4618      	mov	r0, r3
    86c0:	4b06      	ldr	r3, [pc, #24]	; (86dc <_usbd_ep_set_in_trans+0x38>)
    86c2:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    86c4:	687b      	ldr	r3, [r7, #4]
    86c6:	b29a      	uxth	r2, r3
    86c8:	7bb9      	ldrb	r1, [r7, #14]
    86ca:	7bfb      	ldrb	r3, [r7, #15]
    86cc:	4618      	mov	r0, r3
    86ce:	4b04      	ldr	r3, [pc, #16]	; (86e0 <_usbd_ep_set_in_trans+0x3c>)
    86d0:	4798      	blx	r3
}
    86d2:	bf00      	nop
    86d4:	3710      	adds	r7, #16
    86d6:	46bd      	mov	sp, r7
    86d8:	bd80      	pop	{r7, pc}
    86da:	bf00      	nop
    86dc:	000085d9 	.word	0x000085d9
    86e0:	00008595 	.word	0x00008595

000086e4 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    86e4:	b580      	push	{r7, lr}
    86e6:	b084      	sub	sp, #16
    86e8:	af00      	add	r7, sp, #0
    86ea:	60ba      	str	r2, [r7, #8]
    86ec:	607b      	str	r3, [r7, #4]
    86ee:	4603      	mov	r3, r0
    86f0:	73fb      	strb	r3, [r7, #15]
    86f2:	460b      	mov	r3, r1
    86f4:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    86f6:	68bb      	ldr	r3, [r7, #8]
    86f8:	b29a      	uxth	r2, r3
    86fa:	7bb9      	ldrb	r1, [r7, #14]
    86fc:	7bfb      	ldrb	r3, [r7, #15]
    86fe:	4618      	mov	r0, r3
    8700:	4b06      	ldr	r3, [pc, #24]	; (871c <_usbd_ep_set_out_trans+0x38>)
    8702:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    8704:	687b      	ldr	r3, [r7, #4]
    8706:	b29a      	uxth	r2, r3
    8708:	7bb9      	ldrb	r1, [r7, #14]
    870a:	7bfb      	ldrb	r3, [r7, #15]
    870c:	4618      	mov	r0, r3
    870e:	4b04      	ldr	r3, [pc, #16]	; (8720 <_usbd_ep_set_out_trans+0x3c>)
    8710:	4798      	blx	r3
}
    8712:	bf00      	nop
    8714:	3710      	adds	r7, #16
    8716:	46bd      	mov	sp, r7
    8718:	bd80      	pop	{r7, pc}
    871a:	bf00      	nop
    871c:	00008661 	.word	0x00008661
    8720:	0000861d 	.word	0x0000861d

00008724 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    8724:	b480      	push	{r7}
    8726:	b085      	sub	sp, #20
    8728:	af00      	add	r7, sp, #0
    872a:	4603      	mov	r3, r0
    872c:	460a      	mov	r2, r1
    872e:	71fb      	strb	r3, [r7, #7]
    8730:	4613      	mov	r3, r2
    8732:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8734:	79fa      	ldrb	r2, [r7, #7]
    8736:	79bb      	ldrb	r3, [r7, #6]
    8738:	0052      	lsls	r2, r2, #1
    873a:	4413      	add	r3, r2
    873c:	011b      	lsls	r3, r3, #4
    873e:	4a06      	ldr	r2, [pc, #24]	; (8758 <_usbd_ep_clear_bank_status+0x34>)
    8740:	4413      	add	r3, r2
    8742:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    8744:	68fb      	ldr	r3, [r7, #12]
    8746:	2200      	movs	r2, #0
    8748:	729a      	strb	r2, [r3, #10]
}
    874a:	bf00      	nop
    874c:	3714      	adds	r7, #20
    874e:	46bd      	mov	sp, r7
    8750:	f85d 7b04 	ldr.w	r7, [sp], #4
    8754:	4770      	bx	lr
    8756:	bf00      	nop
    8758:	20000f4c 	.word	0x20000f4c

0000875c <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    875c:	b580      	push	{r7, lr}
    875e:	b082      	sub	sp, #8
    8760:	af00      	add	r7, sp, #0
    8762:	4603      	mov	r3, r0
    8764:	71fb      	strb	r3, [r7, #7]
    8766:	460b      	mov	r3, r1
    8768:	71bb      	strb	r3, [r7, #6]
    876a:	4613      	mov	r3, r2
    876c:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    876e:	797b      	ldrb	r3, [r7, #5]
    8770:	2b00      	cmp	r3, #0
    8772:	d00b      	beq.n	878c <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8774:	79bb      	ldrb	r3, [r7, #6]
    8776:	2240      	movs	r2, #64	; 0x40
    8778:	fa02 f303 	lsl.w	r3, r2, r3
    877c:	b2da      	uxtb	r2, r3
    877e:	79fb      	ldrb	r3, [r7, #7]
    8780:	4619      	mov	r1, r3
    8782:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8786:	4b09      	ldr	r3, [pc, #36]	; (87ac <_usbd_ep_set_in_rdy+0x50>)
    8788:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    878a:	e00a      	b.n	87a2 <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    878c:	79bb      	ldrb	r3, [r7, #6]
    878e:	2240      	movs	r2, #64	; 0x40
    8790:	fa02 f303 	lsl.w	r3, r2, r3
    8794:	b2da      	uxtb	r2, r3
    8796:	79fb      	ldrb	r3, [r7, #7]
    8798:	4619      	mov	r1, r3
    879a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    879e:	4b04      	ldr	r3, [pc, #16]	; (87b0 <_usbd_ep_set_in_rdy+0x54>)
    87a0:	4798      	blx	r3
}
    87a2:	bf00      	nop
    87a4:	3708      	adds	r7, #8
    87a6:	46bd      	mov	sp, r7
    87a8:	bd80      	pop	{r7, pc}
    87aa:	bf00      	nop
    87ac:	00007d69 	.word	0x00007d69
    87b0:	00007dbd 	.word	0x00007dbd

000087b4 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    87b4:	b580      	push	{r7, lr}
    87b6:	b082      	sub	sp, #8
    87b8:	af00      	add	r7, sp, #0
    87ba:	4603      	mov	r3, r0
    87bc:	71fb      	strb	r3, [r7, #7]
    87be:	460b      	mov	r3, r1
    87c0:	71bb      	strb	r3, [r7, #6]
    87c2:	4613      	mov	r3, r2
    87c4:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    87c6:	797b      	ldrb	r3, [r7, #5]
    87c8:	2b00      	cmp	r3, #0
    87ca:	d00b      	beq.n	87e4 <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    87cc:	79bb      	ldrb	r3, [r7, #6]
    87ce:	2240      	movs	r2, #64	; 0x40
    87d0:	fa02 f303 	lsl.w	r3, r2, r3
    87d4:	b2da      	uxtb	r2, r3
    87d6:	79fb      	ldrb	r3, [r7, #7]
    87d8:	4619      	mov	r1, r3
    87da:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    87de:	4b09      	ldr	r3, [pc, #36]	; (8804 <_usbd_ep_set_out_rdy+0x50>)
    87e0:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    87e2:	e00a      	b.n	87fa <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    87e4:	79bb      	ldrb	r3, [r7, #6]
    87e6:	2240      	movs	r2, #64	; 0x40
    87e8:	fa02 f303 	lsl.w	r3, r2, r3
    87ec:	b2da      	uxtb	r2, r3
    87ee:	79fb      	ldrb	r3, [r7, #7]
    87f0:	4619      	mov	r1, r3
    87f2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    87f6:	4b04      	ldr	r3, [pc, #16]	; (8808 <_usbd_ep_set_out_rdy+0x54>)
    87f8:	4798      	blx	r3
}
    87fa:	bf00      	nop
    87fc:	3708      	adds	r7, #8
    87fe:	46bd      	mov	sp, r7
    8800:	bd80      	pop	{r7, pc}
    8802:	bf00      	nop
    8804:	00007dbd 	.word	0x00007dbd
    8808:	00007d69 	.word	0x00007d69

0000880c <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    880c:	b480      	push	{r7}
    880e:	b083      	sub	sp, #12
    8810:	af00      	add	r7, sp, #0
    8812:	4603      	mov	r3, r0
    8814:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8816:	88fb      	ldrh	r3, [r7, #6]
    8818:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    881c:	d820      	bhi.n	8860 <_usbd_ep_pcksize_size+0x54>
    881e:	88fb      	ldrh	r3, [r7, #6]
    8820:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8824:	d81a      	bhi.n	885c <_usbd_ep_pcksize_size+0x50>
    8826:	88fb      	ldrh	r3, [r7, #6]
    8828:	2b80      	cmp	r3, #128	; 0x80
    882a:	d815      	bhi.n	8858 <_usbd_ep_pcksize_size+0x4c>
    882c:	88fb      	ldrh	r3, [r7, #6]
    882e:	2b40      	cmp	r3, #64	; 0x40
    8830:	d810      	bhi.n	8854 <_usbd_ep_pcksize_size+0x48>
    8832:	88fb      	ldrh	r3, [r7, #6]
    8834:	2b20      	cmp	r3, #32
    8836:	d80b      	bhi.n	8850 <_usbd_ep_pcksize_size+0x44>
    8838:	88fb      	ldrh	r3, [r7, #6]
    883a:	2b10      	cmp	r3, #16
    883c:	d806      	bhi.n	884c <_usbd_ep_pcksize_size+0x40>
    883e:	88fb      	ldrh	r3, [r7, #6]
    8840:	2b08      	cmp	r3, #8
    8842:	bf8c      	ite	hi
    8844:	2301      	movhi	r3, #1
    8846:	2300      	movls	r3, #0
    8848:	b2db      	uxtb	r3, r3
    884a:	e00a      	b.n	8862 <_usbd_ep_pcksize_size+0x56>
    884c:	2302      	movs	r3, #2
    884e:	e008      	b.n	8862 <_usbd_ep_pcksize_size+0x56>
    8850:	2303      	movs	r3, #3
    8852:	e006      	b.n	8862 <_usbd_ep_pcksize_size+0x56>
    8854:	2304      	movs	r3, #4
    8856:	e004      	b.n	8862 <_usbd_ep_pcksize_size+0x56>
    8858:	2305      	movs	r3, #5
    885a:	e002      	b.n	8862 <_usbd_ep_pcksize_size+0x56>
    885c:	2306      	movs	r3, #6
    885e:	e000      	b.n	8862 <_usbd_ep_pcksize_size+0x56>
    8860:	2307      	movs	r3, #7
}
    8862:	4618      	mov	r0, r3
    8864:	370c      	adds	r7, #12
    8866:	46bd      	mov	sp, r7
    8868:	f85d 7b04 	ldr.w	r7, [sp], #4
    886c:	4770      	bx	lr
	...

00008870 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    8870:	b480      	push	{r7}
    8872:	b085      	sub	sp, #20
    8874:	af00      	add	r7, sp, #0
    8876:	4603      	mov	r3, r0
    8878:	460a      	mov	r2, r1
    887a:	71fb      	strb	r3, [r7, #7]
    887c:	4613      	mov	r3, r2
    887e:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    8880:	79fb      	ldrb	r3, [r7, #7]
    8882:	2b00      	cmp	r3, #0
    8884:	d008      	beq.n	8898 <_usb_d_dev_ept+0x28>
    8886:	79bb      	ldrb	r3, [r7, #6]
    8888:	2b00      	cmp	r3, #0
    888a:	d003      	beq.n	8894 <_usb_d_dev_ept+0x24>
    888c:	79fb      	ldrb	r3, [r7, #7]
    888e:	3304      	adds	r3, #4
    8890:	b2db      	uxtb	r3, r3
    8892:	e002      	b.n	889a <_usb_d_dev_ept+0x2a>
    8894:	79fb      	ldrb	r3, [r7, #7]
    8896:	e000      	b.n	889a <_usb_d_dev_ept+0x2a>
    8898:	2300      	movs	r3, #0
    889a:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    889c:	7bfa      	ldrb	r2, [r7, #15]
    889e:	4613      	mov	r3, r2
    88a0:	009b      	lsls	r3, r3, #2
    88a2:	4413      	add	r3, r2
    88a4:	009b      	lsls	r3, r3, #2
    88a6:	3310      	adds	r3, #16
    88a8:	4a04      	ldr	r2, [pc, #16]	; (88bc <_usb_d_dev_ept+0x4c>)
    88aa:	4413      	add	r3, r2
    88ac:	3304      	adds	r3, #4
}
    88ae:	4618      	mov	r0, r3
    88b0:	3714      	adds	r7, #20
    88b2:	46bd      	mov	sp, r7
    88b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    88b8:	4770      	bx	lr
    88ba:	bf00      	nop
    88bc:	20000e84 	.word	0x20000e84

000088c0 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    88c0:	b580      	push	{r7, lr}
    88c2:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    88c4:	2104      	movs	r1, #4
    88c6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    88ca:	4b03      	ldr	r3, [pc, #12]	; (88d8 <_usb_d_dev_sof+0x18>)
    88cc:	4798      	blx	r3
	dev_inst.callbacks.sof();
    88ce:	4b03      	ldr	r3, [pc, #12]	; (88dc <_usb_d_dev_sof+0x1c>)
    88d0:	681b      	ldr	r3, [r3, #0]
    88d2:	4798      	blx	r3
}
    88d4:	bf00      	nop
    88d6:	bd80      	pop	{r7, pc}
    88d8:	00007f37 	.word	0x00007f37
    88dc:	20000e84 	.word	0x20000e84

000088e0 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    88e0:	b580      	push	{r7, lr}
    88e2:	b084      	sub	sp, #16
    88e4:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    88e6:	2300      	movs	r3, #0
    88e8:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    88ea:	f240 2101 	movw	r1, #513	; 0x201
    88ee:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    88f2:	4b1a      	ldr	r3, [pc, #104]	; (895c <_usb_d_dev_lpmsusp+0x7c>)
    88f4:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    88f6:	f240 2101 	movw	r1, #513	; 0x201
    88fa:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    88fe:	4b18      	ldr	r3, [pc, #96]	; (8960 <_usb_d_dev_lpmsusp+0x80>)
    8900:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    8902:	2170      	movs	r1, #112	; 0x70
    8904:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8908:	4b16      	ldr	r3, [pc, #88]	; (8964 <_usb_d_dev_lpmsusp+0x84>)
    890a:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    890c:	2300      	movs	r3, #0
    890e:	73fb      	strb	r3, [r7, #15]
    8910:	e018      	b.n	8944 <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    8912:	7bfb      	ldrb	r3, [r7, #15]
    8914:	015b      	lsls	r3, r3, #5
    8916:	4a14      	ldr	r2, [pc, #80]	; (8968 <_usb_d_dev_lpmsusp+0x88>)
    8918:	4413      	add	r3, r2
    891a:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    891c:	687b      	ldr	r3, [r7, #4]
    891e:	891b      	ldrh	r3, [r3, #8]
    8920:	f3c3 0303 	ubfx	r3, r3, #0, #4
    8924:	b2db      	uxtb	r3, r3
    8926:	2b03      	cmp	r3, #3
    8928:	d109      	bne.n	893e <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    892a:	687b      	ldr	r3, [r7, #4]
    892c:	891b      	ldrh	r3, [r3, #8]
    892e:	f3c3 130a 	ubfx	r3, r3, #4, #11
    8932:	b29b      	uxth	r3, r3
    8934:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    8936:	687b      	ldr	r3, [r7, #4]
    8938:	2200      	movs	r2, #0
    893a:	811a      	strh	r2, [r3, #8]
			break;
    893c:	e005      	b.n	894a <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    893e:	7bfb      	ldrb	r3, [r7, #15]
    8940:	3301      	adds	r3, #1
    8942:	73fb      	strb	r3, [r7, #15]
    8944:	7bfb      	ldrb	r3, [r7, #15]
    8946:	2b03      	cmp	r3, #3
    8948:	d9e3      	bls.n	8912 <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    894a:	4b08      	ldr	r3, [pc, #32]	; (896c <_usb_d_dev_lpmsusp+0x8c>)
    894c:	685b      	ldr	r3, [r3, #4]
    894e:	68b9      	ldr	r1, [r7, #8]
    8950:	2003      	movs	r0, #3
    8952:	4798      	blx	r3
}
    8954:	bf00      	nop
    8956:	3710      	adds	r7, #16
    8958:	46bd      	mov	sp, r7
    895a:	bd80      	pop	{r7, pc}
    895c:	00007f37 	.word	0x00007f37
    8960:	00007f8d 	.word	0x00007f8d
    8964:	00007f55 	.word	0x00007f55
    8968:	20000f4c 	.word	0x20000f4c
    896c:	20000e84 	.word	0x20000e84

00008970 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    8970:	b580      	push	{r7, lr}
    8972:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    8974:	2180      	movs	r1, #128	; 0x80
    8976:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    897a:	4b04      	ldr	r3, [pc, #16]	; (898c <_usb_d_dev_ramerr+0x1c>)
    897c:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    897e:	4b04      	ldr	r3, [pc, #16]	; (8990 <_usb_d_dev_ramerr+0x20>)
    8980:	685b      	ldr	r3, [r3, #4]
    8982:	2100      	movs	r1, #0
    8984:	2005      	movs	r0, #5
    8986:	4798      	blx	r3
}
    8988:	bf00      	nop
    898a:	bd80      	pop	{r7, pc}
    898c:	00007f37 	.word	0x00007f37
    8990:	20000e84 	.word	0x20000e84

00008994 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    8994:	b580      	push	{r7, lr}
    8996:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    8998:	2170      	movs	r1, #112	; 0x70
    899a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    899e:	4b0b      	ldr	r3, [pc, #44]	; (89cc <_usb_d_dev_wakeup+0x38>)
    89a0:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    89a2:	2170      	movs	r1, #112	; 0x70
    89a4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    89a8:	4b09      	ldr	r3, [pc, #36]	; (89d0 <_usb_d_dev_wakeup+0x3c>)
    89aa:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    89ac:	f240 2101 	movw	r1, #513	; 0x201
    89b0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    89b4:	4b07      	ldr	r3, [pc, #28]	; (89d4 <_usb_d_dev_wakeup+0x40>)
    89b6:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    89b8:	2000      	movs	r0, #0
    89ba:	4b07      	ldr	r3, [pc, #28]	; (89d8 <_usb_d_dev_wakeup+0x44>)
    89bc:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    89be:	4b07      	ldr	r3, [pc, #28]	; (89dc <_usb_d_dev_wakeup+0x48>)
    89c0:	685b      	ldr	r3, [r3, #4]
    89c2:	2100      	movs	r1, #0
    89c4:	2002      	movs	r0, #2
    89c6:	4798      	blx	r3
}
    89c8:	bf00      	nop
    89ca:	bd80      	pop	{r7, pc}
    89cc:	00007f37 	.word	0x00007f37
    89d0:	00007f8d 	.word	0x00007f8d
    89d4:	00007f55 	.word	0x00007f55
    89d8:	00008235 	.word	0x00008235
    89dc:	20000e84 	.word	0x20000e84

000089e0 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    89e0:	b580      	push	{r7, lr}
    89e2:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    89e4:	2200      	movs	r2, #0
    89e6:	2100      	movs	r1, #0
    89e8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    89ec:	4b0d      	ldr	r3, [pc, #52]	; (8a24 <_usb_d_dev_reset+0x44>)
    89ee:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    89f0:	2108      	movs	r1, #8
    89f2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    89f6:	4b0c      	ldr	r3, [pc, #48]	; (8a28 <_usb_d_dev_reset+0x48>)
    89f8:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    89fa:	2170      	movs	r1, #112	; 0x70
    89fc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8a00:	4b0a      	ldr	r3, [pc, #40]	; (8a2c <_usb_d_dev_reset+0x4c>)
    8a02:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8a04:	f240 2101 	movw	r1, #513	; 0x201
    8a08:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8a0c:	4b08      	ldr	r3, [pc, #32]	; (8a30 <_usb_d_dev_reset+0x50>)
    8a0e:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    8a10:	4b08      	ldr	r3, [pc, #32]	; (8a34 <_usb_d_dev_reset+0x54>)
    8a12:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    8a14:	4b08      	ldr	r3, [pc, #32]	; (8a38 <_usb_d_dev_reset+0x58>)
    8a16:	685b      	ldr	r3, [r3, #4]
    8a18:	2100      	movs	r1, #0
    8a1a:	2001      	movs	r0, #1
    8a1c:	4798      	blx	r3
}
    8a1e:	bf00      	nop
    8a20:	bd80      	pop	{r7, pc}
    8a22:	bf00      	nop
    8a24:	00007ecd 	.word	0x00007ecd
    8a28:	00007f37 	.word	0x00007f37
    8a2c:	00007f8d 	.word	0x00007f8d
    8a30:	00007f55 	.word	0x00007f55
    8a34:	0000959d 	.word	0x0000959d
    8a38:	20000e84 	.word	0x20000e84

00008a3c <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    8a3c:	b580      	push	{r7, lr}
    8a3e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8a40:	f240 2101 	movw	r1, #513	; 0x201
    8a44:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8a48:	4b09      	ldr	r3, [pc, #36]	; (8a70 <_usb_d_dev_suspend+0x34>)
    8a4a:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8a4c:	f240 2101 	movw	r1, #513	; 0x201
    8a50:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8a54:	4b07      	ldr	r3, [pc, #28]	; (8a74 <_usb_d_dev_suspend+0x38>)
    8a56:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    8a58:	2170      	movs	r1, #112	; 0x70
    8a5a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8a5e:	4b06      	ldr	r3, [pc, #24]	; (8a78 <_usb_d_dev_suspend+0x3c>)
    8a60:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    8a62:	4b06      	ldr	r3, [pc, #24]	; (8a7c <_usb_d_dev_suspend+0x40>)
    8a64:	685b      	ldr	r3, [r3, #4]
    8a66:	2100      	movs	r1, #0
    8a68:	2004      	movs	r0, #4
    8a6a:	4798      	blx	r3
}
    8a6c:	bf00      	nop
    8a6e:	bd80      	pop	{r7, pc}
    8a70:	00007f37 	.word	0x00007f37
    8a74:	00007f8d 	.word	0x00007f8d
    8a78:	00007f55 	.word	0x00007f55
    8a7c:	20000e84 	.word	0x20000e84

00008a80 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    8a80:	b580      	push	{r7, lr}
    8a82:	b082      	sub	sp, #8
    8a84:	af00      	add	r7, sp, #0
	bool     rc    = true;
    8a86:	2301      	movs	r3, #1
    8a88:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    8a8a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8a8e:	4b22      	ldr	r3, [pc, #136]	; (8b18 <_usb_d_dev_handle_nep+0x98>)
    8a90:	4798      	blx	r3
    8a92:	4603      	mov	r3, r0
    8a94:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    8a96:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8a9a:	4b20      	ldr	r3, [pc, #128]	; (8b1c <_usb_d_dev_handle_nep+0x9c>)
    8a9c:	4798      	blx	r3
    8a9e:	4603      	mov	r3, r0
    8aa0:	461a      	mov	r2, r3
    8aa2:	88bb      	ldrh	r3, [r7, #4]
    8aa4:	4013      	ands	r3, r2
    8aa6:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    8aa8:	88bb      	ldrh	r3, [r7, #4]
    8aaa:	f003 0304 	and.w	r3, r3, #4
    8aae:	2b00      	cmp	r3, #0
    8ab0:	d003      	beq.n	8aba <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    8ab2:	4b1b      	ldr	r3, [pc, #108]	; (8b20 <_usb_d_dev_handle_nep+0xa0>)
    8ab4:	4798      	blx	r3
		return true;
    8ab6:	2301      	movs	r3, #1
    8ab8:	e02a      	b.n	8b10 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    8aba:	88bb      	ldrh	r3, [r7, #4]
    8abc:	f403 7300 	and.w	r3, r3, #512	; 0x200
    8ac0:	2b00      	cmp	r3, #0
    8ac2:	d002      	beq.n	8aca <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    8ac4:	4b17      	ldr	r3, [pc, #92]	; (8b24 <_usb_d_dev_handle_nep+0xa4>)
    8ac6:	4798      	blx	r3
    8ac8:	e021      	b.n	8b0e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    8aca:	88bb      	ldrh	r3, [r7, #4]
    8acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
    8ad0:	2b00      	cmp	r3, #0
    8ad2:	d002      	beq.n	8ada <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    8ad4:	4b14      	ldr	r3, [pc, #80]	; (8b28 <_usb_d_dev_handle_nep+0xa8>)
    8ad6:	4798      	blx	r3
    8ad8:	e019      	b.n	8b0e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    8ada:	88bb      	ldrh	r3, [r7, #4]
    8adc:	f003 0370 	and.w	r3, r3, #112	; 0x70
    8ae0:	2b00      	cmp	r3, #0
    8ae2:	d002      	beq.n	8aea <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    8ae4:	4b11      	ldr	r3, [pc, #68]	; (8b2c <_usb_d_dev_handle_nep+0xac>)
    8ae6:	4798      	blx	r3
    8ae8:	e011      	b.n	8b0e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    8aea:	88bb      	ldrh	r3, [r7, #4]
    8aec:	f003 0308 	and.w	r3, r3, #8
    8af0:	2b00      	cmp	r3, #0
    8af2:	d002      	beq.n	8afa <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    8af4:	4b0e      	ldr	r3, [pc, #56]	; (8b30 <_usb_d_dev_handle_nep+0xb0>)
    8af6:	4798      	blx	r3
    8af8:	e009      	b.n	8b0e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    8afa:	88bb      	ldrh	r3, [r7, #4]
    8afc:	f003 0301 	and.w	r3, r3, #1
    8b00:	2b00      	cmp	r3, #0
    8b02:	d002      	beq.n	8b0a <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    8b04:	4b0b      	ldr	r3, [pc, #44]	; (8b34 <_usb_d_dev_handle_nep+0xb4>)
    8b06:	4798      	blx	r3
    8b08:	e001      	b.n	8b0e <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    8b0a:	2300      	movs	r3, #0
    8b0c:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    8b0e:	79fb      	ldrb	r3, [r7, #7]
}
    8b10:	4618      	mov	r0, r3
    8b12:	3708      	adds	r7, #8
    8b14:	46bd      	mov	sp, r7
    8b16:	bd80      	pop	{r7, pc}
    8b18:	00007f1d 	.word	0x00007f1d
    8b1c:	00007f73 	.word	0x00007f73
    8b20:	000088c1 	.word	0x000088c1
    8b24:	000088e1 	.word	0x000088e1
    8b28:	00008971 	.word	0x00008971
    8b2c:	00008995 	.word	0x00008995
    8b30:	000089e1 	.word	0x000089e1
    8b34:	00008a3d 	.word	0x00008a3d

00008b38 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    8b38:	b590      	push	{r4, r7, lr}
    8b3a:	b089      	sub	sp, #36	; 0x24
    8b3c:	af00      	add	r7, sp, #0
    8b3e:	6078      	str	r0, [r7, #4]
    8b40:	460b      	mov	r3, r1
    8b42:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    8b44:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8b48:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    8b4a:	687b      	ldr	r3, [r7, #4]
    8b4c:	7c9b      	ldrb	r3, [r3, #18]
    8b4e:	f003 030f 	and.w	r3, r3, #15
    8b52:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    8b54:	7dfb      	ldrb	r3, [r7, #23]
    8b56:	015b      	lsls	r3, r3, #5
    8b58:	4a73      	ldr	r2, [pc, #460]	; (8d28 <_usb_d_dev_in_next+0x1f0>)
    8b5a:	4413      	add	r3, r2
    8b5c:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    8b5e:	78fb      	ldrb	r3, [r7, #3]
    8b60:	2b00      	cmp	r3, #0
    8b62:	d006      	beq.n	8b72 <_usb_d_dev_in_next+0x3a>
    8b64:	693b      	ldr	r3, [r7, #16]
    8b66:	3310      	adds	r3, #16
    8b68:	685b      	ldr	r3, [r3, #4]
    8b6a:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8b6e:	b29b      	uxth	r3, r3
    8b70:	e000      	b.n	8b74 <_usb_d_dev_in_next+0x3c>
    8b72:	2300      	movs	r3, #0
    8b74:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    8b76:	687b      	ldr	r3, [r7, #4]
    8b78:	8a1b      	ldrh	r3, [r3, #16]
    8b7a:	f240 32ff 	movw	r2, #1023	; 0x3ff
    8b7e:	4293      	cmp	r3, r2
    8b80:	d103      	bne.n	8b8a <_usb_d_dev_in_next+0x52>
    8b82:	687b      	ldr	r3, [r7, #4]
    8b84:	8a1b      	ldrh	r3, [r3, #16]
    8b86:	b21b      	sxth	r3, r3
    8b88:	e004      	b.n	8b94 <_usb_d_dev_in_next+0x5c>
    8b8a:	687b      	ldr	r3, [r7, #4]
    8b8c:	8a1b      	ldrh	r3, [r3, #16]
    8b8e:	3b01      	subs	r3, #1
    8b90:	b29b      	uxth	r3, r3
    8b92:	b21b      	sxth	r3, r3
    8b94:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    8b98:	4013      	ands	r3, r2
    8b9a:	b21b      	sxth	r3, r3
    8b9c:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    8b9e:	2300      	movs	r3, #0
    8ba0:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    8ba2:	687b      	ldr	r3, [r7, #4]
    8ba4:	7cdb      	ldrb	r3, [r3, #19]
    8ba6:	f003 0307 	and.w	r3, r3, #7
    8baa:	b2db      	uxtb	r3, r3
    8bac:	2b01      	cmp	r3, #1
    8bae:	bf0c      	ite	eq
    8bb0:	2301      	moveq	r3, #1
    8bb2:	2300      	movne	r3, #0
    8bb4:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    8bb6:	78fb      	ldrb	r3, [r7, #3]
    8bb8:	2b00      	cmp	r3, #0
    8bba:	d004      	beq.n	8bc6 <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    8bbc:	7dfb      	ldrb	r3, [r7, #23]
    8bbe:	2101      	movs	r1, #1
    8bc0:	4618      	mov	r0, r3
    8bc2:	4b5a      	ldr	r3, [pc, #360]	; (8d2c <_usb_d_dev_in_next+0x1f4>)
    8bc4:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    8bc6:	687b      	ldr	r3, [r7, #4]
    8bc8:	689a      	ldr	r2, [r3, #8]
    8bca:	89fb      	ldrh	r3, [r7, #14]
    8bcc:	441a      	add	r2, r3
    8bce:	687b      	ldr	r3, [r7, #4]
    8bd0:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    8bd2:	687b      	ldr	r3, [r7, #4]
    8bd4:	689a      	ldr	r2, [r3, #8]
    8bd6:	687b      	ldr	r3, [r7, #4]
    8bd8:	685b      	ldr	r3, [r3, #4]
    8bda:	429a      	cmp	r2, r3
    8bdc:	d243      	bcs.n	8c66 <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    8bde:	687b      	ldr	r3, [r7, #4]
    8be0:	685b      	ldr	r3, [r3, #4]
    8be2:	b29a      	uxth	r2, r3
    8be4:	687b      	ldr	r3, [r7, #4]
    8be6:	689b      	ldr	r3, [r3, #8]
    8be8:	b29b      	uxth	r3, r3
    8bea:	1ad3      	subs	r3, r2, r3
    8bec:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    8bee:	687b      	ldr	r3, [r7, #4]
    8bf0:	7cdb      	ldrb	r3, [r3, #19]
    8bf2:	f003 0320 	and.w	r3, r3, #32
    8bf6:	b2db      	uxtb	r3, r3
    8bf8:	2b00      	cmp	r3, #0
    8bfa:	d01b      	beq.n	8c34 <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    8bfc:	687b      	ldr	r3, [r7, #4]
    8bfe:	8a1b      	ldrh	r3, [r3, #16]
    8c00:	8bfa      	ldrh	r2, [r7, #30]
    8c02:	429a      	cmp	r2, r3
    8c04:	d902      	bls.n	8c0c <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    8c06:	687b      	ldr	r3, [r7, #4]
    8c08:	8a1b      	ldrh	r3, [r3, #16]
    8c0a:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    8c0c:	687b      	ldr	r3, [r7, #4]
    8c0e:	68d8      	ldr	r0, [r3, #12]
    8c10:	687b      	ldr	r3, [r7, #4]
    8c12:	681a      	ldr	r2, [r3, #0]
    8c14:	687b      	ldr	r3, [r7, #4]
    8c16:	689b      	ldr	r3, [r3, #8]
    8c18:	4413      	add	r3, r2
    8c1a:	8bfa      	ldrh	r2, [r7, #30]
    8c1c:	4619      	mov	r1, r3
    8c1e:	4b44      	ldr	r3, [pc, #272]	; (8d30 <_usb_d_dev_in_next+0x1f8>)
    8c20:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    8c22:	687b      	ldr	r3, [r7, #4]
    8c24:	68db      	ldr	r3, [r3, #12]
    8c26:	461a      	mov	r2, r3
    8c28:	7dfb      	ldrb	r3, [r7, #23]
    8c2a:	2101      	movs	r1, #1
    8c2c:	4618      	mov	r0, r3
    8c2e:	4b41      	ldr	r3, [pc, #260]	; (8d34 <_usb_d_dev_in_next+0x1fc>)
    8c30:	4798      	blx	r3
    8c32:	e011      	b.n	8c58 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    8c34:	8bfb      	ldrh	r3, [r7, #30]
    8c36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    8c3a:	d902      	bls.n	8c42 <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    8c3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    8c40:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    8c42:	687b      	ldr	r3, [r7, #4]
    8c44:	681a      	ldr	r2, [r3, #0]
    8c46:	687b      	ldr	r3, [r7, #4]
    8c48:	689b      	ldr	r3, [r3, #8]
    8c4a:	4413      	add	r3, r2
    8c4c:	461a      	mov	r2, r3
    8c4e:	7dfb      	ldrb	r3, [r7, #23]
    8c50:	2101      	movs	r1, #1
    8c52:	4618      	mov	r0, r3
    8c54:	4b37      	ldr	r3, [pc, #220]	; (8d34 <_usb_d_dev_in_next+0x1fc>)
    8c56:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    8c58:	8bfa      	ldrh	r2, [r7, #30]
    8c5a:	7df8      	ldrb	r0, [r7, #23]
    8c5c:	2300      	movs	r3, #0
    8c5e:	2101      	movs	r1, #1
    8c60:	4c35      	ldr	r4, [pc, #212]	; (8d38 <_usb_d_dev_in_next+0x200>)
    8c62:	47a0      	blx	r4
		goto _in_tx_exec;
    8c64:	e041      	b.n	8cea <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    8c66:	687b      	ldr	r3, [r7, #4]
    8c68:	7cdb      	ldrb	r3, [r3, #19]
    8c6a:	f003 0310 	and.w	r3, r3, #16
    8c6e:	b2db      	uxtb	r3, r3
    8c70:	2b00      	cmp	r3, #0
    8c72:	d00b      	beq.n	8c8c <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    8c74:	687a      	ldr	r2, [r7, #4]
    8c76:	7cd3      	ldrb	r3, [r2, #19]
    8c78:	f36f 1304 	bfc	r3, #4, #1
    8c7c:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    8c7e:	7df8      	ldrb	r0, [r7, #23]
    8c80:	2300      	movs	r3, #0
    8c82:	2200      	movs	r2, #0
    8c84:	2101      	movs	r1, #1
    8c86:	4c2c      	ldr	r4, [pc, #176]	; (8d38 <_usb_d_dev_in_next+0x200>)
    8c88:	47a0      	blx	r4
		goto _in_tx_exec;
    8c8a:	e02e      	b.n	8cea <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    8c8c:	7afb      	ldrb	r3, [r7, #11]
    8c8e:	2b00      	cmp	r3, #0
    8c90:	d006      	beq.n	8ca0 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    8c92:	7dfb      	ldrb	r3, [r7, #23]
    8c94:	224b      	movs	r2, #75	; 0x4b
    8c96:	4619      	mov	r1, r3
    8c98:	69b8      	ldr	r0, [r7, #24]
    8c9a:	4b28      	ldr	r3, [pc, #160]	; (8d3c <_usb_d_dev_in_next+0x204>)
    8c9c:	4798      	blx	r3
    8c9e:	e005      	b.n	8cac <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    8ca0:	7dfb      	ldrb	r3, [r7, #23]
    8ca2:	224a      	movs	r2, #74	; 0x4a
    8ca4:	4619      	mov	r1, r3
    8ca6:	69b8      	ldr	r0, [r7, #24]
    8ca8:	4b24      	ldr	r3, [pc, #144]	; (8d3c <_usb_d_dev_in_next+0x204>)
    8caa:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    8cac:	687b      	ldr	r3, [r7, #4]
    8cae:	8a1b      	ldrh	r3, [r3, #16]
    8cb0:	89ba      	ldrh	r2, [r7, #12]
    8cb2:	429a      	cmp	r2, r3
    8cb4:	d114      	bne.n	8ce0 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    8cb6:	687a      	ldr	r2, [r7, #4]
    8cb8:	7cd3      	ldrb	r3, [r2, #19]
    8cba:	f36f 1386 	bfc	r3, #6, #1
    8cbe:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    8cc0:	4b1f      	ldr	r3, [pc, #124]	; (8d40 <_usb_d_dev_in_next+0x208>)
    8cc2:	68db      	ldr	r3, [r3, #12]
    8cc4:	687a      	ldr	r2, [r7, #4]
    8cc6:	7c90      	ldrb	r0, [r2, #18]
    8cc8:	687a      	ldr	r2, [r7, #4]
    8cca:	6892      	ldr	r2, [r2, #8]
    8ccc:	4611      	mov	r1, r2
    8cce:	4798      	blx	r3
    8cd0:	4603      	mov	r3, r0
    8cd2:	2b00      	cmp	r3, #0
    8cd4:	d124      	bne.n	8d20 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    8cd6:	687a      	ldr	r2, [r7, #4]
    8cd8:	7cd3      	ldrb	r3, [r2, #19]
    8cda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8cde:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    8ce0:	2100      	movs	r1, #0
    8ce2:	6878      	ldr	r0, [r7, #4]
    8ce4:	4b17      	ldr	r3, [pc, #92]	; (8d44 <_usb_d_dev_in_next+0x20c>)
    8ce6:	4798      	blx	r3
	return;
    8ce8:	e01b      	b.n	8d22 <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    8cea:	78fb      	ldrb	r3, [r7, #3]
    8cec:	f083 0301 	eor.w	r3, r3, #1
    8cf0:	b2db      	uxtb	r3, r3
    8cf2:	2b00      	cmp	r3, #0
    8cf4:	d00d      	beq.n	8d12 <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    8cf6:	7afb      	ldrb	r3, [r7, #11]
    8cf8:	2b00      	cmp	r3, #0
    8cfa:	d002      	beq.n	8d02 <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    8cfc:	234e      	movs	r3, #78	; 0x4e
    8cfe:	777b      	strb	r3, [r7, #29]
    8d00:	e001      	b.n	8d06 <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    8d02:	234a      	movs	r3, #74	; 0x4a
    8d04:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    8d06:	7f7a      	ldrb	r2, [r7, #29]
    8d08:	7dfb      	ldrb	r3, [r7, #23]
    8d0a:	4619      	mov	r1, r3
    8d0c:	69b8      	ldr	r0, [r7, #24]
    8d0e:	4b0e      	ldr	r3, [pc, #56]	; (8d48 <_usb_d_dev_in_next+0x210>)
    8d10:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    8d12:	7dfb      	ldrb	r3, [r7, #23]
    8d14:	2201      	movs	r2, #1
    8d16:	2101      	movs	r1, #1
    8d18:	4618      	mov	r0, r3
    8d1a:	4b0c      	ldr	r3, [pc, #48]	; (8d4c <_usb_d_dev_in_next+0x214>)
    8d1c:	4798      	blx	r3
    8d1e:	e000      	b.n	8d22 <_usb_d_dev_in_next+0x1ea>
			return;
    8d20:	bf00      	nop
}
    8d22:	3724      	adds	r7, #36	; 0x24
    8d24:	46bd      	mov	sp, r7
    8d26:	bd90      	pop	{r4, r7, pc}
    8d28:	20000f4c 	.word	0x20000f4c
    8d2c:	00008531 	.word	0x00008531
    8d30:	00012b75 	.word	0x00012b75
    8d34:	0000855d 	.word	0x0000855d
    8d38:	000086a5 	.word	0x000086a5
    8d3c:	00007e3d 	.word	0x00007e3d
    8d40:	20000e84 	.word	0x20000e84
    8d44:	00009e61 	.word	0x00009e61
    8d48:	00007e11 	.word	0x00007e11
    8d4c:	0000875d 	.word	0x0000875d

00008d50 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    8d50:	b590      	push	{r4, r7, lr}
    8d52:	b08b      	sub	sp, #44	; 0x2c
    8d54:	af00      	add	r7, sp, #0
    8d56:	6078      	str	r0, [r7, #4]
    8d58:	460b      	mov	r3, r1
    8d5a:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    8d5c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8d60:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    8d62:	687b      	ldr	r3, [r7, #4]
    8d64:	7c9b      	ldrb	r3, [r3, #18]
    8d66:	f003 030f 	and.w	r3, r3, #15
    8d6a:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    8d6c:	7ffb      	ldrb	r3, [r7, #31]
    8d6e:	015b      	lsls	r3, r3, #5
    8d70:	4a94      	ldr	r2, [pc, #592]	; (8fc4 <_usb_d_dev_out_next+0x274>)
    8d72:	4413      	add	r3, r2
    8d74:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    8d76:	78fb      	ldrb	r3, [r7, #3]
    8d78:	2b00      	cmp	r3, #0
    8d7a:	d005      	beq.n	8d88 <_usb_d_dev_out_next+0x38>
    8d7c:	69bb      	ldr	r3, [r7, #24]
    8d7e:	685b      	ldr	r3, [r3, #4]
    8d80:	f3c3 338d 	ubfx	r3, r3, #14, #14
    8d84:	b29b      	uxth	r3, r3
    8d86:	e000      	b.n	8d8a <_usb_d_dev_out_next+0x3a>
    8d88:	2300      	movs	r3, #0
    8d8a:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    8d8c:	78fb      	ldrb	r3, [r7, #3]
    8d8e:	2b00      	cmp	r3, #0
    8d90:	d005      	beq.n	8d9e <_usb_d_dev_out_next+0x4e>
    8d92:	69bb      	ldr	r3, [r7, #24]
    8d94:	685b      	ldr	r3, [r3, #4]
    8d96:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8d9a:	b29b      	uxth	r3, r3
    8d9c:	e000      	b.n	8da0 <_usb_d_dev_out_next+0x50>
    8d9e:	2300      	movs	r3, #0
    8da0:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    8da2:	687b      	ldr	r3, [r7, #4]
    8da4:	8a1b      	ldrh	r3, [r3, #16]
    8da6:	f240 32ff 	movw	r2, #1023	; 0x3ff
    8daa:	4293      	cmp	r3, r2
    8dac:	d004      	beq.n	8db8 <_usb_d_dev_out_next+0x68>
    8dae:	687b      	ldr	r3, [r7, #4]
    8db0:	8a1b      	ldrh	r3, [r3, #16]
    8db2:	3b01      	subs	r3, #1
    8db4:	b29b      	uxth	r3, r3
    8db6:	e001      	b.n	8dbc <_usb_d_dev_out_next+0x6c>
    8db8:	f240 33ff 	movw	r3, #1023	; 0x3ff
    8dbc:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    8dbe:	8aba      	ldrh	r2, [r7, #20]
    8dc0:	8a7b      	ldrh	r3, [r7, #18]
    8dc2:	4013      	ands	r3, r2
    8dc4:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    8dc6:	687b      	ldr	r3, [r7, #4]
    8dc8:	7cdb      	ldrb	r3, [r3, #19]
    8dca:	f003 0307 	and.w	r3, r3, #7
    8dce:	b2db      	uxtb	r3, r3
    8dd0:	2b01      	cmp	r3, #1
    8dd2:	bf0c      	ite	eq
    8dd4:	2301      	moveq	r3, #1
    8dd6:	2300      	movne	r3, #0
    8dd8:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    8dda:	78fb      	ldrb	r3, [r7, #3]
    8ddc:	2b00      	cmp	r3, #0
    8dde:	d004      	beq.n	8dea <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    8de0:	7ffb      	ldrb	r3, [r7, #31]
    8de2:	2100      	movs	r1, #0
    8de4:	4618      	mov	r0, r3
    8de6:	4b78      	ldr	r3, [pc, #480]	; (8fc8 <_usb_d_dev_out_next+0x278>)
    8de8:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    8dea:	687b      	ldr	r3, [r7, #4]
    8dec:	7cdb      	ldrb	r3, [r3, #19]
    8dee:	f003 0320 	and.w	r3, r3, #32
    8df2:	b2db      	uxtb	r3, r3
    8df4:	2b00      	cmp	r3, #0
    8df6:	d01c      	beq.n	8e32 <_usb_d_dev_out_next+0xe2>
    8df8:	687b      	ldr	r3, [r7, #4]
    8dfa:	685b      	ldr	r3, [r3, #4]
    8dfc:	2b00      	cmp	r3, #0
    8dfe:	d018      	beq.n	8e32 <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    8e00:	687b      	ldr	r3, [r7, #4]
    8e02:	685b      	ldr	r3, [r3, #4]
    8e04:	b29a      	uxth	r2, r3
    8e06:	687b      	ldr	r3, [r7, #4]
    8e08:	689b      	ldr	r3, [r3, #8]
    8e0a:	b29b      	uxth	r3, r3
    8e0c:	1ad3      	subs	r3, r2, r3
    8e0e:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    8e10:	687b      	ldr	r3, [r7, #4]
    8e12:	681a      	ldr	r2, [r3, #0]
    8e14:	687b      	ldr	r3, [r7, #4]
    8e16:	689b      	ldr	r3, [r3, #8]
    8e18:	18d0      	adds	r0, r2, r3
    8e1a:	687b      	ldr	r3, [r7, #4]
    8e1c:	68d9      	ldr	r1, [r3, #12]
    8e1e:	89ba      	ldrh	r2, [r7, #12]
    8e20:	8a3b      	ldrh	r3, [r7, #16]
    8e22:	429a      	cmp	r2, r3
    8e24:	d901      	bls.n	8e2a <_usb_d_dev_out_next+0xda>
    8e26:	8a3b      	ldrh	r3, [r7, #16]
    8e28:	e000      	b.n	8e2c <_usb_d_dev_out_next+0xdc>
    8e2a:	89bb      	ldrh	r3, [r7, #12]
    8e2c:	461a      	mov	r2, r3
    8e2e:	4b67      	ldr	r3, [pc, #412]	; (8fcc <_usb_d_dev_out_next+0x27c>)
    8e30:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    8e32:	687b      	ldr	r3, [r7, #4]
    8e34:	685b      	ldr	r3, [r3, #4]
    8e36:	2b00      	cmp	r3, #0
    8e38:	d121      	bne.n	8e7e <_usb_d_dev_out_next+0x12e>
    8e3a:	687b      	ldr	r3, [r7, #4]
    8e3c:	7cdb      	ldrb	r3, [r3, #19]
    8e3e:	f003 0310 	and.w	r3, r3, #16
    8e42:	b2db      	uxtb	r3, r3
    8e44:	2b00      	cmp	r3, #0
    8e46:	d01a      	beq.n	8e7e <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    8e48:	687a      	ldr	r2, [r7, #4]
    8e4a:	7cd3      	ldrb	r3, [r2, #19]
    8e4c:	f36f 1304 	bfc	r3, #4, #1
    8e50:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    8e52:	687a      	ldr	r2, [r7, #4]
    8e54:	7cd3      	ldrb	r3, [r2, #19]
    8e56:	f043 0320 	orr.w	r3, r3, #32
    8e5a:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8e5c:	687b      	ldr	r3, [r7, #4]
    8e5e:	68db      	ldr	r3, [r3, #12]
    8e60:	461a      	mov	r2, r3
    8e62:	7ffb      	ldrb	r3, [r7, #31]
    8e64:	2100      	movs	r1, #0
    8e66:	4618      	mov	r0, r3
    8e68:	4b59      	ldr	r3, [pc, #356]	; (8fd0 <_usb_d_dev_out_next+0x280>)
    8e6a:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    8e6c:	687b      	ldr	r3, [r7, #4]
    8e6e:	8a1b      	ldrh	r3, [r3, #16]
    8e70:	461a      	mov	r2, r3
    8e72:	7ff8      	ldrb	r0, [r7, #31]
    8e74:	2300      	movs	r3, #0
    8e76:	2100      	movs	r1, #0
    8e78:	4c56      	ldr	r4, [pc, #344]	; (8fd4 <_usb_d_dev_out_next+0x284>)
    8e7a:	47a0      	blx	r4
		goto _out_rx_exec;
    8e7c:	e090      	b.n	8fa0 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    8e7e:	78fb      	ldrb	r3, [r7, #3]
    8e80:	2b00      	cmp	r3, #0
    8e82:	d010      	beq.n	8ea6 <_usb_d_dev_out_next+0x156>
    8e84:	687b      	ldr	r3, [r7, #4]
    8e86:	8a1b      	ldrh	r3, [r3, #16]
    8e88:	8a3a      	ldrh	r2, [r7, #16]
    8e8a:	429a      	cmp	r2, r3
    8e8c:	d20b      	bcs.n	8ea6 <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    8e8e:	687a      	ldr	r2, [r7, #4]
    8e90:	7cd3      	ldrb	r3, [r2, #19]
    8e92:	f36f 1304 	bfc	r3, #4, #1
    8e96:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    8e98:	687b      	ldr	r3, [r7, #4]
    8e9a:	689a      	ldr	r2, [r3, #8]
    8e9c:	8abb      	ldrh	r3, [r7, #20]
    8e9e:	441a      	add	r2, r3
    8ea0:	687b      	ldr	r3, [r7, #4]
    8ea2:	609a      	str	r2, [r3, #8]
    8ea4:	e05c      	b.n	8f60 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    8ea6:	687b      	ldr	r3, [r7, #4]
    8ea8:	689a      	ldr	r2, [r3, #8]
    8eaa:	8afb      	ldrh	r3, [r7, #22]
    8eac:	441a      	add	r2, r3
    8eae:	687b      	ldr	r3, [r7, #4]
    8eb0:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    8eb2:	687b      	ldr	r3, [r7, #4]
    8eb4:	689a      	ldr	r2, [r3, #8]
    8eb6:	687b      	ldr	r3, [r7, #4]
    8eb8:	685b      	ldr	r3, [r3, #4]
    8eba:	429a      	cmp	r2, r3
    8ebc:	d250      	bcs.n	8f60 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    8ebe:	687b      	ldr	r3, [r7, #4]
    8ec0:	685b      	ldr	r3, [r3, #4]
    8ec2:	b29a      	uxth	r2, r3
    8ec4:	687b      	ldr	r3, [r7, #4]
    8ec6:	689b      	ldr	r3, [r3, #8]
    8ec8:	b29b      	uxth	r3, r3
    8eca:	1ad3      	subs	r3, r2, r3
    8ecc:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    8ece:	687b      	ldr	r3, [r7, #4]
    8ed0:	7cdb      	ldrb	r3, [r3, #19]
    8ed2:	f003 0320 	and.w	r3, r3, #32
    8ed6:	b2db      	uxtb	r3, r3
    8ed8:	2b00      	cmp	r3, #0
    8eda:	d010      	beq.n	8efe <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    8edc:	687b      	ldr	r3, [r7, #4]
    8ede:	8a1b      	ldrh	r3, [r3, #16]
    8ee0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8ee2:	429a      	cmp	r2, r3
    8ee4:	d902      	bls.n	8eec <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    8ee6:	687b      	ldr	r3, [r7, #4]
    8ee8:	8a1b      	ldrh	r3, [r3, #16]
    8eea:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8eec:	687b      	ldr	r3, [r7, #4]
    8eee:	68db      	ldr	r3, [r3, #12]
    8ef0:	461a      	mov	r2, r3
    8ef2:	7ffb      	ldrb	r3, [r7, #31]
    8ef4:	2100      	movs	r1, #0
    8ef6:	4618      	mov	r0, r3
    8ef8:	4b35      	ldr	r3, [pc, #212]	; (8fd0 <_usb_d_dev_out_next+0x280>)
    8efa:	4798      	blx	r3
    8efc:	e029      	b.n	8f52 <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    8efe:	687b      	ldr	r3, [r7, #4]
    8f00:	8a1b      	ldrh	r3, [r3, #16]
    8f02:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8f04:	429a      	cmp	r2, r3
    8f06:	d90f      	bls.n	8f28 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    8f08:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    8f0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    8f0e:	d903      	bls.n	8f18 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    8f10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    8f14:	84fb      	strh	r3, [r7, #38]	; 0x26
    8f16:	e011      	b.n	8f3c <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    8f18:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8f1a:	8a7b      	ldrh	r3, [r7, #18]
    8f1c:	4013      	ands	r3, r2
    8f1e:	b29b      	uxth	r3, r3
    8f20:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8f22:	1ad3      	subs	r3, r2, r3
    8f24:	84fb      	strh	r3, [r7, #38]	; 0x26
    8f26:	e009      	b.n	8f3c <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    8f28:	687b      	ldr	r3, [r7, #4]
    8f2a:	8a1b      	ldrh	r3, [r3, #16]
    8f2c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8f2e:	429a      	cmp	r2, r3
    8f30:	d204      	bcs.n	8f3c <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    8f32:	687a      	ldr	r2, [r7, #4]
    8f34:	7cd3      	ldrb	r3, [r2, #19]
    8f36:	f043 0320 	orr.w	r3, r3, #32
    8f3a:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    8f3c:	687b      	ldr	r3, [r7, #4]
    8f3e:	681a      	ldr	r2, [r3, #0]
    8f40:	687b      	ldr	r3, [r7, #4]
    8f42:	689b      	ldr	r3, [r3, #8]
    8f44:	4413      	add	r3, r2
    8f46:	461a      	mov	r2, r3
    8f48:	7ffb      	ldrb	r3, [r7, #31]
    8f4a:	2100      	movs	r1, #0
    8f4c:	4618      	mov	r0, r3
    8f4e:	4b20      	ldr	r3, [pc, #128]	; (8fd0 <_usb_d_dev_out_next+0x280>)
    8f50:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    8f52:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8f54:	7ff8      	ldrb	r0, [r7, #31]
    8f56:	2300      	movs	r3, #0
    8f58:	2100      	movs	r1, #0
    8f5a:	4c1e      	ldr	r4, [pc, #120]	; (8fd4 <_usb_d_dev_out_next+0x284>)
    8f5c:	47a0      	blx	r4
			goto _out_rx_exec;
    8f5e:	e01f      	b.n	8fa0 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    8f60:	7bfb      	ldrb	r3, [r7, #15]
    8f62:	2b00      	cmp	r3, #0
    8f64:	d006      	beq.n	8f74 <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    8f66:	7ffb      	ldrb	r3, [r7, #31]
    8f68:	222d      	movs	r2, #45	; 0x2d
    8f6a:	4619      	mov	r1, r3
    8f6c:	6a38      	ldr	r0, [r7, #32]
    8f6e:	4b1a      	ldr	r3, [pc, #104]	; (8fd8 <_usb_d_dev_out_next+0x288>)
    8f70:	4798      	blx	r3
    8f72:	e005      	b.n	8f80 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    8f74:	7ffb      	ldrb	r3, [r7, #31]
    8f76:	2225      	movs	r2, #37	; 0x25
    8f78:	4619      	mov	r1, r3
    8f7a:	6a38      	ldr	r0, [r7, #32]
    8f7c:	4b16      	ldr	r3, [pc, #88]	; (8fd8 <_usb_d_dev_out_next+0x288>)
    8f7e:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    8f80:	7ffb      	ldrb	r3, [r7, #31]
    8f82:	2b00      	cmp	r3, #0
    8f84:	d107      	bne.n	8f96 <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8f86:	687b      	ldr	r3, [r7, #4]
    8f88:	68db      	ldr	r3, [r3, #12]
    8f8a:	461a      	mov	r2, r3
    8f8c:	7ffb      	ldrb	r3, [r7, #31]
    8f8e:	2100      	movs	r1, #0
    8f90:	4618      	mov	r0, r3
    8f92:	4b0f      	ldr	r3, [pc, #60]	; (8fd0 <_usb_d_dev_out_next+0x280>)
    8f94:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    8f96:	2100      	movs	r1, #0
    8f98:	6878      	ldr	r0, [r7, #4]
    8f9a:	4b10      	ldr	r3, [pc, #64]	; (8fdc <_usb_d_dev_out_next+0x28c>)
    8f9c:	4798      	blx	r3
	return;
    8f9e:	e031      	b.n	9004 <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    8fa0:	78fb      	ldrb	r3, [r7, #3]
    8fa2:	f083 0301 	eor.w	r3, r3, #1
    8fa6:	b2db      	uxtb	r3, r3
    8fa8:	2b00      	cmp	r3, #0
    8faa:	d025      	beq.n	8ff8 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    8fac:	7bfb      	ldrb	r3, [r7, #15]
    8fae:	2b00      	cmp	r3, #0
    8fb0:	d018      	beq.n	8fe4 <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    8fb2:	7ffb      	ldrb	r3, [r7, #31]
    8fb4:	2101      	movs	r1, #1
    8fb6:	4618      	mov	r0, r3
    8fb8:	4b09      	ldr	r3, [pc, #36]	; (8fe0 <_usb_d_dev_out_next+0x290>)
    8fba:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    8fbc:	232d      	movs	r3, #45	; 0x2d
    8fbe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    8fc2:	e012      	b.n	8fea <_usb_d_dev_out_next+0x29a>
    8fc4:	20000f4c 	.word	0x20000f4c
    8fc8:	00008531 	.word	0x00008531
    8fcc:	00012b75 	.word	0x00012b75
    8fd0:	0000855d 	.word	0x0000855d
    8fd4:	000086e5 	.word	0x000086e5
    8fd8:	00007e3d 	.word	0x00007e3d
    8fdc:	00009e61 	.word	0x00009e61
    8fe0:	00008725 	.word	0x00008725
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    8fe4:	2325      	movs	r3, #37	; 0x25
    8fe6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    8fea:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    8fee:	7ffb      	ldrb	r3, [r7, #31]
    8ff0:	4619      	mov	r1, r3
    8ff2:	6a38      	ldr	r0, [r7, #32]
    8ff4:	4b05      	ldr	r3, [pc, #20]	; (900c <_usb_d_dev_out_next+0x2bc>)
    8ff6:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    8ff8:	7ffb      	ldrb	r3, [r7, #31]
    8ffa:	2201      	movs	r2, #1
    8ffc:	2100      	movs	r1, #0
    8ffe:	4618      	mov	r0, r3
    9000:	4b03      	ldr	r3, [pc, #12]	; (9010 <_usb_d_dev_out_next+0x2c0>)
    9002:	4798      	blx	r3
}
    9004:	372c      	adds	r7, #44	; 0x2c
    9006:	46bd      	mov	sp, r7
    9008:	bd90      	pop	{r4, r7, pc}
    900a:	bf00      	nop
    900c:	00007e11 	.word	0x00007e11
    9010:	000087b5 	.word	0x000087b5

00009014 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    9014:	b580      	push	{r7, lr}
    9016:	b084      	sub	sp, #16
    9018:	af00      	add	r7, sp, #0
    901a:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    901c:	687b      	ldr	r3, [r7, #4]
    901e:	7c9b      	ldrb	r3, [r3, #18]
    9020:	f003 030f 	and.w	r3, r3, #15
    9024:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    9026:	687b      	ldr	r3, [r7, #4]
    9028:	7cdb      	ldrb	r3, [r3, #19]
    902a:	f003 0307 	and.w	r3, r3, #7
    902e:	b2db      	uxtb	r3, r3
    9030:	2b01      	cmp	r3, #1
    9032:	bf0c      	ite	eq
    9034:	2301      	moveq	r3, #1
    9036:	2300      	movne	r3, #0
    9038:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    903a:	7bbb      	ldrb	r3, [r7, #14]
    903c:	f083 0301 	eor.w	r3, r3, #1
    9040:	b2db      	uxtb	r3, r3
    9042:	2b00      	cmp	r3, #0
    9044:	d008      	beq.n	9058 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    9046:	7bfb      	ldrb	r3, [r7, #15]
    9048:	4618      	mov	r0, r3
    904a:	4b20      	ldr	r3, [pc, #128]	; (90cc <_usb_d_dev_handle_setup+0xb8>)
    904c:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    904e:	7bfb      	ldrb	r3, [r7, #15]
    9050:	4618      	mov	r0, r3
    9052:	4b1f      	ldr	r3, [pc, #124]	; (90d0 <_usb_d_dev_handle_setup+0xbc>)
    9054:	4798      	blx	r3
		return;
    9056:	e036      	b.n	90c6 <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    9058:	687b      	ldr	r3, [r7, #4]
    905a:	7cdb      	ldrb	r3, [r3, #19]
    905c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9060:	b2db      	uxtb	r3, r3
    9062:	2b00      	cmp	r3, #0
    9064:	d010      	beq.n	9088 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    9066:	687a      	ldr	r2, [r7, #4]
    9068:	7cd3      	ldrb	r3, [r2, #19]
    906a:	f36f 1386 	bfc	r3, #6, #1
    906e:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    9070:	7bfb      	ldrb	r3, [r7, #15]
    9072:	2200      	movs	r2, #0
    9074:	2101      	movs	r1, #1
    9076:	4618      	mov	r0, r3
    9078:	4b16      	ldr	r3, [pc, #88]	; (90d4 <_usb_d_dev_handle_setup+0xc0>)
    907a:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    907c:	7bfb      	ldrb	r3, [r7, #15]
    907e:	2200      	movs	r2, #0
    9080:	2100      	movs	r1, #0
    9082:	4618      	mov	r0, r3
    9084:	4b14      	ldr	r3, [pc, #80]	; (90d8 <_usb_d_dev_handle_setup+0xc4>)
    9086:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    9088:	687a      	ldr	r2, [r7, #4]
    908a:	7cd3      	ldrb	r3, [r2, #19]
    908c:	f36f 03c3 	bfc	r3, #3, #1
    9090:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    9092:	7bfb      	ldrb	r3, [r7, #15]
    9094:	2100      	movs	r1, #0
    9096:	4618      	mov	r0, r3
    9098:	4b10      	ldr	r3, [pc, #64]	; (90dc <_usb_d_dev_handle_setup+0xc8>)
    909a:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    909c:	7bfb      	ldrb	r3, [r7, #15]
    909e:	2101      	movs	r1, #1
    90a0:	4618      	mov	r0, r3
    90a2:	4b0e      	ldr	r3, [pc, #56]	; (90dc <_usb_d_dev_handle_setup+0xc8>)
    90a4:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    90a6:	7bfb      	ldrb	r3, [r7, #15]
    90a8:	216f      	movs	r1, #111	; 0x6f
    90aa:	4618      	mov	r0, r3
    90ac:	4b0c      	ldr	r3, [pc, #48]	; (90e0 <_usb_d_dev_handle_setup+0xcc>)
    90ae:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    90b0:	7bfb      	ldrb	r3, [r7, #15]
    90b2:	216f      	movs	r1, #111	; 0x6f
    90b4:	4618      	mov	r0, r3
    90b6:	4b0b      	ldr	r3, [pc, #44]	; (90e4 <_usb_d_dev_handle_setup+0xd0>)
    90b8:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    90ba:	4b0b      	ldr	r3, [pc, #44]	; (90e8 <_usb_d_dev_handle_setup+0xd4>)
    90bc:	689b      	ldr	r3, [r3, #8]
    90be:	687a      	ldr	r2, [r7, #4]
    90c0:	7c92      	ldrb	r2, [r2, #18]
    90c2:	4610      	mov	r0, r2
    90c4:	4798      	blx	r3
}
    90c6:	3710      	adds	r7, #16
    90c8:	46bd      	mov	sp, r7
    90ca:	bd80      	pop	{r7, pc}
    90cc:	000084b9 	.word	0x000084b9
    90d0:	00008465 	.word	0x00008465
    90d4:	0000875d 	.word	0x0000875d
    90d8:	000087b5 	.word	0x000087b5
    90dc:	00008725 	.word	0x00008725
    90e0:	00008265 	.word	0x00008265
    90e4:	000082b5 	.word	0x000082b5
    90e8:	20000e84 	.word	0x20000e84

000090ec <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    90ec:	b580      	push	{r7, lr}
    90ee:	b084      	sub	sp, #16
    90f0:	af00      	add	r7, sp, #0
    90f2:	6078      	str	r0, [r7, #4]
    90f4:	460b      	mov	r3, r1
    90f6:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    90f8:	687b      	ldr	r3, [r7, #4]
    90fa:	7c9b      	ldrb	r3, [r3, #18]
    90fc:	f003 030f 	and.w	r3, r3, #15
    9100:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    9102:	78f9      	ldrb	r1, [r7, #3]
    9104:	7bfb      	ldrb	r3, [r7, #15]
    9106:	2200      	movs	r2, #0
    9108:	4618      	mov	r0, r3
    910a:	4b07      	ldr	r3, [pc, #28]	; (9128 <_usb_d_dev_handle_stall+0x3c>)
    910c:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    910e:	4b07      	ldr	r3, [pc, #28]	; (912c <_usb_d_dev_handle_stall+0x40>)
    9110:	691b      	ldr	r3, [r3, #16]
    9112:	687a      	ldr	r2, [r7, #4]
    9114:	7c90      	ldrb	r0, [r2, #18]
    9116:	687a      	ldr	r2, [r7, #4]
    9118:	6892      	ldr	r2, [r2, #8]
    911a:	2101      	movs	r1, #1
    911c:	4798      	blx	r3
}
    911e:	bf00      	nop
    9120:	3710      	adds	r7, #16
    9122:	46bd      	mov	sp, r7
    9124:	bd80      	pop	{r7, pc}
    9126:	bf00      	nop
    9128:	00008419 	.word	0x00008419
    912c:	20000e84 	.word	0x20000e84

00009130 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    9130:	b580      	push	{r7, lr}
    9132:	b088      	sub	sp, #32
    9134:	af00      	add	r7, sp, #0
    9136:	6078      	str	r0, [r7, #4]
    9138:	460b      	mov	r3, r1
    913a:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    913c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9140:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    9142:	687b      	ldr	r3, [r7, #4]
    9144:	7c9b      	ldrb	r3, [r3, #18]
    9146:	f003 030f 	and.w	r3, r3, #15
    914a:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    914c:	4b61      	ldr	r3, [pc, #388]	; (92d4 <_usb_d_dev_handle_trfail+0x1a4>)
    914e:	881b      	ldrh	r3, [r3, #0]
    9150:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    9152:	7efb      	ldrb	r3, [r7, #27]
    9154:	015b      	lsls	r3, r3, #5
    9156:	4a60      	ldr	r2, [pc, #384]	; (92d8 <_usb_d_dev_handle_trfail+0x1a8>)
    9158:	4413      	add	r3, r2
    915a:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    915c:	78fb      	ldrb	r3, [r7, #3]
    915e:	2b00      	cmp	r3, #0
    9160:	d006      	beq.n	9170 <_usb_d_dev_handle_trfail+0x40>
    9162:	7efb      	ldrb	r3, [r7, #27]
    9164:	4619      	mov	r1, r3
    9166:	69f8      	ldr	r0, [r7, #28]
    9168:	4b5c      	ldr	r3, [pc, #368]	; (92dc <_usb_d_dev_handle_trfail+0x1ac>)
    916a:	4798      	blx	r3
    916c:	4603      	mov	r3, r0
    916e:	e005      	b.n	917c <_usb_d_dev_handle_trfail+0x4c>
    9170:	7efb      	ldrb	r3, [r7, #27]
    9172:	4619      	mov	r1, r3
    9174:	69f8      	ldr	r0, [r7, #28]
    9176:	4b5a      	ldr	r3, [pc, #360]	; (92e0 <_usb_d_dev_handle_trfail+0x1b0>)
    9178:	4798      	blx	r3
    917a:	4603      	mov	r3, r0
    917c:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    917e:	687b      	ldr	r3, [r7, #4]
    9180:	7cdb      	ldrb	r3, [r3, #19]
    9182:	f003 0307 	and.w	r3, r3, #7
    9186:	b2db      	uxtb	r3, r3
    9188:	2b01      	cmp	r3, #1
    918a:	bf0c      	ite	eq
    918c:	2301      	moveq	r3, #1
    918e:	2300      	movne	r3, #0
    9190:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    9192:	78fb      	ldrb	r3, [r7, #3]
    9194:	011b      	lsls	r3, r3, #4
    9196:	697a      	ldr	r2, [r7, #20]
    9198:	4413      	add	r3, r2
    919a:	7a9b      	ldrb	r3, [r3, #10]
    919c:	b2db      	uxtb	r3, r3
    919e:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    91a0:	7cfb      	ldrb	r3, [r7, #19]
    91a2:	2b02      	cmp	r3, #2
    91a4:	d12f      	bne.n	9206 <_usb_d_dev_handle_trfail+0xd6>
    91a6:	7b3b      	ldrb	r3, [r7, #12]
    91a8:	f003 0301 	and.w	r3, r3, #1
    91ac:	b2db      	uxtb	r3, r3
    91ae:	2b00      	cmp	r3, #0
    91b0:	d029      	beq.n	9206 <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    91b2:	78fb      	ldrb	r3, [r7, #3]
    91b4:	011b      	lsls	r3, r3, #4
    91b6:	697a      	ldr	r2, [r7, #20]
    91b8:	441a      	add	r2, r3
    91ba:	7a93      	ldrb	r3, [r2, #10]
    91bc:	f36f 0300 	bfc	r3, #0, #1
    91c0:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    91c2:	78fb      	ldrb	r3, [r7, #3]
    91c4:	f107 0220 	add.w	r2, r7, #32
    91c8:	4413      	add	r3, r2
    91ca:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    91ce:	7efb      	ldrb	r3, [r7, #27]
    91d0:	4619      	mov	r1, r3
    91d2:	69f8      	ldr	r0, [r7, #28]
    91d4:	4b43      	ldr	r3, [pc, #268]	; (92e4 <_usb_d_dev_handle_trfail+0x1b4>)
    91d6:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    91d8:	78fb      	ldrb	r3, [r7, #3]
    91da:	f107 0220 	add.w	r2, r7, #32
    91de:	4413      	add	r3, r2
    91e0:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    91e4:	7efb      	ldrb	r3, [r7, #27]
    91e6:	4619      	mov	r1, r3
    91e8:	69f8      	ldr	r0, [r7, #28]
    91ea:	4b3f      	ldr	r3, [pc, #252]	; (92e8 <_usb_d_dev_handle_trfail+0x1b8>)
    91ec:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    91ee:	78fb      	ldrb	r3, [r7, #3]
    91f0:	2b00      	cmp	r3, #0
    91f2:	bf14      	ite	ne
    91f4:	2301      	movne	r3, #1
    91f6:	2300      	moveq	r3, #0
    91f8:	b2db      	uxtb	r3, r3
    91fa:	2204      	movs	r2, #4
    91fc:	4619      	mov	r1, r3
    91fe:	6878      	ldr	r0, [r7, #4]
    9200:	4b3a      	ldr	r3, [pc, #232]	; (92ec <_usb_d_dev_handle_trfail+0x1bc>)
    9202:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    9204:	e062      	b.n	92cc <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    9206:	7b3b      	ldrb	r3, [r7, #12]
    9208:	f003 0302 	and.w	r3, r3, #2
    920c:	b2db      	uxtb	r3, r3
    920e:	2b00      	cmp	r3, #0
    9210:	d040      	beq.n	9294 <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    9212:	78fb      	ldrb	r3, [r7, #3]
    9214:	011b      	lsls	r3, r3, #4
    9216:	697a      	ldr	r2, [r7, #20]
    9218:	441a      	add	r2, r3
    921a:	7a93      	ldrb	r3, [r2, #10]
    921c:	f36f 0341 	bfc	r3, #1, #1
    9220:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    9222:	78fb      	ldrb	r3, [r7, #3]
    9224:	f107 0220 	add.w	r2, r7, #32
    9228:	4413      	add	r3, r2
    922a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    922e:	7efb      	ldrb	r3, [r7, #27]
    9230:	4619      	mov	r1, r3
    9232:	69f8      	ldr	r0, [r7, #28]
    9234:	4b2b      	ldr	r3, [pc, #172]	; (92e4 <_usb_d_dev_handle_trfail+0x1b4>)
    9236:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    9238:	78fb      	ldrb	r3, [r7, #3]
    923a:	f107 0220 	add.w	r2, r7, #32
    923e:	4413      	add	r3, r2
    9240:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9244:	7efb      	ldrb	r3, [r7, #27]
    9246:	4619      	mov	r1, r3
    9248:	69f8      	ldr	r0, [r7, #28]
    924a:	4b27      	ldr	r3, [pc, #156]	; (92e8 <_usb_d_dev_handle_trfail+0x1b8>)
    924c:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    924e:	7cbb      	ldrb	r3, [r7, #18]
    9250:	2b00      	cmp	r3, #0
    9252:	d03b      	beq.n	92cc <_usb_d_dev_handle_trfail+0x19c>
    9254:	687b      	ldr	r3, [r7, #4]
    9256:	7cdb      	ldrb	r3, [r3, #19]
    9258:	f003 0340 	and.w	r3, r3, #64	; 0x40
    925c:	b2db      	uxtb	r3, r3
    925e:	2b00      	cmp	r3, #0
    9260:	d034      	beq.n	92cc <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    9262:	687b      	ldr	r3, [r7, #4]
    9264:	7cdb      	ldrb	r3, [r3, #19]
    9266:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    926a:	b2db      	uxtb	r3, r3
    926c:	461a      	mov	r2, r3
    926e:	78fb      	ldrb	r3, [r7, #3]
    9270:	4293      	cmp	r3, r2
    9272:	d02b      	beq.n	92cc <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    9274:	687b      	ldr	r3, [r7, #4]
    9276:	7cdb      	ldrb	r3, [r3, #19]
    9278:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    927c:	b2db      	uxtb	r3, r3
    927e:	2b00      	cmp	r3, #0
    9280:	bf14      	ite	ne
    9282:	2301      	movne	r3, #1
    9284:	2300      	moveq	r3, #0
    9286:	b2db      	uxtb	r3, r3
    9288:	2200      	movs	r2, #0
    928a:	4619      	mov	r1, r3
    928c:	6878      	ldr	r0, [r7, #4]
    928e:	4b17      	ldr	r3, [pc, #92]	; (92ec <_usb_d_dev_handle_trfail+0x1bc>)
    9290:	4798      	blx	r3
}
    9292:	e01b      	b.n	92cc <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    9294:	78fa      	ldrb	r2, [r7, #3]
    9296:	7efb      	ldrb	r3, [r7, #27]
    9298:	4611      	mov	r1, r2
    929a:	4618      	mov	r0, r3
    929c:	4b14      	ldr	r3, [pc, #80]	; (92f0 <_usb_d_dev_handle_trfail+0x1c0>)
    929e:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    92a0:	78fb      	ldrb	r3, [r7, #3]
    92a2:	f107 0220 	add.w	r2, r7, #32
    92a6:	4413      	add	r3, r2
    92a8:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    92ac:	7efb      	ldrb	r3, [r7, #27]
    92ae:	4619      	mov	r1, r3
    92b0:	69f8      	ldr	r0, [r7, #28]
    92b2:	4b0c      	ldr	r3, [pc, #48]	; (92e4 <_usb_d_dev_handle_trfail+0x1b4>)
    92b4:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    92b6:	78fb      	ldrb	r3, [r7, #3]
    92b8:	f107 0220 	add.w	r2, r7, #32
    92bc:	4413      	add	r3, r2
    92be:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    92c2:	7efb      	ldrb	r3, [r7, #27]
    92c4:	4619      	mov	r1, r3
    92c6:	69f8      	ldr	r0, [r7, #28]
    92c8:	4b07      	ldr	r3, [pc, #28]	; (92e8 <_usb_d_dev_handle_trfail+0x1b8>)
    92ca:	4798      	blx	r3
}
    92cc:	bf00      	nop
    92ce:	3720      	adds	r7, #32
    92d0:	46bd      	mov	sp, r7
    92d2:	bd80      	pop	{r7, pc}
    92d4:	00013204 	.word	0x00013204
    92d8:	20000f4c 	.word	0x20000f4c
    92dc:	00007e99 	.word	0x00007e99
    92e0:	00007e69 	.word	0x00007e69
    92e4:	00007d3d 	.word	0x00007d3d
    92e8:	00007e3d 	.word	0x00007e3d
    92ec:	00009ea9 	.word	0x00009ea9
    92f0:	00008725 	.word	0x00008725

000092f4 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    92f4:	b580      	push	{r7, lr}
    92f6:	b082      	sub	sp, #8
    92f8:	af00      	add	r7, sp, #0
    92fa:	6078      	str	r0, [r7, #4]
    92fc:	460b      	mov	r3, r1
    92fe:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9300:	78fb      	ldrb	r3, [r7, #3]
    9302:	f003 0310 	and.w	r3, r3, #16
    9306:	2b00      	cmp	r3, #0
    9308:	d003      	beq.n	9312 <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    930a:	6878      	ldr	r0, [r7, #4]
    930c:	4b0c      	ldr	r3, [pc, #48]	; (9340 <_usb_d_dev_trans_setup_isr+0x4c>)
    930e:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    9310:	e012      	b.n	9338 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    9312:	78fb      	ldrb	r3, [r7, #3]
    9314:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9318:	2b00      	cmp	r3, #0
    931a:	d004      	beq.n	9326 <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    931c:	2101      	movs	r1, #1
    931e:	6878      	ldr	r0, [r7, #4]
    9320:	4b08      	ldr	r3, [pc, #32]	; (9344 <_usb_d_dev_trans_setup_isr+0x50>)
    9322:	4798      	blx	r3
}
    9324:	e008      	b.n	9338 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    9326:	78fb      	ldrb	r3, [r7, #3]
    9328:	f003 0320 	and.w	r3, r3, #32
    932c:	2b00      	cmp	r3, #0
    932e:	d003      	beq.n	9338 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    9330:	2100      	movs	r1, #0
    9332:	6878      	ldr	r0, [r7, #4]
    9334:	4b03      	ldr	r3, [pc, #12]	; (9344 <_usb_d_dev_trans_setup_isr+0x50>)
    9336:	4798      	blx	r3
}
    9338:	bf00      	nop
    933a:	3708      	adds	r7, #8
    933c:	46bd      	mov	sp, r7
    933e:	bd80      	pop	{r7, pc}
    9340:	00009015 	.word	0x00009015
    9344:	000090ed 	.word	0x000090ed

00009348 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9348:	b580      	push	{r7, lr}
    934a:	b082      	sub	sp, #8
    934c:	af00      	add	r7, sp, #0
    934e:	6078      	str	r0, [r7, #4]
    9350:	460b      	mov	r3, r1
    9352:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    9354:	78fb      	ldrb	r3, [r7, #3]
    9356:	f003 0340 	and.w	r3, r3, #64	; 0x40
    935a:	2b00      	cmp	r3, #0
    935c:	d004      	beq.n	9368 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    935e:	2101      	movs	r1, #1
    9360:	6878      	ldr	r0, [r7, #4]
    9362:	4b1a      	ldr	r3, [pc, #104]	; (93cc <_usb_d_dev_trans_in_isr+0x84>)
    9364:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    9366:	e02c      	b.n	93c2 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    9368:	78fb      	ldrb	r3, [r7, #3]
    936a:	f003 0308 	and.w	r3, r3, #8
    936e:	2b00      	cmp	r3, #0
    9370:	d004      	beq.n	937c <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    9372:	2101      	movs	r1, #1
    9374:	6878      	ldr	r0, [r7, #4]
    9376:	4b16      	ldr	r3, [pc, #88]	; (93d0 <_usb_d_dev_trans_in_isr+0x88>)
    9378:	4798      	blx	r3
}
    937a:	e022      	b.n	93c2 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    937c:	78fb      	ldrb	r3, [r7, #3]
    937e:	f003 0302 	and.w	r3, r3, #2
    9382:	2b00      	cmp	r3, #0
    9384:	d004      	beq.n	9390 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    9386:	2101      	movs	r1, #1
    9388:	6878      	ldr	r0, [r7, #4]
    938a:	4b12      	ldr	r3, [pc, #72]	; (93d4 <_usb_d_dev_trans_in_isr+0x8c>)
    938c:	4798      	blx	r3
}
    938e:	e018      	b.n	93c2 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    9390:	687b      	ldr	r3, [r7, #4]
    9392:	7cdb      	ldrb	r3, [r3, #19]
    9394:	f003 0307 	and.w	r3, r3, #7
    9398:	b2db      	uxtb	r3, r3
    939a:	2b01      	cmp	r3, #1
    939c:	d111      	bne.n	93c2 <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    939e:	78fb      	ldrb	r3, [r7, #3]
    93a0:	f003 0304 	and.w	r3, r3, #4
    93a4:	2b00      	cmp	r3, #0
    93a6:	d004      	beq.n	93b2 <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    93a8:	2100      	movs	r1, #0
    93aa:	6878      	ldr	r0, [r7, #4]
    93ac:	4b08      	ldr	r3, [pc, #32]	; (93d0 <_usb_d_dev_trans_in_isr+0x88>)
    93ae:	4798      	blx	r3
}
    93b0:	e007      	b.n	93c2 <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    93b2:	78fb      	ldrb	r3, [r7, #3]
    93b4:	f003 0310 	and.w	r3, r3, #16
    93b8:	2b00      	cmp	r3, #0
    93ba:	d002      	beq.n	93c2 <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    93bc:	6878      	ldr	r0, [r7, #4]
    93be:	4b06      	ldr	r3, [pc, #24]	; (93d8 <_usb_d_dev_trans_in_isr+0x90>)
    93c0:	4798      	blx	r3
}
    93c2:	bf00      	nop
    93c4:	3708      	adds	r7, #8
    93c6:	46bd      	mov	sp, r7
    93c8:	bd80      	pop	{r7, pc}
    93ca:	bf00      	nop
    93cc:	000090ed 	.word	0x000090ed
    93d0:	00009131 	.word	0x00009131
    93d4:	00008b39 	.word	0x00008b39
    93d8:	00009015 	.word	0x00009015

000093dc <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    93dc:	b580      	push	{r7, lr}
    93de:	b082      	sub	sp, #8
    93e0:	af00      	add	r7, sp, #0
    93e2:	6078      	str	r0, [r7, #4]
    93e4:	460b      	mov	r3, r1
    93e6:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    93e8:	78fb      	ldrb	r3, [r7, #3]
    93ea:	f003 0320 	and.w	r3, r3, #32
    93ee:	2b00      	cmp	r3, #0
    93f0:	d004      	beq.n	93fc <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    93f2:	2100      	movs	r1, #0
    93f4:	6878      	ldr	r0, [r7, #4]
    93f6:	4b1a      	ldr	r3, [pc, #104]	; (9460 <_usb_d_dev_trans_out_isr+0x84>)
    93f8:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    93fa:	e02c      	b.n	9456 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    93fc:	78fb      	ldrb	r3, [r7, #3]
    93fe:	f003 0304 	and.w	r3, r3, #4
    9402:	2b00      	cmp	r3, #0
    9404:	d004      	beq.n	9410 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    9406:	2100      	movs	r1, #0
    9408:	6878      	ldr	r0, [r7, #4]
    940a:	4b16      	ldr	r3, [pc, #88]	; (9464 <_usb_d_dev_trans_out_isr+0x88>)
    940c:	4798      	blx	r3
}
    940e:	e022      	b.n	9456 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    9410:	78fb      	ldrb	r3, [r7, #3]
    9412:	f003 0301 	and.w	r3, r3, #1
    9416:	2b00      	cmp	r3, #0
    9418:	d004      	beq.n	9424 <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    941a:	2101      	movs	r1, #1
    941c:	6878      	ldr	r0, [r7, #4]
    941e:	4b12      	ldr	r3, [pc, #72]	; (9468 <_usb_d_dev_trans_out_isr+0x8c>)
    9420:	4798      	blx	r3
}
    9422:	e018      	b.n	9456 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    9424:	687b      	ldr	r3, [r7, #4]
    9426:	7cdb      	ldrb	r3, [r3, #19]
    9428:	f003 0307 	and.w	r3, r3, #7
    942c:	b2db      	uxtb	r3, r3
    942e:	2b01      	cmp	r3, #1
    9430:	d111      	bne.n	9456 <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    9432:	78fb      	ldrb	r3, [r7, #3]
    9434:	f003 0308 	and.w	r3, r3, #8
    9438:	2b00      	cmp	r3, #0
    943a:	d004      	beq.n	9446 <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    943c:	2101      	movs	r1, #1
    943e:	6878      	ldr	r0, [r7, #4]
    9440:	4b08      	ldr	r3, [pc, #32]	; (9464 <_usb_d_dev_trans_out_isr+0x88>)
    9442:	4798      	blx	r3
}
    9444:	e007      	b.n	9456 <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9446:	78fb      	ldrb	r3, [r7, #3]
    9448:	f003 0310 	and.w	r3, r3, #16
    944c:	2b00      	cmp	r3, #0
    944e:	d002      	beq.n	9456 <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    9450:	6878      	ldr	r0, [r7, #4]
    9452:	4b06      	ldr	r3, [pc, #24]	; (946c <_usb_d_dev_trans_out_isr+0x90>)
    9454:	4798      	blx	r3
}
    9456:	bf00      	nop
    9458:	3708      	adds	r7, #8
    945a:	46bd      	mov	sp, r7
    945c:	bd80      	pop	{r7, pc}
    945e:	bf00      	nop
    9460:	000090ed 	.word	0x000090ed
    9464:	00009131 	.word	0x00009131
    9468:	00008d51 	.word	0x00008d51
    946c:	00009015 	.word	0x00009015

00009470 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    9470:	b580      	push	{r7, lr}
    9472:	b084      	sub	sp, #16
    9474:	af00      	add	r7, sp, #0
    9476:	6078      	str	r0, [r7, #4]
    9478:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    947a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    947e:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9480:	683b      	ldr	r3, [r7, #0]
    9482:	7c9b      	ldrb	r3, [r3, #18]
    9484:	f003 030f 	and.w	r3, r3, #15
    9488:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    948a:	7afb      	ldrb	r3, [r7, #11]
    948c:	2201      	movs	r2, #1
    948e:	409a      	lsls	r2, r3
    9490:	687b      	ldr	r3, [r7, #4]
    9492:	4013      	ands	r3, r2
    9494:	2b00      	cmp	r3, #0
    9496:	d03d      	beq.n	9514 <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    9498:	7afb      	ldrb	r3, [r7, #11]
    949a:	68fa      	ldr	r2, [r7, #12]
    949c:	3308      	adds	r3, #8
    949e:	015b      	lsls	r3, r3, #5
    94a0:	4413      	add	r3, r2
    94a2:	3307      	adds	r3, #7
    94a4:	781b      	ldrb	r3, [r3, #0]
    94a6:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    94a8:	7afb      	ldrb	r3, [r7, #11]
    94aa:	68fa      	ldr	r2, [r7, #12]
    94ac:	015b      	lsls	r3, r3, #5
    94ae:	4413      	add	r3, r2
    94b0:	f203 1309 	addw	r3, r3, #265	; 0x109
    94b4:	781b      	ldrb	r3, [r3, #0]
    94b6:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    94b8:	7aba      	ldrb	r2, [r7, #10]
    94ba:	7a7b      	ldrb	r3, [r7, #9]
    94bc:	4013      	ands	r3, r2
    94be:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    94c0:	7abb      	ldrb	r3, [r7, #10]
    94c2:	2b00      	cmp	r3, #0
    94c4:	d027      	beq.n	9516 <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    94c6:	683b      	ldr	r3, [r7, #0]
    94c8:	7cdb      	ldrb	r3, [r3, #19]
    94ca:	f003 0307 	and.w	r3, r3, #7
    94ce:	b2db      	uxtb	r3, r3
    94d0:	2b01      	cmp	r3, #1
    94d2:	d10c      	bne.n	94ee <_usb_d_dev_handle_eps+0x7e>
    94d4:	683b      	ldr	r3, [r7, #0]
    94d6:	7cdb      	ldrb	r3, [r3, #19]
    94d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    94dc:	b2db      	uxtb	r3, r3
    94de:	2b00      	cmp	r3, #0
    94e0:	d105      	bne.n	94ee <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    94e2:	7abb      	ldrb	r3, [r7, #10]
    94e4:	4619      	mov	r1, r3
    94e6:	6838      	ldr	r0, [r7, #0]
    94e8:	4b0c      	ldr	r3, [pc, #48]	; (951c <_usb_d_dev_handle_eps+0xac>)
    94ea:	4798      	blx	r3
    94ec:	e013      	b.n	9516 <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    94ee:	683b      	ldr	r3, [r7, #0]
    94f0:	7cdb      	ldrb	r3, [r3, #19]
    94f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    94f6:	b2db      	uxtb	r3, r3
    94f8:	2b00      	cmp	r3, #0
    94fa:	d005      	beq.n	9508 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    94fc:	7abb      	ldrb	r3, [r7, #10]
    94fe:	4619      	mov	r1, r3
    9500:	6838      	ldr	r0, [r7, #0]
    9502:	4b07      	ldr	r3, [pc, #28]	; (9520 <_usb_d_dev_handle_eps+0xb0>)
    9504:	4798      	blx	r3
    9506:	e006      	b.n	9516 <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    9508:	7abb      	ldrb	r3, [r7, #10]
    950a:	4619      	mov	r1, r3
    950c:	6838      	ldr	r0, [r7, #0]
    950e:	4b05      	ldr	r3, [pc, #20]	; (9524 <_usb_d_dev_handle_eps+0xb4>)
    9510:	4798      	blx	r3
    9512:	e000      	b.n	9516 <_usb_d_dev_handle_eps+0xa6>
		return;
    9514:	bf00      	nop
		}
	}
}
    9516:	3710      	adds	r7, #16
    9518:	46bd      	mov	sp, r7
    951a:	bd80      	pop	{r7, pc}
    951c:	000092f5 	.word	0x000092f5
    9520:	00009349 	.word	0x00009349
    9524:	000093dd 	.word	0x000093dd

00009528 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    9528:	b580      	push	{r7, lr}
    952a:	b084      	sub	sp, #16
    952c:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    952e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9532:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    9534:	68bb      	ldr	r3, [r7, #8]
    9536:	8c1b      	ldrh	r3, [r3, #32]
    9538:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    953a:	88fb      	ldrh	r3, [r7, #6]
    953c:	2b00      	cmp	r3, #0
    953e:	d104      	bne.n	954a <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    9540:	4b13      	ldr	r3, [pc, #76]	; (9590 <_usb_d_dev_handler+0x68>)
    9542:	4798      	blx	r3
    9544:	4603      	mov	r3, r0
    9546:	2b00      	cmp	r3, #0
    9548:	d11e      	bne.n	9588 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    954a:	2300      	movs	r3, #0
    954c:	73fb      	strb	r3, [r7, #15]
    954e:	e017      	b.n	9580 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    9550:	7bfa      	ldrb	r2, [r7, #15]
    9552:	4613      	mov	r3, r2
    9554:	009b      	lsls	r3, r3, #2
    9556:	4413      	add	r3, r2
    9558:	009b      	lsls	r3, r3, #2
    955a:	3310      	adds	r3, #16
    955c:	4a0d      	ldr	r2, [pc, #52]	; (9594 <_usb_d_dev_handler+0x6c>)
    955e:	4413      	add	r3, r2
    9560:	3304      	adds	r3, #4
    9562:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    9564:	683b      	ldr	r3, [r7, #0]
    9566:	7c9b      	ldrb	r3, [r3, #18]
    9568:	2bff      	cmp	r3, #255	; 0xff
    956a:	d005      	beq.n	9578 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    956c:	88fb      	ldrh	r3, [r7, #6]
    956e:	6839      	ldr	r1, [r7, #0]
    9570:	4618      	mov	r0, r3
    9572:	4b09      	ldr	r3, [pc, #36]	; (9598 <_usb_d_dev_handler+0x70>)
    9574:	4798      	blx	r3
    9576:	e000      	b.n	957a <_usb_d_dev_handler+0x52>
			continue;
    9578:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    957a:	7bfb      	ldrb	r3, [r7, #15]
    957c:	3301      	adds	r3, #1
    957e:	73fb      	strb	r3, [r7, #15]
    9580:	7bfb      	ldrb	r3, [r7, #15]
    9582:	2b08      	cmp	r3, #8
    9584:	d9e4      	bls.n	9550 <_usb_d_dev_handler+0x28>
    9586:	e000      	b.n	958a <_usb_d_dev_handler+0x62>
			return;
    9588:	bf00      	nop
	}
}
    958a:	3710      	adds	r7, #16
    958c:	46bd      	mov	sp, r7
    958e:	bd80      	pop	{r7, pc}
    9590:	00008a81 	.word	0x00008a81
    9594:	20000e84 	.word	0x20000e84
    9598:	00009471 	.word	0x00009471

0000959c <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    959c:	b580      	push	{r7, lr}
    959e:	b082      	sub	sp, #8
    95a0:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    95a2:	2300      	movs	r3, #0
    95a4:	71fb      	strb	r3, [r7, #7]
    95a6:	e023      	b.n	95f0 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    95a8:	79fa      	ldrb	r2, [r7, #7]
    95aa:	4613      	mov	r3, r2
    95ac:	009b      	lsls	r3, r3, #2
    95ae:	4413      	add	r3, r2
    95b0:	009b      	lsls	r3, r3, #2
    95b2:	3310      	adds	r3, #16
    95b4:	4a14      	ldr	r2, [pc, #80]	; (9608 <_usb_d_dev_reset_epts+0x6c>)
    95b6:	4413      	add	r3, r2
    95b8:	3304      	adds	r3, #4
    95ba:	2103      	movs	r1, #3
    95bc:	4618      	mov	r0, r3
    95be:	4b13      	ldr	r3, [pc, #76]	; (960c <_usb_d_dev_reset_epts+0x70>)
    95c0:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    95c2:	79fa      	ldrb	r2, [r7, #7]
    95c4:	4910      	ldr	r1, [pc, #64]	; (9608 <_usb_d_dev_reset_epts+0x6c>)
    95c6:	4613      	mov	r3, r2
    95c8:	009b      	lsls	r3, r3, #2
    95ca:	4413      	add	r3, r2
    95cc:	009b      	lsls	r3, r3, #2
    95ce:	440b      	add	r3, r1
    95d0:	3326      	adds	r3, #38	; 0x26
    95d2:	22ff      	movs	r2, #255	; 0xff
    95d4:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    95d6:	79fa      	ldrb	r2, [r7, #7]
    95d8:	490b      	ldr	r1, [pc, #44]	; (9608 <_usb_d_dev_reset_epts+0x6c>)
    95da:	4613      	mov	r3, r2
    95dc:	009b      	lsls	r3, r3, #2
    95de:	4413      	add	r3, r2
    95e0:	009b      	lsls	r3, r3, #2
    95e2:	440b      	add	r3, r1
    95e4:	3327      	adds	r3, #39	; 0x27
    95e6:	2200      	movs	r2, #0
    95e8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    95ea:	79fb      	ldrb	r3, [r7, #7]
    95ec:	3301      	adds	r3, #1
    95ee:	71fb      	strb	r3, [r7, #7]
    95f0:	79fb      	ldrb	r3, [r7, #7]
    95f2:	2b08      	cmp	r3, #8
    95f4:	d9d8      	bls.n	95a8 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    95f6:	22a0      	movs	r2, #160	; 0xa0
    95f8:	2100      	movs	r1, #0
    95fa:	4805      	ldr	r0, [pc, #20]	; (9610 <_usb_d_dev_reset_epts+0x74>)
    95fc:	4b05      	ldr	r3, [pc, #20]	; (9614 <_usb_d_dev_reset_epts+0x78>)
    95fe:	4798      	blx	r3
}
    9600:	bf00      	nop
    9602:	3708      	adds	r7, #8
    9604:	46bd      	mov	sp, r7
    9606:	bd80      	pop	{r7, pc}
    9608:	20000e84 	.word	0x20000e84
    960c:	00009e61 	.word	0x00009e61
    9610:	20000f4c 	.word	0x20000f4c
    9614:	00012ca9 	.word	0x00012ca9

00009618 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    9618:	b580      	push	{r7, lr}
    961a:	b084      	sub	sp, #16
    961c:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    961e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9622:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    9624:	2301      	movs	r3, #1
    9626:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    9628:	2304      	movs	r3, #4
    962a:	713b      	strb	r3, [r7, #4]
    962c:	2300      	movs	r3, #0
    962e:	717b      	strb	r3, [r7, #5]
    9630:	2300      	movs	r3, #0
    9632:	71bb      	strb	r3, [r7, #6]
    9634:	2300      	movs	r3, #0
    9636:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    9638:	2101      	movs	r1, #1
    963a:	68f8      	ldr	r0, [r7, #12]
    963c:	4b26      	ldr	r3, [pc, #152]	; (96d8 <_usb_d_dev_init+0xc0>)
    963e:	4798      	blx	r3
    9640:	4603      	mov	r3, r0
    9642:	f083 0301 	eor.w	r3, r3, #1
    9646:	b2db      	uxtb	r3, r3
    9648:	2b00      	cmp	r3, #0
    964a:	d011      	beq.n	9670 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    964c:	2102      	movs	r1, #2
    964e:	68f8      	ldr	r0, [r7, #12]
    9650:	4b22      	ldr	r3, [pc, #136]	; (96dc <_usb_d_dev_init+0xc4>)
    9652:	4798      	blx	r3
    9654:	4603      	mov	r3, r0
    9656:	2b00      	cmp	r3, #0
    9658:	d006      	beq.n	9668 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    965a:	68f8      	ldr	r0, [r7, #12]
    965c:	4b20      	ldr	r3, [pc, #128]	; (96e0 <_usb_d_dev_init+0xc8>)
    965e:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    9660:	2102      	movs	r1, #2
    9662:	68f8      	ldr	r0, [r7, #12]
    9664:	4b1f      	ldr	r3, [pc, #124]	; (96e4 <_usb_d_dev_init+0xcc>)
    9666:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    9668:	2101      	movs	r1, #1
    966a:	68f8      	ldr	r0, [r7, #12]
    966c:	4b1e      	ldr	r3, [pc, #120]	; (96e8 <_usb_d_dev_init+0xd0>)
    966e:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    9670:	2101      	movs	r1, #1
    9672:	68f8      	ldr	r0, [r7, #12]
    9674:	4b1b      	ldr	r3, [pc, #108]	; (96e4 <_usb_d_dev_init+0xcc>)
    9676:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    9678:	4b1c      	ldr	r3, [pc, #112]	; (96ec <_usb_d_dev_init+0xd4>)
    967a:	4a1d      	ldr	r2, [pc, #116]	; (96f0 <_usb_d_dev_init+0xd8>)
    967c:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    967e:	4b1b      	ldr	r3, [pc, #108]	; (96ec <_usb_d_dev_init+0xd4>)
    9680:	4a1b      	ldr	r2, [pc, #108]	; (96f0 <_usb_d_dev_init+0xd8>)
    9682:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    9684:	4b19      	ldr	r3, [pc, #100]	; (96ec <_usb_d_dev_init+0xd4>)
    9686:	4a1a      	ldr	r2, [pc, #104]	; (96f0 <_usb_d_dev_init+0xd8>)
    9688:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    968a:	4b18      	ldr	r3, [pc, #96]	; (96ec <_usb_d_dev_init+0xd4>)
    968c:	4a18      	ldr	r2, [pc, #96]	; (96f0 <_usb_d_dev_init+0xd8>)
    968e:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    9690:	4b16      	ldr	r3, [pc, #88]	; (96ec <_usb_d_dev_init+0xd4>)
    9692:	4a17      	ldr	r2, [pc, #92]	; (96f0 <_usb_d_dev_init+0xd8>)
    9694:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    9696:	4b17      	ldr	r3, [pc, #92]	; (96f4 <_usb_d_dev_init+0xdc>)
    9698:	4798      	blx	r3

	_usb_load_calib();
    969a:	4b17      	ldr	r3, [pc, #92]	; (96f8 <_usb_d_dev_init+0xe0>)
    969c:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    969e:	2104      	movs	r1, #4
    96a0:	68f8      	ldr	r0, [r7, #12]
    96a2:	4b11      	ldr	r3, [pc, #68]	; (96e8 <_usb_d_dev_init+0xd0>)
    96a4:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    96a6:	4b15      	ldr	r3, [pc, #84]	; (96fc <_usb_d_dev_init+0xe4>)
    96a8:	4619      	mov	r1, r3
    96aa:	68f8      	ldr	r0, [r7, #12]
    96ac:	4b14      	ldr	r3, [pc, #80]	; (9700 <_usb_d_dev_init+0xe8>)
    96ae:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    96b0:	7afb      	ldrb	r3, [r7, #11]
    96b2:	f107 0210 	add.w	r2, r7, #16
    96b6:	4413      	add	r3, r2
    96b8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    96bc:	f043 0301 	orr.w	r3, r3, #1
    96c0:	b2db      	uxtb	r3, r3
    96c2:	b29b      	uxth	r3, r3
    96c4:	4619      	mov	r1, r3
    96c6:	68f8      	ldr	r0, [r7, #12]
    96c8:	4b0e      	ldr	r3, [pc, #56]	; (9704 <_usb_d_dev_init+0xec>)
    96ca:	4798      	blx	r3

	return ERR_NONE;
    96cc:	2300      	movs	r3, #0
}
    96ce:	4618      	mov	r0, r3
    96d0:	3710      	adds	r7, #16
    96d2:	46bd      	mov	sp, r7
    96d4:	bd80      	pop	{r7, pc}
    96d6:	bf00      	nop
    96d8:	00007cb1 	.word	0x00007cb1
    96dc:	00008001 	.word	0x00008001
    96e0:	00007fd5 	.word	0x00007fd5
    96e4:	00007c87 	.word	0x00007c87
    96e8:	00008031 	.word	0x00008031
    96ec:	20000e84 	.word	0x20000e84
    96f0:	000080f9 	.word	0x000080f9
    96f4:	0000959d 	.word	0x0000959d
    96f8:	00008111 	.word	0x00008111
    96fc:	20000f4c 	.word	0x20000f4c
    9700:	000080dd 	.word	0x000080dd
    9704:	000080a1 	.word	0x000080a1

00009708 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    9708:	b580      	push	{r7, lr}
    970a:	b082      	sub	sp, #8
    970c:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    970e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9712:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    9714:	2103      	movs	r1, #3
    9716:	6878      	ldr	r0, [r7, #4]
    9718:	4b17      	ldr	r3, [pc, #92]	; (9778 <_usb_d_dev_enable+0x70>)
    971a:	4798      	blx	r3
    971c:	4603      	mov	r3, r0
    971e:	2b00      	cmp	r3, #0
    9720:	d002      	beq.n	9728 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    9722:	f06f 0310 	mvn.w	r3, #16
    9726:	e023      	b.n	9770 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    9728:	6878      	ldr	r0, [r7, #4]
    972a:	4b14      	ldr	r3, [pc, #80]	; (977c <_usb_d_dev_enable+0x74>)
    972c:	4798      	blx	r3
    972e:	4603      	mov	r3, r0
    9730:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    9732:	78fb      	ldrb	r3, [r7, #3]
    9734:	f003 0302 	and.w	r3, r3, #2
    9738:	2b00      	cmp	r3, #0
    973a:	d107      	bne.n	974c <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    973c:	78fb      	ldrb	r3, [r7, #3]
    973e:	f043 0302 	orr.w	r3, r3, #2
    9742:	b2db      	uxtb	r3, r3
    9744:	4619      	mov	r1, r3
    9746:	6878      	ldr	r0, [r7, #4]
    9748:	4b0d      	ldr	r3, [pc, #52]	; (9780 <_usb_d_dev_enable+0x78>)
    974a:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    974c:	2050      	movs	r0, #80	; 0x50
    974e:	4b0d      	ldr	r3, [pc, #52]	; (9784 <_usb_d_dev_enable+0x7c>)
    9750:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    9752:	2051      	movs	r0, #81	; 0x51
    9754:	4b0b      	ldr	r3, [pc, #44]	; (9784 <_usb_d_dev_enable+0x7c>)
    9756:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    9758:	2052      	movs	r0, #82	; 0x52
    975a:	4b0a      	ldr	r3, [pc, #40]	; (9784 <_usb_d_dev_enable+0x7c>)
    975c:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    975e:	2053      	movs	r0, #83	; 0x53
    9760:	4b08      	ldr	r3, [pc, #32]	; (9784 <_usb_d_dev_enable+0x7c>)
    9762:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    9764:	f240 218d 	movw	r1, #653	; 0x28d
    9768:	6878      	ldr	r0, [r7, #4]
    976a:	4b07      	ldr	r3, [pc, #28]	; (9788 <_usb_d_dev_enable+0x80>)
    976c:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    976e:	2300      	movs	r3, #0
}
    9770:	4618      	mov	r0, r3
    9772:	3708      	adds	r7, #8
    9774:	46bd      	mov	sp, r7
    9776:	bd80      	pop	{r7, pc}
    9778:	00007fab 	.word	0x00007fab
    977c:	00008059 	.word	0x00008059
    9780:	00008031 	.word	0x00008031
    9784:	00007bbd 	.word	0x00007bbd
    9788:	00007f55 	.word	0x00007f55

0000978c <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    978c:	b580      	push	{r7, lr}
    978e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    9790:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9794:	4b01      	ldr	r3, [pc, #4]	; (979c <_usb_d_dev_attach+0x10>)
    9796:	4798      	blx	r3
}
    9798:	bf00      	nop
    979a:	bd80      	pop	{r7, pc}
    979c:	0000807d 	.word	0x0000807d

000097a0 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    97a0:	b580      	push	{r7, lr}
    97a2:	b082      	sub	sp, #8
    97a4:	af00      	add	r7, sp, #0
    97a6:	4603      	mov	r3, r0
    97a8:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    97aa:	79fb      	ldrb	r3, [r7, #7]
    97ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
    97b0:	b2db      	uxtb	r3, r3
    97b2:	4619      	mov	r1, r3
    97b4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    97b8:	4b02      	ldr	r3, [pc, #8]	; (97c4 <_usb_d_dev_set_address+0x24>)
    97ba:	4798      	blx	r3
}
    97bc:	bf00      	nop
    97be:	3708      	adds	r7, #8
    97c0:	46bd      	mov	sp, r7
    97c2:	bd80      	pop	{r7, pc}
    97c4:	000080bf 	.word	0x000080bf

000097c8 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    97c8:	b590      	push	{r4, r7, lr}
    97ca:	b085      	sub	sp, #20
    97cc:	af00      	add	r7, sp, #0
    97ce:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    97d0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    97d4:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    97d6:	687b      	ldr	r3, [r7, #4]
    97d8:	7c9b      	ldrb	r3, [r3, #18]
    97da:	f003 030f 	and.w	r3, r3, #15
    97de:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    97e0:	687b      	ldr	r3, [r7, #4]
    97e2:	68db      	ldr	r3, [r3, #12]
    97e4:	461a      	mov	r2, r3
    97e6:	7afb      	ldrb	r3, [r7, #11]
    97e8:	2100      	movs	r1, #0
    97ea:	4618      	mov	r0, r3
    97ec:	4b0f      	ldr	r3, [pc, #60]	; (982c <_usb_d_dev_trans_setup+0x64>)
    97ee:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    97f0:	687b      	ldr	r3, [r7, #4]
    97f2:	8a1b      	ldrh	r3, [r3, #16]
    97f4:	461a      	mov	r2, r3
    97f6:	7af8      	ldrb	r0, [r7, #11]
    97f8:	2300      	movs	r3, #0
    97fa:	2100      	movs	r1, #0
    97fc:	4c0c      	ldr	r4, [pc, #48]	; (9830 <_usb_d_dev_trans_setup+0x68>)
    97fe:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    9800:	7afb      	ldrb	r3, [r7, #11]
    9802:	22b0      	movs	r2, #176	; 0xb0
    9804:	4619      	mov	r1, r3
    9806:	68f8      	ldr	r0, [r7, #12]
    9808:	4b0a      	ldr	r3, [pc, #40]	; (9834 <_usb_d_dev_trans_setup+0x6c>)
    980a:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    980c:	7afb      	ldrb	r3, [r7, #11]
    980e:	2200      	movs	r2, #0
    9810:	2100      	movs	r1, #0
    9812:	4618      	mov	r0, r3
    9814:	4b08      	ldr	r3, [pc, #32]	; (9838 <_usb_d_dev_trans_setup+0x70>)
    9816:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    9818:	7afb      	ldrb	r3, [r7, #11]
    981a:	2210      	movs	r2, #16
    981c:	4619      	mov	r1, r3
    981e:	68f8      	ldr	r0, [r7, #12]
    9820:	4b06      	ldr	r3, [pc, #24]	; (983c <_usb_d_dev_trans_setup+0x74>)
    9822:	4798      	blx	r3
}
    9824:	bf00      	nop
    9826:	3714      	adds	r7, #20
    9828:	46bd      	mov	sp, r7
    982a:	bd90      	pop	{r4, r7, pc}
    982c:	0000855d 	.word	0x0000855d
    9830:	000086e5 	.word	0x000086e5
    9834:	00007dbd 	.word	0x00007dbd
    9838:	000087b5 	.word	0x000087b5
    983c:	00007e11 	.word	0x00007e11

00009840 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    9840:	b580      	push	{r7, lr}
    9842:	b088      	sub	sp, #32
    9844:	af00      	add	r7, sp, #0
    9846:	4603      	mov	r3, r0
    9848:	71fb      	strb	r3, [r7, #7]
    984a:	460b      	mov	r3, r1
    984c:	71bb      	strb	r3, [r7, #6]
    984e:	4613      	mov	r3, r2
    9850:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    9852:	79fb      	ldrb	r3, [r7, #7]
    9854:	f003 030f 	and.w	r3, r3, #15
    9858:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    985a:	79fb      	ldrb	r3, [r7, #7]
    985c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9860:	2b00      	cmp	r3, #0
    9862:	bf14      	ite	ne
    9864:	2301      	movne	r3, #1
    9866:	2300      	moveq	r3, #0
    9868:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    986a:	7fba      	ldrb	r2, [r7, #30]
    986c:	7ffb      	ldrb	r3, [r7, #31]
    986e:	4611      	mov	r1, r2
    9870:	4618      	mov	r0, r3
    9872:	4b3e      	ldr	r3, [pc, #248]	; (996c <_usb_d_dev_ep_init+0x12c>)
    9874:	4798      	blx	r3
    9876:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    9878:	79bb      	ldrb	r3, [r7, #6]
    987a:	f003 0303 	and.w	r3, r3, #3
    987e:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    9880:	7ffa      	ldrb	r2, [r7, #31]
    9882:	4613      	mov	r3, r2
    9884:	005b      	lsls	r3, r3, #1
    9886:	4413      	add	r3, r2
    9888:	009b      	lsls	r3, r3, #2
    988a:	4a39      	ldr	r2, [pc, #228]	; (9970 <_usb_d_dev_ep_init+0x130>)
    988c:	4413      	add	r3, r2
    988e:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    9890:	7ffb      	ldrb	r3, [r7, #31]
    9892:	2b04      	cmp	r3, #4
    9894:	d902      	bls.n	989c <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    9896:	f06f 0311 	mvn.w	r3, #17
    989a:	e063      	b.n	9964 <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    989c:	69bb      	ldr	r3, [r7, #24]
    989e:	7c9b      	ldrb	r3, [r3, #18]
    98a0:	2bff      	cmp	r3, #255	; 0xff
    98a2:	d002      	beq.n	98aa <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    98a4:	f06f 0313 	mvn.w	r3, #19
    98a8:	e05c      	b.n	9964 <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    98aa:	7dfb      	ldrb	r3, [r7, #23]
    98ac:	2b00      	cmp	r3, #0
    98ae:	d11f      	bne.n	98f0 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    98b0:	7fbb      	ldrb	r3, [r7, #30]
    98b2:	2b00      	cmp	r3, #0
    98b4:	bf14      	ite	ne
    98b6:	2301      	movne	r3, #1
    98b8:	2300      	moveq	r3, #0
    98ba:	b2db      	uxtb	r3, r3
    98bc:	f083 0301 	eor.w	r3, r3, #1
    98c0:	b2db      	uxtb	r3, r3
    98c2:	f003 0301 	and.w	r3, r3, #1
    98c6:	b2da      	uxtb	r2, r3
    98c8:	7ffb      	ldrb	r3, [r7, #31]
    98ca:	4611      	mov	r1, r2
    98cc:	4618      	mov	r0, r3
    98ce:	4b27      	ldr	r3, [pc, #156]	; (996c <_usb_d_dev_ep_init+0x12c>)
    98d0:	4798      	blx	r3
    98d2:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    98d4:	68fb      	ldr	r3, [r7, #12]
    98d6:	7c9b      	ldrb	r3, [r3, #18]
    98d8:	2bff      	cmp	r3, #255	; 0xff
    98da:	d002      	beq.n	98e2 <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    98dc:	f06f 0313 	mvn.w	r3, #19
    98e0:	e040      	b.n	9964 <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    98e2:	693b      	ldr	r3, [r7, #16]
    98e4:	681b      	ldr	r3, [r3, #0]
    98e6:	2b00      	cmp	r3, #0
    98e8:	d102      	bne.n	98f0 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    98ea:	f06f 0312 	mvn.w	r3, #18
    98ee:	e039      	b.n	9964 <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    98f0:	7fbb      	ldrb	r3, [r7, #30]
    98f2:	2b00      	cmp	r3, #0
    98f4:	d007      	beq.n	9906 <_usb_d_dev_ep_init+0xc6>
    98f6:	693b      	ldr	r3, [r7, #16]
    98f8:	685b      	ldr	r3, [r3, #4]
    98fa:	2b00      	cmp	r3, #0
    98fc:	bf14      	ite	ne
    98fe:	2301      	movne	r3, #1
    9900:	2300      	moveq	r3, #0
    9902:	b2db      	uxtb	r3, r3
    9904:	e006      	b.n	9914 <_usb_d_dev_ep_init+0xd4>
    9906:	693b      	ldr	r3, [r7, #16]
    9908:	681b      	ldr	r3, [r3, #0]
    990a:	2b00      	cmp	r3, #0
    990c:	bf14      	ite	ne
    990e:	2301      	movne	r3, #1
    9910:	2300      	moveq	r3, #0
    9912:	b2db      	uxtb	r3, r3
    9914:	2b00      	cmp	r3, #0
    9916:	d00f      	beq.n	9938 <_usb_d_dev_ep_init+0xf8>
    9918:	7fbb      	ldrb	r3, [r7, #30]
    991a:	2b00      	cmp	r3, #0
    991c:	d003      	beq.n	9926 <_usb_d_dev_ep_init+0xe6>
    991e:	693b      	ldr	r3, [r7, #16]
    9920:	895b      	ldrh	r3, [r3, #10]
    9922:	461a      	mov	r2, r3
    9924:	e002      	b.n	992c <_usb_d_dev_ep_init+0xec>
    9926:	693b      	ldr	r3, [r7, #16]
    9928:	891b      	ldrh	r3, [r3, #8]
    992a:	461a      	mov	r2, r3
    992c:	88bb      	ldrh	r3, [r7, #4]
    992e:	429a      	cmp	r2, r3
    9930:	da02      	bge.n	9938 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    9932:	f06f 0312 	mvn.w	r3, #18
    9936:	e015      	b.n	9964 <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    9938:	7fbb      	ldrb	r3, [r7, #30]
    993a:	2b00      	cmp	r3, #0
    993c:	d002      	beq.n	9944 <_usb_d_dev_ep_init+0x104>
    993e:	693b      	ldr	r3, [r7, #16]
    9940:	685b      	ldr	r3, [r3, #4]
    9942:	e001      	b.n	9948 <_usb_d_dev_ep_init+0x108>
    9944:	693b      	ldr	r3, [r7, #16]
    9946:	681b      	ldr	r3, [r3, #0]
    9948:	69ba      	ldr	r2, [r7, #24]
    994a:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    994c:	69bb      	ldr	r3, [r7, #24]
    994e:	88ba      	ldrh	r2, [r7, #4]
    9950:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    9952:	7dfb      	ldrb	r3, [r7, #23]
    9954:	3301      	adds	r3, #1
    9956:	b2da      	uxtb	r2, r3
    9958:	69bb      	ldr	r3, [r7, #24]
    995a:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    995c:	69bb      	ldr	r3, [r7, #24]
    995e:	79fa      	ldrb	r2, [r7, #7]
    9960:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    9962:	2300      	movs	r3, #0
}
    9964:	4618      	mov	r0, r3
    9966:	3720      	adds	r7, #32
    9968:	46bd      	mov	sp, r7
    996a:	bd80      	pop	{r7, pc}
    996c:	00008871 	.word	0x00008871
    9970:	000131c8 	.word	0x000131c8

00009974 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    9974:	b580      	push	{r7, lr}
    9976:	b086      	sub	sp, #24
    9978:	af00      	add	r7, sp, #0
    997a:	4603      	mov	r3, r0
    997c:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    997e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9982:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    9984:	79fb      	ldrb	r3, [r7, #7]
    9986:	f003 030f 	and.w	r3, r3, #15
    998a:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    998c:	79fb      	ldrb	r3, [r7, #7]
    998e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9992:	2b00      	cmp	r3, #0
    9994:	bf14      	ite	ne
    9996:	2301      	movne	r3, #1
    9998:	2300      	moveq	r3, #0
    999a:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    999c:	7cba      	ldrb	r2, [r7, #18]
    999e:	7cfb      	ldrb	r3, [r7, #19]
    99a0:	4611      	mov	r1, r2
    99a2:	4618      	mov	r0, r3
    99a4:	4b2a      	ldr	r3, [pc, #168]	; (9a50 <_usb_d_dev_ep_deinit+0xdc>)
    99a6:	4798      	blx	r3
    99a8:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    99aa:	7cfb      	ldrb	r3, [r7, #19]
    99ac:	2b04      	cmp	r3, #4
    99ae:	d84a      	bhi.n	9a46 <_usb_d_dev_ep_deinit+0xd2>
    99b0:	68fb      	ldr	r3, [r7, #12]
    99b2:	7c9b      	ldrb	r3, [r3, #18]
    99b4:	2bff      	cmp	r3, #255	; 0xff
    99b6:	d046      	beq.n	9a46 <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    99b8:	7cbb      	ldrb	r3, [r7, #18]
    99ba:	2203      	movs	r2, #3
    99bc:	4619      	mov	r1, r3
    99be:	68f8      	ldr	r0, [r7, #12]
    99c0:	4b24      	ldr	r3, [pc, #144]	; (9a54 <_usb_d_dev_ep_deinit+0xe0>)
    99c2:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    99c4:	68fb      	ldr	r3, [r7, #12]
    99c6:	7cdb      	ldrb	r3, [r3, #19]
    99c8:	f003 0307 	and.w	r3, r3, #7
    99cc:	b2db      	uxtb	r3, r3
    99ce:	2b01      	cmp	r3, #1
    99d0:	d107      	bne.n	99e2 <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    99d2:	79fb      	ldrb	r3, [r7, #7]
    99d4:	697a      	ldr	r2, [r7, #20]
    99d6:	3308      	adds	r3, #8
    99d8:	015b      	lsls	r3, r3, #5
    99da:	4413      	add	r3, r2
    99dc:	2200      	movs	r2, #0
    99de:	701a      	strb	r2, [r3, #0]
    99e0:	e02a      	b.n	9a38 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    99e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
    99e6:	2b00      	cmp	r3, #0
    99e8:	da15      	bge.n	9a16 <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    99ea:	79fb      	ldrb	r3, [r7, #7]
    99ec:	f003 030f 	and.w	r3, r3, #15
    99f0:	79fa      	ldrb	r2, [r7, #7]
    99f2:	f002 020f 	and.w	r2, r2, #15
    99f6:	6979      	ldr	r1, [r7, #20]
    99f8:	3208      	adds	r2, #8
    99fa:	0152      	lsls	r2, r2, #5
    99fc:	440a      	add	r2, r1
    99fe:	7812      	ldrb	r2, [r2, #0]
    9a00:	b2d2      	uxtb	r2, r2
    9a02:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    9a06:	b2d1      	uxtb	r1, r2
    9a08:	697a      	ldr	r2, [r7, #20]
    9a0a:	3308      	adds	r3, #8
    9a0c:	015b      	lsls	r3, r3, #5
    9a0e:	4413      	add	r3, r2
    9a10:	460a      	mov	r2, r1
    9a12:	701a      	strb	r2, [r3, #0]
    9a14:	e010      	b.n	9a38 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    9a16:	79fb      	ldrb	r3, [r7, #7]
    9a18:	79fa      	ldrb	r2, [r7, #7]
    9a1a:	6979      	ldr	r1, [r7, #20]
    9a1c:	3208      	adds	r2, #8
    9a1e:	0152      	lsls	r2, r2, #5
    9a20:	440a      	add	r2, r1
    9a22:	7812      	ldrb	r2, [r2, #0]
    9a24:	b2d2      	uxtb	r2, r2
    9a26:	f022 0207 	bic.w	r2, r2, #7
    9a2a:	b2d1      	uxtb	r1, r2
    9a2c:	697a      	ldr	r2, [r7, #20]
    9a2e:	3308      	adds	r3, #8
    9a30:	015b      	lsls	r3, r3, #5
    9a32:	4413      	add	r3, r2
    9a34:	460a      	mov	r2, r1
    9a36:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    9a38:	68fb      	ldr	r3, [r7, #12]
    9a3a:	2200      	movs	r2, #0
    9a3c:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    9a3e:	68fb      	ldr	r3, [r7, #12]
    9a40:	22ff      	movs	r2, #255	; 0xff
    9a42:	749a      	strb	r2, [r3, #18]
    9a44:	e000      	b.n	9a48 <_usb_d_dev_ep_deinit+0xd4>
		return;
    9a46:	bf00      	nop
}
    9a48:	3718      	adds	r7, #24
    9a4a:	46bd      	mov	sp, r7
    9a4c:	bd80      	pop	{r7, pc}
    9a4e:	bf00      	nop
    9a50:	00008871 	.word	0x00008871
    9a54:	00009ea9 	.word	0x00009ea9

00009a58 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    9a58:	b5b0      	push	{r4, r5, r7, lr}
    9a5a:	b088      	sub	sp, #32
    9a5c:	af00      	add	r7, sp, #0
    9a5e:	4603      	mov	r3, r0
    9a60:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    9a62:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9a66:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    9a68:	79fb      	ldrb	r3, [r7, #7]
    9a6a:	f003 030f 	and.w	r3, r3, #15
    9a6e:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    9a70:	79fb      	ldrb	r3, [r7, #7]
    9a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9a76:	2b00      	cmp	r3, #0
    9a78:	bf14      	ite	ne
    9a7a:	2301      	movne	r3, #1
    9a7c:	2300      	moveq	r3, #0
    9a7e:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    9a80:	7eba      	ldrb	r2, [r7, #26]
    9a82:	7efb      	ldrb	r3, [r7, #27]
    9a84:	4611      	mov	r1, r2
    9a86:	4618      	mov	r0, r3
    9a88:	4b70      	ldr	r3, [pc, #448]	; (9c4c <_usb_d_dev_ep_enable+0x1f4>)
    9a8a:	4798      	blx	r3
    9a8c:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    9a8e:	7efb      	ldrb	r3, [r7, #27]
    9a90:	4619      	mov	r1, r3
    9a92:	69f8      	ldr	r0, [r7, #28]
    9a94:	4b6e      	ldr	r3, [pc, #440]	; (9c50 <_usb_d_dev_ep_enable+0x1f8>)
    9a96:	4798      	blx	r3
    9a98:	4603      	mov	r3, r0
    9a9a:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    9a9c:	7efb      	ldrb	r3, [r7, #27]
    9a9e:	2b04      	cmp	r3, #4
    9aa0:	d803      	bhi.n	9aaa <_usb_d_dev_ep_enable+0x52>
    9aa2:	697b      	ldr	r3, [r7, #20]
    9aa4:	7c9b      	ldrb	r3, [r3, #18]
    9aa6:	2bff      	cmp	r3, #255	; 0xff
    9aa8:	d102      	bne.n	9ab0 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    9aaa:	f06f 0311 	mvn.w	r3, #17
    9aae:	e0c8      	b.n	9c42 <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    9ab0:	7efb      	ldrb	r3, [r7, #27]
    9ab2:	015b      	lsls	r3, r3, #5
    9ab4:	4a67      	ldr	r2, [pc, #412]	; (9c54 <_usb_d_dev_ep_enable+0x1fc>)
    9ab6:	4413      	add	r3, r2
    9ab8:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    9aba:	697b      	ldr	r3, [r7, #20]
    9abc:	7cdb      	ldrb	r3, [r3, #19]
    9abe:	f003 0307 	and.w	r3, r3, #7
    9ac2:	b2db      	uxtb	r3, r3
    9ac4:	2b01      	cmp	r3, #1
    9ac6:	d14b      	bne.n	9b60 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    9ac8:	7cfb      	ldrb	r3, [r7, #19]
    9aca:	f003 0377 	and.w	r3, r3, #119	; 0x77
    9ace:	2b00      	cmp	r3, #0
    9ad0:	d002      	beq.n	9ad8 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    9ad2:	f06f 0313 	mvn.w	r3, #19
    9ad6:	e0b4      	b.n	9c42 <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    9ad8:	7efb      	ldrb	r3, [r7, #27]
    9ada:	2211      	movs	r2, #17
    9adc:	4619      	mov	r1, r3
    9ade:	69f8      	ldr	r0, [r7, #28]
    9ae0:	4b5d      	ldr	r3, [pc, #372]	; (9c58 <_usb_d_dev_ep_enable+0x200>)
    9ae2:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9ae4:	697b      	ldr	r3, [r7, #20]
    9ae6:	8a1b      	ldrh	r3, [r3, #16]
    9ae8:	039b      	lsls	r3, r3, #14
    9aea:	4c5c      	ldr	r4, [pc, #368]	; (9c5c <_usb_d_dev_ep_enable+0x204>)
    9aec:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9aee:	697b      	ldr	r3, [r7, #20]
    9af0:	8a1b      	ldrh	r3, [r3, #16]
    9af2:	4618      	mov	r0, r3
    9af4:	4b5a      	ldr	r3, [pc, #360]	; (9c60 <_usb_d_dev_ep_enable+0x208>)
    9af6:	4798      	blx	r3
    9af8:	4603      	mov	r3, r0
    9afa:	071b      	lsls	r3, r3, #28
    9afc:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    9b00:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9b04:	68fb      	ldr	r3, [r7, #12]
    9b06:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    9b08:	68fb      	ldr	r3, [r7, #12]
    9b0a:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9b0e:	697b      	ldr	r3, [r7, #20]
    9b10:	8a1b      	ldrh	r3, [r3, #16]
    9b12:	f3c3 050d 	ubfx	r5, r3, #0, #14
    9b16:	697b      	ldr	r3, [r7, #20]
    9b18:	8a1b      	ldrh	r3, [r3, #16]
    9b1a:	4618      	mov	r0, r3
    9b1c:	4b50      	ldr	r3, [pc, #320]	; (9c60 <_usb_d_dev_ep_enable+0x208>)
    9b1e:	4798      	blx	r3
    9b20:	4603      	mov	r3, r0
    9b22:	071b      	lsls	r3, r3, #28
    9b24:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    9b28:	432b      	orrs	r3, r5
    9b2a:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    9b2c:	7efb      	ldrb	r3, [r7, #27]
    9b2e:	2200      	movs	r2, #0
    9b30:	2100      	movs	r1, #0
    9b32:	4618      	mov	r0, r3
    9b34:	4b4b      	ldr	r3, [pc, #300]	; (9c64 <_usb_d_dev_ep_enable+0x20c>)
    9b36:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    9b38:	7efb      	ldrb	r3, [r7, #27]
    9b3a:	2200      	movs	r2, #0
    9b3c:	2101      	movs	r1, #1
    9b3e:	4618      	mov	r0, r3
    9b40:	4b49      	ldr	r3, [pc, #292]	; (9c68 <_usb_d_dev_ep_enable+0x210>)
    9b42:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    9b44:	7efb      	ldrb	r3, [r7, #27]
    9b46:	2100      	movs	r1, #0
    9b48:	4618      	mov	r0, r3
    9b4a:	4b48      	ldr	r3, [pc, #288]	; (9c6c <_usb_d_dev_ep_enable+0x214>)
    9b4c:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    9b4e:	7efb      	ldrb	r3, [r7, #27]
    9b50:	2101      	movs	r1, #1
    9b52:	4618      	mov	r0, r3
    9b54:	4b45      	ldr	r3, [pc, #276]	; (9c6c <_usb_d_dev_ep_enable+0x214>)
    9b56:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    9b58:	6978      	ldr	r0, [r7, #20]
    9b5a:	4b45      	ldr	r3, [pc, #276]	; (9c70 <_usb_d_dev_ep_enable+0x218>)
    9b5c:	4798      	blx	r3
    9b5e:	e06f      	b.n	9c40 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    9b60:	7ebb      	ldrb	r3, [r7, #26]
    9b62:	2b00      	cmp	r3, #0
    9b64:	d038      	beq.n	9bd8 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    9b66:	7cfb      	ldrb	r3, [r7, #19]
    9b68:	f003 0370 	and.w	r3, r3, #112	; 0x70
    9b6c:	2b00      	cmp	r3, #0
    9b6e:	d002      	beq.n	9b76 <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    9b70:	f06f 0313 	mvn.w	r3, #19
    9b74:	e065      	b.n	9c42 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    9b76:	697b      	ldr	r3, [r7, #20]
    9b78:	7cdb      	ldrb	r3, [r3, #19]
    9b7a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    9b7e:	b2db      	uxtb	r3, r3
    9b80:	011b      	lsls	r3, r3, #4
    9b82:	b2db      	uxtb	r3, r3
    9b84:	f003 0370 	and.w	r3, r3, #112	; 0x70
    9b88:	b2da      	uxtb	r2, r3
    9b8a:	7cfb      	ldrb	r3, [r7, #19]
    9b8c:	4313      	orrs	r3, r2
    9b8e:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    9b90:	7cfa      	ldrb	r2, [r7, #19]
    9b92:	7efb      	ldrb	r3, [r7, #27]
    9b94:	4619      	mov	r1, r3
    9b96:	69f8      	ldr	r0, [r7, #28]
    9b98:	4b2f      	ldr	r3, [pc, #188]	; (9c58 <_usb_d_dev_ep_enable+0x200>)
    9b9a:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    9b9c:	68fb      	ldr	r3, [r7, #12]
    9b9e:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9ba2:	697b      	ldr	r3, [r7, #20]
    9ba4:	8a1b      	ldrh	r3, [r3, #16]
    9ba6:	f3c3 050d 	ubfx	r5, r3, #0, #14
    9baa:	697b      	ldr	r3, [r7, #20]
    9bac:	8a1b      	ldrh	r3, [r3, #16]
    9bae:	4618      	mov	r0, r3
    9bb0:	4b2b      	ldr	r3, [pc, #172]	; (9c60 <_usb_d_dev_ep_enable+0x208>)
    9bb2:	4798      	blx	r3
    9bb4:	4603      	mov	r3, r0
    9bb6:	071b      	lsls	r3, r3, #28
    9bb8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    9bbc:	432b      	orrs	r3, r5
    9bbe:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    9bc0:	7efb      	ldrb	r3, [r7, #27]
    9bc2:	2200      	movs	r2, #0
    9bc4:	2101      	movs	r1, #1
    9bc6:	4618      	mov	r0, r3
    9bc8:	4b27      	ldr	r3, [pc, #156]	; (9c68 <_usb_d_dev_ep_enable+0x210>)
    9bca:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    9bcc:	7efb      	ldrb	r3, [r7, #27]
    9bce:	2101      	movs	r1, #1
    9bd0:	4618      	mov	r0, r3
    9bd2:	4b26      	ldr	r3, [pc, #152]	; (9c6c <_usb_d_dev_ep_enable+0x214>)
    9bd4:	4798      	blx	r3
    9bd6:	e033      	b.n	9c40 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    9bd8:	7cfb      	ldrb	r3, [r7, #19]
    9bda:	f003 0307 	and.w	r3, r3, #7
    9bde:	2b00      	cmp	r3, #0
    9be0:	d002      	beq.n	9be8 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    9be2:	f06f 0313 	mvn.w	r3, #19
    9be6:	e02c      	b.n	9c42 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    9be8:	697b      	ldr	r3, [r7, #20]
    9bea:	7cdb      	ldrb	r3, [r3, #19]
    9bec:	f3c3 0302 	ubfx	r3, r3, #0, #3
    9bf0:	b2db      	uxtb	r3, r3
    9bf2:	461a      	mov	r2, r3
    9bf4:	7cfb      	ldrb	r3, [r7, #19]
    9bf6:	4313      	orrs	r3, r2
    9bf8:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    9bfa:	7cfa      	ldrb	r2, [r7, #19]
    9bfc:	7efb      	ldrb	r3, [r7, #27]
    9bfe:	4619      	mov	r1, r3
    9c00:	69f8      	ldr	r0, [r7, #28]
    9c02:	4b15      	ldr	r3, [pc, #84]	; (9c58 <_usb_d_dev_ep_enable+0x200>)
    9c04:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9c06:	697b      	ldr	r3, [r7, #20]
    9c08:	8a1b      	ldrh	r3, [r3, #16]
    9c0a:	039b      	lsls	r3, r3, #14
    9c0c:	4c13      	ldr	r4, [pc, #76]	; (9c5c <_usb_d_dev_ep_enable+0x204>)
    9c0e:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9c10:	697b      	ldr	r3, [r7, #20]
    9c12:	8a1b      	ldrh	r3, [r3, #16]
    9c14:	4618      	mov	r0, r3
    9c16:	4b12      	ldr	r3, [pc, #72]	; (9c60 <_usb_d_dev_ep_enable+0x208>)
    9c18:	4798      	blx	r3
    9c1a:	4603      	mov	r3, r0
    9c1c:	071b      	lsls	r3, r3, #28
    9c1e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    9c22:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9c26:	68fb      	ldr	r3, [r7, #12]
    9c28:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    9c2a:	7efb      	ldrb	r3, [r7, #27]
    9c2c:	2200      	movs	r2, #0
    9c2e:	2100      	movs	r1, #0
    9c30:	4618      	mov	r0, r3
    9c32:	4b0c      	ldr	r3, [pc, #48]	; (9c64 <_usb_d_dev_ep_enable+0x20c>)
    9c34:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    9c36:	7efb      	ldrb	r3, [r7, #27]
    9c38:	2100      	movs	r1, #0
    9c3a:	4618      	mov	r0, r3
    9c3c:	4b0b      	ldr	r3, [pc, #44]	; (9c6c <_usb_d_dev_ep_enable+0x214>)
    9c3e:	4798      	blx	r3
	}

	return USB_OK;
    9c40:	2300      	movs	r3, #0
}
    9c42:	4618      	mov	r0, r3
    9c44:	3720      	adds	r7, #32
    9c46:	46bd      	mov	sp, r7
    9c48:	bdb0      	pop	{r4, r5, r7, pc}
    9c4a:	bf00      	nop
    9c4c:	00008871 	.word	0x00008871
    9c50:	00007ef7 	.word	0x00007ef7
    9c54:	20000f4c 	.word	0x20000f4c
    9c58:	00007ecd 	.word	0x00007ecd
    9c5c:	0fffc000 	.word	0x0fffc000
    9c60:	0000880d 	.word	0x0000880d
    9c64:	000087b5 	.word	0x000087b5
    9c68:	0000875d 	.word	0x0000875d
    9c6c:	00008725 	.word	0x00008725
    9c70:	000097c9 	.word	0x000097c9

00009c74 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    9c74:	b580      	push	{r7, lr}
    9c76:	b084      	sub	sp, #16
    9c78:	af00      	add	r7, sp, #0
    9c7a:	6078      	str	r0, [r7, #4]
    9c7c:	460b      	mov	r3, r1
    9c7e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9c80:	687b      	ldr	r3, [r7, #4]
    9c82:	7c9b      	ldrb	r3, [r3, #18]
    9c84:	f003 030f 	and.w	r3, r3, #15
    9c88:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    9c8a:	78fa      	ldrb	r2, [r7, #3]
    9c8c:	7bfb      	ldrb	r3, [r7, #15]
    9c8e:	4611      	mov	r1, r2
    9c90:	4618      	mov	r0, r3
    9c92:	4b03      	ldr	r3, [pc, #12]	; (9ca0 <_usb_d_dev_ep_stall_get+0x2c>)
    9c94:	4798      	blx	r3
    9c96:	4603      	mov	r3, r0
}
    9c98:	4618      	mov	r0, r3
    9c9a:	3710      	adds	r7, #16
    9c9c:	46bd      	mov	sp, r7
    9c9e:	bd80      	pop	{r7, pc}
    9ca0:	00008365 	.word	0x00008365

00009ca4 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    9ca4:	b580      	push	{r7, lr}
    9ca6:	b084      	sub	sp, #16
    9ca8:	af00      	add	r7, sp, #0
    9caa:	6078      	str	r0, [r7, #4]
    9cac:	460b      	mov	r3, r1
    9cae:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9cb0:	687b      	ldr	r3, [r7, #4]
    9cb2:	7c9b      	ldrb	r3, [r3, #18]
    9cb4:	f003 030f 	and.w	r3, r3, #15
    9cb8:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    9cba:	78f9      	ldrb	r1, [r7, #3]
    9cbc:	7bfb      	ldrb	r3, [r7, #15]
    9cbe:	2201      	movs	r2, #1
    9cc0:	4618      	mov	r0, r3
    9cc2:	4b0a      	ldr	r3, [pc, #40]	; (9cec <_usb_d_dev_ep_stall_set+0x48>)
    9cc4:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    9cc6:	78fb      	ldrb	r3, [r7, #3]
    9cc8:	2220      	movs	r2, #32
    9cca:	409a      	lsls	r2, r3
    9ccc:	7bfb      	ldrb	r3, [r7, #15]
    9cce:	4611      	mov	r1, r2
    9cd0:	4618      	mov	r0, r3
    9cd2:	4b07      	ldr	r3, [pc, #28]	; (9cf0 <_usb_d_dev_ep_stall_set+0x4c>)
    9cd4:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    9cd6:	687a      	ldr	r2, [r7, #4]
    9cd8:	7cd3      	ldrb	r3, [r2, #19]
    9cda:	f043 0308 	orr.w	r3, r3, #8
    9cde:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    9ce0:	2300      	movs	r3, #0
}
    9ce2:	4618      	mov	r0, r3
    9ce4:	3710      	adds	r7, #16
    9ce6:	46bd      	mov	sp, r7
    9ce8:	bd80      	pop	{r7, pc}
    9cea:	bf00      	nop
    9cec:	0000830d 	.word	0x0000830d
    9cf0:	0000828d 	.word	0x0000828d

00009cf4 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    9cf4:	b580      	push	{r7, lr}
    9cf6:	b084      	sub	sp, #16
    9cf8:	af00      	add	r7, sp, #0
    9cfa:	6078      	str	r0, [r7, #4]
    9cfc:	460b      	mov	r3, r1
    9cfe:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    9d00:	687b      	ldr	r3, [r7, #4]
    9d02:	7c9b      	ldrb	r3, [r3, #18]
    9d04:	f003 030f 	and.w	r3, r3, #15
    9d08:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    9d0a:	78fa      	ldrb	r2, [r7, #3]
    9d0c:	7bfb      	ldrb	r3, [r7, #15]
    9d0e:	4611      	mov	r1, r2
    9d10:	4618      	mov	r0, r3
    9d12:	4b28      	ldr	r3, [pc, #160]	; (9db4 <_usb_d_dev_ep_stall_clr+0xc0>)
    9d14:	4798      	blx	r3
    9d16:	4603      	mov	r3, r0
    9d18:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    9d1a:	7bbb      	ldrb	r3, [r7, #14]
    9d1c:	f083 0301 	eor.w	r3, r3, #1
    9d20:	b2db      	uxtb	r3, r3
    9d22:	2b00      	cmp	r3, #0
    9d24:	d001      	beq.n	9d2a <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    9d26:	2300      	movs	r3, #0
    9d28:	e040      	b.n	9dac <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    9d2a:	78f9      	ldrb	r1, [r7, #3]
    9d2c:	7bfb      	ldrb	r3, [r7, #15]
    9d2e:	2200      	movs	r2, #0
    9d30:	4618      	mov	r0, r3
    9d32:	4b21      	ldr	r3, [pc, #132]	; (9db8 <_usb_d_dev_ep_stall_clr+0xc4>)
    9d34:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    9d36:	78fb      	ldrb	r3, [r7, #3]
    9d38:	2220      	movs	r2, #32
    9d3a:	409a      	lsls	r2, r3
    9d3c:	7bfb      	ldrb	r3, [r7, #15]
    9d3e:	4611      	mov	r1, r2
    9d40:	4618      	mov	r0, r3
    9d42:	4b1e      	ldr	r3, [pc, #120]	; (9dbc <_usb_d_dev_ep_stall_clr+0xc8>)
    9d44:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    9d46:	78fa      	ldrb	r2, [r7, #3]
    9d48:	7bfb      	ldrb	r3, [r7, #15]
    9d4a:	4611      	mov	r1, r2
    9d4c:	4618      	mov	r0, r3
    9d4e:	4b1c      	ldr	r3, [pc, #112]	; (9dc0 <_usb_d_dev_ep_stall_clr+0xcc>)
    9d50:	4798      	blx	r3
    9d52:	4603      	mov	r3, r0
    9d54:	2b00      	cmp	r3, #0
    9d56:	d00b      	beq.n	9d70 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    9d58:	78fa      	ldrb	r2, [r7, #3]
    9d5a:	7bfb      	ldrb	r3, [r7, #15]
    9d5c:	4611      	mov	r1, r2
    9d5e:	4618      	mov	r0, r3
    9d60:	4b18      	ldr	r3, [pc, #96]	; (9dc4 <_usb_d_dev_ep_stall_clr+0xd0>)
    9d62:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    9d64:	78f9      	ldrb	r1, [r7, #3]
    9d66:	7bfb      	ldrb	r3, [r7, #15]
    9d68:	2200      	movs	r2, #0
    9d6a:	4618      	mov	r0, r3
    9d6c:	4b16      	ldr	r3, [pc, #88]	; (9dc8 <_usb_d_dev_ep_stall_clr+0xd4>)
    9d6e:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    9d70:	687b      	ldr	r3, [r7, #4]
    9d72:	7cdb      	ldrb	r3, [r3, #19]
    9d74:	f003 0307 	and.w	r3, r3, #7
    9d78:	b2db      	uxtb	r3, r3
    9d7a:	2b01      	cmp	r3, #1
    9d7c:	d110      	bne.n	9da0 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    9d7e:	7bfb      	ldrb	r3, [r7, #15]
    9d80:	4619      	mov	r1, r3
    9d82:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9d86:	4b11      	ldr	r3, [pc, #68]	; (9dcc <_usb_d_dev_ep_stall_clr+0xd8>)
    9d88:	4798      	blx	r3
    9d8a:	4603      	mov	r3, r0
    9d8c:	f003 0330 	and.w	r3, r3, #48	; 0x30
    9d90:	2b00      	cmp	r3, #0
    9d92:	d10a      	bne.n	9daa <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    9d94:	687a      	ldr	r2, [r7, #4]
    9d96:	7cd3      	ldrb	r3, [r2, #19]
    9d98:	f36f 03c3 	bfc	r3, #3, #1
    9d9c:	74d3      	strb	r3, [r2, #19]
    9d9e:	e004      	b.n	9daa <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    9da0:	687a      	ldr	r2, [r7, #4]
    9da2:	7cd3      	ldrb	r3, [r2, #19]
    9da4:	f36f 03c3 	bfc	r3, #3, #1
    9da8:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    9daa:	2300      	movs	r3, #0
}
    9dac:	4618      	mov	r0, r3
    9dae:	3710      	adds	r7, #16
    9db0:	46bd      	mov	sp, r7
    9db2:	bd80      	pop	{r7, pc}
    9db4:	00008365 	.word	0x00008365
    9db8:	0000830d 	.word	0x0000830d
    9dbc:	000082b5 	.word	0x000082b5
    9dc0:	000083a9 	.word	0x000083a9
    9dc4:	000083ed 	.word	0x000083ed
    9dc8:	000084d9 	.word	0x000084d9
    9dcc:	00007d95 	.word	0x00007d95

00009dd0 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    9dd0:	b580      	push	{r7, lr}
    9dd2:	b086      	sub	sp, #24
    9dd4:	af00      	add	r7, sp, #0
    9dd6:	4603      	mov	r3, r0
    9dd8:	460a      	mov	r2, r1
    9dda:	71fb      	strb	r3, [r7, #7]
    9ddc:	4613      	mov	r3, r2
    9dde:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    9de0:	79fb      	ldrb	r3, [r7, #7]
    9de2:	f003 030f 	and.w	r3, r3, #15
    9de6:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    9de8:	79fb      	ldrb	r3, [r7, #7]
    9dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9dee:	2b00      	cmp	r3, #0
    9df0:	bf14      	ite	ne
    9df2:	2301      	movne	r3, #1
    9df4:	2300      	moveq	r3, #0
    9df6:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    9df8:	7cba      	ldrb	r2, [r7, #18]
    9dfa:	7cfb      	ldrb	r3, [r7, #19]
    9dfc:	4611      	mov	r1, r2
    9dfe:	4618      	mov	r0, r3
    9e00:	4b13      	ldr	r3, [pc, #76]	; (9e50 <_usb_d_dev_ep_stall+0x80>)
    9e02:	4798      	blx	r3
    9e04:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    9e06:	7cfb      	ldrb	r3, [r7, #19]
    9e08:	2b04      	cmp	r3, #4
    9e0a:	d902      	bls.n	9e12 <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    9e0c:	f06f 0311 	mvn.w	r3, #17
    9e10:	e01a      	b.n	9e48 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    9e12:	79bb      	ldrb	r3, [r7, #6]
    9e14:	2b01      	cmp	r3, #1
    9e16:	d106      	bne.n	9e26 <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    9e18:	7cbb      	ldrb	r3, [r7, #18]
    9e1a:	4619      	mov	r1, r3
    9e1c:	68f8      	ldr	r0, [r7, #12]
    9e1e:	4b0d      	ldr	r3, [pc, #52]	; (9e54 <_usb_d_dev_ep_stall+0x84>)
    9e20:	4798      	blx	r3
    9e22:	6178      	str	r0, [r7, #20]
    9e24:	e00f      	b.n	9e46 <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    9e26:	79bb      	ldrb	r3, [r7, #6]
    9e28:	2b00      	cmp	r3, #0
    9e2a:	d106      	bne.n	9e3a <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    9e2c:	7cbb      	ldrb	r3, [r7, #18]
    9e2e:	4619      	mov	r1, r3
    9e30:	68f8      	ldr	r0, [r7, #12]
    9e32:	4b09      	ldr	r3, [pc, #36]	; (9e58 <_usb_d_dev_ep_stall+0x88>)
    9e34:	4798      	blx	r3
    9e36:	6178      	str	r0, [r7, #20]
    9e38:	e005      	b.n	9e46 <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    9e3a:	7cbb      	ldrb	r3, [r7, #18]
    9e3c:	4619      	mov	r1, r3
    9e3e:	68f8      	ldr	r0, [r7, #12]
    9e40:	4b06      	ldr	r3, [pc, #24]	; (9e5c <_usb_d_dev_ep_stall+0x8c>)
    9e42:	4798      	blx	r3
    9e44:	6178      	str	r0, [r7, #20]
	}
	return rc;
    9e46:	697b      	ldr	r3, [r7, #20]
}
    9e48:	4618      	mov	r0, r3
    9e4a:	3718      	adds	r7, #24
    9e4c:	46bd      	mov	sp, r7
    9e4e:	bd80      	pop	{r7, pc}
    9e50:	00008871 	.word	0x00008871
    9e54:	00009ca5 	.word	0x00009ca5
    9e58:	00009cf5 	.word	0x00009cf5
    9e5c:	00009c75 	.word	0x00009c75

00009e60 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    9e60:	b580      	push	{r7, lr}
    9e62:	b082      	sub	sp, #8
    9e64:	af00      	add	r7, sp, #0
    9e66:	6078      	str	r0, [r7, #4]
    9e68:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    9e6a:	687b      	ldr	r3, [r7, #4]
    9e6c:	7c9b      	ldrb	r3, [r3, #18]
    9e6e:	2bff      	cmp	r3, #255	; 0xff
    9e70:	d014      	beq.n	9e9c <_usb_d_dev_trans_done+0x3c>
    9e72:	687b      	ldr	r3, [r7, #4]
    9e74:	7cdb      	ldrb	r3, [r3, #19]
    9e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9e7a:	b2db      	uxtb	r3, r3
    9e7c:	2b00      	cmp	r3, #0
    9e7e:	d00d      	beq.n	9e9c <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    9e80:	687a      	ldr	r2, [r7, #4]
    9e82:	7cd3      	ldrb	r3, [r2, #19]
    9e84:	f36f 1386 	bfc	r3, #6, #1
    9e88:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    9e8a:	4b06      	ldr	r3, [pc, #24]	; (9ea4 <_usb_d_dev_trans_done+0x44>)
    9e8c:	691b      	ldr	r3, [r3, #16]
    9e8e:	687a      	ldr	r2, [r7, #4]
    9e90:	7c90      	ldrb	r0, [r2, #18]
    9e92:	687a      	ldr	r2, [r7, #4]
    9e94:	6892      	ldr	r2, [r2, #8]
    9e96:	6839      	ldr	r1, [r7, #0]
    9e98:	4798      	blx	r3
    9e9a:	e000      	b.n	9e9e <_usb_d_dev_trans_done+0x3e>
		return;
    9e9c:	bf00      	nop
}
    9e9e:	3708      	adds	r7, #8
    9ea0:	46bd      	mov	sp, r7
    9ea2:	bd80      	pop	{r7, pc}
    9ea4:	20000e84 	.word	0x20000e84

00009ea8 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    9ea8:	b580      	push	{r7, lr}
    9eaa:	b086      	sub	sp, #24
    9eac:	af00      	add	r7, sp, #0
    9eae:	60f8      	str	r0, [r7, #12]
    9eb0:	460b      	mov	r3, r1
    9eb2:	607a      	str	r2, [r7, #4]
    9eb4:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9eb6:	68fb      	ldr	r3, [r7, #12]
    9eb8:	7c9b      	ldrb	r3, [r3, #18]
    9eba:	f003 030f 	and.w	r3, r3, #15
    9ebe:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    9ec0:	4b1f      	ldr	r3, [pc, #124]	; (9f40 <_usb_d_dev_trans_stop+0x98>)
    9ec2:	881b      	ldrh	r3, [r3, #0]
    9ec4:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    9ec6:	68fb      	ldr	r3, [r7, #12]
    9ec8:	7c9b      	ldrb	r3, [r3, #18]
    9eca:	2bff      	cmp	r3, #255	; 0xff
    9ecc:	d033      	beq.n	9f36 <_usb_d_dev_trans_stop+0x8e>
    9ece:	68fb      	ldr	r3, [r7, #12]
    9ed0:	7cdb      	ldrb	r3, [r3, #19]
    9ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9ed6:	b2db      	uxtb	r3, r3
    9ed8:	2b00      	cmp	r3, #0
    9eda:	d02c      	beq.n	9f36 <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    9edc:	7afb      	ldrb	r3, [r7, #11]
    9ede:	2b00      	cmp	r3, #0
    9ee0:	d006      	beq.n	9ef0 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    9ee2:	7dfb      	ldrb	r3, [r7, #23]
    9ee4:	2200      	movs	r2, #0
    9ee6:	2101      	movs	r1, #1
    9ee8:	4618      	mov	r0, r3
    9eea:	4b16      	ldr	r3, [pc, #88]	; (9f44 <_usb_d_dev_trans_stop+0x9c>)
    9eec:	4798      	blx	r3
    9eee:	e005      	b.n	9efc <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    9ef0:	7dfb      	ldrb	r3, [r7, #23]
    9ef2:	2200      	movs	r2, #0
    9ef4:	2100      	movs	r1, #0
    9ef6:	4618      	mov	r0, r3
    9ef8:	4b13      	ldr	r3, [pc, #76]	; (9f48 <_usb_d_dev_trans_stop+0xa0>)
    9efa:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    9efc:	7afb      	ldrb	r3, [r7, #11]
    9efe:	f107 0218 	add.w	r2, r7, #24
    9f02:	4413      	add	r3, r2
    9f04:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    9f08:	461a      	mov	r2, r3
    9f0a:	7dfb      	ldrb	r3, [r7, #23]
    9f0c:	4611      	mov	r1, r2
    9f0e:	4618      	mov	r0, r3
    9f10:	4b0e      	ldr	r3, [pc, #56]	; (9f4c <_usb_d_dev_trans_stop+0xa4>)
    9f12:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    9f14:	7afb      	ldrb	r3, [r7, #11]
    9f16:	f107 0218 	add.w	r2, r7, #24
    9f1a:	4413      	add	r3, r2
    9f1c:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    9f20:	461a      	mov	r2, r3
    9f22:	7dfb      	ldrb	r3, [r7, #23]
    9f24:	4611      	mov	r1, r2
    9f26:	4618      	mov	r0, r3
    9f28:	4b09      	ldr	r3, [pc, #36]	; (9f50 <_usb_d_dev_trans_stop+0xa8>)
    9f2a:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    9f2c:	6879      	ldr	r1, [r7, #4]
    9f2e:	68f8      	ldr	r0, [r7, #12]
    9f30:	4b08      	ldr	r3, [pc, #32]	; (9f54 <_usb_d_dev_trans_stop+0xac>)
    9f32:	4798      	blx	r3
    9f34:	e000      	b.n	9f38 <_usb_d_dev_trans_stop+0x90>
		return;
    9f36:	bf00      	nop
}
    9f38:	3718      	adds	r7, #24
    9f3a:	46bd      	mov	sp, r7
    9f3c:	bd80      	pop	{r7, pc}
    9f3e:	bf00      	nop
    9f40:	00013208 	.word	0x00013208
    9f44:	0000875d 	.word	0x0000875d
    9f48:	000087b5 	.word	0x000087b5
    9f4c:	00008265 	.word	0x00008265
    9f50:	000082b5 	.word	0x000082b5
    9f54:	00009e61 	.word	0x00009e61

00009f58 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    9f58:	b580      	push	{r7, lr}
    9f5a:	b086      	sub	sp, #24
    9f5c:	af00      	add	r7, sp, #0
    9f5e:	4603      	mov	r3, r0
    9f60:	6039      	str	r1, [r7, #0]
    9f62:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    9f64:	79fb      	ldrb	r3, [r7, #7]
    9f66:	f003 030f 	and.w	r3, r3, #15
    9f6a:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    9f6c:	7dfb      	ldrb	r3, [r7, #23]
    9f6e:	015b      	lsls	r3, r3, #5
    9f70:	4a1e      	ldr	r2, [pc, #120]	; (9fec <_usb_d_dev_ep_read_req+0x94>)
    9f72:	4413      	add	r3, r2
    9f74:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    9f76:	693b      	ldr	r3, [r7, #16]
    9f78:	681b      	ldr	r3, [r3, #0]
    9f7a:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    9f7c:	693b      	ldr	r3, [r7, #16]
    9f7e:	685b      	ldr	r3, [r3, #4]
    9f80:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9f84:	b29b      	uxth	r3, r3
    9f86:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    9f88:	7dfb      	ldrb	r3, [r7, #23]
    9f8a:	2b04      	cmp	r3, #4
    9f8c:	d802      	bhi.n	9f94 <_usb_d_dev_ep_read_req+0x3c>
    9f8e:	683b      	ldr	r3, [r7, #0]
    9f90:	2b00      	cmp	r3, #0
    9f92:	d102      	bne.n	9f9a <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    9f94:	f06f 0311 	mvn.w	r3, #17
    9f98:	e023      	b.n	9fe2 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    9f9a:	7dfb      	ldrb	r3, [r7, #23]
    9f9c:	4618      	mov	r0, r3
    9f9e:	4b14      	ldr	r3, [pc, #80]	; (9ff0 <_usb_d_dev_ep_read_req+0x98>)
    9fa0:	4798      	blx	r3
    9fa2:	4603      	mov	r3, r0
    9fa4:	f083 0301 	eor.w	r3, r3, #1
    9fa8:	b2db      	uxtb	r3, r3
    9faa:	2b00      	cmp	r3, #0
    9fac:	d002      	beq.n	9fb4 <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    9fae:	f06f 0312 	mvn.w	r3, #18
    9fb2:	e016      	b.n	9fe2 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    9fb4:	7dfb      	ldrb	r3, [r7, #23]
    9fb6:	4618      	mov	r0, r3
    9fb8:	4b0e      	ldr	r3, [pc, #56]	; (9ff4 <_usb_d_dev_ep_read_req+0x9c>)
    9fba:	4798      	blx	r3
    9fbc:	4603      	mov	r3, r0
    9fbe:	f083 0301 	eor.w	r3, r3, #1
    9fc2:	b2db      	uxtb	r3, r3
    9fc4:	2b00      	cmp	r3, #0
    9fc6:	d001      	beq.n	9fcc <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    9fc8:	2300      	movs	r3, #0
    9fca:	e00a      	b.n	9fe2 <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    9fcc:	68fb      	ldr	r3, [r7, #12]
    9fce:	2208      	movs	r2, #8
    9fd0:	4619      	mov	r1, r3
    9fd2:	6838      	ldr	r0, [r7, #0]
    9fd4:	4b08      	ldr	r3, [pc, #32]	; (9ff8 <_usb_d_dev_ep_read_req+0xa0>)
    9fd6:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    9fd8:	7dfb      	ldrb	r3, [r7, #23]
    9fda:	4618      	mov	r0, r3
    9fdc:	4b07      	ldr	r3, [pc, #28]	; (9ffc <_usb_d_dev_ep_read_req+0xa4>)
    9fde:	4798      	blx	r3

	return bytes;
    9fe0:	897b      	ldrh	r3, [r7, #10]
}
    9fe2:	4618      	mov	r0, r3
    9fe4:	3718      	adds	r7, #24
    9fe6:	46bd      	mov	sp, r7
    9fe8:	bd80      	pop	{r7, pc}
    9fea:	bf00      	nop
    9fec:	20000f4c 	.word	0x20000f4c
    9ff0:	000082dd 	.word	0x000082dd
    9ff4:	00008489 	.word	0x00008489
    9ff8:	00012b75 	.word	0x00012b75
    9ffc:	000084b9 	.word	0x000084b9

0000a000 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    a000:	b580      	push	{r7, lr}
    a002:	b086      	sub	sp, #24
    a004:	af00      	add	r7, sp, #0
    a006:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    a008:	687b      	ldr	r3, [r7, #4]
    a00a:	7a1b      	ldrb	r3, [r3, #8]
    a00c:	f003 030f 	and.w	r3, r3, #15
    a010:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    a012:	687b      	ldr	r3, [r7, #4]
    a014:	7a1b      	ldrb	r3, [r3, #8]
    a016:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a01a:	2b00      	cmp	r3, #0
    a01c:	bf14      	ite	ne
    a01e:	2301      	movne	r3, #1
    a020:	2300      	moveq	r3, #0
    a022:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a024:	7d7a      	ldrb	r2, [r7, #21]
    a026:	7dbb      	ldrb	r3, [r7, #22]
    a028:	4611      	mov	r1, r2
    a02a:	4618      	mov	r0, r3
    a02c:	4b5f      	ldr	r3, [pc, #380]	; (a1ac <_usb_d_dev_ep_trans+0x1ac>)
    a02e:	4798      	blx	r3
    a030:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    a032:	693b      	ldr	r3, [r7, #16]
    a034:	8a1b      	ldrh	r3, [r3, #16]
    a036:	f240 32ff 	movw	r2, #1023	; 0x3ff
    a03a:	4293      	cmp	r3, r2
    a03c:	d004      	beq.n	a048 <_usb_d_dev_ep_trans+0x48>
    a03e:	693b      	ldr	r3, [r7, #16]
    a040:	8a1b      	ldrh	r3, [r3, #16]
    a042:	3b01      	subs	r3, #1
    a044:	b29b      	uxth	r3, r3
    a046:	e001      	b.n	a04c <_usb_d_dev_ep_trans+0x4c>
    a048:	f240 33ff 	movw	r3, #1023	; 0x3ff
    a04c:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    a04e:	687b      	ldr	r3, [r7, #4]
    a050:	685a      	ldr	r2, [r3, #4]
    a052:	89fb      	ldrh	r3, [r7, #14]
    a054:	4013      	ands	r3, r2
    a056:	2b00      	cmp	r3, #0
    a058:	bf14      	ite	ne
    a05a:	2301      	movne	r3, #1
    a05c:	2300      	moveq	r3, #0
    a05e:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    a060:	2300      	movs	r3, #0
    a062:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    a064:	7dbb      	ldrb	r3, [r7, #22]
    a066:	2b04      	cmp	r3, #4
    a068:	d902      	bls.n	a070 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    a06a:	f06f 0311 	mvn.w	r3, #17
    a06e:	e098      	b.n	a1a2 <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    a070:	687b      	ldr	r3, [r7, #4]
    a072:	681b      	ldr	r3, [r3, #0]
    a074:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    a078:	d31a      	bcc.n	a0b0 <_usb_d_dev_ep_trans+0xb0>
    a07a:	687b      	ldr	r3, [r7, #4]
    a07c:	681b      	ldr	r3, [r3, #0]
    a07e:	461a      	mov	r2, r3
    a080:	687b      	ldr	r3, [r7, #4]
    a082:	685b      	ldr	r3, [r3, #4]
    a084:	4413      	add	r3, r2
    a086:	4a4a      	ldr	r2, [pc, #296]	; (a1b0 <_usb_d_dev_ep_trans+0x1b0>)
    a088:	4293      	cmp	r3, r2
    a08a:	d811      	bhi.n	a0b0 <_usb_d_dev_ep_trans+0xb0>
    a08c:	687b      	ldr	r3, [r7, #4]
    a08e:	681b      	ldr	r3, [r3, #0]
    a090:	f003 0303 	and.w	r3, r3, #3
    a094:	2b00      	cmp	r3, #0
    a096:	d10b      	bne.n	a0b0 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    a098:	7d7b      	ldrb	r3, [r7, #21]
    a09a:	f083 0301 	eor.w	r3, r3, #1
    a09e:	b2db      	uxtb	r3, r3
    a0a0:	2b00      	cmp	r3, #0
    a0a2:	d00e      	beq.n	a0c2 <_usb_d_dev_ep_trans+0xc2>
    a0a4:	687b      	ldr	r3, [r7, #4]
    a0a6:	685b      	ldr	r3, [r3, #4]
    a0a8:	693a      	ldr	r2, [r7, #16]
    a0aa:	8a12      	ldrh	r2, [r2, #16]
    a0ac:	4293      	cmp	r3, r2
    a0ae:	d208      	bcs.n	a0c2 <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    a0b0:	693b      	ldr	r3, [r7, #16]
    a0b2:	68db      	ldr	r3, [r3, #12]
    a0b4:	2b00      	cmp	r3, #0
    a0b6:	d102      	bne.n	a0be <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    a0b8:	f06f 0312 	mvn.w	r3, #18
    a0bc:	e071      	b.n	a1a2 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    a0be:	2301      	movs	r3, #1
    a0c0:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    a0c2:	7d7b      	ldrb	r3, [r7, #21]
    a0c4:	f083 0301 	eor.w	r3, r3, #1
    a0c8:	b2db      	uxtb	r3, r3
    a0ca:	2b00      	cmp	r3, #0
    a0cc:	d009      	beq.n	a0e2 <_usb_d_dev_ep_trans+0xe2>
    a0ce:	7b7b      	ldrb	r3, [r7, #13]
    a0d0:	2b00      	cmp	r3, #0
    a0d2:	d006      	beq.n	a0e2 <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    a0d4:	693b      	ldr	r3, [r7, #16]
    a0d6:	68db      	ldr	r3, [r3, #12]
    a0d8:	2b00      	cmp	r3, #0
    a0da:	d102      	bne.n	a0e2 <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    a0dc:	f06f 0311 	mvn.w	r3, #17
    a0e0:	e05f      	b.n	a1a2 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    a0e2:	693b      	ldr	r3, [r7, #16]
    a0e4:	7cdb      	ldrb	r3, [r3, #19]
    a0e6:	f003 0308 	and.w	r3, r3, #8
    a0ea:	b2db      	uxtb	r3, r3
    a0ec:	2b00      	cmp	r3, #0
    a0ee:	d001      	beq.n	a0f4 <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    a0f0:	2302      	movs	r3, #2
    a0f2:	e056      	b.n	a1a2 <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    a0f4:	f107 0308 	add.w	r3, r7, #8
    a0f8:	4618      	mov	r0, r3
    a0fa:	4b2e      	ldr	r3, [pc, #184]	; (a1b4 <_usb_d_dev_ep_trans+0x1b4>)
    a0fc:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    a0fe:	693b      	ldr	r3, [r7, #16]
    a100:	7cdb      	ldrb	r3, [r3, #19]
    a102:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a106:	b2db      	uxtb	r3, r3
    a108:	2b00      	cmp	r3, #0
    a10a:	d006      	beq.n	a11a <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    a10c:	f107 0308 	add.w	r3, r7, #8
    a110:	4618      	mov	r0, r3
    a112:	4b29      	ldr	r3, [pc, #164]	; (a1b8 <_usb_d_dev_ep_trans+0x1b8>)
    a114:	4798      	blx	r3
		return USB_BUSY;
    a116:	2301      	movs	r3, #1
    a118:	e043      	b.n	a1a2 <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    a11a:	693a      	ldr	r2, [r7, #16]
    a11c:	7cd3      	ldrb	r3, [r2, #19]
    a11e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a122:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    a124:	f107 0308 	add.w	r3, r7, #8
    a128:	4618      	mov	r0, r3
    a12a:	4b23      	ldr	r3, [pc, #140]	; (a1b8 <_usb_d_dev_ep_trans+0x1b8>)
    a12c:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    a12e:	687b      	ldr	r3, [r7, #4]
    a130:	681a      	ldr	r2, [r3, #0]
    a132:	693b      	ldr	r3, [r7, #16]
    a134:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    a136:	687b      	ldr	r3, [r7, #4]
    a138:	685a      	ldr	r2, [r3, #4]
    a13a:	693b      	ldr	r3, [r7, #16]
    a13c:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    a13e:	693b      	ldr	r3, [r7, #16]
    a140:	2200      	movs	r2, #0
    a142:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    a144:	693a      	ldr	r2, [r7, #16]
    a146:	7cd3      	ldrb	r3, [r2, #19]
    a148:	7d79      	ldrb	r1, [r7, #21]
    a14a:	f361 13c7 	bfi	r3, r1, #7, #1
    a14e:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    a150:	693a      	ldr	r2, [r7, #16]
    a152:	7cd3      	ldrb	r3, [r2, #19]
    a154:	7df9      	ldrb	r1, [r7, #23]
    a156:	f361 1345 	bfi	r3, r1, #5, #1
    a15a:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    a15c:	687b      	ldr	r3, [r7, #4]
    a15e:	7a5b      	ldrb	r3, [r3, #9]
    a160:	2b00      	cmp	r3, #0
    a162:	d007      	beq.n	a174 <_usb_d_dev_ep_trans+0x174>
    a164:	7b7b      	ldrb	r3, [r7, #13]
    a166:	f083 0301 	eor.w	r3, r3, #1
    a16a:	b2db      	uxtb	r3, r3
    a16c:	2b00      	cmp	r3, #0
    a16e:	d001      	beq.n	a174 <_usb_d_dev_ep_trans+0x174>
    a170:	2301      	movs	r3, #1
    a172:	e000      	b.n	a176 <_usb_d_dev_ep_trans+0x176>
    a174:	2300      	movs	r3, #0
    a176:	b2db      	uxtb	r3, r3
    a178:	f003 0301 	and.w	r3, r3, #1
    a17c:	b2d9      	uxtb	r1, r3
    a17e:	693a      	ldr	r2, [r7, #16]
    a180:	7cd3      	ldrb	r3, [r2, #19]
    a182:	f361 1304 	bfi	r3, r1, #4, #1
    a186:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    a188:	7d7b      	ldrb	r3, [r7, #21]
    a18a:	2b00      	cmp	r3, #0
    a18c:	d004      	beq.n	a198 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    a18e:	2100      	movs	r1, #0
    a190:	6938      	ldr	r0, [r7, #16]
    a192:	4b0a      	ldr	r3, [pc, #40]	; (a1bc <_usb_d_dev_ep_trans+0x1bc>)
    a194:	4798      	blx	r3
    a196:	e003      	b.n	a1a0 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    a198:	2100      	movs	r1, #0
    a19a:	6938      	ldr	r0, [r7, #16]
    a19c:	4b08      	ldr	r3, [pc, #32]	; (a1c0 <_usb_d_dev_ep_trans+0x1c0>)
    a19e:	4798      	blx	r3
	}

	return ERR_NONE;
    a1a0:	2300      	movs	r3, #0
}
    a1a2:	4618      	mov	r0, r3
    a1a4:	3718      	adds	r7, #24
    a1a6:	46bd      	mov	sp, r7
    a1a8:	bd80      	pop	{r7, pc}
    a1aa:	bf00      	nop
    a1ac:	00008871 	.word	0x00008871
    a1b0:	20041fff 	.word	0x20041fff
    a1b4:	0000a979 	.word	0x0000a979
    a1b8:	0000a99f 	.word	0x0000a99f
    a1bc:	00008b39 	.word	0x00008b39
    a1c0:	00008d51 	.word	0x00008d51

0000a1c4 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    a1c4:	b480      	push	{r7}
    a1c6:	b085      	sub	sp, #20
    a1c8:	af00      	add	r7, sp, #0
    a1ca:	4603      	mov	r3, r0
    a1cc:	6039      	str	r1, [r7, #0]
    a1ce:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    a1d0:	683b      	ldr	r3, [r7, #0]
    a1d2:	2b00      	cmp	r3, #0
    a1d4:	d001      	beq.n	a1da <_usb_d_dev_register_callback+0x16>
    a1d6:	683b      	ldr	r3, [r7, #0]
    a1d8:	e000      	b.n	a1dc <_usb_d_dev_register_callback+0x18>
    a1da:	4b0a      	ldr	r3, [pc, #40]	; (a204 <_usb_d_dev_register_callback+0x40>)
    a1dc:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    a1de:	79fb      	ldrb	r3, [r7, #7]
    a1e0:	2b01      	cmp	r3, #1
    a1e2:	d103      	bne.n	a1ec <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    a1e4:	4a08      	ldr	r2, [pc, #32]	; (a208 <_usb_d_dev_register_callback+0x44>)
    a1e6:	68fb      	ldr	r3, [r7, #12]
    a1e8:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    a1ea:	e005      	b.n	a1f8 <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    a1ec:	79fb      	ldrb	r3, [r7, #7]
    a1ee:	2b00      	cmp	r3, #0
    a1f0:	d102      	bne.n	a1f8 <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    a1f2:	4a05      	ldr	r2, [pc, #20]	; (a208 <_usb_d_dev_register_callback+0x44>)
    a1f4:	68fb      	ldr	r3, [r7, #12]
    a1f6:	6013      	str	r3, [r2, #0]
}
    a1f8:	bf00      	nop
    a1fa:	3714      	adds	r7, #20
    a1fc:	46bd      	mov	sp, r7
    a1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    a202:	4770      	bx	lr
    a204:	000080f9 	.word	0x000080f9
    a208:	20000e84 	.word	0x20000e84

0000a20c <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    a20c:	b480      	push	{r7}
    a20e:	b085      	sub	sp, #20
    a210:	af00      	add	r7, sp, #0
    a212:	4603      	mov	r3, r0
    a214:	6039      	str	r1, [r7, #0]
    a216:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    a218:	683b      	ldr	r3, [r7, #0]
    a21a:	2b00      	cmp	r3, #0
    a21c:	d001      	beq.n	a222 <_usb_d_dev_register_ep_callback+0x16>
    a21e:	683b      	ldr	r3, [r7, #0]
    a220:	e000      	b.n	a224 <_usb_d_dev_register_ep_callback+0x18>
    a222:	4b0e      	ldr	r3, [pc, #56]	; (a25c <_usb_d_dev_register_ep_callback+0x50>)
    a224:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    a226:	79fb      	ldrb	r3, [r7, #7]
    a228:	2b00      	cmp	r3, #0
    a22a:	d103      	bne.n	a234 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    a22c:	4a0c      	ldr	r2, [pc, #48]	; (a260 <_usb_d_dev_register_ep_callback+0x54>)
    a22e:	68fb      	ldr	r3, [r7, #12]
    a230:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    a232:	e00c      	b.n	a24e <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    a234:	79fb      	ldrb	r3, [r7, #7]
    a236:	2b01      	cmp	r3, #1
    a238:	d103      	bne.n	a242 <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    a23a:	4a09      	ldr	r2, [pc, #36]	; (a260 <_usb_d_dev_register_ep_callback+0x54>)
    a23c:	68fb      	ldr	r3, [r7, #12]
    a23e:	60d3      	str	r3, [r2, #12]
}
    a240:	e005      	b.n	a24e <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    a242:	79fb      	ldrb	r3, [r7, #7]
    a244:	2b02      	cmp	r3, #2
    a246:	d102      	bne.n	a24e <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    a248:	4a05      	ldr	r2, [pc, #20]	; (a260 <_usb_d_dev_register_ep_callback+0x54>)
    a24a:	68fb      	ldr	r3, [r7, #12]
    a24c:	6113      	str	r3, [r2, #16]
}
    a24e:	bf00      	nop
    a250:	3714      	adds	r7, #20
    a252:	46bd      	mov	sp, r7
    a254:	f85d 7b04 	ldr.w	r7, [sp], #4
    a258:	4770      	bx	lr
    a25a:	bf00      	nop
    a25c:	000080f9 	.word	0x000080f9
    a260:	20000e84 	.word	0x20000e84

0000a264 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    a264:	b580      	push	{r7, lr}
    a266:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a268:	4b01      	ldr	r3, [pc, #4]	; (a270 <USB_0_Handler+0xc>)
    a26a:	4798      	blx	r3
}
    a26c:	bf00      	nop
    a26e:	bd80      	pop	{r7, pc}
    a270:	00009529 	.word	0x00009529

0000a274 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    a274:	b580      	push	{r7, lr}
    a276:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a278:	4b01      	ldr	r3, [pc, #4]	; (a280 <USB_1_Handler+0xc>)
    a27a:	4798      	blx	r3
}
    a27c:	bf00      	nop
    a27e:	bd80      	pop	{r7, pc}
    a280:	00009529 	.word	0x00009529

0000a284 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    a284:	b580      	push	{r7, lr}
    a286:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a288:	4b01      	ldr	r3, [pc, #4]	; (a290 <USB_2_Handler+0xc>)
    a28a:	4798      	blx	r3
}
    a28c:	bf00      	nop
    a28e:	bd80      	pop	{r7, pc}
    a290:	00009529 	.word	0x00009529

0000a294 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    a294:	b580      	push	{r7, lr}
    a296:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a298:	4b01      	ldr	r3, [pc, #4]	; (a2a0 <USB_3_Handler+0xc>)
    a29a:	4798      	blx	r3
}
    a29c:	bf00      	nop
    a29e:	bd80      	pop	{r7, pc}
    a2a0:	00009529 	.word	0x00009529

0000a2a4 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    a2a4:	b480      	push	{r7}
    a2a6:	b083      	sub	sp, #12
    a2a8:	af00      	add	r7, sp, #0
    a2aa:	6078      	str	r0, [r7, #4]
    a2ac:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    a2ae:	bf00      	nop
    a2b0:	687b      	ldr	r3, [r7, #4]
    a2b2:	689a      	ldr	r2, [r3, #8]
    a2b4:	683b      	ldr	r3, [r7, #0]
    a2b6:	4013      	ands	r3, r2
    a2b8:	2b00      	cmp	r3, #0
    a2ba:	d1f9      	bne.n	a2b0 <hri_wdt_wait_for_sync+0xc>
	};
}
    a2bc:	bf00      	nop
    a2be:	370c      	adds	r7, #12
    a2c0:	46bd      	mov	sp, r7
    a2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    a2c6:	4770      	bx	lr

0000a2c8 <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    a2c8:	b580      	push	{r7, lr}
    a2ca:	b084      	sub	sp, #16
    a2cc:	af00      	add	r7, sp, #0
    a2ce:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    a2d0:	210e      	movs	r1, #14
    a2d2:	6878      	ldr	r0, [r7, #4]
    a2d4:	4b0a      	ldr	r3, [pc, #40]	; (a300 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    a2d6:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    a2d8:	687b      	ldr	r3, [r7, #4]
    a2da:	781b      	ldrb	r3, [r3, #0]
    a2dc:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    a2de:	7bfb      	ldrb	r3, [r7, #15]
    a2e0:	085b      	lsrs	r3, r3, #1
    a2e2:	b2db      	uxtb	r3, r3
    a2e4:	f003 0301 	and.w	r3, r3, #1
    a2e8:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    a2ea:	7bfb      	ldrb	r3, [r7, #15]
    a2ec:	2b00      	cmp	r3, #0
    a2ee:	bf14      	ite	ne
    a2f0:	2301      	movne	r3, #1
    a2f2:	2300      	moveq	r3, #0
    a2f4:	b2db      	uxtb	r3, r3
}
    a2f6:	4618      	mov	r0, r3
    a2f8:	3710      	adds	r7, #16
    a2fa:	46bd      	mov	sp, r7
    a2fc:	bd80      	pop	{r7, pc}
    a2fe:	bf00      	nop
    a300:	0000a2a5 	.word	0x0000a2a5

0000a304 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    a304:	b580      	push	{r7, lr}
    a306:	b082      	sub	sp, #8
    a308:	af00      	add	r7, sp, #0
    a30a:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    a30c:	687b      	ldr	r3, [r7, #4]
    a30e:	781b      	ldrb	r3, [r3, #0]
    a310:	b2db      	uxtb	r3, r3
    a312:	f023 0304 	bic.w	r3, r3, #4
    a316:	b2da      	uxtb	r2, r3
    a318:	687b      	ldr	r3, [r7, #4]
    a31a:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    a31c:	210e      	movs	r1, #14
    a31e:	6878      	ldr	r0, [r7, #4]
    a320:	4b02      	ldr	r3, [pc, #8]	; (a32c <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    a322:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    a324:	bf00      	nop
    a326:	3708      	adds	r7, #8
    a328:	46bd      	mov	sp, r7
    a32a:	bd80      	pop	{r7, pc}
    a32c:	0000a2a5 	.word	0x0000a2a5

0000a330 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    a330:	b580      	push	{r7, lr}
    a332:	b084      	sub	sp, #16
    a334:	af00      	add	r7, sp, #0
    a336:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    a338:	210e      	movs	r1, #14
    a33a:	6878      	ldr	r0, [r7, #4]
    a33c:	4b08      	ldr	r3, [pc, #32]	; (a360 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    a33e:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    a340:	687b      	ldr	r3, [r7, #4]
    a342:	781b      	ldrb	r3, [r3, #0]
    a344:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    a346:	7bfb      	ldrb	r3, [r7, #15]
    a348:	09db      	lsrs	r3, r3, #7
    a34a:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    a34c:	7bfb      	ldrb	r3, [r7, #15]
    a34e:	2b00      	cmp	r3, #0
    a350:	bf14      	ite	ne
    a352:	2301      	movne	r3, #1
    a354:	2300      	moveq	r3, #0
    a356:	b2db      	uxtb	r3, r3
}
    a358:	4618      	mov	r0, r3
    a35a:	3710      	adds	r7, #16
    a35c:	46bd      	mov	sp, r7
    a35e:	bd80      	pop	{r7, pc}
    a360:	0000a2a5 	.word	0x0000a2a5

0000a364 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    a364:	b480      	push	{r7}
    a366:	b085      	sub	sp, #20
    a368:	af00      	add	r7, sp, #0
    a36a:	6078      	str	r0, [r7, #4]
    a36c:	460b      	mov	r3, r1
    a36e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    a370:	687b      	ldr	r3, [r7, #4]
    a372:	785b      	ldrb	r3, [r3, #1]
    a374:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    a376:	7bfb      	ldrb	r3, [r7, #15]
    a378:	f023 030f 	bic.w	r3, r3, #15
    a37c:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    a37e:	78fb      	ldrb	r3, [r7, #3]
    a380:	f003 030f 	and.w	r3, r3, #15
    a384:	b2da      	uxtb	r2, r3
    a386:	7bfb      	ldrb	r3, [r7, #15]
    a388:	4313      	orrs	r3, r2
    a38a:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    a38c:	687b      	ldr	r3, [r7, #4]
    a38e:	7bfa      	ldrb	r2, [r7, #15]
    a390:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    a392:	bf00      	nop
    a394:	3714      	adds	r7, #20
    a396:	46bd      	mov	sp, r7
    a398:	f85d 7b04 	ldr.w	r7, [sp], #4
    a39c:	4770      	bx	lr
	...

0000a3a0 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    a3a0:	b580      	push	{r7, lr}
    a3a2:	b082      	sub	sp, #8
    a3a4:	af00      	add	r7, sp, #0
    a3a6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    a3a8:	687b      	ldr	r3, [r7, #4]
    a3aa:	2b00      	cmp	r3, #0
    a3ac:	d005      	beq.n	a3ba <_wdt_init+0x1a>
    a3ae:	687b      	ldr	r3, [r7, #4]
    a3b0:	681b      	ldr	r3, [r3, #0]
    a3b2:	2b00      	cmp	r3, #0
    a3b4:	d001      	beq.n	a3ba <_wdt_init+0x1a>
    a3b6:	2301      	movs	r3, #1
    a3b8:	e000      	b.n	a3bc <_wdt_init+0x1c>
    a3ba:	2300      	movs	r3, #0
    a3bc:	f003 0301 	and.w	r3, r3, #1
    a3c0:	b2db      	uxtb	r3, r3
    a3c2:	2250      	movs	r2, #80	; 0x50
    a3c4:	4913      	ldr	r1, [pc, #76]	; (a414 <_wdt_init+0x74>)
    a3c6:	4618      	mov	r0, r3
    a3c8:	4b13      	ldr	r3, [pc, #76]	; (a418 <_wdt_init+0x78>)
    a3ca:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    a3cc:	687b      	ldr	r3, [r7, #4]
    a3ce:	681b      	ldr	r3, [r3, #0]
    a3d0:	4618      	mov	r0, r3
    a3d2:	4b12      	ldr	r3, [pc, #72]	; (a41c <_wdt_init+0x7c>)
    a3d4:	4798      	blx	r3
    a3d6:	4603      	mov	r3, r0
    a3d8:	2b00      	cmp	r3, #0
    a3da:	d107      	bne.n	a3ec <_wdt_init+0x4c>
    a3dc:	687b      	ldr	r3, [r7, #4]
    a3de:	681b      	ldr	r3, [r3, #0]
    a3e0:	4618      	mov	r0, r3
    a3e2:	4b0f      	ldr	r3, [pc, #60]	; (a420 <_wdt_init+0x80>)
    a3e4:	4798      	blx	r3
    a3e6:	4603      	mov	r3, r0
    a3e8:	2b00      	cmp	r3, #0
    a3ea:	d002      	beq.n	a3f2 <_wdt_init+0x52>
		return ERR_DENIED;
    a3ec:	f06f 0310 	mvn.w	r3, #16
    a3f0:	e00b      	b.n	a40a <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    a3f2:	687b      	ldr	r3, [r7, #4]
    a3f4:	681b      	ldr	r3, [r3, #0]
    a3f6:	4618      	mov	r0, r3
    a3f8:	4b0a      	ldr	r3, [pc, #40]	; (a424 <_wdt_init+0x84>)
    a3fa:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    a3fc:	687b      	ldr	r3, [r7, #4]
    a3fe:	681b      	ldr	r3, [r3, #0]
    a400:	210b      	movs	r1, #11
    a402:	4618      	mov	r0, r3
    a404:	4b08      	ldr	r3, [pc, #32]	; (a428 <_wdt_init+0x88>)
    a406:	4798      	blx	r3
	}

	return ERR_NONE;
    a408:	2300      	movs	r3, #0
}
    a40a:	4618      	mov	r0, r3
    a40c:	3708      	adds	r7, #8
    a40e:	46bd      	mov	sp, r7
    a410:	bd80      	pop	{r7, pc}
    a412:	bf00      	nop
    a414:	0001320c 	.word	0x0001320c
    a418:	00002edd 	.word	0x00002edd
    a41c:	0000a331 	.word	0x0000a331
    a420:	0000a2c9 	.word	0x0000a2c9
    a424:	0000a305 	.word	0x0000a305
    a428:	0000a365 	.word	0x0000a365

0000a42c <hri_port_set_DIR_reg>:
{
    a42c:	b480      	push	{r7}
    a42e:	b085      	sub	sp, #20
    a430:	af00      	add	r7, sp, #0
    a432:	60f8      	str	r0, [r7, #12]
    a434:	460b      	mov	r3, r1
    a436:	607a      	str	r2, [r7, #4]
    a438:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    a43a:	7afb      	ldrb	r3, [r7, #11]
    a43c:	68fa      	ldr	r2, [r7, #12]
    a43e:	01db      	lsls	r3, r3, #7
    a440:	4413      	add	r3, r2
    a442:	3308      	adds	r3, #8
    a444:	687a      	ldr	r2, [r7, #4]
    a446:	601a      	str	r2, [r3, #0]
}
    a448:	bf00      	nop
    a44a:	3714      	adds	r7, #20
    a44c:	46bd      	mov	sp, r7
    a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a452:	4770      	bx	lr

0000a454 <hri_port_clear_DIR_reg>:
{
    a454:	b480      	push	{r7}
    a456:	b085      	sub	sp, #20
    a458:	af00      	add	r7, sp, #0
    a45a:	60f8      	str	r0, [r7, #12]
    a45c:	460b      	mov	r3, r1
    a45e:	607a      	str	r2, [r7, #4]
    a460:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    a462:	7afb      	ldrb	r3, [r7, #11]
    a464:	68fa      	ldr	r2, [r7, #12]
    a466:	01db      	lsls	r3, r3, #7
    a468:	4413      	add	r3, r2
    a46a:	3304      	adds	r3, #4
    a46c:	687a      	ldr	r2, [r7, #4]
    a46e:	601a      	str	r2, [r3, #0]
}
    a470:	bf00      	nop
    a472:	3714      	adds	r7, #20
    a474:	46bd      	mov	sp, r7
    a476:	f85d 7b04 	ldr.w	r7, [sp], #4
    a47a:	4770      	bx	lr

0000a47c <hri_port_set_OUT_reg>:
{
    a47c:	b480      	push	{r7}
    a47e:	b085      	sub	sp, #20
    a480:	af00      	add	r7, sp, #0
    a482:	60f8      	str	r0, [r7, #12]
    a484:	460b      	mov	r3, r1
    a486:	607a      	str	r2, [r7, #4]
    a488:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    a48a:	7afb      	ldrb	r3, [r7, #11]
    a48c:	68fa      	ldr	r2, [r7, #12]
    a48e:	01db      	lsls	r3, r3, #7
    a490:	4413      	add	r3, r2
    a492:	3318      	adds	r3, #24
    a494:	687a      	ldr	r2, [r7, #4]
    a496:	601a      	str	r2, [r3, #0]
}
    a498:	bf00      	nop
    a49a:	3714      	adds	r7, #20
    a49c:	46bd      	mov	sp, r7
    a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a4a2:	4770      	bx	lr

0000a4a4 <hri_port_clear_OUT_reg>:
{
    a4a4:	b480      	push	{r7}
    a4a6:	b085      	sub	sp, #20
    a4a8:	af00      	add	r7, sp, #0
    a4aa:	60f8      	str	r0, [r7, #12]
    a4ac:	460b      	mov	r3, r1
    a4ae:	607a      	str	r2, [r7, #4]
    a4b0:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    a4b2:	7afb      	ldrb	r3, [r7, #11]
    a4b4:	68fa      	ldr	r2, [r7, #12]
    a4b6:	01db      	lsls	r3, r3, #7
    a4b8:	4413      	add	r3, r2
    a4ba:	3314      	adds	r3, #20
    a4bc:	687a      	ldr	r2, [r7, #4]
    a4be:	601a      	str	r2, [r3, #0]
}
    a4c0:	bf00      	nop
    a4c2:	3714      	adds	r7, #20
    a4c4:	46bd      	mov	sp, r7
    a4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    a4ca:	4770      	bx	lr

0000a4cc <hri_port_write_PMUX_PMUXE_bf>:
{
    a4cc:	b480      	push	{r7}
    a4ce:	b085      	sub	sp, #20
    a4d0:	af00      	add	r7, sp, #0
    a4d2:	6078      	str	r0, [r7, #4]
    a4d4:	4608      	mov	r0, r1
    a4d6:	4611      	mov	r1, r2
    a4d8:	461a      	mov	r2, r3
    a4da:	4603      	mov	r3, r0
    a4dc:	70fb      	strb	r3, [r7, #3]
    a4de:	460b      	mov	r3, r1
    a4e0:	70bb      	strb	r3, [r7, #2]
    a4e2:	4613      	mov	r3, r2
    a4e4:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    a4e6:	78fa      	ldrb	r2, [r7, #3]
    a4e8:	78bb      	ldrb	r3, [r7, #2]
    a4ea:	6879      	ldr	r1, [r7, #4]
    a4ec:	01d2      	lsls	r2, r2, #7
    a4ee:	440a      	add	r2, r1
    a4f0:	4413      	add	r3, r2
    a4f2:	3330      	adds	r3, #48	; 0x30
    a4f4:	781b      	ldrb	r3, [r3, #0]
    a4f6:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    a4f8:	7bfb      	ldrb	r3, [r7, #15]
    a4fa:	f023 030f 	bic.w	r3, r3, #15
    a4fe:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    a500:	787b      	ldrb	r3, [r7, #1]
    a502:	f003 030f 	and.w	r3, r3, #15
    a506:	b2da      	uxtb	r2, r3
    a508:	7bfb      	ldrb	r3, [r7, #15]
    a50a:	4313      	orrs	r3, r2
    a50c:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    a50e:	78fa      	ldrb	r2, [r7, #3]
    a510:	78bb      	ldrb	r3, [r7, #2]
    a512:	6879      	ldr	r1, [r7, #4]
    a514:	01d2      	lsls	r2, r2, #7
    a516:	440a      	add	r2, r1
    a518:	4413      	add	r3, r2
    a51a:	3330      	adds	r3, #48	; 0x30
    a51c:	7bfa      	ldrb	r2, [r7, #15]
    a51e:	701a      	strb	r2, [r3, #0]
}
    a520:	bf00      	nop
    a522:	3714      	adds	r7, #20
    a524:	46bd      	mov	sp, r7
    a526:	f85d 7b04 	ldr.w	r7, [sp], #4
    a52a:	4770      	bx	lr

0000a52c <hri_port_write_PMUX_PMUXO_bf>:
{
    a52c:	b480      	push	{r7}
    a52e:	b085      	sub	sp, #20
    a530:	af00      	add	r7, sp, #0
    a532:	6078      	str	r0, [r7, #4]
    a534:	4608      	mov	r0, r1
    a536:	4611      	mov	r1, r2
    a538:	461a      	mov	r2, r3
    a53a:	4603      	mov	r3, r0
    a53c:	70fb      	strb	r3, [r7, #3]
    a53e:	460b      	mov	r3, r1
    a540:	70bb      	strb	r3, [r7, #2]
    a542:	4613      	mov	r3, r2
    a544:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    a546:	78fa      	ldrb	r2, [r7, #3]
    a548:	78bb      	ldrb	r3, [r7, #2]
    a54a:	6879      	ldr	r1, [r7, #4]
    a54c:	01d2      	lsls	r2, r2, #7
    a54e:	440a      	add	r2, r1
    a550:	4413      	add	r3, r2
    a552:	3330      	adds	r3, #48	; 0x30
    a554:	781b      	ldrb	r3, [r3, #0]
    a556:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    a558:	7bfb      	ldrb	r3, [r7, #15]
    a55a:	f003 030f 	and.w	r3, r3, #15
    a55e:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    a560:	787b      	ldrb	r3, [r7, #1]
    a562:	011b      	lsls	r3, r3, #4
    a564:	b2da      	uxtb	r2, r3
    a566:	7bfb      	ldrb	r3, [r7, #15]
    a568:	4313      	orrs	r3, r2
    a56a:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    a56c:	78fa      	ldrb	r2, [r7, #3]
    a56e:	78bb      	ldrb	r3, [r7, #2]
    a570:	6879      	ldr	r1, [r7, #4]
    a572:	01d2      	lsls	r2, r2, #7
    a574:	440a      	add	r2, r1
    a576:	4413      	add	r3, r2
    a578:	3330      	adds	r3, #48	; 0x30
    a57a:	7bfa      	ldrb	r2, [r7, #15]
    a57c:	701a      	strb	r2, [r3, #0]
}
    a57e:	bf00      	nop
    a580:	3714      	adds	r7, #20
    a582:	46bd      	mov	sp, r7
    a584:	f85d 7b04 	ldr.w	r7, [sp], #4
    a588:	4770      	bx	lr

0000a58a <hri_port_write_PINCFG_PMUXEN_bit>:
{
    a58a:	b480      	push	{r7}
    a58c:	b085      	sub	sp, #20
    a58e:	af00      	add	r7, sp, #0
    a590:	6078      	str	r0, [r7, #4]
    a592:	4608      	mov	r0, r1
    a594:	4611      	mov	r1, r2
    a596:	461a      	mov	r2, r3
    a598:	4603      	mov	r3, r0
    a59a:	70fb      	strb	r3, [r7, #3]
    a59c:	460b      	mov	r3, r1
    a59e:	70bb      	strb	r3, [r7, #2]
    a5a0:	4613      	mov	r3, r2
    a5a2:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    a5a4:	78fa      	ldrb	r2, [r7, #3]
    a5a6:	78bb      	ldrb	r3, [r7, #2]
    a5a8:	6879      	ldr	r1, [r7, #4]
    a5aa:	01d2      	lsls	r2, r2, #7
    a5ac:	440a      	add	r2, r1
    a5ae:	4413      	add	r3, r2
    a5b0:	3340      	adds	r3, #64	; 0x40
    a5b2:	781b      	ldrb	r3, [r3, #0]
    a5b4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    a5b6:	7bfb      	ldrb	r3, [r7, #15]
    a5b8:	f023 0301 	bic.w	r3, r3, #1
    a5bc:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    a5be:	787a      	ldrb	r2, [r7, #1]
    a5c0:	7bfb      	ldrb	r3, [r7, #15]
    a5c2:	4313      	orrs	r3, r2
    a5c4:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    a5c6:	78fa      	ldrb	r2, [r7, #3]
    a5c8:	78bb      	ldrb	r3, [r7, #2]
    a5ca:	6879      	ldr	r1, [r7, #4]
    a5cc:	01d2      	lsls	r2, r2, #7
    a5ce:	440a      	add	r2, r1
    a5d0:	4413      	add	r3, r2
    a5d2:	3340      	adds	r3, #64	; 0x40
    a5d4:	7bfa      	ldrb	r2, [r7, #15]
    a5d6:	701a      	strb	r2, [r3, #0]
}
    a5d8:	bf00      	nop
    a5da:	3714      	adds	r7, #20
    a5dc:	46bd      	mov	sp, r7
    a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
    a5e2:	4770      	bx	lr

0000a5e4 <hri_port_write_WRCONFIG_reg>:
{
    a5e4:	b480      	push	{r7}
    a5e6:	b085      	sub	sp, #20
    a5e8:	af00      	add	r7, sp, #0
    a5ea:	60f8      	str	r0, [r7, #12]
    a5ec:	460b      	mov	r3, r1
    a5ee:	607a      	str	r2, [r7, #4]
    a5f0:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    a5f2:	7afb      	ldrb	r3, [r7, #11]
    a5f4:	68fa      	ldr	r2, [r7, #12]
    a5f6:	01db      	lsls	r3, r3, #7
    a5f8:	4413      	add	r3, r2
    a5fa:	3328      	adds	r3, #40	; 0x28
    a5fc:	687a      	ldr	r2, [r7, #4]
    a5fe:	601a      	str	r2, [r3, #0]
}
    a600:	bf00      	nop
    a602:	3714      	adds	r7, #20
    a604:	46bd      	mov	sp, r7
    a606:	f85d 7b04 	ldr.w	r7, [sp], #4
    a60a:	4770      	bx	lr

0000a60c <_gpio_set_direction>:
{
    a60c:	b580      	push	{r7, lr}
    a60e:	b082      	sub	sp, #8
    a610:	af00      	add	r7, sp, #0
    a612:	4603      	mov	r3, r0
    a614:	6039      	str	r1, [r7, #0]
    a616:	71fb      	strb	r3, [r7, #7]
    a618:	4613      	mov	r3, r2
    a61a:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    a61c:	79bb      	ldrb	r3, [r7, #6]
    a61e:	2b01      	cmp	r3, #1
    a620:	d01c      	beq.n	a65c <_gpio_set_direction+0x50>
    a622:	2b02      	cmp	r3, #2
    a624:	d037      	beq.n	a696 <_gpio_set_direction+0x8a>
    a626:	2b00      	cmp	r3, #0
    a628:	d14e      	bne.n	a6c8 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    a62a:	79fb      	ldrb	r3, [r7, #7]
    a62c:	683a      	ldr	r2, [r7, #0]
    a62e:	4619      	mov	r1, r3
    a630:	482a      	ldr	r0, [pc, #168]	; (a6dc <_gpio_set_direction+0xd0>)
    a632:	4b2b      	ldr	r3, [pc, #172]	; (a6e0 <_gpio_set_direction+0xd4>)
    a634:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    a636:	683b      	ldr	r3, [r7, #0]
    a638:	b29b      	uxth	r3, r3
    a63a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    a63e:	79fb      	ldrb	r3, [r7, #7]
    a640:	4619      	mov	r1, r3
    a642:	4826      	ldr	r0, [pc, #152]	; (a6dc <_gpio_set_direction+0xd0>)
    a644:	4b27      	ldr	r3, [pc, #156]	; (a6e4 <_gpio_set_direction+0xd8>)
    a646:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    a648:	683b      	ldr	r3, [r7, #0]
    a64a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    a64c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    a650:	79fb      	ldrb	r3, [r7, #7]
    a652:	4619      	mov	r1, r3
    a654:	4821      	ldr	r0, [pc, #132]	; (a6dc <_gpio_set_direction+0xd0>)
    a656:	4b23      	ldr	r3, [pc, #140]	; (a6e4 <_gpio_set_direction+0xd8>)
    a658:	4798      	blx	r3
		break;
    a65a:	e03a      	b.n	a6d2 <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    a65c:	79fb      	ldrb	r3, [r7, #7]
    a65e:	683a      	ldr	r2, [r7, #0]
    a660:	4619      	mov	r1, r3
    a662:	481e      	ldr	r0, [pc, #120]	; (a6dc <_gpio_set_direction+0xd0>)
    a664:	4b1e      	ldr	r3, [pc, #120]	; (a6e0 <_gpio_set_direction+0xd4>)
    a666:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    a668:	683b      	ldr	r3, [r7, #0]
    a66a:	b29b      	uxth	r3, r3
    a66c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    a670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    a674:	79f9      	ldrb	r1, [r7, #7]
    a676:	461a      	mov	r2, r3
    a678:	4818      	ldr	r0, [pc, #96]	; (a6dc <_gpio_set_direction+0xd0>)
    a67a:	4b1a      	ldr	r3, [pc, #104]	; (a6e4 <_gpio_set_direction+0xd8>)
    a67c:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    a67e:	683b      	ldr	r3, [r7, #0]
    a680:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    a682:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    a686:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    a68a:	79f9      	ldrb	r1, [r7, #7]
    a68c:	461a      	mov	r2, r3
    a68e:	4813      	ldr	r0, [pc, #76]	; (a6dc <_gpio_set_direction+0xd0>)
    a690:	4b14      	ldr	r3, [pc, #80]	; (a6e4 <_gpio_set_direction+0xd8>)
    a692:	4798      	blx	r3
		break;
    a694:	e01d      	b.n	a6d2 <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    a696:	79fb      	ldrb	r3, [r7, #7]
    a698:	683a      	ldr	r2, [r7, #0]
    a69a:	4619      	mov	r1, r3
    a69c:	480f      	ldr	r0, [pc, #60]	; (a6dc <_gpio_set_direction+0xd0>)
    a69e:	4b12      	ldr	r3, [pc, #72]	; (a6e8 <_gpio_set_direction+0xdc>)
    a6a0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    a6a2:	683b      	ldr	r3, [r7, #0]
    a6a4:	b29b      	uxth	r3, r3
    a6a6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    a6aa:	79fb      	ldrb	r3, [r7, #7]
    a6ac:	4619      	mov	r1, r3
    a6ae:	480b      	ldr	r0, [pc, #44]	; (a6dc <_gpio_set_direction+0xd0>)
    a6b0:	4b0c      	ldr	r3, [pc, #48]	; (a6e4 <_gpio_set_direction+0xd8>)
    a6b2:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    a6b4:	683b      	ldr	r3, [r7, #0]
    a6b6:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    a6b8:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    a6bc:	79fb      	ldrb	r3, [r7, #7]
    a6be:	4619      	mov	r1, r3
    a6c0:	4806      	ldr	r0, [pc, #24]	; (a6dc <_gpio_set_direction+0xd0>)
    a6c2:	4b08      	ldr	r3, [pc, #32]	; (a6e4 <_gpio_set_direction+0xd8>)
    a6c4:	4798      	blx	r3
		break;
    a6c6:	e004      	b.n	a6d2 <_gpio_set_direction+0xc6>
		ASSERT(false);
    a6c8:	2246      	movs	r2, #70	; 0x46
    a6ca:	4908      	ldr	r1, [pc, #32]	; (a6ec <_gpio_set_direction+0xe0>)
    a6cc:	2000      	movs	r0, #0
    a6ce:	4b08      	ldr	r3, [pc, #32]	; (a6f0 <_gpio_set_direction+0xe4>)
    a6d0:	4798      	blx	r3
}
    a6d2:	bf00      	nop
    a6d4:	3708      	adds	r7, #8
    a6d6:	46bd      	mov	sp, r7
    a6d8:	bd80      	pop	{r7, pc}
    a6da:	bf00      	nop
    a6dc:	41008000 	.word	0x41008000
    a6e0:	0000a455 	.word	0x0000a455
    a6e4:	0000a5e5 	.word	0x0000a5e5
    a6e8:	0000a42d 	.word	0x0000a42d
    a6ec:	00013224 	.word	0x00013224
    a6f0:	00002edd 	.word	0x00002edd

0000a6f4 <_gpio_set_level>:
{
    a6f4:	b580      	push	{r7, lr}
    a6f6:	b082      	sub	sp, #8
    a6f8:	af00      	add	r7, sp, #0
    a6fa:	4603      	mov	r3, r0
    a6fc:	6039      	str	r1, [r7, #0]
    a6fe:	71fb      	strb	r3, [r7, #7]
    a700:	4613      	mov	r3, r2
    a702:	71bb      	strb	r3, [r7, #6]
	if (level) {
    a704:	79bb      	ldrb	r3, [r7, #6]
    a706:	2b00      	cmp	r3, #0
    a708:	d006      	beq.n	a718 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    a70a:	79fb      	ldrb	r3, [r7, #7]
    a70c:	683a      	ldr	r2, [r7, #0]
    a70e:	4619      	mov	r1, r3
    a710:	4806      	ldr	r0, [pc, #24]	; (a72c <_gpio_set_level+0x38>)
    a712:	4b07      	ldr	r3, [pc, #28]	; (a730 <_gpio_set_level+0x3c>)
    a714:	4798      	blx	r3
}
    a716:	e005      	b.n	a724 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    a718:	79fb      	ldrb	r3, [r7, #7]
    a71a:	683a      	ldr	r2, [r7, #0]
    a71c:	4619      	mov	r1, r3
    a71e:	4803      	ldr	r0, [pc, #12]	; (a72c <_gpio_set_level+0x38>)
    a720:	4b04      	ldr	r3, [pc, #16]	; (a734 <_gpio_set_level+0x40>)
    a722:	4798      	blx	r3
}
    a724:	bf00      	nop
    a726:	3708      	adds	r7, #8
    a728:	46bd      	mov	sp, r7
    a72a:	bd80      	pop	{r7, pc}
    a72c:	41008000 	.word	0x41008000
    a730:	0000a47d 	.word	0x0000a47d
    a734:	0000a4a5 	.word	0x0000a4a5

0000a738 <_gpio_set_pin_function>:
{
    a738:	b590      	push	{r4, r7, lr}
    a73a:	b085      	sub	sp, #20
    a73c:	af00      	add	r7, sp, #0
    a73e:	6078      	str	r0, [r7, #4]
    a740:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    a742:	687b      	ldr	r3, [r7, #4]
    a744:	095b      	lsrs	r3, r3, #5
    a746:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    a748:	687b      	ldr	r3, [r7, #4]
    a74a:	b2db      	uxtb	r3, r3
    a74c:	f003 031f 	and.w	r3, r3, #31
    a750:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    a752:	683b      	ldr	r3, [r7, #0]
    a754:	f1b3 3fff 	cmp.w	r3, #4294967295
    a758:	d106      	bne.n	a768 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    a75a:	7bba      	ldrb	r2, [r7, #14]
    a75c:	7bf9      	ldrb	r1, [r7, #15]
    a75e:	2300      	movs	r3, #0
    a760:	4812      	ldr	r0, [pc, #72]	; (a7ac <_gpio_set_pin_function+0x74>)
    a762:	4c13      	ldr	r4, [pc, #76]	; (a7b0 <_gpio_set_pin_function+0x78>)
    a764:	47a0      	blx	r4
}
    a766:	e01d      	b.n	a7a4 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    a768:	7bba      	ldrb	r2, [r7, #14]
    a76a:	7bf9      	ldrb	r1, [r7, #15]
    a76c:	2301      	movs	r3, #1
    a76e:	480f      	ldr	r0, [pc, #60]	; (a7ac <_gpio_set_pin_function+0x74>)
    a770:	4c0f      	ldr	r4, [pc, #60]	; (a7b0 <_gpio_set_pin_function+0x78>)
    a772:	47a0      	blx	r4
		if (pin & 1) {
    a774:	7bbb      	ldrb	r3, [r7, #14]
    a776:	f003 0301 	and.w	r3, r3, #1
    a77a:	2b00      	cmp	r3, #0
    a77c:	d009      	beq.n	a792 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    a77e:	7bbb      	ldrb	r3, [r7, #14]
    a780:	085b      	lsrs	r3, r3, #1
    a782:	b2da      	uxtb	r2, r3
    a784:	683b      	ldr	r3, [r7, #0]
    a786:	b2db      	uxtb	r3, r3
    a788:	7bf9      	ldrb	r1, [r7, #15]
    a78a:	4808      	ldr	r0, [pc, #32]	; (a7ac <_gpio_set_pin_function+0x74>)
    a78c:	4c09      	ldr	r4, [pc, #36]	; (a7b4 <_gpio_set_pin_function+0x7c>)
    a78e:	47a0      	blx	r4
}
    a790:	e008      	b.n	a7a4 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    a792:	7bbb      	ldrb	r3, [r7, #14]
    a794:	085b      	lsrs	r3, r3, #1
    a796:	b2da      	uxtb	r2, r3
    a798:	683b      	ldr	r3, [r7, #0]
    a79a:	b2db      	uxtb	r3, r3
    a79c:	7bf9      	ldrb	r1, [r7, #15]
    a79e:	4803      	ldr	r0, [pc, #12]	; (a7ac <_gpio_set_pin_function+0x74>)
    a7a0:	4c05      	ldr	r4, [pc, #20]	; (a7b8 <_gpio_set_pin_function+0x80>)
    a7a2:	47a0      	blx	r4
}
    a7a4:	bf00      	nop
    a7a6:	3714      	adds	r7, #20
    a7a8:	46bd      	mov	sp, r7
    a7aa:	bd90      	pop	{r4, r7, pc}
    a7ac:	41008000 	.word	0x41008000
    a7b0:	0000a58b 	.word	0x0000a58b
    a7b4:	0000a52d 	.word	0x0000a52d
    a7b8:	0000a4cd 	.word	0x0000a4cd

0000a7bc <gpio_set_pin_function>:
{
    a7bc:	b580      	push	{r7, lr}
    a7be:	b082      	sub	sp, #8
    a7c0:	af00      	add	r7, sp, #0
    a7c2:	6078      	str	r0, [r7, #4]
    a7c4:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    a7c6:	6839      	ldr	r1, [r7, #0]
    a7c8:	6878      	ldr	r0, [r7, #4]
    a7ca:	4b03      	ldr	r3, [pc, #12]	; (a7d8 <gpio_set_pin_function+0x1c>)
    a7cc:	4798      	blx	r3
}
    a7ce:	bf00      	nop
    a7d0:	3708      	adds	r7, #8
    a7d2:	46bd      	mov	sp, r7
    a7d4:	bd80      	pop	{r7, pc}
    a7d6:	bf00      	nop
    a7d8:	0000a739 	.word	0x0000a739

0000a7dc <gpio_set_pin_direction>:
{
    a7dc:	b580      	push	{r7, lr}
    a7de:	b082      	sub	sp, #8
    a7e0:	af00      	add	r7, sp, #0
    a7e2:	4603      	mov	r3, r0
    a7e4:	460a      	mov	r2, r1
    a7e6:	71fb      	strb	r3, [r7, #7]
    a7e8:	4613      	mov	r3, r2
    a7ea:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    a7ec:	79fb      	ldrb	r3, [r7, #7]
    a7ee:	095b      	lsrs	r3, r3, #5
    a7f0:	b2d8      	uxtb	r0, r3
    a7f2:	79fb      	ldrb	r3, [r7, #7]
    a7f4:	f003 031f 	and.w	r3, r3, #31
    a7f8:	2201      	movs	r2, #1
    a7fa:	fa02 f303 	lsl.w	r3, r2, r3
    a7fe:	79ba      	ldrb	r2, [r7, #6]
    a800:	4619      	mov	r1, r3
    a802:	4b03      	ldr	r3, [pc, #12]	; (a810 <gpio_set_pin_direction+0x34>)
    a804:	4798      	blx	r3
}
    a806:	bf00      	nop
    a808:	3708      	adds	r7, #8
    a80a:	46bd      	mov	sp, r7
    a80c:	bd80      	pop	{r7, pc}
    a80e:	bf00      	nop
    a810:	0000a60d 	.word	0x0000a60d

0000a814 <gpio_set_pin_level>:
{
    a814:	b580      	push	{r7, lr}
    a816:	b082      	sub	sp, #8
    a818:	af00      	add	r7, sp, #0
    a81a:	4603      	mov	r3, r0
    a81c:	460a      	mov	r2, r1
    a81e:	71fb      	strb	r3, [r7, #7]
    a820:	4613      	mov	r3, r2
    a822:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    a824:	79fb      	ldrb	r3, [r7, #7]
    a826:	095b      	lsrs	r3, r3, #5
    a828:	b2d8      	uxtb	r0, r3
    a82a:	79fb      	ldrb	r3, [r7, #7]
    a82c:	f003 031f 	and.w	r3, r3, #31
    a830:	2201      	movs	r2, #1
    a832:	fa02 f303 	lsl.w	r3, r2, r3
    a836:	79ba      	ldrb	r2, [r7, #6]
    a838:	4619      	mov	r1, r3
    a83a:	4b03      	ldr	r3, [pc, #12]	; (a848 <gpio_set_pin_level+0x34>)
    a83c:	4798      	blx	r3
}
    a83e:	bf00      	nop
    a840:	3708      	adds	r7, #8
    a842:	46bd      	mov	sp, r7
    a844:	bd80      	pop	{r7, pc}
    a846:	bf00      	nop
    a848:	0000a6f5 	.word	0x0000a6f5

0000a84c <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    a84c:	b580      	push	{r7, lr}
    a84e:	b082      	sub	sp, #8
    a850:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    a852:	2100      	movs	r1, #0
    a854:	2008      	movs	r0, #8
    a856:	4b24      	ldr	r3, [pc, #144]	; (a8e8 <QSPI_N25Q256_exit_xip+0x9c>)
    a858:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    a85a:	2100      	movs	r1, #0
    a85c:	202b      	movs	r0, #43	; 0x2b
    a85e:	4b22      	ldr	r3, [pc, #136]	; (a8e8 <QSPI_N25Q256_exit_xip+0x9c>)
    a860:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    a862:	2100      	movs	r1, #0
    a864:	202a      	movs	r0, #42	; 0x2a
    a866:	4b20      	ldr	r3, [pc, #128]	; (a8e8 <QSPI_N25Q256_exit_xip+0x9c>)
    a868:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    a86a:	2102      	movs	r1, #2
    a86c:	2008      	movs	r0, #8
    a86e:	4b1f      	ldr	r3, [pc, #124]	; (a8ec <QSPI_N25Q256_exit_xip+0xa0>)
    a870:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    a872:	2102      	movs	r1, #2
    a874:	202b      	movs	r0, #43	; 0x2b
    a876:	4b1d      	ldr	r3, [pc, #116]	; (a8ec <QSPI_N25Q256_exit_xip+0xa0>)
    a878:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    a87a:	2102      	movs	r1, #2
    a87c:	202a      	movs	r0, #42	; 0x2a
    a87e:	4b1b      	ldr	r3, [pc, #108]	; (a8ec <QSPI_N25Q256_exit_xip+0xa0>)
    a880:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    a882:	2101      	movs	r1, #1
    a884:	2008      	movs	r0, #8
    a886:	4b1a      	ldr	r3, [pc, #104]	; (a8f0 <QSPI_N25Q256_exit_xip+0xa4>)
    a888:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    a88a:	2100      	movs	r1, #0
    a88c:	202b      	movs	r0, #43	; 0x2b
    a88e:	4b18      	ldr	r3, [pc, #96]	; (a8f0 <QSPI_N25Q256_exit_xip+0xa4>)
    a890:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    a892:	2100      	movs	r1, #0
    a894:	202a      	movs	r0, #42	; 0x2a
    a896:	4b16      	ldr	r3, [pc, #88]	; (a8f0 <QSPI_N25Q256_exit_xip+0xa4>)
    a898:	4798      	blx	r3

	delay_us(1);
    a89a:	2001      	movs	r0, #1
    a89c:	4b15      	ldr	r3, [pc, #84]	; (a8f4 <QSPI_N25Q256_exit_xip+0xa8>)
    a89e:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    a8a0:	2300      	movs	r3, #0
    a8a2:	607b      	str	r3, [r7, #4]
    a8a4:	e010      	b.n	a8c8 <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    a8a6:	2101      	movs	r1, #1
    a8a8:	202a      	movs	r0, #42	; 0x2a
    a8aa:	4b11      	ldr	r3, [pc, #68]	; (a8f0 <QSPI_N25Q256_exit_xip+0xa4>)
    a8ac:	4798      	blx	r3
		delay_us(1);
    a8ae:	2001      	movs	r0, #1
    a8b0:	4b10      	ldr	r3, [pc, #64]	; (a8f4 <QSPI_N25Q256_exit_xip+0xa8>)
    a8b2:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    a8b4:	2100      	movs	r1, #0
    a8b6:	202a      	movs	r0, #42	; 0x2a
    a8b8:	4b0d      	ldr	r3, [pc, #52]	; (a8f0 <QSPI_N25Q256_exit_xip+0xa4>)
    a8ba:	4798      	blx	r3
		delay_us(1);
    a8bc:	2001      	movs	r0, #1
    a8be:	4b0d      	ldr	r3, [pc, #52]	; (a8f4 <QSPI_N25Q256_exit_xip+0xa8>)
    a8c0:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    a8c2:	687b      	ldr	r3, [r7, #4]
    a8c4:	3301      	adds	r3, #1
    a8c6:	607b      	str	r3, [r7, #4]
    a8c8:	687b      	ldr	r3, [r7, #4]
    a8ca:	2b06      	cmp	r3, #6
    a8cc:	ddeb      	ble.n	a8a6 <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    a8ce:	2101      	movs	r1, #1
    a8d0:	202b      	movs	r0, #43	; 0x2b
    a8d2:	4b07      	ldr	r3, [pc, #28]	; (a8f0 <QSPI_N25Q256_exit_xip+0xa4>)
    a8d4:	4798      	blx	r3
	delay_us(1);
    a8d6:	2001      	movs	r0, #1
    a8d8:	4b06      	ldr	r3, [pc, #24]	; (a8f4 <QSPI_N25Q256_exit_xip+0xa8>)
    a8da:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    a8dc:	4b06      	ldr	r3, [pc, #24]	; (a8f8 <QSPI_N25Q256_exit_xip+0xac>)
    a8de:	4798      	blx	r3
}
    a8e0:	bf00      	nop
    a8e2:	3708      	adds	r7, #8
    a8e4:	46bd      	mov	sp, r7
    a8e6:	bd80      	pop	{r7, pc}
    a8e8:	0000a7bd 	.word	0x0000a7bd
    a8ec:	0000a7dd 	.word	0x0000a7dd
    a8f0:	0000a815 	.word	0x0000a815
    a8f4:	0000199d 	.word	0x0000199d
    a8f8:	00000da9 	.word	0x00000da9

0000a8fc <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    a8fc:	b598      	push	{r3, r4, r7, lr}
    a8fe:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    a900:	4806      	ldr	r0, [pc, #24]	; (a91c <spi_nor_flash_init+0x20>)
    a902:	4b07      	ldr	r3, [pc, #28]	; (a920 <spi_nor_flash_init+0x24>)
    a904:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    a906:	2300      	movs	r3, #0
    a908:	4a06      	ldr	r2, [pc, #24]	; (a924 <spi_nor_flash_init+0x28>)
    a90a:	4904      	ldr	r1, [pc, #16]	; (a91c <spi_nor_flash_init+0x20>)
    a90c:	4806      	ldr	r0, [pc, #24]	; (a928 <spi_nor_flash_init+0x2c>)
    a90e:	4c07      	ldr	r4, [pc, #28]	; (a92c <spi_nor_flash_init+0x30>)
    a910:	47a0      	blx	r4
    a912:	4602      	mov	r2, r0
    a914:	4b06      	ldr	r3, [pc, #24]	; (a930 <spi_nor_flash_init+0x34>)
    a916:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    a918:	bf00      	nop
    a91a:	bd98      	pop	{r3, r4, r7, pc}
    a91c:	20001a28 	.word	0x20001a28
    a920:	00001db1 	.word	0x00001db1
    a924:	0000a84d 	.word	0x0000a84d
    a928:	20000fec 	.word	0x20000fec
    a92c:	0000ad69 	.word	0x0000ad69
    a930:	20001c18 	.word	0x20001c18

0000a934 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    a934:	b580      	push	{r7, lr}
    a936:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    a938:	4805      	ldr	r0, [pc, #20]	; (a950 <cdc_device_acm_init+0x1c>)
    a93a:	4b06      	ldr	r3, [pc, #24]	; (a954 <cdc_device_acm_init+0x20>)
    a93c:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    a93e:	4b06      	ldr	r3, [pc, #24]	; (a958 <cdc_device_acm_init+0x24>)
    a940:	4798      	blx	r3

	usbdc_start(single_desc);
    a942:	4806      	ldr	r0, [pc, #24]	; (a95c <cdc_device_acm_init+0x28>)
    a944:	4b06      	ldr	r3, [pc, #24]	; (a960 <cdc_device_acm_init+0x2c>)
    a946:	4798      	blx	r3
	usbdc_attach();
    a948:	4b06      	ldr	r3, [pc, #24]	; (a964 <cdc_device_acm_init+0x30>)
    a94a:	4798      	blx	r3
}
    a94c:	bf00      	nop
    a94e:	bd80      	pop	{r7, pc}
    a950:	2000103c 	.word	0x2000103c
    a954:	0000c355 	.word	0x0000c355
    a958:	0000b709 	.word	0x0000b709
    a95c:	20000104 	.word	0x20000104
    a960:	0000c3f1 	.word	0x0000c3f1
    a964:	0000c441 	.word	0x0000c441

0000a968 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    a968:	b580      	push	{r7, lr}
    a96a:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    a96c:	4b01      	ldr	r3, [pc, #4]	; (a974 <usb_init+0xc>)
    a96e:	4798      	blx	r3
}
    a970:	bf00      	nop
    a972:	bd80      	pop	{r7, pc}
    a974:	0000a935 	.word	0x0000a935

0000a978 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    a978:	b480      	push	{r7}
    a97a:	b085      	sub	sp, #20
    a97c:	af00      	add	r7, sp, #0
    a97e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    a980:	f3ef 8310 	mrs	r3, PRIMASK
    a984:	60fb      	str	r3, [r7, #12]
  return(result);
    a986:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    a988:	687b      	ldr	r3, [r7, #4]
    a98a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    a98c:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    a98e:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    a992:	bf00      	nop
    a994:	3714      	adds	r7, #20
    a996:	46bd      	mov	sp, r7
    a998:	f85d 7b04 	ldr.w	r7, [sp], #4
    a99c:	4770      	bx	lr

0000a99e <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    a99e:	b480      	push	{r7}
    a9a0:	b085      	sub	sp, #20
    a9a2:	af00      	add	r7, sp, #0
    a9a4:	6078      	str	r0, [r7, #4]
    a9a6:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    a9aa:	687b      	ldr	r3, [r7, #4]
    a9ac:	681b      	ldr	r3, [r3, #0]
    a9ae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    a9b0:	68fb      	ldr	r3, [r7, #12]
    a9b2:	f383 8810 	msr	PRIMASK, r3
}
    a9b6:	bf00      	nop
    a9b8:	3714      	adds	r7, #20
    a9ba:	46bd      	mov	sp, r7
    a9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    a9c0:	4770      	bx	lr
	...

0000a9c4 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    a9c4:	b580      	push	{r7, lr}
    a9c6:	b08c      	sub	sp, #48	; 0x30
    a9c8:	af00      	add	r7, sp, #0
    a9ca:	6078      	str	r0, [r7, #4]
    a9cc:	460b      	mov	r3, r1
    a9ce:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    a9d0:	687b      	ldr	r3, [r7, #4]
    a9d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    a9d4:	687b      	ldr	r3, [r7, #4]
    a9d6:	681b      	ldr	r3, [r3, #0]
    a9d8:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    a9da:	f107 030c 	add.w	r3, r7, #12
    a9de:	2200      	movs	r2, #0
    a9e0:	601a      	str	r2, [r3, #0]
    a9e2:	605a      	str	r2, [r3, #4]
    a9e4:	609a      	str	r2, [r3, #8]
    a9e6:	60da      	str	r2, [r3, #12]
    a9e8:	611a      	str	r2, [r3, #16]
    a9ea:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    a9ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a9ee:	7b1b      	ldrb	r3, [r3, #12]
    a9f0:	2b00      	cmp	r3, #0
    a9f2:	d001      	beq.n	a9f8 <n25q256a_xip_confirm+0x34>
    a9f4:	2206      	movs	r2, #6
    a9f6:	e000      	b.n	a9fa <n25q256a_xip_confirm+0x36>
    a9f8:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    a9fa:	7b3b      	ldrb	r3, [r7, #12]
    a9fc:	f362 0302 	bfi	r3, r2, #0, #3
    aa00:	733b      	strb	r3, [r7, #12]
    aa02:	7b3b      	ldrb	r3, [r7, #12]
    aa04:	f043 0310 	orr.w	r3, r3, #16
    aa08:	733b      	strb	r3, [r7, #12]
    aa0a:	7b3b      	ldrb	r3, [r7, #12]
    aa0c:	f043 0320 	orr.w	r3, r3, #32
    aa10:	733b      	strb	r3, [r7, #12]
    aa12:	7b3b      	ldrb	r3, [r7, #12]
    aa14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    aa18:	733b      	strb	r3, [r7, #12]
    aa1a:	7b3b      	ldrb	r3, [r7, #12]
    aa1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    aa20:	733b      	strb	r3, [r7, #12]
    aa22:	7b7b      	ldrb	r3, [r7, #13]
    aa24:	f043 0303 	orr.w	r3, r3, #3
    aa28:	737b      	strb	r3, [r7, #13]
    aa2a:	7b7b      	ldrb	r3, [r7, #13]
    aa2c:	2201      	movs	r2, #1
    aa2e:	f362 1305 	bfi	r3, r2, #4, #2
    aa32:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    aa34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    aa36:	7b1b      	ldrb	r3, [r3, #12]
    aa38:	2b00      	cmp	r3, #0
    aa3a:	d001      	beq.n	aa40 <n25q256a_xip_confirm+0x7c>
    aa3c:	2208      	movs	r2, #8
    aa3e:	e000      	b.n	aa42 <n25q256a_xip_confirm+0x7e>
    aa40:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    aa42:	7bbb      	ldrb	r3, [r7, #14]
    aa44:	f362 0304 	bfi	r3, r2, #0, #5
    aa48:	73bb      	strb	r3, [r7, #14]
    aa4a:	230b      	movs	r3, #11
    aa4c:	743b      	strb	r3, [r7, #16]
    aa4e:	78fb      	ldrb	r3, [r7, #3]
    aa50:	2b00      	cmp	r3, #0
    aa52:	d001      	beq.n	aa58 <n25q256a_xip_confirm+0x94>
    aa54:	2300      	movs	r3, #0
    aa56:	e000      	b.n	aa5a <n25q256a_xip_confirm+0x96>
    aa58:	23ff      	movs	r3, #255	; 0xff
    aa5a:	747b      	strb	r3, [r7, #17]
    aa5c:	2301      	movs	r3, #1
    aa5e:	61bb      	str	r3, [r7, #24]
    aa60:	f107 0327 	add.w	r3, r7, #39	; 0x27
    aa64:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    aa66:	f107 030c 	add.w	r3, r7, #12
    aa6a:	4619      	mov	r1, r3
    aa6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    aa6e:	4b07      	ldr	r3, [pc, #28]	; (aa8c <n25q256a_xip_confirm+0xc8>)
    aa70:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    aa72:	78fb      	ldrb	r3, [r7, #3]
    aa74:	2b00      	cmp	r3, #0
    aa76:	d001      	beq.n	aa7c <n25q256a_xip_confirm+0xb8>
    aa78:	2202      	movs	r2, #2
    aa7a:	e000      	b.n	aa7e <n25q256a_xip_confirm+0xba>
    aa7c:	2201      	movs	r2, #1
    aa7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    aa80:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    aa82:	2300      	movs	r3, #0
}
    aa84:	4618      	mov	r0, r3
    aa86:	3730      	adds	r7, #48	; 0x30
    aa88:	46bd      	mov	sp, r7
    aa8a:	bd80      	pop	{r7, pc}
    aa8c:	00001e29 	.word	0x00001e29

0000aa90 <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    aa90:	b580      	push	{r7, lr}
    aa92:	b08c      	sub	sp, #48	; 0x30
    aa94:	af00      	add	r7, sp, #0
    aa96:	6078      	str	r0, [r7, #4]
    aa98:	460b      	mov	r3, r1
    aa9a:	70fb      	strb	r3, [r7, #3]
    aa9c:	4613      	mov	r3, r2
    aa9e:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    aaa0:	2300      	movs	r3, #0
    aaa2:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    aaa4:	687b      	ldr	r3, [r7, #4]
    aaa6:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    aaa8:	687b      	ldr	r3, [r7, #4]
    aaaa:	681b      	ldr	r3, [r3, #0]
    aaac:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    aaae:	f107 030c 	add.w	r3, r7, #12
    aab2:	2200      	movs	r2, #0
    aab4:	601a      	str	r2, [r3, #0]
    aab6:	605a      	str	r2, [r3, #4]
    aab8:	609a      	str	r2, [r3, #8]
    aaba:	60da      	str	r2, [r3, #12]
    aabc:	611a      	str	r2, [r3, #16]
    aabe:	615a      	str	r2, [r3, #20]
    aac0:	78fb      	ldrb	r3, [r7, #3]
    aac2:	f003 0307 	and.w	r3, r3, #7
    aac6:	b2da      	uxtb	r2, r3
    aac8:	7b3b      	ldrb	r3, [r7, #12]
    aaca:	f362 0302 	bfi	r3, r2, #0, #3
    aace:	733b      	strb	r3, [r7, #12]
    aad0:	7b3b      	ldrb	r3, [r7, #12]
    aad2:	f043 0310 	orr.w	r3, r3, #16
    aad6:	733b      	strb	r3, [r7, #12]
    aad8:	7b3b      	ldrb	r3, [r7, #12]
    aada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    aade:	733b      	strb	r3, [r7, #12]
    aae0:	78bb      	ldrb	r3, [r7, #2]
    aae2:	743b      	strb	r3, [r7, #16]
    aae4:	2301      	movs	r3, #1
    aae6:	61bb      	str	r3, [r7, #24]
    aae8:	f107 0324 	add.w	r3, r7, #36	; 0x24
    aaec:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    aaee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    aaf0:	7b5b      	ldrb	r3, [r3, #13]
    aaf2:	2b00      	cmp	r3, #0
    aaf4:	d003      	beq.n	aafe <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    aaf6:	2100      	movs	r1, #0
    aaf8:	6878      	ldr	r0, [r7, #4]
    aafa:	4b0a      	ldr	r3, [pc, #40]	; (ab24 <n25q256a_read_reg+0x94>)
    aafc:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    aafe:	f107 030c 	add.w	r3, r7, #12
    ab02:	4619      	mov	r1, r3
    ab04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ab06:	4b08      	ldr	r3, [pc, #32]	; (ab28 <n25q256a_read_reg+0x98>)
    ab08:	4798      	blx	r3
	if (n25q->xip_mode) {
    ab0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ab0c:	7b5b      	ldrb	r3, [r3, #13]
    ab0e:	2b00      	cmp	r3, #0
    ab10:	d003      	beq.n	ab1a <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    ab12:	2101      	movs	r1, #1
    ab14:	6878      	ldr	r0, [r7, #4]
    ab16:	4b03      	ldr	r3, [pc, #12]	; (ab24 <n25q256a_read_reg+0x94>)
    ab18:	4798      	blx	r3
	}
	return status;
    ab1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    ab1c:	4618      	mov	r0, r3
    ab1e:	3730      	adds	r7, #48	; 0x30
    ab20:	46bd      	mov	sp, r7
    ab22:	bd80      	pop	{r7, pc}
    ab24:	0000a9c5 	.word	0x0000a9c5
    ab28:	00001e29 	.word	0x00001e29

0000ab2c <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    ab2c:	b580      	push	{r7, lr}
    ab2e:	b08c      	sub	sp, #48	; 0x30
    ab30:	af00      	add	r7, sp, #0
    ab32:	60f8      	str	r0, [r7, #12]
    ab34:	607b      	str	r3, [r7, #4]
    ab36:	460b      	mov	r3, r1
    ab38:	72fb      	strb	r3, [r7, #11]
    ab3a:	4613      	mov	r3, r2
    ab3c:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    ab3e:	68fb      	ldr	r3, [r7, #12]
    ab40:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    ab42:	68fb      	ldr	r3, [r7, #12]
    ab44:	681b      	ldr	r3, [r3, #0]
    ab46:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    ab48:	f107 0310 	add.w	r3, r7, #16
    ab4c:	2200      	movs	r2, #0
    ab4e:	601a      	str	r2, [r3, #0]
    ab50:	605a      	str	r2, [r3, #4]
    ab52:	609a      	str	r2, [r3, #8]
    ab54:	60da      	str	r2, [r3, #12]
    ab56:	611a      	str	r2, [r3, #16]
    ab58:	615a      	str	r2, [r3, #20]
    ab5a:	7afb      	ldrb	r3, [r7, #11]
    ab5c:	f003 0307 	and.w	r3, r3, #7
    ab60:	b2da      	uxtb	r2, r3
    ab62:	7c3b      	ldrb	r3, [r7, #16]
    ab64:	f362 0302 	bfi	r3, r2, #0, #3
    ab68:	743b      	strb	r3, [r7, #16]
    ab6a:	7c3b      	ldrb	r3, [r7, #16]
    ab6c:	f043 0310 	orr.w	r3, r3, #16
    ab70:	743b      	strb	r3, [r7, #16]
    ab72:	7c3b      	ldrb	r3, [r7, #16]
    ab74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ab78:	743b      	strb	r3, [r7, #16]
    ab7a:	7c7b      	ldrb	r3, [r7, #17]
    ab7c:	2202      	movs	r2, #2
    ab7e:	f362 1305 	bfi	r3, r2, #4, #2
    ab82:	747b      	strb	r3, [r7, #17]
    ab84:	7abb      	ldrb	r3, [r7, #10]
    ab86:	753b      	strb	r3, [r7, #20]
    ab88:	2301      	movs	r3, #1
    ab8a:	61fb      	str	r3, [r7, #28]
    ab8c:	1d3b      	adds	r3, r7, #4
    ab8e:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    ab90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ab92:	7b5b      	ldrb	r3, [r3, #13]
    ab94:	2b00      	cmp	r3, #0
    ab96:	d003      	beq.n	aba0 <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    ab98:	2100      	movs	r1, #0
    ab9a:	68f8      	ldr	r0, [r7, #12]
    ab9c:	4b09      	ldr	r3, [pc, #36]	; (abc4 <n25q256a_write_reg+0x98>)
    ab9e:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    aba0:	f107 0310 	add.w	r3, r7, #16
    aba4:	4619      	mov	r1, r3
    aba6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    aba8:	4b07      	ldr	r3, [pc, #28]	; (abc8 <n25q256a_write_reg+0x9c>)
    abaa:	4798      	blx	r3
	if (n25q->xip_mode) {
    abac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    abae:	7b5b      	ldrb	r3, [r3, #13]
    abb0:	2b00      	cmp	r3, #0
    abb2:	d003      	beq.n	abbc <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    abb4:	2101      	movs	r1, #1
    abb6:	68f8      	ldr	r0, [r7, #12]
    abb8:	4b02      	ldr	r3, [pc, #8]	; (abc4 <n25q256a_write_reg+0x98>)
    abba:	4798      	blx	r3
	}
}
    abbc:	bf00      	nop
    abbe:	3730      	adds	r7, #48	; 0x30
    abc0:	46bd      	mov	sp, r7
    abc2:	bd80      	pop	{r7, pc}
    abc4:	0000a9c5 	.word	0x0000a9c5
    abc8:	00001e29 	.word	0x00001e29

0000abcc <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    abcc:	b580      	push	{r7, lr}
    abce:	b090      	sub	sp, #64	; 0x40
    abd0:	af00      	add	r7, sp, #0
    abd2:	6078      	str	r0, [r7, #4]
    abd4:	460b      	mov	r3, r1
    abd6:	70fb      	strb	r3, [r7, #3]
    abd8:	4613      	mov	r3, r2
    abda:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    abdc:	687b      	ldr	r3, [r7, #4]
    abde:	681b      	ldr	r3, [r3, #0]
    abe0:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    abe2:	78bb      	ldrb	r3, [r7, #2]
    abe4:	2b00      	cmp	r3, #0
    abe6:	d001      	beq.n	abec <n25q256a_write_enable+0x20>
    abe8:	2306      	movs	r3, #6
    abea:	e000      	b.n	abee <n25q256a_write_enable+0x22>
    abec:	2304      	movs	r3, #4
    abee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    abf2:	f107 0320 	add.w	r3, r7, #32
    abf6:	2200      	movs	r2, #0
    abf8:	601a      	str	r2, [r3, #0]
    abfa:	605a      	str	r2, [r3, #4]
    abfc:	609a      	str	r2, [r3, #8]
    abfe:	60da      	str	r2, [r3, #12]
    ac00:	611a      	str	r2, [r3, #16]
    ac02:	615a      	str	r2, [r3, #20]
    ac04:	78fb      	ldrb	r3, [r7, #3]
    ac06:	f003 0307 	and.w	r3, r3, #7
    ac0a:	b2da      	uxtb	r2, r3
    ac0c:	f897 3020 	ldrb.w	r3, [r7, #32]
    ac10:	f362 0302 	bfi	r3, r2, #0, #3
    ac14:	f887 3020 	strb.w	r3, [r7, #32]
    ac18:	f897 3020 	ldrb.w	r3, [r7, #32]
    ac1c:	f043 0310 	orr.w	r3, r3, #16
    ac20:	f887 3020 	strb.w	r3, [r7, #32]
    ac24:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    ac28:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    ac2c:	f107 0308 	add.w	r3, r7, #8
    ac30:	2200      	movs	r2, #0
    ac32:	601a      	str	r2, [r3, #0]
    ac34:	605a      	str	r2, [r3, #4]
    ac36:	609a      	str	r2, [r3, #8]
    ac38:	60da      	str	r2, [r3, #12]
    ac3a:	611a      	str	r2, [r3, #16]
    ac3c:	615a      	str	r2, [r3, #20]
    ac3e:	78fb      	ldrb	r3, [r7, #3]
    ac40:	f003 0307 	and.w	r3, r3, #7
    ac44:	b2da      	uxtb	r2, r3
    ac46:	7a3b      	ldrb	r3, [r7, #8]
    ac48:	f362 0302 	bfi	r3, r2, #0, #3
    ac4c:	723b      	strb	r3, [r7, #8]
    ac4e:	7a3b      	ldrb	r3, [r7, #8]
    ac50:	f043 0310 	orr.w	r3, r3, #16
    ac54:	723b      	strb	r3, [r7, #8]
    ac56:	7a3b      	ldrb	r3, [r7, #8]
    ac58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ac5c:	723b      	strb	r3, [r7, #8]
    ac5e:	2305      	movs	r3, #5
    ac60:	733b      	strb	r3, [r7, #12]
    ac62:	2301      	movs	r3, #1
    ac64:	617b      	str	r3, [r7, #20]
    ac66:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    ac6a:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    ac6c:	f107 0320 	add.w	r3, r7, #32
    ac70:	4619      	mov	r1, r3
    ac72:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    ac74:	4b08      	ldr	r3, [pc, #32]	; (ac98 <n25q256a_write_enable+0xcc>)
    ac76:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    ac78:	f107 0308 	add.w	r3, r7, #8
    ac7c:	4619      	mov	r1, r3
    ac7e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    ac80:	4b05      	ldr	r3, [pc, #20]	; (ac98 <n25q256a_write_enable+0xcc>)
    ac82:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    ac84:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    ac88:	f003 0302 	and.w	r3, r3, #2
    ac8c:	2b00      	cmp	r3, #0
    ac8e:	d0ed      	beq.n	ac6c <n25q256a_write_enable+0xa0>
}
    ac90:	bf00      	nop
    ac92:	3740      	adds	r7, #64	; 0x40
    ac94:	46bd      	mov	sp, r7
    ac96:	bd80      	pop	{r7, pc}
    ac98:	00001e29 	.word	0x00001e29

0000ac9c <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    ac9c:	b590      	push	{r4, r7, lr}
    ac9e:	b087      	sub	sp, #28
    aca0:	af00      	add	r7, sp, #0
    aca2:	6078      	str	r0, [r7, #4]
    aca4:	460b      	mov	r3, r1
    aca6:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    aca8:	687b      	ldr	r3, [r7, #4]
    acaa:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    acac:	68fb      	ldr	r3, [r7, #12]
    acae:	7b1b      	ldrb	r3, [r3, #12]
    acb0:	2b00      	cmp	r3, #0
    acb2:	d001      	beq.n	acb8 <n25q256a_switch_mode+0x1c>
    acb4:	2306      	movs	r3, #6
    acb6:	e000      	b.n	acba <n25q256a_switch_mode+0x1e>
    acb8:	2300      	movs	r3, #0
    acba:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    acbc:	7afb      	ldrb	r3, [r7, #11]
    acbe:	2265      	movs	r2, #101	; 0x65
    acc0:	4619      	mov	r1, r3
    acc2:	6878      	ldr	r0, [r7, #4]
    acc4:	4b25      	ldr	r3, [pc, #148]	; (ad5c <n25q256a_switch_mode+0xc0>)
    acc6:	4798      	blx	r3
    acc8:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    acca:	2300      	movs	r3, #0
    accc:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    acce:	68fb      	ldr	r3, [r7, #12]
    acd0:	7b1b      	ldrb	r3, [r3, #12]
    acd2:	78fa      	ldrb	r2, [r7, #3]
    acd4:	429a      	cmp	r2, r3
    acd6:	d03d      	beq.n	ad54 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    acd8:	78fb      	ldrb	r3, [r7, #3]
    acda:	2b00      	cmp	r3, #0
    acdc:	d00b      	beq.n	acf6 <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    acde:	697b      	ldr	r3, [r7, #20]
    ace0:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ace4:	2b00      	cmp	r3, #0
    ace6:	d011      	beq.n	ad0c <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    ace8:	697b      	ldr	r3, [r7, #20]
    acea:	f003 031f 	and.w	r3, r3, #31
    acee:	617b      	str	r3, [r7, #20]
			modify = 1;
    acf0:	2301      	movs	r3, #1
    acf2:	74fb      	strb	r3, [r7, #19]
    acf4:	e00a      	b.n	ad0c <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    acf6:	697b      	ldr	r3, [r7, #20]
    acf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
    acfc:	2b00      	cmp	r3, #0
    acfe:	d105      	bne.n	ad0c <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    ad00:	697b      	ldr	r3, [r7, #20]
    ad02:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    ad06:	617b      	str	r3, [r7, #20]
			modify = 1;
    ad08:	2301      	movs	r3, #1
    ad0a:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    ad0c:	7cfb      	ldrb	r3, [r7, #19]
    ad0e:	2b00      	cmp	r3, #0
    ad10:	d021      	beq.n	ad56 <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    ad12:	68fb      	ldr	r3, [r7, #12]
    ad14:	78fa      	ldrb	r2, [r7, #3]
    ad16:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    ad18:	7afb      	ldrb	r3, [r7, #11]
    ad1a:	2201      	movs	r2, #1
    ad1c:	4619      	mov	r1, r3
    ad1e:	6878      	ldr	r0, [r7, #4]
    ad20:	4b0f      	ldr	r3, [pc, #60]	; (ad60 <n25q256a_switch_mode+0xc4>)
    ad22:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    ad24:	7af9      	ldrb	r1, [r7, #11]
    ad26:	697b      	ldr	r3, [r7, #20]
    ad28:	2261      	movs	r2, #97	; 0x61
    ad2a:	6878      	ldr	r0, [r7, #4]
    ad2c:	4c0d      	ldr	r4, [pc, #52]	; (ad64 <n25q256a_switch_mode+0xc8>)
    ad2e:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    ad30:	78fb      	ldrb	r3, [r7, #3]
    ad32:	2b00      	cmp	r3, #0
    ad34:	d001      	beq.n	ad3a <n25q256a_switch_mode+0x9e>
    ad36:	2306      	movs	r3, #6
    ad38:	e000      	b.n	ad3c <n25q256a_switch_mode+0xa0>
    ad3a:	2300      	movs	r3, #0
    ad3c:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    ad3e:	7afb      	ldrb	r3, [r7, #11]
    ad40:	2265      	movs	r2, #101	; 0x65
    ad42:	4619      	mov	r1, r3
    ad44:	6878      	ldr	r0, [r7, #4]
    ad46:	4b05      	ldr	r3, [pc, #20]	; (ad5c <n25q256a_switch_mode+0xc0>)
    ad48:	4798      	blx	r3
    ad4a:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    ad4c:	68fb      	ldr	r3, [r7, #12]
    ad4e:	78fa      	ldrb	r2, [r7, #3]
    ad50:	731a      	strb	r2, [r3, #12]
    ad52:	e000      	b.n	ad56 <n25q256a_switch_mode+0xba>
		return;
    ad54:	bf00      	nop
	}
}
    ad56:	371c      	adds	r7, #28
    ad58:	46bd      	mov	sp, r7
    ad5a:	bd90      	pop	{r4, r7, pc}
    ad5c:	0000aa91 	.word	0x0000aa91
    ad60:	0000abcd 	.word	0x0000abcd
    ad64:	0000ab2d 	.word	0x0000ab2d

0000ad68 <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    ad68:	b580      	push	{r7, lr}
    ad6a:	b086      	sub	sp, #24
    ad6c:	af00      	add	r7, sp, #0
    ad6e:	60f8      	str	r0, [r7, #12]
    ad70:	60b9      	str	r1, [r7, #8]
    ad72:	607a      	str	r2, [r7, #4]
    ad74:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    ad76:	68fb      	ldr	r3, [r7, #12]
    ad78:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    ad7a:	4a0c      	ldr	r2, [pc, #48]	; (adac <n25q256a_construct+0x44>)
    ad7c:	68b9      	ldr	r1, [r7, #8]
    ad7e:	68f8      	ldr	r0, [r7, #12]
    ad80:	4b0b      	ldr	r3, [pc, #44]	; (adb0 <n25q256a_construct+0x48>)
    ad82:	4798      	blx	r3
	n25q->quad_mode    = 0;
    ad84:	697b      	ldr	r3, [r7, #20]
    ad86:	2200      	movs	r2, #0
    ad88:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    ad8a:	697b      	ldr	r3, [r7, #20]
    ad8c:	2200      	movs	r2, #0
    ad8e:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    ad90:	697b      	ldr	r3, [r7, #20]
    ad92:	687a      	ldr	r2, [r7, #4]
    ad94:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    ad96:	78fb      	ldrb	r3, [r7, #3]
    ad98:	4619      	mov	r1, r3
    ad9a:	68f8      	ldr	r0, [r7, #12]
    ad9c:	4b05      	ldr	r3, [pc, #20]	; (adb4 <n25q256a_construct+0x4c>)
    ad9e:	4798      	blx	r3
	return me;
    ada0:	68fb      	ldr	r3, [r7, #12]
}
    ada2:	4618      	mov	r0, r3
    ada4:	3718      	adds	r7, #24
    ada6:	46bd      	mov	sp, r7
    ada8:	bd80      	pop	{r7, pc}
    adaa:	bf00      	nop
    adac:	00013240 	.word	0x00013240
    adb0:	0000b245 	.word	0x0000b245
    adb4:	0000ac9d 	.word	0x0000ac9d

0000adb8 <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    adb8:	b580      	push	{r7, lr}
    adba:	b08c      	sub	sp, #48	; 0x30
    adbc:	af00      	add	r7, sp, #0
    adbe:	60f8      	str	r0, [r7, #12]
    adc0:	60b9      	str	r1, [r7, #8]
    adc2:	607a      	str	r2, [r7, #4]
    adc4:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    adc6:	68fb      	ldr	r3, [r7, #12]
    adc8:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    adca:	68fb      	ldr	r3, [r7, #12]
    adcc:	681b      	ldr	r3, [r3, #0]
    adce:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    add0:	f107 0310 	add.w	r3, r7, #16
    add4:	2200      	movs	r2, #0
    add6:	601a      	str	r2, [r3, #0]
    add8:	605a      	str	r2, [r3, #4]
    adda:	609a      	str	r2, [r3, #8]
    addc:	60da      	str	r2, [r3, #12]
    adde:	611a      	str	r2, [r3, #16]
    ade0:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    ade2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ade4:	7b1b      	ldrb	r3, [r3, #12]
    ade6:	2b00      	cmp	r3, #0
    ade8:	d001      	beq.n	adee <n25q256a_read+0x36>
    adea:	2206      	movs	r2, #6
    adec:	e000      	b.n	adf0 <n25q256a_read+0x38>
    adee:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    adf0:	7c3b      	ldrb	r3, [r7, #16]
    adf2:	f362 0302 	bfi	r3, r2, #0, #3
    adf6:	743b      	strb	r3, [r7, #16]
    adf8:	7c3b      	ldrb	r3, [r7, #16]
    adfa:	f043 0310 	orr.w	r3, r3, #16
    adfe:	743b      	strb	r3, [r7, #16]
    ae00:	7c3b      	ldrb	r3, [r7, #16]
    ae02:	f043 0320 	orr.w	r3, r3, #32
    ae06:	743b      	strb	r3, [r7, #16]
    ae08:	7c3b      	ldrb	r3, [r7, #16]
    ae0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ae0e:	743b      	strb	r3, [r7, #16]
    ae10:	7c7b      	ldrb	r3, [r7, #17]
    ae12:	2201      	movs	r2, #1
    ae14:	f362 1305 	bfi	r3, r2, #4, #2
    ae18:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    ae1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ae1c:	7b1b      	ldrb	r3, [r3, #12]
    ae1e:	2b00      	cmp	r3, #0
    ae20:	d001      	beq.n	ae26 <n25q256a_read+0x6e>
    ae22:	220a      	movs	r2, #10
    ae24:	e000      	b.n	ae28 <n25q256a_read+0x70>
    ae26:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    ae28:	7cbb      	ldrb	r3, [r7, #18]
    ae2a:	f362 0304 	bfi	r3, r2, #0, #5
    ae2e:	74bb      	strb	r3, [r7, #18]
    ae30:	230b      	movs	r3, #11
    ae32:	753b      	strb	r3, [r7, #20]
    ae34:	687b      	ldr	r3, [r7, #4]
    ae36:	61bb      	str	r3, [r7, #24]
    ae38:	683b      	ldr	r3, [r7, #0]
    ae3a:	61fb      	str	r3, [r7, #28]
    ae3c:	68bb      	ldr	r3, [r7, #8]
    ae3e:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    ae40:	f107 0310 	add.w	r3, r7, #16
    ae44:	4619      	mov	r1, r3
    ae46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ae48:	4b03      	ldr	r3, [pc, #12]	; (ae58 <n25q256a_read+0xa0>)
    ae4a:	4798      	blx	r3
	return ERR_NONE;
    ae4c:	2300      	movs	r3, #0
}
    ae4e:	4618      	mov	r0, r3
    ae50:	3730      	adds	r7, #48	; 0x30
    ae52:	46bd      	mov	sp, r7
    ae54:	bd80      	pop	{r7, pc}
    ae56:	bf00      	nop
    ae58:	00001e29 	.word	0x00001e29

0000ae5c <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    ae5c:	b580      	push	{r7, lr}
    ae5e:	b08c      	sub	sp, #48	; 0x30
    ae60:	af00      	add	r7, sp, #0
    ae62:	60f8      	str	r0, [r7, #12]
    ae64:	60b9      	str	r1, [r7, #8]
    ae66:	607a      	str	r2, [r7, #4]
    ae68:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    ae6a:	68fb      	ldr	r3, [r7, #12]
    ae6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    ae6e:	68fb      	ldr	r3, [r7, #12]
    ae70:	681b      	ldr	r3, [r3, #0]
    ae72:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    ae74:	f107 0310 	add.w	r3, r7, #16
    ae78:	2200      	movs	r2, #0
    ae7a:	601a      	str	r2, [r3, #0]
    ae7c:	605a      	str	r2, [r3, #4]
    ae7e:	609a      	str	r2, [r3, #8]
    ae80:	60da      	str	r2, [r3, #12]
    ae82:	611a      	str	r2, [r3, #16]
    ae84:	615a      	str	r2, [r3, #20]
    ae86:	7c3b      	ldrb	r3, [r7, #16]
    ae88:	f043 0310 	orr.w	r3, r3, #16
    ae8c:	743b      	strb	r3, [r7, #16]
    ae8e:	7c3b      	ldrb	r3, [r7, #16]
    ae90:	f043 0320 	orr.w	r3, r3, #32
    ae94:	743b      	strb	r3, [r7, #16]
    ae96:	7c3b      	ldrb	r3, [r7, #16]
    ae98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ae9c:	743b      	strb	r3, [r7, #16]
    ae9e:	7c7b      	ldrb	r3, [r7, #17]
    aea0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    aea4:	747b      	strb	r3, [r7, #17]
    aea6:	2302      	movs	r3, #2
    aea8:	753b      	strb	r3, [r7, #20]
    aeaa:	687b      	ldr	r3, [r7, #4]
    aeac:	61bb      	str	r3, [r7, #24]
    aeae:	683b      	ldr	r3, [r7, #0]
    aeb0:	61fb      	str	r3, [r7, #28]
    aeb2:	68bb      	ldr	r3, [r7, #8]
    aeb4:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    aeb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    aeb8:	7b1b      	ldrb	r3, [r3, #12]
    aeba:	2b00      	cmp	r3, #0
    aebc:	d001      	beq.n	aec2 <n25q256a_write+0x66>
    aebe:	2206      	movs	r2, #6
    aec0:	e000      	b.n	aec4 <n25q256a_write+0x68>
    aec2:	2200      	movs	r2, #0
    aec4:	7c3b      	ldrb	r3, [r7, #16]
    aec6:	f362 0302 	bfi	r3, r2, #0, #3
    aeca:	743b      	strb	r3, [r7, #16]
	while (length) {
    aecc:	e035      	b.n	af3a <n25q256a_write+0xde>
		cmd.address = address;
    aece:	687b      	ldr	r3, [r7, #4]
    aed0:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    aed2:	683b      	ldr	r3, [r7, #0]
    aed4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    aed8:	d802      	bhi.n	aee0 <n25q256a_write+0x84>
			cmd.buf_len = length;
    aeda:	683b      	ldr	r3, [r7, #0]
    aedc:	61fb      	str	r3, [r7, #28]
    aede:	e002      	b.n	aee6 <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    aee0:	f44f 7380 	mov.w	r3, #256	; 0x100
    aee4:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    aee6:	7c3b      	ldrb	r3, [r7, #16]
    aee8:	f3c3 0302 	ubfx	r3, r3, #0, #3
    aeec:	b2db      	uxtb	r3, r3
    aeee:	2201      	movs	r2, #1
    aef0:	4619      	mov	r1, r3
    aef2:	68f8      	ldr	r0, [r7, #12]
    aef4:	4b19      	ldr	r3, [pc, #100]	; (af5c <n25q256a_write+0x100>)
    aef6:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    aef8:	f107 0310 	add.w	r3, r7, #16
    aefc:	4619      	mov	r1, r3
    aefe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    af00:	4b17      	ldr	r3, [pc, #92]	; (af60 <n25q256a_write+0x104>)
    af02:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    af04:	bf00      	nop
    af06:	7c3b      	ldrb	r3, [r7, #16]
    af08:	f3c3 0302 	ubfx	r3, r3, #0, #3
    af0c:	b2db      	uxtb	r3, r3
    af0e:	2270      	movs	r2, #112	; 0x70
    af10:	4619      	mov	r1, r3
    af12:	68f8      	ldr	r0, [r7, #12]
    af14:	4b13      	ldr	r3, [pc, #76]	; (af64 <n25q256a_write+0x108>)
    af16:	4798      	blx	r3
    af18:	4603      	mov	r3, r0
    af1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    af1e:	2b00      	cmp	r3, #0
    af20:	d0f1      	beq.n	af06 <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    af22:	6a3a      	ldr	r2, [r7, #32]
    af24:	69fb      	ldr	r3, [r7, #28]
    af26:	4413      	add	r3, r2
    af28:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    af2a:	69fb      	ldr	r3, [r7, #28]
    af2c:	683a      	ldr	r2, [r7, #0]
    af2e:	1ad3      	subs	r3, r2, r3
    af30:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    af32:	69fb      	ldr	r3, [r7, #28]
    af34:	687a      	ldr	r2, [r7, #4]
    af36:	4413      	add	r3, r2
    af38:	607b      	str	r3, [r7, #4]
	while (length) {
    af3a:	683b      	ldr	r3, [r7, #0]
    af3c:	2b00      	cmp	r3, #0
    af3e:	d1c6      	bne.n	aece <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    af40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    af42:	7b5b      	ldrb	r3, [r3, #13]
    af44:	2b00      	cmp	r3, #0
    af46:	d003      	beq.n	af50 <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    af48:	2101      	movs	r1, #1
    af4a:	68f8      	ldr	r0, [r7, #12]
    af4c:	4b06      	ldr	r3, [pc, #24]	; (af68 <n25q256a_write+0x10c>)
    af4e:	4798      	blx	r3
	}
	return ERR_NONE;
    af50:	2300      	movs	r3, #0
}
    af52:	4618      	mov	r0, r3
    af54:	3730      	adds	r7, #48	; 0x30
    af56:	46bd      	mov	sp, r7
    af58:	bd80      	pop	{r7, pc}
    af5a:	bf00      	nop
    af5c:	0000abcd 	.word	0x0000abcd
    af60:	00001e29 	.word	0x00001e29
    af64:	0000aa91 	.word	0x0000aa91
    af68:	0000a9c5 	.word	0x0000a9c5

0000af6c <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    af6c:	b580      	push	{r7, lr}
    af6e:	b090      	sub	sp, #64	; 0x40
    af70:	af00      	add	r7, sp, #0
    af72:	60f8      	str	r0, [r7, #12]
    af74:	60b9      	str	r1, [r7, #8]
    af76:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    af78:	68fb      	ldr	r3, [r7, #12]
    af7a:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    af7c:	68fb      	ldr	r3, [r7, #12]
    af7e:	681b      	ldr	r3, [r3, #0]
    af80:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    af82:	f107 0314 	add.w	r3, r7, #20
    af86:	2200      	movs	r2, #0
    af88:	601a      	str	r2, [r3, #0]
    af8a:	605a      	str	r2, [r3, #4]
    af8c:	609a      	str	r2, [r3, #8]
    af8e:	60da      	str	r2, [r3, #12]
    af90:	611a      	str	r2, [r3, #16]
    af92:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    af94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    af96:	7b1b      	ldrb	r3, [r3, #12]
    af98:	2b00      	cmp	r3, #0
    af9a:	d001      	beq.n	afa0 <n25q256a_erase+0x34>
    af9c:	2206      	movs	r2, #6
    af9e:	e000      	b.n	afa2 <n25q256a_erase+0x36>
    afa0:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    afa2:	7d3b      	ldrb	r3, [r7, #20]
    afa4:	f362 0302 	bfi	r3, r2, #0, #3
    afa8:	753b      	strb	r3, [r7, #20]
    afaa:	7d3b      	ldrb	r3, [r7, #20]
    afac:	f043 0310 	orr.w	r3, r3, #16
    afb0:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    afb2:	687b      	ldr	r3, [r7, #4]
    afb4:	4a56      	ldr	r2, [pc, #344]	; (b110 <n25q256a_erase+0x1a4>)
    afb6:	4293      	cmp	r3, r2
    afb8:	bf94      	ite	ls
    afba:	2301      	movls	r3, #1
    afbc:	2300      	movhi	r3, #0
    afbe:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    afc0:	7d3b      	ldrb	r3, [r7, #20]
    afc2:	f362 1345 	bfi	r3, r2, #5, #1
    afc6:	753b      	strb	r3, [r7, #20]
    afc8:	7d7b      	ldrb	r3, [r7, #21]
    afca:	2202      	movs	r2, #2
    afcc:	f362 1305 	bfi	r3, r2, #4, #2
    afd0:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    afd2:	68bb      	ldr	r3, [r7, #8]
    afd4:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    afd6:	687b      	ldr	r3, [r7, #4]
    afd8:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    afda:	2300      	movs	r3, #0
    afdc:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    afde:	687b      	ldr	r3, [r7, #4]
    afe0:	f3c3 030b 	ubfx	r3, r3, #0, #12
    afe4:	2b00      	cmp	r3, #0
    afe6:	d104      	bne.n	aff2 <n25q256a_erase+0x86>
    afe8:	68bb      	ldr	r3, [r7, #8]
    afea:	f3c3 030b 	ubfx	r3, r3, #0, #12
    afee:	2b00      	cmp	r3, #0
    aff0:	d002      	beq.n	aff8 <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    aff2:	f06f 030c 	mvn.w	r3, #12
    aff6:	e087      	b.n	b108 <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    aff8:	687b      	ldr	r3, [r7, #4]
    affa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    affe:	d368      	bcc.n	b0d2 <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    b000:	23c7      	movs	r3, #199	; 0xc7
    b002:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b004:	7d3b      	ldrb	r3, [r7, #20]
    b006:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b00a:	b2db      	uxtb	r3, r3
    b00c:	2201      	movs	r2, #1
    b00e:	4619      	mov	r1, r3
    b010:	68f8      	ldr	r0, [r7, #12]
    b012:	4b40      	ldr	r3, [pc, #256]	; (b114 <n25q256a_erase+0x1a8>)
    b014:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    b016:	f107 0314 	add.w	r3, r7, #20
    b01a:	4619      	mov	r1, r3
    b01c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b01e:	4b3e      	ldr	r3, [pc, #248]	; (b118 <n25q256a_erase+0x1ac>)
    b020:	4798      	blx	r3
    b022:	e059      	b.n	b0d8 <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    b024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b026:	b29b      	uxth	r3, r3
    b028:	2b00      	cmp	r3, #0
    b02a:	d11f      	bne.n	b06c <n25q256a_erase+0x100>
    b02c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b02e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    b032:	d31b      	bcc.n	b06c <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    b034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b036:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    b038:	23d8      	movs	r3, #216	; 0xd8
    b03a:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b03c:	7d3b      	ldrb	r3, [r7, #20]
    b03e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b042:	b2db      	uxtb	r3, r3
    b044:	2201      	movs	r2, #1
    b046:	4619      	mov	r1, r3
    b048:	68f8      	ldr	r0, [r7, #12]
    b04a:	4b32      	ldr	r3, [pc, #200]	; (b114 <n25q256a_erase+0x1a8>)
    b04c:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    b04e:	f107 0314 	add.w	r3, r7, #20
    b052:	4619      	mov	r1, r3
    b054:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b056:	4b30      	ldr	r3, [pc, #192]	; (b118 <n25q256a_erase+0x1ac>)
    b058:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    b05a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b05c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    b060:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    b062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b064:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    b068:	63bb      	str	r3, [r7, #56]	; 0x38
    b06a:	e023      	b.n	b0b4 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    b06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b06e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    b072:	d31b      	bcc.n	b0ac <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    b074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b076:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    b078:	2320      	movs	r3, #32
    b07a:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b07c:	7d3b      	ldrb	r3, [r7, #20]
    b07e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b082:	b2db      	uxtb	r3, r3
    b084:	2201      	movs	r2, #1
    b086:	4619      	mov	r1, r3
    b088:	68f8      	ldr	r0, [r7, #12]
    b08a:	4b22      	ldr	r3, [pc, #136]	; (b114 <n25q256a_erase+0x1a8>)
    b08c:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    b08e:	f107 0314 	add.w	r3, r7, #20
    b092:	4619      	mov	r1, r3
    b094:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b096:	4b20      	ldr	r3, [pc, #128]	; (b118 <n25q256a_erase+0x1ac>)
    b098:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    b09a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b09c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    b0a0:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    b0a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b0a4:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    b0a8:	63bb      	str	r3, [r7, #56]	; 0x38
    b0aa:	e003      	b.n	b0b4 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    b0ac:	f06f 030c 	mvn.w	r3, #12
    b0b0:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    b0b2:	e011      	b.n	b0d8 <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b0b4:	bf00      	nop
    b0b6:	7d3b      	ldrb	r3, [r7, #20]
    b0b8:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b0bc:	b2db      	uxtb	r3, r3
    b0be:	2270      	movs	r2, #112	; 0x70
    b0c0:	4619      	mov	r1, r3
    b0c2:	68f8      	ldr	r0, [r7, #12]
    b0c4:	4b15      	ldr	r3, [pc, #84]	; (b11c <n25q256a_erase+0x1b0>)
    b0c6:	4798      	blx	r3
    b0c8:	4603      	mov	r3, r0
    b0ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b0ce:	2b00      	cmp	r3, #0
    b0d0:	d0f1      	beq.n	b0b6 <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    b0d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b0d4:	2b00      	cmp	r3, #0
    b0d6:	d1a5      	bne.n	b024 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b0d8:	bf00      	nop
    b0da:	7d3b      	ldrb	r3, [r7, #20]
    b0dc:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b0e0:	b2db      	uxtb	r3, r3
    b0e2:	2270      	movs	r2, #112	; 0x70
    b0e4:	4619      	mov	r1, r3
    b0e6:	68f8      	ldr	r0, [r7, #12]
    b0e8:	4b0c      	ldr	r3, [pc, #48]	; (b11c <n25q256a_erase+0x1b0>)
    b0ea:	4798      	blx	r3
    b0ec:	4603      	mov	r3, r0
    b0ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b0f2:	2b00      	cmp	r3, #0
    b0f4:	d0f1      	beq.n	b0da <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    b0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b0f8:	7b5b      	ldrb	r3, [r3, #13]
    b0fa:	2b00      	cmp	r3, #0
    b0fc:	d003      	beq.n	b106 <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    b0fe:	2101      	movs	r1, #1
    b100:	68f8      	ldr	r0, [r7, #12]
    b102:	4b07      	ldr	r3, [pc, #28]	; (b120 <n25q256a_erase+0x1b4>)
    b104:	4798      	blx	r3
	}
	return rc;
    b106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    b108:	4618      	mov	r0, r3
    b10a:	3740      	adds	r7, #64	; 0x40
    b10c:	46bd      	mov	sp, r7
    b10e:	bd80      	pop	{r7, pc}
    b110:	001fffff 	.word	0x001fffff
    b114:	0000abcd 	.word	0x0000abcd
    b118:	00001e29 	.word	0x00001e29
    b11c:	0000aa91 	.word	0x0000aa91
    b120:	0000a9c5 	.word	0x0000a9c5

0000b124 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    b124:	b590      	push	{r4, r7, lr}
    b126:	b085      	sub	sp, #20
    b128:	af00      	add	r7, sp, #0
    b12a:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    b12c:	687b      	ldr	r3, [r7, #4]
    b12e:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b130:	68fb      	ldr	r3, [r7, #12]
    b132:	7b1b      	ldrb	r3, [r3, #12]
    b134:	2b00      	cmp	r3, #0
    b136:	d001      	beq.n	b13c <n25q256a_enable_xip+0x18>
    b138:	2306      	movs	r3, #6
    b13a:	e000      	b.n	b13e <n25q256a_enable_xip+0x1a>
    b13c:	2300      	movs	r3, #0
    b13e:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    b140:	68fb      	ldr	r3, [r7, #12]
    b142:	7b5b      	ldrb	r3, [r3, #13]
    b144:	2b00      	cmp	r3, #0
    b146:	d129      	bne.n	b19c <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    b148:	7afb      	ldrb	r3, [r7, #11]
    b14a:	2285      	movs	r2, #133	; 0x85
    b14c:	4619      	mov	r1, r3
    b14e:	6878      	ldr	r0, [r7, #4]
    b150:	4b15      	ldr	r3, [pc, #84]	; (b1a8 <n25q256a_enable_xip+0x84>)
    b152:	4798      	blx	r3
    b154:	4603      	mov	r3, r0
    b156:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    b158:	7abb      	ldrb	r3, [r7, #10]
    b15a:	f003 0308 	and.w	r3, r3, #8
    b15e:	2b00      	cmp	r3, #0
    b160:	d015      	beq.n	b18e <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    b162:	7abb      	ldrb	r3, [r7, #10]
    b164:	f023 0308 	bic.w	r3, r3, #8
    b168:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    b16a:	7abb      	ldrb	r3, [r7, #10]
    b16c:	7af9      	ldrb	r1, [r7, #11]
    b16e:	2281      	movs	r2, #129	; 0x81
    b170:	6878      	ldr	r0, [r7, #4]
    b172:	4c0e      	ldr	r4, [pc, #56]	; (b1ac <n25q256a_enable_xip+0x88>)
    b174:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b176:	bf00      	nop
    b178:	7afb      	ldrb	r3, [r7, #11]
    b17a:	2270      	movs	r2, #112	; 0x70
    b17c:	4619      	mov	r1, r3
    b17e:	6878      	ldr	r0, [r7, #4]
    b180:	4b09      	ldr	r3, [pc, #36]	; (b1a8 <n25q256a_enable_xip+0x84>)
    b182:	4798      	blx	r3
    b184:	4603      	mov	r3, r0
    b186:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b18a:	2b00      	cmp	r3, #0
    b18c:	d0f4      	beq.n	b178 <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    b18e:	68fb      	ldr	r3, [r7, #12]
    b190:	2201      	movs	r2, #1
    b192:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    b194:	2101      	movs	r1, #1
    b196:	6878      	ldr	r0, [r7, #4]
    b198:	4b05      	ldr	r3, [pc, #20]	; (b1b0 <n25q256a_enable_xip+0x8c>)
    b19a:	4798      	blx	r3
	}
	return ERR_NONE;
    b19c:	2300      	movs	r3, #0
}
    b19e:	4618      	mov	r0, r3
    b1a0:	3714      	adds	r7, #20
    b1a2:	46bd      	mov	sp, r7
    b1a4:	bd90      	pop	{r4, r7, pc}
    b1a6:	bf00      	nop
    b1a8:	0000aa91 	.word	0x0000aa91
    b1ac:	0000ab2d 	.word	0x0000ab2d
    b1b0:	0000a9c5 	.word	0x0000a9c5

0000b1b4 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    b1b4:	b580      	push	{r7, lr}
    b1b6:	b086      	sub	sp, #24
    b1b8:	af00      	add	r7, sp, #0
    b1ba:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b1bc:	687b      	ldr	r3, [r7, #4]
    b1be:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b1c0:	687b      	ldr	r3, [r7, #4]
    b1c2:	681b      	ldr	r3, [r3, #0]
    b1c4:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b1c6:	697b      	ldr	r3, [r7, #20]
    b1c8:	7b1b      	ldrb	r3, [r3, #12]
    b1ca:	2b00      	cmp	r3, #0
    b1cc:	d001      	beq.n	b1d2 <n25q256a_disable_xip+0x1e>
    b1ce:	2306      	movs	r3, #6
    b1d0:	e000      	b.n	b1d4 <n25q256a_disable_xip+0x20>
    b1d2:	2300      	movs	r3, #0
    b1d4:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    b1d6:	2100      	movs	r1, #0
    b1d8:	6878      	ldr	r0, [r7, #4]
    b1da:	4b15      	ldr	r3, [pc, #84]	; (b230 <n25q256a_disable_xip+0x7c>)
    b1dc:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    b1de:	7bfb      	ldrb	r3, [r7, #15]
    b1e0:	2285      	movs	r2, #133	; 0x85
    b1e2:	4619      	mov	r1, r3
    b1e4:	6878      	ldr	r0, [r7, #4]
    b1e6:	4b13      	ldr	r3, [pc, #76]	; (b234 <n25q256a_disable_xip+0x80>)
    b1e8:	4798      	blx	r3
    b1ea:	4603      	mov	r3, r0
    b1ec:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    b1ee:	7bbb      	ldrb	r3, [r7, #14]
    b1f0:	f003 0308 	and.w	r3, r3, #8
    b1f4:	2b00      	cmp	r3, #0
    b1f6:	d113      	bne.n	b220 <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    b1f8:	697b      	ldr	r3, [r7, #20]
    b1fa:	689b      	ldr	r3, [r3, #8]
    b1fc:	2b00      	cmp	r3, #0
    b1fe:	d00f      	beq.n	b220 <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    b200:	693b      	ldr	r3, [r7, #16]
    b202:	681b      	ldr	r3, [r3, #0]
    b204:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    b206:	6938      	ldr	r0, [r7, #16]
    b208:	4b0b      	ldr	r3, [pc, #44]	; (b238 <n25q256a_disable_xip+0x84>)
    b20a:	4798      	blx	r3
			n25q->pin_exit_xip();
    b20c:	697b      	ldr	r3, [r7, #20]
    b20e:	689b      	ldr	r3, [r3, #8]
    b210:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    b212:	68b9      	ldr	r1, [r7, #8]
    b214:	6938      	ldr	r0, [r7, #16]
    b216:	4b09      	ldr	r3, [pc, #36]	; (b23c <n25q256a_disable_xip+0x88>)
    b218:	4798      	blx	r3
			qspi_sync_enable(descr);
    b21a:	6938      	ldr	r0, [r7, #16]
    b21c:	4b08      	ldr	r3, [pc, #32]	; (b240 <n25q256a_disable_xip+0x8c>)
    b21e:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    b220:	697b      	ldr	r3, [r7, #20]
    b222:	2200      	movs	r2, #0
    b224:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    b226:	2300      	movs	r3, #0
}
    b228:	4618      	mov	r0, r3
    b22a:	3718      	adds	r7, #24
    b22c:	46bd      	mov	sp, r7
    b22e:	bd80      	pop	{r7, pc}
    b230:	0000a9c5 	.word	0x0000a9c5
    b234:	0000aa91 	.word	0x0000aa91
    b238:	00001ded 	.word	0x00001ded
    b23c:	00001d65 	.word	0x00001d65
    b240:	00001db1 	.word	0x00001db1

0000b244 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    b244:	b480      	push	{r7}
    b246:	b085      	sub	sp, #20
    b248:	af00      	add	r7, sp, #0
    b24a:	60f8      	str	r0, [r7, #12]
    b24c:	60b9      	str	r1, [r7, #8]
    b24e:	607a      	str	r2, [r7, #4]
	me->io        = io;
    b250:	68fb      	ldr	r3, [r7, #12]
    b252:	68ba      	ldr	r2, [r7, #8]
    b254:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    b256:	68fb      	ldr	r3, [r7, #12]
    b258:	687a      	ldr	r2, [r7, #4]
    b25a:	605a      	str	r2, [r3, #4]

	return me;
    b25c:	68fb      	ldr	r3, [r7, #12]
}
    b25e:	4618      	mov	r0, r3
    b260:	3714      	adds	r7, #20
    b262:	46bd      	mov	sp, r7
    b264:	f85d 7b04 	ldr.w	r7, [sp], #4
    b268:	4770      	bx	lr

0000b26a <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    b26a:	b480      	push	{r7}
    b26c:	b083      	sub	sp, #12
    b26e:	af00      	add	r7, sp, #0
    b270:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    b272:	687b      	ldr	r3, [r7, #4]
    b274:	781b      	ldrb	r3, [r3, #0]
    b276:	b29a      	uxth	r2, r3
    b278:	687b      	ldr	r3, [r7, #4]
    b27a:	3301      	adds	r3, #1
    b27c:	781b      	ldrb	r3, [r3, #0]
    b27e:	b29b      	uxth	r3, r3
    b280:	021b      	lsls	r3, r3, #8
    b282:	b29b      	uxth	r3, r3
    b284:	4413      	add	r3, r2
    b286:	b29b      	uxth	r3, r3
}
    b288:	4618      	mov	r0, r3
    b28a:	370c      	adds	r7, #12
    b28c:	46bd      	mov	sp, r7
    b28e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b292:	4770      	bx	lr

0000b294 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    b294:	b480      	push	{r7}
    b296:	b083      	sub	sp, #12
    b298:	af00      	add	r7, sp, #0
    b29a:	6078      	str	r0, [r7, #4]
	return desc[0];
    b29c:	687b      	ldr	r3, [r7, #4]
    b29e:	781b      	ldrb	r3, [r3, #0]
}
    b2a0:	4618      	mov	r0, r3
    b2a2:	370c      	adds	r7, #12
    b2a4:	46bd      	mov	sp, r7
    b2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    b2aa:	4770      	bx	lr

0000b2ac <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    b2ac:	b580      	push	{r7, lr}
    b2ae:	b082      	sub	sp, #8
    b2b0:	af00      	add	r7, sp, #0
    b2b2:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    b2b4:	6878      	ldr	r0, [r7, #4]
    b2b6:	4b05      	ldr	r3, [pc, #20]	; (b2cc <usb_desc_next+0x20>)
    b2b8:	4798      	blx	r3
    b2ba:	4603      	mov	r3, r0
    b2bc:	461a      	mov	r2, r3
    b2be:	687b      	ldr	r3, [r7, #4]
    b2c0:	4413      	add	r3, r2
}
    b2c2:	4618      	mov	r0, r3
    b2c4:	3708      	adds	r7, #8
    b2c6:	46bd      	mov	sp, r7
    b2c8:	bd80      	pop	{r7, pc}
    b2ca:	bf00      	nop
    b2cc:	0000b295 	.word	0x0000b295

0000b2d0 <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    b2d0:	b580      	push	{r7, lr}
    b2d2:	b08c      	sub	sp, #48	; 0x30
    b2d4:	af00      	add	r7, sp, #0
    b2d6:	6078      	str	r0, [r7, #4]
    b2d8:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    b2da:	687b      	ldr	r3, [r7, #4]
    b2dc:	689b      	ldr	r3, [r3, #8]
    b2de:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    b2e0:	683b      	ldr	r3, [r7, #0]
    b2e2:	681b      	ldr	r3, [r3, #0]
    b2e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    b2e6:	2300      	movs	r3, #0
    b2e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    b2ec:	e08f      	b.n	b40e <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    b2ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b2f0:	2b00      	cmp	r3, #0
    b2f2:	d102      	bne.n	b2fa <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    b2f4:	f06f 0309 	mvn.w	r3, #9
    b2f8:	e092      	b.n	b420 <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    b2fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b2fc:	789b      	ldrb	r3, [r3, #2]
    b2fe:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    b300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b302:	795b      	ldrb	r3, [r3, #5]
    b304:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    b306:	7c7b      	ldrb	r3, [r7, #17]
    b308:	2b02      	cmp	r3, #2
    b30a:	d002      	beq.n	b312 <cdcdf_acm_enable+0x42>
    b30c:	7c7b      	ldrb	r3, [r7, #17]
    b30e:	2b0a      	cmp	r3, #10
    b310:	d121      	bne.n	b356 <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    b312:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b316:	6a3a      	ldr	r2, [r7, #32]
    b318:	5cd2      	ldrb	r2, [r2, r3]
    b31a:	7bbb      	ldrb	r3, [r7, #14]
    b31c:	429a      	cmp	r2, r3
    b31e:	d102      	bne.n	b326 <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    b320:	f06f 0311 	mvn.w	r3, #17
    b324:	e07c      	b.n	b420 <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    b326:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b32a:	6a3a      	ldr	r2, [r7, #32]
    b32c:	5cd3      	ldrb	r3, [r2, r3]
    b32e:	2bff      	cmp	r3, #255	; 0xff
    b330:	d002      	beq.n	b338 <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    b332:	f06f 031b 	mvn.w	r3, #27
    b336:	e073      	b.n	b420 <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    b338:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b33c:	7bb9      	ldrb	r1, [r7, #14]
    b33e:	6a3a      	ldr	r2, [r7, #32]
    b340:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    b342:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    b344:	683b      	ldr	r3, [r7, #0]
    b346:	685b      	ldr	r3, [r3, #4]
    b348:	2205      	movs	r2, #5
    b34a:	4619      	mov	r1, r3
    b34c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b34e:	4b36      	ldr	r3, [pc, #216]	; (b428 <cdcdf_acm_enable+0x158>)
    b350:	4798      	blx	r3
    b352:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    b354:	e047      	b.n	b3e6 <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    b356:	f06f 0309 	mvn.w	r3, #9
    b35a:	e061      	b.n	b420 <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    b35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b35e:	789b      	ldrb	r3, [r3, #2]
    b360:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    b362:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b364:	78db      	ldrb	r3, [r3, #3]
    b366:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    b368:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b36a:	3304      	adds	r3, #4
    b36c:	4618      	mov	r0, r3
    b36e:	4b2f      	ldr	r3, [pc, #188]	; (b42c <cdcdf_acm_enable+0x15c>)
    b370:	4798      	blx	r3
    b372:	4603      	mov	r3, r0
    b374:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    b376:	7ebb      	ldrb	r3, [r7, #26]
    b378:	7ef9      	ldrb	r1, [r7, #27]
    b37a:	8bba      	ldrh	r2, [r7, #28]
    b37c:	4618      	mov	r0, r3
    b37e:	4b2c      	ldr	r3, [pc, #176]	; (b430 <cdcdf_acm_enable+0x160>)
    b380:	4798      	blx	r3
    b382:	4603      	mov	r3, r0
    b384:	2b00      	cmp	r3, #0
    b386:	d002      	beq.n	b38e <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    b388:	f06f 0313 	mvn.w	r3, #19
    b38c:	e048      	b.n	b420 <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    b38e:	7ebb      	ldrb	r3, [r7, #26]
    b390:	b25b      	sxtb	r3, r3
    b392:	2b00      	cmp	r3, #0
    b394:	da0f      	bge.n	b3b6 <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    b396:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b39a:	7eb9      	ldrb	r1, [r7, #26]
    b39c:	6a3a      	ldr	r2, [r7, #32]
    b39e:	4413      	add	r3, r2
    b3a0:	460a      	mov	r2, r1
    b3a2:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    b3a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b3a8:	6a3a      	ldr	r2, [r7, #32]
    b3aa:	4413      	add	r3, r2
    b3ac:	789b      	ldrb	r3, [r3, #2]
    b3ae:	4618      	mov	r0, r3
    b3b0:	4b20      	ldr	r3, [pc, #128]	; (b434 <cdcdf_acm_enable+0x164>)
    b3b2:	4798      	blx	r3
    b3b4:	e007      	b.n	b3c6 <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    b3b6:	7eba      	ldrb	r2, [r7, #26]
    b3b8:	6a3b      	ldr	r3, [r7, #32]
    b3ba:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    b3bc:	6a3b      	ldr	r3, [r7, #32]
    b3be:	791b      	ldrb	r3, [r3, #4]
    b3c0:	4618      	mov	r0, r3
    b3c2:	4b1c      	ldr	r3, [pc, #112]	; (b434 <cdcdf_acm_enable+0x164>)
    b3c4:	4798      	blx	r3
			}
			desc->sod = ep;
    b3c6:	683b      	ldr	r3, [r7, #0]
    b3c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    b3ca:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    b3cc:	683b      	ldr	r3, [r7, #0]
    b3ce:	681b      	ldr	r3, [r3, #0]
    b3d0:	4618      	mov	r0, r3
    b3d2:	4b19      	ldr	r3, [pc, #100]	; (b438 <cdcdf_acm_enable+0x168>)
    b3d4:	4798      	blx	r3
    b3d6:	4602      	mov	r2, r0
    b3d8:	683b      	ldr	r3, [r7, #0]
    b3da:	685b      	ldr	r3, [r3, #4]
    b3dc:	4619      	mov	r1, r3
    b3de:	4610      	mov	r0, r2
    b3e0:	4b16      	ldr	r3, [pc, #88]	; (b43c <cdcdf_acm_enable+0x16c>)
    b3e2:	4798      	blx	r3
    b3e4:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    b3e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b3e8:	2b00      	cmp	r3, #0
    b3ea:	d1b7      	bne.n	b35c <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    b3ec:	683b      	ldr	r3, [r7, #0]
    b3ee:	681b      	ldr	r3, [r3, #0]
    b3f0:	4618      	mov	r0, r3
    b3f2:	4b11      	ldr	r3, [pc, #68]	; (b438 <cdcdf_acm_enable+0x168>)
    b3f4:	4798      	blx	r3
    b3f6:	683b      	ldr	r3, [r7, #0]
    b3f8:	685b      	ldr	r3, [r3, #4]
    b3fa:	2204      	movs	r2, #4
    b3fc:	4619      	mov	r1, r3
    b3fe:	4b0a      	ldr	r3, [pc, #40]	; (b428 <cdcdf_acm_enable+0x158>)
    b400:	4798      	blx	r3
    b402:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    b404:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b408:	3301      	adds	r3, #1
    b40a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    b40e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b412:	2b01      	cmp	r3, #1
    b414:	f67f af6b 	bls.w	b2ee <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    b418:	4b09      	ldr	r3, [pc, #36]	; (b440 <cdcdf_acm_enable+0x170>)
    b41a:	2201      	movs	r2, #1
    b41c:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    b41e:	2300      	movs	r3, #0
}
    b420:	4618      	mov	r0, r3
    b422:	3730      	adds	r7, #48	; 0x30
    b424:	46bd      	mov	sp, r7
    b426:	bd80      	pop	{r7, pc}
    b428:	0000c555 	.word	0x0000c555
    b42c:	0000b26b 	.word	0x0000b26b
    b430:	00002ac5 	.word	0x00002ac5
    b434:	00002bb1 	.word	0x00002bb1
    b438:	0000b2ad 	.word	0x0000b2ad
    b43c:	0000c5b1 	.word	0x0000c5b1
    b440:	20001088 	.word	0x20001088

0000b444 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    b444:	b580      	push	{r7, lr}
    b446:	b088      	sub	sp, #32
    b448:	af00      	add	r7, sp, #0
    b44a:	6078      	str	r0, [r7, #4]
    b44c:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    b44e:	687b      	ldr	r3, [r7, #4]
    b450:	689b      	ldr	r3, [r3, #8]
    b452:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    b454:	683b      	ldr	r3, [r7, #0]
    b456:	2b00      	cmp	r3, #0
    b458:	d00c      	beq.n	b474 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    b45a:	683b      	ldr	r3, [r7, #0]
    b45c:	681b      	ldr	r3, [r3, #0]
    b45e:	795b      	ldrb	r3, [r3, #5]
    b460:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    b462:	7c7b      	ldrb	r3, [r7, #17]
    b464:	2b02      	cmp	r3, #2
    b466:	d005      	beq.n	b474 <cdcdf_acm_disable+0x30>
    b468:	7c7b      	ldrb	r3, [r7, #17]
    b46a:	2b0a      	cmp	r3, #10
    b46c:	d002      	beq.n	b474 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    b46e:	f06f 0309 	mvn.w	r3, #9
    b472:	e035      	b.n	b4e0 <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    b474:	2300      	movs	r3, #0
    b476:	77fb      	strb	r3, [r7, #31]
    b478:	e01f      	b.n	b4ba <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    b47a:	7ffb      	ldrb	r3, [r7, #31]
    b47c:	69ba      	ldr	r2, [r7, #24]
    b47e:	5cd3      	ldrb	r3, [r2, r3]
    b480:	2bff      	cmp	r3, #255	; 0xff
    b482:	d016      	beq.n	b4b2 <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    b484:	7ffb      	ldrb	r3, [r7, #31]
    b486:	69ba      	ldr	r2, [r7, #24]
    b488:	21ff      	movs	r1, #255	; 0xff
    b48a:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    b48c:	7ffb      	ldrb	r3, [r7, #31]
    b48e:	69ba      	ldr	r2, [r7, #24]
    b490:	4413      	add	r3, r2
    b492:	789b      	ldrb	r3, [r3, #2]
    b494:	2bff      	cmp	r3, #255	; 0xff
    b496:	d00d      	beq.n	b4b4 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    b498:	7ffb      	ldrb	r3, [r7, #31]
    b49a:	69ba      	ldr	r2, [r7, #24]
    b49c:	4413      	add	r3, r2
    b49e:	789b      	ldrb	r3, [r3, #2]
    b4a0:	4618      	mov	r0, r3
    b4a2:	4b11      	ldr	r3, [pc, #68]	; (b4e8 <cdcdf_acm_disable+0xa4>)
    b4a4:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    b4a6:	7ffb      	ldrb	r3, [r7, #31]
    b4a8:	69ba      	ldr	r2, [r7, #24]
    b4aa:	4413      	add	r3, r2
    b4ac:	22ff      	movs	r2, #255	; 0xff
    b4ae:	709a      	strb	r2, [r3, #2]
    b4b0:	e000      	b.n	b4b4 <cdcdf_acm_disable+0x70>
			continue;
    b4b2:	bf00      	nop
	for (i = 0; i < 2; i++) {
    b4b4:	7ffb      	ldrb	r3, [r7, #31]
    b4b6:	3301      	adds	r3, #1
    b4b8:	77fb      	strb	r3, [r7, #31]
    b4ba:	7ffb      	ldrb	r3, [r7, #31]
    b4bc:	2b01      	cmp	r3, #1
    b4be:	d9dc      	bls.n	b47a <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    b4c0:	69bb      	ldr	r3, [r7, #24]
    b4c2:	791b      	ldrb	r3, [r3, #4]
    b4c4:	2bff      	cmp	r3, #255	; 0xff
    b4c6:	d007      	beq.n	b4d8 <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    b4c8:	69bb      	ldr	r3, [r7, #24]
    b4ca:	791b      	ldrb	r3, [r3, #4]
    b4cc:	4618      	mov	r0, r3
    b4ce:	4b06      	ldr	r3, [pc, #24]	; (b4e8 <cdcdf_acm_disable+0xa4>)
    b4d0:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    b4d2:	69bb      	ldr	r3, [r7, #24]
    b4d4:	22ff      	movs	r2, #255	; 0xff
    b4d6:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    b4d8:	4b04      	ldr	r3, [pc, #16]	; (b4ec <cdcdf_acm_disable+0xa8>)
    b4da:	2200      	movs	r2, #0
    b4dc:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    b4de:	2300      	movs	r3, #0
}
    b4e0:	4618      	mov	r0, r3
    b4e2:	3720      	adds	r7, #32
    b4e4:	46bd      	mov	sp, r7
    b4e6:	bd80      	pop	{r7, pc}
    b4e8:	00002b61 	.word	0x00002b61
    b4ec:	20001088 	.word	0x20001088

0000b4f0 <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    b4f0:	b580      	push	{r7, lr}
    b4f2:	b084      	sub	sp, #16
    b4f4:	af00      	add	r7, sp, #0
    b4f6:	60f8      	str	r0, [r7, #12]
    b4f8:	460b      	mov	r3, r1
    b4fa:	607a      	str	r2, [r7, #4]
    b4fc:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    b4fe:	7afb      	ldrb	r3, [r7, #11]
    b500:	2b01      	cmp	r3, #1
    b502:	d009      	beq.n	b518 <cdcdf_acm_ctrl+0x28>
    b504:	2b02      	cmp	r3, #2
    b506:	d00d      	beq.n	b524 <cdcdf_acm_ctrl+0x34>
    b508:	2b00      	cmp	r3, #0
    b50a:	d10e      	bne.n	b52a <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    b50c:	6879      	ldr	r1, [r7, #4]
    b50e:	68f8      	ldr	r0, [r7, #12]
    b510:	4b09      	ldr	r3, [pc, #36]	; (b538 <cdcdf_acm_ctrl+0x48>)
    b512:	4798      	blx	r3
    b514:	4603      	mov	r3, r0
    b516:	e00a      	b.n	b52e <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    b518:	6879      	ldr	r1, [r7, #4]
    b51a:	68f8      	ldr	r0, [r7, #12]
    b51c:	4b07      	ldr	r3, [pc, #28]	; (b53c <cdcdf_acm_ctrl+0x4c>)
    b51e:	4798      	blx	r3
    b520:	4603      	mov	r3, r0
    b522:	e004      	b.n	b52e <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    b524:	f06f 031a 	mvn.w	r3, #26
    b528:	e001      	b.n	b52e <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    b52a:	f06f 030c 	mvn.w	r3, #12
	}
}
    b52e:	4618      	mov	r0, r3
    b530:	3710      	adds	r7, #16
    b532:	46bd      	mov	sp, r7
    b534:	bd80      	pop	{r7, pc}
    b536:	bf00      	nop
    b538:	0000b2d1 	.word	0x0000b2d1
    b53c:	0000b445 	.word	0x0000b445

0000b540 <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    b540:	b590      	push	{r4, r7, lr}
    b542:	b087      	sub	sp, #28
    b544:	af00      	add	r7, sp, #0
    b546:	4603      	mov	r3, r0
    b548:	6039      	str	r1, [r7, #0]
    b54a:	71fb      	strb	r3, [r7, #7]
    b54c:	4613      	mov	r3, r2
    b54e:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    b550:	683b      	ldr	r3, [r7, #0]
    b552:	799a      	ldrb	r2, [r3, #6]
    b554:	79db      	ldrb	r3, [r3, #7]
    b556:	021b      	lsls	r3, r3, #8
    b558:	4313      	orrs	r3, r2
    b55a:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    b55c:	4b2b      	ldr	r3, [pc, #172]	; (b60c <cdcdf_acm_set_req+0xcc>)
    b55e:	4798      	blx	r3
    b560:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    b562:	683b      	ldr	r3, [r7, #0]
    b564:	785b      	ldrb	r3, [r3, #1]
    b566:	2b20      	cmp	r3, #32
    b568:	d002      	beq.n	b570 <cdcdf_acm_set_req+0x30>
    b56a:	2b22      	cmp	r3, #34	; 0x22
    b56c:	d034      	beq.n	b5d8 <cdcdf_acm_set_req+0x98>
    b56e:	e046      	b.n	b5fe <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    b570:	8afb      	ldrh	r3, [r7, #22]
    b572:	2b07      	cmp	r3, #7
    b574:	d002      	beq.n	b57c <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    b576:	f04f 33ff 	mov.w	r3, #4294967295
    b57a:	e042      	b.n	b602 <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    b57c:	79bb      	ldrb	r3, [r7, #6]
    b57e:	2b00      	cmp	r3, #0
    b580:	d107      	bne.n	b592 <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    b582:	8afa      	ldrh	r2, [r7, #22]
    b584:	79f8      	ldrb	r0, [r7, #7]
    b586:	2300      	movs	r3, #0
    b588:	6939      	ldr	r1, [r7, #16]
    b58a:	4c21      	ldr	r4, [pc, #132]	; (b610 <cdcdf_acm_set_req+0xd0>)
    b58c:	47a0      	blx	r4
    b58e:	4603      	mov	r3, r0
    b590:	e037      	b.n	b602 <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    b592:	693a      	ldr	r2, [r7, #16]
    b594:	f107 0308 	add.w	r3, r7, #8
    b598:	6810      	ldr	r0, [r2, #0]
    b59a:	6018      	str	r0, [r3, #0]
    b59c:	8891      	ldrh	r1, [r2, #4]
    b59e:	7992      	ldrb	r2, [r2, #6]
    b5a0:	8099      	strh	r1, [r3, #4]
    b5a2:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    b5a4:	4b1b      	ldr	r3, [pc, #108]	; (b614 <cdcdf_acm_set_req+0xd4>)
    b5a6:	681b      	ldr	r3, [r3, #0]
    b5a8:	2b00      	cmp	r3, #0
    b5aa:	d008      	beq.n	b5be <cdcdf_acm_set_req+0x7e>
    b5ac:	4b19      	ldr	r3, [pc, #100]	; (b614 <cdcdf_acm_set_req+0xd4>)
    b5ae:	681b      	ldr	r3, [r3, #0]
    b5b0:	f107 0208 	add.w	r2, r7, #8
    b5b4:	4610      	mov	r0, r2
    b5b6:	4798      	blx	r3
    b5b8:	4603      	mov	r3, r0
    b5ba:	2b00      	cmp	r3, #0
    b5bc:	d00a      	beq.n	b5d4 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    b5be:	4b16      	ldr	r3, [pc, #88]	; (b618 <cdcdf_acm_set_req+0xd8>)
    b5c0:	f107 0208 	add.w	r2, r7, #8
    b5c4:	e892 0003 	ldmia.w	r2, {r0, r1}
    b5c8:	6018      	str	r0, [r3, #0]
    b5ca:	3304      	adds	r3, #4
    b5cc:	8019      	strh	r1, [r3, #0]
    b5ce:	3302      	adds	r3, #2
    b5d0:	0c0a      	lsrs	r2, r1, #16
    b5d2:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    b5d4:	2300      	movs	r3, #0
    b5d6:	e014      	b.n	b602 <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    b5d8:	2300      	movs	r3, #0
    b5da:	2200      	movs	r2, #0
    b5dc:	2100      	movs	r1, #0
    b5de:	2000      	movs	r0, #0
    b5e0:	4c0b      	ldr	r4, [pc, #44]	; (b610 <cdcdf_acm_set_req+0xd0>)
    b5e2:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    b5e4:	4b0d      	ldr	r3, [pc, #52]	; (b61c <cdcdf_acm_set_req+0xdc>)
    b5e6:	681b      	ldr	r3, [r3, #0]
    b5e8:	2b00      	cmp	r3, #0
    b5ea:	d006      	beq.n	b5fa <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    b5ec:	4b0b      	ldr	r3, [pc, #44]	; (b61c <cdcdf_acm_set_req+0xdc>)
    b5ee:	681b      	ldr	r3, [r3, #0]
    b5f0:	683a      	ldr	r2, [r7, #0]
    b5f2:	8852      	ldrh	r2, [r2, #2]
    b5f4:	b292      	uxth	r2, r2
    b5f6:	4610      	mov	r0, r2
    b5f8:	4798      	blx	r3
		}
		return ERR_NONE;
    b5fa:	2300      	movs	r3, #0
    b5fc:	e001      	b.n	b602 <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    b5fe:	f06f 030c 	mvn.w	r3, #12
	}
}
    b602:	4618      	mov	r0, r3
    b604:	371c      	adds	r7, #28
    b606:	46bd      	mov	sp, r7
    b608:	bd90      	pop	{r4, r7, pc}
    b60a:	bf00      	nop
    b60c:	0000c451 	.word	0x0000c451
    b610:	0000c2c5 	.word	0x0000c2c5
    b614:	2000109c 	.word	0x2000109c
    b618:	20001090 	.word	0x20001090
    b61c:	20001098 	.word	0x20001098

0000b620 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    b620:	b590      	push	{r4, r7, lr}
    b622:	b085      	sub	sp, #20
    b624:	af00      	add	r7, sp, #0
    b626:	4603      	mov	r3, r0
    b628:	6039      	str	r1, [r7, #0]
    b62a:	71fb      	strb	r3, [r7, #7]
    b62c:	4613      	mov	r3, r2
    b62e:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    b630:	683b      	ldr	r3, [r7, #0]
    b632:	799a      	ldrb	r2, [r3, #6]
    b634:	79db      	ldrb	r3, [r3, #7]
    b636:	021b      	lsls	r3, r3, #8
    b638:	4313      	orrs	r3, r2
    b63a:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    b63c:	79bb      	ldrb	r3, [r7, #6]
    b63e:	2b01      	cmp	r3, #1
    b640:	d101      	bne.n	b646 <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    b642:	2300      	movs	r3, #0
    b644:	e013      	b.n	b66e <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    b646:	683b      	ldr	r3, [r7, #0]
    b648:	785b      	ldrb	r3, [r3, #1]
    b64a:	2b21      	cmp	r3, #33	; 0x21
    b64c:	d10d      	bne.n	b66a <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    b64e:	89fb      	ldrh	r3, [r7, #14]
    b650:	2b07      	cmp	r3, #7
    b652:	d002      	beq.n	b65a <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    b654:	f04f 33ff 	mov.w	r3, #4294967295
    b658:	e009      	b.n	b66e <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    b65a:	89fa      	ldrh	r2, [r7, #14]
    b65c:	79f8      	ldrb	r0, [r7, #7]
    b65e:	2300      	movs	r3, #0
    b660:	4905      	ldr	r1, [pc, #20]	; (b678 <cdcdf_acm_get_req+0x58>)
    b662:	4c06      	ldr	r4, [pc, #24]	; (b67c <cdcdf_acm_get_req+0x5c>)
    b664:	47a0      	blx	r4
    b666:	4603      	mov	r3, r0
    b668:	e001      	b.n	b66e <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    b66a:	f06f 030c 	mvn.w	r3, #12
	}
}
    b66e:	4618      	mov	r0, r3
    b670:	3714      	adds	r7, #20
    b672:	46bd      	mov	sp, r7
    b674:	bd90      	pop	{r4, r7, pc}
    b676:	bf00      	nop
    b678:	20001090 	.word	0x20001090
    b67c:	0000c2c5 	.word	0x0000c2c5

0000b680 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    b680:	b580      	push	{r7, lr}
    b682:	b082      	sub	sp, #8
    b684:	af00      	add	r7, sp, #0
    b686:	4603      	mov	r3, r0
    b688:	6039      	str	r1, [r7, #0]
    b68a:	71fb      	strb	r3, [r7, #7]
    b68c:	4613      	mov	r3, r2
    b68e:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    b690:	683b      	ldr	r3, [r7, #0]
    b692:	781b      	ldrb	r3, [r3, #0]
    b694:	095b      	lsrs	r3, r3, #5
    b696:	b2db      	uxtb	r3, r3
    b698:	f003 0303 	and.w	r3, r3, #3
    b69c:	2b01      	cmp	r3, #1
    b69e:	d002      	beq.n	b6a6 <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    b6a0:	f06f 0309 	mvn.w	r3, #9
    b6a4:	e026      	b.n	b6f4 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    b6a6:	683b      	ldr	r3, [r7, #0]
    b6a8:	889b      	ldrh	r3, [r3, #4]
    b6aa:	b29a      	uxth	r2, r3
    b6ac:	4b13      	ldr	r3, [pc, #76]	; (b6fc <cdcdf_acm_req+0x7c>)
    b6ae:	781b      	ldrb	r3, [r3, #0]
    b6b0:	b29b      	uxth	r3, r3
    b6b2:	429a      	cmp	r2, r3
    b6b4:	d007      	beq.n	b6c6 <cdcdf_acm_req+0x46>
    b6b6:	683b      	ldr	r3, [r7, #0]
    b6b8:	889b      	ldrh	r3, [r3, #4]
    b6ba:	b29a      	uxth	r2, r3
    b6bc:	4b0f      	ldr	r3, [pc, #60]	; (b6fc <cdcdf_acm_req+0x7c>)
    b6be:	785b      	ldrb	r3, [r3, #1]
    b6c0:	b29b      	uxth	r3, r3
    b6c2:	429a      	cmp	r2, r3
    b6c4:	d114      	bne.n	b6f0 <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    b6c6:	683b      	ldr	r3, [r7, #0]
    b6c8:	781b      	ldrb	r3, [r3, #0]
    b6ca:	b25b      	sxtb	r3, r3
    b6cc:	2b00      	cmp	r3, #0
    b6ce:	da07      	bge.n	b6e0 <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    b6d0:	79ba      	ldrb	r2, [r7, #6]
    b6d2:	79fb      	ldrb	r3, [r7, #7]
    b6d4:	6839      	ldr	r1, [r7, #0]
    b6d6:	4618      	mov	r0, r3
    b6d8:	4b09      	ldr	r3, [pc, #36]	; (b700 <cdcdf_acm_req+0x80>)
    b6da:	4798      	blx	r3
    b6dc:	4603      	mov	r3, r0
    b6de:	e009      	b.n	b6f4 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    b6e0:	79ba      	ldrb	r2, [r7, #6]
    b6e2:	79fb      	ldrb	r3, [r7, #7]
    b6e4:	6839      	ldr	r1, [r7, #0]
    b6e6:	4618      	mov	r0, r3
    b6e8:	4b06      	ldr	r3, [pc, #24]	; (b704 <cdcdf_acm_req+0x84>)
    b6ea:	4798      	blx	r3
    b6ec:	4603      	mov	r3, r0
    b6ee:	e001      	b.n	b6f4 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    b6f0:	f06f 0309 	mvn.w	r3, #9
	}
}
    b6f4:	4618      	mov	r0, r3
    b6f6:	3708      	adds	r7, #8
    b6f8:	46bd      	mov	sp, r7
    b6fa:	bd80      	pop	{r7, pc}
    b6fc:	20001088 	.word	0x20001088
    b700:	0000b621 	.word	0x0000b621
    b704:	0000b541 	.word	0x0000b541

0000b708 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    b708:	b580      	push	{r7, lr}
    b70a:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    b70c:	4b0b      	ldr	r3, [pc, #44]	; (b73c <cdcdf_acm_init+0x34>)
    b70e:	4798      	blx	r3
    b710:	4603      	mov	r3, r0
    b712:	2b01      	cmp	r3, #1
    b714:	d902      	bls.n	b71c <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    b716:	f06f 0310 	mvn.w	r3, #16
    b71a:	e00d      	b.n	b738 <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    b71c:	4b08      	ldr	r3, [pc, #32]	; (b740 <cdcdf_acm_init+0x38>)
    b71e:	4a09      	ldr	r2, [pc, #36]	; (b744 <cdcdf_acm_init+0x3c>)
    b720:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    b722:	4b07      	ldr	r3, [pc, #28]	; (b740 <cdcdf_acm_init+0x38>)
    b724:	4a08      	ldr	r2, [pc, #32]	; (b748 <cdcdf_acm_init+0x40>)
    b726:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    b728:	4805      	ldr	r0, [pc, #20]	; (b740 <cdcdf_acm_init+0x38>)
    b72a:	4b08      	ldr	r3, [pc, #32]	; (b74c <cdcdf_acm_init+0x44>)
    b72c:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    b72e:	4908      	ldr	r1, [pc, #32]	; (b750 <cdcdf_acm_init+0x48>)
    b730:	2001      	movs	r0, #1
    b732:	4b08      	ldr	r3, [pc, #32]	; (b754 <cdcdf_acm_init+0x4c>)
    b734:	4798      	blx	r3
	return ERR_NONE;
    b736:	2300      	movs	r3, #0
}
    b738:	4618      	mov	r0, r3
    b73a:	bd80      	pop	{r7, pc}
    b73c:	0000c469 	.word	0x0000c469
    b740:	2000107c 	.word	0x2000107c
    b744:	0000b4f1 	.word	0x0000b4f1
    b748:	20001088 	.word	0x20001088
    b74c:	0000c3d1 	.word	0x0000c3d1
    b750:	2000010c 	.word	0x2000010c
    b754:	0000c301 	.word	0x0000c301

0000b758 <usb_get_u16>:
{
    b758:	b480      	push	{r7}
    b75a:	b083      	sub	sp, #12
    b75c:	af00      	add	r7, sp, #0
    b75e:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    b760:	687b      	ldr	r3, [r7, #4]
    b762:	781b      	ldrb	r3, [r3, #0]
    b764:	b29a      	uxth	r2, r3
    b766:	687b      	ldr	r3, [r7, #4]
    b768:	3301      	adds	r3, #1
    b76a:	781b      	ldrb	r3, [r3, #0]
    b76c:	b29b      	uxth	r3, r3
    b76e:	021b      	lsls	r3, r3, #8
    b770:	b29b      	uxth	r3, r3
    b772:	4413      	add	r3, r2
    b774:	b29b      	uxth	r3, r3
}
    b776:	4618      	mov	r0, r3
    b778:	370c      	adds	r7, #12
    b77a:	46bd      	mov	sp, r7
    b77c:	f85d 7b04 	ldr.w	r7, [sp], #4
    b780:	4770      	bx	lr

0000b782 <usb_desc_len>:
{
    b782:	b480      	push	{r7}
    b784:	b083      	sub	sp, #12
    b786:	af00      	add	r7, sp, #0
    b788:	6078      	str	r0, [r7, #4]
	return desc[0];
    b78a:	687b      	ldr	r3, [r7, #4]
    b78c:	781b      	ldrb	r3, [r3, #0]
}
    b78e:	4618      	mov	r0, r3
    b790:	370c      	adds	r7, #12
    b792:	46bd      	mov	sp, r7
    b794:	f85d 7b04 	ldr.w	r7, [sp], #4
    b798:	4770      	bx	lr
	...

0000b79c <usb_desc_next>:
{
    b79c:	b580      	push	{r7, lr}
    b79e:	b082      	sub	sp, #8
    b7a0:	af00      	add	r7, sp, #0
    b7a2:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    b7a4:	6878      	ldr	r0, [r7, #4]
    b7a6:	4b05      	ldr	r3, [pc, #20]	; (b7bc <usb_desc_next+0x20>)
    b7a8:	4798      	blx	r3
    b7aa:	4603      	mov	r3, r0
    b7ac:	461a      	mov	r2, r3
    b7ae:	687b      	ldr	r3, [r7, #4]
    b7b0:	4413      	add	r3, r2
}
    b7b2:	4618      	mov	r0, r3
    b7b4:	3708      	adds	r7, #8
    b7b6:	46bd      	mov	sp, r7
    b7b8:	bd80      	pop	{r7, pc}
    b7ba:	bf00      	nop
    b7bc:	0000b783 	.word	0x0000b783

0000b7c0 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    b7c0:	b580      	push	{r7, lr}
    b7c2:	b082      	sub	sp, #8
    b7c4:	af00      	add	r7, sp, #0
    b7c6:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    b7c8:	687b      	ldr	r3, [r7, #4]
    b7ca:	3302      	adds	r3, #2
    b7cc:	4618      	mov	r0, r3
    b7ce:	4b03      	ldr	r3, [pc, #12]	; (b7dc <usb_cfg_desc_total_len+0x1c>)
    b7d0:	4798      	blx	r3
    b7d2:	4603      	mov	r3, r0
}
    b7d4:	4618      	mov	r0, r3
    b7d6:	3708      	adds	r7, #8
    b7d8:	46bd      	mov	sp, r7
    b7da:	bd80      	pop	{r7, pc}
    b7dc:	0000b759 	.word	0x0000b759

0000b7e0 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    b7e0:	b590      	push	{r4, r7, lr}
    b7e2:	b085      	sub	sp, #20
    b7e4:	af00      	add	r7, sp, #0
    b7e6:	4603      	mov	r3, r0
    b7e8:	6039      	str	r1, [r7, #0]
    b7ea:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    b7ec:	2300      	movs	r3, #0
    b7ee:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    b7f0:	683b      	ldr	r3, [r7, #0]
    b7f2:	799a      	ldrb	r2, [r3, #6]
    b7f4:	79db      	ldrb	r3, [r3, #7]
    b7f6:	021b      	lsls	r3, r3, #8
    b7f8:	4313      	orrs	r3, r2
    b7fa:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    b7fc:	897b      	ldrh	r3, [r7, #10]
    b7fe:	2b12      	cmp	r3, #18
    b800:	d901      	bls.n	b806 <usbdc_get_dev_desc+0x26>
		length = 0x12;
    b802:	2312      	movs	r3, #18
    b804:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    b806:	68fb      	ldr	r3, [r7, #12]
    b808:	2b00      	cmp	r3, #0
    b80a:	d10a      	bne.n	b822 <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    b80c:	4b0f      	ldr	r3, [pc, #60]	; (b84c <usbdc_get_dev_desc+0x6c>)
    b80e:	681b      	ldr	r3, [r3, #0]
    b810:	6818      	ldr	r0, [r3, #0]
    b812:	4b0e      	ldr	r3, [pc, #56]	; (b84c <usbdc_get_dev_desc+0x6c>)
    b814:	681b      	ldr	r3, [r3, #0]
    b816:	685b      	ldr	r3, [r3, #4]
    b818:	2201      	movs	r2, #1
    b81a:	4619      	mov	r1, r3
    b81c:	4b0c      	ldr	r3, [pc, #48]	; (b850 <usbdc_get_dev_desc+0x70>)
    b81e:	4798      	blx	r3
    b820:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    b822:	68fb      	ldr	r3, [r7, #12]
    b824:	2b00      	cmp	r3, #0
    b826:	d101      	bne.n	b82c <usbdc_get_dev_desc+0x4c>
		return false;
    b828:	2300      	movs	r3, #0
    b82a:	e00b      	b.n	b844 <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    b82c:	897a      	ldrh	r2, [r7, #10]
    b82e:	79f8      	ldrb	r0, [r7, #7]
    b830:	2300      	movs	r3, #0
    b832:	68f9      	ldr	r1, [r7, #12]
    b834:	4c07      	ldr	r4, [pc, #28]	; (b854 <usbdc_get_dev_desc+0x74>)
    b836:	47a0      	blx	r4
    b838:	4603      	mov	r3, r0
    b83a:	2b00      	cmp	r3, #0
    b83c:	d001      	beq.n	b842 <usbdc_get_dev_desc+0x62>
		return false;
    b83e:	2300      	movs	r3, #0
    b840:	e000      	b.n	b844 <usbdc_get_dev_desc+0x64>
	}
	return true;
    b842:	2301      	movs	r3, #1
}
    b844:	4618      	mov	r0, r3
    b846:	3714      	adds	r7, #20
    b848:	46bd      	mov	sp, r7
    b84a:	bd90      	pop	{r4, r7, pc}
    b84c:	200010a0 	.word	0x200010a0
    b850:	0000c555 	.word	0x0000c555
    b854:	0000c2c5 	.word	0x0000c2c5

0000b858 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    b858:	b590      	push	{r4, r7, lr}
    b85a:	b087      	sub	sp, #28
    b85c:	af00      	add	r7, sp, #0
    b85e:	4603      	mov	r3, r0
    b860:	6039      	str	r1, [r7, #0]
    b862:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    b864:	2300      	movs	r3, #0
    b866:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    b868:	683b      	ldr	r3, [r7, #0]
    b86a:	799a      	ldrb	r2, [r3, #6]
    b86c:	79db      	ldrb	r3, [r3, #7]
    b86e:	021b      	lsls	r3, r3, #8
    b870:	4313      	orrs	r3, r2
    b872:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    b874:	683b      	ldr	r3, [r7, #0]
    b876:	885b      	ldrh	r3, [r3, #2]
    b878:	b29b      	uxth	r3, r3
    b87a:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    b87c:	8a7a      	ldrh	r2, [r7, #18]
    b87e:	4b1e      	ldr	r3, [pc, #120]	; (b8f8 <usbdc_get_cfg_desc+0xa0>)
    b880:	7f1b      	ldrb	r3, [r3, #28]
    b882:	3b01      	subs	r3, #1
    b884:	4013      	ands	r3, r2
    b886:	2b00      	cmp	r3, #0
    b888:	bf0c      	ite	eq
    b88a:	2301      	moveq	r3, #1
    b88c:	2300      	movne	r3, #0
    b88e:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    b890:	697b      	ldr	r3, [r7, #20]
    b892:	2b00      	cmp	r3, #0
    b894:	d10c      	bne.n	b8b0 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    b896:	4b18      	ldr	r3, [pc, #96]	; (b8f8 <usbdc_get_cfg_desc+0xa0>)
    b898:	681b      	ldr	r3, [r3, #0]
    b89a:	6818      	ldr	r0, [r3, #0]
    b89c:	4b16      	ldr	r3, [pc, #88]	; (b8f8 <usbdc_get_cfg_desc+0xa0>)
    b89e:	681b      	ldr	r3, [r3, #0]
    b8a0:	6859      	ldr	r1, [r3, #4]
    b8a2:	7c3b      	ldrb	r3, [r7, #16]
    b8a4:	3301      	adds	r3, #1
    b8a6:	b2db      	uxtb	r3, r3
    b8a8:	461a      	mov	r2, r3
    b8aa:	4b14      	ldr	r3, [pc, #80]	; (b8fc <usbdc_get_cfg_desc+0xa4>)
    b8ac:	4798      	blx	r3
    b8ae:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    b8b0:	697b      	ldr	r3, [r7, #20]
    b8b2:	2b00      	cmp	r3, #0
    b8b4:	d101      	bne.n	b8ba <usbdc_get_cfg_desc+0x62>
		return false;
    b8b6:	2300      	movs	r3, #0
    b8b8:	e019      	b.n	b8ee <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    b8ba:	6978      	ldr	r0, [r7, #20]
    b8bc:	4b10      	ldr	r3, [pc, #64]	; (b900 <usbdc_get_cfg_desc+0xa8>)
    b8be:	4798      	blx	r3
    b8c0:	4603      	mov	r3, r0
    b8c2:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    b8c4:	8a7a      	ldrh	r2, [r7, #18]
    b8c6:	89fb      	ldrh	r3, [r7, #14]
    b8c8:	429a      	cmp	r2, r3
    b8ca:	d802      	bhi.n	b8d2 <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    b8cc:	2300      	movs	r3, #0
    b8ce:	747b      	strb	r3, [r7, #17]
    b8d0:	e001      	b.n	b8d6 <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    b8d2:	89fb      	ldrh	r3, [r7, #14]
    b8d4:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    b8d6:	8a7a      	ldrh	r2, [r7, #18]
    b8d8:	7c7b      	ldrb	r3, [r7, #17]
    b8da:	79f8      	ldrb	r0, [r7, #7]
    b8dc:	6979      	ldr	r1, [r7, #20]
    b8de:	4c09      	ldr	r4, [pc, #36]	; (b904 <usbdc_get_cfg_desc+0xac>)
    b8e0:	47a0      	blx	r4
    b8e2:	4603      	mov	r3, r0
    b8e4:	2b00      	cmp	r3, #0
    b8e6:	d001      	beq.n	b8ec <usbdc_get_cfg_desc+0x94>
		return false;
    b8e8:	2300      	movs	r3, #0
    b8ea:	e000      	b.n	b8ee <usbdc_get_cfg_desc+0x96>
	}
	return true;
    b8ec:	2301      	movs	r3, #1
}
    b8ee:	4618      	mov	r0, r3
    b8f0:	371c      	adds	r7, #28
    b8f2:	46bd      	mov	sp, r7
    b8f4:	bd90      	pop	{r4, r7, pc}
    b8f6:	bf00      	nop
    b8f8:	200010a0 	.word	0x200010a0
    b8fc:	0000c615 	.word	0x0000c615
    b900:	0000b7c1 	.word	0x0000b7c1
    b904:	0000c2c5 	.word	0x0000c2c5

0000b908 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    b908:	b590      	push	{r4, r7, lr}
    b90a:	b085      	sub	sp, #20
    b90c:	af00      	add	r7, sp, #0
    b90e:	4603      	mov	r3, r0
    b910:	6039      	str	r1, [r7, #0]
    b912:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    b914:	683b      	ldr	r3, [r7, #0]
    b916:	799a      	ldrb	r2, [r3, #6]
    b918:	79db      	ldrb	r3, [r3, #7]
    b91a:	021b      	lsls	r3, r3, #8
    b91c:	4313      	orrs	r3, r2
    b91e:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    b920:	683b      	ldr	r3, [r7, #0]
    b922:	885b      	ldrh	r3, [r3, #2]
    b924:	b29b      	uxth	r3, r3
    b926:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    b928:	89fa      	ldrh	r2, [r7, #14]
    b92a:	4b1a      	ldr	r3, [pc, #104]	; (b994 <usbdc_get_str_desc+0x8c>)
    b92c:	7f1b      	ldrb	r3, [r3, #28]
    b92e:	3b01      	subs	r3, #1
    b930:	4013      	ands	r3, r2
    b932:	2b00      	cmp	r3, #0
    b934:	bf0c      	ite	eq
    b936:	2301      	moveq	r3, #1
    b938:	2300      	movne	r3, #0
    b93a:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    b93c:	4b15      	ldr	r3, [pc, #84]	; (b994 <usbdc_get_str_desc+0x8c>)
    b93e:	681b      	ldr	r3, [r3, #0]
    b940:	6818      	ldr	r0, [r3, #0]
    b942:	4b14      	ldr	r3, [pc, #80]	; (b994 <usbdc_get_str_desc+0x8c>)
    b944:	681b      	ldr	r3, [r3, #0]
    b946:	685b      	ldr	r3, [r3, #4]
    b948:	7b3a      	ldrb	r2, [r7, #12]
    b94a:	4619      	mov	r1, r3
    b94c:	4b12      	ldr	r3, [pc, #72]	; (b998 <usbdc_get_str_desc+0x90>)
    b94e:	4798      	blx	r3
    b950:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    b952:	68bb      	ldr	r3, [r7, #8]
    b954:	2b00      	cmp	r3, #0
    b956:	d101      	bne.n	b95c <usbdc_get_str_desc+0x54>
		return false;
    b958:	2300      	movs	r3, #0
    b95a:	e017      	b.n	b98c <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    b95c:	68bb      	ldr	r3, [r7, #8]
    b95e:	781b      	ldrb	r3, [r3, #0]
    b960:	b29b      	uxth	r3, r3
    b962:	89fa      	ldrh	r2, [r7, #14]
    b964:	429a      	cmp	r2, r3
    b966:	d802      	bhi.n	b96e <usbdc_get_str_desc+0x66>
		need_zlp = false;
    b968:	2300      	movs	r3, #0
    b96a:	737b      	strb	r3, [r7, #13]
    b96c:	e002      	b.n	b974 <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    b96e:	68bb      	ldr	r3, [r7, #8]
    b970:	781b      	ldrb	r3, [r3, #0]
    b972:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    b974:	89fa      	ldrh	r2, [r7, #14]
    b976:	7b7b      	ldrb	r3, [r7, #13]
    b978:	79f8      	ldrb	r0, [r7, #7]
    b97a:	68b9      	ldr	r1, [r7, #8]
    b97c:	4c07      	ldr	r4, [pc, #28]	; (b99c <usbdc_get_str_desc+0x94>)
    b97e:	47a0      	blx	r4
    b980:	4603      	mov	r3, r0
    b982:	2b00      	cmp	r3, #0
    b984:	d001      	beq.n	b98a <usbdc_get_str_desc+0x82>
		return false;
    b986:	2300      	movs	r3, #0
    b988:	e000      	b.n	b98c <usbdc_get_str_desc+0x84>
	}
	return true;
    b98a:	2301      	movs	r3, #1
}
    b98c:	4618      	mov	r0, r3
    b98e:	3714      	adds	r7, #20
    b990:	46bd      	mov	sp, r7
    b992:	bd90      	pop	{r4, r7, pc}
    b994:	200010a0 	.word	0x200010a0
    b998:	0000c68d 	.word	0x0000c68d
    b99c:	0000c2c5 	.word	0x0000c2c5

0000b9a0 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    b9a0:	b580      	push	{r7, lr}
    b9a2:	b084      	sub	sp, #16
    b9a4:	af00      	add	r7, sp, #0
    b9a6:	4603      	mov	r3, r0
    b9a8:	6039      	str	r1, [r7, #0]
    b9aa:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    b9ac:	683b      	ldr	r3, [r7, #0]
    b9ae:	885b      	ldrh	r3, [r3, #2]
    b9b0:	b29b      	uxth	r3, r3
    b9b2:	0a1b      	lsrs	r3, r3, #8
    b9b4:	b29b      	uxth	r3, r3
    b9b6:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    b9b8:	7bfb      	ldrb	r3, [r7, #15]
    b9ba:	2b02      	cmp	r3, #2
    b9bc:	d00d      	beq.n	b9da <usbdc_get_desc_req+0x3a>
    b9be:	2b03      	cmp	r3, #3
    b9c0:	d012      	beq.n	b9e8 <usbdc_get_desc_req+0x48>
    b9c2:	2b01      	cmp	r3, #1
    b9c4:	d002      	beq.n	b9cc <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    b9c6:	bf00      	nop
	}
	return false;
    b9c8:	2300      	movs	r3, #0
    b9ca:	e013      	b.n	b9f4 <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    b9cc:	79fb      	ldrb	r3, [r7, #7]
    b9ce:	6839      	ldr	r1, [r7, #0]
    b9d0:	4618      	mov	r0, r3
    b9d2:	4b0a      	ldr	r3, [pc, #40]	; (b9fc <usbdc_get_desc_req+0x5c>)
    b9d4:	4798      	blx	r3
    b9d6:	4603      	mov	r3, r0
    b9d8:	e00c      	b.n	b9f4 <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    b9da:	79fb      	ldrb	r3, [r7, #7]
    b9dc:	6839      	ldr	r1, [r7, #0]
    b9de:	4618      	mov	r0, r3
    b9e0:	4b07      	ldr	r3, [pc, #28]	; (ba00 <usbdc_get_desc_req+0x60>)
    b9e2:	4798      	blx	r3
    b9e4:	4603      	mov	r3, r0
    b9e6:	e005      	b.n	b9f4 <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    b9e8:	79fb      	ldrb	r3, [r7, #7]
    b9ea:	6839      	ldr	r1, [r7, #0]
    b9ec:	4618      	mov	r0, r3
    b9ee:	4b05      	ldr	r3, [pc, #20]	; (ba04 <usbdc_get_desc_req+0x64>)
    b9f0:	4798      	blx	r3
    b9f2:	4603      	mov	r3, r0
}
    b9f4:	4618      	mov	r0, r3
    b9f6:	3710      	adds	r7, #16
    b9f8:	46bd      	mov	sp, r7
    b9fa:	bd80      	pop	{r7, pc}
    b9fc:	0000b7e1 	.word	0x0000b7e1
    ba00:	0000b859 	.word	0x0000b859
    ba04:	0000b909 	.word	0x0000b909

0000ba08 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    ba08:	b590      	push	{r4, r7, lr}
    ba0a:	b085      	sub	sp, #20
    ba0c:	af00      	add	r7, sp, #0
    ba0e:	4603      	mov	r3, r0
    ba10:	6039      	str	r1, [r7, #0]
    ba12:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    ba14:	683b      	ldr	r3, [r7, #0]
    ba16:	781b      	ldrb	r3, [r3, #0]
    ba18:	f003 031f 	and.w	r3, r3, #31
    ba1c:	2b00      	cmp	r3, #0
    ba1e:	db1b      	blt.n	ba58 <usbdc_get_status_req+0x50>
    ba20:	2b01      	cmp	r3, #1
    ba22:	dd02      	ble.n	ba2a <usbdc_get_status_req+0x22>
    ba24:	2b02      	cmp	r3, #2
    ba26:	d003      	beq.n	ba30 <usbdc_get_status_req+0x28>
    ba28:	e016      	b.n	ba58 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    ba2a:	2300      	movs	r3, #0
    ba2c:	60fb      	str	r3, [r7, #12]
		break;
    ba2e:	e015      	b.n	ba5c <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    ba30:	683b      	ldr	r3, [r7, #0]
    ba32:	889b      	ldrh	r3, [r3, #4]
    ba34:	b29b      	uxth	r3, r3
    ba36:	b2db      	uxtb	r3, r3
    ba38:	2102      	movs	r1, #2
    ba3a:	4618      	mov	r0, r3
    ba3c:	4b0f      	ldr	r3, [pc, #60]	; (ba7c <usbdc_get_status_req+0x74>)
    ba3e:	4798      	blx	r3
    ba40:	4603      	mov	r3, r0
    ba42:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    ba44:	68fb      	ldr	r3, [r7, #12]
    ba46:	2b00      	cmp	r3, #0
    ba48:	da01      	bge.n	ba4e <usbdc_get_status_req+0x46>
			return false;
    ba4a:	2300      	movs	r3, #0
    ba4c:	e012      	b.n	ba74 <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    ba4e:	68fb      	ldr	r3, [r7, #12]
    ba50:	f003 0301 	and.w	r3, r3, #1
    ba54:	60fb      	str	r3, [r7, #12]
		break;
    ba56:	e001      	b.n	ba5c <usbdc_get_status_req+0x54>
	default:
		return false;
    ba58:	2300      	movs	r3, #0
    ba5a:	e00b      	b.n	ba74 <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    ba5c:	4b08      	ldr	r3, [pc, #32]	; (ba80 <usbdc_get_status_req+0x78>)
    ba5e:	695b      	ldr	r3, [r3, #20]
    ba60:	89ba      	ldrh	r2, [r7, #12]
    ba62:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    ba64:	4b06      	ldr	r3, [pc, #24]	; (ba80 <usbdc_get_status_req+0x78>)
    ba66:	6959      	ldr	r1, [r3, #20]
    ba68:	79f8      	ldrb	r0, [r7, #7]
    ba6a:	2300      	movs	r3, #0
    ba6c:	2202      	movs	r2, #2
    ba6e:	4c05      	ldr	r4, [pc, #20]	; (ba84 <usbdc_get_status_req+0x7c>)
    ba70:	47a0      	blx	r4
	return true;
    ba72:	2301      	movs	r3, #1
}
    ba74:	4618      	mov	r0, r3
    ba76:	3714      	adds	r7, #20
    ba78:	46bd      	mov	sp, r7
    ba7a:	bd90      	pop	{r4, r7, pc}
    ba7c:	00002e0d 	.word	0x00002e0d
    ba80:	200010a0 	.word	0x200010a0
    ba84:	0000c2c5 	.word	0x0000c2c5

0000ba88 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    ba88:	b590      	push	{r4, r7, lr}
    ba8a:	b085      	sub	sp, #20
    ba8c:	af00      	add	r7, sp, #0
    ba8e:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    ba90:	4b1f      	ldr	r3, [pc, #124]	; (bb10 <usbdc_get_interface+0x88>)
    ba92:	691b      	ldr	r3, [r3, #16]
    ba94:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    ba96:	4b1e      	ldr	r3, [pc, #120]	; (bb10 <usbdc_get_interface+0x88>)
    ba98:	7f5b      	ldrb	r3, [r3, #29]
    ba9a:	461a      	mov	r2, r3
    ba9c:	687b      	ldr	r3, [r7, #4]
    ba9e:	889b      	ldrh	r3, [r3, #4]
    baa0:	b29b      	uxth	r3, r3
    baa2:	fa42 f303 	asr.w	r3, r2, r3
    baa6:	f003 0301 	and.w	r3, r3, #1
    baaa:	2b00      	cmp	r3, #0
    baac:	d128      	bne.n	bb00 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    baae:	4b18      	ldr	r3, [pc, #96]	; (bb10 <usbdc_get_interface+0x88>)
    bab0:	695b      	ldr	r3, [r3, #20]
    bab2:	2200      	movs	r2, #0
    bab4:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    bab6:	4b16      	ldr	r3, [pc, #88]	; (bb10 <usbdc_get_interface+0x88>)
    bab8:	6959      	ldr	r1, [r3, #20]
    baba:	2300      	movs	r3, #0
    babc:	2201      	movs	r2, #1
    babe:	2000      	movs	r0, #0
    bac0:	4c14      	ldr	r4, [pc, #80]	; (bb14 <usbdc_get_interface+0x8c>)
    bac2:	47a0      	blx	r4
		return true;
    bac4:	2301      	movs	r3, #1
    bac6:	e01f      	b.n	bb08 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    bac8:	68fb      	ldr	r3, [r7, #12]
    baca:	685b      	ldr	r3, [r3, #4]
    bacc:	687a      	ldr	r2, [r7, #4]
    bace:	2102      	movs	r1, #2
    bad0:	68f8      	ldr	r0, [r7, #12]
    bad2:	4798      	blx	r3
    bad4:	60b8      	str	r0, [r7, #8]
    bad6:	68bb      	ldr	r3, [r7, #8]
    bad8:	2b00      	cmp	r3, #0
    bada:	da03      	bge.n	bae4 <usbdc_get_interface+0x5c>
			func = func->next;
    badc:	68fb      	ldr	r3, [r7, #12]
    bade:	681b      	ldr	r3, [r3, #0]
    bae0:	60fb      	str	r3, [r7, #12]
    bae2:	e00d      	b.n	bb00 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    bae4:	4b0a      	ldr	r3, [pc, #40]	; (bb10 <usbdc_get_interface+0x88>)
    bae6:	695b      	ldr	r3, [r3, #20]
    bae8:	68ba      	ldr	r2, [r7, #8]
    baea:	b2d2      	uxtb	r2, r2
    baec:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    baee:	4b08      	ldr	r3, [pc, #32]	; (bb10 <usbdc_get_interface+0x88>)
    baf0:	6959      	ldr	r1, [r3, #20]
    baf2:	2300      	movs	r3, #0
    baf4:	2201      	movs	r2, #1
    baf6:	2000      	movs	r0, #0
    baf8:	4c06      	ldr	r4, [pc, #24]	; (bb14 <usbdc_get_interface+0x8c>)
    bafa:	47a0      	blx	r4
			return true;
    bafc:	2301      	movs	r3, #1
    bafe:	e003      	b.n	bb08 <usbdc_get_interface+0x80>
	while (NULL != func) {
    bb00:	68fb      	ldr	r3, [r7, #12]
    bb02:	2b00      	cmp	r3, #0
    bb04:	d1e0      	bne.n	bac8 <usbdc_get_interface+0x40>
		}
	}
	return false;
    bb06:	2300      	movs	r3, #0
}
    bb08:	4618      	mov	r0, r3
    bb0a:	3714      	adds	r7, #20
    bb0c:	46bd      	mov	sp, r7
    bb0e:	bd90      	pop	{r4, r7, pc}
    bb10:	200010a0 	.word	0x200010a0
    bb14:	0000c2c5 	.word	0x0000c2c5

0000bb18 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    bb18:	b590      	push	{r4, r7, lr}
    bb1a:	b083      	sub	sp, #12
    bb1c:	af00      	add	r7, sp, #0
    bb1e:	4603      	mov	r3, r0
    bb20:	6039      	str	r1, [r7, #0]
    bb22:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    bb24:	683b      	ldr	r3, [r7, #0]
    bb26:	785b      	ldrb	r3, [r3, #1]
    bb28:	2b0a      	cmp	r3, #10
    bb2a:	d83a      	bhi.n	bba2 <usbdc_get_req+0x8a>
    bb2c:	a201      	add	r2, pc, #4	; (adr r2, bb34 <usbdc_get_req+0x1c>)
    bb2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    bb32:	bf00      	nop
    bb34:	0000bb8b 	.word	0x0000bb8b
    bb38:	0000bba3 	.word	0x0000bba3
    bb3c:	0000bba3 	.word	0x0000bba3
    bb40:	0000bba3 	.word	0x0000bba3
    bb44:	0000bba3 	.word	0x0000bba3
    bb48:	0000bba3 	.word	0x0000bba3
    bb4c:	0000bb61 	.word	0x0000bb61
    bb50:	0000bba3 	.word	0x0000bba3
    bb54:	0000bb6f 	.word	0x0000bb6f
    bb58:	0000bba3 	.word	0x0000bba3
    bb5c:	0000bb99 	.word	0x0000bb99
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    bb60:	79fb      	ldrb	r3, [r7, #7]
    bb62:	6839      	ldr	r1, [r7, #0]
    bb64:	4618      	mov	r0, r3
    bb66:	4b11      	ldr	r3, [pc, #68]	; (bbac <usbdc_get_req+0x94>)
    bb68:	4798      	blx	r3
    bb6a:	4603      	mov	r3, r0
    bb6c:	e01a      	b.n	bba4 <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    bb6e:	4b10      	ldr	r3, [pc, #64]	; (bbb0 <usbdc_get_req+0x98>)
    bb70:	695b      	ldr	r3, [r3, #20]
    bb72:	4a0f      	ldr	r2, [pc, #60]	; (bbb0 <usbdc_get_req+0x98>)
    bb74:	7ed2      	ldrb	r2, [r2, #27]
    bb76:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    bb78:	4b0d      	ldr	r3, [pc, #52]	; (bbb0 <usbdc_get_req+0x98>)
    bb7a:	6959      	ldr	r1, [r3, #20]
    bb7c:	79f8      	ldrb	r0, [r7, #7]
    bb7e:	2300      	movs	r3, #0
    bb80:	2201      	movs	r2, #1
    bb82:	4c0c      	ldr	r4, [pc, #48]	; (bbb4 <usbdc_get_req+0x9c>)
    bb84:	47a0      	blx	r4
		return true;
    bb86:	2301      	movs	r3, #1
    bb88:	e00c      	b.n	bba4 <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    bb8a:	79fb      	ldrb	r3, [r7, #7]
    bb8c:	6839      	ldr	r1, [r7, #0]
    bb8e:	4618      	mov	r0, r3
    bb90:	4b09      	ldr	r3, [pc, #36]	; (bbb8 <usbdc_get_req+0xa0>)
    bb92:	4798      	blx	r3
    bb94:	4603      	mov	r3, r0
    bb96:	e005      	b.n	bba4 <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    bb98:	6838      	ldr	r0, [r7, #0]
    bb9a:	4b08      	ldr	r3, [pc, #32]	; (bbbc <usbdc_get_req+0xa4>)
    bb9c:	4798      	blx	r3
    bb9e:	4603      	mov	r3, r0
    bba0:	e000      	b.n	bba4 <usbdc_get_req+0x8c>
	default:
		return false;
    bba2:	2300      	movs	r3, #0
	}
}
    bba4:	4618      	mov	r0, r3
    bba6:	370c      	adds	r7, #12
    bba8:	46bd      	mov	sp, r7
    bbaa:	bd90      	pop	{r4, r7, pc}
    bbac:	0000b9a1 	.word	0x0000b9a1
    bbb0:	200010a0 	.word	0x200010a0
    bbb4:	0000c2c5 	.word	0x0000c2c5
    bbb8:	0000ba09 	.word	0x0000ba09
    bbbc:	0000ba89 	.word	0x0000ba89

0000bbc0 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    bbc0:	b590      	push	{r4, r7, lr}
    bbc2:	b083      	sub	sp, #12
    bbc4:	af00      	add	r7, sp, #0
    bbc6:	4603      	mov	r3, r0
    bbc8:	6039      	str	r1, [r7, #0]
    bbca:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    bbcc:	683b      	ldr	r3, [r7, #0]
    bbce:	781b      	ldrb	r3, [r3, #0]
    bbd0:	f003 031f 	and.w	r3, r3, #31
    bbd4:	2b02      	cmp	r3, #2
    bbd6:	d116      	bne.n	bc06 <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    bbd8:	683b      	ldr	r3, [r7, #0]
    bbda:	88db      	ldrh	r3, [r3, #6]
    bbdc:	b29b      	uxth	r3, r3
    bbde:	2b00      	cmp	r3, #0
    bbe0:	d001      	beq.n	bbe6 <usbdc_clear_ftr_req+0x26>
			return false;
    bbe2:	2300      	movs	r3, #0
    bbe4:	e010      	b.n	bc08 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    bbe6:	683b      	ldr	r3, [r7, #0]
    bbe8:	889b      	ldrh	r3, [r3, #4]
    bbea:	b29b      	uxth	r3, r3
    bbec:	b2db      	uxtb	r3, r3
    bbee:	2100      	movs	r1, #0
    bbf0:	4618      	mov	r0, r3
    bbf2:	4b07      	ldr	r3, [pc, #28]	; (bc10 <usbdc_clear_ftr_req+0x50>)
    bbf4:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    bbf6:	79f8      	ldrb	r0, [r7, #7]
    bbf8:	2301      	movs	r3, #1
    bbfa:	2200      	movs	r2, #0
    bbfc:	2100      	movs	r1, #0
    bbfe:	4c05      	ldr	r4, [pc, #20]	; (bc14 <usbdc_clear_ftr_req+0x54>)
    bc00:	47a0      	blx	r4
		return true;
    bc02:	2301      	movs	r3, #1
    bc04:	e000      	b.n	bc08 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    bc06:	2300      	movs	r3, #0
	}
}
    bc08:	4618      	mov	r0, r3
    bc0a:	370c      	adds	r7, #12
    bc0c:	46bd      	mov	sp, r7
    bc0e:	bd90      	pop	{r4, r7, pc}
    bc10:	00002e0d 	.word	0x00002e0d
    bc14:	0000c2c5 	.word	0x0000c2c5

0000bc18 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    bc18:	b590      	push	{r4, r7, lr}
    bc1a:	b083      	sub	sp, #12
    bc1c:	af00      	add	r7, sp, #0
    bc1e:	4603      	mov	r3, r0
    bc20:	6039      	str	r1, [r7, #0]
    bc22:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    bc24:	683b      	ldr	r3, [r7, #0]
    bc26:	781b      	ldrb	r3, [r3, #0]
    bc28:	f003 031f 	and.w	r3, r3, #31
    bc2c:	2b02      	cmp	r3, #2
    bc2e:	d116      	bne.n	bc5e <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    bc30:	683b      	ldr	r3, [r7, #0]
    bc32:	88db      	ldrh	r3, [r3, #6]
    bc34:	b29b      	uxth	r3, r3
    bc36:	2b00      	cmp	r3, #0
    bc38:	d001      	beq.n	bc3e <usbdc_set_ftr_req+0x26>
			return false;
    bc3a:	2300      	movs	r3, #0
    bc3c:	e010      	b.n	bc60 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    bc3e:	683b      	ldr	r3, [r7, #0]
    bc40:	889b      	ldrh	r3, [r3, #4]
    bc42:	b29b      	uxth	r3, r3
    bc44:	b2db      	uxtb	r3, r3
    bc46:	2101      	movs	r1, #1
    bc48:	4618      	mov	r0, r3
    bc4a:	4b07      	ldr	r3, [pc, #28]	; (bc68 <usbdc_set_ftr_req+0x50>)
    bc4c:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    bc4e:	79f8      	ldrb	r0, [r7, #7]
    bc50:	2301      	movs	r3, #1
    bc52:	2200      	movs	r2, #0
    bc54:	2100      	movs	r1, #0
    bc56:	4c05      	ldr	r4, [pc, #20]	; (bc6c <usbdc_set_ftr_req+0x54>)
    bc58:	47a0      	blx	r4
		return true;
    bc5a:	2301      	movs	r3, #1
    bc5c:	e000      	b.n	bc60 <usbdc_set_ftr_req+0x48>
	default:
		return false;
    bc5e:	2300      	movs	r3, #0
	}
}
    bc60:	4618      	mov	r0, r3
    bc62:	370c      	adds	r7, #12
    bc64:	46bd      	mov	sp, r7
    bc66:	bd90      	pop	{r4, r7, pc}
    bc68:	00002e0d 	.word	0x00002e0d
    bc6c:	0000c2c5 	.word	0x0000c2c5

0000bc70 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    bc70:	b580      	push	{r7, lr}
    bc72:	b082      	sub	sp, #8
    bc74:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    bc76:	4b0a      	ldr	r3, [pc, #40]	; (bca0 <usbdc_unconfig+0x30>)
    bc78:	691b      	ldr	r3, [r3, #16]
    bc7a:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    bc7c:	e008      	b.n	bc90 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    bc7e:	687b      	ldr	r3, [r7, #4]
    bc80:	685b      	ldr	r3, [r3, #4]
    bc82:	2200      	movs	r2, #0
    bc84:	2101      	movs	r1, #1
    bc86:	6878      	ldr	r0, [r7, #4]
    bc88:	4798      	blx	r3
		func = func->next;
    bc8a:	687b      	ldr	r3, [r7, #4]
    bc8c:	681b      	ldr	r3, [r3, #0]
    bc8e:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    bc90:	687b      	ldr	r3, [r7, #4]
    bc92:	2b00      	cmp	r3, #0
    bc94:	d1f3      	bne.n	bc7e <usbdc_unconfig+0xe>
	}
}
    bc96:	bf00      	nop
    bc98:	3708      	adds	r7, #8
    bc9a:	46bd      	mov	sp, r7
    bc9c:	bd80      	pop	{r7, pc}
    bc9e:	bf00      	nop
    bca0:	200010a0 	.word	0x200010a0

0000bca4 <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    bca4:	b580      	push	{r7, lr}
    bca6:	b088      	sub	sp, #32
    bca8:	af00      	add	r7, sp, #0
    bcaa:	4603      	mov	r3, r0
    bcac:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    bcae:	2300      	movs	r3, #0
    bcb0:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    bcb2:	23ff      	movs	r3, #255	; 0xff
    bcb4:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    bcb6:	79fb      	ldrb	r3, [r7, #7]
    bcb8:	2b00      	cmp	r3, #0
    bcba:	d103      	bne.n	bcc4 <usbdc_set_config+0x20>
		usbdc_unconfig();
    bcbc:	4b2e      	ldr	r3, [pc, #184]	; (bd78 <usbdc_set_config+0xd4>)
    bcbe:	4798      	blx	r3
		return true;
    bcc0:	2301      	movs	r3, #1
    bcc2:	e055      	b.n	bd70 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    bcc4:	69bb      	ldr	r3, [r7, #24]
    bcc6:	2b00      	cmp	r3, #0
    bcc8:	d10a      	bne.n	bce0 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    bcca:	4b2c      	ldr	r3, [pc, #176]	; (bd7c <usbdc_set_config+0xd8>)
    bccc:	681b      	ldr	r3, [r3, #0]
    bcce:	6818      	ldr	r0, [r3, #0]
    bcd0:	4b2a      	ldr	r3, [pc, #168]	; (bd7c <usbdc_set_config+0xd8>)
    bcd2:	681b      	ldr	r3, [r3, #0]
    bcd4:	685b      	ldr	r3, [r3, #4]
    bcd6:	79fa      	ldrb	r2, [r7, #7]
    bcd8:	4619      	mov	r1, r3
    bcda:	4b29      	ldr	r3, [pc, #164]	; (bd80 <usbdc_set_config+0xdc>)
    bcdc:	4798      	blx	r3
    bcde:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    bce0:	69bb      	ldr	r3, [r7, #24]
    bce2:	2b00      	cmp	r3, #0
    bce4:	d101      	bne.n	bcea <usbdc_set_config+0x46>
		return false;
    bce6:	2300      	movs	r3, #0
    bce8:	e042      	b.n	bd70 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    bcea:	69b8      	ldr	r0, [r7, #24]
    bcec:	4b25      	ldr	r3, [pc, #148]	; (bd84 <usbdc_set_config+0xe0>)
    bcee:	4798      	blx	r3
    bcf0:	4603      	mov	r3, r0
    bcf2:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    bcf4:	8abb      	ldrh	r3, [r7, #20]
    bcf6:	69ba      	ldr	r2, [r7, #24]
    bcf8:	4413      	add	r3, r2
    bcfa:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    bcfc:	693b      	ldr	r3, [r7, #16]
    bcfe:	2204      	movs	r2, #4
    bd00:	4619      	mov	r1, r3
    bd02:	69b8      	ldr	r0, [r7, #24]
    bd04:	4b20      	ldr	r3, [pc, #128]	; (bd88 <usbdc_set_config+0xe4>)
    bd06:	4798      	blx	r3
    bd08:	4603      	mov	r3, r0
    bd0a:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    bd0c:	e02c      	b.n	bd68 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    bd0e:	68fb      	ldr	r3, [r7, #12]
    bd10:	3302      	adds	r3, #2
    bd12:	781b      	ldrb	r3, [r3, #0]
    bd14:	7dfa      	ldrb	r2, [r7, #23]
    bd16:	429a      	cmp	r2, r3
    bd18:	d018      	beq.n	bd4c <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    bd1a:	68fb      	ldr	r3, [r7, #12]
    bd1c:	789b      	ldrb	r3, [r3, #2]
    bd1e:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    bd20:	4b16      	ldr	r3, [pc, #88]	; (bd7c <usbdc_set_config+0xd8>)
    bd22:	691b      	ldr	r3, [r3, #16]
    bd24:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    bd26:	e00c      	b.n	bd42 <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    bd28:	69fb      	ldr	r3, [r7, #28]
    bd2a:	685b      	ldr	r3, [r3, #4]
    bd2c:	f107 020c 	add.w	r2, r7, #12
    bd30:	2100      	movs	r1, #0
    bd32:	69f8      	ldr	r0, [r7, #28]
    bd34:	4798      	blx	r3
    bd36:	4603      	mov	r3, r0
    bd38:	2b00      	cmp	r3, #0
    bd3a:	d006      	beq.n	bd4a <usbdc_set_config+0xa6>
					func = func->next;
    bd3c:	69fb      	ldr	r3, [r7, #28]
    bd3e:	681b      	ldr	r3, [r3, #0]
    bd40:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    bd42:	69fb      	ldr	r3, [r7, #28]
    bd44:	2b00      	cmp	r3, #0
    bd46:	d1ef      	bne.n	bd28 <usbdc_set_config+0x84>
    bd48:	e000      	b.n	bd4c <usbdc_set_config+0xa8>
				} else {
					break;
    bd4a:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    bd4c:	68fb      	ldr	r3, [r7, #12]
    bd4e:	4618      	mov	r0, r3
    bd50:	4b0e      	ldr	r3, [pc, #56]	; (bd8c <usbdc_set_config+0xe8>)
    bd52:	4798      	blx	r3
    bd54:	4603      	mov	r3, r0
    bd56:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    bd58:	68fb      	ldr	r3, [r7, #12]
    bd5a:	6939      	ldr	r1, [r7, #16]
    bd5c:	2204      	movs	r2, #4
    bd5e:	4618      	mov	r0, r3
    bd60:	4b09      	ldr	r3, [pc, #36]	; (bd88 <usbdc_set_config+0xe4>)
    bd62:	4798      	blx	r3
    bd64:	4603      	mov	r3, r0
    bd66:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    bd68:	68fb      	ldr	r3, [r7, #12]
    bd6a:	2b00      	cmp	r3, #0
    bd6c:	d1cf      	bne.n	bd0e <usbdc_set_config+0x6a>
	}
	return true;
    bd6e:	2301      	movs	r3, #1
}
    bd70:	4618      	mov	r0, r3
    bd72:	3720      	adds	r7, #32
    bd74:	46bd      	mov	sp, r7
    bd76:	bd80      	pop	{r7, pc}
    bd78:	0000bc71 	.word	0x0000bc71
    bd7c:	200010a0 	.word	0x200010a0
    bd80:	0000c615 	.word	0x0000c615
    bd84:	0000b7c1 	.word	0x0000b7c1
    bd88:	0000c555 	.word	0x0000c555
    bd8c:	0000b79d 	.word	0x0000b79d

0000bd90 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    bd90:	b580      	push	{r7, lr}
    bd92:	b082      	sub	sp, #8
    bd94:	af00      	add	r7, sp, #0
    bd96:	4603      	mov	r3, r0
    bd98:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    bd9a:	79fb      	ldrb	r3, [r7, #7]
    bd9c:	4618      	mov	r0, r3
    bd9e:	4b03      	ldr	r3, [pc, #12]	; (bdac <usbdc_set_address+0x1c>)
    bda0:	4798      	blx	r3
}
    bda2:	bf00      	nop
    bda4:	3708      	adds	r7, #8
    bda6:	46bd      	mov	sp, r7
    bda8:	bd80      	pop	{r7, pc}
    bdaa:	bf00      	nop
    bdac:	00002a7d 	.word	0x00002a7d

0000bdb0 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    bdb0:	b590      	push	{r4, r7, lr}
    bdb2:	b087      	sub	sp, #28
    bdb4:	af00      	add	r7, sp, #0
    bdb6:	4603      	mov	r3, r0
    bdb8:	460a      	mov	r2, r1
    bdba:	80fb      	strh	r3, [r7, #6]
    bdbc:	4613      	mov	r3, r2
    bdbe:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    bdc0:	2300      	movs	r3, #0
    bdc2:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    bdc4:	693b      	ldr	r3, [r7, #16]
    bdc6:	2b00      	cmp	r3, #0
    bdc8:	d10b      	bne.n	bde2 <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    bdca:	4b43      	ldr	r3, [pc, #268]	; (bed8 <usbdc_set_interface+0x128>)
    bdcc:	681b      	ldr	r3, [r3, #0]
    bdce:	6818      	ldr	r0, [r3, #0]
    bdd0:	4b41      	ldr	r3, [pc, #260]	; (bed8 <usbdc_set_interface+0x128>)
    bdd2:	681b      	ldr	r3, [r3, #0]
    bdd4:	6859      	ldr	r1, [r3, #4]
    bdd6:	4b40      	ldr	r3, [pc, #256]	; (bed8 <usbdc_set_interface+0x128>)
    bdd8:	7edb      	ldrb	r3, [r3, #27]
    bdda:	461a      	mov	r2, r3
    bddc:	4b3f      	ldr	r3, [pc, #252]	; (bedc <usbdc_set_interface+0x12c>)
    bdde:	4798      	blx	r3
    bde0:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    bde2:	693b      	ldr	r3, [r7, #16]
    bde4:	2b00      	cmp	r3, #0
    bde6:	d101      	bne.n	bdec <usbdc_set_interface+0x3c>
		return false;
    bde8:	2300      	movs	r3, #0
    bdea:	e071      	b.n	bed0 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    bdec:	693b      	ldr	r3, [r7, #16]
    bdee:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    bdf0:	6938      	ldr	r0, [r7, #16]
    bdf2:	4b3b      	ldr	r3, [pc, #236]	; (bee0 <usbdc_set_interface+0x130>)
    bdf4:	4798      	blx	r3
    bdf6:	4603      	mov	r3, r0
    bdf8:	461a      	mov	r2, r3
    bdfa:	693b      	ldr	r3, [r7, #16]
    bdfc:	4413      	add	r3, r2
    bdfe:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    be00:	68bb      	ldr	r3, [r7, #8]
    be02:	68f9      	ldr	r1, [r7, #12]
    be04:	2204      	movs	r2, #4
    be06:	4618      	mov	r0, r3
    be08:	4b36      	ldr	r3, [pc, #216]	; (bee4 <usbdc_set_interface+0x134>)
    be0a:	4798      	blx	r3
    be0c:	6138      	str	r0, [r7, #16]
    be0e:	693b      	ldr	r3, [r7, #16]
    be10:	2b00      	cmp	r3, #0
    be12:	d113      	bne.n	be3c <usbdc_set_interface+0x8c>
		return false;
    be14:	2300      	movs	r3, #0
    be16:	e05b      	b.n	bed0 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    be18:	68bb      	ldr	r3, [r7, #8]
    be1a:	4618      	mov	r0, r3
    be1c:	4b32      	ldr	r3, [pc, #200]	; (bee8 <usbdc_set_interface+0x138>)
    be1e:	4798      	blx	r3
    be20:	4603      	mov	r3, r0
    be22:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    be24:	68bb      	ldr	r3, [r7, #8]
    be26:	68f9      	ldr	r1, [r7, #12]
    be28:	2204      	movs	r2, #4
    be2a:	4618      	mov	r0, r3
    be2c:	4b2d      	ldr	r3, [pc, #180]	; (bee4 <usbdc_set_interface+0x134>)
    be2e:	4798      	blx	r3
    be30:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    be32:	693b      	ldr	r3, [r7, #16]
    be34:	2b00      	cmp	r3, #0
    be36:	d101      	bne.n	be3c <usbdc_set_interface+0x8c>
			return false;
    be38:	2300      	movs	r3, #0
    be3a:	e049      	b.n	bed0 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    be3c:	693b      	ldr	r3, [r7, #16]
    be3e:	3302      	adds	r3, #2
    be40:	781b      	ldrb	r3, [r3, #0]
    be42:	b29b      	uxth	r3, r3
    be44:	88ba      	ldrh	r2, [r7, #4]
    be46:	429a      	cmp	r2, r3
    be48:	d1e6      	bne.n	be18 <usbdc_set_interface+0x68>
    be4a:	693b      	ldr	r3, [r7, #16]
    be4c:	3303      	adds	r3, #3
    be4e:	781b      	ldrb	r3, [r3, #0]
    be50:	b29b      	uxth	r3, r3
    be52:	88fa      	ldrh	r2, [r7, #6]
    be54:	429a      	cmp	r2, r3
    be56:	d1df      	bne.n	be18 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    be58:	693b      	ldr	r3, [r7, #16]
    be5a:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    be5c:	4b1e      	ldr	r3, [pc, #120]	; (bed8 <usbdc_set_interface+0x128>)
    be5e:	691b      	ldr	r3, [r3, #16]
    be60:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    be62:	e031      	b.n	bec8 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    be64:	697b      	ldr	r3, [r7, #20]
    be66:	685b      	ldr	r3, [r3, #4]
    be68:	f107 0208 	add.w	r2, r7, #8
    be6c:	2101      	movs	r1, #1
    be6e:	6978      	ldr	r0, [r7, #20]
    be70:	4798      	blx	r3
    be72:	4603      	mov	r3, r0
    be74:	2b00      	cmp	r3, #0
    be76:	d003      	beq.n	be80 <usbdc_set_interface+0xd0>
			func = func->next;
    be78:	697b      	ldr	r3, [r7, #20]
    be7a:	681b      	ldr	r3, [r3, #0]
    be7c:	617b      	str	r3, [r7, #20]
    be7e:	e023      	b.n	bec8 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    be80:	697b      	ldr	r3, [r7, #20]
    be82:	685b      	ldr	r3, [r3, #4]
    be84:	f107 0208 	add.w	r2, r7, #8
    be88:	2100      	movs	r1, #0
    be8a:	6978      	ldr	r0, [r7, #20]
    be8c:	4798      	blx	r3
    be8e:	4603      	mov	r3, r0
    be90:	2b00      	cmp	r3, #0
    be92:	d117      	bne.n	bec4 <usbdc_set_interface+0x114>
			if (alt_set) {
    be94:	88fb      	ldrh	r3, [r7, #6]
    be96:	2b00      	cmp	r3, #0
    be98:	d00c      	beq.n	beb4 <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    be9a:	4b0f      	ldr	r3, [pc, #60]	; (bed8 <usbdc_set_interface+0x128>)
    be9c:	7f5b      	ldrb	r3, [r3, #29]
    be9e:	b25a      	sxtb	r2, r3
    bea0:	88bb      	ldrh	r3, [r7, #4]
    bea2:	2101      	movs	r1, #1
    bea4:	fa01 f303 	lsl.w	r3, r1, r3
    bea8:	b25b      	sxtb	r3, r3
    beaa:	4313      	orrs	r3, r2
    beac:	b25b      	sxtb	r3, r3
    beae:	b2da      	uxtb	r2, r3
    beb0:	4b09      	ldr	r3, [pc, #36]	; (bed8 <usbdc_set_interface+0x128>)
    beb2:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    beb4:	2300      	movs	r3, #0
    beb6:	2200      	movs	r2, #0
    beb8:	2100      	movs	r1, #0
    beba:	2000      	movs	r0, #0
    bebc:	4c0b      	ldr	r4, [pc, #44]	; (beec <usbdc_set_interface+0x13c>)
    bebe:	47a0      	blx	r4
			return true;
    bec0:	2301      	movs	r3, #1
    bec2:	e005      	b.n	bed0 <usbdc_set_interface+0x120>
		} else {
			return false;
    bec4:	2300      	movs	r3, #0
    bec6:	e003      	b.n	bed0 <usbdc_set_interface+0x120>
	while (NULL != func) {
    bec8:	697b      	ldr	r3, [r7, #20]
    beca:	2b00      	cmp	r3, #0
    becc:	d1ca      	bne.n	be64 <usbdc_set_interface+0xb4>
		}
	}

	return false;
    bece:	2300      	movs	r3, #0
}
    bed0:	4618      	mov	r0, r3
    bed2:	371c      	adds	r7, #28
    bed4:	46bd      	mov	sp, r7
    bed6:	bd90      	pop	{r4, r7, pc}
    bed8:	200010a0 	.word	0x200010a0
    bedc:	0000c615 	.word	0x0000c615
    bee0:	0000b7c1 	.word	0x0000b7c1
    bee4:	0000c555 	.word	0x0000c555
    bee8:	0000b79d 	.word	0x0000b79d
    beec:	0000c2c5 	.word	0x0000c2c5

0000bef0 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    bef0:	b590      	push	{r4, r7, lr}
    bef2:	b083      	sub	sp, #12
    bef4:	af00      	add	r7, sp, #0
    bef6:	4603      	mov	r3, r0
    bef8:	6039      	str	r1, [r7, #0]
    befa:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    befc:	683b      	ldr	r3, [r7, #0]
    befe:	785b      	ldrb	r3, [r3, #1]
    bf00:	3b01      	subs	r3, #1
    bf02:	2b0a      	cmp	r3, #10
    bf04:	d85b      	bhi.n	bfbe <usbdc_set_req+0xce>
    bf06:	a201      	add	r2, pc, #4	; (adr r2, bf0c <usbdc_set_req+0x1c>)
    bf08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    bf0c:	0000bf8b 	.word	0x0000bf8b
    bf10:	0000bfbf 	.word	0x0000bfbf
    bf14:	0000bf99 	.word	0x0000bf99
    bf18:	0000bfbf 	.word	0x0000bfbf
    bf1c:	0000bf39 	.word	0x0000bf39
    bf20:	0000bfbf 	.word	0x0000bfbf
    bf24:	0000bfbf 	.word	0x0000bfbf
    bf28:	0000bfbf 	.word	0x0000bfbf
    bf2c:	0000bf53 	.word	0x0000bf53
    bf30:	0000bfbf 	.word	0x0000bfbf
    bf34:	0000bfa7 	.word	0x0000bfa7
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    bf38:	79f8      	ldrb	r0, [r7, #7]
    bf3a:	2301      	movs	r3, #1
    bf3c:	2200      	movs	r2, #0
    bf3e:	2100      	movs	r1, #0
    bf40:	4c21      	ldr	r4, [pc, #132]	; (bfc8 <usbdc_set_req+0xd8>)
    bf42:	47a0      	blx	r4
    bf44:	4603      	mov	r3, r0
    bf46:	2b00      	cmp	r3, #0
    bf48:	bf0c      	ite	eq
    bf4a:	2301      	moveq	r3, #1
    bf4c:	2300      	movne	r3, #0
    bf4e:	b2db      	uxtb	r3, r3
    bf50:	e036      	b.n	bfc0 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    bf52:	683b      	ldr	r3, [r7, #0]
    bf54:	885b      	ldrh	r3, [r3, #2]
    bf56:	b29b      	uxth	r3, r3
    bf58:	b2db      	uxtb	r3, r3
    bf5a:	4618      	mov	r0, r3
    bf5c:	4b1b      	ldr	r3, [pc, #108]	; (bfcc <usbdc_set_req+0xdc>)
    bf5e:	4798      	blx	r3
    bf60:	4603      	mov	r3, r0
    bf62:	f083 0301 	eor.w	r3, r3, #1
    bf66:	b2db      	uxtb	r3, r3
    bf68:	2b00      	cmp	r3, #0
    bf6a:	d001      	beq.n	bf70 <usbdc_set_req+0x80>
			return false;
    bf6c:	2300      	movs	r3, #0
    bf6e:	e027      	b.n	bfc0 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    bf70:	79f8      	ldrb	r0, [r7, #7]
    bf72:	2301      	movs	r3, #1
    bf74:	2200      	movs	r2, #0
    bf76:	2100      	movs	r1, #0
    bf78:	4c13      	ldr	r4, [pc, #76]	; (bfc8 <usbdc_set_req+0xd8>)
    bf7a:	47a0      	blx	r4
    bf7c:	4603      	mov	r3, r0
    bf7e:	2b00      	cmp	r3, #0
    bf80:	bf0c      	ite	eq
    bf82:	2301      	moveq	r3, #1
    bf84:	2300      	movne	r3, #0
    bf86:	b2db      	uxtb	r3, r3
    bf88:	e01a      	b.n	bfc0 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    bf8a:	79fb      	ldrb	r3, [r7, #7]
    bf8c:	6839      	ldr	r1, [r7, #0]
    bf8e:	4618      	mov	r0, r3
    bf90:	4b0f      	ldr	r3, [pc, #60]	; (bfd0 <usbdc_set_req+0xe0>)
    bf92:	4798      	blx	r3
    bf94:	4603      	mov	r3, r0
    bf96:	e013      	b.n	bfc0 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    bf98:	79fb      	ldrb	r3, [r7, #7]
    bf9a:	6839      	ldr	r1, [r7, #0]
    bf9c:	4618      	mov	r0, r3
    bf9e:	4b0d      	ldr	r3, [pc, #52]	; (bfd4 <usbdc_set_req+0xe4>)
    bfa0:	4798      	blx	r3
    bfa2:	4603      	mov	r3, r0
    bfa4:	e00c      	b.n	bfc0 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    bfa6:	683b      	ldr	r3, [r7, #0]
    bfa8:	885b      	ldrh	r3, [r3, #2]
    bfaa:	b29a      	uxth	r2, r3
    bfac:	683b      	ldr	r3, [r7, #0]
    bfae:	889b      	ldrh	r3, [r3, #4]
    bfb0:	b29b      	uxth	r3, r3
    bfb2:	4619      	mov	r1, r3
    bfb4:	4610      	mov	r0, r2
    bfb6:	4b08      	ldr	r3, [pc, #32]	; (bfd8 <usbdc_set_req+0xe8>)
    bfb8:	4798      	blx	r3
    bfba:	4603      	mov	r3, r0
    bfbc:	e000      	b.n	bfc0 <usbdc_set_req+0xd0>
	default:
		return false;
    bfbe:	2300      	movs	r3, #0
	}
}
    bfc0:	4618      	mov	r0, r3
    bfc2:	370c      	adds	r7, #12
    bfc4:	46bd      	mov	sp, r7
    bfc6:	bd90      	pop	{r4, r7, pc}
    bfc8:	0000c2c5 	.word	0x0000c2c5
    bfcc:	0000bca5 	.word	0x0000bca5
    bfd0:	0000bbc1 	.word	0x0000bbc1
    bfd4:	0000bc19 	.word	0x0000bc19
    bfd8:	0000bdb1 	.word	0x0000bdb1

0000bfdc <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    bfdc:	b580      	push	{r7, lr}
    bfde:	b082      	sub	sp, #8
    bfe0:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    bfe2:	4b0a      	ldr	r3, [pc, #40]	; (c00c <usbdc_sof_notify+0x30>)
    bfe4:	685b      	ldr	r3, [r3, #4]
    bfe6:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    bfe8:	e009      	b.n	bffe <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    bfea:	687b      	ldr	r3, [r7, #4]
    bfec:	685b      	ldr	r3, [r3, #4]
    bfee:	2b00      	cmp	r3, #0
    bff0:	d002      	beq.n	bff8 <usbdc_sof_notify+0x1c>
			sof->cb();
    bff2:	687b      	ldr	r3, [r7, #4]
    bff4:	685b      	ldr	r3, [r3, #4]
    bff6:	4798      	blx	r3
		}
		sof = sof->next;
    bff8:	687b      	ldr	r3, [r7, #4]
    bffa:	681b      	ldr	r3, [r3, #0]
    bffc:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    bffe:	687b      	ldr	r3, [r7, #4]
    c000:	2b00      	cmp	r3, #0
    c002:	d1f2      	bne.n	bfea <usbdc_sof_notify+0xe>
	}
}
    c004:	bf00      	nop
    c006:	3708      	adds	r7, #8
    c008:	46bd      	mov	sp, r7
    c00a:	bd80      	pop	{r7, pc}
    c00c:	200010a0 	.word	0x200010a0

0000c010 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    c010:	b580      	push	{r7, lr}
    c012:	b084      	sub	sp, #16
    c014:	af00      	add	r7, sp, #0
    c016:	4603      	mov	r3, r0
    c018:	6039      	str	r1, [r7, #0]
    c01a:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    c01c:	4b0b      	ldr	r3, [pc, #44]	; (c04c <usbdc_change_notify+0x3c>)
    c01e:	68db      	ldr	r3, [r3, #12]
    c020:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    c022:	e00c      	b.n	c03e <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    c024:	68fb      	ldr	r3, [r7, #12]
    c026:	685b      	ldr	r3, [r3, #4]
    c028:	2b00      	cmp	r3, #0
    c02a:	d005      	beq.n	c038 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    c02c:	68fb      	ldr	r3, [r7, #12]
    c02e:	685b      	ldr	r3, [r3, #4]
    c030:	79fa      	ldrb	r2, [r7, #7]
    c032:	6839      	ldr	r1, [r7, #0]
    c034:	4610      	mov	r0, r2
    c036:	4798      	blx	r3
		}
		cg = cg->next;
    c038:	68fb      	ldr	r3, [r7, #12]
    c03a:	681b      	ldr	r3, [r3, #0]
    c03c:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    c03e:	68fb      	ldr	r3, [r7, #12]
    c040:	2b00      	cmp	r3, #0
    c042:	d1ef      	bne.n	c024 <usbdc_change_notify+0x14>
	}
}
    c044:	bf00      	nop
    c046:	3710      	adds	r7, #16
    c048:	46bd      	mov	sp, r7
    c04a:	bd80      	pop	{r7, pc}
    c04c:	200010a0 	.word	0x200010a0

0000c050 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c050:	b580      	push	{r7, lr}
    c052:	b084      	sub	sp, #16
    c054:	af00      	add	r7, sp, #0
    c056:	4603      	mov	r3, r0
    c058:	6039      	str	r1, [r7, #0]
    c05a:	71fb      	strb	r3, [r7, #7]
    c05c:	4613      	mov	r3, r2
    c05e:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    c060:	4b12      	ldr	r3, [pc, #72]	; (c0ac <usbdc_request_handler+0x5c>)
    c062:	689b      	ldr	r3, [r3, #8]
    c064:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    c066:	e019      	b.n	c09c <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    c068:	68fb      	ldr	r3, [r7, #12]
    c06a:	685b      	ldr	r3, [r3, #4]
    c06c:	2b00      	cmp	r3, #0
    c06e:	d012      	beq.n	c096 <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    c070:	68fb      	ldr	r3, [r7, #12]
    c072:	685b      	ldr	r3, [r3, #4]
    c074:	79ba      	ldrb	r2, [r7, #6]
    c076:	79f8      	ldrb	r0, [r7, #7]
    c078:	6839      	ldr	r1, [r7, #0]
    c07a:	4798      	blx	r3
    c07c:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    c07e:	68bb      	ldr	r3, [r7, #8]
    c080:	2b00      	cmp	r3, #0
    c082:	d101      	bne.n	c088 <usbdc_request_handler+0x38>
				return true;
    c084:	2301      	movs	r3, #1
    c086:	e00d      	b.n	c0a4 <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    c088:	68bb      	ldr	r3, [r7, #8]
    c08a:	f113 0f0a 	cmn.w	r3, #10
    c08e:	d002      	beq.n	c096 <usbdc_request_handler+0x46>
				return -1;
    c090:	f04f 33ff 	mov.w	r3, #4294967295
    c094:	e006      	b.n	c0a4 <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    c096:	68fb      	ldr	r3, [r7, #12]
    c098:	681b      	ldr	r3, [r3, #0]
    c09a:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    c09c:	68fb      	ldr	r3, [r7, #12]
    c09e:	2b00      	cmp	r3, #0
    c0a0:	d1e2      	bne.n	c068 <usbdc_request_handler+0x18>
	}
	return false;
    c0a2:	2300      	movs	r3, #0
}
    c0a4:	4618      	mov	r0, r3
    c0a6:	3710      	adds	r7, #16
    c0a8:	46bd      	mov	sp, r7
    c0aa:	bd80      	pop	{r7, pc}
    c0ac:	200010a0 	.word	0x200010a0

0000c0b0 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    c0b0:	b580      	push	{r7, lr}
    c0b2:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    c0b4:	4b01      	ldr	r3, [pc, #4]	; (c0bc <usbd_sof_cb+0xc>)
    c0b6:	4798      	blx	r3
}
    c0b8:	bf00      	nop
    c0ba:	bd80      	pop	{r7, pc}
    c0bc:	0000bfdd 	.word	0x0000bfdd

0000c0c0 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    c0c0:	b580      	push	{r7, lr}
    c0c2:	b082      	sub	sp, #8
    c0c4:	af00      	add	r7, sp, #0
    c0c6:	4603      	mov	r3, r0
    c0c8:	6039      	str	r1, [r7, #0]
    c0ca:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    c0cc:	79fb      	ldrb	r3, [r7, #7]
    c0ce:	2200      	movs	r2, #0
    c0d0:	6839      	ldr	r1, [r7, #0]
    c0d2:	4618      	mov	r0, r3
    c0d4:	4b14      	ldr	r3, [pc, #80]	; (c128 <usbdc_cb_ctl_req+0x68>)
    c0d6:	4798      	blx	r3
    c0d8:	4603      	mov	r3, r0
    c0da:	f1b3 3fff 	cmp.w	r3, #4294967295
    c0de:	d00b      	beq.n	c0f8 <usbdc_cb_ctl_req+0x38>
    c0e0:	2b01      	cmp	r3, #1
    c0e2:	d007      	beq.n	c0f4 <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    c0e4:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    c0e6:	683b      	ldr	r3, [r7, #0]
    c0e8:	781b      	ldrb	r3, [r3, #0]
    c0ea:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    c0ee:	2b00      	cmp	r3, #0
    c0f0:	d007      	beq.n	c102 <usbdc_cb_ctl_req+0x42>
    c0f2:	e003      	b.n	c0fc <usbdc_cb_ctl_req+0x3c>
		return true;
    c0f4:	2301      	movs	r3, #1
    c0f6:	e013      	b.n	c120 <usbdc_cb_ctl_req+0x60>
		return false;
    c0f8:	2300      	movs	r3, #0
    c0fa:	e011      	b.n	c120 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    c0fc:	2b80      	cmp	r3, #128	; 0x80
    c0fe:	d007      	beq.n	c110 <usbdc_cb_ctl_req+0x50>
    c100:	e00d      	b.n	c11e <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    c102:	79fb      	ldrb	r3, [r7, #7]
    c104:	6839      	ldr	r1, [r7, #0]
    c106:	4618      	mov	r0, r3
    c108:	4b08      	ldr	r3, [pc, #32]	; (c12c <usbdc_cb_ctl_req+0x6c>)
    c10a:	4798      	blx	r3
    c10c:	4603      	mov	r3, r0
    c10e:	e007      	b.n	c120 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    c110:	79fb      	ldrb	r3, [r7, #7]
    c112:	6839      	ldr	r1, [r7, #0]
    c114:	4618      	mov	r0, r3
    c116:	4b06      	ldr	r3, [pc, #24]	; (c130 <usbdc_cb_ctl_req+0x70>)
    c118:	4798      	blx	r3
    c11a:	4603      	mov	r3, r0
    c11c:	e000      	b.n	c120 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    c11e:	2300      	movs	r3, #0
	}
}
    c120:	4618      	mov	r0, r3
    c122:	3708      	adds	r7, #8
    c124:	46bd      	mov	sp, r7
    c126:	bd80      	pop	{r7, pc}
    c128:	0000c051 	.word	0x0000c051
    c12c:	0000bef1 	.word	0x0000bef1
    c130:	0000bb19 	.word	0x0000bb19

0000c134 <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    c134:	b580      	push	{r7, lr}
    c136:	b082      	sub	sp, #8
    c138:	af00      	add	r7, sp, #0
    c13a:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    c13c:	687b      	ldr	r3, [r7, #4]
    c13e:	781b      	ldrb	r3, [r3, #0]
    c140:	2b00      	cmp	r3, #0
    c142:	d135      	bne.n	c1b0 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    c144:	687b      	ldr	r3, [r7, #4]
    c146:	785b      	ldrb	r3, [r3, #1]
    c148:	2b05      	cmp	r3, #5
    c14a:	d019      	beq.n	c180 <usbdc_ctrl_status_end+0x4c>
    c14c:	2b09      	cmp	r3, #9
    c14e:	d000      	beq.n	c152 <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    c150:	e02f      	b.n	c1b2 <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    c152:	687b      	ldr	r3, [r7, #4]
    c154:	885b      	ldrh	r3, [r3, #2]
    c156:	b29b      	uxth	r3, r3
    c158:	b2da      	uxtb	r2, r3
    c15a:	4b17      	ldr	r3, [pc, #92]	; (c1b8 <usbdc_ctrl_status_end+0x84>)
    c15c:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    c15e:	687b      	ldr	r3, [r7, #4]
    c160:	885b      	ldrh	r3, [r3, #2]
    c162:	b29b      	uxth	r3, r3
    c164:	2b00      	cmp	r3, #0
    c166:	d001      	beq.n	c16c <usbdc_ctrl_status_end+0x38>
    c168:	2204      	movs	r2, #4
    c16a:	e000      	b.n	c16e <usbdc_ctrl_status_end+0x3a>
    c16c:	2203      	movs	r2, #3
    c16e:	4b12      	ldr	r3, [pc, #72]	; (c1b8 <usbdc_ctrl_status_end+0x84>)
    c170:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    c172:	4b11      	ldr	r3, [pc, #68]	; (c1b8 <usbdc_ctrl_status_end+0x84>)
    c174:	7e9b      	ldrb	r3, [r3, #26]
    c176:	4619      	mov	r1, r3
    c178:	2001      	movs	r0, #1
    c17a:	4b10      	ldr	r3, [pc, #64]	; (c1bc <usbdc_ctrl_status_end+0x88>)
    c17c:	4798      	blx	r3
		break;
    c17e:	e018      	b.n	c1b2 <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    c180:	687b      	ldr	r3, [r7, #4]
    c182:	885b      	ldrh	r3, [r3, #2]
    c184:	b29b      	uxth	r3, r3
    c186:	b2db      	uxtb	r3, r3
    c188:	4618      	mov	r0, r3
    c18a:	4b0d      	ldr	r3, [pc, #52]	; (c1c0 <usbdc_ctrl_status_end+0x8c>)
    c18c:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    c18e:	687b      	ldr	r3, [r7, #4]
    c190:	885b      	ldrh	r3, [r3, #2]
    c192:	b29b      	uxth	r3, r3
    c194:	2b00      	cmp	r3, #0
    c196:	d001      	beq.n	c19c <usbdc_ctrl_status_end+0x68>
    c198:	2203      	movs	r2, #3
    c19a:	e000      	b.n	c19e <usbdc_ctrl_status_end+0x6a>
    c19c:	2202      	movs	r2, #2
    c19e:	4b06      	ldr	r3, [pc, #24]	; (c1b8 <usbdc_ctrl_status_end+0x84>)
    c1a0:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    c1a2:	4b05      	ldr	r3, [pc, #20]	; (c1b8 <usbdc_ctrl_status_end+0x84>)
    c1a4:	7e9b      	ldrb	r3, [r3, #26]
    c1a6:	4619      	mov	r1, r3
    c1a8:	2001      	movs	r0, #1
    c1aa:	4b04      	ldr	r3, [pc, #16]	; (c1bc <usbdc_ctrl_status_end+0x88>)
    c1ac:	4798      	blx	r3
		break;
    c1ae:	e000      	b.n	c1b2 <usbdc_ctrl_status_end+0x7e>
		return;
    c1b0:	bf00      	nop
	}
}
    c1b2:	3708      	adds	r7, #8
    c1b4:	46bd      	mov	sp, r7
    c1b6:	bd80      	pop	{r7, pc}
    c1b8:	200010a0 	.word	0x200010a0
    c1bc:	0000c011 	.word	0x0000c011
    c1c0:	0000bd91 	.word	0x0000bd91

0000c1c4 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    c1c4:	b580      	push	{r7, lr}
    c1c6:	b082      	sub	sp, #8
    c1c8:	af00      	add	r7, sp, #0
    c1ca:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    c1cc:	2201      	movs	r2, #1
    c1ce:	6879      	ldr	r1, [r7, #4]
    c1d0:	2000      	movs	r0, #0
    c1d2:	4b03      	ldr	r3, [pc, #12]	; (c1e0 <usbdc_ctrl_data_end+0x1c>)
    c1d4:	4798      	blx	r3
	return false;
    c1d6:	2300      	movs	r3, #0
}
    c1d8:	4618      	mov	r0, r3
    c1da:	3708      	adds	r7, #8
    c1dc:	46bd      	mov	sp, r7
    c1de:	bd80      	pop	{r7, pc}
    c1e0:	0000c051 	.word	0x0000c051

0000c1e4 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    c1e4:	b580      	push	{r7, lr}
    c1e6:	b082      	sub	sp, #8
    c1e8:	af00      	add	r7, sp, #0
    c1ea:	4603      	mov	r3, r0
    c1ec:	603a      	str	r2, [r7, #0]
    c1ee:	71fb      	strb	r3, [r7, #7]
    c1f0:	460b      	mov	r3, r1
    c1f2:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    c1f4:	79bb      	ldrb	r3, [r7, #6]
    c1f6:	2b00      	cmp	r3, #0
    c1f8:	d002      	beq.n	c200 <usbdc_cb_ctl_done+0x1c>
    c1fa:	2b01      	cmp	r3, #1
    c1fc:	d004      	beq.n	c208 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    c1fe:	e008      	b.n	c212 <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    c200:	6838      	ldr	r0, [r7, #0]
    c202:	4b06      	ldr	r3, [pc, #24]	; (c21c <usbdc_cb_ctl_done+0x38>)
    c204:	4798      	blx	r3
		break;
    c206:	e004      	b.n	c212 <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    c208:	6838      	ldr	r0, [r7, #0]
    c20a:	4b05      	ldr	r3, [pc, #20]	; (c220 <usbdc_cb_ctl_done+0x3c>)
    c20c:	4798      	blx	r3
    c20e:	4603      	mov	r3, r0
    c210:	e000      	b.n	c214 <usbdc_cb_ctl_done+0x30>
	}
	return false;
    c212:	2300      	movs	r3, #0
}
    c214:	4618      	mov	r0, r3
    c216:	3708      	adds	r7, #8
    c218:	46bd      	mov	sp, r7
    c21a:	bd80      	pop	{r7, pc}
    c21c:	0000c135 	.word	0x0000c135
    c220:	0000c1c5 	.word	0x0000c1c5

0000c224 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    c224:	b580      	push	{r7, lr}
    c226:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    c228:	4b10      	ldr	r3, [pc, #64]	; (c26c <usbdc_reset+0x48>)
    c22a:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    c22c:	4b10      	ldr	r3, [pc, #64]	; (c270 <usbdc_reset+0x4c>)
    c22e:	2202      	movs	r2, #2
    c230:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    c232:	4b0f      	ldr	r3, [pc, #60]	; (c270 <usbdc_reset+0x4c>)
    c234:	2200      	movs	r2, #0
    c236:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    c238:	4b0d      	ldr	r3, [pc, #52]	; (c270 <usbdc_reset+0x4c>)
    c23a:	2200      	movs	r2, #0
    c23c:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    c23e:	2000      	movs	r0, #0
    c240:	4b0c      	ldr	r3, [pc, #48]	; (c274 <usbdc_reset+0x50>)
    c242:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    c244:	4b0a      	ldr	r3, [pc, #40]	; (c270 <usbdc_reset+0x4c>)
    c246:	7f1b      	ldrb	r3, [r3, #28]
    c248:	4618      	mov	r0, r3
    c24a:	4b0b      	ldr	r3, [pc, #44]	; (c278 <usbdc_reset+0x54>)
    c24c:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    c24e:	4a0b      	ldr	r2, [pc, #44]	; (c27c <usbdc_reset+0x58>)
    c250:	2100      	movs	r1, #0
    c252:	2000      	movs	r0, #0
    c254:	4b0a      	ldr	r3, [pc, #40]	; (c280 <usbdc_reset+0x5c>)
    c256:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    c258:	4a0a      	ldr	r2, [pc, #40]	; (c284 <usbdc_reset+0x60>)
    c25a:	2102      	movs	r1, #2
    c25c:	2000      	movs	r0, #0
    c25e:	4b08      	ldr	r3, [pc, #32]	; (c280 <usbdc_reset+0x5c>)
    c260:	4798      	blx	r3
	usb_d_ep_enable(0);
    c262:	2000      	movs	r0, #0
    c264:	4b08      	ldr	r3, [pc, #32]	; (c288 <usbdc_reset+0x64>)
    c266:	4798      	blx	r3
}
    c268:	bf00      	nop
    c26a:	bd80      	pop	{r7, pc}
    c26c:	0000bc71 	.word	0x0000bc71
    c270:	200010a0 	.word	0x200010a0
    c274:	00002b61 	.word	0x00002b61
    c278:	00002a9d 	.word	0x00002a9d
    c27c:	0000c0c1 	.word	0x0000c0c1
    c280:	00002e61 	.word	0x00002e61
    c284:	0000c1e5 	.word	0x0000c1e5
    c288:	00002bb1 	.word	0x00002bb1

0000c28c <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    c28c:	b580      	push	{r7, lr}
    c28e:	b082      	sub	sp, #8
    c290:	af00      	add	r7, sp, #0
    c292:	4603      	mov	r3, r0
    c294:	6039      	str	r1, [r7, #0]
    c296:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    c298:	79fb      	ldrb	r3, [r7, #7]
    c29a:	2b00      	cmp	r3, #0
    c29c:	d002      	beq.n	c2a4 <usbd_event_cb+0x18>
    c29e:	2b01      	cmp	r3, #1
    c2a0:	d005      	beq.n	c2ae <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    c2a2:	e007      	b.n	c2b4 <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    c2a4:	6839      	ldr	r1, [r7, #0]
    c2a6:	2000      	movs	r0, #0
    c2a8:	4b04      	ldr	r3, [pc, #16]	; (c2bc <usbd_event_cb+0x30>)
    c2aa:	4798      	blx	r3
		break;
    c2ac:	e002      	b.n	c2b4 <usbd_event_cb+0x28>
		usbdc_reset();
    c2ae:	4b04      	ldr	r3, [pc, #16]	; (c2c0 <usbd_event_cb+0x34>)
    c2b0:	4798      	blx	r3
		break;
    c2b2:	bf00      	nop
	}
}
    c2b4:	bf00      	nop
    c2b6:	3708      	adds	r7, #8
    c2b8:	46bd      	mov	sp, r7
    c2ba:	bd80      	pop	{r7, pc}
    c2bc:	0000c011 	.word	0x0000c011
    c2c0:	0000c225 	.word	0x0000c225

0000c2c4 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    c2c4:	b580      	push	{r7, lr}
    c2c6:	b088      	sub	sp, #32
    c2c8:	af00      	add	r7, sp, #0
    c2ca:	60b9      	str	r1, [r7, #8]
    c2cc:	607a      	str	r2, [r7, #4]
    c2ce:	461a      	mov	r2, r3
    c2d0:	4603      	mov	r3, r0
    c2d2:	73fb      	strb	r3, [r7, #15]
    c2d4:	4613      	mov	r3, r2
    c2d6:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c2d8:	68bb      	ldr	r3, [r7, #8]
    c2da:	617b      	str	r3, [r7, #20]
    c2dc:	687b      	ldr	r3, [r7, #4]
    c2de:	61bb      	str	r3, [r7, #24]
    c2e0:	7bfb      	ldrb	r3, [r7, #15]
    c2e2:	773b      	strb	r3, [r7, #28]
    c2e4:	7bbb      	ldrb	r3, [r7, #14]
    c2e6:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    c2e8:	f107 0314 	add.w	r3, r7, #20
    c2ec:	4618      	mov	r0, r3
    c2ee:	4b03      	ldr	r3, [pc, #12]	; (c2fc <usbdc_xfer+0x38>)
    c2f0:	4798      	blx	r3
    c2f2:	4603      	mov	r3, r0
}
    c2f4:	4618      	mov	r0, r3
    c2f6:	3720      	adds	r7, #32
    c2f8:	46bd      	mov	sp, r7
    c2fa:	bd80      	pop	{r7, pc}
    c2fc:	00002c21 	.word	0x00002c21

0000c300 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    c300:	b580      	push	{r7, lr}
    c302:	b082      	sub	sp, #8
    c304:	af00      	add	r7, sp, #0
    c306:	4603      	mov	r3, r0
    c308:	6039      	str	r1, [r7, #0]
    c30a:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    c30c:	79fb      	ldrb	r3, [r7, #7]
    c30e:	2b01      	cmp	r3, #1
    c310:	d009      	beq.n	c326 <usbdc_register_handler+0x26>
    c312:	2b02      	cmp	r3, #2
    c314:	d00c      	beq.n	c330 <usbdc_register_handler+0x30>
    c316:	2b00      	cmp	r3, #0
    c318:	d000      	beq.n	c31c <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    c31a:	e00e      	b.n	c33a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    c31c:	6839      	ldr	r1, [r7, #0]
    c31e:	4809      	ldr	r0, [pc, #36]	; (c344 <usbdc_register_handler+0x44>)
    c320:	4b09      	ldr	r3, [pc, #36]	; (c348 <usbdc_register_handler+0x48>)
    c322:	4798      	blx	r3
		break;
    c324:	e009      	b.n	c33a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    c326:	6839      	ldr	r1, [r7, #0]
    c328:	4808      	ldr	r0, [pc, #32]	; (c34c <usbdc_register_handler+0x4c>)
    c32a:	4b07      	ldr	r3, [pc, #28]	; (c348 <usbdc_register_handler+0x48>)
    c32c:	4798      	blx	r3
		break;
    c32e:	e004      	b.n	c33a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    c330:	6839      	ldr	r1, [r7, #0]
    c332:	4807      	ldr	r0, [pc, #28]	; (c350 <usbdc_register_handler+0x50>)
    c334:	4b04      	ldr	r3, [pc, #16]	; (c348 <usbdc_register_handler+0x48>)
    c336:	4798      	blx	r3
		break;
    c338:	bf00      	nop
	}
}
    c33a:	bf00      	nop
    c33c:	3708      	adds	r7, #8
    c33e:	46bd      	mov	sp, r7
    c340:	bd80      	pop	{r7, pc}
    c342:	bf00      	nop
    c344:	200010a4 	.word	0x200010a4
    c348:	00002fb9 	.word	0x00002fb9
    c34c:	200010a8 	.word	0x200010a8
    c350:	200010ac 	.word	0x200010ac

0000c354 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    c354:	b580      	push	{r7, lr}
    c356:	b084      	sub	sp, #16
    c358:	af00      	add	r7, sp, #0
    c35a:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    c35c:	687b      	ldr	r3, [r7, #4]
    c35e:	2b00      	cmp	r3, #0
    c360:	bf14      	ite	ne
    c362:	2301      	movne	r3, #1
    c364:	2300      	moveq	r3, #0
    c366:	b2db      	uxtb	r3, r3
    c368:	f240 3255 	movw	r2, #853	; 0x355
    c36c:	4910      	ldr	r1, [pc, #64]	; (c3b0 <usbdc_init+0x5c>)
    c36e:	4618      	mov	r0, r3
    c370:	4b10      	ldr	r3, [pc, #64]	; (c3b4 <usbdc_init+0x60>)
    c372:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    c374:	4b10      	ldr	r3, [pc, #64]	; (c3b8 <usbdc_init+0x64>)
    c376:	4798      	blx	r3
    c378:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    c37a:	68fb      	ldr	r3, [r7, #12]
    c37c:	2b00      	cmp	r3, #0
    c37e:	da01      	bge.n	c384 <usbdc_init+0x30>
		return rc;
    c380:	68fb      	ldr	r3, [r7, #12]
    c382:	e010      	b.n	c3a6 <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    c384:	2220      	movs	r2, #32
    c386:	2100      	movs	r1, #0
    c388:	480c      	ldr	r0, [pc, #48]	; (c3bc <usbdc_init+0x68>)
    c38a:	4b0d      	ldr	r3, [pc, #52]	; (c3c0 <usbdc_init+0x6c>)
    c38c:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    c38e:	4a0b      	ldr	r2, [pc, #44]	; (c3bc <usbdc_init+0x68>)
    c390:	687b      	ldr	r3, [r7, #4]
    c392:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    c394:	490b      	ldr	r1, [pc, #44]	; (c3c4 <usbdc_init+0x70>)
    c396:	2000      	movs	r0, #0
    c398:	4b0b      	ldr	r3, [pc, #44]	; (c3c8 <usbdc_init+0x74>)
    c39a:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    c39c:	490b      	ldr	r1, [pc, #44]	; (c3cc <usbdc_init+0x78>)
    c39e:	2001      	movs	r0, #1
    c3a0:	4b09      	ldr	r3, [pc, #36]	; (c3c8 <usbdc_init+0x74>)
    c3a2:	4798      	blx	r3

	return 0;
    c3a4:	2300      	movs	r3, #0
}
    c3a6:	4618      	mov	r0, r3
    c3a8:	3710      	adds	r7, #16
    c3aa:	46bd      	mov	sp, r7
    c3ac:	bd80      	pop	{r7, pc}
    c3ae:	bf00      	nop
    c3b0:	00013254 	.word	0x00013254
    c3b4:	00002edd 	.word	0x00002edd
    c3b8:	00002989 	.word	0x00002989
    c3bc:	200010a0 	.word	0x200010a0
    c3c0:	00012ca9 	.word	0x00012ca9
    c3c4:	0000c0b1 	.word	0x0000c0b1
    c3c8:	00002a35 	.word	0x00002a35
    c3cc:	0000c28d 	.word	0x0000c28d

0000c3d0 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    c3d0:	b580      	push	{r7, lr}
    c3d2:	b082      	sub	sp, #8
    c3d4:	af00      	add	r7, sp, #0
    c3d6:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    c3d8:	6879      	ldr	r1, [r7, #4]
    c3da:	4803      	ldr	r0, [pc, #12]	; (c3e8 <usbdc_register_function+0x18>)
    c3dc:	4b03      	ldr	r3, [pc, #12]	; (c3ec <usbdc_register_function+0x1c>)
    c3de:	4798      	blx	r3
}
    c3e0:	bf00      	nop
    c3e2:	3708      	adds	r7, #8
    c3e4:	46bd      	mov	sp, r7
    c3e6:	bd80      	pop	{r7, pc}
    c3e8:	200010b0 	.word	0x200010b0
    c3ec:	00002fb9 	.word	0x00002fb9

0000c3f0 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    c3f0:	b580      	push	{r7, lr}
    c3f2:	b082      	sub	sp, #8
    c3f4:	af00      	add	r7, sp, #0
    c3f6:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    c3f8:	4b0f      	ldr	r3, [pc, #60]	; (c438 <usbdc_start+0x48>)
    c3fa:	7e9b      	ldrb	r3, [r3, #26]
    c3fc:	2b00      	cmp	r3, #0
    c3fe:	d002      	beq.n	c406 <usbdc_start+0x16>
		return ERR_BUSY;
    c400:	f06f 0303 	mvn.w	r3, #3
    c404:	e013      	b.n	c42e <usbdc_start+0x3e>
	}

	if (desces) {
    c406:	687b      	ldr	r3, [r7, #4]
    c408:	2b00      	cmp	r3, #0
    c40a:	d00e      	beq.n	c42a <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    c40c:	4a0a      	ldr	r2, [pc, #40]	; (c438 <usbdc_start+0x48>)
    c40e:	687b      	ldr	r3, [r7, #4]
    c410:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    c412:	687b      	ldr	r3, [r7, #4]
    c414:	681b      	ldr	r3, [r3, #0]
    c416:	79da      	ldrb	r2, [r3, #7]
    c418:	4b07      	ldr	r3, [pc, #28]	; (c438 <usbdc_start+0x48>)
    c41a:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    c41c:	4b06      	ldr	r3, [pc, #24]	; (c438 <usbdc_start+0x48>)
    c41e:	2201      	movs	r2, #1
    c420:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    c422:	4b06      	ldr	r3, [pc, #24]	; (c43c <usbdc_start+0x4c>)
    c424:	4798      	blx	r3
	return ERR_NONE;
    c426:	2300      	movs	r3, #0
    c428:	e001      	b.n	c42e <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    c42a:	f06f 0308 	mvn.w	r3, #8
}
    c42e:	4618      	mov	r0, r3
    c430:	3708      	adds	r7, #8
    c432:	46bd      	mov	sp, r7
    c434:	bd80      	pop	{r7, pc}
    c436:	bf00      	nop
    c438:	200010a0 	.word	0x200010a0
    c43c:	00002a59 	.word	0x00002a59

0000c440 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    c440:	b580      	push	{r7, lr}
    c442:	af00      	add	r7, sp, #0
	usb_d_attach();
    c444:	4b01      	ldr	r3, [pc, #4]	; (c44c <usbdc_attach+0xc>)
    c446:	4798      	blx	r3
}
    c448:	bf00      	nop
    c44a:	bd80      	pop	{r7, pc}
    c44c:	00002a6d 	.word	0x00002a6d

0000c450 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    c450:	b480      	push	{r7}
    c452:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    c454:	4b03      	ldr	r3, [pc, #12]	; (c464 <usbdc_get_ctrl_buffer+0x14>)
    c456:	695b      	ldr	r3, [r3, #20]
}
    c458:	4618      	mov	r0, r3
    c45a:	46bd      	mov	sp, r7
    c45c:	f85d 7b04 	ldr.w	r7, [sp], #4
    c460:	4770      	bx	lr
    c462:	bf00      	nop
    c464:	200010a0 	.word	0x200010a0

0000c468 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    c468:	b480      	push	{r7}
    c46a:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    c46c:	4b07      	ldr	r3, [pc, #28]	; (c48c <usbdc_get_state+0x24>)
    c46e:	7e9b      	ldrb	r3, [r3, #26]
    c470:	f003 0310 	and.w	r3, r3, #16
    c474:	2b00      	cmp	r3, #0
    c476:	d001      	beq.n	c47c <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    c478:	2310      	movs	r3, #16
    c47a:	e001      	b.n	c480 <usbdc_get_state+0x18>
	}
	return usbdc.state;
    c47c:	4b03      	ldr	r3, [pc, #12]	; (c48c <usbdc_get_state+0x24>)
    c47e:	7e9b      	ldrb	r3, [r3, #26]
}
    c480:	4618      	mov	r0, r3
    c482:	46bd      	mov	sp, r7
    c484:	f85d 7b04 	ldr.w	r7, [sp], #4
    c488:	4770      	bx	lr
    c48a:	bf00      	nop
    c48c:	200010a0 	.word	0x200010a0

0000c490 <usb_get_u16>:
{
    c490:	b480      	push	{r7}
    c492:	b083      	sub	sp, #12
    c494:	af00      	add	r7, sp, #0
    c496:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    c498:	687b      	ldr	r3, [r7, #4]
    c49a:	781b      	ldrb	r3, [r3, #0]
    c49c:	b29a      	uxth	r2, r3
    c49e:	687b      	ldr	r3, [r7, #4]
    c4a0:	3301      	adds	r3, #1
    c4a2:	781b      	ldrb	r3, [r3, #0]
    c4a4:	b29b      	uxth	r3, r3
    c4a6:	021b      	lsls	r3, r3, #8
    c4a8:	b29b      	uxth	r3, r3
    c4aa:	4413      	add	r3, r2
    c4ac:	b29b      	uxth	r3, r3
}
    c4ae:	4618      	mov	r0, r3
    c4b0:	370c      	adds	r7, #12
    c4b2:	46bd      	mov	sp, r7
    c4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    c4b8:	4770      	bx	lr

0000c4ba <usb_desc_len>:
{
    c4ba:	b480      	push	{r7}
    c4bc:	b083      	sub	sp, #12
    c4be:	af00      	add	r7, sp, #0
    c4c0:	6078      	str	r0, [r7, #4]
	return desc[0];
    c4c2:	687b      	ldr	r3, [r7, #4]
    c4c4:	781b      	ldrb	r3, [r3, #0]
}
    c4c6:	4618      	mov	r0, r3
    c4c8:	370c      	adds	r7, #12
    c4ca:	46bd      	mov	sp, r7
    c4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    c4d0:	4770      	bx	lr

0000c4d2 <usb_desc_type>:
{
    c4d2:	b480      	push	{r7}
    c4d4:	b083      	sub	sp, #12
    c4d6:	af00      	add	r7, sp, #0
    c4d8:	6078      	str	r0, [r7, #4]
	return desc[1];
    c4da:	687b      	ldr	r3, [r7, #4]
    c4dc:	3301      	adds	r3, #1
    c4de:	781b      	ldrb	r3, [r3, #0]
}
    c4e0:	4618      	mov	r0, r3
    c4e2:	370c      	adds	r7, #12
    c4e4:	46bd      	mov	sp, r7
    c4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    c4ea:	4770      	bx	lr

0000c4ec <usb_desc_next>:
{
    c4ec:	b580      	push	{r7, lr}
    c4ee:	b082      	sub	sp, #8
    c4f0:	af00      	add	r7, sp, #0
    c4f2:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    c4f4:	6878      	ldr	r0, [r7, #4]
    c4f6:	4b05      	ldr	r3, [pc, #20]	; (c50c <usb_desc_next+0x20>)
    c4f8:	4798      	blx	r3
    c4fa:	4603      	mov	r3, r0
    c4fc:	461a      	mov	r2, r3
    c4fe:	687b      	ldr	r3, [r7, #4]
    c500:	4413      	add	r3, r2
}
    c502:	4618      	mov	r0, r3
    c504:	3708      	adds	r7, #8
    c506:	46bd      	mov	sp, r7
    c508:	bd80      	pop	{r7, pc}
    c50a:	bf00      	nop
    c50c:	0000c4bb 	.word	0x0000c4bb

0000c510 <usb_cfg_desc_total_len>:
{
    c510:	b580      	push	{r7, lr}
    c512:	b082      	sub	sp, #8
    c514:	af00      	add	r7, sp, #0
    c516:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    c518:	687b      	ldr	r3, [r7, #4]
    c51a:	3302      	adds	r3, #2
    c51c:	4618      	mov	r0, r3
    c51e:	4b03      	ldr	r3, [pc, #12]	; (c52c <usb_cfg_desc_total_len+0x1c>)
    c520:	4798      	blx	r3
    c522:	4603      	mov	r3, r0
}
    c524:	4618      	mov	r0, r3
    c526:	3708      	adds	r7, #8
    c528:	46bd      	mov	sp, r7
    c52a:	bd80      	pop	{r7, pc}
    c52c:	0000c491 	.word	0x0000c491

0000c530 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    c530:	b580      	push	{r7, lr}
    c532:	b082      	sub	sp, #8
    c534:	af00      	add	r7, sp, #0
    c536:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    c538:	6878      	ldr	r0, [r7, #4]
    c53a:	4b05      	ldr	r3, [pc, #20]	; (c550 <usb_cfg_desc_next+0x20>)
    c53c:	4798      	blx	r3
    c53e:	4603      	mov	r3, r0
    c540:	461a      	mov	r2, r3
    c542:	687b      	ldr	r3, [r7, #4]
    c544:	4413      	add	r3, r2
}
    c546:	4618      	mov	r0, r3
    c548:	3708      	adds	r7, #8
    c54a:	46bd      	mov	sp, r7
    c54c:	bd80      	pop	{r7, pc}
    c54e:	bf00      	nop
    c550:	0000c511 	.word	0x0000c511

0000c554 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    c554:	b580      	push	{r7, lr}
    c556:	b084      	sub	sp, #16
    c558:	af00      	add	r7, sp, #0
    c55a:	60f8      	str	r0, [r7, #12]
    c55c:	60b9      	str	r1, [r7, #8]
    c55e:	4613      	mov	r3, r2
    c560:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    c562:	e015      	b.n	c590 <usb_find_desc+0x3c>
		_desc_len_check();
    c564:	68f8      	ldr	r0, [r7, #12]
    c566:	4b0f      	ldr	r3, [pc, #60]	; (c5a4 <usb_find_desc+0x50>)
    c568:	4798      	blx	r3
    c56a:	4603      	mov	r3, r0
    c56c:	2b01      	cmp	r3, #1
    c56e:	d801      	bhi.n	c574 <usb_find_desc+0x20>
    c570:	2300      	movs	r3, #0
    c572:	e012      	b.n	c59a <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    c574:	68f8      	ldr	r0, [r7, #12]
    c576:	4b0c      	ldr	r3, [pc, #48]	; (c5a8 <usb_find_desc+0x54>)
    c578:	4798      	blx	r3
    c57a:	4603      	mov	r3, r0
    c57c:	461a      	mov	r2, r3
    c57e:	79fb      	ldrb	r3, [r7, #7]
    c580:	4293      	cmp	r3, r2
    c582:	d101      	bne.n	c588 <usb_find_desc+0x34>
			return desc;
    c584:	68fb      	ldr	r3, [r7, #12]
    c586:	e008      	b.n	c59a <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    c588:	68f8      	ldr	r0, [r7, #12]
    c58a:	4b08      	ldr	r3, [pc, #32]	; (c5ac <usb_find_desc+0x58>)
    c58c:	4798      	blx	r3
    c58e:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    c590:	68fa      	ldr	r2, [r7, #12]
    c592:	68bb      	ldr	r3, [r7, #8]
    c594:	429a      	cmp	r2, r3
    c596:	d3e5      	bcc.n	c564 <usb_find_desc+0x10>
	}
	return NULL;
    c598:	2300      	movs	r3, #0
}
    c59a:	4618      	mov	r0, r3
    c59c:	3710      	adds	r7, #16
    c59e:	46bd      	mov	sp, r7
    c5a0:	bd80      	pop	{r7, pc}
    c5a2:	bf00      	nop
    c5a4:	0000c4bb 	.word	0x0000c4bb
    c5a8:	0000c4d3 	.word	0x0000c4d3
    c5ac:	0000c4ed 	.word	0x0000c4ed

0000c5b0 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    c5b0:	b580      	push	{r7, lr}
    c5b2:	b082      	sub	sp, #8
    c5b4:	af00      	add	r7, sp, #0
    c5b6:	6078      	str	r0, [r7, #4]
    c5b8:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    c5ba:	e019      	b.n	c5f0 <usb_find_ep_desc+0x40>
		_desc_len_check();
    c5bc:	6878      	ldr	r0, [r7, #4]
    c5be:	4b12      	ldr	r3, [pc, #72]	; (c608 <usb_find_ep_desc+0x58>)
    c5c0:	4798      	blx	r3
    c5c2:	4603      	mov	r3, r0
    c5c4:	2b01      	cmp	r3, #1
    c5c6:	d801      	bhi.n	c5cc <usb_find_ep_desc+0x1c>
    c5c8:	2300      	movs	r3, #0
    c5ca:	e018      	b.n	c5fe <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    c5cc:	6878      	ldr	r0, [r7, #4]
    c5ce:	4b0f      	ldr	r3, [pc, #60]	; (c60c <usb_find_ep_desc+0x5c>)
    c5d0:	4798      	blx	r3
    c5d2:	4603      	mov	r3, r0
    c5d4:	2b04      	cmp	r3, #4
    c5d6:	d010      	beq.n	c5fa <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    c5d8:	6878      	ldr	r0, [r7, #4]
    c5da:	4b0c      	ldr	r3, [pc, #48]	; (c60c <usb_find_ep_desc+0x5c>)
    c5dc:	4798      	blx	r3
    c5de:	4603      	mov	r3, r0
    c5e0:	2b05      	cmp	r3, #5
    c5e2:	d101      	bne.n	c5e8 <usb_find_ep_desc+0x38>
			return desc;
    c5e4:	687b      	ldr	r3, [r7, #4]
    c5e6:	e00a      	b.n	c5fe <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    c5e8:	6878      	ldr	r0, [r7, #4]
    c5ea:	4b09      	ldr	r3, [pc, #36]	; (c610 <usb_find_ep_desc+0x60>)
    c5ec:	4798      	blx	r3
    c5ee:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    c5f0:	687a      	ldr	r2, [r7, #4]
    c5f2:	683b      	ldr	r3, [r7, #0]
    c5f4:	429a      	cmp	r2, r3
    c5f6:	d3e1      	bcc.n	c5bc <usb_find_ep_desc+0xc>
    c5f8:	e000      	b.n	c5fc <usb_find_ep_desc+0x4c>
			break;
    c5fa:	bf00      	nop
	}
	return NULL;
    c5fc:	2300      	movs	r3, #0
}
    c5fe:	4618      	mov	r0, r3
    c600:	3708      	adds	r7, #8
    c602:	46bd      	mov	sp, r7
    c604:	bd80      	pop	{r7, pc}
    c606:	bf00      	nop
    c608:	0000c4bb 	.word	0x0000c4bb
    c60c:	0000c4d3 	.word	0x0000c4d3
    c610:	0000c4ed 	.word	0x0000c4ed

0000c614 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    c614:	b580      	push	{r7, lr}
    c616:	b084      	sub	sp, #16
    c618:	af00      	add	r7, sp, #0
    c61a:	60f8      	str	r0, [r7, #12]
    c61c:	60b9      	str	r1, [r7, #8]
    c61e:	4613      	mov	r3, r2
    c620:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    c622:	2202      	movs	r2, #2
    c624:	68b9      	ldr	r1, [r7, #8]
    c626:	68f8      	ldr	r0, [r7, #12]
    c628:	4b15      	ldr	r3, [pc, #84]	; (c680 <usb_find_cfg_desc+0x6c>)
    c62a:	4798      	blx	r3
    c62c:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    c62e:	68fb      	ldr	r3, [r7, #12]
    c630:	2b00      	cmp	r3, #0
    c632:	d11a      	bne.n	c66a <usb_find_cfg_desc+0x56>
		return NULL;
    c634:	2300      	movs	r3, #0
    c636:	e01f      	b.n	c678 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    c638:	68f8      	ldr	r0, [r7, #12]
    c63a:	4b12      	ldr	r3, [pc, #72]	; (c684 <usb_find_cfg_desc+0x70>)
    c63c:	4798      	blx	r3
    c63e:	4603      	mov	r3, r0
    c640:	2b01      	cmp	r3, #1
    c642:	d801      	bhi.n	c648 <usb_find_cfg_desc+0x34>
    c644:	2300      	movs	r3, #0
    c646:	e017      	b.n	c678 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    c648:	68fb      	ldr	r3, [r7, #12]
    c64a:	3301      	adds	r3, #1
    c64c:	781b      	ldrb	r3, [r3, #0]
    c64e:	2b02      	cmp	r3, #2
    c650:	d110      	bne.n	c674 <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    c652:	68fb      	ldr	r3, [r7, #12]
    c654:	3305      	adds	r3, #5
    c656:	781b      	ldrb	r3, [r3, #0]
    c658:	79fa      	ldrb	r2, [r7, #7]
    c65a:	429a      	cmp	r2, r3
    c65c:	d101      	bne.n	c662 <usb_find_cfg_desc+0x4e>
			return desc;
    c65e:	68fb      	ldr	r3, [r7, #12]
    c660:	e00a      	b.n	c678 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    c662:	68f8      	ldr	r0, [r7, #12]
    c664:	4b08      	ldr	r3, [pc, #32]	; (c688 <usb_find_cfg_desc+0x74>)
    c666:	4798      	blx	r3
    c668:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    c66a:	68fa      	ldr	r2, [r7, #12]
    c66c:	68bb      	ldr	r3, [r7, #8]
    c66e:	429a      	cmp	r2, r3
    c670:	d3e2      	bcc.n	c638 <usb_find_cfg_desc+0x24>
    c672:	e000      	b.n	c676 <usb_find_cfg_desc+0x62>
			break;
    c674:	bf00      	nop
	}
	return NULL;
    c676:	2300      	movs	r3, #0
}
    c678:	4618      	mov	r0, r3
    c67a:	3710      	adds	r7, #16
    c67c:	46bd      	mov	sp, r7
    c67e:	bd80      	pop	{r7, pc}
    c680:	0000c555 	.word	0x0000c555
    c684:	0000c4bb 	.word	0x0000c4bb
    c688:	0000c531 	.word	0x0000c531

0000c68c <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    c68c:	b580      	push	{r7, lr}
    c68e:	b086      	sub	sp, #24
    c690:	af00      	add	r7, sp, #0
    c692:	60f8      	str	r0, [r7, #12]
    c694:	60b9      	str	r1, [r7, #8]
    c696:	4613      	mov	r3, r2
    c698:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    c69a:	2300      	movs	r3, #0
    c69c:	75fb      	strb	r3, [r7, #23]
    c69e:	e020      	b.n	c6e2 <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    c6a0:	2203      	movs	r2, #3
    c6a2:	68b9      	ldr	r1, [r7, #8]
    c6a4:	68f8      	ldr	r0, [r7, #12]
    c6a6:	4b13      	ldr	r3, [pc, #76]	; (c6f4 <usb_find_str_desc+0x68>)
    c6a8:	4798      	blx	r3
    c6aa:	60f8      	str	r0, [r7, #12]
		if (desc) {
    c6ac:	68fb      	ldr	r3, [r7, #12]
    c6ae:	2b00      	cmp	r3, #0
    c6b0:	d015      	beq.n	c6de <usb_find_str_desc+0x52>
			_desc_len_check();
    c6b2:	68f8      	ldr	r0, [r7, #12]
    c6b4:	4b10      	ldr	r3, [pc, #64]	; (c6f8 <usb_find_str_desc+0x6c>)
    c6b6:	4798      	blx	r3
    c6b8:	4603      	mov	r3, r0
    c6ba:	2b01      	cmp	r3, #1
    c6bc:	d801      	bhi.n	c6c2 <usb_find_str_desc+0x36>
    c6be:	2300      	movs	r3, #0
    c6c0:	e014      	b.n	c6ec <usb_find_str_desc+0x60>
			if (i == str_index) {
    c6c2:	7dfa      	ldrb	r2, [r7, #23]
    c6c4:	79fb      	ldrb	r3, [r7, #7]
    c6c6:	429a      	cmp	r2, r3
    c6c8:	d101      	bne.n	c6ce <usb_find_str_desc+0x42>
				return desc;
    c6ca:	68fb      	ldr	r3, [r7, #12]
    c6cc:	e00e      	b.n	c6ec <usb_find_str_desc+0x60>
			}
			i++;
    c6ce:	7dfb      	ldrb	r3, [r7, #23]
    c6d0:	3301      	adds	r3, #1
    c6d2:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    c6d4:	68f8      	ldr	r0, [r7, #12]
    c6d6:	4b09      	ldr	r3, [pc, #36]	; (c6fc <usb_find_str_desc+0x70>)
    c6d8:	4798      	blx	r3
    c6da:	60f8      	str	r0, [r7, #12]
    c6dc:	e001      	b.n	c6e2 <usb_find_str_desc+0x56>
		} else {
			return NULL;
    c6de:	2300      	movs	r3, #0
    c6e0:	e004      	b.n	c6ec <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    c6e2:	68fa      	ldr	r2, [r7, #12]
    c6e4:	68bb      	ldr	r3, [r7, #8]
    c6e6:	429a      	cmp	r2, r3
    c6e8:	d3da      	bcc.n	c6a0 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    c6ea:	2300      	movs	r3, #0
}
    c6ec:	4618      	mov	r0, r3
    c6ee:	3718      	adds	r7, #24
    c6f0:	46bd      	mov	sp, r7
    c6f2:	bd80      	pop	{r7, pc}
    c6f4:	0000c555 	.word	0x0000c555
    c6f8:	0000c4bb 	.word	0x0000c4bb
    c6fc:	0000c4ed 	.word	0x0000c4ed

0000c700 <_ZN13CANOpen_ClassC1EP20can_async_descriptor>:
CANOpen_Class::CANOpen_Class()
{
	ptrCANOpenClass=this;
} //CANOpen_Class

CANOpen_Class::CANOpen_Class(can_async_descriptor  *descr)
    c700:	b580      	push	{r7, lr}
    c702:	b082      	sub	sp, #8
    c704:	af00      	add	r7, sp, #0
    c706:	6078      	str	r0, [r7, #4]
    c708:	6039      	str	r1, [r7, #0]
    c70a:	687b      	ldr	r3, [r7, #4]
    c70c:	4618      	mov	r0, r3
    c70e:	4b08      	ldr	r3, [pc, #32]	; (c730 <_ZN13CANOpen_ClassC1EP20can_async_descriptor+0x30>)
    c710:	4798      	blx	r3
    c712:	4a08      	ldr	r2, [pc, #32]	; (c734 <_ZN13CANOpen_ClassC1EP20can_async_descriptor+0x34>)
    c714:	687b      	ldr	r3, [r7, #4]
    c716:	601a      	str	r2, [r3, #0]
{
	ptrCANOpenClass=this;
    c718:	4a07      	ldr	r2, [pc, #28]	; (c738 <_ZN13CANOpen_ClassC1EP20can_async_descriptor+0x38>)
    c71a:	687b      	ldr	r3, [r7, #4]
    c71c:	6013      	str	r3, [r2, #0]
	canDescr=descr;
    c71e:	687b      	ldr	r3, [r7, #4]
    c720:	683a      	ldr	r2, [r7, #0]
    c722:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
} //CANOpen_Class
    c726:	687b      	ldr	r3, [r7, #4]
    c728:	4618      	mov	r0, r3
    c72a:	3708      	adds	r7, #8
    c72c:	46bd      	mov	sp, r7
    c72e:	bd80      	pop	{r7, pc}
    c730:	0000c8c9 	.word	0x0000c8c9
    c734:	00013274 	.word	0x00013274
    c738:	200010c0 	.word	0x200010c0

0000c73c <_ZN13CANOpen_ClassD1Ev>:

// default destructor
CANOpen_Class::~CANOpen_Class()
    c73c:	b580      	push	{r7, lr}
    c73e:	b082      	sub	sp, #8
    c740:	af00      	add	r7, sp, #0
    c742:	6078      	str	r0, [r7, #4]
    c744:	4a05      	ldr	r2, [pc, #20]	; (c75c <_ZN13CANOpen_ClassD1Ev+0x20>)
    c746:	687b      	ldr	r3, [r7, #4]
    c748:	601a      	str	r2, [r3, #0]
    c74a:	687b      	ldr	r3, [r7, #4]
    c74c:	4618      	mov	r0, r3
    c74e:	4b04      	ldr	r3, [pc, #16]	; (c760 <_ZN13CANOpen_ClassD1Ev+0x24>)
    c750:	4798      	blx	r3
{
} //~CANOpen_Class
    c752:	687b      	ldr	r3, [r7, #4]
    c754:	4618      	mov	r0, r3
    c756:	3708      	adds	r7, #8
    c758:	46bd      	mov	sp, r7
    c75a:	bd80      	pop	{r7, pc}
    c75c:	00013274 	.word	0x00013274
    c760:	0000c911 	.word	0x0000c911

0000c764 <_ZN13CANOpen_Class4InitEh>:

int	CANOpen_Class::Init(uint8_t node){
    c764:	b590      	push	{r4, r7, lr}
    c766:	b083      	sub	sp, #12
    c768:	af00      	add	r7, sp, #0
    c76a:	6078      	str	r0, [r7, #4]
    c76c:	460b      	mov	r3, r1
    c76e:	70fb      	strb	r3, [r7, #3]
	coNode=node;
    c770:	687b      	ldr	r3, [r7, #4]
    c772:	78fa      	ldrb	r2, [r7, #3]
    c774:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153
	if (node==1)
	{
			//RedefineMacros();
	}
	//can.SetDescriptor(canDescr);
	err=CO_init(canDescr,node,1000);
    c778:	6878      	ldr	r0, [r7, #4]
    c77a:	687b      	ldr	r3, [r7, #4]
    c77c:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
    c780:	78fa      	ldrb	r2, [r7, #3]
    c782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    c786:	4c14      	ldr	r4, [pc, #80]	; (c7d8 <_ZN13CANOpen_Class4InitEh+0x74>)
    c788:	47a0      	blx	r4
    c78a:	4603      	mov	r3, r0
    c78c:	461a      	mov	r2, r3
    c78e:	687b      	ldr	r3, [r7, #4]
    c790:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
	
	if (err==0)
    c794:	687b      	ldr	r3, [r7, #4]
    c796:	f993 3151 	ldrsb.w	r3, [r3, #337]	; 0x151
    c79a:	2b00      	cmp	r3, #0
    c79c:	d111      	bne.n	c7c2 <_ZN13CANOpen_Class4InitEh+0x5e>
	{
	
		err=(CO_ReturnError_t)SetInitialMode();
    c79e:	6878      	ldr	r0, [r7, #4]
    c7a0:	4b0e      	ldr	r3, [pc, #56]	; (c7dc <_ZN13CANOpen_Class4InitEh+0x78>)
    c7a2:	4798      	blx	r3
    c7a4:	4603      	mov	r3, r0
    c7a6:	b25a      	sxtb	r2, r3
    c7a8:	687b      	ldr	r3, [r7, #4]
    c7aa:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
		if (node==1)
    c7ae:	78fb      	ldrb	r3, [r7, #3]
    c7b0:	2b01      	cmp	r3, #1
    c7b2:	d10a      	bne.n	c7ca <_ZN13CANOpen_Class4InitEh+0x66>
		{
			CO_sendNMTcommand(1,0);
    c7b4:	687b      	ldr	r3, [r7, #4]
    c7b6:	2200      	movs	r2, #0
    c7b8:	2101      	movs	r1, #1
    c7ba:	4618      	mov	r0, r3
    c7bc:	4b08      	ldr	r3, [pc, #32]	; (c7e0 <_ZN13CANOpen_Class4InitEh+0x7c>)
    c7be:	4798      	blx	r3
    c7c0:	e003      	b.n	c7ca <_ZN13CANOpen_Class4InitEh+0x66>
		}
			

		
	}else{
		return	(int)err;
    c7c2:	687b      	ldr	r3, [r7, #4]
    c7c4:	f993 3151 	ldrsb.w	r3, [r3, #337]	; 0x151
    c7c8:	e002      	b.n	c7d0 <_ZN13CANOpen_Class4InitEh+0x6c>
	}
	return	(int)err;
    c7ca:	687b      	ldr	r3, [r7, #4]
    c7cc:	f993 3151 	ldrsb.w	r3, [r3, #337]	; 0x151
}
    c7d0:	4618      	mov	r0, r3
    c7d2:	370c      	adds	r7, #12
    c7d4:	46bd      	mov	sp, r7
    c7d6:	bd90      	pop	{r4, r7, pc}
    c7d8:	0000ca11 	.word	0x0000ca11
    c7dc:	0000c7e5 	.word	0x0000c7e5
    c7e0:	0000c939 	.word	0x0000c939

0000c7e4 <_ZN13CANOpen_Class14SetInitialModeEv>:

int	CANOpen_Class::SetInitialMode(void){
    c7e4:	b580      	push	{r7, lr}
    c7e6:	b082      	sub	sp, #8
    c7e8:	af00      	add	r7, sp, #0
    c7ea:	6078      	str	r0, [r7, #4]
	/* CAN module address, NodeID, Bitrate */
	/* We do not use CAN registers directly, so address here is a pointer to the CAN_HandleTypeDef object. */
	
	
	/* start CAN */
	err=CO_CANsetNormalMode();
    c7ec:	687b      	ldr	r3, [r7, #4]
    c7ee:	4618      	mov	r0, r3
    c7f0:	4b08      	ldr	r3, [pc, #32]	; (c814 <_ZN13CANOpen_Class14SetInitialModeEv+0x30>)
    c7f2:	4798      	blx	r3
    c7f4:	4603      	mov	r3, r0
    c7f6:	461a      	mov	r2, r3
    c7f8:	687b      	ldr	r3, [r7, #4]
    c7fa:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
	//err=CO_CANsetNormalMode(CO->CANmodule[0]);

	reset = CO_RESET_NOT;
    c7fe:	687b      	ldr	r3, [r7, #4]
    c800:	2200      	movs	r2, #0
    c802:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	return	(int)err;
    c806:	687b      	ldr	r3, [r7, #4]
    c808:	f993 3151 	ldrsb.w	r3, [r3, #337]	; 0x151
}
    c80c:	4618      	mov	r0, r3
    c80e:	3708      	adds	r7, #8
    c810:	46bd      	mov	sp, r7
    c812:	bd80      	pop	{r7, pc}
    c814:	0000d651 	.word	0x0000d651

0000c818 <_ZN13CANOpen_Class16Periodic_ProcessEm>:

int	CANOpen_Class::Periodic_Process(uint32_t timeDifference){
    c818:	b580      	push	{r7, lr}
    c81a:	b082      	sub	sp, #8
    c81c:	af00      	add	r7, sp, #0
    c81e:	6078      	str	r0, [r7, #4]
    c820:	6039      	str	r1, [r7, #0]
	if (ptrCO->CANmodule[0]->CANnormal)
    c822:	687b      	ldr	r3, [r7, #4]
    c824:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    c828:	681b      	ldr	r3, [r3, #0]
    c82a:	7d1b      	ldrb	r3, [r3, #20]
    c82c:	b2db      	uxtb	r3, r3
    c82e:	2b00      	cmp	r3, #0
    c830:	bf14      	ite	ne
    c832:	2301      	movne	r3, #1
    c834:	2300      	moveq	r3, #0
    c836:	b2db      	uxtb	r3, r3
    c838:	2b00      	cmp	r3, #0
    c83a:	d015      	beq.n	c868 <_ZN13CANOpen_Class16Periodic_ProcessEm+0x50>
	{
		syncWas=CO_process_SYNC_RPDO(timeDifference);
    c83c:	687b      	ldr	r3, [r7, #4]
    c83e:	6839      	ldr	r1, [r7, #0]
    c840:	4618      	mov	r0, r3
    c842:	4b0d      	ldr	r3, [pc, #52]	; (c878 <_ZN13CANOpen_Class16Periodic_ProcessEm+0x60>)
    c844:	4798      	blx	r3
    c846:	4603      	mov	r3, r0
    c848:	461a      	mov	r2, r3
    c84a:	687b      	ldr	r3, [r7, #4]
    c84c:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
		CO_process_TPDO(syncWas,timeDifference);
    c850:	6878      	ldr	r0, [r7, #4]
    c852:	687b      	ldr	r3, [r7, #4]
    c854:	f893 3152 	ldrb.w	r3, [r3, #338]	; 0x152
    c858:	683a      	ldr	r2, [r7, #0]
    c85a:	4619      	mov	r1, r3
    c85c:	4b07      	ldr	r3, [pc, #28]	; (c87c <_ZN13CANOpen_Class16Periodic_ProcessEm+0x64>)
    c85e:	4798      	blx	r3
		CAN_Polling_Tx();
    c860:	687b      	ldr	r3, [r7, #4]
    c862:	4618      	mov	r0, r3
    c864:	4b06      	ldr	r3, [pc, #24]	; (c880 <_ZN13CANOpen_Class16Periodic_ProcessEm+0x68>)
    c866:	4798      	blx	r3
	}
	
	return	int(syncWas);
    c868:	687b      	ldr	r3, [r7, #4]
    c86a:	f893 3152 	ldrb.w	r3, [r3, #338]	; 0x152
}
    c86e:	4618      	mov	r0, r3
    c870:	3708      	adds	r7, #8
    c872:	46bd      	mov	sp, r7
    c874:	bd80      	pop	{r7, pc}
    c876:	bf00      	nop
    c878:	0000d2f5 	.word	0x0000d2f5
    c87c:	0000d379 	.word	0x0000d379
    c880:	0000de8d 	.word	0x0000de8d

0000c884 <_ZN13CANOpen_Class15StartNMTServiceEv>:


bool	CANOpen_Class::StartNMTService(void){
    c884:	b580      	push	{r7, lr}
    c886:	b084      	sub	sp, #16
    c888:	af00      	add	r7, sp, #0
    c88a:	6078      	str	r0, [r7, #4]
	bool operational=false;
    c88c:	2300      	movs	r3, #0
    c88e:	73fb      	strb	r3, [r7, #15]
	while ((!operational)||true)
	{
		CO_sendNMTcommand(1,2);
    c890:	687b      	ldr	r3, [r7, #4]
    c892:	2202      	movs	r2, #2
    c894:	2101      	movs	r1, #1
    c896:	4618      	mov	r0, r3
    c898:	4b09      	ldr	r3, [pc, #36]	; (c8c0 <_ZN13CANOpen_Class15StartNMTServiceEv+0x3c>)
    c89a:	4798      	blx	r3
		delay_ms(1000);
    c89c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    c8a0:	4b08      	ldr	r3, [pc, #32]	; (c8c4 <_ZN13CANOpen_Class15StartNMTServiceEv+0x40>)
    c8a2:	4798      	blx	r3
		operational=(ptrCO->HBcons->monitoredNodes[2].NMTstate==5);
    c8a4:	687b      	ldr	r3, [r7, #4]
    c8a6:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    c8aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    c8ac:	689b      	ldr	r3, [r3, #8]
    c8ae:	3320      	adds	r3, #32
    c8b0:	781b      	ldrb	r3, [r3, #0]
    c8b2:	2b05      	cmp	r3, #5
    c8b4:	bf0c      	ite	eq
    c8b6:	2301      	moveq	r3, #1
    c8b8:	2300      	movne	r3, #0
    c8ba:	73fb      	strb	r3, [r7, #15]
		CO_sendNMTcommand(1,2);
    c8bc:	e7e8      	b.n	c890 <_ZN13CANOpen_Class15StartNMTServiceEv+0xc>
    c8be:	bf00      	nop
    c8c0:	0000c939 	.word	0x0000c939
    c8c4:	000019d1 	.word	0x000019d1

0000c8c8 <_ZN8CO_ClassC1Ev>:
		static	int32_t             *CO_traceValueBuffers[CO_NO_TRACE];
	#endif
#endif

// default constructor
CO_Class::CO_Class()
    c8c8:	b580      	push	{r7, lr}
    c8ca:	b082      	sub	sp, #8
    c8cc:	af00      	add	r7, sp, #0
    c8ce:	6078      	str	r0, [r7, #4]
    c8d0:	687b      	ldr	r3, [r7, #4]
    c8d2:	4618      	mov	r0, r3
    c8d4:	4b0b      	ldr	r3, [pc, #44]	; (c904 <_ZN8CO_ClassC1Ev+0x3c>)
    c8d6:	4798      	blx	r3
    c8d8:	4a0b      	ldr	r2, [pc, #44]	; (c908 <_ZN8CO_ClassC1Ev+0x40>)
    c8da:	687b      	ldr	r3, [r7, #4]
    c8dc:	601a      	str	r2, [r3, #0]
{
	ptrCO = CO;
    c8de:	4b0b      	ldr	r3, [pc, #44]	; (c90c <_ZN8CO_ClassC1Ev+0x44>)
    c8e0:	681a      	ldr	r2, [r3, #0]
    c8e2:	687b      	ldr	r3, [r7, #4]
    c8e4:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	coCanDescr=NULL;
    c8e8:	687b      	ldr	r3, [r7, #4]
    c8ea:	2200      	movs	r2, #0
    c8ec:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	CO_memoryUsed=sizeof(COO);
    c8f0:	687b      	ldr	r3, [r7, #4]
    c8f2:	223c      	movs	r2, #60	; 0x3c
    c8f4:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
} //CO_Class
    c8f8:	687b      	ldr	r3, [r7, #4]
    c8fa:	4618      	mov	r0, r3
    c8fc:	3708      	adds	r7, #8
    c8fe:	46bd      	mov	sp, r7
    c900:	bd80      	pop	{r7, pc}
    c902:	bf00      	nop
    c904:	0000d4d9 	.word	0x0000d4d9
    c908:	00013280 	.word	0x00013280
    c90c:	20001100 	.word	0x20001100

0000c910 <_ZN8CO_ClassD1Ev>:

// default destructor
CO_Class::~CO_Class()
    c910:	b580      	push	{r7, lr}
    c912:	b082      	sub	sp, #8
    c914:	af00      	add	r7, sp, #0
    c916:	6078      	str	r0, [r7, #4]
    c918:	4a05      	ldr	r2, [pc, #20]	; (c930 <_ZN8CO_ClassD1Ev+0x20>)
    c91a:	687b      	ldr	r3, [r7, #4]
    c91c:	601a      	str	r2, [r3, #0]
    c91e:	687b      	ldr	r3, [r7, #4]
    c920:	4618      	mov	r0, r3
    c922:	4b04      	ldr	r3, [pc, #16]	; (c934 <_ZN8CO_ClassD1Ev+0x24>)
    c924:	4798      	blx	r3
{
} //~CO_Class
    c926:	687b      	ldr	r3, [r7, #4]
    c928:	4618      	mov	r0, r3
    c92a:	3708      	adds	r7, #8
    c92c:	46bd      	mov	sp, r7
    c92e:	bd80      	pop	{r7, pc}
    c930:	00013280 	.word	0x00013280
    c934:	0000d545 	.word	0x0000d545

0000c938 <_ZN8CO_Class17CO_sendNMTcommandEhh>:



uint8_t CO_Class::CO_sendNMTcommand( uint8_t command, uint8_t nodeID){
    c938:	b580      	push	{r7, lr}
    c93a:	b082      	sub	sp, #8
    c93c:	af00      	add	r7, sp, #0
    c93e:	6078      	str	r0, [r7, #4]
    c940:	460b      	mov	r3, r1
    c942:	70fb      	strb	r3, [r7, #3]
    c944:	4613      	mov	r3, r2
    c946:	70bb      	strb	r3, [r7, #2]
	if(NMTM_txBuff == 0){
    c948:	687b      	ldr	r3, [r7, #4]
    c94a:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
    c94e:	2b00      	cmp	r3, #0
    c950:	d101      	bne.n	c956 <_ZN8CO_Class17CO_sendNMTcommandEhh+0x1e>
		/* error, CO_CANtxBufferInit() was not called for this buffer. */
		return CO_ERROR_TX_UNCONFIGURED; /* -11 */
    c952:	23f5      	movs	r3, #245	; 0xf5
    c954:	e053      	b.n	c9fe <_ZN8CO_Class17CO_sendNMTcommandEhh+0xc6>
	}
	NMTM_txBuff->data[0] = command;
    c956:	687b      	ldr	r3, [r7, #4]
    c958:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
    c95c:	78fa      	ldrb	r2, [r7, #3]
    c95e:	715a      	strb	r2, [r3, #5]
	NMTM_txBuff->data[1] = nodeID;
    c960:	687b      	ldr	r3, [r7, #4]
    c962:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
    c966:	78ba      	ldrb	r2, [r7, #2]
    c968:	719a      	strb	r2, [r3, #6]

	/* Apply NMT command also to this node, if set so. */
	if(nodeID == 0 || nodeID == CO->NMT->nodeId){
    c96a:	78bb      	ldrb	r3, [r7, #2]
    c96c:	2b00      	cmp	r3, #0
    c96e:	d006      	beq.n	c97e <_ZN8CO_Class17CO_sendNMTcommandEhh+0x46>
    c970:	4b25      	ldr	r3, [pc, #148]	; (ca08 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
    c972:	681b      	ldr	r3, [r3, #0]
    c974:	691b      	ldr	r3, [r3, #16]
    c976:	7a9b      	ldrb	r3, [r3, #10]
    c978:	78ba      	ldrb	r2, [r7, #2]
    c97a:	429a      	cmp	r2, r3
    c97c:	d135      	bne.n	c9ea <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
		switch(command){
    c97e:	78fb      	ldrb	r3, [r7, #3]
    c980:	2b80      	cmp	r3, #128	; 0x80
    c982:	d01f      	beq.n	c9c4 <_ZN8CO_Class17CO_sendNMTcommandEhh+0x8c>
    c984:	2b80      	cmp	r3, #128	; 0x80
    c986:	dc04      	bgt.n	c992 <_ZN8CO_Class17CO_sendNMTcommandEhh+0x5a>
    c988:	2b01      	cmp	r3, #1
    c98a:	d007      	beq.n	c99c <_ZN8CO_Class17CO_sendNMTcommandEhh+0x64>
    c98c:	2b02      	cmp	r3, #2
    c98e:	d013      	beq.n	c9b8 <_ZN8CO_Class17CO_sendNMTcommandEhh+0x80>
    c990:	e02b      	b.n	c9ea <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
    c992:	2b81      	cmp	r3, #129	; 0x81
    c994:	d01c      	beq.n	c9d0 <_ZN8CO_Class17CO_sendNMTcommandEhh+0x98>
    c996:	2b82      	cmp	r3, #130	; 0x82
    c998:	d020      	beq.n	c9dc <_ZN8CO_Class17CO_sendNMTcommandEhh+0xa4>
    c99a:	e026      	b.n	c9ea <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
			case CO_NMT_ENTER_OPERATIONAL:
			if((*CO->NMT->emPr->errorRegister) == 0) {
    c99c:	4b1a      	ldr	r3, [pc, #104]	; (ca08 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
    c99e:	681b      	ldr	r3, [r3, #0]
    c9a0:	691b      	ldr	r3, [r3, #16]
    c9a2:	695b      	ldr	r3, [r3, #20]
    c9a4:	681b      	ldr	r3, [r3, #0]
    c9a6:	781b      	ldrb	r3, [r3, #0]
    c9a8:	2b00      	cmp	r3, #0
    c9aa:	d11d      	bne.n	c9e8 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb0>
				CO->NMT->operatingState = CO_NMT_OPERATIONAL;
    c9ac:	4b16      	ldr	r3, [pc, #88]	; (ca08 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
    c9ae:	681b      	ldr	r3, [r3, #0]
    c9b0:	691b      	ldr	r3, [r3, #16]
    c9b2:	2205      	movs	r2, #5
    c9b4:	701a      	strb	r2, [r3, #0]
			}
			break;
    c9b6:	e017      	b.n	c9e8 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb0>
			case CO_NMT_ENTER_STOPPED:
			CO->NMT->operatingState = CO_NMT_STOPPED;
    c9b8:	4b13      	ldr	r3, [pc, #76]	; (ca08 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
    c9ba:	681b      	ldr	r3, [r3, #0]
    c9bc:	691b      	ldr	r3, [r3, #16]
    c9be:	2204      	movs	r2, #4
    c9c0:	701a      	strb	r2, [r3, #0]
			break;
    c9c2:	e012      	b.n	c9ea <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
			case CO_NMT_ENTER_PRE_OPERATIONAL:
			CO->NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
    c9c4:	4b10      	ldr	r3, [pc, #64]	; (ca08 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
    c9c6:	681b      	ldr	r3, [r3, #0]
    c9c8:	691b      	ldr	r3, [r3, #16]
    c9ca:	227f      	movs	r2, #127	; 0x7f
    c9cc:	701a      	strb	r2, [r3, #0]
			break;
    c9ce:	e00c      	b.n	c9ea <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
			case CO_NMT_RESET_NODE:
			CO->NMT->resetCommand = CO_RESET_APP;
    c9d0:	4b0d      	ldr	r3, [pc, #52]	; (ca08 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
    c9d2:	681b      	ldr	r3, [r3, #0]
    c9d4:	691b      	ldr	r3, [r3, #16]
    c9d6:	2202      	movs	r2, #2
    c9d8:	725a      	strb	r2, [r3, #9]
			break;
    c9da:	e006      	b.n	c9ea <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
			case CO_NMT_RESET_COMMUNICATION:
			CO->NMT->resetCommand = CO_RESET_COMM;
    c9dc:	4b0a      	ldr	r3, [pc, #40]	; (ca08 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
    c9de:	681b      	ldr	r3, [r3, #0]
    c9e0:	691b      	ldr	r3, [r3, #16]
    c9e2:	2201      	movs	r2, #1
    c9e4:	725a      	strb	r2, [r3, #9]
			break;
    c9e6:	e000      	b.n	c9ea <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
			break;
    c9e8:	bf00      	nop
		}
	}

	return CAN_Send( NMTM_txBuff); /* 0 = success */
    c9ea:	687a      	ldr	r2, [r7, #4]
    c9ec:	687b      	ldr	r3, [r7, #4]
    c9ee:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
    c9f2:	4619      	mov	r1, r3
    c9f4:	4610      	mov	r0, r2
    c9f6:	4b05      	ldr	r3, [pc, #20]	; (ca0c <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd4>)
    c9f8:	4798      	blx	r3
    c9fa:	4603      	mov	r3, r0
    c9fc:	b2db      	uxtb	r3, r3
}
    c9fe:	4618      	mov	r0, r3
    ca00:	3708      	adds	r7, #8
    ca02:	46bd      	mov	sp, r7
    ca04:	bd80      	pop	{r7, pc}
    ca06:	bf00      	nop
    ca08:	20001100 	.word	0x20001100
    ca0c:	0000d9ad 	.word	0x0000d9ad

0000ca10 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm>:
/******************************************************************************/
CO_ReturnError_t CO_Class::CO_init(
can_async_descriptor   *CANbaseAddress,
uint8_t                 nodeId,
uint32_t                bitRate)
{
    ca10:	b5f0      	push	{r4, r5, r6, r7, lr}
    ca12:	b099      	sub	sp, #100	; 0x64
    ca14:	af0c      	add	r7, sp, #48	; 0x30
    ca16:	61f8      	str	r0, [r7, #28]
    ca18:	61b9      	str	r1, [r7, #24]
    ca1a:	613b      	str	r3, [r7, #16]
    ca1c:	4613      	mov	r3, r2
    ca1e:	75fb      	strb	r3, [r7, #23]
	coCanDescr=CANbaseAddress;
    ca20:	69fb      	ldr	r3, [r7, #28]
    ca22:	69ba      	ldr	r2, [r7, #24]
    ca24:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	coNode=nodeId;
    ca28:	69fb      	ldr	r3, [r7, #28]
    ca2a:	7dfa      	ldrb	r2, [r7, #23]
    ca2c:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
	#endif


	/* Initialize CANopen object */
	#ifdef CO_USE_GLOBALS
		CO = &COO;
    ca30:	4ba3      	ldr	r3, [pc, #652]	; (ccc0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    ca32:	4aa4      	ldr	r2, [pc, #656]	; (ccc4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b4>)
    ca34:	601a      	str	r2, [r3, #0]

		CO->CANmodule[0]                    = &COO_CANmodule;
    ca36:	4ba2      	ldr	r3, [pc, #648]	; (ccc0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    ca38:	681b      	ldr	r3, [r3, #0]
    ca3a:	4aa3      	ldr	r2, [pc, #652]	; (ccc8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b8>)
    ca3c:	601a      	str	r2, [r3, #0]
		CO_CANmodule_rxArray0               = &COO_CANmodule_rxArray0[0];
    ca3e:	4ba3      	ldr	r3, [pc, #652]	; (cccc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2bc>)
    ca40:	4aa3      	ldr	r2, [pc, #652]	; (ccd0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2c0>)
    ca42:	601a      	str	r2, [r3, #0]
		CO_CANmodule_txArray0               = &COO_CANmodule_txArray0[0];
    ca44:	4ba3      	ldr	r3, [pc, #652]	; (ccd4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2c4>)
    ca46:	4aa4      	ldr	r2, [pc, #656]	; (ccd8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2c8>)
    ca48:	601a      	str	r2, [r3, #0]
		for(i=0; i<CO_NO_SDO_SERVER; i++){
    ca4a:	69fb      	ldr	r3, [r7, #28]
    ca4c:	2200      	movs	r2, #0
    ca4e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    ca52:	69fb      	ldr	r3, [r7, #28]
    ca54:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    ca58:	2b00      	cmp	r3, #0
    ca5a:	d118      	bne.n	ca8e <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x7e>
			CO->SDO[i]                      = &COO_SDO[i];
    ca5c:	4b98      	ldr	r3, [pc, #608]	; (ccc0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    ca5e:	6819      	ldr	r1, [r3, #0]
    ca60:	69fb      	ldr	r3, [r7, #28]
    ca62:	f8d3 013c 	ldr.w	r0, [r3, #316]	; 0x13c
    ca66:	69fb      	ldr	r3, [r7, #28]
    ca68:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
    ca6c:	4613      	mov	r3, r2
    ca6e:	011b      	lsls	r3, r3, #4
    ca70:	4413      	add	r3, r2
    ca72:	00db      	lsls	r3, r3, #3
    ca74:	4a99      	ldr	r2, [pc, #612]	; (ccdc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2cc>)
    ca76:	441a      	add	r2, r3
    ca78:	0083      	lsls	r3, r0, #2
    ca7a:	440b      	add	r3, r1
    ca7c:	605a      	str	r2, [r3, #4]
		for(i=0; i<CO_NO_SDO_SERVER; i++){
    ca7e:	69fb      	ldr	r3, [r7, #28]
    ca80:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    ca84:	1c5a      	adds	r2, r3, #1
    ca86:	69fb      	ldr	r3, [r7, #28]
    ca88:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    ca8c:	e7e1      	b.n	ca52 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x42>
		}

		CO_SDO_ODExtensions                 = &COO_SDO_ODExtensions[0];
    ca8e:	4b94      	ldr	r3, [pc, #592]	; (cce0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2d0>)
    ca90:	4a94      	ldr	r2, [pc, #592]	; (cce4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2d4>)
    ca92:	601a      	str	r2, [r3, #0]
		CO->em                              = &COO_EM;
    ca94:	4b8a      	ldr	r3, [pc, #552]	; (ccc0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    ca96:	681b      	ldr	r3, [r3, #0]
    ca98:	4a93      	ldr	r2, [pc, #588]	; (cce8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2d8>)
    ca9a:	609a      	str	r2, [r3, #8]
		CO->emPr                            = &COO_EMpr;
    ca9c:	4b88      	ldr	r3, [pc, #544]	; (ccc0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    ca9e:	681b      	ldr	r3, [r3, #0]
    caa0:	4a92      	ldr	r2, [pc, #584]	; (ccec <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2dc>)
    caa2:	60da      	str	r2, [r3, #12]
		CO->NMT                             = &COO_NMT;
    caa4:	4b86      	ldr	r3, [pc, #536]	; (ccc0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    caa6:	681b      	ldr	r3, [r3, #0]
    caa8:	4a91      	ldr	r2, [pc, #580]	; (ccf0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2e0>)
    caaa:	611a      	str	r2, [r3, #16]
		CO->SYNC                            = &COO_SYNC;
    caac:	4b84      	ldr	r3, [pc, #528]	; (ccc0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    caae:	681b      	ldr	r3, [r3, #0]
    cab0:	4a90      	ldr	r2, [pc, #576]	; (ccf4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2e4>)
    cab2:	615a      	str	r2, [r3, #20]
		for(i=0; i<CO_NO_RPDO; i++){
    cab4:	69fb      	ldr	r3, [r7, #28]
    cab6:	2200      	movs	r2, #0
    cab8:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    cabc:	69fb      	ldr	r3, [r7, #28]
    cabe:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    cac2:	2b03      	cmp	r3, #3
    cac4:	d818      	bhi.n	caf8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0xe8>
			CO->RPDO[i]                     = &COO_RPDO[i];
    cac6:	4b7e      	ldr	r3, [pc, #504]	; (ccc0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    cac8:	6819      	ldr	r1, [r3, #0]
    caca:	69fb      	ldr	r3, [r7, #28]
    cacc:	f8d3 013c 	ldr.w	r0, [r3, #316]	; 0x13c
    cad0:	69fb      	ldr	r3, [r7, #28]
    cad2:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
    cad6:	4613      	mov	r3, r2
    cad8:	005b      	lsls	r3, r3, #1
    cada:	4413      	add	r3, r2
    cadc:	015b      	lsls	r3, r3, #5
    cade:	4a86      	ldr	r2, [pc, #536]	; (ccf8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2e8>)
    cae0:	441a      	add	r2, r3
    cae2:	1d83      	adds	r3, r0, #6
    cae4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(i=0; i<CO_NO_RPDO; i++){
    cae8:	69fb      	ldr	r3, [r7, #28]
    caea:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    caee:	1c5a      	adds	r2, r3, #1
    caf0:	69fb      	ldr	r3, [r7, #28]
    caf2:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    caf6:	e7e1      	b.n	cabc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0xac>
		}
		for(i=0; i<CO_NO_TPDO; i++){
    caf8:	69fb      	ldr	r3, [r7, #28]
    cafa:	2200      	movs	r2, #0
    cafc:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    cb00:	69fb      	ldr	r3, [r7, #28]
    cb02:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    cb06:	2b03      	cmp	r3, #3
    cb08:	d817      	bhi.n	cb3a <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x12a>
			CO->TPDO[i]                     = &COO_TPDO[i];
    cb0a:	4b6d      	ldr	r3, [pc, #436]	; (ccc0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    cb0c:	681b      	ldr	r3, [r3, #0]
    cb0e:	69fa      	ldr	r2, [r7, #28]
    cb10:	f8d2 213c 	ldr.w	r2, [r2, #316]	; 0x13c
    cb14:	69f9      	ldr	r1, [r7, #28]
    cb16:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
    cb1a:	2058      	movs	r0, #88	; 0x58
    cb1c:	fb00 f101 	mul.w	r1, r0, r1
    cb20:	4876      	ldr	r0, [pc, #472]	; (ccfc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2ec>)
    cb22:	4401      	add	r1, r0
    cb24:	320a      	adds	r2, #10
    cb26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for(i=0; i<CO_NO_TPDO; i++){
    cb2a:	69fb      	ldr	r3, [r7, #28]
    cb2c:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    cb30:	1c5a      	adds	r2, r3, #1
    cb32:	69fb      	ldr	r3, [r7, #28]
    cb34:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    cb38:	e7e2      	b.n	cb00 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0xf0>
		}
		
		CO->HBcons                          = &COO_HBcons;
    cb3a:	4b61      	ldr	r3, [pc, #388]	; (ccc0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    cb3c:	681b      	ldr	r3, [r3, #0]
    cb3e:	4a70      	ldr	r2, [pc, #448]	; (cd00 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2f0>)
    cb40:	639a      	str	r2, [r3, #56]	; 0x38
		CO_HBcons_monitoredNodes            = &COO_HBcons_monitoredNodes[0];
    cb42:	4b70      	ldr	r3, [pc, #448]	; (cd04 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2f4>)
    cb44:	4a70      	ldr	r2, [pc, #448]	; (cd08 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2f8>)
    cb46:	601a      	str	r2, [r3, #0]

	if(errCnt != 0) return CO_ERROR_OUT_OF_MEMORY;
	#endif


	CO->CANmodule[0]->CANnormal = false;
    cb48:	4b5d      	ldr	r3, [pc, #372]	; (ccc0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    cb4a:	681b      	ldr	r3, [r3, #0]
    cb4c:	681b      	ldr	r3, [r3, #0]
    cb4e:	2200      	movs	r2, #0
    cb50:	751a      	strb	r2, [r3, #20]
	CO_CANsetConfigurationMode(coCanDescr);
    cb52:	69fa      	ldr	r2, [r7, #28]
    cb54:	69fb      	ldr	r3, [r7, #28]
    cb56:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    cb5a:	4619      	mov	r1, r3
    cb5c:	4610      	mov	r0, r2
    cb5e:	4b6b      	ldr	r3, [pc, #428]	; (cd0c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2fc>)
    cb60:	4798      	blx	r3

	/* Verify CANopen Node-ID */
	if(nodeId<1 || nodeId>127)
    cb62:	7dfb      	ldrb	r3, [r7, #23]
    cb64:	2b00      	cmp	r3, #0
    cb66:	dd02      	ble.n	cb6e <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x15e>
    cb68:	7dfb      	ldrb	r3, [r7, #23]
    cb6a:	2b7f      	cmp	r3, #127	; 0x7f
    cb6c:	dd05      	ble.n	cb7a <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x16a>
	{
		CO_delete();
    cb6e:	69f8      	ldr	r0, [r7, #28]
    cb70:	4b67      	ldr	r3, [pc, #412]	; (cd10 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x300>)
    cb72:	4798      	blx	r3
		return CO_ERROR_PARAMETERS;
    cb74:	f06f 030b 	mvn.w	r3, #11
    cb78:	e2f5      	b.n	d166 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x756>
	}


	err = CANmodule_init(
    cb7a:	69f8      	ldr	r0, [r7, #28]
    cb7c:	4b50      	ldr	r3, [pc, #320]	; (ccc0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    cb7e:	681b      	ldr	r3, [r3, #0]
    cb80:	6819      	ldr	r1, [r3, #0]
    cb82:	69fb      	ldr	r3, [r7, #28]
    cb84:	f8d3 4130 	ldr.w	r4, [r3, #304]	; 0x130
    cb88:	4b50      	ldr	r3, [pc, #320]	; (cccc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2bc>)
    cb8a:	681d      	ldr	r5, [r3, #0]
    cb8c:	4b51      	ldr	r3, [pc, #324]	; (ccd4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2c4>)
    cb8e:	681b      	ldr	r3, [r3, #0]
    cb90:	693a      	ldr	r2, [r7, #16]
    cb92:	9203      	str	r2, [sp, #12]
    cb94:	2209      	movs	r2, #9
    cb96:	9202      	str	r2, [sp, #8]
    cb98:	9301      	str	r3, [sp, #4]
    cb9a:	230b      	movs	r3, #11
    cb9c:	9300      	str	r3, [sp, #0]
    cb9e:	462b      	mov	r3, r5
    cba0:	4622      	mov	r2, r4
    cba2:	4c5c      	ldr	r4, [pc, #368]	; (cd14 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x304>)
    cba4:	47a0      	blx	r4
    cba6:	4603      	mov	r3, r0
    cba8:	461a      	mov	r2, r3
    cbaa:	69fb      	ldr	r3, [r7, #28]
    cbac:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
	CO_RXCAN_NO_MSGS,
	CO_CANmodule_txArray0,
	CO_TXCAN_NO_MSGS,
	bitRate);

	if(err){CO_delete(); return err;}
    cbb0:	69fb      	ldr	r3, [r7, #28]
    cbb2:	f993 3140 	ldrsb.w	r3, [r3, #320]	; 0x140
    cbb6:	2b00      	cmp	r3, #0
    cbb8:	d006      	beq.n	cbc8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x1b8>
    cbba:	69f8      	ldr	r0, [r7, #28]
    cbbc:	4b54      	ldr	r3, [pc, #336]	; (cd10 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x300>)
    cbbe:	4798      	blx	r3
    cbc0:	69fb      	ldr	r3, [r7, #28]
    cbc2:	f993 3140 	ldrsb.w	r3, [r3, #320]	; 0x140
    cbc6:	e2ce      	b.n	d166 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x756>

	for (i=0; i<CO_NO_SDO_SERVER; i++)
    cbc8:	69fb      	ldr	r3, [r7, #28]
    cbca:	2200      	movs	r2, #0
    cbcc:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    cbd0:	69fb      	ldr	r3, [r7, #28]
    cbd2:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    cbd6:	2b00      	cmp	r3, #0
    cbd8:	f040 80a4 	bne.w	cd24 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x314>
	{
		uint32_t COB_IDClientToServer;
		uint32_t COB_IDServerToClient;
		if(i==0){
    cbdc:	69fb      	ldr	r3, [r7, #28]
    cbde:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    cbe2:	2b00      	cmp	r3, #0
    cbe4:	d108      	bne.n	cbf8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x1e8>
			/*Default SDO server must be located at first index*/
			COB_IDClientToServer = CO_CAN_ID_RSDO + nodeId;
    cbe6:	7dfb      	ldrb	r3, [r7, #23]
    cbe8:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
    cbec:	62fb      	str	r3, [r7, #44]	; 0x2c
			COB_IDServerToClient = CO_CAN_ID_TSDO + nodeId;
    cbee:	7dfb      	ldrb	r3, [r7, #23]
    cbf0:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
    cbf4:	62bb      	str	r3, [r7, #40]	; 0x28
    cbf6:	e017      	b.n	cc28 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x218>
			}else{
			COB_IDClientToServer = OD_SDOServerParameter[i].COB_IDClientToServer;
    cbf8:	69fb      	ldr	r3, [r7, #28]
    cbfa:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
    cbfe:	4946      	ldr	r1, [pc, #280]	; (cd18 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x308>)
    cc00:	4613      	mov	r3, r2
    cc02:	005b      	lsls	r3, r3, #1
    cc04:	4413      	add	r3, r2
    cc06:	009b      	lsls	r3, r3, #2
    cc08:	440b      	add	r3, r1
    cc0a:	3364      	adds	r3, #100	; 0x64
    cc0c:	681b      	ldr	r3, [r3, #0]
    cc0e:	62fb      	str	r3, [r7, #44]	; 0x2c
			COB_IDServerToClient = OD_SDOServerParameter[i].COB_IDServerToClient;
    cc10:	69fb      	ldr	r3, [r7, #28]
    cc12:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
    cc16:	4940      	ldr	r1, [pc, #256]	; (cd18 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x308>)
    cc18:	4613      	mov	r3, r2
    cc1a:	005b      	lsls	r3, r3, #1
    cc1c:	4413      	add	r3, r2
    cc1e:	009b      	lsls	r3, r3, #2
    cc20:	440b      	add	r3, r1
    cc22:	3368      	adds	r3, #104	; 0x68
    cc24:	681b      	ldr	r3, [r3, #0]
    cc26:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		err = CO_SDO_init(
    cc28:	69fb      	ldr	r3, [r7, #28]
    cc2a:	f103 0e04 	add.w	lr, r3, #4
    cc2e:	4b24      	ldr	r3, [pc, #144]	; (ccc0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    cc30:	681a      	ldr	r2, [r3, #0]
			CO->SDO[i],
    cc32:	69fb      	ldr	r3, [r7, #28]
    cc34:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
		err = CO_SDO_init(
    cc38:	009b      	lsls	r3, r3, #2
    cc3a:	4413      	add	r3, r2
    cc3c:	685b      	ldr	r3, [r3, #4]
    cc3e:	60fb      	str	r3, [r7, #12]
			COB_IDClientToServer,
			COB_IDServerToClient,
			OD_H1200_SDO_SERVER_PARAM+i,
    cc40:	69fb      	ldr	r3, [r7, #28]
    cc42:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
		err = CO_SDO_init(
    cc46:	f503 5290 	add.w	r2, r3, #4608	; 0x1200
			i==0 ? 0 : CO->SDO[0],
    cc4a:	69fb      	ldr	r3, [r7, #28]
    cc4c:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
		err = CO_SDO_init(
    cc50:	2b00      	cmp	r3, #0
    cc52:	d003      	beq.n	cc5c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x24c>
			i==0 ? 0 : CO->SDO[0],
    cc54:	4b1a      	ldr	r3, [pc, #104]	; (ccc0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    cc56:	681b      	ldr	r3, [r3, #0]
		err = CO_SDO_init(
    cc58:	685b      	ldr	r3, [r3, #4]
    cc5a:	e000      	b.n	cc5e <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x24e>
    cc5c:	2300      	movs	r3, #0
    cc5e:	4920      	ldr	r1, [pc, #128]	; (cce0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2d0>)
    cc60:	6809      	ldr	r1, [r1, #0]
    cc62:	4817      	ldr	r0, [pc, #92]	; (ccc0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    cc64:	6800      	ldr	r0, [r0, #0]
    cc66:	6800      	ldr	r0, [r0, #0]
			&CO_ObjDict[0],
			CO_OD_NoOfElements,
			CO_SDO_ODExtensions,
			nodeId,
			CO->CANmodule[0],
			CO_RXCAN_SDO_SRV+i,
    cc68:	69fc      	ldr	r4, [r7, #28]
    cc6a:	f8d4 413c 	ldr.w	r4, [r4, #316]	; 0x13c
		err = CO_SDO_init(
    cc6e:	3406      	adds	r4, #6
    cc70:	4d13      	ldr	r5, [pc, #76]	; (ccc0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    cc72:	682d      	ldr	r5, [r5, #0]
    cc74:	682d      	ldr	r5, [r5, #0]
			CO->CANmodule[0],
			CO_TXCAN_SDO_SRV+i);
    cc76:	69fe      	ldr	r6, [r7, #28]
    cc78:	f8d6 613c 	ldr.w	r6, [r6, #316]	; 0x13c
		err = CO_SDO_init(
    cc7c:	3607      	adds	r6, #7
    cc7e:	9609      	str	r6, [sp, #36]	; 0x24
    cc80:	9508      	str	r5, [sp, #32]
    cc82:	9407      	str	r4, [sp, #28]
    cc84:	9006      	str	r0, [sp, #24]
    cc86:	7df8      	ldrb	r0, [r7, #23]
    cc88:	9005      	str	r0, [sp, #20]
    cc8a:	9104      	str	r1, [sp, #16]
    cc8c:	2137      	movs	r1, #55	; 0x37
    cc8e:	9103      	str	r1, [sp, #12]
    cc90:	4922      	ldr	r1, [pc, #136]	; (cd1c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x30c>)
    cc92:	9102      	str	r1, [sp, #8]
    cc94:	9301      	str	r3, [sp, #4]
    cc96:	9200      	str	r2, [sp, #0]
    cc98:	6abb      	ldr	r3, [r7, #40]	; 0x28
    cc9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    cc9c:	68f9      	ldr	r1, [r7, #12]
    cc9e:	4670      	mov	r0, lr
    cca0:	4c1f      	ldr	r4, [pc, #124]	; (cd20 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x310>)
    cca2:	47a0      	blx	r4
    cca4:	4603      	mov	r3, r0
    cca6:	461a      	mov	r2, r3
    cca8:	69fb      	ldr	r3, [r7, #28]
    ccaa:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
	for (i=0; i<CO_NO_SDO_SERVER; i++)
    ccae:	69fb      	ldr	r3, [r7, #28]
    ccb0:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    ccb4:	1c5a      	adds	r2, r3, #1
    ccb6:	69fb      	ldr	r3, [r7, #28]
    ccb8:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    ccbc:	e788      	b.n	cbd0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x1c0>
    ccbe:	bf00      	nop
    ccc0:	20001100 	.word	0x20001100
    ccc4:	200010c4 	.word	0x200010c4
    ccc8:	20001114 	.word	0x20001114
    cccc:	20001104 	.word	0x20001104
    ccd0:	20001138 	.word	0x20001138
    ccd4:	20001108 	.word	0x20001108
    ccd8:	200011e8 	.word	0x200011e8
    ccdc:	20001278 	.word	0x20001278
    cce0:	2000110c 	.word	0x2000110c
    cce4:	20001300 	.word	0x20001300
    cce8:	20001594 	.word	0x20001594
    ccec:	20001600 	.word	0x20001600
    ccf0:	2000161c 	.word	0x2000161c
    ccf4:	20001640 	.word	0x20001640
    ccf8:	2000167c 	.word	0x2000167c
    ccfc:	200017fc 	.word	0x200017fc
    cd00:	2000195c 	.word	0x2000195c
    cd04:	20001110 	.word	0x20001110
    cd08:	20001974 	.word	0x20001974
    cd0c:	0000d635 	.word	0x0000d635
    cd10:	0000d195 	.word	0x0000d195
    cd14:	0000d699 	.word	0x0000d699
    cd18:	20000294 	.word	0x20000294
    cd1c:	000138a8 	.word	0x000138a8
    cd20:	00010781 	.word	0x00010781
	}

	if(err){CO_delete(); return err;}
    cd24:	69fb      	ldr	r3, [r7, #28]
    cd26:	f993 3140 	ldrsb.w	r3, [r3, #320]	; 0x140
    cd2a:	2b00      	cmp	r3, #0
    cd2c:	d006      	beq.n	cd3c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x32c>
    cd2e:	69f8      	ldr	r0, [r7, #28]
    cd30:	4b7a      	ldr	r3, [pc, #488]	; (cf1c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x50c>)
    cd32:	4798      	blx	r3
    cd34:	69fb      	ldr	r3, [r7, #28]
    cd36:	f993 3140 	ldrsb.w	r3, [r3, #320]	; 0x140
    cd3a:	e214      	b.n	d166 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x756>


	err = EM_Init(
    cd3c:	69fb      	ldr	r3, [r7, #28]
    cd3e:	1d18      	adds	r0, r3, #4
    cd40:	4b77      	ldr	r3, [pc, #476]	; (cf20 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x510>)
    cd42:	681b      	ldr	r3, [r3, #0]
    cd44:	6899      	ldr	r1, [r3, #8]
    cd46:	4b76      	ldr	r3, [pc, #472]	; (cf20 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x510>)
    cd48:	681b      	ldr	r3, [r3, #0]
    cd4a:	68dc      	ldr	r4, [r3, #12]
    cd4c:	4b74      	ldr	r3, [pc, #464]	; (cf20 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x510>)
    cd4e:	681b      	ldr	r3, [r3, #0]
    cd50:	685d      	ldr	r5, [r3, #4]
    cd52:	4b73      	ldr	r3, [pc, #460]	; (cf20 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x510>)
    cd54:	681b      	ldr	r3, [r3, #0]
    cd56:	681b      	ldr	r3, [r3, #0]
			&OD_errorRegister,
			&OD_preDefinedErrorField[0],
			ODL_preDefinedErrorField_arrayLength,
			CO->CANmodule[0],
			CO_TXCAN_EMERG,
			CO_CAN_ID_EMERGENCY + (uint32_t)nodeId);
    cd58:	7dfa      	ldrb	r2, [r7, #23]
	err = EM_Init(
    cd5a:	3280      	adds	r2, #128	; 0x80
    cd5c:	9207      	str	r2, [sp, #28]
    cd5e:	2202      	movs	r2, #2
    cd60:	9206      	str	r2, [sp, #24]
    cd62:	9305      	str	r3, [sp, #20]
    cd64:	2308      	movs	r3, #8
    cd66:	9304      	str	r3, [sp, #16]
    cd68:	4b6e      	ldr	r3, [pc, #440]	; (cf24 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x514>)
    cd6a:	9303      	str	r3, [sp, #12]
    cd6c:	4b6e      	ldr	r3, [pc, #440]	; (cf28 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    cd6e:	9302      	str	r3, [sp, #8]
    cd70:	230a      	movs	r3, #10
    cd72:	9301      	str	r3, [sp, #4]
    cd74:	4b6d      	ldr	r3, [pc, #436]	; (cf2c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x51c>)
    cd76:	9300      	str	r3, [sp, #0]
    cd78:	462b      	mov	r3, r5
    cd7a:	4622      	mov	r2, r4
    cd7c:	4c6c      	ldr	r4, [pc, #432]	; (cf30 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x520>)
    cd7e:	47a0      	blx	r4
    cd80:	4603      	mov	r3, r0
    cd82:	461a      	mov	r2, r3
    cd84:	69fb      	ldr	r3, [r7, #28]
    cd86:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140

	if(err){CO_delete(); return err;}
    cd8a:	69fb      	ldr	r3, [r7, #28]
    cd8c:	f993 3140 	ldrsb.w	r3, [r3, #320]	; 0x140
    cd90:	2b00      	cmp	r3, #0
    cd92:	d006      	beq.n	cda2 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x392>
    cd94:	69f8      	ldr	r0, [r7, #28]
    cd96:	4b61      	ldr	r3, [pc, #388]	; (cf1c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x50c>)
    cd98:	4798      	blx	r3
    cd9a:	69fb      	ldr	r3, [r7, #28]
    cd9c:	f993 3140 	ldrsb.w	r3, [r3, #320]	; 0x140
    cda0:	e1e1      	b.n	d166 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x756>


	err = NMT_Init(
    cda2:	69fb      	ldr	r3, [r7, #28]
    cda4:	f103 0010 	add.w	r0, r3, #16
    cda8:	4b5d      	ldr	r3, [pc, #372]	; (cf20 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x510>)
    cdaa:	681b      	ldr	r3, [r3, #0]
    cdac:	691c      	ldr	r4, [r3, #16]
    cdae:	4b5c      	ldr	r3, [pc, #368]	; (cf20 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x510>)
    cdb0:	681b      	ldr	r3, [r3, #0]
    cdb2:	68dd      	ldr	r5, [r3, #12]
    cdb4:	4b5a      	ldr	r3, [pc, #360]	; (cf20 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x510>)
    cdb6:	681b      	ldr	r3, [r3, #0]
    cdb8:	681b      	ldr	r3, [r3, #0]
    cdba:	4a59      	ldr	r2, [pc, #356]	; (cf20 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x510>)
    cdbc:	6812      	ldr	r2, [r2, #0]
    cdbe:	6812      	ldr	r2, [r2, #0]
	CO->CANmodule[0],
	CO_RXCAN_NMT,
	CO_CAN_ID_NMT_SERVICE,
	CO->CANmodule[0],
	CO_TXCAN_HB,
	CO_CAN_ID_HEARTBEAT + nodeId);
    cdc0:	7df9      	ldrb	r1, [r7, #23]
    cdc2:	f501 61e0 	add.w	r1, r1, #1792	; 0x700
	err = NMT_Init(
    cdc6:	7dfe      	ldrb	r6, [r7, #23]
    cdc8:	9106      	str	r1, [sp, #24]
    cdca:	2108      	movs	r1, #8
    cdcc:	9105      	str	r1, [sp, #20]
    cdce:	9204      	str	r2, [sp, #16]
    cdd0:	2200      	movs	r2, #0
    cdd2:	9203      	str	r2, [sp, #12]
    cdd4:	2200      	movs	r2, #0
    cdd6:	9202      	str	r2, [sp, #8]
    cdd8:	9301      	str	r3, [sp, #4]
    cdda:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    cdde:	9300      	str	r3, [sp, #0]
    cde0:	4633      	mov	r3, r6
    cde2:	462a      	mov	r2, r5
    cde4:	4621      	mov	r1, r4
    cde6:	4c53      	ldr	r4, [pc, #332]	; (cf34 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x524>)
    cde8:	47a0      	blx	r4
    cdea:	4603      	mov	r3, r0
    cdec:	461a      	mov	r2, r3
    cdee:	69fb      	ldr	r3, [r7, #28]
    cdf0:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140

	if(err){CO_delete(); return err;}
    cdf4:	69fb      	ldr	r3, [r7, #28]
    cdf6:	f993 3140 	ldrsb.w	r3, [r3, #320]	; 0x140
    cdfa:	2b00      	cmp	r3, #0
    cdfc:	d006      	beq.n	ce0c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x3fc>
    cdfe:	69f8      	ldr	r0, [r7, #28]
    ce00:	4b46      	ldr	r3, [pc, #280]	; (cf1c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x50c>)
    ce02:	4798      	blx	r3
    ce04:	69fb      	ldr	r3, [r7, #28]
    ce06:	f993 3140 	ldrsb.w	r3, [r3, #320]	; 0x140
    ce0a:	e1ac      	b.n	d166 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x756>


	if (nodeId==1)
    ce0c:	7dfb      	ldrb	r3, [r7, #23]
    ce0e:	2b01      	cmp	r3, #1
    ce10:	d10d      	bne.n	ce2e <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x41e>
	{
				NMTM_txBuff = CAN_Tx_BufferInit(/* return pointer to 8-byte CAN data buffer, which should be populated */
    ce12:	69f8      	ldr	r0, [r7, #28]
    ce14:	2300      	movs	r3, #0
    ce16:	9301      	str	r3, [sp, #4]
    ce18:	2302      	movs	r3, #2
    ce1a:	9300      	str	r3, [sp, #0]
    ce1c:	2300      	movs	r3, #0
    ce1e:	2200      	movs	r2, #0
    ce20:	2100      	movs	r1, #0
    ce22:	4c45      	ldr	r4, [pc, #276]	; (cf38 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x528>)
    ce24:	47a0      	blx	r4
    ce26:	4602      	mov	r2, r0
    ce28:	69fb      	ldr	r3, [r7, #28]
    ce2a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	}
              /* synchronous message flag bit */



	err = SYNC_Init(
    ce2e:	4b3c      	ldr	r3, [pc, #240]	; (cf20 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x510>)
    ce30:	681b      	ldr	r3, [r3, #0]
    ce32:	695e      	ldr	r6, [r3, #20]
    ce34:	4b3a      	ldr	r3, [pc, #232]	; (cf20 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x510>)
    ce36:	681b      	ldr	r3, [r3, #0]
    ce38:	689b      	ldr	r3, [r3, #8]
    ce3a:	60fb      	str	r3, [r7, #12]
    ce3c:	4b38      	ldr	r3, [pc, #224]	; (cf20 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x510>)
    ce3e:	681b      	ldr	r3, [r3, #0]
    ce40:	6859      	ldr	r1, [r3, #4]
    ce42:	60b9      	str	r1, [r7, #8]
	CO->SYNC,
	CO->em,
	CO->SDO[0],
	&CO->NMT->operatingState,
    ce44:	4b36      	ldr	r3, [pc, #216]	; (cf20 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x510>)
    ce46:	681b      	ldr	r3, [r3, #0]
    ce48:	691b      	ldr	r3, [r3, #16]
	err = SYNC_Init(
    ce4a:	607b      	str	r3, [r7, #4]
    ce4c:	4b3b      	ldr	r3, [pc, #236]	; (cf3c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x52c>)
    ce4e:	689b      	ldr	r3, [r3, #8]
    ce50:	4a3a      	ldr	r2, [pc, #232]	; (cf3c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x52c>)
    ce52:	68d2      	ldr	r2, [r2, #12]
    ce54:	4939      	ldr	r1, [pc, #228]	; (cf3c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x52c>)
    ce56:	f891 1058 	ldrb.w	r1, [r1, #88]	; 0x58
    ce5a:	4831      	ldr	r0, [pc, #196]	; (cf20 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x510>)
    ce5c:	6800      	ldr	r0, [r0, #0]
    ce5e:	6800      	ldr	r0, [r0, #0]
    ce60:	4c2f      	ldr	r4, [pc, #188]	; (cf20 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x510>)
    ce62:	6824      	ldr	r4, [r4, #0]
    ce64:	6824      	ldr	r4, [r4, #0]
    ce66:	2501      	movs	r5, #1
    ce68:	9507      	str	r5, [sp, #28]
    ce6a:	9406      	str	r4, [sp, #24]
    ce6c:	2401      	movs	r4, #1
    ce6e:	9405      	str	r4, [sp, #20]
    ce70:	9004      	str	r0, [sp, #16]
    ce72:	9103      	str	r1, [sp, #12]
    ce74:	9202      	str	r2, [sp, #8]
    ce76:	9301      	str	r3, [sp, #4]
    ce78:	6878      	ldr	r0, [r7, #4]
    ce7a:	9000      	str	r0, [sp, #0]
    ce7c:	68bb      	ldr	r3, [r7, #8]
    ce7e:	68fa      	ldr	r2, [r7, #12]
    ce80:	4631      	mov	r1, r6
    ce82:	69f8      	ldr	r0, [r7, #28]
    ce84:	4c2e      	ldr	r4, [pc, #184]	; (cf40 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x530>)
    ce86:	47a0      	blx	r4
    ce88:	4603      	mov	r3, r0
    ce8a:	461a      	mov	r2, r3
    ce8c:	69fb      	ldr	r3, [r7, #28]
    ce8e:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
	CO->CANmodule[0],
	CO_RXCAN_SYNC,
	CO->CANmodule[0],
	CO_TXCAN_SYNC);

	if(err){CO_delete(); return err;}
    ce92:	69fb      	ldr	r3, [r7, #28]
    ce94:	f993 3140 	ldrsb.w	r3, [r3, #320]	; 0x140
    ce98:	2b00      	cmp	r3, #0
    ce9a:	d006      	beq.n	ceaa <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x49a>
    ce9c:	69f8      	ldr	r0, [r7, #28]
    ce9e:	4b1f      	ldr	r3, [pc, #124]	; (cf1c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x50c>)
    cea0:	4798      	blx	r3
    cea2:	69fb      	ldr	r3, [r7, #28]
    cea4:	f993 3140 	ldrsb.w	r3, [r3, #320]	; 0x140
    cea8:	e15d      	b.n	d166 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x756>


	for(i=0; i<CO_NO_RPDO; i++){
    ceaa:	69fb      	ldr	r3, [r7, #28]
    ceac:	2200      	movs	r2, #0
    ceae:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    ceb2:	69fb      	ldr	r3, [r7, #28]
    ceb4:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    ceb8:	2b03      	cmp	r3, #3
    ceba:	f200 8095 	bhi.w	cfe8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x5d8>
		CO_CANmodule_t *CANdevRx = CO->CANmodule[0];
    cebe:	4b18      	ldr	r3, [pc, #96]	; (cf20 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x510>)
    cec0:	681b      	ldr	r3, [r3, #0]
    cec2:	681b      	ldr	r3, [r3, #0]
    cec4:	627b      	str	r3, [r7, #36]	; 0x24
		CANdevRxIdx = CO_RXCAN_RPDO + i;
    cec6:	69fb      	ldr	r3, [r7, #28]
    cec8:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    cecc:	1c9a      	adds	r2, r3, #2
    cece:	69fb      	ldr	r3, [r7, #28]
    ced0:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134

		err = CO_RPDO_init(
    ced4:	4b12      	ldr	r3, [pc, #72]	; (cf20 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x510>)
    ced6:	681b      	ldr	r3, [r3, #0]
		CO->RPDO[i],
    ced8:	69fa      	ldr	r2, [r7, #28]
    ceda:	f8d2 213c 	ldr.w	r2, [r2, #316]	; 0x13c
		err = CO_RPDO_init(
    cede:	3206      	adds	r2, #6
    cee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    cee4:	60fb      	str	r3, [r7, #12]
    cee6:	4b0e      	ldr	r3, [pc, #56]	; (cf20 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x510>)
    cee8:	681b      	ldr	r3, [r3, #0]
    ceea:	689b      	ldr	r3, [r3, #8]
    ceec:	60bb      	str	r3, [r7, #8]
    ceee:	4b0c      	ldr	r3, [pc, #48]	; (cf20 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x510>)
    cef0:	681b      	ldr	r3, [r3, #0]
    cef2:	685b      	ldr	r3, [r3, #4]
    cef4:	607b      	str	r3, [r7, #4]
    cef6:	4b0a      	ldr	r3, [pc, #40]	; (cf20 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x510>)
    cef8:	681b      	ldr	r3, [r3, #0]
    cefa:	6958      	ldr	r0, [r3, #20]
		CO->em,
		CO->SDO[0],
		CO->SYNC,
		&CO->NMT->operatingState,
    cefc:	4b08      	ldr	r3, [pc, #32]	; (cf20 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x510>)
    cefe:	681b      	ldr	r3, [r3, #0]
    cf00:	691b      	ldr	r3, [r3, #16]
		err = CO_RPDO_init(
    cf02:	603b      	str	r3, [r7, #0]
		nodeId,
		((i<4) ? (CO_CAN_ID_RPDO_1+i*0x100) : 0),
    cf04:	69fb      	ldr	r3, [r7, #28]
    cf06:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
		err = CO_RPDO_init(
    cf0a:	2b03      	cmp	r3, #3
    cf0c:	d81a      	bhi.n	cf44 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x534>
		((i<4) ? (CO_CAN_ID_RPDO_1+i*0x100) : 0),
    cf0e:	69fb      	ldr	r3, [r7, #28]
    cf10:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
		err = CO_RPDO_init(
    cf14:	3302      	adds	r3, #2
    cf16:	021a      	lsls	r2, r3, #8
    cf18:	e015      	b.n	cf46 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x536>
    cf1a:	bf00      	nop
    cf1c:	0000d195 	.word	0x0000d195
    cf20:	20001100 	.word	0x20001100
    cf24:	20000124 	.word	0x20000124
    cf28:	2000011c 	.word	0x2000011c
    cf2c:	2000014c 	.word	0x2000014c
    cf30:	0000e0fd 	.word	0x0000e0fd
    cf34:	0000ebed 	.word	0x0000ebed
    cf38:	0000d901 	.word	0x0000d901
    cf3c:	20000294 	.word	0x20000294
    cf40:	0001274d 	.word	0x0001274d
    cf44:	2200      	movs	r2, #0
		0,
		(CO_RPDOCommPar_t*) &OD_RPDOCommunicationParameter[i],
    cf46:	69fb      	ldr	r3, [r7, #28]
    cf48:	f8d3 113c 	ldr.w	r1, [r3, #316]	; 0x13c
    cf4c:	460b      	mov	r3, r1
    cf4e:	005b      	lsls	r3, r3, #1
    cf50:	440b      	add	r3, r1
    cf52:	009b      	lsls	r3, r3, #2
    cf54:	3368      	adds	r3, #104	; 0x68
    cf56:	4986      	ldr	r1, [pc, #536]	; (d170 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x760>)
    cf58:	440b      	add	r3, r1
    cf5a:	1d1c      	adds	r4, r3, #4
		(CO_RPDOMapPar_t*) &OD_RPDOMappingParameter[i],
    cf5c:	69fb      	ldr	r3, [r7, #28]
    cf5e:	f8d3 113c 	ldr.w	r1, [r3, #316]	; 0x13c
    cf62:	460b      	mov	r3, r1
    cf64:	00db      	lsls	r3, r3, #3
    cf66:	440b      	add	r3, r1
    cf68:	009b      	lsls	r3, r3, #2
    cf6a:	3398      	adds	r3, #152	; 0x98
    cf6c:	4980      	ldr	r1, [pc, #512]	; (d170 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x760>)
    cf6e:	440b      	add	r3, r1
    cf70:	3304      	adds	r3, #4
		OD_H1400_RXPDO_1_PARAM+i,
    cf72:	69f9      	ldr	r1, [r7, #28]
    cf74:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
		err = CO_RPDO_init(
    cf78:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
		OD_H1600_RXPDO_1_MAPPING+i,
    cf7c:	69fd      	ldr	r5, [r7, #28]
    cf7e:	f8d5 513c 	ldr.w	r5, [r5, #316]	; 0x13c
		err = CO_RPDO_init(
    cf82:	f505 55b0 	add.w	r5, r5, #5632	; 0x1600
    cf86:	69fe      	ldr	r6, [r7, #28]
    cf88:	f8d6 6134 	ldr.w	r6, [r6, #308]	; 0x134
    cf8c:	960a      	str	r6, [sp, #40]	; 0x28
    cf8e:	6a7e      	ldr	r6, [r7, #36]	; 0x24
    cf90:	9609      	str	r6, [sp, #36]	; 0x24
    cf92:	9508      	str	r5, [sp, #32]
    cf94:	9107      	str	r1, [sp, #28]
    cf96:	9306      	str	r3, [sp, #24]
    cf98:	9405      	str	r4, [sp, #20]
    cf9a:	2300      	movs	r3, #0
    cf9c:	9304      	str	r3, [sp, #16]
    cf9e:	9203      	str	r2, [sp, #12]
    cfa0:	7dfb      	ldrb	r3, [r7, #23]
    cfa2:	9302      	str	r3, [sp, #8]
    cfa4:	683b      	ldr	r3, [r7, #0]
    cfa6:	9301      	str	r3, [sp, #4]
    cfa8:	9000      	str	r0, [sp, #0]
    cfaa:	687b      	ldr	r3, [r7, #4]
    cfac:	68ba      	ldr	r2, [r7, #8]
    cfae:	68f9      	ldr	r1, [r7, #12]
    cfb0:	69f8      	ldr	r0, [r7, #28]
    cfb2:	4c70      	ldr	r4, [pc, #448]	; (d174 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>)
    cfb4:	47a0      	blx	r4
    cfb6:	4603      	mov	r3, r0
    cfb8:	461a      	mov	r2, r3
    cfba:	69fb      	ldr	r3, [r7, #28]
    cfbc:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
		CANdevRx,
		CANdevRxIdx);

		if(err){CO_delete(); return err;}
    cfc0:	69fb      	ldr	r3, [r7, #28]
    cfc2:	f993 3140 	ldrsb.w	r3, [r3, #320]	; 0x140
    cfc6:	2b00      	cmp	r3, #0
    cfc8:	d006      	beq.n	cfd8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x5c8>
    cfca:	69f8      	ldr	r0, [r7, #28]
    cfcc:	4b6a      	ldr	r3, [pc, #424]	; (d178 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x768>)
    cfce:	4798      	blx	r3
    cfd0:	69fb      	ldr	r3, [r7, #28]
    cfd2:	f993 3140 	ldrsb.w	r3, [r3, #320]	; 0x140
    cfd6:	e0c6      	b.n	d166 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x756>
	for(i=0; i<CO_NO_RPDO; i++){
    cfd8:	69fb      	ldr	r3, [r7, #28]
    cfda:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    cfde:	1c5a      	adds	r2, r3, #1
    cfe0:	69fb      	ldr	r3, [r7, #28]
    cfe2:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    cfe6:	e764      	b.n	ceb2 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x4a2>
	}


	for(i=0; i<CO_NO_TPDO; i++){
    cfe8:	69fb      	ldr	r3, [r7, #28]
    cfea:	2200      	movs	r2, #0
    cfec:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    cff0:	69fb      	ldr	r3, [r7, #28]
    cff2:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    cff6:	2b03      	cmp	r3, #3
    cff8:	d876      	bhi.n	d0e8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x6d8>
		err = CO_TPDO_init(
    cffa:	4b60      	ldr	r3, [pc, #384]	; (d17c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x76c>)
    cffc:	681b      	ldr	r3, [r3, #0]
		CO->TPDO[i],
    cffe:	69fa      	ldr	r2, [r7, #28]
    d000:	f8d2 213c 	ldr.w	r2, [r2, #316]	; 0x13c
		err = CO_TPDO_init(
    d004:	320a      	adds	r2, #10
    d006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    d00a:	60fb      	str	r3, [r7, #12]
    d00c:	4b5b      	ldr	r3, [pc, #364]	; (d17c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x76c>)
    d00e:	681b      	ldr	r3, [r3, #0]
    d010:	689b      	ldr	r3, [r3, #8]
    d012:	60bb      	str	r3, [r7, #8]
    d014:	4b59      	ldr	r3, [pc, #356]	; (d17c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x76c>)
    d016:	681b      	ldr	r3, [r3, #0]
    d018:	685b      	ldr	r3, [r3, #4]
    d01a:	607b      	str	r3, [r7, #4]
		CO->em,
		CO->SDO[0],
		&CO->NMT->operatingState,
    d01c:	4b57      	ldr	r3, [pc, #348]	; (d17c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x76c>)
    d01e:	681b      	ldr	r3, [r3, #0]
    d020:	691b      	ldr	r3, [r3, #16]
		err = CO_TPDO_init(
    d022:	603b      	str	r3, [r7, #0]
		nodeId,
		((i<4) ? (CO_CAN_ID_TPDO_1+i*0x100) : 0),
    d024:	69fb      	ldr	r3, [r7, #28]
    d026:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
		err = CO_TPDO_init(
    d02a:	2b03      	cmp	r3, #3
    d02c:	d806      	bhi.n	d03c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x62c>
		((i<4) ? (CO_CAN_ID_TPDO_1+i*0x100) : 0),
    d02e:	69fb      	ldr	r3, [r7, #28]
    d030:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    d034:	021b      	lsls	r3, r3, #8
		err = CO_TPDO_init(
    d036:	f503 72c0 	add.w	r2, r3, #384	; 0x180
    d03a:	e000      	b.n	d03e <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x62e>
    d03c:	2200      	movs	r2, #0
		0,
		(CO_TPDOCommPar_t*) &OD_TPDOCommunicationParameter[i],
    d03e:	69fb      	ldr	r3, [r7, #28]
    d040:	f8d3 113c 	ldr.w	r1, [r3, #316]	; 0x13c
    d044:	460b      	mov	r3, r1
    d046:	00db      	lsls	r3, r3, #3
    d048:	1a5b      	subs	r3, r3, r1
    d04a:	009b      	lsls	r3, r3, #2
    d04c:	f503 7394 	add.w	r3, r3, #296	; 0x128
    d050:	4947      	ldr	r1, [pc, #284]	; (d170 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x760>)
    d052:	440b      	add	r3, r1
    d054:	1d18      	adds	r0, r3, #4
		(CO_TPDOMapPar_t*) &OD_TPDOMappingParameter[i],
    d056:	69fb      	ldr	r3, [r7, #28]
    d058:	f8d3 113c 	ldr.w	r1, [r3, #316]	; 0x13c
    d05c:	460b      	mov	r3, r1
    d05e:	00db      	lsls	r3, r3, #3
    d060:	440b      	add	r3, r1
    d062:	009b      	lsls	r3, r3, #2
    d064:	f503 73cc 	add.w	r3, r3, #408	; 0x198
    d068:	4941      	ldr	r1, [pc, #260]	; (d170 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x760>)
    d06a:	440b      	add	r3, r1
    d06c:	3304      	adds	r3, #4
		OD_H1800_TXPDO_1_PARAM+i,
    d06e:	69f9      	ldr	r1, [r7, #28]
    d070:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
		err = CO_TPDO_init(
    d074:	f501 51c0 	add.w	r1, r1, #6144	; 0x1800
		OD_H1A00_TXPDO_1_MAPPING+i,
    d078:	69fc      	ldr	r4, [r7, #28]
    d07a:	f8d4 413c 	ldr.w	r4, [r4, #316]	; 0x13c
		err = CO_TPDO_init(
    d07e:	f504 54d0 	add.w	r4, r4, #6656	; 0x1a00
    d082:	4d3e      	ldr	r5, [pc, #248]	; (d17c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x76c>)
    d084:	682d      	ldr	r5, [r5, #0]
    d086:	682d      	ldr	r5, [r5, #0]
		CO->CANmodule[0],
		CO_TXCAN_TPDO+i);
    d088:	69fe      	ldr	r6, [r7, #28]
    d08a:	f8d6 613c 	ldr.w	r6, [r6, #316]	; 0x13c
		err = CO_TPDO_init(
    d08e:	3603      	adds	r6, #3
    d090:	9609      	str	r6, [sp, #36]	; 0x24
    d092:	9508      	str	r5, [sp, #32]
    d094:	9407      	str	r4, [sp, #28]
    d096:	9106      	str	r1, [sp, #24]
    d098:	9305      	str	r3, [sp, #20]
    d09a:	9004      	str	r0, [sp, #16]
    d09c:	2300      	movs	r3, #0
    d09e:	9303      	str	r3, [sp, #12]
    d0a0:	9202      	str	r2, [sp, #8]
    d0a2:	7dfb      	ldrb	r3, [r7, #23]
    d0a4:	9301      	str	r3, [sp, #4]
    d0a6:	683b      	ldr	r3, [r7, #0]
    d0a8:	9300      	str	r3, [sp, #0]
    d0aa:	687b      	ldr	r3, [r7, #4]
    d0ac:	68ba      	ldr	r2, [r7, #8]
    d0ae:	68f9      	ldr	r1, [r7, #12]
    d0b0:	69f8      	ldr	r0, [r7, #28]
    d0b2:	4c33      	ldr	r4, [pc, #204]	; (d180 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x770>)
    d0b4:	47a0      	blx	r4
    d0b6:	4603      	mov	r3, r0
    d0b8:	461a      	mov	r2, r3
    d0ba:	69fb      	ldr	r3, [r7, #28]
    d0bc:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
		if(err){CO_delete(); return err;}
    d0c0:	69fb      	ldr	r3, [r7, #28]
    d0c2:	f993 3140 	ldrsb.w	r3, [r3, #320]	; 0x140
    d0c6:	2b00      	cmp	r3, #0
    d0c8:	d006      	beq.n	d0d8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x6c8>
    d0ca:	69f8      	ldr	r0, [r7, #28]
    d0cc:	4b2a      	ldr	r3, [pc, #168]	; (d178 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x768>)
    d0ce:	4798      	blx	r3
    d0d0:	69fb      	ldr	r3, [r7, #28]
    d0d2:	f993 3140 	ldrsb.w	r3, [r3, #320]	; 0x140
    d0d6:	e046      	b.n	d166 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x756>
	for(i=0; i<CO_NO_TPDO; i++){
    d0d8:	69fb      	ldr	r3, [r7, #28]
    d0da:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    d0de:	1c5a      	adds	r2, r3, #1
    d0e0:	69fb      	ldr	r3, [r7, #28]
    d0e2:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    d0e6:	e783      	b.n	cff0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x5e0>
	}

	HB_SetNode(coNode);
    d0e8:	69fb      	ldr	r3, [r7, #28]
    d0ea:	f103 0214 	add.w	r2, r3, #20
    d0ee:	69fb      	ldr	r3, [r7, #28]
    d0f0:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
    d0f4:	4619      	mov	r1, r3
    d0f6:	4610      	mov	r0, r2
    d0f8:	4b22      	ldr	r3, [pc, #136]	; (d184 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x774>)
    d0fa:	4798      	blx	r3
	err = CO_HBconsumer_init(
    d0fc:	69fb      	ldr	r3, [r7, #28]
    d0fe:	f103 0014 	add.w	r0, r3, #20
    d102:	4b1e      	ldr	r3, [pc, #120]	; (d17c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x76c>)
    d104:	681b      	ldr	r3, [r3, #0]
    d106:	6b9c      	ldr	r4, [r3, #56]	; 0x38
    d108:	4b1c      	ldr	r3, [pc, #112]	; (d17c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x76c>)
    d10a:	681b      	ldr	r3, [r3, #0]
    d10c:	689d      	ldr	r5, [r3, #8]
    d10e:	4b1b      	ldr	r3, [pc, #108]	; (d17c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x76c>)
    d110:	681b      	ldr	r3, [r3, #0]
    d112:	685e      	ldr	r6, [r3, #4]
    d114:	4b1c      	ldr	r3, [pc, #112]	; (d188 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
    d116:	681b      	ldr	r3, [r3, #0]
    d118:	4a18      	ldr	r2, [pc, #96]	; (d17c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x76c>)
    d11a:	6812      	ldr	r2, [r2, #0]
    d11c:	6812      	ldr	r2, [r2, #0]
    d11e:	2107      	movs	r1, #7
    d120:	9104      	str	r1, [sp, #16]
    d122:	9203      	str	r2, [sp, #12]
    d124:	2204      	movs	r2, #4
    d126:	9202      	str	r2, [sp, #8]
    d128:	9301      	str	r3, [sp, #4]
    d12a:	4b18      	ldr	r3, [pc, #96]	; (d18c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x77c>)
    d12c:	9300      	str	r3, [sp, #0]
    d12e:	4633      	mov	r3, r6
    d130:	462a      	mov	r2, r5
    d132:	4621      	mov	r1, r4
    d134:	4c16      	ldr	r4, [pc, #88]	; (d190 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x780>)
    d136:	47a0      	blx	r4
    d138:	4603      	mov	r3, r0
    d13a:	461a      	mov	r2, r3
    d13c:	69fb      	ldr	r3, [r7, #28]
    d13e:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
	CO_HBcons_monitoredNodes,
	CO_NO_HB_CONS,
	CO->CANmodule[0],
	CO_RXCAN_CONS_HB);

	if(err){CO_delete(); return err;}
    d142:	69fb      	ldr	r3, [r7, #28]
    d144:	f993 3140 	ldrsb.w	r3, [r3, #320]	; 0x140
    d148:	2b00      	cmp	r3, #0
    d14a:	d006      	beq.n	d15a <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x74a>
    d14c:	69f8      	ldr	r0, [r7, #28]
    d14e:	4b0a      	ldr	r3, [pc, #40]	; (d178 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x768>)
    d150:	4798      	blx	r3
    d152:	69fb      	ldr	r3, [r7, #28]
    d154:	f993 3140 	ldrsb.w	r3, [r3, #320]	; 0x140
    d158:	e005      	b.n	d166 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x756>
		OD_INDEX_TRACE_CONFIG + i,
		OD_INDEX_TRACE + i);
	}
	#endif

	ptrCO=CO;
    d15a:	4b08      	ldr	r3, [pc, #32]	; (d17c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x76c>)
    d15c:	681a      	ldr	r2, [r3, #0]
    d15e:	69fb      	ldr	r3, [r7, #28]
    d160:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	return CO_ERROR_NO;
    d164:	2300      	movs	r3, #0
}
    d166:	4618      	mov	r0, r3
    d168:	3734      	adds	r7, #52	; 0x34
    d16a:	46bd      	mov	sp, r7
    d16c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d16e:	bf00      	nop
    d170:	20000294 	.word	0x20000294
    d174:	0000fd0d 	.word	0x0000fd0d
    d178:	0000d195 	.word	0x0000d195
    d17c:	20001100 	.word	0x20001100
    d180:	0000fe15 	.word	0x0000fe15
    d184:	0000eaf5 	.word	0x0000eaf5
    d188:	20001110 	.word	0x20001110
    d18c:	200002c4 	.word	0x200002c4
    d190:	0000e905 	.word	0x0000e905

0000d194 <_ZN8CO_Class9CO_deleteEv>:


/******************************************************************************/
void CO_Class::CO_delete(void){
    d194:	b580      	push	{r7, lr}
    d196:	b082      	sub	sp, #8
    d198:	af00      	add	r7, sp, #0
    d19a:	6078      	str	r0, [r7, #4]
	#ifndef CO_USE_GLOBALS
	uint32_t i;
	#endif

	CO_CANsetConfigurationMode(coCanDescr);
    d19c:	687a      	ldr	r2, [r7, #4]
    d19e:	687b      	ldr	r3, [r7, #4]
    d1a0:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    d1a4:	4619      	mov	r1, r3
    d1a6:	4610      	mov	r0, r2
    d1a8:	4b04      	ldr	r3, [pc, #16]	; (d1bc <_ZN8CO_Class9CO_deleteEv+0x28>)
    d1aa:	4798      	blx	r3
	CANmodule_Disable();
    d1ac:	687b      	ldr	r3, [r7, #4]
    d1ae:	4618      	mov	r0, r3
    d1b0:	4b03      	ldr	r3, [pc, #12]	; (d1c0 <_ZN8CO_Class9CO_deleteEv+0x2c>)
    d1b2:	4798      	blx	r3
		free(CO_CANmodule_txArray0);
		free(CO_CANmodule_rxArray0);
		free(CO->CANmodule[0]);
		CO = NULL;
	#endif
}
    d1b4:	bf00      	nop
    d1b6:	3708      	adds	r7, #8
    d1b8:	46bd      	mov	sp, r7
    d1ba:	bd80      	pop	{r7, pc}
    d1bc:	0000d635 	.word	0x0000d635
    d1c0:	0000d7ed 	.word	0x0000d7ed

0000d1c4 <_ZN8CO_Class7ProcessEmPm>:


/******************************************************************************/
CO_NMT_reset_cmd_t CO_Class::Process(uint32_t                timeDifference_ms,
uint32_t               *timerNext_ms)
{
    d1c4:	b590      	push	{r4, r7, lr}
    d1c6:	b08b      	sub	sp, #44	; 0x2c
    d1c8:	af04      	add	r7, sp, #16
    d1ca:	60f8      	str	r0, [r7, #12]
    d1cc:	60b9      	str	r1, [r7, #8]
    d1ce:	607a      	str	r2, [r7, #4]
	uint8_t i;
	bool_t NMTisPreOrOperational = false;
    d1d0:	2300      	movs	r3, #0
    d1d2:	75bb      	strb	r3, [r7, #22]
	CO_NMT_reset_cmd_t reset = CO_RESET_NOT;
    d1d4:	2300      	movs	r3, #0
    d1d6:	757b      	strb	r3, [r7, #21]
	ms50 = 0;
    d1d8:	68fb      	ldr	r3, [r7, #12]
    d1da:	2200      	movs	r2, #0
    d1dc:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	if(CO->NMT->operatingState == CO_NMT_PRE_OPERATIONAL || CO->NMT->operatingState == CO_NMT_OPERATIONAL)
    d1e0:	4b3c      	ldr	r3, [pc, #240]	; (d2d4 <_ZN8CO_Class7ProcessEmPm+0x110>)
    d1e2:	681b      	ldr	r3, [r3, #0]
    d1e4:	691b      	ldr	r3, [r3, #16]
    d1e6:	781b      	ldrb	r3, [r3, #0]
    d1e8:	2b7f      	cmp	r3, #127	; 0x7f
    d1ea:	d005      	beq.n	d1f8 <_ZN8CO_Class7ProcessEmPm+0x34>
    d1ec:	4b39      	ldr	r3, [pc, #228]	; (d2d4 <_ZN8CO_Class7ProcessEmPm+0x110>)
    d1ee:	681b      	ldr	r3, [r3, #0]
    d1f0:	691b      	ldr	r3, [r3, #16]
    d1f2:	781b      	ldrb	r3, [r3, #0]
    d1f4:	2b05      	cmp	r3, #5
    d1f6:	d101      	bne.n	d1fc <_ZN8CO_Class7ProcessEmPm+0x38>
	NMTisPreOrOperational = true;
    d1f8:	2301      	movs	r3, #1
    d1fa:	75bb      	strb	r3, [r7, #22]

	ms50 += timeDifference_ms;
    d1fc:	68fb      	ldr	r3, [r7, #12]
    d1fe:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
    d202:	68bb      	ldr	r3, [r7, #8]
    d204:	441a      	add	r2, r3
    d206:	68fb      	ldr	r3, [r7, #12]
    d208:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	if(ms50 >= 50){
    d20c:	68fb      	ldr	r3, [r7, #12]
    d20e:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
    d212:	2b31      	cmp	r3, #49	; 0x31
    d214:	d907      	bls.n	d226 <_ZN8CO_Class7ProcessEmPm+0x62>
		ms50 -= 50;
    d216:	68fb      	ldr	r3, [r7, #12]
    d218:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
    d21c:	f1a3 0232 	sub.w	r2, r3, #50	; 0x32
    d220:	68fb      	ldr	r3, [r7, #12]
    d222:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
		//CO_NMT_blinkingProcess50ms();
	}
	if(timerNext_ms != NULL){
    d226:	687b      	ldr	r3, [r7, #4]
    d228:	2b00      	cmp	r3, #0
    d22a:	d006      	beq.n	d23a <_ZN8CO_Class7ProcessEmPm+0x76>
		if(*timerNext_ms > 50){
    d22c:	687b      	ldr	r3, [r7, #4]
    d22e:	681b      	ldr	r3, [r3, #0]
    d230:	2b32      	cmp	r3, #50	; 0x32
    d232:	d902      	bls.n	d23a <_ZN8CO_Class7ProcessEmPm+0x76>
			*timerNext_ms = 50;
    d234:	687b      	ldr	r3, [r7, #4]
    d236:	2232      	movs	r2, #50	; 0x32
    d238:	601a      	str	r2, [r3, #0]
		}
	}


	for(i=0; i<CO_NO_SDO_SERVER; i++){
    d23a:	2300      	movs	r3, #0
    d23c:	75fb      	strb	r3, [r7, #23]
    d23e:	7dfb      	ldrb	r3, [r7, #23]
    d240:	2b00      	cmp	r3, #0
    d242:	dc0d      	bgt.n	d260 <_ZN8CO_Class7ProcessEmPm+0x9c>
		CO_SDO_process(
    d244:	68fb      	ldr	r3, [r7, #12]
    d246:	1d18      	adds	r0, r3, #4
	
		NMTisPreOrOperational,
		timeDifference_ms,
		1000,
		timerNext_ms);
    d248:	7db9      	ldrb	r1, [r7, #22]
    d24a:	687b      	ldr	r3, [r7, #4]
    d24c:	9300      	str	r3, [sp, #0]
    d24e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    d252:	68ba      	ldr	r2, [r7, #8]
    d254:	4c20      	ldr	r4, [pc, #128]	; (d2d8 <_ZN8CO_Class7ProcessEmPm+0x114>)
    d256:	47a0      	blx	r4
	for(i=0; i<CO_NO_SDO_SERVER; i++){
    d258:	7dfb      	ldrb	r3, [r7, #23]
    d25a:	3301      	adds	r3, #1
    d25c:	75fb      	strb	r3, [r7, #23]
    d25e:	e7ee      	b.n	d23e <_ZN8CO_Class7ProcessEmPm+0x7a>
	}

	EM_process(
    d260:	68fb      	ldr	r3, [r7, #12]
    d262:	1d18      	adds	r0, r3, #4
    d264:	4b1b      	ldr	r3, [pc, #108]	; (d2d4 <_ZN8CO_Class7ProcessEmPm+0x110>)
    d266:	681b      	ldr	r3, [r3, #0]
    d268:	68d9      	ldr	r1, [r3, #12]
    d26a:	68ba      	ldr	r2, [r7, #8]
    d26c:	4613      	mov	r3, r2
    d26e:	009b      	lsls	r3, r3, #2
    d270:	4413      	add	r3, r2
    d272:	005b      	lsls	r3, r3, #1
    d274:	461c      	mov	r4, r3
	CO->emPr,
	NMTisPreOrOperational,
	timeDifference_ms * 10,
	OD_inhibitTimeEMCY);
    d276:	4b19      	ldr	r3, [pc, #100]	; (d2dc <_ZN8CO_Class7ProcessEmPm+0x118>)
    d278:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    d27a:	7dba      	ldrb	r2, [r7, #22]
    d27c:	9300      	str	r3, [sp, #0]
    d27e:	4623      	mov	r3, r4
    d280:	4c17      	ldr	r4, [pc, #92]	; (d2e0 <_ZN8CO_Class7ProcessEmPm+0x11c>)
    d282:	47a0      	blx	r4


	reset = NMT_Process(
    d284:	68fb      	ldr	r3, [r7, #12]
    d286:	f103 0010 	add.w	r0, r3, #16
	timeDifference_ms,
	OD_producerHeartbeatTime,
    d28a:	4b14      	ldr	r3, [pc, #80]	; (d2dc <_ZN8CO_Class7ProcessEmPm+0x118>)
    d28c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
	reset = NMT_Process(
    d290:	461c      	mov	r4, r3
    d292:	4b12      	ldr	r3, [pc, #72]	; (d2dc <_ZN8CO_Class7ProcessEmPm+0x118>)
    d294:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
    d298:	4b12      	ldr	r3, [pc, #72]	; (d2e4 <_ZN8CO_Class7ProcessEmPm+0x120>)
    d29a:	791b      	ldrb	r3, [r3, #4]
	OD_NMTStartup,
	OD_errorRegister,
	OD_errorBehavior,
	timerNext_ms);
    d29c:	687a      	ldr	r2, [r7, #4]
    d29e:	9202      	str	r2, [sp, #8]
    d2a0:	4a11      	ldr	r2, [pc, #68]	; (d2e8 <_ZN8CO_Class7ProcessEmPm+0x124>)
    d2a2:	9201      	str	r2, [sp, #4]
    d2a4:	9300      	str	r3, [sp, #0]
    d2a6:	460b      	mov	r3, r1
    d2a8:	4622      	mov	r2, r4
    d2aa:	68b9      	ldr	r1, [r7, #8]
    d2ac:	4c0f      	ldr	r4, [pc, #60]	; (d2ec <_ZN8CO_Class7ProcessEmPm+0x128>)
    d2ae:	47a0      	blx	r4
    d2b0:	4603      	mov	r3, r0
    d2b2:	757b      	strb	r3, [r7, #21]

	CO_HBconsumer_process(
    d2b4:	68fb      	ldr	r3, [r7, #12]
    d2b6:	f103 0014 	add.w	r0, r3, #20
    d2ba:	4b06      	ldr	r3, [pc, #24]	; (d2d4 <_ZN8CO_Class7ProcessEmPm+0x110>)
    d2bc:	681b      	ldr	r3, [r3, #0]
    d2be:	6b99      	ldr	r1, [r3, #56]	; 0x38
	CO->HBcons,
	NMTisPreOrOperational,
	timeDifference_ms);
    d2c0:	7dba      	ldrb	r2, [r7, #22]
    d2c2:	68bb      	ldr	r3, [r7, #8]
    d2c4:	4c0a      	ldr	r4, [pc, #40]	; (d2f0 <_ZN8CO_Class7ProcessEmPm+0x12c>)
    d2c6:	47a0      	blx	r4

	return reset;
    d2c8:	7d7b      	ldrb	r3, [r7, #21]
}
    d2ca:	4618      	mov	r0, r3
    d2cc:	371c      	adds	r7, #28
    d2ce:	46bd      	mov	sp, r7
    d2d0:	bd90      	pop	{r4, r7, pc}
    d2d2:	bf00      	nop
    d2d4:	20001100 	.word	0x20001100
    d2d8:	0001111d 	.word	0x0001111d
    d2dc:	20000294 	.word	0x20000294
    d2e0:	0000e245 	.word	0x0000e245
    d2e4:	20000118 	.word	0x20000118
    d2e8:	200002ed 	.word	0x200002ed
    d2ec:	0000ecf9 	.word	0x0000ecf9
    d2f0:	0000e9c9 	.word	0x0000e9c9

0000d2f4 <_ZN8CO_Class20CO_process_SYNC_RPDOEm>:


/******************************************************************************/
bool_t CO_Class::CO_process_SYNC_RPDO(uint32_t                timeDifference_us)
{
    d2f4:	b590      	push	{r4, r7, lr}
    d2f6:	b085      	sub	sp, #20
    d2f8:	af00      	add	r7, sp, #0
    d2fa:	6078      	str	r0, [r7, #4]
    d2fc:	6039      	str	r1, [r7, #0]
	uint32_t i;
	bool_t syncWas = false;
    d2fe:	2300      	movs	r3, #0
    d300:	72fb      	strb	r3, [r7, #11]

	switch(CO_SYNC_process(CO->SYNC, timeDifference_us, OD_synchronousWindowLength)){
    d302:	4b18      	ldr	r3, [pc, #96]	; (d364 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x70>)
    d304:	681b      	ldr	r3, [r3, #0]
    d306:	6959      	ldr	r1, [r3, #20]
    d308:	4b17      	ldr	r3, [pc, #92]	; (d368 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x74>)
    d30a:	691b      	ldr	r3, [r3, #16]
    d30c:	683a      	ldr	r2, [r7, #0]
    d30e:	6878      	ldr	r0, [r7, #4]
    d310:	4c16      	ldr	r4, [pc, #88]	; (d36c <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x78>)
    d312:	47a0      	blx	r4
    d314:	4603      	mov	r3, r0
    d316:	2b01      	cmp	r3, #1
    d318:	d002      	beq.n	d320 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x2c>
    d31a:	2b02      	cmp	r3, #2
    d31c:	d003      	beq.n	d326 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x32>
    d31e:	e007      	b.n	d330 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x3c>
		case 1:     //immediately after the SYNC message
		syncWas = true;
    d320:	2301      	movs	r3, #1
    d322:	72fb      	strb	r3, [r7, #11]
		break;
    d324:	e004      	b.n	d330 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x3c>
		case 2:     //outside SYNC window
		CANClearPendingSyncPDOs();
    d326:	687b      	ldr	r3, [r7, #4]
    d328:	4618      	mov	r0, r3
    d32a:	4b11      	ldr	r3, [pc, #68]	; (d370 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x7c>)
    d32c:	4798      	blx	r3
		break;
    d32e:	bf00      	nop
	}

	for(i=0; i<CO_NO_RPDO; i++){
    d330:	2300      	movs	r3, #0
    d332:	60fb      	str	r3, [r7, #12]
    d334:	68fb      	ldr	r3, [r7, #12]
    d336:	2b03      	cmp	r3, #3
    d338:	d80e      	bhi.n	d358 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x64>
		CO_RPDO_process(CO->RPDO[i], syncWas);
    d33a:	4b0a      	ldr	r3, [pc, #40]	; (d364 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x70>)
    d33c:	681b      	ldr	r3, [r3, #0]
    d33e:	68fa      	ldr	r2, [r7, #12]
    d340:	3206      	adds	r2, #6
    d342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    d346:	7afa      	ldrb	r2, [r7, #11]
    d348:	4619      	mov	r1, r3
    d34a:	6878      	ldr	r0, [r7, #4]
    d34c:	4b09      	ldr	r3, [pc, #36]	; (d374 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x80>)
    d34e:	4798      	blx	r3
	for(i=0; i<CO_NO_RPDO; i++){
    d350:	68fb      	ldr	r3, [r7, #12]
    d352:	3301      	adds	r3, #1
    d354:	60fb      	str	r3, [r7, #12]
    d356:	e7ed      	b.n	d334 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x40>
	}

	return syncWas;
    d358:	7afb      	ldrb	r3, [r7, #11]
}
    d35a:	4618      	mov	r0, r3
    d35c:	3714      	adds	r7, #20
    d35e:	46bd      	mov	sp, r7
    d360:	bd90      	pop	{r4, r7, pc}
    d362:	bf00      	nop
    d364:	20001100 	.word	0x20001100
    d368:	20000294 	.word	0x20000294
    d36c:	000128e1 	.word	0x000128e1
    d370:	0000daf1 	.word	0x0000daf1
    d374:	000101d1 	.word	0x000101d1

0000d378 <_ZN8CO_Class15CO_process_TPDOEhm>:


/******************************************************************************/
void CO_Class::CO_process_TPDO(bool_t                  syncWas,
uint32_t                timeDifference_us)
{
    d378:	b590      	push	{r4, r7, lr}
    d37a:	b089      	sub	sp, #36	; 0x24
    d37c:	af02      	add	r7, sp, #8
    d37e:	60f8      	str	r0, [r7, #12]
    d380:	460b      	mov	r3, r1
    d382:	607a      	str	r2, [r7, #4]
    d384:	72fb      	strb	r3, [r7, #11]
	uint32_t i;

	/* Verify PDO Change Of State and process PDOs */
	for(i=0; i<CO_NO_TPDO; i++){
    d386:	2300      	movs	r3, #0
    d388:	617b      	str	r3, [r7, #20]
    d38a:	697b      	ldr	r3, [r7, #20]
    d38c:	2b03      	cmp	r3, #3
    d38e:	d82e      	bhi.n	d3ee <_ZN8CO_Class15CO_process_TPDOEhm+0x76>
		if(!CO->TPDO[i]->sendRequest) CO->TPDO[i]->sendRequest = CO_TPDOisCOS(CO->TPDO[i]);
    d390:	4b19      	ldr	r3, [pc, #100]	; (d3f8 <_ZN8CO_Class15CO_process_TPDOEhm+0x80>)
    d392:	681b      	ldr	r3, [r3, #0]
    d394:	697a      	ldr	r2, [r7, #20]
    d396:	320a      	adds	r2, #10
    d398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    d39c:	7fdb      	ldrb	r3, [r3, #31]
    d39e:	2b00      	cmp	r3, #0
    d3a0:	d111      	bne.n	d3c6 <_ZN8CO_Class15CO_process_TPDOEhm+0x4e>
    d3a2:	4b15      	ldr	r3, [pc, #84]	; (d3f8 <_ZN8CO_Class15CO_process_TPDOEhm+0x80>)
    d3a4:	681b      	ldr	r3, [r3, #0]
    d3a6:	697a      	ldr	r2, [r7, #20]
    d3a8:	320a      	adds	r2, #10
    d3aa:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
    d3ae:	4b12      	ldr	r3, [pc, #72]	; (d3f8 <_ZN8CO_Class15CO_process_TPDOEhm+0x80>)
    d3b0:	681b      	ldr	r3, [r3, #0]
    d3b2:	697a      	ldr	r2, [r7, #20]
    d3b4:	320a      	adds	r2, #10
    d3b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    d3ba:	4619      	mov	r1, r3
    d3bc:	68f8      	ldr	r0, [r7, #12]
    d3be:	4b0f      	ldr	r3, [pc, #60]	; (d3fc <_ZN8CO_Class15CO_process_TPDOEhm+0x84>)
    d3c0:	4798      	blx	r3
    d3c2:	4603      	mov	r3, r0
    d3c4:	77e3      	strb	r3, [r4, #31]
		CO_TPDO_process(CO->TPDO[i], CO->SYNC, syncWas, timeDifference_us);
    d3c6:	4b0c      	ldr	r3, [pc, #48]	; (d3f8 <_ZN8CO_Class15CO_process_TPDOEhm+0x80>)
    d3c8:	681b      	ldr	r3, [r3, #0]
    d3ca:	697a      	ldr	r2, [r7, #20]
    d3cc:	320a      	adds	r2, #10
    d3ce:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    d3d2:	4b09      	ldr	r3, [pc, #36]	; (d3f8 <_ZN8CO_Class15CO_process_TPDOEhm+0x80>)
    d3d4:	681b      	ldr	r3, [r3, #0]
    d3d6:	695a      	ldr	r2, [r3, #20]
    d3d8:	7af8      	ldrb	r0, [r7, #11]
    d3da:	687b      	ldr	r3, [r7, #4]
    d3dc:	9300      	str	r3, [sp, #0]
    d3de:	4603      	mov	r3, r0
    d3e0:	68f8      	ldr	r0, [r7, #12]
    d3e2:	4c07      	ldr	r4, [pc, #28]	; (d400 <_ZN8CO_Class15CO_process_TPDOEhm+0x88>)
    d3e4:	47a0      	blx	r4
	for(i=0; i<CO_NO_TPDO; i++){
    d3e6:	697b      	ldr	r3, [r7, #20]
    d3e8:	3301      	adds	r3, #1
    d3ea:	617b      	str	r3, [r7, #20]
    d3ec:	e7cd      	b.n	d38a <_ZN8CO_Class15CO_process_TPDOEhm+0x12>
	}
}
    d3ee:	bf00      	nop
    d3f0:	371c      	adds	r7, #28
    d3f2:	46bd      	mov	sp, r7
    d3f4:	bd90      	pop	{r4, r7, pc}
    d3f6:	bf00      	nop
    d3f8:	20001100 	.word	0x20001100
    d3fc:	0000ff55 	.word	0x0000ff55
    d400:	000102a1 	.word	0x000102a1

0000d404 <hri_can_read_TXFQS_TFFL_bf>:
{
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFFL(mask)) >> CAN_TXFQS_TFFL_Pos;
}

static inline hri_can_txfqs_reg_t hri_can_read_TXFQS_TFFL_bf(const void *const hw)
{
    d404:	b480      	push	{r7}
    d406:	b083      	sub	sp, #12
    d408:	af00      	add	r7, sp, #0
    d40a:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFFL_Msk) >> CAN_TXFQS_TFFL_Pos;
    d40c:	687b      	ldr	r3, [r7, #4]
    d40e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    d412:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
    d416:	4618      	mov	r0, r3
    d418:	370c      	adds	r7, #12
    d41a:	46bd      	mov	sp, r7
    d41c:	bc80      	pop	{r7}
    d41e:	4770      	bx	lr

0000d420 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    d420:	b480      	push	{r7}
    d422:	b083      	sub	sp, #12
    d424:	af00      	add	r7, sp, #0
    d426:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    d428:	687b      	ldr	r3, [r7, #4]
    d42a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    d42c:	4618      	mov	r0, r3
    d42e:	370c      	adds	r7, #12
    d430:	46bd      	mov	sp, r7
    d432:	bc80      	pop	{r7}
    d434:	4770      	bx	lr
	...

0000d438 <_ZL14CO_rx_callbackP20can_async_descriptor>:
#include "string.h"

CO_Driver_Class		*ptrCODriverClass;

static void CO_rx_callback(struct can_async_descriptor *const descr)
{
    d438:	b580      	push	{r7, lr}
    d43a:	b082      	sub	sp, #8
    d43c:	af00      	add	r7, sp, #0
    d43e:	6078      	str	r0, [r7, #4]
	ptrCODriverClass->receivedCOMsg.data=ptrCODriverClass->co_rx_buffer_64;
    d440:	4b0e      	ldr	r3, [pc, #56]	; (d47c <_ZL14CO_rx_callbackP20can_async_descriptor+0x44>)
    d442:	681b      	ldr	r3, [r3, #0]
    d444:	4a0d      	ldr	r2, [pc, #52]	; (d47c <_ZL14CO_rx_callbackP20can_async_descriptor+0x44>)
    d446:	6812      	ldr	r2, [r2, #0]
    d448:	3223      	adds	r2, #35	; 0x23
    d44a:	66da      	str	r2, [r3, #108]	; 0x6c
	can_async_read(descr, &(ptrCODriverClass->receivedCOMsg));
    d44c:	4b0b      	ldr	r3, [pc, #44]	; (d47c <_ZL14CO_rx_callbackP20can_async_descriptor+0x44>)
    d44e:	681b      	ldr	r3, [r3, #0]
    d450:	3364      	adds	r3, #100	; 0x64
    d452:	4619      	mov	r1, r3
    d454:	6878      	ldr	r0, [r7, #4]
    d456:	4b0a      	ldr	r3, [pc, #40]	; (d480 <_ZL14CO_rx_callbackP20can_async_descriptor+0x48>)
    d458:	4798      	blx	r3
	ptrCODriverClass->ProcessInterrupt_Rx();
    d45a:	4b08      	ldr	r3, [pc, #32]	; (d47c <_ZL14CO_rx_callbackP20can_async_descriptor+0x44>)
    d45c:	681b      	ldr	r3, [r3, #0]
    d45e:	681b      	ldr	r3, [r3, #0]
    d460:	681b      	ldr	r3, [r3, #0]
    d462:	4a06      	ldr	r2, [pc, #24]	; (d47c <_ZL14CO_rx_callbackP20can_async_descriptor+0x44>)
    d464:	6812      	ldr	r2, [r2, #0]
    d466:	4610      	mov	r0, r2
    d468:	4798      	blx	r3
	ptrCODriverClass->receivedRxCOCallback=true;
    d46a:	4b04      	ldr	r3, [pc, #16]	; (d47c <_ZL14CO_rx_callbackP20can_async_descriptor+0x44>)
    d46c:	681b      	ldr	r3, [r3, #0]
    d46e:	2201      	movs	r2, #1
    d470:	f883 2020 	strb.w	r2, [r3, #32]
// 	if(ptrCODriver->RxFifo_Callback_CanModule_p != NULL)
// 	{
// 		ProcessInterrupt_Rx();
// 	
}
    d474:	bf00      	nop
    d476:	3708      	adds	r7, #8
    d478:	46bd      	mov	sp, r7
    d47a:	bd80      	pop	{r7, pc}
    d47c:	200019b4 	.word	0x200019b4
    d480:	0000177d 	.word	0x0000177d

0000d484 <_ZL21CO_IRQ_Error_CallbackP20can_async_descriptor>:

static void CO_IRQ_Error_Callback(struct can_async_descriptor *const descr)
{
    d484:	b590      	push	{r4, r7, lr}
    d486:	b083      	sub	sp, #12
    d488:	af00      	add	r7, sp, #0
    d48a:	6078      	str	r0, [r7, #4]

	ptrCODriverClass->HalCanErrorCode= hri_can_read_IR_reg(descr->dev.hw);
    d48c:	4b08      	ldr	r3, [pc, #32]	; (d4b0 <_ZL21CO_IRQ_Error_CallbackP20can_async_descriptor+0x2c>)
    d48e:	681c      	ldr	r4, [r3, #0]
    d490:	687b      	ldr	r3, [r7, #4]
    d492:	681b      	ldr	r3, [r3, #0]
    d494:	4618      	mov	r0, r3
    d496:	4b07      	ldr	r3, [pc, #28]	; (d4b4 <_ZL21CO_IRQ_Error_CallbackP20can_async_descriptor+0x30>)
    d498:	4798      	blx	r3
    d49a:	4603      	mov	r3, r0
    d49c:	61e3      	str	r3, [r4, #28]
	ptrCODriverClass->receivedIntCOCallback=true;
    d49e:	4b04      	ldr	r3, [pc, #16]	; (d4b0 <_ZL21CO_IRQ_Error_CallbackP20can_async_descriptor+0x2c>)
    d4a0:	681b      	ldr	r3, [r3, #0]
    d4a2:	2201      	movs	r2, #1
    d4a4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
    d4a8:	bf00      	nop
    d4aa:	370c      	adds	r7, #12
    d4ac:	46bd      	mov	sp, r7
    d4ae:	bd90      	pop	{r4, r7, pc}
    d4b0:	200019b4 	.word	0x200019b4
    d4b4:	0000d421 	.word	0x0000d421

0000d4b8 <_ZL14CO_tx_callbackP20can_async_descriptor>:


static void CO_tx_callback(struct can_async_descriptor *const descr)
{
    d4b8:	b480      	push	{r7}
    d4ba:	b083      	sub	sp, #12
    d4bc:	af00      	add	r7, sp, #0
    d4be:	6078      	str	r0, [r7, #4]
	(void)descr;
	ptrCODriverClass->receivedtxCOCallback=true;
    d4c0:	4b04      	ldr	r3, [pc, #16]	; (d4d4 <_ZL14CO_tx_callbackP20can_async_descriptor+0x1c>)
    d4c2:	681b      	ldr	r3, [r3, #0]
    d4c4:	2201      	movs	r2, #1
    d4c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	
}
    d4ca:	bf00      	nop
    d4cc:	370c      	adds	r7, #12
    d4ce:	46bd      	mov	sp, r7
    d4d0:	bc80      	pop	{r7}
    d4d2:	4770      	bx	lr
    d4d4:	200019b4 	.word	0x200019b4

0000d4d8 <_ZN15CO_Driver_ClassC1Ev>:

// default constructor
CO_Driver_Class::CO_Driver_Class()
    d4d8:	b580      	push	{r7, lr}
    d4da:	b082      	sub	sp, #8
    d4dc:	af00      	add	r7, sp, #0
    d4de:	6078      	str	r0, [r7, #4]
    d4e0:	687b      	ldr	r3, [r7, #4]
    d4e2:	3304      	adds	r3, #4
    d4e4:	4618      	mov	r0, r3
    d4e6:	4b10      	ldr	r3, [pc, #64]	; (d528 <_ZN15CO_Driver_ClassC1Ev+0x50>)
    d4e8:	4798      	blx	r3
    d4ea:	687b      	ldr	r3, [r7, #4]
    d4ec:	3310      	adds	r3, #16
    d4ee:	4618      	mov	r0, r3
    d4f0:	4b0e      	ldr	r3, [pc, #56]	; (d52c <_ZN15CO_Driver_ClassC1Ev+0x54>)
    d4f2:	4798      	blx	r3
    d4f4:	6878      	ldr	r0, [r7, #4]
    d4f6:	4b0e      	ldr	r3, [pc, #56]	; (d530 <_ZN15CO_Driver_ClassC1Ev+0x58>)
    d4f8:	4798      	blx	r3
    d4fa:	6878      	ldr	r0, [r7, #4]
    d4fc:	4b0d      	ldr	r3, [pc, #52]	; (d534 <_ZN15CO_Driver_ClassC1Ev+0x5c>)
    d4fe:	4798      	blx	r3
    d500:	687b      	ldr	r3, [r7, #4]
    d502:	3314      	adds	r3, #20
    d504:	4618      	mov	r0, r3
    d506:	4b0c      	ldr	r3, [pc, #48]	; (d538 <_ZN15CO_Driver_ClassC1Ev+0x60>)
    d508:	4798      	blx	r3
    d50a:	4a0c      	ldr	r2, [pc, #48]	; (d53c <_ZN15CO_Driver_ClassC1Ev+0x64>)
    d50c:	687b      	ldr	r3, [r7, #4]
    d50e:	601a      	str	r2, [r3, #0]
{
	RxFifo_Callback_CanModule_p = NULL;
    d510:	687b      	ldr	r3, [r7, #4]
    d512:	2200      	movs	r2, #0
    d514:	675a      	str	r2, [r3, #116]	; 0x74
	ptrCODriverClass=this;
    d516:	4a0a      	ldr	r2, [pc, #40]	; (d540 <_ZN15CO_Driver_ClassC1Ev+0x68>)
    d518:	687b      	ldr	r3, [r7, #4]
    d51a:	6013      	str	r3, [r2, #0]
} //CO_Driver_Class
    d51c:	687b      	ldr	r3, [r7, #4]
    d51e:	4618      	mov	r0, r3
    d520:	3708      	adds	r7, #8
    d522:	46bd      	mov	sp, r7
    d524:	bd80      	pop	{r7, pc}
    d526:	bf00      	nop
    d528:	0000dfc9 	.word	0x0000dfc9
    d52c:	0000ebc3 	.word	0x0000ebc3
    d530:	00012475 	.word	0x00012475
    d534:	0000f175 	.word	0x0000f175
    d538:	0000e8dd 	.word	0x0000e8dd
    d53c:	0001328c 	.word	0x0001328c
    d540:	200019b4 	.word	0x200019b4

0000d544 <_ZN15CO_Driver_ClassD1Ev>:

// default destructor
CO_Driver_Class::~CO_Driver_Class()
    d544:	b580      	push	{r7, lr}
    d546:	b082      	sub	sp, #8
    d548:	af00      	add	r7, sp, #0
    d54a:	6078      	str	r0, [r7, #4]
    d54c:	4a0e      	ldr	r2, [pc, #56]	; (d588 <_ZN15CO_Driver_ClassD1Ev+0x44>)
    d54e:	687b      	ldr	r3, [r7, #4]
    d550:	601a      	str	r2, [r3, #0]
    d552:	687b      	ldr	r3, [r7, #4]
    d554:	3314      	adds	r3, #20
    d556:	4618      	mov	r0, r3
    d558:	4b0c      	ldr	r3, [pc, #48]	; (d58c <_ZN15CO_Driver_ClassD1Ev+0x48>)
    d55a:	4798      	blx	r3
    d55c:	6878      	ldr	r0, [r7, #4]
    d55e:	4b0c      	ldr	r3, [pc, #48]	; (d590 <_ZN15CO_Driver_ClassD1Ev+0x4c>)
    d560:	4798      	blx	r3
    d562:	6878      	ldr	r0, [r7, #4]
    d564:	4b0b      	ldr	r3, [pc, #44]	; (d594 <_ZN15CO_Driver_ClassD1Ev+0x50>)
    d566:	4798      	blx	r3
    d568:	687b      	ldr	r3, [r7, #4]
    d56a:	3310      	adds	r3, #16
    d56c:	4618      	mov	r0, r3
    d56e:	4b0a      	ldr	r3, [pc, #40]	; (d598 <_ZN15CO_Driver_ClassD1Ev+0x54>)
    d570:	4798      	blx	r3
    d572:	687b      	ldr	r3, [r7, #4]
    d574:	3304      	adds	r3, #4
    d576:	4618      	mov	r0, r3
    d578:	4b08      	ldr	r3, [pc, #32]	; (d59c <_ZN15CO_Driver_ClassD1Ev+0x58>)
    d57a:	4798      	blx	r3
{
} //~CO_Driver_Class
    d57c:	687b      	ldr	r3, [r7, #4]
    d57e:	4618      	mov	r0, r3
    d580:	3708      	adds	r7, #8
    d582:	46bd      	mov	sp, r7
    d584:	bd80      	pop	{r7, pc}
    d586:	bf00      	nop
    d588:	0001328c 	.word	0x0001328c
    d58c:	0000e8f1 	.word	0x0000e8f1
    d590:	0000f189 	.word	0x0000f189
    d594:	00012489 	.word	0x00012489
    d598:	0000ebd7 	.word	0x0000ebd7
    d59c:	0000dff1 	.word	0x0000dff1

0000d5a0 <_ZN15CO_Driver_Class16PrepareTxMessageEP11can_messageP10CO_CANtx_t>:
 * \param [in]	buffer ponyer to CO_CANtx_t with CANopen configuration data
 *
 * \ingroup CO_driver
 ******************************************************************************/
void CO_Driver_Class::PrepareTxMessage(struct can_message *msgHeader, CO_CANtx_t *buffer)
{
    d5a0:	b480      	push	{r7}
    d5a2:	b085      	sub	sp, #20
    d5a4:	af00      	add	r7, sp, #0
    d5a6:	60f8      	str	r0, [r7, #12]
    d5a8:	60b9      	str	r1, [r7, #8]
    d5aa:	607a      	str	r2, [r7, #4]
	/* Map buffer data to the HAL CAN tx header data*/
	//TxHeader->ExtId = 0u;
	msgHeader->id=0;
    d5ac:	68bb      	ldr	r3, [r7, #8]
    d5ae:	2200      	movs	r2, #0
    d5b0:	601a      	str	r2, [r3, #0]
	//TxHeader->IDE = 0;
	msgHeader->fmt=CAN_FMT_STDID;
    d5b2:	68bb      	ldr	r3, [r7, #8]
    d5b4:	2200      	movs	r2, #0
    d5b6:	735a      	strb	r2, [r3, #13]
	
	//TxHeader->DLC = buffer->DLC;
	msgHeader->len=buffer->DLC;
    d5b8:	687b      	ldr	r3, [r7, #4]
    d5ba:	791a      	ldrb	r2, [r3, #4]
    d5bc:	68bb      	ldr	r3, [r7, #8]
    d5be:	731a      	strb	r2, [r3, #12]
	
	//TxHeader->StdId = ( buffer->ident >> 2 );
	msgHeader->id=( buffer->ident >> 2 );
    d5c0:	687b      	ldr	r3, [r7, #4]
    d5c2:	681b      	ldr	r3, [r3, #0]
    d5c4:	089a      	lsrs	r2, r3, #2
    d5c6:	68bb      	ldr	r3, [r7, #8]
    d5c8:	601a      	str	r2, [r3, #0]
	
	//TxHeader->RTR = ( buffer->ident & 0x2 );
	msgHeader->type=(can_type)( buffer->ident & 0x2 );
    d5ca:	687b      	ldr	r3, [r7, #4]
    d5cc:	681b      	ldr	r3, [r3, #0]
    d5ce:	b2db      	uxtb	r3, r3
    d5d0:	f003 0302 	and.w	r3, r3, #2
    d5d4:	b2da      	uxtb	r2, r3
    d5d6:	68bb      	ldr	r3, [r7, #8]
    d5d8:	711a      	strb	r2, [r3, #4]
	msgHeader->data=buffer->data;
    d5da:	687b      	ldr	r3, [r7, #4]
    d5dc:	1d5a      	adds	r2, r3, #5
    d5de:	68bb      	ldr	r3, [r7, #8]
    d5e0:	609a      	str	r2, [r3, #8]
}
    d5e2:	bf00      	nop
    d5e4:	3714      	adds	r7, #20
    d5e6:	46bd      	mov	sp, r7
    d5e8:	bc80      	pop	{r7}
    d5ea:	4770      	bx	lr

0000d5ec <_ZN15CO_Driver_Class21ConvertCANMsg2CORxMsgER11can_messageP13CO_CANrxMsg_t>:

void CO_Driver_Class::ConvertCANMsg2CORxMsg(can_message& msgHeader, CO_CANrxMsg_t *rxMsg)
{
    d5ec:	b590      	push	{r4, r7, lr}
    d5ee:	b085      	sub	sp, #20
    d5f0:	af00      	add	r7, sp, #0
    d5f2:	60f8      	str	r0, [r7, #12]
    d5f4:	60b9      	str	r1, [r7, #8]
    d5f6:	607a      	str	r2, [r7, #4]
	rxMsg->RxHeader=msgHeader;
    d5f8:	687a      	ldr	r2, [r7, #4]
    d5fa:	68bb      	ldr	r3, [r7, #8]
    d5fc:	4614      	mov	r4, r2
    d5fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    d600:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	rxMsg->DLC=msgHeader.len;
    d604:	68bb      	ldr	r3, [r7, #8]
    d606:	7b1a      	ldrb	r2, [r3, #12]
    d608:	687b      	ldr	r3, [r7, #4]
    d60a:	751a      	strb	r2, [r3, #20]
	rxMsg->ident=msgHeader.id;
    d60c:	68bb      	ldr	r3, [r7, #8]
    d60e:	681a      	ldr	r2, [r3, #0]
    d610:	687b      	ldr	r3, [r7, #4]
    d612:	611a      	str	r2, [r3, #16]
	memcpy(&rxMsg->data[0],msgHeader.data,msgHeader.len);
    d614:	687b      	ldr	r3, [r7, #4]
    d616:	f103 0015 	add.w	r0, r3, #21
    d61a:	68bb      	ldr	r3, [r7, #8]
    d61c:	6899      	ldr	r1, [r3, #8]
    d61e:	68bb      	ldr	r3, [r7, #8]
    d620:	7b1b      	ldrb	r3, [r3, #12]
    d622:	461a      	mov	r2, r3
    d624:	4b02      	ldr	r3, [pc, #8]	; (d630 <_ZN15CO_Driver_Class21ConvertCANMsg2CORxMsgER11can_messageP13CO_CANrxMsg_t+0x44>)
    d626:	4798      	blx	r3

	/* Map buffer data to the HAL CAN tx header data*/
	//TxHeader->ExtId = 0u;

}
    d628:	bf00      	nop
    d62a:	3714      	adds	r7, #20
    d62c:	46bd      	mov	sp, r7
    d62e:	bd90      	pop	{r4, r7, pc}
    d630:	00012b75 	.word	0x00012b75

0000d634 <_ZN15CO_Driver_Class26CO_CANsetConfigurationModeEP20can_async_descriptor>:
	{
		;//TODO add assert here
	}
}

void CO_Driver_Class::CO_CANsetConfigurationMode(can_async_descriptor *descr){
    d634:	b480      	push	{r7}
    d636:	b083      	sub	sp, #12
    d638:	af00      	add	r7, sp, #0
    d63a:	6078      	str	r0, [r7, #4]
    d63c:	6039      	str	r1, [r7, #0]
	
	canDescr=descr;
    d63e:	687b      	ldr	r3, [r7, #4]
    d640:	683a      	ldr	r2, [r7, #0]
    d642:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	/* Put CAN module in configuration mode */
	/* HAL is responsible for that */
}
    d646:	bf00      	nop
    d648:	370c      	adds	r7, #12
    d64a:	46bd      	mov	sp, r7
    d64c:	bc80      	pop	{r7}
    d64e:	4770      	bx	lr

0000d650 <_ZN15CO_Driver_Class19CO_CANsetNormalModeEv>:

/******************************************************************************/
CO_ReturnError_t CO_Driver_Class::CO_CANsetNormalMode(void){
    d650:	b580      	push	{r7, lr}
    d652:	b084      	sub	sp, #16
    d654:	af00      	add	r7, sp, #0
    d656:	6078      	str	r0, [r7, #4]
	/* Put CAN module in normal mode */
	int32_t		error_CAN_hal;
	Error = CO_ERROR_NO;
    d658:	687b      	ldr	r3, [r7, #4]
    d65a:	2200      	movs	r2, #0
    d65c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	error_CAN_hal=can_async_enable(CAN_Module->CANBaseDescriptor);
    d660:	687b      	ldr	r3, [r7, #4]
    d662:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    d666:	681b      	ldr	r3, [r3, #0]
    d668:	4618      	mov	r0, r3
    d66a:	4b0a      	ldr	r3, [pc, #40]	; (d694 <_ZN15CO_Driver_Class19CO_CANsetNormalModeEv+0x44>)
    d66c:	4798      	blx	r3
    d66e:	60f8      	str	r0, [r7, #12]
	//    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
	//    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
	//    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 1, 0);
	//    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);

	if (error_CAN_hal != CO_ERROR_NO)
    d670:	68fb      	ldr	r3, [r7, #12]
    d672:	2b00      	cmp	r3, #0
    d674:	d002      	beq.n	d67c <_ZN15CO_Driver_Class19CO_CANsetNormalModeEv+0x2c>
	{
		//_Error_Handler(__FILE__, __LINE__);
		return CO_ERROR_HAL;
    d676:	f06f 030e 	mvn.w	r3, #14
    d67a:	e007      	b.n	d68c <_ZN15CO_Driver_Class19CO_CANsetNormalModeEv+0x3c>
	}
	CAN_Module->CANnormal = true;
    d67c:	687b      	ldr	r3, [r7, #4]
    d67e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    d682:	2201      	movs	r2, #1
    d684:	751a      	strb	r2, [r3, #20]
	return Error;
    d686:	687b      	ldr	r3, [r7, #4]
    d688:	f993 309c 	ldrsb.w	r3, [r3, #156]	; 0x9c
}
    d68c:	4618      	mov	r0, r3
    d68e:	3710      	adds	r7, #16
    d690:	46bd      	mov	sp, r7
    d692:	bd80      	pop	{r7, pc}
    d694:	00001741 	.word	0x00001741

0000d698 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm>:
		CO_CANrx_t              rxArray[],
		uint32_t                rxSize,
		CO_CANtx_t              txArray[],
		uint32_t                txSize,
		uint32_t                CANbitRate)
{
    d698:	b580      	push	{r7, lr}
    d69a:	b086      	sub	sp, #24
    d69c:	af00      	add	r7, sp, #0
    d69e:	60f8      	str	r0, [r7, #12]
    d6a0:	60b9      	str	r1, [r7, #8]
    d6a2:	607a      	str	r2, [r7, #4]
    d6a4:	603b      	str	r3, [r7, #0]
	canDescr=HALCanObject;
    d6a6:	68fb      	ldr	r3, [r7, #12]
    d6a8:	687a      	ldr	r2, [r7, #4]
    d6aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	
	int32_t		error_CAN_hal;

	/* verify arguments */
	if(CANmodule==NULL || rxArray==NULL || txArray==NULL)
    d6ae:	68bb      	ldr	r3, [r7, #8]
    d6b0:	2b00      	cmp	r3, #0
    d6b2:	d005      	beq.n	d6c0 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x28>
    d6b4:	683b      	ldr	r3, [r7, #0]
    d6b6:	2b00      	cmp	r3, #0
    d6b8:	d002      	beq.n	d6c0 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x28>
    d6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d6bc:	2b00      	cmp	r3, #0
    d6be:	d102      	bne.n	d6c6 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x2e>
	{
		return CO_ERROR_ILLEGAL_ARGUMENT;
    d6c0:	f04f 33ff 	mov.w	r3, #4294967295
    d6c4:	e084      	b.n	d7d0 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x138>
	else
	{
		;//do nothing
	}

	RxFifo_Callback_CanModule_p = CANmodule;
    d6c6:	68fb      	ldr	r3, [r7, #12]
    d6c8:	68ba      	ldr	r2, [r7, #8]
    d6ca:	675a      	str	r2, [r3, #116]	; 0x74

	/* Configure object variables */
	CANmodule->CANBaseDescriptor = (can_async_descriptor*)HALCanObject;
    d6cc:	68bb      	ldr	r3, [r7, #8]
    d6ce:	687a      	ldr	r2, [r7, #4]
    d6d0:	601a      	str	r2, [r3, #0]
	CANmodule->rxArray = rxArray;
    d6d2:	68bb      	ldr	r3, [r7, #8]
    d6d4:	683a      	ldr	r2, [r7, #0]
    d6d6:	605a      	str	r2, [r3, #4]
	CANmodule->rxSize = rxSize;
    d6d8:	68bb      	ldr	r3, [r7, #8]
    d6da:	6a3a      	ldr	r2, [r7, #32]
    d6dc:	609a      	str	r2, [r3, #8]
	CANmodule->txArray = txArray;
    d6de:	68bb      	ldr	r3, [r7, #8]
    d6e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    d6e2:	60da      	str	r2, [r3, #12]
	CANmodule->txSize = txSize;
    d6e4:	68bb      	ldr	r3, [r7, #8]
    d6e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d6e8:	611a      	str	r2, [r3, #16]
	CANmodule->CANnormal = false;
    d6ea:	68bb      	ldr	r3, [r7, #8]
    d6ec:	2200      	movs	r2, #0
    d6ee:	751a      	strb	r2, [r3, #20]
	CANmodule->useCANrxFilters = false;
    d6f0:	68bb      	ldr	r3, [r7, #8]
    d6f2:	2200      	movs	r2, #0
    d6f4:	755a      	strb	r2, [r3, #21]
	CANmodule->bufferInhibitFlag = false;
    d6f6:	68bb      	ldr	r3, [r7, #8]
    d6f8:	2200      	movs	r2, #0
    d6fa:	759a      	strb	r2, [r3, #22]
	CANmodule->firstCANtxMessage = true;
    d6fc:	68bb      	ldr	r3, [r7, #8]
    d6fe:	2201      	movs	r2, #1
    d700:	75da      	strb	r2, [r3, #23]
	CANmodule->CANtxCount = 0U;
    d702:	68bb      	ldr	r3, [r7, #8]
    d704:	2200      	movs	r2, #0
    d706:	619a      	str	r2, [r3, #24]
	CANmodule->errOld = 0U;
    d708:	68bb      	ldr	r3, [r7, #8]
    d70a:	2200      	movs	r2, #0
    d70c:	61da      	str	r2, [r3, #28]
	CANmodule->em = NULL;
    d70e:	68bb      	ldr	r3, [r7, #8]
    d710:	2200      	movs	r2, #0
    d712:	621a      	str	r2, [r3, #32]

	for(i=0U; i<rxSize; i++)
    d714:	68fb      	ldr	r3, [r7, #12]
    d716:	2200      	movs	r2, #0
    d718:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    d71c:	68fb      	ldr	r3, [r7, #12]
    d71e:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    d722:	6a3b      	ldr	r3, [r7, #32]
    d724:	429a      	cmp	r2, r3
    d726:	d217      	bcs.n	d758 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0xc0>
	{
		rxArray[i].ident = 0U;
    d728:	68fb      	ldr	r3, [r7, #12]
    d72a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    d72e:	011b      	lsls	r3, r3, #4
    d730:	683a      	ldr	r2, [r7, #0]
    d732:	4413      	add	r3, r2
    d734:	2200      	movs	r2, #0
    d736:	601a      	str	r2, [r3, #0]
		rxArray[i].pFunct = NULL;
    d738:	68fb      	ldr	r3, [r7, #12]
    d73a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    d73e:	011b      	lsls	r3, r3, #4
    d740:	683a      	ldr	r2, [r7, #0]
    d742:	4413      	add	r3, r2
    d744:	2200      	movs	r2, #0
    d746:	60da      	str	r2, [r3, #12]
	for(i=0U; i<rxSize; i++)
    d748:	68fb      	ldr	r3, [r7, #12]
    d74a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    d74e:	1c5a      	adds	r2, r3, #1
    d750:	68fb      	ldr	r3, [r7, #12]
    d752:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    d756:	e7e1      	b.n	d71c <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x84>
	}

	for(i=0U; i<txSize; i++)
    d758:	68fb      	ldr	r3, [r7, #12]
    d75a:	2200      	movs	r2, #0
    d75c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    d760:	68fb      	ldr	r3, [r7, #12]
    d762:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    d766:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d768:	429a      	cmp	r2, r3
    d76a:	d20f      	bcs.n	d78c <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0xf4>
	{
		txArray[i].bufferFull = false;
    d76c:	68fb      	ldr	r3, [r7, #12]
    d76e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    d772:	011b      	lsls	r3, r3, #4
    d774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    d776:	4413      	add	r3, r2
    d778:	2200      	movs	r2, #0
    d77a:	735a      	strb	r2, [r3, #13]
	for(i=0U; i<txSize; i++)
    d77c:	68fb      	ldr	r3, [r7, #12]
    d77e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    d782:	1c5a      	adds	r2, r3, #1
    d784:	68fb      	ldr	r3, [r7, #12]
    d786:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    d78a:	e7e9      	b.n	d760 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0xc8>
	}


	CANmodule_Disable();
    d78c:	68f8      	ldr	r0, [r7, #12]
    d78e:	4b12      	ldr	r3, [pc, #72]	; (d7d8 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x140>)
    d790:	4798      	blx	r3
	
	can_async_register_callback(canDescr, CAN_ASYNC_RX_CB, (FUNC_PTR)CO_rx_callback);
    d792:	68fb      	ldr	r3, [r7, #12]
    d794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    d798:	4a10      	ldr	r2, [pc, #64]	; (d7dc <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x144>)
    d79a:	2100      	movs	r1, #0
    d79c:	4618      	mov	r0, r3
    d79e:	4b10      	ldr	r3, [pc, #64]	; (d7e0 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x148>)
    d7a0:	4798      	blx	r3
	can_async_register_callback(canDescr, CAN_ASYNC_IRQ_CB, (FUNC_PTR)CO_IRQ_Error_Callback);
    d7a2:	68fb      	ldr	r3, [r7, #12]
    d7a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    d7a8:	4a0e      	ldr	r2, [pc, #56]	; (d7e4 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x14c>)
    d7aa:	2102      	movs	r1, #2
    d7ac:	4618      	mov	r0, r3
    d7ae:	4b0c      	ldr	r3, [pc, #48]	; (d7e0 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x148>)
    d7b0:	4798      	blx	r3
	error_CAN_hal=can_async_enable(HALCanObject);
    d7b2:	6878      	ldr	r0, [r7, #4]
    d7b4:	4b0c      	ldr	r3, [pc, #48]	; (d7e8 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x150>)
    d7b6:	4798      	blx	r3
    d7b8:	6178      	str	r0, [r7, #20]
	if (error_CAN_hal != CO_ERROR_NO)
    d7ba:	697b      	ldr	r3, [r7, #20]
    d7bc:	2b00      	cmp	r3, #0
    d7be:	d002      	beq.n	d7c6 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x12e>
	{
		//_Error_Handler(__FILE__, __LINE__);
		return CO_ERROR_HAL;
    d7c0:	f06f 030e 	mvn.w	r3, #14
    d7c4:	e004      	b.n	d7d0 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x138>
	}
	CAN_Module=CANmodule;
    d7c6:	68fb      	ldr	r3, [r7, #12]
    d7c8:	68ba      	ldr	r2, [r7, #8]
    d7ca:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	return CO_ERROR_NO;
    d7ce:	2300      	movs	r3, #0
}
    d7d0:	4618      	mov	r0, r3
    d7d2:	3718      	adds	r7, #24
    d7d4:	46bd      	mov	sp, r7
    d7d6:	bd80      	pop	{r7, pc}
    d7d8:	0000d7ed 	.word	0x0000d7ed
    d7dc:	0000d439 	.word	0x0000d439
    d7e0:	00001815 	.word	0x00001815
    d7e4:	0000d485 	.word	0x0000d485
    d7e8:	00001741 	.word	0x00001741

0000d7ec <_ZN15CO_Driver_Class17CANmodule_DisableEv>:


/******************************************************************************/
void CO_Driver_Class::CANmodule_Disable(void){
    d7ec:	b480      	push	{r7}
    d7ee:	b083      	sub	sp, #12
    d7f0:	af00      	add	r7, sp, #0
    d7f2:	6078      	str	r0, [r7, #4]
	HAL_CAN_Stop(CANmodule->CANbaseAddress);
	*/
	//can_async_register_callback(canDescr, CAN_ASYNC_RX_CB, (FUNC_PTR)CO_rx_callback);
	//can_async_register_callback(canDescr, CAN_ASYNC_IRQ_CB, (FUNC_PTR)CO_IRQ_Error_Callback);
	//can_async_disable(CAN_Module->CANBaseDescriptor);
}
    d7f4:	bf00      	nop
    d7f6:	370c      	adds	r7, #12
    d7f8:	46bd      	mov	sp, r7
    d7fa:	bc80      	pop	{r7}
    d7fc:	4770      	bx	lr
	...

0000d800 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE>:
		uint32_t                ident,
		uint32_t                mask,
		bool_t                  rtr,
		void                   *object,
		void                  (*pFunct)(void *object, const CO_CANrxMsg_t *message))
{
    d800:	b590      	push	{r4, r7, lr}
    d802:	b087      	sub	sp, #28
    d804:	af00      	add	r7, sp, #0
    d806:	60f8      	str	r0, [r7, #12]
    d808:	60b9      	str	r1, [r7, #8]
    d80a:	607a      	str	r2, [r7, #4]
    d80c:	603b      	str	r3, [r7, #0]
	ret = CO_ERROR_NO;
    d80e:	68fb      	ldr	r3, [r7, #12]
    d810:	2200      	movs	r2, #0
    d812:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d

	if((CAN_Module!=NULL) && (object!=NULL) && (pFunct!=NULL) && (index < CAN_Module->rxSize)){
    d816:	68fb      	ldr	r3, [r7, #12]
    d818:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    d81c:	2b00      	cmp	r3, #0
    d81e:	d060      	beq.n	d8e2 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xe2>
    d820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d822:	2b00      	cmp	r3, #0
    d824:	d05d      	beq.n	d8e2 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xe2>
    d826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    d828:	2b00      	cmp	r3, #0
    d82a:	d05a      	beq.n	d8e2 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xe2>
    d82c:	68fb      	ldr	r3, [r7, #12]
    d82e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    d832:	689a      	ldr	r2, [r3, #8]
    d834:	68bb      	ldr	r3, [r7, #8]
    d836:	429a      	cmp	r2, r3
    d838:	d953      	bls.n	d8e2 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xe2>
		/* buffer, which will be configured */
		CO_CANrx_t *buffer = &CAN_Module->rxArray[index];
    d83a:	68fb      	ldr	r3, [r7, #12]
    d83c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    d840:	685a      	ldr	r2, [r3, #4]
    d842:	68bb      	ldr	r3, [r7, #8]
    d844:	011b      	lsls	r3, r3, #4
    d846:	4413      	add	r3, r2
    d848:	617b      	str	r3, [r7, #20]

		/* Configure object variables */
		buffer->object = object;
    d84a:	697b      	ldr	r3, [r7, #20]
    d84c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    d84e:	609a      	str	r2, [r3, #8]
		buffer->pFunct = pFunct;
    d850:	697b      	ldr	r3, [r7, #20]
    d852:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    d854:	60da      	str	r2, [r3, #12]

		/* CAN identifier and CAN mask, bit aligned with CAN module. Different on different microcontrollers. */
		buffer->ident = (ident & 0x07FF) << 2;
    d856:	687b      	ldr	r3, [r7, #4]
    d858:	009a      	lsls	r2, r3, #2
    d85a:	f641 73fc 	movw	r3, #8188	; 0x1ffc
    d85e:	4013      	ands	r3, r2
    d860:	697a      	ldr	r2, [r7, #20]
    d862:	6013      	str	r3, [r2, #0]
		if (rtr)
    d864:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    d868:	2b00      	cmp	r3, #0
    d86a:	d005      	beq.n	d878 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0x78>
		{
			buffer->ident |= 0x02;
    d86c:	697b      	ldr	r3, [r7, #20]
    d86e:	681b      	ldr	r3, [r3, #0]
    d870:	f043 0202 	orr.w	r2, r3, #2
    d874:	697b      	ldr	r3, [r7, #20]
    d876:	601a      	str	r2, [r3, #0]
		}
		buffer->mask = (mask & 0x07FF) << 2;
    d878:	683b      	ldr	r3, [r7, #0]
    d87a:	009a      	lsls	r2, r3, #2
    d87c:	f641 73fc 	movw	r3, #8188	; 0x1ffc
    d880:	4013      	ands	r3, r2
    d882:	697a      	ldr	r2, [r7, #20]
    d884:	6053      	str	r3, [r2, #4]
		buffer->mask |= 0x02;
    d886:	697b      	ldr	r3, [r7, #20]
    d888:	685b      	ldr	r3, [r3, #4]
    d88a:	f043 0202 	orr.w	r2, r3, #2
    d88e:	697b      	ldr	r3, [r7, #20]
    d890:	605a      	str	r2, [r3, #4]

		/* Set CAN hardware module filter and mask. */
		if(CAN_Module->useCANrxFilters)
    d892:	68fb      	ldr	r3, [r7, #12]
    d894:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    d898:	7d5b      	ldrb	r3, [r3, #21]
    d89a:	b2db      	uxtb	r3, r3
    d89c:	2b00      	cmp	r3, #0
    d89e:	bf14      	ite	ne
    d8a0:	2301      	movne	r3, #1
    d8a2:	2300      	moveq	r3, #0
    d8a4:	b2db      	uxtb	r3, r3
    d8a6:	2b00      	cmp	r3, #0
    d8a8:	d120      	bne.n	d8ec <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xec>
		else
		{
			/*no hardware filters*/
			//CAN_FilterTypeDef FilterConfig;
		
			CO_Filter.id   = buffer->ident;
    d8aa:	697b      	ldr	r3, [r7, #20]
    d8ac:	681a      	ldr	r2, [r3, #0]
    d8ae:	68fb      	ldr	r3, [r7, #12]
    d8b0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
			CO_Filter.mask = buffer->mask;
    d8b4:	697b      	ldr	r3, [r7, #20]
    d8b6:	685a      	ldr	r2, [r3, #4]
    d8b8:	68fb      	ldr	r3, [r7, #12]
    d8ba:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
			ret= (CO_ReturnError_t)can_async_set_filter(CAN_Module->CANBaseDescriptor,(uint8_t)index, CAN_FMT_STDID, &CO_Filter);
    d8be:	68fb      	ldr	r3, [r7, #12]
    d8c0:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    d8c4:	6818      	ldr	r0, [r3, #0]
    d8c6:	68bb      	ldr	r3, [r7, #8]
    d8c8:	b2d9      	uxtb	r1, r3
    d8ca:	68fb      	ldr	r3, [r7, #12]
    d8cc:	f503 7390 	add.w	r3, r3, #288	; 0x120
    d8d0:	2200      	movs	r2, #0
    d8d2:	4c0a      	ldr	r4, [pc, #40]	; (d8fc <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xfc>)
    d8d4:	47a0      	blx	r4
    d8d6:	4603      	mov	r3, r0
    d8d8:	b25a      	sxtb	r2, r3
    d8da:	68fb      	ldr	r3, [r7, #12]
    d8dc:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
		}
    d8e0:	e004      	b.n	d8ec <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xec>
	}
	else
	{
		ret = CO_ERROR_ILLEGAL_ARGUMENT;
    d8e2:	68fb      	ldr	r3, [r7, #12]
    d8e4:	22ff      	movs	r2, #255	; 0xff
    d8e6:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
    d8ea:	e000      	b.n	d8ee <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xee>
		}
    d8ec:	bf00      	nop
	}
	return ret;
    d8ee:	68fb      	ldr	r3, [r7, #12]
    d8f0:	f993 309d 	ldrsb.w	r3, [r3, #157]	; 0x9d
}
    d8f4:	4618      	mov	r0, r3
    d8f6:	371c      	adds	r7, #28
    d8f8:	46bd      	mov	sp, r7
    d8fa:	bd90      	pop	{r4, r7, pc}
    d8fc:	00001891 	.word	0x00001891

0000d900 <_ZN15CO_Driver_Class17CAN_Tx_BufferInitEmmhhh>:
		uint32_t                index,
		uint32_t                ident,
		bool_t                  rtr,
		uint8_t                 noOfBytes,
		bool_t                  syncFlag)
{
    d900:	b480      	push	{r7}
    d902:	b085      	sub	sp, #20
    d904:	af00      	add	r7, sp, #0
    d906:	60f8      	str	r0, [r7, #12]
    d908:	60b9      	str	r1, [r7, #8]
    d90a:	607a      	str	r2, [r7, #4]
    d90c:	70fb      	strb	r3, [r7, #3]
	buffer = NULL;
    d90e:	68fb      	ldr	r3, [r7, #12]
    d910:	2200      	movs	r2, #0
    d912:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	if((CAN_Module != NULL) && (index < CAN_Module->txSize)){
    d916:	68fb      	ldr	r3, [r7, #12]
    d918:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    d91c:	2b00      	cmp	r3, #0
    d91e:	d03c      	beq.n	d99a <_ZN15CO_Driver_Class17CAN_Tx_BufferInitEmmhhh+0x9a>
    d920:	68fb      	ldr	r3, [r7, #12]
    d922:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    d926:	691a      	ldr	r2, [r3, #16]
    d928:	68bb      	ldr	r3, [r7, #8]
    d92a:	429a      	cmp	r2, r3
    d92c:	d935      	bls.n	d99a <_ZN15CO_Driver_Class17CAN_Tx_BufferInitEmmhhh+0x9a>
		/* get specific buffer */
		buffer = &CAN_Module->txArray[index];
    d92e:	68fb      	ldr	r3, [r7, #12]
    d930:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    d934:	68da      	ldr	r2, [r3, #12]
    d936:	68bb      	ldr	r3, [r7, #8]
    d938:	011b      	lsls	r3, r3, #4
    d93a:	441a      	add	r2, r3
    d93c:	68fb      	ldr	r3, [r7, #12]
    d93e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

		/* CAN identifier, DLC and rtr, bit aligned with CAN module transmit buffer.*/

		buffer->ident &= 0x7FF;
    d942:	68fb      	ldr	r3, [r7, #12]
    d944:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    d948:	68fa      	ldr	r2, [r7, #12]
    d94a:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
    d94e:	6812      	ldr	r2, [r2, #0]
    d950:	f3c2 020a 	ubfx	r2, r2, #0, #11
    d954:	601a      	str	r2, [r3, #0]
		buffer->ident = ident << 2;
    d956:	68fb      	ldr	r3, [r7, #12]
    d958:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    d95c:	687a      	ldr	r2, [r7, #4]
    d95e:	0092      	lsls	r2, r2, #2
    d960:	601a      	str	r2, [r3, #0]
		if (rtr) buffer->ident |= 0x02;
    d962:	78fb      	ldrb	r3, [r7, #3]
    d964:	2b00      	cmp	r3, #0
    d966:	d009      	beq.n	d97c <_ZN15CO_Driver_Class17CAN_Tx_BufferInitEmmhhh+0x7c>
    d968:	68fb      	ldr	r3, [r7, #12]
    d96a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    d96e:	68fa      	ldr	r2, [r7, #12]
    d970:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
    d974:	6812      	ldr	r2, [r2, #0]
    d976:	f042 0202 	orr.w	r2, r2, #2
    d97a:	601a      	str	r2, [r3, #0]

		buffer->DLC = noOfBytes;
    d97c:	68fb      	ldr	r3, [r7, #12]
    d97e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    d982:	7e3a      	ldrb	r2, [r7, #24]
    d984:	711a      	strb	r2, [r3, #4]
		buffer->bufferFull = false;
    d986:	68fb      	ldr	r3, [r7, #12]
    d988:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    d98c:	2200      	movs	r2, #0
    d98e:	735a      	strb	r2, [r3, #13]
		buffer->syncFlag = syncFlag;
    d990:	68fb      	ldr	r3, [r7, #12]
    d992:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    d996:	7f3a      	ldrb	r2, [r7, #28]
    d998:	739a      	strb	r2, [r3, #14]
	}

	return buffer;
    d99a:	68fb      	ldr	r3, [r7, #12]
    d99c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
}
    d9a0:	4618      	mov	r0, r3
    d9a2:	3714      	adds	r7, #20
    d9a4:	46bd      	mov	sp, r7
    d9a6:	bc80      	pop	{r7}
    d9a8:	4770      	bx	lr
	...

0000d9ac <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t>:

/******************************************************************************/
CO_ReturnError_t CO_Driver_Class::CAN_Send(CO_CANtx_t *buffer)
{
    d9ac:	b590      	push	{r4, r7, lr}
    d9ae:	b089      	sub	sp, #36	; 0x24
    d9b0:	af02      	add	r7, sp, #8
    d9b2:	6078      	str	r0, [r7, #4]
    d9b4:	6039      	str	r1, [r7, #0]
	err = CO_ERROR_NO;
    d9b6:	687b      	ldr	r3, [r7, #4]
    d9b8:	2200      	movs	r2, #0
    d9ba:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e

	if(buffer->bufferFull){
    d9be:	683b      	ldr	r3, [r7, #0]
    d9c0:	7b5b      	ldrb	r3, [r3, #13]
    d9c2:	b2db      	uxtb	r3, r3
    d9c4:	2b00      	cmp	r3, #0
    d9c6:	bf14      	ite	ne
    d9c8:	2301      	movne	r3, #1
    d9ca:	2300      	moveq	r3, #0
    d9cc:	b2db      	uxtb	r3, r3
    d9ce:	2b00      	cmp	r3, #0
    d9d0:	d01d      	beq.n	da0e <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x62>
		if(!CAN_Module->firstCANtxMessage){
    d9d2:	687b      	ldr	r3, [r7, #4]
    d9d4:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    d9d8:	7ddb      	ldrb	r3, [r3, #23]
    d9da:	b2db      	uxtb	r3, r3
    d9dc:	2b00      	cmp	r3, #0
    d9de:	bf0c      	ite	eq
    d9e0:	2301      	moveq	r3, #1
    d9e2:	2300      	movne	r3, #0
    d9e4:	b2db      	uxtb	r3, r3
    d9e6:	2b00      	cmp	r3, #0
    d9e8:	d00d      	beq.n	da06 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x5a>
			/* don't set error, if bootup message is still on buffers */
			EM_ErrorReport((CO_EM_t*)CAN_Module->em, CO_EM_CAN_TX_OVERFLOW, CO_EMC_CAN_OVERRUN, buffer->ident);
    d9ea:	687b      	ldr	r3, [r7, #4]
    d9ec:	1d18      	adds	r0, r3, #4
    d9ee:	687b      	ldr	r3, [r7, #4]
    d9f0:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    d9f4:	6a19      	ldr	r1, [r3, #32]
    d9f6:	683b      	ldr	r3, [r7, #0]
    d9f8:	681b      	ldr	r3, [r3, #0]
    d9fa:	9300      	str	r3, [sp, #0]
    d9fc:	f248 1310 	movw	r3, #33040	; 0x8110
    da00:	2214      	movs	r2, #20
    da02:	4c35      	ldr	r4, [pc, #212]	; (dad8 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x12c>)
    da04:	47a0      	blx	r4
		}
		err = CO_ERROR_TX_OVERFLOW;
    da06:	687b      	ldr	r3, [r7, #4]
    da08:	22f7      	movs	r2, #247	; 0xf7
    da0a:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	}

	

	PrepareTxMessage(&msgHeader, buffer);
    da0e:	687b      	ldr	r3, [r7, #4]
    da10:	3378      	adds	r3, #120	; 0x78
    da12:	683a      	ldr	r2, [r7, #0]
    da14:	4619      	mov	r1, r3
    da16:	6878      	ldr	r0, [r7, #4]
    da18:	4b30      	ldr	r3, [pc, #192]	; (dadc <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x130>)
    da1a:	4798      	blx	r3

	if ((CAN_Module->CANtxCount == 0) ) {
    da1c:	687b      	ldr	r3, [r7, #4]
    da1e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    da22:	699b      	ldr	r3, [r3, #24]
    da24:	2b00      	cmp	r3, #0
    da26:	bf0c      	ite	eq
    da28:	2301      	moveq	r3, #1
    da2a:	2300      	movne	r3, #0
    da2c:	b2db      	uxtb	r3, r3
    da2e:	2b00      	cmp	r3, #0
    da30:	d041      	beq.n	dab6 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x10a>
	//	((uint32_t)hri_can_read_TXFQS_TFFL_bf(canHandler->dev.hw) > 0 )) {
		CAN_Module->bufferInhibitFlag = buffer->syncFlag;
    da32:	687b      	ldr	r3, [r7, #4]
    da34:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    da38:	683a      	ldr	r2, [r7, #0]
    da3a:	7b92      	ldrb	r2, [r2, #14]
    da3c:	b2d2      	uxtb	r2, r2
    da3e:	759a      	strb	r2, [r3, #22]
		
		can_async_register_callback(CAN_Module->CANBaseDescriptor, CAN_ASYNC_TX_CB, (FUNC_PTR)CO_tx_callback);
    da40:	687b      	ldr	r3, [r7, #4]
    da42:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    da46:	681b      	ldr	r3, [r3, #0]
    da48:	4a25      	ldr	r2, [pc, #148]	; (dae0 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x134>)
    da4a:	2101      	movs	r1, #1
    da4c:	4618      	mov	r0, r3
    da4e:	4b25      	ldr	r3, [pc, #148]	; (dae4 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x138>)
    da50:	4798      	blx	r3
		can_async_enable(CAN_Module->CANBaseDescriptor);
    da52:	687b      	ldr	r3, [r7, #4]
    da54:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    da58:	681b      	ldr	r3, [r3, #0]
    da5a:	4618      	mov	r0, r3
    da5c:	4b22      	ldr	r3, [pc, #136]	; (dae8 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x13c>)
    da5e:	4798      	blx	r3
		receivedtxCOCallback=false;
    da60:	687b      	ldr	r3, [r7, #4]
    da62:	2200      	movs	r2, #0
    da64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    da68:	f3ef 8310 	mrs	r3, PRIMASK
    da6c:	60fb      	str	r3, [r7, #12]
  return(result);
    da6e:	68fb      	ldr	r3, [r7, #12]
		CO_LOCK_CAN_SEND();
    da70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    da72:	b672      	cpsid	i
		HalCanErrorCode=can_async_write(CAN_Module->CANBaseDescriptor, &msgHeader);
    da74:	687b      	ldr	r3, [r7, #4]
    da76:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    da7a:	681a      	ldr	r2, [r3, #0]
    da7c:	687b      	ldr	r3, [r7, #4]
    da7e:	3378      	adds	r3, #120	; 0x78
    da80:	4619      	mov	r1, r3
    da82:	4610      	mov	r0, r2
    da84:	4b19      	ldr	r3, [pc, #100]	; (daec <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x140>)
    da86:	4798      	blx	r3
    da88:	4603      	mov	r3, r0
    da8a:	461a      	mov	r2, r3
    da8c:	687b      	ldr	r3, [r7, #4]
    da8e:	61da      	str	r2, [r3, #28]
    da90:	697b      	ldr	r3, [r7, #20]
    da92:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    da94:	693b      	ldr	r3, [r7, #16]
    da96:	f383 8810 	msr	PRIMASK, r3
		CO_UNLOCK_CAN_SEND();
		if(HalCanErrorCode != CO_ERROR_NO)
    da9a:	687b      	ldr	r3, [r7, #4]
    da9c:	69db      	ldr	r3, [r3, #28]
    da9e:	2b00      	cmp	r3, #0
    daa0:	bf14      	ite	ne
    daa2:	2301      	movne	r3, #1
    daa4:	2300      	moveq	r3, #0
    daa6:	b2db      	uxtb	r3, r3
    daa8:	2b00      	cmp	r3, #0
    daaa:	d00d      	beq.n	dac8 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x11c>
		{
			err = CO_ERROR_HAL;
    daac:	687b      	ldr	r3, [r7, #4]
    daae:	22f1      	movs	r2, #241	; 0xf1
    dab0:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
    dab4:	e008      	b.n	dac8 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x11c>
			//CANmodule->CANtxCount++;
		}
	}	/* if no buffer is free, message will be sent in the task */
	else
	{
		buffer->bufferFull = true;
    dab6:	683b      	ldr	r3, [r7, #0]
    dab8:	2201      	movs	r2, #1
    daba:	735a      	strb	r2, [r3, #13]
		CAN_Module->CANtxCount++;
    dabc:	687b      	ldr	r3, [r7, #4]
    dabe:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    dac2:	699a      	ldr	r2, [r3, #24]
    dac4:	3201      	adds	r2, #1
    dac6:	619a      	str	r2, [r3, #24]
	}
	

	return err;
    dac8:	687b      	ldr	r3, [r7, #4]
    daca:	f993 309e 	ldrsb.w	r3, [r3, #158]	; 0x9e
}
    dace:	4618      	mov	r0, r3
    dad0:	371c      	adds	r7, #28
    dad2:	46bd      	mov	sp, r7
    dad4:	bd90      	pop	{r4, r7, pc}
    dad6:	bf00      	nop
    dad8:	0000e441 	.word	0x0000e441
    dadc:	0000d5a1 	.word	0x0000d5a1
    dae0:	0000d4b9 	.word	0x0000d4b9
    dae4:	00001815 	.word	0x00001815
    dae8:	00001741 	.word	0x00001741
    daec:	000017c9 	.word	0x000017c9

0000daf0 <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv>:


/******************************************************************************/
void CO_Driver_Class::CANClearPendingSyncPDOs(void)
{
    daf0:	b590      	push	{r4, r7, lr}
    daf2:	b089      	sub	sp, #36	; 0x24
    daf4:	af02      	add	r7, sp, #8
    daf6:	6078      	str	r0, [r7, #4]
	tpdoDeleted = 0U;
    daf8:	687b      	ldr	r3, [r7, #4]
    dafa:	2200      	movs	r2, #0
    dafc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    db00:	f3ef 8310 	mrs	r3, PRIMASK
    db04:	60bb      	str	r3, [r7, #8]
  return(result);
    db06:	68bb      	ldr	r3, [r7, #8]

	CO_LOCK_CAN_SEND();
    db08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
    db0a:	b672      	cpsid	i
      {
    	HAL_CAN_AbortTxRequest(CANmodule->);
      }
	 */

	if(/*messageIsOnCanBuffer && */CAN_Module->bufferInhibitFlag){
    db0c:	687b      	ldr	r3, [r7, #4]
    db0e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    db12:	7d9b      	ldrb	r3, [r3, #22]
    db14:	b2db      	uxtb	r3, r3
    db16:	2b00      	cmp	r3, #0
    db18:	bf14      	ite	ne
    db1a:	2301      	movne	r3, #1
    db1c:	2300      	moveq	r3, #0
    db1e:	b2db      	uxtb	r3, r3
    db20:	2b00      	cmp	r3, #0
    db22:	d008      	beq.n	db36 <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv+0x46>
		/* clear TXREQ */
		CAN_Module->bufferInhibitFlag = false;
    db24:	687b      	ldr	r3, [r7, #4]
    db26:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    db2a:	2200      	movs	r2, #0
    db2c:	759a      	strb	r2, [r3, #22]
		tpdoDeleted = 1U;
    db2e:	687b      	ldr	r3, [r7, #4]
    db30:	2201      	movs	r2, #1
    db32:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	}
	/* delete also pending synchronous TPDOs in TX buffers */
	if(CAN_Module->CANtxCount != 0U){
    db36:	687b      	ldr	r3, [r7, #4]
    db38:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    db3c:	699b      	ldr	r3, [r3, #24]
    db3e:	2b00      	cmp	r3, #0
    db40:	bf14      	ite	ne
    db42:	2301      	movne	r3, #1
    db44:	2300      	moveq	r3, #0
    db46:	b2db      	uxtb	r3, r3
    db48:	2b00      	cmp	r3, #0
    db4a:	d03c      	beq.n	dbc6 <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv+0xd6>
	
		CO_CANtx_t *buffer = &CAN_Module->txArray[0];
    db4c:	687b      	ldr	r3, [r7, #4]
    db4e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    db52:	68db      	ldr	r3, [r3, #12]
    db54:	617b      	str	r3, [r7, #20]
		for(i = CAN_Module->txSize; i > 0U; i--){
    db56:	687b      	ldr	r3, [r7, #4]
    db58:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    db5c:	691a      	ldr	r2, [r3, #16]
    db5e:	687b      	ldr	r3, [r7, #4]
    db60:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    db64:	687b      	ldr	r3, [r7, #4]
    db66:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    db6a:	2b00      	cmp	r3, #0
    db6c:	d02b      	beq.n	dbc6 <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv+0xd6>
			if(buffer->bufferFull){
    db6e:	697b      	ldr	r3, [r7, #20]
    db70:	7b5b      	ldrb	r3, [r3, #13]
    db72:	b2db      	uxtb	r3, r3
    db74:	2b00      	cmp	r3, #0
    db76:	bf14      	ite	ne
    db78:	2301      	movne	r3, #1
    db7a:	2300      	moveq	r3, #0
    db7c:	b2db      	uxtb	r3, r3
    db7e:	2b00      	cmp	r3, #0
    db80:	d016      	beq.n	dbb0 <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv+0xc0>
				if(buffer->syncFlag){
    db82:	697b      	ldr	r3, [r7, #20]
    db84:	7b9b      	ldrb	r3, [r3, #14]
    db86:	b2db      	uxtb	r3, r3
    db88:	2b00      	cmp	r3, #0
    db8a:	bf14      	ite	ne
    db8c:	2301      	movne	r3, #1
    db8e:	2300      	moveq	r3, #0
    db90:	b2db      	uxtb	r3, r3
    db92:	2b00      	cmp	r3, #0
    db94:	d00c      	beq.n	dbb0 <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv+0xc0>
					buffer->bufferFull = false;
    db96:	697b      	ldr	r3, [r7, #20]
    db98:	2200      	movs	r2, #0
    db9a:	735a      	strb	r2, [r3, #13]
					CAN_Module->CANtxCount--;
    db9c:	687b      	ldr	r3, [r7, #4]
    db9e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    dba2:	699a      	ldr	r2, [r3, #24]
    dba4:	3a01      	subs	r2, #1
    dba6:	619a      	str	r2, [r3, #24]
					tpdoDeleted = 2U;
    dba8:	687b      	ldr	r3, [r7, #4]
    dbaa:	2202      	movs	r2, #2
    dbac:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
				}
			}
			buffer++;
    dbb0:	697b      	ldr	r3, [r7, #20]
    dbb2:	3310      	adds	r3, #16
    dbb4:	617b      	str	r3, [r7, #20]
		for(i = CAN_Module->txSize; i > 0U; i--){
    dbb6:	687b      	ldr	r3, [r7, #4]
    dbb8:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    dbbc:	1e5a      	subs	r2, r3, #1
    dbbe:	687b      	ldr	r3, [r7, #4]
    dbc0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    dbc4:	e7ce      	b.n	db64 <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv+0x74>
    dbc6:	693b      	ldr	r3, [r7, #16]
    dbc8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    dbca:	68fb      	ldr	r3, [r7, #12]
    dbcc:	f383 8810 	msr	PRIMASK, r3
		}
	}
	CO_UNLOCK_CAN_SEND();


	if(tpdoDeleted != 0U){
    dbd0:	687b      	ldr	r3, [r7, #4]
    dbd2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    dbd6:	2b00      	cmp	r3, #0
    dbd8:	d00e      	beq.n	dbf8 <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv+0x108>
		EM_ErrorReport((CO_EM_t*)CAN_Module->em, CO_EM_TPDO_OUTSIDE_WINDOW, CO_EMC_COMMUNICATION, tpdoDeleted);
    dbda:	687b      	ldr	r3, [r7, #4]
    dbdc:	1d18      	adds	r0, r3, #4
    dbde:	687b      	ldr	r3, [r7, #4]
    dbe0:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    dbe4:	6a19      	ldr	r1, [r3, #32]
    dbe6:	687b      	ldr	r3, [r7, #4]
    dbe8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    dbec:	9300      	str	r3, [sp, #0]
    dbee:	f44f 4301 	mov.w	r3, #33024	; 0x8100
    dbf2:	2215      	movs	r2, #21
    dbf4:	4c02      	ldr	r4, [pc, #8]	; (dc00 <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv+0x110>)
    dbf6:	47a0      	blx	r4
	}
}
    dbf8:	bf00      	nop
    dbfa:	371c      	adds	r7, #28
    dbfc:	46bd      	mov	sp, r7
    dbfe:	bd90      	pop	{r4, r7, pc}
    dc00:	0000e441 	.word	0x0000e441

0000dc04 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv>:


/******************************************************************************/
void CO_Driver_Class::CAN_VerifyErrors(void){
    dc04:	b590      	push	{r4, r7, lr}
    dc06:	b087      	sub	sp, #28
    dc08:	af02      	add	r7, sp, #8
    dc0a:	6078      	str	r0, [r7, #4]
	em = (CO_EM_t*)CAN_Module->em;
    dc0c:	687b      	ldr	r3, [r7, #4]
    dc0e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    dc12:	6a1a      	ldr	r2, [r3, #32]
    dc14:	687b      	ldr	r3, [r7, #4]
    dc16:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	//uint32_t HalCanErrorCode = canHandler->dev.cb->irq_handler();

	if(CAN_Module->errOld != HalCanErrorCode)
    dc1a:	687b      	ldr	r3, [r7, #4]
    dc1c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    dc20:	69da      	ldr	r2, [r3, #28]
    dc22:	687b      	ldr	r3, [r7, #4]
    dc24:	69db      	ldr	r3, [r3, #28]
    dc26:	429a      	cmp	r2, r3
    dc28:	bf14      	ite	ne
    dc2a:	2301      	movne	r3, #1
    dc2c:	2300      	moveq	r3, #0
    dc2e:	b2db      	uxtb	r3, r3
    dc30:	2b00      	cmp	r3, #0
    dc32:	f000 80ae 	beq.w	dd92 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x18e>
	{
		CAN_Module->errOld = HalCanErrorCode;
    dc36:	687b      	ldr	r3, [r7, #4]
    dc38:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    dc3c:	687a      	ldr	r2, [r7, #4]
    dc3e:	69d2      	ldr	r2, [r2, #28]
    dc40:	61da      	str	r2, [r3, #28]
		if(HalCanErrorCode & CAN_IRQ_BO)
    dc42:	687b      	ldr	r3, [r7, #4]
    dc44:	69db      	ldr	r3, [r3, #28]
    dc46:	f003 0303 	and.w	r3, r3, #3
    dc4a:	2b00      	cmp	r3, #0
    dc4c:	bf14      	ite	ne
    dc4e:	2301      	movne	r3, #1
    dc50:	2300      	moveq	r3, #0
    dc52:	b2db      	uxtb	r3, r3
    dc54:	2b00      	cmp	r3, #0
    dc56:	d00d      	beq.n	dc74 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x70>
		{                               /* bus off */
			EM_ErrorReport(em, CO_EM_CAN_TX_BUS_OFF, CO_EMC_BUS_OFF_RECOVERED, HalCanErrorCode);
    dc58:	687b      	ldr	r3, [r7, #4]
    dc5a:	1d18      	adds	r0, r3, #4
    dc5c:	687b      	ldr	r3, [r7, #4]
    dc5e:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
    dc62:	687b      	ldr	r3, [r7, #4]
    dc64:	69db      	ldr	r3, [r3, #28]
    dc66:	9300      	str	r3, [sp, #0]
    dc68:	f248 1340 	movw	r3, #33088	; 0x8140
    dc6c:	2212      	movs	r2, #18
    dc6e:	4c4d      	ldr	r4, [pc, #308]	; (dda4 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x1a0>)
    dc70:	47a0      	blx	r4
    dc72:	e076      	b.n	dd62 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x15e>
		}
		else{                                               /* not bus off */
			EM_ErrorReset(em, CO_EM_CAN_TX_BUS_OFF, HalCanErrorCode);
    dc74:	687b      	ldr	r3, [r7, #4]
    dc76:	1d18      	adds	r0, r3, #4
    dc78:	687b      	ldr	r3, [r7, #4]
    dc7a:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
    dc7e:	687b      	ldr	r3, [r7, #4]
    dc80:	69db      	ldr	r3, [r3, #28]
    dc82:	2212      	movs	r2, #18
    dc84:	4c48      	ldr	r4, [pc, #288]	; (dda8 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x1a4>)
    dc86:	47a0      	blx	r4

			if(HalCanErrorCode & CAN_IRQ_EW)
    dc88:	687b      	ldr	r3, [r7, #4]
    dc8a:	69db      	ldr	r3, [r3, #28]
    dc8c:	2300      	movs	r3, #0
    dc8e:	2b00      	cmp	r3, #0
    dc90:	d00b      	beq.n	dcaa <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0xa6>
			{     											/* bus warning */
				EM_ErrorReport(em, CO_EM_CAN_BUS_WARNING, CO_EMC_NO_ERROR, HalCanErrorCode);
    dc92:	687b      	ldr	r3, [r7, #4]
    dc94:	1d18      	adds	r0, r3, #4
    dc96:	687b      	ldr	r3, [r7, #4]
    dc98:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
    dc9c:	687b      	ldr	r3, [r7, #4]
    dc9e:	69db      	ldr	r3, [r3, #28]
    dca0:	9300      	str	r3, [sp, #0]
    dca2:	2300      	movs	r3, #0
    dca4:	2201      	movs	r2, #1
    dca6:	4c3f      	ldr	r4, [pc, #252]	; (dda4 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x1a0>)
    dca8:	47a0      	blx	r4
			}
			else
			{
				//do nothing
			}
			if(HalCanErrorCode & CAN_IRQ_EP)
    dcaa:	687b      	ldr	r3, [r7, #4]
    dcac:	69db      	ldr	r3, [r3, #28]
    dcae:	f003 0302 	and.w	r3, r3, #2
    dcb2:	2b00      	cmp	r3, #0
    dcb4:	bf14      	ite	ne
    dcb6:	2301      	movne	r3, #1
    dcb8:	2300      	moveq	r3, #0
    dcba:	b2db      	uxtb	r3, r3
    dcbc:	2b00      	cmp	r3, #0
    dcbe:	d019      	beq.n	dcf4 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0xf0>
			{      											/* TX/RX bus passive */
				if(!CAN_Module->firstCANtxMessage)
    dcc0:	687b      	ldr	r3, [r7, #4]
    dcc2:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    dcc6:	7ddb      	ldrb	r3, [r3, #23]
    dcc8:	b2db      	uxtb	r3, r3
    dcca:	2b00      	cmp	r3, #0
    dccc:	bf0c      	ite	eq
    dcce:	2301      	moveq	r3, #1
    dcd0:	2300      	movne	r3, #0
    dcd2:	b2db      	uxtb	r3, r3
    dcd4:	2b00      	cmp	r3, #0
    dcd6:	d02f      	beq.n	dd38 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x134>
				{
					EM_ErrorReport(em, CO_EM_CAN_TX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, HalCanErrorCode);
    dcd8:	687b      	ldr	r3, [r7, #4]
    dcda:	1d18      	adds	r0, r3, #4
    dcdc:	687b      	ldr	r3, [r7, #4]
    dcde:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
    dce2:	687b      	ldr	r3, [r7, #4]
    dce4:	69db      	ldr	r3, [r3, #28]
    dce6:	9300      	str	r3, [sp, #0]
    dce8:	f248 1320 	movw	r3, #33056	; 0x8120
    dcec:	2207      	movs	r2, #7
    dcee:	4c2d      	ldr	r4, [pc, #180]	; (dda4 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x1a0>)
    dcf0:	47a0      	blx	r4
    dcf2:	e021      	b.n	dd38 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x134>
				{
					//do nothing
				}
			}
			else{
				bool_t isError = EM_IsError(em, CO_EM_CAN_TX_BUS_PASSIVE);
    dcf4:	687b      	ldr	r3, [r7, #4]
    dcf6:	1d18      	adds	r0, r3, #4
    dcf8:	687b      	ldr	r3, [r7, #4]
    dcfa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    dcfe:	2207      	movs	r2, #7
    dd00:	4619      	mov	r1, r3
    dd02:	4b2a      	ldr	r3, [pc, #168]	; (ddac <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x1a8>)
    dd04:	4798      	blx	r3
    dd06:	4603      	mov	r3, r0
    dd08:	73fb      	strb	r3, [r7, #15]
				if(isError)
    dd0a:	7bfb      	ldrb	r3, [r7, #15]
    dd0c:	2b00      	cmp	r3, #0
    dd0e:	d013      	beq.n	dd38 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x134>
				{
					EM_ErrorReset(em, CO_EM_CAN_TX_BUS_PASSIVE, HalCanErrorCode);
    dd10:	687b      	ldr	r3, [r7, #4]
    dd12:	1d18      	adds	r0, r3, #4
    dd14:	687b      	ldr	r3, [r7, #4]
    dd16:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
    dd1a:	687b      	ldr	r3, [r7, #4]
    dd1c:	69db      	ldr	r3, [r3, #28]
    dd1e:	2207      	movs	r2, #7
    dd20:	4c21      	ldr	r4, [pc, #132]	; (dda8 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x1a4>)
    dd22:	47a0      	blx	r4
					EM_ErrorReset(em, CO_EM_CAN_TX_OVERFLOW, HalCanErrorCode);
    dd24:	687b      	ldr	r3, [r7, #4]
    dd26:	1d18      	adds	r0, r3, #4
    dd28:	687b      	ldr	r3, [r7, #4]
    dd2a:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
    dd2e:	687b      	ldr	r3, [r7, #4]
    dd30:	69db      	ldr	r3, [r3, #28]
    dd32:	2214      	movs	r2, #20
    dd34:	4c1c      	ldr	r4, [pc, #112]	; (dda8 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x1a4>)
    dd36:	47a0      	blx	r4
				{
					//do nothing
				}
			}

			if(HalCanErrorCode & CAN_IRQ_EA)
    dd38:	687b      	ldr	r3, [r7, #4]
    dd3a:	69db      	ldr	r3, [r3, #28]
    dd3c:	f003 0301 	and.w	r3, r3, #1
    dd40:	2b00      	cmp	r3, #0
    dd42:	bf14      	ite	ne
    dd44:	2301      	movne	r3, #1
    dd46:	2300      	moveq	r3, #0
    dd48:	b2db      	uxtb	r3, r3
    dd4a:	2b00      	cmp	r3, #0
    dd4c:	d009      	beq.n	dd62 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x15e>
			{      											 /* no error */
				EM_ErrorReset(em, CO_EM_CAN_BUS_WARNING, HalCanErrorCode);
    dd4e:	687b      	ldr	r3, [r7, #4]
    dd50:	1d18      	adds	r0, r3, #4
    dd52:	687b      	ldr	r3, [r7, #4]
    dd54:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
    dd58:	687b      	ldr	r3, [r7, #4]
    dd5a:	69db      	ldr	r3, [r3, #28]
    dd5c:	2201      	movs	r2, #1
    dd5e:	4c12      	ldr	r4, [pc, #72]	; (dda8 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x1a4>)
    dd60:	47a0      	blx	r4
				//do nothing
			}

		}

		if((HalCanErrorCode & CAN_IRQ_DO) )
    dd62:	687b      	ldr	r3, [r7, #4]
    dd64:	69db      	ldr	r3, [r3, #28]
    dd66:	f003 0304 	and.w	r3, r3, #4
    dd6a:	2b00      	cmp	r3, #0
    dd6c:	bf14      	ite	ne
    dd6e:	2301      	movne	r3, #1
    dd70:	2300      	moveq	r3, #0
    dd72:	b2db      	uxtb	r3, r3
    dd74:	2b00      	cmp	r3, #0
    dd76:	d00c      	beq.n	dd92 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x18e>
		{                                 					/* CAN RX bus overflow */
			EM_ErrorReport(em, CO_EM_CAN_RXB_OVERFLOW, CO_EMC_CAN_OVERRUN, HalCanErrorCode);
    dd78:	687b      	ldr	r3, [r7, #4]
    dd7a:	1d18      	adds	r0, r3, #4
    dd7c:	687b      	ldr	r3, [r7, #4]
    dd7e:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
    dd82:	687b      	ldr	r3, [r7, #4]
    dd84:	69db      	ldr	r3, [r3, #28]
    dd86:	9300      	str	r3, [sp, #0]
    dd88:	f248 1310 	movw	r3, #33040	; 0x8110
    dd8c:	2213      	movs	r2, #19
    dd8e:	4c05      	ldr	r4, [pc, #20]	; (dda4 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x1a0>)
    dd90:	47a0      	blx	r4
		else
		{
			//do nothing
		}
	}
		receivedIntCOCallback=false;
    dd92:	687b      	ldr	r3, [r7, #4]
    dd94:	2200      	movs	r2, #0
    dd96:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
    dd9a:	bf00      	nop
    dd9c:	3714      	adds	r7, #20
    dd9e:	46bd      	mov	sp, r7
    dda0:	bd90      	pop	{r4, r7, pc}
    dda2:	bf00      	nop
    dda4:	0000e441 	.word	0x0000e441
    dda8:	0000e595 	.word	0x0000e595
    ddac:	0000e6e1 	.word	0x0000e6e1

0000ddb0 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv>:

/*Interrupt handlers*/
/******************************************************************************/
void CO_Driver_Class::ProcessInterrupt_Rx(void)
{
    ddb0:	b580      	push	{r7, lr}
    ddb2:	b084      	sub	sp, #16
    ddb4:	af00      	add	r7, sp, #0
    ddb6:	6078      	str	r0, [r7, #4]

	

	ConvertCANMsg2CORxMsg(receivedCOMsg,&CANmessage);
    ddb8:	687b      	ldr	r3, [r7, #4]
    ddba:	f103 0164 	add.w	r1, r3, #100	; 0x64
    ddbe:	687b      	ldr	r3, [r7, #4]
    ddc0:	33f4      	adds	r3, #244	; 0xf4
    ddc2:	461a      	mov	r2, r3
    ddc4:	6878      	ldr	r0, [r7, #4]
    ddc6:	4b30      	ldr	r3, [pc, #192]	; (de88 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xd8>)
    ddc8:	4798      	blx	r3
	MsgBuff=CAN_Module->rxArray;
    ddca:	687b      	ldr	r3, [r7, #4]
    ddcc:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    ddd0:	685a      	ldr	r2, [r3, #4]
    ddd2:	687b      	ldr	r3, [r7, #4]
    ddd4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	/* Search rxArray form CANmodule for the same CAN-ID. */
	uint32_t msgCO = (((uint32_t)(CANmessage.ident << 2)) | (uint32_t)(msg.type));
    ddd8:	687b      	ldr	r3, [r7, #4]
    ddda:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    ddde:	009b      	lsls	r3, r3, #2
    dde0:	687a      	ldr	r2, [r7, #4]
    dde2:	f892 2090 	ldrb.w	r2, [r2, #144]	; 0x90
    dde6:	4313      	orrs	r3, r2
    dde8:	60fb      	str	r3, [r7, #12]
	for (index = 0; index < RxFifo_Callback_CanModule_p->rxSize; index++)
    ddea:	687b      	ldr	r3, [r7, #4]
    ddec:	2200      	movs	r2, #0
    ddee:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    ddf2:	687b      	ldr	r3, [r7, #4]
    ddf4:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    ddf8:	687b      	ldr	r3, [r7, #4]
    ddfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    ddfc:	689b      	ldr	r3, [r3, #8]
    ddfe:	429a      	cmp	r2, r3
    de00:	d221      	bcs.n	de46 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x96>
	{
		
		if (((msgCO ^ MsgBuff->ident) & MsgBuff->mask) == 0)
    de02:	687b      	ldr	r3, [r7, #4]
    de04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    de08:	681a      	ldr	r2, [r3, #0]
    de0a:	68fb      	ldr	r3, [r7, #12]
    de0c:	405a      	eors	r2, r3
    de0e:	687b      	ldr	r3, [r7, #4]
    de10:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    de14:	685b      	ldr	r3, [r3, #4]
    de16:	4013      	ands	r3, r2
    de18:	2b00      	cmp	r3, #0
    de1a:	d104      	bne.n	de26 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x76>
		{
			msgMatched = true;
    de1c:	687b      	ldr	r3, [r7, #4]
    de1e:	2201      	movs	r2, #1
    de20:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
			break;
    de24:	e00f      	b.n	de46 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x96>
		}
		MsgBuff++;
    de26:	687b      	ldr	r3, [r7, #4]
    de28:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    de2c:	f103 0210 	add.w	r2, r3, #16
    de30:	687b      	ldr	r3, [r7, #4]
    de32:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	for (index = 0; index < RxFifo_Callback_CanModule_p->rxSize; index++)
    de36:	687b      	ldr	r3, [r7, #4]
    de38:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    de3c:	1c5a      	adds	r2, r3, #1
    de3e:	687b      	ldr	r3, [r7, #4]
    de40:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    de44:	e7d5      	b.n	ddf2 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x42>
	}

	/* Call specific function, which will process the message */
	if(msgMatched && (MsgBuff != NULL) && (MsgBuff->pFunct != NULL))
    de46:	687b      	ldr	r3, [r7, #4]
    de48:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
    de4c:	2b00      	cmp	r3, #0
    de4e:	d016      	beq.n	de7e <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xce>
    de50:	687b      	ldr	r3, [r7, #4]
    de52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    de56:	2b00      	cmp	r3, #0
    de58:	d011      	beq.n	de7e <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xce>
    de5a:	687b      	ldr	r3, [r7, #4]
    de5c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    de60:	68db      	ldr	r3, [r3, #12]
    de62:	2b00      	cmp	r3, #0
    de64:	d00b      	beq.n	de7e <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xce>
	{
			//printf("  %X", CANmessage.ident);
			MsgBuff->pFunct(MsgBuff->object, &CANmessage);
    de66:	687b      	ldr	r3, [r7, #4]
    de68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    de6c:	68db      	ldr	r3, [r3, #12]
    de6e:	687a      	ldr	r2, [r7, #4]
    de70:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
    de74:	6890      	ldr	r0, [r2, #8]
    de76:	687a      	ldr	r2, [r7, #4]
    de78:	32f4      	adds	r2, #244	; 0xf4
    de7a:	4611      	mov	r1, r2
    de7c:	4798      	blx	r3
	//                buffer++;
	//            }
	//        }

	/*CubeMx HAL is responsible for clearing interrupt flags and all the dirty work. */
}
    de7e:	bf00      	nop
    de80:	3710      	adds	r7, #16
    de82:	46bd      	mov	sp, r7
    de84:	bd80      	pop	{r7, pc}
    de86:	bf00      	nop
    de88:	0000d5ed 	.word	0x0000d5ed

0000de8c <_ZN15CO_Driver_Class14CAN_Polling_TxEv>:


void CO_Driver_Class::CAN_Polling_Tx(void)
{
    de8c:	b580      	push	{r7, lr}
    de8e:	b084      	sub	sp, #16
    de90:	af00      	add	r7, sp, #0
    de92:	6078      	str	r0, [r7, #4]
	
	//struct can_async_descriptor canStruct= (* struct can_async_descriptor )canHandler;
	if (hri_can_read_TXFQS_TFFL_bf(CAN1) > 0)
    de94:	4845      	ldr	r0, [pc, #276]	; (dfac <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x120>)
    de96:	4b46      	ldr	r3, [pc, #280]	; (dfb0 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x124>)
    de98:	4798      	blx	r3
    de9a:	4603      	mov	r3, r0
    de9c:	2b00      	cmp	r3, #0
    de9e:	bf14      	ite	ne
    dea0:	2301      	movne	r3, #1
    dea2:	2300      	moveq	r3, #0
    dea4:	b2db      	uxtb	r3, r3
    dea6:	2b00      	cmp	r3, #0
    dea8:	d07b      	beq.n	dfa2 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x116>
	{
		/* First CAN message (bootup) was sent successfully */
		CAN_Module->firstCANtxMessage = false;
    deaa:	687b      	ldr	r3, [r7, #4]
    deac:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    deb0:	2200      	movs	r2, #0
    deb2:	75da      	strb	r2, [r3, #23]
		/* Clear flag from previous message */
		CAN_Module->bufferInhibitFlag = false;
    deb4:	687b      	ldr	r3, [r7, #4]
    deb6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    deba:	2200      	movs	r2, #0
    debc:	759a      	strb	r2, [r3, #22]
		/* Are there any new messages waiting to be send */
		if(CAN_Module->CANtxCount > 0U)
    debe:	687b      	ldr	r3, [r7, #4]
    dec0:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    dec4:	699b      	ldr	r3, [r3, #24]
    dec6:	2b00      	cmp	r3, #0
    dec8:	bf14      	ite	ne
    deca:	2301      	movne	r3, #1
    decc:	2300      	moveq	r3, #0
    dece:	b2db      	uxtb	r3, r3
    ded0:	2b00      	cmp	r3, #0
    ded2:	d066      	beq.n	dfa2 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x116>
		{
			uint32_t i;             /* index of transmitting message */

			/* first buffer */
			CO_CANtx_t *buffer = &CAN_Module->txArray[0];
    ded4:	687b      	ldr	r3, [r7, #4]
    ded6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    deda:	68db      	ldr	r3, [r3, #12]
    dedc:	60bb      	str	r3, [r7, #8]
			/* search through whole array of pointers to transmit message buffers. */
			for(i = CAN_Module->txSize; i > 0U; i--)
    dede:	687b      	ldr	r3, [r7, #4]
    dee0:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    dee4:	691b      	ldr	r3, [r3, #16]
    dee6:	60fb      	str	r3, [r7, #12]
    dee8:	68fb      	ldr	r3, [r7, #12]
    deea:	2b00      	cmp	r3, #0
    deec:	d051      	beq.n	df92 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x106>
			{
				/* if message buffer is full, send it. */
				if(buffer->bufferFull)
    deee:	68bb      	ldr	r3, [r7, #8]
    def0:	7b5b      	ldrb	r3, [r3, #13]
    def2:	b2db      	uxtb	r3, r3
    def4:	2b00      	cmp	r3, #0
    def6:	bf14      	ite	ne
    def8:	2301      	movne	r3, #1
    defa:	2300      	moveq	r3, #0
    defc:	b2db      	uxtb	r3, r3
    defe:	2b00      	cmp	r3, #0
    df00:	d03f      	beq.n	df82 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0xf6>
				{

					/* Copy message to CAN buffer */
					CAN_Module->bufferInhibitFlag = buffer->syncFlag;
    df02:	687b      	ldr	r3, [r7, #4]
    df04:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    df08:	68ba      	ldr	r2, [r7, #8]
    df0a:	7b92      	ldrb	r2, [r2, #14]
    df0c:	b2d2      	uxtb	r2, r2
    df0e:	759a      	strb	r2, [r3, #22]

					

					PrepareTxMessage(&msgHeader, buffer);
    df10:	687b      	ldr	r3, [r7, #4]
    df12:	3378      	adds	r3, #120	; 0x78
    df14:	68ba      	ldr	r2, [r7, #8]
    df16:	4619      	mov	r1, r3
    df18:	6878      	ldr	r0, [r7, #4]
    df1a:	4b26      	ldr	r3, [pc, #152]	; (dfb4 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x128>)
    df1c:	4798      	blx	r3
					can_async_register_callback(canDescr, CAN_ASYNC_TX_CB, (FUNC_PTR)CO_tx_callback);
    df1e:	687b      	ldr	r3, [r7, #4]
    df20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    df24:	4a24      	ldr	r2, [pc, #144]	; (dfb8 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x12c>)
    df26:	2101      	movs	r1, #1
    df28:	4618      	mov	r0, r3
    df2a:	4b24      	ldr	r3, [pc, #144]	; (dfbc <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x130>)
    df2c:	4798      	blx	r3
					can_async_enable(canDescr);
    df2e:	687b      	ldr	r3, [r7, #4]
    df30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    df34:	4618      	mov	r0, r3
    df36:	4b22      	ldr	r3, [pc, #136]	; (dfc0 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x134>)
    df38:	4798      	blx	r3
					receivedtxCOCallback=false;
    df3a:	687b      	ldr	r3, [r7, #4]
    df3c:	2200      	movs	r2, #0
    df3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					HalCanErrorCode=can_async_write(canDescr, &msgHeader);
    df42:	687b      	ldr	r3, [r7, #4]
    df44:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    df48:	687b      	ldr	r3, [r7, #4]
    df4a:	3378      	adds	r3, #120	; 0x78
    df4c:	4619      	mov	r1, r3
    df4e:	4610      	mov	r0, r2
    df50:	4b1c      	ldr	r3, [pc, #112]	; (dfc4 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x138>)
    df52:	4798      	blx	r3
    df54:	4603      	mov	r3, r0
    df56:	461a      	mov	r2, r3
    df58:	687b      	ldr	r3, [r7, #4]
    df5a:	61da      	str	r2, [r3, #28]
					if( HalCanErrorCode != CO_ERROR_NO)
    df5c:	687b      	ldr	r3, [r7, #4]
    df5e:	69db      	ldr	r3, [r3, #28]
    df60:	2b00      	cmp	r3, #0
    df62:	bf14      	ite	ne
    df64:	2301      	movne	r3, #1
    df66:	2300      	moveq	r3, #0
    df68:	b2db      	uxtb	r3, r3
    df6a:	2b00      	cmp	r3, #0
    df6c:	d110      	bne.n	df90 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x104>
					{
						;//do nothing
					}
					else
					{
						buffer->bufferFull = false;
    df6e:	68bb      	ldr	r3, [r7, #8]
    df70:	2200      	movs	r2, #0
    df72:	735a      	strb	r2, [r3, #13]
						CAN_Module->CANtxCount--;
    df74:	687b      	ldr	r3, [r7, #4]
    df76:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    df7a:	699a      	ldr	r2, [r3, #24]
    df7c:	3a01      	subs	r2, #1
    df7e:	619a      	str	r2, [r3, #24]
					}

					break;                      /* exit for loop */
    df80:	e006      	b.n	df90 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x104>
				}
				else
				{
					/*do nothing*/;
				}
				buffer++;
    df82:	68bb      	ldr	r3, [r7, #8]
    df84:	3310      	adds	r3, #16
    df86:	60bb      	str	r3, [r7, #8]
			for(i = CAN_Module->txSize; i > 0U; i--)
    df88:	68fb      	ldr	r3, [r7, #12]
    df8a:	3b01      	subs	r3, #1
    df8c:	60fb      	str	r3, [r7, #12]
    df8e:	e7ab      	b.n	dee8 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x5c>
					break;                      /* exit for loop */
    df90:	bf00      	nop
			}/* end of for loop */

			/* Clear counter if no more messages */
			if(i == 0U)
    df92:	68fb      	ldr	r3, [r7, #12]
    df94:	2b00      	cmp	r3, #0
    df96:	d104      	bne.n	dfa2 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x116>
			{
				CAN_Module->CANtxCount = 0U;
    df98:	687b      	ldr	r3, [r7, #4]
    df9a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    df9e:	2200      	movs	r2, #0
    dfa0:	619a      	str	r2, [r3, #24]
			{
				/*do nothing*/;
			}
		}
	}
}
    dfa2:	bf00      	nop
    dfa4:	3710      	adds	r7, #16
    dfa6:	46bd      	mov	sp, r7
    dfa8:	bd80      	pop	{r7, pc}
    dfaa:	bf00      	nop
    dfac:	42000400 	.word	0x42000400
    dfb0:	0000d405 	.word	0x0000d405
    dfb4:	0000d5a1 	.word	0x0000d5a1
    dfb8:	0000d4b9 	.word	0x0000d4b9
    dfbc:	00001815 	.word	0x00001815
    dfc0:	00001741 	.word	0x00001741
    dfc4:	000017c9 	.word	0x000017c9

0000dfc8 <_ZN18CO_Emergency_ClassC1Ev>:
#include "CO_Driver_Class.h"

CO_Emergency_Class	*ptrCOEMClass;

// default constructor
CO_Emergency_Class::CO_Emergency_Class()
    dfc8:	b580      	push	{r7, lr}
    dfca:	b082      	sub	sp, #8
    dfcc:	af00      	add	r7, sp, #0
    dfce:	6078      	str	r0, [r7, #4]
    dfd0:	687b      	ldr	r3, [r7, #4]
    dfd2:	4618      	mov	r0, r3
    dfd4:	4b04      	ldr	r3, [pc, #16]	; (dfe8 <_ZN18CO_Emergency_ClassC1Ev+0x20>)
    dfd6:	4798      	blx	r3
{
	ptrCOEMClass=this;
    dfd8:	4a04      	ldr	r2, [pc, #16]	; (dfec <_ZN18CO_Emergency_ClassC1Ev+0x24>)
    dfda:	687b      	ldr	r3, [r7, #4]
    dfdc:	6013      	str	r3, [r2, #0]
} //CO_Emergency_Class
    dfde:	687b      	ldr	r3, [r7, #4]
    dfe0:	4618      	mov	r0, r3
    dfe2:	3708      	adds	r7, #8
    dfe4:	46bd      	mov	sp, r7
    dfe6:	bd80      	pop	{r7, pc}
    dfe8:	00010451 	.word	0x00010451
    dfec:	200019b8 	.word	0x200019b8

0000dff0 <_ZN18CO_Emergency_ClassD1Ev>:

// default destructor
CO_Emergency_Class::~CO_Emergency_Class()
    dff0:	b580      	push	{r7, lr}
    dff2:	b082      	sub	sp, #8
    dff4:	af00      	add	r7, sp, #0
    dff6:	6078      	str	r0, [r7, #4]
    dff8:	687b      	ldr	r3, [r7, #4]
    dffa:	4618      	mov	r0, r3
    dffc:	4b03      	ldr	r3, [pc, #12]	; (e00c <_ZN18CO_Emergency_ClassD1Ev+0x1c>)
    dffe:	4798      	blx	r3
{
} //~CO_Emergency_Class
    e000:	687b      	ldr	r3, [r7, #4]
    e002:	4618      	mov	r0, r3
    e004:	3708      	adds	r7, #8
    e006:	46bd      	mov	sp, r7
    e008:	bd80      	pop	{r7, pc}
    e00a:	bf00      	nop
    e00c:	00010479 	.word	0x00010479

0000e010 <_ZL11CO_ODF_1003P12CO_ODF_arg_t>:
 * Function for accessing _Pre-Defined Error Field_ (index 0x1003) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */

static   CO_SDO_abortCode_t CO_ODF_1003(CO_ODF_arg_t *ODF_arg){
    e010:	b480      	push	{r7}
    e012:	b087      	sub	sp, #28
    e014:	af00      	add	r7, sp, #0
    e016:	6078      	str	r0, [r7, #4]
    
    uint8_t value;
	CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
    e018:	2300      	movs	r3, #0
    e01a:	617b      	str	r3, [r7, #20]

    CO_EMpr_t *emPr = (CO_EMpr_t*) ODF_arg->object;
    e01c:	687b      	ldr	r3, [r7, #4]
    e01e:	681b      	ldr	r3, [r3, #0]
    e020:	613b      	str	r3, [r7, #16]
    value = ODF_arg->data[0];
    e022:	687b      	ldr	r3, [r7, #4]
    e024:	685b      	ldr	r3, [r3, #4]
    e026:	781b      	ldrb	r3, [r3, #0]
    e028:	73fb      	strb	r3, [r7, #15]

    if(ODF_arg->reading){
    e02a:	687b      	ldr	r3, [r7, #4]
    e02c:	7f5b      	ldrb	r3, [r3, #29]
    e02e:	2b00      	cmp	r3, #0
    e030:	d017      	beq.n	e062 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x52>
        uint8_t noOfErrors;
        noOfErrors = emPr->preDefErrNoOfErrors;
    e032:	693b      	ldr	r3, [r7, #16]
    e034:	7a5b      	ldrb	r3, [r3, #9]
    e036:	73bb      	strb	r3, [r7, #14]

        if(ODF_arg->subIndex == 0U){
    e038:	687b      	ldr	r3, [r7, #4]
    e03a:	7f1b      	ldrb	r3, [r3, #28]
    e03c:	2b00      	cmp	r3, #0
    e03e:	d104      	bne.n	e04a <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x3a>
            ODF_arg->data[0] = noOfErrors;
    e040:	687b      	ldr	r3, [r7, #4]
    e042:	685b      	ldr	r3, [r3, #4]
    e044:	7bba      	ldrb	r2, [r7, #14]
    e046:	701a      	strb	r2, [r3, #0]
    e048:	e01b      	b.n	e082 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
        }
        else if(ODF_arg->subIndex > noOfErrors){
    e04a:	687b      	ldr	r3, [r7, #4]
    e04c:	7f1b      	ldrb	r3, [r3, #28]
    e04e:	461a      	mov	r2, r3
    e050:	7bbb      	ldrb	r3, [r7, #14]
    e052:	429a      	cmp	r2, r3
    e054:	dd02      	ble.n	e05c <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x4c>
            ret = CO_SDO_AB_NO_DATA;
    e056:	4b0e      	ldr	r3, [pc, #56]	; (e090 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x80>)
    e058:	617b      	str	r3, [r7, #20]
    e05a:	e012      	b.n	e082 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
        }
        else{
            ret = CO_SDO_AB_NONE;
    e05c:	2300      	movs	r3, #0
    e05e:	617b      	str	r3, [r7, #20]
    e060:	e00f      	b.n	e082 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
        }
    }
    else{
        /* only '0' may be written to subIndex 0 */
        if(ODF_arg->subIndex == 0U){
    e062:	687b      	ldr	r3, [r7, #4]
    e064:	7f1b      	ldrb	r3, [r3, #28]
    e066:	2b00      	cmp	r3, #0
    e068:	d109      	bne.n	e07e <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x6e>
            if(value == 0U){
    e06a:	7bfb      	ldrb	r3, [r7, #15]
    e06c:	2b00      	cmp	r3, #0
    e06e:	d103      	bne.n	e078 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x68>
                emPr->preDefErrNoOfErrors = 0U;
    e070:	693b      	ldr	r3, [r7, #16]
    e072:	2200      	movs	r2, #0
    e074:	725a      	strb	r2, [r3, #9]
    e076:	e004      	b.n	e082 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
            }
            else{
                ret = CO_SDO_AB_INVALID_VALUE;
    e078:	4b06      	ldr	r3, [pc, #24]	; (e094 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x84>)
    e07a:	617b      	str	r3, [r7, #20]
    e07c:	e001      	b.n	e082 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
            }
        }
        else{
            ret = CO_SDO_AB_READONLY;
    e07e:	4b06      	ldr	r3, [pc, #24]	; (e098 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x88>)
    e080:	617b      	str	r3, [r7, #20]
        }
    }

    return ret;
    e082:	697b      	ldr	r3, [r7, #20]
}
    e084:	4618      	mov	r0, r3
    e086:	371c      	adds	r7, #28
    e088:	46bd      	mov	sp, r7
    e08a:	bc80      	pop	{r7}
    e08c:	4770      	bx	lr
    e08e:	bf00      	nop
    e090:	08000024 	.word	0x08000024
    e094:	06090030 	.word	0x06090030
    e098:	06010002 	.word	0x06010002

0000e09c <_ZL11CO_ODF_1014P12CO_ODF_arg_t>:
 * Function for accessing _COB ID EMCY_ (index 0x1014) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */

static  CO_SDO_abortCode_t CO_ODF_1014(CO_ODF_arg_t *ODF_arg){
    e09c:	b580      	push	{r7, lr}
    e09e:	b086      	sub	sp, #24
    e0a0:	af00      	add	r7, sp, #0
    e0a2:	6078      	str	r0, [r7, #4]
    uint8_t *nodeId;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
    e0a4:	2300      	movs	r3, #0
    e0a6:	617b      	str	r3, [r7, #20]
    nodeId = (uint8_t*) ODF_arg->object;
    e0a8:	687b      	ldr	r3, [r7, #4]
    e0aa:	681b      	ldr	r3, [r3, #0]
    e0ac:	613b      	str	r3, [r7, #16]
    value =ptrCOEMClass->CO_getUint32(ODF_arg->data);
    e0ae:	4b10      	ldr	r3, [pc, #64]	; (e0f0 <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x54>)
    e0b0:	681b      	ldr	r3, [r3, #0]
    e0b2:	461a      	mov	r2, r3
    e0b4:	687b      	ldr	r3, [r7, #4]
    e0b6:	685b      	ldr	r3, [r3, #4]
    e0b8:	4619      	mov	r1, r3
    e0ba:	4610      	mov	r0, r2
    e0bc:	4b0d      	ldr	r3, [pc, #52]	; (e0f4 <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x58>)
    e0be:	4798      	blx	r3
    e0c0:	60f8      	str	r0, [r7, #12]

    /* add nodeId to the value */
    if(ODF_arg->reading){
    e0c2:	687b      	ldr	r3, [r7, #4]
    e0c4:	7f5b      	ldrb	r3, [r3, #29]
    e0c6:	2b00      	cmp	r3, #0
    e0c8:	d00c      	beq.n	e0e4 <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x48>
        ptrCOEMClass->CO_setUint32(ODF_arg->data, value + *nodeId);
    e0ca:	4b09      	ldr	r3, [pc, #36]	; (e0f0 <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x54>)
    e0cc:	681b      	ldr	r3, [r3, #0]
    e0ce:	4618      	mov	r0, r3
    e0d0:	687b      	ldr	r3, [r7, #4]
    e0d2:	6859      	ldr	r1, [r3, #4]
    e0d4:	693b      	ldr	r3, [r7, #16]
    e0d6:	781b      	ldrb	r3, [r3, #0]
    e0d8:	461a      	mov	r2, r3
    e0da:	68fb      	ldr	r3, [r7, #12]
    e0dc:	4413      	add	r3, r2
    e0de:	461a      	mov	r2, r3
    e0e0:	4b05      	ldr	r3, [pc, #20]	; (e0f8 <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x5c>)
    e0e2:	4798      	blx	r3
    }

    return ret;
    e0e4:	697b      	ldr	r3, [r7, #20]
}
    e0e6:	4618      	mov	r0, r3
    e0e8:	3718      	adds	r7, #24
    e0ea:	46bd      	mov	sp, r7
    e0ec:	bd80      	pop	{r7, pc}
    e0ee:	bf00      	nop
    e0f0:	200019b8 	.word	0x200019b8
    e0f4:	000104d1 	.word	0x000104d1
    e0f8:	00010505 	.word	0x00010505

0000e0fc <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm>:
        uint32_t               *preDefErr,
        uint8_t                 preDefErrSize,
        CO_CANmodule_t         *CANdev,
        uint32_t                CANdevTxIdx,
        uint32_t                CANidTxEM)
{
    e0fc:	b590      	push	{r4, r7, lr}
    e0fe:	b089      	sub	sp, #36	; 0x24
    e100:	af02      	add	r7, sp, #8
    e102:	60f8      	str	r0, [r7, #12]
    e104:	60b9      	str	r1, [r7, #8]
    e106:	607a      	str	r2, [r7, #4]
    e108:	603b      	str	r3, [r7, #0]
    uint8_t i;

    /* verify arguments */
    if(em==NULL || emPr==NULL || SDO==NULL || errorStatusBits==NULL ||
    e10a:	68bb      	ldr	r3, [r7, #8]
    e10c:	2b00      	cmp	r3, #0
    e10e:	d015      	beq.n	e13c <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
    e110:	687b      	ldr	r3, [r7, #4]
    e112:	2b00      	cmp	r3, #0
    e114:	d012      	beq.n	e13c <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
    e116:	683b      	ldr	r3, [r7, #0]
    e118:	2b00      	cmp	r3, #0
    e11a:	d00f      	beq.n	e13c <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
    e11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e11e:	2b00      	cmp	r3, #0
    e120:	d00c      	beq.n	e13c <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
    e122:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    e126:	2b05      	cmp	r3, #5
    e128:	d908      	bls.n	e13c <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
        errorStatusBitsSize<6U || errorRegister==NULL || preDefErr==NULL || CANdev==NULL){
    e12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e12c:	2b00      	cmp	r3, #0
    e12e:	d005      	beq.n	e13c <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
    e130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e132:	2b00      	cmp	r3, #0
    e134:	d002      	beq.n	e13c <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
    e136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e138:	2b00      	cmp	r3, #0
    e13a:	d102      	bne.n	e142 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x46>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    e13c:	f04f 33ff 	mov.w	r3, #4294967295
    e140:	e072      	b.n	e228 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x12c>
    }

    /* Configure object variables */
    em->errorStatusBits         = errorStatusBits;
    e142:	68bb      	ldr	r3, [r7, #8]
    e144:	6aba      	ldr	r2, [r7, #40]	; 0x28
    e146:	601a      	str	r2, [r3, #0]
    em->errorStatusBitsSize     = errorStatusBitsSize;
    e148:	68bb      	ldr	r3, [r7, #8]
    e14a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
    e14e:	711a      	strb	r2, [r3, #4]
    em->bufEnd                  = em->buf + (CO_EM_INTERNAL_BUFFER_SIZE * 8);
    e150:	68bb      	ldr	r3, [r7, #8]
    e152:	3305      	adds	r3, #5
    e154:	f103 0250 	add.w	r2, r3, #80	; 0x50
    e158:	68bb      	ldr	r3, [r7, #8]
    e15a:	659a      	str	r2, [r3, #88]	; 0x58
    em->bufWritePtr             = em->buf;
    e15c:	68bb      	ldr	r3, [r7, #8]
    e15e:	1d5a      	adds	r2, r3, #5
    e160:	68bb      	ldr	r3, [r7, #8]
    e162:	65da      	str	r2, [r3, #92]	; 0x5c
    em->bufReadPtr              = em->buf;
    e164:	68bb      	ldr	r3, [r7, #8]
    e166:	1d5a      	adds	r2, r3, #5
    e168:	68bb      	ldr	r3, [r7, #8]
    e16a:	661a      	str	r2, [r3, #96]	; 0x60
    em->bufFull                 = 0U;
    e16c:	68bb      	ldr	r3, [r7, #8]
    e16e:	2200      	movs	r2, #0
    e170:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    em->wrongErrorReport        = 0U;
    e174:	68bb      	ldr	r3, [r7, #8]
    e176:	2200      	movs	r2, #0
    e178:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    em->handler            = NULL;
    e17c:	68bb      	ldr	r3, [r7, #8]
    e17e:	2200      	movs	r2, #0
    e180:	669a      	str	r2, [r3, #104]	; 0x68
    emPr->em                    = em;
    e182:	687b      	ldr	r3, [r7, #4]
    e184:	68ba      	ldr	r2, [r7, #8]
    e186:	611a      	str	r2, [r3, #16]
    emPr->errorRegister         = errorRegister;
    e188:	687b      	ldr	r3, [r7, #4]
    e18a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    e18c:	601a      	str	r2, [r3, #0]
    emPr->preDefErr             = preDefErr;
    e18e:	687b      	ldr	r3, [r7, #4]
    e190:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    e192:	605a      	str	r2, [r3, #4]
    emPr->preDefErrSize         = preDefErrSize;
    e194:	687b      	ldr	r3, [r7, #4]
    e196:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
    e19a:	721a      	strb	r2, [r3, #8]
    emPr->preDefErrNoOfErrors   = 0U;
    e19c:	687b      	ldr	r3, [r7, #4]
    e19e:	2200      	movs	r2, #0
    e1a0:	725a      	strb	r2, [r3, #9]
    emPr->inhibitEmTimer        = 0U;
    e1a2:	687b      	ldr	r3, [r7, #4]
    e1a4:	2200      	movs	r2, #0
    e1a6:	60da      	str	r2, [r3, #12]
 
    /* clear error status bits */
    for(i=0U; i<errorStatusBitsSize; i++){
    e1a8:	2300      	movs	r3, #0
    e1aa:	75fb      	strb	r3, [r7, #23]
    e1ac:	7dfa      	ldrb	r2, [r7, #23]
    e1ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    e1b2:	429a      	cmp	r2, r3
    e1b4:	da09      	bge.n	e1ca <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0xce>
        em->errorStatusBits[i] = 0U;
    e1b6:	68bb      	ldr	r3, [r7, #8]
    e1b8:	681a      	ldr	r2, [r3, #0]
    e1ba:	7dfb      	ldrb	r3, [r7, #23]
    e1bc:	4413      	add	r3, r2
    e1be:	2200      	movs	r2, #0
    e1c0:	701a      	strb	r2, [r3, #0]
    for(i=0U; i<errorStatusBitsSize; i++){
    e1c2:	7dfb      	ldrb	r3, [r7, #23]
    e1c4:	3301      	adds	r3, #1
    e1c6:	75fb      	strb	r3, [r7, #23]
    e1c8:	e7f0      	b.n	e1ac <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0xb0>
    }

    /* Configure Object dictionary entry at index 0x1003 and 0x1014 */
    CO_OD_configure( OD_H1003_PREDEF_ERR_FIELD,CO_ODF_1003, (void*)emPr, 0, 0U);
    e1ca:	68f8      	ldr	r0, [r7, #12]
    e1cc:	2300      	movs	r3, #0
    e1ce:	9301      	str	r3, [sp, #4]
    e1d0:	2300      	movs	r3, #0
    e1d2:	9300      	str	r3, [sp, #0]
    e1d4:	687b      	ldr	r3, [r7, #4]
    e1d6:	4a16      	ldr	r2, [pc, #88]	; (e230 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x134>)
    e1d8:	f241 0103 	movw	r1, #4099	; 0x1003
    e1dc:	4c15      	ldr	r4, [pc, #84]	; (e234 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x138>)
    e1de:	47a0      	blx	r4
    CO_OD_configure( OD_H1014_COBID_EMERGENCY,CO_ODF_1014, (void*)&SDO->nodeId, 0, 0U);
    e1e0:	68f8      	ldr	r0, [r7, #12]
    e1e2:	683b      	ldr	r3, [r7, #0]
    e1e4:	f103 0268 	add.w	r2, r3, #104	; 0x68
    e1e8:	2300      	movs	r3, #0
    e1ea:	9301      	str	r3, [sp, #4]
    e1ec:	2300      	movs	r3, #0
    e1ee:	9300      	str	r3, [sp, #0]
    e1f0:	4613      	mov	r3, r2
    e1f2:	4a11      	ldr	r2, [pc, #68]	; (e238 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x13c>)
    e1f4:	f241 0114 	movw	r1, #4116	; 0x1014
    e1f8:	4c0e      	ldr	r4, [pc, #56]	; (e234 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x138>)
    e1fa:	47a0      	blx	r4

    /* configure emergency message CAN transmission */
    emPr->CANdev = CANdev;
    e1fc:	687b      	ldr	r3, [r7, #4]
    e1fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    e200:	615a      	str	r2, [r3, #20]
    emPr->CANdev->em = (void*)em; /* update pointer inside CAN device. */
    e202:	687b      	ldr	r3, [r7, #4]
    e204:	695b      	ldr	r3, [r3, #20]
    e206:	68ba      	ldr	r2, [r7, #8]
    e208:	621a      	str	r2, [r3, #32]
    emPr->CANtxBuff =ptrCODriverClass->CAN_Tx_BufferInit(
    e20a:	4b0c      	ldr	r3, [pc, #48]	; (e23c <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x140>)
    e20c:	6818      	ldr	r0, [r3, #0]
    e20e:	2300      	movs	r3, #0
    e210:	9301      	str	r3, [sp, #4]
    e212:	2308      	movs	r3, #8
    e214:	9300      	str	r3, [sp, #0]
    e216:	2300      	movs	r3, #0
    e218:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    e21a:	6c39      	ldr	r1, [r7, #64]	; 0x40
    e21c:	4c08      	ldr	r4, [pc, #32]	; (e240 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x144>)
    e21e:	47a0      	blx	r4
    e220:	4602      	mov	r2, r0
    e222:	687b      	ldr	r3, [r7, #4]
    e224:	619a      	str	r2, [r3, #24]
            CANidTxEM,          /* CAN identifier */
            0,                  /* rtr */
            8U,                  /* number of data bytes */
            0);                 /* synchronous message flag bit */

    return CO_ERROR_NO;
    e226:	2300      	movs	r3, #0
}
    e228:	4618      	mov	r0, r3
    e22a:	371c      	adds	r7, #28
    e22c:	46bd      	mov	sp, r7
    e22e:	bd90      	pop	{r4, r7, pc}
    e230:	0000e011 	.word	0x0000e011
    e234:	00010921 	.word	0x00010921
    e238:	0000e09d 	.word	0x0000e09d
    e23c:	200019b4 	.word	0x200019b4
    e240:	0000d901 	.word	0x0000d901

0000e244 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm>:
void CO_Emergency_Class::EM_process(
        CO_EMpr_t              *emPr,
        bool_t                  NMTisPreOrOperational,
        uint32_t                timeDifference_100us,
        uint32_t                emInhTime)
{
    e244:	b590      	push	{r4, r7, lr}
    e246:	b08b      	sub	sp, #44	; 0x2c
    e248:	af02      	add	r7, sp, #8
    e24a:	60f8      	str	r0, [r7, #12]
    e24c:	60b9      	str	r1, [r7, #8]
    e24e:	603b      	str	r3, [r7, #0]
    e250:	4613      	mov	r3, r2
    e252:	71fb      	strb	r3, [r7, #7]

    CO_EM_t *em = emPr->em;
    e254:	68bb      	ldr	r3, [r7, #8]
    e256:	691b      	ldr	r3, [r3, #16]
    e258:	61bb      	str	r3, [r7, #24]
    uint8_t errorRegister;

    /* verify errors from driver and other */
   ptrCODriverClass->CAN_VerifyErrors();
    e25a:	4b74      	ldr	r3, [pc, #464]	; (e42c <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1e8>)
    e25c:	681b      	ldr	r3, [r3, #0]
    e25e:	4618      	mov	r0, r3
    e260:	4b73      	ldr	r3, [pc, #460]	; (e430 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1ec>)
    e262:	4798      	blx	r3
    if(em->wrongErrorReport != 0U){
    e264:	69bb      	ldr	r3, [r7, #24]
    e266:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
    e26a:	2b00      	cmp	r3, #0
    e26c:	d00e      	beq.n	e28c <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x48>
        EM_ErrorReport(em, CO_EM_WRONG_ERROR_REPORT, CO_EMC_SOFTWARE_INTERNAL, (uint32_t)em->wrongErrorReport);
    e26e:	69bb      	ldr	r3, [r7, #24]
    e270:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
    e274:	9300      	str	r3, [sp, #0]
    e276:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
    e27a:	2228      	movs	r2, #40	; 0x28
    e27c:	69b9      	ldr	r1, [r7, #24]
    e27e:	68f8      	ldr	r0, [r7, #12]
    e280:	4c6c      	ldr	r4, [pc, #432]	; (e434 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1f0>)
    e282:	47a0      	blx	r4
        em->wrongErrorReport = 0U;
    e284:	69bb      	ldr	r3, [r7, #24]
    e286:	2200      	movs	r2, #0
    e288:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    }


    /* calculate Error register */
    errorRegister = 0U;
    e28c:	2300      	movs	r3, #0
    e28e:	77fb      	strb	r3, [r7, #31]
    /* generic error */
    if(em->errorStatusBits[5]){
    e290:	69bb      	ldr	r3, [r7, #24]
    e292:	681b      	ldr	r3, [r3, #0]
    e294:	3305      	adds	r3, #5
    e296:	781b      	ldrb	r3, [r3, #0]
    e298:	2b00      	cmp	r3, #0
    e29a:	d003      	beq.n	e2a4 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x60>
        errorRegister |= CO_ERR_REG_GENERIC_ERR;
    e29c:	7ffb      	ldrb	r3, [r7, #31]
    e29e:	f043 0301 	orr.w	r3, r3, #1
    e2a2:	77fb      	strb	r3, [r7, #31]
    }
    /* communication error (overrun, error state) */
    if(em->errorStatusBits[2] || em->errorStatusBits[3]){
    e2a4:	69bb      	ldr	r3, [r7, #24]
    e2a6:	681b      	ldr	r3, [r3, #0]
    e2a8:	3302      	adds	r3, #2
    e2aa:	781b      	ldrb	r3, [r3, #0]
    e2ac:	2b00      	cmp	r3, #0
    e2ae:	d105      	bne.n	e2bc <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x78>
    e2b0:	69bb      	ldr	r3, [r7, #24]
    e2b2:	681b      	ldr	r3, [r3, #0]
    e2b4:	3303      	adds	r3, #3
    e2b6:	781b      	ldrb	r3, [r3, #0]
    e2b8:	2b00      	cmp	r3, #0
    e2ba:	d003      	beq.n	e2c4 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x80>
        errorRegister |= CO_ERR_REG_COMM_ERR;
    e2bc:	7ffb      	ldrb	r3, [r7, #31]
    e2be:	f043 0310 	orr.w	r3, r3, #16
    e2c2:	77fb      	strb	r3, [r7, #31]
    }
    *emPr->errorRegister = (*emPr->errorRegister & 0xEEU) | errorRegister;
    e2c4:	68bb      	ldr	r3, [r7, #8]
    e2c6:	681b      	ldr	r3, [r3, #0]
    e2c8:	68ba      	ldr	r2, [r7, #8]
    e2ca:	6812      	ldr	r2, [r2, #0]
    e2cc:	7812      	ldrb	r2, [r2, #0]
    e2ce:	f022 0211 	bic.w	r2, r2, #17
    e2d2:	b2d1      	uxtb	r1, r2
    e2d4:	7ffa      	ldrb	r2, [r7, #31]
    e2d6:	430a      	orrs	r2, r1
    e2d8:	b2d2      	uxtb	r2, r2
    e2da:	701a      	strb	r2, [r3, #0]

    /* inhibit time */
    if(emPr->inhibitEmTimer < emInhTime){
    e2dc:	68bb      	ldr	r3, [r7, #8]
    e2de:	68da      	ldr	r2, [r3, #12]
    e2e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e2e2:	429a      	cmp	r2, r3
    e2e4:	d205      	bcs.n	e2f2 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0xae>
        emPr->inhibitEmTimer += timeDifference_100us;
    e2e6:	68bb      	ldr	r3, [r7, #8]
    e2e8:	68da      	ldr	r2, [r3, #12]
    e2ea:	683b      	ldr	r3, [r7, #0]
    e2ec:	441a      	add	r2, r3
    e2ee:	68bb      	ldr	r3, [r7, #8]
    e2f0:	60da      	str	r2, [r3, #12]
    }

    /* send Emergency message. */
    if(     NMTisPreOrOperational &&
            !emPr->CANtxBuff->bufferFull &&
            emPr->inhibitEmTimer >= emInhTime &&
    e2f2:	79fb      	ldrb	r3, [r7, #7]
    e2f4:	2b00      	cmp	r3, #0
    e2f6:	d017      	beq.n	e328 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0xe4>
            !emPr->CANtxBuff->bufferFull &&
    e2f8:	68bb      	ldr	r3, [r7, #8]
    e2fa:	699b      	ldr	r3, [r3, #24]
    e2fc:	7b5b      	ldrb	r3, [r3, #13]
    e2fe:	b2db      	uxtb	r3, r3
    if(     NMTisPreOrOperational &&
    e300:	2b00      	cmp	r3, #0
    e302:	d111      	bne.n	e328 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0xe4>
            emPr->inhibitEmTimer >= emInhTime &&
    e304:	68bb      	ldr	r3, [r7, #8]
    e306:	68da      	ldr	r2, [r3, #12]
            !emPr->CANtxBuff->bufferFull &&
    e308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e30a:	429a      	cmp	r2, r3
    e30c:	d30c      	bcc.n	e328 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0xe4>
            (em->bufReadPtr != em->bufWritePtr || em->bufFull))
    e30e:	69bb      	ldr	r3, [r7, #24]
    e310:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    e312:	69bb      	ldr	r3, [r7, #24]
    e314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
            emPr->inhibitEmTimer >= emInhTime &&
    e316:	429a      	cmp	r2, r3
    e318:	d104      	bne.n	e324 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0xe0>
            (em->bufReadPtr != em->bufWritePtr || em->bufFull))
    e31a:	69bb      	ldr	r3, [r7, #24]
    e31c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
    e320:	2b00      	cmp	r3, #0
    e322:	d001      	beq.n	e328 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0xe4>
            emPr->inhibitEmTimer >= emInhTime &&
    e324:	2301      	movs	r3, #1
    e326:	e000      	b.n	e32a <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0xe6>
    e328:	2300      	movs	r3, #0
    if(     NMTisPreOrOperational &&
    e32a:	2b00      	cmp	r3, #0
    e32c:	d079      	beq.n	e422 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1de>
    {
        uint32_t preDEF;    /* preDefinedErrorField */
        
        /* add error register */
        em->bufReadPtr[2] = *emPr->errorRegister;
    e32e:	69bb      	ldr	r3, [r7, #24]
    e330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    e332:	3302      	adds	r3, #2
    e334:	68ba      	ldr	r2, [r7, #8]
    e336:	6812      	ldr	r2, [r2, #0]
    e338:	7812      	ldrb	r2, [r2, #0]
    e33a:	701a      	strb	r2, [r3, #0]

        /* copy data to CAN emergency message */
        CO_memcpy(emPr->CANtxBuff->data, em->bufReadPtr, 8U);
    e33c:	68f8      	ldr	r0, [r7, #12]
    e33e:	68bb      	ldr	r3, [r7, #8]
    e340:	699b      	ldr	r3, [r3, #24]
    e342:	1d59      	adds	r1, r3, #5
    e344:	69bb      	ldr	r3, [r7, #24]
    e346:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    e348:	2308      	movs	r3, #8
    e34a:	4c3b      	ldr	r4, [pc, #236]	; (e438 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1f4>)
    e34c:	47a0      	blx	r4
        CO_memcpy((uint8_t*)&preDEF, em->bufReadPtr, 4U);
    e34e:	68f8      	ldr	r0, [r7, #12]
    e350:	69bb      	ldr	r3, [r7, #24]
    e352:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    e354:	f107 0114 	add.w	r1, r7, #20
    e358:	2304      	movs	r3, #4
    e35a:	4c37      	ldr	r4, [pc, #220]	; (e438 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1f4>)
    e35c:	47a0      	blx	r4
        em->bufReadPtr += 8;
    e35e:	69bb      	ldr	r3, [r7, #24]
    e360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    e362:	f103 0208 	add.w	r2, r3, #8
    e366:	69bb      	ldr	r3, [r7, #24]
    e368:	661a      	str	r2, [r3, #96]	; 0x60

        /* Update read buffer pointer and reset inhibit timer */
        if(em->bufReadPtr == em->bufEnd){
    e36a:	69bb      	ldr	r3, [r7, #24]
    e36c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    e36e:	69bb      	ldr	r3, [r7, #24]
    e370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    e372:	429a      	cmp	r2, r3
    e374:	d103      	bne.n	e37e <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x13a>
            em->bufReadPtr = em->buf;
    e376:	69bb      	ldr	r3, [r7, #24]
    e378:	1d5a      	adds	r2, r3, #5
    e37a:	69bb      	ldr	r3, [r7, #24]
    e37c:	661a      	str	r2, [r3, #96]	; 0x60
        }
        emPr->inhibitEmTimer = 0U;
    e37e:	68bb      	ldr	r3, [r7, #8]
    e380:	2200      	movs	r2, #0
    e382:	60da      	str	r2, [r3, #12]

        /* verify message buffer overflow, then clear full flag */
        if(em->bufFull == 2U){
    e384:	69bb      	ldr	r3, [r7, #24]
    e386:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
    e38a:	2b02      	cmp	r3, #2
    e38c:	d10d      	bne.n	e3aa <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x166>
            em->bufFull = 0U;    /* will be updated below */
    e38e:	69bb      	ldr	r3, [r7, #24]
    e390:	2200      	movs	r2, #0
    e392:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
            EM_ErrorReport(em, CO_EM_EMERGENCY_BUFFER_FULL, CO_EMC_GENERIC, 0U);
    e396:	2300      	movs	r3, #0
    e398:	9300      	str	r3, [sp, #0]
    e39a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    e39e:	2220      	movs	r2, #32
    e3a0:	69b9      	ldr	r1, [r7, #24]
    e3a2:	68f8      	ldr	r0, [r7, #12]
    e3a4:	4c23      	ldr	r4, [pc, #140]	; (e434 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1f0>)
    e3a6:	47a0      	blx	r4
    e3a8:	e003      	b.n	e3b2 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x16e>
        }
        else{
            em->bufFull = 0;
    e3aa:	69bb      	ldr	r3, [r7, #24]
    e3ac:	2200      	movs	r2, #0
    e3ae:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        }

        /* write to 'pre-defined error field' (object dictionary, index 0x1003) */
        if(emPr->preDefErr){
    e3b2:	68bb      	ldr	r3, [r7, #8]
    e3b4:	685b      	ldr	r3, [r3, #4]
    e3b6:	2b00      	cmp	r3, #0
    e3b8:	d02a      	beq.n	e410 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1cc>
            uint8_t i;

            if(emPr->preDefErrNoOfErrors < emPr->preDefErrSize)
    e3ba:	68bb      	ldr	r3, [r7, #8]
    e3bc:	7a5b      	ldrb	r3, [r3, #9]
    e3be:	461a      	mov	r2, r3
    e3c0:	68bb      	ldr	r3, [r7, #8]
    e3c2:	7a1b      	ldrb	r3, [r3, #8]
    e3c4:	429a      	cmp	r2, r3
    e3c6:	da05      	bge.n	e3d4 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x190>
                emPr->preDefErrNoOfErrors++;
    e3c8:	68bb      	ldr	r3, [r7, #8]
    e3ca:	7a5b      	ldrb	r3, [r3, #9]
    e3cc:	3301      	adds	r3, #1
    e3ce:	b2da      	uxtb	r2, r3
    e3d0:	68bb      	ldr	r3, [r7, #8]
    e3d2:	725a      	strb	r2, [r3, #9]
            for(i=emPr->preDefErrNoOfErrors-1; i>0; i--)
    e3d4:	68bb      	ldr	r3, [r7, #8]
    e3d6:	7a5b      	ldrb	r3, [r3, #9]
    e3d8:	3b01      	subs	r3, #1
    e3da:	77bb      	strb	r3, [r7, #30]
    e3dc:	7fbb      	ldrb	r3, [r7, #30]
    e3de:	2b00      	cmp	r3, #0
    e3e0:	dd12      	ble.n	e408 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1c4>
                emPr->preDefErr[i] = emPr->preDefErr[i-1];
    e3e2:	68bb      	ldr	r3, [r7, #8]
    e3e4:	685a      	ldr	r2, [r3, #4]
    e3e6:	7fbb      	ldrb	r3, [r7, #30]
    e3e8:	009b      	lsls	r3, r3, #2
    e3ea:	441a      	add	r2, r3
    e3ec:	68bb      	ldr	r3, [r7, #8]
    e3ee:	6859      	ldr	r1, [r3, #4]
    e3f0:	7fbb      	ldrb	r3, [r7, #30]
    e3f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    e3f6:	3b01      	subs	r3, #1
    e3f8:	009b      	lsls	r3, r3, #2
    e3fa:	440b      	add	r3, r1
    e3fc:	681b      	ldr	r3, [r3, #0]
    e3fe:	6013      	str	r3, [r2, #0]
            for(i=emPr->preDefErrNoOfErrors-1; i>0; i--)
    e400:	7fbb      	ldrb	r3, [r7, #30]
    e402:	3b01      	subs	r3, #1
    e404:	77bb      	strb	r3, [r7, #30]
    e406:	e7e9      	b.n	e3dc <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x198>
            emPr->preDefErr[0] = preDEF;
    e408:	68bb      	ldr	r3, [r7, #8]
    e40a:	685b      	ldr	r3, [r3, #4]
    e40c:	697a      	ldr	r2, [r7, #20]
    e40e:	601a      	str	r2, [r3, #0]
        }

        /* send CAN message */
        ptrCODriverClass->CAN_Send(emPr->CANtxBuff);
    e410:	4b06      	ldr	r3, [pc, #24]	; (e42c <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1e8>)
    e412:	681a      	ldr	r2, [r3, #0]
    e414:	68bb      	ldr	r3, [r7, #8]
    e416:	699b      	ldr	r3, [r3, #24]
    e418:	4619      	mov	r1, r3
    e41a:	4610      	mov	r0, r2
    e41c:	4b07      	ldr	r3, [pc, #28]	; (e43c <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1f8>)
    e41e:	4798      	blx	r3
    }

    return;
    e420:	bf00      	nop
    e422:	bf00      	nop
}
    e424:	3724      	adds	r7, #36	; 0x24
    e426:	46bd      	mov	sp, r7
    e428:	bd90      	pop	{r4, r7, pc}
    e42a:	bf00      	nop
    e42c:	200019b4 	.word	0x200019b4
    e430:	0000dc05 	.word	0x0000dc05
    e434:	0000e441 	.word	0x0000e441
    e438:	00010495 	.word	0x00010495
    e43c:	0000d9ad 	.word	0x0000d9ad

0000e440 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm>:


/******************************************************************************/
void CO_Emergency_Class::EM_ErrorReport(CO_EM_t *em, const uint8_t errorBit, const uint32_t errorCode, const uint32_t infoCode){
    e440:	b590      	push	{r4, r7, lr}
    e442:	b08d      	sub	sp, #52	; 0x34
    e444:	af00      	add	r7, sp, #0
    e446:	60f8      	str	r0, [r7, #12]
    e448:	60b9      	str	r1, [r7, #8]
    e44a:	603b      	str	r3, [r7, #0]
    e44c:	4613      	mov	r3, r2
    e44e:	71fb      	strb	r3, [r7, #7]
    uint8_t index = errorBit >> 3;
    e450:	79fb      	ldrb	r3, [r7, #7]
    e452:	10db      	asrs	r3, r3, #3
    e454:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    uint8_t bitmask = 1 << (errorBit & 0x7);
    e458:	79fb      	ldrb	r3, [r7, #7]
    e45a:	f003 0307 	and.w	r3, r3, #7
    e45e:	2201      	movs	r2, #1
    e460:	fa02 f303 	lsl.w	r3, r2, r3
    e464:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    uint8_t *errorStatusBits = 0;
    e468:	2300      	movs	r3, #0
    e46a:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t sendEmergency = true;
    e46c:	2301      	movs	r3, #1
    e46e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if(em == NULL){
    e472:	68bb      	ldr	r3, [r7, #8]
    e474:	2b00      	cmp	r3, #0
    e476:	d103      	bne.n	e480 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x40>
        sendEmergency = false;
    e478:	2300      	movs	r3, #0
    e47a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    e47e:	e01e      	b.n	e4be <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x7e>
    }
    else if(index >= em->errorStatusBitsSize){
    e480:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
    e484:	68ba      	ldr	r2, [r7, #8]
    e486:	7912      	ldrb	r2, [r2, #4]
    e488:	4293      	cmp	r3, r2
    e48a:	db07      	blt.n	e49c <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x5c>
        /* if errorBit value not supported, send emergency 'CO_EM_WRONG_ERROR_REPORT' */
        em->wrongErrorReport = errorBit;
    e48c:	68bb      	ldr	r3, [r7, #8]
    e48e:	79fa      	ldrb	r2, [r7, #7]
    e490:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        sendEmergency = false;
    e494:	2300      	movs	r3, #0
    e496:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    e49a:	e010      	b.n	e4be <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x7e>
    }
    else{
        errorStatusBits = &em->errorStatusBits[index];
    e49c:	68bb      	ldr	r3, [r7, #8]
    e49e:	681a      	ldr	r2, [r3, #0]
    e4a0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
    e4a4:	4413      	add	r3, r2
    e4a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* if error was already reported, do nothing */
        if((*errorStatusBits & bitmask) != 0){
    e4a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e4aa:	781a      	ldrb	r2, [r3, #0]
    e4ac:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
    e4b0:	4013      	ands	r3, r2
    e4b2:	b2db      	uxtb	r3, r3
    e4b4:	2b00      	cmp	r3, #0
    e4b6:	d002      	beq.n	e4be <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x7e>
            sendEmergency = false;
    e4b8:	2300      	movs	r3, #0
    e4ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }
    }

    if(sendEmergency){
    e4be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    e4c2:	2b00      	cmp	r3, #0
    e4c4:	d05c      	beq.n	e580 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x140>
        /* set error bit */
        if(errorBit){
    e4c6:	79fb      	ldrb	r3, [r7, #7]
    e4c8:	2b00      	cmp	r3, #0
    e4ca:	d007      	beq.n	e4dc <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x9c>
            /* any error except NO_ERROR */
            *errorStatusBits |= bitmask;
    e4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e4ce:	781a      	ldrb	r2, [r3, #0]
    e4d0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
    e4d4:	4313      	orrs	r3, r2
    e4d6:	b2da      	uxtb	r2, r3
    e4d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e4da:	701a      	strb	r2, [r3, #0]
        }

        /* verify buffer full, set overflow */
        if(em->bufFull){
    e4dc:	68bb      	ldr	r3, [r7, #8]
    e4de:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
    e4e2:	2b00      	cmp	r3, #0
    e4e4:	d004      	beq.n	e4f0 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0xb0>
            em->bufFull = 2;
    e4e6:	68bb      	ldr	r3, [r7, #8]
    e4e8:	2202      	movs	r2, #2
    e4ea:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
            if(em->handler != NULL) {
                em->handler();
            }
        }
    }
}
    e4ee:	e047      	b.n	e580 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x140>
            CO_memcpySwap2(&bufCopy[0], &errorCode);
    e4f0:	68fb      	ldr	r3, [r7, #12]
    e4f2:	463a      	mov	r2, r7
    e4f4:	f107 0118 	add.w	r1, r7, #24
    e4f8:	4618      	mov	r0, r3
    e4fa:	4b23      	ldr	r3, [pc, #140]	; (e588 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x148>)
    e4fc:	4798      	blx	r3
            bufCopy[2] = 0; /* error register will be set later */
    e4fe:	2300      	movs	r3, #0
    e500:	76bb      	strb	r3, [r7, #26]
            bufCopy[3] = errorBit;
    e502:	79fb      	ldrb	r3, [r7, #7]
    e504:	76fb      	strb	r3, [r7, #27]
            CO_memcpySwap4(&bufCopy[4], &infoCode);
    e506:	68f8      	ldr	r0, [r7, #12]
    e508:	f107 0318 	add.w	r3, r7, #24
    e50c:	3304      	adds	r3, #4
    e50e:	f107 0240 	add.w	r2, r7, #64	; 0x40
    e512:	4619      	mov	r1, r3
    e514:	4b1d      	ldr	r3, [pc, #116]	; (e58c <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x14c>)
    e516:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    e518:	f3ef 8310 	mrs	r3, PRIMASK
    e51c:	617b      	str	r3, [r7, #20]
  return(result);
    e51e:	697b      	ldr	r3, [r7, #20]
            CO_LOCK_EMCY();
    e520:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
    e522:	b672      	cpsid	i
            CO_memcpy(em->bufWritePtr, &bufCopy[0], 8);
    e524:	68f8      	ldr	r0, [r7, #12]
    e526:	68bb      	ldr	r3, [r7, #8]
    e528:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
    e52a:	f107 0218 	add.w	r2, r7, #24
    e52e:	2308      	movs	r3, #8
    e530:	4c17      	ldr	r4, [pc, #92]	; (e590 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x150>)
    e532:	47a0      	blx	r4
            em->bufWritePtr += 8;
    e534:	68bb      	ldr	r3, [r7, #8]
    e536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    e538:	f103 0208 	add.w	r2, r3, #8
    e53c:	68bb      	ldr	r3, [r7, #8]
    e53e:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufEnd) em->bufWritePtr = em->buf;
    e540:	68bb      	ldr	r3, [r7, #8]
    e542:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    e544:	68bb      	ldr	r3, [r7, #8]
    e546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    e548:	429a      	cmp	r2, r3
    e54a:	d103      	bne.n	e554 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x114>
    e54c:	68bb      	ldr	r3, [r7, #8]
    e54e:	1d5a      	adds	r2, r3, #5
    e550:	68bb      	ldr	r3, [r7, #8]
    e552:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufReadPtr) em->bufFull = 1;
    e554:	68bb      	ldr	r3, [r7, #8]
    e556:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    e558:	68bb      	ldr	r3, [r7, #8]
    e55a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    e55c:	429a      	cmp	r2, r3
    e55e:	d103      	bne.n	e568 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x128>
    e560:	68bb      	ldr	r3, [r7, #8]
    e562:	2201      	movs	r2, #1
    e564:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    e568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e56a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    e56c:	6a3b      	ldr	r3, [r7, #32]
    e56e:	f383 8810 	msr	PRIMASK, r3
            if(em->handler != NULL) {
    e572:	68bb      	ldr	r3, [r7, #8]
    e574:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    e576:	2b00      	cmp	r3, #0
    e578:	d002      	beq.n	e580 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x140>
                em->handler();
    e57a:	68bb      	ldr	r3, [r7, #8]
    e57c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    e57e:	4798      	blx	r3
}
    e580:	bf00      	nop
    e582:	3734      	adds	r7, #52	; 0x34
    e584:	46bd      	mov	sp, r7
    e586:	bd90      	pop	{r4, r7, pc}
    e588:	0001053d 	.word	0x0001053d
    e58c:	0001056d 	.word	0x0001056d
    e590:	00010495 	.word	0x00010495

0000e594 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm>:


/******************************************************************************/
void CO_Emergency_Class::EM_ErrorReset(CO_EM_t *em, const uint8_t errorBit, const uint32_t infoCode){
    e594:	b590      	push	{r4, r7, lr}
    e596:	b08d      	sub	sp, #52	; 0x34
    e598:	af00      	add	r7, sp, #0
    e59a:	60f8      	str	r0, [r7, #12]
    e59c:	60b9      	str	r1, [r7, #8]
    e59e:	603b      	str	r3, [r7, #0]
    e5a0:	4613      	mov	r3, r2
    e5a2:	71fb      	strb	r3, [r7, #7]
    uint8_t index = errorBit >> 3;
    e5a4:	79fb      	ldrb	r3, [r7, #7]
    e5a6:	10db      	asrs	r3, r3, #3
    e5a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    uint8_t bitmask = 1 << (errorBit & 0x7);
    e5ac:	79fb      	ldrb	r3, [r7, #7]
    e5ae:	f003 0307 	and.w	r3, r3, #7
    e5b2:	2201      	movs	r2, #1
    e5b4:	fa02 f303 	lsl.w	r3, r2, r3
    e5b8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    uint8_t *errorStatusBits = 0;
    e5bc:	2300      	movs	r3, #0
    e5be:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t sendEmergency = true;
    e5c0:	2301      	movs	r3, #1
    e5c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if(em == NULL){
    e5c6:	68bb      	ldr	r3, [r7, #8]
    e5c8:	2b00      	cmp	r3, #0
    e5ca:	d103      	bne.n	e5d4 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x40>
        sendEmergency = false;
    e5cc:	2300      	movs	r3, #0
    e5ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    e5d2:	e01e      	b.n	e612 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x7e>
    }
    else if(index >= em->errorStatusBitsSize){
    e5d4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
    e5d8:	68ba      	ldr	r2, [r7, #8]
    e5da:	7912      	ldrb	r2, [r2, #4]
    e5dc:	4293      	cmp	r3, r2
    e5de:	db07      	blt.n	e5f0 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x5c>
        /* if errorBit value not supported, send emergency 'CO_EM_WRONG_ERROR_REPORT' */
        em->wrongErrorReport = errorBit;
    e5e0:	68bb      	ldr	r3, [r7, #8]
    e5e2:	79fa      	ldrb	r2, [r7, #7]
    e5e4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        sendEmergency = false;
    e5e8:	2300      	movs	r3, #0
    e5ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    e5ee:	e010      	b.n	e612 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x7e>
    }
    else{
        errorStatusBits = &em->errorStatusBits[index];
    e5f0:	68bb      	ldr	r3, [r7, #8]
    e5f2:	681a      	ldr	r2, [r3, #0]
    e5f4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
    e5f8:	4413      	add	r3, r2
    e5fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* if error was allready cleared, do nothing */
        if((*errorStatusBits & bitmask) == 0){
    e5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e5fe:	781a      	ldrb	r2, [r3, #0]
    e600:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
    e604:	4013      	ands	r3, r2
    e606:	b2db      	uxtb	r3, r3
    e608:	2b00      	cmp	r3, #0
    e60a:	d102      	bne.n	e612 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x7e>
            sendEmergency = false;
    e60c:	2300      	movs	r3, #0
    e60e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }
    }

    if(sendEmergency){
    e612:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    e616:	2b00      	cmp	r3, #0
    e618:	d059      	beq.n	e6ce <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x13a>
        /* erase error bit */
        *errorStatusBits &= ~bitmask;
    e61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e61c:	781b      	ldrb	r3, [r3, #0]
    e61e:	b25a      	sxtb	r2, r3
    e620:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
    e624:	43db      	mvns	r3, r3
    e626:	b25b      	sxtb	r3, r3
    e628:	4013      	ands	r3, r2
    e62a:	b25b      	sxtb	r3, r3
    e62c:	b2da      	uxtb	r2, r3
    e62e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e630:	701a      	strb	r2, [r3, #0]

        /* verify buffer full */
        if(em->bufFull){
    e632:	68bb      	ldr	r3, [r7, #8]
    e634:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
    e638:	2b00      	cmp	r3, #0
    e63a:	d004      	beq.n	e646 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0xb2>
            em->bufFull = 2;
    e63c:	68bb      	ldr	r3, [r7, #8]
    e63e:	2202      	movs	r2, #2
    e640:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
            if(em->handler != NULL) {
                em->handler();
            }
        }
    }
}
    e644:	e043      	b.n	e6ce <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x13a>
            bufCopy[0] = 0;
    e646:	2300      	movs	r3, #0
    e648:	763b      	strb	r3, [r7, #24]
            bufCopy[1] = 0;
    e64a:	2300      	movs	r3, #0
    e64c:	767b      	strb	r3, [r7, #25]
            bufCopy[2] = 0; /* error register will be set later */
    e64e:	2300      	movs	r3, #0
    e650:	76bb      	strb	r3, [r7, #26]
            bufCopy[3] = errorBit;
    e652:	79fb      	ldrb	r3, [r7, #7]
    e654:	76fb      	strb	r3, [r7, #27]
            CO_memcpySwap4(&bufCopy[4], &infoCode);
    e656:	68f8      	ldr	r0, [r7, #12]
    e658:	463a      	mov	r2, r7
    e65a:	f107 0318 	add.w	r3, r7, #24
    e65e:	3304      	adds	r3, #4
    e660:	4619      	mov	r1, r3
    e662:	4b1d      	ldr	r3, [pc, #116]	; (e6d8 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x144>)
    e664:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    e666:	f3ef 8310 	mrs	r3, PRIMASK
    e66a:	617b      	str	r3, [r7, #20]
  return(result);
    e66c:	697b      	ldr	r3, [r7, #20]
            CO_LOCK_EMCY();
    e66e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
    e670:	b672      	cpsid	i
            CO_memcpy(em->bufWritePtr, &bufCopy[0], 8);
    e672:	68f8      	ldr	r0, [r7, #12]
    e674:	68bb      	ldr	r3, [r7, #8]
    e676:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
    e678:	f107 0218 	add.w	r2, r7, #24
    e67c:	2308      	movs	r3, #8
    e67e:	4c17      	ldr	r4, [pc, #92]	; (e6dc <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x148>)
    e680:	47a0      	blx	r4
            em->bufWritePtr += 8;
    e682:	68bb      	ldr	r3, [r7, #8]
    e684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    e686:	f103 0208 	add.w	r2, r3, #8
    e68a:	68bb      	ldr	r3, [r7, #8]
    e68c:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufEnd) em->bufWritePtr = em->buf;
    e68e:	68bb      	ldr	r3, [r7, #8]
    e690:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    e692:	68bb      	ldr	r3, [r7, #8]
    e694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    e696:	429a      	cmp	r2, r3
    e698:	d103      	bne.n	e6a2 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x10e>
    e69a:	68bb      	ldr	r3, [r7, #8]
    e69c:	1d5a      	adds	r2, r3, #5
    e69e:	68bb      	ldr	r3, [r7, #8]
    e6a0:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufReadPtr) em->bufFull = 1;
    e6a2:	68bb      	ldr	r3, [r7, #8]
    e6a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    e6a6:	68bb      	ldr	r3, [r7, #8]
    e6a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    e6aa:	429a      	cmp	r2, r3
    e6ac:	d103      	bne.n	e6b6 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x122>
    e6ae:	68bb      	ldr	r3, [r7, #8]
    e6b0:	2201      	movs	r2, #1
    e6b2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    e6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e6b8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    e6ba:	6a3b      	ldr	r3, [r7, #32]
    e6bc:	f383 8810 	msr	PRIMASK, r3
            if(em->handler != NULL) {
    e6c0:	68bb      	ldr	r3, [r7, #8]
    e6c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    e6c4:	2b00      	cmp	r3, #0
    e6c6:	d002      	beq.n	e6ce <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x13a>
                em->handler();
    e6c8:	68bb      	ldr	r3, [r7, #8]
    e6ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    e6cc:	4798      	blx	r3
}
    e6ce:	bf00      	nop
    e6d0:	3734      	adds	r7, #52	; 0x34
    e6d2:	46bd      	mov	sp, r7
    e6d4:	bd90      	pop	{r4, r7, pc}
    e6d6:	bf00      	nop
    e6d8:	0001056d 	.word	0x0001056d
    e6dc:	00010495 	.word	0x00010495

0000e6e0 <_ZN18CO_Emergency_Class10EM_IsErrorEP7CO_EM_th>:


/******************************************************************************/
bool_t CO_Emergency_Class::EM_IsError(CO_EM_t *em, const uint8_t errorBit){
    e6e0:	b480      	push	{r7}
    e6e2:	b087      	sub	sp, #28
    e6e4:	af00      	add	r7, sp, #0
    e6e6:	60f8      	str	r0, [r7, #12]
    e6e8:	60b9      	str	r1, [r7, #8]
    e6ea:	4613      	mov	r3, r2
    e6ec:	71fb      	strb	r3, [r7, #7]
    uint8_t index = errorBit >> 3;
    e6ee:	79fb      	ldrb	r3, [r7, #7]
    e6f0:	10db      	asrs	r3, r3, #3
    e6f2:	75bb      	strb	r3, [r7, #22]
    uint8_t bitmask = 1 << (errorBit & 0x7);
    e6f4:	79fb      	ldrb	r3, [r7, #7]
    e6f6:	f003 0307 	and.w	r3, r3, #7
    e6fa:	2201      	movs	r2, #1
    e6fc:	fa02 f303 	lsl.w	r3, r2, r3
    e700:	757b      	strb	r3, [r7, #21]
    bool_t ret = false;
    e702:	2300      	movs	r3, #0
    e704:	75fb      	strb	r3, [r7, #23]

    if(em != NULL && index < em->errorStatusBitsSize){
    e706:	68bb      	ldr	r3, [r7, #8]
    e708:	2b00      	cmp	r3, #0
    e70a:	d010      	beq.n	e72e <_ZN18CO_Emergency_Class10EM_IsErrorEP7CO_EM_th+0x4e>
    e70c:	7dbb      	ldrb	r3, [r7, #22]
    e70e:	68ba      	ldr	r2, [r7, #8]
    e710:	7912      	ldrb	r2, [r2, #4]
    e712:	4293      	cmp	r3, r2
    e714:	da0b      	bge.n	e72e <_ZN18CO_Emergency_Class10EM_IsErrorEP7CO_EM_th+0x4e>
        if((em->errorStatusBits[index] & bitmask) != 0){
    e716:	68bb      	ldr	r3, [r7, #8]
    e718:	681a      	ldr	r2, [r3, #0]
    e71a:	7dbb      	ldrb	r3, [r7, #22]
    e71c:	4413      	add	r3, r2
    e71e:	781a      	ldrb	r2, [r3, #0]
    e720:	7d7b      	ldrb	r3, [r7, #21]
    e722:	4013      	ands	r3, r2
    e724:	b2db      	uxtb	r3, r3
    e726:	2b00      	cmp	r3, #0
    e728:	d001      	beq.n	e72e <_ZN18CO_Emergency_Class10EM_IsErrorEP7CO_EM_th+0x4e>
            ret = true;
    e72a:	2301      	movs	r3, #1
    e72c:	75fb      	strb	r3, [r7, #23]
        }
    }

    return ret;
    e72e:	7dfb      	ldrb	r3, [r7, #23]
    e730:	4618      	mov	r0, r3
    e732:	371c      	adds	r7, #28
    e734:	46bd      	mov	sp, r7
    e736:	bc80      	pop	{r7}
    e738:	4770      	bx	lr

0000e73a <_ZL17CO_HBcons_receivePvPK13CO_CANrxMsg_t>:
#include "CO_Emergency_Class.h"

CO_HB_Consumer_Class	*ptrHBConsumerClass;


static void CO_HBcons_receive(void *object,const CO_CANrxMsg_t *msg){
    e73a:	b480      	push	{r7}
    e73c:	b085      	sub	sp, #20
    e73e:	af00      	add	r7, sp, #0
    e740:	6078      	str	r0, [r7, #4]
    e742:	6039      	str	r1, [r7, #0]
	CO_HBconsNode_t *HBconsNode;

	HBconsNode = (CO_HBconsNode_t*) object; /* this is the correct pointer type of the first argument */
    e744:	687b      	ldr	r3, [r7, #4]
    e746:	60fb      	str	r3, [r7, #12]

	/* verify message length */
	if(msg->DLC == 1){
    e748:	683b      	ldr	r3, [r7, #0]
    e74a:	7d1b      	ldrb	r3, [r3, #20]
    e74c:	2b01      	cmp	r3, #1
    e74e:	d106      	bne.n	e75e <_ZL17CO_HBcons_receivePvPK13CO_CANrxMsg_t+0x24>
		/* copy data and set 'new message' flag. */
		HBconsNode->NMTstate = msg->data[0];
    e750:	683b      	ldr	r3, [r7, #0]
    e752:	7d5a      	ldrb	r2, [r3, #21]
    e754:	68fb      	ldr	r3, [r7, #12]
    e756:	701a      	strb	r2, [r3, #0]
		HBconsNode->CANrxNew = true;
    e758:	68fb      	ldr	r3, [r7, #12]
    e75a:	2201      	movs	r2, #1
    e75c:	731a      	strb	r2, [r3, #12]
	}
}
    e75e:	bf00      	nop
    e760:	3714      	adds	r7, #20
    e762:	46bd      	mov	sp, r7
    e764:	bc80      	pop	{r7}
    e766:	4770      	bx	lr

0000e768 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm>:
static void CO_HBcons_monitoredNodeConfig(
CO_HBconsumer_t        *HBcons,
uint8_t                 idx,
uint32_t                HBconsTime)
{
    e768:	b590      	push	{r4, r7, lr}
    e76a:	b08d      	sub	sp, #52	; 0x34
    e76c:	af04      	add	r7, sp, #16
    e76e:	60f8      	str	r0, [r7, #12]
    e770:	460b      	mov	r3, r1
    e772:	607a      	str	r2, [r7, #4]
    e774:	72fb      	strb	r3, [r7, #11]
	uint32_t COB_ID;
	uint32_t NodeID;
	CO_HBconsNode_t *monitoredNode;

	if(idx >= HBcons->numberOfMonitoredNodes) return;
    e776:	7afb      	ldrb	r3, [r7, #11]
    e778:	68fa      	ldr	r2, [r7, #12]
    e77a:	7b12      	ldrb	r2, [r2, #12]
    e77c:	4293      	cmp	r3, r2
    e77e:	da2c      	bge.n	e7da <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x72>

	NodeID = (uint32_t)((HBconsTime>>16)&0xFF);
    e780:	687b      	ldr	r3, [r7, #4]
    e782:	0c1b      	lsrs	r3, r3, #16
    e784:	b2db      	uxtb	r3, r3
    e786:	61fb      	str	r3, [r7, #28]
	monitoredNode = &HBcons->monitoredNodes[idx];
    e788:	68fb      	ldr	r3, [r7, #12]
    e78a:	689a      	ldr	r2, [r3, #8]
    e78c:	7afb      	ldrb	r3, [r7, #11]
    e78e:	011b      	lsls	r3, r3, #4
    e790:	4413      	add	r3, r2
    e792:	61bb      	str	r3, [r7, #24]
	monitoredNode->time = (uint32_t)HBconsTime;
    e794:	69bb      	ldr	r3, [r7, #24]
    e796:	687a      	ldr	r2, [r7, #4]
    e798:	609a      	str	r2, [r3, #8]
	monitoredNode->NMTstate = 0;
    e79a:	69bb      	ldr	r3, [r7, #24]
    e79c:	2200      	movs	r2, #0
    e79e:	701a      	strb	r2, [r3, #0]
	monitoredNode->monStarted = false;
    e7a0:	69bb      	ldr	r3, [r7, #24]
    e7a2:	2200      	movs	r2, #0
    e7a4:	705a      	strb	r2, [r3, #1]
	COB_ID = (uint32_t)idx + 0x700;
    e7a6:	7afb      	ldrb	r3, [r7, #11]
    e7a8:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
    e7ac:	617b      	str	r3, [r7, #20]
// 		COB_ID = 0;
// 		monitoredNode->time = 0;
// 	}

	/* configure Heartbeat consumer CAN reception */
	ptrCODriverClass->CAN_Rx_BufferInit(
    e7ae:	4b0d      	ldr	r3, [pc, #52]	; (e7e4 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x7c>)
    e7b0:	6818      	ldr	r0, [r3, #0]
	HBcons->CANdevRxIdxStart + idx,
    e7b2:	68fb      	ldr	r3, [r7, #12]
    e7b4:	695a      	ldr	r2, [r3, #20]
	ptrCODriverClass->CAN_Rx_BufferInit(
    e7b6:	7afb      	ldrb	r3, [r7, #11]
    e7b8:	18d1      	adds	r1, r2, r3
	COB_ID,
	0x7FF,
	0,
	(void*)&HBcons->monitoredNodes[idx],
    e7ba:	68fb      	ldr	r3, [r7, #12]
    e7bc:	689a      	ldr	r2, [r3, #8]
    e7be:	7afb      	ldrb	r3, [r7, #11]
    e7c0:	011b      	lsls	r3, r3, #4
    e7c2:	4413      	add	r3, r2
	CO_HBcons_receive);
    e7c4:	4a08      	ldr	r2, [pc, #32]	; (e7e8 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x80>)
    e7c6:	9202      	str	r2, [sp, #8]
    e7c8:	9301      	str	r3, [sp, #4]
    e7ca:	2300      	movs	r3, #0
    e7cc:	9300      	str	r3, [sp, #0]
    e7ce:	f240 73ff 	movw	r3, #2047	; 0x7ff
    e7d2:	697a      	ldr	r2, [r7, #20]
    e7d4:	4c05      	ldr	r4, [pc, #20]	; (e7ec <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x84>)
    e7d6:	47a0      	blx	r4
    e7d8:	e000      	b.n	e7dc <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x74>
	if(idx >= HBcons->numberOfMonitoredNodes) return;
    e7da:	bf00      	nop
}
    e7dc:	3724      	adds	r7, #36	; 0x24
    e7de:	46bd      	mov	sp, r7
    e7e0:	bd90      	pop	{r4, r7, pc}
    e7e2:	bf00      	nop
    e7e4:	200019b4 	.word	0x200019b4
    e7e8:	0000e73b 	.word	0x0000e73b
    e7ec:	0000d801 	.word	0x0000d801

0000e7f0 <_ZL11CO_ODF_1016P12CO_ODF_arg_t>:
static CO_SDO_abortCode_t CO_ODF_1016(CO_ODF_arg_t *ODF_arg){
    e7f0:	b580      	push	{r7, lr}
    e7f2:	b08c      	sub	sp, #48	; 0x30
    e7f4:	af00      	add	r7, sp, #0
    e7f6:	6078      	str	r0, [r7, #4]
	CO_HBconsumer_t *HBcons;
	uint32_t value;
	CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
    e7f8:	2300      	movs	r3, #0
    e7fa:	62fb      	str	r3, [r7, #44]	; 0x2c

	HBcons = (CO_HBconsumer_t*) ODF_arg->object;
    e7fc:	687b      	ldr	r3, [r7, #4]
    e7fe:	681b      	ldr	r3, [r3, #0]
    e800:	627b      	str	r3, [r7, #36]	; 0x24
	value =ptrCODriverClass->CO_getUint32(ODF_arg->data);
    e802:	4b32      	ldr	r3, [pc, #200]	; (e8cc <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xdc>)
    e804:	681b      	ldr	r3, [r3, #0]
    e806:	1d1a      	adds	r2, r3, #4
    e808:	687b      	ldr	r3, [r7, #4]
    e80a:	685b      	ldr	r3, [r3, #4]
    e80c:	4619      	mov	r1, r3
    e80e:	4610      	mov	r0, r2
    e810:	4b2f      	ldr	r3, [pc, #188]	; (e8d0 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xe0>)
    e812:	4798      	blx	r3
    e814:	6238      	str	r0, [r7, #32]

	if(!ODF_arg->reading){
    e816:	687b      	ldr	r3, [r7, #4]
    e818:	7f5b      	ldrb	r3, [r3, #29]
    e81a:	2b00      	cmp	r3, #0
    e81c:	d150      	bne.n	e8c0 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xd0>
		uint8_t NodeID;
		uint32_t HBconsTime;

		NodeID = (value >> 16U) & 0xFFU;
    e81e:	6a3b      	ldr	r3, [r7, #32]
    e820:	0c1b      	lsrs	r3, r3, #16
    e822:	77fb      	strb	r3, [r7, #31]
		HBconsTime = value & 0xFFFFU;
    e824:	6a3b      	ldr	r3, [r7, #32]
    e826:	b29b      	uxth	r3, r3
    e828:	61bb      	str	r3, [r7, #24]

		if((value & 0xFF800000U) != 0){
    e82a:	6a3b      	ldr	r3, [r7, #32]
    e82c:	0ddb      	lsrs	r3, r3, #23
    e82e:	05db      	lsls	r3, r3, #23
    e830:	2b00      	cmp	r3, #0
    e832:	d002      	beq.n	e83a <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0x4a>
			ret = CO_SDO_AB_PRAM_INCOMPAT;
    e834:	4b27      	ldr	r3, [pc, #156]	; (e8d4 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xe4>)
    e836:	62fb      	str	r3, [r7, #44]	; 0x2c
    e838:	e036      	b.n	e8a8 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb8>
		}
		else if((HBconsTime != 0) && (NodeID != 0)){
    e83a:	69bb      	ldr	r3, [r7, #24]
    e83c:	2b00      	cmp	r3, #0
    e83e:	d02f      	beq.n	e8a0 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb0>
    e840:	7ffb      	ldrb	r3, [r7, #31]
    e842:	2b00      	cmp	r3, #0
    e844:	d02c      	beq.n	e8a0 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb0>
			uint8_t i;
			/* there must not be more entries with same index and time different than zero */
			for(i = 0U; i<HBcons->numberOfMonitoredNodes; i++){
    e846:	2300      	movs	r3, #0
    e848:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    e84c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    e850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    e852:	7b12      	ldrb	r2, [r2, #12]
    e854:	4293      	cmp	r3, r2
    e856:	da26      	bge.n	e8a6 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb6>
				uint32_t objectCopy = HBcons->HBconsTime[i];
    e858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e85a:	685a      	ldr	r2, [r3, #4]
    e85c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    e860:	009b      	lsls	r3, r3, #2
    e862:	4413      	add	r3, r2
    e864:	681b      	ldr	r3, [r3, #0]
    e866:	617b      	str	r3, [r7, #20]
				uint8_t NodeIDObj = (objectCopy >> 16U) & 0xFFU;
    e868:	697b      	ldr	r3, [r7, #20]
    e86a:	0c1b      	lsrs	r3, r3, #16
    e86c:	74fb      	strb	r3, [r7, #19]
				uint32_t HBconsTimeObj = objectCopy & 0xFFFFU;
    e86e:	697b      	ldr	r3, [r7, #20]
    e870:	b29b      	uxth	r3, r3
    e872:	60fb      	str	r3, [r7, #12]
				if(((ODF_arg->subIndex-1U) != i) && (HBconsTimeObj != 0) && (NodeID == NodeIDObj)){
    e874:	687b      	ldr	r3, [r7, #4]
    e876:	7f1b      	ldrb	r3, [r3, #28]
    e878:	1e5a      	subs	r2, r3, #1
    e87a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    e87e:	429a      	cmp	r2, r3
    e880:	d008      	beq.n	e894 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xa4>
    e882:	68fb      	ldr	r3, [r7, #12]
    e884:	2b00      	cmp	r3, #0
    e886:	d005      	beq.n	e894 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xa4>
    e888:	7ffa      	ldrb	r2, [r7, #31]
    e88a:	7cfb      	ldrb	r3, [r7, #19]
    e88c:	429a      	cmp	r2, r3
    e88e:	d101      	bne.n	e894 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xa4>
					ret = CO_SDO_AB_PRAM_INCOMPAT;
    e890:	4b10      	ldr	r3, [pc, #64]	; (e8d4 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xe4>)
    e892:	62fb      	str	r3, [r7, #44]	; 0x2c
			for(i = 0U; i<HBcons->numberOfMonitoredNodes; i++){
    e894:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    e898:	3301      	adds	r3, #1
    e89a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    e89e:	e7d5      	b.n	e84c <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0x5c>
				}
			}
		}
		else{
			ret = CO_SDO_AB_NONE;
    e8a0:	2300      	movs	r3, #0
    e8a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    e8a4:	e000      	b.n	e8a8 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb8>
			}
    e8a6:	bf00      	nop
		}

		/* Configure */
		if(ret == CO_SDO_AB_NONE){
    e8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e8aa:	2b00      	cmp	r3, #0
    e8ac:	d108      	bne.n	e8c0 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xd0>
			CO_HBcons_monitoredNodeConfig(HBcons, ODF_arg->subIndex-1U, value);
    e8ae:	687b      	ldr	r3, [r7, #4]
    e8b0:	7f1b      	ldrb	r3, [r3, #28]
    e8b2:	3b01      	subs	r3, #1
    e8b4:	b2db      	uxtb	r3, r3
    e8b6:	6a3a      	ldr	r2, [r7, #32]
    e8b8:	4619      	mov	r1, r3
    e8ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e8bc:	4b06      	ldr	r3, [pc, #24]	; (e8d8 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xe8>)
    e8be:	4798      	blx	r3
		}
	}

	return ret;
    e8c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
    e8c2:	4618      	mov	r0, r3
    e8c4:	3730      	adds	r7, #48	; 0x30
    e8c6:	46bd      	mov	sp, r7
    e8c8:	bd80      	pop	{r7, pc}
    e8ca:	bf00      	nop
    e8cc:	200019b4 	.word	0x200019b4
    e8d0:	000104d1 	.word	0x000104d1
    e8d4:	06040043 	.word	0x06040043
    e8d8:	0000e769 	.word	0x0000e769

0000e8dc <_ZN20CO_HB_Consumer_ClassC1Ev>:


// default constructor
CO_HB_Consumer_Class::CO_HB_Consumer_Class()
    e8dc:	b480      	push	{r7}
    e8de:	b083      	sub	sp, #12
    e8e0:	af00      	add	r7, sp, #0
    e8e2:	6078      	str	r0, [r7, #4]
{
} //CO_HB_Consumer_Class
    e8e4:	687b      	ldr	r3, [r7, #4]
    e8e6:	4618      	mov	r0, r3
    e8e8:	370c      	adds	r7, #12
    e8ea:	46bd      	mov	sp, r7
    e8ec:	bc80      	pop	{r7}
    e8ee:	4770      	bx	lr

0000e8f0 <_ZN20CO_HB_Consumer_ClassD1Ev>:

// default destructor
CO_HB_Consumer_Class::~CO_HB_Consumer_Class()
    e8f0:	b480      	push	{r7}
    e8f2:	b083      	sub	sp, #12
    e8f4:	af00      	add	r7, sp, #0
    e8f6:	6078      	str	r0, [r7, #4]
{
} //~CO_HB_Consumer_Class
    e8f8:	687b      	ldr	r3, [r7, #4]
    e8fa:	4618      	mov	r0, r3
    e8fc:	370c      	adds	r7, #12
    e8fe:	46bd      	mov	sp, r7
    e900:	bc80      	pop	{r7}
    e902:	4770      	bx	lr

0000e904 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm>:
const uint32_t          HBconsTime[],
CO_HBconsNode_t         monitoredNodes[],
uint8_t                 numberOfMonitoredNodes,
CO_CANmodule_t         *CANdevRx,
uint32_t                CANdevRxIdxStart)
{
    e904:	b590      	push	{r4, r7, lr}
    e906:	b089      	sub	sp, #36	; 0x24
    e908:	af02      	add	r7, sp, #8
    e90a:	60f8      	str	r0, [r7, #12]
    e90c:	60b9      	str	r1, [r7, #8]
    e90e:	607a      	str	r2, [r7, #4]
    e910:	603b      	str	r3, [r7, #0]
	uint8_t i;

	/* verify arguments */
	if(HBcons==NULL || em==NULL || SDO==NULL || HBconsTime==NULL ||
    e912:	68bb      	ldr	r3, [r7, #8]
    e914:	2b00      	cmp	r3, #0
    e916:	d00e      	beq.n	e936 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x32>
    e918:	687b      	ldr	r3, [r7, #4]
    e91a:	2b00      	cmp	r3, #0
    e91c:	d00b      	beq.n	e936 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x32>
    e91e:	683b      	ldr	r3, [r7, #0]
    e920:	2b00      	cmp	r3, #0
    e922:	d008      	beq.n	e936 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x32>
    e924:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e926:	2b00      	cmp	r3, #0
    e928:	d005      	beq.n	e936 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x32>
    e92a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e92c:	2b00      	cmp	r3, #0
    e92e:	d002      	beq.n	e936 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x32>
	monitoredNodes==NULL || CANdevRx==NULL){
    e930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e932:	2b00      	cmp	r3, #0
    e934:	d102      	bne.n	e93c <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x38>
		return CO_ERROR_ILLEGAL_ARGUMENT;
    e936:	f04f 33ff 	mov.w	r3, #4294967295
    e93a:	e039      	b.n	e9b0 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xac>
	}

	/* Configure object variables */
	HBcons->em = em;
    e93c:	68bb      	ldr	r3, [r7, #8]
    e93e:	687a      	ldr	r2, [r7, #4]
    e940:	601a      	str	r2, [r3, #0]
	HBcons->HBconsTime = HBconsTime;
    e942:	68bb      	ldr	r3, [r7, #8]
    e944:	6aba      	ldr	r2, [r7, #40]	; 0x28
    e946:	605a      	str	r2, [r3, #4]
	HBcons->monitoredNodes = monitoredNodes;
    e948:	68bb      	ldr	r3, [r7, #8]
    e94a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    e94c:	609a      	str	r2, [r3, #8]
	HBcons->numberOfMonitoredNodes = numberOfMonitoredNodes;
    e94e:	68bb      	ldr	r3, [r7, #8]
    e950:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
    e954:	731a      	strb	r2, [r3, #12]
	HBcons->allMonitoredOperational = 0;
    e956:	68bb      	ldr	r3, [r7, #8]
    e958:	2200      	movs	r2, #0
    e95a:	735a      	strb	r2, [r3, #13]
	HBcons->CANdevRx = CANdevRx;
    e95c:	68bb      	ldr	r3, [r7, #8]
    e95e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    e960:	611a      	str	r2, [r3, #16]
	HBcons->CANdevRxIdxStart = CANdevRxIdxStart;
    e962:	68bb      	ldr	r3, [r7, #8]
    e964:	6bba      	ldr	r2, [r7, #56]	; 0x38
    e966:	615a      	str	r2, [r3, #20]

	for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
    e968:	2300      	movs	r3, #0
    e96a:	75fb      	strb	r3, [r7, #23]
    e96c:	7dfb      	ldrb	r3, [r7, #23]
    e96e:	68ba      	ldr	r2, [r7, #8]
    e970:	7b12      	ldrb	r2, [r2, #12]
    e972:	4293      	cmp	r3, r2
    e974:	da0e      	bge.n	e994 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x90>

			CO_HBcons_monitoredNodeConfig(HBcons, i, HBcons->HBconsTime[i]);
    e976:	68bb      	ldr	r3, [r7, #8]
    e978:	685a      	ldr	r2, [r3, #4]
    e97a:	7dfb      	ldrb	r3, [r7, #23]
    e97c:	009b      	lsls	r3, r3, #2
    e97e:	4413      	add	r3, r2
    e980:	681a      	ldr	r2, [r3, #0]
    e982:	7dfb      	ldrb	r3, [r7, #23]
    e984:	4619      	mov	r1, r3
    e986:	68b8      	ldr	r0, [r7, #8]
    e988:	4b0b      	ldr	r3, [pc, #44]	; (e9b8 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xb4>)
    e98a:	4798      	blx	r3
	for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
    e98c:	7dfb      	ldrb	r3, [r7, #23]
    e98e:	3301      	adds	r3, #1
    e990:	75fb      	strb	r3, [r7, #23]
    e992:	e7eb      	b.n	e96c <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x68>
		
	}
	

	/* Configure Object dictionary entry at index 0x1016 */
	ptrCODriverClass->CO_OD_configure( OD_H1016_CONSUMER_HB_TIME, CO_ODF_1016, (void*)HBcons, 0, 0);
    e994:	4b09      	ldr	r3, [pc, #36]	; (e9bc <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xb8>)
    e996:	681b      	ldr	r3, [r3, #0]
    e998:	1d18      	adds	r0, r3, #4
    e99a:	2300      	movs	r3, #0
    e99c:	9301      	str	r3, [sp, #4]
    e99e:	2300      	movs	r3, #0
    e9a0:	9300      	str	r3, [sp, #0]
    e9a2:	68bb      	ldr	r3, [r7, #8]
    e9a4:	4a06      	ldr	r2, [pc, #24]	; (e9c0 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xbc>)
    e9a6:	f241 0116 	movw	r1, #4118	; 0x1016
    e9aa:	4c06      	ldr	r4, [pc, #24]	; (e9c4 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xc0>)
    e9ac:	47a0      	blx	r4

	return CO_ERROR_NO;
    e9ae:	2300      	movs	r3, #0
}
    e9b0:	4618      	mov	r0, r3
    e9b2:	371c      	adds	r7, #28
    e9b4:	46bd      	mov	sp, r7
    e9b6:	bd90      	pop	{r4, r7, pc}
    e9b8:	0000e769 	.word	0x0000e769
    e9bc:	200019b4 	.word	0x200019b4
    e9c0:	0000e7f1 	.word	0x0000e7f1
    e9c4:	00010921 	.word	0x00010921

0000e9c8 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm>:
/******************************************************************************/
void CO_HB_Consumer_Class::CO_HBconsumer_process(
CO_HBconsumer_t        *HBcons,
bool_t                  NMTisPreOrOperational,
uint32_t                timeDifference_ms)
{
    e9c8:	b590      	push	{r4, r7, lr}
    e9ca:	b089      	sub	sp, #36	; 0x24
    e9cc:	af02      	add	r7, sp, #8
    e9ce:	60f8      	str	r0, [r7, #12]
    e9d0:	60b9      	str	r1, [r7, #8]
    e9d2:	603b      	str	r3, [r7, #0]
    e9d4:	4613      	mov	r3, r2
    e9d6:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	uint8_t AllMonitoredOperationalCopy;
	CO_HBconsNode_t *monitoredNode;

	AllMonitoredOperationalCopy = 5;
    e9d8:	2305      	movs	r3, #5
    e9da:	75bb      	strb	r3, [r7, #22]
	monitoredNode = &HBcons->monitoredNodes[0];
    e9dc:	68bb      	ldr	r3, [r7, #8]
    e9de:	689b      	ldr	r3, [r3, #8]
    e9e0:	613b      	str	r3, [r7, #16]

	if(NMTisPreOrOperational){
    e9e2:	79fb      	ldrb	r3, [r7, #7]
    e9e4:	2b00      	cmp	r3, #0
    e9e6:	d060      	beq.n	eaaa <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0xe2>
		for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
    e9e8:	2300      	movs	r3, #0
    e9ea:	75fb      	strb	r3, [r7, #23]
    e9ec:	7dfb      	ldrb	r3, [r7, #23]
    e9ee:	68ba      	ldr	r2, [r7, #8]
    e9f0:	7b12      	ldrb	r2, [r2, #12]
    e9f2:	4293      	cmp	r3, r2
    e9f4:	da72      	bge.n	eadc <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x114>
			if(monitoredNode->time){/* is node monitored */
    e9f6:	693b      	ldr	r3, [r7, #16]
    e9f8:	689b      	ldr	r3, [r3, #8]
    e9fa:	2b00      	cmp	r3, #0
    e9fc:	d04e      	beq.n	ea9c <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0xd4>
				/* Verify if new Consumer Heartbeat message received */
				if(monitoredNode->CANrxNew){
    e9fe:	693b      	ldr	r3, [r7, #16]
    ea00:	7b1b      	ldrb	r3, [r3, #12]
    ea02:	2b00      	cmp	r3, #0
    ea04:	d00e      	beq.n	ea24 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x5c>
					if(monitoredNode->NMTstate){
    ea06:	693b      	ldr	r3, [r7, #16]
    ea08:	781b      	ldrb	r3, [r3, #0]
    ea0a:	2b00      	cmp	r3, #0
    ea0c:	d007      	beq.n	ea1e <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x56>
						/* not a bootup message */
						monitoredNode->monStarted = true;
    ea0e:	693b      	ldr	r3, [r7, #16]
    ea10:	2201      	movs	r2, #1
    ea12:	705a      	strb	r2, [r3, #1]
						monitoredNode->timeoutTimer = 0;  /* reset timer */
    ea14:	693b      	ldr	r3, [r7, #16]
    ea16:	2200      	movs	r2, #0
    ea18:	605a      	str	r2, [r3, #4]
						timeDifference_ms = 0;
    ea1a:	2300      	movs	r3, #0
    ea1c:	603b      	str	r3, [r7, #0]
					}
					monitoredNode->CANrxNew = false;
    ea1e:	693b      	ldr	r3, [r7, #16]
    ea20:	2200      	movs	r2, #0
    ea22:	731a      	strb	r2, [r3, #12]
				}
				/* Verify timeout */
				if(monitoredNode->timeoutTimer < monitoredNode->time) monitoredNode->timeoutTimer += timeDifference_ms;
    ea24:	693b      	ldr	r3, [r7, #16]
    ea26:	685a      	ldr	r2, [r3, #4]
    ea28:	693b      	ldr	r3, [r7, #16]
    ea2a:	689b      	ldr	r3, [r3, #8]
    ea2c:	429a      	cmp	r2, r3
    ea2e:	d205      	bcs.n	ea3c <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x74>
    ea30:	693b      	ldr	r3, [r7, #16]
    ea32:	685a      	ldr	r2, [r3, #4]
    ea34:	683b      	ldr	r3, [r7, #0]
    ea36:	441a      	add	r2, r3
    ea38:	693b      	ldr	r3, [r7, #16]
    ea3a:	605a      	str	r2, [r3, #4]

				if(monitoredNode->monStarted){
    ea3c:	693b      	ldr	r3, [r7, #16]
    ea3e:	785b      	ldrb	r3, [r3, #1]
    ea40:	2b00      	cmp	r3, #0
    ea42:	d025      	beq.n	ea90 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0xc8>
					if(monitoredNode->timeoutTimer >= monitoredNode->time){
    ea44:	693b      	ldr	r3, [r7, #16]
    ea46:	685a      	ldr	r2, [r3, #4]
    ea48:	693b      	ldr	r3, [r7, #16]
    ea4a:	689b      	ldr	r3, [r3, #8]
    ea4c:	429a      	cmp	r2, r3
    ea4e:	d30f      	bcc.n	ea70 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0xa8>
						ptrCODriverClass->EM_ErrorReport(HBcons->em, CO_EM_HEARTBEAT_CONSUMER, CO_EMC_HEARTBEAT, i);
    ea50:	4b26      	ldr	r3, [pc, #152]	; (eaec <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x124>)
    ea52:	681b      	ldr	r3, [r3, #0]
    ea54:	1d18      	adds	r0, r3, #4
    ea56:	68bb      	ldr	r3, [r7, #8]
    ea58:	6819      	ldr	r1, [r3, #0]
    ea5a:	7dfb      	ldrb	r3, [r7, #23]
    ea5c:	9300      	str	r3, [sp, #0]
    ea5e:	f248 1330 	movw	r3, #33072	; 0x8130
    ea62:	221b      	movs	r2, #27
    ea64:	4c22      	ldr	r4, [pc, #136]	; (eaf0 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x128>)
    ea66:	47a0      	blx	r4
						monitoredNode->NMTstate = 0;
    ea68:	693b      	ldr	r3, [r7, #16]
    ea6a:	2200      	movs	r2, #0
    ea6c:	701a      	strb	r2, [r3, #0]
    ea6e:	e00f      	b.n	ea90 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0xc8>
					}
					else if(monitoredNode->NMTstate == 0){
    ea70:	693b      	ldr	r3, [r7, #16]
    ea72:	781b      	ldrb	r3, [r3, #0]
    ea74:	2b00      	cmp	r3, #0
    ea76:	d10b      	bne.n	ea90 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0xc8>
						/* there was a bootup message */
						ptrCODriverClass->EM_ErrorReport(HBcons->em, CO_EM_HB_CONSUMER_REMOTE_RESET, CO_EMC_HEARTBEAT, i);
    ea78:	4b1c      	ldr	r3, [pc, #112]	; (eaec <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x124>)
    ea7a:	681b      	ldr	r3, [r3, #0]
    ea7c:	1d18      	adds	r0, r3, #4
    ea7e:	68bb      	ldr	r3, [r7, #8]
    ea80:	6819      	ldr	r1, [r3, #0]
    ea82:	7dfb      	ldrb	r3, [r7, #23]
    ea84:	9300      	str	r3, [sp, #0]
    ea86:	f248 1330 	movw	r3, #33072	; 0x8130
    ea8a:	221c      	movs	r2, #28
    ea8c:	4c18      	ldr	r4, [pc, #96]	; (eaf0 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x128>)
    ea8e:	47a0      	blx	r4
					}
				}
				if(monitoredNode->NMTstate != CO_NMT_OPERATIONAL)
    ea90:	693b      	ldr	r3, [r7, #16]
    ea92:	781b      	ldrb	r3, [r3, #0]
    ea94:	2b05      	cmp	r3, #5
    ea96:	d001      	beq.n	ea9c <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0xd4>
				AllMonitoredOperationalCopy = 0;
    ea98:	2300      	movs	r3, #0
    ea9a:	75bb      	strb	r3, [r7, #22]
			}
			monitoredNode++;
    ea9c:	693b      	ldr	r3, [r7, #16]
    ea9e:	3310      	adds	r3, #16
    eaa0:	613b      	str	r3, [r7, #16]
		for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
    eaa2:	7dfb      	ldrb	r3, [r7, #23]
    eaa4:	3301      	adds	r3, #1
    eaa6:	75fb      	strb	r3, [r7, #23]
    eaa8:	e7a0      	b.n	e9ec <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x24>
		}
	}
	else{ /* not in (pre)operational state */
		for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
    eaaa:	2300      	movs	r3, #0
    eaac:	75fb      	strb	r3, [r7, #23]
    eaae:	7dfb      	ldrb	r3, [r7, #23]
    eab0:	68ba      	ldr	r2, [r7, #8]
    eab2:	7b12      	ldrb	r2, [r2, #12]
    eab4:	4293      	cmp	r3, r2
    eab6:	da0f      	bge.n	ead8 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x110>
			monitoredNode->NMTstate = 0;
    eab8:	693b      	ldr	r3, [r7, #16]
    eaba:	2200      	movs	r2, #0
    eabc:	701a      	strb	r2, [r3, #0]
			monitoredNode->CANrxNew = false;
    eabe:	693b      	ldr	r3, [r7, #16]
    eac0:	2200      	movs	r2, #0
    eac2:	731a      	strb	r2, [r3, #12]
			monitoredNode->monStarted = false;
    eac4:	693b      	ldr	r3, [r7, #16]
    eac6:	2200      	movs	r2, #0
    eac8:	705a      	strb	r2, [r3, #1]
			monitoredNode++;
    eaca:	693b      	ldr	r3, [r7, #16]
    eacc:	3310      	adds	r3, #16
    eace:	613b      	str	r3, [r7, #16]
		for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
    ead0:	7dfb      	ldrb	r3, [r7, #23]
    ead2:	3301      	adds	r3, #1
    ead4:	75fb      	strb	r3, [r7, #23]
    ead6:	e7ea      	b.n	eaae <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0xe6>
		}
		AllMonitoredOperationalCopy = 0;
    ead8:	2300      	movs	r3, #0
    eada:	75bb      	strb	r3, [r7, #22]
	}
	HBcons->allMonitoredOperational = AllMonitoredOperationalCopy;
    eadc:	68bb      	ldr	r3, [r7, #8]
    eade:	7dba      	ldrb	r2, [r7, #22]
    eae0:	735a      	strb	r2, [r3, #13]
}
    eae2:	bf00      	nop
    eae4:	371c      	adds	r7, #28
    eae6:	46bd      	mov	sp, r7
    eae8:	bd90      	pop	{r4, r7, pc}
    eaea:	bf00      	nop
    eaec:	200019b4 	.word	0x200019b4
    eaf0:	0000e441 	.word	0x0000e441

0000eaf4 <_ZN20CO_HB_Consumer_Class10HB_SetNodeEh>:

void	CO_HB_Consumer_Class::HB_SetNode(uint8_t nd){
    eaf4:	b480      	push	{r7}
    eaf6:	b083      	sub	sp, #12
    eaf8:	af00      	add	r7, sp, #0
    eafa:	6078      	str	r0, [r7, #4]
    eafc:	460b      	mov	r3, r1
    eafe:	70fb      	strb	r3, [r7, #3]
	coNode=nd;
    eb00:	687b      	ldr	r3, [r7, #4]
    eb02:	78fa      	ldrb	r2, [r7, #3]
    eb04:	711a      	strb	r2, [r3, #4]
    eb06:	bf00      	nop
    eb08:	370c      	adds	r7, #12
    eb0a:	46bd      	mov	sp, r7
    eb0c:	bc80      	pop	{r7}
    eb0e:	4770      	bx	lr

0000eb10 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t>:
#include "CO_NMT_Heartbeat_Class.h"
#include "CO_Driver_Class.h"



static void CO_NMT_receive(void *object, const CO_CANrxMsg_t *msg){
    eb10:	b580      	push	{r7, lr}
    eb12:	b084      	sub	sp, #16
    eb14:	af00      	add	r7, sp, #0
    eb16:	6078      	str	r0, [r7, #4]
    eb18:	6039      	str	r1, [r7, #0]
    CO_NMT_t *NMT;
    uint8_t nodeId;

    NMT = (CO_NMT_t*)object;   /* this is the correct pointer type of the first argument */
    eb1a:	687b      	ldr	r3, [r7, #4]
    eb1c:	60fb      	str	r3, [r7, #12]

    nodeId = msg->data[1];
    eb1e:	683b      	ldr	r3, [r7, #0]
    eb20:	7d9b      	ldrb	r3, [r3, #22]
    eb22:	72fb      	strb	r3, [r7, #11]

    if((msg->DLC == 2) && ((nodeId == 0) || (nodeId == NMT->nodeId))){
    eb24:	683b      	ldr	r3, [r7, #0]
    eb26:	7d1b      	ldrb	r3, [r3, #20]
    eb28:	2b02      	cmp	r3, #2
    eb2a:	d146      	bne.n	ebba <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0xaa>
    eb2c:	7afb      	ldrb	r3, [r7, #11]
    eb2e:	2b00      	cmp	r3, #0
    eb30:	d004      	beq.n	eb3c <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x2c>
    eb32:	68fb      	ldr	r3, [r7, #12]
    eb34:	7a9b      	ldrb	r3, [r3, #10]
    eb36:	7afa      	ldrb	r2, [r7, #11]
    eb38:	429a      	cmp	r2, r3
    eb3a:	d13e      	bne.n	ebba <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0xaa>
        uint8_t command = msg->data[0];
    eb3c:	683b      	ldr	r3, [r7, #0]
    eb3e:	7d5b      	ldrb	r3, [r3, #21]
    eb40:	72bb      	strb	r3, [r7, #10]
        uint8_t currentOperatingState = NMT->operatingState;
    eb42:	68fb      	ldr	r3, [r7, #12]
    eb44:	781b      	ldrb	r3, [r3, #0]
    eb46:	727b      	strb	r3, [r7, #9]

        switch(command){
    eb48:	7abb      	ldrb	r3, [r7, #10]
    eb4a:	2b80      	cmp	r3, #128	; 0x80
    eb4c:	d019      	beq.n	eb82 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x72>
    eb4e:	2b80      	cmp	r3, #128	; 0x80
    eb50:	dc04      	bgt.n	eb5c <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x4c>
    eb52:	2b01      	cmp	r3, #1
    eb54:	d007      	beq.n	eb66 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x56>
    eb56:	2b02      	cmp	r3, #2
    eb58:	d00f      	beq.n	eb7a <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x6a>
    eb5a:	e01f      	b.n	eb9c <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
    eb5c:	2b81      	cmp	r3, #129	; 0x81
    eb5e:	d014      	beq.n	eb8a <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x7a>
    eb60:	2b82      	cmp	r3, #130	; 0x82
    eb62:	d016      	beq.n	eb92 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x82>
    eb64:	e01a      	b.n	eb9c <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
            case CO_NMT_ENTER_OPERATIONAL:
                if((*NMT->emPr->errorRegister) == 0U){
    eb66:	68fb      	ldr	r3, [r7, #12]
    eb68:	695b      	ldr	r3, [r3, #20]
    eb6a:	681b      	ldr	r3, [r3, #0]
    eb6c:	781b      	ldrb	r3, [r3, #0]
    eb6e:	2b00      	cmp	r3, #0
    eb70:	d113      	bne.n	eb9a <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8a>
                    NMT->operatingState = CO_NMT_OPERATIONAL;
    eb72:	68fb      	ldr	r3, [r7, #12]
    eb74:	2205      	movs	r2, #5
    eb76:	701a      	strb	r2, [r3, #0]
                }
                break;
    eb78:	e00f      	b.n	eb9a <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8a>
            case CO_NMT_ENTER_STOPPED:
                NMT->operatingState = CO_NMT_STOPPED;
    eb7a:	68fb      	ldr	r3, [r7, #12]
    eb7c:	2204      	movs	r2, #4
    eb7e:	701a      	strb	r2, [r3, #0]
                break;
    eb80:	e00c      	b.n	eb9c <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
            case CO_NMT_ENTER_PRE_OPERATIONAL:
                NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
    eb82:	68fb      	ldr	r3, [r7, #12]
    eb84:	227f      	movs	r2, #127	; 0x7f
    eb86:	701a      	strb	r2, [r3, #0]
                break;
    eb88:	e008      	b.n	eb9c <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
            case CO_NMT_RESET_NODE:
                NMT->resetCommand = CO_RESET_APP;
    eb8a:	68fb      	ldr	r3, [r7, #12]
    eb8c:	2202      	movs	r2, #2
    eb8e:	725a      	strb	r2, [r3, #9]
                break;
    eb90:	e004      	b.n	eb9c <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
            case CO_NMT_RESET_COMMUNICATION:
                NMT->resetCommand = CO_RESET_COMM;
    eb92:	68fb      	ldr	r3, [r7, #12]
    eb94:	2201      	movs	r2, #1
    eb96:	725a      	strb	r2, [r3, #9]
                break;
    eb98:	e000      	b.n	eb9c <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
                break;
    eb9a:	bf00      	nop
        }

        if(NMT->ptrState!=NULL && currentOperatingState!=NMT->operatingState){
    eb9c:	68fb      	ldr	r3, [r7, #12]
    eb9e:	69db      	ldr	r3, [r3, #28]
    eba0:	2b00      	cmp	r3, #0
    eba2:	d00a      	beq.n	ebba <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0xaa>
    eba4:	68fb      	ldr	r3, [r7, #12]
    eba6:	781b      	ldrb	r3, [r3, #0]
    eba8:	7a7a      	ldrb	r2, [r7, #9]
    ebaa:	429a      	cmp	r2, r3
    ebac:	d005      	beq.n	ebba <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0xaa>
            NMT->ptrState((CO_NMT_internalState_t)NMT->operatingState);
    ebae:	68fb      	ldr	r3, [r7, #12]
    ebb0:	69db      	ldr	r3, [r3, #28]
    ebb2:	68fa      	ldr	r2, [r7, #12]
    ebb4:	7812      	ldrb	r2, [r2, #0]
    ebb6:	4610      	mov	r0, r2
    ebb8:	4798      	blx	r3
        }
    }
}
    ebba:	bf00      	nop
    ebbc:	3710      	adds	r7, #16
    ebbe:	46bd      	mov	sp, r7
    ebc0:	bd80      	pop	{r7, pc}

0000ebc2 <_ZN22CO_NMT_Heartbeat_ClassC1Ev>:
// default constructor
CO_NMT_Heartbeat_Class::CO_NMT_Heartbeat_Class()
    ebc2:	b480      	push	{r7}
    ebc4:	b083      	sub	sp, #12
    ebc6:	af00      	add	r7, sp, #0
    ebc8:	6078      	str	r0, [r7, #4]
{
} //CO_NMT_Heartbeat
    ebca:	687b      	ldr	r3, [r7, #4]
    ebcc:	4618      	mov	r0, r3
    ebce:	370c      	adds	r7, #12
    ebd0:	46bd      	mov	sp, r7
    ebd2:	bc80      	pop	{r7}
    ebd4:	4770      	bx	lr

0000ebd6 <_ZN22CO_NMT_Heartbeat_ClassD1Ev>:

// default destructor
CO_NMT_Heartbeat_Class::~CO_NMT_Heartbeat_Class()
    ebd6:	b480      	push	{r7}
    ebd8:	b083      	sub	sp, #12
    ebda:	af00      	add	r7, sp, #0
    ebdc:	6078      	str	r0, [r7, #4]
{
} //~CO_NMT_Heartbeat
    ebde:	687b      	ldr	r3, [r7, #4]
    ebe0:	4618      	mov	r0, r3
    ebe2:	370c      	adds	r7, #12
    ebe4:	46bd      	mov	sp, r7
    ebe6:	bc80      	pop	{r7}
    ebe8:	4770      	bx	lr
	...

0000ebec <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm>:
        uint32_t                NMT_rxIdx,
        uint32_t                CANidRxNMT,
        CO_CANmodule_t         *HB_CANdev,
        uint32_t                HB_txIdx,
        uint32_t                CANidTxHB)
{
    ebec:	b5b0      	push	{r4, r5, r7, lr}
    ebee:	b088      	sub	sp, #32
    ebf0:	af04      	add	r7, sp, #16
    ebf2:	60f8      	str	r0, [r7, #12]
    ebf4:	60b9      	str	r1, [r7, #8]
    ebf6:	607a      	str	r2, [r7, #4]
    ebf8:	70fb      	strb	r3, [r7, #3]
    /* verify arguments */
    if(NMT_Init==NULL || emPr==NULL || NMT_CANdev==NULL || HB_CANdev==NULL){
    ebfa:	68bb      	ldr	r3, [r7, #8]
    ebfc:	2b00      	cmp	r3, #0
    ebfe:	d008      	beq.n	ec12 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x26>
    ec00:	687b      	ldr	r3, [r7, #4]
    ec02:	2b00      	cmp	r3, #0
    ec04:	d005      	beq.n	ec12 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x26>
    ec06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ec08:	2b00      	cmp	r3, #0
    ec0a:	d002      	beq.n	ec12 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x26>
    ec0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ec0e:	2b00      	cmp	r3, #0
    ec10:	d102      	bne.n	ec18 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x2c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    ec12:	f04f 33ff 	mov.w	r3, #4294967295
    ec16:	e062      	b.n	ecde <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xf2>
    }else{
		NMT=NMT_Init;
    ec18:	68fb      	ldr	r3, [r7, #12]
    ec1a:	68ba      	ldr	r2, [r7, #8]
    ec1c:	601a      	str	r2, [r3, #0]
	}

    /* blinking bytes */
    NMT->LEDflickering          = 0;
    ec1e:	68fb      	ldr	r3, [r7, #12]
    ec20:	681b      	ldr	r3, [r3, #0]
    ec22:	2200      	movs	r2, #0
    ec24:	705a      	strb	r2, [r3, #1]
    NMT->LEDblinking            = 0;
    ec26:	68fb      	ldr	r3, [r7, #12]
    ec28:	681b      	ldr	r3, [r3, #0]
    ec2a:	2200      	movs	r2, #0
    ec2c:	709a      	strb	r2, [r3, #2]
    NMT->LEDsingleFlash         = 0;
    ec2e:	68fb      	ldr	r3, [r7, #12]
    ec30:	681b      	ldr	r3, [r3, #0]
    ec32:	2200      	movs	r2, #0
    ec34:	70da      	strb	r2, [r3, #3]
    NMT->LEDdoubleFlash         = 0;
    ec36:	68fb      	ldr	r3, [r7, #12]
    ec38:	681b      	ldr	r3, [r3, #0]
    ec3a:	2200      	movs	r2, #0
    ec3c:	711a      	strb	r2, [r3, #4]
    NMT->LEDtripleFlash         = 0;
    ec3e:	68fb      	ldr	r3, [r7, #12]
    ec40:	681b      	ldr	r3, [r3, #0]
    ec42:	2200      	movs	r2, #0
    ec44:	715a      	strb	r2, [r3, #5]
    NMT->LEDquadrupleFlash      = 0;
    ec46:	68fb      	ldr	r3, [r7, #12]
    ec48:	681b      	ldr	r3, [r3, #0]
    ec4a:	2200      	movs	r2, #0
    ec4c:	719a      	strb	r2, [r3, #6]

    /* Configure object variables */
    NMT->operatingState         = CO_NMT_INITIALIZING;
    ec4e:	68fb      	ldr	r3, [r7, #12]
    ec50:	681b      	ldr	r3, [r3, #0]
    ec52:	2200      	movs	r2, #0
    ec54:	701a      	strb	r2, [r3, #0]
    NMT->LEDgreenRun            = -1;
    ec56:	68fb      	ldr	r3, [r7, #12]
    ec58:	681b      	ldr	r3, [r3, #0]
    ec5a:	22ff      	movs	r2, #255	; 0xff
    ec5c:	71da      	strb	r2, [r3, #7]
    NMT->LEDredError            = 1;
    ec5e:	68fb      	ldr	r3, [r7, #12]
    ec60:	681b      	ldr	r3, [r3, #0]
    ec62:	2201      	movs	r2, #1
    ec64:	721a      	strb	r2, [r3, #8]
    NMT->nodeId                 = nodeId;
    ec66:	68fb      	ldr	r3, [r7, #12]
    ec68:	681b      	ldr	r3, [r3, #0]
    ec6a:	78fa      	ldrb	r2, [r7, #3]
    ec6c:	729a      	strb	r2, [r3, #10]
    NMT->firstHBTime            = firstHBTime;
    ec6e:	68fb      	ldr	r3, [r7, #12]
    ec70:	681b      	ldr	r3, [r3, #0]
    ec72:	6a3a      	ldr	r2, [r7, #32]
    ec74:	611a      	str	r2, [r3, #16]
    NMT->resetCommand           = 0;
    ec76:	68fb      	ldr	r3, [r7, #12]
    ec78:	681b      	ldr	r3, [r3, #0]
    ec7a:	2200      	movs	r2, #0
    ec7c:	725a      	strb	r2, [r3, #9]
    NMT->HBproducerTimer        = 0xFFFF;
    ec7e:	68fb      	ldr	r3, [r7, #12]
    ec80:	681b      	ldr	r3, [r3, #0]
    ec82:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ec86:	60da      	str	r2, [r3, #12]
    NMT->emPr                   = emPr;
    ec88:	68fb      	ldr	r3, [r7, #12]
    ec8a:	681b      	ldr	r3, [r3, #0]
    ec8c:	687a      	ldr	r2, [r7, #4]
    ec8e:	615a      	str	r2, [r3, #20]
    NMT->ptrState             = NULL;
    ec90:	68fb      	ldr	r3, [r7, #12]
    ec92:	681b      	ldr	r3, [r3, #0]
    ec94:	2200      	movs	r2, #0
    ec96:	61da      	str	r2, [r3, #28]

    /* configure NMT CAN reception */
   ptrCODriverClass->CAN_Rx_BufferInit(
    ec98:	4b13      	ldr	r3, [pc, #76]	; (ece8 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    ec9a:	6818      	ldr	r0, [r3, #0]
      
            NMT_rxIdx,          /* rx buffer index */
            CANidRxNMT,         /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)NMT,         /* object passed to receive function */
    ec9c:	68fb      	ldr	r3, [r7, #12]
    ec9e:	681b      	ldr	r3, [r3, #0]
            CO_NMT_receive);    /* this function will process received message */
    eca0:	4a12      	ldr	r2, [pc, #72]	; (ecec <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x100>)
    eca2:	9202      	str	r2, [sp, #8]
    eca4:	9301      	str	r3, [sp, #4]
    eca6:	2300      	movs	r3, #0
    eca8:	9300      	str	r3, [sp, #0]
    ecaa:	f240 73ff 	movw	r3, #2047	; 0x7ff
    ecae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    ecb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    ecb2:	4c0f      	ldr	r4, [pc, #60]	; (ecf0 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x104>)
    ecb4:	47a0      	blx	r4

    /* configure HB CAN transmission */
    NMT->HB_CANdev = HB_CANdev;
    ecb6:	68fb      	ldr	r3, [r7, #12]
    ecb8:	681b      	ldr	r3, [r3, #0]
    ecba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    ecbc:	619a      	str	r2, [r3, #24]
    NMT->HB_TXbuff =ptrCODriverClass->CAN_Tx_BufferInit(
    ecbe:	68fb      	ldr	r3, [r7, #12]
    ecc0:	681c      	ldr	r4, [r3, #0]
    ecc2:	4b09      	ldr	r3, [pc, #36]	; (ece8 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    ecc4:	6818      	ldr	r0, [r3, #0]
    ecc6:	2300      	movs	r3, #0
    ecc8:	9301      	str	r3, [sp, #4]
    ecca:	2301      	movs	r3, #1
    eccc:	9300      	str	r3, [sp, #0]
    ecce:	2300      	movs	r3, #0
    ecd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
    ecd2:	6b79      	ldr	r1, [r7, #52]	; 0x34
    ecd4:	4d07      	ldr	r5, [pc, #28]	; (ecf4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x108>)
    ecd6:	47a8      	blx	r5
    ecd8:	4603      	mov	r3, r0
    ecda:	6223      	str	r3, [r4, #32]
            CANidTxHB,          /* CAN identifier */
            0,                  /* rtr */
            1,                  /* number of data bytes */
            0);                 /* synchronous message flag bit */

    return CO_ERROR_NO;
    ecdc:	2300      	movs	r3, #0
}
    ecde:	4618      	mov	r0, r3
    ece0:	3710      	adds	r7, #16
    ece2:	46bd      	mov	sp, r7
    ece4:	bdb0      	pop	{r4, r5, r7, pc}
    ece6:	bf00      	nop
    ece8:	200019b4 	.word	0x200019b4
    ecec:	0000eb11 	.word	0x0000eb11
    ecf0:	0000d801 	.word	0x0000d801
    ecf4:	0000d901 	.word	0x0000d901

0000ecf8 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm>:
        uint32_t                HBtime,
        uint32_t                NMTstartup,
        uint8_t                 errorRegister,
        const uint8_t           errorBehavior[],
        uint32_t               *timerNext_ms)
{
    ecf8:	b580      	push	{r7, lr}
    ecfa:	b086      	sub	sp, #24
    ecfc:	af00      	add	r7, sp, #0
    ecfe:	60f8      	str	r0, [r7, #12]
    ed00:	60b9      	str	r1, [r7, #8]
    ed02:	607a      	str	r2, [r7, #4]
    ed04:	603b      	str	r3, [r7, #0]
    uint8_t CANpassive;

    uint8_t currentOperatingState = NMT->operatingState;
    ed06:	68fb      	ldr	r3, [r7, #12]
    ed08:	681b      	ldr	r3, [r3, #0]
    ed0a:	781b      	ldrb	r3, [r3, #0]
    ed0c:	75bb      	strb	r3, [r7, #22]

    NMT->HBproducerTimer += timeDifference_ms;
    ed0e:	68fb      	ldr	r3, [r7, #12]
    ed10:	681b      	ldr	r3, [r3, #0]
    ed12:	68fa      	ldr	r2, [r7, #12]
    ed14:	6812      	ldr	r2, [r2, #0]
    ed16:	68d1      	ldr	r1, [r2, #12]
    ed18:	68ba      	ldr	r2, [r7, #8]
    ed1a:	440a      	add	r2, r1
    ed1c:	60da      	str	r2, [r3, #12]

    /* Heartbeat producer message & Bootup message */
    if((HBtime != 0 && NMT->HBproducerTimer >= HBtime) || NMT->operatingState == CO_NMT_INITIALIZING){
    ed1e:	687b      	ldr	r3, [r7, #4]
    ed20:	2b00      	cmp	r3, #0
    ed22:	d005      	beq.n	ed30 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x38>
    ed24:	68fb      	ldr	r3, [r7, #12]
    ed26:	681b      	ldr	r3, [r3, #0]
    ed28:	68da      	ldr	r2, [r3, #12]
    ed2a:	687b      	ldr	r3, [r7, #4]
    ed2c:	429a      	cmp	r2, r3
    ed2e:	d204      	bcs.n	ed3a <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x42>
    ed30:	68fb      	ldr	r3, [r7, #12]
    ed32:	681b      	ldr	r3, [r3, #0]
    ed34:	781b      	ldrb	r3, [r3, #0]
    ed36:	2b00      	cmp	r3, #0
    ed38:	d139      	bne.n	edae <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0xb6>

        /* Start from the beginning. If OS is slow, time sliding may occur. However, heartbeat is
         * not for synchronization, it is for health report. */
        NMT->HBproducerTimer = 0;
    ed3a:	68fb      	ldr	r3, [r7, #12]
    ed3c:	681b      	ldr	r3, [r3, #0]
    ed3e:	2200      	movs	r2, #0
    ed40:	60da      	str	r2, [r3, #12]

        NMT->HB_TXbuff->data[0] = NMT->operatingState;
    ed42:	68fb      	ldr	r3, [r7, #12]
    ed44:	681b      	ldr	r3, [r3, #0]
    ed46:	6a1b      	ldr	r3, [r3, #32]
    ed48:	68fa      	ldr	r2, [r7, #12]
    ed4a:	6812      	ldr	r2, [r2, #0]
    ed4c:	7812      	ldrb	r2, [r2, #0]
    ed4e:	715a      	strb	r2, [r3, #5]
        ptrCODriverClass->CAN_Send(NMT->HB_TXbuff);
    ed50:	4b8d      	ldr	r3, [pc, #564]	; (ef88 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x290>)
    ed52:	681a      	ldr	r2, [r3, #0]
    ed54:	68fb      	ldr	r3, [r7, #12]
    ed56:	681b      	ldr	r3, [r3, #0]
    ed58:	6a1b      	ldr	r3, [r3, #32]
    ed5a:	4619      	mov	r1, r3
    ed5c:	4610      	mov	r0, r2
    ed5e:	4b8b      	ldr	r3, [pc, #556]	; (ef8c <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x294>)
    ed60:	4798      	blx	r3

        if(NMT->operatingState == CO_NMT_INITIALIZING){
    ed62:	68fb      	ldr	r3, [r7, #12]
    ed64:	681b      	ldr	r3, [r3, #0]
    ed66:	781b      	ldrb	r3, [r3, #0]
    ed68:	2b00      	cmp	r3, #0
    ed6a:	d120      	bne.n	edae <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0xb6>
            if(HBtime > NMT->firstHBTime) NMT->HBproducerTimer = HBtime - NMT->firstHBTime;
    ed6c:	68fb      	ldr	r3, [r7, #12]
    ed6e:	681b      	ldr	r3, [r3, #0]
    ed70:	691a      	ldr	r2, [r3, #16]
    ed72:	687b      	ldr	r3, [r7, #4]
    ed74:	429a      	cmp	r2, r3
    ed76:	d208      	bcs.n	ed8a <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x92>
    ed78:	68fb      	ldr	r3, [r7, #12]
    ed7a:	681b      	ldr	r3, [r3, #0]
    ed7c:	68fa      	ldr	r2, [r7, #12]
    ed7e:	6812      	ldr	r2, [r2, #0]
    ed80:	6912      	ldr	r2, [r2, #16]
    ed82:	6879      	ldr	r1, [r7, #4]
    ed84:	1a8a      	subs	r2, r1, r2
    ed86:	60da      	str	r2, [r3, #12]
    ed88:	e003      	b.n	ed92 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x9a>
            else                          NMT->HBproducerTimer = 0;
    ed8a:	68fb      	ldr	r3, [r7, #12]
    ed8c:	681b      	ldr	r3, [r3, #0]
    ed8e:	2200      	movs	r2, #0
    ed90:	60da      	str	r2, [r3, #12]

            if((NMTstartup & 0x04) == 0) NMT->operatingState = CO_NMT_OPERATIONAL;
    ed92:	683b      	ldr	r3, [r7, #0]
    ed94:	f003 0304 	and.w	r3, r3, #4
    ed98:	2b00      	cmp	r3, #0
    ed9a:	d104      	bne.n	eda6 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0xae>
    ed9c:	68fb      	ldr	r3, [r7, #12]
    ed9e:	681b      	ldr	r3, [r3, #0]
    eda0:	2205      	movs	r2, #5
    eda2:	701a      	strb	r2, [r3, #0]
    eda4:	e003      	b.n	edae <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0xb6>
            else                         NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
    eda6:	68fb      	ldr	r3, [r7, #12]
    eda8:	681b      	ldr	r3, [r3, #0]
    edaa:	227f      	movs	r2, #127	; 0x7f
    edac:	701a      	strb	r2, [r3, #0]
        }
    }


    /* Calculate, when next Heartbeat needs to be send and lower timerNext_ms if necessary. */
    if(HBtime != 0 && timerNext_ms != NULL){
    edae:	687b      	ldr	r3, [r7, #4]
    edb0:	2b00      	cmp	r3, #0
    edb2:	d01a      	beq.n	edea <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0xf2>
    edb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    edb6:	2b00      	cmp	r3, #0
    edb8:	d017      	beq.n	edea <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0xf2>
        if(NMT->HBproducerTimer < HBtime){
    edba:	68fb      	ldr	r3, [r7, #12]
    edbc:	681b      	ldr	r3, [r3, #0]
    edbe:	68da      	ldr	r2, [r3, #12]
    edc0:	687b      	ldr	r3, [r7, #4]
    edc2:	429a      	cmp	r2, r3
    edc4:	d20e      	bcs.n	ede4 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0xec>
            uint32_t diff = HBtime - NMT->HBproducerTimer;
    edc6:	68fb      	ldr	r3, [r7, #12]
    edc8:	681b      	ldr	r3, [r3, #0]
    edca:	68db      	ldr	r3, [r3, #12]
    edcc:	687a      	ldr	r2, [r7, #4]
    edce:	1ad3      	subs	r3, r2, r3
    edd0:	613b      	str	r3, [r7, #16]
            if(*timerNext_ms > diff){
    edd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    edd4:	681a      	ldr	r2, [r3, #0]
    edd6:	693b      	ldr	r3, [r7, #16]
    edd8:	429a      	cmp	r2, r3
    edda:	d906      	bls.n	edea <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0xf2>
                *timerNext_ms = diff;
    eddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    edde:	693a      	ldr	r2, [r7, #16]
    ede0:	601a      	str	r2, [r3, #0]
    ede2:	e002      	b.n	edea <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0xf2>
            }
        }else{
            *timerNext_ms = 0;
    ede4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ede6:	2200      	movs	r2, #0
    ede8:	601a      	str	r2, [r3, #0]
        }
    }


    /* CAN passive flag */
    CANpassive = 0;
    edea:	2300      	movs	r3, #0
    edec:	75fb      	strb	r3, [r7, #23]
    if(ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_CAN_TX_BUS_PASSIVE) || ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_CAN_RX_BUS_PASSIVE))
    edee:	4b66      	ldr	r3, [pc, #408]	; (ef88 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x290>)
    edf0:	681b      	ldr	r3, [r3, #0]
    edf2:	1d18      	adds	r0, r3, #4
    edf4:	68fb      	ldr	r3, [r7, #12]
    edf6:	681b      	ldr	r3, [r3, #0]
    edf8:	695b      	ldr	r3, [r3, #20]
    edfa:	691b      	ldr	r3, [r3, #16]
    edfc:	2207      	movs	r2, #7
    edfe:	4619      	mov	r1, r3
    ee00:	4b63      	ldr	r3, [pc, #396]	; (ef90 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x298>)
    ee02:	4798      	blx	r3
    ee04:	4603      	mov	r3, r0
    ee06:	2b00      	cmp	r3, #0
    ee08:	d10d      	bne.n	ee26 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x12e>
    ee0a:	4b5f      	ldr	r3, [pc, #380]	; (ef88 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x290>)
    ee0c:	681b      	ldr	r3, [r3, #0]
    ee0e:	1d18      	adds	r0, r3, #4
    ee10:	68fb      	ldr	r3, [r7, #12]
    ee12:	681b      	ldr	r3, [r3, #0]
    ee14:	695b      	ldr	r3, [r3, #20]
    ee16:	691b      	ldr	r3, [r3, #16]
    ee18:	2206      	movs	r2, #6
    ee1a:	4619      	mov	r1, r3
    ee1c:	4b5c      	ldr	r3, [pc, #368]	; (ef90 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x298>)
    ee1e:	4798      	blx	r3
    ee20:	4603      	mov	r3, r0
    ee22:	2b00      	cmp	r3, #0
    ee24:	d001      	beq.n	ee2a <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x132>
    ee26:	2301      	movs	r3, #1
    ee28:	e000      	b.n	ee2c <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x134>
    ee2a:	2300      	movs	r3, #0
    ee2c:	2b00      	cmp	r3, #0
    ee2e:	d001      	beq.n	ee34 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x13c>
        CANpassive = 1;
    ee30:	2301      	movs	r3, #1
    ee32:	75fb      	strb	r3, [r7, #23]


    /* CANopen green RUN LED (DR 303-3) */
    switch(NMT->operatingState){
    ee34:	68fb      	ldr	r3, [r7, #12]
    ee36:	681b      	ldr	r3, [r3, #0]
    ee38:	781b      	ldrb	r3, [r3, #0]
    ee3a:	2b05      	cmp	r3, #5
    ee3c:	d013      	beq.n	ee66 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x16e>
    ee3e:	2b7f      	cmp	r3, #127	; 0x7f
    ee40:	d009      	beq.n	ee56 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x15e>
    ee42:	2b04      	cmp	r3, #4
    ee44:	d114      	bne.n	ee70 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x178>
        case CO_NMT_STOPPED:          NMT->LEDgreenRun = NMT->LEDsingleFlash;   break;
    ee46:	68fb      	ldr	r3, [r7, #12]
    ee48:	681b      	ldr	r3, [r3, #0]
    ee4a:	68fa      	ldr	r2, [r7, #12]
    ee4c:	6812      	ldr	r2, [r2, #0]
    ee4e:	f992 2003 	ldrsb.w	r2, [r2, #3]
    ee52:	71da      	strb	r2, [r3, #7]
    ee54:	e00c      	b.n	ee70 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x178>
        case CO_NMT_PRE_OPERATIONAL:  NMT->LEDgreenRun = NMT->LEDblinking;      break;
    ee56:	68fb      	ldr	r3, [r7, #12]
    ee58:	681b      	ldr	r3, [r3, #0]
    ee5a:	68fa      	ldr	r2, [r7, #12]
    ee5c:	6812      	ldr	r2, [r2, #0]
    ee5e:	f992 2002 	ldrsb.w	r2, [r2, #2]
    ee62:	71da      	strb	r2, [r3, #7]
    ee64:	e004      	b.n	ee70 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x178>
        case CO_NMT_OPERATIONAL:      NMT->LEDgreenRun = 1;                     break;
    ee66:	68fb      	ldr	r3, [r7, #12]
    ee68:	681b      	ldr	r3, [r3, #0]
    ee6a:	2201      	movs	r2, #1
    ee6c:	71da      	strb	r2, [r3, #7]
    ee6e:	bf00      	nop
    }


    /* CANopen red ERROR LED (DR 303-3) */
    if(ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_CAN_TX_BUS_OFF))
    ee70:	4b45      	ldr	r3, [pc, #276]	; (ef88 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x290>)
    ee72:	681b      	ldr	r3, [r3, #0]
    ee74:	1d18      	adds	r0, r3, #4
    ee76:	68fb      	ldr	r3, [r7, #12]
    ee78:	681b      	ldr	r3, [r3, #0]
    ee7a:	695b      	ldr	r3, [r3, #20]
    ee7c:	691b      	ldr	r3, [r3, #16]
    ee7e:	2212      	movs	r2, #18
    ee80:	4619      	mov	r1, r3
    ee82:	4b43      	ldr	r3, [pc, #268]	; (ef90 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x298>)
    ee84:	4798      	blx	r3
    ee86:	4603      	mov	r3, r0
    ee88:	2b00      	cmp	r3, #0
    ee8a:	bf14      	ite	ne
    ee8c:	2301      	movne	r3, #1
    ee8e:	2300      	moveq	r3, #0
    ee90:	b2db      	uxtb	r3, r3
    ee92:	2b00      	cmp	r3, #0
    ee94:	d004      	beq.n	eea0 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x1a8>
        NMT->LEDredError = 1;
    ee96:	68fb      	ldr	r3, [r7, #12]
    ee98:	681b      	ldr	r3, [r3, #0]
    ee9a:	2201      	movs	r2, #1
    ee9c:	721a      	strb	r2, [r3, #8]
    ee9e:	e07d      	b.n	ef9c <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x2a4>

    else if(ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_SYNC_TIME_OUT))
    eea0:	4b39      	ldr	r3, [pc, #228]	; (ef88 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x290>)
    eea2:	681b      	ldr	r3, [r3, #0]
    eea4:	1d18      	adds	r0, r3, #4
    eea6:	68fb      	ldr	r3, [r7, #12]
    eea8:	681b      	ldr	r3, [r3, #0]
    eeaa:	695b      	ldr	r3, [r3, #20]
    eeac:	691b      	ldr	r3, [r3, #16]
    eeae:	2218      	movs	r2, #24
    eeb0:	4619      	mov	r1, r3
    eeb2:	4b37      	ldr	r3, [pc, #220]	; (ef90 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x298>)
    eeb4:	4798      	blx	r3
    eeb6:	4603      	mov	r3, r0
    eeb8:	2b00      	cmp	r3, #0
    eeba:	bf14      	ite	ne
    eebc:	2301      	movne	r3, #1
    eebe:	2300      	moveq	r3, #0
    eec0:	b2db      	uxtb	r3, r3
    eec2:	2b00      	cmp	r3, #0
    eec4:	d007      	beq.n	eed6 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x1de>
        NMT->LEDredError = NMT->LEDtripleFlash;
    eec6:	68fb      	ldr	r3, [r7, #12]
    eec8:	681b      	ldr	r3, [r3, #0]
    eeca:	68fa      	ldr	r2, [r7, #12]
    eecc:	6812      	ldr	r2, [r2, #0]
    eece:	f992 2005 	ldrsb.w	r2, [r2, #5]
    eed2:	721a      	strb	r2, [r3, #8]
    eed4:	e062      	b.n	ef9c <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x2a4>

    else if(ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_HEARTBEAT_CONSUMER) || ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_HB_CONSUMER_REMOTE_RESET))
    eed6:	4b2c      	ldr	r3, [pc, #176]	; (ef88 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x290>)
    eed8:	681b      	ldr	r3, [r3, #0]
    eeda:	1d18      	adds	r0, r3, #4
    eedc:	68fb      	ldr	r3, [r7, #12]
    eede:	681b      	ldr	r3, [r3, #0]
    eee0:	695b      	ldr	r3, [r3, #20]
    eee2:	691b      	ldr	r3, [r3, #16]
    eee4:	221b      	movs	r2, #27
    eee6:	4619      	mov	r1, r3
    eee8:	4b29      	ldr	r3, [pc, #164]	; (ef90 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x298>)
    eeea:	4798      	blx	r3
    eeec:	4603      	mov	r3, r0
    eeee:	2b00      	cmp	r3, #0
    eef0:	d10d      	bne.n	ef0e <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x216>
    eef2:	4b25      	ldr	r3, [pc, #148]	; (ef88 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x290>)
    eef4:	681b      	ldr	r3, [r3, #0]
    eef6:	1d18      	adds	r0, r3, #4
    eef8:	68fb      	ldr	r3, [r7, #12]
    eefa:	681b      	ldr	r3, [r3, #0]
    eefc:	695b      	ldr	r3, [r3, #20]
    eefe:	691b      	ldr	r3, [r3, #16]
    ef00:	221c      	movs	r2, #28
    ef02:	4619      	mov	r1, r3
    ef04:	4b22      	ldr	r3, [pc, #136]	; (ef90 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x298>)
    ef06:	4798      	blx	r3
    ef08:	4603      	mov	r3, r0
    ef0a:	2b00      	cmp	r3, #0
    ef0c:	d001      	beq.n	ef12 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x21a>
    ef0e:	2301      	movs	r3, #1
    ef10:	e000      	b.n	ef14 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x21c>
    ef12:	2300      	movs	r3, #0
    ef14:	2b00      	cmp	r3, #0
    ef16:	d007      	beq.n	ef28 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x230>
        NMT->LEDredError = NMT->LEDdoubleFlash;
    ef18:	68fb      	ldr	r3, [r7, #12]
    ef1a:	681b      	ldr	r3, [r3, #0]
    ef1c:	68fa      	ldr	r2, [r7, #12]
    ef1e:	6812      	ldr	r2, [r2, #0]
    ef20:	f992 2004 	ldrsb.w	r2, [r2, #4]
    ef24:	721a      	strb	r2, [r3, #8]
    ef26:	e039      	b.n	ef9c <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x2a4>

    else if(CANpassive ||  ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_CAN_BUS_WARNING))
    ef28:	7dfb      	ldrb	r3, [r7, #23]
    ef2a:	2b00      	cmp	r3, #0
    ef2c:	d10d      	bne.n	ef4a <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x252>
    ef2e:	4b16      	ldr	r3, [pc, #88]	; (ef88 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x290>)
    ef30:	681b      	ldr	r3, [r3, #0]
    ef32:	1d18      	adds	r0, r3, #4
    ef34:	68fb      	ldr	r3, [r7, #12]
    ef36:	681b      	ldr	r3, [r3, #0]
    ef38:	695b      	ldr	r3, [r3, #20]
    ef3a:	691b      	ldr	r3, [r3, #16]
    ef3c:	2201      	movs	r2, #1
    ef3e:	4619      	mov	r1, r3
    ef40:	4b13      	ldr	r3, [pc, #76]	; (ef90 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x298>)
    ef42:	4798      	blx	r3
    ef44:	4603      	mov	r3, r0
    ef46:	2b00      	cmp	r3, #0
    ef48:	d001      	beq.n	ef4e <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x256>
    ef4a:	2301      	movs	r3, #1
    ef4c:	e000      	b.n	ef50 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x258>
    ef4e:	2300      	movs	r3, #0
    ef50:	2b00      	cmp	r3, #0
    ef52:	d007      	beq.n	ef64 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>
        NMT->LEDredError = NMT->LEDsingleFlash;
    ef54:	68fb      	ldr	r3, [r7, #12]
    ef56:	681b      	ldr	r3, [r3, #0]
    ef58:	68fa      	ldr	r2, [r7, #12]
    ef5a:	6812      	ldr	r2, [r2, #0]
    ef5c:	f992 2003 	ldrsb.w	r2, [r2, #3]
    ef60:	721a      	strb	r2, [r3, #8]
    ef62:	e01b      	b.n	ef9c <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x2a4>

    else if(errorRegister)
    ef64:	f897 3020 	ldrb.w	r3, [r7, #32]
    ef68:	2b00      	cmp	r3, #0
    ef6a:	d013      	beq.n	ef94 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x29c>
        NMT->LEDredError = (NMT->LEDblinking>=0)?-1:1;
    ef6c:	68fb      	ldr	r3, [r7, #12]
    ef6e:	681b      	ldr	r3, [r3, #0]
    ef70:	68fa      	ldr	r2, [r7, #12]
    ef72:	6812      	ldr	r2, [r2, #0]
    ef74:	f992 2002 	ldrsb.w	r2, [r2, #2]
    ef78:	2a00      	cmp	r2, #0
    ef7a:	db02      	blt.n	ef82 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x28a>
    ef7c:	f04f 32ff 	mov.w	r2, #4294967295
    ef80:	e000      	b.n	ef84 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x28c>
    ef82:	2201      	movs	r2, #1
    ef84:	721a      	strb	r2, [r3, #8]
    ef86:	e009      	b.n	ef9c <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x2a4>
    ef88:	200019b4 	.word	0x200019b4
    ef8c:	0000d9ad 	.word	0x0000d9ad
    ef90:	0000e6e1 	.word	0x0000e6e1

    else
        NMT->LEDredError = -1;
    ef94:	68fb      	ldr	r3, [r7, #12]
    ef96:	681b      	ldr	r3, [r3, #0]
    ef98:	22ff      	movs	r2, #255	; 0xff
    ef9a:	721a      	strb	r2, [r3, #8]


    /* in case of error enter pre-operational state */
    if(errorBehavior && (NMT->operatingState == CO_NMT_OPERATIONAL)){
    ef9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ef9e:	2b00      	cmp	r3, #0
    efa0:	f000 80ca 	beq.w	f138 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x440>
    efa4:	68fb      	ldr	r3, [r7, #12]
    efa6:	681b      	ldr	r3, [r3, #0]
    efa8:	781b      	ldrb	r3, [r3, #0]
    efaa:	2b05      	cmp	r3, #5
    efac:	f040 80c4 	bne.w	f138 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x440>
        if(CANpassive && (errorBehavior[2] == 0 || errorBehavior[2] == 2)) errorRegister |= 0x10;
    efb0:	7dfb      	ldrb	r3, [r7, #23]
    efb2:	2b00      	cmp	r3, #0
    efb4:	d00f      	beq.n	efd6 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x2de>
    efb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    efb8:	3302      	adds	r3, #2
    efba:	781b      	ldrb	r3, [r3, #0]
    efbc:	2b00      	cmp	r3, #0
    efbe:	d004      	beq.n	efca <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x2d2>
    efc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    efc2:	3302      	adds	r3, #2
    efc4:	781b      	ldrb	r3, [r3, #0]
    efc6:	2b02      	cmp	r3, #2
    efc8:	d105      	bne.n	efd6 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x2de>
    efca:	f897 3020 	ldrb.w	r3, [r7, #32]
    efce:	f043 0310 	orr.w	r3, r3, #16
    efd2:	f887 3020 	strb.w	r3, [r7, #32]

        if(errorRegister){
    efd6:	f897 3020 	ldrb.w	r3, [r7, #32]
    efda:	2b00      	cmp	r3, #0
    efdc:	f000 80ac 	beq.w	f138 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x440>
            /* Communication error */
            if(errorRegister & CO_ERR_REG_COMM_ERR){
    efe0:	f897 3020 	ldrb.w	r3, [r7, #32]
    efe4:	f003 0310 	and.w	r3, r3, #16
    efe8:	2b00      	cmp	r3, #0
    efea:	d053      	beq.n	f094 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x39c>
                if(errorBehavior[1] == 0){
    efec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    efee:	3301      	adds	r3, #1
    eff0:	781b      	ldrb	r3, [r3, #0]
    eff2:	2b00      	cmp	r3, #0
    eff4:	d104      	bne.n	f000 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x308>
                    NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
    eff6:	68fb      	ldr	r3, [r7, #12]
    eff8:	681b      	ldr	r3, [r3, #0]
    effa:	227f      	movs	r2, #127	; 0x7f
    effc:	701a      	strb	r2, [r3, #0]
    effe:	e049      	b.n	f094 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x39c>
                }
                else if(errorBehavior[1] == 2){
    f000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f002:	3301      	adds	r3, #1
    f004:	781b      	ldrb	r3, [r3, #0]
    f006:	2b02      	cmp	r3, #2
    f008:	d104      	bne.n	f014 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x31c>
                    NMT->operatingState = CO_NMT_STOPPED;
    f00a:	68fb      	ldr	r3, [r7, #12]
    f00c:	681b      	ldr	r3, [r3, #0]
    f00e:	2204      	movs	r2, #4
    f010:	701a      	strb	r2, [r3, #0]
    f012:	e03f      	b.n	f094 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x39c>
                }
                else if( ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_CAN_TX_BUS_OFF)
    f014:	4b55      	ldr	r3, [pc, #340]	; (f16c <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x474>)
    f016:	681b      	ldr	r3, [r3, #0]
    f018:	1d18      	adds	r0, r3, #4
    f01a:	68fb      	ldr	r3, [r7, #12]
    f01c:	681b      	ldr	r3, [r3, #0]
    f01e:	695b      	ldr	r3, [r3, #20]
    f020:	691b      	ldr	r3, [r3, #16]
    f022:	2212      	movs	r2, #18
    f024:	4619      	mov	r1, r3
    f026:	4b52      	ldr	r3, [pc, #328]	; (f170 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x478>)
    f028:	4798      	blx	r3
    f02a:	4603      	mov	r3, r0
                     ||  ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_HEARTBEAT_CONSUMER)
                     ||  ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_HB_CONSUMER_REMOTE_RESET))
    f02c:	2b00      	cmp	r3, #0
    f02e:	d11b      	bne.n	f068 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x370>
                     ||  ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_HEARTBEAT_CONSUMER)
    f030:	4b4e      	ldr	r3, [pc, #312]	; (f16c <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x474>)
    f032:	681b      	ldr	r3, [r3, #0]
    f034:	1d18      	adds	r0, r3, #4
    f036:	68fb      	ldr	r3, [r7, #12]
    f038:	681b      	ldr	r3, [r3, #0]
    f03a:	695b      	ldr	r3, [r3, #20]
    f03c:	691b      	ldr	r3, [r3, #16]
    f03e:	221b      	movs	r2, #27
    f040:	4619      	mov	r1, r3
    f042:	4b4b      	ldr	r3, [pc, #300]	; (f170 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x478>)
    f044:	4798      	blx	r3
    f046:	4603      	mov	r3, r0
    f048:	2b00      	cmp	r3, #0
    f04a:	d10d      	bne.n	f068 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x370>
                     ||  ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_HB_CONSUMER_REMOTE_RESET))
    f04c:	4b47      	ldr	r3, [pc, #284]	; (f16c <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x474>)
    f04e:	681b      	ldr	r3, [r3, #0]
    f050:	1d18      	adds	r0, r3, #4
    f052:	68fb      	ldr	r3, [r7, #12]
    f054:	681b      	ldr	r3, [r3, #0]
    f056:	695b      	ldr	r3, [r3, #20]
    f058:	691b      	ldr	r3, [r3, #16]
    f05a:	221c      	movs	r2, #28
    f05c:	4619      	mov	r1, r3
    f05e:	4b44      	ldr	r3, [pc, #272]	; (f170 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x478>)
    f060:	4798      	blx	r3
    f062:	4603      	mov	r3, r0
    f064:	2b00      	cmp	r3, #0
    f066:	d001      	beq.n	f06c <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x374>
    f068:	2301      	movs	r3, #1
    f06a:	e000      	b.n	f06e <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x376>
    f06c:	2300      	movs	r3, #0
                else if( ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_CAN_TX_BUS_OFF)
    f06e:	2b00      	cmp	r3, #0
    f070:	d010      	beq.n	f094 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x39c>
                {
                    if(errorBehavior[0] == 0){
    f072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f074:	781b      	ldrb	r3, [r3, #0]
    f076:	2b00      	cmp	r3, #0
    f078:	d104      	bne.n	f084 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x38c>
                        NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
    f07a:	68fb      	ldr	r3, [r7, #12]
    f07c:	681b      	ldr	r3, [r3, #0]
    f07e:	227f      	movs	r2, #127	; 0x7f
    f080:	701a      	strb	r2, [r3, #0]
    f082:	e007      	b.n	f094 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x39c>
                    }
                    else if(errorBehavior[0] == 2){
    f084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f086:	781b      	ldrb	r3, [r3, #0]
    f088:	2b02      	cmp	r3, #2
    f08a:	d103      	bne.n	f094 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x39c>
                        NMT->operatingState = CO_NMT_STOPPED;
    f08c:	68fb      	ldr	r3, [r7, #12]
    f08e:	681b      	ldr	r3, [r3, #0]
    f090:	2204      	movs	r2, #4
    f092:	701a      	strb	r2, [r3, #0]
                    }
                }
            }

            /* Generic error */
            if(errorRegister & CO_ERR_REG_GENERIC_ERR){
    f094:	f897 3020 	ldrb.w	r3, [r7, #32]
    f098:	f003 0301 	and.w	r3, r3, #1
    f09c:	2b00      	cmp	r3, #0
    f09e:	d012      	beq.n	f0c6 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x3ce>
                if      (errorBehavior[3] == 0) NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
    f0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f0a2:	3303      	adds	r3, #3
    f0a4:	781b      	ldrb	r3, [r3, #0]
    f0a6:	2b00      	cmp	r3, #0
    f0a8:	d104      	bne.n	f0b4 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x3bc>
    f0aa:	68fb      	ldr	r3, [r7, #12]
    f0ac:	681b      	ldr	r3, [r3, #0]
    f0ae:	227f      	movs	r2, #127	; 0x7f
    f0b0:	701a      	strb	r2, [r3, #0]
    f0b2:	e008      	b.n	f0c6 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x3ce>
                else if (errorBehavior[3] == 2) NMT->operatingState = CO_NMT_STOPPED;
    f0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f0b6:	3303      	adds	r3, #3
    f0b8:	781b      	ldrb	r3, [r3, #0]
    f0ba:	2b02      	cmp	r3, #2
    f0bc:	d103      	bne.n	f0c6 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x3ce>
    f0be:	68fb      	ldr	r3, [r7, #12]
    f0c0:	681b      	ldr	r3, [r3, #0]
    f0c2:	2204      	movs	r2, #4
    f0c4:	701a      	strb	r2, [r3, #0]
            }

            /* Device profile error */
            if(errorRegister & CO_ERR_REG_DEV_PROFILE){
    f0c6:	f897 3020 	ldrb.w	r3, [r7, #32]
    f0ca:	f003 0320 	and.w	r3, r3, #32
    f0ce:	2b00      	cmp	r3, #0
    f0d0:	d012      	beq.n	f0f8 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x400>
                if      (errorBehavior[4] == 0) NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
    f0d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f0d4:	3304      	adds	r3, #4
    f0d6:	781b      	ldrb	r3, [r3, #0]
    f0d8:	2b00      	cmp	r3, #0
    f0da:	d104      	bne.n	f0e6 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x3ee>
    f0dc:	68fb      	ldr	r3, [r7, #12]
    f0de:	681b      	ldr	r3, [r3, #0]
    f0e0:	227f      	movs	r2, #127	; 0x7f
    f0e2:	701a      	strb	r2, [r3, #0]
    f0e4:	e008      	b.n	f0f8 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x400>
                else if (errorBehavior[4] == 2) NMT->operatingState = CO_NMT_STOPPED;
    f0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f0e8:	3304      	adds	r3, #4
    f0ea:	781b      	ldrb	r3, [r3, #0]
    f0ec:	2b02      	cmp	r3, #2
    f0ee:	d103      	bne.n	f0f8 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x400>
    f0f0:	68fb      	ldr	r3, [r7, #12]
    f0f2:	681b      	ldr	r3, [r3, #0]
    f0f4:	2204      	movs	r2, #4
    f0f6:	701a      	strb	r2, [r3, #0]
            }

            /* Manufacturer specific error */
            if(errorRegister & CO_ERR_REG_MANUFACTURER){
    f0f8:	f997 3020 	ldrsb.w	r3, [r7, #32]
    f0fc:	2b00      	cmp	r3, #0
    f0fe:	da12      	bge.n	f126 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x42e>
                if      (errorBehavior[5] == 0) NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
    f100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f102:	3305      	adds	r3, #5
    f104:	781b      	ldrb	r3, [r3, #0]
    f106:	2b00      	cmp	r3, #0
    f108:	d104      	bne.n	f114 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x41c>
    f10a:	68fb      	ldr	r3, [r7, #12]
    f10c:	681b      	ldr	r3, [r3, #0]
    f10e:	227f      	movs	r2, #127	; 0x7f
    f110:	701a      	strb	r2, [r3, #0]
    f112:	e008      	b.n	f126 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x42e>
                else if (errorBehavior[5] == 2) NMT->operatingState = CO_NMT_STOPPED;
    f114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f116:	3305      	adds	r3, #5
    f118:	781b      	ldrb	r3, [r3, #0]
    f11a:	2b02      	cmp	r3, #2
    f11c:	d103      	bne.n	f126 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x42e>
    f11e:	68fb      	ldr	r3, [r7, #12]
    f120:	681b      	ldr	r3, [r3, #0]
    f122:	2204      	movs	r2, #4
    f124:	701a      	strb	r2, [r3, #0]
            }

            /* if operational state is lost, send HB immediately. */
            if(NMT->operatingState != CO_NMT_OPERATIONAL)
    f126:	68fb      	ldr	r3, [r7, #12]
    f128:	681b      	ldr	r3, [r3, #0]
    f12a:	781b      	ldrb	r3, [r3, #0]
    f12c:	2b05      	cmp	r3, #5
    f12e:	d003      	beq.n	f138 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x440>
                NMT->HBproducerTimer = HBtime;
    f130:	68fb      	ldr	r3, [r7, #12]
    f132:	681b      	ldr	r3, [r3, #0]
    f134:	687a      	ldr	r2, [r7, #4]
    f136:	60da      	str	r2, [r3, #12]
        }
    }

    if(NMT->ptrState!=NULL && currentOperatingState!=NMT->operatingState){
    f138:	68fb      	ldr	r3, [r7, #12]
    f13a:	681b      	ldr	r3, [r3, #0]
    f13c:	69db      	ldr	r3, [r3, #28]
    f13e:	2b00      	cmp	r3, #0
    f140:	d00d      	beq.n	f15e <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x466>
    f142:	68fb      	ldr	r3, [r7, #12]
    f144:	681b      	ldr	r3, [r3, #0]
    f146:	781b      	ldrb	r3, [r3, #0]
    f148:	7dba      	ldrb	r2, [r7, #22]
    f14a:	429a      	cmp	r2, r3
    f14c:	d007      	beq.n	f15e <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x466>
        NMT->ptrState((CO_NMT_internalState_t)NMT->operatingState);
    f14e:	68fb      	ldr	r3, [r7, #12]
    f150:	681b      	ldr	r3, [r3, #0]
    f152:	69db      	ldr	r3, [r3, #28]
    f154:	68fa      	ldr	r2, [r7, #12]
    f156:	6812      	ldr	r2, [r2, #0]
    f158:	7812      	ldrb	r2, [r2, #0]
    f15a:	4610      	mov	r0, r2
    f15c:	4798      	blx	r3
    }

    return (CO_NMT_reset_cmd_t)NMT->resetCommand;
    f15e:	68fb      	ldr	r3, [r7, #12]
    f160:	681b      	ldr	r3, [r3, #0]
    f162:	7a5b      	ldrb	r3, [r3, #9]
}
    f164:	4618      	mov	r0, r3
    f166:	3718      	adds	r7, #24
    f168:	46bd      	mov	sp, r7
    f16a:	bd80      	pop	{r7, pc}
    f16c:	200019b4 	.word	0x200019b4
    f170:	0000e6e1 	.word	0x0000e6e1

0000f174 <_ZN12CO_PDO_ClassC1Ev>:


#include "CO_PDO_Class.h"
#include "CO_Driver_Class.h"
// default constructor
CO_PDO_Class::CO_PDO_Class()
    f174:	b480      	push	{r7}
    f176:	b083      	sub	sp, #12
    f178:	af00      	add	r7, sp, #0
    f17a:	6078      	str	r0, [r7, #4]
{
} //CO_PDO_Class
    f17c:	687b      	ldr	r3, [r7, #4]
    f17e:	4618      	mov	r0, r3
    f180:	370c      	adds	r7, #12
    f182:	46bd      	mov	sp, r7
    f184:	bc80      	pop	{r7}
    f186:	4770      	bx	lr

0000f188 <_ZN12CO_PDO_ClassD1Ev>:

// default destructor
CO_PDO_Class::~CO_PDO_Class()
    f188:	b480      	push	{r7}
    f18a:	b083      	sub	sp, #12
    f18c:	af00      	add	r7, sp, #0
    f18e:	6078      	str	r0, [r7, #4]
{
} //~CO_PDO_Class
    f190:	687b      	ldr	r3, [r7, #4]
    f192:	4618      	mov	r0, r3
    f194:	370c      	adds	r7, #12
    f196:	46bd      	mov	sp, r7
    f198:	bc80      	pop	{r7}
    f19a:	4770      	bx	lr

0000f19c <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t>:
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 * If new message arrives and previous message wasn't processed yet, then
 * previous message will be lost and overwritten by new message. That's OK with PDOs.
 */
static void CO_PDO_receive(void *object, const CO_CANrxMsg_t *msg){
    f19c:	b480      	push	{r7}
    f19e:	b085      	sub	sp, #20
    f1a0:	af00      	add	r7, sp, #0
    f1a2:	6078      	str	r0, [r7, #4]
    f1a4:	6039      	str	r1, [r7, #0]
    CO_RPDO_t *RPDO;

    RPDO = (CO_RPDO_t*)object;   /* this is the correct pointer type of the first argument */
    f1a6:	687b      	ldr	r3, [r7, #4]
    f1a8:	60fb      	str	r3, [r7, #12]

    if( (RPDO->valid) &&
    f1aa:	68fb      	ldr	r3, [r7, #12]
    f1ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
    f1b0:	2b00      	cmp	r3, #0
    f1b2:	d070      	beq.n	f296 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0xfa>
        (*RPDO->operatingState == CO_NMT_OPERATIONAL) &&
    f1b4:	68fb      	ldr	r3, [r7, #12]
    f1b6:	695b      	ldr	r3, [r3, #20]
    f1b8:	781b      	ldrb	r3, [r3, #0]
    if( (RPDO->valid) &&
    f1ba:	2b05      	cmp	r3, #5
    f1bc:	d16b      	bne.n	f296 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0xfa>
        (msg->DLC >= RPDO->dataLength))
    f1be:	683b      	ldr	r3, [r7, #0]
    f1c0:	7d1b      	ldrb	r3, [r3, #20]
    f1c2:	461a      	mov	r2, r3
    f1c4:	68fb      	ldr	r3, [r7, #12]
    f1c6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
        (*RPDO->operatingState == CO_NMT_OPERATIONAL) &&
    f1ca:	429a      	cmp	r2, r3
    f1cc:	db63      	blt.n	f296 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0xfa>
    {
        if(RPDO->synchronous && RPDO->SYNC->CANrxToggle) {
    f1ce:	68fb      	ldr	r3, [r7, #12]
    f1d0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
    f1d4:	2b00      	cmp	r3, #0
    f1d6:	d032      	beq.n	f23e <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0xa2>
    f1d8:	68fb      	ldr	r3, [r7, #12]
    f1da:	689b      	ldr	r3, [r3, #8]
    f1dc:	7edb      	ldrb	r3, [r3, #27]
    f1de:	2b00      	cmp	r3, #0
    f1e0:	d02d      	beq.n	f23e <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0xa2>
            /* copy data into second buffer and set 'new message' flag */
            RPDO->CANrxData[1][0] = msg->data[0];
    f1e2:	683b      	ldr	r3, [r7, #0]
    f1e4:	7d5a      	ldrb	r2, [r3, #21]
    f1e6:	68fb      	ldr	r3, [r7, #12]
    f1e8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            RPDO->CANrxData[1][1] = msg->data[1];
    f1ec:	683b      	ldr	r3, [r7, #0]
    f1ee:	7d9a      	ldrb	r2, [r3, #22]
    f1f0:	68fb      	ldr	r3, [r7, #12]
    f1f2:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
            RPDO->CANrxData[1][2] = msg->data[2];
    f1f6:	683b      	ldr	r3, [r7, #0]
    f1f8:	7dda      	ldrb	r2, [r3, #23]
    f1fa:	68fb      	ldr	r3, [r7, #12]
    f1fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            RPDO->CANrxData[1][3] = msg->data[3];
    f200:	683b      	ldr	r3, [r7, #0]
    f202:	7e1a      	ldrb	r2, [r3, #24]
    f204:	68fb      	ldr	r3, [r7, #12]
    f206:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            RPDO->CANrxData[1][4] = msg->data[4];
    f20a:	683b      	ldr	r3, [r7, #0]
    f20c:	7e5a      	ldrb	r2, [r3, #25]
    f20e:	68fb      	ldr	r3, [r7, #12]
    f210:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
            RPDO->CANrxData[1][5] = msg->data[5];
    f214:	683b      	ldr	r3, [r7, #0]
    f216:	7e9a      	ldrb	r2, [r3, #26]
    f218:	68fb      	ldr	r3, [r7, #12]
    f21a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            RPDO->CANrxData[1][6] = msg->data[6];
    f21e:	683b      	ldr	r3, [r7, #0]
    f220:	7eda      	ldrb	r2, [r3, #27]
    f222:	68fb      	ldr	r3, [r7, #12]
    f224:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            RPDO->CANrxData[1][7] = msg->data[7];
    f228:	683b      	ldr	r3, [r7, #0]
    f22a:	7f1a      	ldrb	r2, [r3, #28]
    f22c:	68fb      	ldr	r3, [r7, #12]
    f22e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

            RPDO->CANrxNew[1] = true;
    f232:	68fb      	ldr	r3, [r7, #12]
    f234:	2201      	movs	r2, #1
    f236:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    f23a:	bf00      	nop
            RPDO->CANrxData[0][7] = msg->data[7];

            RPDO->CANrxNew[0] = true;
        }
    }
}
    f23c:	e02b      	b.n	f296 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0xfa>
            RPDO->CANrxData[0][0] = msg->data[0];
    f23e:	683b      	ldr	r3, [r7, #0]
    f240:	7d5a      	ldrb	r2, [r3, #21]
    f242:	68fb      	ldr	r3, [r7, #12]
    f244:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
            RPDO->CANrxData[0][1] = msg->data[1];
    f248:	683b      	ldr	r3, [r7, #0]
    f24a:	7d9a      	ldrb	r2, [r3, #22]
    f24c:	68fb      	ldr	r3, [r7, #12]
    f24e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
            RPDO->CANrxData[0][2] = msg->data[2];
    f252:	683b      	ldr	r3, [r7, #0]
    f254:	7dda      	ldrb	r2, [r3, #23]
    f256:	68fb      	ldr	r3, [r7, #12]
    f258:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            RPDO->CANrxData[0][3] = msg->data[3];
    f25c:	683b      	ldr	r3, [r7, #0]
    f25e:	7e1a      	ldrb	r2, [r3, #24]
    f260:	68fb      	ldr	r3, [r7, #12]
    f262:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
            RPDO->CANrxData[0][4] = msg->data[4];
    f266:	683b      	ldr	r3, [r7, #0]
    f268:	7e5a      	ldrb	r2, [r3, #25]
    f26a:	68fb      	ldr	r3, [r7, #12]
    f26c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
            RPDO->CANrxData[0][5] = msg->data[5];
    f270:	683b      	ldr	r3, [r7, #0]
    f272:	7e9a      	ldrb	r2, [r3, #26]
    f274:	68fb      	ldr	r3, [r7, #12]
    f276:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
            RPDO->CANrxData[0][6] = msg->data[6];
    f27a:	683b      	ldr	r3, [r7, #0]
    f27c:	7eda      	ldrb	r2, [r3, #27]
    f27e:	68fb      	ldr	r3, [r7, #12]
    f280:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            RPDO->CANrxData[0][7] = msg->data[7];
    f284:	683b      	ldr	r3, [r7, #0]
    f286:	7f1a      	ldrb	r2, [r3, #28]
    f288:	68fb      	ldr	r3, [r7, #12]
    f28a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
            RPDO->CANrxNew[0] = true;
    f28e:	68fb      	ldr	r3, [r7, #12]
    f290:	2201      	movs	r2, #1
    f292:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
    f296:	bf00      	nop
    f298:	3714      	adds	r7, #20
    f29a:	46bd      	mov	sp, r7
    f29c:	bc80      	pop	{r7}
    f29e:	4770      	bx	lr

0000f2a0 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm>:
 *
 * @param RPDO RPDO object.
 * @param COB_IDUsedByRPDO _RPDO communication parameter_, _COB-ID for PDO_ variable
 * from Object dictionary (index 0x1400+, subindex 1).
 */
static void CO_RPDOconfigCom(CO_RPDO_t* RPDO, uint32_t COB_IDUsedByRPDO){
    f2a0:	b590      	push	{r4, r7, lr}
    f2a2:	b089      	sub	sp, #36	; 0x24
    f2a4:	af04      	add	r7, sp, #16
    f2a6:	6078      	str	r0, [r7, #4]
    f2a8:	6039      	str	r1, [r7, #0]
    uint32_t ID;
    CO_ReturnError_t r;

    ID = (uint32_t)COB_IDUsedByRPDO;
    f2aa:	683b      	ldr	r3, [r7, #0]
    f2ac:	60fb      	str	r3, [r7, #12]

    /* is RPDO used? */
    if((COB_IDUsedByRPDO & 0xBFFFF800L) == 0 && RPDO->dataLength && ID){
    f2ae:	683a      	ldr	r2, [r7, #0]
    f2b0:	4b2d      	ldr	r3, [pc, #180]	; (f368 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xc8>)
    f2b2:	4013      	ands	r3, r2
    f2b4:	2b00      	cmp	r3, #0
    f2b6:	d123      	bne.n	f300 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x60>
    f2b8:	687b      	ldr	r3, [r7, #4]
    f2ba:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
    f2be:	2b00      	cmp	r3, #0
    f2c0:	d01e      	beq.n	f300 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x60>
    f2c2:	68fb      	ldr	r3, [r7, #12]
    f2c4:	2b00      	cmp	r3, #0
    f2c6:	d01b      	beq.n	f300 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x60>
        /* is used default COB-ID? */
        if(ID == RPDO->defaultCOB_ID) ID += RPDO->nodeId;
    f2c8:	687b      	ldr	r3, [r7, #4]
    f2ca:	69da      	ldr	r2, [r3, #28]
    f2cc:	68fb      	ldr	r3, [r7, #12]
    f2ce:	429a      	cmp	r2, r3
    f2d0:	d105      	bne.n	f2de <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x3e>
    f2d2:	687b      	ldr	r3, [r7, #4]
    f2d4:	7e1b      	ldrb	r3, [r3, #24]
    f2d6:	461a      	mov	r2, r3
    f2d8:	68fb      	ldr	r3, [r7, #12]
    f2da:	4413      	add	r3, r2
    f2dc:	60fb      	str	r3, [r7, #12]
        RPDO->valid = true;
    f2de:	687b      	ldr	r3, [r7, #4]
    f2e0:	2201      	movs	r2, #1
    f2e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RPDO->synchronous = (RPDO->RPDOCommPar->transmissionType <= 240) ? true : false;
    f2e6:	687b      	ldr	r3, [r7, #4]
    f2e8:	68db      	ldr	r3, [r3, #12]
    f2ea:	7a1b      	ldrb	r3, [r3, #8]
    f2ec:	2bf0      	cmp	r3, #240	; 0xf0
    f2ee:	bfd4      	ite	le
    f2f0:	2301      	movle	r3, #1
    f2f2:	2300      	movgt	r3, #0
    f2f4:	b2db      	uxtb	r3, r3
    f2f6:	461a      	mov	r2, r3
    f2f8:	687b      	ldr	r3, [r7, #4]
    f2fa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    f2fe:	e00d      	b.n	f31c <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x7c>
    }
    else{
        ID = 0;
    f300:	2300      	movs	r3, #0
    f302:	60fb      	str	r3, [r7, #12]
        RPDO->valid = false;
    f304:	687b      	ldr	r3, [r7, #4]
    f306:	2200      	movs	r2, #0
    f308:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
    f30c:	687b      	ldr	r3, [r7, #4]
    f30e:	2200      	movs	r2, #0
    f310:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    f314:	687b      	ldr	r3, [r7, #4]
    f316:	2200      	movs	r2, #0
    f318:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    r = ptrCODriverClass->CAN_Rx_BufferInit(
    f31c:	4b13      	ldr	r3, [pc, #76]	; (f36c <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xcc>)
    f31e:	6818      	ldr	r0, [r3, #0]
    f320:	687b      	ldr	r3, [r7, #4]
    f322:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
            RPDO->CANdevRxIdx,      /* rx buffer index */
            ID,                     /* CAN identifier */
            0x7FF,                  /* mask */
            0,                      /* rtr */
            (void*)RPDO,            /* object passed to receive function */
            CO_PDO_receive);        /* this function will process received message */
    f324:	4b12      	ldr	r3, [pc, #72]	; (f370 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xd0>)
    f326:	9302      	str	r3, [sp, #8]
    f328:	687b      	ldr	r3, [r7, #4]
    f32a:	9301      	str	r3, [sp, #4]
    f32c:	2300      	movs	r3, #0
    f32e:	9300      	str	r3, [sp, #0]
    f330:	f240 73ff 	movw	r3, #2047	; 0x7ff
    f334:	68fa      	ldr	r2, [r7, #12]
    f336:	4c0f      	ldr	r4, [pc, #60]	; (f374 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xd4>)
    f338:	47a0      	blx	r4
    f33a:	4603      	mov	r3, r0
    f33c:	72fb      	strb	r3, [r7, #11]
    if(r != CO_ERROR_NO){
    f33e:	f997 300b 	ldrsb.w	r3, [r7, #11]
    f342:	2b00      	cmp	r3, #0
    f344:	d00b      	beq.n	f35e <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xbe>
        RPDO->valid = false;
    f346:	687b      	ldr	r3, [r7, #4]
    f348:	2200      	movs	r2, #0
    f34a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
    f34e:	687b      	ldr	r3, [r7, #4]
    f350:	2200      	movs	r2, #0
    f352:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    f356:	687b      	ldr	r3, [r7, #4]
    f358:	2200      	movs	r2, #0
    f35a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
}
    f35e:	bf00      	nop
    f360:	3714      	adds	r7, #20
    f362:	46bd      	mov	sp, r7
    f364:	bd90      	pop	{r4, r7, pc}
    f366:	bf00      	nop
    f368:	bffff800 	.word	0xbffff800
    f36c:	200019b4 	.word	0x200019b4
    f370:	0000f19d 	.word	0x0000f19d
    f374:	0000d801 	.word	0x0000d801

0000f378 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh>:
 * @param TPDO TPDO object.
 * @param COB_IDUsedByTPDO _TPDO communication parameter_, _COB-ID for PDO_ variable
 * from Object dictionary (index 0x1400+, subindex 1).
 * @param syncFlag Indicate, if TPDO is synchronous.
 */
static void CO_TPDOconfigCom(CO_TPDO_t* TPDO, uint32_t COB_IDUsedByTPDO, uint8_t syncFlag){
    f378:	b590      	push	{r4, r7, lr}
    f37a:	b089      	sub	sp, #36	; 0x24
    f37c:	af02      	add	r7, sp, #8
    f37e:	60f8      	str	r0, [r7, #12]
    f380:	60b9      	str	r1, [r7, #8]
    f382:	4613      	mov	r3, r2
    f384:	71fb      	strb	r3, [r7, #7]
    uint32_t ID;

    ID = (uint32_t)COB_IDUsedByTPDO;
    f386:	68bb      	ldr	r3, [r7, #8]
    f388:	617b      	str	r3, [r7, #20]

    /* is TPDO used? */
    if((COB_IDUsedByTPDO & 0xBFFFF800L) == 0 && TPDO->dataLength && ID){
    f38a:	68ba      	ldr	r2, [r7, #8]
    f38c:	4b1c      	ldr	r3, [pc, #112]	; (f400 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x88>)
    f38e:	4013      	ands	r3, r2
    f390:	2b00      	cmp	r3, #0
    f392:	d115      	bne.n	f3c0 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x48>
    f394:	68fb      	ldr	r3, [r7, #12]
    f396:	7f9b      	ldrb	r3, [r3, #30]
    f398:	2b00      	cmp	r3, #0
    f39a:	d011      	beq.n	f3c0 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x48>
    f39c:	697b      	ldr	r3, [r7, #20]
    f39e:	2b00      	cmp	r3, #0
    f3a0:	d00e      	beq.n	f3c0 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x48>
        /* is used default COB-ID? */
        if(ID == TPDO->defaultCOB_ID) ID += TPDO->nodeId;
    f3a2:	68fb      	ldr	r3, [r7, #12]
    f3a4:	699a      	ldr	r2, [r3, #24]
    f3a6:	697b      	ldr	r3, [r7, #20]
    f3a8:	429a      	cmp	r2, r3
    f3aa:	d105      	bne.n	f3b8 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x40>
    f3ac:	68fb      	ldr	r3, [r7, #12]
    f3ae:	7d1b      	ldrb	r3, [r3, #20]
    f3b0:	461a      	mov	r2, r3
    f3b2:	697b      	ldr	r3, [r7, #20]
    f3b4:	4413      	add	r3, r2
    f3b6:	617b      	str	r3, [r7, #20]
        TPDO->valid = true;
    f3b8:	68fb      	ldr	r3, [r7, #12]
    f3ba:	2201      	movs	r2, #1
    f3bc:	775a      	strb	r2, [r3, #29]
    f3be:	e004      	b.n	f3ca <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x52>
    }
    else{
        ID = 0;
    f3c0:	2300      	movs	r3, #0
    f3c2:	617b      	str	r3, [r7, #20]
        TPDO->valid = false;
    f3c4:	68fb      	ldr	r3, [r7, #12]
    f3c6:	2200      	movs	r2, #0
    f3c8:	775a      	strb	r2, [r3, #29]
    }

    TPDO->CANtxBuff = ptrCODriverClass->CAN_Tx_BufferInit(
    f3ca:	4b0e      	ldr	r3, [pc, #56]	; (f404 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x8c>)
    f3cc:	6818      	ldr	r0, [r3, #0]
    f3ce:	68fb      	ldr	r3, [r7, #12]
    f3d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
    f3d2:	68fb      	ldr	r3, [r7, #12]
    f3d4:	7f9b      	ldrb	r3, [r3, #30]
    f3d6:	79fa      	ldrb	r2, [r7, #7]
    f3d8:	9201      	str	r2, [sp, #4]
    f3da:	9300      	str	r3, [sp, #0]
    f3dc:	2300      	movs	r3, #0
    f3de:	697a      	ldr	r2, [r7, #20]
    f3e0:	4c09      	ldr	r4, [pc, #36]	; (f408 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x90>)
    f3e2:	47a0      	blx	r4
    f3e4:	4602      	mov	r2, r0
    f3e6:	68fb      	ldr	r3, [r7, #12]
    f3e8:	651a      	str	r2, [r3, #80]	; 0x50
            ID,                        /* CAN identifier */
            0,                         /* rtr */
            TPDO->dataLength,          /* number of data bytes */
            syncFlag);                 /* synchronous message flag bit */

    if(TPDO->CANtxBuff == 0){
    f3ea:	68fb      	ldr	r3, [r7, #12]
    f3ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    f3ee:	2b00      	cmp	r3, #0
    f3f0:	d102      	bne.n	f3f8 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x80>
        TPDO->valid = false;
    f3f2:	68fb      	ldr	r3, [r7, #12]
    f3f4:	2200      	movs	r2, #0
    f3f6:	775a      	strb	r2, [r3, #29]
    }
}
    f3f8:	bf00      	nop
    f3fa:	371c      	adds	r7, #28
    f3fc:	46bd      	mov	sp, r7
    f3fe:	bd90      	pop	{r4, r7, pc}
    f400:	bffff800 	.word	0xbffff800
    f404:	200019b4 	.word	0x200019b4
    f408:	0000d901 	.word	0x0000d901

0000f40c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_>:
        uint8_t                 R_T,
        uint8_t               **ppData,
        uint8_t                *pLength,
        uint8_t                *pSendIfCOSFlags,
        uint8_t                *pIsMultibyteVar)
{
    f40c:	b580      	push	{r7, lr}
    f40e:	b08a      	sub	sp, #40	; 0x28
    f410:	af00      	add	r7, sp, #0
    f412:	60f8      	str	r0, [r7, #12]
    f414:	60b9      	str	r1, [r7, #8]
    f416:	603b      	str	r3, [r7, #0]
    f418:	4613      	mov	r3, r2
    f41a:	71fb      	strb	r3, [r7, #7]
    uint8_t subIndex;
    uint8_t dataLen;
    uint8_t objectLen;
    uint8_t attr;

    index = (uint32_t)(map>>16);
    f41c:	68bb      	ldr	r3, [r7, #8]
    f41e:	0c1b      	lsrs	r3, r3, #16
    f420:	61fb      	str	r3, [r7, #28]
    subIndex = (uint8_t)(map>>8);
    f422:	68bb      	ldr	r3, [r7, #8]
    f424:	0a1b      	lsrs	r3, r3, #8
    f426:	76fb      	strb	r3, [r7, #27]
    dataLen = (uint8_t) map;   /* data length in bits */
    f428:	68bb      	ldr	r3, [r7, #8]
    f42a:	76bb      	strb	r3, [r7, #26]

    /* data length must be byte aligned */
    if(dataLen&0x07) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
    f42c:	7ebb      	ldrb	r3, [r7, #26]
    f42e:	f003 0307 	and.w	r3, r3, #7
    f432:	2b00      	cmp	r3, #0
    f434:	d001      	beq.n	f43a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x2e>
    f436:	4b6b      	ldr	r3, [pc, #428]	; (f5e4 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
    f438:	e0cf      	b.n	f5da <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    dataLen >>= 3;    /* new data length is in bytes */
    f43a:	7ebb      	ldrb	r3, [r7, #26]
    f43c:	10db      	asrs	r3, r3, #3
    f43e:	76bb      	strb	r3, [r7, #26]
    *pLength += dataLen;
    f440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f442:	781a      	ldrb	r2, [r3, #0]
    f444:	7ebb      	ldrb	r3, [r7, #26]
    f446:	4413      	add	r3, r2
    f448:	b2da      	uxtb	r2, r3
    f44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f44c:	701a      	strb	r2, [r3, #0]

    /* total PDO length can not be more than 8 bytes */
    if(*pLength > 8) return CO_SDO_AB_MAP_LEN;  /* The number and length of the objects to be mapped would exceed PDO length. */
    f44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f450:	781b      	ldrb	r3, [r3, #0]
    f452:	2b08      	cmp	r3, #8
    f454:	dd01      	ble.n	f45a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x4e>
    f456:	4b64      	ldr	r3, [pc, #400]	; (f5e8 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1dc>)
    f458:	e0bf      	b.n	f5da <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    /* is there a reference to dummy entries */
    if(index <=7 && subIndex == 0){
    f45a:	69fb      	ldr	r3, [r7, #28]
    f45c:	2b07      	cmp	r3, #7
    f45e:	d832      	bhi.n	f4c6 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xba>
    f460:	7efb      	ldrb	r3, [r7, #27]
    f462:	2b00      	cmp	r3, #0
    f464:	d12f      	bne.n	f4c6 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xba>
        static uint32_t dummyTX = 0;
        static uint32_t dummyRX;
        uint8_t dummySize = 4;
    f466:	2304      	movs	r3, #4
    f468:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if(index<2) dummySize = 0;
    f46c:	69fb      	ldr	r3, [r7, #28]
    f46e:	2b01      	cmp	r3, #1
    f470:	d803      	bhi.n	f47a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x6e>
    f472:	2300      	movs	r3, #0
    f474:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    f478:	e012      	b.n	f4a0 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x94>
        else if(index==2 || index==5) dummySize = 1;
    f47a:	69fb      	ldr	r3, [r7, #28]
    f47c:	2b02      	cmp	r3, #2
    f47e:	d002      	beq.n	f486 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x7a>
    f480:	69fb      	ldr	r3, [r7, #28]
    f482:	2b05      	cmp	r3, #5
    f484:	d103      	bne.n	f48e <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x82>
    f486:	2301      	movs	r3, #1
    f488:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    f48c:	e008      	b.n	f4a0 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x94>
        else if(index==3 || index==6) dummySize = 2;
    f48e:	69fb      	ldr	r3, [r7, #28]
    f490:	2b03      	cmp	r3, #3
    f492:	d002      	beq.n	f49a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x8e>
    f494:	69fb      	ldr	r3, [r7, #28]
    f496:	2b06      	cmp	r3, #6
    f498:	d102      	bne.n	f4a0 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x94>
    f49a:	2302      	movs	r3, #2
    f49c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        /* is size of variable big enough for map */
        if(dummySize < dataLen) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
    f4a0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
    f4a4:	7ebb      	ldrb	r3, [r7, #26]
    f4a6:	429a      	cmp	r2, r3
    f4a8:	da01      	bge.n	f4ae <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xa2>
    f4aa:	4b4e      	ldr	r3, [pc, #312]	; (f5e4 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
    f4ac:	e095      	b.n	f5da <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

        /* Data and ODE pointer */
        if(R_T == 0) *ppData = (uint8_t*) &dummyRX;
    f4ae:	79fb      	ldrb	r3, [r7, #7]
    f4b0:	2b00      	cmp	r3, #0
    f4b2:	d103      	bne.n	f4bc <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xb0>
    f4b4:	683b      	ldr	r3, [r7, #0]
    f4b6:	4a4d      	ldr	r2, [pc, #308]	; (f5ec <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e0>)
    f4b8:	601a      	str	r2, [r3, #0]
    f4ba:	e002      	b.n	f4c2 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xb6>
        else         *ppData = (uint8_t*) &dummyTX;
    f4bc:	683b      	ldr	r3, [r7, #0]
    f4be:	4a4c      	ldr	r2, [pc, #304]	; (f5f0 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e4>)
    f4c0:	601a      	str	r2, [r3, #0]

        return 0;
    f4c2:	2300      	movs	r3, #0
    f4c4:	e089      	b.n	f5da <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>
    }

    /* find object in Object Dictionary */
    entryNo = ptrCODriverClass->CO_OD_find( index);
    f4c6:	4b4b      	ldr	r3, [pc, #300]	; (f5f4 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e8>)
    f4c8:	681b      	ldr	r3, [r3, #0]
    f4ca:	3304      	adds	r3, #4
    f4cc:	69f9      	ldr	r1, [r7, #28]
    f4ce:	4618      	mov	r0, r3
    f4d0:	4b49      	ldr	r3, [pc, #292]	; (f5f8 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ec>)
    f4d2:	4798      	blx	r3
    f4d4:	6178      	str	r0, [r7, #20]

    /* Does object exist in OD? */
    if(entryNo == 0xFFFF || subIndex > SDO->OD[entryNo].maxSubIndex)
    f4d6:	697b      	ldr	r3, [r7, #20]
    f4d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f4dc:	4293      	cmp	r3, r2
    f4de:	d00b      	beq.n	f4f8 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xec>
    f4e0:	7ef9      	ldrb	r1, [r7, #27]
    f4e2:	68fb      	ldr	r3, [r7, #12]
    f4e4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    f4e6:	697a      	ldr	r2, [r7, #20]
    f4e8:	4613      	mov	r3, r2
    f4ea:	009b      	lsls	r3, r3, #2
    f4ec:	4413      	add	r3, r2
    f4ee:	009b      	lsls	r3, r3, #2
    f4f0:	4403      	add	r3, r0
    f4f2:	791b      	ldrb	r3, [r3, #4]
    f4f4:	4299      	cmp	r1, r3
    f4f6:	dd01      	ble.n	f4fc <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xf0>
        return CO_SDO_AB_NOT_EXIST;   /* Object does not exist in the object dictionary. */
    f4f8:	4b40      	ldr	r3, [pc, #256]	; (f5fc <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1f0>)
    f4fa:	e06e      	b.n	f5da <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    attr = ptrCODriverClass->CO_OD_getAttribute( entryNo, subIndex);
    f4fc:	4b3d      	ldr	r3, [pc, #244]	; (f5f4 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e8>)
    f4fe:	681b      	ldr	r3, [r3, #0]
    f500:	3304      	adds	r3, #4
    f502:	7efa      	ldrb	r2, [r7, #27]
    f504:	6979      	ldr	r1, [r7, #20]
    f506:	4618      	mov	r0, r3
    f508:	4b3d      	ldr	r3, [pc, #244]	; (f600 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1f4>)
    f50a:	4798      	blx	r3
    f50c:	4603      	mov	r3, r0
    f50e:	74fb      	strb	r3, [r7, #19]
    /* Is object Mappable for RPDO? */
    if(R_T==0 && !((attr&CO_ODA_RPDO_MAPABLE) && (attr&CO_ODA_WRITEABLE))) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
    f510:	79fb      	ldrb	r3, [r7, #7]
    f512:	2b00      	cmp	r3, #0
    f514:	d10b      	bne.n	f52e <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x122>
    f516:	7cfb      	ldrb	r3, [r7, #19]
    f518:	f003 0310 	and.w	r3, r3, #16
    f51c:	2b00      	cmp	r3, #0
    f51e:	d004      	beq.n	f52a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x11e>
    f520:	7cfb      	ldrb	r3, [r7, #19]
    f522:	f003 0308 	and.w	r3, r3, #8
    f526:	2b00      	cmp	r3, #0
    f528:	d101      	bne.n	f52e <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x122>
    f52a:	4b2e      	ldr	r3, [pc, #184]	; (f5e4 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
    f52c:	e055      	b.n	f5da <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>
    /* Is object Mappable for TPDO? */
    if(R_T!=0 && !((attr&CO_ODA_TPDO_MAPABLE) && (attr&CO_ODA_READABLE))) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
    f52e:	79fb      	ldrb	r3, [r7, #7]
    f530:	2b00      	cmp	r3, #0
    f532:	d00b      	beq.n	f54c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x140>
    f534:	7cfb      	ldrb	r3, [r7, #19]
    f536:	f003 0320 	and.w	r3, r3, #32
    f53a:	2b00      	cmp	r3, #0
    f53c:	d004      	beq.n	f548 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x13c>
    f53e:	7cfb      	ldrb	r3, [r7, #19]
    f540:	f003 0304 	and.w	r3, r3, #4
    f544:	2b00      	cmp	r3, #0
    f546:	d101      	bne.n	f54c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x140>
    f548:	4b26      	ldr	r3, [pc, #152]	; (f5e4 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
    f54a:	e046      	b.n	f5da <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    /* is size of variable big enough for map */
    objectLen = ptrCODriverClass->CO_OD_getLength( entryNo, subIndex);
    f54c:	4b29      	ldr	r3, [pc, #164]	; (f5f4 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e8>)
    f54e:	681b      	ldr	r3, [r3, #0]
    f550:	3304      	adds	r3, #4
    f552:	7efa      	ldrb	r2, [r7, #27]
    f554:	6979      	ldr	r1, [r7, #20]
    f556:	4618      	mov	r0, r3
    f558:	4b2a      	ldr	r3, [pc, #168]	; (f604 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1f8>)
    f55a:	4798      	blx	r3
    f55c:	4603      	mov	r3, r0
    f55e:	74bb      	strb	r3, [r7, #18]
    if(objectLen < dataLen) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
    f560:	7cba      	ldrb	r2, [r7, #18]
    f562:	7ebb      	ldrb	r3, [r7, #26]
    f564:	429a      	cmp	r2, r3
    f566:	da01      	bge.n	f56c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x160>
    f568:	4b1e      	ldr	r3, [pc, #120]	; (f5e4 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
    f56a:	e036      	b.n	f5da <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    /* mark multibyte variable */
    *pIsMultibyteVar = (attr&CO_ODA_MB_VALUE) ? 1 : 0;
    f56c:	f997 3013 	ldrsb.w	r3, [r7, #19]
    f570:	2b00      	cmp	r3, #0
    f572:	da01      	bge.n	f578 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x16c>
    f574:	2201      	movs	r2, #1
    f576:	e000      	b.n	f57a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x16e>
    f578:	2200      	movs	r2, #0
    f57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    f57c:	701a      	strb	r2, [r3, #0]

    /* pointer to data */
    *ppData = (uint8_t*) (ptrCODriverClass->CO_OD_getDataPointer( entryNo, subIndex));
    f57e:	4b1d      	ldr	r3, [pc, #116]	; (f5f4 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e8>)
    f580:	681b      	ldr	r3, [r3, #0]
    f582:	3304      	adds	r3, #4
    f584:	7efa      	ldrb	r2, [r7, #27]
    f586:	6979      	ldr	r1, [r7, #20]
    f588:	4618      	mov	r0, r3
    f58a:	4b1f      	ldr	r3, [pc, #124]	; (f608 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1fc>)
    f58c:	4798      	blx	r3
    f58e:	4602      	mov	r2, r0
    f590:	683b      	ldr	r3, [r7, #0]
    f592:	601a      	str	r2, [r3, #0]
        *ppData += objectLen - dataLen;
    }
#endif

    /* setup change of state flags */
    if(attr&CO_ODA_TPDO_DETECT_COS){
    f594:	7cfb      	ldrb	r3, [r7, #19]
    f596:	f003 0340 	and.w	r3, r3, #64	; 0x40
    f59a:	2b00      	cmp	r3, #0
    f59c:	d01c      	beq.n	f5d8 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1cc>
        uint32_t i;
        for(i=*pLength-dataLen; i<*pLength; i++){
    f59e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f5a0:	781b      	ldrb	r3, [r3, #0]
    f5a2:	461a      	mov	r2, r3
    f5a4:	7ebb      	ldrb	r3, [r7, #26]
    f5a6:	1ad3      	subs	r3, r2, r3
    f5a8:	623b      	str	r3, [r7, #32]
    f5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f5ac:	781b      	ldrb	r3, [r3, #0]
    f5ae:	461a      	mov	r2, r3
    f5b0:	6a3b      	ldr	r3, [r7, #32]
    f5b2:	429a      	cmp	r2, r3
    f5b4:	d910      	bls.n	f5d8 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1cc>
            *pSendIfCOSFlags |= 1<<i;
    f5b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f5b8:	781b      	ldrb	r3, [r3, #0]
    f5ba:	b25a      	sxtb	r2, r3
    f5bc:	2101      	movs	r1, #1
    f5be:	6a3b      	ldr	r3, [r7, #32]
    f5c0:	fa01 f303 	lsl.w	r3, r1, r3
    f5c4:	b25b      	sxtb	r3, r3
    f5c6:	4313      	orrs	r3, r2
    f5c8:	b25b      	sxtb	r3, r3
    f5ca:	b2da      	uxtb	r2, r3
    f5cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f5ce:	701a      	strb	r2, [r3, #0]
        for(i=*pLength-dataLen; i<*pLength; i++){
    f5d0:	6a3b      	ldr	r3, [r7, #32]
    f5d2:	3301      	adds	r3, #1
    f5d4:	623b      	str	r3, [r7, #32]
    f5d6:	e7e8      	b.n	f5aa <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x19e>
        }
    }

    return 0;
    f5d8:	2300      	movs	r3, #0
}
    f5da:	4618      	mov	r0, r3
    f5dc:	3728      	adds	r7, #40	; 0x28
    f5de:	46bd      	mov	sp, r7
    f5e0:	bd80      	pop	{r7, pc}
    f5e2:	bf00      	nop
    f5e4:	06040041 	.word	0x06040041
    f5e8:	06040042 	.word	0x06040042
    f5ec:	200019c0 	.word	0x200019c0
    f5f0:	200019bc 	.word	0x200019bc
    f5f4:	200019b4 	.word	0x200019b4
    f5f8:	000109d9 	.word	0x000109d9
    f5fc:	06020000 	.word	0x06020000
    f600:	00010b25 	.word	0x00010b25
    f604:	00010a81 	.word	0x00010a81
    f608:	00010bcf 	.word	0x00010bcf

0000f60c <_ZL16CO_RPDOconfigMapP9CO_RPDO_th>:
 * @param RPDO RPDO object.
 * @param noOfMappedObjects Number of mapped object (from OD).
 *
 * @return 0 on success, otherwise SDO abort code.
 */
static uint32_t CO_RPDOconfigMap(CO_RPDO_t* RPDO, uint8_t noOfMappedObjects){
    f60c:	b590      	push	{r4, r7, lr}
    f60e:	b091      	sub	sp, #68	; 0x44
    f610:	af04      	add	r7, sp, #16
    f612:	6078      	str	r0, [r7, #4]
    f614:	460b      	mov	r3, r1
    f616:	70fb      	strb	r3, [r7, #3]
    uint32_t i;
    uint8_t length = 0;
    f618:	2300      	movs	r3, #0
    f61a:	75fb      	strb	r3, [r7, #23]
    uint32_t ret = 0;
    f61c:	2300      	movs	r3, #0
    f61e:	62bb      	str	r3, [r7, #40]	; 0x28
    const uint32_t* pMap = &RPDO->RPDOMapPar->mappedObject1;
    f620:	687b      	ldr	r3, [r7, #4]
    f622:	691b      	ldr	r3, [r3, #16]
    f624:	3304      	adds	r3, #4
    f626:	627b      	str	r3, [r7, #36]	; 0x24

    for(i=noOfMappedObjects; i>0; i--){
    f628:	78fb      	ldrb	r3, [r7, #3]
    f62a:	62fb      	str	r3, [r7, #44]	; 0x2c
    f62c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f62e:	2b00      	cmp	r3, #0
    f630:	d045      	beq.n	f6be <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xb2>
        uint32_t j;
        uint8_t* pData;
        uint8_t dummy = 0;
    f632:	2300      	movs	r3, #0
    f634:	73fb      	strb	r3, [r7, #15]
        uint8_t prevLength = length;
    f636:	7dfb      	ldrb	r3, [r7, #23]
    f638:	77fb      	strb	r3, [r7, #31]
        uint8_t MBvar;
        uint32_t map = *(pMap++);
    f63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f63c:	1d1a      	adds	r2, r3, #4
    f63e:	627a      	str	r2, [r7, #36]	; 0x24
    f640:	681b      	ldr	r3, [r3, #0]
    f642:	61bb      	str	r3, [r7, #24]

        /* function do much checking of errors in map */
        ret = CO_PDOfindMap(
    f644:	687b      	ldr	r3, [r7, #4]
    f646:	6858      	ldr	r0, [r3, #4]
                map,
                0,
                &pData,
                &length,
                &dummy,
                &MBvar);
    f648:	f107 0210 	add.w	r2, r7, #16
    f64c:	f107 030e 	add.w	r3, r7, #14
    f650:	9302      	str	r3, [sp, #8]
    f652:	f107 030f 	add.w	r3, r7, #15
    f656:	9301      	str	r3, [sp, #4]
    f658:	f107 0317 	add.w	r3, r7, #23
    f65c:	9300      	str	r3, [sp, #0]
    f65e:	4613      	mov	r3, r2
    f660:	2200      	movs	r2, #0
    f662:	69b9      	ldr	r1, [r7, #24]
    f664:	4c1a      	ldr	r4, [pc, #104]	; (f6d0 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xc4>)
    f666:	47a0      	blx	r4
    f668:	62b8      	str	r0, [r7, #40]	; 0x28
        if(ret){
    f66a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f66c:	2b00      	cmp	r3, #0
    f66e:	d00e      	beq.n	f68e <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0x82>
            length = 0;
    f670:	2300      	movs	r3, #0
    f672:	75fb      	strb	r3, [r7, #23]
           ptrCODriverClass->EM_ErrorReport(RPDO->em, CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR, map);
    f674:	4b17      	ldr	r3, [pc, #92]	; (f6d4 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xc8>)
    f676:	681b      	ldr	r3, [r3, #0]
    f678:	1d18      	adds	r0, r3, #4
    f67a:	687b      	ldr	r3, [r7, #4]
    f67c:	6819      	ldr	r1, [r3, #0]
    f67e:	69bb      	ldr	r3, [r7, #24]
    f680:	9300      	str	r3, [sp, #0]
    f682:	f44f 4302 	mov.w	r3, #33280	; 0x8200
    f686:	221a      	movs	r2, #26
    f688:	4c13      	ldr	r4, [pc, #76]	; (f6d8 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xcc>)
    f68a:	47a0      	blx	r4
    f68c:	e017      	b.n	f6be <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xb2>
        else{
            for(j=prevLength; j<length; j++)
                RPDO->mapPointer[j] = pData++;
        }
#else
        for(j=prevLength; j<length; j++){
    f68e:	7ffb      	ldrb	r3, [r7, #31]
    f690:	623b      	str	r3, [r7, #32]
    f692:	7dfb      	ldrb	r3, [r7, #23]
    f694:	461a      	mov	r2, r3
    f696:	6a3b      	ldr	r3, [r7, #32]
    f698:	429a      	cmp	r2, r3
    f69a:	d90c      	bls.n	f6b6 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xaa>
            RPDO->mapPointer[j] = pData++;
    f69c:	693a      	ldr	r2, [r7, #16]
    f69e:	1c53      	adds	r3, r2, #1
    f6a0:	613b      	str	r3, [r7, #16]
    f6a2:	6879      	ldr	r1, [r7, #4]
    f6a4:	6a3b      	ldr	r3, [r7, #32]
    f6a6:	3308      	adds	r3, #8
    f6a8:	009b      	lsls	r3, r3, #2
    f6aa:	440b      	add	r3, r1
    f6ac:	605a      	str	r2, [r3, #4]
        for(j=prevLength; j<length; j++){
    f6ae:	6a3b      	ldr	r3, [r7, #32]
    f6b0:	3301      	adds	r3, #1
    f6b2:	623b      	str	r3, [r7, #32]
    f6b4:	e7ed      	b.n	f692 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0x86>
    for(i=noOfMappedObjects; i>0; i--){
    f6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f6b8:	3b01      	subs	r3, #1
    f6ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    f6bc:	e7b6      	b.n	f62c <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0x20>
        }
#endif

    }

    RPDO->dataLength = length;
    f6be:	7dfa      	ldrb	r2, [r7, #23]
    f6c0:	687b      	ldr	r3, [r7, #4]
    f6c2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

    return ret;
    f6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
    f6c8:	4618      	mov	r0, r3
    f6ca:	3734      	adds	r7, #52	; 0x34
    f6cc:	46bd      	mov	sp, r7
    f6ce:	bd90      	pop	{r4, r7, pc}
    f6d0:	0000f40d 	.word	0x0000f40d
    f6d4:	200019b4 	.word	0x200019b4
    f6d8:	0000e441 	.word	0x0000e441

0000f6dc <_ZL16CO_TPDOconfigMapP9CO_TPDO_th>:
 * @param TPDO TPDO object.
 * @param noOfMappedObjects Number of mapped object (from OD).
 *
 * @return 0 on success, otherwise SDO abort code.
 */
static uint32_t CO_TPDOconfigMap(CO_TPDO_t* TPDO, uint8_t noOfMappedObjects){
    f6dc:	b590      	push	{r4, r7, lr}
    f6de:	b091      	sub	sp, #68	; 0x44
    f6e0:	af04      	add	r7, sp, #16
    f6e2:	6078      	str	r0, [r7, #4]
    f6e4:	460b      	mov	r3, r1
    f6e6:	70fb      	strb	r3, [r7, #3]
    uint32_t i;
    uint8_t length = 0;
    f6e8:	2300      	movs	r3, #0
    f6ea:	75fb      	strb	r3, [r7, #23]
    uint32_t ret = 0;
    f6ec:	2300      	movs	r3, #0
    f6ee:	62bb      	str	r3, [r7, #40]	; 0x28
    const uint32_t* pMap = &TPDO->TPDOMapPar->mappedObject1;
    f6f0:	687b      	ldr	r3, [r7, #4]
    f6f2:	68db      	ldr	r3, [r3, #12]
    f6f4:	3304      	adds	r3, #4
    f6f6:	627b      	str	r3, [r7, #36]	; 0x24

    TPDO->sendIfCOSFlags = 0;
    f6f8:	687b      	ldr	r3, [r7, #4]
    f6fa:	2200      	movs	r2, #0
    f6fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    for(i=noOfMappedObjects; i>0; i--){
    f700:	78fb      	ldrb	r3, [r7, #3]
    f702:	62fb      	str	r3, [r7, #44]	; 0x2c
    f704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f706:	2b00      	cmp	r3, #0
    f708:	d042      	beq.n	f790 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xb4>
        uint32_t j;
        uint8_t* pData;
        uint8_t prevLength = length;
    f70a:	7dfb      	ldrb	r3, [r7, #23]
    f70c:	77fb      	strb	r3, [r7, #31]
        uint8_t MBvar;
        uint32_t map = *(pMap++);
    f70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f710:	1d1a      	adds	r2, r3, #4
    f712:	627a      	str	r2, [r7, #36]	; 0x24
    f714:	681b      	ldr	r3, [r3, #0]
    f716:	61bb      	str	r3, [r7, #24]

        /* function do much checking of errors in map */
        ret = CO_PDOfindMap(
    f718:	687b      	ldr	r3, [r7, #4]
    f71a:	6858      	ldr	r0, [r3, #4]
    f71c:	687b      	ldr	r3, [r7, #4]
    f71e:	3340      	adds	r3, #64	; 0x40
                map,
                1,
                &pData,
                &length,
                &TPDO->sendIfCOSFlags,
                &MBvar);
    f720:	f107 0110 	add.w	r1, r7, #16
    f724:	f107 020f 	add.w	r2, r7, #15
    f728:	9202      	str	r2, [sp, #8]
    f72a:	9301      	str	r3, [sp, #4]
    f72c:	f107 0317 	add.w	r3, r7, #23
    f730:	9300      	str	r3, [sp, #0]
    f732:	460b      	mov	r3, r1
    f734:	2201      	movs	r2, #1
    f736:	69b9      	ldr	r1, [r7, #24]
    f738:	4c19      	ldr	r4, [pc, #100]	; (f7a0 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xc4>)
    f73a:	47a0      	blx	r4
    f73c:	62b8      	str	r0, [r7, #40]	; 0x28
        if(ret){
    f73e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f740:	2b00      	cmp	r3, #0
    f742:	d00e      	beq.n	f762 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0x86>
            length = 0;
    f744:	2300      	movs	r3, #0
    f746:	75fb      	strb	r3, [r7, #23]
            ptrCODriverClass->EM_ErrorReport(TPDO->em, CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR, map);
    f748:	4b16      	ldr	r3, [pc, #88]	; (f7a4 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xc8>)
    f74a:	681b      	ldr	r3, [r3, #0]
    f74c:	1d18      	adds	r0, r3, #4
    f74e:	687b      	ldr	r3, [r7, #4]
    f750:	6819      	ldr	r1, [r3, #0]
    f752:	69bb      	ldr	r3, [r7, #24]
    f754:	9300      	str	r3, [sp, #0]
    f756:	f44f 4302 	mov.w	r3, #33280	; 0x8200
    f75a:	221a      	movs	r2, #26
    f75c:	4c12      	ldr	r4, [pc, #72]	; (f7a8 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xcc>)
    f75e:	47a0      	blx	r4
    f760:	e016      	b.n	f790 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xb4>
        else{
            for(j=prevLength; j<length; j++)
                TPDO->mapPointer[j] = pData++;
        }
#else
        for(j=prevLength; j<length; j++){
    f762:	7ffb      	ldrb	r3, [r7, #31]
    f764:	623b      	str	r3, [r7, #32]
    f766:	7dfb      	ldrb	r3, [r7, #23]
    f768:	461a      	mov	r2, r3
    f76a:	6a3b      	ldr	r3, [r7, #32]
    f76c:	429a      	cmp	r2, r3
    f76e:	d90b      	bls.n	f788 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xac>
            TPDO->mapPointer[j] = pData++;
    f770:	693b      	ldr	r3, [r7, #16]
    f772:	1c5a      	adds	r2, r3, #1
    f774:	613a      	str	r2, [r7, #16]
    f776:	687a      	ldr	r2, [r7, #4]
    f778:	6a39      	ldr	r1, [r7, #32]
    f77a:	3108      	adds	r1, #8
    f77c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        for(j=prevLength; j<length; j++){
    f780:	6a3b      	ldr	r3, [r7, #32]
    f782:	3301      	adds	r3, #1
    f784:	623b      	str	r3, [r7, #32]
    f786:	e7ee      	b.n	f766 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0x8a>
    for(i=noOfMappedObjects; i>0; i--){
    f788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f78a:	3b01      	subs	r3, #1
    f78c:	62fb      	str	r3, [r7, #44]	; 0x2c
    f78e:	e7b9      	b.n	f704 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0x28>
        }
#endif

    }

    TPDO->dataLength = length;
    f790:	7dfa      	ldrb	r2, [r7, #23]
    f792:	687b      	ldr	r3, [r7, #4]
    f794:	779a      	strb	r2, [r3, #30]

    return ret;
    f796:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
    f798:	4618      	mov	r0, r3
    f79a:	3734      	adds	r7, #52	; 0x34
    f79c:	46bd      	mov	sp, r7
    f79e:	bd90      	pop	{r4, r7, pc}
    f7a0:	0000f40d 	.word	0x0000f40d
    f7a4:	200019b4 	.word	0x200019b4
    f7a8:	0000e441 	.word	0x0000e441

0000f7ac <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t>:
/*
 * Function for accessing _RPDO communication parameter_ (index 0x1400+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_RPDOcom(CO_ODF_arg_t *ODF_arg){
    f7ac:	b580      	push	{r7, lr}
    f7ae:	b088      	sub	sp, #32
    f7b0:	af00      	add	r7, sp, #0
    f7b2:	6078      	str	r0, [r7, #4]
    CO_RPDO_t *RPDO;

    RPDO = (CO_RPDO_t*) ODF_arg->object;
    f7b4:	687b      	ldr	r3, [r7, #4]
    f7b6:	681b      	ldr	r3, [r3, #0]
    f7b8:	61fb      	str	r3, [r7, #28]

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
    f7ba:	687b      	ldr	r3, [r7, #4]
    f7bc:	7f5b      	ldrb	r3, [r3, #29]
    f7be:	2b00      	cmp	r3, #0
    f7c0:	d025      	beq.n	f80e <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x62>
        if(ODF_arg->subIndex == 1){
    f7c2:	687b      	ldr	r3, [r7, #4]
    f7c4:	7f1b      	ldrb	r3, [r3, #28]
    f7c6:	2b01      	cmp	r3, #1
    f7c8:	d11f      	bne.n	f80a <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x5e>
            uint32_t *value = (uint32_t*) ODF_arg->data;
    f7ca:	687b      	ldr	r3, [r7, #4]
    f7cc:	685b      	ldr	r3, [r3, #4]
    f7ce:	61bb      	str	r3, [r7, #24]

            /* if default COB ID is used, write default value here */
            if(((*value)&0xFFFF) == RPDO->defaultCOB_ID && RPDO->defaultCOB_ID)
    f7d0:	69bb      	ldr	r3, [r7, #24]
    f7d2:	681b      	ldr	r3, [r3, #0]
    f7d4:	b29a      	uxth	r2, r3
    f7d6:	69fb      	ldr	r3, [r7, #28]
    f7d8:	69db      	ldr	r3, [r3, #28]
    f7da:	429a      	cmp	r2, r3
    f7dc:	d10a      	bne.n	f7f4 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x48>
    f7de:	69fb      	ldr	r3, [r7, #28]
    f7e0:	69db      	ldr	r3, [r3, #28]
    f7e2:	2b00      	cmp	r3, #0
    f7e4:	d006      	beq.n	f7f4 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x48>
                *value += RPDO->nodeId;
    f7e6:	69bb      	ldr	r3, [r7, #24]
    f7e8:	681b      	ldr	r3, [r3, #0]
    f7ea:	69fa      	ldr	r2, [r7, #28]
    f7ec:	7e12      	ldrb	r2, [r2, #24]
    f7ee:	441a      	add	r2, r3
    f7f0:	69bb      	ldr	r3, [r7, #24]
    f7f2:	601a      	str	r2, [r3, #0]

            /* If PDO is not valid, set bit 31 */
            if(!RPDO->valid) *value |= 0x80000000L;
    f7f4:	69fb      	ldr	r3, [r7, #28]
    f7f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
    f7fa:	2b00      	cmp	r3, #0
    f7fc:	d105      	bne.n	f80a <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x5e>
    f7fe:	69bb      	ldr	r3, [r7, #24]
    f800:	681b      	ldr	r3, [r3, #0]
    f802:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    f806:	69bb      	ldr	r3, [r7, #24]
    f808:	601a      	str	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
    f80a:	2300      	movs	r3, #0
    f80c:	e07f      	b.n	f90e <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>
    }

    /* Writing Object Dictionary variable */
    if(RPDO->restrictionFlags & 0x04)
    f80e:	69fb      	ldr	r3, [r7, #28]
    f810:	f893 3020 	ldrb.w	r3, [r3, #32]
    f814:	f003 0304 	and.w	r3, r3, #4
    f818:	2b00      	cmp	r3, #0
    f81a:	d001      	beq.n	f820 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x74>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
    f81c:	4b3e      	ldr	r3, [pc, #248]	; (f918 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x16c>)
    f81e:	e076      	b.n	f90e <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>
    if(*RPDO->operatingState == CO_NMT_OPERATIONAL && (RPDO->restrictionFlags & 0x01))
    f820:	69fb      	ldr	r3, [r7, #28]
    f822:	695b      	ldr	r3, [r3, #20]
    f824:	781b      	ldrb	r3, [r3, #0]
    f826:	2b05      	cmp	r3, #5
    f828:	d108      	bne.n	f83c <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x90>
    f82a:	69fb      	ldr	r3, [r7, #28]
    f82c:	f893 3020 	ldrb.w	r3, [r3, #32]
    f830:	f003 0301 	and.w	r3, r3, #1
    f834:	2b00      	cmp	r3, #0
    f836:	d001      	beq.n	f83c <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x90>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
    f838:	4b38      	ldr	r3, [pc, #224]	; (f91c <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x170>)
    f83a:	e068      	b.n	f90e <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>

    if(ODF_arg->subIndex == 1){   /* COB_ID */
    f83c:	687b      	ldr	r3, [r7, #4]
    f83e:	7f1b      	ldrb	r3, [r3, #28]
    f840:	2b01      	cmp	r3, #1
    f842:	d139      	bne.n	f8b8 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x10c>
        uint32_t *value = (uint32_t*) ODF_arg->data;
    f844:	687b      	ldr	r3, [r7, #4]
    f846:	685b      	ldr	r3, [r3, #4]
    f848:	617b      	str	r3, [r7, #20]

        /* bits 11...29 must be zero */
        if(*value & 0x3FFF8000L)
    f84a:	697b      	ldr	r3, [r7, #20]
    f84c:	681a      	ldr	r2, [r3, #0]
    f84e:	4b34      	ldr	r3, [pc, #208]	; (f920 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x174>)
    f850:	4013      	ands	r3, r2
    f852:	2b00      	cmp	r3, #0
    f854:	d001      	beq.n	f85a <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0xae>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    f856:	4b33      	ldr	r3, [pc, #204]	; (f924 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x178>)
    f858:	e059      	b.n	f90e <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>

        /* if default COB-ID is being written, write defaultCOB_ID without nodeId */
        if(((*value)&0xFFFF) == (RPDO->defaultCOB_ID + RPDO->nodeId)){
    f85a:	697b      	ldr	r3, [r7, #20]
    f85c:	681b      	ldr	r3, [r3, #0]
    f85e:	b29a      	uxth	r2, r3
    f860:	69fb      	ldr	r3, [r7, #28]
    f862:	69db      	ldr	r3, [r3, #28]
    f864:	69f9      	ldr	r1, [r7, #28]
    f866:	7e09      	ldrb	r1, [r1, #24]
    f868:	440b      	add	r3, r1
    f86a:	429a      	cmp	r2, r3
    f86c:	d10c      	bne.n	f888 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0xdc>
            *value &= 0xC0000000L;
    f86e:	697b      	ldr	r3, [r7, #20]
    f870:	681b      	ldr	r3, [r3, #0]
    f872:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
    f876:	697b      	ldr	r3, [r7, #20]
    f878:	601a      	str	r2, [r3, #0]
            *value += RPDO->defaultCOB_ID;
    f87a:	697b      	ldr	r3, [r7, #20]
    f87c:	681a      	ldr	r2, [r3, #0]
    f87e:	69fb      	ldr	r3, [r7, #28]
    f880:	69db      	ldr	r3, [r3, #28]
    f882:	441a      	add	r2, r3
    f884:	697b      	ldr	r3, [r7, #20]
    f886:	601a      	str	r2, [r3, #0]
        }

        /* if PDO is valid, bits 0..29 can not be changed */
        if(RPDO->valid && ((*value ^ RPDO->RPDOCommPar->COB_IDUsedByRPDO) & 0x3FFFFFFFL))
    f888:	69fb      	ldr	r3, [r7, #28]
    f88a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
    f88e:	2b00      	cmp	r3, #0
    f890:	d00b      	beq.n	f8aa <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0xfe>
    f892:	697b      	ldr	r3, [r7, #20]
    f894:	681a      	ldr	r2, [r3, #0]
    f896:	69fb      	ldr	r3, [r7, #28]
    f898:	68db      	ldr	r3, [r3, #12]
    f89a:	685b      	ldr	r3, [r3, #4]
    f89c:	4053      	eors	r3, r2
    f89e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    f8a2:	2b00      	cmp	r3, #0
    f8a4:	d001      	beq.n	f8aa <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0xfe>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    f8a6:	4b1f      	ldr	r3, [pc, #124]	; (f924 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x178>)
    f8a8:	e031      	b.n	f90e <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>

        /* configure RPDO */
        CO_RPDOconfigCom(RPDO, *value);
    f8aa:	697b      	ldr	r3, [r7, #20]
    f8ac:	681b      	ldr	r3, [r3, #0]
    f8ae:	4619      	mov	r1, r3
    f8b0:	69f8      	ldr	r0, [r7, #28]
    f8b2:	4b1d      	ldr	r3, [pc, #116]	; (f928 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x17c>)
    f8b4:	4798      	blx	r3
    f8b6:	e029      	b.n	f90c <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x160>
    }
    else if(ODF_arg->subIndex == 2){   /* Transmission_type */
    f8b8:	687b      	ldr	r3, [r7, #4]
    f8ba:	7f1b      	ldrb	r3, [r3, #28]
    f8bc:	2b02      	cmp	r3, #2
    f8be:	d125      	bne.n	f90c <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x160>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    f8c0:	687b      	ldr	r3, [r7, #4]
    f8c2:	685b      	ldr	r3, [r3, #4]
    f8c4:	613b      	str	r3, [r7, #16]
        bool_t synchronousPrev = RPDO->synchronous;
    f8c6:	69fb      	ldr	r3, [r7, #28]
    f8c8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
    f8cc:	73fb      	strb	r3, [r7, #15]

        /* values from 241...253 are not valid */
        if(*value >= 241 && *value <= 253)
    f8ce:	693b      	ldr	r3, [r7, #16]
    f8d0:	781b      	ldrb	r3, [r3, #0]
    f8d2:	2bf0      	cmp	r3, #240	; 0xf0
    f8d4:	dd05      	ble.n	f8e2 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x136>
    f8d6:	693b      	ldr	r3, [r7, #16]
    f8d8:	781b      	ldrb	r3, [r3, #0]
    f8da:	2bfd      	cmp	r3, #253	; 0xfd
    f8dc:	dc01      	bgt.n	f8e2 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x136>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    f8de:	4b11      	ldr	r3, [pc, #68]	; (f924 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x178>)
    f8e0:	e015      	b.n	f90e <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>

        RPDO->synchronous = (*value <= 240) ? true : false;
    f8e2:	693b      	ldr	r3, [r7, #16]
    f8e4:	781b      	ldrb	r3, [r3, #0]
    f8e6:	2bf0      	cmp	r3, #240	; 0xf0
    f8e8:	bfd4      	ite	le
    f8ea:	2301      	movle	r3, #1
    f8ec:	2300      	movgt	r3, #0
    f8ee:	b2db      	uxtb	r3, r3
    f8f0:	461a      	mov	r2, r3
    f8f2:	69fb      	ldr	r3, [r7, #28]
    f8f4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

        /* Remove old message from second buffer. */
        if(RPDO->synchronous != synchronousPrev) {
    f8f8:	69fb      	ldr	r3, [r7, #28]
    f8fa:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
    f8fe:	7bfa      	ldrb	r2, [r7, #15]
    f900:	429a      	cmp	r2, r3
    f902:	d003      	beq.n	f90c <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x160>
            RPDO->CANrxNew[1] = false;
    f904:	69fb      	ldr	r3, [r7, #28]
    f906:	2200      	movs	r2, #0
    f908:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        }
    }

    return CO_SDO_AB_NONE;
    f90c:	2300      	movs	r3, #0
}
    f90e:	4618      	mov	r0, r3
    f910:	3720      	adds	r7, #32
    f912:	46bd      	mov	sp, r7
    f914:	bd80      	pop	{r7, pc}
    f916:	bf00      	nop
    f918:	06010002 	.word	0x06010002
    f91c:	08000022 	.word	0x08000022
    f920:	3fff8000 	.word	0x3fff8000
    f924:	06090030 	.word	0x06090030
    f928:	0000f2a1 	.word	0x0000f2a1

0000f92c <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t>:
/*
 * Function for accessing _TPDO communication parameter_ (index 0x1800+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_TPDOcom(CO_ODF_arg_t *ODF_arg){
    f92c:	b580      	push	{r7, lr}
    f92e:	b088      	sub	sp, #32
    f930:	af00      	add	r7, sp, #0
    f932:	6078      	str	r0, [r7, #4]
    CO_TPDO_t *TPDO;

    TPDO = (CO_TPDO_t*) ODF_arg->object;
    f934:	687b      	ldr	r3, [r7, #4]
    f936:	681b      	ldr	r3, [r3, #0]
    f938:	61fb      	str	r3, [r7, #28]

    if(ODF_arg->subIndex == 4) return CO_SDO_AB_SUB_UNKNOWN;  /* Sub-index does not exist. */
    f93a:	687b      	ldr	r3, [r7, #4]
    f93c:	7f1b      	ldrb	r3, [r3, #28]
    f93e:	2b04      	cmp	r3, #4
    f940:	d101      	bne.n	f946 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1a>
    f942:	4b6d      	ldr	r3, [pc, #436]	; (faf8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1cc>)
    f944:	e0d4      	b.n	faf0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
    f946:	687b      	ldr	r3, [r7, #4]
    f948:	7f5b      	ldrb	r3, [r3, #29]
    f94a:	2b00      	cmp	r3, #0
    f94c:	d024      	beq.n	f998 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x6c>
        if(ODF_arg->subIndex == 1){   /* COB_ID */
    f94e:	687b      	ldr	r3, [r7, #4]
    f950:	7f1b      	ldrb	r3, [r3, #28]
    f952:	2b01      	cmp	r3, #1
    f954:	d11e      	bne.n	f994 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x68>
            uint32_t *value = (uint32_t*) ODF_arg->data;
    f956:	687b      	ldr	r3, [r7, #4]
    f958:	685b      	ldr	r3, [r3, #4]
    f95a:	61bb      	str	r3, [r7, #24]

            /* if default COB ID is used, write default value here */
            if(((*value)&0xFFFF) == TPDO->defaultCOB_ID && TPDO->defaultCOB_ID)
    f95c:	69bb      	ldr	r3, [r7, #24]
    f95e:	681b      	ldr	r3, [r3, #0]
    f960:	b29a      	uxth	r2, r3
    f962:	69fb      	ldr	r3, [r7, #28]
    f964:	699b      	ldr	r3, [r3, #24]
    f966:	429a      	cmp	r2, r3
    f968:	d10a      	bne.n	f980 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x54>
    f96a:	69fb      	ldr	r3, [r7, #28]
    f96c:	699b      	ldr	r3, [r3, #24]
    f96e:	2b00      	cmp	r3, #0
    f970:	d006      	beq.n	f980 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x54>
                *value += TPDO->nodeId;
    f972:	69bb      	ldr	r3, [r7, #24]
    f974:	681b      	ldr	r3, [r3, #0]
    f976:	69fa      	ldr	r2, [r7, #28]
    f978:	7d12      	ldrb	r2, [r2, #20]
    f97a:	441a      	add	r2, r3
    f97c:	69bb      	ldr	r3, [r7, #24]
    f97e:	601a      	str	r2, [r3, #0]

            /* If PDO is not valid, set bit 31 */
            if(!TPDO->valid) *value |= 0x80000000L;
    f980:	69fb      	ldr	r3, [r7, #28]
    f982:	7f5b      	ldrb	r3, [r3, #29]
    f984:	2b00      	cmp	r3, #0
    f986:	d105      	bne.n	f994 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x68>
    f988:	69bb      	ldr	r3, [r7, #24]
    f98a:	681b      	ldr	r3, [r3, #0]
    f98c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    f990:	69bb      	ldr	r3, [r7, #24]
    f992:	601a      	str	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
    f994:	2300      	movs	r3, #0
    f996:	e0ab      	b.n	faf0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>
    }

    /* Writing Object Dictionary variable */
    if(TPDO->restrictionFlags & 0x04)
    f998:	69fb      	ldr	r3, [r7, #28]
    f99a:	7f1b      	ldrb	r3, [r3, #28]
    f99c:	f003 0304 	and.w	r3, r3, #4
    f9a0:	2b00      	cmp	r3, #0
    f9a2:	d001      	beq.n	f9a8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x7c>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
    f9a4:	4b55      	ldr	r3, [pc, #340]	; (fafc <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1d0>)
    f9a6:	e0a3      	b.n	faf0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>
    if(*TPDO->operatingState == CO_NMT_OPERATIONAL && (TPDO->restrictionFlags & 0x01))
    f9a8:	69fb      	ldr	r3, [r7, #28]
    f9aa:	691b      	ldr	r3, [r3, #16]
    f9ac:	781b      	ldrb	r3, [r3, #0]
    f9ae:	2b05      	cmp	r3, #5
    f9b0:	d107      	bne.n	f9c2 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x96>
    f9b2:	69fb      	ldr	r3, [r7, #28]
    f9b4:	7f1b      	ldrb	r3, [r3, #28]
    f9b6:	f003 0301 	and.w	r3, r3, #1
    f9ba:	2b00      	cmp	r3, #0
    f9bc:	d001      	beq.n	f9c2 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x96>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
    f9be:	4b50      	ldr	r3, [pc, #320]	; (fb00 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1d4>)
    f9c0:	e096      	b.n	faf0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

    if(ODF_arg->subIndex == 1){   /* COB_ID */
    f9c2:	687b      	ldr	r3, [r7, #4]
    f9c4:	7f1b      	ldrb	r3, [r3, #28]
    f9c6:	2b01      	cmp	r3, #1
    f9c8:	d140      	bne.n	fa4c <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x120>
        uint32_t *value = (uint32_t*) ODF_arg->data;
    f9ca:	687b      	ldr	r3, [r7, #4]
    f9cc:	685b      	ldr	r3, [r3, #4]
    f9ce:	617b      	str	r3, [r7, #20]

        /* bits 11...29 must be zero */
        if(*value & 0x3FFF8000L)
    f9d0:	697b      	ldr	r3, [r7, #20]
    f9d2:	681a      	ldr	r2, [r3, #0]
    f9d4:	4b4b      	ldr	r3, [pc, #300]	; (fb04 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1d8>)
    f9d6:	4013      	ands	r3, r2
    f9d8:	2b00      	cmp	r3, #0
    f9da:	d001      	beq.n	f9e0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0xb4>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    f9dc:	4b4a      	ldr	r3, [pc, #296]	; (fb08 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
    f9de:	e087      	b.n	faf0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

        /* if default COB-ID is being written, write defaultCOB_ID without nodeId */
        if(((*value)&0xFFFF) == (TPDO->defaultCOB_ID + TPDO->nodeId)){
    f9e0:	697b      	ldr	r3, [r7, #20]
    f9e2:	681b      	ldr	r3, [r3, #0]
    f9e4:	b29a      	uxth	r2, r3
    f9e6:	69fb      	ldr	r3, [r7, #28]
    f9e8:	699b      	ldr	r3, [r3, #24]
    f9ea:	69f9      	ldr	r1, [r7, #28]
    f9ec:	7d09      	ldrb	r1, [r1, #20]
    f9ee:	440b      	add	r3, r1
    f9f0:	429a      	cmp	r2, r3
    f9f2:	d10c      	bne.n	fa0e <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0xe2>
            *value &= 0xC0000000L;
    f9f4:	697b      	ldr	r3, [r7, #20]
    f9f6:	681b      	ldr	r3, [r3, #0]
    f9f8:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
    f9fc:	697b      	ldr	r3, [r7, #20]
    f9fe:	601a      	str	r2, [r3, #0]
            *value += TPDO->defaultCOB_ID;
    fa00:	697b      	ldr	r3, [r7, #20]
    fa02:	681a      	ldr	r2, [r3, #0]
    fa04:	69fb      	ldr	r3, [r7, #28]
    fa06:	699b      	ldr	r3, [r3, #24]
    fa08:	441a      	add	r2, r3
    fa0a:	697b      	ldr	r3, [r7, #20]
    fa0c:	601a      	str	r2, [r3, #0]
        }

        /* if PDO is valid, bits 0..29 can not be changed */
        if(TPDO->valid && ((*value ^ TPDO->TPDOCommPar->COB_IDUsedByTPDO) & 0x3FFFFFFFL))
    fa0e:	69fb      	ldr	r3, [r7, #28]
    fa10:	7f5b      	ldrb	r3, [r3, #29]
    fa12:	2b00      	cmp	r3, #0
    fa14:	d00b      	beq.n	fa2e <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x102>
    fa16:	697b      	ldr	r3, [r7, #20]
    fa18:	681a      	ldr	r2, [r3, #0]
    fa1a:	69fb      	ldr	r3, [r7, #28]
    fa1c:	689b      	ldr	r3, [r3, #8]
    fa1e:	685b      	ldr	r3, [r3, #4]
    fa20:	4053      	eors	r3, r2
    fa22:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    fa26:	2b00      	cmp	r3, #0
    fa28:	d001      	beq.n	fa2e <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x102>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    fa2a:	4b37      	ldr	r3, [pc, #220]	; (fb08 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
    fa2c:	e060      	b.n	faf0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

        /* configure TPDO */
        CO_TPDOconfigCom(TPDO, *value, TPDO->CANtxBuff->syncFlag);
    fa2e:	697b      	ldr	r3, [r7, #20]
    fa30:	6819      	ldr	r1, [r3, #0]
    fa32:	69fb      	ldr	r3, [r7, #28]
    fa34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    fa36:	7b9b      	ldrb	r3, [r3, #14]
    fa38:	b2db      	uxtb	r3, r3
    fa3a:	461a      	mov	r2, r3
    fa3c:	69f8      	ldr	r0, [r7, #28]
    fa3e:	4b33      	ldr	r3, [pc, #204]	; (fb0c <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1e0>)
    fa40:	4798      	blx	r3
        TPDO->syncCounter = 255;
    fa42:	69fb      	ldr	r3, [r7, #28]
    fa44:	22ff      	movs	r2, #255	; 0xff
    fa46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    fa4a:	e050      	b.n	faee <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
    }
    else if(ODF_arg->subIndex == 2){   /* Transmission_type */
    fa4c:	687b      	ldr	r3, [r7, #4]
    fa4e:	7f1b      	ldrb	r3, [r3, #28]
    fa50:	2b02      	cmp	r3, #2
    fa52:	d11b      	bne.n	fa8c <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x160>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    fa54:	687b      	ldr	r3, [r7, #4]
    fa56:	685b      	ldr	r3, [r3, #4]
    fa58:	613b      	str	r3, [r7, #16]

        /* values from 241...253 are not valid */
        if(*value >= 241 && *value <= 253)
    fa5a:	693b      	ldr	r3, [r7, #16]
    fa5c:	781b      	ldrb	r3, [r3, #0]
    fa5e:	2bf0      	cmp	r3, #240	; 0xf0
    fa60:	dd05      	ble.n	fa6e <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x142>
    fa62:	693b      	ldr	r3, [r7, #16]
    fa64:	781b      	ldrb	r3, [r3, #0]
    fa66:	2bfd      	cmp	r3, #253	; 0xfd
    fa68:	dc01      	bgt.n	fa6e <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x142>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    fa6a:	4b27      	ldr	r3, [pc, #156]	; (fb08 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
    fa6c:	e040      	b.n	faf0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>
        TPDO->CANtxBuff->syncFlag = (*value <= 240) ? 1 : 0;
    fa6e:	69fb      	ldr	r3, [r7, #28]
    fa70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    fa72:	693a      	ldr	r2, [r7, #16]
    fa74:	7812      	ldrb	r2, [r2, #0]
    fa76:	2af0      	cmp	r2, #240	; 0xf0
    fa78:	dc01      	bgt.n	fa7e <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x152>
    fa7a:	2201      	movs	r2, #1
    fa7c:	e000      	b.n	fa80 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x154>
    fa7e:	2200      	movs	r2, #0
    fa80:	739a      	strb	r2, [r3, #14]
        TPDO->syncCounter = 255;
    fa82:	69fb      	ldr	r3, [r7, #28]
    fa84:	22ff      	movs	r2, #255	; 0xff
    fa86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    fa8a:	e030      	b.n	faee <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
    }
    else if(ODF_arg->subIndex == 3){   /* Inhibit_Time */
    fa8c:	687b      	ldr	r3, [r7, #4]
    fa8e:	7f1b      	ldrb	r3, [r3, #28]
    fa90:	2b03      	cmp	r3, #3
    fa92:	d109      	bne.n	faa8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x17c>
        /* if PDO is valid, value can not be changed */
        if(TPDO->valid)
    fa94:	69fb      	ldr	r3, [r7, #28]
    fa96:	7f5b      	ldrb	r3, [r3, #29]
    fa98:	2b00      	cmp	r3, #0
    fa9a:	d001      	beq.n	faa0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x174>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    fa9c:	4b1a      	ldr	r3, [pc, #104]	; (fb08 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
    fa9e:	e027      	b.n	faf0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

        TPDO->inhibitTimer = 0;
    faa0:	69fb      	ldr	r3, [r7, #28]
    faa2:	2200      	movs	r2, #0
    faa4:	645a      	str	r2, [r3, #68]	; 0x44
    faa6:	e022      	b.n	faee <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
    }
    else if(ODF_arg->subIndex == 5){   /* Event_Timer */
    faa8:	687b      	ldr	r3, [r7, #4]
    faaa:	7f1b      	ldrb	r3, [r3, #28]
    faac:	2b05      	cmp	r3, #5
    faae:	d10b      	bne.n	fac8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x19c>
        uint32_t *value = (uint32_t*) ODF_arg->data;
    fab0:	687b      	ldr	r3, [r7, #4]
    fab2:	685b      	ldr	r3, [r3, #4]
    fab4:	60bb      	str	r3, [r7, #8]

        TPDO->eventTimer = ((uint32_t) *value) * 1000;
    fab6:	68bb      	ldr	r3, [r7, #8]
    fab8:	681b      	ldr	r3, [r3, #0]
    faba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    fabe:	fb02 f203 	mul.w	r2, r2, r3
    fac2:	69fb      	ldr	r3, [r7, #28]
    fac4:	649a      	str	r2, [r3, #72]	; 0x48
    fac6:	e012      	b.n	faee <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
    }
    else if(ODF_arg->subIndex == 6){   /* SYNC start value */
    fac8:	687b      	ldr	r3, [r7, #4]
    faca:	7f1b      	ldrb	r3, [r3, #28]
    facc:	2b06      	cmp	r3, #6
    face:	d10e      	bne.n	faee <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    fad0:	687b      	ldr	r3, [r7, #4]
    fad2:	685b      	ldr	r3, [r3, #4]
    fad4:	60fb      	str	r3, [r7, #12]

        /* if PDO is valid, value can not be changed */
        if(TPDO->valid)
    fad6:	69fb      	ldr	r3, [r7, #28]
    fad8:	7f5b      	ldrb	r3, [r3, #29]
    fada:	2b00      	cmp	r3, #0
    fadc:	d001      	beq.n	fae2 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1b6>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    fade:	4b0a      	ldr	r3, [pc, #40]	; (fb08 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
    fae0:	e006      	b.n	faf0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

        /* values from 240...255 are not valid */
        if(*value > 240)
    fae2:	68fb      	ldr	r3, [r7, #12]
    fae4:	781b      	ldrb	r3, [r3, #0]
    fae6:	2bf0      	cmp	r3, #240	; 0xf0
    fae8:	dd01      	ble.n	faee <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    faea:	4b07      	ldr	r3, [pc, #28]	; (fb08 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
    faec:	e000      	b.n	faf0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>
    }

    return CO_SDO_AB_NONE;
    faee:	2300      	movs	r3, #0
}
    faf0:	4618      	mov	r0, r3
    faf2:	3720      	adds	r7, #32
    faf4:	46bd      	mov	sp, r7
    faf6:	bd80      	pop	{r7, pc}
    faf8:	06090011 	.word	0x06090011
    fafc:	06010002 	.word	0x06010002
    fb00:	08000022 	.word	0x08000022
    fb04:	3fff8000 	.word	0x3fff8000
    fb08:	06090030 	.word	0x06090030
    fb0c:	0000f379 	.word	0x0000f379

0000fb10 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t>:
/*
 * Function for accessing _RPDO mapping parameter_ (index 0x1600+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_RPDOmap(CO_ODF_arg_t *ODF_arg){
    fb10:	b590      	push	{r4, r7, lr}
    fb12:	b08d      	sub	sp, #52	; 0x34
    fb14:	af04      	add	r7, sp, #16
    fb16:	6078      	str	r0, [r7, #4]
    CO_RPDO_t *RPDO;

    RPDO = (CO_RPDO_t*) ODF_arg->object;
    fb18:	687b      	ldr	r3, [r7, #4]
    fb1a:	681b      	ldr	r3, [r3, #0]
    fb1c:	61fb      	str	r3, [r7, #28]

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
    fb1e:	687b      	ldr	r3, [r7, #4]
    fb20:	7f5b      	ldrb	r3, [r3, #29]
    fb22:	2b00      	cmp	r3, #0
    fb24:	d010      	beq.n	fb48 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x38>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    fb26:	687b      	ldr	r3, [r7, #4]
    fb28:	685b      	ldr	r3, [r3, #4]
    fb2a:	61bb      	str	r3, [r7, #24]

        if(ODF_arg->subIndex == 0){
    fb2c:	687b      	ldr	r3, [r7, #4]
    fb2e:	7f1b      	ldrb	r3, [r3, #28]
    fb30:	2b00      	cmp	r3, #0
    fb32:	d107      	bne.n	fb44 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x34>
            /* If there is error in mapping, dataLength is 0, so numberOfMappedObjects is 0. */
            if(!RPDO->dataLength) *value = 0;
    fb34:	69fb      	ldr	r3, [r7, #28]
    fb36:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
    fb3a:	2b00      	cmp	r3, #0
    fb3c:	d102      	bne.n	fb44 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x34>
    fb3e:	69bb      	ldr	r3, [r7, #24]
    fb40:	2200      	movs	r2, #0
    fb42:	701a      	strb	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
    fb44:	2300      	movs	r3, #0
    fb46:	e054      	b.n	fbf2 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>
    }

    /* Writing Object Dictionary variable */
    if(RPDO->restrictionFlags & 0x08)
    fb48:	69fb      	ldr	r3, [r7, #28]
    fb4a:	f893 3020 	ldrb.w	r3, [r3, #32]
    fb4e:	f003 0308 	and.w	r3, r3, #8
    fb52:	2b00      	cmp	r3, #0
    fb54:	d001      	beq.n	fb5a <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x4a>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
    fb56:	4b29      	ldr	r3, [pc, #164]	; (fbfc <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xec>)
    fb58:	e04b      	b.n	fbf2 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>
    if(*RPDO->operatingState == CO_NMT_OPERATIONAL && (RPDO->restrictionFlags & 0x02))
    fb5a:	69fb      	ldr	r3, [r7, #28]
    fb5c:	695b      	ldr	r3, [r3, #20]
    fb5e:	781b      	ldrb	r3, [r3, #0]
    fb60:	2b05      	cmp	r3, #5
    fb62:	d108      	bne.n	fb76 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x66>
    fb64:	69fb      	ldr	r3, [r7, #28]
    fb66:	f893 3020 	ldrb.w	r3, [r3, #32]
    fb6a:	f003 0302 	and.w	r3, r3, #2
    fb6e:	2b00      	cmp	r3, #0
    fb70:	d001      	beq.n	fb76 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x66>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
    fb72:	4b23      	ldr	r3, [pc, #140]	; (fc00 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xf0>)
    fb74:	e03d      	b.n	fbf2 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>
    if(RPDO->valid)
    fb76:	69fb      	ldr	r3, [r7, #28]
    fb78:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
    fb7c:	2b00      	cmp	r3, #0
    fb7e:	d001      	beq.n	fb84 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x74>
        return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
    fb80:	4b20      	ldr	r3, [pc, #128]	; (fc04 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xf4>)
    fb82:	e036      	b.n	fbf2 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>

    /* numberOfMappedObjects */
    if(ODF_arg->subIndex == 0){
    fb84:	687b      	ldr	r3, [r7, #4]
    fb86:	7f1b      	ldrb	r3, [r3, #28]
    fb88:	2b00      	cmp	r3, #0
    fb8a:	d110      	bne.n	fbae <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x9e>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    fb8c:	687b      	ldr	r3, [r7, #4]
    fb8e:	685b      	ldr	r3, [r3, #4]
    fb90:	617b      	str	r3, [r7, #20]

        if(*value > 8)
    fb92:	697b      	ldr	r3, [r7, #20]
    fb94:	781b      	ldrb	r3, [r3, #0]
    fb96:	2b08      	cmp	r3, #8
    fb98:	dd01      	ble.n	fb9e <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x8e>
            return CO_SDO_AB_MAP_LEN;  /* Number and length of object to be mapped exceeds PDO length. */
    fb9a:	4b1b      	ldr	r3, [pc, #108]	; (fc08 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xf8>)
    fb9c:	e029      	b.n	fbf2 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>

        /* configure mapping */
        return (CO_SDO_abortCode_t)CO_RPDOconfigMap(RPDO, *value);
    fb9e:	697b      	ldr	r3, [r7, #20]
    fba0:	781b      	ldrb	r3, [r3, #0]
    fba2:	4619      	mov	r1, r3
    fba4:	69f8      	ldr	r0, [r7, #28]
    fba6:	4b19      	ldr	r3, [pc, #100]	; (fc0c <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xfc>)
    fba8:	4798      	blx	r3
    fbaa:	4603      	mov	r3, r0
    fbac:	e021      	b.n	fbf2 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>
    }

    /* mappedObject */
    else{
        uint32_t *value = (uint32_t*) ODF_arg->data;
    fbae:	687b      	ldr	r3, [r7, #4]
    fbb0:	685b      	ldr	r3, [r3, #4]
    fbb2:	613b      	str	r3, [r7, #16]
        uint8_t* pData;
        uint8_t length = 0;
    fbb4:	2300      	movs	r3, #0
    fbb6:	72fb      	strb	r3, [r7, #11]
        uint8_t dummy = 0;
    fbb8:	2300      	movs	r3, #0
    fbba:	72bb      	strb	r3, [r7, #10]
        uint8_t MBvar;

        if(RPDO->dataLength)
    fbbc:	69fb      	ldr	r3, [r7, #28]
    fbbe:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
    fbc2:	2b00      	cmp	r3, #0
    fbc4:	d001      	beq.n	fbca <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xba>
            return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
    fbc6:	4b0f      	ldr	r3, [pc, #60]	; (fc04 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xf4>)
    fbc8:	e013      	b.n	fbf2 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>

        /* verify if mapping is correct */
        return  (CO_SDO_abortCode_t)CO_PDOfindMap(
    fbca:	69fb      	ldr	r3, [r7, #28]
    fbcc:	6858      	ldr	r0, [r3, #4]
    fbce:	693b      	ldr	r3, [r7, #16]
    fbd0:	6819      	ldr	r1, [r3, #0]
               *value,
                0,
               &pData,
               &length,
               &dummy,
               &MBvar);
    fbd2:	f107 020c 	add.w	r2, r7, #12
    fbd6:	f107 0309 	add.w	r3, r7, #9
    fbda:	9302      	str	r3, [sp, #8]
    fbdc:	f107 030a 	add.w	r3, r7, #10
    fbe0:	9301      	str	r3, [sp, #4]
    fbe2:	f107 030b 	add.w	r3, r7, #11
    fbe6:	9300      	str	r3, [sp, #0]
    fbe8:	4613      	mov	r3, r2
    fbea:	2200      	movs	r2, #0
    fbec:	4c08      	ldr	r4, [pc, #32]	; (fc10 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x100>)
    fbee:	47a0      	blx	r4
    fbf0:	4603      	mov	r3, r0
    }

    return CO_SDO_AB_NONE;
}
    fbf2:	4618      	mov	r0, r3
    fbf4:	3724      	adds	r7, #36	; 0x24
    fbf6:	46bd      	mov	sp, r7
    fbf8:	bd90      	pop	{r4, r7, pc}
    fbfa:	bf00      	nop
    fbfc:	06010002 	.word	0x06010002
    fc00:	08000022 	.word	0x08000022
    fc04:	06010000 	.word	0x06010000
    fc08:	06040042 	.word	0x06040042
    fc0c:	0000f60d 	.word	0x0000f60d
    fc10:	0000f40d 	.word	0x0000f40d

0000fc14 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t>:
/*
 * Function for accessing _TPDO mapping parameter_ (index 0x1A00+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_TPDOmap(CO_ODF_arg_t *ODF_arg){
    fc14:	b590      	push	{r4, r7, lr}
    fc16:	b08d      	sub	sp, #52	; 0x34
    fc18:	af04      	add	r7, sp, #16
    fc1a:	6078      	str	r0, [r7, #4]
    CO_TPDO_t *TPDO;

    TPDO = (CO_TPDO_t*) ODF_arg->object;
    fc1c:	687b      	ldr	r3, [r7, #4]
    fc1e:	681b      	ldr	r3, [r3, #0]
    fc20:	61fb      	str	r3, [r7, #28]

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
    fc22:	687b      	ldr	r3, [r7, #4]
    fc24:	7f5b      	ldrb	r3, [r3, #29]
    fc26:	2b00      	cmp	r3, #0
    fc28:	d00f      	beq.n	fc4a <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x36>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    fc2a:	687b      	ldr	r3, [r7, #4]
    fc2c:	685b      	ldr	r3, [r3, #4]
    fc2e:	61bb      	str	r3, [r7, #24]

        if(ODF_arg->subIndex == 0){
    fc30:	687b      	ldr	r3, [r7, #4]
    fc32:	7f1b      	ldrb	r3, [r3, #28]
    fc34:	2b00      	cmp	r3, #0
    fc36:	d106      	bne.n	fc46 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x32>
            /* If there is error in mapping, dataLength is 0, so numberOfMappedObjects is 0. */
            if(!TPDO->dataLength) *value = 0;
    fc38:	69fb      	ldr	r3, [r7, #28]
    fc3a:	7f9b      	ldrb	r3, [r3, #30]
    fc3c:	2b00      	cmp	r3, #0
    fc3e:	d102      	bne.n	fc46 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x32>
    fc40:	69bb      	ldr	r3, [r7, #24]
    fc42:	2200      	movs	r2, #0
    fc44:	701a      	strb	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
    fc46:	2300      	movs	r3, #0
    fc48:	e050      	b.n	fcec <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>
    }

    /* Writing Object Dictionary variable */
    if(TPDO->restrictionFlags & 0x08)
    fc4a:	69fb      	ldr	r3, [r7, #28]
    fc4c:	7f1b      	ldrb	r3, [r3, #28]
    fc4e:	f003 0308 	and.w	r3, r3, #8
    fc52:	2b00      	cmp	r3, #0
    fc54:	d001      	beq.n	fc5a <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x46>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
    fc56:	4b27      	ldr	r3, [pc, #156]	; (fcf4 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xe0>)
    fc58:	e048      	b.n	fcec <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>
    if(*TPDO->operatingState == CO_NMT_OPERATIONAL && (TPDO->restrictionFlags & 0x02))
    fc5a:	69fb      	ldr	r3, [r7, #28]
    fc5c:	691b      	ldr	r3, [r3, #16]
    fc5e:	781b      	ldrb	r3, [r3, #0]
    fc60:	2b05      	cmp	r3, #5
    fc62:	d107      	bne.n	fc74 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x60>
    fc64:	69fb      	ldr	r3, [r7, #28]
    fc66:	7f1b      	ldrb	r3, [r3, #28]
    fc68:	f003 0302 	and.w	r3, r3, #2
    fc6c:	2b00      	cmp	r3, #0
    fc6e:	d001      	beq.n	fc74 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x60>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
    fc70:	4b21      	ldr	r3, [pc, #132]	; (fcf8 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xe4>)
    fc72:	e03b      	b.n	fcec <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>
    if(TPDO->valid)
    fc74:	69fb      	ldr	r3, [r7, #28]
    fc76:	7f5b      	ldrb	r3, [r3, #29]
    fc78:	2b00      	cmp	r3, #0
    fc7a:	d001      	beq.n	fc80 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x6c>
        return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
    fc7c:	4b1f      	ldr	r3, [pc, #124]	; (fcfc <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xe8>)
    fc7e:	e035      	b.n	fcec <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>

    /* numberOfMappedObjects */
    if(ODF_arg->subIndex == 0){
    fc80:	687b      	ldr	r3, [r7, #4]
    fc82:	7f1b      	ldrb	r3, [r3, #28]
    fc84:	2b00      	cmp	r3, #0
    fc86:	d110      	bne.n	fcaa <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x96>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    fc88:	687b      	ldr	r3, [r7, #4]
    fc8a:	685b      	ldr	r3, [r3, #4]
    fc8c:	617b      	str	r3, [r7, #20]

        if(*value > 8)
    fc8e:	697b      	ldr	r3, [r7, #20]
    fc90:	781b      	ldrb	r3, [r3, #0]
    fc92:	2b08      	cmp	r3, #8
    fc94:	dd01      	ble.n	fc9a <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x86>
            return CO_SDO_AB_MAP_LEN;  /* Number and length of object to be mapped exceeds PDO length. */
    fc96:	4b1a      	ldr	r3, [pc, #104]	; (fd00 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xec>)
    fc98:	e028      	b.n	fcec <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>

        /* configure mapping */
        return (CO_SDO_abortCode_t)CO_TPDOconfigMap(TPDO, *value);
    fc9a:	697b      	ldr	r3, [r7, #20]
    fc9c:	781b      	ldrb	r3, [r3, #0]
    fc9e:	4619      	mov	r1, r3
    fca0:	69f8      	ldr	r0, [r7, #28]
    fca2:	4b18      	ldr	r3, [pc, #96]	; (fd04 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xf0>)
    fca4:	4798      	blx	r3
    fca6:	4603      	mov	r3, r0
    fca8:	e020      	b.n	fcec <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>
    }

    /* mappedObject */
    else{
        uint32_t *value = (uint32_t*) ODF_arg->data;
    fcaa:	687b      	ldr	r3, [r7, #4]
    fcac:	685b      	ldr	r3, [r3, #4]
    fcae:	613b      	str	r3, [r7, #16]
        uint8_t* pData;
        uint8_t length = 0;
    fcb0:	2300      	movs	r3, #0
    fcb2:	72fb      	strb	r3, [r7, #11]
        uint8_t dummy = 0;
    fcb4:	2300      	movs	r3, #0
    fcb6:	72bb      	strb	r3, [r7, #10]
        uint8_t MBvar;

        if(TPDO->dataLength)
    fcb8:	69fb      	ldr	r3, [r7, #28]
    fcba:	7f9b      	ldrb	r3, [r3, #30]
    fcbc:	2b00      	cmp	r3, #0
    fcbe:	d001      	beq.n	fcc4 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xb0>
            return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
    fcc0:	4b0e      	ldr	r3, [pc, #56]	; (fcfc <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xe8>)
    fcc2:	e013      	b.n	fcec <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>

        /* verify if mapping is correct */
        return (CO_SDO_abortCode_t)CO_PDOfindMap(
    fcc4:	69fb      	ldr	r3, [r7, #28]
    fcc6:	6858      	ldr	r0, [r3, #4]
    fcc8:	693b      	ldr	r3, [r7, #16]
    fcca:	6819      	ldr	r1, [r3, #0]
               *value,
                1,
               &pData,
               &length,
               &dummy,
               &MBvar);
    fccc:	f107 020c 	add.w	r2, r7, #12
    fcd0:	f107 0309 	add.w	r3, r7, #9
    fcd4:	9302      	str	r3, [sp, #8]
    fcd6:	f107 030a 	add.w	r3, r7, #10
    fcda:	9301      	str	r3, [sp, #4]
    fcdc:	f107 030b 	add.w	r3, r7, #11
    fce0:	9300      	str	r3, [sp, #0]
    fce2:	4613      	mov	r3, r2
    fce4:	2201      	movs	r2, #1
    fce6:	4c08      	ldr	r4, [pc, #32]	; (fd08 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xf4>)
    fce8:	47a0      	blx	r4
    fcea:	4603      	mov	r3, r0
    }

    return CO_SDO_AB_NONE;
}
    fcec:	4618      	mov	r0, r3
    fcee:	3724      	adds	r7, #36	; 0x24
    fcf0:	46bd      	mov	sp, r7
    fcf2:	bd90      	pop	{r4, r7, pc}
    fcf4:	06010002 	.word	0x06010002
    fcf8:	08000022 	.word	0x08000022
    fcfc:	06010000 	.word	0x06010000
    fd00:	06040042 	.word	0x06040042
    fd04:	0000f6dd 	.word	0x0000f6dd
    fd08:	0000f40d 	.word	0x0000f40d

0000fd0c <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm>:
        const CO_RPDOMapPar_t  *RPDOMapPar,
        uint32_t                idx_RPDOCommPar,
        uint32_t                idx_RPDOMapPar,
        CO_CANmodule_t         *CANdevRx,
        uint32_t                CANdevRxIdx)
{
    fd0c:	b590      	push	{r4, r7, lr}
    fd0e:	b087      	sub	sp, #28
    fd10:	af02      	add	r7, sp, #8
    fd12:	60f8      	str	r0, [r7, #12]
    fd14:	60b9      	str	r1, [r7, #8]
    fd16:	607a      	str	r2, [r7, #4]
    fd18:	603b      	str	r3, [r7, #0]
    /* verify arguments */
    if(RPDO==NULL || em==NULL || SDO==NULL || SYNC==NULL || operatingState==NULL ||
    fd1a:	68bb      	ldr	r3, [r7, #8]
    fd1c:	2b00      	cmp	r3, #0
    fd1e:	d014      	beq.n	fd4a <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
    fd20:	687b      	ldr	r3, [r7, #4]
    fd22:	2b00      	cmp	r3, #0
    fd24:	d011      	beq.n	fd4a <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
    fd26:	683b      	ldr	r3, [r7, #0]
    fd28:	2b00      	cmp	r3, #0
    fd2a:	d00e      	beq.n	fd4a <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
    fd2c:	6a3b      	ldr	r3, [r7, #32]
    fd2e:	2b00      	cmp	r3, #0
    fd30:	d00b      	beq.n	fd4a <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
    fd32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    fd34:	2b00      	cmp	r3, #0
    fd36:	d008      	beq.n	fd4a <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
    fd38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fd3a:	2b00      	cmp	r3, #0
    fd3c:	d005      	beq.n	fd4a <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
        RPDOCommPar==NULL || RPDOMapPar==NULL || CANdevRx==NULL){
    fd3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    fd40:	2b00      	cmp	r3, #0
    fd42:	d002      	beq.n	fd4a <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
    fd44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    fd46:	2b00      	cmp	r3, #0
    fd48:	d102      	bne.n	fd50 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x44>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    fd4a:	f04f 33ff 	mov.w	r3, #4294967295
    fd4e:	e050      	b.n	fdf2 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xe6>
    }

    /* Configure object variables */
    RPDO->em = em;
    fd50:	68bb      	ldr	r3, [r7, #8]
    fd52:	687a      	ldr	r2, [r7, #4]
    fd54:	601a      	str	r2, [r3, #0]
    RPDO->SDO = SDO;
    fd56:	68bb      	ldr	r3, [r7, #8]
    fd58:	683a      	ldr	r2, [r7, #0]
    fd5a:	605a      	str	r2, [r3, #4]
    RPDO->SYNC = SYNC;
    fd5c:	68bb      	ldr	r3, [r7, #8]
    fd5e:	6a3a      	ldr	r2, [r7, #32]
    fd60:	609a      	str	r2, [r3, #8]
    RPDO->RPDOCommPar = RPDOCommPar;
    fd62:	68bb      	ldr	r3, [r7, #8]
    fd64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    fd66:	60da      	str	r2, [r3, #12]
    RPDO->RPDOMapPar = RPDOMapPar;
    fd68:	68bb      	ldr	r3, [r7, #8]
    fd6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
    fd6c:	611a      	str	r2, [r3, #16]
    RPDO->operatingState = operatingState;
    fd6e:	68bb      	ldr	r3, [r7, #8]
    fd70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    fd72:	615a      	str	r2, [r3, #20]
    RPDO->nodeId = nodeId;
    fd74:	68bb      	ldr	r3, [r7, #8]
    fd76:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
    fd7a:	761a      	strb	r2, [r3, #24]
    RPDO->defaultCOB_ID = defaultCOB_ID;
    fd7c:	68bb      	ldr	r3, [r7, #8]
    fd7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    fd80:	61da      	str	r2, [r3, #28]
    RPDO->restrictionFlags = restrictionFlags;
    fd82:	68bb      	ldr	r3, [r7, #8]
    fd84:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
    fd88:	f883 2020 	strb.w	r2, [r3, #32]

    /* Configure Object dictionary entry at index 0x1400+ and 0x1600+ */
    ptrCODriverClass->CO_OD_configure( idx_RPDOCommPar, CO_ODF_RPDOcom, (void*)RPDO, 0, 0);
    fd8c:	4b1b      	ldr	r3, [pc, #108]	; (fdfc <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf0>)
    fd8e:	681b      	ldr	r3, [r3, #0]
    fd90:	1d18      	adds	r0, r3, #4
    fd92:	2300      	movs	r3, #0
    fd94:	9301      	str	r3, [sp, #4]
    fd96:	2300      	movs	r3, #0
    fd98:	9300      	str	r3, [sp, #0]
    fd9a:	68bb      	ldr	r3, [r7, #8]
    fd9c:	4a18      	ldr	r2, [pc, #96]	; (fe00 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf4>)
    fd9e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    fda0:	4c18      	ldr	r4, [pc, #96]	; (fe04 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf8>)
    fda2:	47a0      	blx	r4
    ptrCODriverClass->CO_OD_configure( idx_RPDOMapPar, CO_ODF_RPDOmap, (void*)RPDO, 0, 0);
    fda4:	4b15      	ldr	r3, [pc, #84]	; (fdfc <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf0>)
    fda6:	681b      	ldr	r3, [r3, #0]
    fda8:	1d18      	adds	r0, r3, #4
    fdaa:	2300      	movs	r3, #0
    fdac:	9301      	str	r3, [sp, #4]
    fdae:	2300      	movs	r3, #0
    fdb0:	9300      	str	r3, [sp, #0]
    fdb2:	68bb      	ldr	r3, [r7, #8]
    fdb4:	4a14      	ldr	r2, [pc, #80]	; (fe08 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xfc>)
    fdb6:	6c39      	ldr	r1, [r7, #64]	; 0x40
    fdb8:	4c12      	ldr	r4, [pc, #72]	; (fe04 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf8>)
    fdba:	47a0      	blx	r4

    /* configure communication and mapping */
    RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
    fdbc:	68bb      	ldr	r3, [r7, #8]
    fdbe:	2200      	movs	r2, #0
    fdc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    fdc4:	68bb      	ldr	r3, [r7, #8]
    fdc6:	2200      	movs	r2, #0
    fdc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    RPDO->CANdevRx = CANdevRx;
    fdcc:	68bb      	ldr	r3, [r7, #8]
    fdce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    fdd0:	659a      	str	r2, [r3, #88]	; 0x58
    RPDO->CANdevRxIdx = CANdevRxIdx;
    fdd2:	68bb      	ldr	r3, [r7, #8]
    fdd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
    fdd6:	65da      	str	r2, [r3, #92]	; 0x5c

    CO_RPDOconfigMap(RPDO, RPDOMapPar->numberOfMappedObjects);
    fdd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    fdda:	781b      	ldrb	r3, [r3, #0]
    fddc:	4619      	mov	r1, r3
    fdde:	68b8      	ldr	r0, [r7, #8]
    fde0:	4b0a      	ldr	r3, [pc, #40]	; (fe0c <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x100>)
    fde2:	4798      	blx	r3
    CO_RPDOconfigCom(RPDO, RPDOCommPar->COB_IDUsedByRPDO);
    fde4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fde6:	685b      	ldr	r3, [r3, #4]
    fde8:	4619      	mov	r1, r3
    fdea:	68b8      	ldr	r0, [r7, #8]
    fdec:	4b08      	ldr	r3, [pc, #32]	; (fe10 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x104>)
    fdee:	4798      	blx	r3

    return CO_ERROR_NO;
    fdf0:	2300      	movs	r3, #0
}
    fdf2:	4618      	mov	r0, r3
    fdf4:	3714      	adds	r7, #20
    fdf6:	46bd      	mov	sp, r7
    fdf8:	bd90      	pop	{r4, r7, pc}
    fdfa:	bf00      	nop
    fdfc:	200019b4 	.word	0x200019b4
    fe00:	0000f7ad 	.word	0x0000f7ad
    fe04:	00010921 	.word	0x00010921
    fe08:	0000fb11 	.word	0x0000fb11
    fe0c:	0000f60d 	.word	0x0000f60d
    fe10:	0000f2a1 	.word	0x0000f2a1

0000fe14 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm>:
        const CO_TPDOMapPar_t  *TPDOMapPar,
        uint32_t                idx_TPDOCommPar,
        uint32_t                idx_TPDOMapPar,
        CO_CANmodule_t         *CANdevTx,
        uint32_t                CANdevTxIdx)
{
    fe14:	b590      	push	{r4, r7, lr}
    fe16:	b087      	sub	sp, #28
    fe18:	af02      	add	r7, sp, #8
    fe1a:	60f8      	str	r0, [r7, #12]
    fe1c:	60b9      	str	r1, [r7, #8]
    fe1e:	607a      	str	r2, [r7, #4]
    fe20:	603b      	str	r3, [r7, #0]
    /* verify arguments */
    if(TPDO==NULL || em==NULL || SDO==NULL || operatingState==NULL ||
    fe22:	68bb      	ldr	r3, [r7, #8]
    fe24:	2b00      	cmp	r3, #0
    fe26:	d011      	beq.n	fe4c <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
    fe28:	687b      	ldr	r3, [r7, #4]
    fe2a:	2b00      	cmp	r3, #0
    fe2c:	d00e      	beq.n	fe4c <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
    fe2e:	683b      	ldr	r3, [r7, #0]
    fe30:	2b00      	cmp	r3, #0
    fe32:	d00b      	beq.n	fe4c <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
    fe34:	6a3b      	ldr	r3, [r7, #32]
    fe36:	2b00      	cmp	r3, #0
    fe38:	d008      	beq.n	fe4c <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
    fe3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    fe3c:	2b00      	cmp	r3, #0
    fe3e:	d005      	beq.n	fe4c <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
        TPDOCommPar==NULL || TPDOMapPar==NULL || CANdevTx==NULL){
    fe40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fe42:	2b00      	cmp	r3, #0
    fe44:	d002      	beq.n	fe4c <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
    fe46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    fe48:	2b00      	cmp	r3, #0
    fe4a:	d102      	bne.n	fe52 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    fe4c:	f04f 33ff 	mov.w	r3, #4294967295
    fe50:	e070      	b.n	ff34 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x120>
    }

    /* Configure object variables */
    TPDO->em = em;
    fe52:	68bb      	ldr	r3, [r7, #8]
    fe54:	687a      	ldr	r2, [r7, #4]
    fe56:	601a      	str	r2, [r3, #0]
    TPDO->SDO = SDO;
    fe58:	68bb      	ldr	r3, [r7, #8]
    fe5a:	683a      	ldr	r2, [r7, #0]
    fe5c:	605a      	str	r2, [r3, #4]
    TPDO->TPDOCommPar = TPDOCommPar;
    fe5e:	68bb      	ldr	r3, [r7, #8]
    fe60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    fe62:	609a      	str	r2, [r3, #8]
    TPDO->TPDOMapPar = TPDOMapPar;
    fe64:	68bb      	ldr	r3, [r7, #8]
    fe66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    fe68:	60da      	str	r2, [r3, #12]
    TPDO->operatingState = operatingState;
    fe6a:	68bb      	ldr	r3, [r7, #8]
    fe6c:	6a3a      	ldr	r2, [r7, #32]
    fe6e:	611a      	str	r2, [r3, #16]
    TPDO->nodeId = nodeId;
    fe70:	68bb      	ldr	r3, [r7, #8]
    fe72:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
    fe76:	751a      	strb	r2, [r3, #20]
    TPDO->defaultCOB_ID = defaultCOB_ID;
    fe78:	68bb      	ldr	r3, [r7, #8]
    fe7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    fe7c:	619a      	str	r2, [r3, #24]
    TPDO->restrictionFlags = restrictionFlags;
    fe7e:	68bb      	ldr	r3, [r7, #8]
    fe80:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
    fe84:	771a      	strb	r2, [r3, #28]

    /* Configure Object dictionary entry at index 0x1800+ and 0x1A00+ */
    ptrCODriverClass->CO_OD_configure( idx_TPDOCommPar, CO_ODF_TPDOcom, (void*)TPDO, 0, 0);
    fe86:	4b2d      	ldr	r3, [pc, #180]	; (ff3c <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x128>)
    fe88:	681b      	ldr	r3, [r3, #0]
    fe8a:	1d18      	adds	r0, r3, #4
    fe8c:	2300      	movs	r3, #0
    fe8e:	9301      	str	r3, [sp, #4]
    fe90:	2300      	movs	r3, #0
    fe92:	9300      	str	r3, [sp, #0]
    fe94:	68bb      	ldr	r3, [r7, #8]
    fe96:	4a2a      	ldr	r2, [pc, #168]	; (ff40 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x12c>)
    fe98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    fe9a:	4c2a      	ldr	r4, [pc, #168]	; (ff44 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x130>)
    fe9c:	47a0      	blx	r4
    ptrCODriverClass->CO_OD_configure( idx_TPDOMapPar, CO_ODF_TPDOmap, (void*)TPDO, 0, 0);
    fe9e:	4b27      	ldr	r3, [pc, #156]	; (ff3c <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x128>)
    fea0:	681b      	ldr	r3, [r3, #0]
    fea2:	1d18      	adds	r0, r3, #4
    fea4:	2300      	movs	r3, #0
    fea6:	9301      	str	r3, [sp, #4]
    fea8:	2300      	movs	r3, #0
    feaa:	9300      	str	r3, [sp, #0]
    feac:	68bb      	ldr	r3, [r7, #8]
    feae:	4a26      	ldr	r2, [pc, #152]	; (ff48 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x134>)
    feb0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    feb2:	4c24      	ldr	r4, [pc, #144]	; (ff44 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x130>)
    feb4:	47a0      	blx	r4

    /* configure communication and mapping */
    TPDO->CANdevTx = CANdevTx;
    feb6:	68bb      	ldr	r3, [r7, #8]
    feb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    feba:	64da      	str	r2, [r3, #76]	; 0x4c
    TPDO->CANdevTxIdx = CANdevTxIdx;
    febc:	68bb      	ldr	r3, [r7, #8]
    febe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    fec0:	655a      	str	r2, [r3, #84]	; 0x54
    TPDO->syncCounter = 255;
    fec2:	68bb      	ldr	r3, [r7, #8]
    fec4:	22ff      	movs	r2, #255	; 0xff
    fec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TPDO->inhibitTimer = 0;
    feca:	68bb      	ldr	r3, [r7, #8]
    fecc:	2200      	movs	r2, #0
    fece:	645a      	str	r2, [r3, #68]	; 0x44
    TPDO->eventTimer = ((uint32_t) TPDOCommPar->eventTimer) * 1000;
    fed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    fed2:	695b      	ldr	r3, [r3, #20]
    fed4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    fed8:	fb02 f203 	mul.w	r2, r2, r3
    fedc:	68bb      	ldr	r3, [r7, #8]
    fede:	649a      	str	r2, [r3, #72]	; 0x48
    if(TPDOCommPar->transmissionType>=254) TPDO->sendRequest = 1;
    fee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    fee2:	7a1b      	ldrb	r3, [r3, #8]
    fee4:	2bfd      	cmp	r3, #253	; 0xfd
    fee6:	dd02      	ble.n	feee <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0xda>
    fee8:	68bb      	ldr	r3, [r7, #8]
    feea:	2201      	movs	r2, #1
    feec:	77da      	strb	r2, [r3, #31]

    CO_TPDOconfigMap(TPDO, TPDOMapPar->numberOfMappedObjects);
    feee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fef0:	781b      	ldrb	r3, [r3, #0]
    fef2:	4619      	mov	r1, r3
    fef4:	68b8      	ldr	r0, [r7, #8]
    fef6:	4b15      	ldr	r3, [pc, #84]	; (ff4c <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x138>)
    fef8:	4798      	blx	r3
    CO_TPDOconfigCom(TPDO, TPDOCommPar->COB_IDUsedByTPDO, ((TPDOCommPar->transmissionType<=240) ? 1 : 0));
    fefa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    fefc:	6859      	ldr	r1, [r3, #4]
    fefe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ff00:	7a1b      	ldrb	r3, [r3, #8]
    ff02:	2bf0      	cmp	r3, #240	; 0xf0
    ff04:	dc01      	bgt.n	ff0a <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0xf6>
    ff06:	2301      	movs	r3, #1
    ff08:	e000      	b.n	ff0c <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0xf8>
    ff0a:	2300      	movs	r3, #0
    ff0c:	461a      	mov	r2, r3
    ff0e:	68b8      	ldr	r0, [r7, #8]
    ff10:	4b0f      	ldr	r3, [pc, #60]	; (ff50 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x13c>)
    ff12:	4798      	blx	r3

    if((TPDOCommPar->transmissionType>240 &&
    ff14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ff16:	7a1b      	ldrb	r3, [r3, #8]
    ff18:	2bf0      	cmp	r3, #240	; 0xf0
    ff1a:	dd03      	ble.n	ff24 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x110>
         TPDOCommPar->transmissionType<254) ||
    ff1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ff1e:	7a1b      	ldrb	r3, [r3, #8]
    if((TPDOCommPar->transmissionType>240 &&
    ff20:	2bfd      	cmp	r3, #253	; 0xfd
    ff22:	dd03      	ble.n	ff2c <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x118>
         TPDOCommPar->SYNCStartValue>240){
    ff24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ff26:	7e1b      	ldrb	r3, [r3, #24]
         TPDOCommPar->transmissionType<254) ||
    ff28:	2bf0      	cmp	r3, #240	; 0xf0
    ff2a:	dd02      	ble.n	ff32 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x11e>
            TPDO->valid = false;
    ff2c:	68bb      	ldr	r3, [r7, #8]
    ff2e:	2200      	movs	r2, #0
    ff30:	775a      	strb	r2, [r3, #29]
    }

    return CO_ERROR_NO;
    ff32:	2300      	movs	r3, #0
}
    ff34:	4618      	mov	r0, r3
    ff36:	3714      	adds	r7, #20
    ff38:	46bd      	mov	sp, r7
    ff3a:	bd90      	pop	{r4, r7, pc}
    ff3c:	200019b4 	.word	0x200019b4
    ff40:	0000f92d 	.word	0x0000f92d
    ff44:	00010921 	.word	0x00010921
    ff48:	0000fc15 	.word	0x0000fc15
    ff4c:	0000f6dd 	.word	0x0000f6dd
    ff50:	0000f379 	.word	0x0000f379

0000ff54 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t>:


/******************************************************************************/
uint8_t CO_PDO_Class::CO_TPDOisCOS(CO_TPDO_t *TPDO){
    ff54:	b480      	push	{r7}
    ff56:	b085      	sub	sp, #20
    ff58:	af00      	add	r7, sp, #0
    ff5a:	6078      	str	r0, [r7, #4]
    ff5c:	6039      	str	r1, [r7, #0]

    /* Prepare TPDO data automatically from Object Dictionary variables */
    uint8_t* pPDOdataByte;
    uint8_t** ppODdataByte;

    pPDOdataByte = &TPDO->CANtxBuff->data[TPDO->dataLength];
    ff5e:	683b      	ldr	r3, [r7, #0]
    ff60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    ff62:	683a      	ldr	r2, [r7, #0]
    ff64:	7f92      	ldrb	r2, [r2, #30]
    ff66:	4413      	add	r3, r2
    ff68:	3305      	adds	r3, #5
    ff6a:	60fb      	str	r3, [r7, #12]
    ppODdataByte = &TPDO->mapPointer[TPDO->dataLength];
    ff6c:	683b      	ldr	r3, [r7, #0]
    ff6e:	7f9b      	ldrb	r3, [r3, #30]
    ff70:	3308      	adds	r3, #8
    ff72:	009b      	lsls	r3, r3, #2
    ff74:	683a      	ldr	r2, [r7, #0]
    ff76:	4413      	add	r3, r2
    ff78:	60bb      	str	r3, [r7, #8]

    switch(TPDO->dataLength){
    ff7a:	683b      	ldr	r3, [r7, #0]
    ff7c:	7f9b      	ldrb	r3, [r3, #30]
    ff7e:	3b01      	subs	r3, #1
    ff80:	2b07      	cmp	r3, #7
    ff82:	f200 80ea 	bhi.w	1015a <STACK_SIZE+0x15a>
    ff86:	a201      	add	r2, pc, #4	; (adr r2, ff8c <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x38>)
    ff88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ff8c:	00010125 	.word	0x00010125
    ff90:	000100ef 	.word	0x000100ef
    ff94:	000100b9 	.word	0x000100b9
    ff98:	00010083 	.word	0x00010083
    ff9c:	0001004d 	.word	0x0001004d
    ffa0:	00010017 	.word	0x00010017
    ffa4:	0000ffe1 	.word	0x0000ffe1
    ffa8:	0000ffad 	.word	0x0000ffad
        case 8: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x80)) return 1;
    ffac:	68fb      	ldr	r3, [r7, #12]
    ffae:	3b01      	subs	r3, #1
    ffb0:	60fb      	str	r3, [r7, #12]
    ffb2:	68fb      	ldr	r3, [r7, #12]
    ffb4:	781a      	ldrb	r2, [r3, #0]
    ffb6:	68bb      	ldr	r3, [r7, #8]
    ffb8:	3b04      	subs	r3, #4
    ffba:	60bb      	str	r3, [r7, #8]
    ffbc:	68bb      	ldr	r3, [r7, #8]
    ffbe:	681b      	ldr	r3, [r3, #0]
    ffc0:	781b      	ldrb	r3, [r3, #0]
    ffc2:	429a      	cmp	r2, r3
    ffc4:	d007      	beq.n	ffd6 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x82>
    ffc6:	683b      	ldr	r3, [r7, #0]
    ffc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    ffcc:	b25b      	sxtb	r3, r3
    ffce:	2b00      	cmp	r3, #0
    ffd0:	da01      	bge.n	ffd6 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x82>
    ffd2:	2301      	movs	r3, #1
    ffd4:	e000      	b.n	ffd8 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x84>
    ffd6:	2300      	movs	r3, #0
    ffd8:	2b00      	cmp	r3, #0
    ffda:	d001      	beq.n	ffe0 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x8c>
    ffdc:	2301      	movs	r3, #1
    ffde:	e0bd      	b.n	1015c <STACK_SIZE+0x15c>
        case 7: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x40)) return 1;
    ffe0:	68fb      	ldr	r3, [r7, #12]
    ffe2:	3b01      	subs	r3, #1
    ffe4:	60fb      	str	r3, [r7, #12]
    ffe6:	68fb      	ldr	r3, [r7, #12]
    ffe8:	781a      	ldrb	r2, [r3, #0]
    ffea:	68bb      	ldr	r3, [r7, #8]
    ffec:	3b04      	subs	r3, #4
    ffee:	60bb      	str	r3, [r7, #8]
    fff0:	68bb      	ldr	r3, [r7, #8]
    fff2:	681b      	ldr	r3, [r3, #0]
    fff4:	781b      	ldrb	r3, [r3, #0]
    fff6:	429a      	cmp	r2, r3
    fff8:	d008      	beq.n	1000c <STACK_SIZE+0xc>
    fffa:	683b      	ldr	r3, [r7, #0]
    fffc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   10000:	f003 0340 	and.w	r3, r3, #64	; 0x40
   10004:	2b00      	cmp	r3, #0
   10006:	d001      	beq.n	1000c <STACK_SIZE+0xc>
   10008:	2301      	movs	r3, #1
   1000a:	e000      	b.n	1000e <STACK_SIZE+0xe>
   1000c:	2300      	movs	r3, #0
   1000e:	2b00      	cmp	r3, #0
   10010:	d001      	beq.n	10016 <STACK_SIZE+0x16>
   10012:	2301      	movs	r3, #1
   10014:	e0a2      	b.n	1015c <STACK_SIZE+0x15c>
        case 6: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x20)) return 1;
   10016:	68fb      	ldr	r3, [r7, #12]
   10018:	3b01      	subs	r3, #1
   1001a:	60fb      	str	r3, [r7, #12]
   1001c:	68fb      	ldr	r3, [r7, #12]
   1001e:	781a      	ldrb	r2, [r3, #0]
   10020:	68bb      	ldr	r3, [r7, #8]
   10022:	3b04      	subs	r3, #4
   10024:	60bb      	str	r3, [r7, #8]
   10026:	68bb      	ldr	r3, [r7, #8]
   10028:	681b      	ldr	r3, [r3, #0]
   1002a:	781b      	ldrb	r3, [r3, #0]
   1002c:	429a      	cmp	r2, r3
   1002e:	d008      	beq.n	10042 <STACK_SIZE+0x42>
   10030:	683b      	ldr	r3, [r7, #0]
   10032:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   10036:	f003 0320 	and.w	r3, r3, #32
   1003a:	2b00      	cmp	r3, #0
   1003c:	d001      	beq.n	10042 <STACK_SIZE+0x42>
   1003e:	2301      	movs	r3, #1
   10040:	e000      	b.n	10044 <STACK_SIZE+0x44>
   10042:	2300      	movs	r3, #0
   10044:	2b00      	cmp	r3, #0
   10046:	d001      	beq.n	1004c <STACK_SIZE+0x4c>
   10048:	2301      	movs	r3, #1
   1004a:	e087      	b.n	1015c <STACK_SIZE+0x15c>
        case 5: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x10)) return 1;
   1004c:	68fb      	ldr	r3, [r7, #12]
   1004e:	3b01      	subs	r3, #1
   10050:	60fb      	str	r3, [r7, #12]
   10052:	68fb      	ldr	r3, [r7, #12]
   10054:	781a      	ldrb	r2, [r3, #0]
   10056:	68bb      	ldr	r3, [r7, #8]
   10058:	3b04      	subs	r3, #4
   1005a:	60bb      	str	r3, [r7, #8]
   1005c:	68bb      	ldr	r3, [r7, #8]
   1005e:	681b      	ldr	r3, [r3, #0]
   10060:	781b      	ldrb	r3, [r3, #0]
   10062:	429a      	cmp	r2, r3
   10064:	d008      	beq.n	10078 <STACK_SIZE+0x78>
   10066:	683b      	ldr	r3, [r7, #0]
   10068:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   1006c:	f003 0310 	and.w	r3, r3, #16
   10070:	2b00      	cmp	r3, #0
   10072:	d001      	beq.n	10078 <STACK_SIZE+0x78>
   10074:	2301      	movs	r3, #1
   10076:	e000      	b.n	1007a <STACK_SIZE+0x7a>
   10078:	2300      	movs	r3, #0
   1007a:	2b00      	cmp	r3, #0
   1007c:	d001      	beq.n	10082 <STACK_SIZE+0x82>
   1007e:	2301      	movs	r3, #1
   10080:	e06c      	b.n	1015c <STACK_SIZE+0x15c>
        case 4: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x08)) return 1;
   10082:	68fb      	ldr	r3, [r7, #12]
   10084:	3b01      	subs	r3, #1
   10086:	60fb      	str	r3, [r7, #12]
   10088:	68fb      	ldr	r3, [r7, #12]
   1008a:	781a      	ldrb	r2, [r3, #0]
   1008c:	68bb      	ldr	r3, [r7, #8]
   1008e:	3b04      	subs	r3, #4
   10090:	60bb      	str	r3, [r7, #8]
   10092:	68bb      	ldr	r3, [r7, #8]
   10094:	681b      	ldr	r3, [r3, #0]
   10096:	781b      	ldrb	r3, [r3, #0]
   10098:	429a      	cmp	r2, r3
   1009a:	d008      	beq.n	100ae <STACK_SIZE+0xae>
   1009c:	683b      	ldr	r3, [r7, #0]
   1009e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   100a2:	f003 0308 	and.w	r3, r3, #8
   100a6:	2b00      	cmp	r3, #0
   100a8:	d001      	beq.n	100ae <STACK_SIZE+0xae>
   100aa:	2301      	movs	r3, #1
   100ac:	e000      	b.n	100b0 <STACK_SIZE+0xb0>
   100ae:	2300      	movs	r3, #0
   100b0:	2b00      	cmp	r3, #0
   100b2:	d001      	beq.n	100b8 <STACK_SIZE+0xb8>
   100b4:	2301      	movs	r3, #1
   100b6:	e051      	b.n	1015c <STACK_SIZE+0x15c>
        case 3: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x04)) return 1;
   100b8:	68fb      	ldr	r3, [r7, #12]
   100ba:	3b01      	subs	r3, #1
   100bc:	60fb      	str	r3, [r7, #12]
   100be:	68fb      	ldr	r3, [r7, #12]
   100c0:	781a      	ldrb	r2, [r3, #0]
   100c2:	68bb      	ldr	r3, [r7, #8]
   100c4:	3b04      	subs	r3, #4
   100c6:	60bb      	str	r3, [r7, #8]
   100c8:	68bb      	ldr	r3, [r7, #8]
   100ca:	681b      	ldr	r3, [r3, #0]
   100cc:	781b      	ldrb	r3, [r3, #0]
   100ce:	429a      	cmp	r2, r3
   100d0:	d008      	beq.n	100e4 <STACK_SIZE+0xe4>
   100d2:	683b      	ldr	r3, [r7, #0]
   100d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   100d8:	f003 0304 	and.w	r3, r3, #4
   100dc:	2b00      	cmp	r3, #0
   100de:	d001      	beq.n	100e4 <STACK_SIZE+0xe4>
   100e0:	2301      	movs	r3, #1
   100e2:	e000      	b.n	100e6 <STACK_SIZE+0xe6>
   100e4:	2300      	movs	r3, #0
   100e6:	2b00      	cmp	r3, #0
   100e8:	d001      	beq.n	100ee <STACK_SIZE+0xee>
   100ea:	2301      	movs	r3, #1
   100ec:	e036      	b.n	1015c <STACK_SIZE+0x15c>
        case 2: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x02)) return 1;
   100ee:	68fb      	ldr	r3, [r7, #12]
   100f0:	3b01      	subs	r3, #1
   100f2:	60fb      	str	r3, [r7, #12]
   100f4:	68fb      	ldr	r3, [r7, #12]
   100f6:	781a      	ldrb	r2, [r3, #0]
   100f8:	68bb      	ldr	r3, [r7, #8]
   100fa:	3b04      	subs	r3, #4
   100fc:	60bb      	str	r3, [r7, #8]
   100fe:	68bb      	ldr	r3, [r7, #8]
   10100:	681b      	ldr	r3, [r3, #0]
   10102:	781b      	ldrb	r3, [r3, #0]
   10104:	429a      	cmp	r2, r3
   10106:	d008      	beq.n	1011a <STACK_SIZE+0x11a>
   10108:	683b      	ldr	r3, [r7, #0]
   1010a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   1010e:	f003 0302 	and.w	r3, r3, #2
   10112:	2b00      	cmp	r3, #0
   10114:	d001      	beq.n	1011a <STACK_SIZE+0x11a>
   10116:	2301      	movs	r3, #1
   10118:	e000      	b.n	1011c <STACK_SIZE+0x11c>
   1011a:	2300      	movs	r3, #0
   1011c:	2b00      	cmp	r3, #0
   1011e:	d001      	beq.n	10124 <STACK_SIZE+0x124>
   10120:	2301      	movs	r3, #1
   10122:	e01b      	b.n	1015c <STACK_SIZE+0x15c>
        case 1: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x01)) return 1;
   10124:	68fb      	ldr	r3, [r7, #12]
   10126:	3b01      	subs	r3, #1
   10128:	60fb      	str	r3, [r7, #12]
   1012a:	68fb      	ldr	r3, [r7, #12]
   1012c:	781a      	ldrb	r2, [r3, #0]
   1012e:	68bb      	ldr	r3, [r7, #8]
   10130:	3b04      	subs	r3, #4
   10132:	60bb      	str	r3, [r7, #8]
   10134:	68bb      	ldr	r3, [r7, #8]
   10136:	681b      	ldr	r3, [r3, #0]
   10138:	781b      	ldrb	r3, [r3, #0]
   1013a:	429a      	cmp	r2, r3
   1013c:	d008      	beq.n	10150 <STACK_SIZE+0x150>
   1013e:	683b      	ldr	r3, [r7, #0]
   10140:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   10144:	f003 0301 	and.w	r3, r3, #1
   10148:	2b00      	cmp	r3, #0
   1014a:	d001      	beq.n	10150 <STACK_SIZE+0x150>
   1014c:	2301      	movs	r3, #1
   1014e:	e000      	b.n	10152 <STACK_SIZE+0x152>
   10150:	2300      	movs	r3, #0
   10152:	2b00      	cmp	r3, #0
   10154:	d001      	beq.n	1015a <STACK_SIZE+0x15a>
   10156:	2301      	movs	r3, #1
   10158:	e000      	b.n	1015c <STACK_SIZE+0x15c>
    }

    return 0;
   1015a:	2300      	movs	r3, #0
}
   1015c:	4618      	mov	r0, r3
   1015e:	3714      	adds	r7, #20
   10160:	46bd      	mov	sp, r7
   10162:	bc80      	pop	{r7}
   10164:	4770      	bx	lr
   10166:	bf00      	nop

00010168 <_ZN12CO_PDO_Class11CO_TPDOsendEP9CO_TPDO_t>:

//#define TPDO_CALLS_EXTENSION
/******************************************************************************/
uint32_t CO_PDO_Class::CO_TPDOsend(CO_TPDO_t *TPDO){
   10168:	b580      	push	{r7, lr}
   1016a:	b086      	sub	sp, #24
   1016c:	af00      	add	r7, sp, #0
   1016e:	6078      	str	r0, [r7, #4]
   10170:	6039      	str	r1, [r7, #0]
            ODF_arg.dataLength = CO_OD_getLength(pSDO, entryNo, subIndex);
            ext->pODFunc(&ODF_arg);
        }
    }
#endif
    i = TPDO->dataLength;
   10172:	683b      	ldr	r3, [r7, #0]
   10174:	7f9b      	ldrb	r3, [r3, #30]
   10176:	617b      	str	r3, [r7, #20]
    pPDOdataByte = &TPDO->CANtxBuff->data[0];
   10178:	683b      	ldr	r3, [r7, #0]
   1017a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1017c:	3305      	adds	r3, #5
   1017e:	613b      	str	r3, [r7, #16]
    ppODdataByte = &TPDO->mapPointer[0];
   10180:	683b      	ldr	r3, [r7, #0]
   10182:	3320      	adds	r3, #32
   10184:	60fb      	str	r3, [r7, #12]

    /* Copy data from Object dictionary. */
    for(; i>0; i--) {
   10186:	697b      	ldr	r3, [r7, #20]
   10188:	2b00      	cmp	r3, #0
   1018a:	d00c      	beq.n	101a6 <_ZN12CO_PDO_Class11CO_TPDOsendEP9CO_TPDO_t+0x3e>
        *(pPDOdataByte++) = **(ppODdataByte++);
   1018c:	693b      	ldr	r3, [r7, #16]
   1018e:	1c5a      	adds	r2, r3, #1
   10190:	613a      	str	r2, [r7, #16]
   10192:	68fa      	ldr	r2, [r7, #12]
   10194:	1d11      	adds	r1, r2, #4
   10196:	60f9      	str	r1, [r7, #12]
   10198:	6812      	ldr	r2, [r2, #0]
   1019a:	7812      	ldrb	r2, [r2, #0]
   1019c:	701a      	strb	r2, [r3, #0]
    for(; i>0; i--) {
   1019e:	697b      	ldr	r3, [r7, #20]
   101a0:	3b01      	subs	r3, #1
   101a2:	617b      	str	r3, [r7, #20]
   101a4:	e7ef      	b.n	10186 <_ZN12CO_PDO_Class11CO_TPDOsendEP9CO_TPDO_t+0x1e>
    }

    TPDO->sendRequest = 0;
   101a6:	683b      	ldr	r3, [r7, #0]
   101a8:	2200      	movs	r2, #0
   101aa:	77da      	strb	r2, [r3, #31]

    return   ptrCODriverClass->CAN_Send( TPDO->CANtxBuff);
   101ac:	4b06      	ldr	r3, [pc, #24]	; (101c8 <_ZN12CO_PDO_Class11CO_TPDOsendEP9CO_TPDO_t+0x60>)
   101ae:	681a      	ldr	r2, [r3, #0]
   101b0:	683b      	ldr	r3, [r7, #0]
   101b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   101b4:	4619      	mov	r1, r3
   101b6:	4610      	mov	r0, r2
   101b8:	4b04      	ldr	r3, [pc, #16]	; (101cc <_ZN12CO_PDO_Class11CO_TPDOsendEP9CO_TPDO_t+0x64>)
   101ba:	4798      	blx	r3
   101bc:	4603      	mov	r3, r0
}
   101be:	4618      	mov	r0, r3
   101c0:	3718      	adds	r7, #24
   101c2:	46bd      	mov	sp, r7
   101c4:	bd80      	pop	{r7, pc}
   101c6:	bf00      	nop
   101c8:	200019b4 	.word	0x200019b4
   101cc:	0000d9ad 	.word	0x0000d9ad

000101d0 <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th>:

//#define RPDO_CALLS_EXTENSION
/******************************************************************************/
void CO_PDO_Class::CO_RPDO_process(CO_RPDO_t *RPDO, bool_t syncWas){
   101d0:	b480      	push	{r7}
   101d2:	b089      	sub	sp, #36	; 0x24
   101d4:	af00      	add	r7, sp, #0
   101d6:	60f8      	str	r0, [r7, #12]
   101d8:	60b9      	str	r1, [r7, #8]
   101da:	4613      	mov	r3, r2
   101dc:	71fb      	strb	r3, [r7, #7]

    if(!RPDO->valid || !(*RPDO->operatingState == CO_NMT_OPERATIONAL))
   101de:	68bb      	ldr	r3, [r7, #8]
   101e0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   101e4:	2b00      	cmp	r3, #0
   101e6:	d004      	beq.n	101f2 <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0x22>
   101e8:	68bb      	ldr	r3, [r7, #8]
   101ea:	695b      	ldr	r3, [r3, #20]
   101ec:	781b      	ldrb	r3, [r3, #0]
   101ee:	2b05      	cmp	r3, #5
   101f0:	d009      	beq.n	10206 <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0x36>
    {
        RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
   101f2:	68bb      	ldr	r3, [r7, #8]
   101f4:	2200      	movs	r2, #0
   101f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   101fa:	68bb      	ldr	r3, [r7, #8]
   101fc:	2200      	movs	r2, #0
   101fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
   10202:	bf00      	nop
                }
            }
#endif
        }
    }
}
   10204:	e046      	b.n	10294 <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0xc4>
    else if(!RPDO->synchronous || syncWas)
   10206:	68bb      	ldr	r3, [r7, #8]
   10208:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
   1020c:	2b00      	cmp	r3, #0
   1020e:	d002      	beq.n	10216 <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0x46>
   10210:	79fb      	ldrb	r3, [r7, #7]
   10212:	2b00      	cmp	r3, #0
   10214:	d03e      	beq.n	10294 <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0xc4>
        uint8_t bufNo = 0;
   10216:	2300      	movs	r3, #0
   10218:	77fb      	strb	r3, [r7, #31]
        if(RPDO->synchronous && !RPDO->SYNC->CANrxToggle) {
   1021a:	68bb      	ldr	r3, [r7, #8]
   1021c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
   10220:	2b00      	cmp	r3, #0
   10222:	d006      	beq.n	10232 <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0x62>
   10224:	68bb      	ldr	r3, [r7, #8]
   10226:	689b      	ldr	r3, [r3, #8]
   10228:	7edb      	ldrb	r3, [r3, #27]
   1022a:	2b00      	cmp	r3, #0
   1022c:	d101      	bne.n	10232 <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0x62>
            bufNo = 1;
   1022e:	2301      	movs	r3, #1
   10230:	77fb      	strb	r3, [r7, #31]
        while(RPDO->CANrxNew[bufNo]){
   10232:	7ffb      	ldrb	r3, [r7, #31]
   10234:	68ba      	ldr	r2, [r7, #8]
   10236:	4413      	add	r3, r2
   10238:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
   1023c:	b2db      	uxtb	r3, r3
   1023e:	2b00      	cmp	r3, #0
   10240:	bf14      	ite	ne
   10242:	2301      	movne	r3, #1
   10244:	2300      	moveq	r3, #0
   10246:	b2db      	uxtb	r3, r3
   10248:	2b00      	cmp	r3, #0
   1024a:	d023      	beq.n	10294 <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0xc4>
            i = RPDO->dataLength;
   1024c:	68bb      	ldr	r3, [r7, #8]
   1024e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   10252:	61bb      	str	r3, [r7, #24]
            pPDOdataByte = &RPDO->CANrxData[bufNo][0];
   10254:	7ffb      	ldrb	r3, [r7, #31]
   10256:	3308      	adds	r3, #8
   10258:	00db      	lsls	r3, r3, #3
   1025a:	68ba      	ldr	r2, [r7, #8]
   1025c:	4413      	add	r3, r2
   1025e:	3306      	adds	r3, #6
   10260:	617b      	str	r3, [r7, #20]
            ppODdataByte = &RPDO->mapPointer[0];
   10262:	68bb      	ldr	r3, [r7, #8]
   10264:	3324      	adds	r3, #36	; 0x24
   10266:	613b      	str	r3, [r7, #16]
            RPDO->CANrxNew[bufNo] = false;
   10268:	7ffb      	ldrb	r3, [r7, #31]
   1026a:	68ba      	ldr	r2, [r7, #8]
   1026c:	4413      	add	r3, r2
   1026e:	2200      	movs	r2, #0
   10270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            for(; i>0; i--) {
   10274:	69bb      	ldr	r3, [r7, #24]
   10276:	2b00      	cmp	r3, #0
   10278:	d0db      	beq.n	10232 <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0x62>
                **(ppODdataByte++) = *(pPDOdataByte++);
   1027a:	693b      	ldr	r3, [r7, #16]
   1027c:	1d1a      	adds	r2, r3, #4
   1027e:	613a      	str	r2, [r7, #16]
   10280:	681a      	ldr	r2, [r3, #0]
   10282:	697b      	ldr	r3, [r7, #20]
   10284:	1c59      	adds	r1, r3, #1
   10286:	6179      	str	r1, [r7, #20]
   10288:	781b      	ldrb	r3, [r3, #0]
   1028a:	7013      	strb	r3, [r2, #0]
            for(; i>0; i--) {
   1028c:	69bb      	ldr	r3, [r7, #24]
   1028e:	3b01      	subs	r3, #1
   10290:	61bb      	str	r3, [r7, #24]
   10292:	e7ef      	b.n	10274 <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0xa4>
}
   10294:	bf00      	nop
   10296:	3724      	adds	r7, #36	; 0x24
   10298:	46bd      	mov	sp, r7
   1029a:	bc80      	pop	{r7}
   1029c:	4770      	bx	lr
	...

000102a0 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm>:
void CO_PDO_Class::CO_TPDO_process(
        CO_TPDO_t              *TPDO,
        CO_SYNC_t              *SYNC,
        bool_t                  syncWas,
        uint32_t                timeDifference_us)
{
   102a0:	b580      	push	{r7, lr}
   102a2:	b084      	sub	sp, #16
   102a4:	af00      	add	r7, sp, #0
   102a6:	60f8      	str	r0, [r7, #12]
   102a8:	60b9      	str	r1, [r7, #8]
   102aa:	607a      	str	r2, [r7, #4]
   102ac:	70fb      	strb	r3, [r7, #3]
    if(TPDO->valid && *TPDO->operatingState == CO_NMT_OPERATIONAL){
   102ae:	68bb      	ldr	r3, [r7, #8]
   102b0:	7f5b      	ldrb	r3, [r3, #29]
   102b2:	2b00      	cmp	r3, #0
   102b4:	f000 809e 	beq.w	103f4 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x154>
   102b8:	68bb      	ldr	r3, [r7, #8]
   102ba:	691b      	ldr	r3, [r3, #16]
   102bc:	781b      	ldrb	r3, [r3, #0]
   102be:	2b05      	cmp	r3, #5
   102c0:	f040 8098 	bne.w	103f4 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x154>

        /* Send PDO by application request or by Event timer */
        if(TPDO->TPDOCommPar->transmissionType >= 253){
   102c4:	68bb      	ldr	r3, [r7, #8]
   102c6:	689b      	ldr	r3, [r3, #8]
   102c8:	7a1b      	ldrb	r3, [r3, #8]
   102ca:	2bfc      	cmp	r3, #252	; 0xfc
   102cc:	dd31      	ble.n	10332 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x92>
            if(TPDO->inhibitTimer == 0 && (TPDO->sendRequest || (TPDO->TPDOCommPar->eventTimer && TPDO->eventTimer == 0))){
   102ce:	68bb      	ldr	r3, [r7, #8]
   102d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   102d2:	2b00      	cmp	r3, #0
   102d4:	f040 809b 	bne.w	1040e <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
   102d8:	68bb      	ldr	r3, [r7, #8]
   102da:	7fdb      	ldrb	r3, [r3, #31]
   102dc:	2b00      	cmp	r3, #0
   102de:	d10a      	bne.n	102f6 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x56>
   102e0:	68bb      	ldr	r3, [r7, #8]
   102e2:	689b      	ldr	r3, [r3, #8]
   102e4:	695b      	ldr	r3, [r3, #20]
   102e6:	2b00      	cmp	r3, #0
   102e8:	f000 8091 	beq.w	1040e <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
   102ec:	68bb      	ldr	r3, [r7, #8]
   102ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   102f0:	2b00      	cmp	r3, #0
   102f2:	f040 808c 	bne.w	1040e <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
                if(CO_TPDOsend(TPDO) == CO_ERROR_NO){
   102f6:	68b9      	ldr	r1, [r7, #8]
   102f8:	68f8      	ldr	r0, [r7, #12]
   102fa:	4b54      	ldr	r3, [pc, #336]	; (1044c <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x1ac>)
   102fc:	4798      	blx	r3
   102fe:	4603      	mov	r3, r0
   10300:	2b00      	cmp	r3, #0
   10302:	bf0c      	ite	eq
   10304:	2301      	moveq	r3, #1
   10306:	2300      	movne	r3, #0
   10308:	b2db      	uxtb	r3, r3
   1030a:	2b00      	cmp	r3, #0
   1030c:	d07f      	beq.n	1040e <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
                    /* successfully sent */
                    TPDO->inhibitTimer = ((uint32_t) TPDO->TPDOCommPar->inhibitTime) * 100;
   1030e:	68bb      	ldr	r3, [r7, #8]
   10310:	689b      	ldr	r3, [r3, #8]
   10312:	68db      	ldr	r3, [r3, #12]
   10314:	2264      	movs	r2, #100	; 0x64
   10316:	fb02 f203 	mul.w	r2, r2, r3
   1031a:	68bb      	ldr	r3, [r7, #8]
   1031c:	645a      	str	r2, [r3, #68]	; 0x44
                    TPDO->eventTimer = ((uint32_t) TPDO->TPDOCommPar->eventTimer) * 1000;
   1031e:	68bb      	ldr	r3, [r7, #8]
   10320:	689b      	ldr	r3, [r3, #8]
   10322:	695b      	ldr	r3, [r3, #20]
   10324:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10328:	fb02 f203 	mul.w	r2, r2, r3
   1032c:	68bb      	ldr	r3, [r7, #8]
   1032e:	649a      	str	r2, [r3, #72]	; 0x48
        if(TPDO->TPDOCommPar->transmissionType >= 253){
   10330:	e06d      	b.n	1040e <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
                }
            }
        }

        /* Synchronous PDOs */
        else if(SYNC && syncWas){
   10332:	687b      	ldr	r3, [r7, #4]
   10334:	2b00      	cmp	r3, #0
   10336:	d06a      	beq.n	1040e <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
   10338:	78fb      	ldrb	r3, [r7, #3]
   1033a:	2b00      	cmp	r3, #0
   1033c:	d067      	beq.n	1040e <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
            /* send synchronous acyclic PDO */
            if(TPDO->TPDOCommPar->transmissionType == 0){
   1033e:	68bb      	ldr	r3, [r7, #8]
   10340:	689b      	ldr	r3, [r3, #8]
   10342:	7a1b      	ldrb	r3, [r3, #8]
   10344:	2b00      	cmp	r3, #0
   10346:	d108      	bne.n	1035a <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0xba>
                if(TPDO->sendRequest) CO_TPDOsend(TPDO);
   10348:	68bb      	ldr	r3, [r7, #8]
   1034a:	7fdb      	ldrb	r3, [r3, #31]
   1034c:	2b00      	cmp	r3, #0
   1034e:	d05e      	beq.n	1040e <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
   10350:	68b9      	ldr	r1, [r7, #8]
   10352:	68f8      	ldr	r0, [r7, #12]
   10354:	4b3d      	ldr	r3, [pc, #244]	; (1044c <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x1ac>)
   10356:	4798      	blx	r3
        if(TPDO->TPDOCommPar->transmissionType >= 253){
   10358:	e059      	b.n	1040e <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
            }
            /* send synchronous cyclic PDO */
            else{
                /* is the start of synchronous TPDO transmission */
                if(TPDO->syncCounter == 255){
   1035a:	68bb      	ldr	r3, [r7, #8]
   1035c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   10360:	2bff      	cmp	r3, #255	; 0xff
   10362:	d113      	bne.n	1038c <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0xec>
                    if(SYNC->counterOverflowValue && TPDO->TPDOCommPar->SYNCStartValue)
   10364:	687b      	ldr	r3, [r7, #4]
   10366:	7e1b      	ldrb	r3, [r3, #24]
   10368:	2b00      	cmp	r3, #0
   1036a:	d009      	beq.n	10380 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0xe0>
   1036c:	68bb      	ldr	r3, [r7, #8]
   1036e:	689b      	ldr	r3, [r3, #8]
   10370:	7e1b      	ldrb	r3, [r3, #24]
   10372:	2b00      	cmp	r3, #0
   10374:	d004      	beq.n	10380 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0xe0>
                        TPDO->syncCounter = 254;   /* SYNCStartValue is in use */
   10376:	68bb      	ldr	r3, [r7, #8]
   10378:	22fe      	movs	r2, #254	; 0xfe
   1037a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
   1037e:	e005      	b.n	1038c <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0xec>
                    else
                        TPDO->syncCounter = TPDO->TPDOCommPar->transmissionType;
   10380:	68bb      	ldr	r3, [r7, #8]
   10382:	689b      	ldr	r3, [r3, #8]
   10384:	7a1a      	ldrb	r2, [r3, #8]
   10386:	68bb      	ldr	r3, [r7, #8]
   10388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                }
                /* if the SYNCStartValue is in use, start first TPDO after SYNC with matched SYNCStartValue. */
                if(TPDO->syncCounter == 254){
   1038c:	68bb      	ldr	r3, [r7, #8]
   1038e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   10392:	2bfe      	cmp	r3, #254	; 0xfe
   10394:	d111      	bne.n	103ba <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x11a>
                    if(SYNC->counter == TPDO->TPDOCommPar->SYNCStartValue){
   10396:	687b      	ldr	r3, [r7, #4]
   10398:	7f1a      	ldrb	r2, [r3, #28]
   1039a:	68bb      	ldr	r3, [r7, #8]
   1039c:	689b      	ldr	r3, [r3, #8]
   1039e:	7e1b      	ldrb	r3, [r3, #24]
   103a0:	429a      	cmp	r2, r3
   103a2:	d134      	bne.n	1040e <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
                        TPDO->syncCounter = TPDO->TPDOCommPar->transmissionType;
   103a4:	68bb      	ldr	r3, [r7, #8]
   103a6:	689b      	ldr	r3, [r3, #8]
   103a8:	7a1a      	ldrb	r2, [r3, #8]
   103aa:	68bb      	ldr	r3, [r7, #8]
   103ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                        CO_TPDOsend(TPDO);
   103b0:	68b9      	ldr	r1, [r7, #8]
   103b2:	68f8      	ldr	r0, [r7, #12]
   103b4:	4b25      	ldr	r3, [pc, #148]	; (1044c <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x1ac>)
   103b6:	4798      	blx	r3
        if(TPDO->TPDOCommPar->transmissionType >= 253){
   103b8:	e029      	b.n	1040e <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
                    }
                }
                /* Send PDO after every N-th Sync */
                else if(--TPDO->syncCounter == 0){
   103ba:	68bb      	ldr	r3, [r7, #8]
   103bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   103c0:	3b01      	subs	r3, #1
   103c2:	b2da      	uxtb	r2, r3
   103c4:	68bb      	ldr	r3, [r7, #8]
   103c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
   103ca:	68bb      	ldr	r3, [r7, #8]
   103cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   103d0:	2b00      	cmp	r3, #0
   103d2:	bf0c      	ite	eq
   103d4:	2301      	moveq	r3, #1
   103d6:	2300      	movne	r3, #0
   103d8:	b2db      	uxtb	r3, r3
   103da:	2b00      	cmp	r3, #0
   103dc:	d017      	beq.n	1040e <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
                    TPDO->syncCounter = TPDO->TPDOCommPar->transmissionType;
   103de:	68bb      	ldr	r3, [r7, #8]
   103e0:	689b      	ldr	r3, [r3, #8]
   103e2:	7a1a      	ldrb	r2, [r3, #8]
   103e4:	68bb      	ldr	r3, [r7, #8]
   103e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                    CO_TPDOsend(TPDO);
   103ea:	68b9      	ldr	r1, [r7, #8]
   103ec:	68f8      	ldr	r0, [r7, #12]
   103ee:	4b17      	ldr	r3, [pc, #92]	; (1044c <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x1ac>)
   103f0:	4798      	blx	r3
        if(TPDO->TPDOCommPar->transmissionType >= 253){
   103f2:	e00c      	b.n	1040e <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
        }

    }
    else{
        /* Not operational or valid. Force TPDO first send after operational or valid. */
        if(TPDO->TPDOCommPar->transmissionType>=254) TPDO->sendRequest = 1;
   103f4:	68bb      	ldr	r3, [r7, #8]
   103f6:	689b      	ldr	r3, [r3, #8]
   103f8:	7a1b      	ldrb	r3, [r3, #8]
   103fa:	2bfd      	cmp	r3, #253	; 0xfd
   103fc:	dd03      	ble.n	10406 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x166>
   103fe:	68bb      	ldr	r3, [r7, #8]
   10400:	2201      	movs	r2, #1
   10402:	77da      	strb	r2, [r3, #31]
   10404:	e004      	b.n	10410 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x170>
        else                                         TPDO->sendRequest = 0;
   10406:	68bb      	ldr	r3, [r7, #8]
   10408:	2200      	movs	r2, #0
   1040a:	77da      	strb	r2, [r3, #31]
   1040c:	e000      	b.n	10410 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x170>
        if(TPDO->TPDOCommPar->transmissionType >= 253){
   1040e:	bf00      	nop
    }

    /* update timers */
    TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us) ? (TPDO->inhibitTimer - timeDifference_us) : 0;
   10410:	68bb      	ldr	r3, [r7, #8]
   10412:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   10414:	69bb      	ldr	r3, [r7, #24]
   10416:	429a      	cmp	r2, r3
   10418:	d904      	bls.n	10424 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x184>
   1041a:	68bb      	ldr	r3, [r7, #8]
   1041c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1041e:	69bb      	ldr	r3, [r7, #24]
   10420:	1ad3      	subs	r3, r2, r3
   10422:	e000      	b.n	10426 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x186>
   10424:	2300      	movs	r3, #0
   10426:	68ba      	ldr	r2, [r7, #8]
   10428:	6453      	str	r3, [r2, #68]	; 0x44
    TPDO->eventTimer = (TPDO->eventTimer > timeDifference_us) ? (TPDO->eventTimer - timeDifference_us) : 0;
   1042a:	68bb      	ldr	r3, [r7, #8]
   1042c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1042e:	69bb      	ldr	r3, [r7, #24]
   10430:	429a      	cmp	r2, r3
   10432:	d904      	bls.n	1043e <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x19e>
   10434:	68bb      	ldr	r3, [r7, #8]
   10436:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   10438:	69bb      	ldr	r3, [r7, #24]
   1043a:	1ad3      	subs	r3, r2, r3
   1043c:	e000      	b.n	10440 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x1a0>
   1043e:	2300      	movs	r3, #0
   10440:	68ba      	ldr	r2, [r7, #8]
   10442:	6493      	str	r3, [r2, #72]	; 0x48
   10444:	bf00      	nop
   10446:	3710      	adds	r7, #16
   10448:	46bd      	mov	sp, r7
   1044a:	bd80      	pop	{r7, pc}
   1044c:	00010169 	.word	0x00010169

00010450 <_ZN12CO_SDO_ClassC1Ev>:
#include "CO_Driver_Class.h"

CO_SDO_Class	*ptrCOSDOClass;

// default constructor
CO_SDO_Class::CO_SDO_Class()
   10450:	b580      	push	{r7, lr}
   10452:	b082      	sub	sp, #8
   10454:	af00      	add	r7, sp, #0
   10456:	6078      	str	r0, [r7, #4]
   10458:	6878      	ldr	r0, [r7, #4]
   1045a:	4b05      	ldr	r3, [pc, #20]	; (10470 <_ZN12CO_SDO_ClassC1Ev+0x20>)
   1045c:	4798      	blx	r3
{
	ptrCOSDOClass=this;
   1045e:	4a05      	ldr	r2, [pc, #20]	; (10474 <_ZN12CO_SDO_ClassC1Ev+0x24>)
   10460:	687b      	ldr	r3, [r7, #4]
   10462:	6013      	str	r3, [r2, #0]
} //CO_SDO_Class
   10464:	687b      	ldr	r3, [r7, #4]
   10466:	4618      	mov	r0, r3
   10468:	3708      	adds	r7, #8
   1046a:	46bd      	mov	sp, r7
   1046c:	bd80      	pop	{r7, pc}
   1046e:	bf00      	nop
   10470:	00012a6d 	.word	0x00012a6d
   10474:	200019c4 	.word	0x200019c4

00010478 <_ZN12CO_SDO_ClassD1Ev>:

// default destructor
CO_SDO_Class::~CO_SDO_Class()
   10478:	b580      	push	{r7, lr}
   1047a:	b082      	sub	sp, #8
   1047c:	af00      	add	r7, sp, #0
   1047e:	6078      	str	r0, [r7, #4]
   10480:	6878      	ldr	r0, [r7, #4]
   10482:	4b03      	ldr	r3, [pc, #12]	; (10490 <_ZN12CO_SDO_ClassD1Ev+0x18>)
   10484:	4798      	blx	r3
{
} //~CO_SDO_Class
   10486:	687b      	ldr	r3, [r7, #4]
   10488:	4618      	mov	r0, r3
   1048a:	3708      	adds	r7, #8
   1048c:	46bd      	mov	sp, r7
   1048e:	bd80      	pop	{r7, pc}
   10490:	00012a81 	.word	0x00012a81

00010494 <_ZN12CO_SDO_Class9CO_memcpyEPhPKhm>:

void CO_SDO_Class::CO_memcpy(uint8_t dest[], const uint8_t src[], const uint32_t size){
   10494:	b480      	push	{r7}
   10496:	b087      	sub	sp, #28
   10498:	af00      	add	r7, sp, #0
   1049a:	60f8      	str	r0, [r7, #12]
   1049c:	60b9      	str	r1, [r7, #8]
   1049e:	607a      	str	r2, [r7, #4]
   104a0:	603b      	str	r3, [r7, #0]
    uint32_t i;
    for(i = 0; i < size; i++){
   104a2:	2300      	movs	r3, #0
   104a4:	617b      	str	r3, [r7, #20]
   104a6:	697a      	ldr	r2, [r7, #20]
   104a8:	683b      	ldr	r3, [r7, #0]
   104aa:	429a      	cmp	r2, r3
   104ac:	d20b      	bcs.n	104c6 <_ZN12CO_SDO_Class9CO_memcpyEPhPKhm+0x32>
        dest[i] = src[i];
   104ae:	68ba      	ldr	r2, [r7, #8]
   104b0:	697b      	ldr	r3, [r7, #20]
   104b2:	4413      	add	r3, r2
   104b4:	6879      	ldr	r1, [r7, #4]
   104b6:	697a      	ldr	r2, [r7, #20]
   104b8:	440a      	add	r2, r1
   104ba:	7812      	ldrb	r2, [r2, #0]
   104bc:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < size; i++){
   104be:	697b      	ldr	r3, [r7, #20]
   104c0:	3301      	adds	r3, #1
   104c2:	617b      	str	r3, [r7, #20]
   104c4:	e7ef      	b.n	104a6 <_ZN12CO_SDO_Class9CO_memcpyEPhPKhm+0x12>
    }
}
   104c6:	bf00      	nop
   104c8:	371c      	adds	r7, #28
   104ca:	46bd      	mov	sp, r7
   104cc:	bc80      	pop	{r7}
   104ce:	4770      	bx	lr

000104d0 <_ZN12CO_SDO_Class12CO_getUint32EPKh>:
    b.u8[0] = data[0];
    b.u8[1] = data[1];
    return b.u16[0];
}

uint32_t CO_SDO_Class::CO_getUint32(const uint8_t data[]){
   104d0:	b480      	push	{r7}
   104d2:	b087      	sub	sp, #28
   104d4:	af00      	add	r7, sp, #0
   104d6:	6078      	str	r0, [r7, #4]
   104d8:	6039      	str	r1, [r7, #0]
    CO_bytes_t b;
    b.u8[0] = data[0];
   104da:	683b      	ldr	r3, [r7, #0]
   104dc:	781b      	ldrb	r3, [r3, #0]
   104de:	723b      	strb	r3, [r7, #8]
    b.u8[1] = data[1];
   104e0:	683b      	ldr	r3, [r7, #0]
   104e2:	3301      	adds	r3, #1
   104e4:	781b      	ldrb	r3, [r3, #0]
   104e6:	727b      	strb	r3, [r7, #9]
    b.u8[2] = data[2];
   104e8:	683b      	ldr	r3, [r7, #0]
   104ea:	3302      	adds	r3, #2
   104ec:	781b      	ldrb	r3, [r3, #0]
   104ee:	72bb      	strb	r3, [r7, #10]
    b.u8[3] = data[3];
   104f0:	683b      	ldr	r3, [r7, #0]
   104f2:	3303      	adds	r3, #3
   104f4:	781b      	ldrb	r3, [r3, #0]
   104f6:	72fb      	strb	r3, [r7, #11]
    return b.u32[0];
   104f8:	68bb      	ldr	r3, [r7, #8]
}
   104fa:	4618      	mov	r0, r3
   104fc:	371c      	adds	r7, #28
   104fe:	46bd      	mov	sp, r7
   10500:	bc80      	pop	{r7}
   10502:	4770      	bx	lr

00010504 <_ZN12CO_SDO_Class12CO_setUint32EPhm>:
    b.u16[0] = value;
    data[0] = b.u8[0];
    data[1] = b.u8[1];
}

void CO_SDO_Class::CO_setUint32(uint8_t data[], const uint32_t value){
   10504:	b480      	push	{r7}
   10506:	b089      	sub	sp, #36	; 0x24
   10508:	af00      	add	r7, sp, #0
   1050a:	60f8      	str	r0, [r7, #12]
   1050c:	60b9      	str	r1, [r7, #8]
   1050e:	607a      	str	r2, [r7, #4]
    CO_bytes_t b;
    b.u32[0] = value;
   10510:	687b      	ldr	r3, [r7, #4]
   10512:	613b      	str	r3, [r7, #16]
    data[0] = b.u8[0];
   10514:	7c3a      	ldrb	r2, [r7, #16]
   10516:	68bb      	ldr	r3, [r7, #8]
   10518:	701a      	strb	r2, [r3, #0]
    data[1] = b.u8[1];
   1051a:	68bb      	ldr	r3, [r7, #8]
   1051c:	3301      	adds	r3, #1
   1051e:	7c7a      	ldrb	r2, [r7, #17]
   10520:	701a      	strb	r2, [r3, #0]
    data[2] = b.u8[2];
   10522:	68bb      	ldr	r3, [r7, #8]
   10524:	3302      	adds	r3, #2
   10526:	7cba      	ldrb	r2, [r7, #18]
   10528:	701a      	strb	r2, [r3, #0]
    data[3] = b.u8[3];
   1052a:	68bb      	ldr	r3, [r7, #8]
   1052c:	3303      	adds	r3, #3
   1052e:	7cfa      	ldrb	r2, [r7, #19]
   10530:	701a      	strb	r2, [r3, #0]
}
   10532:	bf00      	nop
   10534:	3724      	adds	r7, #36	; 0x24
   10536:	46bd      	mov	sp, r7
   10538:	bc80      	pop	{r7}
   1053a:	4770      	bx	lr

0001053c <_ZN12CO_SDO_Class14CO_memcpySwap2EPvPKv>:

#ifdef CO_LITTLE_ENDIAN
void CO_SDO_Class::CO_memcpySwap2(void* dest, const void* src){
   1053c:	b480      	push	{r7}
   1053e:	b087      	sub	sp, #28
   10540:	af00      	add	r7, sp, #0
   10542:	60f8      	str	r0, [r7, #12]
   10544:	60b9      	str	r1, [r7, #8]
   10546:	607a      	str	r2, [r7, #4]
    char *cdest;
    char *csrc;
    cdest = (char *) dest;
   10548:	68bb      	ldr	r3, [r7, #8]
   1054a:	617b      	str	r3, [r7, #20]
    csrc = (char *) src;
   1054c:	687b      	ldr	r3, [r7, #4]
   1054e:	613b      	str	r3, [r7, #16]
    cdest[0] = csrc[0];
   10550:	693b      	ldr	r3, [r7, #16]
   10552:	781a      	ldrb	r2, [r3, #0]
   10554:	697b      	ldr	r3, [r7, #20]
   10556:	701a      	strb	r2, [r3, #0]
    cdest[1] = csrc[1];
   10558:	697b      	ldr	r3, [r7, #20]
   1055a:	3301      	adds	r3, #1
   1055c:	693a      	ldr	r2, [r7, #16]
   1055e:	7852      	ldrb	r2, [r2, #1]
   10560:	701a      	strb	r2, [r3, #0]
}
   10562:	bf00      	nop
   10564:	371c      	adds	r7, #28
   10566:	46bd      	mov	sp, r7
   10568:	bc80      	pop	{r7}
   1056a:	4770      	bx	lr

0001056c <_ZN12CO_SDO_Class14CO_memcpySwap4EPvPKv>:
void CO_SDO_Class::CO_memcpySwap4(void* dest, const void* src){
   1056c:	b480      	push	{r7}
   1056e:	b087      	sub	sp, #28
   10570:	af00      	add	r7, sp, #0
   10572:	60f8      	str	r0, [r7, #12]
   10574:	60b9      	str	r1, [r7, #8]
   10576:	607a      	str	r2, [r7, #4]
    char *cdest;
    char *csrc;
    cdest = (char *) dest;
   10578:	68bb      	ldr	r3, [r7, #8]
   1057a:	617b      	str	r3, [r7, #20]
    csrc = (char *) src;
   1057c:	687b      	ldr	r3, [r7, #4]
   1057e:	613b      	str	r3, [r7, #16]
    cdest[0] = csrc[0];
   10580:	693b      	ldr	r3, [r7, #16]
   10582:	781a      	ldrb	r2, [r3, #0]
   10584:	697b      	ldr	r3, [r7, #20]
   10586:	701a      	strb	r2, [r3, #0]
    cdest[1] = csrc[1];
   10588:	697b      	ldr	r3, [r7, #20]
   1058a:	3301      	adds	r3, #1
   1058c:	693a      	ldr	r2, [r7, #16]
   1058e:	7852      	ldrb	r2, [r2, #1]
   10590:	701a      	strb	r2, [r3, #0]
    cdest[2] = csrc[2];
   10592:	697b      	ldr	r3, [r7, #20]
   10594:	3302      	adds	r3, #2
   10596:	693a      	ldr	r2, [r7, #16]
   10598:	7892      	ldrb	r2, [r2, #2]
   1059a:	701a      	strb	r2, [r3, #0]
    cdest[3] = csrc[3];
   1059c:	697b      	ldr	r3, [r7, #20]
   1059e:	3303      	adds	r3, #3
   105a0:	693a      	ldr	r2, [r7, #16]
   105a2:	78d2      	ldrb	r2, [r2, #3]
   105a4:	701a      	strb	r2, [r3, #0]
}
   105a6:	bf00      	nop
   105a8:	371c      	adds	r7, #28
   105aa:	46bd      	mov	sp, r7
   105ac:	bc80      	pop	{r7}
   105ae:	4770      	bx	lr

000105b0 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t>:
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */

static void CO_SDO_receive(void *object, const CO_CANrxMsg_t *msg){
   105b0:	b580      	push	{r7, lr}
   105b2:	b086      	sub	sp, #24
   105b4:	af00      	add	r7, sp, #0
   105b6:	6078      	str	r0, [r7, #4]
   105b8:	6039      	str	r1, [r7, #0]
    CO_SDO_t *SDO;
	
    SDO = (CO_SDO_t*)object;   /* this is the correct pointer type of the first argument */
   105ba:	687b      	ldr	r3, [r7, #4]
   105bc:	613b      	str	r3, [r7, #16]
     * starting another SDO request, this request is dropped. Especially if
     * processing function has slow response.
     * See: https://github.com/CANopenNode/CANopenNode/issues/39 */

    /* verify message length and message overflow (previous message was not processed yet) */
    if((msg->DLC == 8U) && (!SDO->CANrxNew)){
   105be:	683b      	ldr	r3, [r7, #0]
   105c0:	7d1b      	ldrb	r3, [r3, #20]
   105c2:	2b08      	cmp	r3, #8
   105c4:	f040 80a4 	bne.w	10710 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x160>
   105c8:	693b      	ldr	r3, [r7, #16]
   105ca:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
   105ce:	2b00      	cmp	r3, #0
   105d0:	f040 809e 	bne.w	10710 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x160>
        if(SDO->state != CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK) {
   105d4:	693b      	ldr	r3, [r7, #16]
   105d6:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   105da:	2b15      	cmp	r3, #21
   105dc:	d024      	beq.n	10628 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x78>
            /* copy data and set 'new message' flag */
            SDO->CANrxData[0] = msg->data[0];
   105de:	683b      	ldr	r3, [r7, #0]
   105e0:	7d5a      	ldrb	r2, [r3, #21]
   105e2:	693b      	ldr	r3, [r7, #16]
   105e4:	701a      	strb	r2, [r3, #0]
            SDO->CANrxData[1] = msg->data[1];
   105e6:	683b      	ldr	r3, [r7, #0]
   105e8:	7d9a      	ldrb	r2, [r3, #22]
   105ea:	693b      	ldr	r3, [r7, #16]
   105ec:	705a      	strb	r2, [r3, #1]
            SDO->CANrxData[2] = msg->data[2];
   105ee:	683b      	ldr	r3, [r7, #0]
   105f0:	7dda      	ldrb	r2, [r3, #23]
   105f2:	693b      	ldr	r3, [r7, #16]
   105f4:	709a      	strb	r2, [r3, #2]
            SDO->CANrxData[3] = msg->data[3];
   105f6:	683b      	ldr	r3, [r7, #0]
   105f8:	7e1a      	ldrb	r2, [r3, #24]
   105fa:	693b      	ldr	r3, [r7, #16]
   105fc:	70da      	strb	r2, [r3, #3]
            SDO->CANrxData[4] = msg->data[4];
   105fe:	683b      	ldr	r3, [r7, #0]
   10600:	7e5a      	ldrb	r2, [r3, #25]
   10602:	693b      	ldr	r3, [r7, #16]
   10604:	711a      	strb	r2, [r3, #4]
            SDO->CANrxData[5] = msg->data[5];
   10606:	683b      	ldr	r3, [r7, #0]
   10608:	7e9a      	ldrb	r2, [r3, #26]
   1060a:	693b      	ldr	r3, [r7, #16]
   1060c:	715a      	strb	r2, [r3, #5]
            SDO->CANrxData[6] = msg->data[6];
   1060e:	683b      	ldr	r3, [r7, #0]
   10610:	7eda      	ldrb	r2, [r3, #27]
   10612:	693b      	ldr	r3, [r7, #16]
   10614:	719a      	strb	r2, [r3, #6]
            SDO->CANrxData[7] = msg->data[7];
   10616:	683b      	ldr	r3, [r7, #0]
   10618:	7f1a      	ldrb	r2, [r3, #28]
   1061a:	693b      	ldr	r3, [r7, #16]
   1061c:	71da      	strb	r2, [r3, #7]

            SDO->CANrxNew = true;
   1061e:	693b      	ldr	r3, [r7, #16]
   10620:	2201      	movs	r2, #1
   10622:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
   10626:	e067      	b.n	106f8 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
        }
        else {
            /* block download, copy data directly */
            uint8_t seqno;

            SDO->CANrxData[0] = msg->data[0];
   10628:	683b      	ldr	r3, [r7, #0]
   1062a:	7d5a      	ldrb	r2, [r3, #21]
   1062c:	693b      	ldr	r3, [r7, #16]
   1062e:	701a      	strb	r2, [r3, #0]
            seqno = SDO->CANrxData[0] & 0x7fU;
   10630:	693b      	ldr	r3, [r7, #16]
   10632:	781b      	ldrb	r3, [r3, #0]
   10634:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   10638:	73fb      	strb	r3, [r7, #15]
            SDO->timeoutTimer = 0;
   1063a:	693b      	ldr	r3, [r7, #16]
   1063c:	2200      	movs	r2, #0
   1063e:	66da      	str	r2, [r3, #108]	; 0x6c

            /* check correct sequence number. */
            if(seqno == (SDO->sequence + 1U)) {
   10640:	7bfa      	ldrb	r2, [r7, #15]
   10642:	693b      	ldr	r3, [r7, #16]
   10644:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   10648:	3301      	adds	r3, #1
   1064a:	429a      	cmp	r2, r3
   1064c:	d141      	bne.n	106d2 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x122>
                /* sequence is correct */
                uint8_t i;

                SDO->sequence++;
   1064e:	693b      	ldr	r3, [r7, #16]
   10650:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   10654:	3301      	adds	r3, #1
   10656:	b2da      	uxtb	r2, r3
   10658:	693b      	ldr	r3, [r7, #16]
   1065a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

                /* copy data */
                for(i=1; i<8; i++) {
   1065e:	2301      	movs	r3, #1
   10660:	75fb      	strb	r3, [r7, #23]
   10662:	7dfb      	ldrb	r3, [r7, #23]
   10664:	2b07      	cmp	r3, #7
   10666:	dc1d      	bgt.n	106a4 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0xf4>
                    SDO->ODF_arg.data[SDO->bufferOffset++] = msg->data[i]; //SDO->ODF_arg.data is equal as SDO->databuffer
   10668:	693b      	ldr	r3, [r7, #16]
   1066a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1066c:	693b      	ldr	r3, [r7, #16]
   1066e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   10670:	1c58      	adds	r0, r3, #1
   10672:	6939      	ldr	r1, [r7, #16]
   10674:	6388      	str	r0, [r1, #56]	; 0x38
   10676:	4413      	add	r3, r2
   10678:	7dfa      	ldrb	r2, [r7, #23]
   1067a:	6839      	ldr	r1, [r7, #0]
   1067c:	440a      	add	r2, r1
   1067e:	7d52      	ldrb	r2, [r2, #21]
   10680:	701a      	strb	r2, [r3, #0]
                    if(SDO->bufferOffset >= CO_SDO_BUFFER_SIZE) {
   10682:	693b      	ldr	r3, [r7, #16]
   10684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   10686:	2b1f      	cmp	r3, #31
   10688:	d908      	bls.n	1069c <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0xec>
                        /* buffer full, break reception */
                        SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
   1068a:	693b      	ldr	r3, [r7, #16]
   1068c:	2216      	movs	r2, #22
   1068e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                        SDO->CANrxNew = true;
   10692:	693b      	ldr	r3, [r7, #16]
   10694:	2201      	movs	r2, #1
   10696:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
                        break;
   1069a:	e003      	b.n	106a4 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0xf4>
                for(i=1; i<8; i++) {
   1069c:	7dfb      	ldrb	r3, [r7, #23]
   1069e:	3301      	adds	r3, #1
   106a0:	75fb      	strb	r3, [r7, #23]
   106a2:	e7de      	b.n	10662 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0xb2>
                    }
                }

                /* break reception if last segment or block sequence is too large */
                if(((SDO->CANrxData[0] & 0x80U) == 0x80U) || (SDO->sequence >= SDO->blksize)) {
   106a4:	693b      	ldr	r3, [r7, #16]
   106a6:	781b      	ldrb	r3, [r3, #0]
   106a8:	b25b      	sxtb	r3, r3
   106aa:	2b00      	cmp	r3, #0
   106ac:	db08      	blt.n	106c0 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x110>
   106ae:	693b      	ldr	r3, [r7, #16]
   106b0:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   106b4:	461a      	mov	r2, r3
   106b6:	693b      	ldr	r3, [r7, #16]
   106b8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
   106bc:	429a      	cmp	r2, r3
   106be:	db1b      	blt.n	106f8 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
                    SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
   106c0:	693b      	ldr	r3, [r7, #16]
   106c2:	2216      	movs	r2, #22
   106c4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                    SDO->CANrxNew = true;
   106c8:	693b      	ldr	r3, [r7, #16]
   106ca:	2201      	movs	r2, #1
   106cc:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
   106d0:	e012      	b.n	106f8 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
                }
            }
            else if((seqno == SDO->sequence) || (SDO->sequence == 0U)){
   106d2:	693b      	ldr	r3, [r7, #16]
   106d4:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   106d8:	7bfa      	ldrb	r2, [r7, #15]
   106da:	429a      	cmp	r2, r3
   106dc:	d00c      	beq.n	106f8 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
   106de:	693b      	ldr	r3, [r7, #16]
   106e0:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   106e4:	2b00      	cmp	r3, #0
   106e6:	d007      	beq.n	106f8 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
                /* Ignore message, if it is duplicate or if sequence didn't started yet. */
            }
            else {
                /* seqno is totally wrong, break reception. */
                SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
   106e8:	693b      	ldr	r3, [r7, #16]
   106ea:	2216      	movs	r2, #22
   106ec:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                SDO->CANrxNew = true;
   106f0:	693b      	ldr	r3, [r7, #16]
   106f2:	2201      	movs	r2, #1
   106f4:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
            }
        }

        /* Optional signal to RTOS, which can resume task, which handles SDO server. */
        if(SDO->CANrxNew && SDO->ptrFunctSignal != NULL) {
   106f8:	693b      	ldr	r3, [r7, #16]
   106fa:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
   106fe:	2b00      	cmp	r3, #0
   10700:	d006      	beq.n	10710 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x160>
   10702:	693b      	ldr	r3, [r7, #16]
   10704:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   10706:	2b00      	cmp	r3, #0
   10708:	d002      	beq.n	10710 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x160>
            SDO->ptrFunctSignal();
   1070a:	693b      	ldr	r3, [r7, #16]
   1070c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   1070e:	4798      	blx	r3
        }
    }
}
   10710:	bf00      	nop
   10712:	3718      	adds	r7, #24
   10714:	46bd      	mov	sp, r7
   10716:	bd80      	pop	{r7, pc}

00010718 <_ZL11CO_ODF_1200P12CO_ODF_arg_t>:
 * Function for accessing _SDO server parameter_ for default SDO (index 0x1200)
 * from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
 static CO_SDO_abortCode_t  CO_ODF_1200(CO_ODF_arg_t *ODF_arg){
   10718:	b580      	push	{r7, lr}
   1071a:	b086      	sub	sp, #24
   1071c:	af00      	add	r7, sp, #0
   1071e:	6078      	str	r0, [r7, #4]
    uint8_t *nodeId;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
   10720:	2300      	movs	r3, #0
   10722:	617b      	str	r3, [r7, #20]

    nodeId = (uint8_t*) ODF_arg->object;
   10724:	687b      	ldr	r3, [r7, #4]
   10726:	681b      	ldr	r3, [r3, #0]
   10728:	613b      	str	r3, [r7, #16]
    value = ptrCODriverClass->CO_getUint32(ODF_arg->data);
   1072a:	4b12      	ldr	r3, [pc, #72]	; (10774 <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x5c>)
   1072c:	681b      	ldr	r3, [r3, #0]
   1072e:	1d1a      	adds	r2, r3, #4
   10730:	687b      	ldr	r3, [r7, #4]
   10732:	685b      	ldr	r3, [r3, #4]
   10734:	4619      	mov	r1, r3
   10736:	4610      	mov	r0, r2
   10738:	4b0f      	ldr	r3, [pc, #60]	; (10778 <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x60>)
   1073a:	4798      	blx	r3
   1073c:	60f8      	str	r0, [r7, #12]

    /* if SDO reading Object dictionary 0x1200, add nodeId to the value */
    if((ODF_arg->reading) && (ODF_arg->subIndex > 0U)){
   1073e:	687b      	ldr	r3, [r7, #4]
   10740:	7f5b      	ldrb	r3, [r3, #29]
   10742:	2b00      	cmp	r3, #0
   10744:	d010      	beq.n	10768 <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x50>
   10746:	687b      	ldr	r3, [r7, #4]
   10748:	7f1b      	ldrb	r3, [r3, #28]
   1074a:	2b00      	cmp	r3, #0
   1074c:	d00c      	beq.n	10768 <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x50>
        ptrCODriverClass->CO_setUint32(ODF_arg->data, value + *nodeId);
   1074e:	4b09      	ldr	r3, [pc, #36]	; (10774 <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x5c>)
   10750:	681b      	ldr	r3, [r3, #0]
   10752:	1d18      	adds	r0, r3, #4
   10754:	687b      	ldr	r3, [r7, #4]
   10756:	6859      	ldr	r1, [r3, #4]
   10758:	693b      	ldr	r3, [r7, #16]
   1075a:	781b      	ldrb	r3, [r3, #0]
   1075c:	461a      	mov	r2, r3
   1075e:	68fb      	ldr	r3, [r7, #12]
   10760:	4413      	add	r3, r2
   10762:	461a      	mov	r2, r3
   10764:	4b05      	ldr	r3, [pc, #20]	; (1077c <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x64>)
   10766:	4798      	blx	r3
    }

    return ret;
   10768:	697b      	ldr	r3, [r7, #20]
}
   1076a:	4618      	mov	r0, r3
   1076c:	3718      	adds	r7, #24
   1076e:	46bd      	mov	sp, r7
   10770:	bd80      	pop	{r7, pc}
   10772:	bf00      	nop
   10774:	200019b4 	.word	0x200019b4
   10778:	000104d1 	.word	0x000104d1
   1077c:	00010505 	.word	0x00010505

00010780 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m>:
        uint8_t                 nodeId,
        CO_CANmodule_t         *CANdevRx,
        uint32_t                CANdevRxIdx,
        CO_CANmodule_t         *CANdevTx,
        uint32_t                CANdevTxIdx)
{
   10780:	b5b0      	push	{r4, r5, r7, lr}
   10782:	b08a      	sub	sp, #40	; 0x28
   10784:	af04      	add	r7, sp, #16
   10786:	60f8      	str	r0, [r7, #12]
   10788:	60b9      	str	r1, [r7, #8]
   1078a:	607a      	str	r2, [r7, #4]
   1078c:	603b      	str	r3, [r7, #0]
    /* verify arguments */
    if(SDO_init==NULL || CANdevRx==NULL || CANdevTx==NULL){
   1078e:	68bb      	ldr	r3, [r7, #8]
   10790:	2b00      	cmp	r3, #0
   10792:	d005      	beq.n	107a0 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x20>
   10794:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10796:	2b00      	cmp	r3, #0
   10798:	d002      	beq.n	107a0 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x20>
   1079a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1079c:	2b00      	cmp	r3, #0
   1079e:	d102      	bne.n	107a6 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x26>
        return CO_ERROR_ILLEGAL_ARGUMENT;
   107a0:	f04f 33ff 	mov.w	r3, #4294967295
   107a4:	e0ac      	b.n	10900 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x180>
    }else{
		SDO=SDO_init;
   107a6:	68fb      	ldr	r3, [r7, #12]
   107a8:	68ba      	ldr	r2, [r7, #8]
   107aa:	601a      	str	r2, [r3, #0]
	}
	
    /* configure own object dictionary */
    if(parentSDO == NULL){
   107ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   107ae:	2b00      	cmp	r3, #0
   107b0:	d13b      	bne.n	1082a <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0xaa>
        uint32_t i;

        SDO->ownOD = true;
   107b2:	68fb      	ldr	r3, [r7, #12]
   107b4:	681b      	ldr	r3, [r3, #0]
   107b6:	2201      	movs	r2, #1
   107b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        SDO->OD = OD;
   107bc:	68fb      	ldr	r3, [r7, #12]
   107be:	681b      	ldr	r3, [r3, #0]
   107c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   107c2:	62da      	str	r2, [r3, #44]	; 0x2c
        SDO->ODSize = ODSize;
   107c4:	68fb      	ldr	r3, [r7, #12]
   107c6:	681b      	ldr	r3, [r3, #0]
   107c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   107ca:	631a      	str	r2, [r3, #48]	; 0x30
        SDO->ODExtensions = ODExtensions;
   107cc:	68fb      	ldr	r3, [r7, #12]
   107ce:	681b      	ldr	r3, [r3, #0]
   107d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
   107d2:	635a      	str	r2, [r3, #52]	; 0x34

        /* clear pointers in ODExtensions */
        for(i=0U; i<ODSize; i++){
   107d4:	2300      	movs	r3, #0
   107d6:	617b      	str	r3, [r7, #20]
   107d8:	697a      	ldr	r2, [r7, #20]
   107da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   107dc:	429a      	cmp	r2, r3
   107de:	d238      	bcs.n	10852 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0xd2>
            SDO->ODExtensions[i].pODFunc = NULL;
   107e0:	68fb      	ldr	r3, [r7, #12]
   107e2:	681b      	ldr	r3, [r3, #0]
   107e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
   107e6:	697a      	ldr	r2, [r7, #20]
   107e8:	4613      	mov	r3, r2
   107ea:	005b      	lsls	r3, r3, #1
   107ec:	4413      	add	r3, r2
   107ee:	009b      	lsls	r3, r3, #2
   107f0:	440b      	add	r3, r1
   107f2:	2200      	movs	r2, #0
   107f4:	601a      	str	r2, [r3, #0]
            SDO->ODExtensions[i].object = NULL;
   107f6:	68fb      	ldr	r3, [r7, #12]
   107f8:	681b      	ldr	r3, [r3, #0]
   107fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
   107fc:	697a      	ldr	r2, [r7, #20]
   107fe:	4613      	mov	r3, r2
   10800:	005b      	lsls	r3, r3, #1
   10802:	4413      	add	r3, r2
   10804:	009b      	lsls	r3, r3, #2
   10806:	440b      	add	r3, r1
   10808:	2200      	movs	r2, #0
   1080a:	605a      	str	r2, [r3, #4]
            SDO->ODExtensions[i].flags = NULL;
   1080c:	68fb      	ldr	r3, [r7, #12]
   1080e:	681b      	ldr	r3, [r3, #0]
   10810:	6b59      	ldr	r1, [r3, #52]	; 0x34
   10812:	697a      	ldr	r2, [r7, #20]
   10814:	4613      	mov	r3, r2
   10816:	005b      	lsls	r3, r3, #1
   10818:	4413      	add	r3, r2
   1081a:	009b      	lsls	r3, r3, #2
   1081c:	440b      	add	r3, r1
   1081e:	2200      	movs	r2, #0
   10820:	609a      	str	r2, [r3, #8]
        for(i=0U; i<ODSize; i++){
   10822:	697b      	ldr	r3, [r7, #20]
   10824:	3301      	adds	r3, #1
   10826:	617b      	str	r3, [r7, #20]
   10828:	e7d6      	b.n	107d8 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x58>
        }
    }
    /* copy object dictionary from parent */
    else{
        SDO->ownOD = false;
   1082a:	68fb      	ldr	r3, [r7, #12]
   1082c:	681b      	ldr	r3, [r3, #0]
   1082e:	2200      	movs	r2, #0
   10830:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        SDO->OD = parentSDO->OD;
   10834:	68fb      	ldr	r3, [r7, #12]
   10836:	681b      	ldr	r3, [r3, #0]
   10838:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1083a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   1083c:	62da      	str	r2, [r3, #44]	; 0x2c
        SDO->ODSize = parentSDO->ODSize;
   1083e:	68fb      	ldr	r3, [r7, #12]
   10840:	681b      	ldr	r3, [r3, #0]
   10842:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   10844:	6b12      	ldr	r2, [r2, #48]	; 0x30
   10846:	631a      	str	r2, [r3, #48]	; 0x30
        SDO->ODExtensions = parentSDO->ODExtensions;
   10848:	68fb      	ldr	r3, [r7, #12]
   1084a:	681b      	ldr	r3, [r3, #0]
   1084c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1084e:	6b52      	ldr	r2, [r2, #52]	; 0x34
   10850:	635a      	str	r2, [r3, #52]	; 0x34
    }

    /* Configure object variables */
    SDO->nodeId = nodeId;
   10852:	68fb      	ldr	r3, [r7, #12]
   10854:	681b      	ldr	r3, [r3, #0]
   10856:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
   1085a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    SDO->state = CO_SDO_ST_IDLE;
   1085e:	68fb      	ldr	r3, [r7, #12]
   10860:	681b      	ldr	r3, [r3, #0]
   10862:	2200      	movs	r2, #0
   10864:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    SDO->CANrxNew = false;
   10868:	68fb      	ldr	r3, [r7, #12]
   1086a:	681b      	ldr	r3, [r3, #0]
   1086c:	2200      	movs	r2, #0
   1086e:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
    SDO->ptrFunctSignal = NULL;
   10872:	68fb      	ldr	r3, [r7, #12]
   10874:	681b      	ldr	r3, [r3, #0]
   10876:	2200      	movs	r2, #0
   10878:	67da      	str	r2, [r3, #124]	; 0x7c


    /* Configure Object dictionary entry at index 0x1200 */
    if(ObjDictIndex_SDOServerParameter == OD_H1200_SDO_SERVER_PARAM){
   1087a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1087c:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
   10880:	d10f      	bne.n	108a2 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x122>
        ptrCODriverClass->CO_OD_configure( ObjDictIndex_SDOServerParameter, CO_ODF_1200, (void*)&SDO->nodeId, 0U, 0U);
   10882:	4b21      	ldr	r3, [pc, #132]	; (10908 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   10884:	681b      	ldr	r3, [r3, #0]
   10886:	1d18      	adds	r0, r3, #4
   10888:	68fb      	ldr	r3, [r7, #12]
   1088a:	681b      	ldr	r3, [r3, #0]
   1088c:	f103 0268 	add.w	r2, r3, #104	; 0x68
   10890:	2300      	movs	r3, #0
   10892:	9301      	str	r3, [sp, #4]
   10894:	2300      	movs	r3, #0
   10896:	9300      	str	r3, [sp, #0]
   10898:	4613      	mov	r3, r2
   1089a:	4a1c      	ldr	r2, [pc, #112]	; (1090c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x18c>)
   1089c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1089e:	4c1c      	ldr	r4, [pc, #112]	; (10910 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x190>)
   108a0:	47a0      	blx	r4
    }

    if((COB_IDClientToServer & 0x80000000) != 0 || (COB_IDServerToClient & 0x80000000) != 0 ){
   108a2:	687b      	ldr	r3, [r7, #4]
   108a4:	2b00      	cmp	r3, #0
   108a6:	db02      	blt.n	108ae <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x12e>
   108a8:	683b      	ldr	r3, [r7, #0]
   108aa:	2b00      	cmp	r3, #0
   108ac:	da03      	bge.n	108b6 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x136>
        // SDO is invalid
        COB_IDClientToServer = 0;
   108ae:	2300      	movs	r3, #0
   108b0:	607b      	str	r3, [r7, #4]
        COB_IDServerToClient = 0;
   108b2:	2300      	movs	r3, #0
   108b4:	603b      	str	r3, [r7, #0]
    }
    /* configure SDO server CAN reception */
  ptrCODriverClass->CAN_Rx_BufferInit(
   108b6:	4b14      	ldr	r3, [pc, #80]	; (10908 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   108b8:	6818      	ldr	r0, [r3, #0]
            CANdevRxIdx,            /* rx buffer index */
            COB_IDClientToServer,   /* CAN identifier */
            0x7FF,                  /* mask */
            0,                      /* rtr */
            (void*)SDO,             /* object passed to receive function */
   108ba:	68fb      	ldr	r3, [r7, #12]
   108bc:	681b      	ldr	r3, [r3, #0]
            CO_SDO_receive);        /* this function will process received message */
   108be:	4a15      	ldr	r2, [pc, #84]	; (10914 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x194>)
   108c0:	9202      	str	r2, [sp, #8]
   108c2:	9301      	str	r3, [sp, #4]
   108c4:	2300      	movs	r3, #0
   108c6:	9300      	str	r3, [sp, #0]
   108c8:	f240 73ff 	movw	r3, #2047	; 0x7ff
   108cc:	687a      	ldr	r2, [r7, #4]
   108ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
   108d0:	4c11      	ldr	r4, [pc, #68]	; (10918 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x198>)
   108d2:	47a0      	blx	r4
	//printf("Config_SDO_recieve");
    /* configure SDO server CAN transmission */
    SDO->CANdevTx = CANdevTx;
   108d4:	68fb      	ldr	r3, [r7, #12]
   108d6:	681b      	ldr	r3, [r3, #0]
   108d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
   108da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    SDO->CANtxBuff = ptrCODriverClass->CAN_Tx_BufferInit(
   108de:	68fb      	ldr	r3, [r7, #12]
   108e0:	681c      	ldr	r4, [r3, #0]
   108e2:	4b09      	ldr	r3, [pc, #36]	; (10908 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   108e4:	6818      	ldr	r0, [r3, #0]
   108e6:	2300      	movs	r3, #0
   108e8:	9301      	str	r3, [sp, #4]
   108ea:	2308      	movs	r3, #8
   108ec:	9300      	str	r3, [sp, #0]
   108ee:	2300      	movs	r3, #0
   108f0:	683a      	ldr	r2, [r7, #0]
   108f2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   108f4:	4d09      	ldr	r5, [pc, #36]	; (1091c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x19c>)
   108f6:	47a8      	blx	r5
   108f8:	4603      	mov	r3, r0
   108fa:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
            COB_IDServerToClient,   /* CAN identifier */
            0,                      /* rtr */
            8,                      /* number of data bytes */
            0);                     /* synchronous message flag bit */
	
    return CO_ERROR_NO;
   108fe:	2300      	movs	r3, #0
}
   10900:	4618      	mov	r0, r3
   10902:	3718      	adds	r7, #24
   10904:	46bd      	mov	sp, r7
   10906:	bdb0      	pop	{r4, r5, r7, pc}
   10908:	200019b4 	.word	0x200019b4
   1090c:	00010719 	.word	0x00010719
   10910:	00010921 	.word	0x00010921
   10914:	000105b1 	.word	0x000105b1
   10918:	0000d801 	.word	0x0000d801
   1091c:	0000d901 	.word	0x0000d901

00010920 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh>:
        uint32_t                index,
        CO_SDO_abortCode_t    (*pODFunc)(CO_ODF_arg_t *ODF_arg),
        void                   *object,
        uint8_t                *flags,
        uint8_t                 flagsSize)
{
   10920:	b580      	push	{r7, lr}
   10922:	b088      	sub	sp, #32
   10924:	af00      	add	r7, sp, #0
   10926:	60f8      	str	r0, [r7, #12]
   10928:	60b9      	str	r1, [r7, #8]
   1092a:	607a      	str	r2, [r7, #4]
   1092c:	603b      	str	r3, [r7, #0]
    uint32_t entryNo;

    entryNo = ptrCODriverClass->CO_OD_find(index);
   1092e:	4b28      	ldr	r3, [pc, #160]	; (109d0 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xb0>)
   10930:	681b      	ldr	r3, [r3, #0]
   10932:	3304      	adds	r3, #4
   10934:	68b9      	ldr	r1, [r7, #8]
   10936:	4618      	mov	r0, r3
   10938:	4b26      	ldr	r3, [pc, #152]	; (109d4 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xb4>)
   1093a:	4798      	blx	r3
   1093c:	61b8      	str	r0, [r7, #24]
    if(entryNo < 0xFFFFU){
   1093e:	69bb      	ldr	r3, [r7, #24]
   10940:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   10944:	4293      	cmp	r3, r2
   10946:	d83e      	bhi.n	109c6 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xa6>
        CO_OD_extension_t *ext = &SDO->ODExtensions[entryNo];
   10948:	68fb      	ldr	r3, [r7, #12]
   1094a:	681b      	ldr	r3, [r3, #0]
   1094c:	6b59      	ldr	r1, [r3, #52]	; 0x34
   1094e:	69ba      	ldr	r2, [r7, #24]
   10950:	4613      	mov	r3, r2
   10952:	005b      	lsls	r3, r3, #1
   10954:	4413      	add	r3, r2
   10956:	009b      	lsls	r3, r3, #2
   10958:	440b      	add	r3, r1
   1095a:	617b      	str	r3, [r7, #20]
        uint8_t maxSubIndex = SDO->OD[entryNo].maxSubIndex;
   1095c:	68fb      	ldr	r3, [r7, #12]
   1095e:	681b      	ldr	r3, [r3, #0]
   10960:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   10962:	69ba      	ldr	r2, [r7, #24]
   10964:	4613      	mov	r3, r2
   10966:	009b      	lsls	r3, r3, #2
   10968:	4413      	add	r3, r2
   1096a:	009b      	lsls	r3, r3, #2
   1096c:	440b      	add	r3, r1
   1096e:	791b      	ldrb	r3, [r3, #4]
   10970:	74fb      	strb	r3, [r7, #19]

        ext->pODFunc = pODFunc;
   10972:	697b      	ldr	r3, [r7, #20]
   10974:	687a      	ldr	r2, [r7, #4]
   10976:	601a      	str	r2, [r3, #0]
        ext->object = object;
   10978:	697b      	ldr	r3, [r7, #20]
   1097a:	683a      	ldr	r2, [r7, #0]
   1097c:	605a      	str	r2, [r3, #4]
        if((flags != NULL) && (flagsSize != 0U) && (flagsSize == maxSubIndex)){
   1097e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10980:	2b00      	cmp	r3, #0
   10982:	d01b      	beq.n	109bc <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0x9c>
   10984:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   10988:	2b00      	cmp	r3, #0
   1098a:	d017      	beq.n	109bc <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0x9c>
   1098c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
   10990:	7cfb      	ldrb	r3, [r7, #19]
   10992:	429a      	cmp	r2, r3
   10994:	d112      	bne.n	109bc <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0x9c>
            uint32_t i;
            ext->flags = flags;
   10996:	697b      	ldr	r3, [r7, #20]
   10998:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1099a:	609a      	str	r2, [r3, #8]
            for(i=0U; i<=maxSubIndex; i++){
   1099c:	2300      	movs	r3, #0
   1099e:	61fb      	str	r3, [r7, #28]
   109a0:	7cfa      	ldrb	r2, [r7, #19]
   109a2:	69fb      	ldr	r3, [r7, #28]
   109a4:	429a      	cmp	r2, r3
   109a6:	d30d      	bcc.n	109c4 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xa4>
                ext->flags[i] = 0U;
   109a8:	697b      	ldr	r3, [r7, #20]
   109aa:	689a      	ldr	r2, [r3, #8]
   109ac:	69fb      	ldr	r3, [r7, #28]
   109ae:	4413      	add	r3, r2
   109b0:	2200      	movs	r2, #0
   109b2:	701a      	strb	r2, [r3, #0]
            for(i=0U; i<=maxSubIndex; i++){
   109b4:	69fb      	ldr	r3, [r7, #28]
   109b6:	3301      	adds	r3, #1
   109b8:	61fb      	str	r3, [r7, #28]
   109ba:	e7f1      	b.n	109a0 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0x80>
            }
        }
        else{
            ext->flags = NULL;
   109bc:	697b      	ldr	r3, [r7, #20]
   109be:	2200      	movs	r2, #0
   109c0:	609a      	str	r2, [r3, #8]
        }
    }
}
   109c2:	e000      	b.n	109c6 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xa6>
            }
   109c4:	bf00      	nop
}
   109c6:	bf00      	nop
   109c8:	3720      	adds	r7, #32
   109ca:	46bd      	mov	sp, r7
   109cc:	bd80      	pop	{r7, pc}
   109ce:	bf00      	nop
   109d0:	200019b4 	.word	0x200019b4
   109d4:	000109d9 	.word	0x000109d9

000109d8 <_ZN12CO_SDO_Class10CO_OD_findEm>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_OD_find( uint32_t index){
   109d8:	b480      	push	{r7}
   109da:	b087      	sub	sp, #28
   109dc:	af00      	add	r7, sp, #0
   109de:	6078      	str	r0, [r7, #4]
   109e0:	6039      	str	r1, [r7, #0]
    /* Fast search in ordered Object Dictionary. If indexes are mixed, this won't work. */
    /* If Object Dictionary has up to 2^N entries, then N is max number of loop passes. */
    uint32_t cur, min, max;
    const CO_OD_entry_t* object;

    min = 0U;
   109e2:	2300      	movs	r3, #0
   109e4:	617b      	str	r3, [r7, #20]
    max = SDO->ODSize - 1U;
   109e6:	687b      	ldr	r3, [r7, #4]
   109e8:	681b      	ldr	r3, [r3, #0]
   109ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   109ec:	3b01      	subs	r3, #1
   109ee:	613b      	str	r3, [r7, #16]
    while(min < max){
   109f0:	697a      	ldr	r2, [r7, #20]
   109f2:	693b      	ldr	r3, [r7, #16]
   109f4:	429a      	cmp	r2, r3
   109f6:	d227      	bcs.n	10a48 <_ZN12CO_SDO_Class10CO_OD_findEm+0x70>
        cur = (min + max) / 2;
   109f8:	697a      	ldr	r2, [r7, #20]
   109fa:	693b      	ldr	r3, [r7, #16]
   109fc:	4413      	add	r3, r2
   109fe:	085b      	lsrs	r3, r3, #1
   10a00:	60fb      	str	r3, [r7, #12]
        object = &SDO->OD[cur];
   10a02:	687b      	ldr	r3, [r7, #4]
   10a04:	681b      	ldr	r3, [r3, #0]
   10a06:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   10a08:	68fa      	ldr	r2, [r7, #12]
   10a0a:	4613      	mov	r3, r2
   10a0c:	009b      	lsls	r3, r3, #2
   10a0e:	4413      	add	r3, r2
   10a10:	009b      	lsls	r3, r3, #2
   10a12:	440b      	add	r3, r1
   10a14:	60bb      	str	r3, [r7, #8]
        /* Is object matched */
        if(index == object->index){
   10a16:	68bb      	ldr	r3, [r7, #8]
   10a18:	681a      	ldr	r2, [r3, #0]
   10a1a:	683b      	ldr	r3, [r7, #0]
   10a1c:	429a      	cmp	r2, r3
   10a1e:	d101      	bne.n	10a24 <_ZN12CO_SDO_Class10CO_OD_findEm+0x4c>
            return cur;
   10a20:	68fb      	ldr	r3, [r7, #12]
   10a22:	e028      	b.n	10a76 <_ZN12CO_SDO_Class10CO_OD_findEm+0x9e>
        }
        if(index < object->index){
   10a24:	68bb      	ldr	r3, [r7, #8]
   10a26:	681a      	ldr	r2, [r3, #0]
   10a28:	683b      	ldr	r3, [r7, #0]
   10a2a:	429a      	cmp	r2, r3
   10a2c:	d908      	bls.n	10a40 <_ZN12CO_SDO_Class10CO_OD_findEm+0x68>
            max = cur;
   10a2e:	68fb      	ldr	r3, [r7, #12]
   10a30:	613b      	str	r3, [r7, #16]
            if(max) max--;
   10a32:	693b      	ldr	r3, [r7, #16]
   10a34:	2b00      	cmp	r3, #0
   10a36:	d0db      	beq.n	109f0 <_ZN12CO_SDO_Class10CO_OD_findEm+0x18>
   10a38:	693b      	ldr	r3, [r7, #16]
   10a3a:	3b01      	subs	r3, #1
   10a3c:	613b      	str	r3, [r7, #16]
   10a3e:	e7d7      	b.n	109f0 <_ZN12CO_SDO_Class10CO_OD_findEm+0x18>
        }
        else
            min = cur + 1U;
   10a40:	68fb      	ldr	r3, [r7, #12]
   10a42:	3301      	adds	r3, #1
   10a44:	617b      	str	r3, [r7, #20]
    while(min < max){
   10a46:	e7d3      	b.n	109f0 <_ZN12CO_SDO_Class10CO_OD_findEm+0x18>
    }

    if(min == max){
   10a48:	697a      	ldr	r2, [r7, #20]
   10a4a:	693b      	ldr	r3, [r7, #16]
   10a4c:	429a      	cmp	r2, r3
   10a4e:	d110      	bne.n	10a72 <_ZN12CO_SDO_Class10CO_OD_findEm+0x9a>
        object = &SDO->OD[min];
   10a50:	687b      	ldr	r3, [r7, #4]
   10a52:	681b      	ldr	r3, [r3, #0]
   10a54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   10a56:	697a      	ldr	r2, [r7, #20]
   10a58:	4613      	mov	r3, r2
   10a5a:	009b      	lsls	r3, r3, #2
   10a5c:	4413      	add	r3, r2
   10a5e:	009b      	lsls	r3, r3, #2
   10a60:	440b      	add	r3, r1
   10a62:	60bb      	str	r3, [r7, #8]
        /* Is object matched */
        if(index == object->index){
   10a64:	68bb      	ldr	r3, [r7, #8]
   10a66:	681a      	ldr	r2, [r3, #0]
   10a68:	683b      	ldr	r3, [r7, #0]
   10a6a:	429a      	cmp	r2, r3
   10a6c:	d101      	bne.n	10a72 <_ZN12CO_SDO_Class10CO_OD_findEm+0x9a>
            return min;
   10a6e:	697b      	ldr	r3, [r7, #20]
   10a70:	e001      	b.n	10a76 <_ZN12CO_SDO_Class10CO_OD_findEm+0x9e>
        }
    }

    return 0xFFFFU;  /* object does not exist in OD */
   10a72:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
   10a76:	4618      	mov	r0, r3
   10a78:	371c      	adds	r7, #28
   10a7a:	46bd      	mov	sp, r7
   10a7c:	bc80      	pop	{r7}
   10a7e:	4770      	bx	lr

00010a80 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_OD_getLength(uint32_t entryNo, uint8_t subIndex){
   10a80:	b480      	push	{r7}
   10a82:	b087      	sub	sp, #28
   10a84:	af00      	add	r7, sp, #0
   10a86:	60f8      	str	r0, [r7, #12]
   10a88:	60b9      	str	r1, [r7, #8]
   10a8a:	4613      	mov	r3, r2
   10a8c:	71fb      	strb	r3, [r7, #7]
    const CO_OD_entry_t* object = &SDO->OD[entryNo];
   10a8e:	68fb      	ldr	r3, [r7, #12]
   10a90:	681b      	ldr	r3, [r3, #0]
   10a92:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   10a94:	68ba      	ldr	r2, [r7, #8]
   10a96:	4613      	mov	r3, r2
   10a98:	009b      	lsls	r3, r3, #2
   10a9a:	4413      	add	r3, r2
   10a9c:	009b      	lsls	r3, r3, #2
   10a9e:	440b      	add	r3, r1
   10aa0:	617b      	str	r3, [r7, #20]

    if(entryNo == 0xFFFFU){
   10aa2:	68bb      	ldr	r3, [r7, #8]
   10aa4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10aa8:	4293      	cmp	r3, r2
   10aaa:	d101      	bne.n	10ab0 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x30>
        return 0U;
   10aac:	2300      	movs	r3, #0
   10aae:	e034      	b.n	10b1a <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
    }

    if(object->maxSubIndex == 0U){    /* Object type is Var */
   10ab0:	697b      	ldr	r3, [r7, #20]
   10ab2:	791b      	ldrb	r3, [r3, #4]
   10ab4:	2b00      	cmp	r3, #0
   10ab6:	d108      	bne.n	10aca <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x4a>
        if(object->pData == 0){ /* data type is domain */
   10ab8:	697b      	ldr	r3, [r7, #20]
   10aba:	691b      	ldr	r3, [r3, #16]
   10abc:	2b00      	cmp	r3, #0
   10abe:	d101      	bne.n	10ac4 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x44>
            return CO_SDO_BUFFER_SIZE;
   10ac0:	2320      	movs	r3, #32
   10ac2:	e02a      	b.n	10b1a <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
        else{
            return object->length;
   10ac4:	697b      	ldr	r3, [r7, #20]
   10ac6:	68db      	ldr	r3, [r3, #12]
   10ac8:	e027      	b.n	10b1a <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
    }
    else if(object->attribute != 0U){ /* Object type is Array */
   10aca:	697b      	ldr	r3, [r7, #20]
   10acc:	689b      	ldr	r3, [r3, #8]
   10ace:	2b00      	cmp	r3, #0
   10ad0:	d00d      	beq.n	10aee <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x6e>
        if(subIndex == 0U){
   10ad2:	79fb      	ldrb	r3, [r7, #7]
   10ad4:	2b00      	cmp	r3, #0
   10ad6:	d101      	bne.n	10adc <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x5c>
            return 1U;
   10ad8:	2301      	movs	r3, #1
   10ada:	e01e      	b.n	10b1a <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
        else if(object->pData == 0){
   10adc:	697b      	ldr	r3, [r7, #20]
   10ade:	691b      	ldr	r3, [r3, #16]
   10ae0:	2b00      	cmp	r3, #0
   10ae2:	d101      	bne.n	10ae8 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x68>
            /* data type is domain */
            return CO_SDO_BUFFER_SIZE;
   10ae4:	2320      	movs	r3, #32
   10ae6:	e018      	b.n	10b1a <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
        else{
            return object->length;
   10ae8:	697b      	ldr	r3, [r7, #20]
   10aea:	68db      	ldr	r3, [r3, #12]
   10aec:	e015      	b.n	10b1a <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
    }
    else{                            /* Object type is Record */
        if(((const CO_OD_entryRecord_t*)(object->pData))[subIndex].pData == 0){
   10aee:	697b      	ldr	r3, [r7, #20]
   10af0:	6919      	ldr	r1, [r3, #16]
   10af2:	79fa      	ldrb	r2, [r7, #7]
   10af4:	4613      	mov	r3, r2
   10af6:	005b      	lsls	r3, r3, #1
   10af8:	4413      	add	r3, r2
   10afa:	009b      	lsls	r3, r3, #2
   10afc:	440b      	add	r3, r1
   10afe:	681b      	ldr	r3, [r3, #0]
   10b00:	2b00      	cmp	r3, #0
   10b02:	d101      	bne.n	10b08 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x88>
            /* data type is domain */
            return CO_SDO_BUFFER_SIZE;
   10b04:	2320      	movs	r3, #32
   10b06:	e008      	b.n	10b1a <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
        else{
            return ((const CO_OD_entryRecord_t*)(object->pData))[subIndex].length;
   10b08:	697b      	ldr	r3, [r7, #20]
   10b0a:	6919      	ldr	r1, [r3, #16]
   10b0c:	79fa      	ldrb	r2, [r7, #7]
   10b0e:	4613      	mov	r3, r2
   10b10:	005b      	lsls	r3, r3, #1
   10b12:	4413      	add	r3, r2
   10b14:	009b      	lsls	r3, r3, #2
   10b16:	440b      	add	r3, r1
   10b18:	689b      	ldr	r3, [r3, #8]
        }
    }
}
   10b1a:	4618      	mov	r0, r3
   10b1c:	371c      	adds	r7, #28
   10b1e:	46bd      	mov	sp, r7
   10b20:	bc80      	pop	{r7}
   10b22:	4770      	bx	lr

00010b24 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_OD_getAttribute(uint32_t entryNo, uint8_t subIndex){
   10b24:	b480      	push	{r7}
   10b26:	b089      	sub	sp, #36	; 0x24
   10b28:	af00      	add	r7, sp, #0
   10b2a:	60f8      	str	r0, [r7, #12]
   10b2c:	60b9      	str	r1, [r7, #8]
   10b2e:	4613      	mov	r3, r2
   10b30:	71fb      	strb	r3, [r7, #7]
    const CO_OD_entry_t* object = &SDO->OD[entryNo];
   10b32:	68fb      	ldr	r3, [r7, #12]
   10b34:	681b      	ldr	r3, [r3, #0]
   10b36:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   10b38:	68ba      	ldr	r2, [r7, #8]
   10b3a:	4613      	mov	r3, r2
   10b3c:	009b      	lsls	r3, r3, #2
   10b3e:	4413      	add	r3, r2
   10b40:	009b      	lsls	r3, r3, #2
   10b42:	440b      	add	r3, r1
   10b44:	617b      	str	r3, [r7, #20]

    if(entryNo == 0xFFFFU){
   10b46:	68bb      	ldr	r3, [r7, #8]
   10b48:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10b4c:	4293      	cmp	r3, r2
   10b4e:	d101      	bne.n	10b54 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x30>
        return 0U;
   10b50:	2300      	movs	r3, #0
   10b52:	e037      	b.n	10bc4 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0xa0>
    }

    if(object->maxSubIndex == 0U){   /* Object type is Var */
   10b54:	697b      	ldr	r3, [r7, #20]
   10b56:	791b      	ldrb	r3, [r3, #4]
   10b58:	2b00      	cmp	r3, #0
   10b5a:	d102      	bne.n	10b62 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x3e>
        return object->attribute;
   10b5c:	697b      	ldr	r3, [r7, #20]
   10b5e:	689b      	ldr	r3, [r3, #8]
   10b60:	e030      	b.n	10bc4 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0xa0>
    }
    else if(object->attribute != 0U){/* Object type is Array */
   10b62:	697b      	ldr	r3, [r7, #20]
   10b64:	689b      	ldr	r3, [r3, #8]
   10b66:	2b00      	cmp	r3, #0
   10b68:	d023      	beq.n	10bb2 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x8e>
        bool_t exception_1003 = false;
   10b6a:	2300      	movs	r3, #0
   10b6c:	77fb      	strb	r3, [r7, #31]
        uint32_t attr = object->attribute;
   10b6e:	697b      	ldr	r3, [r7, #20]
   10b70:	689b      	ldr	r3, [r3, #8]
   10b72:	61bb      	str	r3, [r7, #24]

        /* Special exception: Object 1003,00 should be writable */
        if(object->index == 0x1003 && subIndex == 0) {
   10b74:	697b      	ldr	r3, [r7, #20]
   10b76:	681b      	ldr	r3, [r3, #0]
   10b78:	f241 0203 	movw	r2, #4099	; 0x1003
   10b7c:	4293      	cmp	r3, r2
   10b7e:	d108      	bne.n	10b92 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x6e>
   10b80:	79fb      	ldrb	r3, [r7, #7]
   10b82:	2b00      	cmp	r3, #0
   10b84:	d105      	bne.n	10b92 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x6e>
            exception_1003 = true;
   10b86:	2301      	movs	r3, #1
   10b88:	77fb      	strb	r3, [r7, #31]
            attr |= CO_ODA_WRITEABLE;
   10b8a:	69bb      	ldr	r3, [r7, #24]
   10b8c:	f043 0308 	orr.w	r3, r3, #8
   10b90:	61bb      	str	r3, [r7, #24]
        }

        if(subIndex == 0U  && exception_1003 == false){
   10b92:	79fb      	ldrb	r3, [r7, #7]
   10b94:	2b00      	cmp	r3, #0
   10b96:	d10a      	bne.n	10bae <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x8a>
   10b98:	7ffb      	ldrb	r3, [r7, #31]
   10b9a:	2b00      	cmp	r3, #0
   10b9c:	d107      	bne.n	10bae <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x8a>
            /* First subIndex is readonly */
            attr &= ~(CO_ODA_WRITEABLE | CO_ODA_RPDO_MAPABLE);
   10b9e:	69bb      	ldr	r3, [r7, #24]
   10ba0:	f023 0318 	bic.w	r3, r3, #24
   10ba4:	61bb      	str	r3, [r7, #24]
            attr |= CO_ODA_READABLE;
   10ba6:	69bb      	ldr	r3, [r7, #24]
   10ba8:	f043 0304 	orr.w	r3, r3, #4
   10bac:	61bb      	str	r3, [r7, #24]
        }
        return attr;
   10bae:	69bb      	ldr	r3, [r7, #24]
   10bb0:	e008      	b.n	10bc4 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0xa0>
    }
    else{                            /* Object type is Record */
        return ((const CO_OD_entryRecord_t*)(object->pData))[subIndex].attribute;
   10bb2:	697b      	ldr	r3, [r7, #20]
   10bb4:	6919      	ldr	r1, [r3, #16]
   10bb6:	79fa      	ldrb	r2, [r7, #7]
   10bb8:	4613      	mov	r3, r2
   10bba:	005b      	lsls	r3, r3, #1
   10bbc:	4413      	add	r3, r2
   10bbe:	009b      	lsls	r3, r3, #2
   10bc0:	440b      	add	r3, r1
   10bc2:	685b      	ldr	r3, [r3, #4]
    }
}
   10bc4:	4618      	mov	r0, r3
   10bc6:	3724      	adds	r7, #36	; 0x24
   10bc8:	46bd      	mov	sp, r7
   10bca:	bc80      	pop	{r7}
   10bcc:	4770      	bx	lr

00010bce <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh>:


/******************************************************************************/
void* CO_SDO_Class::CO_OD_getDataPointer( uint32_t entryNo, uint8_t subIndex){
   10bce:	b480      	push	{r7}
   10bd0:	b087      	sub	sp, #28
   10bd2:	af00      	add	r7, sp, #0
   10bd4:	60f8      	str	r0, [r7, #12]
   10bd6:	60b9      	str	r1, [r7, #8]
   10bd8:	4613      	mov	r3, r2
   10bda:	71fb      	strb	r3, [r7, #7]
    const CO_OD_entry_t* object = &SDO->OD[entryNo];
   10bdc:	68fb      	ldr	r3, [r7, #12]
   10bde:	681b      	ldr	r3, [r3, #0]
   10be0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   10be2:	68ba      	ldr	r2, [r7, #8]
   10be4:	4613      	mov	r3, r2
   10be6:	009b      	lsls	r3, r3, #2
   10be8:	4413      	add	r3, r2
   10bea:	009b      	lsls	r3, r3, #2
   10bec:	440b      	add	r3, r1
   10bee:	617b      	str	r3, [r7, #20]

    if(entryNo == 0xFFFFU){
   10bf0:	68bb      	ldr	r3, [r7, #8]
   10bf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10bf6:	4293      	cmp	r3, r2
   10bf8:	d101      	bne.n	10bfe <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x30>
        return 0;
   10bfa:	2300      	movs	r3, #0
   10bfc:	e02a      	b.n	10c54 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
    }

    if(object->maxSubIndex == 0U){   /* Object type is Var */
   10bfe:	697b      	ldr	r3, [r7, #20]
   10c00:	791b      	ldrb	r3, [r3, #4]
   10c02:	2b00      	cmp	r3, #0
   10c04:	d102      	bne.n	10c0c <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x3e>
        return object->pData;
   10c06:	697b      	ldr	r3, [r7, #20]
   10c08:	691b      	ldr	r3, [r3, #16]
   10c0a:	e023      	b.n	10c54 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
    }
    else if(object->attribute != 0U){/* Object type is Array */
   10c0c:	697b      	ldr	r3, [r7, #20]
   10c0e:	689b      	ldr	r3, [r3, #8]
   10c10:	2b00      	cmp	r3, #0
   10c12:	d016      	beq.n	10c42 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x74>
        if(subIndex==0){
   10c14:	79fb      	ldrb	r3, [r7, #7]
   10c16:	2b00      	cmp	r3, #0
   10c18:	d102      	bne.n	10c20 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x52>
            /* this is the data, for the subIndex 0 in the array */
            return (void*) &object->maxSubIndex;
   10c1a:	697b      	ldr	r3, [r7, #20]
   10c1c:	3304      	adds	r3, #4
   10c1e:	e019      	b.n	10c54 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
        }
        else if(object->pData == 0){
   10c20:	697b      	ldr	r3, [r7, #20]
   10c22:	691b      	ldr	r3, [r3, #16]
   10c24:	2b00      	cmp	r3, #0
   10c26:	d101      	bne.n	10c2c <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x5e>
            /* data type is domain */
            return 0;
   10c28:	2300      	movs	r3, #0
   10c2a:	e013      	b.n	10c54 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
        }
        else{
            return (void*)(((int8_t*)object->pData) + ((subIndex-1) * object->length));
   10c2c:	697b      	ldr	r3, [r7, #20]
   10c2e:	691a      	ldr	r2, [r3, #16]
   10c30:	79fb      	ldrb	r3, [r7, #7]
   10c32:	3b01      	subs	r3, #1
   10c34:	4619      	mov	r1, r3
   10c36:	697b      	ldr	r3, [r7, #20]
   10c38:	68db      	ldr	r3, [r3, #12]
   10c3a:	fb03 f301 	mul.w	r3, r3, r1
   10c3e:	4413      	add	r3, r2
   10c40:	e008      	b.n	10c54 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
        }
    }
    else{                            /* Object Type is Record */
        return ((const CO_OD_entryRecord_t*)(object->pData))[subIndex].pData;
   10c42:	697b      	ldr	r3, [r7, #20]
   10c44:	6919      	ldr	r1, [r3, #16]
   10c46:	79fa      	ldrb	r2, [r7, #7]
   10c48:	4613      	mov	r3, r2
   10c4a:	005b      	lsls	r3, r3, #1
   10c4c:	4413      	add	r3, r2
   10c4e:	009b      	lsls	r3, r3, #2
   10c50:	440b      	add	r3, r1
   10c52:	681b      	ldr	r3, [r3, #0]
    }
}
   10c54:	4618      	mov	r0, r3
   10c56:	371c      	adds	r7, #28
   10c58:	46bd      	mov	sp, r7
   10c5a:	bc80      	pop	{r7}
   10c5c:	4770      	bx	lr

00010c5e <_ZN12CO_SDO_Class21CO_OD_getFlagsPointerEmh>:


/******************************************************************************/
uint8_t* CO_SDO_Class::CO_OD_getFlagsPointer( uint32_t entryNo, uint8_t subIndex){
   10c5e:	b480      	push	{r7}
   10c60:	b087      	sub	sp, #28
   10c62:	af00      	add	r7, sp, #0
   10c64:	60f8      	str	r0, [r7, #12]
   10c66:	60b9      	str	r1, [r7, #8]
   10c68:	4613      	mov	r3, r2
   10c6a:	71fb      	strb	r3, [r7, #7]
    CO_OD_extension_t* ext;

    if((entryNo == 0xFFFFU) || (SDO->ODExtensions == 0)){
   10c6c:	68bb      	ldr	r3, [r7, #8]
   10c6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10c72:	4293      	cmp	r3, r2
   10c74:	d004      	beq.n	10c80 <_ZN12CO_SDO_Class21CO_OD_getFlagsPointerEmh+0x22>
   10c76:	68fb      	ldr	r3, [r7, #12]
   10c78:	681b      	ldr	r3, [r3, #0]
   10c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   10c7c:	2b00      	cmp	r3, #0
   10c7e:	d101      	bne.n	10c84 <_ZN12CO_SDO_Class21CO_OD_getFlagsPointerEmh+0x26>
        return 0;
   10c80:	2300      	movs	r3, #0
   10c82:	e00d      	b.n	10ca0 <_ZN12CO_SDO_Class21CO_OD_getFlagsPointerEmh+0x42>
    }

    ext = &SDO->ODExtensions[entryNo];
   10c84:	68fb      	ldr	r3, [r7, #12]
   10c86:	681b      	ldr	r3, [r3, #0]
   10c88:	6b59      	ldr	r1, [r3, #52]	; 0x34
   10c8a:	68ba      	ldr	r2, [r7, #8]
   10c8c:	4613      	mov	r3, r2
   10c8e:	005b      	lsls	r3, r3, #1
   10c90:	4413      	add	r3, r2
   10c92:	009b      	lsls	r3, r3, #2
   10c94:	440b      	add	r3, r1
   10c96:	617b      	str	r3, [r7, #20]

    return &ext->flags[subIndex];
   10c98:	697b      	ldr	r3, [r7, #20]
   10c9a:	689a      	ldr	r2, [r3, #8]
   10c9c:	79fb      	ldrb	r3, [r7, #7]
   10c9e:	4413      	add	r3, r2
}
   10ca0:	4618      	mov	r0, r3
   10ca2:	371c      	adds	r7, #28
   10ca4:	46bd      	mov	sp, r7
   10ca6:	bc80      	pop	{r7}
   10ca8:	4770      	bx	lr
	...

00010cac <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_SDO_initTransfer( uint32_t index, uint8_t subIndex){
   10cac:	b590      	push	{r4, r7, lr}
   10cae:	b087      	sub	sp, #28
   10cb0:	af00      	add	r7, sp, #0
   10cb2:	60f8      	str	r0, [r7, #12]
   10cb4:	60b9      	str	r1, [r7, #8]
   10cb6:	4613      	mov	r3, r2
   10cb8:	71fb      	strb	r3, [r7, #7]

    SDO->ODF_arg.index = index;
   10cba:	68fb      	ldr	r3, [r7, #12]
   10cbc:	681b      	ldr	r3, [r3, #0]
   10cbe:	68ba      	ldr	r2, [r7, #8]
   10cc0:	659a      	str	r2, [r3, #88]	; 0x58
    SDO->ODF_arg.subIndex = subIndex;
   10cc2:	68fb      	ldr	r3, [r7, #12]
   10cc4:	681b      	ldr	r3, [r3, #0]
   10cc6:	79fa      	ldrb	r2, [r7, #7]
   10cc8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* find object in Object Dictionary */
    SDO->entryNo = CO_OD_find( index);
   10ccc:	68fb      	ldr	r3, [r7, #12]
   10cce:	681c      	ldr	r4, [r3, #0]
   10cd0:	68b9      	ldr	r1, [r7, #8]
   10cd2:	68f8      	ldr	r0, [r7, #12]
   10cd4:	4b51      	ldr	r3, [pc, #324]	; (10e1c <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
   10cd6:	4798      	blx	r3
   10cd8:	4603      	mov	r3, r0
   10cda:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(SDO->entryNo == 0xFFFFU){
   10cdc:	68fb      	ldr	r3, [r7, #12]
   10cde:	681b      	ldr	r3, [r3, #0]
   10ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   10ce2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10ce6:	4293      	cmp	r3, r2
   10ce8:	d101      	bne.n	10cee <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x42>
        return CO_SDO_AB_NOT_EXIST ;     /* object does not exist in OD */
   10cea:	4b4d      	ldr	r3, [pc, #308]	; (10e20 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x174>)
   10cec:	e091      	b.n	10e12 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x166>
    }

    /* verify existance of subIndex */
    if(subIndex > SDO->OD[SDO->entryNo].maxSubIndex &&
   10cee:	79f9      	ldrb	r1, [r7, #7]
   10cf0:	68fb      	ldr	r3, [r7, #12]
   10cf2:	681b      	ldr	r3, [r3, #0]
   10cf4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   10cf6:	68fb      	ldr	r3, [r7, #12]
   10cf8:	681b      	ldr	r3, [r3, #0]
   10cfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   10cfc:	4613      	mov	r3, r2
   10cfe:	009b      	lsls	r3, r3, #2
   10d00:	4413      	add	r3, r2
   10d02:	009b      	lsls	r3, r3, #2
   10d04:	4403      	add	r3, r0
   10d06:	791b      	ldrb	r3, [r3, #4]
   10d08:	4299      	cmp	r1, r3
   10d0a:	dd0f      	ble.n	10d2c <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x80>
            SDO->OD[SDO->entryNo].pData != NULL)
   10d0c:	68fb      	ldr	r3, [r7, #12]
   10d0e:	681b      	ldr	r3, [r3, #0]
   10d10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   10d12:	68fb      	ldr	r3, [r7, #12]
   10d14:	681b      	ldr	r3, [r3, #0]
   10d16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   10d18:	4613      	mov	r3, r2
   10d1a:	009b      	lsls	r3, r3, #2
   10d1c:	4413      	add	r3, r2
   10d1e:	009b      	lsls	r3, r3, #2
   10d20:	440b      	add	r3, r1
   10d22:	691b      	ldr	r3, [r3, #16]
    if(subIndex > SDO->OD[SDO->entryNo].maxSubIndex &&
   10d24:	2b00      	cmp	r3, #0
   10d26:	d001      	beq.n	10d2c <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x80>
    {
        return CO_SDO_AB_SUB_UNKNOWN;     /* Sub-index does not exist. */
   10d28:	4b3e      	ldr	r3, [pc, #248]	; (10e24 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x178>)
   10d2a:	e072      	b.n	10e12 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x166>
    }

    /* pointer to data in Object dictionary */
    SDO->ODF_arg.ODdataStorage = CO_OD_getDataPointer(SDO->entryNo, subIndex);
   10d2c:	68fb      	ldr	r3, [r7, #12]
   10d2e:	681c      	ldr	r4, [r3, #0]
   10d30:	68fb      	ldr	r3, [r7, #12]
   10d32:	681b      	ldr	r3, [r3, #0]
   10d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   10d36:	79fa      	ldrb	r2, [r7, #7]
   10d38:	4619      	mov	r1, r3
   10d3a:	68f8      	ldr	r0, [r7, #12]
   10d3c:	4b3a      	ldr	r3, [pc, #232]	; (10e28 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x17c>)
   10d3e:	4798      	blx	r3
   10d40:	4603      	mov	r3, r0
   10d42:	64a3      	str	r3, [r4, #72]	; 0x48

    /* fill ODF_arg */
    SDO->ODF_arg.object = NULL;
   10d44:	68fb      	ldr	r3, [r7, #12]
   10d46:	681b      	ldr	r3, [r3, #0]
   10d48:	2200      	movs	r2, #0
   10d4a:	641a      	str	r2, [r3, #64]	; 0x40
    if(SDO->ODExtensions){
   10d4c:	68fb      	ldr	r3, [r7, #12]
   10d4e:	681b      	ldr	r3, [r3, #0]
   10d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   10d52:	2b00      	cmp	r3, #0
   10d54:	d010      	beq.n	10d78 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0xcc>
        CO_OD_extension_t *ext = &SDO->ODExtensions[SDO->entryNo];
   10d56:	68fb      	ldr	r3, [r7, #12]
   10d58:	681b      	ldr	r3, [r3, #0]
   10d5a:	6b59      	ldr	r1, [r3, #52]	; 0x34
   10d5c:	68fb      	ldr	r3, [r7, #12]
   10d5e:	681b      	ldr	r3, [r3, #0]
   10d60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   10d62:	4613      	mov	r3, r2
   10d64:	005b      	lsls	r3, r3, #1
   10d66:	4413      	add	r3, r2
   10d68:	009b      	lsls	r3, r3, #2
   10d6a:	440b      	add	r3, r1
   10d6c:	617b      	str	r3, [r7, #20]
        SDO->ODF_arg.object = ext->object;
   10d6e:	68fb      	ldr	r3, [r7, #12]
   10d70:	681b      	ldr	r3, [r3, #0]
   10d72:	697a      	ldr	r2, [r7, #20]
   10d74:	6852      	ldr	r2, [r2, #4]
   10d76:	641a      	str	r2, [r3, #64]	; 0x40
    }
    SDO->ODF_arg.data = SDO->databuffer;
   10d78:	68fb      	ldr	r3, [r7, #12]
   10d7a:	681b      	ldr	r3, [r3, #0]
   10d7c:	68fa      	ldr	r2, [r7, #12]
   10d7e:	6812      	ldr	r2, [r2, #0]
   10d80:	3208      	adds	r2, #8
   10d82:	645a      	str	r2, [r3, #68]	; 0x44
    SDO->ODF_arg.dataLength = CO_OD_getLength(SDO->entryNo, subIndex);
   10d84:	68fb      	ldr	r3, [r7, #12]
   10d86:	681c      	ldr	r4, [r3, #0]
   10d88:	68fb      	ldr	r3, [r7, #12]
   10d8a:	681b      	ldr	r3, [r3, #0]
   10d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   10d8e:	79fa      	ldrb	r2, [r7, #7]
   10d90:	4619      	mov	r1, r3
   10d92:	68f8      	ldr	r0, [r7, #12]
   10d94:	4b25      	ldr	r3, [pc, #148]	; (10e2c <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x180>)
   10d96:	4798      	blx	r3
   10d98:	4603      	mov	r3, r0
   10d9a:	64e3      	str	r3, [r4, #76]	; 0x4c
    SDO->ODF_arg.attribute = CO_OD_getAttribute(SDO->entryNo, subIndex);
   10d9c:	68fb      	ldr	r3, [r7, #12]
   10d9e:	681c      	ldr	r4, [r3, #0]
   10da0:	68fb      	ldr	r3, [r7, #12]
   10da2:	681b      	ldr	r3, [r3, #0]
   10da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   10da6:	79fa      	ldrb	r2, [r7, #7]
   10da8:	4619      	mov	r1, r3
   10daa:	68f8      	ldr	r0, [r7, #12]
   10dac:	4b20      	ldr	r3, [pc, #128]	; (10e30 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x184>)
   10dae:	4798      	blx	r3
   10db0:	4603      	mov	r3, r0
   10db2:	6523      	str	r3, [r4, #80]	; 0x50
    SDO->ODF_arg.pFlags = CO_OD_getFlagsPointer( SDO->entryNo, subIndex);
   10db4:	68fb      	ldr	r3, [r7, #12]
   10db6:	681c      	ldr	r4, [r3, #0]
   10db8:	68fb      	ldr	r3, [r7, #12]
   10dba:	681b      	ldr	r3, [r3, #0]
   10dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   10dbe:	79fa      	ldrb	r2, [r7, #7]
   10dc0:	4619      	mov	r1, r3
   10dc2:	68f8      	ldr	r0, [r7, #12]
   10dc4:	4b1b      	ldr	r3, [pc, #108]	; (10e34 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x188>)
   10dc6:	4798      	blx	r3
   10dc8:	4603      	mov	r3, r0
   10dca:	6563      	str	r3, [r4, #84]	; 0x54

    SDO->ODF_arg.firstSegment = true;
   10dcc:	68fb      	ldr	r3, [r7, #12]
   10dce:	681b      	ldr	r3, [r3, #0]
   10dd0:	2201      	movs	r2, #1
   10dd2:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
    SDO->ODF_arg.lastSegment = true;
   10dd6:	68fb      	ldr	r3, [r7, #12]
   10dd8:	681b      	ldr	r3, [r3, #0]
   10dda:	2201      	movs	r2, #1
   10ddc:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f

    /* indicate total data length, if not domain */
    SDO->ODF_arg.dataLengthTotal = (SDO->ODF_arg.ODdataStorage) ? SDO->ODF_arg.dataLength : 0U;
   10de0:	68fb      	ldr	r3, [r7, #12]
   10de2:	681a      	ldr	r2, [r3, #0]
   10de4:	68fb      	ldr	r3, [r7, #12]
   10de6:	681b      	ldr	r3, [r3, #0]
   10de8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   10dea:	2b00      	cmp	r3, #0
   10dec:	d003      	beq.n	10df6 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x14a>
   10dee:	68fb      	ldr	r3, [r7, #12]
   10df0:	681b      	ldr	r3, [r3, #0]
   10df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   10df4:	e000      	b.n	10df8 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x14c>
   10df6:	2300      	movs	r3, #0
   10df8:	6613      	str	r3, [r2, #96]	; 0x60

    SDO->ODF_arg.offset = 0U;
   10dfa:	68fb      	ldr	r3, [r7, #12]
   10dfc:	681b      	ldr	r3, [r3, #0]
   10dfe:	2200      	movs	r2, #0
   10e00:	665a      	str	r2, [r3, #100]	; 0x64

    /* verify length */
    if(SDO->ODF_arg.dataLength > CO_SDO_BUFFER_SIZE){
   10e02:	68fb      	ldr	r3, [r7, #12]
   10e04:	681b      	ldr	r3, [r3, #0]
   10e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   10e08:	2b20      	cmp	r3, #32
   10e0a:	d901      	bls.n	10e10 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x164>
        return CO_SDO_AB_DEVICE_INCOMPAT;     /* general internal incompatibility in the device */
   10e0c:	4b0a      	ldr	r3, [pc, #40]	; (10e38 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x18c>)
   10e0e:	e000      	b.n	10e12 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x166>
    }

    return 0U;
   10e10:	2300      	movs	r3, #0
}
   10e12:	4618      	mov	r0, r3
   10e14:	371c      	adds	r7, #28
   10e16:	46bd      	mov	sp, r7
   10e18:	bd90      	pop	{r4, r7, pc}
   10e1a:	bf00      	nop
   10e1c:	000109d9 	.word	0x000109d9
   10e20:	06020000 	.word	0x06020000
   10e24:	06090011 	.word	0x06090011
   10e28:	00010bcf 	.word	0x00010bcf
   10e2c:	00010a81 	.word	0x00010a81
   10e30:	00010b25 	.word	0x00010b25
   10e34:	00010c5f 	.word	0x00010c5f
   10e38:	06040047 	.word	0x06040047

00010e3c <_ZN12CO_SDO_Class13CO_SDO_readODEm>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_SDO_readOD(uint32_t SDOBufferSize){
   10e3c:	b580      	push	{r7, lr}
   10e3e:	b08a      	sub	sp, #40	; 0x28
   10e40:	af00      	add	r7, sp, #0
   10e42:	6078      	str	r0, [r7, #4]
   10e44:	6039      	str	r1, [r7, #0]
    uint8_t *SDObuffer = SDO->ODF_arg.data;
   10e46:	687b      	ldr	r3, [r7, #4]
   10e48:	681b      	ldr	r3, [r3, #0]
   10e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   10e4c:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t *ODdata = (uint8_t*)SDO->ODF_arg.ODdataStorage;
   10e4e:	687b      	ldr	r3, [r7, #4]
   10e50:	681b      	ldr	r3, [r3, #0]
   10e52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   10e54:	623b      	str	r3, [r7, #32]
    uint32_t length = SDO->ODF_arg.dataLength;
   10e56:	687b      	ldr	r3, [r7, #4]
   10e58:	681b      	ldr	r3, [r3, #0]
   10e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   10e5c:	61fb      	str	r3, [r7, #28]
    CO_OD_extension_t *ext = 0;
   10e5e:	2300      	movs	r3, #0
   10e60:	61bb      	str	r3, [r7, #24]

    /* is object readable? */
    if((SDO->ODF_arg.attribute & CO_ODA_READABLE) == 0)
   10e62:	687b      	ldr	r3, [r7, #4]
   10e64:	681b      	ldr	r3, [r3, #0]
   10e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   10e68:	f003 0304 	and.w	r3, r3, #4
   10e6c:	2b00      	cmp	r3, #0
   10e6e:	d101      	bne.n	10e74 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x38>
        return CO_SDO_AB_WRITEONLY;     /* attempt to read a write-only object */
   10e70:	4b38      	ldr	r3, [pc, #224]	; (10f54 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x118>)
   10e72:	e06b      	b.n	10f4c <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x110>

    /* find extension */
    if(SDO->ODExtensions != NULL){
   10e74:	687b      	ldr	r3, [r7, #4]
   10e76:	681b      	ldr	r3, [r3, #0]
   10e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   10e7a:	2b00      	cmp	r3, #0
   10e7c:	d00b      	beq.n	10e96 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x5a>
        ext = &SDO->ODExtensions[SDO->entryNo];
   10e7e:	687b      	ldr	r3, [r7, #4]
   10e80:	681b      	ldr	r3, [r3, #0]
   10e82:	6b59      	ldr	r1, [r3, #52]	; 0x34
   10e84:	687b      	ldr	r3, [r7, #4]
   10e86:	681b      	ldr	r3, [r3, #0]
   10e88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   10e8a:	4613      	mov	r3, r2
   10e8c:	005b      	lsls	r3, r3, #1
   10e8e:	4413      	add	r3, r2
   10e90:	009b      	lsls	r3, r3, #2
   10e92:	440b      	add	r3, r1
   10e94:	61bb      	str	r3, [r7, #24]
    }

    /* copy data from OD to SDO buffer if not domain */
    if(ODdata != NULL){
   10e96:	6a3b      	ldr	r3, [r7, #32]
   10e98:	2b00      	cmp	r3, #0
   10e9a:	d01e      	beq.n	10eda <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x9e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   10e9c:	f3ef 8310 	mrs	r3, PRIMASK
   10ea0:	60bb      	str	r3, [r7, #8]
  return(result);
   10ea2:	68bb      	ldr	r3, [r7, #8]
        CO_LOCK_OD();
   10ea4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
   10ea6:	b672      	cpsid	i
        while(length--) *(SDObuffer++) = *(ODdata++);
   10ea8:	69fb      	ldr	r3, [r7, #28]
   10eaa:	1e5a      	subs	r2, r3, #1
   10eac:	61fa      	str	r2, [r7, #28]
   10eae:	2b00      	cmp	r3, #0
   10eb0:	bf14      	ite	ne
   10eb2:	2301      	movne	r3, #1
   10eb4:	2300      	moveq	r3, #0
   10eb6:	b2db      	uxtb	r3, r3
   10eb8:	2b00      	cmp	r3, #0
   10eba:	d008      	beq.n	10ece <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x92>
   10ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10ebe:	1c5a      	adds	r2, r3, #1
   10ec0:	627a      	str	r2, [r7, #36]	; 0x24
   10ec2:	6a3a      	ldr	r2, [r7, #32]
   10ec4:	1c51      	adds	r1, r2, #1
   10ec6:	6239      	str	r1, [r7, #32]
   10ec8:	7812      	ldrb	r2, [r2, #0]
   10eca:	701a      	strb	r2, [r3, #0]
   10ecc:	e7ec      	b.n	10ea8 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x6c>
   10ece:	697b      	ldr	r3, [r7, #20]
   10ed0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   10ed2:	68fb      	ldr	r3, [r7, #12]
   10ed4:	f383 8810 	msr	PRIMASK, r3
   10ed8:	e005      	b.n	10ee6 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0xaa>
        CO_UNLOCK_OD();
    }
    /* if domain, Object dictionary function MUST exist */
    else{
        if(ext->pODFunc == NULL){
   10eda:	69bb      	ldr	r3, [r7, #24]
   10edc:	681b      	ldr	r3, [r3, #0]
   10ede:	2b00      	cmp	r3, #0
   10ee0:	d101      	bne.n	10ee6 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0xaa>
            return CO_SDO_AB_DEVICE_INCOMPAT;     /* general internal incompatibility in the device */
   10ee2:	4b1d      	ldr	r3, [pc, #116]	; (10f58 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x11c>)
   10ee4:	e032      	b.n	10f4c <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x110>
        }
    }

    /* call Object dictionary function if registered */
    SDO->ODF_arg.reading = true;
   10ee6:	687b      	ldr	r3, [r7, #4]
   10ee8:	681b      	ldr	r3, [r3, #0]
   10eea:	2201      	movs	r2, #1
   10eec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if(ext->pODFunc != NULL){
   10ef0:	69bb      	ldr	r3, [r7, #24]
   10ef2:	681b      	ldr	r3, [r3, #0]
   10ef4:	2b00      	cmp	r3, #0
   10ef6:	d019      	beq.n	10f2c <_ZN12CO_SDO_Class13CO_SDO_readODEm+0xf0>
        uint32_t abortCode = ext->pODFunc(&SDO->ODF_arg);
   10ef8:	69bb      	ldr	r3, [r7, #24]
   10efa:	681b      	ldr	r3, [r3, #0]
   10efc:	687a      	ldr	r2, [r7, #4]
   10efe:	6812      	ldr	r2, [r2, #0]
   10f00:	3240      	adds	r2, #64	; 0x40
   10f02:	4610      	mov	r0, r2
   10f04:	4798      	blx	r3
   10f06:	6138      	str	r0, [r7, #16]
        if(abortCode != 0U){
   10f08:	693b      	ldr	r3, [r7, #16]
   10f0a:	2b00      	cmp	r3, #0
   10f0c:	d001      	beq.n	10f12 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0xd6>
            return abortCode;
   10f0e:	693b      	ldr	r3, [r7, #16]
   10f10:	e01c      	b.n	10f4c <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x110>
        }

        /* dataLength (upadted by pODFunc) must be inside limits */
        if((SDO->ODF_arg.dataLength == 0U) || (SDO->ODF_arg.dataLength > SDOBufferSize)){
   10f12:	687b      	ldr	r3, [r7, #4]
   10f14:	681b      	ldr	r3, [r3, #0]
   10f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   10f18:	2b00      	cmp	r3, #0
   10f1a:	d005      	beq.n	10f28 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0xec>
   10f1c:	687b      	ldr	r3, [r7, #4]
   10f1e:	681b      	ldr	r3, [r3, #0]
   10f20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   10f22:	683b      	ldr	r3, [r7, #0]
   10f24:	429a      	cmp	r2, r3
   10f26:	d901      	bls.n	10f2c <_ZN12CO_SDO_Class13CO_SDO_readODEm+0xf0>
            return CO_SDO_AB_DEVICE_INCOMPAT;     /* general internal incompatibility in the device */
   10f28:	4b0b      	ldr	r3, [pc, #44]	; (10f58 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x11c>)
   10f2a:	e00f      	b.n	10f4c <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x110>
        }
    }
    SDO->ODF_arg.offset += SDO->ODF_arg.dataLength;
   10f2c:	687b      	ldr	r3, [r7, #4]
   10f2e:	681b      	ldr	r3, [r3, #0]
   10f30:	687a      	ldr	r2, [r7, #4]
   10f32:	6812      	ldr	r2, [r2, #0]
   10f34:	6e51      	ldr	r1, [r2, #100]	; 0x64
   10f36:	687a      	ldr	r2, [r7, #4]
   10f38:	6812      	ldr	r2, [r2, #0]
   10f3a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   10f3c:	440a      	add	r2, r1
   10f3e:	665a      	str	r2, [r3, #100]	; 0x64
    SDO->ODF_arg.firstSegment = false;
   10f40:	687b      	ldr	r3, [r7, #4]
   10f42:	681b      	ldr	r3, [r3, #0]
   10f44:	2200      	movs	r2, #0
   10f46:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
            *(buf2--) = b;
        }
    }
#endif

    return 0U;
   10f4a:	2300      	movs	r3, #0
}
   10f4c:	4618      	mov	r0, r3
   10f4e:	3728      	adds	r7, #40	; 0x28
   10f50:	46bd      	mov	sp, r7
   10f52:	bd80      	pop	{r7, pc}
   10f54:	06010001 	.word	0x06010001
   10f58:	06040047 	.word	0x06040047

00010f5c <_ZN12CO_SDO_Class14CO_SDO_writeODEm>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_SDO_writeOD(uint32_t length){
   10f5c:	b580      	push	{r7, lr}
   10f5e:	b08a      	sub	sp, #40	; 0x28
   10f60:	af00      	add	r7, sp, #0
   10f62:	6078      	str	r0, [r7, #4]
   10f64:	6039      	str	r1, [r7, #0]
    uint8_t *SDObuffer = SDO->ODF_arg.data;
   10f66:	687b      	ldr	r3, [r7, #4]
   10f68:	681b      	ldr	r3, [r3, #0]
   10f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   10f6c:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t *ODdata = (uint8_t*)SDO->ODF_arg.ODdataStorage;
   10f6e:	687b      	ldr	r3, [r7, #4]
   10f70:	681b      	ldr	r3, [r3, #0]
   10f72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   10f74:	623b      	str	r3, [r7, #32]
    bool_t exception_1003 = false;
   10f76:	2300      	movs	r3, #0
   10f78:	77fb      	strb	r3, [r7, #31]

    /* is object writeable? */
    if((SDO->ODF_arg.attribute & CO_ODA_WRITEABLE) == 0){
   10f7a:	687b      	ldr	r3, [r7, #4]
   10f7c:	681b      	ldr	r3, [r3, #0]
   10f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   10f80:	f003 0308 	and.w	r3, r3, #8
   10f84:	2b00      	cmp	r3, #0
   10f86:	d101      	bne.n	10f8c <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x30>
        return CO_SDO_AB_READONLY;     /* attempt to write a read-only object */
   10f88:	4b3f      	ldr	r3, [pc, #252]	; (11088 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x12c>)
   10f8a:	e079      	b.n	11080 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x124>
    }

    /* length of domain data is application specific and not verified */
    if(ODdata == 0){
   10f8c:	6a3b      	ldr	r3, [r7, #32]
   10f8e:	2b00      	cmp	r3, #0
   10f90:	d104      	bne.n	10f9c <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x40>
        SDO->ODF_arg.dataLength = length;
   10f92:	687b      	ldr	r3, [r7, #4]
   10f94:	681b      	ldr	r3, [r3, #0]
   10f96:	683a      	ldr	r2, [r7, #0]
   10f98:	64da      	str	r2, [r3, #76]	; 0x4c
   10f9a:	e007      	b.n	10fac <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x50>
    }

    /* verify length except for domain data type */
    else if(SDO->ODF_arg.dataLength != length){
   10f9c:	687b      	ldr	r3, [r7, #4]
   10f9e:	681b      	ldr	r3, [r3, #0]
   10fa0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   10fa2:	683b      	ldr	r3, [r7, #0]
   10fa4:	429a      	cmp	r2, r3
   10fa6:	d001      	beq.n	10fac <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x50>
        return CO_SDO_AB_TYPE_MISMATCH;     /* Length of service parameter does not match */
   10fa8:	4b38      	ldr	r3, [pc, #224]	; (1108c <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x130>)
   10faa:	e069      	b.n	11080 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x124>
        }
    }
#endif

    /* call Object dictionary function if registered */
    SDO->ODF_arg.reading = false;
   10fac:	687b      	ldr	r3, [r7, #4]
   10fae:	681b      	ldr	r3, [r3, #0]
   10fb0:	2200      	movs	r2, #0
   10fb2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if(SDO->ODExtensions != NULL){
   10fb6:	687b      	ldr	r3, [r7, #4]
   10fb8:	681b      	ldr	r3, [r3, #0]
   10fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   10fbc:	2b00      	cmp	r3, #0
   10fbe:	d01c      	beq.n	10ffa <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x9e>
        CO_OD_extension_t *ext = &SDO->ODExtensions[SDO->entryNo];
   10fc0:	687b      	ldr	r3, [r7, #4]
   10fc2:	681b      	ldr	r3, [r3, #0]
   10fc4:	6b59      	ldr	r1, [r3, #52]	; 0x34
   10fc6:	687b      	ldr	r3, [r7, #4]
   10fc8:	681b      	ldr	r3, [r3, #0]
   10fca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   10fcc:	4613      	mov	r3, r2
   10fce:	005b      	lsls	r3, r3, #1
   10fd0:	4413      	add	r3, r2
   10fd2:	009b      	lsls	r3, r3, #2
   10fd4:	440b      	add	r3, r1
   10fd6:	61bb      	str	r3, [r7, #24]

        if(ext->pODFunc != NULL){
   10fd8:	69bb      	ldr	r3, [r7, #24]
   10fda:	681b      	ldr	r3, [r3, #0]
   10fdc:	2b00      	cmp	r3, #0
   10fde:	d00c      	beq.n	10ffa <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x9e>
            uint32_t abortCode = ext->pODFunc(&SDO->ODF_arg);
   10fe0:	69bb      	ldr	r3, [r7, #24]
   10fe2:	681b      	ldr	r3, [r3, #0]
   10fe4:	687a      	ldr	r2, [r7, #4]
   10fe6:	6812      	ldr	r2, [r2, #0]
   10fe8:	3240      	adds	r2, #64	; 0x40
   10fea:	4610      	mov	r0, r2
   10fec:	4798      	blx	r3
   10fee:	6178      	str	r0, [r7, #20]
            if(abortCode != 0U){
   10ff0:	697b      	ldr	r3, [r7, #20]
   10ff2:	2b00      	cmp	r3, #0
   10ff4:	d001      	beq.n	10ffa <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x9e>
                return abortCode;
   10ff6:	697b      	ldr	r3, [r7, #20]
   10ff8:	e042      	b.n	11080 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x124>
            }
        }
    }
    SDO->ODF_arg.offset += SDO->ODF_arg.dataLength;
   10ffa:	687b      	ldr	r3, [r7, #4]
   10ffc:	681b      	ldr	r3, [r3, #0]
   10ffe:	687a      	ldr	r2, [r7, #4]
   11000:	6812      	ldr	r2, [r2, #0]
   11002:	6e51      	ldr	r1, [r2, #100]	; 0x64
   11004:	687a      	ldr	r2, [r7, #4]
   11006:	6812      	ldr	r2, [r2, #0]
   11008:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   1100a:	440a      	add	r2, r1
   1100c:	665a      	str	r2, [r3, #100]	; 0x64
    SDO->ODF_arg.firstSegment = false;
   1100e:	687b      	ldr	r3, [r7, #4]
   11010:	681b      	ldr	r3, [r3, #0]
   11012:	2200      	movs	r2, #0
   11014:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e

    /* Special exception: 1003,00 is writable from network, but not in OD  */
    if(SDO->ODF_arg.index == 0x1003 && SDO->ODF_arg.subIndex == 0) {
   11018:	687b      	ldr	r3, [r7, #4]
   1101a:	681b      	ldr	r3, [r3, #0]
   1101c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   1101e:	f241 0203 	movw	r2, #4099	; 0x1003
   11022:	4293      	cmp	r3, r2
   11024:	d107      	bne.n	11036 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0xda>
   11026:	687b      	ldr	r3, [r7, #4]
   11028:	681b      	ldr	r3, [r3, #0]
   1102a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
   1102e:	2b00      	cmp	r3, #0
   11030:	d101      	bne.n	11036 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0xda>
        exception_1003 = true;
   11032:	2301      	movs	r3, #1
   11034:	77fb      	strb	r3, [r7, #31]
    }

    /* copy data from SDO buffer to OD if not domain */
    if(ODdata != NULL && exception_1003 == false){
   11036:	6a3b      	ldr	r3, [r7, #32]
   11038:	2b00      	cmp	r3, #0
   1103a:	d020      	beq.n	1107e <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x122>
   1103c:	7ffb      	ldrb	r3, [r7, #31]
   1103e:	2b00      	cmp	r3, #0
   11040:	d11d      	bne.n	1107e <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x122>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   11042:	f3ef 8310 	mrs	r3, PRIMASK
   11046:	60bb      	str	r3, [r7, #8]
  return(result);
   11048:	68bb      	ldr	r3, [r7, #8]
        CO_LOCK_OD();
   1104a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
   1104c:	b672      	cpsid	i
        while(length--){
   1104e:	683b      	ldr	r3, [r7, #0]
   11050:	1e5a      	subs	r2, r3, #1
   11052:	603a      	str	r2, [r7, #0]
   11054:	2b00      	cmp	r3, #0
   11056:	bf14      	ite	ne
   11058:	2301      	movne	r3, #1
   1105a:	2300      	moveq	r3, #0
   1105c:	b2db      	uxtb	r3, r3
   1105e:	2b00      	cmp	r3, #0
   11060:	d008      	beq.n	11074 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x118>
            *(ODdata++) = *(SDObuffer++);
   11062:	6a3b      	ldr	r3, [r7, #32]
   11064:	1c5a      	adds	r2, r3, #1
   11066:	623a      	str	r2, [r7, #32]
   11068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1106a:	1c51      	adds	r1, r2, #1
   1106c:	6279      	str	r1, [r7, #36]	; 0x24
   1106e:	7812      	ldrb	r2, [r2, #0]
   11070:	701a      	strb	r2, [r3, #0]
        while(length--){
   11072:	e7ec      	b.n	1104e <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0xf2>
   11074:	693b      	ldr	r3, [r7, #16]
   11076:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   11078:	68fb      	ldr	r3, [r7, #12]
   1107a:	f383 8810 	msr	PRIMASK, r3
        }
        CO_UNLOCK_OD();
    }

    return 0;
   1107e:	2300      	movs	r3, #0
}
   11080:	4618      	mov	r0, r3
   11082:	3728      	adds	r7, #40	; 0x28
   11084:	46bd      	mov	sp, r7
   11086:	bd80      	pop	{r7, pc}
   11088:	06010002 	.word	0x06010002
   1108c:	06070010 	.word	0x06070010

00011090 <_ZL12CO_SDO_abortP8CO_SDO_tm>:


/******************************************************************************/
static void CO_SDO_abort(CO_SDO_t *SDO,uint32_t code){
   11090:	b580      	push	{r7, lr}
   11092:	b082      	sub	sp, #8
   11094:	af00      	add	r7, sp, #0
   11096:	6078      	str	r0, [r7, #4]
   11098:	6039      	str	r1, [r7, #0]
    SDO->CANtxBuff->data[0] = 0x80;
   1109a:	687b      	ldr	r3, [r7, #4]
   1109c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   110a0:	2280      	movs	r2, #128	; 0x80
   110a2:	715a      	strb	r2, [r3, #5]
    SDO->CANtxBuff->data[1] = SDO->ODF_arg.index & 0xFF;
   110a4:	687b      	ldr	r3, [r7, #4]
   110a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   110aa:	687a      	ldr	r2, [r7, #4]
   110ac:	6d92      	ldr	r2, [r2, #88]	; 0x58
   110ae:	b2d2      	uxtb	r2, r2
   110b0:	719a      	strb	r2, [r3, #6]
    SDO->CANtxBuff->data[2] = (SDO->ODF_arg.index>>8) & 0xFF;
   110b2:	687b      	ldr	r3, [r7, #4]
   110b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   110b8:	687a      	ldr	r2, [r7, #4]
   110ba:	6d92      	ldr	r2, [r2, #88]	; 0x58
   110bc:	0a12      	lsrs	r2, r2, #8
   110be:	b2d2      	uxtb	r2, r2
   110c0:	71da      	strb	r2, [r3, #7]
    SDO->CANtxBuff->data[3] = SDO->ODF_arg.subIndex;
   110c2:	687b      	ldr	r3, [r7, #4]
   110c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   110c8:	687a      	ldr	r2, [r7, #4]
   110ca:	f892 205c 	ldrb.w	r2, [r2, #92]	; 0x5c
   110ce:	721a      	strb	r2, [r3, #8]
   ptrCODriverClass->CO_memcpySwap4(&SDO->CANtxBuff->data[4], &code);
   110d0:	4b0f      	ldr	r3, [pc, #60]	; (11110 <_ZL12CO_SDO_abortP8CO_SDO_tm+0x80>)
   110d2:	681b      	ldr	r3, [r3, #0]
   110d4:	1d18      	adds	r0, r3, #4
   110d6:	687b      	ldr	r3, [r7, #4]
   110d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   110dc:	3309      	adds	r3, #9
   110de:	463a      	mov	r2, r7
   110e0:	4619      	mov	r1, r3
   110e2:	4b0c      	ldr	r3, [pc, #48]	; (11114 <_ZL12CO_SDO_abortP8CO_SDO_tm+0x84>)
   110e4:	4798      	blx	r3
    SDO->state = CO_SDO_ST_IDLE;
   110e6:	687b      	ldr	r3, [r7, #4]
   110e8:	2200      	movs	r2, #0
   110ea:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    SDO->CANrxNew = false;
   110ee:	687b      	ldr	r3, [r7, #4]
   110f0:	2200      	movs	r2, #0
   110f2:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
    ptrCODriverClass->CAN_Send(SDO->CANtxBuff);
   110f6:	4b06      	ldr	r3, [pc, #24]	; (11110 <_ZL12CO_SDO_abortP8CO_SDO_tm+0x80>)
   110f8:	681a      	ldr	r2, [r3, #0]
   110fa:	687b      	ldr	r3, [r7, #4]
   110fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11100:	4619      	mov	r1, r3
   11102:	4610      	mov	r0, r2
   11104:	4b04      	ldr	r3, [pc, #16]	; (11118 <_ZL12CO_SDO_abortP8CO_SDO_tm+0x88>)
   11106:	4798      	blx	r3
}
   11108:	bf00      	nop
   1110a:	3708      	adds	r7, #8
   1110c:	46bd      	mov	sp, r7
   1110e:	bd80      	pop	{r7, pc}
   11110:	200019b4 	.word	0x200019b4
   11114:	0001056d 	.word	0x0001056d
   11118:	0000d9ad 	.word	0x0000d9ad

0001111c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm>:
int8_t CO_SDO_Class::CO_SDO_process(
         bool_t                  NMTisPreOrOperational,
        uint32_t                timeDifference_ms,
        uint32_t                SDOtimeoutTime,
        uint32_t               *timerNext_ms)
{
   1111c:	b5b0      	push	{r4, r5, r7, lr}
   1111e:	b092      	sub	sp, #72	; 0x48
   11120:	af00      	add	r7, sp, #0
   11122:	60f8      	str	r0, [r7, #12]
   11124:	607a      	str	r2, [r7, #4]
   11126:	603b      	str	r3, [r7, #0]
   11128:	460b      	mov	r3, r1
   1112a:	72fb      	strb	r3, [r7, #11]
    CO_SDO_state_t state = CO_SDO_ST_IDLE;
   1112c:	2300      	movs	r3, #0
   1112e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    bool_t timeoutSubblockDownolad = false;
   11132:	2300      	movs	r3, #0
   11134:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    bool_t sendResponse = false;
   11138:	2300      	movs	r3, #0
   1113a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	
    /* return if idle */
    if((SDO->state == CO_SDO_ST_IDLE) && (!SDO->CANrxNew)){
   1113e:	68fb      	ldr	r3, [r7, #12]
   11140:	681b      	ldr	r3, [r3, #0]
   11142:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   11146:	2b00      	cmp	r3, #0
   11148:	d108      	bne.n	1115c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x40>
   1114a:	68fb      	ldr	r3, [r7, #12]
   1114c:	681b      	ldr	r3, [r3, #0]
   1114e:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
   11152:	2b00      	cmp	r3, #0
   11154:	d102      	bne.n	1115c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x40>
	//	printf("CO_SDO_ST_IDLE\n\r");
        return 0;
   11156:	2300      	movs	r3, #0
   11158:	f001 b976 	b.w	12448 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
    }

    /* SDO is allowed to work only in operational or pre-operational NMT state */
    if(!NMTisPreOrOperational){
   1115c:	7afb      	ldrb	r3, [r7, #11]
   1115e:	2b00      	cmp	r3, #0
   11160:	d10c      	bne.n	1117c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x60>
        SDO->state = CO_SDO_ST_IDLE;
   11162:	68fb      	ldr	r3, [r7, #12]
   11164:	681b      	ldr	r3, [r3, #0]
   11166:	2200      	movs	r2, #0
   11168:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        SDO->CANrxNew = false;
   1116c:	68fb      	ldr	r3, [r7, #12]
   1116e:	681b      	ldr	r3, [r3, #0]
   11170:	2200      	movs	r2, #0
   11172:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	//	printf("!NMTisPreOrOperational\n\r");
        return 0;
   11176:	2300      	movs	r3, #0
   11178:	f001 b966 	b.w	12448 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
    }

    /* Is something new to process? */
    if((!SDO->CANtxBuff->bufferFull) && ((SDO->CANrxNew) || (SDO->state == CO_SDO_ST_UPLOAD_BL_SUBBLOCK))){
   1117c:	68fb      	ldr	r3, [r7, #12]
   1117e:	681b      	ldr	r3, [r3, #0]
   11180:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11184:	7b5b      	ldrb	r3, [r3, #13]
   11186:	b2db      	uxtb	r3, r3
   11188:	2b00      	cmp	r3, #0
   1118a:	d10d      	bne.n	111a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x8c>
   1118c:	68fb      	ldr	r3, [r7, #12]
   1118e:	681b      	ldr	r3, [r3, #0]
   11190:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
   11194:	2b00      	cmp	r3, #0
   11196:	d105      	bne.n	111a4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x88>
   11198:	68fb      	ldr	r3, [r7, #12]
   1119a:	681b      	ldr	r3, [r3, #0]
   1119c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   111a0:	2b26      	cmp	r3, #38	; 0x26
   111a2:	d101      	bne.n	111a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x8c>
   111a4:	2301      	movs	r3, #1
   111a6:	e000      	b.n	111aa <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x8e>
   111a8:	2300      	movs	r3, #0
   111aa:	2b00      	cmp	r3, #0
   111ac:	f000 80eb 	beq.w	11386 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x26a>
        uint8_t CCS = SDO->CANrxData[0] >> 5;   /* Client command specifier */
   111b0:	68fb      	ldr	r3, [r7, #12]
   111b2:	681b      	ldr	r3, [r3, #0]
   111b4:	781b      	ldrb	r3, [r3, #0]
   111b6:	115b      	asrs	r3, r3, #5
   111b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		//printf("Is something new to process\n\r");
        /* reset timeout */
        if(SDO->state != CO_SDO_ST_UPLOAD_BL_SUBBLOCK)
   111bc:	68fb      	ldr	r3, [r7, #12]
   111be:	681b      	ldr	r3, [r3, #0]
   111c0:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   111c4:	2b26      	cmp	r3, #38	; 0x26
   111c6:	d003      	beq.n	111d0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xb4>
            SDO->timeoutTimer = 0;
   111c8:	68fb      	ldr	r3, [r7, #12]
   111ca:	681b      	ldr	r3, [r3, #0]
   111cc:	2200      	movs	r2, #0
   111ce:	66da      	str	r2, [r3, #108]	; 0x6c

        /* clear response buffer */
        SDO->CANtxBuff->data[0] = SDO->CANtxBuff->data[1] = SDO->CANtxBuff->data[2] = SDO->CANtxBuff->data[3] = 0;
   111d0:	68fb      	ldr	r3, [r7, #12]
   111d2:	681b      	ldr	r3, [r3, #0]
   111d4:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   111d8:	68fb      	ldr	r3, [r7, #12]
   111da:	681b      	ldr	r3, [r3, #0]
   111dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   111e0:	68fa      	ldr	r2, [r7, #12]
   111e2:	6812      	ldr	r2, [r2, #0]
   111e4:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
   111e8:	68f9      	ldr	r1, [r7, #12]
   111ea:	6809      	ldr	r1, [r1, #0]
   111ec:	f8d1 1084 	ldr.w	r1, [r1, #132]	; 0x84
   111f0:	2400      	movs	r4, #0
   111f2:	720c      	strb	r4, [r1, #8]
   111f4:	7a09      	ldrb	r1, [r1, #8]
   111f6:	71d1      	strb	r1, [r2, #7]
   111f8:	79d2      	ldrb	r2, [r2, #7]
   111fa:	719a      	strb	r2, [r3, #6]
   111fc:	799b      	ldrb	r3, [r3, #6]
   111fe:	7143      	strb	r3, [r0, #5]
        SDO->CANtxBuff->data[4] = SDO->CANtxBuff->data[5] = SDO->CANtxBuff->data[6] = SDO->CANtxBuff->data[7] = 0;
   11200:	68fb      	ldr	r3, [r7, #12]
   11202:	681b      	ldr	r3, [r3, #0]
   11204:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   11208:	68fb      	ldr	r3, [r7, #12]
   1120a:	681b      	ldr	r3, [r3, #0]
   1120c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11210:	68fa      	ldr	r2, [r7, #12]
   11212:	6812      	ldr	r2, [r2, #0]
   11214:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
   11218:	68f9      	ldr	r1, [r7, #12]
   1121a:	6809      	ldr	r1, [r1, #0]
   1121c:	f8d1 1084 	ldr.w	r1, [r1, #132]	; 0x84
   11220:	2400      	movs	r4, #0
   11222:	730c      	strb	r4, [r1, #12]
   11224:	7b09      	ldrb	r1, [r1, #12]
   11226:	72d1      	strb	r1, [r2, #11]
   11228:	7ad2      	ldrb	r2, [r2, #11]
   1122a:	729a      	strb	r2, [r3, #10]
   1122c:	7a9b      	ldrb	r3, [r3, #10]
   1122e:	7243      	strb	r3, [r0, #9]

        /* Is abort from client? */
        if((SDO->CANrxNew) && (SDO->CANrxData[0] == CCS_ABORT)){
   11230:	68fb      	ldr	r3, [r7, #12]
   11232:	681b      	ldr	r3, [r3, #0]
   11234:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
   11238:	2b00      	cmp	r3, #0
   1123a:	d012      	beq.n	11262 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x146>
   1123c:	68fb      	ldr	r3, [r7, #12]
   1123e:	681b      	ldr	r3, [r3, #0]
   11240:	781b      	ldrb	r3, [r3, #0]
   11242:	2b04      	cmp	r3, #4
   11244:	d10d      	bne.n	11262 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x146>
            SDO->state = CO_SDO_ST_IDLE;
   11246:	68fb      	ldr	r3, [r7, #12]
   11248:	681b      	ldr	r3, [r3, #0]
   1124a:	2200      	movs	r2, #0
   1124c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            SDO->CANrxNew = false;
   11250:	68fb      	ldr	r3, [r7, #12]
   11252:	681b      	ldr	r3, [r3, #0]
   11254:	2200      	movs	r2, #0
   11256:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
            return -1;
   1125a:	f04f 33ff 	mov.w	r3, #4294967295
   1125e:	f001 b8f3 	b.w	12448 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
        }

        /* continue with previous SDO communication or start new */
        if(SDO->state != CO_SDO_ST_IDLE){
   11262:	68fb      	ldr	r3, [r7, #12]
   11264:	681b      	ldr	r3, [r3, #0]
   11266:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   1126a:	2b00      	cmp	r3, #0
   1126c:	d006      	beq.n	1127c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x160>
            state = SDO->state;
   1126e:	68fb      	ldr	r3, [r7, #12]
   11270:	681b      	ldr	r3, [r3, #0]
   11272:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   11276:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   1127a:	e084      	b.n	11386 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x26a>
        else{
            uint32_t abortCode;
            uint32_t index;
			
            /* Is client command specifier valid */
            if((CCS != CCS_DOWNLOAD_INITIATE) && (CCS != CCS_UPLOAD_INITIATE) &&
   1127c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   11280:	2b01      	cmp	r3, #1
   11282:	d015      	beq.n	112b0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x194>
   11284:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   11288:	2b02      	cmp	r3, #2
   1128a:	d011      	beq.n	112b0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x194>
   1128c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   11290:	2b06      	cmp	r3, #6
   11292:	d00d      	beq.n	112b0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x194>
                (CCS != CCS_DOWNLOAD_BLOCK) && (CCS != CCS_UPLOAD_BLOCK)){
   11294:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   11298:	2b05      	cmp	r3, #5
   1129a:	d009      	beq.n	112b0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x194>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
   1129c:	68fb      	ldr	r3, [r7, #12]
   1129e:	681b      	ldr	r3, [r3, #0]
   112a0:	4992      	ldr	r1, [pc, #584]	; (114ec <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3d0>)
   112a2:	4618      	mov	r0, r3
   112a4:	4b92      	ldr	r3, [pc, #584]	; (114f0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3d4>)
   112a6:	4798      	blx	r3
                return -1;
   112a8:	f04f 33ff 	mov.w	r3, #4294967295
   112ac:	f001 b8cc 	b.w	12448 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            /* init ODF_arg */
            index = SDO->CANrxData[2];
   112b0:	68fb      	ldr	r3, [r7, #12]
   112b2:	681b      	ldr	r3, [r3, #0]
   112b4:	789b      	ldrb	r3, [r3, #2]
   112b6:	633b      	str	r3, [r7, #48]	; 0x30
            index = index << 8 | SDO->CANrxData[1];
   112b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   112ba:	021b      	lsls	r3, r3, #8
   112bc:	68fa      	ldr	r2, [r7, #12]
   112be:	6812      	ldr	r2, [r2, #0]
   112c0:	7852      	ldrb	r2, [r2, #1]
   112c2:	4313      	orrs	r3, r2
   112c4:	633b      	str	r3, [r7, #48]	; 0x30
            abortCode = CO_SDO_initTransfer( index, SDO->CANrxData[3]);
   112c6:	68fb      	ldr	r3, [r7, #12]
   112c8:	681b      	ldr	r3, [r3, #0]
   112ca:	78db      	ldrb	r3, [r3, #3]
   112cc:	461a      	mov	r2, r3
   112ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
   112d0:	68f8      	ldr	r0, [r7, #12]
   112d2:	4b88      	ldr	r3, [pc, #544]	; (114f4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3d8>)
   112d4:	4798      	blx	r3
   112d6:	62f8      	str	r0, [r7, #44]	; 0x2c
            if(abortCode != 0U){
   112d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   112da:	2b00      	cmp	r3, #0
   112dc:	d009      	beq.n	112f2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1d6>
                CO_SDO_abort(SDO, abortCode);
   112de:	68fb      	ldr	r3, [r7, #12]
   112e0:	681b      	ldr	r3, [r3, #0]
   112e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   112e4:	4618      	mov	r0, r3
   112e6:	4b82      	ldr	r3, [pc, #520]	; (114f0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3d4>)
   112e8:	4798      	blx	r3
                return -1;
   112ea:	f04f 33ff 	mov.w	r3, #4294967295
   112ee:	f001 b8ab 	b.w	12448 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            /* download */
            if((CCS == CCS_DOWNLOAD_INITIATE) || (CCS == CCS_DOWNLOAD_BLOCK)){
   112f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   112f6:	2b01      	cmp	r3, #1
   112f8:	d003      	beq.n	11302 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1e6>
   112fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   112fe:	2b06      	cmp	r3, #6
   11300:	d11c      	bne.n	1133c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x220>
                if((SDO->ODF_arg.attribute & CO_ODA_WRITEABLE) == 0U){
   11302:	68fb      	ldr	r3, [r7, #12]
   11304:	681b      	ldr	r3, [r3, #0]
   11306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   11308:	f003 0308 	and.w	r3, r3, #8
   1130c:	2b00      	cmp	r3, #0
   1130e:	d109      	bne.n	11324 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x208>
                    CO_SDO_abort(SDO, CO_SDO_AB_READONLY); /* attempt to write a read-only object */
   11310:	68fb      	ldr	r3, [r7, #12]
   11312:	681b      	ldr	r3, [r3, #0]
   11314:	4978      	ldr	r1, [pc, #480]	; (114f8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3dc>)
   11316:	4618      	mov	r0, r3
   11318:	4b75      	ldr	r3, [pc, #468]	; (114f0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3d4>)
   1131a:	4798      	blx	r3
                    return -1;
   1131c:	f04f 33ff 	mov.w	r3, #4294967295
   11320:	f001 b892 	b.w	12448 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                }

                /* set state machine to normal or block download */
                if(CCS == CCS_DOWNLOAD_INITIATE){
   11324:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   11328:	2b01      	cmp	r3, #1
   1132a:	d103      	bne.n	11334 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x218>
                    state = CO_SDO_ST_DOWNLOAD_INITIATE;
   1132c:	2311      	movs	r3, #17
   1132e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                if(CCS == CCS_DOWNLOAD_INITIATE){
   11332:	e028      	b.n	11386 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x26a>
                }
                else{
                    state = CO_SDO_ST_DOWNLOAD_BL_INITIATE;
   11334:	2314      	movs	r3, #20
   11336:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                if(CCS == CCS_DOWNLOAD_INITIATE){
   1133a:	e024      	b.n	11386 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x26a>
                }
            }

            /* upload */
            else{
                abortCode = CO_SDO_readOD( CO_SDO_BUFFER_SIZE);
   1133c:	2120      	movs	r1, #32
   1133e:	68f8      	ldr	r0, [r7, #12]
   11340:	4b6e      	ldr	r3, [pc, #440]	; (114fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3e0>)
   11342:	4798      	blx	r3
   11344:	62f8      	str	r0, [r7, #44]	; 0x2c
                if(abortCode != 0U){
   11346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11348:	2b00      	cmp	r3, #0
   1134a:	d009      	beq.n	11360 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x244>
                    CO_SDO_abort(SDO, abortCode);
   1134c:	68fb      	ldr	r3, [r7, #12]
   1134e:	681b      	ldr	r3, [r3, #0]
   11350:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   11352:	4618      	mov	r0, r3
   11354:	4b66      	ldr	r3, [pc, #408]	; (114f0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3d4>)
   11356:	4798      	blx	r3
                    return -1;
   11358:	f04f 33ff 	mov.w	r3, #4294967295
   1135c:	f001 b874 	b.w	12448 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                }

                /* if data size is large enough set state machine to block upload, otherwise set to normal transfer */
                if((CCS == CCS_UPLOAD_BLOCK) && (SDO->ODF_arg.dataLength > SDO->CANrxData[5])){
   11360:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   11364:	2b05      	cmp	r3, #5
   11366:	d10b      	bne.n	11380 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x264>
   11368:	68fb      	ldr	r3, [r7, #12]
   1136a:	681b      	ldr	r3, [r3, #0]
   1136c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1136e:	68fa      	ldr	r2, [r7, #12]
   11370:	6812      	ldr	r2, [r2, #0]
   11372:	7952      	ldrb	r2, [r2, #5]
   11374:	4293      	cmp	r3, r2
   11376:	d903      	bls.n	11380 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x264>
                    state = CO_SDO_ST_UPLOAD_BL_INITIATE;
   11378:	2324      	movs	r3, #36	; 0x24
   1137a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   1137e:	e002      	b.n	11386 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x26a>
                }
                else{
                    state = CO_SDO_ST_UPLOAD_INITIATE;
   11380:	2321      	movs	r3, #33	; 0x21
   11382:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            }
        }
    }

    /* verify SDO timeout */
    if(SDO->timeoutTimer < SDOtimeoutTime){
   11386:	68fb      	ldr	r3, [r7, #12]
   11388:	681b      	ldr	r3, [r3, #0]
   1138a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   1138c:	683b      	ldr	r3, [r7, #0]
   1138e:	429a      	cmp	r2, r3
   11390:	d207      	bcs.n	113a2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x286>
        SDO->timeoutTimer += timeDifference_ms;
   11392:	68fb      	ldr	r3, [r7, #12]
   11394:	681b      	ldr	r3, [r3, #0]
   11396:	68fa      	ldr	r2, [r7, #12]
   11398:	6812      	ldr	r2, [r2, #0]
   1139a:	6ed1      	ldr	r1, [r2, #108]	; 0x6c
   1139c:	687a      	ldr	r2, [r7, #4]
   1139e:	440a      	add	r2, r1
   113a0:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    if(SDO->timeoutTimer >= SDOtimeoutTime){
   113a2:	68fb      	ldr	r3, [r7, #12]
   113a4:	681b      	ldr	r3, [r3, #0]
   113a6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   113a8:	683b      	ldr	r3, [r7, #0]
   113aa:	429a      	cmp	r2, r3
   113ac:	d329      	bcc.n	11402 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2e6>
        if((SDO->state == CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK) && (SDO->sequence != 0) && (!SDO->CANtxBuff->bufferFull)){
   113ae:	68fb      	ldr	r3, [r7, #12]
   113b0:	681b      	ldr	r3, [r3, #0]
   113b2:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   113b6:	2b15      	cmp	r3, #21
   113b8:	d10f      	bne.n	113da <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2be>
   113ba:	68fb      	ldr	r3, [r7, #12]
   113bc:	681b      	ldr	r3, [r3, #0]
   113be:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   113c2:	2b00      	cmp	r3, #0
   113c4:	d009      	beq.n	113da <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2be>
   113c6:	68fb      	ldr	r3, [r7, #12]
   113c8:	681b      	ldr	r3, [r3, #0]
   113ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   113ce:	7b5b      	ldrb	r3, [r3, #13]
   113d0:	b2db      	uxtb	r3, r3
   113d2:	2b00      	cmp	r3, #0
   113d4:	d101      	bne.n	113da <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2be>
   113d6:	2301      	movs	r3, #1
   113d8:	e000      	b.n	113dc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>
   113da:	2300      	movs	r3, #0
   113dc:	2b00      	cmp	r3, #0
   113de:	d006      	beq.n	113ee <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2d2>
            timeoutSubblockDownolad = true;
   113e0:	2301      	movs	r3, #1
   113e2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
            state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
   113e6:	2316      	movs	r3, #22
   113e8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   113ec:	e009      	b.n	11402 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2e6>
        }
        else{
            CO_SDO_abort(SDO, CO_SDO_AB_TIMEOUT); /* SDO protocol timed out */
   113ee:	68fb      	ldr	r3, [r7, #12]
   113f0:	681b      	ldr	r3, [r3, #0]
   113f2:	4943      	ldr	r1, [pc, #268]	; (11500 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3e4>)
   113f4:	4618      	mov	r0, r3
   113f6:	4b3e      	ldr	r3, [pc, #248]	; (114f0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3d4>)
   113f8:	4798      	blx	r3
            return -1;
   113fa:	f04f 33ff 	mov.w	r3, #4294967295
   113fe:	f001 b823 	b.w	12448 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
        }
    }

    /* return immediately if still idle */
    if(state == CO_SDO_ST_IDLE){
   11402:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   11406:	2b00      	cmp	r3, #0
   11408:	d102      	bne.n	11410 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2f4>
        return 0;
   1140a:	2300      	movs	r3, #0
   1140c:	f001 b81c 	b.w	12448 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
    }

    /* state machine (buffer is freed (SDO->CANrxNew = 0;) at the end) */
    switch(state){
   11410:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   11414:	3b11      	subs	r3, #17
   11416:	2b16      	cmp	r3, #22
   11418:	f200 87f0 	bhi.w	123fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12e0>
   1141c:	a201      	add	r2, pc, #4	; (adr r2, 11424 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x308>)
   1141e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   11422:	bf00      	nop
   11424:	00011481 	.word	0x00011481
   11428:	000115fb 	.word	0x000115fb
   1142c:	000123fd 	.word	0x000123fd
   11430:	0001179b 	.word	0x0001179b
   11434:	0001240f 	.word	0x0001240f
   11438:	000118cd 	.word	0x000118cd
   1143c:	00011a2d 	.word	0x00011a2d
   11440:	000123fd 	.word	0x000123fd
   11444:	000123fd 	.word	0x000123fd
   11448:	000123fd 	.word	0x000123fd
   1144c:	000123fd 	.word	0x000123fd
   11450:	000123fd 	.word	0x000123fd
   11454:	000123fd 	.word	0x000123fd
   11458:	000123fd 	.word	0x000123fd
   1145c:	000123fd 	.word	0x000123fd
   11460:	000123fd 	.word	0x000123fd
   11464:	00011b49 	.word	0x00011b49
   11468:	00011c55 	.word	0x00011c55
   1146c:	000123fd 	.word	0x000123fd
   11470:	00011e8d 	.word	0x00011e8d
   11474:	00011fd9 	.word	0x00011fd9
   11478:	00012029 	.word	0x00012029
   1147c:	000123d1 	.word	0x000123d1
        uint32_t len, i;
        bool_t lastSegmentInSubblock;

        case CO_SDO_ST_DOWNLOAD_INITIATE:{
            /* default response */
            SDO->CANtxBuff->data[0] = 0x60;
   11480:	68fb      	ldr	r3, [r7, #12]
   11482:	681b      	ldr	r3, [r3, #0]
   11484:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11488:	2260      	movs	r2, #96	; 0x60
   1148a:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = SDO->CANrxData[1];
   1148c:	68fb      	ldr	r3, [r7, #12]
   1148e:	681b      	ldr	r3, [r3, #0]
   11490:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11494:	68fa      	ldr	r2, [r7, #12]
   11496:	6812      	ldr	r2, [r2, #0]
   11498:	7852      	ldrb	r2, [r2, #1]
   1149a:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = SDO->CANrxData[2];
   1149c:	68fb      	ldr	r3, [r7, #12]
   1149e:	681b      	ldr	r3, [r3, #0]
   114a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   114a4:	68fa      	ldr	r2, [r7, #12]
   114a6:	6812      	ldr	r2, [r2, #0]
   114a8:	7892      	ldrb	r2, [r2, #2]
   114aa:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->CANrxData[3];
   114ac:	68fb      	ldr	r3, [r7, #12]
   114ae:	681b      	ldr	r3, [r3, #0]
   114b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   114b4:	68fa      	ldr	r2, [r7, #12]
   114b6:	6812      	ldr	r2, [r2, #0]
   114b8:	78d2      	ldrb	r2, [r2, #3]
   114ba:	721a      	strb	r2, [r3, #8]

            /* Expedited transfer */
            if((SDO->CANrxData[0] & 0x02U) != 0U){
   114bc:	68fb      	ldr	r3, [r7, #12]
   114be:	681b      	ldr	r3, [r3, #0]
   114c0:	781b      	ldrb	r3, [r3, #0]
   114c2:	f003 0302 	and.w	r3, r3, #2
   114c6:	2b00      	cmp	r3, #0
   114c8:	d05b      	beq.n	11582 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x466>
                /* is size indicated? Get message length */
                if((SDO->CANrxData[0] & 0x01U) != 0U){
   114ca:	68fb      	ldr	r3, [r7, #12]
   114cc:	681b      	ldr	r3, [r3, #0]
   114ce:	781b      	ldrb	r3, [r3, #0]
   114d0:	f003 0301 	and.w	r3, r3, #1
   114d4:	2b00      	cmp	r3, #0
   114d6:	d015      	beq.n	11504 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3e8>
                    len = 4U - ((SDO->CANrxData[0] >> 2U) & 0x03U);
   114d8:	68fb      	ldr	r3, [r7, #12]
   114da:	681b      	ldr	r3, [r3, #0]
   114dc:	781b      	ldrb	r3, [r3, #0]
   114de:	109b      	asrs	r3, r3, #2
   114e0:	f003 0303 	and.w	r3, r3, #3
   114e4:	f1c3 0304 	rsb	r3, r3, #4
   114e8:	643b      	str	r3, [r7, #64]	; 0x40
   114ea:	e00f      	b.n	1150c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3f0>
   114ec:	05040001 	.word	0x05040001
   114f0:	00011091 	.word	0x00011091
   114f4:	00010cad 	.word	0x00010cad
   114f8:	06010002 	.word	0x06010002
   114fc:	00010e3d 	.word	0x00010e3d
   11500:	05040000 	.word	0x05040000
                }
                else{
                    len = SDO->ODF_arg.dataLength;
   11504:	68fb      	ldr	r3, [r7, #12]
   11506:	681b      	ldr	r3, [r3, #0]
   11508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1150a:	643b      	str	r3, [r7, #64]	; 0x40
                }

                /* copy data to SDO buffer */
                SDO->ODF_arg.data[0] = SDO->CANrxData[4];
   1150c:	68fb      	ldr	r3, [r7, #12]
   1150e:	681b      	ldr	r3, [r3, #0]
   11510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   11512:	68fa      	ldr	r2, [r7, #12]
   11514:	6812      	ldr	r2, [r2, #0]
   11516:	7912      	ldrb	r2, [r2, #4]
   11518:	701a      	strb	r2, [r3, #0]
                SDO->ODF_arg.data[1] = SDO->CANrxData[5];
   1151a:	68fb      	ldr	r3, [r7, #12]
   1151c:	681b      	ldr	r3, [r3, #0]
   1151e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   11520:	3301      	adds	r3, #1
   11522:	68fa      	ldr	r2, [r7, #12]
   11524:	6812      	ldr	r2, [r2, #0]
   11526:	7952      	ldrb	r2, [r2, #5]
   11528:	701a      	strb	r2, [r3, #0]
                SDO->ODF_arg.data[2] = SDO->CANrxData[6];
   1152a:	68fb      	ldr	r3, [r7, #12]
   1152c:	681b      	ldr	r3, [r3, #0]
   1152e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   11530:	3302      	adds	r3, #2
   11532:	68fa      	ldr	r2, [r7, #12]
   11534:	6812      	ldr	r2, [r2, #0]
   11536:	7992      	ldrb	r2, [r2, #6]
   11538:	701a      	strb	r2, [r3, #0]
                SDO->ODF_arg.data[3] = SDO->CANrxData[7];
   1153a:	68fb      	ldr	r3, [r7, #12]
   1153c:	681b      	ldr	r3, [r3, #0]
   1153e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   11540:	3303      	adds	r3, #3
   11542:	68fa      	ldr	r2, [r7, #12]
   11544:	6812      	ldr	r2, [r2, #0]
   11546:	79d2      	ldrb	r2, [r2, #7]
   11548:	701a      	strb	r2, [r3, #0]

                /* write data to the Object dictionary */
                abortCode = CO_SDO_writeOD( len);
   1154a:	6c39      	ldr	r1, [r7, #64]	; 0x40
   1154c:	68f8      	ldr	r0, [r7, #12]
   1154e:	4b9b      	ldr	r3, [pc, #620]	; (117bc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a0>)
   11550:	4798      	blx	r3
   11552:	62b8      	str	r0, [r7, #40]	; 0x28
                if(abortCode != 0U){
   11554:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11556:	2b00      	cmp	r3, #0
   11558:	d009      	beq.n	1156e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x452>
                    CO_SDO_abort(SDO, abortCode);
   1155a:	68fb      	ldr	r3, [r7, #12]
   1155c:	681b      	ldr	r3, [r3, #0]
   1155e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   11560:	4618      	mov	r0, r3
   11562:	4b97      	ldr	r3, [pc, #604]	; (117c0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a4>)
   11564:	4798      	blx	r3
                    return -1;
   11566:	f04f 33ff 	mov.w	r3, #4294967295
   1156a:	f000 bf6d 	b.w	12448 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                }

                /* finish the communication */
                SDO->state = CO_SDO_ST_IDLE;
   1156e:	68fb      	ldr	r3, [r7, #12]
   11570:	681b      	ldr	r3, [r3, #0]
   11572:	2200      	movs	r2, #0
   11574:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                sendResponse = true;
   11578:	2301      	movs	r3, #1
   1157a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                SDO->bufferOffset = 0;
                SDO->sequence = 0;
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENTED;
                sendResponse = true;
            }
            break;
   1157e:	f000 bf47 	b.w	12410 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
                if((SDO->CANrxData[0]&0x01) != 0){
   11582:	68fb      	ldr	r3, [r7, #12]
   11584:	681b      	ldr	r3, [r3, #0]
   11586:	781b      	ldrb	r3, [r3, #0]
   11588:	f003 0301 	and.w	r3, r3, #1
   1158c:	2b00      	cmp	r3, #0
   1158e:	d021      	beq.n	115d4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x4b8>
                    CO_memcpySwap4(&lenRx, &SDO->CANrxData[4]);
   11590:	68fb      	ldr	r3, [r7, #12]
   11592:	681b      	ldr	r3, [r3, #0]
   11594:	1d1a      	adds	r2, r3, #4
   11596:	f107 0320 	add.w	r3, r7, #32
   1159a:	4619      	mov	r1, r3
   1159c:	68f8      	ldr	r0, [r7, #12]
   1159e:	4b89      	ldr	r3, [pc, #548]	; (117c4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a8>)
   115a0:	4798      	blx	r3
                    SDO->ODF_arg.dataLengthTotal = lenRx;
   115a2:	68fb      	ldr	r3, [r7, #12]
   115a4:	681b      	ldr	r3, [r3, #0]
   115a6:	6a3a      	ldr	r2, [r7, #32]
   115a8:	661a      	str	r2, [r3, #96]	; 0x60
                    if((lenRx != SDO->ODF_arg.dataLength) && (SDO->ODF_arg.ODdataStorage != 0)){
   115aa:	68fb      	ldr	r3, [r7, #12]
   115ac:	681b      	ldr	r3, [r3, #0]
   115ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   115b0:	6a3b      	ldr	r3, [r7, #32]
   115b2:	429a      	cmp	r2, r3
   115b4:	d00e      	beq.n	115d4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x4b8>
   115b6:	68fb      	ldr	r3, [r7, #12]
   115b8:	681b      	ldr	r3, [r3, #0]
   115ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   115bc:	2b00      	cmp	r3, #0
   115be:	d009      	beq.n	115d4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x4b8>
                        CO_SDO_abort(SDO, CO_SDO_AB_TYPE_MISMATCH);  /* Length of service parameter does not match */
   115c0:	68fb      	ldr	r3, [r7, #12]
   115c2:	681b      	ldr	r3, [r3, #0]
   115c4:	4980      	ldr	r1, [pc, #512]	; (117c8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6ac>)
   115c6:	4618      	mov	r0, r3
   115c8:	4b7d      	ldr	r3, [pc, #500]	; (117c0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a4>)
   115ca:	4798      	blx	r3
                        return -1;
   115cc:	f04f 33ff 	mov.w	r3, #4294967295
   115d0:	f000 bf3a 	b.w	12448 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                SDO->bufferOffset = 0;
   115d4:	68fb      	ldr	r3, [r7, #12]
   115d6:	681b      	ldr	r3, [r3, #0]
   115d8:	2200      	movs	r2, #0
   115da:	639a      	str	r2, [r3, #56]	; 0x38
                SDO->sequence = 0;
   115dc:	68fb      	ldr	r3, [r7, #12]
   115de:	681b      	ldr	r3, [r3, #0]
   115e0:	2200      	movs	r2, #0
   115e2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENTED;
   115e6:	68fb      	ldr	r3, [r7, #12]
   115e8:	681b      	ldr	r3, [r3, #0]
   115ea:	2212      	movs	r2, #18
   115ec:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                sendResponse = true;
   115f0:	2301      	movs	r3, #1
   115f2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
   115f6:	f000 bf0b 	b.w	12410 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
        }

        case CO_SDO_ST_DOWNLOAD_SEGMENTED:{
            /* verify client command specifier */
            if((SDO->CANrxData[0]&0xE0) != 0x00U){
   115fa:	68fb      	ldr	r3, [r7, #12]
   115fc:	681b      	ldr	r3, [r3, #0]
   115fe:	781b      	ldrb	r3, [r3, #0]
   11600:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
   11604:	2b00      	cmp	r3, #0
   11606:	d009      	beq.n	1161c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x500>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
   11608:	68fb      	ldr	r3, [r7, #12]
   1160a:	681b      	ldr	r3, [r3, #0]
   1160c:	496f      	ldr	r1, [pc, #444]	; (117cc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6b0>)
   1160e:	4618      	mov	r0, r3
   11610:	4b6b      	ldr	r3, [pc, #428]	; (117c0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a4>)
   11612:	4798      	blx	r3
                return -1;
   11614:	f04f 33ff 	mov.w	r3, #4294967295
   11618:	f000 bf16 	b.w	12448 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            /* verify toggle bit */
            i = (SDO->CANrxData[0]&0x10U) ? 1U : 0U;
   1161c:	68fb      	ldr	r3, [r7, #12]
   1161e:	681b      	ldr	r3, [r3, #0]
   11620:	781b      	ldrb	r3, [r3, #0]
   11622:	f003 0310 	and.w	r3, r3, #16
   11626:	2b00      	cmp	r3, #0
   11628:	d001      	beq.n	1162e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x512>
   1162a:	2301      	movs	r3, #1
   1162c:	e000      	b.n	11630 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x514>
   1162e:	2300      	movs	r3, #0
   11630:	63fb      	str	r3, [r7, #60]	; 0x3c
            if(i != SDO->sequence){
   11632:	68fb      	ldr	r3, [r7, #12]
   11634:	681b      	ldr	r3, [r3, #0]
   11636:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   1163a:	461a      	mov	r2, r3
   1163c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1163e:	429a      	cmp	r2, r3
   11640:	d009      	beq.n	11656 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x53a>
                CO_SDO_abort(SDO, CO_SDO_AB_TOGGLE_BIT);/* toggle bit not alternated */
   11642:	68fb      	ldr	r3, [r7, #12]
   11644:	681b      	ldr	r3, [r3, #0]
   11646:	4962      	ldr	r1, [pc, #392]	; (117d0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6b4>)
   11648:	4618      	mov	r0, r3
   1164a:	4b5d      	ldr	r3, [pc, #372]	; (117c0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a4>)
   1164c:	4798      	blx	r3
                return -1;
   1164e:	f04f 33ff 	mov.w	r3, #4294967295
   11652:	f000 bef9 	b.w	12448 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            /* get size of data in message */
            len = 7U - ((SDO->CANrxData[0] >> 1U) & 0x07U);
   11656:	68fb      	ldr	r3, [r7, #12]
   11658:	681b      	ldr	r3, [r3, #0]
   1165a:	781b      	ldrb	r3, [r3, #0]
   1165c:	105b      	asrs	r3, r3, #1
   1165e:	43db      	mvns	r3, r3
   11660:	f003 0307 	and.w	r3, r3, #7
   11664:	643b      	str	r3, [r7, #64]	; 0x40

            /* verify length. Domain data type enables length larger than SDO buffer size */
            if((SDO->bufferOffset + len) > SDO->ODF_arg.dataLength){
   11666:	68fb      	ldr	r3, [r7, #12]
   11668:	681b      	ldr	r3, [r3, #0]
   1166a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1166c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1166e:	441a      	add	r2, r3
   11670:	68fb      	ldr	r3, [r7, #12]
   11672:	681b      	ldr	r3, [r3, #0]
   11674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   11676:	429a      	cmp	r2, r3
   11678:	d930      	bls.n	116dc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x5c0>
                if(SDO->ODF_arg.ODdataStorage != 0){
   1167a:	68fb      	ldr	r3, [r7, #12]
   1167c:	681b      	ldr	r3, [r3, #0]
   1167e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   11680:	2b00      	cmp	r3, #0
   11682:	d009      	beq.n	11698 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>
                    CO_SDO_abort(SDO, CO_SDO_AB_DATA_LONG);  /* Length of service parameter too high */
   11684:	68fb      	ldr	r3, [r7, #12]
   11686:	681b      	ldr	r3, [r3, #0]
   11688:	4952      	ldr	r1, [pc, #328]	; (117d4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6b8>)
   1168a:	4618      	mov	r0, r3
   1168c:	4b4c      	ldr	r3, [pc, #304]	; (117c0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a4>)
   1168e:	4798      	blx	r3
                    return -1;
   11690:	f04f 33ff 	mov.w	r3, #4294967295
   11694:	f000 bed8 	b.w	12448 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                }
                else{
                    /* empty buffer in domain data type */
                    SDO->ODF_arg.lastSegment = false;
   11698:	68fb      	ldr	r3, [r7, #12]
   1169a:	681b      	ldr	r3, [r3, #0]
   1169c:	2200      	movs	r2, #0
   1169e:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
                    abortCode = CO_SDO_writeOD( SDO->bufferOffset);
   116a2:	68fb      	ldr	r3, [r7, #12]
   116a4:	681b      	ldr	r3, [r3, #0]
   116a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   116a8:	4619      	mov	r1, r3
   116aa:	68f8      	ldr	r0, [r7, #12]
   116ac:	4b43      	ldr	r3, [pc, #268]	; (117bc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a0>)
   116ae:	4798      	blx	r3
   116b0:	62b8      	str	r0, [r7, #40]	; 0x28
                    if(abortCode != 0U){
   116b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   116b4:	2b00      	cmp	r3, #0
   116b6:	d009      	beq.n	116cc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x5b0>
                        CO_SDO_abort(SDO, abortCode);
   116b8:	68fb      	ldr	r3, [r7, #12]
   116ba:	681b      	ldr	r3, [r3, #0]
   116bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   116be:	4618      	mov	r0, r3
   116c0:	4b3f      	ldr	r3, [pc, #252]	; (117c0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a4>)
   116c2:	4798      	blx	r3
                        return -1;
   116c4:	f04f 33ff 	mov.w	r3, #4294967295
   116c8:	f000 bebe 	b.w	12448 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                    }

                    SDO->ODF_arg.dataLength = CO_SDO_BUFFER_SIZE;
   116cc:	68fb      	ldr	r3, [r7, #12]
   116ce:	681b      	ldr	r3, [r3, #0]
   116d0:	2220      	movs	r2, #32
   116d2:	64da      	str	r2, [r3, #76]	; 0x4c
                    SDO->bufferOffset = 0;
   116d4:	68fb      	ldr	r3, [r7, #12]
   116d6:	681b      	ldr	r3, [r3, #0]
   116d8:	2200      	movs	r2, #0
   116da:	639a      	str	r2, [r3, #56]	; 0x38
                }
            }

            /* copy data to buffer */
            for(i=0U; i<len; i++)
   116dc:	2300      	movs	r3, #0
   116de:	63fb      	str	r3, [r7, #60]	; 0x3c
   116e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   116e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   116e4:	429a      	cmp	r2, r3
   116e6:	d212      	bcs.n	1170e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x5f2>
                SDO->ODF_arg.data[SDO->bufferOffset++] = SDO->CANrxData[i+1];
   116e8:	68fb      	ldr	r3, [r7, #12]
   116ea:	681b      	ldr	r3, [r3, #0]
   116ec:	6c59      	ldr	r1, [r3, #68]	; 0x44
   116ee:	68fb      	ldr	r3, [r7, #12]
   116f0:	681a      	ldr	r2, [r3, #0]
   116f2:	6b93      	ldr	r3, [r2, #56]	; 0x38
   116f4:	1c58      	adds	r0, r3, #1
   116f6:	6390      	str	r0, [r2, #56]	; 0x38
   116f8:	440b      	add	r3, r1
   116fa:	68fa      	ldr	r2, [r7, #12]
   116fc:	6811      	ldr	r1, [r2, #0]
   116fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   11700:	3201      	adds	r2, #1
   11702:	5c8a      	ldrb	r2, [r1, r2]
   11704:	701a      	strb	r2, [r3, #0]
            for(i=0U; i<len; i++)
   11706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11708:	3301      	adds	r3, #1
   1170a:	63fb      	str	r3, [r7, #60]	; 0x3c
   1170c:	e7e8      	b.n	116e0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x5c4>

            /* If no more segments to be downloaded, write data to the Object dictionary */
            if((SDO->CANrxData[0] & 0x01U) != 0U){
   1170e:	68fb      	ldr	r3, [r7, #12]
   11710:	681b      	ldr	r3, [r3, #0]
   11712:	781b      	ldrb	r3, [r3, #0]
   11714:	f003 0301 	and.w	r3, r3, #1
   11718:	2b00      	cmp	r3, #0
   1171a:	d01e      	beq.n	1175a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x63e>
                SDO->ODF_arg.lastSegment = true;
   1171c:	68fb      	ldr	r3, [r7, #12]
   1171e:	681b      	ldr	r3, [r3, #0]
   11720:	2201      	movs	r2, #1
   11722:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
                abortCode = CO_SDO_writeOD( SDO->bufferOffset);
   11726:	68fb      	ldr	r3, [r7, #12]
   11728:	681b      	ldr	r3, [r3, #0]
   1172a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1172c:	4619      	mov	r1, r3
   1172e:	68f8      	ldr	r0, [r7, #12]
   11730:	4b22      	ldr	r3, [pc, #136]	; (117bc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a0>)
   11732:	4798      	blx	r3
   11734:	62b8      	str	r0, [r7, #40]	; 0x28
                if(abortCode != 0U){
   11736:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11738:	2b00      	cmp	r3, #0
   1173a:	d009      	beq.n	11750 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x634>
                    CO_SDO_abort(SDO, abortCode);
   1173c:	68fb      	ldr	r3, [r7, #12]
   1173e:	681b      	ldr	r3, [r3, #0]
   11740:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   11742:	4618      	mov	r0, r3
   11744:	4b1e      	ldr	r3, [pc, #120]	; (117c0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a4>)
   11746:	4798      	blx	r3
                    return -1;
   11748:	f04f 33ff 	mov.w	r3, #4294967295
   1174c:	f000 be7c 	b.w	12448 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                }

                /* finish */
                SDO->state = CO_SDO_ST_IDLE;
   11750:	68fb      	ldr	r3, [r7, #12]
   11752:	681b      	ldr	r3, [r3, #0]
   11754:	2200      	movs	r2, #0
   11756:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            }

            /* download segment response and alternate toggle bit */
            SDO->CANtxBuff->data[0] = 0x20 | (SDO->sequence ? 0x10 : 0x00);
   1175a:	68fb      	ldr	r3, [r7, #12]
   1175c:	681b      	ldr	r3, [r3, #0]
   1175e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11762:	68fa      	ldr	r2, [r7, #12]
   11764:	6812      	ldr	r2, [r2, #0]
   11766:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
   1176a:	2a00      	cmp	r2, #0
   1176c:	d001      	beq.n	11772 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x656>
   1176e:	2230      	movs	r2, #48	; 0x30
   11770:	e000      	b.n	11774 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x658>
   11772:	2220      	movs	r2, #32
   11774:	715a      	strb	r2, [r3, #5]
            SDO->sequence = (SDO->sequence) ? 0 : 1;
   11776:	68fb      	ldr	r3, [r7, #12]
   11778:	681b      	ldr	r3, [r3, #0]
   1177a:	68fa      	ldr	r2, [r7, #12]
   1177c:	6812      	ldr	r2, [r2, #0]
   1177e:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
   11782:	2a00      	cmp	r2, #0
   11784:	bf0c      	ite	eq
   11786:	2201      	moveq	r2, #1
   11788:	2200      	movne	r2, #0
   1178a:	b2d2      	uxtb	r2, r2
   1178c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
            sendResponse = true;
   11790:	2301      	movs	r3, #1
   11792:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
   11796:	f000 be3b 	b.w	12410 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
        }

        case CO_SDO_ST_DOWNLOAD_BL_INITIATE:{
            /* verify client command specifier and subcommand */
            if((SDO->CANrxData[0]&0xE1U) != 0xC0U){
   1179a:	68fb      	ldr	r3, [r7, #12]
   1179c:	681b      	ldr	r3, [r3, #0]
   1179e:	781b      	ldrb	r3, [r3, #0]
   117a0:	f003 03e1 	and.w	r3, r3, #225	; 0xe1
   117a4:	2bc0      	cmp	r3, #192	; 0xc0
   117a6:	d017      	beq.n	117d8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6bc>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
   117a8:	68fb      	ldr	r3, [r7, #12]
   117aa:	681b      	ldr	r3, [r3, #0]
   117ac:	4907      	ldr	r1, [pc, #28]	; (117cc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6b0>)
   117ae:	4618      	mov	r0, r3
   117b0:	4b03      	ldr	r3, [pc, #12]	; (117c0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a4>)
   117b2:	4798      	blx	r3
                return -1;
   117b4:	f04f 33ff 	mov.w	r3, #4294967295
   117b8:	f000 be46 	b.w	12448 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
   117bc:	00010f5d 	.word	0x00010f5d
   117c0:	00011091 	.word	0x00011091
   117c4:	0001056d 	.word	0x0001056d
   117c8:	06070010 	.word	0x06070010
   117cc:	05040001 	.word	0x05040001
   117d0:	05030000 	.word	0x05030000
   117d4:	06070012 	.word	0x06070012
            }

            /* prepare response */
            SDO->CANtxBuff->data[0] = 0xA4;
   117d8:	68fb      	ldr	r3, [r7, #12]
   117da:	681b      	ldr	r3, [r3, #0]
   117dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   117e0:	22a4      	movs	r2, #164	; 0xa4
   117e2:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = SDO->CANrxData[1];
   117e4:	68fb      	ldr	r3, [r7, #12]
   117e6:	681b      	ldr	r3, [r3, #0]
   117e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   117ec:	68fa      	ldr	r2, [r7, #12]
   117ee:	6812      	ldr	r2, [r2, #0]
   117f0:	7852      	ldrb	r2, [r2, #1]
   117f2:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = SDO->CANrxData[2];
   117f4:	68fb      	ldr	r3, [r7, #12]
   117f6:	681b      	ldr	r3, [r3, #0]
   117f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   117fc:	68fa      	ldr	r2, [r7, #12]
   117fe:	6812      	ldr	r2, [r2, #0]
   11800:	7892      	ldrb	r2, [r2, #2]
   11802:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->CANrxData[3];
   11804:	68fb      	ldr	r3, [r7, #12]
   11806:	681b      	ldr	r3, [r3, #0]
   11808:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   1180c:	68fa      	ldr	r2, [r7, #12]
   1180e:	6812      	ldr	r2, [r2, #0]
   11810:	78d2      	ldrb	r2, [r2, #3]
   11812:	721a      	strb	r2, [r3, #8]

            /* blksize */
            SDO->blksize = (CO_SDO_BUFFER_SIZE > (7*127)) ? 127 : (CO_SDO_BUFFER_SIZE / 7);
   11814:	68fb      	ldr	r3, [r7, #12]
   11816:	681b      	ldr	r3, [r3, #0]
   11818:	2204      	movs	r2, #4
   1181a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
            SDO->CANtxBuff->data[4] = SDO->blksize;
   1181e:	68fb      	ldr	r3, [r7, #12]
   11820:	681b      	ldr	r3, [r3, #0]
   11822:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11826:	68fa      	ldr	r2, [r7, #12]
   11828:	6812      	ldr	r2, [r2, #0]
   1182a:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
   1182e:	725a      	strb	r2, [r3, #9]

            /* is CRC enabled */
            SDO->crcEnabled = (SDO->CANrxData[0] & 0x04) ? true : false;
   11830:	68fb      	ldr	r3, [r7, #12]
   11832:	681b      	ldr	r3, [r3, #0]
   11834:	68fa      	ldr	r2, [r7, #12]
   11836:	6812      	ldr	r2, [r2, #0]
   11838:	7812      	ldrb	r2, [r2, #0]
   1183a:	f002 0204 	and.w	r2, r2, #4
   1183e:	2a00      	cmp	r2, #0
   11840:	bf14      	ite	ne
   11842:	2201      	movne	r2, #1
   11844:	2200      	moveq	r2, #0
   11846:	b2d2      	uxtb	r2, r2
   11848:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
            SDO->crc = 0;
   1184c:	68fb      	ldr	r3, [r7, #12]
   1184e:	681b      	ldr	r3, [r3, #0]
   11850:	2200      	movs	r2, #0
   11852:	675a      	str	r2, [r3, #116]	; 0x74

            /* verify length if size is indicated */
            if((SDO->CANrxData[0]&0x02) != 0U){
   11854:	68fb      	ldr	r3, [r7, #12]
   11856:	681b      	ldr	r3, [r3, #0]
   11858:	781b      	ldrb	r3, [r3, #0]
   1185a:	f003 0302 	and.w	r3, r3, #2
   1185e:	2b00      	cmp	r3, #0
   11860:	d021      	beq.n	118a6 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x78a>
                uint32_t lenRx;
                CO_memcpySwap4(&lenRx, &SDO->CANrxData[4]);
   11862:	68fb      	ldr	r3, [r7, #12]
   11864:	681b      	ldr	r3, [r3, #0]
   11866:	1d1a      	adds	r2, r3, #4
   11868:	f107 031c 	add.w	r3, r7, #28
   1186c:	4619      	mov	r1, r3
   1186e:	68f8      	ldr	r0, [r7, #12]
   11870:	4b96      	ldr	r3, [pc, #600]	; (11acc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9b0>)
   11872:	4798      	blx	r3
                SDO->ODF_arg.dataLengthTotal = lenRx;
   11874:	68fb      	ldr	r3, [r7, #12]
   11876:	681b      	ldr	r3, [r3, #0]
   11878:	69fa      	ldr	r2, [r7, #28]
   1187a:	661a      	str	r2, [r3, #96]	; 0x60

                /* verify length except for domain data type */
                if((lenRx != SDO->ODF_arg.dataLength) && (SDO->ODF_arg.ODdataStorage != 0)){
   1187c:	68fb      	ldr	r3, [r7, #12]
   1187e:	681b      	ldr	r3, [r3, #0]
   11880:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   11882:	69fb      	ldr	r3, [r7, #28]
   11884:	429a      	cmp	r2, r3
   11886:	d00e      	beq.n	118a6 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x78a>
   11888:	68fb      	ldr	r3, [r7, #12]
   1188a:	681b      	ldr	r3, [r3, #0]
   1188c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1188e:	2b00      	cmp	r3, #0
   11890:	d009      	beq.n	118a6 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x78a>
                    CO_SDO_abort(SDO, CO_SDO_AB_TYPE_MISMATCH);  /* Length of service parameter does not match */
   11892:	68fb      	ldr	r3, [r7, #12]
   11894:	681b      	ldr	r3, [r3, #0]
   11896:	498e      	ldr	r1, [pc, #568]	; (11ad0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9b4>)
   11898:	4618      	mov	r0, r3
   1189a:	4b8e      	ldr	r3, [pc, #568]	; (11ad4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9b8>)
   1189c:	4798      	blx	r3
                    return -1;
   1189e:	f04f 33ff 	mov.w	r3, #4294967295
   118a2:	f000 bdd1 	b.w	12448 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                }
            }

            SDO->bufferOffset = 0;
   118a6:	68fb      	ldr	r3, [r7, #12]
   118a8:	681b      	ldr	r3, [r3, #0]
   118aa:	2200      	movs	r2, #0
   118ac:	639a      	str	r2, [r3, #56]	; 0x38
            SDO->sequence = 0;
   118ae:	68fb      	ldr	r3, [r7, #12]
   118b0:	681b      	ldr	r3, [r3, #0]
   118b2:	2200      	movs	r2, #0
   118b4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
            SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK;
   118b8:	68fb      	ldr	r3, [r7, #12]
   118ba:	681b      	ldr	r3, [r3, #0]
   118bc:	2215      	movs	r2, #21
   118be:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

            /* send response */
            sendResponse = true;
   118c2:	2301      	movs	r3, #1
   118c4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
   118c8:	f000 bda2 	b.w	12410 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
        }

        case CO_SDO_ST_DOWNLOAD_BL_SUB_RESP:{
            /* no new message received, SDO timeout occured, try to response */
            lastSegmentInSubblock = (!timeoutSubblockDownolad &&
                        ((SDO->CANrxData[0] & 0x80U) == 0x80U)) ? true : false;
   118cc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   118d0:	2b00      	cmp	r3, #0
   118d2:	d107      	bne.n	118e4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7c8>
   118d4:	68fb      	ldr	r3, [r7, #12]
   118d6:	681b      	ldr	r3, [r3, #0]
   118d8:	781b      	ldrb	r3, [r3, #0]
   118da:	b25b      	sxtb	r3, r3
   118dc:	2b00      	cmp	r3, #0
   118de:	da01      	bge.n	118e4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7c8>
   118e0:	2301      	movs	r3, #1
   118e2:	e000      	b.n	118e6 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7ca>
   118e4:	2300      	movs	r3, #0
            lastSegmentInSubblock = (!timeoutSubblockDownolad &&
   118e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            /* prepare response */
            SDO->CANtxBuff->data[0] = 0xA2;
   118ea:	68fb      	ldr	r3, [r7, #12]
   118ec:	681b      	ldr	r3, [r3, #0]
   118ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   118f2:	22a2      	movs	r2, #162	; 0xa2
   118f4:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = SDO->sequence;
   118f6:	68fb      	ldr	r3, [r7, #12]
   118f8:	681b      	ldr	r3, [r3, #0]
   118fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   118fe:	68fa      	ldr	r2, [r7, #12]
   11900:	6812      	ldr	r2, [r2, #0]
   11902:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
   11906:	719a      	strb	r2, [r3, #6]
            SDO->sequence = 0;
   11908:	68fb      	ldr	r3, [r7, #12]
   1190a:	681b      	ldr	r3, [r3, #0]
   1190c:	2200      	movs	r2, #0
   1190e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

            /* empty buffer in domain data type if not last segment */
            if((SDO->ODF_arg.ODdataStorage == 0) && (SDO->bufferOffset != 0) && !lastSegmentInSubblock){
   11912:	68fb      	ldr	r3, [r7, #12]
   11914:	681b      	ldr	r3, [r3, #0]
   11916:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   11918:	2b00      	cmp	r3, #0
   1191a:	d141      	bne.n	119a0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x884>
   1191c:	68fb      	ldr	r3, [r7, #12]
   1191e:	681b      	ldr	r3, [r3, #0]
   11920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   11922:	2b00      	cmp	r3, #0
   11924:	d03c      	beq.n	119a0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x884>
   11926:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   1192a:	2b00      	cmp	r3, #0
   1192c:	d138      	bne.n	119a0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x884>
                /* calculate CRC on next bytes, if enabled */
                if(SDO->crcEnabled){
   1192e:	68fb      	ldr	r3, [r7, #12]
   11930:	681b      	ldr	r3, [r3, #0]
   11932:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
   11936:	2b00      	cmp	r3, #0
   11938:	d010      	beq.n	1195c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x840>
                    SDO->crc = crc16_ccitt(SDO->ODF_arg.data, SDO->bufferOffset, SDO->crc);
   1193a:	68fb      	ldr	r3, [r7, #12]
   1193c:	681c      	ldr	r4, [r3, #0]
   1193e:	68fb      	ldr	r3, [r7, #12]
   11940:	681b      	ldr	r3, [r3, #0]
   11942:	6c59      	ldr	r1, [r3, #68]	; 0x44
   11944:	68fb      	ldr	r3, [r7, #12]
   11946:	681b      	ldr	r3, [r3, #0]
   11948:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1194a:	68fb      	ldr	r3, [r7, #12]
   1194c:	681b      	ldr	r3, [r3, #0]
   1194e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   11950:	b29b      	uxth	r3, r3
   11952:	68f8      	ldr	r0, [r7, #12]
   11954:	4d60      	ldr	r5, [pc, #384]	; (11ad8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9bc>)
   11956:	47a8      	blx	r5
   11958:	4603      	mov	r3, r0
   1195a:	6763      	str	r3, [r4, #116]	; 0x74
                }

                /* write data to the Object dictionary */
                SDO->ODF_arg.lastSegment = false;
   1195c:	68fb      	ldr	r3, [r7, #12]
   1195e:	681b      	ldr	r3, [r3, #0]
   11960:	2200      	movs	r2, #0
   11962:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
                abortCode = CO_SDO_writeOD(SDO->bufferOffset);
   11966:	68fb      	ldr	r3, [r7, #12]
   11968:	681b      	ldr	r3, [r3, #0]
   1196a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1196c:	4619      	mov	r1, r3
   1196e:	68f8      	ldr	r0, [r7, #12]
   11970:	4b5a      	ldr	r3, [pc, #360]	; (11adc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9c0>)
   11972:	4798      	blx	r3
   11974:	62b8      	str	r0, [r7, #40]	; 0x28
                if(abortCode != 0U){
   11976:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11978:	2b00      	cmp	r3, #0
   1197a:	d009      	beq.n	11990 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x874>
                    CO_SDO_abort(SDO, abortCode);
   1197c:	68fb      	ldr	r3, [r7, #12]
   1197e:	681b      	ldr	r3, [r3, #0]
   11980:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   11982:	4618      	mov	r0, r3
   11984:	4b53      	ldr	r3, [pc, #332]	; (11ad4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9b8>)
   11986:	4798      	blx	r3
                    return -1;
   11988:	f04f 33ff 	mov.w	r3, #4294967295
   1198c:	f000 bd5c 	b.w	12448 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                }

                SDO->ODF_arg.dataLength = CO_SDO_BUFFER_SIZE;
   11990:	68fb      	ldr	r3, [r7, #12]
   11992:	681b      	ldr	r3, [r3, #0]
   11994:	2220      	movs	r2, #32
   11996:	64da      	str	r2, [r3, #76]	; 0x4c
                SDO->bufferOffset = 0;
   11998:	68fb      	ldr	r3, [r7, #12]
   1199a:	681b      	ldr	r3, [r3, #0]
   1199c:	2200      	movs	r2, #0
   1199e:	639a      	str	r2, [r3, #56]	; 0x38
            }

            /* blksize */
            len = CO_SDO_BUFFER_SIZE - SDO->bufferOffset;
   119a0:	68fb      	ldr	r3, [r7, #12]
   119a2:	681b      	ldr	r3, [r3, #0]
   119a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   119a6:	f1c3 0320 	rsb	r3, r3, #32
   119aa:	643b      	str	r3, [r7, #64]	; 0x40
            SDO->blksize = (len > (7*127)) ? 127 : (len / 7);
   119ac:	68fb      	ldr	r3, [r7, #12]
   119ae:	6819      	ldr	r1, [r3, #0]
   119b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   119b2:	f240 3279 	movw	r2, #889	; 0x379
   119b6:	4293      	cmp	r3, r2
   119b8:	d809      	bhi.n	119ce <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x8b2>
   119ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   119bc:	4b48      	ldr	r3, [pc, #288]	; (11ae0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9c4>)
   119be:	fba3 0302 	umull	r0, r3, r3, r2
   119c2:	1ad2      	subs	r2, r2, r3
   119c4:	0852      	lsrs	r2, r2, #1
   119c6:	4413      	add	r3, r2
   119c8:	089b      	lsrs	r3, r3, #2
   119ca:	b2db      	uxtb	r3, r3
   119cc:	e000      	b.n	119d0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x8b4>
   119ce:	237f      	movs	r3, #127	; 0x7f
   119d0:	f881 3070 	strb.w	r3, [r1, #112]	; 0x70
            SDO->CANtxBuff->data[2] = SDO->blksize;
   119d4:	68fb      	ldr	r3, [r7, #12]
   119d6:	681b      	ldr	r3, [r3, #0]
   119d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   119dc:	68fa      	ldr	r2, [r7, #12]
   119de:	6812      	ldr	r2, [r2, #0]
   119e0:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
   119e4:	71da      	strb	r2, [r3, #7]

            /* set next state */
            if(lastSegmentInSubblock) {
   119e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   119ea:	2b00      	cmp	r3, #0
   119ec:	d005      	beq.n	119fa <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x8de>
                SDO->state = CO_SDO_ST_DOWNLOAD_BL_END;
   119ee:	68fb      	ldr	r3, [r7, #12]
   119f0:	681b      	ldr	r3, [r3, #0]
   119f2:	2217      	movs	r2, #23
   119f4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
   119f8:	e013      	b.n	11a22 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x906>
            }
            else if(SDO->bufferOffset >= CO_SDO_BUFFER_SIZE) {
   119fa:	68fb      	ldr	r3, [r7, #12]
   119fc:	681b      	ldr	r3, [r3, #0]
   119fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   11a00:	2b1f      	cmp	r3, #31
   11a02:	d909      	bls.n	11a18 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x8fc>
                CO_SDO_abort(SDO, CO_SDO_AB_DEVICE_INCOMPAT);
   11a04:	68fb      	ldr	r3, [r7, #12]
   11a06:	681b      	ldr	r3, [r3, #0]
   11a08:	4936      	ldr	r1, [pc, #216]	; (11ae4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9c8>)
   11a0a:	4618      	mov	r0, r3
   11a0c:	4b31      	ldr	r3, [pc, #196]	; (11ad4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9b8>)
   11a0e:	4798      	blx	r3
                return -1;
   11a10:	f04f 33ff 	mov.w	r3, #4294967295
   11a14:	f000 bd18 	b.w	12448 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }
            else {
                SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK;
   11a18:	68fb      	ldr	r3, [r7, #12]
   11a1a:	681b      	ldr	r3, [r3, #0]
   11a1c:	2215      	movs	r2, #21
   11a1e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            }

            /* send response */
            sendResponse = true;
   11a22:	2301      	movs	r3, #1
   11a24:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

            break;
   11a28:	f000 bcf2 	b.w	12410 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
        }

        case CO_SDO_ST_DOWNLOAD_BL_END:{
            /* verify client command specifier and subcommand */
            if((SDO->CANrxData[0]&0xE1U) != 0xC1U){
   11a2c:	68fb      	ldr	r3, [r7, #12]
   11a2e:	681b      	ldr	r3, [r3, #0]
   11a30:	781b      	ldrb	r3, [r3, #0]
   11a32:	f003 03e1 	and.w	r3, r3, #225	; 0xe1
   11a36:	2bc1      	cmp	r3, #193	; 0xc1
   11a38:	d009      	beq.n	11a4e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x932>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
   11a3a:	68fb      	ldr	r3, [r7, #12]
   11a3c:	681b      	ldr	r3, [r3, #0]
   11a3e:	492a      	ldr	r1, [pc, #168]	; (11ae8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9cc>)
   11a40:	4618      	mov	r0, r3
   11a42:	4b24      	ldr	r3, [pc, #144]	; (11ad4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9b8>)
   11a44:	4798      	blx	r3
                return -1;
   11a46:	f04f 33ff 	mov.w	r3, #4294967295
   11a4a:	f000 bcfd 	b.w	12448 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            /* number of bytes in the last segment of the last block that do not contain data. */
            len = (SDO->CANrxData[0]>>2U) & 0x07U;
   11a4e:	68fb      	ldr	r3, [r7, #12]
   11a50:	681b      	ldr	r3, [r3, #0]
   11a52:	781b      	ldrb	r3, [r3, #0]
   11a54:	109b      	asrs	r3, r3, #2
   11a56:	f003 0307 	and.w	r3, r3, #7
   11a5a:	643b      	str	r3, [r7, #64]	; 0x40
            SDO->bufferOffset -= len;
   11a5c:	68fb      	ldr	r3, [r7, #12]
   11a5e:	681b      	ldr	r3, [r3, #0]
   11a60:	68fa      	ldr	r2, [r7, #12]
   11a62:	6812      	ldr	r2, [r2, #0]
   11a64:	6b91      	ldr	r1, [r2, #56]	; 0x38
   11a66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   11a68:	1a8a      	subs	r2, r1, r2
   11a6a:	639a      	str	r2, [r3, #56]	; 0x38

            /* calculate and verify CRC, if enabled */
            if(SDO->crcEnabled){
   11a6c:	68fb      	ldr	r3, [r7, #12]
   11a6e:	681b      	ldr	r3, [r3, #0]
   11a70:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
   11a74:	2b00      	cmp	r3, #0
   11a76:	d03d      	beq.n	11af4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9d8>
                uint32_t crc;
                SDO->crc = crc16_ccitt(SDO->ODF_arg.data, SDO->bufferOffset, SDO->crc);
   11a78:	68fb      	ldr	r3, [r7, #12]
   11a7a:	681c      	ldr	r4, [r3, #0]
   11a7c:	68fb      	ldr	r3, [r7, #12]
   11a7e:	681b      	ldr	r3, [r3, #0]
   11a80:	6c59      	ldr	r1, [r3, #68]	; 0x44
   11a82:	68fb      	ldr	r3, [r7, #12]
   11a84:	681b      	ldr	r3, [r3, #0]
   11a86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   11a88:	68fb      	ldr	r3, [r7, #12]
   11a8a:	681b      	ldr	r3, [r3, #0]
   11a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   11a8e:	b29b      	uxth	r3, r3
   11a90:	68f8      	ldr	r0, [r7, #12]
   11a92:	4d11      	ldr	r5, [pc, #68]	; (11ad8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9bc>)
   11a94:	47a8      	blx	r5
   11a96:	4603      	mov	r3, r0
   11a98:	6763      	str	r3, [r4, #116]	; 0x74

                CO_memcpySwap2(&crc, &SDO->CANrxData[1]);
   11a9a:	68fb      	ldr	r3, [r7, #12]
   11a9c:	681b      	ldr	r3, [r3, #0]
   11a9e:	1c5a      	adds	r2, r3, #1
   11aa0:	f107 0318 	add.w	r3, r7, #24
   11aa4:	4619      	mov	r1, r3
   11aa6:	68f8      	ldr	r0, [r7, #12]
   11aa8:	4b10      	ldr	r3, [pc, #64]	; (11aec <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9d0>)
   11aaa:	4798      	blx	r3

                if(SDO->crc != crc){
   11aac:	68fb      	ldr	r3, [r7, #12]
   11aae:	681b      	ldr	r3, [r3, #0]
   11ab0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   11ab2:	69bb      	ldr	r3, [r7, #24]
   11ab4:	429a      	cmp	r2, r3
   11ab6:	d01d      	beq.n	11af4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9d8>
                    CO_SDO_abort(SDO, CO_SDO_AB_CRC);   /* CRC error (block mode only). */
   11ab8:	68fb      	ldr	r3, [r7, #12]
   11aba:	681b      	ldr	r3, [r3, #0]
   11abc:	490c      	ldr	r1, [pc, #48]	; (11af0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9d4>)
   11abe:	4618      	mov	r0, r3
   11ac0:	4b04      	ldr	r3, [pc, #16]	; (11ad4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9b8>)
   11ac2:	4798      	blx	r3
                    return -1;
   11ac4:	f04f 33ff 	mov.w	r3, #4294967295
   11ac8:	f000 bcbe 	b.w	12448 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
   11acc:	0001056d 	.word	0x0001056d
   11ad0:	06070010 	.word	0x06070010
   11ad4:	00011091 	.word	0x00011091
   11ad8:	00012a95 	.word	0x00012a95
   11adc:	00010f5d 	.word	0x00010f5d
   11ae0:	24924925 	.word	0x24924925
   11ae4:	06040047 	.word	0x06040047
   11ae8:	05040001 	.word	0x05040001
   11aec:	0001053d 	.word	0x0001053d
   11af0:	05040004 	.word	0x05040004
                }
            }

            /* write data to the Object dictionary */
            SDO->ODF_arg.lastSegment = true;
   11af4:	68fb      	ldr	r3, [r7, #12]
   11af6:	681b      	ldr	r3, [r3, #0]
   11af8:	2201      	movs	r2, #1
   11afa:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
            abortCode = CO_SDO_writeOD( SDO->bufferOffset);
   11afe:	68fb      	ldr	r3, [r7, #12]
   11b00:	681b      	ldr	r3, [r3, #0]
   11b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   11b04:	4619      	mov	r1, r3
   11b06:	68f8      	ldr	r0, [r7, #12]
   11b08:	4b98      	ldr	r3, [pc, #608]	; (11d6c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc50>)
   11b0a:	4798      	blx	r3
   11b0c:	62b8      	str	r0, [r7, #40]	; 0x28
            if(abortCode != 0U){
   11b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11b10:	2b00      	cmp	r3, #0
   11b12:	d009      	beq.n	11b28 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa0c>
                CO_SDO_abort(SDO, abortCode);
   11b14:	68fb      	ldr	r3, [r7, #12]
   11b16:	681b      	ldr	r3, [r3, #0]
   11b18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   11b1a:	4618      	mov	r0, r3
   11b1c:	4b94      	ldr	r3, [pc, #592]	; (11d70 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc54>)
   11b1e:	4798      	blx	r3
                return -1;
   11b20:	f04f 33ff 	mov.w	r3, #4294967295
   11b24:	f000 bc90 	b.w	12448 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            /* send response */
            SDO->CANtxBuff->data[0] = 0xA1;
   11b28:	68fb      	ldr	r3, [r7, #12]
   11b2a:	681b      	ldr	r3, [r3, #0]
   11b2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11b30:	22a1      	movs	r2, #161	; 0xa1
   11b32:	715a      	strb	r2, [r3, #5]
            SDO->state = CO_SDO_ST_IDLE;
   11b34:	68fb      	ldr	r3, [r7, #12]
   11b36:	681b      	ldr	r3, [r3, #0]
   11b38:	2200      	movs	r2, #0
   11b3a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            sendResponse = true;
   11b3e:	2301      	movs	r3, #1
   11b40:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
   11b44:	f000 bc64 	b.w	12410 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
        }

        case CO_SDO_ST_UPLOAD_INITIATE:{
            /* default response */
            SDO->CANtxBuff->data[1] = SDO->CANrxData[1];
   11b48:	68fb      	ldr	r3, [r7, #12]
   11b4a:	681b      	ldr	r3, [r3, #0]
   11b4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11b50:	68fa      	ldr	r2, [r7, #12]
   11b52:	6812      	ldr	r2, [r2, #0]
   11b54:	7852      	ldrb	r2, [r2, #1]
   11b56:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = SDO->CANrxData[2];
   11b58:	68fb      	ldr	r3, [r7, #12]
   11b5a:	681b      	ldr	r3, [r3, #0]
   11b5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11b60:	68fa      	ldr	r2, [r7, #12]
   11b62:	6812      	ldr	r2, [r2, #0]
   11b64:	7892      	ldrb	r2, [r2, #2]
   11b66:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->CANrxData[3];
   11b68:	68fb      	ldr	r3, [r7, #12]
   11b6a:	681b      	ldr	r3, [r3, #0]
   11b6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11b70:	68fa      	ldr	r2, [r7, #12]
   11b72:	6812      	ldr	r2, [r2, #0]
   11b74:	78d2      	ldrb	r2, [r2, #3]
   11b76:	721a      	strb	r2, [r3, #8]

            /* Expedited transfer */
            if(SDO->ODF_arg.dataLength <= 4U){
   11b78:	68fb      	ldr	r3, [r7, #12]
   11b7a:	681b      	ldr	r3, [r3, #0]
   11b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   11b7e:	2b04      	cmp	r3, #4
   11b80:	d835      	bhi.n	11bee <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xad2>
                for(i=0U; i<SDO->ODF_arg.dataLength; i++)
   11b82:	2300      	movs	r3, #0
   11b84:	63fb      	str	r3, [r7, #60]	; 0x3c
   11b86:	68fb      	ldr	r3, [r7, #12]
   11b88:	681b      	ldr	r3, [r3, #0]
   11b8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   11b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11b8e:	429a      	cmp	r2, r3
   11b90:	d912      	bls.n	11bb8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa9c>
                    SDO->CANtxBuff->data[4U+i] = SDO->ODF_arg.data[i];
   11b92:	68fb      	ldr	r3, [r7, #12]
   11b94:	681b      	ldr	r3, [r3, #0]
   11b96:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
   11b9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11b9c:	3304      	adds	r3, #4
   11b9e:	68f9      	ldr	r1, [r7, #12]
   11ba0:	6809      	ldr	r1, [r1, #0]
   11ba2:	6c48      	ldr	r0, [r1, #68]	; 0x44
   11ba4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   11ba6:	4401      	add	r1, r0
   11ba8:	7809      	ldrb	r1, [r1, #0]
   11baa:	4413      	add	r3, r2
   11bac:	460a      	mov	r2, r1
   11bae:	715a      	strb	r2, [r3, #5]
                for(i=0U; i<SDO->ODF_arg.dataLength; i++)
   11bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11bb2:	3301      	adds	r3, #1
   11bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   11bb6:	e7e6      	b.n	11b86 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa6a>

                SDO->CANtxBuff->data[0] = 0x43U | ((4U-SDO->ODF_arg.dataLength) << 2U);
   11bb8:	68fb      	ldr	r3, [r7, #12]
   11bba:	681b      	ldr	r3, [r3, #0]
   11bbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11bc0:	68fa      	ldr	r2, [r7, #12]
   11bc2:	6812      	ldr	r2, [r2, #0]
   11bc4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   11bc6:	b2d2      	uxtb	r2, r2
   11bc8:	f1c2 0204 	rsb	r2, r2, #4
   11bcc:	b2d2      	uxtb	r2, r2
   11bce:	0092      	lsls	r2, r2, #2
   11bd0:	b2d2      	uxtb	r2, r2
   11bd2:	f042 0243 	orr.w	r2, r2, #67	; 0x43
   11bd6:	b2d2      	uxtb	r2, r2
   11bd8:	715a      	strb	r2, [r3, #5]
                SDO->state = CO_SDO_ST_IDLE;
   11bda:	68fb      	ldr	r3, [r7, #12]
   11bdc:	681b      	ldr	r3, [r3, #0]
   11bde:	2200      	movs	r2, #0
   11be0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

                sendResponse = true;
   11be4:	2301      	movs	r3, #1
   11be6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                }

                /* send response */
                sendResponse = true;
            }
            break;
   11bea:	f000 bc11 	b.w	12410 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
                SDO->bufferOffset = 0U;
   11bee:	68fb      	ldr	r3, [r7, #12]
   11bf0:	681b      	ldr	r3, [r3, #0]
   11bf2:	2200      	movs	r2, #0
   11bf4:	639a      	str	r2, [r3, #56]	; 0x38
                SDO->sequence = 0U;
   11bf6:	68fb      	ldr	r3, [r7, #12]
   11bf8:	681b      	ldr	r3, [r3, #0]
   11bfa:	2200      	movs	r2, #0
   11bfc:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENTED;
   11c00:	68fb      	ldr	r3, [r7, #12]
   11c02:	681b      	ldr	r3, [r3, #0]
   11c04:	2222      	movs	r2, #34	; 0x22
   11c06:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                if(SDO->ODF_arg.dataLengthTotal != 0U){
   11c0a:	68fb      	ldr	r3, [r7, #12]
   11c0c:	681b      	ldr	r3, [r3, #0]
   11c0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   11c10:	2b00      	cmp	r3, #0
   11c12:	d015      	beq.n	11c40 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xb24>
                    uint32_t len = SDO->ODF_arg.dataLengthTotal;
   11c14:	68fb      	ldr	r3, [r7, #12]
   11c16:	681b      	ldr	r3, [r3, #0]
   11c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   11c1a:	617b      	str	r3, [r7, #20]
                    CO_memcpySwap4(&SDO->CANtxBuff->data[4], &len);
   11c1c:	68fb      	ldr	r3, [r7, #12]
   11c1e:	681b      	ldr	r3, [r3, #0]
   11c20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11c24:	3309      	adds	r3, #9
   11c26:	f107 0214 	add.w	r2, r7, #20
   11c2a:	4619      	mov	r1, r3
   11c2c:	68f8      	ldr	r0, [r7, #12]
   11c2e:	4b51      	ldr	r3, [pc, #324]	; (11d74 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc58>)
   11c30:	4798      	blx	r3
                    SDO->CANtxBuff->data[0] = 0x41U;
   11c32:	68fb      	ldr	r3, [r7, #12]
   11c34:	681b      	ldr	r3, [r3, #0]
   11c36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11c3a:	2241      	movs	r2, #65	; 0x41
   11c3c:	715a      	strb	r2, [r3, #5]
   11c3e:	e005      	b.n	11c4c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xb30>
                    SDO->CANtxBuff->data[0] = 0x40U;
   11c40:	68fb      	ldr	r3, [r7, #12]
   11c42:	681b      	ldr	r3, [r3, #0]
   11c44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11c48:	2240      	movs	r2, #64	; 0x40
   11c4a:	715a      	strb	r2, [r3, #5]
                sendResponse = true;
   11c4c:	2301      	movs	r3, #1
   11c4e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
   11c52:	e3dd      	b.n	12410 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
        }

        case CO_SDO_ST_UPLOAD_SEGMENTED:{
            /* verify client command specifier */
            if((SDO->CANrxData[0]&0xE0U) != 0x60U){
   11c54:	68fb      	ldr	r3, [r7, #12]
   11c56:	681b      	ldr	r3, [r3, #0]
   11c58:	781b      	ldrb	r3, [r3, #0]
   11c5a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
   11c5e:	2b60      	cmp	r3, #96	; 0x60
   11c60:	d008      	beq.n	11c74 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xb58>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
   11c62:	68fb      	ldr	r3, [r7, #12]
   11c64:	681b      	ldr	r3, [r3, #0]
   11c66:	4944      	ldr	r1, [pc, #272]	; (11d78 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc5c>)
   11c68:	4618      	mov	r0, r3
   11c6a:	4b41      	ldr	r3, [pc, #260]	; (11d70 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc54>)
   11c6c:	4798      	blx	r3
                return -1;
   11c6e:	f04f 33ff 	mov.w	r3, #4294967295
   11c72:	e3e9      	b.n	12448 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            /* verify toggle bit */
            i = ((SDO->CANrxData[0]&0x10U) != 0) ? 1U : 0U;
   11c74:	68fb      	ldr	r3, [r7, #12]
   11c76:	681b      	ldr	r3, [r3, #0]
   11c78:	781b      	ldrb	r3, [r3, #0]
   11c7a:	f003 0310 	and.w	r3, r3, #16
   11c7e:	2b00      	cmp	r3, #0
   11c80:	d001      	beq.n	11c86 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xb6a>
   11c82:	2301      	movs	r3, #1
   11c84:	e000      	b.n	11c88 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xb6c>
   11c86:	2300      	movs	r3, #0
   11c88:	63fb      	str	r3, [r7, #60]	; 0x3c
            if(i != SDO->sequence){
   11c8a:	68fb      	ldr	r3, [r7, #12]
   11c8c:	681b      	ldr	r3, [r3, #0]
   11c8e:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   11c92:	461a      	mov	r2, r3
   11c94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11c96:	429a      	cmp	r2, r3
   11c98:	d008      	beq.n	11cac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xb90>
                CO_SDO_abort(SDO, CO_SDO_AB_TOGGLE_BIT);/* toggle bit not alternated */
   11c9a:	68fb      	ldr	r3, [r7, #12]
   11c9c:	681b      	ldr	r3, [r3, #0]
   11c9e:	4937      	ldr	r1, [pc, #220]	; (11d7c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc60>)
   11ca0:	4618      	mov	r0, r3
   11ca2:	4b33      	ldr	r3, [pc, #204]	; (11d70 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc54>)
   11ca4:	4798      	blx	r3
                return -1;
   11ca6:	f04f 33ff 	mov.w	r3, #4294967295
   11caa:	e3cd      	b.n	12448 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            /* calculate length to be sent */
            len = SDO->ODF_arg.dataLength - SDO->bufferOffset;
   11cac:	68fb      	ldr	r3, [r7, #12]
   11cae:	681b      	ldr	r3, [r3, #0]
   11cb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   11cb2:	68fb      	ldr	r3, [r7, #12]
   11cb4:	681b      	ldr	r3, [r3, #0]
   11cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   11cb8:	1ad3      	subs	r3, r2, r3
   11cba:	643b      	str	r3, [r7, #64]	; 0x40
            if(len > 7U) len = 7U;
   11cbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11cbe:	2b07      	cmp	r3, #7
   11cc0:	d901      	bls.n	11cc6 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xbaa>
   11cc2:	2307      	movs	r3, #7
   11cc4:	643b      	str	r3, [r7, #64]	; 0x40

            /* If data type is domain, re-fill the data buffer if neccessary and indicated so. */
            if((SDO->ODF_arg.ODdataStorage == 0) && (len < 7U) && (!SDO->ODF_arg.lastSegment)){
   11cc6:	68fb      	ldr	r3, [r7, #12]
   11cc8:	681b      	ldr	r3, [r3, #0]
   11cca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   11ccc:	2b00      	cmp	r3, #0
   11cce:	d179      	bne.n	11dc4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xca8>
   11cd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11cd2:	2b06      	cmp	r3, #6
   11cd4:	d876      	bhi.n	11dc4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xca8>
   11cd6:	68fb      	ldr	r3, [r7, #12]
   11cd8:	681b      	ldr	r3, [r3, #0]
   11cda:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
   11cde:	2b00      	cmp	r3, #0
   11ce0:	d170      	bne.n	11dc4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xca8>
                /* copy previous data to the beginning */
                for(i=0U; i<len; i++){
   11ce2:	2300      	movs	r3, #0
   11ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
   11ce6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   11ce8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11cea:	429a      	cmp	r2, r3
   11cec:	d213      	bcs.n	11d16 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xbfa>
                    SDO->ODF_arg.data[i] = SDO->ODF_arg.data[SDO->bufferOffset+i];
   11cee:	68fb      	ldr	r3, [r7, #12]
   11cf0:	681b      	ldr	r3, [r3, #0]
   11cf2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   11cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11cf6:	4413      	add	r3, r2
   11cf8:	68fa      	ldr	r2, [r7, #12]
   11cfa:	6812      	ldr	r2, [r2, #0]
   11cfc:	6c51      	ldr	r1, [r2, #68]	; 0x44
   11cfe:	68fa      	ldr	r2, [r7, #12]
   11d00:	6812      	ldr	r2, [r2, #0]
   11d02:	6b90      	ldr	r0, [r2, #56]	; 0x38
   11d04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   11d06:	4402      	add	r2, r0
   11d08:	440a      	add	r2, r1
   11d0a:	7812      	ldrb	r2, [r2, #0]
   11d0c:	701a      	strb	r2, [r3, #0]
                for(i=0U; i<len; i++){
   11d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11d10:	3301      	adds	r3, #1
   11d12:	63fb      	str	r3, [r7, #60]	; 0x3c
   11d14:	e7e7      	b.n	11ce6 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xbca>
                }

                /* move the beginning of the data buffer */
                SDO->ODF_arg.data += len;
   11d16:	68fb      	ldr	r3, [r7, #12]
   11d18:	681b      	ldr	r3, [r3, #0]
   11d1a:	68fa      	ldr	r2, [r7, #12]
   11d1c:	6812      	ldr	r2, [r2, #0]
   11d1e:	6c51      	ldr	r1, [r2, #68]	; 0x44
   11d20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   11d22:	440a      	add	r2, r1
   11d24:	645a      	str	r2, [r3, #68]	; 0x44
                SDO->ODF_arg.dataLength = CO_OD_getLength( SDO->entryNo, SDO->ODF_arg.subIndex) - len;
   11d26:	68fb      	ldr	r3, [r7, #12]
   11d28:	681c      	ldr	r4, [r3, #0]
   11d2a:	68fb      	ldr	r3, [r7, #12]
   11d2c:	681b      	ldr	r3, [r3, #0]
   11d2e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   11d30:	68fb      	ldr	r3, [r7, #12]
   11d32:	681b      	ldr	r3, [r3, #0]
   11d34:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
   11d38:	461a      	mov	r2, r3
   11d3a:	68f8      	ldr	r0, [r7, #12]
   11d3c:	4b10      	ldr	r3, [pc, #64]	; (11d80 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc64>)
   11d3e:	4798      	blx	r3
   11d40:	4602      	mov	r2, r0
   11d42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11d44:	1ad3      	subs	r3, r2, r3
   11d46:	64e3      	str	r3, [r4, #76]	; 0x4c

                /* read next data from Object dictionary function */
                abortCode = CO_SDO_readOD( CO_SDO_BUFFER_SIZE);
   11d48:	2120      	movs	r1, #32
   11d4a:	68f8      	ldr	r0, [r7, #12]
   11d4c:	4b0d      	ldr	r3, [pc, #52]	; (11d84 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc68>)
   11d4e:	4798      	blx	r3
   11d50:	62b8      	str	r0, [r7, #40]	; 0x28
                if(abortCode != 0U){
   11d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11d54:	2b00      	cmp	r3, #0
   11d56:	d017      	beq.n	11d88 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>
                    CO_SDO_abort(SDO, abortCode);
   11d58:	68fb      	ldr	r3, [r7, #12]
   11d5a:	681b      	ldr	r3, [r3, #0]
   11d5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   11d5e:	4618      	mov	r0, r3
   11d60:	4b03      	ldr	r3, [pc, #12]	; (11d70 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc54>)
   11d62:	4798      	blx	r3
                    return -1;
   11d64:	f04f 33ff 	mov.w	r3, #4294967295
   11d68:	e36e      	b.n	12448 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
   11d6a:	bf00      	nop
   11d6c:	00010f5d 	.word	0x00010f5d
   11d70:	00011091 	.word	0x00011091
   11d74:	0001056d 	.word	0x0001056d
   11d78:	05040001 	.word	0x05040001
   11d7c:	05030000 	.word	0x05030000
   11d80:	00010a81 	.word	0x00010a81
   11d84:	00010e3d 	.word	0x00010e3d
                }

                /* return to the original data buffer */
                SDO->ODF_arg.data -= len;
   11d88:	68fb      	ldr	r3, [r7, #12]
   11d8a:	681b      	ldr	r3, [r3, #0]
   11d8c:	68fa      	ldr	r2, [r7, #12]
   11d8e:	6812      	ldr	r2, [r2, #0]
   11d90:	6c51      	ldr	r1, [r2, #68]	; 0x44
   11d92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   11d94:	4252      	negs	r2, r2
   11d96:	440a      	add	r2, r1
   11d98:	645a      	str	r2, [r3, #68]	; 0x44
                SDO->ODF_arg.dataLength +=  len;
   11d9a:	68fb      	ldr	r3, [r7, #12]
   11d9c:	681b      	ldr	r3, [r3, #0]
   11d9e:	68fa      	ldr	r2, [r7, #12]
   11da0:	6812      	ldr	r2, [r2, #0]
   11da2:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
   11da4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   11da6:	440a      	add	r2, r1
   11da8:	64da      	str	r2, [r3, #76]	; 0x4c
                SDO->bufferOffset = 0;
   11daa:	68fb      	ldr	r3, [r7, #12]
   11dac:	681b      	ldr	r3, [r3, #0]
   11dae:	2200      	movs	r2, #0
   11db0:	639a      	str	r2, [r3, #56]	; 0x38

                /* re-calculate the length */
                len = SDO->ODF_arg.dataLength;
   11db2:	68fb      	ldr	r3, [r7, #12]
   11db4:	681b      	ldr	r3, [r3, #0]
   11db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   11db8:	643b      	str	r3, [r7, #64]	; 0x40
                if(len > 7U) len = 7U;
   11dba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11dbc:	2b07      	cmp	r3, #7
   11dbe:	d901      	bls.n	11dc4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xca8>
   11dc0:	2307      	movs	r3, #7
   11dc2:	643b      	str	r3, [r7, #64]	; 0x40
            }

            /* fill response data bytes */
            for(i=0U; i<len; i++)
   11dc4:	2300      	movs	r3, #0
   11dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   11dc8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   11dca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11dcc:	429a      	cmp	r2, r3
   11dce:	d215      	bcs.n	11dfc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xce0>
                SDO->CANtxBuff->data[i+1] = SDO->ODF_arg.data[SDO->bufferOffset++];
   11dd0:	68fb      	ldr	r3, [r7, #12]
   11dd2:	681b      	ldr	r3, [r3, #0]
   11dd4:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   11dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11dda:	1c59      	adds	r1, r3, #1
   11ddc:	68fb      	ldr	r3, [r7, #12]
   11dde:	681b      	ldr	r3, [r3, #0]
   11de0:	6c5c      	ldr	r4, [r3, #68]	; 0x44
   11de2:	68fb      	ldr	r3, [r7, #12]
   11de4:	681a      	ldr	r2, [r3, #0]
   11de6:	6b93      	ldr	r3, [r2, #56]	; 0x38
   11de8:	1c5d      	adds	r5, r3, #1
   11dea:	6395      	str	r5, [r2, #56]	; 0x38
   11dec:	4423      	add	r3, r4
   11dee:	781a      	ldrb	r2, [r3, #0]
   11df0:	1843      	adds	r3, r0, r1
   11df2:	715a      	strb	r2, [r3, #5]
            for(i=0U; i<len; i++)
   11df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11df6:	3301      	adds	r3, #1
   11df8:	63fb      	str	r3, [r7, #60]	; 0x3c
   11dfa:	e7e5      	b.n	11dc8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xcac>

            /* first response byte */
            SDO->CANtxBuff->data[0] = 0x00 | (SDO->sequence ? 0x10 : 0x00) | ((7-len)<<1);
   11dfc:	68fb      	ldr	r3, [r7, #12]
   11dfe:	681b      	ldr	r3, [r3, #0]
   11e00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11e04:	68fa      	ldr	r2, [r7, #12]
   11e06:	6812      	ldr	r2, [r2, #0]
   11e08:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
   11e0c:	2a00      	cmp	r2, #0
   11e0e:	d001      	beq.n	11e14 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xcf8>
   11e10:	2110      	movs	r1, #16
   11e12:	e000      	b.n	11e16 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xcfa>
   11e14:	2100      	movs	r1, #0
   11e16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   11e18:	b2d2      	uxtb	r2, r2
   11e1a:	f1c2 0207 	rsb	r2, r2, #7
   11e1e:	b2d2      	uxtb	r2, r2
   11e20:	0052      	lsls	r2, r2, #1
   11e22:	b2d2      	uxtb	r2, r2
   11e24:	430a      	orrs	r2, r1
   11e26:	b2d2      	uxtb	r2, r2
   11e28:	715a      	strb	r2, [r3, #5]
            SDO->sequence = (SDO->sequence) ? 0 : 1;
   11e2a:	68fb      	ldr	r3, [r7, #12]
   11e2c:	681b      	ldr	r3, [r3, #0]
   11e2e:	68fa      	ldr	r2, [r7, #12]
   11e30:	6812      	ldr	r2, [r2, #0]
   11e32:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
   11e36:	2a00      	cmp	r2, #0
   11e38:	bf0c      	ite	eq
   11e3a:	2201      	moveq	r2, #1
   11e3c:	2200      	movne	r2, #0
   11e3e:	b2d2      	uxtb	r2, r2
   11e40:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

            /* verify end of transfer */
            if((SDO->bufferOffset == SDO->ODF_arg.dataLength) && (SDO->ODF_arg.lastSegment)){
   11e44:	68fb      	ldr	r3, [r7, #12]
   11e46:	681b      	ldr	r3, [r3, #0]
   11e48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   11e4a:	68fb      	ldr	r3, [r7, #12]
   11e4c:	681b      	ldr	r3, [r3, #0]
   11e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   11e50:	429a      	cmp	r2, r3
   11e52:	d117      	bne.n	11e84 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xd68>
   11e54:	68fb      	ldr	r3, [r7, #12]
   11e56:	681b      	ldr	r3, [r3, #0]
   11e58:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
   11e5c:	2b00      	cmp	r3, #0
   11e5e:	d011      	beq.n	11e84 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xd68>
                SDO->CANtxBuff->data[0] |= 0x01;
   11e60:	68fb      	ldr	r3, [r7, #12]
   11e62:	681b      	ldr	r3, [r3, #0]
   11e64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11e68:	68fa      	ldr	r2, [r7, #12]
   11e6a:	6812      	ldr	r2, [r2, #0]
   11e6c:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
   11e70:	7952      	ldrb	r2, [r2, #5]
   11e72:	f042 0201 	orr.w	r2, r2, #1
   11e76:	b2d2      	uxtb	r2, r2
   11e78:	715a      	strb	r2, [r3, #5]
                SDO->state = CO_SDO_ST_IDLE;
   11e7a:	68fb      	ldr	r3, [r7, #12]
   11e7c:	681b      	ldr	r3, [r3, #0]
   11e7e:	2200      	movs	r2, #0
   11e80:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            }

            /* send response */
            sendResponse = true;
   11e84:	2301      	movs	r3, #1
   11e86:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
   11e8a:	e2c1      	b.n	12410 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
        }

        case CO_SDO_ST_UPLOAD_BL_INITIATE:{
            /* default response */
            SDO->CANtxBuff->data[1] = SDO->CANrxData[1];
   11e8c:	68fb      	ldr	r3, [r7, #12]
   11e8e:	681b      	ldr	r3, [r3, #0]
   11e90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11e94:	68fa      	ldr	r2, [r7, #12]
   11e96:	6812      	ldr	r2, [r2, #0]
   11e98:	7852      	ldrb	r2, [r2, #1]
   11e9a:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = SDO->CANrxData[2];
   11e9c:	68fb      	ldr	r3, [r7, #12]
   11e9e:	681b      	ldr	r3, [r3, #0]
   11ea0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11ea4:	68fa      	ldr	r2, [r7, #12]
   11ea6:	6812      	ldr	r2, [r2, #0]
   11ea8:	7892      	ldrb	r2, [r2, #2]
   11eaa:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->CANrxData[3];
   11eac:	68fb      	ldr	r3, [r7, #12]
   11eae:	681b      	ldr	r3, [r3, #0]
   11eb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11eb4:	68fa      	ldr	r2, [r7, #12]
   11eb6:	6812      	ldr	r2, [r2, #0]
   11eb8:	78d2      	ldrb	r2, [r2, #3]
   11eba:	721a      	strb	r2, [r3, #8]

            /* calculate CRC, if enabled */
            if((SDO->CANrxData[0] & 0x04U) != 0U){
   11ebc:	68fb      	ldr	r3, [r7, #12]
   11ebe:	681b      	ldr	r3, [r3, #0]
   11ec0:	781b      	ldrb	r3, [r3, #0]
   11ec2:	f003 0304 	and.w	r3, r3, #4
   11ec6:	2b00      	cmp	r3, #0
   11ec8:	d013      	beq.n	11ef2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xdd6>
                SDO->crcEnabled = true;
   11eca:	68fb      	ldr	r3, [r7, #12]
   11ecc:	681b      	ldr	r3, [r3, #0]
   11ece:	2201      	movs	r2, #1
   11ed0:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                SDO->crc = crc16_ccitt(SDO->ODF_arg.data, SDO->ODF_arg.dataLength, 0);
   11ed4:	68fb      	ldr	r3, [r7, #12]
   11ed6:	681c      	ldr	r4, [r3, #0]
   11ed8:	68fb      	ldr	r3, [r7, #12]
   11eda:	681b      	ldr	r3, [r3, #0]
   11edc:	6c59      	ldr	r1, [r3, #68]	; 0x44
   11ede:	68fb      	ldr	r3, [r7, #12]
   11ee0:	681b      	ldr	r3, [r3, #0]
   11ee2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   11ee4:	2300      	movs	r3, #0
   11ee6:	68f8      	ldr	r0, [r7, #12]
   11ee8:	4d93      	ldr	r5, [pc, #588]	; (12138 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x101c>)
   11eea:	47a8      	blx	r5
   11eec:	4603      	mov	r3, r0
   11eee:	6763      	str	r3, [r4, #116]	; 0x74
   11ef0:	e008      	b.n	11f04 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xde8>
            }
            else{
                SDO->crcEnabled = false;
   11ef2:	68fb      	ldr	r3, [r7, #12]
   11ef4:	681b      	ldr	r3, [r3, #0]
   11ef6:	2200      	movs	r2, #0
   11ef8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                SDO->crc = 0;
   11efc:	68fb      	ldr	r3, [r7, #12]
   11efe:	681b      	ldr	r3, [r3, #0]
   11f00:	2200      	movs	r2, #0
   11f02:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Number of segments per block */
            SDO->blksize = SDO->CANrxData[4];
   11f04:	68fb      	ldr	r3, [r7, #12]
   11f06:	681b      	ldr	r3, [r3, #0]
   11f08:	68fa      	ldr	r2, [r7, #12]
   11f0a:	6812      	ldr	r2, [r2, #0]
   11f0c:	7912      	ldrb	r2, [r2, #4]
   11f0e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

            /* verify client subcommand */
            if((SDO->CANrxData[0]&0x03U) != 0x00U){
   11f12:	68fb      	ldr	r3, [r7, #12]
   11f14:	681b      	ldr	r3, [r3, #0]
   11f16:	781b      	ldrb	r3, [r3, #0]
   11f18:	f003 0303 	and.w	r3, r3, #3
   11f1c:	2b00      	cmp	r3, #0
   11f1e:	d008      	beq.n	11f32 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xe16>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
   11f20:	68fb      	ldr	r3, [r7, #12]
   11f22:	681b      	ldr	r3, [r3, #0]
   11f24:	4985      	ldr	r1, [pc, #532]	; (1213c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1020>)
   11f26:	4618      	mov	r0, r3
   11f28:	4b85      	ldr	r3, [pc, #532]	; (12140 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1024>)
   11f2a:	4798      	blx	r3
                return -1;
   11f2c:	f04f 33ff 	mov.w	r3, #4294967295
   11f30:	e28a      	b.n	12448 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            /* verify blksize and if SDO data buffer is large enough */
            if((SDO->blksize < 1U) || (SDO->blksize > 127U) ||
   11f32:	68fb      	ldr	r3, [r7, #12]
   11f34:	681b      	ldr	r3, [r3, #0]
   11f36:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
   11f3a:	2b00      	cmp	r3, #0
   11f3c:	d019      	beq.n	11f72 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xe56>
   11f3e:	68fb      	ldr	r3, [r7, #12]
   11f40:	681b      	ldr	r3, [r3, #0]
   11f42:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
   11f46:	b25b      	sxtb	r3, r3
   11f48:	2b00      	cmp	r3, #0
   11f4a:	db12      	blt.n	11f72 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xe56>
               (((SDO->blksize*7U) > SDO->ODF_arg.dataLength) && (!SDO->ODF_arg.lastSegment))){
   11f4c:	68fb      	ldr	r3, [r7, #12]
   11f4e:	681b      	ldr	r3, [r3, #0]
   11f50:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
   11f54:	461a      	mov	r2, r3
   11f56:	4613      	mov	r3, r2
   11f58:	00db      	lsls	r3, r3, #3
   11f5a:	1a9a      	subs	r2, r3, r2
   11f5c:	68fb      	ldr	r3, [r7, #12]
   11f5e:	681b      	ldr	r3, [r3, #0]
   11f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            if((SDO->blksize < 1U) || (SDO->blksize > 127U) ||
   11f62:	429a      	cmp	r2, r3
   11f64:	d90e      	bls.n	11f84 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xe68>
               (((SDO->blksize*7U) > SDO->ODF_arg.dataLength) && (!SDO->ODF_arg.lastSegment))){
   11f66:	68fb      	ldr	r3, [r7, #12]
   11f68:	681b      	ldr	r3, [r3, #0]
   11f6a:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
   11f6e:	2b00      	cmp	r3, #0
   11f70:	d108      	bne.n	11f84 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xe68>
                CO_SDO_abort(SDO, CO_SDO_AB_BLOCK_SIZE); /* Invalid block size (block mode only). */
   11f72:	68fb      	ldr	r3, [r7, #12]
   11f74:	681b      	ldr	r3, [r3, #0]
   11f76:	4973      	ldr	r1, [pc, #460]	; (12144 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1028>)
   11f78:	4618      	mov	r0, r3
   11f7a:	4b71      	ldr	r3, [pc, #452]	; (12140 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1024>)
   11f7c:	4798      	blx	r3
                return -1;
   11f7e:	f04f 33ff 	mov.w	r3, #4294967295
   11f82:	e261      	b.n	12448 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            /* indicate data size, if known */
            if(SDO->ODF_arg.dataLengthTotal != 0U){
   11f84:	68fb      	ldr	r3, [r7, #12]
   11f86:	681b      	ldr	r3, [r3, #0]
   11f88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   11f8a:	2b00      	cmp	r3, #0
   11f8c:	d015      	beq.n	11fba <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xe9e>
                uint32_t len = SDO->ODF_arg.dataLengthTotal;
   11f8e:	68fb      	ldr	r3, [r7, #12]
   11f90:	681b      	ldr	r3, [r3, #0]
   11f92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   11f94:	613b      	str	r3, [r7, #16]
                CO_memcpySwap4(&SDO->CANtxBuff->data[4], &len);
   11f96:	68fb      	ldr	r3, [r7, #12]
   11f98:	681b      	ldr	r3, [r3, #0]
   11f9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11f9e:	3309      	adds	r3, #9
   11fa0:	f107 0210 	add.w	r2, r7, #16
   11fa4:	4619      	mov	r1, r3
   11fa6:	68f8      	ldr	r0, [r7, #12]
   11fa8:	4b67      	ldr	r3, [pc, #412]	; (12148 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x102c>)
   11faa:	4798      	blx	r3
                SDO->CANtxBuff->data[0] = 0xC6U;
   11fac:	68fb      	ldr	r3, [r7, #12]
   11fae:	681b      	ldr	r3, [r3, #0]
   11fb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11fb4:	22c6      	movs	r2, #198	; 0xc6
   11fb6:	715a      	strb	r2, [r3, #5]
   11fb8:	e005      	b.n	11fc6 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xeaa>
            }
            else{
                SDO->CANtxBuff->data[0] = 0xC4U;
   11fba:	68fb      	ldr	r3, [r7, #12]
   11fbc:	681b      	ldr	r3, [r3, #0]
   11fbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11fc2:	22c4      	movs	r2, #196	; 0xc4
   11fc4:	715a      	strb	r2, [r3, #5]
            }

            /* send response */
            SDO->state = CO_SDO_ST_UPLOAD_BL_INITIATE_2;
   11fc6:	68fb      	ldr	r3, [r7, #12]
   11fc8:	681b      	ldr	r3, [r3, #0]
   11fca:	2225      	movs	r2, #37	; 0x25
   11fcc:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            sendResponse = true;
   11fd0:	2301      	movs	r3, #1
   11fd2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
   11fd6:	e21b      	b.n	12410 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
        }

        case CO_SDO_ST_UPLOAD_BL_INITIATE_2:{
            /* verify client command specifier and subcommand */
            if((SDO->CANrxData[0]&0xE3U) != 0xA3U){
   11fd8:	68fb      	ldr	r3, [r7, #12]
   11fda:	681b      	ldr	r3, [r3, #0]
   11fdc:	781b      	ldrb	r3, [r3, #0]
   11fde:	f003 03e3 	and.w	r3, r3, #227	; 0xe3
   11fe2:	2ba3      	cmp	r3, #163	; 0xa3
   11fe4:	d008      	beq.n	11ff8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xedc>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
   11fe6:	68fb      	ldr	r3, [r7, #12]
   11fe8:	681b      	ldr	r3, [r3, #0]
   11fea:	4954      	ldr	r1, [pc, #336]	; (1213c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1020>)
   11fec:	4618      	mov	r0, r3
   11fee:	4b54      	ldr	r3, [pc, #336]	; (12140 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1024>)
   11ff0:	4798      	blx	r3
                return -1;
   11ff2:	f04f 33ff 	mov.w	r3, #4294967295
   11ff6:	e227      	b.n	12448 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            SDO->bufferOffset = 0;
   11ff8:	68fb      	ldr	r3, [r7, #12]
   11ffa:	681b      	ldr	r3, [r3, #0]
   11ffc:	2200      	movs	r2, #0
   11ffe:	639a      	str	r2, [r3, #56]	; 0x38
            SDO->sequence = 0;
   12000:	68fb      	ldr	r3, [r7, #12]
   12002:	681b      	ldr	r3, [r3, #0]
   12004:	2200      	movs	r2, #0
   12006:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
            SDO->endOfTransfer = false;
   1200a:	68fb      	ldr	r3, [r7, #12]
   1200c:	681b      	ldr	r3, [r3, #0]
   1200e:	2200      	movs	r2, #0
   12010:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
            SDO->CANrxNew = false;
   12014:	68fb      	ldr	r3, [r7, #12]
   12016:	681b      	ldr	r3, [r3, #0]
   12018:	2200      	movs	r2, #0
   1201a:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
            SDO->state = CO_SDO_ST_UPLOAD_BL_SUBBLOCK;
   1201e:	68fb      	ldr	r3, [r7, #12]
   12020:	681b      	ldr	r3, [r3, #0]
   12022:	2226      	movs	r2, #38	; 0x26
   12024:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            /* continue in next case */
        }

        case CO_SDO_ST_UPLOAD_BL_SUBBLOCK:{
            /* is block confirmation received */
            if(SDO->CANrxNew){
   12028:	68fb      	ldr	r3, [r7, #12]
   1202a:	681b      	ldr	r3, [r3, #0]
   1202c:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
   12030:	2b00      	cmp	r3, #0
   12032:	f000 813f 	beq.w	122b4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1198>
                uint8_t ackseq;
                uint32_t j;

                /* verify client command specifier and subcommand */
                if((SDO->CANrxData[0]&0xE3U) != 0xA2U){
   12036:	68fb      	ldr	r3, [r7, #12]
   12038:	681b      	ldr	r3, [r3, #0]
   1203a:	781b      	ldrb	r3, [r3, #0]
   1203c:	f003 03e3 	and.w	r3, r3, #227	; 0xe3
   12040:	2ba2      	cmp	r3, #162	; 0xa2
   12042:	d008      	beq.n	12056 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xf3a>
                    CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
   12044:	68fb      	ldr	r3, [r7, #12]
   12046:	681b      	ldr	r3, [r3, #0]
   12048:	493c      	ldr	r1, [pc, #240]	; (1213c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1020>)
   1204a:	4618      	mov	r0, r3
   1204c:	4b3c      	ldr	r3, [pc, #240]	; (12140 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1024>)
   1204e:	4798      	blx	r3
                    return -1;
   12050:	f04f 33ff 	mov.w	r3, #4294967295
   12054:	e1f8      	b.n	12448 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                }

                ackseq = SDO->CANrxData[1];   /* sequence number of the last segment, that was received correctly. */
   12056:	68fb      	ldr	r3, [r7, #12]
   12058:	681b      	ldr	r3, [r3, #0]
   1205a:	785b      	ldrb	r3, [r3, #1]
   1205c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

                /* verify if response is too early */
                if(ackseq > SDO->sequence){
   12060:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   12064:	68fa      	ldr	r2, [r7, #12]
   12066:	6812      	ldr	r2, [r2, #0]
   12068:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
   1206c:	4293      	cmp	r3, r2
   1206e:	dd08      	ble.n	12082 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xf66>
                    CO_SDO_abort(SDO, CO_SDO_AB_SEQ_NUM); /* Invalid sequence */
   12070:	68fb      	ldr	r3, [r7, #12]
   12072:	681b      	ldr	r3, [r3, #0]
   12074:	4935      	ldr	r1, [pc, #212]	; (1214c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1030>)
   12076:	4618      	mov	r0, r3
   12078:	4b31      	ldr	r3, [pc, #196]	; (12140 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1024>)
   1207a:	4798      	blx	r3
                    return -1;
   1207c:	f04f 33ff 	mov.w	r3, #4294967295
   12080:	e1e2      	b.n	12448 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                }

                /* end of transfer */
                if((SDO->endOfTransfer) && (ackseq == SDO->blksize)){
   12082:	68fb      	ldr	r3, [r7, #12]
   12084:	681b      	ldr	r3, [r3, #0]
   12086:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
   1208a:	2b00      	cmp	r3, #0
   1208c:	d033      	beq.n	120f6 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xfda>
   1208e:	68fb      	ldr	r3, [r7, #12]
   12090:	681b      	ldr	r3, [r3, #0]
   12092:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
   12096:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   1209a:	429a      	cmp	r2, r3
   1209c:	d12b      	bne.n	120f6 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xfda>
                    /* first response byte */
                    SDO->CANtxBuff->data[0] = 0xC1 | ((7 - SDO->lastLen) << 2);
   1209e:	68fb      	ldr	r3, [r7, #12]
   120a0:	681b      	ldr	r3, [r3, #0]
   120a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   120a6:	68fa      	ldr	r2, [r7, #12]
   120a8:	6812      	ldr	r2, [r2, #0]
   120aa:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
   120ae:	f1c2 0207 	rsb	r2, r2, #7
   120b2:	0092      	lsls	r2, r2, #2
   120b4:	b252      	sxtb	r2, r2
   120b6:	f062 023e 	orn	r2, r2, #62	; 0x3e
   120ba:	b252      	sxtb	r2, r2
   120bc:	b2d2      	uxtb	r2, r2
   120be:	715a      	strb	r2, [r3, #5]

                    /* CRC */
                    if(SDO->crcEnabled)
   120c0:	68fb      	ldr	r3, [r7, #12]
   120c2:	681b      	ldr	r3, [r3, #0]
   120c4:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
   120c8:	2b00      	cmp	r3, #0
   120ca:	d00b      	beq.n	120e4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xfc8>
                        CO_memcpySwap2(&SDO->CANtxBuff->data[1], &SDO->crc);
   120cc:	68fb      	ldr	r3, [r7, #12]
   120ce:	681b      	ldr	r3, [r3, #0]
   120d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   120d4:	1d99      	adds	r1, r3, #6
   120d6:	68fb      	ldr	r3, [r7, #12]
   120d8:	681b      	ldr	r3, [r3, #0]
   120da:	3374      	adds	r3, #116	; 0x74
   120dc:	461a      	mov	r2, r3
   120de:	68f8      	ldr	r0, [r7, #12]
   120e0:	4b1b      	ldr	r3, [pc, #108]	; (12150 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1034>)
   120e2:	4798      	blx	r3

                    SDO->state = CO_SDO_ST_UPLOAD_BL_END;
   120e4:	68fb      	ldr	r3, [r7, #12]
   120e6:	681b      	ldr	r3, [r3, #0]
   120e8:	2227      	movs	r2, #39	; 0x27
   120ea:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

                    /* send response */
                    sendResponse = true;
   120ee:	2301      	movs	r3, #1
   120f0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                    break;
   120f4:	e18c      	b.n	12410 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
                }

                /* move remaining data to the beginning */
                for(i=ackseq*7, j=0; i<SDO->ODF_arg.dataLength; i++, j++)
   120f6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   120fa:	4613      	mov	r3, r2
   120fc:	00db      	lsls	r3, r3, #3
   120fe:	1a9b      	subs	r3, r3, r2
   12100:	63fb      	str	r3, [r7, #60]	; 0x3c
   12102:	2300      	movs	r3, #0
   12104:	63bb      	str	r3, [r7, #56]	; 0x38
   12106:	68fb      	ldr	r3, [r7, #12]
   12108:	681b      	ldr	r3, [r3, #0]
   1210a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   1210c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1210e:	429a      	cmp	r2, r3
   12110:	d920      	bls.n	12154 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1038>
                    SDO->ODF_arg.data[j] = SDO->ODF_arg.data[i];
   12112:	68fb      	ldr	r3, [r7, #12]
   12114:	681b      	ldr	r3, [r3, #0]
   12116:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   12118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1211a:	4413      	add	r3, r2
   1211c:	68fa      	ldr	r2, [r7, #12]
   1211e:	6812      	ldr	r2, [r2, #0]
   12120:	6c51      	ldr	r1, [r2, #68]	; 0x44
   12122:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   12124:	440a      	add	r2, r1
   12126:	7812      	ldrb	r2, [r2, #0]
   12128:	701a      	strb	r2, [r3, #0]
                for(i=ackseq*7, j=0; i<SDO->ODF_arg.dataLength; i++, j++)
   1212a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1212c:	3301      	adds	r3, #1
   1212e:	63fb      	str	r3, [r7, #60]	; 0x3c
   12130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12132:	3301      	adds	r3, #1
   12134:	63bb      	str	r3, [r7, #56]	; 0x38
   12136:	e7e6      	b.n	12106 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xfea>
   12138:	00012a95 	.word	0x00012a95
   1213c:	05040001 	.word	0x05040001
   12140:	00011091 	.word	0x00011091
   12144:	05040002 	.word	0x05040002
   12148:	0001056d 	.word	0x0001056d
   1214c:	05040003 	.word	0x05040003
   12150:	0001053d 	.word	0x0001053d

                /* set remaining data length in buffer */
                SDO->ODF_arg.dataLength -= ackseq * 7U;
   12154:	68fb      	ldr	r3, [r7, #12]
   12156:	6819      	ldr	r1, [r3, #0]
   12158:	68fb      	ldr	r3, [r7, #12]
   1215a:	681b      	ldr	r3, [r3, #0]
   1215c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   1215e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   12162:	4613      	mov	r3, r2
   12164:	00db      	lsls	r3, r3, #3
   12166:	1a9b      	subs	r3, r3, r2
   12168:	1ac3      	subs	r3, r0, r3
   1216a:	64cb      	str	r3, [r1, #76]	; 0x4c

                /* new block size */
                SDO->blksize = SDO->CANrxData[2];
   1216c:	68fb      	ldr	r3, [r7, #12]
   1216e:	681b      	ldr	r3, [r3, #0]
   12170:	68fa      	ldr	r2, [r7, #12]
   12172:	6812      	ldr	r2, [r2, #0]
   12174:	7892      	ldrb	r2, [r2, #2]
   12176:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                /* If data type is domain, re-fill the data buffer if necessary and indicated so. */
                if((SDO->ODF_arg.ODdataStorage == 0) && (SDO->ODF_arg.dataLength < (SDO->blksize*7U)) && (!SDO->ODF_arg.lastSegment)){
   1217a:	68fb      	ldr	r3, [r7, #12]
   1217c:	681b      	ldr	r3, [r3, #0]
   1217e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   12180:	2b00      	cmp	r3, #0
   12182:	d168      	bne.n	12256 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x113a>
   12184:	68fb      	ldr	r3, [r7, #12]
   12186:	681b      	ldr	r3, [r3, #0]
   12188:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   1218a:	68fb      	ldr	r3, [r7, #12]
   1218c:	681b      	ldr	r3, [r3, #0]
   1218e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
   12192:	4619      	mov	r1, r3
   12194:	460b      	mov	r3, r1
   12196:	00db      	lsls	r3, r3, #3
   12198:	1a5b      	subs	r3, r3, r1
   1219a:	429a      	cmp	r2, r3
   1219c:	d25b      	bcs.n	12256 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x113a>
   1219e:	68fb      	ldr	r3, [r7, #12]
   121a0:	681b      	ldr	r3, [r3, #0]
   121a2:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
   121a6:	2b00      	cmp	r3, #0
   121a8:	d155      	bne.n	12256 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x113a>
                    /* move the beginning of the data buffer */
                    len = SDO->ODF_arg.dataLength; /* length of valid data in buffer */
   121aa:	68fb      	ldr	r3, [r7, #12]
   121ac:	681b      	ldr	r3, [r3, #0]
   121ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   121b0:	643b      	str	r3, [r7, #64]	; 0x40
                    SDO->ODF_arg.data += len;
   121b2:	68fb      	ldr	r3, [r7, #12]
   121b4:	681b      	ldr	r3, [r3, #0]
   121b6:	68fa      	ldr	r2, [r7, #12]
   121b8:	6812      	ldr	r2, [r2, #0]
   121ba:	6c51      	ldr	r1, [r2, #68]	; 0x44
   121bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   121be:	440a      	add	r2, r1
   121c0:	645a      	str	r2, [r3, #68]	; 0x44
                    SDO->ODF_arg.dataLength = CO_OD_getLength( SDO->entryNo, SDO->ODF_arg.subIndex) - len;
   121c2:	68fb      	ldr	r3, [r7, #12]
   121c4:	681c      	ldr	r4, [r3, #0]
   121c6:	68fb      	ldr	r3, [r7, #12]
   121c8:	681b      	ldr	r3, [r3, #0]
   121ca:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   121cc:	68fb      	ldr	r3, [r7, #12]
   121ce:	681b      	ldr	r3, [r3, #0]
   121d0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
   121d4:	461a      	mov	r2, r3
   121d6:	68f8      	ldr	r0, [r7, #12]
   121d8:	4b9d      	ldr	r3, [pc, #628]	; (12450 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1334>)
   121da:	4798      	blx	r3
   121dc:	4602      	mov	r2, r0
   121de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   121e0:	1ad3      	subs	r3, r2, r3
   121e2:	64e3      	str	r3, [r4, #76]	; 0x4c

                    /* read next data from Object dictionary function */
                    abortCode = CO_SDO_readOD( CO_SDO_BUFFER_SIZE);
   121e4:	2120      	movs	r1, #32
   121e6:	68f8      	ldr	r0, [r7, #12]
   121e8:	4b9a      	ldr	r3, [pc, #616]	; (12454 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1338>)
   121ea:	4798      	blx	r3
   121ec:	62b8      	str	r0, [r7, #40]	; 0x28
                    if(abortCode != 0U){
   121ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   121f0:	2b00      	cmp	r3, #0
   121f2:	d008      	beq.n	12206 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x10ea>
                        CO_SDO_abort(SDO, abortCode);
   121f4:	68fb      	ldr	r3, [r7, #12]
   121f6:	681b      	ldr	r3, [r3, #0]
   121f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   121fa:	4618      	mov	r0, r3
   121fc:	4b96      	ldr	r3, [pc, #600]	; (12458 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x133c>)
   121fe:	4798      	blx	r3
                        return -1;
   12200:	f04f 33ff 	mov.w	r3, #4294967295
   12204:	e120      	b.n	12448 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                    }

                    /* calculate CRC on next bytes, if enabled */
                    if(SDO->crcEnabled){
   12206:	68fb      	ldr	r3, [r7, #12]
   12208:	681b      	ldr	r3, [r3, #0]
   1220a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
   1220e:	2b00      	cmp	r3, #0
   12210:	d010      	beq.n	12234 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1118>
                        SDO->crc = crc16_ccitt(SDO->ODF_arg.data, SDO->ODF_arg.dataLength, SDO->crc);
   12212:	68fb      	ldr	r3, [r7, #12]
   12214:	681c      	ldr	r4, [r3, #0]
   12216:	68fb      	ldr	r3, [r7, #12]
   12218:	681b      	ldr	r3, [r3, #0]
   1221a:	6c59      	ldr	r1, [r3, #68]	; 0x44
   1221c:	68fb      	ldr	r3, [r7, #12]
   1221e:	681b      	ldr	r3, [r3, #0]
   12220:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   12222:	68fb      	ldr	r3, [r7, #12]
   12224:	681b      	ldr	r3, [r3, #0]
   12226:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   12228:	b29b      	uxth	r3, r3
   1222a:	68f8      	ldr	r0, [r7, #12]
   1222c:	4d8b      	ldr	r5, [pc, #556]	; (1245c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1340>)
   1222e:	47a8      	blx	r5
   12230:	4603      	mov	r3, r0
   12232:	6763      	str	r3, [r4, #116]	; 0x74
                    }

                  /* return to the original data buffer */
                    SDO->ODF_arg.data -= len;
   12234:	68fb      	ldr	r3, [r7, #12]
   12236:	681b      	ldr	r3, [r3, #0]
   12238:	68fa      	ldr	r2, [r7, #12]
   1223a:	6812      	ldr	r2, [r2, #0]
   1223c:	6c51      	ldr	r1, [r2, #68]	; 0x44
   1223e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   12240:	4252      	negs	r2, r2
   12242:	440a      	add	r2, r1
   12244:	645a      	str	r2, [r3, #68]	; 0x44
                    SDO->ODF_arg.dataLength +=  len;
   12246:	68fb      	ldr	r3, [r7, #12]
   12248:	681b      	ldr	r3, [r3, #0]
   1224a:	68fa      	ldr	r2, [r7, #12]
   1224c:	6812      	ldr	r2, [r2, #0]
   1224e:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
   12250:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   12252:	440a      	add	r2, r1
   12254:	64da      	str	r2, [r3, #76]	; 0x4c
                }

                /* verify if SDO data buffer is large enough */
                if(((SDO->blksize*7U) > SDO->ODF_arg.dataLength) && (!SDO->ODF_arg.lastSegment)){
   12256:	68fb      	ldr	r3, [r7, #12]
   12258:	681b      	ldr	r3, [r3, #0]
   1225a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
   1225e:	461a      	mov	r2, r3
   12260:	4613      	mov	r3, r2
   12262:	00db      	lsls	r3, r3, #3
   12264:	1a9a      	subs	r2, r3, r2
   12266:	68fb      	ldr	r3, [r7, #12]
   12268:	681b      	ldr	r3, [r3, #0]
   1226a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1226c:	429a      	cmp	r2, r3
   1226e:	d90e      	bls.n	1228e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1172>
   12270:	68fb      	ldr	r3, [r7, #12]
   12272:	681b      	ldr	r3, [r3, #0]
   12274:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
   12278:	2b00      	cmp	r3, #0
   1227a:	d108      	bne.n	1228e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1172>
                    CO_SDO_abort(SDO, CO_SDO_AB_BLOCK_SIZE); /* Invalid block size (block mode only). */
   1227c:	68fb      	ldr	r3, [r7, #12]
   1227e:	681b      	ldr	r3, [r3, #0]
   12280:	4977      	ldr	r1, [pc, #476]	; (12460 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1344>)
   12282:	4618      	mov	r0, r3
   12284:	4b74      	ldr	r3, [pc, #464]	; (12458 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x133c>)
   12286:	4798      	blx	r3
                    return -1;
   12288:	f04f 33ff 	mov.w	r3, #4294967295
   1228c:	e0dc      	b.n	12448 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                }

                SDO->bufferOffset = 0U;
   1228e:	68fb      	ldr	r3, [r7, #12]
   12290:	681b      	ldr	r3, [r3, #0]
   12292:	2200      	movs	r2, #0
   12294:	639a      	str	r2, [r3, #56]	; 0x38
                SDO->sequence = 0U;
   12296:	68fb      	ldr	r3, [r7, #12]
   12298:	681b      	ldr	r3, [r3, #0]
   1229a:	2200      	movs	r2, #0
   1229c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                SDO->endOfTransfer = false;
   122a0:	68fb      	ldr	r3, [r7, #12]
   122a2:	681b      	ldr	r3, [r3, #0]
   122a4:	2200      	movs	r2, #0
   122a6:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

                /* clear flag here */
                SDO->CANrxNew = false;
   122aa:	68fb      	ldr	r3, [r7, #12]
   122ac:	681b      	ldr	r3, [r3, #0]
   122ae:	2200      	movs	r2, #0
   122b0:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
            }

            /* return, if all segments was already transfered or on end of transfer */
            if((SDO->sequence == SDO->blksize) || (SDO->endOfTransfer)){
   122b4:	68fb      	ldr	r3, [r7, #12]
   122b6:	681b      	ldr	r3, [r3, #0]
   122b8:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
   122bc:	68fb      	ldr	r3, [r7, #12]
   122be:	681b      	ldr	r3, [r3, #0]
   122c0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
   122c4:	429a      	cmp	r2, r3
   122c6:	d005      	beq.n	122d4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x11b8>
   122c8:	68fb      	ldr	r3, [r7, #12]
   122ca:	681b      	ldr	r3, [r3, #0]
   122cc:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
   122d0:	2b00      	cmp	r3, #0
   122d2:	d001      	beq.n	122d8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x11bc>
                return 1;/* don't clear the SDO->CANrxNew flag, so return directly */
   122d4:	2301      	movs	r3, #1
   122d6:	e0b7      	b.n	12448 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            /* reset timeout */
            SDO->timeoutTimer = 0;
   122d8:	68fb      	ldr	r3, [r7, #12]
   122da:	681b      	ldr	r3, [r3, #0]
   122dc:	2200      	movs	r2, #0
   122de:	66da      	str	r2, [r3, #108]	; 0x6c

            /* calculate length to be sent */
            len = SDO->ODF_arg.dataLength - SDO->bufferOffset;
   122e0:	68fb      	ldr	r3, [r7, #12]
   122e2:	681b      	ldr	r3, [r3, #0]
   122e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   122e6:	68fb      	ldr	r3, [r7, #12]
   122e8:	681b      	ldr	r3, [r3, #0]
   122ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   122ec:	1ad3      	subs	r3, r2, r3
   122ee:	643b      	str	r3, [r7, #64]	; 0x40
            if(len > 7U){
   122f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   122f2:	2b07      	cmp	r3, #7
   122f4:	d901      	bls.n	122fa <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x11de>
                len = 7U;
   122f6:	2307      	movs	r3, #7
   122f8:	643b      	str	r3, [r7, #64]	; 0x40
            }

            /* fill response data bytes */
            for(i=0U; i<len; i++){
   122fa:	2300      	movs	r3, #0
   122fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   122fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   12300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   12302:	429a      	cmp	r2, r3
   12304:	d215      	bcs.n	12332 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1216>
                SDO->CANtxBuff->data[i+1] = SDO->ODF_arg.data[SDO->bufferOffset++];
   12306:	68fb      	ldr	r3, [r7, #12]
   12308:	681b      	ldr	r3, [r3, #0]
   1230a:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   1230e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12310:	1c59      	adds	r1, r3, #1
   12312:	68fb      	ldr	r3, [r7, #12]
   12314:	681b      	ldr	r3, [r3, #0]
   12316:	6c5c      	ldr	r4, [r3, #68]	; 0x44
   12318:	68fb      	ldr	r3, [r7, #12]
   1231a:	681a      	ldr	r2, [r3, #0]
   1231c:	6b93      	ldr	r3, [r2, #56]	; 0x38
   1231e:	1c5d      	adds	r5, r3, #1
   12320:	6395      	str	r5, [r2, #56]	; 0x38
   12322:	4423      	add	r3, r4
   12324:	781a      	ldrb	r2, [r3, #0]
   12326:	1843      	adds	r3, r0, r1
   12328:	715a      	strb	r2, [r3, #5]
            for(i=0U; i<len; i++){
   1232a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1232c:	3301      	adds	r3, #1
   1232e:	63fb      	str	r3, [r7, #60]	; 0x3c
   12330:	e7e5      	b.n	122fe <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x11e2>
            }

            /* first response byte */
            SDO->CANtxBuff->data[0] = ++SDO->sequence;
   12332:	68fb      	ldr	r3, [r7, #12]
   12334:	681b      	ldr	r3, [r3, #0]
   12336:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
   1233a:	68fb      	ldr	r3, [r7, #12]
   1233c:	681b      	ldr	r3, [r3, #0]
   1233e:	f893 106a 	ldrb.w	r1, [r3, #106]	; 0x6a
   12342:	3101      	adds	r1, #1
   12344:	b2c9      	uxtb	r1, r1
   12346:	f883 106a 	strb.w	r1, [r3, #106]	; 0x6a
   1234a:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   1234e:	7153      	strb	r3, [r2, #5]

            /* verify end of transfer */
            if((SDO->bufferOffset == SDO->ODF_arg.dataLength) && (SDO->ODF_arg.lastSegment)){
   12350:	68fb      	ldr	r3, [r7, #12]
   12352:	681b      	ldr	r3, [r3, #0]
   12354:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   12356:	68fb      	ldr	r3, [r7, #12]
   12358:	681b      	ldr	r3, [r3, #0]
   1235a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1235c:	429a      	cmp	r2, r3
   1235e:	d125      	bne.n	123ac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1290>
   12360:	68fb      	ldr	r3, [r7, #12]
   12362:	681b      	ldr	r3, [r3, #0]
   12364:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
   12368:	2b00      	cmp	r3, #0
   1236a:	d01f      	beq.n	123ac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1290>
                SDO->CANtxBuff->data[0] |= 0x80;
   1236c:	68fb      	ldr	r3, [r7, #12]
   1236e:	681b      	ldr	r3, [r3, #0]
   12370:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   12374:	68fa      	ldr	r2, [r7, #12]
   12376:	6812      	ldr	r2, [r2, #0]
   12378:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
   1237c:	7952      	ldrb	r2, [r2, #5]
   1237e:	f062 027f 	orn	r2, r2, #127	; 0x7f
   12382:	b2d2      	uxtb	r2, r2
   12384:	715a      	strb	r2, [r3, #5]
                SDO->lastLen = len;
   12386:	68fb      	ldr	r3, [r7, #12]
   12388:	681b      	ldr	r3, [r3, #0]
   1238a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1238c:	b2d2      	uxtb	r2, r2
   1238e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                SDO->blksize = SDO->sequence;
   12392:	68fb      	ldr	r3, [r7, #12]
   12394:	681b      	ldr	r3, [r3, #0]
   12396:	68fa      	ldr	r2, [r7, #12]
   12398:	6812      	ldr	r2, [r2, #0]
   1239a:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
   1239e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                SDO->endOfTransfer = true;
   123a2:	68fb      	ldr	r3, [r7, #12]
   123a4:	681b      	ldr	r3, [r3, #0]
   123a6:	2201      	movs	r2, #1
   123a8:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
            }

            /* send response */
             ptrCODriverClass->CAN_Send(SDO->CANtxBuff);
   123ac:	4b2d      	ldr	r3, [pc, #180]	; (12464 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1348>)
   123ae:	681a      	ldr	r2, [r3, #0]
   123b0:	68fb      	ldr	r3, [r7, #12]
   123b2:	681b      	ldr	r3, [r3, #0]
   123b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   123b8:	4619      	mov	r1, r3
   123ba:	4610      	mov	r0, r2
   123bc:	4b2a      	ldr	r3, [pc, #168]	; (12468 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x134c>)
   123be:	4798      	blx	r3

            /* Set timerNext_ms to 0 to inform OS to call this function again without delay. */
            if(timerNext_ms != NULL){
   123c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   123c2:	2b00      	cmp	r3, #0
   123c4:	d002      	beq.n	123cc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12b0>
                *timerNext_ms = 0;
   123c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   123c8:	2200      	movs	r2, #0
   123ca:	601a      	str	r2, [r3, #0]
            }

            /* don't clear the SDO->CANrxNew flag, so return directly */
            return 1;
   123cc:	2301      	movs	r3, #1
   123ce:	e03b      	b.n	12448 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
        }

        case CO_SDO_ST_UPLOAD_BL_END:{
            /* verify client command specifier */
            if((SDO->CANrxData[0]&0xE1U) != 0xA1U){
   123d0:	68fb      	ldr	r3, [r7, #12]
   123d2:	681b      	ldr	r3, [r3, #0]
   123d4:	781b      	ldrb	r3, [r3, #0]
   123d6:	f003 03e1 	and.w	r3, r3, #225	; 0xe1
   123da:	2ba1      	cmp	r3, #161	; 0xa1
   123dc:	d008      	beq.n	123f0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12d4>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
   123de:	68fb      	ldr	r3, [r7, #12]
   123e0:	681b      	ldr	r3, [r3, #0]
   123e2:	4922      	ldr	r1, [pc, #136]	; (1246c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1350>)
   123e4:	4618      	mov	r0, r3
   123e6:	4b1c      	ldr	r3, [pc, #112]	; (12458 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x133c>)
   123e8:	4798      	blx	r3
                return -1;
   123ea:	f04f 33ff 	mov.w	r3, #4294967295
   123ee:	e02b      	b.n	12448 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            SDO->state = CO_SDO_ST_IDLE;
   123f0:	68fb      	ldr	r3, [r7, #12]
   123f2:	681b      	ldr	r3, [r3, #0]
   123f4:	2200      	movs	r2, #0
   123f6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            break;
   123fa:	e009      	b.n	12410 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
        }

        default:{
            CO_SDO_abort(SDO, CO_SDO_AB_DEVICE_INCOMPAT);/* general internal incompatibility in the device */
   123fc:	68fb      	ldr	r3, [r7, #12]
   123fe:	681b      	ldr	r3, [r3, #0]
   12400:	491b      	ldr	r1, [pc, #108]	; (12470 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1354>)
   12402:	4618      	mov	r0, r3
   12404:	4b14      	ldr	r3, [pc, #80]	; (12458 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x133c>)
   12406:	4798      	blx	r3
            return -1;
   12408:	f04f 33ff 	mov.w	r3, #4294967295
   1240c:	e01c      	b.n	12448 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            break;
   1240e:	bf00      	nop
        }
    }

    /* free buffer and send message */
    SDO->CANrxNew = false;
   12410:	68fb      	ldr	r3, [r7, #12]
   12412:	681b      	ldr	r3, [r3, #0]
   12414:	2200      	movs	r2, #0
   12416:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
    if(sendResponse) {
   1241a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
   1241e:	2b00      	cmp	r3, #0
   12420:	d009      	beq.n	12436 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x131a>
        ptrCODriverClass->CAN_Send(SDO->CANtxBuff);
   12422:	4b10      	ldr	r3, [pc, #64]	; (12464 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1348>)
   12424:	681a      	ldr	r2, [r3, #0]
   12426:	68fb      	ldr	r3, [r7, #12]
   12428:	681b      	ldr	r3, [r3, #0]
   1242a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   1242e:	4619      	mov	r1, r3
   12430:	4610      	mov	r0, r2
   12432:	4b0d      	ldr	r3, [pc, #52]	; (12468 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x134c>)
   12434:	4798      	blx	r3
    }

    if(SDO->state != CO_SDO_ST_IDLE){
   12436:	68fb      	ldr	r3, [r7, #12]
   12438:	681b      	ldr	r3, [r3, #0]
   1243a:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   1243e:	2b00      	cmp	r3, #0
   12440:	d001      	beq.n	12446 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132a>
        return 1;
   12442:	2301      	movs	r3, #1
   12444:	e000      	b.n	12448 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
    }

    return 0;
   12446:	2300      	movs	r3, #0
}
   12448:	4618      	mov	r0, r3
   1244a:	3748      	adds	r7, #72	; 0x48
   1244c:	46bd      	mov	sp, r7
   1244e:	bdb0      	pop	{r4, r5, r7, pc}
   12450:	00010a81 	.word	0x00010a81
   12454:	00010e3d 	.word	0x00010e3d
   12458:	00011091 	.word	0x00011091
   1245c:	00012a95 	.word	0x00012a95
   12460:	05040002 	.word	0x05040002
   12464:	200019b4 	.word	0x200019b4
   12468:	0000d9ad 	.word	0x0000d9ad
   1246c:	05040001 	.word	0x05040001
   12470:	06040047 	.word	0x06040047

00012474 <_ZN13CO_SYNC_ClassC1Ev>:

#include "CO_SYNC_Class.h"
#include "CO_Driver_Class.h"

// default constructor
CO_SYNC_Class::CO_SYNC_Class()
   12474:	b480      	push	{r7}
   12476:	b083      	sub	sp, #12
   12478:	af00      	add	r7, sp, #0
   1247a:	6078      	str	r0, [r7, #4]
{
} //CO_SYNC_Class
   1247c:	687b      	ldr	r3, [r7, #4]
   1247e:	4618      	mov	r0, r3
   12480:	370c      	adds	r7, #12
   12482:	46bd      	mov	sp, r7
   12484:	bc80      	pop	{r7}
   12486:	4770      	bx	lr

00012488 <_ZN13CO_SYNC_ClassD1Ev>:

// default destructor
CO_SYNC_Class::~CO_SYNC_Class()
   12488:	b480      	push	{r7}
   1248a:	b083      	sub	sp, #12
   1248c:	af00      	add	r7, sp, #0
   1248e:	6078      	str	r0, [r7, #4]
{
} //~CO_SYNC_Class
   12490:	687b      	ldr	r3, [r7, #4]
   12492:	4618      	mov	r0, r3
   12494:	370c      	adds	r7, #12
   12496:	46bd      	mov	sp, r7
   12498:	bc80      	pop	{r7}
   1249a:	4770      	bx	lr

0001249c <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SYNC_receive(void *object, const CO_CANrxMsg_t *msg){
   1249c:	b480      	push	{r7}
   1249e:	b085      	sub	sp, #20
   124a0:	af00      	add	r7, sp, #0
   124a2:	6078      	str	r0, [r7, #4]
   124a4:	6039      	str	r1, [r7, #0]
	
    CO_SYNC_t *SYNC;
    uint8_t operState;

    SYNC = (CO_SYNC_t*)object;   /* this is the correct pointer type of the first argument */
   124a6:	687b      	ldr	r3, [r7, #4]
   124a8:	60fb      	str	r3, [r7, #12]
    operState = *SYNC->operatingState;
   124aa:	68fb      	ldr	r3, [r7, #12]
   124ac:	685b      	ldr	r3, [r3, #4]
   124ae:	781b      	ldrb	r3, [r3, #0]
   124b0:	72fb      	strb	r3, [r7, #11]

    if((operState == CO_NMT_OPERATIONAL) || (operState == CO_NMT_PRE_OPERATIONAL)){
   124b2:	7afb      	ldrb	r3, [r7, #11]
   124b4:	2b05      	cmp	r3, #5
   124b6:	d002      	beq.n	124be <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x22>
   124b8:	7afb      	ldrb	r3, [r7, #11]
   124ba:	2b7f      	cmp	r3, #127	; 0x7f
   124bc:	d132      	bne.n	12524 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x88>
        if(SYNC->counterOverflowValue == 0){
   124be:	68fb      	ldr	r3, [r7, #12]
   124c0:	7e1b      	ldrb	r3, [r3, #24]
   124c2:	2b00      	cmp	r3, #0
   124c4:	d10e      	bne.n	124e4 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x48>
            if(msg->DLC == 0U){
   124c6:	683b      	ldr	r3, [r7, #0]
   124c8:	7d1b      	ldrb	r3, [r3, #20]
   124ca:	2b00      	cmp	r3, #0
   124cc:	d103      	bne.n	124d6 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x3a>
                SYNC->CANrxNew = true;
   124ce:	68fb      	ldr	r3, [r7, #12]
   124d0:	2201      	movs	r2, #1
   124d2:	769a      	strb	r2, [r3, #26]
   124d4:	e018      	b.n	12508 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x6c>
            }
            else{
                SYNC->receiveError = (uint32_t)msg->DLC | 0x0100U;
   124d6:	683b      	ldr	r3, [r7, #0]
   124d8:	7d1b      	ldrb	r3, [r3, #20]
   124da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
   124de:	68fb      	ldr	r3, [r7, #12]
   124e0:	625a      	str	r2, [r3, #36]	; 0x24
   124e2:	e011      	b.n	12508 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x6c>
            }
        }
        else{
            if(msg->DLC == 1U){
   124e4:	683b      	ldr	r3, [r7, #0]
   124e6:	7d1b      	ldrb	r3, [r3, #20]
   124e8:	2b01      	cmp	r3, #1
   124ea:	d107      	bne.n	124fc <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x60>
                SYNC->counter = msg->data[0];
   124ec:	683b      	ldr	r3, [r7, #0]
   124ee:	7d5a      	ldrb	r2, [r3, #21]
   124f0:	68fb      	ldr	r3, [r7, #12]
   124f2:	771a      	strb	r2, [r3, #28]
                SYNC->CANrxNew = true;
   124f4:	68fb      	ldr	r3, [r7, #12]
   124f6:	2201      	movs	r2, #1
   124f8:	769a      	strb	r2, [r3, #26]
   124fa:	e005      	b.n	12508 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x6c>
            }
            else{
                SYNC->receiveError = (uint32_t)msg->DLC | 0x0200U;
   124fc:	683b      	ldr	r3, [r7, #0]
   124fe:	7d1b      	ldrb	r3, [r3, #20]
   12500:	f443 7200 	orr.w	r2, r3, #512	; 0x200
   12504:	68fb      	ldr	r3, [r7, #12]
   12506:	625a      	str	r2, [r3, #36]	; 0x24
            }
        }
        if(SYNC->CANrxNew) {
   12508:	68fb      	ldr	r3, [r7, #12]
   1250a:	7e9b      	ldrb	r3, [r3, #26]
   1250c:	2b00      	cmp	r3, #0
   1250e:	d009      	beq.n	12524 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x88>
            SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
   12510:	68fb      	ldr	r3, [r7, #12]
   12512:	7edb      	ldrb	r3, [r3, #27]
   12514:	2b00      	cmp	r3, #0
   12516:	bf0c      	ite	eq
   12518:	2301      	moveq	r3, #1
   1251a:	2300      	movne	r3, #0
   1251c:	b2db      	uxtb	r3, r3
   1251e:	461a      	mov	r2, r3
   12520:	68fb      	ldr	r3, [r7, #12]
   12522:	76da      	strb	r2, [r3, #27]
        }
    }
}
   12524:	bf00      	nop
   12526:	3714      	adds	r7, #20
   12528:	46bd      	mov	sp, r7
   1252a:	bc80      	pop	{r7}
   1252c:	4770      	bx	lr
	...

00012530 <_ZL11CO_ODF_1005P12CO_ODF_arg_t>:
/*
 * Function for accessing _COB ID SYNC Message_ (index 0x1005) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1005(CO_ODF_arg_t *ODF_arg){
   12530:	b590      	push	{r4, r7, lr}
   12532:	b08b      	sub	sp, #44	; 0x2c
   12534:	af04      	add	r7, sp, #16
   12536:	6078      	str	r0, [r7, #4]
    CO_SYNC_t *SYNC;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
   12538:	2300      	movs	r3, #0
   1253a:	617b      	str	r3, [r7, #20]

    SYNC = (CO_SYNC_t*) ODF_arg->object;
   1253c:	687b      	ldr	r3, [r7, #4]
   1253e:	681b      	ldr	r3, [r3, #0]
   12540:	60fb      	str	r3, [r7, #12]
    value =ptrCODriverClass->CO_getUint32(ODF_arg->data);
   12542:	4b35      	ldr	r3, [pc, #212]	; (12618 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xe8>)
   12544:	681b      	ldr	r3, [r3, #0]
   12546:	1d1a      	adds	r2, r3, #4
   12548:	687b      	ldr	r3, [r7, #4]
   1254a:	685b      	ldr	r3, [r3, #4]
   1254c:	4619      	mov	r1, r3
   1254e:	4610      	mov	r0, r2
   12550:	4b32      	ldr	r3, [pc, #200]	; (1261c <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xec>)
   12552:	4798      	blx	r3
   12554:	60b8      	str	r0, [r7, #8]

    if(!ODF_arg->reading){
   12556:	687b      	ldr	r3, [r7, #4]
   12558:	7f5b      	ldrb	r3, [r3, #29]
   1255a:	2b00      	cmp	r3, #0
   1255c:	d157      	bne.n	1260e <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xde>
        uint8_t configureSyncProducer = 0;
   1255e:	2300      	movs	r3, #0
   12560:	74fb      	strb	r3, [r7, #19]

        /* only 11-bit CAN identifier is supported */
        if(value & 0x20000000UL){
   12562:	68bb      	ldr	r3, [r7, #8]
   12564:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
   12568:	2b00      	cmp	r3, #0
   1256a:	d002      	beq.n	12572 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x42>
            ret = CO_SDO_AB_INVALID_VALUE;
   1256c:	4b2c      	ldr	r3, [pc, #176]	; (12620 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xf0>)
   1256e:	617b      	str	r3, [r7, #20]
   12570:	e00d      	b.n	1258e <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x5e>
        }
        else{
            /* is 'generate Sync messge' bit set? */
            if(value & 0x40000000UL){
   12572:	68bb      	ldr	r3, [r7, #8]
   12574:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
   12578:	2b00      	cmp	r3, #0
   1257a:	d008      	beq.n	1258e <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x5e>
                /* if bit was set before, value can not be changed */
                if(SYNC->isProducer){
   1257c:	68fb      	ldr	r3, [r7, #12]
   1257e:	7a1b      	ldrb	r3, [r3, #8]
   12580:	2b00      	cmp	r3, #0
   12582:	d002      	beq.n	1258a <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x5a>
                    ret = CO_SDO_AB_DATA_DEV_STATE;
   12584:	4b27      	ldr	r3, [pc, #156]	; (12624 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xf4>)
   12586:	617b      	str	r3, [r7, #20]
   12588:	e001      	b.n	1258e <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x5e>
                }
                else{
                    configureSyncProducer = 1;
   1258a:	2301      	movs	r3, #1
   1258c:	74fb      	strb	r3, [r7, #19]
                }
            }
        }

        /* configure sync producer and consumer */
        if(ret == CO_SDO_AB_NONE){
   1258e:	697b      	ldr	r3, [r7, #20]
   12590:	2b00      	cmp	r3, #0
   12592:	d13c      	bne.n	1260e <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xde>
            SYNC->COB_ID = (uint32_t)(value & 0x7FFU);
   12594:	68bb      	ldr	r3, [r7, #8]
   12596:	f3c3 020a 	ubfx	r2, r3, #0, #11
   1259a:	68fb      	ldr	r3, [r7, #12]
   1259c:	60da      	str	r2, [r3, #12]

            if(configureSyncProducer){
   1259e:	7cfb      	ldrb	r3, [r7, #19]
   125a0:	2b00      	cmp	r3, #0
   125a2:	d021      	beq.n	125e8 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xb8>
                uint8_t len = 0U;
   125a4:	2300      	movs	r3, #0
   125a6:	74bb      	strb	r3, [r7, #18]
                if(SYNC->counterOverflowValue != 0U){
   125a8:	68fb      	ldr	r3, [r7, #12]
   125aa:	7e1b      	ldrb	r3, [r3, #24]
   125ac:	2b00      	cmp	r3, #0
   125ae:	d007      	beq.n	125c0 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x90>
                    len = 1U;
   125b0:	2301      	movs	r3, #1
   125b2:	74bb      	strb	r3, [r7, #18]
                    SYNC->counter = 0U;
   125b4:	68fb      	ldr	r3, [r7, #12]
   125b6:	2200      	movs	r2, #0
   125b8:	771a      	strb	r2, [r3, #28]
                    SYNC->timer = 0U;
   125ba:	68fb      	ldr	r3, [r7, #12]
   125bc:	2200      	movs	r2, #0
   125be:	621a      	str	r2, [r3, #32]
                }
                SYNC->CANtxBuff = ptrCODriverClass->CAN_Tx_BufferInit(
   125c0:	4b15      	ldr	r3, [pc, #84]	; (12618 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xe8>)
   125c2:	6818      	ldr	r0, [r3, #0]
   125c4:	68fb      	ldr	r3, [r7, #12]
   125c6:	6b99      	ldr	r1, [r3, #56]	; 0x38
   125c8:	68fb      	ldr	r3, [r7, #12]
   125ca:	68da      	ldr	r2, [r3, #12]
   125cc:	2300      	movs	r3, #0
   125ce:	9301      	str	r3, [sp, #4]
   125d0:	7cbb      	ldrb	r3, [r7, #18]
   125d2:	9300      	str	r3, [sp, #0]
   125d4:	2300      	movs	r3, #0
   125d6:	4c14      	ldr	r4, [pc, #80]	; (12628 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xf8>)
   125d8:	47a0      	blx	r4
   125da:	4602      	mov	r2, r0
   125dc:	68fb      	ldr	r3, [r7, #12]
   125de:	635a      	str	r2, [r3, #52]	; 0x34
                        SYNC->CANdevTxIdx,      /* index of specific buffer inside CAN module */
                        SYNC->COB_ID,           /* CAN identifier */
                        0,                      /* rtr */
                        len,                    /* number of data bytes */
                        0);                     /* synchronous message flag bit */
                SYNC->isProducer = true;
   125e0:	68fb      	ldr	r3, [r7, #12]
   125e2:	2201      	movs	r2, #1
   125e4:	721a      	strb	r2, [r3, #8]
   125e6:	e002      	b.n	125ee <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xbe>
            }
            else{
                SYNC->isProducer = false;
   125e8:	68fb      	ldr	r3, [r7, #12]
   125ea:	2200      	movs	r2, #0
   125ec:	721a      	strb	r2, [r3, #8]
            }

            ptrCODriverClass->CAN_Rx_BufferInit(
   125ee:	4b0a      	ldr	r3, [pc, #40]	; (12618 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xe8>)
   125f0:	6818      	ldr	r0, [r3, #0]
   125f2:	68fb      	ldr	r3, [r7, #12]
   125f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   125f6:	68fb      	ldr	r3, [r7, #12]
   125f8:	68da      	ldr	r2, [r3, #12]
                    SYNC->CANdevRxIdx,      /* rx buffer index */
                    SYNC->COB_ID,           /* CAN identifier */
                    0x7FF,                  /* mask */
                    0,                      /* rtr */
                    (void*)SYNC,            /* object passed to receive function */
                    CO_SYNC_receive);       /* this function will process received message */
   125fa:	4b0c      	ldr	r3, [pc, #48]	; (1262c <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xfc>)
   125fc:	9302      	str	r3, [sp, #8]
   125fe:	68fb      	ldr	r3, [r7, #12]
   12600:	9301      	str	r3, [sp, #4]
   12602:	2300      	movs	r3, #0
   12604:	9300      	str	r3, [sp, #0]
   12606:	f240 73ff 	movw	r3, #2047	; 0x7ff
   1260a:	4c09      	ldr	r4, [pc, #36]	; (12630 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x100>)
   1260c:	47a0      	blx	r4
        }
    }

    return ret;
   1260e:	697b      	ldr	r3, [r7, #20]
}
   12610:	4618      	mov	r0, r3
   12612:	371c      	adds	r7, #28
   12614:	46bd      	mov	sp, r7
   12616:	bd90      	pop	{r4, r7, pc}
   12618:	200019b4 	.word	0x200019b4
   1261c:	000104d1 	.word	0x000104d1
   12620:	06090030 	.word	0x06090030
   12624:	08000022 	.word	0x08000022
   12628:	0000d901 	.word	0x0000d901
   1262c:	0001249d 	.word	0x0001249d
   12630:	0000d801 	.word	0x0000d801

00012634 <_ZL11CO_ODF_1006P12CO_ODF_arg_t>:
/*
 * Function for accessing _Communication cycle period_ (index 0x1006) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1006(CO_ODF_arg_t *ODF_arg){
   12634:	b580      	push	{r7, lr}
   12636:	b086      	sub	sp, #24
   12638:	af00      	add	r7, sp, #0
   1263a:	6078      	str	r0, [r7, #4]
    CO_SYNC_t *SYNC;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
   1263c:	2300      	movs	r3, #0
   1263e:	617b      	str	r3, [r7, #20]

    SYNC = (CO_SYNC_t*) ODF_arg->object;
   12640:	687b      	ldr	r3, [r7, #4]
   12642:	681b      	ldr	r3, [r3, #0]
   12644:	613b      	str	r3, [r7, #16]
    value = ptrCODriverClass->CO_getUint32(ODF_arg->data);
   12646:	4b19      	ldr	r3, [pc, #100]	; (126ac <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x78>)
   12648:	681b      	ldr	r3, [r3, #0]
   1264a:	1d1a      	adds	r2, r3, #4
   1264c:	687b      	ldr	r3, [r7, #4]
   1264e:	685b      	ldr	r3, [r3, #4]
   12650:	4619      	mov	r1, r3
   12652:	4610      	mov	r0, r2
   12654:	4b16      	ldr	r3, [pc, #88]	; (126b0 <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x7c>)
   12656:	4798      	blx	r3
   12658:	60f8      	str	r0, [r7, #12]

    if(!ODF_arg->reading){
   1265a:	687b      	ldr	r3, [r7, #4]
   1265c:	7f5b      	ldrb	r3, [r3, #29]
   1265e:	2b00      	cmp	r3, #0
   12660:	d11f      	bne.n	126a2 <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x6e>
        /* period transition from 0 to something */
        if((SYNC->periodTime == 0) && (value != 0)){
   12662:	693b      	ldr	r3, [r7, #16]
   12664:	691b      	ldr	r3, [r3, #16]
   12666:	2b00      	cmp	r3, #0
   12668:	d105      	bne.n	12676 <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x42>
   1266a:	68fb      	ldr	r3, [r7, #12]
   1266c:	2b00      	cmp	r3, #0
   1266e:	d002      	beq.n	12676 <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x42>
            SYNC->counter = 0;
   12670:	693b      	ldr	r3, [r7, #16]
   12672:	2200      	movs	r2, #0
   12674:	771a      	strb	r2, [r3, #28]
        }

        SYNC->periodTime = value;
   12676:	693b      	ldr	r3, [r7, #16]
   12678:	68fa      	ldr	r2, [r7, #12]
   1267a:	611a      	str	r2, [r3, #16]
        SYNC->periodTimeoutTime = (value / 2U) * 3U;
   1267c:	68fb      	ldr	r3, [r7, #12]
   1267e:	085a      	lsrs	r2, r3, #1
   12680:	4613      	mov	r3, r2
   12682:	005b      	lsls	r3, r3, #1
   12684:	441a      	add	r2, r3
   12686:	693b      	ldr	r3, [r7, #16]
   12688:	615a      	str	r2, [r3, #20]
        /* overflow? */
        if(SYNC->periodTimeoutTime < value){
   1268a:	693b      	ldr	r3, [r7, #16]
   1268c:	695a      	ldr	r2, [r3, #20]
   1268e:	68fb      	ldr	r3, [r7, #12]
   12690:	429a      	cmp	r2, r3
   12692:	d203      	bcs.n	1269c <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x68>
            SYNC->periodTimeoutTime = 0xFFFFFFFFUL;
   12694:	693b      	ldr	r3, [r7, #16]
   12696:	f04f 32ff 	mov.w	r2, #4294967295
   1269a:	615a      	str	r2, [r3, #20]
        }

        SYNC->timer = 0;
   1269c:	693b      	ldr	r3, [r7, #16]
   1269e:	2200      	movs	r2, #0
   126a0:	621a      	str	r2, [r3, #32]
    }

    return ret;
   126a2:	697b      	ldr	r3, [r7, #20]
}
   126a4:	4618      	mov	r0, r3
   126a6:	3718      	adds	r7, #24
   126a8:	46bd      	mov	sp, r7
   126aa:	bd80      	pop	{r7, pc}
   126ac:	200019b4 	.word	0x200019b4
   126b0:	000104d1 	.word	0x000104d1

000126b4 <_ZL11CO_ODF_1019P12CO_ODF_arg_t>:
/**
 * Function for accessing _Synchronous counter overflow value_ (index 0x1019) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1019(CO_ODF_arg_t *ODF_arg){
   126b4:	b590      	push	{r4, r7, lr}
   126b6:	b089      	sub	sp, #36	; 0x24
   126b8:	af02      	add	r7, sp, #8
   126ba:	6078      	str	r0, [r7, #4]
    CO_SYNC_t *SYNC;
    uint8_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
   126bc:	2300      	movs	r3, #0
   126be:	617b      	str	r3, [r7, #20]

    SYNC = (CO_SYNC_t*) ODF_arg->object;
   126c0:	687b      	ldr	r3, [r7, #4]
   126c2:	681b      	ldr	r3, [r3, #0]
   126c4:	60fb      	str	r3, [r7, #12]
    value = ODF_arg->data[0];
   126c6:	687b      	ldr	r3, [r7, #4]
   126c8:	685b      	ldr	r3, [r3, #4]
   126ca:	781b      	ldrb	r3, [r3, #0]
   126cc:	72fb      	strb	r3, [r7, #11]

    if(!ODF_arg->reading){
   126ce:	687b      	ldr	r3, [r7, #4]
   126d0:	7f5b      	ldrb	r3, [r3, #29]
   126d2:	2b00      	cmp	r3, #0
   126d4:	d12c      	bne.n	12730 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x7c>
        uint8_t len = 0U;
   126d6:	2300      	movs	r3, #0
   126d8:	74fb      	strb	r3, [r7, #19]

        if(SYNC->periodTime){
   126da:	68fb      	ldr	r3, [r7, #12]
   126dc:	691b      	ldr	r3, [r3, #16]
   126de:	2b00      	cmp	r3, #0
   126e0:	d002      	beq.n	126e8 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x34>
            ret = CO_SDO_AB_DATA_DEV_STATE;
   126e2:	4b16      	ldr	r3, [pc, #88]	; (1273c <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x88>)
   126e4:	617b      	str	r3, [r7, #20]
   126e6:	e023      	b.n	12730 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x7c>
        }
        else if((value == 1) || (value > 240 && value <= 255)){
   126e8:	7afb      	ldrb	r3, [r7, #11]
   126ea:	2b01      	cmp	r3, #1
   126ec:	d005      	beq.n	126fa <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x46>
   126ee:	7afb      	ldrb	r3, [r7, #11]
   126f0:	2bf0      	cmp	r3, #240	; 0xf0
   126f2:	dd05      	ble.n	12700 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x4c>
   126f4:	7afb      	ldrb	r3, [r7, #11]
   126f6:	2bff      	cmp	r3, #255	; 0xff
   126f8:	dc02      	bgt.n	12700 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x4c>
            ret = CO_SDO_AB_INVALID_VALUE;
   126fa:	4b11      	ldr	r3, [pc, #68]	; (12740 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x8c>)
   126fc:	617b      	str	r3, [r7, #20]
   126fe:	e017      	b.n	12730 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x7c>
        }
        else{
            SYNC->counterOverflowValue = value;
   12700:	68fb      	ldr	r3, [r7, #12]
   12702:	7afa      	ldrb	r2, [r7, #11]
   12704:	761a      	strb	r2, [r3, #24]
            if(value != 0){
   12706:	7afb      	ldrb	r3, [r7, #11]
   12708:	2b00      	cmp	r3, #0
   1270a:	d001      	beq.n	12710 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x5c>
                len = 1U;
   1270c:	2301      	movs	r3, #1
   1270e:	74fb      	strb	r3, [r7, #19]
            }

            SYNC->CANtxBuff =ptrCODriverClass->CAN_Tx_BufferInit(
   12710:	4b0c      	ldr	r3, [pc, #48]	; (12744 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x90>)
   12712:	6818      	ldr	r0, [r3, #0]
   12714:	68fb      	ldr	r3, [r7, #12]
   12716:	6b99      	ldr	r1, [r3, #56]	; 0x38
   12718:	68fb      	ldr	r3, [r7, #12]
   1271a:	68da      	ldr	r2, [r3, #12]
   1271c:	2300      	movs	r3, #0
   1271e:	9301      	str	r3, [sp, #4]
   12720:	7cfb      	ldrb	r3, [r7, #19]
   12722:	9300      	str	r3, [sp, #0]
   12724:	2300      	movs	r3, #0
   12726:	4c08      	ldr	r4, [pc, #32]	; (12748 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x94>)
   12728:	47a0      	blx	r4
   1272a:	4602      	mov	r2, r0
   1272c:	68fb      	ldr	r3, [r7, #12]
   1272e:	635a      	str	r2, [r3, #52]	; 0x34
                    len,                    /* number of data bytes */
                    0);                     /* synchronous message flag bit */
        }
    }

    return ret;
   12730:	697b      	ldr	r3, [r7, #20]
}
   12732:	4618      	mov	r0, r3
   12734:	371c      	adds	r7, #28
   12736:	46bd      	mov	sp, r7
   12738:	bd90      	pop	{r4, r7, pc}
   1273a:	bf00      	nop
   1273c:	08000022 	.word	0x08000022
   12740:	06090030 	.word	0x06090030
   12744:	200019b4 	.word	0x200019b4
   12748:	0000d901 	.word	0x0000d901

0001274c <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m>:
        uint8_t                 synchronousCounterOverflowValue,
        CO_CANmodule_t         *CANdevRx,
        uint32_t                CANdevRxIdx,
        CO_CANmodule_t         *CANdevTx,
        uint32_t                CANdevTxIdx)
{
   1274c:	b590      	push	{r4, r7, lr}
   1274e:	b08b      	sub	sp, #44	; 0x2c
   12750:	af04      	add	r7, sp, #16
   12752:	60f8      	str	r0, [r7, #12]
   12754:	60b9      	str	r1, [r7, #8]
   12756:	607a      	str	r2, [r7, #4]
   12758:	603b      	str	r3, [r7, #0]
    uint8_t len = 0;
   1275a:	2300      	movs	r3, #0
   1275c:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if(SYNC==NULL || em==NULL || SDO==NULL || operatingState==NULL ||
   1275e:	68bb      	ldr	r3, [r7, #8]
   12760:	2b00      	cmp	r3, #0
   12762:	d00e      	beq.n	12782 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
   12764:	687b      	ldr	r3, [r7, #4]
   12766:	2b00      	cmp	r3, #0
   12768:	d00b      	beq.n	12782 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
   1276a:	683b      	ldr	r3, [r7, #0]
   1276c:	2b00      	cmp	r3, #0
   1276e:	d008      	beq.n	12782 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
   12770:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12772:	2b00      	cmp	r3, #0
   12774:	d005      	beq.n	12782 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
   12776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12778:	2b00      	cmp	r3, #0
   1277a:	d002      	beq.n	12782 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
        CANdevRx==NULL || CANdevTx==NULL){
   1277c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1277e:	2b00      	cmp	r3, #0
   12780:	d102      	bne.n	12788 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x3c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
   12782:	f04f 33ff 	mov.w	r3, #4294967295
   12786:	e096      	b.n	128b6 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x16a>
    }

    /* Configure object variables */
    SYNC->isProducer = (COB_ID_SYNCMessage&0x40000000L) ? true : false;
   12788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1278a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
   1278e:	2b00      	cmp	r3, #0
   12790:	bf14      	ite	ne
   12792:	2301      	movne	r3, #1
   12794:	2300      	moveq	r3, #0
   12796:	b2db      	uxtb	r3, r3
   12798:	461a      	mov	r2, r3
   1279a:	68bb      	ldr	r3, [r7, #8]
   1279c:	721a      	strb	r2, [r3, #8]
    SYNC->COB_ID = COB_ID_SYNCMessage&0x7FF;
   1279e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   127a0:	f3c3 020a 	ubfx	r2, r3, #0, #11
   127a4:	68bb      	ldr	r3, [r7, #8]
   127a6:	60da      	str	r2, [r3, #12]

    SYNC->periodTime = communicationCyclePeriod;
   127a8:	68bb      	ldr	r3, [r7, #8]
   127aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   127ac:	611a      	str	r2, [r3, #16]
    SYNC->periodTimeoutTime = communicationCyclePeriod / 2 * 3;
   127ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   127b0:	085a      	lsrs	r2, r3, #1
   127b2:	4613      	mov	r3, r2
   127b4:	005b      	lsls	r3, r3, #1
   127b6:	441a      	add	r2, r3
   127b8:	68bb      	ldr	r3, [r7, #8]
   127ba:	615a      	str	r2, [r3, #20]
    /* overflow? */
    if(SYNC->periodTimeoutTime < communicationCyclePeriod) SYNC->periodTimeoutTime = 0xFFFFFFFFL;
   127bc:	68bb      	ldr	r3, [r7, #8]
   127be:	695a      	ldr	r2, [r3, #20]
   127c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   127c2:	429a      	cmp	r2, r3
   127c4:	d203      	bcs.n	127ce <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x82>
   127c6:	68bb      	ldr	r3, [r7, #8]
   127c8:	f04f 32ff 	mov.w	r2, #4294967295
   127cc:	615a      	str	r2, [r3, #20]

    SYNC->counterOverflowValue = synchronousCounterOverflowValue;
   127ce:	68bb      	ldr	r3, [r7, #8]
   127d0:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
   127d4:	761a      	strb	r2, [r3, #24]
    if(synchronousCounterOverflowValue) len = 1;
   127d6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
   127da:	2b00      	cmp	r3, #0
   127dc:	d001      	beq.n	127e2 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x96>
   127de:	2301      	movs	r3, #1
   127e0:	75fb      	strb	r3, [r7, #23]

    SYNC->curentSyncTimeIsInsideWindow = true;
   127e2:	68bb      	ldr	r3, [r7, #8]
   127e4:	2201      	movs	r2, #1
   127e6:	765a      	strb	r2, [r3, #25]

    SYNC->CANrxNew = false;
   127e8:	68bb      	ldr	r3, [r7, #8]
   127ea:	2200      	movs	r2, #0
   127ec:	769a      	strb	r2, [r3, #26]
    SYNC->CANrxToggle = false;
   127ee:	68bb      	ldr	r3, [r7, #8]
   127f0:	2200      	movs	r2, #0
   127f2:	76da      	strb	r2, [r3, #27]
    SYNC->timer = 0;
   127f4:	68bb      	ldr	r3, [r7, #8]
   127f6:	2200      	movs	r2, #0
   127f8:	621a      	str	r2, [r3, #32]
    SYNC->counter = 0;
   127fa:	68bb      	ldr	r3, [r7, #8]
   127fc:	2200      	movs	r2, #0
   127fe:	771a      	strb	r2, [r3, #28]
    SYNC->receiveError = 0U;
   12800:	68bb      	ldr	r3, [r7, #8]
   12802:	2200      	movs	r2, #0
   12804:	625a      	str	r2, [r3, #36]	; 0x24

    SYNC->em = em;
   12806:	68bb      	ldr	r3, [r7, #8]
   12808:	687a      	ldr	r2, [r7, #4]
   1280a:	601a      	str	r2, [r3, #0]
    SYNC->operatingState = operatingState;
   1280c:	68bb      	ldr	r3, [r7, #8]
   1280e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   12810:	605a      	str	r2, [r3, #4]

    SYNC->CANdevRx = CANdevRx;
   12812:	68bb      	ldr	r3, [r7, #8]
   12814:	6bba      	ldr	r2, [r7, #56]	; 0x38
   12816:	629a      	str	r2, [r3, #40]	; 0x28
    SYNC->CANdevRxIdx = CANdevRxIdx;
   12818:	68bb      	ldr	r3, [r7, #8]
   1281a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1281c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Configure Object dictionary entry at index 0x1005, 0x1006 and 0x1019 */
    ptrCODriverClass->CO_OD_configure( OD_H1005_COBID_SYNC,        CO_ODF_1005, (void*)SYNC, 0, 0);
   1281e:	4b28      	ldr	r3, [pc, #160]	; (128c0 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
   12820:	681b      	ldr	r3, [r3, #0]
   12822:	1d18      	adds	r0, r3, #4
   12824:	2300      	movs	r3, #0
   12826:	9301      	str	r3, [sp, #4]
   12828:	2300      	movs	r3, #0
   1282a:	9300      	str	r3, [sp, #0]
   1282c:	68bb      	ldr	r3, [r7, #8]
   1282e:	4a25      	ldr	r2, [pc, #148]	; (128c4 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x178>)
   12830:	f241 0105 	movw	r1, #4101	; 0x1005
   12834:	4c24      	ldr	r4, [pc, #144]	; (128c8 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x17c>)
   12836:	47a0      	blx	r4
    ptrCODriverClass->CO_OD_configure( OD_H1006_COMM_CYCL_PERIOD,  CO_ODF_1006, (void*)SYNC, 0, 0);
   12838:	4b21      	ldr	r3, [pc, #132]	; (128c0 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
   1283a:	681b      	ldr	r3, [r3, #0]
   1283c:	1d18      	adds	r0, r3, #4
   1283e:	2300      	movs	r3, #0
   12840:	9301      	str	r3, [sp, #4]
   12842:	2300      	movs	r3, #0
   12844:	9300      	str	r3, [sp, #0]
   12846:	68bb      	ldr	r3, [r7, #8]
   12848:	4a20      	ldr	r2, [pc, #128]	; (128cc <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x180>)
   1284a:	f241 0106 	movw	r1, #4102	; 0x1006
   1284e:	4c1e      	ldr	r4, [pc, #120]	; (128c8 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x17c>)
   12850:	47a0      	blx	r4
    ptrCODriverClass->CO_OD_configure( OD_H1019_SYNC_CNT_OVERFLOW, CO_ODF_1019, (void*)SYNC, 0, 0);
   12852:	4b1b      	ldr	r3, [pc, #108]	; (128c0 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
   12854:	681b      	ldr	r3, [r3, #0]
   12856:	1d18      	adds	r0, r3, #4
   12858:	2300      	movs	r3, #0
   1285a:	9301      	str	r3, [sp, #4]
   1285c:	2300      	movs	r3, #0
   1285e:	9300      	str	r3, [sp, #0]
   12860:	68bb      	ldr	r3, [r7, #8]
   12862:	4a1b      	ldr	r2, [pc, #108]	; (128d0 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x184>)
   12864:	f241 0119 	movw	r1, #4121	; 0x1019
   12868:	4c17      	ldr	r4, [pc, #92]	; (128c8 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x17c>)
   1286a:	47a0      	blx	r4

    /* configure SYNC CAN reception */
    ptrCODriverClass->CAN_Rx_BufferInit(
   1286c:	4b14      	ldr	r3, [pc, #80]	; (128c0 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
   1286e:	6818      	ldr	r0, [r3, #0]
   12870:	68bb      	ldr	r3, [r7, #8]
   12872:	68da      	ldr	r2, [r3, #12]
            CANdevRxIdx,            /* rx buffer index */
            SYNC->COB_ID,           /* CAN identifier */
            0x7FF,                  /* mask */
            0,                      /* rtr */
            (void*)SYNC,            /* object passed to receive function */
            CO_SYNC_receive);       /* this function will process received message */
   12874:	4b17      	ldr	r3, [pc, #92]	; (128d4 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x188>)
   12876:	9302      	str	r3, [sp, #8]
   12878:	68bb      	ldr	r3, [r7, #8]
   1287a:	9301      	str	r3, [sp, #4]
   1287c:	2300      	movs	r3, #0
   1287e:	9300      	str	r3, [sp, #0]
   12880:	f240 73ff 	movw	r3, #2047	; 0x7ff
   12884:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   12886:	4c14      	ldr	r4, [pc, #80]	; (128d8 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x18c>)
   12888:	47a0      	blx	r4

    /* configure SYNC CAN transmission */
    SYNC->CANdevTx = CANdevTx;
   1288a:	68bb      	ldr	r3, [r7, #8]
   1288c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1288e:	631a      	str	r2, [r3, #48]	; 0x30
    SYNC->CANdevTxIdx = CANdevTxIdx;
   12890:	68bb      	ldr	r3, [r7, #8]
   12892:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   12894:	639a      	str	r2, [r3, #56]	; 0x38
    SYNC->CANtxBuff =  ptrCODriverClass->CAN_Tx_BufferInit(
   12896:	4b0a      	ldr	r3, [pc, #40]	; (128c0 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
   12898:	6818      	ldr	r0, [r3, #0]
   1289a:	68bb      	ldr	r3, [r7, #8]
   1289c:	68da      	ldr	r2, [r3, #12]
   1289e:	2300      	movs	r3, #0
   128a0:	9301      	str	r3, [sp, #4]
   128a2:	7dfb      	ldrb	r3, [r7, #23]
   128a4:	9300      	str	r3, [sp, #0]
   128a6:	2300      	movs	r3, #0
   128a8:	6c79      	ldr	r1, [r7, #68]	; 0x44
   128aa:	4c0c      	ldr	r4, [pc, #48]	; (128dc <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x190>)
   128ac:	47a0      	blx	r4
   128ae:	4602      	mov	r2, r0
   128b0:	68bb      	ldr	r3, [r7, #8]
   128b2:	635a      	str	r2, [r3, #52]	; 0x34
            SYNC->COB_ID,           /* CAN identifier */
            0,                      /* rtr */
            len,                    /* number of data bytes */
            0);                     /* synchronous message flag bit */

    return CO_ERROR_NO;
   128b4:	2300      	movs	r3, #0
}
   128b6:	4618      	mov	r0, r3
   128b8:	371c      	adds	r7, #28
   128ba:	46bd      	mov	sp, r7
   128bc:	bd90      	pop	{r4, r7, pc}
   128be:	bf00      	nop
   128c0:	200019b4 	.word	0x200019b4
   128c4:	00012531 	.word	0x00012531
   128c8:	00010921 	.word	0x00010921
   128cc:	00012635 	.word	0x00012635
   128d0:	000126b5 	.word	0x000126b5
   128d4:	0001249d 	.word	0x0001249d
   128d8:	0000d801 	.word	0x0000d801
   128dc:	0000d901 	.word	0x0000d901

000128e0 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm>:
/******************************************************************************/
uint8_t CO_SYNC_Class::CO_SYNC_process(
        CO_SYNC_t              *SYNC,
        uint32_t                timeDifference_us,
        uint32_t                ObjDict_synchronousWindowLength)
{
   128e0:	b590      	push	{r4, r7, lr}
   128e2:	b089      	sub	sp, #36	; 0x24
   128e4:	af02      	add	r7, sp, #8
   128e6:	60f8      	str	r0, [r7, #12]
   128e8:	60b9      	str	r1, [r7, #8]
   128ea:	607a      	str	r2, [r7, #4]
   128ec:	603b      	str	r3, [r7, #0]
    uint8_t ret = 0;
   128ee:	2300      	movs	r3, #0
   128f0:	75fb      	strb	r3, [r7, #23]
    uint32_t timerNew;

    if(*SYNC->operatingState == CO_NMT_OPERATIONAL || *SYNC->operatingState == CO_NMT_PRE_OPERATIONAL){
   128f2:	68bb      	ldr	r3, [r7, #8]
   128f4:	685b      	ldr	r3, [r3, #4]
   128f6:	781b      	ldrb	r3, [r3, #0]
   128f8:	2b05      	cmp	r3, #5
   128fa:	d005      	beq.n	12908 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x28>
   128fc:	68bb      	ldr	r3, [r7, #8]
   128fe:	685b      	ldr	r3, [r3, #4]
   12900:	781b      	ldrb	r3, [r3, #0]
   12902:	2b7f      	cmp	r3, #127	; 0x7f
   12904:	f040 808e 	bne.w	12a24 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x144>
        /* update sync timer, no overflow */
        timerNew = SYNC->timer + timeDifference_us;
   12908:	68bb      	ldr	r3, [r7, #8]
   1290a:	6a1a      	ldr	r2, [r3, #32]
   1290c:	687b      	ldr	r3, [r7, #4]
   1290e:	4413      	add	r3, r2
   12910:	613b      	str	r3, [r7, #16]
        if(timerNew > SYNC->timer) SYNC->timer = timerNew;
   12912:	68bb      	ldr	r3, [r7, #8]
   12914:	6a1a      	ldr	r2, [r3, #32]
   12916:	693b      	ldr	r3, [r7, #16]
   12918:	429a      	cmp	r2, r3
   1291a:	d202      	bcs.n	12922 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x42>
   1291c:	68bb      	ldr	r3, [r7, #8]
   1291e:	693a      	ldr	r2, [r7, #16]
   12920:	621a      	str	r2, [r3, #32]

        /* was SYNC just received */
        if(SYNC->CANrxNew){
   12922:	68bb      	ldr	r3, [r7, #8]
   12924:	7e9b      	ldrb	r3, [r3, #26]
   12926:	2b00      	cmp	r3, #0
   12928:	d007      	beq.n	1293a <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x5a>
            SYNC->timer = 0;
   1292a:	68bb      	ldr	r3, [r7, #8]
   1292c:	2200      	movs	r2, #0
   1292e:	621a      	str	r2, [r3, #32]
            ret = 1;
   12930:	2301      	movs	r3, #1
   12932:	75fb      	strb	r3, [r7, #23]
            SYNC->CANrxNew = false;
   12934:	68bb      	ldr	r3, [r7, #8]
   12936:	2200      	movs	r2, #0
   12938:	769a      	strb	r2, [r3, #26]
        }

        /* SYNC producer */
        if(SYNC->isProducer && SYNC->periodTime){
   1293a:	68bb      	ldr	r3, [r7, #8]
   1293c:	7a1b      	ldrb	r3, [r3, #8]
   1293e:	2b00      	cmp	r3, #0
   12940:	d03a      	beq.n	129b8 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0xd8>
   12942:	68bb      	ldr	r3, [r7, #8]
   12944:	691b      	ldr	r3, [r3, #16]
   12946:	2b00      	cmp	r3, #0
   12948:	d036      	beq.n	129b8 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0xd8>
            if(SYNC->timer >= SYNC->periodTime){
   1294a:	68bb      	ldr	r3, [r7, #8]
   1294c:	6a1a      	ldr	r2, [r3, #32]
   1294e:	68bb      	ldr	r3, [r7, #8]
   12950:	691b      	ldr	r3, [r3, #16]
   12952:	429a      	cmp	r2, r3
   12954:	d330      	bcc.n	129b8 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0xd8>
                if(++SYNC->counter > SYNC->counterOverflowValue) SYNC->counter = 1;
   12956:	68bb      	ldr	r3, [r7, #8]
   12958:	7f1b      	ldrb	r3, [r3, #28]
   1295a:	3301      	adds	r3, #1
   1295c:	b2da      	uxtb	r2, r3
   1295e:	68bb      	ldr	r3, [r7, #8]
   12960:	771a      	strb	r2, [r3, #28]
   12962:	68bb      	ldr	r3, [r7, #8]
   12964:	7f1b      	ldrb	r3, [r3, #28]
   12966:	461a      	mov	r2, r3
   12968:	68bb      	ldr	r3, [r7, #8]
   1296a:	7e1b      	ldrb	r3, [r3, #24]
   1296c:	429a      	cmp	r2, r3
   1296e:	bfcc      	ite	gt
   12970:	2301      	movgt	r3, #1
   12972:	2300      	movle	r3, #0
   12974:	b2db      	uxtb	r3, r3
   12976:	2b00      	cmp	r3, #0
   12978:	d002      	beq.n	12980 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0xa0>
   1297a:	68bb      	ldr	r3, [r7, #8]
   1297c:	2201      	movs	r2, #1
   1297e:	771a      	strb	r2, [r3, #28]
                SYNC->timer = 0;
   12980:	68bb      	ldr	r3, [r7, #8]
   12982:	2200      	movs	r2, #0
   12984:	621a      	str	r2, [r3, #32]
                ret = 1;
   12986:	2301      	movs	r3, #1
   12988:	75fb      	strb	r3, [r7, #23]
                SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
   1298a:	68bb      	ldr	r3, [r7, #8]
   1298c:	7edb      	ldrb	r3, [r3, #27]
   1298e:	2b00      	cmp	r3, #0
   12990:	bf0c      	ite	eq
   12992:	2301      	moveq	r3, #1
   12994:	2300      	movne	r3, #0
   12996:	b2db      	uxtb	r3, r3
   12998:	461a      	mov	r2, r3
   1299a:	68bb      	ldr	r3, [r7, #8]
   1299c:	76da      	strb	r2, [r3, #27]
                SYNC->CANtxBuff->data[0] = SYNC->counter;
   1299e:	68bb      	ldr	r3, [r7, #8]
   129a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   129a2:	68ba      	ldr	r2, [r7, #8]
   129a4:	7f12      	ldrb	r2, [r2, #28]
   129a6:	715a      	strb	r2, [r3, #5]
                ptrCODriverClass->CAN_Send(SYNC->CANtxBuff);
   129a8:	4b2d      	ldr	r3, [pc, #180]	; (12a60 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x180>)
   129aa:	681a      	ldr	r2, [r3, #0]
   129ac:	68bb      	ldr	r3, [r7, #8]
   129ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   129b0:	4619      	mov	r1, r3
   129b2:	4610      	mov	r0, r2
   129b4:	4b2b      	ldr	r3, [pc, #172]	; (12a64 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x184>)
   129b6:	4798      	blx	r3
            }
        }

        /* Synchronous PDOs are allowed only inside time window */
        if(ObjDict_synchronousWindowLength){
   129b8:	683b      	ldr	r3, [r7, #0]
   129ba:	2b00      	cmp	r3, #0
   129bc:	d012      	beq.n	129e4 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x104>
            if(SYNC->timer > ObjDict_synchronousWindowLength){
   129be:	68bb      	ldr	r3, [r7, #8]
   129c0:	6a1a      	ldr	r2, [r3, #32]
   129c2:	683b      	ldr	r3, [r7, #0]
   129c4:	429a      	cmp	r2, r3
   129c6:	d909      	bls.n	129dc <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0xfc>
                if(SYNC->curentSyncTimeIsInsideWindow){
   129c8:	68bb      	ldr	r3, [r7, #8]
   129ca:	7e5b      	ldrb	r3, [r3, #25]
   129cc:	2b00      	cmp	r3, #0
   129ce:	d001      	beq.n	129d4 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0xf4>
                    ret = 2;
   129d0:	2302      	movs	r3, #2
   129d2:	75fb      	strb	r3, [r7, #23]
                }
                SYNC->curentSyncTimeIsInsideWindow = false;
   129d4:	68bb      	ldr	r3, [r7, #8]
   129d6:	2200      	movs	r2, #0
   129d8:	765a      	strb	r2, [r3, #25]
   129da:	e006      	b.n	129ea <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x10a>
            }
            else{
                SYNC->curentSyncTimeIsInsideWindow = true;
   129dc:	68bb      	ldr	r3, [r7, #8]
   129de:	2201      	movs	r2, #1
   129e0:	765a      	strb	r2, [r3, #25]
   129e2:	e002      	b.n	129ea <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x10a>
            }
        }
        else{
            SYNC->curentSyncTimeIsInsideWindow = true;
   129e4:	68bb      	ldr	r3, [r7, #8]
   129e6:	2201      	movs	r2, #1
   129e8:	765a      	strb	r2, [r3, #25]
        }

        /* Verify timeout of SYNC */
        if(SYNC->periodTime && SYNC->timer > SYNC->periodTimeoutTime && *SYNC->operatingState == CO_NMT_OPERATIONAL)
   129ea:	68bb      	ldr	r3, [r7, #8]
   129ec:	691b      	ldr	r3, [r3, #16]
   129ee:	2b00      	cmp	r3, #0
   129f0:	d01c      	beq.n	12a2c <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x14c>
   129f2:	68bb      	ldr	r3, [r7, #8]
   129f4:	6a1a      	ldr	r2, [r3, #32]
   129f6:	68bb      	ldr	r3, [r7, #8]
   129f8:	695b      	ldr	r3, [r3, #20]
   129fa:	429a      	cmp	r2, r3
   129fc:	d916      	bls.n	12a2c <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x14c>
   129fe:	68bb      	ldr	r3, [r7, #8]
   12a00:	685b      	ldr	r3, [r3, #4]
   12a02:	781b      	ldrb	r3, [r3, #0]
   12a04:	2b05      	cmp	r3, #5
   12a06:	d111      	bne.n	12a2c <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x14c>
             ptrCODriverClass->EM_ErrorReport(SYNC->em, CO_EM_SYNC_TIME_OUT, CO_EMC_COMMUNICATION, SYNC->timer);
   12a08:	4b15      	ldr	r3, [pc, #84]	; (12a60 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x180>)
   12a0a:	681b      	ldr	r3, [r3, #0]
   12a0c:	1d18      	adds	r0, r3, #4
   12a0e:	68bb      	ldr	r3, [r7, #8]
   12a10:	6819      	ldr	r1, [r3, #0]
   12a12:	68bb      	ldr	r3, [r7, #8]
   12a14:	6a1b      	ldr	r3, [r3, #32]
   12a16:	9300      	str	r3, [sp, #0]
   12a18:	f44f 4301 	mov.w	r3, #33024	; 0x8100
   12a1c:	2218      	movs	r2, #24
   12a1e:	4c12      	ldr	r4, [pc, #72]	; (12a68 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x188>)
   12a20:	47a0      	blx	r4
        if(SYNC->periodTime && SYNC->timer > SYNC->periodTimeoutTime && *SYNC->operatingState == CO_NMT_OPERATIONAL)
   12a22:	e003      	b.n	12a2c <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x14c>
    }
    else {
        SYNC->CANrxNew = false;
   12a24:	68bb      	ldr	r3, [r7, #8]
   12a26:	2200      	movs	r2, #0
   12a28:	769a      	strb	r2, [r3, #26]
   12a2a:	e000      	b.n	12a2e <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x14e>
        if(SYNC->periodTime && SYNC->timer > SYNC->periodTimeoutTime && *SYNC->operatingState == CO_NMT_OPERATIONAL)
   12a2c:	bf00      	nop
    }

    /* verify error from receive function */
    if(SYNC->receiveError != 0U){
   12a2e:	68bb      	ldr	r3, [r7, #8]
   12a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   12a32:	2b00      	cmp	r3, #0
   12a34:	d00f      	beq.n	12a56 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x176>
        ptrCODriverClass->EM_ErrorReport(SYNC->em, CO_EM_SYNC_LENGTH, CO_EMC_SYNC_DATA_LENGTH, (uint32_t)SYNC->receiveError);
   12a36:	4b0a      	ldr	r3, [pc, #40]	; (12a60 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x180>)
   12a38:	681b      	ldr	r3, [r3, #0]
   12a3a:	1d18      	adds	r0, r3, #4
   12a3c:	68bb      	ldr	r3, [r7, #8]
   12a3e:	6819      	ldr	r1, [r3, #0]
   12a40:	68bb      	ldr	r3, [r7, #8]
   12a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   12a44:	9300      	str	r3, [sp, #0]
   12a46:	f248 2340 	movw	r3, #33344	; 0x8240
   12a4a:	2219      	movs	r2, #25
   12a4c:	4c06      	ldr	r4, [pc, #24]	; (12a68 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x188>)
   12a4e:	47a0      	blx	r4
        SYNC->receiveError = 0U;
   12a50:	68bb      	ldr	r3, [r7, #8]
   12a52:	2200      	movs	r2, #0
   12a54:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return ret;
   12a56:	7dfb      	ldrb	r3, [r7, #23]
   12a58:	4618      	mov	r0, r3
   12a5a:	371c      	adds	r7, #28
   12a5c:	46bd      	mov	sp, r7
   12a5e:	bd90      	pop	{r4, r7, pc}
   12a60:	200019b4 	.word	0x200019b4
   12a64:	0000d9ad 	.word	0x0000d9ad
   12a68:	0000e441 	.word	0x0000e441

00012a6c <_ZN14CO_CRC16_ClassC1Ev>:
	0x6E17U, 0x7E36U, 0x4E55U, 0x5E74U, 0x2E93U, 0x3EB2U, 0x0ED1U, 0x1EF0U
};


// default constructor
CO_CRC16_Class::CO_CRC16_Class()
   12a6c:	b480      	push	{r7}
   12a6e:	b083      	sub	sp, #12
   12a70:	af00      	add	r7, sp, #0
   12a72:	6078      	str	r0, [r7, #4]
{
} //CO_CRC16_Class
   12a74:	687b      	ldr	r3, [r7, #4]
   12a76:	4618      	mov	r0, r3
   12a78:	370c      	adds	r7, #12
   12a7a:	46bd      	mov	sp, r7
   12a7c:	bc80      	pop	{r7}
   12a7e:	4770      	bx	lr

00012a80 <_ZN14CO_CRC16_ClassD1Ev>:

// default destructor
CO_CRC16_Class::~CO_CRC16_Class()
   12a80:	b480      	push	{r7}
   12a82:	b083      	sub	sp, #12
   12a84:	af00      	add	r7, sp, #0
   12a86:	6078      	str	r0, [r7, #4]
{
} //~CO_CRC16_Class
   12a88:	687b      	ldr	r3, [r7, #4]
   12a8a:	4618      	mov	r0, r3
   12a8c:	370c      	adds	r7, #12
   12a8e:	46bd      	mov	sp, r7
   12a90:	bc80      	pop	{r7}
   12a92:	4770      	bx	lr

00012a94 <_ZN14CO_CRC16_Class11crc16_ccittEPKhjt>:
/******************************************************************************/
unsigned short CO_CRC16_Class::crc16_ccitt(
const unsigned char     block[],
unsigned int            blockLength,
unsigned short          crc)
{
   12a94:	b480      	push	{r7}
   12a96:	b087      	sub	sp, #28
   12a98:	af00      	add	r7, sp, #0
   12a9a:	60f8      	str	r0, [r7, #12]
   12a9c:	60b9      	str	r1, [r7, #8]
   12a9e:	607a      	str	r2, [r7, #4]
   12aa0:	807b      	strh	r3, [r7, #2]
	unsigned int i;

	for(i=0U; i<blockLength; i++){
   12aa2:	2300      	movs	r3, #0
   12aa4:	617b      	str	r3, [r7, #20]
   12aa6:	697a      	ldr	r2, [r7, #20]
   12aa8:	687b      	ldr	r3, [r7, #4]
   12aaa:	429a      	cmp	r2, r3
   12aac:	d217      	bcs.n	12ade <_ZN14CO_CRC16_Class11crc16_ccittEPKhjt+0x4a>
		unsigned short tmp = (crc >> 8) ^ (unsigned short) block[i];
   12aae:	887b      	ldrh	r3, [r7, #2]
   12ab0:	121b      	asrs	r3, r3, #8
   12ab2:	b21a      	sxth	r2, r3
   12ab4:	68b9      	ldr	r1, [r7, #8]
   12ab6:	697b      	ldr	r3, [r7, #20]
   12ab8:	440b      	add	r3, r1
   12aba:	781b      	ldrb	r3, [r3, #0]
   12abc:	b21b      	sxth	r3, r3
   12abe:	4053      	eors	r3, r2
   12ac0:	b21b      	sxth	r3, r3
   12ac2:	827b      	strh	r3, [r7, #18]
		crc = ((unsigned short)(crc << 8U)) ^ crc16_ccitt_table[tmp];
   12ac4:	887b      	ldrh	r3, [r7, #2]
   12ac6:	021b      	lsls	r3, r3, #8
   12ac8:	b29a      	uxth	r2, r3
   12aca:	8a7b      	ldrh	r3, [r7, #18]
   12acc:	4907      	ldr	r1, [pc, #28]	; (12aec <_ZN14CO_CRC16_Class11crc16_ccittEPKhjt+0x58>)
   12ace:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   12ad2:	4053      	eors	r3, r2
   12ad4:	807b      	strh	r3, [r7, #2]
	for(i=0U; i<blockLength; i++){
   12ad6:	697b      	ldr	r3, [r7, #20]
   12ad8:	3301      	adds	r3, #1
   12ada:	617b      	str	r3, [r7, #20]
   12adc:	e7e3      	b.n	12aa6 <_ZN14CO_CRC16_Class11crc16_ccittEPKhjt+0x12>
	}
	return crc;
   12ade:	887b      	ldrh	r3, [r7, #2]
   12ae0:	4618      	mov	r0, r3
   12ae2:	371c      	adds	r7, #28
   12ae4:	46bd      	mov	sp, r7
   12ae6:	bc80      	pop	{r7}
   12ae8:	4770      	bx	lr
   12aea:	bf00      	nop
   12aec:	00013cf4 	.word	0x00013cf4

00012af0 <__aeabi_atexit>:
   12af0:	460b      	mov	r3, r1
   12af2:	4601      	mov	r1, r0
   12af4:	4618      	mov	r0, r3
   12af6:	f000 b801 	b.w	12afc <__cxa_atexit>
   12afa:	bf00      	nop

00012afc <__cxa_atexit>:
   12afc:	4613      	mov	r3, r2
   12afe:	460a      	mov	r2, r1
   12b00:	4601      	mov	r1, r0
   12b02:	2002      	movs	r0, #2
   12b04:	f000 b91e 	b.w	12d44 <__register_exitproc>

00012b08 <ffs>:
   12b08:	b140      	cbz	r0, 12b1c <ffs+0x14>
   12b0a:	2300      	movs	r3, #0
   12b0c:	fa40 f103 	asr.w	r1, r0, r3
   12b10:	1c5a      	adds	r2, r3, #1
   12b12:	07c9      	lsls	r1, r1, #31
   12b14:	4613      	mov	r3, r2
   12b16:	d5f9      	bpl.n	12b0c <ffs+0x4>
   12b18:	4610      	mov	r0, r2
   12b1a:	4770      	bx	lr
   12b1c:	4602      	mov	r2, r0
   12b1e:	4610      	mov	r0, r2
   12b20:	4770      	bx	lr
   12b22:	bf00      	nop

00012b24 <__libc_init_array>:
   12b24:	b570      	push	{r4, r5, r6, lr}
   12b26:	4e0f      	ldr	r6, [pc, #60]	; (12b64 <__libc_init_array+0x40>)
   12b28:	4d0f      	ldr	r5, [pc, #60]	; (12b68 <__libc_init_array+0x44>)
   12b2a:	1b76      	subs	r6, r6, r5
   12b2c:	10b6      	asrs	r6, r6, #2
   12b2e:	bf18      	it	ne
   12b30:	2400      	movne	r4, #0
   12b32:	d005      	beq.n	12b40 <__libc_init_array+0x1c>
   12b34:	3401      	adds	r4, #1
   12b36:	f855 3b04 	ldr.w	r3, [r5], #4
   12b3a:	4798      	blx	r3
   12b3c:	42a6      	cmp	r6, r4
   12b3e:	d1f9      	bne.n	12b34 <__libc_init_array+0x10>
   12b40:	4e0a      	ldr	r6, [pc, #40]	; (12b6c <__libc_init_array+0x48>)
   12b42:	4d0b      	ldr	r5, [pc, #44]	; (12b70 <__libc_init_array+0x4c>)
   12b44:	1b76      	subs	r6, r6, r5
   12b46:	f001 f9d7 	bl	13ef8 <_init>
   12b4a:	10b6      	asrs	r6, r6, #2
   12b4c:	bf18      	it	ne
   12b4e:	2400      	movne	r4, #0
   12b50:	d006      	beq.n	12b60 <__libc_init_array+0x3c>
   12b52:	3401      	adds	r4, #1
   12b54:	f855 3b04 	ldr.w	r3, [r5], #4
   12b58:	4798      	blx	r3
   12b5a:	42a6      	cmp	r6, r4
   12b5c:	d1f9      	bne.n	12b52 <__libc_init_array+0x2e>
   12b5e:	bd70      	pop	{r4, r5, r6, pc}
   12b60:	bd70      	pop	{r4, r5, r6, pc}
   12b62:	bf00      	nop
   12b64:	00013f04 	.word	0x00013f04
   12b68:	00013f04 	.word	0x00013f04
   12b6c:	00013f10 	.word	0x00013f10
   12b70:	00013f04 	.word	0x00013f04

00012b74 <memcpy>:
   12b74:	4684      	mov	ip, r0
   12b76:	ea41 0300 	orr.w	r3, r1, r0
   12b7a:	f013 0303 	ands.w	r3, r3, #3
   12b7e:	d16d      	bne.n	12c5c <memcpy+0xe8>
   12b80:	3a40      	subs	r2, #64	; 0x40
   12b82:	d341      	bcc.n	12c08 <memcpy+0x94>
   12b84:	f851 3b04 	ldr.w	r3, [r1], #4
   12b88:	f840 3b04 	str.w	r3, [r0], #4
   12b8c:	f851 3b04 	ldr.w	r3, [r1], #4
   12b90:	f840 3b04 	str.w	r3, [r0], #4
   12b94:	f851 3b04 	ldr.w	r3, [r1], #4
   12b98:	f840 3b04 	str.w	r3, [r0], #4
   12b9c:	f851 3b04 	ldr.w	r3, [r1], #4
   12ba0:	f840 3b04 	str.w	r3, [r0], #4
   12ba4:	f851 3b04 	ldr.w	r3, [r1], #4
   12ba8:	f840 3b04 	str.w	r3, [r0], #4
   12bac:	f851 3b04 	ldr.w	r3, [r1], #4
   12bb0:	f840 3b04 	str.w	r3, [r0], #4
   12bb4:	f851 3b04 	ldr.w	r3, [r1], #4
   12bb8:	f840 3b04 	str.w	r3, [r0], #4
   12bbc:	f851 3b04 	ldr.w	r3, [r1], #4
   12bc0:	f840 3b04 	str.w	r3, [r0], #4
   12bc4:	f851 3b04 	ldr.w	r3, [r1], #4
   12bc8:	f840 3b04 	str.w	r3, [r0], #4
   12bcc:	f851 3b04 	ldr.w	r3, [r1], #4
   12bd0:	f840 3b04 	str.w	r3, [r0], #4
   12bd4:	f851 3b04 	ldr.w	r3, [r1], #4
   12bd8:	f840 3b04 	str.w	r3, [r0], #4
   12bdc:	f851 3b04 	ldr.w	r3, [r1], #4
   12be0:	f840 3b04 	str.w	r3, [r0], #4
   12be4:	f851 3b04 	ldr.w	r3, [r1], #4
   12be8:	f840 3b04 	str.w	r3, [r0], #4
   12bec:	f851 3b04 	ldr.w	r3, [r1], #4
   12bf0:	f840 3b04 	str.w	r3, [r0], #4
   12bf4:	f851 3b04 	ldr.w	r3, [r1], #4
   12bf8:	f840 3b04 	str.w	r3, [r0], #4
   12bfc:	f851 3b04 	ldr.w	r3, [r1], #4
   12c00:	f840 3b04 	str.w	r3, [r0], #4
   12c04:	3a40      	subs	r2, #64	; 0x40
   12c06:	d2bd      	bcs.n	12b84 <memcpy+0x10>
   12c08:	3230      	adds	r2, #48	; 0x30
   12c0a:	d311      	bcc.n	12c30 <memcpy+0xbc>
   12c0c:	f851 3b04 	ldr.w	r3, [r1], #4
   12c10:	f840 3b04 	str.w	r3, [r0], #4
   12c14:	f851 3b04 	ldr.w	r3, [r1], #4
   12c18:	f840 3b04 	str.w	r3, [r0], #4
   12c1c:	f851 3b04 	ldr.w	r3, [r1], #4
   12c20:	f840 3b04 	str.w	r3, [r0], #4
   12c24:	f851 3b04 	ldr.w	r3, [r1], #4
   12c28:	f840 3b04 	str.w	r3, [r0], #4
   12c2c:	3a10      	subs	r2, #16
   12c2e:	d2ed      	bcs.n	12c0c <memcpy+0x98>
   12c30:	320c      	adds	r2, #12
   12c32:	d305      	bcc.n	12c40 <memcpy+0xcc>
   12c34:	f851 3b04 	ldr.w	r3, [r1], #4
   12c38:	f840 3b04 	str.w	r3, [r0], #4
   12c3c:	3a04      	subs	r2, #4
   12c3e:	d2f9      	bcs.n	12c34 <memcpy+0xc0>
   12c40:	3204      	adds	r2, #4
   12c42:	d008      	beq.n	12c56 <memcpy+0xe2>
   12c44:	07d2      	lsls	r2, r2, #31
   12c46:	bf1c      	itt	ne
   12c48:	f811 3b01 	ldrbne.w	r3, [r1], #1
   12c4c:	f800 3b01 	strbne.w	r3, [r0], #1
   12c50:	d301      	bcc.n	12c56 <memcpy+0xe2>
   12c52:	880b      	ldrh	r3, [r1, #0]
   12c54:	8003      	strh	r3, [r0, #0]
   12c56:	4660      	mov	r0, ip
   12c58:	4770      	bx	lr
   12c5a:	bf00      	nop
   12c5c:	2a08      	cmp	r2, #8
   12c5e:	d313      	bcc.n	12c88 <memcpy+0x114>
   12c60:	078b      	lsls	r3, r1, #30
   12c62:	d08d      	beq.n	12b80 <memcpy+0xc>
   12c64:	f010 0303 	ands.w	r3, r0, #3
   12c68:	d08a      	beq.n	12b80 <memcpy+0xc>
   12c6a:	f1c3 0304 	rsb	r3, r3, #4
   12c6e:	1ad2      	subs	r2, r2, r3
   12c70:	07db      	lsls	r3, r3, #31
   12c72:	bf1c      	itt	ne
   12c74:	f811 3b01 	ldrbne.w	r3, [r1], #1
   12c78:	f800 3b01 	strbne.w	r3, [r0], #1
   12c7c:	d380      	bcc.n	12b80 <memcpy+0xc>
   12c7e:	f831 3b02 	ldrh.w	r3, [r1], #2
   12c82:	f820 3b02 	strh.w	r3, [r0], #2
   12c86:	e77b      	b.n	12b80 <memcpy+0xc>
   12c88:	3a04      	subs	r2, #4
   12c8a:	d3d9      	bcc.n	12c40 <memcpy+0xcc>
   12c8c:	3a01      	subs	r2, #1
   12c8e:	f811 3b01 	ldrb.w	r3, [r1], #1
   12c92:	f800 3b01 	strb.w	r3, [r0], #1
   12c96:	d2f9      	bcs.n	12c8c <memcpy+0x118>
   12c98:	780b      	ldrb	r3, [r1, #0]
   12c9a:	7003      	strb	r3, [r0, #0]
   12c9c:	784b      	ldrb	r3, [r1, #1]
   12c9e:	7043      	strb	r3, [r0, #1]
   12ca0:	788b      	ldrb	r3, [r1, #2]
   12ca2:	7083      	strb	r3, [r0, #2]
   12ca4:	4660      	mov	r0, ip
   12ca6:	4770      	bx	lr

00012ca8 <memset>:
   12ca8:	b470      	push	{r4, r5, r6}
   12caa:	0786      	lsls	r6, r0, #30
   12cac:	d046      	beq.n	12d3c <memset+0x94>
   12cae:	1e54      	subs	r4, r2, #1
   12cb0:	2a00      	cmp	r2, #0
   12cb2:	d041      	beq.n	12d38 <memset+0x90>
   12cb4:	b2ca      	uxtb	r2, r1
   12cb6:	4603      	mov	r3, r0
   12cb8:	e002      	b.n	12cc0 <memset+0x18>
   12cba:	f114 34ff 	adds.w	r4, r4, #4294967295
   12cbe:	d33b      	bcc.n	12d38 <memset+0x90>
   12cc0:	f803 2b01 	strb.w	r2, [r3], #1
   12cc4:	079d      	lsls	r5, r3, #30
   12cc6:	d1f8      	bne.n	12cba <memset+0x12>
   12cc8:	2c03      	cmp	r4, #3
   12cca:	d92e      	bls.n	12d2a <memset+0x82>
   12ccc:	b2cd      	uxtb	r5, r1
   12cce:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   12cd2:	2c0f      	cmp	r4, #15
   12cd4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   12cd8:	d919      	bls.n	12d0e <memset+0x66>
   12cda:	f103 0210 	add.w	r2, r3, #16
   12cde:	4626      	mov	r6, r4
   12ce0:	3e10      	subs	r6, #16
   12ce2:	2e0f      	cmp	r6, #15
   12ce4:	f842 5c10 	str.w	r5, [r2, #-16]
   12ce8:	f842 5c0c 	str.w	r5, [r2, #-12]
   12cec:	f842 5c08 	str.w	r5, [r2, #-8]
   12cf0:	f842 5c04 	str.w	r5, [r2, #-4]
   12cf4:	f102 0210 	add.w	r2, r2, #16
   12cf8:	d8f2      	bhi.n	12ce0 <memset+0x38>
   12cfa:	f1a4 0210 	sub.w	r2, r4, #16
   12cfe:	f022 020f 	bic.w	r2, r2, #15
   12d02:	f004 040f 	and.w	r4, r4, #15
   12d06:	3210      	adds	r2, #16
   12d08:	2c03      	cmp	r4, #3
   12d0a:	4413      	add	r3, r2
   12d0c:	d90d      	bls.n	12d2a <memset+0x82>
   12d0e:	461e      	mov	r6, r3
   12d10:	4622      	mov	r2, r4
   12d12:	3a04      	subs	r2, #4
   12d14:	2a03      	cmp	r2, #3
   12d16:	f846 5b04 	str.w	r5, [r6], #4
   12d1a:	d8fa      	bhi.n	12d12 <memset+0x6a>
   12d1c:	1f22      	subs	r2, r4, #4
   12d1e:	f022 0203 	bic.w	r2, r2, #3
   12d22:	3204      	adds	r2, #4
   12d24:	4413      	add	r3, r2
   12d26:	f004 0403 	and.w	r4, r4, #3
   12d2a:	b12c      	cbz	r4, 12d38 <memset+0x90>
   12d2c:	b2c9      	uxtb	r1, r1
   12d2e:	441c      	add	r4, r3
   12d30:	f803 1b01 	strb.w	r1, [r3], #1
   12d34:	429c      	cmp	r4, r3
   12d36:	d1fb      	bne.n	12d30 <memset+0x88>
   12d38:	bc70      	pop	{r4, r5, r6}
   12d3a:	4770      	bx	lr
   12d3c:	4614      	mov	r4, r2
   12d3e:	4603      	mov	r3, r0
   12d40:	e7c2      	b.n	12cc8 <memset+0x20>
   12d42:	bf00      	nop

00012d44 <__register_exitproc>:
   12d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12d48:	4d2c      	ldr	r5, [pc, #176]	; (12dfc <__register_exitproc+0xb8>)
   12d4a:	4606      	mov	r6, r0
   12d4c:	6828      	ldr	r0, [r5, #0]
   12d4e:	4698      	mov	r8, r3
   12d50:	460f      	mov	r7, r1
   12d52:	4691      	mov	r9, r2
   12d54:	f000 f882 	bl	12e5c <__retarget_lock_acquire_recursive>
   12d58:	4b29      	ldr	r3, [pc, #164]	; (12e00 <__register_exitproc+0xbc>)
   12d5a:	681c      	ldr	r4, [r3, #0]
   12d5c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   12d60:	2b00      	cmp	r3, #0
   12d62:	d03e      	beq.n	12de2 <__register_exitproc+0x9e>
   12d64:	685a      	ldr	r2, [r3, #4]
   12d66:	2a1f      	cmp	r2, #31
   12d68:	dc1c      	bgt.n	12da4 <__register_exitproc+0x60>
   12d6a:	f102 0e01 	add.w	lr, r2, #1
   12d6e:	b176      	cbz	r6, 12d8e <__register_exitproc+0x4a>
   12d70:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   12d74:	2401      	movs	r4, #1
   12d76:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   12d7a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   12d7e:	4094      	lsls	r4, r2
   12d80:	4320      	orrs	r0, r4
   12d82:	2e02      	cmp	r6, #2
   12d84:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   12d88:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   12d8c:	d023      	beq.n	12dd6 <__register_exitproc+0x92>
   12d8e:	3202      	adds	r2, #2
   12d90:	f8c3 e004 	str.w	lr, [r3, #4]
   12d94:	6828      	ldr	r0, [r5, #0]
   12d96:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   12d9a:	f000 f861 	bl	12e60 <__retarget_lock_release_recursive>
   12d9e:	2000      	movs	r0, #0
   12da0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12da4:	4b17      	ldr	r3, [pc, #92]	; (12e04 <__register_exitproc+0xc0>)
   12da6:	b30b      	cbz	r3, 12dec <__register_exitproc+0xa8>
   12da8:	f44f 70c8 	mov.w	r0, #400	; 0x190
   12dac:	f3af 8000 	nop.w
   12db0:	4603      	mov	r3, r0
   12db2:	b1d8      	cbz	r0, 12dec <__register_exitproc+0xa8>
   12db4:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   12db8:	6002      	str	r2, [r0, #0]
   12dba:	2100      	movs	r1, #0
   12dbc:	6041      	str	r1, [r0, #4]
   12dbe:	460a      	mov	r2, r1
   12dc0:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   12dc4:	f04f 0e01 	mov.w	lr, #1
   12dc8:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   12dcc:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   12dd0:	2e00      	cmp	r6, #0
   12dd2:	d0dc      	beq.n	12d8e <__register_exitproc+0x4a>
   12dd4:	e7cc      	b.n	12d70 <__register_exitproc+0x2c>
   12dd6:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   12dda:	430c      	orrs	r4, r1
   12ddc:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   12de0:	e7d5      	b.n	12d8e <__register_exitproc+0x4a>
   12de2:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   12de6:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   12dea:	e7bb      	b.n	12d64 <__register_exitproc+0x20>
   12dec:	6828      	ldr	r0, [r5, #0]
   12dee:	f000 f837 	bl	12e60 <__retarget_lock_release_recursive>
   12df2:	f04f 30ff 	mov.w	r0, #4294967295
   12df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12dfa:	bf00      	nop
   12dfc:	20000938 	.word	0x20000938
   12e00:	00013ef4 	.word	0x00013ef4
   12e04:	00000000 	.word	0x00000000

00012e08 <register_fini>:
   12e08:	4b02      	ldr	r3, [pc, #8]	; (12e14 <register_fini+0xc>)
   12e0a:	b113      	cbz	r3, 12e12 <register_fini+0xa>
   12e0c:	4802      	ldr	r0, [pc, #8]	; (12e18 <register_fini+0x10>)
   12e0e:	f000 b805 	b.w	12e1c <atexit>
   12e12:	4770      	bx	lr
   12e14:	00000000 	.word	0x00000000
   12e18:	00012e29 	.word	0x00012e29

00012e1c <atexit>:
   12e1c:	2300      	movs	r3, #0
   12e1e:	4601      	mov	r1, r0
   12e20:	461a      	mov	r2, r3
   12e22:	4618      	mov	r0, r3
   12e24:	f7ff bf8e 	b.w	12d44 <__register_exitproc>

00012e28 <__libc_fini_array>:
   12e28:	b538      	push	{r3, r4, r5, lr}
   12e2a:	4c0a      	ldr	r4, [pc, #40]	; (12e54 <__libc_fini_array+0x2c>)
   12e2c:	4d0a      	ldr	r5, [pc, #40]	; (12e58 <__libc_fini_array+0x30>)
   12e2e:	1b64      	subs	r4, r4, r5
   12e30:	10a4      	asrs	r4, r4, #2
   12e32:	d00a      	beq.n	12e4a <__libc_fini_array+0x22>
   12e34:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   12e38:	3b01      	subs	r3, #1
   12e3a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   12e3e:	3c01      	subs	r4, #1
   12e40:	f855 3904 	ldr.w	r3, [r5], #-4
   12e44:	4798      	blx	r3
   12e46:	2c00      	cmp	r4, #0
   12e48:	d1f9      	bne.n	12e3e <__libc_fini_array+0x16>
   12e4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12e4e:	f001 b85f 	b.w	13f10 <_fini>
   12e52:	bf00      	nop
   12e54:	00013f20 	.word	0x00013f20
   12e58:	00013f1c 	.word	0x00013f1c

00012e5c <__retarget_lock_acquire_recursive>:
   12e5c:	4770      	bx	lr
   12e5e:	bf00      	nop

00012e60 <__retarget_lock_release_recursive>:
   12e60:	4770      	bx	lr
   12e62:	bf00      	nop
   12e64:	682f2e2e 	.word	0x682f2e2e
   12e68:	702f6c70 	.word	0x702f6c70
   12e6c:	2f74726f 	.word	0x2f74726f
   12e70:	5f6c7068 	.word	0x5f6c7068
   12e74:	6f697067 	.word	0x6f697067
   12e78:	7361625f 	.word	0x7361625f
   12e7c:	00682e65 	.word	0x00682e65
   12e80:	682f2e2e 	.word	0x682f2e2e
   12e84:	692f6c61 	.word	0x692f6c61
   12e88:	756c636e 	.word	0x756c636e
   12e8c:	682f6564 	.word	0x682f6564
   12e90:	775f6c61 	.word	0x775f6c61
   12e94:	682e7464 	.word	0x682e7464
   12e98:	00000000 	.word	0x00000000
   12e9c:	682f2e2e 	.word	0x682f2e2e
   12ea0:	732f6c61 	.word	0x732f6c61
   12ea4:	682f6372 	.word	0x682f6372
   12ea8:	635f6c61 	.word	0x635f6c61
   12eac:	6e656c61 	.word	0x6e656c61
   12eb0:	2e726164 	.word	0x2e726164
   12eb4:	00000063 	.word	0x00000063
   12eb8:	682f2e2e 	.word	0x682f2e2e
   12ebc:	732f6c61 	.word	0x732f6c61
   12ec0:	682f6372 	.word	0x682f6372
   12ec4:	635f6c61 	.word	0x635f6c61
   12ec8:	615f6e61 	.word	0x615f6e61
   12ecc:	636e7973 	.word	0x636e7973
   12ed0:	0000632e 	.word	0x0000632e
   12ed4:	682f2e2e 	.word	0x682f2e2e
   12ed8:	732f6c61 	.word	0x732f6c61
   12edc:	682f6372 	.word	0x682f6372
   12ee0:	635f6c61 	.word	0x635f6c61
   12ee4:	735f6372 	.word	0x735f6372
   12ee8:	2e636e79 	.word	0x2e636e79
   12eec:	00000063 	.word	0x00000063
   12ef0:	682f2e2e 	.word	0x682f2e2e
   12ef4:	732f6c61 	.word	0x732f6c61
   12ef8:	682f6372 	.word	0x682f6372
   12efc:	695f6c61 	.word	0x695f6c61
   12f00:	6d5f6332 	.word	0x6d5f6332
   12f04:	7973615f 	.word	0x7973615f
   12f08:	632e636e 	.word	0x632e636e
   12f0c:	00000000 	.word	0x00000000
   12f10:	682f2e2e 	.word	0x682f2e2e
   12f14:	732f6c61 	.word	0x732f6c61
   12f18:	682f6372 	.word	0x682f6372
   12f1c:	705f6c61 	.word	0x705f6c61
   12f20:	632e6d77 	.word	0x632e6d77
   12f24:	00000000 	.word	0x00000000
   12f28:	682f2e2e 	.word	0x682f2e2e
   12f2c:	732f6c61 	.word	0x732f6c61
   12f30:	682f6372 	.word	0x682f6372
   12f34:	715f6c61 	.word	0x715f6c61
   12f38:	5f697073 	.word	0x5f697073
   12f3c:	636e7973 	.word	0x636e7973
   12f40:	0000632e 	.word	0x0000632e
   12f44:	682f2e2e 	.word	0x682f2e2e
   12f48:	732f6c61 	.word	0x732f6c61
   12f4c:	682f6372 	.word	0x682f6372
   12f50:	735f6c61 	.word	0x735f6c61
   12f54:	6d5f6970 	.word	0x6d5f6970
   12f58:	7973615f 	.word	0x7973615f
   12f5c:	632e636e 	.word	0x632e636e
   12f60:	00000000 	.word	0x00000000
   12f64:	682f2e2e 	.word	0x682f2e2e
   12f68:	732f6c61 	.word	0x732f6c61
   12f6c:	682f6372 	.word	0x682f6372
   12f70:	735f6c61 	.word	0x735f6c61
   12f74:	6d5f6970 	.word	0x6d5f6970
   12f78:	6e79735f 	.word	0x6e79735f
   12f7c:	00632e63 	.word	0x00632e63
   12f80:	682f2e2e 	.word	0x682f2e2e
   12f84:	732f6c61 	.word	0x732f6c61
   12f88:	682f6372 	.word	0x682f6372
   12f8c:	745f6c61 	.word	0x745f6c61
   12f90:	72656d69 	.word	0x72656d69
   12f94:	0000632e 	.word	0x0000632e
   12f98:	682f2e2e 	.word	0x682f2e2e
   12f9c:	752f6c61 	.word	0x752f6c61
   12fa0:	736c6974 	.word	0x736c6974
   12fa4:	6372732f 	.word	0x6372732f
   12fa8:	6974752f 	.word	0x6974752f
   12fac:	6c5f736c 	.word	0x6c5f736c
   12fb0:	2e747369 	.word	0x2e747369
   12fb4:	00000063 	.word	0x00000063
   12fb8:	03020100 	.word	0x03020100
   12fbc:	07060504 	.word	0x07060504
   12fc0:	14100c08 	.word	0x14100c08
   12fc4:	40302018 	.word	0x40302018

00012fc8 <_map>:
   12fc8:	00000004 00000004 00000005 00000005     ................
   12fd8:	00000006 00000056 00000007 00000057     ....V.......W...
   12fe8:	682f2e2e 652f6c70 682f6369 655f6c70     ../hpl/eic/hpl_e
   12ff8:	632e6369 00000000                       ic.c....

00013000 <user_mux_confs>:
   13000:	00000100 00000000 00000000 00000000     ................
	...

00013044 <channel_confs>:
   13044:	0000065e 00000000 00000000 00000000     ^...............
	...

00013084 <interrupt_cfg>:
	...
   13104:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
   13114:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
   13124:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
   13134:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
   13144:	65735f6c 6d6f6372 0000632e 40003000     l_sercom.c...0.@
   13154:	40003400 41012000 41014000 43000000     .4.@. .A.@.A...C
   13164:	43000400 43000800 43000c00              ...C...C...C

00013170 <sercomspi_regs>:
   13170:	0020000c 00020000 00000000 01ff009f     .. .............
   13180:	30000c04 02000000 00000000 ff009f00     ...0............
   13190:	00000601 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
   131a0:	63745f6c 0000632e 40003800 40003c00     l_tc.c...8.@.<.@
   131b0:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
   131c0:	43001400 43001800                       ...C...C

000131c8 <_usb_ep_cfgs>:
   131c8:	20000c44 00000000 00000040 20000c84     D.. ....@...... 
   131d8:	20000cc4 00400040 20000d04 20000d44     ... @.@.... D.. 
   131e8:	00400040 20000d84 20000dc4 00400040     @.@.... ... @.@.
   131f8:	20000e04 20000e44 00400040 00000804     ... D.. @.@.....
   13208:	00004a25 682f2e2e 772f6c70 682f7464     %J..../hpl/wdt/h
   13218:	775f6c70 632e7464 00000000 682f2e2e     pl_wdt.c....../h
   13228:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
   13238:	7361625f 00682e65                       _base.h.

00013240 <n25q256a_interface>:
   13240:	0000adb9 0000ae5d 0000af6d 0000b125     ....]...m...%...
   13250:	0000b1b5 752f2e2e 642f6273 63697665     ....../usb/devic
   13260:	73752f65 2e636462 00000063              e/usbdc.c...

0001326c <_ZTV13CANOpen_Class>:
	...
   13274:	0000ddb1                                ....

00013278 <_ZTV8CO_Class>:
	...
   13280:	0000ddb1                                ....

00013284 <_ZTV15CO_Driver_Class>:
	...
   1328c:	0000ddb1                                ....

00013290 <_ZL13OD_record1018>:
   13290:	200002d8 00000005 00000001 200002dc     ... ........... 
   132a0:	00000085 00000004 200002e0 00000085     ........... ....
   132b0:	00000004 200002e4 00000085 00000004     ....... ........
   132c0:	200002e8 00000085 00000004              ... ........

000132cc <_ZL13OD_record1200>:
   132cc:	200002f4 00000005 00000001 200002f8     ... ........... 
   132dc:	00000085 00000004 200002fc 00000085     ........... ....
   132ec:	00000004                                ....

000132f0 <_ZL13OD_record1400>:
   132f0:	20000300 00000005 00000001 20000304     ... ........... 
   13300:	0000008d 00000004 20000308 0000000d     ........... ....
   13310:	00000001                                ....

00013314 <_ZL13OD_record1401>:
   13314:	2000030c 00000005 00000001 20000310     ... ........... 
   13324:	0000008d 00000004 20000314 0000000d     ........... ....
   13334:	00000001                                ....

00013338 <_ZL13OD_record1402>:
   13338:	20000318 00000005 00000001 2000031c     ... ........... 
   13348:	0000008d 00000004 20000320 0000000d     ........ .. ....
   13358:	00000001                                ....

0001335c <_ZL13OD_record1403>:
   1335c:	20000324 00000005 00000001 20000328     $.. ........(.. 
   1336c:	0000008d 00000004 2000032c 0000000d     ........,.. ....
   1337c:	00000001                                ....

00013380 <_ZL13OD_record1600>:
   13380:	20000330 0000000d 00000001 20000334     0.. ........4.. 
   13390:	0000008d 00000004 20000338 0000008d     ........8.. ....
   133a0:	00000004 2000033c 0000008d 00000004     ....<.. ........
   133b0:	20000340 0000008d 00000004 20000344     @.. ........D.. 
   133c0:	0000008d 00000004 20000348 0000008d     ........H.. ....
   133d0:	00000004 2000034c 0000008d 00000004     ....L.. ........
   133e0:	20000350 0000008d 00000004              P.. ........

000133ec <_ZL13OD_record1601>:
   133ec:	20000354 0000000d 00000001 20000358     T.. ........X.. 
   133fc:	0000008d 00000004 2000035c 0000008d     ........\.. ....
   1340c:	00000004 20000360 0000008d 00000004     ....`.. ........
   1341c:	20000364 0000008d 00000004 20000368     d.. ........h.. 
   1342c:	0000008d 00000004 2000036c 0000008d     ........l.. ....
   1343c:	00000004 20000370 0000008d 00000004     ....p.. ........
   1344c:	20000374 0000008d 00000004              t.. ........

00013458 <_ZL13OD_record1602>:
   13458:	20000378 0000000d 00000001 2000037c     x.. ........|.. 
   13468:	0000008d 00000004 20000380 0000008d     ........... ....
   13478:	00000004 20000384 0000008d 00000004     ....... ........
   13488:	20000388 0000008d 00000004 2000038c     ... ........... 
   13498:	0000008d 00000004 20000390 0000008d     ........... ....
   134a8:	00000004 20000394 0000008d 00000004     ....... ........
   134b8:	20000398 0000008d 00000004              ... ........

000134c4 <_ZL13OD_record1603>:
   134c4:	2000039c 0000000d 00000001 200003a0     ... ........... 
   134d4:	0000008d 00000004 200003a4 0000008d     ........... ....
   134e4:	00000004 200003a8 0000008d 00000004     ....... ........
   134f4:	200003ac 0000008d 00000004 200003b0     ... ........... 
   13504:	0000008d 00000004 200003b4 0000008d     ........... ....
   13514:	00000004 200003b8 0000008d 00000004     ....... ........
   13524:	200003bc 0000008d 00000004              ... ........

00013530 <_ZL13OD_record1800>:
   13530:	200003c0 00000005 00000001 200003c4     ... ........... 
   13540:	0000008d 00000004 200003c8 0000000d     ........... ....
   13550:	00000001 200003cc 0000008d 00000002     ....... ........
   13560:	200003d0 0000000d 00000001 200003d4     ... ........... 
   13570:	0000008d 00000002 200003d8 0000000d     ........... ....
   13580:	00000001                                ....

00013584 <_ZL13OD_record1801>:
   13584:	200003dc 00000005 00000001 200003e0     ... ........... 
   13594:	0000008d 00000004 200003e4 0000000d     ........... ....
   135a4:	00000001 200003e8 0000008d 00000002     ....... ........
   135b4:	200003ec 0000000d 00000001 200003f0     ... ........... 
   135c4:	0000008d 00000002 200003f4 0000000d     ........... ....
   135d4:	00000001                                ....

000135d8 <_ZL13OD_record1802>:
   135d8:	200003f8 00000005 00000001 200003fc     ... ........... 
   135e8:	0000008d 00000004 20000400 0000000d     ........... ....
   135f8:	00000001 20000404 0000008d 00000002     ....... ........
   13608:	20000408 0000000d 00000001 2000040c     ... ........... 
   13618:	0000008d 00000002 20000410 0000000d     ........... ....
   13628:	00000001                                ....

0001362c <_ZL13OD_record1803>:
   1362c:	20000414 00000005 00000001 20000418     ... ........... 
   1363c:	0000008d 00000004 2000041c 0000000d     ........... ....
   1364c:	00000001 20000420 0000008d 00000002     .... .. ........
   1365c:	20000424 0000000d 00000001 20000428     $.. ........(.. 
   1366c:	0000008d 00000002 2000042c 0000000d     ........,.. ....
   1367c:	00000001                                ....

00013680 <_ZL13OD_record1A00>:
   13680:	20000430 0000000d 00000001 20000434     0.. ........4.. 
   13690:	0000008d 00000004 20000438 0000008d     ........8.. ....
   136a0:	00000004 2000043c 0000008d 00000004     ....<.. ........
   136b0:	20000440 0000008d 00000004 20000444     @.. ........D.. 
   136c0:	0000008d 00000004 20000448 0000008d     ........H.. ....
   136d0:	00000004 2000044c 0000008d 00000004     ....L.. ........
   136e0:	20000450 0000008d 00000004              P.. ........

000136ec <_ZL13OD_record1A01>:
   136ec:	20000454 0000000d 00000001 20000458     T.. ........X.. 
   136fc:	0000008d 00000004 2000045c 0000008d     ........\.. ....
   1370c:	00000004 20000460 0000008d 00000004     ....`.. ........
   1371c:	20000464 0000008d 00000004 20000468     d.. ........h.. 
   1372c:	0000008d 00000004 2000046c 0000008d     ........l.. ....
   1373c:	00000004 20000470 0000008d 00000004     ....p.. ........
   1374c:	20000474 0000008d 00000004              t.. ........

00013758 <_ZL13OD_record1A02>:
   13758:	20000478 0000000d 00000001 2000047c     x.. ........|.. 
   13768:	0000008d 00000004 20000480 0000008d     ........... ....
   13778:	00000004 20000484 0000008d 00000004     ....... ........
   13788:	20000488 0000008d 00000004 2000048c     ... ........... 
   13798:	0000008d 00000004 20000490 0000008d     ........... ....
   137a8:	00000004 20000494 0000008d 00000004     ....... ........
   137b8:	20000498 0000008d 00000004              ... ........

000137c4 <_ZL13OD_record1A03>:
   137c4:	2000049c 0000000d 00000001 200004a0     ... ........... 
   137d4:	0000008d 00000004 200004a4 0000008d     ........... ....
   137e4:	00000004 200004a8 0000008d 00000004     ....... ........
   137f4:	200004ac 0000008d 00000004 200004b0     ... ........... 
   13804:	0000008d 00000004 200004b4 0000008d     ........... ....
   13814:	00000004 200004b8 0000008d 00000004     ....... ........
   13824:	200004bc 0000008d 00000004              ... ........

00013830 <_ZL13OD_record2120>:
   13830:	200001a8 00000006 00000001 200001b0     ... ........... 
   13840:	000000be 00000008 200001b8 000000be     ........... ....
   13850:	00000008 200001c0 000000be 00000004     ....... ........
   13860:	200001c8 000000be 00000008 00000000     ... ............
   13870:	0000000e 00000000                       ........

00013878 <_ZL13OD_record2130>:
   13878:	200001d8 00000006 00000001 200001d9     ... ........... 
   13888:	00000006 0000001e 200001f8 0000008e     ........... ....
   13898:	00000008 20000200 000000be 00000004     ....... ........

000138a8 <CO_ObjDict>:
   138a8:	00001000 00000000 00000085 00000004     ................
   138b8:	20000298 00001001 00000000 00000036     ... ........6...
   138c8:	00000001 2000011c 00001002 00000000     ....... ........
   138d8:	000000b6 00000004 20000120 00001003     ........ .. ....
   138e8:	00000008 0000008e 00000004 20000124     ............$.. 
   138f8:	00001005 00000000 0000008d 00000004     ................
   13908:	2000029c 00001006 00000000 0000008d     ... ............
   13918:	00000004 200002a0 00001007 00000000     ....... ........
   13928:	0000008d 00000004 200002a4 00001008     ........... ....
   13938:	00000000 00000005 0000000b 200002a8     ............... 
   13948:	00001009 00000000 00000005 00000004     ................
   13958:	200002b3 0000100a 00000000 00000005     ... ............
   13968:	00000004 200002b7 00001010 00000001     ....... ........
   13978:	0000008e 00000004 20000144 00001011     ........D.. ....
   13988:	00000001 0000008e 00000004 20000148     ............H.. 
   13998:	00001014 00000000 00000085 00000004     ................
   139a8:	200002bc 00001015 00000000 0000008d     ... ............
   139b8:	00000002 200002c0 00001016 00000004     ....... ........
   139c8:	0000008d 00000004 200002c4 00001017     ........... ....
   139d8:	00000000 0000008d 00000002 200002d4     ............... 
   139e8:	00001018 00000004 00000000 00000000     ................
   139f8:	00013290 00001019 00000000 0000000d     .2..............
   13a08:	00000001 200002ec 00001029 00000006     ....... ).......
   13a18:	0000000d 00000001 200002ed 00001200     ........... ....
   13a28:	00000002 00000000 00000000 000132cc     .............2..
   13a38:	00001400 00000002 00000000 00000000     ................
   13a48:	000132f0 00001401 00000002 00000000     .2..............
   13a58:	00000000 00013314 00001402 00000002     .....3..........
	...
   13a70:	00013338 00001403 00000002 00000000     83..............
   13a80:	00000000 0001335c 00001600 00000008     ....\3..........
	...
   13a98:	00013380 00001601 00000008 00000000     .3..............
   13aa8:	00000000 000133ec 00001602 00000008     .....3..........
	...
   13ac0:	00013458 00001603 00000008 00000000     X4..............
   13ad0:	00000000 000134c4 00001800 00000006     .....4..........
	...
   13ae8:	00013530 00001801 00000006 00000000     05..............
   13af8:	00000000 00013584 00001802 00000006     .....5..........
	...
   13b10:	000135d8 00001803 00000006 00000000     .5..............
   13b20:	00000000 0001362c 00001a00 00000008     ....,6..........
	...
   13b38:	00013680 00001a01 00000008 00000000     .6..............
   13b48:	00000000 000136ec 00001a02 00000008     .....6..........
	...
   13b60:	00013758 00001a03 00000008 00000000     X7..............
   13b70:	00000000 000137c4 00001f80 00000000     .....7..........
   13b80:	0000008d 00000004 200004c0 00002100     ........... .!..
   13b90:	00000000 00000036 0000000a 2000014c     ....6.......L.. 
   13ba0:	00002101 00000000 0000000d 00000001     .!..............
   13bb0:	200004c4 00002102 00000000 0000008d     ... .!..........
   13bc0:	00000002 200004c6 00002103 00000000     ....... .!......
   13bd0:	0000008e 00000002 20000156 00002104     ........V.. .!..
   13be0:	00000000 00000086 00000002 20000158     ............X.. 
   13bf0:	00002106 00000000 00000087 00000004     .!..............
   13c00:	2000024c 00002107 00000005 000000be     L.. .!..........
   13c10:	00000002 2000015a 00002108 00000001     ....Z.. .!......
   13c20:	000000b6 00000002 20000164 00002109     ........d.. .!..
   13c30:	00000001 000000b6 00000002 20000166     ............f.. 
   13c40:	00002110 00000010 000000fe 00000004     .!..............
   13c50:	20000168 00002111 00000010 000000fd     h.. .!..........
   13c60:	00000004 200004c8 00002112 00000010     ....... .!......
   13c70:	000000ff 00000004 20000250 00002120     ........P..  !..
   13c80:	00000005 00000000 00000000 00013830     ............08..
   13c90:	00002130 00000003 00000000 00000000     0!..............
   13ca0:	00013878 00006000 00000008 00000076     x8...`......v...
   13cb0:	00000001 20000208 00006200 00000008     ....... .b......
   13cc0:	0000003e 00000001 20000210 00006401     >.......... .d..
   13cd0:	0000000c 000000b6 00000002 20000218     ............... 
   13ce0:	00006411 00000008 000000be 00000002     .d..............
   13cf0:	20000230                                0.. 

00013cf4 <_ZL17crc16_ccitt_table>:
   13cf4:	10210000 30632042 50a54084 70e760c6     ..!.B c0.@.P.`.p
   13d04:	91298108 b16ba14a d1adc18c f1efe1ce     ..).J.k.........
   13d14:	02101231 22523273 429452b5 62d672f7     1...s2R".R.B.r.b
   13d24:	83189339 a35ab37b c39cd3bd e3def3ff     9...{.Z.........
   13d34:	34432462 14010420 74c764e6 548544a4     b$C4 ....d.t.D.T
   13d44:	b54ba56a 95098528 f5cfe5ee d58dc5ac     j.K.(...........
   13d54:	26723653 06301611 66f676d7 46b45695     S6r&..0..v.f.V.F
   13d64:	a77ab75b 87389719 e7fef7df c7bcd79d     [.z...8.........
   13d74:	58e548c4 78a76886 18610840 38232802     .H.X.h.x@.a..(#8
   13d84:	d9edc9cc f9afe98e 99698948 b92ba90a     ........H.i...+.
   13d94:	4ad45af5 6a967ab7 0a501a71 2a123a33     .Z.J.z.jq.P.3:.*
   13da4:	cbdcdbfd eb9efbbf 8b589b79 ab1abb3b     ........y.X.;...
   13db4:	7c876ca6 5cc54ce4 3c032c22 1c410c60     .l.|.L.\",.<`.A.
   13dc4:	fd8fedae ddcdcdec bd0bad2a 9d498d68     ........*...h.I.
   13dd4:	6eb67e97 4ef45ed5 2e323e13 0e701e51     .~.n.^.N.>2.Q.p.
   13de4:	efbeff9f cffcdfdd af3abf1b 8f789f59     ..........:.Y.x.
   13df4:	81a99188 a1ebb1ca c12dd10c e16ff14e     ..........-.N.o.
   13e04:	00a11080 20e330c2 40255004 60677046     .....0. .P%@Fpg`
   13e14:	939883b9 b3daa3fb d31cc33d f35ee37f     ........=.....^.
   13e24:	129002b1 32d222f3 52144235 72566277     .....".25B.RwbVr
   13e34:	a5cbb5ea 858995a8 e54ff56e c50dd52c     ........n.O.,...
   13e44:	24c334e2 048114a0 64477466 44055424     .4.$....ftGd$T.D
   13e54:	b7faa7db 97b88799 f77ee75f d73cc71d     ........_.~...<.
   13e64:	36f226d3 16b00691 76766657 56344615     .&.6....Wfvv.F4V
   13e74:	c96dd94c e92ff90e 89e999c8 a9abb98a     L.m.../.........
   13e84:	48655844 68277806 08e118c0 28a33882     DXeH.x'h.....8.(
   13e94:	db5ccb7d fb1eeb3f 9bd88bf9 bb9aabbb     }.\.?...........
   13ea4:	5a544a75 7a166a37 1ad00af1 3a922ab3     uJTZ7j.z.....*.:
   13eb4:	ed0ffd2e cd4ddd6c ad8bbdaa 8dc99de8     ....l.M.........
   13ec4:	6c077c26 4c455c64 2c833ca2 0cc11ce0     &|.ld\EL.<.,....
   13ed4:	ff3eef1f df7ccf5d bfbaaf9b 9ff88fd9     ..>.].|.........
   13ee4:	7e366e17 5e744e55 3eb22e93 1ef00ed1     .n6~UNt^...>....

00013ef4 <_global_impure_ptr>:
   13ef4:	20000510                                ... 

00013ef8 <_init>:
   13ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13efa:	bf00      	nop
   13efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   13efe:	bc08      	pop	{r3}
   13f00:	469e      	mov	lr, r3
   13f02:	4770      	bx	lr

00013f04 <__init_array_start>:
   13f04:	00012e09 	.word	0x00012e09

00013f08 <__frame_dummy_init_array_entry>:
   13f08:	00000289 000003b5                       ........

00013f10 <_fini>:
   13f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13f12:	bf00      	nop
   13f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
   13f16:	bc08      	pop	{r3}
   13f18:	469e      	mov	lr, r3
   13f1a:	4770      	bx	lr

00013f1c <__fini_array_start>:
   13f1c:	00000265 	.word	0x00000265
