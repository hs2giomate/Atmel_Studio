
CANOpenMaster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00014194  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00014194  00014194  00024194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a04  20000000  0001419c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  00030a04  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  00030a04  2**0
                  CONTENTS
  5 .bss          00001324  20000a04  00014ba0  00030a04  2**2
                  ALLOC
  6 .stack        00010000  20001d28  00015ec4  00030a04  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  00030a04  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  00030a32  2**0
                  CONTENTS, READONLY
  9 .debug_info   0006b68c  00000000  00000000  00030a8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000088bf  00000000  00000000  0009c117  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00018ae3  00000000  00000000  000a49d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002c40  00000000  00000000  000bd4b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002928  00000000  00000000  000c00f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0004ab5b  00000000  00000000  000c2a21  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000362e4  00000000  00000000  0010d57c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00139415  00000000  00000000  00143860  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000ba10  00000000  00000000  0027cc78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
{0x6401, 0x0C, 0xB6,  2, (void*)&CO_OD_RAM.readAnalogueInput16Bit[0]},
{0x6411, 0x08, 0xBE,  2, (void*)&CO_OD_RAM.writeAnalogueOutput16Bit[0]},
};

// default constructor
CO_OD_Class::CO_OD_Class()
       0:	28 1d 01 20 d5 02 00 00 d1 02 00 00 d1 02 00 00     (.. ............
{
} //CO_OD
      10:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      2c:	d1 02 00 00 d1 02 00 00 00 00 00 00 d1 02 00 00     ................
      3c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      4c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      5c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      6c:	3d 57 00 00 59 45 00 00 69 45 00 00 d1 02 00 00     =W..YE..iE......
      7c:	79 45 00 00 89 45 00 00 99 45 00 00 a9 45 00 00     yE...E...E...E..
      8c:	b9 45 00 00 c9 45 00 00 d9 45 00 00 d1 02 00 00     .E...E...E......
      9c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      ac:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      bc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      cc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      dc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      f4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     104:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     114:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     124:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     134:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     144:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     154:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     164:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     174:	d1 02 00 00 d1 02 00 00 79 3a 00 00 51 a4 00 00     ........y:..Q...
     184:	61 a4 00 00 71 a4 00 00 81 a4 00 00 d1 02 00 00     a...q...........
     194:	01 6f 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     .o..............
     1a4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 1d 6f 00 00     .............o..
     1b4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1c4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1d4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1e4:	d1 02 00 00 d1 02 00 00 a1 7b 00 00 d1 02 00 00     .........{......
     1f4:	bd 7b 00 00 d1 02 00 00 d9 7b 00 00 f5 7b 00 00     .{.......{...{..
     204:	11 7c 00 00 2d 7c 00 00 d1 02 00 00 d1 02 00 00     .|..-|..........
     214:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     224:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     234:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     244:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     254:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000a04 	.word	0x20000a04
     280:	00000000 	.word	0x00000000
     284:	0001419c 	.word	0x0001419c

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0001419c 	.word	0x0001419c
     2c4:	20000a08 	.word	0x20000a08
     2c8:	0001419c 	.word	0x0001419c
     2cc:	00000000 	.word	0x00000000

000002d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2d0:	e7fe      	b.n	2d0 <Dummy_Handler>
	...

000002d4 <Reset_Handler>:
{
     2d4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2d6:	4b17      	ldr	r3, [pc, #92]	; (334 <Reset_Handler+0x60>)
     2d8:	4a17      	ldr	r2, [pc, #92]	; (338 <Reset_Handler+0x64>)
     2da:	429a      	cmp	r2, r3
     2dc:	d010      	beq.n	300 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2de:	4b17      	ldr	r3, [pc, #92]	; (33c <Reset_Handler+0x68>)
     2e0:	4a14      	ldr	r2, [pc, #80]	; (334 <Reset_Handler+0x60>)
     2e2:	429a      	cmp	r2, r3
     2e4:	d20c      	bcs.n	300 <Reset_Handler+0x2c>
     2e6:	3b01      	subs	r3, #1
     2e8:	1a9b      	subs	r3, r3, r2
     2ea:	f023 0303 	bic.w	r3, r3, #3
     2ee:	3304      	adds	r3, #4
     2f0:	4413      	add	r3, r2
     2f2:	4911      	ldr	r1, [pc, #68]	; (338 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     2f4:	f851 0b04 	ldr.w	r0, [r1], #4
     2f8:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     2fc:	429a      	cmp	r2, r3
     2fe:	d1f9      	bne.n	2f4 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     300:	4b0f      	ldr	r3, [pc, #60]	; (340 <Reset_Handler+0x6c>)
     302:	4a10      	ldr	r2, [pc, #64]	; (344 <Reset_Handler+0x70>)
     304:	429a      	cmp	r2, r3
     306:	d20a      	bcs.n	31e <Reset_Handler+0x4a>
     308:	3b01      	subs	r3, #1
     30a:	1a9b      	subs	r3, r3, r2
     30c:	f023 0303 	bic.w	r3, r3, #3
     310:	3304      	adds	r3, #4
     312:	4413      	add	r3, r2
                *pDest++ = 0;
     314:	2100      	movs	r1, #0
     316:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     31a:	4293      	cmp	r3, r2
     31c:	d1fb      	bne.n	316 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31e:	4a0a      	ldr	r2, [pc, #40]	; (348 <Reset_Handler+0x74>)
     320:	4b0a      	ldr	r3, [pc, #40]	; (34c <Reset_Handler+0x78>)
     322:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     326:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     328:	4b09      	ldr	r3, [pc, #36]	; (350 <Reset_Handler+0x7c>)
     32a:	4798      	blx	r3
        main();
     32c:	4b09      	ldr	r3, [pc, #36]	; (354 <Reset_Handler+0x80>)
     32e:	4798      	blx	r3
     330:	e7fe      	b.n	330 <Reset_Handler+0x5c>
     332:	bf00      	nop
     334:	20000000 	.word	0x20000000
     338:	0001419c 	.word	0x0001419c
     33c:	20000a04 	.word	0x20000a04
     340:	20001d28 	.word	0x20001d28
     344:	20000a04 	.word	0x20000a04
     348:	e000ed00 	.word	0xe000ed00
     34c:	00000000 	.word	0x00000000
     350:	00012d95 	.word	0x00012d95
     354:	00000359 	.word	0x00000359

00000358 <main>:
#include "CANOpen_Class.h"

static CANOpen_Class cano(&CAN_CCU);

int main(void)
{
     358:	b580      	push	{r7, lr}
	atmel_start_init();
     35a:	4b0f      	ldr	r3, [pc, #60]	; (398 <main+0x40>)
     35c:	4798      	blx	r3
	cano.Init(1);
     35e:	2101      	movs	r1, #1
     360:	480e      	ldr	r0, [pc, #56]	; (39c <main+0x44>)
     362:	4b0f      	ldr	r3, [pc, #60]	; (3a0 <main+0x48>)
     364:	4798      	blx	r3
	while(!cano.StartNMTService());
     366:	4d0d      	ldr	r5, [pc, #52]	; (39c <main+0x44>)
     368:	4c0e      	ldr	r4, [pc, #56]	; (3a4 <main+0x4c>)
     36a:	4628      	mov	r0, r5
     36c:	47a0      	blx	r4
     36e:	2800      	cmp	r0, #0
     370:	d0fb      	beq.n	36a <main+0x12>
	/* Replace with your application code */
	while (1)
	{
		
		cano.Process();
     372:	4e0a      	ldr	r6, [pc, #40]	; (39c <main+0x44>)
     374:	4f0c      	ldr	r7, [pc, #48]	; (3a8 <main+0x50>)
		delay_us(500);
     376:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
		cano.Process();
     37a:	2200      	movs	r2, #0
     37c:	2101      	movs	r1, #1
     37e:	4630      	mov	r0, r6
     380:	47b8      	blx	r7
		delay_us(500);
     382:	4620      	mov	r0, r4
     384:	4d09      	ldr	r5, [pc, #36]	; (3ac <main+0x54>)
     386:	47a8      	blx	r5
		
		cano.Periodic_Process();
     388:	4621      	mov	r1, r4
     38a:	4630      	mov	r0, r6
     38c:	4b08      	ldr	r3, [pc, #32]	; (3b0 <main+0x58>)
     38e:	4798      	blx	r3
		delay_us(500);
     390:	4620      	mov	r0, r4
     392:	47a8      	blx	r5
     394:	e7f1      	b.n	37a <main+0x22>
     396:	bf00      	nop
     398:	000003e5 	.word	0x000003e5
     39c:	20000a20 	.word	0x20000a20
     3a0:	0000c951 	.word	0x0000c951
     3a4:	0000ca71 	.word	0x0000ca71
     3a8:	0000d435 	.word	0x0000d435
     3ac:	00001c99 	.word	0x00001c99
     3b0:	0000ca05 	.word	0x0000ca05

000003b4 <_GLOBAL__sub_I_main>:
	}
}
     3b4:	b510      	push	{r4, lr}
static CANOpen_Class cano(&CAN_CCU);
     3b6:	4c05      	ldr	r4, [pc, #20]	; (3cc <_GLOBAL__sub_I_main+0x18>)
     3b8:	4905      	ldr	r1, [pc, #20]	; (3d0 <_GLOBAL__sub_I_main+0x1c>)
     3ba:	4620      	mov	r0, r4
     3bc:	4b05      	ldr	r3, [pc, #20]	; (3d4 <_GLOBAL__sub_I_main+0x20>)
     3be:	4798      	blx	r3
     3c0:	4a05      	ldr	r2, [pc, #20]	; (3d8 <_GLOBAL__sub_I_main+0x24>)
     3c2:	4906      	ldr	r1, [pc, #24]	; (3dc <_GLOBAL__sub_I_main+0x28>)
     3c4:	4620      	mov	r0, r4
     3c6:	4b06      	ldr	r3, [pc, #24]	; (3e0 <_GLOBAL__sub_I_main+0x2c>)
     3c8:	4798      	blx	r3
     3ca:	bd10      	pop	{r4, pc}
     3cc:	20000a20 	.word	0x20000a20
     3d0:	20001bc0 	.word	0x20001bc0
     3d4:	0000c8ed 	.word	0x0000c8ed
     3d8:	20000000 	.word	0x20000000
     3dc:	0000c929 	.word	0x0000c929
     3e0:	00012d61 	.word	0x00012d61

000003e4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     3e4:	b580      	push	{r7, lr}
     3e6:	af00      	add	r7, sp, #0
	system_init();
     3e8:	4b03      	ldr	r3, [pc, #12]	; (3f8 <atmel_start_init+0x14>)
     3ea:	4798      	blx	r3
	usb_init();
     3ec:	4b03      	ldr	r3, [pc, #12]	; (3fc <atmel_start_init+0x18>)
     3ee:	4798      	blx	r3
	spi_nor_flash_init();
     3f0:	4b03      	ldr	r3, [pc, #12]	; (400 <atmel_start_init+0x1c>)
     3f2:	4798      	blx	r3
}
     3f4:	bf00      	nop
     3f6:	bd80      	pop	{r7, pc}
     3f8:	0000176d 	.word	0x0000176d
     3fc:	0000ab55 	.word	0x0000ab55
     400:	0000aae9 	.word	0x0000aae9

00000404 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     404:	b480      	push	{r7}
     406:	b085      	sub	sp, #20
     408:	af00      	add	r7, sp, #0
     40a:	60f8      	str	r0, [r7, #12]
     40c:	460b      	mov	r3, r1
     40e:	607a      	str	r2, [r7, #4]
     410:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     412:	7afa      	ldrb	r2, [r7, #11]
     414:	68fb      	ldr	r3, [r7, #12]
     416:	3220      	adds	r2, #32
     418:	6879      	ldr	r1, [r7, #4]
     41a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     41e:	bf00      	nop
     420:	3714      	adds	r7, #20
     422:	46bd      	mov	sp, r7
     424:	f85d 7b04 	ldr.w	r7, [sp], #4
     428:	4770      	bx	lr

0000042a <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
     42a:	b480      	push	{r7}
     42c:	b083      	sub	sp, #12
     42e:	af00      	add	r7, sp, #0
     430:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     432:	687b      	ldr	r3, [r7, #4]
     434:	691b      	ldr	r3, [r3, #16]
     436:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     43a:	687b      	ldr	r3, [r7, #4]
     43c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     43e:	bf00      	nop
     440:	370c      	adds	r7, #12
     442:	46bd      	mov	sp, r7
     444:	f85d 7b04 	ldr.w	r7, [sp], #4
     448:	4770      	bx	lr

0000044a <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
     44a:	b480      	push	{r7}
     44c:	b083      	sub	sp, #12
     44e:	af00      	add	r7, sp, #0
     450:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     452:	687b      	ldr	r3, [r7, #4]
     454:	691b      	ldr	r3, [r3, #16]
     456:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     45a:	687b      	ldr	r3, [r7, #4]
     45c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     45e:	bf00      	nop
     460:	370c      	adds	r7, #12
     462:	46bd      	mov	sp, r7
     464:	f85d 7b04 	ldr.w	r7, [sp], #4
     468:	4770      	bx	lr

0000046a <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
     46a:	b480      	push	{r7}
     46c:	b083      	sub	sp, #12
     46e:	af00      	add	r7, sp, #0
     470:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
     472:	687b      	ldr	r3, [r7, #4]
     474:	691b      	ldr	r3, [r3, #16]
     476:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
     47a:	687b      	ldr	r3, [r7, #4]
     47c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     47e:	bf00      	nop
     480:	370c      	adds	r7, #12
     482:	46bd      	mov	sp, r7
     484:	f85d 7b04 	ldr.w	r7, [sp], #4
     488:	4770      	bx	lr

0000048a <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
     48a:	b480      	push	{r7}
     48c:	b083      	sub	sp, #12
     48e:	af00      	add	r7, sp, #0
     490:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     492:	687b      	ldr	r3, [r7, #4]
     494:	691b      	ldr	r3, [r3, #16]
     496:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
     49a:	687b      	ldr	r3, [r7, #4]
     49c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     49e:	bf00      	nop
     4a0:	370c      	adds	r7, #12
     4a2:	46bd      	mov	sp, r7
     4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
     4a8:	4770      	bx	lr

000004aa <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
     4aa:	b480      	push	{r7}
     4ac:	b083      	sub	sp, #12
     4ae:	af00      	add	r7, sp, #0
     4b0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     4b2:	687b      	ldr	r3, [r7, #4]
     4b4:	695b      	ldr	r3, [r3, #20]
     4b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
     4ba:	687b      	ldr	r3, [r7, #4]
     4bc:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     4be:	bf00      	nop
     4c0:	370c      	adds	r7, #12
     4c2:	46bd      	mov	sp, r7
     4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     4c8:	4770      	bx	lr

000004ca <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
     4ca:	b480      	push	{r7}
     4cc:	b083      	sub	sp, #12
     4ce:	af00      	add	r7, sp, #0
     4d0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     4d2:	687b      	ldr	r3, [r7, #4]
     4d4:	695b      	ldr	r3, [r3, #20]
     4d6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
     4da:	687b      	ldr	r3, [r7, #4]
     4dc:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     4de:	bf00      	nop
     4e0:	370c      	adds	r7, #12
     4e2:	46bd      	mov	sp, r7
     4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
     4e8:	4770      	bx	lr

000004ea <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
     4ea:	b480      	push	{r7}
     4ec:	b083      	sub	sp, #12
     4ee:	af00      	add	r7, sp, #0
     4f0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     4f2:	687b      	ldr	r3, [r7, #4]
     4f4:	695b      	ldr	r3, [r3, #20]
     4f6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     4fa:	687b      	ldr	r3, [r7, #4]
     4fc:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     4fe:	bf00      	nop
     500:	370c      	adds	r7, #12
     502:	46bd      	mov	sp, r7
     504:	f85d 7b04 	ldr.w	r7, [sp], #4
     508:	4770      	bx	lr

0000050a <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
     50a:	b480      	push	{r7}
     50c:	b083      	sub	sp, #12
     50e:	af00      	add	r7, sp, #0
     510:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     512:	687b      	ldr	r3, [r7, #4]
     514:	695b      	ldr	r3, [r3, #20]
     516:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     51a:	687b      	ldr	r3, [r7, #4]
     51c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     51e:	bf00      	nop
     520:	370c      	adds	r7, #12
     522:	46bd      	mov	sp, r7
     524:	f85d 7b04 	ldr.w	r7, [sp], #4
     528:	4770      	bx	lr

0000052a <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
     52a:	b480      	push	{r7}
     52c:	b083      	sub	sp, #12
     52e:	af00      	add	r7, sp, #0
     530:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     532:	687b      	ldr	r3, [r7, #4]
     534:	695b      	ldr	r3, [r3, #20]
     536:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     53a:	687b      	ldr	r3, [r7, #4]
     53c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     53e:	bf00      	nop
     540:	370c      	adds	r7, #12
     542:	46bd      	mov	sp, r7
     544:	f85d 7b04 	ldr.w	r7, [sp], #4
     548:	4770      	bx	lr

0000054a <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
     54a:	b480      	push	{r7}
     54c:	b083      	sub	sp, #12
     54e:	af00      	add	r7, sp, #0
     550:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     552:	687b      	ldr	r3, [r7, #4]
     554:	699b      	ldr	r3, [r3, #24]
     556:	f043 0201 	orr.w	r2, r3, #1
     55a:	687b      	ldr	r3, [r7, #4]
     55c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     55e:	bf00      	nop
     560:	370c      	adds	r7, #12
     562:	46bd      	mov	sp, r7
     564:	f85d 7b04 	ldr.w	r7, [sp], #4
     568:	4770      	bx	lr

0000056a <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
     56a:	b480      	push	{r7}
     56c:	b083      	sub	sp, #12
     56e:	af00      	add	r7, sp, #0
     570:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     572:	687b      	ldr	r3, [r7, #4]
     574:	699b      	ldr	r3, [r3, #24]
     576:	f043 0202 	orr.w	r2, r3, #2
     57a:	687b      	ldr	r3, [r7, #4]
     57c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     57e:	bf00      	nop
     580:	370c      	adds	r7, #12
     582:	46bd      	mov	sp, r7
     584:	f85d 7b04 	ldr.w	r7, [sp], #4
     588:	4770      	bx	lr

0000058a <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
     58a:	b480      	push	{r7}
     58c:	b083      	sub	sp, #12
     58e:	af00      	add	r7, sp, #0
     590:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     592:	687b      	ldr	r3, [r7, #4]
     594:	699b      	ldr	r3, [r3, #24]
     596:	f043 0280 	orr.w	r2, r3, #128	; 0x80
     59a:	687b      	ldr	r3, [r7, #4]
     59c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     59e:	bf00      	nop
     5a0:	370c      	adds	r7, #12
     5a2:	46bd      	mov	sp, r7
     5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
     5a8:	4770      	bx	lr

000005aa <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
     5aa:	b480      	push	{r7}
     5ac:	b083      	sub	sp, #12
     5ae:	af00      	add	r7, sp, #0
     5b0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
     5b2:	687b      	ldr	r3, [r7, #4]
     5b4:	699b      	ldr	r3, [r3, #24]
     5b6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
     5ba:	687b      	ldr	r3, [r7, #4]
     5bc:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     5be:	bf00      	nop
     5c0:	370c      	adds	r7, #12
     5c2:	46bd      	mov	sp, r7
     5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     5c8:	4770      	bx	lr

000005ca <hri_mclk_set_APBBMASK_TCC1_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC1_bit(const void *const hw)
{
     5ca:	b480      	push	{r7}
     5cc:	b083      	sub	sp, #12
     5ce:	af00      	add	r7, sp, #0
     5d0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
     5d2:	687b      	ldr	r3, [r7, #4]
     5d4:	699b      	ldr	r3, [r3, #24]
     5d6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
     5da:	687b      	ldr	r3, [r7, #4]
     5dc:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     5de:	bf00      	nop
     5e0:	370c      	adds	r7, #12
     5e2:	46bd      	mov	sp, r7
     5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
     5e8:	4770      	bx	lr

000005ea <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
     5ea:	b480      	push	{r7}
     5ec:	b083      	sub	sp, #12
     5ee:	af00      	add	r7, sp, #0
     5f0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     5f2:	687b      	ldr	r3, [r7, #4]
     5f4:	699b      	ldr	r3, [r3, #24]
     5f6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     5fa:	687b      	ldr	r3, [r7, #4]
     5fc:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     5fe:	bf00      	nop
     600:	370c      	adds	r7, #12
     602:	46bd      	mov	sp, r7
     604:	f85d 7b04 	ldr.w	r7, [sp], #4
     608:	4770      	bx	lr

0000060a <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
     60a:	b480      	push	{r7}
     60c:	b083      	sub	sp, #12
     60e:	af00      	add	r7, sp, #0
     610:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
     612:	687b      	ldr	r3, [r7, #4]
     614:	69db      	ldr	r3, [r3, #28]
     616:	f043 0220 	orr.w	r2, r3, #32
     61a:	687b      	ldr	r3, [r7, #4]
     61c:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     61e:	bf00      	nop
     620:	370c      	adds	r7, #12
     622:	46bd      	mov	sp, r7
     624:	f85d 7b04 	ldr.w	r7, [sp], #4
     628:	4770      	bx	lr

0000062a <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
     62a:	b480      	push	{r7}
     62c:	b083      	sub	sp, #12
     62e:	af00      	add	r7, sp, #0
     630:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
     632:	687b      	ldr	r3, [r7, #4]
     634:	69db      	ldr	r3, [r3, #28]
     636:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     63a:	687b      	ldr	r3, [r7, #4]
     63c:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     63e:	bf00      	nop
     640:	370c      	adds	r7, #12
     642:	46bd      	mov	sp, r7
     644:	f85d 7b04 	ldr.w	r7, [sp], #4
     648:	4770      	bx	lr

0000064a <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
     64a:	b480      	push	{r7}
     64c:	b083      	sub	sp, #12
     64e:	af00      	add	r7, sp, #0
     650:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     652:	687b      	ldr	r3, [r7, #4]
     654:	69db      	ldr	r3, [r3, #28]
     656:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     65a:	687b      	ldr	r3, [r7, #4]
     65c:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     65e:	bf00      	nop
     660:	370c      	adds	r7, #12
     662:	46bd      	mov	sp, r7
     664:	f85d 7b04 	ldr.w	r7, [sp], #4
     668:	4770      	bx	lr

0000066a <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
     66a:	b480      	push	{r7}
     66c:	b083      	sub	sp, #12
     66e:	af00      	add	r7, sp, #0
     670:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     672:	687b      	ldr	r3, [r7, #4]
     674:	6a1b      	ldr	r3, [r3, #32]
     676:	f043 0201 	orr.w	r2, r3, #1
     67a:	687b      	ldr	r3, [r7, #4]
     67c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     67e:	bf00      	nop
     680:	370c      	adds	r7, #12
     682:	46bd      	mov	sp, r7
     684:	f85d 7b04 	ldr.w	r7, [sp], #4
     688:	4770      	bx	lr

0000068a <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
     68a:	b480      	push	{r7}
     68c:	b083      	sub	sp, #12
     68e:	af00      	add	r7, sp, #0
     690:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     692:	687b      	ldr	r3, [r7, #4]
     694:	6a1b      	ldr	r3, [r3, #32]
     696:	f043 0202 	orr.w	r2, r3, #2
     69a:	687b      	ldr	r3, [r7, #4]
     69c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     69e:	bf00      	nop
     6a0:	370c      	adds	r7, #12
     6a2:	46bd      	mov	sp, r7
     6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
     6a8:	4770      	bx	lr

000006aa <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
     6aa:	b480      	push	{r7}
     6ac:	b083      	sub	sp, #12
     6ae:	af00      	add	r7, sp, #0
     6b0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     6b2:	687b      	ldr	r3, [r7, #4]
     6b4:	6a1b      	ldr	r3, [r3, #32]
     6b6:	f043 0204 	orr.w	r2, r3, #4
     6ba:	687b      	ldr	r3, [r7, #4]
     6bc:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     6be:	bf00      	nop
     6c0:	370c      	adds	r7, #12
     6c2:	46bd      	mov	sp, r7
     6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     6c8:	4770      	bx	lr

000006ca <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
     6ca:	b480      	push	{r7}
     6cc:	b083      	sub	sp, #12
     6ce:	af00      	add	r7, sp, #0
     6d0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     6d2:	687b      	ldr	r3, [r7, #4]
     6d4:	6a1b      	ldr	r3, [r3, #32]
     6d6:	f043 0208 	orr.w	r2, r3, #8
     6da:	687b      	ldr	r3, [r7, #4]
     6dc:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     6de:	bf00      	nop
     6e0:	370c      	adds	r7, #12
     6e2:	46bd      	mov	sp, r7
     6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
     6e8:	4770      	bx	lr

000006ea <hri_mclk_set_APBDMASK_TC6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TCC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC6_bit(const void *const hw)
{
     6ea:	b480      	push	{r7}
     6ec:	b083      	sub	sp, #12
     6ee:	af00      	add	r7, sp, #0
     6f0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC6;
     6f2:	687b      	ldr	r3, [r7, #4]
     6f4:	6a1b      	ldr	r3, [r3, #32]
     6f6:	f043 0220 	orr.w	r2, r3, #32
     6fa:	687b      	ldr	r3, [r7, #4]
     6fc:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     6fe:	bf00      	nop
     700:	370c      	adds	r7, #12
     702:	46bd      	mov	sp, r7
     704:	f85d 7b04 	ldr.w	r7, [sp], #4
     708:	4770      	bx	lr

0000070a <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
     70a:	b480      	push	{r7}
     70c:	b083      	sub	sp, #12
     70e:	af00      	add	r7, sp, #0
     710:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
     712:	687b      	ldr	r3, [r7, #4]
     714:	6a1b      	ldr	r3, [r3, #32]
     716:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     71a:	687b      	ldr	r3, [r7, #4]
     71c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     71e:	bf00      	nop
     720:	370c      	adds	r7, #12
     722:	46bd      	mov	sp, r7
     724:	f85d 7b04 	ldr.w	r7, [sp], #4
     728:	4770      	bx	lr

0000072a <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     72a:	b480      	push	{r7}
     72c:	b085      	sub	sp, #20
     72e:	af00      	add	r7, sp, #0
     730:	60f8      	str	r0, [r7, #12]
     732:	460b      	mov	r3, r1
     734:	607a      	str	r2, [r7, #4]
     736:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     738:	7afb      	ldrb	r3, [r7, #11]
     73a:	68fa      	ldr	r2, [r7, #12]
     73c:	01db      	lsls	r3, r3, #7
     73e:	4413      	add	r3, r2
     740:	3308      	adds	r3, #8
     742:	687a      	ldr	r2, [r7, #4]
     744:	601a      	str	r2, [r3, #0]
}
     746:	bf00      	nop
     748:	3714      	adds	r7, #20
     74a:	46bd      	mov	sp, r7
     74c:	f85d 7b04 	ldr.w	r7, [sp], #4
     750:	4770      	bx	lr

00000752 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     752:	b480      	push	{r7}
     754:	b085      	sub	sp, #20
     756:	af00      	add	r7, sp, #0
     758:	60f8      	str	r0, [r7, #12]
     75a:	460b      	mov	r3, r1
     75c:	607a      	str	r2, [r7, #4]
     75e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     760:	7afb      	ldrb	r3, [r7, #11]
     762:	68fa      	ldr	r2, [r7, #12]
     764:	01db      	lsls	r3, r3, #7
     766:	4413      	add	r3, r2
     768:	3304      	adds	r3, #4
     76a:	687a      	ldr	r2, [r7, #4]
     76c:	601a      	str	r2, [r3, #0]
}
     76e:	bf00      	nop
     770:	3714      	adds	r7, #20
     772:	46bd      	mov	sp, r7
     774:	f85d 7b04 	ldr.w	r7, [sp], #4
     778:	4770      	bx	lr

0000077a <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     77a:	b480      	push	{r7}
     77c:	b085      	sub	sp, #20
     77e:	af00      	add	r7, sp, #0
     780:	60f8      	str	r0, [r7, #12]
     782:	460b      	mov	r3, r1
     784:	607a      	str	r2, [r7, #4]
     786:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     788:	7afb      	ldrb	r3, [r7, #11]
     78a:	68fa      	ldr	r2, [r7, #12]
     78c:	01db      	lsls	r3, r3, #7
     78e:	4413      	add	r3, r2
     790:	3318      	adds	r3, #24
     792:	687a      	ldr	r2, [r7, #4]
     794:	601a      	str	r2, [r3, #0]
}
     796:	bf00      	nop
     798:	3714      	adds	r7, #20
     79a:	46bd      	mov	sp, r7
     79c:	f85d 7b04 	ldr.w	r7, [sp], #4
     7a0:	4770      	bx	lr

000007a2 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     7a2:	b480      	push	{r7}
     7a4:	b085      	sub	sp, #20
     7a6:	af00      	add	r7, sp, #0
     7a8:	60f8      	str	r0, [r7, #12]
     7aa:	460b      	mov	r3, r1
     7ac:	607a      	str	r2, [r7, #4]
     7ae:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7b0:	7afb      	ldrb	r3, [r7, #11]
     7b2:	68fa      	ldr	r2, [r7, #12]
     7b4:	01db      	lsls	r3, r3, #7
     7b6:	4413      	add	r3, r2
     7b8:	3314      	adds	r3, #20
     7ba:	687a      	ldr	r2, [r7, #4]
     7bc:	601a      	str	r2, [r3, #0]
}
     7be:	bf00      	nop
     7c0:	3714      	adds	r7, #20
     7c2:	46bd      	mov	sp, r7
     7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     7c8:	4770      	bx	lr

000007ca <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     7ca:	b480      	push	{r7}
     7cc:	b085      	sub	sp, #20
     7ce:	af00      	add	r7, sp, #0
     7d0:	6078      	str	r0, [r7, #4]
     7d2:	4608      	mov	r0, r1
     7d4:	4611      	mov	r1, r2
     7d6:	461a      	mov	r2, r3
     7d8:	4603      	mov	r3, r0
     7da:	70fb      	strb	r3, [r7, #3]
     7dc:	460b      	mov	r3, r1
     7de:	70bb      	strb	r3, [r7, #2]
     7e0:	4613      	mov	r3, r2
     7e2:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7e4:	78fa      	ldrb	r2, [r7, #3]
     7e6:	78bb      	ldrb	r3, [r7, #2]
     7e8:	6879      	ldr	r1, [r7, #4]
     7ea:	01d2      	lsls	r2, r2, #7
     7ec:	440a      	add	r2, r1
     7ee:	4413      	add	r3, r2
     7f0:	3330      	adds	r3, #48	; 0x30
     7f2:	781b      	ldrb	r3, [r3, #0]
     7f4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     7f6:	7bfb      	ldrb	r3, [r7, #15]
     7f8:	f023 030f 	bic.w	r3, r3, #15
     7fc:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
     7fe:	787b      	ldrb	r3, [r7, #1]
     800:	f003 030f 	and.w	r3, r3, #15
     804:	b2da      	uxtb	r2, r3
     806:	7bfb      	ldrb	r3, [r7, #15]
     808:	4313      	orrs	r3, r2
     80a:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     80c:	78fa      	ldrb	r2, [r7, #3]
     80e:	78bb      	ldrb	r3, [r7, #2]
     810:	6879      	ldr	r1, [r7, #4]
     812:	01d2      	lsls	r2, r2, #7
     814:	440a      	add	r2, r1
     816:	4413      	add	r3, r2
     818:	3330      	adds	r3, #48	; 0x30
     81a:	7bfa      	ldrb	r2, [r7, #15]
     81c:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     81e:	bf00      	nop
     820:	3714      	adds	r7, #20
     822:	46bd      	mov	sp, r7
     824:	f85d 7b04 	ldr.w	r7, [sp], #4
     828:	4770      	bx	lr

0000082a <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     82a:	b480      	push	{r7}
     82c:	b085      	sub	sp, #20
     82e:	af00      	add	r7, sp, #0
     830:	6078      	str	r0, [r7, #4]
     832:	4608      	mov	r0, r1
     834:	4611      	mov	r1, r2
     836:	461a      	mov	r2, r3
     838:	4603      	mov	r3, r0
     83a:	70fb      	strb	r3, [r7, #3]
     83c:	460b      	mov	r3, r1
     83e:	70bb      	strb	r3, [r7, #2]
     840:	4613      	mov	r3, r2
     842:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     844:	78fa      	ldrb	r2, [r7, #3]
     846:	78bb      	ldrb	r3, [r7, #2]
     848:	6879      	ldr	r1, [r7, #4]
     84a:	01d2      	lsls	r2, r2, #7
     84c:	440a      	add	r2, r1
     84e:	4413      	add	r3, r2
     850:	3330      	adds	r3, #48	; 0x30
     852:	781b      	ldrb	r3, [r3, #0]
     854:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     856:	7bfb      	ldrb	r3, [r7, #15]
     858:	f003 030f 	and.w	r3, r3, #15
     85c:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
     85e:	787b      	ldrb	r3, [r7, #1]
     860:	011b      	lsls	r3, r3, #4
     862:	b2da      	uxtb	r2, r3
     864:	7bfb      	ldrb	r3, [r7, #15]
     866:	4313      	orrs	r3, r2
     868:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     86a:	78fa      	ldrb	r2, [r7, #3]
     86c:	78bb      	ldrb	r3, [r7, #2]
     86e:	6879      	ldr	r1, [r7, #4]
     870:	01d2      	lsls	r2, r2, #7
     872:	440a      	add	r2, r1
     874:	4413      	add	r3, r2
     876:	3330      	adds	r3, #48	; 0x30
     878:	7bfa      	ldrb	r2, [r7, #15]
     87a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     87c:	bf00      	nop
     87e:	3714      	adds	r7, #20
     880:	46bd      	mov	sp, r7
     882:	f85d 7b04 	ldr.w	r7, [sp], #4
     886:	4770      	bx	lr

00000888 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     888:	b480      	push	{r7}
     88a:	b085      	sub	sp, #20
     88c:	af00      	add	r7, sp, #0
     88e:	6078      	str	r0, [r7, #4]
     890:	4608      	mov	r0, r1
     892:	4611      	mov	r1, r2
     894:	461a      	mov	r2, r3
     896:	4603      	mov	r3, r0
     898:	70fb      	strb	r3, [r7, #3]
     89a:	460b      	mov	r3, r1
     89c:	70bb      	strb	r3, [r7, #2]
     89e:	4613      	mov	r3, r2
     8a0:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     8a2:	78fa      	ldrb	r2, [r7, #3]
     8a4:	78bb      	ldrb	r3, [r7, #2]
     8a6:	6879      	ldr	r1, [r7, #4]
     8a8:	01d2      	lsls	r2, r2, #7
     8aa:	440a      	add	r2, r1
     8ac:	4413      	add	r3, r2
     8ae:	3340      	adds	r3, #64	; 0x40
     8b0:	781b      	ldrb	r3, [r3, #0]
     8b2:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
     8b4:	7bfb      	ldrb	r3, [r7, #15]
     8b6:	f023 0301 	bic.w	r3, r3, #1
     8ba:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     8bc:	787a      	ldrb	r2, [r7, #1]
     8be:	7bfb      	ldrb	r3, [r7, #15]
     8c0:	4313      	orrs	r3, r2
     8c2:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8c4:	78fa      	ldrb	r2, [r7, #3]
     8c6:	78bb      	ldrb	r3, [r7, #2]
     8c8:	6879      	ldr	r1, [r7, #4]
     8ca:	01d2      	lsls	r2, r2, #7
     8cc:	440a      	add	r2, r1
     8ce:	4413      	add	r3, r2
     8d0:	3340      	adds	r3, #64	; 0x40
     8d2:	7bfa      	ldrb	r2, [r7, #15]
     8d4:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     8d6:	bf00      	nop
     8d8:	3714      	adds	r7, #20
     8da:	46bd      	mov	sp, r7
     8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
     8e0:	4770      	bx	lr

000008e2 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     8e2:	b490      	push	{r4, r7}
     8e4:	b082      	sub	sp, #8
     8e6:	af00      	add	r7, sp, #0
     8e8:	6078      	str	r0, [r7, #4]
     8ea:	460b      	mov	r3, r1
     8ec:	70fb      	strb	r3, [r7, #3]
     8ee:	4613      	mov	r3, r2
     8f0:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     8f2:	78fa      	ldrb	r2, [r7, #3]
     8f4:	78bb      	ldrb	r3, [r7, #2]
     8f6:	78f8      	ldrb	r0, [r7, #3]
     8f8:	78b9      	ldrb	r1, [r7, #2]
     8fa:	687c      	ldr	r4, [r7, #4]
     8fc:	01c0      	lsls	r0, r0, #7
     8fe:	4420      	add	r0, r4
     900:	4401      	add	r1, r0
     902:	3140      	adds	r1, #64	; 0x40
     904:	7809      	ldrb	r1, [r1, #0]
     906:	b2c9      	uxtb	r1, r1
     908:	f041 0104 	orr.w	r1, r1, #4
     90c:	b2c8      	uxtb	r0, r1
     90e:	6879      	ldr	r1, [r7, #4]
     910:	01d2      	lsls	r2, r2, #7
     912:	440a      	add	r2, r1
     914:	4413      	add	r3, r2
     916:	3340      	adds	r3, #64	; 0x40
     918:	4602      	mov	r2, r0
     91a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     91c:	bf00      	nop
     91e:	3708      	adds	r7, #8
     920:	46bd      	mov	sp, r7
     922:	bc90      	pop	{r4, r7}
     924:	4770      	bx	lr

00000926 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     926:	b490      	push	{r4, r7}
     928:	b082      	sub	sp, #8
     92a:	af00      	add	r7, sp, #0
     92c:	6078      	str	r0, [r7, #4]
     92e:	460b      	mov	r3, r1
     930:	70fb      	strb	r3, [r7, #3]
     932:	4613      	mov	r3, r2
     934:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     936:	78fa      	ldrb	r2, [r7, #3]
     938:	78bb      	ldrb	r3, [r7, #2]
     93a:	78f8      	ldrb	r0, [r7, #3]
     93c:	78b9      	ldrb	r1, [r7, #2]
     93e:	687c      	ldr	r4, [r7, #4]
     940:	01c0      	lsls	r0, r0, #7
     942:	4420      	add	r0, r4
     944:	4401      	add	r1, r0
     946:	3140      	adds	r1, #64	; 0x40
     948:	7809      	ldrb	r1, [r1, #0]
     94a:	b2c9      	uxtb	r1, r1
     94c:	f021 0104 	bic.w	r1, r1, #4
     950:	b2c8      	uxtb	r0, r1
     952:	6879      	ldr	r1, [r7, #4]
     954:	01d2      	lsls	r2, r2, #7
     956:	440a      	add	r2, r1
     958:	4413      	add	r3, r2
     95a:	3340      	adds	r3, #64	; 0x40
     95c:	4602      	mov	r2, r0
     95e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     960:	bf00      	nop
     962:	3708      	adds	r7, #8
     964:	46bd      	mov	sp, r7
     966:	bc90      	pop	{r4, r7}
     968:	4770      	bx	lr

0000096a <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
     96a:	b480      	push	{r7}
     96c:	b085      	sub	sp, #20
     96e:	af00      	add	r7, sp, #0
     970:	60f8      	str	r0, [r7, #12]
     972:	460b      	mov	r3, r1
     974:	607a      	str	r2, [r7, #4]
     976:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     978:	7afb      	ldrb	r3, [r7, #11]
     97a:	68fa      	ldr	r2, [r7, #12]
     97c:	01db      	lsls	r3, r3, #7
     97e:	4413      	add	r3, r2
     980:	3328      	adds	r3, #40	; 0x28
     982:	687a      	ldr	r2, [r7, #4]
     984:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     986:	bf00      	nop
     988:	3714      	adds	r7, #20
     98a:	46bd      	mov	sp, r7
     98c:	f85d 7b04 	ldr.w	r7, [sp], #4
     990:	4770      	bx	lr
	...

00000994 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
     994:	b580      	push	{r7, lr}
     996:	b082      	sub	sp, #8
     998:	af00      	add	r7, sp, #0
     99a:	4603      	mov	r3, r0
     99c:	6039      	str	r1, [r7, #0]
     99e:	71fb      	strb	r3, [r7, #7]
     9a0:	4613      	mov	r3, r2
     9a2:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
     9a4:	79bb      	ldrb	r3, [r7, #6]
     9a6:	2b01      	cmp	r3, #1
     9a8:	d01c      	beq.n	9e4 <_gpio_set_direction+0x50>
     9aa:	2b02      	cmp	r3, #2
     9ac:	d037      	beq.n	a1e <_gpio_set_direction+0x8a>
     9ae:	2b00      	cmp	r3, #0
     9b0:	d14e      	bne.n	a50 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
     9b2:	79fb      	ldrb	r3, [r7, #7]
     9b4:	683a      	ldr	r2, [r7, #0]
     9b6:	4619      	mov	r1, r3
     9b8:	482a      	ldr	r0, [pc, #168]	; (a64 <_gpio_set_direction+0xd0>)
     9ba:	4b2b      	ldr	r3, [pc, #172]	; (a68 <_gpio_set_direction+0xd4>)
     9bc:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     9be:	683b      	ldr	r3, [r7, #0]
     9c0:	b29b      	uxth	r3, r3
     9c2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     9c6:	79fb      	ldrb	r3, [r7, #7]
     9c8:	4619      	mov	r1, r3
     9ca:	4826      	ldr	r0, [pc, #152]	; (a64 <_gpio_set_direction+0xd0>)
     9cc:	4b27      	ldr	r3, [pc, #156]	; (a6c <_gpio_set_direction+0xd8>)
     9ce:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     9d0:	683b      	ldr	r3, [r7, #0]
     9d2:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     9d4:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     9d8:	79fb      	ldrb	r3, [r7, #7]
     9da:	4619      	mov	r1, r3
     9dc:	4821      	ldr	r0, [pc, #132]	; (a64 <_gpio_set_direction+0xd0>)
     9de:	4b23      	ldr	r3, [pc, #140]	; (a6c <_gpio_set_direction+0xd8>)
     9e0:	4798      	blx	r3
		break;
     9e2:	e03a      	b.n	a5a <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
     9e4:	79fb      	ldrb	r3, [r7, #7]
     9e6:	683a      	ldr	r2, [r7, #0]
     9e8:	4619      	mov	r1, r3
     9ea:	481e      	ldr	r0, [pc, #120]	; (a64 <_gpio_set_direction+0xd0>)
     9ec:	4b1e      	ldr	r3, [pc, #120]	; (a68 <_gpio_set_direction+0xd4>)
     9ee:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     9f0:	683b      	ldr	r3, [r7, #0]
     9f2:	b29b      	uxth	r3, r3
     9f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
     9f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     9fc:	79f9      	ldrb	r1, [r7, #7]
     9fe:	461a      	mov	r2, r3
     a00:	4818      	ldr	r0, [pc, #96]	; (a64 <_gpio_set_direction+0xd0>)
     a02:	4b1a      	ldr	r3, [pc, #104]	; (a6c <_gpio_set_direction+0xd8>)
     a04:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
     a06:	683b      	ldr	r3, [r7, #0]
     a08:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
     a0a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
     a0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     a12:	79f9      	ldrb	r1, [r7, #7]
     a14:	461a      	mov	r2, r3
     a16:	4813      	ldr	r0, [pc, #76]	; (a64 <_gpio_set_direction+0xd0>)
     a18:	4b14      	ldr	r3, [pc, #80]	; (a6c <_gpio_set_direction+0xd8>)
     a1a:	4798      	blx	r3
		break;
     a1c:	e01d      	b.n	a5a <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
     a1e:	79fb      	ldrb	r3, [r7, #7]
     a20:	683a      	ldr	r2, [r7, #0]
     a22:	4619      	mov	r1, r3
     a24:	480f      	ldr	r0, [pc, #60]	; (a64 <_gpio_set_direction+0xd0>)
     a26:	4b12      	ldr	r3, [pc, #72]	; (a70 <_gpio_set_direction+0xdc>)
     a28:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     a2a:	683b      	ldr	r3, [r7, #0]
     a2c:	b29b      	uxth	r3, r3
     a2e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     a32:	79fb      	ldrb	r3, [r7, #7]
     a34:	4619      	mov	r1, r3
     a36:	480b      	ldr	r0, [pc, #44]	; (a64 <_gpio_set_direction+0xd0>)
     a38:	4b0c      	ldr	r3, [pc, #48]	; (a6c <_gpio_set_direction+0xd8>)
     a3a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     a3c:	683b      	ldr	r3, [r7, #0]
     a3e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     a40:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     a44:	79fb      	ldrb	r3, [r7, #7]
     a46:	4619      	mov	r1, r3
     a48:	4806      	ldr	r0, [pc, #24]	; (a64 <_gpio_set_direction+0xd0>)
     a4a:	4b08      	ldr	r3, [pc, #32]	; (a6c <_gpio_set_direction+0xd8>)
     a4c:	4798      	blx	r3
		break;
     a4e:	e004      	b.n	a5a <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
     a50:	2246      	movs	r2, #70	; 0x46
     a52:	4908      	ldr	r1, [pc, #32]	; (a74 <_gpio_set_direction+0xe0>)
     a54:	2000      	movs	r0, #0
     a56:	4b08      	ldr	r3, [pc, #32]	; (a78 <_gpio_set_direction+0xe4>)
     a58:	4798      	blx	r3
	}
}
     a5a:	bf00      	nop
     a5c:	3708      	adds	r7, #8
     a5e:	46bd      	mov	sp, r7
     a60:	bd80      	pop	{r7, pc}
     a62:	bf00      	nop
     a64:	41008000 	.word	0x41008000
     a68:	00000753 	.word	0x00000753
     a6c:	0000096b 	.word	0x0000096b
     a70:	0000072b 	.word	0x0000072b
     a74:	000130d4 	.word	0x000130d4
     a78:	00002d4d 	.word	0x00002d4d

00000a7c <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     a7c:	b580      	push	{r7, lr}
     a7e:	b082      	sub	sp, #8
     a80:	af00      	add	r7, sp, #0
     a82:	4603      	mov	r3, r0
     a84:	6039      	str	r1, [r7, #0]
     a86:	71fb      	strb	r3, [r7, #7]
     a88:	4613      	mov	r3, r2
     a8a:	71bb      	strb	r3, [r7, #6]
	if (level) {
     a8c:	79bb      	ldrb	r3, [r7, #6]
     a8e:	2b00      	cmp	r3, #0
     a90:	d006      	beq.n	aa0 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
     a92:	79fb      	ldrb	r3, [r7, #7]
     a94:	683a      	ldr	r2, [r7, #0]
     a96:	4619      	mov	r1, r3
     a98:	4806      	ldr	r0, [pc, #24]	; (ab4 <_gpio_set_level+0x38>)
     a9a:	4b07      	ldr	r3, [pc, #28]	; (ab8 <_gpio_set_level+0x3c>)
     a9c:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
     a9e:	e005      	b.n	aac <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
     aa0:	79fb      	ldrb	r3, [r7, #7]
     aa2:	683a      	ldr	r2, [r7, #0]
     aa4:	4619      	mov	r1, r3
     aa6:	4803      	ldr	r0, [pc, #12]	; (ab4 <_gpio_set_level+0x38>)
     aa8:	4b04      	ldr	r3, [pc, #16]	; (abc <_gpio_set_level+0x40>)
     aaa:	4798      	blx	r3
}
     aac:	bf00      	nop
     aae:	3708      	adds	r7, #8
     ab0:	46bd      	mov	sp, r7
     ab2:	bd80      	pop	{r7, pc}
     ab4:	41008000 	.word	0x41008000
     ab8:	0000077b 	.word	0x0000077b
     abc:	000007a3 	.word	0x000007a3

00000ac0 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
     ac0:	b580      	push	{r7, lr}
     ac2:	b082      	sub	sp, #8
     ac4:	af00      	add	r7, sp, #0
     ac6:	4603      	mov	r3, r0
     ac8:	71fb      	strb	r3, [r7, #7]
     aca:	460b      	mov	r3, r1
     acc:	71bb      	strb	r3, [r7, #6]
     ace:	4613      	mov	r3, r2
     ad0:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
     ad2:	797b      	ldrb	r3, [r7, #5]
     ad4:	2b01      	cmp	r3, #1
     ad6:	d00a      	beq.n	aee <_gpio_set_pin_pull_mode+0x2e>
     ad8:	2b02      	cmp	r3, #2
     ada:	d01f      	beq.n	b1c <_gpio_set_pin_pull_mode+0x5c>
     adc:	2b00      	cmp	r3, #0
     ade:	d134      	bne.n	b4a <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
     ae0:	79ba      	ldrb	r2, [r7, #6]
     ae2:	79fb      	ldrb	r3, [r7, #7]
     ae4:	4619      	mov	r1, r3
     ae6:	481e      	ldr	r0, [pc, #120]	; (b60 <_gpio_set_pin_pull_mode+0xa0>)
     ae8:	4b1e      	ldr	r3, [pc, #120]	; (b64 <_gpio_set_pin_pull_mode+0xa4>)
     aea:	4798      	blx	r3
		break;
     aec:	e033      	b.n	b56 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     aee:	79bb      	ldrb	r3, [r7, #6]
     af0:	2201      	movs	r2, #1
     af2:	409a      	lsls	r2, r3
     af4:	79fb      	ldrb	r3, [r7, #7]
     af6:	4619      	mov	r1, r3
     af8:	4819      	ldr	r0, [pc, #100]	; (b60 <_gpio_set_pin_pull_mode+0xa0>)
     afa:	4b1b      	ldr	r3, [pc, #108]	; (b68 <_gpio_set_pin_pull_mode+0xa8>)
     afc:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     afe:	79ba      	ldrb	r2, [r7, #6]
     b00:	79fb      	ldrb	r3, [r7, #7]
     b02:	4619      	mov	r1, r3
     b04:	4816      	ldr	r0, [pc, #88]	; (b60 <_gpio_set_pin_pull_mode+0xa0>)
     b06:	4b19      	ldr	r3, [pc, #100]	; (b6c <_gpio_set_pin_pull_mode+0xac>)
     b08:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
     b0a:	79bb      	ldrb	r3, [r7, #6]
     b0c:	2201      	movs	r2, #1
     b0e:	409a      	lsls	r2, r3
     b10:	79fb      	ldrb	r3, [r7, #7]
     b12:	4619      	mov	r1, r3
     b14:	4812      	ldr	r0, [pc, #72]	; (b60 <_gpio_set_pin_pull_mode+0xa0>)
     b16:	4b16      	ldr	r3, [pc, #88]	; (b70 <_gpio_set_pin_pull_mode+0xb0>)
     b18:	4798      	blx	r3
		break;
     b1a:	e01c      	b.n	b56 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     b1c:	79bb      	ldrb	r3, [r7, #6]
     b1e:	2201      	movs	r2, #1
     b20:	409a      	lsls	r2, r3
     b22:	79fb      	ldrb	r3, [r7, #7]
     b24:	4619      	mov	r1, r3
     b26:	480e      	ldr	r0, [pc, #56]	; (b60 <_gpio_set_pin_pull_mode+0xa0>)
     b28:	4b0f      	ldr	r3, [pc, #60]	; (b68 <_gpio_set_pin_pull_mode+0xa8>)
     b2a:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     b2c:	79ba      	ldrb	r2, [r7, #6]
     b2e:	79fb      	ldrb	r3, [r7, #7]
     b30:	4619      	mov	r1, r3
     b32:	480b      	ldr	r0, [pc, #44]	; (b60 <_gpio_set_pin_pull_mode+0xa0>)
     b34:	4b0d      	ldr	r3, [pc, #52]	; (b6c <_gpio_set_pin_pull_mode+0xac>)
     b36:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
     b38:	79bb      	ldrb	r3, [r7, #6]
     b3a:	2201      	movs	r2, #1
     b3c:	409a      	lsls	r2, r3
     b3e:	79fb      	ldrb	r3, [r7, #7]
     b40:	4619      	mov	r1, r3
     b42:	4807      	ldr	r0, [pc, #28]	; (b60 <_gpio_set_pin_pull_mode+0xa0>)
     b44:	4b0b      	ldr	r3, [pc, #44]	; (b74 <_gpio_set_pin_pull_mode+0xb4>)
     b46:	4798      	blx	r3
		break;
     b48:	e005      	b.n	b56 <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
     b4a:	2289      	movs	r2, #137	; 0x89
     b4c:	490a      	ldr	r1, [pc, #40]	; (b78 <_gpio_set_pin_pull_mode+0xb8>)
     b4e:	2000      	movs	r0, #0
     b50:	4b0a      	ldr	r3, [pc, #40]	; (b7c <_gpio_set_pin_pull_mode+0xbc>)
     b52:	4798      	blx	r3
		break;
     b54:	bf00      	nop
	}
}
     b56:	bf00      	nop
     b58:	3708      	adds	r7, #8
     b5a:	46bd      	mov	sp, r7
     b5c:	bd80      	pop	{r7, pc}
     b5e:	bf00      	nop
     b60:	41008000 	.word	0x41008000
     b64:	00000927 	.word	0x00000927
     b68:	00000753 	.word	0x00000753
     b6c:	000008e3 	.word	0x000008e3
     b70:	0000077b 	.word	0x0000077b
     b74:	000007a3 	.word	0x000007a3
     b78:	000130d4 	.word	0x000130d4
     b7c:	00002d4d 	.word	0x00002d4d

00000b80 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
     b80:	b590      	push	{r4, r7, lr}
     b82:	b085      	sub	sp, #20
     b84:	af00      	add	r7, sp, #0
     b86:	6078      	str	r0, [r7, #4]
     b88:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
     b8a:	687b      	ldr	r3, [r7, #4]
     b8c:	095b      	lsrs	r3, r3, #5
     b8e:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
     b90:	687b      	ldr	r3, [r7, #4]
     b92:	b2db      	uxtb	r3, r3
     b94:	f003 031f 	and.w	r3, r3, #31
     b98:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
     b9a:	683b      	ldr	r3, [r7, #0]
     b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
     ba0:	d106      	bne.n	bb0 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
     ba2:	7bba      	ldrb	r2, [r7, #14]
     ba4:	7bf9      	ldrb	r1, [r7, #15]
     ba6:	2300      	movs	r3, #0
     ba8:	4812      	ldr	r0, [pc, #72]	; (bf4 <_gpio_set_pin_function+0x74>)
     baa:	4c13      	ldr	r4, [pc, #76]	; (bf8 <_gpio_set_pin_function+0x78>)
     bac:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
     bae:	e01d      	b.n	bec <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
     bb0:	7bba      	ldrb	r2, [r7, #14]
     bb2:	7bf9      	ldrb	r1, [r7, #15]
     bb4:	2301      	movs	r3, #1
     bb6:	480f      	ldr	r0, [pc, #60]	; (bf4 <_gpio_set_pin_function+0x74>)
     bb8:	4c0f      	ldr	r4, [pc, #60]	; (bf8 <_gpio_set_pin_function+0x78>)
     bba:	47a0      	blx	r4
		if (pin & 1) {
     bbc:	7bbb      	ldrb	r3, [r7, #14]
     bbe:	f003 0301 	and.w	r3, r3, #1
     bc2:	2b00      	cmp	r3, #0
     bc4:	d009      	beq.n	bda <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
     bc6:	7bbb      	ldrb	r3, [r7, #14]
     bc8:	085b      	lsrs	r3, r3, #1
     bca:	b2da      	uxtb	r2, r3
     bcc:	683b      	ldr	r3, [r7, #0]
     bce:	b2db      	uxtb	r3, r3
     bd0:	7bf9      	ldrb	r1, [r7, #15]
     bd2:	4808      	ldr	r0, [pc, #32]	; (bf4 <_gpio_set_pin_function+0x74>)
     bd4:	4c09      	ldr	r4, [pc, #36]	; (bfc <_gpio_set_pin_function+0x7c>)
     bd6:	47a0      	blx	r4
}
     bd8:	e008      	b.n	bec <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
     bda:	7bbb      	ldrb	r3, [r7, #14]
     bdc:	085b      	lsrs	r3, r3, #1
     bde:	b2da      	uxtb	r2, r3
     be0:	683b      	ldr	r3, [r7, #0]
     be2:	b2db      	uxtb	r3, r3
     be4:	7bf9      	ldrb	r1, [r7, #15]
     be6:	4803      	ldr	r0, [pc, #12]	; (bf4 <_gpio_set_pin_function+0x74>)
     be8:	4c05      	ldr	r4, [pc, #20]	; (c00 <_gpio_set_pin_function+0x80>)
     bea:	47a0      	blx	r4
}
     bec:	bf00      	nop
     bee:	3714      	adds	r7, #20
     bf0:	46bd      	mov	sp, r7
     bf2:	bd90      	pop	{r4, r7, pc}
     bf4:	41008000 	.word	0x41008000
     bf8:	00000889 	.word	0x00000889
     bfc:	0000082b 	.word	0x0000082b
     c00:	000007cb 	.word	0x000007cb

00000c04 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
     c04:	b580      	push	{r7, lr}
     c06:	b082      	sub	sp, #8
     c08:	af00      	add	r7, sp, #0
     c0a:	4603      	mov	r3, r0
     c0c:	460a      	mov	r2, r1
     c0e:	71fb      	strb	r3, [r7, #7]
     c10:	4613      	mov	r3, r2
     c12:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     c14:	79fb      	ldrb	r3, [r7, #7]
     c16:	095b      	lsrs	r3, r3, #5
     c18:	b2d8      	uxtb	r0, r3
     c1a:	79fb      	ldrb	r3, [r7, #7]
     c1c:	f003 031f 	and.w	r3, r3, #31
     c20:	b2db      	uxtb	r3, r3
     c22:	79ba      	ldrb	r2, [r7, #6]
     c24:	4619      	mov	r1, r3
     c26:	4b03      	ldr	r3, [pc, #12]	; (c34 <gpio_set_pin_pull_mode+0x30>)
     c28:	4798      	blx	r3
}
     c2a:	bf00      	nop
     c2c:	3708      	adds	r7, #8
     c2e:	46bd      	mov	sp, r7
     c30:	bd80      	pop	{r7, pc}
     c32:	bf00      	nop
     c34:	00000ac1 	.word	0x00000ac1

00000c38 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
     c38:	b580      	push	{r7, lr}
     c3a:	b082      	sub	sp, #8
     c3c:	af00      	add	r7, sp, #0
     c3e:	6078      	str	r0, [r7, #4]
     c40:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
     c42:	6839      	ldr	r1, [r7, #0]
     c44:	6878      	ldr	r0, [r7, #4]
     c46:	4b03      	ldr	r3, [pc, #12]	; (c54 <gpio_set_pin_function+0x1c>)
     c48:	4798      	blx	r3
}
     c4a:	bf00      	nop
     c4c:	3708      	adds	r7, #8
     c4e:	46bd      	mov	sp, r7
     c50:	bd80      	pop	{r7, pc}
     c52:	bf00      	nop
     c54:	00000b81 	.word	0x00000b81

00000c58 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
     c58:	b580      	push	{r7, lr}
     c5a:	b082      	sub	sp, #8
     c5c:	af00      	add	r7, sp, #0
     c5e:	4603      	mov	r3, r0
     c60:	460a      	mov	r2, r1
     c62:	71fb      	strb	r3, [r7, #7]
     c64:	4613      	mov	r3, r2
     c66:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
     c68:	79fb      	ldrb	r3, [r7, #7]
     c6a:	095b      	lsrs	r3, r3, #5
     c6c:	b2d8      	uxtb	r0, r3
     c6e:	79fb      	ldrb	r3, [r7, #7]
     c70:	f003 031f 	and.w	r3, r3, #31
     c74:	2201      	movs	r2, #1
     c76:	fa02 f303 	lsl.w	r3, r2, r3
     c7a:	79ba      	ldrb	r2, [r7, #6]
     c7c:	4619      	mov	r1, r3
     c7e:	4b03      	ldr	r3, [pc, #12]	; (c8c <gpio_set_pin_direction+0x34>)
     c80:	4798      	blx	r3
}
     c82:	bf00      	nop
     c84:	3708      	adds	r7, #8
     c86:	46bd      	mov	sp, r7
     c88:	bd80      	pop	{r7, pc}
     c8a:	bf00      	nop
     c8c:	00000995 	.word	0x00000995

00000c90 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     c90:	b580      	push	{r7, lr}
     c92:	b082      	sub	sp, #8
     c94:	af00      	add	r7, sp, #0
     c96:	4603      	mov	r3, r0
     c98:	460a      	mov	r2, r1
     c9a:	71fb      	strb	r3, [r7, #7]
     c9c:	4613      	mov	r3, r2
     c9e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     ca0:	79fb      	ldrb	r3, [r7, #7]
     ca2:	095b      	lsrs	r3, r3, #5
     ca4:	b2d8      	uxtb	r0, r3
     ca6:	79fb      	ldrb	r3, [r7, #7]
     ca8:	f003 031f 	and.w	r3, r3, #31
     cac:	2201      	movs	r2, #1
     cae:	fa02 f303 	lsl.w	r3, r2, r3
     cb2:	79ba      	ldrb	r2, [r7, #6]
     cb4:	4619      	mov	r1, r3
     cb6:	4b03      	ldr	r3, [pc, #12]	; (cc4 <gpio_set_pin_level+0x34>)
     cb8:	4798      	blx	r3
}
     cba:	bf00      	nop
     cbc:	3708      	adds	r7, #8
     cbe:	46bd      	mov	sp, r7
     cc0:	bd80      	pop	{r7, pc}
     cc2:	bf00      	nop
     cc4:	00000a7d 	.word	0x00000a7d

00000cc8 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
     cc8:	b580      	push	{r7, lr}
     cca:	af00      	add	r7, sp, #0
	_init_chip();
     ccc:	4b01      	ldr	r3, [pc, #4]	; (cd4 <init_mcu+0xc>)
     cce:	4798      	blx	r3
}
     cd0:	bf00      	nop
     cd2:	bd80      	pop	{r7, pc}
     cd4:	00003f3d 	.word	0x00003f3d

00000cd8 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
     cd8:	b580      	push	{r7, lr}
     cda:	b082      	sub	sp, #8
     cdc:	af00      	add	r7, sp, #0
     cde:	6078      	str	r0, [r7, #4]
     ce0:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
     ce2:	687b      	ldr	r3, [r7, #4]
     ce4:	2b00      	cmp	r3, #0
     ce6:	d004      	beq.n	cf2 <wdt_init+0x1a>
     ce8:	683b      	ldr	r3, [r7, #0]
     cea:	2b00      	cmp	r3, #0
     cec:	d001      	beq.n	cf2 <wdt_init+0x1a>
     cee:	2301      	movs	r3, #1
     cf0:	e000      	b.n	cf4 <wdt_init+0x1c>
     cf2:	2300      	movs	r3, #0
     cf4:	f003 0301 	and.w	r3, r3, #1
     cf8:	b2db      	uxtb	r3, r3
     cfa:	2248      	movs	r2, #72	; 0x48
     cfc:	4907      	ldr	r1, [pc, #28]	; (d1c <wdt_init+0x44>)
     cfe:	4618      	mov	r0, r3
     d00:	4b07      	ldr	r3, [pc, #28]	; (d20 <wdt_init+0x48>)
     d02:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     d04:	687b      	ldr	r3, [r7, #4]
     d06:	683a      	ldr	r2, [r7, #0]
     d08:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
     d0a:	687b      	ldr	r3, [r7, #4]
     d0c:	4618      	mov	r0, r3
     d0e:	4b05      	ldr	r3, [pc, #20]	; (d24 <wdt_init+0x4c>)
     d10:	4798      	blx	r3
     d12:	4603      	mov	r3, r0
}
     d14:	4618      	mov	r0, r3
     d16:	3708      	adds	r7, #8
     d18:	46bd      	mov	sp, r7
     d1a:	bd80      	pop	{r7, pc}
     d1c:	000130f0 	.word	0x000130f0
     d20:	00002d4d 	.word	0x00002d4d
     d24:	0000a58d 	.word	0x0000a58d

00000d28 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
     d28:	b580      	push	{r7, lr}
     d2a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
     d2c:	4804      	ldr	r0, [pc, #16]	; (d40 <CRC_CALC_init+0x18>)
     d2e:	4b05      	ldr	r3, [pc, #20]	; (d44 <CRC_CALC_init+0x1c>)
     d30:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
     d32:	4905      	ldr	r1, [pc, #20]	; (d48 <CRC_CALC_init+0x20>)
     d34:	4805      	ldr	r0, [pc, #20]	; (d4c <CRC_CALC_init+0x24>)
     d36:	4b06      	ldr	r3, [pc, #24]	; (d50 <CRC_CALC_init+0x28>)
     d38:	4798      	blx	r3
}
     d3a:	bf00      	nop
     d3c:	bd80      	pop	{r7, pc}
     d3e:	bf00      	nop
     d40:	40000800 	.word	0x40000800
     d44:	0000056b 	.word	0x0000056b
     d48:	41002000 	.word	0x41002000
     d4c:	20001c6c 	.word	0x20001c6c
     d50:	00001c4d 	.word	0x00001c4d

00000d54 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
     d54:	b580      	push	{r7, lr}
     d56:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     d58:	2244      	movs	r2, #68	; 0x44
     d5a:	2104      	movs	r1, #4
     d5c:	483f      	ldr	r0, [pc, #252]	; (e5c <EXTERNAL_IRQ_0_init+0x108>)
     d5e:	4b40      	ldr	r3, [pc, #256]	; (e60 <EXTERNAL_IRQ_0_init+0x10c>)
     d60:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
     d62:	4840      	ldr	r0, [pc, #256]	; (e64 <EXTERNAL_IRQ_0_init+0x110>)
     d64:	4b40      	ldr	r3, [pc, #256]	; (e68 <EXTERNAL_IRQ_0_init+0x114>)
     d66:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
     d68:	2101      	movs	r1, #1
     d6a:	2040      	movs	r0, #64	; 0x40
     d6c:	4b3f      	ldr	r3, [pc, #252]	; (e6c <EXTERNAL_IRQ_0_init+0x118>)
     d6e:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
     d70:	2100      	movs	r1, #0
     d72:	2040      	movs	r0, #64	; 0x40
     d74:	4b3e      	ldr	r3, [pc, #248]	; (e70 <EXTERNAL_IRQ_0_init+0x11c>)
     d76:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
     d78:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
     d7c:	2040      	movs	r0, #64	; 0x40
     d7e:	4b3d      	ldr	r3, [pc, #244]	; (e74 <EXTERNAL_IRQ_0_init+0x120>)
     d80:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB01, GPIO_DIRECTION_IN);
     d82:	2101      	movs	r1, #1
     d84:	2021      	movs	r0, #33	; 0x21
     d86:	4b39      	ldr	r3, [pc, #228]	; (e6c <EXTERNAL_IRQ_0_init+0x118>)
     d88:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB01,
     d8a:	2100      	movs	r1, #0
     d8c:	2021      	movs	r0, #33	; 0x21
     d8e:	4b38      	ldr	r3, [pc, #224]	; (e70 <EXTERNAL_IRQ_0_init+0x11c>)
     d90:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB01, PINMUX_PB01A_EIC_EXTINT1);
     d92:	f44f 1104 	mov.w	r1, #2162688	; 0x210000
     d96:	2021      	movs	r0, #33	; 0x21
     d98:	4b36      	ldr	r3, [pc, #216]	; (e74 <EXTERNAL_IRQ_0_init+0x120>)
     d9a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA03, GPIO_DIRECTION_IN);
     d9c:	2101      	movs	r1, #1
     d9e:	2003      	movs	r0, #3
     da0:	4b32      	ldr	r3, [pc, #200]	; (e6c <EXTERNAL_IRQ_0_init+0x118>)
     da2:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA03,
     da4:	2102      	movs	r1, #2
     da6:	2003      	movs	r0, #3
     da8:	4b31      	ldr	r3, [pc, #196]	; (e70 <EXTERNAL_IRQ_0_init+0x11c>)
     daa:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA03, PINMUX_PA03A_EIC_EXTINT3);
     dac:	f44f 3140 	mov.w	r1, #196608	; 0x30000
     db0:	2003      	movs	r0, #3
     db2:	4b30      	ldr	r3, [pc, #192]	; (e74 <EXTERNAL_IRQ_0_init+0x120>)
     db4:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
     db6:	2101      	movs	r1, #1
     db8:	2004      	movs	r0, #4
     dba:	4b2c      	ldr	r3, [pc, #176]	; (e6c <EXTERNAL_IRQ_0_init+0x118>)
     dbc:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
     dbe:	2102      	movs	r1, #2
     dc0:	2004      	movs	r0, #4
     dc2:	4b2b      	ldr	r3, [pc, #172]	; (e70 <EXTERNAL_IRQ_0_init+0x11c>)
     dc4:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
     dc6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
     dca:	2004      	movs	r0, #4
     dcc:	4b29      	ldr	r3, [pc, #164]	; (e74 <EXTERNAL_IRQ_0_init+0x120>)
     dce:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
     dd0:	2101      	movs	r1, #1
     dd2:	2005      	movs	r0, #5
     dd4:	4b25      	ldr	r3, [pc, #148]	; (e6c <EXTERNAL_IRQ_0_init+0x118>)
     dd6:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
     dd8:	2102      	movs	r1, #2
     dda:	2005      	movs	r0, #5
     ddc:	4b24      	ldr	r3, [pc, #144]	; (e70 <EXTERNAL_IRQ_0_init+0x11c>)
     dde:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
     de0:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
     de4:	2005      	movs	r0, #5
     de6:	4b23      	ldr	r3, [pc, #140]	; (e74 <EXTERNAL_IRQ_0_init+0x120>)
     de8:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
     dea:	2101      	movs	r1, #1
     dec:	2056      	movs	r0, #86	; 0x56
     dee:	4b1f      	ldr	r3, [pc, #124]	; (e6c <EXTERNAL_IRQ_0_init+0x118>)
     df0:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
     df2:	2102      	movs	r1, #2
     df4:	2056      	movs	r0, #86	; 0x56
     df6:	4b1e      	ldr	r3, [pc, #120]	; (e70 <EXTERNAL_IRQ_0_init+0x11c>)
     df8:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
     dfa:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
     dfe:	2056      	movs	r0, #86	; 0x56
     e00:	4b1c      	ldr	r3, [pc, #112]	; (e74 <EXTERNAL_IRQ_0_init+0x120>)
     e02:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
     e04:	2101      	movs	r1, #1
     e06:	2057      	movs	r0, #87	; 0x57
     e08:	4b18      	ldr	r3, [pc, #96]	; (e6c <EXTERNAL_IRQ_0_init+0x118>)
     e0a:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
     e0c:	2102      	movs	r1, #2
     e0e:	2057      	movs	r0, #87	; 0x57
     e10:	4b17      	ldr	r3, [pc, #92]	; (e70 <EXTERNAL_IRQ_0_init+0x11c>)
     e12:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
     e14:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
     e18:	2057      	movs	r0, #87	; 0x57
     e1a:	4b16      	ldr	r3, [pc, #88]	; (e74 <EXTERNAL_IRQ_0_init+0x120>)
     e1c:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_IN);
     e1e:	2101      	movs	r1, #1
     e20:	2028      	movs	r0, #40	; 0x28
     e22:	4b12      	ldr	r3, [pc, #72]	; (e6c <EXTERNAL_IRQ_0_init+0x118>)
     e24:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB08,
     e26:	2100      	movs	r1, #0
     e28:	2028      	movs	r0, #40	; 0x28
     e2a:	4b11      	ldr	r3, [pc, #68]	; (e70 <EXTERNAL_IRQ_0_init+0x11c>)
     e2c:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB08, PINMUX_PB08A_EIC_EXTINT8);
     e2e:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
     e32:	2028      	movs	r0, #40	; 0x28
     e34:	4b0f      	ldr	r3, [pc, #60]	; (e74 <EXTERNAL_IRQ_0_init+0x120>)
     e36:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_IN);
     e38:	2101      	movs	r1, #1
     e3a:	2029      	movs	r0, #41	; 0x29
     e3c:	4b0b      	ldr	r3, [pc, #44]	; (e6c <EXTERNAL_IRQ_0_init+0x118>)
     e3e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB09,
     e40:	2100      	movs	r1, #0
     e42:	2029      	movs	r0, #41	; 0x29
     e44:	4b0a      	ldr	r3, [pc, #40]	; (e70 <EXTERNAL_IRQ_0_init+0x11c>)
     e46:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB09, PINMUX_PB09A_EIC_EXTINT9);
     e48:	f44f 1124 	mov.w	r1, #2686976	; 0x290000
     e4c:	2029      	movs	r0, #41	; 0x29
     e4e:	4b09      	ldr	r3, [pc, #36]	; (e74 <EXTERNAL_IRQ_0_init+0x120>)
     e50:	4798      	blx	r3

	ext_irq_init();
     e52:	4b09      	ldr	r3, [pc, #36]	; (e78 <EXTERNAL_IRQ_0_init+0x124>)
     e54:	4798      	blx	r3
}
     e56:	bf00      	nop
     e58:	bd80      	pop	{r7, pc}
     e5a:	bf00      	nop
     e5c:	40001c00 	.word	0x40001c00
     e60:	00000405 	.word	0x00000405
     e64:	40000800 	.word	0x40000800
     e68:	000004eb 	.word	0x000004eb
     e6c:	00000c59 	.word	0x00000c59
     e70:	00000c05 	.word	0x00000c05
     e74:	00000c39 	.word	0x00000c39
     e78:	00001d15 	.word	0x00001d15

00000e7c <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
     e7c:	b580      	push	{r7, lr}
     e7e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     e80:	2244      	movs	r2, #68	; 0x44
     e82:	210b      	movs	r1, #11
     e84:	4807      	ldr	r0, [pc, #28]	; (ea4 <EVENT_SYSTEM_0_init+0x28>)
     e86:	4b08      	ldr	r3, [pc, #32]	; (ea8 <EVENT_SYSTEM_0_init+0x2c>)
     e88:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     e8a:	2244      	movs	r2, #68	; 0x44
     e8c:	210c      	movs	r1, #12
     e8e:	4805      	ldr	r0, [pc, #20]	; (ea4 <EVENT_SYSTEM_0_init+0x28>)
     e90:	4b05      	ldr	r3, [pc, #20]	; (ea8 <EVENT_SYSTEM_0_init+0x2c>)
     e92:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
     e94:	4805      	ldr	r0, [pc, #20]	; (eac <EVENT_SYSTEM_0_init+0x30>)
     e96:	4b06      	ldr	r3, [pc, #24]	; (eb0 <EVENT_SYSTEM_0_init+0x34>)
     e98:	4798      	blx	r3

	event_system_init();
     e9a:	4b06      	ldr	r3, [pc, #24]	; (eb4 <EVENT_SYSTEM_0_init+0x38>)
     e9c:	4798      	blx	r3
}
     e9e:	bf00      	nop
     ea0:	bd80      	pop	{r7, pc}
     ea2:	bf00      	nop
     ea4:	40001c00 	.word	0x40001c00
     ea8:	00000405 	.word	0x00000405
     eac:	40000800 	.word	0x40000800
     eb0:	0000058b 	.word	0x0000058b
     eb4:	00001d01 	.word	0x00001d01

00000eb8 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
     eb8:	b580      	push	{r7, lr}
     eba:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
     ebc:	2101      	movs	r1, #1
     ebe:	202b      	movs	r0, #43	; 0x2b
     ec0:	4b2b      	ldr	r3, [pc, #172]	; (f70 <QSPI_N25Q256_PORT_init+0xb8>)
     ec2:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
     ec4:	2100      	movs	r1, #0
     ec6:	202b      	movs	r0, #43	; 0x2b
     ec8:	4b2a      	ldr	r3, [pc, #168]	; (f74 <QSPI_N25Q256_PORT_init+0xbc>)
     eca:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
     ecc:	492a      	ldr	r1, [pc, #168]	; (f78 <QSPI_N25Q256_PORT_init+0xc0>)
     ece:	202b      	movs	r0, #43	; 0x2b
     ed0:	4b2a      	ldr	r3, [pc, #168]	; (f7c <QSPI_N25Q256_PORT_init+0xc4>)
     ed2:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
     ed4:	2102      	movs	r1, #2
     ed6:	2008      	movs	r0, #8
     ed8:	4b25      	ldr	r3, [pc, #148]	; (f70 <QSPI_N25Q256_PORT_init+0xb8>)
     eda:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
     edc:	2100      	movs	r1, #0
     ede:	2008      	movs	r0, #8
     ee0:	4b27      	ldr	r3, [pc, #156]	; (f80 <QSPI_N25Q256_PORT_init+0xc8>)
     ee2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
     ee4:	2100      	movs	r1, #0
     ee6:	2008      	movs	r0, #8
     ee8:	4b22      	ldr	r3, [pc, #136]	; (f74 <QSPI_N25Q256_PORT_init+0xbc>)
     eea:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
     eec:	4925      	ldr	r1, [pc, #148]	; (f84 <QSPI_N25Q256_PORT_init+0xcc>)
     eee:	2008      	movs	r0, #8
     ef0:	4b22      	ldr	r3, [pc, #136]	; (f7c <QSPI_N25Q256_PORT_init+0xc4>)
     ef2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
     ef4:	2102      	movs	r1, #2
     ef6:	2009      	movs	r0, #9
     ef8:	4b1d      	ldr	r3, [pc, #116]	; (f70 <QSPI_N25Q256_PORT_init+0xb8>)
     efa:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
     efc:	2100      	movs	r1, #0
     efe:	2009      	movs	r0, #9
     f00:	4b1f      	ldr	r3, [pc, #124]	; (f80 <QSPI_N25Q256_PORT_init+0xc8>)
     f02:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
     f04:	2100      	movs	r1, #0
     f06:	2009      	movs	r0, #9
     f08:	4b1a      	ldr	r3, [pc, #104]	; (f74 <QSPI_N25Q256_PORT_init+0xbc>)
     f0a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
     f0c:	491e      	ldr	r1, [pc, #120]	; (f88 <QSPI_N25Q256_PORT_init+0xd0>)
     f0e:	2009      	movs	r0, #9
     f10:	4b1a      	ldr	r3, [pc, #104]	; (f7c <QSPI_N25Q256_PORT_init+0xc4>)
     f12:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
     f14:	2102      	movs	r1, #2
     f16:	200a      	movs	r0, #10
     f18:	4b15      	ldr	r3, [pc, #84]	; (f70 <QSPI_N25Q256_PORT_init+0xb8>)
     f1a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
     f1c:	2100      	movs	r1, #0
     f1e:	200a      	movs	r0, #10
     f20:	4b17      	ldr	r3, [pc, #92]	; (f80 <QSPI_N25Q256_PORT_init+0xc8>)
     f22:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
     f24:	2100      	movs	r1, #0
     f26:	200a      	movs	r0, #10
     f28:	4b12      	ldr	r3, [pc, #72]	; (f74 <QSPI_N25Q256_PORT_init+0xbc>)
     f2a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
     f2c:	4917      	ldr	r1, [pc, #92]	; (f8c <QSPI_N25Q256_PORT_init+0xd4>)
     f2e:	200a      	movs	r0, #10
     f30:	4b12      	ldr	r3, [pc, #72]	; (f7c <QSPI_N25Q256_PORT_init+0xc4>)
     f32:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
     f34:	2102      	movs	r1, #2
     f36:	200b      	movs	r0, #11
     f38:	4b0d      	ldr	r3, [pc, #52]	; (f70 <QSPI_N25Q256_PORT_init+0xb8>)
     f3a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
     f3c:	2100      	movs	r1, #0
     f3e:	200b      	movs	r0, #11
     f40:	4b0f      	ldr	r3, [pc, #60]	; (f80 <QSPI_N25Q256_PORT_init+0xc8>)
     f42:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
     f44:	2100      	movs	r1, #0
     f46:	200b      	movs	r0, #11
     f48:	4b0a      	ldr	r3, [pc, #40]	; (f74 <QSPI_N25Q256_PORT_init+0xbc>)
     f4a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
     f4c:	4910      	ldr	r1, [pc, #64]	; (f90 <QSPI_N25Q256_PORT_init+0xd8>)
     f4e:	200b      	movs	r0, #11
     f50:	4b0a      	ldr	r3, [pc, #40]	; (f7c <QSPI_N25Q256_PORT_init+0xc4>)
     f52:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
     f54:	2101      	movs	r1, #1
     f56:	202a      	movs	r0, #42	; 0x2a
     f58:	4b05      	ldr	r3, [pc, #20]	; (f70 <QSPI_N25Q256_PORT_init+0xb8>)
     f5a:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
     f5c:	2100      	movs	r1, #0
     f5e:	202a      	movs	r0, #42	; 0x2a
     f60:	4b04      	ldr	r3, [pc, #16]	; (f74 <QSPI_N25Q256_PORT_init+0xbc>)
     f62:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
     f64:	490b      	ldr	r1, [pc, #44]	; (f94 <QSPI_N25Q256_PORT_init+0xdc>)
     f66:	202a      	movs	r0, #42	; 0x2a
     f68:	4b04      	ldr	r3, [pc, #16]	; (f7c <QSPI_N25Q256_PORT_init+0xc4>)
     f6a:	4798      	blx	r3
}
     f6c:	bf00      	nop
     f6e:	bd80      	pop	{r7, pc}
     f70:	00000c59 	.word	0x00000c59
     f74:	00000c05 	.word	0x00000c05
     f78:	002b0007 	.word	0x002b0007
     f7c:	00000c39 	.word	0x00000c39
     f80:	00000c91 	.word	0x00000c91
     f84:	00080007 	.word	0x00080007
     f88:	00090007 	.word	0x00090007
     f8c:	000a0007 	.word	0x000a0007
     f90:	000b0007 	.word	0x000b0007
     f94:	002a0007 	.word	0x002a0007

00000f98 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
     f98:	b580      	push	{r7, lr}
     f9a:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
     f9c:	4805      	ldr	r0, [pc, #20]	; (fb4 <QSPI_N25Q256_CLOCK_init+0x1c>)
     f9e:	4b06      	ldr	r3, [pc, #24]	; (fb8 <QSPI_N25Q256_CLOCK_init+0x20>)
     fa0:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
     fa2:	4804      	ldr	r0, [pc, #16]	; (fb4 <QSPI_N25Q256_CLOCK_init+0x1c>)
     fa4:	4b05      	ldr	r3, [pc, #20]	; (fbc <QSPI_N25Q256_CLOCK_init+0x24>)
     fa6:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
     fa8:	4802      	ldr	r0, [pc, #8]	; (fb4 <QSPI_N25Q256_CLOCK_init+0x1c>)
     faa:	4b05      	ldr	r3, [pc, #20]	; (fc0 <QSPI_N25Q256_CLOCK_init+0x28>)
     fac:	4798      	blx	r3
}
     fae:	bf00      	nop
     fb0:	bd80      	pop	{r7, pc}
     fb2:	bf00      	nop
     fb4:	40000800 	.word	0x40000800
     fb8:	0000044b 	.word	0x0000044b
     fbc:	0000048b 	.word	0x0000048b
     fc0:	0000064b 	.word	0x0000064b

00000fc4 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
     fc4:	b580      	push	{r7, lr}
     fc6:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
     fc8:	4b04      	ldr	r3, [pc, #16]	; (fdc <QSPI_N25Q256_init+0x18>)
     fca:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
     fcc:	4904      	ldr	r1, [pc, #16]	; (fe0 <QSPI_N25Q256_init+0x1c>)
     fce:	4805      	ldr	r0, [pc, #20]	; (fe4 <QSPI_N25Q256_init+0x20>)
     fd0:	4b05      	ldr	r3, [pc, #20]	; (fe8 <QSPI_N25Q256_init+0x24>)
     fd2:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
     fd4:	4b05      	ldr	r3, [pc, #20]	; (fec <QSPI_N25Q256_init+0x28>)
     fd6:	4798      	blx	r3
}
     fd8:	bf00      	nop
     fda:	bd80      	pop	{r7, pc}
     fdc:	00000f99 	.word	0x00000f99
     fe0:	42003400 	.word	0x42003400
     fe4:	20001b20 	.word	0x20001b20
     fe8:	00001f91 	.word	0x00001f91
     fec:	00000eb9 	.word	0x00000eb9

00000ff0 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
     ff0:	b580      	push	{r7, lr}
     ff2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
     ff4:	4802      	ldr	r0, [pc, #8]	; (1000 <DATETIME_CLOCK_CLOCK_init+0x10>)
     ff6:	4b03      	ldr	r3, [pc, #12]	; (1004 <DATETIME_CLOCK_CLOCK_init+0x14>)
     ff8:	4798      	blx	r3
}
     ffa:	bf00      	nop
     ffc:	bd80      	pop	{r7, pc}
     ffe:	bf00      	nop
    1000:	40000800 	.word	0x40000800
    1004:	000004cb 	.word	0x000004cb

00001008 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    1008:	b580      	push	{r7, lr}
    100a:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    100c:	4b03      	ldr	r3, [pc, #12]	; (101c <DATETIME_CLOCK_init+0x14>)
    100e:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    1010:	4903      	ldr	r1, [pc, #12]	; (1020 <DATETIME_CLOCK_init+0x18>)
    1012:	4804      	ldr	r0, [pc, #16]	; (1024 <DATETIME_CLOCK_init+0x1c>)
    1014:	4b04      	ldr	r3, [pc, #16]	; (1028 <DATETIME_CLOCK_init+0x20>)
    1016:	4798      	blx	r3
}
    1018:	bf00      	nop
    101a:	bd80      	pop	{r7, pc}
    101c:	00000ff1 	.word	0x00000ff1
    1020:	40002400 	.word	0x40002400
    1024:	20001c48 	.word	0x20001c48
    1028:	00001955 	.word	0x00001955

0000102c <I2C_HEATERS_PORT_init>:

void I2C_HEATERS_PORT_init(void)
{
    102c:	b580      	push	{r7, lr}
    102e:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA16,
    1030:	2101      	movs	r1, #1
    1032:	2010      	movs	r0, #16
    1034:	4b07      	ldr	r3, [pc, #28]	; (1054 <I2C_HEATERS_PORT_init+0x28>)
    1036:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    1038:	4907      	ldr	r1, [pc, #28]	; (1058 <I2C_HEATERS_PORT_init+0x2c>)
    103a:	2010      	movs	r0, #16
    103c:	4b07      	ldr	r3, [pc, #28]	; (105c <I2C_HEATERS_PORT_init+0x30>)
    103e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA17,
    1040:	2101      	movs	r1, #1
    1042:	2011      	movs	r0, #17
    1044:	4b03      	ldr	r3, [pc, #12]	; (1054 <I2C_HEATERS_PORT_init+0x28>)
    1046:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    1048:	4905      	ldr	r1, [pc, #20]	; (1060 <I2C_HEATERS_PORT_init+0x34>)
    104a:	2011      	movs	r0, #17
    104c:	4b03      	ldr	r3, [pc, #12]	; (105c <I2C_HEATERS_PORT_init+0x30>)
    104e:	4798      	blx	r3
}
    1050:	bf00      	nop
    1052:	bd80      	pop	{r7, pc}
    1054:	00000c05 	.word	0x00000c05
    1058:	00100002 	.word	0x00100002
    105c:	00000c39 	.word	0x00000c39
    1060:	00110002 	.word	0x00110002

00001064 <I2C_HEATERS_CLOCK_init>:

void I2C_HEATERS_CLOCK_init(void)
{
    1064:	b580      	push	{r7, lr}
    1066:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1068:	2242      	movs	r2, #66	; 0x42
    106a:	2108      	movs	r1, #8
    106c:	4806      	ldr	r0, [pc, #24]	; (1088 <I2C_HEATERS_CLOCK_init+0x24>)
    106e:	4b07      	ldr	r3, [pc, #28]	; (108c <I2C_HEATERS_CLOCK_init+0x28>)
    1070:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1072:	224a      	movs	r2, #74	; 0x4a
    1074:	2103      	movs	r1, #3
    1076:	4804      	ldr	r0, [pc, #16]	; (1088 <I2C_HEATERS_CLOCK_init+0x24>)
    1078:	4b04      	ldr	r3, [pc, #16]	; (108c <I2C_HEATERS_CLOCK_init+0x28>)
    107a:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
    107c:	4804      	ldr	r0, [pc, #16]	; (1090 <I2C_HEATERS_CLOCK_init+0x2c>)
    107e:	4b05      	ldr	r3, [pc, #20]	; (1094 <I2C_HEATERS_CLOCK_init+0x30>)
    1080:	4798      	blx	r3
}
    1082:	bf00      	nop
    1084:	bd80      	pop	{r7, pc}
    1086:	bf00      	nop
    1088:	40001c00 	.word	0x40001c00
    108c:	00000405 	.word	0x00000405
    1090:	40000800 	.word	0x40000800
    1094:	0000050b 	.word	0x0000050b

00001098 <I2C_HEATERS_init>:

void I2C_HEATERS_init(void)
{
    1098:	b580      	push	{r7, lr}
    109a:	af00      	add	r7, sp, #0
	I2C_HEATERS_CLOCK_init();
    109c:	4b04      	ldr	r3, [pc, #16]	; (10b0 <I2C_HEATERS_init+0x18>)
    109e:	4798      	blx	r3
	i2c_m_sync_init(&I2C_HEATERS, SERCOM1);
    10a0:	4904      	ldr	r1, [pc, #16]	; (10b4 <I2C_HEATERS_init+0x1c>)
    10a2:	4805      	ldr	r0, [pc, #20]	; (10b8 <I2C_HEATERS_init+0x20>)
    10a4:	4b05      	ldr	r3, [pc, #20]	; (10bc <I2C_HEATERS_init+0x24>)
    10a6:	4798      	blx	r3
	I2C_HEATERS_PORT_init();
    10a8:	4b05      	ldr	r3, [pc, #20]	; (10c0 <I2C_HEATERS_init+0x28>)
    10aa:	4798      	blx	r3
}
    10ac:	bf00      	nop
    10ae:	bd80      	pop	{r7, pc}
    10b0:	00001065 	.word	0x00001065
    10b4:	40003400 	.word	0x40003400
    10b8:	20001ba0 	.word	0x20001ba0
    10bc:	00001e85 	.word	0x00001e85
    10c0:	0000102d 	.word	0x0000102d

000010c4 <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    10c4:	b580      	push	{r7, lr}
    10c6:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    10c8:	2100      	movs	r1, #0
    10ca:	203b      	movs	r0, #59	; 0x3b
    10cc:	4b11      	ldr	r3, [pc, #68]	; (1114 <SPI_TEMP_PORT_init+0x50>)
    10ce:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    10d0:	2102      	movs	r1, #2
    10d2:	203b      	movs	r0, #59	; 0x3b
    10d4:	4b10      	ldr	r3, [pc, #64]	; (1118 <SPI_TEMP_PORT_init+0x54>)
    10d6:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    10d8:	4910      	ldr	r1, [pc, #64]	; (111c <SPI_TEMP_PORT_init+0x58>)
    10da:	203b      	movs	r0, #59	; 0x3b
    10dc:	4b10      	ldr	r3, [pc, #64]	; (1120 <SPI_TEMP_PORT_init+0x5c>)
    10de:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    10e0:	2100      	movs	r1, #0
    10e2:	203a      	movs	r0, #58	; 0x3a
    10e4:	4b0b      	ldr	r3, [pc, #44]	; (1114 <SPI_TEMP_PORT_init+0x50>)
    10e6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    10e8:	2102      	movs	r1, #2
    10ea:	203a      	movs	r0, #58	; 0x3a
    10ec:	4b0a      	ldr	r3, [pc, #40]	; (1118 <SPI_TEMP_PORT_init+0x54>)
    10ee:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    10f0:	490c      	ldr	r1, [pc, #48]	; (1124 <SPI_TEMP_PORT_init+0x60>)
    10f2:	203a      	movs	r0, #58	; 0x3a
    10f4:	4b0a      	ldr	r3, [pc, #40]	; (1120 <SPI_TEMP_PORT_init+0x5c>)
    10f6:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    10f8:	2101      	movs	r1, #1
    10fa:	203c      	movs	r0, #60	; 0x3c
    10fc:	4b06      	ldr	r3, [pc, #24]	; (1118 <SPI_TEMP_PORT_init+0x54>)
    10fe:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    1100:	2100      	movs	r1, #0
    1102:	203c      	movs	r0, #60	; 0x3c
    1104:	4b08      	ldr	r3, [pc, #32]	; (1128 <SPI_TEMP_PORT_init+0x64>)
    1106:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    1108:	4908      	ldr	r1, [pc, #32]	; (112c <SPI_TEMP_PORT_init+0x68>)
    110a:	203c      	movs	r0, #60	; 0x3c
    110c:	4b04      	ldr	r3, [pc, #16]	; (1120 <SPI_TEMP_PORT_init+0x5c>)
    110e:	4798      	blx	r3
}
    1110:	bf00      	nop
    1112:	bd80      	pop	{r7, pc}
    1114:	00000c91 	.word	0x00000c91
    1118:	00000c59 	.word	0x00000c59
    111c:	003b0003 	.word	0x003b0003
    1120:	00000c39 	.word	0x00000c39
    1124:	003a0003 	.word	0x003a0003
    1128:	00000c05 	.word	0x00000c05
    112c:	003c0003 	.word	0x003c0003

00001130 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    1130:	b580      	push	{r7, lr}
    1132:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1134:	2245      	movs	r2, #69	; 0x45
    1136:	2122      	movs	r1, #34	; 0x22
    1138:	4806      	ldr	r0, [pc, #24]	; (1154 <SPI_TEMP_CLOCK_init+0x24>)
    113a:	4b07      	ldr	r3, [pc, #28]	; (1158 <SPI_TEMP_CLOCK_init+0x28>)
    113c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    113e:	224a      	movs	r2, #74	; 0x4a
    1140:	2103      	movs	r1, #3
    1142:	4804      	ldr	r0, [pc, #16]	; (1154 <SPI_TEMP_CLOCK_init+0x24>)
    1144:	4b04      	ldr	r3, [pc, #16]	; (1158 <SPI_TEMP_CLOCK_init+0x28>)
    1146:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    1148:	4804      	ldr	r0, [pc, #16]	; (115c <SPI_TEMP_CLOCK_init+0x2c>)
    114a:	4b05      	ldr	r3, [pc, #20]	; (1160 <SPI_TEMP_CLOCK_init+0x30>)
    114c:	4798      	blx	r3
}
    114e:	bf00      	nop
    1150:	bd80      	pop	{r7, pc}
    1152:	bf00      	nop
    1154:	40001c00 	.word	0x40001c00
    1158:	00000405 	.word	0x00000405
    115c:	40000800 	.word	0x40000800
    1160:	0000066b 	.word	0x0000066b

00001164 <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    1164:	b580      	push	{r7, lr}
    1166:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    1168:	4b05      	ldr	r3, [pc, #20]	; (1180 <SPI_TEMP_init+0x1c>)
    116a:	4798      	blx	r3
	spi_m_sync_init(&SPI_TEMP, SERCOM4);
    116c:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    1170:	4804      	ldr	r0, [pc, #16]	; (1184 <SPI_TEMP_init+0x20>)
    1172:	4b05      	ldr	r3, [pc, #20]	; (1188 <SPI_TEMP_init+0x24>)
    1174:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    1176:	4b05      	ldr	r3, [pc, #20]	; (118c <SPI_TEMP_init+0x28>)
    1178:	4798      	blx	r3
}
    117a:	bf00      	nop
    117c:	bd80      	pop	{r7, pc}
    117e:	bf00      	nop
    1180:	00001131 	.word	0x00001131
    1184:	20001ac8 	.word	0x20001ac8
    1188:	000020a1 	.word	0x000020a1
    118c:	000010c5 	.word	0x000010c5

00001190 <I2C_FLAPPER_VALVE_PORT_init>:

void I2C_FLAPPER_VALVE_PORT_init(void)
{
    1190:	b580      	push	{r7, lr}
    1192:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    1194:	2100      	movs	r1, #0
    1196:	2017      	movs	r0, #23
    1198:	4b07      	ldr	r3, [pc, #28]	; (11b8 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    119a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    119c:	4907      	ldr	r1, [pc, #28]	; (11bc <I2C_FLAPPER_VALVE_PORT_init+0x2c>)
    119e:	2017      	movs	r0, #23
    11a0:	4b07      	ldr	r3, [pc, #28]	; (11c0 <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    11a2:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    11a4:	2100      	movs	r1, #0
    11a6:	2016      	movs	r0, #22
    11a8:	4b03      	ldr	r3, [pc, #12]	; (11b8 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    11aa:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    11ac:	4905      	ldr	r1, [pc, #20]	; (11c4 <I2C_FLAPPER_VALVE_PORT_init+0x34>)
    11ae:	2016      	movs	r0, #22
    11b0:	4b03      	ldr	r3, [pc, #12]	; (11c0 <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    11b2:	4798      	blx	r3
}
    11b4:	bf00      	nop
    11b6:	bd80      	pop	{r7, pc}
    11b8:	00000c05 	.word	0x00000c05
    11bc:	00170003 	.word	0x00170003
    11c0:	00000c39 	.word	0x00000c39
    11c4:	00160003 	.word	0x00160003

000011c8 <I2C_FLAPPER_VALVE_CLOCK_init>:

void I2C_FLAPPER_VALVE_CLOCK_init(void)
{
    11c8:	b580      	push	{r7, lr}
    11ca:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    11cc:	2244      	movs	r2, #68	; 0x44
    11ce:	2123      	movs	r1, #35	; 0x23
    11d0:	4806      	ldr	r0, [pc, #24]	; (11ec <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    11d2:	4b07      	ldr	r3, [pc, #28]	; (11f0 <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    11d4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    11d6:	224a      	movs	r2, #74	; 0x4a
    11d8:	2103      	movs	r1, #3
    11da:	4804      	ldr	r0, [pc, #16]	; (11ec <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    11dc:	4b04      	ldr	r3, [pc, #16]	; (11f0 <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    11de:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    11e0:	4804      	ldr	r0, [pc, #16]	; (11f4 <I2C_FLAPPER_VALVE_CLOCK_init+0x2c>)
    11e2:	4b05      	ldr	r3, [pc, #20]	; (11f8 <I2C_FLAPPER_VALVE_CLOCK_init+0x30>)
    11e4:	4798      	blx	r3
}
    11e6:	bf00      	nop
    11e8:	bd80      	pop	{r7, pc}
    11ea:	bf00      	nop
    11ec:	40001c00 	.word	0x40001c00
    11f0:	00000405 	.word	0x00000405
    11f4:	40000800 	.word	0x40000800
    11f8:	0000068b 	.word	0x0000068b

000011fc <I2C_FLAPPER_VALVE_init>:

void I2C_FLAPPER_VALVE_init(void)
{
    11fc:	b580      	push	{r7, lr}
    11fe:	af00      	add	r7, sp, #0
	I2C_FLAPPER_VALVE_CLOCK_init();
    1200:	4b04      	ldr	r3, [pc, #16]	; (1214 <I2C_FLAPPER_VALVE_init+0x18>)
    1202:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FLAPPER_VALVE, SERCOM5);
    1204:	4904      	ldr	r1, [pc, #16]	; (1218 <I2C_FLAPPER_VALVE_init+0x1c>)
    1206:	4805      	ldr	r0, [pc, #20]	; (121c <I2C_FLAPPER_VALVE_init+0x20>)
    1208:	4b05      	ldr	r3, [pc, #20]	; (1220 <I2C_FLAPPER_VALVE_init+0x24>)
    120a:	4798      	blx	r3
	I2C_FLAPPER_VALVE_PORT_init();
    120c:	4b05      	ldr	r3, [pc, #20]	; (1224 <I2C_FLAPPER_VALVE_init+0x28>)
    120e:	4798      	blx	r3
}
    1210:	bf00      	nop
    1212:	bd80      	pop	{r7, pc}
    1214:	000011c9 	.word	0x000011c9
    1218:	43000400 	.word	0x43000400
    121c:	20001b64 	.word	0x20001b64
    1220:	00001e85 	.word	0x00001e85
    1224:	00001191 	.word	0x00001191

00001228 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    1228:	b580      	push	{r7, lr}
    122a:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    122c:	2100      	movs	r1, #0
    122e:	2044      	movs	r0, #68	; 0x44
    1230:	4b11      	ldr	r3, [pc, #68]	; (1278 <SPI_HI3593_PORT_init+0x50>)
    1232:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    1234:	2102      	movs	r1, #2
    1236:	2044      	movs	r0, #68	; 0x44
    1238:	4b10      	ldr	r3, [pc, #64]	; (127c <SPI_HI3593_PORT_init+0x54>)
    123a:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    123c:	4910      	ldr	r1, [pc, #64]	; (1280 <SPI_HI3593_PORT_init+0x58>)
    123e:	2044      	movs	r0, #68	; 0x44
    1240:	4b10      	ldr	r3, [pc, #64]	; (1284 <SPI_HI3593_PORT_init+0x5c>)
    1242:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    1244:	2100      	movs	r1, #0
    1246:	2045      	movs	r0, #69	; 0x45
    1248:	4b0b      	ldr	r3, [pc, #44]	; (1278 <SPI_HI3593_PORT_init+0x50>)
    124a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    124c:	2102      	movs	r1, #2
    124e:	2045      	movs	r0, #69	; 0x45
    1250:	4b0a      	ldr	r3, [pc, #40]	; (127c <SPI_HI3593_PORT_init+0x54>)
    1252:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    1254:	490c      	ldr	r1, [pc, #48]	; (1288 <SPI_HI3593_PORT_init+0x60>)
    1256:	2045      	movs	r0, #69	; 0x45
    1258:	4b0a      	ldr	r3, [pc, #40]	; (1284 <SPI_HI3593_PORT_init+0x5c>)
    125a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    125c:	2101      	movs	r1, #1
    125e:	2047      	movs	r0, #71	; 0x47
    1260:	4b06      	ldr	r3, [pc, #24]	; (127c <SPI_HI3593_PORT_init+0x54>)
    1262:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    1264:	2100      	movs	r1, #0
    1266:	2047      	movs	r0, #71	; 0x47
    1268:	4b08      	ldr	r3, [pc, #32]	; (128c <SPI_HI3593_PORT_init+0x64>)
    126a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    126c:	4908      	ldr	r1, [pc, #32]	; (1290 <SPI_HI3593_PORT_init+0x68>)
    126e:	2047      	movs	r0, #71	; 0x47
    1270:	4b04      	ldr	r3, [pc, #16]	; (1284 <SPI_HI3593_PORT_init+0x5c>)
    1272:	4798      	blx	r3
}
    1274:	bf00      	nop
    1276:	bd80      	pop	{r7, pc}
    1278:	00000c91 	.word	0x00000c91
    127c:	00000c59 	.word	0x00000c59
    1280:	00440002 	.word	0x00440002
    1284:	00000c39 	.word	0x00000c39
    1288:	00450002 	.word	0x00450002
    128c:	00000c05 	.word	0x00000c05
    1290:	00470002 	.word	0x00470002

00001294 <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    1294:	b580      	push	{r7, lr}
    1296:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1298:	2242      	movs	r2, #66	; 0x42
    129a:	2124      	movs	r1, #36	; 0x24
    129c:	4806      	ldr	r0, [pc, #24]	; (12b8 <SPI_HI3593_CLOCK_init+0x24>)
    129e:	4b07      	ldr	r3, [pc, #28]	; (12bc <SPI_HI3593_CLOCK_init+0x28>)
    12a0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    12a2:	224a      	movs	r2, #74	; 0x4a
    12a4:	2103      	movs	r1, #3
    12a6:	4804      	ldr	r0, [pc, #16]	; (12b8 <SPI_HI3593_CLOCK_init+0x24>)
    12a8:	4b04      	ldr	r3, [pc, #16]	; (12bc <SPI_HI3593_CLOCK_init+0x28>)
    12aa:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    12ac:	4804      	ldr	r0, [pc, #16]	; (12c0 <SPI_HI3593_CLOCK_init+0x2c>)
    12ae:	4b05      	ldr	r3, [pc, #20]	; (12c4 <SPI_HI3593_CLOCK_init+0x30>)
    12b0:	4798      	blx	r3
}
    12b2:	bf00      	nop
    12b4:	bd80      	pop	{r7, pc}
    12b6:	bf00      	nop
    12b8:	40001c00 	.word	0x40001c00
    12bc:	00000405 	.word	0x00000405
    12c0:	40000800 	.word	0x40000800
    12c4:	000006ab 	.word	0x000006ab

000012c8 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    12c8:	b580      	push	{r7, lr}
    12ca:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    12cc:	4b04      	ldr	r3, [pc, #16]	; (12e0 <SPI_HI3593_init+0x18>)
    12ce:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    12d0:	4904      	ldr	r1, [pc, #16]	; (12e4 <SPI_HI3593_init+0x1c>)
    12d2:	4805      	ldr	r0, [pc, #20]	; (12e8 <SPI_HI3593_init+0x20>)
    12d4:	4b05      	ldr	r3, [pc, #20]	; (12ec <SPI_HI3593_init+0x24>)
    12d6:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    12d8:	4b05      	ldr	r3, [pc, #20]	; (12f0 <SPI_HI3593_init+0x28>)
    12da:	4798      	blx	r3
}
    12dc:	bf00      	nop
    12de:	bd80      	pop	{r7, pc}
    12e0:	00001295 	.word	0x00001295
    12e4:	43000800 	.word	0x43000800
    12e8:	20001ab0 	.word	0x20001ab0
    12ec:	000020a1 	.word	0x000020a1
    12f0:	00001229 	.word	0x00001229

000012f4 <I2C_FANS_PORT_init>:

void I2C_FANS_PORT_init(void)
{
    12f4:	b580      	push	{r7, lr}
    12f6:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    12f8:	2100      	movs	r1, #0
    12fa:	2068      	movs	r0, #104	; 0x68
    12fc:	4b07      	ldr	r3, [pc, #28]	; (131c <I2C_FANS_PORT_init+0x28>)
    12fe:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    1300:	4907      	ldr	r1, [pc, #28]	; (1320 <I2C_FANS_PORT_init+0x2c>)
    1302:	2068      	movs	r0, #104	; 0x68
    1304:	4b07      	ldr	r3, [pc, #28]	; (1324 <I2C_FANS_PORT_init+0x30>)
    1306:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    1308:	2100      	movs	r1, #0
    130a:	2069      	movs	r0, #105	; 0x69
    130c:	4b03      	ldr	r3, [pc, #12]	; (131c <I2C_FANS_PORT_init+0x28>)
    130e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    1310:	4905      	ldr	r1, [pc, #20]	; (1328 <I2C_FANS_PORT_init+0x34>)
    1312:	2069      	movs	r0, #105	; 0x69
    1314:	4b03      	ldr	r3, [pc, #12]	; (1324 <I2C_FANS_PORT_init+0x30>)
    1316:	4798      	blx	r3
}
    1318:	bf00      	nop
    131a:	bd80      	pop	{r7, pc}
    131c:	00000c05 	.word	0x00000c05
    1320:	00680002 	.word	0x00680002
    1324:	00000c39 	.word	0x00000c39
    1328:	00690002 	.word	0x00690002

0000132c <I2C_FANS_CLOCK_init>:

void I2C_FANS_CLOCK_init(void)
{
    132c:	b580      	push	{r7, lr}
    132e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1330:	2244      	movs	r2, #68	; 0x44
    1332:	2125      	movs	r1, #37	; 0x25
    1334:	4806      	ldr	r0, [pc, #24]	; (1350 <I2C_FANS_CLOCK_init+0x24>)
    1336:	4b07      	ldr	r3, [pc, #28]	; (1354 <I2C_FANS_CLOCK_init+0x28>)
    1338:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    133a:	224a      	movs	r2, #74	; 0x4a
    133c:	2103      	movs	r1, #3
    133e:	4804      	ldr	r0, [pc, #16]	; (1350 <I2C_FANS_CLOCK_init+0x24>)
    1340:	4b04      	ldr	r3, [pc, #16]	; (1354 <I2C_FANS_CLOCK_init+0x28>)
    1342:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    1344:	4804      	ldr	r0, [pc, #16]	; (1358 <I2C_FANS_CLOCK_init+0x2c>)
    1346:	4b05      	ldr	r3, [pc, #20]	; (135c <I2C_FANS_CLOCK_init+0x30>)
    1348:	4798      	blx	r3
}
    134a:	bf00      	nop
    134c:	bd80      	pop	{r7, pc}
    134e:	bf00      	nop
    1350:	40001c00 	.word	0x40001c00
    1354:	00000405 	.word	0x00000405
    1358:	40000800 	.word	0x40000800
    135c:	000006cb 	.word	0x000006cb

00001360 <I2C_FANS_init>:

void I2C_FANS_init(void)
{
    1360:	b580      	push	{r7, lr}
    1362:	af00      	add	r7, sp, #0
	I2C_FANS_CLOCK_init();
    1364:	4b04      	ldr	r3, [pc, #16]	; (1378 <I2C_FANS_init+0x18>)
    1366:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FANS, SERCOM7);
    1368:	4904      	ldr	r1, [pc, #16]	; (137c <I2C_FANS_init+0x1c>)
    136a:	4805      	ldr	r0, [pc, #20]	; (1380 <I2C_FANS_init+0x20>)
    136c:	4b05      	ldr	r3, [pc, #20]	; (1384 <I2C_FANS_init+0x24>)
    136e:	4798      	blx	r3
	I2C_FANS_PORT_init();
    1370:	4b05      	ldr	r3, [pc, #20]	; (1388 <I2C_FANS_init+0x28>)
    1372:	4798      	blx	r3
}
    1374:	bf00      	nop
    1376:	bd80      	pop	{r7, pc}
    1378:	0000132d 	.word	0x0000132d
    137c:	43000c00 	.word	0x43000c00
    1380:	20001ae0 	.word	0x20001ae0
    1384:	00001e85 	.word	0x00001e85
    1388:	000012f5 	.word	0x000012f5

0000138c <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    138c:	b580      	push	{r7, lr}
    138e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    1390:	4808      	ldr	r0, [pc, #32]	; (13b4 <TIMER_USB_init+0x28>)
    1392:	4b09      	ldr	r3, [pc, #36]	; (13b8 <TIMER_USB_init+0x2c>)
    1394:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1396:	2243      	movs	r2, #67	; 0x43
    1398:	2109      	movs	r1, #9
    139a:	4808      	ldr	r0, [pc, #32]	; (13bc <TIMER_USB_init+0x30>)
    139c:	4b08      	ldr	r3, [pc, #32]	; (13c0 <TIMER_USB_init+0x34>)
    139e:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    13a0:	4b08      	ldr	r3, [pc, #32]	; (13c4 <TIMER_USB_init+0x38>)
    13a2:	4798      	blx	r3
    13a4:	4603      	mov	r3, r0
    13a6:	461a      	mov	r2, r3
    13a8:	4907      	ldr	r1, [pc, #28]	; (13c8 <TIMER_USB_init+0x3c>)
    13aa:	4808      	ldr	r0, [pc, #32]	; (13cc <TIMER_USB_init+0x40>)
    13ac:	4b08      	ldr	r3, [pc, #32]	; (13d0 <TIMER_USB_init+0x44>)
    13ae:	4798      	blx	r3
}
    13b0:	bf00      	nop
    13b2:	bd80      	pop	{r7, pc}
    13b4:	40000800 	.word	0x40000800
    13b8:	0000052b 	.word	0x0000052b
    13bc:	40001c00 	.word	0x40001c00
    13c0:	00000405 	.word	0x00000405
    13c4:	00007a79 	.word	0x00007a79
    13c8:	40003800 	.word	0x40003800
    13cc:	20001c08 	.word	0x20001c08
    13d0:	00002271 	.word	0x00002271

000013d4 <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    13d4:	b580      	push	{r7, lr}
    13d6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    13d8:	4808      	ldr	r0, [pc, #32]	; (13fc <TIMER_ARINC_init+0x28>)
    13da:	4b09      	ldr	r3, [pc, #36]	; (1400 <TIMER_ARINC_init+0x2c>)
    13dc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    13de:	2244      	movs	r2, #68	; 0x44
    13e0:	211a      	movs	r1, #26
    13e2:	4808      	ldr	r0, [pc, #32]	; (1404 <TIMER_ARINC_init+0x30>)
    13e4:	4b08      	ldr	r3, [pc, #32]	; (1408 <TIMER_ARINC_init+0x34>)
    13e6:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    13e8:	4b08      	ldr	r3, [pc, #32]	; (140c <TIMER_ARINC_init+0x38>)
    13ea:	4798      	blx	r3
    13ec:	4603      	mov	r3, r0
    13ee:	461a      	mov	r2, r3
    13f0:	4907      	ldr	r1, [pc, #28]	; (1410 <TIMER_ARINC_init+0x3c>)
    13f2:	4808      	ldr	r0, [pc, #32]	; (1414 <TIMER_ARINC_init+0x40>)
    13f4:	4b08      	ldr	r3, [pc, #32]	; (1418 <TIMER_ARINC_init+0x44>)
    13f6:	4798      	blx	r3
}
    13f8:	bf00      	nop
    13fa:	bd80      	pop	{r7, pc}
    13fc:	40000800 	.word	0x40000800
    1400:	000005eb 	.word	0x000005eb
    1404:	40001c00 	.word	0x40001c00
    1408:	00000405 	.word	0x00000405
    140c:	00007a79 	.word	0x00007a79
    1410:	4101a000 	.word	0x4101a000
    1414:	20001be8 	.word	0x20001be8
    1418:	00002271 	.word	0x00002271

0000141c <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    141c:	b580      	push	{r7, lr}
    141e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    1420:	4808      	ldr	r0, [pc, #32]	; (1444 <TIMER_MAINTENANCE_init+0x28>)
    1422:	4b09      	ldr	r3, [pc, #36]	; (1448 <TIMER_MAINTENANCE_init+0x2c>)
    1424:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1426:	2246      	movs	r2, #70	; 0x46
    1428:	211e      	movs	r1, #30
    142a:	4808      	ldr	r0, [pc, #32]	; (144c <TIMER_MAINTENANCE_init+0x30>)
    142c:	4b08      	ldr	r3, [pc, #32]	; (1450 <TIMER_MAINTENANCE_init+0x34>)
    142e:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    1430:	4b08      	ldr	r3, [pc, #32]	; (1454 <TIMER_MAINTENANCE_init+0x38>)
    1432:	4798      	blx	r3
    1434:	4603      	mov	r3, r0
    1436:	461a      	mov	r2, r3
    1438:	4907      	ldr	r1, [pc, #28]	; (1458 <TIMER_MAINTENANCE_init+0x3c>)
    143a:	4808      	ldr	r0, [pc, #32]	; (145c <TIMER_MAINTENANCE_init+0x40>)
    143c:	4b08      	ldr	r3, [pc, #32]	; (1460 <TIMER_MAINTENANCE_init+0x44>)
    143e:	4798      	blx	r3
}
    1440:	bf00      	nop
    1442:	bd80      	pop	{r7, pc}
    1444:	40000800 	.word	0x40000800
    1448:	0000060b 	.word	0x0000060b
    144c:	40001c00 	.word	0x40001c00
    1450:	00000405 	.word	0x00000405
    1454:	00007a79 	.word	0x00007a79
    1458:	42001400 	.word	0x42001400
    145c:	20001b00 	.word	0x20001b00
    1460:	00002271 	.word	0x00002271

00001464 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    1464:	b580      	push	{r7, lr}
    1466:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    1468:	4808      	ldr	r0, [pc, #32]	; (148c <TIMER_INTERFACE_init+0x28>)
    146a:	4b09      	ldr	r3, [pc, #36]	; (1490 <TIMER_INTERFACE_init+0x2c>)
    146c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    146e:	2246      	movs	r2, #70	; 0x46
    1470:	211e      	movs	r1, #30
    1472:	4808      	ldr	r0, [pc, #32]	; (1494 <TIMER_INTERFACE_init+0x30>)
    1474:	4b08      	ldr	r3, [pc, #32]	; (1498 <TIMER_INTERFACE_init+0x34>)
    1476:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    1478:	4b08      	ldr	r3, [pc, #32]	; (149c <TIMER_INTERFACE_init+0x38>)
    147a:	4798      	blx	r3
    147c:	4603      	mov	r3, r0
    147e:	461a      	mov	r2, r3
    1480:	4907      	ldr	r1, [pc, #28]	; (14a0 <TIMER_INTERFACE_init+0x3c>)
    1482:	4808      	ldr	r0, [pc, #32]	; (14a4 <TIMER_INTERFACE_init+0x40>)
    1484:	4b08      	ldr	r3, [pc, #32]	; (14a8 <TIMER_INTERFACE_init+0x44>)
    1486:	4798      	blx	r3
}
    1488:	bf00      	nop
    148a:	bd80      	pop	{r7, pc}
    148c:	40000800 	.word	0x40000800
    1490:	0000062b 	.word	0x0000062b
    1494:	40001c00 	.word	0x40001c00
    1498:	00000405 	.word	0x00000405
    149c:	00007a79 	.word	0x00007a79
    14a0:	42001800 	.word	0x42001800
    14a4:	20001b44 	.word	0x20001b44
    14a8:	00002271 	.word	0x00002271

000014ac <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    14ac:	b580      	push	{r7, lr}
    14ae:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_TC6_bit(MCLK);
    14b0:	4808      	ldr	r0, [pc, #32]	; (14d4 <TIMER_EVENT_init+0x28>)
    14b2:	4b09      	ldr	r3, [pc, #36]	; (14d8 <TIMER_EVENT_init+0x2c>)
    14b4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC6_GCLK_ID, CONF_GCLK_TC6_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    14b6:	2246      	movs	r2, #70	; 0x46
    14b8:	2127      	movs	r1, #39	; 0x27
    14ba:	4808      	ldr	r0, [pc, #32]	; (14dc <TIMER_EVENT_init+0x30>)
    14bc:	4b08      	ldr	r3, [pc, #32]	; (14e0 <TIMER_EVENT_init+0x34>)
    14be:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC6, _tc_get_timer());
    14c0:	4b08      	ldr	r3, [pc, #32]	; (14e4 <TIMER_EVENT_init+0x38>)
    14c2:	4798      	blx	r3
    14c4:	4603      	mov	r3, r0
    14c6:	461a      	mov	r2, r3
    14c8:	4907      	ldr	r1, [pc, #28]	; (14e8 <TIMER_EVENT_init+0x3c>)
    14ca:	4808      	ldr	r0, [pc, #32]	; (14ec <TIMER_EVENT_init+0x40>)
    14cc:	4b08      	ldr	r3, [pc, #32]	; (14f0 <TIMER_EVENT_init+0x44>)
    14ce:	4798      	blx	r3
}
    14d0:	bf00      	nop
    14d2:	bd80      	pop	{r7, pc}
    14d4:	40000800 	.word	0x40000800
    14d8:	000006eb 	.word	0x000006eb
    14dc:	40001c00 	.word	0x40001c00
    14e0:	00000405 	.word	0x00000405
    14e4:	00007a79 	.word	0x00007a79
    14e8:	43001400 	.word	0x43001400
    14ec:	20001b24 	.word	0x20001b24
    14f0:	00002271 	.word	0x00002271

000014f4 <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    14f4:	b480      	push	{r7}
    14f6:	af00      	add	r7, sp, #0
}
    14f8:	bf00      	nop
    14fa:	46bd      	mov	sp, r7
    14fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1500:	4770      	bx	lr
	...

00001504 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    1504:	b580      	push	{r7, lr}
    1506:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    1508:	4804      	ldr	r0, [pc, #16]	; (151c <LIVE_PULSE_CLOCK_init+0x18>)
    150a:	4b05      	ldr	r3, [pc, #20]	; (1520 <LIVE_PULSE_CLOCK_init+0x1c>)
    150c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    150e:	2240      	movs	r2, #64	; 0x40
    1510:	2127      	movs	r1, #39	; 0x27
    1512:	4804      	ldr	r0, [pc, #16]	; (1524 <LIVE_PULSE_CLOCK_init+0x20>)
    1514:	4b04      	ldr	r3, [pc, #16]	; (1528 <LIVE_PULSE_CLOCK_init+0x24>)
    1516:	4798      	blx	r3
}
    1518:	bf00      	nop
    151a:	bd80      	pop	{r7, pc}
    151c:	40000800 	.word	0x40000800
    1520:	0000070b 	.word	0x0000070b
    1524:	40001c00 	.word	0x40001c00
    1528:	00000405 	.word	0x00000405

0000152c <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    152c:	b580      	push	{r7, lr}
    152e:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    1530:	4b06      	ldr	r3, [pc, #24]	; (154c <LIVE_PULSE_init+0x20>)
    1532:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    1534:	4b06      	ldr	r3, [pc, #24]	; (1550 <LIVE_PULSE_init+0x24>)
    1536:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    1538:	4b06      	ldr	r3, [pc, #24]	; (1554 <LIVE_PULSE_init+0x28>)
    153a:	4798      	blx	r3
    153c:	4603      	mov	r3, r0
    153e:	461a      	mov	r2, r3
    1540:	4905      	ldr	r1, [pc, #20]	; (1558 <LIVE_PULSE_init+0x2c>)
    1542:	4806      	ldr	r0, [pc, #24]	; (155c <LIVE_PULSE_init+0x30>)
    1544:	4b06      	ldr	r3, [pc, #24]	; (1560 <LIVE_PULSE_init+0x34>)
    1546:	4798      	blx	r3
}
    1548:	bf00      	nop
    154a:	bd80      	pop	{r7, pc}
    154c:	00001505 	.word	0x00001505
    1550:	000014f5 	.word	0x000014f5
    1554:	00007a8d 	.word	0x00007a8d
    1558:	43001800 	.word	0x43001800
    155c:	20001b84 	.word	0x20001b84
    1560:	00001ee5 	.word	0x00001ee5

00001564 <TIMER_HVAC_CLOCK_init>:

void TIMER_HVAC_CLOCK_init(void)
{
    1564:	b580      	push	{r7, lr}
    1566:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
    1568:	4804      	ldr	r0, [pc, #16]	; (157c <TIMER_HVAC_CLOCK_init+0x18>)
    156a:	4b05      	ldr	r3, [pc, #20]	; (1580 <TIMER_HVAC_CLOCK_init+0x1c>)
    156c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    156e:	2244      	movs	r2, #68	; 0x44
    1570:	2119      	movs	r1, #25
    1572:	4804      	ldr	r0, [pc, #16]	; (1584 <TIMER_HVAC_CLOCK_init+0x20>)
    1574:	4b04      	ldr	r3, [pc, #16]	; (1588 <TIMER_HVAC_CLOCK_init+0x24>)
    1576:	4798      	blx	r3
}
    1578:	bf00      	nop
    157a:	bd80      	pop	{r7, pc}
    157c:	40000800 	.word	0x40000800
    1580:	000005ab 	.word	0x000005ab
    1584:	40001c00 	.word	0x40001c00
    1588:	00000405 	.word	0x00000405

0000158c <TIMER_HVAC_init>:

void TIMER_HVAC_init(void)
{
    158c:	b580      	push	{r7, lr}
    158e:	af00      	add	r7, sp, #0
	TIMER_HVAC_CLOCK_init();
    1590:	4b05      	ldr	r3, [pc, #20]	; (15a8 <TIMER_HVAC_init+0x1c>)
    1592:	4798      	blx	r3
	timer_init(&TIMER_HVAC, TCC0, _tcc_get_timer());
    1594:	4b05      	ldr	r3, [pc, #20]	; (15ac <TIMER_HVAC_init+0x20>)
    1596:	4798      	blx	r3
    1598:	4603      	mov	r3, r0
    159a:	461a      	mov	r2, r3
    159c:	4904      	ldr	r1, [pc, #16]	; (15b0 <TIMER_HVAC_init+0x24>)
    159e:	4805      	ldr	r0, [pc, #20]	; (15b4 <TIMER_HVAC_init+0x28>)
    15a0:	4b05      	ldr	r3, [pc, #20]	; (15b8 <TIMER_HVAC_init+0x2c>)
    15a2:	4798      	blx	r3
}
    15a4:	bf00      	nop
    15a6:	bd80      	pop	{r7, pc}
    15a8:	00001565 	.word	0x00001565
    15ac:	00006e79 	.word	0x00006e79
    15b0:	41016000 	.word	0x41016000
    15b4:	20001c28 	.word	0x20001c28
    15b8:	00002271 	.word	0x00002271

000015bc <TIMER_TEMPERATURES_CLOCK_init>:

void TIMER_TEMPERATURES_CLOCK_init(void)
{
    15bc:	b580      	push	{r7, lr}
    15be:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
    15c0:	4804      	ldr	r0, [pc, #16]	; (15d4 <TIMER_TEMPERATURES_CLOCK_init+0x18>)
    15c2:	4b05      	ldr	r3, [pc, #20]	; (15d8 <TIMER_TEMPERATURES_CLOCK_init+0x1c>)
    15c4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    15c6:	2244      	movs	r2, #68	; 0x44
    15c8:	2119      	movs	r1, #25
    15ca:	4804      	ldr	r0, [pc, #16]	; (15dc <TIMER_TEMPERATURES_CLOCK_init+0x20>)
    15cc:	4b04      	ldr	r3, [pc, #16]	; (15e0 <TIMER_TEMPERATURES_CLOCK_init+0x24>)
    15ce:	4798      	blx	r3
}
    15d0:	bf00      	nop
    15d2:	bd80      	pop	{r7, pc}
    15d4:	40000800 	.word	0x40000800
    15d8:	000005cb 	.word	0x000005cb
    15dc:	40001c00 	.word	0x40001c00
    15e0:	00000405 	.word	0x00000405

000015e4 <TIMER_TEMPERATURES_init>:

void TIMER_TEMPERATURES_init(void)
{
    15e4:	b580      	push	{r7, lr}
    15e6:	af00      	add	r7, sp, #0
	TIMER_TEMPERATURES_CLOCK_init();
    15e8:	4b05      	ldr	r3, [pc, #20]	; (1600 <TIMER_TEMPERATURES_init+0x1c>)
    15ea:	4798      	blx	r3
	timer_init(&TIMER_TEMPERATURES, TCC1, _tcc_get_timer());
    15ec:	4b05      	ldr	r3, [pc, #20]	; (1604 <TIMER_TEMPERATURES_init+0x20>)
    15ee:	4798      	blx	r3
    15f0:	4603      	mov	r3, r0
    15f2:	461a      	mov	r2, r3
    15f4:	4904      	ldr	r1, [pc, #16]	; (1608 <TIMER_TEMPERATURES_init+0x24>)
    15f6:	4805      	ldr	r0, [pc, #20]	; (160c <TIMER_TEMPERATURES_init+0x28>)
    15f8:	4b05      	ldr	r3, [pc, #20]	; (1610 <TIMER_TEMPERATURES_init+0x2c>)
    15fa:	4798      	blx	r3
}
    15fc:	bf00      	nop
    15fe:	bd80      	pop	{r7, pc}
    1600:	000015bd 	.word	0x000015bd
    1604:	00006e79 	.word	0x00006e79
    1608:	41018000 	.word	0x41018000
    160c:	20001a90 	.word	0x20001a90
    1610:	00002271 	.word	0x00002271

00001614 <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    1614:	b580      	push	{r7, lr}
    1616:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    1618:	2102      	movs	r1, #2
    161a:	2018      	movs	r0, #24
    161c:	4b0f      	ldr	r3, [pc, #60]	; (165c <CDCUSB_PORT_init+0x48>)
    161e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    1620:	2100      	movs	r1, #0
    1622:	2018      	movs	r0, #24
    1624:	4b0e      	ldr	r3, [pc, #56]	; (1660 <CDCUSB_PORT_init+0x4c>)
    1626:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    1628:	2100      	movs	r1, #0
    162a:	2018      	movs	r0, #24
    162c:	4b0d      	ldr	r3, [pc, #52]	; (1664 <CDCUSB_PORT_init+0x50>)
    162e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    1630:	490d      	ldr	r1, [pc, #52]	; (1668 <CDCUSB_PORT_init+0x54>)
    1632:	2018      	movs	r0, #24
    1634:	4b0d      	ldr	r3, [pc, #52]	; (166c <CDCUSB_PORT_init+0x58>)
    1636:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    1638:	2102      	movs	r1, #2
    163a:	2019      	movs	r0, #25
    163c:	4b07      	ldr	r3, [pc, #28]	; (165c <CDCUSB_PORT_init+0x48>)
    163e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    1640:	2100      	movs	r1, #0
    1642:	2019      	movs	r0, #25
    1644:	4b06      	ldr	r3, [pc, #24]	; (1660 <CDCUSB_PORT_init+0x4c>)
    1646:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    1648:	2100      	movs	r1, #0
    164a:	2019      	movs	r0, #25
    164c:	4b05      	ldr	r3, [pc, #20]	; (1664 <CDCUSB_PORT_init+0x50>)
    164e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    1650:	4907      	ldr	r1, [pc, #28]	; (1670 <CDCUSB_PORT_init+0x5c>)
    1652:	2019      	movs	r0, #25
    1654:	4b05      	ldr	r3, [pc, #20]	; (166c <CDCUSB_PORT_init+0x58>)
    1656:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    1658:	bf00      	nop
    165a:	bd80      	pop	{r7, pc}
    165c:	00000c59 	.word	0x00000c59
    1660:	00000c91 	.word	0x00000c91
    1664:	00000c05 	.word	0x00000c05
    1668:	00180007 	.word	0x00180007
    166c:	00000c39 	.word	0x00000c39
    1670:	00190007 	.word	0x00190007

00001674 <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    1674:	b580      	push	{r7, lr}
    1676:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    1678:	2242      	movs	r2, #66	; 0x42
    167a:	210a      	movs	r1, #10
    167c:	4805      	ldr	r0, [pc, #20]	; (1694 <CDCUSB_CLOCK_init+0x20>)
    167e:	4b06      	ldr	r3, [pc, #24]	; (1698 <CDCUSB_CLOCK_init+0x24>)
    1680:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    1682:	4806      	ldr	r0, [pc, #24]	; (169c <CDCUSB_CLOCK_init+0x28>)
    1684:	4b06      	ldr	r3, [pc, #24]	; (16a0 <CDCUSB_CLOCK_init+0x2c>)
    1686:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    1688:	4804      	ldr	r0, [pc, #16]	; (169c <CDCUSB_CLOCK_init+0x28>)
    168a:	4b06      	ldr	r3, [pc, #24]	; (16a4 <CDCUSB_CLOCK_init+0x30>)
    168c:	4798      	blx	r3
}
    168e:	bf00      	nop
    1690:	bd80      	pop	{r7, pc}
    1692:	bf00      	nop
    1694:	40001c00 	.word	0x40001c00
    1698:	00000405 	.word	0x00000405
    169c:	40000800 	.word	0x40000800
    16a0:	0000042b 	.word	0x0000042b
    16a4:	0000054b 	.word	0x0000054b

000016a8 <CDCUSB_init>:

void CDCUSB_init(void)
{
    16a8:	b580      	push	{r7, lr}
    16aa:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    16ac:	4b03      	ldr	r3, [pc, #12]	; (16bc <CDCUSB_init+0x14>)
    16ae:	4798      	blx	r3
	usb_d_init();
    16b0:	4b03      	ldr	r3, [pc, #12]	; (16c0 <CDCUSB_init+0x18>)
    16b2:	4798      	blx	r3
	CDCUSB_PORT_init();
    16b4:	4b03      	ldr	r3, [pc, #12]	; (16c4 <CDCUSB_init+0x1c>)
    16b6:	4798      	blx	r3
}
    16b8:	bf00      	nop
    16ba:	bd80      	pop	{r7, pc}
    16bc:	00001675 	.word	0x00001675
    16c0:	000027f9 	.word	0x000027f9
    16c4:	00001615 	.word	0x00001615

000016c8 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    16c8:	b580      	push	{r7, lr}
    16ca:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    16cc:	4802      	ldr	r0, [pc, #8]	; (16d8 <WATCHDOG_CLOCK_init+0x10>)
    16ce:	4b03      	ldr	r3, [pc, #12]	; (16dc <WATCHDOG_CLOCK_init+0x14>)
    16d0:	4798      	blx	r3
}
    16d2:	bf00      	nop
    16d4:	bd80      	pop	{r7, pc}
    16d6:	bf00      	nop
    16d8:	40000800 	.word	0x40000800
    16dc:	000004ab 	.word	0x000004ab

000016e0 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    16e0:	b580      	push	{r7, lr}
    16e2:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    16e4:	4b03      	ldr	r3, [pc, #12]	; (16f4 <WATCHDOG_init+0x14>)
    16e6:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    16e8:	4903      	ldr	r1, [pc, #12]	; (16f8 <WATCHDOG_init+0x18>)
    16ea:	4804      	ldr	r0, [pc, #16]	; (16fc <WATCHDOG_init+0x1c>)
    16ec:	4b04      	ldr	r3, [pc, #16]	; (1700 <WATCHDOG_init+0x20>)
    16ee:	4798      	blx	r3
}
    16f0:	bf00      	nop
    16f2:	bd80      	pop	{r7, pc}
    16f4:	000016c9 	.word	0x000016c9
    16f8:	40002000 	.word	0x40002000
    16fc:	20001c68 	.word	0x20001c68
    1700:	00000cd9 	.word	0x00000cd9

00001704 <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    1704:	b580      	push	{r7, lr}
    1706:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    1708:	4904      	ldr	r1, [pc, #16]	; (171c <CAN_CCU_PORT_init+0x18>)
    170a:	202d      	movs	r0, #45	; 0x2d
    170c:	4b04      	ldr	r3, [pc, #16]	; (1720 <CAN_CCU_PORT_init+0x1c>)
    170e:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    1710:	4904      	ldr	r1, [pc, #16]	; (1724 <CAN_CCU_PORT_init+0x20>)
    1712:	202c      	movs	r0, #44	; 0x2c
    1714:	4b02      	ldr	r3, [pc, #8]	; (1720 <CAN_CCU_PORT_init+0x1c>)
    1716:	4798      	blx	r3
}
    1718:	bf00      	nop
    171a:	bd80      	pop	{r7, pc}
    171c:	002d0007 	.word	0x002d0007
    1720:	00000c39 	.word	0x00000c39
    1724:	002c0007 	.word	0x002c0007

00001728 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    1728:	b580      	push	{r7, lr}
    172a:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    172c:	4807      	ldr	r0, [pc, #28]	; (174c <CAN_CCU_init+0x24>)
    172e:	4b08      	ldr	r3, [pc, #32]	; (1750 <CAN_CCU_init+0x28>)
    1730:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1732:	2243      	movs	r2, #67	; 0x43
    1734:	211c      	movs	r1, #28
    1736:	4807      	ldr	r0, [pc, #28]	; (1754 <CAN_CCU_init+0x2c>)
    1738:	4b07      	ldr	r3, [pc, #28]	; (1758 <CAN_CCU_init+0x30>)
    173a:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    173c:	4907      	ldr	r1, [pc, #28]	; (175c <CAN_CCU_init+0x34>)
    173e:	4808      	ldr	r0, [pc, #32]	; (1760 <CAN_CCU_init+0x38>)
    1740:	4b08      	ldr	r3, [pc, #32]	; (1764 <CAN_CCU_init+0x3c>)
    1742:	4798      	blx	r3
	CAN_CCU_PORT_init();
    1744:	4b08      	ldr	r3, [pc, #32]	; (1768 <CAN_CCU_init+0x40>)
    1746:	4798      	blx	r3
}
    1748:	bf00      	nop
    174a:	bd80      	pop	{r7, pc}
    174c:	40000800 	.word	0x40000800
    1750:	0000046b 	.word	0x0000046b
    1754:	40001c00 	.word	0x40001c00
    1758:	00000405 	.word	0x00000405
    175c:	42000400 	.word	0x42000400
    1760:	20001bc0 	.word	0x20001bc0
    1764:	000019c5 	.word	0x000019c5
    1768:	00001705 	.word	0x00001705

0000176c <system_init>:

void system_init(void)
{
    176c:	b580      	push	{r7, lr}
    176e:	af00      	add	r7, sp, #0
	init_mcu();
    1770:	4b5e      	ldr	r3, [pc, #376]	; (18ec <system_init+0x180>)
    1772:	4798      	blx	r3

	// GPIO on PA07

	gpio_set_pin_level(iAlcFwIsAlive,
    1774:	2100      	movs	r1, #0
    1776:	2007      	movs	r0, #7
    1778:	4b5d      	ldr	r3, [pc, #372]	; (18f0 <system_init+0x184>)
    177a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(iAlcFwIsAlive, GPIO_DIRECTION_OUT);
    177c:	2102      	movs	r1, #2
    177e:	2007      	movs	r0, #7
    1780:	4b5c      	ldr	r3, [pc, #368]	; (18f4 <system_init+0x188>)
    1782:	4798      	blx	r3

	gpio_set_pin_function(iAlcFwIsAlive, GPIO_PIN_FUNCTION_OFF);
    1784:	f04f 31ff 	mov.w	r1, #4294967295
    1788:	2007      	movs	r0, #7
    178a:	4b5b      	ldr	r3, [pc, #364]	; (18f8 <system_init+0x18c>)
    178c:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    178e:	2101      	movs	r1, #1
    1790:	200f      	movs	r0, #15
    1792:	4b57      	ldr	r3, [pc, #348]	; (18f0 <system_init+0x184>)
    1794:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    1796:	2102      	movs	r1, #2
    1798:	200f      	movs	r0, #15
    179a:	4b56      	ldr	r3, [pc, #344]	; (18f4 <system_init+0x188>)
    179c:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    179e:	f04f 31ff 	mov.w	r1, #4294967295
    17a2:	200f      	movs	r0, #15
    17a4:	4b54      	ldr	r3, [pc, #336]	; (18f8 <system_init+0x18c>)
    17a6:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    17a8:	2101      	movs	r1, #1
    17aa:	2013      	movs	r0, #19
    17ac:	4b50      	ldr	r3, [pc, #320]	; (18f0 <system_init+0x184>)
    17ae:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    17b0:	2102      	movs	r1, #2
    17b2:	2013      	movs	r0, #19
    17b4:	4b4f      	ldr	r3, [pc, #316]	; (18f4 <system_init+0x188>)
    17b6:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    17b8:	f04f 31ff 	mov.w	r1, #4294967295
    17bc:	2013      	movs	r0, #19
    17be:	4b4e      	ldr	r3, [pc, #312]	; (18f8 <system_init+0x18c>)
    17c0:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(CS_TEMP2,
    17c2:	2101      	movs	r1, #1
    17c4:	201b      	movs	r0, #27
    17c6:	4b4a      	ldr	r3, [pc, #296]	; (18f0 <system_init+0x184>)
    17c8:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP2, GPIO_DIRECTION_OUT);
    17ca:	2102      	movs	r1, #2
    17cc:	201b      	movs	r0, #27
    17ce:	4b49      	ldr	r3, [pc, #292]	; (18f4 <system_init+0x188>)
    17d0:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP2, GPIO_PIN_FUNCTION_OFF);
    17d2:	f04f 31ff 	mov.w	r1, #4294967295
    17d6:	201b      	movs	r0, #27
    17d8:	4b47      	ldr	r3, [pc, #284]	; (18f8 <system_init+0x18c>)
    17da:	4798      	blx	r3

	// GPIO on PB07

	gpio_set_pin_level(CS_TEMP3,
    17dc:	2101      	movs	r1, #1
    17de:	2027      	movs	r0, #39	; 0x27
    17e0:	4b43      	ldr	r3, [pc, #268]	; (18f0 <system_init+0x184>)
    17e2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP3, GPIO_DIRECTION_OUT);
    17e4:	2102      	movs	r1, #2
    17e6:	2027      	movs	r0, #39	; 0x27
    17e8:	4b42      	ldr	r3, [pc, #264]	; (18f4 <system_init+0x188>)
    17ea:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP3, GPIO_PIN_FUNCTION_OFF);
    17ec:	f04f 31ff 	mov.w	r1, #4294967295
    17f0:	2027      	movs	r0, #39	; 0x27
    17f2:	4b41      	ldr	r3, [pc, #260]	; (18f8 <system_init+0x18c>)
    17f4:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_TEMP1,
    17f6:	2101      	movs	r1, #1
    17f8:	203d      	movs	r0, #61	; 0x3d
    17fa:	4b3d      	ldr	r3, [pc, #244]	; (18f0 <system_init+0x184>)
    17fc:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP1, GPIO_DIRECTION_OUT);
    17fe:	2102      	movs	r1, #2
    1800:	203d      	movs	r0, #61	; 0x3d
    1802:	4b3c      	ldr	r3, [pc, #240]	; (18f4 <system_init+0x188>)
    1804:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP1, GPIO_PIN_FUNCTION_OFF);
    1806:	f04f 31ff 	mov.w	r1, #4294967295
    180a:	203d      	movs	r0, #61	; 0x3d
    180c:	4b3a      	ldr	r3, [pc, #232]	; (18f8 <system_init+0x18c>)
    180e:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    1810:	2101      	movs	r1, #1
    1812:	203f      	movs	r0, #63	; 0x3f
    1814:	4b37      	ldr	r3, [pc, #220]	; (18f4 <system_init+0x188>)
    1816:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    1818:	2101      	movs	r1, #1
    181a:	203f      	movs	r0, #63	; 0x3f
    181c:	4b37      	ldr	r3, [pc, #220]	; (18fc <system_init+0x190>)
    181e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    1820:	f04f 31ff 	mov.w	r1, #4294967295
    1824:	203f      	movs	r0, #63	; 0x3f
    1826:	4b34      	ldr	r3, [pc, #208]	; (18f8 <system_init+0x18c>)
    1828:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    182a:	2100      	movs	r1, #0
    182c:	204d      	movs	r0, #77	; 0x4d
    182e:	4b30      	ldr	r3, [pc, #192]	; (18f0 <system_init+0x184>)
    1830:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    1832:	2102      	movs	r1, #2
    1834:	204d      	movs	r0, #77	; 0x4d
    1836:	4b2f      	ldr	r3, [pc, #188]	; (18f4 <system_init+0x188>)
    1838:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    183a:	f04f 31ff 	mov.w	r1, #4294967295
    183e:	204d      	movs	r0, #77	; 0x4d
    1840:	4b2d      	ldr	r3, [pc, #180]	; (18f8 <system_init+0x18c>)
    1842:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    1844:	2101      	movs	r1, #1
    1846:	204e      	movs	r0, #78	; 0x4e
    1848:	4b29      	ldr	r3, [pc, #164]	; (18f0 <system_init+0x184>)
    184a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    184c:	2102      	movs	r1, #2
    184e:	204e      	movs	r0, #78	; 0x4e
    1850:	4b28      	ldr	r3, [pc, #160]	; (18f4 <system_init+0x188>)
    1852:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    1854:	f04f 31ff 	mov.w	r1, #4294967295
    1858:	204e      	movs	r0, #78	; 0x4e
    185a:	4b27      	ldr	r3, [pc, #156]	; (18f8 <system_init+0x18c>)
    185c:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    185e:	2100      	movs	r1, #0
    1860:	204f      	movs	r0, #79	; 0x4f
    1862:	4b23      	ldr	r3, [pc, #140]	; (18f0 <system_init+0x184>)
    1864:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    1866:	2102      	movs	r1, #2
    1868:	204f      	movs	r0, #79	; 0x4f
    186a:	4b22      	ldr	r3, [pc, #136]	; (18f4 <system_init+0x188>)
    186c:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    186e:	f04f 31ff 	mov.w	r1, #4294967295
    1872:	204f      	movs	r0, #79	; 0x4f
    1874:	4b20      	ldr	r3, [pc, #128]	; (18f8 <system_init+0x18c>)
    1876:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    1878:	2100      	movs	r1, #0
    187a:	2052      	movs	r0, #82	; 0x52
    187c:	4b1c      	ldr	r3, [pc, #112]	; (18f0 <system_init+0x184>)
    187e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    1880:	2102      	movs	r1, #2
    1882:	2052      	movs	r0, #82	; 0x52
    1884:	4b1b      	ldr	r3, [pc, #108]	; (18f4 <system_init+0x188>)
    1886:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    1888:	f04f 31ff 	mov.w	r1, #4294967295
    188c:	2052      	movs	r0, #82	; 0x52
    188e:	4b1a      	ldr	r3, [pc, #104]	; (18f8 <system_init+0x18c>)
    1890:	4798      	blx	r3

	CRC_CALC_init();
    1892:	4b1b      	ldr	r3, [pc, #108]	; (1900 <system_init+0x194>)
    1894:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    1896:	4b1b      	ldr	r3, [pc, #108]	; (1904 <system_init+0x198>)
    1898:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    189a:	4b1b      	ldr	r3, [pc, #108]	; (1908 <system_init+0x19c>)
    189c:	4798      	blx	r3

	QSPI_N25Q256_init();
    189e:	4b1b      	ldr	r3, [pc, #108]	; (190c <system_init+0x1a0>)
    18a0:	4798      	blx	r3

	DATETIME_CLOCK_init();
    18a2:	4b1b      	ldr	r3, [pc, #108]	; (1910 <system_init+0x1a4>)
    18a4:	4798      	blx	r3

	I2C_HEATERS_init();
    18a6:	4b1b      	ldr	r3, [pc, #108]	; (1914 <system_init+0x1a8>)
    18a8:	4798      	blx	r3

	SPI_TEMP_init();
    18aa:	4b1b      	ldr	r3, [pc, #108]	; (1918 <system_init+0x1ac>)
    18ac:	4798      	blx	r3

	I2C_FLAPPER_VALVE_init();
    18ae:	4b1b      	ldr	r3, [pc, #108]	; (191c <system_init+0x1b0>)
    18b0:	4798      	blx	r3

	SPI_HI3593_init();
    18b2:	4b1b      	ldr	r3, [pc, #108]	; (1920 <system_init+0x1b4>)
    18b4:	4798      	blx	r3

	I2C_FANS_init();
    18b6:	4b1b      	ldr	r3, [pc, #108]	; (1924 <system_init+0x1b8>)
    18b8:	4798      	blx	r3

	TIMER_USB_init();
    18ba:	4b1b      	ldr	r3, [pc, #108]	; (1928 <system_init+0x1bc>)
    18bc:	4798      	blx	r3
	TIMER_ARINC_init();
    18be:	4b1b      	ldr	r3, [pc, #108]	; (192c <system_init+0x1c0>)
    18c0:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    18c2:	4b1b      	ldr	r3, [pc, #108]	; (1930 <system_init+0x1c4>)
    18c4:	4798      	blx	r3
	TIMER_INTERFACE_init();
    18c6:	4b1b      	ldr	r3, [pc, #108]	; (1934 <system_init+0x1c8>)
    18c8:	4798      	blx	r3
	TIMER_EVENT_init();
    18ca:	4b1b      	ldr	r3, [pc, #108]	; (1938 <system_init+0x1cc>)
    18cc:	4798      	blx	r3
	LIVE_PULSE_init();
    18ce:	4b1b      	ldr	r3, [pc, #108]	; (193c <system_init+0x1d0>)
    18d0:	4798      	blx	r3

	TIMER_HVAC_init();
    18d2:	4b1b      	ldr	r3, [pc, #108]	; (1940 <system_init+0x1d4>)
    18d4:	4798      	blx	r3

	TIMER_TEMPERATURES_init();
    18d6:	4b1b      	ldr	r3, [pc, #108]	; (1944 <system_init+0x1d8>)
    18d8:	4798      	blx	r3

	CDCUSB_init();
    18da:	4b1b      	ldr	r3, [pc, #108]	; (1948 <system_init+0x1dc>)
    18dc:	4798      	blx	r3

	WATCHDOG_init();
    18de:	4b1b      	ldr	r3, [pc, #108]	; (194c <system_init+0x1e0>)
    18e0:	4798      	blx	r3
	CAN_CCU_init();
    18e2:	4b1b      	ldr	r3, [pc, #108]	; (1950 <system_init+0x1e4>)
    18e4:	4798      	blx	r3
}
    18e6:	bf00      	nop
    18e8:	bd80      	pop	{r7, pc}
    18ea:	bf00      	nop
    18ec:	00000cc9 	.word	0x00000cc9
    18f0:	00000c91 	.word	0x00000c91
    18f4:	00000c59 	.word	0x00000c59
    18f8:	00000c39 	.word	0x00000c39
    18fc:	00000c05 	.word	0x00000c05
    1900:	00000d29 	.word	0x00000d29
    1904:	00000d55 	.word	0x00000d55
    1908:	00000e7d 	.word	0x00000e7d
    190c:	00000fc5 	.word	0x00000fc5
    1910:	00001009 	.word	0x00001009
    1914:	00001099 	.word	0x00001099
    1918:	00001165 	.word	0x00001165
    191c:	000011fd 	.word	0x000011fd
    1920:	000012c9 	.word	0x000012c9
    1924:	00001361 	.word	0x00001361
    1928:	0000138d 	.word	0x0000138d
    192c:	000013d5 	.word	0x000013d5
    1930:	0000141d 	.word	0x0000141d
    1934:	00001465 	.word	0x00001465
    1938:	000014ad 	.word	0x000014ad
    193c:	0000152d 	.word	0x0000152d
    1940:	0000158d 	.word	0x0000158d
    1944:	000015e5 	.word	0x000015e5
    1948:	000016a9 	.word	0x000016a9
    194c:	000016e1 	.word	0x000016e1
    1950:	00001729 	.word	0x00001729

00001954 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    1954:	b580      	push	{r7, lr}
    1956:	b084      	sub	sp, #16
    1958:	af00      	add	r7, sp, #0
    195a:	6078      	str	r0, [r7, #4]
    195c:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    195e:	2300      	movs	r3, #0
    1960:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    1962:	687b      	ldr	r3, [r7, #4]
    1964:	2b00      	cmp	r3, #0
    1966:	bf14      	ite	ne
    1968:	2301      	movne	r3, #1
    196a:	2300      	moveq	r3, #0
    196c:	b2db      	uxtb	r3, r3
    196e:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    1972:	4911      	ldr	r1, [pc, #68]	; (19b8 <calendar_init+0x64>)
    1974:	4618      	mov	r0, r3
    1976:	4b11      	ldr	r3, [pc, #68]	; (19bc <calendar_init+0x68>)
    1978:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    197a:	687b      	ldr	r3, [r7, #4]
    197c:	681a      	ldr	r2, [r3, #0]
    197e:	683b      	ldr	r3, [r7, #0]
    1980:	429a      	cmp	r2, r3
    1982:	d101      	bne.n	1988 <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    1984:	2300      	movs	r3, #0
    1986:	e013      	b.n	19b0 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    1988:	687b      	ldr	r3, [r7, #4]
    198a:	681b      	ldr	r3, [r3, #0]
    198c:	2b00      	cmp	r3, #0
    198e:	d002      	beq.n	1996 <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    1990:	f06f 0311 	mvn.w	r3, #17
    1994:	e00c      	b.n	19b0 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    1996:	687b      	ldr	r3, [r7, #4]
    1998:	683a      	ldr	r2, [r7, #0]
    199a:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    199c:	687b      	ldr	r3, [r7, #4]
    199e:	4618      	mov	r0, r3
    19a0:	4b07      	ldr	r3, [pc, #28]	; (19c0 <calendar_init+0x6c>)
    19a2:	4798      	blx	r3
    19a4:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    19a6:	687b      	ldr	r3, [r7, #4]
    19a8:	f240 72b2 	movw	r2, #1970	; 0x7b2
    19ac:	619a      	str	r2, [r3, #24]

	return ret;
    19ae:	68fb      	ldr	r3, [r7, #12]
}
    19b0:	4618      	mov	r0, r3
    19b2:	3710      	adds	r7, #16
    19b4:	46bd      	mov	sp, r7
    19b6:	bd80      	pop	{r7, pc}
    19b8:	0001310c 	.word	0x0001310c
    19bc:	00002d4d 	.word	0x00002d4d
    19c0:	00005601 	.word	0x00005601

000019c4 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    19c4:	b580      	push	{r7, lr}
    19c6:	b084      	sub	sp, #16
    19c8:	af00      	add	r7, sp, #0
    19ca:	6078      	str	r0, [r7, #4]
    19cc:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    19ce:	687b      	ldr	r3, [r7, #4]
    19d0:	2b00      	cmp	r3, #0
    19d2:	d004      	beq.n	19de <can_async_init+0x1a>
    19d4:	683b      	ldr	r3, [r7, #0]
    19d6:	2b00      	cmp	r3, #0
    19d8:	d001      	beq.n	19de <can_async_init+0x1a>
    19da:	2301      	movs	r3, #1
    19dc:	e000      	b.n	19e0 <can_async_init+0x1c>
    19de:	2300      	movs	r3, #0
    19e0:	f003 0301 	and.w	r3, r3, #1
    19e4:	b2db      	uxtb	r3, r3
    19e6:	2241      	movs	r2, #65	; 0x41
    19e8:	490e      	ldr	r1, [pc, #56]	; (1a24 <can_async_init+0x60>)
    19ea:	4618      	mov	r0, r3
    19ec:	4b0e      	ldr	r3, [pc, #56]	; (1a28 <can_async_init+0x64>)
    19ee:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    19f0:	687b      	ldr	r3, [r7, #4]
    19f2:	6839      	ldr	r1, [r7, #0]
    19f4:	4618      	mov	r0, r3
    19f6:	4b0d      	ldr	r3, [pc, #52]	; (1a2c <can_async_init+0x68>)
    19f8:	4798      	blx	r3
    19fa:	60f8      	str	r0, [r7, #12]
	if (rc) {
    19fc:	68fb      	ldr	r3, [r7, #12]
    19fe:	2b00      	cmp	r3, #0
    1a00:	d001      	beq.n	1a06 <can_async_init+0x42>
		return rc;
    1a02:	68fb      	ldr	r3, [r7, #12]
    1a04:	e009      	b.n	1a1a <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    1a06:	687b      	ldr	r3, [r7, #4]
    1a08:	4a09      	ldr	r2, [pc, #36]	; (1a30 <can_async_init+0x6c>)
    1a0a:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    1a0c:	687b      	ldr	r3, [r7, #4]
    1a0e:	4a09      	ldr	r2, [pc, #36]	; (1a34 <can_async_init+0x70>)
    1a10:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    1a12:	687b      	ldr	r3, [r7, #4]
    1a14:	4a08      	ldr	r2, [pc, #32]	; (1a38 <can_async_init+0x74>)
    1a16:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    1a18:	2300      	movs	r3, #0
}
    1a1a:	4618      	mov	r0, r3
    1a1c:	3710      	adds	r7, #16
    1a1e:	46bd      	mov	sp, r7
    1a20:	bd80      	pop	{r7, pc}
    1a22:	bf00      	nop
    1a24:	00013128 	.word	0x00013128
    1a28:	00002d4d 	.word	0x00002d4d
    1a2c:	0000344d 	.word	0x0000344d
    1a30:	00001bd9 	.word	0x00001bd9
    1a34:	00001bfd 	.word	0x00001bfd
    1a38:	00001c21 	.word	0x00001c21

00001a3c <can_async_enable>:

/**
 * \brief Enable CAN
 */
int32_t can_async_enable(struct can_async_descriptor *const descr)
{
    1a3c:	b580      	push	{r7, lr}
    1a3e:	b082      	sub	sp, #8
    1a40:	af00      	add	r7, sp, #0
    1a42:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    1a44:	687b      	ldr	r3, [r7, #4]
    1a46:	2b00      	cmp	r3, #0
    1a48:	bf14      	ite	ne
    1a4a:	2301      	movne	r3, #1
    1a4c:	2300      	moveq	r3, #0
    1a4e:	b2db      	uxtb	r3, r3
    1a50:	225c      	movs	r2, #92	; 0x5c
    1a52:	4906      	ldr	r1, [pc, #24]	; (1a6c <can_async_enable+0x30>)
    1a54:	4618      	mov	r0, r3
    1a56:	4b06      	ldr	r3, [pc, #24]	; (1a70 <can_async_enable+0x34>)
    1a58:	4798      	blx	r3
	return _can_async_enable(&descr->dev);
    1a5a:	687b      	ldr	r3, [r7, #4]
    1a5c:	4618      	mov	r0, r3
    1a5e:	4b05      	ldr	r3, [pc, #20]	; (1a74 <can_async_enable+0x38>)
    1a60:	4798      	blx	r3
    1a62:	4603      	mov	r3, r0
}
    1a64:	4618      	mov	r0, r3
    1a66:	3708      	adds	r7, #8
    1a68:	46bd      	mov	sp, r7
    1a6a:	bd80      	pop	{r7, pc}
    1a6c:	00013128 	.word	0x00013128
    1a70:	00002d4d 	.word	0x00002d4d
    1a74:	00003639 	.word	0x00003639

00001a78 <can_async_read>:

/**
 * \brief Read a CAN message
 */
int32_t can_async_read(struct can_async_descriptor *const descr, struct can_message *msg)
{
    1a78:	b580      	push	{r7, lr}
    1a7a:	b082      	sub	sp, #8
    1a7c:	af00      	add	r7, sp, #0
    1a7e:	6078      	str	r0, [r7, #4]
    1a80:	6039      	str	r1, [r7, #0]
	ASSERT(descr && msg);
    1a82:	687b      	ldr	r3, [r7, #4]
    1a84:	2b00      	cmp	r3, #0
    1a86:	d004      	beq.n	1a92 <can_async_read+0x1a>
    1a88:	683b      	ldr	r3, [r7, #0]
    1a8a:	2b00      	cmp	r3, #0
    1a8c:	d001      	beq.n	1a92 <can_async_read+0x1a>
    1a8e:	2301      	movs	r3, #1
    1a90:	e000      	b.n	1a94 <can_async_read+0x1c>
    1a92:	2300      	movs	r3, #0
    1a94:	f003 0301 	and.w	r3, r3, #1
    1a98:	b2db      	uxtb	r3, r3
    1a9a:	226e      	movs	r2, #110	; 0x6e
    1a9c:	4906      	ldr	r1, [pc, #24]	; (1ab8 <can_async_read+0x40>)
    1a9e:	4618      	mov	r0, r3
    1aa0:	4b06      	ldr	r3, [pc, #24]	; (1abc <can_async_read+0x44>)
    1aa2:	4798      	blx	r3
	return _can_async_read(&descr->dev, msg);
    1aa4:	687b      	ldr	r3, [r7, #4]
    1aa6:	6839      	ldr	r1, [r7, #0]
    1aa8:	4618      	mov	r0, r3
    1aaa:	4b05      	ldr	r3, [pc, #20]	; (1ac0 <can_async_read+0x48>)
    1aac:	4798      	blx	r3
    1aae:	4603      	mov	r3, r0
}
    1ab0:	4618      	mov	r0, r3
    1ab2:	3708      	adds	r7, #8
    1ab4:	46bd      	mov	sp, r7
    1ab6:	bd80      	pop	{r7, pc}
    1ab8:	00013128 	.word	0x00013128
    1abc:	00002d4d 	.word	0x00002d4d
    1ac0:	00003659 	.word	0x00003659

00001ac4 <can_async_write>:

/**
 * \brief Write a CAN message
 */
int32_t can_async_write(struct can_async_descriptor *const descr, struct can_message *msg)
{
    1ac4:	b580      	push	{r7, lr}
    1ac6:	b082      	sub	sp, #8
    1ac8:	af00      	add	r7, sp, #0
    1aca:	6078      	str	r0, [r7, #4]
    1acc:	6039      	str	r1, [r7, #0]
	ASSERT(descr && msg);
    1ace:	687b      	ldr	r3, [r7, #4]
    1ad0:	2b00      	cmp	r3, #0
    1ad2:	d004      	beq.n	1ade <can_async_write+0x1a>
    1ad4:	683b      	ldr	r3, [r7, #0]
    1ad6:	2b00      	cmp	r3, #0
    1ad8:	d001      	beq.n	1ade <can_async_write+0x1a>
    1ada:	2301      	movs	r3, #1
    1adc:	e000      	b.n	1ae0 <can_async_write+0x1c>
    1ade:	2300      	movs	r3, #0
    1ae0:	f003 0301 	and.w	r3, r3, #1
    1ae4:	b2db      	uxtb	r3, r3
    1ae6:	2277      	movs	r2, #119	; 0x77
    1ae8:	4906      	ldr	r1, [pc, #24]	; (1b04 <can_async_write+0x40>)
    1aea:	4618      	mov	r0, r3
    1aec:	4b06      	ldr	r3, [pc, #24]	; (1b08 <can_async_write+0x44>)
    1aee:	4798      	blx	r3
	return _can_async_write(&descr->dev, msg);
    1af0:	687b      	ldr	r3, [r7, #4]
    1af2:	6839      	ldr	r1, [r7, #0]
    1af4:	4618      	mov	r0, r3
    1af6:	4b05      	ldr	r3, [pc, #20]	; (1b0c <can_async_write+0x48>)
    1af8:	4798      	blx	r3
    1afa:	4603      	mov	r3, r0
}
    1afc:	4618      	mov	r0, r3
    1afe:	3708      	adds	r7, #8
    1b00:	46bd      	mov	sp, r7
    1b02:	bd80      	pop	{r7, pc}
    1b04:	00013128 	.word	0x00013128
    1b08:	00002d4d 	.word	0x00002d4d
    1b0c:	00003769 	.word	0x00003769

00001b10 <can_async_register_callback>:
/**
 * \brief Register CAN callback function to interrupt
 */
int32_t can_async_register_callback(struct can_async_descriptor *const descr, enum can_async_callback_type type,
                                    FUNC_PTR cb)
{
    1b10:	b580      	push	{r7, lr}
    1b12:	b084      	sub	sp, #16
    1b14:	af00      	add	r7, sp, #0
    1b16:	60f8      	str	r0, [r7, #12]
    1b18:	460b      	mov	r3, r1
    1b1a:	607a      	str	r2, [r7, #4]
    1b1c:	72fb      	strb	r3, [r7, #11]
	ASSERT(descr);
    1b1e:	68fb      	ldr	r3, [r7, #12]
    1b20:	2b00      	cmp	r3, #0
    1b22:	bf14      	ite	ne
    1b24:	2301      	movne	r3, #1
    1b26:	2300      	moveq	r3, #0
    1b28:	b2db      	uxtb	r3, r3
    1b2a:	2281      	movs	r2, #129	; 0x81
    1b2c:	4914      	ldr	r1, [pc, #80]	; (1b80 <can_async_register_callback+0x70>)
    1b2e:	4618      	mov	r0, r3
    1b30:	4b14      	ldr	r3, [pc, #80]	; (1b84 <can_async_register_callback+0x74>)
    1b32:	4798      	blx	r3

	switch (type) {
    1b34:	7afb      	ldrb	r3, [r7, #11]
    1b36:	2b01      	cmp	r3, #1
    1b38:	d007      	beq.n	1b4a <can_async_register_callback+0x3a>
    1b3a:	2b02      	cmp	r3, #2
    1b3c:	d009      	beq.n	1b52 <can_async_register_callback+0x42>
    1b3e:	2b00      	cmp	r3, #0
    1b40:	d10b      	bne.n	1b5a <can_async_register_callback+0x4a>
	case CAN_ASYNC_RX_CB:
		descr->cb.rx_done = (cb != NULL) ? (can_cb_t)cb : NULL;
    1b42:	68fb      	ldr	r3, [r7, #12]
    1b44:	687a      	ldr	r2, [r7, #4]
    1b46:	621a      	str	r2, [r3, #32]
		break;
    1b48:	e00a      	b.n	1b60 <can_async_register_callback+0x50>
	case CAN_ASYNC_TX_CB:
		descr->cb.tx_done = (cb != NULL) ? (can_cb_t)cb : NULL;
    1b4a:	68fb      	ldr	r3, [r7, #12]
    1b4c:	687a      	ldr	r2, [r7, #4]
    1b4e:	61da      	str	r2, [r3, #28]
		break;
    1b50:	e006      	b.n	1b60 <can_async_register_callback+0x50>
	case CAN_ASYNC_IRQ_CB:
		descr->cb.irq_handler
		    = (cb != NULL) ? (void (*)(struct can_async_descriptor *const, enum can_async_interrupt_type))cb : NULL;
    1b52:	68fb      	ldr	r3, [r7, #12]
    1b54:	687a      	ldr	r2, [r7, #4]
    1b56:	625a      	str	r2, [r3, #36]	; 0x24
		break;
    1b58:	e002      	b.n	1b60 <can_async_register_callback+0x50>
	default:
		return ERR_INVALID_ARG;
    1b5a:	f06f 030c 	mvn.w	r3, #12
    1b5e:	e00b      	b.n	1b78 <can_async_register_callback+0x68>
	}

	_can_async_set_irq_state(&descr->dev, type, NULL != cb);
    1b60:	68f8      	ldr	r0, [r7, #12]
    1b62:	687b      	ldr	r3, [r7, #4]
    1b64:	2b00      	cmp	r3, #0
    1b66:	bf14      	ite	ne
    1b68:	2301      	movne	r3, #1
    1b6a:	2300      	moveq	r3, #0
    1b6c:	b2da      	uxtb	r2, r3
    1b6e:	7afb      	ldrb	r3, [r7, #11]
    1b70:	4619      	mov	r1, r3
    1b72:	4b05      	ldr	r3, [pc, #20]	; (1b88 <can_async_register_callback+0x78>)
    1b74:	4798      	blx	r3

	return ERR_NONE;
    1b76:	2300      	movs	r3, #0
}
    1b78:	4618      	mov	r0, r3
    1b7a:	3710      	adds	r7, #16
    1b7c:	46bd      	mov	sp, r7
    1b7e:	bd80      	pop	{r7, pc}
    1b80:	00013128 	.word	0x00013128
    1b84:	00002d4d 	.word	0x00002d4d
    1b88:	00003925 	.word	0x00003925

00001b8c <can_async_set_filter>:
/**
 * \brief Set CAN filter
 */
int32_t can_async_set_filter(struct can_async_descriptor *const descr, uint8_t index, enum can_format fmt,
                             struct can_filter *filter)
{
    1b8c:	b590      	push	{r4, r7, lr}
    1b8e:	b085      	sub	sp, #20
    1b90:	af00      	add	r7, sp, #0
    1b92:	60f8      	str	r0, [r7, #12]
    1b94:	607b      	str	r3, [r7, #4]
    1b96:	460b      	mov	r3, r1
    1b98:	72fb      	strb	r3, [r7, #11]
    1b9a:	4613      	mov	r3, r2
    1b9c:	72bb      	strb	r3, [r7, #10]
	ASSERT(descr);
    1b9e:	68fb      	ldr	r3, [r7, #12]
    1ba0:	2b00      	cmp	r3, #0
    1ba2:	bf14      	ite	ne
    1ba4:	2301      	movne	r3, #1
    1ba6:	2300      	moveq	r3, #0
    1ba8:	b2db      	uxtb	r3, r3
    1baa:	22b8      	movs	r2, #184	; 0xb8
    1bac:	4907      	ldr	r1, [pc, #28]	; (1bcc <can_async_set_filter+0x40>)
    1bae:	4618      	mov	r0, r3
    1bb0:	4b07      	ldr	r3, [pc, #28]	; (1bd0 <can_async_set_filter+0x44>)
    1bb2:	4798      	blx	r3
	return _can_async_set_filter(&descr->dev, index, fmt, filter);
    1bb4:	68f8      	ldr	r0, [r7, #12]
    1bb6:	7aba      	ldrb	r2, [r7, #10]
    1bb8:	7af9      	ldrb	r1, [r7, #11]
    1bba:	687b      	ldr	r3, [r7, #4]
    1bbc:	4c05      	ldr	r4, [pc, #20]	; (1bd4 <can_async_set_filter+0x48>)
    1bbe:	47a0      	blx	r4
    1bc0:	4603      	mov	r3, r0
}
    1bc2:	4618      	mov	r0, r3
    1bc4:	3714      	adds	r7, #20
    1bc6:	46bd      	mov	sp, r7
    1bc8:	bd90      	pop	{r4, r7, pc}
    1bca:	bf00      	nop
    1bcc:	00013128 	.word	0x00013128
    1bd0:	00002d4d 	.word	0x00002d4d
    1bd4:	000039b1 	.word	0x000039b1

00001bd8 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    1bd8:	b580      	push	{r7, lr}
    1bda:	b084      	sub	sp, #16
    1bdc:	af00      	add	r7, sp, #0
    1bde:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    1be0:	687b      	ldr	r3, [r7, #4]
    1be2:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    1be4:	68fb      	ldr	r3, [r7, #12]
    1be6:	69db      	ldr	r3, [r3, #28]
    1be8:	2b00      	cmp	r3, #0
    1bea:	d003      	beq.n	1bf4 <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    1bec:	68fb      	ldr	r3, [r7, #12]
    1bee:	69db      	ldr	r3, [r3, #28]
    1bf0:	68f8      	ldr	r0, [r7, #12]
    1bf2:	4798      	blx	r3
	}
}
    1bf4:	bf00      	nop
    1bf6:	3710      	adds	r7, #16
    1bf8:	46bd      	mov	sp, r7
    1bfa:	bd80      	pop	{r7, pc}

00001bfc <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    1bfc:	b580      	push	{r7, lr}
    1bfe:	b084      	sub	sp, #16
    1c00:	af00      	add	r7, sp, #0
    1c02:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    1c04:	687b      	ldr	r3, [r7, #4]
    1c06:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    1c08:	68fb      	ldr	r3, [r7, #12]
    1c0a:	6a1b      	ldr	r3, [r3, #32]
    1c0c:	2b00      	cmp	r3, #0
    1c0e:	d003      	beq.n	1c18 <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    1c10:	68fb      	ldr	r3, [r7, #12]
    1c12:	6a1b      	ldr	r3, [r3, #32]
    1c14:	68f8      	ldr	r0, [r7, #12]
    1c16:	4798      	blx	r3
	}
}
    1c18:	bf00      	nop
    1c1a:	3710      	adds	r7, #16
    1c1c:	46bd      	mov	sp, r7
    1c1e:	bd80      	pop	{r7, pc}

00001c20 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    1c20:	b580      	push	{r7, lr}
    1c22:	b084      	sub	sp, #16
    1c24:	af00      	add	r7, sp, #0
    1c26:	6078      	str	r0, [r7, #4]
    1c28:	460b      	mov	r3, r1
    1c2a:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    1c2c:	687b      	ldr	r3, [r7, #4]
    1c2e:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    1c30:	68fb      	ldr	r3, [r7, #12]
    1c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1c34:	2b00      	cmp	r3, #0
    1c36:	d005      	beq.n	1c44 <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    1c38:	68fb      	ldr	r3, [r7, #12]
    1c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1c3c:	78fa      	ldrb	r2, [r7, #3]
    1c3e:	4611      	mov	r1, r2
    1c40:	68f8      	ldr	r0, [r7, #12]
    1c42:	4798      	blx	r3
	}
}
    1c44:	bf00      	nop
    1c46:	3710      	adds	r7, #16
    1c48:	46bd      	mov	sp, r7
    1c4a:	bd80      	pop	{r7, pc}

00001c4c <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    1c4c:	b580      	push	{r7, lr}
    1c4e:	b082      	sub	sp, #8
    1c50:	af00      	add	r7, sp, #0
    1c52:	6078      	str	r0, [r7, #4]
    1c54:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    1c56:	687b      	ldr	r3, [r7, #4]
    1c58:	2b00      	cmp	r3, #0
    1c5a:	d004      	beq.n	1c66 <crc_sync_init+0x1a>
    1c5c:	683b      	ldr	r3, [r7, #0]
    1c5e:	2b00      	cmp	r3, #0
    1c60:	d001      	beq.n	1c66 <crc_sync_init+0x1a>
    1c62:	2301      	movs	r3, #1
    1c64:	e000      	b.n	1c68 <crc_sync_init+0x1c>
    1c66:	2300      	movs	r3, #0
    1c68:	f003 0301 	and.w	r3, r3, #1
    1c6c:	b2db      	uxtb	r3, r3
    1c6e:	222b      	movs	r2, #43	; 0x2b
    1c70:	4906      	ldr	r1, [pc, #24]	; (1c8c <crc_sync_init+0x40>)
    1c72:	4618      	mov	r0, r3
    1c74:	4b06      	ldr	r3, [pc, #24]	; (1c90 <crc_sync_init+0x44>)
    1c76:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    1c78:	687b      	ldr	r3, [r7, #4]
    1c7a:	6839      	ldr	r1, [r7, #0]
    1c7c:	4618      	mov	r0, r3
    1c7e:	4b05      	ldr	r3, [pc, #20]	; (1c94 <crc_sync_init+0x48>)
    1c80:	4798      	blx	r3
    1c82:	4603      	mov	r3, r0
}
    1c84:	4618      	mov	r0, r3
    1c86:	3708      	adds	r7, #8
    1c88:	46bd      	mov	sp, r7
    1c8a:	bd80      	pop	{r7, pc}
    1c8c:	00013144 	.word	0x00013144
    1c90:	00002d4d 	.word	0x00002d4d
    1c94:	00003f91 	.word	0x00003f91

00001c98 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    1c98:	b590      	push	{r4, r7, lr}
    1c9a:	b083      	sub	sp, #12
    1c9c:	af00      	add	r7, sp, #0
    1c9e:	4603      	mov	r3, r0
    1ca0:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    1ca2:	4b07      	ldr	r3, [pc, #28]	; (1cc0 <delay_us+0x28>)
    1ca4:	681c      	ldr	r4, [r3, #0]
    1ca6:	88fb      	ldrh	r3, [r7, #6]
    1ca8:	4618      	mov	r0, r3
    1caa:	4b06      	ldr	r3, [pc, #24]	; (1cc4 <delay_us+0x2c>)
    1cac:	4798      	blx	r3
    1cae:	4603      	mov	r3, r0
    1cb0:	4619      	mov	r1, r3
    1cb2:	4620      	mov	r0, r4
    1cb4:	4b04      	ldr	r3, [pc, #16]	; (1cc8 <delay_us+0x30>)
    1cb6:	4798      	blx	r3
}
    1cb8:	bf00      	nop
    1cba:	370c      	adds	r7, #12
    1cbc:	46bd      	mov	sp, r7
    1cbe:	bd90      	pop	{r4, r7, pc}
    1cc0:	20000b74 	.word	0x20000b74
    1cc4:	00003ce5 	.word	0x00003ce5
    1cc8:	00003e79 	.word	0x00003e79

00001ccc <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    1ccc:	b590      	push	{r4, r7, lr}
    1cce:	b083      	sub	sp, #12
    1cd0:	af00      	add	r7, sp, #0
    1cd2:	4603      	mov	r3, r0
    1cd4:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    1cd6:	4b07      	ldr	r3, [pc, #28]	; (1cf4 <delay_ms+0x28>)
    1cd8:	681c      	ldr	r4, [r3, #0]
    1cda:	88fb      	ldrh	r3, [r7, #6]
    1cdc:	4618      	mov	r0, r3
    1cde:	4b06      	ldr	r3, [pc, #24]	; (1cf8 <delay_ms+0x2c>)
    1ce0:	4798      	blx	r3
    1ce2:	4603      	mov	r3, r0
    1ce4:	4619      	mov	r1, r3
    1ce6:	4620      	mov	r0, r4
    1ce8:	4b04      	ldr	r3, [pc, #16]	; (1cfc <delay_ms+0x30>)
    1cea:	4798      	blx	r3
}
    1cec:	bf00      	nop
    1cee:	370c      	adds	r7, #12
    1cf0:	46bd      	mov	sp, r7
    1cf2:	bd90      	pop	{r4, r7, pc}
    1cf4:	20000b74 	.word	0x20000b74
    1cf8:	00003e51 	.word	0x00003e51
    1cfc:	00003e79 	.word	0x00003e79

00001d00 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    1d00:	b580      	push	{r7, lr}
    1d02:	af00      	add	r7, sp, #0
	return _event_system_init();
    1d04:	4b02      	ldr	r3, [pc, #8]	; (1d10 <event_system_init+0x10>)
    1d06:	4798      	blx	r3
    1d08:	4603      	mov	r3, r0
}
    1d0a:	4618      	mov	r0, r3
    1d0c:	bd80      	pop	{r7, pc}
    1d0e:	bf00      	nop
    1d10:	00004675 	.word	0x00004675

00001d14 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    1d14:	b580      	push	{r7, lr}
    1d16:	b082      	sub	sp, #8
    1d18:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1d1a:	2300      	movs	r3, #0
    1d1c:	80fb      	strh	r3, [r7, #6]
    1d1e:	e00e      	b.n	1d3e <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    1d20:	88fb      	ldrh	r3, [r7, #6]
    1d22:	4a0c      	ldr	r2, [pc, #48]	; (1d54 <ext_irq_init+0x40>)
    1d24:	00db      	lsls	r3, r3, #3
    1d26:	4413      	add	r3, r2
    1d28:	f04f 32ff 	mov.w	r2, #4294967295
    1d2c:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    1d2e:	88fb      	ldrh	r3, [r7, #6]
    1d30:	4a08      	ldr	r2, [pc, #32]	; (1d54 <ext_irq_init+0x40>)
    1d32:	2100      	movs	r1, #0
    1d34:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1d38:	88fb      	ldrh	r3, [r7, #6]
    1d3a:	3301      	adds	r3, #1
    1d3c:	80fb      	strh	r3, [r7, #6]
    1d3e:	88fb      	ldrh	r3, [r7, #6]
    1d40:	2b08      	cmp	r3, #8
    1d42:	d9ed      	bls.n	1d20 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    1d44:	4804      	ldr	r0, [pc, #16]	; (1d58 <ext_irq_init+0x44>)
    1d46:	4b05      	ldr	r3, [pc, #20]	; (1d5c <ext_irq_init+0x48>)
    1d48:	4798      	blx	r3
    1d4a:	4603      	mov	r3, r0
}
    1d4c:	4618      	mov	r0, r3
    1d4e:	3708      	adds	r7, #8
    1d50:	46bd      	mov	sp, r7
    1d52:	bd80      	pop	{r7, pc}
    1d54:	20000b78 	.word	0x20000b78
    1d58:	00001d61 	.word	0x00001d61
    1d5c:	00004299 	.word	0x00004299

00001d60 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    1d60:	b580      	push	{r7, lr}
    1d62:	b084      	sub	sp, #16
    1d64:	af00      	add	r7, sp, #0
    1d66:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    1d68:	2300      	movs	r3, #0
    1d6a:	73fb      	strb	r3, [r7, #15]
    1d6c:	2309      	movs	r3, #9
    1d6e:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    1d70:	e02a      	b.n	1dc8 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    1d72:	7bba      	ldrb	r2, [r7, #14]
    1d74:	7bfb      	ldrb	r3, [r7, #15]
    1d76:	4413      	add	r3, r2
    1d78:	105b      	asrs	r3, r3, #1
    1d7a:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    1d7c:	7b7b      	ldrb	r3, [r7, #13]
    1d7e:	2b08      	cmp	r3, #8
    1d80:	d827      	bhi.n	1dd2 <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    1d82:	7b7b      	ldrb	r3, [r7, #13]
    1d84:	4a16      	ldr	r2, [pc, #88]	; (1de0 <process_ext_irq+0x80>)
    1d86:	00db      	lsls	r3, r3, #3
    1d88:	4413      	add	r3, r2
    1d8a:	685a      	ldr	r2, [r3, #4]
    1d8c:	687b      	ldr	r3, [r7, #4]
    1d8e:	429a      	cmp	r2, r3
    1d90:	d10b      	bne.n	1daa <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    1d92:	7b7b      	ldrb	r3, [r7, #13]
    1d94:	4a12      	ldr	r2, [pc, #72]	; (1de0 <process_ext_irq+0x80>)
    1d96:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1d9a:	2b00      	cmp	r3, #0
    1d9c:	d01b      	beq.n	1dd6 <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    1d9e:	7b7b      	ldrb	r3, [r7, #13]
    1da0:	4a0f      	ldr	r2, [pc, #60]	; (1de0 <process_ext_irq+0x80>)
    1da2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1da6:	4798      	blx	r3
			}
			return;
    1da8:	e015      	b.n	1dd6 <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    1daa:	7b7b      	ldrb	r3, [r7, #13]
    1dac:	4a0c      	ldr	r2, [pc, #48]	; (1de0 <process_ext_irq+0x80>)
    1dae:	00db      	lsls	r3, r3, #3
    1db0:	4413      	add	r3, r2
    1db2:	685a      	ldr	r2, [r3, #4]
    1db4:	687b      	ldr	r3, [r7, #4]
    1db6:	429a      	cmp	r2, r3
    1db8:	d203      	bcs.n	1dc2 <process_ext_irq+0x62>
			lower = middle + 1;
    1dba:	7b7b      	ldrb	r3, [r7, #13]
    1dbc:	3301      	adds	r3, #1
    1dbe:	73fb      	strb	r3, [r7, #15]
    1dc0:	e002      	b.n	1dc8 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    1dc2:	7b7b      	ldrb	r3, [r7, #13]
    1dc4:	3b01      	subs	r3, #1
    1dc6:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    1dc8:	7bba      	ldrb	r2, [r7, #14]
    1dca:	7bfb      	ldrb	r3, [r7, #15]
    1dcc:	429a      	cmp	r2, r3
    1dce:	d2d0      	bcs.n	1d72 <process_ext_irq+0x12>
    1dd0:	e002      	b.n	1dd8 <process_ext_irq+0x78>
			return;
    1dd2:	bf00      	nop
    1dd4:	e000      	b.n	1dd8 <process_ext_irq+0x78>
			return;
    1dd6:	bf00      	nop
		}
	}
}
    1dd8:	3710      	adds	r7, #16
    1dda:	46bd      	mov	sp, r7
    1ddc:	bd80      	pop	{r7, pc}
    1dde:	bf00      	nop
    1de0:	20000b78 	.word	0x20000b78

00001de4 <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    1de4:	b580      	push	{r7, lr}
    1de6:	b08a      	sub	sp, #40	; 0x28
    1de8:	af00      	add	r7, sp, #0
    1dea:	60f8      	str	r0, [r7, #12]
    1dec:	60b9      	str	r1, [r7, #8]
    1dee:	4613      	mov	r3, r2
    1df0:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    1df2:	68fb      	ldr	r3, [r7, #12]
    1df4:	3b14      	subs	r3, #20
    1df6:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    1df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1dfa:	8b9b      	ldrh	r3, [r3, #28]
    1dfc:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    1dfe:	88fb      	ldrh	r3, [r7, #6]
    1e00:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    1e02:	f248 0301 	movw	r3, #32769	; 0x8001
    1e06:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    1e08:	68bb      	ldr	r3, [r7, #8]
    1e0a:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    1e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1e0e:	f107 0214 	add.w	r2, r7, #20
    1e12:	4611      	mov	r1, r2
    1e14:	4618      	mov	r0, r3
    1e16:	4b06      	ldr	r3, [pc, #24]	; (1e30 <i2c_m_sync_read+0x4c>)
    1e18:	4798      	blx	r3
    1e1a:	6238      	str	r0, [r7, #32]

	if (ret) {
    1e1c:	6a3b      	ldr	r3, [r7, #32]
    1e1e:	2b00      	cmp	r3, #0
    1e20:	d001      	beq.n	1e26 <i2c_m_sync_read+0x42>
		return ret;
    1e22:	6a3b      	ldr	r3, [r7, #32]
    1e24:	e000      	b.n	1e28 <i2c_m_sync_read+0x44>
	}

	return n;
    1e26:	88fb      	ldrh	r3, [r7, #6]
}
    1e28:	4618      	mov	r0, r3
    1e2a:	3728      	adds	r7, #40	; 0x28
    1e2c:	46bd      	mov	sp, r7
    1e2e:	bd80      	pop	{r7, pc}
    1e30:	000061a5 	.word	0x000061a5

00001e34 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    1e34:	b580      	push	{r7, lr}
    1e36:	b08a      	sub	sp, #40	; 0x28
    1e38:	af00      	add	r7, sp, #0
    1e3a:	60f8      	str	r0, [r7, #12]
    1e3c:	60b9      	str	r1, [r7, #8]
    1e3e:	4613      	mov	r3, r2
    1e40:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    1e42:	68fb      	ldr	r3, [r7, #12]
    1e44:	3b14      	subs	r3, #20
    1e46:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    1e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1e4a:	8b9b      	ldrh	r3, [r3, #28]
    1e4c:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    1e4e:	88fb      	ldrh	r3, [r7, #6]
    1e50:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    1e52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    1e56:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    1e58:	68bb      	ldr	r3, [r7, #8]
    1e5a:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    1e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1e5e:	f107 0214 	add.w	r2, r7, #20
    1e62:	4611      	mov	r1, r2
    1e64:	4618      	mov	r0, r3
    1e66:	4b06      	ldr	r3, [pc, #24]	; (1e80 <i2c_m_sync_write+0x4c>)
    1e68:	4798      	blx	r3
    1e6a:	6238      	str	r0, [r7, #32]

	if (ret) {
    1e6c:	6a3b      	ldr	r3, [r7, #32]
    1e6e:	2b00      	cmp	r3, #0
    1e70:	d001      	beq.n	1e76 <i2c_m_sync_write+0x42>
		return ret;
    1e72:	6a3b      	ldr	r3, [r7, #32]
    1e74:	e000      	b.n	1e78 <i2c_m_sync_write+0x44>
	}

	return n;
    1e76:	88fb      	ldrh	r3, [r7, #6]
}
    1e78:	4618      	mov	r0, r3
    1e7a:	3728      	adds	r7, #40	; 0x28
    1e7c:	46bd      	mov	sp, r7
    1e7e:	bd80      	pop	{r7, pc}
    1e80:	000061a5 	.word	0x000061a5

00001e84 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    1e84:	b580      	push	{r7, lr}
    1e86:	b084      	sub	sp, #16
    1e88:	af00      	add	r7, sp, #0
    1e8a:	6078      	str	r0, [r7, #4]
    1e8c:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    1e8e:	687b      	ldr	r3, [r7, #4]
    1e90:	2b00      	cmp	r3, #0
    1e92:	bf14      	ite	ne
    1e94:	2301      	movne	r3, #1
    1e96:	2300      	moveq	r3, #0
    1e98:	b2db      	uxtb	r3, r3
    1e9a:	225e      	movs	r2, #94	; 0x5e
    1e9c:	490c      	ldr	r1, [pc, #48]	; (1ed0 <i2c_m_sync_init+0x4c>)
    1e9e:	4618      	mov	r0, r3
    1ea0:	4b0c      	ldr	r3, [pc, #48]	; (1ed4 <i2c_m_sync_init+0x50>)
    1ea2:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    1ea4:	687b      	ldr	r3, [r7, #4]
    1ea6:	6839      	ldr	r1, [r7, #0]
    1ea8:	4618      	mov	r0, r3
    1eaa:	4b0b      	ldr	r3, [pc, #44]	; (1ed8 <i2c_m_sync_init+0x54>)
    1eac:	4798      	blx	r3
    1eae:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    1eb0:	68fb      	ldr	r3, [r7, #12]
    1eb2:	2b00      	cmp	r3, #0
    1eb4:	d001      	beq.n	1eba <i2c_m_sync_init+0x36>
		return init_status;
    1eb6:	68fb      	ldr	r3, [r7, #12]
    1eb8:	e006      	b.n	1ec8 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    1eba:	687b      	ldr	r3, [r7, #4]
    1ebc:	4a07      	ldr	r2, [pc, #28]	; (1edc <i2c_m_sync_init+0x58>)
    1ebe:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    1ec0:	687b      	ldr	r3, [r7, #4]
    1ec2:	4a07      	ldr	r2, [pc, #28]	; (1ee0 <i2c_m_sync_init+0x5c>)
    1ec4:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    1ec6:	2300      	movs	r3, #0
}
    1ec8:	4618      	mov	r0, r3
    1eca:	3710      	adds	r7, #16
    1ecc:	46bd      	mov	sp, r7
    1ece:	bd80      	pop	{r7, pc}
    1ed0:	00013160 	.word	0x00013160
    1ed4:	00002d4d 	.word	0x00002d4d
    1ed8:	00005fe1 	.word	0x00005fe1
    1edc:	00001de5 	.word	0x00001de5
    1ee0:	00001e35 	.word	0x00001e35

00001ee4 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    1ee4:	b580      	push	{r7, lr}
    1ee6:	b084      	sub	sp, #16
    1ee8:	af00      	add	r7, sp, #0
    1eea:	60f8      	str	r0, [r7, #12]
    1eec:	60b9      	str	r1, [r7, #8]
    1eee:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    1ef0:	68fb      	ldr	r3, [r7, #12]
    1ef2:	2b00      	cmp	r3, #0
    1ef4:	d004      	beq.n	1f00 <pwm_init+0x1c>
    1ef6:	68bb      	ldr	r3, [r7, #8]
    1ef8:	2b00      	cmp	r3, #0
    1efa:	d001      	beq.n	1f00 <pwm_init+0x1c>
    1efc:	2301      	movs	r3, #1
    1efe:	e000      	b.n	1f02 <pwm_init+0x1e>
    1f00:	2300      	movs	r3, #0
    1f02:	f003 0301 	and.w	r3, r3, #1
    1f06:	b2db      	uxtb	r3, r3
    1f08:	2233      	movs	r2, #51	; 0x33
    1f0a:	490a      	ldr	r1, [pc, #40]	; (1f34 <pwm_init+0x50>)
    1f0c:	4618      	mov	r0, r3
    1f0e:	4b0a      	ldr	r3, [pc, #40]	; (1f38 <pwm_init+0x54>)
    1f10:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    1f12:	68fb      	ldr	r3, [r7, #12]
    1f14:	68b9      	ldr	r1, [r7, #8]
    1f16:	4618      	mov	r0, r3
    1f18:	4b08      	ldr	r3, [pc, #32]	; (1f3c <pwm_init+0x58>)
    1f1a:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    1f1c:	68fb      	ldr	r3, [r7, #12]
    1f1e:	4a08      	ldr	r2, [pc, #32]	; (1f40 <pwm_init+0x5c>)
    1f20:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    1f22:	68fb      	ldr	r3, [r7, #12]
    1f24:	4a07      	ldr	r2, [pc, #28]	; (1f44 <pwm_init+0x60>)
    1f26:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    1f28:	2300      	movs	r3, #0
}
    1f2a:	4618      	mov	r0, r3
    1f2c:	3710      	adds	r7, #16
    1f2e:	46bd      	mov	sp, r7
    1f30:	bd80      	pop	{r7, pc}
    1f32:	bf00      	nop
    1f34:	0001317c 	.word	0x0001317c
    1f38:	00002d4d 	.word	0x00002d4d
    1f3c:	000076a9 	.word	0x000076a9
    1f40:	00001f49 	.word	0x00001f49
    1f44:	00001f6d 	.word	0x00001f6d

00001f48 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    1f48:	b580      	push	{r7, lr}
    1f4a:	b084      	sub	sp, #16
    1f4c:	af00      	add	r7, sp, #0
    1f4e:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    1f50:	687b      	ldr	r3, [r7, #4]
    1f52:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    1f54:	68fb      	ldr	r3, [r7, #12]
    1f56:	695b      	ldr	r3, [r3, #20]
    1f58:	2b00      	cmp	r3, #0
    1f5a:	d003      	beq.n	1f64 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    1f5c:	68fb      	ldr	r3, [r7, #12]
    1f5e:	695b      	ldr	r3, [r3, #20]
    1f60:	68f8      	ldr	r0, [r7, #12]
    1f62:	4798      	blx	r3
	}
}
    1f64:	bf00      	nop
    1f66:	3710      	adds	r7, #16
    1f68:	46bd      	mov	sp, r7
    1f6a:	bd80      	pop	{r7, pc}

00001f6c <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    1f6c:	b580      	push	{r7, lr}
    1f6e:	b084      	sub	sp, #16
    1f70:	af00      	add	r7, sp, #0
    1f72:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    1f74:	687b      	ldr	r3, [r7, #4]
    1f76:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    1f78:	68fb      	ldr	r3, [r7, #12]
    1f7a:	699b      	ldr	r3, [r3, #24]
    1f7c:	2b00      	cmp	r3, #0
    1f7e:	d003      	beq.n	1f88 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    1f80:	68fb      	ldr	r3, [r7, #12]
    1f82:	699b      	ldr	r3, [r3, #24]
    1f84:	68f8      	ldr	r0, [r7, #12]
    1f86:	4798      	blx	r3
	}
}
    1f88:	bf00      	nop
    1f8a:	3710      	adds	r7, #16
    1f8c:	46bd      	mov	sp, r7
    1f8e:	bd80      	pop	{r7, pc}

00001f90 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    1f90:	b580      	push	{r7, lr}
    1f92:	b082      	sub	sp, #8
    1f94:	af00      	add	r7, sp, #0
    1f96:	6078      	str	r0, [r7, #4]
    1f98:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    1f9a:	687b      	ldr	r3, [r7, #4]
    1f9c:	2b00      	cmp	r3, #0
    1f9e:	d004      	beq.n	1faa <qspi_sync_init+0x1a>
    1fa0:	683b      	ldr	r3, [r7, #0]
    1fa2:	2b00      	cmp	r3, #0
    1fa4:	d001      	beq.n	1faa <qspi_sync_init+0x1a>
    1fa6:	2301      	movs	r3, #1
    1fa8:	e000      	b.n	1fac <qspi_sync_init+0x1c>
    1faa:	2300      	movs	r3, #0
    1fac:	f003 0301 	and.w	r3, r3, #1
    1fb0:	b2db      	uxtb	r3, r3
    1fb2:	2231      	movs	r2, #49	; 0x31
    1fb4:	4906      	ldr	r1, [pc, #24]	; (1fd0 <qspi_sync_init+0x40>)
    1fb6:	4618      	mov	r0, r3
    1fb8:	4b06      	ldr	r3, [pc, #24]	; (1fd4 <qspi_sync_init+0x44>)
    1fba:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    1fbc:	687b      	ldr	r3, [r7, #4]
    1fbe:	6839      	ldr	r1, [r7, #0]
    1fc0:	4618      	mov	r0, r3
    1fc2:	4b05      	ldr	r3, [pc, #20]	; (1fd8 <qspi_sync_init+0x48>)
    1fc4:	4798      	blx	r3
    1fc6:	4603      	mov	r3, r0
}
    1fc8:	4618      	mov	r0, r3
    1fca:	3708      	adds	r7, #8
    1fcc:	46bd      	mov	sp, r7
    1fce:	bd80      	pop	{r7, pc}
    1fd0:	00013194 	.word	0x00013194
    1fd4:	00002d4d 	.word	0x00002d4d
    1fd8:	0000523d 	.word	0x0000523d

00001fdc <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    1fdc:	b580      	push	{r7, lr}
    1fde:	b082      	sub	sp, #8
    1fe0:	af00      	add	r7, sp, #0
    1fe2:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    1fe4:	687b      	ldr	r3, [r7, #4]
    1fe6:	2b00      	cmp	r3, #0
    1fe8:	bf14      	ite	ne
    1fea:	2301      	movne	r3, #1
    1fec:	2300      	moveq	r3, #0
    1fee:	b2db      	uxtb	r3, r3
    1ff0:	223f      	movs	r2, #63	; 0x3f
    1ff2:	4906      	ldr	r1, [pc, #24]	; (200c <qspi_sync_enable+0x30>)
    1ff4:	4618      	mov	r0, r3
    1ff6:	4b06      	ldr	r3, [pc, #24]	; (2010 <qspi_sync_enable+0x34>)
    1ff8:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    1ffa:	687b      	ldr	r3, [r7, #4]
    1ffc:	4618      	mov	r0, r3
    1ffe:	4b05      	ldr	r3, [pc, #20]	; (2014 <qspi_sync_enable+0x38>)
    2000:	4798      	blx	r3
    2002:	4603      	mov	r3, r0
}
    2004:	4618      	mov	r0, r3
    2006:	3708      	adds	r7, #8
    2008:	46bd      	mov	sp, r7
    200a:	bd80      	pop	{r7, pc}
    200c:	00013194 	.word	0x00013194
    2010:	00002d4d 	.word	0x00002d4d
    2014:	000052b1 	.word	0x000052b1

00002018 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    2018:	b580      	push	{r7, lr}
    201a:	b082      	sub	sp, #8
    201c:	af00      	add	r7, sp, #0
    201e:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    2020:	687b      	ldr	r3, [r7, #4]
    2022:	2b00      	cmp	r3, #0
    2024:	bf14      	ite	ne
    2026:	2301      	movne	r3, #1
    2028:	2300      	moveq	r3, #0
    202a:	b2db      	uxtb	r3, r3
    202c:	2246      	movs	r2, #70	; 0x46
    202e:	4906      	ldr	r1, [pc, #24]	; (2048 <qspi_sync_disable+0x30>)
    2030:	4618      	mov	r0, r3
    2032:	4b06      	ldr	r3, [pc, #24]	; (204c <qspi_sync_disable+0x34>)
    2034:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    2036:	687b      	ldr	r3, [r7, #4]
    2038:	4618      	mov	r0, r3
    203a:	4b05      	ldr	r3, [pc, #20]	; (2050 <qspi_sync_disable+0x38>)
    203c:	4798      	blx	r3
    203e:	4603      	mov	r3, r0
}
    2040:	4618      	mov	r0, r3
    2042:	3708      	adds	r7, #8
    2044:	46bd      	mov	sp, r7
    2046:	bd80      	pop	{r7, pc}
    2048:	00013194 	.word	0x00013194
    204c:	00002d4d 	.word	0x00002d4d
    2050:	000052d5 	.word	0x000052d5

00002054 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    2054:	b580      	push	{r7, lr}
    2056:	b082      	sub	sp, #8
    2058:	af00      	add	r7, sp, #0
    205a:	6078      	str	r0, [r7, #4]
    205c:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    205e:	687b      	ldr	r3, [r7, #4]
    2060:	2b00      	cmp	r3, #0
    2062:	d004      	beq.n	206e <qspi_sync_serial_run_command+0x1a>
    2064:	683b      	ldr	r3, [r7, #0]
    2066:	2b00      	cmp	r3, #0
    2068:	d001      	beq.n	206e <qspi_sync_serial_run_command+0x1a>
    206a:	2301      	movs	r3, #1
    206c:	e000      	b.n	2070 <qspi_sync_serial_run_command+0x1c>
    206e:	2300      	movs	r3, #0
    2070:	f003 0301 	and.w	r3, r3, #1
    2074:	b2db      	uxtb	r3, r3
    2076:	224d      	movs	r2, #77	; 0x4d
    2078:	4906      	ldr	r1, [pc, #24]	; (2094 <qspi_sync_serial_run_command+0x40>)
    207a:	4618      	mov	r0, r3
    207c:	4b06      	ldr	r3, [pc, #24]	; (2098 <qspi_sync_serial_run_command+0x44>)
    207e:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    2080:	687b      	ldr	r3, [r7, #4]
    2082:	6839      	ldr	r1, [r7, #0]
    2084:	4618      	mov	r0, r3
    2086:	4b05      	ldr	r3, [pc, #20]	; (209c <qspi_sync_serial_run_command+0x48>)
    2088:	4798      	blx	r3
    208a:	4603      	mov	r3, r0
}
    208c:	4618      	mov	r0, r3
    208e:	3708      	adds	r7, #8
    2090:	46bd      	mov	sp, r7
    2092:	bd80      	pop	{r7, pc}
    2094:	00013194 	.word	0x00013194
    2098:	00002d4d 	.word	0x00002d4d
    209c:	00005421 	.word	0x00005421

000020a0 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    20a0:	b580      	push	{r7, lr}
    20a2:	b084      	sub	sp, #16
    20a4:	af00      	add	r7, sp, #0
    20a6:	6078      	str	r0, [r7, #4]
    20a8:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    20aa:	2300      	movs	r3, #0
    20ac:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    20ae:	687b      	ldr	r3, [r7, #4]
    20b0:	2b00      	cmp	r3, #0
    20b2:	d004      	beq.n	20be <spi_m_sync_init+0x1e>
    20b4:	683b      	ldr	r3, [r7, #0]
    20b6:	2b00      	cmp	r3, #0
    20b8:	d001      	beq.n	20be <spi_m_sync_init+0x1e>
    20ba:	2301      	movs	r3, #1
    20bc:	e000      	b.n	20c0 <spi_m_sync_init+0x20>
    20be:	2300      	movs	r3, #0
    20c0:	f003 0301 	and.w	r3, r3, #1
    20c4:	b2db      	uxtb	r3, r3
    20c6:	2240      	movs	r2, #64	; 0x40
    20c8:	4910      	ldr	r1, [pc, #64]	; (210c <spi_m_sync_init+0x6c>)
    20ca:	4618      	mov	r0, r3
    20cc:	4b10      	ldr	r3, [pc, #64]	; (2110 <spi_m_sync_init+0x70>)
    20ce:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    20d0:	687b      	ldr	r3, [r7, #4]
    20d2:	683a      	ldr	r2, [r7, #0]
    20d4:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    20d6:	687b      	ldr	r3, [r7, #4]
    20d8:	3304      	adds	r3, #4
    20da:	6839      	ldr	r1, [r7, #0]
    20dc:	4618      	mov	r0, r3
    20de:	4b0d      	ldr	r3, [pc, #52]	; (2114 <spi_m_sync_init+0x74>)
    20e0:	4798      	blx	r3
    20e2:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    20e4:	68fb      	ldr	r3, [r7, #12]
    20e6:	2b00      	cmp	r3, #0
    20e8:	da01      	bge.n	20ee <spi_m_sync_init+0x4e>
		return rc;
    20ea:	68fb      	ldr	r3, [r7, #12]
    20ec:	e00a      	b.n	2104 <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    20ee:	687b      	ldr	r3, [r7, #4]
    20f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    20f4:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    20f6:	687b      	ldr	r3, [r7, #4]
    20f8:	4a07      	ldr	r2, [pc, #28]	; (2118 <spi_m_sync_init+0x78>)
    20fa:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    20fc:	687b      	ldr	r3, [r7, #4]
    20fe:	4a07      	ldr	r2, [pc, #28]	; (211c <spi_m_sync_init+0x7c>)
    2100:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    2102:	2300      	movs	r3, #0
}
    2104:	4618      	mov	r0, r3
    2106:	3710      	adds	r7, #16
    2108:	46bd      	mov	sp, r7
    210a:	bd80      	pop	{r7, pc}
    210c:	000131b0 	.word	0x000131b0
    2110:	00002d4d 	.word	0x00002d4d
    2114:	000065ad 	.word	0x000065ad
    2118:	00002121 	.word	0x00002121
    211c:	00002179 	.word	0x00002179

00002120 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    2120:	b580      	push	{r7, lr}
    2122:	b088      	sub	sp, #32
    2124:	af00      	add	r7, sp, #0
    2126:	60f8      	str	r0, [r7, #12]
    2128:	60b9      	str	r1, [r7, #8]
    212a:	4613      	mov	r3, r2
    212c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    212e:	68fb      	ldr	r3, [r7, #12]
    2130:	2b00      	cmp	r3, #0
    2132:	bf14      	ite	ne
    2134:	2301      	movne	r3, #1
    2136:	2300      	moveq	r3, #0
    2138:	b2db      	uxtb	r3, r3
    213a:	2287      	movs	r2, #135	; 0x87
    213c:	490b      	ldr	r1, [pc, #44]	; (216c <_spi_m_sync_io_read+0x4c>)
    213e:	4618      	mov	r0, r3
    2140:	4b0b      	ldr	r3, [pc, #44]	; (2170 <_spi_m_sync_io_read+0x50>)
    2142:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2144:	68fb      	ldr	r3, [r7, #12]
    2146:	3b0c      	subs	r3, #12
    2148:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    214a:	68bb      	ldr	r3, [r7, #8]
    214c:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    214e:	2300      	movs	r3, #0
    2150:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    2152:	88fb      	ldrh	r3, [r7, #6]
    2154:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    2156:	f107 0310 	add.w	r3, r7, #16
    215a:	4619      	mov	r1, r3
    215c:	69f8      	ldr	r0, [r7, #28]
    215e:	4b05      	ldr	r3, [pc, #20]	; (2174 <_spi_m_sync_io_read+0x54>)
    2160:	4798      	blx	r3
    2162:	4603      	mov	r3, r0
}
    2164:	4618      	mov	r0, r3
    2166:	3720      	adds	r7, #32
    2168:	46bd      	mov	sp, r7
    216a:	bd80      	pop	{r7, pc}
    216c:	000131b0 	.word	0x000131b0
    2170:	00002d4d 	.word	0x00002d4d
    2174:	000021d1 	.word	0x000021d1

00002178 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    2178:	b580      	push	{r7, lr}
    217a:	b088      	sub	sp, #32
    217c:	af00      	add	r7, sp, #0
    217e:	60f8      	str	r0, [r7, #12]
    2180:	60b9      	str	r1, [r7, #8]
    2182:	4613      	mov	r3, r2
    2184:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    2186:	68fb      	ldr	r3, [r7, #12]
    2188:	2b00      	cmp	r3, #0
    218a:	bf14      	ite	ne
    218c:	2301      	movne	r3, #1
    218e:	2300      	moveq	r3, #0
    2190:	b2db      	uxtb	r3, r3
    2192:	22a3      	movs	r2, #163	; 0xa3
    2194:	490b      	ldr	r1, [pc, #44]	; (21c4 <_spi_m_sync_io_write+0x4c>)
    2196:	4618      	mov	r0, r3
    2198:	4b0b      	ldr	r3, [pc, #44]	; (21c8 <_spi_m_sync_io_write+0x50>)
    219a:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    219c:	68fb      	ldr	r3, [r7, #12]
    219e:	3b0c      	subs	r3, #12
    21a0:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    21a2:	2300      	movs	r3, #0
    21a4:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    21a6:	68bb      	ldr	r3, [r7, #8]
    21a8:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    21aa:	88fb      	ldrh	r3, [r7, #6]
    21ac:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    21ae:	f107 0310 	add.w	r3, r7, #16
    21b2:	4619      	mov	r1, r3
    21b4:	69f8      	ldr	r0, [r7, #28]
    21b6:	4b05      	ldr	r3, [pc, #20]	; (21cc <_spi_m_sync_io_write+0x54>)
    21b8:	4798      	blx	r3
    21ba:	4603      	mov	r3, r0
}
    21bc:	4618      	mov	r0, r3
    21be:	3720      	adds	r7, #32
    21c0:	46bd      	mov	sp, r7
    21c2:	bd80      	pop	{r7, pc}
    21c4:	000131b0 	.word	0x000131b0
    21c8:	00002d4d 	.word	0x00002d4d
    21cc:	000021d1 	.word	0x000021d1

000021d0 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    21d0:	b580      	push	{r7, lr}
    21d2:	b086      	sub	sp, #24
    21d4:	af00      	add	r7, sp, #0
    21d6:	6078      	str	r0, [r7, #4]
    21d8:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    21da:	687b      	ldr	r3, [r7, #4]
    21dc:	2b00      	cmp	r3, #0
    21de:	d004      	beq.n	21ea <spi_m_sync_transfer+0x1a>
    21e0:	683b      	ldr	r3, [r7, #0]
    21e2:	2b00      	cmp	r3, #0
    21e4:	d001      	beq.n	21ea <spi_m_sync_transfer+0x1a>
    21e6:	2301      	movs	r3, #1
    21e8:	e000      	b.n	21ec <spi_m_sync_transfer+0x1c>
    21ea:	2300      	movs	r3, #0
    21ec:	f003 0301 	and.w	r3, r3, #1
    21f0:	b2db      	uxtb	r3, r3
    21f2:	22b3      	movs	r2, #179	; 0xb3
    21f4:	490c      	ldr	r1, [pc, #48]	; (2228 <spi_m_sync_transfer+0x58>)
    21f6:	4618      	mov	r0, r3
    21f8:	4b0c      	ldr	r3, [pc, #48]	; (222c <spi_m_sync_transfer+0x5c>)
    21fa:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    21fc:	683b      	ldr	r3, [r7, #0]
    21fe:	681b      	ldr	r3, [r3, #0]
    2200:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    2202:	683b      	ldr	r3, [r7, #0]
    2204:	685b      	ldr	r3, [r3, #4]
    2206:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    2208:	683b      	ldr	r3, [r7, #0]
    220a:	689b      	ldr	r3, [r3, #8]
    220c:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    220e:	687b      	ldr	r3, [r7, #4]
    2210:	3304      	adds	r3, #4
    2212:	f107 020c 	add.w	r2, r7, #12
    2216:	4611      	mov	r1, r2
    2218:	4618      	mov	r0, r3
    221a:	4b05      	ldr	r3, [pc, #20]	; (2230 <spi_m_sync_transfer+0x60>)
    221c:	4798      	blx	r3
    221e:	4603      	mov	r3, r0
}
    2220:	4618      	mov	r0, r3
    2222:	3718      	adds	r7, #24
    2224:	46bd      	mov	sp, r7
    2226:	bd80      	pop	{r7, pc}
    2228:	000131b0 	.word	0x000131b0
    222c:	00002d4d 	.word	0x00002d4d
    2230:	0000680d 	.word	0x0000680d

00002234 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    2234:	b480      	push	{r7}
    2236:	b083      	sub	sp, #12
    2238:	af00      	add	r7, sp, #0
    223a:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    223c:	687b      	ldr	r3, [r7, #4]
    223e:	681b      	ldr	r3, [r3, #0]
}
    2240:	4618      	mov	r0, r3
    2242:	370c      	adds	r7, #12
    2244:	46bd      	mov	sp, r7
    2246:	f85d 7b04 	ldr.w	r7, [sp], #4
    224a:	4770      	bx	lr

0000224c <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    224c:	b480      	push	{r7}
    224e:	b083      	sub	sp, #12
    2250:	af00      	add	r7, sp, #0
    2252:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    2254:	687b      	ldr	r3, [r7, #4]
    2256:	2b00      	cmp	r3, #0
    2258:	d002      	beq.n	2260 <list_get_next_element+0x14>
    225a:	687b      	ldr	r3, [r7, #4]
    225c:	681b      	ldr	r3, [r3, #0]
    225e:	e000      	b.n	2262 <list_get_next_element+0x16>
    2260:	2300      	movs	r3, #0
}
    2262:	4618      	mov	r0, r3
    2264:	370c      	adds	r7, #12
    2266:	46bd      	mov	sp, r7
    2268:	f85d 7b04 	ldr.w	r7, [sp], #4
    226c:	4770      	bx	lr
	...

00002270 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    2270:	b580      	push	{r7, lr}
    2272:	b084      	sub	sp, #16
    2274:	af00      	add	r7, sp, #0
    2276:	60f8      	str	r0, [r7, #12]
    2278:	60b9      	str	r1, [r7, #8]
    227a:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw && func);
    227c:	68fb      	ldr	r3, [r7, #12]
    227e:	2b00      	cmp	r3, #0
    2280:	d007      	beq.n	2292 <timer_init+0x22>
    2282:	68bb      	ldr	r3, [r7, #8]
    2284:	2b00      	cmp	r3, #0
    2286:	d004      	beq.n	2292 <timer_init+0x22>
    2288:	687b      	ldr	r3, [r7, #4]
    228a:	2b00      	cmp	r3, #0
    228c:	d001      	beq.n	2292 <timer_init+0x22>
    228e:	2301      	movs	r3, #1
    2290:	e000      	b.n	2294 <timer_init+0x24>
    2292:	2300      	movs	r3, #0
    2294:	f003 0301 	and.w	r3, r3, #1
    2298:	b2db      	uxtb	r3, r3
    229a:	223b      	movs	r2, #59	; 0x3b
    229c:	490c      	ldr	r1, [pc, #48]	; (22d0 <timer_init+0x60>)
    229e:	4618      	mov	r0, r3
    22a0:	4b0c      	ldr	r3, [pc, #48]	; (22d4 <timer_init+0x64>)
    22a2:	4798      	blx	r3
	descr->func = func;
    22a4:	68fb      	ldr	r3, [r7, #12]
    22a6:	687a      	ldr	r2, [r7, #4]
    22a8:	601a      	str	r2, [r3, #0]
	descr->func->init(&descr->device, hw);
    22aa:	68fb      	ldr	r3, [r7, #12]
    22ac:	681b      	ldr	r3, [r3, #0]
    22ae:	681b      	ldr	r3, [r3, #0]
    22b0:	68fa      	ldr	r2, [r7, #12]
    22b2:	3204      	adds	r2, #4
    22b4:	68b9      	ldr	r1, [r7, #8]
    22b6:	4610      	mov	r0, r2
    22b8:	4798      	blx	r3
	descr->time                           = 0;
    22ba:	68fb      	ldr	r3, [r7, #12]
    22bc:	2200      	movs	r2, #0
    22be:	615a      	str	r2, [r3, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    22c0:	68fb      	ldr	r3, [r7, #12]
    22c2:	4a05      	ldr	r2, [pc, #20]	; (22d8 <timer_init+0x68>)
    22c4:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
    22c6:	2300      	movs	r3, #0
}
    22c8:	4618      	mov	r0, r3
    22ca:	3710      	adds	r7, #16
    22cc:	46bd      	mov	sp, r7
    22ce:	bd80      	pop	{r7, pc}
    22d0:	000131cc 	.word	0x000131cc
    22d4:	00002d4d 	.word	0x00002d4d
    22d8:	0000238d 	.word	0x0000238d

000022dc <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    22dc:	b580      	push	{r7, lr}
    22de:	b088      	sub	sp, #32
    22e0:	af00      	add	r7, sp, #0
    22e2:	60f8      	str	r0, [r7, #12]
    22e4:	60b9      	str	r1, [r7, #8]
    22e6:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    22e8:	2300      	movs	r3, #0
    22ea:	61bb      	str	r3, [r7, #24]
    22ec:	68f8      	ldr	r0, [r7, #12]
    22ee:	4b23      	ldr	r3, [pc, #140]	; (237c <timer_add_timer_task+0xa0>)
    22f0:	4798      	blx	r3
    22f2:	6138      	str	r0, [r7, #16]

	if (!head) {
    22f4:	693b      	ldr	r3, [r7, #16]
    22f6:	2b00      	cmp	r3, #0
    22f8:	d104      	bne.n	2304 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    22fa:	68b9      	ldr	r1, [r7, #8]
    22fc:	68f8      	ldr	r0, [r7, #12]
    22fe:	4b20      	ldr	r3, [pc, #128]	; (2380 <timer_add_timer_task+0xa4>)
    2300:	4798      	blx	r3
		return;
    2302:	e037      	b.n	2374 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2304:	693b      	ldr	r3, [r7, #16]
    2306:	61fb      	str	r3, [r7, #28]
    2308:	e022      	b.n	2350 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    230a:	69fb      	ldr	r3, [r7, #28]
    230c:	685a      	ldr	r2, [r3, #4]
    230e:	687b      	ldr	r3, [r7, #4]
    2310:	429a      	cmp	r2, r3
    2312:	d808      	bhi.n	2326 <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    2314:	69fb      	ldr	r3, [r7, #28]
    2316:	689a      	ldr	r2, [r3, #8]
    2318:	69fb      	ldr	r3, [r7, #28]
    231a:	6859      	ldr	r1, [r3, #4]
    231c:	687b      	ldr	r3, [r7, #4]
    231e:	1acb      	subs	r3, r1, r3
    2320:	4413      	add	r3, r2
    2322:	617b      	str	r3, [r7, #20]
    2324:	e009      	b.n	233a <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    2326:	69fb      	ldr	r3, [r7, #28]
    2328:	689a      	ldr	r2, [r3, #8]
    232a:	69fb      	ldr	r3, [r7, #28]
    232c:	685b      	ldr	r3, [r3, #4]
    232e:	441a      	add	r2, r3
    2330:	687b      	ldr	r3, [r7, #4]
    2332:	425b      	negs	r3, r3
    2334:	4413      	add	r3, r2
    2336:	3301      	adds	r3, #1
    2338:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    233a:	68bb      	ldr	r3, [r7, #8]
    233c:	689a      	ldr	r2, [r3, #8]
    233e:	697b      	ldr	r3, [r7, #20]
    2340:	429a      	cmp	r2, r3
    2342:	d909      	bls.n	2358 <timer_add_timer_task+0x7c>
			break;
		prev = it;
    2344:	69fb      	ldr	r3, [r7, #28]
    2346:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2348:	69f8      	ldr	r0, [r7, #28]
    234a:	4b0e      	ldr	r3, [pc, #56]	; (2384 <timer_add_timer_task+0xa8>)
    234c:	4798      	blx	r3
    234e:	61f8      	str	r0, [r7, #28]
    2350:	69fb      	ldr	r3, [r7, #28]
    2352:	2b00      	cmp	r3, #0
    2354:	d1d9      	bne.n	230a <timer_add_timer_task+0x2e>
    2356:	e000      	b.n	235a <timer_add_timer_task+0x7e>
			break;
    2358:	bf00      	nop
	}

	if (it == head) {
    235a:	69fa      	ldr	r2, [r7, #28]
    235c:	693b      	ldr	r3, [r7, #16]
    235e:	429a      	cmp	r2, r3
    2360:	d104      	bne.n	236c <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    2362:	68b9      	ldr	r1, [r7, #8]
    2364:	68f8      	ldr	r0, [r7, #12]
    2366:	4b06      	ldr	r3, [pc, #24]	; (2380 <timer_add_timer_task+0xa4>)
    2368:	4798      	blx	r3
    236a:	e003      	b.n	2374 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    236c:	68b9      	ldr	r1, [r7, #8]
    236e:	69b8      	ldr	r0, [r7, #24]
    2370:	4b05      	ldr	r3, [pc, #20]	; (2388 <timer_add_timer_task+0xac>)
    2372:	4798      	blx	r3
	}
}
    2374:	3720      	adds	r7, #32
    2376:	46bd      	mov	sp, r7
    2378:	bd80      	pop	{r7, pc}
    237a:	bf00      	nop
    237c:	00002235 	.word	0x00002235
    2380:	00002dad 	.word	0x00002dad
    2384:	0000224d 	.word	0x0000224d
    2388:	00002e05 	.word	0x00002e05

0000238c <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    238c:	b580      	push	{r7, lr}
    238e:	b086      	sub	sp, #24
    2390:	af00      	add	r7, sp, #0
    2392:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    2394:	687b      	ldr	r3, [r7, #4]
    2396:	3b04      	subs	r3, #4
    2398:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    239a:	693b      	ldr	r3, [r7, #16]
    239c:	3318      	adds	r3, #24
    239e:	4618      	mov	r0, r3
    23a0:	4b27      	ldr	r3, [pc, #156]	; (2440 <timer_process_counted+0xb4>)
    23a2:	4798      	blx	r3
    23a4:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    23a6:	693b      	ldr	r3, [r7, #16]
    23a8:	695b      	ldr	r3, [r3, #20]
    23aa:	1c5a      	adds	r2, r3, #1
    23ac:	693b      	ldr	r3, [r7, #16]
    23ae:	615a      	str	r2, [r3, #20]
    23b0:	693b      	ldr	r3, [r7, #16]
    23b2:	695b      	ldr	r3, [r3, #20]
    23b4:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    23b6:	693b      	ldr	r3, [r7, #16]
    23b8:	7f1b      	ldrb	r3, [r3, #28]
    23ba:	b2db      	uxtb	r3, r3
    23bc:	f003 0301 	and.w	r3, r3, #1
    23c0:	2b00      	cmp	r3, #0
    23c2:	d106      	bne.n	23d2 <timer_process_counted+0x46>
    23c4:	693b      	ldr	r3, [r7, #16]
    23c6:	7f1b      	ldrb	r3, [r3, #28]
    23c8:	b2db      	uxtb	r3, r3
    23ca:	f003 0302 	and.w	r3, r3, #2
    23ce:	2b00      	cmp	r3, #0
    23d0:	d027      	beq.n	2422 <timer_process_counted+0x96>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    23d2:	693b      	ldr	r3, [r7, #16]
    23d4:	7f1b      	ldrb	r3, [r3, #28]
    23d6:	b2db      	uxtb	r3, r3
    23d8:	f043 0302 	orr.w	r3, r3, #2
    23dc:	b2da      	uxtb	r2, r3
    23de:	693b      	ldr	r3, [r7, #16]
    23e0:	771a      	strb	r2, [r3, #28]
		return;
    23e2:	e029      	b.n	2438 <timer_process_counted+0xac>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    23e4:	697b      	ldr	r3, [r7, #20]
    23e6:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    23e8:	693b      	ldr	r3, [r7, #16]
    23ea:	3318      	adds	r3, #24
    23ec:	4618      	mov	r0, r3
    23ee:	4b15      	ldr	r3, [pc, #84]	; (2444 <timer_process_counted+0xb8>)
    23f0:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    23f2:	68bb      	ldr	r3, [r7, #8]
    23f4:	7c1b      	ldrb	r3, [r3, #16]
    23f6:	2b01      	cmp	r3, #1
    23f8:	d109      	bne.n	240e <timer_process_counted+0x82>
			tmp->time_label = time;
    23fa:	68bb      	ldr	r3, [r7, #8]
    23fc:	68fa      	ldr	r2, [r7, #12]
    23fe:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    2400:	693b      	ldr	r3, [r7, #16]
    2402:	3318      	adds	r3, #24
    2404:	68fa      	ldr	r2, [r7, #12]
    2406:	68b9      	ldr	r1, [r7, #8]
    2408:	4618      	mov	r0, r3
    240a:	4b0f      	ldr	r3, [pc, #60]	; (2448 <timer_process_counted+0xbc>)
    240c:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    240e:	693b      	ldr	r3, [r7, #16]
    2410:	3318      	adds	r3, #24
    2412:	4618      	mov	r0, r3
    2414:	4b0a      	ldr	r3, [pc, #40]	; (2440 <timer_process_counted+0xb4>)
    2416:	4798      	blx	r3
    2418:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    241a:	68bb      	ldr	r3, [r7, #8]
    241c:	68db      	ldr	r3, [r3, #12]
    241e:	68b8      	ldr	r0, [r7, #8]
    2420:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    2422:	697b      	ldr	r3, [r7, #20]
    2424:	2b00      	cmp	r3, #0
    2426:	d007      	beq.n	2438 <timer_process_counted+0xac>
    2428:	697b      	ldr	r3, [r7, #20]
    242a:	685b      	ldr	r3, [r3, #4]
    242c:	68fa      	ldr	r2, [r7, #12]
    242e:	1ad2      	subs	r2, r2, r3
    2430:	697b      	ldr	r3, [r7, #20]
    2432:	689b      	ldr	r3, [r3, #8]
    2434:	429a      	cmp	r2, r3
    2436:	d2d5      	bcs.n	23e4 <timer_process_counted+0x58>
	}
}
    2438:	3718      	adds	r7, #24
    243a:	46bd      	mov	sp, r7
    243c:	bd80      	pop	{r7, pc}
    243e:	bf00      	nop
    2440:	00002235 	.word	0x00002235
    2444:	00002ea5 	.word	0x00002ea5
    2448:	000022dd 	.word	0x000022dd

0000244c <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    244c:	b480      	push	{r7}
    244e:	b085      	sub	sp, #20
    2450:	af00      	add	r7, sp, #0
    2452:	4603      	mov	r3, r0
    2454:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2456:	2300      	movs	r3, #0
    2458:	73fb      	strb	r3, [r7, #15]
    245a:	e029      	b.n	24b0 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    245c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2460:	4a19      	ldr	r2, [pc, #100]	; (24c8 <_usb_d_find_ep+0x7c>)
    2462:	015b      	lsls	r3, r3, #5
    2464:	4413      	add	r3, r2
    2466:	3301      	adds	r3, #1
    2468:	781b      	ldrb	r3, [r3, #0]
    246a:	79fa      	ldrb	r2, [r7, #7]
    246c:	429a      	cmp	r2, r3
    246e:	d102      	bne.n	2476 <_usb_d_find_ep+0x2a>
			return i;
    2470:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2474:	e022      	b.n	24bc <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    2476:	f997 300f 	ldrsb.w	r3, [r7, #15]
    247a:	4a13      	ldr	r2, [pc, #76]	; (24c8 <_usb_d_find_ep+0x7c>)
    247c:	015b      	lsls	r3, r3, #5
    247e:	4413      	add	r3, r2
    2480:	781b      	ldrb	r3, [r3, #0]
    2482:	2b00      	cmp	r3, #0
    2484:	d10e      	bne.n	24a4 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    2486:	79fb      	ldrb	r3, [r7, #7]
    2488:	f003 030f 	and.w	r3, r3, #15
    248c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2490:	490d      	ldr	r1, [pc, #52]	; (24c8 <_usb_d_find_ep+0x7c>)
    2492:	0152      	lsls	r2, r2, #5
    2494:	440a      	add	r2, r1
    2496:	3201      	adds	r2, #1
    2498:	7812      	ldrb	r2, [r2, #0]
    249a:	4293      	cmp	r3, r2
    249c:	d102      	bne.n	24a4 <_usb_d_find_ep+0x58>
			return i;
    249e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    24a2:	e00b      	b.n	24bc <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    24a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    24a8:	b2db      	uxtb	r3, r3
    24aa:	3301      	adds	r3, #1
    24ac:	b2db      	uxtb	r3, r3
    24ae:	73fb      	strb	r3, [r7, #15]
    24b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    24b4:	2b03      	cmp	r3, #3
    24b6:	ddd1      	ble.n	245c <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    24b8:	f04f 33ff 	mov.w	r3, #4294967295
}
    24bc:	4618      	mov	r0, r3
    24be:	3714      	adds	r7, #20
    24c0:	46bd      	mov	sp, r7
    24c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    24c6:	4770      	bx	lr
    24c8:	20000bc0 	.word	0x20000bc0

000024cc <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    24cc:	b580      	push	{r7, lr}
    24ce:	b088      	sub	sp, #32
    24d0:	af00      	add	r7, sp, #0
    24d2:	60ba      	str	r2, [r7, #8]
    24d4:	607b      	str	r3, [r7, #4]
    24d6:	4603      	mov	r3, r0
    24d8:	73fb      	strb	r3, [r7, #15]
    24da:	460b      	mov	r3, r1
    24dc:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    24de:	68bb      	ldr	r3, [r7, #8]
    24e0:	617b      	str	r3, [r7, #20]
    24e2:	687b      	ldr	r3, [r7, #4]
    24e4:	61bb      	str	r3, [r7, #24]
    24e6:	7bbb      	ldrb	r3, [r7, #14]
    24e8:	2b00      	cmp	r3, #0
    24ea:	d004      	beq.n	24f6 <_usb_d_trans+0x2a>
    24ec:	7bfb      	ldrb	r3, [r7, #15]
    24ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
    24f2:	b2db      	uxtb	r3, r3
    24f4:	e003      	b.n	24fe <_usb_d_trans+0x32>
    24f6:	7bfb      	ldrb	r3, [r7, #15]
    24f8:	f003 030f 	and.w	r3, r3, #15
    24fc:	b2db      	uxtb	r3, r3
    24fe:	773b      	strb	r3, [r7, #28]
    2500:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    2504:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    2506:	f107 0314 	add.w	r3, r7, #20
    250a:	4618      	mov	r0, r3
    250c:	4b03      	ldr	r3, [pc, #12]	; (251c <_usb_d_trans+0x50>)
    250e:	4798      	blx	r3
    2510:	4603      	mov	r3, r0
}
    2512:	4618      	mov	r0, r3
    2514:	3720      	adds	r7, #32
    2516:	46bd      	mov	sp, r7
    2518:	bd80      	pop	{r7, pc}
    251a:	bf00      	nop
    251c:	0000a1ed 	.word	0x0000a1ed

00002520 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    2520:	b480      	push	{r7}
    2522:	b085      	sub	sp, #20
    2524:	af00      	add	r7, sp, #0
    2526:	60f8      	str	r0, [r7, #12]
    2528:	60b9      	str	r1, [r7, #8]
    252a:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    252c:	2300      	movs	r3, #0
}
    252e:	4618      	mov	r0, r3
    2530:	3714      	adds	r7, #20
    2532:	46bd      	mov	sp, r7
    2534:	f85d 7b04 	ldr.w	r7, [sp], #4
    2538:	4770      	bx	lr
	...

0000253c <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    253c:	b580      	push	{r7, lr}
    253e:	b086      	sub	sp, #24
    2540:	af00      	add	r7, sp, #0
    2542:	4603      	mov	r3, r0
    2544:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2546:	79fb      	ldrb	r3, [r7, #7]
    2548:	4618      	mov	r0, r3
    254a:	4b2a      	ldr	r3, [pc, #168]	; (25f4 <usb_d_cb_trans_setup+0xb8>)
    254c:	4798      	blx	r3
    254e:	4603      	mov	r3, r0
    2550:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2552:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2556:	015b      	lsls	r3, r3, #5
    2558:	4a27      	ldr	r2, [pc, #156]	; (25f8 <usb_d_cb_trans_setup+0xbc>)
    255a:	4413      	add	r3, r2
    255c:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    255e:	693b      	ldr	r3, [r7, #16]
    2560:	330c      	adds	r3, #12
    2562:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    2564:	79fb      	ldrb	r3, [r7, #7]
    2566:	68f9      	ldr	r1, [r7, #12]
    2568:	4618      	mov	r0, r3
    256a:	4b24      	ldr	r3, [pc, #144]	; (25fc <usb_d_cb_trans_setup+0xc0>)
    256c:	4798      	blx	r3
    256e:	4603      	mov	r3, r0
    2570:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    2572:	7afb      	ldrb	r3, [r7, #11]
    2574:	2b08      	cmp	r3, #8
    2576:	d00d      	beq.n	2594 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2578:	79fb      	ldrb	r3, [r7, #7]
    257a:	2101      	movs	r1, #1
    257c:	4618      	mov	r0, r3
    257e:	4b20      	ldr	r3, [pc, #128]	; (2600 <usb_d_cb_trans_setup+0xc4>)
    2580:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    2582:	79fb      	ldrb	r3, [r7, #7]
    2584:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2588:	b2db      	uxtb	r3, r3
    258a:	2101      	movs	r1, #1
    258c:	4618      	mov	r0, r3
    258e:	4b1c      	ldr	r3, [pc, #112]	; (2600 <usb_d_cb_trans_setup+0xc4>)
    2590:	4798      	blx	r3
		return;
    2592:	e02b      	b.n	25ec <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2594:	79fb      	ldrb	r3, [r7, #7]
    2596:	2100      	movs	r1, #0
    2598:	4618      	mov	r0, r3
    259a:	4b19      	ldr	r3, [pc, #100]	; (2600 <usb_d_cb_trans_setup+0xc4>)
    259c:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    259e:	79fb      	ldrb	r3, [r7, #7]
    25a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    25a4:	b2db      	uxtb	r3, r3
    25a6:	2100      	movs	r1, #0
    25a8:	4618      	mov	r0, r3
    25aa:	4b15      	ldr	r3, [pc, #84]	; (2600 <usb_d_cb_trans_setup+0xc4>)
    25ac:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    25ae:	693b      	ldr	r3, [r7, #16]
    25b0:	2201      	movs	r2, #1
    25b2:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    25b4:	693b      	ldr	r3, [r7, #16]
    25b6:	695b      	ldr	r3, [r3, #20]
    25b8:	79fa      	ldrb	r2, [r7, #7]
    25ba:	68f9      	ldr	r1, [r7, #12]
    25bc:	4610      	mov	r0, r2
    25be:	4798      	blx	r3
    25c0:	4603      	mov	r3, r0
    25c2:	f083 0301 	eor.w	r3, r3, #1
    25c6:	b2db      	uxtb	r3, r3
    25c8:	2b00      	cmp	r3, #0
    25ca:	d00f      	beq.n	25ec <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    25cc:	693b      	ldr	r3, [r7, #16]
    25ce:	2205      	movs	r2, #5
    25d0:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    25d2:	79fb      	ldrb	r3, [r7, #7]
    25d4:	2101      	movs	r1, #1
    25d6:	4618      	mov	r0, r3
    25d8:	4b09      	ldr	r3, [pc, #36]	; (2600 <usb_d_cb_trans_setup+0xc4>)
    25da:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    25dc:	79fb      	ldrb	r3, [r7, #7]
    25de:	f063 037f 	orn	r3, r3, #127	; 0x7f
    25e2:	b2db      	uxtb	r3, r3
    25e4:	2101      	movs	r1, #1
    25e6:	4618      	mov	r0, r3
    25e8:	4b05      	ldr	r3, [pc, #20]	; (2600 <usb_d_cb_trans_setup+0xc4>)
    25ea:	4798      	blx	r3
	}
}
    25ec:	3718      	adds	r7, #24
    25ee:	46bd      	mov	sp, r7
    25f0:	bd80      	pop	{r7, pc}
    25f2:	bf00      	nop
    25f4:	0000244d 	.word	0x0000244d
    25f8:	20000bc0 	.word	0x20000bc0
    25fc:	0000a145 	.word	0x0000a145
    2600:	00009fbd 	.word	0x00009fbd

00002604 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    2604:	b580      	push	{r7, lr}
    2606:	b084      	sub	sp, #16
    2608:	af00      	add	r7, sp, #0
    260a:	4603      	mov	r3, r0
    260c:	6039      	str	r1, [r7, #0]
    260e:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2610:	79fb      	ldrb	r3, [r7, #7]
    2612:	4618      	mov	r0, r3
    2614:	4b0d      	ldr	r3, [pc, #52]	; (264c <usb_d_cb_trans_more+0x48>)
    2616:	4798      	blx	r3
    2618:	4603      	mov	r3, r0
    261a:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    261c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2620:	015b      	lsls	r3, r3, #5
    2622:	4a0b      	ldr	r2, [pc, #44]	; (2650 <usb_d_cb_trans_more+0x4c>)
    2624:	4413      	add	r3, r2
    2626:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    2628:	68bb      	ldr	r3, [r7, #8]
    262a:	789b      	ldrb	r3, [r3, #2]
    262c:	2b03      	cmp	r3, #3
    262e:	d107      	bne.n	2640 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    2630:	68bb      	ldr	r3, [r7, #8]
    2632:	699b      	ldr	r3, [r3, #24]
    2634:	79fa      	ldrb	r2, [r7, #7]
    2636:	6839      	ldr	r1, [r7, #0]
    2638:	4610      	mov	r0, r2
    263a:	4798      	blx	r3
    263c:	4603      	mov	r3, r0
    263e:	e000      	b.n	2642 <usb_d_cb_trans_more+0x3e>
	}
	return false;
    2640:	2300      	movs	r3, #0
}
    2642:	4618      	mov	r0, r3
    2644:	3710      	adds	r7, #16
    2646:	46bd      	mov	sp, r7
    2648:	bd80      	pop	{r7, pc}
    264a:	bf00      	nop
    264c:	0000244d 	.word	0x0000244d
    2650:	20000bc0 	.word	0x20000bc0

00002654 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    2654:	b590      	push	{r4, r7, lr}
    2656:	b087      	sub	sp, #28
    2658:	af02      	add	r7, sp, #8
    265a:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    265c:	687b      	ldr	r3, [r7, #4]
    265e:	789b      	ldrb	r3, [r3, #2]
    2660:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    2662:	687b      	ldr	r3, [r7, #4]
    2664:	7b1b      	ldrb	r3, [r3, #12]
    2666:	f003 0380 	and.w	r3, r3, #128	; 0x80
    266a:	2b00      	cmp	r3, #0
    266c:	bf14      	ite	ne
    266e:	2301      	movne	r3, #1
    2670:	2300      	moveq	r3, #0
    2672:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    2674:	7bfb      	ldrb	r3, [r7, #15]
    2676:	2b03      	cmp	r3, #3
    2678:	d13a      	bne.n	26f0 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    267a:	687b      	ldr	r3, [r7, #4]
    267c:	69db      	ldr	r3, [r3, #28]
    267e:	687a      	ldr	r2, [r7, #4]
    2680:	7850      	ldrb	r0, [r2, #1]
    2682:	687a      	ldr	r2, [r7, #4]
    2684:	320c      	adds	r2, #12
    2686:	2101      	movs	r1, #1
    2688:	4798      	blx	r3
    268a:	4603      	mov	r3, r0
    268c:	737b      	strb	r3, [r7, #13]
		if (err) {
    268e:	7b7b      	ldrb	r3, [r7, #13]
    2690:	2b00      	cmp	r3, #0
    2692:	d015      	beq.n	26c0 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    2694:	687b      	ldr	r3, [r7, #4]
    2696:	2205      	movs	r2, #5
    2698:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    269a:	687b      	ldr	r3, [r7, #4]
    269c:	2202      	movs	r2, #2
    269e:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    26a0:	7bbb      	ldrb	r3, [r7, #14]
    26a2:	2b00      	cmp	r3, #0
    26a4:	d002      	beq.n	26ac <usb_d_ctrl_trans_done+0x58>
    26a6:	687b      	ldr	r3, [r7, #4]
    26a8:	785b      	ldrb	r3, [r3, #1]
    26aa:	e004      	b.n	26b6 <usb_d_ctrl_trans_done+0x62>
    26ac:	687b      	ldr	r3, [r7, #4]
    26ae:	785b      	ldrb	r3, [r3, #1]
    26b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    26b4:	b2db      	uxtb	r3, r3
    26b6:	2101      	movs	r1, #1
    26b8:	4618      	mov	r0, r3
    26ba:	4b15      	ldr	r3, [pc, #84]	; (2710 <usb_d_ctrl_trans_done+0xbc>)
    26bc:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    26be:	e022      	b.n	2706 <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    26c0:	687b      	ldr	r3, [r7, #4]
    26c2:	2204      	movs	r2, #4
    26c4:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    26c6:	687b      	ldr	r3, [r7, #4]
    26c8:	7858      	ldrb	r0, [r3, #1]
    26ca:	7bbb      	ldrb	r3, [r7, #14]
    26cc:	2b00      	cmp	r3, #0
    26ce:	bf14      	ite	ne
    26d0:	2301      	movne	r3, #1
    26d2:	2300      	moveq	r3, #0
    26d4:	b2db      	uxtb	r3, r3
    26d6:	f083 0301 	eor.w	r3, r3, #1
    26da:	b2db      	uxtb	r3, r3
    26dc:	f003 0301 	and.w	r3, r3, #1
    26e0:	b2d9      	uxtb	r1, r3
    26e2:	2301      	movs	r3, #1
    26e4:	9300      	str	r3, [sp, #0]
    26e6:	2300      	movs	r3, #0
    26e8:	2200      	movs	r2, #0
    26ea:	4c0a      	ldr	r4, [pc, #40]	; (2714 <usb_d_ctrl_trans_done+0xc0>)
    26ec:	47a0      	blx	r4
}
    26ee:	e00a      	b.n	2706 <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    26f0:	687b      	ldr	r3, [r7, #4]
    26f2:	69db      	ldr	r3, [r3, #28]
    26f4:	687a      	ldr	r2, [r7, #4]
    26f6:	7850      	ldrb	r0, [r2, #1]
    26f8:	687a      	ldr	r2, [r7, #4]
    26fa:	320c      	adds	r2, #12
    26fc:	2100      	movs	r1, #0
    26fe:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2700:	687b      	ldr	r3, [r7, #4]
    2702:	2202      	movs	r2, #2
    2704:	709a      	strb	r2, [r3, #2]
}
    2706:	bf00      	nop
    2708:	3714      	adds	r7, #20
    270a:	46bd      	mov	sp, r7
    270c:	bd90      	pop	{r4, r7, pc}
    270e:	bf00      	nop
    2710:	00009fbd 	.word	0x00009fbd
    2714:	000024cd 	.word	0x000024cd

00002718 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    2718:	b580      	push	{r7, lr}
    271a:	b086      	sub	sp, #24
    271c:	af00      	add	r7, sp, #0
    271e:	4603      	mov	r3, r0
    2720:	60b9      	str	r1, [r7, #8]
    2722:	607a      	str	r2, [r7, #4]
    2724:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2726:	7bfb      	ldrb	r3, [r7, #15]
    2728:	4618      	mov	r0, r3
    272a:	4b2f      	ldr	r3, [pc, #188]	; (27e8 <_usb_d_cb_trans_done+0xd0>)
    272c:	4798      	blx	r3
    272e:	4603      	mov	r3, r0
    2730:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2732:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2736:	015b      	lsls	r3, r3, #5
    2738:	4a2c      	ldr	r2, [pc, #176]	; (27ec <_usb_d_cb_trans_done+0xd4>)
    273a:	4413      	add	r3, r2
    273c:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    273e:	68bb      	ldr	r3, [r7, #8]
    2740:	2b00      	cmp	r3, #0
    2742:	d10e      	bne.n	2762 <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    2744:	693b      	ldr	r3, [r7, #16]
    2746:	2200      	movs	r2, #0
    2748:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    274a:	693b      	ldr	r3, [r7, #16]
    274c:	781b      	ldrb	r3, [r3, #0]
    274e:	2b00      	cmp	r3, #0
    2750:	d103      	bne.n	275a <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    2752:	6938      	ldr	r0, [r7, #16]
    2754:	4b26      	ldr	r3, [pc, #152]	; (27f0 <_usb_d_cb_trans_done+0xd8>)
    2756:	4798      	blx	r3
			return;
    2758:	e043      	b.n	27e2 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    275a:	693b      	ldr	r3, [r7, #16]
    275c:	2201      	movs	r2, #1
    275e:	709a      	strb	r2, [r3, #2]
    2760:	e038      	b.n	27d4 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    2762:	68bb      	ldr	r3, [r7, #8]
    2764:	2b01      	cmp	r3, #1
    2766:	d113      	bne.n	2790 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    2768:	693b      	ldr	r3, [r7, #16]
    276a:	2202      	movs	r2, #2
    276c:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    276e:	693b      	ldr	r3, [r7, #16]
    2770:	781b      	ldrb	r3, [r3, #0]
    2772:	2b00      	cmp	r3, #0
    2774:	d108      	bne.n	2788 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2776:	693b      	ldr	r3, [r7, #16]
    2778:	2202      	movs	r2, #2
    277a:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    277c:	7bfb      	ldrb	r3, [r7, #15]
    277e:	2100      	movs	r1, #0
    2780:	4618      	mov	r0, r3
    2782:	4b1c      	ldr	r3, [pc, #112]	; (27f4 <_usb_d_cb_trans_done+0xdc>)
    2784:	4798      	blx	r3
    2786:	e025      	b.n	27d4 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    2788:	693b      	ldr	r3, [r7, #16]
    278a:	2205      	movs	r2, #5
    278c:	709a      	strb	r2, [r3, #2]
    278e:	e021      	b.n	27d4 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    2790:	68bb      	ldr	r3, [r7, #8]
    2792:	2b02      	cmp	r3, #2
    2794:	d10e      	bne.n	27b4 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    2796:	693b      	ldr	r3, [r7, #16]
    2798:	2204      	movs	r2, #4
    279a:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    279c:	693b      	ldr	r3, [r7, #16]
    279e:	781b      	ldrb	r3, [r3, #0]
    27a0:	2b00      	cmp	r3, #0
    27a2:	d103      	bne.n	27ac <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    27a4:	693b      	ldr	r3, [r7, #16]
    27a6:	2202      	movs	r2, #2
    27a8:	709a      	strb	r2, [r3, #2]
			return;
    27aa:	e01a      	b.n	27e2 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    27ac:	693b      	ldr	r3, [r7, #16]
    27ae:	2201      	movs	r2, #1
    27b0:	709a      	strb	r2, [r3, #2]
    27b2:	e00f      	b.n	27d4 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    27b4:	68bb      	ldr	r3, [r7, #8]
    27b6:	2b03      	cmp	r3, #3
    27b8:	d106      	bne.n	27c8 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    27ba:	693b      	ldr	r3, [r7, #16]
    27bc:	2200      	movs	r2, #0
    27be:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    27c0:	693b      	ldr	r3, [r7, #16]
    27c2:	2205      	movs	r2, #5
    27c4:	70da      	strb	r2, [r3, #3]
    27c6:	e005      	b.n	27d4 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    27c8:	693b      	ldr	r3, [r7, #16]
    27ca:	2206      	movs	r2, #6
    27cc:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    27ce:	693b      	ldr	r3, [r7, #16]
    27d0:	2206      	movs	r2, #6
    27d2:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    27d4:	693b      	ldr	r3, [r7, #16]
    27d6:	69db      	ldr	r3, [r3, #28]
    27d8:	693a      	ldr	r2, [r7, #16]
    27da:	78d1      	ldrb	r1, [r2, #3]
    27dc:	687a      	ldr	r2, [r7, #4]
    27de:	7bf8      	ldrb	r0, [r7, #15]
    27e0:	4798      	blx	r3
}
    27e2:	3718      	adds	r7, #24
    27e4:	46bd      	mov	sp, r7
    27e6:	bd80      	pop	{r7, pc}
    27e8:	0000244d 	.word	0x0000244d
    27ec:	20000bc0 	.word	0x20000bc0
    27f0:	00002655 	.word	0x00002655
    27f4:	00009fbd 	.word	0x00009fbd

000027f8 <usb_d_init>:

int32_t usb_d_init(void)
{
    27f8:	b580      	push	{r7, lr}
    27fa:	b082      	sub	sp, #8
    27fc:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    27fe:	4b21      	ldr	r3, [pc, #132]	; (2884 <usb_d_init+0x8c>)
    2800:	4798      	blx	r3
    2802:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    2804:	683b      	ldr	r3, [r7, #0]
    2806:	2b00      	cmp	r3, #0
    2808:	da01      	bge.n	280e <usb_d_init+0x16>
		return rc;
    280a:	683b      	ldr	r3, [r7, #0]
    280c:	e036      	b.n	287c <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    280e:	2280      	movs	r2, #128	; 0x80
    2810:	2100      	movs	r1, #0
    2812:	481d      	ldr	r0, [pc, #116]	; (2888 <usb_d_init+0x90>)
    2814:	4b1d      	ldr	r3, [pc, #116]	; (288c <usb_d_init+0x94>)
    2816:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2818:	2300      	movs	r3, #0
    281a:	71fb      	strb	r3, [r7, #7]
    281c:	e01e      	b.n	285c <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    281e:	79fb      	ldrb	r3, [r7, #7]
    2820:	4a19      	ldr	r2, [pc, #100]	; (2888 <usb_d_init+0x90>)
    2822:	015b      	lsls	r3, r3, #5
    2824:	4413      	add	r3, r2
    2826:	3301      	adds	r3, #1
    2828:	22ff      	movs	r2, #255	; 0xff
    282a:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    282c:	79fb      	ldrb	r3, [r7, #7]
    282e:	4a16      	ldr	r2, [pc, #88]	; (2888 <usb_d_init+0x90>)
    2830:	015b      	lsls	r3, r3, #5
    2832:	4413      	add	r3, r2
    2834:	3314      	adds	r3, #20
    2836:	4a16      	ldr	r2, [pc, #88]	; (2890 <usb_d_init+0x98>)
    2838:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    283a:	79fb      	ldrb	r3, [r7, #7]
    283c:	4a12      	ldr	r2, [pc, #72]	; (2888 <usb_d_init+0x90>)
    283e:	015b      	lsls	r3, r3, #5
    2840:	4413      	add	r3, r2
    2842:	3318      	adds	r3, #24
    2844:	4a12      	ldr	r2, [pc, #72]	; (2890 <usb_d_init+0x98>)
    2846:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    2848:	79fb      	ldrb	r3, [r7, #7]
    284a:	4a0f      	ldr	r2, [pc, #60]	; (2888 <usb_d_init+0x90>)
    284c:	015b      	lsls	r3, r3, #5
    284e:	4413      	add	r3, r2
    2850:	331c      	adds	r3, #28
    2852:	4a0f      	ldr	r2, [pc, #60]	; (2890 <usb_d_init+0x98>)
    2854:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2856:	79fb      	ldrb	r3, [r7, #7]
    2858:	3301      	adds	r3, #1
    285a:	71fb      	strb	r3, [r7, #7]
    285c:	79fb      	ldrb	r3, [r7, #7]
    285e:	2b03      	cmp	r3, #3
    2860:	d9dd      	bls.n	281e <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    2862:	490c      	ldr	r1, [pc, #48]	; (2894 <usb_d_init+0x9c>)
    2864:	2000      	movs	r0, #0
    2866:	4b0c      	ldr	r3, [pc, #48]	; (2898 <usb_d_init+0xa0>)
    2868:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    286a:	490c      	ldr	r1, [pc, #48]	; (289c <usb_d_init+0xa4>)
    286c:	2001      	movs	r0, #1
    286e:	4b0a      	ldr	r3, [pc, #40]	; (2898 <usb_d_init+0xa0>)
    2870:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    2872:	490b      	ldr	r1, [pc, #44]	; (28a0 <usb_d_init+0xa8>)
    2874:	2002      	movs	r0, #2
    2876:	4b08      	ldr	r3, [pc, #32]	; (2898 <usb_d_init+0xa0>)
    2878:	4798      	blx	r3
	return ERR_NONE;
    287a:	2300      	movs	r3, #0
}
    287c:	4618      	mov	r0, r3
    287e:	3708      	adds	r7, #8
    2880:	46bd      	mov	sp, r7
    2882:	bd80      	pop	{r7, pc}
    2884:	00009805 	.word	0x00009805
    2888:	20000bc0 	.word	0x20000bc0
    288c:	00012f19 	.word	0x00012f19
    2890:	00002521 	.word	0x00002521
    2894:	0000253d 	.word	0x0000253d
    2898:	0000a3f9 	.word	0x0000a3f9
    289c:	00002605 	.word	0x00002605
    28a0:	00002719 	.word	0x00002719

000028a4 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    28a4:	b580      	push	{r7, lr}
    28a6:	b082      	sub	sp, #8
    28a8:	af00      	add	r7, sp, #0
    28aa:	4603      	mov	r3, r0
    28ac:	6039      	str	r1, [r7, #0]
    28ae:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    28b0:	79fb      	ldrb	r3, [r7, #7]
    28b2:	6839      	ldr	r1, [r7, #0]
    28b4:	4618      	mov	r0, r3
    28b6:	4b03      	ldr	r3, [pc, #12]	; (28c4 <usb_d_register_callback+0x20>)
    28b8:	4798      	blx	r3
}
    28ba:	bf00      	nop
    28bc:	3708      	adds	r7, #8
    28be:	46bd      	mov	sp, r7
    28c0:	bd80      	pop	{r7, pc}
    28c2:	bf00      	nop
    28c4:	0000a3b1 	.word	0x0000a3b1

000028c8 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    28c8:	b580      	push	{r7, lr}
    28ca:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    28cc:	4b02      	ldr	r3, [pc, #8]	; (28d8 <usb_d_enable+0x10>)
    28ce:	4798      	blx	r3
    28d0:	4603      	mov	r3, r0
}
    28d2:	4618      	mov	r0, r3
    28d4:	bd80      	pop	{r7, pc}
    28d6:	bf00      	nop
    28d8:	000098f5 	.word	0x000098f5

000028dc <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    28dc:	b580      	push	{r7, lr}
    28de:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    28e0:	4b01      	ldr	r3, [pc, #4]	; (28e8 <usb_d_attach+0xc>)
    28e2:	4798      	blx	r3
}
    28e4:	bf00      	nop
    28e6:	bd80      	pop	{r7, pc}
    28e8:	00009979 	.word	0x00009979

000028ec <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    28ec:	b580      	push	{r7, lr}
    28ee:	b082      	sub	sp, #8
    28f0:	af00      	add	r7, sp, #0
    28f2:	4603      	mov	r3, r0
    28f4:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    28f6:	79fb      	ldrb	r3, [r7, #7]
    28f8:	4618      	mov	r0, r3
    28fa:	4b03      	ldr	r3, [pc, #12]	; (2908 <usb_d_set_address+0x1c>)
    28fc:	4798      	blx	r3
}
    28fe:	bf00      	nop
    2900:	3708      	adds	r7, #8
    2902:	46bd      	mov	sp, r7
    2904:	bd80      	pop	{r7, pc}
    2906:	bf00      	nop
    2908:	0000998d 	.word	0x0000998d

0000290c <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    290c:	b580      	push	{r7, lr}
    290e:	b082      	sub	sp, #8
    2910:	af00      	add	r7, sp, #0
    2912:	4603      	mov	r3, r0
    2914:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    2916:	79fb      	ldrb	r3, [r7, #7]
    2918:	b29b      	uxth	r3, r3
    291a:	461a      	mov	r2, r3
    291c:	2100      	movs	r1, #0
    291e:	2000      	movs	r0, #0
    2920:	4b03      	ldr	r3, [pc, #12]	; (2930 <usb_d_ep0_init+0x24>)
    2922:	4798      	blx	r3
    2924:	4603      	mov	r3, r0
}
    2926:	4618      	mov	r0, r3
    2928:	3708      	adds	r7, #8
    292a:	46bd      	mov	sp, r7
    292c:	bd80      	pop	{r7, pc}
    292e:	bf00      	nop
    2930:	00002935 	.word	0x00002935

00002934 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    2934:	b580      	push	{r7, lr}
    2936:	b086      	sub	sp, #24
    2938:	af00      	add	r7, sp, #0
    293a:	4603      	mov	r3, r0
    293c:	71fb      	strb	r3, [r7, #7]
    293e:	460b      	mov	r3, r1
    2940:	71bb      	strb	r3, [r7, #6]
    2942:	4613      	mov	r3, r2
    2944:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    2946:	79fb      	ldrb	r3, [r7, #7]
    2948:	4618      	mov	r0, r3
    294a:	4b1e      	ldr	r3, [pc, #120]	; (29c4 <usb_d_ep_init+0x90>)
    294c:	4798      	blx	r3
    294e:	4603      	mov	r3, r0
    2950:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2952:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2956:	015b      	lsls	r3, r3, #5
    2958:	4a1b      	ldr	r2, [pc, #108]	; (29c8 <usb_d_ep_init+0x94>)
    295a:	4413      	add	r3, r2
    295c:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    295e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2962:	2b00      	cmp	r3, #0
    2964:	db02      	blt.n	296c <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    2966:	f06f 0313 	mvn.w	r3, #19
    296a:	e027      	b.n	29bc <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    296c:	20ff      	movs	r0, #255	; 0xff
    296e:	4b15      	ldr	r3, [pc, #84]	; (29c4 <usb_d_ep_init+0x90>)
    2970:	4798      	blx	r3
    2972:	4603      	mov	r3, r0
    2974:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    2976:	f997 3017 	ldrsb.w	r3, [r7, #23]
    297a:	2b00      	cmp	r3, #0
    297c:	da02      	bge.n	2984 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    297e:	f06f 0314 	mvn.w	r3, #20
    2982:	e01b      	b.n	29bc <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    2984:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2988:	015b      	lsls	r3, r3, #5
    298a:	4a0f      	ldr	r2, [pc, #60]	; (29c8 <usb_d_ep_init+0x94>)
    298c:	4413      	add	r3, r2
    298e:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    2990:	88ba      	ldrh	r2, [r7, #4]
    2992:	79b9      	ldrb	r1, [r7, #6]
    2994:	79fb      	ldrb	r3, [r7, #7]
    2996:	4618      	mov	r0, r3
    2998:	4b0c      	ldr	r3, [pc, #48]	; (29cc <usb_d_ep_init+0x98>)
    299a:	4798      	blx	r3
    299c:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    299e:	68fb      	ldr	r3, [r7, #12]
    29a0:	2b00      	cmp	r3, #0
    29a2:	da01      	bge.n	29a8 <usb_d_ep_init+0x74>
		return rc;
    29a4:	68fb      	ldr	r3, [r7, #12]
    29a6:	e009      	b.n	29bc <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    29a8:	693b      	ldr	r3, [r7, #16]
    29aa:	79fa      	ldrb	r2, [r7, #7]
    29ac:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    29ae:	79bb      	ldrb	r3, [r7, #6]
    29b0:	f003 0303 	and.w	r3, r3, #3
    29b4:	b2da      	uxtb	r2, r3
    29b6:	693b      	ldr	r3, [r7, #16]
    29b8:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    29ba:	2300      	movs	r3, #0
}
    29bc:	4618      	mov	r0, r3
    29be:	3718      	adds	r7, #24
    29c0:	46bd      	mov	sp, r7
    29c2:	bd80      	pop	{r7, pc}
    29c4:	0000244d 	.word	0x0000244d
    29c8:	20000bc0 	.word	0x20000bc0
    29cc:	00009a2d 	.word	0x00009a2d

000029d0 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    29d0:	b580      	push	{r7, lr}
    29d2:	b084      	sub	sp, #16
    29d4:	af00      	add	r7, sp, #0
    29d6:	4603      	mov	r3, r0
    29d8:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    29da:	79fb      	ldrb	r3, [r7, #7]
    29dc:	4618      	mov	r0, r3
    29de:	4b0d      	ldr	r3, [pc, #52]	; (2a14 <usb_d_ep_deinit+0x44>)
    29e0:	4798      	blx	r3
    29e2:	4603      	mov	r3, r0
    29e4:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    29e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    29ea:	015b      	lsls	r3, r3, #5
    29ec:	4a0a      	ldr	r2, [pc, #40]	; (2a18 <usb_d_ep_deinit+0x48>)
    29ee:	4413      	add	r3, r2
    29f0:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    29f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    29f6:	2b00      	cmp	r3, #0
    29f8:	db07      	blt.n	2a0a <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    29fa:	79fb      	ldrb	r3, [r7, #7]
    29fc:	4618      	mov	r0, r3
    29fe:	4b07      	ldr	r3, [pc, #28]	; (2a1c <usb_d_ep_deinit+0x4c>)
    2a00:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    2a02:	68bb      	ldr	r3, [r7, #8]
    2a04:	22ff      	movs	r2, #255	; 0xff
    2a06:	705a      	strb	r2, [r3, #1]
    2a08:	e000      	b.n	2a0c <usb_d_ep_deinit+0x3c>
		return;
    2a0a:	bf00      	nop
}
    2a0c:	3710      	adds	r7, #16
    2a0e:	46bd      	mov	sp, r7
    2a10:	bd80      	pop	{r7, pc}
    2a12:	bf00      	nop
    2a14:	0000244d 	.word	0x0000244d
    2a18:	20000bc0 	.word	0x20000bc0
    2a1c:	00009b61 	.word	0x00009b61

00002a20 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    2a20:	b580      	push	{r7, lr}
    2a22:	b086      	sub	sp, #24
    2a24:	af00      	add	r7, sp, #0
    2a26:	4603      	mov	r3, r0
    2a28:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2a2a:	79fb      	ldrb	r3, [r7, #7]
    2a2c:	4618      	mov	r0, r3
    2a2e:	4b15      	ldr	r3, [pc, #84]	; (2a84 <usb_d_ep_enable+0x64>)
    2a30:	4798      	blx	r3
    2a32:	4603      	mov	r3, r0
    2a34:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2a36:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2a3a:	015b      	lsls	r3, r3, #5
    2a3c:	4a12      	ldr	r2, [pc, #72]	; (2a88 <usb_d_ep_enable+0x68>)
    2a3e:	4413      	add	r3, r2
    2a40:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    2a42:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2a46:	2b00      	cmp	r3, #0
    2a48:	da02      	bge.n	2a50 <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    2a4a:	f06f 0311 	mvn.w	r3, #17
    2a4e:	e014      	b.n	2a7a <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    2a50:	693b      	ldr	r3, [r7, #16]
    2a52:	781b      	ldrb	r3, [r3, #0]
    2a54:	2b00      	cmp	r3, #0
    2a56:	d101      	bne.n	2a5c <usb_d_ep_enable+0x3c>
    2a58:	2202      	movs	r2, #2
    2a5a:	e000      	b.n	2a5e <usb_d_ep_enable+0x3e>
    2a5c:	2201      	movs	r2, #1
    2a5e:	693b      	ldr	r3, [r7, #16]
    2a60:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    2a62:	79fb      	ldrb	r3, [r7, #7]
    2a64:	4618      	mov	r0, r3
    2a66:	4b09      	ldr	r3, [pc, #36]	; (2a8c <usb_d_ep_enable+0x6c>)
    2a68:	4798      	blx	r3
    2a6a:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    2a6c:	68fb      	ldr	r3, [r7, #12]
    2a6e:	2b00      	cmp	r3, #0
    2a70:	da02      	bge.n	2a78 <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    2a72:	693b      	ldr	r3, [r7, #16]
    2a74:	2200      	movs	r2, #0
    2a76:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    2a78:	68fb      	ldr	r3, [r7, #12]
}
    2a7a:	4618      	mov	r0, r3
    2a7c:	3718      	adds	r7, #24
    2a7e:	46bd      	mov	sp, r7
    2a80:	bd80      	pop	{r7, pc}
    2a82:	bf00      	nop
    2a84:	0000244d 	.word	0x0000244d
    2a88:	20000bc0 	.word	0x20000bc0
    2a8c:	00009c45 	.word	0x00009c45

00002a90 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    2a90:	b590      	push	{r4, r7, lr}
    2a92:	b08d      	sub	sp, #52	; 0x34
    2a94:	af02      	add	r7, sp, #8
    2a96:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    2a98:	687b      	ldr	r3, [r7, #4]
    2a9a:	7a1b      	ldrb	r3, [r3, #8]
    2a9c:	4618      	mov	r0, r3
    2a9e:	4b51      	ldr	r3, [pc, #324]	; (2be4 <usb_d_ep_transfer+0x154>)
    2aa0:	4798      	blx	r3
    2aa2:	4603      	mov	r3, r0
    2aa4:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    2aa6:	f997 301f 	ldrsb.w	r3, [r7, #31]
    2aaa:	015b      	lsls	r3, r3, #5
    2aac:	4a4e      	ldr	r2, [pc, #312]	; (2be8 <usb_d_ep_transfer+0x158>)
    2aae:	4413      	add	r3, r2
    2ab0:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    2ab2:	687b      	ldr	r3, [r7, #4]
    2ab4:	7a1b      	ldrb	r3, [r3, #8]
    2ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    2aba:	2b00      	cmp	r3, #0
    2abc:	bf14      	ite	ne
    2abe:	2301      	movne	r3, #1
    2ac0:	2300      	moveq	r3, #0
    2ac2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    2ac6:	687b      	ldr	r3, [r7, #4]
    2ac8:	7a5b      	ldrb	r3, [r3, #9]
    2aca:	2b00      	cmp	r3, #0
    2acc:	bf14      	ite	ne
    2ace:	2301      	movne	r3, #1
    2ad0:	2300      	moveq	r3, #0
    2ad2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    2ad6:	687b      	ldr	r3, [r7, #4]
    2ad8:	685b      	ldr	r3, [r3, #4]
    2ada:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    2adc:	f997 301f 	ldrsb.w	r3, [r7, #31]
    2ae0:	2b00      	cmp	r3, #0
    2ae2:	da02      	bge.n	2aea <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    2ae4:	f06f 0311 	mvn.w	r3, #17
    2ae8:	e077      	b.n	2bda <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    2aea:	f107 0308 	add.w	r3, r7, #8
    2aee:	4618      	mov	r0, r3
    2af0:	4b3e      	ldr	r3, [pc, #248]	; (2bec <usb_d_ep_transfer+0x15c>)
    2af2:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    2af4:	69bb      	ldr	r3, [r7, #24]
    2af6:	789b      	ldrb	r3, [r3, #2]
    2af8:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    2afa:	7bfb      	ldrb	r3, [r7, #15]
    2afc:	b2db      	uxtb	r3, r3
    2afe:	2b01      	cmp	r3, #1
    2b00:	d10c      	bne.n	2b1c <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    2b02:	69bb      	ldr	r3, [r7, #24]
    2b04:	2203      	movs	r2, #3
    2b06:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    2b08:	f107 0308 	add.w	r3, r7, #8
    2b0c:	4618      	mov	r0, r3
    2b0e:	4b38      	ldr	r3, [pc, #224]	; (2bf0 <usb_d_ep_transfer+0x160>)
    2b10:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2b12:	69bb      	ldr	r3, [r7, #24]
    2b14:	781b      	ldrb	r3, [r3, #0]
    2b16:	2b00      	cmp	r3, #0
    2b18:	d151      	bne.n	2bbe <usb_d_ep_transfer+0x12e>
    2b1a:	e017      	b.n	2b4c <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    2b1c:	f107 0308 	add.w	r3, r7, #8
    2b20:	4618      	mov	r0, r3
    2b22:	4b33      	ldr	r3, [pc, #204]	; (2bf0 <usb_d_ep_transfer+0x160>)
    2b24:	4798      	blx	r3
		switch (state) {
    2b26:	7bfb      	ldrb	r3, [r7, #15]
    2b28:	b2db      	uxtb	r3, r3
    2b2a:	2b05      	cmp	r3, #5
    2b2c:	d004      	beq.n	2b38 <usb_d_ep_transfer+0xa8>
    2b2e:	2b06      	cmp	r3, #6
    2b30:	d004      	beq.n	2b3c <usb_d_ep_transfer+0xac>
    2b32:	2b00      	cmp	r3, #0
    2b34:	d005      	beq.n	2b42 <usb_d_ep_transfer+0xb2>
    2b36:	e007      	b.n	2b48 <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    2b38:	2302      	movs	r3, #2
    2b3a:	e04e      	b.n	2bda <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    2b3c:	f06f 030f 	mvn.w	r3, #15
    2b40:	e04b      	b.n	2bda <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    2b42:	f06f 0312 	mvn.w	r3, #18
    2b46:	e048      	b.n	2bda <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    2b48:	2301      	movs	r3, #1
    2b4a:	e046      	b.n	2bda <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    2b4c:	69bb      	ldr	r3, [r7, #24]
    2b4e:	7c9b      	ldrb	r3, [r3, #18]
    2b50:	b29a      	uxth	r2, r3
    2b52:	69bb      	ldr	r3, [r7, #24]
    2b54:	7cdb      	ldrb	r3, [r3, #19]
    2b56:	b29b      	uxth	r3, r3
    2b58:	021b      	lsls	r3, r3, #8
    2b5a:	b29b      	uxth	r3, r3
    2b5c:	4413      	add	r3, r2
    2b5e:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    2b60:	8afb      	ldrh	r3, [r7, #22]
    2b62:	2b00      	cmp	r3, #0
    2b64:	d10b      	bne.n	2b7e <usb_d_ep_transfer+0xee>
			dir                 = true;
    2b66:	2301      	movs	r3, #1
    2b68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    2b6c:	2300      	movs	r3, #0
    2b6e:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    2b70:	2301      	movs	r3, #1
    2b72:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    2b76:	69bb      	ldr	r3, [r7, #24]
    2b78:	2204      	movs	r2, #4
    2b7a:	709a      	strb	r2, [r3, #2]
    2b7c:	e01f      	b.n	2bbe <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    2b7e:	69bb      	ldr	r3, [r7, #24]
    2b80:	7b1b      	ldrb	r3, [r3, #12]
    2b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
    2b86:	2b00      	cmp	r3, #0
    2b88:	bf14      	ite	ne
    2b8a:	2301      	movne	r3, #1
    2b8c:	2300      	moveq	r3, #0
    2b8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    2b92:	8afa      	ldrh	r2, [r7, #22]
    2b94:	6a3b      	ldr	r3, [r7, #32]
    2b96:	429a      	cmp	r2, r3
    2b98:	d201      	bcs.n	2b9e <usb_d_ep_transfer+0x10e>
				len = req_len;
    2b9a:	8afb      	ldrh	r3, [r7, #22]
    2b9c:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    2b9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    2ba2:	2b00      	cmp	r3, #0
    2ba4:	d008      	beq.n	2bb8 <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    2ba6:	8afa      	ldrh	r2, [r7, #22]
    2ba8:	6a3b      	ldr	r3, [r7, #32]
    2baa:	429a      	cmp	r2, r3
    2bac:	bf8c      	ite	hi
    2bae:	2301      	movhi	r3, #1
    2bb0:	2300      	movls	r3, #0
    2bb2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    2bb6:	e002      	b.n	2bbe <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    2bb8:	2300      	movs	r3, #0
    2bba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    2bbe:	687b      	ldr	r3, [r7, #4]
    2bc0:	7a18      	ldrb	r0, [r3, #8]
    2bc2:	687b      	ldr	r3, [r7, #4]
    2bc4:	681a      	ldr	r2, [r3, #0]
    2bc6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    2bca:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    2bce:	9300      	str	r3, [sp, #0]
    2bd0:	6a3b      	ldr	r3, [r7, #32]
    2bd2:	4c08      	ldr	r4, [pc, #32]	; (2bf4 <usb_d_ep_transfer+0x164>)
    2bd4:	47a0      	blx	r4
    2bd6:	6138      	str	r0, [r7, #16]
	return rc;
    2bd8:	693b      	ldr	r3, [r7, #16]
}
    2bda:	4618      	mov	r0, r3
    2bdc:	372c      	adds	r7, #44	; 0x2c
    2bde:	46bd      	mov	sp, r7
    2be0:	bd90      	pop	{r4, r7, pc}
    2be2:	bf00      	nop
    2be4:	0000244d 	.word	0x0000244d
    2be8:	20000bc0 	.word	0x20000bc0
    2bec:	0000ab65 	.word	0x0000ab65
    2bf0:	0000ab8b 	.word	0x0000ab8b
    2bf4:	000024cd 	.word	0x000024cd

00002bf8 <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    2bf8:	b580      	push	{r7, lr}
    2bfa:	b086      	sub	sp, #24
    2bfc:	af00      	add	r7, sp, #0
    2bfe:	4603      	mov	r3, r0
    2c00:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2c02:	79fb      	ldrb	r3, [r7, #7]
    2c04:	4618      	mov	r0, r3
    2c06:	4b1a      	ldr	r3, [pc, #104]	; (2c70 <_usb_d_ep_halt_clr+0x78>)
    2c08:	4798      	blx	r3
    2c0a:	4603      	mov	r3, r0
    2c0c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2c0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2c12:	015b      	lsls	r3, r3, #5
    2c14:	4a17      	ldr	r2, [pc, #92]	; (2c74 <_usb_d_ep_halt_clr+0x7c>)
    2c16:	4413      	add	r3, r2
    2c18:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    2c1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2c1e:	2b00      	cmp	r3, #0
    2c20:	da02      	bge.n	2c28 <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    2c22:	f06f 0311 	mvn.w	r3, #17
    2c26:	e01f      	b.n	2c68 <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    2c28:	79fb      	ldrb	r3, [r7, #7]
    2c2a:	2102      	movs	r1, #2
    2c2c:	4618      	mov	r0, r3
    2c2e:	4b12      	ldr	r3, [pc, #72]	; (2c78 <_usb_d_ep_halt_clr+0x80>)
    2c30:	4798      	blx	r3
    2c32:	4603      	mov	r3, r0
    2c34:	2b00      	cmp	r3, #0
    2c36:	d016      	beq.n	2c66 <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2c38:	79fb      	ldrb	r3, [r7, #7]
    2c3a:	2100      	movs	r1, #0
    2c3c:	4618      	mov	r0, r3
    2c3e:	4b0e      	ldr	r3, [pc, #56]	; (2c78 <_usb_d_ep_halt_clr+0x80>)
    2c40:	4798      	blx	r3
    2c42:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    2c44:	68fb      	ldr	r3, [r7, #12]
    2c46:	2b00      	cmp	r3, #0
    2c48:	da01      	bge.n	2c4e <_usb_d_ep_halt_clr+0x56>
			return rc;
    2c4a:	68fb      	ldr	r3, [r7, #12]
    2c4c:	e00c      	b.n	2c68 <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    2c4e:	693b      	ldr	r3, [r7, #16]
    2c50:	2201      	movs	r2, #1
    2c52:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    2c54:	693b      	ldr	r3, [r7, #16]
    2c56:	2203      	movs	r2, #3
    2c58:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    2c5a:	693b      	ldr	r3, [r7, #16]
    2c5c:	69db      	ldr	r3, [r3, #28]
    2c5e:	79f8      	ldrb	r0, [r7, #7]
    2c60:	2200      	movs	r2, #0
    2c62:	2103      	movs	r1, #3
    2c64:	4798      	blx	r3
	}
	return ERR_NONE;
    2c66:	2300      	movs	r3, #0
}
    2c68:	4618      	mov	r0, r3
    2c6a:	3718      	adds	r7, #24
    2c6c:	46bd      	mov	sp, r7
    2c6e:	bd80      	pop	{r7, pc}
    2c70:	0000244d 	.word	0x0000244d
    2c74:	20000bc0 	.word	0x20000bc0
    2c78:	00009fbd 	.word	0x00009fbd

00002c7c <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    2c7c:	b580      	push	{r7, lr}
    2c7e:	b082      	sub	sp, #8
    2c80:	af00      	add	r7, sp, #0
    2c82:	4603      	mov	r3, r0
    2c84:	460a      	mov	r2, r1
    2c86:	71fb      	strb	r3, [r7, #7]
    2c88:	4613      	mov	r3, r2
    2c8a:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    2c8c:	79bb      	ldrb	r3, [r7, #6]
    2c8e:	2b00      	cmp	r3, #0
    2c90:	d105      	bne.n	2c9e <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    2c92:	79fb      	ldrb	r3, [r7, #7]
    2c94:	4618      	mov	r0, r3
    2c96:	4b0c      	ldr	r3, [pc, #48]	; (2cc8 <usb_d_ep_halt+0x4c>)
    2c98:	4798      	blx	r3
    2c9a:	4603      	mov	r3, r0
    2c9c:	e00f      	b.n	2cbe <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    2c9e:	79bb      	ldrb	r3, [r7, #6]
    2ca0:	2b01      	cmp	r3, #1
    2ca2:	d106      	bne.n	2cb2 <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2ca4:	79fb      	ldrb	r3, [r7, #7]
    2ca6:	2101      	movs	r1, #1
    2ca8:	4618      	mov	r0, r3
    2caa:	4b08      	ldr	r3, [pc, #32]	; (2ccc <usb_d_ep_halt+0x50>)
    2cac:	4798      	blx	r3
    2cae:	4603      	mov	r3, r0
    2cb0:	e005      	b.n	2cbe <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    2cb2:	79fb      	ldrb	r3, [r7, #7]
    2cb4:	2102      	movs	r1, #2
    2cb6:	4618      	mov	r0, r3
    2cb8:	4b04      	ldr	r3, [pc, #16]	; (2ccc <usb_d_ep_halt+0x50>)
    2cba:	4798      	blx	r3
    2cbc:	4603      	mov	r3, r0
	}
}
    2cbe:	4618      	mov	r0, r3
    2cc0:	3708      	adds	r7, #8
    2cc2:	46bd      	mov	sp, r7
    2cc4:	bd80      	pop	{r7, pc}
    2cc6:	bf00      	nop
    2cc8:	00002bf9 	.word	0x00002bf9
    2ccc:	00009fbd 	.word	0x00009fbd

00002cd0 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    2cd0:	b580      	push	{r7, lr}
    2cd2:	b086      	sub	sp, #24
    2cd4:	af00      	add	r7, sp, #0
    2cd6:	4603      	mov	r3, r0
    2cd8:	603a      	str	r2, [r7, #0]
    2cda:	71fb      	strb	r3, [r7, #7]
    2cdc:	460b      	mov	r3, r1
    2cde:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2ce0:	79fb      	ldrb	r3, [r7, #7]
    2ce2:	4618      	mov	r0, r3
    2ce4:	4b16      	ldr	r3, [pc, #88]	; (2d40 <usb_d_ep_register_callback+0x70>)
    2ce6:	4798      	blx	r3
    2ce8:	4603      	mov	r3, r0
    2cea:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2cec:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2cf0:	015b      	lsls	r3, r3, #5
    2cf2:	4a14      	ldr	r2, [pc, #80]	; (2d44 <usb_d_ep_register_callback+0x74>)
    2cf4:	4413      	add	r3, r2
    2cf6:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    2cf8:	683b      	ldr	r3, [r7, #0]
    2cfa:	2b00      	cmp	r3, #0
    2cfc:	d001      	beq.n	2d02 <usb_d_ep_register_callback+0x32>
    2cfe:	683b      	ldr	r3, [r7, #0]
    2d00:	e000      	b.n	2d04 <usb_d_ep_register_callback+0x34>
    2d02:	4b11      	ldr	r3, [pc, #68]	; (2d48 <usb_d_ep_register_callback+0x78>)
    2d04:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    2d06:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2d0a:	2b00      	cmp	r3, #0
    2d0c:	db13      	blt.n	2d36 <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    2d0e:	79bb      	ldrb	r3, [r7, #6]
    2d10:	2b01      	cmp	r3, #1
    2d12:	d008      	beq.n	2d26 <usb_d_ep_register_callback+0x56>
    2d14:	2b02      	cmp	r3, #2
    2d16:	d00a      	beq.n	2d2e <usb_d_ep_register_callback+0x5e>
    2d18:	2b00      	cmp	r3, #0
    2d1a:	d000      	beq.n	2d1e <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    2d1c:	e00c      	b.n	2d38 <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    2d1e:	693b      	ldr	r3, [r7, #16]
    2d20:	68fa      	ldr	r2, [r7, #12]
    2d22:	615a      	str	r2, [r3, #20]
		break;
    2d24:	e008      	b.n	2d38 <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    2d26:	693b      	ldr	r3, [r7, #16]
    2d28:	68fa      	ldr	r2, [r7, #12]
    2d2a:	619a      	str	r2, [r3, #24]
		break;
    2d2c:	e004      	b.n	2d38 <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    2d2e:	693b      	ldr	r3, [r7, #16]
    2d30:	68fa      	ldr	r2, [r7, #12]
    2d32:	61da      	str	r2, [r3, #28]
		break;
    2d34:	e000      	b.n	2d38 <usb_d_ep_register_callback+0x68>
		return;
    2d36:	bf00      	nop
	}
}
    2d38:	3718      	adds	r7, #24
    2d3a:	46bd      	mov	sp, r7
    2d3c:	bd80      	pop	{r7, pc}
    2d3e:	bf00      	nop
    2d40:	0000244d 	.word	0x0000244d
    2d44:	20000bc0 	.word	0x20000bc0
    2d48:	00002521 	.word	0x00002521

00002d4c <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    2d4c:	b480      	push	{r7}
    2d4e:	b085      	sub	sp, #20
    2d50:	af00      	add	r7, sp, #0
    2d52:	4603      	mov	r3, r0
    2d54:	60b9      	str	r1, [r7, #8]
    2d56:	607a      	str	r2, [r7, #4]
    2d58:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    2d5a:	7bfb      	ldrb	r3, [r7, #15]
    2d5c:	f083 0301 	eor.w	r3, r3, #1
    2d60:	b2db      	uxtb	r3, r3
    2d62:	2b00      	cmp	r3, #0
    2d64:	d000      	beq.n	2d68 <assert+0x1c>
		__asm("BKPT #0");
    2d66:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    2d68:	bf00      	nop
    2d6a:	3714      	adds	r7, #20
    2d6c:	46bd      	mov	sp, r7
    2d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d72:	4770      	bx	lr

00002d74 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    2d74:	b480      	push	{r7}
    2d76:	b085      	sub	sp, #20
    2d78:	af00      	add	r7, sp, #0
    2d7a:	6078      	str	r0, [r7, #4]
    2d7c:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    2d7e:	687b      	ldr	r3, [r7, #4]
    2d80:	681b      	ldr	r3, [r3, #0]
    2d82:	60fb      	str	r3, [r7, #12]
    2d84:	e008      	b.n	2d98 <is_list_element+0x24>
		if (it == element) {
    2d86:	68fa      	ldr	r2, [r7, #12]
    2d88:	683b      	ldr	r3, [r7, #0]
    2d8a:	429a      	cmp	r2, r3
    2d8c:	d101      	bne.n	2d92 <is_list_element+0x1e>
			return true;
    2d8e:	2301      	movs	r3, #1
    2d90:	e006      	b.n	2da0 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    2d92:	68fb      	ldr	r3, [r7, #12]
    2d94:	681b      	ldr	r3, [r3, #0]
    2d96:	60fb      	str	r3, [r7, #12]
    2d98:	68fb      	ldr	r3, [r7, #12]
    2d9a:	2b00      	cmp	r3, #0
    2d9c:	d1f3      	bne.n	2d86 <is_list_element+0x12>
		}
	}

	return false;
    2d9e:	2300      	movs	r3, #0
}
    2da0:	4618      	mov	r0, r3
    2da2:	3714      	adds	r7, #20
    2da4:	46bd      	mov	sp, r7
    2da6:	f85d 7b04 	ldr.w	r7, [sp], #4
    2daa:	4770      	bx	lr

00002dac <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    2dac:	b580      	push	{r7, lr}
    2dae:	b082      	sub	sp, #8
    2db0:	af00      	add	r7, sp, #0
    2db2:	6078      	str	r0, [r7, #4]
    2db4:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    2db6:	6839      	ldr	r1, [r7, #0]
    2db8:	6878      	ldr	r0, [r7, #4]
    2dba:	4b0f      	ldr	r3, [pc, #60]	; (2df8 <list_insert_as_head+0x4c>)
    2dbc:	4798      	blx	r3
    2dbe:	4603      	mov	r3, r0
    2dc0:	2b00      	cmp	r3, #0
    2dc2:	bf14      	ite	ne
    2dc4:	2301      	movne	r3, #1
    2dc6:	2300      	moveq	r3, #0
    2dc8:	b2db      	uxtb	r3, r3
    2dca:	f083 0301 	eor.w	r3, r3, #1
    2dce:	b2db      	uxtb	r3, r3
    2dd0:	f003 0301 	and.w	r3, r3, #1
    2dd4:	b2db      	uxtb	r3, r3
    2dd6:	2239      	movs	r2, #57	; 0x39
    2dd8:	4908      	ldr	r1, [pc, #32]	; (2dfc <list_insert_as_head+0x50>)
    2dda:	4618      	mov	r0, r3
    2ddc:	4b08      	ldr	r3, [pc, #32]	; (2e00 <list_insert_as_head+0x54>)
    2dde:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    2de0:	687b      	ldr	r3, [r7, #4]
    2de2:	681a      	ldr	r2, [r3, #0]
    2de4:	683b      	ldr	r3, [r7, #0]
    2de6:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    2de8:	687b      	ldr	r3, [r7, #4]
    2dea:	683a      	ldr	r2, [r7, #0]
    2dec:	601a      	str	r2, [r3, #0]
}
    2dee:	bf00      	nop
    2df0:	3708      	adds	r7, #8
    2df2:	46bd      	mov	sp, r7
    2df4:	bd80      	pop	{r7, pc}
    2df6:	bf00      	nop
    2df8:	00002d75 	.word	0x00002d75
    2dfc:	000131e4 	.word	0x000131e4
    2e00:	00002d4d 	.word	0x00002d4d

00002e04 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    2e04:	b480      	push	{r7}
    2e06:	b083      	sub	sp, #12
    2e08:	af00      	add	r7, sp, #0
    2e0a:	6078      	str	r0, [r7, #4]
    2e0c:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    2e0e:	687b      	ldr	r3, [r7, #4]
    2e10:	681a      	ldr	r2, [r3, #0]
    2e12:	683b      	ldr	r3, [r7, #0]
    2e14:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    2e16:	687b      	ldr	r3, [r7, #4]
    2e18:	683a      	ldr	r2, [r7, #0]
    2e1a:	601a      	str	r2, [r3, #0]
}
    2e1c:	bf00      	nop
    2e1e:	370c      	adds	r7, #12
    2e20:	46bd      	mov	sp, r7
    2e22:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e26:	4770      	bx	lr

00002e28 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    2e28:	b580      	push	{r7, lr}
    2e2a:	b084      	sub	sp, #16
    2e2c:	af00      	add	r7, sp, #0
    2e2e:	6078      	str	r0, [r7, #4]
    2e30:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    2e32:	687b      	ldr	r3, [r7, #4]
    2e34:	681b      	ldr	r3, [r3, #0]
    2e36:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    2e38:	6839      	ldr	r1, [r7, #0]
    2e3a:	6878      	ldr	r0, [r7, #4]
    2e3c:	4b16      	ldr	r3, [pc, #88]	; (2e98 <list_insert_at_end+0x70>)
    2e3e:	4798      	blx	r3
    2e40:	4603      	mov	r3, r0
    2e42:	2b00      	cmp	r3, #0
    2e44:	bf14      	ite	ne
    2e46:	2301      	movne	r3, #1
    2e48:	2300      	moveq	r3, #0
    2e4a:	b2db      	uxtb	r3, r3
    2e4c:	f083 0301 	eor.w	r3, r3, #1
    2e50:	b2db      	uxtb	r3, r3
    2e52:	f003 0301 	and.w	r3, r3, #1
    2e56:	b2db      	uxtb	r3, r3
    2e58:	224f      	movs	r2, #79	; 0x4f
    2e5a:	4910      	ldr	r1, [pc, #64]	; (2e9c <list_insert_at_end+0x74>)
    2e5c:	4618      	mov	r0, r3
    2e5e:	4b10      	ldr	r3, [pc, #64]	; (2ea0 <list_insert_at_end+0x78>)
    2e60:	4798      	blx	r3

	if (!list->head) {
    2e62:	687b      	ldr	r3, [r7, #4]
    2e64:	681b      	ldr	r3, [r3, #0]
    2e66:	2b00      	cmp	r3, #0
    2e68:	d109      	bne.n	2e7e <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    2e6a:	687b      	ldr	r3, [r7, #4]
    2e6c:	683a      	ldr	r2, [r7, #0]
    2e6e:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    2e70:	683b      	ldr	r3, [r7, #0]
    2e72:	2200      	movs	r2, #0
    2e74:	601a      	str	r2, [r3, #0]
		return;
    2e76:	e00c      	b.n	2e92 <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    2e78:	68fb      	ldr	r3, [r7, #12]
    2e7a:	681b      	ldr	r3, [r3, #0]
    2e7c:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    2e7e:	68fb      	ldr	r3, [r7, #12]
    2e80:	681b      	ldr	r3, [r3, #0]
    2e82:	2b00      	cmp	r3, #0
    2e84:	d1f8      	bne.n	2e78 <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    2e86:	68fb      	ldr	r3, [r7, #12]
    2e88:	683a      	ldr	r2, [r7, #0]
    2e8a:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    2e8c:	683b      	ldr	r3, [r7, #0]
    2e8e:	2200      	movs	r2, #0
    2e90:	601a      	str	r2, [r3, #0]
}
    2e92:	3710      	adds	r7, #16
    2e94:	46bd      	mov	sp, r7
    2e96:	bd80      	pop	{r7, pc}
    2e98:	00002d75 	.word	0x00002d75
    2e9c:	000131e4 	.word	0x000131e4
    2ea0:	00002d4d 	.word	0x00002d4d

00002ea4 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    2ea4:	b480      	push	{r7}
    2ea6:	b085      	sub	sp, #20
    2ea8:	af00      	add	r7, sp, #0
    2eaa:	6078      	str	r0, [r7, #4]
	if (list->head) {
    2eac:	687b      	ldr	r3, [r7, #4]
    2eae:	681b      	ldr	r3, [r3, #0]
    2eb0:	2b00      	cmp	r3, #0
    2eb2:	d009      	beq.n	2ec8 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    2eb4:	687b      	ldr	r3, [r7, #4]
    2eb6:	681b      	ldr	r3, [r3, #0]
    2eb8:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    2eba:	687b      	ldr	r3, [r7, #4]
    2ebc:	681b      	ldr	r3, [r3, #0]
    2ebe:	681a      	ldr	r2, [r3, #0]
    2ec0:	687b      	ldr	r3, [r7, #4]
    2ec2:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    2ec4:	68fb      	ldr	r3, [r7, #12]
    2ec6:	e000      	b.n	2eca <list_remove_head+0x26>
	}

	return NULL;
    2ec8:	2300      	movs	r3, #0
}
    2eca:	4618      	mov	r0, r3
    2ecc:	3714      	adds	r7, #20
    2ece:	46bd      	mov	sp, r7
    2ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ed4:	4770      	bx	lr
	...

00002ed8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    2ed8:	b480      	push	{r7}
    2eda:	b083      	sub	sp, #12
    2edc:	af00      	add	r7, sp, #0
    2ede:	4603      	mov	r3, r0
    2ee0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    2ee2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    2ee6:	2b00      	cmp	r3, #0
    2ee8:	db0b      	blt.n	2f02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2eea:	4909      	ldr	r1, [pc, #36]	; (2f10 <__NVIC_EnableIRQ+0x38>)
    2eec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    2ef0:	095b      	lsrs	r3, r3, #5
    2ef2:	88fa      	ldrh	r2, [r7, #6]
    2ef4:	f002 021f 	and.w	r2, r2, #31
    2ef8:	2001      	movs	r0, #1
    2efa:	fa00 f202 	lsl.w	r2, r0, r2
    2efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    2f02:	bf00      	nop
    2f04:	370c      	adds	r7, #12
    2f06:	46bd      	mov	sp, r7
    2f08:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f0c:	4770      	bx	lr
    2f0e:	bf00      	nop
    2f10:	e000e100 	.word	0xe000e100

00002f14 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    2f14:	b480      	push	{r7}
    2f16:	b083      	sub	sp, #12
    2f18:	af00      	add	r7, sp, #0
    2f1a:	4603      	mov	r3, r0
    2f1c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    2f1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    2f22:	2b00      	cmp	r3, #0
    2f24:	db10      	blt.n	2f48 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2f26:	490b      	ldr	r1, [pc, #44]	; (2f54 <__NVIC_DisableIRQ+0x40>)
    2f28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    2f2c:	095b      	lsrs	r3, r3, #5
    2f2e:	88fa      	ldrh	r2, [r7, #6]
    2f30:	f002 021f 	and.w	r2, r2, #31
    2f34:	2001      	movs	r0, #1
    2f36:	fa00 f202 	lsl.w	r2, r0, r2
    2f3a:	3320      	adds	r3, #32
    2f3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2f40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2f44:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    2f48:	bf00      	nop
    2f4a:	370c      	adds	r7, #12
    2f4c:	46bd      	mov	sp, r7
    2f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f52:	4770      	bx	lr
    2f54:	e000e100 	.word	0xe000e100

00002f58 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    2f58:	b480      	push	{r7}
    2f5a:	b083      	sub	sp, #12
    2f5c:	af00      	add	r7, sp, #0
    2f5e:	4603      	mov	r3, r0
    2f60:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    2f62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    2f66:	2b00      	cmp	r3, #0
    2f68:	db0c      	blt.n	2f84 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2f6a:	4909      	ldr	r1, [pc, #36]	; (2f90 <__NVIC_ClearPendingIRQ+0x38>)
    2f6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    2f70:	095b      	lsrs	r3, r3, #5
    2f72:	88fa      	ldrh	r2, [r7, #6]
    2f74:	f002 021f 	and.w	r2, r2, #31
    2f78:	2001      	movs	r0, #1
    2f7a:	fa00 f202 	lsl.w	r2, r0, r2
    2f7e:	3360      	adds	r3, #96	; 0x60
    2f80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    2f84:	bf00      	nop
    2f86:	370c      	adds	r7, #12
    2f88:	46bd      	mov	sp, r7
    2f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f8e:	4770      	bx	lr
    2f90:	e000e100 	.word	0xe000e100

00002f94 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    2f94:	b480      	push	{r7}
    2f96:	b083      	sub	sp, #12
    2f98:	af00      	add	r7, sp, #0
    2f9a:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    2f9c:	687b      	ldr	r3, [r7, #4]
    2f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2fa0:	095b      	lsrs	r3, r3, #5
    2fa2:	f003 0301 	and.w	r3, r3, #1
    2fa6:	2b00      	cmp	r3, #0
    2fa8:	bf14      	ite	ne
    2faa:	2301      	movne	r3, #1
    2fac:	2300      	moveq	r3, #0
    2fae:	b2db      	uxtb	r3, r3
}
    2fb0:	4618      	mov	r0, r3
    2fb2:	370c      	adds	r7, #12
    2fb4:	46bd      	mov	sp, r7
    2fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
    2fba:	4770      	bx	lr

00002fbc <hri_can_read_RXF0S_F0FL_bf>:
{
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0FL(mask)) >> CAN_RXF0S_F0FL_Pos;
}

static inline hri_can_rxf0s_reg_t hri_can_read_RXF0S_F0FL_bf(const void *const hw)
{
    2fbc:	b480      	push	{r7}
    2fbe:	b083      	sub	sp, #12
    2fc0:	af00      	add	r7, sp, #0
    2fc2:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0FL_Msk) >> CAN_RXF0S_F0FL_Pos;
    2fc4:	687b      	ldr	r3, [r7, #4]
    2fc6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    2fca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
    2fce:	4618      	mov	r0, r3
    2fd0:	370c      	adds	r7, #12
    2fd2:	46bd      	mov	sp, r7
    2fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2fd8:	4770      	bx	lr

00002fda <hri_can_read_RXF0S_F0GI_bf>:
{
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0GI(mask)) >> CAN_RXF0S_F0GI_Pos;
}

static inline hri_can_rxf0s_reg_t hri_can_read_RXF0S_F0GI_bf(const void *const hw)
{
    2fda:	b480      	push	{r7}
    2fdc:	b083      	sub	sp, #12
    2fde:	af00      	add	r7, sp, #0
    2fe0:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0GI_Msk) >> CAN_RXF0S_F0GI_Pos;
    2fe2:	687b      	ldr	r3, [r7, #4]
    2fe4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    2fe8:	0a1b      	lsrs	r3, r3, #8
    2fea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
    2fee:	4618      	mov	r0, r3
    2ff0:	370c      	adds	r7, #12
    2ff2:	46bd      	mov	sp, r7
    2ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ff8:	4770      	bx	lr

00002ffa <hri_can_get_TXFQS_TFQF_bit>:
{
	return ((Can *)hw)->RXF1S.reg;
}

static inline bool hri_can_get_TXFQS_TFQF_bit(const void *const hw)
{
    2ffa:	b480      	push	{r7}
    2ffc:	b083      	sub	sp, #12
    2ffe:	af00      	add	r7, sp, #0
    3000:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFQF) >> CAN_TXFQS_TFQF_Pos;
    3002:	687b      	ldr	r3, [r7, #4]
    3004:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    3008:	0d5b      	lsrs	r3, r3, #21
    300a:	f003 0301 	and.w	r3, r3, #1
    300e:	2b00      	cmp	r3, #0
    3010:	bf14      	ite	ne
    3012:	2301      	movne	r3, #1
    3014:	2300      	moveq	r3, #0
    3016:	b2db      	uxtb	r3, r3
}
    3018:	4618      	mov	r0, r3
    301a:	370c      	adds	r7, #12
    301c:	46bd      	mov	sp, r7
    301e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3022:	4770      	bx	lr

00003024 <hri_can_read_TXFQS_TFQPI_bf>:
{
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFQPI(mask)) >> CAN_TXFQS_TFQPI_Pos;
}

static inline hri_can_txfqs_reg_t hri_can_read_TXFQS_TFQPI_bf(const void *const hw)
{
    3024:	b480      	push	{r7}
    3026:	b083      	sub	sp, #12
    3028:	af00      	add	r7, sp, #0
    302a:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFQPI_Msk) >> CAN_TXFQS_TFQPI_Pos;
    302c:	687b      	ldr	r3, [r7, #4]
    302e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    3032:	0c1b      	lsrs	r3, r3, #16
    3034:	f003 031f 	and.w	r3, r3, #31
}
    3038:	4618      	mov	r0, r3
    303a:	370c      	adds	r7, #12
    303c:	46bd      	mov	sp, r7
    303e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3042:	4770      	bx	lr

00003044 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    3044:	b480      	push	{r7}
    3046:	b083      	sub	sp, #12
    3048:	af00      	add	r7, sp, #0
    304a:	6078      	str	r0, [r7, #4]
    304c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    304e:	687b      	ldr	r3, [r7, #4]
    3050:	683a      	ldr	r2, [r7, #0]
    3052:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3054:	bf00      	nop
    3056:	370c      	adds	r7, #12
    3058:	46bd      	mov	sp, r7
    305a:	f85d 7b04 	ldr.w	r7, [sp], #4
    305e:	4770      	bx	lr

00003060 <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    3060:	b480      	push	{r7}
    3062:	b083      	sub	sp, #12
    3064:	af00      	add	r7, sp, #0
    3066:	6078      	str	r0, [r7, #4]
    3068:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    306a:	687b      	ldr	r3, [r7, #4]
    306c:	683a      	ldr	r2, [r7, #0]
    306e:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3070:	bf00      	nop
    3072:	370c      	adds	r7, #12
    3074:	46bd      	mov	sp, r7
    3076:	f85d 7b04 	ldr.w	r7, [sp], #4
    307a:	4770      	bx	lr

0000307c <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    307c:	b480      	push	{r7}
    307e:	b083      	sub	sp, #12
    3080:	af00      	add	r7, sp, #0
    3082:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    3084:	687b      	ldr	r3, [r7, #4]
    3086:	699b      	ldr	r3, [r3, #24]
    3088:	f043 0201 	orr.w	r2, r3, #1
    308c:	687b      	ldr	r3, [r7, #4]
    308e:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3090:	bf00      	nop
    3092:	370c      	adds	r7, #12
    3094:	46bd      	mov	sp, r7
    3096:	f85d 7b04 	ldr.w	r7, [sp], #4
    309a:	4770      	bx	lr

0000309c <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    309c:	b480      	push	{r7}
    309e:	b085      	sub	sp, #20
    30a0:	af00      	add	r7, sp, #0
    30a2:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    30a4:	687b      	ldr	r3, [r7, #4]
    30a6:	699b      	ldr	r3, [r3, #24]
    30a8:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    30aa:	68fb      	ldr	r3, [r7, #12]
    30ac:	f003 0301 	and.w	r3, r3, #1
    30b0:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    30b2:	68fb      	ldr	r3, [r7, #12]
    30b4:	2b00      	cmp	r3, #0
    30b6:	bf14      	ite	ne
    30b8:	2301      	movne	r3, #1
    30ba:	2300      	moveq	r3, #0
    30bc:	b2db      	uxtb	r3, r3
}
    30be:	4618      	mov	r0, r3
    30c0:	3714      	adds	r7, #20
    30c2:	46bd      	mov	sp, r7
    30c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    30c8:	4770      	bx	lr

000030ca <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    30ca:	b480      	push	{r7}
    30cc:	b083      	sub	sp, #12
    30ce:	af00      	add	r7, sp, #0
    30d0:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    30d2:	687b      	ldr	r3, [r7, #4]
    30d4:	699b      	ldr	r3, [r3, #24]
    30d6:	f023 0201 	bic.w	r2, r3, #1
    30da:	687b      	ldr	r3, [r7, #4]
    30dc:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    30de:	bf00      	nop
    30e0:	370c      	adds	r7, #12
    30e2:	46bd      	mov	sp, r7
    30e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    30e8:	4770      	bx	lr

000030ea <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    30ea:	b480      	push	{r7}
    30ec:	b083      	sub	sp, #12
    30ee:	af00      	add	r7, sp, #0
    30f0:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    30f2:	687b      	ldr	r3, [r7, #4]
    30f4:	699b      	ldr	r3, [r3, #24]
    30f6:	f043 0202 	orr.w	r2, r3, #2
    30fa:	687b      	ldr	r3, [r7, #4]
    30fc:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    30fe:	bf00      	nop
    3100:	370c      	adds	r7, #12
    3102:	46bd      	mov	sp, r7
    3104:	f85d 7b04 	ldr.w	r7, [sp], #4
    3108:	4770      	bx	lr

0000310a <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    310a:	b480      	push	{r7}
    310c:	b083      	sub	sp, #12
    310e:	af00      	add	r7, sp, #0
    3110:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    3112:	687b      	ldr	r3, [r7, #4]
    3114:	699b      	ldr	r3, [r3, #24]
    3116:	f023 0202 	bic.w	r2, r3, #2
    311a:	687b      	ldr	r3, [r7, #4]
    311c:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    311e:	bf00      	nop
    3120:	370c      	adds	r7, #12
    3122:	46bd      	mov	sp, r7
    3124:	f85d 7b04 	ldr.w	r7, [sp], #4
    3128:	4770      	bx	lr

0000312a <hri_can_get_CCCR_FDOE_bit>:
	((Can *)hw)->CCCR.reg |= CAN_CCCR_FDOE;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_can_get_CCCR_FDOE_bit(const void *const hw)
{
    312a:	b480      	push	{r7}
    312c:	b085      	sub	sp, #20
    312e:	af00      	add	r7, sp, #0
    3130:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    3132:	687b      	ldr	r3, [r7, #4]
    3134:	699b      	ldr	r3, [r3, #24]
    3136:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_FDOE) >> CAN_CCCR_FDOE_Pos;
    3138:	68fb      	ldr	r3, [r7, #12]
    313a:	0a1b      	lsrs	r3, r3, #8
    313c:	f003 0301 	and.w	r3, r3, #1
    3140:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    3142:	68fb      	ldr	r3, [r7, #12]
    3144:	2b00      	cmp	r3, #0
    3146:	bf14      	ite	ne
    3148:	2301      	movne	r3, #1
    314a:	2300      	moveq	r3, #0
    314c:	b2db      	uxtb	r3, r3
}
    314e:	4618      	mov	r0, r3
    3150:	3714      	adds	r7, #20
    3152:	46bd      	mov	sp, r7
    3154:	f85d 7b04 	ldr.w	r7, [sp], #4
    3158:	4770      	bx	lr

0000315a <hri_can_get_CCCR_BRSE_bit>:
	((Can *)hw)->CCCR.reg |= CAN_CCCR_BRSE;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_can_get_CCCR_BRSE_bit(const void *const hw)
{
    315a:	b480      	push	{r7}
    315c:	b085      	sub	sp, #20
    315e:	af00      	add	r7, sp, #0
    3160:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    3162:	687b      	ldr	r3, [r7, #4]
    3164:	699b      	ldr	r3, [r3, #24]
    3166:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_BRSE) >> CAN_CCCR_BRSE_Pos;
    3168:	68fb      	ldr	r3, [r7, #12]
    316a:	0a5b      	lsrs	r3, r3, #9
    316c:	f003 0301 	and.w	r3, r3, #1
    3170:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    3172:	68fb      	ldr	r3, [r7, #12]
    3174:	2b00      	cmp	r3, #0
    3176:	bf14      	ite	ne
    3178:	2301      	movne	r3, #1
    317a:	2300      	moveq	r3, #0
    317c:	b2db      	uxtb	r3, r3
}
    317e:	4618      	mov	r0, r3
    3180:	3714      	adds	r7, #20
    3182:	46bd      	mov	sp, r7
    3184:	f85d 7b04 	ldr.w	r7, [sp], #4
    3188:	4770      	bx	lr

0000318a <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    318a:	b480      	push	{r7}
    318c:	b083      	sub	sp, #12
    318e:	af00      	add	r7, sp, #0
    3190:	6078      	str	r0, [r7, #4]
    3192:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    3194:	687b      	ldr	r3, [r7, #4]
    3196:	699a      	ldr	r2, [r3, #24]
    3198:	683b      	ldr	r3, [r7, #0]
    319a:	431a      	orrs	r2, r3
    319c:	687b      	ldr	r3, [r7, #4]
    319e:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    31a0:	bf00      	nop
    31a2:	370c      	adds	r7, #12
    31a4:	46bd      	mov	sp, r7
    31a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    31aa:	4770      	bx	lr

000031ac <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    31ac:	b480      	push	{r7}
    31ae:	b083      	sub	sp, #12
    31b0:	af00      	add	r7, sp, #0
    31b2:	6078      	str	r0, [r7, #4]
    31b4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    31b6:	687b      	ldr	r3, [r7, #4]
    31b8:	683a      	ldr	r2, [r7, #0]
    31ba:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    31bc:	bf00      	nop
    31be:	370c      	adds	r7, #12
    31c0:	46bd      	mov	sp, r7
    31c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    31c6:	4770      	bx	lr

000031c8 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    31c8:	b480      	push	{r7}
    31ca:	b083      	sub	sp, #12
    31cc:	af00      	add	r7, sp, #0
    31ce:	6078      	str	r0, [r7, #4]
    31d0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    31d2:	687b      	ldr	r3, [r7, #4]
    31d4:	683a      	ldr	r2, [r7, #0]
    31d6:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    31d8:	bf00      	nop
    31da:	370c      	adds	r7, #12
    31dc:	46bd      	mov	sp, r7
    31de:	f85d 7b04 	ldr.w	r7, [sp], #4
    31e2:	4770      	bx	lr

000031e4 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    31e4:	b480      	push	{r7}
    31e6:	b083      	sub	sp, #12
    31e8:	af00      	add	r7, sp, #0
    31ea:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    31ec:	687b      	ldr	r3, [r7, #4]
    31ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    31f0:	4618      	mov	r0, r3
    31f2:	370c      	adds	r7, #12
    31f4:	46bd      	mov	sp, r7
    31f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    31fa:	4770      	bx	lr

000031fc <hri_can_write_IE_RF0NE_bit>:
	tmp = (tmp & CAN_IE_RF0NE) >> CAN_IE_RF0NE_Pos;
	return (bool)tmp;
}

static inline void hri_can_write_IE_RF0NE_bit(const void *const hw, bool value)
{
    31fc:	b480      	push	{r7}
    31fe:	b085      	sub	sp, #20
    3200:	af00      	add	r7, sp, #0
    3202:	6078      	str	r0, [r7, #4]
    3204:	460b      	mov	r3, r1
    3206:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	CAN_CRITICAL_SECTION_ENTER();
	tmp = ((Can *)hw)->IE.reg;
    3208:	687b      	ldr	r3, [r7, #4]
    320a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    320c:	60fb      	str	r3, [r7, #12]
	tmp &= ~CAN_IE_RF0NE;
    320e:	68fb      	ldr	r3, [r7, #12]
    3210:	f023 0301 	bic.w	r3, r3, #1
    3214:	60fb      	str	r3, [r7, #12]
	tmp |= value << CAN_IE_RF0NE_Pos;
    3216:	78fb      	ldrb	r3, [r7, #3]
    3218:	68fa      	ldr	r2, [r7, #12]
    321a:	4313      	orrs	r3, r2
    321c:	60fb      	str	r3, [r7, #12]
	((Can *)hw)->IE.reg = tmp;
    321e:	687b      	ldr	r3, [r7, #4]
    3220:	68fa      	ldr	r2, [r7, #12]
    3222:	655a      	str	r2, [r3, #84]	; 0x54
	CAN_CRITICAL_SECTION_LEAVE();
}
    3224:	bf00      	nop
    3226:	3714      	adds	r7, #20
    3228:	46bd      	mov	sp, r7
    322a:	f85d 7b04 	ldr.w	r7, [sp], #4
    322e:	4770      	bx	lr

00003230 <hri_can_write_IE_TCE_bit>:
	tmp = (tmp & CAN_IE_TCE) >> CAN_IE_TCE_Pos;
	return (bool)tmp;
}

static inline void hri_can_write_IE_TCE_bit(const void *const hw, bool value)
{
    3230:	b480      	push	{r7}
    3232:	b085      	sub	sp, #20
    3234:	af00      	add	r7, sp, #0
    3236:	6078      	str	r0, [r7, #4]
    3238:	460b      	mov	r3, r1
    323a:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	CAN_CRITICAL_SECTION_ENTER();
	tmp = ((Can *)hw)->IE.reg;
    323c:	687b      	ldr	r3, [r7, #4]
    323e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    3240:	60fb      	str	r3, [r7, #12]
	tmp &= ~CAN_IE_TCE;
    3242:	68fb      	ldr	r3, [r7, #12]
    3244:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    3248:	60fb      	str	r3, [r7, #12]
	tmp |= value << CAN_IE_TCE_Pos;
    324a:	78fb      	ldrb	r3, [r7, #3]
    324c:	025b      	lsls	r3, r3, #9
    324e:	461a      	mov	r2, r3
    3250:	68fb      	ldr	r3, [r7, #12]
    3252:	4313      	orrs	r3, r2
    3254:	60fb      	str	r3, [r7, #12]
	((Can *)hw)->IE.reg = tmp;
    3256:	687b      	ldr	r3, [r7, #4]
    3258:	68fa      	ldr	r2, [r7, #12]
    325a:	655a      	str	r2, [r3, #84]	; 0x54
	CAN_CRITICAL_SECTION_LEAVE();
}
    325c:	bf00      	nop
    325e:	3714      	adds	r7, #20
    3260:	46bd      	mov	sp, r7
    3262:	f85d 7b04 	ldr.w	r7, [sp], #4
    3266:	4770      	bx	lr

00003268 <hri_can_get_IE_reg>:
	((Can *)hw)->IE.reg |= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ie_reg_t hri_can_get_IE_reg(const void *const hw, hri_can_ie_reg_t mask)
{
    3268:	b480      	push	{r7}
    326a:	b085      	sub	sp, #20
    326c:	af00      	add	r7, sp, #0
    326e:	6078      	str	r0, [r7, #4]
    3270:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Can *)hw)->IE.reg;
    3272:	687b      	ldr	r3, [r7, #4]
    3274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    3276:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    3278:	68fa      	ldr	r2, [r7, #12]
    327a:	683b      	ldr	r3, [r7, #0]
    327c:	4013      	ands	r3, r2
    327e:	60fb      	str	r3, [r7, #12]
	return tmp;
    3280:	68fb      	ldr	r3, [r7, #12]
}
    3282:	4618      	mov	r0, r3
    3284:	3714      	adds	r7, #20
    3286:	46bd      	mov	sp, r7
    3288:	f85d 7b04 	ldr.w	r7, [sp], #4
    328c:	4770      	bx	lr

0000328e <hri_can_write_IE_reg>:

static inline void hri_can_write_IE_reg(const void *const hw, hri_can_ie_reg_t data)
{
    328e:	b480      	push	{r7}
    3290:	b083      	sub	sp, #12
    3292:	af00      	add	r7, sp, #0
    3294:	6078      	str	r0, [r7, #4]
    3296:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IE.reg = data;
    3298:	687b      	ldr	r3, [r7, #4]
    329a:	683a      	ldr	r2, [r7, #0]
    329c:	655a      	str	r2, [r3, #84]	; 0x54
	CAN_CRITICAL_SECTION_LEAVE();
}
    329e:	bf00      	nop
    32a0:	370c      	adds	r7, #12
    32a2:	46bd      	mov	sp, r7
    32a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    32a8:	4770      	bx	lr

000032aa <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    32aa:	b480      	push	{r7}
    32ac:	b083      	sub	sp, #12
    32ae:	af00      	add	r7, sp, #0
    32b0:	6078      	str	r0, [r7, #4]
    32b2:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    32b4:	687b      	ldr	r3, [r7, #4]
    32b6:	683a      	ldr	r2, [r7, #0]
    32b8:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    32ba:	bf00      	nop
    32bc:	370c      	adds	r7, #12
    32be:	46bd      	mov	sp, r7
    32c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    32c4:	4770      	bx	lr

000032c6 <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    32c6:	b480      	push	{r7}
    32c8:	b083      	sub	sp, #12
    32ca:	af00      	add	r7, sp, #0
    32cc:	6078      	str	r0, [r7, #4]
    32ce:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    32d0:	687b      	ldr	r3, [r7, #4]
    32d2:	683a      	ldr	r2, [r7, #0]
    32d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    32d8:	bf00      	nop
    32da:	370c      	adds	r7, #12
    32dc:	46bd      	mov	sp, r7
    32de:	f85d 7b04 	ldr.w	r7, [sp], #4
    32e2:	4770      	bx	lr

000032e4 <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    32e4:	b480      	push	{r7}
    32e6:	b083      	sub	sp, #12
    32e8:	af00      	add	r7, sp, #0
    32ea:	6078      	str	r0, [r7, #4]
    32ec:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    32ee:	687b      	ldr	r3, [r7, #4]
    32f0:	683a      	ldr	r2, [r7, #0]
    32f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    32f6:	bf00      	nop
    32f8:	370c      	adds	r7, #12
    32fa:	46bd      	mov	sp, r7
    32fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    3300:	4770      	bx	lr

00003302 <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    3302:	b480      	push	{r7}
    3304:	b083      	sub	sp, #12
    3306:	af00      	add	r7, sp, #0
    3308:	6078      	str	r0, [r7, #4]
    330a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    330c:	687b      	ldr	r3, [r7, #4]
    330e:	683a      	ldr	r2, [r7, #0]
    3310:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    3314:	bf00      	nop
    3316:	370c      	adds	r7, #12
    3318:	46bd      	mov	sp, r7
    331a:	f85d 7b04 	ldr.w	r7, [sp], #4
    331e:	4770      	bx	lr

00003320 <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    3320:	b480      	push	{r7}
    3322:	b083      	sub	sp, #12
    3324:	af00      	add	r7, sp, #0
    3326:	6078      	str	r0, [r7, #4]
    3328:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    332a:	687b      	ldr	r3, [r7, #4]
    332c:	683a      	ldr	r2, [r7, #0]
    332e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    3332:	bf00      	nop
    3334:	370c      	adds	r7, #12
    3336:	46bd      	mov	sp, r7
    3338:	f85d 7b04 	ldr.w	r7, [sp], #4
    333c:	4770      	bx	lr

0000333e <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    333e:	b480      	push	{r7}
    3340:	b083      	sub	sp, #12
    3342:	af00      	add	r7, sp, #0
    3344:	6078      	str	r0, [r7, #4]
    3346:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    3348:	687b      	ldr	r3, [r7, #4]
    334a:	683a      	ldr	r2, [r7, #0]
    334c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3350:	bf00      	nop
    3352:	370c      	adds	r7, #12
    3354:	46bd      	mov	sp, r7
    3356:	f85d 7b04 	ldr.w	r7, [sp], #4
    335a:	4770      	bx	lr

0000335c <hri_can_write_RXF0A_F0AI_bf>:
	tmp = (tmp & CAN_RXF0A_F0AI(mask)) >> CAN_RXF0A_F0AI_Pos;
	return tmp;
}

static inline void hri_can_write_RXF0A_F0AI_bf(const void *const hw, hri_can_rxf0a_reg_t data)
{
    335c:	b480      	push	{r7}
    335e:	b085      	sub	sp, #20
    3360:	af00      	add	r7, sp, #0
    3362:	6078      	str	r0, [r7, #4]
    3364:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	CAN_CRITICAL_SECTION_ENTER();
	tmp = ((Can *)hw)->RXF0A.reg;
    3366:	687b      	ldr	r3, [r7, #4]
    3368:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    336c:	60fb      	str	r3, [r7, #12]
	tmp &= ~CAN_RXF0A_F0AI_Msk;
    336e:	68fb      	ldr	r3, [r7, #12]
    3370:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    3374:	60fb      	str	r3, [r7, #12]
	tmp |= CAN_RXF0A_F0AI(data);
    3376:	683b      	ldr	r3, [r7, #0]
    3378:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    337c:	68fa      	ldr	r2, [r7, #12]
    337e:	4313      	orrs	r3, r2
    3380:	60fb      	str	r3, [r7, #12]
	((Can *)hw)->RXF0A.reg = tmp;
    3382:	687b      	ldr	r3, [r7, #4]
    3384:	68fa      	ldr	r2, [r7, #12]
    3386:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	CAN_CRITICAL_SECTION_LEAVE();
}
    338a:	bf00      	nop
    338c:	3714      	adds	r7, #20
    338e:	46bd      	mov	sp, r7
    3390:	f85d 7b04 	ldr.w	r7, [sp], #4
    3394:	4770      	bx	lr

00003396 <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    3396:	b480      	push	{r7}
    3398:	b083      	sub	sp, #12
    339a:	af00      	add	r7, sp, #0
    339c:	6078      	str	r0, [r7, #4]
    339e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    33a0:	687b      	ldr	r3, [r7, #4]
    33a2:	683a      	ldr	r2, [r7, #0]
    33a4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    33a8:	bf00      	nop
    33aa:	370c      	adds	r7, #12
    33ac:	46bd      	mov	sp, r7
    33ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    33b2:	4770      	bx	lr

000033b4 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    33b4:	b480      	push	{r7}
    33b6:	b083      	sub	sp, #12
    33b8:	af00      	add	r7, sp, #0
    33ba:	6078      	str	r0, [r7, #4]
    33bc:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    33be:	687b      	ldr	r3, [r7, #4]
    33c0:	683a      	ldr	r2, [r7, #0]
    33c2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    33c6:	bf00      	nop
    33c8:	370c      	adds	r7, #12
    33ca:	46bd      	mov	sp, r7
    33cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    33d0:	4770      	bx	lr

000033d2 <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    33d2:	b480      	push	{r7}
    33d4:	b083      	sub	sp, #12
    33d6:	af00      	add	r7, sp, #0
    33d8:	6078      	str	r0, [r7, #4]
    33da:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    33dc:	687b      	ldr	r3, [r7, #4]
    33de:	683a      	ldr	r2, [r7, #0]
    33e0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    33e4:	bf00      	nop
    33e6:	370c      	adds	r7, #12
    33e8:	46bd      	mov	sp, r7
    33ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    33ee:	4770      	bx	lr

000033f0 <hri_can_write_TXBAR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBAR_reg(const void *const hw, hri_can_txbar_reg_t data)
{
    33f0:	b480      	push	{r7}
    33f2:	b083      	sub	sp, #12
    33f4:	af00      	add	r7, sp, #0
    33f6:	6078      	str	r0, [r7, #4]
    33f8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBAR.reg = data;
    33fa:	687b      	ldr	r3, [r7, #4]
    33fc:	683a      	ldr	r2, [r7, #0]
    33fe:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3402:	bf00      	nop
    3404:	370c      	adds	r7, #12
    3406:	46bd      	mov	sp, r7
    3408:	f85d 7b04 	ldr.w	r7, [sp], #4
    340c:	4770      	bx	lr

0000340e <hri_can_write_TXBTIE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBTIE_reg(const void *const hw, hri_can_txbtie_reg_t data)
{
    340e:	b480      	push	{r7}
    3410:	b083      	sub	sp, #12
    3412:	af00      	add	r7, sp, #0
    3414:	6078      	str	r0, [r7, #4]
    3416:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBTIE.reg = data;
    3418:	687b      	ldr	r3, [r7, #4]
    341a:	683a      	ldr	r2, [r7, #0]
    341c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3420:	bf00      	nop
    3422:	370c      	adds	r7, #12
    3424:	46bd      	mov	sp, r7
    3426:	f85d 7b04 	ldr.w	r7, [sp], #4
    342a:	4770      	bx	lr

0000342c <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    342c:	b480      	push	{r7}
    342e:	b083      	sub	sp, #12
    3430:	af00      	add	r7, sp, #0
    3432:	6078      	str	r0, [r7, #4]
    3434:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    3436:	687b      	ldr	r3, [r7, #4]
    3438:	683a      	ldr	r2, [r7, #0]
    343a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    343e:	bf00      	nop
    3440:	370c      	adds	r7, #12
    3442:	46bd      	mov	sp, r7
    3444:	f85d 7b04 	ldr.w	r7, [sp], #4
    3448:	4770      	bx	lr
	...

0000344c <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    344c:	b580      	push	{r7, lr}
    344e:	b082      	sub	sp, #8
    3450:	af00      	add	r7, sp, #0
    3452:	6078      	str	r0, [r7, #4]
    3454:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    3456:	687b      	ldr	r3, [r7, #4]
    3458:	683a      	ldr	r2, [r7, #0]
    345a:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    345c:	687b      	ldr	r3, [r7, #4]
    345e:	681b      	ldr	r3, [r3, #0]
    3460:	4618      	mov	r0, r3
    3462:	4b55      	ldr	r3, [pc, #340]	; (35b8 <_can_async_init+0x16c>)
    3464:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    3466:	bf00      	nop
    3468:	687b      	ldr	r3, [r7, #4]
    346a:	681b      	ldr	r3, [r3, #0]
    346c:	4618      	mov	r0, r3
    346e:	4b53      	ldr	r3, [pc, #332]	; (35bc <_can_async_init+0x170>)
    3470:	4798      	blx	r3
    3472:	4603      	mov	r3, r0
    3474:	f083 0301 	eor.w	r3, r3, #1
    3478:	b2db      	uxtb	r3, r3
    347a:	2b00      	cmp	r3, #0
    347c:	d1f4      	bne.n	3468 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    347e:	687b      	ldr	r3, [r7, #4]
    3480:	681b      	ldr	r3, [r3, #0]
    3482:	4618      	mov	r0, r3
    3484:	4b4e      	ldr	r3, [pc, #312]	; (35c0 <_can_async_init+0x174>)
    3486:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    3488:	683b      	ldr	r3, [r7, #0]
    348a:	4a4e      	ldr	r2, [pc, #312]	; (35c4 <_can_async_init+0x178>)
    348c:	4293      	cmp	r3, r2
    348e:	d17a      	bne.n	3586 <_can_async_init+0x13a>
		_can1_dev    = dev;
    3490:	4a4d      	ldr	r2, [pc, #308]	; (35c8 <_can_async_init+0x17c>)
    3492:	687b      	ldr	r3, [r7, #4]
    3494:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    3496:	687b      	ldr	r3, [r7, #4]
    3498:	4a4c      	ldr	r2, [pc, #304]	; (35cc <_can_async_init+0x180>)
    349a:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    349c:	687b      	ldr	r3, [r7, #4]
    349e:	681b      	ldr	r3, [r3, #0]
    34a0:	f44f 7140 	mov.w	r1, #768	; 0x300
    34a4:	4618      	mov	r0, r3
    34a6:	4b4a      	ldr	r3, [pc, #296]	; (35d0 <_can_async_init+0x184>)
    34a8:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    34aa:	687b      	ldr	r3, [r7, #4]
    34ac:	681b      	ldr	r3, [r3, #0]
    34ae:	2102      	movs	r1, #2
    34b0:	4618      	mov	r0, r3
    34b2:	4b48      	ldr	r3, [pc, #288]	; (35d4 <_can_async_init+0x188>)
    34b4:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    34b6:	687b      	ldr	r3, [r7, #4]
    34b8:	681b      	ldr	r3, [r3, #0]
    34ba:	4947      	ldr	r1, [pc, #284]	; (35d8 <_can_async_init+0x18c>)
    34bc:	4618      	mov	r0, r3
    34be:	4b47      	ldr	r3, [pc, #284]	; (35dc <_can_async_init+0x190>)
    34c0:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    34c2:	687b      	ldr	r3, [r7, #4]
    34c4:	681b      	ldr	r3, [r3, #0]
    34c6:	4946      	ldr	r1, [pc, #280]	; (35e0 <_can_async_init+0x194>)
    34c8:	4618      	mov	r0, r3
    34ca:	4b46      	ldr	r3, [pc, #280]	; (35e4 <_can_async_init+0x198>)
    34cc:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    34ce:	687b      	ldr	r3, [r7, #4]
    34d0:	681a      	ldr	r2, [r3, #0]
    34d2:	4b45      	ldr	r3, [pc, #276]	; (35e8 <_can_async_init+0x19c>)
    34d4:	b29b      	uxth	r3, r3
    34d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    34da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    34de:	4619      	mov	r1, r3
    34e0:	4610      	mov	r0, r2
    34e2:	4b42      	ldr	r3, [pc, #264]	; (35ec <_can_async_init+0x1a0>)
    34e4:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    34e6:	687b      	ldr	r3, [r7, #4]
    34e8:	681b      	ldr	r3, [r3, #0]
    34ea:	2107      	movs	r1, #7
    34ec:	4618      	mov	r0, r3
    34ee:	4b40      	ldr	r3, [pc, #256]	; (35f0 <_can_async_init+0x1a4>)
    34f0:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    34f2:	687b      	ldr	r3, [r7, #4]
    34f4:	681b      	ldr	r3, [r3, #0]
    34f6:	2107      	movs	r1, #7
    34f8:	4618      	mov	r0, r3
    34fa:	4b3e      	ldr	r3, [pc, #248]	; (35f4 <_can_async_init+0x1a8>)
    34fc:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    34fe:	687b      	ldr	r3, [r7, #4]
    3500:	681a      	ldr	r2, [r3, #0]
    3502:	4b3d      	ldr	r3, [pc, #244]	; (35f8 <_can_async_init+0x1ac>)
    3504:	b29b      	uxth	r3, r3
    3506:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    350a:	4619      	mov	r1, r3
    350c:	4610      	mov	r0, r2
    350e:	4b3b      	ldr	r3, [pc, #236]	; (35fc <_can_async_init+0x1b0>)
    3510:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    3512:	687b      	ldr	r3, [r7, #4]
    3514:	681a      	ldr	r2, [r3, #0]
    3516:	4b3a      	ldr	r3, [pc, #232]	; (3600 <_can_async_init+0x1b4>)
    3518:	b29b      	uxth	r3, r3
    351a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    351e:	4619      	mov	r1, r3
    3520:	4610      	mov	r0, r2
    3522:	4b38      	ldr	r3, [pc, #224]	; (3604 <_can_async_init+0x1b8>)
    3524:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    3526:	687b      	ldr	r3, [r7, #4]
    3528:	681b      	ldr	r3, [r3, #0]
    352a:	2108      	movs	r1, #8
    352c:	4618      	mov	r0, r3
    352e:	4b36      	ldr	r3, [pc, #216]	; (3608 <_can_async_init+0x1bc>)
    3530:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    3532:	687b      	ldr	r3, [r7, #4]
    3534:	681a      	ldr	r2, [r3, #0]
    3536:	4b35      	ldr	r3, [pc, #212]	; (360c <_can_async_init+0x1c0>)
    3538:	b29b      	uxth	r3, r3
    353a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    353e:	4619      	mov	r1, r3
    3540:	4610      	mov	r0, r2
    3542:	4b33      	ldr	r3, [pc, #204]	; (3610 <_can_async_init+0x1c4>)
    3544:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    3546:	687b      	ldr	r3, [r7, #4]
    3548:	681a      	ldr	r2, [r3, #0]
    354a:	4b32      	ldr	r3, [pc, #200]	; (3614 <_can_async_init+0x1c8>)
    354c:	b29b      	uxth	r3, r3
    354e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3552:	4619      	mov	r1, r3
    3554:	4610      	mov	r0, r2
    3556:	4b30      	ldr	r3, [pc, #192]	; (3618 <_can_async_init+0x1cc>)
    3558:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    355a:	687b      	ldr	r3, [r7, #4]
    355c:	681b      	ldr	r3, [r3, #0]
    355e:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    3562:	4618      	mov	r0, r3
    3564:	4b2d      	ldr	r3, [pc, #180]	; (361c <_can_async_init+0x1d0>)
    3566:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    3568:	204f      	movs	r0, #79	; 0x4f
    356a:	4b2d      	ldr	r3, [pc, #180]	; (3620 <_can_async_init+0x1d4>)
    356c:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    356e:	204f      	movs	r0, #79	; 0x4f
    3570:	4b2c      	ldr	r3, [pc, #176]	; (3624 <_can_async_init+0x1d8>)
    3572:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    3574:	204f      	movs	r0, #79	; 0x4f
    3576:	4b2c      	ldr	r3, [pc, #176]	; (3628 <_can_async_init+0x1dc>)
    3578:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    357a:	687b      	ldr	r3, [r7, #4]
    357c:	681b      	ldr	r3, [r3, #0]
    357e:	2101      	movs	r1, #1
    3580:	4618      	mov	r0, r3
    3582:	4b2a      	ldr	r3, [pc, #168]	; (362c <_can_async_init+0x1e0>)
    3584:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    3586:	687b      	ldr	r3, [r7, #4]
    3588:	681b      	ldr	r3, [r3, #0]
    358a:	4618      	mov	r0, r3
    358c:	4b28      	ldr	r3, [pc, #160]	; (3630 <_can_async_init+0x1e4>)
    358e:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    3590:	687b      	ldr	r3, [r7, #4]
    3592:	681b      	ldr	r3, [r3, #0]
    3594:	4618      	mov	r0, r3
    3596:	4b27      	ldr	r3, [pc, #156]	; (3634 <_can_async_init+0x1e8>)
    3598:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    359a:	bf00      	nop
    359c:	687b      	ldr	r3, [r7, #4]
    359e:	681b      	ldr	r3, [r3, #0]
    35a0:	4618      	mov	r0, r3
    35a2:	4b06      	ldr	r3, [pc, #24]	; (35bc <_can_async_init+0x170>)
    35a4:	4798      	blx	r3
    35a6:	4603      	mov	r3, r0
    35a8:	2b00      	cmp	r3, #0
    35aa:	d1f7      	bne.n	359c <_can_async_init+0x150>
	};

	return ERR_NONE;
    35ac:	2300      	movs	r3, #0
}
    35ae:	4618      	mov	r0, r3
    35b0:	3708      	adds	r7, #8
    35b2:	46bd      	mov	sp, r7
    35b4:	bd80      	pop	{r7, pc}
    35b6:	bf00      	nop
    35b8:	0000307d 	.word	0x0000307d
    35bc:	0000309d 	.word	0x0000309d
    35c0:	000030eb 	.word	0x000030eb
    35c4:	42000400 	.word	0x42000400
    35c8:	20000ce0 	.word	0x20000ce0
    35cc:	20000004 	.word	0x20000004
    35d0:	0000318b 	.word	0x0000318b
    35d4:	00003045 	.word	0x00003045
    35d8:	00010c01 	.word	0x00010c01
    35dc:	000031ad 	.word	0x000031ad
    35e0:	00010c10 	.word	0x00010c10
    35e4:	00003061 	.word	0x00003061
    35e8:	20001cb8 	.word	0x20001cb8
    35ec:	0000333f 	.word	0x0000333f
    35f0:	00003397 	.word	0x00003397
    35f4:	000033d3 	.word	0x000033d3
    35f8:	20001c70 	.word	0x20001c70
    35fc:	000033b5 	.word	0x000033b5
    3600:	20000c40 	.word	0x20000c40
    3604:	0000342d 	.word	0x0000342d
    3608:	000032c7 	.word	0x000032c7
    360c:	20000c50 	.word	0x20000c50
    3610:	000032e5 	.word	0x000032e5
    3614:	20000cd0 	.word	0x20000cd0
    3618:	00003303 	.word	0x00003303
    361c:	00003321 	.word	0x00003321
    3620:	00002f15 	.word	0x00002f15
    3624:	00002f59 	.word	0x00002f59
    3628:	00002ed9 	.word	0x00002ed9
    362c:	000032ab 	.word	0x000032ab
    3630:	0000310b 	.word	0x0000310b
    3634:	000030cb 	.word	0x000030cb

00003638 <_can_async_enable>:

/**
 * \brief Enable CAN
 */
int32_t _can_async_enable(struct _can_async_device *const dev)
{
    3638:	b580      	push	{r7, lr}
    363a:	b082      	sub	sp, #8
    363c:	af00      	add	r7, sp, #0
    363e:	6078      	str	r0, [r7, #4]
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    3640:	687b      	ldr	r3, [r7, #4]
    3642:	681b      	ldr	r3, [r3, #0]
    3644:	4618      	mov	r0, r3
    3646:	4b03      	ldr	r3, [pc, #12]	; (3654 <_can_async_enable+0x1c>)
    3648:	4798      	blx	r3
	return ERR_NONE;
    364a:	2300      	movs	r3, #0
}
    364c:	4618      	mov	r0, r3
    364e:	3708      	adds	r7, #8
    3650:	46bd      	mov	sp, r7
    3652:	bd80      	pop	{r7, pc}
    3654:	000030cb 	.word	0x000030cb

00003658 <_can_async_read>:

/**
 * \brief Read a CAN message
 */
int32_t _can_async_read(struct _can_async_device *const dev, struct can_message *msg)
{
    3658:	b590      	push	{r4, r7, lr}
    365a:	b089      	sub	sp, #36	; 0x24
    365c:	af00      	add	r7, sp, #0
    365e:	6078      	str	r0, [r7, #4]
    3660:	6039      	str	r1, [r7, #0]
	struct _can_rx_fifo_entry *f = NULL;
    3662:	2300      	movs	r3, #0
    3664:	61fb      	str	r3, [r7, #28]
	hri_can_rxf0s_reg_t        get_index;

	if (!hri_can_read_RXF0S_F0FL_bf(dev->hw)) {
    3666:	687b      	ldr	r3, [r7, #4]
    3668:	681b      	ldr	r3, [r3, #0]
    366a:	4618      	mov	r0, r3
    366c:	4b37      	ldr	r3, [pc, #220]	; (374c <_can_async_read+0xf4>)
    366e:	4798      	blx	r3
    3670:	4603      	mov	r3, r0
    3672:	2b00      	cmp	r3, #0
    3674:	d102      	bne.n	367c <_can_async_read+0x24>
		return ERR_NOT_FOUND;
    3676:	f06f 0309 	mvn.w	r3, #9
    367a:	e063      	b.n	3744 <_can_async_read+0xec>
	}

	get_index = hri_can_read_RXF0S_F0GI_bf(dev->hw);
    367c:	687b      	ldr	r3, [r7, #4]
    367e:	681b      	ldr	r3, [r3, #0]
    3680:	4618      	mov	r0, r3
    3682:	4b33      	ldr	r3, [pc, #204]	; (3750 <_can_async_read+0xf8>)
    3684:	4798      	blx	r3
    3686:	61b8      	str	r0, [r7, #24]
	if (dev->hw == CAN0) {
		f = (struct _can_rx_fifo_entry *)(can0_rx_fifo + get_index * CONF_CAN0_F0DS);
	}
#endif
#ifdef CONF_CAN1_ENABLED
	if (dev->hw == CAN1) {
    3688:	687b      	ldr	r3, [r7, #4]
    368a:	681b      	ldr	r3, [r3, #0]
    368c:	4a31      	ldr	r2, [pc, #196]	; (3754 <_can_async_read+0xfc>)
    368e:	4293      	cmp	r3, r2
    3690:	d108      	bne.n	36a4 <_can_async_read+0x4c>
		f = (struct _can_rx_fifo_entry *)(can1_rx_fifo + get_index * CONF_CAN1_F0DS);
    3692:	69ba      	ldr	r2, [r7, #24]
    3694:	4613      	mov	r3, r2
    3696:	00db      	lsls	r3, r3, #3
    3698:	4413      	add	r3, r2
    369a:	00db      	lsls	r3, r3, #3
    369c:	461a      	mov	r2, r3
    369e:	4b2e      	ldr	r3, [pc, #184]	; (3758 <_can_async_read+0x100>)
    36a0:	4413      	add	r3, r2
    36a2:	61fb      	str	r3, [r7, #28]
	}
#endif

	if (f == NULL) {
    36a4:	69fb      	ldr	r3, [r7, #28]
    36a6:	2b00      	cmp	r3, #0
    36a8:	d102      	bne.n	36b0 <_can_async_read+0x58>
		return ERR_NO_RESOURCE;
    36aa:	f06f 031b 	mvn.w	r3, #27
    36ae:	e049      	b.n	3744 <_can_async_read+0xec>
	}

	if (f->R0.bit.XTD == 1) {
    36b0:	69fb      	ldr	r3, [r7, #28]
    36b2:	681b      	ldr	r3, [r3, #0]
    36b4:	f3c3 7380 	ubfx	r3, r3, #30, #1
    36b8:	b2db      	uxtb	r3, r3
    36ba:	2b01      	cmp	r3, #1
    36bc:	d10a      	bne.n	36d4 <_can_async_read+0x7c>
		msg->fmt = CAN_FMT_EXTID;
    36be:	683b      	ldr	r3, [r7, #0]
    36c0:	2201      	movs	r2, #1
    36c2:	735a      	strb	r2, [r3, #13]
		msg->id  = f->R0.bit.ID;
    36c4:	69fb      	ldr	r3, [r7, #28]
    36c6:	681b      	ldr	r3, [r3, #0]
    36c8:	f3c3 031c 	ubfx	r3, r3, #0, #29
    36cc:	461a      	mov	r2, r3
    36ce:	683b      	ldr	r3, [r7, #0]
    36d0:	601a      	str	r2, [r3, #0]
    36d2:	e00a      	b.n	36ea <_can_async_read+0x92>
	} else {
		msg->fmt = CAN_FMT_STDID;
    36d4:	683b      	ldr	r3, [r7, #0]
    36d6:	2200      	movs	r2, #0
    36d8:	735a      	strb	r2, [r3, #13]
		/* A standard identifier is stored into ID[28:18] */
		msg->id = f->R0.bit.ID >> 18;
    36da:	69fb      	ldr	r3, [r7, #28]
    36dc:	681b      	ldr	r3, [r3, #0]
    36de:	f3c3 031c 	ubfx	r3, r3, #0, #29
    36e2:	149b      	asrs	r3, r3, #18
    36e4:	461a      	mov	r2, r3
    36e6:	683b      	ldr	r3, [r7, #0]
    36e8:	601a      	str	r2, [r3, #0]
	}

	if (f->R0.bit.RTR == 1) {
    36ea:	69fb      	ldr	r3, [r7, #28]
    36ec:	681b      	ldr	r3, [r3, #0]
    36ee:	f3c3 7340 	ubfx	r3, r3, #29, #1
    36f2:	b2db      	uxtb	r3, r3
    36f4:	2b01      	cmp	r3, #1
    36f6:	d102      	bne.n	36fe <_can_async_read+0xa6>
		msg->type = CAN_TYPE_REMOTE;
    36f8:	683b      	ldr	r3, [r7, #0]
    36fa:	2201      	movs	r2, #1
    36fc:	711a      	strb	r2, [r3, #4]
	}

	const uint8_t dlc2len[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 12, 16, 20, 24, 32, 48, 64};
    36fe:	4b17      	ldr	r3, [pc, #92]	; (375c <_can_async_read+0x104>)
    3700:	f107 0408 	add.w	r4, r7, #8
    3704:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    3706:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	msg->len                = dlc2len[f->R1.bit.DLC];
    370a:	69fb      	ldr	r3, [r7, #28]
    370c:	685b      	ldr	r3, [r3, #4]
    370e:	f3c3 4303 	ubfx	r3, r3, #16, #4
    3712:	b2db      	uxtb	r3, r3
    3714:	f107 0220 	add.w	r2, r7, #32
    3718:	4413      	add	r3, r2
    371a:	f813 2c18 	ldrb.w	r2, [r3, #-24]
    371e:	683b      	ldr	r3, [r7, #0]
    3720:	731a      	strb	r2, [r3, #12]

	memcpy(msg->data, f->data, msg->len);
    3722:	683b      	ldr	r3, [r7, #0]
    3724:	6898      	ldr	r0, [r3, #8]
    3726:	69fb      	ldr	r3, [r7, #28]
    3728:	f103 0108 	add.w	r1, r3, #8
    372c:	683b      	ldr	r3, [r7, #0]
    372e:	7b1b      	ldrb	r3, [r3, #12]
    3730:	461a      	mov	r2, r3
    3732:	4b0b      	ldr	r3, [pc, #44]	; (3760 <_can_async_read+0x108>)
    3734:	4798      	blx	r3

	hri_can_write_RXF0A_F0AI_bf(dev->hw, get_index);
    3736:	687b      	ldr	r3, [r7, #4]
    3738:	681b      	ldr	r3, [r3, #0]
    373a:	69b9      	ldr	r1, [r7, #24]
    373c:	4618      	mov	r0, r3
    373e:	4b09      	ldr	r3, [pc, #36]	; (3764 <_can_async_read+0x10c>)
    3740:	4798      	blx	r3

	return ERR_NONE;
    3742:	2300      	movs	r3, #0
}
    3744:	4618      	mov	r0, r3
    3746:	3724      	adds	r7, #36	; 0x24
    3748:	46bd      	mov	sp, r7
    374a:	bd90      	pop	{r4, r7, pc}
    374c:	00002fbd 	.word	0x00002fbd
    3750:	00002fdb 	.word	0x00002fdb
    3754:	42000400 	.word	0x42000400
    3758:	20001cb8 	.word	0x20001cb8
    375c:	00013204 	.word	0x00013204
    3760:	00012de5 	.word	0x00012de5
    3764:	0000335d 	.word	0x0000335d

00003768 <_can_async_write>:

/**
 * \brief Write a CAN message
 */
int32_t _can_async_write(struct _can_async_device *const dev, struct can_message *msg)
{
    3768:	b590      	push	{r4, r7, lr}
    376a:	b085      	sub	sp, #20
    376c:	af00      	add	r7, sp, #0
    376e:	6078      	str	r0, [r7, #4]
    3770:	6039      	str	r1, [r7, #0]
	struct _can_tx_fifo_entry *f = NULL;
    3772:	2300      	movs	r3, #0
    3774:	60fb      	str	r3, [r7, #12]
	hri_can_txfqs_reg_t        put_index;

	if (hri_can_get_TXFQS_TFQF_bit(dev->hw)) {
    3776:	687b      	ldr	r3, [r7, #4]
    3778:	681b      	ldr	r3, [r3, #0]
    377a:	4618      	mov	r0, r3
    377c:	4b61      	ldr	r3, [pc, #388]	; (3904 <_can_async_write+0x19c>)
    377e:	4798      	blx	r3
    3780:	4603      	mov	r3, r0
    3782:	2b00      	cmp	r3, #0
    3784:	d002      	beq.n	378c <_can_async_write+0x24>
		return ERR_NO_RESOURCE;
    3786:	f06f 031b 	mvn.w	r3, #27
    378a:	e0b7      	b.n	38fc <_can_async_write+0x194>
	}

	put_index = hri_can_read_TXFQS_TFQPI_bf(dev->hw);
    378c:	687b      	ldr	r3, [r7, #4]
    378e:	681b      	ldr	r3, [r3, #0]
    3790:	4618      	mov	r0, r3
    3792:	4b5d      	ldr	r3, [pc, #372]	; (3908 <_can_async_write+0x1a0>)
    3794:	4798      	blx	r3
    3796:	60b8      	str	r0, [r7, #8]
	if (dev->hw == CAN0) {
		f = (struct _can_tx_fifo_entry *)(can0_tx_fifo + put_index * CONF_CAN0_TBDS);
	}
#endif
#ifdef CONF_CAN1_ENABLED
	if (dev->hw == CAN1) {
    3798:	687b      	ldr	r3, [r7, #4]
    379a:	681b      	ldr	r3, [r3, #0]
    379c:	4a5b      	ldr	r2, [pc, #364]	; (390c <_can_async_write+0x1a4>)
    379e:	4293      	cmp	r3, r2
    37a0:	d108      	bne.n	37b4 <_can_async_write+0x4c>
		f = (struct _can_tx_fifo_entry *)(can1_tx_fifo + put_index * CONF_CAN1_TBDS);
    37a2:	68ba      	ldr	r2, [r7, #8]
    37a4:	4613      	mov	r3, r2
    37a6:	00db      	lsls	r3, r3, #3
    37a8:	4413      	add	r3, r2
    37aa:	00db      	lsls	r3, r3, #3
    37ac:	461a      	mov	r2, r3
    37ae:	4b58      	ldr	r3, [pc, #352]	; (3910 <_can_async_write+0x1a8>)
    37b0:	4413      	add	r3, r2
    37b2:	60fb      	str	r3, [r7, #12]
	}
#endif
	if (f == NULL) {
    37b4:	68fb      	ldr	r3, [r7, #12]
    37b6:	2b00      	cmp	r3, #0
    37b8:	d102      	bne.n	37c0 <_can_async_write+0x58>
		return ERR_NO_RESOURCE;
    37ba:	f06f 031b 	mvn.w	r3, #27
    37be:	e09d      	b.n	38fc <_can_async_write+0x194>
	}

	if (msg->fmt == CAN_FMT_EXTID) {
    37c0:	683b      	ldr	r3, [r7, #0]
    37c2:	7b5b      	ldrb	r3, [r3, #13]
    37c4:	2b01      	cmp	r3, #1
    37c6:	d109      	bne.n	37dc <_can_async_write+0x74>
		f->T0.val     = msg->id;
    37c8:	683b      	ldr	r3, [r7, #0]
    37ca:	681a      	ldr	r2, [r3, #0]
    37cc:	68fb      	ldr	r3, [r7, #12]
    37ce:	601a      	str	r2, [r3, #0]
		f->T0.bit.XTD = 1;
    37d0:	68fa      	ldr	r2, [r7, #12]
    37d2:	6813      	ldr	r3, [r2, #0]
    37d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    37d8:	6013      	str	r3, [r2, #0]
    37da:	e004      	b.n	37e6 <_can_async_write+0x7e>
	} else {
		/* A standard identifier is stored into ID[28:18] */
		f->T0.val = msg->id << 18;
    37dc:	683b      	ldr	r3, [r7, #0]
    37de:	681b      	ldr	r3, [r3, #0]
    37e0:	049a      	lsls	r2, r3, #18
    37e2:	68fb      	ldr	r3, [r7, #12]
    37e4:	601a      	str	r2, [r3, #0]
	}

	if (msg->len <= 8) {
    37e6:	683b      	ldr	r3, [r7, #0]
    37e8:	7b1b      	ldrb	r3, [r3, #12]
    37ea:	2b08      	cmp	r3, #8
    37ec:	d80a      	bhi.n	3804 <_can_async_write+0x9c>
		f->T1.bit.DLC = msg->len;
    37ee:	683b      	ldr	r3, [r7, #0]
    37f0:	7b1b      	ldrb	r3, [r3, #12]
    37f2:	f003 030f 	and.w	r3, r3, #15
    37f6:	b2d9      	uxtb	r1, r3
    37f8:	68fa      	ldr	r2, [r7, #12]
    37fa:	6853      	ldr	r3, [r2, #4]
    37fc:	f361 4313 	bfi	r3, r1, #16, #4
    3800:	6053      	str	r3, [r2, #4]
    3802:	e04a      	b.n	389a <_can_async_write+0x132>
	} else if (msg->len <= 12) {
    3804:	683b      	ldr	r3, [r7, #0]
    3806:	7b1b      	ldrb	r3, [r3, #12]
    3808:	2b0c      	cmp	r3, #12
    380a:	d806      	bhi.n	381a <_can_async_write+0xb2>
		f->T1.bit.DLC = 0x9;
    380c:	68fa      	ldr	r2, [r7, #12]
    380e:	6853      	ldr	r3, [r2, #4]
    3810:	2109      	movs	r1, #9
    3812:	f361 4313 	bfi	r3, r1, #16, #4
    3816:	6053      	str	r3, [r2, #4]
    3818:	e03f      	b.n	389a <_can_async_write+0x132>
	} else if (msg->len <= 16) {
    381a:	683b      	ldr	r3, [r7, #0]
    381c:	7b1b      	ldrb	r3, [r3, #12]
    381e:	2b10      	cmp	r3, #16
    3820:	d806      	bhi.n	3830 <_can_async_write+0xc8>
		f->T1.bit.DLC = 0xA;
    3822:	68fa      	ldr	r2, [r7, #12]
    3824:	6853      	ldr	r3, [r2, #4]
    3826:	210a      	movs	r1, #10
    3828:	f361 4313 	bfi	r3, r1, #16, #4
    382c:	6053      	str	r3, [r2, #4]
    382e:	e034      	b.n	389a <_can_async_write+0x132>
	} else if (msg->len <= 20) {
    3830:	683b      	ldr	r3, [r7, #0]
    3832:	7b1b      	ldrb	r3, [r3, #12]
    3834:	2b14      	cmp	r3, #20
    3836:	d806      	bhi.n	3846 <_can_async_write+0xde>
		f->T1.bit.DLC = 0xB;
    3838:	68fa      	ldr	r2, [r7, #12]
    383a:	6853      	ldr	r3, [r2, #4]
    383c:	210b      	movs	r1, #11
    383e:	f361 4313 	bfi	r3, r1, #16, #4
    3842:	6053      	str	r3, [r2, #4]
    3844:	e029      	b.n	389a <_can_async_write+0x132>
	} else if (msg->len <= 24) {
    3846:	683b      	ldr	r3, [r7, #0]
    3848:	7b1b      	ldrb	r3, [r3, #12]
    384a:	2b18      	cmp	r3, #24
    384c:	d806      	bhi.n	385c <_can_async_write+0xf4>
		f->T1.bit.DLC = 0xC;
    384e:	68fa      	ldr	r2, [r7, #12]
    3850:	6853      	ldr	r3, [r2, #4]
    3852:	210c      	movs	r1, #12
    3854:	f361 4313 	bfi	r3, r1, #16, #4
    3858:	6053      	str	r3, [r2, #4]
    385a:	e01e      	b.n	389a <_can_async_write+0x132>
	} else if (msg->len <= 32) {
    385c:	683b      	ldr	r3, [r7, #0]
    385e:	7b1b      	ldrb	r3, [r3, #12]
    3860:	2b20      	cmp	r3, #32
    3862:	d806      	bhi.n	3872 <_can_async_write+0x10a>
		f->T1.bit.DLC = 0xD;
    3864:	68fa      	ldr	r2, [r7, #12]
    3866:	6853      	ldr	r3, [r2, #4]
    3868:	210d      	movs	r1, #13
    386a:	f361 4313 	bfi	r3, r1, #16, #4
    386e:	6053      	str	r3, [r2, #4]
    3870:	e013      	b.n	389a <_can_async_write+0x132>
	} else if (msg->len <= 48) {
    3872:	683b      	ldr	r3, [r7, #0]
    3874:	7b1b      	ldrb	r3, [r3, #12]
    3876:	2b30      	cmp	r3, #48	; 0x30
    3878:	d806      	bhi.n	3888 <_can_async_write+0x120>
		f->T1.bit.DLC = 0xE;
    387a:	68fa      	ldr	r2, [r7, #12]
    387c:	6853      	ldr	r3, [r2, #4]
    387e:	210e      	movs	r1, #14
    3880:	f361 4313 	bfi	r3, r1, #16, #4
    3884:	6053      	str	r3, [r2, #4]
    3886:	e008      	b.n	389a <_can_async_write+0x132>
	} else if (msg->len <= 64) {
    3888:	683b      	ldr	r3, [r7, #0]
    388a:	7b1b      	ldrb	r3, [r3, #12]
    388c:	2b40      	cmp	r3, #64	; 0x40
    388e:	d804      	bhi.n	389a <_can_async_write+0x132>
		f->T1.bit.DLC = 0xF;
    3890:	68fa      	ldr	r2, [r7, #12]
    3892:	6853      	ldr	r3, [r2, #4]
    3894:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
    3898:	6053      	str	r3, [r2, #4]
	}

	f->T1.bit.FDF = hri_can_get_CCCR_FDOE_bit(dev->hw);
    389a:	687b      	ldr	r3, [r7, #4]
    389c:	681b      	ldr	r3, [r3, #0]
    389e:	4618      	mov	r0, r3
    38a0:	4b1c      	ldr	r3, [pc, #112]	; (3914 <_can_async_write+0x1ac>)
    38a2:	4798      	blx	r3
    38a4:	4603      	mov	r3, r0
    38a6:	4619      	mov	r1, r3
    38a8:	68fa      	ldr	r2, [r7, #12]
    38aa:	6853      	ldr	r3, [r2, #4]
    38ac:	f361 5355 	bfi	r3, r1, #21, #1
    38b0:	6053      	str	r3, [r2, #4]
	f->T1.bit.BRS = hri_can_get_CCCR_BRSE_bit(dev->hw);
    38b2:	687b      	ldr	r3, [r7, #4]
    38b4:	681b      	ldr	r3, [r3, #0]
    38b6:	4618      	mov	r0, r3
    38b8:	4b17      	ldr	r3, [pc, #92]	; (3918 <_can_async_write+0x1b0>)
    38ba:	4798      	blx	r3
    38bc:	4603      	mov	r3, r0
    38be:	4619      	mov	r1, r3
    38c0:	68fa      	ldr	r2, [r7, #12]
    38c2:	6853      	ldr	r3, [r2, #4]
    38c4:	f361 5314 	bfi	r3, r1, #20, #1
    38c8:	6053      	str	r3, [r2, #4]

	memcpy(f->data, msg->data, msg->len);
    38ca:	68fb      	ldr	r3, [r7, #12]
    38cc:	f103 0008 	add.w	r0, r3, #8
    38d0:	683b      	ldr	r3, [r7, #0]
    38d2:	6899      	ldr	r1, [r3, #8]
    38d4:	683b      	ldr	r3, [r7, #0]
    38d6:	7b1b      	ldrb	r3, [r3, #12]
    38d8:	461a      	mov	r2, r3
    38da:	4b10      	ldr	r3, [pc, #64]	; (391c <_can_async_write+0x1b4>)
    38dc:	4798      	blx	r3

	hri_can_write_TXBAR_reg(dev->hw, 1 << hri_can_read_TXFQS_TFQPI_bf(dev->hw));
    38de:	687b      	ldr	r3, [r7, #4]
    38e0:	681c      	ldr	r4, [r3, #0]
    38e2:	687b      	ldr	r3, [r7, #4]
    38e4:	681b      	ldr	r3, [r3, #0]
    38e6:	4618      	mov	r0, r3
    38e8:	4b07      	ldr	r3, [pc, #28]	; (3908 <_can_async_write+0x1a0>)
    38ea:	4798      	blx	r3
    38ec:	4602      	mov	r2, r0
    38ee:	2301      	movs	r3, #1
    38f0:	4093      	lsls	r3, r2
    38f2:	4619      	mov	r1, r3
    38f4:	4620      	mov	r0, r4
    38f6:	4b0a      	ldr	r3, [pc, #40]	; (3920 <_can_async_write+0x1b8>)
    38f8:	4798      	blx	r3
	return ERR_NONE;
    38fa:	2300      	movs	r3, #0
}
    38fc:	4618      	mov	r0, r3
    38fe:	3714      	adds	r7, #20
    3900:	46bd      	mov	sp, r7
    3902:	bd90      	pop	{r4, r7, pc}
    3904:	00002ffb 	.word	0x00002ffb
    3908:	00003025 	.word	0x00003025
    390c:	42000400 	.word	0x42000400
    3910:	20001c70 	.word	0x20001c70
    3914:	0000312b 	.word	0x0000312b
    3918:	0000315b 	.word	0x0000315b
    391c:	00012de5 	.word	0x00012de5
    3920:	000033f1 	.word	0x000033f1

00003924 <_can_async_set_irq_state>:

/**
 * \brief Set CAN Interrupt State
 */
void _can_async_set_irq_state(struct _can_async_device *const dev, enum can_async_callback_type type, bool state)
{
    3924:	b580      	push	{r7, lr}
    3926:	b084      	sub	sp, #16
    3928:	af00      	add	r7, sp, #0
    392a:	6078      	str	r0, [r7, #4]
    392c:	460b      	mov	r3, r1
    392e:	70fb      	strb	r3, [r7, #3]
    3930:	4613      	mov	r3, r2
    3932:	70bb      	strb	r3, [r7, #2]
	uint32_t ie;

	if (type == CAN_ASYNC_RX_CB) {
    3934:	78fb      	ldrb	r3, [r7, #3]
    3936:	2b00      	cmp	r3, #0
    3938:	d107      	bne.n	394a <_can_async_set_irq_state+0x26>
		hri_can_write_IE_RF0NE_bit(dev->hw, state);
    393a:	687b      	ldr	r3, [r7, #4]
    393c:	681b      	ldr	r3, [r3, #0]
    393e:	78ba      	ldrb	r2, [r7, #2]
    3940:	4611      	mov	r1, r2
    3942:	4618      	mov	r0, r3
    3944:	4b15      	ldr	r3, [pc, #84]	; (399c <_can_async_set_irq_state+0x78>)
    3946:	4798      	blx	r3
	} else if (type == CAN_ASYNC_IRQ_CB) {
		ie = hri_can_get_IE_reg(dev->hw, CAN_IE_RF0NE | CAN_IE_TCE);
		hri_can_write_IE_reg(dev->hw, ie | CONF_CAN0_IE_REG);
	}

	return;
    3948:	e023      	b.n	3992 <_can_async_set_irq_state+0x6e>
	} else if (type == CAN_ASYNC_TX_CB) {
    394a:	78fb      	ldrb	r3, [r7, #3]
    394c:	2b01      	cmp	r3, #1
    394e:	d10e      	bne.n	396e <_can_async_set_irq_state+0x4a>
		hri_can_write_IE_TCE_bit(dev->hw, state);
    3950:	687b      	ldr	r3, [r7, #4]
    3952:	681b      	ldr	r3, [r3, #0]
    3954:	78ba      	ldrb	r2, [r7, #2]
    3956:	4611      	mov	r1, r2
    3958:	4618      	mov	r0, r3
    395a:	4b11      	ldr	r3, [pc, #68]	; (39a0 <_can_async_set_irq_state+0x7c>)
    395c:	4798      	blx	r3
		hri_can_write_TXBTIE_reg(dev->hw, CAN_TXBTIE_MASK);
    395e:	687b      	ldr	r3, [r7, #4]
    3960:	681b      	ldr	r3, [r3, #0]
    3962:	f04f 31ff 	mov.w	r1, #4294967295
    3966:	4618      	mov	r0, r3
    3968:	4b0e      	ldr	r3, [pc, #56]	; (39a4 <_can_async_set_irq_state+0x80>)
    396a:	4798      	blx	r3
	return;
    396c:	e011      	b.n	3992 <_can_async_set_irq_state+0x6e>
	} else if (type == CAN_ASYNC_IRQ_CB) {
    396e:	78fb      	ldrb	r3, [r7, #3]
    3970:	2b02      	cmp	r3, #2
    3972:	d10e      	bne.n	3992 <_can_async_set_irq_state+0x6e>
		ie = hri_can_get_IE_reg(dev->hw, CAN_IE_RF0NE | CAN_IE_TCE);
    3974:	687b      	ldr	r3, [r7, #4]
    3976:	681b      	ldr	r3, [r3, #0]
    3978:	f240 2101 	movw	r1, #513	; 0x201
    397c:	4618      	mov	r0, r3
    397e:	4b0a      	ldr	r3, [pc, #40]	; (39a8 <_can_async_set_irq_state+0x84>)
    3980:	4798      	blx	r3
    3982:	60f8      	str	r0, [r7, #12]
		hri_can_write_IE_reg(dev->hw, ie | CONF_CAN0_IE_REG);
    3984:	687b      	ldr	r3, [r7, #4]
    3986:	681b      	ldr	r3, [r3, #0]
    3988:	68f9      	ldr	r1, [r7, #12]
    398a:	4618      	mov	r0, r3
    398c:	4b07      	ldr	r3, [pc, #28]	; (39ac <_can_async_set_irq_state+0x88>)
    398e:	4798      	blx	r3
	return;
    3990:	bf00      	nop
    3992:	bf00      	nop
}
    3994:	3710      	adds	r7, #16
    3996:	46bd      	mov	sp, r7
    3998:	bd80      	pop	{r7, pc}
    399a:	bf00      	nop
    399c:	000031fd 	.word	0x000031fd
    39a0:	00003231 	.word	0x00003231
    39a4:	0000340f 	.word	0x0000340f
    39a8:	00003269 	.word	0x00003269
    39ac:	0000328f 	.word	0x0000328f

000039b0 <_can_async_set_filter>:
/**
 * \brief Set CAN to the specified mode
 */
int32_t _can_async_set_filter(struct _can_async_device *const dev, uint8_t index, enum can_format fmt,
                              struct can_filter *filter)
{
    39b0:	b480      	push	{r7}
    39b2:	b087      	sub	sp, #28
    39b4:	af00      	add	r7, sp, #0
    39b6:	60f8      	str	r0, [r7, #12]
    39b8:	607b      	str	r3, [r7, #4]
    39ba:	460b      	mov	r3, r1
    39bc:	72fb      	strb	r3, [r7, #11]
    39be:	4613      	mov	r3, r2
    39c0:	72bb      	strb	r3, [r7, #10]
	struct _can_standard_message_filter_element *sf;
	struct _can_extended_message_filter_element *ef;

	sf = &((struct _can_context *)dev->context)->rx_std_filter[index];
    39c2:	68fb      	ldr	r3, [r7, #12]
    39c4:	699b      	ldr	r3, [r3, #24]
    39c6:	68da      	ldr	r2, [r3, #12]
    39c8:	7afb      	ldrb	r3, [r7, #11]
    39ca:	009b      	lsls	r3, r3, #2
    39cc:	4413      	add	r3, r2
    39ce:	617b      	str	r3, [r7, #20]
	ef = &((struct _can_context *)dev->context)->rx_ext_filter[index];
    39d0:	68fb      	ldr	r3, [r7, #12]
    39d2:	699b      	ldr	r3, [r3, #24]
    39d4:	691a      	ldr	r2, [r3, #16]
    39d6:	7afb      	ldrb	r3, [r7, #11]
    39d8:	00db      	lsls	r3, r3, #3
    39da:	4413      	add	r3, r2
    39dc:	613b      	str	r3, [r7, #16]

	if (fmt == CAN_FMT_STDID) {
    39de:	7abb      	ldrb	r3, [r7, #10]
    39e0:	2b00      	cmp	r3, #0
    39e2:	d123      	bne.n	3a2c <_can_async_set_filter+0x7c>
		if (filter == NULL) {
    39e4:	687b      	ldr	r3, [r7, #4]
    39e6:	2b00      	cmp	r3, #0
    39e8:	d104      	bne.n	39f4 <_can_async_set_filter+0x44>
			sf->S0.val = 0;
    39ea:	697b      	ldr	r3, [r7, #20]
    39ec:	2200      	movs	r2, #0
    39ee:	601a      	str	r2, [r3, #0]
			return ERR_NONE;
    39f0:	2300      	movs	r3, #0
    39f2:	e03b      	b.n	3a6c <_can_async_set_filter+0xbc>
		}
		sf->S0.val       = filter->mask;
    39f4:	687b      	ldr	r3, [r7, #4]
    39f6:	685a      	ldr	r2, [r3, #4]
    39f8:	697b      	ldr	r3, [r7, #20]
    39fa:	601a      	str	r2, [r3, #0]
		sf->S0.bit.SFID1 = filter->id;
    39fc:	687b      	ldr	r3, [r7, #4]
    39fe:	681b      	ldr	r3, [r3, #0]
    3a00:	b29b      	uxth	r3, r3
    3a02:	f3c3 030a 	ubfx	r3, r3, #0, #11
    3a06:	b299      	uxth	r1, r3
    3a08:	697a      	ldr	r2, [r7, #20]
    3a0a:	6813      	ldr	r3, [r2, #0]
    3a0c:	f361 431a 	bfi	r3, r1, #16, #11
    3a10:	6013      	str	r3, [r2, #0]
		sf->S0.bit.SFT   = _CAN_SFT_CLASSIC;
    3a12:	697a      	ldr	r2, [r7, #20]
    3a14:	6813      	ldr	r3, [r2, #0]
    3a16:	2102      	movs	r1, #2
    3a18:	f361 739f 	bfi	r3, r1, #30, #2
    3a1c:	6013      	str	r3, [r2, #0]
		sf->S0.bit.SFEC  = _CAN_SFEC_STF0M;
    3a1e:	697a      	ldr	r2, [r7, #20]
    3a20:	6813      	ldr	r3, [r2, #0]
    3a22:	2101      	movs	r1, #1
    3a24:	f361 63dd 	bfi	r3, r1, #27, #3
    3a28:	6013      	str	r3, [r2, #0]
    3a2a:	e01e      	b.n	3a6a <_can_async_set_filter+0xba>
	} else if (fmt == CAN_FMT_EXTID) {
    3a2c:	7abb      	ldrb	r3, [r7, #10]
    3a2e:	2b01      	cmp	r3, #1
    3a30:	d11b      	bne.n	3a6a <_can_async_set_filter+0xba>
		if (filter == NULL) {
    3a32:	687b      	ldr	r3, [r7, #4]
    3a34:	2b00      	cmp	r3, #0
    3a36:	d104      	bne.n	3a42 <_can_async_set_filter+0x92>
			ef->F0.val = 0;
    3a38:	693b      	ldr	r3, [r7, #16]
    3a3a:	2200      	movs	r2, #0
    3a3c:	601a      	str	r2, [r3, #0]
			return ERR_NONE;
    3a3e:	2300      	movs	r3, #0
    3a40:	e014      	b.n	3a6c <_can_async_set_filter+0xbc>
		}
		ef->F0.val      = filter->id;
    3a42:	687b      	ldr	r3, [r7, #4]
    3a44:	681a      	ldr	r2, [r3, #0]
    3a46:	693b      	ldr	r3, [r7, #16]
    3a48:	601a      	str	r2, [r3, #0]
		ef->F0.bit.EFEC = _CAN_EFEC_STF0M;
    3a4a:	693a      	ldr	r2, [r7, #16]
    3a4c:	6813      	ldr	r3, [r2, #0]
    3a4e:	2101      	movs	r1, #1
    3a50:	f361 735f 	bfi	r3, r1, #29, #3
    3a54:	6013      	str	r3, [r2, #0]
		ef->F1.val      = filter->mask;
    3a56:	687b      	ldr	r3, [r7, #4]
    3a58:	685a      	ldr	r2, [r3, #4]
    3a5a:	693b      	ldr	r3, [r7, #16]
    3a5c:	605a      	str	r2, [r3, #4]
		ef->F1.bit.EFT  = _CAN_EFT_CLASSIC;
    3a5e:	693a      	ldr	r2, [r7, #16]
    3a60:	6853      	ldr	r3, [r2, #4]
    3a62:	2102      	movs	r1, #2
    3a64:	f361 739f 	bfi	r3, r1, #30, #2
    3a68:	6053      	str	r3, [r2, #4]
	}

	return ERR_NONE;
    3a6a:	2300      	movs	r3, #0
}
    3a6c:	4618      	mov	r0, r3
    3a6e:	371c      	adds	r7, #28
    3a70:	46bd      	mov	sp, r7
    3a72:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a76:	4770      	bx	lr

00003a78 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    3a78:	b590      	push	{r4, r7, lr}
    3a7a:	b083      	sub	sp, #12
    3a7c:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    3a7e:	4b2c      	ldr	r3, [pc, #176]	; (3b30 <CAN1_Handler+0xb8>)
    3a80:	681b      	ldr	r3, [r3, #0]
    3a82:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    3a84:	687b      	ldr	r3, [r7, #4]
    3a86:	681b      	ldr	r3, [r3, #0]
    3a88:	4618      	mov	r0, r3
    3a8a:	4b2a      	ldr	r3, [pc, #168]	; (3b34 <CAN1_Handler+0xbc>)
    3a8c:	4798      	blx	r3
    3a8e:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    3a90:	683b      	ldr	r3, [r7, #0]
    3a92:	f003 0301 	and.w	r3, r3, #1
    3a96:	2b00      	cmp	r3, #0
    3a98:	d003      	beq.n	3aa2 <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    3a9a:	687b      	ldr	r3, [r7, #4]
    3a9c:	689b      	ldr	r3, [r3, #8]
    3a9e:	6878      	ldr	r0, [r7, #4]
    3aa0:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    3aa2:	683b      	ldr	r3, [r7, #0]
    3aa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
    3aa8:	2b00      	cmp	r3, #0
    3aaa:	d003      	beq.n	3ab4 <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    3aac:	687b      	ldr	r3, [r7, #4]
    3aae:	685b      	ldr	r3, [r3, #4]
    3ab0:	6878      	ldr	r0, [r7, #4]
    3ab2:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    3ab4:	683b      	ldr	r3, [r7, #0]
    3ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    3aba:	2b00      	cmp	r3, #0
    3abc:	d004      	beq.n	3ac8 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    3abe:	687b      	ldr	r3, [r7, #4]
    3ac0:	68db      	ldr	r3, [r3, #12]
    3ac2:	2103      	movs	r1, #3
    3ac4:	6878      	ldr	r0, [r7, #4]
    3ac6:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    3ac8:	683b      	ldr	r3, [r7, #0]
    3aca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    3ace:	2b00      	cmp	r3, #0
    3ad0:	d004      	beq.n	3adc <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    3ad2:	687b      	ldr	r3, [r7, #4]
    3ad4:	68db      	ldr	r3, [r3, #12]
    3ad6:	2100      	movs	r1, #0
    3ad8:	6878      	ldr	r0, [r7, #4]
    3ada:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    3adc:	683b      	ldr	r3, [r7, #0]
    3ade:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    3ae2:	2b00      	cmp	r3, #0
    3ae4:	d00f      	beq.n	3b06 <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    3ae6:	687b      	ldr	r3, [r7, #4]
    3ae8:	68dc      	ldr	r4, [r3, #12]
    3aea:	687b      	ldr	r3, [r7, #4]
    3aec:	681b      	ldr	r3, [r3, #0]
    3aee:	4618      	mov	r0, r3
    3af0:	4b11      	ldr	r3, [pc, #68]	; (3b38 <CAN1_Handler+0xc0>)
    3af2:	4798      	blx	r3
    3af4:	4603      	mov	r3, r0
    3af6:	2b00      	cmp	r3, #0
    3af8:	d001      	beq.n	3afe <CAN1_Handler+0x86>
    3afa:	2302      	movs	r3, #2
    3afc:	e000      	b.n	3b00 <CAN1_Handler+0x88>
    3afe:	2301      	movs	r3, #1
    3b00:	4619      	mov	r1, r3
    3b02:	6878      	ldr	r0, [r7, #4]
    3b04:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    3b06:	683b      	ldr	r3, [r7, #0]
    3b08:	f003 0308 	and.w	r3, r3, #8
    3b0c:	2b00      	cmp	r3, #0
    3b0e:	d004      	beq.n	3b1a <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    3b10:	687b      	ldr	r3, [r7, #4]
    3b12:	68db      	ldr	r3, [r3, #12]
    3b14:	2104      	movs	r1, #4
    3b16:	6878      	ldr	r0, [r7, #4]
    3b18:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    3b1a:	687b      	ldr	r3, [r7, #4]
    3b1c:	681b      	ldr	r3, [r3, #0]
    3b1e:	6839      	ldr	r1, [r7, #0]
    3b20:	4618      	mov	r0, r3
    3b22:	4b06      	ldr	r3, [pc, #24]	; (3b3c <CAN1_Handler+0xc4>)
    3b24:	4798      	blx	r3
}
    3b26:	bf00      	nop
    3b28:	370c      	adds	r7, #12
    3b2a:	46bd      	mov	sp, r7
    3b2c:	bd90      	pop	{r4, r7, pc}
    3b2e:	bf00      	nop
    3b30:	20000ce0 	.word	0x20000ce0
    3b34:	000031e5 	.word	0x000031e5
    3b38:	00002f95 	.word	0x00002f95
    3b3c:	000031c9 	.word	0x000031c9

00003b40 <__NVIC_SetPendingIRQ>:
{
    3b40:	b480      	push	{r7}
    3b42:	b083      	sub	sp, #12
    3b44:	af00      	add	r7, sp, #0
    3b46:	4603      	mov	r3, r0
    3b48:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3b4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3b4e:	2b00      	cmp	r3, #0
    3b50:	db0c      	blt.n	3b6c <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3b52:	4909      	ldr	r1, [pc, #36]	; (3b78 <__NVIC_SetPendingIRQ+0x38>)
    3b54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3b58:	095b      	lsrs	r3, r3, #5
    3b5a:	88fa      	ldrh	r2, [r7, #6]
    3b5c:	f002 021f 	and.w	r2, r2, #31
    3b60:	2001      	movs	r0, #1
    3b62:	fa00 f202 	lsl.w	r2, r0, r2
    3b66:	3340      	adds	r3, #64	; 0x40
    3b68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3b6c:	bf00      	nop
    3b6e:	370c      	adds	r7, #12
    3b70:	46bd      	mov	sp, r7
    3b72:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b76:	4770      	bx	lr
    3b78:	e000e100 	.word	0xe000e100

00003b7c <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    3b7c:	b580      	push	{r7, lr}
    3b7e:	b082      	sub	sp, #8
    3b80:	af00      	add	r7, sp, #0
    3b82:	4603      	mov	r3, r0
    3b84:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    3b86:	79fb      	ldrb	r3, [r7, #7]
    3b88:	b21b      	sxth	r3, r3
    3b8a:	4618      	mov	r0, r3
    3b8c:	4b02      	ldr	r3, [pc, #8]	; (3b98 <_irq_set+0x1c>)
    3b8e:	4798      	blx	r3
}
    3b90:	bf00      	nop
    3b92:	3708      	adds	r7, #8
    3b94:	46bd      	mov	sp, r7
    3b96:	bd80      	pop	{r7, pc}
    3b98:	00003b41 	.word	0x00003b41

00003b9c <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    3b9c:	b480      	push	{r7}
    3b9e:	b083      	sub	sp, #12
    3ba0:	af00      	add	r7, sp, #0
    3ba2:	4603      	mov	r3, r0
    3ba4:	6039      	str	r1, [r7, #0]
    3ba6:	80fb      	strh	r3, [r7, #6]
    3ba8:	4613      	mov	r3, r2
    3baa:	717b      	strb	r3, [r7, #5]
	switch (power) {
    3bac:	797b      	ldrb	r3, [r7, #5]
    3bae:	3b04      	subs	r3, #4
    3bb0:	2b05      	cmp	r3, #5
    3bb2:	d86b      	bhi.n	3c8c <_get_cycles_for_us_internal+0xf0>
    3bb4:	a201      	add	r2, pc, #4	; (adr r2, 3bbc <_get_cycles_for_us_internal+0x20>)
    3bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3bba:	bf00      	nop
    3bbc:	00003c6b 	.word	0x00003c6b
    3bc0:	00003c4b 	.word	0x00003c4b
    3bc4:	00003c2d 	.word	0x00003c2d
    3bc8:	00003c0f 	.word	0x00003c0f
    3bcc:	00003bf1 	.word	0x00003bf1
    3bd0:	00003bd5 	.word	0x00003bd5
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    3bd4:	88fb      	ldrh	r3, [r7, #6]
    3bd6:	683a      	ldr	r2, [r7, #0]
    3bd8:	4935      	ldr	r1, [pc, #212]	; (3cb0 <_get_cycles_for_us_internal+0x114>)
    3bda:	fba1 1202 	umull	r1, r2, r1, r2
    3bde:	0c92      	lsrs	r2, r2, #18
    3be0:	fb02 f303 	mul.w	r3, r2, r3
    3be4:	3302      	adds	r3, #2
    3be6:	4a33      	ldr	r2, [pc, #204]	; (3cb4 <_get_cycles_for_us_internal+0x118>)
    3be8:	fba2 2303 	umull	r2, r3, r2, r3
    3bec:	085b      	lsrs	r3, r3, #1
    3bee:	e059      	b.n	3ca4 <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    3bf0:	88fb      	ldrh	r3, [r7, #6]
    3bf2:	683a      	ldr	r2, [r7, #0]
    3bf4:	0952      	lsrs	r2, r2, #5
    3bf6:	4930      	ldr	r1, [pc, #192]	; (3cb8 <_get_cycles_for_us_internal+0x11c>)
    3bf8:	fba1 1202 	umull	r1, r2, r1, r2
    3bfc:	09d2      	lsrs	r2, r2, #7
    3bfe:	fb02 f303 	mul.w	r3, r2, r3
    3c02:	331d      	adds	r3, #29
    3c04:	4a2d      	ldr	r2, [pc, #180]	; (3cbc <_get_cycles_for_us_internal+0x120>)
    3c06:	fba2 2303 	umull	r2, r3, r2, r3
    3c0a:	091b      	lsrs	r3, r3, #4
    3c0c:	e04a      	b.n	3ca4 <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    3c0e:	88fb      	ldrh	r3, [r7, #6]
    3c10:	683a      	ldr	r2, [r7, #0]
    3c12:	492b      	ldr	r1, [pc, #172]	; (3cc0 <_get_cycles_for_us_internal+0x124>)
    3c14:	fba1 1202 	umull	r1, r2, r1, r2
    3c18:	0b52      	lsrs	r2, r2, #13
    3c1a:	fb02 f303 	mul.w	r3, r2, r3
    3c1e:	f203 132b 	addw	r3, r3, #299	; 0x12b
    3c22:	4a28      	ldr	r2, [pc, #160]	; (3cc4 <_get_cycles_for_us_internal+0x128>)
    3c24:	fba2 2303 	umull	r2, r3, r2, r3
    3c28:	095b      	lsrs	r3, r3, #5
    3c2a:	e03b      	b.n	3ca4 <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    3c2c:	88fb      	ldrh	r3, [r7, #6]
    3c2e:	683a      	ldr	r2, [r7, #0]
    3c30:	4925      	ldr	r1, [pc, #148]	; (3cc8 <_get_cycles_for_us_internal+0x12c>)
    3c32:	fba1 1202 	umull	r1, r2, r1, r2
    3c36:	0992      	lsrs	r2, r2, #6
    3c38:	fb02 f303 	mul.w	r3, r2, r3
    3c3c:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    3c40:	4a22      	ldr	r2, [pc, #136]	; (3ccc <_get_cycles_for_us_internal+0x130>)
    3c42:	fba2 2303 	umull	r2, r3, r2, r3
    3c46:	099b      	lsrs	r3, r3, #6
    3c48:	e02c      	b.n	3ca4 <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    3c4a:	88fb      	ldrh	r3, [r7, #6]
    3c4c:	683a      	ldr	r2, [r7, #0]
    3c4e:	4920      	ldr	r1, [pc, #128]	; (3cd0 <_get_cycles_for_us_internal+0x134>)
    3c50:	fba1 1202 	umull	r1, r2, r1, r2
    3c54:	0952      	lsrs	r2, r2, #5
    3c56:	fb02 f303 	mul.w	r3, r2, r3
    3c5a:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    3c5e:	332f      	adds	r3, #47	; 0x2f
    3c60:	4a1c      	ldr	r2, [pc, #112]	; (3cd4 <_get_cycles_for_us_internal+0x138>)
    3c62:	fba2 2303 	umull	r2, r3, r2, r3
    3c66:	0b5b      	lsrs	r3, r3, #13
    3c68:	e01c      	b.n	3ca4 <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    3c6a:	88fb      	ldrh	r3, [r7, #6]
    3c6c:	683a      	ldr	r2, [r7, #0]
    3c6e:	491a      	ldr	r1, [pc, #104]	; (3cd8 <_get_cycles_for_us_internal+0x13c>)
    3c70:	fba1 1202 	umull	r1, r2, r1, r2
    3c74:	08d2      	lsrs	r2, r2, #3
    3c76:	fb02 f303 	mul.w	r3, r2, r3
    3c7a:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    3c7e:	f203 33df 	addw	r3, r3, #991	; 0x3df
    3c82:	4a16      	ldr	r2, [pc, #88]	; (3cdc <_get_cycles_for_us_internal+0x140>)
    3c84:	fba2 2303 	umull	r2, r3, r2, r3
    3c88:	0c5b      	lsrs	r3, r3, #17
    3c8a:	e00b      	b.n	3ca4 <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    3c8c:	88fb      	ldrh	r3, [r7, #6]
    3c8e:	683a      	ldr	r2, [r7, #0]
    3c90:	fb02 f303 	mul.w	r3, r2, r3
    3c94:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    3c98:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    3c9c:	4a10      	ldr	r2, [pc, #64]	; (3ce0 <_get_cycles_for_us_internal+0x144>)
    3c9e:	fba2 2303 	umull	r2, r3, r2, r3
    3ca2:	0c9b      	lsrs	r3, r3, #18
	}
}
    3ca4:	4618      	mov	r0, r3
    3ca6:	370c      	adds	r7, #12
    3ca8:	46bd      	mov	sp, r7
    3caa:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cae:	4770      	bx	lr
    3cb0:	431bde83 	.word	0x431bde83
    3cb4:	aaaaaaab 	.word	0xaaaaaaab
    3cb8:	0a7c5ac5 	.word	0x0a7c5ac5
    3cbc:	88888889 	.word	0x88888889
    3cc0:	d1b71759 	.word	0xd1b71759
    3cc4:	1b4e81b5 	.word	0x1b4e81b5
    3cc8:	10624dd3 	.word	0x10624dd3
    3ccc:	057619f1 	.word	0x057619f1
    3cd0:	51eb851f 	.word	0x51eb851f
    3cd4:	45e7b273 	.word	0x45e7b273
    3cd8:	cccccccd 	.word	0xcccccccd
    3cdc:	6fd91d85 	.word	0x6fd91d85
    3ce0:	165e9f81 	.word	0x165e9f81

00003ce4 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    3ce4:	b580      	push	{r7, lr}
    3ce6:	b082      	sub	sp, #8
    3ce8:	af00      	add	r7, sp, #0
    3cea:	4603      	mov	r3, r0
    3cec:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    3cee:	88fb      	ldrh	r3, [r7, #6]
    3cf0:	2209      	movs	r2, #9
    3cf2:	4904      	ldr	r1, [pc, #16]	; (3d04 <_get_cycles_for_us+0x20>)
    3cf4:	4618      	mov	r0, r3
    3cf6:	4b04      	ldr	r3, [pc, #16]	; (3d08 <_get_cycles_for_us+0x24>)
    3cf8:	4798      	blx	r3
    3cfa:	4603      	mov	r3, r0
}
    3cfc:	4618      	mov	r0, r3
    3cfe:	3708      	adds	r7, #8
    3d00:	46bd      	mov	sp, r7
    3d02:	bd80      	pop	{r7, pc}
    3d04:	07270e00 	.word	0x07270e00
    3d08:	00003b9d 	.word	0x00003b9d

00003d0c <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    3d0c:	b480      	push	{r7}
    3d0e:	b083      	sub	sp, #12
    3d10:	af00      	add	r7, sp, #0
    3d12:	4603      	mov	r3, r0
    3d14:	6039      	str	r1, [r7, #0]
    3d16:	80fb      	strh	r3, [r7, #6]
    3d18:	4613      	mov	r3, r2
    3d1a:	717b      	strb	r3, [r7, #5]
	switch (power) {
    3d1c:	797b      	ldrb	r3, [r7, #5]
    3d1e:	3b04      	subs	r3, #4
    3d20:	2b05      	cmp	r3, #5
    3d22:	d870      	bhi.n	3e06 <_get_cycles_for_ms_internal+0xfa>
    3d24:	a201      	add	r2, pc, #4	; (adr r2, 3d2c <_get_cycles_for_ms_internal+0x20>)
    3d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3d2a:	bf00      	nop
    3d2c:	00003de9 	.word	0x00003de9
    3d30:	00003dcd 	.word	0x00003dcd
    3d34:	00003db1 	.word	0x00003db1
    3d38:	00003d8d 	.word	0x00003d8d
    3d3c:	00003d69 	.word	0x00003d69
    3d40:	00003d45 	.word	0x00003d45
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    3d44:	88fb      	ldrh	r3, [r7, #6]
    3d46:	683a      	ldr	r2, [r7, #0]
    3d48:	4937      	ldr	r1, [pc, #220]	; (3e28 <_get_cycles_for_ms_internal+0x11c>)
    3d4a:	fba1 1202 	umull	r1, r2, r1, r2
    3d4e:	0c92      	lsrs	r2, r2, #18
    3d50:	fb02 f303 	mul.w	r3, r2, r3
    3d54:	3302      	adds	r3, #2
    3d56:	4a35      	ldr	r2, [pc, #212]	; (3e2c <_get_cycles_for_ms_internal+0x120>)
    3d58:	fba2 2303 	umull	r2, r3, r2, r3
    3d5c:	085b      	lsrs	r3, r3, #1
    3d5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3d62:	fb02 f303 	mul.w	r3, r2, r3
    3d66:	e058      	b.n	3e1a <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    3d68:	88fb      	ldrh	r3, [r7, #6]
    3d6a:	683a      	ldr	r2, [r7, #0]
    3d6c:	0952      	lsrs	r2, r2, #5
    3d6e:	4930      	ldr	r1, [pc, #192]	; (3e30 <_get_cycles_for_ms_internal+0x124>)
    3d70:	fba1 1202 	umull	r1, r2, r1, r2
    3d74:	09d2      	lsrs	r2, r2, #7
    3d76:	fb02 f303 	mul.w	r3, r2, r3
    3d7a:	3302      	adds	r3, #2
    3d7c:	4a2b      	ldr	r2, [pc, #172]	; (3e2c <_get_cycles_for_ms_internal+0x120>)
    3d7e:	fba2 2303 	umull	r2, r3, r2, r3
    3d82:	085b      	lsrs	r3, r3, #1
    3d84:	2264      	movs	r2, #100	; 0x64
    3d86:	fb02 f303 	mul.w	r3, r2, r3
    3d8a:	e046      	b.n	3e1a <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    3d8c:	88fb      	ldrh	r3, [r7, #6]
    3d8e:	683a      	ldr	r2, [r7, #0]
    3d90:	4928      	ldr	r1, [pc, #160]	; (3e34 <_get_cycles_for_ms_internal+0x128>)
    3d92:	fba1 1202 	umull	r1, r2, r1, r2
    3d96:	0b52      	lsrs	r2, r2, #13
    3d98:	fb02 f303 	mul.w	r3, r2, r3
    3d9c:	3302      	adds	r3, #2
    3d9e:	4a23      	ldr	r2, [pc, #140]	; (3e2c <_get_cycles_for_ms_internal+0x120>)
    3da0:	fba2 2303 	umull	r2, r3, r2, r3
    3da4:	085a      	lsrs	r2, r3, #1
    3da6:	4613      	mov	r3, r2
    3da8:	009b      	lsls	r3, r3, #2
    3daa:	4413      	add	r3, r2
    3dac:	005b      	lsls	r3, r3, #1
    3dae:	e034      	b.n	3e1a <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    3db0:	88fb      	ldrh	r3, [r7, #6]
    3db2:	683a      	ldr	r2, [r7, #0]
    3db4:	4920      	ldr	r1, [pc, #128]	; (3e38 <_get_cycles_for_ms_internal+0x12c>)
    3db6:	fba1 1202 	umull	r1, r2, r1, r2
    3dba:	0992      	lsrs	r2, r2, #6
    3dbc:	fb02 f303 	mul.w	r3, r2, r3
    3dc0:	3302      	adds	r3, #2
    3dc2:	4a1a      	ldr	r2, [pc, #104]	; (3e2c <_get_cycles_for_ms_internal+0x120>)
    3dc4:	fba2 2303 	umull	r2, r3, r2, r3
    3dc8:	085b      	lsrs	r3, r3, #1
    3dca:	e026      	b.n	3e1a <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    3dcc:	88fb      	ldrh	r3, [r7, #6]
    3dce:	683a      	ldr	r2, [r7, #0]
    3dd0:	491a      	ldr	r1, [pc, #104]	; (3e3c <_get_cycles_for_ms_internal+0x130>)
    3dd2:	fba1 1202 	umull	r1, r2, r1, r2
    3dd6:	0952      	lsrs	r2, r2, #5
    3dd8:	fb02 f303 	mul.w	r3, r2, r3
    3ddc:	331d      	adds	r3, #29
    3dde:	4a18      	ldr	r2, [pc, #96]	; (3e40 <_get_cycles_for_ms_internal+0x134>)
    3de0:	fba2 2303 	umull	r2, r3, r2, r3
    3de4:	091b      	lsrs	r3, r3, #4
    3de6:	e018      	b.n	3e1a <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    3de8:	88fb      	ldrh	r3, [r7, #6]
    3dea:	683a      	ldr	r2, [r7, #0]
    3dec:	4915      	ldr	r1, [pc, #84]	; (3e44 <_get_cycles_for_ms_internal+0x138>)
    3dee:	fba1 1202 	umull	r1, r2, r1, r2
    3df2:	08d2      	lsrs	r2, r2, #3
    3df4:	fb02 f303 	mul.w	r3, r2, r3
    3df8:	f203 132b 	addw	r3, r3, #299	; 0x12b
    3dfc:	4a12      	ldr	r2, [pc, #72]	; (3e48 <_get_cycles_for_ms_internal+0x13c>)
    3dfe:	fba2 2303 	umull	r2, r3, r2, r3
    3e02:	095b      	lsrs	r3, r3, #5
    3e04:	e009      	b.n	3e1a <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    3e06:	88fb      	ldrh	r3, [r7, #6]
    3e08:	683a      	ldr	r2, [r7, #0]
    3e0a:	fb02 f303 	mul.w	r3, r2, r3
    3e0e:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    3e12:	4a0e      	ldr	r2, [pc, #56]	; (3e4c <_get_cycles_for_ms_internal+0x140>)
    3e14:	fba2 2303 	umull	r2, r3, r2, r3
    3e18:	099b      	lsrs	r3, r3, #6
	}
}
    3e1a:	4618      	mov	r0, r3
    3e1c:	370c      	adds	r7, #12
    3e1e:	46bd      	mov	sp, r7
    3e20:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e24:	4770      	bx	lr
    3e26:	bf00      	nop
    3e28:	431bde83 	.word	0x431bde83
    3e2c:	aaaaaaab 	.word	0xaaaaaaab
    3e30:	0a7c5ac5 	.word	0x0a7c5ac5
    3e34:	d1b71759 	.word	0xd1b71759
    3e38:	10624dd3 	.word	0x10624dd3
    3e3c:	51eb851f 	.word	0x51eb851f
    3e40:	88888889 	.word	0x88888889
    3e44:	cccccccd 	.word	0xcccccccd
    3e48:	1b4e81b5 	.word	0x1b4e81b5
    3e4c:	057619f1 	.word	0x057619f1

00003e50 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    3e50:	b580      	push	{r7, lr}
    3e52:	b082      	sub	sp, #8
    3e54:	af00      	add	r7, sp, #0
    3e56:	4603      	mov	r3, r0
    3e58:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    3e5a:	88fb      	ldrh	r3, [r7, #6]
    3e5c:	2209      	movs	r2, #9
    3e5e:	4904      	ldr	r1, [pc, #16]	; (3e70 <_get_cycles_for_ms+0x20>)
    3e60:	4618      	mov	r0, r3
    3e62:	4b04      	ldr	r3, [pc, #16]	; (3e74 <_get_cycles_for_ms+0x24>)
    3e64:	4798      	blx	r3
    3e66:	4603      	mov	r3, r0
}
    3e68:	4618      	mov	r0, r3
    3e6a:	3708      	adds	r7, #8
    3e6c:	46bd      	mov	sp, r7
    3e6e:	bd80      	pop	{r7, pc}
    3e70:	07270e00 	.word	0x07270e00
    3e74:	00003d0d 	.word	0x00003d0d

00003e78 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    3e78:	b480      	push	{r7}
    3e7a:	b083      	sub	sp, #12
    3e7c:	af00      	add	r7, sp, #0
    3e7e:	6078      	str	r0, [r7, #4]
    3e80:	6039      	str	r1, [r7, #0]
    3e82:	bf00      	nop
    3e84:	f3af 8000 	nop.w

00003e88 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    3e88:	3901      	subs	r1, #1
    3e8a:	d8fd      	bhi.n	3e88 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    3e8c:	bf00      	nop
    3e8e:	370c      	adds	r7, #12
    3e90:	46bd      	mov	sp, r7
    3e92:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e96:	4770      	bx	lr

00003e98 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    3e98:	b480      	push	{r7}
    3e9a:	b083      	sub	sp, #12
    3e9c:	af00      	add	r7, sp, #0
    3e9e:	6078      	str	r0, [r7, #4]
    3ea0:	460b      	mov	r3, r1
    3ea2:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    3ea4:	687b      	ldr	r3, [r7, #4]
    3ea6:	881b      	ldrh	r3, [r3, #0]
    3ea8:	b29a      	uxth	r2, r3
    3eaa:	887b      	ldrh	r3, [r7, #2]
    3eac:	021b      	lsls	r3, r3, #8
    3eae:	b29b      	uxth	r3, r3
    3eb0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    3eb4:	b29b      	uxth	r3, r3
    3eb6:	4313      	orrs	r3, r2
    3eb8:	b29a      	uxth	r2, r3
    3eba:	687b      	ldr	r3, [r7, #4]
    3ebc:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    3ebe:	bf00      	nop
    3ec0:	370c      	adds	r7, #12
    3ec2:	46bd      	mov	sp, r7
    3ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ec8:	4770      	bx	lr

00003eca <hri_port_set_EVCTRL_reg>:
{
    3eca:	b480      	push	{r7}
    3ecc:	b085      	sub	sp, #20
    3ece:	af00      	add	r7, sp, #0
    3ed0:	60f8      	str	r0, [r7, #12]
    3ed2:	460b      	mov	r3, r1
    3ed4:	607a      	str	r2, [r7, #4]
    3ed6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    3ed8:	7afb      	ldrb	r3, [r7, #11]
    3eda:	7afa      	ldrb	r2, [r7, #11]
    3edc:	68f9      	ldr	r1, [r7, #12]
    3ede:	01d2      	lsls	r2, r2, #7
    3ee0:	440a      	add	r2, r1
    3ee2:	322c      	adds	r2, #44	; 0x2c
    3ee4:	6811      	ldr	r1, [r2, #0]
    3ee6:	687a      	ldr	r2, [r7, #4]
    3ee8:	430a      	orrs	r2, r1
    3eea:	68f9      	ldr	r1, [r7, #12]
    3eec:	01db      	lsls	r3, r3, #7
    3eee:	440b      	add	r3, r1
    3ef0:	332c      	adds	r3, #44	; 0x2c
    3ef2:	601a      	str	r2, [r3, #0]
}
    3ef4:	bf00      	nop
    3ef6:	3714      	adds	r7, #20
    3ef8:	46bd      	mov	sp, r7
    3efa:	f85d 7b04 	ldr.w	r7, [sp], #4
    3efe:	4770      	bx	lr

00003f00 <_port_event_init>:

static inline void _port_event_init()
{
    3f00:	b580      	push	{r7, lr}
    3f02:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    3f04:	2200      	movs	r2, #0
    3f06:	2100      	movs	r1, #0
    3f08:	480a      	ldr	r0, [pc, #40]	; (3f34 <_port_event_init+0x34>)
    3f0a:	4b0b      	ldr	r3, [pc, #44]	; (3f38 <_port_event_init+0x38>)
    3f0c:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    3f0e:	2200      	movs	r2, #0
    3f10:	2101      	movs	r1, #1
    3f12:	4808      	ldr	r0, [pc, #32]	; (3f34 <_port_event_init+0x34>)
    3f14:	4b08      	ldr	r3, [pc, #32]	; (3f38 <_port_event_init+0x38>)
    3f16:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    3f18:	f64e 72ef 	movw	r2, #61423	; 0xefef
    3f1c:	2102      	movs	r1, #2
    3f1e:	4805      	ldr	r0, [pc, #20]	; (3f34 <_port_event_init+0x34>)
    3f20:	4b05      	ldr	r3, [pc, #20]	; (3f38 <_port_event_init+0x38>)
    3f22:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    3f24:	2200      	movs	r2, #0
    3f26:	2103      	movs	r1, #3
    3f28:	4802      	ldr	r0, [pc, #8]	; (3f34 <_port_event_init+0x34>)
    3f2a:	4b03      	ldr	r3, [pc, #12]	; (3f38 <_port_event_init+0x38>)
    3f2c:	4798      	blx	r3
}
    3f2e:	bf00      	nop
    3f30:	bd80      	pop	{r7, pc}
    3f32:	bf00      	nop
    3f34:	41008000 	.word	0x41008000
    3f38:	00003ecb 	.word	0x00003ecb

00003f3c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    3f3c:	b580      	push	{r7, lr}
    3f3e:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    3f40:	2104      	movs	r1, #4
    3f42:	480b      	ldr	r0, [pc, #44]	; (3f70 <_init_chip+0x34>)
    3f44:	4b0b      	ldr	r3, [pc, #44]	; (3f74 <_init_chip+0x38>)
    3f46:	4798      	blx	r3

	_osc32kctrl_init_sources();
    3f48:	4b0b      	ldr	r3, [pc, #44]	; (3f78 <_init_chip+0x3c>)
    3f4a:	4798      	blx	r3
	_oscctrl_init_sources();
    3f4c:	4b0b      	ldr	r3, [pc, #44]	; (3f7c <_init_chip+0x40>)
    3f4e:	4798      	blx	r3
	_mclk_init();
    3f50:	4b0b      	ldr	r3, [pc, #44]	; (3f80 <_init_chip+0x44>)
    3f52:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    3f54:	f44f 6084 	mov.w	r0, #1056	; 0x420
    3f58:	4b0a      	ldr	r3, [pc, #40]	; (3f84 <_init_chip+0x48>)
    3f5a:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    3f5c:	4b0a      	ldr	r3, [pc, #40]	; (3f88 <_init_chip+0x4c>)
    3f5e:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    3f60:	f640 30df 	movw	r0, #3039	; 0xbdf
    3f64:	4b07      	ldr	r3, [pc, #28]	; (3f84 <_init_chip+0x48>)
    3f66:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    3f68:	4b08      	ldr	r3, [pc, #32]	; (3f8c <_init_chip+0x50>)
    3f6a:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    3f6c:	bf00      	nop
    3f6e:	bd80      	pop	{r7, pc}
    3f70:	41004000 	.word	0x41004000
    3f74:	00003e99 	.word	0x00003e99
    3f78:	00004975 	.word	0x00004975
    3f7c:	00004e3d 	.word	0x00004e3d
    3f80:	00004895 	.word	0x00004895
    3f84:	00004755 	.word	0x00004755
    3f88:	00004e7d 	.word	0x00004e7d
    3f8c:	00003f01 	.word	0x00003f01

00003f90 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    3f90:	b480      	push	{r7}
    3f92:	b083      	sub	sp, #12
    3f94:	af00      	add	r7, sp, #0
    3f96:	6078      	str	r0, [r7, #4]
    3f98:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    3f9a:	687b      	ldr	r3, [r7, #4]
    3f9c:	683a      	ldr	r2, [r7, #0]
    3f9e:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    3fa0:	2300      	movs	r3, #0
}
    3fa2:	4618      	mov	r0, r3
    3fa4:	370c      	adds	r7, #12
    3fa6:	46bd      	mov	sp, r7
    3fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fac:	4770      	bx	lr
	...

00003fb0 <__NVIC_EnableIRQ>:
{
    3fb0:	b480      	push	{r7}
    3fb2:	b083      	sub	sp, #12
    3fb4:	af00      	add	r7, sp, #0
    3fb6:	4603      	mov	r3, r0
    3fb8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3fba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3fbe:	2b00      	cmp	r3, #0
    3fc0:	db0b      	blt.n	3fda <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3fc2:	4909      	ldr	r1, [pc, #36]	; (3fe8 <__NVIC_EnableIRQ+0x38>)
    3fc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3fc8:	095b      	lsrs	r3, r3, #5
    3fca:	88fa      	ldrh	r2, [r7, #6]
    3fcc:	f002 021f 	and.w	r2, r2, #31
    3fd0:	2001      	movs	r0, #1
    3fd2:	fa00 f202 	lsl.w	r2, r0, r2
    3fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3fda:	bf00      	nop
    3fdc:	370c      	adds	r7, #12
    3fde:	46bd      	mov	sp, r7
    3fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fe4:	4770      	bx	lr
    3fe6:	bf00      	nop
    3fe8:	e000e100 	.word	0xe000e100

00003fec <__NVIC_DisableIRQ>:
{
    3fec:	b480      	push	{r7}
    3fee:	b083      	sub	sp, #12
    3ff0:	af00      	add	r7, sp, #0
    3ff2:	4603      	mov	r3, r0
    3ff4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3ff6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3ffa:	2b00      	cmp	r3, #0
    3ffc:	db10      	blt.n	4020 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3ffe:	490b      	ldr	r1, [pc, #44]	; (402c <__NVIC_DisableIRQ+0x40>)
    4000:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4004:	095b      	lsrs	r3, r3, #5
    4006:	88fa      	ldrh	r2, [r7, #6]
    4008:	f002 021f 	and.w	r2, r2, #31
    400c:	2001      	movs	r0, #1
    400e:	fa00 f202 	lsl.w	r2, r0, r2
    4012:	3320      	adds	r3, #32
    4014:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    4018:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    401c:	f3bf 8f6f 	isb	sy
}
    4020:	bf00      	nop
    4022:	370c      	adds	r7, #12
    4024:	46bd      	mov	sp, r7
    4026:	f85d 7b04 	ldr.w	r7, [sp], #4
    402a:	4770      	bx	lr
    402c:	e000e100 	.word	0xe000e100

00004030 <__NVIC_ClearPendingIRQ>:
{
    4030:	b480      	push	{r7}
    4032:	b083      	sub	sp, #12
    4034:	af00      	add	r7, sp, #0
    4036:	4603      	mov	r3, r0
    4038:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    403a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    403e:	2b00      	cmp	r3, #0
    4040:	db0c      	blt.n	405c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4042:	4909      	ldr	r1, [pc, #36]	; (4068 <__NVIC_ClearPendingIRQ+0x38>)
    4044:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4048:	095b      	lsrs	r3, r3, #5
    404a:	88fa      	ldrh	r2, [r7, #6]
    404c:	f002 021f 	and.w	r2, r2, #31
    4050:	2001      	movs	r0, #1
    4052:	fa00 f202 	lsl.w	r2, r0, r2
    4056:	3360      	adds	r3, #96	; 0x60
    4058:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    405c:	bf00      	nop
    405e:	370c      	adds	r7, #12
    4060:	46bd      	mov	sp, r7
    4062:	f85d 7b04 	ldr.w	r7, [sp], #4
    4066:	4770      	bx	lr
    4068:	e000e100 	.word	0xe000e100

0000406c <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    406c:	b480      	push	{r7}
    406e:	b083      	sub	sp, #12
    4070:	af00      	add	r7, sp, #0
    4072:	6078      	str	r0, [r7, #4]
    4074:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    4076:	bf00      	nop
    4078:	687b      	ldr	r3, [r7, #4]
    407a:	685a      	ldr	r2, [r3, #4]
    407c:	683b      	ldr	r3, [r7, #0]
    407e:	4013      	ands	r3, r2
    4080:	2b00      	cmp	r3, #0
    4082:	d1f9      	bne.n	4078 <hri_eic_wait_for_sync+0xc>
	};
}
    4084:	bf00      	nop
    4086:	370c      	adds	r7, #12
    4088:	46bd      	mov	sp, r7
    408a:	f85d 7b04 	ldr.w	r7, [sp], #4
    408e:	4770      	bx	lr

00004090 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    4090:	b480      	push	{r7}
    4092:	b083      	sub	sp, #12
    4094:	af00      	add	r7, sp, #0
    4096:	6078      	str	r0, [r7, #4]
    4098:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    409a:	687b      	ldr	r3, [r7, #4]
    409c:	685a      	ldr	r2, [r3, #4]
    409e:	683b      	ldr	r3, [r7, #0]
    40a0:	4013      	ands	r3, r2
    40a2:	2b00      	cmp	r3, #0
    40a4:	bf14      	ite	ne
    40a6:	2301      	movne	r3, #1
    40a8:	2300      	moveq	r3, #0
    40aa:	b2db      	uxtb	r3, r3
}
    40ac:	4618      	mov	r0, r3
    40ae:	370c      	adds	r7, #12
    40b0:	46bd      	mov	sp, r7
    40b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    40b6:	4770      	bx	lr

000040b8 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    40b8:	b480      	push	{r7}
    40ba:	b083      	sub	sp, #12
    40bc:	af00      	add	r7, sp, #0
    40be:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    40c0:	687b      	ldr	r3, [r7, #4]
    40c2:	695b      	ldr	r3, [r3, #20]
}
    40c4:	4618      	mov	r0, r3
    40c6:	370c      	adds	r7, #12
    40c8:	46bd      	mov	sp, r7
    40ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    40ce:	4770      	bx	lr

000040d0 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    40d0:	b480      	push	{r7}
    40d2:	b083      	sub	sp, #12
    40d4:	af00      	add	r7, sp, #0
    40d6:	6078      	str	r0, [r7, #4]
    40d8:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    40da:	687b      	ldr	r3, [r7, #4]
    40dc:	683a      	ldr	r2, [r7, #0]
    40de:	615a      	str	r2, [r3, #20]
}
    40e0:	bf00      	nop
    40e2:	370c      	adds	r7, #12
    40e4:	46bd      	mov	sp, r7
    40e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    40ea:	4770      	bx	lr

000040ec <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    40ec:	b580      	push	{r7, lr}
    40ee:	b082      	sub	sp, #8
    40f0:	af00      	add	r7, sp, #0
    40f2:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    40f4:	687b      	ldr	r3, [r7, #4]
    40f6:	781b      	ldrb	r3, [r3, #0]
    40f8:	b2db      	uxtb	r3, r3
    40fa:	f043 0302 	orr.w	r3, r3, #2
    40fe:	b2da      	uxtb	r2, r3
    4100:	687b      	ldr	r3, [r7, #4]
    4102:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    4104:	2103      	movs	r1, #3
    4106:	6878      	ldr	r0, [r7, #4]
    4108:	4b02      	ldr	r3, [pc, #8]	; (4114 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    410a:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    410c:	bf00      	nop
    410e:	3708      	adds	r7, #8
    4110:	46bd      	mov	sp, r7
    4112:	bd80      	pop	{r7, pc}
    4114:	0000406d 	.word	0x0000406d

00004118 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    4118:	b580      	push	{r7, lr}
    411a:	b082      	sub	sp, #8
    411c:	af00      	add	r7, sp, #0
    411e:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    4120:	687b      	ldr	r3, [r7, #4]
    4122:	781b      	ldrb	r3, [r3, #0]
    4124:	b2db      	uxtb	r3, r3
    4126:	f023 0302 	bic.w	r3, r3, #2
    412a:	b2da      	uxtb	r2, r3
    412c:	687b      	ldr	r3, [r7, #4]
    412e:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    4130:	2103      	movs	r1, #3
    4132:	6878      	ldr	r0, [r7, #4]
    4134:	4b02      	ldr	r3, [pc, #8]	; (4140 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    4136:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4138:	bf00      	nop
    413a:	3708      	adds	r7, #8
    413c:	46bd      	mov	sp, r7
    413e:	bd80      	pop	{r7, pc}
    4140:	0000406d 	.word	0x0000406d

00004144 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    4144:	b580      	push	{r7, lr}
    4146:	b084      	sub	sp, #16
    4148:	af00      	add	r7, sp, #0
    414a:	6078      	str	r0, [r7, #4]
    414c:	460b      	mov	r3, r1
    414e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    4150:	687b      	ldr	r3, [r7, #4]
    4152:	781b      	ldrb	r3, [r3, #0]
    4154:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    4156:	7bfb      	ldrb	r3, [r7, #15]
    4158:	f023 0310 	bic.w	r3, r3, #16
    415c:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    415e:	78fb      	ldrb	r3, [r7, #3]
    4160:	011b      	lsls	r3, r3, #4
    4162:	b25a      	sxtb	r2, r3
    4164:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4168:	4313      	orrs	r3, r2
    416a:	b25b      	sxtb	r3, r3
    416c:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    416e:	687b      	ldr	r3, [r7, #4]
    4170:	7bfa      	ldrb	r2, [r7, #15]
    4172:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4174:	2103      	movs	r1, #3
    4176:	6878      	ldr	r0, [r7, #4]
    4178:	4b02      	ldr	r3, [pc, #8]	; (4184 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    417a:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    417c:	bf00      	nop
    417e:	3710      	adds	r7, #16
    4180:	46bd      	mov	sp, r7
    4182:	bd80      	pop	{r7, pc}
    4184:	0000406d 	.word	0x0000406d

00004188 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    4188:	b580      	push	{r7, lr}
    418a:	b084      	sub	sp, #16
    418c:	af00      	add	r7, sp, #0
    418e:	6078      	str	r0, [r7, #4]
    4190:	460b      	mov	r3, r1
    4192:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4194:	2103      	movs	r1, #3
    4196:	6878      	ldr	r0, [r7, #4]
    4198:	4b06      	ldr	r3, [pc, #24]	; (41b4 <hri_eic_get_CTRLA_reg+0x2c>)
    419a:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    419c:	687b      	ldr	r3, [r7, #4]
    419e:	781b      	ldrb	r3, [r3, #0]
    41a0:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    41a2:	7bfa      	ldrb	r2, [r7, #15]
    41a4:	78fb      	ldrb	r3, [r7, #3]
    41a6:	4013      	ands	r3, r2
    41a8:	73fb      	strb	r3, [r7, #15]
	return tmp;
    41aa:	7bfb      	ldrb	r3, [r7, #15]
}
    41ac:	4618      	mov	r0, r3
    41ae:	3710      	adds	r7, #16
    41b0:	46bd      	mov	sp, r7
    41b2:	bd80      	pop	{r7, pc}
    41b4:	0000406d 	.word	0x0000406d

000041b8 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    41b8:	b580      	push	{r7, lr}
    41ba:	b082      	sub	sp, #8
    41bc:	af00      	add	r7, sp, #0
    41be:	6078      	str	r0, [r7, #4]
    41c0:	460b      	mov	r3, r1
    41c2:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    41c4:	687b      	ldr	r3, [r7, #4]
    41c6:	78fa      	ldrb	r2, [r7, #3]
    41c8:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    41ca:	2103      	movs	r1, #3
    41cc:	6878      	ldr	r0, [r7, #4]
    41ce:	4b03      	ldr	r3, [pc, #12]	; (41dc <hri_eic_write_CTRLA_reg+0x24>)
    41d0:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    41d2:	bf00      	nop
    41d4:	3708      	adds	r7, #8
    41d6:	46bd      	mov	sp, r7
    41d8:	bd80      	pop	{r7, pc}
    41da:	bf00      	nop
    41dc:	0000406d 	.word	0x0000406d

000041e0 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    41e0:	b480      	push	{r7}
    41e2:	b083      	sub	sp, #12
    41e4:	af00      	add	r7, sp, #0
    41e6:	6078      	str	r0, [r7, #4]
    41e8:	460b      	mov	r3, r1
    41ea:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    41ec:	687b      	ldr	r3, [r7, #4]
    41ee:	78fa      	ldrb	r2, [r7, #3]
    41f0:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    41f2:	bf00      	nop
    41f4:	370c      	adds	r7, #12
    41f6:	46bd      	mov	sp, r7
    41f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    41fc:	4770      	bx	lr

000041fe <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    41fe:	b480      	push	{r7}
    4200:	b083      	sub	sp, #12
    4202:	af00      	add	r7, sp, #0
    4204:	6078      	str	r0, [r7, #4]
    4206:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    4208:	687b      	ldr	r3, [r7, #4]
    420a:	683a      	ldr	r2, [r7, #0]
    420c:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    420e:	bf00      	nop
    4210:	370c      	adds	r7, #12
    4212:	46bd      	mov	sp, r7
    4214:	f85d 7b04 	ldr.w	r7, [sp], #4
    4218:	4770      	bx	lr

0000421a <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    421a:	b480      	push	{r7}
    421c:	b083      	sub	sp, #12
    421e:	af00      	add	r7, sp, #0
    4220:	6078      	str	r0, [r7, #4]
    4222:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    4224:	687b      	ldr	r3, [r7, #4]
    4226:	683a      	ldr	r2, [r7, #0]
    4228:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    422a:	bf00      	nop
    422c:	370c      	adds	r7, #12
    422e:	46bd      	mov	sp, r7
    4230:	f85d 7b04 	ldr.w	r7, [sp], #4
    4234:	4770      	bx	lr

00004236 <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    4236:	b480      	push	{r7}
    4238:	b085      	sub	sp, #20
    423a:	af00      	add	r7, sp, #0
    423c:	60f8      	str	r0, [r7, #12]
    423e:	460b      	mov	r3, r1
    4240:	607a      	str	r2, [r7, #4]
    4242:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    4244:	7afb      	ldrb	r3, [r7, #11]
    4246:	68fa      	ldr	r2, [r7, #12]
    4248:	3306      	adds	r3, #6
    424a:	009b      	lsls	r3, r3, #2
    424c:	4413      	add	r3, r2
    424e:	687a      	ldr	r2, [r7, #4]
    4250:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4252:	bf00      	nop
    4254:	3714      	adds	r7, #20
    4256:	46bd      	mov	sp, r7
    4258:	f85d 7b04 	ldr.w	r7, [sp], #4
    425c:	4770      	bx	lr

0000425e <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    425e:	b480      	push	{r7}
    4260:	b083      	sub	sp, #12
    4262:	af00      	add	r7, sp, #0
    4264:	6078      	str	r0, [r7, #4]
    4266:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    4268:	687b      	ldr	r3, [r7, #4]
    426a:	683a      	ldr	r2, [r7, #0]
    426c:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    426e:	bf00      	nop
    4270:	370c      	adds	r7, #12
    4272:	46bd      	mov	sp, r7
    4274:	f85d 7b04 	ldr.w	r7, [sp], #4
    4278:	4770      	bx	lr

0000427a <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    427a:	b480      	push	{r7}
    427c:	b083      	sub	sp, #12
    427e:	af00      	add	r7, sp, #0
    4280:	6078      	str	r0, [r7, #4]
    4282:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    4284:	687b      	ldr	r3, [r7, #4]
    4286:	683a      	ldr	r2, [r7, #0]
    4288:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    428a:	bf00      	nop
    428c:	370c      	adds	r7, #12
    428e:	46bd      	mov	sp, r7
    4290:	f85d 7b04 	ldr.w	r7, [sp], #4
    4294:	4770      	bx	lr
	...

00004298 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    4298:	b580      	push	{r7, lr}
    429a:	b082      	sub	sp, #8
    429c:	af00      	add	r7, sp, #0
    429e:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    42a0:	2101      	movs	r1, #1
    42a2:	484f      	ldr	r0, [pc, #316]	; (43e0 <_ext_irq_init+0x148>)
    42a4:	4b4f      	ldr	r3, [pc, #316]	; (43e4 <_ext_irq_init+0x14c>)
    42a6:	4798      	blx	r3
    42a8:	4603      	mov	r3, r0
    42aa:	f083 0301 	eor.w	r3, r3, #1
    42ae:	b2db      	uxtb	r3, r3
    42b0:	2b00      	cmp	r3, #0
    42b2:	d011      	beq.n	42d8 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    42b4:	2102      	movs	r1, #2
    42b6:	484a      	ldr	r0, [pc, #296]	; (43e0 <_ext_irq_init+0x148>)
    42b8:	4b4b      	ldr	r3, [pc, #300]	; (43e8 <_ext_irq_init+0x150>)
    42ba:	4798      	blx	r3
    42bc:	4603      	mov	r3, r0
    42be:	2b00      	cmp	r3, #0
    42c0:	d006      	beq.n	42d0 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    42c2:	4847      	ldr	r0, [pc, #284]	; (43e0 <_ext_irq_init+0x148>)
    42c4:	4b49      	ldr	r3, [pc, #292]	; (43ec <_ext_irq_init+0x154>)
    42c6:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    42c8:	2102      	movs	r1, #2
    42ca:	4845      	ldr	r0, [pc, #276]	; (43e0 <_ext_irq_init+0x148>)
    42cc:	4b48      	ldr	r3, [pc, #288]	; (43f0 <_ext_irq_init+0x158>)
    42ce:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    42d0:	2101      	movs	r1, #1
    42d2:	4843      	ldr	r0, [pc, #268]	; (43e0 <_ext_irq_init+0x148>)
    42d4:	4b47      	ldr	r3, [pc, #284]	; (43f4 <_ext_irq_init+0x15c>)
    42d6:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    42d8:	2101      	movs	r1, #1
    42da:	4841      	ldr	r0, [pc, #260]	; (43e0 <_ext_irq_init+0x148>)
    42dc:	4b44      	ldr	r3, [pc, #272]	; (43f0 <_ext_irq_init+0x158>)
    42de:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    42e0:	2100      	movs	r1, #0
    42e2:	483f      	ldr	r0, [pc, #252]	; (43e0 <_ext_irq_init+0x148>)
    42e4:	4b44      	ldr	r3, [pc, #272]	; (43f8 <_ext_irq_init+0x160>)
    42e6:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    42e8:	2100      	movs	r1, #0
    42ea:	483d      	ldr	r0, [pc, #244]	; (43e0 <_ext_irq_init+0x148>)
    42ec:	4b43      	ldr	r3, [pc, #268]	; (43fc <_ext_irq_init+0x164>)
    42ee:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    42f0:	2100      	movs	r1, #0
    42f2:	483b      	ldr	r0, [pc, #236]	; (43e0 <_ext_irq_init+0x148>)
    42f4:	4b42      	ldr	r3, [pc, #264]	; (4400 <_ext_irq_init+0x168>)
    42f6:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    42f8:	f240 31bb 	movw	r1, #955	; 0x3bb
    42fc:	4838      	ldr	r0, [pc, #224]	; (43e0 <_ext_irq_init+0x148>)
    42fe:	4b41      	ldr	r3, [pc, #260]	; (4404 <_ext_irq_init+0x16c>)
    4300:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    4302:	f240 313b 	movw	r1, #827	; 0x33b
    4306:	4836      	ldr	r0, [pc, #216]	; (43e0 <_ext_irq_init+0x148>)
    4308:	4b3f      	ldr	r3, [pc, #252]	; (4408 <_ext_irq_init+0x170>)
    430a:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    430c:	2100      	movs	r1, #0
    430e:	4834      	ldr	r0, [pc, #208]	; (43e0 <_ext_irq_init+0x148>)
    4310:	4b3e      	ldr	r3, [pc, #248]	; (440c <_ext_irq_init+0x174>)
    4312:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    4314:	4a3e      	ldr	r2, [pc, #248]	; (4410 <_ext_irq_init+0x178>)
    4316:	2100      	movs	r1, #0
    4318:	4831      	ldr	r0, [pc, #196]	; (43e0 <_ext_irq_init+0x148>)
    431a:	4b3e      	ldr	r3, [pc, #248]	; (4414 <_ext_irq_init+0x17c>)
    431c:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    431e:	2211      	movs	r2, #17
    4320:	2101      	movs	r1, #1
    4322:	482f      	ldr	r0, [pc, #188]	; (43e0 <_ext_irq_init+0x148>)
    4324:	4b3b      	ldr	r3, [pc, #236]	; (4414 <_ext_irq_init+0x17c>)
    4326:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    4328:	482d      	ldr	r0, [pc, #180]	; (43e0 <_ext_irq_init+0x148>)
    432a:	4b3b      	ldr	r3, [pc, #236]	; (4418 <_ext_irq_init+0x180>)
    432c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    432e:	200c      	movs	r0, #12
    4330:	4b3a      	ldr	r3, [pc, #232]	; (441c <_ext_irq_init+0x184>)
    4332:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    4334:	200c      	movs	r0, #12
    4336:	4b3a      	ldr	r3, [pc, #232]	; (4420 <_ext_irq_init+0x188>)
    4338:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    433a:	200c      	movs	r0, #12
    433c:	4b39      	ldr	r3, [pc, #228]	; (4424 <_ext_irq_init+0x18c>)
    433e:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_1_IRQn);
    4340:	200d      	movs	r0, #13
    4342:	4b36      	ldr	r3, [pc, #216]	; (441c <_ext_irq_init+0x184>)
    4344:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_1_IRQn);
    4346:	200d      	movs	r0, #13
    4348:	4b35      	ldr	r3, [pc, #212]	; (4420 <_ext_irq_init+0x188>)
    434a:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_1_IRQn);
    434c:	200d      	movs	r0, #13
    434e:	4b35      	ldr	r3, [pc, #212]	; (4424 <_ext_irq_init+0x18c>)
    4350:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_3_IRQn);
    4352:	200f      	movs	r0, #15
    4354:	4b31      	ldr	r3, [pc, #196]	; (441c <_ext_irq_init+0x184>)
    4356:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_3_IRQn);
    4358:	200f      	movs	r0, #15
    435a:	4b31      	ldr	r3, [pc, #196]	; (4420 <_ext_irq_init+0x188>)
    435c:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_3_IRQn);
    435e:	200f      	movs	r0, #15
    4360:	4b30      	ldr	r3, [pc, #192]	; (4424 <_ext_irq_init+0x18c>)
    4362:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    4364:	2010      	movs	r0, #16
    4366:	4b2d      	ldr	r3, [pc, #180]	; (441c <_ext_irq_init+0x184>)
    4368:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    436a:	2010      	movs	r0, #16
    436c:	4b2c      	ldr	r3, [pc, #176]	; (4420 <_ext_irq_init+0x188>)
    436e:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    4370:	2010      	movs	r0, #16
    4372:	4b2c      	ldr	r3, [pc, #176]	; (4424 <_ext_irq_init+0x18c>)
    4374:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    4376:	2011      	movs	r0, #17
    4378:	4b28      	ldr	r3, [pc, #160]	; (441c <_ext_irq_init+0x184>)
    437a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    437c:	2011      	movs	r0, #17
    437e:	4b28      	ldr	r3, [pc, #160]	; (4420 <_ext_irq_init+0x188>)
    4380:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    4382:	2011      	movs	r0, #17
    4384:	4b27      	ldr	r3, [pc, #156]	; (4424 <_ext_irq_init+0x18c>)
    4386:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    4388:	2012      	movs	r0, #18
    438a:	4b24      	ldr	r3, [pc, #144]	; (441c <_ext_irq_init+0x184>)
    438c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    438e:	2012      	movs	r0, #18
    4390:	4b23      	ldr	r3, [pc, #140]	; (4420 <_ext_irq_init+0x188>)
    4392:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    4394:	2012      	movs	r0, #18
    4396:	4b23      	ldr	r3, [pc, #140]	; (4424 <_ext_irq_init+0x18c>)
    4398:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    439a:	2013      	movs	r0, #19
    439c:	4b1f      	ldr	r3, [pc, #124]	; (441c <_ext_irq_init+0x184>)
    439e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    43a0:	2013      	movs	r0, #19
    43a2:	4b1f      	ldr	r3, [pc, #124]	; (4420 <_ext_irq_init+0x188>)
    43a4:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    43a6:	2013      	movs	r0, #19
    43a8:	4b1e      	ldr	r3, [pc, #120]	; (4424 <_ext_irq_init+0x18c>)
    43aa:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_8_IRQn);
    43ac:	2014      	movs	r0, #20
    43ae:	4b1b      	ldr	r3, [pc, #108]	; (441c <_ext_irq_init+0x184>)
    43b0:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_8_IRQn);
    43b2:	2014      	movs	r0, #20
    43b4:	4b1a      	ldr	r3, [pc, #104]	; (4420 <_ext_irq_init+0x188>)
    43b6:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_8_IRQn);
    43b8:	2014      	movs	r0, #20
    43ba:	4b1a      	ldr	r3, [pc, #104]	; (4424 <_ext_irq_init+0x18c>)
    43bc:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_9_IRQn);
    43be:	2015      	movs	r0, #21
    43c0:	4b16      	ldr	r3, [pc, #88]	; (441c <_ext_irq_init+0x184>)
    43c2:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_9_IRQn);
    43c4:	2015      	movs	r0, #21
    43c6:	4b16      	ldr	r3, [pc, #88]	; (4420 <_ext_irq_init+0x188>)
    43c8:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_9_IRQn);
    43ca:	2015      	movs	r0, #21
    43cc:	4b15      	ldr	r3, [pc, #84]	; (4424 <_ext_irq_init+0x18c>)
    43ce:	4798      	blx	r3

	callback = cb;
    43d0:	4a15      	ldr	r2, [pc, #84]	; (4428 <_ext_irq_init+0x190>)
    43d2:	687b      	ldr	r3, [r7, #4]
    43d4:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    43d6:	2300      	movs	r3, #0
}
    43d8:	4618      	mov	r0, r3
    43da:	3708      	adds	r7, #8
    43dc:	46bd      	mov	sp, r7
    43de:	bd80      	pop	{r7, pc}
    43e0:	40002800 	.word	0x40002800
    43e4:	00004091 	.word	0x00004091
    43e8:	00004189 	.word	0x00004189
    43ec:	00004119 	.word	0x00004119
    43f0:	0000406d 	.word	0x0000406d
    43f4:	000041b9 	.word	0x000041b9
    43f8:	00004145 	.word	0x00004145
    43fc:	000041e1 	.word	0x000041e1
    4400:	000041ff 	.word	0x000041ff
    4404:	0000421b 	.word	0x0000421b
    4408:	0000425f 	.word	0x0000425f
    440c:	0000427b 	.word	0x0000427b
    4410:	90999013 	.word	0x90999013
    4414:	00004237 	.word	0x00004237
    4418:	000040ed 	.word	0x000040ed
    441c:	00003fed 	.word	0x00003fed
    4420:	00004031 	.word	0x00004031
    4424:	00003fb1 	.word	0x00003fb1
    4428:	20000ce4 	.word	0x20000ce4

0000442c <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    442c:	b580      	push	{r7, lr}
    442e:	b084      	sub	sp, #16
    4430:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    4432:	4841      	ldr	r0, [pc, #260]	; (4538 <_ext_irq_handler+0x10c>)
    4434:	4b41      	ldr	r3, [pc, #260]	; (453c <_ext_irq_handler+0x110>)
    4436:	4798      	blx	r3
    4438:	4603      	mov	r3, r0
    443a:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    443c:	f04f 33ff 	mov.w	r3, #4294967295
    4440:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    4442:	683b      	ldr	r3, [r7, #0]
    4444:	4619      	mov	r1, r3
    4446:	483c      	ldr	r0, [pc, #240]	; (4538 <_ext_irq_handler+0x10c>)
    4448:	4b3d      	ldr	r3, [pc, #244]	; (4540 <_ext_irq_handler+0x114>)
    444a:	4798      	blx	r3

	ASSERT(callback);
    444c:	4b3d      	ldr	r3, [pc, #244]	; (4544 <_ext_irq_handler+0x118>)
    444e:	681b      	ldr	r3, [r3, #0]
    4450:	2b00      	cmp	r3, #0
    4452:	bf14      	ite	ne
    4454:	2301      	movne	r3, #1
    4456:	2300      	moveq	r3, #0
    4458:	b2db      	uxtb	r3, r3
    445a:	f44f 7284 	mov.w	r2, #264	; 0x108
    445e:	493a      	ldr	r1, [pc, #232]	; (4548 <_ext_irq_handler+0x11c>)
    4460:	4618      	mov	r0, r3
    4462:	4b3a      	ldr	r3, [pc, #232]	; (454c <_ext_irq_handler+0x120>)
    4464:	4798      	blx	r3

	while (flags) {
    4466:	e060      	b.n	452a <_ext_irq_handler+0xfe>
		pos = ffs(flags) - 1;
    4468:	683b      	ldr	r3, [r7, #0]
    446a:	4618      	mov	r0, r3
    446c:	4b38      	ldr	r3, [pc, #224]	; (4550 <_ext_irq_handler+0x124>)
    446e:	4798      	blx	r3
    4470:	4603      	mov	r3, r0
    4472:	b2db      	uxtb	r3, r3
    4474:	3b01      	subs	r3, #1
    4476:	b2db      	uxtb	r3, r3
    4478:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    447a:	e047      	b.n	450c <_ext_irq_handler+0xe0>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    447c:	2300      	movs	r3, #0
    447e:	71fb      	strb	r3, [r7, #7]
    4480:	2309      	movs	r3, #9
    4482:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    4484:	e024      	b.n	44d0 <_ext_irq_handler+0xa4>
				middle = (upper + lower) >> 1;
    4486:	79ba      	ldrb	r2, [r7, #6]
    4488:	79fb      	ldrb	r3, [r7, #7]
    448a:	4413      	add	r3, r2
    448c:	105b      	asrs	r3, r3, #1
    448e:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    4490:	797b      	ldrb	r3, [r7, #5]
    4492:	4a30      	ldr	r2, [pc, #192]	; (4554 <_ext_irq_handler+0x128>)
    4494:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4498:	461a      	mov	r2, r3
    449a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    449e:	429a      	cmp	r2, r3
    44a0:	d106      	bne.n	44b0 <_ext_irq_handler+0x84>
					pin = _map[middle].pin;
    44a2:	797b      	ldrb	r3, [r7, #5]
    44a4:	4a2b      	ldr	r2, [pc, #172]	; (4554 <_ext_irq_handler+0x128>)
    44a6:	00db      	lsls	r3, r3, #3
    44a8:	4413      	add	r3, r2
    44aa:	685b      	ldr	r3, [r3, #4]
    44ac:	60bb      	str	r3, [r7, #8]
					break;
    44ae:	e013      	b.n	44d8 <_ext_irq_handler+0xac>
				}
				if (_map[middle].extint < pos) {
    44b0:	797b      	ldrb	r3, [r7, #5]
    44b2:	4a28      	ldr	r2, [pc, #160]	; (4554 <_ext_irq_handler+0x128>)
    44b4:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    44b8:	461a      	mov	r2, r3
    44ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
    44be:	429a      	cmp	r2, r3
    44c0:	da03      	bge.n	44ca <_ext_irq_handler+0x9e>
					lower = middle + 1;
    44c2:	797b      	ldrb	r3, [r7, #5]
    44c4:	3301      	adds	r3, #1
    44c6:	71fb      	strb	r3, [r7, #7]
    44c8:	e002      	b.n	44d0 <_ext_irq_handler+0xa4>
				} else {
					upper = middle - 1;
    44ca:	797b      	ldrb	r3, [r7, #5]
    44cc:	3b01      	subs	r3, #1
    44ce:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    44d0:	79ba      	ldrb	r2, [r7, #6]
    44d2:	79fb      	ldrb	r3, [r7, #7]
    44d4:	429a      	cmp	r2, r3
    44d6:	d2d6      	bcs.n	4486 <_ext_irq_handler+0x5a>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    44d8:	68bb      	ldr	r3, [r7, #8]
    44da:	f1b3 3fff 	cmp.w	r3, #4294967295
    44de:	d003      	beq.n	44e8 <_ext_irq_handler+0xbc>
				callback(pin);
    44e0:	4b18      	ldr	r3, [pc, #96]	; (4544 <_ext_irq_handler+0x118>)
    44e2:	681b      	ldr	r3, [r3, #0]
    44e4:	68b8      	ldr	r0, [r7, #8]
    44e6:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    44e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
    44ec:	2201      	movs	r2, #1
    44ee:	fa02 f303 	lsl.w	r3, r2, r3
    44f2:	43da      	mvns	r2, r3
    44f4:	683b      	ldr	r3, [r7, #0]
    44f6:	4013      	ands	r3, r2
    44f8:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    44fa:	683b      	ldr	r3, [r7, #0]
    44fc:	4618      	mov	r0, r3
    44fe:	4b14      	ldr	r3, [pc, #80]	; (4550 <_ext_irq_handler+0x124>)
    4500:	4798      	blx	r3
    4502:	4603      	mov	r3, r0
    4504:	b2db      	uxtb	r3, r3
    4506:	3b01      	subs	r3, #1
    4508:	b2db      	uxtb	r3, r3
    450a:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    450c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4510:	f1b3 3fff 	cmp.w	r3, #4294967295
    4514:	d1b2      	bne.n	447c <_ext_irq_handler+0x50>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    4516:	4808      	ldr	r0, [pc, #32]	; (4538 <_ext_irq_handler+0x10c>)
    4518:	4b08      	ldr	r3, [pc, #32]	; (453c <_ext_irq_handler+0x110>)
    451a:	4798      	blx	r3
    451c:	4603      	mov	r3, r0
    451e:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    4520:	683b      	ldr	r3, [r7, #0]
    4522:	4619      	mov	r1, r3
    4524:	4804      	ldr	r0, [pc, #16]	; (4538 <_ext_irq_handler+0x10c>)
    4526:	4b06      	ldr	r3, [pc, #24]	; (4540 <_ext_irq_handler+0x114>)
    4528:	4798      	blx	r3
	while (flags) {
    452a:	683b      	ldr	r3, [r7, #0]
    452c:	2b00      	cmp	r3, #0
    452e:	d19b      	bne.n	4468 <_ext_irq_handler+0x3c>
	}
}
    4530:	bf00      	nop
    4532:	3710      	adds	r7, #16
    4534:	46bd      	mov	sp, r7
    4536:	bd80      	pop	{r7, pc}
    4538:	40002800 	.word	0x40002800
    453c:	000040b9 	.word	0x000040b9
    4540:	000040d1 	.word	0x000040d1
    4544:	20000ce4 	.word	0x20000ce4
    4548:	0001325c 	.word	0x0001325c
    454c:	00002d4d 	.word	0x00002d4d
    4550:	00012d79 	.word	0x00012d79
    4554:	00013214 	.word	0x00013214

00004558 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    4558:	b580      	push	{r7, lr}
    455a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    455c:	4b01      	ldr	r3, [pc, #4]	; (4564 <EIC_0_Handler+0xc>)
    455e:	4798      	blx	r3
} /**
    4560:	bf00      	nop
    4562:	bd80      	pop	{r7, pc}
    4564:	0000442d 	.word	0x0000442d

00004568 <EIC_1_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_1_Handler(void)
{
    4568:	b580      	push	{r7, lr}
    456a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    456c:	4b01      	ldr	r3, [pc, #4]	; (4574 <EIC_1_Handler+0xc>)
    456e:	4798      	blx	r3
} /**
    4570:	bf00      	nop
    4572:	bd80      	pop	{r7, pc}
    4574:	0000442d 	.word	0x0000442d

00004578 <EIC_3_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_3_Handler(void)
{
    4578:	b580      	push	{r7, lr}
    457a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    457c:	4b01      	ldr	r3, [pc, #4]	; (4584 <EIC_3_Handler+0xc>)
    457e:	4798      	blx	r3
} /**
    4580:	bf00      	nop
    4582:	bd80      	pop	{r7, pc}
    4584:	0000442d 	.word	0x0000442d

00004588 <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    4588:	b580      	push	{r7, lr}
    458a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    458c:	4b01      	ldr	r3, [pc, #4]	; (4594 <EIC_4_Handler+0xc>)
    458e:	4798      	blx	r3
} /**
    4590:	bf00      	nop
    4592:	bd80      	pop	{r7, pc}
    4594:	0000442d 	.word	0x0000442d

00004598 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    4598:	b580      	push	{r7, lr}
    459a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    459c:	4b01      	ldr	r3, [pc, #4]	; (45a4 <EIC_5_Handler+0xc>)
    459e:	4798      	blx	r3
} /**
    45a0:	bf00      	nop
    45a2:	bd80      	pop	{r7, pc}
    45a4:	0000442d 	.word	0x0000442d

000045a8 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    45a8:	b580      	push	{r7, lr}
    45aa:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    45ac:	4b01      	ldr	r3, [pc, #4]	; (45b4 <EIC_6_Handler+0xc>)
    45ae:	4798      	blx	r3
} /**
    45b0:	bf00      	nop
    45b2:	bd80      	pop	{r7, pc}
    45b4:	0000442d 	.word	0x0000442d

000045b8 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    45b8:	b580      	push	{r7, lr}
    45ba:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    45bc:	4b01      	ldr	r3, [pc, #4]	; (45c4 <EIC_7_Handler+0xc>)
    45be:	4798      	blx	r3
} /**
    45c0:	bf00      	nop
    45c2:	bd80      	pop	{r7, pc}
    45c4:	0000442d 	.word	0x0000442d

000045c8 <EIC_8_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_8_Handler(void)
{
    45c8:	b580      	push	{r7, lr}
    45ca:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    45cc:	4b01      	ldr	r3, [pc, #4]	; (45d4 <EIC_8_Handler+0xc>)
    45ce:	4798      	blx	r3
} /**
    45d0:	bf00      	nop
    45d2:	bd80      	pop	{r7, pc}
    45d4:	0000442d 	.word	0x0000442d

000045d8 <EIC_9_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    45d8:	b580      	push	{r7, lr}
    45da:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    45dc:	4b01      	ldr	r3, [pc, #4]	; (45e4 <EIC_9_Handler+0xc>)
    45de:	4798      	blx	r3
}
    45e0:	bf00      	nop
    45e2:	bd80      	pop	{r7, pc}
    45e4:	0000442d 	.word	0x0000442d

000045e8 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    45e8:	b480      	push	{r7}
    45ea:	b085      	sub	sp, #20
    45ec:	af00      	add	r7, sp, #0
    45ee:	60f8      	str	r0, [r7, #12]
    45f0:	460b      	mov	r3, r1
    45f2:	607a      	str	r2, [r7, #4]
    45f4:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    45f6:	7afa      	ldrb	r2, [r7, #11]
    45f8:	68fb      	ldr	r3, [r7, #12]
    45fa:	3248      	adds	r2, #72	; 0x48
    45fc:	6879      	ldr	r1, [r7, #4]
    45fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    4602:	bf00      	nop
    4604:	3714      	adds	r7, #20
    4606:	46bd      	mov	sp, r7
    4608:	f85d 7b04 	ldr.w	r7, [sp], #4
    460c:	4770      	bx	lr

0000460e <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    460e:	b480      	push	{r7}
    4610:	b083      	sub	sp, #12
    4612:	af00      	add	r7, sp, #0
    4614:	6078      	str	r0, [r7, #4]
    4616:	460b      	mov	r3, r1
    4618:	70fb      	strb	r3, [r7, #3]
    461a:	4613      	mov	r3, r2
    461c:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    461e:	78fb      	ldrb	r3, [r7, #3]
    4620:	687a      	ldr	r2, [r7, #4]
    4622:	3304      	adds	r3, #4
    4624:	00db      	lsls	r3, r3, #3
    4626:	4413      	add	r3, r2
    4628:	78ba      	ldrb	r2, [r7, #2]
    462a:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    462c:	78fb      	ldrb	r3, [r7, #3]
    462e:	78ba      	ldrb	r2, [r7, #2]
    4630:	43d2      	mvns	r2, r2
    4632:	b2d1      	uxtb	r1, r2
    4634:	687a      	ldr	r2, [r7, #4]
    4636:	3304      	adds	r3, #4
    4638:	00db      	lsls	r3, r3, #3
    463a:	4413      	add	r3, r2
    463c:	460a      	mov	r2, r1
    463e:	711a      	strb	r2, [r3, #4]
}
    4640:	bf00      	nop
    4642:	370c      	adds	r7, #12
    4644:	46bd      	mov	sp, r7
    4646:	f85d 7b04 	ldr.w	r7, [sp], #4
    464a:	4770      	bx	lr

0000464c <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    464c:	b480      	push	{r7}
    464e:	b085      	sub	sp, #20
    4650:	af00      	add	r7, sp, #0
    4652:	60f8      	str	r0, [r7, #12]
    4654:	460b      	mov	r3, r1
    4656:	607a      	str	r2, [r7, #4]
    4658:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    465a:	7afa      	ldrb	r2, [r7, #11]
    465c:	68fb      	ldr	r3, [r7, #12]
    465e:	3204      	adds	r2, #4
    4660:	6879      	ldr	r1, [r7, #4]
    4662:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    4666:	bf00      	nop
    4668:	3714      	adds	r7, #20
    466a:	46bd      	mov	sp, r7
    466c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4670:	4770      	bx	lr
	...

00004674 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    4674:	b580      	push	{r7, lr}
    4676:	b082      	sub	sp, #8
    4678:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    467a:	2300      	movs	r3, #0
    467c:	71fb      	strb	r3, [r7, #7]
    467e:	e00b      	b.n	4698 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    4680:	79fb      	ldrb	r3, [r7, #7]
    4682:	4a18      	ldr	r2, [pc, #96]	; (46e4 <_event_system_init+0x70>)
    4684:	5cd3      	ldrb	r3, [r2, r3]
    4686:	461a      	mov	r2, r3
    4688:	79fb      	ldrb	r3, [r7, #7]
    468a:	4619      	mov	r1, r3
    468c:	4816      	ldr	r0, [pc, #88]	; (46e8 <_event_system_init+0x74>)
    468e:	4b17      	ldr	r3, [pc, #92]	; (46ec <_event_system_init+0x78>)
    4690:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    4692:	79fb      	ldrb	r3, [r7, #7]
    4694:	3301      	adds	r3, #1
    4696:	71fb      	strb	r3, [r7, #7]
    4698:	79fb      	ldrb	r3, [r7, #7]
    469a:	2b42      	cmp	r3, #66	; 0x42
    469c:	d9f0      	bls.n	4680 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    469e:	2300      	movs	r3, #0
    46a0:	71fb      	strb	r3, [r7, #7]
    46a2:	e016      	b.n	46d2 <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    46a4:	79fb      	ldrb	r3, [r7, #7]
    46a6:	4a12      	ldr	r2, [pc, #72]	; (46f0 <_event_system_init+0x7c>)
    46a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    46ac:	461a      	mov	r2, r3
    46ae:	79fb      	ldrb	r3, [r7, #7]
    46b0:	4619      	mov	r1, r3
    46b2:	480d      	ldr	r0, [pc, #52]	; (46e8 <_event_system_init+0x74>)
    46b4:	4b0f      	ldr	r3, [pc, #60]	; (46f4 <_event_system_init+0x80>)
    46b6:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    46b8:	79fb      	ldrb	r3, [r7, #7]
    46ba:	4a0f      	ldr	r2, [pc, #60]	; (46f8 <_event_system_init+0x84>)
    46bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    46c0:	b2da      	uxtb	r2, r3
    46c2:	79fb      	ldrb	r3, [r7, #7]
    46c4:	4619      	mov	r1, r3
    46c6:	4808      	ldr	r0, [pc, #32]	; (46e8 <_event_system_init+0x74>)
    46c8:	4b0c      	ldr	r3, [pc, #48]	; (46fc <_event_system_init+0x88>)
    46ca:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    46cc:	79fb      	ldrb	r3, [r7, #7]
    46ce:	3301      	adds	r3, #1
    46d0:	71fb      	strb	r3, [r7, #7]
    46d2:	79fb      	ldrb	r3, [r7, #7]
    46d4:	2b1f      	cmp	r3, #31
    46d6:	d9e5      	bls.n	46a4 <_event_system_init+0x30>
	}

	return ERR_NONE;
    46d8:	2300      	movs	r3, #0
}
    46da:	4618      	mov	r0, r3
    46dc:	3708      	adds	r7, #8
    46de:	46bd      	mov	sp, r7
    46e0:	bd80      	pop	{r7, pc}
    46e2:	bf00      	nop
    46e4:	00013274 	.word	0x00013274
    46e8:	4100e000 	.word	0x4100e000
    46ec:	000045e9 	.word	0x000045e9
    46f0:	000132b8 	.word	0x000132b8
    46f4:	0000464d 	.word	0x0000464d
    46f8:	000132f8 	.word	0x000132f8
    46fc:	0000460f 	.word	0x0000460f

00004700 <hri_gclk_wait_for_sync>:
{
    4700:	b480      	push	{r7}
    4702:	b083      	sub	sp, #12
    4704:	af00      	add	r7, sp, #0
    4706:	6078      	str	r0, [r7, #4]
    4708:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    470a:	bf00      	nop
    470c:	687b      	ldr	r3, [r7, #4]
    470e:	685a      	ldr	r2, [r3, #4]
    4710:	683b      	ldr	r3, [r7, #0]
    4712:	4013      	ands	r3, r2
    4714:	2b00      	cmp	r3, #0
    4716:	d1f9      	bne.n	470c <hri_gclk_wait_for_sync+0xc>
}
    4718:	bf00      	nop
    471a:	370c      	adds	r7, #12
    471c:	46bd      	mov	sp, r7
    471e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4722:	4770      	bx	lr

00004724 <hri_gclk_write_GENCTRL_reg>:
{
    4724:	b580      	push	{r7, lr}
    4726:	b084      	sub	sp, #16
    4728:	af00      	add	r7, sp, #0
    472a:	60f8      	str	r0, [r7, #12]
    472c:	460b      	mov	r3, r1
    472e:	607a      	str	r2, [r7, #4]
    4730:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    4732:	7afa      	ldrb	r2, [r7, #11]
    4734:	68fb      	ldr	r3, [r7, #12]
    4736:	3208      	adds	r2, #8
    4738:	6879      	ldr	r1, [r7, #4]
    473a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    473e:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    4742:	68f8      	ldr	r0, [r7, #12]
    4744:	4b02      	ldr	r3, [pc, #8]	; (4750 <hri_gclk_write_GENCTRL_reg+0x2c>)
    4746:	4798      	blx	r3
}
    4748:	bf00      	nop
    474a:	3710      	adds	r7, #16
    474c:	46bd      	mov	sp, r7
    474e:	bd80      	pop	{r7, pc}
    4750:	00004701 	.word	0x00004701

00004754 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    4754:	b580      	push	{r7, lr}
    4756:	b082      	sub	sp, #8
    4758:	af00      	add	r7, sp, #0
    475a:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    475c:	687b      	ldr	r3, [r7, #4]
    475e:	f003 0301 	and.w	r3, r3, #1
    4762:	2b00      	cmp	r3, #0
    4764:	d004      	beq.n	4770 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    4766:	4a36      	ldr	r2, [pc, #216]	; (4840 <_gclk_init_generators_by_fref+0xec>)
    4768:	2100      	movs	r1, #0
    476a:	4836      	ldr	r0, [pc, #216]	; (4844 <_gclk_init_generators_by_fref+0xf0>)
    476c:	4b36      	ldr	r3, [pc, #216]	; (4848 <_gclk_init_generators_by_fref+0xf4>)
    476e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    4770:	687b      	ldr	r3, [r7, #4]
    4772:	f003 0302 	and.w	r3, r3, #2
    4776:	2b00      	cmp	r3, #0
    4778:	d004      	beq.n	4784 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    477a:	4a34      	ldr	r2, [pc, #208]	; (484c <_gclk_init_generators_by_fref+0xf8>)
    477c:	2101      	movs	r1, #1
    477e:	4831      	ldr	r0, [pc, #196]	; (4844 <_gclk_init_generators_by_fref+0xf0>)
    4780:	4b31      	ldr	r3, [pc, #196]	; (4848 <_gclk_init_generators_by_fref+0xf4>)
    4782:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    4784:	687b      	ldr	r3, [r7, #4]
    4786:	f003 0304 	and.w	r3, r3, #4
    478a:	2b00      	cmp	r3, #0
    478c:	d004      	beq.n	4798 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    478e:	4a30      	ldr	r2, [pc, #192]	; (4850 <_gclk_init_generators_by_fref+0xfc>)
    4790:	2102      	movs	r1, #2
    4792:	482c      	ldr	r0, [pc, #176]	; (4844 <_gclk_init_generators_by_fref+0xf0>)
    4794:	4b2c      	ldr	r3, [pc, #176]	; (4848 <_gclk_init_generators_by_fref+0xf4>)
    4796:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    4798:	687b      	ldr	r3, [r7, #4]
    479a:	f003 0308 	and.w	r3, r3, #8
    479e:	2b00      	cmp	r3, #0
    47a0:	d004      	beq.n	47ac <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    47a2:	4a2c      	ldr	r2, [pc, #176]	; (4854 <_gclk_init_generators_by_fref+0x100>)
    47a4:	2103      	movs	r1, #3
    47a6:	4827      	ldr	r0, [pc, #156]	; (4844 <_gclk_init_generators_by_fref+0xf0>)
    47a8:	4b27      	ldr	r3, [pc, #156]	; (4848 <_gclk_init_generators_by_fref+0xf4>)
    47aa:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    47ac:	687b      	ldr	r3, [r7, #4]
    47ae:	f003 0310 	and.w	r3, r3, #16
    47b2:	2b00      	cmp	r3, #0
    47b4:	d004      	beq.n	47c0 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    47b6:	4a28      	ldr	r2, [pc, #160]	; (4858 <_gclk_init_generators_by_fref+0x104>)
    47b8:	2104      	movs	r1, #4
    47ba:	4822      	ldr	r0, [pc, #136]	; (4844 <_gclk_init_generators_by_fref+0xf0>)
    47bc:	4b22      	ldr	r3, [pc, #136]	; (4848 <_gclk_init_generators_by_fref+0xf4>)
    47be:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    47c0:	687b      	ldr	r3, [r7, #4]
    47c2:	f003 0320 	and.w	r3, r3, #32
    47c6:	2b00      	cmp	r3, #0
    47c8:	d004      	beq.n	47d4 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    47ca:	4a24      	ldr	r2, [pc, #144]	; (485c <_gclk_init_generators_by_fref+0x108>)
    47cc:	2105      	movs	r1, #5
    47ce:	481d      	ldr	r0, [pc, #116]	; (4844 <_gclk_init_generators_by_fref+0xf0>)
    47d0:	4b1d      	ldr	r3, [pc, #116]	; (4848 <_gclk_init_generators_by_fref+0xf4>)
    47d2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    47d4:	687b      	ldr	r3, [r7, #4]
    47d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    47da:	2b00      	cmp	r3, #0
    47dc:	d004      	beq.n	47e8 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    47de:	4a20      	ldr	r2, [pc, #128]	; (4860 <_gclk_init_generators_by_fref+0x10c>)
    47e0:	2106      	movs	r1, #6
    47e2:	4818      	ldr	r0, [pc, #96]	; (4844 <_gclk_init_generators_by_fref+0xf0>)
    47e4:	4b18      	ldr	r3, [pc, #96]	; (4848 <_gclk_init_generators_by_fref+0xf4>)
    47e6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    47e8:	687b      	ldr	r3, [r7, #4]
    47ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
    47ee:	2b00      	cmp	r3, #0
    47f0:	d004      	beq.n	47fc <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    47f2:	4a1c      	ldr	r2, [pc, #112]	; (4864 <_gclk_init_generators_by_fref+0x110>)
    47f4:	2107      	movs	r1, #7
    47f6:	4813      	ldr	r0, [pc, #76]	; (4844 <_gclk_init_generators_by_fref+0xf0>)
    47f8:	4b13      	ldr	r3, [pc, #76]	; (4848 <_gclk_init_generators_by_fref+0xf4>)
    47fa:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    47fc:	687b      	ldr	r3, [r7, #4]
    47fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4802:	2b00      	cmp	r3, #0
    4804:	d004      	beq.n	4810 <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    4806:	4a18      	ldr	r2, [pc, #96]	; (4868 <_gclk_init_generators_by_fref+0x114>)
    4808:	2108      	movs	r1, #8
    480a:	480e      	ldr	r0, [pc, #56]	; (4844 <_gclk_init_generators_by_fref+0xf0>)
    480c:	4b0e      	ldr	r3, [pc, #56]	; (4848 <_gclk_init_generators_by_fref+0xf4>)
    480e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    4810:	687b      	ldr	r3, [r7, #4]
    4812:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    4816:	2b00      	cmp	r3, #0
    4818:	d004      	beq.n	4824 <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    481a:	4a14      	ldr	r2, [pc, #80]	; (486c <_gclk_init_generators_by_fref+0x118>)
    481c:	210a      	movs	r1, #10
    481e:	4809      	ldr	r0, [pc, #36]	; (4844 <_gclk_init_generators_by_fref+0xf0>)
    4820:	4b09      	ldr	r3, [pc, #36]	; (4848 <_gclk_init_generators_by_fref+0xf4>)
    4822:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    4824:	687b      	ldr	r3, [r7, #4]
    4826:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    482a:	2b00      	cmp	r3, #0
    482c:	d004      	beq.n	4838 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    482e:	4a10      	ldr	r2, [pc, #64]	; (4870 <_gclk_init_generators_by_fref+0x11c>)
    4830:	210b      	movs	r1, #11
    4832:	4804      	ldr	r0, [pc, #16]	; (4844 <_gclk_init_generators_by_fref+0xf0>)
    4834:	4b04      	ldr	r3, [pc, #16]	; (4848 <_gclk_init_generators_by_fref+0xf4>)
    4836:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    4838:	bf00      	nop
    483a:	3708      	adds	r7, #8
    483c:	46bd      	mov	sp, r7
    483e:	bd80      	pop	{r7, pc}
    4840:	00010107 	.word	0x00010107
    4844:	40001c00 	.word	0x40001c00
    4848:	00004725 	.word	0x00004725
    484c:	00010907 	.word	0x00010907
    4850:	00010906 	.word	0x00010906
    4854:	00020908 	.word	0x00020908
    4858:	00010901 	.word	0x00010901
    485c:	00062901 	.word	0x00062901
    4860:	000c2901 	.word	0x000c2901
    4864:	00082908 	.word	0x00082908
    4868:	00032901 	.word	0x00032901
    486c:	00010905 	.word	0x00010905
    4870:	00041905 	.word	0x00041905

00004874 <hri_mclk_write_CPUDIV_reg>:
{
    4874:	b480      	push	{r7}
    4876:	b083      	sub	sp, #12
    4878:	af00      	add	r7, sp, #0
    487a:	6078      	str	r0, [r7, #4]
    487c:	460b      	mov	r3, r1
    487e:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    4880:	687b      	ldr	r3, [r7, #4]
    4882:	78fa      	ldrb	r2, [r7, #3]
    4884:	715a      	strb	r2, [r3, #5]
}
    4886:	bf00      	nop
    4888:	370c      	adds	r7, #12
    488a:	46bd      	mov	sp, r7
    488c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4890:	4770      	bx	lr
	...

00004894 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    4894:	b580      	push	{r7, lr}
    4896:	b082      	sub	sp, #8
    4898:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    489a:	4b05      	ldr	r3, [pc, #20]	; (48b0 <_mclk_init+0x1c>)
    489c:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    489e:	2101      	movs	r1, #1
    48a0:	6878      	ldr	r0, [r7, #4]
    48a2:	4b04      	ldr	r3, [pc, #16]	; (48b4 <_mclk_init+0x20>)
    48a4:	4798      	blx	r3
}
    48a6:	bf00      	nop
    48a8:	3708      	adds	r7, #8
    48aa:	46bd      	mov	sp, r7
    48ac:	bd80      	pop	{r7, pc}
    48ae:	bf00      	nop
    48b0:	40000800 	.word	0x40000800
    48b4:	00004875 	.word	0x00004875

000048b8 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    48b8:	b480      	push	{r7}
    48ba:	b083      	sub	sp, #12
    48bc:	af00      	add	r7, sp, #0
    48be:	6078      	str	r0, [r7, #4]
    48c0:	460b      	mov	r3, r1
    48c2:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    48c4:	687b      	ldr	r3, [r7, #4]
    48c6:	78fa      	ldrb	r2, [r7, #3]
    48c8:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    48ca:	bf00      	nop
    48cc:	370c      	adds	r7, #12
    48ce:	46bd      	mov	sp, r7
    48d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    48d4:	4770      	bx	lr

000048d6 <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    48d6:	b480      	push	{r7}
    48d8:	b083      	sub	sp, #12
    48da:	af00      	add	r7, sp, #0
    48dc:	6078      	str	r0, [r7, #4]
    48de:	460b      	mov	r3, r1
    48e0:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    48e2:	687b      	ldr	r3, [r7, #4]
    48e4:	887a      	ldrh	r2, [r7, #2]
    48e6:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    48e8:	bf00      	nop
    48ea:	370c      	adds	r7, #12
    48ec:	46bd      	mov	sp, r7
    48ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    48f2:	4770      	bx	lr

000048f4 <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    48f4:	b480      	push	{r7}
    48f6:	b083      	sub	sp, #12
    48f8:	af00      	add	r7, sp, #0
    48fa:	6078      	str	r0, [r7, #4]
    48fc:	460b      	mov	r3, r1
    48fe:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    4900:	687b      	ldr	r3, [r7, #4]
    4902:	78fa      	ldrb	r2, [r7, #3]
    4904:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4906:	bf00      	nop
    4908:	370c      	adds	r7, #12
    490a:	46bd      	mov	sp, r7
    490c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4910:	4770      	bx	lr

00004912 <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    4912:	b480      	push	{r7}
    4914:	b083      	sub	sp, #12
    4916:	af00      	add	r7, sp, #0
    4918:	6078      	str	r0, [r7, #4]
    491a:	460b      	mov	r3, r1
    491c:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    491e:	687b      	ldr	r3, [r7, #4]
    4920:	78fa      	ldrb	r2, [r7, #3]
    4922:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4924:	bf00      	nop
    4926:	370c      	adds	r7, #12
    4928:	46bd      	mov	sp, r7
    492a:	f85d 7b04 	ldr.w	r7, [sp], #4
    492e:	4770      	bx	lr

00004930 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    4930:	b480      	push	{r7}
    4932:	b085      	sub	sp, #20
    4934:	af00      	add	r7, sp, #0
    4936:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    4938:	687b      	ldr	r3, [r7, #4]
    493a:	69db      	ldr	r3, [r3, #28]
    493c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    493e:	68fb      	ldr	r3, [r7, #12]
    4940:	0a1b      	lsrs	r3, r3, #8
    4942:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4946:	60fb      	str	r3, [r7, #12]
	return tmp;
    4948:	68fb      	ldr	r3, [r7, #12]
}
    494a:	4618      	mov	r0, r3
    494c:	3714      	adds	r7, #20
    494e:	46bd      	mov	sp, r7
    4950:	f85d 7b04 	ldr.w	r7, [sp], #4
    4954:	4770      	bx	lr

00004956 <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    4956:	b480      	push	{r7}
    4958:	b083      	sub	sp, #12
    495a:	af00      	add	r7, sp, #0
    495c:	6078      	str	r0, [r7, #4]
    495e:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    4960:	687b      	ldr	r3, [r7, #4]
    4962:	683a      	ldr	r2, [r7, #0]
    4964:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4966:	bf00      	nop
    4968:	370c      	adds	r7, #12
    496a:	46bd      	mov	sp, r7
    496c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4970:	4770      	bx	lr
	...

00004974 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    4974:	b580      	push	{r7, lr}
    4976:	b082      	sub	sp, #8
    4978:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    497a:	4b13      	ldr	r3, [pc, #76]	; (49c8 <_osc32kctrl_init_sources+0x54>)
    497c:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    497e:	2300      	movs	r3, #0
    4980:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    4982:	f242 018e 	movw	r1, #8334	; 0x208e
    4986:	6878      	ldr	r0, [r7, #4]
    4988:	4b10      	ldr	r3, [pc, #64]	; (49cc <_osc32kctrl_init_sources+0x58>)
    498a:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    498c:	2100      	movs	r1, #0
    498e:	6878      	ldr	r0, [r7, #4]
    4990:	4b0f      	ldr	r3, [pc, #60]	; (49d0 <_osc32kctrl_init_sources+0x5c>)
    4992:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    4994:	2100      	movs	r1, #0
    4996:	6878      	ldr	r0, [r7, #4]
    4998:	4b0e      	ldr	r3, [pc, #56]	; (49d4 <_osc32kctrl_init_sources+0x60>)
    499a:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    499c:	6878      	ldr	r0, [r7, #4]
    499e:	4b0e      	ldr	r3, [pc, #56]	; (49d8 <_osc32kctrl_init_sources+0x64>)
    49a0:	4798      	blx	r3
    49a2:	4603      	mov	r3, r0
    49a4:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    49a6:	887b      	ldrh	r3, [r7, #2]
    49a8:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    49aa:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    49ae:	4619      	mov	r1, r3
    49b0:	6878      	ldr	r0, [r7, #4]
    49b2:	4b0a      	ldr	r3, [pc, #40]	; (49dc <_osc32kctrl_init_sources+0x68>)
    49b4:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    49b6:	2100      	movs	r1, #0
    49b8:	6878      	ldr	r0, [r7, #4]
    49ba:	4b09      	ldr	r3, [pc, #36]	; (49e0 <_osc32kctrl_init_sources+0x6c>)
    49bc:	4798      	blx	r3
	(void)calib;
}
    49be:	bf00      	nop
    49c0:	3708      	adds	r7, #8
    49c2:	46bd      	mov	sp, r7
    49c4:	bd80      	pop	{r7, pc}
    49c6:	bf00      	nop
    49c8:	40001400 	.word	0x40001400
    49cc:	000048d7 	.word	0x000048d7
    49d0:	000048f5 	.word	0x000048f5
    49d4:	00004913 	.word	0x00004913
    49d8:	00004931 	.word	0x00004931
    49dc:	00004957 	.word	0x00004957
    49e0:	000048b9 	.word	0x000048b9

000049e4 <hri_gclk_wait_for_sync>:
{
    49e4:	b480      	push	{r7}
    49e6:	b083      	sub	sp, #12
    49e8:	af00      	add	r7, sp, #0
    49ea:	6078      	str	r0, [r7, #4]
    49ec:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    49ee:	bf00      	nop
    49f0:	687b      	ldr	r3, [r7, #4]
    49f2:	685a      	ldr	r2, [r3, #4]
    49f4:	683b      	ldr	r3, [r7, #0]
    49f6:	4013      	ands	r3, r2
    49f8:	2b00      	cmp	r3, #0
    49fa:	d1f9      	bne.n	49f0 <hri_gclk_wait_for_sync+0xc>
}
    49fc:	bf00      	nop
    49fe:	370c      	adds	r7, #12
    4a00:	46bd      	mov	sp, r7
    4a02:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a06:	4770      	bx	lr

00004a08 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    4a08:	b480      	push	{r7}
    4a0a:	b083      	sub	sp, #12
    4a0c:	af00      	add	r7, sp, #0
    4a0e:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    4a10:	687b      	ldr	r3, [r7, #4]
    4a12:	685b      	ldr	r3, [r3, #4]
    4a14:	089b      	lsrs	r3, r3, #2
    4a16:	f003 0301 	and.w	r3, r3, #1
    4a1a:	2b00      	cmp	r3, #0
    4a1c:	bf14      	ite	ne
    4a1e:	2301      	movne	r3, #1
    4a20:	2300      	moveq	r3, #0
    4a22:	b2db      	uxtb	r3, r3
}
    4a24:	4618      	mov	r0, r3
    4a26:	370c      	adds	r7, #12
    4a28:	46bd      	mov	sp, r7
    4a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a2e:	4770      	bx	lr

00004a30 <hri_gclk_read_SYNCBUSY_reg>:
{
    4a30:	b480      	push	{r7}
    4a32:	b083      	sub	sp, #12
    4a34:	af00      	add	r7, sp, #0
    4a36:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    4a38:	687b      	ldr	r3, [r7, #4]
    4a3a:	685b      	ldr	r3, [r3, #4]
}
    4a3c:	4618      	mov	r0, r3
    4a3e:	370c      	adds	r7, #12
    4a40:	46bd      	mov	sp, r7
    4a42:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a46:	4770      	bx	lr

00004a48 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    4a48:	b580      	push	{r7, lr}
    4a4a:	b086      	sub	sp, #24
    4a4c:	af00      	add	r7, sp, #0
    4a4e:	60f8      	str	r0, [r7, #12]
    4a50:	460b      	mov	r3, r1
    4a52:	607a      	str	r2, [r7, #4]
    4a54:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    4a56:	7afa      	ldrb	r2, [r7, #11]
    4a58:	68fb      	ldr	r3, [r7, #12]
    4a5a:	3208      	adds	r2, #8
    4a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4a60:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    4a62:	697b      	ldr	r3, [r7, #20]
    4a64:	f023 030f 	bic.w	r3, r3, #15
    4a68:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    4a6a:	687b      	ldr	r3, [r7, #4]
    4a6c:	f003 030f 	and.w	r3, r3, #15
    4a70:	697a      	ldr	r2, [r7, #20]
    4a72:	4313      	orrs	r3, r2
    4a74:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    4a76:	7afa      	ldrb	r2, [r7, #11]
    4a78:	68fb      	ldr	r3, [r7, #12]
    4a7a:	3208      	adds	r2, #8
    4a7c:	6979      	ldr	r1, [r7, #20]
    4a7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    4a82:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    4a86:	68f8      	ldr	r0, [r7, #12]
    4a88:	4b02      	ldr	r3, [pc, #8]	; (4a94 <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    4a8a:	4798      	blx	r3
}
    4a8c:	bf00      	nop
    4a8e:	3718      	adds	r7, #24
    4a90:	46bd      	mov	sp, r7
    4a92:	bd80      	pop	{r7, pc}
    4a94:	000049e5 	.word	0x000049e5

00004a98 <hri_gclk_write_PCHCTRL_reg>:
{
    4a98:	b480      	push	{r7}
    4a9a:	b085      	sub	sp, #20
    4a9c:	af00      	add	r7, sp, #0
    4a9e:	60f8      	str	r0, [r7, #12]
    4aa0:	460b      	mov	r3, r1
    4aa2:	607a      	str	r2, [r7, #4]
    4aa4:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    4aa6:	7afa      	ldrb	r2, [r7, #11]
    4aa8:	68fb      	ldr	r3, [r7, #12]
    4aaa:	3220      	adds	r2, #32
    4aac:	6879      	ldr	r1, [r7, #4]
    4aae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    4ab2:	bf00      	nop
    4ab4:	3714      	adds	r7, #20
    4ab6:	46bd      	mov	sp, r7
    4ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4abc:	4770      	bx	lr

00004abe <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    4abe:	b480      	push	{r7}
    4ac0:	b085      	sub	sp, #20
    4ac2:	af00      	add	r7, sp, #0
    4ac4:	60f8      	str	r0, [r7, #12]
    4ac6:	460b      	mov	r3, r1
    4ac8:	607a      	str	r2, [r7, #4]
    4aca:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    4acc:	bf00      	nop
    4ace:	7afa      	ldrb	r2, [r7, #11]
    4ad0:	68f9      	ldr	r1, [r7, #12]
    4ad2:	4613      	mov	r3, r2
    4ad4:	009b      	lsls	r3, r3, #2
    4ad6:	4413      	add	r3, r2
    4ad8:	009b      	lsls	r3, r3, #2
    4ada:	440b      	add	r3, r1
    4adc:	333c      	adds	r3, #60	; 0x3c
    4ade:	681a      	ldr	r2, [r3, #0]
    4ae0:	687b      	ldr	r3, [r7, #4]
    4ae2:	4013      	ands	r3, r2
    4ae4:	2b00      	cmp	r3, #0
    4ae6:	d1f2      	bne.n	4ace <hri_oscctrl_wait_for_sync+0x10>
	};
}
    4ae8:	bf00      	nop
    4aea:	3714      	adds	r7, #20
    4aec:	46bd      	mov	sp, r7
    4aee:	f85d 7b04 	ldr.w	r7, [sp], #4
    4af2:	4770      	bx	lr

00004af4 <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    4af4:	b480      	push	{r7}
    4af6:	b083      	sub	sp, #12
    4af8:	af00      	add	r7, sp, #0
    4afa:	6078      	str	r0, [r7, #4]
    4afc:	460b      	mov	r3, r1
    4afe:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    4b00:	78fa      	ldrb	r2, [r7, #3]
    4b02:	6879      	ldr	r1, [r7, #4]
    4b04:	4613      	mov	r3, r2
    4b06:	009b      	lsls	r3, r3, #2
    4b08:	4413      	add	r3, r2
    4b0a:	009b      	lsls	r3, r3, #2
    4b0c:	440b      	add	r3, r1
    4b0e:	3340      	adds	r3, #64	; 0x40
    4b10:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    4b12:	f003 0301 	and.w	r3, r3, #1
    4b16:	2b00      	cmp	r3, #0
    4b18:	bf14      	ite	ne
    4b1a:	2301      	movne	r3, #1
    4b1c:	2300      	moveq	r3, #0
    4b1e:	b2db      	uxtb	r3, r3
}
    4b20:	4618      	mov	r0, r3
    4b22:	370c      	adds	r7, #12
    4b24:	46bd      	mov	sp, r7
    4b26:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b2a:	4770      	bx	lr

00004b2c <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    4b2c:	b480      	push	{r7}
    4b2e:	b083      	sub	sp, #12
    4b30:	af00      	add	r7, sp, #0
    4b32:	6078      	str	r0, [r7, #4]
    4b34:	460b      	mov	r3, r1
    4b36:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    4b38:	78fa      	ldrb	r2, [r7, #3]
    4b3a:	6879      	ldr	r1, [r7, #4]
    4b3c:	4613      	mov	r3, r2
    4b3e:	009b      	lsls	r3, r3, #2
    4b40:	4413      	add	r3, r2
    4b42:	009b      	lsls	r3, r3, #2
    4b44:	440b      	add	r3, r1
    4b46:	3340      	adds	r3, #64	; 0x40
    4b48:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    4b4a:	085b      	lsrs	r3, r3, #1
    4b4c:	f003 0301 	and.w	r3, r3, #1
    4b50:	2b00      	cmp	r3, #0
    4b52:	bf14      	ite	ne
    4b54:	2301      	movne	r3, #1
    4b56:	2300      	moveq	r3, #0
    4b58:	b2db      	uxtb	r3, r3
}
    4b5a:	4618      	mov	r0, r3
    4b5c:	370c      	adds	r7, #12
    4b5e:	46bd      	mov	sp, r7
    4b60:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b64:	4770      	bx	lr
	...

00004b68 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    4b68:	b580      	push	{r7, lr}
    4b6a:	b082      	sub	sp, #8
    4b6c:	af00      	add	r7, sp, #0
    4b6e:	6078      	str	r0, [r7, #4]
    4b70:	460b      	mov	r3, r1
    4b72:	70fb      	strb	r3, [r7, #3]
    4b74:	4613      	mov	r3, r2
    4b76:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    4b78:	78fa      	ldrb	r2, [r7, #3]
    4b7a:	6879      	ldr	r1, [r7, #4]
    4b7c:	4613      	mov	r3, r2
    4b7e:	009b      	lsls	r3, r3, #2
    4b80:	4413      	add	r3, r2
    4b82:	009b      	lsls	r3, r3, #2
    4b84:	440b      	add	r3, r1
    4b86:	3330      	adds	r3, #48	; 0x30
    4b88:	78ba      	ldrb	r2, [r7, #2]
    4b8a:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    4b8c:	78fb      	ldrb	r3, [r7, #3]
    4b8e:	2202      	movs	r2, #2
    4b90:	4619      	mov	r1, r3
    4b92:	6878      	ldr	r0, [r7, #4]
    4b94:	4b02      	ldr	r3, [pc, #8]	; (4ba0 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    4b96:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4b98:	bf00      	nop
    4b9a:	3708      	adds	r7, #8
    4b9c:	46bd      	mov	sp, r7
    4b9e:	bd80      	pop	{r7, pc}
    4ba0:	00004abf 	.word	0x00004abf

00004ba4 <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    4ba4:	b580      	push	{r7, lr}
    4ba6:	b084      	sub	sp, #16
    4ba8:	af00      	add	r7, sp, #0
    4baa:	60f8      	str	r0, [r7, #12]
    4bac:	460b      	mov	r3, r1
    4bae:	607a      	str	r2, [r7, #4]
    4bb0:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    4bb2:	7afa      	ldrb	r2, [r7, #11]
    4bb4:	68f9      	ldr	r1, [r7, #12]
    4bb6:	4613      	mov	r3, r2
    4bb8:	009b      	lsls	r3, r3, #2
    4bba:	4413      	add	r3, r2
    4bbc:	009b      	lsls	r3, r3, #2
    4bbe:	440b      	add	r3, r1
    4bc0:	3334      	adds	r3, #52	; 0x34
    4bc2:	687a      	ldr	r2, [r7, #4]
    4bc4:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    4bc6:	7afb      	ldrb	r3, [r7, #11]
    4bc8:	2206      	movs	r2, #6
    4bca:	4619      	mov	r1, r3
    4bcc:	68f8      	ldr	r0, [r7, #12]
    4bce:	4b03      	ldr	r3, [pc, #12]	; (4bdc <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    4bd0:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4bd2:	bf00      	nop
    4bd4:	3710      	adds	r7, #16
    4bd6:	46bd      	mov	sp, r7
    4bd8:	bd80      	pop	{r7, pc}
    4bda:	bf00      	nop
    4bdc:	00004abf 	.word	0x00004abf

00004be0 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    4be0:	b480      	push	{r7}
    4be2:	b085      	sub	sp, #20
    4be4:	af00      	add	r7, sp, #0
    4be6:	60f8      	str	r0, [r7, #12]
    4be8:	460b      	mov	r3, r1
    4bea:	607a      	str	r2, [r7, #4]
    4bec:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    4bee:	7afa      	ldrb	r2, [r7, #11]
    4bf0:	68f9      	ldr	r1, [r7, #12]
    4bf2:	4613      	mov	r3, r2
    4bf4:	009b      	lsls	r3, r3, #2
    4bf6:	4413      	add	r3, r2
    4bf8:	009b      	lsls	r3, r3, #2
    4bfa:	440b      	add	r3, r1
    4bfc:	3338      	adds	r3, #56	; 0x38
    4bfe:	687a      	ldr	r2, [r7, #4]
    4c00:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4c02:	bf00      	nop
    4c04:	3714      	adds	r7, #20
    4c06:	46bd      	mov	sp, r7
    4c08:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c0c:	4770      	bx	lr

00004c0e <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    4c0e:	b480      	push	{r7}
    4c10:	b083      	sub	sp, #12
    4c12:	af00      	add	r7, sp, #0
    4c14:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    4c16:	687b      	ldr	r3, [r7, #4]
    4c18:	691b      	ldr	r3, [r3, #16]
    4c1a:	085b      	lsrs	r3, r3, #1
    4c1c:	f003 0301 	and.w	r3, r3, #1
    4c20:	2b00      	cmp	r3, #0
    4c22:	bf14      	ite	ne
    4c24:	2301      	movne	r3, #1
    4c26:	2300      	moveq	r3, #0
    4c28:	b2db      	uxtb	r3, r3
}
    4c2a:	4618      	mov	r0, r3
    4c2c:	370c      	adds	r7, #12
    4c2e:	46bd      	mov	sp, r7
    4c30:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c34:	4770      	bx	lr

00004c36 <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    4c36:	b480      	push	{r7}
    4c38:	b083      	sub	sp, #12
    4c3a:	af00      	add	r7, sp, #0
    4c3c:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    4c3e:	687b      	ldr	r3, [r7, #4]
    4c40:	691b      	ldr	r3, [r3, #16]
    4c42:	0a1b      	lsrs	r3, r3, #8
    4c44:	f003 0301 	and.w	r3, r3, #1
    4c48:	2b00      	cmp	r3, #0
    4c4a:	bf14      	ite	ne
    4c4c:	2301      	movne	r3, #1
    4c4e:	2300      	moveq	r3, #0
    4c50:	b2db      	uxtb	r3, r3
}
    4c52:	4618      	mov	r0, r3
    4c54:	370c      	adds	r7, #12
    4c56:	46bd      	mov	sp, r7
    4c58:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c5c:	4770      	bx	lr

00004c5e <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    4c5e:	b480      	push	{r7}
    4c60:	b085      	sub	sp, #20
    4c62:	af00      	add	r7, sp, #0
    4c64:	6078      	str	r0, [r7, #4]
    4c66:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    4c68:	687b      	ldr	r3, [r7, #4]
    4c6a:	691b      	ldr	r3, [r3, #16]
    4c6c:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    4c6e:	68fa      	ldr	r2, [r7, #12]
    4c70:	683b      	ldr	r3, [r7, #0]
    4c72:	4013      	ands	r3, r2
    4c74:	60fb      	str	r3, [r7, #12]
	return tmp;
    4c76:	68fb      	ldr	r3, [r7, #12]
}
    4c78:	4618      	mov	r0, r3
    4c7a:	3714      	adds	r7, #20
    4c7c:	46bd      	mov	sp, r7
    4c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c82:	4770      	bx	lr

00004c84 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    4c84:	b480      	push	{r7}
    4c86:	b085      	sub	sp, #20
    4c88:	af00      	add	r7, sp, #0
    4c8a:	60f8      	str	r0, [r7, #12]
    4c8c:	460b      	mov	r3, r1
    4c8e:	607a      	str	r2, [r7, #4]
    4c90:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    4c92:	7afb      	ldrb	r3, [r7, #11]
    4c94:	68fa      	ldr	r2, [r7, #12]
    4c96:	3304      	adds	r3, #4
    4c98:	009b      	lsls	r3, r3, #2
    4c9a:	4413      	add	r3, r2
    4c9c:	687a      	ldr	r2, [r7, #4]
    4c9e:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4ca0:	bf00      	nop
    4ca2:	3714      	adds	r7, #20
    4ca4:	46bd      	mov	sp, r7
    4ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
    4caa:	4770      	bx	lr

00004cac <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    4cac:	b480      	push	{r7}
    4cae:	b083      	sub	sp, #12
    4cb0:	af00      	add	r7, sp, #0
    4cb2:	6078      	str	r0, [r7, #4]
    4cb4:	460b      	mov	r3, r1
    4cb6:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    4cb8:	687b      	ldr	r3, [r7, #4]
    4cba:	78fa      	ldrb	r2, [r7, #3]
    4cbc:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4cbe:	bf00      	nop
    4cc0:	370c      	adds	r7, #12
    4cc2:	46bd      	mov	sp, r7
    4cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
    4cc8:	4770      	bx	lr

00004cca <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    4cca:	b480      	push	{r7}
    4ccc:	b085      	sub	sp, #20
    4cce:	af00      	add	r7, sp, #0
    4cd0:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    4cd2:	687b      	ldr	r3, [r7, #4]
    4cd4:	f893 3020 	ldrb.w	r3, [r3, #32]
    4cd8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    4cda:	7bfb      	ldrb	r3, [r7, #15]
    4cdc:	f003 0301 	and.w	r3, r3, #1
    4ce0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4ce2:	7bfb      	ldrb	r3, [r7, #15]
    4ce4:	2b00      	cmp	r3, #0
    4ce6:	bf14      	ite	ne
    4ce8:	2301      	movne	r3, #1
    4cea:	2300      	moveq	r3, #0
    4cec:	b2db      	uxtb	r3, r3
}
    4cee:	4618      	mov	r0, r3
    4cf0:	3714      	adds	r7, #20
    4cf2:	46bd      	mov	sp, r7
    4cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
    4cf8:	4770      	bx	lr

00004cfa <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    4cfa:	b480      	push	{r7}
    4cfc:	b083      	sub	sp, #12
    4cfe:	af00      	add	r7, sp, #0
    4d00:	6078      	str	r0, [r7, #4]
    4d02:	460b      	mov	r3, r1
    4d04:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    4d06:	687b      	ldr	r3, [r7, #4]
    4d08:	78fa      	ldrb	r2, [r7, #3]
    4d0a:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4d0e:	bf00      	nop
    4d10:	370c      	adds	r7, #12
    4d12:	46bd      	mov	sp, r7
    4d14:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d18:	4770      	bx	lr

00004d1a <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    4d1a:	b480      	push	{r7}
    4d1c:	b083      	sub	sp, #12
    4d1e:	af00      	add	r7, sp, #0
    4d20:	6078      	str	r0, [r7, #4]
    4d22:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    4d24:	687b      	ldr	r3, [r7, #4]
    4d26:	683a      	ldr	r2, [r7, #0]
    4d28:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4d2a:	bf00      	nop
    4d2c:	370c      	adds	r7, #12
    4d2e:	46bd      	mov	sp, r7
    4d30:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d34:	4770      	bx	lr

00004d36 <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    4d36:	b480      	push	{r7}
    4d38:	b083      	sub	sp, #12
    4d3a:	af00      	add	r7, sp, #0
    4d3c:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    4d3e:	687b      	ldr	r3, [r7, #4]
    4d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    4d42:	4618      	mov	r0, r3
    4d44:	370c      	adds	r7, #12
    4d46:	46bd      	mov	sp, r7
    4d48:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d4c:	4770      	bx	lr

00004d4e <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    4d4e:	b480      	push	{r7}
    4d50:	b083      	sub	sp, #12
    4d52:	af00      	add	r7, sp, #0
    4d54:	6078      	str	r0, [r7, #4]
    4d56:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    4d58:	687b      	ldr	r3, [r7, #4]
    4d5a:	683a      	ldr	r2, [r7, #0]
    4d5c:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4d5e:	bf00      	nop
    4d60:	370c      	adds	r7, #12
    4d62:	46bd      	mov	sp, r7
    4d64:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d68:	4770      	bx	lr

00004d6a <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    4d6a:	b480      	push	{r7}
    4d6c:	b085      	sub	sp, #20
    4d6e:	af00      	add	r7, sp, #0
    4d70:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    4d72:	687b      	ldr	r3, [r7, #4]
    4d74:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    4d78:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    4d7a:	7bfb      	ldrb	r3, [r7, #15]
    4d7c:	085b      	lsrs	r3, r3, #1
    4d7e:	b2db      	uxtb	r3, r3
    4d80:	f003 0301 	and.w	r3, r3, #1
    4d84:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4d86:	7bfb      	ldrb	r3, [r7, #15]
    4d88:	2b00      	cmp	r3, #0
    4d8a:	bf14      	ite	ne
    4d8c:	2301      	movne	r3, #1
    4d8e:	2300      	moveq	r3, #0
    4d90:	b2db      	uxtb	r3, r3
}
    4d92:	4618      	mov	r0, r3
    4d94:	3714      	adds	r7, #20
    4d96:	46bd      	mov	sp, r7
    4d98:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d9c:	4770      	bx	lr

00004d9e <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    4d9e:	b480      	push	{r7}
    4da0:	b085      	sub	sp, #20
    4da2:	af00      	add	r7, sp, #0
    4da4:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    4da6:	687b      	ldr	r3, [r7, #4]
    4da8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    4dac:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    4dae:	7bfb      	ldrb	r3, [r7, #15]
    4db0:	089b      	lsrs	r3, r3, #2
    4db2:	b2db      	uxtb	r3, r3
    4db4:	f003 0301 	and.w	r3, r3, #1
    4db8:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4dba:	7bfb      	ldrb	r3, [r7, #15]
    4dbc:	2b00      	cmp	r3, #0
    4dbe:	bf14      	ite	ne
    4dc0:	2301      	movne	r3, #1
    4dc2:	2300      	moveq	r3, #0
    4dc4:	b2db      	uxtb	r3, r3
}
    4dc6:	4618      	mov	r0, r3
    4dc8:	3714      	adds	r7, #20
    4dca:	46bd      	mov	sp, r7
    4dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4dd0:	4770      	bx	lr

00004dd2 <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    4dd2:	b480      	push	{r7}
    4dd4:	b085      	sub	sp, #20
    4dd6:	af00      	add	r7, sp, #0
    4dd8:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    4dda:	687b      	ldr	r3, [r7, #4]
    4ddc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    4de0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    4de2:	7bfb      	ldrb	r3, [r7, #15]
    4de4:	08db      	lsrs	r3, r3, #3
    4de6:	b2db      	uxtb	r3, r3
    4de8:	f003 0301 	and.w	r3, r3, #1
    4dec:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4dee:	7bfb      	ldrb	r3, [r7, #15]
    4df0:	2b00      	cmp	r3, #0
    4df2:	bf14      	ite	ne
    4df4:	2301      	movne	r3, #1
    4df6:	2300      	moveq	r3, #0
    4df8:	b2db      	uxtb	r3, r3
}
    4dfa:	4618      	mov	r0, r3
    4dfc:	3714      	adds	r7, #20
    4dfe:	46bd      	mov	sp, r7
    4e00:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e04:	4770      	bx	lr

00004e06 <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    4e06:	b480      	push	{r7}
    4e08:	b085      	sub	sp, #20
    4e0a:	af00      	add	r7, sp, #0
    4e0c:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    4e0e:	687b      	ldr	r3, [r7, #4]
    4e10:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    4e14:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    4e16:	7bfb      	ldrb	r3, [r7, #15]
    4e18:	091b      	lsrs	r3, r3, #4
    4e1a:	b2db      	uxtb	r3, r3
    4e1c:	f003 0301 	and.w	r3, r3, #1
    4e20:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4e22:	7bfb      	ldrb	r3, [r7, #15]
    4e24:	2b00      	cmp	r3, #0
    4e26:	bf14      	ite	ne
    4e28:	2301      	movne	r3, #1
    4e2a:	2300      	moveq	r3, #0
    4e2c:	b2db      	uxtb	r3, r3
}
    4e2e:	4618      	mov	r0, r3
    4e30:	3714      	adds	r7, #20
    4e32:	46bd      	mov	sp, r7
    4e34:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e38:	4770      	bx	lr
	...

00004e3c <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    4e3c:	b580      	push	{r7, lr}
    4e3e:	b082      	sub	sp, #8
    4e40:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    4e42:	4b0a      	ldr	r3, [pc, #40]	; (4e6c <_oscctrl_init_sources+0x30>)
    4e44:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    4e46:	4a0a      	ldr	r2, [pc, #40]	; (4e70 <_oscctrl_init_sources+0x34>)
    4e48:	2101      	movs	r1, #1
    4e4a:	6878      	ldr	r0, [r7, #4]
    4e4c:	4b09      	ldr	r3, [pc, #36]	; (4e74 <_oscctrl_init_sources+0x38>)
    4e4e:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    4e50:	bf00      	nop
    4e52:	6878      	ldr	r0, [r7, #4]
    4e54:	4b08      	ldr	r3, [pc, #32]	; (4e78 <_oscctrl_init_sources+0x3c>)
    4e56:	4798      	blx	r3
    4e58:	4603      	mov	r3, r0
    4e5a:	f083 0301 	eor.w	r3, r3, #1
    4e5e:	b2db      	uxtb	r3, r3
    4e60:	2b00      	cmp	r3, #0
    4e62:	d1f6      	bne.n	4e52 <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    4e64:	bf00      	nop
    4e66:	3708      	adds	r7, #8
    4e68:	46bd      	mov	sp, r7
    4e6a:	bd80      	pop	{r7, pc}
    4e6c:	40001000 	.word	0x40001000
    4e70:	03002646 	.word	0x03002646
    4e74:	00004c85 	.word	0x00004c85
    4e78:	00004c0f 	.word	0x00004c0f

00004e7c <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    4e7c:	b580      	push	{r7, lr}
    4e7e:	b084      	sub	sp, #16
    4e80:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    4e82:	4b6b      	ldr	r3, [pc, #428]	; (5030 <_oscctrl_init_referenced_generators+0x1b4>)
    4e84:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    4e86:	2204      	movs	r2, #4
    4e88:	2100      	movs	r1, #0
    4e8a:	486a      	ldr	r0, [pc, #424]	; (5034 <_oscctrl_init_referenced_generators+0x1b8>)
    4e8c:	4b6a      	ldr	r3, [pc, #424]	; (5038 <_oscctrl_init_referenced_generators+0x1bc>)
    4e8e:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    4e90:	bf00      	nop
    4e92:	4868      	ldr	r0, [pc, #416]	; (5034 <_oscctrl_init_referenced_generators+0x1b8>)
    4e94:	4b69      	ldr	r3, [pc, #420]	; (503c <_oscctrl_init_referenced_generators+0x1c0>)
    4e96:	4798      	blx	r3
    4e98:	4603      	mov	r3, r0
    4e9a:	2b00      	cmp	r3, #0
    4e9c:	d1f9      	bne.n	4e92 <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    4e9e:	2100      	movs	r1, #0
    4ea0:	68f8      	ldr	r0, [r7, #12]
    4ea2:	4b67      	ldr	r3, [pc, #412]	; (5040 <_oscctrl_init_referenced_generators+0x1c4>)
    4ea4:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    4ea6:	4967      	ldr	r1, [pc, #412]	; (5044 <_oscctrl_init_referenced_generators+0x1c8>)
    4ea8:	68f8      	ldr	r0, [r7, #12]
    4eaa:	4b67      	ldr	r3, [pc, #412]	; (5048 <_oscctrl_init_referenced_generators+0x1cc>)
    4eac:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    4eae:	bf00      	nop
    4eb0:	68f8      	ldr	r0, [r7, #12]
    4eb2:	4b66      	ldr	r3, [pc, #408]	; (504c <_oscctrl_init_referenced_generators+0x1d0>)
    4eb4:	4798      	blx	r3
    4eb6:	4603      	mov	r3, r0
    4eb8:	2b00      	cmp	r3, #0
    4eba:	d1f9      	bne.n	4eb0 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    4ebc:	2100      	movs	r1, #0
    4ebe:	68f8      	ldr	r0, [r7, #12]
    4ec0:	4b63      	ldr	r3, [pc, #396]	; (5050 <_oscctrl_init_referenced_generators+0x1d4>)
    4ec2:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    4ec4:	bf00      	nop
    4ec6:	68f8      	ldr	r0, [r7, #12]
    4ec8:	4b62      	ldr	r3, [pc, #392]	; (5054 <_oscctrl_init_referenced_generators+0x1d8>)
    4eca:	4798      	blx	r3
    4ecc:	4603      	mov	r3, r0
    4ece:	2b00      	cmp	r3, #0
    4ed0:	d1f9      	bne.n	4ec6 <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    4ed2:	2302      	movs	r3, #2
    4ed4:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    4ed6:	7afb      	ldrb	r3, [r7, #11]
    4ed8:	4619      	mov	r1, r3
    4eda:	68f8      	ldr	r0, [r7, #12]
    4edc:	4b58      	ldr	r3, [pc, #352]	; (5040 <_oscctrl_init_referenced_generators+0x1c4>)
    4ede:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    4ee0:	bf00      	nop
    4ee2:	68f8      	ldr	r0, [r7, #12]
    4ee4:	4b5c      	ldr	r3, [pc, #368]	; (5058 <_oscctrl_init_referenced_generators+0x1dc>)
    4ee6:	4798      	blx	r3
    4ee8:	4603      	mov	r3, r0
    4eea:	2b00      	cmp	r3, #0
    4eec:	d1f9      	bne.n	4ee2 <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    4eee:	68f8      	ldr	r0, [r7, #12]
    4ef0:	4b5a      	ldr	r3, [pc, #360]	; (505c <_oscctrl_init_referenced_generators+0x1e0>)
    4ef2:	4798      	blx	r3
    4ef4:	4603      	mov	r3, r0
    4ef6:	4619      	mov	r1, r3
    4ef8:	68f8      	ldr	r0, [r7, #12]
    4efa:	4b59      	ldr	r3, [pc, #356]	; (5060 <_oscctrl_init_referenced_generators+0x1e4>)
    4efc:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    4efe:	bf00      	nop
    4f00:	68f8      	ldr	r0, [r7, #12]
    4f02:	4b58      	ldr	r3, [pc, #352]	; (5064 <_oscctrl_init_referenced_generators+0x1e8>)
    4f04:	4798      	blx	r3
    4f06:	4603      	mov	r3, r0
    4f08:	2b00      	cmp	r3, #0
    4f0a:	d1f9      	bne.n	4f00 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    4f0c:	2319      	movs	r3, #25
    4f0e:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    4f10:	7afb      	ldrb	r3, [r7, #11]
    4f12:	4619      	mov	r1, r3
    4f14:	68f8      	ldr	r0, [r7, #12]
    4f16:	4b4e      	ldr	r3, [pc, #312]	; (5050 <_oscctrl_init_referenced_generators+0x1d4>)
    4f18:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    4f1a:	bf00      	nop
    4f1c:	68f8      	ldr	r0, [r7, #12]
    4f1e:	4b4d      	ldr	r3, [pc, #308]	; (5054 <_oscctrl_init_referenced_generators+0x1d8>)
    4f20:	4798      	blx	r3
    4f22:	4603      	mov	r3, r0
    4f24:	2b00      	cmp	r3, #0
    4f26:	d1f9      	bne.n	4f1c <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    4f28:	2245      	movs	r2, #69	; 0x45
    4f2a:	2101      	movs	r1, #1
    4f2c:	4841      	ldr	r0, [pc, #260]	; (5034 <_oscctrl_init_referenced_generators+0x1b8>)
    4f2e:	4b4e      	ldr	r3, [pc, #312]	; (5068 <_oscctrl_init_referenced_generators+0x1ec>)
    4f30:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    4f32:	223b      	movs	r2, #59	; 0x3b
    4f34:	2100      	movs	r1, #0
    4f36:	68f8      	ldr	r0, [r7, #12]
    4f38:	4b4c      	ldr	r3, [pc, #304]	; (506c <_oscctrl_init_referenced_generators+0x1f0>)
    4f3a:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    4f3c:	f44f 6201 	mov.w	r2, #2064	; 0x810
    4f40:	2100      	movs	r1, #0
    4f42:	68f8      	ldr	r0, [r7, #12]
    4f44:	4b4a      	ldr	r3, [pc, #296]	; (5070 <_oscctrl_init_referenced_generators+0x1f4>)
    4f46:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    4f48:	2242      	movs	r2, #66	; 0x42
    4f4a:	2100      	movs	r1, #0
    4f4c:	68f8      	ldr	r0, [r7, #12]
    4f4e:	4b49      	ldr	r3, [pc, #292]	; (5074 <_oscctrl_init_referenced_generators+0x1f8>)
    4f50:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    4f52:	4a49      	ldr	r2, [pc, #292]	; (5078 <_oscctrl_init_referenced_generators+0x1fc>)
    4f54:	2101      	movs	r1, #1
    4f56:	68f8      	ldr	r0, [r7, #12]
    4f58:	4b44      	ldr	r3, [pc, #272]	; (506c <_oscctrl_init_referenced_generators+0x1f0>)
    4f5a:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    4f5c:	f44f 6203 	mov.w	r2, #2096	; 0x830
    4f60:	2101      	movs	r1, #1
    4f62:	68f8      	ldr	r0, [r7, #12]
    4f64:	4b42      	ldr	r3, [pc, #264]	; (5070 <_oscctrl_init_referenced_generators+0x1f4>)
    4f66:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    4f68:	2202      	movs	r2, #2
    4f6a:	2101      	movs	r1, #1
    4f6c:	68f8      	ldr	r0, [r7, #12]
    4f6e:	4b41      	ldr	r3, [pc, #260]	; (5074 <_oscctrl_init_referenced_generators+0x1f8>)
    4f70:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    4f72:	68f8      	ldr	r0, [r7, #12]
    4f74:	4b41      	ldr	r3, [pc, #260]	; (507c <_oscctrl_init_referenced_generators+0x200>)
    4f76:	4798      	blx	r3
    4f78:	4603      	mov	r3, r0
    4f7a:	2b00      	cmp	r3, #0
    4f7c:	d00c      	beq.n	4f98 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    4f7e:	f44f 6310 	mov.w	r3, #2304	; 0x900
    4f82:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    4f84:	bf00      	nop
    4f86:	6879      	ldr	r1, [r7, #4]
    4f88:	68f8      	ldr	r0, [r7, #12]
    4f8a:	4b3d      	ldr	r3, [pc, #244]	; (5080 <_oscctrl_init_referenced_generators+0x204>)
    4f8c:	4798      	blx	r3
    4f8e:	4602      	mov	r2, r0
    4f90:	687b      	ldr	r3, [r7, #4]
    4f92:	429a      	cmp	r2, r3
    4f94:	d1f7      	bne.n	4f86 <_oscctrl_init_referenced_generators+0x10a>
    4f96:	e009      	b.n	4fac <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    4f98:	bf00      	nop
    4f9a:	68f8      	ldr	r0, [r7, #12]
    4f9c:	4b39      	ldr	r3, [pc, #228]	; (5084 <_oscctrl_init_referenced_generators+0x208>)
    4f9e:	4798      	blx	r3
    4fa0:	4603      	mov	r3, r0
    4fa2:	f083 0301 	eor.w	r3, r3, #1
    4fa6:	b2db      	uxtb	r3, r3
    4fa8:	2b00      	cmp	r3, #0
    4faa:	d1f6      	bne.n	4f9a <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    4fac:	bf00      	nop
    4fae:	2100      	movs	r1, #0
    4fb0:	68f8      	ldr	r0, [r7, #12]
    4fb2:	4b35      	ldr	r3, [pc, #212]	; (5088 <_oscctrl_init_referenced_generators+0x20c>)
    4fb4:	4798      	blx	r3
    4fb6:	4603      	mov	r3, r0
    4fb8:	f083 0301 	eor.w	r3, r3, #1
    4fbc:	b2db      	uxtb	r3, r3
    4fbe:	2b00      	cmp	r3, #0
    4fc0:	d009      	beq.n	4fd6 <_oscctrl_init_referenced_generators+0x15a>
    4fc2:	2100      	movs	r1, #0
    4fc4:	68f8      	ldr	r0, [r7, #12]
    4fc6:	4b31      	ldr	r3, [pc, #196]	; (508c <_oscctrl_init_referenced_generators+0x210>)
    4fc8:	4798      	blx	r3
    4fca:	4603      	mov	r3, r0
    4fcc:	f083 0301 	eor.w	r3, r3, #1
    4fd0:	b2db      	uxtb	r3, r3
    4fd2:	2b00      	cmp	r3, #0
    4fd4:	d1eb      	bne.n	4fae <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    4fd6:	bf00      	nop
    4fd8:	2101      	movs	r1, #1
    4fda:	68f8      	ldr	r0, [r7, #12]
    4fdc:	4b2a      	ldr	r3, [pc, #168]	; (5088 <_oscctrl_init_referenced_generators+0x20c>)
    4fde:	4798      	blx	r3
    4fe0:	4603      	mov	r3, r0
    4fe2:	f083 0301 	eor.w	r3, r3, #1
    4fe6:	b2db      	uxtb	r3, r3
    4fe8:	2b00      	cmp	r3, #0
    4fea:	d009      	beq.n	5000 <_oscctrl_init_referenced_generators+0x184>
    4fec:	2101      	movs	r1, #1
    4fee:	68f8      	ldr	r0, [r7, #12]
    4ff0:	4b26      	ldr	r3, [pc, #152]	; (508c <_oscctrl_init_referenced_generators+0x210>)
    4ff2:	4798      	blx	r3
    4ff4:	4603      	mov	r3, r0
    4ff6:	f083 0301 	eor.w	r3, r3, #1
    4ffa:	b2db      	uxtb	r3, r3
    4ffc:	2b00      	cmp	r3, #0
    4ffe:	d1eb      	bne.n	4fd8 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    5000:	bf00      	nop
    5002:	480c      	ldr	r0, [pc, #48]	; (5034 <_oscctrl_init_referenced_generators+0x1b8>)
    5004:	4b22      	ldr	r3, [pc, #136]	; (5090 <_oscctrl_init_referenced_generators+0x214>)
    5006:	4798      	blx	r3
    5008:	4603      	mov	r3, r0
    500a:	2b00      	cmp	r3, #0
    500c:	d1f9      	bne.n	5002 <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    500e:	2207      	movs	r2, #7
    5010:	2100      	movs	r1, #0
    5012:	4808      	ldr	r0, [pc, #32]	; (5034 <_oscctrl_init_referenced_generators+0x1b8>)
    5014:	4b08      	ldr	r3, [pc, #32]	; (5038 <_oscctrl_init_referenced_generators+0x1bc>)
    5016:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    5018:	bf00      	nop
    501a:	4806      	ldr	r0, [pc, #24]	; (5034 <_oscctrl_init_referenced_generators+0x1b8>)
    501c:	4b07      	ldr	r3, [pc, #28]	; (503c <_oscctrl_init_referenced_generators+0x1c0>)
    501e:	4798      	blx	r3
    5020:	4603      	mov	r3, r0
    5022:	2b00      	cmp	r3, #0
    5024:	d1f9      	bne.n	501a <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    5026:	bf00      	nop
    5028:	3710      	adds	r7, #16
    502a:	46bd      	mov	sp, r7
    502c:	bd80      	pop	{r7, pc}
    502e:	bf00      	nop
    5030:	40001000 	.word	0x40001000
    5034:	40001c00 	.word	0x40001c00
    5038:	00004a49 	.word	0x00004a49
    503c:	00004a09 	.word	0x00004a09
    5040:	00004cad 	.word	0x00004cad
    5044:	0401bb80 	.word	0x0401bb80
    5048:	00004d4f 	.word	0x00004d4f
    504c:	00004e07 	.word	0x00004e07
    5050:	00004cfb 	.word	0x00004cfb
    5054:	00004d9f 	.word	0x00004d9f
    5058:	00004d6b 	.word	0x00004d6b
    505c:	00004d37 	.word	0x00004d37
    5060:	00004d1b 	.word	0x00004d1b
    5064:	00004dd3 	.word	0x00004dd3
    5068:	00004a99 	.word	0x00004a99
    506c:	00004ba5 	.word	0x00004ba5
    5070:	00004be1 	.word	0x00004be1
    5074:	00004b69 	.word	0x00004b69
    5078:	000407a0 	.word	0x000407a0
    507c:	00004ccb 	.word	0x00004ccb
    5080:	00004c5f 	.word	0x00004c5f
    5084:	00004c37 	.word	0x00004c37
    5088:	00004af5 	.word	0x00004af5
    508c:	00004b2d 	.word	0x00004b2d
    5090:	00004a31 	.word	0x00004a31

00005094 <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    5094:	b480      	push	{r7}
    5096:	b083      	sub	sp, #12
    5098:	af00      	add	r7, sp, #0
    509a:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    509c:	687b      	ldr	r3, [r7, #4]
    509e:	69db      	ldr	r3, [r3, #28]
    50a0:	0a9b      	lsrs	r3, r3, #10
    50a2:	f003 0301 	and.w	r3, r3, #1
    50a6:	2b00      	cmp	r3, #0
    50a8:	bf14      	ite	ne
    50aa:	2301      	movne	r3, #1
    50ac:	2300      	moveq	r3, #0
    50ae:	b2db      	uxtb	r3, r3
}
    50b0:	4618      	mov	r0, r3
    50b2:	370c      	adds	r7, #12
    50b4:	46bd      	mov	sp, r7
    50b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    50ba:	4770      	bx	lr

000050bc <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    50bc:	b480      	push	{r7}
    50be:	b083      	sub	sp, #12
    50c0:	af00      	add	r7, sp, #0
    50c2:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    50c4:	687b      	ldr	r3, [r7, #4]
    50c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    50ca:	61da      	str	r2, [r3, #28]
}
    50cc:	bf00      	nop
    50ce:	370c      	adds	r7, #12
    50d0:	46bd      	mov	sp, r7
    50d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    50d6:	4770      	bx	lr

000050d8 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    50d8:	b480      	push	{r7}
    50da:	b083      	sub	sp, #12
    50dc:	af00      	add	r7, sp, #0
    50de:	6078      	str	r0, [r7, #4]
    50e0:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    50e2:	687b      	ldr	r3, [r7, #4]
    50e4:	683a      	ldr	r2, [r7, #0]
    50e6:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    50e8:	bf00      	nop
    50ea:	370c      	adds	r7, #12
    50ec:	46bd      	mov	sp, r7
    50ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    50f2:	4770      	bx	lr

000050f4 <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    50f4:	b480      	push	{r7}
    50f6:	b083      	sub	sp, #12
    50f8:	af00      	add	r7, sp, #0
    50fa:	6078      	str	r0, [r7, #4]
    50fc:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    50fe:	687b      	ldr	r3, [r7, #4]
    5100:	683a      	ldr	r2, [r7, #0]
    5102:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5104:	bf00      	nop
    5106:	370c      	adds	r7, #12
    5108:	46bd      	mov	sp, r7
    510a:	f85d 7b04 	ldr.w	r7, [sp], #4
    510e:	4770      	bx	lr

00005110 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    5110:	b480      	push	{r7}
    5112:	b083      	sub	sp, #12
    5114:	af00      	add	r7, sp, #0
    5116:	6078      	str	r0, [r7, #4]
    5118:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    511a:	687b      	ldr	r3, [r7, #4]
    511c:	683a      	ldr	r2, [r7, #0]
    511e:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5120:	bf00      	nop
    5122:	370c      	adds	r7, #12
    5124:	46bd      	mov	sp, r7
    5126:	f85d 7b04 	ldr.w	r7, [sp], #4
    512a:	4770      	bx	lr

0000512c <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    512c:	b480      	push	{r7}
    512e:	b083      	sub	sp, #12
    5130:	af00      	add	r7, sp, #0
    5132:	6078      	str	r0, [r7, #4]
    5134:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    5136:	687b      	ldr	r3, [r7, #4]
    5138:	683a      	ldr	r2, [r7, #0]
    513a:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    513c:	bf00      	nop
    513e:	370c      	adds	r7, #12
    5140:	46bd      	mov	sp, r7
    5142:	f85d 7b04 	ldr.w	r7, [sp], #4
    5146:	4770      	bx	lr

00005148 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    5148:	b480      	push	{r7}
    514a:	b085      	sub	sp, #20
    514c:	af00      	add	r7, sp, #0
    514e:	6078      	str	r0, [r7, #4]
    5150:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    5152:	687b      	ldr	r3, [r7, #4]
    5154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5156:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    5158:	68fb      	ldr	r3, [r7, #12]
    515a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    515e:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    5160:	683b      	ldr	r3, [r7, #0]
    5162:	b2db      	uxtb	r3, r3
    5164:	68fa      	ldr	r2, [r7, #12]
    5166:	4313      	orrs	r3, r2
    5168:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    516a:	687b      	ldr	r3, [r7, #4]
    516c:	68fa      	ldr	r2, [r7, #12]
    516e:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5170:	bf00      	nop
    5172:	3714      	adds	r7, #20
    5174:	46bd      	mov	sp, r7
    5176:	f85d 7b04 	ldr.w	r7, [sp], #4
    517a:	4770      	bx	lr

0000517c <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    517c:	b480      	push	{r7}
    517e:	b085      	sub	sp, #20
    5180:	af00      	add	r7, sp, #0
    5182:	6078      	str	r0, [r7, #4]
    5184:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    5186:	687b      	ldr	r3, [r7, #4]
    5188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    518a:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    518c:	68fb      	ldr	r3, [r7, #12]
    518e:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    5192:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    5194:	683b      	ldr	r3, [r7, #0]
    5196:	041b      	lsls	r3, r3, #16
    5198:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    519c:	68fa      	ldr	r2, [r7, #12]
    519e:	4313      	orrs	r3, r2
    51a0:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    51a2:	687b      	ldr	r3, [r7, #4]
    51a4:	68fa      	ldr	r2, [r7, #12]
    51a6:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    51a8:	bf00      	nop
    51aa:	3714      	adds	r7, #20
    51ac:	46bd      	mov	sp, r7
    51ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    51b2:	4770      	bx	lr

000051b4 <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    51b4:	b480      	push	{r7}
    51b6:	b083      	sub	sp, #12
    51b8:	af00      	add	r7, sp, #0
    51ba:	6078      	str	r0, [r7, #4]
    51bc:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    51be:	687b      	ldr	r3, [r7, #4]
    51c0:	683a      	ldr	r2, [r7, #0]
    51c2:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    51c4:	bf00      	nop
    51c6:	370c      	adds	r7, #12
    51c8:	46bd      	mov	sp, r7
    51ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    51ce:	4770      	bx	lr

000051d0 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    51d0:	b480      	push	{r7}
    51d2:	b083      	sub	sp, #12
    51d4:	af00      	add	r7, sp, #0
    51d6:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    51d8:	687b      	ldr	r3, [r7, #4]
    51da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    51dc:	4618      	mov	r0, r3
    51de:	370c      	adds	r7, #12
    51e0:	46bd      	mov	sp, r7
    51e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    51e6:	4770      	bx	lr

000051e8 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    51e8:	b480      	push	{r7}
    51ea:	b085      	sub	sp, #20
    51ec:	af00      	add	r7, sp, #0
    51ee:	60f8      	str	r0, [r7, #12]
    51f0:	60b9      	str	r1, [r7, #8]
    51f2:	607a      	str	r2, [r7, #4]
	while (count--) {
    51f4:	e007      	b.n	5206 <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    51f6:	68fb      	ldr	r3, [r7, #12]
    51f8:	1c5a      	adds	r2, r3, #1
    51fa:	60fa      	str	r2, [r7, #12]
    51fc:	68ba      	ldr	r2, [r7, #8]
    51fe:	1c51      	adds	r1, r2, #1
    5200:	60b9      	str	r1, [r7, #8]
    5202:	7812      	ldrb	r2, [r2, #0]
    5204:	701a      	strb	r2, [r3, #0]
	while (count--) {
    5206:	687b      	ldr	r3, [r7, #4]
    5208:	1e5a      	subs	r2, r3, #1
    520a:	607a      	str	r2, [r7, #4]
    520c:	2b00      	cmp	r3, #0
    520e:	d1f2      	bne.n	51f6 <_qspi_memcpy+0xe>
	}
}
    5210:	bf00      	nop
    5212:	3714      	adds	r7, #20
    5214:	46bd      	mov	sp, r7
    5216:	f85d 7b04 	ldr.w	r7, [sp], #4
    521a:	4770      	bx	lr

0000521c <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    521c:	b580      	push	{r7, lr}
    521e:	b082      	sub	sp, #8
    5220:	af00      	add	r7, sp, #0
    5222:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    5224:	4903      	ldr	r1, [pc, #12]	; (5234 <_qspi_end_transfer+0x18>)
    5226:	6878      	ldr	r0, [r7, #4]
    5228:	4b03      	ldr	r3, [pc, #12]	; (5238 <_qspi_end_transfer+0x1c>)
    522a:	4798      	blx	r3
}
    522c:	bf00      	nop
    522e:	3708      	adds	r7, #8
    5230:	46bd      	mov	sp, r7
    5232:	bd80      	pop	{r7, pc}
    5234:	01000002 	.word	0x01000002
    5238:	000050d9 	.word	0x000050d9

0000523c <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    523c:	b580      	push	{r7, lr}
    523e:	b082      	sub	sp, #8
    5240:	af00      	add	r7, sp, #0
    5242:	6078      	str	r0, [r7, #4]
    5244:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    5246:	687b      	ldr	r3, [r7, #4]
    5248:	2b00      	cmp	r3, #0
    524a:	d004      	beq.n	5256 <_qspi_sync_init+0x1a>
    524c:	683b      	ldr	r3, [r7, #0]
    524e:	2b00      	cmp	r3, #0
    5250:	d001      	beq.n	5256 <_qspi_sync_init+0x1a>
    5252:	2301      	movs	r3, #1
    5254:	e000      	b.n	5258 <_qspi_sync_init+0x1c>
    5256:	2300      	movs	r3, #0
    5258:	f003 0301 	and.w	r3, r3, #1
    525c:	b2db      	uxtb	r3, r3
    525e:	2240      	movs	r2, #64	; 0x40
    5260:	490c      	ldr	r1, [pc, #48]	; (5294 <_qspi_sync_init+0x58>)
    5262:	4618      	mov	r0, r3
    5264:	4b0c      	ldr	r3, [pc, #48]	; (5298 <_qspi_sync_init+0x5c>)
    5266:	4798      	blx	r3
	dev->prvt = hw;
    5268:	687b      	ldr	r3, [r7, #4]
    526a:	683a      	ldr	r2, [r7, #0]
    526c:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    526e:	687b      	ldr	r3, [r7, #4]
    5270:	681b      	ldr	r3, [r3, #0]
    5272:	2101      	movs	r1, #1
    5274:	4618      	mov	r0, r3
    5276:	4b09      	ldr	r3, [pc, #36]	; (529c <_qspi_sync_init+0x60>)
    5278:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    527a:	4909      	ldr	r1, [pc, #36]	; (52a0 <_qspi_sync_init+0x64>)
    527c:	6838      	ldr	r0, [r7, #0]
    527e:	4b09      	ldr	r3, [pc, #36]	; (52a4 <_qspi_sync_init+0x68>)
    5280:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    5282:	4909      	ldr	r1, [pc, #36]	; (52a8 <_qspi_sync_init+0x6c>)
    5284:	6838      	ldr	r0, [r7, #0]
    5286:	4b09      	ldr	r3, [pc, #36]	; (52ac <_qspi_sync_init+0x70>)
    5288:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    528a:	2300      	movs	r3, #0
}
    528c:	4618      	mov	r0, r3
    528e:	3708      	adds	r7, #8
    5290:	46bd      	mov	sp, r7
    5292:	bd80      	pop	{r7, pc}
    5294:	00013378 	.word	0x00013378
    5298:	00002d4d 	.word	0x00002d4d
    529c:	000050d9 	.word	0x000050d9
    52a0:	06000011 	.word	0x06000011
    52a4:	000050f5 	.word	0x000050f5
    52a8:	00241300 	.word	0x00241300
    52ac:	00005111 	.word	0x00005111

000052b0 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    52b0:	b580      	push	{r7, lr}
    52b2:	b082      	sub	sp, #8
    52b4:	af00      	add	r7, sp, #0
    52b6:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    52b8:	687b      	ldr	r3, [r7, #4]
    52ba:	681b      	ldr	r3, [r3, #0]
    52bc:	2102      	movs	r1, #2
    52be:	4618      	mov	r0, r3
    52c0:	4b03      	ldr	r3, [pc, #12]	; (52d0 <_qspi_sync_enable+0x20>)
    52c2:	4798      	blx	r3
	return ERR_NONE;
    52c4:	2300      	movs	r3, #0
}
    52c6:	4618      	mov	r0, r3
    52c8:	3708      	adds	r7, #8
    52ca:	46bd      	mov	sp, r7
    52cc:	bd80      	pop	{r7, pc}
    52ce:	bf00      	nop
    52d0:	000050d9 	.word	0x000050d9

000052d4 <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    52d4:	b580      	push	{r7, lr}
    52d6:	b082      	sub	sp, #8
    52d8:	af00      	add	r7, sp, #0
    52da:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    52dc:	687b      	ldr	r3, [r7, #4]
    52de:	681b      	ldr	r3, [r3, #0]
    52e0:	2100      	movs	r1, #0
    52e2:	4618      	mov	r0, r3
    52e4:	4b03      	ldr	r3, [pc, #12]	; (52f4 <_qspi_sync_disable+0x20>)
    52e6:	4798      	blx	r3
	return ERR_NONE;
    52e8:	2300      	movs	r3, #0
}
    52ea:	4618      	mov	r0, r3
    52ec:	3708      	adds	r7, #8
    52ee:	46bd      	mov	sp, r7
    52f0:	bd80      	pop	{r7, pc}
    52f2:	bf00      	nop
    52f4:	000050d9 	.word	0x000050d9

000052f8 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    52f8:	b580      	push	{r7, lr}
    52fa:	b084      	sub	sp, #16
    52fc:	af00      	add	r7, sp, #0
    52fe:	6078      	str	r0, [r7, #4]
    5300:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    5302:	687b      	ldr	r3, [r7, #4]
    5304:	681b      	ldr	r3, [r3, #0]
    5306:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    5308:	683b      	ldr	r3, [r7, #0]
    530a:	781b      	ldrb	r3, [r3, #0]
    530c:	f003 0320 	and.w	r3, r3, #32
    5310:	b2db      	uxtb	r3, r3
    5312:	2b00      	cmp	r3, #0
    5314:	d005      	beq.n	5322 <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    5316:	683b      	ldr	r3, [r7, #0]
    5318:	689b      	ldr	r3, [r3, #8]
    531a:	4619      	mov	r1, r3
    531c:	68f8      	ldr	r0, [r7, #12]
    531e:	4b13      	ldr	r3, [pc, #76]	; (536c <_qspi_sync_command_set_ifr+0x74>)
    5320:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    5322:	683b      	ldr	r3, [r7, #0]
    5324:	781b      	ldrb	r3, [r3, #0]
    5326:	f003 0310 	and.w	r3, r3, #16
    532a:	b2db      	uxtb	r3, r3
    532c:	2b00      	cmp	r3, #0
    532e:	d005      	beq.n	533c <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    5330:	683b      	ldr	r3, [r7, #0]
    5332:	791b      	ldrb	r3, [r3, #4]
    5334:	4619      	mov	r1, r3
    5336:	68f8      	ldr	r0, [r7, #12]
    5338:	4b0d      	ldr	r3, [pc, #52]	; (5370 <_qspi_sync_command_set_ifr+0x78>)
    533a:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    533c:	683b      	ldr	r3, [r7, #0]
    533e:	781b      	ldrb	r3, [r3, #0]
    5340:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5344:	b2db      	uxtb	r3, r3
    5346:	2b00      	cmp	r3, #0
    5348:	d005      	beq.n	5356 <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    534a:	683b      	ldr	r3, [r7, #0]
    534c:	795b      	ldrb	r3, [r3, #5]
    534e:	4619      	mov	r1, r3
    5350:	68f8      	ldr	r0, [r7, #12]
    5352:	4b08      	ldr	r3, [pc, #32]	; (5374 <_qspi_sync_command_set_ifr+0x7c>)
    5354:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    5356:	683b      	ldr	r3, [r7, #0]
    5358:	681b      	ldr	r3, [r3, #0]
    535a:	4619      	mov	r1, r3
    535c:	68f8      	ldr	r0, [r7, #12]
    535e:	4b06      	ldr	r3, [pc, #24]	; (5378 <_qspi_sync_command_set_ifr+0x80>)
    5360:	4798      	blx	r3
}
    5362:	bf00      	nop
    5364:	3710      	adds	r7, #16
    5366:	46bd      	mov	sp, r7
    5368:	bd80      	pop	{r7, pc}
    536a:	bf00      	nop
    536c:	0000512d 	.word	0x0000512d
    5370:	00005149 	.word	0x00005149
    5374:	0000517d 	.word	0x0000517d
    5378:	000051b5 	.word	0x000051b5

0000537c <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    537c:	b580      	push	{r7, lr}
    537e:	b084      	sub	sp, #16
    5380:	af00      	add	r7, sp, #0
    5382:	6078      	str	r0, [r7, #4]
    5384:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    5386:	687b      	ldr	r3, [r7, #4]
    5388:	681b      	ldr	r3, [r3, #0]
    538a:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    538c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    5390:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    5392:	683b      	ldr	r3, [r7, #0]
    5394:	781b      	ldrb	r3, [r3, #0]
    5396:	f003 0320 	and.w	r3, r3, #32
    539a:	b2db      	uxtb	r3, r3
    539c:	2b00      	cmp	r3, #0
    539e:	d004      	beq.n	53aa <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    53a0:	683b      	ldr	r3, [r7, #0]
    53a2:	689b      	ldr	r3, [r3, #8]
    53a4:	68fa      	ldr	r2, [r7, #12]
    53a6:	4413      	add	r3, r2
    53a8:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    53aa:	68b8      	ldr	r0, [r7, #8]
    53ac:	4b18      	ldr	r3, [pc, #96]	; (5410 <_qspi_sync_run_transfer+0x94>)
    53ae:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    53b0:	683b      	ldr	r3, [r7, #0]
    53b2:	691b      	ldr	r3, [r3, #16]
    53b4:	2b00      	cmp	r3, #0
    53b6:	d103      	bne.n	53c0 <_qspi_sync_run_transfer+0x44>
    53b8:	683b      	ldr	r3, [r7, #0]
    53ba:	695b      	ldr	r3, [r3, #20]
    53bc:	2b00      	cmp	r3, #0
    53be:	d001      	beq.n	53c4 <_qspi_sync_run_transfer+0x48>
    53c0:	2301      	movs	r3, #1
    53c2:	e000      	b.n	53c6 <_qspi_sync_run_transfer+0x4a>
    53c4:	2300      	movs	r3, #0
    53c6:	f003 0301 	and.w	r3, r3, #1
    53ca:	b2db      	uxtb	r3, r3
    53cc:	2282      	movs	r2, #130	; 0x82
    53ce:	4911      	ldr	r1, [pc, #68]	; (5414 <_qspi_sync_run_transfer+0x98>)
    53d0:	4618      	mov	r0, r3
    53d2:	4b11      	ldr	r3, [pc, #68]	; (5418 <_qspi_sync_run_transfer+0x9c>)
    53d4:	4798      	blx	r3

	if (cmd->tx_buf) {
    53d6:	683b      	ldr	r3, [r7, #0]
    53d8:	691b      	ldr	r3, [r3, #16]
    53da:	2b00      	cmp	r3, #0
    53dc:	d008      	beq.n	53f0 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    53de:	683b      	ldr	r3, [r7, #0]
    53e0:	6919      	ldr	r1, [r3, #16]
    53e2:	683b      	ldr	r3, [r7, #0]
    53e4:	68db      	ldr	r3, [r3, #12]
    53e6:	461a      	mov	r2, r3
    53e8:	68f8      	ldr	r0, [r7, #12]
    53ea:	4b0c      	ldr	r3, [pc, #48]	; (541c <_qspi_sync_run_transfer+0xa0>)
    53ec:	4798      	blx	r3
    53ee:	e007      	b.n	5400 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    53f0:	683b      	ldr	r3, [r7, #0]
    53f2:	6958      	ldr	r0, [r3, #20]
    53f4:	683b      	ldr	r3, [r7, #0]
    53f6:	68db      	ldr	r3, [r3, #12]
    53f8:	461a      	mov	r2, r3
    53fa:	68f9      	ldr	r1, [r7, #12]
    53fc:	4b07      	ldr	r3, [pc, #28]	; (541c <_qspi_sync_run_transfer+0xa0>)
    53fe:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    5400:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5404:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    5408:	bf00      	nop
    540a:	3710      	adds	r7, #16
    540c:	46bd      	mov	sp, r7
    540e:	bd80      	pop	{r7, pc}
    5410:	000051d1 	.word	0x000051d1
    5414:	00013378 	.word	0x00013378
    5418:	00002d4d 	.word	0x00002d4d
    541c:	000051e9 	.word	0x000051e9

00005420 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5420:	b580      	push	{r7, lr}
    5422:	b082      	sub	sp, #8
    5424:	af00      	add	r7, sp, #0
    5426:	6078      	str	r0, [r7, #4]
    5428:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    542a:	6839      	ldr	r1, [r7, #0]
    542c:	6878      	ldr	r0, [r7, #4]
    542e:	4b14      	ldr	r3, [pc, #80]	; (5480 <_qspi_sync_serial_run_command+0x60>)
    5430:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    5432:	683b      	ldr	r3, [r7, #0]
    5434:	781b      	ldrb	r3, [r3, #0]
    5436:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    543a:	b2db      	uxtb	r3, r3
    543c:	2b00      	cmp	r3, #0
    543e:	d003      	beq.n	5448 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    5440:	6839      	ldr	r1, [r7, #0]
    5442:	6878      	ldr	r0, [r7, #4]
    5444:	4b0f      	ldr	r3, [pc, #60]	; (5484 <_qspi_sync_serial_run_command+0x64>)
    5446:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    5448:	687b      	ldr	r3, [r7, #4]
    544a:	681b      	ldr	r3, [r3, #0]
    544c:	4618      	mov	r0, r3
    544e:	4b0e      	ldr	r3, [pc, #56]	; (5488 <_qspi_sync_serial_run_command+0x68>)
    5450:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    5452:	bf00      	nop
    5454:	687b      	ldr	r3, [r7, #4]
    5456:	681b      	ldr	r3, [r3, #0]
    5458:	4618      	mov	r0, r3
    545a:	4b0c      	ldr	r3, [pc, #48]	; (548c <_qspi_sync_serial_run_command+0x6c>)
    545c:	4798      	blx	r3
    545e:	4603      	mov	r3, r0
    5460:	f083 0301 	eor.w	r3, r3, #1
    5464:	b2db      	uxtb	r3, r3
    5466:	2b00      	cmp	r3, #0
    5468:	d1f4      	bne.n	5454 <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    546a:	687b      	ldr	r3, [r7, #4]
    546c:	681b      	ldr	r3, [r3, #0]
    546e:	4618      	mov	r0, r3
    5470:	4b07      	ldr	r3, [pc, #28]	; (5490 <_qspi_sync_serial_run_command+0x70>)
    5472:	4798      	blx	r3
	return ERR_NONE;
    5474:	2300      	movs	r3, #0
}
    5476:	4618      	mov	r0, r3
    5478:	3708      	adds	r7, #8
    547a:	46bd      	mov	sp, r7
    547c:	bd80      	pop	{r7, pc}
    547e:	bf00      	nop
    5480:	000052f9 	.word	0x000052f9
    5484:	0000537d 	.word	0x0000537d
    5488:	0000521d 	.word	0x0000521d
    548c:	00005095 	.word	0x00005095
    5490:	000050bd 	.word	0x000050bd

00005494 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    5494:	b480      	push	{r7}
    5496:	b083      	sub	sp, #12
    5498:	af00      	add	r7, sp, #0
    549a:	6078      	str	r0, [r7, #4]
    549c:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    549e:	bf00      	nop
    54a0:	687b      	ldr	r3, [r7, #4]
    54a2:	691a      	ldr	r2, [r3, #16]
    54a4:	683b      	ldr	r3, [r7, #0]
    54a6:	4013      	ands	r3, r2
    54a8:	2b00      	cmp	r3, #0
    54aa:	d1f9      	bne.n	54a0 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    54ac:	bf00      	nop
    54ae:	370c      	adds	r7, #12
    54b0:	46bd      	mov	sp, r7
    54b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    54b6:	4770      	bx	lr

000054b8 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    54b8:	b480      	push	{r7}
    54ba:	b083      	sub	sp, #12
    54bc:	af00      	add	r7, sp, #0
    54be:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    54c0:	687b      	ldr	r3, [r7, #4]
    54c2:	f44f 7280 	mov.w	r2, #256	; 0x100
    54c6:	819a      	strh	r2, [r3, #12]
}
    54c8:	bf00      	nop
    54ca:	370c      	adds	r7, #12
    54cc:	46bd      	mov	sp, r7
    54ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    54d2:	4770      	bx	lr

000054d4 <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    54d4:	b480      	push	{r7}
    54d6:	b083      	sub	sp, #12
    54d8:	af00      	add	r7, sp, #0
    54da:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    54dc:	687b      	ldr	r3, [r7, #4]
    54de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    54e2:	819a      	strh	r2, [r3, #12]
}
    54e4:	bf00      	nop
    54e6:	370c      	adds	r7, #12
    54e8:	46bd      	mov	sp, r7
    54ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    54ee:	4770      	bx	lr

000054f0 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    54f0:	b480      	push	{r7}
    54f2:	b083      	sub	sp, #12
    54f4:	af00      	add	r7, sp, #0
    54f6:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    54f8:	687b      	ldr	r3, [r7, #4]
    54fa:	899b      	ldrh	r3, [r3, #12]
    54fc:	b29b      	uxth	r3, r3
}
    54fe:	4618      	mov	r0, r3
    5500:	370c      	adds	r7, #12
    5502:	46bd      	mov	sp, r7
    5504:	f85d 7b04 	ldr.w	r7, [sp], #4
    5508:	4770      	bx	lr

0000550a <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    550a:	b480      	push	{r7}
    550c:	b083      	sub	sp, #12
    550e:	af00      	add	r7, sp, #0
    5510:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    5512:	687b      	ldr	r3, [r7, #4]
    5514:	895b      	ldrh	r3, [r3, #10]
    5516:	b29b      	uxth	r3, r3
}
    5518:	4618      	mov	r0, r3
    551a:	370c      	adds	r7, #12
    551c:	46bd      	mov	sp, r7
    551e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5522:	4770      	bx	lr

00005524 <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    5524:	b580      	push	{r7, lr}
    5526:	b082      	sub	sp, #8
    5528:	af00      	add	r7, sp, #0
    552a:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    552c:	687b      	ldr	r3, [r7, #4]
    552e:	881b      	ldrh	r3, [r3, #0]
    5530:	b29b      	uxth	r3, r3
    5532:	f043 0301 	orr.w	r3, r3, #1
    5536:	b29a      	uxth	r2, r3
    5538:	687b      	ldr	r3, [r7, #4]
    553a:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    553c:	2101      	movs	r1, #1
    553e:	6878      	ldr	r0, [r7, #4]
    5540:	4b02      	ldr	r3, [pc, #8]	; (554c <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    5542:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5544:	bf00      	nop
    5546:	3708      	adds	r7, #8
    5548:	46bd      	mov	sp, r7
    554a:	bd80      	pop	{r7, pc}
    554c:	00005495 	.word	0x00005495

00005550 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    5550:	b580      	push	{r7, lr}
    5552:	b084      	sub	sp, #16
    5554:	af00      	add	r7, sp, #0
    5556:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5558:	f248 0103 	movw	r1, #32771	; 0x8003
    555c:	6878      	ldr	r0, [r7, #4]
    555e:	4b0a      	ldr	r3, [pc, #40]	; (5588 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    5560:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    5562:	687b      	ldr	r3, [r7, #4]
    5564:	881b      	ldrh	r3, [r3, #0]
    5566:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    5568:	89fb      	ldrh	r3, [r7, #14]
    556a:	085b      	lsrs	r3, r3, #1
    556c:	b29b      	uxth	r3, r3
    556e:	f003 0301 	and.w	r3, r3, #1
    5572:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    5574:	89fb      	ldrh	r3, [r7, #14]
    5576:	2b00      	cmp	r3, #0
    5578:	bf14      	ite	ne
    557a:	2301      	movne	r3, #1
    557c:	2300      	moveq	r3, #0
    557e:	b2db      	uxtb	r3, r3
}
    5580:	4618      	mov	r0, r3
    5582:	3710      	adds	r7, #16
    5584:	46bd      	mov	sp, r7
    5586:	bd80      	pop	{r7, pc}
    5588:	00005495 	.word	0x00005495

0000558c <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    558c:	b580      	push	{r7, lr}
    558e:	b082      	sub	sp, #8
    5590:	af00      	add	r7, sp, #0
    5592:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    5594:	687b      	ldr	r3, [r7, #4]
    5596:	881b      	ldrh	r3, [r3, #0]
    5598:	b29b      	uxth	r3, r3
    559a:	f023 0302 	bic.w	r3, r3, #2
    559e:	b29a      	uxth	r2, r3
    55a0:	687b      	ldr	r3, [r7, #4]
    55a2:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    55a4:	f248 0103 	movw	r1, #32771	; 0x8003
    55a8:	6878      	ldr	r0, [r7, #4]
    55aa:	4b03      	ldr	r3, [pc, #12]	; (55b8 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    55ac:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    55ae:	bf00      	nop
    55b0:	3708      	adds	r7, #8
    55b2:	46bd      	mov	sp, r7
    55b4:	bd80      	pop	{r7, pc}
    55b6:	bf00      	nop
    55b8:	00005495 	.word	0x00005495

000055bc <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    55bc:	b580      	push	{r7, lr}
    55be:	b082      	sub	sp, #8
    55c0:	af00      	add	r7, sp, #0
    55c2:	6078      	str	r0, [r7, #4]
    55c4:	460b      	mov	r3, r1
    55c6:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    55c8:	687b      	ldr	r3, [r7, #4]
    55ca:	887a      	ldrh	r2, [r7, #2]
    55cc:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    55ce:	f248 0103 	movw	r1, #32771	; 0x8003
    55d2:	6878      	ldr	r0, [r7, #4]
    55d4:	4b02      	ldr	r3, [pc, #8]	; (55e0 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    55d6:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    55d8:	bf00      	nop
    55da:	3708      	adds	r7, #8
    55dc:	46bd      	mov	sp, r7
    55de:	bd80      	pop	{r7, pc}
    55e0:	00005495 	.word	0x00005495

000055e4 <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    55e4:	b480      	push	{r7}
    55e6:	b083      	sub	sp, #12
    55e8:	af00      	add	r7, sp, #0
    55ea:	6078      	str	r0, [r7, #4]
    55ec:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    55ee:	687b      	ldr	r3, [r7, #4]
    55f0:	683a      	ldr	r2, [r7, #0]
    55f2:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    55f4:	bf00      	nop
    55f6:	370c      	adds	r7, #12
    55f8:	46bd      	mov	sp, r7
    55fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    55fe:	4770      	bx	lr

00005600 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    5600:	b580      	push	{r7, lr}
    5602:	b082      	sub	sp, #8
    5604:	af00      	add	r7, sp, #0
    5606:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    5608:	687b      	ldr	r3, [r7, #4]
    560a:	2b00      	cmp	r3, #0
    560c:	d005      	beq.n	561a <_calendar_init+0x1a>
    560e:	687b      	ldr	r3, [r7, #4]
    5610:	681b      	ldr	r3, [r3, #0]
    5612:	2b00      	cmp	r3, #0
    5614:	d001      	beq.n	561a <_calendar_init+0x1a>
    5616:	2301      	movs	r3, #1
    5618:	e000      	b.n	561c <_calendar_init+0x1c>
    561a:	2300      	movs	r3, #0
    561c:	f003 0301 	and.w	r3, r3, #1
    5620:	b2db      	uxtb	r3, r3
    5622:	222f      	movs	r2, #47	; 0x2f
    5624:	491b      	ldr	r1, [pc, #108]	; (5694 <_calendar_init+0x94>)
    5626:	4618      	mov	r0, r3
    5628:	4b1b      	ldr	r3, [pc, #108]	; (5698 <_calendar_init+0x98>)
    562a:	4798      	blx	r3

	_rtc_dev = dev;
    562c:	4a1b      	ldr	r2, [pc, #108]	; (569c <_calendar_init+0x9c>)
    562e:	687b      	ldr	r3, [r7, #4]
    5630:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    5632:	687b      	ldr	r3, [r7, #4]
    5634:	681b      	ldr	r3, [r3, #0]
    5636:	4618      	mov	r0, r3
    5638:	4b19      	ldr	r3, [pc, #100]	; (56a0 <_calendar_init+0xa0>)
    563a:	4798      	blx	r3
    563c:	4603      	mov	r3, r0
    563e:	2b00      	cmp	r3, #0
    5640:	d00a      	beq.n	5658 <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    5642:	687b      	ldr	r3, [r7, #4]
    5644:	681b      	ldr	r3, [r3, #0]
    5646:	4618      	mov	r0, r3
    5648:	4b16      	ldr	r3, [pc, #88]	; (56a4 <_calendar_init+0xa4>)
    564a:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    564c:	687b      	ldr	r3, [r7, #4]
    564e:	681b      	ldr	r3, [r3, #0]
    5650:	2102      	movs	r1, #2
    5652:	4618      	mov	r0, r3
    5654:	4b14      	ldr	r3, [pc, #80]	; (56a8 <_calendar_init+0xa8>)
    5656:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    5658:	687b      	ldr	r3, [r7, #4]
    565a:	681b      	ldr	r3, [r3, #0]
    565c:	4618      	mov	r0, r3
    565e:	4b13      	ldr	r3, [pc, #76]	; (56ac <_calendar_init+0xac>)
    5660:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    5662:	687b      	ldr	r3, [r7, #4]
    5664:	681b      	ldr	r3, [r3, #0]
    5666:	2101      	movs	r1, #1
    5668:	4618      	mov	r0, r3
    566a:	4b0f      	ldr	r3, [pc, #60]	; (56a8 <_calendar_init+0xa8>)
    566c:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    566e:	687b      	ldr	r3, [r7, #4]
    5670:	681b      	ldr	r3, [r3, #0]
    5672:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    5676:	4618      	mov	r0, r3
    5678:	4b0d      	ldr	r3, [pc, #52]	; (56b0 <_calendar_init+0xb0>)
    567a:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    567c:	687b      	ldr	r3, [r7, #4]
    567e:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    5680:	2100      	movs	r1, #0
    5682:	4618      	mov	r0, r3
    5684:	4b0b      	ldr	r3, [pc, #44]	; (56b4 <_calendar_init+0xb4>)
    5686:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    5688:	2300      	movs	r3, #0
}
    568a:	4618      	mov	r0, r3
    568c:	3708      	adds	r7, #8
    568e:	46bd      	mov	sp, r7
    5690:	bd80      	pop	{r7, pc}
    5692:	bf00      	nop
    5694:	00013390 	.word	0x00013390
    5698:	00002d4d 	.word	0x00002d4d
    569c:	20000ce8 	.word	0x20000ce8
    56a0:	00005551 	.word	0x00005551
    56a4:	0000558d 	.word	0x0000558d
    56a8:	00005495 	.word	0x00005495
    56ac:	00005525 	.word	0x00005525
    56b0:	000055bd 	.word	0x000055bd
    56b4:	000055e5 	.word	0x000055e5

000056b8 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    56b8:	b580      	push	{r7, lr}
    56ba:	b084      	sub	sp, #16
    56bc:	af00      	add	r7, sp, #0
    56be:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    56c0:	687b      	ldr	r3, [r7, #4]
    56c2:	681b      	ldr	r3, [r3, #0]
    56c4:	4618      	mov	r0, r3
    56c6:	4b19      	ldr	r3, [pc, #100]	; (572c <_rtc_interrupt_handler+0x74>)
    56c8:	4798      	blx	r3
    56ca:	4603      	mov	r3, r0
    56cc:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    56ce:	687b      	ldr	r3, [r7, #4]
    56d0:	681b      	ldr	r3, [r3, #0]
    56d2:	4618      	mov	r0, r3
    56d4:	4b16      	ldr	r3, [pc, #88]	; (5730 <_rtc_interrupt_handler+0x78>)
    56d6:	4798      	blx	r3
    56d8:	4603      	mov	r3, r0
    56da:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    56dc:	89fa      	ldrh	r2, [r7, #14]
    56de:	89bb      	ldrh	r3, [r7, #12]
    56e0:	4013      	ands	r3, r2
    56e2:	b29b      	uxth	r3, r3
    56e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
    56e8:	2b00      	cmp	r3, #0
    56ea:	d009      	beq.n	5700 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    56ec:	687b      	ldr	r3, [r7, #4]
    56ee:	685b      	ldr	r3, [r3, #4]
    56f0:	6878      	ldr	r0, [r7, #4]
    56f2:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    56f4:	687b      	ldr	r3, [r7, #4]
    56f6:	681b      	ldr	r3, [r3, #0]
    56f8:	4618      	mov	r0, r3
    56fa:	4b0e      	ldr	r3, [pc, #56]	; (5734 <_rtc_interrupt_handler+0x7c>)
    56fc:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    56fe:	e010      	b.n	5722 <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    5700:	89fa      	ldrh	r2, [r7, #14]
    5702:	89bb      	ldrh	r3, [r7, #12]
    5704:	4013      	ands	r3, r2
    5706:	b29b      	uxth	r3, r3
    5708:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    570c:	2b00      	cmp	r3, #0
    570e:	d008      	beq.n	5722 <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    5710:	687b      	ldr	r3, [r7, #4]
    5712:	689b      	ldr	r3, [r3, #8]
    5714:	6878      	ldr	r0, [r7, #4]
    5716:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    5718:	687b      	ldr	r3, [r7, #4]
    571a:	681b      	ldr	r3, [r3, #0]
    571c:	4618      	mov	r0, r3
    571e:	4b06      	ldr	r3, [pc, #24]	; (5738 <_rtc_interrupt_handler+0x80>)
    5720:	4798      	blx	r3
}
    5722:	bf00      	nop
    5724:	3710      	adds	r7, #16
    5726:	46bd      	mov	sp, r7
    5728:	bd80      	pop	{r7, pc}
    572a:	bf00      	nop
    572c:	000054f1 	.word	0x000054f1
    5730:	0000550b 	.word	0x0000550b
    5734:	000054b9 	.word	0x000054b9
    5738:	000054d5 	.word	0x000054d5

0000573c <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    573c:	b580      	push	{r7, lr}
    573e:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    5740:	4b03      	ldr	r3, [pc, #12]	; (5750 <RTC_Handler+0x14>)
    5742:	681b      	ldr	r3, [r3, #0]
    5744:	4618      	mov	r0, r3
    5746:	4b03      	ldr	r3, [pc, #12]	; (5754 <RTC_Handler+0x18>)
    5748:	4798      	blx	r3
}
    574a:	bf00      	nop
    574c:	bd80      	pop	{r7, pc}
    574e:	bf00      	nop
    5750:	20000ce8 	.word	0x20000ce8
    5754:	000056b9 	.word	0x000056b9

00005758 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    5758:	b480      	push	{r7}
    575a:	b083      	sub	sp, #12
    575c:	af00      	add	r7, sp, #0
    575e:	6078      	str	r0, [r7, #4]
    5760:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    5762:	bf00      	nop
    5764:	687b      	ldr	r3, [r7, #4]
    5766:	69da      	ldr	r2, [r3, #28]
    5768:	683b      	ldr	r3, [r7, #0]
    576a:	4013      	ands	r3, r2
    576c:	2b00      	cmp	r3, #0
    576e:	d1f9      	bne.n	5764 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    5770:	bf00      	nop
    5772:	370c      	adds	r7, #12
    5774:	46bd      	mov	sp, r7
    5776:	f85d 7b04 	ldr.w	r7, [sp], #4
    577a:	4770      	bx	lr

0000577c <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    577c:	b480      	push	{r7}
    577e:	b083      	sub	sp, #12
    5780:	af00      	add	r7, sp, #0
    5782:	6078      	str	r0, [r7, #4]
    5784:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    5786:	687b      	ldr	r3, [r7, #4]
    5788:	69da      	ldr	r2, [r3, #28]
    578a:	683b      	ldr	r3, [r7, #0]
    578c:	4013      	ands	r3, r2
    578e:	2b00      	cmp	r3, #0
    5790:	bf14      	ite	ne
    5792:	2301      	movne	r3, #1
    5794:	2300      	moveq	r3, #0
    5796:	b2db      	uxtb	r3, r3
}
    5798:	4618      	mov	r0, r3
    579a:	370c      	adds	r7, #12
    579c:	46bd      	mov	sp, r7
    579e:	f85d 7b04 	ldr.w	r7, [sp], #4
    57a2:	4770      	bx	lr

000057a4 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    57a4:	b480      	push	{r7}
    57a6:	b083      	sub	sp, #12
    57a8:	af00      	add	r7, sp, #0
    57aa:	6078      	str	r0, [r7, #4]
    57ac:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    57ae:	bf00      	nop
    57b0:	687b      	ldr	r3, [r7, #4]
    57b2:	69da      	ldr	r2, [r3, #28]
    57b4:	683b      	ldr	r3, [r7, #0]
    57b6:	4013      	ands	r3, r2
    57b8:	2b00      	cmp	r3, #0
    57ba:	d1f9      	bne.n	57b0 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    57bc:	bf00      	nop
    57be:	370c      	adds	r7, #12
    57c0:	46bd      	mov	sp, r7
    57c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    57c6:	4770      	bx	lr

000057c8 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    57c8:	b480      	push	{r7}
    57ca:	b083      	sub	sp, #12
    57cc:	af00      	add	r7, sp, #0
    57ce:	6078      	str	r0, [r7, #4]
    57d0:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    57d2:	687b      	ldr	r3, [r7, #4]
    57d4:	69da      	ldr	r2, [r3, #28]
    57d6:	683b      	ldr	r3, [r7, #0]
    57d8:	4013      	ands	r3, r2
    57da:	2b00      	cmp	r3, #0
    57dc:	bf14      	ite	ne
    57de:	2301      	movne	r3, #1
    57e0:	2300      	moveq	r3, #0
    57e2:	b2db      	uxtb	r3, r3
}
    57e4:	4618      	mov	r0, r3
    57e6:	370c      	adds	r7, #12
    57e8:	46bd      	mov	sp, r7
    57ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    57ee:	4770      	bx	lr

000057f0 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    57f0:	b480      	push	{r7}
    57f2:	b083      	sub	sp, #12
    57f4:	af00      	add	r7, sp, #0
    57f6:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    57f8:	687b      	ldr	r3, [r7, #4]
    57fa:	2201      	movs	r2, #1
    57fc:	761a      	strb	r2, [r3, #24]
}
    57fe:	bf00      	nop
    5800:	370c      	adds	r7, #12
    5802:	46bd      	mov	sp, r7
    5804:	f85d 7b04 	ldr.w	r7, [sp], #4
    5808:	4770      	bx	lr

0000580a <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    580a:	b480      	push	{r7}
    580c:	b083      	sub	sp, #12
    580e:	af00      	add	r7, sp, #0
    5810:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    5812:	687b      	ldr	r3, [r7, #4]
    5814:	2202      	movs	r2, #2
    5816:	761a      	strb	r2, [r3, #24]
}
    5818:	bf00      	nop
    581a:	370c      	adds	r7, #12
    581c:	46bd      	mov	sp, r7
    581e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5822:	4770      	bx	lr

00005824 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    5824:	b480      	push	{r7}
    5826:	b083      	sub	sp, #12
    5828:	af00      	add	r7, sp, #0
    582a:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    582c:	687b      	ldr	r3, [r7, #4]
    582e:	7e1b      	ldrb	r3, [r3, #24]
    5830:	b2db      	uxtb	r3, r3
}
    5832:	4618      	mov	r0, r3
    5834:	370c      	adds	r7, #12
    5836:	46bd      	mov	sp, r7
    5838:	f85d 7b04 	ldr.w	r7, [sp], #4
    583c:	4770      	bx	lr

0000583e <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    583e:	b480      	push	{r7}
    5840:	b085      	sub	sp, #20
    5842:	af00      	add	r7, sp, #0
    5844:	6078      	str	r0, [r7, #4]
    5846:	460b      	mov	r3, r1
    5848:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    584a:	687b      	ldr	r3, [r7, #4]
    584c:	7e1b      	ldrb	r3, [r3, #24]
    584e:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    5850:	7bfa      	ldrb	r2, [r7, #15]
    5852:	78fb      	ldrb	r3, [r7, #3]
    5854:	4013      	ands	r3, r2
    5856:	73fb      	strb	r3, [r7, #15]
	return tmp;
    5858:	7bfb      	ldrb	r3, [r7, #15]
}
    585a:	4618      	mov	r0, r3
    585c:	3714      	adds	r7, #20
    585e:	46bd      	mov	sp, r7
    5860:	f85d 7b04 	ldr.w	r7, [sp], #4
    5864:	4770      	bx	lr

00005866 <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    5866:	b480      	push	{r7}
    5868:	b083      	sub	sp, #12
    586a:	af00      	add	r7, sp, #0
    586c:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    586e:	687b      	ldr	r3, [r7, #4]
    5870:	7e1b      	ldrb	r3, [r3, #24]
    5872:	b2db      	uxtb	r3, r3
}
    5874:	4618      	mov	r0, r3
    5876:	370c      	adds	r7, #12
    5878:	46bd      	mov	sp, r7
    587a:	f85d 7b04 	ldr.w	r7, [sp], #4
    587e:	4770      	bx	lr

00005880 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    5880:	b480      	push	{r7}
    5882:	b083      	sub	sp, #12
    5884:	af00      	add	r7, sp, #0
    5886:	6078      	str	r0, [r7, #4]
    5888:	460b      	mov	r3, r1
    588a:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    588c:	687b      	ldr	r3, [r7, #4]
    588e:	78fa      	ldrb	r2, [r7, #3]
    5890:	761a      	strb	r2, [r3, #24]
}
    5892:	bf00      	nop
    5894:	370c      	adds	r7, #12
    5896:	46bd      	mov	sp, r7
    5898:	f85d 7b04 	ldr.w	r7, [sp], #4
    589c:	4770      	bx	lr
	...

000058a0 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    58a0:	b580      	push	{r7, lr}
    58a2:	b082      	sub	sp, #8
    58a4:	af00      	add	r7, sp, #0
    58a6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    58a8:	687b      	ldr	r3, [r7, #4]
    58aa:	681b      	ldr	r3, [r3, #0]
    58ac:	f023 0202 	bic.w	r2, r3, #2
    58b0:	687b      	ldr	r3, [r7, #4]
    58b2:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    58b4:	2103      	movs	r1, #3
    58b6:	6878      	ldr	r0, [r7, #4]
    58b8:	4b02      	ldr	r3, [pc, #8]	; (58c4 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    58ba:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    58bc:	bf00      	nop
    58be:	3708      	adds	r7, #8
    58c0:	46bd      	mov	sp, r7
    58c2:	bd80      	pop	{r7, pc}
    58c4:	00005759 	.word	0x00005759

000058c8 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    58c8:	b480      	push	{r7}
    58ca:	b085      	sub	sp, #20
    58cc:	af00      	add	r7, sp, #0
    58ce:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    58d0:	687b      	ldr	r3, [r7, #4]
    58d2:	681b      	ldr	r3, [r3, #0]
    58d4:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    58d6:	68fb      	ldr	r3, [r7, #12]
    58d8:	0edb      	lsrs	r3, r3, #27
    58da:	f003 0301 	and.w	r3, r3, #1
    58de:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    58e0:	68fb      	ldr	r3, [r7, #12]
    58e2:	2b00      	cmp	r3, #0
    58e4:	bf14      	ite	ne
    58e6:	2301      	movne	r3, #1
    58e8:	2300      	moveq	r3, #0
    58ea:	b2db      	uxtb	r3, r3
}
    58ec:	4618      	mov	r0, r3
    58ee:	3714      	adds	r7, #20
    58f0:	46bd      	mov	sp, r7
    58f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    58f6:	4770      	bx	lr

000058f8 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    58f8:	b580      	push	{r7, lr}
    58fa:	b084      	sub	sp, #16
    58fc:	af00      	add	r7, sp, #0
    58fe:	6078      	str	r0, [r7, #4]
    5900:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5902:	2103      	movs	r1, #3
    5904:	6878      	ldr	r0, [r7, #4]
    5906:	4b07      	ldr	r3, [pc, #28]	; (5924 <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    5908:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    590a:	687b      	ldr	r3, [r7, #4]
    590c:	681b      	ldr	r3, [r3, #0]
    590e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    5910:	68fa      	ldr	r2, [r7, #12]
    5912:	683b      	ldr	r3, [r7, #0]
    5914:	4013      	ands	r3, r2
    5916:	60fb      	str	r3, [r7, #12]
	return tmp;
    5918:	68fb      	ldr	r3, [r7, #12]
}
    591a:	4618      	mov	r0, r3
    591c:	3710      	adds	r7, #16
    591e:	46bd      	mov	sp, r7
    5920:	bd80      	pop	{r7, pc}
    5922:	bf00      	nop
    5924:	00005759 	.word	0x00005759

00005928 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    5928:	b580      	push	{r7, lr}
    592a:	b082      	sub	sp, #8
    592c:	af00      	add	r7, sp, #0
    592e:	6078      	str	r0, [r7, #4]
    5930:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    5932:	687b      	ldr	r3, [r7, #4]
    5934:	683a      	ldr	r2, [r7, #0]
    5936:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5938:	2103      	movs	r1, #3
    593a:	6878      	ldr	r0, [r7, #4]
    593c:	4b02      	ldr	r3, [pc, #8]	; (5948 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    593e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5940:	bf00      	nop
    5942:	3708      	adds	r7, #8
    5944:	46bd      	mov	sp, r7
    5946:	bd80      	pop	{r7, pc}
    5948:	00005759 	.word	0x00005759

0000594c <hri_sercomspi_get_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    594c:	b580      	push	{r7, lr}
    594e:	b084      	sub	sp, #16
    5950:	af00      	add	r7, sp, #0
    5952:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5954:	2103      	movs	r1, #3
    5956:	6878      	ldr	r0, [r7, #4]
    5958:	4b09      	ldr	r3, [pc, #36]	; (5980 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    595a:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    595c:	687b      	ldr	r3, [r7, #4]
    595e:	681b      	ldr	r3, [r3, #0]
    5960:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    5962:	68fb      	ldr	r3, [r7, #12]
    5964:	085b      	lsrs	r3, r3, #1
    5966:	f003 0301 	and.w	r3, r3, #1
    596a:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    596c:	68fb      	ldr	r3, [r7, #12]
    596e:	2b00      	cmp	r3, #0
    5970:	bf14      	ite	ne
    5972:	2301      	movne	r3, #1
    5974:	2300      	moveq	r3, #0
    5976:	b2db      	uxtb	r3, r3
}
    5978:	4618      	mov	r0, r3
    597a:	3710      	adds	r7, #16
    597c:	46bd      	mov	sp, r7
    597e:	bd80      	pop	{r7, pc}
    5980:	000057a5 	.word	0x000057a5

00005984 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5984:	b580      	push	{r7, lr}
    5986:	b082      	sub	sp, #8
    5988:	af00      	add	r7, sp, #0
    598a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    598c:	687b      	ldr	r3, [r7, #4]
    598e:	681b      	ldr	r3, [r3, #0]
    5990:	f023 0202 	bic.w	r2, r3, #2
    5994:	687b      	ldr	r3, [r7, #4]
    5996:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5998:	2103      	movs	r1, #3
    599a:	6878      	ldr	r0, [r7, #4]
    599c:	4b02      	ldr	r3, [pc, #8]	; (59a8 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    599e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    59a0:	bf00      	nop
    59a2:	3708      	adds	r7, #8
    59a4:	46bd      	mov	sp, r7
    59a6:	bd80      	pop	{r7, pc}
    59a8:	000057a5 	.word	0x000057a5

000059ac <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    59ac:	b580      	push	{r7, lr}
    59ae:	b084      	sub	sp, #16
    59b0:	af00      	add	r7, sp, #0
    59b2:	6078      	str	r0, [r7, #4]
    59b4:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    59b6:	2103      	movs	r1, #3
    59b8:	6878      	ldr	r0, [r7, #4]
    59ba:	4b07      	ldr	r3, [pc, #28]	; (59d8 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    59bc:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    59be:	687b      	ldr	r3, [r7, #4]
    59c0:	681b      	ldr	r3, [r3, #0]
    59c2:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    59c4:	68fa      	ldr	r2, [r7, #12]
    59c6:	683b      	ldr	r3, [r7, #0]
    59c8:	4013      	ands	r3, r2
    59ca:	60fb      	str	r3, [r7, #12]
	return tmp;
    59cc:	68fb      	ldr	r3, [r7, #12]
}
    59ce:	4618      	mov	r0, r3
    59d0:	3710      	adds	r7, #16
    59d2:	46bd      	mov	sp, r7
    59d4:	bd80      	pop	{r7, pc}
    59d6:	bf00      	nop
    59d8:	000057a5 	.word	0x000057a5

000059dc <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    59dc:	b580      	push	{r7, lr}
    59de:	b082      	sub	sp, #8
    59e0:	af00      	add	r7, sp, #0
    59e2:	6078      	str	r0, [r7, #4]
    59e4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    59e6:	687b      	ldr	r3, [r7, #4]
    59e8:	683a      	ldr	r2, [r7, #0]
    59ea:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    59ec:	2103      	movs	r1, #3
    59ee:	6878      	ldr	r0, [r7, #4]
    59f0:	4b02      	ldr	r3, [pc, #8]	; (59fc <hri_sercomspi_write_CTRLA_reg+0x20>)
    59f2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    59f4:	bf00      	nop
    59f6:	3708      	adds	r7, #8
    59f8:	46bd      	mov	sp, r7
    59fa:	bd80      	pop	{r7, pc}
    59fc:	000057a5 	.word	0x000057a5

00005a00 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    5a00:	b580      	push	{r7, lr}
    5a02:	b082      	sub	sp, #8
    5a04:	af00      	add	r7, sp, #0
    5a06:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    5a08:	687b      	ldr	r3, [r7, #4]
    5a0a:	685b      	ldr	r3, [r3, #4]
    5a0c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    5a10:	687b      	ldr	r3, [r7, #4]
    5a12:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5a14:	2104      	movs	r1, #4
    5a16:	6878      	ldr	r0, [r7, #4]
    5a18:	4b02      	ldr	r3, [pc, #8]	; (5a24 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    5a1a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5a1c:	bf00      	nop
    5a1e:	3708      	adds	r7, #8
    5a20:	46bd      	mov	sp, r7
    5a22:	bd80      	pop	{r7, pc}
    5a24:	00005759 	.word	0x00005759

00005a28 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    5a28:	b580      	push	{r7, lr}
    5a2a:	b082      	sub	sp, #8
    5a2c:	af00      	add	r7, sp, #0
    5a2e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    5a30:	687b      	ldr	r3, [r7, #4]
    5a32:	685b      	ldr	r3, [r3, #4]
    5a34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    5a38:	687b      	ldr	r3, [r7, #4]
    5a3a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5a3c:	2104      	movs	r1, #4
    5a3e:	6878      	ldr	r0, [r7, #4]
    5a40:	4b02      	ldr	r3, [pc, #8]	; (5a4c <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    5a42:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5a44:	bf00      	nop
    5a46:	3708      	adds	r7, #8
    5a48:	46bd      	mov	sp, r7
    5a4a:	bd80      	pop	{r7, pc}
    5a4c:	00005759 	.word	0x00005759

00005a50 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    5a50:	b580      	push	{r7, lr}
    5a52:	b082      	sub	sp, #8
    5a54:	af00      	add	r7, sp, #0
    5a56:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    5a58:	687b      	ldr	r3, [r7, #4]
    5a5a:	685b      	ldr	r3, [r3, #4]
    5a5c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    5a60:	687b      	ldr	r3, [r7, #4]
    5a62:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5a64:	2104      	movs	r1, #4
    5a66:	6878      	ldr	r0, [r7, #4]
    5a68:	4b02      	ldr	r3, [pc, #8]	; (5a74 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    5a6a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5a6c:	bf00      	nop
    5a6e:	3708      	adds	r7, #8
    5a70:	46bd      	mov	sp, r7
    5a72:	bd80      	pop	{r7, pc}
    5a74:	00005759 	.word	0x00005759

00005a78 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    5a78:	b580      	push	{r7, lr}
    5a7a:	b082      	sub	sp, #8
    5a7c:	af00      	add	r7, sp, #0
    5a7e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    5a80:	687b      	ldr	r3, [r7, #4]
    5a82:	685b      	ldr	r3, [r3, #4]
    5a84:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    5a88:	687b      	ldr	r3, [r7, #4]
    5a8a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5a8c:	2104      	movs	r1, #4
    5a8e:	6878      	ldr	r0, [r7, #4]
    5a90:	4b02      	ldr	r3, [pc, #8]	; (5a9c <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    5a92:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5a94:	bf00      	nop
    5a96:	3708      	adds	r7, #8
    5a98:	46bd      	mov	sp, r7
    5a9a:	bd80      	pop	{r7, pc}
    5a9c:	00005759 	.word	0x00005759

00005aa0 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    5aa0:	b580      	push	{r7, lr}
    5aa2:	b082      	sub	sp, #8
    5aa4:	af00      	add	r7, sp, #0
    5aa6:	6078      	str	r0, [r7, #4]
    5aa8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    5aaa:	687b      	ldr	r3, [r7, #4]
    5aac:	685a      	ldr	r2, [r3, #4]
    5aae:	683b      	ldr	r3, [r7, #0]
    5ab0:	041b      	lsls	r3, r3, #16
    5ab2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    5ab6:	431a      	orrs	r2, r3
    5ab8:	687b      	ldr	r3, [r7, #4]
    5aba:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5abc:	2104      	movs	r1, #4
    5abe:	6878      	ldr	r0, [r7, #4]
    5ac0:	4b02      	ldr	r3, [pc, #8]	; (5acc <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    5ac2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5ac4:	bf00      	nop
    5ac6:	3708      	adds	r7, #8
    5ac8:	46bd      	mov	sp, r7
    5aca:	bd80      	pop	{r7, pc}
    5acc:	00005759 	.word	0x00005759

00005ad0 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    5ad0:	b580      	push	{r7, lr}
    5ad2:	b082      	sub	sp, #8
    5ad4:	af00      	add	r7, sp, #0
    5ad6:	6078      	str	r0, [r7, #4]
    5ad8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    5ada:	687b      	ldr	r3, [r7, #4]
    5adc:	683a      	ldr	r2, [r7, #0]
    5ade:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5ae0:	2104      	movs	r1, #4
    5ae2:	6878      	ldr	r0, [r7, #4]
    5ae4:	4b02      	ldr	r3, [pc, #8]	; (5af0 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    5ae6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5ae8:	bf00      	nop
    5aea:	3708      	adds	r7, #8
    5aec:	46bd      	mov	sp, r7
    5aee:	bd80      	pop	{r7, pc}
    5af0:	00005759 	.word	0x00005759

00005af4 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    5af4:	b580      	push	{r7, lr}
    5af6:	b082      	sub	sp, #8
    5af8:	af00      	add	r7, sp, #0
    5afa:	6078      	str	r0, [r7, #4]
    5afc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    5afe:	687b      	ldr	r3, [r7, #4]
    5b00:	683a      	ldr	r2, [r7, #0]
    5b02:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    5b04:	2117      	movs	r1, #23
    5b06:	6878      	ldr	r0, [r7, #4]
    5b08:	4b02      	ldr	r3, [pc, #8]	; (5b14 <hri_sercomspi_write_CTRLB_reg+0x20>)
    5b0a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5b0c:	bf00      	nop
    5b0e:	3708      	adds	r7, #8
    5b10:	46bd      	mov	sp, r7
    5b12:	bd80      	pop	{r7, pc}
    5b14:	000057a5 	.word	0x000057a5

00005b18 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    5b18:	b480      	push	{r7}
    5b1a:	b083      	sub	sp, #12
    5b1c:	af00      	add	r7, sp, #0
    5b1e:	6078      	str	r0, [r7, #4]
    5b20:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    5b22:	687b      	ldr	r3, [r7, #4]
    5b24:	683a      	ldr	r2, [r7, #0]
    5b26:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5b28:	bf00      	nop
    5b2a:	370c      	adds	r7, #12
    5b2c:	46bd      	mov	sp, r7
    5b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b32:	4770      	bx	lr

00005b34 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    5b34:	b480      	push	{r7}
    5b36:	b083      	sub	sp, #12
    5b38:	af00      	add	r7, sp, #0
    5b3a:	6078      	str	r0, [r7, #4]
    5b3c:	460b      	mov	r3, r1
    5b3e:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    5b40:	687b      	ldr	r3, [r7, #4]
    5b42:	78fa      	ldrb	r2, [r7, #3]
    5b44:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5b46:	bf00      	nop
    5b48:	370c      	adds	r7, #12
    5b4a:	46bd      	mov	sp, r7
    5b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b50:	4770      	bx	lr
	...

00005b54 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    5b54:	b580      	push	{r7, lr}
    5b56:	b084      	sub	sp, #16
    5b58:	af00      	add	r7, sp, #0
    5b5a:	6078      	str	r0, [r7, #4]
    5b5c:	460b      	mov	r3, r1
    5b5e:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    5b60:	687b      	ldr	r3, [r7, #4]
    5b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5b64:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    5b66:	68fb      	ldr	r3, [r7, #12]
    5b68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    5b6c:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    5b6e:	78fb      	ldrb	r3, [r7, #3]
    5b70:	039b      	lsls	r3, r3, #14
    5b72:	461a      	mov	r2, r3
    5b74:	68fb      	ldr	r3, [r7, #12]
    5b76:	4313      	orrs	r3, r2
    5b78:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    5b7a:	687b      	ldr	r3, [r7, #4]
    5b7c:	68fa      	ldr	r2, [r7, #12]
    5b7e:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5b80:	2104      	movs	r1, #4
    5b82:	6878      	ldr	r0, [r7, #4]
    5b84:	4b02      	ldr	r3, [pc, #8]	; (5b90 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    5b86:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5b88:	bf00      	nop
    5b8a:	3710      	adds	r7, #16
    5b8c:	46bd      	mov	sp, r7
    5b8e:	bd80      	pop	{r7, pc}
    5b90:	00005759 	.word	0x00005759

00005b94 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    5b94:	b580      	push	{r7, lr}
    5b96:	b082      	sub	sp, #8
    5b98:	af00      	add	r7, sp, #0
    5b9a:	6078      	str	r0, [r7, #4]
    5b9c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    5b9e:	687b      	ldr	r3, [r7, #4]
    5ba0:	683a      	ldr	r2, [r7, #0]
    5ba2:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5ba4:	2104      	movs	r1, #4
    5ba6:	6878      	ldr	r0, [r7, #4]
    5ba8:	4b02      	ldr	r3, [pc, #8]	; (5bb4 <hri_sercomi2cm_write_ADDR_reg+0x20>)
    5baa:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5bac:	bf00      	nop
    5bae:	3708      	adds	r7, #8
    5bb0:	46bd      	mov	sp, r7
    5bb2:	bd80      	pop	{r7, pc}
    5bb4:	00005759 	.word	0x00005759

00005bb8 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    5bb8:	b580      	push	{r7, lr}
    5bba:	b082      	sub	sp, #8
    5bbc:	af00      	add	r7, sp, #0
    5bbe:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5bc0:	2104      	movs	r1, #4
    5bc2:	6878      	ldr	r0, [r7, #4]
    5bc4:	4b03      	ldr	r3, [pc, #12]	; (5bd4 <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    5bc6:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    5bc8:	687b      	ldr	r3, [r7, #4]
    5bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    5bcc:	4618      	mov	r0, r3
    5bce:	3708      	adds	r7, #8
    5bd0:	46bd      	mov	sp, r7
    5bd2:	bd80      	pop	{r7, pc}
    5bd4:	00005759 	.word	0x00005759

00005bd8 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    5bd8:	b480      	push	{r7}
    5bda:	b083      	sub	sp, #12
    5bdc:	af00      	add	r7, sp, #0
    5bde:	6078      	str	r0, [r7, #4]
    5be0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    5be2:	687b      	ldr	r3, [r7, #4]
    5be4:	683a      	ldr	r2, [r7, #0]
    5be6:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5be8:	bf00      	nop
    5bea:	370c      	adds	r7, #12
    5bec:	46bd      	mov	sp, r7
    5bee:	f85d 7b04 	ldr.w	r7, [sp], #4
    5bf2:	4770      	bx	lr

00005bf4 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    5bf4:	b580      	push	{r7, lr}
    5bf6:	b082      	sub	sp, #8
    5bf8:	af00      	add	r7, sp, #0
    5bfa:	6078      	str	r0, [r7, #4]
    5bfc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    5bfe:	687b      	ldr	r3, [r7, #4]
    5c00:	683a      	ldr	r2, [r7, #0]
    5c02:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5c04:	2104      	movs	r1, #4
    5c06:	6878      	ldr	r0, [r7, #4]
    5c08:	4b02      	ldr	r3, [pc, #8]	; (5c14 <hri_sercomi2cm_write_DATA_reg+0x20>)
    5c0a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5c0c:	bf00      	nop
    5c0e:	3708      	adds	r7, #8
    5c10:	46bd      	mov	sp, r7
    5c12:	bd80      	pop	{r7, pc}
    5c14:	00005759 	.word	0x00005759

00005c18 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    5c18:	b580      	push	{r7, lr}
    5c1a:	b082      	sub	sp, #8
    5c1c:	af00      	add	r7, sp, #0
    5c1e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5c20:	2104      	movs	r1, #4
    5c22:	6878      	ldr	r0, [r7, #4]
    5c24:	4b03      	ldr	r3, [pc, #12]	; (5c34 <hri_sercomi2cm_read_DATA_reg+0x1c>)
    5c26:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    5c28:	687b      	ldr	r3, [r7, #4]
    5c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    5c2c:	4618      	mov	r0, r3
    5c2e:	3708      	adds	r7, #8
    5c30:	46bd      	mov	sp, r7
    5c32:	bd80      	pop	{r7, pc}
    5c34:	00005759 	.word	0x00005759

00005c38 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    5c38:	b480      	push	{r7}
    5c3a:	b083      	sub	sp, #12
    5c3c:	af00      	add	r7, sp, #0
    5c3e:	6078      	str	r0, [r7, #4]
    5c40:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    5c42:	687b      	ldr	r3, [r7, #4]
    5c44:	683a      	ldr	r2, [r7, #0]
    5c46:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5c48:	bf00      	nop
    5c4a:	370c      	adds	r7, #12
    5c4c:	46bd      	mov	sp, r7
    5c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c52:	4770      	bx	lr

00005c54 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    5c54:	b480      	push	{r7}
    5c56:	b083      	sub	sp, #12
    5c58:	af00      	add	r7, sp, #0
    5c5a:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    5c5c:	687b      	ldr	r3, [r7, #4]
    5c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    5c60:	4618      	mov	r0, r3
    5c62:	370c      	adds	r7, #12
    5c64:	46bd      	mov	sp, r7
    5c66:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c6a:	4770      	bx	lr

00005c6c <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    5c6c:	b480      	push	{r7}
    5c6e:	b083      	sub	sp, #12
    5c70:	af00      	add	r7, sp, #0
    5c72:	6078      	str	r0, [r7, #4]
    5c74:	460b      	mov	r3, r1
    5c76:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    5c78:	687b      	ldr	r3, [r7, #4]
    5c7a:	78fa      	ldrb	r2, [r7, #3]
    5c7c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5c80:	bf00      	nop
    5c82:	370c      	adds	r7, #12
    5c84:	46bd      	mov	sp, r7
    5c86:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c8a:	4770      	bx	lr

00005c8c <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    5c8c:	b480      	push	{r7}
    5c8e:	b083      	sub	sp, #12
    5c90:	af00      	add	r7, sp, #0
    5c92:	6078      	str	r0, [r7, #4]
    5c94:	460b      	mov	r3, r1
    5c96:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    5c98:	687b      	ldr	r3, [r7, #4]
    5c9a:	887a      	ldrh	r2, [r7, #2]
    5c9c:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5c9e:	bf00      	nop
    5ca0:	370c      	adds	r7, #12
    5ca2:	46bd      	mov	sp, r7
    5ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ca8:	4770      	bx	lr
	...

00005cac <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    5cac:	b580      	push	{r7, lr}
    5cae:	b082      	sub	sp, #8
    5cb0:	af00      	add	r7, sp, #0
    5cb2:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5cb4:	2104      	movs	r1, #4
    5cb6:	6878      	ldr	r0, [r7, #4]
    5cb8:	4b04      	ldr	r3, [pc, #16]	; (5ccc <hri_sercomi2cm_read_STATUS_reg+0x20>)
    5cba:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    5cbc:	687b      	ldr	r3, [r7, #4]
    5cbe:	8b5b      	ldrh	r3, [r3, #26]
    5cc0:	b29b      	uxth	r3, r3
}
    5cc2:	4618      	mov	r0, r3
    5cc4:	3708      	adds	r7, #8
    5cc6:	46bd      	mov	sp, r7
    5cc8:	bd80      	pop	{r7, pc}
    5cca:	bf00      	nop
    5ccc:	00005759 	.word	0x00005759

00005cd0 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    5cd0:	b4b0      	push	{r4, r5, r7}
    5cd2:	b08d      	sub	sp, #52	; 0x34
    5cd4:	af00      	add	r7, sp, #0
    5cd6:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    5cd8:	4b13      	ldr	r3, [pc, #76]	; (5d28 <_sercom_get_hardware_index+0x58>)
    5cda:	f107 040c 	add.w	r4, r7, #12
    5cde:	461d      	mov	r5, r3
    5ce0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    5ce2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    5ce4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    5ce8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5cec:	2300      	movs	r3, #0
    5cee:	62fb      	str	r3, [r7, #44]	; 0x2c
    5cf0:	e010      	b.n	5d14 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    5cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5cf4:	009b      	lsls	r3, r3, #2
    5cf6:	f107 0230 	add.w	r2, r7, #48	; 0x30
    5cfa:	4413      	add	r3, r2
    5cfc:	f853 3c24 	ldr.w	r3, [r3, #-36]
    5d00:	461a      	mov	r2, r3
    5d02:	687b      	ldr	r3, [r7, #4]
    5d04:	429a      	cmp	r2, r3
    5d06:	d102      	bne.n	5d0e <_sercom_get_hardware_index+0x3e>
			return i;
    5d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5d0a:	b2db      	uxtb	r3, r3
    5d0c:	e006      	b.n	5d1c <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5d10:	3301      	adds	r3, #1
    5d12:	62fb      	str	r3, [r7, #44]	; 0x2c
    5d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5d16:	2b07      	cmp	r3, #7
    5d18:	d9eb      	bls.n	5cf2 <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    5d1a:	2300      	movs	r3, #0
}
    5d1c:	4618      	mov	r0, r3
    5d1e:	3734      	adds	r7, #52	; 0x34
    5d20:	46bd      	mov	sp, r7
    5d22:	bcb0      	pop	{r4, r5, r7}
    5d24:	4770      	bx	lr
    5d26:	bf00      	nop
    5d28:	000133c4 	.word	0x000133c4

00005d2c <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    5d2c:	b580      	push	{r7, lr}
    5d2e:	b084      	sub	sp, #16
    5d30:	af00      	add	r7, sp, #0
    5d32:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    5d34:	6878      	ldr	r0, [r7, #4]
    5d36:	4b13      	ldr	r3, [pc, #76]	; (5d84 <_get_i2cm_index+0x58>)
    5d38:	4798      	blx	r3
    5d3a:	4603      	mov	r3, r0
    5d3c:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    5d3e:	2300      	movs	r3, #0
    5d40:	73fb      	strb	r3, [r7, #15]
    5d42:	e010      	b.n	5d66 <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    5d44:	7bfa      	ldrb	r2, [r7, #15]
    5d46:	4910      	ldr	r1, [pc, #64]	; (5d88 <_get_i2cm_index+0x5c>)
    5d48:	4613      	mov	r3, r2
    5d4a:	005b      	lsls	r3, r3, #1
    5d4c:	4413      	add	r3, r2
    5d4e:	00db      	lsls	r3, r3, #3
    5d50:	440b      	add	r3, r1
    5d52:	781b      	ldrb	r3, [r3, #0]
    5d54:	7bba      	ldrb	r2, [r7, #14]
    5d56:	429a      	cmp	r2, r3
    5d58:	d102      	bne.n	5d60 <_get_i2cm_index+0x34>
			return i;
    5d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5d5e:	e00d      	b.n	5d7c <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    5d60:	7bfb      	ldrb	r3, [r7, #15]
    5d62:	3301      	adds	r3, #1
    5d64:	73fb      	strb	r3, [r7, #15]
    5d66:	7bfb      	ldrb	r3, [r7, #15]
    5d68:	2b02      	cmp	r3, #2
    5d6a:	d9eb      	bls.n	5d44 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    5d6c:	f240 32a6 	movw	r2, #934	; 0x3a6
    5d70:	4906      	ldr	r1, [pc, #24]	; (5d8c <_get_i2cm_index+0x60>)
    5d72:	2000      	movs	r0, #0
    5d74:	4b06      	ldr	r3, [pc, #24]	; (5d90 <_get_i2cm_index+0x64>)
    5d76:	4798      	blx	r3
	return -1;
    5d78:	f04f 33ff 	mov.w	r3, #4294967295
}
    5d7c:	4618      	mov	r0, r3
    5d7e:	3710      	adds	r7, #16
    5d80:	46bd      	mov	sp, r7
    5d82:	bd80      	pop	{r7, pc}
    5d84:	00005cd1 	.word	0x00005cd1
    5d88:	20000018 	.word	0x20000018
    5d8c:	000133a8 	.word	0x000133a8
    5d90:	00002d4d 	.word	0x00002d4d

00005d94 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    5d94:	b580      	push	{r7, lr}
    5d96:	b082      	sub	sp, #8
    5d98:	af00      	add	r7, sp, #0
    5d9a:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    5d9c:	2103      	movs	r1, #3
    5d9e:	6878      	ldr	r0, [r7, #4]
    5da0:	4b02      	ldr	r3, [pc, #8]	; (5dac <_sercom_i2c_send_stop+0x18>)
    5da2:	4798      	blx	r3
}
    5da4:	bf00      	nop
    5da6:	3708      	adds	r7, #8
    5da8:	46bd      	mov	sp, r7
    5daa:	bd80      	pop	{r7, pc}
    5dac:	00005aa1 	.word	0x00005aa1

00005db0 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    5db0:	b590      	push	{r4, r7, lr}
    5db2:	b087      	sub	sp, #28
    5db4:	af00      	add	r7, sp, #0
    5db6:	60f8      	str	r0, [r7, #12]
    5db8:	60b9      	str	r1, [r7, #8]
    5dba:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    5dbc:	68f8      	ldr	r0, [r7, #12]
    5dbe:	4b7d      	ldr	r3, [pc, #500]	; (5fb4 <_sercom_i2c_sync_analyse_flags+0x204>)
    5dc0:	4798      	blx	r3
    5dc2:	4603      	mov	r3, r0
    5dc4:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    5dc6:	68f8      	ldr	r0, [r7, #12]
    5dc8:	4b7b      	ldr	r3, [pc, #492]	; (5fb8 <_sercom_i2c_sync_analyse_flags+0x208>)
    5dca:	4798      	blx	r3
    5dcc:	4603      	mov	r3, r0
    5dce:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    5dd0:	68bb      	ldr	r3, [r7, #8]
    5dd2:	f003 0301 	and.w	r3, r3, #1
    5dd6:	2b00      	cmp	r3, #0
    5dd8:	f000 8095 	beq.w	5f06 <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    5ddc:	8a7b      	ldrh	r3, [r7, #18]
    5dde:	f003 0302 	and.w	r3, r3, #2
    5de2:	2b00      	cmp	r3, #0
    5de4:	d01d      	beq.n	5e22 <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    5de6:	68f8      	ldr	r0, [r7, #12]
    5de8:	4b74      	ldr	r3, [pc, #464]	; (5fbc <_sercom_i2c_sync_analyse_flags+0x20c>)
    5dea:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    5dec:	687b      	ldr	r3, [r7, #4]
    5dee:	885b      	ldrh	r3, [r3, #2]
    5df0:	b29b      	uxth	r3, r3
    5df2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    5df6:	b29a      	uxth	r2, r3
    5df8:	687b      	ldr	r3, [r7, #4]
    5dfa:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    5dfc:	687b      	ldr	r3, [r7, #4]
    5dfe:	885b      	ldrh	r3, [r3, #2]
    5e00:	b29b      	uxth	r3, r3
    5e02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    5e06:	b29a      	uxth	r2, r3
    5e08:	687b      	ldr	r3, [r7, #4]
    5e0a:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    5e0c:	8a7b      	ldrh	r3, [r7, #18]
    5e0e:	f003 0301 	and.w	r3, r3, #1
    5e12:	2b00      	cmp	r3, #0
    5e14:	d002      	beq.n	5e1c <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    5e16:	f06f 0304 	mvn.w	r3, #4
    5e1a:	e0c6      	b.n	5faa <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    5e1c:	f06f 0303 	mvn.w	r3, #3
    5e20:	e0c3      	b.n	5faa <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    5e22:	8a7b      	ldrh	r3, [r7, #18]
    5e24:	f003 0304 	and.w	r3, r3, #4
    5e28:	2b00      	cmp	r3, #0
    5e2a:	d01f      	beq.n	5e6c <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    5e2c:	687b      	ldr	r3, [r7, #4]
    5e2e:	685b      	ldr	r3, [r3, #4]
    5e30:	2b00      	cmp	r3, #0
    5e32:	dd07      	ble.n	5e44 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    5e34:	687b      	ldr	r3, [r7, #4]
    5e36:	885b      	ldrh	r3, [r3, #2]
    5e38:	b29b      	uxth	r3, r3
    5e3a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    5e3e:	b29a      	uxth	r2, r3
    5e40:	687b      	ldr	r3, [r7, #4]
    5e42:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    5e44:	687b      	ldr	r3, [r7, #4]
    5e46:	885b      	ldrh	r3, [r3, #2]
    5e48:	b29b      	uxth	r3, r3
    5e4a:	b21b      	sxth	r3, r3
    5e4c:	2b00      	cmp	r3, #0
    5e4e:	da02      	bge.n	5e56 <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    5e50:	68f8      	ldr	r0, [r7, #12]
    5e52:	4b5b      	ldr	r3, [pc, #364]	; (5fc0 <_sercom_i2c_sync_analyse_flags+0x210>)
    5e54:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    5e56:	687b      	ldr	r3, [r7, #4]
    5e58:	885b      	ldrh	r3, [r3, #2]
    5e5a:	b29b      	uxth	r3, r3
    5e5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    5e60:	b29a      	uxth	r2, r3
    5e62:	687b      	ldr	r3, [r7, #4]
    5e64:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    5e66:	f06f 0301 	mvn.w	r3, #1
    5e6a:	e09e      	b.n	5faa <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    5e6c:	687b      	ldr	r3, [r7, #4]
    5e6e:	885b      	ldrh	r3, [r3, #2]
    5e70:	b29b      	uxth	r3, r3
    5e72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    5e76:	2b00      	cmp	r3, #0
    5e78:	d01c      	beq.n	5eb4 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    5e7a:	687b      	ldr	r3, [r7, #4]
    5e7c:	881b      	ldrh	r3, [r3, #0]
    5e7e:	121b      	asrs	r3, r3, #8
    5e80:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    5e82:	f003 0406 	and.w	r4, r3, #6
    5e86:	68f8      	ldr	r0, [r7, #12]
    5e88:	4b4e      	ldr	r3, [pc, #312]	; (5fc4 <_sercom_i2c_sync_analyse_flags+0x214>)
    5e8a:	4798      	blx	r3
    5e8c:	4603      	mov	r3, r0
    5e8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    5e92:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    5e94:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    5e98:	4619      	mov	r1, r3
    5e9a:	68f8      	ldr	r0, [r7, #12]
    5e9c:	4b4a      	ldr	r3, [pc, #296]	; (5fc8 <_sercom_i2c_sync_analyse_flags+0x218>)
    5e9e:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    5ea0:	687b      	ldr	r3, [r7, #4]
    5ea2:	885b      	ldrh	r3, [r3, #2]
    5ea4:	b29b      	uxth	r3, r3
    5ea6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    5eaa:	b29a      	uxth	r2, r3
    5eac:	687b      	ldr	r3, [r7, #4]
    5eae:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    5eb0:	2300      	movs	r3, #0
    5eb2:	e07a      	b.n	5faa <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    5eb4:	687b      	ldr	r3, [r7, #4]
    5eb6:	685b      	ldr	r3, [r3, #4]
    5eb8:	2b00      	cmp	r3, #0
    5eba:	d111      	bne.n	5ee0 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    5ebc:	687b      	ldr	r3, [r7, #4]
    5ebe:	885b      	ldrh	r3, [r3, #2]
    5ec0:	b29b      	uxth	r3, r3
    5ec2:	b21b      	sxth	r3, r3
    5ec4:	2b00      	cmp	r3, #0
    5ec6:	da02      	bge.n	5ece <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    5ec8:	68f8      	ldr	r0, [r7, #12]
    5eca:	4b3d      	ldr	r3, [pc, #244]	; (5fc0 <_sercom_i2c_sync_analyse_flags+0x210>)
    5ecc:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    5ece:	687b      	ldr	r3, [r7, #4]
    5ed0:	885b      	ldrh	r3, [r3, #2]
    5ed2:	b29b      	uxth	r3, r3
    5ed4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    5ed8:	b29a      	uxth	r2, r3
    5eda:	687b      	ldr	r3, [r7, #4]
    5edc:	805a      	strh	r2, [r3, #2]
    5ede:	e010      	b.n	5f02 <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    5ee0:	687b      	ldr	r3, [r7, #4]
    5ee2:	689b      	ldr	r3, [r3, #8]
    5ee4:	781b      	ldrb	r3, [r3, #0]
    5ee6:	4619      	mov	r1, r3
    5ee8:	68f8      	ldr	r0, [r7, #12]
    5eea:	4b38      	ldr	r3, [pc, #224]	; (5fcc <_sercom_i2c_sync_analyse_flags+0x21c>)
    5eec:	4798      	blx	r3
				msg->buffer++;
    5eee:	687b      	ldr	r3, [r7, #4]
    5ef0:	689b      	ldr	r3, [r3, #8]
    5ef2:	1c5a      	adds	r2, r3, #1
    5ef4:	687b      	ldr	r3, [r7, #4]
    5ef6:	609a      	str	r2, [r3, #8]
				msg->len--;
    5ef8:	687b      	ldr	r3, [r7, #4]
    5efa:	685b      	ldr	r3, [r3, #4]
    5efc:	1e5a      	subs	r2, r3, #1
    5efe:	687b      	ldr	r3, [r7, #4]
    5f00:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    5f02:	2300      	movs	r3, #0
    5f04:	e051      	b.n	5faa <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    5f06:	68bb      	ldr	r3, [r7, #8]
    5f08:	f003 0302 	and.w	r3, r3, #2
    5f0c:	2b00      	cmp	r3, #0
    5f0e:	d04b      	beq.n	5fa8 <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    5f10:	687b      	ldr	r3, [r7, #4]
    5f12:	685b      	ldr	r3, [r3, #4]
    5f14:	2b00      	cmp	r3, #0
    5f16:	d041      	beq.n	5f9c <_sercom_i2c_sync_analyse_flags+0x1ec>
    5f18:	8a7b      	ldrh	r3, [r7, #18]
    5f1a:	f003 0304 	and.w	r3, r3, #4
    5f1e:	2b00      	cmp	r3, #0
    5f20:	d13c      	bne.n	5f9c <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    5f22:	687b      	ldr	r3, [r7, #4]
    5f24:	685b      	ldr	r3, [r3, #4]
    5f26:	1e5a      	subs	r2, r3, #1
    5f28:	687b      	ldr	r3, [r7, #4]
    5f2a:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    5f2c:	687b      	ldr	r3, [r7, #4]
    5f2e:	685b      	ldr	r3, [r3, #4]
    5f30:	2b00      	cmp	r3, #0
    5f32:	d102      	bne.n	5f3a <_sercom_i2c_sync_analyse_flags+0x18a>
    5f34:	697b      	ldr	r3, [r7, #20]
    5f36:	2b00      	cmp	r3, #0
    5f38:	d006      	beq.n	5f48 <_sercom_i2c_sync_analyse_flags+0x198>
    5f3a:	687b      	ldr	r3, [r7, #4]
    5f3c:	685b      	ldr	r3, [r3, #4]
    5f3e:	2b01      	cmp	r3, #1
    5f40:	d105      	bne.n	5f4e <_sercom_i2c_sync_analyse_flags+0x19e>
    5f42:	697b      	ldr	r3, [r7, #20]
    5f44:	2b00      	cmp	r3, #0
    5f46:	d002      	beq.n	5f4e <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    5f48:	68f8      	ldr	r0, [r7, #12]
    5f4a:	4b21      	ldr	r3, [pc, #132]	; (5fd0 <_sercom_i2c_sync_analyse_flags+0x220>)
    5f4c:	4798      	blx	r3
			}

			if (msg->len == 0) {
    5f4e:	687b      	ldr	r3, [r7, #4]
    5f50:	685b      	ldr	r3, [r3, #4]
    5f52:	2b00      	cmp	r3, #0
    5f54:	d113      	bne.n	5f7e <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    5f56:	687b      	ldr	r3, [r7, #4]
    5f58:	885b      	ldrh	r3, [r3, #2]
    5f5a:	b29b      	uxth	r3, r3
    5f5c:	b21b      	sxth	r3, r3
    5f5e:	2b00      	cmp	r3, #0
    5f60:	da05      	bge.n	5f6e <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    5f62:	68f8      	ldr	r0, [r7, #12]
    5f64:	4b1b      	ldr	r3, [pc, #108]	; (5fd4 <_sercom_i2c_sync_analyse_flags+0x224>)
    5f66:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    5f68:	68f8      	ldr	r0, [r7, #12]
    5f6a:	4b15      	ldr	r3, [pc, #84]	; (5fc0 <_sercom_i2c_sync_analyse_flags+0x210>)
    5f6c:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    5f6e:	687b      	ldr	r3, [r7, #4]
    5f70:	885b      	ldrh	r3, [r3, #2]
    5f72:	b29b      	uxth	r3, r3
    5f74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    5f78:	b29a      	uxth	r2, r3
    5f7a:	687b      	ldr	r3, [r7, #4]
    5f7c:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    5f7e:	687b      	ldr	r3, [r7, #4]
    5f80:	689c      	ldr	r4, [r3, #8]
    5f82:	1c62      	adds	r2, r4, #1
    5f84:	687b      	ldr	r3, [r7, #4]
    5f86:	609a      	str	r2, [r3, #8]
    5f88:	68f8      	ldr	r0, [r7, #12]
    5f8a:	4b13      	ldr	r3, [pc, #76]	; (5fd8 <_sercom_i2c_sync_analyse_flags+0x228>)
    5f8c:	4798      	blx	r3
    5f8e:	4603      	mov	r3, r0
    5f90:	b2db      	uxtb	r3, r3
    5f92:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    5f94:	68f8      	ldr	r0, [r7, #12]
    5f96:	4b11      	ldr	r3, [pc, #68]	; (5fdc <_sercom_i2c_sync_analyse_flags+0x22c>)
    5f98:	4798      	blx	r3
    5f9a:	e005      	b.n	5fa8 <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    5f9c:	68f8      	ldr	r0, [r7, #12]
    5f9e:	4b0f      	ldr	r3, [pc, #60]	; (5fdc <_sercom_i2c_sync_analyse_flags+0x22c>)
    5fa0:	4798      	blx	r3
			return I2C_NACK;
    5fa2:	f06f 0301 	mvn.w	r3, #1
    5fa6:	e000      	b.n	5faa <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    5fa8:	2300      	movs	r3, #0
}
    5faa:	4618      	mov	r0, r3
    5fac:	371c      	adds	r7, #28
    5fae:	46bd      	mov	sp, r7
    5fb0:	bd90      	pop	{r4, r7, pc}
    5fb2:	bf00      	nop
    5fb4:	000058c9 	.word	0x000058c9
    5fb8:	00005cad 	.word	0x00005cad
    5fbc:	000057f1 	.word	0x000057f1
    5fc0:	00005d95 	.word	0x00005d95
    5fc4:	00005bb9 	.word	0x00005bb9
    5fc8:	00005b95 	.word	0x00005b95
    5fcc:	00005bf5 	.word	0x00005bf5
    5fd0:	00005a51 	.word	0x00005a51
    5fd4:	00005a29 	.word	0x00005a29
    5fd8:	00005c19 	.word	0x00005c19
    5fdc:	0000580b 	.word	0x0000580b

00005fe0 <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    5fe0:	b580      	push	{r7, lr}
    5fe2:	b082      	sub	sp, #8
    5fe4:	af00      	add	r7, sp, #0
    5fe6:	6078      	str	r0, [r7, #4]
    5fe8:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    5fea:	687b      	ldr	r3, [r7, #4]
    5fec:	2b00      	cmp	r3, #0
    5fee:	bf14      	ite	ne
    5ff0:	2301      	movne	r3, #1
    5ff2:	2300      	moveq	r3, #0
    5ff4:	b2db      	uxtb	r3, r3
    5ff6:	f44f 62a3 	mov.w	r2, #1304	; 0x518
    5ffa:	4908      	ldr	r1, [pc, #32]	; (601c <_i2c_m_sync_init+0x3c>)
    5ffc:	4618      	mov	r0, r3
    5ffe:	4b08      	ldr	r3, [pc, #32]	; (6020 <_i2c_m_sync_init+0x40>)
    6000:	4798      	blx	r3

	i2c_dev->hw = hw;
    6002:	687b      	ldr	r3, [r7, #4]
    6004:	683a      	ldr	r2, [r7, #0]
    6006:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    6008:	687b      	ldr	r3, [r7, #4]
    600a:	6839      	ldr	r1, [r7, #0]
    600c:	4618      	mov	r0, r3
    600e:	4b05      	ldr	r3, [pc, #20]	; (6024 <_i2c_m_sync_init+0x44>)
    6010:	4798      	blx	r3
    6012:	4603      	mov	r3, r0
}
    6014:	4618      	mov	r0, r3
    6016:	3708      	adds	r7, #8
    6018:	46bd      	mov	sp, r7
    601a:	bd80      	pop	{r7, pc}
    601c:	000133a8 	.word	0x000133a8
    6020:	00002d4d 	.word	0x00002d4d
    6024:	000062d1 	.word	0x000062d1

00006028 <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    6028:	b580      	push	{r7, lr}
    602a:	b084      	sub	sp, #16
    602c:	af00      	add	r7, sp, #0
    602e:	6078      	str	r0, [r7, #4]
    6030:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    6032:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6036:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    6038:	687b      	ldr	r3, [r7, #4]
    603a:	691b      	ldr	r3, [r3, #16]
    603c:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    603e:	68b8      	ldr	r0, [r7, #8]
    6040:	4b0f      	ldr	r3, [pc, #60]	; (6080 <_sercom_i2c_sync_wait_bus+0x58>)
    6042:	4798      	blx	r3
    6044:	4603      	mov	r3, r0
    6046:	461a      	mov	r2, r3
    6048:	683b      	ldr	r3, [r7, #0]
    604a:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    604c:	68fb      	ldr	r3, [r7, #12]
    604e:	1e5a      	subs	r2, r3, #1
    6050:	60fa      	str	r2, [r7, #12]
    6052:	2b00      	cmp	r3, #0
    6054:	d102      	bne.n	605c <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    6056:	f06f 0304 	mvn.w	r3, #4
    605a:	e00c      	b.n	6076 <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    605c:	683b      	ldr	r3, [r7, #0]
    605e:	681b      	ldr	r3, [r3, #0]
    6060:	f003 0301 	and.w	r3, r3, #1
    6064:	2b00      	cmp	r3, #0
    6066:	d105      	bne.n	6074 <_sercom_i2c_sync_wait_bus+0x4c>
    6068:	683b      	ldr	r3, [r7, #0]
    606a:	681b      	ldr	r3, [r3, #0]
    606c:	f003 0302 	and.w	r3, r3, #2
    6070:	2b00      	cmp	r3, #0
    6072:	d0e4      	beq.n	603e <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    6074:	2300      	movs	r3, #0
}
    6076:	4618      	mov	r0, r3
    6078:	3710      	adds	r7, #16
    607a:	46bd      	mov	sp, r7
    607c:	bd80      	pop	{r7, pc}
    607e:	bf00      	nop
    6080:	00005825 	.word	0x00005825

00006084 <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    6084:	b590      	push	{r4, r7, lr}
    6086:	b087      	sub	sp, #28
    6088:	af00      	add	r7, sp, #0
    608a:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    608c:	687b      	ldr	r3, [r7, #4]
    608e:	691b      	ldr	r3, [r3, #16]
    6090:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    6092:	687b      	ldr	r3, [r7, #4]
    6094:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    6096:	6978      	ldr	r0, [r7, #20]
    6098:	4b39      	ldr	r3, [pc, #228]	; (6180 <_sercom_i2c_sync_send_address+0xfc>)
    609a:	4798      	blx	r3
    609c:	4603      	mov	r3, r0
    609e:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    60a0:	687b      	ldr	r3, [r7, #4]
    60a2:	2b00      	cmp	r3, #0
    60a4:	bf14      	ite	ne
    60a6:	2301      	movne	r3, #1
    60a8:	2300      	moveq	r3, #0
    60aa:	b2db      	uxtb	r3, r3
    60ac:	f240 52a5 	movw	r2, #1445	; 0x5a5
    60b0:	4934      	ldr	r1, [pc, #208]	; (6184 <_sercom_i2c_sync_send_address+0x100>)
    60b2:	4618      	mov	r0, r3
    60b4:	4b34      	ldr	r3, [pc, #208]	; (6188 <_sercom_i2c_sync_send_address+0x104>)
    60b6:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    60b8:	693b      	ldr	r3, [r7, #16]
    60ba:	685b      	ldr	r3, [r3, #4]
    60bc:	2b01      	cmp	r3, #1
    60be:	d106      	bne.n	60ce <_sercom_i2c_sync_send_address+0x4a>
    60c0:	68fb      	ldr	r3, [r7, #12]
    60c2:	2b00      	cmp	r3, #0
    60c4:	d003      	beq.n	60ce <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    60c6:	6978      	ldr	r0, [r7, #20]
    60c8:	4b30      	ldr	r3, [pc, #192]	; (618c <_sercom_i2c_sync_send_address+0x108>)
    60ca:	4798      	blx	r3
    60cc:	e002      	b.n	60d4 <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    60ce:	6978      	ldr	r0, [r7, #20]
    60d0:	4b2f      	ldr	r3, [pc, #188]	; (6190 <_sercom_i2c_sync_send_address+0x10c>)
    60d2:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    60d4:	693b      	ldr	r3, [r7, #16]
    60d6:	881b      	ldrh	r3, [r3, #0]
    60d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    60dc:	2b00      	cmp	r3, #0
    60de:	d022      	beq.n	6126 <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    60e0:	693b      	ldr	r3, [r7, #16]
    60e2:	885b      	ldrh	r3, [r3, #2]
    60e4:	b29b      	uxth	r3, r3
    60e6:	f003 0301 	and.w	r3, r3, #1
    60ea:	2b00      	cmp	r3, #0
    60ec:	d007      	beq.n	60fe <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    60ee:	693b      	ldr	r3, [r7, #16]
    60f0:	885b      	ldrh	r3, [r3, #2]
    60f2:	b29b      	uxth	r3, r3
    60f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    60f8:	b29a      	uxth	r2, r3
    60fa:	693b      	ldr	r3, [r7, #16]
    60fc:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    60fe:	693b      	ldr	r3, [r7, #16]
    6100:	881b      	ldrh	r3, [r3, #0]
    6102:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6104:	f240 74fe 	movw	r4, #2046	; 0x7fe
    6108:	401c      	ands	r4, r3
    610a:	6978      	ldr	r0, [r7, #20]
    610c:	4b21      	ldr	r3, [pc, #132]	; (6194 <_sercom_i2c_sync_send_address+0x110>)
    610e:	4798      	blx	r3
    6110:	4603      	mov	r3, r0
    6112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    6116:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    6118:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    611c:	4619      	mov	r1, r3
    611e:	6978      	ldr	r0, [r7, #20]
    6120:	4b1d      	ldr	r3, [pc, #116]	; (6198 <_sercom_i2c_sync_send_address+0x114>)
    6122:	4798      	blx	r3
    6124:	e01a      	b.n	615c <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    6126:	693b      	ldr	r3, [r7, #16]
    6128:	881b      	ldrh	r3, [r3, #0]
    612a:	005b      	lsls	r3, r3, #1
    612c:	b2db      	uxtb	r3, r3
    612e:	693a      	ldr	r2, [r7, #16]
    6130:	8852      	ldrh	r2, [r2, #2]
    6132:	b292      	uxth	r2, r2
    6134:	f002 0201 	and.w	r2, r2, #1
    6138:	2a00      	cmp	r2, #0
    613a:	bf14      	ite	ne
    613c:	2201      	movne	r2, #1
    613e:	2200      	moveq	r2, #0
    6140:	b2d2      	uxtb	r2, r2
    6142:	4313      	orrs	r3, r2
    6144:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6146:	6978      	ldr	r0, [r7, #20]
    6148:	4b12      	ldr	r3, [pc, #72]	; (6194 <_sercom_i2c_sync_send_address+0x110>)
    614a:	4798      	blx	r3
    614c:	4603      	mov	r3, r0
    614e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    6152:	4323      	orrs	r3, r4
    6154:	4619      	mov	r1, r3
    6156:	6978      	ldr	r0, [r7, #20]
    6158:	4b0f      	ldr	r3, [pc, #60]	; (6198 <_sercom_i2c_sync_send_address+0x114>)
    615a:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    615c:	f107 0308 	add.w	r3, r7, #8
    6160:	4619      	mov	r1, r3
    6162:	6878      	ldr	r0, [r7, #4]
    6164:	4b0d      	ldr	r3, [pc, #52]	; (619c <_sercom_i2c_sync_send_address+0x118>)
    6166:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    6168:	68bb      	ldr	r3, [r7, #8]
    616a:	693a      	ldr	r2, [r7, #16]
    616c:	4619      	mov	r1, r3
    616e:	6978      	ldr	r0, [r7, #20]
    6170:	4b0b      	ldr	r3, [pc, #44]	; (61a0 <_sercom_i2c_sync_send_address+0x11c>)
    6172:	4798      	blx	r3
    6174:	4603      	mov	r3, r0
}
    6176:	4618      	mov	r0, r3
    6178:	371c      	adds	r7, #28
    617a:	46bd      	mov	sp, r7
    617c:	bd90      	pop	{r4, r7, pc}
    617e:	bf00      	nop
    6180:	000058c9 	.word	0x000058c9
    6184:	000133a8 	.word	0x000133a8
    6188:	00002d4d 	.word	0x00002d4d
    618c:	00005a51 	.word	0x00005a51
    6190:	00005a79 	.word	0x00005a79
    6194:	00005bb9 	.word	0x00005bb9
    6198:	00005b95 	.word	0x00005b95
    619c:	00006029 	.word	0x00006029
    61a0:	00005db1 	.word	0x00005db1

000061a4 <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    61a4:	b580      	push	{r7, lr}
    61a6:	b086      	sub	sp, #24
    61a8:	af00      	add	r7, sp, #0
    61aa:	6078      	str	r0, [r7, #4]
    61ac:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    61ae:	687b      	ldr	r3, [r7, #4]
    61b0:	691b      	ldr	r3, [r3, #16]
    61b2:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    61b4:	687b      	ldr	r3, [r7, #4]
    61b6:	2b00      	cmp	r3, #0
    61b8:	bf14      	ite	ne
    61ba:	2301      	movne	r3, #1
    61bc:	2300      	moveq	r3, #0
    61be:	b2db      	uxtb	r3, r3
    61c0:	f44f 62ba 	mov.w	r2, #1488	; 0x5d0
    61c4:	493b      	ldr	r1, [pc, #236]	; (62b4 <_i2c_m_sync_transfer+0x110>)
    61c6:	4618      	mov	r0, r3
    61c8:	4b3b      	ldr	r3, [pc, #236]	; (62b8 <_i2c_m_sync_transfer+0x114>)
    61ca:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    61cc:	687b      	ldr	r3, [r7, #4]
    61ce:	691b      	ldr	r3, [r3, #16]
    61d0:	2b00      	cmp	r3, #0
    61d2:	bf14      	ite	ne
    61d4:	2301      	movne	r3, #1
    61d6:	2300      	moveq	r3, #0
    61d8:	b2db      	uxtb	r3, r3
    61da:	f240 52d1 	movw	r2, #1489	; 0x5d1
    61de:	4935      	ldr	r1, [pc, #212]	; (62b4 <_i2c_m_sync_transfer+0x110>)
    61e0:	4618      	mov	r0, r3
    61e2:	4b35      	ldr	r3, [pc, #212]	; (62b8 <_i2c_m_sync_transfer+0x114>)
    61e4:	4798      	blx	r3
	ASSERT(msg);
    61e6:	683b      	ldr	r3, [r7, #0]
    61e8:	2b00      	cmp	r3, #0
    61ea:	bf14      	ite	ne
    61ec:	2301      	movne	r3, #1
    61ee:	2300      	moveq	r3, #0
    61f0:	b2db      	uxtb	r3, r3
    61f2:	f240 52d2 	movw	r2, #1490	; 0x5d2
    61f6:	492f      	ldr	r1, [pc, #188]	; (62b4 <_i2c_m_sync_transfer+0x110>)
    61f8:	4618      	mov	r0, r3
    61fa:	4b2f      	ldr	r3, [pc, #188]	; (62b8 <_i2c_m_sync_transfer+0x114>)
    61fc:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    61fe:	687b      	ldr	r3, [r7, #4]
    6200:	885b      	ldrh	r3, [r3, #2]
    6202:	b29b      	uxth	r3, r3
    6204:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6208:	2b00      	cmp	r3, #0
    620a:	d002      	beq.n	6212 <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    620c:	f06f 0305 	mvn.w	r3, #5
    6210:	e04c      	b.n	62ac <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    6212:	683b      	ldr	r3, [r7, #0]
    6214:	885b      	ldrh	r3, [r3, #2]
    6216:	b29b      	uxth	r3, r3
    6218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    621c:	b29a      	uxth	r2, r3
    621e:	683b      	ldr	r3, [r7, #0]
    6220:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    6222:	687b      	ldr	r3, [r7, #4]
    6224:	683a      	ldr	r2, [r7, #0]
    6226:	ca07      	ldmia	r2, {r0, r1, r2}
    6228:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    622c:	6938      	ldr	r0, [r7, #16]
    622e:	4b23      	ldr	r3, [pc, #140]	; (62bc <_i2c_m_sync_transfer+0x118>)
    6230:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    6232:	6878      	ldr	r0, [r7, #4]
    6234:	4b22      	ldr	r3, [pc, #136]	; (62c0 <_i2c_m_sync_transfer+0x11c>)
    6236:	4798      	blx	r3
    6238:	6178      	str	r0, [r7, #20]

	if (ret) {
    623a:	697b      	ldr	r3, [r7, #20]
    623c:	2b00      	cmp	r3, #0
    623e:	d02d      	beq.n	629c <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6240:	687b      	ldr	r3, [r7, #4]
    6242:	885b      	ldrh	r3, [r3, #2]
    6244:	b29b      	uxth	r3, r3
    6246:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    624a:	b29a      	uxth	r2, r3
    624c:	687b      	ldr	r3, [r7, #4]
    624e:	805a      	strh	r2, [r3, #2]

		return ret;
    6250:	697b      	ldr	r3, [r7, #20]
    6252:	e02b      	b.n	62ac <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    6254:	f107 030c 	add.w	r3, r7, #12
    6258:	4619      	mov	r1, r3
    625a:	6878      	ldr	r0, [r7, #4]
    625c:	4b19      	ldr	r3, [pc, #100]	; (62c4 <_i2c_m_sync_transfer+0x120>)
    625e:	4798      	blx	r3
    6260:	6178      	str	r0, [r7, #20]

		if (ret) {
    6262:	697b      	ldr	r3, [r7, #20]
    6264:	2b00      	cmp	r3, #0
    6266:	d012      	beq.n	628e <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    6268:	683b      	ldr	r3, [r7, #0]
    626a:	885b      	ldrh	r3, [r3, #2]
    626c:	b29b      	uxth	r3, r3
    626e:	b21b      	sxth	r3, r3
    6270:	2b00      	cmp	r3, #0
    6272:	da02      	bge.n	627a <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    6274:	6938      	ldr	r0, [r7, #16]
    6276:	4b14      	ldr	r3, [pc, #80]	; (62c8 <_i2c_m_sync_transfer+0x124>)
    6278:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    627a:	687b      	ldr	r3, [r7, #4]
    627c:	885b      	ldrh	r3, [r3, #2]
    627e:	b29b      	uxth	r3, r3
    6280:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6284:	b29a      	uxth	r2, r3
    6286:	687b      	ldr	r3, [r7, #4]
    6288:	805a      	strh	r2, [r3, #2]

			return ret;
    628a:	697b      	ldr	r3, [r7, #20]
    628c:	e00e      	b.n	62ac <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    628e:	68fb      	ldr	r3, [r7, #12]
    6290:	687a      	ldr	r2, [r7, #4]
    6292:	4619      	mov	r1, r3
    6294:	6938      	ldr	r0, [r7, #16]
    6296:	4b0d      	ldr	r3, [pc, #52]	; (62cc <_i2c_m_sync_transfer+0x128>)
    6298:	4798      	blx	r3
    629a:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    629c:	687b      	ldr	r3, [r7, #4]
    629e:	885b      	ldrh	r3, [r3, #2]
    62a0:	b29b      	uxth	r3, r3
    62a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
    62a6:	2b00      	cmp	r3, #0
    62a8:	d1d4      	bne.n	6254 <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    62aa:	697b      	ldr	r3, [r7, #20]
}
    62ac:	4618      	mov	r0, r3
    62ae:	3718      	adds	r7, #24
    62b0:	46bd      	mov	sp, r7
    62b2:	bd80      	pop	{r7, pc}
    62b4:	000133a8 	.word	0x000133a8
    62b8:	00002d4d 	.word	0x00002d4d
    62bc:	00005a01 	.word	0x00005a01
    62c0:	00006085 	.word	0x00006085
    62c4:	00006029 	.word	0x00006029
    62c8:	00005d95 	.word	0x00005d95
    62cc:	00005db1 	.word	0x00005db1

000062d0 <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    62d0:	b580      	push	{r7, lr}
    62d2:	b084      	sub	sp, #16
    62d4:	af00      	add	r7, sp, #0
    62d6:	6078      	str	r0, [r7, #4]
    62d8:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    62da:	6838      	ldr	r0, [r7, #0]
    62dc:	4b42      	ldr	r3, [pc, #264]	; (63e8 <_i2c_m_sync_init_impl+0x118>)
    62de:	4798      	blx	r3
    62e0:	4603      	mov	r3, r0
    62e2:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    62e4:	2101      	movs	r1, #1
    62e6:	6838      	ldr	r0, [r7, #0]
    62e8:	4b40      	ldr	r3, [pc, #256]	; (63ec <_i2c_m_sync_init_impl+0x11c>)
    62ea:	4798      	blx	r3
    62ec:	4603      	mov	r3, r0
    62ee:	f083 0301 	eor.w	r3, r3, #1
    62f2:	b2db      	uxtb	r3, r3
    62f4:	2b00      	cmp	r3, #0
    62f6:	d020      	beq.n	633a <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    62f8:	7bfa      	ldrb	r2, [r7, #15]
    62fa:	493d      	ldr	r1, [pc, #244]	; (63f0 <_i2c_m_sync_init_impl+0x120>)
    62fc:	4613      	mov	r3, r2
    62fe:	005b      	lsls	r3, r3, #1
    6300:	4413      	add	r3, r2
    6302:	00db      	lsls	r3, r3, #3
    6304:	440b      	add	r3, r1
    6306:	3304      	adds	r3, #4
    6308:	681b      	ldr	r3, [r3, #0]
    630a:	f003 031c 	and.w	r3, r3, #28
    630e:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    6310:	2102      	movs	r1, #2
    6312:	6838      	ldr	r0, [r7, #0]
    6314:	4b37      	ldr	r3, [pc, #220]	; (63f4 <_i2c_m_sync_init_impl+0x124>)
    6316:	4798      	blx	r3
    6318:	4603      	mov	r3, r0
    631a:	2b00      	cmp	r3, #0
    631c:	d006      	beq.n	632c <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    631e:	6838      	ldr	r0, [r7, #0]
    6320:	4b35      	ldr	r3, [pc, #212]	; (63f8 <_i2c_m_sync_init_impl+0x128>)
    6322:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    6324:	2102      	movs	r1, #2
    6326:	6838      	ldr	r0, [r7, #0]
    6328:	4b34      	ldr	r3, [pc, #208]	; (63fc <_i2c_m_sync_init_impl+0x12c>)
    632a:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    632c:	68bb      	ldr	r3, [r7, #8]
    632e:	f043 0301 	orr.w	r3, r3, #1
    6332:	4619      	mov	r1, r3
    6334:	6838      	ldr	r0, [r7, #0]
    6336:	4b32      	ldr	r3, [pc, #200]	; (6400 <_i2c_m_sync_init_impl+0x130>)
    6338:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    633a:	2101      	movs	r1, #1
    633c:	6838      	ldr	r0, [r7, #0]
    633e:	4b2f      	ldr	r3, [pc, #188]	; (63fc <_i2c_m_sync_init_impl+0x12c>)
    6340:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    6342:	7bfa      	ldrb	r2, [r7, #15]
    6344:	492a      	ldr	r1, [pc, #168]	; (63f0 <_i2c_m_sync_init_impl+0x120>)
    6346:	4613      	mov	r3, r2
    6348:	005b      	lsls	r3, r3, #1
    634a:	4413      	add	r3, r2
    634c:	00db      	lsls	r3, r3, #3
    634e:	440b      	add	r3, r1
    6350:	3304      	adds	r3, #4
    6352:	681b      	ldr	r3, [r3, #0]
    6354:	4619      	mov	r1, r3
    6356:	6838      	ldr	r0, [r7, #0]
    6358:	4b29      	ldr	r3, [pc, #164]	; (6400 <_i2c_m_sync_init_impl+0x130>)
    635a:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    635c:	7bfa      	ldrb	r2, [r7, #15]
    635e:	4924      	ldr	r1, [pc, #144]	; (63f0 <_i2c_m_sync_init_impl+0x120>)
    6360:	4613      	mov	r3, r2
    6362:	005b      	lsls	r3, r3, #1
    6364:	4413      	add	r3, r2
    6366:	00db      	lsls	r3, r3, #3
    6368:	440b      	add	r3, r1
    636a:	3308      	adds	r3, #8
    636c:	681b      	ldr	r3, [r3, #0]
    636e:	4619      	mov	r1, r3
    6370:	6838      	ldr	r0, [r7, #0]
    6372:	4b24      	ldr	r3, [pc, #144]	; (6404 <_i2c_m_sync_init_impl+0x134>)
    6374:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    6376:	7bfa      	ldrb	r2, [r7, #15]
    6378:	491d      	ldr	r1, [pc, #116]	; (63f0 <_i2c_m_sync_init_impl+0x120>)
    637a:	4613      	mov	r3, r2
    637c:	005b      	lsls	r3, r3, #1
    637e:	4413      	add	r3, r2
    6380:	00db      	lsls	r3, r3, #3
    6382:	440b      	add	r3, r1
    6384:	330c      	adds	r3, #12
    6386:	681b      	ldr	r3, [r3, #0]
    6388:	4619      	mov	r1, r3
    638a:	6838      	ldr	r0, [r7, #0]
    638c:	4b1e      	ldr	r3, [pc, #120]	; (6408 <_i2c_m_sync_init_impl+0x138>)
    638e:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    6390:	7bfa      	ldrb	r2, [r7, #15]
    6392:	4917      	ldr	r1, [pc, #92]	; (63f0 <_i2c_m_sync_init_impl+0x120>)
    6394:	4613      	mov	r3, r2
    6396:	005b      	lsls	r3, r3, #1
    6398:	4413      	add	r3, r2
    639a:	00db      	lsls	r3, r3, #3
    639c:	440b      	add	r3, r1
    639e:	3304      	adds	r3, #4
    63a0:	681b      	ldr	r3, [r3, #0]
    63a2:	0e1b      	lsrs	r3, r3, #24
    63a4:	b29b      	uxth	r3, r3
    63a6:	f003 0303 	and.w	r3, r3, #3
    63aa:	b29a      	uxth	r2, r3
    63ac:	687b      	ldr	r3, [r7, #4]
    63ae:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    63b0:	687b      	ldr	r3, [r7, #4]
    63b2:	899b      	ldrh	r3, [r3, #12]
    63b4:	2b01      	cmp	r3, #1
    63b6:	bf8c      	ite	hi
    63b8:	2301      	movhi	r3, #1
    63ba:	2300      	movls	r3, #0
    63bc:	b2db      	uxtb	r3, r3
    63be:	4619      	mov	r1, r3
    63c0:	6838      	ldr	r0, [r7, #0]
    63c2:	4b12      	ldr	r3, [pc, #72]	; (640c <_i2c_m_sync_init_impl+0x13c>)
    63c4:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    63c6:	7bfa      	ldrb	r2, [r7, #15]
    63c8:	4909      	ldr	r1, [pc, #36]	; (63f0 <_i2c_m_sync_init_impl+0x120>)
    63ca:	4613      	mov	r3, r2
    63cc:	005b      	lsls	r3, r3, #1
    63ce:	4413      	add	r3, r2
    63d0:	00db      	lsls	r3, r3, #3
    63d2:	440b      	add	r3, r1
    63d4:	3312      	adds	r3, #18
    63d6:	881a      	ldrh	r2, [r3, #0]
    63d8:	687b      	ldr	r3, [r7, #4]
    63da:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    63dc:	2300      	movs	r3, #0
}
    63de:	4618      	mov	r0, r3
    63e0:	3710      	adds	r7, #16
    63e2:	46bd      	mov	sp, r7
    63e4:	bd80      	pop	{r7, pc}
    63e6:	bf00      	nop
    63e8:	00005d2d 	.word	0x00005d2d
    63ec:	0000577d 	.word	0x0000577d
    63f0:	20000018 	.word	0x20000018
    63f4:	000058f9 	.word	0x000058f9
    63f8:	000058a1 	.word	0x000058a1
    63fc:	00005759 	.word	0x00005759
    6400:	00005929 	.word	0x00005929
    6404:	00005ad1 	.word	0x00005ad1
    6408:	00005b19 	.word	0x00005b19
    640c:	00005b55 	.word	0x00005b55

00006410 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    6410:	b580      	push	{r7, lr}
    6412:	b082      	sub	sp, #8
    6414:	af00      	add	r7, sp, #0
    6416:	6078      	str	r0, [r7, #4]
    6418:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    641a:	687b      	ldr	r3, [r7, #4]
    641c:	2b00      	cmp	r3, #0
    641e:	d004      	beq.n	642a <_spi_load_regs_master+0x1a>
    6420:	683b      	ldr	r3, [r7, #0]
    6422:	2b00      	cmp	r3, #0
    6424:	d001      	beq.n	642a <_spi_load_regs_master+0x1a>
    6426:	2301      	movs	r3, #1
    6428:	e000      	b.n	642c <_spi_load_regs_master+0x1c>
    642a:	2300      	movs	r3, #0
    642c:	f003 0301 	and.w	r3, r3, #1
    6430:	b2db      	uxtb	r3, r3
    6432:	f640 1209 	movw	r2, #2313	; 0x909
    6436:	4915      	ldr	r1, [pc, #84]	; (648c <_spi_load_regs_master+0x7c>)
    6438:	4618      	mov	r0, r3
    643a:	4b15      	ldr	r3, [pc, #84]	; (6490 <_spi_load_regs_master+0x80>)
    643c:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    643e:	683b      	ldr	r3, [r7, #0]
    6440:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    6442:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    6446:	f023 0301 	bic.w	r3, r3, #1
    644a:	4619      	mov	r1, r3
    644c:	6878      	ldr	r0, [r7, #4]
    644e:	4b11      	ldr	r3, [pc, #68]	; (6494 <_spi_load_regs_master+0x84>)
    6450:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    6452:	683b      	ldr	r3, [r7, #0]
    6454:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    6456:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    645a:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    645e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    6462:	4619      	mov	r1, r3
    6464:	6878      	ldr	r0, [r7, #4]
    6466:	4b0c      	ldr	r3, [pc, #48]	; (6498 <_spi_load_regs_master+0x88>)
    6468:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    646a:	683b      	ldr	r3, [r7, #0]
    646c:	7b1b      	ldrb	r3, [r3, #12]
    646e:	4619      	mov	r1, r3
    6470:	6878      	ldr	r0, [r7, #4]
    6472:	4b0a      	ldr	r3, [pc, #40]	; (649c <_spi_load_regs_master+0x8c>)
    6474:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    6476:	683b      	ldr	r3, [r7, #0]
    6478:	7b5b      	ldrb	r3, [r3, #13]
    647a:	4619      	mov	r1, r3
    647c:	6878      	ldr	r0, [r7, #4]
    647e:	4b08      	ldr	r3, [pc, #32]	; (64a0 <_spi_load_regs_master+0x90>)
    6480:	4798      	blx	r3
}
    6482:	bf00      	nop
    6484:	3708      	adds	r7, #8
    6486:	46bd      	mov	sp, r7
    6488:	bd80      	pop	{r7, pc}
    648a:	bf00      	nop
    648c:	000133a8 	.word	0x000133a8
    6490:	00002d4d 	.word	0x00002d4d
    6494:	000059dd 	.word	0x000059dd
    6498:	00005af5 	.word	0x00005af5
    649c:	00005b35 	.word	0x00005b35
    64a0:	00005c6d 	.word	0x00005c6d

000064a4 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    64a4:	b580      	push	{r7, lr}
    64a6:	b082      	sub	sp, #8
    64a8:	af00      	add	r7, sp, #0
    64aa:	6078      	str	r0, [r7, #4]
    64ac:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    64ae:	687b      	ldr	r3, [r7, #4]
    64b0:	2b00      	cmp	r3, #0
    64b2:	d004      	beq.n	64be <_spi_load_regs_slave+0x1a>
    64b4:	683b      	ldr	r3, [r7, #0]
    64b6:	2b00      	cmp	r3, #0
    64b8:	d001      	beq.n	64be <_spi_load_regs_slave+0x1a>
    64ba:	2301      	movs	r3, #1
    64bc:	e000      	b.n	64c0 <_spi_load_regs_slave+0x1c>
    64be:	2300      	movs	r3, #0
    64c0:	f003 0301 	and.w	r3, r3, #1
    64c4:	b2db      	uxtb	r3, r3
    64c6:	f640 121d 	movw	r2, #2333	; 0x91d
    64ca:	491a      	ldr	r1, [pc, #104]	; (6534 <_spi_load_regs_slave+0x90>)
    64cc:	4618      	mov	r0, r3
    64ce:	4b1a      	ldr	r3, [pc, #104]	; (6538 <_spi_load_regs_slave+0x94>)
    64d0:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    64d2:	683b      	ldr	r3, [r7, #0]
    64d4:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    64d6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    64da:	f023 0301 	bic.w	r3, r3, #1
    64de:	4619      	mov	r1, r3
    64e0:	6878      	ldr	r0, [r7, #4]
    64e2:	4b16      	ldr	r3, [pc, #88]	; (653c <_spi_load_regs_slave+0x98>)
    64e4:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    64e6:	683b      	ldr	r3, [r7, #0]
    64e8:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    64ea:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    64ee:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    64f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    64f6:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    64fa:	4619      	mov	r1, r3
    64fc:	6878      	ldr	r0, [r7, #4]
    64fe:	4b10      	ldr	r3, [pc, #64]	; (6540 <_spi_load_regs_slave+0x9c>)
    6500:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    6502:	683b      	ldr	r3, [r7, #0]
    6504:	689b      	ldr	r3, [r3, #8]
    6506:	4619      	mov	r1, r3
    6508:	6878      	ldr	r0, [r7, #4]
    650a:	4b0e      	ldr	r3, [pc, #56]	; (6544 <_spi_load_regs_slave+0xa0>)
    650c:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    650e:	683b      	ldr	r3, [r7, #0]
    6510:	7b5b      	ldrb	r3, [r3, #13]
    6512:	4619      	mov	r1, r3
    6514:	6878      	ldr	r0, [r7, #4]
    6516:	4b0c      	ldr	r3, [pc, #48]	; (6548 <_spi_load_regs_slave+0xa4>)
    6518:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    651a:	bf00      	nop
    651c:	f04f 31ff 	mov.w	r1, #4294967295
    6520:	6878      	ldr	r0, [r7, #4]
    6522:	4b0a      	ldr	r3, [pc, #40]	; (654c <_spi_load_regs_slave+0xa8>)
    6524:	4798      	blx	r3
    6526:	4603      	mov	r3, r0
    6528:	2b00      	cmp	r3, #0
    652a:	d1f7      	bne.n	651c <_spi_load_regs_slave+0x78>
		;
}
    652c:	bf00      	nop
    652e:	3708      	adds	r7, #8
    6530:	46bd      	mov	sp, r7
    6532:	bd80      	pop	{r7, pc}
    6534:	000133a8 	.word	0x000133a8
    6538:	00002d4d 	.word	0x00002d4d
    653c:	000059dd 	.word	0x000059dd
    6540:	00005af5 	.word	0x00005af5
    6544:	00005bd9 	.word	0x00005bd9
    6548:	00005c6d 	.word	0x00005c6d
    654c:	000057c9 	.word	0x000057c9

00006550 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    6550:	b580      	push	{r7, lr}
    6552:	b084      	sub	sp, #16
    6554:	af00      	add	r7, sp, #0
    6556:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    6558:	687b      	ldr	r3, [r7, #4]
    655a:	4618      	mov	r0, r3
    655c:	4b11      	ldr	r3, [pc, #68]	; (65a4 <_spi_get_regs+0x54>)
    655e:	4798      	blx	r3
    6560:	4603      	mov	r3, r0
    6562:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    6564:	2300      	movs	r3, #0
    6566:	73fb      	strb	r3, [r7, #15]
    6568:	e014      	b.n	6594 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    656a:	7bfa      	ldrb	r2, [r7, #15]
    656c:	490e      	ldr	r1, [pc, #56]	; (65a8 <_spi_get_regs+0x58>)
    656e:	4613      	mov	r3, r2
    6570:	011b      	lsls	r3, r3, #4
    6572:	4413      	add	r3, r2
    6574:	440b      	add	r3, r1
    6576:	3310      	adds	r3, #16
    6578:	781b      	ldrb	r3, [r3, #0]
    657a:	7bba      	ldrb	r2, [r7, #14]
    657c:	429a      	cmp	r2, r3
    657e:	d106      	bne.n	658e <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    6580:	7bfa      	ldrb	r2, [r7, #15]
    6582:	4613      	mov	r3, r2
    6584:	011b      	lsls	r3, r3, #4
    6586:	4413      	add	r3, r2
    6588:	4a07      	ldr	r2, [pc, #28]	; (65a8 <_spi_get_regs+0x58>)
    658a:	4413      	add	r3, r2
    658c:	e006      	b.n	659c <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    658e:	7bfb      	ldrb	r3, [r7, #15]
    6590:	3301      	adds	r3, #1
    6592:	73fb      	strb	r3, [r7, #15]
    6594:	7bfb      	ldrb	r3, [r7, #15]
    6596:	2b01      	cmp	r3, #1
    6598:	d9e7      	bls.n	656a <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    659a:	2300      	movs	r3, #0
}
    659c:	4618      	mov	r0, r3
    659e:	3710      	adds	r7, #16
    65a0:	46bd      	mov	sp, r7
    65a2:	bd80      	pop	{r7, pc}
    65a4:	00005cd1 	.word	0x00005cd1
    65a8:	000133e4 	.word	0x000133e4

000065ac <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    65ac:	b580      	push	{r7, lr}
    65ae:	b084      	sub	sp, #16
    65b0:	af00      	add	r7, sp, #0
    65b2:	6078      	str	r0, [r7, #4]
    65b4:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    65b6:	683b      	ldr	r3, [r7, #0]
    65b8:	4618      	mov	r0, r3
    65ba:	4b35      	ldr	r3, [pc, #212]	; (6690 <_spi_m_sync_init+0xe4>)
    65bc:	4798      	blx	r3
    65be:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    65c0:	687b      	ldr	r3, [r7, #4]
    65c2:	2b00      	cmp	r3, #0
    65c4:	d004      	beq.n	65d0 <_spi_m_sync_init+0x24>
    65c6:	683b      	ldr	r3, [r7, #0]
    65c8:	2b00      	cmp	r3, #0
    65ca:	d001      	beq.n	65d0 <_spi_m_sync_init+0x24>
    65cc:	2301      	movs	r3, #1
    65ce:	e000      	b.n	65d2 <_spi_m_sync_init+0x26>
    65d0:	2300      	movs	r3, #0
    65d2:	f003 0301 	and.w	r3, r3, #1
    65d6:	b2db      	uxtb	r3, r3
    65d8:	f640 123f 	movw	r2, #2367	; 0x93f
    65dc:	492d      	ldr	r1, [pc, #180]	; (6694 <_spi_m_sync_init+0xe8>)
    65de:	4618      	mov	r0, r3
    65e0:	4b2d      	ldr	r3, [pc, #180]	; (6698 <_spi_m_sync_init+0xec>)
    65e2:	4798      	blx	r3

	if (regs == NULL) {
    65e4:	68fb      	ldr	r3, [r7, #12]
    65e6:	2b00      	cmp	r3, #0
    65e8:	d102      	bne.n	65f0 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    65ea:	f06f 030c 	mvn.w	r3, #12
    65ee:	e04a      	b.n	6686 <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    65f0:	2101      	movs	r1, #1
    65f2:	6838      	ldr	r0, [r7, #0]
    65f4:	4b29      	ldr	r3, [pc, #164]	; (669c <_spi_m_sync_init+0xf0>)
    65f6:	4798      	blx	r3
    65f8:	4603      	mov	r3, r0
    65fa:	f083 0301 	eor.w	r3, r3, #1
    65fe:	b2db      	uxtb	r3, r3
    6600:	2b00      	cmp	r3, #0
    6602:	d019      	beq.n	6638 <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    6604:	68fb      	ldr	r3, [r7, #12]
    6606:	681b      	ldr	r3, [r3, #0]
    6608:	f003 031c 	and.w	r3, r3, #28
    660c:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    660e:	2102      	movs	r1, #2
    6610:	6838      	ldr	r0, [r7, #0]
    6612:	4b23      	ldr	r3, [pc, #140]	; (66a0 <_spi_m_sync_init+0xf4>)
    6614:	4798      	blx	r3
    6616:	4603      	mov	r3, r0
    6618:	2b00      	cmp	r3, #0
    661a:	d006      	beq.n	662a <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    661c:	6838      	ldr	r0, [r7, #0]
    661e:	4b21      	ldr	r3, [pc, #132]	; (66a4 <_spi_m_sync_init+0xf8>)
    6620:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    6622:	2102      	movs	r1, #2
    6624:	6838      	ldr	r0, [r7, #0]
    6626:	4b20      	ldr	r3, [pc, #128]	; (66a8 <_spi_m_sync_init+0xfc>)
    6628:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    662a:	68bb      	ldr	r3, [r7, #8]
    662c:	f043 0301 	orr.w	r3, r3, #1
    6630:	4619      	mov	r1, r3
    6632:	6838      	ldr	r0, [r7, #0]
    6634:	4b1d      	ldr	r3, [pc, #116]	; (66ac <_spi_m_sync_init+0x100>)
    6636:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    6638:	2101      	movs	r1, #1
    663a:	6838      	ldr	r0, [r7, #0]
    663c:	4b1a      	ldr	r3, [pc, #104]	; (66a8 <_spi_m_sync_init+0xfc>)
    663e:	4798      	blx	r3

	dev->prvt = hw;
    6640:	687b      	ldr	r3, [r7, #4]
    6642:	683a      	ldr	r2, [r7, #0]
    6644:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    6646:	68fb      	ldr	r3, [r7, #12]
    6648:	681b      	ldr	r3, [r3, #0]
    664a:	f003 031c 	and.w	r3, r3, #28
    664e:	2b08      	cmp	r3, #8
    6650:	d104      	bne.n	665c <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    6652:	68f9      	ldr	r1, [r7, #12]
    6654:	6838      	ldr	r0, [r7, #0]
    6656:	4b16      	ldr	r3, [pc, #88]	; (66b0 <_spi_m_sync_init+0x104>)
    6658:	4798      	blx	r3
    665a:	e003      	b.n	6664 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    665c:	68f9      	ldr	r1, [r7, #12]
    665e:	6838      	ldr	r0, [r7, #0]
    6660:	4b14      	ldr	r3, [pc, #80]	; (66b4 <_spi_m_sync_init+0x108>)
    6662:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    6664:	68fb      	ldr	r3, [r7, #12]
    6666:	685b      	ldr	r3, [r3, #4]
    6668:	f003 0307 	and.w	r3, r3, #7
    666c:	2b00      	cmp	r3, #0
    666e:	d101      	bne.n	6674 <_spi_m_sync_init+0xc8>
    6670:	2201      	movs	r2, #1
    6672:	e000      	b.n	6676 <_spi_m_sync_init+0xca>
    6674:	2202      	movs	r2, #2
    6676:	687b      	ldr	r3, [r7, #4]
    6678:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    667a:	68fb      	ldr	r3, [r7, #12]
    667c:	89db      	ldrh	r3, [r3, #14]
    667e:	b29a      	uxth	r2, r3
    6680:	687b      	ldr	r3, [r7, #4]
    6682:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    6684:	2300      	movs	r3, #0
}
    6686:	4618      	mov	r0, r3
    6688:	3710      	adds	r7, #16
    668a:	46bd      	mov	sp, r7
    668c:	bd80      	pop	{r7, pc}
    668e:	bf00      	nop
    6690:	00006551 	.word	0x00006551
    6694:	000133a8 	.word	0x000133a8
    6698:	00002d4d 	.word	0x00002d4d
    669c:	000057c9 	.word	0x000057c9
    66a0:	000059ad 	.word	0x000059ad
    66a4:	00005985 	.word	0x00005985
    66a8:	000057a5 	.word	0x000057a5
    66ac:	000059dd 	.word	0x000059dd
    66b0:	000064a5 	.word	0x000064a5
    66b4:	00006411 	.word	0x00006411

000066b8 <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    66b8:	b580      	push	{r7, lr}
    66ba:	b082      	sub	sp, #8
    66bc:	af00      	add	r7, sp, #0
    66be:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    66c0:	bf00      	nop
    66c2:	2103      	movs	r1, #3
    66c4:	6878      	ldr	r0, [r7, #4]
    66c6:	4b06      	ldr	r3, [pc, #24]	; (66e0 <_spi_wait_bus_idle+0x28>)
    66c8:	4798      	blx	r3
    66ca:	4603      	mov	r3, r0
    66cc:	2b00      	cmp	r3, #0
    66ce:	d0f8      	beq.n	66c2 <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    66d0:	2103      	movs	r1, #3
    66d2:	6878      	ldr	r0, [r7, #4]
    66d4:	4b03      	ldr	r3, [pc, #12]	; (66e4 <_spi_wait_bus_idle+0x2c>)
    66d6:	4798      	blx	r3
}
    66d8:	bf00      	nop
    66da:	3708      	adds	r7, #8
    66dc:	46bd      	mov	sp, r7
    66de:	bd80      	pop	{r7, pc}
    66e0:	0000583f 	.word	0x0000583f
    66e4:	00005881 	.word	0x00005881

000066e8 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    66e8:	b580      	push	{r7, lr}
    66ea:	b086      	sub	sp, #24
    66ec:	af00      	add	r7, sp, #0
    66ee:	60f8      	str	r0, [r7, #12]
    66f0:	60b9      	str	r1, [r7, #8]
    66f2:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    66f4:	68bb      	ldr	r3, [r7, #8]
    66f6:	f003 0304 	and.w	r3, r3, #4
    66fa:	2b00      	cmp	r3, #0
    66fc:	d101      	bne.n	6702 <_spi_rx_check_and_receive+0x1a>
		return false;
    66fe:	2300      	movs	r3, #0
    6700:	e022      	b.n	6748 <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    6702:	68f8      	ldr	r0, [r7, #12]
    6704:	4b12      	ldr	r3, [pc, #72]	; (6750 <_spi_rx_check_and_receive+0x68>)
    6706:	4798      	blx	r3
    6708:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    670a:	687b      	ldr	r3, [r7, #4]
    670c:	685b      	ldr	r3, [r3, #4]
    670e:	2b00      	cmp	r3, #0
    6710:	d014      	beq.n	673c <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    6712:	687b      	ldr	r3, [r7, #4]
    6714:	685b      	ldr	r3, [r3, #4]
    6716:	1c59      	adds	r1, r3, #1
    6718:	687a      	ldr	r2, [r7, #4]
    671a:	6051      	str	r1, [r2, #4]
    671c:	697a      	ldr	r2, [r7, #20]
    671e:	b2d2      	uxtb	r2, r2
    6720:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    6722:	687b      	ldr	r3, [r7, #4]
    6724:	7c1b      	ldrb	r3, [r3, #16]
    6726:	2b01      	cmp	r3, #1
    6728:	d908      	bls.n	673c <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    672a:	687b      	ldr	r3, [r7, #4]
    672c:	685b      	ldr	r3, [r3, #4]
    672e:	1c59      	adds	r1, r3, #1
    6730:	687a      	ldr	r2, [r7, #4]
    6732:	6051      	str	r1, [r2, #4]
    6734:	697a      	ldr	r2, [r7, #20]
    6736:	0a12      	lsrs	r2, r2, #8
    6738:	b2d2      	uxtb	r2, r2
    673a:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    673c:	687b      	ldr	r3, [r7, #4]
    673e:	68db      	ldr	r3, [r3, #12]
    6740:	1c5a      	adds	r2, r3, #1
    6742:	687b      	ldr	r3, [r7, #4]
    6744:	60da      	str	r2, [r3, #12]

	return true;
    6746:	2301      	movs	r3, #1
}
    6748:	4618      	mov	r0, r3
    674a:	3718      	adds	r7, #24
    674c:	46bd      	mov	sp, r7
    674e:	bd80      	pop	{r7, pc}
    6750:	00005c55 	.word	0x00005c55

00006754 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    6754:	b580      	push	{r7, lr}
    6756:	b086      	sub	sp, #24
    6758:	af00      	add	r7, sp, #0
    675a:	60f8      	str	r0, [r7, #12]
    675c:	60b9      	str	r1, [r7, #8]
    675e:	607a      	str	r2, [r7, #4]
    6760:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    6762:	68bb      	ldr	r3, [r7, #8]
    6764:	f003 0301 	and.w	r3, r3, #1
    6768:	2b00      	cmp	r3, #0
    676a:	d028      	beq.n	67be <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    676c:	687b      	ldr	r3, [r7, #4]
    676e:	681b      	ldr	r3, [r3, #0]
    6770:	2b00      	cmp	r3, #0
    6772:	d018      	beq.n	67a6 <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    6774:	687b      	ldr	r3, [r7, #4]
    6776:	681b      	ldr	r3, [r3, #0]
    6778:	1c59      	adds	r1, r3, #1
    677a:	687a      	ldr	r2, [r7, #4]
    677c:	6011      	str	r1, [r2, #0]
    677e:	781b      	ldrb	r3, [r3, #0]
    6780:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    6782:	687b      	ldr	r3, [r7, #4]
    6784:	7c1b      	ldrb	r3, [r3, #16]
    6786:	2b01      	cmp	r3, #1
    6788:	d90f      	bls.n	67aa <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    678a:	687b      	ldr	r3, [r7, #4]
    678c:	681b      	ldr	r3, [r3, #0]
    678e:	781b      	ldrb	r3, [r3, #0]
    6790:	021b      	lsls	r3, r3, #8
    6792:	461a      	mov	r2, r3
    6794:	697b      	ldr	r3, [r7, #20]
    6796:	4313      	orrs	r3, r2
    6798:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    679a:	687b      	ldr	r3, [r7, #4]
    679c:	681b      	ldr	r3, [r3, #0]
    679e:	1c5a      	adds	r2, r3, #1
    67a0:	687b      	ldr	r3, [r7, #4]
    67a2:	601a      	str	r2, [r3, #0]
    67a4:	e001      	b.n	67aa <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    67a6:	887b      	ldrh	r3, [r7, #2]
    67a8:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    67aa:	687b      	ldr	r3, [r7, #4]
    67ac:	689b      	ldr	r3, [r3, #8]
    67ae:	1c5a      	adds	r2, r3, #1
    67b0:	687b      	ldr	r3, [r7, #4]
    67b2:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    67b4:	6979      	ldr	r1, [r7, #20]
    67b6:	68f8      	ldr	r0, [r7, #12]
    67b8:	4b03      	ldr	r3, [pc, #12]	; (67c8 <_spi_tx_check_and_send+0x74>)
    67ba:	4798      	blx	r3
    67bc:	e000      	b.n	67c0 <_spi_tx_check_and_send+0x6c>
		return;
    67be:	bf00      	nop
}
    67c0:	3718      	adds	r7, #24
    67c2:	46bd      	mov	sp, r7
    67c4:	bd80      	pop	{r7, pc}
    67c6:	bf00      	nop
    67c8:	00005c39 	.word	0x00005c39

000067cc <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    67cc:	b580      	push	{r7, lr}
    67ce:	b082      	sub	sp, #8
    67d0:	af00      	add	r7, sp, #0
    67d2:	6078      	str	r0, [r7, #4]
    67d4:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    67d6:	687b      	ldr	r3, [r7, #4]
    67d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
    67dc:	2b00      	cmp	r3, #0
    67de:	d00b      	beq.n	67f8 <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    67e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    67e4:	6838      	ldr	r0, [r7, #0]
    67e6:	4b07      	ldr	r3, [pc, #28]	; (6804 <_spi_err_check+0x38>)
    67e8:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    67ea:	2180      	movs	r1, #128	; 0x80
    67ec:	6838      	ldr	r0, [r7, #0]
    67ee:	4b06      	ldr	r3, [pc, #24]	; (6808 <_spi_err_check+0x3c>)
    67f0:	4798      	blx	r3
		return ERR_OVERFLOW;
    67f2:	f06f 0312 	mvn.w	r3, #18
    67f6:	e000      	b.n	67fa <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    67f8:	2300      	movs	r3, #0
}
    67fa:	4618      	mov	r0, r3
    67fc:	3708      	adds	r7, #8
    67fe:	46bd      	mov	sp, r7
    6800:	bd80      	pop	{r7, pc}
    6802:	bf00      	nop
    6804:	00005c8d 	.word	0x00005c8d
    6808:	00005881 	.word	0x00005881

0000680c <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    680c:	b590      	push	{r4, r7, lr}
    680e:	b08b      	sub	sp, #44	; 0x2c
    6810:	af00      	add	r7, sp, #0
    6812:	6078      	str	r0, [r7, #4]
    6814:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    6816:	687b      	ldr	r3, [r7, #4]
    6818:	681b      	ldr	r3, [r3, #0]
    681a:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    681c:	2300      	movs	r3, #0
    681e:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    6820:	683b      	ldr	r3, [r7, #0]
    6822:	681b      	ldr	r3, [r3, #0]
    6824:	60bb      	str	r3, [r7, #8]
    6826:	683b      	ldr	r3, [r7, #0]
    6828:	685b      	ldr	r3, [r3, #4]
    682a:	60fb      	str	r3, [r7, #12]
    682c:	2300      	movs	r3, #0
    682e:	613b      	str	r3, [r7, #16]
    6830:	2300      	movs	r3, #0
    6832:	617b      	str	r3, [r7, #20]
    6834:	687b      	ldr	r3, [r7, #4]
    6836:	791b      	ldrb	r3, [r3, #4]
    6838:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    683a:	687b      	ldr	r3, [r7, #4]
    683c:	2b00      	cmp	r3, #0
    683e:	d004      	beq.n	684a <_spi_m_sync_trans+0x3e>
    6840:	6a3b      	ldr	r3, [r7, #32]
    6842:	2b00      	cmp	r3, #0
    6844:	d001      	beq.n	684a <_spi_m_sync_trans+0x3e>
    6846:	2301      	movs	r3, #1
    6848:	e000      	b.n	684c <_spi_m_sync_trans+0x40>
    684a:	2300      	movs	r3, #0
    684c:	f003 0301 	and.w	r3, r3, #1
    6850:	b2db      	uxtb	r3, r3
    6852:	f640 22a3 	movw	r2, #2723	; 0xaa3
    6856:	492b      	ldr	r1, [pc, #172]	; (6904 <_spi_m_sync_trans+0xf8>)
    6858:	4618      	mov	r0, r3
    685a:	4b2b      	ldr	r3, [pc, #172]	; (6908 <_spi_m_sync_trans+0xfc>)
    685c:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    685e:	2107      	movs	r1, #7
    6860:	6a38      	ldr	r0, [r7, #32]
    6862:	4b2a      	ldr	r3, [pc, #168]	; (690c <_spi_m_sync_trans+0x100>)
    6864:	4798      	blx	r3
    6866:	4603      	mov	r3, r0
    6868:	2b00      	cmp	r3, #0
    686a:	d002      	beq.n	6872 <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    686c:	f06f 0303 	mvn.w	r3, #3
    6870:	e043      	b.n	68fa <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    6872:	6a38      	ldr	r0, [r7, #32]
    6874:	4b26      	ldr	r3, [pc, #152]	; (6910 <_spi_m_sync_trans+0x104>)
    6876:	4798      	blx	r3
    6878:	4603      	mov	r3, r0
    687a:	f083 0301 	eor.w	r3, r3, #1
    687e:	b2db      	uxtb	r3, r3
    6880:	2b00      	cmp	r3, #0
    6882:	d002      	beq.n	688a <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    6884:	f06f 0313 	mvn.w	r3, #19
    6888:	e037      	b.n	68fa <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    688a:	6a38      	ldr	r0, [r7, #32]
    688c:	4b21      	ldr	r3, [pc, #132]	; (6914 <_spi_m_sync_trans+0x108>)
    688e:	4798      	blx	r3
    6890:	4603      	mov	r3, r0
    6892:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    6894:	f107 0308 	add.w	r3, r7, #8
    6898:	461a      	mov	r2, r3
    689a:	69f9      	ldr	r1, [r7, #28]
    689c:	6a38      	ldr	r0, [r7, #32]
    689e:	4b1e      	ldr	r3, [pc, #120]	; (6918 <_spi_m_sync_trans+0x10c>)
    68a0:	4798      	blx	r3
    68a2:	4603      	mov	r3, r0
    68a4:	f083 0301 	eor.w	r3, r3, #1
    68a8:	b2db      	uxtb	r3, r3
    68aa:	2b00      	cmp	r3, #0
    68ac:	d00b      	beq.n	68c6 <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    68ae:	697a      	ldr	r2, [r7, #20]
    68b0:	693b      	ldr	r3, [r7, #16]
    68b2:	429a      	cmp	r2, r3
    68b4:	d307      	bcc.n	68c6 <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    68b6:	687b      	ldr	r3, [r7, #4]
    68b8:	88db      	ldrh	r3, [r3, #6]
    68ba:	f107 0208 	add.w	r2, r7, #8
    68be:	69f9      	ldr	r1, [r7, #28]
    68c0:	6a38      	ldr	r0, [r7, #32]
    68c2:	4c16      	ldr	r4, [pc, #88]	; (691c <_spi_m_sync_trans+0x110>)
    68c4:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    68c6:	6a39      	ldr	r1, [r7, #32]
    68c8:	69f8      	ldr	r0, [r7, #28]
    68ca:	4b15      	ldr	r3, [pc, #84]	; (6920 <_spi_m_sync_trans+0x114>)
    68cc:	4798      	blx	r3
    68ce:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    68d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    68d2:	2b00      	cmp	r3, #0
    68d4:	db0c      	blt.n	68f0 <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    68d6:	693a      	ldr	r2, [r7, #16]
    68d8:	683b      	ldr	r3, [r7, #0]
    68da:	689b      	ldr	r3, [r3, #8]
    68dc:	429a      	cmp	r2, r3
    68de:	d3d4      	bcc.n	688a <_spi_m_sync_trans+0x7e>
    68e0:	697a      	ldr	r2, [r7, #20]
    68e2:	683b      	ldr	r3, [r7, #0]
    68e4:	689b      	ldr	r3, [r3, #8]
    68e6:	429a      	cmp	r2, r3
    68e8:	d3cf      	bcc.n	688a <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    68ea:	693b      	ldr	r3, [r7, #16]
    68ec:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    68ee:	e000      	b.n	68f2 <_spi_m_sync_trans+0xe6>
			break;
    68f0:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    68f2:	6a38      	ldr	r0, [r7, #32]
    68f4:	4b0b      	ldr	r3, [pc, #44]	; (6924 <_spi_m_sync_trans+0x118>)
    68f6:	4798      	blx	r3

	return rc;
    68f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    68fa:	4618      	mov	r0, r3
    68fc:	372c      	adds	r7, #44	; 0x2c
    68fe:	46bd      	mov	sp, r7
    6900:	bd90      	pop	{r4, r7, pc}
    6902:	bf00      	nop
    6904:	000133a8 	.word	0x000133a8
    6908:	00002d4d 	.word	0x00002d4d
    690c:	000057c9 	.word	0x000057c9
    6910:	0000594d 	.word	0x0000594d
    6914:	00005867 	.word	0x00005867
    6918:	000066e9 	.word	0x000066e9
    691c:	00006755 	.word	0x00006755
    6920:	000067cd 	.word	0x000067cd
    6924:	000066b9 	.word	0x000066b9

00006928 <__NVIC_EnableIRQ>:
{
    6928:	b480      	push	{r7}
    692a:	b083      	sub	sp, #12
    692c:	af00      	add	r7, sp, #0
    692e:	4603      	mov	r3, r0
    6930:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6932:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6936:	2b00      	cmp	r3, #0
    6938:	db0b      	blt.n	6952 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    693a:	4909      	ldr	r1, [pc, #36]	; (6960 <__NVIC_EnableIRQ+0x38>)
    693c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6940:	095b      	lsrs	r3, r3, #5
    6942:	88fa      	ldrh	r2, [r7, #6]
    6944:	f002 021f 	and.w	r2, r2, #31
    6948:	2001      	movs	r0, #1
    694a:	fa00 f202 	lsl.w	r2, r0, r2
    694e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6952:	bf00      	nop
    6954:	370c      	adds	r7, #12
    6956:	46bd      	mov	sp, r7
    6958:	f85d 7b04 	ldr.w	r7, [sp], #4
    695c:	4770      	bx	lr
    695e:	bf00      	nop
    6960:	e000e100 	.word	0xe000e100

00006964 <__NVIC_DisableIRQ>:
{
    6964:	b480      	push	{r7}
    6966:	b083      	sub	sp, #12
    6968:	af00      	add	r7, sp, #0
    696a:	4603      	mov	r3, r0
    696c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    696e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6972:	2b00      	cmp	r3, #0
    6974:	db10      	blt.n	6998 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6976:	490b      	ldr	r1, [pc, #44]	; (69a4 <__NVIC_DisableIRQ+0x40>)
    6978:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    697c:	095b      	lsrs	r3, r3, #5
    697e:	88fa      	ldrh	r2, [r7, #6]
    6980:	f002 021f 	and.w	r2, r2, #31
    6984:	2001      	movs	r0, #1
    6986:	fa00 f202 	lsl.w	r2, r0, r2
    698a:	3320      	adds	r3, #32
    698c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    6990:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6994:	f3bf 8f6f 	isb	sy
}
    6998:	bf00      	nop
    699a:	370c      	adds	r7, #12
    699c:	46bd      	mov	sp, r7
    699e:	f85d 7b04 	ldr.w	r7, [sp], #4
    69a2:	4770      	bx	lr
    69a4:	e000e100 	.word	0xe000e100

000069a8 <__NVIC_ClearPendingIRQ>:
{
    69a8:	b480      	push	{r7}
    69aa:	b083      	sub	sp, #12
    69ac:	af00      	add	r7, sp, #0
    69ae:	4603      	mov	r3, r0
    69b0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    69b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    69b6:	2b00      	cmp	r3, #0
    69b8:	db0c      	blt.n	69d4 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    69ba:	4909      	ldr	r1, [pc, #36]	; (69e0 <__NVIC_ClearPendingIRQ+0x38>)
    69bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    69c0:	095b      	lsrs	r3, r3, #5
    69c2:	88fa      	ldrh	r2, [r7, #6]
    69c4:	f002 021f 	and.w	r2, r2, #31
    69c8:	2001      	movs	r0, #1
    69ca:	fa00 f202 	lsl.w	r2, r0, r2
    69ce:	3360      	adds	r3, #96	; 0x60
    69d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    69d4:	bf00      	nop
    69d6:	370c      	adds	r7, #12
    69d8:	46bd      	mov	sp, r7
    69da:	f85d 7b04 	ldr.w	r7, [sp], #4
    69de:	4770      	bx	lr
    69e0:	e000e100 	.word	0xe000e100

000069e4 <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    69e4:	b480      	push	{r7}
    69e6:	b083      	sub	sp, #12
    69e8:	af00      	add	r7, sp, #0
    69ea:	6078      	str	r0, [r7, #4]
    69ec:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    69ee:	bf00      	nop
    69f0:	687b      	ldr	r3, [r7, #4]
    69f2:	689a      	ldr	r2, [r3, #8]
    69f4:	683b      	ldr	r3, [r7, #0]
    69f6:	4013      	ands	r3, r2
    69f8:	2b00      	cmp	r3, #0
    69fa:	d1f9      	bne.n	69f0 <hri_tcc_wait_for_sync+0xc>
	};
}
    69fc:	bf00      	nop
    69fe:	370c      	adds	r7, #12
    6a00:	46bd      	mov	sp, r7
    6a02:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a06:	4770      	bx	lr

00006a08 <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    6a08:	b480      	push	{r7}
    6a0a:	b083      	sub	sp, #12
    6a0c:	af00      	add	r7, sp, #0
    6a0e:	6078      	str	r0, [r7, #4]
    6a10:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    6a12:	687b      	ldr	r3, [r7, #4]
    6a14:	689a      	ldr	r2, [r3, #8]
    6a16:	683b      	ldr	r3, [r7, #0]
    6a18:	4013      	ands	r3, r2
    6a1a:	2b00      	cmp	r3, #0
    6a1c:	bf14      	ite	ne
    6a1e:	2301      	movne	r3, #1
    6a20:	2300      	moveq	r3, #0
    6a22:	b2db      	uxtb	r3, r3
}
    6a24:	4618      	mov	r0, r3
    6a26:	370c      	adds	r7, #12
    6a28:	46bd      	mov	sp, r7
    6a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a2e:	4770      	bx	lr

00006a30 <hri_tcc_get_interrupt_OVF_bit>:
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
    6a30:	b480      	push	{r7}
    6a32:	b083      	sub	sp, #12
    6a34:	af00      	add	r7, sp, #0
    6a36:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    6a38:	687b      	ldr	r3, [r7, #4]
    6a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6a3c:	f003 0301 	and.w	r3, r3, #1
    6a40:	2b00      	cmp	r3, #0
    6a42:	bf14      	ite	ne
    6a44:	2301      	movne	r3, #1
    6a46:	2300      	moveq	r3, #0
    6a48:	b2db      	uxtb	r3, r3
}
    6a4a:	4618      	mov	r0, r3
    6a4c:	370c      	adds	r7, #12
    6a4e:	46bd      	mov	sp, r7
    6a50:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a54:	4770      	bx	lr

00006a56 <hri_tcc_clear_interrupt_OVF_bit>:

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
    6a56:	b480      	push	{r7}
    6a58:	b083      	sub	sp, #12
    6a5a:	af00      	add	r7, sp, #0
    6a5c:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    6a5e:	687b      	ldr	r3, [r7, #4]
    6a60:	2201      	movs	r2, #1
    6a62:	62da      	str	r2, [r3, #44]	; 0x2c
}
    6a64:	bf00      	nop
    6a66:	370c      	adds	r7, #12
    6a68:	46bd      	mov	sp, r7
    6a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a6e:	4770      	bx	lr

00006a70 <hri_tcc_set_CTRLB_reg>:
{
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_CMD(mask);
}

static inline void hri_tcc_set_CTRLB_reg(const void *const hw, hri_tcc_ctrlbset_reg_t mask)
{
    6a70:	b480      	push	{r7}
    6a72:	b083      	sub	sp, #12
    6a74:	af00      	add	r7, sp, #0
    6a76:	6078      	str	r0, [r7, #4]
    6a78:	460b      	mov	r3, r1
    6a7a:	70fb      	strb	r3, [r7, #3]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    6a7c:	687b      	ldr	r3, [r7, #4]
    6a7e:	78fa      	ldrb	r2, [r7, #3]
    6a80:	715a      	strb	r2, [r3, #5]
}
    6a82:	bf00      	nop
    6a84:	370c      	adds	r7, #12
    6a86:	46bd      	mov	sp, r7
    6a88:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a8c:	4770      	bx	lr

00006a8e <hri_tcc_set_INTEN_OVF_bit>:
{
	((Tcc *)hw)->CTRLBCLR.reg = mask;
}

static inline void hri_tcc_set_INTEN_OVF_bit(const void *const hw)
{
    6a8e:	b480      	push	{r7}
    6a90:	b083      	sub	sp, #12
    6a92:	af00      	add	r7, sp, #0
    6a94:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    6a96:	687b      	ldr	r3, [r7, #4]
    6a98:	2201      	movs	r2, #1
    6a9a:	629a      	str	r2, [r3, #40]	; 0x28
}
    6a9c:	bf00      	nop
    6a9e:	370c      	adds	r7, #12
    6aa0:	46bd      	mov	sp, r7
    6aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
    6aa6:	4770      	bx	lr

00006aa8 <hri_tcc_set_CTRLA_SWRST_bit>:
{
	return ((Tcc *)hw)->SYNCBUSY.reg;
}

static inline void hri_tcc_set_CTRLA_SWRST_bit(const void *const hw)
{
    6aa8:	b580      	push	{r7, lr}
    6aaa:	b082      	sub	sp, #8
    6aac:	af00      	add	r7, sp, #0
    6aae:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    6ab0:	687b      	ldr	r3, [r7, #4]
    6ab2:	681b      	ldr	r3, [r3, #0]
    6ab4:	f043 0201 	orr.w	r2, r3, #1
    6ab8:	687b      	ldr	r3, [r7, #4]
    6aba:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    6abc:	2101      	movs	r1, #1
    6abe:	6878      	ldr	r0, [r7, #4]
    6ac0:	4b02      	ldr	r3, [pc, #8]	; (6acc <hri_tcc_set_CTRLA_SWRST_bit+0x24>)
    6ac2:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    6ac4:	bf00      	nop
    6ac6:	3708      	adds	r7, #8
    6ac8:	46bd      	mov	sp, r7
    6aca:	bd80      	pop	{r7, pc}
    6acc:	000069e5 	.word	0x000069e5

00006ad0 <hri_tcc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_SWRST) >> TCC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    6ad0:	b580      	push	{r7, lr}
    6ad2:	b082      	sub	sp, #8
    6ad4:	af00      	add	r7, sp, #0
    6ad6:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    6ad8:	687b      	ldr	r3, [r7, #4]
    6ada:	681b      	ldr	r3, [r3, #0]
    6adc:	f043 0202 	orr.w	r2, r3, #2
    6ae0:	687b      	ldr	r3, [r7, #4]
    6ae2:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    6ae4:	2103      	movs	r1, #3
    6ae6:	6878      	ldr	r0, [r7, #4]
    6ae8:	4b02      	ldr	r3, [pc, #8]	; (6af4 <hri_tcc_set_CTRLA_ENABLE_bit+0x24>)
    6aea:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    6aec:	bf00      	nop
    6aee:	3708      	adds	r7, #8
    6af0:	46bd      	mov	sp, r7
    6af2:	bd80      	pop	{r7, pc}
    6af4:	000069e5 	.word	0x000069e5

00006af8 <hri_tcc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tcc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    6af8:	b580      	push	{r7, lr}
    6afa:	b084      	sub	sp, #16
    6afc:	af00      	add	r7, sp, #0
    6afe:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    6b00:	2103      	movs	r1, #3
    6b02:	6878      	ldr	r0, [r7, #4]
    6b04:	4b09      	ldr	r3, [pc, #36]	; (6b2c <hri_tcc_get_CTRLA_ENABLE_bit+0x34>)
    6b06:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    6b08:	687b      	ldr	r3, [r7, #4]
    6b0a:	681b      	ldr	r3, [r3, #0]
    6b0c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    6b0e:	68fb      	ldr	r3, [r7, #12]
    6b10:	085b      	lsrs	r3, r3, #1
    6b12:	f003 0301 	and.w	r3, r3, #1
    6b16:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    6b18:	68fb      	ldr	r3, [r7, #12]
    6b1a:	2b00      	cmp	r3, #0
    6b1c:	bf14      	ite	ne
    6b1e:	2301      	movne	r3, #1
    6b20:	2300      	moveq	r3, #0
    6b22:	b2db      	uxtb	r3, r3
}
    6b24:	4618      	mov	r0, r3
    6b26:	3710      	adds	r7, #16
    6b28:	46bd      	mov	sp, r7
    6b2a:	bd80      	pop	{r7, pc}
    6b2c:	000069e5 	.word	0x000069e5

00006b30 <hri_tcc_clear_CTRLA_ENABLE_bit>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    6b30:	b580      	push	{r7, lr}
    6b32:	b082      	sub	sp, #8
    6b34:	af00      	add	r7, sp, #0
    6b36:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    6b38:	687b      	ldr	r3, [r7, #4]
    6b3a:	681b      	ldr	r3, [r3, #0]
    6b3c:	f023 0202 	bic.w	r2, r3, #2
    6b40:	687b      	ldr	r3, [r7, #4]
    6b42:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    6b44:	2103      	movs	r1, #3
    6b46:	6878      	ldr	r0, [r7, #4]
    6b48:	4b02      	ldr	r3, [pc, #8]	; (6b54 <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    6b4a:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    6b4c:	bf00      	nop
    6b4e:	3708      	adds	r7, #8
    6b50:	46bd      	mov	sp, r7
    6b52:	bd80      	pop	{r7, pc}
    6b54:	000069e5 	.word	0x000069e5

00006b58 <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    6b58:	b580      	push	{r7, lr}
    6b5a:	b084      	sub	sp, #16
    6b5c:	af00      	add	r7, sp, #0
    6b5e:	6078      	str	r0, [r7, #4]
    6b60:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    6b62:	2103      	movs	r1, #3
    6b64:	6878      	ldr	r0, [r7, #4]
    6b66:	4b07      	ldr	r3, [pc, #28]	; (6b84 <hri_tcc_get_CTRLA_reg+0x2c>)
    6b68:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    6b6a:	687b      	ldr	r3, [r7, #4]
    6b6c:	681b      	ldr	r3, [r3, #0]
    6b6e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    6b70:	68fa      	ldr	r2, [r7, #12]
    6b72:	683b      	ldr	r3, [r7, #0]
    6b74:	4013      	ands	r3, r2
    6b76:	60fb      	str	r3, [r7, #12]
	return tmp;
    6b78:	68fb      	ldr	r3, [r7, #12]
}
    6b7a:	4618      	mov	r0, r3
    6b7c:	3710      	adds	r7, #16
    6b7e:	46bd      	mov	sp, r7
    6b80:	bd80      	pop	{r7, pc}
    6b82:	bf00      	nop
    6b84:	000069e5 	.word	0x000069e5

00006b88 <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    6b88:	b580      	push	{r7, lr}
    6b8a:	b082      	sub	sp, #8
    6b8c:	af00      	add	r7, sp, #0
    6b8e:	6078      	str	r0, [r7, #4]
    6b90:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    6b92:	687b      	ldr	r3, [r7, #4]
    6b94:	683a      	ldr	r2, [r7, #0]
    6b96:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    6b98:	2103      	movs	r1, #3
    6b9a:	6878      	ldr	r0, [r7, #4]
    6b9c:	4b02      	ldr	r3, [pc, #8]	; (6ba8 <hri_tcc_write_CTRLA_reg+0x20>)
    6b9e:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    6ba0:	bf00      	nop
    6ba2:	3708      	adds	r7, #8
    6ba4:	46bd      	mov	sp, r7
    6ba6:	bd80      	pop	{r7, pc}
    6ba8:	000069e5 	.word	0x000069e5

00006bac <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    6bac:	b480      	push	{r7}
    6bae:	b083      	sub	sp, #12
    6bb0:	af00      	add	r7, sp, #0
    6bb2:	6078      	str	r0, [r7, #4]
    6bb4:	460b      	mov	r3, r1
    6bb6:	70fb      	strb	r3, [r7, #3]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    6bb8:	687b      	ldr	r3, [r7, #4]
    6bba:	78fa      	ldrb	r2, [r7, #3]
    6bbc:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    6bbe:	bf00      	nop
    6bc0:	370c      	adds	r7, #12
    6bc2:	46bd      	mov	sp, r7
    6bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
    6bc8:	4770      	bx	lr

00006bca <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    6bca:	b480      	push	{r7}
    6bcc:	b083      	sub	sp, #12
    6bce:	af00      	add	r7, sp, #0
    6bd0:	6078      	str	r0, [r7, #4]
    6bd2:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    6bd4:	687b      	ldr	r3, [r7, #4]
    6bd6:	683a      	ldr	r2, [r7, #0]
    6bd8:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    6bda:	bf00      	nop
    6bdc:	370c      	adds	r7, #12
    6bde:	46bd      	mov	sp, r7
    6be0:	f85d 7b04 	ldr.w	r7, [sp], #4
    6be4:	4770      	bx	lr
	...

00006be8 <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    6be8:	b580      	push	{r7, lr}
    6bea:	b082      	sub	sp, #8
    6bec:	af00      	add	r7, sp, #0
    6bee:	6078      	str	r0, [r7, #4]
    6bf0:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    6bf2:	687b      	ldr	r3, [r7, #4]
    6bf4:	683a      	ldr	r2, [r7, #0]
    6bf6:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    6bf8:	2180      	movs	r1, #128	; 0x80
    6bfa:	6878      	ldr	r0, [r7, #4]
    6bfc:	4b02      	ldr	r3, [pc, #8]	; (6c08 <hri_tcc_write_PER_reg+0x20>)
    6bfe:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    6c00:	bf00      	nop
    6c02:	3708      	adds	r7, #8
    6c04:	46bd      	mov	sp, r7
    6c06:	bd80      	pop	{r7, pc}
    6c08:	000069e5 	.word	0x000069e5

00006c0c <hri_tcc_read_PER_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_per_reg_t hri_tcc_read_PER_reg(const void *const hw)
{
    6c0c:	b580      	push	{r7, lr}
    6c0e:	b082      	sub	sp, #8
    6c10:	af00      	add	r7, sp, #0
    6c12:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    6c14:	2180      	movs	r1, #128	; 0x80
    6c16:	6878      	ldr	r0, [r7, #4]
    6c18:	4b03      	ldr	r3, [pc, #12]	; (6c28 <hri_tcc_read_PER_reg+0x1c>)
    6c1a:	4798      	blx	r3
	return ((Tcc *)hw)->PER.reg;
    6c1c:	687b      	ldr	r3, [r7, #4]
    6c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
    6c20:	4618      	mov	r0, r3
    6c22:	3708      	adds	r7, #8
    6c24:	46bd      	mov	sp, r7
    6c26:	bd80      	pop	{r7, pc}
    6c28:	000069e5 	.word	0x000069e5

00006c2c <_tcc_init_irq_param>:

/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
    6c2c:	b480      	push	{r7}
    6c2e:	b083      	sub	sp, #12
    6c30:	af00      	add	r7, sp, #0
    6c32:	6078      	str	r0, [r7, #4]
    6c34:	6039      	str	r1, [r7, #0]
	if (hw == TCC0) {
    6c36:	687b      	ldr	r3, [r7, #4]
    6c38:	4a09      	ldr	r2, [pc, #36]	; (6c60 <_tcc_init_irq_param+0x34>)
    6c3a:	4293      	cmp	r3, r2
    6c3c:	d102      	bne.n	6c44 <_tcc_init_irq_param+0x18>
		_tcc0_dev = (struct _timer_device *)dev;
    6c3e:	4a09      	ldr	r2, [pc, #36]	; (6c64 <_tcc_init_irq_param+0x38>)
    6c40:	683b      	ldr	r3, [r7, #0]
    6c42:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC1) {
    6c44:	687b      	ldr	r3, [r7, #4]
    6c46:	4a08      	ldr	r2, [pc, #32]	; (6c68 <_tcc_init_irq_param+0x3c>)
    6c48:	4293      	cmp	r3, r2
    6c4a:	d102      	bne.n	6c52 <_tcc_init_irq_param+0x26>
		_tcc1_dev = (struct _timer_device *)dev;
    6c4c:	4a07      	ldr	r2, [pc, #28]	; (6c6c <_tcc_init_irq_param+0x40>)
    6c4e:	683b      	ldr	r3, [r7, #0]
    6c50:	6013      	str	r3, [r2, #0]
	}
}
    6c52:	bf00      	nop
    6c54:	370c      	adds	r7, #12
    6c56:	46bd      	mov	sp, r7
    6c58:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c5c:	4770      	bx	lr
    6c5e:	bf00      	nop
    6c60:	41016000 	.word	0x41016000
    6c64:	20000cec 	.word	0x20000cec
    6c68:	41018000 	.word	0x41018000
    6c6c:	20000cf0 	.word	0x20000cf0

00006c70 <_tcc_timer_init>:
/**
 * \brief Initialize TCC
 */
int32_t _tcc_timer_init(struct _timer_device *const device, void *const hw)
{
    6c70:	b580      	push	{r7, lr}
    6c72:	b084      	sub	sp, #16
    6c74:	af00      	add	r7, sp, #0
    6c76:	6078      	str	r0, [r7, #4]
    6c78:	6039      	str	r1, [r7, #0]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    6c7a:	6838      	ldr	r0, [r7, #0]
    6c7c:	4b33      	ldr	r3, [pc, #204]	; (6d4c <_tcc_timer_init+0xdc>)
    6c7e:	4798      	blx	r3
    6c80:	60f8      	str	r0, [r7, #12]
	if (cfg == NULL) {
    6c82:	68fb      	ldr	r3, [r7, #12]
    6c84:	2b00      	cmp	r3, #0
    6c86:	d102      	bne.n	6c8e <_tcc_timer_init+0x1e>
		return ERR_NOT_FOUND;
    6c88:	f06f 0309 	mvn.w	r3, #9
    6c8c:	e05a      	b.n	6d44 <_tcc_timer_init+0xd4>
	}

	device->hw = hw;
    6c8e:	687b      	ldr	r3, [r7, #4]
    6c90:	683a      	ldr	r2, [r7, #0]
    6c92:	60da      	str	r2, [r3, #12]

	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    6c94:	2101      	movs	r1, #1
    6c96:	6838      	ldr	r0, [r7, #0]
    6c98:	4b2d      	ldr	r3, [pc, #180]	; (6d50 <_tcc_timer_init+0xe0>)
    6c9a:	4798      	blx	r3
    6c9c:	4603      	mov	r3, r0
    6c9e:	f083 0301 	eor.w	r3, r3, #1
    6ca2:	b2db      	uxtb	r3, r3
    6ca4:	2b00      	cmp	r3, #0
    6ca6:	d011      	beq.n	6ccc <_tcc_timer_init+0x5c>
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    6ca8:	2102      	movs	r1, #2
    6caa:	6838      	ldr	r0, [r7, #0]
    6cac:	4b29      	ldr	r3, [pc, #164]	; (6d54 <_tcc_timer_init+0xe4>)
    6cae:	4798      	blx	r3
    6cb0:	4603      	mov	r3, r0
    6cb2:	2b00      	cmp	r3, #0
    6cb4:	d006      	beq.n	6cc4 <_tcc_timer_init+0x54>
			hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    6cb6:	6838      	ldr	r0, [r7, #0]
    6cb8:	4b27      	ldr	r3, [pc, #156]	; (6d58 <_tcc_timer_init+0xe8>)
    6cba:	4798      	blx	r3
			hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    6cbc:	2102      	movs	r1, #2
    6cbe:	6838      	ldr	r0, [r7, #0]
    6cc0:	4b26      	ldr	r3, [pc, #152]	; (6d5c <_tcc_timer_init+0xec>)
    6cc2:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(hw, TCC_CTRLA_SWRST);
    6cc4:	2101      	movs	r1, #1
    6cc6:	6838      	ldr	r0, [r7, #0]
    6cc8:	4b25      	ldr	r3, [pc, #148]	; (6d60 <_tcc_timer_init+0xf0>)
    6cca:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    6ccc:	2101      	movs	r1, #1
    6cce:	6838      	ldr	r0, [r7, #0]
    6cd0:	4b22      	ldr	r3, [pc, #136]	; (6d5c <_tcc_timer_init+0xec>)
    6cd2:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    6cd4:	68fb      	ldr	r3, [r7, #12]
    6cd6:	689b      	ldr	r3, [r3, #8]
    6cd8:	4619      	mov	r1, r3
    6cda:	6838      	ldr	r0, [r7, #0]
    6cdc:	4b20      	ldr	r3, [pc, #128]	; (6d60 <_tcc_timer_init+0xf0>)
    6cde:	4798      	blx	r3
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    6ce0:	68fb      	ldr	r3, [r7, #12]
    6ce2:	7b1b      	ldrb	r3, [r3, #12]
    6ce4:	4619      	mov	r1, r3
    6ce6:	6838      	ldr	r0, [r7, #0]
    6ce8:	4b1e      	ldr	r3, [pc, #120]	; (6d64 <_tcc_timer_init+0xf4>)
    6cea:	4798      	blx	r3
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    6cec:	68fb      	ldr	r3, [r7, #12]
    6cee:	7b5b      	ldrb	r3, [r3, #13]
    6cf0:	4619      	mov	r1, r3
    6cf2:	6838      	ldr	r0, [r7, #0]
    6cf4:	4b1c      	ldr	r3, [pc, #112]	; (6d68 <_tcc_timer_init+0xf8>)
    6cf6:	4798      	blx	r3
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    6cf8:	68fb      	ldr	r3, [r7, #12]
    6cfa:	691b      	ldr	r3, [r3, #16]
    6cfc:	4619      	mov	r1, r3
    6cfe:	6838      	ldr	r0, [r7, #0]
    6d00:	4b1a      	ldr	r3, [pc, #104]	; (6d6c <_tcc_timer_init+0xfc>)
    6d02:	4798      	blx	r3
	hri_tcc_write_PER_reg(hw, cfg->per);
    6d04:	68fb      	ldr	r3, [r7, #12]
    6d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6d08:	4619      	mov	r1, r3
    6d0a:	6838      	ldr	r0, [r7, #0]
    6d0c:	4b18      	ldr	r3, [pc, #96]	; (6d70 <_tcc_timer_init+0x100>)
    6d0e:	4798      	blx	r3
	hri_tcc_set_INTEN_OVF_bit(hw);
    6d10:	6838      	ldr	r0, [r7, #0]
    6d12:	4b18      	ldr	r3, [pc, #96]	; (6d74 <_tcc_timer_init+0x104>)
    6d14:	4798      	blx	r3

	_tcc_init_irq_param(hw, (void *)device);
    6d16:	6879      	ldr	r1, [r7, #4]
    6d18:	6838      	ldr	r0, [r7, #0]
    6d1a:	4b17      	ldr	r3, [pc, #92]	; (6d78 <_tcc_timer_init+0x108>)
    6d1c:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    6d1e:	68fb      	ldr	r3, [r7, #12]
    6d20:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    6d24:	4618      	mov	r0, r3
    6d26:	4b15      	ldr	r3, [pc, #84]	; (6d7c <_tcc_timer_init+0x10c>)
    6d28:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    6d2a:	68fb      	ldr	r3, [r7, #12]
    6d2c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    6d30:	4618      	mov	r0, r3
    6d32:	4b13      	ldr	r3, [pc, #76]	; (6d80 <_tcc_timer_init+0x110>)
    6d34:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    6d36:	68fb      	ldr	r3, [r7, #12]
    6d38:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    6d3c:	4618      	mov	r0, r3
    6d3e:	4b11      	ldr	r3, [pc, #68]	; (6d84 <_tcc_timer_init+0x114>)
    6d40:	4798      	blx	r3

	return ERR_NONE;
    6d42:	2300      	movs	r3, #0
}
    6d44:	4618      	mov	r0, r3
    6d46:	3710      	adds	r7, #16
    6d48:	46bd      	mov	sp, r7
    6d4a:	bd80      	pop	{r7, pc}
    6d4c:	00006f39 	.word	0x00006f39
    6d50:	00006a09 	.word	0x00006a09
    6d54:	00006b59 	.word	0x00006b59
    6d58:	00006b31 	.word	0x00006b31
    6d5c:	000069e5 	.word	0x000069e5
    6d60:	00006b89 	.word	0x00006b89
    6d64:	00006a71 	.word	0x00006a71
    6d68:	00006bad 	.word	0x00006bad
    6d6c:	00006bcb 	.word	0x00006bcb
    6d70:	00006be9 	.word	0x00006be9
    6d74:	00006a8f 	.word	0x00006a8f
    6d78:	00006c2d 	.word	0x00006c2d
    6d7c:	00006965 	.word	0x00006965
    6d80:	000069a9 	.word	0x000069a9
    6d84:	00006929 	.word	0x00006929

00006d88 <_tcc_timer_deinit>:
/**
 * \brief De-initialize TCC
 */
void _tcc_timer_deinit(struct _timer_device *const device)
{
    6d88:	b580      	push	{r7, lr}
    6d8a:	b084      	sub	sp, #16
    6d8c:	af00      	add	r7, sp, #0
    6d8e:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    6d90:	687b      	ldr	r3, [r7, #4]
    6d92:	68db      	ldr	r3, [r3, #12]
    6d94:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    6d96:	68f8      	ldr	r0, [r7, #12]
    6d98:	4b0a      	ldr	r3, [pc, #40]	; (6dc4 <_tcc_timer_deinit+0x3c>)
    6d9a:	4798      	blx	r3
    6d9c:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    6d9e:	68bb      	ldr	r3, [r7, #8]
    6da0:	2b00      	cmp	r3, #0
    6da2:	d00b      	beq.n	6dbc <_tcc_timer_deinit+0x34>
		NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    6da4:	68bb      	ldr	r3, [r7, #8]
    6da6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    6daa:	4618      	mov	r0, r3
    6dac:	4b06      	ldr	r3, [pc, #24]	; (6dc8 <_tcc_timer_deinit+0x40>)
    6dae:	4798      	blx	r3
		hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    6db0:	68f8      	ldr	r0, [r7, #12]
    6db2:	4b06      	ldr	r3, [pc, #24]	; (6dcc <_tcc_timer_deinit+0x44>)
    6db4:	4798      	blx	r3
		hri_tcc_set_CTRLA_SWRST_bit(hw);
    6db6:	68f8      	ldr	r0, [r7, #12]
    6db8:	4b05      	ldr	r3, [pc, #20]	; (6dd0 <_tcc_timer_deinit+0x48>)
    6dba:	4798      	blx	r3
	}
}
    6dbc:	bf00      	nop
    6dbe:	3710      	adds	r7, #16
    6dc0:	46bd      	mov	sp, r7
    6dc2:	bd80      	pop	{r7, pc}
    6dc4:	00006f39 	.word	0x00006f39
    6dc8:	00006965 	.word	0x00006965
    6dcc:	00006b31 	.word	0x00006b31
    6dd0:	00006aa9 	.word	0x00006aa9

00006dd4 <_tcc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tcc_timer_start(struct _timer_device *const device)
{
    6dd4:	b580      	push	{r7, lr}
    6dd6:	b082      	sub	sp, #8
    6dd8:	af00      	add	r7, sp, #0
    6dda:	6078      	str	r0, [r7, #4]
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    6ddc:	687b      	ldr	r3, [r7, #4]
    6dde:	68db      	ldr	r3, [r3, #12]
    6de0:	4618      	mov	r0, r3
    6de2:	4b03      	ldr	r3, [pc, #12]	; (6df0 <_tcc_timer_start+0x1c>)
    6de4:	4798      	blx	r3
}
    6de6:	bf00      	nop
    6de8:	3708      	adds	r7, #8
    6dea:	46bd      	mov	sp, r7
    6dec:	bd80      	pop	{r7, pc}
    6dee:	bf00      	nop
    6df0:	00006ad1 	.word	0x00006ad1

00006df4 <_tcc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tcc_timer_stop(struct _timer_device *const device)
{
    6df4:	b580      	push	{r7, lr}
    6df6:	b082      	sub	sp, #8
    6df8:	af00      	add	r7, sp, #0
    6dfa:	6078      	str	r0, [r7, #4]
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    6dfc:	687b      	ldr	r3, [r7, #4]
    6dfe:	68db      	ldr	r3, [r3, #12]
    6e00:	4618      	mov	r0, r3
    6e02:	4b03      	ldr	r3, [pc, #12]	; (6e10 <_tcc_timer_stop+0x1c>)
    6e04:	4798      	blx	r3
}
    6e06:	bf00      	nop
    6e08:	3708      	adds	r7, #8
    6e0a:	46bd      	mov	sp, r7
    6e0c:	bd80      	pop	{r7, pc}
    6e0e:	bf00      	nop
    6e10:	00006b31 	.word	0x00006b31

00006e14 <_tcc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tcc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    6e14:	b580      	push	{r7, lr}
    6e16:	b082      	sub	sp, #8
    6e18:	af00      	add	r7, sp, #0
    6e1a:	6078      	str	r0, [r7, #4]
    6e1c:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    6e1e:	687b      	ldr	r3, [r7, #4]
    6e20:	68db      	ldr	r3, [r3, #12]
    6e22:	6839      	ldr	r1, [r7, #0]
    6e24:	4618      	mov	r0, r3
    6e26:	4b03      	ldr	r3, [pc, #12]	; (6e34 <_tcc_timer_set_period+0x20>)
    6e28:	4798      	blx	r3
}
    6e2a:	bf00      	nop
    6e2c:	3708      	adds	r7, #8
    6e2e:	46bd      	mov	sp, r7
    6e30:	bd80      	pop	{r7, pc}
    6e32:	bf00      	nop
    6e34:	00006be9 	.word	0x00006be9

00006e38 <_tcc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tcc_timer_get_period(const struct _timer_device *const device)
{
    6e38:	b580      	push	{r7, lr}
    6e3a:	b082      	sub	sp, #8
    6e3c:	af00      	add	r7, sp, #0
    6e3e:	6078      	str	r0, [r7, #4]
	return hri_tcc_read_PER_reg(device->hw);
    6e40:	687b      	ldr	r3, [r7, #4]
    6e42:	68db      	ldr	r3, [r3, #12]
    6e44:	4618      	mov	r0, r3
    6e46:	4b03      	ldr	r3, [pc, #12]	; (6e54 <_tcc_timer_get_period+0x1c>)
    6e48:	4798      	blx	r3
    6e4a:	4603      	mov	r3, r0
}
    6e4c:	4618      	mov	r0, r3
    6e4e:	3708      	adds	r7, #8
    6e50:	46bd      	mov	sp, r7
    6e52:	bd80      	pop	{r7, pc}
    6e54:	00006c0d 	.word	0x00006c0d

00006e58 <_tcc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tcc_timer_is_started(const struct _timer_device *const device)
{
    6e58:	b580      	push	{r7, lr}
    6e5a:	b082      	sub	sp, #8
    6e5c:	af00      	add	r7, sp, #0
    6e5e:	6078      	str	r0, [r7, #4]
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    6e60:	687b      	ldr	r3, [r7, #4]
    6e62:	68db      	ldr	r3, [r3, #12]
    6e64:	4618      	mov	r0, r3
    6e66:	4b03      	ldr	r3, [pc, #12]	; (6e74 <_tcc_timer_is_started+0x1c>)
    6e68:	4798      	blx	r3
    6e6a:	4603      	mov	r3, r0
}
    6e6c:	4618      	mov	r0, r3
    6e6e:	3708      	adds	r7, #8
    6e70:	46bd      	mov	sp, r7
    6e72:	bd80      	pop	{r7, pc}
    6e74:	00006af9 	.word	0x00006af9

00006e78 <_tcc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tcc_get_timer(void)
{
    6e78:	b480      	push	{r7}
    6e7a:	af00      	add	r7, sp, #0
	return &_tcc_timer_functions;
    6e7c:	4b02      	ldr	r3, [pc, #8]	; (6e88 <_tcc_get_timer+0x10>)
}
    6e7e:	4618      	mov	r0, r3
    6e80:	46bd      	mov	sp, r7
    6e82:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e86:	4770      	bx	lr
    6e88:	200000c0 	.word	0x200000c0

00006e8c <_tcc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tcc_timer_set_irq(struct _timer_device *const device)
{
    6e8c:	b580      	push	{r7, lr}
    6e8e:	b084      	sub	sp, #16
    6e90:	af00      	add	r7, sp, #0
    6e92:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    6e94:	687b      	ldr	r3, [r7, #4]
    6e96:	68db      	ldr	r3, [r3, #12]
    6e98:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    6e9a:	68f8      	ldr	r0, [r7, #12]
    6e9c:	4b08      	ldr	r3, [pc, #32]	; (6ec0 <_tcc_timer_set_irq+0x34>)
    6e9e:	4798      	blx	r3
    6ea0:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    6ea2:	68bb      	ldr	r3, [r7, #8]
    6ea4:	2b00      	cmp	r3, #0
    6ea6:	d006      	beq.n	6eb6 <_tcc_timer_set_irq+0x2a>
		_irq_set((IRQn_Type)cfg->irq);
    6ea8:	68bb      	ldr	r3, [r7, #8]
    6eaa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    6eae:	b2db      	uxtb	r3, r3
    6eb0:	4618      	mov	r0, r3
    6eb2:	4b04      	ldr	r3, [pc, #16]	; (6ec4 <_tcc_timer_set_irq+0x38>)
    6eb4:	4798      	blx	r3
	}
}
    6eb6:	bf00      	nop
    6eb8:	3710      	adds	r7, #16
    6eba:	46bd      	mov	sp, r7
    6ebc:	bd80      	pop	{r7, pc}
    6ebe:	bf00      	nop
    6ec0:	00006f39 	.word	0x00006f39
    6ec4:	00003b7d 	.word	0x00003b7d

00006ec8 <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    6ec8:	b580      	push	{r7, lr}
    6eca:	b084      	sub	sp, #16
    6ecc:	af00      	add	r7, sp, #0
    6ece:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    6ed0:	687b      	ldr	r3, [r7, #4]
    6ed2:	68db      	ldr	r3, [r3, #12]
    6ed4:	60fb      	str	r3, [r7, #12]

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    6ed6:	68f8      	ldr	r0, [r7, #12]
    6ed8:	4b07      	ldr	r3, [pc, #28]	; (6ef8 <tcc_interrupt_handler+0x30>)
    6eda:	4798      	blx	r3
    6edc:	4603      	mov	r3, r0
    6ede:	2b00      	cmp	r3, #0
    6ee0:	d006      	beq.n	6ef0 <tcc_interrupt_handler+0x28>
		hri_tcc_clear_interrupt_OVF_bit(hw);
    6ee2:	68f8      	ldr	r0, [r7, #12]
    6ee4:	4b05      	ldr	r3, [pc, #20]	; (6efc <tcc_interrupt_handler+0x34>)
    6ee6:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    6ee8:	687b      	ldr	r3, [r7, #4]
    6eea:	681b      	ldr	r3, [r3, #0]
    6eec:	6878      	ldr	r0, [r7, #4]
    6eee:	4798      	blx	r3
	}
}
    6ef0:	bf00      	nop
    6ef2:	3710      	adds	r7, #16
    6ef4:	46bd      	mov	sp, r7
    6ef6:	bd80      	pop	{r7, pc}
    6ef8:	00006a31 	.word	0x00006a31
    6efc:	00006a57 	.word	0x00006a57

00006f00 <TCC0_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC0_0_Handler(void)
{
    6f00:	b580      	push	{r7, lr}
    6f02:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc0_dev);
    6f04:	4b03      	ldr	r3, [pc, #12]	; (6f14 <TCC0_0_Handler+0x14>)
    6f06:	681b      	ldr	r3, [r3, #0]
    6f08:	4618      	mov	r0, r3
    6f0a:	4b03      	ldr	r3, [pc, #12]	; (6f18 <TCC0_0_Handler+0x18>)
    6f0c:	4798      	blx	r3
}
    6f0e:	bf00      	nop
    6f10:	bd80      	pop	{r7, pc}
    6f12:	bf00      	nop
    6f14:	20000cec 	.word	0x20000cec
    6f18:	00006ec9 	.word	0x00006ec9

00006f1c <TCC1_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC1_0_Handler(void)
{
    6f1c:	b580      	push	{r7, lr}
    6f1e:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc1_dev);
    6f20:	4b03      	ldr	r3, [pc, #12]	; (6f30 <TCC1_0_Handler+0x14>)
    6f22:	681b      	ldr	r3, [r3, #0]
    6f24:	4618      	mov	r0, r3
    6f26:	4b03      	ldr	r3, [pc, #12]	; (6f34 <TCC1_0_Handler+0x18>)
    6f28:	4798      	blx	r3
}
    6f2a:	bf00      	nop
    6f2c:	bd80      	pop	{r7, pc}
    6f2e:	bf00      	nop
    6f30:	20000cf0 	.word	0x20000cf0
    6f34:	00006ec9 	.word	0x00006ec9

00006f38 <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
    6f38:	b480      	push	{r7}
    6f3a:	b085      	sub	sp, #20
    6f3c:	af00      	add	r7, sp, #0
    6f3e:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    6f40:	2300      	movs	r3, #0
    6f42:	73fb      	strb	r3, [r7, #15]
    6f44:	e015      	b.n	6f72 <_get_tcc_cfg+0x3a>
		if (_cfgs[i].hw == hw) {
    6f46:	7bfa      	ldrb	r2, [r7, #15]
    6f48:	490f      	ldr	r1, [pc, #60]	; (6f88 <_get_tcc_cfg+0x50>)
    6f4a:	4613      	mov	r3, r2
    6f4c:	005b      	lsls	r3, r3, #1
    6f4e:	4413      	add	r3, r2
    6f50:	011b      	lsls	r3, r3, #4
    6f52:	440b      	add	r3, r1
    6f54:	681a      	ldr	r2, [r3, #0]
    6f56:	687b      	ldr	r3, [r7, #4]
    6f58:	429a      	cmp	r2, r3
    6f5a:	d107      	bne.n	6f6c <_get_tcc_cfg+0x34>
			return &(_cfgs[i]);
    6f5c:	7bfa      	ldrb	r2, [r7, #15]
    6f5e:	4613      	mov	r3, r2
    6f60:	005b      	lsls	r3, r3, #1
    6f62:	4413      	add	r3, r2
    6f64:	011b      	lsls	r3, r3, #4
    6f66:	4a08      	ldr	r2, [pc, #32]	; (6f88 <_get_tcc_cfg+0x50>)
    6f68:	4413      	add	r3, r2
    6f6a:	e006      	b.n	6f7a <_get_tcc_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    6f6c:	7bfb      	ldrb	r3, [r7, #15]
    6f6e:	3301      	adds	r3, #1
    6f70:	73fb      	strb	r3, [r7, #15]
    6f72:	7bfb      	ldrb	r3, [r7, #15]
    6f74:	2b01      	cmp	r3, #1
    6f76:	d9e6      	bls.n	6f46 <_get_tcc_cfg+0xe>
		}
	}
	return NULL;
    6f78:	2300      	movs	r3, #0
}
    6f7a:	4618      	mov	r0, r3
    6f7c:	3714      	adds	r7, #20
    6f7e:	46bd      	mov	sp, r7
    6f80:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f84:	4770      	bx	lr
    6f86:	bf00      	nop
    6f88:	20000060 	.word	0x20000060

00006f8c <__NVIC_EnableIRQ>:
{
    6f8c:	b480      	push	{r7}
    6f8e:	b083      	sub	sp, #12
    6f90:	af00      	add	r7, sp, #0
    6f92:	4603      	mov	r3, r0
    6f94:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6f96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6f9a:	2b00      	cmp	r3, #0
    6f9c:	db0b      	blt.n	6fb6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6f9e:	4909      	ldr	r1, [pc, #36]	; (6fc4 <__NVIC_EnableIRQ+0x38>)
    6fa0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6fa4:	095b      	lsrs	r3, r3, #5
    6fa6:	88fa      	ldrh	r2, [r7, #6]
    6fa8:	f002 021f 	and.w	r2, r2, #31
    6fac:	2001      	movs	r0, #1
    6fae:	fa00 f202 	lsl.w	r2, r0, r2
    6fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6fb6:	bf00      	nop
    6fb8:	370c      	adds	r7, #12
    6fba:	46bd      	mov	sp, r7
    6fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    6fc0:	4770      	bx	lr
    6fc2:	bf00      	nop
    6fc4:	e000e100 	.word	0xe000e100

00006fc8 <__NVIC_DisableIRQ>:
{
    6fc8:	b480      	push	{r7}
    6fca:	b083      	sub	sp, #12
    6fcc:	af00      	add	r7, sp, #0
    6fce:	4603      	mov	r3, r0
    6fd0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6fd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6fd6:	2b00      	cmp	r3, #0
    6fd8:	db10      	blt.n	6ffc <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6fda:	490b      	ldr	r1, [pc, #44]	; (7008 <__NVIC_DisableIRQ+0x40>)
    6fdc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6fe0:	095b      	lsrs	r3, r3, #5
    6fe2:	88fa      	ldrh	r2, [r7, #6]
    6fe4:	f002 021f 	and.w	r2, r2, #31
    6fe8:	2001      	movs	r0, #1
    6fea:	fa00 f202 	lsl.w	r2, r0, r2
    6fee:	3320      	adds	r3, #32
    6ff0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    6ff4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6ff8:	f3bf 8f6f 	isb	sy
}
    6ffc:	bf00      	nop
    6ffe:	370c      	adds	r7, #12
    7000:	46bd      	mov	sp, r7
    7002:	f85d 7b04 	ldr.w	r7, [sp], #4
    7006:	4770      	bx	lr
    7008:	e000e100 	.word	0xe000e100

0000700c <__NVIC_ClearPendingIRQ>:
{
    700c:	b480      	push	{r7}
    700e:	b083      	sub	sp, #12
    7010:	af00      	add	r7, sp, #0
    7012:	4603      	mov	r3, r0
    7014:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7016:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    701a:	2b00      	cmp	r3, #0
    701c:	db0c      	blt.n	7038 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    701e:	4909      	ldr	r1, [pc, #36]	; (7044 <__NVIC_ClearPendingIRQ+0x38>)
    7020:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7024:	095b      	lsrs	r3, r3, #5
    7026:	88fa      	ldrh	r2, [r7, #6]
    7028:	f002 021f 	and.w	r2, r2, #31
    702c:	2001      	movs	r0, #1
    702e:	fa00 f202 	lsl.w	r2, r0, r2
    7032:	3360      	adds	r3, #96	; 0x60
    7034:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7038:	bf00      	nop
    703a:	370c      	adds	r7, #12
    703c:	46bd      	mov	sp, r7
    703e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7042:	4770      	bx	lr
    7044:	e000e100 	.word	0xe000e100

00007048 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    7048:	b480      	push	{r7}
    704a:	b083      	sub	sp, #12
    704c:	af00      	add	r7, sp, #0
    704e:	6078      	str	r0, [r7, #4]
    7050:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7052:	bf00      	nop
    7054:	687b      	ldr	r3, [r7, #4]
    7056:	691a      	ldr	r2, [r3, #16]
    7058:	683b      	ldr	r3, [r7, #0]
    705a:	4013      	ands	r3, r2
    705c:	2b00      	cmp	r3, #0
    705e:	d1f9      	bne.n	7054 <hri_tc_wait_for_sync+0xc>
	};
}
    7060:	bf00      	nop
    7062:	370c      	adds	r7, #12
    7064:	46bd      	mov	sp, r7
    7066:	f85d 7b04 	ldr.w	r7, [sp], #4
    706a:	4770      	bx	lr

0000706c <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    706c:	b480      	push	{r7}
    706e:	b083      	sub	sp, #12
    7070:	af00      	add	r7, sp, #0
    7072:	6078      	str	r0, [r7, #4]
    7074:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    7076:	687b      	ldr	r3, [r7, #4]
    7078:	691a      	ldr	r2, [r3, #16]
    707a:	683b      	ldr	r3, [r7, #0]
    707c:	4013      	ands	r3, r2
    707e:	2b00      	cmp	r3, #0
    7080:	bf14      	ite	ne
    7082:	2301      	movne	r3, #1
    7084:	2300      	moveq	r3, #0
    7086:	b2db      	uxtb	r3, r3
}
    7088:	4618      	mov	r0, r3
    708a:	370c      	adds	r7, #12
    708c:	46bd      	mov	sp, r7
    708e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7092:	4770      	bx	lr

00007094 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    7094:	b480      	push	{r7}
    7096:	b083      	sub	sp, #12
    7098:	af00      	add	r7, sp, #0
    709a:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    709c:	687b      	ldr	r3, [r7, #4]
    709e:	7a9b      	ldrb	r3, [r3, #10]
    70a0:	b2db      	uxtb	r3, r3
    70a2:	f003 0301 	and.w	r3, r3, #1
    70a6:	2b00      	cmp	r3, #0
    70a8:	bf14      	ite	ne
    70aa:	2301      	movne	r3, #1
    70ac:	2300      	moveq	r3, #0
    70ae:	b2db      	uxtb	r3, r3
}
    70b0:	4618      	mov	r0, r3
    70b2:	370c      	adds	r7, #12
    70b4:	46bd      	mov	sp, r7
    70b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    70ba:	4770      	bx	lr

000070bc <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    70bc:	b480      	push	{r7}
    70be:	b083      	sub	sp, #12
    70c0:	af00      	add	r7, sp, #0
    70c2:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    70c4:	687b      	ldr	r3, [r7, #4]
    70c6:	2201      	movs	r2, #1
    70c8:	729a      	strb	r2, [r3, #10]
}
    70ca:	bf00      	nop
    70cc:	370c      	adds	r7, #12
    70ce:	46bd      	mov	sp, r7
    70d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    70d4:	4770      	bx	lr

000070d6 <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    70d6:	b480      	push	{r7}
    70d8:	b083      	sub	sp, #12
    70da:	af00      	add	r7, sp, #0
    70dc:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    70de:	687b      	ldr	r3, [r7, #4]
    70e0:	2202      	movs	r2, #2
    70e2:	729a      	strb	r2, [r3, #10]
}
    70e4:	bf00      	nop
    70e6:	370c      	adds	r7, #12
    70e8:	46bd      	mov	sp, r7
    70ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    70ee:	4770      	bx	lr

000070f0 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    70f0:	b480      	push	{r7}
    70f2:	b083      	sub	sp, #12
    70f4:	af00      	add	r7, sp, #0
    70f6:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    70f8:	687b      	ldr	r3, [r7, #4]
    70fa:	2201      	movs	r2, #1
    70fc:	725a      	strb	r2, [r3, #9]
}
    70fe:	bf00      	nop
    7100:	370c      	adds	r7, #12
    7102:	46bd      	mov	sp, r7
    7104:	f85d 7b04 	ldr.w	r7, [sp], #4
    7108:	4770      	bx	lr

0000710a <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    710a:	b480      	push	{r7}
    710c:	b083      	sub	sp, #12
    710e:	af00      	add	r7, sp, #0
    7110:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    7112:	687b      	ldr	r3, [r7, #4]
    7114:	7a5b      	ldrb	r3, [r3, #9]
    7116:	b2db      	uxtb	r3, r3
    7118:	085b      	lsrs	r3, r3, #1
    711a:	f003 0301 	and.w	r3, r3, #1
    711e:	2b00      	cmp	r3, #0
    7120:	bf14      	ite	ne
    7122:	2301      	movne	r3, #1
    7124:	2300      	moveq	r3, #0
    7126:	b2db      	uxtb	r3, r3
}
    7128:	4618      	mov	r0, r3
    712a:	370c      	adds	r7, #12
    712c:	46bd      	mov	sp, r7
    712e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7132:	4770      	bx	lr

00007134 <hri_tc_set_CTRLA_SWRST_bit>:
{
	return ((Tc *)hw)->COUNT16.SYNCBUSY.reg;
}

static inline void hri_tc_set_CTRLA_SWRST_bit(const void *const hw)
{
    7134:	b580      	push	{r7, lr}
    7136:	b082      	sub	sp, #8
    7138:	af00      	add	r7, sp, #0
    713a:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    713c:	687b      	ldr	r3, [r7, #4]
    713e:	681b      	ldr	r3, [r3, #0]
    7140:	f043 0201 	orr.w	r2, r3, #1
    7144:	687b      	ldr	r3, [r7, #4]
    7146:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    7148:	2101      	movs	r1, #1
    714a:	6878      	ldr	r0, [r7, #4]
    714c:	4b02      	ldr	r3, [pc, #8]	; (7158 <hri_tc_set_CTRLA_SWRST_bit+0x24>)
    714e:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7150:	bf00      	nop
    7152:	3708      	adds	r7, #8
    7154:	46bd      	mov	sp, r7
    7156:	bd80      	pop	{r7, pc}
    7158:	00007049 	.word	0x00007049

0000715c <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    715c:	b580      	push	{r7, lr}
    715e:	b082      	sub	sp, #8
    7160:	af00      	add	r7, sp, #0
    7162:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    7164:	687b      	ldr	r3, [r7, #4]
    7166:	681b      	ldr	r3, [r3, #0]
    7168:	f043 0202 	orr.w	r2, r3, #2
    716c:	687b      	ldr	r3, [r7, #4]
    716e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7170:	2103      	movs	r1, #3
    7172:	6878      	ldr	r0, [r7, #4]
    7174:	4b02      	ldr	r3, [pc, #8]	; (7180 <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    7176:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7178:	bf00      	nop
    717a:	3708      	adds	r7, #8
    717c:	46bd      	mov	sp, r7
    717e:	bd80      	pop	{r7, pc}
    7180:	00007049 	.word	0x00007049

00007184 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    7184:	b580      	push	{r7, lr}
    7186:	b084      	sub	sp, #16
    7188:	af00      	add	r7, sp, #0
    718a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    718c:	2103      	movs	r1, #3
    718e:	6878      	ldr	r0, [r7, #4]
    7190:	4b09      	ldr	r3, [pc, #36]	; (71b8 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    7192:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7194:	687b      	ldr	r3, [r7, #4]
    7196:	681b      	ldr	r3, [r3, #0]
    7198:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    719a:	68fb      	ldr	r3, [r7, #12]
    719c:	085b      	lsrs	r3, r3, #1
    719e:	f003 0301 	and.w	r3, r3, #1
    71a2:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    71a4:	68fb      	ldr	r3, [r7, #12]
    71a6:	2b00      	cmp	r3, #0
    71a8:	bf14      	ite	ne
    71aa:	2301      	movne	r3, #1
    71ac:	2300      	moveq	r3, #0
    71ae:	b2db      	uxtb	r3, r3
}
    71b0:	4618      	mov	r0, r3
    71b2:	3710      	adds	r7, #16
    71b4:	46bd      	mov	sp, r7
    71b6:	bd80      	pop	{r7, pc}
    71b8:	00007049 	.word	0x00007049

000071bc <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    71bc:	b580      	push	{r7, lr}
    71be:	b082      	sub	sp, #8
    71c0:	af00      	add	r7, sp, #0
    71c2:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    71c4:	687b      	ldr	r3, [r7, #4]
    71c6:	681b      	ldr	r3, [r3, #0]
    71c8:	f023 0202 	bic.w	r2, r3, #2
    71cc:	687b      	ldr	r3, [r7, #4]
    71ce:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    71d0:	2103      	movs	r1, #3
    71d2:	6878      	ldr	r0, [r7, #4]
    71d4:	4b02      	ldr	r3, [pc, #8]	; (71e0 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    71d6:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    71d8:	bf00      	nop
    71da:	3708      	adds	r7, #8
    71dc:	46bd      	mov	sp, r7
    71de:	bd80      	pop	{r7, pc}
    71e0:	00007049 	.word	0x00007049

000071e4 <hri_tc_read_CTRLA_MODE_bf>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
    71e4:	b480      	push	{r7}
    71e6:	b085      	sub	sp, #20
    71e8:	af00      	add	r7, sp, #0
    71ea:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    71ec:	687b      	ldr	r3, [r7, #4]
    71ee:	681b      	ldr	r3, [r3, #0]
    71f0:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    71f2:	68fb      	ldr	r3, [r7, #12]
    71f4:	089b      	lsrs	r3, r3, #2
    71f6:	f003 0303 	and.w	r3, r3, #3
    71fa:	60fb      	str	r3, [r7, #12]
	return tmp;
    71fc:	68fb      	ldr	r3, [r7, #12]
}
    71fe:	4618      	mov	r0, r3
    7200:	3714      	adds	r7, #20
    7202:	46bd      	mov	sp, r7
    7204:	f85d 7b04 	ldr.w	r7, [sp], #4
    7208:	4770      	bx	lr
	...

0000720c <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    720c:	b580      	push	{r7, lr}
    720e:	b084      	sub	sp, #16
    7210:	af00      	add	r7, sp, #0
    7212:	6078      	str	r0, [r7, #4]
    7214:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7216:	2103      	movs	r1, #3
    7218:	6878      	ldr	r0, [r7, #4]
    721a:	4b07      	ldr	r3, [pc, #28]	; (7238 <hri_tc_get_CTRLA_reg+0x2c>)
    721c:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    721e:	687b      	ldr	r3, [r7, #4]
    7220:	681b      	ldr	r3, [r3, #0]
    7222:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7224:	68fa      	ldr	r2, [r7, #12]
    7226:	683b      	ldr	r3, [r7, #0]
    7228:	4013      	ands	r3, r2
    722a:	60fb      	str	r3, [r7, #12]
	return tmp;
    722c:	68fb      	ldr	r3, [r7, #12]
}
    722e:	4618      	mov	r0, r3
    7230:	3710      	adds	r7, #16
    7232:	46bd      	mov	sp, r7
    7234:	bd80      	pop	{r7, pc}
    7236:	bf00      	nop
    7238:	00007049 	.word	0x00007049

0000723c <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    723c:	b580      	push	{r7, lr}
    723e:	b082      	sub	sp, #8
    7240:	af00      	add	r7, sp, #0
    7242:	6078      	str	r0, [r7, #4]
    7244:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    7246:	687b      	ldr	r3, [r7, #4]
    7248:	683a      	ldr	r2, [r7, #0]
    724a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    724c:	2103      	movs	r1, #3
    724e:	6878      	ldr	r0, [r7, #4]
    7250:	4b02      	ldr	r3, [pc, #8]	; (725c <hri_tc_write_CTRLA_reg+0x20>)
    7252:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7254:	bf00      	nop
    7256:	3708      	adds	r7, #8
    7258:	46bd      	mov	sp, r7
    725a:	bd80      	pop	{r7, pc}
    725c:	00007049 	.word	0x00007049

00007260 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    7260:	b480      	push	{r7}
    7262:	b083      	sub	sp, #12
    7264:	af00      	add	r7, sp, #0
    7266:	6078      	str	r0, [r7, #4]
    7268:	460b      	mov	r3, r1
    726a:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    726c:	687b      	ldr	r3, [r7, #4]
    726e:	887a      	ldrh	r2, [r7, #2]
    7270:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    7272:	bf00      	nop
    7274:	370c      	adds	r7, #12
    7276:	46bd      	mov	sp, r7
    7278:	f85d 7b04 	ldr.w	r7, [sp], #4
    727c:	4770      	bx	lr

0000727e <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    727e:	b480      	push	{r7}
    7280:	b083      	sub	sp, #12
    7282:	af00      	add	r7, sp, #0
    7284:	6078      	str	r0, [r7, #4]
    7286:	460b      	mov	r3, r1
    7288:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    728a:	687b      	ldr	r3, [r7, #4]
    728c:	78fa      	ldrb	r2, [r7, #3]
    728e:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    7290:	bf00      	nop
    7292:	370c      	adds	r7, #12
    7294:	46bd      	mov	sp, r7
    7296:	f85d 7b04 	ldr.w	r7, [sp], #4
    729a:	4770      	bx	lr

0000729c <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    729c:	b480      	push	{r7}
    729e:	b083      	sub	sp, #12
    72a0:	af00      	add	r7, sp, #0
    72a2:	6078      	str	r0, [r7, #4]
    72a4:	460b      	mov	r3, r1
    72a6:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    72a8:	687b      	ldr	r3, [r7, #4]
    72aa:	78fa      	ldrb	r2, [r7, #3]
    72ac:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    72ae:	bf00      	nop
    72b0:	370c      	adds	r7, #12
    72b2:	46bd      	mov	sp, r7
    72b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    72b8:	4770      	bx	lr
	...

000072bc <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    72bc:	b580      	push	{r7, lr}
    72be:	b082      	sub	sp, #8
    72c0:	af00      	add	r7, sp, #0
    72c2:	6078      	str	r0, [r7, #4]
    72c4:	460b      	mov	r3, r1
    72c6:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    72c8:	687b      	ldr	r3, [r7, #4]
    72ca:	78fa      	ldrb	r2, [r7, #3]
    72cc:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    72ce:	2120      	movs	r1, #32
    72d0:	6878      	ldr	r0, [r7, #4]
    72d2:	4b03      	ldr	r3, [pc, #12]	; (72e0 <hri_tccount8_write_PER_reg+0x24>)
    72d4:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    72d6:	bf00      	nop
    72d8:	3708      	adds	r7, #8
    72da:	46bd      	mov	sp, r7
    72dc:	bd80      	pop	{r7, pc}
    72de:	bf00      	nop
    72e0:	00007049 	.word	0x00007049

000072e4 <hri_tccount8_read_PER_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount8_per_reg_t hri_tccount8_read_PER_reg(const void *const hw)
{
    72e4:	b580      	push	{r7, lr}
    72e6:	b082      	sub	sp, #8
    72e8:	af00      	add	r7, sp, #0
    72ea:	6078      	str	r0, [r7, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    72ec:	2120      	movs	r1, #32
    72ee:	6878      	ldr	r0, [r7, #4]
    72f0:	4b04      	ldr	r3, [pc, #16]	; (7304 <hri_tccount8_read_PER_reg+0x20>)
    72f2:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
    72f4:	687b      	ldr	r3, [r7, #4]
    72f6:	7edb      	ldrb	r3, [r3, #27]
    72f8:	b2db      	uxtb	r3, r3
}
    72fa:	4618      	mov	r0, r3
    72fc:	3708      	adds	r7, #8
    72fe:	46bd      	mov	sp, r7
    7300:	bd80      	pop	{r7, pc}
    7302:	bf00      	nop
    7304:	00007049 	.word	0x00007049

00007308 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    7308:	b580      	push	{r7, lr}
    730a:	b082      	sub	sp, #8
    730c:	af00      	add	r7, sp, #0
    730e:	6078      	str	r0, [r7, #4]
    7310:	460b      	mov	r3, r1
    7312:	70fb      	strb	r3, [r7, #3]
    7314:	4613      	mov	r3, r2
    7316:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    7318:	78fb      	ldrb	r3, [r7, #3]
    731a:	687a      	ldr	r2, [r7, #4]
    731c:	4413      	add	r3, r2
    731e:	78ba      	ldrb	r2, [r7, #2]
    7320:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7322:	21c0      	movs	r1, #192	; 0xc0
    7324:	6878      	ldr	r0, [r7, #4]
    7326:	4b03      	ldr	r3, [pc, #12]	; (7334 <hri_tccount8_write_CC_reg+0x2c>)
    7328:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    732a:	bf00      	nop
    732c:	3708      	adds	r7, #8
    732e:	46bd      	mov	sp, r7
    7330:	bd80      	pop	{r7, pc}
    7332:	bf00      	nop
    7334:	00007049 	.word	0x00007049

00007338 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    7338:	b580      	push	{r7, lr}
    733a:	b082      	sub	sp, #8
    733c:	af00      	add	r7, sp, #0
    733e:	6078      	str	r0, [r7, #4]
    7340:	460b      	mov	r3, r1
    7342:	70fb      	strb	r3, [r7, #3]
    7344:	4613      	mov	r3, r2
    7346:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    7348:	78fb      	ldrb	r3, [r7, #3]
    734a:	687a      	ldr	r2, [r7, #4]
    734c:	330c      	adds	r3, #12
    734e:	005b      	lsls	r3, r3, #1
    7350:	4413      	add	r3, r2
    7352:	883a      	ldrh	r2, [r7, #0]
    7354:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7356:	21c0      	movs	r1, #192	; 0xc0
    7358:	6878      	ldr	r0, [r7, #4]
    735a:	4b03      	ldr	r3, [pc, #12]	; (7368 <hri_tccount16_write_CC_reg+0x30>)
    735c:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    735e:	bf00      	nop
    7360:	3708      	adds	r7, #8
    7362:	46bd      	mov	sp, r7
    7364:	bd80      	pop	{r7, pc}
    7366:	bf00      	nop
    7368:	00007049 	.word	0x00007049

0000736c <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    736c:	b580      	push	{r7, lr}
    736e:	b082      	sub	sp, #8
    7370:	af00      	add	r7, sp, #0
    7372:	6078      	str	r0, [r7, #4]
    7374:	460b      	mov	r3, r1
    7376:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7378:	21c0      	movs	r1, #192	; 0xc0
    737a:	6878      	ldr	r0, [r7, #4]
    737c:	4b06      	ldr	r3, [pc, #24]	; (7398 <hri_tccount16_read_CC_reg+0x2c>)
    737e:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    7380:	78fb      	ldrb	r3, [r7, #3]
    7382:	687a      	ldr	r2, [r7, #4]
    7384:	330c      	adds	r3, #12
    7386:	005b      	lsls	r3, r3, #1
    7388:	4413      	add	r3, r2
    738a:	889b      	ldrh	r3, [r3, #4]
    738c:	b29b      	uxth	r3, r3
}
    738e:	4618      	mov	r0, r3
    7390:	3708      	adds	r7, #8
    7392:	46bd      	mov	sp, r7
    7394:	bd80      	pop	{r7, pc}
    7396:	bf00      	nop
    7398:	00007049 	.word	0x00007049

0000739c <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    739c:	b580      	push	{r7, lr}
    739e:	b084      	sub	sp, #16
    73a0:	af00      	add	r7, sp, #0
    73a2:	60f8      	str	r0, [r7, #12]
    73a4:	460b      	mov	r3, r1
    73a6:	607a      	str	r2, [r7, #4]
    73a8:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    73aa:	7afb      	ldrb	r3, [r7, #11]
    73ac:	68fa      	ldr	r2, [r7, #12]
    73ae:	3306      	adds	r3, #6
    73b0:	009b      	lsls	r3, r3, #2
    73b2:	4413      	add	r3, r2
    73b4:	687a      	ldr	r2, [r7, #4]
    73b6:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    73b8:	21c0      	movs	r1, #192	; 0xc0
    73ba:	68f8      	ldr	r0, [r7, #12]
    73bc:	4b02      	ldr	r3, [pc, #8]	; (73c8 <hri_tccount32_write_CC_reg+0x2c>)
    73be:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    73c0:	bf00      	nop
    73c2:	3710      	adds	r7, #16
    73c4:	46bd      	mov	sp, r7
    73c6:	bd80      	pop	{r7, pc}
    73c8:	00007049 	.word	0x00007049

000073cc <hri_tccount32_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
    73cc:	b580      	push	{r7, lr}
    73ce:	b082      	sub	sp, #8
    73d0:	af00      	add	r7, sp, #0
    73d2:	6078      	str	r0, [r7, #4]
    73d4:	460b      	mov	r3, r1
    73d6:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    73d8:	21c0      	movs	r1, #192	; 0xc0
    73da:	6878      	ldr	r0, [r7, #4]
    73dc:	4b05      	ldr	r3, [pc, #20]	; (73f4 <hri_tccount32_read_CC_reg+0x28>)
    73de:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    73e0:	78fb      	ldrb	r3, [r7, #3]
    73e2:	687a      	ldr	r2, [r7, #4]
    73e4:	3306      	adds	r3, #6
    73e6:	009b      	lsls	r3, r3, #2
    73e8:	4413      	add	r3, r2
    73ea:	685b      	ldr	r3, [r3, #4]
}
    73ec:	4618      	mov	r0, r3
    73ee:	3708      	adds	r7, #8
    73f0:	46bd      	mov	sp, r7
    73f2:	bd80      	pop	{r7, pc}
    73f4:	00007049 	.word	0x00007049

000073f8 <_tc_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _tc_timer_init(struct _timer_device *const device, void *const hw)
{
    73f8:	b580      	push	{r7, lr}
    73fa:	b084      	sub	sp, #16
    73fc:	af00      	add	r7, sp, #0
    73fe:	6078      	str	r0, [r7, #4]
    7400:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    7402:	6838      	ldr	r0, [r7, #0]
    7404:	4b93      	ldr	r3, [pc, #588]	; (7654 <_tc_timer_init+0x25c>)
    7406:	4798      	blx	r3
    7408:	4603      	mov	r3, r0
    740a:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    740c:	687b      	ldr	r3, [r7, #4]
    740e:	683a      	ldr	r2, [r7, #0]
    7410:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    7412:	22a4      	movs	r2, #164	; 0xa4
    7414:	4990      	ldr	r1, [pc, #576]	; (7658 <_tc_timer_init+0x260>)
    7416:	2001      	movs	r0, #1
    7418:	4b90      	ldr	r3, [pc, #576]	; (765c <_tc_timer_init+0x264>)
    741a:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    741c:	2101      	movs	r1, #1
    741e:	6838      	ldr	r0, [r7, #0]
    7420:	4b8f      	ldr	r3, [pc, #572]	; (7660 <_tc_timer_init+0x268>)
    7422:	4798      	blx	r3
    7424:	4603      	mov	r3, r0
    7426:	f083 0301 	eor.w	r3, r3, #1
    742a:	b2db      	uxtb	r3, r3
    742c:	2b00      	cmp	r3, #0
    742e:	d011      	beq.n	7454 <_tc_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    7430:	2102      	movs	r1, #2
    7432:	6838      	ldr	r0, [r7, #0]
    7434:	4b8b      	ldr	r3, [pc, #556]	; (7664 <_tc_timer_init+0x26c>)
    7436:	4798      	blx	r3
    7438:	4603      	mov	r3, r0
    743a:	2b00      	cmp	r3, #0
    743c:	d006      	beq.n	744c <_tc_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    743e:	6838      	ldr	r0, [r7, #0]
    7440:	4b89      	ldr	r3, [pc, #548]	; (7668 <_tc_timer_init+0x270>)
    7442:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    7444:	2102      	movs	r1, #2
    7446:	6838      	ldr	r0, [r7, #0]
    7448:	4b88      	ldr	r3, [pc, #544]	; (766c <_tc_timer_init+0x274>)
    744a:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    744c:	2101      	movs	r1, #1
    744e:	6838      	ldr	r0, [r7, #0]
    7450:	4b87      	ldr	r3, [pc, #540]	; (7670 <_tc_timer_init+0x278>)
    7452:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    7454:	2101      	movs	r1, #1
    7456:	6838      	ldr	r0, [r7, #0]
    7458:	4b84      	ldr	r3, [pc, #528]	; (766c <_tc_timer_init+0x274>)
    745a:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    745c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7460:	4984      	ldr	r1, [pc, #528]	; (7674 <_tc_timer_init+0x27c>)
    7462:	4613      	mov	r3, r2
    7464:	009b      	lsls	r3, r3, #2
    7466:	4413      	add	r3, r2
    7468:	009b      	lsls	r3, r3, #2
    746a:	440b      	add	r3, r1
    746c:	3304      	adds	r3, #4
    746e:	681b      	ldr	r3, [r3, #0]
    7470:	4619      	mov	r1, r3
    7472:	6838      	ldr	r0, [r7, #0]
    7474:	4b7e      	ldr	r3, [pc, #504]	; (7670 <_tc_timer_init+0x278>)
    7476:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    7478:	f997 200f 	ldrsb.w	r2, [r7, #15]
    747c:	497d      	ldr	r1, [pc, #500]	; (7674 <_tc_timer_init+0x27c>)
    747e:	4613      	mov	r3, r2
    7480:	009b      	lsls	r3, r3, #2
    7482:	4413      	add	r3, r2
    7484:	009b      	lsls	r3, r3, #2
    7486:	440b      	add	r3, r1
    7488:	330a      	adds	r3, #10
    748a:	781b      	ldrb	r3, [r3, #0]
    748c:	4619      	mov	r1, r3
    748e:	6838      	ldr	r0, [r7, #0]
    7490:	4b79      	ldr	r3, [pc, #484]	; (7678 <_tc_timer_init+0x280>)
    7492:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    7494:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7498:	4976      	ldr	r1, [pc, #472]	; (7674 <_tc_timer_init+0x27c>)
    749a:	4613      	mov	r3, r2
    749c:	009b      	lsls	r3, r3, #2
    749e:	4413      	add	r3, r2
    74a0:	009b      	lsls	r3, r3, #2
    74a2:	440b      	add	r3, r1
    74a4:	3308      	adds	r3, #8
    74a6:	881b      	ldrh	r3, [r3, #0]
    74a8:	4619      	mov	r1, r3
    74aa:	6838      	ldr	r0, [r7, #0]
    74ac:	4b73      	ldr	r3, [pc, #460]	; (767c <_tc_timer_init+0x284>)
    74ae:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    74b0:	2101      	movs	r1, #1
    74b2:	6838      	ldr	r0, [r7, #0]
    74b4:	4b72      	ldr	r3, [pc, #456]	; (7680 <_tc_timer_init+0x288>)
    74b6:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    74b8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    74bc:	496d      	ldr	r1, [pc, #436]	; (7674 <_tc_timer_init+0x27c>)
    74be:	4613      	mov	r3, r2
    74c0:	009b      	lsls	r3, r3, #2
    74c2:	4413      	add	r3, r2
    74c4:	009b      	lsls	r3, r3, #2
    74c6:	440b      	add	r3, r1
    74c8:	3304      	adds	r3, #4
    74ca:	681b      	ldr	r3, [r3, #0]
    74cc:	f003 030c 	and.w	r3, r3, #12
    74d0:	2b08      	cmp	r3, #8
    74d2:	d11e      	bne.n	7512 <_tc_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    74d4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    74d8:	4966      	ldr	r1, [pc, #408]	; (7674 <_tc_timer_init+0x27c>)
    74da:	4613      	mov	r3, r2
    74dc:	009b      	lsls	r3, r3, #2
    74de:	4413      	add	r3, r2
    74e0:	009b      	lsls	r3, r3, #2
    74e2:	440b      	add	r3, r1
    74e4:	330c      	adds	r3, #12
    74e6:	681b      	ldr	r3, [r3, #0]
    74e8:	461a      	mov	r2, r3
    74ea:	2100      	movs	r1, #0
    74ec:	6838      	ldr	r0, [r7, #0]
    74ee:	4b65      	ldr	r3, [pc, #404]	; (7684 <_tc_timer_init+0x28c>)
    74f0:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    74f2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    74f6:	495f      	ldr	r1, [pc, #380]	; (7674 <_tc_timer_init+0x27c>)
    74f8:	4613      	mov	r3, r2
    74fa:	009b      	lsls	r3, r3, #2
    74fc:	4413      	add	r3, r2
    74fe:	009b      	lsls	r3, r3, #2
    7500:	440b      	add	r3, r1
    7502:	3310      	adds	r3, #16
    7504:	681b      	ldr	r3, [r3, #0]
    7506:	461a      	mov	r2, r3
    7508:	2101      	movs	r1, #1
    750a:	6838      	ldr	r0, [r7, #0]
    750c:	4b5d      	ldr	r3, [pc, #372]	; (7684 <_tc_timer_init+0x28c>)
    750e:	4798      	blx	r3
    7510:	e06a      	b.n	75e8 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    7512:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7516:	4957      	ldr	r1, [pc, #348]	; (7674 <_tc_timer_init+0x27c>)
    7518:	4613      	mov	r3, r2
    751a:	009b      	lsls	r3, r3, #2
    751c:	4413      	add	r3, r2
    751e:	009b      	lsls	r3, r3, #2
    7520:	440b      	add	r3, r1
    7522:	3304      	adds	r3, #4
    7524:	681b      	ldr	r3, [r3, #0]
    7526:	f003 030c 	and.w	r3, r3, #12
    752a:	2b00      	cmp	r3, #0
    752c:	d120      	bne.n	7570 <_tc_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    752e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7532:	4950      	ldr	r1, [pc, #320]	; (7674 <_tc_timer_init+0x27c>)
    7534:	4613      	mov	r3, r2
    7536:	009b      	lsls	r3, r3, #2
    7538:	4413      	add	r3, r2
    753a:	009b      	lsls	r3, r3, #2
    753c:	440b      	add	r3, r1
    753e:	330c      	adds	r3, #12
    7540:	681b      	ldr	r3, [r3, #0]
    7542:	b29b      	uxth	r3, r3
    7544:	461a      	mov	r2, r3
    7546:	2100      	movs	r1, #0
    7548:	6838      	ldr	r0, [r7, #0]
    754a:	4b4f      	ldr	r3, [pc, #316]	; (7688 <_tc_timer_init+0x290>)
    754c:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    754e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7552:	4948      	ldr	r1, [pc, #288]	; (7674 <_tc_timer_init+0x27c>)
    7554:	4613      	mov	r3, r2
    7556:	009b      	lsls	r3, r3, #2
    7558:	4413      	add	r3, r2
    755a:	009b      	lsls	r3, r3, #2
    755c:	440b      	add	r3, r1
    755e:	3310      	adds	r3, #16
    7560:	681b      	ldr	r3, [r3, #0]
    7562:	b29b      	uxth	r3, r3
    7564:	461a      	mov	r2, r3
    7566:	2101      	movs	r1, #1
    7568:	6838      	ldr	r0, [r7, #0]
    756a:	4b47      	ldr	r3, [pc, #284]	; (7688 <_tc_timer_init+0x290>)
    756c:	4798      	blx	r3
    756e:	e03b      	b.n	75e8 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    7570:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7574:	493f      	ldr	r1, [pc, #252]	; (7674 <_tc_timer_init+0x27c>)
    7576:	4613      	mov	r3, r2
    7578:	009b      	lsls	r3, r3, #2
    757a:	4413      	add	r3, r2
    757c:	009b      	lsls	r3, r3, #2
    757e:	440b      	add	r3, r1
    7580:	3304      	adds	r3, #4
    7582:	681b      	ldr	r3, [r3, #0]
    7584:	f003 030c 	and.w	r3, r3, #12
    7588:	2b04      	cmp	r3, #4
    758a:	d12d      	bne.n	75e8 <_tc_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    758c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7590:	4938      	ldr	r1, [pc, #224]	; (7674 <_tc_timer_init+0x27c>)
    7592:	4613      	mov	r3, r2
    7594:	009b      	lsls	r3, r3, #2
    7596:	4413      	add	r3, r2
    7598:	009b      	lsls	r3, r3, #2
    759a:	440b      	add	r3, r1
    759c:	330c      	adds	r3, #12
    759e:	681b      	ldr	r3, [r3, #0]
    75a0:	b2db      	uxtb	r3, r3
    75a2:	461a      	mov	r2, r3
    75a4:	2100      	movs	r1, #0
    75a6:	6838      	ldr	r0, [r7, #0]
    75a8:	4b38      	ldr	r3, [pc, #224]	; (768c <_tc_timer_init+0x294>)
    75aa:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    75ac:	f997 200f 	ldrsb.w	r2, [r7, #15]
    75b0:	4930      	ldr	r1, [pc, #192]	; (7674 <_tc_timer_init+0x27c>)
    75b2:	4613      	mov	r3, r2
    75b4:	009b      	lsls	r3, r3, #2
    75b6:	4413      	add	r3, r2
    75b8:	009b      	lsls	r3, r3, #2
    75ba:	440b      	add	r3, r1
    75bc:	3310      	adds	r3, #16
    75be:	681b      	ldr	r3, [r3, #0]
    75c0:	b2db      	uxtb	r3, r3
    75c2:	461a      	mov	r2, r3
    75c4:	2101      	movs	r1, #1
    75c6:	6838      	ldr	r0, [r7, #0]
    75c8:	4b30      	ldr	r3, [pc, #192]	; (768c <_tc_timer_init+0x294>)
    75ca:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    75cc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    75d0:	4928      	ldr	r1, [pc, #160]	; (7674 <_tc_timer_init+0x27c>)
    75d2:	4613      	mov	r3, r2
    75d4:	009b      	lsls	r3, r3, #2
    75d6:	4413      	add	r3, r2
    75d8:	009b      	lsls	r3, r3, #2
    75da:	440b      	add	r3, r1
    75dc:	330b      	adds	r3, #11
    75de:	781b      	ldrb	r3, [r3, #0]
    75e0:	4619      	mov	r1, r3
    75e2:	6838      	ldr	r0, [r7, #0]
    75e4:	4b2a      	ldr	r3, [pc, #168]	; (7690 <_tc_timer_init+0x298>)
    75e6:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    75e8:	6838      	ldr	r0, [r7, #0]
    75ea:	4b2a      	ldr	r3, [pc, #168]	; (7694 <_tc_timer_init+0x29c>)
    75ec:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    75ee:	6879      	ldr	r1, [r7, #4]
    75f0:	6838      	ldr	r0, [r7, #0]
    75f2:	4b29      	ldr	r3, [pc, #164]	; (7698 <_tc_timer_init+0x2a0>)
    75f4:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    75f6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    75fa:	491e      	ldr	r1, [pc, #120]	; (7674 <_tc_timer_init+0x27c>)
    75fc:	4613      	mov	r3, r2
    75fe:	009b      	lsls	r3, r3, #2
    7600:	4413      	add	r3, r2
    7602:	009b      	lsls	r3, r3, #2
    7604:	440b      	add	r3, r1
    7606:	3302      	adds	r3, #2
    7608:	f9b3 3000 	ldrsh.w	r3, [r3]
    760c:	4618      	mov	r0, r3
    760e:	4b23      	ldr	r3, [pc, #140]	; (769c <_tc_timer_init+0x2a4>)
    7610:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    7612:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7616:	4917      	ldr	r1, [pc, #92]	; (7674 <_tc_timer_init+0x27c>)
    7618:	4613      	mov	r3, r2
    761a:	009b      	lsls	r3, r3, #2
    761c:	4413      	add	r3, r2
    761e:	009b      	lsls	r3, r3, #2
    7620:	440b      	add	r3, r1
    7622:	3302      	adds	r3, #2
    7624:	f9b3 3000 	ldrsh.w	r3, [r3]
    7628:	4618      	mov	r0, r3
    762a:	4b1d      	ldr	r3, [pc, #116]	; (76a0 <_tc_timer_init+0x2a8>)
    762c:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    762e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7632:	4910      	ldr	r1, [pc, #64]	; (7674 <_tc_timer_init+0x27c>)
    7634:	4613      	mov	r3, r2
    7636:	009b      	lsls	r3, r3, #2
    7638:	4413      	add	r3, r2
    763a:	009b      	lsls	r3, r3, #2
    763c:	440b      	add	r3, r1
    763e:	3302      	adds	r3, #2
    7640:	f9b3 3000 	ldrsh.w	r3, [r3]
    7644:	4618      	mov	r0, r3
    7646:	4b17      	ldr	r3, [pc, #92]	; (76a4 <_tc_timer_init+0x2ac>)
    7648:	4798      	blx	r3

	return ERR_NONE;
    764a:	2300      	movs	r3, #0
}
    764c:	4618      	mov	r0, r3
    764e:	3710      	adds	r7, #16
    7650:	46bd      	mov	sp, r7
    7652:	bd80      	pop	{r7, pc}
    7654:	00007c49 	.word	0x00007c49
    7658:	00013408 	.word	0x00013408
    765c:	00002d4d 	.word	0x00002d4d
    7660:	0000706d 	.word	0x0000706d
    7664:	0000720d 	.word	0x0000720d
    7668:	000071bd 	.word	0x000071bd
    766c:	00007049 	.word	0x00007049
    7670:	0000723d 	.word	0x0000723d
    7674:	200000e0 	.word	0x200000e0
    7678:	0000729d 	.word	0x0000729d
    767c:	00007261 	.word	0x00007261
    7680:	0000727f 	.word	0x0000727f
    7684:	0000739d 	.word	0x0000739d
    7688:	00007339 	.word	0x00007339
    768c:	00007309 	.word	0x00007309
    7690:	000072bd 	.word	0x000072bd
    7694:	000070f1 	.word	0x000070f1
    7698:	00007cb1 	.word	0x00007cb1
    769c:	00006fc9 	.word	0x00006fc9
    76a0:	0000700d 	.word	0x0000700d
    76a4:	00006f8d 	.word	0x00006f8d

000076a8 <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    76a8:	b580      	push	{r7, lr}
    76aa:	b084      	sub	sp, #16
    76ac:	af00      	add	r7, sp, #0
    76ae:	6078      	str	r0, [r7, #4]
    76b0:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    76b2:	6838      	ldr	r0, [r7, #0]
    76b4:	4b73      	ldr	r3, [pc, #460]	; (7884 <_pwm_init+0x1dc>)
    76b6:	4798      	blx	r3
    76b8:	4603      	mov	r3, r0
    76ba:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    76bc:	687b      	ldr	r3, [r7, #4]
    76be:	683a      	ldr	r2, [r7, #0]
    76c0:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    76c2:	2101      	movs	r1, #1
    76c4:	6838      	ldr	r0, [r7, #0]
    76c6:	4b70      	ldr	r3, [pc, #448]	; (7888 <_pwm_init+0x1e0>)
    76c8:	4798      	blx	r3
    76ca:	4603      	mov	r3, r0
    76cc:	f083 0301 	eor.w	r3, r3, #1
    76d0:	b2db      	uxtb	r3, r3
    76d2:	2b00      	cmp	r3, #0
    76d4:	d011      	beq.n	76fa <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    76d6:	2102      	movs	r1, #2
    76d8:	6838      	ldr	r0, [r7, #0]
    76da:	4b6c      	ldr	r3, [pc, #432]	; (788c <_pwm_init+0x1e4>)
    76dc:	4798      	blx	r3
    76de:	4603      	mov	r3, r0
    76e0:	2b00      	cmp	r3, #0
    76e2:	d006      	beq.n	76f2 <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    76e4:	6838      	ldr	r0, [r7, #0]
    76e6:	4b6a      	ldr	r3, [pc, #424]	; (7890 <_pwm_init+0x1e8>)
    76e8:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    76ea:	2102      	movs	r1, #2
    76ec:	6838      	ldr	r0, [r7, #0]
    76ee:	4b69      	ldr	r3, [pc, #420]	; (7894 <_pwm_init+0x1ec>)
    76f0:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    76f2:	2101      	movs	r1, #1
    76f4:	6838      	ldr	r0, [r7, #0]
    76f6:	4b68      	ldr	r3, [pc, #416]	; (7898 <_pwm_init+0x1f0>)
    76f8:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    76fa:	2101      	movs	r1, #1
    76fc:	6838      	ldr	r0, [r7, #0]
    76fe:	4b65      	ldr	r3, [pc, #404]	; (7894 <_pwm_init+0x1ec>)
    7700:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    7702:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7706:	4965      	ldr	r1, [pc, #404]	; (789c <_pwm_init+0x1f4>)
    7708:	4613      	mov	r3, r2
    770a:	009b      	lsls	r3, r3, #2
    770c:	4413      	add	r3, r2
    770e:	009b      	lsls	r3, r3, #2
    7710:	440b      	add	r3, r1
    7712:	3304      	adds	r3, #4
    7714:	681b      	ldr	r3, [r3, #0]
    7716:	4619      	mov	r1, r3
    7718:	6838      	ldr	r0, [r7, #0]
    771a:	4b5f      	ldr	r3, [pc, #380]	; (7898 <_pwm_init+0x1f0>)
    771c:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    771e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7722:	495e      	ldr	r1, [pc, #376]	; (789c <_pwm_init+0x1f4>)
    7724:	4613      	mov	r3, r2
    7726:	009b      	lsls	r3, r3, #2
    7728:	4413      	add	r3, r2
    772a:	009b      	lsls	r3, r3, #2
    772c:	440b      	add	r3, r1
    772e:	330a      	adds	r3, #10
    7730:	781b      	ldrb	r3, [r3, #0]
    7732:	4619      	mov	r1, r3
    7734:	6838      	ldr	r0, [r7, #0]
    7736:	4b5a      	ldr	r3, [pc, #360]	; (78a0 <_pwm_init+0x1f8>)
    7738:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    773a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    773e:	4957      	ldr	r1, [pc, #348]	; (789c <_pwm_init+0x1f4>)
    7740:	4613      	mov	r3, r2
    7742:	009b      	lsls	r3, r3, #2
    7744:	4413      	add	r3, r2
    7746:	009b      	lsls	r3, r3, #2
    7748:	440b      	add	r3, r1
    774a:	3308      	adds	r3, #8
    774c:	881b      	ldrh	r3, [r3, #0]
    774e:	4619      	mov	r1, r3
    7750:	6838      	ldr	r0, [r7, #0]
    7752:	4b54      	ldr	r3, [pc, #336]	; (78a4 <_pwm_init+0x1fc>)
    7754:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    7756:	2103      	movs	r1, #3
    7758:	6838      	ldr	r0, [r7, #0]
    775a:	4b53      	ldr	r3, [pc, #332]	; (78a8 <_pwm_init+0x200>)
    775c:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    775e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7762:	494e      	ldr	r1, [pc, #312]	; (789c <_pwm_init+0x1f4>)
    7764:	4613      	mov	r3, r2
    7766:	009b      	lsls	r3, r3, #2
    7768:	4413      	add	r3, r2
    776a:	009b      	lsls	r3, r3, #2
    776c:	440b      	add	r3, r1
    776e:	3304      	adds	r3, #4
    7770:	681b      	ldr	r3, [r3, #0]
    7772:	f003 030c 	and.w	r3, r3, #12
    7776:	2b08      	cmp	r3, #8
    7778:	d11e      	bne.n	77b8 <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    777a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    777e:	4947      	ldr	r1, [pc, #284]	; (789c <_pwm_init+0x1f4>)
    7780:	4613      	mov	r3, r2
    7782:	009b      	lsls	r3, r3, #2
    7784:	4413      	add	r3, r2
    7786:	009b      	lsls	r3, r3, #2
    7788:	440b      	add	r3, r1
    778a:	330c      	adds	r3, #12
    778c:	681b      	ldr	r3, [r3, #0]
    778e:	461a      	mov	r2, r3
    7790:	2100      	movs	r1, #0
    7792:	6838      	ldr	r0, [r7, #0]
    7794:	4b45      	ldr	r3, [pc, #276]	; (78ac <_pwm_init+0x204>)
    7796:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    7798:	f997 200f 	ldrsb.w	r2, [r7, #15]
    779c:	493f      	ldr	r1, [pc, #252]	; (789c <_pwm_init+0x1f4>)
    779e:	4613      	mov	r3, r2
    77a0:	009b      	lsls	r3, r3, #2
    77a2:	4413      	add	r3, r2
    77a4:	009b      	lsls	r3, r3, #2
    77a6:	440b      	add	r3, r1
    77a8:	3310      	adds	r3, #16
    77aa:	681b      	ldr	r3, [r3, #0]
    77ac:	461a      	mov	r2, r3
    77ae:	2101      	movs	r1, #1
    77b0:	6838      	ldr	r0, [r7, #0]
    77b2:	4b3e      	ldr	r3, [pc, #248]	; (78ac <_pwm_init+0x204>)
    77b4:	4798      	blx	r3
    77b6:	e031      	b.n	781c <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    77b8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    77bc:	4937      	ldr	r1, [pc, #220]	; (789c <_pwm_init+0x1f4>)
    77be:	4613      	mov	r3, r2
    77c0:	009b      	lsls	r3, r3, #2
    77c2:	4413      	add	r3, r2
    77c4:	009b      	lsls	r3, r3, #2
    77c6:	440b      	add	r3, r1
    77c8:	3304      	adds	r3, #4
    77ca:	681b      	ldr	r3, [r3, #0]
    77cc:	f003 030c 	and.w	r3, r3, #12
    77d0:	2b00      	cmp	r3, #0
    77d2:	d120      	bne.n	7816 <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    77d4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    77d8:	4930      	ldr	r1, [pc, #192]	; (789c <_pwm_init+0x1f4>)
    77da:	4613      	mov	r3, r2
    77dc:	009b      	lsls	r3, r3, #2
    77de:	4413      	add	r3, r2
    77e0:	009b      	lsls	r3, r3, #2
    77e2:	440b      	add	r3, r1
    77e4:	330c      	adds	r3, #12
    77e6:	681b      	ldr	r3, [r3, #0]
    77e8:	b29b      	uxth	r3, r3
    77ea:	461a      	mov	r2, r3
    77ec:	2100      	movs	r1, #0
    77ee:	6838      	ldr	r0, [r7, #0]
    77f0:	4b2f      	ldr	r3, [pc, #188]	; (78b0 <_pwm_init+0x208>)
    77f2:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    77f4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    77f8:	4928      	ldr	r1, [pc, #160]	; (789c <_pwm_init+0x1f4>)
    77fa:	4613      	mov	r3, r2
    77fc:	009b      	lsls	r3, r3, #2
    77fe:	4413      	add	r3, r2
    7800:	009b      	lsls	r3, r3, #2
    7802:	440b      	add	r3, r1
    7804:	3310      	adds	r3, #16
    7806:	681b      	ldr	r3, [r3, #0]
    7808:	b29b      	uxth	r3, r3
    780a:	461a      	mov	r2, r3
    780c:	2101      	movs	r1, #1
    780e:	6838      	ldr	r0, [r7, #0]
    7810:	4b27      	ldr	r3, [pc, #156]	; (78b0 <_pwm_init+0x208>)
    7812:	4798      	blx	r3
    7814:	e002      	b.n	781c <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    7816:	f04f 33ff 	mov.w	r3, #4294967295
    781a:	e02e      	b.n	787a <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    781c:	6879      	ldr	r1, [r7, #4]
    781e:	6838      	ldr	r0, [r7, #0]
    7820:	4b24      	ldr	r3, [pc, #144]	; (78b4 <_pwm_init+0x20c>)
    7822:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    7824:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7828:	491c      	ldr	r1, [pc, #112]	; (789c <_pwm_init+0x1f4>)
    782a:	4613      	mov	r3, r2
    782c:	009b      	lsls	r3, r3, #2
    782e:	4413      	add	r3, r2
    7830:	009b      	lsls	r3, r3, #2
    7832:	440b      	add	r3, r1
    7834:	3302      	adds	r3, #2
    7836:	f9b3 3000 	ldrsh.w	r3, [r3]
    783a:	4618      	mov	r0, r3
    783c:	4b1e      	ldr	r3, [pc, #120]	; (78b8 <_pwm_init+0x210>)
    783e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    7840:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7844:	4915      	ldr	r1, [pc, #84]	; (789c <_pwm_init+0x1f4>)
    7846:	4613      	mov	r3, r2
    7848:	009b      	lsls	r3, r3, #2
    784a:	4413      	add	r3, r2
    784c:	009b      	lsls	r3, r3, #2
    784e:	440b      	add	r3, r1
    7850:	3302      	adds	r3, #2
    7852:	f9b3 3000 	ldrsh.w	r3, [r3]
    7856:	4618      	mov	r0, r3
    7858:	4b18      	ldr	r3, [pc, #96]	; (78bc <_pwm_init+0x214>)
    785a:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    785c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7860:	490e      	ldr	r1, [pc, #56]	; (789c <_pwm_init+0x1f4>)
    7862:	4613      	mov	r3, r2
    7864:	009b      	lsls	r3, r3, #2
    7866:	4413      	add	r3, r2
    7868:	009b      	lsls	r3, r3, #2
    786a:	440b      	add	r3, r1
    786c:	3302      	adds	r3, #2
    786e:	f9b3 3000 	ldrsh.w	r3, [r3]
    7872:	4618      	mov	r0, r3
    7874:	4b12      	ldr	r3, [pc, #72]	; (78c0 <_pwm_init+0x218>)
    7876:	4798      	blx	r3

	return 0;
    7878:	2300      	movs	r3, #0
}
    787a:	4618      	mov	r0, r3
    787c:	3710      	adds	r7, #16
    787e:	46bd      	mov	sp, r7
    7880:	bd80      	pop	{r7, pc}
    7882:	bf00      	nop
    7884:	00007c49 	.word	0x00007c49
    7888:	0000706d 	.word	0x0000706d
    788c:	0000720d 	.word	0x0000720d
    7890:	000071bd 	.word	0x000071bd
    7894:	00007049 	.word	0x00007049
    7898:	0000723d 	.word	0x0000723d
    789c:	200000e0 	.word	0x200000e0
    78a0:	0000729d 	.word	0x0000729d
    78a4:	00007261 	.word	0x00007261
    78a8:	0000727f 	.word	0x0000727f
    78ac:	0000739d 	.word	0x0000739d
    78b0:	00007339 	.word	0x00007339
    78b4:	00007cb1 	.word	0x00007cb1
    78b8:	00006fc9 	.word	0x00006fc9
    78bc:	0000700d 	.word	0x0000700d
    78c0:	00006f8d 	.word	0x00006f8d

000078c4 <_tc_timer_deinit>:
/**
 * \brief De-initialize TC
 */
void _tc_timer_deinit(struct _timer_device *const device)
{
    78c4:	b580      	push	{r7, lr}
    78c6:	b084      	sub	sp, #16
    78c8:	af00      	add	r7, sp, #0
    78ca:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    78cc:	687b      	ldr	r3, [r7, #4]
    78ce:	68db      	ldr	r3, [r3, #12]
    78d0:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    78d2:	68f8      	ldr	r0, [r7, #12]
    78d4:	4b10      	ldr	r3, [pc, #64]	; (7918 <_tc_timer_deinit+0x54>)
    78d6:	4798      	blx	r3
    78d8:	4603      	mov	r3, r0
    78da:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    78dc:	22f9      	movs	r2, #249	; 0xf9
    78de:	490f      	ldr	r1, [pc, #60]	; (791c <_tc_timer_deinit+0x58>)
    78e0:	2001      	movs	r0, #1
    78e2:	4b0f      	ldr	r3, [pc, #60]	; (7920 <_tc_timer_deinit+0x5c>)
    78e4:	4798      	blx	r3

	NVIC_DisableIRQ(_tcs[i].irq);
    78e6:	f997 200b 	ldrsb.w	r2, [r7, #11]
    78ea:	490e      	ldr	r1, [pc, #56]	; (7924 <_tc_timer_deinit+0x60>)
    78ec:	4613      	mov	r3, r2
    78ee:	009b      	lsls	r3, r3, #2
    78f0:	4413      	add	r3, r2
    78f2:	009b      	lsls	r3, r3, #2
    78f4:	440b      	add	r3, r1
    78f6:	3302      	adds	r3, #2
    78f8:	f9b3 3000 	ldrsh.w	r3, [r3]
    78fc:	4618      	mov	r0, r3
    78fe:	4b0a      	ldr	r3, [pc, #40]	; (7928 <_tc_timer_deinit+0x64>)
    7900:	4798      	blx	r3

	hri_tc_clear_CTRLA_ENABLE_bit(hw);
    7902:	68f8      	ldr	r0, [r7, #12]
    7904:	4b09      	ldr	r3, [pc, #36]	; (792c <_tc_timer_deinit+0x68>)
    7906:	4798      	blx	r3
	hri_tc_set_CTRLA_SWRST_bit(hw);
    7908:	68f8      	ldr	r0, [r7, #12]
    790a:	4b09      	ldr	r3, [pc, #36]	; (7930 <_tc_timer_deinit+0x6c>)
    790c:	4798      	blx	r3
}
    790e:	bf00      	nop
    7910:	3710      	adds	r7, #16
    7912:	46bd      	mov	sp, r7
    7914:	bd80      	pop	{r7, pc}
    7916:	bf00      	nop
    7918:	00007c49 	.word	0x00007c49
    791c:	00013408 	.word	0x00013408
    7920:	00002d4d 	.word	0x00002d4d
    7924:	200000e0 	.word	0x200000e0
    7928:	00006fc9 	.word	0x00006fc9
    792c:	000071bd 	.word	0x000071bd
    7930:	00007135 	.word	0x00007135

00007934 <_tc_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
    7934:	b580      	push	{r7, lr}
    7936:	b082      	sub	sp, #8
    7938:	af00      	add	r7, sp, #0
    793a:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    793c:	687b      	ldr	r3, [r7, #4]
    793e:	68db      	ldr	r3, [r3, #12]
    7940:	4618      	mov	r0, r3
    7942:	4b03      	ldr	r3, [pc, #12]	; (7950 <_tc_timer_start+0x1c>)
    7944:	4798      	blx	r3
}
    7946:	bf00      	nop
    7948:	3708      	adds	r7, #8
    794a:	46bd      	mov	sp, r7
    794c:	bd80      	pop	{r7, pc}
    794e:	bf00      	nop
    7950:	0000715d 	.word	0x0000715d

00007954 <_tc_timer_stop>:
}
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
    7954:	b580      	push	{r7, lr}
    7956:	b082      	sub	sp, #8
    7958:	af00      	add	r7, sp, #0
    795a:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    795c:	687b      	ldr	r3, [r7, #4]
    795e:	68db      	ldr	r3, [r3, #12]
    7960:	4618      	mov	r0, r3
    7962:	4b03      	ldr	r3, [pc, #12]	; (7970 <_tc_timer_stop+0x1c>)
    7964:	4798      	blx	r3
}
    7966:	bf00      	nop
    7968:	3708      	adds	r7, #8
    796a:	46bd      	mov	sp, r7
    796c:	bd80      	pop	{r7, pc}
    796e:	bf00      	nop
    7970:	000071bd 	.word	0x000071bd

00007974 <_tc_timer_set_period>:
}
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    7974:	b580      	push	{r7, lr}
    7976:	b084      	sub	sp, #16
    7978:	af00      	add	r7, sp, #0
    797a:	6078      	str	r0, [r7, #4]
    797c:	6039      	str	r1, [r7, #0]
	void *const hw = device->hw;
    797e:	687b      	ldr	r3, [r7, #4]
    7980:	68db      	ldr	r3, [r3, #12]
    7982:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7984:	68f8      	ldr	r0, [r7, #12]
    7986:	4b14      	ldr	r3, [pc, #80]	; (79d8 <_tc_timer_set_period+0x64>)
    7988:	4798      	blx	r3
    798a:	4603      	mov	r3, r0
    798c:	2b02      	cmp	r3, #2
    798e:	d105      	bne.n	799c <_tc_timer_set_period+0x28>
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
    7990:	683a      	ldr	r2, [r7, #0]
    7992:	2100      	movs	r1, #0
    7994:	68f8      	ldr	r0, [r7, #12]
    7996:	4b11      	ldr	r3, [pc, #68]	; (79dc <_tc_timer_set_period+0x68>)
    7998:	4798      	blx	r3
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount8_write_PER_reg(hw, clock_cycles);
	}
}
    799a:	e019      	b.n	79d0 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    799c:	68f8      	ldr	r0, [r7, #12]
    799e:	4b0e      	ldr	r3, [pc, #56]	; (79d8 <_tc_timer_set_period+0x64>)
    79a0:	4798      	blx	r3
    79a2:	4603      	mov	r3, r0
    79a4:	2b00      	cmp	r3, #0
    79a6:	d107      	bne.n	79b8 <_tc_timer_set_period+0x44>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    79a8:	683b      	ldr	r3, [r7, #0]
    79aa:	b29b      	uxth	r3, r3
    79ac:	461a      	mov	r2, r3
    79ae:	2100      	movs	r1, #0
    79b0:	68f8      	ldr	r0, [r7, #12]
    79b2:	4b0b      	ldr	r3, [pc, #44]	; (79e0 <_tc_timer_set_period+0x6c>)
    79b4:	4798      	blx	r3
}
    79b6:	e00b      	b.n	79d0 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    79b8:	68f8      	ldr	r0, [r7, #12]
    79ba:	4b07      	ldr	r3, [pc, #28]	; (79d8 <_tc_timer_set_period+0x64>)
    79bc:	4798      	blx	r3
    79be:	4603      	mov	r3, r0
    79c0:	2b01      	cmp	r3, #1
    79c2:	d105      	bne.n	79d0 <_tc_timer_set_period+0x5c>
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    79c4:	683b      	ldr	r3, [r7, #0]
    79c6:	b2db      	uxtb	r3, r3
    79c8:	4619      	mov	r1, r3
    79ca:	68f8      	ldr	r0, [r7, #12]
    79cc:	4b05      	ldr	r3, [pc, #20]	; (79e4 <_tc_timer_set_period+0x70>)
    79ce:	4798      	blx	r3
}
    79d0:	bf00      	nop
    79d2:	3710      	adds	r7, #16
    79d4:	46bd      	mov	sp, r7
    79d6:	bd80      	pop	{r7, pc}
    79d8:	000071e5 	.word	0x000071e5
    79dc:	0000739d 	.word	0x0000739d
    79e0:	00007339 	.word	0x00007339
    79e4:	000072bd 	.word	0x000072bd

000079e8 <_tc_timer_get_period>:
}
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
    79e8:	b580      	push	{r7, lr}
    79ea:	b084      	sub	sp, #16
    79ec:	af00      	add	r7, sp, #0
    79ee:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    79f0:	687b      	ldr	r3, [r7, #4]
    79f2:	68db      	ldr	r3, [r3, #12]
    79f4:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    79f6:	68f8      	ldr	r0, [r7, #12]
    79f8:	4b13      	ldr	r3, [pc, #76]	; (7a48 <_tc_timer_get_period+0x60>)
    79fa:	4798      	blx	r3
    79fc:	4603      	mov	r3, r0
    79fe:	2b02      	cmp	r3, #2
    7a00:	d105      	bne.n	7a0e <_tc_timer_get_period+0x26>
		return hri_tccount32_read_CC_reg(hw, 0);
    7a02:	2100      	movs	r1, #0
    7a04:	68f8      	ldr	r0, [r7, #12]
    7a06:	4b11      	ldr	r3, [pc, #68]	; (7a4c <_tc_timer_get_period+0x64>)
    7a08:	4798      	blx	r3
    7a0a:	4603      	mov	r3, r0
    7a0c:	e017      	b.n	7a3e <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7a0e:	68f8      	ldr	r0, [r7, #12]
    7a10:	4b0d      	ldr	r3, [pc, #52]	; (7a48 <_tc_timer_get_period+0x60>)
    7a12:	4798      	blx	r3
    7a14:	4603      	mov	r3, r0
    7a16:	2b00      	cmp	r3, #0
    7a18:	d105      	bne.n	7a26 <_tc_timer_get_period+0x3e>
		return hri_tccount16_read_CC_reg(hw, 0);
    7a1a:	2100      	movs	r1, #0
    7a1c:	68f8      	ldr	r0, [r7, #12]
    7a1e:	4b0c      	ldr	r3, [pc, #48]	; (7a50 <_tc_timer_get_period+0x68>)
    7a20:	4798      	blx	r3
    7a22:	4603      	mov	r3, r0
    7a24:	e00b      	b.n	7a3e <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7a26:	68f8      	ldr	r0, [r7, #12]
    7a28:	4b07      	ldr	r3, [pc, #28]	; (7a48 <_tc_timer_get_period+0x60>)
    7a2a:	4798      	blx	r3
    7a2c:	4603      	mov	r3, r0
    7a2e:	2b01      	cmp	r3, #1
    7a30:	d104      	bne.n	7a3c <_tc_timer_get_period+0x54>
		return hri_tccount8_read_PER_reg(hw);
    7a32:	68f8      	ldr	r0, [r7, #12]
    7a34:	4b07      	ldr	r3, [pc, #28]	; (7a54 <_tc_timer_get_period+0x6c>)
    7a36:	4798      	blx	r3
    7a38:	4603      	mov	r3, r0
    7a3a:	e000      	b.n	7a3e <_tc_timer_get_period+0x56>
	}

	return 0;
    7a3c:	2300      	movs	r3, #0
}
    7a3e:	4618      	mov	r0, r3
    7a40:	3710      	adds	r7, #16
    7a42:	46bd      	mov	sp, r7
    7a44:	bd80      	pop	{r7, pc}
    7a46:	bf00      	nop
    7a48:	000071e5 	.word	0x000071e5
    7a4c:	000073cd 	.word	0x000073cd
    7a50:	0000736d 	.word	0x0000736d
    7a54:	000072e5 	.word	0x000072e5

00007a58 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
    7a58:	b580      	push	{r7, lr}
    7a5a:	b082      	sub	sp, #8
    7a5c:	af00      	add	r7, sp, #0
    7a5e:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    7a60:	687b      	ldr	r3, [r7, #4]
    7a62:	68db      	ldr	r3, [r3, #12]
    7a64:	4618      	mov	r0, r3
    7a66:	4b03      	ldr	r3, [pc, #12]	; (7a74 <_tc_timer_is_started+0x1c>)
    7a68:	4798      	blx	r3
    7a6a:	4603      	mov	r3, r0
}
    7a6c:	4618      	mov	r0, r3
    7a6e:	3708      	adds	r7, #8
    7a70:	46bd      	mov	sp, r7
    7a72:	bd80      	pop	{r7, pc}
    7a74:	00007185 	.word	0x00007185

00007a78 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    7a78:	b480      	push	{r7}
    7a7a:	af00      	add	r7, sp, #0
	return &_tc_timer_functions;
    7a7c:	4b02      	ldr	r3, [pc, #8]	; (7a88 <_tc_get_timer+0x10>)
}
    7a7e:	4618      	mov	r0, r3
    7a80:	46bd      	mov	sp, r7
    7a82:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a86:	4770      	bx	lr
    7a88:	20000158 	.word	0x20000158

00007a8c <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    7a8c:	b480      	push	{r7}
    7a8e:	af00      	add	r7, sp, #0
	return NULL;
    7a90:	2300      	movs	r3, #0
}
    7a92:	4618      	mov	r0, r3
    7a94:	46bd      	mov	sp, r7
    7a96:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a9a:	4770      	bx	lr

00007a9c <_tc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tc_timer_set_irq(struct _timer_device *const device)
{
    7a9c:	b580      	push	{r7, lr}
    7a9e:	b084      	sub	sp, #16
    7aa0:	af00      	add	r7, sp, #0
    7aa2:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7aa4:	687b      	ldr	r3, [r7, #4]
    7aa6:	68db      	ldr	r3, [r3, #12]
    7aa8:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    7aaa:	68f8      	ldr	r0, [r7, #12]
    7aac:	4b0e      	ldr	r3, [pc, #56]	; (7ae8 <_tc_timer_set_irq+0x4c>)
    7aae:	4798      	blx	r3
    7ab0:	4603      	mov	r3, r0
    7ab2:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    7ab4:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
    7ab8:	490c      	ldr	r1, [pc, #48]	; (7aec <_tc_timer_set_irq+0x50>)
    7aba:	2001      	movs	r0, #1
    7abc:	4b0c      	ldr	r3, [pc, #48]	; (7af0 <_tc_timer_set_irq+0x54>)
    7abe:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    7ac0:	f997 200b 	ldrsb.w	r2, [r7, #11]
    7ac4:	490b      	ldr	r1, [pc, #44]	; (7af4 <_tc_timer_set_irq+0x58>)
    7ac6:	4613      	mov	r3, r2
    7ac8:	009b      	lsls	r3, r3, #2
    7aca:	4413      	add	r3, r2
    7acc:	009b      	lsls	r3, r3, #2
    7ace:	440b      	add	r3, r1
    7ad0:	3302      	adds	r3, #2
    7ad2:	f9b3 3000 	ldrsh.w	r3, [r3]
    7ad6:	b2db      	uxtb	r3, r3
    7ad8:	4618      	mov	r0, r3
    7ada:	4b07      	ldr	r3, [pc, #28]	; (7af8 <_tc_timer_set_irq+0x5c>)
    7adc:	4798      	blx	r3
}
    7ade:	bf00      	nop
    7ae0:	3710      	adds	r7, #16
    7ae2:	46bd      	mov	sp, r7
    7ae4:	bd80      	pop	{r7, pc}
    7ae6:	bf00      	nop
    7ae8:	00007c49 	.word	0x00007c49
    7aec:	00013408 	.word	0x00013408
    7af0:	00002d4d 	.word	0x00002d4d
    7af4:	200000e0 	.word	0x200000e0
    7af8:	00003b7d 	.word	0x00003b7d

00007afc <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    7afc:	b580      	push	{r7, lr}
    7afe:	b084      	sub	sp, #16
    7b00:	af00      	add	r7, sp, #0
    7b02:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7b04:	687b      	ldr	r3, [r7, #4]
    7b06:	68db      	ldr	r3, [r3, #12]
    7b08:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    7b0a:	68f8      	ldr	r0, [r7, #12]
    7b0c:	4b07      	ldr	r3, [pc, #28]	; (7b2c <tc_interrupt_handler+0x30>)
    7b0e:	4798      	blx	r3
    7b10:	4603      	mov	r3, r0
    7b12:	2b00      	cmp	r3, #0
    7b14:	d006      	beq.n	7b24 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    7b16:	68f8      	ldr	r0, [r7, #12]
    7b18:	4b05      	ldr	r3, [pc, #20]	; (7b30 <tc_interrupt_handler+0x34>)
    7b1a:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    7b1c:	687b      	ldr	r3, [r7, #4]
    7b1e:	681b      	ldr	r3, [r3, #0]
    7b20:	6878      	ldr	r0, [r7, #4]
    7b22:	4798      	blx	r3
	}
}
    7b24:	bf00      	nop
    7b26:	3710      	adds	r7, #16
    7b28:	46bd      	mov	sp, r7
    7b2a:	bd80      	pop	{r7, pc}
    7b2c:	00007095 	.word	0x00007095
    7b30:	000070bd 	.word	0x000070bd

00007b34 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    7b34:	b580      	push	{r7, lr}
    7b36:	b084      	sub	sp, #16
    7b38:	af00      	add	r7, sp, #0
    7b3a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7b3c:	687b      	ldr	r3, [r7, #4]
    7b3e:	691b      	ldr	r3, [r3, #16]
    7b40:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    7b42:	68f8      	ldr	r0, [r7, #12]
    7b44:	4b12      	ldr	r3, [pc, #72]	; (7b90 <tc_pwm_interrupt_handler+0x5c>)
    7b46:	4798      	blx	r3
    7b48:	4603      	mov	r3, r0
    7b4a:	2b00      	cmp	r3, #0
    7b4c:	d00a      	beq.n	7b64 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    7b4e:	68f8      	ldr	r0, [r7, #12]
    7b50:	4b10      	ldr	r3, [pc, #64]	; (7b94 <tc_pwm_interrupt_handler+0x60>)
    7b52:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    7b54:	687b      	ldr	r3, [r7, #4]
    7b56:	681b      	ldr	r3, [r3, #0]
    7b58:	2b00      	cmp	r3, #0
    7b5a:	d003      	beq.n	7b64 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    7b5c:	687b      	ldr	r3, [r7, #4]
    7b5e:	681b      	ldr	r3, [r3, #0]
    7b60:	6878      	ldr	r0, [r7, #4]
    7b62:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    7b64:	68f8      	ldr	r0, [r7, #12]
    7b66:	4b0c      	ldr	r3, [pc, #48]	; (7b98 <tc_pwm_interrupt_handler+0x64>)
    7b68:	4798      	blx	r3
    7b6a:	4603      	mov	r3, r0
    7b6c:	2b00      	cmp	r3, #0
    7b6e:	d00a      	beq.n	7b86 <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    7b70:	68f8      	ldr	r0, [r7, #12]
    7b72:	4b0a      	ldr	r3, [pc, #40]	; (7b9c <tc_pwm_interrupt_handler+0x68>)
    7b74:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    7b76:	687b      	ldr	r3, [r7, #4]
    7b78:	685b      	ldr	r3, [r3, #4]
    7b7a:	2b00      	cmp	r3, #0
    7b7c:	d003      	beq.n	7b86 <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    7b7e:	687b      	ldr	r3, [r7, #4]
    7b80:	685b      	ldr	r3, [r3, #4]
    7b82:	6878      	ldr	r0, [r7, #4]
    7b84:	4798      	blx	r3
		}
	}
}
    7b86:	bf00      	nop
    7b88:	3710      	adds	r7, #16
    7b8a:	46bd      	mov	sp, r7
    7b8c:	bd80      	pop	{r7, pc}
    7b8e:	bf00      	nop
    7b90:	00007095 	.word	0x00007095
    7b94:	000070bd 	.word	0x000070bd
    7b98:	0000710b 	.word	0x0000710b
    7b9c:	000070d7 	.word	0x000070d7

00007ba0 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    7ba0:	b580      	push	{r7, lr}
    7ba2:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    7ba4:	4b03      	ldr	r3, [pc, #12]	; (7bb4 <TC0_Handler+0x14>)
    7ba6:	681b      	ldr	r3, [r3, #0]
    7ba8:	4618      	mov	r0, r3
    7baa:	4b03      	ldr	r3, [pc, #12]	; (7bb8 <TC0_Handler+0x18>)
    7bac:	4798      	blx	r3
}
    7bae:	bf00      	nop
    7bb0:	bd80      	pop	{r7, pc}
    7bb2:	bf00      	nop
    7bb4:	20000cf4 	.word	0x20000cf4
    7bb8:	00007afd 	.word	0x00007afd

00007bbc <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    7bbc:	b580      	push	{r7, lr}
    7bbe:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    7bc0:	4b03      	ldr	r3, [pc, #12]	; (7bd0 <TC2_Handler+0x14>)
    7bc2:	681b      	ldr	r3, [r3, #0]
    7bc4:	4618      	mov	r0, r3
    7bc6:	4b03      	ldr	r3, [pc, #12]	; (7bd4 <TC2_Handler+0x18>)
    7bc8:	4798      	blx	r3
}
    7bca:	bf00      	nop
    7bcc:	bd80      	pop	{r7, pc}
    7bce:	bf00      	nop
    7bd0:	20000cf8 	.word	0x20000cf8
    7bd4:	00007afd 	.word	0x00007afd

00007bd8 <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    7bd8:	b580      	push	{r7, lr}
    7bda:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    7bdc:	4b03      	ldr	r3, [pc, #12]	; (7bec <TC4_Handler+0x14>)
    7bde:	681b      	ldr	r3, [r3, #0]
    7be0:	4618      	mov	r0, r3
    7be2:	4b03      	ldr	r3, [pc, #12]	; (7bf0 <TC4_Handler+0x18>)
    7be4:	4798      	blx	r3
}
    7be6:	bf00      	nop
    7be8:	bd80      	pop	{r7, pc}
    7bea:	bf00      	nop
    7bec:	20000cfc 	.word	0x20000cfc
    7bf0:	00007afd 	.word	0x00007afd

00007bf4 <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    7bf4:	b580      	push	{r7, lr}
    7bf6:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    7bf8:	4b03      	ldr	r3, [pc, #12]	; (7c08 <TC5_Handler+0x14>)
    7bfa:	681b      	ldr	r3, [r3, #0]
    7bfc:	4618      	mov	r0, r3
    7bfe:	4b03      	ldr	r3, [pc, #12]	; (7c0c <TC5_Handler+0x18>)
    7c00:	4798      	blx	r3
}
    7c02:	bf00      	nop
    7c04:	bd80      	pop	{r7, pc}
    7c06:	bf00      	nop
    7c08:	20000d00 	.word	0x20000d00
    7c0c:	00007afd 	.word	0x00007afd

00007c10 <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
    7c10:	b580      	push	{r7, lr}
    7c12:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc6_dev);
    7c14:	4b03      	ldr	r3, [pc, #12]	; (7c24 <TC6_Handler+0x14>)
    7c16:	681b      	ldr	r3, [r3, #0]
    7c18:	4618      	mov	r0, r3
    7c1a:	4b03      	ldr	r3, [pc, #12]	; (7c28 <TC6_Handler+0x18>)
    7c1c:	4798      	blx	r3
}
    7c1e:	bf00      	nop
    7c20:	bd80      	pop	{r7, pc}
    7c22:	bf00      	nop
    7c24:	20000d04 	.word	0x20000d04
    7c28:	00007afd 	.word	0x00007afd

00007c2c <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    7c2c:	b580      	push	{r7, lr}
    7c2e:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    7c30:	4b03      	ldr	r3, [pc, #12]	; (7c40 <TC7_Handler+0x14>)
    7c32:	681b      	ldr	r3, [r3, #0]
    7c34:	4618      	mov	r0, r3
    7c36:	4b03      	ldr	r3, [pc, #12]	; (7c44 <TC7_Handler+0x18>)
    7c38:	4798      	blx	r3
}
    7c3a:	bf00      	nop
    7c3c:	bd80      	pop	{r7, pc}
    7c3e:	bf00      	nop
    7c40:	20000d08 	.word	0x20000d08
    7c44:	00007b35 	.word	0x00007b35

00007c48 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    7c48:	b580      	push	{r7, lr}
    7c4a:	b084      	sub	sp, #16
    7c4c:	af00      	add	r7, sp, #0
    7c4e:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    7c50:	6878      	ldr	r0, [r7, #4]
    7c52:	4b13      	ldr	r3, [pc, #76]	; (7ca0 <get_tc_index+0x58>)
    7c54:	4798      	blx	r3
    7c56:	4603      	mov	r3, r0
    7c58:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    7c5a:	2300      	movs	r3, #0
    7c5c:	73fb      	strb	r3, [r7, #15]
    7c5e:	e010      	b.n	7c82 <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    7c60:	7bfa      	ldrb	r2, [r7, #15]
    7c62:	4910      	ldr	r1, [pc, #64]	; (7ca4 <get_tc_index+0x5c>)
    7c64:	4613      	mov	r3, r2
    7c66:	009b      	lsls	r3, r3, #2
    7c68:	4413      	add	r3, r2
    7c6a:	009b      	lsls	r3, r3, #2
    7c6c:	440b      	add	r3, r1
    7c6e:	781b      	ldrb	r3, [r3, #0]
    7c70:	7bba      	ldrb	r2, [r7, #14]
    7c72:	429a      	cmp	r2, r3
    7c74:	d102      	bne.n	7c7c <get_tc_index+0x34>
			return i;
    7c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7c7a:	e00d      	b.n	7c98 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    7c7c:	7bfb      	ldrb	r3, [r7, #15]
    7c7e:	3301      	adds	r3, #1
    7c80:	73fb      	strb	r3, [r7, #15]
    7c82:	7bfb      	ldrb	r3, [r7, #15]
    7c84:	2b05      	cmp	r3, #5
    7c86:	d9eb      	bls.n	7c60 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    7c88:	f240 221d 	movw	r2, #541	; 0x21d
    7c8c:	4906      	ldr	r1, [pc, #24]	; (7ca8 <get_tc_index+0x60>)
    7c8e:	2000      	movs	r0, #0
    7c90:	4b06      	ldr	r3, [pc, #24]	; (7cac <get_tc_index+0x64>)
    7c92:	4798      	blx	r3
	return -1;
    7c94:	f04f 33ff 	mov.w	r3, #4294967295
}
    7c98:	4618      	mov	r0, r3
    7c9a:	3710      	adds	r7, #16
    7c9c:	46bd      	mov	sp, r7
    7c9e:	bd80      	pop	{r7, pc}
    7ca0:	00007d4d 	.word	0x00007d4d
    7ca4:	200000e0 	.word	0x200000e0
    7ca8:	00013408 	.word	0x00013408
    7cac:	00002d4d 	.word	0x00002d4d

00007cb0 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    7cb0:	b480      	push	{r7}
    7cb2:	b083      	sub	sp, #12
    7cb4:	af00      	add	r7, sp, #0
    7cb6:	6078      	str	r0, [r7, #4]
    7cb8:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    7cba:	687b      	ldr	r3, [r7, #4]
    7cbc:	4a17      	ldr	r2, [pc, #92]	; (7d1c <_tc_init_irq_param+0x6c>)
    7cbe:	4293      	cmp	r3, r2
    7cc0:	d102      	bne.n	7cc8 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    7cc2:	4a17      	ldr	r2, [pc, #92]	; (7d20 <_tc_init_irq_param+0x70>)
    7cc4:	683b      	ldr	r3, [r7, #0]
    7cc6:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    7cc8:	687b      	ldr	r3, [r7, #4]
    7cca:	4a16      	ldr	r2, [pc, #88]	; (7d24 <_tc_init_irq_param+0x74>)
    7ccc:	4293      	cmp	r3, r2
    7cce:	d102      	bne.n	7cd6 <_tc_init_irq_param+0x26>
		_tc2_dev = (struct _timer_device *)dev;
    7cd0:	4a15      	ldr	r2, [pc, #84]	; (7d28 <_tc_init_irq_param+0x78>)
    7cd2:	683b      	ldr	r3, [r7, #0]
    7cd4:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    7cd6:	687b      	ldr	r3, [r7, #4]
    7cd8:	4a14      	ldr	r2, [pc, #80]	; (7d2c <_tc_init_irq_param+0x7c>)
    7cda:	4293      	cmp	r3, r2
    7cdc:	d102      	bne.n	7ce4 <_tc_init_irq_param+0x34>
		_tc4_dev = (struct _timer_device *)dev;
    7cde:	4a14      	ldr	r2, [pc, #80]	; (7d30 <_tc_init_irq_param+0x80>)
    7ce0:	683b      	ldr	r3, [r7, #0]
    7ce2:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    7ce4:	687b      	ldr	r3, [r7, #4]
    7ce6:	4a13      	ldr	r2, [pc, #76]	; (7d34 <_tc_init_irq_param+0x84>)
    7ce8:	4293      	cmp	r3, r2
    7cea:	d102      	bne.n	7cf2 <_tc_init_irq_param+0x42>
		_tc5_dev = (struct _timer_device *)dev;
    7cec:	4a12      	ldr	r2, [pc, #72]	; (7d38 <_tc_init_irq_param+0x88>)
    7cee:	683b      	ldr	r3, [r7, #0]
    7cf0:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC6) {
    7cf2:	687b      	ldr	r3, [r7, #4]
    7cf4:	4a11      	ldr	r2, [pc, #68]	; (7d3c <_tc_init_irq_param+0x8c>)
    7cf6:	4293      	cmp	r3, r2
    7cf8:	d102      	bne.n	7d00 <_tc_init_irq_param+0x50>
		_tc6_dev = (struct _timer_device *)dev;
    7cfa:	4a11      	ldr	r2, [pc, #68]	; (7d40 <_tc_init_irq_param+0x90>)
    7cfc:	683b      	ldr	r3, [r7, #0]
    7cfe:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    7d00:	687b      	ldr	r3, [r7, #4]
    7d02:	4a10      	ldr	r2, [pc, #64]	; (7d44 <_tc_init_irq_param+0x94>)
    7d04:	4293      	cmp	r3, r2
    7d06:	d102      	bne.n	7d0e <_tc_init_irq_param+0x5e>
		_tc7_dev = (struct _pwm_device *)dev;
    7d08:	4a0f      	ldr	r2, [pc, #60]	; (7d48 <_tc_init_irq_param+0x98>)
    7d0a:	683b      	ldr	r3, [r7, #0]
    7d0c:	6013      	str	r3, [r2, #0]
	}
}
    7d0e:	bf00      	nop
    7d10:	370c      	adds	r7, #12
    7d12:	46bd      	mov	sp, r7
    7d14:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d18:	4770      	bx	lr
    7d1a:	bf00      	nop
    7d1c:	40003800 	.word	0x40003800
    7d20:	20000cf4 	.word	0x20000cf4
    7d24:	4101a000 	.word	0x4101a000
    7d28:	20000cf8 	.word	0x20000cf8
    7d2c:	42001400 	.word	0x42001400
    7d30:	20000cfc 	.word	0x20000cfc
    7d34:	42001800 	.word	0x42001800
    7d38:	20000d00 	.word	0x20000d00
    7d3c:	43001400 	.word	0x43001400
    7d40:	20000d04 	.word	0x20000d04
    7d44:	43001800 	.word	0x43001800
    7d48:	20000d08 	.word	0x20000d08

00007d4c <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    7d4c:	b4b0      	push	{r4, r5, r7}
    7d4e:	b08d      	sub	sp, #52	; 0x34
    7d50:	af00      	add	r7, sp, #0
    7d52:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    7d54:	4b13      	ldr	r3, [pc, #76]	; (7da4 <_get_hardware_offset+0x58>)
    7d56:	f107 040c 	add.w	r4, r7, #12
    7d5a:	461d      	mov	r5, r3
    7d5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7d5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    7d60:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    7d64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    7d68:	2300      	movs	r3, #0
    7d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    7d6c:	e010      	b.n	7d90 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    7d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7d70:	009b      	lsls	r3, r3, #2
    7d72:	f107 0230 	add.w	r2, r7, #48	; 0x30
    7d76:	4413      	add	r3, r2
    7d78:	f853 3c24 	ldr.w	r3, [r3, #-36]
    7d7c:	461a      	mov	r2, r3
    7d7e:	687b      	ldr	r3, [r7, #4]
    7d80:	429a      	cmp	r2, r3
    7d82:	d102      	bne.n	7d8a <_get_hardware_offset+0x3e>
			return i;
    7d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7d86:	b2db      	uxtb	r3, r3
    7d88:	e006      	b.n	7d98 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    7d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7d8c:	3301      	adds	r3, #1
    7d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    7d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7d92:	2b07      	cmp	r3, #7
    7d94:	d9eb      	bls.n	7d6e <_get_hardware_offset+0x22>
		}
	}
	return 0;
    7d96:	2300      	movs	r3, #0
}
    7d98:	4618      	mov	r0, r3
    7d9a:	3734      	adds	r7, #52	; 0x34
    7d9c:	46bd      	mov	sp, r7
    7d9e:	bcb0      	pop	{r4, r5, r7}
    7da0:	4770      	bx	lr
    7da2:	bf00      	nop
    7da4:	0001341c 	.word	0x0001341c

00007da8 <__NVIC_EnableIRQ>:
{
    7da8:	b480      	push	{r7}
    7daa:	b083      	sub	sp, #12
    7dac:	af00      	add	r7, sp, #0
    7dae:	4603      	mov	r3, r0
    7db0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7db2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7db6:	2b00      	cmp	r3, #0
    7db8:	db0b      	blt.n	7dd2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7dba:	4909      	ldr	r1, [pc, #36]	; (7de0 <__NVIC_EnableIRQ+0x38>)
    7dbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7dc0:	095b      	lsrs	r3, r3, #5
    7dc2:	88fa      	ldrh	r2, [r7, #6]
    7dc4:	f002 021f 	and.w	r2, r2, #31
    7dc8:	2001      	movs	r0, #1
    7dca:	fa00 f202 	lsl.w	r2, r0, r2
    7dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7dd2:	bf00      	nop
    7dd4:	370c      	adds	r7, #12
    7dd6:	46bd      	mov	sp, r7
    7dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ddc:	4770      	bx	lr
    7dde:	bf00      	nop
    7de0:	e000e100 	.word	0xe000e100

00007de4 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    7de4:	b480      	push	{r7}
    7de6:	b087      	sub	sp, #28
    7de8:	af00      	add	r7, sp, #0
    7dea:	60f8      	str	r0, [r7, #12]
    7dec:	460b      	mov	r3, r1
    7dee:	607a      	str	r2, [r7, #4]
    7df0:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    7df2:	7afa      	ldrb	r2, [r7, #11]
    7df4:	68f9      	ldr	r1, [r7, #12]
    7df6:	4613      	mov	r3, r2
    7df8:	009b      	lsls	r3, r3, #2
    7dfa:	4413      	add	r3, r2
    7dfc:	009b      	lsls	r3, r3, #2
    7dfe:	440b      	add	r3, r1
    7e00:	3340      	adds	r3, #64	; 0x40
    7e02:	681b      	ldr	r3, [r3, #0]
    7e04:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    7e06:	697a      	ldr	r2, [r7, #20]
    7e08:	687b      	ldr	r3, [r7, #4]
    7e0a:	4013      	ands	r3, r2
    7e0c:	617b      	str	r3, [r7, #20]
	return tmp;
    7e0e:	697b      	ldr	r3, [r7, #20]
}
    7e10:	4618      	mov	r0, r3
    7e12:	371c      	adds	r7, #28
    7e14:	46bd      	mov	sp, r7
    7e16:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e1a:	4770      	bx	lr

00007e1c <hri_oscctrl_get_STATUS_reg>:
{
    7e1c:	b480      	push	{r7}
    7e1e:	b085      	sub	sp, #20
    7e20:	af00      	add	r7, sp, #0
    7e22:	6078      	str	r0, [r7, #4]
    7e24:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    7e26:	687b      	ldr	r3, [r7, #4]
    7e28:	691b      	ldr	r3, [r3, #16]
    7e2a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7e2c:	68fa      	ldr	r2, [r7, #12]
    7e2e:	683b      	ldr	r3, [r7, #0]
    7e30:	4013      	ands	r3, r2
    7e32:	60fb      	str	r3, [r7, #12]
	return tmp;
    7e34:	68fb      	ldr	r3, [r7, #12]
}
    7e36:	4618      	mov	r0, r3
    7e38:	3714      	adds	r7, #20
    7e3a:	46bd      	mov	sp, r7
    7e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e40:	4770      	bx	lr

00007e42 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    7e42:	b480      	push	{r7}
    7e44:	b085      	sub	sp, #20
    7e46:	af00      	add	r7, sp, #0
    7e48:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    7e4a:	687b      	ldr	r3, [r7, #4]
    7e4c:	f893 3020 	ldrb.w	r3, [r3, #32]
    7e50:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    7e52:	7bfb      	ldrb	r3, [r7, #15]
    7e54:	f003 0301 	and.w	r3, r3, #1
    7e58:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    7e5a:	7bfb      	ldrb	r3, [r7, #15]
    7e5c:	2b00      	cmp	r3, #0
    7e5e:	bf14      	ite	ne
    7e60:	2301      	movne	r3, #1
    7e62:	2300      	moveq	r3, #0
    7e64:	b2db      	uxtb	r3, r3
}
    7e66:	4618      	mov	r0, r3
    7e68:	3714      	adds	r7, #20
    7e6a:	46bd      	mov	sp, r7
    7e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e70:	4770      	bx	lr

00007e72 <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    7e72:	b480      	push	{r7}
    7e74:	b083      	sub	sp, #12
    7e76:	af00      	add	r7, sp, #0
    7e78:	6078      	str	r0, [r7, #4]
    7e7a:	460b      	mov	r3, r1
    7e7c:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    7e7e:	bf00      	nop
    7e80:	687b      	ldr	r3, [r7, #4]
    7e82:	789b      	ldrb	r3, [r3, #2]
    7e84:	b2da      	uxtb	r2, r3
    7e86:	78fb      	ldrb	r3, [r7, #3]
    7e88:	4013      	ands	r3, r2
    7e8a:	b2db      	uxtb	r3, r3
    7e8c:	2b00      	cmp	r3, #0
    7e8e:	d1f7      	bne.n	7e80 <hri_usb_wait_for_sync+0xe>
	};
}
    7e90:	bf00      	nop
    7e92:	370c      	adds	r7, #12
    7e94:	46bd      	mov	sp, r7
    7e96:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e9a:	4770      	bx	lr

00007e9c <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    7e9c:	b480      	push	{r7}
    7e9e:	b083      	sub	sp, #12
    7ea0:	af00      	add	r7, sp, #0
    7ea2:	6078      	str	r0, [r7, #4]
    7ea4:	460b      	mov	r3, r1
    7ea6:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    7ea8:	687b      	ldr	r3, [r7, #4]
    7eaa:	789b      	ldrb	r3, [r3, #2]
    7eac:	b2da      	uxtb	r2, r3
    7eae:	78fb      	ldrb	r3, [r7, #3]
    7eb0:	4013      	ands	r3, r2
    7eb2:	b2db      	uxtb	r3, r3
    7eb4:	2b00      	cmp	r3, #0
    7eb6:	bf14      	ite	ne
    7eb8:	2301      	movne	r3, #1
    7eba:	2300      	moveq	r3, #0
    7ebc:	b2db      	uxtb	r3, r3
}
    7ebe:	4618      	mov	r0, r3
    7ec0:	370c      	adds	r7, #12
    7ec2:	46bd      	mov	sp, r7
    7ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ec8:	4770      	bx	lr

00007eca <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    7eca:	b480      	push	{r7}
    7ecc:	b085      	sub	sp, #20
    7ece:	af00      	add	r7, sp, #0
    7ed0:	6078      	str	r0, [r7, #4]
    7ed2:	460b      	mov	r3, r1
    7ed4:	70fb      	strb	r3, [r7, #3]
    7ed6:	4613      	mov	r3, r2
    7ed8:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    7eda:	78fb      	ldrb	r3, [r7, #3]
    7edc:	687a      	ldr	r2, [r7, #4]
    7ede:	3308      	adds	r3, #8
    7ee0:	015b      	lsls	r3, r3, #5
    7ee2:	4413      	add	r3, r2
    7ee4:	3307      	adds	r3, #7
    7ee6:	781b      	ldrb	r3, [r3, #0]
    7ee8:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    7eea:	7bfa      	ldrb	r2, [r7, #15]
    7eec:	78bb      	ldrb	r3, [r7, #2]
    7eee:	4013      	ands	r3, r2
    7ef0:	73fb      	strb	r3, [r7, #15]
	return tmp;
    7ef2:	7bfb      	ldrb	r3, [r7, #15]
}
    7ef4:	4618      	mov	r0, r3
    7ef6:	3714      	adds	r7, #20
    7ef8:	46bd      	mov	sp, r7
    7efa:	f85d 7b04 	ldr.w	r7, [sp], #4
    7efe:	4770      	bx	lr

00007f00 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    7f00:	b480      	push	{r7}
    7f02:	b083      	sub	sp, #12
    7f04:	af00      	add	r7, sp, #0
    7f06:	6078      	str	r0, [r7, #4]
    7f08:	460b      	mov	r3, r1
    7f0a:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    7f0c:	78fb      	ldrb	r3, [r7, #3]
    7f0e:	687a      	ldr	r2, [r7, #4]
    7f10:	3308      	adds	r3, #8
    7f12:	015b      	lsls	r3, r3, #5
    7f14:	4413      	add	r3, r2
    7f16:	3307      	adds	r3, #7
    7f18:	781b      	ldrb	r3, [r3, #0]
    7f1a:	b2db      	uxtb	r3, r3
}
    7f1c:	4618      	mov	r0, r3
    7f1e:	370c      	adds	r7, #12
    7f20:	46bd      	mov	sp, r7
    7f22:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f26:	4770      	bx	lr

00007f28 <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    7f28:	b480      	push	{r7}
    7f2a:	b083      	sub	sp, #12
    7f2c:	af00      	add	r7, sp, #0
    7f2e:	6078      	str	r0, [r7, #4]
    7f30:	460b      	mov	r3, r1
    7f32:	70fb      	strb	r3, [r7, #3]
    7f34:	4613      	mov	r3, r2
    7f36:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    7f38:	78fb      	ldrb	r3, [r7, #3]
    7f3a:	687a      	ldr	r2, [r7, #4]
    7f3c:	3308      	adds	r3, #8
    7f3e:	015b      	lsls	r3, r3, #5
    7f40:	4413      	add	r3, r2
    7f42:	3307      	adds	r3, #7
    7f44:	78ba      	ldrb	r2, [r7, #2]
    7f46:	701a      	strb	r2, [r3, #0]
}
    7f48:	bf00      	nop
    7f4a:	370c      	adds	r7, #12
    7f4c:	46bd      	mov	sp, r7
    7f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f52:	4770      	bx	lr

00007f54 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    7f54:	b480      	push	{r7}
    7f56:	b083      	sub	sp, #12
    7f58:	af00      	add	r7, sp, #0
    7f5a:	6078      	str	r0, [r7, #4]
    7f5c:	460b      	mov	r3, r1
    7f5e:	70fb      	strb	r3, [r7, #3]
    7f60:	4613      	mov	r3, r2
    7f62:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    7f64:	78fb      	ldrb	r3, [r7, #3]
    7f66:	687a      	ldr	r2, [r7, #4]
    7f68:	3308      	adds	r3, #8
    7f6a:	015b      	lsls	r3, r3, #5
    7f6c:	4413      	add	r3, r2
    7f6e:	3305      	adds	r3, #5
    7f70:	78ba      	ldrb	r2, [r7, #2]
    7f72:	701a      	strb	r2, [r3, #0]
}
    7f74:	bf00      	nop
    7f76:	370c      	adds	r7, #12
    7f78:	46bd      	mov	sp, r7
    7f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f7e:	4770      	bx	lr

00007f80 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    7f80:	b480      	push	{r7}
    7f82:	b083      	sub	sp, #12
    7f84:	af00      	add	r7, sp, #0
    7f86:	6078      	str	r0, [r7, #4]
    7f88:	460b      	mov	r3, r1
    7f8a:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    7f8c:	78fb      	ldrb	r3, [r7, #3]
    7f8e:	687a      	ldr	r2, [r7, #4]
    7f90:	3308      	adds	r3, #8
    7f92:	015b      	lsls	r3, r3, #5
    7f94:	4413      	add	r3, r2
    7f96:	3306      	adds	r3, #6
    7f98:	781b      	ldrb	r3, [r3, #0]
    7f9a:	b2db      	uxtb	r3, r3
}
    7f9c:	4618      	mov	r0, r3
    7f9e:	370c      	adds	r7, #12
    7fa0:	46bd      	mov	sp, r7
    7fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
    7fa6:	4770      	bx	lr

00007fa8 <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    7fa8:	b480      	push	{r7}
    7faa:	b083      	sub	sp, #12
    7fac:	af00      	add	r7, sp, #0
    7fae:	6078      	str	r0, [r7, #4]
    7fb0:	460b      	mov	r3, r1
    7fb2:	70fb      	strb	r3, [r7, #3]
    7fb4:	4613      	mov	r3, r2
    7fb6:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    7fb8:	78fb      	ldrb	r3, [r7, #3]
    7fba:	687a      	ldr	r2, [r7, #4]
    7fbc:	3308      	adds	r3, #8
    7fbe:	015b      	lsls	r3, r3, #5
    7fc0:	4413      	add	r3, r2
    7fc2:	3304      	adds	r3, #4
    7fc4:	78ba      	ldrb	r2, [r7, #2]
    7fc6:	701a      	strb	r2, [r3, #0]
}
    7fc8:	bf00      	nop
    7fca:	370c      	adds	r7, #12
    7fcc:	46bd      	mov	sp, r7
    7fce:	f85d 7b04 	ldr.w	r7, [sp], #4
    7fd2:	4770      	bx	lr

00007fd4 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    7fd4:	b480      	push	{r7}
    7fd6:	b083      	sub	sp, #12
    7fd8:	af00      	add	r7, sp, #0
    7fda:	6078      	str	r0, [r7, #4]
    7fdc:	460b      	mov	r3, r1
    7fde:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    7fe0:	78fb      	ldrb	r3, [r7, #3]
    7fe2:	687a      	ldr	r2, [r7, #4]
    7fe4:	015b      	lsls	r3, r3, #5
    7fe6:	4413      	add	r3, r2
    7fe8:	f503 7384 	add.w	r3, r3, #264	; 0x108
    7fec:	2210      	movs	r2, #16
    7fee:	701a      	strb	r2, [r3, #0]
}
    7ff0:	bf00      	nop
    7ff2:	370c      	adds	r7, #12
    7ff4:	46bd      	mov	sp, r7
    7ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ffa:	4770      	bx	lr

00007ffc <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    7ffc:	b480      	push	{r7}
    7ffe:	b083      	sub	sp, #12
    8000:	af00      	add	r7, sp, #0
    8002:	6078      	str	r0, [r7, #4]
    8004:	460b      	mov	r3, r1
    8006:	70fb      	strb	r3, [r7, #3]
    8008:	4613      	mov	r3, r2
    800a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    800c:	78fb      	ldrb	r3, [r7, #3]
    800e:	687a      	ldr	r2, [r7, #4]
    8010:	015b      	lsls	r3, r3, #5
    8012:	4413      	add	r3, r2
    8014:	f203 1309 	addw	r3, r3, #265	; 0x109
    8018:	78ba      	ldrb	r2, [r7, #2]
    801a:	701a      	strb	r2, [r3, #0]
}
    801c:	bf00      	nop
    801e:	370c      	adds	r7, #12
    8020:	46bd      	mov	sp, r7
    8022:	f85d 7b04 	ldr.w	r7, [sp], #4
    8026:	4770      	bx	lr

00008028 <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    8028:	b480      	push	{r7}
    802a:	b083      	sub	sp, #12
    802c:	af00      	add	r7, sp, #0
    802e:	6078      	str	r0, [r7, #4]
    8030:	460b      	mov	r3, r1
    8032:	70fb      	strb	r3, [r7, #3]
    8034:	4613      	mov	r3, r2
    8036:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8038:	78fb      	ldrb	r3, [r7, #3]
    803a:	687a      	ldr	r2, [r7, #4]
    803c:	015b      	lsls	r3, r3, #5
    803e:	4413      	add	r3, r2
    8040:	f503 7384 	add.w	r3, r3, #264	; 0x108
    8044:	78ba      	ldrb	r2, [r7, #2]
    8046:	701a      	strb	r2, [r3, #0]
}
    8048:	bf00      	nop
    804a:	370c      	adds	r7, #12
    804c:	46bd      	mov	sp, r7
    804e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8052:	4770      	bx	lr

00008054 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    8054:	b480      	push	{r7}
    8056:	b085      	sub	sp, #20
    8058:	af00      	add	r7, sp, #0
    805a:	6078      	str	r0, [r7, #4]
    805c:	460b      	mov	r3, r1
    805e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8060:	78fb      	ldrb	r3, [r7, #3]
    8062:	687a      	ldr	r2, [r7, #4]
    8064:	3308      	adds	r3, #8
    8066:	015b      	lsls	r3, r3, #5
    8068:	4413      	add	r3, r2
    806a:	781b      	ldrb	r3, [r3, #0]
    806c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    806e:	7bfb      	ldrb	r3, [r7, #15]
    8070:	f003 0307 	and.w	r3, r3, #7
    8074:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8076:	7bfb      	ldrb	r3, [r7, #15]
}
    8078:	4618      	mov	r0, r3
    807a:	3714      	adds	r7, #20
    807c:	46bd      	mov	sp, r7
    807e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8082:	4770      	bx	lr

00008084 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    8084:	b480      	push	{r7}
    8086:	b085      	sub	sp, #20
    8088:	af00      	add	r7, sp, #0
    808a:	6078      	str	r0, [r7, #4]
    808c:	460b      	mov	r3, r1
    808e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8090:	78fb      	ldrb	r3, [r7, #3]
    8092:	687a      	ldr	r2, [r7, #4]
    8094:	3308      	adds	r3, #8
    8096:	015b      	lsls	r3, r3, #5
    8098:	4413      	add	r3, r2
    809a:	781b      	ldrb	r3, [r3, #0]
    809c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    809e:	7bfb      	ldrb	r3, [r7, #15]
    80a0:	091b      	lsrs	r3, r3, #4
    80a2:	b2db      	uxtb	r3, r3
    80a4:	f003 0307 	and.w	r3, r3, #7
    80a8:	73fb      	strb	r3, [r7, #15]
	return tmp;
    80aa:	7bfb      	ldrb	r3, [r7, #15]
}
    80ac:	4618      	mov	r0, r3
    80ae:	3714      	adds	r7, #20
    80b0:	46bd      	mov	sp, r7
    80b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    80b6:	4770      	bx	lr

000080b8 <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    80b8:	b480      	push	{r7}
    80ba:	b083      	sub	sp, #12
    80bc:	af00      	add	r7, sp, #0
    80be:	6078      	str	r0, [r7, #4]
    80c0:	460b      	mov	r3, r1
    80c2:	70fb      	strb	r3, [r7, #3]
    80c4:	4613      	mov	r3, r2
    80c6:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    80c8:	78fb      	ldrb	r3, [r7, #3]
    80ca:	687a      	ldr	r2, [r7, #4]
    80cc:	3308      	adds	r3, #8
    80ce:	015b      	lsls	r3, r3, #5
    80d0:	4413      	add	r3, r2
    80d2:	78ba      	ldrb	r2, [r7, #2]
    80d4:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    80d6:	bf00      	nop
    80d8:	370c      	adds	r7, #12
    80da:	46bd      	mov	sp, r7
    80dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    80e0:	4770      	bx	lr

000080e2 <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    80e2:	b480      	push	{r7}
    80e4:	b083      	sub	sp, #12
    80e6:	af00      	add	r7, sp, #0
    80e8:	6078      	str	r0, [r7, #4]
    80ea:	460b      	mov	r3, r1
    80ec:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    80ee:	78fb      	ldrb	r3, [r7, #3]
    80f0:	687a      	ldr	r2, [r7, #4]
    80f2:	3308      	adds	r3, #8
    80f4:	015b      	lsls	r3, r3, #5
    80f6:	4413      	add	r3, r2
    80f8:	781b      	ldrb	r3, [r3, #0]
    80fa:	b2db      	uxtb	r3, r3
}
    80fc:	4618      	mov	r0, r3
    80fe:	370c      	adds	r7, #12
    8100:	46bd      	mov	sp, r7
    8102:	f85d 7b04 	ldr.w	r7, [sp], #4
    8106:	4770      	bx	lr

00008108 <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    8108:	b480      	push	{r7}
    810a:	b083      	sub	sp, #12
    810c:	af00      	add	r7, sp, #0
    810e:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    8110:	687b      	ldr	r3, [r7, #4]
    8112:	8b9b      	ldrh	r3, [r3, #28]
    8114:	b29b      	uxth	r3, r3
}
    8116:	4618      	mov	r0, r3
    8118:	370c      	adds	r7, #12
    811a:	46bd      	mov	sp, r7
    811c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8120:	4770      	bx	lr

00008122 <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    8122:	b480      	push	{r7}
    8124:	b083      	sub	sp, #12
    8126:	af00      	add	r7, sp, #0
    8128:	6078      	str	r0, [r7, #4]
    812a:	460b      	mov	r3, r1
    812c:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    812e:	687b      	ldr	r3, [r7, #4]
    8130:	887a      	ldrh	r2, [r7, #2]
    8132:	839a      	strh	r2, [r3, #28]
}
    8134:	bf00      	nop
    8136:	370c      	adds	r7, #12
    8138:	46bd      	mov	sp, r7
    813a:	f85d 7b04 	ldr.w	r7, [sp], #4
    813e:	4770      	bx	lr

00008140 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    8140:	b480      	push	{r7}
    8142:	b083      	sub	sp, #12
    8144:	af00      	add	r7, sp, #0
    8146:	6078      	str	r0, [r7, #4]
    8148:	460b      	mov	r3, r1
    814a:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    814c:	687b      	ldr	r3, [r7, #4]
    814e:	887a      	ldrh	r2, [r7, #2]
    8150:	831a      	strh	r2, [r3, #24]
}
    8152:	bf00      	nop
    8154:	370c      	adds	r7, #12
    8156:	46bd      	mov	sp, r7
    8158:	f85d 7b04 	ldr.w	r7, [sp], #4
    815c:	4770      	bx	lr

0000815e <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    815e:	b480      	push	{r7}
    8160:	b083      	sub	sp, #12
    8162:	af00      	add	r7, sp, #0
    8164:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    8166:	687b      	ldr	r3, [r7, #4]
    8168:	8b1b      	ldrh	r3, [r3, #24]
    816a:	b29b      	uxth	r3, r3
}
    816c:	4618      	mov	r0, r3
    816e:	370c      	adds	r7, #12
    8170:	46bd      	mov	sp, r7
    8172:	f85d 7b04 	ldr.w	r7, [sp], #4
    8176:	4770      	bx	lr

00008178 <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    8178:	b480      	push	{r7}
    817a:	b083      	sub	sp, #12
    817c:	af00      	add	r7, sp, #0
    817e:	6078      	str	r0, [r7, #4]
    8180:	460b      	mov	r3, r1
    8182:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    8184:	687b      	ldr	r3, [r7, #4]
    8186:	887a      	ldrh	r2, [r7, #2]
    8188:	829a      	strh	r2, [r3, #20]
}
    818a:	bf00      	nop
    818c:	370c      	adds	r7, #12
    818e:	46bd      	mov	sp, r7
    8190:	f85d 7b04 	ldr.w	r7, [sp], #4
    8194:	4770      	bx	lr

00008196 <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    8196:	b480      	push	{r7}
    8198:	b085      	sub	sp, #20
    819a:	af00      	add	r7, sp, #0
    819c:	6078      	str	r0, [r7, #4]
    819e:	460b      	mov	r3, r1
    81a0:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    81a2:	687b      	ldr	r3, [r7, #4]
    81a4:	789b      	ldrb	r3, [r3, #2]
    81a6:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    81a8:	7bfa      	ldrb	r2, [r7, #15]
    81aa:	78fb      	ldrb	r3, [r7, #3]
    81ac:	4013      	ands	r3, r2
    81ae:	73fb      	strb	r3, [r7, #15]
	return tmp;
    81b0:	7bfb      	ldrb	r3, [r7, #15]
}
    81b2:	4618      	mov	r0, r3
    81b4:	3714      	adds	r7, #20
    81b6:	46bd      	mov	sp, r7
    81b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    81bc:	4770      	bx	lr
	...

000081c0 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    81c0:	b580      	push	{r7, lr}
    81c2:	b082      	sub	sp, #8
    81c4:	af00      	add	r7, sp, #0
    81c6:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    81c8:	687b      	ldr	r3, [r7, #4]
    81ca:	781b      	ldrb	r3, [r3, #0]
    81cc:	b2db      	uxtb	r3, r3
    81ce:	f023 0302 	bic.w	r3, r3, #2
    81d2:	b2da      	uxtb	r2, r3
    81d4:	687b      	ldr	r3, [r7, #4]
    81d6:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    81d8:	2103      	movs	r1, #3
    81da:	6878      	ldr	r0, [r7, #4]
    81dc:	4b02      	ldr	r3, [pc, #8]	; (81e8 <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    81de:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    81e0:	bf00      	nop
    81e2:	3708      	adds	r7, #8
    81e4:	46bd      	mov	sp, r7
    81e6:	bd80      	pop	{r7, pc}
    81e8:	00007e73 	.word	0x00007e73

000081ec <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    81ec:	b580      	push	{r7, lr}
    81ee:	b084      	sub	sp, #16
    81f0:	af00      	add	r7, sp, #0
    81f2:	6078      	str	r0, [r7, #4]
    81f4:	460b      	mov	r3, r1
    81f6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    81f8:	2103      	movs	r1, #3
    81fa:	6878      	ldr	r0, [r7, #4]
    81fc:	4b06      	ldr	r3, [pc, #24]	; (8218 <hri_usb_get_CTRLA_reg+0x2c>)
    81fe:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    8200:	687b      	ldr	r3, [r7, #4]
    8202:	781b      	ldrb	r3, [r3, #0]
    8204:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8206:	7bfa      	ldrb	r2, [r7, #15]
    8208:	78fb      	ldrb	r3, [r7, #3]
    820a:	4013      	ands	r3, r2
    820c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    820e:	7bfb      	ldrb	r3, [r7, #15]
}
    8210:	4618      	mov	r0, r3
    8212:	3710      	adds	r7, #16
    8214:	46bd      	mov	sp, r7
    8216:	bd80      	pop	{r7, pc}
    8218:	00007e73 	.word	0x00007e73

0000821c <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    821c:	b580      	push	{r7, lr}
    821e:	b082      	sub	sp, #8
    8220:	af00      	add	r7, sp, #0
    8222:	6078      	str	r0, [r7, #4]
    8224:	460b      	mov	r3, r1
    8226:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    8228:	687b      	ldr	r3, [r7, #4]
    822a:	78fa      	ldrb	r2, [r7, #3]
    822c:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    822e:	2103      	movs	r1, #3
    8230:	6878      	ldr	r0, [r7, #4]
    8232:	4b03      	ldr	r3, [pc, #12]	; (8240 <hri_usb_write_CTRLA_reg+0x24>)
    8234:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    8236:	bf00      	nop
    8238:	3708      	adds	r7, #8
    823a:	46bd      	mov	sp, r7
    823c:	bd80      	pop	{r7, pc}
    823e:	bf00      	nop
    8240:	00007e73 	.word	0x00007e73

00008244 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    8244:	b580      	push	{r7, lr}
    8246:	b082      	sub	sp, #8
    8248:	af00      	add	r7, sp, #0
    824a:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    824c:	2103      	movs	r1, #3
    824e:	6878      	ldr	r0, [r7, #4]
    8250:	4b04      	ldr	r3, [pc, #16]	; (8264 <hri_usb_read_CTRLA_reg+0x20>)
    8252:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    8254:	687b      	ldr	r3, [r7, #4]
    8256:	781b      	ldrb	r3, [r3, #0]
    8258:	b2db      	uxtb	r3, r3
}
    825a:	4618      	mov	r0, r3
    825c:	3708      	adds	r7, #8
    825e:	46bd      	mov	sp, r7
    8260:	bd80      	pop	{r7, pc}
    8262:	bf00      	nop
    8264:	00007e73 	.word	0x00007e73

00008268 <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    8268:	b480      	push	{r7}
    826a:	b083      	sub	sp, #12
    826c:	af00      	add	r7, sp, #0
    826e:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    8270:	687b      	ldr	r3, [r7, #4]
    8272:	891b      	ldrh	r3, [r3, #8]
    8274:	b29b      	uxth	r3, r3
    8276:	f023 0301 	bic.w	r3, r3, #1
    827a:	b29a      	uxth	r2, r3
    827c:	687b      	ldr	r3, [r7, #4]
    827e:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    8280:	bf00      	nop
    8282:	370c      	adds	r7, #12
    8284:	46bd      	mov	sp, r7
    8286:	f85d 7b04 	ldr.w	r7, [sp], #4
    828a:	4770      	bx	lr

0000828c <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    828c:	b480      	push	{r7}
    828e:	b083      	sub	sp, #12
    8290:	af00      	add	r7, sp, #0
    8292:	6078      	str	r0, [r7, #4]
    8294:	460b      	mov	r3, r1
    8296:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    8298:	687b      	ldr	r3, [r7, #4]
    829a:	887a      	ldrh	r2, [r7, #2]
    829c:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    829e:	bf00      	nop
    82a0:	370c      	adds	r7, #12
    82a2:	46bd      	mov	sp, r7
    82a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    82a8:	4770      	bx	lr

000082aa <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    82aa:	b480      	push	{r7}
    82ac:	b083      	sub	sp, #12
    82ae:	af00      	add	r7, sp, #0
    82b0:	6078      	str	r0, [r7, #4]
    82b2:	460b      	mov	r3, r1
    82b4:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    82b6:	687b      	ldr	r3, [r7, #4]
    82b8:	78fa      	ldrb	r2, [r7, #3]
    82ba:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    82bc:	bf00      	nop
    82be:	370c      	adds	r7, #12
    82c0:	46bd      	mov	sp, r7
    82c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    82c6:	4770      	bx	lr

000082c8 <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    82c8:	b480      	push	{r7}
    82ca:	b083      	sub	sp, #12
    82cc:	af00      	add	r7, sp, #0
    82ce:	6078      	str	r0, [r7, #4]
    82d0:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    82d2:	687b      	ldr	r3, [r7, #4]
    82d4:	683a      	ldr	r2, [r7, #0]
    82d6:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    82d8:	bf00      	nop
    82da:	370c      	adds	r7, #12
    82dc:	46bd      	mov	sp, r7
    82de:	f85d 7b04 	ldr.w	r7, [sp], #4
    82e2:	4770      	bx	lr

000082e4 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    82e4:	b480      	push	{r7}
    82e6:	b083      	sub	sp, #12
    82e8:	af00      	add	r7, sp, #0
    82ea:	6078      	str	r0, [r7, #4]
    82ec:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    82ee:	2300      	movs	r3, #0
}
    82f0:	4618      	mov	r0, r3
    82f2:	370c      	adds	r7, #12
    82f4:	46bd      	mov	sp, r7
    82f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    82fa:	4770      	bx	lr

000082fc <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    82fc:	b480      	push	{r7}
    82fe:	b085      	sub	sp, #20
    8300:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    8302:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8306:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    8308:	4b28      	ldr	r3, [pc, #160]	; (83ac <_usb_load_calib+0xb0>)
    830a:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    830c:	f003 031f 	and.w	r3, r3, #31
    8310:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    8312:	4b26      	ldr	r3, [pc, #152]	; (83ac <_usb_load_calib+0xb0>)
    8314:	681b      	ldr	r3, [r3, #0]
    8316:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    8318:	f003 031f 	and.w	r3, r3, #31
    831c:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    831e:	4b23      	ldr	r3, [pc, #140]	; (83ac <_usb_load_calib+0xb0>)
    8320:	681b      	ldr	r3, [r3, #0]
    8322:	0a9b      	lsrs	r3, r3, #10
    8324:	f003 0307 	and.w	r3, r3, #7
    8328:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    832a:	68fb      	ldr	r3, [r7, #12]
    832c:	2b00      	cmp	r3, #0
    832e:	d002      	beq.n	8336 <_usb_load_calib+0x3a>
    8330:	68fb      	ldr	r3, [r7, #12]
    8332:	2b1f      	cmp	r3, #31
    8334:	d101      	bne.n	833a <_usb_load_calib+0x3e>
		pad_transn = 9;
    8336:	2309      	movs	r3, #9
    8338:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    833a:	68bb      	ldr	r3, [r7, #8]
    833c:	2b00      	cmp	r3, #0
    833e:	d002      	beq.n	8346 <_usb_load_calib+0x4a>
    8340:	68bb      	ldr	r3, [r7, #8]
    8342:	2b1f      	cmp	r3, #31
    8344:	d101      	bne.n	834a <_usb_load_calib+0x4e>
		pad_transp = 25;
    8346:	2319      	movs	r3, #25
    8348:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    834a:	687b      	ldr	r3, [r7, #4]
    834c:	2b00      	cmp	r3, #0
    834e:	d002      	beq.n	8356 <_usb_load_calib+0x5a>
    8350:	687b      	ldr	r3, [r7, #4]
    8352:	2b07      	cmp	r3, #7
    8354:	d101      	bne.n	835a <_usb_load_calib+0x5e>
		pad_trim = 6;
    8356:	2306      	movs	r3, #6
    8358:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    835a:	68fb      	ldr	r3, [r7, #12]
    835c:	b29b      	uxth	r3, r3
    835e:	019b      	lsls	r3, r3, #6
    8360:	b29b      	uxth	r3, r3
    8362:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    8366:	b29a      	uxth	r2, r3
    8368:	68bb      	ldr	r3, [r7, #8]
    836a:	b29b      	uxth	r3, r3
    836c:	f003 031f 	and.w	r3, r3, #31
    8370:	b29b      	uxth	r3, r3
    8372:	4313      	orrs	r3, r2
    8374:	b29a      	uxth	r2, r3
    8376:	687b      	ldr	r3, [r7, #4]
    8378:	b29b      	uxth	r3, r3
    837a:	031b      	lsls	r3, r3, #12
    837c:	b29b      	uxth	r3, r3
    837e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    8382:	b29b      	uxth	r3, r3
    8384:	4313      	orrs	r3, r2
    8386:	b29a      	uxth	r2, r3
    8388:	683b      	ldr	r3, [r7, #0]
    838a:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    838c:	683a      	ldr	r2, [r7, #0]
    838e:	78d3      	ldrb	r3, [r2, #3]
    8390:	f043 0303 	orr.w	r3, r3, #3
    8394:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    8396:	683a      	ldr	r2, [r7, #0]
    8398:	78d3      	ldrb	r3, [r2, #3]
    839a:	f043 030c 	orr.w	r3, r3, #12
    839e:	70d3      	strb	r3, [r2, #3]
}
    83a0:	bf00      	nop
    83a2:	3714      	adds	r7, #20
    83a4:	46bd      	mov	sp, r7
    83a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    83aa:	4770      	bx	lr
    83ac:	00800084 	.word	0x00800084

000083b0 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    83b0:	b580      	push	{r7, lr}
    83b2:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    83b4:	bf00      	nop
    83b6:	2203      	movs	r2, #3
    83b8:	2100      	movs	r1, #0
    83ba:	4804      	ldr	r0, [pc, #16]	; (83cc <_usb_d_dev_wait_dpll_rdy+0x1c>)
    83bc:	4b04      	ldr	r3, [pc, #16]	; (83d0 <_usb_d_dev_wait_dpll_rdy+0x20>)
    83be:	4798      	blx	r3
    83c0:	4603      	mov	r3, r0
    83c2:	2b03      	cmp	r3, #3
    83c4:	d1f7      	bne.n	83b6 <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    83c6:	bf00      	nop
    83c8:	bd80      	pop	{r7, pc}
    83ca:	bf00      	nop
    83cc:	40001000 	.word	0x40001000
    83d0:	00007de5 	.word	0x00007de5

000083d4 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    83d4:	b580      	push	{r7, lr}
    83d6:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    83d8:	480e      	ldr	r0, [pc, #56]	; (8414 <_usb_d_dev_wait_dfll_rdy+0x40>)
    83da:	4b0f      	ldr	r3, [pc, #60]	; (8418 <_usb_d_dev_wait_dfll_rdy+0x44>)
    83dc:	4798      	blx	r3
    83de:	4603      	mov	r3, r0
    83e0:	2b00      	cmp	r3, #0
    83e2:	d00a      	beq.n	83fa <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    83e4:	bf00      	nop
    83e6:	f44f 6110 	mov.w	r1, #2304	; 0x900
    83ea:	480a      	ldr	r0, [pc, #40]	; (8414 <_usb_d_dev_wait_dfll_rdy+0x40>)
    83ec:	4b0b      	ldr	r3, [pc, #44]	; (841c <_usb_d_dev_wait_dfll_rdy+0x48>)
    83ee:	4798      	blx	r3
    83f0:	4603      	mov	r3, r0
    83f2:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    83f6:	d1f6      	bne.n	83e6 <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    83f8:	e009      	b.n	840e <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    83fa:	bf00      	nop
    83fc:	f44f 7180 	mov.w	r1, #256	; 0x100
    8400:	4804      	ldr	r0, [pc, #16]	; (8414 <_usb_d_dev_wait_dfll_rdy+0x40>)
    8402:	4b06      	ldr	r3, [pc, #24]	; (841c <_usb_d_dev_wait_dfll_rdy+0x48>)
    8404:	4798      	blx	r3
    8406:	4603      	mov	r3, r0
    8408:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    840c:	d1f6      	bne.n	83fc <_usb_d_dev_wait_dfll_rdy+0x28>
}
    840e:	bf00      	nop
    8410:	bd80      	pop	{r7, pc}
    8412:	bf00      	nop
    8414:	40001000 	.word	0x40001000
    8418:	00007e43 	.word	0x00007e43
    841c:	00007e1d 	.word	0x00007e1d

00008420 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    8420:	b580      	push	{r7, lr}
    8422:	b082      	sub	sp, #8
    8424:	af00      	add	r7, sp, #0
    8426:	4603      	mov	r3, r0
    8428:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    842a:	79fb      	ldrb	r3, [r7, #7]
    842c:	2b00      	cmp	r3, #0
    842e:	d102      	bne.n	8436 <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    8430:	4b05      	ldr	r3, [pc, #20]	; (8448 <_usb_d_dev_wait_clk_rdy+0x28>)
    8432:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    8434:	e004      	b.n	8440 <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    8436:	79fb      	ldrb	r3, [r7, #7]
    8438:	2b01      	cmp	r3, #1
    843a:	d101      	bne.n	8440 <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    843c:	4b03      	ldr	r3, [pc, #12]	; (844c <_usb_d_dev_wait_clk_rdy+0x2c>)
    843e:	4798      	blx	r3
}
    8440:	bf00      	nop
    8442:	3708      	adds	r7, #8
    8444:	46bd      	mov	sp, r7
    8446:	bd80      	pop	{r7, pc}
    8448:	000083d5 	.word	0x000083d5
    844c:	000083b1 	.word	0x000083b1

00008450 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    8450:	b580      	push	{r7, lr}
    8452:	b082      	sub	sp, #8
    8454:	af00      	add	r7, sp, #0
    8456:	4603      	mov	r3, r0
    8458:	6039      	str	r1, [r7, #0]
    845a:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    845c:	683b      	ldr	r3, [r7, #0]
    845e:	b2da      	uxtb	r2, r3
    8460:	79fb      	ldrb	r3, [r7, #7]
    8462:	4619      	mov	r1, r3
    8464:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8468:	4b02      	ldr	r3, [pc, #8]	; (8474 <_usbd_ep_int_ack+0x24>)
    846a:	4798      	blx	r3
}
    846c:	bf00      	nop
    846e:	3708      	adds	r7, #8
    8470:	46bd      	mov	sp, r7
    8472:	bd80      	pop	{r7, pc}
    8474:	00007f29 	.word	0x00007f29

00008478 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    8478:	b580      	push	{r7, lr}
    847a:	b082      	sub	sp, #8
    847c:	af00      	add	r7, sp, #0
    847e:	4603      	mov	r3, r0
    8480:	6039      	str	r1, [r7, #0]
    8482:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    8484:	683b      	ldr	r3, [r7, #0]
    8486:	b2da      	uxtb	r2, r3
    8488:	79fb      	ldrb	r3, [r7, #7]
    848a:	4619      	mov	r1, r3
    848c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8490:	4b02      	ldr	r3, [pc, #8]	; (849c <_usbd_ep_int_en+0x24>)
    8492:	4798      	blx	r3
}
    8494:	bf00      	nop
    8496:	3708      	adds	r7, #8
    8498:	46bd      	mov	sp, r7
    849a:	bd80      	pop	{r7, pc}
    849c:	00007ffd 	.word	0x00007ffd

000084a0 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    84a0:	b580      	push	{r7, lr}
    84a2:	b082      	sub	sp, #8
    84a4:	af00      	add	r7, sp, #0
    84a6:	4603      	mov	r3, r0
    84a8:	6039      	str	r1, [r7, #0]
    84aa:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    84ac:	683b      	ldr	r3, [r7, #0]
    84ae:	b2da      	uxtb	r2, r3
    84b0:	79fb      	ldrb	r3, [r7, #7]
    84b2:	4619      	mov	r1, r3
    84b4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    84b8:	4b02      	ldr	r3, [pc, #8]	; (84c4 <_usbd_ep_int_dis+0x24>)
    84ba:	4798      	blx	r3
}
    84bc:	bf00      	nop
    84be:	3708      	adds	r7, #8
    84c0:	46bd      	mov	sp, r7
    84c2:	bd80      	pop	{r7, pc}
    84c4:	00008029 	.word	0x00008029

000084c8 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    84c8:	b580      	push	{r7, lr}
    84ca:	b082      	sub	sp, #8
    84cc:	af00      	add	r7, sp, #0
    84ce:	4603      	mov	r3, r0
    84d0:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    84d2:	79fb      	ldrb	r3, [r7, #7]
    84d4:	4619      	mov	r1, r3
    84d6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    84da:	4b06      	ldr	r3, [pc, #24]	; (84f4 <_usbd_ep_is_ctrl+0x2c>)
    84dc:	4798      	blx	r3
    84de:	4603      	mov	r3, r0
    84e0:	2b11      	cmp	r3, #17
    84e2:	bf0c      	ite	eq
    84e4:	2301      	moveq	r3, #1
    84e6:	2300      	movne	r3, #0
    84e8:	b2db      	uxtb	r3, r3
}
    84ea:	4618      	mov	r0, r3
    84ec:	3708      	adds	r7, #8
    84ee:	46bd      	mov	sp, r7
    84f0:	bd80      	pop	{r7, pc}
    84f2:	bf00      	nop
    84f4:	000080e3 	.word	0x000080e3

000084f8 <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    84f8:	b580      	push	{r7, lr}
    84fa:	b082      	sub	sp, #8
    84fc:	af00      	add	r7, sp, #0
    84fe:	4603      	mov	r3, r0
    8500:	71fb      	strb	r3, [r7, #7]
    8502:	460b      	mov	r3, r1
    8504:	71bb      	strb	r3, [r7, #6]
    8506:	4613      	mov	r3, r2
    8508:	717b      	strb	r3, [r7, #5]
	if (st) {
    850a:	797b      	ldrb	r3, [r7, #5]
    850c:	2b00      	cmp	r3, #0
    850e:	d00b      	beq.n	8528 <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8510:	79bb      	ldrb	r3, [r7, #6]
    8512:	2210      	movs	r2, #16
    8514:	fa02 f303 	lsl.w	r3, r2, r3
    8518:	b2da      	uxtb	r2, r3
    851a:	79fb      	ldrb	r3, [r7, #7]
    851c:	4619      	mov	r1, r3
    851e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8522:	4b09      	ldr	r3, [pc, #36]	; (8548 <_usbd_ep_set_stall+0x50>)
    8524:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    8526:	e00a      	b.n	853e <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8528:	79bb      	ldrb	r3, [r7, #6]
    852a:	2210      	movs	r2, #16
    852c:	fa02 f303 	lsl.w	r3, r2, r3
    8530:	b2da      	uxtb	r2, r3
    8532:	79fb      	ldrb	r3, [r7, #7]
    8534:	4619      	mov	r1, r3
    8536:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    853a:	4b04      	ldr	r3, [pc, #16]	; (854c <_usbd_ep_set_stall+0x54>)
    853c:	4798      	blx	r3
}
    853e:	bf00      	nop
    8540:	3708      	adds	r7, #8
    8542:	46bd      	mov	sp, r7
    8544:	bd80      	pop	{r7, pc}
    8546:	bf00      	nop
    8548:	00007f55 	.word	0x00007f55
    854c:	00007fa9 	.word	0x00007fa9

00008550 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    8550:	b580      	push	{r7, lr}
    8552:	b084      	sub	sp, #16
    8554:	af00      	add	r7, sp, #0
    8556:	4603      	mov	r3, r0
    8558:	460a      	mov	r2, r1
    855a:	71fb      	strb	r3, [r7, #7]
    855c:	4613      	mov	r3, r2
    855e:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    8560:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8564:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8566:	79fb      	ldrb	r3, [r7, #7]
    8568:	4619      	mov	r1, r3
    856a:	68f8      	ldr	r0, [r7, #12]
    856c:	4b08      	ldr	r3, [pc, #32]	; (8590 <_usbd_ep_is_stalled+0x40>)
    856e:	4798      	blx	r3
    8570:	4603      	mov	r3, r0
    8572:	4619      	mov	r1, r3
    8574:	79bb      	ldrb	r3, [r7, #6]
    8576:	2210      	movs	r2, #16
    8578:	fa02 f303 	lsl.w	r3, r2, r3
    857c:	400b      	ands	r3, r1
    857e:	2b00      	cmp	r3, #0
    8580:	bf14      	ite	ne
    8582:	2301      	movne	r3, #1
    8584:	2300      	moveq	r3, #0
    8586:	b2db      	uxtb	r3, r3
}
    8588:	4618      	mov	r0, r3
    858a:	3710      	adds	r7, #16
    858c:	46bd      	mov	sp, r7
    858e:	bd80      	pop	{r7, pc}
    8590:	00007f81 	.word	0x00007f81

00008594 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    8594:	b580      	push	{r7, lr}
    8596:	b084      	sub	sp, #16
    8598:	af00      	add	r7, sp, #0
    859a:	4603      	mov	r3, r0
    859c:	460a      	mov	r2, r1
    859e:	71fb      	strb	r3, [r7, #7]
    85a0:	4613      	mov	r3, r2
    85a2:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    85a4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    85a8:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    85aa:	79fb      	ldrb	r3, [r7, #7]
    85ac:	4619      	mov	r1, r3
    85ae:	68f8      	ldr	r0, [r7, #12]
    85b0:	4b08      	ldr	r3, [pc, #32]	; (85d4 <_usbd_ep_is_stall_sent+0x40>)
    85b2:	4798      	blx	r3
    85b4:	4603      	mov	r3, r0
    85b6:	4619      	mov	r1, r3
    85b8:	79bb      	ldrb	r3, [r7, #6]
    85ba:	2220      	movs	r2, #32
    85bc:	fa02 f303 	lsl.w	r3, r2, r3
    85c0:	400b      	ands	r3, r1
    85c2:	2b00      	cmp	r3, #0
    85c4:	bf14      	ite	ne
    85c6:	2301      	movne	r3, #1
    85c8:	2300      	moveq	r3, #0
    85ca:	b2db      	uxtb	r3, r3
}
    85cc:	4618      	mov	r0, r3
    85ce:	3710      	adds	r7, #16
    85d0:	46bd      	mov	sp, r7
    85d2:	bd80      	pop	{r7, pc}
    85d4:	00007f01 	.word	0x00007f01

000085d8 <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    85d8:	b580      	push	{r7, lr}
    85da:	b082      	sub	sp, #8
    85dc:	af00      	add	r7, sp, #0
    85de:	4603      	mov	r3, r0
    85e0:	460a      	mov	r2, r1
    85e2:	71fb      	strb	r3, [r7, #7]
    85e4:	4613      	mov	r3, r2
    85e6:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    85e8:	79bb      	ldrb	r3, [r7, #6]
    85ea:	2220      	movs	r2, #32
    85ec:	409a      	lsls	r2, r3
    85ee:	79fb      	ldrb	r3, [r7, #7]
    85f0:	4611      	mov	r1, r2
    85f2:	4618      	mov	r0, r3
    85f4:	4b02      	ldr	r3, [pc, #8]	; (8600 <_usbd_ep_ack_stall+0x28>)
    85f6:	4798      	blx	r3
}
    85f8:	bf00      	nop
    85fa:	3708      	adds	r7, #8
    85fc:	46bd      	mov	sp, r7
    85fe:	bd80      	pop	{r7, pc}
    8600:	00008451 	.word	0x00008451

00008604 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    8604:	b580      	push	{r7, lr}
    8606:	b082      	sub	sp, #8
    8608:	af00      	add	r7, sp, #0
    860a:	4603      	mov	r3, r0
    860c:	71fb      	strb	r3, [r7, #7]
    860e:	460b      	mov	r3, r1
    8610:	71bb      	strb	r3, [r7, #6]
    8612:	4613      	mov	r3, r2
    8614:	717b      	strb	r3, [r7, #5]
	if (en) {
    8616:	797b      	ldrb	r3, [r7, #5]
    8618:	2b00      	cmp	r3, #0
    861a:	d008      	beq.n	862e <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    861c:	79bb      	ldrb	r3, [r7, #6]
    861e:	2220      	movs	r2, #32
    8620:	409a      	lsls	r2, r3
    8622:	79fb      	ldrb	r3, [r7, #7]
    8624:	4611      	mov	r1, r2
    8626:	4618      	mov	r0, r3
    8628:	4b07      	ldr	r3, [pc, #28]	; (8648 <_usbd_ep_int_stall_en+0x44>)
    862a:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    862c:	e007      	b.n	863e <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    862e:	79bb      	ldrb	r3, [r7, #6]
    8630:	2220      	movs	r2, #32
    8632:	409a      	lsls	r2, r3
    8634:	79fb      	ldrb	r3, [r7, #7]
    8636:	4611      	mov	r1, r2
    8638:	4618      	mov	r0, r3
    863a:	4b04      	ldr	r3, [pc, #16]	; (864c <_usbd_ep_int_stall_en+0x48>)
    863c:	4798      	blx	r3
}
    863e:	bf00      	nop
    8640:	3708      	adds	r7, #8
    8642:	46bd      	mov	sp, r7
    8644:	bd80      	pop	{r7, pc}
    8646:	bf00      	nop
    8648:	00008479 	.word	0x00008479
    864c:	000084a1 	.word	0x000084a1

00008650 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    8650:	b580      	push	{r7, lr}
    8652:	b082      	sub	sp, #8
    8654:	af00      	add	r7, sp, #0
    8656:	4603      	mov	r3, r0
    8658:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    865a:	79fb      	ldrb	r3, [r7, #7]
    865c:	4619      	mov	r1, r3
    865e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8662:	4b03      	ldr	r3, [pc, #12]	; (8670 <_usbd_ep_stop_setup+0x20>)
    8664:	4798      	blx	r3
}
    8666:	bf00      	nop
    8668:	3708      	adds	r7, #8
    866a:	46bd      	mov	sp, r7
    866c:	bd80      	pop	{r7, pc}
    866e:	bf00      	nop
    8670:	00007fd5 	.word	0x00007fd5

00008674 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    8674:	b580      	push	{r7, lr}
    8676:	b082      	sub	sp, #8
    8678:	af00      	add	r7, sp, #0
    867a:	4603      	mov	r3, r0
    867c:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    867e:	79fb      	ldrb	r3, [r7, #7]
    8680:	2210      	movs	r2, #16
    8682:	4619      	mov	r1, r3
    8684:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8688:	4b05      	ldr	r3, [pc, #20]	; (86a0 <_usbd_ep_is_setup+0x2c>)
    868a:	4798      	blx	r3
    868c:	4603      	mov	r3, r0
    868e:	2b00      	cmp	r3, #0
    8690:	bf14      	ite	ne
    8692:	2301      	movne	r3, #1
    8694:	2300      	moveq	r3, #0
    8696:	b2db      	uxtb	r3, r3
}
    8698:	4618      	mov	r0, r3
    869a:	3708      	adds	r7, #8
    869c:	46bd      	mov	sp, r7
    869e:	bd80      	pop	{r7, pc}
    86a0:	00007ecb 	.word	0x00007ecb

000086a4 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    86a4:	b580      	push	{r7, lr}
    86a6:	b082      	sub	sp, #8
    86a8:	af00      	add	r7, sp, #0
    86aa:	4603      	mov	r3, r0
    86ac:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    86ae:	79fb      	ldrb	r3, [r7, #7]
    86b0:	2110      	movs	r1, #16
    86b2:	4618      	mov	r0, r3
    86b4:	4b02      	ldr	r3, [pc, #8]	; (86c0 <_usbd_ep_ack_setup+0x1c>)
    86b6:	4798      	blx	r3
}
    86b8:	bf00      	nop
    86ba:	3708      	adds	r7, #8
    86bc:	46bd      	mov	sp, r7
    86be:	bd80      	pop	{r7, pc}
    86c0:	00008451 	.word	0x00008451

000086c4 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    86c4:	b580      	push	{r7, lr}
    86c6:	b082      	sub	sp, #8
    86c8:	af00      	add	r7, sp, #0
    86ca:	4603      	mov	r3, r0
    86cc:	71fb      	strb	r3, [r7, #7]
    86ce:	460b      	mov	r3, r1
    86d0:	71bb      	strb	r3, [r7, #6]
    86d2:	4613      	mov	r3, r2
    86d4:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    86d6:	797b      	ldrb	r3, [r7, #5]
    86d8:	2b00      	cmp	r3, #0
    86da:	d00b      	beq.n	86f4 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    86dc:	79bb      	ldrb	r3, [r7, #6]
    86de:	2201      	movs	r2, #1
    86e0:	fa02 f303 	lsl.w	r3, r2, r3
    86e4:	b2da      	uxtb	r2, r3
    86e6:	79fb      	ldrb	r3, [r7, #7]
    86e8:	4619      	mov	r1, r3
    86ea:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    86ee:	4b09      	ldr	r3, [pc, #36]	; (8714 <_usbd_ep_set_toggle+0x50>)
    86f0:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    86f2:	e00a      	b.n	870a <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    86f4:	79bb      	ldrb	r3, [r7, #6]
    86f6:	2201      	movs	r2, #1
    86f8:	fa02 f303 	lsl.w	r3, r2, r3
    86fc:	b2da      	uxtb	r2, r3
    86fe:	79fb      	ldrb	r3, [r7, #7]
    8700:	4619      	mov	r1, r3
    8702:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8706:	4b04      	ldr	r3, [pc, #16]	; (8718 <_usbd_ep_set_toggle+0x54>)
    8708:	4798      	blx	r3
}
    870a:	bf00      	nop
    870c:	3708      	adds	r7, #8
    870e:	46bd      	mov	sp, r7
    8710:	bd80      	pop	{r7, pc}
    8712:	bf00      	nop
    8714:	00007f55 	.word	0x00007f55
    8718:	00007fa9 	.word	0x00007fa9

0000871c <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    871c:	b580      	push	{r7, lr}
    871e:	b082      	sub	sp, #8
    8720:	af00      	add	r7, sp, #0
    8722:	4603      	mov	r3, r0
    8724:	460a      	mov	r2, r1
    8726:	71fb      	strb	r3, [r7, #7]
    8728:	4613      	mov	r3, r2
    872a:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    872c:	79bb      	ldrb	r3, [r7, #6]
    872e:	2201      	movs	r2, #1
    8730:	409a      	lsls	r2, r3
    8732:	79fb      	ldrb	r3, [r7, #7]
    8734:	4611      	mov	r1, r2
    8736:	4618      	mov	r0, r3
    8738:	4b02      	ldr	r3, [pc, #8]	; (8744 <_usbd_ep_ack_io_cpt+0x28>)
    873a:	4798      	blx	r3
}
    873c:	bf00      	nop
    873e:	3708      	adds	r7, #8
    8740:	46bd      	mov	sp, r7
    8742:	bd80      	pop	{r7, pc}
    8744:	00008451 	.word	0x00008451

00008748 <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    8748:	b480      	push	{r7}
    874a:	b085      	sub	sp, #20
    874c:	af00      	add	r7, sp, #0
    874e:	4603      	mov	r3, r0
    8750:	603a      	str	r2, [r7, #0]
    8752:	71fb      	strb	r3, [r7, #7]
    8754:	460b      	mov	r3, r1
    8756:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8758:	79fa      	ldrb	r2, [r7, #7]
    875a:	79bb      	ldrb	r3, [r7, #6]
    875c:	0052      	lsls	r2, r2, #1
    875e:	4413      	add	r3, r2
    8760:	011b      	lsls	r3, r3, #4
    8762:	4a06      	ldr	r2, [pc, #24]	; (877c <_usbd_ep_set_buf+0x34>)
    8764:	4413      	add	r3, r2
    8766:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    8768:	68fb      	ldr	r3, [r7, #12]
    876a:	683a      	ldr	r2, [r7, #0]
    876c:	601a      	str	r2, [r3, #0]
}
    876e:	bf00      	nop
    8770:	3714      	adds	r7, #20
    8772:	46bd      	mov	sp, r7
    8774:	f85d 7b04 	ldr.w	r7, [sp], #4
    8778:	4770      	bx	lr
    877a:	bf00      	nop
    877c:	20001014 	.word	0x20001014

00008780 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    8780:	b480      	push	{r7}
    8782:	b085      	sub	sp, #20
    8784:	af00      	add	r7, sp, #0
    8786:	4603      	mov	r3, r0
    8788:	71fb      	strb	r3, [r7, #7]
    878a:	460b      	mov	r3, r1
    878c:	71bb      	strb	r3, [r7, #6]
    878e:	4613      	mov	r3, r2
    8790:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8792:	79fa      	ldrb	r2, [r7, #7]
    8794:	79bb      	ldrb	r3, [r7, #6]
    8796:	0052      	lsls	r2, r2, #1
    8798:	4413      	add	r3, r2
    879a:	011b      	lsls	r3, r3, #4
    879c:	4a08      	ldr	r2, [pc, #32]	; (87c0 <_usbd_ep_set_in_count+0x40>)
    879e:	4413      	add	r3, r2
    87a0:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    87a2:	88bb      	ldrh	r3, [r7, #4]
    87a4:	f3c3 030d 	ubfx	r3, r3, #0, #14
    87a8:	b299      	uxth	r1, r3
    87aa:	68fa      	ldr	r2, [r7, #12]
    87ac:	6853      	ldr	r3, [r2, #4]
    87ae:	f361 339b 	bfi	r3, r1, #14, #14
    87b2:	6053      	str	r3, [r2, #4]
}
    87b4:	bf00      	nop
    87b6:	3714      	adds	r7, #20
    87b8:	46bd      	mov	sp, r7
    87ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    87be:	4770      	bx	lr
    87c0:	20001014 	.word	0x20001014

000087c4 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    87c4:	b480      	push	{r7}
    87c6:	b085      	sub	sp, #20
    87c8:	af00      	add	r7, sp, #0
    87ca:	4603      	mov	r3, r0
    87cc:	71fb      	strb	r3, [r7, #7]
    87ce:	460b      	mov	r3, r1
    87d0:	71bb      	strb	r3, [r7, #6]
    87d2:	4613      	mov	r3, r2
    87d4:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    87d6:	79fa      	ldrb	r2, [r7, #7]
    87d8:	79bb      	ldrb	r3, [r7, #6]
    87da:	0052      	lsls	r2, r2, #1
    87dc:	4413      	add	r3, r2
    87de:	011b      	lsls	r3, r3, #4
    87e0:	4a08      	ldr	r2, [pc, #32]	; (8804 <_usbd_ep_set_in_size+0x40>)
    87e2:	4413      	add	r3, r2
    87e4:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    87e6:	88bb      	ldrh	r3, [r7, #4]
    87e8:	f3c3 030d 	ubfx	r3, r3, #0, #14
    87ec:	b299      	uxth	r1, r3
    87ee:	68fa      	ldr	r2, [r7, #12]
    87f0:	6853      	ldr	r3, [r2, #4]
    87f2:	f361 030d 	bfi	r3, r1, #0, #14
    87f6:	6053      	str	r3, [r2, #4]
}
    87f8:	bf00      	nop
    87fa:	3714      	adds	r7, #20
    87fc:	46bd      	mov	sp, r7
    87fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    8802:	4770      	bx	lr
    8804:	20001014 	.word	0x20001014

00008808 <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    8808:	b480      	push	{r7}
    880a:	b085      	sub	sp, #20
    880c:	af00      	add	r7, sp, #0
    880e:	4603      	mov	r3, r0
    8810:	71fb      	strb	r3, [r7, #7]
    8812:	460b      	mov	r3, r1
    8814:	71bb      	strb	r3, [r7, #6]
    8816:	4613      	mov	r3, r2
    8818:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    881a:	79fa      	ldrb	r2, [r7, #7]
    881c:	79bb      	ldrb	r3, [r7, #6]
    881e:	0052      	lsls	r2, r2, #1
    8820:	4413      	add	r3, r2
    8822:	011b      	lsls	r3, r3, #4
    8824:	4a08      	ldr	r2, [pc, #32]	; (8848 <_usbd_ep_set_out_count+0x40>)
    8826:	4413      	add	r3, r2
    8828:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    882a:	88bb      	ldrh	r3, [r7, #4]
    882c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8830:	b299      	uxth	r1, r3
    8832:	68fa      	ldr	r2, [r7, #12]
    8834:	6853      	ldr	r3, [r2, #4]
    8836:	f361 030d 	bfi	r3, r1, #0, #14
    883a:	6053      	str	r3, [r2, #4]
}
    883c:	bf00      	nop
    883e:	3714      	adds	r7, #20
    8840:	46bd      	mov	sp, r7
    8842:	f85d 7b04 	ldr.w	r7, [sp], #4
    8846:	4770      	bx	lr
    8848:	20001014 	.word	0x20001014

0000884c <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    884c:	b480      	push	{r7}
    884e:	b085      	sub	sp, #20
    8850:	af00      	add	r7, sp, #0
    8852:	4603      	mov	r3, r0
    8854:	71fb      	strb	r3, [r7, #7]
    8856:	460b      	mov	r3, r1
    8858:	71bb      	strb	r3, [r7, #6]
    885a:	4613      	mov	r3, r2
    885c:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    885e:	79fa      	ldrb	r2, [r7, #7]
    8860:	79bb      	ldrb	r3, [r7, #6]
    8862:	0052      	lsls	r2, r2, #1
    8864:	4413      	add	r3, r2
    8866:	011b      	lsls	r3, r3, #4
    8868:	4a08      	ldr	r2, [pc, #32]	; (888c <_usbd_ep_set_out_size+0x40>)
    886a:	4413      	add	r3, r2
    886c:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    886e:	88bb      	ldrh	r3, [r7, #4]
    8870:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8874:	b299      	uxth	r1, r3
    8876:	68fa      	ldr	r2, [r7, #12]
    8878:	6853      	ldr	r3, [r2, #4]
    887a:	f361 339b 	bfi	r3, r1, #14, #14
    887e:	6053      	str	r3, [r2, #4]
}
    8880:	bf00      	nop
    8882:	3714      	adds	r7, #20
    8884:	46bd      	mov	sp, r7
    8886:	f85d 7b04 	ldr.w	r7, [sp], #4
    888a:	4770      	bx	lr
    888c:	20001014 	.word	0x20001014

00008890 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    8890:	b580      	push	{r7, lr}
    8892:	b084      	sub	sp, #16
    8894:	af00      	add	r7, sp, #0
    8896:	60ba      	str	r2, [r7, #8]
    8898:	607b      	str	r3, [r7, #4]
    889a:	4603      	mov	r3, r0
    889c:	73fb      	strb	r3, [r7, #15]
    889e:	460b      	mov	r3, r1
    88a0:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    88a2:	68bb      	ldr	r3, [r7, #8]
    88a4:	b29a      	uxth	r2, r3
    88a6:	7bb9      	ldrb	r1, [r7, #14]
    88a8:	7bfb      	ldrb	r3, [r7, #15]
    88aa:	4618      	mov	r0, r3
    88ac:	4b06      	ldr	r3, [pc, #24]	; (88c8 <_usbd_ep_set_in_trans+0x38>)
    88ae:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    88b0:	687b      	ldr	r3, [r7, #4]
    88b2:	b29a      	uxth	r2, r3
    88b4:	7bb9      	ldrb	r1, [r7, #14]
    88b6:	7bfb      	ldrb	r3, [r7, #15]
    88b8:	4618      	mov	r0, r3
    88ba:	4b04      	ldr	r3, [pc, #16]	; (88cc <_usbd_ep_set_in_trans+0x3c>)
    88bc:	4798      	blx	r3
}
    88be:	bf00      	nop
    88c0:	3710      	adds	r7, #16
    88c2:	46bd      	mov	sp, r7
    88c4:	bd80      	pop	{r7, pc}
    88c6:	bf00      	nop
    88c8:	000087c5 	.word	0x000087c5
    88cc:	00008781 	.word	0x00008781

000088d0 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    88d0:	b580      	push	{r7, lr}
    88d2:	b084      	sub	sp, #16
    88d4:	af00      	add	r7, sp, #0
    88d6:	60ba      	str	r2, [r7, #8]
    88d8:	607b      	str	r3, [r7, #4]
    88da:	4603      	mov	r3, r0
    88dc:	73fb      	strb	r3, [r7, #15]
    88de:	460b      	mov	r3, r1
    88e0:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    88e2:	68bb      	ldr	r3, [r7, #8]
    88e4:	b29a      	uxth	r2, r3
    88e6:	7bb9      	ldrb	r1, [r7, #14]
    88e8:	7bfb      	ldrb	r3, [r7, #15]
    88ea:	4618      	mov	r0, r3
    88ec:	4b06      	ldr	r3, [pc, #24]	; (8908 <_usbd_ep_set_out_trans+0x38>)
    88ee:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    88f0:	687b      	ldr	r3, [r7, #4]
    88f2:	b29a      	uxth	r2, r3
    88f4:	7bb9      	ldrb	r1, [r7, #14]
    88f6:	7bfb      	ldrb	r3, [r7, #15]
    88f8:	4618      	mov	r0, r3
    88fa:	4b04      	ldr	r3, [pc, #16]	; (890c <_usbd_ep_set_out_trans+0x3c>)
    88fc:	4798      	blx	r3
}
    88fe:	bf00      	nop
    8900:	3710      	adds	r7, #16
    8902:	46bd      	mov	sp, r7
    8904:	bd80      	pop	{r7, pc}
    8906:	bf00      	nop
    8908:	0000884d 	.word	0x0000884d
    890c:	00008809 	.word	0x00008809

00008910 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    8910:	b480      	push	{r7}
    8912:	b085      	sub	sp, #20
    8914:	af00      	add	r7, sp, #0
    8916:	4603      	mov	r3, r0
    8918:	460a      	mov	r2, r1
    891a:	71fb      	strb	r3, [r7, #7]
    891c:	4613      	mov	r3, r2
    891e:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8920:	79fa      	ldrb	r2, [r7, #7]
    8922:	79bb      	ldrb	r3, [r7, #6]
    8924:	0052      	lsls	r2, r2, #1
    8926:	4413      	add	r3, r2
    8928:	011b      	lsls	r3, r3, #4
    892a:	4a06      	ldr	r2, [pc, #24]	; (8944 <_usbd_ep_clear_bank_status+0x34>)
    892c:	4413      	add	r3, r2
    892e:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    8930:	68fb      	ldr	r3, [r7, #12]
    8932:	2200      	movs	r2, #0
    8934:	729a      	strb	r2, [r3, #10]
}
    8936:	bf00      	nop
    8938:	3714      	adds	r7, #20
    893a:	46bd      	mov	sp, r7
    893c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8940:	4770      	bx	lr
    8942:	bf00      	nop
    8944:	20001014 	.word	0x20001014

00008948 <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    8948:	b580      	push	{r7, lr}
    894a:	b082      	sub	sp, #8
    894c:	af00      	add	r7, sp, #0
    894e:	4603      	mov	r3, r0
    8950:	71fb      	strb	r3, [r7, #7]
    8952:	460b      	mov	r3, r1
    8954:	71bb      	strb	r3, [r7, #6]
    8956:	4613      	mov	r3, r2
    8958:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    895a:	797b      	ldrb	r3, [r7, #5]
    895c:	2b00      	cmp	r3, #0
    895e:	d00b      	beq.n	8978 <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8960:	79bb      	ldrb	r3, [r7, #6]
    8962:	2240      	movs	r2, #64	; 0x40
    8964:	fa02 f303 	lsl.w	r3, r2, r3
    8968:	b2da      	uxtb	r2, r3
    896a:	79fb      	ldrb	r3, [r7, #7]
    896c:	4619      	mov	r1, r3
    896e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8972:	4b09      	ldr	r3, [pc, #36]	; (8998 <_usbd_ep_set_in_rdy+0x50>)
    8974:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    8976:	e00a      	b.n	898e <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8978:	79bb      	ldrb	r3, [r7, #6]
    897a:	2240      	movs	r2, #64	; 0x40
    897c:	fa02 f303 	lsl.w	r3, r2, r3
    8980:	b2da      	uxtb	r2, r3
    8982:	79fb      	ldrb	r3, [r7, #7]
    8984:	4619      	mov	r1, r3
    8986:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    898a:	4b04      	ldr	r3, [pc, #16]	; (899c <_usbd_ep_set_in_rdy+0x54>)
    898c:	4798      	blx	r3
}
    898e:	bf00      	nop
    8990:	3708      	adds	r7, #8
    8992:	46bd      	mov	sp, r7
    8994:	bd80      	pop	{r7, pc}
    8996:	bf00      	nop
    8998:	00007f55 	.word	0x00007f55
    899c:	00007fa9 	.word	0x00007fa9

000089a0 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    89a0:	b580      	push	{r7, lr}
    89a2:	b082      	sub	sp, #8
    89a4:	af00      	add	r7, sp, #0
    89a6:	4603      	mov	r3, r0
    89a8:	71fb      	strb	r3, [r7, #7]
    89aa:	460b      	mov	r3, r1
    89ac:	71bb      	strb	r3, [r7, #6]
    89ae:	4613      	mov	r3, r2
    89b0:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    89b2:	797b      	ldrb	r3, [r7, #5]
    89b4:	2b00      	cmp	r3, #0
    89b6:	d00b      	beq.n	89d0 <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    89b8:	79bb      	ldrb	r3, [r7, #6]
    89ba:	2240      	movs	r2, #64	; 0x40
    89bc:	fa02 f303 	lsl.w	r3, r2, r3
    89c0:	b2da      	uxtb	r2, r3
    89c2:	79fb      	ldrb	r3, [r7, #7]
    89c4:	4619      	mov	r1, r3
    89c6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    89ca:	4b09      	ldr	r3, [pc, #36]	; (89f0 <_usbd_ep_set_out_rdy+0x50>)
    89cc:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    89ce:	e00a      	b.n	89e6 <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    89d0:	79bb      	ldrb	r3, [r7, #6]
    89d2:	2240      	movs	r2, #64	; 0x40
    89d4:	fa02 f303 	lsl.w	r3, r2, r3
    89d8:	b2da      	uxtb	r2, r3
    89da:	79fb      	ldrb	r3, [r7, #7]
    89dc:	4619      	mov	r1, r3
    89de:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    89e2:	4b04      	ldr	r3, [pc, #16]	; (89f4 <_usbd_ep_set_out_rdy+0x54>)
    89e4:	4798      	blx	r3
}
    89e6:	bf00      	nop
    89e8:	3708      	adds	r7, #8
    89ea:	46bd      	mov	sp, r7
    89ec:	bd80      	pop	{r7, pc}
    89ee:	bf00      	nop
    89f0:	00007fa9 	.word	0x00007fa9
    89f4:	00007f55 	.word	0x00007f55

000089f8 <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    89f8:	b480      	push	{r7}
    89fa:	b083      	sub	sp, #12
    89fc:	af00      	add	r7, sp, #0
    89fe:	4603      	mov	r3, r0
    8a00:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8a02:	88fb      	ldrh	r3, [r7, #6]
    8a04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    8a08:	d820      	bhi.n	8a4c <_usbd_ep_pcksize_size+0x54>
    8a0a:	88fb      	ldrh	r3, [r7, #6]
    8a0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8a10:	d81a      	bhi.n	8a48 <_usbd_ep_pcksize_size+0x50>
    8a12:	88fb      	ldrh	r3, [r7, #6]
    8a14:	2b80      	cmp	r3, #128	; 0x80
    8a16:	d815      	bhi.n	8a44 <_usbd_ep_pcksize_size+0x4c>
    8a18:	88fb      	ldrh	r3, [r7, #6]
    8a1a:	2b40      	cmp	r3, #64	; 0x40
    8a1c:	d810      	bhi.n	8a40 <_usbd_ep_pcksize_size+0x48>
    8a1e:	88fb      	ldrh	r3, [r7, #6]
    8a20:	2b20      	cmp	r3, #32
    8a22:	d80b      	bhi.n	8a3c <_usbd_ep_pcksize_size+0x44>
    8a24:	88fb      	ldrh	r3, [r7, #6]
    8a26:	2b10      	cmp	r3, #16
    8a28:	d806      	bhi.n	8a38 <_usbd_ep_pcksize_size+0x40>
    8a2a:	88fb      	ldrh	r3, [r7, #6]
    8a2c:	2b08      	cmp	r3, #8
    8a2e:	bf8c      	ite	hi
    8a30:	2301      	movhi	r3, #1
    8a32:	2300      	movls	r3, #0
    8a34:	b2db      	uxtb	r3, r3
    8a36:	e00a      	b.n	8a4e <_usbd_ep_pcksize_size+0x56>
    8a38:	2302      	movs	r3, #2
    8a3a:	e008      	b.n	8a4e <_usbd_ep_pcksize_size+0x56>
    8a3c:	2303      	movs	r3, #3
    8a3e:	e006      	b.n	8a4e <_usbd_ep_pcksize_size+0x56>
    8a40:	2304      	movs	r3, #4
    8a42:	e004      	b.n	8a4e <_usbd_ep_pcksize_size+0x56>
    8a44:	2305      	movs	r3, #5
    8a46:	e002      	b.n	8a4e <_usbd_ep_pcksize_size+0x56>
    8a48:	2306      	movs	r3, #6
    8a4a:	e000      	b.n	8a4e <_usbd_ep_pcksize_size+0x56>
    8a4c:	2307      	movs	r3, #7
}
    8a4e:	4618      	mov	r0, r3
    8a50:	370c      	adds	r7, #12
    8a52:	46bd      	mov	sp, r7
    8a54:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a58:	4770      	bx	lr
	...

00008a5c <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    8a5c:	b480      	push	{r7}
    8a5e:	b085      	sub	sp, #20
    8a60:	af00      	add	r7, sp, #0
    8a62:	4603      	mov	r3, r0
    8a64:	460a      	mov	r2, r1
    8a66:	71fb      	strb	r3, [r7, #7]
    8a68:	4613      	mov	r3, r2
    8a6a:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    8a6c:	79fb      	ldrb	r3, [r7, #7]
    8a6e:	2b00      	cmp	r3, #0
    8a70:	d008      	beq.n	8a84 <_usb_d_dev_ept+0x28>
    8a72:	79bb      	ldrb	r3, [r7, #6]
    8a74:	2b00      	cmp	r3, #0
    8a76:	d003      	beq.n	8a80 <_usb_d_dev_ept+0x24>
    8a78:	79fb      	ldrb	r3, [r7, #7]
    8a7a:	3304      	adds	r3, #4
    8a7c:	b2db      	uxtb	r3, r3
    8a7e:	e002      	b.n	8a86 <_usb_d_dev_ept+0x2a>
    8a80:	79fb      	ldrb	r3, [r7, #7]
    8a82:	e000      	b.n	8a86 <_usb_d_dev_ept+0x2a>
    8a84:	2300      	movs	r3, #0
    8a86:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    8a88:	7bfa      	ldrb	r2, [r7, #15]
    8a8a:	4613      	mov	r3, r2
    8a8c:	009b      	lsls	r3, r3, #2
    8a8e:	4413      	add	r3, r2
    8a90:	009b      	lsls	r3, r3, #2
    8a92:	3310      	adds	r3, #16
    8a94:	4a04      	ldr	r2, [pc, #16]	; (8aa8 <_usb_d_dev_ept+0x4c>)
    8a96:	4413      	add	r3, r2
    8a98:	3304      	adds	r3, #4
}
    8a9a:	4618      	mov	r0, r3
    8a9c:	3714      	adds	r7, #20
    8a9e:	46bd      	mov	sp, r7
    8aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
    8aa4:	4770      	bx	lr
    8aa6:	bf00      	nop
    8aa8:	20000f4c 	.word	0x20000f4c

00008aac <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    8aac:	b580      	push	{r7, lr}
    8aae:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    8ab0:	2104      	movs	r1, #4
    8ab2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8ab6:	4b03      	ldr	r3, [pc, #12]	; (8ac4 <_usb_d_dev_sof+0x18>)
    8ab8:	4798      	blx	r3
	dev_inst.callbacks.sof();
    8aba:	4b03      	ldr	r3, [pc, #12]	; (8ac8 <_usb_d_dev_sof+0x1c>)
    8abc:	681b      	ldr	r3, [r3, #0]
    8abe:	4798      	blx	r3
}
    8ac0:	bf00      	nop
    8ac2:	bd80      	pop	{r7, pc}
    8ac4:	00008123 	.word	0x00008123
    8ac8:	20000f4c 	.word	0x20000f4c

00008acc <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    8acc:	b580      	push	{r7, lr}
    8ace:	b084      	sub	sp, #16
    8ad0:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    8ad2:	2300      	movs	r3, #0
    8ad4:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8ad6:	f240 2101 	movw	r1, #513	; 0x201
    8ada:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8ade:	4b1a      	ldr	r3, [pc, #104]	; (8b48 <_usb_d_dev_lpmsusp+0x7c>)
    8ae0:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8ae2:	f240 2101 	movw	r1, #513	; 0x201
    8ae6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8aea:	4b18      	ldr	r3, [pc, #96]	; (8b4c <_usb_d_dev_lpmsusp+0x80>)
    8aec:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    8aee:	2170      	movs	r1, #112	; 0x70
    8af0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8af4:	4b16      	ldr	r3, [pc, #88]	; (8b50 <_usb_d_dev_lpmsusp+0x84>)
    8af6:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    8af8:	2300      	movs	r3, #0
    8afa:	73fb      	strb	r3, [r7, #15]
    8afc:	e018      	b.n	8b30 <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    8afe:	7bfb      	ldrb	r3, [r7, #15]
    8b00:	015b      	lsls	r3, r3, #5
    8b02:	4a14      	ldr	r2, [pc, #80]	; (8b54 <_usb_d_dev_lpmsusp+0x88>)
    8b04:	4413      	add	r3, r2
    8b06:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    8b08:	687b      	ldr	r3, [r7, #4]
    8b0a:	891b      	ldrh	r3, [r3, #8]
    8b0c:	f3c3 0303 	ubfx	r3, r3, #0, #4
    8b10:	b2db      	uxtb	r3, r3
    8b12:	2b03      	cmp	r3, #3
    8b14:	d109      	bne.n	8b2a <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    8b16:	687b      	ldr	r3, [r7, #4]
    8b18:	891b      	ldrh	r3, [r3, #8]
    8b1a:	f3c3 130a 	ubfx	r3, r3, #4, #11
    8b1e:	b29b      	uxth	r3, r3
    8b20:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    8b22:	687b      	ldr	r3, [r7, #4]
    8b24:	2200      	movs	r2, #0
    8b26:	811a      	strh	r2, [r3, #8]
			break;
    8b28:	e005      	b.n	8b36 <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    8b2a:	7bfb      	ldrb	r3, [r7, #15]
    8b2c:	3301      	adds	r3, #1
    8b2e:	73fb      	strb	r3, [r7, #15]
    8b30:	7bfb      	ldrb	r3, [r7, #15]
    8b32:	2b03      	cmp	r3, #3
    8b34:	d9e3      	bls.n	8afe <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    8b36:	4b08      	ldr	r3, [pc, #32]	; (8b58 <_usb_d_dev_lpmsusp+0x8c>)
    8b38:	685b      	ldr	r3, [r3, #4]
    8b3a:	68b9      	ldr	r1, [r7, #8]
    8b3c:	2003      	movs	r0, #3
    8b3e:	4798      	blx	r3
}
    8b40:	bf00      	nop
    8b42:	3710      	adds	r7, #16
    8b44:	46bd      	mov	sp, r7
    8b46:	bd80      	pop	{r7, pc}
    8b48:	00008123 	.word	0x00008123
    8b4c:	00008179 	.word	0x00008179
    8b50:	00008141 	.word	0x00008141
    8b54:	20001014 	.word	0x20001014
    8b58:	20000f4c 	.word	0x20000f4c

00008b5c <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    8b5c:	b580      	push	{r7, lr}
    8b5e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    8b60:	2180      	movs	r1, #128	; 0x80
    8b62:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8b66:	4b04      	ldr	r3, [pc, #16]	; (8b78 <_usb_d_dev_ramerr+0x1c>)
    8b68:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    8b6a:	4b04      	ldr	r3, [pc, #16]	; (8b7c <_usb_d_dev_ramerr+0x20>)
    8b6c:	685b      	ldr	r3, [r3, #4]
    8b6e:	2100      	movs	r1, #0
    8b70:	2005      	movs	r0, #5
    8b72:	4798      	blx	r3
}
    8b74:	bf00      	nop
    8b76:	bd80      	pop	{r7, pc}
    8b78:	00008123 	.word	0x00008123
    8b7c:	20000f4c 	.word	0x20000f4c

00008b80 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    8b80:	b580      	push	{r7, lr}
    8b82:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    8b84:	2170      	movs	r1, #112	; 0x70
    8b86:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8b8a:	4b0b      	ldr	r3, [pc, #44]	; (8bb8 <_usb_d_dev_wakeup+0x38>)
    8b8c:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    8b8e:	2170      	movs	r1, #112	; 0x70
    8b90:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8b94:	4b09      	ldr	r3, [pc, #36]	; (8bbc <_usb_d_dev_wakeup+0x3c>)
    8b96:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8b98:	f240 2101 	movw	r1, #513	; 0x201
    8b9c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8ba0:	4b07      	ldr	r3, [pc, #28]	; (8bc0 <_usb_d_dev_wakeup+0x40>)
    8ba2:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    8ba4:	2000      	movs	r0, #0
    8ba6:	4b07      	ldr	r3, [pc, #28]	; (8bc4 <_usb_d_dev_wakeup+0x44>)
    8ba8:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    8baa:	4b07      	ldr	r3, [pc, #28]	; (8bc8 <_usb_d_dev_wakeup+0x48>)
    8bac:	685b      	ldr	r3, [r3, #4]
    8bae:	2100      	movs	r1, #0
    8bb0:	2002      	movs	r0, #2
    8bb2:	4798      	blx	r3
}
    8bb4:	bf00      	nop
    8bb6:	bd80      	pop	{r7, pc}
    8bb8:	00008123 	.word	0x00008123
    8bbc:	00008179 	.word	0x00008179
    8bc0:	00008141 	.word	0x00008141
    8bc4:	00008421 	.word	0x00008421
    8bc8:	20000f4c 	.word	0x20000f4c

00008bcc <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    8bcc:	b580      	push	{r7, lr}
    8bce:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    8bd0:	2200      	movs	r2, #0
    8bd2:	2100      	movs	r1, #0
    8bd4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8bd8:	4b0d      	ldr	r3, [pc, #52]	; (8c10 <_usb_d_dev_reset+0x44>)
    8bda:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    8bdc:	2108      	movs	r1, #8
    8bde:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8be2:	4b0c      	ldr	r3, [pc, #48]	; (8c14 <_usb_d_dev_reset+0x48>)
    8be4:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    8be6:	2170      	movs	r1, #112	; 0x70
    8be8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8bec:	4b0a      	ldr	r3, [pc, #40]	; (8c18 <_usb_d_dev_reset+0x4c>)
    8bee:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8bf0:	f240 2101 	movw	r1, #513	; 0x201
    8bf4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8bf8:	4b08      	ldr	r3, [pc, #32]	; (8c1c <_usb_d_dev_reset+0x50>)
    8bfa:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    8bfc:	4b08      	ldr	r3, [pc, #32]	; (8c20 <_usb_d_dev_reset+0x54>)
    8bfe:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    8c00:	4b08      	ldr	r3, [pc, #32]	; (8c24 <_usb_d_dev_reset+0x58>)
    8c02:	685b      	ldr	r3, [r3, #4]
    8c04:	2100      	movs	r1, #0
    8c06:	2001      	movs	r0, #1
    8c08:	4798      	blx	r3
}
    8c0a:	bf00      	nop
    8c0c:	bd80      	pop	{r7, pc}
    8c0e:	bf00      	nop
    8c10:	000080b9 	.word	0x000080b9
    8c14:	00008123 	.word	0x00008123
    8c18:	00008179 	.word	0x00008179
    8c1c:	00008141 	.word	0x00008141
    8c20:	00009789 	.word	0x00009789
    8c24:	20000f4c 	.word	0x20000f4c

00008c28 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    8c28:	b580      	push	{r7, lr}
    8c2a:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8c2c:	f240 2101 	movw	r1, #513	; 0x201
    8c30:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8c34:	4b09      	ldr	r3, [pc, #36]	; (8c5c <_usb_d_dev_suspend+0x34>)
    8c36:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8c38:	f240 2101 	movw	r1, #513	; 0x201
    8c3c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8c40:	4b07      	ldr	r3, [pc, #28]	; (8c60 <_usb_d_dev_suspend+0x38>)
    8c42:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    8c44:	2170      	movs	r1, #112	; 0x70
    8c46:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8c4a:	4b06      	ldr	r3, [pc, #24]	; (8c64 <_usb_d_dev_suspend+0x3c>)
    8c4c:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    8c4e:	4b06      	ldr	r3, [pc, #24]	; (8c68 <_usb_d_dev_suspend+0x40>)
    8c50:	685b      	ldr	r3, [r3, #4]
    8c52:	2100      	movs	r1, #0
    8c54:	2004      	movs	r0, #4
    8c56:	4798      	blx	r3
}
    8c58:	bf00      	nop
    8c5a:	bd80      	pop	{r7, pc}
    8c5c:	00008123 	.word	0x00008123
    8c60:	00008179 	.word	0x00008179
    8c64:	00008141 	.word	0x00008141
    8c68:	20000f4c 	.word	0x20000f4c

00008c6c <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    8c6c:	b580      	push	{r7, lr}
    8c6e:	b082      	sub	sp, #8
    8c70:	af00      	add	r7, sp, #0
	bool     rc    = true;
    8c72:	2301      	movs	r3, #1
    8c74:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    8c76:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8c7a:	4b22      	ldr	r3, [pc, #136]	; (8d04 <_usb_d_dev_handle_nep+0x98>)
    8c7c:	4798      	blx	r3
    8c7e:	4603      	mov	r3, r0
    8c80:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    8c82:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8c86:	4b20      	ldr	r3, [pc, #128]	; (8d08 <_usb_d_dev_handle_nep+0x9c>)
    8c88:	4798      	blx	r3
    8c8a:	4603      	mov	r3, r0
    8c8c:	461a      	mov	r2, r3
    8c8e:	88bb      	ldrh	r3, [r7, #4]
    8c90:	4013      	ands	r3, r2
    8c92:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    8c94:	88bb      	ldrh	r3, [r7, #4]
    8c96:	f003 0304 	and.w	r3, r3, #4
    8c9a:	2b00      	cmp	r3, #0
    8c9c:	d003      	beq.n	8ca6 <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    8c9e:	4b1b      	ldr	r3, [pc, #108]	; (8d0c <_usb_d_dev_handle_nep+0xa0>)
    8ca0:	4798      	blx	r3
		return true;
    8ca2:	2301      	movs	r3, #1
    8ca4:	e02a      	b.n	8cfc <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    8ca6:	88bb      	ldrh	r3, [r7, #4]
    8ca8:	f403 7300 	and.w	r3, r3, #512	; 0x200
    8cac:	2b00      	cmp	r3, #0
    8cae:	d002      	beq.n	8cb6 <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    8cb0:	4b17      	ldr	r3, [pc, #92]	; (8d10 <_usb_d_dev_handle_nep+0xa4>)
    8cb2:	4798      	blx	r3
    8cb4:	e021      	b.n	8cfa <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    8cb6:	88bb      	ldrh	r3, [r7, #4]
    8cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
    8cbc:	2b00      	cmp	r3, #0
    8cbe:	d002      	beq.n	8cc6 <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    8cc0:	4b14      	ldr	r3, [pc, #80]	; (8d14 <_usb_d_dev_handle_nep+0xa8>)
    8cc2:	4798      	blx	r3
    8cc4:	e019      	b.n	8cfa <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    8cc6:	88bb      	ldrh	r3, [r7, #4]
    8cc8:	f003 0370 	and.w	r3, r3, #112	; 0x70
    8ccc:	2b00      	cmp	r3, #0
    8cce:	d002      	beq.n	8cd6 <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    8cd0:	4b11      	ldr	r3, [pc, #68]	; (8d18 <_usb_d_dev_handle_nep+0xac>)
    8cd2:	4798      	blx	r3
    8cd4:	e011      	b.n	8cfa <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    8cd6:	88bb      	ldrh	r3, [r7, #4]
    8cd8:	f003 0308 	and.w	r3, r3, #8
    8cdc:	2b00      	cmp	r3, #0
    8cde:	d002      	beq.n	8ce6 <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    8ce0:	4b0e      	ldr	r3, [pc, #56]	; (8d1c <_usb_d_dev_handle_nep+0xb0>)
    8ce2:	4798      	blx	r3
    8ce4:	e009      	b.n	8cfa <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    8ce6:	88bb      	ldrh	r3, [r7, #4]
    8ce8:	f003 0301 	and.w	r3, r3, #1
    8cec:	2b00      	cmp	r3, #0
    8cee:	d002      	beq.n	8cf6 <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    8cf0:	4b0b      	ldr	r3, [pc, #44]	; (8d20 <_usb_d_dev_handle_nep+0xb4>)
    8cf2:	4798      	blx	r3
    8cf4:	e001      	b.n	8cfa <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    8cf6:	2300      	movs	r3, #0
    8cf8:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    8cfa:	79fb      	ldrb	r3, [r7, #7]
}
    8cfc:	4618      	mov	r0, r3
    8cfe:	3708      	adds	r7, #8
    8d00:	46bd      	mov	sp, r7
    8d02:	bd80      	pop	{r7, pc}
    8d04:	00008109 	.word	0x00008109
    8d08:	0000815f 	.word	0x0000815f
    8d0c:	00008aad 	.word	0x00008aad
    8d10:	00008acd 	.word	0x00008acd
    8d14:	00008b5d 	.word	0x00008b5d
    8d18:	00008b81 	.word	0x00008b81
    8d1c:	00008bcd 	.word	0x00008bcd
    8d20:	00008c29 	.word	0x00008c29

00008d24 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    8d24:	b590      	push	{r4, r7, lr}
    8d26:	b089      	sub	sp, #36	; 0x24
    8d28:	af00      	add	r7, sp, #0
    8d2a:	6078      	str	r0, [r7, #4]
    8d2c:	460b      	mov	r3, r1
    8d2e:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    8d30:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8d34:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    8d36:	687b      	ldr	r3, [r7, #4]
    8d38:	7c9b      	ldrb	r3, [r3, #18]
    8d3a:	f003 030f 	and.w	r3, r3, #15
    8d3e:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    8d40:	7dfb      	ldrb	r3, [r7, #23]
    8d42:	015b      	lsls	r3, r3, #5
    8d44:	4a73      	ldr	r2, [pc, #460]	; (8f14 <_usb_d_dev_in_next+0x1f0>)
    8d46:	4413      	add	r3, r2
    8d48:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    8d4a:	78fb      	ldrb	r3, [r7, #3]
    8d4c:	2b00      	cmp	r3, #0
    8d4e:	d006      	beq.n	8d5e <_usb_d_dev_in_next+0x3a>
    8d50:	693b      	ldr	r3, [r7, #16]
    8d52:	3310      	adds	r3, #16
    8d54:	685b      	ldr	r3, [r3, #4]
    8d56:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8d5a:	b29b      	uxth	r3, r3
    8d5c:	e000      	b.n	8d60 <_usb_d_dev_in_next+0x3c>
    8d5e:	2300      	movs	r3, #0
    8d60:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    8d62:	687b      	ldr	r3, [r7, #4]
    8d64:	8a1b      	ldrh	r3, [r3, #16]
    8d66:	f240 32ff 	movw	r2, #1023	; 0x3ff
    8d6a:	4293      	cmp	r3, r2
    8d6c:	d103      	bne.n	8d76 <_usb_d_dev_in_next+0x52>
    8d6e:	687b      	ldr	r3, [r7, #4]
    8d70:	8a1b      	ldrh	r3, [r3, #16]
    8d72:	b21b      	sxth	r3, r3
    8d74:	e004      	b.n	8d80 <_usb_d_dev_in_next+0x5c>
    8d76:	687b      	ldr	r3, [r7, #4]
    8d78:	8a1b      	ldrh	r3, [r3, #16]
    8d7a:	3b01      	subs	r3, #1
    8d7c:	b29b      	uxth	r3, r3
    8d7e:	b21b      	sxth	r3, r3
    8d80:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    8d84:	4013      	ands	r3, r2
    8d86:	b21b      	sxth	r3, r3
    8d88:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    8d8a:	2300      	movs	r3, #0
    8d8c:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    8d8e:	687b      	ldr	r3, [r7, #4]
    8d90:	7cdb      	ldrb	r3, [r3, #19]
    8d92:	f003 0307 	and.w	r3, r3, #7
    8d96:	b2db      	uxtb	r3, r3
    8d98:	2b01      	cmp	r3, #1
    8d9a:	bf0c      	ite	eq
    8d9c:	2301      	moveq	r3, #1
    8d9e:	2300      	movne	r3, #0
    8da0:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    8da2:	78fb      	ldrb	r3, [r7, #3]
    8da4:	2b00      	cmp	r3, #0
    8da6:	d004      	beq.n	8db2 <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    8da8:	7dfb      	ldrb	r3, [r7, #23]
    8daa:	2101      	movs	r1, #1
    8dac:	4618      	mov	r0, r3
    8dae:	4b5a      	ldr	r3, [pc, #360]	; (8f18 <_usb_d_dev_in_next+0x1f4>)
    8db0:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    8db2:	687b      	ldr	r3, [r7, #4]
    8db4:	689a      	ldr	r2, [r3, #8]
    8db6:	89fb      	ldrh	r3, [r7, #14]
    8db8:	441a      	add	r2, r3
    8dba:	687b      	ldr	r3, [r7, #4]
    8dbc:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    8dbe:	687b      	ldr	r3, [r7, #4]
    8dc0:	689a      	ldr	r2, [r3, #8]
    8dc2:	687b      	ldr	r3, [r7, #4]
    8dc4:	685b      	ldr	r3, [r3, #4]
    8dc6:	429a      	cmp	r2, r3
    8dc8:	d243      	bcs.n	8e52 <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    8dca:	687b      	ldr	r3, [r7, #4]
    8dcc:	685b      	ldr	r3, [r3, #4]
    8dce:	b29a      	uxth	r2, r3
    8dd0:	687b      	ldr	r3, [r7, #4]
    8dd2:	689b      	ldr	r3, [r3, #8]
    8dd4:	b29b      	uxth	r3, r3
    8dd6:	1ad3      	subs	r3, r2, r3
    8dd8:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    8dda:	687b      	ldr	r3, [r7, #4]
    8ddc:	7cdb      	ldrb	r3, [r3, #19]
    8dde:	f003 0320 	and.w	r3, r3, #32
    8de2:	b2db      	uxtb	r3, r3
    8de4:	2b00      	cmp	r3, #0
    8de6:	d01b      	beq.n	8e20 <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    8de8:	687b      	ldr	r3, [r7, #4]
    8dea:	8a1b      	ldrh	r3, [r3, #16]
    8dec:	8bfa      	ldrh	r2, [r7, #30]
    8dee:	429a      	cmp	r2, r3
    8df0:	d902      	bls.n	8df8 <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    8df2:	687b      	ldr	r3, [r7, #4]
    8df4:	8a1b      	ldrh	r3, [r3, #16]
    8df6:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    8df8:	687b      	ldr	r3, [r7, #4]
    8dfa:	68d8      	ldr	r0, [r3, #12]
    8dfc:	687b      	ldr	r3, [r7, #4]
    8dfe:	681a      	ldr	r2, [r3, #0]
    8e00:	687b      	ldr	r3, [r7, #4]
    8e02:	689b      	ldr	r3, [r3, #8]
    8e04:	4413      	add	r3, r2
    8e06:	8bfa      	ldrh	r2, [r7, #30]
    8e08:	4619      	mov	r1, r3
    8e0a:	4b44      	ldr	r3, [pc, #272]	; (8f1c <_usb_d_dev_in_next+0x1f8>)
    8e0c:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    8e0e:	687b      	ldr	r3, [r7, #4]
    8e10:	68db      	ldr	r3, [r3, #12]
    8e12:	461a      	mov	r2, r3
    8e14:	7dfb      	ldrb	r3, [r7, #23]
    8e16:	2101      	movs	r1, #1
    8e18:	4618      	mov	r0, r3
    8e1a:	4b41      	ldr	r3, [pc, #260]	; (8f20 <_usb_d_dev_in_next+0x1fc>)
    8e1c:	4798      	blx	r3
    8e1e:	e011      	b.n	8e44 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    8e20:	8bfb      	ldrh	r3, [r7, #30]
    8e22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    8e26:	d902      	bls.n	8e2e <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    8e28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    8e2c:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    8e2e:	687b      	ldr	r3, [r7, #4]
    8e30:	681a      	ldr	r2, [r3, #0]
    8e32:	687b      	ldr	r3, [r7, #4]
    8e34:	689b      	ldr	r3, [r3, #8]
    8e36:	4413      	add	r3, r2
    8e38:	461a      	mov	r2, r3
    8e3a:	7dfb      	ldrb	r3, [r7, #23]
    8e3c:	2101      	movs	r1, #1
    8e3e:	4618      	mov	r0, r3
    8e40:	4b37      	ldr	r3, [pc, #220]	; (8f20 <_usb_d_dev_in_next+0x1fc>)
    8e42:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    8e44:	8bfa      	ldrh	r2, [r7, #30]
    8e46:	7df8      	ldrb	r0, [r7, #23]
    8e48:	2300      	movs	r3, #0
    8e4a:	2101      	movs	r1, #1
    8e4c:	4c35      	ldr	r4, [pc, #212]	; (8f24 <_usb_d_dev_in_next+0x200>)
    8e4e:	47a0      	blx	r4
		goto _in_tx_exec;
    8e50:	e041      	b.n	8ed6 <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    8e52:	687b      	ldr	r3, [r7, #4]
    8e54:	7cdb      	ldrb	r3, [r3, #19]
    8e56:	f003 0310 	and.w	r3, r3, #16
    8e5a:	b2db      	uxtb	r3, r3
    8e5c:	2b00      	cmp	r3, #0
    8e5e:	d00b      	beq.n	8e78 <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    8e60:	687a      	ldr	r2, [r7, #4]
    8e62:	7cd3      	ldrb	r3, [r2, #19]
    8e64:	f36f 1304 	bfc	r3, #4, #1
    8e68:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    8e6a:	7df8      	ldrb	r0, [r7, #23]
    8e6c:	2300      	movs	r3, #0
    8e6e:	2200      	movs	r2, #0
    8e70:	2101      	movs	r1, #1
    8e72:	4c2c      	ldr	r4, [pc, #176]	; (8f24 <_usb_d_dev_in_next+0x200>)
    8e74:	47a0      	blx	r4
		goto _in_tx_exec;
    8e76:	e02e      	b.n	8ed6 <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    8e78:	7afb      	ldrb	r3, [r7, #11]
    8e7a:	2b00      	cmp	r3, #0
    8e7c:	d006      	beq.n	8e8c <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    8e7e:	7dfb      	ldrb	r3, [r7, #23]
    8e80:	224b      	movs	r2, #75	; 0x4b
    8e82:	4619      	mov	r1, r3
    8e84:	69b8      	ldr	r0, [r7, #24]
    8e86:	4b28      	ldr	r3, [pc, #160]	; (8f28 <_usb_d_dev_in_next+0x204>)
    8e88:	4798      	blx	r3
    8e8a:	e005      	b.n	8e98 <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    8e8c:	7dfb      	ldrb	r3, [r7, #23]
    8e8e:	224a      	movs	r2, #74	; 0x4a
    8e90:	4619      	mov	r1, r3
    8e92:	69b8      	ldr	r0, [r7, #24]
    8e94:	4b24      	ldr	r3, [pc, #144]	; (8f28 <_usb_d_dev_in_next+0x204>)
    8e96:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    8e98:	687b      	ldr	r3, [r7, #4]
    8e9a:	8a1b      	ldrh	r3, [r3, #16]
    8e9c:	89ba      	ldrh	r2, [r7, #12]
    8e9e:	429a      	cmp	r2, r3
    8ea0:	d114      	bne.n	8ecc <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    8ea2:	687a      	ldr	r2, [r7, #4]
    8ea4:	7cd3      	ldrb	r3, [r2, #19]
    8ea6:	f36f 1386 	bfc	r3, #6, #1
    8eaa:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    8eac:	4b1f      	ldr	r3, [pc, #124]	; (8f2c <_usb_d_dev_in_next+0x208>)
    8eae:	68db      	ldr	r3, [r3, #12]
    8eb0:	687a      	ldr	r2, [r7, #4]
    8eb2:	7c90      	ldrb	r0, [r2, #18]
    8eb4:	687a      	ldr	r2, [r7, #4]
    8eb6:	6892      	ldr	r2, [r2, #8]
    8eb8:	4611      	mov	r1, r2
    8eba:	4798      	blx	r3
    8ebc:	4603      	mov	r3, r0
    8ebe:	2b00      	cmp	r3, #0
    8ec0:	d124      	bne.n	8f0c <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    8ec2:	687a      	ldr	r2, [r7, #4]
    8ec4:	7cd3      	ldrb	r3, [r2, #19]
    8ec6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8eca:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    8ecc:	2100      	movs	r1, #0
    8ece:	6878      	ldr	r0, [r7, #4]
    8ed0:	4b17      	ldr	r3, [pc, #92]	; (8f30 <_usb_d_dev_in_next+0x20c>)
    8ed2:	4798      	blx	r3
	return;
    8ed4:	e01b      	b.n	8f0e <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    8ed6:	78fb      	ldrb	r3, [r7, #3]
    8ed8:	f083 0301 	eor.w	r3, r3, #1
    8edc:	b2db      	uxtb	r3, r3
    8ede:	2b00      	cmp	r3, #0
    8ee0:	d00d      	beq.n	8efe <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    8ee2:	7afb      	ldrb	r3, [r7, #11]
    8ee4:	2b00      	cmp	r3, #0
    8ee6:	d002      	beq.n	8eee <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    8ee8:	234e      	movs	r3, #78	; 0x4e
    8eea:	777b      	strb	r3, [r7, #29]
    8eec:	e001      	b.n	8ef2 <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    8eee:	234a      	movs	r3, #74	; 0x4a
    8ef0:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    8ef2:	7f7a      	ldrb	r2, [r7, #29]
    8ef4:	7dfb      	ldrb	r3, [r7, #23]
    8ef6:	4619      	mov	r1, r3
    8ef8:	69b8      	ldr	r0, [r7, #24]
    8efa:	4b0e      	ldr	r3, [pc, #56]	; (8f34 <_usb_d_dev_in_next+0x210>)
    8efc:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    8efe:	7dfb      	ldrb	r3, [r7, #23]
    8f00:	2201      	movs	r2, #1
    8f02:	2101      	movs	r1, #1
    8f04:	4618      	mov	r0, r3
    8f06:	4b0c      	ldr	r3, [pc, #48]	; (8f38 <_usb_d_dev_in_next+0x214>)
    8f08:	4798      	blx	r3
    8f0a:	e000      	b.n	8f0e <_usb_d_dev_in_next+0x1ea>
			return;
    8f0c:	bf00      	nop
}
    8f0e:	3724      	adds	r7, #36	; 0x24
    8f10:	46bd      	mov	sp, r7
    8f12:	bd90      	pop	{r4, r7, pc}
    8f14:	20001014 	.word	0x20001014
    8f18:	0000871d 	.word	0x0000871d
    8f1c:	00012de5 	.word	0x00012de5
    8f20:	00008749 	.word	0x00008749
    8f24:	00008891 	.word	0x00008891
    8f28:	00008029 	.word	0x00008029
    8f2c:	20000f4c 	.word	0x20000f4c
    8f30:	0000a04d 	.word	0x0000a04d
    8f34:	00007ffd 	.word	0x00007ffd
    8f38:	00008949 	.word	0x00008949

00008f3c <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    8f3c:	b590      	push	{r4, r7, lr}
    8f3e:	b08b      	sub	sp, #44	; 0x2c
    8f40:	af00      	add	r7, sp, #0
    8f42:	6078      	str	r0, [r7, #4]
    8f44:	460b      	mov	r3, r1
    8f46:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    8f48:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8f4c:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    8f4e:	687b      	ldr	r3, [r7, #4]
    8f50:	7c9b      	ldrb	r3, [r3, #18]
    8f52:	f003 030f 	and.w	r3, r3, #15
    8f56:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    8f58:	7ffb      	ldrb	r3, [r7, #31]
    8f5a:	015b      	lsls	r3, r3, #5
    8f5c:	4a94      	ldr	r2, [pc, #592]	; (91b0 <_usb_d_dev_out_next+0x274>)
    8f5e:	4413      	add	r3, r2
    8f60:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    8f62:	78fb      	ldrb	r3, [r7, #3]
    8f64:	2b00      	cmp	r3, #0
    8f66:	d005      	beq.n	8f74 <_usb_d_dev_out_next+0x38>
    8f68:	69bb      	ldr	r3, [r7, #24]
    8f6a:	685b      	ldr	r3, [r3, #4]
    8f6c:	f3c3 338d 	ubfx	r3, r3, #14, #14
    8f70:	b29b      	uxth	r3, r3
    8f72:	e000      	b.n	8f76 <_usb_d_dev_out_next+0x3a>
    8f74:	2300      	movs	r3, #0
    8f76:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    8f78:	78fb      	ldrb	r3, [r7, #3]
    8f7a:	2b00      	cmp	r3, #0
    8f7c:	d005      	beq.n	8f8a <_usb_d_dev_out_next+0x4e>
    8f7e:	69bb      	ldr	r3, [r7, #24]
    8f80:	685b      	ldr	r3, [r3, #4]
    8f82:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8f86:	b29b      	uxth	r3, r3
    8f88:	e000      	b.n	8f8c <_usb_d_dev_out_next+0x50>
    8f8a:	2300      	movs	r3, #0
    8f8c:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    8f8e:	687b      	ldr	r3, [r7, #4]
    8f90:	8a1b      	ldrh	r3, [r3, #16]
    8f92:	f240 32ff 	movw	r2, #1023	; 0x3ff
    8f96:	4293      	cmp	r3, r2
    8f98:	d004      	beq.n	8fa4 <_usb_d_dev_out_next+0x68>
    8f9a:	687b      	ldr	r3, [r7, #4]
    8f9c:	8a1b      	ldrh	r3, [r3, #16]
    8f9e:	3b01      	subs	r3, #1
    8fa0:	b29b      	uxth	r3, r3
    8fa2:	e001      	b.n	8fa8 <_usb_d_dev_out_next+0x6c>
    8fa4:	f240 33ff 	movw	r3, #1023	; 0x3ff
    8fa8:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    8faa:	8aba      	ldrh	r2, [r7, #20]
    8fac:	8a7b      	ldrh	r3, [r7, #18]
    8fae:	4013      	ands	r3, r2
    8fb0:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    8fb2:	687b      	ldr	r3, [r7, #4]
    8fb4:	7cdb      	ldrb	r3, [r3, #19]
    8fb6:	f003 0307 	and.w	r3, r3, #7
    8fba:	b2db      	uxtb	r3, r3
    8fbc:	2b01      	cmp	r3, #1
    8fbe:	bf0c      	ite	eq
    8fc0:	2301      	moveq	r3, #1
    8fc2:	2300      	movne	r3, #0
    8fc4:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    8fc6:	78fb      	ldrb	r3, [r7, #3]
    8fc8:	2b00      	cmp	r3, #0
    8fca:	d004      	beq.n	8fd6 <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    8fcc:	7ffb      	ldrb	r3, [r7, #31]
    8fce:	2100      	movs	r1, #0
    8fd0:	4618      	mov	r0, r3
    8fd2:	4b78      	ldr	r3, [pc, #480]	; (91b4 <_usb_d_dev_out_next+0x278>)
    8fd4:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    8fd6:	687b      	ldr	r3, [r7, #4]
    8fd8:	7cdb      	ldrb	r3, [r3, #19]
    8fda:	f003 0320 	and.w	r3, r3, #32
    8fde:	b2db      	uxtb	r3, r3
    8fe0:	2b00      	cmp	r3, #0
    8fe2:	d01c      	beq.n	901e <_usb_d_dev_out_next+0xe2>
    8fe4:	687b      	ldr	r3, [r7, #4]
    8fe6:	685b      	ldr	r3, [r3, #4]
    8fe8:	2b00      	cmp	r3, #0
    8fea:	d018      	beq.n	901e <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    8fec:	687b      	ldr	r3, [r7, #4]
    8fee:	685b      	ldr	r3, [r3, #4]
    8ff0:	b29a      	uxth	r2, r3
    8ff2:	687b      	ldr	r3, [r7, #4]
    8ff4:	689b      	ldr	r3, [r3, #8]
    8ff6:	b29b      	uxth	r3, r3
    8ff8:	1ad3      	subs	r3, r2, r3
    8ffa:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    8ffc:	687b      	ldr	r3, [r7, #4]
    8ffe:	681a      	ldr	r2, [r3, #0]
    9000:	687b      	ldr	r3, [r7, #4]
    9002:	689b      	ldr	r3, [r3, #8]
    9004:	18d0      	adds	r0, r2, r3
    9006:	687b      	ldr	r3, [r7, #4]
    9008:	68d9      	ldr	r1, [r3, #12]
    900a:	89ba      	ldrh	r2, [r7, #12]
    900c:	8a3b      	ldrh	r3, [r7, #16]
    900e:	429a      	cmp	r2, r3
    9010:	d901      	bls.n	9016 <_usb_d_dev_out_next+0xda>
    9012:	8a3b      	ldrh	r3, [r7, #16]
    9014:	e000      	b.n	9018 <_usb_d_dev_out_next+0xdc>
    9016:	89bb      	ldrh	r3, [r7, #12]
    9018:	461a      	mov	r2, r3
    901a:	4b67      	ldr	r3, [pc, #412]	; (91b8 <_usb_d_dev_out_next+0x27c>)
    901c:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    901e:	687b      	ldr	r3, [r7, #4]
    9020:	685b      	ldr	r3, [r3, #4]
    9022:	2b00      	cmp	r3, #0
    9024:	d121      	bne.n	906a <_usb_d_dev_out_next+0x12e>
    9026:	687b      	ldr	r3, [r7, #4]
    9028:	7cdb      	ldrb	r3, [r3, #19]
    902a:	f003 0310 	and.w	r3, r3, #16
    902e:	b2db      	uxtb	r3, r3
    9030:	2b00      	cmp	r3, #0
    9032:	d01a      	beq.n	906a <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    9034:	687a      	ldr	r2, [r7, #4]
    9036:	7cd3      	ldrb	r3, [r2, #19]
    9038:	f36f 1304 	bfc	r3, #4, #1
    903c:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    903e:	687a      	ldr	r2, [r7, #4]
    9040:	7cd3      	ldrb	r3, [r2, #19]
    9042:	f043 0320 	orr.w	r3, r3, #32
    9046:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9048:	687b      	ldr	r3, [r7, #4]
    904a:	68db      	ldr	r3, [r3, #12]
    904c:	461a      	mov	r2, r3
    904e:	7ffb      	ldrb	r3, [r7, #31]
    9050:	2100      	movs	r1, #0
    9052:	4618      	mov	r0, r3
    9054:	4b59      	ldr	r3, [pc, #356]	; (91bc <_usb_d_dev_out_next+0x280>)
    9056:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    9058:	687b      	ldr	r3, [r7, #4]
    905a:	8a1b      	ldrh	r3, [r3, #16]
    905c:	461a      	mov	r2, r3
    905e:	7ff8      	ldrb	r0, [r7, #31]
    9060:	2300      	movs	r3, #0
    9062:	2100      	movs	r1, #0
    9064:	4c56      	ldr	r4, [pc, #344]	; (91c0 <_usb_d_dev_out_next+0x284>)
    9066:	47a0      	blx	r4
		goto _out_rx_exec;
    9068:	e090      	b.n	918c <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    906a:	78fb      	ldrb	r3, [r7, #3]
    906c:	2b00      	cmp	r3, #0
    906e:	d010      	beq.n	9092 <_usb_d_dev_out_next+0x156>
    9070:	687b      	ldr	r3, [r7, #4]
    9072:	8a1b      	ldrh	r3, [r3, #16]
    9074:	8a3a      	ldrh	r2, [r7, #16]
    9076:	429a      	cmp	r2, r3
    9078:	d20b      	bcs.n	9092 <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    907a:	687a      	ldr	r2, [r7, #4]
    907c:	7cd3      	ldrb	r3, [r2, #19]
    907e:	f36f 1304 	bfc	r3, #4, #1
    9082:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    9084:	687b      	ldr	r3, [r7, #4]
    9086:	689a      	ldr	r2, [r3, #8]
    9088:	8abb      	ldrh	r3, [r7, #20]
    908a:	441a      	add	r2, r3
    908c:	687b      	ldr	r3, [r7, #4]
    908e:	609a      	str	r2, [r3, #8]
    9090:	e05c      	b.n	914c <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    9092:	687b      	ldr	r3, [r7, #4]
    9094:	689a      	ldr	r2, [r3, #8]
    9096:	8afb      	ldrh	r3, [r7, #22]
    9098:	441a      	add	r2, r3
    909a:	687b      	ldr	r3, [r7, #4]
    909c:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    909e:	687b      	ldr	r3, [r7, #4]
    90a0:	689a      	ldr	r2, [r3, #8]
    90a2:	687b      	ldr	r3, [r7, #4]
    90a4:	685b      	ldr	r3, [r3, #4]
    90a6:	429a      	cmp	r2, r3
    90a8:	d250      	bcs.n	914c <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    90aa:	687b      	ldr	r3, [r7, #4]
    90ac:	685b      	ldr	r3, [r3, #4]
    90ae:	b29a      	uxth	r2, r3
    90b0:	687b      	ldr	r3, [r7, #4]
    90b2:	689b      	ldr	r3, [r3, #8]
    90b4:	b29b      	uxth	r3, r3
    90b6:	1ad3      	subs	r3, r2, r3
    90b8:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    90ba:	687b      	ldr	r3, [r7, #4]
    90bc:	7cdb      	ldrb	r3, [r3, #19]
    90be:	f003 0320 	and.w	r3, r3, #32
    90c2:	b2db      	uxtb	r3, r3
    90c4:	2b00      	cmp	r3, #0
    90c6:	d010      	beq.n	90ea <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    90c8:	687b      	ldr	r3, [r7, #4]
    90ca:	8a1b      	ldrh	r3, [r3, #16]
    90cc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    90ce:	429a      	cmp	r2, r3
    90d0:	d902      	bls.n	90d8 <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    90d2:	687b      	ldr	r3, [r7, #4]
    90d4:	8a1b      	ldrh	r3, [r3, #16]
    90d6:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    90d8:	687b      	ldr	r3, [r7, #4]
    90da:	68db      	ldr	r3, [r3, #12]
    90dc:	461a      	mov	r2, r3
    90de:	7ffb      	ldrb	r3, [r7, #31]
    90e0:	2100      	movs	r1, #0
    90e2:	4618      	mov	r0, r3
    90e4:	4b35      	ldr	r3, [pc, #212]	; (91bc <_usb_d_dev_out_next+0x280>)
    90e6:	4798      	blx	r3
    90e8:	e029      	b.n	913e <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    90ea:	687b      	ldr	r3, [r7, #4]
    90ec:	8a1b      	ldrh	r3, [r3, #16]
    90ee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    90f0:	429a      	cmp	r2, r3
    90f2:	d90f      	bls.n	9114 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    90f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    90f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    90fa:	d903      	bls.n	9104 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    90fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    9100:	84fb      	strh	r3, [r7, #38]	; 0x26
    9102:	e011      	b.n	9128 <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    9104:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9106:	8a7b      	ldrh	r3, [r7, #18]
    9108:	4013      	ands	r3, r2
    910a:	b29b      	uxth	r3, r3
    910c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    910e:	1ad3      	subs	r3, r2, r3
    9110:	84fb      	strh	r3, [r7, #38]	; 0x26
    9112:	e009      	b.n	9128 <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    9114:	687b      	ldr	r3, [r7, #4]
    9116:	8a1b      	ldrh	r3, [r3, #16]
    9118:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    911a:	429a      	cmp	r2, r3
    911c:	d204      	bcs.n	9128 <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    911e:	687a      	ldr	r2, [r7, #4]
    9120:	7cd3      	ldrb	r3, [r2, #19]
    9122:	f043 0320 	orr.w	r3, r3, #32
    9126:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    9128:	687b      	ldr	r3, [r7, #4]
    912a:	681a      	ldr	r2, [r3, #0]
    912c:	687b      	ldr	r3, [r7, #4]
    912e:	689b      	ldr	r3, [r3, #8]
    9130:	4413      	add	r3, r2
    9132:	461a      	mov	r2, r3
    9134:	7ffb      	ldrb	r3, [r7, #31]
    9136:	2100      	movs	r1, #0
    9138:	4618      	mov	r0, r3
    913a:	4b20      	ldr	r3, [pc, #128]	; (91bc <_usb_d_dev_out_next+0x280>)
    913c:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    913e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9140:	7ff8      	ldrb	r0, [r7, #31]
    9142:	2300      	movs	r3, #0
    9144:	2100      	movs	r1, #0
    9146:	4c1e      	ldr	r4, [pc, #120]	; (91c0 <_usb_d_dev_out_next+0x284>)
    9148:	47a0      	blx	r4
			goto _out_rx_exec;
    914a:	e01f      	b.n	918c <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    914c:	7bfb      	ldrb	r3, [r7, #15]
    914e:	2b00      	cmp	r3, #0
    9150:	d006      	beq.n	9160 <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    9152:	7ffb      	ldrb	r3, [r7, #31]
    9154:	222d      	movs	r2, #45	; 0x2d
    9156:	4619      	mov	r1, r3
    9158:	6a38      	ldr	r0, [r7, #32]
    915a:	4b1a      	ldr	r3, [pc, #104]	; (91c4 <_usb_d_dev_out_next+0x288>)
    915c:	4798      	blx	r3
    915e:	e005      	b.n	916c <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    9160:	7ffb      	ldrb	r3, [r7, #31]
    9162:	2225      	movs	r2, #37	; 0x25
    9164:	4619      	mov	r1, r3
    9166:	6a38      	ldr	r0, [r7, #32]
    9168:	4b16      	ldr	r3, [pc, #88]	; (91c4 <_usb_d_dev_out_next+0x288>)
    916a:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    916c:	7ffb      	ldrb	r3, [r7, #31]
    916e:	2b00      	cmp	r3, #0
    9170:	d107      	bne.n	9182 <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9172:	687b      	ldr	r3, [r7, #4]
    9174:	68db      	ldr	r3, [r3, #12]
    9176:	461a      	mov	r2, r3
    9178:	7ffb      	ldrb	r3, [r7, #31]
    917a:	2100      	movs	r1, #0
    917c:	4618      	mov	r0, r3
    917e:	4b0f      	ldr	r3, [pc, #60]	; (91bc <_usb_d_dev_out_next+0x280>)
    9180:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    9182:	2100      	movs	r1, #0
    9184:	6878      	ldr	r0, [r7, #4]
    9186:	4b10      	ldr	r3, [pc, #64]	; (91c8 <_usb_d_dev_out_next+0x28c>)
    9188:	4798      	blx	r3
	return;
    918a:	e031      	b.n	91f0 <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    918c:	78fb      	ldrb	r3, [r7, #3]
    918e:	f083 0301 	eor.w	r3, r3, #1
    9192:	b2db      	uxtb	r3, r3
    9194:	2b00      	cmp	r3, #0
    9196:	d025      	beq.n	91e4 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    9198:	7bfb      	ldrb	r3, [r7, #15]
    919a:	2b00      	cmp	r3, #0
    919c:	d018      	beq.n	91d0 <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    919e:	7ffb      	ldrb	r3, [r7, #31]
    91a0:	2101      	movs	r1, #1
    91a2:	4618      	mov	r0, r3
    91a4:	4b09      	ldr	r3, [pc, #36]	; (91cc <_usb_d_dev_out_next+0x290>)
    91a6:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    91a8:	232d      	movs	r3, #45	; 0x2d
    91aa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    91ae:	e012      	b.n	91d6 <_usb_d_dev_out_next+0x29a>
    91b0:	20001014 	.word	0x20001014
    91b4:	0000871d 	.word	0x0000871d
    91b8:	00012de5 	.word	0x00012de5
    91bc:	00008749 	.word	0x00008749
    91c0:	000088d1 	.word	0x000088d1
    91c4:	00008029 	.word	0x00008029
    91c8:	0000a04d 	.word	0x0000a04d
    91cc:	00008911 	.word	0x00008911
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    91d0:	2325      	movs	r3, #37	; 0x25
    91d2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    91d6:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    91da:	7ffb      	ldrb	r3, [r7, #31]
    91dc:	4619      	mov	r1, r3
    91de:	6a38      	ldr	r0, [r7, #32]
    91e0:	4b05      	ldr	r3, [pc, #20]	; (91f8 <_usb_d_dev_out_next+0x2bc>)
    91e2:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    91e4:	7ffb      	ldrb	r3, [r7, #31]
    91e6:	2201      	movs	r2, #1
    91e8:	2100      	movs	r1, #0
    91ea:	4618      	mov	r0, r3
    91ec:	4b03      	ldr	r3, [pc, #12]	; (91fc <_usb_d_dev_out_next+0x2c0>)
    91ee:	4798      	blx	r3
}
    91f0:	372c      	adds	r7, #44	; 0x2c
    91f2:	46bd      	mov	sp, r7
    91f4:	bd90      	pop	{r4, r7, pc}
    91f6:	bf00      	nop
    91f8:	00007ffd 	.word	0x00007ffd
    91fc:	000089a1 	.word	0x000089a1

00009200 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    9200:	b580      	push	{r7, lr}
    9202:	b084      	sub	sp, #16
    9204:	af00      	add	r7, sp, #0
    9206:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    9208:	687b      	ldr	r3, [r7, #4]
    920a:	7c9b      	ldrb	r3, [r3, #18]
    920c:	f003 030f 	and.w	r3, r3, #15
    9210:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    9212:	687b      	ldr	r3, [r7, #4]
    9214:	7cdb      	ldrb	r3, [r3, #19]
    9216:	f003 0307 	and.w	r3, r3, #7
    921a:	b2db      	uxtb	r3, r3
    921c:	2b01      	cmp	r3, #1
    921e:	bf0c      	ite	eq
    9220:	2301      	moveq	r3, #1
    9222:	2300      	movne	r3, #0
    9224:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    9226:	7bbb      	ldrb	r3, [r7, #14]
    9228:	f083 0301 	eor.w	r3, r3, #1
    922c:	b2db      	uxtb	r3, r3
    922e:	2b00      	cmp	r3, #0
    9230:	d008      	beq.n	9244 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    9232:	7bfb      	ldrb	r3, [r7, #15]
    9234:	4618      	mov	r0, r3
    9236:	4b20      	ldr	r3, [pc, #128]	; (92b8 <_usb_d_dev_handle_setup+0xb8>)
    9238:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    923a:	7bfb      	ldrb	r3, [r7, #15]
    923c:	4618      	mov	r0, r3
    923e:	4b1f      	ldr	r3, [pc, #124]	; (92bc <_usb_d_dev_handle_setup+0xbc>)
    9240:	4798      	blx	r3
		return;
    9242:	e036      	b.n	92b2 <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    9244:	687b      	ldr	r3, [r7, #4]
    9246:	7cdb      	ldrb	r3, [r3, #19]
    9248:	f003 0340 	and.w	r3, r3, #64	; 0x40
    924c:	b2db      	uxtb	r3, r3
    924e:	2b00      	cmp	r3, #0
    9250:	d010      	beq.n	9274 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    9252:	687a      	ldr	r2, [r7, #4]
    9254:	7cd3      	ldrb	r3, [r2, #19]
    9256:	f36f 1386 	bfc	r3, #6, #1
    925a:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    925c:	7bfb      	ldrb	r3, [r7, #15]
    925e:	2200      	movs	r2, #0
    9260:	2101      	movs	r1, #1
    9262:	4618      	mov	r0, r3
    9264:	4b16      	ldr	r3, [pc, #88]	; (92c0 <_usb_d_dev_handle_setup+0xc0>)
    9266:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    9268:	7bfb      	ldrb	r3, [r7, #15]
    926a:	2200      	movs	r2, #0
    926c:	2100      	movs	r1, #0
    926e:	4618      	mov	r0, r3
    9270:	4b14      	ldr	r3, [pc, #80]	; (92c4 <_usb_d_dev_handle_setup+0xc4>)
    9272:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    9274:	687a      	ldr	r2, [r7, #4]
    9276:	7cd3      	ldrb	r3, [r2, #19]
    9278:	f36f 03c3 	bfc	r3, #3, #1
    927c:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    927e:	7bfb      	ldrb	r3, [r7, #15]
    9280:	2100      	movs	r1, #0
    9282:	4618      	mov	r0, r3
    9284:	4b10      	ldr	r3, [pc, #64]	; (92c8 <_usb_d_dev_handle_setup+0xc8>)
    9286:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    9288:	7bfb      	ldrb	r3, [r7, #15]
    928a:	2101      	movs	r1, #1
    928c:	4618      	mov	r0, r3
    928e:	4b0e      	ldr	r3, [pc, #56]	; (92c8 <_usb_d_dev_handle_setup+0xc8>)
    9290:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    9292:	7bfb      	ldrb	r3, [r7, #15]
    9294:	216f      	movs	r1, #111	; 0x6f
    9296:	4618      	mov	r0, r3
    9298:	4b0c      	ldr	r3, [pc, #48]	; (92cc <_usb_d_dev_handle_setup+0xcc>)
    929a:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    929c:	7bfb      	ldrb	r3, [r7, #15]
    929e:	216f      	movs	r1, #111	; 0x6f
    92a0:	4618      	mov	r0, r3
    92a2:	4b0b      	ldr	r3, [pc, #44]	; (92d0 <_usb_d_dev_handle_setup+0xd0>)
    92a4:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    92a6:	4b0b      	ldr	r3, [pc, #44]	; (92d4 <_usb_d_dev_handle_setup+0xd4>)
    92a8:	689b      	ldr	r3, [r3, #8]
    92aa:	687a      	ldr	r2, [r7, #4]
    92ac:	7c92      	ldrb	r2, [r2, #18]
    92ae:	4610      	mov	r0, r2
    92b0:	4798      	blx	r3
}
    92b2:	3710      	adds	r7, #16
    92b4:	46bd      	mov	sp, r7
    92b6:	bd80      	pop	{r7, pc}
    92b8:	000086a5 	.word	0x000086a5
    92bc:	00008651 	.word	0x00008651
    92c0:	00008949 	.word	0x00008949
    92c4:	000089a1 	.word	0x000089a1
    92c8:	00008911 	.word	0x00008911
    92cc:	00008451 	.word	0x00008451
    92d0:	000084a1 	.word	0x000084a1
    92d4:	20000f4c 	.word	0x20000f4c

000092d8 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    92d8:	b580      	push	{r7, lr}
    92da:	b084      	sub	sp, #16
    92dc:	af00      	add	r7, sp, #0
    92de:	6078      	str	r0, [r7, #4]
    92e0:	460b      	mov	r3, r1
    92e2:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    92e4:	687b      	ldr	r3, [r7, #4]
    92e6:	7c9b      	ldrb	r3, [r3, #18]
    92e8:	f003 030f 	and.w	r3, r3, #15
    92ec:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    92ee:	78f9      	ldrb	r1, [r7, #3]
    92f0:	7bfb      	ldrb	r3, [r7, #15]
    92f2:	2200      	movs	r2, #0
    92f4:	4618      	mov	r0, r3
    92f6:	4b07      	ldr	r3, [pc, #28]	; (9314 <_usb_d_dev_handle_stall+0x3c>)
    92f8:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    92fa:	4b07      	ldr	r3, [pc, #28]	; (9318 <_usb_d_dev_handle_stall+0x40>)
    92fc:	691b      	ldr	r3, [r3, #16]
    92fe:	687a      	ldr	r2, [r7, #4]
    9300:	7c90      	ldrb	r0, [r2, #18]
    9302:	687a      	ldr	r2, [r7, #4]
    9304:	6892      	ldr	r2, [r2, #8]
    9306:	2101      	movs	r1, #1
    9308:	4798      	blx	r3
}
    930a:	bf00      	nop
    930c:	3710      	adds	r7, #16
    930e:	46bd      	mov	sp, r7
    9310:	bd80      	pop	{r7, pc}
    9312:	bf00      	nop
    9314:	00008605 	.word	0x00008605
    9318:	20000f4c 	.word	0x20000f4c

0000931c <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    931c:	b580      	push	{r7, lr}
    931e:	b088      	sub	sp, #32
    9320:	af00      	add	r7, sp, #0
    9322:	6078      	str	r0, [r7, #4]
    9324:	460b      	mov	r3, r1
    9326:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    9328:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    932c:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    932e:	687b      	ldr	r3, [r7, #4]
    9330:	7c9b      	ldrb	r3, [r3, #18]
    9332:	f003 030f 	and.w	r3, r3, #15
    9336:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    9338:	4b61      	ldr	r3, [pc, #388]	; (94c0 <_usb_d_dev_handle_trfail+0x1a4>)
    933a:	881b      	ldrh	r3, [r3, #0]
    933c:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    933e:	7efb      	ldrb	r3, [r7, #27]
    9340:	015b      	lsls	r3, r3, #5
    9342:	4a60      	ldr	r2, [pc, #384]	; (94c4 <_usb_d_dev_handle_trfail+0x1a8>)
    9344:	4413      	add	r3, r2
    9346:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    9348:	78fb      	ldrb	r3, [r7, #3]
    934a:	2b00      	cmp	r3, #0
    934c:	d006      	beq.n	935c <_usb_d_dev_handle_trfail+0x40>
    934e:	7efb      	ldrb	r3, [r7, #27]
    9350:	4619      	mov	r1, r3
    9352:	69f8      	ldr	r0, [r7, #28]
    9354:	4b5c      	ldr	r3, [pc, #368]	; (94c8 <_usb_d_dev_handle_trfail+0x1ac>)
    9356:	4798      	blx	r3
    9358:	4603      	mov	r3, r0
    935a:	e005      	b.n	9368 <_usb_d_dev_handle_trfail+0x4c>
    935c:	7efb      	ldrb	r3, [r7, #27]
    935e:	4619      	mov	r1, r3
    9360:	69f8      	ldr	r0, [r7, #28]
    9362:	4b5a      	ldr	r3, [pc, #360]	; (94cc <_usb_d_dev_handle_trfail+0x1b0>)
    9364:	4798      	blx	r3
    9366:	4603      	mov	r3, r0
    9368:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    936a:	687b      	ldr	r3, [r7, #4]
    936c:	7cdb      	ldrb	r3, [r3, #19]
    936e:	f003 0307 	and.w	r3, r3, #7
    9372:	b2db      	uxtb	r3, r3
    9374:	2b01      	cmp	r3, #1
    9376:	bf0c      	ite	eq
    9378:	2301      	moveq	r3, #1
    937a:	2300      	movne	r3, #0
    937c:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    937e:	78fb      	ldrb	r3, [r7, #3]
    9380:	011b      	lsls	r3, r3, #4
    9382:	697a      	ldr	r2, [r7, #20]
    9384:	4413      	add	r3, r2
    9386:	7a9b      	ldrb	r3, [r3, #10]
    9388:	b2db      	uxtb	r3, r3
    938a:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    938c:	7cfb      	ldrb	r3, [r7, #19]
    938e:	2b02      	cmp	r3, #2
    9390:	d12f      	bne.n	93f2 <_usb_d_dev_handle_trfail+0xd6>
    9392:	7b3b      	ldrb	r3, [r7, #12]
    9394:	f003 0301 	and.w	r3, r3, #1
    9398:	b2db      	uxtb	r3, r3
    939a:	2b00      	cmp	r3, #0
    939c:	d029      	beq.n	93f2 <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    939e:	78fb      	ldrb	r3, [r7, #3]
    93a0:	011b      	lsls	r3, r3, #4
    93a2:	697a      	ldr	r2, [r7, #20]
    93a4:	441a      	add	r2, r3
    93a6:	7a93      	ldrb	r3, [r2, #10]
    93a8:	f36f 0300 	bfc	r3, #0, #1
    93ac:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    93ae:	78fb      	ldrb	r3, [r7, #3]
    93b0:	f107 0220 	add.w	r2, r7, #32
    93b4:	4413      	add	r3, r2
    93b6:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    93ba:	7efb      	ldrb	r3, [r7, #27]
    93bc:	4619      	mov	r1, r3
    93be:	69f8      	ldr	r0, [r7, #28]
    93c0:	4b43      	ldr	r3, [pc, #268]	; (94d0 <_usb_d_dev_handle_trfail+0x1b4>)
    93c2:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    93c4:	78fb      	ldrb	r3, [r7, #3]
    93c6:	f107 0220 	add.w	r2, r7, #32
    93ca:	4413      	add	r3, r2
    93cc:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    93d0:	7efb      	ldrb	r3, [r7, #27]
    93d2:	4619      	mov	r1, r3
    93d4:	69f8      	ldr	r0, [r7, #28]
    93d6:	4b3f      	ldr	r3, [pc, #252]	; (94d4 <_usb_d_dev_handle_trfail+0x1b8>)
    93d8:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    93da:	78fb      	ldrb	r3, [r7, #3]
    93dc:	2b00      	cmp	r3, #0
    93de:	bf14      	ite	ne
    93e0:	2301      	movne	r3, #1
    93e2:	2300      	moveq	r3, #0
    93e4:	b2db      	uxtb	r3, r3
    93e6:	2204      	movs	r2, #4
    93e8:	4619      	mov	r1, r3
    93ea:	6878      	ldr	r0, [r7, #4]
    93ec:	4b3a      	ldr	r3, [pc, #232]	; (94d8 <_usb_d_dev_handle_trfail+0x1bc>)
    93ee:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    93f0:	e062      	b.n	94b8 <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    93f2:	7b3b      	ldrb	r3, [r7, #12]
    93f4:	f003 0302 	and.w	r3, r3, #2
    93f8:	b2db      	uxtb	r3, r3
    93fa:	2b00      	cmp	r3, #0
    93fc:	d040      	beq.n	9480 <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    93fe:	78fb      	ldrb	r3, [r7, #3]
    9400:	011b      	lsls	r3, r3, #4
    9402:	697a      	ldr	r2, [r7, #20]
    9404:	441a      	add	r2, r3
    9406:	7a93      	ldrb	r3, [r2, #10]
    9408:	f36f 0341 	bfc	r3, #1, #1
    940c:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    940e:	78fb      	ldrb	r3, [r7, #3]
    9410:	f107 0220 	add.w	r2, r7, #32
    9414:	4413      	add	r3, r2
    9416:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    941a:	7efb      	ldrb	r3, [r7, #27]
    941c:	4619      	mov	r1, r3
    941e:	69f8      	ldr	r0, [r7, #28]
    9420:	4b2b      	ldr	r3, [pc, #172]	; (94d0 <_usb_d_dev_handle_trfail+0x1b4>)
    9422:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    9424:	78fb      	ldrb	r3, [r7, #3]
    9426:	f107 0220 	add.w	r2, r7, #32
    942a:	4413      	add	r3, r2
    942c:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9430:	7efb      	ldrb	r3, [r7, #27]
    9432:	4619      	mov	r1, r3
    9434:	69f8      	ldr	r0, [r7, #28]
    9436:	4b27      	ldr	r3, [pc, #156]	; (94d4 <_usb_d_dev_handle_trfail+0x1b8>)
    9438:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    943a:	7cbb      	ldrb	r3, [r7, #18]
    943c:	2b00      	cmp	r3, #0
    943e:	d03b      	beq.n	94b8 <_usb_d_dev_handle_trfail+0x19c>
    9440:	687b      	ldr	r3, [r7, #4]
    9442:	7cdb      	ldrb	r3, [r3, #19]
    9444:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9448:	b2db      	uxtb	r3, r3
    944a:	2b00      	cmp	r3, #0
    944c:	d034      	beq.n	94b8 <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    944e:	687b      	ldr	r3, [r7, #4]
    9450:	7cdb      	ldrb	r3, [r3, #19]
    9452:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    9456:	b2db      	uxtb	r3, r3
    9458:	461a      	mov	r2, r3
    945a:	78fb      	ldrb	r3, [r7, #3]
    945c:	4293      	cmp	r3, r2
    945e:	d02b      	beq.n	94b8 <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    9460:	687b      	ldr	r3, [r7, #4]
    9462:	7cdb      	ldrb	r3, [r3, #19]
    9464:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    9468:	b2db      	uxtb	r3, r3
    946a:	2b00      	cmp	r3, #0
    946c:	bf14      	ite	ne
    946e:	2301      	movne	r3, #1
    9470:	2300      	moveq	r3, #0
    9472:	b2db      	uxtb	r3, r3
    9474:	2200      	movs	r2, #0
    9476:	4619      	mov	r1, r3
    9478:	6878      	ldr	r0, [r7, #4]
    947a:	4b17      	ldr	r3, [pc, #92]	; (94d8 <_usb_d_dev_handle_trfail+0x1bc>)
    947c:	4798      	blx	r3
}
    947e:	e01b      	b.n	94b8 <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    9480:	78fa      	ldrb	r2, [r7, #3]
    9482:	7efb      	ldrb	r3, [r7, #27]
    9484:	4611      	mov	r1, r2
    9486:	4618      	mov	r0, r3
    9488:	4b14      	ldr	r3, [pc, #80]	; (94dc <_usb_d_dev_handle_trfail+0x1c0>)
    948a:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    948c:	78fb      	ldrb	r3, [r7, #3]
    948e:	f107 0220 	add.w	r2, r7, #32
    9492:	4413      	add	r3, r2
    9494:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9498:	7efb      	ldrb	r3, [r7, #27]
    949a:	4619      	mov	r1, r3
    949c:	69f8      	ldr	r0, [r7, #28]
    949e:	4b0c      	ldr	r3, [pc, #48]	; (94d0 <_usb_d_dev_handle_trfail+0x1b4>)
    94a0:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    94a2:	78fb      	ldrb	r3, [r7, #3]
    94a4:	f107 0220 	add.w	r2, r7, #32
    94a8:	4413      	add	r3, r2
    94aa:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    94ae:	7efb      	ldrb	r3, [r7, #27]
    94b0:	4619      	mov	r1, r3
    94b2:	69f8      	ldr	r0, [r7, #28]
    94b4:	4b07      	ldr	r3, [pc, #28]	; (94d4 <_usb_d_dev_handle_trfail+0x1b8>)
    94b6:	4798      	blx	r3
}
    94b8:	bf00      	nop
    94ba:	3720      	adds	r7, #32
    94bc:	46bd      	mov	sp, r7
    94be:	bd80      	pop	{r7, pc}
    94c0:	00013478 	.word	0x00013478
    94c4:	20001014 	.word	0x20001014
    94c8:	00008085 	.word	0x00008085
    94cc:	00008055 	.word	0x00008055
    94d0:	00007f29 	.word	0x00007f29
    94d4:	00008029 	.word	0x00008029
    94d8:	0000a095 	.word	0x0000a095
    94dc:	00008911 	.word	0x00008911

000094e0 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    94e0:	b580      	push	{r7, lr}
    94e2:	b082      	sub	sp, #8
    94e4:	af00      	add	r7, sp, #0
    94e6:	6078      	str	r0, [r7, #4]
    94e8:	460b      	mov	r3, r1
    94ea:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    94ec:	78fb      	ldrb	r3, [r7, #3]
    94ee:	f003 0310 	and.w	r3, r3, #16
    94f2:	2b00      	cmp	r3, #0
    94f4:	d003      	beq.n	94fe <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    94f6:	6878      	ldr	r0, [r7, #4]
    94f8:	4b0c      	ldr	r3, [pc, #48]	; (952c <_usb_d_dev_trans_setup_isr+0x4c>)
    94fa:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    94fc:	e012      	b.n	9524 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    94fe:	78fb      	ldrb	r3, [r7, #3]
    9500:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9504:	2b00      	cmp	r3, #0
    9506:	d004      	beq.n	9512 <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    9508:	2101      	movs	r1, #1
    950a:	6878      	ldr	r0, [r7, #4]
    950c:	4b08      	ldr	r3, [pc, #32]	; (9530 <_usb_d_dev_trans_setup_isr+0x50>)
    950e:	4798      	blx	r3
}
    9510:	e008      	b.n	9524 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    9512:	78fb      	ldrb	r3, [r7, #3]
    9514:	f003 0320 	and.w	r3, r3, #32
    9518:	2b00      	cmp	r3, #0
    951a:	d003      	beq.n	9524 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    951c:	2100      	movs	r1, #0
    951e:	6878      	ldr	r0, [r7, #4]
    9520:	4b03      	ldr	r3, [pc, #12]	; (9530 <_usb_d_dev_trans_setup_isr+0x50>)
    9522:	4798      	blx	r3
}
    9524:	bf00      	nop
    9526:	3708      	adds	r7, #8
    9528:	46bd      	mov	sp, r7
    952a:	bd80      	pop	{r7, pc}
    952c:	00009201 	.word	0x00009201
    9530:	000092d9 	.word	0x000092d9

00009534 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9534:	b580      	push	{r7, lr}
    9536:	b082      	sub	sp, #8
    9538:	af00      	add	r7, sp, #0
    953a:	6078      	str	r0, [r7, #4]
    953c:	460b      	mov	r3, r1
    953e:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    9540:	78fb      	ldrb	r3, [r7, #3]
    9542:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9546:	2b00      	cmp	r3, #0
    9548:	d004      	beq.n	9554 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    954a:	2101      	movs	r1, #1
    954c:	6878      	ldr	r0, [r7, #4]
    954e:	4b1a      	ldr	r3, [pc, #104]	; (95b8 <_usb_d_dev_trans_in_isr+0x84>)
    9550:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    9552:	e02c      	b.n	95ae <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    9554:	78fb      	ldrb	r3, [r7, #3]
    9556:	f003 0308 	and.w	r3, r3, #8
    955a:	2b00      	cmp	r3, #0
    955c:	d004      	beq.n	9568 <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    955e:	2101      	movs	r1, #1
    9560:	6878      	ldr	r0, [r7, #4]
    9562:	4b16      	ldr	r3, [pc, #88]	; (95bc <_usb_d_dev_trans_in_isr+0x88>)
    9564:	4798      	blx	r3
}
    9566:	e022      	b.n	95ae <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    9568:	78fb      	ldrb	r3, [r7, #3]
    956a:	f003 0302 	and.w	r3, r3, #2
    956e:	2b00      	cmp	r3, #0
    9570:	d004      	beq.n	957c <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    9572:	2101      	movs	r1, #1
    9574:	6878      	ldr	r0, [r7, #4]
    9576:	4b12      	ldr	r3, [pc, #72]	; (95c0 <_usb_d_dev_trans_in_isr+0x8c>)
    9578:	4798      	blx	r3
}
    957a:	e018      	b.n	95ae <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    957c:	687b      	ldr	r3, [r7, #4]
    957e:	7cdb      	ldrb	r3, [r3, #19]
    9580:	f003 0307 	and.w	r3, r3, #7
    9584:	b2db      	uxtb	r3, r3
    9586:	2b01      	cmp	r3, #1
    9588:	d111      	bne.n	95ae <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    958a:	78fb      	ldrb	r3, [r7, #3]
    958c:	f003 0304 	and.w	r3, r3, #4
    9590:	2b00      	cmp	r3, #0
    9592:	d004      	beq.n	959e <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    9594:	2100      	movs	r1, #0
    9596:	6878      	ldr	r0, [r7, #4]
    9598:	4b08      	ldr	r3, [pc, #32]	; (95bc <_usb_d_dev_trans_in_isr+0x88>)
    959a:	4798      	blx	r3
}
    959c:	e007      	b.n	95ae <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    959e:	78fb      	ldrb	r3, [r7, #3]
    95a0:	f003 0310 	and.w	r3, r3, #16
    95a4:	2b00      	cmp	r3, #0
    95a6:	d002      	beq.n	95ae <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    95a8:	6878      	ldr	r0, [r7, #4]
    95aa:	4b06      	ldr	r3, [pc, #24]	; (95c4 <_usb_d_dev_trans_in_isr+0x90>)
    95ac:	4798      	blx	r3
}
    95ae:	bf00      	nop
    95b0:	3708      	adds	r7, #8
    95b2:	46bd      	mov	sp, r7
    95b4:	bd80      	pop	{r7, pc}
    95b6:	bf00      	nop
    95b8:	000092d9 	.word	0x000092d9
    95bc:	0000931d 	.word	0x0000931d
    95c0:	00008d25 	.word	0x00008d25
    95c4:	00009201 	.word	0x00009201

000095c8 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    95c8:	b580      	push	{r7, lr}
    95ca:	b082      	sub	sp, #8
    95cc:	af00      	add	r7, sp, #0
    95ce:	6078      	str	r0, [r7, #4]
    95d0:	460b      	mov	r3, r1
    95d2:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    95d4:	78fb      	ldrb	r3, [r7, #3]
    95d6:	f003 0320 	and.w	r3, r3, #32
    95da:	2b00      	cmp	r3, #0
    95dc:	d004      	beq.n	95e8 <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    95de:	2100      	movs	r1, #0
    95e0:	6878      	ldr	r0, [r7, #4]
    95e2:	4b1a      	ldr	r3, [pc, #104]	; (964c <_usb_d_dev_trans_out_isr+0x84>)
    95e4:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    95e6:	e02c      	b.n	9642 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    95e8:	78fb      	ldrb	r3, [r7, #3]
    95ea:	f003 0304 	and.w	r3, r3, #4
    95ee:	2b00      	cmp	r3, #0
    95f0:	d004      	beq.n	95fc <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    95f2:	2100      	movs	r1, #0
    95f4:	6878      	ldr	r0, [r7, #4]
    95f6:	4b16      	ldr	r3, [pc, #88]	; (9650 <_usb_d_dev_trans_out_isr+0x88>)
    95f8:	4798      	blx	r3
}
    95fa:	e022      	b.n	9642 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    95fc:	78fb      	ldrb	r3, [r7, #3]
    95fe:	f003 0301 	and.w	r3, r3, #1
    9602:	2b00      	cmp	r3, #0
    9604:	d004      	beq.n	9610 <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    9606:	2101      	movs	r1, #1
    9608:	6878      	ldr	r0, [r7, #4]
    960a:	4b12      	ldr	r3, [pc, #72]	; (9654 <_usb_d_dev_trans_out_isr+0x8c>)
    960c:	4798      	blx	r3
}
    960e:	e018      	b.n	9642 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    9610:	687b      	ldr	r3, [r7, #4]
    9612:	7cdb      	ldrb	r3, [r3, #19]
    9614:	f003 0307 	and.w	r3, r3, #7
    9618:	b2db      	uxtb	r3, r3
    961a:	2b01      	cmp	r3, #1
    961c:	d111      	bne.n	9642 <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    961e:	78fb      	ldrb	r3, [r7, #3]
    9620:	f003 0308 	and.w	r3, r3, #8
    9624:	2b00      	cmp	r3, #0
    9626:	d004      	beq.n	9632 <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    9628:	2101      	movs	r1, #1
    962a:	6878      	ldr	r0, [r7, #4]
    962c:	4b08      	ldr	r3, [pc, #32]	; (9650 <_usb_d_dev_trans_out_isr+0x88>)
    962e:	4798      	blx	r3
}
    9630:	e007      	b.n	9642 <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9632:	78fb      	ldrb	r3, [r7, #3]
    9634:	f003 0310 	and.w	r3, r3, #16
    9638:	2b00      	cmp	r3, #0
    963a:	d002      	beq.n	9642 <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    963c:	6878      	ldr	r0, [r7, #4]
    963e:	4b06      	ldr	r3, [pc, #24]	; (9658 <_usb_d_dev_trans_out_isr+0x90>)
    9640:	4798      	blx	r3
}
    9642:	bf00      	nop
    9644:	3708      	adds	r7, #8
    9646:	46bd      	mov	sp, r7
    9648:	bd80      	pop	{r7, pc}
    964a:	bf00      	nop
    964c:	000092d9 	.word	0x000092d9
    9650:	0000931d 	.word	0x0000931d
    9654:	00008f3d 	.word	0x00008f3d
    9658:	00009201 	.word	0x00009201

0000965c <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    965c:	b580      	push	{r7, lr}
    965e:	b084      	sub	sp, #16
    9660:	af00      	add	r7, sp, #0
    9662:	6078      	str	r0, [r7, #4]
    9664:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    9666:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    966a:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    966c:	683b      	ldr	r3, [r7, #0]
    966e:	7c9b      	ldrb	r3, [r3, #18]
    9670:	f003 030f 	and.w	r3, r3, #15
    9674:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    9676:	7afb      	ldrb	r3, [r7, #11]
    9678:	2201      	movs	r2, #1
    967a:	409a      	lsls	r2, r3
    967c:	687b      	ldr	r3, [r7, #4]
    967e:	4013      	ands	r3, r2
    9680:	2b00      	cmp	r3, #0
    9682:	d03d      	beq.n	9700 <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    9684:	7afb      	ldrb	r3, [r7, #11]
    9686:	68fa      	ldr	r2, [r7, #12]
    9688:	3308      	adds	r3, #8
    968a:	015b      	lsls	r3, r3, #5
    968c:	4413      	add	r3, r2
    968e:	3307      	adds	r3, #7
    9690:	781b      	ldrb	r3, [r3, #0]
    9692:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    9694:	7afb      	ldrb	r3, [r7, #11]
    9696:	68fa      	ldr	r2, [r7, #12]
    9698:	015b      	lsls	r3, r3, #5
    969a:	4413      	add	r3, r2
    969c:	f203 1309 	addw	r3, r3, #265	; 0x109
    96a0:	781b      	ldrb	r3, [r3, #0]
    96a2:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    96a4:	7aba      	ldrb	r2, [r7, #10]
    96a6:	7a7b      	ldrb	r3, [r7, #9]
    96a8:	4013      	ands	r3, r2
    96aa:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    96ac:	7abb      	ldrb	r3, [r7, #10]
    96ae:	2b00      	cmp	r3, #0
    96b0:	d027      	beq.n	9702 <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    96b2:	683b      	ldr	r3, [r7, #0]
    96b4:	7cdb      	ldrb	r3, [r3, #19]
    96b6:	f003 0307 	and.w	r3, r3, #7
    96ba:	b2db      	uxtb	r3, r3
    96bc:	2b01      	cmp	r3, #1
    96be:	d10c      	bne.n	96da <_usb_d_dev_handle_eps+0x7e>
    96c0:	683b      	ldr	r3, [r7, #0]
    96c2:	7cdb      	ldrb	r3, [r3, #19]
    96c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    96c8:	b2db      	uxtb	r3, r3
    96ca:	2b00      	cmp	r3, #0
    96cc:	d105      	bne.n	96da <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    96ce:	7abb      	ldrb	r3, [r7, #10]
    96d0:	4619      	mov	r1, r3
    96d2:	6838      	ldr	r0, [r7, #0]
    96d4:	4b0c      	ldr	r3, [pc, #48]	; (9708 <_usb_d_dev_handle_eps+0xac>)
    96d6:	4798      	blx	r3
    96d8:	e013      	b.n	9702 <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    96da:	683b      	ldr	r3, [r7, #0]
    96dc:	7cdb      	ldrb	r3, [r3, #19]
    96de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    96e2:	b2db      	uxtb	r3, r3
    96e4:	2b00      	cmp	r3, #0
    96e6:	d005      	beq.n	96f4 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    96e8:	7abb      	ldrb	r3, [r7, #10]
    96ea:	4619      	mov	r1, r3
    96ec:	6838      	ldr	r0, [r7, #0]
    96ee:	4b07      	ldr	r3, [pc, #28]	; (970c <_usb_d_dev_handle_eps+0xb0>)
    96f0:	4798      	blx	r3
    96f2:	e006      	b.n	9702 <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    96f4:	7abb      	ldrb	r3, [r7, #10]
    96f6:	4619      	mov	r1, r3
    96f8:	6838      	ldr	r0, [r7, #0]
    96fa:	4b05      	ldr	r3, [pc, #20]	; (9710 <_usb_d_dev_handle_eps+0xb4>)
    96fc:	4798      	blx	r3
    96fe:	e000      	b.n	9702 <_usb_d_dev_handle_eps+0xa6>
		return;
    9700:	bf00      	nop
		}
	}
}
    9702:	3710      	adds	r7, #16
    9704:	46bd      	mov	sp, r7
    9706:	bd80      	pop	{r7, pc}
    9708:	000094e1 	.word	0x000094e1
    970c:	00009535 	.word	0x00009535
    9710:	000095c9 	.word	0x000095c9

00009714 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    9714:	b580      	push	{r7, lr}
    9716:	b084      	sub	sp, #16
    9718:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    971a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    971e:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    9720:	68bb      	ldr	r3, [r7, #8]
    9722:	8c1b      	ldrh	r3, [r3, #32]
    9724:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    9726:	88fb      	ldrh	r3, [r7, #6]
    9728:	2b00      	cmp	r3, #0
    972a:	d104      	bne.n	9736 <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    972c:	4b13      	ldr	r3, [pc, #76]	; (977c <_usb_d_dev_handler+0x68>)
    972e:	4798      	blx	r3
    9730:	4603      	mov	r3, r0
    9732:	2b00      	cmp	r3, #0
    9734:	d11e      	bne.n	9774 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    9736:	2300      	movs	r3, #0
    9738:	73fb      	strb	r3, [r7, #15]
    973a:	e017      	b.n	976c <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    973c:	7bfa      	ldrb	r2, [r7, #15]
    973e:	4613      	mov	r3, r2
    9740:	009b      	lsls	r3, r3, #2
    9742:	4413      	add	r3, r2
    9744:	009b      	lsls	r3, r3, #2
    9746:	3310      	adds	r3, #16
    9748:	4a0d      	ldr	r2, [pc, #52]	; (9780 <_usb_d_dev_handler+0x6c>)
    974a:	4413      	add	r3, r2
    974c:	3304      	adds	r3, #4
    974e:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    9750:	683b      	ldr	r3, [r7, #0]
    9752:	7c9b      	ldrb	r3, [r3, #18]
    9754:	2bff      	cmp	r3, #255	; 0xff
    9756:	d005      	beq.n	9764 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    9758:	88fb      	ldrh	r3, [r7, #6]
    975a:	6839      	ldr	r1, [r7, #0]
    975c:	4618      	mov	r0, r3
    975e:	4b09      	ldr	r3, [pc, #36]	; (9784 <_usb_d_dev_handler+0x70>)
    9760:	4798      	blx	r3
    9762:	e000      	b.n	9766 <_usb_d_dev_handler+0x52>
			continue;
    9764:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    9766:	7bfb      	ldrb	r3, [r7, #15]
    9768:	3301      	adds	r3, #1
    976a:	73fb      	strb	r3, [r7, #15]
    976c:	7bfb      	ldrb	r3, [r7, #15]
    976e:	2b08      	cmp	r3, #8
    9770:	d9e4      	bls.n	973c <_usb_d_dev_handler+0x28>
    9772:	e000      	b.n	9776 <_usb_d_dev_handler+0x62>
			return;
    9774:	bf00      	nop
	}
}
    9776:	3710      	adds	r7, #16
    9778:	46bd      	mov	sp, r7
    977a:	bd80      	pop	{r7, pc}
    977c:	00008c6d 	.word	0x00008c6d
    9780:	20000f4c 	.word	0x20000f4c
    9784:	0000965d 	.word	0x0000965d

00009788 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    9788:	b580      	push	{r7, lr}
    978a:	b082      	sub	sp, #8
    978c:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    978e:	2300      	movs	r3, #0
    9790:	71fb      	strb	r3, [r7, #7]
    9792:	e023      	b.n	97dc <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    9794:	79fa      	ldrb	r2, [r7, #7]
    9796:	4613      	mov	r3, r2
    9798:	009b      	lsls	r3, r3, #2
    979a:	4413      	add	r3, r2
    979c:	009b      	lsls	r3, r3, #2
    979e:	3310      	adds	r3, #16
    97a0:	4a14      	ldr	r2, [pc, #80]	; (97f4 <_usb_d_dev_reset_epts+0x6c>)
    97a2:	4413      	add	r3, r2
    97a4:	3304      	adds	r3, #4
    97a6:	2103      	movs	r1, #3
    97a8:	4618      	mov	r0, r3
    97aa:	4b13      	ldr	r3, [pc, #76]	; (97f8 <_usb_d_dev_reset_epts+0x70>)
    97ac:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    97ae:	79fa      	ldrb	r2, [r7, #7]
    97b0:	4910      	ldr	r1, [pc, #64]	; (97f4 <_usb_d_dev_reset_epts+0x6c>)
    97b2:	4613      	mov	r3, r2
    97b4:	009b      	lsls	r3, r3, #2
    97b6:	4413      	add	r3, r2
    97b8:	009b      	lsls	r3, r3, #2
    97ba:	440b      	add	r3, r1
    97bc:	3326      	adds	r3, #38	; 0x26
    97be:	22ff      	movs	r2, #255	; 0xff
    97c0:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    97c2:	79fa      	ldrb	r2, [r7, #7]
    97c4:	490b      	ldr	r1, [pc, #44]	; (97f4 <_usb_d_dev_reset_epts+0x6c>)
    97c6:	4613      	mov	r3, r2
    97c8:	009b      	lsls	r3, r3, #2
    97ca:	4413      	add	r3, r2
    97cc:	009b      	lsls	r3, r3, #2
    97ce:	440b      	add	r3, r1
    97d0:	3327      	adds	r3, #39	; 0x27
    97d2:	2200      	movs	r2, #0
    97d4:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    97d6:	79fb      	ldrb	r3, [r7, #7]
    97d8:	3301      	adds	r3, #1
    97da:	71fb      	strb	r3, [r7, #7]
    97dc:	79fb      	ldrb	r3, [r7, #7]
    97de:	2b08      	cmp	r3, #8
    97e0:	d9d8      	bls.n	9794 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    97e2:	22a0      	movs	r2, #160	; 0xa0
    97e4:	2100      	movs	r1, #0
    97e6:	4805      	ldr	r0, [pc, #20]	; (97fc <_usb_d_dev_reset_epts+0x74>)
    97e8:	4b05      	ldr	r3, [pc, #20]	; (9800 <_usb_d_dev_reset_epts+0x78>)
    97ea:	4798      	blx	r3
}
    97ec:	bf00      	nop
    97ee:	3708      	adds	r7, #8
    97f0:	46bd      	mov	sp, r7
    97f2:	bd80      	pop	{r7, pc}
    97f4:	20000f4c 	.word	0x20000f4c
    97f8:	0000a04d 	.word	0x0000a04d
    97fc:	20001014 	.word	0x20001014
    9800:	00012f19 	.word	0x00012f19

00009804 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    9804:	b580      	push	{r7, lr}
    9806:	b084      	sub	sp, #16
    9808:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    980a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    980e:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    9810:	2301      	movs	r3, #1
    9812:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    9814:	2304      	movs	r3, #4
    9816:	713b      	strb	r3, [r7, #4]
    9818:	2300      	movs	r3, #0
    981a:	717b      	strb	r3, [r7, #5]
    981c:	2300      	movs	r3, #0
    981e:	71bb      	strb	r3, [r7, #6]
    9820:	2300      	movs	r3, #0
    9822:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    9824:	2101      	movs	r1, #1
    9826:	68f8      	ldr	r0, [r7, #12]
    9828:	4b26      	ldr	r3, [pc, #152]	; (98c4 <_usb_d_dev_init+0xc0>)
    982a:	4798      	blx	r3
    982c:	4603      	mov	r3, r0
    982e:	f083 0301 	eor.w	r3, r3, #1
    9832:	b2db      	uxtb	r3, r3
    9834:	2b00      	cmp	r3, #0
    9836:	d011      	beq.n	985c <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    9838:	2102      	movs	r1, #2
    983a:	68f8      	ldr	r0, [r7, #12]
    983c:	4b22      	ldr	r3, [pc, #136]	; (98c8 <_usb_d_dev_init+0xc4>)
    983e:	4798      	blx	r3
    9840:	4603      	mov	r3, r0
    9842:	2b00      	cmp	r3, #0
    9844:	d006      	beq.n	9854 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    9846:	68f8      	ldr	r0, [r7, #12]
    9848:	4b20      	ldr	r3, [pc, #128]	; (98cc <_usb_d_dev_init+0xc8>)
    984a:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    984c:	2102      	movs	r1, #2
    984e:	68f8      	ldr	r0, [r7, #12]
    9850:	4b1f      	ldr	r3, [pc, #124]	; (98d0 <_usb_d_dev_init+0xcc>)
    9852:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    9854:	2101      	movs	r1, #1
    9856:	68f8      	ldr	r0, [r7, #12]
    9858:	4b1e      	ldr	r3, [pc, #120]	; (98d4 <_usb_d_dev_init+0xd0>)
    985a:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    985c:	2101      	movs	r1, #1
    985e:	68f8      	ldr	r0, [r7, #12]
    9860:	4b1b      	ldr	r3, [pc, #108]	; (98d0 <_usb_d_dev_init+0xcc>)
    9862:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    9864:	4b1c      	ldr	r3, [pc, #112]	; (98d8 <_usb_d_dev_init+0xd4>)
    9866:	4a1d      	ldr	r2, [pc, #116]	; (98dc <_usb_d_dev_init+0xd8>)
    9868:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    986a:	4b1b      	ldr	r3, [pc, #108]	; (98d8 <_usb_d_dev_init+0xd4>)
    986c:	4a1b      	ldr	r2, [pc, #108]	; (98dc <_usb_d_dev_init+0xd8>)
    986e:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    9870:	4b19      	ldr	r3, [pc, #100]	; (98d8 <_usb_d_dev_init+0xd4>)
    9872:	4a1a      	ldr	r2, [pc, #104]	; (98dc <_usb_d_dev_init+0xd8>)
    9874:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    9876:	4b18      	ldr	r3, [pc, #96]	; (98d8 <_usb_d_dev_init+0xd4>)
    9878:	4a18      	ldr	r2, [pc, #96]	; (98dc <_usb_d_dev_init+0xd8>)
    987a:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    987c:	4b16      	ldr	r3, [pc, #88]	; (98d8 <_usb_d_dev_init+0xd4>)
    987e:	4a17      	ldr	r2, [pc, #92]	; (98dc <_usb_d_dev_init+0xd8>)
    9880:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    9882:	4b17      	ldr	r3, [pc, #92]	; (98e0 <_usb_d_dev_init+0xdc>)
    9884:	4798      	blx	r3

	_usb_load_calib();
    9886:	4b17      	ldr	r3, [pc, #92]	; (98e4 <_usb_d_dev_init+0xe0>)
    9888:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    988a:	2104      	movs	r1, #4
    988c:	68f8      	ldr	r0, [r7, #12]
    988e:	4b11      	ldr	r3, [pc, #68]	; (98d4 <_usb_d_dev_init+0xd0>)
    9890:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    9892:	4b15      	ldr	r3, [pc, #84]	; (98e8 <_usb_d_dev_init+0xe4>)
    9894:	4619      	mov	r1, r3
    9896:	68f8      	ldr	r0, [r7, #12]
    9898:	4b14      	ldr	r3, [pc, #80]	; (98ec <_usb_d_dev_init+0xe8>)
    989a:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    989c:	7afb      	ldrb	r3, [r7, #11]
    989e:	f107 0210 	add.w	r2, r7, #16
    98a2:	4413      	add	r3, r2
    98a4:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    98a8:	f043 0301 	orr.w	r3, r3, #1
    98ac:	b2db      	uxtb	r3, r3
    98ae:	b29b      	uxth	r3, r3
    98b0:	4619      	mov	r1, r3
    98b2:	68f8      	ldr	r0, [r7, #12]
    98b4:	4b0e      	ldr	r3, [pc, #56]	; (98f0 <_usb_d_dev_init+0xec>)
    98b6:	4798      	blx	r3

	return ERR_NONE;
    98b8:	2300      	movs	r3, #0
}
    98ba:	4618      	mov	r0, r3
    98bc:	3710      	adds	r7, #16
    98be:	46bd      	mov	sp, r7
    98c0:	bd80      	pop	{r7, pc}
    98c2:	bf00      	nop
    98c4:	00007e9d 	.word	0x00007e9d
    98c8:	000081ed 	.word	0x000081ed
    98cc:	000081c1 	.word	0x000081c1
    98d0:	00007e73 	.word	0x00007e73
    98d4:	0000821d 	.word	0x0000821d
    98d8:	20000f4c 	.word	0x20000f4c
    98dc:	000082e5 	.word	0x000082e5
    98e0:	00009789 	.word	0x00009789
    98e4:	000082fd 	.word	0x000082fd
    98e8:	20001014 	.word	0x20001014
    98ec:	000082c9 	.word	0x000082c9
    98f0:	0000828d 	.word	0x0000828d

000098f4 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    98f4:	b580      	push	{r7, lr}
    98f6:	b082      	sub	sp, #8
    98f8:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    98fa:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    98fe:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    9900:	2103      	movs	r1, #3
    9902:	6878      	ldr	r0, [r7, #4]
    9904:	4b17      	ldr	r3, [pc, #92]	; (9964 <_usb_d_dev_enable+0x70>)
    9906:	4798      	blx	r3
    9908:	4603      	mov	r3, r0
    990a:	2b00      	cmp	r3, #0
    990c:	d002      	beq.n	9914 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    990e:	f06f 0310 	mvn.w	r3, #16
    9912:	e023      	b.n	995c <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    9914:	6878      	ldr	r0, [r7, #4]
    9916:	4b14      	ldr	r3, [pc, #80]	; (9968 <_usb_d_dev_enable+0x74>)
    9918:	4798      	blx	r3
    991a:	4603      	mov	r3, r0
    991c:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    991e:	78fb      	ldrb	r3, [r7, #3]
    9920:	f003 0302 	and.w	r3, r3, #2
    9924:	2b00      	cmp	r3, #0
    9926:	d107      	bne.n	9938 <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    9928:	78fb      	ldrb	r3, [r7, #3]
    992a:	f043 0302 	orr.w	r3, r3, #2
    992e:	b2db      	uxtb	r3, r3
    9930:	4619      	mov	r1, r3
    9932:	6878      	ldr	r0, [r7, #4]
    9934:	4b0d      	ldr	r3, [pc, #52]	; (996c <_usb_d_dev_enable+0x78>)
    9936:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    9938:	2050      	movs	r0, #80	; 0x50
    993a:	4b0d      	ldr	r3, [pc, #52]	; (9970 <_usb_d_dev_enable+0x7c>)
    993c:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    993e:	2051      	movs	r0, #81	; 0x51
    9940:	4b0b      	ldr	r3, [pc, #44]	; (9970 <_usb_d_dev_enable+0x7c>)
    9942:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    9944:	2052      	movs	r0, #82	; 0x52
    9946:	4b0a      	ldr	r3, [pc, #40]	; (9970 <_usb_d_dev_enable+0x7c>)
    9948:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    994a:	2053      	movs	r0, #83	; 0x53
    994c:	4b08      	ldr	r3, [pc, #32]	; (9970 <_usb_d_dev_enable+0x7c>)
    994e:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    9950:	f240 218d 	movw	r1, #653	; 0x28d
    9954:	6878      	ldr	r0, [r7, #4]
    9956:	4b07      	ldr	r3, [pc, #28]	; (9974 <_usb_d_dev_enable+0x80>)
    9958:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    995a:	2300      	movs	r3, #0
}
    995c:	4618      	mov	r0, r3
    995e:	3708      	adds	r7, #8
    9960:	46bd      	mov	sp, r7
    9962:	bd80      	pop	{r7, pc}
    9964:	00008197 	.word	0x00008197
    9968:	00008245 	.word	0x00008245
    996c:	0000821d 	.word	0x0000821d
    9970:	00007da9 	.word	0x00007da9
    9974:	00008141 	.word	0x00008141

00009978 <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    9978:	b580      	push	{r7, lr}
    997a:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    997c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9980:	4b01      	ldr	r3, [pc, #4]	; (9988 <_usb_d_dev_attach+0x10>)
    9982:	4798      	blx	r3
}
    9984:	bf00      	nop
    9986:	bd80      	pop	{r7, pc}
    9988:	00008269 	.word	0x00008269

0000998c <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    998c:	b580      	push	{r7, lr}
    998e:	b082      	sub	sp, #8
    9990:	af00      	add	r7, sp, #0
    9992:	4603      	mov	r3, r0
    9994:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    9996:	79fb      	ldrb	r3, [r7, #7]
    9998:	f063 037f 	orn	r3, r3, #127	; 0x7f
    999c:	b2db      	uxtb	r3, r3
    999e:	4619      	mov	r1, r3
    99a0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    99a4:	4b02      	ldr	r3, [pc, #8]	; (99b0 <_usb_d_dev_set_address+0x24>)
    99a6:	4798      	blx	r3
}
    99a8:	bf00      	nop
    99aa:	3708      	adds	r7, #8
    99ac:	46bd      	mov	sp, r7
    99ae:	bd80      	pop	{r7, pc}
    99b0:	000082ab 	.word	0x000082ab

000099b4 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    99b4:	b590      	push	{r4, r7, lr}
    99b6:	b085      	sub	sp, #20
    99b8:	af00      	add	r7, sp, #0
    99ba:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    99bc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    99c0:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    99c2:	687b      	ldr	r3, [r7, #4]
    99c4:	7c9b      	ldrb	r3, [r3, #18]
    99c6:	f003 030f 	and.w	r3, r3, #15
    99ca:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    99cc:	687b      	ldr	r3, [r7, #4]
    99ce:	68db      	ldr	r3, [r3, #12]
    99d0:	461a      	mov	r2, r3
    99d2:	7afb      	ldrb	r3, [r7, #11]
    99d4:	2100      	movs	r1, #0
    99d6:	4618      	mov	r0, r3
    99d8:	4b0f      	ldr	r3, [pc, #60]	; (9a18 <_usb_d_dev_trans_setup+0x64>)
    99da:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    99dc:	687b      	ldr	r3, [r7, #4]
    99de:	8a1b      	ldrh	r3, [r3, #16]
    99e0:	461a      	mov	r2, r3
    99e2:	7af8      	ldrb	r0, [r7, #11]
    99e4:	2300      	movs	r3, #0
    99e6:	2100      	movs	r1, #0
    99e8:	4c0c      	ldr	r4, [pc, #48]	; (9a1c <_usb_d_dev_trans_setup+0x68>)
    99ea:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    99ec:	7afb      	ldrb	r3, [r7, #11]
    99ee:	22b0      	movs	r2, #176	; 0xb0
    99f0:	4619      	mov	r1, r3
    99f2:	68f8      	ldr	r0, [r7, #12]
    99f4:	4b0a      	ldr	r3, [pc, #40]	; (9a20 <_usb_d_dev_trans_setup+0x6c>)
    99f6:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    99f8:	7afb      	ldrb	r3, [r7, #11]
    99fa:	2200      	movs	r2, #0
    99fc:	2100      	movs	r1, #0
    99fe:	4618      	mov	r0, r3
    9a00:	4b08      	ldr	r3, [pc, #32]	; (9a24 <_usb_d_dev_trans_setup+0x70>)
    9a02:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    9a04:	7afb      	ldrb	r3, [r7, #11]
    9a06:	2210      	movs	r2, #16
    9a08:	4619      	mov	r1, r3
    9a0a:	68f8      	ldr	r0, [r7, #12]
    9a0c:	4b06      	ldr	r3, [pc, #24]	; (9a28 <_usb_d_dev_trans_setup+0x74>)
    9a0e:	4798      	blx	r3
}
    9a10:	bf00      	nop
    9a12:	3714      	adds	r7, #20
    9a14:	46bd      	mov	sp, r7
    9a16:	bd90      	pop	{r4, r7, pc}
    9a18:	00008749 	.word	0x00008749
    9a1c:	000088d1 	.word	0x000088d1
    9a20:	00007fa9 	.word	0x00007fa9
    9a24:	000089a1 	.word	0x000089a1
    9a28:	00007ffd 	.word	0x00007ffd

00009a2c <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    9a2c:	b580      	push	{r7, lr}
    9a2e:	b088      	sub	sp, #32
    9a30:	af00      	add	r7, sp, #0
    9a32:	4603      	mov	r3, r0
    9a34:	71fb      	strb	r3, [r7, #7]
    9a36:	460b      	mov	r3, r1
    9a38:	71bb      	strb	r3, [r7, #6]
    9a3a:	4613      	mov	r3, r2
    9a3c:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    9a3e:	79fb      	ldrb	r3, [r7, #7]
    9a40:	f003 030f 	and.w	r3, r3, #15
    9a44:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    9a46:	79fb      	ldrb	r3, [r7, #7]
    9a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9a4c:	2b00      	cmp	r3, #0
    9a4e:	bf14      	ite	ne
    9a50:	2301      	movne	r3, #1
    9a52:	2300      	moveq	r3, #0
    9a54:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    9a56:	7fba      	ldrb	r2, [r7, #30]
    9a58:	7ffb      	ldrb	r3, [r7, #31]
    9a5a:	4611      	mov	r1, r2
    9a5c:	4618      	mov	r0, r3
    9a5e:	4b3e      	ldr	r3, [pc, #248]	; (9b58 <_usb_d_dev_ep_init+0x12c>)
    9a60:	4798      	blx	r3
    9a62:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    9a64:	79bb      	ldrb	r3, [r7, #6]
    9a66:	f003 0303 	and.w	r3, r3, #3
    9a6a:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    9a6c:	7ffa      	ldrb	r2, [r7, #31]
    9a6e:	4613      	mov	r3, r2
    9a70:	005b      	lsls	r3, r3, #1
    9a72:	4413      	add	r3, r2
    9a74:	009b      	lsls	r3, r3, #2
    9a76:	4a39      	ldr	r2, [pc, #228]	; (9b5c <_usb_d_dev_ep_init+0x130>)
    9a78:	4413      	add	r3, r2
    9a7a:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    9a7c:	7ffb      	ldrb	r3, [r7, #31]
    9a7e:	2b04      	cmp	r3, #4
    9a80:	d902      	bls.n	9a88 <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    9a82:	f06f 0311 	mvn.w	r3, #17
    9a86:	e063      	b.n	9b50 <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    9a88:	69bb      	ldr	r3, [r7, #24]
    9a8a:	7c9b      	ldrb	r3, [r3, #18]
    9a8c:	2bff      	cmp	r3, #255	; 0xff
    9a8e:	d002      	beq.n	9a96 <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    9a90:	f06f 0313 	mvn.w	r3, #19
    9a94:	e05c      	b.n	9b50 <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    9a96:	7dfb      	ldrb	r3, [r7, #23]
    9a98:	2b00      	cmp	r3, #0
    9a9a:	d11f      	bne.n	9adc <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    9a9c:	7fbb      	ldrb	r3, [r7, #30]
    9a9e:	2b00      	cmp	r3, #0
    9aa0:	bf14      	ite	ne
    9aa2:	2301      	movne	r3, #1
    9aa4:	2300      	moveq	r3, #0
    9aa6:	b2db      	uxtb	r3, r3
    9aa8:	f083 0301 	eor.w	r3, r3, #1
    9aac:	b2db      	uxtb	r3, r3
    9aae:	f003 0301 	and.w	r3, r3, #1
    9ab2:	b2da      	uxtb	r2, r3
    9ab4:	7ffb      	ldrb	r3, [r7, #31]
    9ab6:	4611      	mov	r1, r2
    9ab8:	4618      	mov	r0, r3
    9aba:	4b27      	ldr	r3, [pc, #156]	; (9b58 <_usb_d_dev_ep_init+0x12c>)
    9abc:	4798      	blx	r3
    9abe:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    9ac0:	68fb      	ldr	r3, [r7, #12]
    9ac2:	7c9b      	ldrb	r3, [r3, #18]
    9ac4:	2bff      	cmp	r3, #255	; 0xff
    9ac6:	d002      	beq.n	9ace <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    9ac8:	f06f 0313 	mvn.w	r3, #19
    9acc:	e040      	b.n	9b50 <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    9ace:	693b      	ldr	r3, [r7, #16]
    9ad0:	681b      	ldr	r3, [r3, #0]
    9ad2:	2b00      	cmp	r3, #0
    9ad4:	d102      	bne.n	9adc <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    9ad6:	f06f 0312 	mvn.w	r3, #18
    9ada:	e039      	b.n	9b50 <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    9adc:	7fbb      	ldrb	r3, [r7, #30]
    9ade:	2b00      	cmp	r3, #0
    9ae0:	d007      	beq.n	9af2 <_usb_d_dev_ep_init+0xc6>
    9ae2:	693b      	ldr	r3, [r7, #16]
    9ae4:	685b      	ldr	r3, [r3, #4]
    9ae6:	2b00      	cmp	r3, #0
    9ae8:	bf14      	ite	ne
    9aea:	2301      	movne	r3, #1
    9aec:	2300      	moveq	r3, #0
    9aee:	b2db      	uxtb	r3, r3
    9af0:	e006      	b.n	9b00 <_usb_d_dev_ep_init+0xd4>
    9af2:	693b      	ldr	r3, [r7, #16]
    9af4:	681b      	ldr	r3, [r3, #0]
    9af6:	2b00      	cmp	r3, #0
    9af8:	bf14      	ite	ne
    9afa:	2301      	movne	r3, #1
    9afc:	2300      	moveq	r3, #0
    9afe:	b2db      	uxtb	r3, r3
    9b00:	2b00      	cmp	r3, #0
    9b02:	d00f      	beq.n	9b24 <_usb_d_dev_ep_init+0xf8>
    9b04:	7fbb      	ldrb	r3, [r7, #30]
    9b06:	2b00      	cmp	r3, #0
    9b08:	d003      	beq.n	9b12 <_usb_d_dev_ep_init+0xe6>
    9b0a:	693b      	ldr	r3, [r7, #16]
    9b0c:	895b      	ldrh	r3, [r3, #10]
    9b0e:	461a      	mov	r2, r3
    9b10:	e002      	b.n	9b18 <_usb_d_dev_ep_init+0xec>
    9b12:	693b      	ldr	r3, [r7, #16]
    9b14:	891b      	ldrh	r3, [r3, #8]
    9b16:	461a      	mov	r2, r3
    9b18:	88bb      	ldrh	r3, [r7, #4]
    9b1a:	429a      	cmp	r2, r3
    9b1c:	da02      	bge.n	9b24 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    9b1e:	f06f 0312 	mvn.w	r3, #18
    9b22:	e015      	b.n	9b50 <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    9b24:	7fbb      	ldrb	r3, [r7, #30]
    9b26:	2b00      	cmp	r3, #0
    9b28:	d002      	beq.n	9b30 <_usb_d_dev_ep_init+0x104>
    9b2a:	693b      	ldr	r3, [r7, #16]
    9b2c:	685b      	ldr	r3, [r3, #4]
    9b2e:	e001      	b.n	9b34 <_usb_d_dev_ep_init+0x108>
    9b30:	693b      	ldr	r3, [r7, #16]
    9b32:	681b      	ldr	r3, [r3, #0]
    9b34:	69ba      	ldr	r2, [r7, #24]
    9b36:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    9b38:	69bb      	ldr	r3, [r7, #24]
    9b3a:	88ba      	ldrh	r2, [r7, #4]
    9b3c:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    9b3e:	7dfb      	ldrb	r3, [r7, #23]
    9b40:	3301      	adds	r3, #1
    9b42:	b2da      	uxtb	r2, r3
    9b44:	69bb      	ldr	r3, [r7, #24]
    9b46:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    9b48:	69bb      	ldr	r3, [r7, #24]
    9b4a:	79fa      	ldrb	r2, [r7, #7]
    9b4c:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    9b4e:	2300      	movs	r3, #0
}
    9b50:	4618      	mov	r0, r3
    9b52:	3720      	adds	r7, #32
    9b54:	46bd      	mov	sp, r7
    9b56:	bd80      	pop	{r7, pc}
    9b58:	00008a5d 	.word	0x00008a5d
    9b5c:	0001343c 	.word	0x0001343c

00009b60 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    9b60:	b580      	push	{r7, lr}
    9b62:	b086      	sub	sp, #24
    9b64:	af00      	add	r7, sp, #0
    9b66:	4603      	mov	r3, r0
    9b68:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    9b6a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9b6e:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    9b70:	79fb      	ldrb	r3, [r7, #7]
    9b72:	f003 030f 	and.w	r3, r3, #15
    9b76:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    9b78:	79fb      	ldrb	r3, [r7, #7]
    9b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9b7e:	2b00      	cmp	r3, #0
    9b80:	bf14      	ite	ne
    9b82:	2301      	movne	r3, #1
    9b84:	2300      	moveq	r3, #0
    9b86:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    9b88:	7cba      	ldrb	r2, [r7, #18]
    9b8a:	7cfb      	ldrb	r3, [r7, #19]
    9b8c:	4611      	mov	r1, r2
    9b8e:	4618      	mov	r0, r3
    9b90:	4b2a      	ldr	r3, [pc, #168]	; (9c3c <_usb_d_dev_ep_deinit+0xdc>)
    9b92:	4798      	blx	r3
    9b94:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    9b96:	7cfb      	ldrb	r3, [r7, #19]
    9b98:	2b04      	cmp	r3, #4
    9b9a:	d84a      	bhi.n	9c32 <_usb_d_dev_ep_deinit+0xd2>
    9b9c:	68fb      	ldr	r3, [r7, #12]
    9b9e:	7c9b      	ldrb	r3, [r3, #18]
    9ba0:	2bff      	cmp	r3, #255	; 0xff
    9ba2:	d046      	beq.n	9c32 <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    9ba4:	7cbb      	ldrb	r3, [r7, #18]
    9ba6:	2203      	movs	r2, #3
    9ba8:	4619      	mov	r1, r3
    9baa:	68f8      	ldr	r0, [r7, #12]
    9bac:	4b24      	ldr	r3, [pc, #144]	; (9c40 <_usb_d_dev_ep_deinit+0xe0>)
    9bae:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    9bb0:	68fb      	ldr	r3, [r7, #12]
    9bb2:	7cdb      	ldrb	r3, [r3, #19]
    9bb4:	f003 0307 	and.w	r3, r3, #7
    9bb8:	b2db      	uxtb	r3, r3
    9bba:	2b01      	cmp	r3, #1
    9bbc:	d107      	bne.n	9bce <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    9bbe:	79fb      	ldrb	r3, [r7, #7]
    9bc0:	697a      	ldr	r2, [r7, #20]
    9bc2:	3308      	adds	r3, #8
    9bc4:	015b      	lsls	r3, r3, #5
    9bc6:	4413      	add	r3, r2
    9bc8:	2200      	movs	r2, #0
    9bca:	701a      	strb	r2, [r3, #0]
    9bcc:	e02a      	b.n	9c24 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    9bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
    9bd2:	2b00      	cmp	r3, #0
    9bd4:	da15      	bge.n	9c02 <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    9bd6:	79fb      	ldrb	r3, [r7, #7]
    9bd8:	f003 030f 	and.w	r3, r3, #15
    9bdc:	79fa      	ldrb	r2, [r7, #7]
    9bde:	f002 020f 	and.w	r2, r2, #15
    9be2:	6979      	ldr	r1, [r7, #20]
    9be4:	3208      	adds	r2, #8
    9be6:	0152      	lsls	r2, r2, #5
    9be8:	440a      	add	r2, r1
    9bea:	7812      	ldrb	r2, [r2, #0]
    9bec:	b2d2      	uxtb	r2, r2
    9bee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    9bf2:	b2d1      	uxtb	r1, r2
    9bf4:	697a      	ldr	r2, [r7, #20]
    9bf6:	3308      	adds	r3, #8
    9bf8:	015b      	lsls	r3, r3, #5
    9bfa:	4413      	add	r3, r2
    9bfc:	460a      	mov	r2, r1
    9bfe:	701a      	strb	r2, [r3, #0]
    9c00:	e010      	b.n	9c24 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    9c02:	79fb      	ldrb	r3, [r7, #7]
    9c04:	79fa      	ldrb	r2, [r7, #7]
    9c06:	6979      	ldr	r1, [r7, #20]
    9c08:	3208      	adds	r2, #8
    9c0a:	0152      	lsls	r2, r2, #5
    9c0c:	440a      	add	r2, r1
    9c0e:	7812      	ldrb	r2, [r2, #0]
    9c10:	b2d2      	uxtb	r2, r2
    9c12:	f022 0207 	bic.w	r2, r2, #7
    9c16:	b2d1      	uxtb	r1, r2
    9c18:	697a      	ldr	r2, [r7, #20]
    9c1a:	3308      	adds	r3, #8
    9c1c:	015b      	lsls	r3, r3, #5
    9c1e:	4413      	add	r3, r2
    9c20:	460a      	mov	r2, r1
    9c22:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    9c24:	68fb      	ldr	r3, [r7, #12]
    9c26:	2200      	movs	r2, #0
    9c28:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    9c2a:	68fb      	ldr	r3, [r7, #12]
    9c2c:	22ff      	movs	r2, #255	; 0xff
    9c2e:	749a      	strb	r2, [r3, #18]
    9c30:	e000      	b.n	9c34 <_usb_d_dev_ep_deinit+0xd4>
		return;
    9c32:	bf00      	nop
}
    9c34:	3718      	adds	r7, #24
    9c36:	46bd      	mov	sp, r7
    9c38:	bd80      	pop	{r7, pc}
    9c3a:	bf00      	nop
    9c3c:	00008a5d 	.word	0x00008a5d
    9c40:	0000a095 	.word	0x0000a095

00009c44 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    9c44:	b5b0      	push	{r4, r5, r7, lr}
    9c46:	b088      	sub	sp, #32
    9c48:	af00      	add	r7, sp, #0
    9c4a:	4603      	mov	r3, r0
    9c4c:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    9c4e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9c52:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    9c54:	79fb      	ldrb	r3, [r7, #7]
    9c56:	f003 030f 	and.w	r3, r3, #15
    9c5a:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    9c5c:	79fb      	ldrb	r3, [r7, #7]
    9c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9c62:	2b00      	cmp	r3, #0
    9c64:	bf14      	ite	ne
    9c66:	2301      	movne	r3, #1
    9c68:	2300      	moveq	r3, #0
    9c6a:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    9c6c:	7eba      	ldrb	r2, [r7, #26]
    9c6e:	7efb      	ldrb	r3, [r7, #27]
    9c70:	4611      	mov	r1, r2
    9c72:	4618      	mov	r0, r3
    9c74:	4b70      	ldr	r3, [pc, #448]	; (9e38 <_usb_d_dev_ep_enable+0x1f4>)
    9c76:	4798      	blx	r3
    9c78:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    9c7a:	7efb      	ldrb	r3, [r7, #27]
    9c7c:	4619      	mov	r1, r3
    9c7e:	69f8      	ldr	r0, [r7, #28]
    9c80:	4b6e      	ldr	r3, [pc, #440]	; (9e3c <_usb_d_dev_ep_enable+0x1f8>)
    9c82:	4798      	blx	r3
    9c84:	4603      	mov	r3, r0
    9c86:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    9c88:	7efb      	ldrb	r3, [r7, #27]
    9c8a:	2b04      	cmp	r3, #4
    9c8c:	d803      	bhi.n	9c96 <_usb_d_dev_ep_enable+0x52>
    9c8e:	697b      	ldr	r3, [r7, #20]
    9c90:	7c9b      	ldrb	r3, [r3, #18]
    9c92:	2bff      	cmp	r3, #255	; 0xff
    9c94:	d102      	bne.n	9c9c <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    9c96:	f06f 0311 	mvn.w	r3, #17
    9c9a:	e0c8      	b.n	9e2e <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    9c9c:	7efb      	ldrb	r3, [r7, #27]
    9c9e:	015b      	lsls	r3, r3, #5
    9ca0:	4a67      	ldr	r2, [pc, #412]	; (9e40 <_usb_d_dev_ep_enable+0x1fc>)
    9ca2:	4413      	add	r3, r2
    9ca4:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    9ca6:	697b      	ldr	r3, [r7, #20]
    9ca8:	7cdb      	ldrb	r3, [r3, #19]
    9caa:	f003 0307 	and.w	r3, r3, #7
    9cae:	b2db      	uxtb	r3, r3
    9cb0:	2b01      	cmp	r3, #1
    9cb2:	d14b      	bne.n	9d4c <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    9cb4:	7cfb      	ldrb	r3, [r7, #19]
    9cb6:	f003 0377 	and.w	r3, r3, #119	; 0x77
    9cba:	2b00      	cmp	r3, #0
    9cbc:	d002      	beq.n	9cc4 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    9cbe:	f06f 0313 	mvn.w	r3, #19
    9cc2:	e0b4      	b.n	9e2e <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    9cc4:	7efb      	ldrb	r3, [r7, #27]
    9cc6:	2211      	movs	r2, #17
    9cc8:	4619      	mov	r1, r3
    9cca:	69f8      	ldr	r0, [r7, #28]
    9ccc:	4b5d      	ldr	r3, [pc, #372]	; (9e44 <_usb_d_dev_ep_enable+0x200>)
    9cce:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9cd0:	697b      	ldr	r3, [r7, #20]
    9cd2:	8a1b      	ldrh	r3, [r3, #16]
    9cd4:	039b      	lsls	r3, r3, #14
    9cd6:	4c5c      	ldr	r4, [pc, #368]	; (9e48 <_usb_d_dev_ep_enable+0x204>)
    9cd8:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9cda:	697b      	ldr	r3, [r7, #20]
    9cdc:	8a1b      	ldrh	r3, [r3, #16]
    9cde:	4618      	mov	r0, r3
    9ce0:	4b5a      	ldr	r3, [pc, #360]	; (9e4c <_usb_d_dev_ep_enable+0x208>)
    9ce2:	4798      	blx	r3
    9ce4:	4603      	mov	r3, r0
    9ce6:	071b      	lsls	r3, r3, #28
    9ce8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    9cec:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9cf0:	68fb      	ldr	r3, [r7, #12]
    9cf2:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    9cf4:	68fb      	ldr	r3, [r7, #12]
    9cf6:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9cfa:	697b      	ldr	r3, [r7, #20]
    9cfc:	8a1b      	ldrh	r3, [r3, #16]
    9cfe:	f3c3 050d 	ubfx	r5, r3, #0, #14
    9d02:	697b      	ldr	r3, [r7, #20]
    9d04:	8a1b      	ldrh	r3, [r3, #16]
    9d06:	4618      	mov	r0, r3
    9d08:	4b50      	ldr	r3, [pc, #320]	; (9e4c <_usb_d_dev_ep_enable+0x208>)
    9d0a:	4798      	blx	r3
    9d0c:	4603      	mov	r3, r0
    9d0e:	071b      	lsls	r3, r3, #28
    9d10:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    9d14:	432b      	orrs	r3, r5
    9d16:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    9d18:	7efb      	ldrb	r3, [r7, #27]
    9d1a:	2200      	movs	r2, #0
    9d1c:	2100      	movs	r1, #0
    9d1e:	4618      	mov	r0, r3
    9d20:	4b4b      	ldr	r3, [pc, #300]	; (9e50 <_usb_d_dev_ep_enable+0x20c>)
    9d22:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    9d24:	7efb      	ldrb	r3, [r7, #27]
    9d26:	2200      	movs	r2, #0
    9d28:	2101      	movs	r1, #1
    9d2a:	4618      	mov	r0, r3
    9d2c:	4b49      	ldr	r3, [pc, #292]	; (9e54 <_usb_d_dev_ep_enable+0x210>)
    9d2e:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    9d30:	7efb      	ldrb	r3, [r7, #27]
    9d32:	2100      	movs	r1, #0
    9d34:	4618      	mov	r0, r3
    9d36:	4b48      	ldr	r3, [pc, #288]	; (9e58 <_usb_d_dev_ep_enable+0x214>)
    9d38:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    9d3a:	7efb      	ldrb	r3, [r7, #27]
    9d3c:	2101      	movs	r1, #1
    9d3e:	4618      	mov	r0, r3
    9d40:	4b45      	ldr	r3, [pc, #276]	; (9e58 <_usb_d_dev_ep_enable+0x214>)
    9d42:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    9d44:	6978      	ldr	r0, [r7, #20]
    9d46:	4b45      	ldr	r3, [pc, #276]	; (9e5c <_usb_d_dev_ep_enable+0x218>)
    9d48:	4798      	blx	r3
    9d4a:	e06f      	b.n	9e2c <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    9d4c:	7ebb      	ldrb	r3, [r7, #26]
    9d4e:	2b00      	cmp	r3, #0
    9d50:	d038      	beq.n	9dc4 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    9d52:	7cfb      	ldrb	r3, [r7, #19]
    9d54:	f003 0370 	and.w	r3, r3, #112	; 0x70
    9d58:	2b00      	cmp	r3, #0
    9d5a:	d002      	beq.n	9d62 <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    9d5c:	f06f 0313 	mvn.w	r3, #19
    9d60:	e065      	b.n	9e2e <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    9d62:	697b      	ldr	r3, [r7, #20]
    9d64:	7cdb      	ldrb	r3, [r3, #19]
    9d66:	f3c3 0302 	ubfx	r3, r3, #0, #3
    9d6a:	b2db      	uxtb	r3, r3
    9d6c:	011b      	lsls	r3, r3, #4
    9d6e:	b2db      	uxtb	r3, r3
    9d70:	f003 0370 	and.w	r3, r3, #112	; 0x70
    9d74:	b2da      	uxtb	r2, r3
    9d76:	7cfb      	ldrb	r3, [r7, #19]
    9d78:	4313      	orrs	r3, r2
    9d7a:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    9d7c:	7cfa      	ldrb	r2, [r7, #19]
    9d7e:	7efb      	ldrb	r3, [r7, #27]
    9d80:	4619      	mov	r1, r3
    9d82:	69f8      	ldr	r0, [r7, #28]
    9d84:	4b2f      	ldr	r3, [pc, #188]	; (9e44 <_usb_d_dev_ep_enable+0x200>)
    9d86:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    9d88:	68fb      	ldr	r3, [r7, #12]
    9d8a:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9d8e:	697b      	ldr	r3, [r7, #20]
    9d90:	8a1b      	ldrh	r3, [r3, #16]
    9d92:	f3c3 050d 	ubfx	r5, r3, #0, #14
    9d96:	697b      	ldr	r3, [r7, #20]
    9d98:	8a1b      	ldrh	r3, [r3, #16]
    9d9a:	4618      	mov	r0, r3
    9d9c:	4b2b      	ldr	r3, [pc, #172]	; (9e4c <_usb_d_dev_ep_enable+0x208>)
    9d9e:	4798      	blx	r3
    9da0:	4603      	mov	r3, r0
    9da2:	071b      	lsls	r3, r3, #28
    9da4:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    9da8:	432b      	orrs	r3, r5
    9daa:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    9dac:	7efb      	ldrb	r3, [r7, #27]
    9dae:	2200      	movs	r2, #0
    9db0:	2101      	movs	r1, #1
    9db2:	4618      	mov	r0, r3
    9db4:	4b27      	ldr	r3, [pc, #156]	; (9e54 <_usb_d_dev_ep_enable+0x210>)
    9db6:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    9db8:	7efb      	ldrb	r3, [r7, #27]
    9dba:	2101      	movs	r1, #1
    9dbc:	4618      	mov	r0, r3
    9dbe:	4b26      	ldr	r3, [pc, #152]	; (9e58 <_usb_d_dev_ep_enable+0x214>)
    9dc0:	4798      	blx	r3
    9dc2:	e033      	b.n	9e2c <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    9dc4:	7cfb      	ldrb	r3, [r7, #19]
    9dc6:	f003 0307 	and.w	r3, r3, #7
    9dca:	2b00      	cmp	r3, #0
    9dcc:	d002      	beq.n	9dd4 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    9dce:	f06f 0313 	mvn.w	r3, #19
    9dd2:	e02c      	b.n	9e2e <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    9dd4:	697b      	ldr	r3, [r7, #20]
    9dd6:	7cdb      	ldrb	r3, [r3, #19]
    9dd8:	f3c3 0302 	ubfx	r3, r3, #0, #3
    9ddc:	b2db      	uxtb	r3, r3
    9dde:	461a      	mov	r2, r3
    9de0:	7cfb      	ldrb	r3, [r7, #19]
    9de2:	4313      	orrs	r3, r2
    9de4:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    9de6:	7cfa      	ldrb	r2, [r7, #19]
    9de8:	7efb      	ldrb	r3, [r7, #27]
    9dea:	4619      	mov	r1, r3
    9dec:	69f8      	ldr	r0, [r7, #28]
    9dee:	4b15      	ldr	r3, [pc, #84]	; (9e44 <_usb_d_dev_ep_enable+0x200>)
    9df0:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9df2:	697b      	ldr	r3, [r7, #20]
    9df4:	8a1b      	ldrh	r3, [r3, #16]
    9df6:	039b      	lsls	r3, r3, #14
    9df8:	4c13      	ldr	r4, [pc, #76]	; (9e48 <_usb_d_dev_ep_enable+0x204>)
    9dfa:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9dfc:	697b      	ldr	r3, [r7, #20]
    9dfe:	8a1b      	ldrh	r3, [r3, #16]
    9e00:	4618      	mov	r0, r3
    9e02:	4b12      	ldr	r3, [pc, #72]	; (9e4c <_usb_d_dev_ep_enable+0x208>)
    9e04:	4798      	blx	r3
    9e06:	4603      	mov	r3, r0
    9e08:	071b      	lsls	r3, r3, #28
    9e0a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    9e0e:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9e12:	68fb      	ldr	r3, [r7, #12]
    9e14:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    9e16:	7efb      	ldrb	r3, [r7, #27]
    9e18:	2200      	movs	r2, #0
    9e1a:	2100      	movs	r1, #0
    9e1c:	4618      	mov	r0, r3
    9e1e:	4b0c      	ldr	r3, [pc, #48]	; (9e50 <_usb_d_dev_ep_enable+0x20c>)
    9e20:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    9e22:	7efb      	ldrb	r3, [r7, #27]
    9e24:	2100      	movs	r1, #0
    9e26:	4618      	mov	r0, r3
    9e28:	4b0b      	ldr	r3, [pc, #44]	; (9e58 <_usb_d_dev_ep_enable+0x214>)
    9e2a:	4798      	blx	r3
	}

	return USB_OK;
    9e2c:	2300      	movs	r3, #0
}
    9e2e:	4618      	mov	r0, r3
    9e30:	3720      	adds	r7, #32
    9e32:	46bd      	mov	sp, r7
    9e34:	bdb0      	pop	{r4, r5, r7, pc}
    9e36:	bf00      	nop
    9e38:	00008a5d 	.word	0x00008a5d
    9e3c:	000080e3 	.word	0x000080e3
    9e40:	20001014 	.word	0x20001014
    9e44:	000080b9 	.word	0x000080b9
    9e48:	0fffc000 	.word	0x0fffc000
    9e4c:	000089f9 	.word	0x000089f9
    9e50:	000089a1 	.word	0x000089a1
    9e54:	00008949 	.word	0x00008949
    9e58:	00008911 	.word	0x00008911
    9e5c:	000099b5 	.word	0x000099b5

00009e60 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    9e60:	b580      	push	{r7, lr}
    9e62:	b084      	sub	sp, #16
    9e64:	af00      	add	r7, sp, #0
    9e66:	6078      	str	r0, [r7, #4]
    9e68:	460b      	mov	r3, r1
    9e6a:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9e6c:	687b      	ldr	r3, [r7, #4]
    9e6e:	7c9b      	ldrb	r3, [r3, #18]
    9e70:	f003 030f 	and.w	r3, r3, #15
    9e74:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    9e76:	78fa      	ldrb	r2, [r7, #3]
    9e78:	7bfb      	ldrb	r3, [r7, #15]
    9e7a:	4611      	mov	r1, r2
    9e7c:	4618      	mov	r0, r3
    9e7e:	4b03      	ldr	r3, [pc, #12]	; (9e8c <_usb_d_dev_ep_stall_get+0x2c>)
    9e80:	4798      	blx	r3
    9e82:	4603      	mov	r3, r0
}
    9e84:	4618      	mov	r0, r3
    9e86:	3710      	adds	r7, #16
    9e88:	46bd      	mov	sp, r7
    9e8a:	bd80      	pop	{r7, pc}
    9e8c:	00008551 	.word	0x00008551

00009e90 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    9e90:	b580      	push	{r7, lr}
    9e92:	b084      	sub	sp, #16
    9e94:	af00      	add	r7, sp, #0
    9e96:	6078      	str	r0, [r7, #4]
    9e98:	460b      	mov	r3, r1
    9e9a:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9e9c:	687b      	ldr	r3, [r7, #4]
    9e9e:	7c9b      	ldrb	r3, [r3, #18]
    9ea0:	f003 030f 	and.w	r3, r3, #15
    9ea4:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    9ea6:	78f9      	ldrb	r1, [r7, #3]
    9ea8:	7bfb      	ldrb	r3, [r7, #15]
    9eaa:	2201      	movs	r2, #1
    9eac:	4618      	mov	r0, r3
    9eae:	4b0a      	ldr	r3, [pc, #40]	; (9ed8 <_usb_d_dev_ep_stall_set+0x48>)
    9eb0:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    9eb2:	78fb      	ldrb	r3, [r7, #3]
    9eb4:	2220      	movs	r2, #32
    9eb6:	409a      	lsls	r2, r3
    9eb8:	7bfb      	ldrb	r3, [r7, #15]
    9eba:	4611      	mov	r1, r2
    9ebc:	4618      	mov	r0, r3
    9ebe:	4b07      	ldr	r3, [pc, #28]	; (9edc <_usb_d_dev_ep_stall_set+0x4c>)
    9ec0:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    9ec2:	687a      	ldr	r2, [r7, #4]
    9ec4:	7cd3      	ldrb	r3, [r2, #19]
    9ec6:	f043 0308 	orr.w	r3, r3, #8
    9eca:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    9ecc:	2300      	movs	r3, #0
}
    9ece:	4618      	mov	r0, r3
    9ed0:	3710      	adds	r7, #16
    9ed2:	46bd      	mov	sp, r7
    9ed4:	bd80      	pop	{r7, pc}
    9ed6:	bf00      	nop
    9ed8:	000084f9 	.word	0x000084f9
    9edc:	00008479 	.word	0x00008479

00009ee0 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    9ee0:	b580      	push	{r7, lr}
    9ee2:	b084      	sub	sp, #16
    9ee4:	af00      	add	r7, sp, #0
    9ee6:	6078      	str	r0, [r7, #4]
    9ee8:	460b      	mov	r3, r1
    9eea:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    9eec:	687b      	ldr	r3, [r7, #4]
    9eee:	7c9b      	ldrb	r3, [r3, #18]
    9ef0:	f003 030f 	and.w	r3, r3, #15
    9ef4:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    9ef6:	78fa      	ldrb	r2, [r7, #3]
    9ef8:	7bfb      	ldrb	r3, [r7, #15]
    9efa:	4611      	mov	r1, r2
    9efc:	4618      	mov	r0, r3
    9efe:	4b28      	ldr	r3, [pc, #160]	; (9fa0 <_usb_d_dev_ep_stall_clr+0xc0>)
    9f00:	4798      	blx	r3
    9f02:	4603      	mov	r3, r0
    9f04:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    9f06:	7bbb      	ldrb	r3, [r7, #14]
    9f08:	f083 0301 	eor.w	r3, r3, #1
    9f0c:	b2db      	uxtb	r3, r3
    9f0e:	2b00      	cmp	r3, #0
    9f10:	d001      	beq.n	9f16 <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    9f12:	2300      	movs	r3, #0
    9f14:	e040      	b.n	9f98 <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    9f16:	78f9      	ldrb	r1, [r7, #3]
    9f18:	7bfb      	ldrb	r3, [r7, #15]
    9f1a:	2200      	movs	r2, #0
    9f1c:	4618      	mov	r0, r3
    9f1e:	4b21      	ldr	r3, [pc, #132]	; (9fa4 <_usb_d_dev_ep_stall_clr+0xc4>)
    9f20:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    9f22:	78fb      	ldrb	r3, [r7, #3]
    9f24:	2220      	movs	r2, #32
    9f26:	409a      	lsls	r2, r3
    9f28:	7bfb      	ldrb	r3, [r7, #15]
    9f2a:	4611      	mov	r1, r2
    9f2c:	4618      	mov	r0, r3
    9f2e:	4b1e      	ldr	r3, [pc, #120]	; (9fa8 <_usb_d_dev_ep_stall_clr+0xc8>)
    9f30:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    9f32:	78fa      	ldrb	r2, [r7, #3]
    9f34:	7bfb      	ldrb	r3, [r7, #15]
    9f36:	4611      	mov	r1, r2
    9f38:	4618      	mov	r0, r3
    9f3a:	4b1c      	ldr	r3, [pc, #112]	; (9fac <_usb_d_dev_ep_stall_clr+0xcc>)
    9f3c:	4798      	blx	r3
    9f3e:	4603      	mov	r3, r0
    9f40:	2b00      	cmp	r3, #0
    9f42:	d00b      	beq.n	9f5c <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    9f44:	78fa      	ldrb	r2, [r7, #3]
    9f46:	7bfb      	ldrb	r3, [r7, #15]
    9f48:	4611      	mov	r1, r2
    9f4a:	4618      	mov	r0, r3
    9f4c:	4b18      	ldr	r3, [pc, #96]	; (9fb0 <_usb_d_dev_ep_stall_clr+0xd0>)
    9f4e:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    9f50:	78f9      	ldrb	r1, [r7, #3]
    9f52:	7bfb      	ldrb	r3, [r7, #15]
    9f54:	2200      	movs	r2, #0
    9f56:	4618      	mov	r0, r3
    9f58:	4b16      	ldr	r3, [pc, #88]	; (9fb4 <_usb_d_dev_ep_stall_clr+0xd4>)
    9f5a:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    9f5c:	687b      	ldr	r3, [r7, #4]
    9f5e:	7cdb      	ldrb	r3, [r3, #19]
    9f60:	f003 0307 	and.w	r3, r3, #7
    9f64:	b2db      	uxtb	r3, r3
    9f66:	2b01      	cmp	r3, #1
    9f68:	d110      	bne.n	9f8c <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    9f6a:	7bfb      	ldrb	r3, [r7, #15]
    9f6c:	4619      	mov	r1, r3
    9f6e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9f72:	4b11      	ldr	r3, [pc, #68]	; (9fb8 <_usb_d_dev_ep_stall_clr+0xd8>)
    9f74:	4798      	blx	r3
    9f76:	4603      	mov	r3, r0
    9f78:	f003 0330 	and.w	r3, r3, #48	; 0x30
    9f7c:	2b00      	cmp	r3, #0
    9f7e:	d10a      	bne.n	9f96 <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    9f80:	687a      	ldr	r2, [r7, #4]
    9f82:	7cd3      	ldrb	r3, [r2, #19]
    9f84:	f36f 03c3 	bfc	r3, #3, #1
    9f88:	74d3      	strb	r3, [r2, #19]
    9f8a:	e004      	b.n	9f96 <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    9f8c:	687a      	ldr	r2, [r7, #4]
    9f8e:	7cd3      	ldrb	r3, [r2, #19]
    9f90:	f36f 03c3 	bfc	r3, #3, #1
    9f94:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    9f96:	2300      	movs	r3, #0
}
    9f98:	4618      	mov	r0, r3
    9f9a:	3710      	adds	r7, #16
    9f9c:	46bd      	mov	sp, r7
    9f9e:	bd80      	pop	{r7, pc}
    9fa0:	00008551 	.word	0x00008551
    9fa4:	000084f9 	.word	0x000084f9
    9fa8:	000084a1 	.word	0x000084a1
    9fac:	00008595 	.word	0x00008595
    9fb0:	000085d9 	.word	0x000085d9
    9fb4:	000086c5 	.word	0x000086c5
    9fb8:	00007f81 	.word	0x00007f81

00009fbc <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    9fbc:	b580      	push	{r7, lr}
    9fbe:	b086      	sub	sp, #24
    9fc0:	af00      	add	r7, sp, #0
    9fc2:	4603      	mov	r3, r0
    9fc4:	460a      	mov	r2, r1
    9fc6:	71fb      	strb	r3, [r7, #7]
    9fc8:	4613      	mov	r3, r2
    9fca:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    9fcc:	79fb      	ldrb	r3, [r7, #7]
    9fce:	f003 030f 	and.w	r3, r3, #15
    9fd2:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    9fd4:	79fb      	ldrb	r3, [r7, #7]
    9fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9fda:	2b00      	cmp	r3, #0
    9fdc:	bf14      	ite	ne
    9fde:	2301      	movne	r3, #1
    9fe0:	2300      	moveq	r3, #0
    9fe2:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    9fe4:	7cba      	ldrb	r2, [r7, #18]
    9fe6:	7cfb      	ldrb	r3, [r7, #19]
    9fe8:	4611      	mov	r1, r2
    9fea:	4618      	mov	r0, r3
    9fec:	4b13      	ldr	r3, [pc, #76]	; (a03c <_usb_d_dev_ep_stall+0x80>)
    9fee:	4798      	blx	r3
    9ff0:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    9ff2:	7cfb      	ldrb	r3, [r7, #19]
    9ff4:	2b04      	cmp	r3, #4
    9ff6:	d902      	bls.n	9ffe <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    9ff8:	f06f 0311 	mvn.w	r3, #17
    9ffc:	e01a      	b.n	a034 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    9ffe:	79bb      	ldrb	r3, [r7, #6]
    a000:	2b01      	cmp	r3, #1
    a002:	d106      	bne.n	a012 <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    a004:	7cbb      	ldrb	r3, [r7, #18]
    a006:	4619      	mov	r1, r3
    a008:	68f8      	ldr	r0, [r7, #12]
    a00a:	4b0d      	ldr	r3, [pc, #52]	; (a040 <_usb_d_dev_ep_stall+0x84>)
    a00c:	4798      	blx	r3
    a00e:	6178      	str	r0, [r7, #20]
    a010:	e00f      	b.n	a032 <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    a012:	79bb      	ldrb	r3, [r7, #6]
    a014:	2b00      	cmp	r3, #0
    a016:	d106      	bne.n	a026 <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    a018:	7cbb      	ldrb	r3, [r7, #18]
    a01a:	4619      	mov	r1, r3
    a01c:	68f8      	ldr	r0, [r7, #12]
    a01e:	4b09      	ldr	r3, [pc, #36]	; (a044 <_usb_d_dev_ep_stall+0x88>)
    a020:	4798      	blx	r3
    a022:	6178      	str	r0, [r7, #20]
    a024:	e005      	b.n	a032 <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    a026:	7cbb      	ldrb	r3, [r7, #18]
    a028:	4619      	mov	r1, r3
    a02a:	68f8      	ldr	r0, [r7, #12]
    a02c:	4b06      	ldr	r3, [pc, #24]	; (a048 <_usb_d_dev_ep_stall+0x8c>)
    a02e:	4798      	blx	r3
    a030:	6178      	str	r0, [r7, #20]
	}
	return rc;
    a032:	697b      	ldr	r3, [r7, #20]
}
    a034:	4618      	mov	r0, r3
    a036:	3718      	adds	r7, #24
    a038:	46bd      	mov	sp, r7
    a03a:	bd80      	pop	{r7, pc}
    a03c:	00008a5d 	.word	0x00008a5d
    a040:	00009e91 	.word	0x00009e91
    a044:	00009ee1 	.word	0x00009ee1
    a048:	00009e61 	.word	0x00009e61

0000a04c <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    a04c:	b580      	push	{r7, lr}
    a04e:	b082      	sub	sp, #8
    a050:	af00      	add	r7, sp, #0
    a052:	6078      	str	r0, [r7, #4]
    a054:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    a056:	687b      	ldr	r3, [r7, #4]
    a058:	7c9b      	ldrb	r3, [r3, #18]
    a05a:	2bff      	cmp	r3, #255	; 0xff
    a05c:	d014      	beq.n	a088 <_usb_d_dev_trans_done+0x3c>
    a05e:	687b      	ldr	r3, [r7, #4]
    a060:	7cdb      	ldrb	r3, [r3, #19]
    a062:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a066:	b2db      	uxtb	r3, r3
    a068:	2b00      	cmp	r3, #0
    a06a:	d00d      	beq.n	a088 <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    a06c:	687a      	ldr	r2, [r7, #4]
    a06e:	7cd3      	ldrb	r3, [r2, #19]
    a070:	f36f 1386 	bfc	r3, #6, #1
    a074:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    a076:	4b06      	ldr	r3, [pc, #24]	; (a090 <_usb_d_dev_trans_done+0x44>)
    a078:	691b      	ldr	r3, [r3, #16]
    a07a:	687a      	ldr	r2, [r7, #4]
    a07c:	7c90      	ldrb	r0, [r2, #18]
    a07e:	687a      	ldr	r2, [r7, #4]
    a080:	6892      	ldr	r2, [r2, #8]
    a082:	6839      	ldr	r1, [r7, #0]
    a084:	4798      	blx	r3
    a086:	e000      	b.n	a08a <_usb_d_dev_trans_done+0x3e>
		return;
    a088:	bf00      	nop
}
    a08a:	3708      	adds	r7, #8
    a08c:	46bd      	mov	sp, r7
    a08e:	bd80      	pop	{r7, pc}
    a090:	20000f4c 	.word	0x20000f4c

0000a094 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    a094:	b580      	push	{r7, lr}
    a096:	b086      	sub	sp, #24
    a098:	af00      	add	r7, sp, #0
    a09a:	60f8      	str	r0, [r7, #12]
    a09c:	460b      	mov	r3, r1
    a09e:	607a      	str	r2, [r7, #4]
    a0a0:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a0a2:	68fb      	ldr	r3, [r7, #12]
    a0a4:	7c9b      	ldrb	r3, [r3, #18]
    a0a6:	f003 030f 	and.w	r3, r3, #15
    a0aa:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    a0ac:	4b1f      	ldr	r3, [pc, #124]	; (a12c <_usb_d_dev_trans_stop+0x98>)
    a0ae:	881b      	ldrh	r3, [r3, #0]
    a0b0:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    a0b2:	68fb      	ldr	r3, [r7, #12]
    a0b4:	7c9b      	ldrb	r3, [r3, #18]
    a0b6:	2bff      	cmp	r3, #255	; 0xff
    a0b8:	d033      	beq.n	a122 <_usb_d_dev_trans_stop+0x8e>
    a0ba:	68fb      	ldr	r3, [r7, #12]
    a0bc:	7cdb      	ldrb	r3, [r3, #19]
    a0be:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a0c2:	b2db      	uxtb	r3, r3
    a0c4:	2b00      	cmp	r3, #0
    a0c6:	d02c      	beq.n	a122 <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    a0c8:	7afb      	ldrb	r3, [r7, #11]
    a0ca:	2b00      	cmp	r3, #0
    a0cc:	d006      	beq.n	a0dc <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    a0ce:	7dfb      	ldrb	r3, [r7, #23]
    a0d0:	2200      	movs	r2, #0
    a0d2:	2101      	movs	r1, #1
    a0d4:	4618      	mov	r0, r3
    a0d6:	4b16      	ldr	r3, [pc, #88]	; (a130 <_usb_d_dev_trans_stop+0x9c>)
    a0d8:	4798      	blx	r3
    a0da:	e005      	b.n	a0e8 <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    a0dc:	7dfb      	ldrb	r3, [r7, #23]
    a0de:	2200      	movs	r2, #0
    a0e0:	2100      	movs	r1, #0
    a0e2:	4618      	mov	r0, r3
    a0e4:	4b13      	ldr	r3, [pc, #76]	; (a134 <_usb_d_dev_trans_stop+0xa0>)
    a0e6:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    a0e8:	7afb      	ldrb	r3, [r7, #11]
    a0ea:	f107 0218 	add.w	r2, r7, #24
    a0ee:	4413      	add	r3, r2
    a0f0:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    a0f4:	461a      	mov	r2, r3
    a0f6:	7dfb      	ldrb	r3, [r7, #23]
    a0f8:	4611      	mov	r1, r2
    a0fa:	4618      	mov	r0, r3
    a0fc:	4b0e      	ldr	r3, [pc, #56]	; (a138 <_usb_d_dev_trans_stop+0xa4>)
    a0fe:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    a100:	7afb      	ldrb	r3, [r7, #11]
    a102:	f107 0218 	add.w	r2, r7, #24
    a106:	4413      	add	r3, r2
    a108:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    a10c:	461a      	mov	r2, r3
    a10e:	7dfb      	ldrb	r3, [r7, #23]
    a110:	4611      	mov	r1, r2
    a112:	4618      	mov	r0, r3
    a114:	4b09      	ldr	r3, [pc, #36]	; (a13c <_usb_d_dev_trans_stop+0xa8>)
    a116:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    a118:	6879      	ldr	r1, [r7, #4]
    a11a:	68f8      	ldr	r0, [r7, #12]
    a11c:	4b08      	ldr	r3, [pc, #32]	; (a140 <_usb_d_dev_trans_stop+0xac>)
    a11e:	4798      	blx	r3
    a120:	e000      	b.n	a124 <_usb_d_dev_trans_stop+0x90>
		return;
    a122:	bf00      	nop
}
    a124:	3718      	adds	r7, #24
    a126:	46bd      	mov	sp, r7
    a128:	bd80      	pop	{r7, pc}
    a12a:	bf00      	nop
    a12c:	0001347c 	.word	0x0001347c
    a130:	00008949 	.word	0x00008949
    a134:	000089a1 	.word	0x000089a1
    a138:	00008451 	.word	0x00008451
    a13c:	000084a1 	.word	0x000084a1
    a140:	0000a04d 	.word	0x0000a04d

0000a144 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    a144:	b580      	push	{r7, lr}
    a146:	b086      	sub	sp, #24
    a148:	af00      	add	r7, sp, #0
    a14a:	4603      	mov	r3, r0
    a14c:	6039      	str	r1, [r7, #0]
    a14e:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    a150:	79fb      	ldrb	r3, [r7, #7]
    a152:	f003 030f 	and.w	r3, r3, #15
    a156:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    a158:	7dfb      	ldrb	r3, [r7, #23]
    a15a:	015b      	lsls	r3, r3, #5
    a15c:	4a1e      	ldr	r2, [pc, #120]	; (a1d8 <_usb_d_dev_ep_read_req+0x94>)
    a15e:	4413      	add	r3, r2
    a160:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    a162:	693b      	ldr	r3, [r7, #16]
    a164:	681b      	ldr	r3, [r3, #0]
    a166:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    a168:	693b      	ldr	r3, [r7, #16]
    a16a:	685b      	ldr	r3, [r3, #4]
    a16c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    a170:	b29b      	uxth	r3, r3
    a172:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    a174:	7dfb      	ldrb	r3, [r7, #23]
    a176:	2b04      	cmp	r3, #4
    a178:	d802      	bhi.n	a180 <_usb_d_dev_ep_read_req+0x3c>
    a17a:	683b      	ldr	r3, [r7, #0]
    a17c:	2b00      	cmp	r3, #0
    a17e:	d102      	bne.n	a186 <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    a180:	f06f 0311 	mvn.w	r3, #17
    a184:	e023      	b.n	a1ce <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    a186:	7dfb      	ldrb	r3, [r7, #23]
    a188:	4618      	mov	r0, r3
    a18a:	4b14      	ldr	r3, [pc, #80]	; (a1dc <_usb_d_dev_ep_read_req+0x98>)
    a18c:	4798      	blx	r3
    a18e:	4603      	mov	r3, r0
    a190:	f083 0301 	eor.w	r3, r3, #1
    a194:	b2db      	uxtb	r3, r3
    a196:	2b00      	cmp	r3, #0
    a198:	d002      	beq.n	a1a0 <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    a19a:	f06f 0312 	mvn.w	r3, #18
    a19e:	e016      	b.n	a1ce <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    a1a0:	7dfb      	ldrb	r3, [r7, #23]
    a1a2:	4618      	mov	r0, r3
    a1a4:	4b0e      	ldr	r3, [pc, #56]	; (a1e0 <_usb_d_dev_ep_read_req+0x9c>)
    a1a6:	4798      	blx	r3
    a1a8:	4603      	mov	r3, r0
    a1aa:	f083 0301 	eor.w	r3, r3, #1
    a1ae:	b2db      	uxtb	r3, r3
    a1b0:	2b00      	cmp	r3, #0
    a1b2:	d001      	beq.n	a1b8 <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    a1b4:	2300      	movs	r3, #0
    a1b6:	e00a      	b.n	a1ce <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    a1b8:	68fb      	ldr	r3, [r7, #12]
    a1ba:	2208      	movs	r2, #8
    a1bc:	4619      	mov	r1, r3
    a1be:	6838      	ldr	r0, [r7, #0]
    a1c0:	4b08      	ldr	r3, [pc, #32]	; (a1e4 <_usb_d_dev_ep_read_req+0xa0>)
    a1c2:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    a1c4:	7dfb      	ldrb	r3, [r7, #23]
    a1c6:	4618      	mov	r0, r3
    a1c8:	4b07      	ldr	r3, [pc, #28]	; (a1e8 <_usb_d_dev_ep_read_req+0xa4>)
    a1ca:	4798      	blx	r3

	return bytes;
    a1cc:	897b      	ldrh	r3, [r7, #10]
}
    a1ce:	4618      	mov	r0, r3
    a1d0:	3718      	adds	r7, #24
    a1d2:	46bd      	mov	sp, r7
    a1d4:	bd80      	pop	{r7, pc}
    a1d6:	bf00      	nop
    a1d8:	20001014 	.word	0x20001014
    a1dc:	000084c9 	.word	0x000084c9
    a1e0:	00008675 	.word	0x00008675
    a1e4:	00012de5 	.word	0x00012de5
    a1e8:	000086a5 	.word	0x000086a5

0000a1ec <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    a1ec:	b580      	push	{r7, lr}
    a1ee:	b086      	sub	sp, #24
    a1f0:	af00      	add	r7, sp, #0
    a1f2:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    a1f4:	687b      	ldr	r3, [r7, #4]
    a1f6:	7a1b      	ldrb	r3, [r3, #8]
    a1f8:	f003 030f 	and.w	r3, r3, #15
    a1fc:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    a1fe:	687b      	ldr	r3, [r7, #4]
    a200:	7a1b      	ldrb	r3, [r3, #8]
    a202:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a206:	2b00      	cmp	r3, #0
    a208:	bf14      	ite	ne
    a20a:	2301      	movne	r3, #1
    a20c:	2300      	moveq	r3, #0
    a20e:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a210:	7d7a      	ldrb	r2, [r7, #21]
    a212:	7dbb      	ldrb	r3, [r7, #22]
    a214:	4611      	mov	r1, r2
    a216:	4618      	mov	r0, r3
    a218:	4b5f      	ldr	r3, [pc, #380]	; (a398 <_usb_d_dev_ep_trans+0x1ac>)
    a21a:	4798      	blx	r3
    a21c:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    a21e:	693b      	ldr	r3, [r7, #16]
    a220:	8a1b      	ldrh	r3, [r3, #16]
    a222:	f240 32ff 	movw	r2, #1023	; 0x3ff
    a226:	4293      	cmp	r3, r2
    a228:	d004      	beq.n	a234 <_usb_d_dev_ep_trans+0x48>
    a22a:	693b      	ldr	r3, [r7, #16]
    a22c:	8a1b      	ldrh	r3, [r3, #16]
    a22e:	3b01      	subs	r3, #1
    a230:	b29b      	uxth	r3, r3
    a232:	e001      	b.n	a238 <_usb_d_dev_ep_trans+0x4c>
    a234:	f240 33ff 	movw	r3, #1023	; 0x3ff
    a238:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    a23a:	687b      	ldr	r3, [r7, #4]
    a23c:	685a      	ldr	r2, [r3, #4]
    a23e:	89fb      	ldrh	r3, [r7, #14]
    a240:	4013      	ands	r3, r2
    a242:	2b00      	cmp	r3, #0
    a244:	bf14      	ite	ne
    a246:	2301      	movne	r3, #1
    a248:	2300      	moveq	r3, #0
    a24a:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    a24c:	2300      	movs	r3, #0
    a24e:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    a250:	7dbb      	ldrb	r3, [r7, #22]
    a252:	2b04      	cmp	r3, #4
    a254:	d902      	bls.n	a25c <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    a256:	f06f 0311 	mvn.w	r3, #17
    a25a:	e098      	b.n	a38e <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    a25c:	687b      	ldr	r3, [r7, #4]
    a25e:	681b      	ldr	r3, [r3, #0]
    a260:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    a264:	d31a      	bcc.n	a29c <_usb_d_dev_ep_trans+0xb0>
    a266:	687b      	ldr	r3, [r7, #4]
    a268:	681b      	ldr	r3, [r3, #0]
    a26a:	461a      	mov	r2, r3
    a26c:	687b      	ldr	r3, [r7, #4]
    a26e:	685b      	ldr	r3, [r3, #4]
    a270:	4413      	add	r3, r2
    a272:	4a4a      	ldr	r2, [pc, #296]	; (a39c <_usb_d_dev_ep_trans+0x1b0>)
    a274:	4293      	cmp	r3, r2
    a276:	d811      	bhi.n	a29c <_usb_d_dev_ep_trans+0xb0>
    a278:	687b      	ldr	r3, [r7, #4]
    a27a:	681b      	ldr	r3, [r3, #0]
    a27c:	f003 0303 	and.w	r3, r3, #3
    a280:	2b00      	cmp	r3, #0
    a282:	d10b      	bne.n	a29c <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    a284:	7d7b      	ldrb	r3, [r7, #21]
    a286:	f083 0301 	eor.w	r3, r3, #1
    a28a:	b2db      	uxtb	r3, r3
    a28c:	2b00      	cmp	r3, #0
    a28e:	d00e      	beq.n	a2ae <_usb_d_dev_ep_trans+0xc2>
    a290:	687b      	ldr	r3, [r7, #4]
    a292:	685b      	ldr	r3, [r3, #4]
    a294:	693a      	ldr	r2, [r7, #16]
    a296:	8a12      	ldrh	r2, [r2, #16]
    a298:	4293      	cmp	r3, r2
    a29a:	d208      	bcs.n	a2ae <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    a29c:	693b      	ldr	r3, [r7, #16]
    a29e:	68db      	ldr	r3, [r3, #12]
    a2a0:	2b00      	cmp	r3, #0
    a2a2:	d102      	bne.n	a2aa <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    a2a4:	f06f 0312 	mvn.w	r3, #18
    a2a8:	e071      	b.n	a38e <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    a2aa:	2301      	movs	r3, #1
    a2ac:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    a2ae:	7d7b      	ldrb	r3, [r7, #21]
    a2b0:	f083 0301 	eor.w	r3, r3, #1
    a2b4:	b2db      	uxtb	r3, r3
    a2b6:	2b00      	cmp	r3, #0
    a2b8:	d009      	beq.n	a2ce <_usb_d_dev_ep_trans+0xe2>
    a2ba:	7b7b      	ldrb	r3, [r7, #13]
    a2bc:	2b00      	cmp	r3, #0
    a2be:	d006      	beq.n	a2ce <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    a2c0:	693b      	ldr	r3, [r7, #16]
    a2c2:	68db      	ldr	r3, [r3, #12]
    a2c4:	2b00      	cmp	r3, #0
    a2c6:	d102      	bne.n	a2ce <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    a2c8:	f06f 0311 	mvn.w	r3, #17
    a2cc:	e05f      	b.n	a38e <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    a2ce:	693b      	ldr	r3, [r7, #16]
    a2d0:	7cdb      	ldrb	r3, [r3, #19]
    a2d2:	f003 0308 	and.w	r3, r3, #8
    a2d6:	b2db      	uxtb	r3, r3
    a2d8:	2b00      	cmp	r3, #0
    a2da:	d001      	beq.n	a2e0 <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    a2dc:	2302      	movs	r3, #2
    a2de:	e056      	b.n	a38e <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    a2e0:	f107 0308 	add.w	r3, r7, #8
    a2e4:	4618      	mov	r0, r3
    a2e6:	4b2e      	ldr	r3, [pc, #184]	; (a3a0 <_usb_d_dev_ep_trans+0x1b4>)
    a2e8:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    a2ea:	693b      	ldr	r3, [r7, #16]
    a2ec:	7cdb      	ldrb	r3, [r3, #19]
    a2ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a2f2:	b2db      	uxtb	r3, r3
    a2f4:	2b00      	cmp	r3, #0
    a2f6:	d006      	beq.n	a306 <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    a2f8:	f107 0308 	add.w	r3, r7, #8
    a2fc:	4618      	mov	r0, r3
    a2fe:	4b29      	ldr	r3, [pc, #164]	; (a3a4 <_usb_d_dev_ep_trans+0x1b8>)
    a300:	4798      	blx	r3
		return USB_BUSY;
    a302:	2301      	movs	r3, #1
    a304:	e043      	b.n	a38e <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    a306:	693a      	ldr	r2, [r7, #16]
    a308:	7cd3      	ldrb	r3, [r2, #19]
    a30a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a30e:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    a310:	f107 0308 	add.w	r3, r7, #8
    a314:	4618      	mov	r0, r3
    a316:	4b23      	ldr	r3, [pc, #140]	; (a3a4 <_usb_d_dev_ep_trans+0x1b8>)
    a318:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    a31a:	687b      	ldr	r3, [r7, #4]
    a31c:	681a      	ldr	r2, [r3, #0]
    a31e:	693b      	ldr	r3, [r7, #16]
    a320:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    a322:	687b      	ldr	r3, [r7, #4]
    a324:	685a      	ldr	r2, [r3, #4]
    a326:	693b      	ldr	r3, [r7, #16]
    a328:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    a32a:	693b      	ldr	r3, [r7, #16]
    a32c:	2200      	movs	r2, #0
    a32e:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    a330:	693a      	ldr	r2, [r7, #16]
    a332:	7cd3      	ldrb	r3, [r2, #19]
    a334:	7d79      	ldrb	r1, [r7, #21]
    a336:	f361 13c7 	bfi	r3, r1, #7, #1
    a33a:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    a33c:	693a      	ldr	r2, [r7, #16]
    a33e:	7cd3      	ldrb	r3, [r2, #19]
    a340:	7df9      	ldrb	r1, [r7, #23]
    a342:	f361 1345 	bfi	r3, r1, #5, #1
    a346:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    a348:	687b      	ldr	r3, [r7, #4]
    a34a:	7a5b      	ldrb	r3, [r3, #9]
    a34c:	2b00      	cmp	r3, #0
    a34e:	d007      	beq.n	a360 <_usb_d_dev_ep_trans+0x174>
    a350:	7b7b      	ldrb	r3, [r7, #13]
    a352:	f083 0301 	eor.w	r3, r3, #1
    a356:	b2db      	uxtb	r3, r3
    a358:	2b00      	cmp	r3, #0
    a35a:	d001      	beq.n	a360 <_usb_d_dev_ep_trans+0x174>
    a35c:	2301      	movs	r3, #1
    a35e:	e000      	b.n	a362 <_usb_d_dev_ep_trans+0x176>
    a360:	2300      	movs	r3, #0
    a362:	b2db      	uxtb	r3, r3
    a364:	f003 0301 	and.w	r3, r3, #1
    a368:	b2d9      	uxtb	r1, r3
    a36a:	693a      	ldr	r2, [r7, #16]
    a36c:	7cd3      	ldrb	r3, [r2, #19]
    a36e:	f361 1304 	bfi	r3, r1, #4, #1
    a372:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    a374:	7d7b      	ldrb	r3, [r7, #21]
    a376:	2b00      	cmp	r3, #0
    a378:	d004      	beq.n	a384 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    a37a:	2100      	movs	r1, #0
    a37c:	6938      	ldr	r0, [r7, #16]
    a37e:	4b0a      	ldr	r3, [pc, #40]	; (a3a8 <_usb_d_dev_ep_trans+0x1bc>)
    a380:	4798      	blx	r3
    a382:	e003      	b.n	a38c <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    a384:	2100      	movs	r1, #0
    a386:	6938      	ldr	r0, [r7, #16]
    a388:	4b08      	ldr	r3, [pc, #32]	; (a3ac <_usb_d_dev_ep_trans+0x1c0>)
    a38a:	4798      	blx	r3
	}

	return ERR_NONE;
    a38c:	2300      	movs	r3, #0
}
    a38e:	4618      	mov	r0, r3
    a390:	3718      	adds	r7, #24
    a392:	46bd      	mov	sp, r7
    a394:	bd80      	pop	{r7, pc}
    a396:	bf00      	nop
    a398:	00008a5d 	.word	0x00008a5d
    a39c:	20041fff 	.word	0x20041fff
    a3a0:	0000ab65 	.word	0x0000ab65
    a3a4:	0000ab8b 	.word	0x0000ab8b
    a3a8:	00008d25 	.word	0x00008d25
    a3ac:	00008f3d 	.word	0x00008f3d

0000a3b0 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    a3b0:	b480      	push	{r7}
    a3b2:	b085      	sub	sp, #20
    a3b4:	af00      	add	r7, sp, #0
    a3b6:	4603      	mov	r3, r0
    a3b8:	6039      	str	r1, [r7, #0]
    a3ba:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    a3bc:	683b      	ldr	r3, [r7, #0]
    a3be:	2b00      	cmp	r3, #0
    a3c0:	d001      	beq.n	a3c6 <_usb_d_dev_register_callback+0x16>
    a3c2:	683b      	ldr	r3, [r7, #0]
    a3c4:	e000      	b.n	a3c8 <_usb_d_dev_register_callback+0x18>
    a3c6:	4b0a      	ldr	r3, [pc, #40]	; (a3f0 <_usb_d_dev_register_callback+0x40>)
    a3c8:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    a3ca:	79fb      	ldrb	r3, [r7, #7]
    a3cc:	2b01      	cmp	r3, #1
    a3ce:	d103      	bne.n	a3d8 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    a3d0:	4a08      	ldr	r2, [pc, #32]	; (a3f4 <_usb_d_dev_register_callback+0x44>)
    a3d2:	68fb      	ldr	r3, [r7, #12]
    a3d4:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    a3d6:	e005      	b.n	a3e4 <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    a3d8:	79fb      	ldrb	r3, [r7, #7]
    a3da:	2b00      	cmp	r3, #0
    a3dc:	d102      	bne.n	a3e4 <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    a3de:	4a05      	ldr	r2, [pc, #20]	; (a3f4 <_usb_d_dev_register_callback+0x44>)
    a3e0:	68fb      	ldr	r3, [r7, #12]
    a3e2:	6013      	str	r3, [r2, #0]
}
    a3e4:	bf00      	nop
    a3e6:	3714      	adds	r7, #20
    a3e8:	46bd      	mov	sp, r7
    a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    a3ee:	4770      	bx	lr
    a3f0:	000082e5 	.word	0x000082e5
    a3f4:	20000f4c 	.word	0x20000f4c

0000a3f8 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    a3f8:	b480      	push	{r7}
    a3fa:	b085      	sub	sp, #20
    a3fc:	af00      	add	r7, sp, #0
    a3fe:	4603      	mov	r3, r0
    a400:	6039      	str	r1, [r7, #0]
    a402:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    a404:	683b      	ldr	r3, [r7, #0]
    a406:	2b00      	cmp	r3, #0
    a408:	d001      	beq.n	a40e <_usb_d_dev_register_ep_callback+0x16>
    a40a:	683b      	ldr	r3, [r7, #0]
    a40c:	e000      	b.n	a410 <_usb_d_dev_register_ep_callback+0x18>
    a40e:	4b0e      	ldr	r3, [pc, #56]	; (a448 <_usb_d_dev_register_ep_callback+0x50>)
    a410:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    a412:	79fb      	ldrb	r3, [r7, #7]
    a414:	2b00      	cmp	r3, #0
    a416:	d103      	bne.n	a420 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    a418:	4a0c      	ldr	r2, [pc, #48]	; (a44c <_usb_d_dev_register_ep_callback+0x54>)
    a41a:	68fb      	ldr	r3, [r7, #12]
    a41c:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    a41e:	e00c      	b.n	a43a <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    a420:	79fb      	ldrb	r3, [r7, #7]
    a422:	2b01      	cmp	r3, #1
    a424:	d103      	bne.n	a42e <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    a426:	4a09      	ldr	r2, [pc, #36]	; (a44c <_usb_d_dev_register_ep_callback+0x54>)
    a428:	68fb      	ldr	r3, [r7, #12]
    a42a:	60d3      	str	r3, [r2, #12]
}
    a42c:	e005      	b.n	a43a <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    a42e:	79fb      	ldrb	r3, [r7, #7]
    a430:	2b02      	cmp	r3, #2
    a432:	d102      	bne.n	a43a <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    a434:	4a05      	ldr	r2, [pc, #20]	; (a44c <_usb_d_dev_register_ep_callback+0x54>)
    a436:	68fb      	ldr	r3, [r7, #12]
    a438:	6113      	str	r3, [r2, #16]
}
    a43a:	bf00      	nop
    a43c:	3714      	adds	r7, #20
    a43e:	46bd      	mov	sp, r7
    a440:	f85d 7b04 	ldr.w	r7, [sp], #4
    a444:	4770      	bx	lr
    a446:	bf00      	nop
    a448:	000082e5 	.word	0x000082e5
    a44c:	20000f4c 	.word	0x20000f4c

0000a450 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    a450:	b580      	push	{r7, lr}
    a452:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a454:	4b01      	ldr	r3, [pc, #4]	; (a45c <USB_0_Handler+0xc>)
    a456:	4798      	blx	r3
}
    a458:	bf00      	nop
    a45a:	bd80      	pop	{r7, pc}
    a45c:	00009715 	.word	0x00009715

0000a460 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    a460:	b580      	push	{r7, lr}
    a462:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a464:	4b01      	ldr	r3, [pc, #4]	; (a46c <USB_1_Handler+0xc>)
    a466:	4798      	blx	r3
}
    a468:	bf00      	nop
    a46a:	bd80      	pop	{r7, pc}
    a46c:	00009715 	.word	0x00009715

0000a470 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    a470:	b580      	push	{r7, lr}
    a472:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a474:	4b01      	ldr	r3, [pc, #4]	; (a47c <USB_2_Handler+0xc>)
    a476:	4798      	blx	r3
}
    a478:	bf00      	nop
    a47a:	bd80      	pop	{r7, pc}
    a47c:	00009715 	.word	0x00009715

0000a480 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    a480:	b580      	push	{r7, lr}
    a482:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a484:	4b01      	ldr	r3, [pc, #4]	; (a48c <USB_3_Handler+0xc>)
    a486:	4798      	blx	r3
}
    a488:	bf00      	nop
    a48a:	bd80      	pop	{r7, pc}
    a48c:	00009715 	.word	0x00009715

0000a490 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    a490:	b480      	push	{r7}
    a492:	b083      	sub	sp, #12
    a494:	af00      	add	r7, sp, #0
    a496:	6078      	str	r0, [r7, #4]
    a498:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    a49a:	bf00      	nop
    a49c:	687b      	ldr	r3, [r7, #4]
    a49e:	689a      	ldr	r2, [r3, #8]
    a4a0:	683b      	ldr	r3, [r7, #0]
    a4a2:	4013      	ands	r3, r2
    a4a4:	2b00      	cmp	r3, #0
    a4a6:	d1f9      	bne.n	a49c <hri_wdt_wait_for_sync+0xc>
	};
}
    a4a8:	bf00      	nop
    a4aa:	370c      	adds	r7, #12
    a4ac:	46bd      	mov	sp, r7
    a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    a4b2:	4770      	bx	lr

0000a4b4 <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    a4b4:	b580      	push	{r7, lr}
    a4b6:	b084      	sub	sp, #16
    a4b8:	af00      	add	r7, sp, #0
    a4ba:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    a4bc:	210e      	movs	r1, #14
    a4be:	6878      	ldr	r0, [r7, #4]
    a4c0:	4b0a      	ldr	r3, [pc, #40]	; (a4ec <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    a4c2:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    a4c4:	687b      	ldr	r3, [r7, #4]
    a4c6:	781b      	ldrb	r3, [r3, #0]
    a4c8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    a4ca:	7bfb      	ldrb	r3, [r7, #15]
    a4cc:	085b      	lsrs	r3, r3, #1
    a4ce:	b2db      	uxtb	r3, r3
    a4d0:	f003 0301 	and.w	r3, r3, #1
    a4d4:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    a4d6:	7bfb      	ldrb	r3, [r7, #15]
    a4d8:	2b00      	cmp	r3, #0
    a4da:	bf14      	ite	ne
    a4dc:	2301      	movne	r3, #1
    a4de:	2300      	moveq	r3, #0
    a4e0:	b2db      	uxtb	r3, r3
}
    a4e2:	4618      	mov	r0, r3
    a4e4:	3710      	adds	r7, #16
    a4e6:	46bd      	mov	sp, r7
    a4e8:	bd80      	pop	{r7, pc}
    a4ea:	bf00      	nop
    a4ec:	0000a491 	.word	0x0000a491

0000a4f0 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    a4f0:	b580      	push	{r7, lr}
    a4f2:	b082      	sub	sp, #8
    a4f4:	af00      	add	r7, sp, #0
    a4f6:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    a4f8:	687b      	ldr	r3, [r7, #4]
    a4fa:	781b      	ldrb	r3, [r3, #0]
    a4fc:	b2db      	uxtb	r3, r3
    a4fe:	f023 0304 	bic.w	r3, r3, #4
    a502:	b2da      	uxtb	r2, r3
    a504:	687b      	ldr	r3, [r7, #4]
    a506:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    a508:	210e      	movs	r1, #14
    a50a:	6878      	ldr	r0, [r7, #4]
    a50c:	4b02      	ldr	r3, [pc, #8]	; (a518 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    a50e:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    a510:	bf00      	nop
    a512:	3708      	adds	r7, #8
    a514:	46bd      	mov	sp, r7
    a516:	bd80      	pop	{r7, pc}
    a518:	0000a491 	.word	0x0000a491

0000a51c <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    a51c:	b580      	push	{r7, lr}
    a51e:	b084      	sub	sp, #16
    a520:	af00      	add	r7, sp, #0
    a522:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    a524:	210e      	movs	r1, #14
    a526:	6878      	ldr	r0, [r7, #4]
    a528:	4b08      	ldr	r3, [pc, #32]	; (a54c <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    a52a:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    a52c:	687b      	ldr	r3, [r7, #4]
    a52e:	781b      	ldrb	r3, [r3, #0]
    a530:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    a532:	7bfb      	ldrb	r3, [r7, #15]
    a534:	09db      	lsrs	r3, r3, #7
    a536:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    a538:	7bfb      	ldrb	r3, [r7, #15]
    a53a:	2b00      	cmp	r3, #0
    a53c:	bf14      	ite	ne
    a53e:	2301      	movne	r3, #1
    a540:	2300      	moveq	r3, #0
    a542:	b2db      	uxtb	r3, r3
}
    a544:	4618      	mov	r0, r3
    a546:	3710      	adds	r7, #16
    a548:	46bd      	mov	sp, r7
    a54a:	bd80      	pop	{r7, pc}
    a54c:	0000a491 	.word	0x0000a491

0000a550 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    a550:	b480      	push	{r7}
    a552:	b085      	sub	sp, #20
    a554:	af00      	add	r7, sp, #0
    a556:	6078      	str	r0, [r7, #4]
    a558:	460b      	mov	r3, r1
    a55a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    a55c:	687b      	ldr	r3, [r7, #4]
    a55e:	785b      	ldrb	r3, [r3, #1]
    a560:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    a562:	7bfb      	ldrb	r3, [r7, #15]
    a564:	f023 030f 	bic.w	r3, r3, #15
    a568:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    a56a:	78fb      	ldrb	r3, [r7, #3]
    a56c:	f003 030f 	and.w	r3, r3, #15
    a570:	b2da      	uxtb	r2, r3
    a572:	7bfb      	ldrb	r3, [r7, #15]
    a574:	4313      	orrs	r3, r2
    a576:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    a578:	687b      	ldr	r3, [r7, #4]
    a57a:	7bfa      	ldrb	r2, [r7, #15]
    a57c:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    a57e:	bf00      	nop
    a580:	3714      	adds	r7, #20
    a582:	46bd      	mov	sp, r7
    a584:	f85d 7b04 	ldr.w	r7, [sp], #4
    a588:	4770      	bx	lr
	...

0000a58c <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    a58c:	b580      	push	{r7, lr}
    a58e:	b082      	sub	sp, #8
    a590:	af00      	add	r7, sp, #0
    a592:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    a594:	687b      	ldr	r3, [r7, #4]
    a596:	2b00      	cmp	r3, #0
    a598:	d005      	beq.n	a5a6 <_wdt_init+0x1a>
    a59a:	687b      	ldr	r3, [r7, #4]
    a59c:	681b      	ldr	r3, [r3, #0]
    a59e:	2b00      	cmp	r3, #0
    a5a0:	d001      	beq.n	a5a6 <_wdt_init+0x1a>
    a5a2:	2301      	movs	r3, #1
    a5a4:	e000      	b.n	a5a8 <_wdt_init+0x1c>
    a5a6:	2300      	movs	r3, #0
    a5a8:	f003 0301 	and.w	r3, r3, #1
    a5ac:	b2db      	uxtb	r3, r3
    a5ae:	2250      	movs	r2, #80	; 0x50
    a5b0:	4913      	ldr	r1, [pc, #76]	; (a600 <_wdt_init+0x74>)
    a5b2:	4618      	mov	r0, r3
    a5b4:	4b13      	ldr	r3, [pc, #76]	; (a604 <_wdt_init+0x78>)
    a5b6:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    a5b8:	687b      	ldr	r3, [r7, #4]
    a5ba:	681b      	ldr	r3, [r3, #0]
    a5bc:	4618      	mov	r0, r3
    a5be:	4b12      	ldr	r3, [pc, #72]	; (a608 <_wdt_init+0x7c>)
    a5c0:	4798      	blx	r3
    a5c2:	4603      	mov	r3, r0
    a5c4:	2b00      	cmp	r3, #0
    a5c6:	d107      	bne.n	a5d8 <_wdt_init+0x4c>
    a5c8:	687b      	ldr	r3, [r7, #4]
    a5ca:	681b      	ldr	r3, [r3, #0]
    a5cc:	4618      	mov	r0, r3
    a5ce:	4b0f      	ldr	r3, [pc, #60]	; (a60c <_wdt_init+0x80>)
    a5d0:	4798      	blx	r3
    a5d2:	4603      	mov	r3, r0
    a5d4:	2b00      	cmp	r3, #0
    a5d6:	d002      	beq.n	a5de <_wdt_init+0x52>
		return ERR_DENIED;
    a5d8:	f06f 0310 	mvn.w	r3, #16
    a5dc:	e00b      	b.n	a5f6 <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    a5de:	687b      	ldr	r3, [r7, #4]
    a5e0:	681b      	ldr	r3, [r3, #0]
    a5e2:	4618      	mov	r0, r3
    a5e4:	4b0a      	ldr	r3, [pc, #40]	; (a610 <_wdt_init+0x84>)
    a5e6:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    a5e8:	687b      	ldr	r3, [r7, #4]
    a5ea:	681b      	ldr	r3, [r3, #0]
    a5ec:	210b      	movs	r1, #11
    a5ee:	4618      	mov	r0, r3
    a5f0:	4b08      	ldr	r3, [pc, #32]	; (a614 <_wdt_init+0x88>)
    a5f2:	4798      	blx	r3
	}

	return ERR_NONE;
    a5f4:	2300      	movs	r3, #0
}
    a5f6:	4618      	mov	r0, r3
    a5f8:	3708      	adds	r7, #8
    a5fa:	46bd      	mov	sp, r7
    a5fc:	bd80      	pop	{r7, pc}
    a5fe:	bf00      	nop
    a600:	00013480 	.word	0x00013480
    a604:	00002d4d 	.word	0x00002d4d
    a608:	0000a51d 	.word	0x0000a51d
    a60c:	0000a4b5 	.word	0x0000a4b5
    a610:	0000a4f1 	.word	0x0000a4f1
    a614:	0000a551 	.word	0x0000a551

0000a618 <hri_port_set_DIR_reg>:
{
    a618:	b480      	push	{r7}
    a61a:	b085      	sub	sp, #20
    a61c:	af00      	add	r7, sp, #0
    a61e:	60f8      	str	r0, [r7, #12]
    a620:	460b      	mov	r3, r1
    a622:	607a      	str	r2, [r7, #4]
    a624:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    a626:	7afb      	ldrb	r3, [r7, #11]
    a628:	68fa      	ldr	r2, [r7, #12]
    a62a:	01db      	lsls	r3, r3, #7
    a62c:	4413      	add	r3, r2
    a62e:	3308      	adds	r3, #8
    a630:	687a      	ldr	r2, [r7, #4]
    a632:	601a      	str	r2, [r3, #0]
}
    a634:	bf00      	nop
    a636:	3714      	adds	r7, #20
    a638:	46bd      	mov	sp, r7
    a63a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a63e:	4770      	bx	lr

0000a640 <hri_port_clear_DIR_reg>:
{
    a640:	b480      	push	{r7}
    a642:	b085      	sub	sp, #20
    a644:	af00      	add	r7, sp, #0
    a646:	60f8      	str	r0, [r7, #12]
    a648:	460b      	mov	r3, r1
    a64a:	607a      	str	r2, [r7, #4]
    a64c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    a64e:	7afb      	ldrb	r3, [r7, #11]
    a650:	68fa      	ldr	r2, [r7, #12]
    a652:	01db      	lsls	r3, r3, #7
    a654:	4413      	add	r3, r2
    a656:	3304      	adds	r3, #4
    a658:	687a      	ldr	r2, [r7, #4]
    a65a:	601a      	str	r2, [r3, #0]
}
    a65c:	bf00      	nop
    a65e:	3714      	adds	r7, #20
    a660:	46bd      	mov	sp, r7
    a662:	f85d 7b04 	ldr.w	r7, [sp], #4
    a666:	4770      	bx	lr

0000a668 <hri_port_set_OUT_reg>:
{
    a668:	b480      	push	{r7}
    a66a:	b085      	sub	sp, #20
    a66c:	af00      	add	r7, sp, #0
    a66e:	60f8      	str	r0, [r7, #12]
    a670:	460b      	mov	r3, r1
    a672:	607a      	str	r2, [r7, #4]
    a674:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    a676:	7afb      	ldrb	r3, [r7, #11]
    a678:	68fa      	ldr	r2, [r7, #12]
    a67a:	01db      	lsls	r3, r3, #7
    a67c:	4413      	add	r3, r2
    a67e:	3318      	adds	r3, #24
    a680:	687a      	ldr	r2, [r7, #4]
    a682:	601a      	str	r2, [r3, #0]
}
    a684:	bf00      	nop
    a686:	3714      	adds	r7, #20
    a688:	46bd      	mov	sp, r7
    a68a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a68e:	4770      	bx	lr

0000a690 <hri_port_clear_OUT_reg>:
{
    a690:	b480      	push	{r7}
    a692:	b085      	sub	sp, #20
    a694:	af00      	add	r7, sp, #0
    a696:	60f8      	str	r0, [r7, #12]
    a698:	460b      	mov	r3, r1
    a69a:	607a      	str	r2, [r7, #4]
    a69c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    a69e:	7afb      	ldrb	r3, [r7, #11]
    a6a0:	68fa      	ldr	r2, [r7, #12]
    a6a2:	01db      	lsls	r3, r3, #7
    a6a4:	4413      	add	r3, r2
    a6a6:	3314      	adds	r3, #20
    a6a8:	687a      	ldr	r2, [r7, #4]
    a6aa:	601a      	str	r2, [r3, #0]
}
    a6ac:	bf00      	nop
    a6ae:	3714      	adds	r7, #20
    a6b0:	46bd      	mov	sp, r7
    a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    a6b6:	4770      	bx	lr

0000a6b8 <hri_port_write_PMUX_PMUXE_bf>:
{
    a6b8:	b480      	push	{r7}
    a6ba:	b085      	sub	sp, #20
    a6bc:	af00      	add	r7, sp, #0
    a6be:	6078      	str	r0, [r7, #4]
    a6c0:	4608      	mov	r0, r1
    a6c2:	4611      	mov	r1, r2
    a6c4:	461a      	mov	r2, r3
    a6c6:	4603      	mov	r3, r0
    a6c8:	70fb      	strb	r3, [r7, #3]
    a6ca:	460b      	mov	r3, r1
    a6cc:	70bb      	strb	r3, [r7, #2]
    a6ce:	4613      	mov	r3, r2
    a6d0:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    a6d2:	78fa      	ldrb	r2, [r7, #3]
    a6d4:	78bb      	ldrb	r3, [r7, #2]
    a6d6:	6879      	ldr	r1, [r7, #4]
    a6d8:	01d2      	lsls	r2, r2, #7
    a6da:	440a      	add	r2, r1
    a6dc:	4413      	add	r3, r2
    a6de:	3330      	adds	r3, #48	; 0x30
    a6e0:	781b      	ldrb	r3, [r3, #0]
    a6e2:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    a6e4:	7bfb      	ldrb	r3, [r7, #15]
    a6e6:	f023 030f 	bic.w	r3, r3, #15
    a6ea:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    a6ec:	787b      	ldrb	r3, [r7, #1]
    a6ee:	f003 030f 	and.w	r3, r3, #15
    a6f2:	b2da      	uxtb	r2, r3
    a6f4:	7bfb      	ldrb	r3, [r7, #15]
    a6f6:	4313      	orrs	r3, r2
    a6f8:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    a6fa:	78fa      	ldrb	r2, [r7, #3]
    a6fc:	78bb      	ldrb	r3, [r7, #2]
    a6fe:	6879      	ldr	r1, [r7, #4]
    a700:	01d2      	lsls	r2, r2, #7
    a702:	440a      	add	r2, r1
    a704:	4413      	add	r3, r2
    a706:	3330      	adds	r3, #48	; 0x30
    a708:	7bfa      	ldrb	r2, [r7, #15]
    a70a:	701a      	strb	r2, [r3, #0]
}
    a70c:	bf00      	nop
    a70e:	3714      	adds	r7, #20
    a710:	46bd      	mov	sp, r7
    a712:	f85d 7b04 	ldr.w	r7, [sp], #4
    a716:	4770      	bx	lr

0000a718 <hri_port_write_PMUX_PMUXO_bf>:
{
    a718:	b480      	push	{r7}
    a71a:	b085      	sub	sp, #20
    a71c:	af00      	add	r7, sp, #0
    a71e:	6078      	str	r0, [r7, #4]
    a720:	4608      	mov	r0, r1
    a722:	4611      	mov	r1, r2
    a724:	461a      	mov	r2, r3
    a726:	4603      	mov	r3, r0
    a728:	70fb      	strb	r3, [r7, #3]
    a72a:	460b      	mov	r3, r1
    a72c:	70bb      	strb	r3, [r7, #2]
    a72e:	4613      	mov	r3, r2
    a730:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    a732:	78fa      	ldrb	r2, [r7, #3]
    a734:	78bb      	ldrb	r3, [r7, #2]
    a736:	6879      	ldr	r1, [r7, #4]
    a738:	01d2      	lsls	r2, r2, #7
    a73a:	440a      	add	r2, r1
    a73c:	4413      	add	r3, r2
    a73e:	3330      	adds	r3, #48	; 0x30
    a740:	781b      	ldrb	r3, [r3, #0]
    a742:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    a744:	7bfb      	ldrb	r3, [r7, #15]
    a746:	f003 030f 	and.w	r3, r3, #15
    a74a:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    a74c:	787b      	ldrb	r3, [r7, #1]
    a74e:	011b      	lsls	r3, r3, #4
    a750:	b2da      	uxtb	r2, r3
    a752:	7bfb      	ldrb	r3, [r7, #15]
    a754:	4313      	orrs	r3, r2
    a756:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    a758:	78fa      	ldrb	r2, [r7, #3]
    a75a:	78bb      	ldrb	r3, [r7, #2]
    a75c:	6879      	ldr	r1, [r7, #4]
    a75e:	01d2      	lsls	r2, r2, #7
    a760:	440a      	add	r2, r1
    a762:	4413      	add	r3, r2
    a764:	3330      	adds	r3, #48	; 0x30
    a766:	7bfa      	ldrb	r2, [r7, #15]
    a768:	701a      	strb	r2, [r3, #0]
}
    a76a:	bf00      	nop
    a76c:	3714      	adds	r7, #20
    a76e:	46bd      	mov	sp, r7
    a770:	f85d 7b04 	ldr.w	r7, [sp], #4
    a774:	4770      	bx	lr

0000a776 <hri_port_write_PINCFG_PMUXEN_bit>:
{
    a776:	b480      	push	{r7}
    a778:	b085      	sub	sp, #20
    a77a:	af00      	add	r7, sp, #0
    a77c:	6078      	str	r0, [r7, #4]
    a77e:	4608      	mov	r0, r1
    a780:	4611      	mov	r1, r2
    a782:	461a      	mov	r2, r3
    a784:	4603      	mov	r3, r0
    a786:	70fb      	strb	r3, [r7, #3]
    a788:	460b      	mov	r3, r1
    a78a:	70bb      	strb	r3, [r7, #2]
    a78c:	4613      	mov	r3, r2
    a78e:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    a790:	78fa      	ldrb	r2, [r7, #3]
    a792:	78bb      	ldrb	r3, [r7, #2]
    a794:	6879      	ldr	r1, [r7, #4]
    a796:	01d2      	lsls	r2, r2, #7
    a798:	440a      	add	r2, r1
    a79a:	4413      	add	r3, r2
    a79c:	3340      	adds	r3, #64	; 0x40
    a79e:	781b      	ldrb	r3, [r3, #0]
    a7a0:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    a7a2:	7bfb      	ldrb	r3, [r7, #15]
    a7a4:	f023 0301 	bic.w	r3, r3, #1
    a7a8:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    a7aa:	787a      	ldrb	r2, [r7, #1]
    a7ac:	7bfb      	ldrb	r3, [r7, #15]
    a7ae:	4313      	orrs	r3, r2
    a7b0:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    a7b2:	78fa      	ldrb	r2, [r7, #3]
    a7b4:	78bb      	ldrb	r3, [r7, #2]
    a7b6:	6879      	ldr	r1, [r7, #4]
    a7b8:	01d2      	lsls	r2, r2, #7
    a7ba:	440a      	add	r2, r1
    a7bc:	4413      	add	r3, r2
    a7be:	3340      	adds	r3, #64	; 0x40
    a7c0:	7bfa      	ldrb	r2, [r7, #15]
    a7c2:	701a      	strb	r2, [r3, #0]
}
    a7c4:	bf00      	nop
    a7c6:	3714      	adds	r7, #20
    a7c8:	46bd      	mov	sp, r7
    a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    a7ce:	4770      	bx	lr

0000a7d0 <hri_port_write_WRCONFIG_reg>:
{
    a7d0:	b480      	push	{r7}
    a7d2:	b085      	sub	sp, #20
    a7d4:	af00      	add	r7, sp, #0
    a7d6:	60f8      	str	r0, [r7, #12]
    a7d8:	460b      	mov	r3, r1
    a7da:	607a      	str	r2, [r7, #4]
    a7dc:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    a7de:	7afb      	ldrb	r3, [r7, #11]
    a7e0:	68fa      	ldr	r2, [r7, #12]
    a7e2:	01db      	lsls	r3, r3, #7
    a7e4:	4413      	add	r3, r2
    a7e6:	3328      	adds	r3, #40	; 0x28
    a7e8:	687a      	ldr	r2, [r7, #4]
    a7ea:	601a      	str	r2, [r3, #0]
}
    a7ec:	bf00      	nop
    a7ee:	3714      	adds	r7, #20
    a7f0:	46bd      	mov	sp, r7
    a7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    a7f6:	4770      	bx	lr

0000a7f8 <_gpio_set_direction>:
{
    a7f8:	b580      	push	{r7, lr}
    a7fa:	b082      	sub	sp, #8
    a7fc:	af00      	add	r7, sp, #0
    a7fe:	4603      	mov	r3, r0
    a800:	6039      	str	r1, [r7, #0]
    a802:	71fb      	strb	r3, [r7, #7]
    a804:	4613      	mov	r3, r2
    a806:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    a808:	79bb      	ldrb	r3, [r7, #6]
    a80a:	2b01      	cmp	r3, #1
    a80c:	d01c      	beq.n	a848 <_gpio_set_direction+0x50>
    a80e:	2b02      	cmp	r3, #2
    a810:	d037      	beq.n	a882 <_gpio_set_direction+0x8a>
    a812:	2b00      	cmp	r3, #0
    a814:	d14e      	bne.n	a8b4 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    a816:	79fb      	ldrb	r3, [r7, #7]
    a818:	683a      	ldr	r2, [r7, #0]
    a81a:	4619      	mov	r1, r3
    a81c:	482a      	ldr	r0, [pc, #168]	; (a8c8 <_gpio_set_direction+0xd0>)
    a81e:	4b2b      	ldr	r3, [pc, #172]	; (a8cc <_gpio_set_direction+0xd4>)
    a820:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    a822:	683b      	ldr	r3, [r7, #0]
    a824:	b29b      	uxth	r3, r3
    a826:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    a82a:	79fb      	ldrb	r3, [r7, #7]
    a82c:	4619      	mov	r1, r3
    a82e:	4826      	ldr	r0, [pc, #152]	; (a8c8 <_gpio_set_direction+0xd0>)
    a830:	4b27      	ldr	r3, [pc, #156]	; (a8d0 <_gpio_set_direction+0xd8>)
    a832:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    a834:	683b      	ldr	r3, [r7, #0]
    a836:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    a838:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    a83c:	79fb      	ldrb	r3, [r7, #7]
    a83e:	4619      	mov	r1, r3
    a840:	4821      	ldr	r0, [pc, #132]	; (a8c8 <_gpio_set_direction+0xd0>)
    a842:	4b23      	ldr	r3, [pc, #140]	; (a8d0 <_gpio_set_direction+0xd8>)
    a844:	4798      	blx	r3
		break;
    a846:	e03a      	b.n	a8be <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    a848:	79fb      	ldrb	r3, [r7, #7]
    a84a:	683a      	ldr	r2, [r7, #0]
    a84c:	4619      	mov	r1, r3
    a84e:	481e      	ldr	r0, [pc, #120]	; (a8c8 <_gpio_set_direction+0xd0>)
    a850:	4b1e      	ldr	r3, [pc, #120]	; (a8cc <_gpio_set_direction+0xd4>)
    a852:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    a854:	683b      	ldr	r3, [r7, #0]
    a856:	b29b      	uxth	r3, r3
    a858:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    a85c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    a860:	79f9      	ldrb	r1, [r7, #7]
    a862:	461a      	mov	r2, r3
    a864:	4818      	ldr	r0, [pc, #96]	; (a8c8 <_gpio_set_direction+0xd0>)
    a866:	4b1a      	ldr	r3, [pc, #104]	; (a8d0 <_gpio_set_direction+0xd8>)
    a868:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    a86a:	683b      	ldr	r3, [r7, #0]
    a86c:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    a86e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    a872:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    a876:	79f9      	ldrb	r1, [r7, #7]
    a878:	461a      	mov	r2, r3
    a87a:	4813      	ldr	r0, [pc, #76]	; (a8c8 <_gpio_set_direction+0xd0>)
    a87c:	4b14      	ldr	r3, [pc, #80]	; (a8d0 <_gpio_set_direction+0xd8>)
    a87e:	4798      	blx	r3
		break;
    a880:	e01d      	b.n	a8be <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    a882:	79fb      	ldrb	r3, [r7, #7]
    a884:	683a      	ldr	r2, [r7, #0]
    a886:	4619      	mov	r1, r3
    a888:	480f      	ldr	r0, [pc, #60]	; (a8c8 <_gpio_set_direction+0xd0>)
    a88a:	4b12      	ldr	r3, [pc, #72]	; (a8d4 <_gpio_set_direction+0xdc>)
    a88c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    a88e:	683b      	ldr	r3, [r7, #0]
    a890:	b29b      	uxth	r3, r3
    a892:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    a896:	79fb      	ldrb	r3, [r7, #7]
    a898:	4619      	mov	r1, r3
    a89a:	480b      	ldr	r0, [pc, #44]	; (a8c8 <_gpio_set_direction+0xd0>)
    a89c:	4b0c      	ldr	r3, [pc, #48]	; (a8d0 <_gpio_set_direction+0xd8>)
    a89e:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    a8a0:	683b      	ldr	r3, [r7, #0]
    a8a2:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    a8a4:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    a8a8:	79fb      	ldrb	r3, [r7, #7]
    a8aa:	4619      	mov	r1, r3
    a8ac:	4806      	ldr	r0, [pc, #24]	; (a8c8 <_gpio_set_direction+0xd0>)
    a8ae:	4b08      	ldr	r3, [pc, #32]	; (a8d0 <_gpio_set_direction+0xd8>)
    a8b0:	4798      	blx	r3
		break;
    a8b2:	e004      	b.n	a8be <_gpio_set_direction+0xc6>
		ASSERT(false);
    a8b4:	2246      	movs	r2, #70	; 0x46
    a8b6:	4908      	ldr	r1, [pc, #32]	; (a8d8 <_gpio_set_direction+0xe0>)
    a8b8:	2000      	movs	r0, #0
    a8ba:	4b08      	ldr	r3, [pc, #32]	; (a8dc <_gpio_set_direction+0xe4>)
    a8bc:	4798      	blx	r3
}
    a8be:	bf00      	nop
    a8c0:	3708      	adds	r7, #8
    a8c2:	46bd      	mov	sp, r7
    a8c4:	bd80      	pop	{r7, pc}
    a8c6:	bf00      	nop
    a8c8:	41008000 	.word	0x41008000
    a8cc:	0000a641 	.word	0x0000a641
    a8d0:	0000a7d1 	.word	0x0000a7d1
    a8d4:	0000a619 	.word	0x0000a619
    a8d8:	00013498 	.word	0x00013498
    a8dc:	00002d4d 	.word	0x00002d4d

0000a8e0 <_gpio_set_level>:
{
    a8e0:	b580      	push	{r7, lr}
    a8e2:	b082      	sub	sp, #8
    a8e4:	af00      	add	r7, sp, #0
    a8e6:	4603      	mov	r3, r0
    a8e8:	6039      	str	r1, [r7, #0]
    a8ea:	71fb      	strb	r3, [r7, #7]
    a8ec:	4613      	mov	r3, r2
    a8ee:	71bb      	strb	r3, [r7, #6]
	if (level) {
    a8f0:	79bb      	ldrb	r3, [r7, #6]
    a8f2:	2b00      	cmp	r3, #0
    a8f4:	d006      	beq.n	a904 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    a8f6:	79fb      	ldrb	r3, [r7, #7]
    a8f8:	683a      	ldr	r2, [r7, #0]
    a8fa:	4619      	mov	r1, r3
    a8fc:	4806      	ldr	r0, [pc, #24]	; (a918 <_gpio_set_level+0x38>)
    a8fe:	4b07      	ldr	r3, [pc, #28]	; (a91c <_gpio_set_level+0x3c>)
    a900:	4798      	blx	r3
}
    a902:	e005      	b.n	a910 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    a904:	79fb      	ldrb	r3, [r7, #7]
    a906:	683a      	ldr	r2, [r7, #0]
    a908:	4619      	mov	r1, r3
    a90a:	4803      	ldr	r0, [pc, #12]	; (a918 <_gpio_set_level+0x38>)
    a90c:	4b04      	ldr	r3, [pc, #16]	; (a920 <_gpio_set_level+0x40>)
    a90e:	4798      	blx	r3
}
    a910:	bf00      	nop
    a912:	3708      	adds	r7, #8
    a914:	46bd      	mov	sp, r7
    a916:	bd80      	pop	{r7, pc}
    a918:	41008000 	.word	0x41008000
    a91c:	0000a669 	.word	0x0000a669
    a920:	0000a691 	.word	0x0000a691

0000a924 <_gpio_set_pin_function>:
{
    a924:	b590      	push	{r4, r7, lr}
    a926:	b085      	sub	sp, #20
    a928:	af00      	add	r7, sp, #0
    a92a:	6078      	str	r0, [r7, #4]
    a92c:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    a92e:	687b      	ldr	r3, [r7, #4]
    a930:	095b      	lsrs	r3, r3, #5
    a932:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    a934:	687b      	ldr	r3, [r7, #4]
    a936:	b2db      	uxtb	r3, r3
    a938:	f003 031f 	and.w	r3, r3, #31
    a93c:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    a93e:	683b      	ldr	r3, [r7, #0]
    a940:	f1b3 3fff 	cmp.w	r3, #4294967295
    a944:	d106      	bne.n	a954 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    a946:	7bba      	ldrb	r2, [r7, #14]
    a948:	7bf9      	ldrb	r1, [r7, #15]
    a94a:	2300      	movs	r3, #0
    a94c:	4812      	ldr	r0, [pc, #72]	; (a998 <_gpio_set_pin_function+0x74>)
    a94e:	4c13      	ldr	r4, [pc, #76]	; (a99c <_gpio_set_pin_function+0x78>)
    a950:	47a0      	blx	r4
}
    a952:	e01d      	b.n	a990 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    a954:	7bba      	ldrb	r2, [r7, #14]
    a956:	7bf9      	ldrb	r1, [r7, #15]
    a958:	2301      	movs	r3, #1
    a95a:	480f      	ldr	r0, [pc, #60]	; (a998 <_gpio_set_pin_function+0x74>)
    a95c:	4c0f      	ldr	r4, [pc, #60]	; (a99c <_gpio_set_pin_function+0x78>)
    a95e:	47a0      	blx	r4
		if (pin & 1) {
    a960:	7bbb      	ldrb	r3, [r7, #14]
    a962:	f003 0301 	and.w	r3, r3, #1
    a966:	2b00      	cmp	r3, #0
    a968:	d009      	beq.n	a97e <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    a96a:	7bbb      	ldrb	r3, [r7, #14]
    a96c:	085b      	lsrs	r3, r3, #1
    a96e:	b2da      	uxtb	r2, r3
    a970:	683b      	ldr	r3, [r7, #0]
    a972:	b2db      	uxtb	r3, r3
    a974:	7bf9      	ldrb	r1, [r7, #15]
    a976:	4808      	ldr	r0, [pc, #32]	; (a998 <_gpio_set_pin_function+0x74>)
    a978:	4c09      	ldr	r4, [pc, #36]	; (a9a0 <_gpio_set_pin_function+0x7c>)
    a97a:	47a0      	blx	r4
}
    a97c:	e008      	b.n	a990 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    a97e:	7bbb      	ldrb	r3, [r7, #14]
    a980:	085b      	lsrs	r3, r3, #1
    a982:	b2da      	uxtb	r2, r3
    a984:	683b      	ldr	r3, [r7, #0]
    a986:	b2db      	uxtb	r3, r3
    a988:	7bf9      	ldrb	r1, [r7, #15]
    a98a:	4803      	ldr	r0, [pc, #12]	; (a998 <_gpio_set_pin_function+0x74>)
    a98c:	4c05      	ldr	r4, [pc, #20]	; (a9a4 <_gpio_set_pin_function+0x80>)
    a98e:	47a0      	blx	r4
}
    a990:	bf00      	nop
    a992:	3714      	adds	r7, #20
    a994:	46bd      	mov	sp, r7
    a996:	bd90      	pop	{r4, r7, pc}
    a998:	41008000 	.word	0x41008000
    a99c:	0000a777 	.word	0x0000a777
    a9a0:	0000a719 	.word	0x0000a719
    a9a4:	0000a6b9 	.word	0x0000a6b9

0000a9a8 <gpio_set_pin_function>:
{
    a9a8:	b580      	push	{r7, lr}
    a9aa:	b082      	sub	sp, #8
    a9ac:	af00      	add	r7, sp, #0
    a9ae:	6078      	str	r0, [r7, #4]
    a9b0:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    a9b2:	6839      	ldr	r1, [r7, #0]
    a9b4:	6878      	ldr	r0, [r7, #4]
    a9b6:	4b03      	ldr	r3, [pc, #12]	; (a9c4 <gpio_set_pin_function+0x1c>)
    a9b8:	4798      	blx	r3
}
    a9ba:	bf00      	nop
    a9bc:	3708      	adds	r7, #8
    a9be:	46bd      	mov	sp, r7
    a9c0:	bd80      	pop	{r7, pc}
    a9c2:	bf00      	nop
    a9c4:	0000a925 	.word	0x0000a925

0000a9c8 <gpio_set_pin_direction>:
{
    a9c8:	b580      	push	{r7, lr}
    a9ca:	b082      	sub	sp, #8
    a9cc:	af00      	add	r7, sp, #0
    a9ce:	4603      	mov	r3, r0
    a9d0:	460a      	mov	r2, r1
    a9d2:	71fb      	strb	r3, [r7, #7]
    a9d4:	4613      	mov	r3, r2
    a9d6:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    a9d8:	79fb      	ldrb	r3, [r7, #7]
    a9da:	095b      	lsrs	r3, r3, #5
    a9dc:	b2d8      	uxtb	r0, r3
    a9de:	79fb      	ldrb	r3, [r7, #7]
    a9e0:	f003 031f 	and.w	r3, r3, #31
    a9e4:	2201      	movs	r2, #1
    a9e6:	fa02 f303 	lsl.w	r3, r2, r3
    a9ea:	79ba      	ldrb	r2, [r7, #6]
    a9ec:	4619      	mov	r1, r3
    a9ee:	4b03      	ldr	r3, [pc, #12]	; (a9fc <gpio_set_pin_direction+0x34>)
    a9f0:	4798      	blx	r3
}
    a9f2:	bf00      	nop
    a9f4:	3708      	adds	r7, #8
    a9f6:	46bd      	mov	sp, r7
    a9f8:	bd80      	pop	{r7, pc}
    a9fa:	bf00      	nop
    a9fc:	0000a7f9 	.word	0x0000a7f9

0000aa00 <gpio_set_pin_level>:
{
    aa00:	b580      	push	{r7, lr}
    aa02:	b082      	sub	sp, #8
    aa04:	af00      	add	r7, sp, #0
    aa06:	4603      	mov	r3, r0
    aa08:	460a      	mov	r2, r1
    aa0a:	71fb      	strb	r3, [r7, #7]
    aa0c:	4613      	mov	r3, r2
    aa0e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    aa10:	79fb      	ldrb	r3, [r7, #7]
    aa12:	095b      	lsrs	r3, r3, #5
    aa14:	b2d8      	uxtb	r0, r3
    aa16:	79fb      	ldrb	r3, [r7, #7]
    aa18:	f003 031f 	and.w	r3, r3, #31
    aa1c:	2201      	movs	r2, #1
    aa1e:	fa02 f303 	lsl.w	r3, r2, r3
    aa22:	79ba      	ldrb	r2, [r7, #6]
    aa24:	4619      	mov	r1, r3
    aa26:	4b03      	ldr	r3, [pc, #12]	; (aa34 <gpio_set_pin_level+0x34>)
    aa28:	4798      	blx	r3
}
    aa2a:	bf00      	nop
    aa2c:	3708      	adds	r7, #8
    aa2e:	46bd      	mov	sp, r7
    aa30:	bd80      	pop	{r7, pc}
    aa32:	bf00      	nop
    aa34:	0000a8e1 	.word	0x0000a8e1

0000aa38 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    aa38:	b580      	push	{r7, lr}
    aa3a:	b082      	sub	sp, #8
    aa3c:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    aa3e:	2100      	movs	r1, #0
    aa40:	2008      	movs	r0, #8
    aa42:	4b24      	ldr	r3, [pc, #144]	; (aad4 <QSPI_N25Q256_exit_xip+0x9c>)
    aa44:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    aa46:	2100      	movs	r1, #0
    aa48:	202b      	movs	r0, #43	; 0x2b
    aa4a:	4b22      	ldr	r3, [pc, #136]	; (aad4 <QSPI_N25Q256_exit_xip+0x9c>)
    aa4c:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    aa4e:	2100      	movs	r1, #0
    aa50:	202a      	movs	r0, #42	; 0x2a
    aa52:	4b20      	ldr	r3, [pc, #128]	; (aad4 <QSPI_N25Q256_exit_xip+0x9c>)
    aa54:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    aa56:	2102      	movs	r1, #2
    aa58:	2008      	movs	r0, #8
    aa5a:	4b1f      	ldr	r3, [pc, #124]	; (aad8 <QSPI_N25Q256_exit_xip+0xa0>)
    aa5c:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    aa5e:	2102      	movs	r1, #2
    aa60:	202b      	movs	r0, #43	; 0x2b
    aa62:	4b1d      	ldr	r3, [pc, #116]	; (aad8 <QSPI_N25Q256_exit_xip+0xa0>)
    aa64:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    aa66:	2102      	movs	r1, #2
    aa68:	202a      	movs	r0, #42	; 0x2a
    aa6a:	4b1b      	ldr	r3, [pc, #108]	; (aad8 <QSPI_N25Q256_exit_xip+0xa0>)
    aa6c:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    aa6e:	2101      	movs	r1, #1
    aa70:	2008      	movs	r0, #8
    aa72:	4b1a      	ldr	r3, [pc, #104]	; (aadc <QSPI_N25Q256_exit_xip+0xa4>)
    aa74:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    aa76:	2100      	movs	r1, #0
    aa78:	202b      	movs	r0, #43	; 0x2b
    aa7a:	4b18      	ldr	r3, [pc, #96]	; (aadc <QSPI_N25Q256_exit_xip+0xa4>)
    aa7c:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    aa7e:	2100      	movs	r1, #0
    aa80:	202a      	movs	r0, #42	; 0x2a
    aa82:	4b16      	ldr	r3, [pc, #88]	; (aadc <QSPI_N25Q256_exit_xip+0xa4>)
    aa84:	4798      	blx	r3

	delay_us(1);
    aa86:	2001      	movs	r0, #1
    aa88:	4b15      	ldr	r3, [pc, #84]	; (aae0 <QSPI_N25Q256_exit_xip+0xa8>)
    aa8a:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    aa8c:	2300      	movs	r3, #0
    aa8e:	607b      	str	r3, [r7, #4]
    aa90:	e010      	b.n	aab4 <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    aa92:	2101      	movs	r1, #1
    aa94:	202a      	movs	r0, #42	; 0x2a
    aa96:	4b11      	ldr	r3, [pc, #68]	; (aadc <QSPI_N25Q256_exit_xip+0xa4>)
    aa98:	4798      	blx	r3
		delay_us(1);
    aa9a:	2001      	movs	r0, #1
    aa9c:	4b10      	ldr	r3, [pc, #64]	; (aae0 <QSPI_N25Q256_exit_xip+0xa8>)
    aa9e:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    aaa0:	2100      	movs	r1, #0
    aaa2:	202a      	movs	r0, #42	; 0x2a
    aaa4:	4b0d      	ldr	r3, [pc, #52]	; (aadc <QSPI_N25Q256_exit_xip+0xa4>)
    aaa6:	4798      	blx	r3
		delay_us(1);
    aaa8:	2001      	movs	r0, #1
    aaaa:	4b0d      	ldr	r3, [pc, #52]	; (aae0 <QSPI_N25Q256_exit_xip+0xa8>)
    aaac:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    aaae:	687b      	ldr	r3, [r7, #4]
    aab0:	3301      	adds	r3, #1
    aab2:	607b      	str	r3, [r7, #4]
    aab4:	687b      	ldr	r3, [r7, #4]
    aab6:	2b06      	cmp	r3, #6
    aab8:	ddeb      	ble.n	aa92 <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    aaba:	2101      	movs	r1, #1
    aabc:	202b      	movs	r0, #43	; 0x2b
    aabe:	4b07      	ldr	r3, [pc, #28]	; (aadc <QSPI_N25Q256_exit_xip+0xa4>)
    aac0:	4798      	blx	r3
	delay_us(1);
    aac2:	2001      	movs	r0, #1
    aac4:	4b06      	ldr	r3, [pc, #24]	; (aae0 <QSPI_N25Q256_exit_xip+0xa8>)
    aac6:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    aac8:	4b06      	ldr	r3, [pc, #24]	; (aae4 <QSPI_N25Q256_exit_xip+0xac>)
    aaca:	4798      	blx	r3
}
    aacc:	bf00      	nop
    aace:	3708      	adds	r7, #8
    aad0:	46bd      	mov	sp, r7
    aad2:	bd80      	pop	{r7, pc}
    aad4:	0000a9a9 	.word	0x0000a9a9
    aad8:	0000a9c9 	.word	0x0000a9c9
    aadc:	0000aa01 	.word	0x0000aa01
    aae0:	00001c99 	.word	0x00001c99
    aae4:	00000eb9 	.word	0x00000eb9

0000aae8 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    aae8:	b598      	push	{r3, r4, r7, lr}
    aaea:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    aaec:	4806      	ldr	r0, [pc, #24]	; (ab08 <spi_nor_flash_init+0x20>)
    aaee:	4b07      	ldr	r3, [pc, #28]	; (ab0c <spi_nor_flash_init+0x24>)
    aaf0:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    aaf2:	2300      	movs	r3, #0
    aaf4:	4a06      	ldr	r2, [pc, #24]	; (ab10 <spi_nor_flash_init+0x28>)
    aaf6:	4904      	ldr	r1, [pc, #16]	; (ab08 <spi_nor_flash_init+0x20>)
    aaf8:	4806      	ldr	r0, [pc, #24]	; (ab14 <spi_nor_flash_init+0x2c>)
    aafa:	4c07      	ldr	r4, [pc, #28]	; (ab18 <spi_nor_flash_init+0x30>)
    aafc:	47a0      	blx	r4
    aafe:	4602      	mov	r2, r0
    ab00:	4b06      	ldr	r3, [pc, #24]	; (ab1c <spi_nor_flash_init+0x34>)
    ab02:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    ab04:	bf00      	nop
    ab06:	bd98      	pop	{r3, r4, r7, pc}
    ab08:	20001b20 	.word	0x20001b20
    ab0c:	00001fdd 	.word	0x00001fdd
    ab10:	0000aa39 	.word	0x0000aa39
    ab14:	200010b4 	.word	0x200010b4
    ab18:	0000af55 	.word	0x0000af55
    ab1c:	20001d00 	.word	0x20001d00

0000ab20 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    ab20:	b580      	push	{r7, lr}
    ab22:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    ab24:	4805      	ldr	r0, [pc, #20]	; (ab3c <cdc_device_acm_init+0x1c>)
    ab26:	4b06      	ldr	r3, [pc, #24]	; (ab40 <cdc_device_acm_init+0x20>)
    ab28:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    ab2a:	4b06      	ldr	r3, [pc, #24]	; (ab44 <cdc_device_acm_init+0x24>)
    ab2c:	4798      	blx	r3

	usbdc_start(single_desc);
    ab2e:	4806      	ldr	r0, [pc, #24]	; (ab48 <cdc_device_acm_init+0x28>)
    ab30:	4b06      	ldr	r3, [pc, #24]	; (ab4c <cdc_device_acm_init+0x2c>)
    ab32:	4798      	blx	r3
	usbdc_attach();
    ab34:	4b06      	ldr	r3, [pc, #24]	; (ab50 <cdc_device_acm_init+0x30>)
    ab36:	4798      	blx	r3
}
    ab38:	bf00      	nop
    ab3a:	bd80      	pop	{r7, pc}
    ab3c:	20001104 	.word	0x20001104
    ab40:	0000c541 	.word	0x0000c541
    ab44:	0000b8f5 	.word	0x0000b8f5
    ab48:	200001d0 	.word	0x200001d0
    ab4c:	0000c5dd 	.word	0x0000c5dd
    ab50:	0000c62d 	.word	0x0000c62d

0000ab54 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    ab54:	b580      	push	{r7, lr}
    ab56:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    ab58:	4b01      	ldr	r3, [pc, #4]	; (ab60 <usb_init+0xc>)
    ab5a:	4798      	blx	r3
}
    ab5c:	bf00      	nop
    ab5e:	bd80      	pop	{r7, pc}
    ab60:	0000ab21 	.word	0x0000ab21

0000ab64 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    ab64:	b480      	push	{r7}
    ab66:	b085      	sub	sp, #20
    ab68:	af00      	add	r7, sp, #0
    ab6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    ab6c:	f3ef 8310 	mrs	r3, PRIMASK
    ab70:	60fb      	str	r3, [r7, #12]
  return(result);
    ab72:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    ab74:	687b      	ldr	r3, [r7, #4]
    ab76:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    ab78:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    ab7a:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    ab7e:	bf00      	nop
    ab80:	3714      	adds	r7, #20
    ab82:	46bd      	mov	sp, r7
    ab84:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab88:	4770      	bx	lr

0000ab8a <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    ab8a:	b480      	push	{r7}
    ab8c:	b085      	sub	sp, #20
    ab8e:	af00      	add	r7, sp, #0
    ab90:	6078      	str	r0, [r7, #4]
    ab92:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    ab96:	687b      	ldr	r3, [r7, #4]
    ab98:	681b      	ldr	r3, [r3, #0]
    ab9a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    ab9c:	68fb      	ldr	r3, [r7, #12]
    ab9e:	f383 8810 	msr	PRIMASK, r3
}
    aba2:	bf00      	nop
    aba4:	3714      	adds	r7, #20
    aba6:	46bd      	mov	sp, r7
    aba8:	f85d 7b04 	ldr.w	r7, [sp], #4
    abac:	4770      	bx	lr
	...

0000abb0 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    abb0:	b580      	push	{r7, lr}
    abb2:	b08c      	sub	sp, #48	; 0x30
    abb4:	af00      	add	r7, sp, #0
    abb6:	6078      	str	r0, [r7, #4]
    abb8:	460b      	mov	r3, r1
    abba:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    abbc:	687b      	ldr	r3, [r7, #4]
    abbe:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    abc0:	687b      	ldr	r3, [r7, #4]
    abc2:	681b      	ldr	r3, [r3, #0]
    abc4:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    abc6:	f107 030c 	add.w	r3, r7, #12
    abca:	2200      	movs	r2, #0
    abcc:	601a      	str	r2, [r3, #0]
    abce:	605a      	str	r2, [r3, #4]
    abd0:	609a      	str	r2, [r3, #8]
    abd2:	60da      	str	r2, [r3, #12]
    abd4:	611a      	str	r2, [r3, #16]
    abd6:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    abd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    abda:	7b1b      	ldrb	r3, [r3, #12]
    abdc:	2b00      	cmp	r3, #0
    abde:	d001      	beq.n	abe4 <n25q256a_xip_confirm+0x34>
    abe0:	2206      	movs	r2, #6
    abe2:	e000      	b.n	abe6 <n25q256a_xip_confirm+0x36>
    abe4:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    abe6:	7b3b      	ldrb	r3, [r7, #12]
    abe8:	f362 0302 	bfi	r3, r2, #0, #3
    abec:	733b      	strb	r3, [r7, #12]
    abee:	7b3b      	ldrb	r3, [r7, #12]
    abf0:	f043 0310 	orr.w	r3, r3, #16
    abf4:	733b      	strb	r3, [r7, #12]
    abf6:	7b3b      	ldrb	r3, [r7, #12]
    abf8:	f043 0320 	orr.w	r3, r3, #32
    abfc:	733b      	strb	r3, [r7, #12]
    abfe:	7b3b      	ldrb	r3, [r7, #12]
    ac00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ac04:	733b      	strb	r3, [r7, #12]
    ac06:	7b3b      	ldrb	r3, [r7, #12]
    ac08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ac0c:	733b      	strb	r3, [r7, #12]
    ac0e:	7b7b      	ldrb	r3, [r7, #13]
    ac10:	f043 0303 	orr.w	r3, r3, #3
    ac14:	737b      	strb	r3, [r7, #13]
    ac16:	7b7b      	ldrb	r3, [r7, #13]
    ac18:	2201      	movs	r2, #1
    ac1a:	f362 1305 	bfi	r3, r2, #4, #2
    ac1e:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    ac20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ac22:	7b1b      	ldrb	r3, [r3, #12]
    ac24:	2b00      	cmp	r3, #0
    ac26:	d001      	beq.n	ac2c <n25q256a_xip_confirm+0x7c>
    ac28:	2208      	movs	r2, #8
    ac2a:	e000      	b.n	ac2e <n25q256a_xip_confirm+0x7e>
    ac2c:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    ac2e:	7bbb      	ldrb	r3, [r7, #14]
    ac30:	f362 0304 	bfi	r3, r2, #0, #5
    ac34:	73bb      	strb	r3, [r7, #14]
    ac36:	230b      	movs	r3, #11
    ac38:	743b      	strb	r3, [r7, #16]
    ac3a:	78fb      	ldrb	r3, [r7, #3]
    ac3c:	2b00      	cmp	r3, #0
    ac3e:	d001      	beq.n	ac44 <n25q256a_xip_confirm+0x94>
    ac40:	2300      	movs	r3, #0
    ac42:	e000      	b.n	ac46 <n25q256a_xip_confirm+0x96>
    ac44:	23ff      	movs	r3, #255	; 0xff
    ac46:	747b      	strb	r3, [r7, #17]
    ac48:	2301      	movs	r3, #1
    ac4a:	61bb      	str	r3, [r7, #24]
    ac4c:	f107 0327 	add.w	r3, r7, #39	; 0x27
    ac50:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    ac52:	f107 030c 	add.w	r3, r7, #12
    ac56:	4619      	mov	r1, r3
    ac58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ac5a:	4b07      	ldr	r3, [pc, #28]	; (ac78 <n25q256a_xip_confirm+0xc8>)
    ac5c:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    ac5e:	78fb      	ldrb	r3, [r7, #3]
    ac60:	2b00      	cmp	r3, #0
    ac62:	d001      	beq.n	ac68 <n25q256a_xip_confirm+0xb8>
    ac64:	2202      	movs	r2, #2
    ac66:	e000      	b.n	ac6a <n25q256a_xip_confirm+0xba>
    ac68:	2201      	movs	r2, #1
    ac6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ac6c:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    ac6e:	2300      	movs	r3, #0
}
    ac70:	4618      	mov	r0, r3
    ac72:	3730      	adds	r7, #48	; 0x30
    ac74:	46bd      	mov	sp, r7
    ac76:	bd80      	pop	{r7, pc}
    ac78:	00002055 	.word	0x00002055

0000ac7c <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    ac7c:	b580      	push	{r7, lr}
    ac7e:	b08c      	sub	sp, #48	; 0x30
    ac80:	af00      	add	r7, sp, #0
    ac82:	6078      	str	r0, [r7, #4]
    ac84:	460b      	mov	r3, r1
    ac86:	70fb      	strb	r3, [r7, #3]
    ac88:	4613      	mov	r3, r2
    ac8a:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    ac8c:	2300      	movs	r3, #0
    ac8e:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    ac90:	687b      	ldr	r3, [r7, #4]
    ac92:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    ac94:	687b      	ldr	r3, [r7, #4]
    ac96:	681b      	ldr	r3, [r3, #0]
    ac98:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    ac9a:	f107 030c 	add.w	r3, r7, #12
    ac9e:	2200      	movs	r2, #0
    aca0:	601a      	str	r2, [r3, #0]
    aca2:	605a      	str	r2, [r3, #4]
    aca4:	609a      	str	r2, [r3, #8]
    aca6:	60da      	str	r2, [r3, #12]
    aca8:	611a      	str	r2, [r3, #16]
    acaa:	615a      	str	r2, [r3, #20]
    acac:	78fb      	ldrb	r3, [r7, #3]
    acae:	f003 0307 	and.w	r3, r3, #7
    acb2:	b2da      	uxtb	r2, r3
    acb4:	7b3b      	ldrb	r3, [r7, #12]
    acb6:	f362 0302 	bfi	r3, r2, #0, #3
    acba:	733b      	strb	r3, [r7, #12]
    acbc:	7b3b      	ldrb	r3, [r7, #12]
    acbe:	f043 0310 	orr.w	r3, r3, #16
    acc2:	733b      	strb	r3, [r7, #12]
    acc4:	7b3b      	ldrb	r3, [r7, #12]
    acc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    acca:	733b      	strb	r3, [r7, #12]
    accc:	78bb      	ldrb	r3, [r7, #2]
    acce:	743b      	strb	r3, [r7, #16]
    acd0:	2301      	movs	r3, #1
    acd2:	61bb      	str	r3, [r7, #24]
    acd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
    acd8:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    acda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    acdc:	7b5b      	ldrb	r3, [r3, #13]
    acde:	2b00      	cmp	r3, #0
    ace0:	d003      	beq.n	acea <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    ace2:	2100      	movs	r1, #0
    ace4:	6878      	ldr	r0, [r7, #4]
    ace6:	4b0a      	ldr	r3, [pc, #40]	; (ad10 <n25q256a_read_reg+0x94>)
    ace8:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    acea:	f107 030c 	add.w	r3, r7, #12
    acee:	4619      	mov	r1, r3
    acf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    acf2:	4b08      	ldr	r3, [pc, #32]	; (ad14 <n25q256a_read_reg+0x98>)
    acf4:	4798      	blx	r3
	if (n25q->xip_mode) {
    acf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    acf8:	7b5b      	ldrb	r3, [r3, #13]
    acfa:	2b00      	cmp	r3, #0
    acfc:	d003      	beq.n	ad06 <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    acfe:	2101      	movs	r1, #1
    ad00:	6878      	ldr	r0, [r7, #4]
    ad02:	4b03      	ldr	r3, [pc, #12]	; (ad10 <n25q256a_read_reg+0x94>)
    ad04:	4798      	blx	r3
	}
	return status;
    ad06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    ad08:	4618      	mov	r0, r3
    ad0a:	3730      	adds	r7, #48	; 0x30
    ad0c:	46bd      	mov	sp, r7
    ad0e:	bd80      	pop	{r7, pc}
    ad10:	0000abb1 	.word	0x0000abb1
    ad14:	00002055 	.word	0x00002055

0000ad18 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    ad18:	b580      	push	{r7, lr}
    ad1a:	b08c      	sub	sp, #48	; 0x30
    ad1c:	af00      	add	r7, sp, #0
    ad1e:	60f8      	str	r0, [r7, #12]
    ad20:	607b      	str	r3, [r7, #4]
    ad22:	460b      	mov	r3, r1
    ad24:	72fb      	strb	r3, [r7, #11]
    ad26:	4613      	mov	r3, r2
    ad28:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    ad2a:	68fb      	ldr	r3, [r7, #12]
    ad2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    ad2e:	68fb      	ldr	r3, [r7, #12]
    ad30:	681b      	ldr	r3, [r3, #0]
    ad32:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    ad34:	f107 0310 	add.w	r3, r7, #16
    ad38:	2200      	movs	r2, #0
    ad3a:	601a      	str	r2, [r3, #0]
    ad3c:	605a      	str	r2, [r3, #4]
    ad3e:	609a      	str	r2, [r3, #8]
    ad40:	60da      	str	r2, [r3, #12]
    ad42:	611a      	str	r2, [r3, #16]
    ad44:	615a      	str	r2, [r3, #20]
    ad46:	7afb      	ldrb	r3, [r7, #11]
    ad48:	f003 0307 	and.w	r3, r3, #7
    ad4c:	b2da      	uxtb	r2, r3
    ad4e:	7c3b      	ldrb	r3, [r7, #16]
    ad50:	f362 0302 	bfi	r3, r2, #0, #3
    ad54:	743b      	strb	r3, [r7, #16]
    ad56:	7c3b      	ldrb	r3, [r7, #16]
    ad58:	f043 0310 	orr.w	r3, r3, #16
    ad5c:	743b      	strb	r3, [r7, #16]
    ad5e:	7c3b      	ldrb	r3, [r7, #16]
    ad60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ad64:	743b      	strb	r3, [r7, #16]
    ad66:	7c7b      	ldrb	r3, [r7, #17]
    ad68:	2202      	movs	r2, #2
    ad6a:	f362 1305 	bfi	r3, r2, #4, #2
    ad6e:	747b      	strb	r3, [r7, #17]
    ad70:	7abb      	ldrb	r3, [r7, #10]
    ad72:	753b      	strb	r3, [r7, #20]
    ad74:	2301      	movs	r3, #1
    ad76:	61fb      	str	r3, [r7, #28]
    ad78:	1d3b      	adds	r3, r7, #4
    ad7a:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    ad7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ad7e:	7b5b      	ldrb	r3, [r3, #13]
    ad80:	2b00      	cmp	r3, #0
    ad82:	d003      	beq.n	ad8c <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    ad84:	2100      	movs	r1, #0
    ad86:	68f8      	ldr	r0, [r7, #12]
    ad88:	4b09      	ldr	r3, [pc, #36]	; (adb0 <n25q256a_write_reg+0x98>)
    ad8a:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    ad8c:	f107 0310 	add.w	r3, r7, #16
    ad90:	4619      	mov	r1, r3
    ad92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ad94:	4b07      	ldr	r3, [pc, #28]	; (adb4 <n25q256a_write_reg+0x9c>)
    ad96:	4798      	blx	r3
	if (n25q->xip_mode) {
    ad98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ad9a:	7b5b      	ldrb	r3, [r3, #13]
    ad9c:	2b00      	cmp	r3, #0
    ad9e:	d003      	beq.n	ada8 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    ada0:	2101      	movs	r1, #1
    ada2:	68f8      	ldr	r0, [r7, #12]
    ada4:	4b02      	ldr	r3, [pc, #8]	; (adb0 <n25q256a_write_reg+0x98>)
    ada6:	4798      	blx	r3
	}
}
    ada8:	bf00      	nop
    adaa:	3730      	adds	r7, #48	; 0x30
    adac:	46bd      	mov	sp, r7
    adae:	bd80      	pop	{r7, pc}
    adb0:	0000abb1 	.word	0x0000abb1
    adb4:	00002055 	.word	0x00002055

0000adb8 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    adb8:	b580      	push	{r7, lr}
    adba:	b090      	sub	sp, #64	; 0x40
    adbc:	af00      	add	r7, sp, #0
    adbe:	6078      	str	r0, [r7, #4]
    adc0:	460b      	mov	r3, r1
    adc2:	70fb      	strb	r3, [r7, #3]
    adc4:	4613      	mov	r3, r2
    adc6:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    adc8:	687b      	ldr	r3, [r7, #4]
    adca:	681b      	ldr	r3, [r3, #0]
    adcc:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    adce:	78bb      	ldrb	r3, [r7, #2]
    add0:	2b00      	cmp	r3, #0
    add2:	d001      	beq.n	add8 <n25q256a_write_enable+0x20>
    add4:	2306      	movs	r3, #6
    add6:	e000      	b.n	adda <n25q256a_write_enable+0x22>
    add8:	2304      	movs	r3, #4
    adda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    adde:	f107 0320 	add.w	r3, r7, #32
    ade2:	2200      	movs	r2, #0
    ade4:	601a      	str	r2, [r3, #0]
    ade6:	605a      	str	r2, [r3, #4]
    ade8:	609a      	str	r2, [r3, #8]
    adea:	60da      	str	r2, [r3, #12]
    adec:	611a      	str	r2, [r3, #16]
    adee:	615a      	str	r2, [r3, #20]
    adf0:	78fb      	ldrb	r3, [r7, #3]
    adf2:	f003 0307 	and.w	r3, r3, #7
    adf6:	b2da      	uxtb	r2, r3
    adf8:	f897 3020 	ldrb.w	r3, [r7, #32]
    adfc:	f362 0302 	bfi	r3, r2, #0, #3
    ae00:	f887 3020 	strb.w	r3, [r7, #32]
    ae04:	f897 3020 	ldrb.w	r3, [r7, #32]
    ae08:	f043 0310 	orr.w	r3, r3, #16
    ae0c:	f887 3020 	strb.w	r3, [r7, #32]
    ae10:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    ae14:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    ae18:	f107 0308 	add.w	r3, r7, #8
    ae1c:	2200      	movs	r2, #0
    ae1e:	601a      	str	r2, [r3, #0]
    ae20:	605a      	str	r2, [r3, #4]
    ae22:	609a      	str	r2, [r3, #8]
    ae24:	60da      	str	r2, [r3, #12]
    ae26:	611a      	str	r2, [r3, #16]
    ae28:	615a      	str	r2, [r3, #20]
    ae2a:	78fb      	ldrb	r3, [r7, #3]
    ae2c:	f003 0307 	and.w	r3, r3, #7
    ae30:	b2da      	uxtb	r2, r3
    ae32:	7a3b      	ldrb	r3, [r7, #8]
    ae34:	f362 0302 	bfi	r3, r2, #0, #3
    ae38:	723b      	strb	r3, [r7, #8]
    ae3a:	7a3b      	ldrb	r3, [r7, #8]
    ae3c:	f043 0310 	orr.w	r3, r3, #16
    ae40:	723b      	strb	r3, [r7, #8]
    ae42:	7a3b      	ldrb	r3, [r7, #8]
    ae44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ae48:	723b      	strb	r3, [r7, #8]
    ae4a:	2305      	movs	r3, #5
    ae4c:	733b      	strb	r3, [r7, #12]
    ae4e:	2301      	movs	r3, #1
    ae50:	617b      	str	r3, [r7, #20]
    ae52:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    ae56:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    ae58:	f107 0320 	add.w	r3, r7, #32
    ae5c:	4619      	mov	r1, r3
    ae5e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    ae60:	4b08      	ldr	r3, [pc, #32]	; (ae84 <n25q256a_write_enable+0xcc>)
    ae62:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    ae64:	f107 0308 	add.w	r3, r7, #8
    ae68:	4619      	mov	r1, r3
    ae6a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    ae6c:	4b05      	ldr	r3, [pc, #20]	; (ae84 <n25q256a_write_enable+0xcc>)
    ae6e:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    ae70:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    ae74:	f003 0302 	and.w	r3, r3, #2
    ae78:	2b00      	cmp	r3, #0
    ae7a:	d0ed      	beq.n	ae58 <n25q256a_write_enable+0xa0>
}
    ae7c:	bf00      	nop
    ae7e:	3740      	adds	r7, #64	; 0x40
    ae80:	46bd      	mov	sp, r7
    ae82:	bd80      	pop	{r7, pc}
    ae84:	00002055 	.word	0x00002055

0000ae88 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    ae88:	b590      	push	{r4, r7, lr}
    ae8a:	b087      	sub	sp, #28
    ae8c:	af00      	add	r7, sp, #0
    ae8e:	6078      	str	r0, [r7, #4]
    ae90:	460b      	mov	r3, r1
    ae92:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    ae94:	687b      	ldr	r3, [r7, #4]
    ae96:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    ae98:	68fb      	ldr	r3, [r7, #12]
    ae9a:	7b1b      	ldrb	r3, [r3, #12]
    ae9c:	2b00      	cmp	r3, #0
    ae9e:	d001      	beq.n	aea4 <n25q256a_switch_mode+0x1c>
    aea0:	2306      	movs	r3, #6
    aea2:	e000      	b.n	aea6 <n25q256a_switch_mode+0x1e>
    aea4:	2300      	movs	r3, #0
    aea6:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    aea8:	7afb      	ldrb	r3, [r7, #11]
    aeaa:	2265      	movs	r2, #101	; 0x65
    aeac:	4619      	mov	r1, r3
    aeae:	6878      	ldr	r0, [r7, #4]
    aeb0:	4b25      	ldr	r3, [pc, #148]	; (af48 <n25q256a_switch_mode+0xc0>)
    aeb2:	4798      	blx	r3
    aeb4:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    aeb6:	2300      	movs	r3, #0
    aeb8:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    aeba:	68fb      	ldr	r3, [r7, #12]
    aebc:	7b1b      	ldrb	r3, [r3, #12]
    aebe:	78fa      	ldrb	r2, [r7, #3]
    aec0:	429a      	cmp	r2, r3
    aec2:	d03d      	beq.n	af40 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    aec4:	78fb      	ldrb	r3, [r7, #3]
    aec6:	2b00      	cmp	r3, #0
    aec8:	d00b      	beq.n	aee2 <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    aeca:	697b      	ldr	r3, [r7, #20]
    aecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
    aed0:	2b00      	cmp	r3, #0
    aed2:	d011      	beq.n	aef8 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    aed4:	697b      	ldr	r3, [r7, #20]
    aed6:	f003 031f 	and.w	r3, r3, #31
    aeda:	617b      	str	r3, [r7, #20]
			modify = 1;
    aedc:	2301      	movs	r3, #1
    aede:	74fb      	strb	r3, [r7, #19]
    aee0:	e00a      	b.n	aef8 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    aee2:	697b      	ldr	r3, [r7, #20]
    aee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    aee8:	2b00      	cmp	r3, #0
    aeea:	d105      	bne.n	aef8 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    aeec:	697b      	ldr	r3, [r7, #20]
    aeee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    aef2:	617b      	str	r3, [r7, #20]
			modify = 1;
    aef4:	2301      	movs	r3, #1
    aef6:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    aef8:	7cfb      	ldrb	r3, [r7, #19]
    aefa:	2b00      	cmp	r3, #0
    aefc:	d021      	beq.n	af42 <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    aefe:	68fb      	ldr	r3, [r7, #12]
    af00:	78fa      	ldrb	r2, [r7, #3]
    af02:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    af04:	7afb      	ldrb	r3, [r7, #11]
    af06:	2201      	movs	r2, #1
    af08:	4619      	mov	r1, r3
    af0a:	6878      	ldr	r0, [r7, #4]
    af0c:	4b0f      	ldr	r3, [pc, #60]	; (af4c <n25q256a_switch_mode+0xc4>)
    af0e:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    af10:	7af9      	ldrb	r1, [r7, #11]
    af12:	697b      	ldr	r3, [r7, #20]
    af14:	2261      	movs	r2, #97	; 0x61
    af16:	6878      	ldr	r0, [r7, #4]
    af18:	4c0d      	ldr	r4, [pc, #52]	; (af50 <n25q256a_switch_mode+0xc8>)
    af1a:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    af1c:	78fb      	ldrb	r3, [r7, #3]
    af1e:	2b00      	cmp	r3, #0
    af20:	d001      	beq.n	af26 <n25q256a_switch_mode+0x9e>
    af22:	2306      	movs	r3, #6
    af24:	e000      	b.n	af28 <n25q256a_switch_mode+0xa0>
    af26:	2300      	movs	r3, #0
    af28:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    af2a:	7afb      	ldrb	r3, [r7, #11]
    af2c:	2265      	movs	r2, #101	; 0x65
    af2e:	4619      	mov	r1, r3
    af30:	6878      	ldr	r0, [r7, #4]
    af32:	4b05      	ldr	r3, [pc, #20]	; (af48 <n25q256a_switch_mode+0xc0>)
    af34:	4798      	blx	r3
    af36:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    af38:	68fb      	ldr	r3, [r7, #12]
    af3a:	78fa      	ldrb	r2, [r7, #3]
    af3c:	731a      	strb	r2, [r3, #12]
    af3e:	e000      	b.n	af42 <n25q256a_switch_mode+0xba>
		return;
    af40:	bf00      	nop
	}
}
    af42:	371c      	adds	r7, #28
    af44:	46bd      	mov	sp, r7
    af46:	bd90      	pop	{r4, r7, pc}
    af48:	0000ac7d 	.word	0x0000ac7d
    af4c:	0000adb9 	.word	0x0000adb9
    af50:	0000ad19 	.word	0x0000ad19

0000af54 <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    af54:	b580      	push	{r7, lr}
    af56:	b086      	sub	sp, #24
    af58:	af00      	add	r7, sp, #0
    af5a:	60f8      	str	r0, [r7, #12]
    af5c:	60b9      	str	r1, [r7, #8]
    af5e:	607a      	str	r2, [r7, #4]
    af60:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    af62:	68fb      	ldr	r3, [r7, #12]
    af64:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    af66:	4a0c      	ldr	r2, [pc, #48]	; (af98 <n25q256a_construct+0x44>)
    af68:	68b9      	ldr	r1, [r7, #8]
    af6a:	68f8      	ldr	r0, [r7, #12]
    af6c:	4b0b      	ldr	r3, [pc, #44]	; (af9c <n25q256a_construct+0x48>)
    af6e:	4798      	blx	r3
	n25q->quad_mode    = 0;
    af70:	697b      	ldr	r3, [r7, #20]
    af72:	2200      	movs	r2, #0
    af74:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    af76:	697b      	ldr	r3, [r7, #20]
    af78:	2200      	movs	r2, #0
    af7a:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    af7c:	697b      	ldr	r3, [r7, #20]
    af7e:	687a      	ldr	r2, [r7, #4]
    af80:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    af82:	78fb      	ldrb	r3, [r7, #3]
    af84:	4619      	mov	r1, r3
    af86:	68f8      	ldr	r0, [r7, #12]
    af88:	4b05      	ldr	r3, [pc, #20]	; (afa0 <n25q256a_construct+0x4c>)
    af8a:	4798      	blx	r3
	return me;
    af8c:	68fb      	ldr	r3, [r7, #12]
}
    af8e:	4618      	mov	r0, r3
    af90:	3718      	adds	r7, #24
    af92:	46bd      	mov	sp, r7
    af94:	bd80      	pop	{r7, pc}
    af96:	bf00      	nop
    af98:	000134b4 	.word	0x000134b4
    af9c:	0000b431 	.word	0x0000b431
    afa0:	0000ae89 	.word	0x0000ae89

0000afa4 <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    afa4:	b580      	push	{r7, lr}
    afa6:	b08c      	sub	sp, #48	; 0x30
    afa8:	af00      	add	r7, sp, #0
    afaa:	60f8      	str	r0, [r7, #12]
    afac:	60b9      	str	r1, [r7, #8]
    afae:	607a      	str	r2, [r7, #4]
    afb0:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    afb2:	68fb      	ldr	r3, [r7, #12]
    afb4:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    afb6:	68fb      	ldr	r3, [r7, #12]
    afb8:	681b      	ldr	r3, [r3, #0]
    afba:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    afbc:	f107 0310 	add.w	r3, r7, #16
    afc0:	2200      	movs	r2, #0
    afc2:	601a      	str	r2, [r3, #0]
    afc4:	605a      	str	r2, [r3, #4]
    afc6:	609a      	str	r2, [r3, #8]
    afc8:	60da      	str	r2, [r3, #12]
    afca:	611a      	str	r2, [r3, #16]
    afcc:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    afce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    afd0:	7b1b      	ldrb	r3, [r3, #12]
    afd2:	2b00      	cmp	r3, #0
    afd4:	d001      	beq.n	afda <n25q256a_read+0x36>
    afd6:	2206      	movs	r2, #6
    afd8:	e000      	b.n	afdc <n25q256a_read+0x38>
    afda:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    afdc:	7c3b      	ldrb	r3, [r7, #16]
    afde:	f362 0302 	bfi	r3, r2, #0, #3
    afe2:	743b      	strb	r3, [r7, #16]
    afe4:	7c3b      	ldrb	r3, [r7, #16]
    afe6:	f043 0310 	orr.w	r3, r3, #16
    afea:	743b      	strb	r3, [r7, #16]
    afec:	7c3b      	ldrb	r3, [r7, #16]
    afee:	f043 0320 	orr.w	r3, r3, #32
    aff2:	743b      	strb	r3, [r7, #16]
    aff4:	7c3b      	ldrb	r3, [r7, #16]
    aff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    affa:	743b      	strb	r3, [r7, #16]
    affc:	7c7b      	ldrb	r3, [r7, #17]
    affe:	2201      	movs	r2, #1
    b000:	f362 1305 	bfi	r3, r2, #4, #2
    b004:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    b006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b008:	7b1b      	ldrb	r3, [r3, #12]
    b00a:	2b00      	cmp	r3, #0
    b00c:	d001      	beq.n	b012 <n25q256a_read+0x6e>
    b00e:	220a      	movs	r2, #10
    b010:	e000      	b.n	b014 <n25q256a_read+0x70>
    b012:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    b014:	7cbb      	ldrb	r3, [r7, #18]
    b016:	f362 0304 	bfi	r3, r2, #0, #5
    b01a:	74bb      	strb	r3, [r7, #18]
    b01c:	230b      	movs	r3, #11
    b01e:	753b      	strb	r3, [r7, #20]
    b020:	687b      	ldr	r3, [r7, #4]
    b022:	61bb      	str	r3, [r7, #24]
    b024:	683b      	ldr	r3, [r7, #0]
    b026:	61fb      	str	r3, [r7, #28]
    b028:	68bb      	ldr	r3, [r7, #8]
    b02a:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    b02c:	f107 0310 	add.w	r3, r7, #16
    b030:	4619      	mov	r1, r3
    b032:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b034:	4b03      	ldr	r3, [pc, #12]	; (b044 <n25q256a_read+0xa0>)
    b036:	4798      	blx	r3
	return ERR_NONE;
    b038:	2300      	movs	r3, #0
}
    b03a:	4618      	mov	r0, r3
    b03c:	3730      	adds	r7, #48	; 0x30
    b03e:	46bd      	mov	sp, r7
    b040:	bd80      	pop	{r7, pc}
    b042:	bf00      	nop
    b044:	00002055 	.word	0x00002055

0000b048 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    b048:	b580      	push	{r7, lr}
    b04a:	b08c      	sub	sp, #48	; 0x30
    b04c:	af00      	add	r7, sp, #0
    b04e:	60f8      	str	r0, [r7, #12]
    b050:	60b9      	str	r1, [r7, #8]
    b052:	607a      	str	r2, [r7, #4]
    b054:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b056:	68fb      	ldr	r3, [r7, #12]
    b058:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b05a:	68fb      	ldr	r3, [r7, #12]
    b05c:	681b      	ldr	r3, [r3, #0]
    b05e:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    b060:	f107 0310 	add.w	r3, r7, #16
    b064:	2200      	movs	r2, #0
    b066:	601a      	str	r2, [r3, #0]
    b068:	605a      	str	r2, [r3, #4]
    b06a:	609a      	str	r2, [r3, #8]
    b06c:	60da      	str	r2, [r3, #12]
    b06e:	611a      	str	r2, [r3, #16]
    b070:	615a      	str	r2, [r3, #20]
    b072:	7c3b      	ldrb	r3, [r7, #16]
    b074:	f043 0310 	orr.w	r3, r3, #16
    b078:	743b      	strb	r3, [r7, #16]
    b07a:	7c3b      	ldrb	r3, [r7, #16]
    b07c:	f043 0320 	orr.w	r3, r3, #32
    b080:	743b      	strb	r3, [r7, #16]
    b082:	7c3b      	ldrb	r3, [r7, #16]
    b084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b088:	743b      	strb	r3, [r7, #16]
    b08a:	7c7b      	ldrb	r3, [r7, #17]
    b08c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    b090:	747b      	strb	r3, [r7, #17]
    b092:	2302      	movs	r3, #2
    b094:	753b      	strb	r3, [r7, #20]
    b096:	687b      	ldr	r3, [r7, #4]
    b098:	61bb      	str	r3, [r7, #24]
    b09a:	683b      	ldr	r3, [r7, #0]
    b09c:	61fb      	str	r3, [r7, #28]
    b09e:	68bb      	ldr	r3, [r7, #8]
    b0a0:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b0a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b0a4:	7b1b      	ldrb	r3, [r3, #12]
    b0a6:	2b00      	cmp	r3, #0
    b0a8:	d001      	beq.n	b0ae <n25q256a_write+0x66>
    b0aa:	2206      	movs	r2, #6
    b0ac:	e000      	b.n	b0b0 <n25q256a_write+0x68>
    b0ae:	2200      	movs	r2, #0
    b0b0:	7c3b      	ldrb	r3, [r7, #16]
    b0b2:	f362 0302 	bfi	r3, r2, #0, #3
    b0b6:	743b      	strb	r3, [r7, #16]
	while (length) {
    b0b8:	e035      	b.n	b126 <n25q256a_write+0xde>
		cmd.address = address;
    b0ba:	687b      	ldr	r3, [r7, #4]
    b0bc:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    b0be:	683b      	ldr	r3, [r7, #0]
    b0c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    b0c4:	d802      	bhi.n	b0cc <n25q256a_write+0x84>
			cmd.buf_len = length;
    b0c6:	683b      	ldr	r3, [r7, #0]
    b0c8:	61fb      	str	r3, [r7, #28]
    b0ca:	e002      	b.n	b0d2 <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    b0cc:	f44f 7380 	mov.w	r3, #256	; 0x100
    b0d0:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b0d2:	7c3b      	ldrb	r3, [r7, #16]
    b0d4:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b0d8:	b2db      	uxtb	r3, r3
    b0da:	2201      	movs	r2, #1
    b0dc:	4619      	mov	r1, r3
    b0de:	68f8      	ldr	r0, [r7, #12]
    b0e0:	4b19      	ldr	r3, [pc, #100]	; (b148 <n25q256a_write+0x100>)
    b0e2:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    b0e4:	f107 0310 	add.w	r3, r7, #16
    b0e8:	4619      	mov	r1, r3
    b0ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b0ec:	4b17      	ldr	r3, [pc, #92]	; (b14c <n25q256a_write+0x104>)
    b0ee:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b0f0:	bf00      	nop
    b0f2:	7c3b      	ldrb	r3, [r7, #16]
    b0f4:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b0f8:	b2db      	uxtb	r3, r3
    b0fa:	2270      	movs	r2, #112	; 0x70
    b0fc:	4619      	mov	r1, r3
    b0fe:	68f8      	ldr	r0, [r7, #12]
    b100:	4b13      	ldr	r3, [pc, #76]	; (b150 <n25q256a_write+0x108>)
    b102:	4798      	blx	r3
    b104:	4603      	mov	r3, r0
    b106:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b10a:	2b00      	cmp	r3, #0
    b10c:	d0f1      	beq.n	b0f2 <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    b10e:	6a3a      	ldr	r2, [r7, #32]
    b110:	69fb      	ldr	r3, [r7, #28]
    b112:	4413      	add	r3, r2
    b114:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    b116:	69fb      	ldr	r3, [r7, #28]
    b118:	683a      	ldr	r2, [r7, #0]
    b11a:	1ad3      	subs	r3, r2, r3
    b11c:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    b11e:	69fb      	ldr	r3, [r7, #28]
    b120:	687a      	ldr	r2, [r7, #4]
    b122:	4413      	add	r3, r2
    b124:	607b      	str	r3, [r7, #4]
	while (length) {
    b126:	683b      	ldr	r3, [r7, #0]
    b128:	2b00      	cmp	r3, #0
    b12a:	d1c6      	bne.n	b0ba <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    b12c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b12e:	7b5b      	ldrb	r3, [r3, #13]
    b130:	2b00      	cmp	r3, #0
    b132:	d003      	beq.n	b13c <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    b134:	2101      	movs	r1, #1
    b136:	68f8      	ldr	r0, [r7, #12]
    b138:	4b06      	ldr	r3, [pc, #24]	; (b154 <n25q256a_write+0x10c>)
    b13a:	4798      	blx	r3
	}
	return ERR_NONE;
    b13c:	2300      	movs	r3, #0
}
    b13e:	4618      	mov	r0, r3
    b140:	3730      	adds	r7, #48	; 0x30
    b142:	46bd      	mov	sp, r7
    b144:	bd80      	pop	{r7, pc}
    b146:	bf00      	nop
    b148:	0000adb9 	.word	0x0000adb9
    b14c:	00002055 	.word	0x00002055
    b150:	0000ac7d 	.word	0x0000ac7d
    b154:	0000abb1 	.word	0x0000abb1

0000b158 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    b158:	b580      	push	{r7, lr}
    b15a:	b090      	sub	sp, #64	; 0x40
    b15c:	af00      	add	r7, sp, #0
    b15e:	60f8      	str	r0, [r7, #12]
    b160:	60b9      	str	r1, [r7, #8]
    b162:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b164:	68fb      	ldr	r3, [r7, #12]
    b166:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b168:	68fb      	ldr	r3, [r7, #12]
    b16a:	681b      	ldr	r3, [r3, #0]
    b16c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    b16e:	f107 0314 	add.w	r3, r7, #20
    b172:	2200      	movs	r2, #0
    b174:	601a      	str	r2, [r3, #0]
    b176:	605a      	str	r2, [r3, #4]
    b178:	609a      	str	r2, [r3, #8]
    b17a:	60da      	str	r2, [r3, #12]
    b17c:	611a      	str	r2, [r3, #16]
    b17e:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    b180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b182:	7b1b      	ldrb	r3, [r3, #12]
    b184:	2b00      	cmp	r3, #0
    b186:	d001      	beq.n	b18c <n25q256a_erase+0x34>
    b188:	2206      	movs	r2, #6
    b18a:	e000      	b.n	b18e <n25q256a_erase+0x36>
    b18c:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    b18e:	7d3b      	ldrb	r3, [r7, #20]
    b190:	f362 0302 	bfi	r3, r2, #0, #3
    b194:	753b      	strb	r3, [r7, #20]
    b196:	7d3b      	ldrb	r3, [r7, #20]
    b198:	f043 0310 	orr.w	r3, r3, #16
    b19c:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    b19e:	687b      	ldr	r3, [r7, #4]
    b1a0:	4a56      	ldr	r2, [pc, #344]	; (b2fc <n25q256a_erase+0x1a4>)
    b1a2:	4293      	cmp	r3, r2
    b1a4:	bf94      	ite	ls
    b1a6:	2301      	movls	r3, #1
    b1a8:	2300      	movhi	r3, #0
    b1aa:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    b1ac:	7d3b      	ldrb	r3, [r7, #20]
    b1ae:	f362 1345 	bfi	r3, r2, #5, #1
    b1b2:	753b      	strb	r3, [r7, #20]
    b1b4:	7d7b      	ldrb	r3, [r7, #21]
    b1b6:	2202      	movs	r2, #2
    b1b8:	f362 1305 	bfi	r3, r2, #4, #2
    b1bc:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    b1be:	68bb      	ldr	r3, [r7, #8]
    b1c0:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    b1c2:	687b      	ldr	r3, [r7, #4]
    b1c4:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    b1c6:	2300      	movs	r3, #0
    b1c8:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    b1ca:	687b      	ldr	r3, [r7, #4]
    b1cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
    b1d0:	2b00      	cmp	r3, #0
    b1d2:	d104      	bne.n	b1de <n25q256a_erase+0x86>
    b1d4:	68bb      	ldr	r3, [r7, #8]
    b1d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
    b1da:	2b00      	cmp	r3, #0
    b1dc:	d002      	beq.n	b1e4 <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    b1de:	f06f 030c 	mvn.w	r3, #12
    b1e2:	e087      	b.n	b2f4 <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    b1e4:	687b      	ldr	r3, [r7, #4]
    b1e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    b1ea:	d368      	bcc.n	b2be <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    b1ec:	23c7      	movs	r3, #199	; 0xc7
    b1ee:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b1f0:	7d3b      	ldrb	r3, [r7, #20]
    b1f2:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b1f6:	b2db      	uxtb	r3, r3
    b1f8:	2201      	movs	r2, #1
    b1fa:	4619      	mov	r1, r3
    b1fc:	68f8      	ldr	r0, [r7, #12]
    b1fe:	4b40      	ldr	r3, [pc, #256]	; (b300 <n25q256a_erase+0x1a8>)
    b200:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    b202:	f107 0314 	add.w	r3, r7, #20
    b206:	4619      	mov	r1, r3
    b208:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b20a:	4b3e      	ldr	r3, [pc, #248]	; (b304 <n25q256a_erase+0x1ac>)
    b20c:	4798      	blx	r3
    b20e:	e059      	b.n	b2c4 <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    b210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b212:	b29b      	uxth	r3, r3
    b214:	2b00      	cmp	r3, #0
    b216:	d11f      	bne.n	b258 <n25q256a_erase+0x100>
    b218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b21a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    b21e:	d31b      	bcc.n	b258 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    b220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b222:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    b224:	23d8      	movs	r3, #216	; 0xd8
    b226:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b228:	7d3b      	ldrb	r3, [r7, #20]
    b22a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b22e:	b2db      	uxtb	r3, r3
    b230:	2201      	movs	r2, #1
    b232:	4619      	mov	r1, r3
    b234:	68f8      	ldr	r0, [r7, #12]
    b236:	4b32      	ldr	r3, [pc, #200]	; (b300 <n25q256a_erase+0x1a8>)
    b238:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    b23a:	f107 0314 	add.w	r3, r7, #20
    b23e:	4619      	mov	r1, r3
    b240:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b242:	4b30      	ldr	r3, [pc, #192]	; (b304 <n25q256a_erase+0x1ac>)
    b244:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    b246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b248:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    b24c:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    b24e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b250:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    b254:	63bb      	str	r3, [r7, #56]	; 0x38
    b256:	e023      	b.n	b2a0 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    b258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b25a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    b25e:	d31b      	bcc.n	b298 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    b260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b262:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    b264:	2320      	movs	r3, #32
    b266:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b268:	7d3b      	ldrb	r3, [r7, #20]
    b26a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b26e:	b2db      	uxtb	r3, r3
    b270:	2201      	movs	r2, #1
    b272:	4619      	mov	r1, r3
    b274:	68f8      	ldr	r0, [r7, #12]
    b276:	4b22      	ldr	r3, [pc, #136]	; (b300 <n25q256a_erase+0x1a8>)
    b278:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    b27a:	f107 0314 	add.w	r3, r7, #20
    b27e:	4619      	mov	r1, r3
    b280:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b282:	4b20      	ldr	r3, [pc, #128]	; (b304 <n25q256a_erase+0x1ac>)
    b284:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    b286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b288:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    b28c:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    b28e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b290:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    b294:	63bb      	str	r3, [r7, #56]	; 0x38
    b296:	e003      	b.n	b2a0 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    b298:	f06f 030c 	mvn.w	r3, #12
    b29c:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    b29e:	e011      	b.n	b2c4 <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b2a0:	bf00      	nop
    b2a2:	7d3b      	ldrb	r3, [r7, #20]
    b2a4:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b2a8:	b2db      	uxtb	r3, r3
    b2aa:	2270      	movs	r2, #112	; 0x70
    b2ac:	4619      	mov	r1, r3
    b2ae:	68f8      	ldr	r0, [r7, #12]
    b2b0:	4b15      	ldr	r3, [pc, #84]	; (b308 <n25q256a_erase+0x1b0>)
    b2b2:	4798      	blx	r3
    b2b4:	4603      	mov	r3, r0
    b2b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b2ba:	2b00      	cmp	r3, #0
    b2bc:	d0f1      	beq.n	b2a2 <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    b2be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b2c0:	2b00      	cmp	r3, #0
    b2c2:	d1a5      	bne.n	b210 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b2c4:	bf00      	nop
    b2c6:	7d3b      	ldrb	r3, [r7, #20]
    b2c8:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b2cc:	b2db      	uxtb	r3, r3
    b2ce:	2270      	movs	r2, #112	; 0x70
    b2d0:	4619      	mov	r1, r3
    b2d2:	68f8      	ldr	r0, [r7, #12]
    b2d4:	4b0c      	ldr	r3, [pc, #48]	; (b308 <n25q256a_erase+0x1b0>)
    b2d6:	4798      	blx	r3
    b2d8:	4603      	mov	r3, r0
    b2da:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b2de:	2b00      	cmp	r3, #0
    b2e0:	d0f1      	beq.n	b2c6 <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    b2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b2e4:	7b5b      	ldrb	r3, [r3, #13]
    b2e6:	2b00      	cmp	r3, #0
    b2e8:	d003      	beq.n	b2f2 <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    b2ea:	2101      	movs	r1, #1
    b2ec:	68f8      	ldr	r0, [r7, #12]
    b2ee:	4b07      	ldr	r3, [pc, #28]	; (b30c <n25q256a_erase+0x1b4>)
    b2f0:	4798      	blx	r3
	}
	return rc;
    b2f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    b2f4:	4618      	mov	r0, r3
    b2f6:	3740      	adds	r7, #64	; 0x40
    b2f8:	46bd      	mov	sp, r7
    b2fa:	bd80      	pop	{r7, pc}
    b2fc:	001fffff 	.word	0x001fffff
    b300:	0000adb9 	.word	0x0000adb9
    b304:	00002055 	.word	0x00002055
    b308:	0000ac7d 	.word	0x0000ac7d
    b30c:	0000abb1 	.word	0x0000abb1

0000b310 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    b310:	b590      	push	{r4, r7, lr}
    b312:	b085      	sub	sp, #20
    b314:	af00      	add	r7, sp, #0
    b316:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    b318:	687b      	ldr	r3, [r7, #4]
    b31a:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b31c:	68fb      	ldr	r3, [r7, #12]
    b31e:	7b1b      	ldrb	r3, [r3, #12]
    b320:	2b00      	cmp	r3, #0
    b322:	d001      	beq.n	b328 <n25q256a_enable_xip+0x18>
    b324:	2306      	movs	r3, #6
    b326:	e000      	b.n	b32a <n25q256a_enable_xip+0x1a>
    b328:	2300      	movs	r3, #0
    b32a:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    b32c:	68fb      	ldr	r3, [r7, #12]
    b32e:	7b5b      	ldrb	r3, [r3, #13]
    b330:	2b00      	cmp	r3, #0
    b332:	d129      	bne.n	b388 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    b334:	7afb      	ldrb	r3, [r7, #11]
    b336:	2285      	movs	r2, #133	; 0x85
    b338:	4619      	mov	r1, r3
    b33a:	6878      	ldr	r0, [r7, #4]
    b33c:	4b15      	ldr	r3, [pc, #84]	; (b394 <n25q256a_enable_xip+0x84>)
    b33e:	4798      	blx	r3
    b340:	4603      	mov	r3, r0
    b342:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    b344:	7abb      	ldrb	r3, [r7, #10]
    b346:	f003 0308 	and.w	r3, r3, #8
    b34a:	2b00      	cmp	r3, #0
    b34c:	d015      	beq.n	b37a <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    b34e:	7abb      	ldrb	r3, [r7, #10]
    b350:	f023 0308 	bic.w	r3, r3, #8
    b354:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    b356:	7abb      	ldrb	r3, [r7, #10]
    b358:	7af9      	ldrb	r1, [r7, #11]
    b35a:	2281      	movs	r2, #129	; 0x81
    b35c:	6878      	ldr	r0, [r7, #4]
    b35e:	4c0e      	ldr	r4, [pc, #56]	; (b398 <n25q256a_enable_xip+0x88>)
    b360:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b362:	bf00      	nop
    b364:	7afb      	ldrb	r3, [r7, #11]
    b366:	2270      	movs	r2, #112	; 0x70
    b368:	4619      	mov	r1, r3
    b36a:	6878      	ldr	r0, [r7, #4]
    b36c:	4b09      	ldr	r3, [pc, #36]	; (b394 <n25q256a_enable_xip+0x84>)
    b36e:	4798      	blx	r3
    b370:	4603      	mov	r3, r0
    b372:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b376:	2b00      	cmp	r3, #0
    b378:	d0f4      	beq.n	b364 <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    b37a:	68fb      	ldr	r3, [r7, #12]
    b37c:	2201      	movs	r2, #1
    b37e:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    b380:	2101      	movs	r1, #1
    b382:	6878      	ldr	r0, [r7, #4]
    b384:	4b05      	ldr	r3, [pc, #20]	; (b39c <n25q256a_enable_xip+0x8c>)
    b386:	4798      	blx	r3
	}
	return ERR_NONE;
    b388:	2300      	movs	r3, #0
}
    b38a:	4618      	mov	r0, r3
    b38c:	3714      	adds	r7, #20
    b38e:	46bd      	mov	sp, r7
    b390:	bd90      	pop	{r4, r7, pc}
    b392:	bf00      	nop
    b394:	0000ac7d 	.word	0x0000ac7d
    b398:	0000ad19 	.word	0x0000ad19
    b39c:	0000abb1 	.word	0x0000abb1

0000b3a0 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    b3a0:	b580      	push	{r7, lr}
    b3a2:	b086      	sub	sp, #24
    b3a4:	af00      	add	r7, sp, #0
    b3a6:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b3a8:	687b      	ldr	r3, [r7, #4]
    b3aa:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b3ac:	687b      	ldr	r3, [r7, #4]
    b3ae:	681b      	ldr	r3, [r3, #0]
    b3b0:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b3b2:	697b      	ldr	r3, [r7, #20]
    b3b4:	7b1b      	ldrb	r3, [r3, #12]
    b3b6:	2b00      	cmp	r3, #0
    b3b8:	d001      	beq.n	b3be <n25q256a_disable_xip+0x1e>
    b3ba:	2306      	movs	r3, #6
    b3bc:	e000      	b.n	b3c0 <n25q256a_disable_xip+0x20>
    b3be:	2300      	movs	r3, #0
    b3c0:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    b3c2:	2100      	movs	r1, #0
    b3c4:	6878      	ldr	r0, [r7, #4]
    b3c6:	4b15      	ldr	r3, [pc, #84]	; (b41c <n25q256a_disable_xip+0x7c>)
    b3c8:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    b3ca:	7bfb      	ldrb	r3, [r7, #15]
    b3cc:	2285      	movs	r2, #133	; 0x85
    b3ce:	4619      	mov	r1, r3
    b3d0:	6878      	ldr	r0, [r7, #4]
    b3d2:	4b13      	ldr	r3, [pc, #76]	; (b420 <n25q256a_disable_xip+0x80>)
    b3d4:	4798      	blx	r3
    b3d6:	4603      	mov	r3, r0
    b3d8:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    b3da:	7bbb      	ldrb	r3, [r7, #14]
    b3dc:	f003 0308 	and.w	r3, r3, #8
    b3e0:	2b00      	cmp	r3, #0
    b3e2:	d113      	bne.n	b40c <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    b3e4:	697b      	ldr	r3, [r7, #20]
    b3e6:	689b      	ldr	r3, [r3, #8]
    b3e8:	2b00      	cmp	r3, #0
    b3ea:	d00f      	beq.n	b40c <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    b3ec:	693b      	ldr	r3, [r7, #16]
    b3ee:	681b      	ldr	r3, [r3, #0]
    b3f0:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    b3f2:	6938      	ldr	r0, [r7, #16]
    b3f4:	4b0b      	ldr	r3, [pc, #44]	; (b424 <n25q256a_disable_xip+0x84>)
    b3f6:	4798      	blx	r3
			n25q->pin_exit_xip();
    b3f8:	697b      	ldr	r3, [r7, #20]
    b3fa:	689b      	ldr	r3, [r3, #8]
    b3fc:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    b3fe:	68b9      	ldr	r1, [r7, #8]
    b400:	6938      	ldr	r0, [r7, #16]
    b402:	4b09      	ldr	r3, [pc, #36]	; (b428 <n25q256a_disable_xip+0x88>)
    b404:	4798      	blx	r3
			qspi_sync_enable(descr);
    b406:	6938      	ldr	r0, [r7, #16]
    b408:	4b08      	ldr	r3, [pc, #32]	; (b42c <n25q256a_disable_xip+0x8c>)
    b40a:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    b40c:	697b      	ldr	r3, [r7, #20]
    b40e:	2200      	movs	r2, #0
    b410:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    b412:	2300      	movs	r3, #0
}
    b414:	4618      	mov	r0, r3
    b416:	3718      	adds	r7, #24
    b418:	46bd      	mov	sp, r7
    b41a:	bd80      	pop	{r7, pc}
    b41c:	0000abb1 	.word	0x0000abb1
    b420:	0000ac7d 	.word	0x0000ac7d
    b424:	00002019 	.word	0x00002019
    b428:	00001f91 	.word	0x00001f91
    b42c:	00001fdd 	.word	0x00001fdd

0000b430 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    b430:	b480      	push	{r7}
    b432:	b085      	sub	sp, #20
    b434:	af00      	add	r7, sp, #0
    b436:	60f8      	str	r0, [r7, #12]
    b438:	60b9      	str	r1, [r7, #8]
    b43a:	607a      	str	r2, [r7, #4]
	me->io        = io;
    b43c:	68fb      	ldr	r3, [r7, #12]
    b43e:	68ba      	ldr	r2, [r7, #8]
    b440:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    b442:	68fb      	ldr	r3, [r7, #12]
    b444:	687a      	ldr	r2, [r7, #4]
    b446:	605a      	str	r2, [r3, #4]

	return me;
    b448:	68fb      	ldr	r3, [r7, #12]
}
    b44a:	4618      	mov	r0, r3
    b44c:	3714      	adds	r7, #20
    b44e:	46bd      	mov	sp, r7
    b450:	f85d 7b04 	ldr.w	r7, [sp], #4
    b454:	4770      	bx	lr

0000b456 <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    b456:	b480      	push	{r7}
    b458:	b083      	sub	sp, #12
    b45a:	af00      	add	r7, sp, #0
    b45c:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    b45e:	687b      	ldr	r3, [r7, #4]
    b460:	781b      	ldrb	r3, [r3, #0]
    b462:	b29a      	uxth	r2, r3
    b464:	687b      	ldr	r3, [r7, #4]
    b466:	3301      	adds	r3, #1
    b468:	781b      	ldrb	r3, [r3, #0]
    b46a:	b29b      	uxth	r3, r3
    b46c:	021b      	lsls	r3, r3, #8
    b46e:	b29b      	uxth	r3, r3
    b470:	4413      	add	r3, r2
    b472:	b29b      	uxth	r3, r3
}
    b474:	4618      	mov	r0, r3
    b476:	370c      	adds	r7, #12
    b478:	46bd      	mov	sp, r7
    b47a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b47e:	4770      	bx	lr

0000b480 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    b480:	b480      	push	{r7}
    b482:	b083      	sub	sp, #12
    b484:	af00      	add	r7, sp, #0
    b486:	6078      	str	r0, [r7, #4]
	return desc[0];
    b488:	687b      	ldr	r3, [r7, #4]
    b48a:	781b      	ldrb	r3, [r3, #0]
}
    b48c:	4618      	mov	r0, r3
    b48e:	370c      	adds	r7, #12
    b490:	46bd      	mov	sp, r7
    b492:	f85d 7b04 	ldr.w	r7, [sp], #4
    b496:	4770      	bx	lr

0000b498 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    b498:	b580      	push	{r7, lr}
    b49a:	b082      	sub	sp, #8
    b49c:	af00      	add	r7, sp, #0
    b49e:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    b4a0:	6878      	ldr	r0, [r7, #4]
    b4a2:	4b05      	ldr	r3, [pc, #20]	; (b4b8 <usb_desc_next+0x20>)
    b4a4:	4798      	blx	r3
    b4a6:	4603      	mov	r3, r0
    b4a8:	461a      	mov	r2, r3
    b4aa:	687b      	ldr	r3, [r7, #4]
    b4ac:	4413      	add	r3, r2
}
    b4ae:	4618      	mov	r0, r3
    b4b0:	3708      	adds	r7, #8
    b4b2:	46bd      	mov	sp, r7
    b4b4:	bd80      	pop	{r7, pc}
    b4b6:	bf00      	nop
    b4b8:	0000b481 	.word	0x0000b481

0000b4bc <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    b4bc:	b580      	push	{r7, lr}
    b4be:	b08c      	sub	sp, #48	; 0x30
    b4c0:	af00      	add	r7, sp, #0
    b4c2:	6078      	str	r0, [r7, #4]
    b4c4:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    b4c6:	687b      	ldr	r3, [r7, #4]
    b4c8:	689b      	ldr	r3, [r3, #8]
    b4ca:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    b4cc:	683b      	ldr	r3, [r7, #0]
    b4ce:	681b      	ldr	r3, [r3, #0]
    b4d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    b4d2:	2300      	movs	r3, #0
    b4d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    b4d8:	e08f      	b.n	b5fa <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    b4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b4dc:	2b00      	cmp	r3, #0
    b4de:	d102      	bne.n	b4e6 <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    b4e0:	f06f 0309 	mvn.w	r3, #9
    b4e4:	e092      	b.n	b60c <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    b4e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b4e8:	789b      	ldrb	r3, [r3, #2]
    b4ea:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    b4ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b4ee:	795b      	ldrb	r3, [r3, #5]
    b4f0:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    b4f2:	7c7b      	ldrb	r3, [r7, #17]
    b4f4:	2b02      	cmp	r3, #2
    b4f6:	d002      	beq.n	b4fe <cdcdf_acm_enable+0x42>
    b4f8:	7c7b      	ldrb	r3, [r7, #17]
    b4fa:	2b0a      	cmp	r3, #10
    b4fc:	d121      	bne.n	b542 <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    b4fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b502:	6a3a      	ldr	r2, [r7, #32]
    b504:	5cd2      	ldrb	r2, [r2, r3]
    b506:	7bbb      	ldrb	r3, [r7, #14]
    b508:	429a      	cmp	r2, r3
    b50a:	d102      	bne.n	b512 <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    b50c:	f06f 0311 	mvn.w	r3, #17
    b510:	e07c      	b.n	b60c <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    b512:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b516:	6a3a      	ldr	r2, [r7, #32]
    b518:	5cd3      	ldrb	r3, [r2, r3]
    b51a:	2bff      	cmp	r3, #255	; 0xff
    b51c:	d002      	beq.n	b524 <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    b51e:	f06f 031b 	mvn.w	r3, #27
    b522:	e073      	b.n	b60c <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    b524:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b528:	7bb9      	ldrb	r1, [r7, #14]
    b52a:	6a3a      	ldr	r2, [r7, #32]
    b52c:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    b52e:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    b530:	683b      	ldr	r3, [r7, #0]
    b532:	685b      	ldr	r3, [r3, #4]
    b534:	2205      	movs	r2, #5
    b536:	4619      	mov	r1, r3
    b538:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b53a:	4b36      	ldr	r3, [pc, #216]	; (b614 <cdcdf_acm_enable+0x158>)
    b53c:	4798      	blx	r3
    b53e:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    b540:	e047      	b.n	b5d2 <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    b542:	f06f 0309 	mvn.w	r3, #9
    b546:	e061      	b.n	b60c <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    b548:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b54a:	789b      	ldrb	r3, [r3, #2]
    b54c:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    b54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b550:	78db      	ldrb	r3, [r3, #3]
    b552:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    b554:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b556:	3304      	adds	r3, #4
    b558:	4618      	mov	r0, r3
    b55a:	4b2f      	ldr	r3, [pc, #188]	; (b618 <cdcdf_acm_enable+0x15c>)
    b55c:	4798      	blx	r3
    b55e:	4603      	mov	r3, r0
    b560:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    b562:	7ebb      	ldrb	r3, [r7, #26]
    b564:	7ef9      	ldrb	r1, [r7, #27]
    b566:	8bba      	ldrh	r2, [r7, #28]
    b568:	4618      	mov	r0, r3
    b56a:	4b2c      	ldr	r3, [pc, #176]	; (b61c <cdcdf_acm_enable+0x160>)
    b56c:	4798      	blx	r3
    b56e:	4603      	mov	r3, r0
    b570:	2b00      	cmp	r3, #0
    b572:	d002      	beq.n	b57a <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    b574:	f06f 0313 	mvn.w	r3, #19
    b578:	e048      	b.n	b60c <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    b57a:	7ebb      	ldrb	r3, [r7, #26]
    b57c:	b25b      	sxtb	r3, r3
    b57e:	2b00      	cmp	r3, #0
    b580:	da0f      	bge.n	b5a2 <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    b582:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b586:	7eb9      	ldrb	r1, [r7, #26]
    b588:	6a3a      	ldr	r2, [r7, #32]
    b58a:	4413      	add	r3, r2
    b58c:	460a      	mov	r2, r1
    b58e:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    b590:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b594:	6a3a      	ldr	r2, [r7, #32]
    b596:	4413      	add	r3, r2
    b598:	789b      	ldrb	r3, [r3, #2]
    b59a:	4618      	mov	r0, r3
    b59c:	4b20      	ldr	r3, [pc, #128]	; (b620 <cdcdf_acm_enable+0x164>)
    b59e:	4798      	blx	r3
    b5a0:	e007      	b.n	b5b2 <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    b5a2:	7eba      	ldrb	r2, [r7, #26]
    b5a4:	6a3b      	ldr	r3, [r7, #32]
    b5a6:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    b5a8:	6a3b      	ldr	r3, [r7, #32]
    b5aa:	791b      	ldrb	r3, [r3, #4]
    b5ac:	4618      	mov	r0, r3
    b5ae:	4b1c      	ldr	r3, [pc, #112]	; (b620 <cdcdf_acm_enable+0x164>)
    b5b0:	4798      	blx	r3
			}
			desc->sod = ep;
    b5b2:	683b      	ldr	r3, [r7, #0]
    b5b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    b5b6:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    b5b8:	683b      	ldr	r3, [r7, #0]
    b5ba:	681b      	ldr	r3, [r3, #0]
    b5bc:	4618      	mov	r0, r3
    b5be:	4b19      	ldr	r3, [pc, #100]	; (b624 <cdcdf_acm_enable+0x168>)
    b5c0:	4798      	blx	r3
    b5c2:	4602      	mov	r2, r0
    b5c4:	683b      	ldr	r3, [r7, #0]
    b5c6:	685b      	ldr	r3, [r3, #4]
    b5c8:	4619      	mov	r1, r3
    b5ca:	4610      	mov	r0, r2
    b5cc:	4b16      	ldr	r3, [pc, #88]	; (b628 <cdcdf_acm_enable+0x16c>)
    b5ce:	4798      	blx	r3
    b5d0:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    b5d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b5d4:	2b00      	cmp	r3, #0
    b5d6:	d1b7      	bne.n	b548 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    b5d8:	683b      	ldr	r3, [r7, #0]
    b5da:	681b      	ldr	r3, [r3, #0]
    b5dc:	4618      	mov	r0, r3
    b5de:	4b11      	ldr	r3, [pc, #68]	; (b624 <cdcdf_acm_enable+0x168>)
    b5e0:	4798      	blx	r3
    b5e2:	683b      	ldr	r3, [r7, #0]
    b5e4:	685b      	ldr	r3, [r3, #4]
    b5e6:	2204      	movs	r2, #4
    b5e8:	4619      	mov	r1, r3
    b5ea:	4b0a      	ldr	r3, [pc, #40]	; (b614 <cdcdf_acm_enable+0x158>)
    b5ec:	4798      	blx	r3
    b5ee:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    b5f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b5f4:	3301      	adds	r3, #1
    b5f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    b5fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b5fe:	2b01      	cmp	r3, #1
    b600:	f67f af6b 	bls.w	b4da <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    b604:	4b09      	ldr	r3, [pc, #36]	; (b62c <cdcdf_acm_enable+0x170>)
    b606:	2201      	movs	r2, #1
    b608:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    b60a:	2300      	movs	r3, #0
}
    b60c:	4618      	mov	r0, r3
    b60e:	3730      	adds	r7, #48	; 0x30
    b610:	46bd      	mov	sp, r7
    b612:	bd80      	pop	{r7, pc}
    b614:	0000c741 	.word	0x0000c741
    b618:	0000b457 	.word	0x0000b457
    b61c:	00002935 	.word	0x00002935
    b620:	00002a21 	.word	0x00002a21
    b624:	0000b499 	.word	0x0000b499
    b628:	0000c79d 	.word	0x0000c79d
    b62c:	20001150 	.word	0x20001150

0000b630 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    b630:	b580      	push	{r7, lr}
    b632:	b088      	sub	sp, #32
    b634:	af00      	add	r7, sp, #0
    b636:	6078      	str	r0, [r7, #4]
    b638:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    b63a:	687b      	ldr	r3, [r7, #4]
    b63c:	689b      	ldr	r3, [r3, #8]
    b63e:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    b640:	683b      	ldr	r3, [r7, #0]
    b642:	2b00      	cmp	r3, #0
    b644:	d00c      	beq.n	b660 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    b646:	683b      	ldr	r3, [r7, #0]
    b648:	681b      	ldr	r3, [r3, #0]
    b64a:	795b      	ldrb	r3, [r3, #5]
    b64c:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    b64e:	7c7b      	ldrb	r3, [r7, #17]
    b650:	2b02      	cmp	r3, #2
    b652:	d005      	beq.n	b660 <cdcdf_acm_disable+0x30>
    b654:	7c7b      	ldrb	r3, [r7, #17]
    b656:	2b0a      	cmp	r3, #10
    b658:	d002      	beq.n	b660 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    b65a:	f06f 0309 	mvn.w	r3, #9
    b65e:	e035      	b.n	b6cc <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    b660:	2300      	movs	r3, #0
    b662:	77fb      	strb	r3, [r7, #31]
    b664:	e01f      	b.n	b6a6 <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    b666:	7ffb      	ldrb	r3, [r7, #31]
    b668:	69ba      	ldr	r2, [r7, #24]
    b66a:	5cd3      	ldrb	r3, [r2, r3]
    b66c:	2bff      	cmp	r3, #255	; 0xff
    b66e:	d016      	beq.n	b69e <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    b670:	7ffb      	ldrb	r3, [r7, #31]
    b672:	69ba      	ldr	r2, [r7, #24]
    b674:	21ff      	movs	r1, #255	; 0xff
    b676:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    b678:	7ffb      	ldrb	r3, [r7, #31]
    b67a:	69ba      	ldr	r2, [r7, #24]
    b67c:	4413      	add	r3, r2
    b67e:	789b      	ldrb	r3, [r3, #2]
    b680:	2bff      	cmp	r3, #255	; 0xff
    b682:	d00d      	beq.n	b6a0 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    b684:	7ffb      	ldrb	r3, [r7, #31]
    b686:	69ba      	ldr	r2, [r7, #24]
    b688:	4413      	add	r3, r2
    b68a:	789b      	ldrb	r3, [r3, #2]
    b68c:	4618      	mov	r0, r3
    b68e:	4b11      	ldr	r3, [pc, #68]	; (b6d4 <cdcdf_acm_disable+0xa4>)
    b690:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    b692:	7ffb      	ldrb	r3, [r7, #31]
    b694:	69ba      	ldr	r2, [r7, #24]
    b696:	4413      	add	r3, r2
    b698:	22ff      	movs	r2, #255	; 0xff
    b69a:	709a      	strb	r2, [r3, #2]
    b69c:	e000      	b.n	b6a0 <cdcdf_acm_disable+0x70>
			continue;
    b69e:	bf00      	nop
	for (i = 0; i < 2; i++) {
    b6a0:	7ffb      	ldrb	r3, [r7, #31]
    b6a2:	3301      	adds	r3, #1
    b6a4:	77fb      	strb	r3, [r7, #31]
    b6a6:	7ffb      	ldrb	r3, [r7, #31]
    b6a8:	2b01      	cmp	r3, #1
    b6aa:	d9dc      	bls.n	b666 <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    b6ac:	69bb      	ldr	r3, [r7, #24]
    b6ae:	791b      	ldrb	r3, [r3, #4]
    b6b0:	2bff      	cmp	r3, #255	; 0xff
    b6b2:	d007      	beq.n	b6c4 <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    b6b4:	69bb      	ldr	r3, [r7, #24]
    b6b6:	791b      	ldrb	r3, [r3, #4]
    b6b8:	4618      	mov	r0, r3
    b6ba:	4b06      	ldr	r3, [pc, #24]	; (b6d4 <cdcdf_acm_disable+0xa4>)
    b6bc:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    b6be:	69bb      	ldr	r3, [r7, #24]
    b6c0:	22ff      	movs	r2, #255	; 0xff
    b6c2:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    b6c4:	4b04      	ldr	r3, [pc, #16]	; (b6d8 <cdcdf_acm_disable+0xa8>)
    b6c6:	2200      	movs	r2, #0
    b6c8:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    b6ca:	2300      	movs	r3, #0
}
    b6cc:	4618      	mov	r0, r3
    b6ce:	3720      	adds	r7, #32
    b6d0:	46bd      	mov	sp, r7
    b6d2:	bd80      	pop	{r7, pc}
    b6d4:	000029d1 	.word	0x000029d1
    b6d8:	20001150 	.word	0x20001150

0000b6dc <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    b6dc:	b580      	push	{r7, lr}
    b6de:	b084      	sub	sp, #16
    b6e0:	af00      	add	r7, sp, #0
    b6e2:	60f8      	str	r0, [r7, #12]
    b6e4:	460b      	mov	r3, r1
    b6e6:	607a      	str	r2, [r7, #4]
    b6e8:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    b6ea:	7afb      	ldrb	r3, [r7, #11]
    b6ec:	2b01      	cmp	r3, #1
    b6ee:	d009      	beq.n	b704 <cdcdf_acm_ctrl+0x28>
    b6f0:	2b02      	cmp	r3, #2
    b6f2:	d00d      	beq.n	b710 <cdcdf_acm_ctrl+0x34>
    b6f4:	2b00      	cmp	r3, #0
    b6f6:	d10e      	bne.n	b716 <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    b6f8:	6879      	ldr	r1, [r7, #4]
    b6fa:	68f8      	ldr	r0, [r7, #12]
    b6fc:	4b09      	ldr	r3, [pc, #36]	; (b724 <cdcdf_acm_ctrl+0x48>)
    b6fe:	4798      	blx	r3
    b700:	4603      	mov	r3, r0
    b702:	e00a      	b.n	b71a <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    b704:	6879      	ldr	r1, [r7, #4]
    b706:	68f8      	ldr	r0, [r7, #12]
    b708:	4b07      	ldr	r3, [pc, #28]	; (b728 <cdcdf_acm_ctrl+0x4c>)
    b70a:	4798      	blx	r3
    b70c:	4603      	mov	r3, r0
    b70e:	e004      	b.n	b71a <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    b710:	f06f 031a 	mvn.w	r3, #26
    b714:	e001      	b.n	b71a <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    b716:	f06f 030c 	mvn.w	r3, #12
	}
}
    b71a:	4618      	mov	r0, r3
    b71c:	3710      	adds	r7, #16
    b71e:	46bd      	mov	sp, r7
    b720:	bd80      	pop	{r7, pc}
    b722:	bf00      	nop
    b724:	0000b4bd 	.word	0x0000b4bd
    b728:	0000b631 	.word	0x0000b631

0000b72c <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    b72c:	b590      	push	{r4, r7, lr}
    b72e:	b087      	sub	sp, #28
    b730:	af00      	add	r7, sp, #0
    b732:	4603      	mov	r3, r0
    b734:	6039      	str	r1, [r7, #0]
    b736:	71fb      	strb	r3, [r7, #7]
    b738:	4613      	mov	r3, r2
    b73a:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    b73c:	683b      	ldr	r3, [r7, #0]
    b73e:	799a      	ldrb	r2, [r3, #6]
    b740:	79db      	ldrb	r3, [r3, #7]
    b742:	021b      	lsls	r3, r3, #8
    b744:	4313      	orrs	r3, r2
    b746:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    b748:	4b2b      	ldr	r3, [pc, #172]	; (b7f8 <cdcdf_acm_set_req+0xcc>)
    b74a:	4798      	blx	r3
    b74c:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    b74e:	683b      	ldr	r3, [r7, #0]
    b750:	785b      	ldrb	r3, [r3, #1]
    b752:	2b20      	cmp	r3, #32
    b754:	d002      	beq.n	b75c <cdcdf_acm_set_req+0x30>
    b756:	2b22      	cmp	r3, #34	; 0x22
    b758:	d034      	beq.n	b7c4 <cdcdf_acm_set_req+0x98>
    b75a:	e046      	b.n	b7ea <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    b75c:	8afb      	ldrh	r3, [r7, #22]
    b75e:	2b07      	cmp	r3, #7
    b760:	d002      	beq.n	b768 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    b762:	f04f 33ff 	mov.w	r3, #4294967295
    b766:	e042      	b.n	b7ee <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    b768:	79bb      	ldrb	r3, [r7, #6]
    b76a:	2b00      	cmp	r3, #0
    b76c:	d107      	bne.n	b77e <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    b76e:	8afa      	ldrh	r2, [r7, #22]
    b770:	79f8      	ldrb	r0, [r7, #7]
    b772:	2300      	movs	r3, #0
    b774:	6939      	ldr	r1, [r7, #16]
    b776:	4c21      	ldr	r4, [pc, #132]	; (b7fc <cdcdf_acm_set_req+0xd0>)
    b778:	47a0      	blx	r4
    b77a:	4603      	mov	r3, r0
    b77c:	e037      	b.n	b7ee <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    b77e:	693a      	ldr	r2, [r7, #16]
    b780:	f107 0308 	add.w	r3, r7, #8
    b784:	6810      	ldr	r0, [r2, #0]
    b786:	6018      	str	r0, [r3, #0]
    b788:	8891      	ldrh	r1, [r2, #4]
    b78a:	7992      	ldrb	r2, [r2, #6]
    b78c:	8099      	strh	r1, [r3, #4]
    b78e:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    b790:	4b1b      	ldr	r3, [pc, #108]	; (b800 <cdcdf_acm_set_req+0xd4>)
    b792:	681b      	ldr	r3, [r3, #0]
    b794:	2b00      	cmp	r3, #0
    b796:	d008      	beq.n	b7aa <cdcdf_acm_set_req+0x7e>
    b798:	4b19      	ldr	r3, [pc, #100]	; (b800 <cdcdf_acm_set_req+0xd4>)
    b79a:	681b      	ldr	r3, [r3, #0]
    b79c:	f107 0208 	add.w	r2, r7, #8
    b7a0:	4610      	mov	r0, r2
    b7a2:	4798      	blx	r3
    b7a4:	4603      	mov	r3, r0
    b7a6:	2b00      	cmp	r3, #0
    b7a8:	d00a      	beq.n	b7c0 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    b7aa:	4b16      	ldr	r3, [pc, #88]	; (b804 <cdcdf_acm_set_req+0xd8>)
    b7ac:	f107 0208 	add.w	r2, r7, #8
    b7b0:	e892 0003 	ldmia.w	r2, {r0, r1}
    b7b4:	6018      	str	r0, [r3, #0]
    b7b6:	3304      	adds	r3, #4
    b7b8:	8019      	strh	r1, [r3, #0]
    b7ba:	3302      	adds	r3, #2
    b7bc:	0c0a      	lsrs	r2, r1, #16
    b7be:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    b7c0:	2300      	movs	r3, #0
    b7c2:	e014      	b.n	b7ee <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    b7c4:	2300      	movs	r3, #0
    b7c6:	2200      	movs	r2, #0
    b7c8:	2100      	movs	r1, #0
    b7ca:	2000      	movs	r0, #0
    b7cc:	4c0b      	ldr	r4, [pc, #44]	; (b7fc <cdcdf_acm_set_req+0xd0>)
    b7ce:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    b7d0:	4b0d      	ldr	r3, [pc, #52]	; (b808 <cdcdf_acm_set_req+0xdc>)
    b7d2:	681b      	ldr	r3, [r3, #0]
    b7d4:	2b00      	cmp	r3, #0
    b7d6:	d006      	beq.n	b7e6 <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    b7d8:	4b0b      	ldr	r3, [pc, #44]	; (b808 <cdcdf_acm_set_req+0xdc>)
    b7da:	681b      	ldr	r3, [r3, #0]
    b7dc:	683a      	ldr	r2, [r7, #0]
    b7de:	8852      	ldrh	r2, [r2, #2]
    b7e0:	b292      	uxth	r2, r2
    b7e2:	4610      	mov	r0, r2
    b7e4:	4798      	blx	r3
		}
		return ERR_NONE;
    b7e6:	2300      	movs	r3, #0
    b7e8:	e001      	b.n	b7ee <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    b7ea:	f06f 030c 	mvn.w	r3, #12
	}
}
    b7ee:	4618      	mov	r0, r3
    b7f0:	371c      	adds	r7, #28
    b7f2:	46bd      	mov	sp, r7
    b7f4:	bd90      	pop	{r4, r7, pc}
    b7f6:	bf00      	nop
    b7f8:	0000c63d 	.word	0x0000c63d
    b7fc:	0000c4b1 	.word	0x0000c4b1
    b800:	20001164 	.word	0x20001164
    b804:	20001158 	.word	0x20001158
    b808:	20001160 	.word	0x20001160

0000b80c <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    b80c:	b590      	push	{r4, r7, lr}
    b80e:	b085      	sub	sp, #20
    b810:	af00      	add	r7, sp, #0
    b812:	4603      	mov	r3, r0
    b814:	6039      	str	r1, [r7, #0]
    b816:	71fb      	strb	r3, [r7, #7]
    b818:	4613      	mov	r3, r2
    b81a:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    b81c:	683b      	ldr	r3, [r7, #0]
    b81e:	799a      	ldrb	r2, [r3, #6]
    b820:	79db      	ldrb	r3, [r3, #7]
    b822:	021b      	lsls	r3, r3, #8
    b824:	4313      	orrs	r3, r2
    b826:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    b828:	79bb      	ldrb	r3, [r7, #6]
    b82a:	2b01      	cmp	r3, #1
    b82c:	d101      	bne.n	b832 <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    b82e:	2300      	movs	r3, #0
    b830:	e013      	b.n	b85a <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    b832:	683b      	ldr	r3, [r7, #0]
    b834:	785b      	ldrb	r3, [r3, #1]
    b836:	2b21      	cmp	r3, #33	; 0x21
    b838:	d10d      	bne.n	b856 <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    b83a:	89fb      	ldrh	r3, [r7, #14]
    b83c:	2b07      	cmp	r3, #7
    b83e:	d002      	beq.n	b846 <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    b840:	f04f 33ff 	mov.w	r3, #4294967295
    b844:	e009      	b.n	b85a <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    b846:	89fa      	ldrh	r2, [r7, #14]
    b848:	79f8      	ldrb	r0, [r7, #7]
    b84a:	2300      	movs	r3, #0
    b84c:	4905      	ldr	r1, [pc, #20]	; (b864 <cdcdf_acm_get_req+0x58>)
    b84e:	4c06      	ldr	r4, [pc, #24]	; (b868 <cdcdf_acm_get_req+0x5c>)
    b850:	47a0      	blx	r4
    b852:	4603      	mov	r3, r0
    b854:	e001      	b.n	b85a <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    b856:	f06f 030c 	mvn.w	r3, #12
	}
}
    b85a:	4618      	mov	r0, r3
    b85c:	3714      	adds	r7, #20
    b85e:	46bd      	mov	sp, r7
    b860:	bd90      	pop	{r4, r7, pc}
    b862:	bf00      	nop
    b864:	20001158 	.word	0x20001158
    b868:	0000c4b1 	.word	0x0000c4b1

0000b86c <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    b86c:	b580      	push	{r7, lr}
    b86e:	b082      	sub	sp, #8
    b870:	af00      	add	r7, sp, #0
    b872:	4603      	mov	r3, r0
    b874:	6039      	str	r1, [r7, #0]
    b876:	71fb      	strb	r3, [r7, #7]
    b878:	4613      	mov	r3, r2
    b87a:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    b87c:	683b      	ldr	r3, [r7, #0]
    b87e:	781b      	ldrb	r3, [r3, #0]
    b880:	095b      	lsrs	r3, r3, #5
    b882:	b2db      	uxtb	r3, r3
    b884:	f003 0303 	and.w	r3, r3, #3
    b888:	2b01      	cmp	r3, #1
    b88a:	d002      	beq.n	b892 <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    b88c:	f06f 0309 	mvn.w	r3, #9
    b890:	e026      	b.n	b8e0 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    b892:	683b      	ldr	r3, [r7, #0]
    b894:	889b      	ldrh	r3, [r3, #4]
    b896:	b29a      	uxth	r2, r3
    b898:	4b13      	ldr	r3, [pc, #76]	; (b8e8 <cdcdf_acm_req+0x7c>)
    b89a:	781b      	ldrb	r3, [r3, #0]
    b89c:	b29b      	uxth	r3, r3
    b89e:	429a      	cmp	r2, r3
    b8a0:	d007      	beq.n	b8b2 <cdcdf_acm_req+0x46>
    b8a2:	683b      	ldr	r3, [r7, #0]
    b8a4:	889b      	ldrh	r3, [r3, #4]
    b8a6:	b29a      	uxth	r2, r3
    b8a8:	4b0f      	ldr	r3, [pc, #60]	; (b8e8 <cdcdf_acm_req+0x7c>)
    b8aa:	785b      	ldrb	r3, [r3, #1]
    b8ac:	b29b      	uxth	r3, r3
    b8ae:	429a      	cmp	r2, r3
    b8b0:	d114      	bne.n	b8dc <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    b8b2:	683b      	ldr	r3, [r7, #0]
    b8b4:	781b      	ldrb	r3, [r3, #0]
    b8b6:	b25b      	sxtb	r3, r3
    b8b8:	2b00      	cmp	r3, #0
    b8ba:	da07      	bge.n	b8cc <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    b8bc:	79ba      	ldrb	r2, [r7, #6]
    b8be:	79fb      	ldrb	r3, [r7, #7]
    b8c0:	6839      	ldr	r1, [r7, #0]
    b8c2:	4618      	mov	r0, r3
    b8c4:	4b09      	ldr	r3, [pc, #36]	; (b8ec <cdcdf_acm_req+0x80>)
    b8c6:	4798      	blx	r3
    b8c8:	4603      	mov	r3, r0
    b8ca:	e009      	b.n	b8e0 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    b8cc:	79ba      	ldrb	r2, [r7, #6]
    b8ce:	79fb      	ldrb	r3, [r7, #7]
    b8d0:	6839      	ldr	r1, [r7, #0]
    b8d2:	4618      	mov	r0, r3
    b8d4:	4b06      	ldr	r3, [pc, #24]	; (b8f0 <cdcdf_acm_req+0x84>)
    b8d6:	4798      	blx	r3
    b8d8:	4603      	mov	r3, r0
    b8da:	e001      	b.n	b8e0 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    b8dc:	f06f 0309 	mvn.w	r3, #9
	}
}
    b8e0:	4618      	mov	r0, r3
    b8e2:	3708      	adds	r7, #8
    b8e4:	46bd      	mov	sp, r7
    b8e6:	bd80      	pop	{r7, pc}
    b8e8:	20001150 	.word	0x20001150
    b8ec:	0000b80d 	.word	0x0000b80d
    b8f0:	0000b72d 	.word	0x0000b72d

0000b8f4 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    b8f4:	b580      	push	{r7, lr}
    b8f6:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    b8f8:	4b0b      	ldr	r3, [pc, #44]	; (b928 <cdcdf_acm_init+0x34>)
    b8fa:	4798      	blx	r3
    b8fc:	4603      	mov	r3, r0
    b8fe:	2b01      	cmp	r3, #1
    b900:	d902      	bls.n	b908 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    b902:	f06f 0310 	mvn.w	r3, #16
    b906:	e00d      	b.n	b924 <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    b908:	4b08      	ldr	r3, [pc, #32]	; (b92c <cdcdf_acm_init+0x38>)
    b90a:	4a09      	ldr	r2, [pc, #36]	; (b930 <cdcdf_acm_init+0x3c>)
    b90c:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    b90e:	4b07      	ldr	r3, [pc, #28]	; (b92c <cdcdf_acm_init+0x38>)
    b910:	4a08      	ldr	r2, [pc, #32]	; (b934 <cdcdf_acm_init+0x40>)
    b912:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    b914:	4805      	ldr	r0, [pc, #20]	; (b92c <cdcdf_acm_init+0x38>)
    b916:	4b08      	ldr	r3, [pc, #32]	; (b938 <cdcdf_acm_init+0x44>)
    b918:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    b91a:	4908      	ldr	r1, [pc, #32]	; (b93c <cdcdf_acm_init+0x48>)
    b91c:	2001      	movs	r0, #1
    b91e:	4b08      	ldr	r3, [pc, #32]	; (b940 <cdcdf_acm_init+0x4c>)
    b920:	4798      	blx	r3
	return ERR_NONE;
    b922:	2300      	movs	r3, #0
}
    b924:	4618      	mov	r0, r3
    b926:	bd80      	pop	{r7, pc}
    b928:	0000c655 	.word	0x0000c655
    b92c:	20001144 	.word	0x20001144
    b930:	0000b6dd 	.word	0x0000b6dd
    b934:	20001150 	.word	0x20001150
    b938:	0000c5bd 	.word	0x0000c5bd
    b93c:	200001d8 	.word	0x200001d8
    b940:	0000c4ed 	.word	0x0000c4ed

0000b944 <usb_get_u16>:
{
    b944:	b480      	push	{r7}
    b946:	b083      	sub	sp, #12
    b948:	af00      	add	r7, sp, #0
    b94a:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    b94c:	687b      	ldr	r3, [r7, #4]
    b94e:	781b      	ldrb	r3, [r3, #0]
    b950:	b29a      	uxth	r2, r3
    b952:	687b      	ldr	r3, [r7, #4]
    b954:	3301      	adds	r3, #1
    b956:	781b      	ldrb	r3, [r3, #0]
    b958:	b29b      	uxth	r3, r3
    b95a:	021b      	lsls	r3, r3, #8
    b95c:	b29b      	uxth	r3, r3
    b95e:	4413      	add	r3, r2
    b960:	b29b      	uxth	r3, r3
}
    b962:	4618      	mov	r0, r3
    b964:	370c      	adds	r7, #12
    b966:	46bd      	mov	sp, r7
    b968:	f85d 7b04 	ldr.w	r7, [sp], #4
    b96c:	4770      	bx	lr

0000b96e <usb_desc_len>:
{
    b96e:	b480      	push	{r7}
    b970:	b083      	sub	sp, #12
    b972:	af00      	add	r7, sp, #0
    b974:	6078      	str	r0, [r7, #4]
	return desc[0];
    b976:	687b      	ldr	r3, [r7, #4]
    b978:	781b      	ldrb	r3, [r3, #0]
}
    b97a:	4618      	mov	r0, r3
    b97c:	370c      	adds	r7, #12
    b97e:	46bd      	mov	sp, r7
    b980:	f85d 7b04 	ldr.w	r7, [sp], #4
    b984:	4770      	bx	lr
	...

0000b988 <usb_desc_next>:
{
    b988:	b580      	push	{r7, lr}
    b98a:	b082      	sub	sp, #8
    b98c:	af00      	add	r7, sp, #0
    b98e:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    b990:	6878      	ldr	r0, [r7, #4]
    b992:	4b05      	ldr	r3, [pc, #20]	; (b9a8 <usb_desc_next+0x20>)
    b994:	4798      	blx	r3
    b996:	4603      	mov	r3, r0
    b998:	461a      	mov	r2, r3
    b99a:	687b      	ldr	r3, [r7, #4]
    b99c:	4413      	add	r3, r2
}
    b99e:	4618      	mov	r0, r3
    b9a0:	3708      	adds	r7, #8
    b9a2:	46bd      	mov	sp, r7
    b9a4:	bd80      	pop	{r7, pc}
    b9a6:	bf00      	nop
    b9a8:	0000b96f 	.word	0x0000b96f

0000b9ac <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    b9ac:	b580      	push	{r7, lr}
    b9ae:	b082      	sub	sp, #8
    b9b0:	af00      	add	r7, sp, #0
    b9b2:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    b9b4:	687b      	ldr	r3, [r7, #4]
    b9b6:	3302      	adds	r3, #2
    b9b8:	4618      	mov	r0, r3
    b9ba:	4b03      	ldr	r3, [pc, #12]	; (b9c8 <usb_cfg_desc_total_len+0x1c>)
    b9bc:	4798      	blx	r3
    b9be:	4603      	mov	r3, r0
}
    b9c0:	4618      	mov	r0, r3
    b9c2:	3708      	adds	r7, #8
    b9c4:	46bd      	mov	sp, r7
    b9c6:	bd80      	pop	{r7, pc}
    b9c8:	0000b945 	.word	0x0000b945

0000b9cc <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    b9cc:	b590      	push	{r4, r7, lr}
    b9ce:	b085      	sub	sp, #20
    b9d0:	af00      	add	r7, sp, #0
    b9d2:	4603      	mov	r3, r0
    b9d4:	6039      	str	r1, [r7, #0]
    b9d6:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    b9d8:	2300      	movs	r3, #0
    b9da:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    b9dc:	683b      	ldr	r3, [r7, #0]
    b9de:	799a      	ldrb	r2, [r3, #6]
    b9e0:	79db      	ldrb	r3, [r3, #7]
    b9e2:	021b      	lsls	r3, r3, #8
    b9e4:	4313      	orrs	r3, r2
    b9e6:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    b9e8:	897b      	ldrh	r3, [r7, #10]
    b9ea:	2b12      	cmp	r3, #18
    b9ec:	d901      	bls.n	b9f2 <usbdc_get_dev_desc+0x26>
		length = 0x12;
    b9ee:	2312      	movs	r3, #18
    b9f0:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    b9f2:	68fb      	ldr	r3, [r7, #12]
    b9f4:	2b00      	cmp	r3, #0
    b9f6:	d10a      	bne.n	ba0e <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    b9f8:	4b0f      	ldr	r3, [pc, #60]	; (ba38 <usbdc_get_dev_desc+0x6c>)
    b9fa:	681b      	ldr	r3, [r3, #0]
    b9fc:	6818      	ldr	r0, [r3, #0]
    b9fe:	4b0e      	ldr	r3, [pc, #56]	; (ba38 <usbdc_get_dev_desc+0x6c>)
    ba00:	681b      	ldr	r3, [r3, #0]
    ba02:	685b      	ldr	r3, [r3, #4]
    ba04:	2201      	movs	r2, #1
    ba06:	4619      	mov	r1, r3
    ba08:	4b0c      	ldr	r3, [pc, #48]	; (ba3c <usbdc_get_dev_desc+0x70>)
    ba0a:	4798      	blx	r3
    ba0c:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    ba0e:	68fb      	ldr	r3, [r7, #12]
    ba10:	2b00      	cmp	r3, #0
    ba12:	d101      	bne.n	ba18 <usbdc_get_dev_desc+0x4c>
		return false;
    ba14:	2300      	movs	r3, #0
    ba16:	e00b      	b.n	ba30 <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    ba18:	897a      	ldrh	r2, [r7, #10]
    ba1a:	79f8      	ldrb	r0, [r7, #7]
    ba1c:	2300      	movs	r3, #0
    ba1e:	68f9      	ldr	r1, [r7, #12]
    ba20:	4c07      	ldr	r4, [pc, #28]	; (ba40 <usbdc_get_dev_desc+0x74>)
    ba22:	47a0      	blx	r4
    ba24:	4603      	mov	r3, r0
    ba26:	2b00      	cmp	r3, #0
    ba28:	d001      	beq.n	ba2e <usbdc_get_dev_desc+0x62>
		return false;
    ba2a:	2300      	movs	r3, #0
    ba2c:	e000      	b.n	ba30 <usbdc_get_dev_desc+0x64>
	}
	return true;
    ba2e:	2301      	movs	r3, #1
}
    ba30:	4618      	mov	r0, r3
    ba32:	3714      	adds	r7, #20
    ba34:	46bd      	mov	sp, r7
    ba36:	bd90      	pop	{r4, r7, pc}
    ba38:	20001168 	.word	0x20001168
    ba3c:	0000c741 	.word	0x0000c741
    ba40:	0000c4b1 	.word	0x0000c4b1

0000ba44 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    ba44:	b590      	push	{r4, r7, lr}
    ba46:	b087      	sub	sp, #28
    ba48:	af00      	add	r7, sp, #0
    ba4a:	4603      	mov	r3, r0
    ba4c:	6039      	str	r1, [r7, #0]
    ba4e:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    ba50:	2300      	movs	r3, #0
    ba52:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    ba54:	683b      	ldr	r3, [r7, #0]
    ba56:	799a      	ldrb	r2, [r3, #6]
    ba58:	79db      	ldrb	r3, [r3, #7]
    ba5a:	021b      	lsls	r3, r3, #8
    ba5c:	4313      	orrs	r3, r2
    ba5e:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    ba60:	683b      	ldr	r3, [r7, #0]
    ba62:	885b      	ldrh	r3, [r3, #2]
    ba64:	b29b      	uxth	r3, r3
    ba66:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    ba68:	8a7a      	ldrh	r2, [r7, #18]
    ba6a:	4b1e      	ldr	r3, [pc, #120]	; (bae4 <usbdc_get_cfg_desc+0xa0>)
    ba6c:	7f1b      	ldrb	r3, [r3, #28]
    ba6e:	3b01      	subs	r3, #1
    ba70:	4013      	ands	r3, r2
    ba72:	2b00      	cmp	r3, #0
    ba74:	bf0c      	ite	eq
    ba76:	2301      	moveq	r3, #1
    ba78:	2300      	movne	r3, #0
    ba7a:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    ba7c:	697b      	ldr	r3, [r7, #20]
    ba7e:	2b00      	cmp	r3, #0
    ba80:	d10c      	bne.n	ba9c <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    ba82:	4b18      	ldr	r3, [pc, #96]	; (bae4 <usbdc_get_cfg_desc+0xa0>)
    ba84:	681b      	ldr	r3, [r3, #0]
    ba86:	6818      	ldr	r0, [r3, #0]
    ba88:	4b16      	ldr	r3, [pc, #88]	; (bae4 <usbdc_get_cfg_desc+0xa0>)
    ba8a:	681b      	ldr	r3, [r3, #0]
    ba8c:	6859      	ldr	r1, [r3, #4]
    ba8e:	7c3b      	ldrb	r3, [r7, #16]
    ba90:	3301      	adds	r3, #1
    ba92:	b2db      	uxtb	r3, r3
    ba94:	461a      	mov	r2, r3
    ba96:	4b14      	ldr	r3, [pc, #80]	; (bae8 <usbdc_get_cfg_desc+0xa4>)
    ba98:	4798      	blx	r3
    ba9a:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    ba9c:	697b      	ldr	r3, [r7, #20]
    ba9e:	2b00      	cmp	r3, #0
    baa0:	d101      	bne.n	baa6 <usbdc_get_cfg_desc+0x62>
		return false;
    baa2:	2300      	movs	r3, #0
    baa4:	e019      	b.n	bada <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    baa6:	6978      	ldr	r0, [r7, #20]
    baa8:	4b10      	ldr	r3, [pc, #64]	; (baec <usbdc_get_cfg_desc+0xa8>)
    baaa:	4798      	blx	r3
    baac:	4603      	mov	r3, r0
    baae:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    bab0:	8a7a      	ldrh	r2, [r7, #18]
    bab2:	89fb      	ldrh	r3, [r7, #14]
    bab4:	429a      	cmp	r2, r3
    bab6:	d802      	bhi.n	babe <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    bab8:	2300      	movs	r3, #0
    baba:	747b      	strb	r3, [r7, #17]
    babc:	e001      	b.n	bac2 <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    babe:	89fb      	ldrh	r3, [r7, #14]
    bac0:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    bac2:	8a7a      	ldrh	r2, [r7, #18]
    bac4:	7c7b      	ldrb	r3, [r7, #17]
    bac6:	79f8      	ldrb	r0, [r7, #7]
    bac8:	6979      	ldr	r1, [r7, #20]
    baca:	4c09      	ldr	r4, [pc, #36]	; (baf0 <usbdc_get_cfg_desc+0xac>)
    bacc:	47a0      	blx	r4
    bace:	4603      	mov	r3, r0
    bad0:	2b00      	cmp	r3, #0
    bad2:	d001      	beq.n	bad8 <usbdc_get_cfg_desc+0x94>
		return false;
    bad4:	2300      	movs	r3, #0
    bad6:	e000      	b.n	bada <usbdc_get_cfg_desc+0x96>
	}
	return true;
    bad8:	2301      	movs	r3, #1
}
    bada:	4618      	mov	r0, r3
    badc:	371c      	adds	r7, #28
    bade:	46bd      	mov	sp, r7
    bae0:	bd90      	pop	{r4, r7, pc}
    bae2:	bf00      	nop
    bae4:	20001168 	.word	0x20001168
    bae8:	0000c801 	.word	0x0000c801
    baec:	0000b9ad 	.word	0x0000b9ad
    baf0:	0000c4b1 	.word	0x0000c4b1

0000baf4 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    baf4:	b590      	push	{r4, r7, lr}
    baf6:	b085      	sub	sp, #20
    baf8:	af00      	add	r7, sp, #0
    bafa:	4603      	mov	r3, r0
    bafc:	6039      	str	r1, [r7, #0]
    bafe:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    bb00:	683b      	ldr	r3, [r7, #0]
    bb02:	799a      	ldrb	r2, [r3, #6]
    bb04:	79db      	ldrb	r3, [r3, #7]
    bb06:	021b      	lsls	r3, r3, #8
    bb08:	4313      	orrs	r3, r2
    bb0a:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    bb0c:	683b      	ldr	r3, [r7, #0]
    bb0e:	885b      	ldrh	r3, [r3, #2]
    bb10:	b29b      	uxth	r3, r3
    bb12:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    bb14:	89fa      	ldrh	r2, [r7, #14]
    bb16:	4b1a      	ldr	r3, [pc, #104]	; (bb80 <usbdc_get_str_desc+0x8c>)
    bb18:	7f1b      	ldrb	r3, [r3, #28]
    bb1a:	3b01      	subs	r3, #1
    bb1c:	4013      	ands	r3, r2
    bb1e:	2b00      	cmp	r3, #0
    bb20:	bf0c      	ite	eq
    bb22:	2301      	moveq	r3, #1
    bb24:	2300      	movne	r3, #0
    bb26:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    bb28:	4b15      	ldr	r3, [pc, #84]	; (bb80 <usbdc_get_str_desc+0x8c>)
    bb2a:	681b      	ldr	r3, [r3, #0]
    bb2c:	6818      	ldr	r0, [r3, #0]
    bb2e:	4b14      	ldr	r3, [pc, #80]	; (bb80 <usbdc_get_str_desc+0x8c>)
    bb30:	681b      	ldr	r3, [r3, #0]
    bb32:	685b      	ldr	r3, [r3, #4]
    bb34:	7b3a      	ldrb	r2, [r7, #12]
    bb36:	4619      	mov	r1, r3
    bb38:	4b12      	ldr	r3, [pc, #72]	; (bb84 <usbdc_get_str_desc+0x90>)
    bb3a:	4798      	blx	r3
    bb3c:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    bb3e:	68bb      	ldr	r3, [r7, #8]
    bb40:	2b00      	cmp	r3, #0
    bb42:	d101      	bne.n	bb48 <usbdc_get_str_desc+0x54>
		return false;
    bb44:	2300      	movs	r3, #0
    bb46:	e017      	b.n	bb78 <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    bb48:	68bb      	ldr	r3, [r7, #8]
    bb4a:	781b      	ldrb	r3, [r3, #0]
    bb4c:	b29b      	uxth	r3, r3
    bb4e:	89fa      	ldrh	r2, [r7, #14]
    bb50:	429a      	cmp	r2, r3
    bb52:	d802      	bhi.n	bb5a <usbdc_get_str_desc+0x66>
		need_zlp = false;
    bb54:	2300      	movs	r3, #0
    bb56:	737b      	strb	r3, [r7, #13]
    bb58:	e002      	b.n	bb60 <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    bb5a:	68bb      	ldr	r3, [r7, #8]
    bb5c:	781b      	ldrb	r3, [r3, #0]
    bb5e:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    bb60:	89fa      	ldrh	r2, [r7, #14]
    bb62:	7b7b      	ldrb	r3, [r7, #13]
    bb64:	79f8      	ldrb	r0, [r7, #7]
    bb66:	68b9      	ldr	r1, [r7, #8]
    bb68:	4c07      	ldr	r4, [pc, #28]	; (bb88 <usbdc_get_str_desc+0x94>)
    bb6a:	47a0      	blx	r4
    bb6c:	4603      	mov	r3, r0
    bb6e:	2b00      	cmp	r3, #0
    bb70:	d001      	beq.n	bb76 <usbdc_get_str_desc+0x82>
		return false;
    bb72:	2300      	movs	r3, #0
    bb74:	e000      	b.n	bb78 <usbdc_get_str_desc+0x84>
	}
	return true;
    bb76:	2301      	movs	r3, #1
}
    bb78:	4618      	mov	r0, r3
    bb7a:	3714      	adds	r7, #20
    bb7c:	46bd      	mov	sp, r7
    bb7e:	bd90      	pop	{r4, r7, pc}
    bb80:	20001168 	.word	0x20001168
    bb84:	0000c879 	.word	0x0000c879
    bb88:	0000c4b1 	.word	0x0000c4b1

0000bb8c <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    bb8c:	b580      	push	{r7, lr}
    bb8e:	b084      	sub	sp, #16
    bb90:	af00      	add	r7, sp, #0
    bb92:	4603      	mov	r3, r0
    bb94:	6039      	str	r1, [r7, #0]
    bb96:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    bb98:	683b      	ldr	r3, [r7, #0]
    bb9a:	885b      	ldrh	r3, [r3, #2]
    bb9c:	b29b      	uxth	r3, r3
    bb9e:	0a1b      	lsrs	r3, r3, #8
    bba0:	b29b      	uxth	r3, r3
    bba2:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    bba4:	7bfb      	ldrb	r3, [r7, #15]
    bba6:	2b02      	cmp	r3, #2
    bba8:	d00d      	beq.n	bbc6 <usbdc_get_desc_req+0x3a>
    bbaa:	2b03      	cmp	r3, #3
    bbac:	d012      	beq.n	bbd4 <usbdc_get_desc_req+0x48>
    bbae:	2b01      	cmp	r3, #1
    bbb0:	d002      	beq.n	bbb8 <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    bbb2:	bf00      	nop
	}
	return false;
    bbb4:	2300      	movs	r3, #0
    bbb6:	e013      	b.n	bbe0 <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    bbb8:	79fb      	ldrb	r3, [r7, #7]
    bbba:	6839      	ldr	r1, [r7, #0]
    bbbc:	4618      	mov	r0, r3
    bbbe:	4b0a      	ldr	r3, [pc, #40]	; (bbe8 <usbdc_get_desc_req+0x5c>)
    bbc0:	4798      	blx	r3
    bbc2:	4603      	mov	r3, r0
    bbc4:	e00c      	b.n	bbe0 <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    bbc6:	79fb      	ldrb	r3, [r7, #7]
    bbc8:	6839      	ldr	r1, [r7, #0]
    bbca:	4618      	mov	r0, r3
    bbcc:	4b07      	ldr	r3, [pc, #28]	; (bbec <usbdc_get_desc_req+0x60>)
    bbce:	4798      	blx	r3
    bbd0:	4603      	mov	r3, r0
    bbd2:	e005      	b.n	bbe0 <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    bbd4:	79fb      	ldrb	r3, [r7, #7]
    bbd6:	6839      	ldr	r1, [r7, #0]
    bbd8:	4618      	mov	r0, r3
    bbda:	4b05      	ldr	r3, [pc, #20]	; (bbf0 <usbdc_get_desc_req+0x64>)
    bbdc:	4798      	blx	r3
    bbde:	4603      	mov	r3, r0
}
    bbe0:	4618      	mov	r0, r3
    bbe2:	3710      	adds	r7, #16
    bbe4:	46bd      	mov	sp, r7
    bbe6:	bd80      	pop	{r7, pc}
    bbe8:	0000b9cd 	.word	0x0000b9cd
    bbec:	0000ba45 	.word	0x0000ba45
    bbf0:	0000baf5 	.word	0x0000baf5

0000bbf4 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    bbf4:	b590      	push	{r4, r7, lr}
    bbf6:	b085      	sub	sp, #20
    bbf8:	af00      	add	r7, sp, #0
    bbfa:	4603      	mov	r3, r0
    bbfc:	6039      	str	r1, [r7, #0]
    bbfe:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    bc00:	683b      	ldr	r3, [r7, #0]
    bc02:	781b      	ldrb	r3, [r3, #0]
    bc04:	f003 031f 	and.w	r3, r3, #31
    bc08:	2b00      	cmp	r3, #0
    bc0a:	db1b      	blt.n	bc44 <usbdc_get_status_req+0x50>
    bc0c:	2b01      	cmp	r3, #1
    bc0e:	dd02      	ble.n	bc16 <usbdc_get_status_req+0x22>
    bc10:	2b02      	cmp	r3, #2
    bc12:	d003      	beq.n	bc1c <usbdc_get_status_req+0x28>
    bc14:	e016      	b.n	bc44 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    bc16:	2300      	movs	r3, #0
    bc18:	60fb      	str	r3, [r7, #12]
		break;
    bc1a:	e015      	b.n	bc48 <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    bc1c:	683b      	ldr	r3, [r7, #0]
    bc1e:	889b      	ldrh	r3, [r3, #4]
    bc20:	b29b      	uxth	r3, r3
    bc22:	b2db      	uxtb	r3, r3
    bc24:	2102      	movs	r1, #2
    bc26:	4618      	mov	r0, r3
    bc28:	4b0f      	ldr	r3, [pc, #60]	; (bc68 <usbdc_get_status_req+0x74>)
    bc2a:	4798      	blx	r3
    bc2c:	4603      	mov	r3, r0
    bc2e:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    bc30:	68fb      	ldr	r3, [r7, #12]
    bc32:	2b00      	cmp	r3, #0
    bc34:	da01      	bge.n	bc3a <usbdc_get_status_req+0x46>
			return false;
    bc36:	2300      	movs	r3, #0
    bc38:	e012      	b.n	bc60 <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    bc3a:	68fb      	ldr	r3, [r7, #12]
    bc3c:	f003 0301 	and.w	r3, r3, #1
    bc40:	60fb      	str	r3, [r7, #12]
		break;
    bc42:	e001      	b.n	bc48 <usbdc_get_status_req+0x54>
	default:
		return false;
    bc44:	2300      	movs	r3, #0
    bc46:	e00b      	b.n	bc60 <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    bc48:	4b08      	ldr	r3, [pc, #32]	; (bc6c <usbdc_get_status_req+0x78>)
    bc4a:	695b      	ldr	r3, [r3, #20]
    bc4c:	89ba      	ldrh	r2, [r7, #12]
    bc4e:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    bc50:	4b06      	ldr	r3, [pc, #24]	; (bc6c <usbdc_get_status_req+0x78>)
    bc52:	6959      	ldr	r1, [r3, #20]
    bc54:	79f8      	ldrb	r0, [r7, #7]
    bc56:	2300      	movs	r3, #0
    bc58:	2202      	movs	r2, #2
    bc5a:	4c05      	ldr	r4, [pc, #20]	; (bc70 <usbdc_get_status_req+0x7c>)
    bc5c:	47a0      	blx	r4
	return true;
    bc5e:	2301      	movs	r3, #1
}
    bc60:	4618      	mov	r0, r3
    bc62:	3714      	adds	r7, #20
    bc64:	46bd      	mov	sp, r7
    bc66:	bd90      	pop	{r4, r7, pc}
    bc68:	00002c7d 	.word	0x00002c7d
    bc6c:	20001168 	.word	0x20001168
    bc70:	0000c4b1 	.word	0x0000c4b1

0000bc74 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    bc74:	b590      	push	{r4, r7, lr}
    bc76:	b085      	sub	sp, #20
    bc78:	af00      	add	r7, sp, #0
    bc7a:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    bc7c:	4b1f      	ldr	r3, [pc, #124]	; (bcfc <usbdc_get_interface+0x88>)
    bc7e:	691b      	ldr	r3, [r3, #16]
    bc80:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    bc82:	4b1e      	ldr	r3, [pc, #120]	; (bcfc <usbdc_get_interface+0x88>)
    bc84:	7f5b      	ldrb	r3, [r3, #29]
    bc86:	461a      	mov	r2, r3
    bc88:	687b      	ldr	r3, [r7, #4]
    bc8a:	889b      	ldrh	r3, [r3, #4]
    bc8c:	b29b      	uxth	r3, r3
    bc8e:	fa42 f303 	asr.w	r3, r2, r3
    bc92:	f003 0301 	and.w	r3, r3, #1
    bc96:	2b00      	cmp	r3, #0
    bc98:	d128      	bne.n	bcec <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    bc9a:	4b18      	ldr	r3, [pc, #96]	; (bcfc <usbdc_get_interface+0x88>)
    bc9c:	695b      	ldr	r3, [r3, #20]
    bc9e:	2200      	movs	r2, #0
    bca0:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    bca2:	4b16      	ldr	r3, [pc, #88]	; (bcfc <usbdc_get_interface+0x88>)
    bca4:	6959      	ldr	r1, [r3, #20]
    bca6:	2300      	movs	r3, #0
    bca8:	2201      	movs	r2, #1
    bcaa:	2000      	movs	r0, #0
    bcac:	4c14      	ldr	r4, [pc, #80]	; (bd00 <usbdc_get_interface+0x8c>)
    bcae:	47a0      	blx	r4
		return true;
    bcb0:	2301      	movs	r3, #1
    bcb2:	e01f      	b.n	bcf4 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    bcb4:	68fb      	ldr	r3, [r7, #12]
    bcb6:	685b      	ldr	r3, [r3, #4]
    bcb8:	687a      	ldr	r2, [r7, #4]
    bcba:	2102      	movs	r1, #2
    bcbc:	68f8      	ldr	r0, [r7, #12]
    bcbe:	4798      	blx	r3
    bcc0:	60b8      	str	r0, [r7, #8]
    bcc2:	68bb      	ldr	r3, [r7, #8]
    bcc4:	2b00      	cmp	r3, #0
    bcc6:	da03      	bge.n	bcd0 <usbdc_get_interface+0x5c>
			func = func->next;
    bcc8:	68fb      	ldr	r3, [r7, #12]
    bcca:	681b      	ldr	r3, [r3, #0]
    bccc:	60fb      	str	r3, [r7, #12]
    bcce:	e00d      	b.n	bcec <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    bcd0:	4b0a      	ldr	r3, [pc, #40]	; (bcfc <usbdc_get_interface+0x88>)
    bcd2:	695b      	ldr	r3, [r3, #20]
    bcd4:	68ba      	ldr	r2, [r7, #8]
    bcd6:	b2d2      	uxtb	r2, r2
    bcd8:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    bcda:	4b08      	ldr	r3, [pc, #32]	; (bcfc <usbdc_get_interface+0x88>)
    bcdc:	6959      	ldr	r1, [r3, #20]
    bcde:	2300      	movs	r3, #0
    bce0:	2201      	movs	r2, #1
    bce2:	2000      	movs	r0, #0
    bce4:	4c06      	ldr	r4, [pc, #24]	; (bd00 <usbdc_get_interface+0x8c>)
    bce6:	47a0      	blx	r4
			return true;
    bce8:	2301      	movs	r3, #1
    bcea:	e003      	b.n	bcf4 <usbdc_get_interface+0x80>
	while (NULL != func) {
    bcec:	68fb      	ldr	r3, [r7, #12]
    bcee:	2b00      	cmp	r3, #0
    bcf0:	d1e0      	bne.n	bcb4 <usbdc_get_interface+0x40>
		}
	}
	return false;
    bcf2:	2300      	movs	r3, #0
}
    bcf4:	4618      	mov	r0, r3
    bcf6:	3714      	adds	r7, #20
    bcf8:	46bd      	mov	sp, r7
    bcfa:	bd90      	pop	{r4, r7, pc}
    bcfc:	20001168 	.word	0x20001168
    bd00:	0000c4b1 	.word	0x0000c4b1

0000bd04 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    bd04:	b590      	push	{r4, r7, lr}
    bd06:	b083      	sub	sp, #12
    bd08:	af00      	add	r7, sp, #0
    bd0a:	4603      	mov	r3, r0
    bd0c:	6039      	str	r1, [r7, #0]
    bd0e:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    bd10:	683b      	ldr	r3, [r7, #0]
    bd12:	785b      	ldrb	r3, [r3, #1]
    bd14:	2b0a      	cmp	r3, #10
    bd16:	d83a      	bhi.n	bd8e <usbdc_get_req+0x8a>
    bd18:	a201      	add	r2, pc, #4	; (adr r2, bd20 <usbdc_get_req+0x1c>)
    bd1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    bd1e:	bf00      	nop
    bd20:	0000bd77 	.word	0x0000bd77
    bd24:	0000bd8f 	.word	0x0000bd8f
    bd28:	0000bd8f 	.word	0x0000bd8f
    bd2c:	0000bd8f 	.word	0x0000bd8f
    bd30:	0000bd8f 	.word	0x0000bd8f
    bd34:	0000bd8f 	.word	0x0000bd8f
    bd38:	0000bd4d 	.word	0x0000bd4d
    bd3c:	0000bd8f 	.word	0x0000bd8f
    bd40:	0000bd5b 	.word	0x0000bd5b
    bd44:	0000bd8f 	.word	0x0000bd8f
    bd48:	0000bd85 	.word	0x0000bd85
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    bd4c:	79fb      	ldrb	r3, [r7, #7]
    bd4e:	6839      	ldr	r1, [r7, #0]
    bd50:	4618      	mov	r0, r3
    bd52:	4b11      	ldr	r3, [pc, #68]	; (bd98 <usbdc_get_req+0x94>)
    bd54:	4798      	blx	r3
    bd56:	4603      	mov	r3, r0
    bd58:	e01a      	b.n	bd90 <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    bd5a:	4b10      	ldr	r3, [pc, #64]	; (bd9c <usbdc_get_req+0x98>)
    bd5c:	695b      	ldr	r3, [r3, #20]
    bd5e:	4a0f      	ldr	r2, [pc, #60]	; (bd9c <usbdc_get_req+0x98>)
    bd60:	7ed2      	ldrb	r2, [r2, #27]
    bd62:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    bd64:	4b0d      	ldr	r3, [pc, #52]	; (bd9c <usbdc_get_req+0x98>)
    bd66:	6959      	ldr	r1, [r3, #20]
    bd68:	79f8      	ldrb	r0, [r7, #7]
    bd6a:	2300      	movs	r3, #0
    bd6c:	2201      	movs	r2, #1
    bd6e:	4c0c      	ldr	r4, [pc, #48]	; (bda0 <usbdc_get_req+0x9c>)
    bd70:	47a0      	blx	r4
		return true;
    bd72:	2301      	movs	r3, #1
    bd74:	e00c      	b.n	bd90 <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    bd76:	79fb      	ldrb	r3, [r7, #7]
    bd78:	6839      	ldr	r1, [r7, #0]
    bd7a:	4618      	mov	r0, r3
    bd7c:	4b09      	ldr	r3, [pc, #36]	; (bda4 <usbdc_get_req+0xa0>)
    bd7e:	4798      	blx	r3
    bd80:	4603      	mov	r3, r0
    bd82:	e005      	b.n	bd90 <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    bd84:	6838      	ldr	r0, [r7, #0]
    bd86:	4b08      	ldr	r3, [pc, #32]	; (bda8 <usbdc_get_req+0xa4>)
    bd88:	4798      	blx	r3
    bd8a:	4603      	mov	r3, r0
    bd8c:	e000      	b.n	bd90 <usbdc_get_req+0x8c>
	default:
		return false;
    bd8e:	2300      	movs	r3, #0
	}
}
    bd90:	4618      	mov	r0, r3
    bd92:	370c      	adds	r7, #12
    bd94:	46bd      	mov	sp, r7
    bd96:	bd90      	pop	{r4, r7, pc}
    bd98:	0000bb8d 	.word	0x0000bb8d
    bd9c:	20001168 	.word	0x20001168
    bda0:	0000c4b1 	.word	0x0000c4b1
    bda4:	0000bbf5 	.word	0x0000bbf5
    bda8:	0000bc75 	.word	0x0000bc75

0000bdac <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    bdac:	b590      	push	{r4, r7, lr}
    bdae:	b083      	sub	sp, #12
    bdb0:	af00      	add	r7, sp, #0
    bdb2:	4603      	mov	r3, r0
    bdb4:	6039      	str	r1, [r7, #0]
    bdb6:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    bdb8:	683b      	ldr	r3, [r7, #0]
    bdba:	781b      	ldrb	r3, [r3, #0]
    bdbc:	f003 031f 	and.w	r3, r3, #31
    bdc0:	2b02      	cmp	r3, #2
    bdc2:	d116      	bne.n	bdf2 <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    bdc4:	683b      	ldr	r3, [r7, #0]
    bdc6:	88db      	ldrh	r3, [r3, #6]
    bdc8:	b29b      	uxth	r3, r3
    bdca:	2b00      	cmp	r3, #0
    bdcc:	d001      	beq.n	bdd2 <usbdc_clear_ftr_req+0x26>
			return false;
    bdce:	2300      	movs	r3, #0
    bdd0:	e010      	b.n	bdf4 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    bdd2:	683b      	ldr	r3, [r7, #0]
    bdd4:	889b      	ldrh	r3, [r3, #4]
    bdd6:	b29b      	uxth	r3, r3
    bdd8:	b2db      	uxtb	r3, r3
    bdda:	2100      	movs	r1, #0
    bddc:	4618      	mov	r0, r3
    bdde:	4b07      	ldr	r3, [pc, #28]	; (bdfc <usbdc_clear_ftr_req+0x50>)
    bde0:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    bde2:	79f8      	ldrb	r0, [r7, #7]
    bde4:	2301      	movs	r3, #1
    bde6:	2200      	movs	r2, #0
    bde8:	2100      	movs	r1, #0
    bdea:	4c05      	ldr	r4, [pc, #20]	; (be00 <usbdc_clear_ftr_req+0x54>)
    bdec:	47a0      	blx	r4
		return true;
    bdee:	2301      	movs	r3, #1
    bdf0:	e000      	b.n	bdf4 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    bdf2:	2300      	movs	r3, #0
	}
}
    bdf4:	4618      	mov	r0, r3
    bdf6:	370c      	adds	r7, #12
    bdf8:	46bd      	mov	sp, r7
    bdfa:	bd90      	pop	{r4, r7, pc}
    bdfc:	00002c7d 	.word	0x00002c7d
    be00:	0000c4b1 	.word	0x0000c4b1

0000be04 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    be04:	b590      	push	{r4, r7, lr}
    be06:	b083      	sub	sp, #12
    be08:	af00      	add	r7, sp, #0
    be0a:	4603      	mov	r3, r0
    be0c:	6039      	str	r1, [r7, #0]
    be0e:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    be10:	683b      	ldr	r3, [r7, #0]
    be12:	781b      	ldrb	r3, [r3, #0]
    be14:	f003 031f 	and.w	r3, r3, #31
    be18:	2b02      	cmp	r3, #2
    be1a:	d116      	bne.n	be4a <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    be1c:	683b      	ldr	r3, [r7, #0]
    be1e:	88db      	ldrh	r3, [r3, #6]
    be20:	b29b      	uxth	r3, r3
    be22:	2b00      	cmp	r3, #0
    be24:	d001      	beq.n	be2a <usbdc_set_ftr_req+0x26>
			return false;
    be26:	2300      	movs	r3, #0
    be28:	e010      	b.n	be4c <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    be2a:	683b      	ldr	r3, [r7, #0]
    be2c:	889b      	ldrh	r3, [r3, #4]
    be2e:	b29b      	uxth	r3, r3
    be30:	b2db      	uxtb	r3, r3
    be32:	2101      	movs	r1, #1
    be34:	4618      	mov	r0, r3
    be36:	4b07      	ldr	r3, [pc, #28]	; (be54 <usbdc_set_ftr_req+0x50>)
    be38:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    be3a:	79f8      	ldrb	r0, [r7, #7]
    be3c:	2301      	movs	r3, #1
    be3e:	2200      	movs	r2, #0
    be40:	2100      	movs	r1, #0
    be42:	4c05      	ldr	r4, [pc, #20]	; (be58 <usbdc_set_ftr_req+0x54>)
    be44:	47a0      	blx	r4
		return true;
    be46:	2301      	movs	r3, #1
    be48:	e000      	b.n	be4c <usbdc_set_ftr_req+0x48>
	default:
		return false;
    be4a:	2300      	movs	r3, #0
	}
}
    be4c:	4618      	mov	r0, r3
    be4e:	370c      	adds	r7, #12
    be50:	46bd      	mov	sp, r7
    be52:	bd90      	pop	{r4, r7, pc}
    be54:	00002c7d 	.word	0x00002c7d
    be58:	0000c4b1 	.word	0x0000c4b1

0000be5c <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    be5c:	b580      	push	{r7, lr}
    be5e:	b082      	sub	sp, #8
    be60:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    be62:	4b0a      	ldr	r3, [pc, #40]	; (be8c <usbdc_unconfig+0x30>)
    be64:	691b      	ldr	r3, [r3, #16]
    be66:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    be68:	e008      	b.n	be7c <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    be6a:	687b      	ldr	r3, [r7, #4]
    be6c:	685b      	ldr	r3, [r3, #4]
    be6e:	2200      	movs	r2, #0
    be70:	2101      	movs	r1, #1
    be72:	6878      	ldr	r0, [r7, #4]
    be74:	4798      	blx	r3
		func = func->next;
    be76:	687b      	ldr	r3, [r7, #4]
    be78:	681b      	ldr	r3, [r3, #0]
    be7a:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    be7c:	687b      	ldr	r3, [r7, #4]
    be7e:	2b00      	cmp	r3, #0
    be80:	d1f3      	bne.n	be6a <usbdc_unconfig+0xe>
	}
}
    be82:	bf00      	nop
    be84:	3708      	adds	r7, #8
    be86:	46bd      	mov	sp, r7
    be88:	bd80      	pop	{r7, pc}
    be8a:	bf00      	nop
    be8c:	20001168 	.word	0x20001168

0000be90 <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    be90:	b580      	push	{r7, lr}
    be92:	b088      	sub	sp, #32
    be94:	af00      	add	r7, sp, #0
    be96:	4603      	mov	r3, r0
    be98:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    be9a:	2300      	movs	r3, #0
    be9c:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    be9e:	23ff      	movs	r3, #255	; 0xff
    bea0:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    bea2:	79fb      	ldrb	r3, [r7, #7]
    bea4:	2b00      	cmp	r3, #0
    bea6:	d103      	bne.n	beb0 <usbdc_set_config+0x20>
		usbdc_unconfig();
    bea8:	4b2e      	ldr	r3, [pc, #184]	; (bf64 <usbdc_set_config+0xd4>)
    beaa:	4798      	blx	r3
		return true;
    beac:	2301      	movs	r3, #1
    beae:	e055      	b.n	bf5c <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    beb0:	69bb      	ldr	r3, [r7, #24]
    beb2:	2b00      	cmp	r3, #0
    beb4:	d10a      	bne.n	becc <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    beb6:	4b2c      	ldr	r3, [pc, #176]	; (bf68 <usbdc_set_config+0xd8>)
    beb8:	681b      	ldr	r3, [r3, #0]
    beba:	6818      	ldr	r0, [r3, #0]
    bebc:	4b2a      	ldr	r3, [pc, #168]	; (bf68 <usbdc_set_config+0xd8>)
    bebe:	681b      	ldr	r3, [r3, #0]
    bec0:	685b      	ldr	r3, [r3, #4]
    bec2:	79fa      	ldrb	r2, [r7, #7]
    bec4:	4619      	mov	r1, r3
    bec6:	4b29      	ldr	r3, [pc, #164]	; (bf6c <usbdc_set_config+0xdc>)
    bec8:	4798      	blx	r3
    beca:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    becc:	69bb      	ldr	r3, [r7, #24]
    bece:	2b00      	cmp	r3, #0
    bed0:	d101      	bne.n	bed6 <usbdc_set_config+0x46>
		return false;
    bed2:	2300      	movs	r3, #0
    bed4:	e042      	b.n	bf5c <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    bed6:	69b8      	ldr	r0, [r7, #24]
    bed8:	4b25      	ldr	r3, [pc, #148]	; (bf70 <usbdc_set_config+0xe0>)
    beda:	4798      	blx	r3
    bedc:	4603      	mov	r3, r0
    bede:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    bee0:	8abb      	ldrh	r3, [r7, #20]
    bee2:	69ba      	ldr	r2, [r7, #24]
    bee4:	4413      	add	r3, r2
    bee6:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    bee8:	693b      	ldr	r3, [r7, #16]
    beea:	2204      	movs	r2, #4
    beec:	4619      	mov	r1, r3
    beee:	69b8      	ldr	r0, [r7, #24]
    bef0:	4b20      	ldr	r3, [pc, #128]	; (bf74 <usbdc_set_config+0xe4>)
    bef2:	4798      	blx	r3
    bef4:	4603      	mov	r3, r0
    bef6:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    bef8:	e02c      	b.n	bf54 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    befa:	68fb      	ldr	r3, [r7, #12]
    befc:	3302      	adds	r3, #2
    befe:	781b      	ldrb	r3, [r3, #0]
    bf00:	7dfa      	ldrb	r2, [r7, #23]
    bf02:	429a      	cmp	r2, r3
    bf04:	d018      	beq.n	bf38 <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    bf06:	68fb      	ldr	r3, [r7, #12]
    bf08:	789b      	ldrb	r3, [r3, #2]
    bf0a:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    bf0c:	4b16      	ldr	r3, [pc, #88]	; (bf68 <usbdc_set_config+0xd8>)
    bf0e:	691b      	ldr	r3, [r3, #16]
    bf10:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    bf12:	e00c      	b.n	bf2e <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    bf14:	69fb      	ldr	r3, [r7, #28]
    bf16:	685b      	ldr	r3, [r3, #4]
    bf18:	f107 020c 	add.w	r2, r7, #12
    bf1c:	2100      	movs	r1, #0
    bf1e:	69f8      	ldr	r0, [r7, #28]
    bf20:	4798      	blx	r3
    bf22:	4603      	mov	r3, r0
    bf24:	2b00      	cmp	r3, #0
    bf26:	d006      	beq.n	bf36 <usbdc_set_config+0xa6>
					func = func->next;
    bf28:	69fb      	ldr	r3, [r7, #28]
    bf2a:	681b      	ldr	r3, [r3, #0]
    bf2c:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    bf2e:	69fb      	ldr	r3, [r7, #28]
    bf30:	2b00      	cmp	r3, #0
    bf32:	d1ef      	bne.n	bf14 <usbdc_set_config+0x84>
    bf34:	e000      	b.n	bf38 <usbdc_set_config+0xa8>
				} else {
					break;
    bf36:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    bf38:	68fb      	ldr	r3, [r7, #12]
    bf3a:	4618      	mov	r0, r3
    bf3c:	4b0e      	ldr	r3, [pc, #56]	; (bf78 <usbdc_set_config+0xe8>)
    bf3e:	4798      	blx	r3
    bf40:	4603      	mov	r3, r0
    bf42:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    bf44:	68fb      	ldr	r3, [r7, #12]
    bf46:	6939      	ldr	r1, [r7, #16]
    bf48:	2204      	movs	r2, #4
    bf4a:	4618      	mov	r0, r3
    bf4c:	4b09      	ldr	r3, [pc, #36]	; (bf74 <usbdc_set_config+0xe4>)
    bf4e:	4798      	blx	r3
    bf50:	4603      	mov	r3, r0
    bf52:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    bf54:	68fb      	ldr	r3, [r7, #12]
    bf56:	2b00      	cmp	r3, #0
    bf58:	d1cf      	bne.n	befa <usbdc_set_config+0x6a>
	}
	return true;
    bf5a:	2301      	movs	r3, #1
}
    bf5c:	4618      	mov	r0, r3
    bf5e:	3720      	adds	r7, #32
    bf60:	46bd      	mov	sp, r7
    bf62:	bd80      	pop	{r7, pc}
    bf64:	0000be5d 	.word	0x0000be5d
    bf68:	20001168 	.word	0x20001168
    bf6c:	0000c801 	.word	0x0000c801
    bf70:	0000b9ad 	.word	0x0000b9ad
    bf74:	0000c741 	.word	0x0000c741
    bf78:	0000b989 	.word	0x0000b989

0000bf7c <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    bf7c:	b580      	push	{r7, lr}
    bf7e:	b082      	sub	sp, #8
    bf80:	af00      	add	r7, sp, #0
    bf82:	4603      	mov	r3, r0
    bf84:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    bf86:	79fb      	ldrb	r3, [r7, #7]
    bf88:	4618      	mov	r0, r3
    bf8a:	4b03      	ldr	r3, [pc, #12]	; (bf98 <usbdc_set_address+0x1c>)
    bf8c:	4798      	blx	r3
}
    bf8e:	bf00      	nop
    bf90:	3708      	adds	r7, #8
    bf92:	46bd      	mov	sp, r7
    bf94:	bd80      	pop	{r7, pc}
    bf96:	bf00      	nop
    bf98:	000028ed 	.word	0x000028ed

0000bf9c <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    bf9c:	b590      	push	{r4, r7, lr}
    bf9e:	b087      	sub	sp, #28
    bfa0:	af00      	add	r7, sp, #0
    bfa2:	4603      	mov	r3, r0
    bfa4:	460a      	mov	r2, r1
    bfa6:	80fb      	strh	r3, [r7, #6]
    bfa8:	4613      	mov	r3, r2
    bfaa:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    bfac:	2300      	movs	r3, #0
    bfae:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    bfb0:	693b      	ldr	r3, [r7, #16]
    bfb2:	2b00      	cmp	r3, #0
    bfb4:	d10b      	bne.n	bfce <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    bfb6:	4b43      	ldr	r3, [pc, #268]	; (c0c4 <usbdc_set_interface+0x128>)
    bfb8:	681b      	ldr	r3, [r3, #0]
    bfba:	6818      	ldr	r0, [r3, #0]
    bfbc:	4b41      	ldr	r3, [pc, #260]	; (c0c4 <usbdc_set_interface+0x128>)
    bfbe:	681b      	ldr	r3, [r3, #0]
    bfc0:	6859      	ldr	r1, [r3, #4]
    bfc2:	4b40      	ldr	r3, [pc, #256]	; (c0c4 <usbdc_set_interface+0x128>)
    bfc4:	7edb      	ldrb	r3, [r3, #27]
    bfc6:	461a      	mov	r2, r3
    bfc8:	4b3f      	ldr	r3, [pc, #252]	; (c0c8 <usbdc_set_interface+0x12c>)
    bfca:	4798      	blx	r3
    bfcc:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    bfce:	693b      	ldr	r3, [r7, #16]
    bfd0:	2b00      	cmp	r3, #0
    bfd2:	d101      	bne.n	bfd8 <usbdc_set_interface+0x3c>
		return false;
    bfd4:	2300      	movs	r3, #0
    bfd6:	e071      	b.n	c0bc <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    bfd8:	693b      	ldr	r3, [r7, #16]
    bfda:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    bfdc:	6938      	ldr	r0, [r7, #16]
    bfde:	4b3b      	ldr	r3, [pc, #236]	; (c0cc <usbdc_set_interface+0x130>)
    bfe0:	4798      	blx	r3
    bfe2:	4603      	mov	r3, r0
    bfe4:	461a      	mov	r2, r3
    bfe6:	693b      	ldr	r3, [r7, #16]
    bfe8:	4413      	add	r3, r2
    bfea:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    bfec:	68bb      	ldr	r3, [r7, #8]
    bfee:	68f9      	ldr	r1, [r7, #12]
    bff0:	2204      	movs	r2, #4
    bff2:	4618      	mov	r0, r3
    bff4:	4b36      	ldr	r3, [pc, #216]	; (c0d0 <usbdc_set_interface+0x134>)
    bff6:	4798      	blx	r3
    bff8:	6138      	str	r0, [r7, #16]
    bffa:	693b      	ldr	r3, [r7, #16]
    bffc:	2b00      	cmp	r3, #0
    bffe:	d113      	bne.n	c028 <usbdc_set_interface+0x8c>
		return false;
    c000:	2300      	movs	r3, #0
    c002:	e05b      	b.n	c0bc <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    c004:	68bb      	ldr	r3, [r7, #8]
    c006:	4618      	mov	r0, r3
    c008:	4b32      	ldr	r3, [pc, #200]	; (c0d4 <usbdc_set_interface+0x138>)
    c00a:	4798      	blx	r3
    c00c:	4603      	mov	r3, r0
    c00e:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c010:	68bb      	ldr	r3, [r7, #8]
    c012:	68f9      	ldr	r1, [r7, #12]
    c014:	2204      	movs	r2, #4
    c016:	4618      	mov	r0, r3
    c018:	4b2d      	ldr	r3, [pc, #180]	; (c0d0 <usbdc_set_interface+0x134>)
    c01a:	4798      	blx	r3
    c01c:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    c01e:	693b      	ldr	r3, [r7, #16]
    c020:	2b00      	cmp	r3, #0
    c022:	d101      	bne.n	c028 <usbdc_set_interface+0x8c>
			return false;
    c024:	2300      	movs	r3, #0
    c026:	e049      	b.n	c0bc <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    c028:	693b      	ldr	r3, [r7, #16]
    c02a:	3302      	adds	r3, #2
    c02c:	781b      	ldrb	r3, [r3, #0]
    c02e:	b29b      	uxth	r3, r3
    c030:	88ba      	ldrh	r2, [r7, #4]
    c032:	429a      	cmp	r2, r3
    c034:	d1e6      	bne.n	c004 <usbdc_set_interface+0x68>
    c036:	693b      	ldr	r3, [r7, #16]
    c038:	3303      	adds	r3, #3
    c03a:	781b      	ldrb	r3, [r3, #0]
    c03c:	b29b      	uxth	r3, r3
    c03e:	88fa      	ldrh	r2, [r7, #6]
    c040:	429a      	cmp	r2, r3
    c042:	d1df      	bne.n	c004 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    c044:	693b      	ldr	r3, [r7, #16]
    c046:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    c048:	4b1e      	ldr	r3, [pc, #120]	; (c0c4 <usbdc_set_interface+0x128>)
    c04a:	691b      	ldr	r3, [r3, #16]
    c04c:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    c04e:	e031      	b.n	c0b4 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    c050:	697b      	ldr	r3, [r7, #20]
    c052:	685b      	ldr	r3, [r3, #4]
    c054:	f107 0208 	add.w	r2, r7, #8
    c058:	2101      	movs	r1, #1
    c05a:	6978      	ldr	r0, [r7, #20]
    c05c:	4798      	blx	r3
    c05e:	4603      	mov	r3, r0
    c060:	2b00      	cmp	r3, #0
    c062:	d003      	beq.n	c06c <usbdc_set_interface+0xd0>
			func = func->next;
    c064:	697b      	ldr	r3, [r7, #20]
    c066:	681b      	ldr	r3, [r3, #0]
    c068:	617b      	str	r3, [r7, #20]
    c06a:	e023      	b.n	c0b4 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    c06c:	697b      	ldr	r3, [r7, #20]
    c06e:	685b      	ldr	r3, [r3, #4]
    c070:	f107 0208 	add.w	r2, r7, #8
    c074:	2100      	movs	r1, #0
    c076:	6978      	ldr	r0, [r7, #20]
    c078:	4798      	blx	r3
    c07a:	4603      	mov	r3, r0
    c07c:	2b00      	cmp	r3, #0
    c07e:	d117      	bne.n	c0b0 <usbdc_set_interface+0x114>
			if (alt_set) {
    c080:	88fb      	ldrh	r3, [r7, #6]
    c082:	2b00      	cmp	r3, #0
    c084:	d00c      	beq.n	c0a0 <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    c086:	4b0f      	ldr	r3, [pc, #60]	; (c0c4 <usbdc_set_interface+0x128>)
    c088:	7f5b      	ldrb	r3, [r3, #29]
    c08a:	b25a      	sxtb	r2, r3
    c08c:	88bb      	ldrh	r3, [r7, #4]
    c08e:	2101      	movs	r1, #1
    c090:	fa01 f303 	lsl.w	r3, r1, r3
    c094:	b25b      	sxtb	r3, r3
    c096:	4313      	orrs	r3, r2
    c098:	b25b      	sxtb	r3, r3
    c09a:	b2da      	uxtb	r2, r3
    c09c:	4b09      	ldr	r3, [pc, #36]	; (c0c4 <usbdc_set_interface+0x128>)
    c09e:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    c0a0:	2300      	movs	r3, #0
    c0a2:	2200      	movs	r2, #0
    c0a4:	2100      	movs	r1, #0
    c0a6:	2000      	movs	r0, #0
    c0a8:	4c0b      	ldr	r4, [pc, #44]	; (c0d8 <usbdc_set_interface+0x13c>)
    c0aa:	47a0      	blx	r4
			return true;
    c0ac:	2301      	movs	r3, #1
    c0ae:	e005      	b.n	c0bc <usbdc_set_interface+0x120>
		} else {
			return false;
    c0b0:	2300      	movs	r3, #0
    c0b2:	e003      	b.n	c0bc <usbdc_set_interface+0x120>
	while (NULL != func) {
    c0b4:	697b      	ldr	r3, [r7, #20]
    c0b6:	2b00      	cmp	r3, #0
    c0b8:	d1ca      	bne.n	c050 <usbdc_set_interface+0xb4>
		}
	}

	return false;
    c0ba:	2300      	movs	r3, #0
}
    c0bc:	4618      	mov	r0, r3
    c0be:	371c      	adds	r7, #28
    c0c0:	46bd      	mov	sp, r7
    c0c2:	bd90      	pop	{r4, r7, pc}
    c0c4:	20001168 	.word	0x20001168
    c0c8:	0000c801 	.word	0x0000c801
    c0cc:	0000b9ad 	.word	0x0000b9ad
    c0d0:	0000c741 	.word	0x0000c741
    c0d4:	0000b989 	.word	0x0000b989
    c0d8:	0000c4b1 	.word	0x0000c4b1

0000c0dc <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    c0dc:	b590      	push	{r4, r7, lr}
    c0de:	b083      	sub	sp, #12
    c0e0:	af00      	add	r7, sp, #0
    c0e2:	4603      	mov	r3, r0
    c0e4:	6039      	str	r1, [r7, #0]
    c0e6:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    c0e8:	683b      	ldr	r3, [r7, #0]
    c0ea:	785b      	ldrb	r3, [r3, #1]
    c0ec:	3b01      	subs	r3, #1
    c0ee:	2b0a      	cmp	r3, #10
    c0f0:	d85b      	bhi.n	c1aa <usbdc_set_req+0xce>
    c0f2:	a201      	add	r2, pc, #4	; (adr r2, c0f8 <usbdc_set_req+0x1c>)
    c0f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c0f8:	0000c177 	.word	0x0000c177
    c0fc:	0000c1ab 	.word	0x0000c1ab
    c100:	0000c185 	.word	0x0000c185
    c104:	0000c1ab 	.word	0x0000c1ab
    c108:	0000c125 	.word	0x0000c125
    c10c:	0000c1ab 	.word	0x0000c1ab
    c110:	0000c1ab 	.word	0x0000c1ab
    c114:	0000c1ab 	.word	0x0000c1ab
    c118:	0000c13f 	.word	0x0000c13f
    c11c:	0000c1ab 	.word	0x0000c1ab
    c120:	0000c193 	.word	0x0000c193
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    c124:	79f8      	ldrb	r0, [r7, #7]
    c126:	2301      	movs	r3, #1
    c128:	2200      	movs	r2, #0
    c12a:	2100      	movs	r1, #0
    c12c:	4c21      	ldr	r4, [pc, #132]	; (c1b4 <usbdc_set_req+0xd8>)
    c12e:	47a0      	blx	r4
    c130:	4603      	mov	r3, r0
    c132:	2b00      	cmp	r3, #0
    c134:	bf0c      	ite	eq
    c136:	2301      	moveq	r3, #1
    c138:	2300      	movne	r3, #0
    c13a:	b2db      	uxtb	r3, r3
    c13c:	e036      	b.n	c1ac <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    c13e:	683b      	ldr	r3, [r7, #0]
    c140:	885b      	ldrh	r3, [r3, #2]
    c142:	b29b      	uxth	r3, r3
    c144:	b2db      	uxtb	r3, r3
    c146:	4618      	mov	r0, r3
    c148:	4b1b      	ldr	r3, [pc, #108]	; (c1b8 <usbdc_set_req+0xdc>)
    c14a:	4798      	blx	r3
    c14c:	4603      	mov	r3, r0
    c14e:	f083 0301 	eor.w	r3, r3, #1
    c152:	b2db      	uxtb	r3, r3
    c154:	2b00      	cmp	r3, #0
    c156:	d001      	beq.n	c15c <usbdc_set_req+0x80>
			return false;
    c158:	2300      	movs	r3, #0
    c15a:	e027      	b.n	c1ac <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    c15c:	79f8      	ldrb	r0, [r7, #7]
    c15e:	2301      	movs	r3, #1
    c160:	2200      	movs	r2, #0
    c162:	2100      	movs	r1, #0
    c164:	4c13      	ldr	r4, [pc, #76]	; (c1b4 <usbdc_set_req+0xd8>)
    c166:	47a0      	blx	r4
    c168:	4603      	mov	r3, r0
    c16a:	2b00      	cmp	r3, #0
    c16c:	bf0c      	ite	eq
    c16e:	2301      	moveq	r3, #1
    c170:	2300      	movne	r3, #0
    c172:	b2db      	uxtb	r3, r3
    c174:	e01a      	b.n	c1ac <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    c176:	79fb      	ldrb	r3, [r7, #7]
    c178:	6839      	ldr	r1, [r7, #0]
    c17a:	4618      	mov	r0, r3
    c17c:	4b0f      	ldr	r3, [pc, #60]	; (c1bc <usbdc_set_req+0xe0>)
    c17e:	4798      	blx	r3
    c180:	4603      	mov	r3, r0
    c182:	e013      	b.n	c1ac <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    c184:	79fb      	ldrb	r3, [r7, #7]
    c186:	6839      	ldr	r1, [r7, #0]
    c188:	4618      	mov	r0, r3
    c18a:	4b0d      	ldr	r3, [pc, #52]	; (c1c0 <usbdc_set_req+0xe4>)
    c18c:	4798      	blx	r3
    c18e:	4603      	mov	r3, r0
    c190:	e00c      	b.n	c1ac <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    c192:	683b      	ldr	r3, [r7, #0]
    c194:	885b      	ldrh	r3, [r3, #2]
    c196:	b29a      	uxth	r2, r3
    c198:	683b      	ldr	r3, [r7, #0]
    c19a:	889b      	ldrh	r3, [r3, #4]
    c19c:	b29b      	uxth	r3, r3
    c19e:	4619      	mov	r1, r3
    c1a0:	4610      	mov	r0, r2
    c1a2:	4b08      	ldr	r3, [pc, #32]	; (c1c4 <usbdc_set_req+0xe8>)
    c1a4:	4798      	blx	r3
    c1a6:	4603      	mov	r3, r0
    c1a8:	e000      	b.n	c1ac <usbdc_set_req+0xd0>
	default:
		return false;
    c1aa:	2300      	movs	r3, #0
	}
}
    c1ac:	4618      	mov	r0, r3
    c1ae:	370c      	adds	r7, #12
    c1b0:	46bd      	mov	sp, r7
    c1b2:	bd90      	pop	{r4, r7, pc}
    c1b4:	0000c4b1 	.word	0x0000c4b1
    c1b8:	0000be91 	.word	0x0000be91
    c1bc:	0000bdad 	.word	0x0000bdad
    c1c0:	0000be05 	.word	0x0000be05
    c1c4:	0000bf9d 	.word	0x0000bf9d

0000c1c8 <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    c1c8:	b580      	push	{r7, lr}
    c1ca:	b082      	sub	sp, #8
    c1cc:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    c1ce:	4b0a      	ldr	r3, [pc, #40]	; (c1f8 <usbdc_sof_notify+0x30>)
    c1d0:	685b      	ldr	r3, [r3, #4]
    c1d2:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    c1d4:	e009      	b.n	c1ea <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    c1d6:	687b      	ldr	r3, [r7, #4]
    c1d8:	685b      	ldr	r3, [r3, #4]
    c1da:	2b00      	cmp	r3, #0
    c1dc:	d002      	beq.n	c1e4 <usbdc_sof_notify+0x1c>
			sof->cb();
    c1de:	687b      	ldr	r3, [r7, #4]
    c1e0:	685b      	ldr	r3, [r3, #4]
    c1e2:	4798      	blx	r3
		}
		sof = sof->next;
    c1e4:	687b      	ldr	r3, [r7, #4]
    c1e6:	681b      	ldr	r3, [r3, #0]
    c1e8:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    c1ea:	687b      	ldr	r3, [r7, #4]
    c1ec:	2b00      	cmp	r3, #0
    c1ee:	d1f2      	bne.n	c1d6 <usbdc_sof_notify+0xe>
	}
}
    c1f0:	bf00      	nop
    c1f2:	3708      	adds	r7, #8
    c1f4:	46bd      	mov	sp, r7
    c1f6:	bd80      	pop	{r7, pc}
    c1f8:	20001168 	.word	0x20001168

0000c1fc <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    c1fc:	b580      	push	{r7, lr}
    c1fe:	b084      	sub	sp, #16
    c200:	af00      	add	r7, sp, #0
    c202:	4603      	mov	r3, r0
    c204:	6039      	str	r1, [r7, #0]
    c206:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    c208:	4b0b      	ldr	r3, [pc, #44]	; (c238 <usbdc_change_notify+0x3c>)
    c20a:	68db      	ldr	r3, [r3, #12]
    c20c:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    c20e:	e00c      	b.n	c22a <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    c210:	68fb      	ldr	r3, [r7, #12]
    c212:	685b      	ldr	r3, [r3, #4]
    c214:	2b00      	cmp	r3, #0
    c216:	d005      	beq.n	c224 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    c218:	68fb      	ldr	r3, [r7, #12]
    c21a:	685b      	ldr	r3, [r3, #4]
    c21c:	79fa      	ldrb	r2, [r7, #7]
    c21e:	6839      	ldr	r1, [r7, #0]
    c220:	4610      	mov	r0, r2
    c222:	4798      	blx	r3
		}
		cg = cg->next;
    c224:	68fb      	ldr	r3, [r7, #12]
    c226:	681b      	ldr	r3, [r3, #0]
    c228:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    c22a:	68fb      	ldr	r3, [r7, #12]
    c22c:	2b00      	cmp	r3, #0
    c22e:	d1ef      	bne.n	c210 <usbdc_change_notify+0x14>
	}
}
    c230:	bf00      	nop
    c232:	3710      	adds	r7, #16
    c234:	46bd      	mov	sp, r7
    c236:	bd80      	pop	{r7, pc}
    c238:	20001168 	.word	0x20001168

0000c23c <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c23c:	b580      	push	{r7, lr}
    c23e:	b084      	sub	sp, #16
    c240:	af00      	add	r7, sp, #0
    c242:	4603      	mov	r3, r0
    c244:	6039      	str	r1, [r7, #0]
    c246:	71fb      	strb	r3, [r7, #7]
    c248:	4613      	mov	r3, r2
    c24a:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    c24c:	4b12      	ldr	r3, [pc, #72]	; (c298 <usbdc_request_handler+0x5c>)
    c24e:	689b      	ldr	r3, [r3, #8]
    c250:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    c252:	e019      	b.n	c288 <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    c254:	68fb      	ldr	r3, [r7, #12]
    c256:	685b      	ldr	r3, [r3, #4]
    c258:	2b00      	cmp	r3, #0
    c25a:	d012      	beq.n	c282 <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    c25c:	68fb      	ldr	r3, [r7, #12]
    c25e:	685b      	ldr	r3, [r3, #4]
    c260:	79ba      	ldrb	r2, [r7, #6]
    c262:	79f8      	ldrb	r0, [r7, #7]
    c264:	6839      	ldr	r1, [r7, #0]
    c266:	4798      	blx	r3
    c268:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    c26a:	68bb      	ldr	r3, [r7, #8]
    c26c:	2b00      	cmp	r3, #0
    c26e:	d101      	bne.n	c274 <usbdc_request_handler+0x38>
				return true;
    c270:	2301      	movs	r3, #1
    c272:	e00d      	b.n	c290 <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    c274:	68bb      	ldr	r3, [r7, #8]
    c276:	f113 0f0a 	cmn.w	r3, #10
    c27a:	d002      	beq.n	c282 <usbdc_request_handler+0x46>
				return -1;
    c27c:	f04f 33ff 	mov.w	r3, #4294967295
    c280:	e006      	b.n	c290 <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    c282:	68fb      	ldr	r3, [r7, #12]
    c284:	681b      	ldr	r3, [r3, #0]
    c286:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    c288:	68fb      	ldr	r3, [r7, #12]
    c28a:	2b00      	cmp	r3, #0
    c28c:	d1e2      	bne.n	c254 <usbdc_request_handler+0x18>
	}
	return false;
    c28e:	2300      	movs	r3, #0
}
    c290:	4618      	mov	r0, r3
    c292:	3710      	adds	r7, #16
    c294:	46bd      	mov	sp, r7
    c296:	bd80      	pop	{r7, pc}
    c298:	20001168 	.word	0x20001168

0000c29c <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    c29c:	b580      	push	{r7, lr}
    c29e:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    c2a0:	4b01      	ldr	r3, [pc, #4]	; (c2a8 <usbd_sof_cb+0xc>)
    c2a2:	4798      	blx	r3
}
    c2a4:	bf00      	nop
    c2a6:	bd80      	pop	{r7, pc}
    c2a8:	0000c1c9 	.word	0x0000c1c9

0000c2ac <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    c2ac:	b580      	push	{r7, lr}
    c2ae:	b082      	sub	sp, #8
    c2b0:	af00      	add	r7, sp, #0
    c2b2:	4603      	mov	r3, r0
    c2b4:	6039      	str	r1, [r7, #0]
    c2b6:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    c2b8:	79fb      	ldrb	r3, [r7, #7]
    c2ba:	2200      	movs	r2, #0
    c2bc:	6839      	ldr	r1, [r7, #0]
    c2be:	4618      	mov	r0, r3
    c2c0:	4b14      	ldr	r3, [pc, #80]	; (c314 <usbdc_cb_ctl_req+0x68>)
    c2c2:	4798      	blx	r3
    c2c4:	4603      	mov	r3, r0
    c2c6:	f1b3 3fff 	cmp.w	r3, #4294967295
    c2ca:	d00b      	beq.n	c2e4 <usbdc_cb_ctl_req+0x38>
    c2cc:	2b01      	cmp	r3, #1
    c2ce:	d007      	beq.n	c2e0 <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    c2d0:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    c2d2:	683b      	ldr	r3, [r7, #0]
    c2d4:	781b      	ldrb	r3, [r3, #0]
    c2d6:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    c2da:	2b00      	cmp	r3, #0
    c2dc:	d007      	beq.n	c2ee <usbdc_cb_ctl_req+0x42>
    c2de:	e003      	b.n	c2e8 <usbdc_cb_ctl_req+0x3c>
		return true;
    c2e0:	2301      	movs	r3, #1
    c2e2:	e013      	b.n	c30c <usbdc_cb_ctl_req+0x60>
		return false;
    c2e4:	2300      	movs	r3, #0
    c2e6:	e011      	b.n	c30c <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    c2e8:	2b80      	cmp	r3, #128	; 0x80
    c2ea:	d007      	beq.n	c2fc <usbdc_cb_ctl_req+0x50>
    c2ec:	e00d      	b.n	c30a <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    c2ee:	79fb      	ldrb	r3, [r7, #7]
    c2f0:	6839      	ldr	r1, [r7, #0]
    c2f2:	4618      	mov	r0, r3
    c2f4:	4b08      	ldr	r3, [pc, #32]	; (c318 <usbdc_cb_ctl_req+0x6c>)
    c2f6:	4798      	blx	r3
    c2f8:	4603      	mov	r3, r0
    c2fa:	e007      	b.n	c30c <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    c2fc:	79fb      	ldrb	r3, [r7, #7]
    c2fe:	6839      	ldr	r1, [r7, #0]
    c300:	4618      	mov	r0, r3
    c302:	4b06      	ldr	r3, [pc, #24]	; (c31c <usbdc_cb_ctl_req+0x70>)
    c304:	4798      	blx	r3
    c306:	4603      	mov	r3, r0
    c308:	e000      	b.n	c30c <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    c30a:	2300      	movs	r3, #0
	}
}
    c30c:	4618      	mov	r0, r3
    c30e:	3708      	adds	r7, #8
    c310:	46bd      	mov	sp, r7
    c312:	bd80      	pop	{r7, pc}
    c314:	0000c23d 	.word	0x0000c23d
    c318:	0000c0dd 	.word	0x0000c0dd
    c31c:	0000bd05 	.word	0x0000bd05

0000c320 <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    c320:	b580      	push	{r7, lr}
    c322:	b082      	sub	sp, #8
    c324:	af00      	add	r7, sp, #0
    c326:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    c328:	687b      	ldr	r3, [r7, #4]
    c32a:	781b      	ldrb	r3, [r3, #0]
    c32c:	2b00      	cmp	r3, #0
    c32e:	d135      	bne.n	c39c <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    c330:	687b      	ldr	r3, [r7, #4]
    c332:	785b      	ldrb	r3, [r3, #1]
    c334:	2b05      	cmp	r3, #5
    c336:	d019      	beq.n	c36c <usbdc_ctrl_status_end+0x4c>
    c338:	2b09      	cmp	r3, #9
    c33a:	d000      	beq.n	c33e <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    c33c:	e02f      	b.n	c39e <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    c33e:	687b      	ldr	r3, [r7, #4]
    c340:	885b      	ldrh	r3, [r3, #2]
    c342:	b29b      	uxth	r3, r3
    c344:	b2da      	uxtb	r2, r3
    c346:	4b17      	ldr	r3, [pc, #92]	; (c3a4 <usbdc_ctrl_status_end+0x84>)
    c348:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    c34a:	687b      	ldr	r3, [r7, #4]
    c34c:	885b      	ldrh	r3, [r3, #2]
    c34e:	b29b      	uxth	r3, r3
    c350:	2b00      	cmp	r3, #0
    c352:	d001      	beq.n	c358 <usbdc_ctrl_status_end+0x38>
    c354:	2204      	movs	r2, #4
    c356:	e000      	b.n	c35a <usbdc_ctrl_status_end+0x3a>
    c358:	2203      	movs	r2, #3
    c35a:	4b12      	ldr	r3, [pc, #72]	; (c3a4 <usbdc_ctrl_status_end+0x84>)
    c35c:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    c35e:	4b11      	ldr	r3, [pc, #68]	; (c3a4 <usbdc_ctrl_status_end+0x84>)
    c360:	7e9b      	ldrb	r3, [r3, #26]
    c362:	4619      	mov	r1, r3
    c364:	2001      	movs	r0, #1
    c366:	4b10      	ldr	r3, [pc, #64]	; (c3a8 <usbdc_ctrl_status_end+0x88>)
    c368:	4798      	blx	r3
		break;
    c36a:	e018      	b.n	c39e <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    c36c:	687b      	ldr	r3, [r7, #4]
    c36e:	885b      	ldrh	r3, [r3, #2]
    c370:	b29b      	uxth	r3, r3
    c372:	b2db      	uxtb	r3, r3
    c374:	4618      	mov	r0, r3
    c376:	4b0d      	ldr	r3, [pc, #52]	; (c3ac <usbdc_ctrl_status_end+0x8c>)
    c378:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    c37a:	687b      	ldr	r3, [r7, #4]
    c37c:	885b      	ldrh	r3, [r3, #2]
    c37e:	b29b      	uxth	r3, r3
    c380:	2b00      	cmp	r3, #0
    c382:	d001      	beq.n	c388 <usbdc_ctrl_status_end+0x68>
    c384:	2203      	movs	r2, #3
    c386:	e000      	b.n	c38a <usbdc_ctrl_status_end+0x6a>
    c388:	2202      	movs	r2, #2
    c38a:	4b06      	ldr	r3, [pc, #24]	; (c3a4 <usbdc_ctrl_status_end+0x84>)
    c38c:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    c38e:	4b05      	ldr	r3, [pc, #20]	; (c3a4 <usbdc_ctrl_status_end+0x84>)
    c390:	7e9b      	ldrb	r3, [r3, #26]
    c392:	4619      	mov	r1, r3
    c394:	2001      	movs	r0, #1
    c396:	4b04      	ldr	r3, [pc, #16]	; (c3a8 <usbdc_ctrl_status_end+0x88>)
    c398:	4798      	blx	r3
		break;
    c39a:	e000      	b.n	c39e <usbdc_ctrl_status_end+0x7e>
		return;
    c39c:	bf00      	nop
	}
}
    c39e:	3708      	adds	r7, #8
    c3a0:	46bd      	mov	sp, r7
    c3a2:	bd80      	pop	{r7, pc}
    c3a4:	20001168 	.word	0x20001168
    c3a8:	0000c1fd 	.word	0x0000c1fd
    c3ac:	0000bf7d 	.word	0x0000bf7d

0000c3b0 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    c3b0:	b580      	push	{r7, lr}
    c3b2:	b082      	sub	sp, #8
    c3b4:	af00      	add	r7, sp, #0
    c3b6:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    c3b8:	2201      	movs	r2, #1
    c3ba:	6879      	ldr	r1, [r7, #4]
    c3bc:	2000      	movs	r0, #0
    c3be:	4b03      	ldr	r3, [pc, #12]	; (c3cc <usbdc_ctrl_data_end+0x1c>)
    c3c0:	4798      	blx	r3
	return false;
    c3c2:	2300      	movs	r3, #0
}
    c3c4:	4618      	mov	r0, r3
    c3c6:	3708      	adds	r7, #8
    c3c8:	46bd      	mov	sp, r7
    c3ca:	bd80      	pop	{r7, pc}
    c3cc:	0000c23d 	.word	0x0000c23d

0000c3d0 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    c3d0:	b580      	push	{r7, lr}
    c3d2:	b082      	sub	sp, #8
    c3d4:	af00      	add	r7, sp, #0
    c3d6:	4603      	mov	r3, r0
    c3d8:	603a      	str	r2, [r7, #0]
    c3da:	71fb      	strb	r3, [r7, #7]
    c3dc:	460b      	mov	r3, r1
    c3de:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    c3e0:	79bb      	ldrb	r3, [r7, #6]
    c3e2:	2b00      	cmp	r3, #0
    c3e4:	d002      	beq.n	c3ec <usbdc_cb_ctl_done+0x1c>
    c3e6:	2b01      	cmp	r3, #1
    c3e8:	d004      	beq.n	c3f4 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    c3ea:	e008      	b.n	c3fe <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    c3ec:	6838      	ldr	r0, [r7, #0]
    c3ee:	4b06      	ldr	r3, [pc, #24]	; (c408 <usbdc_cb_ctl_done+0x38>)
    c3f0:	4798      	blx	r3
		break;
    c3f2:	e004      	b.n	c3fe <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    c3f4:	6838      	ldr	r0, [r7, #0]
    c3f6:	4b05      	ldr	r3, [pc, #20]	; (c40c <usbdc_cb_ctl_done+0x3c>)
    c3f8:	4798      	blx	r3
    c3fa:	4603      	mov	r3, r0
    c3fc:	e000      	b.n	c400 <usbdc_cb_ctl_done+0x30>
	}
	return false;
    c3fe:	2300      	movs	r3, #0
}
    c400:	4618      	mov	r0, r3
    c402:	3708      	adds	r7, #8
    c404:	46bd      	mov	sp, r7
    c406:	bd80      	pop	{r7, pc}
    c408:	0000c321 	.word	0x0000c321
    c40c:	0000c3b1 	.word	0x0000c3b1

0000c410 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    c410:	b580      	push	{r7, lr}
    c412:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    c414:	4b10      	ldr	r3, [pc, #64]	; (c458 <usbdc_reset+0x48>)
    c416:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    c418:	4b10      	ldr	r3, [pc, #64]	; (c45c <usbdc_reset+0x4c>)
    c41a:	2202      	movs	r2, #2
    c41c:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    c41e:	4b0f      	ldr	r3, [pc, #60]	; (c45c <usbdc_reset+0x4c>)
    c420:	2200      	movs	r2, #0
    c422:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    c424:	4b0d      	ldr	r3, [pc, #52]	; (c45c <usbdc_reset+0x4c>)
    c426:	2200      	movs	r2, #0
    c428:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    c42a:	2000      	movs	r0, #0
    c42c:	4b0c      	ldr	r3, [pc, #48]	; (c460 <usbdc_reset+0x50>)
    c42e:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    c430:	4b0a      	ldr	r3, [pc, #40]	; (c45c <usbdc_reset+0x4c>)
    c432:	7f1b      	ldrb	r3, [r3, #28]
    c434:	4618      	mov	r0, r3
    c436:	4b0b      	ldr	r3, [pc, #44]	; (c464 <usbdc_reset+0x54>)
    c438:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    c43a:	4a0b      	ldr	r2, [pc, #44]	; (c468 <usbdc_reset+0x58>)
    c43c:	2100      	movs	r1, #0
    c43e:	2000      	movs	r0, #0
    c440:	4b0a      	ldr	r3, [pc, #40]	; (c46c <usbdc_reset+0x5c>)
    c442:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    c444:	4a0a      	ldr	r2, [pc, #40]	; (c470 <usbdc_reset+0x60>)
    c446:	2102      	movs	r1, #2
    c448:	2000      	movs	r0, #0
    c44a:	4b08      	ldr	r3, [pc, #32]	; (c46c <usbdc_reset+0x5c>)
    c44c:	4798      	blx	r3
	usb_d_ep_enable(0);
    c44e:	2000      	movs	r0, #0
    c450:	4b08      	ldr	r3, [pc, #32]	; (c474 <usbdc_reset+0x64>)
    c452:	4798      	blx	r3
}
    c454:	bf00      	nop
    c456:	bd80      	pop	{r7, pc}
    c458:	0000be5d 	.word	0x0000be5d
    c45c:	20001168 	.word	0x20001168
    c460:	000029d1 	.word	0x000029d1
    c464:	0000290d 	.word	0x0000290d
    c468:	0000c2ad 	.word	0x0000c2ad
    c46c:	00002cd1 	.word	0x00002cd1
    c470:	0000c3d1 	.word	0x0000c3d1
    c474:	00002a21 	.word	0x00002a21

0000c478 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    c478:	b580      	push	{r7, lr}
    c47a:	b082      	sub	sp, #8
    c47c:	af00      	add	r7, sp, #0
    c47e:	4603      	mov	r3, r0
    c480:	6039      	str	r1, [r7, #0]
    c482:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    c484:	79fb      	ldrb	r3, [r7, #7]
    c486:	2b00      	cmp	r3, #0
    c488:	d002      	beq.n	c490 <usbd_event_cb+0x18>
    c48a:	2b01      	cmp	r3, #1
    c48c:	d005      	beq.n	c49a <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    c48e:	e007      	b.n	c4a0 <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    c490:	6839      	ldr	r1, [r7, #0]
    c492:	2000      	movs	r0, #0
    c494:	4b04      	ldr	r3, [pc, #16]	; (c4a8 <usbd_event_cb+0x30>)
    c496:	4798      	blx	r3
		break;
    c498:	e002      	b.n	c4a0 <usbd_event_cb+0x28>
		usbdc_reset();
    c49a:	4b04      	ldr	r3, [pc, #16]	; (c4ac <usbd_event_cb+0x34>)
    c49c:	4798      	blx	r3
		break;
    c49e:	bf00      	nop
	}
}
    c4a0:	bf00      	nop
    c4a2:	3708      	adds	r7, #8
    c4a4:	46bd      	mov	sp, r7
    c4a6:	bd80      	pop	{r7, pc}
    c4a8:	0000c1fd 	.word	0x0000c1fd
    c4ac:	0000c411 	.word	0x0000c411

0000c4b0 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    c4b0:	b580      	push	{r7, lr}
    c4b2:	b088      	sub	sp, #32
    c4b4:	af00      	add	r7, sp, #0
    c4b6:	60b9      	str	r1, [r7, #8]
    c4b8:	607a      	str	r2, [r7, #4]
    c4ba:	461a      	mov	r2, r3
    c4bc:	4603      	mov	r3, r0
    c4be:	73fb      	strb	r3, [r7, #15]
    c4c0:	4613      	mov	r3, r2
    c4c2:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c4c4:	68bb      	ldr	r3, [r7, #8]
    c4c6:	617b      	str	r3, [r7, #20]
    c4c8:	687b      	ldr	r3, [r7, #4]
    c4ca:	61bb      	str	r3, [r7, #24]
    c4cc:	7bfb      	ldrb	r3, [r7, #15]
    c4ce:	773b      	strb	r3, [r7, #28]
    c4d0:	7bbb      	ldrb	r3, [r7, #14]
    c4d2:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    c4d4:	f107 0314 	add.w	r3, r7, #20
    c4d8:	4618      	mov	r0, r3
    c4da:	4b03      	ldr	r3, [pc, #12]	; (c4e8 <usbdc_xfer+0x38>)
    c4dc:	4798      	blx	r3
    c4de:	4603      	mov	r3, r0
}
    c4e0:	4618      	mov	r0, r3
    c4e2:	3720      	adds	r7, #32
    c4e4:	46bd      	mov	sp, r7
    c4e6:	bd80      	pop	{r7, pc}
    c4e8:	00002a91 	.word	0x00002a91

0000c4ec <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    c4ec:	b580      	push	{r7, lr}
    c4ee:	b082      	sub	sp, #8
    c4f0:	af00      	add	r7, sp, #0
    c4f2:	4603      	mov	r3, r0
    c4f4:	6039      	str	r1, [r7, #0]
    c4f6:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    c4f8:	79fb      	ldrb	r3, [r7, #7]
    c4fa:	2b01      	cmp	r3, #1
    c4fc:	d009      	beq.n	c512 <usbdc_register_handler+0x26>
    c4fe:	2b02      	cmp	r3, #2
    c500:	d00c      	beq.n	c51c <usbdc_register_handler+0x30>
    c502:	2b00      	cmp	r3, #0
    c504:	d000      	beq.n	c508 <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    c506:	e00e      	b.n	c526 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    c508:	6839      	ldr	r1, [r7, #0]
    c50a:	4809      	ldr	r0, [pc, #36]	; (c530 <usbdc_register_handler+0x44>)
    c50c:	4b09      	ldr	r3, [pc, #36]	; (c534 <usbdc_register_handler+0x48>)
    c50e:	4798      	blx	r3
		break;
    c510:	e009      	b.n	c526 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    c512:	6839      	ldr	r1, [r7, #0]
    c514:	4808      	ldr	r0, [pc, #32]	; (c538 <usbdc_register_handler+0x4c>)
    c516:	4b07      	ldr	r3, [pc, #28]	; (c534 <usbdc_register_handler+0x48>)
    c518:	4798      	blx	r3
		break;
    c51a:	e004      	b.n	c526 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    c51c:	6839      	ldr	r1, [r7, #0]
    c51e:	4807      	ldr	r0, [pc, #28]	; (c53c <usbdc_register_handler+0x50>)
    c520:	4b04      	ldr	r3, [pc, #16]	; (c534 <usbdc_register_handler+0x48>)
    c522:	4798      	blx	r3
		break;
    c524:	bf00      	nop
	}
}
    c526:	bf00      	nop
    c528:	3708      	adds	r7, #8
    c52a:	46bd      	mov	sp, r7
    c52c:	bd80      	pop	{r7, pc}
    c52e:	bf00      	nop
    c530:	2000116c 	.word	0x2000116c
    c534:	00002e29 	.word	0x00002e29
    c538:	20001170 	.word	0x20001170
    c53c:	20001174 	.word	0x20001174

0000c540 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    c540:	b580      	push	{r7, lr}
    c542:	b084      	sub	sp, #16
    c544:	af00      	add	r7, sp, #0
    c546:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    c548:	687b      	ldr	r3, [r7, #4]
    c54a:	2b00      	cmp	r3, #0
    c54c:	bf14      	ite	ne
    c54e:	2301      	movne	r3, #1
    c550:	2300      	moveq	r3, #0
    c552:	b2db      	uxtb	r3, r3
    c554:	f240 3255 	movw	r2, #853	; 0x355
    c558:	4910      	ldr	r1, [pc, #64]	; (c59c <usbdc_init+0x5c>)
    c55a:	4618      	mov	r0, r3
    c55c:	4b10      	ldr	r3, [pc, #64]	; (c5a0 <usbdc_init+0x60>)
    c55e:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    c560:	4b10      	ldr	r3, [pc, #64]	; (c5a4 <usbdc_init+0x64>)
    c562:	4798      	blx	r3
    c564:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    c566:	68fb      	ldr	r3, [r7, #12]
    c568:	2b00      	cmp	r3, #0
    c56a:	da01      	bge.n	c570 <usbdc_init+0x30>
		return rc;
    c56c:	68fb      	ldr	r3, [r7, #12]
    c56e:	e010      	b.n	c592 <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    c570:	2220      	movs	r2, #32
    c572:	2100      	movs	r1, #0
    c574:	480c      	ldr	r0, [pc, #48]	; (c5a8 <usbdc_init+0x68>)
    c576:	4b0d      	ldr	r3, [pc, #52]	; (c5ac <usbdc_init+0x6c>)
    c578:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    c57a:	4a0b      	ldr	r2, [pc, #44]	; (c5a8 <usbdc_init+0x68>)
    c57c:	687b      	ldr	r3, [r7, #4]
    c57e:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    c580:	490b      	ldr	r1, [pc, #44]	; (c5b0 <usbdc_init+0x70>)
    c582:	2000      	movs	r0, #0
    c584:	4b0b      	ldr	r3, [pc, #44]	; (c5b4 <usbdc_init+0x74>)
    c586:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    c588:	490b      	ldr	r1, [pc, #44]	; (c5b8 <usbdc_init+0x78>)
    c58a:	2001      	movs	r0, #1
    c58c:	4b09      	ldr	r3, [pc, #36]	; (c5b4 <usbdc_init+0x74>)
    c58e:	4798      	blx	r3

	return 0;
    c590:	2300      	movs	r3, #0
}
    c592:	4618      	mov	r0, r3
    c594:	3710      	adds	r7, #16
    c596:	46bd      	mov	sp, r7
    c598:	bd80      	pop	{r7, pc}
    c59a:	bf00      	nop
    c59c:	000134c8 	.word	0x000134c8
    c5a0:	00002d4d 	.word	0x00002d4d
    c5a4:	000027f9 	.word	0x000027f9
    c5a8:	20001168 	.word	0x20001168
    c5ac:	00012f19 	.word	0x00012f19
    c5b0:	0000c29d 	.word	0x0000c29d
    c5b4:	000028a5 	.word	0x000028a5
    c5b8:	0000c479 	.word	0x0000c479

0000c5bc <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    c5bc:	b580      	push	{r7, lr}
    c5be:	b082      	sub	sp, #8
    c5c0:	af00      	add	r7, sp, #0
    c5c2:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    c5c4:	6879      	ldr	r1, [r7, #4]
    c5c6:	4803      	ldr	r0, [pc, #12]	; (c5d4 <usbdc_register_function+0x18>)
    c5c8:	4b03      	ldr	r3, [pc, #12]	; (c5d8 <usbdc_register_function+0x1c>)
    c5ca:	4798      	blx	r3
}
    c5cc:	bf00      	nop
    c5ce:	3708      	adds	r7, #8
    c5d0:	46bd      	mov	sp, r7
    c5d2:	bd80      	pop	{r7, pc}
    c5d4:	20001178 	.word	0x20001178
    c5d8:	00002e29 	.word	0x00002e29

0000c5dc <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    c5dc:	b580      	push	{r7, lr}
    c5de:	b082      	sub	sp, #8
    c5e0:	af00      	add	r7, sp, #0
    c5e2:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    c5e4:	4b0f      	ldr	r3, [pc, #60]	; (c624 <usbdc_start+0x48>)
    c5e6:	7e9b      	ldrb	r3, [r3, #26]
    c5e8:	2b00      	cmp	r3, #0
    c5ea:	d002      	beq.n	c5f2 <usbdc_start+0x16>
		return ERR_BUSY;
    c5ec:	f06f 0303 	mvn.w	r3, #3
    c5f0:	e013      	b.n	c61a <usbdc_start+0x3e>
	}

	if (desces) {
    c5f2:	687b      	ldr	r3, [r7, #4]
    c5f4:	2b00      	cmp	r3, #0
    c5f6:	d00e      	beq.n	c616 <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    c5f8:	4a0a      	ldr	r2, [pc, #40]	; (c624 <usbdc_start+0x48>)
    c5fa:	687b      	ldr	r3, [r7, #4]
    c5fc:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    c5fe:	687b      	ldr	r3, [r7, #4]
    c600:	681b      	ldr	r3, [r3, #0]
    c602:	79da      	ldrb	r2, [r3, #7]
    c604:	4b07      	ldr	r3, [pc, #28]	; (c624 <usbdc_start+0x48>)
    c606:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    c608:	4b06      	ldr	r3, [pc, #24]	; (c624 <usbdc_start+0x48>)
    c60a:	2201      	movs	r2, #1
    c60c:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    c60e:	4b06      	ldr	r3, [pc, #24]	; (c628 <usbdc_start+0x4c>)
    c610:	4798      	blx	r3
	return ERR_NONE;
    c612:	2300      	movs	r3, #0
    c614:	e001      	b.n	c61a <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    c616:	f06f 0308 	mvn.w	r3, #8
}
    c61a:	4618      	mov	r0, r3
    c61c:	3708      	adds	r7, #8
    c61e:	46bd      	mov	sp, r7
    c620:	bd80      	pop	{r7, pc}
    c622:	bf00      	nop
    c624:	20001168 	.word	0x20001168
    c628:	000028c9 	.word	0x000028c9

0000c62c <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    c62c:	b580      	push	{r7, lr}
    c62e:	af00      	add	r7, sp, #0
	usb_d_attach();
    c630:	4b01      	ldr	r3, [pc, #4]	; (c638 <usbdc_attach+0xc>)
    c632:	4798      	blx	r3
}
    c634:	bf00      	nop
    c636:	bd80      	pop	{r7, pc}
    c638:	000028dd 	.word	0x000028dd

0000c63c <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    c63c:	b480      	push	{r7}
    c63e:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    c640:	4b03      	ldr	r3, [pc, #12]	; (c650 <usbdc_get_ctrl_buffer+0x14>)
    c642:	695b      	ldr	r3, [r3, #20]
}
    c644:	4618      	mov	r0, r3
    c646:	46bd      	mov	sp, r7
    c648:	f85d 7b04 	ldr.w	r7, [sp], #4
    c64c:	4770      	bx	lr
    c64e:	bf00      	nop
    c650:	20001168 	.word	0x20001168

0000c654 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    c654:	b480      	push	{r7}
    c656:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    c658:	4b07      	ldr	r3, [pc, #28]	; (c678 <usbdc_get_state+0x24>)
    c65a:	7e9b      	ldrb	r3, [r3, #26]
    c65c:	f003 0310 	and.w	r3, r3, #16
    c660:	2b00      	cmp	r3, #0
    c662:	d001      	beq.n	c668 <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    c664:	2310      	movs	r3, #16
    c666:	e001      	b.n	c66c <usbdc_get_state+0x18>
	}
	return usbdc.state;
    c668:	4b03      	ldr	r3, [pc, #12]	; (c678 <usbdc_get_state+0x24>)
    c66a:	7e9b      	ldrb	r3, [r3, #26]
}
    c66c:	4618      	mov	r0, r3
    c66e:	46bd      	mov	sp, r7
    c670:	f85d 7b04 	ldr.w	r7, [sp], #4
    c674:	4770      	bx	lr
    c676:	bf00      	nop
    c678:	20001168 	.word	0x20001168

0000c67c <usb_get_u16>:
{
    c67c:	b480      	push	{r7}
    c67e:	b083      	sub	sp, #12
    c680:	af00      	add	r7, sp, #0
    c682:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    c684:	687b      	ldr	r3, [r7, #4]
    c686:	781b      	ldrb	r3, [r3, #0]
    c688:	b29a      	uxth	r2, r3
    c68a:	687b      	ldr	r3, [r7, #4]
    c68c:	3301      	adds	r3, #1
    c68e:	781b      	ldrb	r3, [r3, #0]
    c690:	b29b      	uxth	r3, r3
    c692:	021b      	lsls	r3, r3, #8
    c694:	b29b      	uxth	r3, r3
    c696:	4413      	add	r3, r2
    c698:	b29b      	uxth	r3, r3
}
    c69a:	4618      	mov	r0, r3
    c69c:	370c      	adds	r7, #12
    c69e:	46bd      	mov	sp, r7
    c6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    c6a4:	4770      	bx	lr

0000c6a6 <usb_desc_len>:
{
    c6a6:	b480      	push	{r7}
    c6a8:	b083      	sub	sp, #12
    c6aa:	af00      	add	r7, sp, #0
    c6ac:	6078      	str	r0, [r7, #4]
	return desc[0];
    c6ae:	687b      	ldr	r3, [r7, #4]
    c6b0:	781b      	ldrb	r3, [r3, #0]
}
    c6b2:	4618      	mov	r0, r3
    c6b4:	370c      	adds	r7, #12
    c6b6:	46bd      	mov	sp, r7
    c6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    c6bc:	4770      	bx	lr

0000c6be <usb_desc_type>:
{
    c6be:	b480      	push	{r7}
    c6c0:	b083      	sub	sp, #12
    c6c2:	af00      	add	r7, sp, #0
    c6c4:	6078      	str	r0, [r7, #4]
	return desc[1];
    c6c6:	687b      	ldr	r3, [r7, #4]
    c6c8:	3301      	adds	r3, #1
    c6ca:	781b      	ldrb	r3, [r3, #0]
}
    c6cc:	4618      	mov	r0, r3
    c6ce:	370c      	adds	r7, #12
    c6d0:	46bd      	mov	sp, r7
    c6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    c6d6:	4770      	bx	lr

0000c6d8 <usb_desc_next>:
{
    c6d8:	b580      	push	{r7, lr}
    c6da:	b082      	sub	sp, #8
    c6dc:	af00      	add	r7, sp, #0
    c6de:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    c6e0:	6878      	ldr	r0, [r7, #4]
    c6e2:	4b05      	ldr	r3, [pc, #20]	; (c6f8 <usb_desc_next+0x20>)
    c6e4:	4798      	blx	r3
    c6e6:	4603      	mov	r3, r0
    c6e8:	461a      	mov	r2, r3
    c6ea:	687b      	ldr	r3, [r7, #4]
    c6ec:	4413      	add	r3, r2
}
    c6ee:	4618      	mov	r0, r3
    c6f0:	3708      	adds	r7, #8
    c6f2:	46bd      	mov	sp, r7
    c6f4:	bd80      	pop	{r7, pc}
    c6f6:	bf00      	nop
    c6f8:	0000c6a7 	.word	0x0000c6a7

0000c6fc <usb_cfg_desc_total_len>:
{
    c6fc:	b580      	push	{r7, lr}
    c6fe:	b082      	sub	sp, #8
    c700:	af00      	add	r7, sp, #0
    c702:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    c704:	687b      	ldr	r3, [r7, #4]
    c706:	3302      	adds	r3, #2
    c708:	4618      	mov	r0, r3
    c70a:	4b03      	ldr	r3, [pc, #12]	; (c718 <usb_cfg_desc_total_len+0x1c>)
    c70c:	4798      	blx	r3
    c70e:	4603      	mov	r3, r0
}
    c710:	4618      	mov	r0, r3
    c712:	3708      	adds	r7, #8
    c714:	46bd      	mov	sp, r7
    c716:	bd80      	pop	{r7, pc}
    c718:	0000c67d 	.word	0x0000c67d

0000c71c <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    c71c:	b580      	push	{r7, lr}
    c71e:	b082      	sub	sp, #8
    c720:	af00      	add	r7, sp, #0
    c722:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    c724:	6878      	ldr	r0, [r7, #4]
    c726:	4b05      	ldr	r3, [pc, #20]	; (c73c <usb_cfg_desc_next+0x20>)
    c728:	4798      	blx	r3
    c72a:	4603      	mov	r3, r0
    c72c:	461a      	mov	r2, r3
    c72e:	687b      	ldr	r3, [r7, #4]
    c730:	4413      	add	r3, r2
}
    c732:	4618      	mov	r0, r3
    c734:	3708      	adds	r7, #8
    c736:	46bd      	mov	sp, r7
    c738:	bd80      	pop	{r7, pc}
    c73a:	bf00      	nop
    c73c:	0000c6fd 	.word	0x0000c6fd

0000c740 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    c740:	b580      	push	{r7, lr}
    c742:	b084      	sub	sp, #16
    c744:	af00      	add	r7, sp, #0
    c746:	60f8      	str	r0, [r7, #12]
    c748:	60b9      	str	r1, [r7, #8]
    c74a:	4613      	mov	r3, r2
    c74c:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    c74e:	e015      	b.n	c77c <usb_find_desc+0x3c>
		_desc_len_check();
    c750:	68f8      	ldr	r0, [r7, #12]
    c752:	4b0f      	ldr	r3, [pc, #60]	; (c790 <usb_find_desc+0x50>)
    c754:	4798      	blx	r3
    c756:	4603      	mov	r3, r0
    c758:	2b01      	cmp	r3, #1
    c75a:	d801      	bhi.n	c760 <usb_find_desc+0x20>
    c75c:	2300      	movs	r3, #0
    c75e:	e012      	b.n	c786 <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    c760:	68f8      	ldr	r0, [r7, #12]
    c762:	4b0c      	ldr	r3, [pc, #48]	; (c794 <usb_find_desc+0x54>)
    c764:	4798      	blx	r3
    c766:	4603      	mov	r3, r0
    c768:	461a      	mov	r2, r3
    c76a:	79fb      	ldrb	r3, [r7, #7]
    c76c:	4293      	cmp	r3, r2
    c76e:	d101      	bne.n	c774 <usb_find_desc+0x34>
			return desc;
    c770:	68fb      	ldr	r3, [r7, #12]
    c772:	e008      	b.n	c786 <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    c774:	68f8      	ldr	r0, [r7, #12]
    c776:	4b08      	ldr	r3, [pc, #32]	; (c798 <usb_find_desc+0x58>)
    c778:	4798      	blx	r3
    c77a:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    c77c:	68fa      	ldr	r2, [r7, #12]
    c77e:	68bb      	ldr	r3, [r7, #8]
    c780:	429a      	cmp	r2, r3
    c782:	d3e5      	bcc.n	c750 <usb_find_desc+0x10>
	}
	return NULL;
    c784:	2300      	movs	r3, #0
}
    c786:	4618      	mov	r0, r3
    c788:	3710      	adds	r7, #16
    c78a:	46bd      	mov	sp, r7
    c78c:	bd80      	pop	{r7, pc}
    c78e:	bf00      	nop
    c790:	0000c6a7 	.word	0x0000c6a7
    c794:	0000c6bf 	.word	0x0000c6bf
    c798:	0000c6d9 	.word	0x0000c6d9

0000c79c <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    c79c:	b580      	push	{r7, lr}
    c79e:	b082      	sub	sp, #8
    c7a0:	af00      	add	r7, sp, #0
    c7a2:	6078      	str	r0, [r7, #4]
    c7a4:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    c7a6:	e019      	b.n	c7dc <usb_find_ep_desc+0x40>
		_desc_len_check();
    c7a8:	6878      	ldr	r0, [r7, #4]
    c7aa:	4b12      	ldr	r3, [pc, #72]	; (c7f4 <usb_find_ep_desc+0x58>)
    c7ac:	4798      	blx	r3
    c7ae:	4603      	mov	r3, r0
    c7b0:	2b01      	cmp	r3, #1
    c7b2:	d801      	bhi.n	c7b8 <usb_find_ep_desc+0x1c>
    c7b4:	2300      	movs	r3, #0
    c7b6:	e018      	b.n	c7ea <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    c7b8:	6878      	ldr	r0, [r7, #4]
    c7ba:	4b0f      	ldr	r3, [pc, #60]	; (c7f8 <usb_find_ep_desc+0x5c>)
    c7bc:	4798      	blx	r3
    c7be:	4603      	mov	r3, r0
    c7c0:	2b04      	cmp	r3, #4
    c7c2:	d010      	beq.n	c7e6 <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    c7c4:	6878      	ldr	r0, [r7, #4]
    c7c6:	4b0c      	ldr	r3, [pc, #48]	; (c7f8 <usb_find_ep_desc+0x5c>)
    c7c8:	4798      	blx	r3
    c7ca:	4603      	mov	r3, r0
    c7cc:	2b05      	cmp	r3, #5
    c7ce:	d101      	bne.n	c7d4 <usb_find_ep_desc+0x38>
			return desc;
    c7d0:	687b      	ldr	r3, [r7, #4]
    c7d2:	e00a      	b.n	c7ea <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    c7d4:	6878      	ldr	r0, [r7, #4]
    c7d6:	4b09      	ldr	r3, [pc, #36]	; (c7fc <usb_find_ep_desc+0x60>)
    c7d8:	4798      	blx	r3
    c7da:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    c7dc:	687a      	ldr	r2, [r7, #4]
    c7de:	683b      	ldr	r3, [r7, #0]
    c7e0:	429a      	cmp	r2, r3
    c7e2:	d3e1      	bcc.n	c7a8 <usb_find_ep_desc+0xc>
    c7e4:	e000      	b.n	c7e8 <usb_find_ep_desc+0x4c>
			break;
    c7e6:	bf00      	nop
	}
	return NULL;
    c7e8:	2300      	movs	r3, #0
}
    c7ea:	4618      	mov	r0, r3
    c7ec:	3708      	adds	r7, #8
    c7ee:	46bd      	mov	sp, r7
    c7f0:	bd80      	pop	{r7, pc}
    c7f2:	bf00      	nop
    c7f4:	0000c6a7 	.word	0x0000c6a7
    c7f8:	0000c6bf 	.word	0x0000c6bf
    c7fc:	0000c6d9 	.word	0x0000c6d9

0000c800 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    c800:	b580      	push	{r7, lr}
    c802:	b084      	sub	sp, #16
    c804:	af00      	add	r7, sp, #0
    c806:	60f8      	str	r0, [r7, #12]
    c808:	60b9      	str	r1, [r7, #8]
    c80a:	4613      	mov	r3, r2
    c80c:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    c80e:	2202      	movs	r2, #2
    c810:	68b9      	ldr	r1, [r7, #8]
    c812:	68f8      	ldr	r0, [r7, #12]
    c814:	4b15      	ldr	r3, [pc, #84]	; (c86c <usb_find_cfg_desc+0x6c>)
    c816:	4798      	blx	r3
    c818:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    c81a:	68fb      	ldr	r3, [r7, #12]
    c81c:	2b00      	cmp	r3, #0
    c81e:	d11a      	bne.n	c856 <usb_find_cfg_desc+0x56>
		return NULL;
    c820:	2300      	movs	r3, #0
    c822:	e01f      	b.n	c864 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    c824:	68f8      	ldr	r0, [r7, #12]
    c826:	4b12      	ldr	r3, [pc, #72]	; (c870 <usb_find_cfg_desc+0x70>)
    c828:	4798      	blx	r3
    c82a:	4603      	mov	r3, r0
    c82c:	2b01      	cmp	r3, #1
    c82e:	d801      	bhi.n	c834 <usb_find_cfg_desc+0x34>
    c830:	2300      	movs	r3, #0
    c832:	e017      	b.n	c864 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    c834:	68fb      	ldr	r3, [r7, #12]
    c836:	3301      	adds	r3, #1
    c838:	781b      	ldrb	r3, [r3, #0]
    c83a:	2b02      	cmp	r3, #2
    c83c:	d110      	bne.n	c860 <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    c83e:	68fb      	ldr	r3, [r7, #12]
    c840:	3305      	adds	r3, #5
    c842:	781b      	ldrb	r3, [r3, #0]
    c844:	79fa      	ldrb	r2, [r7, #7]
    c846:	429a      	cmp	r2, r3
    c848:	d101      	bne.n	c84e <usb_find_cfg_desc+0x4e>
			return desc;
    c84a:	68fb      	ldr	r3, [r7, #12]
    c84c:	e00a      	b.n	c864 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    c84e:	68f8      	ldr	r0, [r7, #12]
    c850:	4b08      	ldr	r3, [pc, #32]	; (c874 <usb_find_cfg_desc+0x74>)
    c852:	4798      	blx	r3
    c854:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    c856:	68fa      	ldr	r2, [r7, #12]
    c858:	68bb      	ldr	r3, [r7, #8]
    c85a:	429a      	cmp	r2, r3
    c85c:	d3e2      	bcc.n	c824 <usb_find_cfg_desc+0x24>
    c85e:	e000      	b.n	c862 <usb_find_cfg_desc+0x62>
			break;
    c860:	bf00      	nop
	}
	return NULL;
    c862:	2300      	movs	r3, #0
}
    c864:	4618      	mov	r0, r3
    c866:	3710      	adds	r7, #16
    c868:	46bd      	mov	sp, r7
    c86a:	bd80      	pop	{r7, pc}
    c86c:	0000c741 	.word	0x0000c741
    c870:	0000c6a7 	.word	0x0000c6a7
    c874:	0000c71d 	.word	0x0000c71d

0000c878 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    c878:	b580      	push	{r7, lr}
    c87a:	b086      	sub	sp, #24
    c87c:	af00      	add	r7, sp, #0
    c87e:	60f8      	str	r0, [r7, #12]
    c880:	60b9      	str	r1, [r7, #8]
    c882:	4613      	mov	r3, r2
    c884:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    c886:	2300      	movs	r3, #0
    c888:	75fb      	strb	r3, [r7, #23]
    c88a:	e020      	b.n	c8ce <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    c88c:	2203      	movs	r2, #3
    c88e:	68b9      	ldr	r1, [r7, #8]
    c890:	68f8      	ldr	r0, [r7, #12]
    c892:	4b13      	ldr	r3, [pc, #76]	; (c8e0 <usb_find_str_desc+0x68>)
    c894:	4798      	blx	r3
    c896:	60f8      	str	r0, [r7, #12]
		if (desc) {
    c898:	68fb      	ldr	r3, [r7, #12]
    c89a:	2b00      	cmp	r3, #0
    c89c:	d015      	beq.n	c8ca <usb_find_str_desc+0x52>
			_desc_len_check();
    c89e:	68f8      	ldr	r0, [r7, #12]
    c8a0:	4b10      	ldr	r3, [pc, #64]	; (c8e4 <usb_find_str_desc+0x6c>)
    c8a2:	4798      	blx	r3
    c8a4:	4603      	mov	r3, r0
    c8a6:	2b01      	cmp	r3, #1
    c8a8:	d801      	bhi.n	c8ae <usb_find_str_desc+0x36>
    c8aa:	2300      	movs	r3, #0
    c8ac:	e014      	b.n	c8d8 <usb_find_str_desc+0x60>
			if (i == str_index) {
    c8ae:	7dfa      	ldrb	r2, [r7, #23]
    c8b0:	79fb      	ldrb	r3, [r7, #7]
    c8b2:	429a      	cmp	r2, r3
    c8b4:	d101      	bne.n	c8ba <usb_find_str_desc+0x42>
				return desc;
    c8b6:	68fb      	ldr	r3, [r7, #12]
    c8b8:	e00e      	b.n	c8d8 <usb_find_str_desc+0x60>
			}
			i++;
    c8ba:	7dfb      	ldrb	r3, [r7, #23]
    c8bc:	3301      	adds	r3, #1
    c8be:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    c8c0:	68f8      	ldr	r0, [r7, #12]
    c8c2:	4b09      	ldr	r3, [pc, #36]	; (c8e8 <usb_find_str_desc+0x70>)
    c8c4:	4798      	blx	r3
    c8c6:	60f8      	str	r0, [r7, #12]
    c8c8:	e001      	b.n	c8ce <usb_find_str_desc+0x56>
		} else {
			return NULL;
    c8ca:	2300      	movs	r3, #0
    c8cc:	e004      	b.n	c8d8 <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    c8ce:	68fa      	ldr	r2, [r7, #12]
    c8d0:	68bb      	ldr	r3, [r7, #8]
    c8d2:	429a      	cmp	r2, r3
    c8d4:	d3da      	bcc.n	c88c <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    c8d6:	2300      	movs	r3, #0
}
    c8d8:	4618      	mov	r0, r3
    c8da:	3718      	adds	r7, #24
    c8dc:	46bd      	mov	sp, r7
    c8de:	bd80      	pop	{r7, pc}
    c8e0:	0000c741 	.word	0x0000c741
    c8e4:	0000c6a7 	.word	0x0000c6a7
    c8e8:	0000c6d9 	.word	0x0000c6d9

0000c8ec <_ZN13CANOpen_ClassC1EP20can_async_descriptor>:
CANOpen_Class::CANOpen_Class()
{
	ptrCANOpenClass=this;
} //CANOpen_Class

CANOpen_Class::CANOpen_Class(can_async_descriptor  *descr)
    c8ec:	b580      	push	{r7, lr}
    c8ee:	b082      	sub	sp, #8
    c8f0:	af00      	add	r7, sp, #0
    c8f2:	6078      	str	r0, [r7, #4]
    c8f4:	6039      	str	r1, [r7, #0]
    c8f6:	687b      	ldr	r3, [r7, #4]
    c8f8:	4618      	mov	r0, r3
    c8fa:	4b08      	ldr	r3, [pc, #32]	; (c91c <_ZN13CANOpen_ClassC1EP20can_async_descriptor+0x30>)
    c8fc:	4798      	blx	r3
    c8fe:	4a08      	ldr	r2, [pc, #32]	; (c920 <_ZN13CANOpen_ClassC1EP20can_async_descriptor+0x34>)
    c900:	687b      	ldr	r3, [r7, #4]
    c902:	601a      	str	r2, [r3, #0]
{
	ptrCANOpenClass=this;
    c904:	4a07      	ldr	r2, [pc, #28]	; (c924 <_ZN13CANOpen_ClassC1EP20can_async_descriptor+0x38>)
    c906:	687b      	ldr	r3, [r7, #4]
    c908:	6013      	str	r3, [r2, #0]
	canDescr=descr;
    c90a:	687b      	ldr	r3, [r7, #4]
    c90c:	683a      	ldr	r2, [r7, #0]
    c90e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
} //CANOpen_Class
    c912:	687b      	ldr	r3, [r7, #4]
    c914:	4618      	mov	r0, r3
    c916:	3708      	adds	r7, #8
    c918:	46bd      	mov	sp, r7
    c91a:	bd80      	pop	{r7, pc}
    c91c:	0000cac1 	.word	0x0000cac1
    c920:	000134e8 	.word	0x000134e8
    c924:	20001188 	.word	0x20001188

0000c928 <_ZN13CANOpen_ClassD1Ev>:

// default destructor
CANOpen_Class::~CANOpen_Class()
    c928:	b580      	push	{r7, lr}
    c92a:	b082      	sub	sp, #8
    c92c:	af00      	add	r7, sp, #0
    c92e:	6078      	str	r0, [r7, #4]
    c930:	4a05      	ldr	r2, [pc, #20]	; (c948 <_ZN13CANOpen_ClassD1Ev+0x20>)
    c932:	687b      	ldr	r3, [r7, #4]
    c934:	601a      	str	r2, [r3, #0]
    c936:	687b      	ldr	r3, [r7, #4]
    c938:	4618      	mov	r0, r3
    c93a:	4b04      	ldr	r3, [pc, #16]	; (c94c <_ZN13CANOpen_ClassD1Ev+0x24>)
    c93c:	4798      	blx	r3
{
} //~CANOpen_Class
    c93e:	687b      	ldr	r3, [r7, #4]
    c940:	4618      	mov	r0, r3
    c942:	3708      	adds	r7, #8
    c944:	46bd      	mov	sp, r7
    c946:	bd80      	pop	{r7, pc}
    c948:	000134e8 	.word	0x000134e8
    c94c:	0000cb09 	.word	0x0000cb09

0000c950 <_ZN13CANOpen_Class4InitEh>:

int	CANOpen_Class::Init(uint8_t node){
    c950:	b590      	push	{r4, r7, lr}
    c952:	b083      	sub	sp, #12
    c954:	af00      	add	r7, sp, #0
    c956:	6078      	str	r0, [r7, #4]
    c958:	460b      	mov	r3, r1
    c95a:	70fb      	strb	r3, [r7, #3]
	coNode=node;
    c95c:	687b      	ldr	r3, [r7, #4]
    c95e:	78fa      	ldrb	r2, [r7, #3]
    c960:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153
	if (node==1)
	{
			//RedefineMacros();
	}
	//can.SetDescriptor(canDescr);
	err=CO_init(canDescr,node,1000);
    c964:	6878      	ldr	r0, [r7, #4]
    c966:	687b      	ldr	r3, [r7, #4]
    c968:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
    c96c:	78fa      	ldrb	r2, [r7, #3]
    c96e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    c972:	4c14      	ldr	r4, [pc, #80]	; (c9c4 <_ZN13CANOpen_Class4InitEh+0x74>)
    c974:	47a0      	blx	r4
    c976:	4603      	mov	r3, r0
    c978:	461a      	mov	r2, r3
    c97a:	687b      	ldr	r3, [r7, #4]
    c97c:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
	
	if (err==0)
    c980:	687b      	ldr	r3, [r7, #4]
    c982:	f993 3151 	ldrsb.w	r3, [r3, #337]	; 0x151
    c986:	2b00      	cmp	r3, #0
    c988:	d111      	bne.n	c9ae <_ZN13CANOpen_Class4InitEh+0x5e>
	{
	
		err=(CO_ReturnError_t)SetInitialMode();
    c98a:	6878      	ldr	r0, [r7, #4]
    c98c:	4b0e      	ldr	r3, [pc, #56]	; (c9c8 <_ZN13CANOpen_Class4InitEh+0x78>)
    c98e:	4798      	blx	r3
    c990:	4603      	mov	r3, r0
    c992:	b25a      	sxtb	r2, r3
    c994:	687b      	ldr	r3, [r7, #4]
    c996:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
		if (node==1)
    c99a:	78fb      	ldrb	r3, [r7, #3]
    c99c:	2b01      	cmp	r3, #1
    c99e:	d10a      	bne.n	c9b6 <_ZN13CANOpen_Class4InitEh+0x66>
		{
			CO_sendNMTcommand(1,0);
    c9a0:	687b      	ldr	r3, [r7, #4]
    c9a2:	2200      	movs	r2, #0
    c9a4:	2101      	movs	r1, #1
    c9a6:	4618      	mov	r0, r3
    c9a8:	4b08      	ldr	r3, [pc, #32]	; (c9cc <_ZN13CANOpen_Class4InitEh+0x7c>)
    c9aa:	4798      	blx	r3
    c9ac:	e003      	b.n	c9b6 <_ZN13CANOpen_Class4InitEh+0x66>
		}
			

		
	}else{
		return	(int)err;
    c9ae:	687b      	ldr	r3, [r7, #4]
    c9b0:	f993 3151 	ldrsb.w	r3, [r3, #337]	; 0x151
    c9b4:	e002      	b.n	c9bc <_ZN13CANOpen_Class4InitEh+0x6c>
	}
	return	(int)err;
    c9b6:	687b      	ldr	r3, [r7, #4]
    c9b8:	f993 3151 	ldrsb.w	r3, [r3, #337]	; 0x151
}
    c9bc:	4618      	mov	r0, r3
    c9be:	370c      	adds	r7, #12
    c9c0:	46bd      	mov	sp, r7
    c9c2:	bd90      	pop	{r4, r7, pc}
    c9c4:	0000cc09 	.word	0x0000cc09
    c9c8:	0000c9d1 	.word	0x0000c9d1
    c9cc:	0000cb31 	.word	0x0000cb31

0000c9d0 <_ZN13CANOpen_Class14SetInitialModeEv>:

int	CANOpen_Class::SetInitialMode(void){
    c9d0:	b580      	push	{r7, lr}
    c9d2:	b082      	sub	sp, #8
    c9d4:	af00      	add	r7, sp, #0
    c9d6:	6078      	str	r0, [r7, #4]
	/* CAN module address, NodeID, Bitrate */
	/* We do not use CAN registers directly, so address here is a pointer to the CAN_HandleTypeDef object. */
	
	
	/* start CAN */
	err=CO_CANsetNormalMode();
    c9d8:	687b      	ldr	r3, [r7, #4]
    c9da:	4618      	mov	r0, r3
    c9dc:	4b08      	ldr	r3, [pc, #32]	; (ca00 <_ZN13CANOpen_Class14SetInitialModeEv+0x30>)
    c9de:	4798      	blx	r3
    c9e0:	4603      	mov	r3, r0
    c9e2:	461a      	mov	r2, r3
    c9e4:	687b      	ldr	r3, [r7, #4]
    c9e6:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
	//err=CO_CANsetNormalMode(CO->CANmodule[0]);

	reset = CO_RESET_NOT;
    c9ea:	687b      	ldr	r3, [r7, #4]
    c9ec:	2200      	movs	r2, #0
    c9ee:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	return	(int)err;
    c9f2:	687b      	ldr	r3, [r7, #4]
    c9f4:	f993 3151 	ldrsb.w	r3, [r3, #337]	; 0x151
}
    c9f8:	4618      	mov	r0, r3
    c9fa:	3708      	adds	r7, #8
    c9fc:	46bd      	mov	sp, r7
    c9fe:	bd80      	pop	{r7, pc}
    ca00:	0000d8c1 	.word	0x0000d8c1

0000ca04 <_ZN13CANOpen_Class16Periodic_ProcessEm>:

int	CANOpen_Class::Periodic_Process(uint32_t timeDifference){
    ca04:	b580      	push	{r7, lr}
    ca06:	b082      	sub	sp, #8
    ca08:	af00      	add	r7, sp, #0
    ca0a:	6078      	str	r0, [r7, #4]
    ca0c:	6039      	str	r1, [r7, #0]
	if (ptrCO->CANmodule[0]->CANnormal)
    ca0e:	687b      	ldr	r3, [r7, #4]
    ca10:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    ca14:	681b      	ldr	r3, [r3, #0]
    ca16:	7d1b      	ldrb	r3, [r3, #20]
    ca18:	b2db      	uxtb	r3, r3
    ca1a:	2b00      	cmp	r3, #0
    ca1c:	bf14      	ite	ne
    ca1e:	2301      	movne	r3, #1
    ca20:	2300      	moveq	r3, #0
    ca22:	b2db      	uxtb	r3, r3
    ca24:	2b00      	cmp	r3, #0
    ca26:	d015      	beq.n	ca54 <_ZN13CANOpen_Class16Periodic_ProcessEm+0x50>
	{
		syncWas=CO_process_SYNC_RPDO(timeDifference);
    ca28:	687b      	ldr	r3, [r7, #4]
    ca2a:	6839      	ldr	r1, [r7, #0]
    ca2c:	4618      	mov	r0, r3
    ca2e:	4b0d      	ldr	r3, [pc, #52]	; (ca64 <_ZN13CANOpen_Class16Periodic_ProcessEm+0x60>)
    ca30:	4798      	blx	r3
    ca32:	4603      	mov	r3, r0
    ca34:	461a      	mov	r2, r3
    ca36:	687b      	ldr	r3, [r7, #4]
    ca38:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
		CO_process_TPDO(syncWas,timeDifference);
    ca3c:	6878      	ldr	r0, [r7, #4]
    ca3e:	687b      	ldr	r3, [r7, #4]
    ca40:	f893 3152 	ldrb.w	r3, [r3, #338]	; 0x152
    ca44:	683a      	ldr	r2, [r7, #0]
    ca46:	4619      	mov	r1, r3
    ca48:	4b07      	ldr	r3, [pc, #28]	; (ca68 <_ZN13CANOpen_Class16Periodic_ProcessEm+0x64>)
    ca4a:	4798      	blx	r3
		CAN_Polling_Tx();
    ca4c:	687b      	ldr	r3, [r7, #4]
    ca4e:	4618      	mov	r0, r3
    ca50:	4b06      	ldr	r3, [pc, #24]	; (ca6c <_ZN13CANOpen_Class16Periodic_ProcessEm+0x68>)
    ca52:	4798      	blx	r3
	}
	
	return	int(syncWas);
    ca54:	687b      	ldr	r3, [r7, #4]
    ca56:	f893 3152 	ldrb.w	r3, [r3, #338]	; 0x152
}
    ca5a:	4618      	mov	r0, r3
    ca5c:	3708      	adds	r7, #8
    ca5e:	46bd      	mov	sp, r7
    ca60:	bd80      	pop	{r7, pc}
    ca62:	bf00      	nop
    ca64:	0000d565 	.word	0x0000d565
    ca68:	0000d5e9 	.word	0x0000d5e9
    ca6c:	0000e0fd 	.word	0x0000e0fd

0000ca70 <_ZN13CANOpen_Class15StartNMTServiceEv>:


bool	CANOpen_Class::StartNMTService(void){
    ca70:	b580      	push	{r7, lr}
    ca72:	b084      	sub	sp, #16
    ca74:	af00      	add	r7, sp, #0
    ca76:	6078      	str	r0, [r7, #4]
	bool operational=false;
    ca78:	2300      	movs	r3, #0
    ca7a:	73fb      	strb	r3, [r7, #15]
	while ((!operational))
    ca7c:	7bfb      	ldrb	r3, [r7, #15]
    ca7e:	2b00      	cmp	r3, #0
    ca80:	d115      	bne.n	caae <_ZN13CANOpen_Class15StartNMTServiceEv+0x3e>
	{
		CO_sendNMTcommand(1,2);
    ca82:	687b      	ldr	r3, [r7, #4]
    ca84:	2202      	movs	r2, #2
    ca86:	2101      	movs	r1, #1
    ca88:	4618      	mov	r0, r3
    ca8a:	4b0b      	ldr	r3, [pc, #44]	; (cab8 <_ZN13CANOpen_Class15StartNMTServiceEv+0x48>)
    ca8c:	4798      	blx	r3
		delay_ms(100);
    ca8e:	2064      	movs	r0, #100	; 0x64
    ca90:	4b0a      	ldr	r3, [pc, #40]	; (cabc <_ZN13CANOpen_Class15StartNMTServiceEv+0x4c>)
    ca92:	4798      	blx	r3
		operational=(ptrCO->HBcons->monitoredNodes[2].NMTstate==5);
    ca94:	687b      	ldr	r3, [r7, #4]
    ca96:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    ca9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    ca9c:	689b      	ldr	r3, [r3, #8]
    ca9e:	3320      	adds	r3, #32
    caa0:	781b      	ldrb	r3, [r3, #0]
    caa2:	2b05      	cmp	r3, #5
    caa4:	bf0c      	ite	eq
    caa6:	2301      	moveq	r3, #1
    caa8:	2300      	movne	r3, #0
    caaa:	73fb      	strb	r3, [r7, #15]
	while ((!operational))
    caac:	e7e6      	b.n	ca7c <_ZN13CANOpen_Class15StartNMTServiceEv+0xc>
	}
	return	operational;
    caae:	7bfb      	ldrb	r3, [r7, #15]
}
    cab0:	4618      	mov	r0, r3
    cab2:	3710      	adds	r7, #16
    cab4:	46bd      	mov	sp, r7
    cab6:	bd80      	pop	{r7, pc}
    cab8:	0000cb31 	.word	0x0000cb31
    cabc:	00001ccd 	.word	0x00001ccd

0000cac0 <_ZN8CO_ClassC1Ev>:
		static	int32_t             *CO_traceValueBuffers[CO_NO_TRACE];
	#endif
#endif

// default constructor
CO_Class::CO_Class()
    cac0:	b580      	push	{r7, lr}
    cac2:	b082      	sub	sp, #8
    cac4:	af00      	add	r7, sp, #0
    cac6:	6078      	str	r0, [r7, #4]
    cac8:	687b      	ldr	r3, [r7, #4]
    caca:	4618      	mov	r0, r3
    cacc:	4b0b      	ldr	r3, [pc, #44]	; (cafc <_ZN8CO_ClassC1Ev+0x3c>)
    cace:	4798      	blx	r3
    cad0:	4a0b      	ldr	r2, [pc, #44]	; (cb00 <_ZN8CO_ClassC1Ev+0x40>)
    cad2:	687b      	ldr	r3, [r7, #4]
    cad4:	601a      	str	r2, [r3, #0]
{
	ptrCO = CO;
    cad6:	4b0b      	ldr	r3, [pc, #44]	; (cb04 <_ZN8CO_ClassC1Ev+0x44>)
    cad8:	681a      	ldr	r2, [r3, #0]
    cada:	687b      	ldr	r3, [r7, #4]
    cadc:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	coCanDescr=NULL;
    cae0:	687b      	ldr	r3, [r7, #4]
    cae2:	2200      	movs	r2, #0
    cae4:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	CO_memoryUsed=sizeof(COO);
    cae8:	687b      	ldr	r3, [r7, #4]
    caea:	223c      	movs	r2, #60	; 0x3c
    caec:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
} //CO_Class
    caf0:	687b      	ldr	r3, [r7, #4]
    caf2:	4618      	mov	r0, r3
    caf4:	3708      	adds	r7, #8
    caf6:	46bd      	mov	sp, r7
    caf8:	bd80      	pop	{r7, pc}
    cafa:	bf00      	nop
    cafc:	0000d749 	.word	0x0000d749
    cb00:	000134f4 	.word	0x000134f4
    cb04:	200011c8 	.word	0x200011c8

0000cb08 <_ZN8CO_ClassD1Ev>:

// default destructor
CO_Class::~CO_Class()
    cb08:	b580      	push	{r7, lr}
    cb0a:	b082      	sub	sp, #8
    cb0c:	af00      	add	r7, sp, #0
    cb0e:	6078      	str	r0, [r7, #4]
    cb10:	4a05      	ldr	r2, [pc, #20]	; (cb28 <_ZN8CO_ClassD1Ev+0x20>)
    cb12:	687b      	ldr	r3, [r7, #4]
    cb14:	601a      	str	r2, [r3, #0]
    cb16:	687b      	ldr	r3, [r7, #4]
    cb18:	4618      	mov	r0, r3
    cb1a:	4b04      	ldr	r3, [pc, #16]	; (cb2c <_ZN8CO_ClassD1Ev+0x24>)
    cb1c:	4798      	blx	r3
{
} //~CO_Class
    cb1e:	687b      	ldr	r3, [r7, #4]
    cb20:	4618      	mov	r0, r3
    cb22:	3708      	adds	r7, #8
    cb24:	46bd      	mov	sp, r7
    cb26:	bd80      	pop	{r7, pc}
    cb28:	000134f4 	.word	0x000134f4
    cb2c:	0000d7b5 	.word	0x0000d7b5

0000cb30 <_ZN8CO_Class17CO_sendNMTcommandEhh>:



uint8_t CO_Class::CO_sendNMTcommand( uint8_t command, uint8_t nodeID){
    cb30:	b580      	push	{r7, lr}
    cb32:	b082      	sub	sp, #8
    cb34:	af00      	add	r7, sp, #0
    cb36:	6078      	str	r0, [r7, #4]
    cb38:	460b      	mov	r3, r1
    cb3a:	70fb      	strb	r3, [r7, #3]
    cb3c:	4613      	mov	r3, r2
    cb3e:	70bb      	strb	r3, [r7, #2]
	if(NMTM_txBuff == 0){
    cb40:	687b      	ldr	r3, [r7, #4]
    cb42:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
    cb46:	2b00      	cmp	r3, #0
    cb48:	d101      	bne.n	cb4e <_ZN8CO_Class17CO_sendNMTcommandEhh+0x1e>
		/* error, CO_CANtxBufferInit() was not called for this buffer. */
		return CO_ERROR_TX_UNCONFIGURED; /* -11 */
    cb4a:	23f5      	movs	r3, #245	; 0xf5
    cb4c:	e053      	b.n	cbf6 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xc6>
	}
	NMTM_txBuff->data[0] = command;
    cb4e:	687b      	ldr	r3, [r7, #4]
    cb50:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
    cb54:	78fa      	ldrb	r2, [r7, #3]
    cb56:	715a      	strb	r2, [r3, #5]
	NMTM_txBuff->data[1] = nodeID;
    cb58:	687b      	ldr	r3, [r7, #4]
    cb5a:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
    cb5e:	78ba      	ldrb	r2, [r7, #2]
    cb60:	719a      	strb	r2, [r3, #6]

	/* Apply NMT command also to this node, if set so. */
	if(nodeID == 0 || nodeID == CO->NMT->nodeId){
    cb62:	78bb      	ldrb	r3, [r7, #2]
    cb64:	2b00      	cmp	r3, #0
    cb66:	d006      	beq.n	cb76 <_ZN8CO_Class17CO_sendNMTcommandEhh+0x46>
    cb68:	4b25      	ldr	r3, [pc, #148]	; (cc00 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
    cb6a:	681b      	ldr	r3, [r3, #0]
    cb6c:	691b      	ldr	r3, [r3, #16]
    cb6e:	7a9b      	ldrb	r3, [r3, #10]
    cb70:	78ba      	ldrb	r2, [r7, #2]
    cb72:	429a      	cmp	r2, r3
    cb74:	d135      	bne.n	cbe2 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
		switch(command){
    cb76:	78fb      	ldrb	r3, [r7, #3]
    cb78:	2b80      	cmp	r3, #128	; 0x80
    cb7a:	d01f      	beq.n	cbbc <_ZN8CO_Class17CO_sendNMTcommandEhh+0x8c>
    cb7c:	2b80      	cmp	r3, #128	; 0x80
    cb7e:	dc04      	bgt.n	cb8a <_ZN8CO_Class17CO_sendNMTcommandEhh+0x5a>
    cb80:	2b01      	cmp	r3, #1
    cb82:	d007      	beq.n	cb94 <_ZN8CO_Class17CO_sendNMTcommandEhh+0x64>
    cb84:	2b02      	cmp	r3, #2
    cb86:	d013      	beq.n	cbb0 <_ZN8CO_Class17CO_sendNMTcommandEhh+0x80>
    cb88:	e02b      	b.n	cbe2 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
    cb8a:	2b81      	cmp	r3, #129	; 0x81
    cb8c:	d01c      	beq.n	cbc8 <_ZN8CO_Class17CO_sendNMTcommandEhh+0x98>
    cb8e:	2b82      	cmp	r3, #130	; 0x82
    cb90:	d020      	beq.n	cbd4 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xa4>
    cb92:	e026      	b.n	cbe2 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
			case CO_NMT_ENTER_OPERATIONAL:
			if((*CO->NMT->emPr->errorRegister) == 0) {
    cb94:	4b1a      	ldr	r3, [pc, #104]	; (cc00 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
    cb96:	681b      	ldr	r3, [r3, #0]
    cb98:	691b      	ldr	r3, [r3, #16]
    cb9a:	695b      	ldr	r3, [r3, #20]
    cb9c:	681b      	ldr	r3, [r3, #0]
    cb9e:	781b      	ldrb	r3, [r3, #0]
    cba0:	2b00      	cmp	r3, #0
    cba2:	d11d      	bne.n	cbe0 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb0>
				CO->NMT->operatingState = CO_NMT_OPERATIONAL;
    cba4:	4b16      	ldr	r3, [pc, #88]	; (cc00 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
    cba6:	681b      	ldr	r3, [r3, #0]
    cba8:	691b      	ldr	r3, [r3, #16]
    cbaa:	2205      	movs	r2, #5
    cbac:	701a      	strb	r2, [r3, #0]
			}
			break;
    cbae:	e017      	b.n	cbe0 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb0>
			case CO_NMT_ENTER_STOPPED:
			CO->NMT->operatingState = CO_NMT_STOPPED;
    cbb0:	4b13      	ldr	r3, [pc, #76]	; (cc00 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
    cbb2:	681b      	ldr	r3, [r3, #0]
    cbb4:	691b      	ldr	r3, [r3, #16]
    cbb6:	2204      	movs	r2, #4
    cbb8:	701a      	strb	r2, [r3, #0]
			break;
    cbba:	e012      	b.n	cbe2 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
			case CO_NMT_ENTER_PRE_OPERATIONAL:
			CO->NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
    cbbc:	4b10      	ldr	r3, [pc, #64]	; (cc00 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
    cbbe:	681b      	ldr	r3, [r3, #0]
    cbc0:	691b      	ldr	r3, [r3, #16]
    cbc2:	227f      	movs	r2, #127	; 0x7f
    cbc4:	701a      	strb	r2, [r3, #0]
			break;
    cbc6:	e00c      	b.n	cbe2 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
			case CO_NMT_RESET_NODE:
			CO->NMT->resetCommand = CO_RESET_APP;
    cbc8:	4b0d      	ldr	r3, [pc, #52]	; (cc00 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
    cbca:	681b      	ldr	r3, [r3, #0]
    cbcc:	691b      	ldr	r3, [r3, #16]
    cbce:	2202      	movs	r2, #2
    cbd0:	725a      	strb	r2, [r3, #9]
			break;
    cbd2:	e006      	b.n	cbe2 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
			case CO_NMT_RESET_COMMUNICATION:
			CO->NMT->resetCommand = CO_RESET_COMM;
    cbd4:	4b0a      	ldr	r3, [pc, #40]	; (cc00 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
    cbd6:	681b      	ldr	r3, [r3, #0]
    cbd8:	691b      	ldr	r3, [r3, #16]
    cbda:	2201      	movs	r2, #1
    cbdc:	725a      	strb	r2, [r3, #9]
			break;
    cbde:	e000      	b.n	cbe2 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
			break;
    cbe0:	bf00      	nop
		}
	}

	return CAN_Send( NMTM_txBuff); /* 0 = success */
    cbe2:	687a      	ldr	r2, [r7, #4]
    cbe4:	687b      	ldr	r3, [r7, #4]
    cbe6:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
    cbea:	4619      	mov	r1, r3
    cbec:	4610      	mov	r0, r2
    cbee:	4b05      	ldr	r3, [pc, #20]	; (cc04 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd4>)
    cbf0:	4798      	blx	r3
    cbf2:	4603      	mov	r3, r0
    cbf4:	b2db      	uxtb	r3, r3
}
    cbf6:	4618      	mov	r0, r3
    cbf8:	3708      	adds	r7, #8
    cbfa:	46bd      	mov	sp, r7
    cbfc:	bd80      	pop	{r7, pc}
    cbfe:	bf00      	nop
    cc00:	200011c8 	.word	0x200011c8
    cc04:	0000dc1d 	.word	0x0000dc1d

0000cc08 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm>:
/******************************************************************************/
CO_ReturnError_t CO_Class::CO_init(
can_async_descriptor   *CANbaseAddress,
uint8_t                 nodeId,
uint32_t                bitRate)
{
    cc08:	b5f0      	push	{r4, r5, r6, r7, lr}
    cc0a:	b099      	sub	sp, #100	; 0x64
    cc0c:	af0c      	add	r7, sp, #48	; 0x30
    cc0e:	61f8      	str	r0, [r7, #28]
    cc10:	61b9      	str	r1, [r7, #24]
    cc12:	613b      	str	r3, [r7, #16]
    cc14:	4613      	mov	r3, r2
    cc16:	75fb      	strb	r3, [r7, #23]
	coCanDescr=CANbaseAddress;
    cc18:	69fb      	ldr	r3, [r7, #28]
    cc1a:	69ba      	ldr	r2, [r7, #24]
    cc1c:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	coNode=nodeId;
    cc20:	69fb      	ldr	r3, [r7, #28]
    cc22:	7dfa      	ldrb	r2, [r7, #23]
    cc24:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
	#endif


	/* Initialize CANopen object */
	#ifdef CO_USE_GLOBALS
		CO = &COO;
    cc28:	4ba3      	ldr	r3, [pc, #652]	; (ceb8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    cc2a:	4aa4      	ldr	r2, [pc, #656]	; (cebc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b4>)
    cc2c:	601a      	str	r2, [r3, #0]

		CO->CANmodule[0]                    = &COO_CANmodule;
    cc2e:	4ba2      	ldr	r3, [pc, #648]	; (ceb8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    cc30:	681b      	ldr	r3, [r3, #0]
    cc32:	4aa3      	ldr	r2, [pc, #652]	; (cec0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b8>)
    cc34:	601a      	str	r2, [r3, #0]
		CO_CANmodule_rxArray0               = &COO_CANmodule_rxArray0[0];
    cc36:	4ba3      	ldr	r3, [pc, #652]	; (cec4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2bc>)
    cc38:	4aa3      	ldr	r2, [pc, #652]	; (cec8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2c0>)
    cc3a:	601a      	str	r2, [r3, #0]
		CO_CANmodule_txArray0               = &COO_CANmodule_txArray0[0];
    cc3c:	4ba3      	ldr	r3, [pc, #652]	; (cecc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2c4>)
    cc3e:	4aa4      	ldr	r2, [pc, #656]	; (ced0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2c8>)
    cc40:	601a      	str	r2, [r3, #0]
		for(i=0; i<CO_NO_SDO_SERVER; i++){
    cc42:	69fb      	ldr	r3, [r7, #28]
    cc44:	2200      	movs	r2, #0
    cc46:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    cc4a:	69fb      	ldr	r3, [r7, #28]
    cc4c:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    cc50:	2b00      	cmp	r3, #0
    cc52:	d118      	bne.n	cc86 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x7e>
			CO->SDO[i]                      = &COO_SDO[i];
    cc54:	4b98      	ldr	r3, [pc, #608]	; (ceb8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    cc56:	6819      	ldr	r1, [r3, #0]
    cc58:	69fb      	ldr	r3, [r7, #28]
    cc5a:	f8d3 013c 	ldr.w	r0, [r3, #316]	; 0x13c
    cc5e:	69fb      	ldr	r3, [r7, #28]
    cc60:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
    cc64:	4613      	mov	r3, r2
    cc66:	011b      	lsls	r3, r3, #4
    cc68:	4413      	add	r3, r2
    cc6a:	00db      	lsls	r3, r3, #3
    cc6c:	4a99      	ldr	r2, [pc, #612]	; (ced4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2cc>)
    cc6e:	441a      	add	r2, r3
    cc70:	0083      	lsls	r3, r0, #2
    cc72:	440b      	add	r3, r1
    cc74:	605a      	str	r2, [r3, #4]
		for(i=0; i<CO_NO_SDO_SERVER; i++){
    cc76:	69fb      	ldr	r3, [r7, #28]
    cc78:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    cc7c:	1c5a      	adds	r2, r3, #1
    cc7e:	69fb      	ldr	r3, [r7, #28]
    cc80:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    cc84:	e7e1      	b.n	cc4a <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x42>
		}

		CO_SDO_ODExtensions                 = &COO_SDO_ODExtensions[0];
    cc86:	4b94      	ldr	r3, [pc, #592]	; (ced8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2d0>)
    cc88:	4a94      	ldr	r2, [pc, #592]	; (cedc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2d4>)
    cc8a:	601a      	str	r2, [r3, #0]
		CO->em                              = &COO_EM;
    cc8c:	4b8a      	ldr	r3, [pc, #552]	; (ceb8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    cc8e:	681b      	ldr	r3, [r3, #0]
    cc90:	4a93      	ldr	r2, [pc, #588]	; (cee0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2d8>)
    cc92:	609a      	str	r2, [r3, #8]
		CO->emPr                            = &COO_EMpr;
    cc94:	4b88      	ldr	r3, [pc, #544]	; (ceb8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    cc96:	681b      	ldr	r3, [r3, #0]
    cc98:	4a92      	ldr	r2, [pc, #584]	; (cee4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2dc>)
    cc9a:	60da      	str	r2, [r3, #12]
		CO->NMT                             = &COO_NMT;
    cc9c:	4b86      	ldr	r3, [pc, #536]	; (ceb8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    cc9e:	681b      	ldr	r3, [r3, #0]
    cca0:	4a91      	ldr	r2, [pc, #580]	; (cee8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2e0>)
    cca2:	611a      	str	r2, [r3, #16]
		CO->SYNC                            = &COO_SYNC;
    cca4:	4b84      	ldr	r3, [pc, #528]	; (ceb8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    cca6:	681b      	ldr	r3, [r3, #0]
    cca8:	4a90      	ldr	r2, [pc, #576]	; (ceec <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2e4>)
    ccaa:	615a      	str	r2, [r3, #20]
		for(i=0; i<CO_NO_RPDO; i++){
    ccac:	69fb      	ldr	r3, [r7, #28]
    ccae:	2200      	movs	r2, #0
    ccb0:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    ccb4:	69fb      	ldr	r3, [r7, #28]
    ccb6:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    ccba:	2b03      	cmp	r3, #3
    ccbc:	d818      	bhi.n	ccf0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0xe8>
			CO->RPDO[i]                     = &COO_RPDO[i];
    ccbe:	4b7e      	ldr	r3, [pc, #504]	; (ceb8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    ccc0:	6819      	ldr	r1, [r3, #0]
    ccc2:	69fb      	ldr	r3, [r7, #28]
    ccc4:	f8d3 013c 	ldr.w	r0, [r3, #316]	; 0x13c
    ccc8:	69fb      	ldr	r3, [r7, #28]
    ccca:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
    ccce:	4613      	mov	r3, r2
    ccd0:	005b      	lsls	r3, r3, #1
    ccd2:	4413      	add	r3, r2
    ccd4:	015b      	lsls	r3, r3, #5
    ccd6:	4a86      	ldr	r2, [pc, #536]	; (cef0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2e8>)
    ccd8:	441a      	add	r2, r3
    ccda:	1d83      	adds	r3, r0, #6
    ccdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(i=0; i<CO_NO_RPDO; i++){
    cce0:	69fb      	ldr	r3, [r7, #28]
    cce2:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    cce6:	1c5a      	adds	r2, r3, #1
    cce8:	69fb      	ldr	r3, [r7, #28]
    ccea:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    ccee:	e7e1      	b.n	ccb4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0xac>
		}
		for(i=0; i<CO_NO_TPDO; i++){
    ccf0:	69fb      	ldr	r3, [r7, #28]
    ccf2:	2200      	movs	r2, #0
    ccf4:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    ccf8:	69fb      	ldr	r3, [r7, #28]
    ccfa:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    ccfe:	2b03      	cmp	r3, #3
    cd00:	d817      	bhi.n	cd32 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x12a>
			CO->TPDO[i]                     = &COO_TPDO[i];
    cd02:	4b6d      	ldr	r3, [pc, #436]	; (ceb8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    cd04:	681b      	ldr	r3, [r3, #0]
    cd06:	69fa      	ldr	r2, [r7, #28]
    cd08:	f8d2 213c 	ldr.w	r2, [r2, #316]	; 0x13c
    cd0c:	69f9      	ldr	r1, [r7, #28]
    cd0e:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
    cd12:	2058      	movs	r0, #88	; 0x58
    cd14:	fb00 f101 	mul.w	r1, r0, r1
    cd18:	4876      	ldr	r0, [pc, #472]	; (cef4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2ec>)
    cd1a:	4401      	add	r1, r0
    cd1c:	320a      	adds	r2, #10
    cd1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for(i=0; i<CO_NO_TPDO; i++){
    cd22:	69fb      	ldr	r3, [r7, #28]
    cd24:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    cd28:	1c5a      	adds	r2, r3, #1
    cd2a:	69fb      	ldr	r3, [r7, #28]
    cd2c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    cd30:	e7e2      	b.n	ccf8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0xf0>
		}
		
		CO->HBcons                          = &COO_HBcons;
    cd32:	4b61      	ldr	r3, [pc, #388]	; (ceb8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    cd34:	681b      	ldr	r3, [r3, #0]
    cd36:	4a70      	ldr	r2, [pc, #448]	; (cef8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2f0>)
    cd38:	639a      	str	r2, [r3, #56]	; 0x38
		CO_HBcons_monitoredNodes            = &COO_HBcons_monitoredNodes[0];
    cd3a:	4b70      	ldr	r3, [pc, #448]	; (cefc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2f4>)
    cd3c:	4a70      	ldr	r2, [pc, #448]	; (cf00 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2f8>)
    cd3e:	601a      	str	r2, [r3, #0]

	if(errCnt != 0) return CO_ERROR_OUT_OF_MEMORY;
	#endif


	CO->CANmodule[0]->CANnormal = false;
    cd40:	4b5d      	ldr	r3, [pc, #372]	; (ceb8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    cd42:	681b      	ldr	r3, [r3, #0]
    cd44:	681b      	ldr	r3, [r3, #0]
    cd46:	2200      	movs	r2, #0
    cd48:	751a      	strb	r2, [r3, #20]
	CO_CANsetConfigurationMode(coCanDescr);
    cd4a:	69fa      	ldr	r2, [r7, #28]
    cd4c:	69fb      	ldr	r3, [r7, #28]
    cd4e:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    cd52:	4619      	mov	r1, r3
    cd54:	4610      	mov	r0, r2
    cd56:	4b6b      	ldr	r3, [pc, #428]	; (cf04 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2fc>)
    cd58:	4798      	blx	r3

	/* Verify CANopen Node-ID */
	if(nodeId<1 || nodeId>127)
    cd5a:	7dfb      	ldrb	r3, [r7, #23]
    cd5c:	2b00      	cmp	r3, #0
    cd5e:	dd02      	ble.n	cd66 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x15e>
    cd60:	7dfb      	ldrb	r3, [r7, #23]
    cd62:	2b7f      	cmp	r3, #127	; 0x7f
    cd64:	dd05      	ble.n	cd72 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x16a>
	{
		CO_delete();
    cd66:	69f8      	ldr	r0, [r7, #28]
    cd68:	4b67      	ldr	r3, [pc, #412]	; (cf08 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x300>)
    cd6a:	4798      	blx	r3
		return CO_ERROR_PARAMETERS;
    cd6c:	f06f 030b 	mvn.w	r3, #11
    cd70:	e332      	b.n	d3d8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x7d0>
	}


	err = CANmodule_init(
    cd72:	69f8      	ldr	r0, [r7, #28]
    cd74:	4b50      	ldr	r3, [pc, #320]	; (ceb8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    cd76:	681b      	ldr	r3, [r3, #0]
    cd78:	6819      	ldr	r1, [r3, #0]
    cd7a:	69fb      	ldr	r3, [r7, #28]
    cd7c:	f8d3 4130 	ldr.w	r4, [r3, #304]	; 0x130
    cd80:	4b50      	ldr	r3, [pc, #320]	; (cec4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2bc>)
    cd82:	681d      	ldr	r5, [r3, #0]
    cd84:	4b51      	ldr	r3, [pc, #324]	; (cecc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2c4>)
    cd86:	681b      	ldr	r3, [r3, #0]
    cd88:	693a      	ldr	r2, [r7, #16]
    cd8a:	9203      	str	r2, [sp, #12]
    cd8c:	2209      	movs	r2, #9
    cd8e:	9202      	str	r2, [sp, #8]
    cd90:	9301      	str	r3, [sp, #4]
    cd92:	230b      	movs	r3, #11
    cd94:	9300      	str	r3, [sp, #0]
    cd96:	462b      	mov	r3, r5
    cd98:	4622      	mov	r2, r4
    cd9a:	4c5c      	ldr	r4, [pc, #368]	; (cf0c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x304>)
    cd9c:	47a0      	blx	r4
    cd9e:	4603      	mov	r3, r0
    cda0:	461a      	mov	r2, r3
    cda2:	69fb      	ldr	r3, [r7, #28]
    cda4:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
	CO_RXCAN_NO_MSGS,
	CO_CANmodule_txArray0,
	CO_TXCAN_NO_MSGS,
	bitRate);

	if(err){CO_delete(); return err;}
    cda8:	69fb      	ldr	r3, [r7, #28]
    cdaa:	f993 3140 	ldrsb.w	r3, [r3, #320]	; 0x140
    cdae:	2b00      	cmp	r3, #0
    cdb0:	d006      	beq.n	cdc0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x1b8>
    cdb2:	69f8      	ldr	r0, [r7, #28]
    cdb4:	4b54      	ldr	r3, [pc, #336]	; (cf08 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x300>)
    cdb6:	4798      	blx	r3
    cdb8:	69fb      	ldr	r3, [r7, #28]
    cdba:	f993 3140 	ldrsb.w	r3, [r3, #320]	; 0x140
    cdbe:	e30b      	b.n	d3d8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x7d0>

	for (i=0; i<CO_NO_SDO_SERVER; i++)
    cdc0:	69fb      	ldr	r3, [r7, #28]
    cdc2:	2200      	movs	r2, #0
    cdc4:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    cdc8:	69fb      	ldr	r3, [r7, #28]
    cdca:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    cdce:	2b00      	cmp	r3, #0
    cdd0:	f040 80a4 	bne.w	cf1c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x314>
	{
		uint32_t COB_IDClientToServer;
		uint32_t COB_IDServerToClient;
		if(i==0){
    cdd4:	69fb      	ldr	r3, [r7, #28]
    cdd6:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    cdda:	2b00      	cmp	r3, #0
    cddc:	d108      	bne.n	cdf0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x1e8>
			/*Default SDO server must be located at first index*/
			COB_IDClientToServer = CO_CAN_ID_RSDO + nodeId;
    cdde:	7dfb      	ldrb	r3, [r7, #23]
    cde0:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
    cde4:	62fb      	str	r3, [r7, #44]	; 0x2c
			COB_IDServerToClient = CO_CAN_ID_TSDO + nodeId;
    cde6:	7dfb      	ldrb	r3, [r7, #23]
    cde8:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
    cdec:	62bb      	str	r3, [r7, #40]	; 0x28
    cdee:	e017      	b.n	ce20 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x218>
			}else{
			COB_IDClientToServer = OD_SDOServerParameter[i].COB_IDClientToServer;
    cdf0:	69fb      	ldr	r3, [r7, #28]
    cdf2:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
    cdf6:	4946      	ldr	r1, [pc, #280]	; (cf10 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x308>)
    cdf8:	4613      	mov	r3, r2
    cdfa:	005b      	lsls	r3, r3, #1
    cdfc:	4413      	add	r3, r2
    cdfe:	009b      	lsls	r3, r3, #2
    ce00:	440b      	add	r3, r1
    ce02:	3364      	adds	r3, #100	; 0x64
    ce04:	681b      	ldr	r3, [r3, #0]
    ce06:	62fb      	str	r3, [r7, #44]	; 0x2c
			COB_IDServerToClient = OD_SDOServerParameter[i].COB_IDServerToClient;
    ce08:	69fb      	ldr	r3, [r7, #28]
    ce0a:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
    ce0e:	4940      	ldr	r1, [pc, #256]	; (cf10 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x308>)
    ce10:	4613      	mov	r3, r2
    ce12:	005b      	lsls	r3, r3, #1
    ce14:	4413      	add	r3, r2
    ce16:	009b      	lsls	r3, r3, #2
    ce18:	440b      	add	r3, r1
    ce1a:	3368      	adds	r3, #104	; 0x68
    ce1c:	681b      	ldr	r3, [r3, #0]
    ce1e:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		err = CO_SDO_init(
    ce20:	69fb      	ldr	r3, [r7, #28]
    ce22:	f103 0e04 	add.w	lr, r3, #4
    ce26:	4b24      	ldr	r3, [pc, #144]	; (ceb8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    ce28:	681a      	ldr	r2, [r3, #0]
			CO->SDO[i],
    ce2a:	69fb      	ldr	r3, [r7, #28]
    ce2c:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
		err = CO_SDO_init(
    ce30:	009b      	lsls	r3, r3, #2
    ce32:	4413      	add	r3, r2
    ce34:	685b      	ldr	r3, [r3, #4]
    ce36:	60fb      	str	r3, [r7, #12]
			COB_IDClientToServer,
			COB_IDServerToClient,
			OD_H1200_SDO_SERVER_PARAM+i,
    ce38:	69fb      	ldr	r3, [r7, #28]
    ce3a:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
		err = CO_SDO_init(
    ce3e:	f503 5290 	add.w	r2, r3, #4608	; 0x1200
			i==0 ? 0 : CO->SDO[0],
    ce42:	69fb      	ldr	r3, [r7, #28]
    ce44:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
		err = CO_SDO_init(
    ce48:	2b00      	cmp	r3, #0
    ce4a:	d003      	beq.n	ce54 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x24c>
			i==0 ? 0 : CO->SDO[0],
    ce4c:	4b1a      	ldr	r3, [pc, #104]	; (ceb8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    ce4e:	681b      	ldr	r3, [r3, #0]
		err = CO_SDO_init(
    ce50:	685b      	ldr	r3, [r3, #4]
    ce52:	e000      	b.n	ce56 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x24e>
    ce54:	2300      	movs	r3, #0
    ce56:	4920      	ldr	r1, [pc, #128]	; (ced8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2d0>)
    ce58:	6809      	ldr	r1, [r1, #0]
    ce5a:	4817      	ldr	r0, [pc, #92]	; (ceb8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    ce5c:	6800      	ldr	r0, [r0, #0]
    ce5e:	6800      	ldr	r0, [r0, #0]
			&CO_ObjDict[0],
			CO_OD_NoOfElements,
			CO_SDO_ODExtensions,
			nodeId,
			CO->CANmodule[0],
			CO_RXCAN_SDO_SRV+i,
    ce60:	69fc      	ldr	r4, [r7, #28]
    ce62:	f8d4 413c 	ldr.w	r4, [r4, #316]	; 0x13c
		err = CO_SDO_init(
    ce66:	3406      	adds	r4, #6
    ce68:	4d13      	ldr	r5, [pc, #76]	; (ceb8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    ce6a:	682d      	ldr	r5, [r5, #0]
    ce6c:	682d      	ldr	r5, [r5, #0]
			CO->CANmodule[0],
			CO_TXCAN_SDO_SRV+i);
    ce6e:	69fe      	ldr	r6, [r7, #28]
    ce70:	f8d6 613c 	ldr.w	r6, [r6, #316]	; 0x13c
		err = CO_SDO_init(
    ce74:	3607      	adds	r6, #7
    ce76:	9609      	str	r6, [sp, #36]	; 0x24
    ce78:	9508      	str	r5, [sp, #32]
    ce7a:	9407      	str	r4, [sp, #28]
    ce7c:	9006      	str	r0, [sp, #24]
    ce7e:	7df8      	ldrb	r0, [r7, #23]
    ce80:	9005      	str	r0, [sp, #20]
    ce82:	9104      	str	r1, [sp, #16]
    ce84:	2137      	movs	r1, #55	; 0x37
    ce86:	9103      	str	r1, [sp, #12]
    ce88:	4922      	ldr	r1, [pc, #136]	; (cf14 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x30c>)
    ce8a:	9102      	str	r1, [sp, #8]
    ce8c:	9301      	str	r3, [sp, #4]
    ce8e:	9200      	str	r2, [sp, #0]
    ce90:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ce92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    ce94:	68f9      	ldr	r1, [r7, #12]
    ce96:	4670      	mov	r0, lr
    ce98:	4c1f      	ldr	r4, [pc, #124]	; (cf18 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x310>)
    ce9a:	47a0      	blx	r4
    ce9c:	4603      	mov	r3, r0
    ce9e:	461a      	mov	r2, r3
    cea0:	69fb      	ldr	r3, [r7, #28]
    cea2:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
	for (i=0; i<CO_NO_SDO_SERVER; i++)
    cea6:	69fb      	ldr	r3, [r7, #28]
    cea8:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    ceac:	1c5a      	adds	r2, r3, #1
    ceae:	69fb      	ldr	r3, [r7, #28]
    ceb0:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    ceb4:	e788      	b.n	cdc8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x1c0>
    ceb6:	bf00      	nop
    ceb8:	200011c8 	.word	0x200011c8
    cebc:	2000118c 	.word	0x2000118c
    cec0:	200011dc 	.word	0x200011dc
    cec4:	200011cc 	.word	0x200011cc
    cec8:	20001200 	.word	0x20001200
    cecc:	200011d0 	.word	0x200011d0
    ced0:	200012b0 	.word	0x200012b0
    ced4:	20001340 	.word	0x20001340
    ced8:	200011d4 	.word	0x200011d4
    cedc:	200013c8 	.word	0x200013c8
    cee0:	2000165c 	.word	0x2000165c
    cee4:	200016c8 	.word	0x200016c8
    cee8:	200016e4 	.word	0x200016e4
    ceec:	20001708 	.word	0x20001708
    cef0:	20001744 	.word	0x20001744
    cef4:	200018c4 	.word	0x200018c4
    cef8:	20001a24 	.word	0x20001a24
    cefc:	200011d8 	.word	0x200011d8
    cf00:	20001a3c 	.word	0x20001a3c
    cf04:	0000d8a5 	.word	0x0000d8a5
    cf08:	0000d405 	.word	0x0000d405
    cf0c:	0000d909 	.word	0x0000d909
    cf10:	2000035c 	.word	0x2000035c
    cf14:	00013b1c 	.word	0x00013b1c
    cf18:	000109f1 	.word	0x000109f1
	}

	if(err){CO_delete(); return err;}
    cf1c:	69fb      	ldr	r3, [r7, #28]
    cf1e:	f993 3140 	ldrsb.w	r3, [r3, #320]	; 0x140
    cf22:	2b00      	cmp	r3, #0
    cf24:	d006      	beq.n	cf34 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x32c>
    cf26:	69f8      	ldr	r0, [r7, #28]
    cf28:	4b7d      	ldr	r3, [pc, #500]	; (d120 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    cf2a:	4798      	blx	r3
    cf2c:	69fb      	ldr	r3, [r7, #28]
    cf2e:	f993 3140 	ldrsb.w	r3, [r3, #320]	; 0x140
    cf32:	e251      	b.n	d3d8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x7d0>


	err = EM_Init(
    cf34:	69fb      	ldr	r3, [r7, #28]
    cf36:	1d18      	adds	r0, r3, #4
    cf38:	4b7a      	ldr	r3, [pc, #488]	; (d124 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x51c>)
    cf3a:	681b      	ldr	r3, [r3, #0]
    cf3c:	6899      	ldr	r1, [r3, #8]
    cf3e:	4b79      	ldr	r3, [pc, #484]	; (d124 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x51c>)
    cf40:	681b      	ldr	r3, [r3, #0]
    cf42:	68dc      	ldr	r4, [r3, #12]
    cf44:	4b77      	ldr	r3, [pc, #476]	; (d124 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x51c>)
    cf46:	681b      	ldr	r3, [r3, #0]
    cf48:	685d      	ldr	r5, [r3, #4]
    cf4a:	4b76      	ldr	r3, [pc, #472]	; (d124 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x51c>)
    cf4c:	681b      	ldr	r3, [r3, #0]
    cf4e:	681b      	ldr	r3, [r3, #0]
			&OD_errorRegister,
			&OD_preDefinedErrorField[0],
			ODL_preDefinedErrorField_arrayLength,
			CO->CANmodule[0],
			CO_TXCAN_EMERG,
			CO_CAN_ID_EMERGENCY + (uint32_t)nodeId);
    cf50:	7dfa      	ldrb	r2, [r7, #23]
	err = EM_Init(
    cf52:	3280      	adds	r2, #128	; 0x80
    cf54:	9207      	str	r2, [sp, #28]
    cf56:	2202      	movs	r2, #2
    cf58:	9206      	str	r2, [sp, #24]
    cf5a:	9305      	str	r3, [sp, #20]
    cf5c:	2308      	movs	r3, #8
    cf5e:	9304      	str	r3, [sp, #16]
    cf60:	4b71      	ldr	r3, [pc, #452]	; (d128 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x520>)
    cf62:	9303      	str	r3, [sp, #12]
    cf64:	4b71      	ldr	r3, [pc, #452]	; (d12c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x524>)
    cf66:	9302      	str	r3, [sp, #8]
    cf68:	230a      	movs	r3, #10
    cf6a:	9301      	str	r3, [sp, #4]
    cf6c:	4b70      	ldr	r3, [pc, #448]	; (d130 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x528>)
    cf6e:	9300      	str	r3, [sp, #0]
    cf70:	462b      	mov	r3, r5
    cf72:	4622      	mov	r2, r4
    cf74:	4c6f      	ldr	r4, [pc, #444]	; (d134 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x52c>)
    cf76:	47a0      	blx	r4
    cf78:	4603      	mov	r3, r0
    cf7a:	461a      	mov	r2, r3
    cf7c:	69fb      	ldr	r3, [r7, #28]
    cf7e:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140

	if(err){CO_delete(); return err;}
    cf82:	69fb      	ldr	r3, [r7, #28]
    cf84:	f993 3140 	ldrsb.w	r3, [r3, #320]	; 0x140
    cf88:	2b00      	cmp	r3, #0
    cf8a:	d006      	beq.n	cf9a <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x392>
    cf8c:	69f8      	ldr	r0, [r7, #28]
    cf8e:	4b64      	ldr	r3, [pc, #400]	; (d120 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    cf90:	4798      	blx	r3
    cf92:	69fb      	ldr	r3, [r7, #28]
    cf94:	f993 3140 	ldrsb.w	r3, [r3, #320]	; 0x140
    cf98:	e21e      	b.n	d3d8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x7d0>


	err = NMT_Init(
    cf9a:	69fb      	ldr	r3, [r7, #28]
    cf9c:	f103 0010 	add.w	r0, r3, #16
    cfa0:	4b60      	ldr	r3, [pc, #384]	; (d124 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x51c>)
    cfa2:	681b      	ldr	r3, [r3, #0]
    cfa4:	691c      	ldr	r4, [r3, #16]
    cfa6:	4b5f      	ldr	r3, [pc, #380]	; (d124 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x51c>)
    cfa8:	681b      	ldr	r3, [r3, #0]
    cfaa:	68dd      	ldr	r5, [r3, #12]
    cfac:	4b5d      	ldr	r3, [pc, #372]	; (d124 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x51c>)
    cfae:	681b      	ldr	r3, [r3, #0]
    cfb0:	681b      	ldr	r3, [r3, #0]
    cfb2:	4a5c      	ldr	r2, [pc, #368]	; (d124 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x51c>)
    cfb4:	6812      	ldr	r2, [r2, #0]
    cfb6:	6812      	ldr	r2, [r2, #0]
	CO->CANmodule[0],
	CO_RXCAN_NMT,
	CO_CAN_ID_NMT_SERVICE,
	CO->CANmodule[0],
	CO_TXCAN_HB,
	CO_CAN_ID_HEARTBEAT + nodeId);
    cfb8:	7df9      	ldrb	r1, [r7, #23]
    cfba:	f501 61e0 	add.w	r1, r1, #1792	; 0x700
	err = NMT_Init(
    cfbe:	7dfe      	ldrb	r6, [r7, #23]
    cfc0:	9106      	str	r1, [sp, #24]
    cfc2:	2108      	movs	r1, #8
    cfc4:	9105      	str	r1, [sp, #20]
    cfc6:	9204      	str	r2, [sp, #16]
    cfc8:	2200      	movs	r2, #0
    cfca:	9203      	str	r2, [sp, #12]
    cfcc:	2200      	movs	r2, #0
    cfce:	9202      	str	r2, [sp, #8]
    cfd0:	9301      	str	r3, [sp, #4]
    cfd2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    cfd6:	9300      	str	r3, [sp, #0]
    cfd8:	4633      	mov	r3, r6
    cfda:	462a      	mov	r2, r5
    cfdc:	4621      	mov	r1, r4
    cfde:	4c56      	ldr	r4, [pc, #344]	; (d138 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x530>)
    cfe0:	47a0      	blx	r4
    cfe2:	4603      	mov	r3, r0
    cfe4:	461a      	mov	r2, r3
    cfe6:	69fb      	ldr	r3, [r7, #28]
    cfe8:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140

	if(err){CO_delete(); return err;}
    cfec:	69fb      	ldr	r3, [r7, #28]
    cfee:	f993 3140 	ldrsb.w	r3, [r3, #320]	; 0x140
    cff2:	2b00      	cmp	r3, #0
    cff4:	d006      	beq.n	d004 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x3fc>
    cff6:	69f8      	ldr	r0, [r7, #28]
    cff8:	4b49      	ldr	r3, [pc, #292]	; (d120 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    cffa:	4798      	blx	r3
    cffc:	69fb      	ldr	r3, [r7, #28]
    cffe:	f993 3140 	ldrsb.w	r3, [r3, #320]	; 0x140
    d002:	e1e9      	b.n	d3d8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x7d0>


	if (nodeId==1)
    d004:	7dfb      	ldrb	r3, [r7, #23]
    d006:	2b01      	cmp	r3, #1
    d008:	d14b      	bne.n	d0a2 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x49a>
	{
			NMTM_txBuff = CAN_Tx_BufferInit(/* return pointer to 8-byte CAN data buffer, which should be populated */
    d00a:	69f8      	ldr	r0, [r7, #28]
    d00c:	2300      	movs	r3, #0
    d00e:	9301      	str	r3, [sp, #4]
    d010:	2302      	movs	r3, #2
    d012:	9300      	str	r3, [sp, #0]
    d014:	2300      	movs	r3, #0
    d016:	2200      	movs	r2, #0
    d018:	2100      	movs	r1, #0
    d01a:	4c48      	ldr	r4, [pc, #288]	; (d13c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x534>)
    d01c:	47a0      	blx	r4
    d01e:	4602      	mov	r2, r0
    d020:	69fb      	ldr	r3, [r7, #28]
    d022:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
			0x0000,           /* CAN identifier */
			0,                /* rtr */
			2,                /* number of data bytes */
			0);
				
			err = SYNC_Init(
    d026:	4b3f      	ldr	r3, [pc, #252]	; (d124 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x51c>)
    d028:	681b      	ldr	r3, [r3, #0]
    d02a:	695e      	ldr	r6, [r3, #20]
    d02c:	4b3d      	ldr	r3, [pc, #244]	; (d124 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x51c>)
    d02e:	681b      	ldr	r3, [r3, #0]
    d030:	689b      	ldr	r3, [r3, #8]
    d032:	60fb      	str	r3, [r7, #12]
    d034:	4b3b      	ldr	r3, [pc, #236]	; (d124 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x51c>)
    d036:	681b      	ldr	r3, [r3, #0]
    d038:	6859      	ldr	r1, [r3, #4]
    d03a:	60b9      	str	r1, [r7, #8]
			CO->SYNC,
			CO->em,
			CO->SDO[0],
			&CO->NMT->operatingState,
    d03c:	4b39      	ldr	r3, [pc, #228]	; (d124 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x51c>)
    d03e:	681b      	ldr	r3, [r3, #0]
    d040:	691b      	ldr	r3, [r3, #16]
			err = SYNC_Init(
    d042:	607b      	str	r3, [r7, #4]
    d044:	4b3e      	ldr	r3, [pc, #248]	; (d140 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x538>)
    d046:	689b      	ldr	r3, [r3, #8]
    d048:	4a3d      	ldr	r2, [pc, #244]	; (d140 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x538>)
    d04a:	68d2      	ldr	r2, [r2, #12]
    d04c:	493c      	ldr	r1, [pc, #240]	; (d140 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x538>)
    d04e:	f891 1058 	ldrb.w	r1, [r1, #88]	; 0x58
    d052:	4834      	ldr	r0, [pc, #208]	; (d124 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x51c>)
    d054:	6800      	ldr	r0, [r0, #0]
    d056:	6800      	ldr	r0, [r0, #0]
    d058:	4c32      	ldr	r4, [pc, #200]	; (d124 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x51c>)
    d05a:	6824      	ldr	r4, [r4, #0]
    d05c:	6824      	ldr	r4, [r4, #0]
    d05e:	2501      	movs	r5, #1
    d060:	9507      	str	r5, [sp, #28]
    d062:	9406      	str	r4, [sp, #24]
    d064:	2401      	movs	r4, #1
    d066:	9405      	str	r4, [sp, #20]
    d068:	9004      	str	r0, [sp, #16]
    d06a:	9103      	str	r1, [sp, #12]
    d06c:	9202      	str	r2, [sp, #8]
    d06e:	9301      	str	r3, [sp, #4]
    d070:	6878      	ldr	r0, [r7, #4]
    d072:	9000      	str	r0, [sp, #0]
    d074:	68bb      	ldr	r3, [r7, #8]
    d076:	68fa      	ldr	r2, [r7, #12]
    d078:	4631      	mov	r1, r6
    d07a:	69f8      	ldr	r0, [r7, #28]
    d07c:	4c31      	ldr	r4, [pc, #196]	; (d144 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x53c>)
    d07e:	47a0      	blx	r4
    d080:	4603      	mov	r3, r0
    d082:	461a      	mov	r2, r3
    d084:	69fb      	ldr	r3, [r7, #28]
    d086:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
			CO->CANmodule[0],
			CO_RXCAN_SYNC,
			CO->CANmodule[0],
			CO_TXCAN_SYNC);

			if(err){CO_delete(); return err;}
    d08a:	69fb      	ldr	r3, [r7, #28]
    d08c:	f993 3140 	ldrsb.w	r3, [r3, #320]	; 0x140
    d090:	2b00      	cmp	r3, #0
    d092:	d059      	beq.n	d148 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x540>
    d094:	69f8      	ldr	r0, [r7, #28]
    d096:	4b22      	ldr	r3, [pc, #136]	; (d120 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    d098:	4798      	blx	r3
    d09a:	69fb      	ldr	r3, [r7, #28]
    d09c:	f993 3140 	ldrsb.w	r3, [r3, #320]	; 0x140
    d0a0:	e19a      	b.n	d3d8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x7d0>
	}else{
			err = SYNC_Init(
    d0a2:	4b20      	ldr	r3, [pc, #128]	; (d124 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x51c>)
    d0a4:	681b      	ldr	r3, [r3, #0]
    d0a6:	695e      	ldr	r6, [r3, #20]
    d0a8:	4b1e      	ldr	r3, [pc, #120]	; (d124 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x51c>)
    d0aa:	681b      	ldr	r3, [r3, #0]
    d0ac:	689b      	ldr	r3, [r3, #8]
    d0ae:	60fb      	str	r3, [r7, #12]
    d0b0:	4b1c      	ldr	r3, [pc, #112]	; (d124 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x51c>)
    d0b2:	681b      	ldr	r3, [r3, #0]
    d0b4:	6859      	ldr	r1, [r3, #4]
    d0b6:	60b9      	str	r1, [r7, #8]
			CO->SYNC,
			CO->em,
			CO->SDO[0],
			&CO->NMT->operatingState,
    d0b8:	4b1a      	ldr	r3, [pc, #104]	; (d124 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x51c>)
    d0ba:	681b      	ldr	r3, [r3, #0]
    d0bc:	691b      	ldr	r3, [r3, #16]
			err = SYNC_Init(
    d0be:	607b      	str	r3, [r7, #4]
    d0c0:	4b1f      	ldr	r3, [pc, #124]	; (d140 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x538>)
    d0c2:	689b      	ldr	r3, [r3, #8]
    d0c4:	4a1e      	ldr	r2, [pc, #120]	; (d140 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x538>)
    d0c6:	68d2      	ldr	r2, [r2, #12]
    d0c8:	491d      	ldr	r1, [pc, #116]	; (d140 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x538>)
    d0ca:	f891 1058 	ldrb.w	r1, [r1, #88]	; 0x58
    d0ce:	4815      	ldr	r0, [pc, #84]	; (d124 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x51c>)
    d0d0:	6800      	ldr	r0, [r0, #0]
    d0d2:	6800      	ldr	r0, [r0, #0]
    d0d4:	4c13      	ldr	r4, [pc, #76]	; (d124 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x51c>)
    d0d6:	6824      	ldr	r4, [r4, #0]
    d0d8:	6824      	ldr	r4, [r4, #0]
    d0da:	2501      	movs	r5, #1
    d0dc:	9507      	str	r5, [sp, #28]
    d0de:	9406      	str	r4, [sp, #24]
    d0e0:	2401      	movs	r4, #1
    d0e2:	9405      	str	r4, [sp, #20]
    d0e4:	9004      	str	r0, [sp, #16]
    d0e6:	9103      	str	r1, [sp, #12]
    d0e8:	9202      	str	r2, [sp, #8]
    d0ea:	9301      	str	r3, [sp, #4]
    d0ec:	6878      	ldr	r0, [r7, #4]
    d0ee:	9000      	str	r0, [sp, #0]
    d0f0:	68bb      	ldr	r3, [r7, #8]
    d0f2:	68fa      	ldr	r2, [r7, #12]
    d0f4:	4631      	mov	r1, r6
    d0f6:	69f8      	ldr	r0, [r7, #28]
    d0f8:	4c12      	ldr	r4, [pc, #72]	; (d144 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x53c>)
    d0fa:	47a0      	blx	r4
    d0fc:	4603      	mov	r3, r0
    d0fe:	461a      	mov	r2, r3
    d100:	69fb      	ldr	r3, [r7, #28]
    d102:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
			CO->CANmodule[0],
			CO_RXCAN_SYNC,
			CO->CANmodule[0],
			CO_TXCAN_SYNC);

			if(err){CO_delete(); return err;}
    d106:	69fb      	ldr	r3, [r7, #28]
    d108:	f993 3140 	ldrsb.w	r3, [r3, #320]	; 0x140
    d10c:	2b00      	cmp	r3, #0
    d10e:	d01b      	beq.n	d148 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x540>
    d110:	69f8      	ldr	r0, [r7, #28]
    d112:	4b03      	ldr	r3, [pc, #12]	; (d120 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    d114:	4798      	blx	r3
    d116:	69fb      	ldr	r3, [r7, #28]
    d118:	f993 3140 	ldrsb.w	r3, [r3, #320]	; 0x140
    d11c:	e15c      	b.n	d3d8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x7d0>
    d11e:	bf00      	nop
    d120:	0000d405 	.word	0x0000d405
    d124:	200011c8 	.word	0x200011c8
    d128:	200001ec 	.word	0x200001ec
    d12c:	200001e4 	.word	0x200001e4
    d130:	20000214 	.word	0x20000214
    d134:	0000e36d 	.word	0x0000e36d
    d138:	0000ee5d 	.word	0x0000ee5d
    d13c:	0000db71 	.word	0x0000db71
    d140:	2000035c 	.word	0x2000035c
    d144:	000129bd 	.word	0x000129bd





	for(i=0; i<CO_NO_RPDO; i++){
    d148:	69fb      	ldr	r3, [r7, #28]
    d14a:	2200      	movs	r2, #0
    d14c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    d150:	69fb      	ldr	r3, [r7, #28]
    d152:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    d156:	2b03      	cmp	r3, #3
    d158:	d87f      	bhi.n	d25a <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x652>
		CO_CANmodule_t *CANdevRx = CO->CANmodule[0];
    d15a:	4ba1      	ldr	r3, [pc, #644]	; (d3e0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x7d8>)
    d15c:	681b      	ldr	r3, [r3, #0]
    d15e:	681b      	ldr	r3, [r3, #0]
    d160:	627b      	str	r3, [r7, #36]	; 0x24
		CANdevRxIdx = CO_RXCAN_RPDO + i;
    d162:	69fb      	ldr	r3, [r7, #28]
    d164:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    d168:	1c9a      	adds	r2, r3, #2
    d16a:	69fb      	ldr	r3, [r7, #28]
    d16c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134

		err = CO_RPDO_init(
    d170:	4b9b      	ldr	r3, [pc, #620]	; (d3e0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x7d8>)
    d172:	681b      	ldr	r3, [r3, #0]
		CO->RPDO[i],
    d174:	69fa      	ldr	r2, [r7, #28]
    d176:	f8d2 213c 	ldr.w	r2, [r2, #316]	; 0x13c
		err = CO_RPDO_init(
    d17a:	3206      	adds	r2, #6
    d17c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    d180:	60fb      	str	r3, [r7, #12]
    d182:	4b97      	ldr	r3, [pc, #604]	; (d3e0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x7d8>)
    d184:	681b      	ldr	r3, [r3, #0]
    d186:	689b      	ldr	r3, [r3, #8]
    d188:	60bb      	str	r3, [r7, #8]
    d18a:	4b95      	ldr	r3, [pc, #596]	; (d3e0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x7d8>)
    d18c:	681b      	ldr	r3, [r3, #0]
    d18e:	685b      	ldr	r3, [r3, #4]
    d190:	607b      	str	r3, [r7, #4]
    d192:	4b93      	ldr	r3, [pc, #588]	; (d3e0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x7d8>)
    d194:	681b      	ldr	r3, [r3, #0]
    d196:	6958      	ldr	r0, [r3, #20]
		CO->em,
		CO->SDO[0],
		CO->SYNC,
		&CO->NMT->operatingState,
    d198:	4b91      	ldr	r3, [pc, #580]	; (d3e0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x7d8>)
    d19a:	681b      	ldr	r3, [r3, #0]
    d19c:	691b      	ldr	r3, [r3, #16]
		err = CO_RPDO_init(
    d19e:	603b      	str	r3, [r7, #0]
		nodeId,
		((i<4) ? (CO_CAN_ID_RPDO_1+i*0x100) : 0),
    d1a0:	69fb      	ldr	r3, [r7, #28]
    d1a2:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
		err = CO_RPDO_init(
    d1a6:	2b03      	cmp	r3, #3
    d1a8:	d805      	bhi.n	d1b6 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x5ae>
		((i<4) ? (CO_CAN_ID_RPDO_1+i*0x100) : 0),
    d1aa:	69fb      	ldr	r3, [r7, #28]
    d1ac:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
		err = CO_RPDO_init(
    d1b0:	3302      	adds	r3, #2
    d1b2:	021a      	lsls	r2, r3, #8
    d1b4:	e000      	b.n	d1b8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x5b0>
    d1b6:	2200      	movs	r2, #0
		0,
		(CO_RPDOCommPar_t*) &OD_RPDOCommunicationParameter[i],
    d1b8:	69fb      	ldr	r3, [r7, #28]
    d1ba:	f8d3 113c 	ldr.w	r1, [r3, #316]	; 0x13c
    d1be:	460b      	mov	r3, r1
    d1c0:	005b      	lsls	r3, r3, #1
    d1c2:	440b      	add	r3, r1
    d1c4:	009b      	lsls	r3, r3, #2
    d1c6:	3368      	adds	r3, #104	; 0x68
    d1c8:	4986      	ldr	r1, [pc, #536]	; (d3e4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x7dc>)
    d1ca:	440b      	add	r3, r1
    d1cc:	1d1c      	adds	r4, r3, #4
		(CO_RPDOMapPar_t*) &OD_RPDOMappingParameter[i],
    d1ce:	69fb      	ldr	r3, [r7, #28]
    d1d0:	f8d3 113c 	ldr.w	r1, [r3, #316]	; 0x13c
    d1d4:	460b      	mov	r3, r1
    d1d6:	00db      	lsls	r3, r3, #3
    d1d8:	440b      	add	r3, r1
    d1da:	009b      	lsls	r3, r3, #2
    d1dc:	3398      	adds	r3, #152	; 0x98
    d1de:	4981      	ldr	r1, [pc, #516]	; (d3e4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x7dc>)
    d1e0:	440b      	add	r3, r1
    d1e2:	3304      	adds	r3, #4
		OD_H1400_RXPDO_1_PARAM+i,
    d1e4:	69f9      	ldr	r1, [r7, #28]
    d1e6:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
		err = CO_RPDO_init(
    d1ea:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
		OD_H1600_RXPDO_1_MAPPING+i,
    d1ee:	69fd      	ldr	r5, [r7, #28]
    d1f0:	f8d5 513c 	ldr.w	r5, [r5, #316]	; 0x13c
		err = CO_RPDO_init(
    d1f4:	f505 55b0 	add.w	r5, r5, #5632	; 0x1600
    d1f8:	69fe      	ldr	r6, [r7, #28]
    d1fa:	f8d6 6134 	ldr.w	r6, [r6, #308]	; 0x134
    d1fe:	960a      	str	r6, [sp, #40]	; 0x28
    d200:	6a7e      	ldr	r6, [r7, #36]	; 0x24
    d202:	9609      	str	r6, [sp, #36]	; 0x24
    d204:	9508      	str	r5, [sp, #32]
    d206:	9107      	str	r1, [sp, #28]
    d208:	9306      	str	r3, [sp, #24]
    d20a:	9405      	str	r4, [sp, #20]
    d20c:	2300      	movs	r3, #0
    d20e:	9304      	str	r3, [sp, #16]
    d210:	9203      	str	r2, [sp, #12]
    d212:	7dfb      	ldrb	r3, [r7, #23]
    d214:	9302      	str	r3, [sp, #8]
    d216:	683b      	ldr	r3, [r7, #0]
    d218:	9301      	str	r3, [sp, #4]
    d21a:	9000      	str	r0, [sp, #0]
    d21c:	687b      	ldr	r3, [r7, #4]
    d21e:	68ba      	ldr	r2, [r7, #8]
    d220:	68f9      	ldr	r1, [r7, #12]
    d222:	69f8      	ldr	r0, [r7, #28]
    d224:	4c70      	ldr	r4, [pc, #448]	; (d3e8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x7e0>)
    d226:	47a0      	blx	r4
    d228:	4603      	mov	r3, r0
    d22a:	461a      	mov	r2, r3
    d22c:	69fb      	ldr	r3, [r7, #28]
    d22e:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
		CANdevRx,
		CANdevRxIdx);

		if(err){CO_delete(); return err;}
    d232:	69fb      	ldr	r3, [r7, #28]
    d234:	f993 3140 	ldrsb.w	r3, [r3, #320]	; 0x140
    d238:	2b00      	cmp	r3, #0
    d23a:	d006      	beq.n	d24a <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x642>
    d23c:	69f8      	ldr	r0, [r7, #28]
    d23e:	4b6b      	ldr	r3, [pc, #428]	; (d3ec <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x7e4>)
    d240:	4798      	blx	r3
    d242:	69fb      	ldr	r3, [r7, #28]
    d244:	f993 3140 	ldrsb.w	r3, [r3, #320]	; 0x140
    d248:	e0c6      	b.n	d3d8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x7d0>
	for(i=0; i<CO_NO_RPDO; i++){
    d24a:	69fb      	ldr	r3, [r7, #28]
    d24c:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    d250:	1c5a      	adds	r2, r3, #1
    d252:	69fb      	ldr	r3, [r7, #28]
    d254:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    d258:	e77a      	b.n	d150 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x548>
	}


	for(i=0; i<CO_NO_TPDO; i++){
    d25a:	69fb      	ldr	r3, [r7, #28]
    d25c:	2200      	movs	r2, #0
    d25e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    d262:	69fb      	ldr	r3, [r7, #28]
    d264:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    d268:	2b03      	cmp	r3, #3
    d26a:	d876      	bhi.n	d35a <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x752>
		err = CO_TPDO_init(
    d26c:	4b5c      	ldr	r3, [pc, #368]	; (d3e0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x7d8>)
    d26e:	681b      	ldr	r3, [r3, #0]
		CO->TPDO[i],
    d270:	69fa      	ldr	r2, [r7, #28]
    d272:	f8d2 213c 	ldr.w	r2, [r2, #316]	; 0x13c
		err = CO_TPDO_init(
    d276:	320a      	adds	r2, #10
    d278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    d27c:	60fb      	str	r3, [r7, #12]
    d27e:	4b58      	ldr	r3, [pc, #352]	; (d3e0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x7d8>)
    d280:	681b      	ldr	r3, [r3, #0]
    d282:	689b      	ldr	r3, [r3, #8]
    d284:	60bb      	str	r3, [r7, #8]
    d286:	4b56      	ldr	r3, [pc, #344]	; (d3e0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x7d8>)
    d288:	681b      	ldr	r3, [r3, #0]
    d28a:	685b      	ldr	r3, [r3, #4]
    d28c:	607b      	str	r3, [r7, #4]
		CO->em,
		CO->SDO[0],
		&CO->NMT->operatingState,
    d28e:	4b54      	ldr	r3, [pc, #336]	; (d3e0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x7d8>)
    d290:	681b      	ldr	r3, [r3, #0]
    d292:	691b      	ldr	r3, [r3, #16]
		err = CO_TPDO_init(
    d294:	603b      	str	r3, [r7, #0]
		nodeId,
		((i<4) ? (CO_CAN_ID_TPDO_1+i*0x100) : 0),
    d296:	69fb      	ldr	r3, [r7, #28]
    d298:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
		err = CO_TPDO_init(
    d29c:	2b03      	cmp	r3, #3
    d29e:	d806      	bhi.n	d2ae <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x6a6>
		((i<4) ? (CO_CAN_ID_TPDO_1+i*0x100) : 0),
    d2a0:	69fb      	ldr	r3, [r7, #28]
    d2a2:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    d2a6:	021b      	lsls	r3, r3, #8
		err = CO_TPDO_init(
    d2a8:	f503 72c0 	add.w	r2, r3, #384	; 0x180
    d2ac:	e000      	b.n	d2b0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x6a8>
    d2ae:	2200      	movs	r2, #0
		0,
		(CO_TPDOCommPar_t*) &OD_TPDOCommunicationParameter[i],
    d2b0:	69fb      	ldr	r3, [r7, #28]
    d2b2:	f8d3 113c 	ldr.w	r1, [r3, #316]	; 0x13c
    d2b6:	460b      	mov	r3, r1
    d2b8:	00db      	lsls	r3, r3, #3
    d2ba:	1a5b      	subs	r3, r3, r1
    d2bc:	009b      	lsls	r3, r3, #2
    d2be:	f503 7394 	add.w	r3, r3, #296	; 0x128
    d2c2:	4948      	ldr	r1, [pc, #288]	; (d3e4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x7dc>)
    d2c4:	440b      	add	r3, r1
    d2c6:	1d18      	adds	r0, r3, #4
		(CO_TPDOMapPar_t*) &OD_TPDOMappingParameter[i],
    d2c8:	69fb      	ldr	r3, [r7, #28]
    d2ca:	f8d3 113c 	ldr.w	r1, [r3, #316]	; 0x13c
    d2ce:	460b      	mov	r3, r1
    d2d0:	00db      	lsls	r3, r3, #3
    d2d2:	440b      	add	r3, r1
    d2d4:	009b      	lsls	r3, r3, #2
    d2d6:	f503 73cc 	add.w	r3, r3, #408	; 0x198
    d2da:	4942      	ldr	r1, [pc, #264]	; (d3e4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x7dc>)
    d2dc:	440b      	add	r3, r1
    d2de:	3304      	adds	r3, #4
		OD_H1800_TXPDO_1_PARAM+i,
    d2e0:	69f9      	ldr	r1, [r7, #28]
    d2e2:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
		err = CO_TPDO_init(
    d2e6:	f501 51c0 	add.w	r1, r1, #6144	; 0x1800
		OD_H1A00_TXPDO_1_MAPPING+i,
    d2ea:	69fc      	ldr	r4, [r7, #28]
    d2ec:	f8d4 413c 	ldr.w	r4, [r4, #316]	; 0x13c
		err = CO_TPDO_init(
    d2f0:	f504 54d0 	add.w	r4, r4, #6656	; 0x1a00
    d2f4:	4d3a      	ldr	r5, [pc, #232]	; (d3e0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x7d8>)
    d2f6:	682d      	ldr	r5, [r5, #0]
    d2f8:	682d      	ldr	r5, [r5, #0]
		CO->CANmodule[0],
		CO_TXCAN_TPDO+i);
    d2fa:	69fe      	ldr	r6, [r7, #28]
    d2fc:	f8d6 613c 	ldr.w	r6, [r6, #316]	; 0x13c
		err = CO_TPDO_init(
    d300:	3603      	adds	r6, #3
    d302:	9609      	str	r6, [sp, #36]	; 0x24
    d304:	9508      	str	r5, [sp, #32]
    d306:	9407      	str	r4, [sp, #28]
    d308:	9106      	str	r1, [sp, #24]
    d30a:	9305      	str	r3, [sp, #20]
    d30c:	9004      	str	r0, [sp, #16]
    d30e:	2300      	movs	r3, #0
    d310:	9303      	str	r3, [sp, #12]
    d312:	9202      	str	r2, [sp, #8]
    d314:	7dfb      	ldrb	r3, [r7, #23]
    d316:	9301      	str	r3, [sp, #4]
    d318:	683b      	ldr	r3, [r7, #0]
    d31a:	9300      	str	r3, [sp, #0]
    d31c:	687b      	ldr	r3, [r7, #4]
    d31e:	68ba      	ldr	r2, [r7, #8]
    d320:	68f9      	ldr	r1, [r7, #12]
    d322:	69f8      	ldr	r0, [r7, #28]
    d324:	4c32      	ldr	r4, [pc, #200]	; (d3f0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x7e8>)
    d326:	47a0      	blx	r4
    d328:	4603      	mov	r3, r0
    d32a:	461a      	mov	r2, r3
    d32c:	69fb      	ldr	r3, [r7, #28]
    d32e:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
		if(err){CO_delete(); return err;}
    d332:	69fb      	ldr	r3, [r7, #28]
    d334:	f993 3140 	ldrsb.w	r3, [r3, #320]	; 0x140
    d338:	2b00      	cmp	r3, #0
    d33a:	d006      	beq.n	d34a <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x742>
    d33c:	69f8      	ldr	r0, [r7, #28]
    d33e:	4b2b      	ldr	r3, [pc, #172]	; (d3ec <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x7e4>)
    d340:	4798      	blx	r3
    d342:	69fb      	ldr	r3, [r7, #28]
    d344:	f993 3140 	ldrsb.w	r3, [r3, #320]	; 0x140
    d348:	e046      	b.n	d3d8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x7d0>
	for(i=0; i<CO_NO_TPDO; i++){
    d34a:	69fb      	ldr	r3, [r7, #28]
    d34c:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    d350:	1c5a      	adds	r2, r3, #1
    d352:	69fb      	ldr	r3, [r7, #28]
    d354:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    d358:	e783      	b.n	d262 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x65a>
	}

	HB_SetNode(coNode);
    d35a:	69fb      	ldr	r3, [r7, #28]
    d35c:	f103 0214 	add.w	r2, r3, #20
    d360:	69fb      	ldr	r3, [r7, #28]
    d362:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
    d366:	4619      	mov	r1, r3
    d368:	4610      	mov	r0, r2
    d36a:	4b22      	ldr	r3, [pc, #136]	; (d3f4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x7ec>)
    d36c:	4798      	blx	r3
	err = CO_HBconsumer_init(
    d36e:	69fb      	ldr	r3, [r7, #28]
    d370:	f103 0014 	add.w	r0, r3, #20
    d374:	4b1a      	ldr	r3, [pc, #104]	; (d3e0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x7d8>)
    d376:	681b      	ldr	r3, [r3, #0]
    d378:	6b9c      	ldr	r4, [r3, #56]	; 0x38
    d37a:	4b19      	ldr	r3, [pc, #100]	; (d3e0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x7d8>)
    d37c:	681b      	ldr	r3, [r3, #0]
    d37e:	689d      	ldr	r5, [r3, #8]
    d380:	4b17      	ldr	r3, [pc, #92]	; (d3e0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x7d8>)
    d382:	681b      	ldr	r3, [r3, #0]
    d384:	685e      	ldr	r6, [r3, #4]
    d386:	4b1c      	ldr	r3, [pc, #112]	; (d3f8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x7f0>)
    d388:	681b      	ldr	r3, [r3, #0]
    d38a:	4a15      	ldr	r2, [pc, #84]	; (d3e0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x7d8>)
    d38c:	6812      	ldr	r2, [r2, #0]
    d38e:	6812      	ldr	r2, [r2, #0]
    d390:	2107      	movs	r1, #7
    d392:	9104      	str	r1, [sp, #16]
    d394:	9203      	str	r2, [sp, #12]
    d396:	2204      	movs	r2, #4
    d398:	9202      	str	r2, [sp, #8]
    d39a:	9301      	str	r3, [sp, #4]
    d39c:	4b17      	ldr	r3, [pc, #92]	; (d3fc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x7f4>)
    d39e:	9300      	str	r3, [sp, #0]
    d3a0:	4633      	mov	r3, r6
    d3a2:	462a      	mov	r2, r5
    d3a4:	4621      	mov	r1, r4
    d3a6:	4c16      	ldr	r4, [pc, #88]	; (d400 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x7f8>)
    d3a8:	47a0      	blx	r4
    d3aa:	4603      	mov	r3, r0
    d3ac:	461a      	mov	r2, r3
    d3ae:	69fb      	ldr	r3, [r7, #28]
    d3b0:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
	CO_HBcons_monitoredNodes,
	CO_NO_HB_CONS,
	CO->CANmodule[0],
	CO_RXCAN_CONS_HB);

	if(err){CO_delete(); return err;}
    d3b4:	69fb      	ldr	r3, [r7, #28]
    d3b6:	f993 3140 	ldrsb.w	r3, [r3, #320]	; 0x140
    d3ba:	2b00      	cmp	r3, #0
    d3bc:	d006      	beq.n	d3cc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x7c4>
    d3be:	69f8      	ldr	r0, [r7, #28]
    d3c0:	4b0a      	ldr	r3, [pc, #40]	; (d3ec <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x7e4>)
    d3c2:	4798      	blx	r3
    d3c4:	69fb      	ldr	r3, [r7, #28]
    d3c6:	f993 3140 	ldrsb.w	r3, [r3, #320]	; 0x140
    d3ca:	e005      	b.n	d3d8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x7d0>
		OD_INDEX_TRACE_CONFIG + i,
		OD_INDEX_TRACE + i);
	}
	#endif

	ptrCO=CO;
    d3cc:	4b04      	ldr	r3, [pc, #16]	; (d3e0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x7d8>)
    d3ce:	681a      	ldr	r2, [r3, #0]
    d3d0:	69fb      	ldr	r3, [r7, #28]
    d3d2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	return CO_ERROR_NO;
    d3d6:	2300      	movs	r3, #0
}
    d3d8:	4618      	mov	r0, r3
    d3da:	3734      	adds	r7, #52	; 0x34
    d3dc:	46bd      	mov	sp, r7
    d3de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d3e0:	200011c8 	.word	0x200011c8
    d3e4:	2000035c 	.word	0x2000035c
    d3e8:	0000ff7d 	.word	0x0000ff7d
    d3ec:	0000d405 	.word	0x0000d405
    d3f0:	00010085 	.word	0x00010085
    d3f4:	0000ed65 	.word	0x0000ed65
    d3f8:	200011d8 	.word	0x200011d8
    d3fc:	2000038c 	.word	0x2000038c
    d400:	0000eb75 	.word	0x0000eb75

0000d404 <_ZN8CO_Class9CO_deleteEv>:


/******************************************************************************/
void CO_Class::CO_delete(void){
    d404:	b580      	push	{r7, lr}
    d406:	b082      	sub	sp, #8
    d408:	af00      	add	r7, sp, #0
    d40a:	6078      	str	r0, [r7, #4]
	#ifndef CO_USE_GLOBALS
	uint32_t i;
	#endif

	CO_CANsetConfigurationMode(coCanDescr);
    d40c:	687a      	ldr	r2, [r7, #4]
    d40e:	687b      	ldr	r3, [r7, #4]
    d410:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    d414:	4619      	mov	r1, r3
    d416:	4610      	mov	r0, r2
    d418:	4b04      	ldr	r3, [pc, #16]	; (d42c <_ZN8CO_Class9CO_deleteEv+0x28>)
    d41a:	4798      	blx	r3
	CANmodule_Disable();
    d41c:	687b      	ldr	r3, [r7, #4]
    d41e:	4618      	mov	r0, r3
    d420:	4b03      	ldr	r3, [pc, #12]	; (d430 <_ZN8CO_Class9CO_deleteEv+0x2c>)
    d422:	4798      	blx	r3
		free(CO_CANmodule_txArray0);
		free(CO_CANmodule_rxArray0);
		free(CO->CANmodule[0]);
		CO = NULL;
	#endif
}
    d424:	bf00      	nop
    d426:	3708      	adds	r7, #8
    d428:	46bd      	mov	sp, r7
    d42a:	bd80      	pop	{r7, pc}
    d42c:	0000d8a5 	.word	0x0000d8a5
    d430:	0000da5d 	.word	0x0000da5d

0000d434 <_ZN8CO_Class7ProcessEmPm>:


/******************************************************************************/
CO_NMT_reset_cmd_t CO_Class::Process(uint32_t                timeDifference_ms,
uint32_t               *timerNext_ms)
{
    d434:	b590      	push	{r4, r7, lr}
    d436:	b08b      	sub	sp, #44	; 0x2c
    d438:	af04      	add	r7, sp, #16
    d43a:	60f8      	str	r0, [r7, #12]
    d43c:	60b9      	str	r1, [r7, #8]
    d43e:	607a      	str	r2, [r7, #4]
	uint8_t i;
	bool_t NMTisPreOrOperational = false;
    d440:	2300      	movs	r3, #0
    d442:	75bb      	strb	r3, [r7, #22]
	CO_NMT_reset_cmd_t reset = CO_RESET_NOT;
    d444:	2300      	movs	r3, #0
    d446:	757b      	strb	r3, [r7, #21]
	ms50 = 0;
    d448:	68fb      	ldr	r3, [r7, #12]
    d44a:	2200      	movs	r2, #0
    d44c:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	if(CO->NMT->operatingState == CO_NMT_PRE_OPERATIONAL || CO->NMT->operatingState == CO_NMT_OPERATIONAL)
    d450:	4b3c      	ldr	r3, [pc, #240]	; (d544 <_ZN8CO_Class7ProcessEmPm+0x110>)
    d452:	681b      	ldr	r3, [r3, #0]
    d454:	691b      	ldr	r3, [r3, #16]
    d456:	781b      	ldrb	r3, [r3, #0]
    d458:	2b7f      	cmp	r3, #127	; 0x7f
    d45a:	d005      	beq.n	d468 <_ZN8CO_Class7ProcessEmPm+0x34>
    d45c:	4b39      	ldr	r3, [pc, #228]	; (d544 <_ZN8CO_Class7ProcessEmPm+0x110>)
    d45e:	681b      	ldr	r3, [r3, #0]
    d460:	691b      	ldr	r3, [r3, #16]
    d462:	781b      	ldrb	r3, [r3, #0]
    d464:	2b05      	cmp	r3, #5
    d466:	d101      	bne.n	d46c <_ZN8CO_Class7ProcessEmPm+0x38>
	NMTisPreOrOperational = true;
    d468:	2301      	movs	r3, #1
    d46a:	75bb      	strb	r3, [r7, #22]

	ms50 += timeDifference_ms;
    d46c:	68fb      	ldr	r3, [r7, #12]
    d46e:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
    d472:	68bb      	ldr	r3, [r7, #8]
    d474:	441a      	add	r2, r3
    d476:	68fb      	ldr	r3, [r7, #12]
    d478:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	if(ms50 >= 50){
    d47c:	68fb      	ldr	r3, [r7, #12]
    d47e:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
    d482:	2b31      	cmp	r3, #49	; 0x31
    d484:	d907      	bls.n	d496 <_ZN8CO_Class7ProcessEmPm+0x62>
		ms50 -= 50;
    d486:	68fb      	ldr	r3, [r7, #12]
    d488:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
    d48c:	f1a3 0232 	sub.w	r2, r3, #50	; 0x32
    d490:	68fb      	ldr	r3, [r7, #12]
    d492:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
		//CO_NMT_blinkingProcess50ms();
	}
	if(timerNext_ms != NULL){
    d496:	687b      	ldr	r3, [r7, #4]
    d498:	2b00      	cmp	r3, #0
    d49a:	d006      	beq.n	d4aa <_ZN8CO_Class7ProcessEmPm+0x76>
		if(*timerNext_ms > 50){
    d49c:	687b      	ldr	r3, [r7, #4]
    d49e:	681b      	ldr	r3, [r3, #0]
    d4a0:	2b32      	cmp	r3, #50	; 0x32
    d4a2:	d902      	bls.n	d4aa <_ZN8CO_Class7ProcessEmPm+0x76>
			*timerNext_ms = 50;
    d4a4:	687b      	ldr	r3, [r7, #4]
    d4a6:	2232      	movs	r2, #50	; 0x32
    d4a8:	601a      	str	r2, [r3, #0]
		}
	}


	for(i=0; i<CO_NO_SDO_SERVER; i++){
    d4aa:	2300      	movs	r3, #0
    d4ac:	75fb      	strb	r3, [r7, #23]
    d4ae:	7dfb      	ldrb	r3, [r7, #23]
    d4b0:	2b00      	cmp	r3, #0
    d4b2:	dc0d      	bgt.n	d4d0 <_ZN8CO_Class7ProcessEmPm+0x9c>
		CO_SDO_process(
    d4b4:	68fb      	ldr	r3, [r7, #12]
    d4b6:	1d18      	adds	r0, r3, #4
	
		NMTisPreOrOperational,
		timeDifference_ms,
		1000,
		timerNext_ms);
    d4b8:	7db9      	ldrb	r1, [r7, #22]
    d4ba:	687b      	ldr	r3, [r7, #4]
    d4bc:	9300      	str	r3, [sp, #0]
    d4be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    d4c2:	68ba      	ldr	r2, [r7, #8]
    d4c4:	4c20      	ldr	r4, [pc, #128]	; (d548 <_ZN8CO_Class7ProcessEmPm+0x114>)
    d4c6:	47a0      	blx	r4
	for(i=0; i<CO_NO_SDO_SERVER; i++){
    d4c8:	7dfb      	ldrb	r3, [r7, #23]
    d4ca:	3301      	adds	r3, #1
    d4cc:	75fb      	strb	r3, [r7, #23]
    d4ce:	e7ee      	b.n	d4ae <_ZN8CO_Class7ProcessEmPm+0x7a>
	}

	EM_process(
    d4d0:	68fb      	ldr	r3, [r7, #12]
    d4d2:	1d18      	adds	r0, r3, #4
    d4d4:	4b1b      	ldr	r3, [pc, #108]	; (d544 <_ZN8CO_Class7ProcessEmPm+0x110>)
    d4d6:	681b      	ldr	r3, [r3, #0]
    d4d8:	68d9      	ldr	r1, [r3, #12]
    d4da:	68ba      	ldr	r2, [r7, #8]
    d4dc:	4613      	mov	r3, r2
    d4de:	009b      	lsls	r3, r3, #2
    d4e0:	4413      	add	r3, r2
    d4e2:	005b      	lsls	r3, r3, #1
    d4e4:	461c      	mov	r4, r3
	CO->emPr,
	NMTisPreOrOperational,
	timeDifference_ms * 10,
	OD_inhibitTimeEMCY);
    d4e6:	4b19      	ldr	r3, [pc, #100]	; (d54c <_ZN8CO_Class7ProcessEmPm+0x118>)
    d4e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    d4ea:	7dba      	ldrb	r2, [r7, #22]
    d4ec:	9300      	str	r3, [sp, #0]
    d4ee:	4623      	mov	r3, r4
    d4f0:	4c17      	ldr	r4, [pc, #92]	; (d550 <_ZN8CO_Class7ProcessEmPm+0x11c>)
    d4f2:	47a0      	blx	r4


	reset = NMT_Process(
    d4f4:	68fb      	ldr	r3, [r7, #12]
    d4f6:	f103 0010 	add.w	r0, r3, #16
	timeDifference_ms,
	OD_producerHeartbeatTime,
    d4fa:	4b14      	ldr	r3, [pc, #80]	; (d54c <_ZN8CO_Class7ProcessEmPm+0x118>)
    d4fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
	reset = NMT_Process(
    d500:	461c      	mov	r4, r3
    d502:	4b12      	ldr	r3, [pc, #72]	; (d54c <_ZN8CO_Class7ProcessEmPm+0x118>)
    d504:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
    d508:	4b12      	ldr	r3, [pc, #72]	; (d554 <_ZN8CO_Class7ProcessEmPm+0x120>)
    d50a:	791b      	ldrb	r3, [r3, #4]
	OD_NMTStartup,
	OD_errorRegister,
	OD_errorBehavior,
	timerNext_ms);
    d50c:	687a      	ldr	r2, [r7, #4]
    d50e:	9202      	str	r2, [sp, #8]
    d510:	4a11      	ldr	r2, [pc, #68]	; (d558 <_ZN8CO_Class7ProcessEmPm+0x124>)
    d512:	9201      	str	r2, [sp, #4]
    d514:	9300      	str	r3, [sp, #0]
    d516:	460b      	mov	r3, r1
    d518:	4622      	mov	r2, r4
    d51a:	68b9      	ldr	r1, [r7, #8]
    d51c:	4c0f      	ldr	r4, [pc, #60]	; (d55c <_ZN8CO_Class7ProcessEmPm+0x128>)
    d51e:	47a0      	blx	r4
    d520:	4603      	mov	r3, r0
    d522:	757b      	strb	r3, [r7, #21]

	CO_HBconsumer_process(
    d524:	68fb      	ldr	r3, [r7, #12]
    d526:	f103 0014 	add.w	r0, r3, #20
    d52a:	4b06      	ldr	r3, [pc, #24]	; (d544 <_ZN8CO_Class7ProcessEmPm+0x110>)
    d52c:	681b      	ldr	r3, [r3, #0]
    d52e:	6b99      	ldr	r1, [r3, #56]	; 0x38
	CO->HBcons,
	NMTisPreOrOperational,
	timeDifference_ms);
    d530:	7dba      	ldrb	r2, [r7, #22]
    d532:	68bb      	ldr	r3, [r7, #8]
    d534:	4c0a      	ldr	r4, [pc, #40]	; (d560 <_ZN8CO_Class7ProcessEmPm+0x12c>)
    d536:	47a0      	blx	r4

	return reset;
    d538:	7d7b      	ldrb	r3, [r7, #21]
}
    d53a:	4618      	mov	r0, r3
    d53c:	371c      	adds	r7, #28
    d53e:	46bd      	mov	sp, r7
    d540:	bd90      	pop	{r4, r7, pc}
    d542:	bf00      	nop
    d544:	200011c8 	.word	0x200011c8
    d548:	0001138d 	.word	0x0001138d
    d54c:	2000035c 	.word	0x2000035c
    d550:	0000e4b5 	.word	0x0000e4b5
    d554:	200001e0 	.word	0x200001e0
    d558:	200003b5 	.word	0x200003b5
    d55c:	0000ef69 	.word	0x0000ef69
    d560:	0000ec39 	.word	0x0000ec39

0000d564 <_ZN8CO_Class20CO_process_SYNC_RPDOEm>:


/******************************************************************************/
bool_t CO_Class::CO_process_SYNC_RPDO(uint32_t                timeDifference_us)
{
    d564:	b590      	push	{r4, r7, lr}
    d566:	b085      	sub	sp, #20
    d568:	af00      	add	r7, sp, #0
    d56a:	6078      	str	r0, [r7, #4]
    d56c:	6039      	str	r1, [r7, #0]
	uint32_t i;
	bool_t syncWas = false;
    d56e:	2300      	movs	r3, #0
    d570:	72fb      	strb	r3, [r7, #11]

	switch(CO_SYNC_process(CO->SYNC, timeDifference_us, OD_synchronousWindowLength)){
    d572:	4b18      	ldr	r3, [pc, #96]	; (d5d4 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x70>)
    d574:	681b      	ldr	r3, [r3, #0]
    d576:	6959      	ldr	r1, [r3, #20]
    d578:	4b17      	ldr	r3, [pc, #92]	; (d5d8 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x74>)
    d57a:	691b      	ldr	r3, [r3, #16]
    d57c:	683a      	ldr	r2, [r7, #0]
    d57e:	6878      	ldr	r0, [r7, #4]
    d580:	4c16      	ldr	r4, [pc, #88]	; (d5dc <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x78>)
    d582:	47a0      	blx	r4
    d584:	4603      	mov	r3, r0
    d586:	2b01      	cmp	r3, #1
    d588:	d002      	beq.n	d590 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x2c>
    d58a:	2b02      	cmp	r3, #2
    d58c:	d003      	beq.n	d596 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x32>
    d58e:	e007      	b.n	d5a0 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x3c>
		case 1:     //immediately after the SYNC message
		syncWas = true;
    d590:	2301      	movs	r3, #1
    d592:	72fb      	strb	r3, [r7, #11]
		break;
    d594:	e004      	b.n	d5a0 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x3c>
		case 2:     //outside SYNC window
		CANClearPendingSyncPDOs();
    d596:	687b      	ldr	r3, [r7, #4]
    d598:	4618      	mov	r0, r3
    d59a:	4b11      	ldr	r3, [pc, #68]	; (d5e0 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x7c>)
    d59c:	4798      	blx	r3
		break;
    d59e:	bf00      	nop
	}

	for(i=0; i<CO_NO_RPDO; i++){
    d5a0:	2300      	movs	r3, #0
    d5a2:	60fb      	str	r3, [r7, #12]
    d5a4:	68fb      	ldr	r3, [r7, #12]
    d5a6:	2b03      	cmp	r3, #3
    d5a8:	d80e      	bhi.n	d5c8 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x64>
		CO_RPDO_process(CO->RPDO[i], syncWas);
    d5aa:	4b0a      	ldr	r3, [pc, #40]	; (d5d4 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x70>)
    d5ac:	681b      	ldr	r3, [r3, #0]
    d5ae:	68fa      	ldr	r2, [r7, #12]
    d5b0:	3206      	adds	r2, #6
    d5b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    d5b6:	7afa      	ldrb	r2, [r7, #11]
    d5b8:	4619      	mov	r1, r3
    d5ba:	6878      	ldr	r0, [r7, #4]
    d5bc:	4b09      	ldr	r3, [pc, #36]	; (d5e4 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x80>)
    d5be:	4798      	blx	r3
	for(i=0; i<CO_NO_RPDO; i++){
    d5c0:	68fb      	ldr	r3, [r7, #12]
    d5c2:	3301      	adds	r3, #1
    d5c4:	60fb      	str	r3, [r7, #12]
    d5c6:	e7ed      	b.n	d5a4 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x40>
	}

	return syncWas;
    d5c8:	7afb      	ldrb	r3, [r7, #11]
}
    d5ca:	4618      	mov	r0, r3
    d5cc:	3714      	adds	r7, #20
    d5ce:	46bd      	mov	sp, r7
    d5d0:	bd90      	pop	{r4, r7, pc}
    d5d2:	bf00      	nop
    d5d4:	200011c8 	.word	0x200011c8
    d5d8:	2000035c 	.word	0x2000035c
    d5dc:	00012b51 	.word	0x00012b51
    d5e0:	0000dd61 	.word	0x0000dd61
    d5e4:	00010441 	.word	0x00010441

0000d5e8 <_ZN8CO_Class15CO_process_TPDOEhm>:


/******************************************************************************/
void CO_Class::CO_process_TPDO(bool_t                  syncWas,
uint32_t                timeDifference_us)
{
    d5e8:	b590      	push	{r4, r7, lr}
    d5ea:	b089      	sub	sp, #36	; 0x24
    d5ec:	af02      	add	r7, sp, #8
    d5ee:	60f8      	str	r0, [r7, #12]
    d5f0:	460b      	mov	r3, r1
    d5f2:	607a      	str	r2, [r7, #4]
    d5f4:	72fb      	strb	r3, [r7, #11]
	uint32_t i;

	/* Verify PDO Change Of State and process PDOs */
	for(i=0; i<CO_NO_TPDO; i++){
    d5f6:	2300      	movs	r3, #0
    d5f8:	617b      	str	r3, [r7, #20]
    d5fa:	697b      	ldr	r3, [r7, #20]
    d5fc:	2b03      	cmp	r3, #3
    d5fe:	d82e      	bhi.n	d65e <_ZN8CO_Class15CO_process_TPDOEhm+0x76>
		if(!CO->TPDO[i]->sendRequest) CO->TPDO[i]->sendRequest = CO_TPDOisCOS(CO->TPDO[i]);
    d600:	4b19      	ldr	r3, [pc, #100]	; (d668 <_ZN8CO_Class15CO_process_TPDOEhm+0x80>)
    d602:	681b      	ldr	r3, [r3, #0]
    d604:	697a      	ldr	r2, [r7, #20]
    d606:	320a      	adds	r2, #10
    d608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    d60c:	7fdb      	ldrb	r3, [r3, #31]
    d60e:	2b00      	cmp	r3, #0
    d610:	d111      	bne.n	d636 <_ZN8CO_Class15CO_process_TPDOEhm+0x4e>
    d612:	4b15      	ldr	r3, [pc, #84]	; (d668 <_ZN8CO_Class15CO_process_TPDOEhm+0x80>)
    d614:	681b      	ldr	r3, [r3, #0]
    d616:	697a      	ldr	r2, [r7, #20]
    d618:	320a      	adds	r2, #10
    d61a:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
    d61e:	4b12      	ldr	r3, [pc, #72]	; (d668 <_ZN8CO_Class15CO_process_TPDOEhm+0x80>)
    d620:	681b      	ldr	r3, [r3, #0]
    d622:	697a      	ldr	r2, [r7, #20]
    d624:	320a      	adds	r2, #10
    d626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    d62a:	4619      	mov	r1, r3
    d62c:	68f8      	ldr	r0, [r7, #12]
    d62e:	4b0f      	ldr	r3, [pc, #60]	; (d66c <_ZN8CO_Class15CO_process_TPDOEhm+0x84>)
    d630:	4798      	blx	r3
    d632:	4603      	mov	r3, r0
    d634:	77e3      	strb	r3, [r4, #31]
		CO_TPDO_process(CO->TPDO[i], CO->SYNC, syncWas, timeDifference_us);
    d636:	4b0c      	ldr	r3, [pc, #48]	; (d668 <_ZN8CO_Class15CO_process_TPDOEhm+0x80>)
    d638:	681b      	ldr	r3, [r3, #0]
    d63a:	697a      	ldr	r2, [r7, #20]
    d63c:	320a      	adds	r2, #10
    d63e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    d642:	4b09      	ldr	r3, [pc, #36]	; (d668 <_ZN8CO_Class15CO_process_TPDOEhm+0x80>)
    d644:	681b      	ldr	r3, [r3, #0]
    d646:	695a      	ldr	r2, [r3, #20]
    d648:	7af8      	ldrb	r0, [r7, #11]
    d64a:	687b      	ldr	r3, [r7, #4]
    d64c:	9300      	str	r3, [sp, #0]
    d64e:	4603      	mov	r3, r0
    d650:	68f8      	ldr	r0, [r7, #12]
    d652:	4c07      	ldr	r4, [pc, #28]	; (d670 <_ZN8CO_Class15CO_process_TPDOEhm+0x88>)
    d654:	47a0      	blx	r4
	for(i=0; i<CO_NO_TPDO; i++){
    d656:	697b      	ldr	r3, [r7, #20]
    d658:	3301      	adds	r3, #1
    d65a:	617b      	str	r3, [r7, #20]
    d65c:	e7cd      	b.n	d5fa <_ZN8CO_Class15CO_process_TPDOEhm+0x12>
	}
}
    d65e:	bf00      	nop
    d660:	371c      	adds	r7, #28
    d662:	46bd      	mov	sp, r7
    d664:	bd90      	pop	{r4, r7, pc}
    d666:	bf00      	nop
    d668:	200011c8 	.word	0x200011c8
    d66c:	000101c5 	.word	0x000101c5
    d670:	00010511 	.word	0x00010511

0000d674 <hri_can_read_TXFQS_TFFL_bf>:
{
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFFL(mask)) >> CAN_TXFQS_TFFL_Pos;
}

static inline hri_can_txfqs_reg_t hri_can_read_TXFQS_TFFL_bf(const void *const hw)
{
    d674:	b480      	push	{r7}
    d676:	b083      	sub	sp, #12
    d678:	af00      	add	r7, sp, #0
    d67a:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFFL_Msk) >> CAN_TXFQS_TFFL_Pos;
    d67c:	687b      	ldr	r3, [r7, #4]
    d67e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    d682:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
    d686:	4618      	mov	r0, r3
    d688:	370c      	adds	r7, #12
    d68a:	46bd      	mov	sp, r7
    d68c:	bc80      	pop	{r7}
    d68e:	4770      	bx	lr

0000d690 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    d690:	b480      	push	{r7}
    d692:	b083      	sub	sp, #12
    d694:	af00      	add	r7, sp, #0
    d696:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    d698:	687b      	ldr	r3, [r7, #4]
    d69a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    d69c:	4618      	mov	r0, r3
    d69e:	370c      	adds	r7, #12
    d6a0:	46bd      	mov	sp, r7
    d6a2:	bc80      	pop	{r7}
    d6a4:	4770      	bx	lr
	...

0000d6a8 <_ZL14CO_rx_callbackP20can_async_descriptor>:
#include "string.h"

CO_Driver_Class		*ptrCODriverClass;

static void CO_rx_callback(struct can_async_descriptor *const descr)
{
    d6a8:	b580      	push	{r7, lr}
    d6aa:	b082      	sub	sp, #8
    d6ac:	af00      	add	r7, sp, #0
    d6ae:	6078      	str	r0, [r7, #4]
	ptrCODriverClass->receivedCOMsg.data=ptrCODriverClass->co_rx_buffer_64;
    d6b0:	4b0e      	ldr	r3, [pc, #56]	; (d6ec <_ZL14CO_rx_callbackP20can_async_descriptor+0x44>)
    d6b2:	681b      	ldr	r3, [r3, #0]
    d6b4:	4a0d      	ldr	r2, [pc, #52]	; (d6ec <_ZL14CO_rx_callbackP20can_async_descriptor+0x44>)
    d6b6:	6812      	ldr	r2, [r2, #0]
    d6b8:	3223      	adds	r2, #35	; 0x23
    d6ba:	66da      	str	r2, [r3, #108]	; 0x6c
	can_async_read(descr, &(ptrCODriverClass->receivedCOMsg));
    d6bc:	4b0b      	ldr	r3, [pc, #44]	; (d6ec <_ZL14CO_rx_callbackP20can_async_descriptor+0x44>)
    d6be:	681b      	ldr	r3, [r3, #0]
    d6c0:	3364      	adds	r3, #100	; 0x64
    d6c2:	4619      	mov	r1, r3
    d6c4:	6878      	ldr	r0, [r7, #4]
    d6c6:	4b0a      	ldr	r3, [pc, #40]	; (d6f0 <_ZL14CO_rx_callbackP20can_async_descriptor+0x48>)
    d6c8:	4798      	blx	r3
	ptrCODriverClass->ProcessInterrupt_Rx();
    d6ca:	4b08      	ldr	r3, [pc, #32]	; (d6ec <_ZL14CO_rx_callbackP20can_async_descriptor+0x44>)
    d6cc:	681b      	ldr	r3, [r3, #0]
    d6ce:	681b      	ldr	r3, [r3, #0]
    d6d0:	681b      	ldr	r3, [r3, #0]
    d6d2:	4a06      	ldr	r2, [pc, #24]	; (d6ec <_ZL14CO_rx_callbackP20can_async_descriptor+0x44>)
    d6d4:	6812      	ldr	r2, [r2, #0]
    d6d6:	4610      	mov	r0, r2
    d6d8:	4798      	blx	r3
	ptrCODriverClass->receivedRxCOCallback=true;
    d6da:	4b04      	ldr	r3, [pc, #16]	; (d6ec <_ZL14CO_rx_callbackP20can_async_descriptor+0x44>)
    d6dc:	681b      	ldr	r3, [r3, #0]
    d6de:	2201      	movs	r2, #1
    d6e0:	f883 2020 	strb.w	r2, [r3, #32]
// 	if(ptrCODriver->RxFifo_Callback_CanModule_p != NULL)
// 	{
// 		ProcessInterrupt_Rx();
// 	
}
    d6e4:	bf00      	nop
    d6e6:	3708      	adds	r7, #8
    d6e8:	46bd      	mov	sp, r7
    d6ea:	bd80      	pop	{r7, pc}
    d6ec:	20001a7c 	.word	0x20001a7c
    d6f0:	00001a79 	.word	0x00001a79

0000d6f4 <_ZL21CO_IRQ_Error_CallbackP20can_async_descriptor>:

static void CO_IRQ_Error_Callback(struct can_async_descriptor *const descr)
{
    d6f4:	b590      	push	{r4, r7, lr}
    d6f6:	b083      	sub	sp, #12
    d6f8:	af00      	add	r7, sp, #0
    d6fa:	6078      	str	r0, [r7, #4]

	ptrCODriverClass->HalCanErrorCode= hri_can_read_IR_reg(descr->dev.hw);
    d6fc:	4b08      	ldr	r3, [pc, #32]	; (d720 <_ZL21CO_IRQ_Error_CallbackP20can_async_descriptor+0x2c>)
    d6fe:	681c      	ldr	r4, [r3, #0]
    d700:	687b      	ldr	r3, [r7, #4]
    d702:	681b      	ldr	r3, [r3, #0]
    d704:	4618      	mov	r0, r3
    d706:	4b07      	ldr	r3, [pc, #28]	; (d724 <_ZL21CO_IRQ_Error_CallbackP20can_async_descriptor+0x30>)
    d708:	4798      	blx	r3
    d70a:	4603      	mov	r3, r0
    d70c:	61e3      	str	r3, [r4, #28]
	ptrCODriverClass->receivedIntCOCallback=true;
    d70e:	4b04      	ldr	r3, [pc, #16]	; (d720 <_ZL21CO_IRQ_Error_CallbackP20can_async_descriptor+0x2c>)
    d710:	681b      	ldr	r3, [r3, #0]
    d712:	2201      	movs	r2, #1
    d714:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
    d718:	bf00      	nop
    d71a:	370c      	adds	r7, #12
    d71c:	46bd      	mov	sp, r7
    d71e:	bd90      	pop	{r4, r7, pc}
    d720:	20001a7c 	.word	0x20001a7c
    d724:	0000d691 	.word	0x0000d691

0000d728 <_ZL14CO_tx_callbackP20can_async_descriptor>:


static void CO_tx_callback(struct can_async_descriptor *const descr)
{
    d728:	b480      	push	{r7}
    d72a:	b083      	sub	sp, #12
    d72c:	af00      	add	r7, sp, #0
    d72e:	6078      	str	r0, [r7, #4]
	(void)descr;
	ptrCODriverClass->receivedtxCOCallback=true;
    d730:	4b04      	ldr	r3, [pc, #16]	; (d744 <_ZL14CO_tx_callbackP20can_async_descriptor+0x1c>)
    d732:	681b      	ldr	r3, [r3, #0]
    d734:	2201      	movs	r2, #1
    d736:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	
}
    d73a:	bf00      	nop
    d73c:	370c      	adds	r7, #12
    d73e:	46bd      	mov	sp, r7
    d740:	bc80      	pop	{r7}
    d742:	4770      	bx	lr
    d744:	20001a7c 	.word	0x20001a7c

0000d748 <_ZN15CO_Driver_ClassC1Ev>:

// default constructor
CO_Driver_Class::CO_Driver_Class()
    d748:	b580      	push	{r7, lr}
    d74a:	b082      	sub	sp, #8
    d74c:	af00      	add	r7, sp, #0
    d74e:	6078      	str	r0, [r7, #4]
    d750:	687b      	ldr	r3, [r7, #4]
    d752:	3304      	adds	r3, #4
    d754:	4618      	mov	r0, r3
    d756:	4b10      	ldr	r3, [pc, #64]	; (d798 <_ZN15CO_Driver_ClassC1Ev+0x50>)
    d758:	4798      	blx	r3
    d75a:	687b      	ldr	r3, [r7, #4]
    d75c:	3310      	adds	r3, #16
    d75e:	4618      	mov	r0, r3
    d760:	4b0e      	ldr	r3, [pc, #56]	; (d79c <_ZN15CO_Driver_ClassC1Ev+0x54>)
    d762:	4798      	blx	r3
    d764:	6878      	ldr	r0, [r7, #4]
    d766:	4b0e      	ldr	r3, [pc, #56]	; (d7a0 <_ZN15CO_Driver_ClassC1Ev+0x58>)
    d768:	4798      	blx	r3
    d76a:	6878      	ldr	r0, [r7, #4]
    d76c:	4b0d      	ldr	r3, [pc, #52]	; (d7a4 <_ZN15CO_Driver_ClassC1Ev+0x5c>)
    d76e:	4798      	blx	r3
    d770:	687b      	ldr	r3, [r7, #4]
    d772:	3314      	adds	r3, #20
    d774:	4618      	mov	r0, r3
    d776:	4b0c      	ldr	r3, [pc, #48]	; (d7a8 <_ZN15CO_Driver_ClassC1Ev+0x60>)
    d778:	4798      	blx	r3
    d77a:	4a0c      	ldr	r2, [pc, #48]	; (d7ac <_ZN15CO_Driver_ClassC1Ev+0x64>)
    d77c:	687b      	ldr	r3, [r7, #4]
    d77e:	601a      	str	r2, [r3, #0]
{
	RxFifo_Callback_CanModule_p = NULL;
    d780:	687b      	ldr	r3, [r7, #4]
    d782:	2200      	movs	r2, #0
    d784:	675a      	str	r2, [r3, #116]	; 0x74
	ptrCODriverClass=this;
    d786:	4a0a      	ldr	r2, [pc, #40]	; (d7b0 <_ZN15CO_Driver_ClassC1Ev+0x68>)
    d788:	687b      	ldr	r3, [r7, #4]
    d78a:	6013      	str	r3, [r2, #0]
} //CO_Driver_Class
    d78c:	687b      	ldr	r3, [r7, #4]
    d78e:	4618      	mov	r0, r3
    d790:	3708      	adds	r7, #8
    d792:	46bd      	mov	sp, r7
    d794:	bd80      	pop	{r7, pc}
    d796:	bf00      	nop
    d798:	0000e239 	.word	0x0000e239
    d79c:	0000ee33 	.word	0x0000ee33
    d7a0:	000126e5 	.word	0x000126e5
    d7a4:	0000f3e5 	.word	0x0000f3e5
    d7a8:	0000eb4d 	.word	0x0000eb4d
    d7ac:	00013500 	.word	0x00013500
    d7b0:	20001a7c 	.word	0x20001a7c

0000d7b4 <_ZN15CO_Driver_ClassD1Ev>:

// default destructor
CO_Driver_Class::~CO_Driver_Class()
    d7b4:	b580      	push	{r7, lr}
    d7b6:	b082      	sub	sp, #8
    d7b8:	af00      	add	r7, sp, #0
    d7ba:	6078      	str	r0, [r7, #4]
    d7bc:	4a0e      	ldr	r2, [pc, #56]	; (d7f8 <_ZN15CO_Driver_ClassD1Ev+0x44>)
    d7be:	687b      	ldr	r3, [r7, #4]
    d7c0:	601a      	str	r2, [r3, #0]
    d7c2:	687b      	ldr	r3, [r7, #4]
    d7c4:	3314      	adds	r3, #20
    d7c6:	4618      	mov	r0, r3
    d7c8:	4b0c      	ldr	r3, [pc, #48]	; (d7fc <_ZN15CO_Driver_ClassD1Ev+0x48>)
    d7ca:	4798      	blx	r3
    d7cc:	6878      	ldr	r0, [r7, #4]
    d7ce:	4b0c      	ldr	r3, [pc, #48]	; (d800 <_ZN15CO_Driver_ClassD1Ev+0x4c>)
    d7d0:	4798      	blx	r3
    d7d2:	6878      	ldr	r0, [r7, #4]
    d7d4:	4b0b      	ldr	r3, [pc, #44]	; (d804 <_ZN15CO_Driver_ClassD1Ev+0x50>)
    d7d6:	4798      	blx	r3
    d7d8:	687b      	ldr	r3, [r7, #4]
    d7da:	3310      	adds	r3, #16
    d7dc:	4618      	mov	r0, r3
    d7de:	4b0a      	ldr	r3, [pc, #40]	; (d808 <_ZN15CO_Driver_ClassD1Ev+0x54>)
    d7e0:	4798      	blx	r3
    d7e2:	687b      	ldr	r3, [r7, #4]
    d7e4:	3304      	adds	r3, #4
    d7e6:	4618      	mov	r0, r3
    d7e8:	4b08      	ldr	r3, [pc, #32]	; (d80c <_ZN15CO_Driver_ClassD1Ev+0x58>)
    d7ea:	4798      	blx	r3
{
} //~CO_Driver_Class
    d7ec:	687b      	ldr	r3, [r7, #4]
    d7ee:	4618      	mov	r0, r3
    d7f0:	3708      	adds	r7, #8
    d7f2:	46bd      	mov	sp, r7
    d7f4:	bd80      	pop	{r7, pc}
    d7f6:	bf00      	nop
    d7f8:	00013500 	.word	0x00013500
    d7fc:	0000eb61 	.word	0x0000eb61
    d800:	0000f3f9 	.word	0x0000f3f9
    d804:	000126f9 	.word	0x000126f9
    d808:	0000ee47 	.word	0x0000ee47
    d80c:	0000e261 	.word	0x0000e261

0000d810 <_ZN15CO_Driver_Class16PrepareTxMessageEP11can_messageP10CO_CANtx_t>:
 * \param [in]	buffer ponyer to CO_CANtx_t with CANopen configuration data
 *
 * \ingroup CO_driver
 ******************************************************************************/
void CO_Driver_Class::PrepareTxMessage(struct can_message *msgHeader, CO_CANtx_t *buffer)
{
    d810:	b480      	push	{r7}
    d812:	b085      	sub	sp, #20
    d814:	af00      	add	r7, sp, #0
    d816:	60f8      	str	r0, [r7, #12]
    d818:	60b9      	str	r1, [r7, #8]
    d81a:	607a      	str	r2, [r7, #4]
	/* Map buffer data to the HAL CAN tx header data*/
	//TxHeader->ExtId = 0u;
	msgHeader->id=0;
    d81c:	68bb      	ldr	r3, [r7, #8]
    d81e:	2200      	movs	r2, #0
    d820:	601a      	str	r2, [r3, #0]
	//TxHeader->IDE = 0;
	msgHeader->fmt=CAN_FMT_STDID;
    d822:	68bb      	ldr	r3, [r7, #8]
    d824:	2200      	movs	r2, #0
    d826:	735a      	strb	r2, [r3, #13]
	
	//TxHeader->DLC = buffer->DLC;
	msgHeader->len=buffer->DLC;
    d828:	687b      	ldr	r3, [r7, #4]
    d82a:	791a      	ldrb	r2, [r3, #4]
    d82c:	68bb      	ldr	r3, [r7, #8]
    d82e:	731a      	strb	r2, [r3, #12]
	
	//TxHeader->StdId = ( buffer->ident >> 2 );
	msgHeader->id=( buffer->ident >> 2 );
    d830:	687b      	ldr	r3, [r7, #4]
    d832:	681b      	ldr	r3, [r3, #0]
    d834:	089a      	lsrs	r2, r3, #2
    d836:	68bb      	ldr	r3, [r7, #8]
    d838:	601a      	str	r2, [r3, #0]
	
	//TxHeader->RTR = ( buffer->ident & 0x2 );
	msgHeader->type=(can_type)( buffer->ident & 0x2 );
    d83a:	687b      	ldr	r3, [r7, #4]
    d83c:	681b      	ldr	r3, [r3, #0]
    d83e:	b2db      	uxtb	r3, r3
    d840:	f003 0302 	and.w	r3, r3, #2
    d844:	b2da      	uxtb	r2, r3
    d846:	68bb      	ldr	r3, [r7, #8]
    d848:	711a      	strb	r2, [r3, #4]
	msgHeader->data=buffer->data;
    d84a:	687b      	ldr	r3, [r7, #4]
    d84c:	1d5a      	adds	r2, r3, #5
    d84e:	68bb      	ldr	r3, [r7, #8]
    d850:	609a      	str	r2, [r3, #8]
}
    d852:	bf00      	nop
    d854:	3714      	adds	r7, #20
    d856:	46bd      	mov	sp, r7
    d858:	bc80      	pop	{r7}
    d85a:	4770      	bx	lr

0000d85c <_ZN15CO_Driver_Class21ConvertCANMsg2CORxMsgER11can_messageP13CO_CANrxMsg_t>:

void CO_Driver_Class::ConvertCANMsg2CORxMsg(can_message& msgHeader, CO_CANrxMsg_t *rxMsg)
{
    d85c:	b590      	push	{r4, r7, lr}
    d85e:	b085      	sub	sp, #20
    d860:	af00      	add	r7, sp, #0
    d862:	60f8      	str	r0, [r7, #12]
    d864:	60b9      	str	r1, [r7, #8]
    d866:	607a      	str	r2, [r7, #4]
	rxMsg->RxHeader=msgHeader;
    d868:	687a      	ldr	r2, [r7, #4]
    d86a:	68bb      	ldr	r3, [r7, #8]
    d86c:	4614      	mov	r4, r2
    d86e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    d870:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	rxMsg->DLC=msgHeader.len;
    d874:	68bb      	ldr	r3, [r7, #8]
    d876:	7b1a      	ldrb	r2, [r3, #12]
    d878:	687b      	ldr	r3, [r7, #4]
    d87a:	751a      	strb	r2, [r3, #20]
	rxMsg->ident=msgHeader.id;
    d87c:	68bb      	ldr	r3, [r7, #8]
    d87e:	681a      	ldr	r2, [r3, #0]
    d880:	687b      	ldr	r3, [r7, #4]
    d882:	611a      	str	r2, [r3, #16]
	memcpy(&rxMsg->data[0],msgHeader.data,msgHeader.len);
    d884:	687b      	ldr	r3, [r7, #4]
    d886:	f103 0015 	add.w	r0, r3, #21
    d88a:	68bb      	ldr	r3, [r7, #8]
    d88c:	6899      	ldr	r1, [r3, #8]
    d88e:	68bb      	ldr	r3, [r7, #8]
    d890:	7b1b      	ldrb	r3, [r3, #12]
    d892:	461a      	mov	r2, r3
    d894:	4b02      	ldr	r3, [pc, #8]	; (d8a0 <_ZN15CO_Driver_Class21ConvertCANMsg2CORxMsgER11can_messageP13CO_CANrxMsg_t+0x44>)
    d896:	4798      	blx	r3

	/* Map buffer data to the HAL CAN tx header data*/
	//TxHeader->ExtId = 0u;

}
    d898:	bf00      	nop
    d89a:	3714      	adds	r7, #20
    d89c:	46bd      	mov	sp, r7
    d89e:	bd90      	pop	{r4, r7, pc}
    d8a0:	00012de5 	.word	0x00012de5

0000d8a4 <_ZN15CO_Driver_Class26CO_CANsetConfigurationModeEP20can_async_descriptor>:
	{
		;//TODO add assert here
	}
}

void CO_Driver_Class::CO_CANsetConfigurationMode(can_async_descriptor *descr){
    d8a4:	b480      	push	{r7}
    d8a6:	b083      	sub	sp, #12
    d8a8:	af00      	add	r7, sp, #0
    d8aa:	6078      	str	r0, [r7, #4]
    d8ac:	6039      	str	r1, [r7, #0]
	
	canDescr=descr;
    d8ae:	687b      	ldr	r3, [r7, #4]
    d8b0:	683a      	ldr	r2, [r7, #0]
    d8b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	/* Put CAN module in configuration mode */
	/* HAL is responsible for that */
}
    d8b6:	bf00      	nop
    d8b8:	370c      	adds	r7, #12
    d8ba:	46bd      	mov	sp, r7
    d8bc:	bc80      	pop	{r7}
    d8be:	4770      	bx	lr

0000d8c0 <_ZN15CO_Driver_Class19CO_CANsetNormalModeEv>:

/******************************************************************************/
CO_ReturnError_t CO_Driver_Class::CO_CANsetNormalMode(void){
    d8c0:	b580      	push	{r7, lr}
    d8c2:	b084      	sub	sp, #16
    d8c4:	af00      	add	r7, sp, #0
    d8c6:	6078      	str	r0, [r7, #4]
	/* Put CAN module in normal mode */
	int32_t		error_CAN_hal;
	Error = CO_ERROR_NO;
    d8c8:	687b      	ldr	r3, [r7, #4]
    d8ca:	2200      	movs	r2, #0
    d8cc:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	error_CAN_hal=can_async_enable(CAN_Module->CANBaseDescriptor);
    d8d0:	687b      	ldr	r3, [r7, #4]
    d8d2:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    d8d6:	681b      	ldr	r3, [r3, #0]
    d8d8:	4618      	mov	r0, r3
    d8da:	4b0a      	ldr	r3, [pc, #40]	; (d904 <_ZN15CO_Driver_Class19CO_CANsetNormalModeEv+0x44>)
    d8dc:	4798      	blx	r3
    d8de:	60f8      	str	r0, [r7, #12]
	//    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
	//    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
	//    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 1, 0);
	//    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);

	if (error_CAN_hal != CO_ERROR_NO)
    d8e0:	68fb      	ldr	r3, [r7, #12]
    d8e2:	2b00      	cmp	r3, #0
    d8e4:	d002      	beq.n	d8ec <_ZN15CO_Driver_Class19CO_CANsetNormalModeEv+0x2c>
	{
		//_Error_Handler(__FILE__, __LINE__);
		return CO_ERROR_HAL;
    d8e6:	f06f 030e 	mvn.w	r3, #14
    d8ea:	e007      	b.n	d8fc <_ZN15CO_Driver_Class19CO_CANsetNormalModeEv+0x3c>
	}
	CAN_Module->CANnormal = true;
    d8ec:	687b      	ldr	r3, [r7, #4]
    d8ee:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    d8f2:	2201      	movs	r2, #1
    d8f4:	751a      	strb	r2, [r3, #20]
	return Error;
    d8f6:	687b      	ldr	r3, [r7, #4]
    d8f8:	f993 309c 	ldrsb.w	r3, [r3, #156]	; 0x9c
}
    d8fc:	4618      	mov	r0, r3
    d8fe:	3710      	adds	r7, #16
    d900:	46bd      	mov	sp, r7
    d902:	bd80      	pop	{r7, pc}
    d904:	00001a3d 	.word	0x00001a3d

0000d908 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm>:
		CO_CANrx_t              rxArray[],
		uint32_t                rxSize,
		CO_CANtx_t              txArray[],
		uint32_t                txSize,
		uint32_t                CANbitRate)
{
    d908:	b580      	push	{r7, lr}
    d90a:	b086      	sub	sp, #24
    d90c:	af00      	add	r7, sp, #0
    d90e:	60f8      	str	r0, [r7, #12]
    d910:	60b9      	str	r1, [r7, #8]
    d912:	607a      	str	r2, [r7, #4]
    d914:	603b      	str	r3, [r7, #0]
	canDescr=HALCanObject;
    d916:	68fb      	ldr	r3, [r7, #12]
    d918:	687a      	ldr	r2, [r7, #4]
    d91a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	
	int32_t		error_CAN_hal;

	/* verify arguments */
	if(CANmodule==NULL || rxArray==NULL || txArray==NULL)
    d91e:	68bb      	ldr	r3, [r7, #8]
    d920:	2b00      	cmp	r3, #0
    d922:	d005      	beq.n	d930 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x28>
    d924:	683b      	ldr	r3, [r7, #0]
    d926:	2b00      	cmp	r3, #0
    d928:	d002      	beq.n	d930 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x28>
    d92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d92c:	2b00      	cmp	r3, #0
    d92e:	d102      	bne.n	d936 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x2e>
	{
		return CO_ERROR_ILLEGAL_ARGUMENT;
    d930:	f04f 33ff 	mov.w	r3, #4294967295
    d934:	e084      	b.n	da40 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x138>
	else
	{
		;//do nothing
	}

	RxFifo_Callback_CanModule_p = CANmodule;
    d936:	68fb      	ldr	r3, [r7, #12]
    d938:	68ba      	ldr	r2, [r7, #8]
    d93a:	675a      	str	r2, [r3, #116]	; 0x74

	/* Configure object variables */
	CANmodule->CANBaseDescriptor = (can_async_descriptor*)HALCanObject;
    d93c:	68bb      	ldr	r3, [r7, #8]
    d93e:	687a      	ldr	r2, [r7, #4]
    d940:	601a      	str	r2, [r3, #0]
	CANmodule->rxArray = rxArray;
    d942:	68bb      	ldr	r3, [r7, #8]
    d944:	683a      	ldr	r2, [r7, #0]
    d946:	605a      	str	r2, [r3, #4]
	CANmodule->rxSize = rxSize;
    d948:	68bb      	ldr	r3, [r7, #8]
    d94a:	6a3a      	ldr	r2, [r7, #32]
    d94c:	609a      	str	r2, [r3, #8]
	CANmodule->txArray = txArray;
    d94e:	68bb      	ldr	r3, [r7, #8]
    d950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    d952:	60da      	str	r2, [r3, #12]
	CANmodule->txSize = txSize;
    d954:	68bb      	ldr	r3, [r7, #8]
    d956:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d958:	611a      	str	r2, [r3, #16]
	CANmodule->CANnormal = false;
    d95a:	68bb      	ldr	r3, [r7, #8]
    d95c:	2200      	movs	r2, #0
    d95e:	751a      	strb	r2, [r3, #20]
	CANmodule->useCANrxFilters = false;
    d960:	68bb      	ldr	r3, [r7, #8]
    d962:	2200      	movs	r2, #0
    d964:	755a      	strb	r2, [r3, #21]
	CANmodule->bufferInhibitFlag = false;
    d966:	68bb      	ldr	r3, [r7, #8]
    d968:	2200      	movs	r2, #0
    d96a:	759a      	strb	r2, [r3, #22]
	CANmodule->firstCANtxMessage = true;
    d96c:	68bb      	ldr	r3, [r7, #8]
    d96e:	2201      	movs	r2, #1
    d970:	75da      	strb	r2, [r3, #23]
	CANmodule->CANtxCount = 0U;
    d972:	68bb      	ldr	r3, [r7, #8]
    d974:	2200      	movs	r2, #0
    d976:	619a      	str	r2, [r3, #24]
	CANmodule->errOld = 0U;
    d978:	68bb      	ldr	r3, [r7, #8]
    d97a:	2200      	movs	r2, #0
    d97c:	61da      	str	r2, [r3, #28]
	CANmodule->em = NULL;
    d97e:	68bb      	ldr	r3, [r7, #8]
    d980:	2200      	movs	r2, #0
    d982:	621a      	str	r2, [r3, #32]

	for(i=0U; i<rxSize; i++)
    d984:	68fb      	ldr	r3, [r7, #12]
    d986:	2200      	movs	r2, #0
    d988:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    d98c:	68fb      	ldr	r3, [r7, #12]
    d98e:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    d992:	6a3b      	ldr	r3, [r7, #32]
    d994:	429a      	cmp	r2, r3
    d996:	d217      	bcs.n	d9c8 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0xc0>
	{
		rxArray[i].ident = 0U;
    d998:	68fb      	ldr	r3, [r7, #12]
    d99a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    d99e:	011b      	lsls	r3, r3, #4
    d9a0:	683a      	ldr	r2, [r7, #0]
    d9a2:	4413      	add	r3, r2
    d9a4:	2200      	movs	r2, #0
    d9a6:	601a      	str	r2, [r3, #0]
		rxArray[i].pFunct = NULL;
    d9a8:	68fb      	ldr	r3, [r7, #12]
    d9aa:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    d9ae:	011b      	lsls	r3, r3, #4
    d9b0:	683a      	ldr	r2, [r7, #0]
    d9b2:	4413      	add	r3, r2
    d9b4:	2200      	movs	r2, #0
    d9b6:	60da      	str	r2, [r3, #12]
	for(i=0U; i<rxSize; i++)
    d9b8:	68fb      	ldr	r3, [r7, #12]
    d9ba:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    d9be:	1c5a      	adds	r2, r3, #1
    d9c0:	68fb      	ldr	r3, [r7, #12]
    d9c2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    d9c6:	e7e1      	b.n	d98c <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x84>
	}

	for(i=0U; i<txSize; i++)
    d9c8:	68fb      	ldr	r3, [r7, #12]
    d9ca:	2200      	movs	r2, #0
    d9cc:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    d9d0:	68fb      	ldr	r3, [r7, #12]
    d9d2:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    d9d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d9d8:	429a      	cmp	r2, r3
    d9da:	d20f      	bcs.n	d9fc <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0xf4>
	{
		txArray[i].bufferFull = false;
    d9dc:	68fb      	ldr	r3, [r7, #12]
    d9de:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    d9e2:	011b      	lsls	r3, r3, #4
    d9e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    d9e6:	4413      	add	r3, r2
    d9e8:	2200      	movs	r2, #0
    d9ea:	735a      	strb	r2, [r3, #13]
	for(i=0U; i<txSize; i++)
    d9ec:	68fb      	ldr	r3, [r7, #12]
    d9ee:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    d9f2:	1c5a      	adds	r2, r3, #1
    d9f4:	68fb      	ldr	r3, [r7, #12]
    d9f6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    d9fa:	e7e9      	b.n	d9d0 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0xc8>
	}


	CANmodule_Disable();
    d9fc:	68f8      	ldr	r0, [r7, #12]
    d9fe:	4b12      	ldr	r3, [pc, #72]	; (da48 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x140>)
    da00:	4798      	blx	r3
	
	can_async_register_callback(canDescr, CAN_ASYNC_RX_CB, (FUNC_PTR)CO_rx_callback);
    da02:	68fb      	ldr	r3, [r7, #12]
    da04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    da08:	4a10      	ldr	r2, [pc, #64]	; (da4c <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x144>)
    da0a:	2100      	movs	r1, #0
    da0c:	4618      	mov	r0, r3
    da0e:	4b10      	ldr	r3, [pc, #64]	; (da50 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x148>)
    da10:	4798      	blx	r3
	can_async_register_callback(canDescr, CAN_ASYNC_IRQ_CB, (FUNC_PTR)CO_IRQ_Error_Callback);
    da12:	68fb      	ldr	r3, [r7, #12]
    da14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    da18:	4a0e      	ldr	r2, [pc, #56]	; (da54 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x14c>)
    da1a:	2102      	movs	r1, #2
    da1c:	4618      	mov	r0, r3
    da1e:	4b0c      	ldr	r3, [pc, #48]	; (da50 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x148>)
    da20:	4798      	blx	r3
	error_CAN_hal=can_async_enable(HALCanObject);
    da22:	6878      	ldr	r0, [r7, #4]
    da24:	4b0c      	ldr	r3, [pc, #48]	; (da58 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x150>)
    da26:	4798      	blx	r3
    da28:	6178      	str	r0, [r7, #20]
	if (error_CAN_hal != CO_ERROR_NO)
    da2a:	697b      	ldr	r3, [r7, #20]
    da2c:	2b00      	cmp	r3, #0
    da2e:	d002      	beq.n	da36 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x12e>
	{
		//_Error_Handler(__FILE__, __LINE__);
		return CO_ERROR_HAL;
    da30:	f06f 030e 	mvn.w	r3, #14
    da34:	e004      	b.n	da40 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x138>
	}
	CAN_Module=CANmodule;
    da36:	68fb      	ldr	r3, [r7, #12]
    da38:	68ba      	ldr	r2, [r7, #8]
    da3a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	return CO_ERROR_NO;
    da3e:	2300      	movs	r3, #0
}
    da40:	4618      	mov	r0, r3
    da42:	3718      	adds	r7, #24
    da44:	46bd      	mov	sp, r7
    da46:	bd80      	pop	{r7, pc}
    da48:	0000da5d 	.word	0x0000da5d
    da4c:	0000d6a9 	.word	0x0000d6a9
    da50:	00001b11 	.word	0x00001b11
    da54:	0000d6f5 	.word	0x0000d6f5
    da58:	00001a3d 	.word	0x00001a3d

0000da5c <_ZN15CO_Driver_Class17CANmodule_DisableEv>:


/******************************************************************************/
void CO_Driver_Class::CANmodule_Disable(void){
    da5c:	b480      	push	{r7}
    da5e:	b083      	sub	sp, #12
    da60:	af00      	add	r7, sp, #0
    da62:	6078      	str	r0, [r7, #4]
	HAL_CAN_Stop(CANmodule->CANbaseAddress);
	*/
	//can_async_register_callback(canDescr, CAN_ASYNC_RX_CB, (FUNC_PTR)CO_rx_callback);
	//can_async_register_callback(canDescr, CAN_ASYNC_IRQ_CB, (FUNC_PTR)CO_IRQ_Error_Callback);
	//can_async_disable(CAN_Module->CANBaseDescriptor);
}
    da64:	bf00      	nop
    da66:	370c      	adds	r7, #12
    da68:	46bd      	mov	sp, r7
    da6a:	bc80      	pop	{r7}
    da6c:	4770      	bx	lr
	...

0000da70 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE>:
		uint32_t                ident,
		uint32_t                mask,
		bool_t                  rtr,
		void                   *object,
		void                  (*pFunct)(void *object, const CO_CANrxMsg_t *message))
{
    da70:	b590      	push	{r4, r7, lr}
    da72:	b087      	sub	sp, #28
    da74:	af00      	add	r7, sp, #0
    da76:	60f8      	str	r0, [r7, #12]
    da78:	60b9      	str	r1, [r7, #8]
    da7a:	607a      	str	r2, [r7, #4]
    da7c:	603b      	str	r3, [r7, #0]
	ret = CO_ERROR_NO;
    da7e:	68fb      	ldr	r3, [r7, #12]
    da80:	2200      	movs	r2, #0
    da82:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d

	if((CAN_Module!=NULL) && (object!=NULL) && (pFunct!=NULL) && (index < CAN_Module->rxSize)){
    da86:	68fb      	ldr	r3, [r7, #12]
    da88:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    da8c:	2b00      	cmp	r3, #0
    da8e:	d060      	beq.n	db52 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xe2>
    da90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    da92:	2b00      	cmp	r3, #0
    da94:	d05d      	beq.n	db52 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xe2>
    da96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    da98:	2b00      	cmp	r3, #0
    da9a:	d05a      	beq.n	db52 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xe2>
    da9c:	68fb      	ldr	r3, [r7, #12]
    da9e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    daa2:	689a      	ldr	r2, [r3, #8]
    daa4:	68bb      	ldr	r3, [r7, #8]
    daa6:	429a      	cmp	r2, r3
    daa8:	d953      	bls.n	db52 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xe2>
		/* buffer, which will be configured */
		CO_CANrx_t *buffer = &CAN_Module->rxArray[index];
    daaa:	68fb      	ldr	r3, [r7, #12]
    daac:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    dab0:	685a      	ldr	r2, [r3, #4]
    dab2:	68bb      	ldr	r3, [r7, #8]
    dab4:	011b      	lsls	r3, r3, #4
    dab6:	4413      	add	r3, r2
    dab8:	617b      	str	r3, [r7, #20]

		/* Configure object variables */
		buffer->object = object;
    daba:	697b      	ldr	r3, [r7, #20]
    dabc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    dabe:	609a      	str	r2, [r3, #8]
		buffer->pFunct = pFunct;
    dac0:	697b      	ldr	r3, [r7, #20]
    dac2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    dac4:	60da      	str	r2, [r3, #12]

		/* CAN identifier and CAN mask, bit aligned with CAN module. Different on different microcontrollers. */
		buffer->ident = (ident & 0x07FF) << 2;
    dac6:	687b      	ldr	r3, [r7, #4]
    dac8:	009a      	lsls	r2, r3, #2
    daca:	f641 73fc 	movw	r3, #8188	; 0x1ffc
    dace:	4013      	ands	r3, r2
    dad0:	697a      	ldr	r2, [r7, #20]
    dad2:	6013      	str	r3, [r2, #0]
		if (rtr)
    dad4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    dad8:	2b00      	cmp	r3, #0
    dada:	d005      	beq.n	dae8 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0x78>
		{
			buffer->ident |= 0x02;
    dadc:	697b      	ldr	r3, [r7, #20]
    dade:	681b      	ldr	r3, [r3, #0]
    dae0:	f043 0202 	orr.w	r2, r3, #2
    dae4:	697b      	ldr	r3, [r7, #20]
    dae6:	601a      	str	r2, [r3, #0]
		}
		buffer->mask = (mask & 0x07FF) << 2;
    dae8:	683b      	ldr	r3, [r7, #0]
    daea:	009a      	lsls	r2, r3, #2
    daec:	f641 73fc 	movw	r3, #8188	; 0x1ffc
    daf0:	4013      	ands	r3, r2
    daf2:	697a      	ldr	r2, [r7, #20]
    daf4:	6053      	str	r3, [r2, #4]
		buffer->mask |= 0x02;
    daf6:	697b      	ldr	r3, [r7, #20]
    daf8:	685b      	ldr	r3, [r3, #4]
    dafa:	f043 0202 	orr.w	r2, r3, #2
    dafe:	697b      	ldr	r3, [r7, #20]
    db00:	605a      	str	r2, [r3, #4]

		/* Set CAN hardware module filter and mask. */
		if(CAN_Module->useCANrxFilters)
    db02:	68fb      	ldr	r3, [r7, #12]
    db04:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    db08:	7d5b      	ldrb	r3, [r3, #21]
    db0a:	b2db      	uxtb	r3, r3
    db0c:	2b00      	cmp	r3, #0
    db0e:	bf14      	ite	ne
    db10:	2301      	movne	r3, #1
    db12:	2300      	moveq	r3, #0
    db14:	b2db      	uxtb	r3, r3
    db16:	2b00      	cmp	r3, #0
    db18:	d120      	bne.n	db5c <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xec>
		else
		{
			/*no hardware filters*/
			//CAN_FilterTypeDef FilterConfig;
		
			CO_Filter.id   = buffer->ident;
    db1a:	697b      	ldr	r3, [r7, #20]
    db1c:	681a      	ldr	r2, [r3, #0]
    db1e:	68fb      	ldr	r3, [r7, #12]
    db20:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
			CO_Filter.mask = buffer->mask;
    db24:	697b      	ldr	r3, [r7, #20]
    db26:	685a      	ldr	r2, [r3, #4]
    db28:	68fb      	ldr	r3, [r7, #12]
    db2a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
			ret= (CO_ReturnError_t)can_async_set_filter(CAN_Module->CANBaseDescriptor,(uint8_t)index, CAN_FMT_STDID, &CO_Filter);
    db2e:	68fb      	ldr	r3, [r7, #12]
    db30:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    db34:	6818      	ldr	r0, [r3, #0]
    db36:	68bb      	ldr	r3, [r7, #8]
    db38:	b2d9      	uxtb	r1, r3
    db3a:	68fb      	ldr	r3, [r7, #12]
    db3c:	f503 7390 	add.w	r3, r3, #288	; 0x120
    db40:	2200      	movs	r2, #0
    db42:	4c0a      	ldr	r4, [pc, #40]	; (db6c <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xfc>)
    db44:	47a0      	blx	r4
    db46:	4603      	mov	r3, r0
    db48:	b25a      	sxtb	r2, r3
    db4a:	68fb      	ldr	r3, [r7, #12]
    db4c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
		}
    db50:	e004      	b.n	db5c <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xec>
	}
	else
	{
		ret = CO_ERROR_ILLEGAL_ARGUMENT;
    db52:	68fb      	ldr	r3, [r7, #12]
    db54:	22ff      	movs	r2, #255	; 0xff
    db56:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
    db5a:	e000      	b.n	db5e <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xee>
		}
    db5c:	bf00      	nop
	}
	return ret;
    db5e:	68fb      	ldr	r3, [r7, #12]
    db60:	f993 309d 	ldrsb.w	r3, [r3, #157]	; 0x9d
}
    db64:	4618      	mov	r0, r3
    db66:	371c      	adds	r7, #28
    db68:	46bd      	mov	sp, r7
    db6a:	bd90      	pop	{r4, r7, pc}
    db6c:	00001b8d 	.word	0x00001b8d

0000db70 <_ZN15CO_Driver_Class17CAN_Tx_BufferInitEmmhhh>:
		uint32_t                index,
		uint32_t                ident,
		bool_t                  rtr,
		uint8_t                 noOfBytes,
		bool_t                  syncFlag)
{
    db70:	b480      	push	{r7}
    db72:	b085      	sub	sp, #20
    db74:	af00      	add	r7, sp, #0
    db76:	60f8      	str	r0, [r7, #12]
    db78:	60b9      	str	r1, [r7, #8]
    db7a:	607a      	str	r2, [r7, #4]
    db7c:	70fb      	strb	r3, [r7, #3]
	buffer = NULL;
    db7e:	68fb      	ldr	r3, [r7, #12]
    db80:	2200      	movs	r2, #0
    db82:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	if((CAN_Module != NULL) && (index < CAN_Module->txSize)){
    db86:	68fb      	ldr	r3, [r7, #12]
    db88:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    db8c:	2b00      	cmp	r3, #0
    db8e:	d03c      	beq.n	dc0a <_ZN15CO_Driver_Class17CAN_Tx_BufferInitEmmhhh+0x9a>
    db90:	68fb      	ldr	r3, [r7, #12]
    db92:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    db96:	691a      	ldr	r2, [r3, #16]
    db98:	68bb      	ldr	r3, [r7, #8]
    db9a:	429a      	cmp	r2, r3
    db9c:	d935      	bls.n	dc0a <_ZN15CO_Driver_Class17CAN_Tx_BufferInitEmmhhh+0x9a>
		/* get specific buffer */
		buffer = &CAN_Module->txArray[index];
    db9e:	68fb      	ldr	r3, [r7, #12]
    dba0:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    dba4:	68da      	ldr	r2, [r3, #12]
    dba6:	68bb      	ldr	r3, [r7, #8]
    dba8:	011b      	lsls	r3, r3, #4
    dbaa:	441a      	add	r2, r3
    dbac:	68fb      	ldr	r3, [r7, #12]
    dbae:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

		/* CAN identifier, DLC and rtr, bit aligned with CAN module transmit buffer.*/

		buffer->ident &= 0x7FF;
    dbb2:	68fb      	ldr	r3, [r7, #12]
    dbb4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    dbb8:	68fa      	ldr	r2, [r7, #12]
    dbba:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
    dbbe:	6812      	ldr	r2, [r2, #0]
    dbc0:	f3c2 020a 	ubfx	r2, r2, #0, #11
    dbc4:	601a      	str	r2, [r3, #0]
		buffer->ident = ident << 2;
    dbc6:	68fb      	ldr	r3, [r7, #12]
    dbc8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    dbcc:	687a      	ldr	r2, [r7, #4]
    dbce:	0092      	lsls	r2, r2, #2
    dbd0:	601a      	str	r2, [r3, #0]
		if (rtr) buffer->ident |= 0x02;
    dbd2:	78fb      	ldrb	r3, [r7, #3]
    dbd4:	2b00      	cmp	r3, #0
    dbd6:	d009      	beq.n	dbec <_ZN15CO_Driver_Class17CAN_Tx_BufferInitEmmhhh+0x7c>
    dbd8:	68fb      	ldr	r3, [r7, #12]
    dbda:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    dbde:	68fa      	ldr	r2, [r7, #12]
    dbe0:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
    dbe4:	6812      	ldr	r2, [r2, #0]
    dbe6:	f042 0202 	orr.w	r2, r2, #2
    dbea:	601a      	str	r2, [r3, #0]

		buffer->DLC = noOfBytes;
    dbec:	68fb      	ldr	r3, [r7, #12]
    dbee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    dbf2:	7e3a      	ldrb	r2, [r7, #24]
    dbf4:	711a      	strb	r2, [r3, #4]
		buffer->bufferFull = false;
    dbf6:	68fb      	ldr	r3, [r7, #12]
    dbf8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    dbfc:	2200      	movs	r2, #0
    dbfe:	735a      	strb	r2, [r3, #13]
		buffer->syncFlag = syncFlag;
    dc00:	68fb      	ldr	r3, [r7, #12]
    dc02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    dc06:	7f3a      	ldrb	r2, [r7, #28]
    dc08:	739a      	strb	r2, [r3, #14]
	}

	return buffer;
    dc0a:	68fb      	ldr	r3, [r7, #12]
    dc0c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
}
    dc10:	4618      	mov	r0, r3
    dc12:	3714      	adds	r7, #20
    dc14:	46bd      	mov	sp, r7
    dc16:	bc80      	pop	{r7}
    dc18:	4770      	bx	lr
	...

0000dc1c <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t>:

/******************************************************************************/
CO_ReturnError_t CO_Driver_Class::CAN_Send(CO_CANtx_t *buffer)
{
    dc1c:	b590      	push	{r4, r7, lr}
    dc1e:	b089      	sub	sp, #36	; 0x24
    dc20:	af02      	add	r7, sp, #8
    dc22:	6078      	str	r0, [r7, #4]
    dc24:	6039      	str	r1, [r7, #0]
	err = CO_ERROR_NO;
    dc26:	687b      	ldr	r3, [r7, #4]
    dc28:	2200      	movs	r2, #0
    dc2a:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e

	if(buffer->bufferFull){
    dc2e:	683b      	ldr	r3, [r7, #0]
    dc30:	7b5b      	ldrb	r3, [r3, #13]
    dc32:	b2db      	uxtb	r3, r3
    dc34:	2b00      	cmp	r3, #0
    dc36:	bf14      	ite	ne
    dc38:	2301      	movne	r3, #1
    dc3a:	2300      	moveq	r3, #0
    dc3c:	b2db      	uxtb	r3, r3
    dc3e:	2b00      	cmp	r3, #0
    dc40:	d01d      	beq.n	dc7e <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x62>
		if(!CAN_Module->firstCANtxMessage){
    dc42:	687b      	ldr	r3, [r7, #4]
    dc44:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    dc48:	7ddb      	ldrb	r3, [r3, #23]
    dc4a:	b2db      	uxtb	r3, r3
    dc4c:	2b00      	cmp	r3, #0
    dc4e:	bf0c      	ite	eq
    dc50:	2301      	moveq	r3, #1
    dc52:	2300      	movne	r3, #0
    dc54:	b2db      	uxtb	r3, r3
    dc56:	2b00      	cmp	r3, #0
    dc58:	d00d      	beq.n	dc76 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x5a>
			/* don't set error, if bootup message is still on buffers */
			EM_ErrorReport((CO_EM_t*)CAN_Module->em, CO_EM_CAN_TX_OVERFLOW, CO_EMC_CAN_OVERRUN, buffer->ident);
    dc5a:	687b      	ldr	r3, [r7, #4]
    dc5c:	1d18      	adds	r0, r3, #4
    dc5e:	687b      	ldr	r3, [r7, #4]
    dc60:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    dc64:	6a19      	ldr	r1, [r3, #32]
    dc66:	683b      	ldr	r3, [r7, #0]
    dc68:	681b      	ldr	r3, [r3, #0]
    dc6a:	9300      	str	r3, [sp, #0]
    dc6c:	f248 1310 	movw	r3, #33040	; 0x8110
    dc70:	2214      	movs	r2, #20
    dc72:	4c35      	ldr	r4, [pc, #212]	; (dd48 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x12c>)
    dc74:	47a0      	blx	r4
		}
		err = CO_ERROR_TX_OVERFLOW;
    dc76:	687b      	ldr	r3, [r7, #4]
    dc78:	22f7      	movs	r2, #247	; 0xf7
    dc7a:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	}

	

	PrepareTxMessage(&msgHeader, buffer);
    dc7e:	687b      	ldr	r3, [r7, #4]
    dc80:	3378      	adds	r3, #120	; 0x78
    dc82:	683a      	ldr	r2, [r7, #0]
    dc84:	4619      	mov	r1, r3
    dc86:	6878      	ldr	r0, [r7, #4]
    dc88:	4b30      	ldr	r3, [pc, #192]	; (dd4c <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x130>)
    dc8a:	4798      	blx	r3

	if ((CAN_Module->CANtxCount == 0) ) {
    dc8c:	687b      	ldr	r3, [r7, #4]
    dc8e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    dc92:	699b      	ldr	r3, [r3, #24]
    dc94:	2b00      	cmp	r3, #0
    dc96:	bf0c      	ite	eq
    dc98:	2301      	moveq	r3, #1
    dc9a:	2300      	movne	r3, #0
    dc9c:	b2db      	uxtb	r3, r3
    dc9e:	2b00      	cmp	r3, #0
    dca0:	d041      	beq.n	dd26 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x10a>
	//	((uint32_t)hri_can_read_TXFQS_TFFL_bf(canHandler->dev.hw) > 0 )) {
		CAN_Module->bufferInhibitFlag = buffer->syncFlag;
    dca2:	687b      	ldr	r3, [r7, #4]
    dca4:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    dca8:	683a      	ldr	r2, [r7, #0]
    dcaa:	7b92      	ldrb	r2, [r2, #14]
    dcac:	b2d2      	uxtb	r2, r2
    dcae:	759a      	strb	r2, [r3, #22]
		
		can_async_register_callback(CAN_Module->CANBaseDescriptor, CAN_ASYNC_TX_CB, (FUNC_PTR)CO_tx_callback);
    dcb0:	687b      	ldr	r3, [r7, #4]
    dcb2:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    dcb6:	681b      	ldr	r3, [r3, #0]
    dcb8:	4a25      	ldr	r2, [pc, #148]	; (dd50 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x134>)
    dcba:	2101      	movs	r1, #1
    dcbc:	4618      	mov	r0, r3
    dcbe:	4b25      	ldr	r3, [pc, #148]	; (dd54 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x138>)
    dcc0:	4798      	blx	r3
		can_async_enable(CAN_Module->CANBaseDescriptor);
    dcc2:	687b      	ldr	r3, [r7, #4]
    dcc4:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    dcc8:	681b      	ldr	r3, [r3, #0]
    dcca:	4618      	mov	r0, r3
    dccc:	4b22      	ldr	r3, [pc, #136]	; (dd58 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x13c>)
    dcce:	4798      	blx	r3
		receivedtxCOCallback=false;
    dcd0:	687b      	ldr	r3, [r7, #4]
    dcd2:	2200      	movs	r2, #0
    dcd4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    dcd8:	f3ef 8310 	mrs	r3, PRIMASK
    dcdc:	60fb      	str	r3, [r7, #12]
  return(result);
    dcde:	68fb      	ldr	r3, [r7, #12]
		CO_LOCK_CAN_SEND();
    dce0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    dce2:	b672      	cpsid	i
		HalCanErrorCode=can_async_write(CAN_Module->CANBaseDescriptor, &msgHeader);
    dce4:	687b      	ldr	r3, [r7, #4]
    dce6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    dcea:	681a      	ldr	r2, [r3, #0]
    dcec:	687b      	ldr	r3, [r7, #4]
    dcee:	3378      	adds	r3, #120	; 0x78
    dcf0:	4619      	mov	r1, r3
    dcf2:	4610      	mov	r0, r2
    dcf4:	4b19      	ldr	r3, [pc, #100]	; (dd5c <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x140>)
    dcf6:	4798      	blx	r3
    dcf8:	4603      	mov	r3, r0
    dcfa:	461a      	mov	r2, r3
    dcfc:	687b      	ldr	r3, [r7, #4]
    dcfe:	61da      	str	r2, [r3, #28]
    dd00:	697b      	ldr	r3, [r7, #20]
    dd02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    dd04:	693b      	ldr	r3, [r7, #16]
    dd06:	f383 8810 	msr	PRIMASK, r3
		CO_UNLOCK_CAN_SEND();
		if(HalCanErrorCode != CO_ERROR_NO)
    dd0a:	687b      	ldr	r3, [r7, #4]
    dd0c:	69db      	ldr	r3, [r3, #28]
    dd0e:	2b00      	cmp	r3, #0
    dd10:	bf14      	ite	ne
    dd12:	2301      	movne	r3, #1
    dd14:	2300      	moveq	r3, #0
    dd16:	b2db      	uxtb	r3, r3
    dd18:	2b00      	cmp	r3, #0
    dd1a:	d00d      	beq.n	dd38 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x11c>
		{
			err = CO_ERROR_HAL;
    dd1c:	687b      	ldr	r3, [r7, #4]
    dd1e:	22f1      	movs	r2, #241	; 0xf1
    dd20:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
    dd24:	e008      	b.n	dd38 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x11c>
			//CANmodule->CANtxCount++;
		}
	}	/* if no buffer is free, message will be sent in the task */
	else
	{
		buffer->bufferFull = true;
    dd26:	683b      	ldr	r3, [r7, #0]
    dd28:	2201      	movs	r2, #1
    dd2a:	735a      	strb	r2, [r3, #13]
		CAN_Module->CANtxCount++;
    dd2c:	687b      	ldr	r3, [r7, #4]
    dd2e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    dd32:	699a      	ldr	r2, [r3, #24]
    dd34:	3201      	adds	r2, #1
    dd36:	619a      	str	r2, [r3, #24]
	}
	

	return err;
    dd38:	687b      	ldr	r3, [r7, #4]
    dd3a:	f993 309e 	ldrsb.w	r3, [r3, #158]	; 0x9e
}
    dd3e:	4618      	mov	r0, r3
    dd40:	371c      	adds	r7, #28
    dd42:	46bd      	mov	sp, r7
    dd44:	bd90      	pop	{r4, r7, pc}
    dd46:	bf00      	nop
    dd48:	0000e6b1 	.word	0x0000e6b1
    dd4c:	0000d811 	.word	0x0000d811
    dd50:	0000d729 	.word	0x0000d729
    dd54:	00001b11 	.word	0x00001b11
    dd58:	00001a3d 	.word	0x00001a3d
    dd5c:	00001ac5 	.word	0x00001ac5

0000dd60 <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv>:


/******************************************************************************/
void CO_Driver_Class::CANClearPendingSyncPDOs(void)
{
    dd60:	b590      	push	{r4, r7, lr}
    dd62:	b089      	sub	sp, #36	; 0x24
    dd64:	af02      	add	r7, sp, #8
    dd66:	6078      	str	r0, [r7, #4]
	tpdoDeleted = 0U;
    dd68:	687b      	ldr	r3, [r7, #4]
    dd6a:	2200      	movs	r2, #0
    dd6c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    dd70:	f3ef 8310 	mrs	r3, PRIMASK
    dd74:	60bb      	str	r3, [r7, #8]
  return(result);
    dd76:	68bb      	ldr	r3, [r7, #8]

	CO_LOCK_CAN_SEND();
    dd78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
    dd7a:	b672      	cpsid	i
      {
    	HAL_CAN_AbortTxRequest(CANmodule->);
      }
	 */

	if(/*messageIsOnCanBuffer && */CAN_Module->bufferInhibitFlag){
    dd7c:	687b      	ldr	r3, [r7, #4]
    dd7e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    dd82:	7d9b      	ldrb	r3, [r3, #22]
    dd84:	b2db      	uxtb	r3, r3
    dd86:	2b00      	cmp	r3, #0
    dd88:	bf14      	ite	ne
    dd8a:	2301      	movne	r3, #1
    dd8c:	2300      	moveq	r3, #0
    dd8e:	b2db      	uxtb	r3, r3
    dd90:	2b00      	cmp	r3, #0
    dd92:	d008      	beq.n	dda6 <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv+0x46>
		/* clear TXREQ */
		CAN_Module->bufferInhibitFlag = false;
    dd94:	687b      	ldr	r3, [r7, #4]
    dd96:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    dd9a:	2200      	movs	r2, #0
    dd9c:	759a      	strb	r2, [r3, #22]
		tpdoDeleted = 1U;
    dd9e:	687b      	ldr	r3, [r7, #4]
    dda0:	2201      	movs	r2, #1
    dda2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	}
	/* delete also pending synchronous TPDOs in TX buffers */
	if(CAN_Module->CANtxCount != 0U){
    dda6:	687b      	ldr	r3, [r7, #4]
    dda8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    ddac:	699b      	ldr	r3, [r3, #24]
    ddae:	2b00      	cmp	r3, #0
    ddb0:	bf14      	ite	ne
    ddb2:	2301      	movne	r3, #1
    ddb4:	2300      	moveq	r3, #0
    ddb6:	b2db      	uxtb	r3, r3
    ddb8:	2b00      	cmp	r3, #0
    ddba:	d03c      	beq.n	de36 <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv+0xd6>
	
		CO_CANtx_t *buffer = &CAN_Module->txArray[0];
    ddbc:	687b      	ldr	r3, [r7, #4]
    ddbe:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    ddc2:	68db      	ldr	r3, [r3, #12]
    ddc4:	617b      	str	r3, [r7, #20]
		for(i = CAN_Module->txSize; i > 0U; i--){
    ddc6:	687b      	ldr	r3, [r7, #4]
    ddc8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    ddcc:	691a      	ldr	r2, [r3, #16]
    ddce:	687b      	ldr	r3, [r7, #4]
    ddd0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    ddd4:	687b      	ldr	r3, [r7, #4]
    ddd6:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    ddda:	2b00      	cmp	r3, #0
    dddc:	d02b      	beq.n	de36 <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv+0xd6>
			if(buffer->bufferFull){
    ddde:	697b      	ldr	r3, [r7, #20]
    dde0:	7b5b      	ldrb	r3, [r3, #13]
    dde2:	b2db      	uxtb	r3, r3
    dde4:	2b00      	cmp	r3, #0
    dde6:	bf14      	ite	ne
    dde8:	2301      	movne	r3, #1
    ddea:	2300      	moveq	r3, #0
    ddec:	b2db      	uxtb	r3, r3
    ddee:	2b00      	cmp	r3, #0
    ddf0:	d016      	beq.n	de20 <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv+0xc0>
				if(buffer->syncFlag){
    ddf2:	697b      	ldr	r3, [r7, #20]
    ddf4:	7b9b      	ldrb	r3, [r3, #14]
    ddf6:	b2db      	uxtb	r3, r3
    ddf8:	2b00      	cmp	r3, #0
    ddfa:	bf14      	ite	ne
    ddfc:	2301      	movne	r3, #1
    ddfe:	2300      	moveq	r3, #0
    de00:	b2db      	uxtb	r3, r3
    de02:	2b00      	cmp	r3, #0
    de04:	d00c      	beq.n	de20 <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv+0xc0>
					buffer->bufferFull = false;
    de06:	697b      	ldr	r3, [r7, #20]
    de08:	2200      	movs	r2, #0
    de0a:	735a      	strb	r2, [r3, #13]
					CAN_Module->CANtxCount--;
    de0c:	687b      	ldr	r3, [r7, #4]
    de0e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    de12:	699a      	ldr	r2, [r3, #24]
    de14:	3a01      	subs	r2, #1
    de16:	619a      	str	r2, [r3, #24]
					tpdoDeleted = 2U;
    de18:	687b      	ldr	r3, [r7, #4]
    de1a:	2202      	movs	r2, #2
    de1c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
				}
			}
			buffer++;
    de20:	697b      	ldr	r3, [r7, #20]
    de22:	3310      	adds	r3, #16
    de24:	617b      	str	r3, [r7, #20]
		for(i = CAN_Module->txSize; i > 0U; i--){
    de26:	687b      	ldr	r3, [r7, #4]
    de28:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    de2c:	1e5a      	subs	r2, r3, #1
    de2e:	687b      	ldr	r3, [r7, #4]
    de30:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    de34:	e7ce      	b.n	ddd4 <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv+0x74>
    de36:	693b      	ldr	r3, [r7, #16]
    de38:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    de3a:	68fb      	ldr	r3, [r7, #12]
    de3c:	f383 8810 	msr	PRIMASK, r3
		}
	}
	CO_UNLOCK_CAN_SEND();


	if(tpdoDeleted != 0U){
    de40:	687b      	ldr	r3, [r7, #4]
    de42:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    de46:	2b00      	cmp	r3, #0
    de48:	d00e      	beq.n	de68 <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv+0x108>
		EM_ErrorReport((CO_EM_t*)CAN_Module->em, CO_EM_TPDO_OUTSIDE_WINDOW, CO_EMC_COMMUNICATION, tpdoDeleted);
    de4a:	687b      	ldr	r3, [r7, #4]
    de4c:	1d18      	adds	r0, r3, #4
    de4e:	687b      	ldr	r3, [r7, #4]
    de50:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    de54:	6a19      	ldr	r1, [r3, #32]
    de56:	687b      	ldr	r3, [r7, #4]
    de58:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    de5c:	9300      	str	r3, [sp, #0]
    de5e:	f44f 4301 	mov.w	r3, #33024	; 0x8100
    de62:	2215      	movs	r2, #21
    de64:	4c02      	ldr	r4, [pc, #8]	; (de70 <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv+0x110>)
    de66:	47a0      	blx	r4
	}
}
    de68:	bf00      	nop
    de6a:	371c      	adds	r7, #28
    de6c:	46bd      	mov	sp, r7
    de6e:	bd90      	pop	{r4, r7, pc}
    de70:	0000e6b1 	.word	0x0000e6b1

0000de74 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv>:


/******************************************************************************/
void CO_Driver_Class::CAN_VerifyErrors(void){
    de74:	b590      	push	{r4, r7, lr}
    de76:	b087      	sub	sp, #28
    de78:	af02      	add	r7, sp, #8
    de7a:	6078      	str	r0, [r7, #4]
	em = (CO_EM_t*)CAN_Module->em;
    de7c:	687b      	ldr	r3, [r7, #4]
    de7e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    de82:	6a1a      	ldr	r2, [r3, #32]
    de84:	687b      	ldr	r3, [r7, #4]
    de86:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	//uint32_t HalCanErrorCode = canHandler->dev.cb->irq_handler();

	if(CAN_Module->errOld != HalCanErrorCode)
    de8a:	687b      	ldr	r3, [r7, #4]
    de8c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    de90:	69da      	ldr	r2, [r3, #28]
    de92:	687b      	ldr	r3, [r7, #4]
    de94:	69db      	ldr	r3, [r3, #28]
    de96:	429a      	cmp	r2, r3
    de98:	bf14      	ite	ne
    de9a:	2301      	movne	r3, #1
    de9c:	2300      	moveq	r3, #0
    de9e:	b2db      	uxtb	r3, r3
    dea0:	2b00      	cmp	r3, #0
    dea2:	f000 80ae 	beq.w	e002 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x18e>
	{
		CAN_Module->errOld = HalCanErrorCode;
    dea6:	687b      	ldr	r3, [r7, #4]
    dea8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    deac:	687a      	ldr	r2, [r7, #4]
    deae:	69d2      	ldr	r2, [r2, #28]
    deb0:	61da      	str	r2, [r3, #28]
		if(HalCanErrorCode & CAN_IRQ_BO)
    deb2:	687b      	ldr	r3, [r7, #4]
    deb4:	69db      	ldr	r3, [r3, #28]
    deb6:	f003 0303 	and.w	r3, r3, #3
    deba:	2b00      	cmp	r3, #0
    debc:	bf14      	ite	ne
    debe:	2301      	movne	r3, #1
    dec0:	2300      	moveq	r3, #0
    dec2:	b2db      	uxtb	r3, r3
    dec4:	2b00      	cmp	r3, #0
    dec6:	d00d      	beq.n	dee4 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x70>
		{                               /* bus off */
			EM_ErrorReport(em, CO_EM_CAN_TX_BUS_OFF, CO_EMC_BUS_OFF_RECOVERED, HalCanErrorCode);
    dec8:	687b      	ldr	r3, [r7, #4]
    deca:	1d18      	adds	r0, r3, #4
    decc:	687b      	ldr	r3, [r7, #4]
    dece:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
    ded2:	687b      	ldr	r3, [r7, #4]
    ded4:	69db      	ldr	r3, [r3, #28]
    ded6:	9300      	str	r3, [sp, #0]
    ded8:	f248 1340 	movw	r3, #33088	; 0x8140
    dedc:	2212      	movs	r2, #18
    dede:	4c4d      	ldr	r4, [pc, #308]	; (e014 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x1a0>)
    dee0:	47a0      	blx	r4
    dee2:	e076      	b.n	dfd2 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x15e>
		}
		else{                                               /* not bus off */
			EM_ErrorReset(em, CO_EM_CAN_TX_BUS_OFF, HalCanErrorCode);
    dee4:	687b      	ldr	r3, [r7, #4]
    dee6:	1d18      	adds	r0, r3, #4
    dee8:	687b      	ldr	r3, [r7, #4]
    deea:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
    deee:	687b      	ldr	r3, [r7, #4]
    def0:	69db      	ldr	r3, [r3, #28]
    def2:	2212      	movs	r2, #18
    def4:	4c48      	ldr	r4, [pc, #288]	; (e018 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x1a4>)
    def6:	47a0      	blx	r4

			if(HalCanErrorCode & CAN_IRQ_EW)
    def8:	687b      	ldr	r3, [r7, #4]
    defa:	69db      	ldr	r3, [r3, #28]
    defc:	2300      	movs	r3, #0
    defe:	2b00      	cmp	r3, #0
    df00:	d00b      	beq.n	df1a <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0xa6>
			{     											/* bus warning */
				EM_ErrorReport(em, CO_EM_CAN_BUS_WARNING, CO_EMC_NO_ERROR, HalCanErrorCode);
    df02:	687b      	ldr	r3, [r7, #4]
    df04:	1d18      	adds	r0, r3, #4
    df06:	687b      	ldr	r3, [r7, #4]
    df08:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
    df0c:	687b      	ldr	r3, [r7, #4]
    df0e:	69db      	ldr	r3, [r3, #28]
    df10:	9300      	str	r3, [sp, #0]
    df12:	2300      	movs	r3, #0
    df14:	2201      	movs	r2, #1
    df16:	4c3f      	ldr	r4, [pc, #252]	; (e014 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x1a0>)
    df18:	47a0      	blx	r4
			}
			else
			{
				//do nothing
			}
			if(HalCanErrorCode & CAN_IRQ_EP)
    df1a:	687b      	ldr	r3, [r7, #4]
    df1c:	69db      	ldr	r3, [r3, #28]
    df1e:	f003 0302 	and.w	r3, r3, #2
    df22:	2b00      	cmp	r3, #0
    df24:	bf14      	ite	ne
    df26:	2301      	movne	r3, #1
    df28:	2300      	moveq	r3, #0
    df2a:	b2db      	uxtb	r3, r3
    df2c:	2b00      	cmp	r3, #0
    df2e:	d019      	beq.n	df64 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0xf0>
			{      											/* TX/RX bus passive */
				if(!CAN_Module->firstCANtxMessage)
    df30:	687b      	ldr	r3, [r7, #4]
    df32:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    df36:	7ddb      	ldrb	r3, [r3, #23]
    df38:	b2db      	uxtb	r3, r3
    df3a:	2b00      	cmp	r3, #0
    df3c:	bf0c      	ite	eq
    df3e:	2301      	moveq	r3, #1
    df40:	2300      	movne	r3, #0
    df42:	b2db      	uxtb	r3, r3
    df44:	2b00      	cmp	r3, #0
    df46:	d02f      	beq.n	dfa8 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x134>
				{
					EM_ErrorReport(em, CO_EM_CAN_TX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, HalCanErrorCode);
    df48:	687b      	ldr	r3, [r7, #4]
    df4a:	1d18      	adds	r0, r3, #4
    df4c:	687b      	ldr	r3, [r7, #4]
    df4e:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
    df52:	687b      	ldr	r3, [r7, #4]
    df54:	69db      	ldr	r3, [r3, #28]
    df56:	9300      	str	r3, [sp, #0]
    df58:	f248 1320 	movw	r3, #33056	; 0x8120
    df5c:	2207      	movs	r2, #7
    df5e:	4c2d      	ldr	r4, [pc, #180]	; (e014 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x1a0>)
    df60:	47a0      	blx	r4
    df62:	e021      	b.n	dfa8 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x134>
				{
					//do nothing
				}
			}
			else{
				bool_t isError = EM_IsError(em, CO_EM_CAN_TX_BUS_PASSIVE);
    df64:	687b      	ldr	r3, [r7, #4]
    df66:	1d18      	adds	r0, r3, #4
    df68:	687b      	ldr	r3, [r7, #4]
    df6a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    df6e:	2207      	movs	r2, #7
    df70:	4619      	mov	r1, r3
    df72:	4b2a      	ldr	r3, [pc, #168]	; (e01c <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x1a8>)
    df74:	4798      	blx	r3
    df76:	4603      	mov	r3, r0
    df78:	73fb      	strb	r3, [r7, #15]
				if(isError)
    df7a:	7bfb      	ldrb	r3, [r7, #15]
    df7c:	2b00      	cmp	r3, #0
    df7e:	d013      	beq.n	dfa8 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x134>
				{
					EM_ErrorReset(em, CO_EM_CAN_TX_BUS_PASSIVE, HalCanErrorCode);
    df80:	687b      	ldr	r3, [r7, #4]
    df82:	1d18      	adds	r0, r3, #4
    df84:	687b      	ldr	r3, [r7, #4]
    df86:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
    df8a:	687b      	ldr	r3, [r7, #4]
    df8c:	69db      	ldr	r3, [r3, #28]
    df8e:	2207      	movs	r2, #7
    df90:	4c21      	ldr	r4, [pc, #132]	; (e018 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x1a4>)
    df92:	47a0      	blx	r4
					EM_ErrorReset(em, CO_EM_CAN_TX_OVERFLOW, HalCanErrorCode);
    df94:	687b      	ldr	r3, [r7, #4]
    df96:	1d18      	adds	r0, r3, #4
    df98:	687b      	ldr	r3, [r7, #4]
    df9a:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
    df9e:	687b      	ldr	r3, [r7, #4]
    dfa0:	69db      	ldr	r3, [r3, #28]
    dfa2:	2214      	movs	r2, #20
    dfa4:	4c1c      	ldr	r4, [pc, #112]	; (e018 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x1a4>)
    dfa6:	47a0      	blx	r4
				{
					//do nothing
				}
			}

			if(HalCanErrorCode & CAN_IRQ_EA)
    dfa8:	687b      	ldr	r3, [r7, #4]
    dfaa:	69db      	ldr	r3, [r3, #28]
    dfac:	f003 0301 	and.w	r3, r3, #1
    dfb0:	2b00      	cmp	r3, #0
    dfb2:	bf14      	ite	ne
    dfb4:	2301      	movne	r3, #1
    dfb6:	2300      	moveq	r3, #0
    dfb8:	b2db      	uxtb	r3, r3
    dfba:	2b00      	cmp	r3, #0
    dfbc:	d009      	beq.n	dfd2 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x15e>
			{      											 /* no error */
				EM_ErrorReset(em, CO_EM_CAN_BUS_WARNING, HalCanErrorCode);
    dfbe:	687b      	ldr	r3, [r7, #4]
    dfc0:	1d18      	adds	r0, r3, #4
    dfc2:	687b      	ldr	r3, [r7, #4]
    dfc4:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
    dfc8:	687b      	ldr	r3, [r7, #4]
    dfca:	69db      	ldr	r3, [r3, #28]
    dfcc:	2201      	movs	r2, #1
    dfce:	4c12      	ldr	r4, [pc, #72]	; (e018 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x1a4>)
    dfd0:	47a0      	blx	r4
				//do nothing
			}

		}

		if((HalCanErrorCode & CAN_IRQ_DO) )
    dfd2:	687b      	ldr	r3, [r7, #4]
    dfd4:	69db      	ldr	r3, [r3, #28]
    dfd6:	f003 0304 	and.w	r3, r3, #4
    dfda:	2b00      	cmp	r3, #0
    dfdc:	bf14      	ite	ne
    dfde:	2301      	movne	r3, #1
    dfe0:	2300      	moveq	r3, #0
    dfe2:	b2db      	uxtb	r3, r3
    dfe4:	2b00      	cmp	r3, #0
    dfe6:	d00c      	beq.n	e002 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x18e>
		{                                 					/* CAN RX bus overflow */
			EM_ErrorReport(em, CO_EM_CAN_RXB_OVERFLOW, CO_EMC_CAN_OVERRUN, HalCanErrorCode);
    dfe8:	687b      	ldr	r3, [r7, #4]
    dfea:	1d18      	adds	r0, r3, #4
    dfec:	687b      	ldr	r3, [r7, #4]
    dfee:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
    dff2:	687b      	ldr	r3, [r7, #4]
    dff4:	69db      	ldr	r3, [r3, #28]
    dff6:	9300      	str	r3, [sp, #0]
    dff8:	f248 1310 	movw	r3, #33040	; 0x8110
    dffc:	2213      	movs	r2, #19
    dffe:	4c05      	ldr	r4, [pc, #20]	; (e014 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x1a0>)
    e000:	47a0      	blx	r4
		else
		{
			//do nothing
		}
	}
		receivedIntCOCallback=false;
    e002:	687b      	ldr	r3, [r7, #4]
    e004:	2200      	movs	r2, #0
    e006:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
    e00a:	bf00      	nop
    e00c:	3714      	adds	r7, #20
    e00e:	46bd      	mov	sp, r7
    e010:	bd90      	pop	{r4, r7, pc}
    e012:	bf00      	nop
    e014:	0000e6b1 	.word	0x0000e6b1
    e018:	0000e805 	.word	0x0000e805
    e01c:	0000e951 	.word	0x0000e951

0000e020 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv>:

/*Interrupt handlers*/
/******************************************************************************/
void CO_Driver_Class::ProcessInterrupt_Rx(void)
{
    e020:	b580      	push	{r7, lr}
    e022:	b084      	sub	sp, #16
    e024:	af00      	add	r7, sp, #0
    e026:	6078      	str	r0, [r7, #4]

	

	ConvertCANMsg2CORxMsg(receivedCOMsg,&CANmessage);
    e028:	687b      	ldr	r3, [r7, #4]
    e02a:	f103 0164 	add.w	r1, r3, #100	; 0x64
    e02e:	687b      	ldr	r3, [r7, #4]
    e030:	33f4      	adds	r3, #244	; 0xf4
    e032:	461a      	mov	r2, r3
    e034:	6878      	ldr	r0, [r7, #4]
    e036:	4b30      	ldr	r3, [pc, #192]	; (e0f8 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xd8>)
    e038:	4798      	blx	r3
	MsgBuff=CAN_Module->rxArray;
    e03a:	687b      	ldr	r3, [r7, #4]
    e03c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    e040:	685a      	ldr	r2, [r3, #4]
    e042:	687b      	ldr	r3, [r7, #4]
    e044:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	/* Search rxArray form CANmodule for the same CAN-ID. */
	uint32_t msgCO = (((uint32_t)(CANmessage.ident << 2)) | (uint32_t)(msg.type));
    e048:	687b      	ldr	r3, [r7, #4]
    e04a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    e04e:	009b      	lsls	r3, r3, #2
    e050:	687a      	ldr	r2, [r7, #4]
    e052:	f892 2090 	ldrb.w	r2, [r2, #144]	; 0x90
    e056:	4313      	orrs	r3, r2
    e058:	60fb      	str	r3, [r7, #12]
	for (index = 0; index < RxFifo_Callback_CanModule_p->rxSize; index++)
    e05a:	687b      	ldr	r3, [r7, #4]
    e05c:	2200      	movs	r2, #0
    e05e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    e062:	687b      	ldr	r3, [r7, #4]
    e064:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    e068:	687b      	ldr	r3, [r7, #4]
    e06a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    e06c:	689b      	ldr	r3, [r3, #8]
    e06e:	429a      	cmp	r2, r3
    e070:	d221      	bcs.n	e0b6 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x96>
	{
		
		if (((msgCO ^ MsgBuff->ident) & MsgBuff->mask) == 0)
    e072:	687b      	ldr	r3, [r7, #4]
    e074:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    e078:	681a      	ldr	r2, [r3, #0]
    e07a:	68fb      	ldr	r3, [r7, #12]
    e07c:	405a      	eors	r2, r3
    e07e:	687b      	ldr	r3, [r7, #4]
    e080:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    e084:	685b      	ldr	r3, [r3, #4]
    e086:	4013      	ands	r3, r2
    e088:	2b00      	cmp	r3, #0
    e08a:	d104      	bne.n	e096 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x76>
		{
			msgMatched = true;
    e08c:	687b      	ldr	r3, [r7, #4]
    e08e:	2201      	movs	r2, #1
    e090:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
			break;
    e094:	e00f      	b.n	e0b6 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x96>
		}
		MsgBuff++;
    e096:	687b      	ldr	r3, [r7, #4]
    e098:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    e09c:	f103 0210 	add.w	r2, r3, #16
    e0a0:	687b      	ldr	r3, [r7, #4]
    e0a2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	for (index = 0; index < RxFifo_Callback_CanModule_p->rxSize; index++)
    e0a6:	687b      	ldr	r3, [r7, #4]
    e0a8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    e0ac:	1c5a      	adds	r2, r3, #1
    e0ae:	687b      	ldr	r3, [r7, #4]
    e0b0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    e0b4:	e7d5      	b.n	e062 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x42>
	}

	/* Call specific function, which will process the message */
	if(msgMatched && (MsgBuff != NULL) && (MsgBuff->pFunct != NULL))
    e0b6:	687b      	ldr	r3, [r7, #4]
    e0b8:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
    e0bc:	2b00      	cmp	r3, #0
    e0be:	d016      	beq.n	e0ee <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xce>
    e0c0:	687b      	ldr	r3, [r7, #4]
    e0c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    e0c6:	2b00      	cmp	r3, #0
    e0c8:	d011      	beq.n	e0ee <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xce>
    e0ca:	687b      	ldr	r3, [r7, #4]
    e0cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    e0d0:	68db      	ldr	r3, [r3, #12]
    e0d2:	2b00      	cmp	r3, #0
    e0d4:	d00b      	beq.n	e0ee <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xce>
	{
			//printf("  %X", CANmessage.ident);
			MsgBuff->pFunct(MsgBuff->object, &CANmessage);
    e0d6:	687b      	ldr	r3, [r7, #4]
    e0d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    e0dc:	68db      	ldr	r3, [r3, #12]
    e0de:	687a      	ldr	r2, [r7, #4]
    e0e0:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
    e0e4:	6890      	ldr	r0, [r2, #8]
    e0e6:	687a      	ldr	r2, [r7, #4]
    e0e8:	32f4      	adds	r2, #244	; 0xf4
    e0ea:	4611      	mov	r1, r2
    e0ec:	4798      	blx	r3
	//                buffer++;
	//            }
	//        }

	/*CubeMx HAL is responsible for clearing interrupt flags and all the dirty work. */
}
    e0ee:	bf00      	nop
    e0f0:	3710      	adds	r7, #16
    e0f2:	46bd      	mov	sp, r7
    e0f4:	bd80      	pop	{r7, pc}
    e0f6:	bf00      	nop
    e0f8:	0000d85d 	.word	0x0000d85d

0000e0fc <_ZN15CO_Driver_Class14CAN_Polling_TxEv>:


void CO_Driver_Class::CAN_Polling_Tx(void)
{
    e0fc:	b580      	push	{r7, lr}
    e0fe:	b084      	sub	sp, #16
    e100:	af00      	add	r7, sp, #0
    e102:	6078      	str	r0, [r7, #4]
	
	//struct can_async_descriptor canStruct= (* struct can_async_descriptor )canHandler;
	if (hri_can_read_TXFQS_TFFL_bf(CAN1) > 0)
    e104:	4845      	ldr	r0, [pc, #276]	; (e21c <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x120>)
    e106:	4b46      	ldr	r3, [pc, #280]	; (e220 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x124>)
    e108:	4798      	blx	r3
    e10a:	4603      	mov	r3, r0
    e10c:	2b00      	cmp	r3, #0
    e10e:	bf14      	ite	ne
    e110:	2301      	movne	r3, #1
    e112:	2300      	moveq	r3, #0
    e114:	b2db      	uxtb	r3, r3
    e116:	2b00      	cmp	r3, #0
    e118:	d07b      	beq.n	e212 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x116>
	{
		/* First CAN message (bootup) was sent successfully */
		CAN_Module->firstCANtxMessage = false;
    e11a:	687b      	ldr	r3, [r7, #4]
    e11c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    e120:	2200      	movs	r2, #0
    e122:	75da      	strb	r2, [r3, #23]
		/* Clear flag from previous message */
		CAN_Module->bufferInhibitFlag = false;
    e124:	687b      	ldr	r3, [r7, #4]
    e126:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    e12a:	2200      	movs	r2, #0
    e12c:	759a      	strb	r2, [r3, #22]
		/* Are there any new messages waiting to be send */
		if(CAN_Module->CANtxCount > 0U)
    e12e:	687b      	ldr	r3, [r7, #4]
    e130:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    e134:	699b      	ldr	r3, [r3, #24]
    e136:	2b00      	cmp	r3, #0
    e138:	bf14      	ite	ne
    e13a:	2301      	movne	r3, #1
    e13c:	2300      	moveq	r3, #0
    e13e:	b2db      	uxtb	r3, r3
    e140:	2b00      	cmp	r3, #0
    e142:	d066      	beq.n	e212 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x116>
		{
			uint32_t i;             /* index of transmitting message */

			/* first buffer */
			CO_CANtx_t *buffer = &CAN_Module->txArray[0];
    e144:	687b      	ldr	r3, [r7, #4]
    e146:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    e14a:	68db      	ldr	r3, [r3, #12]
    e14c:	60bb      	str	r3, [r7, #8]
			/* search through whole array of pointers to transmit message buffers. */
			for(i = CAN_Module->txSize; i > 0U; i--)
    e14e:	687b      	ldr	r3, [r7, #4]
    e150:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    e154:	691b      	ldr	r3, [r3, #16]
    e156:	60fb      	str	r3, [r7, #12]
    e158:	68fb      	ldr	r3, [r7, #12]
    e15a:	2b00      	cmp	r3, #0
    e15c:	d051      	beq.n	e202 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x106>
			{
				/* if message buffer is full, send it. */
				if(buffer->bufferFull)
    e15e:	68bb      	ldr	r3, [r7, #8]
    e160:	7b5b      	ldrb	r3, [r3, #13]
    e162:	b2db      	uxtb	r3, r3
    e164:	2b00      	cmp	r3, #0
    e166:	bf14      	ite	ne
    e168:	2301      	movne	r3, #1
    e16a:	2300      	moveq	r3, #0
    e16c:	b2db      	uxtb	r3, r3
    e16e:	2b00      	cmp	r3, #0
    e170:	d03f      	beq.n	e1f2 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0xf6>
				{

					/* Copy message to CAN buffer */
					CAN_Module->bufferInhibitFlag = buffer->syncFlag;
    e172:	687b      	ldr	r3, [r7, #4]
    e174:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    e178:	68ba      	ldr	r2, [r7, #8]
    e17a:	7b92      	ldrb	r2, [r2, #14]
    e17c:	b2d2      	uxtb	r2, r2
    e17e:	759a      	strb	r2, [r3, #22]

					

					PrepareTxMessage(&msgHeader, buffer);
    e180:	687b      	ldr	r3, [r7, #4]
    e182:	3378      	adds	r3, #120	; 0x78
    e184:	68ba      	ldr	r2, [r7, #8]
    e186:	4619      	mov	r1, r3
    e188:	6878      	ldr	r0, [r7, #4]
    e18a:	4b26      	ldr	r3, [pc, #152]	; (e224 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x128>)
    e18c:	4798      	blx	r3
					can_async_register_callback(canDescr, CAN_ASYNC_TX_CB, (FUNC_PTR)CO_tx_callback);
    e18e:	687b      	ldr	r3, [r7, #4]
    e190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    e194:	4a24      	ldr	r2, [pc, #144]	; (e228 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x12c>)
    e196:	2101      	movs	r1, #1
    e198:	4618      	mov	r0, r3
    e19a:	4b24      	ldr	r3, [pc, #144]	; (e22c <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x130>)
    e19c:	4798      	blx	r3
					can_async_enable(canDescr);
    e19e:	687b      	ldr	r3, [r7, #4]
    e1a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    e1a4:	4618      	mov	r0, r3
    e1a6:	4b22      	ldr	r3, [pc, #136]	; (e230 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x134>)
    e1a8:	4798      	blx	r3
					receivedtxCOCallback=false;
    e1aa:	687b      	ldr	r3, [r7, #4]
    e1ac:	2200      	movs	r2, #0
    e1ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					HalCanErrorCode=can_async_write(canDescr, &msgHeader);
    e1b2:	687b      	ldr	r3, [r7, #4]
    e1b4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    e1b8:	687b      	ldr	r3, [r7, #4]
    e1ba:	3378      	adds	r3, #120	; 0x78
    e1bc:	4619      	mov	r1, r3
    e1be:	4610      	mov	r0, r2
    e1c0:	4b1c      	ldr	r3, [pc, #112]	; (e234 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x138>)
    e1c2:	4798      	blx	r3
    e1c4:	4603      	mov	r3, r0
    e1c6:	461a      	mov	r2, r3
    e1c8:	687b      	ldr	r3, [r7, #4]
    e1ca:	61da      	str	r2, [r3, #28]
					if( HalCanErrorCode != CO_ERROR_NO)
    e1cc:	687b      	ldr	r3, [r7, #4]
    e1ce:	69db      	ldr	r3, [r3, #28]
    e1d0:	2b00      	cmp	r3, #0
    e1d2:	bf14      	ite	ne
    e1d4:	2301      	movne	r3, #1
    e1d6:	2300      	moveq	r3, #0
    e1d8:	b2db      	uxtb	r3, r3
    e1da:	2b00      	cmp	r3, #0
    e1dc:	d110      	bne.n	e200 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x104>
					{
						;//do nothing
					}
					else
					{
						buffer->bufferFull = false;
    e1de:	68bb      	ldr	r3, [r7, #8]
    e1e0:	2200      	movs	r2, #0
    e1e2:	735a      	strb	r2, [r3, #13]
						CAN_Module->CANtxCount--;
    e1e4:	687b      	ldr	r3, [r7, #4]
    e1e6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    e1ea:	699a      	ldr	r2, [r3, #24]
    e1ec:	3a01      	subs	r2, #1
    e1ee:	619a      	str	r2, [r3, #24]
					}

					break;                      /* exit for loop */
    e1f0:	e006      	b.n	e200 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x104>
				}
				else
				{
					/*do nothing*/;
				}
				buffer++;
    e1f2:	68bb      	ldr	r3, [r7, #8]
    e1f4:	3310      	adds	r3, #16
    e1f6:	60bb      	str	r3, [r7, #8]
			for(i = CAN_Module->txSize; i > 0U; i--)
    e1f8:	68fb      	ldr	r3, [r7, #12]
    e1fa:	3b01      	subs	r3, #1
    e1fc:	60fb      	str	r3, [r7, #12]
    e1fe:	e7ab      	b.n	e158 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x5c>
					break;                      /* exit for loop */
    e200:	bf00      	nop
			}/* end of for loop */

			/* Clear counter if no more messages */
			if(i == 0U)
    e202:	68fb      	ldr	r3, [r7, #12]
    e204:	2b00      	cmp	r3, #0
    e206:	d104      	bne.n	e212 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x116>
			{
				CAN_Module->CANtxCount = 0U;
    e208:	687b      	ldr	r3, [r7, #4]
    e20a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    e20e:	2200      	movs	r2, #0
    e210:	619a      	str	r2, [r3, #24]
			{
				/*do nothing*/;
			}
		}
	}
}
    e212:	bf00      	nop
    e214:	3710      	adds	r7, #16
    e216:	46bd      	mov	sp, r7
    e218:	bd80      	pop	{r7, pc}
    e21a:	bf00      	nop
    e21c:	42000400 	.word	0x42000400
    e220:	0000d675 	.word	0x0000d675
    e224:	0000d811 	.word	0x0000d811
    e228:	0000d729 	.word	0x0000d729
    e22c:	00001b11 	.word	0x00001b11
    e230:	00001a3d 	.word	0x00001a3d
    e234:	00001ac5 	.word	0x00001ac5

0000e238 <_ZN18CO_Emergency_ClassC1Ev>:
#include "CO_Driver_Class.h"

CO_Emergency_Class	*ptrCOEMClass;

// default constructor
CO_Emergency_Class::CO_Emergency_Class()
    e238:	b580      	push	{r7, lr}
    e23a:	b082      	sub	sp, #8
    e23c:	af00      	add	r7, sp, #0
    e23e:	6078      	str	r0, [r7, #4]
    e240:	687b      	ldr	r3, [r7, #4]
    e242:	4618      	mov	r0, r3
    e244:	4b04      	ldr	r3, [pc, #16]	; (e258 <_ZN18CO_Emergency_ClassC1Ev+0x20>)
    e246:	4798      	blx	r3
{
	ptrCOEMClass=this;
    e248:	4a04      	ldr	r2, [pc, #16]	; (e25c <_ZN18CO_Emergency_ClassC1Ev+0x24>)
    e24a:	687b      	ldr	r3, [r7, #4]
    e24c:	6013      	str	r3, [r2, #0]
} //CO_Emergency_Class
    e24e:	687b      	ldr	r3, [r7, #4]
    e250:	4618      	mov	r0, r3
    e252:	3708      	adds	r7, #8
    e254:	46bd      	mov	sp, r7
    e256:	bd80      	pop	{r7, pc}
    e258:	000106c1 	.word	0x000106c1
    e25c:	20001a80 	.word	0x20001a80

0000e260 <_ZN18CO_Emergency_ClassD1Ev>:

// default destructor
CO_Emergency_Class::~CO_Emergency_Class()
    e260:	b580      	push	{r7, lr}
    e262:	b082      	sub	sp, #8
    e264:	af00      	add	r7, sp, #0
    e266:	6078      	str	r0, [r7, #4]
    e268:	687b      	ldr	r3, [r7, #4]
    e26a:	4618      	mov	r0, r3
    e26c:	4b03      	ldr	r3, [pc, #12]	; (e27c <_ZN18CO_Emergency_ClassD1Ev+0x1c>)
    e26e:	4798      	blx	r3
{
} //~CO_Emergency_Class
    e270:	687b      	ldr	r3, [r7, #4]
    e272:	4618      	mov	r0, r3
    e274:	3708      	adds	r7, #8
    e276:	46bd      	mov	sp, r7
    e278:	bd80      	pop	{r7, pc}
    e27a:	bf00      	nop
    e27c:	000106e9 	.word	0x000106e9

0000e280 <_ZL11CO_ODF_1003P12CO_ODF_arg_t>:
 * Function for accessing _Pre-Defined Error Field_ (index 0x1003) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */

static   CO_SDO_abortCode_t CO_ODF_1003(CO_ODF_arg_t *ODF_arg){
    e280:	b480      	push	{r7}
    e282:	b087      	sub	sp, #28
    e284:	af00      	add	r7, sp, #0
    e286:	6078      	str	r0, [r7, #4]
    
    uint8_t value;
	CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
    e288:	2300      	movs	r3, #0
    e28a:	617b      	str	r3, [r7, #20]

    CO_EMpr_t *emPr = (CO_EMpr_t*) ODF_arg->object;
    e28c:	687b      	ldr	r3, [r7, #4]
    e28e:	681b      	ldr	r3, [r3, #0]
    e290:	613b      	str	r3, [r7, #16]
    value = ODF_arg->data[0];
    e292:	687b      	ldr	r3, [r7, #4]
    e294:	685b      	ldr	r3, [r3, #4]
    e296:	781b      	ldrb	r3, [r3, #0]
    e298:	73fb      	strb	r3, [r7, #15]

    if(ODF_arg->reading){
    e29a:	687b      	ldr	r3, [r7, #4]
    e29c:	7f5b      	ldrb	r3, [r3, #29]
    e29e:	2b00      	cmp	r3, #0
    e2a0:	d017      	beq.n	e2d2 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x52>
        uint8_t noOfErrors;
        noOfErrors = emPr->preDefErrNoOfErrors;
    e2a2:	693b      	ldr	r3, [r7, #16]
    e2a4:	7a5b      	ldrb	r3, [r3, #9]
    e2a6:	73bb      	strb	r3, [r7, #14]

        if(ODF_arg->subIndex == 0U){
    e2a8:	687b      	ldr	r3, [r7, #4]
    e2aa:	7f1b      	ldrb	r3, [r3, #28]
    e2ac:	2b00      	cmp	r3, #0
    e2ae:	d104      	bne.n	e2ba <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x3a>
            ODF_arg->data[0] = noOfErrors;
    e2b0:	687b      	ldr	r3, [r7, #4]
    e2b2:	685b      	ldr	r3, [r3, #4]
    e2b4:	7bba      	ldrb	r2, [r7, #14]
    e2b6:	701a      	strb	r2, [r3, #0]
    e2b8:	e01b      	b.n	e2f2 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
        }
        else if(ODF_arg->subIndex > noOfErrors){
    e2ba:	687b      	ldr	r3, [r7, #4]
    e2bc:	7f1b      	ldrb	r3, [r3, #28]
    e2be:	461a      	mov	r2, r3
    e2c0:	7bbb      	ldrb	r3, [r7, #14]
    e2c2:	429a      	cmp	r2, r3
    e2c4:	dd02      	ble.n	e2cc <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x4c>
            ret = CO_SDO_AB_NO_DATA;
    e2c6:	4b0e      	ldr	r3, [pc, #56]	; (e300 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x80>)
    e2c8:	617b      	str	r3, [r7, #20]
    e2ca:	e012      	b.n	e2f2 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
        }
        else{
            ret = CO_SDO_AB_NONE;
    e2cc:	2300      	movs	r3, #0
    e2ce:	617b      	str	r3, [r7, #20]
    e2d0:	e00f      	b.n	e2f2 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
        }
    }
    else{
        /* only '0' may be written to subIndex 0 */
        if(ODF_arg->subIndex == 0U){
    e2d2:	687b      	ldr	r3, [r7, #4]
    e2d4:	7f1b      	ldrb	r3, [r3, #28]
    e2d6:	2b00      	cmp	r3, #0
    e2d8:	d109      	bne.n	e2ee <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x6e>
            if(value == 0U){
    e2da:	7bfb      	ldrb	r3, [r7, #15]
    e2dc:	2b00      	cmp	r3, #0
    e2de:	d103      	bne.n	e2e8 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x68>
                emPr->preDefErrNoOfErrors = 0U;
    e2e0:	693b      	ldr	r3, [r7, #16]
    e2e2:	2200      	movs	r2, #0
    e2e4:	725a      	strb	r2, [r3, #9]
    e2e6:	e004      	b.n	e2f2 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
            }
            else{
                ret = CO_SDO_AB_INVALID_VALUE;
    e2e8:	4b06      	ldr	r3, [pc, #24]	; (e304 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x84>)
    e2ea:	617b      	str	r3, [r7, #20]
    e2ec:	e001      	b.n	e2f2 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
            }
        }
        else{
            ret = CO_SDO_AB_READONLY;
    e2ee:	4b06      	ldr	r3, [pc, #24]	; (e308 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x88>)
    e2f0:	617b      	str	r3, [r7, #20]
        }
    }

    return ret;
    e2f2:	697b      	ldr	r3, [r7, #20]
}
    e2f4:	4618      	mov	r0, r3
    e2f6:	371c      	adds	r7, #28
    e2f8:	46bd      	mov	sp, r7
    e2fa:	bc80      	pop	{r7}
    e2fc:	4770      	bx	lr
    e2fe:	bf00      	nop
    e300:	08000024 	.word	0x08000024
    e304:	06090030 	.word	0x06090030
    e308:	06010002 	.word	0x06010002

0000e30c <_ZL11CO_ODF_1014P12CO_ODF_arg_t>:
 * Function for accessing _COB ID EMCY_ (index 0x1014) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */

static  CO_SDO_abortCode_t CO_ODF_1014(CO_ODF_arg_t *ODF_arg){
    e30c:	b580      	push	{r7, lr}
    e30e:	b086      	sub	sp, #24
    e310:	af00      	add	r7, sp, #0
    e312:	6078      	str	r0, [r7, #4]
    uint8_t *nodeId;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
    e314:	2300      	movs	r3, #0
    e316:	617b      	str	r3, [r7, #20]
    nodeId = (uint8_t*) ODF_arg->object;
    e318:	687b      	ldr	r3, [r7, #4]
    e31a:	681b      	ldr	r3, [r3, #0]
    e31c:	613b      	str	r3, [r7, #16]
    value =ptrCOEMClass->CO_getUint32(ODF_arg->data);
    e31e:	4b10      	ldr	r3, [pc, #64]	; (e360 <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x54>)
    e320:	681b      	ldr	r3, [r3, #0]
    e322:	461a      	mov	r2, r3
    e324:	687b      	ldr	r3, [r7, #4]
    e326:	685b      	ldr	r3, [r3, #4]
    e328:	4619      	mov	r1, r3
    e32a:	4610      	mov	r0, r2
    e32c:	4b0d      	ldr	r3, [pc, #52]	; (e364 <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x58>)
    e32e:	4798      	blx	r3
    e330:	60f8      	str	r0, [r7, #12]

    /* add nodeId to the value */
    if(ODF_arg->reading){
    e332:	687b      	ldr	r3, [r7, #4]
    e334:	7f5b      	ldrb	r3, [r3, #29]
    e336:	2b00      	cmp	r3, #0
    e338:	d00c      	beq.n	e354 <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x48>
        ptrCOEMClass->CO_setUint32(ODF_arg->data, value + *nodeId);
    e33a:	4b09      	ldr	r3, [pc, #36]	; (e360 <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x54>)
    e33c:	681b      	ldr	r3, [r3, #0]
    e33e:	4618      	mov	r0, r3
    e340:	687b      	ldr	r3, [r7, #4]
    e342:	6859      	ldr	r1, [r3, #4]
    e344:	693b      	ldr	r3, [r7, #16]
    e346:	781b      	ldrb	r3, [r3, #0]
    e348:	461a      	mov	r2, r3
    e34a:	68fb      	ldr	r3, [r7, #12]
    e34c:	4413      	add	r3, r2
    e34e:	461a      	mov	r2, r3
    e350:	4b05      	ldr	r3, [pc, #20]	; (e368 <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x5c>)
    e352:	4798      	blx	r3
    }

    return ret;
    e354:	697b      	ldr	r3, [r7, #20]
}
    e356:	4618      	mov	r0, r3
    e358:	3718      	adds	r7, #24
    e35a:	46bd      	mov	sp, r7
    e35c:	bd80      	pop	{r7, pc}
    e35e:	bf00      	nop
    e360:	20001a80 	.word	0x20001a80
    e364:	00010741 	.word	0x00010741
    e368:	00010775 	.word	0x00010775

0000e36c <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm>:
        uint32_t               *preDefErr,
        uint8_t                 preDefErrSize,
        CO_CANmodule_t         *CANdev,
        uint32_t                CANdevTxIdx,
        uint32_t                CANidTxEM)
{
    e36c:	b590      	push	{r4, r7, lr}
    e36e:	b089      	sub	sp, #36	; 0x24
    e370:	af02      	add	r7, sp, #8
    e372:	60f8      	str	r0, [r7, #12]
    e374:	60b9      	str	r1, [r7, #8]
    e376:	607a      	str	r2, [r7, #4]
    e378:	603b      	str	r3, [r7, #0]
    uint8_t i;

    /* verify arguments */
    if(em==NULL || emPr==NULL || SDO==NULL || errorStatusBits==NULL ||
    e37a:	68bb      	ldr	r3, [r7, #8]
    e37c:	2b00      	cmp	r3, #0
    e37e:	d015      	beq.n	e3ac <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
    e380:	687b      	ldr	r3, [r7, #4]
    e382:	2b00      	cmp	r3, #0
    e384:	d012      	beq.n	e3ac <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
    e386:	683b      	ldr	r3, [r7, #0]
    e388:	2b00      	cmp	r3, #0
    e38a:	d00f      	beq.n	e3ac <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
    e38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e38e:	2b00      	cmp	r3, #0
    e390:	d00c      	beq.n	e3ac <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
    e392:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    e396:	2b05      	cmp	r3, #5
    e398:	d908      	bls.n	e3ac <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
        errorStatusBitsSize<6U || errorRegister==NULL || preDefErr==NULL || CANdev==NULL){
    e39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e39c:	2b00      	cmp	r3, #0
    e39e:	d005      	beq.n	e3ac <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
    e3a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e3a2:	2b00      	cmp	r3, #0
    e3a4:	d002      	beq.n	e3ac <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
    e3a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e3a8:	2b00      	cmp	r3, #0
    e3aa:	d102      	bne.n	e3b2 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x46>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    e3ac:	f04f 33ff 	mov.w	r3, #4294967295
    e3b0:	e072      	b.n	e498 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x12c>
    }

    /* Configure object variables */
    em->errorStatusBits         = errorStatusBits;
    e3b2:	68bb      	ldr	r3, [r7, #8]
    e3b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    e3b6:	601a      	str	r2, [r3, #0]
    em->errorStatusBitsSize     = errorStatusBitsSize;
    e3b8:	68bb      	ldr	r3, [r7, #8]
    e3ba:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
    e3be:	711a      	strb	r2, [r3, #4]
    em->bufEnd                  = em->buf + (CO_EM_INTERNAL_BUFFER_SIZE * 8);
    e3c0:	68bb      	ldr	r3, [r7, #8]
    e3c2:	3305      	adds	r3, #5
    e3c4:	f103 0250 	add.w	r2, r3, #80	; 0x50
    e3c8:	68bb      	ldr	r3, [r7, #8]
    e3ca:	659a      	str	r2, [r3, #88]	; 0x58
    em->bufWritePtr             = em->buf;
    e3cc:	68bb      	ldr	r3, [r7, #8]
    e3ce:	1d5a      	adds	r2, r3, #5
    e3d0:	68bb      	ldr	r3, [r7, #8]
    e3d2:	65da      	str	r2, [r3, #92]	; 0x5c
    em->bufReadPtr              = em->buf;
    e3d4:	68bb      	ldr	r3, [r7, #8]
    e3d6:	1d5a      	adds	r2, r3, #5
    e3d8:	68bb      	ldr	r3, [r7, #8]
    e3da:	661a      	str	r2, [r3, #96]	; 0x60
    em->bufFull                 = 0U;
    e3dc:	68bb      	ldr	r3, [r7, #8]
    e3de:	2200      	movs	r2, #0
    e3e0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    em->wrongErrorReport        = 0U;
    e3e4:	68bb      	ldr	r3, [r7, #8]
    e3e6:	2200      	movs	r2, #0
    e3e8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    em->handler            = NULL;
    e3ec:	68bb      	ldr	r3, [r7, #8]
    e3ee:	2200      	movs	r2, #0
    e3f0:	669a      	str	r2, [r3, #104]	; 0x68
    emPr->em                    = em;
    e3f2:	687b      	ldr	r3, [r7, #4]
    e3f4:	68ba      	ldr	r2, [r7, #8]
    e3f6:	611a      	str	r2, [r3, #16]
    emPr->errorRegister         = errorRegister;
    e3f8:	687b      	ldr	r3, [r7, #4]
    e3fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    e3fc:	601a      	str	r2, [r3, #0]
    emPr->preDefErr             = preDefErr;
    e3fe:	687b      	ldr	r3, [r7, #4]
    e400:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    e402:	605a      	str	r2, [r3, #4]
    emPr->preDefErrSize         = preDefErrSize;
    e404:	687b      	ldr	r3, [r7, #4]
    e406:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
    e40a:	721a      	strb	r2, [r3, #8]
    emPr->preDefErrNoOfErrors   = 0U;
    e40c:	687b      	ldr	r3, [r7, #4]
    e40e:	2200      	movs	r2, #0
    e410:	725a      	strb	r2, [r3, #9]
    emPr->inhibitEmTimer        = 0U;
    e412:	687b      	ldr	r3, [r7, #4]
    e414:	2200      	movs	r2, #0
    e416:	60da      	str	r2, [r3, #12]
 
    /* clear error status bits */
    for(i=0U; i<errorStatusBitsSize; i++){
    e418:	2300      	movs	r3, #0
    e41a:	75fb      	strb	r3, [r7, #23]
    e41c:	7dfa      	ldrb	r2, [r7, #23]
    e41e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    e422:	429a      	cmp	r2, r3
    e424:	da09      	bge.n	e43a <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0xce>
        em->errorStatusBits[i] = 0U;
    e426:	68bb      	ldr	r3, [r7, #8]
    e428:	681a      	ldr	r2, [r3, #0]
    e42a:	7dfb      	ldrb	r3, [r7, #23]
    e42c:	4413      	add	r3, r2
    e42e:	2200      	movs	r2, #0
    e430:	701a      	strb	r2, [r3, #0]
    for(i=0U; i<errorStatusBitsSize; i++){
    e432:	7dfb      	ldrb	r3, [r7, #23]
    e434:	3301      	adds	r3, #1
    e436:	75fb      	strb	r3, [r7, #23]
    e438:	e7f0      	b.n	e41c <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0xb0>
    }

    /* Configure Object dictionary entry at index 0x1003 and 0x1014 */
    CO_OD_configure( OD_H1003_PREDEF_ERR_FIELD,CO_ODF_1003, (void*)emPr, 0, 0U);
    e43a:	68f8      	ldr	r0, [r7, #12]
    e43c:	2300      	movs	r3, #0
    e43e:	9301      	str	r3, [sp, #4]
    e440:	2300      	movs	r3, #0
    e442:	9300      	str	r3, [sp, #0]
    e444:	687b      	ldr	r3, [r7, #4]
    e446:	4a16      	ldr	r2, [pc, #88]	; (e4a0 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x134>)
    e448:	f241 0103 	movw	r1, #4099	; 0x1003
    e44c:	4c15      	ldr	r4, [pc, #84]	; (e4a4 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x138>)
    e44e:	47a0      	blx	r4
    CO_OD_configure( OD_H1014_COBID_EMERGENCY,CO_ODF_1014, (void*)&SDO->nodeId, 0, 0U);
    e450:	68f8      	ldr	r0, [r7, #12]
    e452:	683b      	ldr	r3, [r7, #0]
    e454:	f103 0268 	add.w	r2, r3, #104	; 0x68
    e458:	2300      	movs	r3, #0
    e45a:	9301      	str	r3, [sp, #4]
    e45c:	2300      	movs	r3, #0
    e45e:	9300      	str	r3, [sp, #0]
    e460:	4613      	mov	r3, r2
    e462:	4a11      	ldr	r2, [pc, #68]	; (e4a8 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x13c>)
    e464:	f241 0114 	movw	r1, #4116	; 0x1014
    e468:	4c0e      	ldr	r4, [pc, #56]	; (e4a4 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x138>)
    e46a:	47a0      	blx	r4

    /* configure emergency message CAN transmission */
    emPr->CANdev = CANdev;
    e46c:	687b      	ldr	r3, [r7, #4]
    e46e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    e470:	615a      	str	r2, [r3, #20]
    emPr->CANdev->em = (void*)em; /* update pointer inside CAN device. */
    e472:	687b      	ldr	r3, [r7, #4]
    e474:	695b      	ldr	r3, [r3, #20]
    e476:	68ba      	ldr	r2, [r7, #8]
    e478:	621a      	str	r2, [r3, #32]
    emPr->CANtxBuff =ptrCODriverClass->CAN_Tx_BufferInit(
    e47a:	4b0c      	ldr	r3, [pc, #48]	; (e4ac <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x140>)
    e47c:	6818      	ldr	r0, [r3, #0]
    e47e:	2300      	movs	r3, #0
    e480:	9301      	str	r3, [sp, #4]
    e482:	2308      	movs	r3, #8
    e484:	9300      	str	r3, [sp, #0]
    e486:	2300      	movs	r3, #0
    e488:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    e48a:	6c39      	ldr	r1, [r7, #64]	; 0x40
    e48c:	4c08      	ldr	r4, [pc, #32]	; (e4b0 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x144>)
    e48e:	47a0      	blx	r4
    e490:	4602      	mov	r2, r0
    e492:	687b      	ldr	r3, [r7, #4]
    e494:	619a      	str	r2, [r3, #24]
            CANidTxEM,          /* CAN identifier */
            0,                  /* rtr */
            8U,                  /* number of data bytes */
            0);                 /* synchronous message flag bit */

    return CO_ERROR_NO;
    e496:	2300      	movs	r3, #0
}
    e498:	4618      	mov	r0, r3
    e49a:	371c      	adds	r7, #28
    e49c:	46bd      	mov	sp, r7
    e49e:	bd90      	pop	{r4, r7, pc}
    e4a0:	0000e281 	.word	0x0000e281
    e4a4:	00010b91 	.word	0x00010b91
    e4a8:	0000e30d 	.word	0x0000e30d
    e4ac:	20001a7c 	.word	0x20001a7c
    e4b0:	0000db71 	.word	0x0000db71

0000e4b4 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm>:
void CO_Emergency_Class::EM_process(
        CO_EMpr_t              *emPr,
        bool_t                  NMTisPreOrOperational,
        uint32_t                timeDifference_100us,
        uint32_t                emInhTime)
{
    e4b4:	b590      	push	{r4, r7, lr}
    e4b6:	b08b      	sub	sp, #44	; 0x2c
    e4b8:	af02      	add	r7, sp, #8
    e4ba:	60f8      	str	r0, [r7, #12]
    e4bc:	60b9      	str	r1, [r7, #8]
    e4be:	603b      	str	r3, [r7, #0]
    e4c0:	4613      	mov	r3, r2
    e4c2:	71fb      	strb	r3, [r7, #7]

    CO_EM_t *em = emPr->em;
    e4c4:	68bb      	ldr	r3, [r7, #8]
    e4c6:	691b      	ldr	r3, [r3, #16]
    e4c8:	61bb      	str	r3, [r7, #24]
    uint8_t errorRegister;

    /* verify errors from driver and other */
   ptrCODriverClass->CAN_VerifyErrors();
    e4ca:	4b74      	ldr	r3, [pc, #464]	; (e69c <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1e8>)
    e4cc:	681b      	ldr	r3, [r3, #0]
    e4ce:	4618      	mov	r0, r3
    e4d0:	4b73      	ldr	r3, [pc, #460]	; (e6a0 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1ec>)
    e4d2:	4798      	blx	r3
    if(em->wrongErrorReport != 0U){
    e4d4:	69bb      	ldr	r3, [r7, #24]
    e4d6:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
    e4da:	2b00      	cmp	r3, #0
    e4dc:	d00e      	beq.n	e4fc <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x48>
        EM_ErrorReport(em, CO_EM_WRONG_ERROR_REPORT, CO_EMC_SOFTWARE_INTERNAL, (uint32_t)em->wrongErrorReport);
    e4de:	69bb      	ldr	r3, [r7, #24]
    e4e0:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
    e4e4:	9300      	str	r3, [sp, #0]
    e4e6:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
    e4ea:	2228      	movs	r2, #40	; 0x28
    e4ec:	69b9      	ldr	r1, [r7, #24]
    e4ee:	68f8      	ldr	r0, [r7, #12]
    e4f0:	4c6c      	ldr	r4, [pc, #432]	; (e6a4 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1f0>)
    e4f2:	47a0      	blx	r4
        em->wrongErrorReport = 0U;
    e4f4:	69bb      	ldr	r3, [r7, #24]
    e4f6:	2200      	movs	r2, #0
    e4f8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    }


    /* calculate Error register */
    errorRegister = 0U;
    e4fc:	2300      	movs	r3, #0
    e4fe:	77fb      	strb	r3, [r7, #31]
    /* generic error */
    if(em->errorStatusBits[5]){
    e500:	69bb      	ldr	r3, [r7, #24]
    e502:	681b      	ldr	r3, [r3, #0]
    e504:	3305      	adds	r3, #5
    e506:	781b      	ldrb	r3, [r3, #0]
    e508:	2b00      	cmp	r3, #0
    e50a:	d003      	beq.n	e514 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x60>
        errorRegister |= CO_ERR_REG_GENERIC_ERR;
    e50c:	7ffb      	ldrb	r3, [r7, #31]
    e50e:	f043 0301 	orr.w	r3, r3, #1
    e512:	77fb      	strb	r3, [r7, #31]
    }
    /* communication error (overrun, error state) */
    if(em->errorStatusBits[2] || em->errorStatusBits[3]){
    e514:	69bb      	ldr	r3, [r7, #24]
    e516:	681b      	ldr	r3, [r3, #0]
    e518:	3302      	adds	r3, #2
    e51a:	781b      	ldrb	r3, [r3, #0]
    e51c:	2b00      	cmp	r3, #0
    e51e:	d105      	bne.n	e52c <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x78>
    e520:	69bb      	ldr	r3, [r7, #24]
    e522:	681b      	ldr	r3, [r3, #0]
    e524:	3303      	adds	r3, #3
    e526:	781b      	ldrb	r3, [r3, #0]
    e528:	2b00      	cmp	r3, #0
    e52a:	d003      	beq.n	e534 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x80>
        errorRegister |= CO_ERR_REG_COMM_ERR;
    e52c:	7ffb      	ldrb	r3, [r7, #31]
    e52e:	f043 0310 	orr.w	r3, r3, #16
    e532:	77fb      	strb	r3, [r7, #31]
    }
    *emPr->errorRegister = (*emPr->errorRegister & 0xEEU) | errorRegister;
    e534:	68bb      	ldr	r3, [r7, #8]
    e536:	681b      	ldr	r3, [r3, #0]
    e538:	68ba      	ldr	r2, [r7, #8]
    e53a:	6812      	ldr	r2, [r2, #0]
    e53c:	7812      	ldrb	r2, [r2, #0]
    e53e:	f022 0211 	bic.w	r2, r2, #17
    e542:	b2d1      	uxtb	r1, r2
    e544:	7ffa      	ldrb	r2, [r7, #31]
    e546:	430a      	orrs	r2, r1
    e548:	b2d2      	uxtb	r2, r2
    e54a:	701a      	strb	r2, [r3, #0]

    /* inhibit time */
    if(emPr->inhibitEmTimer < emInhTime){
    e54c:	68bb      	ldr	r3, [r7, #8]
    e54e:	68da      	ldr	r2, [r3, #12]
    e550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e552:	429a      	cmp	r2, r3
    e554:	d205      	bcs.n	e562 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0xae>
        emPr->inhibitEmTimer += timeDifference_100us;
    e556:	68bb      	ldr	r3, [r7, #8]
    e558:	68da      	ldr	r2, [r3, #12]
    e55a:	683b      	ldr	r3, [r7, #0]
    e55c:	441a      	add	r2, r3
    e55e:	68bb      	ldr	r3, [r7, #8]
    e560:	60da      	str	r2, [r3, #12]
    }

    /* send Emergency message. */
    if(     NMTisPreOrOperational &&
            !emPr->CANtxBuff->bufferFull &&
            emPr->inhibitEmTimer >= emInhTime &&
    e562:	79fb      	ldrb	r3, [r7, #7]
    e564:	2b00      	cmp	r3, #0
    e566:	d017      	beq.n	e598 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0xe4>
            !emPr->CANtxBuff->bufferFull &&
    e568:	68bb      	ldr	r3, [r7, #8]
    e56a:	699b      	ldr	r3, [r3, #24]
    e56c:	7b5b      	ldrb	r3, [r3, #13]
    e56e:	b2db      	uxtb	r3, r3
    if(     NMTisPreOrOperational &&
    e570:	2b00      	cmp	r3, #0
    e572:	d111      	bne.n	e598 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0xe4>
            emPr->inhibitEmTimer >= emInhTime &&
    e574:	68bb      	ldr	r3, [r7, #8]
    e576:	68da      	ldr	r2, [r3, #12]
            !emPr->CANtxBuff->bufferFull &&
    e578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e57a:	429a      	cmp	r2, r3
    e57c:	d30c      	bcc.n	e598 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0xe4>
            (em->bufReadPtr != em->bufWritePtr || em->bufFull))
    e57e:	69bb      	ldr	r3, [r7, #24]
    e580:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    e582:	69bb      	ldr	r3, [r7, #24]
    e584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
            emPr->inhibitEmTimer >= emInhTime &&
    e586:	429a      	cmp	r2, r3
    e588:	d104      	bne.n	e594 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0xe0>
            (em->bufReadPtr != em->bufWritePtr || em->bufFull))
    e58a:	69bb      	ldr	r3, [r7, #24]
    e58c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
    e590:	2b00      	cmp	r3, #0
    e592:	d001      	beq.n	e598 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0xe4>
            emPr->inhibitEmTimer >= emInhTime &&
    e594:	2301      	movs	r3, #1
    e596:	e000      	b.n	e59a <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0xe6>
    e598:	2300      	movs	r3, #0
    if(     NMTisPreOrOperational &&
    e59a:	2b00      	cmp	r3, #0
    e59c:	d079      	beq.n	e692 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1de>
    {
        uint32_t preDEF;    /* preDefinedErrorField */
        
        /* add error register */
        em->bufReadPtr[2] = *emPr->errorRegister;
    e59e:	69bb      	ldr	r3, [r7, #24]
    e5a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    e5a2:	3302      	adds	r3, #2
    e5a4:	68ba      	ldr	r2, [r7, #8]
    e5a6:	6812      	ldr	r2, [r2, #0]
    e5a8:	7812      	ldrb	r2, [r2, #0]
    e5aa:	701a      	strb	r2, [r3, #0]

        /* copy data to CAN emergency message */
        CO_memcpy(emPr->CANtxBuff->data, em->bufReadPtr, 8U);
    e5ac:	68f8      	ldr	r0, [r7, #12]
    e5ae:	68bb      	ldr	r3, [r7, #8]
    e5b0:	699b      	ldr	r3, [r3, #24]
    e5b2:	1d59      	adds	r1, r3, #5
    e5b4:	69bb      	ldr	r3, [r7, #24]
    e5b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    e5b8:	2308      	movs	r3, #8
    e5ba:	4c3b      	ldr	r4, [pc, #236]	; (e6a8 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1f4>)
    e5bc:	47a0      	blx	r4
        CO_memcpy((uint8_t*)&preDEF, em->bufReadPtr, 4U);
    e5be:	68f8      	ldr	r0, [r7, #12]
    e5c0:	69bb      	ldr	r3, [r7, #24]
    e5c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    e5c4:	f107 0114 	add.w	r1, r7, #20
    e5c8:	2304      	movs	r3, #4
    e5ca:	4c37      	ldr	r4, [pc, #220]	; (e6a8 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1f4>)
    e5cc:	47a0      	blx	r4
        em->bufReadPtr += 8;
    e5ce:	69bb      	ldr	r3, [r7, #24]
    e5d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    e5d2:	f103 0208 	add.w	r2, r3, #8
    e5d6:	69bb      	ldr	r3, [r7, #24]
    e5d8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Update read buffer pointer and reset inhibit timer */
        if(em->bufReadPtr == em->bufEnd){
    e5da:	69bb      	ldr	r3, [r7, #24]
    e5dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    e5de:	69bb      	ldr	r3, [r7, #24]
    e5e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    e5e2:	429a      	cmp	r2, r3
    e5e4:	d103      	bne.n	e5ee <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x13a>
            em->bufReadPtr = em->buf;
    e5e6:	69bb      	ldr	r3, [r7, #24]
    e5e8:	1d5a      	adds	r2, r3, #5
    e5ea:	69bb      	ldr	r3, [r7, #24]
    e5ec:	661a      	str	r2, [r3, #96]	; 0x60
        }
        emPr->inhibitEmTimer = 0U;
    e5ee:	68bb      	ldr	r3, [r7, #8]
    e5f0:	2200      	movs	r2, #0
    e5f2:	60da      	str	r2, [r3, #12]

        /* verify message buffer overflow, then clear full flag */
        if(em->bufFull == 2U){
    e5f4:	69bb      	ldr	r3, [r7, #24]
    e5f6:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
    e5fa:	2b02      	cmp	r3, #2
    e5fc:	d10d      	bne.n	e61a <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x166>
            em->bufFull = 0U;    /* will be updated below */
    e5fe:	69bb      	ldr	r3, [r7, #24]
    e600:	2200      	movs	r2, #0
    e602:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
            EM_ErrorReport(em, CO_EM_EMERGENCY_BUFFER_FULL, CO_EMC_GENERIC, 0U);
    e606:	2300      	movs	r3, #0
    e608:	9300      	str	r3, [sp, #0]
    e60a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    e60e:	2220      	movs	r2, #32
    e610:	69b9      	ldr	r1, [r7, #24]
    e612:	68f8      	ldr	r0, [r7, #12]
    e614:	4c23      	ldr	r4, [pc, #140]	; (e6a4 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1f0>)
    e616:	47a0      	blx	r4
    e618:	e003      	b.n	e622 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x16e>
        }
        else{
            em->bufFull = 0;
    e61a:	69bb      	ldr	r3, [r7, #24]
    e61c:	2200      	movs	r2, #0
    e61e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        }

        /* write to 'pre-defined error field' (object dictionary, index 0x1003) */
        if(emPr->preDefErr){
    e622:	68bb      	ldr	r3, [r7, #8]
    e624:	685b      	ldr	r3, [r3, #4]
    e626:	2b00      	cmp	r3, #0
    e628:	d02a      	beq.n	e680 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1cc>
            uint8_t i;

            if(emPr->preDefErrNoOfErrors < emPr->preDefErrSize)
    e62a:	68bb      	ldr	r3, [r7, #8]
    e62c:	7a5b      	ldrb	r3, [r3, #9]
    e62e:	461a      	mov	r2, r3
    e630:	68bb      	ldr	r3, [r7, #8]
    e632:	7a1b      	ldrb	r3, [r3, #8]
    e634:	429a      	cmp	r2, r3
    e636:	da05      	bge.n	e644 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x190>
                emPr->preDefErrNoOfErrors++;
    e638:	68bb      	ldr	r3, [r7, #8]
    e63a:	7a5b      	ldrb	r3, [r3, #9]
    e63c:	3301      	adds	r3, #1
    e63e:	b2da      	uxtb	r2, r3
    e640:	68bb      	ldr	r3, [r7, #8]
    e642:	725a      	strb	r2, [r3, #9]
            for(i=emPr->preDefErrNoOfErrors-1; i>0; i--)
    e644:	68bb      	ldr	r3, [r7, #8]
    e646:	7a5b      	ldrb	r3, [r3, #9]
    e648:	3b01      	subs	r3, #1
    e64a:	77bb      	strb	r3, [r7, #30]
    e64c:	7fbb      	ldrb	r3, [r7, #30]
    e64e:	2b00      	cmp	r3, #0
    e650:	dd12      	ble.n	e678 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1c4>
                emPr->preDefErr[i] = emPr->preDefErr[i-1];
    e652:	68bb      	ldr	r3, [r7, #8]
    e654:	685a      	ldr	r2, [r3, #4]
    e656:	7fbb      	ldrb	r3, [r7, #30]
    e658:	009b      	lsls	r3, r3, #2
    e65a:	441a      	add	r2, r3
    e65c:	68bb      	ldr	r3, [r7, #8]
    e65e:	6859      	ldr	r1, [r3, #4]
    e660:	7fbb      	ldrb	r3, [r7, #30]
    e662:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    e666:	3b01      	subs	r3, #1
    e668:	009b      	lsls	r3, r3, #2
    e66a:	440b      	add	r3, r1
    e66c:	681b      	ldr	r3, [r3, #0]
    e66e:	6013      	str	r3, [r2, #0]
            for(i=emPr->preDefErrNoOfErrors-1; i>0; i--)
    e670:	7fbb      	ldrb	r3, [r7, #30]
    e672:	3b01      	subs	r3, #1
    e674:	77bb      	strb	r3, [r7, #30]
    e676:	e7e9      	b.n	e64c <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x198>
            emPr->preDefErr[0] = preDEF;
    e678:	68bb      	ldr	r3, [r7, #8]
    e67a:	685b      	ldr	r3, [r3, #4]
    e67c:	697a      	ldr	r2, [r7, #20]
    e67e:	601a      	str	r2, [r3, #0]
        }

        /* send CAN message */
        ptrCODriverClass->CAN_Send(emPr->CANtxBuff);
    e680:	4b06      	ldr	r3, [pc, #24]	; (e69c <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1e8>)
    e682:	681a      	ldr	r2, [r3, #0]
    e684:	68bb      	ldr	r3, [r7, #8]
    e686:	699b      	ldr	r3, [r3, #24]
    e688:	4619      	mov	r1, r3
    e68a:	4610      	mov	r0, r2
    e68c:	4b07      	ldr	r3, [pc, #28]	; (e6ac <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1f8>)
    e68e:	4798      	blx	r3
    }

    return;
    e690:	bf00      	nop
    e692:	bf00      	nop
}
    e694:	3724      	adds	r7, #36	; 0x24
    e696:	46bd      	mov	sp, r7
    e698:	bd90      	pop	{r4, r7, pc}
    e69a:	bf00      	nop
    e69c:	20001a7c 	.word	0x20001a7c
    e6a0:	0000de75 	.word	0x0000de75
    e6a4:	0000e6b1 	.word	0x0000e6b1
    e6a8:	00010705 	.word	0x00010705
    e6ac:	0000dc1d 	.word	0x0000dc1d

0000e6b0 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm>:


/******************************************************************************/
void CO_Emergency_Class::EM_ErrorReport(CO_EM_t *em, const uint8_t errorBit, const uint32_t errorCode, const uint32_t infoCode){
    e6b0:	b590      	push	{r4, r7, lr}
    e6b2:	b08d      	sub	sp, #52	; 0x34
    e6b4:	af00      	add	r7, sp, #0
    e6b6:	60f8      	str	r0, [r7, #12]
    e6b8:	60b9      	str	r1, [r7, #8]
    e6ba:	603b      	str	r3, [r7, #0]
    e6bc:	4613      	mov	r3, r2
    e6be:	71fb      	strb	r3, [r7, #7]
    uint8_t index = errorBit >> 3;
    e6c0:	79fb      	ldrb	r3, [r7, #7]
    e6c2:	10db      	asrs	r3, r3, #3
    e6c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    uint8_t bitmask = 1 << (errorBit & 0x7);
    e6c8:	79fb      	ldrb	r3, [r7, #7]
    e6ca:	f003 0307 	and.w	r3, r3, #7
    e6ce:	2201      	movs	r2, #1
    e6d0:	fa02 f303 	lsl.w	r3, r2, r3
    e6d4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    uint8_t *errorStatusBits = 0;
    e6d8:	2300      	movs	r3, #0
    e6da:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t sendEmergency = true;
    e6dc:	2301      	movs	r3, #1
    e6de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if(em == NULL){
    e6e2:	68bb      	ldr	r3, [r7, #8]
    e6e4:	2b00      	cmp	r3, #0
    e6e6:	d103      	bne.n	e6f0 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x40>
        sendEmergency = false;
    e6e8:	2300      	movs	r3, #0
    e6ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    e6ee:	e01e      	b.n	e72e <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x7e>
    }
    else if(index >= em->errorStatusBitsSize){
    e6f0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
    e6f4:	68ba      	ldr	r2, [r7, #8]
    e6f6:	7912      	ldrb	r2, [r2, #4]
    e6f8:	4293      	cmp	r3, r2
    e6fa:	db07      	blt.n	e70c <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x5c>
        /* if errorBit value not supported, send emergency 'CO_EM_WRONG_ERROR_REPORT' */
        em->wrongErrorReport = errorBit;
    e6fc:	68bb      	ldr	r3, [r7, #8]
    e6fe:	79fa      	ldrb	r2, [r7, #7]
    e700:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        sendEmergency = false;
    e704:	2300      	movs	r3, #0
    e706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    e70a:	e010      	b.n	e72e <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x7e>
    }
    else{
        errorStatusBits = &em->errorStatusBits[index];
    e70c:	68bb      	ldr	r3, [r7, #8]
    e70e:	681a      	ldr	r2, [r3, #0]
    e710:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
    e714:	4413      	add	r3, r2
    e716:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* if error was already reported, do nothing */
        if((*errorStatusBits & bitmask) != 0){
    e718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e71a:	781a      	ldrb	r2, [r3, #0]
    e71c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
    e720:	4013      	ands	r3, r2
    e722:	b2db      	uxtb	r3, r3
    e724:	2b00      	cmp	r3, #0
    e726:	d002      	beq.n	e72e <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x7e>
            sendEmergency = false;
    e728:	2300      	movs	r3, #0
    e72a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }
    }

    if(sendEmergency){
    e72e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    e732:	2b00      	cmp	r3, #0
    e734:	d05c      	beq.n	e7f0 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x140>
        /* set error bit */
        if(errorBit){
    e736:	79fb      	ldrb	r3, [r7, #7]
    e738:	2b00      	cmp	r3, #0
    e73a:	d007      	beq.n	e74c <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x9c>
            /* any error except NO_ERROR */
            *errorStatusBits |= bitmask;
    e73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e73e:	781a      	ldrb	r2, [r3, #0]
    e740:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
    e744:	4313      	orrs	r3, r2
    e746:	b2da      	uxtb	r2, r3
    e748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e74a:	701a      	strb	r2, [r3, #0]
        }

        /* verify buffer full, set overflow */
        if(em->bufFull){
    e74c:	68bb      	ldr	r3, [r7, #8]
    e74e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
    e752:	2b00      	cmp	r3, #0
    e754:	d004      	beq.n	e760 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0xb0>
            em->bufFull = 2;
    e756:	68bb      	ldr	r3, [r7, #8]
    e758:	2202      	movs	r2, #2
    e75a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
            if(em->handler != NULL) {
                em->handler();
            }
        }
    }
}
    e75e:	e047      	b.n	e7f0 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x140>
            CO_memcpySwap2(&bufCopy[0], &errorCode);
    e760:	68fb      	ldr	r3, [r7, #12]
    e762:	463a      	mov	r2, r7
    e764:	f107 0118 	add.w	r1, r7, #24
    e768:	4618      	mov	r0, r3
    e76a:	4b23      	ldr	r3, [pc, #140]	; (e7f8 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x148>)
    e76c:	4798      	blx	r3
            bufCopy[2] = 0; /* error register will be set later */
    e76e:	2300      	movs	r3, #0
    e770:	76bb      	strb	r3, [r7, #26]
            bufCopy[3] = errorBit;
    e772:	79fb      	ldrb	r3, [r7, #7]
    e774:	76fb      	strb	r3, [r7, #27]
            CO_memcpySwap4(&bufCopy[4], &infoCode);
    e776:	68f8      	ldr	r0, [r7, #12]
    e778:	f107 0318 	add.w	r3, r7, #24
    e77c:	3304      	adds	r3, #4
    e77e:	f107 0240 	add.w	r2, r7, #64	; 0x40
    e782:	4619      	mov	r1, r3
    e784:	4b1d      	ldr	r3, [pc, #116]	; (e7fc <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x14c>)
    e786:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    e788:	f3ef 8310 	mrs	r3, PRIMASK
    e78c:	617b      	str	r3, [r7, #20]
  return(result);
    e78e:	697b      	ldr	r3, [r7, #20]
            CO_LOCK_EMCY();
    e790:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
    e792:	b672      	cpsid	i
            CO_memcpy(em->bufWritePtr, &bufCopy[0], 8);
    e794:	68f8      	ldr	r0, [r7, #12]
    e796:	68bb      	ldr	r3, [r7, #8]
    e798:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
    e79a:	f107 0218 	add.w	r2, r7, #24
    e79e:	2308      	movs	r3, #8
    e7a0:	4c17      	ldr	r4, [pc, #92]	; (e800 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x150>)
    e7a2:	47a0      	blx	r4
            em->bufWritePtr += 8;
    e7a4:	68bb      	ldr	r3, [r7, #8]
    e7a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    e7a8:	f103 0208 	add.w	r2, r3, #8
    e7ac:	68bb      	ldr	r3, [r7, #8]
    e7ae:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufEnd) em->bufWritePtr = em->buf;
    e7b0:	68bb      	ldr	r3, [r7, #8]
    e7b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    e7b4:	68bb      	ldr	r3, [r7, #8]
    e7b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    e7b8:	429a      	cmp	r2, r3
    e7ba:	d103      	bne.n	e7c4 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x114>
    e7bc:	68bb      	ldr	r3, [r7, #8]
    e7be:	1d5a      	adds	r2, r3, #5
    e7c0:	68bb      	ldr	r3, [r7, #8]
    e7c2:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufReadPtr) em->bufFull = 1;
    e7c4:	68bb      	ldr	r3, [r7, #8]
    e7c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    e7c8:	68bb      	ldr	r3, [r7, #8]
    e7ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    e7cc:	429a      	cmp	r2, r3
    e7ce:	d103      	bne.n	e7d8 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x128>
    e7d0:	68bb      	ldr	r3, [r7, #8]
    e7d2:	2201      	movs	r2, #1
    e7d4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    e7d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e7da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    e7dc:	6a3b      	ldr	r3, [r7, #32]
    e7de:	f383 8810 	msr	PRIMASK, r3
            if(em->handler != NULL) {
    e7e2:	68bb      	ldr	r3, [r7, #8]
    e7e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    e7e6:	2b00      	cmp	r3, #0
    e7e8:	d002      	beq.n	e7f0 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x140>
                em->handler();
    e7ea:	68bb      	ldr	r3, [r7, #8]
    e7ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    e7ee:	4798      	blx	r3
}
    e7f0:	bf00      	nop
    e7f2:	3734      	adds	r7, #52	; 0x34
    e7f4:	46bd      	mov	sp, r7
    e7f6:	bd90      	pop	{r4, r7, pc}
    e7f8:	000107ad 	.word	0x000107ad
    e7fc:	000107dd 	.word	0x000107dd
    e800:	00010705 	.word	0x00010705

0000e804 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm>:


/******************************************************************************/
void CO_Emergency_Class::EM_ErrorReset(CO_EM_t *em, const uint8_t errorBit, const uint32_t infoCode){
    e804:	b590      	push	{r4, r7, lr}
    e806:	b08d      	sub	sp, #52	; 0x34
    e808:	af00      	add	r7, sp, #0
    e80a:	60f8      	str	r0, [r7, #12]
    e80c:	60b9      	str	r1, [r7, #8]
    e80e:	603b      	str	r3, [r7, #0]
    e810:	4613      	mov	r3, r2
    e812:	71fb      	strb	r3, [r7, #7]
    uint8_t index = errorBit >> 3;
    e814:	79fb      	ldrb	r3, [r7, #7]
    e816:	10db      	asrs	r3, r3, #3
    e818:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    uint8_t bitmask = 1 << (errorBit & 0x7);
    e81c:	79fb      	ldrb	r3, [r7, #7]
    e81e:	f003 0307 	and.w	r3, r3, #7
    e822:	2201      	movs	r2, #1
    e824:	fa02 f303 	lsl.w	r3, r2, r3
    e828:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    uint8_t *errorStatusBits = 0;
    e82c:	2300      	movs	r3, #0
    e82e:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t sendEmergency = true;
    e830:	2301      	movs	r3, #1
    e832:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if(em == NULL){
    e836:	68bb      	ldr	r3, [r7, #8]
    e838:	2b00      	cmp	r3, #0
    e83a:	d103      	bne.n	e844 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x40>
        sendEmergency = false;
    e83c:	2300      	movs	r3, #0
    e83e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    e842:	e01e      	b.n	e882 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x7e>
    }
    else if(index >= em->errorStatusBitsSize){
    e844:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
    e848:	68ba      	ldr	r2, [r7, #8]
    e84a:	7912      	ldrb	r2, [r2, #4]
    e84c:	4293      	cmp	r3, r2
    e84e:	db07      	blt.n	e860 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x5c>
        /* if errorBit value not supported, send emergency 'CO_EM_WRONG_ERROR_REPORT' */
        em->wrongErrorReport = errorBit;
    e850:	68bb      	ldr	r3, [r7, #8]
    e852:	79fa      	ldrb	r2, [r7, #7]
    e854:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        sendEmergency = false;
    e858:	2300      	movs	r3, #0
    e85a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    e85e:	e010      	b.n	e882 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x7e>
    }
    else{
        errorStatusBits = &em->errorStatusBits[index];
    e860:	68bb      	ldr	r3, [r7, #8]
    e862:	681a      	ldr	r2, [r3, #0]
    e864:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
    e868:	4413      	add	r3, r2
    e86a:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* if error was allready cleared, do nothing */
        if((*errorStatusBits & bitmask) == 0){
    e86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e86e:	781a      	ldrb	r2, [r3, #0]
    e870:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
    e874:	4013      	ands	r3, r2
    e876:	b2db      	uxtb	r3, r3
    e878:	2b00      	cmp	r3, #0
    e87a:	d102      	bne.n	e882 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x7e>
            sendEmergency = false;
    e87c:	2300      	movs	r3, #0
    e87e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }
    }

    if(sendEmergency){
    e882:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    e886:	2b00      	cmp	r3, #0
    e888:	d059      	beq.n	e93e <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x13a>
        /* erase error bit */
        *errorStatusBits &= ~bitmask;
    e88a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e88c:	781b      	ldrb	r3, [r3, #0]
    e88e:	b25a      	sxtb	r2, r3
    e890:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
    e894:	43db      	mvns	r3, r3
    e896:	b25b      	sxtb	r3, r3
    e898:	4013      	ands	r3, r2
    e89a:	b25b      	sxtb	r3, r3
    e89c:	b2da      	uxtb	r2, r3
    e89e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e8a0:	701a      	strb	r2, [r3, #0]

        /* verify buffer full */
        if(em->bufFull){
    e8a2:	68bb      	ldr	r3, [r7, #8]
    e8a4:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
    e8a8:	2b00      	cmp	r3, #0
    e8aa:	d004      	beq.n	e8b6 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0xb2>
            em->bufFull = 2;
    e8ac:	68bb      	ldr	r3, [r7, #8]
    e8ae:	2202      	movs	r2, #2
    e8b0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
            if(em->handler != NULL) {
                em->handler();
            }
        }
    }
}
    e8b4:	e043      	b.n	e93e <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x13a>
            bufCopy[0] = 0;
    e8b6:	2300      	movs	r3, #0
    e8b8:	763b      	strb	r3, [r7, #24]
            bufCopy[1] = 0;
    e8ba:	2300      	movs	r3, #0
    e8bc:	767b      	strb	r3, [r7, #25]
            bufCopy[2] = 0; /* error register will be set later */
    e8be:	2300      	movs	r3, #0
    e8c0:	76bb      	strb	r3, [r7, #26]
            bufCopy[3] = errorBit;
    e8c2:	79fb      	ldrb	r3, [r7, #7]
    e8c4:	76fb      	strb	r3, [r7, #27]
            CO_memcpySwap4(&bufCopy[4], &infoCode);
    e8c6:	68f8      	ldr	r0, [r7, #12]
    e8c8:	463a      	mov	r2, r7
    e8ca:	f107 0318 	add.w	r3, r7, #24
    e8ce:	3304      	adds	r3, #4
    e8d0:	4619      	mov	r1, r3
    e8d2:	4b1d      	ldr	r3, [pc, #116]	; (e948 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x144>)
    e8d4:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    e8d6:	f3ef 8310 	mrs	r3, PRIMASK
    e8da:	617b      	str	r3, [r7, #20]
  return(result);
    e8dc:	697b      	ldr	r3, [r7, #20]
            CO_LOCK_EMCY();
    e8de:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
    e8e0:	b672      	cpsid	i
            CO_memcpy(em->bufWritePtr, &bufCopy[0], 8);
    e8e2:	68f8      	ldr	r0, [r7, #12]
    e8e4:	68bb      	ldr	r3, [r7, #8]
    e8e6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
    e8e8:	f107 0218 	add.w	r2, r7, #24
    e8ec:	2308      	movs	r3, #8
    e8ee:	4c17      	ldr	r4, [pc, #92]	; (e94c <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x148>)
    e8f0:	47a0      	blx	r4
            em->bufWritePtr += 8;
    e8f2:	68bb      	ldr	r3, [r7, #8]
    e8f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    e8f6:	f103 0208 	add.w	r2, r3, #8
    e8fa:	68bb      	ldr	r3, [r7, #8]
    e8fc:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufEnd) em->bufWritePtr = em->buf;
    e8fe:	68bb      	ldr	r3, [r7, #8]
    e900:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    e902:	68bb      	ldr	r3, [r7, #8]
    e904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    e906:	429a      	cmp	r2, r3
    e908:	d103      	bne.n	e912 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x10e>
    e90a:	68bb      	ldr	r3, [r7, #8]
    e90c:	1d5a      	adds	r2, r3, #5
    e90e:	68bb      	ldr	r3, [r7, #8]
    e910:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufReadPtr) em->bufFull = 1;
    e912:	68bb      	ldr	r3, [r7, #8]
    e914:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    e916:	68bb      	ldr	r3, [r7, #8]
    e918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    e91a:	429a      	cmp	r2, r3
    e91c:	d103      	bne.n	e926 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x122>
    e91e:	68bb      	ldr	r3, [r7, #8]
    e920:	2201      	movs	r2, #1
    e922:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    e926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e928:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    e92a:	6a3b      	ldr	r3, [r7, #32]
    e92c:	f383 8810 	msr	PRIMASK, r3
            if(em->handler != NULL) {
    e930:	68bb      	ldr	r3, [r7, #8]
    e932:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    e934:	2b00      	cmp	r3, #0
    e936:	d002      	beq.n	e93e <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x13a>
                em->handler();
    e938:	68bb      	ldr	r3, [r7, #8]
    e93a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    e93c:	4798      	blx	r3
}
    e93e:	bf00      	nop
    e940:	3734      	adds	r7, #52	; 0x34
    e942:	46bd      	mov	sp, r7
    e944:	bd90      	pop	{r4, r7, pc}
    e946:	bf00      	nop
    e948:	000107dd 	.word	0x000107dd
    e94c:	00010705 	.word	0x00010705

0000e950 <_ZN18CO_Emergency_Class10EM_IsErrorEP7CO_EM_th>:


/******************************************************************************/
bool_t CO_Emergency_Class::EM_IsError(CO_EM_t *em, const uint8_t errorBit){
    e950:	b480      	push	{r7}
    e952:	b087      	sub	sp, #28
    e954:	af00      	add	r7, sp, #0
    e956:	60f8      	str	r0, [r7, #12]
    e958:	60b9      	str	r1, [r7, #8]
    e95a:	4613      	mov	r3, r2
    e95c:	71fb      	strb	r3, [r7, #7]
    uint8_t index = errorBit >> 3;
    e95e:	79fb      	ldrb	r3, [r7, #7]
    e960:	10db      	asrs	r3, r3, #3
    e962:	75bb      	strb	r3, [r7, #22]
    uint8_t bitmask = 1 << (errorBit & 0x7);
    e964:	79fb      	ldrb	r3, [r7, #7]
    e966:	f003 0307 	and.w	r3, r3, #7
    e96a:	2201      	movs	r2, #1
    e96c:	fa02 f303 	lsl.w	r3, r2, r3
    e970:	757b      	strb	r3, [r7, #21]
    bool_t ret = false;
    e972:	2300      	movs	r3, #0
    e974:	75fb      	strb	r3, [r7, #23]

    if(em != NULL && index < em->errorStatusBitsSize){
    e976:	68bb      	ldr	r3, [r7, #8]
    e978:	2b00      	cmp	r3, #0
    e97a:	d010      	beq.n	e99e <_ZN18CO_Emergency_Class10EM_IsErrorEP7CO_EM_th+0x4e>
    e97c:	7dbb      	ldrb	r3, [r7, #22]
    e97e:	68ba      	ldr	r2, [r7, #8]
    e980:	7912      	ldrb	r2, [r2, #4]
    e982:	4293      	cmp	r3, r2
    e984:	da0b      	bge.n	e99e <_ZN18CO_Emergency_Class10EM_IsErrorEP7CO_EM_th+0x4e>
        if((em->errorStatusBits[index] & bitmask) != 0){
    e986:	68bb      	ldr	r3, [r7, #8]
    e988:	681a      	ldr	r2, [r3, #0]
    e98a:	7dbb      	ldrb	r3, [r7, #22]
    e98c:	4413      	add	r3, r2
    e98e:	781a      	ldrb	r2, [r3, #0]
    e990:	7d7b      	ldrb	r3, [r7, #21]
    e992:	4013      	ands	r3, r2
    e994:	b2db      	uxtb	r3, r3
    e996:	2b00      	cmp	r3, #0
    e998:	d001      	beq.n	e99e <_ZN18CO_Emergency_Class10EM_IsErrorEP7CO_EM_th+0x4e>
            ret = true;
    e99a:	2301      	movs	r3, #1
    e99c:	75fb      	strb	r3, [r7, #23]
        }
    }

    return ret;
    e99e:	7dfb      	ldrb	r3, [r7, #23]
    e9a0:	4618      	mov	r0, r3
    e9a2:	371c      	adds	r7, #28
    e9a4:	46bd      	mov	sp, r7
    e9a6:	bc80      	pop	{r7}
    e9a8:	4770      	bx	lr

0000e9aa <_ZL17CO_HBcons_receivePvPK13CO_CANrxMsg_t>:
#include "CO_Emergency_Class.h"

CO_HB_Consumer_Class	*ptrHBConsumerClass;


static void CO_HBcons_receive(void *object,const CO_CANrxMsg_t *msg){
    e9aa:	b480      	push	{r7}
    e9ac:	b085      	sub	sp, #20
    e9ae:	af00      	add	r7, sp, #0
    e9b0:	6078      	str	r0, [r7, #4]
    e9b2:	6039      	str	r1, [r7, #0]
	CO_HBconsNode_t *HBconsNode;

	HBconsNode = (CO_HBconsNode_t*) object; /* this is the correct pointer type of the first argument */
    e9b4:	687b      	ldr	r3, [r7, #4]
    e9b6:	60fb      	str	r3, [r7, #12]

	/* verify message length */
	if(msg->DLC == 1){
    e9b8:	683b      	ldr	r3, [r7, #0]
    e9ba:	7d1b      	ldrb	r3, [r3, #20]
    e9bc:	2b01      	cmp	r3, #1
    e9be:	d106      	bne.n	e9ce <_ZL17CO_HBcons_receivePvPK13CO_CANrxMsg_t+0x24>
		/* copy data and set 'new message' flag. */
		HBconsNode->NMTstate = msg->data[0];
    e9c0:	683b      	ldr	r3, [r7, #0]
    e9c2:	7d5a      	ldrb	r2, [r3, #21]
    e9c4:	68fb      	ldr	r3, [r7, #12]
    e9c6:	701a      	strb	r2, [r3, #0]
		HBconsNode->CANrxNew = true;
    e9c8:	68fb      	ldr	r3, [r7, #12]
    e9ca:	2201      	movs	r2, #1
    e9cc:	731a      	strb	r2, [r3, #12]
	}
}
    e9ce:	bf00      	nop
    e9d0:	3714      	adds	r7, #20
    e9d2:	46bd      	mov	sp, r7
    e9d4:	bc80      	pop	{r7}
    e9d6:	4770      	bx	lr

0000e9d8 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm>:
static void CO_HBcons_monitoredNodeConfig(
CO_HBconsumer_t        *HBcons,
uint8_t                 idx,
uint32_t                HBconsTime)
{
    e9d8:	b590      	push	{r4, r7, lr}
    e9da:	b08d      	sub	sp, #52	; 0x34
    e9dc:	af04      	add	r7, sp, #16
    e9de:	60f8      	str	r0, [r7, #12]
    e9e0:	460b      	mov	r3, r1
    e9e2:	607a      	str	r2, [r7, #4]
    e9e4:	72fb      	strb	r3, [r7, #11]
	uint32_t COB_ID;
	uint32_t NodeID;
	CO_HBconsNode_t *monitoredNode;

	if(idx >= HBcons->numberOfMonitoredNodes) return;
    e9e6:	7afb      	ldrb	r3, [r7, #11]
    e9e8:	68fa      	ldr	r2, [r7, #12]
    e9ea:	7b12      	ldrb	r2, [r2, #12]
    e9ec:	4293      	cmp	r3, r2
    e9ee:	da2c      	bge.n	ea4a <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x72>

	NodeID = (uint32_t)((HBconsTime>>16)&0xFF);
    e9f0:	687b      	ldr	r3, [r7, #4]
    e9f2:	0c1b      	lsrs	r3, r3, #16
    e9f4:	b2db      	uxtb	r3, r3
    e9f6:	61fb      	str	r3, [r7, #28]
	monitoredNode = &HBcons->monitoredNodes[idx];
    e9f8:	68fb      	ldr	r3, [r7, #12]
    e9fa:	689a      	ldr	r2, [r3, #8]
    e9fc:	7afb      	ldrb	r3, [r7, #11]
    e9fe:	011b      	lsls	r3, r3, #4
    ea00:	4413      	add	r3, r2
    ea02:	61bb      	str	r3, [r7, #24]
	monitoredNode->time = (uint32_t)HBconsTime;
    ea04:	69bb      	ldr	r3, [r7, #24]
    ea06:	687a      	ldr	r2, [r7, #4]
    ea08:	609a      	str	r2, [r3, #8]
	monitoredNode->NMTstate = 0;
    ea0a:	69bb      	ldr	r3, [r7, #24]
    ea0c:	2200      	movs	r2, #0
    ea0e:	701a      	strb	r2, [r3, #0]
	monitoredNode->monStarted = false;
    ea10:	69bb      	ldr	r3, [r7, #24]
    ea12:	2200      	movs	r2, #0
    ea14:	705a      	strb	r2, [r3, #1]
	COB_ID = (uint32_t)idx + 0x700;
    ea16:	7afb      	ldrb	r3, [r7, #11]
    ea18:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
    ea1c:	617b      	str	r3, [r7, #20]
// 		COB_ID = 0;
// 		monitoredNode->time = 0;
// 	}

	/* configure Heartbeat consumer CAN reception */
	ptrCODriverClass->CAN_Rx_BufferInit(
    ea1e:	4b0d      	ldr	r3, [pc, #52]	; (ea54 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x7c>)
    ea20:	6818      	ldr	r0, [r3, #0]
	HBcons->CANdevRxIdxStart + idx,
    ea22:	68fb      	ldr	r3, [r7, #12]
    ea24:	695a      	ldr	r2, [r3, #20]
	ptrCODriverClass->CAN_Rx_BufferInit(
    ea26:	7afb      	ldrb	r3, [r7, #11]
    ea28:	18d1      	adds	r1, r2, r3
	COB_ID,
	0x7FF,
	0,
	(void*)&HBcons->monitoredNodes[idx],
    ea2a:	68fb      	ldr	r3, [r7, #12]
    ea2c:	689a      	ldr	r2, [r3, #8]
    ea2e:	7afb      	ldrb	r3, [r7, #11]
    ea30:	011b      	lsls	r3, r3, #4
    ea32:	4413      	add	r3, r2
	CO_HBcons_receive);
    ea34:	4a08      	ldr	r2, [pc, #32]	; (ea58 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x80>)
    ea36:	9202      	str	r2, [sp, #8]
    ea38:	9301      	str	r3, [sp, #4]
    ea3a:	2300      	movs	r3, #0
    ea3c:	9300      	str	r3, [sp, #0]
    ea3e:	f240 73ff 	movw	r3, #2047	; 0x7ff
    ea42:	697a      	ldr	r2, [r7, #20]
    ea44:	4c05      	ldr	r4, [pc, #20]	; (ea5c <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x84>)
    ea46:	47a0      	blx	r4
    ea48:	e000      	b.n	ea4c <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x74>
	if(idx >= HBcons->numberOfMonitoredNodes) return;
    ea4a:	bf00      	nop
}
    ea4c:	3724      	adds	r7, #36	; 0x24
    ea4e:	46bd      	mov	sp, r7
    ea50:	bd90      	pop	{r4, r7, pc}
    ea52:	bf00      	nop
    ea54:	20001a7c 	.word	0x20001a7c
    ea58:	0000e9ab 	.word	0x0000e9ab
    ea5c:	0000da71 	.word	0x0000da71

0000ea60 <_ZL11CO_ODF_1016P12CO_ODF_arg_t>:
static CO_SDO_abortCode_t CO_ODF_1016(CO_ODF_arg_t *ODF_arg){
    ea60:	b580      	push	{r7, lr}
    ea62:	b08c      	sub	sp, #48	; 0x30
    ea64:	af00      	add	r7, sp, #0
    ea66:	6078      	str	r0, [r7, #4]
	CO_HBconsumer_t *HBcons;
	uint32_t value;
	CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
    ea68:	2300      	movs	r3, #0
    ea6a:	62fb      	str	r3, [r7, #44]	; 0x2c

	HBcons = (CO_HBconsumer_t*) ODF_arg->object;
    ea6c:	687b      	ldr	r3, [r7, #4]
    ea6e:	681b      	ldr	r3, [r3, #0]
    ea70:	627b      	str	r3, [r7, #36]	; 0x24
	value =ptrCODriverClass->CO_getUint32(ODF_arg->data);
    ea72:	4b32      	ldr	r3, [pc, #200]	; (eb3c <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xdc>)
    ea74:	681b      	ldr	r3, [r3, #0]
    ea76:	1d1a      	adds	r2, r3, #4
    ea78:	687b      	ldr	r3, [r7, #4]
    ea7a:	685b      	ldr	r3, [r3, #4]
    ea7c:	4619      	mov	r1, r3
    ea7e:	4610      	mov	r0, r2
    ea80:	4b2f      	ldr	r3, [pc, #188]	; (eb40 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xe0>)
    ea82:	4798      	blx	r3
    ea84:	6238      	str	r0, [r7, #32]

	if(!ODF_arg->reading){
    ea86:	687b      	ldr	r3, [r7, #4]
    ea88:	7f5b      	ldrb	r3, [r3, #29]
    ea8a:	2b00      	cmp	r3, #0
    ea8c:	d150      	bne.n	eb30 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xd0>
		uint8_t NodeID;
		uint32_t HBconsTime;

		NodeID = (value >> 16U) & 0xFFU;
    ea8e:	6a3b      	ldr	r3, [r7, #32]
    ea90:	0c1b      	lsrs	r3, r3, #16
    ea92:	77fb      	strb	r3, [r7, #31]
		HBconsTime = value & 0xFFFFU;
    ea94:	6a3b      	ldr	r3, [r7, #32]
    ea96:	b29b      	uxth	r3, r3
    ea98:	61bb      	str	r3, [r7, #24]

		if((value & 0xFF800000U) != 0){
    ea9a:	6a3b      	ldr	r3, [r7, #32]
    ea9c:	0ddb      	lsrs	r3, r3, #23
    ea9e:	05db      	lsls	r3, r3, #23
    eaa0:	2b00      	cmp	r3, #0
    eaa2:	d002      	beq.n	eaaa <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0x4a>
			ret = CO_SDO_AB_PRAM_INCOMPAT;
    eaa4:	4b27      	ldr	r3, [pc, #156]	; (eb44 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xe4>)
    eaa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    eaa8:	e036      	b.n	eb18 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb8>
		}
		else if((HBconsTime != 0) && (NodeID != 0)){
    eaaa:	69bb      	ldr	r3, [r7, #24]
    eaac:	2b00      	cmp	r3, #0
    eaae:	d02f      	beq.n	eb10 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb0>
    eab0:	7ffb      	ldrb	r3, [r7, #31]
    eab2:	2b00      	cmp	r3, #0
    eab4:	d02c      	beq.n	eb10 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb0>
			uint8_t i;
			/* there must not be more entries with same index and time different than zero */
			for(i = 0U; i<HBcons->numberOfMonitoredNodes; i++){
    eab6:	2300      	movs	r3, #0
    eab8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    eabc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    eac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    eac2:	7b12      	ldrb	r2, [r2, #12]
    eac4:	4293      	cmp	r3, r2
    eac6:	da26      	bge.n	eb16 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb6>
				uint32_t objectCopy = HBcons->HBconsTime[i];
    eac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    eaca:	685a      	ldr	r2, [r3, #4]
    eacc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    ead0:	009b      	lsls	r3, r3, #2
    ead2:	4413      	add	r3, r2
    ead4:	681b      	ldr	r3, [r3, #0]
    ead6:	617b      	str	r3, [r7, #20]
				uint8_t NodeIDObj = (objectCopy >> 16U) & 0xFFU;
    ead8:	697b      	ldr	r3, [r7, #20]
    eada:	0c1b      	lsrs	r3, r3, #16
    eadc:	74fb      	strb	r3, [r7, #19]
				uint32_t HBconsTimeObj = objectCopy & 0xFFFFU;
    eade:	697b      	ldr	r3, [r7, #20]
    eae0:	b29b      	uxth	r3, r3
    eae2:	60fb      	str	r3, [r7, #12]
				if(((ODF_arg->subIndex-1U) != i) && (HBconsTimeObj != 0) && (NodeID == NodeIDObj)){
    eae4:	687b      	ldr	r3, [r7, #4]
    eae6:	7f1b      	ldrb	r3, [r3, #28]
    eae8:	1e5a      	subs	r2, r3, #1
    eaea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    eaee:	429a      	cmp	r2, r3
    eaf0:	d008      	beq.n	eb04 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xa4>
    eaf2:	68fb      	ldr	r3, [r7, #12]
    eaf4:	2b00      	cmp	r3, #0
    eaf6:	d005      	beq.n	eb04 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xa4>
    eaf8:	7ffa      	ldrb	r2, [r7, #31]
    eafa:	7cfb      	ldrb	r3, [r7, #19]
    eafc:	429a      	cmp	r2, r3
    eafe:	d101      	bne.n	eb04 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xa4>
					ret = CO_SDO_AB_PRAM_INCOMPAT;
    eb00:	4b10      	ldr	r3, [pc, #64]	; (eb44 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xe4>)
    eb02:	62fb      	str	r3, [r7, #44]	; 0x2c
			for(i = 0U; i<HBcons->numberOfMonitoredNodes; i++){
    eb04:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    eb08:	3301      	adds	r3, #1
    eb0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    eb0e:	e7d5      	b.n	eabc <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0x5c>
				}
			}
		}
		else{
			ret = CO_SDO_AB_NONE;
    eb10:	2300      	movs	r3, #0
    eb12:	62fb      	str	r3, [r7, #44]	; 0x2c
    eb14:	e000      	b.n	eb18 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb8>
			}
    eb16:	bf00      	nop
		}

		/* Configure */
		if(ret == CO_SDO_AB_NONE){
    eb18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    eb1a:	2b00      	cmp	r3, #0
    eb1c:	d108      	bne.n	eb30 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xd0>
			CO_HBcons_monitoredNodeConfig(HBcons, ODF_arg->subIndex-1U, value);
    eb1e:	687b      	ldr	r3, [r7, #4]
    eb20:	7f1b      	ldrb	r3, [r3, #28]
    eb22:	3b01      	subs	r3, #1
    eb24:	b2db      	uxtb	r3, r3
    eb26:	6a3a      	ldr	r2, [r7, #32]
    eb28:	4619      	mov	r1, r3
    eb2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
    eb2c:	4b06      	ldr	r3, [pc, #24]	; (eb48 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xe8>)
    eb2e:	4798      	blx	r3
		}
	}

	return ret;
    eb30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
    eb32:	4618      	mov	r0, r3
    eb34:	3730      	adds	r7, #48	; 0x30
    eb36:	46bd      	mov	sp, r7
    eb38:	bd80      	pop	{r7, pc}
    eb3a:	bf00      	nop
    eb3c:	20001a7c 	.word	0x20001a7c
    eb40:	00010741 	.word	0x00010741
    eb44:	06040043 	.word	0x06040043
    eb48:	0000e9d9 	.word	0x0000e9d9

0000eb4c <_ZN20CO_HB_Consumer_ClassC1Ev>:


// default constructor
CO_HB_Consumer_Class::CO_HB_Consumer_Class()
    eb4c:	b480      	push	{r7}
    eb4e:	b083      	sub	sp, #12
    eb50:	af00      	add	r7, sp, #0
    eb52:	6078      	str	r0, [r7, #4]
{
} //CO_HB_Consumer_Class
    eb54:	687b      	ldr	r3, [r7, #4]
    eb56:	4618      	mov	r0, r3
    eb58:	370c      	adds	r7, #12
    eb5a:	46bd      	mov	sp, r7
    eb5c:	bc80      	pop	{r7}
    eb5e:	4770      	bx	lr

0000eb60 <_ZN20CO_HB_Consumer_ClassD1Ev>:

// default destructor
CO_HB_Consumer_Class::~CO_HB_Consumer_Class()
    eb60:	b480      	push	{r7}
    eb62:	b083      	sub	sp, #12
    eb64:	af00      	add	r7, sp, #0
    eb66:	6078      	str	r0, [r7, #4]
{
} //~CO_HB_Consumer_Class
    eb68:	687b      	ldr	r3, [r7, #4]
    eb6a:	4618      	mov	r0, r3
    eb6c:	370c      	adds	r7, #12
    eb6e:	46bd      	mov	sp, r7
    eb70:	bc80      	pop	{r7}
    eb72:	4770      	bx	lr

0000eb74 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm>:
const uint32_t          HBconsTime[],
CO_HBconsNode_t         monitoredNodes[],
uint8_t                 numberOfMonitoredNodes,
CO_CANmodule_t         *CANdevRx,
uint32_t                CANdevRxIdxStart)
{
    eb74:	b590      	push	{r4, r7, lr}
    eb76:	b089      	sub	sp, #36	; 0x24
    eb78:	af02      	add	r7, sp, #8
    eb7a:	60f8      	str	r0, [r7, #12]
    eb7c:	60b9      	str	r1, [r7, #8]
    eb7e:	607a      	str	r2, [r7, #4]
    eb80:	603b      	str	r3, [r7, #0]
	uint8_t i;

	/* verify arguments */
	if(HBcons==NULL || em==NULL || SDO==NULL || HBconsTime==NULL ||
    eb82:	68bb      	ldr	r3, [r7, #8]
    eb84:	2b00      	cmp	r3, #0
    eb86:	d00e      	beq.n	eba6 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x32>
    eb88:	687b      	ldr	r3, [r7, #4]
    eb8a:	2b00      	cmp	r3, #0
    eb8c:	d00b      	beq.n	eba6 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x32>
    eb8e:	683b      	ldr	r3, [r7, #0]
    eb90:	2b00      	cmp	r3, #0
    eb92:	d008      	beq.n	eba6 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x32>
    eb94:	6abb      	ldr	r3, [r7, #40]	; 0x28
    eb96:	2b00      	cmp	r3, #0
    eb98:	d005      	beq.n	eba6 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x32>
    eb9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    eb9c:	2b00      	cmp	r3, #0
    eb9e:	d002      	beq.n	eba6 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x32>
	monitoredNodes==NULL || CANdevRx==NULL){
    eba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    eba2:	2b00      	cmp	r3, #0
    eba4:	d102      	bne.n	ebac <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x38>
		return CO_ERROR_ILLEGAL_ARGUMENT;
    eba6:	f04f 33ff 	mov.w	r3, #4294967295
    ebaa:	e039      	b.n	ec20 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xac>
	}

	/* Configure object variables */
	HBcons->em = em;
    ebac:	68bb      	ldr	r3, [r7, #8]
    ebae:	687a      	ldr	r2, [r7, #4]
    ebb0:	601a      	str	r2, [r3, #0]
	HBcons->HBconsTime = HBconsTime;
    ebb2:	68bb      	ldr	r3, [r7, #8]
    ebb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    ebb6:	605a      	str	r2, [r3, #4]
	HBcons->monitoredNodes = monitoredNodes;
    ebb8:	68bb      	ldr	r3, [r7, #8]
    ebba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    ebbc:	609a      	str	r2, [r3, #8]
	HBcons->numberOfMonitoredNodes = numberOfMonitoredNodes;
    ebbe:	68bb      	ldr	r3, [r7, #8]
    ebc0:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
    ebc4:	731a      	strb	r2, [r3, #12]
	HBcons->allMonitoredOperational = 0;
    ebc6:	68bb      	ldr	r3, [r7, #8]
    ebc8:	2200      	movs	r2, #0
    ebca:	735a      	strb	r2, [r3, #13]
	HBcons->CANdevRx = CANdevRx;
    ebcc:	68bb      	ldr	r3, [r7, #8]
    ebce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    ebd0:	611a      	str	r2, [r3, #16]
	HBcons->CANdevRxIdxStart = CANdevRxIdxStart;
    ebd2:	68bb      	ldr	r3, [r7, #8]
    ebd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
    ebd6:	615a      	str	r2, [r3, #20]

	for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
    ebd8:	2300      	movs	r3, #0
    ebda:	75fb      	strb	r3, [r7, #23]
    ebdc:	7dfb      	ldrb	r3, [r7, #23]
    ebde:	68ba      	ldr	r2, [r7, #8]
    ebe0:	7b12      	ldrb	r2, [r2, #12]
    ebe2:	4293      	cmp	r3, r2
    ebe4:	da0e      	bge.n	ec04 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x90>

			CO_HBcons_monitoredNodeConfig(HBcons, i, HBcons->HBconsTime[i]);
    ebe6:	68bb      	ldr	r3, [r7, #8]
    ebe8:	685a      	ldr	r2, [r3, #4]
    ebea:	7dfb      	ldrb	r3, [r7, #23]
    ebec:	009b      	lsls	r3, r3, #2
    ebee:	4413      	add	r3, r2
    ebf0:	681a      	ldr	r2, [r3, #0]
    ebf2:	7dfb      	ldrb	r3, [r7, #23]
    ebf4:	4619      	mov	r1, r3
    ebf6:	68b8      	ldr	r0, [r7, #8]
    ebf8:	4b0b      	ldr	r3, [pc, #44]	; (ec28 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xb4>)
    ebfa:	4798      	blx	r3
	for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
    ebfc:	7dfb      	ldrb	r3, [r7, #23]
    ebfe:	3301      	adds	r3, #1
    ec00:	75fb      	strb	r3, [r7, #23]
    ec02:	e7eb      	b.n	ebdc <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x68>
		
	}
	

	/* Configure Object dictionary entry at index 0x1016 */
	ptrCODriverClass->CO_OD_configure( OD_H1016_CONSUMER_HB_TIME, CO_ODF_1016, (void*)HBcons, 0, 0);
    ec04:	4b09      	ldr	r3, [pc, #36]	; (ec2c <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xb8>)
    ec06:	681b      	ldr	r3, [r3, #0]
    ec08:	1d18      	adds	r0, r3, #4
    ec0a:	2300      	movs	r3, #0
    ec0c:	9301      	str	r3, [sp, #4]
    ec0e:	2300      	movs	r3, #0
    ec10:	9300      	str	r3, [sp, #0]
    ec12:	68bb      	ldr	r3, [r7, #8]
    ec14:	4a06      	ldr	r2, [pc, #24]	; (ec30 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xbc>)
    ec16:	f241 0116 	movw	r1, #4118	; 0x1016
    ec1a:	4c06      	ldr	r4, [pc, #24]	; (ec34 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xc0>)
    ec1c:	47a0      	blx	r4

	return CO_ERROR_NO;
    ec1e:	2300      	movs	r3, #0
}
    ec20:	4618      	mov	r0, r3
    ec22:	371c      	adds	r7, #28
    ec24:	46bd      	mov	sp, r7
    ec26:	bd90      	pop	{r4, r7, pc}
    ec28:	0000e9d9 	.word	0x0000e9d9
    ec2c:	20001a7c 	.word	0x20001a7c
    ec30:	0000ea61 	.word	0x0000ea61
    ec34:	00010b91 	.word	0x00010b91

0000ec38 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm>:
/******************************************************************************/
void CO_HB_Consumer_Class::CO_HBconsumer_process(
CO_HBconsumer_t        *HBcons,
bool_t                  NMTisPreOrOperational,
uint32_t                timeDifference_ms)
{
    ec38:	b590      	push	{r4, r7, lr}
    ec3a:	b089      	sub	sp, #36	; 0x24
    ec3c:	af02      	add	r7, sp, #8
    ec3e:	60f8      	str	r0, [r7, #12]
    ec40:	60b9      	str	r1, [r7, #8]
    ec42:	603b      	str	r3, [r7, #0]
    ec44:	4613      	mov	r3, r2
    ec46:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	uint8_t AllMonitoredOperationalCopy;
	CO_HBconsNode_t *monitoredNode;

	AllMonitoredOperationalCopy = 5;
    ec48:	2305      	movs	r3, #5
    ec4a:	75bb      	strb	r3, [r7, #22]
	monitoredNode = &HBcons->monitoredNodes[0];
    ec4c:	68bb      	ldr	r3, [r7, #8]
    ec4e:	689b      	ldr	r3, [r3, #8]
    ec50:	613b      	str	r3, [r7, #16]

	if(NMTisPreOrOperational){
    ec52:	79fb      	ldrb	r3, [r7, #7]
    ec54:	2b00      	cmp	r3, #0
    ec56:	d060      	beq.n	ed1a <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0xe2>
		for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
    ec58:	2300      	movs	r3, #0
    ec5a:	75fb      	strb	r3, [r7, #23]
    ec5c:	7dfb      	ldrb	r3, [r7, #23]
    ec5e:	68ba      	ldr	r2, [r7, #8]
    ec60:	7b12      	ldrb	r2, [r2, #12]
    ec62:	4293      	cmp	r3, r2
    ec64:	da72      	bge.n	ed4c <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x114>
			if(monitoredNode->time){/* is node monitored */
    ec66:	693b      	ldr	r3, [r7, #16]
    ec68:	689b      	ldr	r3, [r3, #8]
    ec6a:	2b00      	cmp	r3, #0
    ec6c:	d04e      	beq.n	ed0c <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0xd4>
				/* Verify if new Consumer Heartbeat message received */
				if(monitoredNode->CANrxNew){
    ec6e:	693b      	ldr	r3, [r7, #16]
    ec70:	7b1b      	ldrb	r3, [r3, #12]
    ec72:	2b00      	cmp	r3, #0
    ec74:	d00e      	beq.n	ec94 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x5c>
					if(monitoredNode->NMTstate){
    ec76:	693b      	ldr	r3, [r7, #16]
    ec78:	781b      	ldrb	r3, [r3, #0]
    ec7a:	2b00      	cmp	r3, #0
    ec7c:	d007      	beq.n	ec8e <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x56>
						/* not a bootup message */
						monitoredNode->monStarted = true;
    ec7e:	693b      	ldr	r3, [r7, #16]
    ec80:	2201      	movs	r2, #1
    ec82:	705a      	strb	r2, [r3, #1]
						monitoredNode->timeoutTimer = 0;  /* reset timer */
    ec84:	693b      	ldr	r3, [r7, #16]
    ec86:	2200      	movs	r2, #0
    ec88:	605a      	str	r2, [r3, #4]
						timeDifference_ms = 0;
    ec8a:	2300      	movs	r3, #0
    ec8c:	603b      	str	r3, [r7, #0]
					}
					monitoredNode->CANrxNew = false;
    ec8e:	693b      	ldr	r3, [r7, #16]
    ec90:	2200      	movs	r2, #0
    ec92:	731a      	strb	r2, [r3, #12]
				}
				/* Verify timeout */
				if(monitoredNode->timeoutTimer < monitoredNode->time) monitoredNode->timeoutTimer += timeDifference_ms;
    ec94:	693b      	ldr	r3, [r7, #16]
    ec96:	685a      	ldr	r2, [r3, #4]
    ec98:	693b      	ldr	r3, [r7, #16]
    ec9a:	689b      	ldr	r3, [r3, #8]
    ec9c:	429a      	cmp	r2, r3
    ec9e:	d205      	bcs.n	ecac <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x74>
    eca0:	693b      	ldr	r3, [r7, #16]
    eca2:	685a      	ldr	r2, [r3, #4]
    eca4:	683b      	ldr	r3, [r7, #0]
    eca6:	441a      	add	r2, r3
    eca8:	693b      	ldr	r3, [r7, #16]
    ecaa:	605a      	str	r2, [r3, #4]

				if(monitoredNode->monStarted){
    ecac:	693b      	ldr	r3, [r7, #16]
    ecae:	785b      	ldrb	r3, [r3, #1]
    ecb0:	2b00      	cmp	r3, #0
    ecb2:	d025      	beq.n	ed00 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0xc8>
					if(monitoredNode->timeoutTimer >= monitoredNode->time){
    ecb4:	693b      	ldr	r3, [r7, #16]
    ecb6:	685a      	ldr	r2, [r3, #4]
    ecb8:	693b      	ldr	r3, [r7, #16]
    ecba:	689b      	ldr	r3, [r3, #8]
    ecbc:	429a      	cmp	r2, r3
    ecbe:	d30f      	bcc.n	ece0 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0xa8>
						ptrCODriverClass->EM_ErrorReport(HBcons->em, CO_EM_HEARTBEAT_CONSUMER, CO_EMC_HEARTBEAT, i);
    ecc0:	4b26      	ldr	r3, [pc, #152]	; (ed5c <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x124>)
    ecc2:	681b      	ldr	r3, [r3, #0]
    ecc4:	1d18      	adds	r0, r3, #4
    ecc6:	68bb      	ldr	r3, [r7, #8]
    ecc8:	6819      	ldr	r1, [r3, #0]
    ecca:	7dfb      	ldrb	r3, [r7, #23]
    eccc:	9300      	str	r3, [sp, #0]
    ecce:	f248 1330 	movw	r3, #33072	; 0x8130
    ecd2:	221b      	movs	r2, #27
    ecd4:	4c22      	ldr	r4, [pc, #136]	; (ed60 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x128>)
    ecd6:	47a0      	blx	r4
						monitoredNode->NMTstate = 0;
    ecd8:	693b      	ldr	r3, [r7, #16]
    ecda:	2200      	movs	r2, #0
    ecdc:	701a      	strb	r2, [r3, #0]
    ecde:	e00f      	b.n	ed00 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0xc8>
					}
					else if(monitoredNode->NMTstate == 0){
    ece0:	693b      	ldr	r3, [r7, #16]
    ece2:	781b      	ldrb	r3, [r3, #0]
    ece4:	2b00      	cmp	r3, #0
    ece6:	d10b      	bne.n	ed00 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0xc8>
						/* there was a bootup message */
						ptrCODriverClass->EM_ErrorReport(HBcons->em, CO_EM_HB_CONSUMER_REMOTE_RESET, CO_EMC_HEARTBEAT, i);
    ece8:	4b1c      	ldr	r3, [pc, #112]	; (ed5c <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x124>)
    ecea:	681b      	ldr	r3, [r3, #0]
    ecec:	1d18      	adds	r0, r3, #4
    ecee:	68bb      	ldr	r3, [r7, #8]
    ecf0:	6819      	ldr	r1, [r3, #0]
    ecf2:	7dfb      	ldrb	r3, [r7, #23]
    ecf4:	9300      	str	r3, [sp, #0]
    ecf6:	f248 1330 	movw	r3, #33072	; 0x8130
    ecfa:	221c      	movs	r2, #28
    ecfc:	4c18      	ldr	r4, [pc, #96]	; (ed60 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x128>)
    ecfe:	47a0      	blx	r4
					}
				}
				if(monitoredNode->NMTstate != CO_NMT_OPERATIONAL)
    ed00:	693b      	ldr	r3, [r7, #16]
    ed02:	781b      	ldrb	r3, [r3, #0]
    ed04:	2b05      	cmp	r3, #5
    ed06:	d001      	beq.n	ed0c <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0xd4>
				AllMonitoredOperationalCopy = 0;
    ed08:	2300      	movs	r3, #0
    ed0a:	75bb      	strb	r3, [r7, #22]
			}
			monitoredNode++;
    ed0c:	693b      	ldr	r3, [r7, #16]
    ed0e:	3310      	adds	r3, #16
    ed10:	613b      	str	r3, [r7, #16]
		for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
    ed12:	7dfb      	ldrb	r3, [r7, #23]
    ed14:	3301      	adds	r3, #1
    ed16:	75fb      	strb	r3, [r7, #23]
    ed18:	e7a0      	b.n	ec5c <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x24>
		}
	}
	else{ /* not in (pre)operational state */
		for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
    ed1a:	2300      	movs	r3, #0
    ed1c:	75fb      	strb	r3, [r7, #23]
    ed1e:	7dfb      	ldrb	r3, [r7, #23]
    ed20:	68ba      	ldr	r2, [r7, #8]
    ed22:	7b12      	ldrb	r2, [r2, #12]
    ed24:	4293      	cmp	r3, r2
    ed26:	da0f      	bge.n	ed48 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x110>
			monitoredNode->NMTstate = 0;
    ed28:	693b      	ldr	r3, [r7, #16]
    ed2a:	2200      	movs	r2, #0
    ed2c:	701a      	strb	r2, [r3, #0]
			monitoredNode->CANrxNew = false;
    ed2e:	693b      	ldr	r3, [r7, #16]
    ed30:	2200      	movs	r2, #0
    ed32:	731a      	strb	r2, [r3, #12]
			monitoredNode->monStarted = false;
    ed34:	693b      	ldr	r3, [r7, #16]
    ed36:	2200      	movs	r2, #0
    ed38:	705a      	strb	r2, [r3, #1]
			monitoredNode++;
    ed3a:	693b      	ldr	r3, [r7, #16]
    ed3c:	3310      	adds	r3, #16
    ed3e:	613b      	str	r3, [r7, #16]
		for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
    ed40:	7dfb      	ldrb	r3, [r7, #23]
    ed42:	3301      	adds	r3, #1
    ed44:	75fb      	strb	r3, [r7, #23]
    ed46:	e7ea      	b.n	ed1e <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0xe6>
		}
		AllMonitoredOperationalCopy = 0;
    ed48:	2300      	movs	r3, #0
    ed4a:	75bb      	strb	r3, [r7, #22]
	}
	HBcons->allMonitoredOperational = AllMonitoredOperationalCopy;
    ed4c:	68bb      	ldr	r3, [r7, #8]
    ed4e:	7dba      	ldrb	r2, [r7, #22]
    ed50:	735a      	strb	r2, [r3, #13]
}
    ed52:	bf00      	nop
    ed54:	371c      	adds	r7, #28
    ed56:	46bd      	mov	sp, r7
    ed58:	bd90      	pop	{r4, r7, pc}
    ed5a:	bf00      	nop
    ed5c:	20001a7c 	.word	0x20001a7c
    ed60:	0000e6b1 	.word	0x0000e6b1

0000ed64 <_ZN20CO_HB_Consumer_Class10HB_SetNodeEh>:

void	CO_HB_Consumer_Class::HB_SetNode(uint8_t nd){
    ed64:	b480      	push	{r7}
    ed66:	b083      	sub	sp, #12
    ed68:	af00      	add	r7, sp, #0
    ed6a:	6078      	str	r0, [r7, #4]
    ed6c:	460b      	mov	r3, r1
    ed6e:	70fb      	strb	r3, [r7, #3]
	coNode=nd;
    ed70:	687b      	ldr	r3, [r7, #4]
    ed72:	78fa      	ldrb	r2, [r7, #3]
    ed74:	711a      	strb	r2, [r3, #4]
    ed76:	bf00      	nop
    ed78:	370c      	adds	r7, #12
    ed7a:	46bd      	mov	sp, r7
    ed7c:	bc80      	pop	{r7}
    ed7e:	4770      	bx	lr

0000ed80 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t>:
#include "CO_NMT_Heartbeat_Class.h"
#include "CO_Driver_Class.h"



static void CO_NMT_receive(void *object, const CO_CANrxMsg_t *msg){
    ed80:	b580      	push	{r7, lr}
    ed82:	b084      	sub	sp, #16
    ed84:	af00      	add	r7, sp, #0
    ed86:	6078      	str	r0, [r7, #4]
    ed88:	6039      	str	r1, [r7, #0]
    CO_NMT_t *NMT;
    uint8_t nodeId;

    NMT = (CO_NMT_t*)object;   /* this is the correct pointer type of the first argument */
    ed8a:	687b      	ldr	r3, [r7, #4]
    ed8c:	60fb      	str	r3, [r7, #12]

    nodeId = msg->data[1];
    ed8e:	683b      	ldr	r3, [r7, #0]
    ed90:	7d9b      	ldrb	r3, [r3, #22]
    ed92:	72fb      	strb	r3, [r7, #11]

    if((msg->DLC == 2) && ((nodeId == 0) || (nodeId == NMT->nodeId))){
    ed94:	683b      	ldr	r3, [r7, #0]
    ed96:	7d1b      	ldrb	r3, [r3, #20]
    ed98:	2b02      	cmp	r3, #2
    ed9a:	d146      	bne.n	ee2a <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0xaa>
    ed9c:	7afb      	ldrb	r3, [r7, #11]
    ed9e:	2b00      	cmp	r3, #0
    eda0:	d004      	beq.n	edac <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x2c>
    eda2:	68fb      	ldr	r3, [r7, #12]
    eda4:	7a9b      	ldrb	r3, [r3, #10]
    eda6:	7afa      	ldrb	r2, [r7, #11]
    eda8:	429a      	cmp	r2, r3
    edaa:	d13e      	bne.n	ee2a <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0xaa>
        uint8_t command = msg->data[0];
    edac:	683b      	ldr	r3, [r7, #0]
    edae:	7d5b      	ldrb	r3, [r3, #21]
    edb0:	72bb      	strb	r3, [r7, #10]
        uint8_t currentOperatingState = NMT->operatingState;
    edb2:	68fb      	ldr	r3, [r7, #12]
    edb4:	781b      	ldrb	r3, [r3, #0]
    edb6:	727b      	strb	r3, [r7, #9]

        switch(command){
    edb8:	7abb      	ldrb	r3, [r7, #10]
    edba:	2b80      	cmp	r3, #128	; 0x80
    edbc:	d019      	beq.n	edf2 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x72>
    edbe:	2b80      	cmp	r3, #128	; 0x80
    edc0:	dc04      	bgt.n	edcc <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x4c>
    edc2:	2b01      	cmp	r3, #1
    edc4:	d007      	beq.n	edd6 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x56>
    edc6:	2b02      	cmp	r3, #2
    edc8:	d00f      	beq.n	edea <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x6a>
    edca:	e01f      	b.n	ee0c <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
    edcc:	2b81      	cmp	r3, #129	; 0x81
    edce:	d014      	beq.n	edfa <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x7a>
    edd0:	2b82      	cmp	r3, #130	; 0x82
    edd2:	d016      	beq.n	ee02 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x82>
    edd4:	e01a      	b.n	ee0c <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
            case CO_NMT_ENTER_OPERATIONAL:
                if((*NMT->emPr->errorRegister) == 0U){
    edd6:	68fb      	ldr	r3, [r7, #12]
    edd8:	695b      	ldr	r3, [r3, #20]
    edda:	681b      	ldr	r3, [r3, #0]
    eddc:	781b      	ldrb	r3, [r3, #0]
    edde:	2b00      	cmp	r3, #0
    ede0:	d113      	bne.n	ee0a <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8a>
                    NMT->operatingState = CO_NMT_OPERATIONAL;
    ede2:	68fb      	ldr	r3, [r7, #12]
    ede4:	2205      	movs	r2, #5
    ede6:	701a      	strb	r2, [r3, #0]
                }
                break;
    ede8:	e00f      	b.n	ee0a <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8a>
            case CO_NMT_ENTER_STOPPED:
                NMT->operatingState = CO_NMT_STOPPED;
    edea:	68fb      	ldr	r3, [r7, #12]
    edec:	2204      	movs	r2, #4
    edee:	701a      	strb	r2, [r3, #0]
                break;
    edf0:	e00c      	b.n	ee0c <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
            case CO_NMT_ENTER_PRE_OPERATIONAL:
                NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
    edf2:	68fb      	ldr	r3, [r7, #12]
    edf4:	227f      	movs	r2, #127	; 0x7f
    edf6:	701a      	strb	r2, [r3, #0]
                break;
    edf8:	e008      	b.n	ee0c <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
            case CO_NMT_RESET_NODE:
                NMT->resetCommand = CO_RESET_APP;
    edfa:	68fb      	ldr	r3, [r7, #12]
    edfc:	2202      	movs	r2, #2
    edfe:	725a      	strb	r2, [r3, #9]
                break;
    ee00:	e004      	b.n	ee0c <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
            case CO_NMT_RESET_COMMUNICATION:
                NMT->resetCommand = CO_RESET_COMM;
    ee02:	68fb      	ldr	r3, [r7, #12]
    ee04:	2201      	movs	r2, #1
    ee06:	725a      	strb	r2, [r3, #9]
                break;
    ee08:	e000      	b.n	ee0c <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
                break;
    ee0a:	bf00      	nop
        }

        if(NMT->ptrState!=NULL && currentOperatingState!=NMT->operatingState){
    ee0c:	68fb      	ldr	r3, [r7, #12]
    ee0e:	69db      	ldr	r3, [r3, #28]
    ee10:	2b00      	cmp	r3, #0
    ee12:	d00a      	beq.n	ee2a <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0xaa>
    ee14:	68fb      	ldr	r3, [r7, #12]
    ee16:	781b      	ldrb	r3, [r3, #0]
    ee18:	7a7a      	ldrb	r2, [r7, #9]
    ee1a:	429a      	cmp	r2, r3
    ee1c:	d005      	beq.n	ee2a <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0xaa>
            NMT->ptrState((CO_NMT_internalState_t)NMT->operatingState);
    ee1e:	68fb      	ldr	r3, [r7, #12]
    ee20:	69db      	ldr	r3, [r3, #28]
    ee22:	68fa      	ldr	r2, [r7, #12]
    ee24:	7812      	ldrb	r2, [r2, #0]
    ee26:	4610      	mov	r0, r2
    ee28:	4798      	blx	r3
        }
    }
}
    ee2a:	bf00      	nop
    ee2c:	3710      	adds	r7, #16
    ee2e:	46bd      	mov	sp, r7
    ee30:	bd80      	pop	{r7, pc}

0000ee32 <_ZN22CO_NMT_Heartbeat_ClassC1Ev>:
// default constructor
CO_NMT_Heartbeat_Class::CO_NMT_Heartbeat_Class()
    ee32:	b480      	push	{r7}
    ee34:	b083      	sub	sp, #12
    ee36:	af00      	add	r7, sp, #0
    ee38:	6078      	str	r0, [r7, #4]
{
} //CO_NMT_Heartbeat
    ee3a:	687b      	ldr	r3, [r7, #4]
    ee3c:	4618      	mov	r0, r3
    ee3e:	370c      	adds	r7, #12
    ee40:	46bd      	mov	sp, r7
    ee42:	bc80      	pop	{r7}
    ee44:	4770      	bx	lr

0000ee46 <_ZN22CO_NMT_Heartbeat_ClassD1Ev>:

// default destructor
CO_NMT_Heartbeat_Class::~CO_NMT_Heartbeat_Class()
    ee46:	b480      	push	{r7}
    ee48:	b083      	sub	sp, #12
    ee4a:	af00      	add	r7, sp, #0
    ee4c:	6078      	str	r0, [r7, #4]
{
} //~CO_NMT_Heartbeat
    ee4e:	687b      	ldr	r3, [r7, #4]
    ee50:	4618      	mov	r0, r3
    ee52:	370c      	adds	r7, #12
    ee54:	46bd      	mov	sp, r7
    ee56:	bc80      	pop	{r7}
    ee58:	4770      	bx	lr
	...

0000ee5c <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm>:
        uint32_t                NMT_rxIdx,
        uint32_t                CANidRxNMT,
        CO_CANmodule_t         *HB_CANdev,
        uint32_t                HB_txIdx,
        uint32_t                CANidTxHB)
{
    ee5c:	b5b0      	push	{r4, r5, r7, lr}
    ee5e:	b088      	sub	sp, #32
    ee60:	af04      	add	r7, sp, #16
    ee62:	60f8      	str	r0, [r7, #12]
    ee64:	60b9      	str	r1, [r7, #8]
    ee66:	607a      	str	r2, [r7, #4]
    ee68:	70fb      	strb	r3, [r7, #3]
    /* verify arguments */
    if(NMT_Init==NULL || emPr==NULL || NMT_CANdev==NULL || HB_CANdev==NULL){
    ee6a:	68bb      	ldr	r3, [r7, #8]
    ee6c:	2b00      	cmp	r3, #0
    ee6e:	d008      	beq.n	ee82 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x26>
    ee70:	687b      	ldr	r3, [r7, #4]
    ee72:	2b00      	cmp	r3, #0
    ee74:	d005      	beq.n	ee82 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x26>
    ee76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ee78:	2b00      	cmp	r3, #0
    ee7a:	d002      	beq.n	ee82 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x26>
    ee7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ee7e:	2b00      	cmp	r3, #0
    ee80:	d102      	bne.n	ee88 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x2c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    ee82:	f04f 33ff 	mov.w	r3, #4294967295
    ee86:	e062      	b.n	ef4e <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xf2>
    }else{
		NMT=NMT_Init;
    ee88:	68fb      	ldr	r3, [r7, #12]
    ee8a:	68ba      	ldr	r2, [r7, #8]
    ee8c:	601a      	str	r2, [r3, #0]
	}

    /* blinking bytes */
    NMT->LEDflickering          = 0;
    ee8e:	68fb      	ldr	r3, [r7, #12]
    ee90:	681b      	ldr	r3, [r3, #0]
    ee92:	2200      	movs	r2, #0
    ee94:	705a      	strb	r2, [r3, #1]
    NMT->LEDblinking            = 0;
    ee96:	68fb      	ldr	r3, [r7, #12]
    ee98:	681b      	ldr	r3, [r3, #0]
    ee9a:	2200      	movs	r2, #0
    ee9c:	709a      	strb	r2, [r3, #2]
    NMT->LEDsingleFlash         = 0;
    ee9e:	68fb      	ldr	r3, [r7, #12]
    eea0:	681b      	ldr	r3, [r3, #0]
    eea2:	2200      	movs	r2, #0
    eea4:	70da      	strb	r2, [r3, #3]
    NMT->LEDdoubleFlash         = 0;
    eea6:	68fb      	ldr	r3, [r7, #12]
    eea8:	681b      	ldr	r3, [r3, #0]
    eeaa:	2200      	movs	r2, #0
    eeac:	711a      	strb	r2, [r3, #4]
    NMT->LEDtripleFlash         = 0;
    eeae:	68fb      	ldr	r3, [r7, #12]
    eeb0:	681b      	ldr	r3, [r3, #0]
    eeb2:	2200      	movs	r2, #0
    eeb4:	715a      	strb	r2, [r3, #5]
    NMT->LEDquadrupleFlash      = 0;
    eeb6:	68fb      	ldr	r3, [r7, #12]
    eeb8:	681b      	ldr	r3, [r3, #0]
    eeba:	2200      	movs	r2, #0
    eebc:	719a      	strb	r2, [r3, #6]

    /* Configure object variables */
    NMT->operatingState         = CO_NMT_INITIALIZING;
    eebe:	68fb      	ldr	r3, [r7, #12]
    eec0:	681b      	ldr	r3, [r3, #0]
    eec2:	2200      	movs	r2, #0
    eec4:	701a      	strb	r2, [r3, #0]
    NMT->LEDgreenRun            = -1;
    eec6:	68fb      	ldr	r3, [r7, #12]
    eec8:	681b      	ldr	r3, [r3, #0]
    eeca:	22ff      	movs	r2, #255	; 0xff
    eecc:	71da      	strb	r2, [r3, #7]
    NMT->LEDredError            = 1;
    eece:	68fb      	ldr	r3, [r7, #12]
    eed0:	681b      	ldr	r3, [r3, #0]
    eed2:	2201      	movs	r2, #1
    eed4:	721a      	strb	r2, [r3, #8]
    NMT->nodeId                 = nodeId;
    eed6:	68fb      	ldr	r3, [r7, #12]
    eed8:	681b      	ldr	r3, [r3, #0]
    eeda:	78fa      	ldrb	r2, [r7, #3]
    eedc:	729a      	strb	r2, [r3, #10]
    NMT->firstHBTime            = firstHBTime;
    eede:	68fb      	ldr	r3, [r7, #12]
    eee0:	681b      	ldr	r3, [r3, #0]
    eee2:	6a3a      	ldr	r2, [r7, #32]
    eee4:	611a      	str	r2, [r3, #16]
    NMT->resetCommand           = 0;
    eee6:	68fb      	ldr	r3, [r7, #12]
    eee8:	681b      	ldr	r3, [r3, #0]
    eeea:	2200      	movs	r2, #0
    eeec:	725a      	strb	r2, [r3, #9]
    NMT->HBproducerTimer        = 0xFFFF;
    eeee:	68fb      	ldr	r3, [r7, #12]
    eef0:	681b      	ldr	r3, [r3, #0]
    eef2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    eef6:	60da      	str	r2, [r3, #12]
    NMT->emPr                   = emPr;
    eef8:	68fb      	ldr	r3, [r7, #12]
    eefa:	681b      	ldr	r3, [r3, #0]
    eefc:	687a      	ldr	r2, [r7, #4]
    eefe:	615a      	str	r2, [r3, #20]
    NMT->ptrState             = NULL;
    ef00:	68fb      	ldr	r3, [r7, #12]
    ef02:	681b      	ldr	r3, [r3, #0]
    ef04:	2200      	movs	r2, #0
    ef06:	61da      	str	r2, [r3, #28]

    /* configure NMT CAN reception */
   ptrCODriverClass->CAN_Rx_BufferInit(
    ef08:	4b13      	ldr	r3, [pc, #76]	; (ef58 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    ef0a:	6818      	ldr	r0, [r3, #0]
      
            NMT_rxIdx,          /* rx buffer index */
            CANidRxNMT,         /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)NMT,         /* object passed to receive function */
    ef0c:	68fb      	ldr	r3, [r7, #12]
    ef0e:	681b      	ldr	r3, [r3, #0]
            CO_NMT_receive);    /* this function will process received message */
    ef10:	4a12      	ldr	r2, [pc, #72]	; (ef5c <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x100>)
    ef12:	9202      	str	r2, [sp, #8]
    ef14:	9301      	str	r3, [sp, #4]
    ef16:	2300      	movs	r3, #0
    ef18:	9300      	str	r3, [sp, #0]
    ef1a:	f240 73ff 	movw	r3, #2047	; 0x7ff
    ef1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    ef20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    ef22:	4c0f      	ldr	r4, [pc, #60]	; (ef60 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x104>)
    ef24:	47a0      	blx	r4

    /* configure HB CAN transmission */
    NMT->HB_CANdev = HB_CANdev;
    ef26:	68fb      	ldr	r3, [r7, #12]
    ef28:	681b      	ldr	r3, [r3, #0]
    ef2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    ef2c:	619a      	str	r2, [r3, #24]
    NMT->HB_TXbuff =ptrCODriverClass->CAN_Tx_BufferInit(
    ef2e:	68fb      	ldr	r3, [r7, #12]
    ef30:	681c      	ldr	r4, [r3, #0]
    ef32:	4b09      	ldr	r3, [pc, #36]	; (ef58 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    ef34:	6818      	ldr	r0, [r3, #0]
    ef36:	2300      	movs	r3, #0
    ef38:	9301      	str	r3, [sp, #4]
    ef3a:	2301      	movs	r3, #1
    ef3c:	9300      	str	r3, [sp, #0]
    ef3e:	2300      	movs	r3, #0
    ef40:	6bba      	ldr	r2, [r7, #56]	; 0x38
    ef42:	6b79      	ldr	r1, [r7, #52]	; 0x34
    ef44:	4d07      	ldr	r5, [pc, #28]	; (ef64 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x108>)
    ef46:	47a8      	blx	r5
    ef48:	4603      	mov	r3, r0
    ef4a:	6223      	str	r3, [r4, #32]
            CANidTxHB,          /* CAN identifier */
            0,                  /* rtr */
            1,                  /* number of data bytes */
            0);                 /* synchronous message flag bit */

    return CO_ERROR_NO;
    ef4c:	2300      	movs	r3, #0
}
    ef4e:	4618      	mov	r0, r3
    ef50:	3710      	adds	r7, #16
    ef52:	46bd      	mov	sp, r7
    ef54:	bdb0      	pop	{r4, r5, r7, pc}
    ef56:	bf00      	nop
    ef58:	20001a7c 	.word	0x20001a7c
    ef5c:	0000ed81 	.word	0x0000ed81
    ef60:	0000da71 	.word	0x0000da71
    ef64:	0000db71 	.word	0x0000db71

0000ef68 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm>:
        uint32_t                HBtime,
        uint32_t                NMTstartup,
        uint8_t                 errorRegister,
        const uint8_t           errorBehavior[],
        uint32_t               *timerNext_ms)
{
    ef68:	b580      	push	{r7, lr}
    ef6a:	b086      	sub	sp, #24
    ef6c:	af00      	add	r7, sp, #0
    ef6e:	60f8      	str	r0, [r7, #12]
    ef70:	60b9      	str	r1, [r7, #8]
    ef72:	607a      	str	r2, [r7, #4]
    ef74:	603b      	str	r3, [r7, #0]
    uint8_t CANpassive;

    uint8_t currentOperatingState = NMT->operatingState;
    ef76:	68fb      	ldr	r3, [r7, #12]
    ef78:	681b      	ldr	r3, [r3, #0]
    ef7a:	781b      	ldrb	r3, [r3, #0]
    ef7c:	75bb      	strb	r3, [r7, #22]

    NMT->HBproducerTimer += timeDifference_ms;
    ef7e:	68fb      	ldr	r3, [r7, #12]
    ef80:	681b      	ldr	r3, [r3, #0]
    ef82:	68fa      	ldr	r2, [r7, #12]
    ef84:	6812      	ldr	r2, [r2, #0]
    ef86:	68d1      	ldr	r1, [r2, #12]
    ef88:	68ba      	ldr	r2, [r7, #8]
    ef8a:	440a      	add	r2, r1
    ef8c:	60da      	str	r2, [r3, #12]

    /* Heartbeat producer message & Bootup message */
    if((HBtime != 0 && NMT->HBproducerTimer >= HBtime) || NMT->operatingState == CO_NMT_INITIALIZING){
    ef8e:	687b      	ldr	r3, [r7, #4]
    ef90:	2b00      	cmp	r3, #0
    ef92:	d005      	beq.n	efa0 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x38>
    ef94:	68fb      	ldr	r3, [r7, #12]
    ef96:	681b      	ldr	r3, [r3, #0]
    ef98:	68da      	ldr	r2, [r3, #12]
    ef9a:	687b      	ldr	r3, [r7, #4]
    ef9c:	429a      	cmp	r2, r3
    ef9e:	d204      	bcs.n	efaa <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x42>
    efa0:	68fb      	ldr	r3, [r7, #12]
    efa2:	681b      	ldr	r3, [r3, #0]
    efa4:	781b      	ldrb	r3, [r3, #0]
    efa6:	2b00      	cmp	r3, #0
    efa8:	d139      	bne.n	f01e <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0xb6>

        /* Start from the beginning. If OS is slow, time sliding may occur. However, heartbeat is
         * not for synchronization, it is for health report. */
        NMT->HBproducerTimer = 0;
    efaa:	68fb      	ldr	r3, [r7, #12]
    efac:	681b      	ldr	r3, [r3, #0]
    efae:	2200      	movs	r2, #0
    efb0:	60da      	str	r2, [r3, #12]

        NMT->HB_TXbuff->data[0] = NMT->operatingState;
    efb2:	68fb      	ldr	r3, [r7, #12]
    efb4:	681b      	ldr	r3, [r3, #0]
    efb6:	6a1b      	ldr	r3, [r3, #32]
    efb8:	68fa      	ldr	r2, [r7, #12]
    efba:	6812      	ldr	r2, [r2, #0]
    efbc:	7812      	ldrb	r2, [r2, #0]
    efbe:	715a      	strb	r2, [r3, #5]
        ptrCODriverClass->CAN_Send(NMT->HB_TXbuff);
    efc0:	4b8d      	ldr	r3, [pc, #564]	; (f1f8 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x290>)
    efc2:	681a      	ldr	r2, [r3, #0]
    efc4:	68fb      	ldr	r3, [r7, #12]
    efc6:	681b      	ldr	r3, [r3, #0]
    efc8:	6a1b      	ldr	r3, [r3, #32]
    efca:	4619      	mov	r1, r3
    efcc:	4610      	mov	r0, r2
    efce:	4b8b      	ldr	r3, [pc, #556]	; (f1fc <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x294>)
    efd0:	4798      	blx	r3

        if(NMT->operatingState == CO_NMT_INITIALIZING){
    efd2:	68fb      	ldr	r3, [r7, #12]
    efd4:	681b      	ldr	r3, [r3, #0]
    efd6:	781b      	ldrb	r3, [r3, #0]
    efd8:	2b00      	cmp	r3, #0
    efda:	d120      	bne.n	f01e <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0xb6>
            if(HBtime > NMT->firstHBTime) NMT->HBproducerTimer = HBtime - NMT->firstHBTime;
    efdc:	68fb      	ldr	r3, [r7, #12]
    efde:	681b      	ldr	r3, [r3, #0]
    efe0:	691a      	ldr	r2, [r3, #16]
    efe2:	687b      	ldr	r3, [r7, #4]
    efe4:	429a      	cmp	r2, r3
    efe6:	d208      	bcs.n	effa <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x92>
    efe8:	68fb      	ldr	r3, [r7, #12]
    efea:	681b      	ldr	r3, [r3, #0]
    efec:	68fa      	ldr	r2, [r7, #12]
    efee:	6812      	ldr	r2, [r2, #0]
    eff0:	6912      	ldr	r2, [r2, #16]
    eff2:	6879      	ldr	r1, [r7, #4]
    eff4:	1a8a      	subs	r2, r1, r2
    eff6:	60da      	str	r2, [r3, #12]
    eff8:	e003      	b.n	f002 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x9a>
            else                          NMT->HBproducerTimer = 0;
    effa:	68fb      	ldr	r3, [r7, #12]
    effc:	681b      	ldr	r3, [r3, #0]
    effe:	2200      	movs	r2, #0
    f000:	60da      	str	r2, [r3, #12]

            if((NMTstartup & 0x04) == 0) NMT->operatingState = CO_NMT_OPERATIONAL;
    f002:	683b      	ldr	r3, [r7, #0]
    f004:	f003 0304 	and.w	r3, r3, #4
    f008:	2b00      	cmp	r3, #0
    f00a:	d104      	bne.n	f016 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0xae>
    f00c:	68fb      	ldr	r3, [r7, #12]
    f00e:	681b      	ldr	r3, [r3, #0]
    f010:	2205      	movs	r2, #5
    f012:	701a      	strb	r2, [r3, #0]
    f014:	e003      	b.n	f01e <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0xb6>
            else                         NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
    f016:	68fb      	ldr	r3, [r7, #12]
    f018:	681b      	ldr	r3, [r3, #0]
    f01a:	227f      	movs	r2, #127	; 0x7f
    f01c:	701a      	strb	r2, [r3, #0]
        }
    }


    /* Calculate, when next Heartbeat needs to be send and lower timerNext_ms if necessary. */
    if(HBtime != 0 && timerNext_ms != NULL){
    f01e:	687b      	ldr	r3, [r7, #4]
    f020:	2b00      	cmp	r3, #0
    f022:	d01a      	beq.n	f05a <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0xf2>
    f024:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f026:	2b00      	cmp	r3, #0
    f028:	d017      	beq.n	f05a <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0xf2>
        if(NMT->HBproducerTimer < HBtime){
    f02a:	68fb      	ldr	r3, [r7, #12]
    f02c:	681b      	ldr	r3, [r3, #0]
    f02e:	68da      	ldr	r2, [r3, #12]
    f030:	687b      	ldr	r3, [r7, #4]
    f032:	429a      	cmp	r2, r3
    f034:	d20e      	bcs.n	f054 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0xec>
            uint32_t diff = HBtime - NMT->HBproducerTimer;
    f036:	68fb      	ldr	r3, [r7, #12]
    f038:	681b      	ldr	r3, [r3, #0]
    f03a:	68db      	ldr	r3, [r3, #12]
    f03c:	687a      	ldr	r2, [r7, #4]
    f03e:	1ad3      	subs	r3, r2, r3
    f040:	613b      	str	r3, [r7, #16]
            if(*timerNext_ms > diff){
    f042:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f044:	681a      	ldr	r2, [r3, #0]
    f046:	693b      	ldr	r3, [r7, #16]
    f048:	429a      	cmp	r2, r3
    f04a:	d906      	bls.n	f05a <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0xf2>
                *timerNext_ms = diff;
    f04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f04e:	693a      	ldr	r2, [r7, #16]
    f050:	601a      	str	r2, [r3, #0]
    f052:	e002      	b.n	f05a <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0xf2>
            }
        }else{
            *timerNext_ms = 0;
    f054:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f056:	2200      	movs	r2, #0
    f058:	601a      	str	r2, [r3, #0]
        }
    }


    /* CAN passive flag */
    CANpassive = 0;
    f05a:	2300      	movs	r3, #0
    f05c:	75fb      	strb	r3, [r7, #23]
    if(ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_CAN_TX_BUS_PASSIVE) || ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_CAN_RX_BUS_PASSIVE))
    f05e:	4b66      	ldr	r3, [pc, #408]	; (f1f8 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x290>)
    f060:	681b      	ldr	r3, [r3, #0]
    f062:	1d18      	adds	r0, r3, #4
    f064:	68fb      	ldr	r3, [r7, #12]
    f066:	681b      	ldr	r3, [r3, #0]
    f068:	695b      	ldr	r3, [r3, #20]
    f06a:	691b      	ldr	r3, [r3, #16]
    f06c:	2207      	movs	r2, #7
    f06e:	4619      	mov	r1, r3
    f070:	4b63      	ldr	r3, [pc, #396]	; (f200 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x298>)
    f072:	4798      	blx	r3
    f074:	4603      	mov	r3, r0
    f076:	2b00      	cmp	r3, #0
    f078:	d10d      	bne.n	f096 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x12e>
    f07a:	4b5f      	ldr	r3, [pc, #380]	; (f1f8 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x290>)
    f07c:	681b      	ldr	r3, [r3, #0]
    f07e:	1d18      	adds	r0, r3, #4
    f080:	68fb      	ldr	r3, [r7, #12]
    f082:	681b      	ldr	r3, [r3, #0]
    f084:	695b      	ldr	r3, [r3, #20]
    f086:	691b      	ldr	r3, [r3, #16]
    f088:	2206      	movs	r2, #6
    f08a:	4619      	mov	r1, r3
    f08c:	4b5c      	ldr	r3, [pc, #368]	; (f200 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x298>)
    f08e:	4798      	blx	r3
    f090:	4603      	mov	r3, r0
    f092:	2b00      	cmp	r3, #0
    f094:	d001      	beq.n	f09a <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x132>
    f096:	2301      	movs	r3, #1
    f098:	e000      	b.n	f09c <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x134>
    f09a:	2300      	movs	r3, #0
    f09c:	2b00      	cmp	r3, #0
    f09e:	d001      	beq.n	f0a4 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x13c>
        CANpassive = 1;
    f0a0:	2301      	movs	r3, #1
    f0a2:	75fb      	strb	r3, [r7, #23]


    /* CANopen green RUN LED (DR 303-3) */
    switch(NMT->operatingState){
    f0a4:	68fb      	ldr	r3, [r7, #12]
    f0a6:	681b      	ldr	r3, [r3, #0]
    f0a8:	781b      	ldrb	r3, [r3, #0]
    f0aa:	2b05      	cmp	r3, #5
    f0ac:	d013      	beq.n	f0d6 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x16e>
    f0ae:	2b7f      	cmp	r3, #127	; 0x7f
    f0b0:	d009      	beq.n	f0c6 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x15e>
    f0b2:	2b04      	cmp	r3, #4
    f0b4:	d114      	bne.n	f0e0 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x178>
        case CO_NMT_STOPPED:          NMT->LEDgreenRun = NMT->LEDsingleFlash;   break;
    f0b6:	68fb      	ldr	r3, [r7, #12]
    f0b8:	681b      	ldr	r3, [r3, #0]
    f0ba:	68fa      	ldr	r2, [r7, #12]
    f0bc:	6812      	ldr	r2, [r2, #0]
    f0be:	f992 2003 	ldrsb.w	r2, [r2, #3]
    f0c2:	71da      	strb	r2, [r3, #7]
    f0c4:	e00c      	b.n	f0e0 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x178>
        case CO_NMT_PRE_OPERATIONAL:  NMT->LEDgreenRun = NMT->LEDblinking;      break;
    f0c6:	68fb      	ldr	r3, [r7, #12]
    f0c8:	681b      	ldr	r3, [r3, #0]
    f0ca:	68fa      	ldr	r2, [r7, #12]
    f0cc:	6812      	ldr	r2, [r2, #0]
    f0ce:	f992 2002 	ldrsb.w	r2, [r2, #2]
    f0d2:	71da      	strb	r2, [r3, #7]
    f0d4:	e004      	b.n	f0e0 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x178>
        case CO_NMT_OPERATIONAL:      NMT->LEDgreenRun = 1;                     break;
    f0d6:	68fb      	ldr	r3, [r7, #12]
    f0d8:	681b      	ldr	r3, [r3, #0]
    f0da:	2201      	movs	r2, #1
    f0dc:	71da      	strb	r2, [r3, #7]
    f0de:	bf00      	nop
    }


    /* CANopen red ERROR LED (DR 303-3) */
    if(ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_CAN_TX_BUS_OFF))
    f0e0:	4b45      	ldr	r3, [pc, #276]	; (f1f8 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x290>)
    f0e2:	681b      	ldr	r3, [r3, #0]
    f0e4:	1d18      	adds	r0, r3, #4
    f0e6:	68fb      	ldr	r3, [r7, #12]
    f0e8:	681b      	ldr	r3, [r3, #0]
    f0ea:	695b      	ldr	r3, [r3, #20]
    f0ec:	691b      	ldr	r3, [r3, #16]
    f0ee:	2212      	movs	r2, #18
    f0f0:	4619      	mov	r1, r3
    f0f2:	4b43      	ldr	r3, [pc, #268]	; (f200 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x298>)
    f0f4:	4798      	blx	r3
    f0f6:	4603      	mov	r3, r0
    f0f8:	2b00      	cmp	r3, #0
    f0fa:	bf14      	ite	ne
    f0fc:	2301      	movne	r3, #1
    f0fe:	2300      	moveq	r3, #0
    f100:	b2db      	uxtb	r3, r3
    f102:	2b00      	cmp	r3, #0
    f104:	d004      	beq.n	f110 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x1a8>
        NMT->LEDredError = 1;
    f106:	68fb      	ldr	r3, [r7, #12]
    f108:	681b      	ldr	r3, [r3, #0]
    f10a:	2201      	movs	r2, #1
    f10c:	721a      	strb	r2, [r3, #8]
    f10e:	e07d      	b.n	f20c <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x2a4>

    else if(ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_SYNC_TIME_OUT))
    f110:	4b39      	ldr	r3, [pc, #228]	; (f1f8 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x290>)
    f112:	681b      	ldr	r3, [r3, #0]
    f114:	1d18      	adds	r0, r3, #4
    f116:	68fb      	ldr	r3, [r7, #12]
    f118:	681b      	ldr	r3, [r3, #0]
    f11a:	695b      	ldr	r3, [r3, #20]
    f11c:	691b      	ldr	r3, [r3, #16]
    f11e:	2218      	movs	r2, #24
    f120:	4619      	mov	r1, r3
    f122:	4b37      	ldr	r3, [pc, #220]	; (f200 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x298>)
    f124:	4798      	blx	r3
    f126:	4603      	mov	r3, r0
    f128:	2b00      	cmp	r3, #0
    f12a:	bf14      	ite	ne
    f12c:	2301      	movne	r3, #1
    f12e:	2300      	moveq	r3, #0
    f130:	b2db      	uxtb	r3, r3
    f132:	2b00      	cmp	r3, #0
    f134:	d007      	beq.n	f146 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x1de>
        NMT->LEDredError = NMT->LEDtripleFlash;
    f136:	68fb      	ldr	r3, [r7, #12]
    f138:	681b      	ldr	r3, [r3, #0]
    f13a:	68fa      	ldr	r2, [r7, #12]
    f13c:	6812      	ldr	r2, [r2, #0]
    f13e:	f992 2005 	ldrsb.w	r2, [r2, #5]
    f142:	721a      	strb	r2, [r3, #8]
    f144:	e062      	b.n	f20c <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x2a4>

    else if(ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_HEARTBEAT_CONSUMER) || ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_HB_CONSUMER_REMOTE_RESET))
    f146:	4b2c      	ldr	r3, [pc, #176]	; (f1f8 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x290>)
    f148:	681b      	ldr	r3, [r3, #0]
    f14a:	1d18      	adds	r0, r3, #4
    f14c:	68fb      	ldr	r3, [r7, #12]
    f14e:	681b      	ldr	r3, [r3, #0]
    f150:	695b      	ldr	r3, [r3, #20]
    f152:	691b      	ldr	r3, [r3, #16]
    f154:	221b      	movs	r2, #27
    f156:	4619      	mov	r1, r3
    f158:	4b29      	ldr	r3, [pc, #164]	; (f200 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x298>)
    f15a:	4798      	blx	r3
    f15c:	4603      	mov	r3, r0
    f15e:	2b00      	cmp	r3, #0
    f160:	d10d      	bne.n	f17e <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x216>
    f162:	4b25      	ldr	r3, [pc, #148]	; (f1f8 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x290>)
    f164:	681b      	ldr	r3, [r3, #0]
    f166:	1d18      	adds	r0, r3, #4
    f168:	68fb      	ldr	r3, [r7, #12]
    f16a:	681b      	ldr	r3, [r3, #0]
    f16c:	695b      	ldr	r3, [r3, #20]
    f16e:	691b      	ldr	r3, [r3, #16]
    f170:	221c      	movs	r2, #28
    f172:	4619      	mov	r1, r3
    f174:	4b22      	ldr	r3, [pc, #136]	; (f200 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x298>)
    f176:	4798      	blx	r3
    f178:	4603      	mov	r3, r0
    f17a:	2b00      	cmp	r3, #0
    f17c:	d001      	beq.n	f182 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x21a>
    f17e:	2301      	movs	r3, #1
    f180:	e000      	b.n	f184 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x21c>
    f182:	2300      	movs	r3, #0
    f184:	2b00      	cmp	r3, #0
    f186:	d007      	beq.n	f198 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x230>
        NMT->LEDredError = NMT->LEDdoubleFlash;
    f188:	68fb      	ldr	r3, [r7, #12]
    f18a:	681b      	ldr	r3, [r3, #0]
    f18c:	68fa      	ldr	r2, [r7, #12]
    f18e:	6812      	ldr	r2, [r2, #0]
    f190:	f992 2004 	ldrsb.w	r2, [r2, #4]
    f194:	721a      	strb	r2, [r3, #8]
    f196:	e039      	b.n	f20c <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x2a4>

    else if(CANpassive ||  ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_CAN_BUS_WARNING))
    f198:	7dfb      	ldrb	r3, [r7, #23]
    f19a:	2b00      	cmp	r3, #0
    f19c:	d10d      	bne.n	f1ba <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x252>
    f19e:	4b16      	ldr	r3, [pc, #88]	; (f1f8 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x290>)
    f1a0:	681b      	ldr	r3, [r3, #0]
    f1a2:	1d18      	adds	r0, r3, #4
    f1a4:	68fb      	ldr	r3, [r7, #12]
    f1a6:	681b      	ldr	r3, [r3, #0]
    f1a8:	695b      	ldr	r3, [r3, #20]
    f1aa:	691b      	ldr	r3, [r3, #16]
    f1ac:	2201      	movs	r2, #1
    f1ae:	4619      	mov	r1, r3
    f1b0:	4b13      	ldr	r3, [pc, #76]	; (f200 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x298>)
    f1b2:	4798      	blx	r3
    f1b4:	4603      	mov	r3, r0
    f1b6:	2b00      	cmp	r3, #0
    f1b8:	d001      	beq.n	f1be <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x256>
    f1ba:	2301      	movs	r3, #1
    f1bc:	e000      	b.n	f1c0 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x258>
    f1be:	2300      	movs	r3, #0
    f1c0:	2b00      	cmp	r3, #0
    f1c2:	d007      	beq.n	f1d4 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>
        NMT->LEDredError = NMT->LEDsingleFlash;
    f1c4:	68fb      	ldr	r3, [r7, #12]
    f1c6:	681b      	ldr	r3, [r3, #0]
    f1c8:	68fa      	ldr	r2, [r7, #12]
    f1ca:	6812      	ldr	r2, [r2, #0]
    f1cc:	f992 2003 	ldrsb.w	r2, [r2, #3]
    f1d0:	721a      	strb	r2, [r3, #8]
    f1d2:	e01b      	b.n	f20c <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x2a4>

    else if(errorRegister)
    f1d4:	f897 3020 	ldrb.w	r3, [r7, #32]
    f1d8:	2b00      	cmp	r3, #0
    f1da:	d013      	beq.n	f204 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x29c>
        NMT->LEDredError = (NMT->LEDblinking>=0)?-1:1;
    f1dc:	68fb      	ldr	r3, [r7, #12]
    f1de:	681b      	ldr	r3, [r3, #0]
    f1e0:	68fa      	ldr	r2, [r7, #12]
    f1e2:	6812      	ldr	r2, [r2, #0]
    f1e4:	f992 2002 	ldrsb.w	r2, [r2, #2]
    f1e8:	2a00      	cmp	r2, #0
    f1ea:	db02      	blt.n	f1f2 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x28a>
    f1ec:	f04f 32ff 	mov.w	r2, #4294967295
    f1f0:	e000      	b.n	f1f4 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x28c>
    f1f2:	2201      	movs	r2, #1
    f1f4:	721a      	strb	r2, [r3, #8]
    f1f6:	e009      	b.n	f20c <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x2a4>
    f1f8:	20001a7c 	.word	0x20001a7c
    f1fc:	0000dc1d 	.word	0x0000dc1d
    f200:	0000e951 	.word	0x0000e951

    else
        NMT->LEDredError = -1;
    f204:	68fb      	ldr	r3, [r7, #12]
    f206:	681b      	ldr	r3, [r3, #0]
    f208:	22ff      	movs	r2, #255	; 0xff
    f20a:	721a      	strb	r2, [r3, #8]


    /* in case of error enter pre-operational state */
    if(errorBehavior && (NMT->operatingState == CO_NMT_OPERATIONAL)){
    f20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f20e:	2b00      	cmp	r3, #0
    f210:	f000 80ca 	beq.w	f3a8 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x440>
    f214:	68fb      	ldr	r3, [r7, #12]
    f216:	681b      	ldr	r3, [r3, #0]
    f218:	781b      	ldrb	r3, [r3, #0]
    f21a:	2b05      	cmp	r3, #5
    f21c:	f040 80c4 	bne.w	f3a8 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x440>
        if(CANpassive && (errorBehavior[2] == 0 || errorBehavior[2] == 2)) errorRegister |= 0x10;
    f220:	7dfb      	ldrb	r3, [r7, #23]
    f222:	2b00      	cmp	r3, #0
    f224:	d00f      	beq.n	f246 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x2de>
    f226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f228:	3302      	adds	r3, #2
    f22a:	781b      	ldrb	r3, [r3, #0]
    f22c:	2b00      	cmp	r3, #0
    f22e:	d004      	beq.n	f23a <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x2d2>
    f230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f232:	3302      	adds	r3, #2
    f234:	781b      	ldrb	r3, [r3, #0]
    f236:	2b02      	cmp	r3, #2
    f238:	d105      	bne.n	f246 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x2de>
    f23a:	f897 3020 	ldrb.w	r3, [r7, #32]
    f23e:	f043 0310 	orr.w	r3, r3, #16
    f242:	f887 3020 	strb.w	r3, [r7, #32]

        if(errorRegister){
    f246:	f897 3020 	ldrb.w	r3, [r7, #32]
    f24a:	2b00      	cmp	r3, #0
    f24c:	f000 80ac 	beq.w	f3a8 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x440>
            /* Communication error */
            if(errorRegister & CO_ERR_REG_COMM_ERR){
    f250:	f897 3020 	ldrb.w	r3, [r7, #32]
    f254:	f003 0310 	and.w	r3, r3, #16
    f258:	2b00      	cmp	r3, #0
    f25a:	d053      	beq.n	f304 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x39c>
                if(errorBehavior[1] == 0){
    f25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f25e:	3301      	adds	r3, #1
    f260:	781b      	ldrb	r3, [r3, #0]
    f262:	2b00      	cmp	r3, #0
    f264:	d104      	bne.n	f270 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x308>
                    NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
    f266:	68fb      	ldr	r3, [r7, #12]
    f268:	681b      	ldr	r3, [r3, #0]
    f26a:	227f      	movs	r2, #127	; 0x7f
    f26c:	701a      	strb	r2, [r3, #0]
    f26e:	e049      	b.n	f304 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x39c>
                }
                else if(errorBehavior[1] == 2){
    f270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f272:	3301      	adds	r3, #1
    f274:	781b      	ldrb	r3, [r3, #0]
    f276:	2b02      	cmp	r3, #2
    f278:	d104      	bne.n	f284 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x31c>
                    NMT->operatingState = CO_NMT_STOPPED;
    f27a:	68fb      	ldr	r3, [r7, #12]
    f27c:	681b      	ldr	r3, [r3, #0]
    f27e:	2204      	movs	r2, #4
    f280:	701a      	strb	r2, [r3, #0]
    f282:	e03f      	b.n	f304 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x39c>
                }
                else if( ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_CAN_TX_BUS_OFF)
    f284:	4b55      	ldr	r3, [pc, #340]	; (f3dc <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x474>)
    f286:	681b      	ldr	r3, [r3, #0]
    f288:	1d18      	adds	r0, r3, #4
    f28a:	68fb      	ldr	r3, [r7, #12]
    f28c:	681b      	ldr	r3, [r3, #0]
    f28e:	695b      	ldr	r3, [r3, #20]
    f290:	691b      	ldr	r3, [r3, #16]
    f292:	2212      	movs	r2, #18
    f294:	4619      	mov	r1, r3
    f296:	4b52      	ldr	r3, [pc, #328]	; (f3e0 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x478>)
    f298:	4798      	blx	r3
    f29a:	4603      	mov	r3, r0
                     ||  ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_HEARTBEAT_CONSUMER)
                     ||  ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_HB_CONSUMER_REMOTE_RESET))
    f29c:	2b00      	cmp	r3, #0
    f29e:	d11b      	bne.n	f2d8 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x370>
                     ||  ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_HEARTBEAT_CONSUMER)
    f2a0:	4b4e      	ldr	r3, [pc, #312]	; (f3dc <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x474>)
    f2a2:	681b      	ldr	r3, [r3, #0]
    f2a4:	1d18      	adds	r0, r3, #4
    f2a6:	68fb      	ldr	r3, [r7, #12]
    f2a8:	681b      	ldr	r3, [r3, #0]
    f2aa:	695b      	ldr	r3, [r3, #20]
    f2ac:	691b      	ldr	r3, [r3, #16]
    f2ae:	221b      	movs	r2, #27
    f2b0:	4619      	mov	r1, r3
    f2b2:	4b4b      	ldr	r3, [pc, #300]	; (f3e0 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x478>)
    f2b4:	4798      	blx	r3
    f2b6:	4603      	mov	r3, r0
    f2b8:	2b00      	cmp	r3, #0
    f2ba:	d10d      	bne.n	f2d8 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x370>
                     ||  ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_HB_CONSUMER_REMOTE_RESET))
    f2bc:	4b47      	ldr	r3, [pc, #284]	; (f3dc <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x474>)
    f2be:	681b      	ldr	r3, [r3, #0]
    f2c0:	1d18      	adds	r0, r3, #4
    f2c2:	68fb      	ldr	r3, [r7, #12]
    f2c4:	681b      	ldr	r3, [r3, #0]
    f2c6:	695b      	ldr	r3, [r3, #20]
    f2c8:	691b      	ldr	r3, [r3, #16]
    f2ca:	221c      	movs	r2, #28
    f2cc:	4619      	mov	r1, r3
    f2ce:	4b44      	ldr	r3, [pc, #272]	; (f3e0 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x478>)
    f2d0:	4798      	blx	r3
    f2d2:	4603      	mov	r3, r0
    f2d4:	2b00      	cmp	r3, #0
    f2d6:	d001      	beq.n	f2dc <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x374>
    f2d8:	2301      	movs	r3, #1
    f2da:	e000      	b.n	f2de <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x376>
    f2dc:	2300      	movs	r3, #0
                else if( ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_CAN_TX_BUS_OFF)
    f2de:	2b00      	cmp	r3, #0
    f2e0:	d010      	beq.n	f304 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x39c>
                {
                    if(errorBehavior[0] == 0){
    f2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f2e4:	781b      	ldrb	r3, [r3, #0]
    f2e6:	2b00      	cmp	r3, #0
    f2e8:	d104      	bne.n	f2f4 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x38c>
                        NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
    f2ea:	68fb      	ldr	r3, [r7, #12]
    f2ec:	681b      	ldr	r3, [r3, #0]
    f2ee:	227f      	movs	r2, #127	; 0x7f
    f2f0:	701a      	strb	r2, [r3, #0]
    f2f2:	e007      	b.n	f304 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x39c>
                    }
                    else if(errorBehavior[0] == 2){
    f2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f2f6:	781b      	ldrb	r3, [r3, #0]
    f2f8:	2b02      	cmp	r3, #2
    f2fa:	d103      	bne.n	f304 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x39c>
                        NMT->operatingState = CO_NMT_STOPPED;
    f2fc:	68fb      	ldr	r3, [r7, #12]
    f2fe:	681b      	ldr	r3, [r3, #0]
    f300:	2204      	movs	r2, #4
    f302:	701a      	strb	r2, [r3, #0]
                    }
                }
            }

            /* Generic error */
            if(errorRegister & CO_ERR_REG_GENERIC_ERR){
    f304:	f897 3020 	ldrb.w	r3, [r7, #32]
    f308:	f003 0301 	and.w	r3, r3, #1
    f30c:	2b00      	cmp	r3, #0
    f30e:	d012      	beq.n	f336 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x3ce>
                if      (errorBehavior[3] == 0) NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
    f310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f312:	3303      	adds	r3, #3
    f314:	781b      	ldrb	r3, [r3, #0]
    f316:	2b00      	cmp	r3, #0
    f318:	d104      	bne.n	f324 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x3bc>
    f31a:	68fb      	ldr	r3, [r7, #12]
    f31c:	681b      	ldr	r3, [r3, #0]
    f31e:	227f      	movs	r2, #127	; 0x7f
    f320:	701a      	strb	r2, [r3, #0]
    f322:	e008      	b.n	f336 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x3ce>
                else if (errorBehavior[3] == 2) NMT->operatingState = CO_NMT_STOPPED;
    f324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f326:	3303      	adds	r3, #3
    f328:	781b      	ldrb	r3, [r3, #0]
    f32a:	2b02      	cmp	r3, #2
    f32c:	d103      	bne.n	f336 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x3ce>
    f32e:	68fb      	ldr	r3, [r7, #12]
    f330:	681b      	ldr	r3, [r3, #0]
    f332:	2204      	movs	r2, #4
    f334:	701a      	strb	r2, [r3, #0]
            }

            /* Device profile error */
            if(errorRegister & CO_ERR_REG_DEV_PROFILE){
    f336:	f897 3020 	ldrb.w	r3, [r7, #32]
    f33a:	f003 0320 	and.w	r3, r3, #32
    f33e:	2b00      	cmp	r3, #0
    f340:	d012      	beq.n	f368 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x400>
                if      (errorBehavior[4] == 0) NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
    f342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f344:	3304      	adds	r3, #4
    f346:	781b      	ldrb	r3, [r3, #0]
    f348:	2b00      	cmp	r3, #0
    f34a:	d104      	bne.n	f356 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x3ee>
    f34c:	68fb      	ldr	r3, [r7, #12]
    f34e:	681b      	ldr	r3, [r3, #0]
    f350:	227f      	movs	r2, #127	; 0x7f
    f352:	701a      	strb	r2, [r3, #0]
    f354:	e008      	b.n	f368 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x400>
                else if (errorBehavior[4] == 2) NMT->operatingState = CO_NMT_STOPPED;
    f356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f358:	3304      	adds	r3, #4
    f35a:	781b      	ldrb	r3, [r3, #0]
    f35c:	2b02      	cmp	r3, #2
    f35e:	d103      	bne.n	f368 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x400>
    f360:	68fb      	ldr	r3, [r7, #12]
    f362:	681b      	ldr	r3, [r3, #0]
    f364:	2204      	movs	r2, #4
    f366:	701a      	strb	r2, [r3, #0]
            }

            /* Manufacturer specific error */
            if(errorRegister & CO_ERR_REG_MANUFACTURER){
    f368:	f997 3020 	ldrsb.w	r3, [r7, #32]
    f36c:	2b00      	cmp	r3, #0
    f36e:	da12      	bge.n	f396 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x42e>
                if      (errorBehavior[5] == 0) NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
    f370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f372:	3305      	adds	r3, #5
    f374:	781b      	ldrb	r3, [r3, #0]
    f376:	2b00      	cmp	r3, #0
    f378:	d104      	bne.n	f384 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x41c>
    f37a:	68fb      	ldr	r3, [r7, #12]
    f37c:	681b      	ldr	r3, [r3, #0]
    f37e:	227f      	movs	r2, #127	; 0x7f
    f380:	701a      	strb	r2, [r3, #0]
    f382:	e008      	b.n	f396 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x42e>
                else if (errorBehavior[5] == 2) NMT->operatingState = CO_NMT_STOPPED;
    f384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f386:	3305      	adds	r3, #5
    f388:	781b      	ldrb	r3, [r3, #0]
    f38a:	2b02      	cmp	r3, #2
    f38c:	d103      	bne.n	f396 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x42e>
    f38e:	68fb      	ldr	r3, [r7, #12]
    f390:	681b      	ldr	r3, [r3, #0]
    f392:	2204      	movs	r2, #4
    f394:	701a      	strb	r2, [r3, #0]
            }

            /* if operational state is lost, send HB immediately. */
            if(NMT->operatingState != CO_NMT_OPERATIONAL)
    f396:	68fb      	ldr	r3, [r7, #12]
    f398:	681b      	ldr	r3, [r3, #0]
    f39a:	781b      	ldrb	r3, [r3, #0]
    f39c:	2b05      	cmp	r3, #5
    f39e:	d003      	beq.n	f3a8 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x440>
                NMT->HBproducerTimer = HBtime;
    f3a0:	68fb      	ldr	r3, [r7, #12]
    f3a2:	681b      	ldr	r3, [r3, #0]
    f3a4:	687a      	ldr	r2, [r7, #4]
    f3a6:	60da      	str	r2, [r3, #12]
        }
    }

    if(NMT->ptrState!=NULL && currentOperatingState!=NMT->operatingState){
    f3a8:	68fb      	ldr	r3, [r7, #12]
    f3aa:	681b      	ldr	r3, [r3, #0]
    f3ac:	69db      	ldr	r3, [r3, #28]
    f3ae:	2b00      	cmp	r3, #0
    f3b0:	d00d      	beq.n	f3ce <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x466>
    f3b2:	68fb      	ldr	r3, [r7, #12]
    f3b4:	681b      	ldr	r3, [r3, #0]
    f3b6:	781b      	ldrb	r3, [r3, #0]
    f3b8:	7dba      	ldrb	r2, [r7, #22]
    f3ba:	429a      	cmp	r2, r3
    f3bc:	d007      	beq.n	f3ce <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x466>
        NMT->ptrState((CO_NMT_internalState_t)NMT->operatingState);
    f3be:	68fb      	ldr	r3, [r7, #12]
    f3c0:	681b      	ldr	r3, [r3, #0]
    f3c2:	69db      	ldr	r3, [r3, #28]
    f3c4:	68fa      	ldr	r2, [r7, #12]
    f3c6:	6812      	ldr	r2, [r2, #0]
    f3c8:	7812      	ldrb	r2, [r2, #0]
    f3ca:	4610      	mov	r0, r2
    f3cc:	4798      	blx	r3
    }

    return (CO_NMT_reset_cmd_t)NMT->resetCommand;
    f3ce:	68fb      	ldr	r3, [r7, #12]
    f3d0:	681b      	ldr	r3, [r3, #0]
    f3d2:	7a5b      	ldrb	r3, [r3, #9]
}
    f3d4:	4618      	mov	r0, r3
    f3d6:	3718      	adds	r7, #24
    f3d8:	46bd      	mov	sp, r7
    f3da:	bd80      	pop	{r7, pc}
    f3dc:	20001a7c 	.word	0x20001a7c
    f3e0:	0000e951 	.word	0x0000e951

0000f3e4 <_ZN12CO_PDO_ClassC1Ev>:


#include "CO_PDO_Class.h"
#include "CO_Driver_Class.h"
// default constructor
CO_PDO_Class::CO_PDO_Class()
    f3e4:	b480      	push	{r7}
    f3e6:	b083      	sub	sp, #12
    f3e8:	af00      	add	r7, sp, #0
    f3ea:	6078      	str	r0, [r7, #4]
{
} //CO_PDO_Class
    f3ec:	687b      	ldr	r3, [r7, #4]
    f3ee:	4618      	mov	r0, r3
    f3f0:	370c      	adds	r7, #12
    f3f2:	46bd      	mov	sp, r7
    f3f4:	bc80      	pop	{r7}
    f3f6:	4770      	bx	lr

0000f3f8 <_ZN12CO_PDO_ClassD1Ev>:

// default destructor
CO_PDO_Class::~CO_PDO_Class()
    f3f8:	b480      	push	{r7}
    f3fa:	b083      	sub	sp, #12
    f3fc:	af00      	add	r7, sp, #0
    f3fe:	6078      	str	r0, [r7, #4]
{
} //~CO_PDO_Class
    f400:	687b      	ldr	r3, [r7, #4]
    f402:	4618      	mov	r0, r3
    f404:	370c      	adds	r7, #12
    f406:	46bd      	mov	sp, r7
    f408:	bc80      	pop	{r7}
    f40a:	4770      	bx	lr

0000f40c <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t>:
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 * If new message arrives and previous message wasn't processed yet, then
 * previous message will be lost and overwritten by new message. That's OK with PDOs.
 */
static void CO_PDO_receive(void *object, const CO_CANrxMsg_t *msg){
    f40c:	b480      	push	{r7}
    f40e:	b085      	sub	sp, #20
    f410:	af00      	add	r7, sp, #0
    f412:	6078      	str	r0, [r7, #4]
    f414:	6039      	str	r1, [r7, #0]
    CO_RPDO_t *RPDO;

    RPDO = (CO_RPDO_t*)object;   /* this is the correct pointer type of the first argument */
    f416:	687b      	ldr	r3, [r7, #4]
    f418:	60fb      	str	r3, [r7, #12]

    if( (RPDO->valid) &&
    f41a:	68fb      	ldr	r3, [r7, #12]
    f41c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
    f420:	2b00      	cmp	r3, #0
    f422:	d070      	beq.n	f506 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0xfa>
        (*RPDO->operatingState == CO_NMT_OPERATIONAL) &&
    f424:	68fb      	ldr	r3, [r7, #12]
    f426:	695b      	ldr	r3, [r3, #20]
    f428:	781b      	ldrb	r3, [r3, #0]
    if( (RPDO->valid) &&
    f42a:	2b05      	cmp	r3, #5
    f42c:	d16b      	bne.n	f506 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0xfa>
        (msg->DLC >= RPDO->dataLength))
    f42e:	683b      	ldr	r3, [r7, #0]
    f430:	7d1b      	ldrb	r3, [r3, #20]
    f432:	461a      	mov	r2, r3
    f434:	68fb      	ldr	r3, [r7, #12]
    f436:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
        (*RPDO->operatingState == CO_NMT_OPERATIONAL) &&
    f43a:	429a      	cmp	r2, r3
    f43c:	db63      	blt.n	f506 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0xfa>
    {
        if(RPDO->synchronous && RPDO->SYNC->CANrxToggle) {
    f43e:	68fb      	ldr	r3, [r7, #12]
    f440:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
    f444:	2b00      	cmp	r3, #0
    f446:	d032      	beq.n	f4ae <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0xa2>
    f448:	68fb      	ldr	r3, [r7, #12]
    f44a:	689b      	ldr	r3, [r3, #8]
    f44c:	7edb      	ldrb	r3, [r3, #27]
    f44e:	2b00      	cmp	r3, #0
    f450:	d02d      	beq.n	f4ae <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0xa2>
            /* copy data into second buffer and set 'new message' flag */
            RPDO->CANrxData[1][0] = msg->data[0];
    f452:	683b      	ldr	r3, [r7, #0]
    f454:	7d5a      	ldrb	r2, [r3, #21]
    f456:	68fb      	ldr	r3, [r7, #12]
    f458:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            RPDO->CANrxData[1][1] = msg->data[1];
    f45c:	683b      	ldr	r3, [r7, #0]
    f45e:	7d9a      	ldrb	r2, [r3, #22]
    f460:	68fb      	ldr	r3, [r7, #12]
    f462:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
            RPDO->CANrxData[1][2] = msg->data[2];
    f466:	683b      	ldr	r3, [r7, #0]
    f468:	7dda      	ldrb	r2, [r3, #23]
    f46a:	68fb      	ldr	r3, [r7, #12]
    f46c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            RPDO->CANrxData[1][3] = msg->data[3];
    f470:	683b      	ldr	r3, [r7, #0]
    f472:	7e1a      	ldrb	r2, [r3, #24]
    f474:	68fb      	ldr	r3, [r7, #12]
    f476:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            RPDO->CANrxData[1][4] = msg->data[4];
    f47a:	683b      	ldr	r3, [r7, #0]
    f47c:	7e5a      	ldrb	r2, [r3, #25]
    f47e:	68fb      	ldr	r3, [r7, #12]
    f480:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
            RPDO->CANrxData[1][5] = msg->data[5];
    f484:	683b      	ldr	r3, [r7, #0]
    f486:	7e9a      	ldrb	r2, [r3, #26]
    f488:	68fb      	ldr	r3, [r7, #12]
    f48a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            RPDO->CANrxData[1][6] = msg->data[6];
    f48e:	683b      	ldr	r3, [r7, #0]
    f490:	7eda      	ldrb	r2, [r3, #27]
    f492:	68fb      	ldr	r3, [r7, #12]
    f494:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            RPDO->CANrxData[1][7] = msg->data[7];
    f498:	683b      	ldr	r3, [r7, #0]
    f49a:	7f1a      	ldrb	r2, [r3, #28]
    f49c:	68fb      	ldr	r3, [r7, #12]
    f49e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

            RPDO->CANrxNew[1] = true;
    f4a2:	68fb      	ldr	r3, [r7, #12]
    f4a4:	2201      	movs	r2, #1
    f4a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    f4aa:	bf00      	nop
            RPDO->CANrxData[0][7] = msg->data[7];

            RPDO->CANrxNew[0] = true;
        }
    }
}
    f4ac:	e02b      	b.n	f506 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0xfa>
            RPDO->CANrxData[0][0] = msg->data[0];
    f4ae:	683b      	ldr	r3, [r7, #0]
    f4b0:	7d5a      	ldrb	r2, [r3, #21]
    f4b2:	68fb      	ldr	r3, [r7, #12]
    f4b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
            RPDO->CANrxData[0][1] = msg->data[1];
    f4b8:	683b      	ldr	r3, [r7, #0]
    f4ba:	7d9a      	ldrb	r2, [r3, #22]
    f4bc:	68fb      	ldr	r3, [r7, #12]
    f4be:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
            RPDO->CANrxData[0][2] = msg->data[2];
    f4c2:	683b      	ldr	r3, [r7, #0]
    f4c4:	7dda      	ldrb	r2, [r3, #23]
    f4c6:	68fb      	ldr	r3, [r7, #12]
    f4c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            RPDO->CANrxData[0][3] = msg->data[3];
    f4cc:	683b      	ldr	r3, [r7, #0]
    f4ce:	7e1a      	ldrb	r2, [r3, #24]
    f4d0:	68fb      	ldr	r3, [r7, #12]
    f4d2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
            RPDO->CANrxData[0][4] = msg->data[4];
    f4d6:	683b      	ldr	r3, [r7, #0]
    f4d8:	7e5a      	ldrb	r2, [r3, #25]
    f4da:	68fb      	ldr	r3, [r7, #12]
    f4dc:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
            RPDO->CANrxData[0][5] = msg->data[5];
    f4e0:	683b      	ldr	r3, [r7, #0]
    f4e2:	7e9a      	ldrb	r2, [r3, #26]
    f4e4:	68fb      	ldr	r3, [r7, #12]
    f4e6:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
            RPDO->CANrxData[0][6] = msg->data[6];
    f4ea:	683b      	ldr	r3, [r7, #0]
    f4ec:	7eda      	ldrb	r2, [r3, #27]
    f4ee:	68fb      	ldr	r3, [r7, #12]
    f4f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            RPDO->CANrxData[0][7] = msg->data[7];
    f4f4:	683b      	ldr	r3, [r7, #0]
    f4f6:	7f1a      	ldrb	r2, [r3, #28]
    f4f8:	68fb      	ldr	r3, [r7, #12]
    f4fa:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
            RPDO->CANrxNew[0] = true;
    f4fe:	68fb      	ldr	r3, [r7, #12]
    f500:	2201      	movs	r2, #1
    f502:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
    f506:	bf00      	nop
    f508:	3714      	adds	r7, #20
    f50a:	46bd      	mov	sp, r7
    f50c:	bc80      	pop	{r7}
    f50e:	4770      	bx	lr

0000f510 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm>:
 *
 * @param RPDO RPDO object.
 * @param COB_IDUsedByRPDO _RPDO communication parameter_, _COB-ID for PDO_ variable
 * from Object dictionary (index 0x1400+, subindex 1).
 */
static void CO_RPDOconfigCom(CO_RPDO_t* RPDO, uint32_t COB_IDUsedByRPDO){
    f510:	b590      	push	{r4, r7, lr}
    f512:	b089      	sub	sp, #36	; 0x24
    f514:	af04      	add	r7, sp, #16
    f516:	6078      	str	r0, [r7, #4]
    f518:	6039      	str	r1, [r7, #0]
    uint32_t ID;
    CO_ReturnError_t r;

    ID = (uint32_t)COB_IDUsedByRPDO;
    f51a:	683b      	ldr	r3, [r7, #0]
    f51c:	60fb      	str	r3, [r7, #12]

    /* is RPDO used? */
    if((COB_IDUsedByRPDO & 0xBFFFF800L) == 0 && RPDO->dataLength && ID){
    f51e:	683a      	ldr	r2, [r7, #0]
    f520:	4b2d      	ldr	r3, [pc, #180]	; (f5d8 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xc8>)
    f522:	4013      	ands	r3, r2
    f524:	2b00      	cmp	r3, #0
    f526:	d123      	bne.n	f570 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x60>
    f528:	687b      	ldr	r3, [r7, #4]
    f52a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
    f52e:	2b00      	cmp	r3, #0
    f530:	d01e      	beq.n	f570 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x60>
    f532:	68fb      	ldr	r3, [r7, #12]
    f534:	2b00      	cmp	r3, #0
    f536:	d01b      	beq.n	f570 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x60>
        /* is used default COB-ID? */
        if(ID == RPDO->defaultCOB_ID) ID += RPDO->nodeId;
    f538:	687b      	ldr	r3, [r7, #4]
    f53a:	69da      	ldr	r2, [r3, #28]
    f53c:	68fb      	ldr	r3, [r7, #12]
    f53e:	429a      	cmp	r2, r3
    f540:	d105      	bne.n	f54e <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x3e>
    f542:	687b      	ldr	r3, [r7, #4]
    f544:	7e1b      	ldrb	r3, [r3, #24]
    f546:	461a      	mov	r2, r3
    f548:	68fb      	ldr	r3, [r7, #12]
    f54a:	4413      	add	r3, r2
    f54c:	60fb      	str	r3, [r7, #12]
        RPDO->valid = true;
    f54e:	687b      	ldr	r3, [r7, #4]
    f550:	2201      	movs	r2, #1
    f552:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RPDO->synchronous = (RPDO->RPDOCommPar->transmissionType <= 240) ? true : false;
    f556:	687b      	ldr	r3, [r7, #4]
    f558:	68db      	ldr	r3, [r3, #12]
    f55a:	7a1b      	ldrb	r3, [r3, #8]
    f55c:	2bf0      	cmp	r3, #240	; 0xf0
    f55e:	bfd4      	ite	le
    f560:	2301      	movle	r3, #1
    f562:	2300      	movgt	r3, #0
    f564:	b2db      	uxtb	r3, r3
    f566:	461a      	mov	r2, r3
    f568:	687b      	ldr	r3, [r7, #4]
    f56a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    f56e:	e00d      	b.n	f58c <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x7c>
    }
    else{
        ID = 0;
    f570:	2300      	movs	r3, #0
    f572:	60fb      	str	r3, [r7, #12]
        RPDO->valid = false;
    f574:	687b      	ldr	r3, [r7, #4]
    f576:	2200      	movs	r2, #0
    f578:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
    f57c:	687b      	ldr	r3, [r7, #4]
    f57e:	2200      	movs	r2, #0
    f580:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    f584:	687b      	ldr	r3, [r7, #4]
    f586:	2200      	movs	r2, #0
    f588:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    r = ptrCODriverClass->CAN_Rx_BufferInit(
    f58c:	4b13      	ldr	r3, [pc, #76]	; (f5dc <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xcc>)
    f58e:	6818      	ldr	r0, [r3, #0]
    f590:	687b      	ldr	r3, [r7, #4]
    f592:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
            RPDO->CANdevRxIdx,      /* rx buffer index */
            ID,                     /* CAN identifier */
            0x7FF,                  /* mask */
            0,                      /* rtr */
            (void*)RPDO,            /* object passed to receive function */
            CO_PDO_receive);        /* this function will process received message */
    f594:	4b12      	ldr	r3, [pc, #72]	; (f5e0 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xd0>)
    f596:	9302      	str	r3, [sp, #8]
    f598:	687b      	ldr	r3, [r7, #4]
    f59a:	9301      	str	r3, [sp, #4]
    f59c:	2300      	movs	r3, #0
    f59e:	9300      	str	r3, [sp, #0]
    f5a0:	f240 73ff 	movw	r3, #2047	; 0x7ff
    f5a4:	68fa      	ldr	r2, [r7, #12]
    f5a6:	4c0f      	ldr	r4, [pc, #60]	; (f5e4 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xd4>)
    f5a8:	47a0      	blx	r4
    f5aa:	4603      	mov	r3, r0
    f5ac:	72fb      	strb	r3, [r7, #11]
    if(r != CO_ERROR_NO){
    f5ae:	f997 300b 	ldrsb.w	r3, [r7, #11]
    f5b2:	2b00      	cmp	r3, #0
    f5b4:	d00b      	beq.n	f5ce <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xbe>
        RPDO->valid = false;
    f5b6:	687b      	ldr	r3, [r7, #4]
    f5b8:	2200      	movs	r2, #0
    f5ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
    f5be:	687b      	ldr	r3, [r7, #4]
    f5c0:	2200      	movs	r2, #0
    f5c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    f5c6:	687b      	ldr	r3, [r7, #4]
    f5c8:	2200      	movs	r2, #0
    f5ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
}
    f5ce:	bf00      	nop
    f5d0:	3714      	adds	r7, #20
    f5d2:	46bd      	mov	sp, r7
    f5d4:	bd90      	pop	{r4, r7, pc}
    f5d6:	bf00      	nop
    f5d8:	bffff800 	.word	0xbffff800
    f5dc:	20001a7c 	.word	0x20001a7c
    f5e0:	0000f40d 	.word	0x0000f40d
    f5e4:	0000da71 	.word	0x0000da71

0000f5e8 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh>:
 * @param TPDO TPDO object.
 * @param COB_IDUsedByTPDO _TPDO communication parameter_, _COB-ID for PDO_ variable
 * from Object dictionary (index 0x1400+, subindex 1).
 * @param syncFlag Indicate, if TPDO is synchronous.
 */
static void CO_TPDOconfigCom(CO_TPDO_t* TPDO, uint32_t COB_IDUsedByTPDO, uint8_t syncFlag){
    f5e8:	b590      	push	{r4, r7, lr}
    f5ea:	b089      	sub	sp, #36	; 0x24
    f5ec:	af02      	add	r7, sp, #8
    f5ee:	60f8      	str	r0, [r7, #12]
    f5f0:	60b9      	str	r1, [r7, #8]
    f5f2:	4613      	mov	r3, r2
    f5f4:	71fb      	strb	r3, [r7, #7]
    uint32_t ID;

    ID = (uint32_t)COB_IDUsedByTPDO;
    f5f6:	68bb      	ldr	r3, [r7, #8]
    f5f8:	617b      	str	r3, [r7, #20]

    /* is TPDO used? */
    if((COB_IDUsedByTPDO & 0xBFFFF800L) == 0 && TPDO->dataLength && ID){
    f5fa:	68ba      	ldr	r2, [r7, #8]
    f5fc:	4b1c      	ldr	r3, [pc, #112]	; (f670 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x88>)
    f5fe:	4013      	ands	r3, r2
    f600:	2b00      	cmp	r3, #0
    f602:	d115      	bne.n	f630 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x48>
    f604:	68fb      	ldr	r3, [r7, #12]
    f606:	7f9b      	ldrb	r3, [r3, #30]
    f608:	2b00      	cmp	r3, #0
    f60a:	d011      	beq.n	f630 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x48>
    f60c:	697b      	ldr	r3, [r7, #20]
    f60e:	2b00      	cmp	r3, #0
    f610:	d00e      	beq.n	f630 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x48>
        /* is used default COB-ID? */
        if(ID == TPDO->defaultCOB_ID) ID += TPDO->nodeId;
    f612:	68fb      	ldr	r3, [r7, #12]
    f614:	699a      	ldr	r2, [r3, #24]
    f616:	697b      	ldr	r3, [r7, #20]
    f618:	429a      	cmp	r2, r3
    f61a:	d105      	bne.n	f628 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x40>
    f61c:	68fb      	ldr	r3, [r7, #12]
    f61e:	7d1b      	ldrb	r3, [r3, #20]
    f620:	461a      	mov	r2, r3
    f622:	697b      	ldr	r3, [r7, #20]
    f624:	4413      	add	r3, r2
    f626:	617b      	str	r3, [r7, #20]
        TPDO->valid = true;
    f628:	68fb      	ldr	r3, [r7, #12]
    f62a:	2201      	movs	r2, #1
    f62c:	775a      	strb	r2, [r3, #29]
    f62e:	e004      	b.n	f63a <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x52>
    }
    else{
        ID = 0;
    f630:	2300      	movs	r3, #0
    f632:	617b      	str	r3, [r7, #20]
        TPDO->valid = false;
    f634:	68fb      	ldr	r3, [r7, #12]
    f636:	2200      	movs	r2, #0
    f638:	775a      	strb	r2, [r3, #29]
    }

    TPDO->CANtxBuff = ptrCODriverClass->CAN_Tx_BufferInit(
    f63a:	4b0e      	ldr	r3, [pc, #56]	; (f674 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x8c>)
    f63c:	6818      	ldr	r0, [r3, #0]
    f63e:	68fb      	ldr	r3, [r7, #12]
    f640:	6d59      	ldr	r1, [r3, #84]	; 0x54
    f642:	68fb      	ldr	r3, [r7, #12]
    f644:	7f9b      	ldrb	r3, [r3, #30]
    f646:	79fa      	ldrb	r2, [r7, #7]
    f648:	9201      	str	r2, [sp, #4]
    f64a:	9300      	str	r3, [sp, #0]
    f64c:	2300      	movs	r3, #0
    f64e:	697a      	ldr	r2, [r7, #20]
    f650:	4c09      	ldr	r4, [pc, #36]	; (f678 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x90>)
    f652:	47a0      	blx	r4
    f654:	4602      	mov	r2, r0
    f656:	68fb      	ldr	r3, [r7, #12]
    f658:	651a      	str	r2, [r3, #80]	; 0x50
            ID,                        /* CAN identifier */
            0,                         /* rtr */
            TPDO->dataLength,          /* number of data bytes */
            syncFlag);                 /* synchronous message flag bit */

    if(TPDO->CANtxBuff == 0){
    f65a:	68fb      	ldr	r3, [r7, #12]
    f65c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    f65e:	2b00      	cmp	r3, #0
    f660:	d102      	bne.n	f668 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x80>
        TPDO->valid = false;
    f662:	68fb      	ldr	r3, [r7, #12]
    f664:	2200      	movs	r2, #0
    f666:	775a      	strb	r2, [r3, #29]
    }
}
    f668:	bf00      	nop
    f66a:	371c      	adds	r7, #28
    f66c:	46bd      	mov	sp, r7
    f66e:	bd90      	pop	{r4, r7, pc}
    f670:	bffff800 	.word	0xbffff800
    f674:	20001a7c 	.word	0x20001a7c
    f678:	0000db71 	.word	0x0000db71

0000f67c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_>:
        uint8_t                 R_T,
        uint8_t               **ppData,
        uint8_t                *pLength,
        uint8_t                *pSendIfCOSFlags,
        uint8_t                *pIsMultibyteVar)
{
    f67c:	b580      	push	{r7, lr}
    f67e:	b08a      	sub	sp, #40	; 0x28
    f680:	af00      	add	r7, sp, #0
    f682:	60f8      	str	r0, [r7, #12]
    f684:	60b9      	str	r1, [r7, #8]
    f686:	603b      	str	r3, [r7, #0]
    f688:	4613      	mov	r3, r2
    f68a:	71fb      	strb	r3, [r7, #7]
    uint8_t subIndex;
    uint8_t dataLen;
    uint8_t objectLen;
    uint8_t attr;

    index = (uint32_t)(map>>16);
    f68c:	68bb      	ldr	r3, [r7, #8]
    f68e:	0c1b      	lsrs	r3, r3, #16
    f690:	61fb      	str	r3, [r7, #28]
    subIndex = (uint8_t)(map>>8);
    f692:	68bb      	ldr	r3, [r7, #8]
    f694:	0a1b      	lsrs	r3, r3, #8
    f696:	76fb      	strb	r3, [r7, #27]
    dataLen = (uint8_t) map;   /* data length in bits */
    f698:	68bb      	ldr	r3, [r7, #8]
    f69a:	76bb      	strb	r3, [r7, #26]

    /* data length must be byte aligned */
    if(dataLen&0x07) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
    f69c:	7ebb      	ldrb	r3, [r7, #26]
    f69e:	f003 0307 	and.w	r3, r3, #7
    f6a2:	2b00      	cmp	r3, #0
    f6a4:	d001      	beq.n	f6aa <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x2e>
    f6a6:	4b6b      	ldr	r3, [pc, #428]	; (f854 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
    f6a8:	e0cf      	b.n	f84a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    dataLen >>= 3;    /* new data length is in bytes */
    f6aa:	7ebb      	ldrb	r3, [r7, #26]
    f6ac:	10db      	asrs	r3, r3, #3
    f6ae:	76bb      	strb	r3, [r7, #26]
    *pLength += dataLen;
    f6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f6b2:	781a      	ldrb	r2, [r3, #0]
    f6b4:	7ebb      	ldrb	r3, [r7, #26]
    f6b6:	4413      	add	r3, r2
    f6b8:	b2da      	uxtb	r2, r3
    f6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f6bc:	701a      	strb	r2, [r3, #0]

    /* total PDO length can not be more than 8 bytes */
    if(*pLength > 8) return CO_SDO_AB_MAP_LEN;  /* The number and length of the objects to be mapped would exceed PDO length. */
    f6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f6c0:	781b      	ldrb	r3, [r3, #0]
    f6c2:	2b08      	cmp	r3, #8
    f6c4:	dd01      	ble.n	f6ca <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x4e>
    f6c6:	4b64      	ldr	r3, [pc, #400]	; (f858 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1dc>)
    f6c8:	e0bf      	b.n	f84a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    /* is there a reference to dummy entries */
    if(index <=7 && subIndex == 0){
    f6ca:	69fb      	ldr	r3, [r7, #28]
    f6cc:	2b07      	cmp	r3, #7
    f6ce:	d832      	bhi.n	f736 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xba>
    f6d0:	7efb      	ldrb	r3, [r7, #27]
    f6d2:	2b00      	cmp	r3, #0
    f6d4:	d12f      	bne.n	f736 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xba>
        static uint32_t dummyTX = 0;
        static uint32_t dummyRX;
        uint8_t dummySize = 4;
    f6d6:	2304      	movs	r3, #4
    f6d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if(index<2) dummySize = 0;
    f6dc:	69fb      	ldr	r3, [r7, #28]
    f6de:	2b01      	cmp	r3, #1
    f6e0:	d803      	bhi.n	f6ea <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x6e>
    f6e2:	2300      	movs	r3, #0
    f6e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    f6e8:	e012      	b.n	f710 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x94>
        else if(index==2 || index==5) dummySize = 1;
    f6ea:	69fb      	ldr	r3, [r7, #28]
    f6ec:	2b02      	cmp	r3, #2
    f6ee:	d002      	beq.n	f6f6 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x7a>
    f6f0:	69fb      	ldr	r3, [r7, #28]
    f6f2:	2b05      	cmp	r3, #5
    f6f4:	d103      	bne.n	f6fe <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x82>
    f6f6:	2301      	movs	r3, #1
    f6f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    f6fc:	e008      	b.n	f710 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x94>
        else if(index==3 || index==6) dummySize = 2;
    f6fe:	69fb      	ldr	r3, [r7, #28]
    f700:	2b03      	cmp	r3, #3
    f702:	d002      	beq.n	f70a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x8e>
    f704:	69fb      	ldr	r3, [r7, #28]
    f706:	2b06      	cmp	r3, #6
    f708:	d102      	bne.n	f710 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x94>
    f70a:	2302      	movs	r3, #2
    f70c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        /* is size of variable big enough for map */
        if(dummySize < dataLen) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
    f710:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
    f714:	7ebb      	ldrb	r3, [r7, #26]
    f716:	429a      	cmp	r2, r3
    f718:	da01      	bge.n	f71e <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xa2>
    f71a:	4b4e      	ldr	r3, [pc, #312]	; (f854 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
    f71c:	e095      	b.n	f84a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

        /* Data and ODE pointer */
        if(R_T == 0) *ppData = (uint8_t*) &dummyRX;
    f71e:	79fb      	ldrb	r3, [r7, #7]
    f720:	2b00      	cmp	r3, #0
    f722:	d103      	bne.n	f72c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xb0>
    f724:	683b      	ldr	r3, [r7, #0]
    f726:	4a4d      	ldr	r2, [pc, #308]	; (f85c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e0>)
    f728:	601a      	str	r2, [r3, #0]
    f72a:	e002      	b.n	f732 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xb6>
        else         *ppData = (uint8_t*) &dummyTX;
    f72c:	683b      	ldr	r3, [r7, #0]
    f72e:	4a4c      	ldr	r2, [pc, #304]	; (f860 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e4>)
    f730:	601a      	str	r2, [r3, #0]

        return 0;
    f732:	2300      	movs	r3, #0
    f734:	e089      	b.n	f84a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>
    }

    /* find object in Object Dictionary */
    entryNo = ptrCODriverClass->CO_OD_find( index);
    f736:	4b4b      	ldr	r3, [pc, #300]	; (f864 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e8>)
    f738:	681b      	ldr	r3, [r3, #0]
    f73a:	3304      	adds	r3, #4
    f73c:	69f9      	ldr	r1, [r7, #28]
    f73e:	4618      	mov	r0, r3
    f740:	4b49      	ldr	r3, [pc, #292]	; (f868 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ec>)
    f742:	4798      	blx	r3
    f744:	6178      	str	r0, [r7, #20]

    /* Does object exist in OD? */
    if(entryNo == 0xFFFF || subIndex > SDO->OD[entryNo].maxSubIndex)
    f746:	697b      	ldr	r3, [r7, #20]
    f748:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f74c:	4293      	cmp	r3, r2
    f74e:	d00b      	beq.n	f768 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xec>
    f750:	7ef9      	ldrb	r1, [r7, #27]
    f752:	68fb      	ldr	r3, [r7, #12]
    f754:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    f756:	697a      	ldr	r2, [r7, #20]
    f758:	4613      	mov	r3, r2
    f75a:	009b      	lsls	r3, r3, #2
    f75c:	4413      	add	r3, r2
    f75e:	009b      	lsls	r3, r3, #2
    f760:	4403      	add	r3, r0
    f762:	791b      	ldrb	r3, [r3, #4]
    f764:	4299      	cmp	r1, r3
    f766:	dd01      	ble.n	f76c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xf0>
        return CO_SDO_AB_NOT_EXIST;   /* Object does not exist in the object dictionary. */
    f768:	4b40      	ldr	r3, [pc, #256]	; (f86c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1f0>)
    f76a:	e06e      	b.n	f84a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    attr = ptrCODriverClass->CO_OD_getAttribute( entryNo, subIndex);
    f76c:	4b3d      	ldr	r3, [pc, #244]	; (f864 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e8>)
    f76e:	681b      	ldr	r3, [r3, #0]
    f770:	3304      	adds	r3, #4
    f772:	7efa      	ldrb	r2, [r7, #27]
    f774:	6979      	ldr	r1, [r7, #20]
    f776:	4618      	mov	r0, r3
    f778:	4b3d      	ldr	r3, [pc, #244]	; (f870 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1f4>)
    f77a:	4798      	blx	r3
    f77c:	4603      	mov	r3, r0
    f77e:	74fb      	strb	r3, [r7, #19]
    /* Is object Mappable for RPDO? */
    if(R_T==0 && !((attr&CO_ODA_RPDO_MAPABLE) && (attr&CO_ODA_WRITEABLE))) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
    f780:	79fb      	ldrb	r3, [r7, #7]
    f782:	2b00      	cmp	r3, #0
    f784:	d10b      	bne.n	f79e <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x122>
    f786:	7cfb      	ldrb	r3, [r7, #19]
    f788:	f003 0310 	and.w	r3, r3, #16
    f78c:	2b00      	cmp	r3, #0
    f78e:	d004      	beq.n	f79a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x11e>
    f790:	7cfb      	ldrb	r3, [r7, #19]
    f792:	f003 0308 	and.w	r3, r3, #8
    f796:	2b00      	cmp	r3, #0
    f798:	d101      	bne.n	f79e <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x122>
    f79a:	4b2e      	ldr	r3, [pc, #184]	; (f854 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
    f79c:	e055      	b.n	f84a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>
    /* Is object Mappable for TPDO? */
    if(R_T!=0 && !((attr&CO_ODA_TPDO_MAPABLE) && (attr&CO_ODA_READABLE))) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
    f79e:	79fb      	ldrb	r3, [r7, #7]
    f7a0:	2b00      	cmp	r3, #0
    f7a2:	d00b      	beq.n	f7bc <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x140>
    f7a4:	7cfb      	ldrb	r3, [r7, #19]
    f7a6:	f003 0320 	and.w	r3, r3, #32
    f7aa:	2b00      	cmp	r3, #0
    f7ac:	d004      	beq.n	f7b8 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x13c>
    f7ae:	7cfb      	ldrb	r3, [r7, #19]
    f7b0:	f003 0304 	and.w	r3, r3, #4
    f7b4:	2b00      	cmp	r3, #0
    f7b6:	d101      	bne.n	f7bc <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x140>
    f7b8:	4b26      	ldr	r3, [pc, #152]	; (f854 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
    f7ba:	e046      	b.n	f84a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    /* is size of variable big enough for map */
    objectLen = ptrCODriverClass->CO_OD_getLength( entryNo, subIndex);
    f7bc:	4b29      	ldr	r3, [pc, #164]	; (f864 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e8>)
    f7be:	681b      	ldr	r3, [r3, #0]
    f7c0:	3304      	adds	r3, #4
    f7c2:	7efa      	ldrb	r2, [r7, #27]
    f7c4:	6979      	ldr	r1, [r7, #20]
    f7c6:	4618      	mov	r0, r3
    f7c8:	4b2a      	ldr	r3, [pc, #168]	; (f874 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1f8>)
    f7ca:	4798      	blx	r3
    f7cc:	4603      	mov	r3, r0
    f7ce:	74bb      	strb	r3, [r7, #18]
    if(objectLen < dataLen) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
    f7d0:	7cba      	ldrb	r2, [r7, #18]
    f7d2:	7ebb      	ldrb	r3, [r7, #26]
    f7d4:	429a      	cmp	r2, r3
    f7d6:	da01      	bge.n	f7dc <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x160>
    f7d8:	4b1e      	ldr	r3, [pc, #120]	; (f854 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
    f7da:	e036      	b.n	f84a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    /* mark multibyte variable */
    *pIsMultibyteVar = (attr&CO_ODA_MB_VALUE) ? 1 : 0;
    f7dc:	f997 3013 	ldrsb.w	r3, [r7, #19]
    f7e0:	2b00      	cmp	r3, #0
    f7e2:	da01      	bge.n	f7e8 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x16c>
    f7e4:	2201      	movs	r2, #1
    f7e6:	e000      	b.n	f7ea <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x16e>
    f7e8:	2200      	movs	r2, #0
    f7ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    f7ec:	701a      	strb	r2, [r3, #0]

    /* pointer to data */
    *ppData = (uint8_t*) (ptrCODriverClass->CO_OD_getDataPointer( entryNo, subIndex));
    f7ee:	4b1d      	ldr	r3, [pc, #116]	; (f864 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e8>)
    f7f0:	681b      	ldr	r3, [r3, #0]
    f7f2:	3304      	adds	r3, #4
    f7f4:	7efa      	ldrb	r2, [r7, #27]
    f7f6:	6979      	ldr	r1, [r7, #20]
    f7f8:	4618      	mov	r0, r3
    f7fa:	4b1f      	ldr	r3, [pc, #124]	; (f878 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1fc>)
    f7fc:	4798      	blx	r3
    f7fe:	4602      	mov	r2, r0
    f800:	683b      	ldr	r3, [r7, #0]
    f802:	601a      	str	r2, [r3, #0]
        *ppData += objectLen - dataLen;
    }
#endif

    /* setup change of state flags */
    if(attr&CO_ODA_TPDO_DETECT_COS){
    f804:	7cfb      	ldrb	r3, [r7, #19]
    f806:	f003 0340 	and.w	r3, r3, #64	; 0x40
    f80a:	2b00      	cmp	r3, #0
    f80c:	d01c      	beq.n	f848 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1cc>
        uint32_t i;
        for(i=*pLength-dataLen; i<*pLength; i++){
    f80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f810:	781b      	ldrb	r3, [r3, #0]
    f812:	461a      	mov	r2, r3
    f814:	7ebb      	ldrb	r3, [r7, #26]
    f816:	1ad3      	subs	r3, r2, r3
    f818:	623b      	str	r3, [r7, #32]
    f81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f81c:	781b      	ldrb	r3, [r3, #0]
    f81e:	461a      	mov	r2, r3
    f820:	6a3b      	ldr	r3, [r7, #32]
    f822:	429a      	cmp	r2, r3
    f824:	d910      	bls.n	f848 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1cc>
            *pSendIfCOSFlags |= 1<<i;
    f826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f828:	781b      	ldrb	r3, [r3, #0]
    f82a:	b25a      	sxtb	r2, r3
    f82c:	2101      	movs	r1, #1
    f82e:	6a3b      	ldr	r3, [r7, #32]
    f830:	fa01 f303 	lsl.w	r3, r1, r3
    f834:	b25b      	sxtb	r3, r3
    f836:	4313      	orrs	r3, r2
    f838:	b25b      	sxtb	r3, r3
    f83a:	b2da      	uxtb	r2, r3
    f83c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f83e:	701a      	strb	r2, [r3, #0]
        for(i=*pLength-dataLen; i<*pLength; i++){
    f840:	6a3b      	ldr	r3, [r7, #32]
    f842:	3301      	adds	r3, #1
    f844:	623b      	str	r3, [r7, #32]
    f846:	e7e8      	b.n	f81a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x19e>
        }
    }

    return 0;
    f848:	2300      	movs	r3, #0
}
    f84a:	4618      	mov	r0, r3
    f84c:	3728      	adds	r7, #40	; 0x28
    f84e:	46bd      	mov	sp, r7
    f850:	bd80      	pop	{r7, pc}
    f852:	bf00      	nop
    f854:	06040041 	.word	0x06040041
    f858:	06040042 	.word	0x06040042
    f85c:	20001a88 	.word	0x20001a88
    f860:	20001a84 	.word	0x20001a84
    f864:	20001a7c 	.word	0x20001a7c
    f868:	00010c49 	.word	0x00010c49
    f86c:	06020000 	.word	0x06020000
    f870:	00010d95 	.word	0x00010d95
    f874:	00010cf1 	.word	0x00010cf1
    f878:	00010e3f 	.word	0x00010e3f

0000f87c <_ZL16CO_RPDOconfigMapP9CO_RPDO_th>:
 * @param RPDO RPDO object.
 * @param noOfMappedObjects Number of mapped object (from OD).
 *
 * @return 0 on success, otherwise SDO abort code.
 */
static uint32_t CO_RPDOconfigMap(CO_RPDO_t* RPDO, uint8_t noOfMappedObjects){
    f87c:	b590      	push	{r4, r7, lr}
    f87e:	b091      	sub	sp, #68	; 0x44
    f880:	af04      	add	r7, sp, #16
    f882:	6078      	str	r0, [r7, #4]
    f884:	460b      	mov	r3, r1
    f886:	70fb      	strb	r3, [r7, #3]
    uint32_t i;
    uint8_t length = 0;
    f888:	2300      	movs	r3, #0
    f88a:	75fb      	strb	r3, [r7, #23]
    uint32_t ret = 0;
    f88c:	2300      	movs	r3, #0
    f88e:	62bb      	str	r3, [r7, #40]	; 0x28
    const uint32_t* pMap = &RPDO->RPDOMapPar->mappedObject1;
    f890:	687b      	ldr	r3, [r7, #4]
    f892:	691b      	ldr	r3, [r3, #16]
    f894:	3304      	adds	r3, #4
    f896:	627b      	str	r3, [r7, #36]	; 0x24

    for(i=noOfMappedObjects; i>0; i--){
    f898:	78fb      	ldrb	r3, [r7, #3]
    f89a:	62fb      	str	r3, [r7, #44]	; 0x2c
    f89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f89e:	2b00      	cmp	r3, #0
    f8a0:	d045      	beq.n	f92e <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xb2>
        uint32_t j;
        uint8_t* pData;
        uint8_t dummy = 0;
    f8a2:	2300      	movs	r3, #0
    f8a4:	73fb      	strb	r3, [r7, #15]
        uint8_t prevLength = length;
    f8a6:	7dfb      	ldrb	r3, [r7, #23]
    f8a8:	77fb      	strb	r3, [r7, #31]
        uint8_t MBvar;
        uint32_t map = *(pMap++);
    f8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f8ac:	1d1a      	adds	r2, r3, #4
    f8ae:	627a      	str	r2, [r7, #36]	; 0x24
    f8b0:	681b      	ldr	r3, [r3, #0]
    f8b2:	61bb      	str	r3, [r7, #24]

        /* function do much checking of errors in map */
        ret = CO_PDOfindMap(
    f8b4:	687b      	ldr	r3, [r7, #4]
    f8b6:	6858      	ldr	r0, [r3, #4]
                map,
                0,
                &pData,
                &length,
                &dummy,
                &MBvar);
    f8b8:	f107 0210 	add.w	r2, r7, #16
    f8bc:	f107 030e 	add.w	r3, r7, #14
    f8c0:	9302      	str	r3, [sp, #8]
    f8c2:	f107 030f 	add.w	r3, r7, #15
    f8c6:	9301      	str	r3, [sp, #4]
    f8c8:	f107 0317 	add.w	r3, r7, #23
    f8cc:	9300      	str	r3, [sp, #0]
    f8ce:	4613      	mov	r3, r2
    f8d0:	2200      	movs	r2, #0
    f8d2:	69b9      	ldr	r1, [r7, #24]
    f8d4:	4c1a      	ldr	r4, [pc, #104]	; (f940 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xc4>)
    f8d6:	47a0      	blx	r4
    f8d8:	62b8      	str	r0, [r7, #40]	; 0x28
        if(ret){
    f8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f8dc:	2b00      	cmp	r3, #0
    f8de:	d00e      	beq.n	f8fe <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0x82>
            length = 0;
    f8e0:	2300      	movs	r3, #0
    f8e2:	75fb      	strb	r3, [r7, #23]
           ptrCODriverClass->EM_ErrorReport(RPDO->em, CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR, map);
    f8e4:	4b17      	ldr	r3, [pc, #92]	; (f944 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xc8>)
    f8e6:	681b      	ldr	r3, [r3, #0]
    f8e8:	1d18      	adds	r0, r3, #4
    f8ea:	687b      	ldr	r3, [r7, #4]
    f8ec:	6819      	ldr	r1, [r3, #0]
    f8ee:	69bb      	ldr	r3, [r7, #24]
    f8f0:	9300      	str	r3, [sp, #0]
    f8f2:	f44f 4302 	mov.w	r3, #33280	; 0x8200
    f8f6:	221a      	movs	r2, #26
    f8f8:	4c13      	ldr	r4, [pc, #76]	; (f948 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xcc>)
    f8fa:	47a0      	blx	r4
    f8fc:	e017      	b.n	f92e <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xb2>
        else{
            for(j=prevLength; j<length; j++)
                RPDO->mapPointer[j] = pData++;
        }
#else
        for(j=prevLength; j<length; j++){
    f8fe:	7ffb      	ldrb	r3, [r7, #31]
    f900:	623b      	str	r3, [r7, #32]
    f902:	7dfb      	ldrb	r3, [r7, #23]
    f904:	461a      	mov	r2, r3
    f906:	6a3b      	ldr	r3, [r7, #32]
    f908:	429a      	cmp	r2, r3
    f90a:	d90c      	bls.n	f926 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xaa>
            RPDO->mapPointer[j] = pData++;
    f90c:	693a      	ldr	r2, [r7, #16]
    f90e:	1c53      	adds	r3, r2, #1
    f910:	613b      	str	r3, [r7, #16]
    f912:	6879      	ldr	r1, [r7, #4]
    f914:	6a3b      	ldr	r3, [r7, #32]
    f916:	3308      	adds	r3, #8
    f918:	009b      	lsls	r3, r3, #2
    f91a:	440b      	add	r3, r1
    f91c:	605a      	str	r2, [r3, #4]
        for(j=prevLength; j<length; j++){
    f91e:	6a3b      	ldr	r3, [r7, #32]
    f920:	3301      	adds	r3, #1
    f922:	623b      	str	r3, [r7, #32]
    f924:	e7ed      	b.n	f902 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0x86>
    for(i=noOfMappedObjects; i>0; i--){
    f926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f928:	3b01      	subs	r3, #1
    f92a:	62fb      	str	r3, [r7, #44]	; 0x2c
    f92c:	e7b6      	b.n	f89c <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0x20>
        }
#endif

    }

    RPDO->dataLength = length;
    f92e:	7dfa      	ldrb	r2, [r7, #23]
    f930:	687b      	ldr	r3, [r7, #4]
    f932:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

    return ret;
    f936:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
    f938:	4618      	mov	r0, r3
    f93a:	3734      	adds	r7, #52	; 0x34
    f93c:	46bd      	mov	sp, r7
    f93e:	bd90      	pop	{r4, r7, pc}
    f940:	0000f67d 	.word	0x0000f67d
    f944:	20001a7c 	.word	0x20001a7c
    f948:	0000e6b1 	.word	0x0000e6b1

0000f94c <_ZL16CO_TPDOconfigMapP9CO_TPDO_th>:
 * @param TPDO TPDO object.
 * @param noOfMappedObjects Number of mapped object (from OD).
 *
 * @return 0 on success, otherwise SDO abort code.
 */
static uint32_t CO_TPDOconfigMap(CO_TPDO_t* TPDO, uint8_t noOfMappedObjects){
    f94c:	b590      	push	{r4, r7, lr}
    f94e:	b091      	sub	sp, #68	; 0x44
    f950:	af04      	add	r7, sp, #16
    f952:	6078      	str	r0, [r7, #4]
    f954:	460b      	mov	r3, r1
    f956:	70fb      	strb	r3, [r7, #3]
    uint32_t i;
    uint8_t length = 0;
    f958:	2300      	movs	r3, #0
    f95a:	75fb      	strb	r3, [r7, #23]
    uint32_t ret = 0;
    f95c:	2300      	movs	r3, #0
    f95e:	62bb      	str	r3, [r7, #40]	; 0x28
    const uint32_t* pMap = &TPDO->TPDOMapPar->mappedObject1;
    f960:	687b      	ldr	r3, [r7, #4]
    f962:	68db      	ldr	r3, [r3, #12]
    f964:	3304      	adds	r3, #4
    f966:	627b      	str	r3, [r7, #36]	; 0x24

    TPDO->sendIfCOSFlags = 0;
    f968:	687b      	ldr	r3, [r7, #4]
    f96a:	2200      	movs	r2, #0
    f96c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    for(i=noOfMappedObjects; i>0; i--){
    f970:	78fb      	ldrb	r3, [r7, #3]
    f972:	62fb      	str	r3, [r7, #44]	; 0x2c
    f974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f976:	2b00      	cmp	r3, #0
    f978:	d042      	beq.n	fa00 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xb4>
        uint32_t j;
        uint8_t* pData;
        uint8_t prevLength = length;
    f97a:	7dfb      	ldrb	r3, [r7, #23]
    f97c:	77fb      	strb	r3, [r7, #31]
        uint8_t MBvar;
        uint32_t map = *(pMap++);
    f97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f980:	1d1a      	adds	r2, r3, #4
    f982:	627a      	str	r2, [r7, #36]	; 0x24
    f984:	681b      	ldr	r3, [r3, #0]
    f986:	61bb      	str	r3, [r7, #24]

        /* function do much checking of errors in map */
        ret = CO_PDOfindMap(
    f988:	687b      	ldr	r3, [r7, #4]
    f98a:	6858      	ldr	r0, [r3, #4]
    f98c:	687b      	ldr	r3, [r7, #4]
    f98e:	3340      	adds	r3, #64	; 0x40
                map,
                1,
                &pData,
                &length,
                &TPDO->sendIfCOSFlags,
                &MBvar);
    f990:	f107 0110 	add.w	r1, r7, #16
    f994:	f107 020f 	add.w	r2, r7, #15
    f998:	9202      	str	r2, [sp, #8]
    f99a:	9301      	str	r3, [sp, #4]
    f99c:	f107 0317 	add.w	r3, r7, #23
    f9a0:	9300      	str	r3, [sp, #0]
    f9a2:	460b      	mov	r3, r1
    f9a4:	2201      	movs	r2, #1
    f9a6:	69b9      	ldr	r1, [r7, #24]
    f9a8:	4c19      	ldr	r4, [pc, #100]	; (fa10 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xc4>)
    f9aa:	47a0      	blx	r4
    f9ac:	62b8      	str	r0, [r7, #40]	; 0x28
        if(ret){
    f9ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f9b0:	2b00      	cmp	r3, #0
    f9b2:	d00e      	beq.n	f9d2 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0x86>
            length = 0;
    f9b4:	2300      	movs	r3, #0
    f9b6:	75fb      	strb	r3, [r7, #23]
            ptrCODriverClass->EM_ErrorReport(TPDO->em, CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR, map);
    f9b8:	4b16      	ldr	r3, [pc, #88]	; (fa14 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xc8>)
    f9ba:	681b      	ldr	r3, [r3, #0]
    f9bc:	1d18      	adds	r0, r3, #4
    f9be:	687b      	ldr	r3, [r7, #4]
    f9c0:	6819      	ldr	r1, [r3, #0]
    f9c2:	69bb      	ldr	r3, [r7, #24]
    f9c4:	9300      	str	r3, [sp, #0]
    f9c6:	f44f 4302 	mov.w	r3, #33280	; 0x8200
    f9ca:	221a      	movs	r2, #26
    f9cc:	4c12      	ldr	r4, [pc, #72]	; (fa18 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xcc>)
    f9ce:	47a0      	blx	r4
    f9d0:	e016      	b.n	fa00 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xb4>
        else{
            for(j=prevLength; j<length; j++)
                TPDO->mapPointer[j] = pData++;
        }
#else
        for(j=prevLength; j<length; j++){
    f9d2:	7ffb      	ldrb	r3, [r7, #31]
    f9d4:	623b      	str	r3, [r7, #32]
    f9d6:	7dfb      	ldrb	r3, [r7, #23]
    f9d8:	461a      	mov	r2, r3
    f9da:	6a3b      	ldr	r3, [r7, #32]
    f9dc:	429a      	cmp	r2, r3
    f9de:	d90b      	bls.n	f9f8 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xac>
            TPDO->mapPointer[j] = pData++;
    f9e0:	693b      	ldr	r3, [r7, #16]
    f9e2:	1c5a      	adds	r2, r3, #1
    f9e4:	613a      	str	r2, [r7, #16]
    f9e6:	687a      	ldr	r2, [r7, #4]
    f9e8:	6a39      	ldr	r1, [r7, #32]
    f9ea:	3108      	adds	r1, #8
    f9ec:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        for(j=prevLength; j<length; j++){
    f9f0:	6a3b      	ldr	r3, [r7, #32]
    f9f2:	3301      	adds	r3, #1
    f9f4:	623b      	str	r3, [r7, #32]
    f9f6:	e7ee      	b.n	f9d6 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0x8a>
    for(i=noOfMappedObjects; i>0; i--){
    f9f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f9fa:	3b01      	subs	r3, #1
    f9fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    f9fe:	e7b9      	b.n	f974 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0x28>
        }
#endif

    }

    TPDO->dataLength = length;
    fa00:	7dfa      	ldrb	r2, [r7, #23]
    fa02:	687b      	ldr	r3, [r7, #4]
    fa04:	779a      	strb	r2, [r3, #30]

    return ret;
    fa06:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
    fa08:	4618      	mov	r0, r3
    fa0a:	3734      	adds	r7, #52	; 0x34
    fa0c:	46bd      	mov	sp, r7
    fa0e:	bd90      	pop	{r4, r7, pc}
    fa10:	0000f67d 	.word	0x0000f67d
    fa14:	20001a7c 	.word	0x20001a7c
    fa18:	0000e6b1 	.word	0x0000e6b1

0000fa1c <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t>:
/*
 * Function for accessing _RPDO communication parameter_ (index 0x1400+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_RPDOcom(CO_ODF_arg_t *ODF_arg){
    fa1c:	b580      	push	{r7, lr}
    fa1e:	b088      	sub	sp, #32
    fa20:	af00      	add	r7, sp, #0
    fa22:	6078      	str	r0, [r7, #4]
    CO_RPDO_t *RPDO;

    RPDO = (CO_RPDO_t*) ODF_arg->object;
    fa24:	687b      	ldr	r3, [r7, #4]
    fa26:	681b      	ldr	r3, [r3, #0]
    fa28:	61fb      	str	r3, [r7, #28]

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
    fa2a:	687b      	ldr	r3, [r7, #4]
    fa2c:	7f5b      	ldrb	r3, [r3, #29]
    fa2e:	2b00      	cmp	r3, #0
    fa30:	d025      	beq.n	fa7e <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x62>
        if(ODF_arg->subIndex == 1){
    fa32:	687b      	ldr	r3, [r7, #4]
    fa34:	7f1b      	ldrb	r3, [r3, #28]
    fa36:	2b01      	cmp	r3, #1
    fa38:	d11f      	bne.n	fa7a <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x5e>
            uint32_t *value = (uint32_t*) ODF_arg->data;
    fa3a:	687b      	ldr	r3, [r7, #4]
    fa3c:	685b      	ldr	r3, [r3, #4]
    fa3e:	61bb      	str	r3, [r7, #24]

            /* if default COB ID is used, write default value here */
            if(((*value)&0xFFFF) == RPDO->defaultCOB_ID && RPDO->defaultCOB_ID)
    fa40:	69bb      	ldr	r3, [r7, #24]
    fa42:	681b      	ldr	r3, [r3, #0]
    fa44:	b29a      	uxth	r2, r3
    fa46:	69fb      	ldr	r3, [r7, #28]
    fa48:	69db      	ldr	r3, [r3, #28]
    fa4a:	429a      	cmp	r2, r3
    fa4c:	d10a      	bne.n	fa64 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x48>
    fa4e:	69fb      	ldr	r3, [r7, #28]
    fa50:	69db      	ldr	r3, [r3, #28]
    fa52:	2b00      	cmp	r3, #0
    fa54:	d006      	beq.n	fa64 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x48>
                *value += RPDO->nodeId;
    fa56:	69bb      	ldr	r3, [r7, #24]
    fa58:	681b      	ldr	r3, [r3, #0]
    fa5a:	69fa      	ldr	r2, [r7, #28]
    fa5c:	7e12      	ldrb	r2, [r2, #24]
    fa5e:	441a      	add	r2, r3
    fa60:	69bb      	ldr	r3, [r7, #24]
    fa62:	601a      	str	r2, [r3, #0]

            /* If PDO is not valid, set bit 31 */
            if(!RPDO->valid) *value |= 0x80000000L;
    fa64:	69fb      	ldr	r3, [r7, #28]
    fa66:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
    fa6a:	2b00      	cmp	r3, #0
    fa6c:	d105      	bne.n	fa7a <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x5e>
    fa6e:	69bb      	ldr	r3, [r7, #24]
    fa70:	681b      	ldr	r3, [r3, #0]
    fa72:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    fa76:	69bb      	ldr	r3, [r7, #24]
    fa78:	601a      	str	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
    fa7a:	2300      	movs	r3, #0
    fa7c:	e07f      	b.n	fb7e <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>
    }

    /* Writing Object Dictionary variable */
    if(RPDO->restrictionFlags & 0x04)
    fa7e:	69fb      	ldr	r3, [r7, #28]
    fa80:	f893 3020 	ldrb.w	r3, [r3, #32]
    fa84:	f003 0304 	and.w	r3, r3, #4
    fa88:	2b00      	cmp	r3, #0
    fa8a:	d001      	beq.n	fa90 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x74>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
    fa8c:	4b3e      	ldr	r3, [pc, #248]	; (fb88 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x16c>)
    fa8e:	e076      	b.n	fb7e <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>
    if(*RPDO->operatingState == CO_NMT_OPERATIONAL && (RPDO->restrictionFlags & 0x01))
    fa90:	69fb      	ldr	r3, [r7, #28]
    fa92:	695b      	ldr	r3, [r3, #20]
    fa94:	781b      	ldrb	r3, [r3, #0]
    fa96:	2b05      	cmp	r3, #5
    fa98:	d108      	bne.n	faac <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x90>
    fa9a:	69fb      	ldr	r3, [r7, #28]
    fa9c:	f893 3020 	ldrb.w	r3, [r3, #32]
    faa0:	f003 0301 	and.w	r3, r3, #1
    faa4:	2b00      	cmp	r3, #0
    faa6:	d001      	beq.n	faac <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x90>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
    faa8:	4b38      	ldr	r3, [pc, #224]	; (fb8c <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x170>)
    faaa:	e068      	b.n	fb7e <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>

    if(ODF_arg->subIndex == 1){   /* COB_ID */
    faac:	687b      	ldr	r3, [r7, #4]
    faae:	7f1b      	ldrb	r3, [r3, #28]
    fab0:	2b01      	cmp	r3, #1
    fab2:	d139      	bne.n	fb28 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x10c>
        uint32_t *value = (uint32_t*) ODF_arg->data;
    fab4:	687b      	ldr	r3, [r7, #4]
    fab6:	685b      	ldr	r3, [r3, #4]
    fab8:	617b      	str	r3, [r7, #20]

        /* bits 11...29 must be zero */
        if(*value & 0x3FFF8000L)
    faba:	697b      	ldr	r3, [r7, #20]
    fabc:	681a      	ldr	r2, [r3, #0]
    fabe:	4b34      	ldr	r3, [pc, #208]	; (fb90 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x174>)
    fac0:	4013      	ands	r3, r2
    fac2:	2b00      	cmp	r3, #0
    fac4:	d001      	beq.n	faca <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0xae>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    fac6:	4b33      	ldr	r3, [pc, #204]	; (fb94 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x178>)
    fac8:	e059      	b.n	fb7e <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>

        /* if default COB-ID is being written, write defaultCOB_ID without nodeId */
        if(((*value)&0xFFFF) == (RPDO->defaultCOB_ID + RPDO->nodeId)){
    faca:	697b      	ldr	r3, [r7, #20]
    facc:	681b      	ldr	r3, [r3, #0]
    face:	b29a      	uxth	r2, r3
    fad0:	69fb      	ldr	r3, [r7, #28]
    fad2:	69db      	ldr	r3, [r3, #28]
    fad4:	69f9      	ldr	r1, [r7, #28]
    fad6:	7e09      	ldrb	r1, [r1, #24]
    fad8:	440b      	add	r3, r1
    fada:	429a      	cmp	r2, r3
    fadc:	d10c      	bne.n	faf8 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0xdc>
            *value &= 0xC0000000L;
    fade:	697b      	ldr	r3, [r7, #20]
    fae0:	681b      	ldr	r3, [r3, #0]
    fae2:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
    fae6:	697b      	ldr	r3, [r7, #20]
    fae8:	601a      	str	r2, [r3, #0]
            *value += RPDO->defaultCOB_ID;
    faea:	697b      	ldr	r3, [r7, #20]
    faec:	681a      	ldr	r2, [r3, #0]
    faee:	69fb      	ldr	r3, [r7, #28]
    faf0:	69db      	ldr	r3, [r3, #28]
    faf2:	441a      	add	r2, r3
    faf4:	697b      	ldr	r3, [r7, #20]
    faf6:	601a      	str	r2, [r3, #0]
        }

        /* if PDO is valid, bits 0..29 can not be changed */
        if(RPDO->valid && ((*value ^ RPDO->RPDOCommPar->COB_IDUsedByRPDO) & 0x3FFFFFFFL))
    faf8:	69fb      	ldr	r3, [r7, #28]
    fafa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
    fafe:	2b00      	cmp	r3, #0
    fb00:	d00b      	beq.n	fb1a <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0xfe>
    fb02:	697b      	ldr	r3, [r7, #20]
    fb04:	681a      	ldr	r2, [r3, #0]
    fb06:	69fb      	ldr	r3, [r7, #28]
    fb08:	68db      	ldr	r3, [r3, #12]
    fb0a:	685b      	ldr	r3, [r3, #4]
    fb0c:	4053      	eors	r3, r2
    fb0e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    fb12:	2b00      	cmp	r3, #0
    fb14:	d001      	beq.n	fb1a <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0xfe>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    fb16:	4b1f      	ldr	r3, [pc, #124]	; (fb94 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x178>)
    fb18:	e031      	b.n	fb7e <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>

        /* configure RPDO */
        CO_RPDOconfigCom(RPDO, *value);
    fb1a:	697b      	ldr	r3, [r7, #20]
    fb1c:	681b      	ldr	r3, [r3, #0]
    fb1e:	4619      	mov	r1, r3
    fb20:	69f8      	ldr	r0, [r7, #28]
    fb22:	4b1d      	ldr	r3, [pc, #116]	; (fb98 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x17c>)
    fb24:	4798      	blx	r3
    fb26:	e029      	b.n	fb7c <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x160>
    }
    else if(ODF_arg->subIndex == 2){   /* Transmission_type */
    fb28:	687b      	ldr	r3, [r7, #4]
    fb2a:	7f1b      	ldrb	r3, [r3, #28]
    fb2c:	2b02      	cmp	r3, #2
    fb2e:	d125      	bne.n	fb7c <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x160>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    fb30:	687b      	ldr	r3, [r7, #4]
    fb32:	685b      	ldr	r3, [r3, #4]
    fb34:	613b      	str	r3, [r7, #16]
        bool_t synchronousPrev = RPDO->synchronous;
    fb36:	69fb      	ldr	r3, [r7, #28]
    fb38:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
    fb3c:	73fb      	strb	r3, [r7, #15]

        /* values from 241...253 are not valid */
        if(*value >= 241 && *value <= 253)
    fb3e:	693b      	ldr	r3, [r7, #16]
    fb40:	781b      	ldrb	r3, [r3, #0]
    fb42:	2bf0      	cmp	r3, #240	; 0xf0
    fb44:	dd05      	ble.n	fb52 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x136>
    fb46:	693b      	ldr	r3, [r7, #16]
    fb48:	781b      	ldrb	r3, [r3, #0]
    fb4a:	2bfd      	cmp	r3, #253	; 0xfd
    fb4c:	dc01      	bgt.n	fb52 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x136>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    fb4e:	4b11      	ldr	r3, [pc, #68]	; (fb94 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x178>)
    fb50:	e015      	b.n	fb7e <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>

        RPDO->synchronous = (*value <= 240) ? true : false;
    fb52:	693b      	ldr	r3, [r7, #16]
    fb54:	781b      	ldrb	r3, [r3, #0]
    fb56:	2bf0      	cmp	r3, #240	; 0xf0
    fb58:	bfd4      	ite	le
    fb5a:	2301      	movle	r3, #1
    fb5c:	2300      	movgt	r3, #0
    fb5e:	b2db      	uxtb	r3, r3
    fb60:	461a      	mov	r2, r3
    fb62:	69fb      	ldr	r3, [r7, #28]
    fb64:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

        /* Remove old message from second buffer. */
        if(RPDO->synchronous != synchronousPrev) {
    fb68:	69fb      	ldr	r3, [r7, #28]
    fb6a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
    fb6e:	7bfa      	ldrb	r2, [r7, #15]
    fb70:	429a      	cmp	r2, r3
    fb72:	d003      	beq.n	fb7c <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x160>
            RPDO->CANrxNew[1] = false;
    fb74:	69fb      	ldr	r3, [r7, #28]
    fb76:	2200      	movs	r2, #0
    fb78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        }
    }

    return CO_SDO_AB_NONE;
    fb7c:	2300      	movs	r3, #0
}
    fb7e:	4618      	mov	r0, r3
    fb80:	3720      	adds	r7, #32
    fb82:	46bd      	mov	sp, r7
    fb84:	bd80      	pop	{r7, pc}
    fb86:	bf00      	nop
    fb88:	06010002 	.word	0x06010002
    fb8c:	08000022 	.word	0x08000022
    fb90:	3fff8000 	.word	0x3fff8000
    fb94:	06090030 	.word	0x06090030
    fb98:	0000f511 	.word	0x0000f511

0000fb9c <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t>:
/*
 * Function for accessing _TPDO communication parameter_ (index 0x1800+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_TPDOcom(CO_ODF_arg_t *ODF_arg){
    fb9c:	b580      	push	{r7, lr}
    fb9e:	b088      	sub	sp, #32
    fba0:	af00      	add	r7, sp, #0
    fba2:	6078      	str	r0, [r7, #4]
    CO_TPDO_t *TPDO;

    TPDO = (CO_TPDO_t*) ODF_arg->object;
    fba4:	687b      	ldr	r3, [r7, #4]
    fba6:	681b      	ldr	r3, [r3, #0]
    fba8:	61fb      	str	r3, [r7, #28]

    if(ODF_arg->subIndex == 4) return CO_SDO_AB_SUB_UNKNOWN;  /* Sub-index does not exist. */
    fbaa:	687b      	ldr	r3, [r7, #4]
    fbac:	7f1b      	ldrb	r3, [r3, #28]
    fbae:	2b04      	cmp	r3, #4
    fbb0:	d101      	bne.n	fbb6 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1a>
    fbb2:	4b6d      	ldr	r3, [pc, #436]	; (fd68 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1cc>)
    fbb4:	e0d4      	b.n	fd60 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
    fbb6:	687b      	ldr	r3, [r7, #4]
    fbb8:	7f5b      	ldrb	r3, [r3, #29]
    fbba:	2b00      	cmp	r3, #0
    fbbc:	d024      	beq.n	fc08 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x6c>
        if(ODF_arg->subIndex == 1){   /* COB_ID */
    fbbe:	687b      	ldr	r3, [r7, #4]
    fbc0:	7f1b      	ldrb	r3, [r3, #28]
    fbc2:	2b01      	cmp	r3, #1
    fbc4:	d11e      	bne.n	fc04 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x68>
            uint32_t *value = (uint32_t*) ODF_arg->data;
    fbc6:	687b      	ldr	r3, [r7, #4]
    fbc8:	685b      	ldr	r3, [r3, #4]
    fbca:	61bb      	str	r3, [r7, #24]

            /* if default COB ID is used, write default value here */
            if(((*value)&0xFFFF) == TPDO->defaultCOB_ID && TPDO->defaultCOB_ID)
    fbcc:	69bb      	ldr	r3, [r7, #24]
    fbce:	681b      	ldr	r3, [r3, #0]
    fbd0:	b29a      	uxth	r2, r3
    fbd2:	69fb      	ldr	r3, [r7, #28]
    fbd4:	699b      	ldr	r3, [r3, #24]
    fbd6:	429a      	cmp	r2, r3
    fbd8:	d10a      	bne.n	fbf0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x54>
    fbda:	69fb      	ldr	r3, [r7, #28]
    fbdc:	699b      	ldr	r3, [r3, #24]
    fbde:	2b00      	cmp	r3, #0
    fbe0:	d006      	beq.n	fbf0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x54>
                *value += TPDO->nodeId;
    fbe2:	69bb      	ldr	r3, [r7, #24]
    fbe4:	681b      	ldr	r3, [r3, #0]
    fbe6:	69fa      	ldr	r2, [r7, #28]
    fbe8:	7d12      	ldrb	r2, [r2, #20]
    fbea:	441a      	add	r2, r3
    fbec:	69bb      	ldr	r3, [r7, #24]
    fbee:	601a      	str	r2, [r3, #0]

            /* If PDO is not valid, set bit 31 */
            if(!TPDO->valid) *value |= 0x80000000L;
    fbf0:	69fb      	ldr	r3, [r7, #28]
    fbf2:	7f5b      	ldrb	r3, [r3, #29]
    fbf4:	2b00      	cmp	r3, #0
    fbf6:	d105      	bne.n	fc04 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x68>
    fbf8:	69bb      	ldr	r3, [r7, #24]
    fbfa:	681b      	ldr	r3, [r3, #0]
    fbfc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    fc00:	69bb      	ldr	r3, [r7, #24]
    fc02:	601a      	str	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
    fc04:	2300      	movs	r3, #0
    fc06:	e0ab      	b.n	fd60 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>
    }

    /* Writing Object Dictionary variable */
    if(TPDO->restrictionFlags & 0x04)
    fc08:	69fb      	ldr	r3, [r7, #28]
    fc0a:	7f1b      	ldrb	r3, [r3, #28]
    fc0c:	f003 0304 	and.w	r3, r3, #4
    fc10:	2b00      	cmp	r3, #0
    fc12:	d001      	beq.n	fc18 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x7c>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
    fc14:	4b55      	ldr	r3, [pc, #340]	; (fd6c <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1d0>)
    fc16:	e0a3      	b.n	fd60 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>
    if(*TPDO->operatingState == CO_NMT_OPERATIONAL && (TPDO->restrictionFlags & 0x01))
    fc18:	69fb      	ldr	r3, [r7, #28]
    fc1a:	691b      	ldr	r3, [r3, #16]
    fc1c:	781b      	ldrb	r3, [r3, #0]
    fc1e:	2b05      	cmp	r3, #5
    fc20:	d107      	bne.n	fc32 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x96>
    fc22:	69fb      	ldr	r3, [r7, #28]
    fc24:	7f1b      	ldrb	r3, [r3, #28]
    fc26:	f003 0301 	and.w	r3, r3, #1
    fc2a:	2b00      	cmp	r3, #0
    fc2c:	d001      	beq.n	fc32 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x96>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
    fc2e:	4b50      	ldr	r3, [pc, #320]	; (fd70 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1d4>)
    fc30:	e096      	b.n	fd60 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

    if(ODF_arg->subIndex == 1){   /* COB_ID */
    fc32:	687b      	ldr	r3, [r7, #4]
    fc34:	7f1b      	ldrb	r3, [r3, #28]
    fc36:	2b01      	cmp	r3, #1
    fc38:	d140      	bne.n	fcbc <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x120>
        uint32_t *value = (uint32_t*) ODF_arg->data;
    fc3a:	687b      	ldr	r3, [r7, #4]
    fc3c:	685b      	ldr	r3, [r3, #4]
    fc3e:	617b      	str	r3, [r7, #20]

        /* bits 11...29 must be zero */
        if(*value & 0x3FFF8000L)
    fc40:	697b      	ldr	r3, [r7, #20]
    fc42:	681a      	ldr	r2, [r3, #0]
    fc44:	4b4b      	ldr	r3, [pc, #300]	; (fd74 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1d8>)
    fc46:	4013      	ands	r3, r2
    fc48:	2b00      	cmp	r3, #0
    fc4a:	d001      	beq.n	fc50 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0xb4>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    fc4c:	4b4a      	ldr	r3, [pc, #296]	; (fd78 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
    fc4e:	e087      	b.n	fd60 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

        /* if default COB-ID is being written, write defaultCOB_ID without nodeId */
        if(((*value)&0xFFFF) == (TPDO->defaultCOB_ID + TPDO->nodeId)){
    fc50:	697b      	ldr	r3, [r7, #20]
    fc52:	681b      	ldr	r3, [r3, #0]
    fc54:	b29a      	uxth	r2, r3
    fc56:	69fb      	ldr	r3, [r7, #28]
    fc58:	699b      	ldr	r3, [r3, #24]
    fc5a:	69f9      	ldr	r1, [r7, #28]
    fc5c:	7d09      	ldrb	r1, [r1, #20]
    fc5e:	440b      	add	r3, r1
    fc60:	429a      	cmp	r2, r3
    fc62:	d10c      	bne.n	fc7e <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0xe2>
            *value &= 0xC0000000L;
    fc64:	697b      	ldr	r3, [r7, #20]
    fc66:	681b      	ldr	r3, [r3, #0]
    fc68:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
    fc6c:	697b      	ldr	r3, [r7, #20]
    fc6e:	601a      	str	r2, [r3, #0]
            *value += TPDO->defaultCOB_ID;
    fc70:	697b      	ldr	r3, [r7, #20]
    fc72:	681a      	ldr	r2, [r3, #0]
    fc74:	69fb      	ldr	r3, [r7, #28]
    fc76:	699b      	ldr	r3, [r3, #24]
    fc78:	441a      	add	r2, r3
    fc7a:	697b      	ldr	r3, [r7, #20]
    fc7c:	601a      	str	r2, [r3, #0]
        }

        /* if PDO is valid, bits 0..29 can not be changed */
        if(TPDO->valid && ((*value ^ TPDO->TPDOCommPar->COB_IDUsedByTPDO) & 0x3FFFFFFFL))
    fc7e:	69fb      	ldr	r3, [r7, #28]
    fc80:	7f5b      	ldrb	r3, [r3, #29]
    fc82:	2b00      	cmp	r3, #0
    fc84:	d00b      	beq.n	fc9e <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x102>
    fc86:	697b      	ldr	r3, [r7, #20]
    fc88:	681a      	ldr	r2, [r3, #0]
    fc8a:	69fb      	ldr	r3, [r7, #28]
    fc8c:	689b      	ldr	r3, [r3, #8]
    fc8e:	685b      	ldr	r3, [r3, #4]
    fc90:	4053      	eors	r3, r2
    fc92:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    fc96:	2b00      	cmp	r3, #0
    fc98:	d001      	beq.n	fc9e <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x102>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    fc9a:	4b37      	ldr	r3, [pc, #220]	; (fd78 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
    fc9c:	e060      	b.n	fd60 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

        /* configure TPDO */
        CO_TPDOconfigCom(TPDO, *value, TPDO->CANtxBuff->syncFlag);
    fc9e:	697b      	ldr	r3, [r7, #20]
    fca0:	6819      	ldr	r1, [r3, #0]
    fca2:	69fb      	ldr	r3, [r7, #28]
    fca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    fca6:	7b9b      	ldrb	r3, [r3, #14]
    fca8:	b2db      	uxtb	r3, r3
    fcaa:	461a      	mov	r2, r3
    fcac:	69f8      	ldr	r0, [r7, #28]
    fcae:	4b33      	ldr	r3, [pc, #204]	; (fd7c <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1e0>)
    fcb0:	4798      	blx	r3
        TPDO->syncCounter = 255;
    fcb2:	69fb      	ldr	r3, [r7, #28]
    fcb4:	22ff      	movs	r2, #255	; 0xff
    fcb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    fcba:	e050      	b.n	fd5e <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
    }
    else if(ODF_arg->subIndex == 2){   /* Transmission_type */
    fcbc:	687b      	ldr	r3, [r7, #4]
    fcbe:	7f1b      	ldrb	r3, [r3, #28]
    fcc0:	2b02      	cmp	r3, #2
    fcc2:	d11b      	bne.n	fcfc <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x160>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    fcc4:	687b      	ldr	r3, [r7, #4]
    fcc6:	685b      	ldr	r3, [r3, #4]
    fcc8:	613b      	str	r3, [r7, #16]

        /* values from 241...253 are not valid */
        if(*value >= 241 && *value <= 253)
    fcca:	693b      	ldr	r3, [r7, #16]
    fccc:	781b      	ldrb	r3, [r3, #0]
    fcce:	2bf0      	cmp	r3, #240	; 0xf0
    fcd0:	dd05      	ble.n	fcde <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x142>
    fcd2:	693b      	ldr	r3, [r7, #16]
    fcd4:	781b      	ldrb	r3, [r3, #0]
    fcd6:	2bfd      	cmp	r3, #253	; 0xfd
    fcd8:	dc01      	bgt.n	fcde <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x142>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    fcda:	4b27      	ldr	r3, [pc, #156]	; (fd78 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
    fcdc:	e040      	b.n	fd60 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>
        TPDO->CANtxBuff->syncFlag = (*value <= 240) ? 1 : 0;
    fcde:	69fb      	ldr	r3, [r7, #28]
    fce0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    fce2:	693a      	ldr	r2, [r7, #16]
    fce4:	7812      	ldrb	r2, [r2, #0]
    fce6:	2af0      	cmp	r2, #240	; 0xf0
    fce8:	dc01      	bgt.n	fcee <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x152>
    fcea:	2201      	movs	r2, #1
    fcec:	e000      	b.n	fcf0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x154>
    fcee:	2200      	movs	r2, #0
    fcf0:	739a      	strb	r2, [r3, #14]
        TPDO->syncCounter = 255;
    fcf2:	69fb      	ldr	r3, [r7, #28]
    fcf4:	22ff      	movs	r2, #255	; 0xff
    fcf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    fcfa:	e030      	b.n	fd5e <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
    }
    else if(ODF_arg->subIndex == 3){   /* Inhibit_Time */
    fcfc:	687b      	ldr	r3, [r7, #4]
    fcfe:	7f1b      	ldrb	r3, [r3, #28]
    fd00:	2b03      	cmp	r3, #3
    fd02:	d109      	bne.n	fd18 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x17c>
        /* if PDO is valid, value can not be changed */
        if(TPDO->valid)
    fd04:	69fb      	ldr	r3, [r7, #28]
    fd06:	7f5b      	ldrb	r3, [r3, #29]
    fd08:	2b00      	cmp	r3, #0
    fd0a:	d001      	beq.n	fd10 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x174>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    fd0c:	4b1a      	ldr	r3, [pc, #104]	; (fd78 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
    fd0e:	e027      	b.n	fd60 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

        TPDO->inhibitTimer = 0;
    fd10:	69fb      	ldr	r3, [r7, #28]
    fd12:	2200      	movs	r2, #0
    fd14:	645a      	str	r2, [r3, #68]	; 0x44
    fd16:	e022      	b.n	fd5e <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
    }
    else if(ODF_arg->subIndex == 5){   /* Event_Timer */
    fd18:	687b      	ldr	r3, [r7, #4]
    fd1a:	7f1b      	ldrb	r3, [r3, #28]
    fd1c:	2b05      	cmp	r3, #5
    fd1e:	d10b      	bne.n	fd38 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x19c>
        uint32_t *value = (uint32_t*) ODF_arg->data;
    fd20:	687b      	ldr	r3, [r7, #4]
    fd22:	685b      	ldr	r3, [r3, #4]
    fd24:	60bb      	str	r3, [r7, #8]

        TPDO->eventTimer = ((uint32_t) *value) * 1000;
    fd26:	68bb      	ldr	r3, [r7, #8]
    fd28:	681b      	ldr	r3, [r3, #0]
    fd2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    fd2e:	fb02 f203 	mul.w	r2, r2, r3
    fd32:	69fb      	ldr	r3, [r7, #28]
    fd34:	649a      	str	r2, [r3, #72]	; 0x48
    fd36:	e012      	b.n	fd5e <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
    }
    else if(ODF_arg->subIndex == 6){   /* SYNC start value */
    fd38:	687b      	ldr	r3, [r7, #4]
    fd3a:	7f1b      	ldrb	r3, [r3, #28]
    fd3c:	2b06      	cmp	r3, #6
    fd3e:	d10e      	bne.n	fd5e <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    fd40:	687b      	ldr	r3, [r7, #4]
    fd42:	685b      	ldr	r3, [r3, #4]
    fd44:	60fb      	str	r3, [r7, #12]

        /* if PDO is valid, value can not be changed */
        if(TPDO->valid)
    fd46:	69fb      	ldr	r3, [r7, #28]
    fd48:	7f5b      	ldrb	r3, [r3, #29]
    fd4a:	2b00      	cmp	r3, #0
    fd4c:	d001      	beq.n	fd52 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1b6>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    fd4e:	4b0a      	ldr	r3, [pc, #40]	; (fd78 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
    fd50:	e006      	b.n	fd60 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

        /* values from 240...255 are not valid */
        if(*value > 240)
    fd52:	68fb      	ldr	r3, [r7, #12]
    fd54:	781b      	ldrb	r3, [r3, #0]
    fd56:	2bf0      	cmp	r3, #240	; 0xf0
    fd58:	dd01      	ble.n	fd5e <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    fd5a:	4b07      	ldr	r3, [pc, #28]	; (fd78 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
    fd5c:	e000      	b.n	fd60 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>
    }

    return CO_SDO_AB_NONE;
    fd5e:	2300      	movs	r3, #0
}
    fd60:	4618      	mov	r0, r3
    fd62:	3720      	adds	r7, #32
    fd64:	46bd      	mov	sp, r7
    fd66:	bd80      	pop	{r7, pc}
    fd68:	06090011 	.word	0x06090011
    fd6c:	06010002 	.word	0x06010002
    fd70:	08000022 	.word	0x08000022
    fd74:	3fff8000 	.word	0x3fff8000
    fd78:	06090030 	.word	0x06090030
    fd7c:	0000f5e9 	.word	0x0000f5e9

0000fd80 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t>:
/*
 * Function for accessing _RPDO mapping parameter_ (index 0x1600+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_RPDOmap(CO_ODF_arg_t *ODF_arg){
    fd80:	b590      	push	{r4, r7, lr}
    fd82:	b08d      	sub	sp, #52	; 0x34
    fd84:	af04      	add	r7, sp, #16
    fd86:	6078      	str	r0, [r7, #4]
    CO_RPDO_t *RPDO;

    RPDO = (CO_RPDO_t*) ODF_arg->object;
    fd88:	687b      	ldr	r3, [r7, #4]
    fd8a:	681b      	ldr	r3, [r3, #0]
    fd8c:	61fb      	str	r3, [r7, #28]

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
    fd8e:	687b      	ldr	r3, [r7, #4]
    fd90:	7f5b      	ldrb	r3, [r3, #29]
    fd92:	2b00      	cmp	r3, #0
    fd94:	d010      	beq.n	fdb8 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x38>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    fd96:	687b      	ldr	r3, [r7, #4]
    fd98:	685b      	ldr	r3, [r3, #4]
    fd9a:	61bb      	str	r3, [r7, #24]

        if(ODF_arg->subIndex == 0){
    fd9c:	687b      	ldr	r3, [r7, #4]
    fd9e:	7f1b      	ldrb	r3, [r3, #28]
    fda0:	2b00      	cmp	r3, #0
    fda2:	d107      	bne.n	fdb4 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x34>
            /* If there is error in mapping, dataLength is 0, so numberOfMappedObjects is 0. */
            if(!RPDO->dataLength) *value = 0;
    fda4:	69fb      	ldr	r3, [r7, #28]
    fda6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
    fdaa:	2b00      	cmp	r3, #0
    fdac:	d102      	bne.n	fdb4 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x34>
    fdae:	69bb      	ldr	r3, [r7, #24]
    fdb0:	2200      	movs	r2, #0
    fdb2:	701a      	strb	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
    fdb4:	2300      	movs	r3, #0
    fdb6:	e054      	b.n	fe62 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>
    }

    /* Writing Object Dictionary variable */
    if(RPDO->restrictionFlags & 0x08)
    fdb8:	69fb      	ldr	r3, [r7, #28]
    fdba:	f893 3020 	ldrb.w	r3, [r3, #32]
    fdbe:	f003 0308 	and.w	r3, r3, #8
    fdc2:	2b00      	cmp	r3, #0
    fdc4:	d001      	beq.n	fdca <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x4a>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
    fdc6:	4b29      	ldr	r3, [pc, #164]	; (fe6c <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xec>)
    fdc8:	e04b      	b.n	fe62 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>
    if(*RPDO->operatingState == CO_NMT_OPERATIONAL && (RPDO->restrictionFlags & 0x02))
    fdca:	69fb      	ldr	r3, [r7, #28]
    fdcc:	695b      	ldr	r3, [r3, #20]
    fdce:	781b      	ldrb	r3, [r3, #0]
    fdd0:	2b05      	cmp	r3, #5
    fdd2:	d108      	bne.n	fde6 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x66>
    fdd4:	69fb      	ldr	r3, [r7, #28]
    fdd6:	f893 3020 	ldrb.w	r3, [r3, #32]
    fdda:	f003 0302 	and.w	r3, r3, #2
    fdde:	2b00      	cmp	r3, #0
    fde0:	d001      	beq.n	fde6 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x66>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
    fde2:	4b23      	ldr	r3, [pc, #140]	; (fe70 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xf0>)
    fde4:	e03d      	b.n	fe62 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>
    if(RPDO->valid)
    fde6:	69fb      	ldr	r3, [r7, #28]
    fde8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
    fdec:	2b00      	cmp	r3, #0
    fdee:	d001      	beq.n	fdf4 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x74>
        return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
    fdf0:	4b20      	ldr	r3, [pc, #128]	; (fe74 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xf4>)
    fdf2:	e036      	b.n	fe62 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>

    /* numberOfMappedObjects */
    if(ODF_arg->subIndex == 0){
    fdf4:	687b      	ldr	r3, [r7, #4]
    fdf6:	7f1b      	ldrb	r3, [r3, #28]
    fdf8:	2b00      	cmp	r3, #0
    fdfa:	d110      	bne.n	fe1e <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x9e>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    fdfc:	687b      	ldr	r3, [r7, #4]
    fdfe:	685b      	ldr	r3, [r3, #4]
    fe00:	617b      	str	r3, [r7, #20]

        if(*value > 8)
    fe02:	697b      	ldr	r3, [r7, #20]
    fe04:	781b      	ldrb	r3, [r3, #0]
    fe06:	2b08      	cmp	r3, #8
    fe08:	dd01      	ble.n	fe0e <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x8e>
            return CO_SDO_AB_MAP_LEN;  /* Number and length of object to be mapped exceeds PDO length. */
    fe0a:	4b1b      	ldr	r3, [pc, #108]	; (fe78 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xf8>)
    fe0c:	e029      	b.n	fe62 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>

        /* configure mapping */
        return (CO_SDO_abortCode_t)CO_RPDOconfigMap(RPDO, *value);
    fe0e:	697b      	ldr	r3, [r7, #20]
    fe10:	781b      	ldrb	r3, [r3, #0]
    fe12:	4619      	mov	r1, r3
    fe14:	69f8      	ldr	r0, [r7, #28]
    fe16:	4b19      	ldr	r3, [pc, #100]	; (fe7c <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xfc>)
    fe18:	4798      	blx	r3
    fe1a:	4603      	mov	r3, r0
    fe1c:	e021      	b.n	fe62 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>
    }

    /* mappedObject */
    else{
        uint32_t *value = (uint32_t*) ODF_arg->data;
    fe1e:	687b      	ldr	r3, [r7, #4]
    fe20:	685b      	ldr	r3, [r3, #4]
    fe22:	613b      	str	r3, [r7, #16]
        uint8_t* pData;
        uint8_t length = 0;
    fe24:	2300      	movs	r3, #0
    fe26:	72fb      	strb	r3, [r7, #11]
        uint8_t dummy = 0;
    fe28:	2300      	movs	r3, #0
    fe2a:	72bb      	strb	r3, [r7, #10]
        uint8_t MBvar;

        if(RPDO->dataLength)
    fe2c:	69fb      	ldr	r3, [r7, #28]
    fe2e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
    fe32:	2b00      	cmp	r3, #0
    fe34:	d001      	beq.n	fe3a <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xba>
            return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
    fe36:	4b0f      	ldr	r3, [pc, #60]	; (fe74 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xf4>)
    fe38:	e013      	b.n	fe62 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>

        /* verify if mapping is correct */
        return  (CO_SDO_abortCode_t)CO_PDOfindMap(
    fe3a:	69fb      	ldr	r3, [r7, #28]
    fe3c:	6858      	ldr	r0, [r3, #4]
    fe3e:	693b      	ldr	r3, [r7, #16]
    fe40:	6819      	ldr	r1, [r3, #0]
               *value,
                0,
               &pData,
               &length,
               &dummy,
               &MBvar);
    fe42:	f107 020c 	add.w	r2, r7, #12
    fe46:	f107 0309 	add.w	r3, r7, #9
    fe4a:	9302      	str	r3, [sp, #8]
    fe4c:	f107 030a 	add.w	r3, r7, #10
    fe50:	9301      	str	r3, [sp, #4]
    fe52:	f107 030b 	add.w	r3, r7, #11
    fe56:	9300      	str	r3, [sp, #0]
    fe58:	4613      	mov	r3, r2
    fe5a:	2200      	movs	r2, #0
    fe5c:	4c08      	ldr	r4, [pc, #32]	; (fe80 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x100>)
    fe5e:	47a0      	blx	r4
    fe60:	4603      	mov	r3, r0
    }

    return CO_SDO_AB_NONE;
}
    fe62:	4618      	mov	r0, r3
    fe64:	3724      	adds	r7, #36	; 0x24
    fe66:	46bd      	mov	sp, r7
    fe68:	bd90      	pop	{r4, r7, pc}
    fe6a:	bf00      	nop
    fe6c:	06010002 	.word	0x06010002
    fe70:	08000022 	.word	0x08000022
    fe74:	06010000 	.word	0x06010000
    fe78:	06040042 	.word	0x06040042
    fe7c:	0000f87d 	.word	0x0000f87d
    fe80:	0000f67d 	.word	0x0000f67d

0000fe84 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t>:
/*
 * Function for accessing _TPDO mapping parameter_ (index 0x1A00+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_TPDOmap(CO_ODF_arg_t *ODF_arg){
    fe84:	b590      	push	{r4, r7, lr}
    fe86:	b08d      	sub	sp, #52	; 0x34
    fe88:	af04      	add	r7, sp, #16
    fe8a:	6078      	str	r0, [r7, #4]
    CO_TPDO_t *TPDO;

    TPDO = (CO_TPDO_t*) ODF_arg->object;
    fe8c:	687b      	ldr	r3, [r7, #4]
    fe8e:	681b      	ldr	r3, [r3, #0]
    fe90:	61fb      	str	r3, [r7, #28]

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
    fe92:	687b      	ldr	r3, [r7, #4]
    fe94:	7f5b      	ldrb	r3, [r3, #29]
    fe96:	2b00      	cmp	r3, #0
    fe98:	d00f      	beq.n	feba <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x36>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    fe9a:	687b      	ldr	r3, [r7, #4]
    fe9c:	685b      	ldr	r3, [r3, #4]
    fe9e:	61bb      	str	r3, [r7, #24]

        if(ODF_arg->subIndex == 0){
    fea0:	687b      	ldr	r3, [r7, #4]
    fea2:	7f1b      	ldrb	r3, [r3, #28]
    fea4:	2b00      	cmp	r3, #0
    fea6:	d106      	bne.n	feb6 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x32>
            /* If there is error in mapping, dataLength is 0, so numberOfMappedObjects is 0. */
            if(!TPDO->dataLength) *value = 0;
    fea8:	69fb      	ldr	r3, [r7, #28]
    feaa:	7f9b      	ldrb	r3, [r3, #30]
    feac:	2b00      	cmp	r3, #0
    feae:	d102      	bne.n	feb6 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x32>
    feb0:	69bb      	ldr	r3, [r7, #24]
    feb2:	2200      	movs	r2, #0
    feb4:	701a      	strb	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
    feb6:	2300      	movs	r3, #0
    feb8:	e050      	b.n	ff5c <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>
    }

    /* Writing Object Dictionary variable */
    if(TPDO->restrictionFlags & 0x08)
    feba:	69fb      	ldr	r3, [r7, #28]
    febc:	7f1b      	ldrb	r3, [r3, #28]
    febe:	f003 0308 	and.w	r3, r3, #8
    fec2:	2b00      	cmp	r3, #0
    fec4:	d001      	beq.n	feca <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x46>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
    fec6:	4b27      	ldr	r3, [pc, #156]	; (ff64 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xe0>)
    fec8:	e048      	b.n	ff5c <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>
    if(*TPDO->operatingState == CO_NMT_OPERATIONAL && (TPDO->restrictionFlags & 0x02))
    feca:	69fb      	ldr	r3, [r7, #28]
    fecc:	691b      	ldr	r3, [r3, #16]
    fece:	781b      	ldrb	r3, [r3, #0]
    fed0:	2b05      	cmp	r3, #5
    fed2:	d107      	bne.n	fee4 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x60>
    fed4:	69fb      	ldr	r3, [r7, #28]
    fed6:	7f1b      	ldrb	r3, [r3, #28]
    fed8:	f003 0302 	and.w	r3, r3, #2
    fedc:	2b00      	cmp	r3, #0
    fede:	d001      	beq.n	fee4 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x60>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
    fee0:	4b21      	ldr	r3, [pc, #132]	; (ff68 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xe4>)
    fee2:	e03b      	b.n	ff5c <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>
    if(TPDO->valid)
    fee4:	69fb      	ldr	r3, [r7, #28]
    fee6:	7f5b      	ldrb	r3, [r3, #29]
    fee8:	2b00      	cmp	r3, #0
    feea:	d001      	beq.n	fef0 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x6c>
        return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
    feec:	4b1f      	ldr	r3, [pc, #124]	; (ff6c <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xe8>)
    feee:	e035      	b.n	ff5c <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>

    /* numberOfMappedObjects */
    if(ODF_arg->subIndex == 0){
    fef0:	687b      	ldr	r3, [r7, #4]
    fef2:	7f1b      	ldrb	r3, [r3, #28]
    fef4:	2b00      	cmp	r3, #0
    fef6:	d110      	bne.n	ff1a <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x96>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    fef8:	687b      	ldr	r3, [r7, #4]
    fefa:	685b      	ldr	r3, [r3, #4]
    fefc:	617b      	str	r3, [r7, #20]

        if(*value > 8)
    fefe:	697b      	ldr	r3, [r7, #20]
    ff00:	781b      	ldrb	r3, [r3, #0]
    ff02:	2b08      	cmp	r3, #8
    ff04:	dd01      	ble.n	ff0a <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x86>
            return CO_SDO_AB_MAP_LEN;  /* Number and length of object to be mapped exceeds PDO length. */
    ff06:	4b1a      	ldr	r3, [pc, #104]	; (ff70 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xec>)
    ff08:	e028      	b.n	ff5c <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>

        /* configure mapping */
        return (CO_SDO_abortCode_t)CO_TPDOconfigMap(TPDO, *value);
    ff0a:	697b      	ldr	r3, [r7, #20]
    ff0c:	781b      	ldrb	r3, [r3, #0]
    ff0e:	4619      	mov	r1, r3
    ff10:	69f8      	ldr	r0, [r7, #28]
    ff12:	4b18      	ldr	r3, [pc, #96]	; (ff74 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xf0>)
    ff14:	4798      	blx	r3
    ff16:	4603      	mov	r3, r0
    ff18:	e020      	b.n	ff5c <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>
    }

    /* mappedObject */
    else{
        uint32_t *value = (uint32_t*) ODF_arg->data;
    ff1a:	687b      	ldr	r3, [r7, #4]
    ff1c:	685b      	ldr	r3, [r3, #4]
    ff1e:	613b      	str	r3, [r7, #16]
        uint8_t* pData;
        uint8_t length = 0;
    ff20:	2300      	movs	r3, #0
    ff22:	72fb      	strb	r3, [r7, #11]
        uint8_t dummy = 0;
    ff24:	2300      	movs	r3, #0
    ff26:	72bb      	strb	r3, [r7, #10]
        uint8_t MBvar;

        if(TPDO->dataLength)
    ff28:	69fb      	ldr	r3, [r7, #28]
    ff2a:	7f9b      	ldrb	r3, [r3, #30]
    ff2c:	2b00      	cmp	r3, #0
    ff2e:	d001      	beq.n	ff34 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xb0>
            return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
    ff30:	4b0e      	ldr	r3, [pc, #56]	; (ff6c <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xe8>)
    ff32:	e013      	b.n	ff5c <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>

        /* verify if mapping is correct */
        return (CO_SDO_abortCode_t)CO_PDOfindMap(
    ff34:	69fb      	ldr	r3, [r7, #28]
    ff36:	6858      	ldr	r0, [r3, #4]
    ff38:	693b      	ldr	r3, [r7, #16]
    ff3a:	6819      	ldr	r1, [r3, #0]
               *value,
                1,
               &pData,
               &length,
               &dummy,
               &MBvar);
    ff3c:	f107 020c 	add.w	r2, r7, #12
    ff40:	f107 0309 	add.w	r3, r7, #9
    ff44:	9302      	str	r3, [sp, #8]
    ff46:	f107 030a 	add.w	r3, r7, #10
    ff4a:	9301      	str	r3, [sp, #4]
    ff4c:	f107 030b 	add.w	r3, r7, #11
    ff50:	9300      	str	r3, [sp, #0]
    ff52:	4613      	mov	r3, r2
    ff54:	2201      	movs	r2, #1
    ff56:	4c08      	ldr	r4, [pc, #32]	; (ff78 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xf4>)
    ff58:	47a0      	blx	r4
    ff5a:	4603      	mov	r3, r0
    }

    return CO_SDO_AB_NONE;
}
    ff5c:	4618      	mov	r0, r3
    ff5e:	3724      	adds	r7, #36	; 0x24
    ff60:	46bd      	mov	sp, r7
    ff62:	bd90      	pop	{r4, r7, pc}
    ff64:	06010002 	.word	0x06010002
    ff68:	08000022 	.word	0x08000022
    ff6c:	06010000 	.word	0x06010000
    ff70:	06040042 	.word	0x06040042
    ff74:	0000f94d 	.word	0x0000f94d
    ff78:	0000f67d 	.word	0x0000f67d

0000ff7c <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm>:
        const CO_RPDOMapPar_t  *RPDOMapPar,
        uint32_t                idx_RPDOCommPar,
        uint32_t                idx_RPDOMapPar,
        CO_CANmodule_t         *CANdevRx,
        uint32_t                CANdevRxIdx)
{
    ff7c:	b590      	push	{r4, r7, lr}
    ff7e:	b087      	sub	sp, #28
    ff80:	af02      	add	r7, sp, #8
    ff82:	60f8      	str	r0, [r7, #12]
    ff84:	60b9      	str	r1, [r7, #8]
    ff86:	607a      	str	r2, [r7, #4]
    ff88:	603b      	str	r3, [r7, #0]
    /* verify arguments */
    if(RPDO==NULL || em==NULL || SDO==NULL || SYNC==NULL || operatingState==NULL ||
    ff8a:	68bb      	ldr	r3, [r7, #8]
    ff8c:	2b00      	cmp	r3, #0
    ff8e:	d014      	beq.n	ffba <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
    ff90:	687b      	ldr	r3, [r7, #4]
    ff92:	2b00      	cmp	r3, #0
    ff94:	d011      	beq.n	ffba <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
    ff96:	683b      	ldr	r3, [r7, #0]
    ff98:	2b00      	cmp	r3, #0
    ff9a:	d00e      	beq.n	ffba <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
    ff9c:	6a3b      	ldr	r3, [r7, #32]
    ff9e:	2b00      	cmp	r3, #0
    ffa0:	d00b      	beq.n	ffba <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
    ffa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ffa4:	2b00      	cmp	r3, #0
    ffa6:	d008      	beq.n	ffba <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
    ffa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ffaa:	2b00      	cmp	r3, #0
    ffac:	d005      	beq.n	ffba <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
        RPDOCommPar==NULL || RPDOMapPar==NULL || CANdevRx==NULL){
    ffae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ffb0:	2b00      	cmp	r3, #0
    ffb2:	d002      	beq.n	ffba <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
    ffb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ffb6:	2b00      	cmp	r3, #0
    ffb8:	d102      	bne.n	ffc0 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x44>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    ffba:	f04f 33ff 	mov.w	r3, #4294967295
    ffbe:	e050      	b.n	10062 <STACK_SIZE+0x62>
    }

    /* Configure object variables */
    RPDO->em = em;
    ffc0:	68bb      	ldr	r3, [r7, #8]
    ffc2:	687a      	ldr	r2, [r7, #4]
    ffc4:	601a      	str	r2, [r3, #0]
    RPDO->SDO = SDO;
    ffc6:	68bb      	ldr	r3, [r7, #8]
    ffc8:	683a      	ldr	r2, [r7, #0]
    ffca:	605a      	str	r2, [r3, #4]
    RPDO->SYNC = SYNC;
    ffcc:	68bb      	ldr	r3, [r7, #8]
    ffce:	6a3a      	ldr	r2, [r7, #32]
    ffd0:	609a      	str	r2, [r3, #8]
    RPDO->RPDOCommPar = RPDOCommPar;
    ffd2:	68bb      	ldr	r3, [r7, #8]
    ffd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    ffd6:	60da      	str	r2, [r3, #12]
    RPDO->RPDOMapPar = RPDOMapPar;
    ffd8:	68bb      	ldr	r3, [r7, #8]
    ffda:	6bba      	ldr	r2, [r7, #56]	; 0x38
    ffdc:	611a      	str	r2, [r3, #16]
    RPDO->operatingState = operatingState;
    ffde:	68bb      	ldr	r3, [r7, #8]
    ffe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    ffe2:	615a      	str	r2, [r3, #20]
    RPDO->nodeId = nodeId;
    ffe4:	68bb      	ldr	r3, [r7, #8]
    ffe6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
    ffea:	761a      	strb	r2, [r3, #24]
    RPDO->defaultCOB_ID = defaultCOB_ID;
    ffec:	68bb      	ldr	r3, [r7, #8]
    ffee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    fff0:	61da      	str	r2, [r3, #28]
    RPDO->restrictionFlags = restrictionFlags;
    fff2:	68bb      	ldr	r3, [r7, #8]
    fff4:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
    fff8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Configure Object dictionary entry at index 0x1400+ and 0x1600+ */
    ptrCODriverClass->CO_OD_configure( idx_RPDOCommPar, CO_ODF_RPDOcom, (void*)RPDO, 0, 0);
    fffc:	4b1b      	ldr	r3, [pc, #108]	; (1006c <STACK_SIZE+0x6c>)
    fffe:	681b      	ldr	r3, [r3, #0]
   10000:	1d18      	adds	r0, r3, #4
   10002:	2300      	movs	r3, #0
   10004:	9301      	str	r3, [sp, #4]
   10006:	2300      	movs	r3, #0
   10008:	9300      	str	r3, [sp, #0]
   1000a:	68bb      	ldr	r3, [r7, #8]
   1000c:	4a18      	ldr	r2, [pc, #96]	; (10070 <STACK_SIZE+0x70>)
   1000e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   10010:	4c18      	ldr	r4, [pc, #96]	; (10074 <STACK_SIZE+0x74>)
   10012:	47a0      	blx	r4
    ptrCODriverClass->CO_OD_configure( idx_RPDOMapPar, CO_ODF_RPDOmap, (void*)RPDO, 0, 0);
   10014:	4b15      	ldr	r3, [pc, #84]	; (1006c <STACK_SIZE+0x6c>)
   10016:	681b      	ldr	r3, [r3, #0]
   10018:	1d18      	adds	r0, r3, #4
   1001a:	2300      	movs	r3, #0
   1001c:	9301      	str	r3, [sp, #4]
   1001e:	2300      	movs	r3, #0
   10020:	9300      	str	r3, [sp, #0]
   10022:	68bb      	ldr	r3, [r7, #8]
   10024:	4a14      	ldr	r2, [pc, #80]	; (10078 <STACK_SIZE+0x78>)
   10026:	6c39      	ldr	r1, [r7, #64]	; 0x40
   10028:	4c12      	ldr	r4, [pc, #72]	; (10074 <STACK_SIZE+0x74>)
   1002a:	47a0      	blx	r4

    /* configure communication and mapping */
    RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
   1002c:	68bb      	ldr	r3, [r7, #8]
   1002e:	2200      	movs	r2, #0
   10030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   10034:	68bb      	ldr	r3, [r7, #8]
   10036:	2200      	movs	r2, #0
   10038:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    RPDO->CANdevRx = CANdevRx;
   1003c:	68bb      	ldr	r3, [r7, #8]
   1003e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   10040:	659a      	str	r2, [r3, #88]	; 0x58
    RPDO->CANdevRxIdx = CANdevRxIdx;
   10042:	68bb      	ldr	r3, [r7, #8]
   10044:	6cba      	ldr	r2, [r7, #72]	; 0x48
   10046:	65da      	str	r2, [r3, #92]	; 0x5c

    CO_RPDOconfigMap(RPDO, RPDOMapPar->numberOfMappedObjects);
   10048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1004a:	781b      	ldrb	r3, [r3, #0]
   1004c:	4619      	mov	r1, r3
   1004e:	68b8      	ldr	r0, [r7, #8]
   10050:	4b0a      	ldr	r3, [pc, #40]	; (1007c <STACK_SIZE+0x7c>)
   10052:	4798      	blx	r3
    CO_RPDOconfigCom(RPDO, RPDOCommPar->COB_IDUsedByRPDO);
   10054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10056:	685b      	ldr	r3, [r3, #4]
   10058:	4619      	mov	r1, r3
   1005a:	68b8      	ldr	r0, [r7, #8]
   1005c:	4b08      	ldr	r3, [pc, #32]	; (10080 <STACK_SIZE+0x80>)
   1005e:	4798      	blx	r3

    return CO_ERROR_NO;
   10060:	2300      	movs	r3, #0
}
   10062:	4618      	mov	r0, r3
   10064:	3714      	adds	r7, #20
   10066:	46bd      	mov	sp, r7
   10068:	bd90      	pop	{r4, r7, pc}
   1006a:	bf00      	nop
   1006c:	20001a7c 	.word	0x20001a7c
   10070:	0000fa1d 	.word	0x0000fa1d
   10074:	00010b91 	.word	0x00010b91
   10078:	0000fd81 	.word	0x0000fd81
   1007c:	0000f87d 	.word	0x0000f87d
   10080:	0000f511 	.word	0x0000f511

00010084 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm>:
        const CO_TPDOMapPar_t  *TPDOMapPar,
        uint32_t                idx_TPDOCommPar,
        uint32_t                idx_TPDOMapPar,
        CO_CANmodule_t         *CANdevTx,
        uint32_t                CANdevTxIdx)
{
   10084:	b590      	push	{r4, r7, lr}
   10086:	b087      	sub	sp, #28
   10088:	af02      	add	r7, sp, #8
   1008a:	60f8      	str	r0, [r7, #12]
   1008c:	60b9      	str	r1, [r7, #8]
   1008e:	607a      	str	r2, [r7, #4]
   10090:	603b      	str	r3, [r7, #0]
    /* verify arguments */
    if(TPDO==NULL || em==NULL || SDO==NULL || operatingState==NULL ||
   10092:	68bb      	ldr	r3, [r7, #8]
   10094:	2b00      	cmp	r3, #0
   10096:	d011      	beq.n	100bc <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
   10098:	687b      	ldr	r3, [r7, #4]
   1009a:	2b00      	cmp	r3, #0
   1009c:	d00e      	beq.n	100bc <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
   1009e:	683b      	ldr	r3, [r7, #0]
   100a0:	2b00      	cmp	r3, #0
   100a2:	d00b      	beq.n	100bc <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
   100a4:	6a3b      	ldr	r3, [r7, #32]
   100a6:	2b00      	cmp	r3, #0
   100a8:	d008      	beq.n	100bc <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
   100aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   100ac:	2b00      	cmp	r3, #0
   100ae:	d005      	beq.n	100bc <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
        TPDOCommPar==NULL || TPDOMapPar==NULL || CANdevTx==NULL){
   100b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   100b2:	2b00      	cmp	r3, #0
   100b4:	d002      	beq.n	100bc <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
   100b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   100b8:	2b00      	cmp	r3, #0
   100ba:	d102      	bne.n	100c2 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
        return CO_ERROR_ILLEGAL_ARGUMENT;
   100bc:	f04f 33ff 	mov.w	r3, #4294967295
   100c0:	e070      	b.n	101a4 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x120>
    }

    /* Configure object variables */
    TPDO->em = em;
   100c2:	68bb      	ldr	r3, [r7, #8]
   100c4:	687a      	ldr	r2, [r7, #4]
   100c6:	601a      	str	r2, [r3, #0]
    TPDO->SDO = SDO;
   100c8:	68bb      	ldr	r3, [r7, #8]
   100ca:	683a      	ldr	r2, [r7, #0]
   100cc:	605a      	str	r2, [r3, #4]
    TPDO->TPDOCommPar = TPDOCommPar;
   100ce:	68bb      	ldr	r3, [r7, #8]
   100d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   100d2:	609a      	str	r2, [r3, #8]
    TPDO->TPDOMapPar = TPDOMapPar;
   100d4:	68bb      	ldr	r3, [r7, #8]
   100d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   100d8:	60da      	str	r2, [r3, #12]
    TPDO->operatingState = operatingState;
   100da:	68bb      	ldr	r3, [r7, #8]
   100dc:	6a3a      	ldr	r2, [r7, #32]
   100de:	611a      	str	r2, [r3, #16]
    TPDO->nodeId = nodeId;
   100e0:	68bb      	ldr	r3, [r7, #8]
   100e2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
   100e6:	751a      	strb	r2, [r3, #20]
    TPDO->defaultCOB_ID = defaultCOB_ID;
   100e8:	68bb      	ldr	r3, [r7, #8]
   100ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
   100ec:	619a      	str	r2, [r3, #24]
    TPDO->restrictionFlags = restrictionFlags;
   100ee:	68bb      	ldr	r3, [r7, #8]
   100f0:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
   100f4:	771a      	strb	r2, [r3, #28]

    /* Configure Object dictionary entry at index 0x1800+ and 0x1A00+ */
    ptrCODriverClass->CO_OD_configure( idx_TPDOCommPar, CO_ODF_TPDOcom, (void*)TPDO, 0, 0);
   100f6:	4b2d      	ldr	r3, [pc, #180]	; (101ac <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x128>)
   100f8:	681b      	ldr	r3, [r3, #0]
   100fa:	1d18      	adds	r0, r3, #4
   100fc:	2300      	movs	r3, #0
   100fe:	9301      	str	r3, [sp, #4]
   10100:	2300      	movs	r3, #0
   10102:	9300      	str	r3, [sp, #0]
   10104:	68bb      	ldr	r3, [r7, #8]
   10106:	4a2a      	ldr	r2, [pc, #168]	; (101b0 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x12c>)
   10108:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   1010a:	4c2a      	ldr	r4, [pc, #168]	; (101b4 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x130>)
   1010c:	47a0      	blx	r4
    ptrCODriverClass->CO_OD_configure( idx_TPDOMapPar, CO_ODF_TPDOmap, (void*)TPDO, 0, 0);
   1010e:	4b27      	ldr	r3, [pc, #156]	; (101ac <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x128>)
   10110:	681b      	ldr	r3, [r3, #0]
   10112:	1d18      	adds	r0, r3, #4
   10114:	2300      	movs	r3, #0
   10116:	9301      	str	r3, [sp, #4]
   10118:	2300      	movs	r3, #0
   1011a:	9300      	str	r3, [sp, #0]
   1011c:	68bb      	ldr	r3, [r7, #8]
   1011e:	4a26      	ldr	r2, [pc, #152]	; (101b8 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x134>)
   10120:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   10122:	4c24      	ldr	r4, [pc, #144]	; (101b4 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x130>)
   10124:	47a0      	blx	r4

    /* configure communication and mapping */
    TPDO->CANdevTx = CANdevTx;
   10126:	68bb      	ldr	r3, [r7, #8]
   10128:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1012a:	64da      	str	r2, [r3, #76]	; 0x4c
    TPDO->CANdevTxIdx = CANdevTxIdx;
   1012c:	68bb      	ldr	r3, [r7, #8]
   1012e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   10130:	655a      	str	r2, [r3, #84]	; 0x54
    TPDO->syncCounter = 255;
   10132:	68bb      	ldr	r3, [r7, #8]
   10134:	22ff      	movs	r2, #255	; 0xff
   10136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TPDO->inhibitTimer = 0;
   1013a:	68bb      	ldr	r3, [r7, #8]
   1013c:	2200      	movs	r2, #0
   1013e:	645a      	str	r2, [r3, #68]	; 0x44
    TPDO->eventTimer = ((uint32_t) TPDOCommPar->eventTimer) * 1000;
   10140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10142:	695b      	ldr	r3, [r3, #20]
   10144:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10148:	fb02 f203 	mul.w	r2, r2, r3
   1014c:	68bb      	ldr	r3, [r7, #8]
   1014e:	649a      	str	r2, [r3, #72]	; 0x48
    if(TPDOCommPar->transmissionType>=254) TPDO->sendRequest = 1;
   10150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10152:	7a1b      	ldrb	r3, [r3, #8]
   10154:	2bfd      	cmp	r3, #253	; 0xfd
   10156:	dd02      	ble.n	1015e <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0xda>
   10158:	68bb      	ldr	r3, [r7, #8]
   1015a:	2201      	movs	r2, #1
   1015c:	77da      	strb	r2, [r3, #31]

    CO_TPDOconfigMap(TPDO, TPDOMapPar->numberOfMappedObjects);
   1015e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10160:	781b      	ldrb	r3, [r3, #0]
   10162:	4619      	mov	r1, r3
   10164:	68b8      	ldr	r0, [r7, #8]
   10166:	4b15      	ldr	r3, [pc, #84]	; (101bc <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x138>)
   10168:	4798      	blx	r3
    CO_TPDOconfigCom(TPDO, TPDOCommPar->COB_IDUsedByTPDO, ((TPDOCommPar->transmissionType<=240) ? 1 : 0));
   1016a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1016c:	6859      	ldr	r1, [r3, #4]
   1016e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10170:	7a1b      	ldrb	r3, [r3, #8]
   10172:	2bf0      	cmp	r3, #240	; 0xf0
   10174:	dc01      	bgt.n	1017a <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0xf6>
   10176:	2301      	movs	r3, #1
   10178:	e000      	b.n	1017c <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0xf8>
   1017a:	2300      	movs	r3, #0
   1017c:	461a      	mov	r2, r3
   1017e:	68b8      	ldr	r0, [r7, #8]
   10180:	4b0f      	ldr	r3, [pc, #60]	; (101c0 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x13c>)
   10182:	4798      	blx	r3

    if((TPDOCommPar->transmissionType>240 &&
   10184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10186:	7a1b      	ldrb	r3, [r3, #8]
   10188:	2bf0      	cmp	r3, #240	; 0xf0
   1018a:	dd03      	ble.n	10194 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x110>
         TPDOCommPar->transmissionType<254) ||
   1018c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1018e:	7a1b      	ldrb	r3, [r3, #8]
    if((TPDOCommPar->transmissionType>240 &&
   10190:	2bfd      	cmp	r3, #253	; 0xfd
   10192:	dd03      	ble.n	1019c <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x118>
         TPDOCommPar->SYNCStartValue>240){
   10194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10196:	7e1b      	ldrb	r3, [r3, #24]
         TPDOCommPar->transmissionType<254) ||
   10198:	2bf0      	cmp	r3, #240	; 0xf0
   1019a:	dd02      	ble.n	101a2 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x11e>
            TPDO->valid = false;
   1019c:	68bb      	ldr	r3, [r7, #8]
   1019e:	2200      	movs	r2, #0
   101a0:	775a      	strb	r2, [r3, #29]
    }

    return CO_ERROR_NO;
   101a2:	2300      	movs	r3, #0
}
   101a4:	4618      	mov	r0, r3
   101a6:	3714      	adds	r7, #20
   101a8:	46bd      	mov	sp, r7
   101aa:	bd90      	pop	{r4, r7, pc}
   101ac:	20001a7c 	.word	0x20001a7c
   101b0:	0000fb9d 	.word	0x0000fb9d
   101b4:	00010b91 	.word	0x00010b91
   101b8:	0000fe85 	.word	0x0000fe85
   101bc:	0000f94d 	.word	0x0000f94d
   101c0:	0000f5e9 	.word	0x0000f5e9

000101c4 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t>:


/******************************************************************************/
uint8_t CO_PDO_Class::CO_TPDOisCOS(CO_TPDO_t *TPDO){
   101c4:	b480      	push	{r7}
   101c6:	b085      	sub	sp, #20
   101c8:	af00      	add	r7, sp, #0
   101ca:	6078      	str	r0, [r7, #4]
   101cc:	6039      	str	r1, [r7, #0]

    /* Prepare TPDO data automatically from Object Dictionary variables */
    uint8_t* pPDOdataByte;
    uint8_t** ppODdataByte;

    pPDOdataByte = &TPDO->CANtxBuff->data[TPDO->dataLength];
   101ce:	683b      	ldr	r3, [r7, #0]
   101d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   101d2:	683a      	ldr	r2, [r7, #0]
   101d4:	7f92      	ldrb	r2, [r2, #30]
   101d6:	4413      	add	r3, r2
   101d8:	3305      	adds	r3, #5
   101da:	60fb      	str	r3, [r7, #12]
    ppODdataByte = &TPDO->mapPointer[TPDO->dataLength];
   101dc:	683b      	ldr	r3, [r7, #0]
   101de:	7f9b      	ldrb	r3, [r3, #30]
   101e0:	3308      	adds	r3, #8
   101e2:	009b      	lsls	r3, r3, #2
   101e4:	683a      	ldr	r2, [r7, #0]
   101e6:	4413      	add	r3, r2
   101e8:	60bb      	str	r3, [r7, #8]

    switch(TPDO->dataLength){
   101ea:	683b      	ldr	r3, [r7, #0]
   101ec:	7f9b      	ldrb	r3, [r3, #30]
   101ee:	3b01      	subs	r3, #1
   101f0:	2b07      	cmp	r3, #7
   101f2:	f200 80ea 	bhi.w	103ca <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x206>
   101f6:	a201      	add	r2, pc, #4	; (adr r2, 101fc <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x38>)
   101f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   101fc:	00010395 	.word	0x00010395
   10200:	0001035f 	.word	0x0001035f
   10204:	00010329 	.word	0x00010329
   10208:	000102f3 	.word	0x000102f3
   1020c:	000102bd 	.word	0x000102bd
   10210:	00010287 	.word	0x00010287
   10214:	00010251 	.word	0x00010251
   10218:	0001021d 	.word	0x0001021d
        case 8: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x80)) return 1;
   1021c:	68fb      	ldr	r3, [r7, #12]
   1021e:	3b01      	subs	r3, #1
   10220:	60fb      	str	r3, [r7, #12]
   10222:	68fb      	ldr	r3, [r7, #12]
   10224:	781a      	ldrb	r2, [r3, #0]
   10226:	68bb      	ldr	r3, [r7, #8]
   10228:	3b04      	subs	r3, #4
   1022a:	60bb      	str	r3, [r7, #8]
   1022c:	68bb      	ldr	r3, [r7, #8]
   1022e:	681b      	ldr	r3, [r3, #0]
   10230:	781b      	ldrb	r3, [r3, #0]
   10232:	429a      	cmp	r2, r3
   10234:	d007      	beq.n	10246 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x82>
   10236:	683b      	ldr	r3, [r7, #0]
   10238:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   1023c:	b25b      	sxtb	r3, r3
   1023e:	2b00      	cmp	r3, #0
   10240:	da01      	bge.n	10246 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x82>
   10242:	2301      	movs	r3, #1
   10244:	e000      	b.n	10248 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x84>
   10246:	2300      	movs	r3, #0
   10248:	2b00      	cmp	r3, #0
   1024a:	d001      	beq.n	10250 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x8c>
   1024c:	2301      	movs	r3, #1
   1024e:	e0bd      	b.n	103cc <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x208>
        case 7: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x40)) return 1;
   10250:	68fb      	ldr	r3, [r7, #12]
   10252:	3b01      	subs	r3, #1
   10254:	60fb      	str	r3, [r7, #12]
   10256:	68fb      	ldr	r3, [r7, #12]
   10258:	781a      	ldrb	r2, [r3, #0]
   1025a:	68bb      	ldr	r3, [r7, #8]
   1025c:	3b04      	subs	r3, #4
   1025e:	60bb      	str	r3, [r7, #8]
   10260:	68bb      	ldr	r3, [r7, #8]
   10262:	681b      	ldr	r3, [r3, #0]
   10264:	781b      	ldrb	r3, [r3, #0]
   10266:	429a      	cmp	r2, r3
   10268:	d008      	beq.n	1027c <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0xb8>
   1026a:	683b      	ldr	r3, [r7, #0]
   1026c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   10270:	f003 0340 	and.w	r3, r3, #64	; 0x40
   10274:	2b00      	cmp	r3, #0
   10276:	d001      	beq.n	1027c <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0xb8>
   10278:	2301      	movs	r3, #1
   1027a:	e000      	b.n	1027e <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0xba>
   1027c:	2300      	movs	r3, #0
   1027e:	2b00      	cmp	r3, #0
   10280:	d001      	beq.n	10286 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0xc2>
   10282:	2301      	movs	r3, #1
   10284:	e0a2      	b.n	103cc <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x208>
        case 6: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x20)) return 1;
   10286:	68fb      	ldr	r3, [r7, #12]
   10288:	3b01      	subs	r3, #1
   1028a:	60fb      	str	r3, [r7, #12]
   1028c:	68fb      	ldr	r3, [r7, #12]
   1028e:	781a      	ldrb	r2, [r3, #0]
   10290:	68bb      	ldr	r3, [r7, #8]
   10292:	3b04      	subs	r3, #4
   10294:	60bb      	str	r3, [r7, #8]
   10296:	68bb      	ldr	r3, [r7, #8]
   10298:	681b      	ldr	r3, [r3, #0]
   1029a:	781b      	ldrb	r3, [r3, #0]
   1029c:	429a      	cmp	r2, r3
   1029e:	d008      	beq.n	102b2 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0xee>
   102a0:	683b      	ldr	r3, [r7, #0]
   102a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   102a6:	f003 0320 	and.w	r3, r3, #32
   102aa:	2b00      	cmp	r3, #0
   102ac:	d001      	beq.n	102b2 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0xee>
   102ae:	2301      	movs	r3, #1
   102b0:	e000      	b.n	102b4 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0xf0>
   102b2:	2300      	movs	r3, #0
   102b4:	2b00      	cmp	r3, #0
   102b6:	d001      	beq.n	102bc <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0xf8>
   102b8:	2301      	movs	r3, #1
   102ba:	e087      	b.n	103cc <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x208>
        case 5: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x10)) return 1;
   102bc:	68fb      	ldr	r3, [r7, #12]
   102be:	3b01      	subs	r3, #1
   102c0:	60fb      	str	r3, [r7, #12]
   102c2:	68fb      	ldr	r3, [r7, #12]
   102c4:	781a      	ldrb	r2, [r3, #0]
   102c6:	68bb      	ldr	r3, [r7, #8]
   102c8:	3b04      	subs	r3, #4
   102ca:	60bb      	str	r3, [r7, #8]
   102cc:	68bb      	ldr	r3, [r7, #8]
   102ce:	681b      	ldr	r3, [r3, #0]
   102d0:	781b      	ldrb	r3, [r3, #0]
   102d2:	429a      	cmp	r2, r3
   102d4:	d008      	beq.n	102e8 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x124>
   102d6:	683b      	ldr	r3, [r7, #0]
   102d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   102dc:	f003 0310 	and.w	r3, r3, #16
   102e0:	2b00      	cmp	r3, #0
   102e2:	d001      	beq.n	102e8 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x124>
   102e4:	2301      	movs	r3, #1
   102e6:	e000      	b.n	102ea <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x126>
   102e8:	2300      	movs	r3, #0
   102ea:	2b00      	cmp	r3, #0
   102ec:	d001      	beq.n	102f2 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x12e>
   102ee:	2301      	movs	r3, #1
   102f0:	e06c      	b.n	103cc <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x208>
        case 4: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x08)) return 1;
   102f2:	68fb      	ldr	r3, [r7, #12]
   102f4:	3b01      	subs	r3, #1
   102f6:	60fb      	str	r3, [r7, #12]
   102f8:	68fb      	ldr	r3, [r7, #12]
   102fa:	781a      	ldrb	r2, [r3, #0]
   102fc:	68bb      	ldr	r3, [r7, #8]
   102fe:	3b04      	subs	r3, #4
   10300:	60bb      	str	r3, [r7, #8]
   10302:	68bb      	ldr	r3, [r7, #8]
   10304:	681b      	ldr	r3, [r3, #0]
   10306:	781b      	ldrb	r3, [r3, #0]
   10308:	429a      	cmp	r2, r3
   1030a:	d008      	beq.n	1031e <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x15a>
   1030c:	683b      	ldr	r3, [r7, #0]
   1030e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   10312:	f003 0308 	and.w	r3, r3, #8
   10316:	2b00      	cmp	r3, #0
   10318:	d001      	beq.n	1031e <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x15a>
   1031a:	2301      	movs	r3, #1
   1031c:	e000      	b.n	10320 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x15c>
   1031e:	2300      	movs	r3, #0
   10320:	2b00      	cmp	r3, #0
   10322:	d001      	beq.n	10328 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x164>
   10324:	2301      	movs	r3, #1
   10326:	e051      	b.n	103cc <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x208>
        case 3: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x04)) return 1;
   10328:	68fb      	ldr	r3, [r7, #12]
   1032a:	3b01      	subs	r3, #1
   1032c:	60fb      	str	r3, [r7, #12]
   1032e:	68fb      	ldr	r3, [r7, #12]
   10330:	781a      	ldrb	r2, [r3, #0]
   10332:	68bb      	ldr	r3, [r7, #8]
   10334:	3b04      	subs	r3, #4
   10336:	60bb      	str	r3, [r7, #8]
   10338:	68bb      	ldr	r3, [r7, #8]
   1033a:	681b      	ldr	r3, [r3, #0]
   1033c:	781b      	ldrb	r3, [r3, #0]
   1033e:	429a      	cmp	r2, r3
   10340:	d008      	beq.n	10354 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x190>
   10342:	683b      	ldr	r3, [r7, #0]
   10344:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   10348:	f003 0304 	and.w	r3, r3, #4
   1034c:	2b00      	cmp	r3, #0
   1034e:	d001      	beq.n	10354 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x190>
   10350:	2301      	movs	r3, #1
   10352:	e000      	b.n	10356 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x192>
   10354:	2300      	movs	r3, #0
   10356:	2b00      	cmp	r3, #0
   10358:	d001      	beq.n	1035e <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x19a>
   1035a:	2301      	movs	r3, #1
   1035c:	e036      	b.n	103cc <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x208>
        case 2: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x02)) return 1;
   1035e:	68fb      	ldr	r3, [r7, #12]
   10360:	3b01      	subs	r3, #1
   10362:	60fb      	str	r3, [r7, #12]
   10364:	68fb      	ldr	r3, [r7, #12]
   10366:	781a      	ldrb	r2, [r3, #0]
   10368:	68bb      	ldr	r3, [r7, #8]
   1036a:	3b04      	subs	r3, #4
   1036c:	60bb      	str	r3, [r7, #8]
   1036e:	68bb      	ldr	r3, [r7, #8]
   10370:	681b      	ldr	r3, [r3, #0]
   10372:	781b      	ldrb	r3, [r3, #0]
   10374:	429a      	cmp	r2, r3
   10376:	d008      	beq.n	1038a <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x1c6>
   10378:	683b      	ldr	r3, [r7, #0]
   1037a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   1037e:	f003 0302 	and.w	r3, r3, #2
   10382:	2b00      	cmp	r3, #0
   10384:	d001      	beq.n	1038a <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x1c6>
   10386:	2301      	movs	r3, #1
   10388:	e000      	b.n	1038c <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x1c8>
   1038a:	2300      	movs	r3, #0
   1038c:	2b00      	cmp	r3, #0
   1038e:	d001      	beq.n	10394 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x1d0>
   10390:	2301      	movs	r3, #1
   10392:	e01b      	b.n	103cc <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x208>
        case 1: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x01)) return 1;
   10394:	68fb      	ldr	r3, [r7, #12]
   10396:	3b01      	subs	r3, #1
   10398:	60fb      	str	r3, [r7, #12]
   1039a:	68fb      	ldr	r3, [r7, #12]
   1039c:	781a      	ldrb	r2, [r3, #0]
   1039e:	68bb      	ldr	r3, [r7, #8]
   103a0:	3b04      	subs	r3, #4
   103a2:	60bb      	str	r3, [r7, #8]
   103a4:	68bb      	ldr	r3, [r7, #8]
   103a6:	681b      	ldr	r3, [r3, #0]
   103a8:	781b      	ldrb	r3, [r3, #0]
   103aa:	429a      	cmp	r2, r3
   103ac:	d008      	beq.n	103c0 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x1fc>
   103ae:	683b      	ldr	r3, [r7, #0]
   103b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   103b4:	f003 0301 	and.w	r3, r3, #1
   103b8:	2b00      	cmp	r3, #0
   103ba:	d001      	beq.n	103c0 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x1fc>
   103bc:	2301      	movs	r3, #1
   103be:	e000      	b.n	103c2 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x1fe>
   103c0:	2300      	movs	r3, #0
   103c2:	2b00      	cmp	r3, #0
   103c4:	d001      	beq.n	103ca <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x206>
   103c6:	2301      	movs	r3, #1
   103c8:	e000      	b.n	103cc <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x208>
    }

    return 0;
   103ca:	2300      	movs	r3, #0
}
   103cc:	4618      	mov	r0, r3
   103ce:	3714      	adds	r7, #20
   103d0:	46bd      	mov	sp, r7
   103d2:	bc80      	pop	{r7}
   103d4:	4770      	bx	lr
   103d6:	bf00      	nop

000103d8 <_ZN12CO_PDO_Class11CO_TPDOsendEP9CO_TPDO_t>:

//#define TPDO_CALLS_EXTENSION
/******************************************************************************/
uint32_t CO_PDO_Class::CO_TPDOsend(CO_TPDO_t *TPDO){
   103d8:	b580      	push	{r7, lr}
   103da:	b086      	sub	sp, #24
   103dc:	af00      	add	r7, sp, #0
   103de:	6078      	str	r0, [r7, #4]
   103e0:	6039      	str	r1, [r7, #0]
            ODF_arg.dataLength = CO_OD_getLength(pSDO, entryNo, subIndex);
            ext->pODFunc(&ODF_arg);
        }
    }
#endif
    i = TPDO->dataLength;
   103e2:	683b      	ldr	r3, [r7, #0]
   103e4:	7f9b      	ldrb	r3, [r3, #30]
   103e6:	617b      	str	r3, [r7, #20]
    pPDOdataByte = &TPDO->CANtxBuff->data[0];
   103e8:	683b      	ldr	r3, [r7, #0]
   103ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   103ec:	3305      	adds	r3, #5
   103ee:	613b      	str	r3, [r7, #16]
    ppODdataByte = &TPDO->mapPointer[0];
   103f0:	683b      	ldr	r3, [r7, #0]
   103f2:	3320      	adds	r3, #32
   103f4:	60fb      	str	r3, [r7, #12]

    /* Copy data from Object dictionary. */
    for(; i>0; i--) {
   103f6:	697b      	ldr	r3, [r7, #20]
   103f8:	2b00      	cmp	r3, #0
   103fa:	d00c      	beq.n	10416 <_ZN12CO_PDO_Class11CO_TPDOsendEP9CO_TPDO_t+0x3e>
        *(pPDOdataByte++) = **(ppODdataByte++);
   103fc:	693b      	ldr	r3, [r7, #16]
   103fe:	1c5a      	adds	r2, r3, #1
   10400:	613a      	str	r2, [r7, #16]
   10402:	68fa      	ldr	r2, [r7, #12]
   10404:	1d11      	adds	r1, r2, #4
   10406:	60f9      	str	r1, [r7, #12]
   10408:	6812      	ldr	r2, [r2, #0]
   1040a:	7812      	ldrb	r2, [r2, #0]
   1040c:	701a      	strb	r2, [r3, #0]
    for(; i>0; i--) {
   1040e:	697b      	ldr	r3, [r7, #20]
   10410:	3b01      	subs	r3, #1
   10412:	617b      	str	r3, [r7, #20]
   10414:	e7ef      	b.n	103f6 <_ZN12CO_PDO_Class11CO_TPDOsendEP9CO_TPDO_t+0x1e>
    }

    TPDO->sendRequest = 0;
   10416:	683b      	ldr	r3, [r7, #0]
   10418:	2200      	movs	r2, #0
   1041a:	77da      	strb	r2, [r3, #31]

    return   ptrCODriverClass->CAN_Send( TPDO->CANtxBuff);
   1041c:	4b06      	ldr	r3, [pc, #24]	; (10438 <_ZN12CO_PDO_Class11CO_TPDOsendEP9CO_TPDO_t+0x60>)
   1041e:	681a      	ldr	r2, [r3, #0]
   10420:	683b      	ldr	r3, [r7, #0]
   10422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   10424:	4619      	mov	r1, r3
   10426:	4610      	mov	r0, r2
   10428:	4b04      	ldr	r3, [pc, #16]	; (1043c <_ZN12CO_PDO_Class11CO_TPDOsendEP9CO_TPDO_t+0x64>)
   1042a:	4798      	blx	r3
   1042c:	4603      	mov	r3, r0
}
   1042e:	4618      	mov	r0, r3
   10430:	3718      	adds	r7, #24
   10432:	46bd      	mov	sp, r7
   10434:	bd80      	pop	{r7, pc}
   10436:	bf00      	nop
   10438:	20001a7c 	.word	0x20001a7c
   1043c:	0000dc1d 	.word	0x0000dc1d

00010440 <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th>:

//#define RPDO_CALLS_EXTENSION
/******************************************************************************/
void CO_PDO_Class::CO_RPDO_process(CO_RPDO_t *RPDO, bool_t syncWas){
   10440:	b480      	push	{r7}
   10442:	b089      	sub	sp, #36	; 0x24
   10444:	af00      	add	r7, sp, #0
   10446:	60f8      	str	r0, [r7, #12]
   10448:	60b9      	str	r1, [r7, #8]
   1044a:	4613      	mov	r3, r2
   1044c:	71fb      	strb	r3, [r7, #7]

    if(!RPDO->valid || !(*RPDO->operatingState == CO_NMT_OPERATIONAL))
   1044e:	68bb      	ldr	r3, [r7, #8]
   10450:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   10454:	2b00      	cmp	r3, #0
   10456:	d004      	beq.n	10462 <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0x22>
   10458:	68bb      	ldr	r3, [r7, #8]
   1045a:	695b      	ldr	r3, [r3, #20]
   1045c:	781b      	ldrb	r3, [r3, #0]
   1045e:	2b05      	cmp	r3, #5
   10460:	d009      	beq.n	10476 <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0x36>
    {
        RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
   10462:	68bb      	ldr	r3, [r7, #8]
   10464:	2200      	movs	r2, #0
   10466:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   1046a:	68bb      	ldr	r3, [r7, #8]
   1046c:	2200      	movs	r2, #0
   1046e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
   10472:	bf00      	nop
                }
            }
#endif
        }
    }
}
   10474:	e046      	b.n	10504 <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0xc4>
    else if(!RPDO->synchronous || syncWas)
   10476:	68bb      	ldr	r3, [r7, #8]
   10478:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
   1047c:	2b00      	cmp	r3, #0
   1047e:	d002      	beq.n	10486 <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0x46>
   10480:	79fb      	ldrb	r3, [r7, #7]
   10482:	2b00      	cmp	r3, #0
   10484:	d03e      	beq.n	10504 <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0xc4>
        uint8_t bufNo = 0;
   10486:	2300      	movs	r3, #0
   10488:	77fb      	strb	r3, [r7, #31]
        if(RPDO->synchronous && !RPDO->SYNC->CANrxToggle) {
   1048a:	68bb      	ldr	r3, [r7, #8]
   1048c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
   10490:	2b00      	cmp	r3, #0
   10492:	d006      	beq.n	104a2 <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0x62>
   10494:	68bb      	ldr	r3, [r7, #8]
   10496:	689b      	ldr	r3, [r3, #8]
   10498:	7edb      	ldrb	r3, [r3, #27]
   1049a:	2b00      	cmp	r3, #0
   1049c:	d101      	bne.n	104a2 <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0x62>
            bufNo = 1;
   1049e:	2301      	movs	r3, #1
   104a0:	77fb      	strb	r3, [r7, #31]
        while(RPDO->CANrxNew[bufNo]){
   104a2:	7ffb      	ldrb	r3, [r7, #31]
   104a4:	68ba      	ldr	r2, [r7, #8]
   104a6:	4413      	add	r3, r2
   104a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
   104ac:	b2db      	uxtb	r3, r3
   104ae:	2b00      	cmp	r3, #0
   104b0:	bf14      	ite	ne
   104b2:	2301      	movne	r3, #1
   104b4:	2300      	moveq	r3, #0
   104b6:	b2db      	uxtb	r3, r3
   104b8:	2b00      	cmp	r3, #0
   104ba:	d023      	beq.n	10504 <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0xc4>
            i = RPDO->dataLength;
   104bc:	68bb      	ldr	r3, [r7, #8]
   104be:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   104c2:	61bb      	str	r3, [r7, #24]
            pPDOdataByte = &RPDO->CANrxData[bufNo][0];
   104c4:	7ffb      	ldrb	r3, [r7, #31]
   104c6:	3308      	adds	r3, #8
   104c8:	00db      	lsls	r3, r3, #3
   104ca:	68ba      	ldr	r2, [r7, #8]
   104cc:	4413      	add	r3, r2
   104ce:	3306      	adds	r3, #6
   104d0:	617b      	str	r3, [r7, #20]
            ppODdataByte = &RPDO->mapPointer[0];
   104d2:	68bb      	ldr	r3, [r7, #8]
   104d4:	3324      	adds	r3, #36	; 0x24
   104d6:	613b      	str	r3, [r7, #16]
            RPDO->CANrxNew[bufNo] = false;
   104d8:	7ffb      	ldrb	r3, [r7, #31]
   104da:	68ba      	ldr	r2, [r7, #8]
   104dc:	4413      	add	r3, r2
   104de:	2200      	movs	r2, #0
   104e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            for(; i>0; i--) {
   104e4:	69bb      	ldr	r3, [r7, #24]
   104e6:	2b00      	cmp	r3, #0
   104e8:	d0db      	beq.n	104a2 <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0x62>
                **(ppODdataByte++) = *(pPDOdataByte++);
   104ea:	693b      	ldr	r3, [r7, #16]
   104ec:	1d1a      	adds	r2, r3, #4
   104ee:	613a      	str	r2, [r7, #16]
   104f0:	681a      	ldr	r2, [r3, #0]
   104f2:	697b      	ldr	r3, [r7, #20]
   104f4:	1c59      	adds	r1, r3, #1
   104f6:	6179      	str	r1, [r7, #20]
   104f8:	781b      	ldrb	r3, [r3, #0]
   104fa:	7013      	strb	r3, [r2, #0]
            for(; i>0; i--) {
   104fc:	69bb      	ldr	r3, [r7, #24]
   104fe:	3b01      	subs	r3, #1
   10500:	61bb      	str	r3, [r7, #24]
   10502:	e7ef      	b.n	104e4 <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0xa4>
}
   10504:	bf00      	nop
   10506:	3724      	adds	r7, #36	; 0x24
   10508:	46bd      	mov	sp, r7
   1050a:	bc80      	pop	{r7}
   1050c:	4770      	bx	lr
	...

00010510 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm>:
void CO_PDO_Class::CO_TPDO_process(
        CO_TPDO_t              *TPDO,
        CO_SYNC_t              *SYNC,
        bool_t                  syncWas,
        uint32_t                timeDifference_us)
{
   10510:	b580      	push	{r7, lr}
   10512:	b084      	sub	sp, #16
   10514:	af00      	add	r7, sp, #0
   10516:	60f8      	str	r0, [r7, #12]
   10518:	60b9      	str	r1, [r7, #8]
   1051a:	607a      	str	r2, [r7, #4]
   1051c:	70fb      	strb	r3, [r7, #3]
    if(TPDO->valid && *TPDO->operatingState == CO_NMT_OPERATIONAL){
   1051e:	68bb      	ldr	r3, [r7, #8]
   10520:	7f5b      	ldrb	r3, [r3, #29]
   10522:	2b00      	cmp	r3, #0
   10524:	f000 809e 	beq.w	10664 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x154>
   10528:	68bb      	ldr	r3, [r7, #8]
   1052a:	691b      	ldr	r3, [r3, #16]
   1052c:	781b      	ldrb	r3, [r3, #0]
   1052e:	2b05      	cmp	r3, #5
   10530:	f040 8098 	bne.w	10664 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x154>

        /* Send PDO by application request or by Event timer */
        if(TPDO->TPDOCommPar->transmissionType >= 253){
   10534:	68bb      	ldr	r3, [r7, #8]
   10536:	689b      	ldr	r3, [r3, #8]
   10538:	7a1b      	ldrb	r3, [r3, #8]
   1053a:	2bfc      	cmp	r3, #252	; 0xfc
   1053c:	dd31      	ble.n	105a2 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x92>
            if(TPDO->inhibitTimer == 0 && (TPDO->sendRequest || (TPDO->TPDOCommPar->eventTimer && TPDO->eventTimer == 0))){
   1053e:	68bb      	ldr	r3, [r7, #8]
   10540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   10542:	2b00      	cmp	r3, #0
   10544:	f040 809b 	bne.w	1067e <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
   10548:	68bb      	ldr	r3, [r7, #8]
   1054a:	7fdb      	ldrb	r3, [r3, #31]
   1054c:	2b00      	cmp	r3, #0
   1054e:	d10a      	bne.n	10566 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x56>
   10550:	68bb      	ldr	r3, [r7, #8]
   10552:	689b      	ldr	r3, [r3, #8]
   10554:	695b      	ldr	r3, [r3, #20]
   10556:	2b00      	cmp	r3, #0
   10558:	f000 8091 	beq.w	1067e <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
   1055c:	68bb      	ldr	r3, [r7, #8]
   1055e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   10560:	2b00      	cmp	r3, #0
   10562:	f040 808c 	bne.w	1067e <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
                if(CO_TPDOsend(TPDO) == CO_ERROR_NO){
   10566:	68b9      	ldr	r1, [r7, #8]
   10568:	68f8      	ldr	r0, [r7, #12]
   1056a:	4b54      	ldr	r3, [pc, #336]	; (106bc <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x1ac>)
   1056c:	4798      	blx	r3
   1056e:	4603      	mov	r3, r0
   10570:	2b00      	cmp	r3, #0
   10572:	bf0c      	ite	eq
   10574:	2301      	moveq	r3, #1
   10576:	2300      	movne	r3, #0
   10578:	b2db      	uxtb	r3, r3
   1057a:	2b00      	cmp	r3, #0
   1057c:	d07f      	beq.n	1067e <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
                    /* successfully sent */
                    TPDO->inhibitTimer = ((uint32_t) TPDO->TPDOCommPar->inhibitTime) * 100;
   1057e:	68bb      	ldr	r3, [r7, #8]
   10580:	689b      	ldr	r3, [r3, #8]
   10582:	68db      	ldr	r3, [r3, #12]
   10584:	2264      	movs	r2, #100	; 0x64
   10586:	fb02 f203 	mul.w	r2, r2, r3
   1058a:	68bb      	ldr	r3, [r7, #8]
   1058c:	645a      	str	r2, [r3, #68]	; 0x44
                    TPDO->eventTimer = ((uint32_t) TPDO->TPDOCommPar->eventTimer) * 1000;
   1058e:	68bb      	ldr	r3, [r7, #8]
   10590:	689b      	ldr	r3, [r3, #8]
   10592:	695b      	ldr	r3, [r3, #20]
   10594:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10598:	fb02 f203 	mul.w	r2, r2, r3
   1059c:	68bb      	ldr	r3, [r7, #8]
   1059e:	649a      	str	r2, [r3, #72]	; 0x48
        if(TPDO->TPDOCommPar->transmissionType >= 253){
   105a0:	e06d      	b.n	1067e <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
                }
            }
        }

        /* Synchronous PDOs */
        else if(SYNC && syncWas){
   105a2:	687b      	ldr	r3, [r7, #4]
   105a4:	2b00      	cmp	r3, #0
   105a6:	d06a      	beq.n	1067e <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
   105a8:	78fb      	ldrb	r3, [r7, #3]
   105aa:	2b00      	cmp	r3, #0
   105ac:	d067      	beq.n	1067e <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
            /* send synchronous acyclic PDO */
            if(TPDO->TPDOCommPar->transmissionType == 0){
   105ae:	68bb      	ldr	r3, [r7, #8]
   105b0:	689b      	ldr	r3, [r3, #8]
   105b2:	7a1b      	ldrb	r3, [r3, #8]
   105b4:	2b00      	cmp	r3, #0
   105b6:	d108      	bne.n	105ca <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0xba>
                if(TPDO->sendRequest) CO_TPDOsend(TPDO);
   105b8:	68bb      	ldr	r3, [r7, #8]
   105ba:	7fdb      	ldrb	r3, [r3, #31]
   105bc:	2b00      	cmp	r3, #0
   105be:	d05e      	beq.n	1067e <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
   105c0:	68b9      	ldr	r1, [r7, #8]
   105c2:	68f8      	ldr	r0, [r7, #12]
   105c4:	4b3d      	ldr	r3, [pc, #244]	; (106bc <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x1ac>)
   105c6:	4798      	blx	r3
        if(TPDO->TPDOCommPar->transmissionType >= 253){
   105c8:	e059      	b.n	1067e <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
            }
            /* send synchronous cyclic PDO */
            else{
                /* is the start of synchronous TPDO transmission */
                if(TPDO->syncCounter == 255){
   105ca:	68bb      	ldr	r3, [r7, #8]
   105cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   105d0:	2bff      	cmp	r3, #255	; 0xff
   105d2:	d113      	bne.n	105fc <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0xec>
                    if(SYNC->counterOverflowValue && TPDO->TPDOCommPar->SYNCStartValue)
   105d4:	687b      	ldr	r3, [r7, #4]
   105d6:	7e1b      	ldrb	r3, [r3, #24]
   105d8:	2b00      	cmp	r3, #0
   105da:	d009      	beq.n	105f0 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0xe0>
   105dc:	68bb      	ldr	r3, [r7, #8]
   105de:	689b      	ldr	r3, [r3, #8]
   105e0:	7e1b      	ldrb	r3, [r3, #24]
   105e2:	2b00      	cmp	r3, #0
   105e4:	d004      	beq.n	105f0 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0xe0>
                        TPDO->syncCounter = 254;   /* SYNCStartValue is in use */
   105e6:	68bb      	ldr	r3, [r7, #8]
   105e8:	22fe      	movs	r2, #254	; 0xfe
   105ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
   105ee:	e005      	b.n	105fc <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0xec>
                    else
                        TPDO->syncCounter = TPDO->TPDOCommPar->transmissionType;
   105f0:	68bb      	ldr	r3, [r7, #8]
   105f2:	689b      	ldr	r3, [r3, #8]
   105f4:	7a1a      	ldrb	r2, [r3, #8]
   105f6:	68bb      	ldr	r3, [r7, #8]
   105f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                }
                /* if the SYNCStartValue is in use, start first TPDO after SYNC with matched SYNCStartValue. */
                if(TPDO->syncCounter == 254){
   105fc:	68bb      	ldr	r3, [r7, #8]
   105fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   10602:	2bfe      	cmp	r3, #254	; 0xfe
   10604:	d111      	bne.n	1062a <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x11a>
                    if(SYNC->counter == TPDO->TPDOCommPar->SYNCStartValue){
   10606:	687b      	ldr	r3, [r7, #4]
   10608:	7f1a      	ldrb	r2, [r3, #28]
   1060a:	68bb      	ldr	r3, [r7, #8]
   1060c:	689b      	ldr	r3, [r3, #8]
   1060e:	7e1b      	ldrb	r3, [r3, #24]
   10610:	429a      	cmp	r2, r3
   10612:	d134      	bne.n	1067e <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
                        TPDO->syncCounter = TPDO->TPDOCommPar->transmissionType;
   10614:	68bb      	ldr	r3, [r7, #8]
   10616:	689b      	ldr	r3, [r3, #8]
   10618:	7a1a      	ldrb	r2, [r3, #8]
   1061a:	68bb      	ldr	r3, [r7, #8]
   1061c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                        CO_TPDOsend(TPDO);
   10620:	68b9      	ldr	r1, [r7, #8]
   10622:	68f8      	ldr	r0, [r7, #12]
   10624:	4b25      	ldr	r3, [pc, #148]	; (106bc <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x1ac>)
   10626:	4798      	blx	r3
        if(TPDO->TPDOCommPar->transmissionType >= 253){
   10628:	e029      	b.n	1067e <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
                    }
                }
                /* Send PDO after every N-th Sync */
                else if(--TPDO->syncCounter == 0){
   1062a:	68bb      	ldr	r3, [r7, #8]
   1062c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   10630:	3b01      	subs	r3, #1
   10632:	b2da      	uxtb	r2, r3
   10634:	68bb      	ldr	r3, [r7, #8]
   10636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
   1063a:	68bb      	ldr	r3, [r7, #8]
   1063c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   10640:	2b00      	cmp	r3, #0
   10642:	bf0c      	ite	eq
   10644:	2301      	moveq	r3, #1
   10646:	2300      	movne	r3, #0
   10648:	b2db      	uxtb	r3, r3
   1064a:	2b00      	cmp	r3, #0
   1064c:	d017      	beq.n	1067e <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
                    TPDO->syncCounter = TPDO->TPDOCommPar->transmissionType;
   1064e:	68bb      	ldr	r3, [r7, #8]
   10650:	689b      	ldr	r3, [r3, #8]
   10652:	7a1a      	ldrb	r2, [r3, #8]
   10654:	68bb      	ldr	r3, [r7, #8]
   10656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                    CO_TPDOsend(TPDO);
   1065a:	68b9      	ldr	r1, [r7, #8]
   1065c:	68f8      	ldr	r0, [r7, #12]
   1065e:	4b17      	ldr	r3, [pc, #92]	; (106bc <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x1ac>)
   10660:	4798      	blx	r3
        if(TPDO->TPDOCommPar->transmissionType >= 253){
   10662:	e00c      	b.n	1067e <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
        }

    }
    else{
        /* Not operational or valid. Force TPDO first send after operational or valid. */
        if(TPDO->TPDOCommPar->transmissionType>=254) TPDO->sendRequest = 1;
   10664:	68bb      	ldr	r3, [r7, #8]
   10666:	689b      	ldr	r3, [r3, #8]
   10668:	7a1b      	ldrb	r3, [r3, #8]
   1066a:	2bfd      	cmp	r3, #253	; 0xfd
   1066c:	dd03      	ble.n	10676 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x166>
   1066e:	68bb      	ldr	r3, [r7, #8]
   10670:	2201      	movs	r2, #1
   10672:	77da      	strb	r2, [r3, #31]
   10674:	e004      	b.n	10680 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x170>
        else                                         TPDO->sendRequest = 0;
   10676:	68bb      	ldr	r3, [r7, #8]
   10678:	2200      	movs	r2, #0
   1067a:	77da      	strb	r2, [r3, #31]
   1067c:	e000      	b.n	10680 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x170>
        if(TPDO->TPDOCommPar->transmissionType >= 253){
   1067e:	bf00      	nop
    }

    /* update timers */
    TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us) ? (TPDO->inhibitTimer - timeDifference_us) : 0;
   10680:	68bb      	ldr	r3, [r7, #8]
   10682:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   10684:	69bb      	ldr	r3, [r7, #24]
   10686:	429a      	cmp	r2, r3
   10688:	d904      	bls.n	10694 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x184>
   1068a:	68bb      	ldr	r3, [r7, #8]
   1068c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1068e:	69bb      	ldr	r3, [r7, #24]
   10690:	1ad3      	subs	r3, r2, r3
   10692:	e000      	b.n	10696 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x186>
   10694:	2300      	movs	r3, #0
   10696:	68ba      	ldr	r2, [r7, #8]
   10698:	6453      	str	r3, [r2, #68]	; 0x44
    TPDO->eventTimer = (TPDO->eventTimer > timeDifference_us) ? (TPDO->eventTimer - timeDifference_us) : 0;
   1069a:	68bb      	ldr	r3, [r7, #8]
   1069c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1069e:	69bb      	ldr	r3, [r7, #24]
   106a0:	429a      	cmp	r2, r3
   106a2:	d904      	bls.n	106ae <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x19e>
   106a4:	68bb      	ldr	r3, [r7, #8]
   106a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   106a8:	69bb      	ldr	r3, [r7, #24]
   106aa:	1ad3      	subs	r3, r2, r3
   106ac:	e000      	b.n	106b0 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x1a0>
   106ae:	2300      	movs	r3, #0
   106b0:	68ba      	ldr	r2, [r7, #8]
   106b2:	6493      	str	r3, [r2, #72]	; 0x48
   106b4:	bf00      	nop
   106b6:	3710      	adds	r7, #16
   106b8:	46bd      	mov	sp, r7
   106ba:	bd80      	pop	{r7, pc}
   106bc:	000103d9 	.word	0x000103d9

000106c0 <_ZN12CO_SDO_ClassC1Ev>:
#include "CO_Driver_Class.h"

CO_SDO_Class	*ptrCOSDOClass;

// default constructor
CO_SDO_Class::CO_SDO_Class()
   106c0:	b580      	push	{r7, lr}
   106c2:	b082      	sub	sp, #8
   106c4:	af00      	add	r7, sp, #0
   106c6:	6078      	str	r0, [r7, #4]
   106c8:	6878      	ldr	r0, [r7, #4]
   106ca:	4b05      	ldr	r3, [pc, #20]	; (106e0 <_ZN12CO_SDO_ClassC1Ev+0x20>)
   106cc:	4798      	blx	r3
{
	ptrCOSDOClass=this;
   106ce:	4a05      	ldr	r2, [pc, #20]	; (106e4 <_ZN12CO_SDO_ClassC1Ev+0x24>)
   106d0:	687b      	ldr	r3, [r7, #4]
   106d2:	6013      	str	r3, [r2, #0]
} //CO_SDO_Class
   106d4:	687b      	ldr	r3, [r7, #4]
   106d6:	4618      	mov	r0, r3
   106d8:	3708      	adds	r7, #8
   106da:	46bd      	mov	sp, r7
   106dc:	bd80      	pop	{r7, pc}
   106de:	bf00      	nop
   106e0:	00012cdd 	.word	0x00012cdd
   106e4:	20001a8c 	.word	0x20001a8c

000106e8 <_ZN12CO_SDO_ClassD1Ev>:

// default destructor
CO_SDO_Class::~CO_SDO_Class()
   106e8:	b580      	push	{r7, lr}
   106ea:	b082      	sub	sp, #8
   106ec:	af00      	add	r7, sp, #0
   106ee:	6078      	str	r0, [r7, #4]
   106f0:	6878      	ldr	r0, [r7, #4]
   106f2:	4b03      	ldr	r3, [pc, #12]	; (10700 <_ZN12CO_SDO_ClassD1Ev+0x18>)
   106f4:	4798      	blx	r3
{
} //~CO_SDO_Class
   106f6:	687b      	ldr	r3, [r7, #4]
   106f8:	4618      	mov	r0, r3
   106fa:	3708      	adds	r7, #8
   106fc:	46bd      	mov	sp, r7
   106fe:	bd80      	pop	{r7, pc}
   10700:	00012cf1 	.word	0x00012cf1

00010704 <_ZN12CO_SDO_Class9CO_memcpyEPhPKhm>:

void CO_SDO_Class::CO_memcpy(uint8_t dest[], const uint8_t src[], const uint32_t size){
   10704:	b480      	push	{r7}
   10706:	b087      	sub	sp, #28
   10708:	af00      	add	r7, sp, #0
   1070a:	60f8      	str	r0, [r7, #12]
   1070c:	60b9      	str	r1, [r7, #8]
   1070e:	607a      	str	r2, [r7, #4]
   10710:	603b      	str	r3, [r7, #0]
    uint32_t i;
    for(i = 0; i < size; i++){
   10712:	2300      	movs	r3, #0
   10714:	617b      	str	r3, [r7, #20]
   10716:	697a      	ldr	r2, [r7, #20]
   10718:	683b      	ldr	r3, [r7, #0]
   1071a:	429a      	cmp	r2, r3
   1071c:	d20b      	bcs.n	10736 <_ZN12CO_SDO_Class9CO_memcpyEPhPKhm+0x32>
        dest[i] = src[i];
   1071e:	68ba      	ldr	r2, [r7, #8]
   10720:	697b      	ldr	r3, [r7, #20]
   10722:	4413      	add	r3, r2
   10724:	6879      	ldr	r1, [r7, #4]
   10726:	697a      	ldr	r2, [r7, #20]
   10728:	440a      	add	r2, r1
   1072a:	7812      	ldrb	r2, [r2, #0]
   1072c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < size; i++){
   1072e:	697b      	ldr	r3, [r7, #20]
   10730:	3301      	adds	r3, #1
   10732:	617b      	str	r3, [r7, #20]
   10734:	e7ef      	b.n	10716 <_ZN12CO_SDO_Class9CO_memcpyEPhPKhm+0x12>
    }
}
   10736:	bf00      	nop
   10738:	371c      	adds	r7, #28
   1073a:	46bd      	mov	sp, r7
   1073c:	bc80      	pop	{r7}
   1073e:	4770      	bx	lr

00010740 <_ZN12CO_SDO_Class12CO_getUint32EPKh>:
    b.u8[0] = data[0];
    b.u8[1] = data[1];
    return b.u16[0];
}

uint32_t CO_SDO_Class::CO_getUint32(const uint8_t data[]){
   10740:	b480      	push	{r7}
   10742:	b087      	sub	sp, #28
   10744:	af00      	add	r7, sp, #0
   10746:	6078      	str	r0, [r7, #4]
   10748:	6039      	str	r1, [r7, #0]
    CO_bytes_t b;
    b.u8[0] = data[0];
   1074a:	683b      	ldr	r3, [r7, #0]
   1074c:	781b      	ldrb	r3, [r3, #0]
   1074e:	723b      	strb	r3, [r7, #8]
    b.u8[1] = data[1];
   10750:	683b      	ldr	r3, [r7, #0]
   10752:	3301      	adds	r3, #1
   10754:	781b      	ldrb	r3, [r3, #0]
   10756:	727b      	strb	r3, [r7, #9]
    b.u8[2] = data[2];
   10758:	683b      	ldr	r3, [r7, #0]
   1075a:	3302      	adds	r3, #2
   1075c:	781b      	ldrb	r3, [r3, #0]
   1075e:	72bb      	strb	r3, [r7, #10]
    b.u8[3] = data[3];
   10760:	683b      	ldr	r3, [r7, #0]
   10762:	3303      	adds	r3, #3
   10764:	781b      	ldrb	r3, [r3, #0]
   10766:	72fb      	strb	r3, [r7, #11]
    return b.u32[0];
   10768:	68bb      	ldr	r3, [r7, #8]
}
   1076a:	4618      	mov	r0, r3
   1076c:	371c      	adds	r7, #28
   1076e:	46bd      	mov	sp, r7
   10770:	bc80      	pop	{r7}
   10772:	4770      	bx	lr

00010774 <_ZN12CO_SDO_Class12CO_setUint32EPhm>:
    b.u16[0] = value;
    data[0] = b.u8[0];
    data[1] = b.u8[1];
}

void CO_SDO_Class::CO_setUint32(uint8_t data[], const uint32_t value){
   10774:	b480      	push	{r7}
   10776:	b089      	sub	sp, #36	; 0x24
   10778:	af00      	add	r7, sp, #0
   1077a:	60f8      	str	r0, [r7, #12]
   1077c:	60b9      	str	r1, [r7, #8]
   1077e:	607a      	str	r2, [r7, #4]
    CO_bytes_t b;
    b.u32[0] = value;
   10780:	687b      	ldr	r3, [r7, #4]
   10782:	613b      	str	r3, [r7, #16]
    data[0] = b.u8[0];
   10784:	7c3a      	ldrb	r2, [r7, #16]
   10786:	68bb      	ldr	r3, [r7, #8]
   10788:	701a      	strb	r2, [r3, #0]
    data[1] = b.u8[1];
   1078a:	68bb      	ldr	r3, [r7, #8]
   1078c:	3301      	adds	r3, #1
   1078e:	7c7a      	ldrb	r2, [r7, #17]
   10790:	701a      	strb	r2, [r3, #0]
    data[2] = b.u8[2];
   10792:	68bb      	ldr	r3, [r7, #8]
   10794:	3302      	adds	r3, #2
   10796:	7cba      	ldrb	r2, [r7, #18]
   10798:	701a      	strb	r2, [r3, #0]
    data[3] = b.u8[3];
   1079a:	68bb      	ldr	r3, [r7, #8]
   1079c:	3303      	adds	r3, #3
   1079e:	7cfa      	ldrb	r2, [r7, #19]
   107a0:	701a      	strb	r2, [r3, #0]
}
   107a2:	bf00      	nop
   107a4:	3724      	adds	r7, #36	; 0x24
   107a6:	46bd      	mov	sp, r7
   107a8:	bc80      	pop	{r7}
   107aa:	4770      	bx	lr

000107ac <_ZN12CO_SDO_Class14CO_memcpySwap2EPvPKv>:

#ifdef CO_LITTLE_ENDIAN
void CO_SDO_Class::CO_memcpySwap2(void* dest, const void* src){
   107ac:	b480      	push	{r7}
   107ae:	b087      	sub	sp, #28
   107b0:	af00      	add	r7, sp, #0
   107b2:	60f8      	str	r0, [r7, #12]
   107b4:	60b9      	str	r1, [r7, #8]
   107b6:	607a      	str	r2, [r7, #4]
    char *cdest;
    char *csrc;
    cdest = (char *) dest;
   107b8:	68bb      	ldr	r3, [r7, #8]
   107ba:	617b      	str	r3, [r7, #20]
    csrc = (char *) src;
   107bc:	687b      	ldr	r3, [r7, #4]
   107be:	613b      	str	r3, [r7, #16]
    cdest[0] = csrc[0];
   107c0:	693b      	ldr	r3, [r7, #16]
   107c2:	781a      	ldrb	r2, [r3, #0]
   107c4:	697b      	ldr	r3, [r7, #20]
   107c6:	701a      	strb	r2, [r3, #0]
    cdest[1] = csrc[1];
   107c8:	697b      	ldr	r3, [r7, #20]
   107ca:	3301      	adds	r3, #1
   107cc:	693a      	ldr	r2, [r7, #16]
   107ce:	7852      	ldrb	r2, [r2, #1]
   107d0:	701a      	strb	r2, [r3, #0]
}
   107d2:	bf00      	nop
   107d4:	371c      	adds	r7, #28
   107d6:	46bd      	mov	sp, r7
   107d8:	bc80      	pop	{r7}
   107da:	4770      	bx	lr

000107dc <_ZN12CO_SDO_Class14CO_memcpySwap4EPvPKv>:
void CO_SDO_Class::CO_memcpySwap4(void* dest, const void* src){
   107dc:	b480      	push	{r7}
   107de:	b087      	sub	sp, #28
   107e0:	af00      	add	r7, sp, #0
   107e2:	60f8      	str	r0, [r7, #12]
   107e4:	60b9      	str	r1, [r7, #8]
   107e6:	607a      	str	r2, [r7, #4]
    char *cdest;
    char *csrc;
    cdest = (char *) dest;
   107e8:	68bb      	ldr	r3, [r7, #8]
   107ea:	617b      	str	r3, [r7, #20]
    csrc = (char *) src;
   107ec:	687b      	ldr	r3, [r7, #4]
   107ee:	613b      	str	r3, [r7, #16]
    cdest[0] = csrc[0];
   107f0:	693b      	ldr	r3, [r7, #16]
   107f2:	781a      	ldrb	r2, [r3, #0]
   107f4:	697b      	ldr	r3, [r7, #20]
   107f6:	701a      	strb	r2, [r3, #0]
    cdest[1] = csrc[1];
   107f8:	697b      	ldr	r3, [r7, #20]
   107fa:	3301      	adds	r3, #1
   107fc:	693a      	ldr	r2, [r7, #16]
   107fe:	7852      	ldrb	r2, [r2, #1]
   10800:	701a      	strb	r2, [r3, #0]
    cdest[2] = csrc[2];
   10802:	697b      	ldr	r3, [r7, #20]
   10804:	3302      	adds	r3, #2
   10806:	693a      	ldr	r2, [r7, #16]
   10808:	7892      	ldrb	r2, [r2, #2]
   1080a:	701a      	strb	r2, [r3, #0]
    cdest[3] = csrc[3];
   1080c:	697b      	ldr	r3, [r7, #20]
   1080e:	3303      	adds	r3, #3
   10810:	693a      	ldr	r2, [r7, #16]
   10812:	78d2      	ldrb	r2, [r2, #3]
   10814:	701a      	strb	r2, [r3, #0]
}
   10816:	bf00      	nop
   10818:	371c      	adds	r7, #28
   1081a:	46bd      	mov	sp, r7
   1081c:	bc80      	pop	{r7}
   1081e:	4770      	bx	lr

00010820 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t>:
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */

static void CO_SDO_receive(void *object, const CO_CANrxMsg_t *msg){
   10820:	b580      	push	{r7, lr}
   10822:	b086      	sub	sp, #24
   10824:	af00      	add	r7, sp, #0
   10826:	6078      	str	r0, [r7, #4]
   10828:	6039      	str	r1, [r7, #0]
    CO_SDO_t *SDO;
	
    SDO = (CO_SDO_t*)object;   /* this is the correct pointer type of the first argument */
   1082a:	687b      	ldr	r3, [r7, #4]
   1082c:	613b      	str	r3, [r7, #16]
     * starting another SDO request, this request is dropped. Especially if
     * processing function has slow response.
     * See: https://github.com/CANopenNode/CANopenNode/issues/39 */

    /* verify message length and message overflow (previous message was not processed yet) */
    if((msg->DLC == 8U) && (!SDO->CANrxNew)){
   1082e:	683b      	ldr	r3, [r7, #0]
   10830:	7d1b      	ldrb	r3, [r3, #20]
   10832:	2b08      	cmp	r3, #8
   10834:	f040 80a4 	bne.w	10980 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x160>
   10838:	693b      	ldr	r3, [r7, #16]
   1083a:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
   1083e:	2b00      	cmp	r3, #0
   10840:	f040 809e 	bne.w	10980 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x160>
        if(SDO->state != CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK) {
   10844:	693b      	ldr	r3, [r7, #16]
   10846:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   1084a:	2b15      	cmp	r3, #21
   1084c:	d024      	beq.n	10898 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x78>
            /* copy data and set 'new message' flag */
            SDO->CANrxData[0] = msg->data[0];
   1084e:	683b      	ldr	r3, [r7, #0]
   10850:	7d5a      	ldrb	r2, [r3, #21]
   10852:	693b      	ldr	r3, [r7, #16]
   10854:	701a      	strb	r2, [r3, #0]
            SDO->CANrxData[1] = msg->data[1];
   10856:	683b      	ldr	r3, [r7, #0]
   10858:	7d9a      	ldrb	r2, [r3, #22]
   1085a:	693b      	ldr	r3, [r7, #16]
   1085c:	705a      	strb	r2, [r3, #1]
            SDO->CANrxData[2] = msg->data[2];
   1085e:	683b      	ldr	r3, [r7, #0]
   10860:	7dda      	ldrb	r2, [r3, #23]
   10862:	693b      	ldr	r3, [r7, #16]
   10864:	709a      	strb	r2, [r3, #2]
            SDO->CANrxData[3] = msg->data[3];
   10866:	683b      	ldr	r3, [r7, #0]
   10868:	7e1a      	ldrb	r2, [r3, #24]
   1086a:	693b      	ldr	r3, [r7, #16]
   1086c:	70da      	strb	r2, [r3, #3]
            SDO->CANrxData[4] = msg->data[4];
   1086e:	683b      	ldr	r3, [r7, #0]
   10870:	7e5a      	ldrb	r2, [r3, #25]
   10872:	693b      	ldr	r3, [r7, #16]
   10874:	711a      	strb	r2, [r3, #4]
            SDO->CANrxData[5] = msg->data[5];
   10876:	683b      	ldr	r3, [r7, #0]
   10878:	7e9a      	ldrb	r2, [r3, #26]
   1087a:	693b      	ldr	r3, [r7, #16]
   1087c:	715a      	strb	r2, [r3, #5]
            SDO->CANrxData[6] = msg->data[6];
   1087e:	683b      	ldr	r3, [r7, #0]
   10880:	7eda      	ldrb	r2, [r3, #27]
   10882:	693b      	ldr	r3, [r7, #16]
   10884:	719a      	strb	r2, [r3, #6]
            SDO->CANrxData[7] = msg->data[7];
   10886:	683b      	ldr	r3, [r7, #0]
   10888:	7f1a      	ldrb	r2, [r3, #28]
   1088a:	693b      	ldr	r3, [r7, #16]
   1088c:	71da      	strb	r2, [r3, #7]

            SDO->CANrxNew = true;
   1088e:	693b      	ldr	r3, [r7, #16]
   10890:	2201      	movs	r2, #1
   10892:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
   10896:	e067      	b.n	10968 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
        }
        else {
            /* block download, copy data directly */
            uint8_t seqno;

            SDO->CANrxData[0] = msg->data[0];
   10898:	683b      	ldr	r3, [r7, #0]
   1089a:	7d5a      	ldrb	r2, [r3, #21]
   1089c:	693b      	ldr	r3, [r7, #16]
   1089e:	701a      	strb	r2, [r3, #0]
            seqno = SDO->CANrxData[0] & 0x7fU;
   108a0:	693b      	ldr	r3, [r7, #16]
   108a2:	781b      	ldrb	r3, [r3, #0]
   108a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   108a8:	73fb      	strb	r3, [r7, #15]
            SDO->timeoutTimer = 0;
   108aa:	693b      	ldr	r3, [r7, #16]
   108ac:	2200      	movs	r2, #0
   108ae:	66da      	str	r2, [r3, #108]	; 0x6c

            /* check correct sequence number. */
            if(seqno == (SDO->sequence + 1U)) {
   108b0:	7bfa      	ldrb	r2, [r7, #15]
   108b2:	693b      	ldr	r3, [r7, #16]
   108b4:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   108b8:	3301      	adds	r3, #1
   108ba:	429a      	cmp	r2, r3
   108bc:	d141      	bne.n	10942 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x122>
                /* sequence is correct */
                uint8_t i;

                SDO->sequence++;
   108be:	693b      	ldr	r3, [r7, #16]
   108c0:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   108c4:	3301      	adds	r3, #1
   108c6:	b2da      	uxtb	r2, r3
   108c8:	693b      	ldr	r3, [r7, #16]
   108ca:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

                /* copy data */
                for(i=1; i<8; i++) {
   108ce:	2301      	movs	r3, #1
   108d0:	75fb      	strb	r3, [r7, #23]
   108d2:	7dfb      	ldrb	r3, [r7, #23]
   108d4:	2b07      	cmp	r3, #7
   108d6:	dc1d      	bgt.n	10914 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0xf4>
                    SDO->ODF_arg.data[SDO->bufferOffset++] = msg->data[i]; //SDO->ODF_arg.data is equal as SDO->databuffer
   108d8:	693b      	ldr	r3, [r7, #16]
   108da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   108dc:	693b      	ldr	r3, [r7, #16]
   108de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   108e0:	1c58      	adds	r0, r3, #1
   108e2:	6939      	ldr	r1, [r7, #16]
   108e4:	6388      	str	r0, [r1, #56]	; 0x38
   108e6:	4413      	add	r3, r2
   108e8:	7dfa      	ldrb	r2, [r7, #23]
   108ea:	6839      	ldr	r1, [r7, #0]
   108ec:	440a      	add	r2, r1
   108ee:	7d52      	ldrb	r2, [r2, #21]
   108f0:	701a      	strb	r2, [r3, #0]
                    if(SDO->bufferOffset >= CO_SDO_BUFFER_SIZE) {
   108f2:	693b      	ldr	r3, [r7, #16]
   108f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   108f6:	2b1f      	cmp	r3, #31
   108f8:	d908      	bls.n	1090c <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0xec>
                        /* buffer full, break reception */
                        SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
   108fa:	693b      	ldr	r3, [r7, #16]
   108fc:	2216      	movs	r2, #22
   108fe:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                        SDO->CANrxNew = true;
   10902:	693b      	ldr	r3, [r7, #16]
   10904:	2201      	movs	r2, #1
   10906:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
                        break;
   1090a:	e003      	b.n	10914 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0xf4>
                for(i=1; i<8; i++) {
   1090c:	7dfb      	ldrb	r3, [r7, #23]
   1090e:	3301      	adds	r3, #1
   10910:	75fb      	strb	r3, [r7, #23]
   10912:	e7de      	b.n	108d2 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0xb2>
                    }
                }

                /* break reception if last segment or block sequence is too large */
                if(((SDO->CANrxData[0] & 0x80U) == 0x80U) || (SDO->sequence >= SDO->blksize)) {
   10914:	693b      	ldr	r3, [r7, #16]
   10916:	781b      	ldrb	r3, [r3, #0]
   10918:	b25b      	sxtb	r3, r3
   1091a:	2b00      	cmp	r3, #0
   1091c:	db08      	blt.n	10930 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x110>
   1091e:	693b      	ldr	r3, [r7, #16]
   10920:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   10924:	461a      	mov	r2, r3
   10926:	693b      	ldr	r3, [r7, #16]
   10928:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
   1092c:	429a      	cmp	r2, r3
   1092e:	db1b      	blt.n	10968 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
                    SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
   10930:	693b      	ldr	r3, [r7, #16]
   10932:	2216      	movs	r2, #22
   10934:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                    SDO->CANrxNew = true;
   10938:	693b      	ldr	r3, [r7, #16]
   1093a:	2201      	movs	r2, #1
   1093c:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
   10940:	e012      	b.n	10968 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
                }
            }
            else if((seqno == SDO->sequence) || (SDO->sequence == 0U)){
   10942:	693b      	ldr	r3, [r7, #16]
   10944:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   10948:	7bfa      	ldrb	r2, [r7, #15]
   1094a:	429a      	cmp	r2, r3
   1094c:	d00c      	beq.n	10968 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
   1094e:	693b      	ldr	r3, [r7, #16]
   10950:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   10954:	2b00      	cmp	r3, #0
   10956:	d007      	beq.n	10968 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
                /* Ignore message, if it is duplicate or if sequence didn't started yet. */
            }
            else {
                /* seqno is totally wrong, break reception. */
                SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
   10958:	693b      	ldr	r3, [r7, #16]
   1095a:	2216      	movs	r2, #22
   1095c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                SDO->CANrxNew = true;
   10960:	693b      	ldr	r3, [r7, #16]
   10962:	2201      	movs	r2, #1
   10964:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
            }
        }

        /* Optional signal to RTOS, which can resume task, which handles SDO server. */
        if(SDO->CANrxNew && SDO->ptrFunctSignal != NULL) {
   10968:	693b      	ldr	r3, [r7, #16]
   1096a:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
   1096e:	2b00      	cmp	r3, #0
   10970:	d006      	beq.n	10980 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x160>
   10972:	693b      	ldr	r3, [r7, #16]
   10974:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   10976:	2b00      	cmp	r3, #0
   10978:	d002      	beq.n	10980 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x160>
            SDO->ptrFunctSignal();
   1097a:	693b      	ldr	r3, [r7, #16]
   1097c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   1097e:	4798      	blx	r3
        }
    }
}
   10980:	bf00      	nop
   10982:	3718      	adds	r7, #24
   10984:	46bd      	mov	sp, r7
   10986:	bd80      	pop	{r7, pc}

00010988 <_ZL11CO_ODF_1200P12CO_ODF_arg_t>:
 * Function for accessing _SDO server parameter_ for default SDO (index 0x1200)
 * from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
 static CO_SDO_abortCode_t  CO_ODF_1200(CO_ODF_arg_t *ODF_arg){
   10988:	b580      	push	{r7, lr}
   1098a:	b086      	sub	sp, #24
   1098c:	af00      	add	r7, sp, #0
   1098e:	6078      	str	r0, [r7, #4]
    uint8_t *nodeId;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
   10990:	2300      	movs	r3, #0
   10992:	617b      	str	r3, [r7, #20]

    nodeId = (uint8_t*) ODF_arg->object;
   10994:	687b      	ldr	r3, [r7, #4]
   10996:	681b      	ldr	r3, [r3, #0]
   10998:	613b      	str	r3, [r7, #16]
    value = ptrCODriverClass->CO_getUint32(ODF_arg->data);
   1099a:	4b12      	ldr	r3, [pc, #72]	; (109e4 <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x5c>)
   1099c:	681b      	ldr	r3, [r3, #0]
   1099e:	1d1a      	adds	r2, r3, #4
   109a0:	687b      	ldr	r3, [r7, #4]
   109a2:	685b      	ldr	r3, [r3, #4]
   109a4:	4619      	mov	r1, r3
   109a6:	4610      	mov	r0, r2
   109a8:	4b0f      	ldr	r3, [pc, #60]	; (109e8 <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x60>)
   109aa:	4798      	blx	r3
   109ac:	60f8      	str	r0, [r7, #12]

    /* if SDO reading Object dictionary 0x1200, add nodeId to the value */
    if((ODF_arg->reading) && (ODF_arg->subIndex > 0U)){
   109ae:	687b      	ldr	r3, [r7, #4]
   109b0:	7f5b      	ldrb	r3, [r3, #29]
   109b2:	2b00      	cmp	r3, #0
   109b4:	d010      	beq.n	109d8 <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x50>
   109b6:	687b      	ldr	r3, [r7, #4]
   109b8:	7f1b      	ldrb	r3, [r3, #28]
   109ba:	2b00      	cmp	r3, #0
   109bc:	d00c      	beq.n	109d8 <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x50>
        ptrCODriverClass->CO_setUint32(ODF_arg->data, value + *nodeId);
   109be:	4b09      	ldr	r3, [pc, #36]	; (109e4 <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x5c>)
   109c0:	681b      	ldr	r3, [r3, #0]
   109c2:	1d18      	adds	r0, r3, #4
   109c4:	687b      	ldr	r3, [r7, #4]
   109c6:	6859      	ldr	r1, [r3, #4]
   109c8:	693b      	ldr	r3, [r7, #16]
   109ca:	781b      	ldrb	r3, [r3, #0]
   109cc:	461a      	mov	r2, r3
   109ce:	68fb      	ldr	r3, [r7, #12]
   109d0:	4413      	add	r3, r2
   109d2:	461a      	mov	r2, r3
   109d4:	4b05      	ldr	r3, [pc, #20]	; (109ec <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x64>)
   109d6:	4798      	blx	r3
    }

    return ret;
   109d8:	697b      	ldr	r3, [r7, #20]
}
   109da:	4618      	mov	r0, r3
   109dc:	3718      	adds	r7, #24
   109de:	46bd      	mov	sp, r7
   109e0:	bd80      	pop	{r7, pc}
   109e2:	bf00      	nop
   109e4:	20001a7c 	.word	0x20001a7c
   109e8:	00010741 	.word	0x00010741
   109ec:	00010775 	.word	0x00010775

000109f0 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m>:
        uint8_t                 nodeId,
        CO_CANmodule_t         *CANdevRx,
        uint32_t                CANdevRxIdx,
        CO_CANmodule_t         *CANdevTx,
        uint32_t                CANdevTxIdx)
{
   109f0:	b5b0      	push	{r4, r5, r7, lr}
   109f2:	b08a      	sub	sp, #40	; 0x28
   109f4:	af04      	add	r7, sp, #16
   109f6:	60f8      	str	r0, [r7, #12]
   109f8:	60b9      	str	r1, [r7, #8]
   109fa:	607a      	str	r2, [r7, #4]
   109fc:	603b      	str	r3, [r7, #0]
    /* verify arguments */
    if(SDO_init==NULL || CANdevRx==NULL || CANdevTx==NULL){
   109fe:	68bb      	ldr	r3, [r7, #8]
   10a00:	2b00      	cmp	r3, #0
   10a02:	d005      	beq.n	10a10 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x20>
   10a04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10a06:	2b00      	cmp	r3, #0
   10a08:	d002      	beq.n	10a10 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x20>
   10a0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10a0c:	2b00      	cmp	r3, #0
   10a0e:	d102      	bne.n	10a16 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x26>
        return CO_ERROR_ILLEGAL_ARGUMENT;
   10a10:	f04f 33ff 	mov.w	r3, #4294967295
   10a14:	e0ac      	b.n	10b70 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x180>
    }else{
		SDO=SDO_init;
   10a16:	68fb      	ldr	r3, [r7, #12]
   10a18:	68ba      	ldr	r2, [r7, #8]
   10a1a:	601a      	str	r2, [r3, #0]
	}
	
    /* configure own object dictionary */
    if(parentSDO == NULL){
   10a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10a1e:	2b00      	cmp	r3, #0
   10a20:	d13b      	bne.n	10a9a <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0xaa>
        uint32_t i;

        SDO->ownOD = true;
   10a22:	68fb      	ldr	r3, [r7, #12]
   10a24:	681b      	ldr	r3, [r3, #0]
   10a26:	2201      	movs	r2, #1
   10a28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        SDO->OD = OD;
   10a2c:	68fb      	ldr	r3, [r7, #12]
   10a2e:	681b      	ldr	r3, [r3, #0]
   10a30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   10a32:	62da      	str	r2, [r3, #44]	; 0x2c
        SDO->ODSize = ODSize;
   10a34:	68fb      	ldr	r3, [r7, #12]
   10a36:	681b      	ldr	r3, [r3, #0]
   10a38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   10a3a:	631a      	str	r2, [r3, #48]	; 0x30
        SDO->ODExtensions = ODExtensions;
   10a3c:	68fb      	ldr	r3, [r7, #12]
   10a3e:	681b      	ldr	r3, [r3, #0]
   10a40:	6bba      	ldr	r2, [r7, #56]	; 0x38
   10a42:	635a      	str	r2, [r3, #52]	; 0x34

        /* clear pointers in ODExtensions */
        for(i=0U; i<ODSize; i++){
   10a44:	2300      	movs	r3, #0
   10a46:	617b      	str	r3, [r7, #20]
   10a48:	697a      	ldr	r2, [r7, #20]
   10a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10a4c:	429a      	cmp	r2, r3
   10a4e:	d238      	bcs.n	10ac2 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0xd2>
            SDO->ODExtensions[i].pODFunc = NULL;
   10a50:	68fb      	ldr	r3, [r7, #12]
   10a52:	681b      	ldr	r3, [r3, #0]
   10a54:	6b59      	ldr	r1, [r3, #52]	; 0x34
   10a56:	697a      	ldr	r2, [r7, #20]
   10a58:	4613      	mov	r3, r2
   10a5a:	005b      	lsls	r3, r3, #1
   10a5c:	4413      	add	r3, r2
   10a5e:	009b      	lsls	r3, r3, #2
   10a60:	440b      	add	r3, r1
   10a62:	2200      	movs	r2, #0
   10a64:	601a      	str	r2, [r3, #0]
            SDO->ODExtensions[i].object = NULL;
   10a66:	68fb      	ldr	r3, [r7, #12]
   10a68:	681b      	ldr	r3, [r3, #0]
   10a6a:	6b59      	ldr	r1, [r3, #52]	; 0x34
   10a6c:	697a      	ldr	r2, [r7, #20]
   10a6e:	4613      	mov	r3, r2
   10a70:	005b      	lsls	r3, r3, #1
   10a72:	4413      	add	r3, r2
   10a74:	009b      	lsls	r3, r3, #2
   10a76:	440b      	add	r3, r1
   10a78:	2200      	movs	r2, #0
   10a7a:	605a      	str	r2, [r3, #4]
            SDO->ODExtensions[i].flags = NULL;
   10a7c:	68fb      	ldr	r3, [r7, #12]
   10a7e:	681b      	ldr	r3, [r3, #0]
   10a80:	6b59      	ldr	r1, [r3, #52]	; 0x34
   10a82:	697a      	ldr	r2, [r7, #20]
   10a84:	4613      	mov	r3, r2
   10a86:	005b      	lsls	r3, r3, #1
   10a88:	4413      	add	r3, r2
   10a8a:	009b      	lsls	r3, r3, #2
   10a8c:	440b      	add	r3, r1
   10a8e:	2200      	movs	r2, #0
   10a90:	609a      	str	r2, [r3, #8]
        for(i=0U; i<ODSize; i++){
   10a92:	697b      	ldr	r3, [r7, #20]
   10a94:	3301      	adds	r3, #1
   10a96:	617b      	str	r3, [r7, #20]
   10a98:	e7d6      	b.n	10a48 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x58>
        }
    }
    /* copy object dictionary from parent */
    else{
        SDO->ownOD = false;
   10a9a:	68fb      	ldr	r3, [r7, #12]
   10a9c:	681b      	ldr	r3, [r3, #0]
   10a9e:	2200      	movs	r2, #0
   10aa0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        SDO->OD = parentSDO->OD;
   10aa4:	68fb      	ldr	r3, [r7, #12]
   10aa6:	681b      	ldr	r3, [r3, #0]
   10aa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   10aaa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   10aac:	62da      	str	r2, [r3, #44]	; 0x2c
        SDO->ODSize = parentSDO->ODSize;
   10aae:	68fb      	ldr	r3, [r7, #12]
   10ab0:	681b      	ldr	r3, [r3, #0]
   10ab2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   10ab4:	6b12      	ldr	r2, [r2, #48]	; 0x30
   10ab6:	631a      	str	r2, [r3, #48]	; 0x30
        SDO->ODExtensions = parentSDO->ODExtensions;
   10ab8:	68fb      	ldr	r3, [r7, #12]
   10aba:	681b      	ldr	r3, [r3, #0]
   10abc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   10abe:	6b52      	ldr	r2, [r2, #52]	; 0x34
   10ac0:	635a      	str	r2, [r3, #52]	; 0x34
    }

    /* Configure object variables */
    SDO->nodeId = nodeId;
   10ac2:	68fb      	ldr	r3, [r7, #12]
   10ac4:	681b      	ldr	r3, [r3, #0]
   10ac6:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
   10aca:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    SDO->state = CO_SDO_ST_IDLE;
   10ace:	68fb      	ldr	r3, [r7, #12]
   10ad0:	681b      	ldr	r3, [r3, #0]
   10ad2:	2200      	movs	r2, #0
   10ad4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    SDO->CANrxNew = false;
   10ad8:	68fb      	ldr	r3, [r7, #12]
   10ada:	681b      	ldr	r3, [r3, #0]
   10adc:	2200      	movs	r2, #0
   10ade:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
    SDO->ptrFunctSignal = NULL;
   10ae2:	68fb      	ldr	r3, [r7, #12]
   10ae4:	681b      	ldr	r3, [r3, #0]
   10ae6:	2200      	movs	r2, #0
   10ae8:	67da      	str	r2, [r3, #124]	; 0x7c


    /* Configure Object dictionary entry at index 0x1200 */
    if(ObjDictIndex_SDOServerParameter == OD_H1200_SDO_SERVER_PARAM){
   10aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10aec:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
   10af0:	d10f      	bne.n	10b12 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x122>
        ptrCODriverClass->CO_OD_configure( ObjDictIndex_SDOServerParameter, CO_ODF_1200, (void*)&SDO->nodeId, 0U, 0U);
   10af2:	4b21      	ldr	r3, [pc, #132]	; (10b78 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   10af4:	681b      	ldr	r3, [r3, #0]
   10af6:	1d18      	adds	r0, r3, #4
   10af8:	68fb      	ldr	r3, [r7, #12]
   10afa:	681b      	ldr	r3, [r3, #0]
   10afc:	f103 0268 	add.w	r2, r3, #104	; 0x68
   10b00:	2300      	movs	r3, #0
   10b02:	9301      	str	r3, [sp, #4]
   10b04:	2300      	movs	r3, #0
   10b06:	9300      	str	r3, [sp, #0]
   10b08:	4613      	mov	r3, r2
   10b0a:	4a1c      	ldr	r2, [pc, #112]	; (10b7c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x18c>)
   10b0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   10b0e:	4c1c      	ldr	r4, [pc, #112]	; (10b80 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x190>)
   10b10:	47a0      	blx	r4
    }

    if((COB_IDClientToServer & 0x80000000) != 0 || (COB_IDServerToClient & 0x80000000) != 0 ){
   10b12:	687b      	ldr	r3, [r7, #4]
   10b14:	2b00      	cmp	r3, #0
   10b16:	db02      	blt.n	10b1e <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x12e>
   10b18:	683b      	ldr	r3, [r7, #0]
   10b1a:	2b00      	cmp	r3, #0
   10b1c:	da03      	bge.n	10b26 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x136>
        // SDO is invalid
        COB_IDClientToServer = 0;
   10b1e:	2300      	movs	r3, #0
   10b20:	607b      	str	r3, [r7, #4]
        COB_IDServerToClient = 0;
   10b22:	2300      	movs	r3, #0
   10b24:	603b      	str	r3, [r7, #0]
    }
    /* configure SDO server CAN reception */
  ptrCODriverClass->CAN_Rx_BufferInit(
   10b26:	4b14      	ldr	r3, [pc, #80]	; (10b78 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   10b28:	6818      	ldr	r0, [r3, #0]
            CANdevRxIdx,            /* rx buffer index */
            COB_IDClientToServer,   /* CAN identifier */
            0x7FF,                  /* mask */
            0,                      /* rtr */
            (void*)SDO,             /* object passed to receive function */
   10b2a:	68fb      	ldr	r3, [r7, #12]
   10b2c:	681b      	ldr	r3, [r3, #0]
            CO_SDO_receive);        /* this function will process received message */
   10b2e:	4a15      	ldr	r2, [pc, #84]	; (10b84 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x194>)
   10b30:	9202      	str	r2, [sp, #8]
   10b32:	9301      	str	r3, [sp, #4]
   10b34:	2300      	movs	r3, #0
   10b36:	9300      	str	r3, [sp, #0]
   10b38:	f240 73ff 	movw	r3, #2047	; 0x7ff
   10b3c:	687a      	ldr	r2, [r7, #4]
   10b3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
   10b40:	4c11      	ldr	r4, [pc, #68]	; (10b88 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x198>)
   10b42:	47a0      	blx	r4
	//printf("Config_SDO_recieve");
    /* configure SDO server CAN transmission */
    SDO->CANdevTx = CANdevTx;
   10b44:	68fb      	ldr	r3, [r7, #12]
   10b46:	681b      	ldr	r3, [r3, #0]
   10b48:	6cba      	ldr	r2, [r7, #72]	; 0x48
   10b4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    SDO->CANtxBuff = ptrCODriverClass->CAN_Tx_BufferInit(
   10b4e:	68fb      	ldr	r3, [r7, #12]
   10b50:	681c      	ldr	r4, [r3, #0]
   10b52:	4b09      	ldr	r3, [pc, #36]	; (10b78 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   10b54:	6818      	ldr	r0, [r3, #0]
   10b56:	2300      	movs	r3, #0
   10b58:	9301      	str	r3, [sp, #4]
   10b5a:	2308      	movs	r3, #8
   10b5c:	9300      	str	r3, [sp, #0]
   10b5e:	2300      	movs	r3, #0
   10b60:	683a      	ldr	r2, [r7, #0]
   10b62:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   10b64:	4d09      	ldr	r5, [pc, #36]	; (10b8c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x19c>)
   10b66:	47a8      	blx	r5
   10b68:	4603      	mov	r3, r0
   10b6a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
            COB_IDServerToClient,   /* CAN identifier */
            0,                      /* rtr */
            8,                      /* number of data bytes */
            0);                     /* synchronous message flag bit */
	
    return CO_ERROR_NO;
   10b6e:	2300      	movs	r3, #0
}
   10b70:	4618      	mov	r0, r3
   10b72:	3718      	adds	r7, #24
   10b74:	46bd      	mov	sp, r7
   10b76:	bdb0      	pop	{r4, r5, r7, pc}
   10b78:	20001a7c 	.word	0x20001a7c
   10b7c:	00010989 	.word	0x00010989
   10b80:	00010b91 	.word	0x00010b91
   10b84:	00010821 	.word	0x00010821
   10b88:	0000da71 	.word	0x0000da71
   10b8c:	0000db71 	.word	0x0000db71

00010b90 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh>:
        uint32_t                index,
        CO_SDO_abortCode_t    (*pODFunc)(CO_ODF_arg_t *ODF_arg),
        void                   *object,
        uint8_t                *flags,
        uint8_t                 flagsSize)
{
   10b90:	b580      	push	{r7, lr}
   10b92:	b088      	sub	sp, #32
   10b94:	af00      	add	r7, sp, #0
   10b96:	60f8      	str	r0, [r7, #12]
   10b98:	60b9      	str	r1, [r7, #8]
   10b9a:	607a      	str	r2, [r7, #4]
   10b9c:	603b      	str	r3, [r7, #0]
    uint32_t entryNo;

    entryNo = ptrCODriverClass->CO_OD_find(index);
   10b9e:	4b28      	ldr	r3, [pc, #160]	; (10c40 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xb0>)
   10ba0:	681b      	ldr	r3, [r3, #0]
   10ba2:	3304      	adds	r3, #4
   10ba4:	68b9      	ldr	r1, [r7, #8]
   10ba6:	4618      	mov	r0, r3
   10ba8:	4b26      	ldr	r3, [pc, #152]	; (10c44 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xb4>)
   10baa:	4798      	blx	r3
   10bac:	61b8      	str	r0, [r7, #24]
    if(entryNo < 0xFFFFU){
   10bae:	69bb      	ldr	r3, [r7, #24]
   10bb0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   10bb4:	4293      	cmp	r3, r2
   10bb6:	d83e      	bhi.n	10c36 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xa6>
        CO_OD_extension_t *ext = &SDO->ODExtensions[entryNo];
   10bb8:	68fb      	ldr	r3, [r7, #12]
   10bba:	681b      	ldr	r3, [r3, #0]
   10bbc:	6b59      	ldr	r1, [r3, #52]	; 0x34
   10bbe:	69ba      	ldr	r2, [r7, #24]
   10bc0:	4613      	mov	r3, r2
   10bc2:	005b      	lsls	r3, r3, #1
   10bc4:	4413      	add	r3, r2
   10bc6:	009b      	lsls	r3, r3, #2
   10bc8:	440b      	add	r3, r1
   10bca:	617b      	str	r3, [r7, #20]
        uint8_t maxSubIndex = SDO->OD[entryNo].maxSubIndex;
   10bcc:	68fb      	ldr	r3, [r7, #12]
   10bce:	681b      	ldr	r3, [r3, #0]
   10bd0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   10bd2:	69ba      	ldr	r2, [r7, #24]
   10bd4:	4613      	mov	r3, r2
   10bd6:	009b      	lsls	r3, r3, #2
   10bd8:	4413      	add	r3, r2
   10bda:	009b      	lsls	r3, r3, #2
   10bdc:	440b      	add	r3, r1
   10bde:	791b      	ldrb	r3, [r3, #4]
   10be0:	74fb      	strb	r3, [r7, #19]

        ext->pODFunc = pODFunc;
   10be2:	697b      	ldr	r3, [r7, #20]
   10be4:	687a      	ldr	r2, [r7, #4]
   10be6:	601a      	str	r2, [r3, #0]
        ext->object = object;
   10be8:	697b      	ldr	r3, [r7, #20]
   10bea:	683a      	ldr	r2, [r7, #0]
   10bec:	605a      	str	r2, [r3, #4]
        if((flags != NULL) && (flagsSize != 0U) && (flagsSize == maxSubIndex)){
   10bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10bf0:	2b00      	cmp	r3, #0
   10bf2:	d01b      	beq.n	10c2c <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0x9c>
   10bf4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   10bf8:	2b00      	cmp	r3, #0
   10bfa:	d017      	beq.n	10c2c <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0x9c>
   10bfc:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
   10c00:	7cfb      	ldrb	r3, [r7, #19]
   10c02:	429a      	cmp	r2, r3
   10c04:	d112      	bne.n	10c2c <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0x9c>
            uint32_t i;
            ext->flags = flags;
   10c06:	697b      	ldr	r3, [r7, #20]
   10c08:	6aba      	ldr	r2, [r7, #40]	; 0x28
   10c0a:	609a      	str	r2, [r3, #8]
            for(i=0U; i<=maxSubIndex; i++){
   10c0c:	2300      	movs	r3, #0
   10c0e:	61fb      	str	r3, [r7, #28]
   10c10:	7cfa      	ldrb	r2, [r7, #19]
   10c12:	69fb      	ldr	r3, [r7, #28]
   10c14:	429a      	cmp	r2, r3
   10c16:	d30d      	bcc.n	10c34 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xa4>
                ext->flags[i] = 0U;
   10c18:	697b      	ldr	r3, [r7, #20]
   10c1a:	689a      	ldr	r2, [r3, #8]
   10c1c:	69fb      	ldr	r3, [r7, #28]
   10c1e:	4413      	add	r3, r2
   10c20:	2200      	movs	r2, #0
   10c22:	701a      	strb	r2, [r3, #0]
            for(i=0U; i<=maxSubIndex; i++){
   10c24:	69fb      	ldr	r3, [r7, #28]
   10c26:	3301      	adds	r3, #1
   10c28:	61fb      	str	r3, [r7, #28]
   10c2a:	e7f1      	b.n	10c10 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0x80>
            }
        }
        else{
            ext->flags = NULL;
   10c2c:	697b      	ldr	r3, [r7, #20]
   10c2e:	2200      	movs	r2, #0
   10c30:	609a      	str	r2, [r3, #8]
        }
    }
}
   10c32:	e000      	b.n	10c36 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xa6>
            }
   10c34:	bf00      	nop
}
   10c36:	bf00      	nop
   10c38:	3720      	adds	r7, #32
   10c3a:	46bd      	mov	sp, r7
   10c3c:	bd80      	pop	{r7, pc}
   10c3e:	bf00      	nop
   10c40:	20001a7c 	.word	0x20001a7c
   10c44:	00010c49 	.word	0x00010c49

00010c48 <_ZN12CO_SDO_Class10CO_OD_findEm>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_OD_find( uint32_t index){
   10c48:	b480      	push	{r7}
   10c4a:	b087      	sub	sp, #28
   10c4c:	af00      	add	r7, sp, #0
   10c4e:	6078      	str	r0, [r7, #4]
   10c50:	6039      	str	r1, [r7, #0]
    /* Fast search in ordered Object Dictionary. If indexes are mixed, this won't work. */
    /* If Object Dictionary has up to 2^N entries, then N is max number of loop passes. */
    uint32_t cur, min, max;
    const CO_OD_entry_t* object;

    min = 0U;
   10c52:	2300      	movs	r3, #0
   10c54:	617b      	str	r3, [r7, #20]
    max = SDO->ODSize - 1U;
   10c56:	687b      	ldr	r3, [r7, #4]
   10c58:	681b      	ldr	r3, [r3, #0]
   10c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   10c5c:	3b01      	subs	r3, #1
   10c5e:	613b      	str	r3, [r7, #16]
    while(min < max){
   10c60:	697a      	ldr	r2, [r7, #20]
   10c62:	693b      	ldr	r3, [r7, #16]
   10c64:	429a      	cmp	r2, r3
   10c66:	d227      	bcs.n	10cb8 <_ZN12CO_SDO_Class10CO_OD_findEm+0x70>
        cur = (min + max) / 2;
   10c68:	697a      	ldr	r2, [r7, #20]
   10c6a:	693b      	ldr	r3, [r7, #16]
   10c6c:	4413      	add	r3, r2
   10c6e:	085b      	lsrs	r3, r3, #1
   10c70:	60fb      	str	r3, [r7, #12]
        object = &SDO->OD[cur];
   10c72:	687b      	ldr	r3, [r7, #4]
   10c74:	681b      	ldr	r3, [r3, #0]
   10c76:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   10c78:	68fa      	ldr	r2, [r7, #12]
   10c7a:	4613      	mov	r3, r2
   10c7c:	009b      	lsls	r3, r3, #2
   10c7e:	4413      	add	r3, r2
   10c80:	009b      	lsls	r3, r3, #2
   10c82:	440b      	add	r3, r1
   10c84:	60bb      	str	r3, [r7, #8]
        /* Is object matched */
        if(index == object->index){
   10c86:	68bb      	ldr	r3, [r7, #8]
   10c88:	681a      	ldr	r2, [r3, #0]
   10c8a:	683b      	ldr	r3, [r7, #0]
   10c8c:	429a      	cmp	r2, r3
   10c8e:	d101      	bne.n	10c94 <_ZN12CO_SDO_Class10CO_OD_findEm+0x4c>
            return cur;
   10c90:	68fb      	ldr	r3, [r7, #12]
   10c92:	e028      	b.n	10ce6 <_ZN12CO_SDO_Class10CO_OD_findEm+0x9e>
        }
        if(index < object->index){
   10c94:	68bb      	ldr	r3, [r7, #8]
   10c96:	681a      	ldr	r2, [r3, #0]
   10c98:	683b      	ldr	r3, [r7, #0]
   10c9a:	429a      	cmp	r2, r3
   10c9c:	d908      	bls.n	10cb0 <_ZN12CO_SDO_Class10CO_OD_findEm+0x68>
            max = cur;
   10c9e:	68fb      	ldr	r3, [r7, #12]
   10ca0:	613b      	str	r3, [r7, #16]
            if(max) max--;
   10ca2:	693b      	ldr	r3, [r7, #16]
   10ca4:	2b00      	cmp	r3, #0
   10ca6:	d0db      	beq.n	10c60 <_ZN12CO_SDO_Class10CO_OD_findEm+0x18>
   10ca8:	693b      	ldr	r3, [r7, #16]
   10caa:	3b01      	subs	r3, #1
   10cac:	613b      	str	r3, [r7, #16]
   10cae:	e7d7      	b.n	10c60 <_ZN12CO_SDO_Class10CO_OD_findEm+0x18>
        }
        else
            min = cur + 1U;
   10cb0:	68fb      	ldr	r3, [r7, #12]
   10cb2:	3301      	adds	r3, #1
   10cb4:	617b      	str	r3, [r7, #20]
    while(min < max){
   10cb6:	e7d3      	b.n	10c60 <_ZN12CO_SDO_Class10CO_OD_findEm+0x18>
    }

    if(min == max){
   10cb8:	697a      	ldr	r2, [r7, #20]
   10cba:	693b      	ldr	r3, [r7, #16]
   10cbc:	429a      	cmp	r2, r3
   10cbe:	d110      	bne.n	10ce2 <_ZN12CO_SDO_Class10CO_OD_findEm+0x9a>
        object = &SDO->OD[min];
   10cc0:	687b      	ldr	r3, [r7, #4]
   10cc2:	681b      	ldr	r3, [r3, #0]
   10cc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   10cc6:	697a      	ldr	r2, [r7, #20]
   10cc8:	4613      	mov	r3, r2
   10cca:	009b      	lsls	r3, r3, #2
   10ccc:	4413      	add	r3, r2
   10cce:	009b      	lsls	r3, r3, #2
   10cd0:	440b      	add	r3, r1
   10cd2:	60bb      	str	r3, [r7, #8]
        /* Is object matched */
        if(index == object->index){
   10cd4:	68bb      	ldr	r3, [r7, #8]
   10cd6:	681a      	ldr	r2, [r3, #0]
   10cd8:	683b      	ldr	r3, [r7, #0]
   10cda:	429a      	cmp	r2, r3
   10cdc:	d101      	bne.n	10ce2 <_ZN12CO_SDO_Class10CO_OD_findEm+0x9a>
            return min;
   10cde:	697b      	ldr	r3, [r7, #20]
   10ce0:	e001      	b.n	10ce6 <_ZN12CO_SDO_Class10CO_OD_findEm+0x9e>
        }
    }

    return 0xFFFFU;  /* object does not exist in OD */
   10ce2:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
   10ce6:	4618      	mov	r0, r3
   10ce8:	371c      	adds	r7, #28
   10cea:	46bd      	mov	sp, r7
   10cec:	bc80      	pop	{r7}
   10cee:	4770      	bx	lr

00010cf0 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_OD_getLength(uint32_t entryNo, uint8_t subIndex){
   10cf0:	b480      	push	{r7}
   10cf2:	b087      	sub	sp, #28
   10cf4:	af00      	add	r7, sp, #0
   10cf6:	60f8      	str	r0, [r7, #12]
   10cf8:	60b9      	str	r1, [r7, #8]
   10cfa:	4613      	mov	r3, r2
   10cfc:	71fb      	strb	r3, [r7, #7]
    const CO_OD_entry_t* object = &SDO->OD[entryNo];
   10cfe:	68fb      	ldr	r3, [r7, #12]
   10d00:	681b      	ldr	r3, [r3, #0]
   10d02:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   10d04:	68ba      	ldr	r2, [r7, #8]
   10d06:	4613      	mov	r3, r2
   10d08:	009b      	lsls	r3, r3, #2
   10d0a:	4413      	add	r3, r2
   10d0c:	009b      	lsls	r3, r3, #2
   10d0e:	440b      	add	r3, r1
   10d10:	617b      	str	r3, [r7, #20]

    if(entryNo == 0xFFFFU){
   10d12:	68bb      	ldr	r3, [r7, #8]
   10d14:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10d18:	4293      	cmp	r3, r2
   10d1a:	d101      	bne.n	10d20 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x30>
        return 0U;
   10d1c:	2300      	movs	r3, #0
   10d1e:	e034      	b.n	10d8a <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
    }

    if(object->maxSubIndex == 0U){    /* Object type is Var */
   10d20:	697b      	ldr	r3, [r7, #20]
   10d22:	791b      	ldrb	r3, [r3, #4]
   10d24:	2b00      	cmp	r3, #0
   10d26:	d108      	bne.n	10d3a <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x4a>
        if(object->pData == 0){ /* data type is domain */
   10d28:	697b      	ldr	r3, [r7, #20]
   10d2a:	691b      	ldr	r3, [r3, #16]
   10d2c:	2b00      	cmp	r3, #0
   10d2e:	d101      	bne.n	10d34 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x44>
            return CO_SDO_BUFFER_SIZE;
   10d30:	2320      	movs	r3, #32
   10d32:	e02a      	b.n	10d8a <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
        else{
            return object->length;
   10d34:	697b      	ldr	r3, [r7, #20]
   10d36:	68db      	ldr	r3, [r3, #12]
   10d38:	e027      	b.n	10d8a <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
    }
    else if(object->attribute != 0U){ /* Object type is Array */
   10d3a:	697b      	ldr	r3, [r7, #20]
   10d3c:	689b      	ldr	r3, [r3, #8]
   10d3e:	2b00      	cmp	r3, #0
   10d40:	d00d      	beq.n	10d5e <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x6e>
        if(subIndex == 0U){
   10d42:	79fb      	ldrb	r3, [r7, #7]
   10d44:	2b00      	cmp	r3, #0
   10d46:	d101      	bne.n	10d4c <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x5c>
            return 1U;
   10d48:	2301      	movs	r3, #1
   10d4a:	e01e      	b.n	10d8a <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
        else if(object->pData == 0){
   10d4c:	697b      	ldr	r3, [r7, #20]
   10d4e:	691b      	ldr	r3, [r3, #16]
   10d50:	2b00      	cmp	r3, #0
   10d52:	d101      	bne.n	10d58 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x68>
            /* data type is domain */
            return CO_SDO_BUFFER_SIZE;
   10d54:	2320      	movs	r3, #32
   10d56:	e018      	b.n	10d8a <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
        else{
            return object->length;
   10d58:	697b      	ldr	r3, [r7, #20]
   10d5a:	68db      	ldr	r3, [r3, #12]
   10d5c:	e015      	b.n	10d8a <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
    }
    else{                            /* Object type is Record */
        if(((const CO_OD_entryRecord_t*)(object->pData))[subIndex].pData == 0){
   10d5e:	697b      	ldr	r3, [r7, #20]
   10d60:	6919      	ldr	r1, [r3, #16]
   10d62:	79fa      	ldrb	r2, [r7, #7]
   10d64:	4613      	mov	r3, r2
   10d66:	005b      	lsls	r3, r3, #1
   10d68:	4413      	add	r3, r2
   10d6a:	009b      	lsls	r3, r3, #2
   10d6c:	440b      	add	r3, r1
   10d6e:	681b      	ldr	r3, [r3, #0]
   10d70:	2b00      	cmp	r3, #0
   10d72:	d101      	bne.n	10d78 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x88>
            /* data type is domain */
            return CO_SDO_BUFFER_SIZE;
   10d74:	2320      	movs	r3, #32
   10d76:	e008      	b.n	10d8a <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
        else{
            return ((const CO_OD_entryRecord_t*)(object->pData))[subIndex].length;
   10d78:	697b      	ldr	r3, [r7, #20]
   10d7a:	6919      	ldr	r1, [r3, #16]
   10d7c:	79fa      	ldrb	r2, [r7, #7]
   10d7e:	4613      	mov	r3, r2
   10d80:	005b      	lsls	r3, r3, #1
   10d82:	4413      	add	r3, r2
   10d84:	009b      	lsls	r3, r3, #2
   10d86:	440b      	add	r3, r1
   10d88:	689b      	ldr	r3, [r3, #8]
        }
    }
}
   10d8a:	4618      	mov	r0, r3
   10d8c:	371c      	adds	r7, #28
   10d8e:	46bd      	mov	sp, r7
   10d90:	bc80      	pop	{r7}
   10d92:	4770      	bx	lr

00010d94 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_OD_getAttribute(uint32_t entryNo, uint8_t subIndex){
   10d94:	b480      	push	{r7}
   10d96:	b089      	sub	sp, #36	; 0x24
   10d98:	af00      	add	r7, sp, #0
   10d9a:	60f8      	str	r0, [r7, #12]
   10d9c:	60b9      	str	r1, [r7, #8]
   10d9e:	4613      	mov	r3, r2
   10da0:	71fb      	strb	r3, [r7, #7]
    const CO_OD_entry_t* object = &SDO->OD[entryNo];
   10da2:	68fb      	ldr	r3, [r7, #12]
   10da4:	681b      	ldr	r3, [r3, #0]
   10da6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   10da8:	68ba      	ldr	r2, [r7, #8]
   10daa:	4613      	mov	r3, r2
   10dac:	009b      	lsls	r3, r3, #2
   10dae:	4413      	add	r3, r2
   10db0:	009b      	lsls	r3, r3, #2
   10db2:	440b      	add	r3, r1
   10db4:	617b      	str	r3, [r7, #20]

    if(entryNo == 0xFFFFU){
   10db6:	68bb      	ldr	r3, [r7, #8]
   10db8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10dbc:	4293      	cmp	r3, r2
   10dbe:	d101      	bne.n	10dc4 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x30>
        return 0U;
   10dc0:	2300      	movs	r3, #0
   10dc2:	e037      	b.n	10e34 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0xa0>
    }

    if(object->maxSubIndex == 0U){   /* Object type is Var */
   10dc4:	697b      	ldr	r3, [r7, #20]
   10dc6:	791b      	ldrb	r3, [r3, #4]
   10dc8:	2b00      	cmp	r3, #0
   10dca:	d102      	bne.n	10dd2 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x3e>
        return object->attribute;
   10dcc:	697b      	ldr	r3, [r7, #20]
   10dce:	689b      	ldr	r3, [r3, #8]
   10dd0:	e030      	b.n	10e34 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0xa0>
    }
    else if(object->attribute != 0U){/* Object type is Array */
   10dd2:	697b      	ldr	r3, [r7, #20]
   10dd4:	689b      	ldr	r3, [r3, #8]
   10dd6:	2b00      	cmp	r3, #0
   10dd8:	d023      	beq.n	10e22 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x8e>
        bool_t exception_1003 = false;
   10dda:	2300      	movs	r3, #0
   10ddc:	77fb      	strb	r3, [r7, #31]
        uint32_t attr = object->attribute;
   10dde:	697b      	ldr	r3, [r7, #20]
   10de0:	689b      	ldr	r3, [r3, #8]
   10de2:	61bb      	str	r3, [r7, #24]

        /* Special exception: Object 1003,00 should be writable */
        if(object->index == 0x1003 && subIndex == 0) {
   10de4:	697b      	ldr	r3, [r7, #20]
   10de6:	681b      	ldr	r3, [r3, #0]
   10de8:	f241 0203 	movw	r2, #4099	; 0x1003
   10dec:	4293      	cmp	r3, r2
   10dee:	d108      	bne.n	10e02 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x6e>
   10df0:	79fb      	ldrb	r3, [r7, #7]
   10df2:	2b00      	cmp	r3, #0
   10df4:	d105      	bne.n	10e02 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x6e>
            exception_1003 = true;
   10df6:	2301      	movs	r3, #1
   10df8:	77fb      	strb	r3, [r7, #31]
            attr |= CO_ODA_WRITEABLE;
   10dfa:	69bb      	ldr	r3, [r7, #24]
   10dfc:	f043 0308 	orr.w	r3, r3, #8
   10e00:	61bb      	str	r3, [r7, #24]
        }

        if(subIndex == 0U  && exception_1003 == false){
   10e02:	79fb      	ldrb	r3, [r7, #7]
   10e04:	2b00      	cmp	r3, #0
   10e06:	d10a      	bne.n	10e1e <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x8a>
   10e08:	7ffb      	ldrb	r3, [r7, #31]
   10e0a:	2b00      	cmp	r3, #0
   10e0c:	d107      	bne.n	10e1e <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x8a>
            /* First subIndex is readonly */
            attr &= ~(CO_ODA_WRITEABLE | CO_ODA_RPDO_MAPABLE);
   10e0e:	69bb      	ldr	r3, [r7, #24]
   10e10:	f023 0318 	bic.w	r3, r3, #24
   10e14:	61bb      	str	r3, [r7, #24]
            attr |= CO_ODA_READABLE;
   10e16:	69bb      	ldr	r3, [r7, #24]
   10e18:	f043 0304 	orr.w	r3, r3, #4
   10e1c:	61bb      	str	r3, [r7, #24]
        }
        return attr;
   10e1e:	69bb      	ldr	r3, [r7, #24]
   10e20:	e008      	b.n	10e34 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0xa0>
    }
    else{                            /* Object type is Record */
        return ((const CO_OD_entryRecord_t*)(object->pData))[subIndex].attribute;
   10e22:	697b      	ldr	r3, [r7, #20]
   10e24:	6919      	ldr	r1, [r3, #16]
   10e26:	79fa      	ldrb	r2, [r7, #7]
   10e28:	4613      	mov	r3, r2
   10e2a:	005b      	lsls	r3, r3, #1
   10e2c:	4413      	add	r3, r2
   10e2e:	009b      	lsls	r3, r3, #2
   10e30:	440b      	add	r3, r1
   10e32:	685b      	ldr	r3, [r3, #4]
    }
}
   10e34:	4618      	mov	r0, r3
   10e36:	3724      	adds	r7, #36	; 0x24
   10e38:	46bd      	mov	sp, r7
   10e3a:	bc80      	pop	{r7}
   10e3c:	4770      	bx	lr

00010e3e <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh>:


/******************************************************************************/
void* CO_SDO_Class::CO_OD_getDataPointer( uint32_t entryNo, uint8_t subIndex){
   10e3e:	b480      	push	{r7}
   10e40:	b087      	sub	sp, #28
   10e42:	af00      	add	r7, sp, #0
   10e44:	60f8      	str	r0, [r7, #12]
   10e46:	60b9      	str	r1, [r7, #8]
   10e48:	4613      	mov	r3, r2
   10e4a:	71fb      	strb	r3, [r7, #7]
    const CO_OD_entry_t* object = &SDO->OD[entryNo];
   10e4c:	68fb      	ldr	r3, [r7, #12]
   10e4e:	681b      	ldr	r3, [r3, #0]
   10e50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   10e52:	68ba      	ldr	r2, [r7, #8]
   10e54:	4613      	mov	r3, r2
   10e56:	009b      	lsls	r3, r3, #2
   10e58:	4413      	add	r3, r2
   10e5a:	009b      	lsls	r3, r3, #2
   10e5c:	440b      	add	r3, r1
   10e5e:	617b      	str	r3, [r7, #20]

    if(entryNo == 0xFFFFU){
   10e60:	68bb      	ldr	r3, [r7, #8]
   10e62:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10e66:	4293      	cmp	r3, r2
   10e68:	d101      	bne.n	10e6e <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x30>
        return 0;
   10e6a:	2300      	movs	r3, #0
   10e6c:	e02a      	b.n	10ec4 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
    }

    if(object->maxSubIndex == 0U){   /* Object type is Var */
   10e6e:	697b      	ldr	r3, [r7, #20]
   10e70:	791b      	ldrb	r3, [r3, #4]
   10e72:	2b00      	cmp	r3, #0
   10e74:	d102      	bne.n	10e7c <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x3e>
        return object->pData;
   10e76:	697b      	ldr	r3, [r7, #20]
   10e78:	691b      	ldr	r3, [r3, #16]
   10e7a:	e023      	b.n	10ec4 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
    }
    else if(object->attribute != 0U){/* Object type is Array */
   10e7c:	697b      	ldr	r3, [r7, #20]
   10e7e:	689b      	ldr	r3, [r3, #8]
   10e80:	2b00      	cmp	r3, #0
   10e82:	d016      	beq.n	10eb2 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x74>
        if(subIndex==0){
   10e84:	79fb      	ldrb	r3, [r7, #7]
   10e86:	2b00      	cmp	r3, #0
   10e88:	d102      	bne.n	10e90 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x52>
            /* this is the data, for the subIndex 0 in the array */
            return (void*) &object->maxSubIndex;
   10e8a:	697b      	ldr	r3, [r7, #20]
   10e8c:	3304      	adds	r3, #4
   10e8e:	e019      	b.n	10ec4 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
        }
        else if(object->pData == 0){
   10e90:	697b      	ldr	r3, [r7, #20]
   10e92:	691b      	ldr	r3, [r3, #16]
   10e94:	2b00      	cmp	r3, #0
   10e96:	d101      	bne.n	10e9c <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x5e>
            /* data type is domain */
            return 0;
   10e98:	2300      	movs	r3, #0
   10e9a:	e013      	b.n	10ec4 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
        }
        else{
            return (void*)(((int8_t*)object->pData) + ((subIndex-1) * object->length));
   10e9c:	697b      	ldr	r3, [r7, #20]
   10e9e:	691a      	ldr	r2, [r3, #16]
   10ea0:	79fb      	ldrb	r3, [r7, #7]
   10ea2:	3b01      	subs	r3, #1
   10ea4:	4619      	mov	r1, r3
   10ea6:	697b      	ldr	r3, [r7, #20]
   10ea8:	68db      	ldr	r3, [r3, #12]
   10eaa:	fb03 f301 	mul.w	r3, r3, r1
   10eae:	4413      	add	r3, r2
   10eb0:	e008      	b.n	10ec4 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
        }
    }
    else{                            /* Object Type is Record */
        return ((const CO_OD_entryRecord_t*)(object->pData))[subIndex].pData;
   10eb2:	697b      	ldr	r3, [r7, #20]
   10eb4:	6919      	ldr	r1, [r3, #16]
   10eb6:	79fa      	ldrb	r2, [r7, #7]
   10eb8:	4613      	mov	r3, r2
   10eba:	005b      	lsls	r3, r3, #1
   10ebc:	4413      	add	r3, r2
   10ebe:	009b      	lsls	r3, r3, #2
   10ec0:	440b      	add	r3, r1
   10ec2:	681b      	ldr	r3, [r3, #0]
    }
}
   10ec4:	4618      	mov	r0, r3
   10ec6:	371c      	adds	r7, #28
   10ec8:	46bd      	mov	sp, r7
   10eca:	bc80      	pop	{r7}
   10ecc:	4770      	bx	lr

00010ece <_ZN12CO_SDO_Class21CO_OD_getFlagsPointerEmh>:


/******************************************************************************/
uint8_t* CO_SDO_Class::CO_OD_getFlagsPointer( uint32_t entryNo, uint8_t subIndex){
   10ece:	b480      	push	{r7}
   10ed0:	b087      	sub	sp, #28
   10ed2:	af00      	add	r7, sp, #0
   10ed4:	60f8      	str	r0, [r7, #12]
   10ed6:	60b9      	str	r1, [r7, #8]
   10ed8:	4613      	mov	r3, r2
   10eda:	71fb      	strb	r3, [r7, #7]
    CO_OD_extension_t* ext;

    if((entryNo == 0xFFFFU) || (SDO->ODExtensions == 0)){
   10edc:	68bb      	ldr	r3, [r7, #8]
   10ede:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10ee2:	4293      	cmp	r3, r2
   10ee4:	d004      	beq.n	10ef0 <_ZN12CO_SDO_Class21CO_OD_getFlagsPointerEmh+0x22>
   10ee6:	68fb      	ldr	r3, [r7, #12]
   10ee8:	681b      	ldr	r3, [r3, #0]
   10eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   10eec:	2b00      	cmp	r3, #0
   10eee:	d101      	bne.n	10ef4 <_ZN12CO_SDO_Class21CO_OD_getFlagsPointerEmh+0x26>
        return 0;
   10ef0:	2300      	movs	r3, #0
   10ef2:	e00d      	b.n	10f10 <_ZN12CO_SDO_Class21CO_OD_getFlagsPointerEmh+0x42>
    }

    ext = &SDO->ODExtensions[entryNo];
   10ef4:	68fb      	ldr	r3, [r7, #12]
   10ef6:	681b      	ldr	r3, [r3, #0]
   10ef8:	6b59      	ldr	r1, [r3, #52]	; 0x34
   10efa:	68ba      	ldr	r2, [r7, #8]
   10efc:	4613      	mov	r3, r2
   10efe:	005b      	lsls	r3, r3, #1
   10f00:	4413      	add	r3, r2
   10f02:	009b      	lsls	r3, r3, #2
   10f04:	440b      	add	r3, r1
   10f06:	617b      	str	r3, [r7, #20]

    return &ext->flags[subIndex];
   10f08:	697b      	ldr	r3, [r7, #20]
   10f0a:	689a      	ldr	r2, [r3, #8]
   10f0c:	79fb      	ldrb	r3, [r7, #7]
   10f0e:	4413      	add	r3, r2
}
   10f10:	4618      	mov	r0, r3
   10f12:	371c      	adds	r7, #28
   10f14:	46bd      	mov	sp, r7
   10f16:	bc80      	pop	{r7}
   10f18:	4770      	bx	lr
	...

00010f1c <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_SDO_initTransfer( uint32_t index, uint8_t subIndex){
   10f1c:	b590      	push	{r4, r7, lr}
   10f1e:	b087      	sub	sp, #28
   10f20:	af00      	add	r7, sp, #0
   10f22:	60f8      	str	r0, [r7, #12]
   10f24:	60b9      	str	r1, [r7, #8]
   10f26:	4613      	mov	r3, r2
   10f28:	71fb      	strb	r3, [r7, #7]

    SDO->ODF_arg.index = index;
   10f2a:	68fb      	ldr	r3, [r7, #12]
   10f2c:	681b      	ldr	r3, [r3, #0]
   10f2e:	68ba      	ldr	r2, [r7, #8]
   10f30:	659a      	str	r2, [r3, #88]	; 0x58
    SDO->ODF_arg.subIndex = subIndex;
   10f32:	68fb      	ldr	r3, [r7, #12]
   10f34:	681b      	ldr	r3, [r3, #0]
   10f36:	79fa      	ldrb	r2, [r7, #7]
   10f38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* find object in Object Dictionary */
    SDO->entryNo = CO_OD_find( index);
   10f3c:	68fb      	ldr	r3, [r7, #12]
   10f3e:	681c      	ldr	r4, [r3, #0]
   10f40:	68b9      	ldr	r1, [r7, #8]
   10f42:	68f8      	ldr	r0, [r7, #12]
   10f44:	4b51      	ldr	r3, [pc, #324]	; (1108c <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
   10f46:	4798      	blx	r3
   10f48:	4603      	mov	r3, r0
   10f4a:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(SDO->entryNo == 0xFFFFU){
   10f4c:	68fb      	ldr	r3, [r7, #12]
   10f4e:	681b      	ldr	r3, [r3, #0]
   10f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   10f52:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10f56:	4293      	cmp	r3, r2
   10f58:	d101      	bne.n	10f5e <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x42>
        return CO_SDO_AB_NOT_EXIST ;     /* object does not exist in OD */
   10f5a:	4b4d      	ldr	r3, [pc, #308]	; (11090 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x174>)
   10f5c:	e091      	b.n	11082 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x166>
    }

    /* verify existance of subIndex */
    if(subIndex > SDO->OD[SDO->entryNo].maxSubIndex &&
   10f5e:	79f9      	ldrb	r1, [r7, #7]
   10f60:	68fb      	ldr	r3, [r7, #12]
   10f62:	681b      	ldr	r3, [r3, #0]
   10f64:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   10f66:	68fb      	ldr	r3, [r7, #12]
   10f68:	681b      	ldr	r3, [r3, #0]
   10f6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   10f6c:	4613      	mov	r3, r2
   10f6e:	009b      	lsls	r3, r3, #2
   10f70:	4413      	add	r3, r2
   10f72:	009b      	lsls	r3, r3, #2
   10f74:	4403      	add	r3, r0
   10f76:	791b      	ldrb	r3, [r3, #4]
   10f78:	4299      	cmp	r1, r3
   10f7a:	dd0f      	ble.n	10f9c <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x80>
            SDO->OD[SDO->entryNo].pData != NULL)
   10f7c:	68fb      	ldr	r3, [r7, #12]
   10f7e:	681b      	ldr	r3, [r3, #0]
   10f80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   10f82:	68fb      	ldr	r3, [r7, #12]
   10f84:	681b      	ldr	r3, [r3, #0]
   10f86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   10f88:	4613      	mov	r3, r2
   10f8a:	009b      	lsls	r3, r3, #2
   10f8c:	4413      	add	r3, r2
   10f8e:	009b      	lsls	r3, r3, #2
   10f90:	440b      	add	r3, r1
   10f92:	691b      	ldr	r3, [r3, #16]
    if(subIndex > SDO->OD[SDO->entryNo].maxSubIndex &&
   10f94:	2b00      	cmp	r3, #0
   10f96:	d001      	beq.n	10f9c <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x80>
    {
        return CO_SDO_AB_SUB_UNKNOWN;     /* Sub-index does not exist. */
   10f98:	4b3e      	ldr	r3, [pc, #248]	; (11094 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x178>)
   10f9a:	e072      	b.n	11082 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x166>
    }

    /* pointer to data in Object dictionary */
    SDO->ODF_arg.ODdataStorage = CO_OD_getDataPointer(SDO->entryNo, subIndex);
   10f9c:	68fb      	ldr	r3, [r7, #12]
   10f9e:	681c      	ldr	r4, [r3, #0]
   10fa0:	68fb      	ldr	r3, [r7, #12]
   10fa2:	681b      	ldr	r3, [r3, #0]
   10fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   10fa6:	79fa      	ldrb	r2, [r7, #7]
   10fa8:	4619      	mov	r1, r3
   10faa:	68f8      	ldr	r0, [r7, #12]
   10fac:	4b3a      	ldr	r3, [pc, #232]	; (11098 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x17c>)
   10fae:	4798      	blx	r3
   10fb0:	4603      	mov	r3, r0
   10fb2:	64a3      	str	r3, [r4, #72]	; 0x48

    /* fill ODF_arg */
    SDO->ODF_arg.object = NULL;
   10fb4:	68fb      	ldr	r3, [r7, #12]
   10fb6:	681b      	ldr	r3, [r3, #0]
   10fb8:	2200      	movs	r2, #0
   10fba:	641a      	str	r2, [r3, #64]	; 0x40
    if(SDO->ODExtensions){
   10fbc:	68fb      	ldr	r3, [r7, #12]
   10fbe:	681b      	ldr	r3, [r3, #0]
   10fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   10fc2:	2b00      	cmp	r3, #0
   10fc4:	d010      	beq.n	10fe8 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0xcc>
        CO_OD_extension_t *ext = &SDO->ODExtensions[SDO->entryNo];
   10fc6:	68fb      	ldr	r3, [r7, #12]
   10fc8:	681b      	ldr	r3, [r3, #0]
   10fca:	6b59      	ldr	r1, [r3, #52]	; 0x34
   10fcc:	68fb      	ldr	r3, [r7, #12]
   10fce:	681b      	ldr	r3, [r3, #0]
   10fd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   10fd2:	4613      	mov	r3, r2
   10fd4:	005b      	lsls	r3, r3, #1
   10fd6:	4413      	add	r3, r2
   10fd8:	009b      	lsls	r3, r3, #2
   10fda:	440b      	add	r3, r1
   10fdc:	617b      	str	r3, [r7, #20]
        SDO->ODF_arg.object = ext->object;
   10fde:	68fb      	ldr	r3, [r7, #12]
   10fe0:	681b      	ldr	r3, [r3, #0]
   10fe2:	697a      	ldr	r2, [r7, #20]
   10fe4:	6852      	ldr	r2, [r2, #4]
   10fe6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    SDO->ODF_arg.data = SDO->databuffer;
   10fe8:	68fb      	ldr	r3, [r7, #12]
   10fea:	681b      	ldr	r3, [r3, #0]
   10fec:	68fa      	ldr	r2, [r7, #12]
   10fee:	6812      	ldr	r2, [r2, #0]
   10ff0:	3208      	adds	r2, #8
   10ff2:	645a      	str	r2, [r3, #68]	; 0x44
    SDO->ODF_arg.dataLength = CO_OD_getLength(SDO->entryNo, subIndex);
   10ff4:	68fb      	ldr	r3, [r7, #12]
   10ff6:	681c      	ldr	r4, [r3, #0]
   10ff8:	68fb      	ldr	r3, [r7, #12]
   10ffa:	681b      	ldr	r3, [r3, #0]
   10ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   10ffe:	79fa      	ldrb	r2, [r7, #7]
   11000:	4619      	mov	r1, r3
   11002:	68f8      	ldr	r0, [r7, #12]
   11004:	4b25      	ldr	r3, [pc, #148]	; (1109c <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x180>)
   11006:	4798      	blx	r3
   11008:	4603      	mov	r3, r0
   1100a:	64e3      	str	r3, [r4, #76]	; 0x4c
    SDO->ODF_arg.attribute = CO_OD_getAttribute(SDO->entryNo, subIndex);
   1100c:	68fb      	ldr	r3, [r7, #12]
   1100e:	681c      	ldr	r4, [r3, #0]
   11010:	68fb      	ldr	r3, [r7, #12]
   11012:	681b      	ldr	r3, [r3, #0]
   11014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   11016:	79fa      	ldrb	r2, [r7, #7]
   11018:	4619      	mov	r1, r3
   1101a:	68f8      	ldr	r0, [r7, #12]
   1101c:	4b20      	ldr	r3, [pc, #128]	; (110a0 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x184>)
   1101e:	4798      	blx	r3
   11020:	4603      	mov	r3, r0
   11022:	6523      	str	r3, [r4, #80]	; 0x50
    SDO->ODF_arg.pFlags = CO_OD_getFlagsPointer( SDO->entryNo, subIndex);
   11024:	68fb      	ldr	r3, [r7, #12]
   11026:	681c      	ldr	r4, [r3, #0]
   11028:	68fb      	ldr	r3, [r7, #12]
   1102a:	681b      	ldr	r3, [r3, #0]
   1102c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1102e:	79fa      	ldrb	r2, [r7, #7]
   11030:	4619      	mov	r1, r3
   11032:	68f8      	ldr	r0, [r7, #12]
   11034:	4b1b      	ldr	r3, [pc, #108]	; (110a4 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x188>)
   11036:	4798      	blx	r3
   11038:	4603      	mov	r3, r0
   1103a:	6563      	str	r3, [r4, #84]	; 0x54

    SDO->ODF_arg.firstSegment = true;
   1103c:	68fb      	ldr	r3, [r7, #12]
   1103e:	681b      	ldr	r3, [r3, #0]
   11040:	2201      	movs	r2, #1
   11042:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
    SDO->ODF_arg.lastSegment = true;
   11046:	68fb      	ldr	r3, [r7, #12]
   11048:	681b      	ldr	r3, [r3, #0]
   1104a:	2201      	movs	r2, #1
   1104c:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f

    /* indicate total data length, if not domain */
    SDO->ODF_arg.dataLengthTotal = (SDO->ODF_arg.ODdataStorage) ? SDO->ODF_arg.dataLength : 0U;
   11050:	68fb      	ldr	r3, [r7, #12]
   11052:	681a      	ldr	r2, [r3, #0]
   11054:	68fb      	ldr	r3, [r7, #12]
   11056:	681b      	ldr	r3, [r3, #0]
   11058:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1105a:	2b00      	cmp	r3, #0
   1105c:	d003      	beq.n	11066 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x14a>
   1105e:	68fb      	ldr	r3, [r7, #12]
   11060:	681b      	ldr	r3, [r3, #0]
   11062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   11064:	e000      	b.n	11068 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x14c>
   11066:	2300      	movs	r3, #0
   11068:	6613      	str	r3, [r2, #96]	; 0x60

    SDO->ODF_arg.offset = 0U;
   1106a:	68fb      	ldr	r3, [r7, #12]
   1106c:	681b      	ldr	r3, [r3, #0]
   1106e:	2200      	movs	r2, #0
   11070:	665a      	str	r2, [r3, #100]	; 0x64

    /* verify length */
    if(SDO->ODF_arg.dataLength > CO_SDO_BUFFER_SIZE){
   11072:	68fb      	ldr	r3, [r7, #12]
   11074:	681b      	ldr	r3, [r3, #0]
   11076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   11078:	2b20      	cmp	r3, #32
   1107a:	d901      	bls.n	11080 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x164>
        return CO_SDO_AB_DEVICE_INCOMPAT;     /* general internal incompatibility in the device */
   1107c:	4b0a      	ldr	r3, [pc, #40]	; (110a8 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x18c>)
   1107e:	e000      	b.n	11082 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x166>
    }

    return 0U;
   11080:	2300      	movs	r3, #0
}
   11082:	4618      	mov	r0, r3
   11084:	371c      	adds	r7, #28
   11086:	46bd      	mov	sp, r7
   11088:	bd90      	pop	{r4, r7, pc}
   1108a:	bf00      	nop
   1108c:	00010c49 	.word	0x00010c49
   11090:	06020000 	.word	0x06020000
   11094:	06090011 	.word	0x06090011
   11098:	00010e3f 	.word	0x00010e3f
   1109c:	00010cf1 	.word	0x00010cf1
   110a0:	00010d95 	.word	0x00010d95
   110a4:	00010ecf 	.word	0x00010ecf
   110a8:	06040047 	.word	0x06040047

000110ac <_ZN12CO_SDO_Class13CO_SDO_readODEm>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_SDO_readOD(uint32_t SDOBufferSize){
   110ac:	b580      	push	{r7, lr}
   110ae:	b08a      	sub	sp, #40	; 0x28
   110b0:	af00      	add	r7, sp, #0
   110b2:	6078      	str	r0, [r7, #4]
   110b4:	6039      	str	r1, [r7, #0]
    uint8_t *SDObuffer = SDO->ODF_arg.data;
   110b6:	687b      	ldr	r3, [r7, #4]
   110b8:	681b      	ldr	r3, [r3, #0]
   110ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   110bc:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t *ODdata = (uint8_t*)SDO->ODF_arg.ODdataStorage;
   110be:	687b      	ldr	r3, [r7, #4]
   110c0:	681b      	ldr	r3, [r3, #0]
   110c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   110c4:	623b      	str	r3, [r7, #32]
    uint32_t length = SDO->ODF_arg.dataLength;
   110c6:	687b      	ldr	r3, [r7, #4]
   110c8:	681b      	ldr	r3, [r3, #0]
   110ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   110cc:	61fb      	str	r3, [r7, #28]
    CO_OD_extension_t *ext = 0;
   110ce:	2300      	movs	r3, #0
   110d0:	61bb      	str	r3, [r7, #24]

    /* is object readable? */
    if((SDO->ODF_arg.attribute & CO_ODA_READABLE) == 0)
   110d2:	687b      	ldr	r3, [r7, #4]
   110d4:	681b      	ldr	r3, [r3, #0]
   110d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   110d8:	f003 0304 	and.w	r3, r3, #4
   110dc:	2b00      	cmp	r3, #0
   110de:	d101      	bne.n	110e4 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x38>
        return CO_SDO_AB_WRITEONLY;     /* attempt to read a write-only object */
   110e0:	4b38      	ldr	r3, [pc, #224]	; (111c4 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x118>)
   110e2:	e06b      	b.n	111bc <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x110>

    /* find extension */
    if(SDO->ODExtensions != NULL){
   110e4:	687b      	ldr	r3, [r7, #4]
   110e6:	681b      	ldr	r3, [r3, #0]
   110e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   110ea:	2b00      	cmp	r3, #0
   110ec:	d00b      	beq.n	11106 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x5a>
        ext = &SDO->ODExtensions[SDO->entryNo];
   110ee:	687b      	ldr	r3, [r7, #4]
   110f0:	681b      	ldr	r3, [r3, #0]
   110f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
   110f4:	687b      	ldr	r3, [r7, #4]
   110f6:	681b      	ldr	r3, [r3, #0]
   110f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   110fa:	4613      	mov	r3, r2
   110fc:	005b      	lsls	r3, r3, #1
   110fe:	4413      	add	r3, r2
   11100:	009b      	lsls	r3, r3, #2
   11102:	440b      	add	r3, r1
   11104:	61bb      	str	r3, [r7, #24]
    }

    /* copy data from OD to SDO buffer if not domain */
    if(ODdata != NULL){
   11106:	6a3b      	ldr	r3, [r7, #32]
   11108:	2b00      	cmp	r3, #0
   1110a:	d01e      	beq.n	1114a <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x9e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1110c:	f3ef 8310 	mrs	r3, PRIMASK
   11110:	60bb      	str	r3, [r7, #8]
  return(result);
   11112:	68bb      	ldr	r3, [r7, #8]
        CO_LOCK_OD();
   11114:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
   11116:	b672      	cpsid	i
        while(length--) *(SDObuffer++) = *(ODdata++);
   11118:	69fb      	ldr	r3, [r7, #28]
   1111a:	1e5a      	subs	r2, r3, #1
   1111c:	61fa      	str	r2, [r7, #28]
   1111e:	2b00      	cmp	r3, #0
   11120:	bf14      	ite	ne
   11122:	2301      	movne	r3, #1
   11124:	2300      	moveq	r3, #0
   11126:	b2db      	uxtb	r3, r3
   11128:	2b00      	cmp	r3, #0
   1112a:	d008      	beq.n	1113e <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x92>
   1112c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1112e:	1c5a      	adds	r2, r3, #1
   11130:	627a      	str	r2, [r7, #36]	; 0x24
   11132:	6a3a      	ldr	r2, [r7, #32]
   11134:	1c51      	adds	r1, r2, #1
   11136:	6239      	str	r1, [r7, #32]
   11138:	7812      	ldrb	r2, [r2, #0]
   1113a:	701a      	strb	r2, [r3, #0]
   1113c:	e7ec      	b.n	11118 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x6c>
   1113e:	697b      	ldr	r3, [r7, #20]
   11140:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   11142:	68fb      	ldr	r3, [r7, #12]
   11144:	f383 8810 	msr	PRIMASK, r3
   11148:	e005      	b.n	11156 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0xaa>
        CO_UNLOCK_OD();
    }
    /* if domain, Object dictionary function MUST exist */
    else{
        if(ext->pODFunc == NULL){
   1114a:	69bb      	ldr	r3, [r7, #24]
   1114c:	681b      	ldr	r3, [r3, #0]
   1114e:	2b00      	cmp	r3, #0
   11150:	d101      	bne.n	11156 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0xaa>
            return CO_SDO_AB_DEVICE_INCOMPAT;     /* general internal incompatibility in the device */
   11152:	4b1d      	ldr	r3, [pc, #116]	; (111c8 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x11c>)
   11154:	e032      	b.n	111bc <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x110>
        }
    }

    /* call Object dictionary function if registered */
    SDO->ODF_arg.reading = true;
   11156:	687b      	ldr	r3, [r7, #4]
   11158:	681b      	ldr	r3, [r3, #0]
   1115a:	2201      	movs	r2, #1
   1115c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if(ext->pODFunc != NULL){
   11160:	69bb      	ldr	r3, [r7, #24]
   11162:	681b      	ldr	r3, [r3, #0]
   11164:	2b00      	cmp	r3, #0
   11166:	d019      	beq.n	1119c <_ZN12CO_SDO_Class13CO_SDO_readODEm+0xf0>
        uint32_t abortCode = ext->pODFunc(&SDO->ODF_arg);
   11168:	69bb      	ldr	r3, [r7, #24]
   1116a:	681b      	ldr	r3, [r3, #0]
   1116c:	687a      	ldr	r2, [r7, #4]
   1116e:	6812      	ldr	r2, [r2, #0]
   11170:	3240      	adds	r2, #64	; 0x40
   11172:	4610      	mov	r0, r2
   11174:	4798      	blx	r3
   11176:	6138      	str	r0, [r7, #16]
        if(abortCode != 0U){
   11178:	693b      	ldr	r3, [r7, #16]
   1117a:	2b00      	cmp	r3, #0
   1117c:	d001      	beq.n	11182 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0xd6>
            return abortCode;
   1117e:	693b      	ldr	r3, [r7, #16]
   11180:	e01c      	b.n	111bc <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x110>
        }

        /* dataLength (upadted by pODFunc) must be inside limits */
        if((SDO->ODF_arg.dataLength == 0U) || (SDO->ODF_arg.dataLength > SDOBufferSize)){
   11182:	687b      	ldr	r3, [r7, #4]
   11184:	681b      	ldr	r3, [r3, #0]
   11186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   11188:	2b00      	cmp	r3, #0
   1118a:	d005      	beq.n	11198 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0xec>
   1118c:	687b      	ldr	r3, [r7, #4]
   1118e:	681b      	ldr	r3, [r3, #0]
   11190:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   11192:	683b      	ldr	r3, [r7, #0]
   11194:	429a      	cmp	r2, r3
   11196:	d901      	bls.n	1119c <_ZN12CO_SDO_Class13CO_SDO_readODEm+0xf0>
            return CO_SDO_AB_DEVICE_INCOMPAT;     /* general internal incompatibility in the device */
   11198:	4b0b      	ldr	r3, [pc, #44]	; (111c8 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x11c>)
   1119a:	e00f      	b.n	111bc <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x110>
        }
    }
    SDO->ODF_arg.offset += SDO->ODF_arg.dataLength;
   1119c:	687b      	ldr	r3, [r7, #4]
   1119e:	681b      	ldr	r3, [r3, #0]
   111a0:	687a      	ldr	r2, [r7, #4]
   111a2:	6812      	ldr	r2, [r2, #0]
   111a4:	6e51      	ldr	r1, [r2, #100]	; 0x64
   111a6:	687a      	ldr	r2, [r7, #4]
   111a8:	6812      	ldr	r2, [r2, #0]
   111aa:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   111ac:	440a      	add	r2, r1
   111ae:	665a      	str	r2, [r3, #100]	; 0x64
    SDO->ODF_arg.firstSegment = false;
   111b0:	687b      	ldr	r3, [r7, #4]
   111b2:	681b      	ldr	r3, [r3, #0]
   111b4:	2200      	movs	r2, #0
   111b6:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
            *(buf2--) = b;
        }
    }
#endif

    return 0U;
   111ba:	2300      	movs	r3, #0
}
   111bc:	4618      	mov	r0, r3
   111be:	3728      	adds	r7, #40	; 0x28
   111c0:	46bd      	mov	sp, r7
   111c2:	bd80      	pop	{r7, pc}
   111c4:	06010001 	.word	0x06010001
   111c8:	06040047 	.word	0x06040047

000111cc <_ZN12CO_SDO_Class14CO_SDO_writeODEm>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_SDO_writeOD(uint32_t length){
   111cc:	b580      	push	{r7, lr}
   111ce:	b08a      	sub	sp, #40	; 0x28
   111d0:	af00      	add	r7, sp, #0
   111d2:	6078      	str	r0, [r7, #4]
   111d4:	6039      	str	r1, [r7, #0]
    uint8_t *SDObuffer = SDO->ODF_arg.data;
   111d6:	687b      	ldr	r3, [r7, #4]
   111d8:	681b      	ldr	r3, [r3, #0]
   111da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   111dc:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t *ODdata = (uint8_t*)SDO->ODF_arg.ODdataStorage;
   111de:	687b      	ldr	r3, [r7, #4]
   111e0:	681b      	ldr	r3, [r3, #0]
   111e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   111e4:	623b      	str	r3, [r7, #32]
    bool_t exception_1003 = false;
   111e6:	2300      	movs	r3, #0
   111e8:	77fb      	strb	r3, [r7, #31]

    /* is object writeable? */
    if((SDO->ODF_arg.attribute & CO_ODA_WRITEABLE) == 0){
   111ea:	687b      	ldr	r3, [r7, #4]
   111ec:	681b      	ldr	r3, [r3, #0]
   111ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   111f0:	f003 0308 	and.w	r3, r3, #8
   111f4:	2b00      	cmp	r3, #0
   111f6:	d101      	bne.n	111fc <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x30>
        return CO_SDO_AB_READONLY;     /* attempt to write a read-only object */
   111f8:	4b3f      	ldr	r3, [pc, #252]	; (112f8 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x12c>)
   111fa:	e079      	b.n	112f0 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x124>
    }

    /* length of domain data is application specific and not verified */
    if(ODdata == 0){
   111fc:	6a3b      	ldr	r3, [r7, #32]
   111fe:	2b00      	cmp	r3, #0
   11200:	d104      	bne.n	1120c <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x40>
        SDO->ODF_arg.dataLength = length;
   11202:	687b      	ldr	r3, [r7, #4]
   11204:	681b      	ldr	r3, [r3, #0]
   11206:	683a      	ldr	r2, [r7, #0]
   11208:	64da      	str	r2, [r3, #76]	; 0x4c
   1120a:	e007      	b.n	1121c <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x50>
    }

    /* verify length except for domain data type */
    else if(SDO->ODF_arg.dataLength != length){
   1120c:	687b      	ldr	r3, [r7, #4]
   1120e:	681b      	ldr	r3, [r3, #0]
   11210:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   11212:	683b      	ldr	r3, [r7, #0]
   11214:	429a      	cmp	r2, r3
   11216:	d001      	beq.n	1121c <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x50>
        return CO_SDO_AB_TYPE_MISMATCH;     /* Length of service parameter does not match */
   11218:	4b38      	ldr	r3, [pc, #224]	; (112fc <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x130>)
   1121a:	e069      	b.n	112f0 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x124>
        }
    }
#endif

    /* call Object dictionary function if registered */
    SDO->ODF_arg.reading = false;
   1121c:	687b      	ldr	r3, [r7, #4]
   1121e:	681b      	ldr	r3, [r3, #0]
   11220:	2200      	movs	r2, #0
   11222:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if(SDO->ODExtensions != NULL){
   11226:	687b      	ldr	r3, [r7, #4]
   11228:	681b      	ldr	r3, [r3, #0]
   1122a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1122c:	2b00      	cmp	r3, #0
   1122e:	d01c      	beq.n	1126a <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x9e>
        CO_OD_extension_t *ext = &SDO->ODExtensions[SDO->entryNo];
   11230:	687b      	ldr	r3, [r7, #4]
   11232:	681b      	ldr	r3, [r3, #0]
   11234:	6b59      	ldr	r1, [r3, #52]	; 0x34
   11236:	687b      	ldr	r3, [r7, #4]
   11238:	681b      	ldr	r3, [r3, #0]
   1123a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1123c:	4613      	mov	r3, r2
   1123e:	005b      	lsls	r3, r3, #1
   11240:	4413      	add	r3, r2
   11242:	009b      	lsls	r3, r3, #2
   11244:	440b      	add	r3, r1
   11246:	61bb      	str	r3, [r7, #24]

        if(ext->pODFunc != NULL){
   11248:	69bb      	ldr	r3, [r7, #24]
   1124a:	681b      	ldr	r3, [r3, #0]
   1124c:	2b00      	cmp	r3, #0
   1124e:	d00c      	beq.n	1126a <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x9e>
            uint32_t abortCode = ext->pODFunc(&SDO->ODF_arg);
   11250:	69bb      	ldr	r3, [r7, #24]
   11252:	681b      	ldr	r3, [r3, #0]
   11254:	687a      	ldr	r2, [r7, #4]
   11256:	6812      	ldr	r2, [r2, #0]
   11258:	3240      	adds	r2, #64	; 0x40
   1125a:	4610      	mov	r0, r2
   1125c:	4798      	blx	r3
   1125e:	6178      	str	r0, [r7, #20]
            if(abortCode != 0U){
   11260:	697b      	ldr	r3, [r7, #20]
   11262:	2b00      	cmp	r3, #0
   11264:	d001      	beq.n	1126a <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x9e>
                return abortCode;
   11266:	697b      	ldr	r3, [r7, #20]
   11268:	e042      	b.n	112f0 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x124>
            }
        }
    }
    SDO->ODF_arg.offset += SDO->ODF_arg.dataLength;
   1126a:	687b      	ldr	r3, [r7, #4]
   1126c:	681b      	ldr	r3, [r3, #0]
   1126e:	687a      	ldr	r2, [r7, #4]
   11270:	6812      	ldr	r2, [r2, #0]
   11272:	6e51      	ldr	r1, [r2, #100]	; 0x64
   11274:	687a      	ldr	r2, [r7, #4]
   11276:	6812      	ldr	r2, [r2, #0]
   11278:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   1127a:	440a      	add	r2, r1
   1127c:	665a      	str	r2, [r3, #100]	; 0x64
    SDO->ODF_arg.firstSegment = false;
   1127e:	687b      	ldr	r3, [r7, #4]
   11280:	681b      	ldr	r3, [r3, #0]
   11282:	2200      	movs	r2, #0
   11284:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e

    /* Special exception: 1003,00 is writable from network, but not in OD  */
    if(SDO->ODF_arg.index == 0x1003 && SDO->ODF_arg.subIndex == 0) {
   11288:	687b      	ldr	r3, [r7, #4]
   1128a:	681b      	ldr	r3, [r3, #0]
   1128c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   1128e:	f241 0203 	movw	r2, #4099	; 0x1003
   11292:	4293      	cmp	r3, r2
   11294:	d107      	bne.n	112a6 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0xda>
   11296:	687b      	ldr	r3, [r7, #4]
   11298:	681b      	ldr	r3, [r3, #0]
   1129a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
   1129e:	2b00      	cmp	r3, #0
   112a0:	d101      	bne.n	112a6 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0xda>
        exception_1003 = true;
   112a2:	2301      	movs	r3, #1
   112a4:	77fb      	strb	r3, [r7, #31]
    }

    /* copy data from SDO buffer to OD if not domain */
    if(ODdata != NULL && exception_1003 == false){
   112a6:	6a3b      	ldr	r3, [r7, #32]
   112a8:	2b00      	cmp	r3, #0
   112aa:	d020      	beq.n	112ee <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x122>
   112ac:	7ffb      	ldrb	r3, [r7, #31]
   112ae:	2b00      	cmp	r3, #0
   112b0:	d11d      	bne.n	112ee <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x122>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   112b2:	f3ef 8310 	mrs	r3, PRIMASK
   112b6:	60bb      	str	r3, [r7, #8]
  return(result);
   112b8:	68bb      	ldr	r3, [r7, #8]
        CO_LOCK_OD();
   112ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
   112bc:	b672      	cpsid	i
        while(length--){
   112be:	683b      	ldr	r3, [r7, #0]
   112c0:	1e5a      	subs	r2, r3, #1
   112c2:	603a      	str	r2, [r7, #0]
   112c4:	2b00      	cmp	r3, #0
   112c6:	bf14      	ite	ne
   112c8:	2301      	movne	r3, #1
   112ca:	2300      	moveq	r3, #0
   112cc:	b2db      	uxtb	r3, r3
   112ce:	2b00      	cmp	r3, #0
   112d0:	d008      	beq.n	112e4 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x118>
            *(ODdata++) = *(SDObuffer++);
   112d2:	6a3b      	ldr	r3, [r7, #32]
   112d4:	1c5a      	adds	r2, r3, #1
   112d6:	623a      	str	r2, [r7, #32]
   112d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   112da:	1c51      	adds	r1, r2, #1
   112dc:	6279      	str	r1, [r7, #36]	; 0x24
   112de:	7812      	ldrb	r2, [r2, #0]
   112e0:	701a      	strb	r2, [r3, #0]
        while(length--){
   112e2:	e7ec      	b.n	112be <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0xf2>
   112e4:	693b      	ldr	r3, [r7, #16]
   112e6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   112e8:	68fb      	ldr	r3, [r7, #12]
   112ea:	f383 8810 	msr	PRIMASK, r3
        }
        CO_UNLOCK_OD();
    }

    return 0;
   112ee:	2300      	movs	r3, #0
}
   112f0:	4618      	mov	r0, r3
   112f2:	3728      	adds	r7, #40	; 0x28
   112f4:	46bd      	mov	sp, r7
   112f6:	bd80      	pop	{r7, pc}
   112f8:	06010002 	.word	0x06010002
   112fc:	06070010 	.word	0x06070010

00011300 <_ZL12CO_SDO_abortP8CO_SDO_tm>:


/******************************************************************************/
static void CO_SDO_abort(CO_SDO_t *SDO,uint32_t code){
   11300:	b580      	push	{r7, lr}
   11302:	b082      	sub	sp, #8
   11304:	af00      	add	r7, sp, #0
   11306:	6078      	str	r0, [r7, #4]
   11308:	6039      	str	r1, [r7, #0]
    SDO->CANtxBuff->data[0] = 0x80;
   1130a:	687b      	ldr	r3, [r7, #4]
   1130c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11310:	2280      	movs	r2, #128	; 0x80
   11312:	715a      	strb	r2, [r3, #5]
    SDO->CANtxBuff->data[1] = SDO->ODF_arg.index & 0xFF;
   11314:	687b      	ldr	r3, [r7, #4]
   11316:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   1131a:	687a      	ldr	r2, [r7, #4]
   1131c:	6d92      	ldr	r2, [r2, #88]	; 0x58
   1131e:	b2d2      	uxtb	r2, r2
   11320:	719a      	strb	r2, [r3, #6]
    SDO->CANtxBuff->data[2] = (SDO->ODF_arg.index>>8) & 0xFF;
   11322:	687b      	ldr	r3, [r7, #4]
   11324:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11328:	687a      	ldr	r2, [r7, #4]
   1132a:	6d92      	ldr	r2, [r2, #88]	; 0x58
   1132c:	0a12      	lsrs	r2, r2, #8
   1132e:	b2d2      	uxtb	r2, r2
   11330:	71da      	strb	r2, [r3, #7]
    SDO->CANtxBuff->data[3] = SDO->ODF_arg.subIndex;
   11332:	687b      	ldr	r3, [r7, #4]
   11334:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11338:	687a      	ldr	r2, [r7, #4]
   1133a:	f892 205c 	ldrb.w	r2, [r2, #92]	; 0x5c
   1133e:	721a      	strb	r2, [r3, #8]
   ptrCODriverClass->CO_memcpySwap4(&SDO->CANtxBuff->data[4], &code);
   11340:	4b0f      	ldr	r3, [pc, #60]	; (11380 <_ZL12CO_SDO_abortP8CO_SDO_tm+0x80>)
   11342:	681b      	ldr	r3, [r3, #0]
   11344:	1d18      	adds	r0, r3, #4
   11346:	687b      	ldr	r3, [r7, #4]
   11348:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   1134c:	3309      	adds	r3, #9
   1134e:	463a      	mov	r2, r7
   11350:	4619      	mov	r1, r3
   11352:	4b0c      	ldr	r3, [pc, #48]	; (11384 <_ZL12CO_SDO_abortP8CO_SDO_tm+0x84>)
   11354:	4798      	blx	r3
    SDO->state = CO_SDO_ST_IDLE;
   11356:	687b      	ldr	r3, [r7, #4]
   11358:	2200      	movs	r2, #0
   1135a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    SDO->CANrxNew = false;
   1135e:	687b      	ldr	r3, [r7, #4]
   11360:	2200      	movs	r2, #0
   11362:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
    ptrCODriverClass->CAN_Send(SDO->CANtxBuff);
   11366:	4b06      	ldr	r3, [pc, #24]	; (11380 <_ZL12CO_SDO_abortP8CO_SDO_tm+0x80>)
   11368:	681a      	ldr	r2, [r3, #0]
   1136a:	687b      	ldr	r3, [r7, #4]
   1136c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11370:	4619      	mov	r1, r3
   11372:	4610      	mov	r0, r2
   11374:	4b04      	ldr	r3, [pc, #16]	; (11388 <_ZL12CO_SDO_abortP8CO_SDO_tm+0x88>)
   11376:	4798      	blx	r3
}
   11378:	bf00      	nop
   1137a:	3708      	adds	r7, #8
   1137c:	46bd      	mov	sp, r7
   1137e:	bd80      	pop	{r7, pc}
   11380:	20001a7c 	.word	0x20001a7c
   11384:	000107dd 	.word	0x000107dd
   11388:	0000dc1d 	.word	0x0000dc1d

0001138c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm>:
int8_t CO_SDO_Class::CO_SDO_process(
         bool_t                  NMTisPreOrOperational,
        uint32_t                timeDifference_ms,
        uint32_t                SDOtimeoutTime,
        uint32_t               *timerNext_ms)
{
   1138c:	b5b0      	push	{r4, r5, r7, lr}
   1138e:	b092      	sub	sp, #72	; 0x48
   11390:	af00      	add	r7, sp, #0
   11392:	60f8      	str	r0, [r7, #12]
   11394:	607a      	str	r2, [r7, #4]
   11396:	603b      	str	r3, [r7, #0]
   11398:	460b      	mov	r3, r1
   1139a:	72fb      	strb	r3, [r7, #11]
    CO_SDO_state_t state = CO_SDO_ST_IDLE;
   1139c:	2300      	movs	r3, #0
   1139e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    bool_t timeoutSubblockDownolad = false;
   113a2:	2300      	movs	r3, #0
   113a4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    bool_t sendResponse = false;
   113a8:	2300      	movs	r3, #0
   113aa:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	
    /* return if idle */
    if((SDO->state == CO_SDO_ST_IDLE) && (!SDO->CANrxNew)){
   113ae:	68fb      	ldr	r3, [r7, #12]
   113b0:	681b      	ldr	r3, [r3, #0]
   113b2:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   113b6:	2b00      	cmp	r3, #0
   113b8:	d108      	bne.n	113cc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x40>
   113ba:	68fb      	ldr	r3, [r7, #12]
   113bc:	681b      	ldr	r3, [r3, #0]
   113be:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
   113c2:	2b00      	cmp	r3, #0
   113c4:	d102      	bne.n	113cc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x40>
	//	printf("CO_SDO_ST_IDLE\n\r");
        return 0;
   113c6:	2300      	movs	r3, #0
   113c8:	f001 b976 	b.w	126b8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
    }

    /* SDO is allowed to work only in operational or pre-operational NMT state */
    if(!NMTisPreOrOperational){
   113cc:	7afb      	ldrb	r3, [r7, #11]
   113ce:	2b00      	cmp	r3, #0
   113d0:	d10c      	bne.n	113ec <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x60>
        SDO->state = CO_SDO_ST_IDLE;
   113d2:	68fb      	ldr	r3, [r7, #12]
   113d4:	681b      	ldr	r3, [r3, #0]
   113d6:	2200      	movs	r2, #0
   113d8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        SDO->CANrxNew = false;
   113dc:	68fb      	ldr	r3, [r7, #12]
   113de:	681b      	ldr	r3, [r3, #0]
   113e0:	2200      	movs	r2, #0
   113e2:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	//	printf("!NMTisPreOrOperational\n\r");
        return 0;
   113e6:	2300      	movs	r3, #0
   113e8:	f001 b966 	b.w	126b8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
    }

    /* Is something new to process? */
    if((!SDO->CANtxBuff->bufferFull) && ((SDO->CANrxNew) || (SDO->state == CO_SDO_ST_UPLOAD_BL_SUBBLOCK))){
   113ec:	68fb      	ldr	r3, [r7, #12]
   113ee:	681b      	ldr	r3, [r3, #0]
   113f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   113f4:	7b5b      	ldrb	r3, [r3, #13]
   113f6:	b2db      	uxtb	r3, r3
   113f8:	2b00      	cmp	r3, #0
   113fa:	d10d      	bne.n	11418 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x8c>
   113fc:	68fb      	ldr	r3, [r7, #12]
   113fe:	681b      	ldr	r3, [r3, #0]
   11400:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
   11404:	2b00      	cmp	r3, #0
   11406:	d105      	bne.n	11414 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x88>
   11408:	68fb      	ldr	r3, [r7, #12]
   1140a:	681b      	ldr	r3, [r3, #0]
   1140c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   11410:	2b26      	cmp	r3, #38	; 0x26
   11412:	d101      	bne.n	11418 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x8c>
   11414:	2301      	movs	r3, #1
   11416:	e000      	b.n	1141a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x8e>
   11418:	2300      	movs	r3, #0
   1141a:	2b00      	cmp	r3, #0
   1141c:	f000 80eb 	beq.w	115f6 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x26a>
        uint8_t CCS = SDO->CANrxData[0] >> 5;   /* Client command specifier */
   11420:	68fb      	ldr	r3, [r7, #12]
   11422:	681b      	ldr	r3, [r3, #0]
   11424:	781b      	ldrb	r3, [r3, #0]
   11426:	115b      	asrs	r3, r3, #5
   11428:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		//printf("Is something new to process\n\r");
        /* reset timeout */
        if(SDO->state != CO_SDO_ST_UPLOAD_BL_SUBBLOCK)
   1142c:	68fb      	ldr	r3, [r7, #12]
   1142e:	681b      	ldr	r3, [r3, #0]
   11430:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   11434:	2b26      	cmp	r3, #38	; 0x26
   11436:	d003      	beq.n	11440 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xb4>
            SDO->timeoutTimer = 0;
   11438:	68fb      	ldr	r3, [r7, #12]
   1143a:	681b      	ldr	r3, [r3, #0]
   1143c:	2200      	movs	r2, #0
   1143e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* clear response buffer */
        SDO->CANtxBuff->data[0] = SDO->CANtxBuff->data[1] = SDO->CANtxBuff->data[2] = SDO->CANtxBuff->data[3] = 0;
   11440:	68fb      	ldr	r3, [r7, #12]
   11442:	681b      	ldr	r3, [r3, #0]
   11444:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   11448:	68fb      	ldr	r3, [r7, #12]
   1144a:	681b      	ldr	r3, [r3, #0]
   1144c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11450:	68fa      	ldr	r2, [r7, #12]
   11452:	6812      	ldr	r2, [r2, #0]
   11454:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
   11458:	68f9      	ldr	r1, [r7, #12]
   1145a:	6809      	ldr	r1, [r1, #0]
   1145c:	f8d1 1084 	ldr.w	r1, [r1, #132]	; 0x84
   11460:	2400      	movs	r4, #0
   11462:	720c      	strb	r4, [r1, #8]
   11464:	7a09      	ldrb	r1, [r1, #8]
   11466:	71d1      	strb	r1, [r2, #7]
   11468:	79d2      	ldrb	r2, [r2, #7]
   1146a:	719a      	strb	r2, [r3, #6]
   1146c:	799b      	ldrb	r3, [r3, #6]
   1146e:	7143      	strb	r3, [r0, #5]
        SDO->CANtxBuff->data[4] = SDO->CANtxBuff->data[5] = SDO->CANtxBuff->data[6] = SDO->CANtxBuff->data[7] = 0;
   11470:	68fb      	ldr	r3, [r7, #12]
   11472:	681b      	ldr	r3, [r3, #0]
   11474:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   11478:	68fb      	ldr	r3, [r7, #12]
   1147a:	681b      	ldr	r3, [r3, #0]
   1147c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11480:	68fa      	ldr	r2, [r7, #12]
   11482:	6812      	ldr	r2, [r2, #0]
   11484:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
   11488:	68f9      	ldr	r1, [r7, #12]
   1148a:	6809      	ldr	r1, [r1, #0]
   1148c:	f8d1 1084 	ldr.w	r1, [r1, #132]	; 0x84
   11490:	2400      	movs	r4, #0
   11492:	730c      	strb	r4, [r1, #12]
   11494:	7b09      	ldrb	r1, [r1, #12]
   11496:	72d1      	strb	r1, [r2, #11]
   11498:	7ad2      	ldrb	r2, [r2, #11]
   1149a:	729a      	strb	r2, [r3, #10]
   1149c:	7a9b      	ldrb	r3, [r3, #10]
   1149e:	7243      	strb	r3, [r0, #9]

        /* Is abort from client? */
        if((SDO->CANrxNew) && (SDO->CANrxData[0] == CCS_ABORT)){
   114a0:	68fb      	ldr	r3, [r7, #12]
   114a2:	681b      	ldr	r3, [r3, #0]
   114a4:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
   114a8:	2b00      	cmp	r3, #0
   114aa:	d012      	beq.n	114d2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x146>
   114ac:	68fb      	ldr	r3, [r7, #12]
   114ae:	681b      	ldr	r3, [r3, #0]
   114b0:	781b      	ldrb	r3, [r3, #0]
   114b2:	2b04      	cmp	r3, #4
   114b4:	d10d      	bne.n	114d2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x146>
            SDO->state = CO_SDO_ST_IDLE;
   114b6:	68fb      	ldr	r3, [r7, #12]
   114b8:	681b      	ldr	r3, [r3, #0]
   114ba:	2200      	movs	r2, #0
   114bc:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            SDO->CANrxNew = false;
   114c0:	68fb      	ldr	r3, [r7, #12]
   114c2:	681b      	ldr	r3, [r3, #0]
   114c4:	2200      	movs	r2, #0
   114c6:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
            return -1;
   114ca:	f04f 33ff 	mov.w	r3, #4294967295
   114ce:	f001 b8f3 	b.w	126b8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
        }

        /* continue with previous SDO communication or start new */
        if(SDO->state != CO_SDO_ST_IDLE){
   114d2:	68fb      	ldr	r3, [r7, #12]
   114d4:	681b      	ldr	r3, [r3, #0]
   114d6:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   114da:	2b00      	cmp	r3, #0
   114dc:	d006      	beq.n	114ec <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x160>
            state = SDO->state;
   114de:	68fb      	ldr	r3, [r7, #12]
   114e0:	681b      	ldr	r3, [r3, #0]
   114e2:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   114e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   114ea:	e084      	b.n	115f6 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x26a>
        else{
            uint32_t abortCode;
            uint32_t index;
			
            /* Is client command specifier valid */
            if((CCS != CCS_DOWNLOAD_INITIATE) && (CCS != CCS_UPLOAD_INITIATE) &&
   114ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   114f0:	2b01      	cmp	r3, #1
   114f2:	d015      	beq.n	11520 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x194>
   114f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   114f8:	2b02      	cmp	r3, #2
   114fa:	d011      	beq.n	11520 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x194>
   114fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   11500:	2b06      	cmp	r3, #6
   11502:	d00d      	beq.n	11520 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x194>
                (CCS != CCS_DOWNLOAD_BLOCK) && (CCS != CCS_UPLOAD_BLOCK)){
   11504:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   11508:	2b05      	cmp	r3, #5
   1150a:	d009      	beq.n	11520 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x194>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
   1150c:	68fb      	ldr	r3, [r7, #12]
   1150e:	681b      	ldr	r3, [r3, #0]
   11510:	4992      	ldr	r1, [pc, #584]	; (1175c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3d0>)
   11512:	4618      	mov	r0, r3
   11514:	4b92      	ldr	r3, [pc, #584]	; (11760 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3d4>)
   11516:	4798      	blx	r3
                return -1;
   11518:	f04f 33ff 	mov.w	r3, #4294967295
   1151c:	f001 b8cc 	b.w	126b8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            /* init ODF_arg */
            index = SDO->CANrxData[2];
   11520:	68fb      	ldr	r3, [r7, #12]
   11522:	681b      	ldr	r3, [r3, #0]
   11524:	789b      	ldrb	r3, [r3, #2]
   11526:	633b      	str	r3, [r7, #48]	; 0x30
            index = index << 8 | SDO->CANrxData[1];
   11528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1152a:	021b      	lsls	r3, r3, #8
   1152c:	68fa      	ldr	r2, [r7, #12]
   1152e:	6812      	ldr	r2, [r2, #0]
   11530:	7852      	ldrb	r2, [r2, #1]
   11532:	4313      	orrs	r3, r2
   11534:	633b      	str	r3, [r7, #48]	; 0x30
            abortCode = CO_SDO_initTransfer( index, SDO->CANrxData[3]);
   11536:	68fb      	ldr	r3, [r7, #12]
   11538:	681b      	ldr	r3, [r3, #0]
   1153a:	78db      	ldrb	r3, [r3, #3]
   1153c:	461a      	mov	r2, r3
   1153e:	6b39      	ldr	r1, [r7, #48]	; 0x30
   11540:	68f8      	ldr	r0, [r7, #12]
   11542:	4b88      	ldr	r3, [pc, #544]	; (11764 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3d8>)
   11544:	4798      	blx	r3
   11546:	62f8      	str	r0, [r7, #44]	; 0x2c
            if(abortCode != 0U){
   11548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1154a:	2b00      	cmp	r3, #0
   1154c:	d009      	beq.n	11562 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1d6>
                CO_SDO_abort(SDO, abortCode);
   1154e:	68fb      	ldr	r3, [r7, #12]
   11550:	681b      	ldr	r3, [r3, #0]
   11552:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   11554:	4618      	mov	r0, r3
   11556:	4b82      	ldr	r3, [pc, #520]	; (11760 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3d4>)
   11558:	4798      	blx	r3
                return -1;
   1155a:	f04f 33ff 	mov.w	r3, #4294967295
   1155e:	f001 b8ab 	b.w	126b8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            /* download */
            if((CCS == CCS_DOWNLOAD_INITIATE) || (CCS == CCS_DOWNLOAD_BLOCK)){
   11562:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   11566:	2b01      	cmp	r3, #1
   11568:	d003      	beq.n	11572 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1e6>
   1156a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   1156e:	2b06      	cmp	r3, #6
   11570:	d11c      	bne.n	115ac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x220>
                if((SDO->ODF_arg.attribute & CO_ODA_WRITEABLE) == 0U){
   11572:	68fb      	ldr	r3, [r7, #12]
   11574:	681b      	ldr	r3, [r3, #0]
   11576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   11578:	f003 0308 	and.w	r3, r3, #8
   1157c:	2b00      	cmp	r3, #0
   1157e:	d109      	bne.n	11594 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x208>
                    CO_SDO_abort(SDO, CO_SDO_AB_READONLY); /* attempt to write a read-only object */
   11580:	68fb      	ldr	r3, [r7, #12]
   11582:	681b      	ldr	r3, [r3, #0]
   11584:	4978      	ldr	r1, [pc, #480]	; (11768 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3dc>)
   11586:	4618      	mov	r0, r3
   11588:	4b75      	ldr	r3, [pc, #468]	; (11760 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3d4>)
   1158a:	4798      	blx	r3
                    return -1;
   1158c:	f04f 33ff 	mov.w	r3, #4294967295
   11590:	f001 b892 	b.w	126b8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                }

                /* set state machine to normal or block download */
                if(CCS == CCS_DOWNLOAD_INITIATE){
   11594:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   11598:	2b01      	cmp	r3, #1
   1159a:	d103      	bne.n	115a4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x218>
                    state = CO_SDO_ST_DOWNLOAD_INITIATE;
   1159c:	2311      	movs	r3, #17
   1159e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                if(CCS == CCS_DOWNLOAD_INITIATE){
   115a2:	e028      	b.n	115f6 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x26a>
                }
                else{
                    state = CO_SDO_ST_DOWNLOAD_BL_INITIATE;
   115a4:	2314      	movs	r3, #20
   115a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                if(CCS == CCS_DOWNLOAD_INITIATE){
   115aa:	e024      	b.n	115f6 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x26a>
                }
            }

            /* upload */
            else{
                abortCode = CO_SDO_readOD( CO_SDO_BUFFER_SIZE);
   115ac:	2120      	movs	r1, #32
   115ae:	68f8      	ldr	r0, [r7, #12]
   115b0:	4b6e      	ldr	r3, [pc, #440]	; (1176c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3e0>)
   115b2:	4798      	blx	r3
   115b4:	62f8      	str	r0, [r7, #44]	; 0x2c
                if(abortCode != 0U){
   115b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   115b8:	2b00      	cmp	r3, #0
   115ba:	d009      	beq.n	115d0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x244>
                    CO_SDO_abort(SDO, abortCode);
   115bc:	68fb      	ldr	r3, [r7, #12]
   115be:	681b      	ldr	r3, [r3, #0]
   115c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   115c2:	4618      	mov	r0, r3
   115c4:	4b66      	ldr	r3, [pc, #408]	; (11760 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3d4>)
   115c6:	4798      	blx	r3
                    return -1;
   115c8:	f04f 33ff 	mov.w	r3, #4294967295
   115cc:	f001 b874 	b.w	126b8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                }

                /* if data size is large enough set state machine to block upload, otherwise set to normal transfer */
                if((CCS == CCS_UPLOAD_BLOCK) && (SDO->ODF_arg.dataLength > SDO->CANrxData[5])){
   115d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   115d4:	2b05      	cmp	r3, #5
   115d6:	d10b      	bne.n	115f0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x264>
   115d8:	68fb      	ldr	r3, [r7, #12]
   115da:	681b      	ldr	r3, [r3, #0]
   115dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   115de:	68fa      	ldr	r2, [r7, #12]
   115e0:	6812      	ldr	r2, [r2, #0]
   115e2:	7952      	ldrb	r2, [r2, #5]
   115e4:	4293      	cmp	r3, r2
   115e6:	d903      	bls.n	115f0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x264>
                    state = CO_SDO_ST_UPLOAD_BL_INITIATE;
   115e8:	2324      	movs	r3, #36	; 0x24
   115ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   115ee:	e002      	b.n	115f6 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x26a>
                }
                else{
                    state = CO_SDO_ST_UPLOAD_INITIATE;
   115f0:	2321      	movs	r3, #33	; 0x21
   115f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            }
        }
    }

    /* verify SDO timeout */
    if(SDO->timeoutTimer < SDOtimeoutTime){
   115f6:	68fb      	ldr	r3, [r7, #12]
   115f8:	681b      	ldr	r3, [r3, #0]
   115fa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   115fc:	683b      	ldr	r3, [r7, #0]
   115fe:	429a      	cmp	r2, r3
   11600:	d207      	bcs.n	11612 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x286>
        SDO->timeoutTimer += timeDifference_ms;
   11602:	68fb      	ldr	r3, [r7, #12]
   11604:	681b      	ldr	r3, [r3, #0]
   11606:	68fa      	ldr	r2, [r7, #12]
   11608:	6812      	ldr	r2, [r2, #0]
   1160a:	6ed1      	ldr	r1, [r2, #108]	; 0x6c
   1160c:	687a      	ldr	r2, [r7, #4]
   1160e:	440a      	add	r2, r1
   11610:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    if(SDO->timeoutTimer >= SDOtimeoutTime){
   11612:	68fb      	ldr	r3, [r7, #12]
   11614:	681b      	ldr	r3, [r3, #0]
   11616:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   11618:	683b      	ldr	r3, [r7, #0]
   1161a:	429a      	cmp	r2, r3
   1161c:	d329      	bcc.n	11672 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2e6>
        if((SDO->state == CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK) && (SDO->sequence != 0) && (!SDO->CANtxBuff->bufferFull)){
   1161e:	68fb      	ldr	r3, [r7, #12]
   11620:	681b      	ldr	r3, [r3, #0]
   11622:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   11626:	2b15      	cmp	r3, #21
   11628:	d10f      	bne.n	1164a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2be>
   1162a:	68fb      	ldr	r3, [r7, #12]
   1162c:	681b      	ldr	r3, [r3, #0]
   1162e:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   11632:	2b00      	cmp	r3, #0
   11634:	d009      	beq.n	1164a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2be>
   11636:	68fb      	ldr	r3, [r7, #12]
   11638:	681b      	ldr	r3, [r3, #0]
   1163a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   1163e:	7b5b      	ldrb	r3, [r3, #13]
   11640:	b2db      	uxtb	r3, r3
   11642:	2b00      	cmp	r3, #0
   11644:	d101      	bne.n	1164a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2be>
   11646:	2301      	movs	r3, #1
   11648:	e000      	b.n	1164c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>
   1164a:	2300      	movs	r3, #0
   1164c:	2b00      	cmp	r3, #0
   1164e:	d006      	beq.n	1165e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2d2>
            timeoutSubblockDownolad = true;
   11650:	2301      	movs	r3, #1
   11652:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
            state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
   11656:	2316      	movs	r3, #22
   11658:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   1165c:	e009      	b.n	11672 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2e6>
        }
        else{
            CO_SDO_abort(SDO, CO_SDO_AB_TIMEOUT); /* SDO protocol timed out */
   1165e:	68fb      	ldr	r3, [r7, #12]
   11660:	681b      	ldr	r3, [r3, #0]
   11662:	4943      	ldr	r1, [pc, #268]	; (11770 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3e4>)
   11664:	4618      	mov	r0, r3
   11666:	4b3e      	ldr	r3, [pc, #248]	; (11760 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3d4>)
   11668:	4798      	blx	r3
            return -1;
   1166a:	f04f 33ff 	mov.w	r3, #4294967295
   1166e:	f001 b823 	b.w	126b8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
        }
    }

    /* return immediately if still idle */
    if(state == CO_SDO_ST_IDLE){
   11672:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   11676:	2b00      	cmp	r3, #0
   11678:	d102      	bne.n	11680 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2f4>
        return 0;
   1167a:	2300      	movs	r3, #0
   1167c:	f001 b81c 	b.w	126b8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
    }

    /* state machine (buffer is freed (SDO->CANrxNew = 0;) at the end) */
    switch(state){
   11680:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   11684:	3b11      	subs	r3, #17
   11686:	2b16      	cmp	r3, #22
   11688:	f200 87f0 	bhi.w	1266c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12e0>
   1168c:	a201      	add	r2, pc, #4	; (adr r2, 11694 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x308>)
   1168e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   11692:	bf00      	nop
   11694:	000116f1 	.word	0x000116f1
   11698:	0001186b 	.word	0x0001186b
   1169c:	0001266d 	.word	0x0001266d
   116a0:	00011a0b 	.word	0x00011a0b
   116a4:	0001267f 	.word	0x0001267f
   116a8:	00011b3d 	.word	0x00011b3d
   116ac:	00011c9d 	.word	0x00011c9d
   116b0:	0001266d 	.word	0x0001266d
   116b4:	0001266d 	.word	0x0001266d
   116b8:	0001266d 	.word	0x0001266d
   116bc:	0001266d 	.word	0x0001266d
   116c0:	0001266d 	.word	0x0001266d
   116c4:	0001266d 	.word	0x0001266d
   116c8:	0001266d 	.word	0x0001266d
   116cc:	0001266d 	.word	0x0001266d
   116d0:	0001266d 	.word	0x0001266d
   116d4:	00011db9 	.word	0x00011db9
   116d8:	00011ec5 	.word	0x00011ec5
   116dc:	0001266d 	.word	0x0001266d
   116e0:	000120fd 	.word	0x000120fd
   116e4:	00012249 	.word	0x00012249
   116e8:	00012299 	.word	0x00012299
   116ec:	00012641 	.word	0x00012641
        uint32_t len, i;
        bool_t lastSegmentInSubblock;

        case CO_SDO_ST_DOWNLOAD_INITIATE:{
            /* default response */
            SDO->CANtxBuff->data[0] = 0x60;
   116f0:	68fb      	ldr	r3, [r7, #12]
   116f2:	681b      	ldr	r3, [r3, #0]
   116f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   116f8:	2260      	movs	r2, #96	; 0x60
   116fa:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = SDO->CANrxData[1];
   116fc:	68fb      	ldr	r3, [r7, #12]
   116fe:	681b      	ldr	r3, [r3, #0]
   11700:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11704:	68fa      	ldr	r2, [r7, #12]
   11706:	6812      	ldr	r2, [r2, #0]
   11708:	7852      	ldrb	r2, [r2, #1]
   1170a:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = SDO->CANrxData[2];
   1170c:	68fb      	ldr	r3, [r7, #12]
   1170e:	681b      	ldr	r3, [r3, #0]
   11710:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11714:	68fa      	ldr	r2, [r7, #12]
   11716:	6812      	ldr	r2, [r2, #0]
   11718:	7892      	ldrb	r2, [r2, #2]
   1171a:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->CANrxData[3];
   1171c:	68fb      	ldr	r3, [r7, #12]
   1171e:	681b      	ldr	r3, [r3, #0]
   11720:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11724:	68fa      	ldr	r2, [r7, #12]
   11726:	6812      	ldr	r2, [r2, #0]
   11728:	78d2      	ldrb	r2, [r2, #3]
   1172a:	721a      	strb	r2, [r3, #8]

            /* Expedited transfer */
            if((SDO->CANrxData[0] & 0x02U) != 0U){
   1172c:	68fb      	ldr	r3, [r7, #12]
   1172e:	681b      	ldr	r3, [r3, #0]
   11730:	781b      	ldrb	r3, [r3, #0]
   11732:	f003 0302 	and.w	r3, r3, #2
   11736:	2b00      	cmp	r3, #0
   11738:	d05b      	beq.n	117f2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x466>
                /* is size indicated? Get message length */
                if((SDO->CANrxData[0] & 0x01U) != 0U){
   1173a:	68fb      	ldr	r3, [r7, #12]
   1173c:	681b      	ldr	r3, [r3, #0]
   1173e:	781b      	ldrb	r3, [r3, #0]
   11740:	f003 0301 	and.w	r3, r3, #1
   11744:	2b00      	cmp	r3, #0
   11746:	d015      	beq.n	11774 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3e8>
                    len = 4U - ((SDO->CANrxData[0] >> 2U) & 0x03U);
   11748:	68fb      	ldr	r3, [r7, #12]
   1174a:	681b      	ldr	r3, [r3, #0]
   1174c:	781b      	ldrb	r3, [r3, #0]
   1174e:	109b      	asrs	r3, r3, #2
   11750:	f003 0303 	and.w	r3, r3, #3
   11754:	f1c3 0304 	rsb	r3, r3, #4
   11758:	643b      	str	r3, [r7, #64]	; 0x40
   1175a:	e00f      	b.n	1177c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3f0>
   1175c:	05040001 	.word	0x05040001
   11760:	00011301 	.word	0x00011301
   11764:	00010f1d 	.word	0x00010f1d
   11768:	06010002 	.word	0x06010002
   1176c:	000110ad 	.word	0x000110ad
   11770:	05040000 	.word	0x05040000
                }
                else{
                    len = SDO->ODF_arg.dataLength;
   11774:	68fb      	ldr	r3, [r7, #12]
   11776:	681b      	ldr	r3, [r3, #0]
   11778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1177a:	643b      	str	r3, [r7, #64]	; 0x40
                }

                /* copy data to SDO buffer */
                SDO->ODF_arg.data[0] = SDO->CANrxData[4];
   1177c:	68fb      	ldr	r3, [r7, #12]
   1177e:	681b      	ldr	r3, [r3, #0]
   11780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   11782:	68fa      	ldr	r2, [r7, #12]
   11784:	6812      	ldr	r2, [r2, #0]
   11786:	7912      	ldrb	r2, [r2, #4]
   11788:	701a      	strb	r2, [r3, #0]
                SDO->ODF_arg.data[1] = SDO->CANrxData[5];
   1178a:	68fb      	ldr	r3, [r7, #12]
   1178c:	681b      	ldr	r3, [r3, #0]
   1178e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   11790:	3301      	adds	r3, #1
   11792:	68fa      	ldr	r2, [r7, #12]
   11794:	6812      	ldr	r2, [r2, #0]
   11796:	7952      	ldrb	r2, [r2, #5]
   11798:	701a      	strb	r2, [r3, #0]
                SDO->ODF_arg.data[2] = SDO->CANrxData[6];
   1179a:	68fb      	ldr	r3, [r7, #12]
   1179c:	681b      	ldr	r3, [r3, #0]
   1179e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   117a0:	3302      	adds	r3, #2
   117a2:	68fa      	ldr	r2, [r7, #12]
   117a4:	6812      	ldr	r2, [r2, #0]
   117a6:	7992      	ldrb	r2, [r2, #6]
   117a8:	701a      	strb	r2, [r3, #0]
                SDO->ODF_arg.data[3] = SDO->CANrxData[7];
   117aa:	68fb      	ldr	r3, [r7, #12]
   117ac:	681b      	ldr	r3, [r3, #0]
   117ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   117b0:	3303      	adds	r3, #3
   117b2:	68fa      	ldr	r2, [r7, #12]
   117b4:	6812      	ldr	r2, [r2, #0]
   117b6:	79d2      	ldrb	r2, [r2, #7]
   117b8:	701a      	strb	r2, [r3, #0]

                /* write data to the Object dictionary */
                abortCode = CO_SDO_writeOD( len);
   117ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
   117bc:	68f8      	ldr	r0, [r7, #12]
   117be:	4b9b      	ldr	r3, [pc, #620]	; (11a2c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a0>)
   117c0:	4798      	blx	r3
   117c2:	62b8      	str	r0, [r7, #40]	; 0x28
                if(abortCode != 0U){
   117c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   117c6:	2b00      	cmp	r3, #0
   117c8:	d009      	beq.n	117de <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x452>
                    CO_SDO_abort(SDO, abortCode);
   117ca:	68fb      	ldr	r3, [r7, #12]
   117cc:	681b      	ldr	r3, [r3, #0]
   117ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   117d0:	4618      	mov	r0, r3
   117d2:	4b97      	ldr	r3, [pc, #604]	; (11a30 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a4>)
   117d4:	4798      	blx	r3
                    return -1;
   117d6:	f04f 33ff 	mov.w	r3, #4294967295
   117da:	f000 bf6d 	b.w	126b8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                }

                /* finish the communication */
                SDO->state = CO_SDO_ST_IDLE;
   117de:	68fb      	ldr	r3, [r7, #12]
   117e0:	681b      	ldr	r3, [r3, #0]
   117e2:	2200      	movs	r2, #0
   117e4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                sendResponse = true;
   117e8:	2301      	movs	r3, #1
   117ea:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                SDO->bufferOffset = 0;
                SDO->sequence = 0;
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENTED;
                sendResponse = true;
            }
            break;
   117ee:	f000 bf47 	b.w	12680 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
                if((SDO->CANrxData[0]&0x01) != 0){
   117f2:	68fb      	ldr	r3, [r7, #12]
   117f4:	681b      	ldr	r3, [r3, #0]
   117f6:	781b      	ldrb	r3, [r3, #0]
   117f8:	f003 0301 	and.w	r3, r3, #1
   117fc:	2b00      	cmp	r3, #0
   117fe:	d021      	beq.n	11844 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x4b8>
                    CO_memcpySwap4(&lenRx, &SDO->CANrxData[4]);
   11800:	68fb      	ldr	r3, [r7, #12]
   11802:	681b      	ldr	r3, [r3, #0]
   11804:	1d1a      	adds	r2, r3, #4
   11806:	f107 0320 	add.w	r3, r7, #32
   1180a:	4619      	mov	r1, r3
   1180c:	68f8      	ldr	r0, [r7, #12]
   1180e:	4b89      	ldr	r3, [pc, #548]	; (11a34 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a8>)
   11810:	4798      	blx	r3
                    SDO->ODF_arg.dataLengthTotal = lenRx;
   11812:	68fb      	ldr	r3, [r7, #12]
   11814:	681b      	ldr	r3, [r3, #0]
   11816:	6a3a      	ldr	r2, [r7, #32]
   11818:	661a      	str	r2, [r3, #96]	; 0x60
                    if((lenRx != SDO->ODF_arg.dataLength) && (SDO->ODF_arg.ODdataStorage != 0)){
   1181a:	68fb      	ldr	r3, [r7, #12]
   1181c:	681b      	ldr	r3, [r3, #0]
   1181e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   11820:	6a3b      	ldr	r3, [r7, #32]
   11822:	429a      	cmp	r2, r3
   11824:	d00e      	beq.n	11844 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x4b8>
   11826:	68fb      	ldr	r3, [r7, #12]
   11828:	681b      	ldr	r3, [r3, #0]
   1182a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1182c:	2b00      	cmp	r3, #0
   1182e:	d009      	beq.n	11844 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x4b8>
                        CO_SDO_abort(SDO, CO_SDO_AB_TYPE_MISMATCH);  /* Length of service parameter does not match */
   11830:	68fb      	ldr	r3, [r7, #12]
   11832:	681b      	ldr	r3, [r3, #0]
   11834:	4980      	ldr	r1, [pc, #512]	; (11a38 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6ac>)
   11836:	4618      	mov	r0, r3
   11838:	4b7d      	ldr	r3, [pc, #500]	; (11a30 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a4>)
   1183a:	4798      	blx	r3
                        return -1;
   1183c:	f04f 33ff 	mov.w	r3, #4294967295
   11840:	f000 bf3a 	b.w	126b8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                SDO->bufferOffset = 0;
   11844:	68fb      	ldr	r3, [r7, #12]
   11846:	681b      	ldr	r3, [r3, #0]
   11848:	2200      	movs	r2, #0
   1184a:	639a      	str	r2, [r3, #56]	; 0x38
                SDO->sequence = 0;
   1184c:	68fb      	ldr	r3, [r7, #12]
   1184e:	681b      	ldr	r3, [r3, #0]
   11850:	2200      	movs	r2, #0
   11852:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENTED;
   11856:	68fb      	ldr	r3, [r7, #12]
   11858:	681b      	ldr	r3, [r3, #0]
   1185a:	2212      	movs	r2, #18
   1185c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                sendResponse = true;
   11860:	2301      	movs	r3, #1
   11862:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
   11866:	f000 bf0b 	b.w	12680 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
        }

        case CO_SDO_ST_DOWNLOAD_SEGMENTED:{
            /* verify client command specifier */
            if((SDO->CANrxData[0]&0xE0) != 0x00U){
   1186a:	68fb      	ldr	r3, [r7, #12]
   1186c:	681b      	ldr	r3, [r3, #0]
   1186e:	781b      	ldrb	r3, [r3, #0]
   11870:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
   11874:	2b00      	cmp	r3, #0
   11876:	d009      	beq.n	1188c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x500>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
   11878:	68fb      	ldr	r3, [r7, #12]
   1187a:	681b      	ldr	r3, [r3, #0]
   1187c:	496f      	ldr	r1, [pc, #444]	; (11a3c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6b0>)
   1187e:	4618      	mov	r0, r3
   11880:	4b6b      	ldr	r3, [pc, #428]	; (11a30 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a4>)
   11882:	4798      	blx	r3
                return -1;
   11884:	f04f 33ff 	mov.w	r3, #4294967295
   11888:	f000 bf16 	b.w	126b8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            /* verify toggle bit */
            i = (SDO->CANrxData[0]&0x10U) ? 1U : 0U;
   1188c:	68fb      	ldr	r3, [r7, #12]
   1188e:	681b      	ldr	r3, [r3, #0]
   11890:	781b      	ldrb	r3, [r3, #0]
   11892:	f003 0310 	and.w	r3, r3, #16
   11896:	2b00      	cmp	r3, #0
   11898:	d001      	beq.n	1189e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x512>
   1189a:	2301      	movs	r3, #1
   1189c:	e000      	b.n	118a0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x514>
   1189e:	2300      	movs	r3, #0
   118a0:	63fb      	str	r3, [r7, #60]	; 0x3c
            if(i != SDO->sequence){
   118a2:	68fb      	ldr	r3, [r7, #12]
   118a4:	681b      	ldr	r3, [r3, #0]
   118a6:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   118aa:	461a      	mov	r2, r3
   118ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   118ae:	429a      	cmp	r2, r3
   118b0:	d009      	beq.n	118c6 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x53a>
                CO_SDO_abort(SDO, CO_SDO_AB_TOGGLE_BIT);/* toggle bit not alternated */
   118b2:	68fb      	ldr	r3, [r7, #12]
   118b4:	681b      	ldr	r3, [r3, #0]
   118b6:	4962      	ldr	r1, [pc, #392]	; (11a40 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6b4>)
   118b8:	4618      	mov	r0, r3
   118ba:	4b5d      	ldr	r3, [pc, #372]	; (11a30 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a4>)
   118bc:	4798      	blx	r3
                return -1;
   118be:	f04f 33ff 	mov.w	r3, #4294967295
   118c2:	f000 bef9 	b.w	126b8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            /* get size of data in message */
            len = 7U - ((SDO->CANrxData[0] >> 1U) & 0x07U);
   118c6:	68fb      	ldr	r3, [r7, #12]
   118c8:	681b      	ldr	r3, [r3, #0]
   118ca:	781b      	ldrb	r3, [r3, #0]
   118cc:	105b      	asrs	r3, r3, #1
   118ce:	43db      	mvns	r3, r3
   118d0:	f003 0307 	and.w	r3, r3, #7
   118d4:	643b      	str	r3, [r7, #64]	; 0x40

            /* verify length. Domain data type enables length larger than SDO buffer size */
            if((SDO->bufferOffset + len) > SDO->ODF_arg.dataLength){
   118d6:	68fb      	ldr	r3, [r7, #12]
   118d8:	681b      	ldr	r3, [r3, #0]
   118da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   118dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   118de:	441a      	add	r2, r3
   118e0:	68fb      	ldr	r3, [r7, #12]
   118e2:	681b      	ldr	r3, [r3, #0]
   118e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   118e6:	429a      	cmp	r2, r3
   118e8:	d930      	bls.n	1194c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x5c0>
                if(SDO->ODF_arg.ODdataStorage != 0){
   118ea:	68fb      	ldr	r3, [r7, #12]
   118ec:	681b      	ldr	r3, [r3, #0]
   118ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   118f0:	2b00      	cmp	r3, #0
   118f2:	d009      	beq.n	11908 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>
                    CO_SDO_abort(SDO, CO_SDO_AB_DATA_LONG);  /* Length of service parameter too high */
   118f4:	68fb      	ldr	r3, [r7, #12]
   118f6:	681b      	ldr	r3, [r3, #0]
   118f8:	4952      	ldr	r1, [pc, #328]	; (11a44 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6b8>)
   118fa:	4618      	mov	r0, r3
   118fc:	4b4c      	ldr	r3, [pc, #304]	; (11a30 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a4>)
   118fe:	4798      	blx	r3
                    return -1;
   11900:	f04f 33ff 	mov.w	r3, #4294967295
   11904:	f000 bed8 	b.w	126b8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                }
                else{
                    /* empty buffer in domain data type */
                    SDO->ODF_arg.lastSegment = false;
   11908:	68fb      	ldr	r3, [r7, #12]
   1190a:	681b      	ldr	r3, [r3, #0]
   1190c:	2200      	movs	r2, #0
   1190e:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
                    abortCode = CO_SDO_writeOD( SDO->bufferOffset);
   11912:	68fb      	ldr	r3, [r7, #12]
   11914:	681b      	ldr	r3, [r3, #0]
   11916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   11918:	4619      	mov	r1, r3
   1191a:	68f8      	ldr	r0, [r7, #12]
   1191c:	4b43      	ldr	r3, [pc, #268]	; (11a2c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a0>)
   1191e:	4798      	blx	r3
   11920:	62b8      	str	r0, [r7, #40]	; 0x28
                    if(abortCode != 0U){
   11922:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11924:	2b00      	cmp	r3, #0
   11926:	d009      	beq.n	1193c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x5b0>
                        CO_SDO_abort(SDO, abortCode);
   11928:	68fb      	ldr	r3, [r7, #12]
   1192a:	681b      	ldr	r3, [r3, #0]
   1192c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1192e:	4618      	mov	r0, r3
   11930:	4b3f      	ldr	r3, [pc, #252]	; (11a30 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a4>)
   11932:	4798      	blx	r3
                        return -1;
   11934:	f04f 33ff 	mov.w	r3, #4294967295
   11938:	f000 bebe 	b.w	126b8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                    }

                    SDO->ODF_arg.dataLength = CO_SDO_BUFFER_SIZE;
   1193c:	68fb      	ldr	r3, [r7, #12]
   1193e:	681b      	ldr	r3, [r3, #0]
   11940:	2220      	movs	r2, #32
   11942:	64da      	str	r2, [r3, #76]	; 0x4c
                    SDO->bufferOffset = 0;
   11944:	68fb      	ldr	r3, [r7, #12]
   11946:	681b      	ldr	r3, [r3, #0]
   11948:	2200      	movs	r2, #0
   1194a:	639a      	str	r2, [r3, #56]	; 0x38
                }
            }

            /* copy data to buffer */
            for(i=0U; i<len; i++)
   1194c:	2300      	movs	r3, #0
   1194e:	63fb      	str	r3, [r7, #60]	; 0x3c
   11950:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   11952:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11954:	429a      	cmp	r2, r3
   11956:	d212      	bcs.n	1197e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x5f2>
                SDO->ODF_arg.data[SDO->bufferOffset++] = SDO->CANrxData[i+1];
   11958:	68fb      	ldr	r3, [r7, #12]
   1195a:	681b      	ldr	r3, [r3, #0]
   1195c:	6c59      	ldr	r1, [r3, #68]	; 0x44
   1195e:	68fb      	ldr	r3, [r7, #12]
   11960:	681a      	ldr	r2, [r3, #0]
   11962:	6b93      	ldr	r3, [r2, #56]	; 0x38
   11964:	1c58      	adds	r0, r3, #1
   11966:	6390      	str	r0, [r2, #56]	; 0x38
   11968:	440b      	add	r3, r1
   1196a:	68fa      	ldr	r2, [r7, #12]
   1196c:	6811      	ldr	r1, [r2, #0]
   1196e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   11970:	3201      	adds	r2, #1
   11972:	5c8a      	ldrb	r2, [r1, r2]
   11974:	701a      	strb	r2, [r3, #0]
            for(i=0U; i<len; i++)
   11976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11978:	3301      	adds	r3, #1
   1197a:	63fb      	str	r3, [r7, #60]	; 0x3c
   1197c:	e7e8      	b.n	11950 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x5c4>

            /* If no more segments to be downloaded, write data to the Object dictionary */
            if((SDO->CANrxData[0] & 0x01U) != 0U){
   1197e:	68fb      	ldr	r3, [r7, #12]
   11980:	681b      	ldr	r3, [r3, #0]
   11982:	781b      	ldrb	r3, [r3, #0]
   11984:	f003 0301 	and.w	r3, r3, #1
   11988:	2b00      	cmp	r3, #0
   1198a:	d01e      	beq.n	119ca <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x63e>
                SDO->ODF_arg.lastSegment = true;
   1198c:	68fb      	ldr	r3, [r7, #12]
   1198e:	681b      	ldr	r3, [r3, #0]
   11990:	2201      	movs	r2, #1
   11992:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
                abortCode = CO_SDO_writeOD( SDO->bufferOffset);
   11996:	68fb      	ldr	r3, [r7, #12]
   11998:	681b      	ldr	r3, [r3, #0]
   1199a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1199c:	4619      	mov	r1, r3
   1199e:	68f8      	ldr	r0, [r7, #12]
   119a0:	4b22      	ldr	r3, [pc, #136]	; (11a2c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a0>)
   119a2:	4798      	blx	r3
   119a4:	62b8      	str	r0, [r7, #40]	; 0x28
                if(abortCode != 0U){
   119a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   119a8:	2b00      	cmp	r3, #0
   119aa:	d009      	beq.n	119c0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x634>
                    CO_SDO_abort(SDO, abortCode);
   119ac:	68fb      	ldr	r3, [r7, #12]
   119ae:	681b      	ldr	r3, [r3, #0]
   119b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   119b2:	4618      	mov	r0, r3
   119b4:	4b1e      	ldr	r3, [pc, #120]	; (11a30 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a4>)
   119b6:	4798      	blx	r3
                    return -1;
   119b8:	f04f 33ff 	mov.w	r3, #4294967295
   119bc:	f000 be7c 	b.w	126b8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                }

                /* finish */
                SDO->state = CO_SDO_ST_IDLE;
   119c0:	68fb      	ldr	r3, [r7, #12]
   119c2:	681b      	ldr	r3, [r3, #0]
   119c4:	2200      	movs	r2, #0
   119c6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            }

            /* download segment response and alternate toggle bit */
            SDO->CANtxBuff->data[0] = 0x20 | (SDO->sequence ? 0x10 : 0x00);
   119ca:	68fb      	ldr	r3, [r7, #12]
   119cc:	681b      	ldr	r3, [r3, #0]
   119ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   119d2:	68fa      	ldr	r2, [r7, #12]
   119d4:	6812      	ldr	r2, [r2, #0]
   119d6:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
   119da:	2a00      	cmp	r2, #0
   119dc:	d001      	beq.n	119e2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x656>
   119de:	2230      	movs	r2, #48	; 0x30
   119e0:	e000      	b.n	119e4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x658>
   119e2:	2220      	movs	r2, #32
   119e4:	715a      	strb	r2, [r3, #5]
            SDO->sequence = (SDO->sequence) ? 0 : 1;
   119e6:	68fb      	ldr	r3, [r7, #12]
   119e8:	681b      	ldr	r3, [r3, #0]
   119ea:	68fa      	ldr	r2, [r7, #12]
   119ec:	6812      	ldr	r2, [r2, #0]
   119ee:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
   119f2:	2a00      	cmp	r2, #0
   119f4:	bf0c      	ite	eq
   119f6:	2201      	moveq	r2, #1
   119f8:	2200      	movne	r2, #0
   119fa:	b2d2      	uxtb	r2, r2
   119fc:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
            sendResponse = true;
   11a00:	2301      	movs	r3, #1
   11a02:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
   11a06:	f000 be3b 	b.w	12680 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
        }

        case CO_SDO_ST_DOWNLOAD_BL_INITIATE:{
            /* verify client command specifier and subcommand */
            if((SDO->CANrxData[0]&0xE1U) != 0xC0U){
   11a0a:	68fb      	ldr	r3, [r7, #12]
   11a0c:	681b      	ldr	r3, [r3, #0]
   11a0e:	781b      	ldrb	r3, [r3, #0]
   11a10:	f003 03e1 	and.w	r3, r3, #225	; 0xe1
   11a14:	2bc0      	cmp	r3, #192	; 0xc0
   11a16:	d017      	beq.n	11a48 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6bc>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
   11a18:	68fb      	ldr	r3, [r7, #12]
   11a1a:	681b      	ldr	r3, [r3, #0]
   11a1c:	4907      	ldr	r1, [pc, #28]	; (11a3c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6b0>)
   11a1e:	4618      	mov	r0, r3
   11a20:	4b03      	ldr	r3, [pc, #12]	; (11a30 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a4>)
   11a22:	4798      	blx	r3
                return -1;
   11a24:	f04f 33ff 	mov.w	r3, #4294967295
   11a28:	f000 be46 	b.w	126b8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
   11a2c:	000111cd 	.word	0x000111cd
   11a30:	00011301 	.word	0x00011301
   11a34:	000107dd 	.word	0x000107dd
   11a38:	06070010 	.word	0x06070010
   11a3c:	05040001 	.word	0x05040001
   11a40:	05030000 	.word	0x05030000
   11a44:	06070012 	.word	0x06070012
            }

            /* prepare response */
            SDO->CANtxBuff->data[0] = 0xA4;
   11a48:	68fb      	ldr	r3, [r7, #12]
   11a4a:	681b      	ldr	r3, [r3, #0]
   11a4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11a50:	22a4      	movs	r2, #164	; 0xa4
   11a52:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = SDO->CANrxData[1];
   11a54:	68fb      	ldr	r3, [r7, #12]
   11a56:	681b      	ldr	r3, [r3, #0]
   11a58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11a5c:	68fa      	ldr	r2, [r7, #12]
   11a5e:	6812      	ldr	r2, [r2, #0]
   11a60:	7852      	ldrb	r2, [r2, #1]
   11a62:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = SDO->CANrxData[2];
   11a64:	68fb      	ldr	r3, [r7, #12]
   11a66:	681b      	ldr	r3, [r3, #0]
   11a68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11a6c:	68fa      	ldr	r2, [r7, #12]
   11a6e:	6812      	ldr	r2, [r2, #0]
   11a70:	7892      	ldrb	r2, [r2, #2]
   11a72:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->CANrxData[3];
   11a74:	68fb      	ldr	r3, [r7, #12]
   11a76:	681b      	ldr	r3, [r3, #0]
   11a78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11a7c:	68fa      	ldr	r2, [r7, #12]
   11a7e:	6812      	ldr	r2, [r2, #0]
   11a80:	78d2      	ldrb	r2, [r2, #3]
   11a82:	721a      	strb	r2, [r3, #8]

            /* blksize */
            SDO->blksize = (CO_SDO_BUFFER_SIZE > (7*127)) ? 127 : (CO_SDO_BUFFER_SIZE / 7);
   11a84:	68fb      	ldr	r3, [r7, #12]
   11a86:	681b      	ldr	r3, [r3, #0]
   11a88:	2204      	movs	r2, #4
   11a8a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
            SDO->CANtxBuff->data[4] = SDO->blksize;
   11a8e:	68fb      	ldr	r3, [r7, #12]
   11a90:	681b      	ldr	r3, [r3, #0]
   11a92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11a96:	68fa      	ldr	r2, [r7, #12]
   11a98:	6812      	ldr	r2, [r2, #0]
   11a9a:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
   11a9e:	725a      	strb	r2, [r3, #9]

            /* is CRC enabled */
            SDO->crcEnabled = (SDO->CANrxData[0] & 0x04) ? true : false;
   11aa0:	68fb      	ldr	r3, [r7, #12]
   11aa2:	681b      	ldr	r3, [r3, #0]
   11aa4:	68fa      	ldr	r2, [r7, #12]
   11aa6:	6812      	ldr	r2, [r2, #0]
   11aa8:	7812      	ldrb	r2, [r2, #0]
   11aaa:	f002 0204 	and.w	r2, r2, #4
   11aae:	2a00      	cmp	r2, #0
   11ab0:	bf14      	ite	ne
   11ab2:	2201      	movne	r2, #1
   11ab4:	2200      	moveq	r2, #0
   11ab6:	b2d2      	uxtb	r2, r2
   11ab8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
            SDO->crc = 0;
   11abc:	68fb      	ldr	r3, [r7, #12]
   11abe:	681b      	ldr	r3, [r3, #0]
   11ac0:	2200      	movs	r2, #0
   11ac2:	675a      	str	r2, [r3, #116]	; 0x74

            /* verify length if size is indicated */
            if((SDO->CANrxData[0]&0x02) != 0U){
   11ac4:	68fb      	ldr	r3, [r7, #12]
   11ac6:	681b      	ldr	r3, [r3, #0]
   11ac8:	781b      	ldrb	r3, [r3, #0]
   11aca:	f003 0302 	and.w	r3, r3, #2
   11ace:	2b00      	cmp	r3, #0
   11ad0:	d021      	beq.n	11b16 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x78a>
                uint32_t lenRx;
                CO_memcpySwap4(&lenRx, &SDO->CANrxData[4]);
   11ad2:	68fb      	ldr	r3, [r7, #12]
   11ad4:	681b      	ldr	r3, [r3, #0]
   11ad6:	1d1a      	adds	r2, r3, #4
   11ad8:	f107 031c 	add.w	r3, r7, #28
   11adc:	4619      	mov	r1, r3
   11ade:	68f8      	ldr	r0, [r7, #12]
   11ae0:	4b96      	ldr	r3, [pc, #600]	; (11d3c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9b0>)
   11ae2:	4798      	blx	r3
                SDO->ODF_arg.dataLengthTotal = lenRx;
   11ae4:	68fb      	ldr	r3, [r7, #12]
   11ae6:	681b      	ldr	r3, [r3, #0]
   11ae8:	69fa      	ldr	r2, [r7, #28]
   11aea:	661a      	str	r2, [r3, #96]	; 0x60

                /* verify length except for domain data type */
                if((lenRx != SDO->ODF_arg.dataLength) && (SDO->ODF_arg.ODdataStorage != 0)){
   11aec:	68fb      	ldr	r3, [r7, #12]
   11aee:	681b      	ldr	r3, [r3, #0]
   11af0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   11af2:	69fb      	ldr	r3, [r7, #28]
   11af4:	429a      	cmp	r2, r3
   11af6:	d00e      	beq.n	11b16 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x78a>
   11af8:	68fb      	ldr	r3, [r7, #12]
   11afa:	681b      	ldr	r3, [r3, #0]
   11afc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   11afe:	2b00      	cmp	r3, #0
   11b00:	d009      	beq.n	11b16 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x78a>
                    CO_SDO_abort(SDO, CO_SDO_AB_TYPE_MISMATCH);  /* Length of service parameter does not match */
   11b02:	68fb      	ldr	r3, [r7, #12]
   11b04:	681b      	ldr	r3, [r3, #0]
   11b06:	498e      	ldr	r1, [pc, #568]	; (11d40 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9b4>)
   11b08:	4618      	mov	r0, r3
   11b0a:	4b8e      	ldr	r3, [pc, #568]	; (11d44 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9b8>)
   11b0c:	4798      	blx	r3
                    return -1;
   11b0e:	f04f 33ff 	mov.w	r3, #4294967295
   11b12:	f000 bdd1 	b.w	126b8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                }
            }

            SDO->bufferOffset = 0;
   11b16:	68fb      	ldr	r3, [r7, #12]
   11b18:	681b      	ldr	r3, [r3, #0]
   11b1a:	2200      	movs	r2, #0
   11b1c:	639a      	str	r2, [r3, #56]	; 0x38
            SDO->sequence = 0;
   11b1e:	68fb      	ldr	r3, [r7, #12]
   11b20:	681b      	ldr	r3, [r3, #0]
   11b22:	2200      	movs	r2, #0
   11b24:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
            SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK;
   11b28:	68fb      	ldr	r3, [r7, #12]
   11b2a:	681b      	ldr	r3, [r3, #0]
   11b2c:	2215      	movs	r2, #21
   11b2e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

            /* send response */
            sendResponse = true;
   11b32:	2301      	movs	r3, #1
   11b34:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
   11b38:	f000 bda2 	b.w	12680 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
        }

        case CO_SDO_ST_DOWNLOAD_BL_SUB_RESP:{
            /* no new message received, SDO timeout occured, try to response */
            lastSegmentInSubblock = (!timeoutSubblockDownolad &&
                        ((SDO->CANrxData[0] & 0x80U) == 0x80U)) ? true : false;
   11b3c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   11b40:	2b00      	cmp	r3, #0
   11b42:	d107      	bne.n	11b54 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7c8>
   11b44:	68fb      	ldr	r3, [r7, #12]
   11b46:	681b      	ldr	r3, [r3, #0]
   11b48:	781b      	ldrb	r3, [r3, #0]
   11b4a:	b25b      	sxtb	r3, r3
   11b4c:	2b00      	cmp	r3, #0
   11b4e:	da01      	bge.n	11b54 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7c8>
   11b50:	2301      	movs	r3, #1
   11b52:	e000      	b.n	11b56 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7ca>
   11b54:	2300      	movs	r3, #0
            lastSegmentInSubblock = (!timeoutSubblockDownolad &&
   11b56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            /* prepare response */
            SDO->CANtxBuff->data[0] = 0xA2;
   11b5a:	68fb      	ldr	r3, [r7, #12]
   11b5c:	681b      	ldr	r3, [r3, #0]
   11b5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11b62:	22a2      	movs	r2, #162	; 0xa2
   11b64:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = SDO->sequence;
   11b66:	68fb      	ldr	r3, [r7, #12]
   11b68:	681b      	ldr	r3, [r3, #0]
   11b6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11b6e:	68fa      	ldr	r2, [r7, #12]
   11b70:	6812      	ldr	r2, [r2, #0]
   11b72:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
   11b76:	719a      	strb	r2, [r3, #6]
            SDO->sequence = 0;
   11b78:	68fb      	ldr	r3, [r7, #12]
   11b7a:	681b      	ldr	r3, [r3, #0]
   11b7c:	2200      	movs	r2, #0
   11b7e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

            /* empty buffer in domain data type if not last segment */
            if((SDO->ODF_arg.ODdataStorage == 0) && (SDO->bufferOffset != 0) && !lastSegmentInSubblock){
   11b82:	68fb      	ldr	r3, [r7, #12]
   11b84:	681b      	ldr	r3, [r3, #0]
   11b86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   11b88:	2b00      	cmp	r3, #0
   11b8a:	d141      	bne.n	11c10 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x884>
   11b8c:	68fb      	ldr	r3, [r7, #12]
   11b8e:	681b      	ldr	r3, [r3, #0]
   11b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   11b92:	2b00      	cmp	r3, #0
   11b94:	d03c      	beq.n	11c10 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x884>
   11b96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   11b9a:	2b00      	cmp	r3, #0
   11b9c:	d138      	bne.n	11c10 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x884>
                /* calculate CRC on next bytes, if enabled */
                if(SDO->crcEnabled){
   11b9e:	68fb      	ldr	r3, [r7, #12]
   11ba0:	681b      	ldr	r3, [r3, #0]
   11ba2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
   11ba6:	2b00      	cmp	r3, #0
   11ba8:	d010      	beq.n	11bcc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x840>
                    SDO->crc = crc16_ccitt(SDO->ODF_arg.data, SDO->bufferOffset, SDO->crc);
   11baa:	68fb      	ldr	r3, [r7, #12]
   11bac:	681c      	ldr	r4, [r3, #0]
   11bae:	68fb      	ldr	r3, [r7, #12]
   11bb0:	681b      	ldr	r3, [r3, #0]
   11bb2:	6c59      	ldr	r1, [r3, #68]	; 0x44
   11bb4:	68fb      	ldr	r3, [r7, #12]
   11bb6:	681b      	ldr	r3, [r3, #0]
   11bb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   11bba:	68fb      	ldr	r3, [r7, #12]
   11bbc:	681b      	ldr	r3, [r3, #0]
   11bbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   11bc0:	b29b      	uxth	r3, r3
   11bc2:	68f8      	ldr	r0, [r7, #12]
   11bc4:	4d60      	ldr	r5, [pc, #384]	; (11d48 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9bc>)
   11bc6:	47a8      	blx	r5
   11bc8:	4603      	mov	r3, r0
   11bca:	6763      	str	r3, [r4, #116]	; 0x74
                }

                /* write data to the Object dictionary */
                SDO->ODF_arg.lastSegment = false;
   11bcc:	68fb      	ldr	r3, [r7, #12]
   11bce:	681b      	ldr	r3, [r3, #0]
   11bd0:	2200      	movs	r2, #0
   11bd2:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
                abortCode = CO_SDO_writeOD(SDO->bufferOffset);
   11bd6:	68fb      	ldr	r3, [r7, #12]
   11bd8:	681b      	ldr	r3, [r3, #0]
   11bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   11bdc:	4619      	mov	r1, r3
   11bde:	68f8      	ldr	r0, [r7, #12]
   11be0:	4b5a      	ldr	r3, [pc, #360]	; (11d4c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9c0>)
   11be2:	4798      	blx	r3
   11be4:	62b8      	str	r0, [r7, #40]	; 0x28
                if(abortCode != 0U){
   11be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11be8:	2b00      	cmp	r3, #0
   11bea:	d009      	beq.n	11c00 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x874>
                    CO_SDO_abort(SDO, abortCode);
   11bec:	68fb      	ldr	r3, [r7, #12]
   11bee:	681b      	ldr	r3, [r3, #0]
   11bf0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   11bf2:	4618      	mov	r0, r3
   11bf4:	4b53      	ldr	r3, [pc, #332]	; (11d44 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9b8>)
   11bf6:	4798      	blx	r3
                    return -1;
   11bf8:	f04f 33ff 	mov.w	r3, #4294967295
   11bfc:	f000 bd5c 	b.w	126b8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                }

                SDO->ODF_arg.dataLength = CO_SDO_BUFFER_SIZE;
   11c00:	68fb      	ldr	r3, [r7, #12]
   11c02:	681b      	ldr	r3, [r3, #0]
   11c04:	2220      	movs	r2, #32
   11c06:	64da      	str	r2, [r3, #76]	; 0x4c
                SDO->bufferOffset = 0;
   11c08:	68fb      	ldr	r3, [r7, #12]
   11c0a:	681b      	ldr	r3, [r3, #0]
   11c0c:	2200      	movs	r2, #0
   11c0e:	639a      	str	r2, [r3, #56]	; 0x38
            }

            /* blksize */
            len = CO_SDO_BUFFER_SIZE - SDO->bufferOffset;
   11c10:	68fb      	ldr	r3, [r7, #12]
   11c12:	681b      	ldr	r3, [r3, #0]
   11c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   11c16:	f1c3 0320 	rsb	r3, r3, #32
   11c1a:	643b      	str	r3, [r7, #64]	; 0x40
            SDO->blksize = (len > (7*127)) ? 127 : (len / 7);
   11c1c:	68fb      	ldr	r3, [r7, #12]
   11c1e:	6819      	ldr	r1, [r3, #0]
   11c20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11c22:	f240 3279 	movw	r2, #889	; 0x379
   11c26:	4293      	cmp	r3, r2
   11c28:	d809      	bhi.n	11c3e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x8b2>
   11c2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   11c2c:	4b48      	ldr	r3, [pc, #288]	; (11d50 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9c4>)
   11c2e:	fba3 0302 	umull	r0, r3, r3, r2
   11c32:	1ad2      	subs	r2, r2, r3
   11c34:	0852      	lsrs	r2, r2, #1
   11c36:	4413      	add	r3, r2
   11c38:	089b      	lsrs	r3, r3, #2
   11c3a:	b2db      	uxtb	r3, r3
   11c3c:	e000      	b.n	11c40 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x8b4>
   11c3e:	237f      	movs	r3, #127	; 0x7f
   11c40:	f881 3070 	strb.w	r3, [r1, #112]	; 0x70
            SDO->CANtxBuff->data[2] = SDO->blksize;
   11c44:	68fb      	ldr	r3, [r7, #12]
   11c46:	681b      	ldr	r3, [r3, #0]
   11c48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11c4c:	68fa      	ldr	r2, [r7, #12]
   11c4e:	6812      	ldr	r2, [r2, #0]
   11c50:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
   11c54:	71da      	strb	r2, [r3, #7]

            /* set next state */
            if(lastSegmentInSubblock) {
   11c56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   11c5a:	2b00      	cmp	r3, #0
   11c5c:	d005      	beq.n	11c6a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x8de>
                SDO->state = CO_SDO_ST_DOWNLOAD_BL_END;
   11c5e:	68fb      	ldr	r3, [r7, #12]
   11c60:	681b      	ldr	r3, [r3, #0]
   11c62:	2217      	movs	r2, #23
   11c64:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
   11c68:	e013      	b.n	11c92 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x906>
            }
            else if(SDO->bufferOffset >= CO_SDO_BUFFER_SIZE) {
   11c6a:	68fb      	ldr	r3, [r7, #12]
   11c6c:	681b      	ldr	r3, [r3, #0]
   11c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   11c70:	2b1f      	cmp	r3, #31
   11c72:	d909      	bls.n	11c88 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x8fc>
                CO_SDO_abort(SDO, CO_SDO_AB_DEVICE_INCOMPAT);
   11c74:	68fb      	ldr	r3, [r7, #12]
   11c76:	681b      	ldr	r3, [r3, #0]
   11c78:	4936      	ldr	r1, [pc, #216]	; (11d54 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9c8>)
   11c7a:	4618      	mov	r0, r3
   11c7c:	4b31      	ldr	r3, [pc, #196]	; (11d44 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9b8>)
   11c7e:	4798      	blx	r3
                return -1;
   11c80:	f04f 33ff 	mov.w	r3, #4294967295
   11c84:	f000 bd18 	b.w	126b8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }
            else {
                SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK;
   11c88:	68fb      	ldr	r3, [r7, #12]
   11c8a:	681b      	ldr	r3, [r3, #0]
   11c8c:	2215      	movs	r2, #21
   11c8e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            }

            /* send response */
            sendResponse = true;
   11c92:	2301      	movs	r3, #1
   11c94:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

            break;
   11c98:	f000 bcf2 	b.w	12680 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
        }

        case CO_SDO_ST_DOWNLOAD_BL_END:{
            /* verify client command specifier and subcommand */
            if((SDO->CANrxData[0]&0xE1U) != 0xC1U){
   11c9c:	68fb      	ldr	r3, [r7, #12]
   11c9e:	681b      	ldr	r3, [r3, #0]
   11ca0:	781b      	ldrb	r3, [r3, #0]
   11ca2:	f003 03e1 	and.w	r3, r3, #225	; 0xe1
   11ca6:	2bc1      	cmp	r3, #193	; 0xc1
   11ca8:	d009      	beq.n	11cbe <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x932>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
   11caa:	68fb      	ldr	r3, [r7, #12]
   11cac:	681b      	ldr	r3, [r3, #0]
   11cae:	492a      	ldr	r1, [pc, #168]	; (11d58 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9cc>)
   11cb0:	4618      	mov	r0, r3
   11cb2:	4b24      	ldr	r3, [pc, #144]	; (11d44 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9b8>)
   11cb4:	4798      	blx	r3
                return -1;
   11cb6:	f04f 33ff 	mov.w	r3, #4294967295
   11cba:	f000 bcfd 	b.w	126b8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            /* number of bytes in the last segment of the last block that do not contain data. */
            len = (SDO->CANrxData[0]>>2U) & 0x07U;
   11cbe:	68fb      	ldr	r3, [r7, #12]
   11cc0:	681b      	ldr	r3, [r3, #0]
   11cc2:	781b      	ldrb	r3, [r3, #0]
   11cc4:	109b      	asrs	r3, r3, #2
   11cc6:	f003 0307 	and.w	r3, r3, #7
   11cca:	643b      	str	r3, [r7, #64]	; 0x40
            SDO->bufferOffset -= len;
   11ccc:	68fb      	ldr	r3, [r7, #12]
   11cce:	681b      	ldr	r3, [r3, #0]
   11cd0:	68fa      	ldr	r2, [r7, #12]
   11cd2:	6812      	ldr	r2, [r2, #0]
   11cd4:	6b91      	ldr	r1, [r2, #56]	; 0x38
   11cd6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   11cd8:	1a8a      	subs	r2, r1, r2
   11cda:	639a      	str	r2, [r3, #56]	; 0x38

            /* calculate and verify CRC, if enabled */
            if(SDO->crcEnabled){
   11cdc:	68fb      	ldr	r3, [r7, #12]
   11cde:	681b      	ldr	r3, [r3, #0]
   11ce0:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
   11ce4:	2b00      	cmp	r3, #0
   11ce6:	d03d      	beq.n	11d64 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9d8>
                uint32_t crc;
                SDO->crc = crc16_ccitt(SDO->ODF_arg.data, SDO->bufferOffset, SDO->crc);
   11ce8:	68fb      	ldr	r3, [r7, #12]
   11cea:	681c      	ldr	r4, [r3, #0]
   11cec:	68fb      	ldr	r3, [r7, #12]
   11cee:	681b      	ldr	r3, [r3, #0]
   11cf0:	6c59      	ldr	r1, [r3, #68]	; 0x44
   11cf2:	68fb      	ldr	r3, [r7, #12]
   11cf4:	681b      	ldr	r3, [r3, #0]
   11cf6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   11cf8:	68fb      	ldr	r3, [r7, #12]
   11cfa:	681b      	ldr	r3, [r3, #0]
   11cfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   11cfe:	b29b      	uxth	r3, r3
   11d00:	68f8      	ldr	r0, [r7, #12]
   11d02:	4d11      	ldr	r5, [pc, #68]	; (11d48 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9bc>)
   11d04:	47a8      	blx	r5
   11d06:	4603      	mov	r3, r0
   11d08:	6763      	str	r3, [r4, #116]	; 0x74

                CO_memcpySwap2(&crc, &SDO->CANrxData[1]);
   11d0a:	68fb      	ldr	r3, [r7, #12]
   11d0c:	681b      	ldr	r3, [r3, #0]
   11d0e:	1c5a      	adds	r2, r3, #1
   11d10:	f107 0318 	add.w	r3, r7, #24
   11d14:	4619      	mov	r1, r3
   11d16:	68f8      	ldr	r0, [r7, #12]
   11d18:	4b10      	ldr	r3, [pc, #64]	; (11d5c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9d0>)
   11d1a:	4798      	blx	r3

                if(SDO->crc != crc){
   11d1c:	68fb      	ldr	r3, [r7, #12]
   11d1e:	681b      	ldr	r3, [r3, #0]
   11d20:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   11d22:	69bb      	ldr	r3, [r7, #24]
   11d24:	429a      	cmp	r2, r3
   11d26:	d01d      	beq.n	11d64 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9d8>
                    CO_SDO_abort(SDO, CO_SDO_AB_CRC);   /* CRC error (block mode only). */
   11d28:	68fb      	ldr	r3, [r7, #12]
   11d2a:	681b      	ldr	r3, [r3, #0]
   11d2c:	490c      	ldr	r1, [pc, #48]	; (11d60 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9d4>)
   11d2e:	4618      	mov	r0, r3
   11d30:	4b04      	ldr	r3, [pc, #16]	; (11d44 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9b8>)
   11d32:	4798      	blx	r3
                    return -1;
   11d34:	f04f 33ff 	mov.w	r3, #4294967295
   11d38:	f000 bcbe 	b.w	126b8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
   11d3c:	000107dd 	.word	0x000107dd
   11d40:	06070010 	.word	0x06070010
   11d44:	00011301 	.word	0x00011301
   11d48:	00012d05 	.word	0x00012d05
   11d4c:	000111cd 	.word	0x000111cd
   11d50:	24924925 	.word	0x24924925
   11d54:	06040047 	.word	0x06040047
   11d58:	05040001 	.word	0x05040001
   11d5c:	000107ad 	.word	0x000107ad
   11d60:	05040004 	.word	0x05040004
                }
            }

            /* write data to the Object dictionary */
            SDO->ODF_arg.lastSegment = true;
   11d64:	68fb      	ldr	r3, [r7, #12]
   11d66:	681b      	ldr	r3, [r3, #0]
   11d68:	2201      	movs	r2, #1
   11d6a:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
            abortCode = CO_SDO_writeOD( SDO->bufferOffset);
   11d6e:	68fb      	ldr	r3, [r7, #12]
   11d70:	681b      	ldr	r3, [r3, #0]
   11d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   11d74:	4619      	mov	r1, r3
   11d76:	68f8      	ldr	r0, [r7, #12]
   11d78:	4b98      	ldr	r3, [pc, #608]	; (11fdc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc50>)
   11d7a:	4798      	blx	r3
   11d7c:	62b8      	str	r0, [r7, #40]	; 0x28
            if(abortCode != 0U){
   11d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11d80:	2b00      	cmp	r3, #0
   11d82:	d009      	beq.n	11d98 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa0c>
                CO_SDO_abort(SDO, abortCode);
   11d84:	68fb      	ldr	r3, [r7, #12]
   11d86:	681b      	ldr	r3, [r3, #0]
   11d88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   11d8a:	4618      	mov	r0, r3
   11d8c:	4b94      	ldr	r3, [pc, #592]	; (11fe0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc54>)
   11d8e:	4798      	blx	r3
                return -1;
   11d90:	f04f 33ff 	mov.w	r3, #4294967295
   11d94:	f000 bc90 	b.w	126b8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            /* send response */
            SDO->CANtxBuff->data[0] = 0xA1;
   11d98:	68fb      	ldr	r3, [r7, #12]
   11d9a:	681b      	ldr	r3, [r3, #0]
   11d9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11da0:	22a1      	movs	r2, #161	; 0xa1
   11da2:	715a      	strb	r2, [r3, #5]
            SDO->state = CO_SDO_ST_IDLE;
   11da4:	68fb      	ldr	r3, [r7, #12]
   11da6:	681b      	ldr	r3, [r3, #0]
   11da8:	2200      	movs	r2, #0
   11daa:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            sendResponse = true;
   11dae:	2301      	movs	r3, #1
   11db0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
   11db4:	f000 bc64 	b.w	12680 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
        }

        case CO_SDO_ST_UPLOAD_INITIATE:{
            /* default response */
            SDO->CANtxBuff->data[1] = SDO->CANrxData[1];
   11db8:	68fb      	ldr	r3, [r7, #12]
   11dba:	681b      	ldr	r3, [r3, #0]
   11dbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11dc0:	68fa      	ldr	r2, [r7, #12]
   11dc2:	6812      	ldr	r2, [r2, #0]
   11dc4:	7852      	ldrb	r2, [r2, #1]
   11dc6:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = SDO->CANrxData[2];
   11dc8:	68fb      	ldr	r3, [r7, #12]
   11dca:	681b      	ldr	r3, [r3, #0]
   11dcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11dd0:	68fa      	ldr	r2, [r7, #12]
   11dd2:	6812      	ldr	r2, [r2, #0]
   11dd4:	7892      	ldrb	r2, [r2, #2]
   11dd6:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->CANrxData[3];
   11dd8:	68fb      	ldr	r3, [r7, #12]
   11dda:	681b      	ldr	r3, [r3, #0]
   11ddc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11de0:	68fa      	ldr	r2, [r7, #12]
   11de2:	6812      	ldr	r2, [r2, #0]
   11de4:	78d2      	ldrb	r2, [r2, #3]
   11de6:	721a      	strb	r2, [r3, #8]

            /* Expedited transfer */
            if(SDO->ODF_arg.dataLength <= 4U){
   11de8:	68fb      	ldr	r3, [r7, #12]
   11dea:	681b      	ldr	r3, [r3, #0]
   11dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   11dee:	2b04      	cmp	r3, #4
   11df0:	d835      	bhi.n	11e5e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xad2>
                for(i=0U; i<SDO->ODF_arg.dataLength; i++)
   11df2:	2300      	movs	r3, #0
   11df4:	63fb      	str	r3, [r7, #60]	; 0x3c
   11df6:	68fb      	ldr	r3, [r7, #12]
   11df8:	681b      	ldr	r3, [r3, #0]
   11dfa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   11dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11dfe:	429a      	cmp	r2, r3
   11e00:	d912      	bls.n	11e28 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa9c>
                    SDO->CANtxBuff->data[4U+i] = SDO->ODF_arg.data[i];
   11e02:	68fb      	ldr	r3, [r7, #12]
   11e04:	681b      	ldr	r3, [r3, #0]
   11e06:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
   11e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11e0c:	3304      	adds	r3, #4
   11e0e:	68f9      	ldr	r1, [r7, #12]
   11e10:	6809      	ldr	r1, [r1, #0]
   11e12:	6c48      	ldr	r0, [r1, #68]	; 0x44
   11e14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   11e16:	4401      	add	r1, r0
   11e18:	7809      	ldrb	r1, [r1, #0]
   11e1a:	4413      	add	r3, r2
   11e1c:	460a      	mov	r2, r1
   11e1e:	715a      	strb	r2, [r3, #5]
                for(i=0U; i<SDO->ODF_arg.dataLength; i++)
   11e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11e22:	3301      	adds	r3, #1
   11e24:	63fb      	str	r3, [r7, #60]	; 0x3c
   11e26:	e7e6      	b.n	11df6 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa6a>

                SDO->CANtxBuff->data[0] = 0x43U | ((4U-SDO->ODF_arg.dataLength) << 2U);
   11e28:	68fb      	ldr	r3, [r7, #12]
   11e2a:	681b      	ldr	r3, [r3, #0]
   11e2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11e30:	68fa      	ldr	r2, [r7, #12]
   11e32:	6812      	ldr	r2, [r2, #0]
   11e34:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   11e36:	b2d2      	uxtb	r2, r2
   11e38:	f1c2 0204 	rsb	r2, r2, #4
   11e3c:	b2d2      	uxtb	r2, r2
   11e3e:	0092      	lsls	r2, r2, #2
   11e40:	b2d2      	uxtb	r2, r2
   11e42:	f042 0243 	orr.w	r2, r2, #67	; 0x43
   11e46:	b2d2      	uxtb	r2, r2
   11e48:	715a      	strb	r2, [r3, #5]
                SDO->state = CO_SDO_ST_IDLE;
   11e4a:	68fb      	ldr	r3, [r7, #12]
   11e4c:	681b      	ldr	r3, [r3, #0]
   11e4e:	2200      	movs	r2, #0
   11e50:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

                sendResponse = true;
   11e54:	2301      	movs	r3, #1
   11e56:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                }

                /* send response */
                sendResponse = true;
            }
            break;
   11e5a:	f000 bc11 	b.w	12680 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
                SDO->bufferOffset = 0U;
   11e5e:	68fb      	ldr	r3, [r7, #12]
   11e60:	681b      	ldr	r3, [r3, #0]
   11e62:	2200      	movs	r2, #0
   11e64:	639a      	str	r2, [r3, #56]	; 0x38
                SDO->sequence = 0U;
   11e66:	68fb      	ldr	r3, [r7, #12]
   11e68:	681b      	ldr	r3, [r3, #0]
   11e6a:	2200      	movs	r2, #0
   11e6c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENTED;
   11e70:	68fb      	ldr	r3, [r7, #12]
   11e72:	681b      	ldr	r3, [r3, #0]
   11e74:	2222      	movs	r2, #34	; 0x22
   11e76:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                if(SDO->ODF_arg.dataLengthTotal != 0U){
   11e7a:	68fb      	ldr	r3, [r7, #12]
   11e7c:	681b      	ldr	r3, [r3, #0]
   11e7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   11e80:	2b00      	cmp	r3, #0
   11e82:	d015      	beq.n	11eb0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xb24>
                    uint32_t len = SDO->ODF_arg.dataLengthTotal;
   11e84:	68fb      	ldr	r3, [r7, #12]
   11e86:	681b      	ldr	r3, [r3, #0]
   11e88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   11e8a:	617b      	str	r3, [r7, #20]
                    CO_memcpySwap4(&SDO->CANtxBuff->data[4], &len);
   11e8c:	68fb      	ldr	r3, [r7, #12]
   11e8e:	681b      	ldr	r3, [r3, #0]
   11e90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11e94:	3309      	adds	r3, #9
   11e96:	f107 0214 	add.w	r2, r7, #20
   11e9a:	4619      	mov	r1, r3
   11e9c:	68f8      	ldr	r0, [r7, #12]
   11e9e:	4b51      	ldr	r3, [pc, #324]	; (11fe4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc58>)
   11ea0:	4798      	blx	r3
                    SDO->CANtxBuff->data[0] = 0x41U;
   11ea2:	68fb      	ldr	r3, [r7, #12]
   11ea4:	681b      	ldr	r3, [r3, #0]
   11ea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11eaa:	2241      	movs	r2, #65	; 0x41
   11eac:	715a      	strb	r2, [r3, #5]
   11eae:	e005      	b.n	11ebc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xb30>
                    SDO->CANtxBuff->data[0] = 0x40U;
   11eb0:	68fb      	ldr	r3, [r7, #12]
   11eb2:	681b      	ldr	r3, [r3, #0]
   11eb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11eb8:	2240      	movs	r2, #64	; 0x40
   11eba:	715a      	strb	r2, [r3, #5]
                sendResponse = true;
   11ebc:	2301      	movs	r3, #1
   11ebe:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
   11ec2:	e3dd      	b.n	12680 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
        }

        case CO_SDO_ST_UPLOAD_SEGMENTED:{
            /* verify client command specifier */
            if((SDO->CANrxData[0]&0xE0U) != 0x60U){
   11ec4:	68fb      	ldr	r3, [r7, #12]
   11ec6:	681b      	ldr	r3, [r3, #0]
   11ec8:	781b      	ldrb	r3, [r3, #0]
   11eca:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
   11ece:	2b60      	cmp	r3, #96	; 0x60
   11ed0:	d008      	beq.n	11ee4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xb58>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
   11ed2:	68fb      	ldr	r3, [r7, #12]
   11ed4:	681b      	ldr	r3, [r3, #0]
   11ed6:	4944      	ldr	r1, [pc, #272]	; (11fe8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc5c>)
   11ed8:	4618      	mov	r0, r3
   11eda:	4b41      	ldr	r3, [pc, #260]	; (11fe0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc54>)
   11edc:	4798      	blx	r3
                return -1;
   11ede:	f04f 33ff 	mov.w	r3, #4294967295
   11ee2:	e3e9      	b.n	126b8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            /* verify toggle bit */
            i = ((SDO->CANrxData[0]&0x10U) != 0) ? 1U : 0U;
   11ee4:	68fb      	ldr	r3, [r7, #12]
   11ee6:	681b      	ldr	r3, [r3, #0]
   11ee8:	781b      	ldrb	r3, [r3, #0]
   11eea:	f003 0310 	and.w	r3, r3, #16
   11eee:	2b00      	cmp	r3, #0
   11ef0:	d001      	beq.n	11ef6 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xb6a>
   11ef2:	2301      	movs	r3, #1
   11ef4:	e000      	b.n	11ef8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xb6c>
   11ef6:	2300      	movs	r3, #0
   11ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
            if(i != SDO->sequence){
   11efa:	68fb      	ldr	r3, [r7, #12]
   11efc:	681b      	ldr	r3, [r3, #0]
   11efe:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   11f02:	461a      	mov	r2, r3
   11f04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11f06:	429a      	cmp	r2, r3
   11f08:	d008      	beq.n	11f1c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xb90>
                CO_SDO_abort(SDO, CO_SDO_AB_TOGGLE_BIT);/* toggle bit not alternated */
   11f0a:	68fb      	ldr	r3, [r7, #12]
   11f0c:	681b      	ldr	r3, [r3, #0]
   11f0e:	4937      	ldr	r1, [pc, #220]	; (11fec <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc60>)
   11f10:	4618      	mov	r0, r3
   11f12:	4b33      	ldr	r3, [pc, #204]	; (11fe0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc54>)
   11f14:	4798      	blx	r3
                return -1;
   11f16:	f04f 33ff 	mov.w	r3, #4294967295
   11f1a:	e3cd      	b.n	126b8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            /* calculate length to be sent */
            len = SDO->ODF_arg.dataLength - SDO->bufferOffset;
   11f1c:	68fb      	ldr	r3, [r7, #12]
   11f1e:	681b      	ldr	r3, [r3, #0]
   11f20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   11f22:	68fb      	ldr	r3, [r7, #12]
   11f24:	681b      	ldr	r3, [r3, #0]
   11f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   11f28:	1ad3      	subs	r3, r2, r3
   11f2a:	643b      	str	r3, [r7, #64]	; 0x40
            if(len > 7U) len = 7U;
   11f2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11f2e:	2b07      	cmp	r3, #7
   11f30:	d901      	bls.n	11f36 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xbaa>
   11f32:	2307      	movs	r3, #7
   11f34:	643b      	str	r3, [r7, #64]	; 0x40

            /* If data type is domain, re-fill the data buffer if neccessary and indicated so. */
            if((SDO->ODF_arg.ODdataStorage == 0) && (len < 7U) && (!SDO->ODF_arg.lastSegment)){
   11f36:	68fb      	ldr	r3, [r7, #12]
   11f38:	681b      	ldr	r3, [r3, #0]
   11f3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   11f3c:	2b00      	cmp	r3, #0
   11f3e:	d179      	bne.n	12034 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xca8>
   11f40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11f42:	2b06      	cmp	r3, #6
   11f44:	d876      	bhi.n	12034 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xca8>
   11f46:	68fb      	ldr	r3, [r7, #12]
   11f48:	681b      	ldr	r3, [r3, #0]
   11f4a:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
   11f4e:	2b00      	cmp	r3, #0
   11f50:	d170      	bne.n	12034 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xca8>
                /* copy previous data to the beginning */
                for(i=0U; i<len; i++){
   11f52:	2300      	movs	r3, #0
   11f54:	63fb      	str	r3, [r7, #60]	; 0x3c
   11f56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   11f58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11f5a:	429a      	cmp	r2, r3
   11f5c:	d213      	bcs.n	11f86 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xbfa>
                    SDO->ODF_arg.data[i] = SDO->ODF_arg.data[SDO->bufferOffset+i];
   11f5e:	68fb      	ldr	r3, [r7, #12]
   11f60:	681b      	ldr	r3, [r3, #0]
   11f62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   11f64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11f66:	4413      	add	r3, r2
   11f68:	68fa      	ldr	r2, [r7, #12]
   11f6a:	6812      	ldr	r2, [r2, #0]
   11f6c:	6c51      	ldr	r1, [r2, #68]	; 0x44
   11f6e:	68fa      	ldr	r2, [r7, #12]
   11f70:	6812      	ldr	r2, [r2, #0]
   11f72:	6b90      	ldr	r0, [r2, #56]	; 0x38
   11f74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   11f76:	4402      	add	r2, r0
   11f78:	440a      	add	r2, r1
   11f7a:	7812      	ldrb	r2, [r2, #0]
   11f7c:	701a      	strb	r2, [r3, #0]
                for(i=0U; i<len; i++){
   11f7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11f80:	3301      	adds	r3, #1
   11f82:	63fb      	str	r3, [r7, #60]	; 0x3c
   11f84:	e7e7      	b.n	11f56 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xbca>
                }

                /* move the beginning of the data buffer */
                SDO->ODF_arg.data += len;
   11f86:	68fb      	ldr	r3, [r7, #12]
   11f88:	681b      	ldr	r3, [r3, #0]
   11f8a:	68fa      	ldr	r2, [r7, #12]
   11f8c:	6812      	ldr	r2, [r2, #0]
   11f8e:	6c51      	ldr	r1, [r2, #68]	; 0x44
   11f90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   11f92:	440a      	add	r2, r1
   11f94:	645a      	str	r2, [r3, #68]	; 0x44
                SDO->ODF_arg.dataLength = CO_OD_getLength( SDO->entryNo, SDO->ODF_arg.subIndex) - len;
   11f96:	68fb      	ldr	r3, [r7, #12]
   11f98:	681c      	ldr	r4, [r3, #0]
   11f9a:	68fb      	ldr	r3, [r7, #12]
   11f9c:	681b      	ldr	r3, [r3, #0]
   11f9e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   11fa0:	68fb      	ldr	r3, [r7, #12]
   11fa2:	681b      	ldr	r3, [r3, #0]
   11fa4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
   11fa8:	461a      	mov	r2, r3
   11faa:	68f8      	ldr	r0, [r7, #12]
   11fac:	4b10      	ldr	r3, [pc, #64]	; (11ff0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc64>)
   11fae:	4798      	blx	r3
   11fb0:	4602      	mov	r2, r0
   11fb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11fb4:	1ad3      	subs	r3, r2, r3
   11fb6:	64e3      	str	r3, [r4, #76]	; 0x4c

                /* read next data from Object dictionary function */
                abortCode = CO_SDO_readOD( CO_SDO_BUFFER_SIZE);
   11fb8:	2120      	movs	r1, #32
   11fba:	68f8      	ldr	r0, [r7, #12]
   11fbc:	4b0d      	ldr	r3, [pc, #52]	; (11ff4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc68>)
   11fbe:	4798      	blx	r3
   11fc0:	62b8      	str	r0, [r7, #40]	; 0x28
                if(abortCode != 0U){
   11fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11fc4:	2b00      	cmp	r3, #0
   11fc6:	d017      	beq.n	11ff8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>
                    CO_SDO_abort(SDO, abortCode);
   11fc8:	68fb      	ldr	r3, [r7, #12]
   11fca:	681b      	ldr	r3, [r3, #0]
   11fcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   11fce:	4618      	mov	r0, r3
   11fd0:	4b03      	ldr	r3, [pc, #12]	; (11fe0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc54>)
   11fd2:	4798      	blx	r3
                    return -1;
   11fd4:	f04f 33ff 	mov.w	r3, #4294967295
   11fd8:	e36e      	b.n	126b8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
   11fda:	bf00      	nop
   11fdc:	000111cd 	.word	0x000111cd
   11fe0:	00011301 	.word	0x00011301
   11fe4:	000107dd 	.word	0x000107dd
   11fe8:	05040001 	.word	0x05040001
   11fec:	05030000 	.word	0x05030000
   11ff0:	00010cf1 	.word	0x00010cf1
   11ff4:	000110ad 	.word	0x000110ad
                }

                /* return to the original data buffer */
                SDO->ODF_arg.data -= len;
   11ff8:	68fb      	ldr	r3, [r7, #12]
   11ffa:	681b      	ldr	r3, [r3, #0]
   11ffc:	68fa      	ldr	r2, [r7, #12]
   11ffe:	6812      	ldr	r2, [r2, #0]
   12000:	6c51      	ldr	r1, [r2, #68]	; 0x44
   12002:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   12004:	4252      	negs	r2, r2
   12006:	440a      	add	r2, r1
   12008:	645a      	str	r2, [r3, #68]	; 0x44
                SDO->ODF_arg.dataLength +=  len;
   1200a:	68fb      	ldr	r3, [r7, #12]
   1200c:	681b      	ldr	r3, [r3, #0]
   1200e:	68fa      	ldr	r2, [r7, #12]
   12010:	6812      	ldr	r2, [r2, #0]
   12012:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
   12014:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   12016:	440a      	add	r2, r1
   12018:	64da      	str	r2, [r3, #76]	; 0x4c
                SDO->bufferOffset = 0;
   1201a:	68fb      	ldr	r3, [r7, #12]
   1201c:	681b      	ldr	r3, [r3, #0]
   1201e:	2200      	movs	r2, #0
   12020:	639a      	str	r2, [r3, #56]	; 0x38

                /* re-calculate the length */
                len = SDO->ODF_arg.dataLength;
   12022:	68fb      	ldr	r3, [r7, #12]
   12024:	681b      	ldr	r3, [r3, #0]
   12026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   12028:	643b      	str	r3, [r7, #64]	; 0x40
                if(len > 7U) len = 7U;
   1202a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1202c:	2b07      	cmp	r3, #7
   1202e:	d901      	bls.n	12034 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xca8>
   12030:	2307      	movs	r3, #7
   12032:	643b      	str	r3, [r7, #64]	; 0x40
            }

            /* fill response data bytes */
            for(i=0U; i<len; i++)
   12034:	2300      	movs	r3, #0
   12036:	63fb      	str	r3, [r7, #60]	; 0x3c
   12038:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1203a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1203c:	429a      	cmp	r2, r3
   1203e:	d215      	bcs.n	1206c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xce0>
                SDO->CANtxBuff->data[i+1] = SDO->ODF_arg.data[SDO->bufferOffset++];
   12040:	68fb      	ldr	r3, [r7, #12]
   12042:	681b      	ldr	r3, [r3, #0]
   12044:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   12048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1204a:	1c59      	adds	r1, r3, #1
   1204c:	68fb      	ldr	r3, [r7, #12]
   1204e:	681b      	ldr	r3, [r3, #0]
   12050:	6c5c      	ldr	r4, [r3, #68]	; 0x44
   12052:	68fb      	ldr	r3, [r7, #12]
   12054:	681a      	ldr	r2, [r3, #0]
   12056:	6b93      	ldr	r3, [r2, #56]	; 0x38
   12058:	1c5d      	adds	r5, r3, #1
   1205a:	6395      	str	r5, [r2, #56]	; 0x38
   1205c:	4423      	add	r3, r4
   1205e:	781a      	ldrb	r2, [r3, #0]
   12060:	1843      	adds	r3, r0, r1
   12062:	715a      	strb	r2, [r3, #5]
            for(i=0U; i<len; i++)
   12064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12066:	3301      	adds	r3, #1
   12068:	63fb      	str	r3, [r7, #60]	; 0x3c
   1206a:	e7e5      	b.n	12038 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xcac>

            /* first response byte */
            SDO->CANtxBuff->data[0] = 0x00 | (SDO->sequence ? 0x10 : 0x00) | ((7-len)<<1);
   1206c:	68fb      	ldr	r3, [r7, #12]
   1206e:	681b      	ldr	r3, [r3, #0]
   12070:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   12074:	68fa      	ldr	r2, [r7, #12]
   12076:	6812      	ldr	r2, [r2, #0]
   12078:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
   1207c:	2a00      	cmp	r2, #0
   1207e:	d001      	beq.n	12084 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xcf8>
   12080:	2110      	movs	r1, #16
   12082:	e000      	b.n	12086 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xcfa>
   12084:	2100      	movs	r1, #0
   12086:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   12088:	b2d2      	uxtb	r2, r2
   1208a:	f1c2 0207 	rsb	r2, r2, #7
   1208e:	b2d2      	uxtb	r2, r2
   12090:	0052      	lsls	r2, r2, #1
   12092:	b2d2      	uxtb	r2, r2
   12094:	430a      	orrs	r2, r1
   12096:	b2d2      	uxtb	r2, r2
   12098:	715a      	strb	r2, [r3, #5]
            SDO->sequence = (SDO->sequence) ? 0 : 1;
   1209a:	68fb      	ldr	r3, [r7, #12]
   1209c:	681b      	ldr	r3, [r3, #0]
   1209e:	68fa      	ldr	r2, [r7, #12]
   120a0:	6812      	ldr	r2, [r2, #0]
   120a2:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
   120a6:	2a00      	cmp	r2, #0
   120a8:	bf0c      	ite	eq
   120aa:	2201      	moveq	r2, #1
   120ac:	2200      	movne	r2, #0
   120ae:	b2d2      	uxtb	r2, r2
   120b0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

            /* verify end of transfer */
            if((SDO->bufferOffset == SDO->ODF_arg.dataLength) && (SDO->ODF_arg.lastSegment)){
   120b4:	68fb      	ldr	r3, [r7, #12]
   120b6:	681b      	ldr	r3, [r3, #0]
   120b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   120ba:	68fb      	ldr	r3, [r7, #12]
   120bc:	681b      	ldr	r3, [r3, #0]
   120be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   120c0:	429a      	cmp	r2, r3
   120c2:	d117      	bne.n	120f4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xd68>
   120c4:	68fb      	ldr	r3, [r7, #12]
   120c6:	681b      	ldr	r3, [r3, #0]
   120c8:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
   120cc:	2b00      	cmp	r3, #0
   120ce:	d011      	beq.n	120f4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xd68>
                SDO->CANtxBuff->data[0] |= 0x01;
   120d0:	68fb      	ldr	r3, [r7, #12]
   120d2:	681b      	ldr	r3, [r3, #0]
   120d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   120d8:	68fa      	ldr	r2, [r7, #12]
   120da:	6812      	ldr	r2, [r2, #0]
   120dc:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
   120e0:	7952      	ldrb	r2, [r2, #5]
   120e2:	f042 0201 	orr.w	r2, r2, #1
   120e6:	b2d2      	uxtb	r2, r2
   120e8:	715a      	strb	r2, [r3, #5]
                SDO->state = CO_SDO_ST_IDLE;
   120ea:	68fb      	ldr	r3, [r7, #12]
   120ec:	681b      	ldr	r3, [r3, #0]
   120ee:	2200      	movs	r2, #0
   120f0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            }

            /* send response */
            sendResponse = true;
   120f4:	2301      	movs	r3, #1
   120f6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
   120fa:	e2c1      	b.n	12680 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
        }

        case CO_SDO_ST_UPLOAD_BL_INITIATE:{
            /* default response */
            SDO->CANtxBuff->data[1] = SDO->CANrxData[1];
   120fc:	68fb      	ldr	r3, [r7, #12]
   120fe:	681b      	ldr	r3, [r3, #0]
   12100:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   12104:	68fa      	ldr	r2, [r7, #12]
   12106:	6812      	ldr	r2, [r2, #0]
   12108:	7852      	ldrb	r2, [r2, #1]
   1210a:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = SDO->CANrxData[2];
   1210c:	68fb      	ldr	r3, [r7, #12]
   1210e:	681b      	ldr	r3, [r3, #0]
   12110:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   12114:	68fa      	ldr	r2, [r7, #12]
   12116:	6812      	ldr	r2, [r2, #0]
   12118:	7892      	ldrb	r2, [r2, #2]
   1211a:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->CANrxData[3];
   1211c:	68fb      	ldr	r3, [r7, #12]
   1211e:	681b      	ldr	r3, [r3, #0]
   12120:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   12124:	68fa      	ldr	r2, [r7, #12]
   12126:	6812      	ldr	r2, [r2, #0]
   12128:	78d2      	ldrb	r2, [r2, #3]
   1212a:	721a      	strb	r2, [r3, #8]

            /* calculate CRC, if enabled */
            if((SDO->CANrxData[0] & 0x04U) != 0U){
   1212c:	68fb      	ldr	r3, [r7, #12]
   1212e:	681b      	ldr	r3, [r3, #0]
   12130:	781b      	ldrb	r3, [r3, #0]
   12132:	f003 0304 	and.w	r3, r3, #4
   12136:	2b00      	cmp	r3, #0
   12138:	d013      	beq.n	12162 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xdd6>
                SDO->crcEnabled = true;
   1213a:	68fb      	ldr	r3, [r7, #12]
   1213c:	681b      	ldr	r3, [r3, #0]
   1213e:	2201      	movs	r2, #1
   12140:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                SDO->crc = crc16_ccitt(SDO->ODF_arg.data, SDO->ODF_arg.dataLength, 0);
   12144:	68fb      	ldr	r3, [r7, #12]
   12146:	681c      	ldr	r4, [r3, #0]
   12148:	68fb      	ldr	r3, [r7, #12]
   1214a:	681b      	ldr	r3, [r3, #0]
   1214c:	6c59      	ldr	r1, [r3, #68]	; 0x44
   1214e:	68fb      	ldr	r3, [r7, #12]
   12150:	681b      	ldr	r3, [r3, #0]
   12152:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   12154:	2300      	movs	r3, #0
   12156:	68f8      	ldr	r0, [r7, #12]
   12158:	4d93      	ldr	r5, [pc, #588]	; (123a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x101c>)
   1215a:	47a8      	blx	r5
   1215c:	4603      	mov	r3, r0
   1215e:	6763      	str	r3, [r4, #116]	; 0x74
   12160:	e008      	b.n	12174 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xde8>
            }
            else{
                SDO->crcEnabled = false;
   12162:	68fb      	ldr	r3, [r7, #12]
   12164:	681b      	ldr	r3, [r3, #0]
   12166:	2200      	movs	r2, #0
   12168:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                SDO->crc = 0;
   1216c:	68fb      	ldr	r3, [r7, #12]
   1216e:	681b      	ldr	r3, [r3, #0]
   12170:	2200      	movs	r2, #0
   12172:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Number of segments per block */
            SDO->blksize = SDO->CANrxData[4];
   12174:	68fb      	ldr	r3, [r7, #12]
   12176:	681b      	ldr	r3, [r3, #0]
   12178:	68fa      	ldr	r2, [r7, #12]
   1217a:	6812      	ldr	r2, [r2, #0]
   1217c:	7912      	ldrb	r2, [r2, #4]
   1217e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

            /* verify client subcommand */
            if((SDO->CANrxData[0]&0x03U) != 0x00U){
   12182:	68fb      	ldr	r3, [r7, #12]
   12184:	681b      	ldr	r3, [r3, #0]
   12186:	781b      	ldrb	r3, [r3, #0]
   12188:	f003 0303 	and.w	r3, r3, #3
   1218c:	2b00      	cmp	r3, #0
   1218e:	d008      	beq.n	121a2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xe16>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
   12190:	68fb      	ldr	r3, [r7, #12]
   12192:	681b      	ldr	r3, [r3, #0]
   12194:	4985      	ldr	r1, [pc, #532]	; (123ac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1020>)
   12196:	4618      	mov	r0, r3
   12198:	4b85      	ldr	r3, [pc, #532]	; (123b0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1024>)
   1219a:	4798      	blx	r3
                return -1;
   1219c:	f04f 33ff 	mov.w	r3, #4294967295
   121a0:	e28a      	b.n	126b8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            /* verify blksize and if SDO data buffer is large enough */
            if((SDO->blksize < 1U) || (SDO->blksize > 127U) ||
   121a2:	68fb      	ldr	r3, [r7, #12]
   121a4:	681b      	ldr	r3, [r3, #0]
   121a6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
   121aa:	2b00      	cmp	r3, #0
   121ac:	d019      	beq.n	121e2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xe56>
   121ae:	68fb      	ldr	r3, [r7, #12]
   121b0:	681b      	ldr	r3, [r3, #0]
   121b2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
   121b6:	b25b      	sxtb	r3, r3
   121b8:	2b00      	cmp	r3, #0
   121ba:	db12      	blt.n	121e2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xe56>
               (((SDO->blksize*7U) > SDO->ODF_arg.dataLength) && (!SDO->ODF_arg.lastSegment))){
   121bc:	68fb      	ldr	r3, [r7, #12]
   121be:	681b      	ldr	r3, [r3, #0]
   121c0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
   121c4:	461a      	mov	r2, r3
   121c6:	4613      	mov	r3, r2
   121c8:	00db      	lsls	r3, r3, #3
   121ca:	1a9a      	subs	r2, r3, r2
   121cc:	68fb      	ldr	r3, [r7, #12]
   121ce:	681b      	ldr	r3, [r3, #0]
   121d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            if((SDO->blksize < 1U) || (SDO->blksize > 127U) ||
   121d2:	429a      	cmp	r2, r3
   121d4:	d90e      	bls.n	121f4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xe68>
               (((SDO->blksize*7U) > SDO->ODF_arg.dataLength) && (!SDO->ODF_arg.lastSegment))){
   121d6:	68fb      	ldr	r3, [r7, #12]
   121d8:	681b      	ldr	r3, [r3, #0]
   121da:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
   121de:	2b00      	cmp	r3, #0
   121e0:	d108      	bne.n	121f4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xe68>
                CO_SDO_abort(SDO, CO_SDO_AB_BLOCK_SIZE); /* Invalid block size (block mode only). */
   121e2:	68fb      	ldr	r3, [r7, #12]
   121e4:	681b      	ldr	r3, [r3, #0]
   121e6:	4973      	ldr	r1, [pc, #460]	; (123b4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1028>)
   121e8:	4618      	mov	r0, r3
   121ea:	4b71      	ldr	r3, [pc, #452]	; (123b0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1024>)
   121ec:	4798      	blx	r3
                return -1;
   121ee:	f04f 33ff 	mov.w	r3, #4294967295
   121f2:	e261      	b.n	126b8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            /* indicate data size, if known */
            if(SDO->ODF_arg.dataLengthTotal != 0U){
   121f4:	68fb      	ldr	r3, [r7, #12]
   121f6:	681b      	ldr	r3, [r3, #0]
   121f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   121fa:	2b00      	cmp	r3, #0
   121fc:	d015      	beq.n	1222a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xe9e>
                uint32_t len = SDO->ODF_arg.dataLengthTotal;
   121fe:	68fb      	ldr	r3, [r7, #12]
   12200:	681b      	ldr	r3, [r3, #0]
   12202:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   12204:	613b      	str	r3, [r7, #16]
                CO_memcpySwap4(&SDO->CANtxBuff->data[4], &len);
   12206:	68fb      	ldr	r3, [r7, #12]
   12208:	681b      	ldr	r3, [r3, #0]
   1220a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   1220e:	3309      	adds	r3, #9
   12210:	f107 0210 	add.w	r2, r7, #16
   12214:	4619      	mov	r1, r3
   12216:	68f8      	ldr	r0, [r7, #12]
   12218:	4b67      	ldr	r3, [pc, #412]	; (123b8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x102c>)
   1221a:	4798      	blx	r3
                SDO->CANtxBuff->data[0] = 0xC6U;
   1221c:	68fb      	ldr	r3, [r7, #12]
   1221e:	681b      	ldr	r3, [r3, #0]
   12220:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   12224:	22c6      	movs	r2, #198	; 0xc6
   12226:	715a      	strb	r2, [r3, #5]
   12228:	e005      	b.n	12236 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xeaa>
            }
            else{
                SDO->CANtxBuff->data[0] = 0xC4U;
   1222a:	68fb      	ldr	r3, [r7, #12]
   1222c:	681b      	ldr	r3, [r3, #0]
   1222e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   12232:	22c4      	movs	r2, #196	; 0xc4
   12234:	715a      	strb	r2, [r3, #5]
            }

            /* send response */
            SDO->state = CO_SDO_ST_UPLOAD_BL_INITIATE_2;
   12236:	68fb      	ldr	r3, [r7, #12]
   12238:	681b      	ldr	r3, [r3, #0]
   1223a:	2225      	movs	r2, #37	; 0x25
   1223c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            sendResponse = true;
   12240:	2301      	movs	r3, #1
   12242:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
   12246:	e21b      	b.n	12680 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
        }

        case CO_SDO_ST_UPLOAD_BL_INITIATE_2:{
            /* verify client command specifier and subcommand */
            if((SDO->CANrxData[0]&0xE3U) != 0xA3U){
   12248:	68fb      	ldr	r3, [r7, #12]
   1224a:	681b      	ldr	r3, [r3, #0]
   1224c:	781b      	ldrb	r3, [r3, #0]
   1224e:	f003 03e3 	and.w	r3, r3, #227	; 0xe3
   12252:	2ba3      	cmp	r3, #163	; 0xa3
   12254:	d008      	beq.n	12268 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xedc>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
   12256:	68fb      	ldr	r3, [r7, #12]
   12258:	681b      	ldr	r3, [r3, #0]
   1225a:	4954      	ldr	r1, [pc, #336]	; (123ac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1020>)
   1225c:	4618      	mov	r0, r3
   1225e:	4b54      	ldr	r3, [pc, #336]	; (123b0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1024>)
   12260:	4798      	blx	r3
                return -1;
   12262:	f04f 33ff 	mov.w	r3, #4294967295
   12266:	e227      	b.n	126b8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            SDO->bufferOffset = 0;
   12268:	68fb      	ldr	r3, [r7, #12]
   1226a:	681b      	ldr	r3, [r3, #0]
   1226c:	2200      	movs	r2, #0
   1226e:	639a      	str	r2, [r3, #56]	; 0x38
            SDO->sequence = 0;
   12270:	68fb      	ldr	r3, [r7, #12]
   12272:	681b      	ldr	r3, [r3, #0]
   12274:	2200      	movs	r2, #0
   12276:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
            SDO->endOfTransfer = false;
   1227a:	68fb      	ldr	r3, [r7, #12]
   1227c:	681b      	ldr	r3, [r3, #0]
   1227e:	2200      	movs	r2, #0
   12280:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
            SDO->CANrxNew = false;
   12284:	68fb      	ldr	r3, [r7, #12]
   12286:	681b      	ldr	r3, [r3, #0]
   12288:	2200      	movs	r2, #0
   1228a:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
            SDO->state = CO_SDO_ST_UPLOAD_BL_SUBBLOCK;
   1228e:	68fb      	ldr	r3, [r7, #12]
   12290:	681b      	ldr	r3, [r3, #0]
   12292:	2226      	movs	r2, #38	; 0x26
   12294:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            /* continue in next case */
        }

        case CO_SDO_ST_UPLOAD_BL_SUBBLOCK:{
            /* is block confirmation received */
            if(SDO->CANrxNew){
   12298:	68fb      	ldr	r3, [r7, #12]
   1229a:	681b      	ldr	r3, [r3, #0]
   1229c:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
   122a0:	2b00      	cmp	r3, #0
   122a2:	f000 813f 	beq.w	12524 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1198>
                uint8_t ackseq;
                uint32_t j;

                /* verify client command specifier and subcommand */
                if((SDO->CANrxData[0]&0xE3U) != 0xA2U){
   122a6:	68fb      	ldr	r3, [r7, #12]
   122a8:	681b      	ldr	r3, [r3, #0]
   122aa:	781b      	ldrb	r3, [r3, #0]
   122ac:	f003 03e3 	and.w	r3, r3, #227	; 0xe3
   122b0:	2ba2      	cmp	r3, #162	; 0xa2
   122b2:	d008      	beq.n	122c6 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xf3a>
                    CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
   122b4:	68fb      	ldr	r3, [r7, #12]
   122b6:	681b      	ldr	r3, [r3, #0]
   122b8:	493c      	ldr	r1, [pc, #240]	; (123ac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1020>)
   122ba:	4618      	mov	r0, r3
   122bc:	4b3c      	ldr	r3, [pc, #240]	; (123b0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1024>)
   122be:	4798      	blx	r3
                    return -1;
   122c0:	f04f 33ff 	mov.w	r3, #4294967295
   122c4:	e1f8      	b.n	126b8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                }

                ackseq = SDO->CANrxData[1];   /* sequence number of the last segment, that was received correctly. */
   122c6:	68fb      	ldr	r3, [r7, #12]
   122c8:	681b      	ldr	r3, [r3, #0]
   122ca:	785b      	ldrb	r3, [r3, #1]
   122cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

                /* verify if response is too early */
                if(ackseq > SDO->sequence){
   122d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   122d4:	68fa      	ldr	r2, [r7, #12]
   122d6:	6812      	ldr	r2, [r2, #0]
   122d8:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
   122dc:	4293      	cmp	r3, r2
   122de:	dd08      	ble.n	122f2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xf66>
                    CO_SDO_abort(SDO, CO_SDO_AB_SEQ_NUM); /* Invalid sequence */
   122e0:	68fb      	ldr	r3, [r7, #12]
   122e2:	681b      	ldr	r3, [r3, #0]
   122e4:	4935      	ldr	r1, [pc, #212]	; (123bc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1030>)
   122e6:	4618      	mov	r0, r3
   122e8:	4b31      	ldr	r3, [pc, #196]	; (123b0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1024>)
   122ea:	4798      	blx	r3
                    return -1;
   122ec:	f04f 33ff 	mov.w	r3, #4294967295
   122f0:	e1e2      	b.n	126b8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                }

                /* end of transfer */
                if((SDO->endOfTransfer) && (ackseq == SDO->blksize)){
   122f2:	68fb      	ldr	r3, [r7, #12]
   122f4:	681b      	ldr	r3, [r3, #0]
   122f6:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
   122fa:	2b00      	cmp	r3, #0
   122fc:	d033      	beq.n	12366 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xfda>
   122fe:	68fb      	ldr	r3, [r7, #12]
   12300:	681b      	ldr	r3, [r3, #0]
   12302:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
   12306:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   1230a:	429a      	cmp	r2, r3
   1230c:	d12b      	bne.n	12366 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xfda>
                    /* first response byte */
                    SDO->CANtxBuff->data[0] = 0xC1 | ((7 - SDO->lastLen) << 2);
   1230e:	68fb      	ldr	r3, [r7, #12]
   12310:	681b      	ldr	r3, [r3, #0]
   12312:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   12316:	68fa      	ldr	r2, [r7, #12]
   12318:	6812      	ldr	r2, [r2, #0]
   1231a:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
   1231e:	f1c2 0207 	rsb	r2, r2, #7
   12322:	0092      	lsls	r2, r2, #2
   12324:	b252      	sxtb	r2, r2
   12326:	f062 023e 	orn	r2, r2, #62	; 0x3e
   1232a:	b252      	sxtb	r2, r2
   1232c:	b2d2      	uxtb	r2, r2
   1232e:	715a      	strb	r2, [r3, #5]

                    /* CRC */
                    if(SDO->crcEnabled)
   12330:	68fb      	ldr	r3, [r7, #12]
   12332:	681b      	ldr	r3, [r3, #0]
   12334:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
   12338:	2b00      	cmp	r3, #0
   1233a:	d00b      	beq.n	12354 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xfc8>
                        CO_memcpySwap2(&SDO->CANtxBuff->data[1], &SDO->crc);
   1233c:	68fb      	ldr	r3, [r7, #12]
   1233e:	681b      	ldr	r3, [r3, #0]
   12340:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   12344:	1d99      	adds	r1, r3, #6
   12346:	68fb      	ldr	r3, [r7, #12]
   12348:	681b      	ldr	r3, [r3, #0]
   1234a:	3374      	adds	r3, #116	; 0x74
   1234c:	461a      	mov	r2, r3
   1234e:	68f8      	ldr	r0, [r7, #12]
   12350:	4b1b      	ldr	r3, [pc, #108]	; (123c0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1034>)
   12352:	4798      	blx	r3

                    SDO->state = CO_SDO_ST_UPLOAD_BL_END;
   12354:	68fb      	ldr	r3, [r7, #12]
   12356:	681b      	ldr	r3, [r3, #0]
   12358:	2227      	movs	r2, #39	; 0x27
   1235a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

                    /* send response */
                    sendResponse = true;
   1235e:	2301      	movs	r3, #1
   12360:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                    break;
   12364:	e18c      	b.n	12680 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
                }

                /* move remaining data to the beginning */
                for(i=ackseq*7, j=0; i<SDO->ODF_arg.dataLength; i++, j++)
   12366:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   1236a:	4613      	mov	r3, r2
   1236c:	00db      	lsls	r3, r3, #3
   1236e:	1a9b      	subs	r3, r3, r2
   12370:	63fb      	str	r3, [r7, #60]	; 0x3c
   12372:	2300      	movs	r3, #0
   12374:	63bb      	str	r3, [r7, #56]	; 0x38
   12376:	68fb      	ldr	r3, [r7, #12]
   12378:	681b      	ldr	r3, [r3, #0]
   1237a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   1237c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1237e:	429a      	cmp	r2, r3
   12380:	d920      	bls.n	123c4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1038>
                    SDO->ODF_arg.data[j] = SDO->ODF_arg.data[i];
   12382:	68fb      	ldr	r3, [r7, #12]
   12384:	681b      	ldr	r3, [r3, #0]
   12386:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   12388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1238a:	4413      	add	r3, r2
   1238c:	68fa      	ldr	r2, [r7, #12]
   1238e:	6812      	ldr	r2, [r2, #0]
   12390:	6c51      	ldr	r1, [r2, #68]	; 0x44
   12392:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   12394:	440a      	add	r2, r1
   12396:	7812      	ldrb	r2, [r2, #0]
   12398:	701a      	strb	r2, [r3, #0]
                for(i=ackseq*7, j=0; i<SDO->ODF_arg.dataLength; i++, j++)
   1239a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1239c:	3301      	adds	r3, #1
   1239e:	63fb      	str	r3, [r7, #60]	; 0x3c
   123a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   123a2:	3301      	adds	r3, #1
   123a4:	63bb      	str	r3, [r7, #56]	; 0x38
   123a6:	e7e6      	b.n	12376 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xfea>
   123a8:	00012d05 	.word	0x00012d05
   123ac:	05040001 	.word	0x05040001
   123b0:	00011301 	.word	0x00011301
   123b4:	05040002 	.word	0x05040002
   123b8:	000107dd 	.word	0x000107dd
   123bc:	05040003 	.word	0x05040003
   123c0:	000107ad 	.word	0x000107ad

                /* set remaining data length in buffer */
                SDO->ODF_arg.dataLength -= ackseq * 7U;
   123c4:	68fb      	ldr	r3, [r7, #12]
   123c6:	6819      	ldr	r1, [r3, #0]
   123c8:	68fb      	ldr	r3, [r7, #12]
   123ca:	681b      	ldr	r3, [r3, #0]
   123cc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   123ce:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   123d2:	4613      	mov	r3, r2
   123d4:	00db      	lsls	r3, r3, #3
   123d6:	1a9b      	subs	r3, r3, r2
   123d8:	1ac3      	subs	r3, r0, r3
   123da:	64cb      	str	r3, [r1, #76]	; 0x4c

                /* new block size */
                SDO->blksize = SDO->CANrxData[2];
   123dc:	68fb      	ldr	r3, [r7, #12]
   123de:	681b      	ldr	r3, [r3, #0]
   123e0:	68fa      	ldr	r2, [r7, #12]
   123e2:	6812      	ldr	r2, [r2, #0]
   123e4:	7892      	ldrb	r2, [r2, #2]
   123e6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                /* If data type is domain, re-fill the data buffer if necessary and indicated so. */
                if((SDO->ODF_arg.ODdataStorage == 0) && (SDO->ODF_arg.dataLength < (SDO->blksize*7U)) && (!SDO->ODF_arg.lastSegment)){
   123ea:	68fb      	ldr	r3, [r7, #12]
   123ec:	681b      	ldr	r3, [r3, #0]
   123ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   123f0:	2b00      	cmp	r3, #0
   123f2:	d168      	bne.n	124c6 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x113a>
   123f4:	68fb      	ldr	r3, [r7, #12]
   123f6:	681b      	ldr	r3, [r3, #0]
   123f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   123fa:	68fb      	ldr	r3, [r7, #12]
   123fc:	681b      	ldr	r3, [r3, #0]
   123fe:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
   12402:	4619      	mov	r1, r3
   12404:	460b      	mov	r3, r1
   12406:	00db      	lsls	r3, r3, #3
   12408:	1a5b      	subs	r3, r3, r1
   1240a:	429a      	cmp	r2, r3
   1240c:	d25b      	bcs.n	124c6 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x113a>
   1240e:	68fb      	ldr	r3, [r7, #12]
   12410:	681b      	ldr	r3, [r3, #0]
   12412:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
   12416:	2b00      	cmp	r3, #0
   12418:	d155      	bne.n	124c6 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x113a>
                    /* move the beginning of the data buffer */
                    len = SDO->ODF_arg.dataLength; /* length of valid data in buffer */
   1241a:	68fb      	ldr	r3, [r7, #12]
   1241c:	681b      	ldr	r3, [r3, #0]
   1241e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   12420:	643b      	str	r3, [r7, #64]	; 0x40
                    SDO->ODF_arg.data += len;
   12422:	68fb      	ldr	r3, [r7, #12]
   12424:	681b      	ldr	r3, [r3, #0]
   12426:	68fa      	ldr	r2, [r7, #12]
   12428:	6812      	ldr	r2, [r2, #0]
   1242a:	6c51      	ldr	r1, [r2, #68]	; 0x44
   1242c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1242e:	440a      	add	r2, r1
   12430:	645a      	str	r2, [r3, #68]	; 0x44
                    SDO->ODF_arg.dataLength = CO_OD_getLength( SDO->entryNo, SDO->ODF_arg.subIndex) - len;
   12432:	68fb      	ldr	r3, [r7, #12]
   12434:	681c      	ldr	r4, [r3, #0]
   12436:	68fb      	ldr	r3, [r7, #12]
   12438:	681b      	ldr	r3, [r3, #0]
   1243a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   1243c:	68fb      	ldr	r3, [r7, #12]
   1243e:	681b      	ldr	r3, [r3, #0]
   12440:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
   12444:	461a      	mov	r2, r3
   12446:	68f8      	ldr	r0, [r7, #12]
   12448:	4b9d      	ldr	r3, [pc, #628]	; (126c0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1334>)
   1244a:	4798      	blx	r3
   1244c:	4602      	mov	r2, r0
   1244e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   12450:	1ad3      	subs	r3, r2, r3
   12452:	64e3      	str	r3, [r4, #76]	; 0x4c

                    /* read next data from Object dictionary function */
                    abortCode = CO_SDO_readOD( CO_SDO_BUFFER_SIZE);
   12454:	2120      	movs	r1, #32
   12456:	68f8      	ldr	r0, [r7, #12]
   12458:	4b9a      	ldr	r3, [pc, #616]	; (126c4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1338>)
   1245a:	4798      	blx	r3
   1245c:	62b8      	str	r0, [r7, #40]	; 0x28
                    if(abortCode != 0U){
   1245e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12460:	2b00      	cmp	r3, #0
   12462:	d008      	beq.n	12476 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x10ea>
                        CO_SDO_abort(SDO, abortCode);
   12464:	68fb      	ldr	r3, [r7, #12]
   12466:	681b      	ldr	r3, [r3, #0]
   12468:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1246a:	4618      	mov	r0, r3
   1246c:	4b96      	ldr	r3, [pc, #600]	; (126c8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x133c>)
   1246e:	4798      	blx	r3
                        return -1;
   12470:	f04f 33ff 	mov.w	r3, #4294967295
   12474:	e120      	b.n	126b8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                    }

                    /* calculate CRC on next bytes, if enabled */
                    if(SDO->crcEnabled){
   12476:	68fb      	ldr	r3, [r7, #12]
   12478:	681b      	ldr	r3, [r3, #0]
   1247a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
   1247e:	2b00      	cmp	r3, #0
   12480:	d010      	beq.n	124a4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1118>
                        SDO->crc = crc16_ccitt(SDO->ODF_arg.data, SDO->ODF_arg.dataLength, SDO->crc);
   12482:	68fb      	ldr	r3, [r7, #12]
   12484:	681c      	ldr	r4, [r3, #0]
   12486:	68fb      	ldr	r3, [r7, #12]
   12488:	681b      	ldr	r3, [r3, #0]
   1248a:	6c59      	ldr	r1, [r3, #68]	; 0x44
   1248c:	68fb      	ldr	r3, [r7, #12]
   1248e:	681b      	ldr	r3, [r3, #0]
   12490:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   12492:	68fb      	ldr	r3, [r7, #12]
   12494:	681b      	ldr	r3, [r3, #0]
   12496:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   12498:	b29b      	uxth	r3, r3
   1249a:	68f8      	ldr	r0, [r7, #12]
   1249c:	4d8b      	ldr	r5, [pc, #556]	; (126cc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1340>)
   1249e:	47a8      	blx	r5
   124a0:	4603      	mov	r3, r0
   124a2:	6763      	str	r3, [r4, #116]	; 0x74
                    }

                  /* return to the original data buffer */
                    SDO->ODF_arg.data -= len;
   124a4:	68fb      	ldr	r3, [r7, #12]
   124a6:	681b      	ldr	r3, [r3, #0]
   124a8:	68fa      	ldr	r2, [r7, #12]
   124aa:	6812      	ldr	r2, [r2, #0]
   124ac:	6c51      	ldr	r1, [r2, #68]	; 0x44
   124ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   124b0:	4252      	negs	r2, r2
   124b2:	440a      	add	r2, r1
   124b4:	645a      	str	r2, [r3, #68]	; 0x44
                    SDO->ODF_arg.dataLength +=  len;
   124b6:	68fb      	ldr	r3, [r7, #12]
   124b8:	681b      	ldr	r3, [r3, #0]
   124ba:	68fa      	ldr	r2, [r7, #12]
   124bc:	6812      	ldr	r2, [r2, #0]
   124be:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
   124c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   124c2:	440a      	add	r2, r1
   124c4:	64da      	str	r2, [r3, #76]	; 0x4c
                }

                /* verify if SDO data buffer is large enough */
                if(((SDO->blksize*7U) > SDO->ODF_arg.dataLength) && (!SDO->ODF_arg.lastSegment)){
   124c6:	68fb      	ldr	r3, [r7, #12]
   124c8:	681b      	ldr	r3, [r3, #0]
   124ca:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
   124ce:	461a      	mov	r2, r3
   124d0:	4613      	mov	r3, r2
   124d2:	00db      	lsls	r3, r3, #3
   124d4:	1a9a      	subs	r2, r3, r2
   124d6:	68fb      	ldr	r3, [r7, #12]
   124d8:	681b      	ldr	r3, [r3, #0]
   124da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   124dc:	429a      	cmp	r2, r3
   124de:	d90e      	bls.n	124fe <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1172>
   124e0:	68fb      	ldr	r3, [r7, #12]
   124e2:	681b      	ldr	r3, [r3, #0]
   124e4:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
   124e8:	2b00      	cmp	r3, #0
   124ea:	d108      	bne.n	124fe <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1172>
                    CO_SDO_abort(SDO, CO_SDO_AB_BLOCK_SIZE); /* Invalid block size (block mode only). */
   124ec:	68fb      	ldr	r3, [r7, #12]
   124ee:	681b      	ldr	r3, [r3, #0]
   124f0:	4977      	ldr	r1, [pc, #476]	; (126d0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1344>)
   124f2:	4618      	mov	r0, r3
   124f4:	4b74      	ldr	r3, [pc, #464]	; (126c8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x133c>)
   124f6:	4798      	blx	r3
                    return -1;
   124f8:	f04f 33ff 	mov.w	r3, #4294967295
   124fc:	e0dc      	b.n	126b8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                }

                SDO->bufferOffset = 0U;
   124fe:	68fb      	ldr	r3, [r7, #12]
   12500:	681b      	ldr	r3, [r3, #0]
   12502:	2200      	movs	r2, #0
   12504:	639a      	str	r2, [r3, #56]	; 0x38
                SDO->sequence = 0U;
   12506:	68fb      	ldr	r3, [r7, #12]
   12508:	681b      	ldr	r3, [r3, #0]
   1250a:	2200      	movs	r2, #0
   1250c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                SDO->endOfTransfer = false;
   12510:	68fb      	ldr	r3, [r7, #12]
   12512:	681b      	ldr	r3, [r3, #0]
   12514:	2200      	movs	r2, #0
   12516:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

                /* clear flag here */
                SDO->CANrxNew = false;
   1251a:	68fb      	ldr	r3, [r7, #12]
   1251c:	681b      	ldr	r3, [r3, #0]
   1251e:	2200      	movs	r2, #0
   12520:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
            }

            /* return, if all segments was already transfered or on end of transfer */
            if((SDO->sequence == SDO->blksize) || (SDO->endOfTransfer)){
   12524:	68fb      	ldr	r3, [r7, #12]
   12526:	681b      	ldr	r3, [r3, #0]
   12528:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
   1252c:	68fb      	ldr	r3, [r7, #12]
   1252e:	681b      	ldr	r3, [r3, #0]
   12530:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
   12534:	429a      	cmp	r2, r3
   12536:	d005      	beq.n	12544 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x11b8>
   12538:	68fb      	ldr	r3, [r7, #12]
   1253a:	681b      	ldr	r3, [r3, #0]
   1253c:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
   12540:	2b00      	cmp	r3, #0
   12542:	d001      	beq.n	12548 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x11bc>
                return 1;/* don't clear the SDO->CANrxNew flag, so return directly */
   12544:	2301      	movs	r3, #1
   12546:	e0b7      	b.n	126b8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            /* reset timeout */
            SDO->timeoutTimer = 0;
   12548:	68fb      	ldr	r3, [r7, #12]
   1254a:	681b      	ldr	r3, [r3, #0]
   1254c:	2200      	movs	r2, #0
   1254e:	66da      	str	r2, [r3, #108]	; 0x6c

            /* calculate length to be sent */
            len = SDO->ODF_arg.dataLength - SDO->bufferOffset;
   12550:	68fb      	ldr	r3, [r7, #12]
   12552:	681b      	ldr	r3, [r3, #0]
   12554:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   12556:	68fb      	ldr	r3, [r7, #12]
   12558:	681b      	ldr	r3, [r3, #0]
   1255a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1255c:	1ad3      	subs	r3, r2, r3
   1255e:	643b      	str	r3, [r7, #64]	; 0x40
            if(len > 7U){
   12560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   12562:	2b07      	cmp	r3, #7
   12564:	d901      	bls.n	1256a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x11de>
                len = 7U;
   12566:	2307      	movs	r3, #7
   12568:	643b      	str	r3, [r7, #64]	; 0x40
            }

            /* fill response data bytes */
            for(i=0U; i<len; i++){
   1256a:	2300      	movs	r3, #0
   1256c:	63fb      	str	r3, [r7, #60]	; 0x3c
   1256e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   12570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   12572:	429a      	cmp	r2, r3
   12574:	d215      	bcs.n	125a2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1216>
                SDO->CANtxBuff->data[i+1] = SDO->ODF_arg.data[SDO->bufferOffset++];
   12576:	68fb      	ldr	r3, [r7, #12]
   12578:	681b      	ldr	r3, [r3, #0]
   1257a:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   1257e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12580:	1c59      	adds	r1, r3, #1
   12582:	68fb      	ldr	r3, [r7, #12]
   12584:	681b      	ldr	r3, [r3, #0]
   12586:	6c5c      	ldr	r4, [r3, #68]	; 0x44
   12588:	68fb      	ldr	r3, [r7, #12]
   1258a:	681a      	ldr	r2, [r3, #0]
   1258c:	6b93      	ldr	r3, [r2, #56]	; 0x38
   1258e:	1c5d      	adds	r5, r3, #1
   12590:	6395      	str	r5, [r2, #56]	; 0x38
   12592:	4423      	add	r3, r4
   12594:	781a      	ldrb	r2, [r3, #0]
   12596:	1843      	adds	r3, r0, r1
   12598:	715a      	strb	r2, [r3, #5]
            for(i=0U; i<len; i++){
   1259a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1259c:	3301      	adds	r3, #1
   1259e:	63fb      	str	r3, [r7, #60]	; 0x3c
   125a0:	e7e5      	b.n	1256e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x11e2>
            }

            /* first response byte */
            SDO->CANtxBuff->data[0] = ++SDO->sequence;
   125a2:	68fb      	ldr	r3, [r7, #12]
   125a4:	681b      	ldr	r3, [r3, #0]
   125a6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
   125aa:	68fb      	ldr	r3, [r7, #12]
   125ac:	681b      	ldr	r3, [r3, #0]
   125ae:	f893 106a 	ldrb.w	r1, [r3, #106]	; 0x6a
   125b2:	3101      	adds	r1, #1
   125b4:	b2c9      	uxtb	r1, r1
   125b6:	f883 106a 	strb.w	r1, [r3, #106]	; 0x6a
   125ba:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   125be:	7153      	strb	r3, [r2, #5]

            /* verify end of transfer */
            if((SDO->bufferOffset == SDO->ODF_arg.dataLength) && (SDO->ODF_arg.lastSegment)){
   125c0:	68fb      	ldr	r3, [r7, #12]
   125c2:	681b      	ldr	r3, [r3, #0]
   125c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   125c6:	68fb      	ldr	r3, [r7, #12]
   125c8:	681b      	ldr	r3, [r3, #0]
   125ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   125cc:	429a      	cmp	r2, r3
   125ce:	d125      	bne.n	1261c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1290>
   125d0:	68fb      	ldr	r3, [r7, #12]
   125d2:	681b      	ldr	r3, [r3, #0]
   125d4:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
   125d8:	2b00      	cmp	r3, #0
   125da:	d01f      	beq.n	1261c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1290>
                SDO->CANtxBuff->data[0] |= 0x80;
   125dc:	68fb      	ldr	r3, [r7, #12]
   125de:	681b      	ldr	r3, [r3, #0]
   125e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   125e4:	68fa      	ldr	r2, [r7, #12]
   125e6:	6812      	ldr	r2, [r2, #0]
   125e8:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
   125ec:	7952      	ldrb	r2, [r2, #5]
   125ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
   125f2:	b2d2      	uxtb	r2, r2
   125f4:	715a      	strb	r2, [r3, #5]
                SDO->lastLen = len;
   125f6:	68fb      	ldr	r3, [r7, #12]
   125f8:	681b      	ldr	r3, [r3, #0]
   125fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   125fc:	b2d2      	uxtb	r2, r2
   125fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                SDO->blksize = SDO->sequence;
   12602:	68fb      	ldr	r3, [r7, #12]
   12604:	681b      	ldr	r3, [r3, #0]
   12606:	68fa      	ldr	r2, [r7, #12]
   12608:	6812      	ldr	r2, [r2, #0]
   1260a:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
   1260e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                SDO->endOfTransfer = true;
   12612:	68fb      	ldr	r3, [r7, #12]
   12614:	681b      	ldr	r3, [r3, #0]
   12616:	2201      	movs	r2, #1
   12618:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
            }

            /* send response */
             ptrCODriverClass->CAN_Send(SDO->CANtxBuff);
   1261c:	4b2d      	ldr	r3, [pc, #180]	; (126d4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1348>)
   1261e:	681a      	ldr	r2, [r3, #0]
   12620:	68fb      	ldr	r3, [r7, #12]
   12622:	681b      	ldr	r3, [r3, #0]
   12624:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   12628:	4619      	mov	r1, r3
   1262a:	4610      	mov	r0, r2
   1262c:	4b2a      	ldr	r3, [pc, #168]	; (126d8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x134c>)
   1262e:	4798      	blx	r3

            /* Set timerNext_ms to 0 to inform OS to call this function again without delay. */
            if(timerNext_ms != NULL){
   12630:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12632:	2b00      	cmp	r3, #0
   12634:	d002      	beq.n	1263c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12b0>
                *timerNext_ms = 0;
   12636:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12638:	2200      	movs	r2, #0
   1263a:	601a      	str	r2, [r3, #0]
            }

            /* don't clear the SDO->CANrxNew flag, so return directly */
            return 1;
   1263c:	2301      	movs	r3, #1
   1263e:	e03b      	b.n	126b8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
        }

        case CO_SDO_ST_UPLOAD_BL_END:{
            /* verify client command specifier */
            if((SDO->CANrxData[0]&0xE1U) != 0xA1U){
   12640:	68fb      	ldr	r3, [r7, #12]
   12642:	681b      	ldr	r3, [r3, #0]
   12644:	781b      	ldrb	r3, [r3, #0]
   12646:	f003 03e1 	and.w	r3, r3, #225	; 0xe1
   1264a:	2ba1      	cmp	r3, #161	; 0xa1
   1264c:	d008      	beq.n	12660 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12d4>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
   1264e:	68fb      	ldr	r3, [r7, #12]
   12650:	681b      	ldr	r3, [r3, #0]
   12652:	4922      	ldr	r1, [pc, #136]	; (126dc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1350>)
   12654:	4618      	mov	r0, r3
   12656:	4b1c      	ldr	r3, [pc, #112]	; (126c8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x133c>)
   12658:	4798      	blx	r3
                return -1;
   1265a:	f04f 33ff 	mov.w	r3, #4294967295
   1265e:	e02b      	b.n	126b8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            SDO->state = CO_SDO_ST_IDLE;
   12660:	68fb      	ldr	r3, [r7, #12]
   12662:	681b      	ldr	r3, [r3, #0]
   12664:	2200      	movs	r2, #0
   12666:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            break;
   1266a:	e009      	b.n	12680 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
        }

        default:{
            CO_SDO_abort(SDO, CO_SDO_AB_DEVICE_INCOMPAT);/* general internal incompatibility in the device */
   1266c:	68fb      	ldr	r3, [r7, #12]
   1266e:	681b      	ldr	r3, [r3, #0]
   12670:	491b      	ldr	r1, [pc, #108]	; (126e0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1354>)
   12672:	4618      	mov	r0, r3
   12674:	4b14      	ldr	r3, [pc, #80]	; (126c8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x133c>)
   12676:	4798      	blx	r3
            return -1;
   12678:	f04f 33ff 	mov.w	r3, #4294967295
   1267c:	e01c      	b.n	126b8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            break;
   1267e:	bf00      	nop
        }
    }

    /* free buffer and send message */
    SDO->CANrxNew = false;
   12680:	68fb      	ldr	r3, [r7, #12]
   12682:	681b      	ldr	r3, [r3, #0]
   12684:	2200      	movs	r2, #0
   12686:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
    if(sendResponse) {
   1268a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
   1268e:	2b00      	cmp	r3, #0
   12690:	d009      	beq.n	126a6 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x131a>
        ptrCODriverClass->CAN_Send(SDO->CANtxBuff);
   12692:	4b10      	ldr	r3, [pc, #64]	; (126d4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1348>)
   12694:	681a      	ldr	r2, [r3, #0]
   12696:	68fb      	ldr	r3, [r7, #12]
   12698:	681b      	ldr	r3, [r3, #0]
   1269a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   1269e:	4619      	mov	r1, r3
   126a0:	4610      	mov	r0, r2
   126a2:	4b0d      	ldr	r3, [pc, #52]	; (126d8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x134c>)
   126a4:	4798      	blx	r3
    }

    if(SDO->state != CO_SDO_ST_IDLE){
   126a6:	68fb      	ldr	r3, [r7, #12]
   126a8:	681b      	ldr	r3, [r3, #0]
   126aa:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   126ae:	2b00      	cmp	r3, #0
   126b0:	d001      	beq.n	126b6 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132a>
        return 1;
   126b2:	2301      	movs	r3, #1
   126b4:	e000      	b.n	126b8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
    }

    return 0;
   126b6:	2300      	movs	r3, #0
}
   126b8:	4618      	mov	r0, r3
   126ba:	3748      	adds	r7, #72	; 0x48
   126bc:	46bd      	mov	sp, r7
   126be:	bdb0      	pop	{r4, r5, r7, pc}
   126c0:	00010cf1 	.word	0x00010cf1
   126c4:	000110ad 	.word	0x000110ad
   126c8:	00011301 	.word	0x00011301
   126cc:	00012d05 	.word	0x00012d05
   126d0:	05040002 	.word	0x05040002
   126d4:	20001a7c 	.word	0x20001a7c
   126d8:	0000dc1d 	.word	0x0000dc1d
   126dc:	05040001 	.word	0x05040001
   126e0:	06040047 	.word	0x06040047

000126e4 <_ZN13CO_SYNC_ClassC1Ev>:

#include "CO_SYNC_Class.h"
#include "CO_Driver_Class.h"

// default constructor
CO_SYNC_Class::CO_SYNC_Class()
   126e4:	b480      	push	{r7}
   126e6:	b083      	sub	sp, #12
   126e8:	af00      	add	r7, sp, #0
   126ea:	6078      	str	r0, [r7, #4]
{
} //CO_SYNC_Class
   126ec:	687b      	ldr	r3, [r7, #4]
   126ee:	4618      	mov	r0, r3
   126f0:	370c      	adds	r7, #12
   126f2:	46bd      	mov	sp, r7
   126f4:	bc80      	pop	{r7}
   126f6:	4770      	bx	lr

000126f8 <_ZN13CO_SYNC_ClassD1Ev>:

// default destructor
CO_SYNC_Class::~CO_SYNC_Class()
   126f8:	b480      	push	{r7}
   126fa:	b083      	sub	sp, #12
   126fc:	af00      	add	r7, sp, #0
   126fe:	6078      	str	r0, [r7, #4]
{
} //~CO_SYNC_Class
   12700:	687b      	ldr	r3, [r7, #4]
   12702:	4618      	mov	r0, r3
   12704:	370c      	adds	r7, #12
   12706:	46bd      	mov	sp, r7
   12708:	bc80      	pop	{r7}
   1270a:	4770      	bx	lr

0001270c <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SYNC_receive(void *object, const CO_CANrxMsg_t *msg){
   1270c:	b480      	push	{r7}
   1270e:	b085      	sub	sp, #20
   12710:	af00      	add	r7, sp, #0
   12712:	6078      	str	r0, [r7, #4]
   12714:	6039      	str	r1, [r7, #0]
	
    CO_SYNC_t *SYNC;
    uint8_t operState;

    SYNC = (CO_SYNC_t*)object;   /* this is the correct pointer type of the first argument */
   12716:	687b      	ldr	r3, [r7, #4]
   12718:	60fb      	str	r3, [r7, #12]
    operState = *SYNC->operatingState;
   1271a:	68fb      	ldr	r3, [r7, #12]
   1271c:	685b      	ldr	r3, [r3, #4]
   1271e:	781b      	ldrb	r3, [r3, #0]
   12720:	72fb      	strb	r3, [r7, #11]

    if((operState == CO_NMT_OPERATIONAL) || (operState == CO_NMT_PRE_OPERATIONAL)){
   12722:	7afb      	ldrb	r3, [r7, #11]
   12724:	2b05      	cmp	r3, #5
   12726:	d002      	beq.n	1272e <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x22>
   12728:	7afb      	ldrb	r3, [r7, #11]
   1272a:	2b7f      	cmp	r3, #127	; 0x7f
   1272c:	d132      	bne.n	12794 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x88>
        if(SYNC->counterOverflowValue == 0){
   1272e:	68fb      	ldr	r3, [r7, #12]
   12730:	7e1b      	ldrb	r3, [r3, #24]
   12732:	2b00      	cmp	r3, #0
   12734:	d10e      	bne.n	12754 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x48>
            if(msg->DLC == 0U){
   12736:	683b      	ldr	r3, [r7, #0]
   12738:	7d1b      	ldrb	r3, [r3, #20]
   1273a:	2b00      	cmp	r3, #0
   1273c:	d103      	bne.n	12746 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x3a>
                SYNC->CANrxNew = true;
   1273e:	68fb      	ldr	r3, [r7, #12]
   12740:	2201      	movs	r2, #1
   12742:	769a      	strb	r2, [r3, #26]
   12744:	e018      	b.n	12778 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x6c>
            }
            else{
                SYNC->receiveError = (uint32_t)msg->DLC | 0x0100U;
   12746:	683b      	ldr	r3, [r7, #0]
   12748:	7d1b      	ldrb	r3, [r3, #20]
   1274a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
   1274e:	68fb      	ldr	r3, [r7, #12]
   12750:	625a      	str	r2, [r3, #36]	; 0x24
   12752:	e011      	b.n	12778 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x6c>
            }
        }
        else{
            if(msg->DLC == 1U){
   12754:	683b      	ldr	r3, [r7, #0]
   12756:	7d1b      	ldrb	r3, [r3, #20]
   12758:	2b01      	cmp	r3, #1
   1275a:	d107      	bne.n	1276c <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x60>
                SYNC->counter = msg->data[0];
   1275c:	683b      	ldr	r3, [r7, #0]
   1275e:	7d5a      	ldrb	r2, [r3, #21]
   12760:	68fb      	ldr	r3, [r7, #12]
   12762:	771a      	strb	r2, [r3, #28]
                SYNC->CANrxNew = true;
   12764:	68fb      	ldr	r3, [r7, #12]
   12766:	2201      	movs	r2, #1
   12768:	769a      	strb	r2, [r3, #26]
   1276a:	e005      	b.n	12778 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x6c>
            }
            else{
                SYNC->receiveError = (uint32_t)msg->DLC | 0x0200U;
   1276c:	683b      	ldr	r3, [r7, #0]
   1276e:	7d1b      	ldrb	r3, [r3, #20]
   12770:	f443 7200 	orr.w	r2, r3, #512	; 0x200
   12774:	68fb      	ldr	r3, [r7, #12]
   12776:	625a      	str	r2, [r3, #36]	; 0x24
            }
        }
        if(SYNC->CANrxNew) {
   12778:	68fb      	ldr	r3, [r7, #12]
   1277a:	7e9b      	ldrb	r3, [r3, #26]
   1277c:	2b00      	cmp	r3, #0
   1277e:	d009      	beq.n	12794 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x88>
            SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
   12780:	68fb      	ldr	r3, [r7, #12]
   12782:	7edb      	ldrb	r3, [r3, #27]
   12784:	2b00      	cmp	r3, #0
   12786:	bf0c      	ite	eq
   12788:	2301      	moveq	r3, #1
   1278a:	2300      	movne	r3, #0
   1278c:	b2db      	uxtb	r3, r3
   1278e:	461a      	mov	r2, r3
   12790:	68fb      	ldr	r3, [r7, #12]
   12792:	76da      	strb	r2, [r3, #27]
        }
    }
}
   12794:	bf00      	nop
   12796:	3714      	adds	r7, #20
   12798:	46bd      	mov	sp, r7
   1279a:	bc80      	pop	{r7}
   1279c:	4770      	bx	lr
	...

000127a0 <_ZL11CO_ODF_1005P12CO_ODF_arg_t>:
/*
 * Function for accessing _COB ID SYNC Message_ (index 0x1005) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1005(CO_ODF_arg_t *ODF_arg){
   127a0:	b590      	push	{r4, r7, lr}
   127a2:	b08b      	sub	sp, #44	; 0x2c
   127a4:	af04      	add	r7, sp, #16
   127a6:	6078      	str	r0, [r7, #4]
    CO_SYNC_t *SYNC;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
   127a8:	2300      	movs	r3, #0
   127aa:	617b      	str	r3, [r7, #20]

    SYNC = (CO_SYNC_t*) ODF_arg->object;
   127ac:	687b      	ldr	r3, [r7, #4]
   127ae:	681b      	ldr	r3, [r3, #0]
   127b0:	60fb      	str	r3, [r7, #12]
    value =ptrCODriverClass->CO_getUint32(ODF_arg->data);
   127b2:	4b35      	ldr	r3, [pc, #212]	; (12888 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xe8>)
   127b4:	681b      	ldr	r3, [r3, #0]
   127b6:	1d1a      	adds	r2, r3, #4
   127b8:	687b      	ldr	r3, [r7, #4]
   127ba:	685b      	ldr	r3, [r3, #4]
   127bc:	4619      	mov	r1, r3
   127be:	4610      	mov	r0, r2
   127c0:	4b32      	ldr	r3, [pc, #200]	; (1288c <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xec>)
   127c2:	4798      	blx	r3
   127c4:	60b8      	str	r0, [r7, #8]

    if(!ODF_arg->reading){
   127c6:	687b      	ldr	r3, [r7, #4]
   127c8:	7f5b      	ldrb	r3, [r3, #29]
   127ca:	2b00      	cmp	r3, #0
   127cc:	d157      	bne.n	1287e <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xde>
        uint8_t configureSyncProducer = 0;
   127ce:	2300      	movs	r3, #0
   127d0:	74fb      	strb	r3, [r7, #19]

        /* only 11-bit CAN identifier is supported */
        if(value & 0x20000000UL){
   127d2:	68bb      	ldr	r3, [r7, #8]
   127d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
   127d8:	2b00      	cmp	r3, #0
   127da:	d002      	beq.n	127e2 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x42>
            ret = CO_SDO_AB_INVALID_VALUE;
   127dc:	4b2c      	ldr	r3, [pc, #176]	; (12890 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xf0>)
   127de:	617b      	str	r3, [r7, #20]
   127e0:	e00d      	b.n	127fe <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x5e>
        }
        else{
            /* is 'generate Sync messge' bit set? */
            if(value & 0x40000000UL){
   127e2:	68bb      	ldr	r3, [r7, #8]
   127e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
   127e8:	2b00      	cmp	r3, #0
   127ea:	d008      	beq.n	127fe <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x5e>
                /* if bit was set before, value can not be changed */
                if(SYNC->isProducer){
   127ec:	68fb      	ldr	r3, [r7, #12]
   127ee:	7a1b      	ldrb	r3, [r3, #8]
   127f0:	2b00      	cmp	r3, #0
   127f2:	d002      	beq.n	127fa <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x5a>
                    ret = CO_SDO_AB_DATA_DEV_STATE;
   127f4:	4b27      	ldr	r3, [pc, #156]	; (12894 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xf4>)
   127f6:	617b      	str	r3, [r7, #20]
   127f8:	e001      	b.n	127fe <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x5e>
                }
                else{
                    configureSyncProducer = 1;
   127fa:	2301      	movs	r3, #1
   127fc:	74fb      	strb	r3, [r7, #19]
                }
            }
        }

        /* configure sync producer and consumer */
        if(ret == CO_SDO_AB_NONE){
   127fe:	697b      	ldr	r3, [r7, #20]
   12800:	2b00      	cmp	r3, #0
   12802:	d13c      	bne.n	1287e <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xde>
            SYNC->COB_ID = (uint32_t)(value & 0x7FFU);
   12804:	68bb      	ldr	r3, [r7, #8]
   12806:	f3c3 020a 	ubfx	r2, r3, #0, #11
   1280a:	68fb      	ldr	r3, [r7, #12]
   1280c:	60da      	str	r2, [r3, #12]

            if(configureSyncProducer){
   1280e:	7cfb      	ldrb	r3, [r7, #19]
   12810:	2b00      	cmp	r3, #0
   12812:	d021      	beq.n	12858 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xb8>
                uint8_t len = 0U;
   12814:	2300      	movs	r3, #0
   12816:	74bb      	strb	r3, [r7, #18]
                if(SYNC->counterOverflowValue != 0U){
   12818:	68fb      	ldr	r3, [r7, #12]
   1281a:	7e1b      	ldrb	r3, [r3, #24]
   1281c:	2b00      	cmp	r3, #0
   1281e:	d007      	beq.n	12830 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x90>
                    len = 1U;
   12820:	2301      	movs	r3, #1
   12822:	74bb      	strb	r3, [r7, #18]
                    SYNC->counter = 0U;
   12824:	68fb      	ldr	r3, [r7, #12]
   12826:	2200      	movs	r2, #0
   12828:	771a      	strb	r2, [r3, #28]
                    SYNC->timer = 0U;
   1282a:	68fb      	ldr	r3, [r7, #12]
   1282c:	2200      	movs	r2, #0
   1282e:	621a      	str	r2, [r3, #32]
                }
                SYNC->CANtxBuff = ptrCODriverClass->CAN_Tx_BufferInit(
   12830:	4b15      	ldr	r3, [pc, #84]	; (12888 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xe8>)
   12832:	6818      	ldr	r0, [r3, #0]
   12834:	68fb      	ldr	r3, [r7, #12]
   12836:	6b99      	ldr	r1, [r3, #56]	; 0x38
   12838:	68fb      	ldr	r3, [r7, #12]
   1283a:	68da      	ldr	r2, [r3, #12]
   1283c:	2300      	movs	r3, #0
   1283e:	9301      	str	r3, [sp, #4]
   12840:	7cbb      	ldrb	r3, [r7, #18]
   12842:	9300      	str	r3, [sp, #0]
   12844:	2300      	movs	r3, #0
   12846:	4c14      	ldr	r4, [pc, #80]	; (12898 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xf8>)
   12848:	47a0      	blx	r4
   1284a:	4602      	mov	r2, r0
   1284c:	68fb      	ldr	r3, [r7, #12]
   1284e:	635a      	str	r2, [r3, #52]	; 0x34
                        SYNC->CANdevTxIdx,      /* index of specific buffer inside CAN module */
                        SYNC->COB_ID,           /* CAN identifier */
                        0,                      /* rtr */
                        len,                    /* number of data bytes */
                        0);                     /* synchronous message flag bit */
                SYNC->isProducer = true;
   12850:	68fb      	ldr	r3, [r7, #12]
   12852:	2201      	movs	r2, #1
   12854:	721a      	strb	r2, [r3, #8]
   12856:	e002      	b.n	1285e <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xbe>
            }
            else{
                SYNC->isProducer = false;
   12858:	68fb      	ldr	r3, [r7, #12]
   1285a:	2200      	movs	r2, #0
   1285c:	721a      	strb	r2, [r3, #8]
            }

            ptrCODriverClass->CAN_Rx_BufferInit(
   1285e:	4b0a      	ldr	r3, [pc, #40]	; (12888 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xe8>)
   12860:	6818      	ldr	r0, [r3, #0]
   12862:	68fb      	ldr	r3, [r7, #12]
   12864:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   12866:	68fb      	ldr	r3, [r7, #12]
   12868:	68da      	ldr	r2, [r3, #12]
                    SYNC->CANdevRxIdx,      /* rx buffer index */
                    SYNC->COB_ID,           /* CAN identifier */
                    0x7FF,                  /* mask */
                    0,                      /* rtr */
                    (void*)SYNC,            /* object passed to receive function */
                    CO_SYNC_receive);       /* this function will process received message */
   1286a:	4b0c      	ldr	r3, [pc, #48]	; (1289c <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xfc>)
   1286c:	9302      	str	r3, [sp, #8]
   1286e:	68fb      	ldr	r3, [r7, #12]
   12870:	9301      	str	r3, [sp, #4]
   12872:	2300      	movs	r3, #0
   12874:	9300      	str	r3, [sp, #0]
   12876:	f240 73ff 	movw	r3, #2047	; 0x7ff
   1287a:	4c09      	ldr	r4, [pc, #36]	; (128a0 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x100>)
   1287c:	47a0      	blx	r4
        }
    }

    return ret;
   1287e:	697b      	ldr	r3, [r7, #20]
}
   12880:	4618      	mov	r0, r3
   12882:	371c      	adds	r7, #28
   12884:	46bd      	mov	sp, r7
   12886:	bd90      	pop	{r4, r7, pc}
   12888:	20001a7c 	.word	0x20001a7c
   1288c:	00010741 	.word	0x00010741
   12890:	06090030 	.word	0x06090030
   12894:	08000022 	.word	0x08000022
   12898:	0000db71 	.word	0x0000db71
   1289c:	0001270d 	.word	0x0001270d
   128a0:	0000da71 	.word	0x0000da71

000128a4 <_ZL11CO_ODF_1006P12CO_ODF_arg_t>:
/*
 * Function for accessing _Communication cycle period_ (index 0x1006) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1006(CO_ODF_arg_t *ODF_arg){
   128a4:	b580      	push	{r7, lr}
   128a6:	b086      	sub	sp, #24
   128a8:	af00      	add	r7, sp, #0
   128aa:	6078      	str	r0, [r7, #4]
    CO_SYNC_t *SYNC;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
   128ac:	2300      	movs	r3, #0
   128ae:	617b      	str	r3, [r7, #20]

    SYNC = (CO_SYNC_t*) ODF_arg->object;
   128b0:	687b      	ldr	r3, [r7, #4]
   128b2:	681b      	ldr	r3, [r3, #0]
   128b4:	613b      	str	r3, [r7, #16]
    value = ptrCODriverClass->CO_getUint32(ODF_arg->data);
   128b6:	4b19      	ldr	r3, [pc, #100]	; (1291c <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x78>)
   128b8:	681b      	ldr	r3, [r3, #0]
   128ba:	1d1a      	adds	r2, r3, #4
   128bc:	687b      	ldr	r3, [r7, #4]
   128be:	685b      	ldr	r3, [r3, #4]
   128c0:	4619      	mov	r1, r3
   128c2:	4610      	mov	r0, r2
   128c4:	4b16      	ldr	r3, [pc, #88]	; (12920 <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x7c>)
   128c6:	4798      	blx	r3
   128c8:	60f8      	str	r0, [r7, #12]

    if(!ODF_arg->reading){
   128ca:	687b      	ldr	r3, [r7, #4]
   128cc:	7f5b      	ldrb	r3, [r3, #29]
   128ce:	2b00      	cmp	r3, #0
   128d0:	d11f      	bne.n	12912 <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x6e>
        /* period transition from 0 to something */
        if((SYNC->periodTime == 0) && (value != 0)){
   128d2:	693b      	ldr	r3, [r7, #16]
   128d4:	691b      	ldr	r3, [r3, #16]
   128d6:	2b00      	cmp	r3, #0
   128d8:	d105      	bne.n	128e6 <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x42>
   128da:	68fb      	ldr	r3, [r7, #12]
   128dc:	2b00      	cmp	r3, #0
   128de:	d002      	beq.n	128e6 <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x42>
            SYNC->counter = 0;
   128e0:	693b      	ldr	r3, [r7, #16]
   128e2:	2200      	movs	r2, #0
   128e4:	771a      	strb	r2, [r3, #28]
        }

        SYNC->periodTime = value;
   128e6:	693b      	ldr	r3, [r7, #16]
   128e8:	68fa      	ldr	r2, [r7, #12]
   128ea:	611a      	str	r2, [r3, #16]
        SYNC->periodTimeoutTime = (value / 2U) * 3U;
   128ec:	68fb      	ldr	r3, [r7, #12]
   128ee:	085a      	lsrs	r2, r3, #1
   128f0:	4613      	mov	r3, r2
   128f2:	005b      	lsls	r3, r3, #1
   128f4:	441a      	add	r2, r3
   128f6:	693b      	ldr	r3, [r7, #16]
   128f8:	615a      	str	r2, [r3, #20]
        /* overflow? */
        if(SYNC->periodTimeoutTime < value){
   128fa:	693b      	ldr	r3, [r7, #16]
   128fc:	695a      	ldr	r2, [r3, #20]
   128fe:	68fb      	ldr	r3, [r7, #12]
   12900:	429a      	cmp	r2, r3
   12902:	d203      	bcs.n	1290c <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x68>
            SYNC->periodTimeoutTime = 0xFFFFFFFFUL;
   12904:	693b      	ldr	r3, [r7, #16]
   12906:	f04f 32ff 	mov.w	r2, #4294967295
   1290a:	615a      	str	r2, [r3, #20]
        }

        SYNC->timer = 0;
   1290c:	693b      	ldr	r3, [r7, #16]
   1290e:	2200      	movs	r2, #0
   12910:	621a      	str	r2, [r3, #32]
    }

    return ret;
   12912:	697b      	ldr	r3, [r7, #20]
}
   12914:	4618      	mov	r0, r3
   12916:	3718      	adds	r7, #24
   12918:	46bd      	mov	sp, r7
   1291a:	bd80      	pop	{r7, pc}
   1291c:	20001a7c 	.word	0x20001a7c
   12920:	00010741 	.word	0x00010741

00012924 <_ZL11CO_ODF_1019P12CO_ODF_arg_t>:
/**
 * Function for accessing _Synchronous counter overflow value_ (index 0x1019) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1019(CO_ODF_arg_t *ODF_arg){
   12924:	b590      	push	{r4, r7, lr}
   12926:	b089      	sub	sp, #36	; 0x24
   12928:	af02      	add	r7, sp, #8
   1292a:	6078      	str	r0, [r7, #4]
    CO_SYNC_t *SYNC;
    uint8_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
   1292c:	2300      	movs	r3, #0
   1292e:	617b      	str	r3, [r7, #20]

    SYNC = (CO_SYNC_t*) ODF_arg->object;
   12930:	687b      	ldr	r3, [r7, #4]
   12932:	681b      	ldr	r3, [r3, #0]
   12934:	60fb      	str	r3, [r7, #12]
    value = ODF_arg->data[0];
   12936:	687b      	ldr	r3, [r7, #4]
   12938:	685b      	ldr	r3, [r3, #4]
   1293a:	781b      	ldrb	r3, [r3, #0]
   1293c:	72fb      	strb	r3, [r7, #11]

    if(!ODF_arg->reading){
   1293e:	687b      	ldr	r3, [r7, #4]
   12940:	7f5b      	ldrb	r3, [r3, #29]
   12942:	2b00      	cmp	r3, #0
   12944:	d12c      	bne.n	129a0 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x7c>
        uint8_t len = 0U;
   12946:	2300      	movs	r3, #0
   12948:	74fb      	strb	r3, [r7, #19]

        if(SYNC->periodTime){
   1294a:	68fb      	ldr	r3, [r7, #12]
   1294c:	691b      	ldr	r3, [r3, #16]
   1294e:	2b00      	cmp	r3, #0
   12950:	d002      	beq.n	12958 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x34>
            ret = CO_SDO_AB_DATA_DEV_STATE;
   12952:	4b16      	ldr	r3, [pc, #88]	; (129ac <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x88>)
   12954:	617b      	str	r3, [r7, #20]
   12956:	e023      	b.n	129a0 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x7c>
        }
        else if((value == 1) || (value > 240 && value <= 255)){
   12958:	7afb      	ldrb	r3, [r7, #11]
   1295a:	2b01      	cmp	r3, #1
   1295c:	d005      	beq.n	1296a <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x46>
   1295e:	7afb      	ldrb	r3, [r7, #11]
   12960:	2bf0      	cmp	r3, #240	; 0xf0
   12962:	dd05      	ble.n	12970 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x4c>
   12964:	7afb      	ldrb	r3, [r7, #11]
   12966:	2bff      	cmp	r3, #255	; 0xff
   12968:	dc02      	bgt.n	12970 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x4c>
            ret = CO_SDO_AB_INVALID_VALUE;
   1296a:	4b11      	ldr	r3, [pc, #68]	; (129b0 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x8c>)
   1296c:	617b      	str	r3, [r7, #20]
   1296e:	e017      	b.n	129a0 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x7c>
        }
        else{
            SYNC->counterOverflowValue = value;
   12970:	68fb      	ldr	r3, [r7, #12]
   12972:	7afa      	ldrb	r2, [r7, #11]
   12974:	761a      	strb	r2, [r3, #24]
            if(value != 0){
   12976:	7afb      	ldrb	r3, [r7, #11]
   12978:	2b00      	cmp	r3, #0
   1297a:	d001      	beq.n	12980 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x5c>
                len = 1U;
   1297c:	2301      	movs	r3, #1
   1297e:	74fb      	strb	r3, [r7, #19]
            }

            SYNC->CANtxBuff =ptrCODriverClass->CAN_Tx_BufferInit(
   12980:	4b0c      	ldr	r3, [pc, #48]	; (129b4 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x90>)
   12982:	6818      	ldr	r0, [r3, #0]
   12984:	68fb      	ldr	r3, [r7, #12]
   12986:	6b99      	ldr	r1, [r3, #56]	; 0x38
   12988:	68fb      	ldr	r3, [r7, #12]
   1298a:	68da      	ldr	r2, [r3, #12]
   1298c:	2300      	movs	r3, #0
   1298e:	9301      	str	r3, [sp, #4]
   12990:	7cfb      	ldrb	r3, [r7, #19]
   12992:	9300      	str	r3, [sp, #0]
   12994:	2300      	movs	r3, #0
   12996:	4c08      	ldr	r4, [pc, #32]	; (129b8 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x94>)
   12998:	47a0      	blx	r4
   1299a:	4602      	mov	r2, r0
   1299c:	68fb      	ldr	r3, [r7, #12]
   1299e:	635a      	str	r2, [r3, #52]	; 0x34
                    len,                    /* number of data bytes */
                    0);                     /* synchronous message flag bit */
        }
    }

    return ret;
   129a0:	697b      	ldr	r3, [r7, #20]
}
   129a2:	4618      	mov	r0, r3
   129a4:	371c      	adds	r7, #28
   129a6:	46bd      	mov	sp, r7
   129a8:	bd90      	pop	{r4, r7, pc}
   129aa:	bf00      	nop
   129ac:	08000022 	.word	0x08000022
   129b0:	06090030 	.word	0x06090030
   129b4:	20001a7c 	.word	0x20001a7c
   129b8:	0000db71 	.word	0x0000db71

000129bc <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m>:
        uint8_t                 synchronousCounterOverflowValue,
        CO_CANmodule_t         *CANdevRx,
        uint32_t                CANdevRxIdx,
        CO_CANmodule_t         *CANdevTx,
        uint32_t                CANdevTxIdx)
{
   129bc:	b590      	push	{r4, r7, lr}
   129be:	b08b      	sub	sp, #44	; 0x2c
   129c0:	af04      	add	r7, sp, #16
   129c2:	60f8      	str	r0, [r7, #12]
   129c4:	60b9      	str	r1, [r7, #8]
   129c6:	607a      	str	r2, [r7, #4]
   129c8:	603b      	str	r3, [r7, #0]
    uint8_t len = 0;
   129ca:	2300      	movs	r3, #0
   129cc:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if(SYNC==NULL || em==NULL || SDO==NULL || operatingState==NULL ||
   129ce:	68bb      	ldr	r3, [r7, #8]
   129d0:	2b00      	cmp	r3, #0
   129d2:	d00e      	beq.n	129f2 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
   129d4:	687b      	ldr	r3, [r7, #4]
   129d6:	2b00      	cmp	r3, #0
   129d8:	d00b      	beq.n	129f2 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
   129da:	683b      	ldr	r3, [r7, #0]
   129dc:	2b00      	cmp	r3, #0
   129de:	d008      	beq.n	129f2 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
   129e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   129e2:	2b00      	cmp	r3, #0
   129e4:	d005      	beq.n	129f2 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
   129e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   129e8:	2b00      	cmp	r3, #0
   129ea:	d002      	beq.n	129f2 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
        CANdevRx==NULL || CANdevTx==NULL){
   129ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   129ee:	2b00      	cmp	r3, #0
   129f0:	d102      	bne.n	129f8 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x3c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
   129f2:	f04f 33ff 	mov.w	r3, #4294967295
   129f6:	e096      	b.n	12b26 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x16a>
    }

    /* Configure object variables */
    SYNC->isProducer = (COB_ID_SYNCMessage&0x40000000L) ? true : false;
   129f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   129fa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
   129fe:	2b00      	cmp	r3, #0
   12a00:	bf14      	ite	ne
   12a02:	2301      	movne	r3, #1
   12a04:	2300      	moveq	r3, #0
   12a06:	b2db      	uxtb	r3, r3
   12a08:	461a      	mov	r2, r3
   12a0a:	68bb      	ldr	r3, [r7, #8]
   12a0c:	721a      	strb	r2, [r3, #8]
    SYNC->COB_ID = COB_ID_SYNCMessage&0x7FF;
   12a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12a10:	f3c3 020a 	ubfx	r2, r3, #0, #11
   12a14:	68bb      	ldr	r3, [r7, #8]
   12a16:	60da      	str	r2, [r3, #12]

    SYNC->periodTime = communicationCyclePeriod;
   12a18:	68bb      	ldr	r3, [r7, #8]
   12a1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   12a1c:	611a      	str	r2, [r3, #16]
    SYNC->periodTimeoutTime = communicationCyclePeriod / 2 * 3;
   12a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12a20:	085a      	lsrs	r2, r3, #1
   12a22:	4613      	mov	r3, r2
   12a24:	005b      	lsls	r3, r3, #1
   12a26:	441a      	add	r2, r3
   12a28:	68bb      	ldr	r3, [r7, #8]
   12a2a:	615a      	str	r2, [r3, #20]
    /* overflow? */
    if(SYNC->periodTimeoutTime < communicationCyclePeriod) SYNC->periodTimeoutTime = 0xFFFFFFFFL;
   12a2c:	68bb      	ldr	r3, [r7, #8]
   12a2e:	695a      	ldr	r2, [r3, #20]
   12a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12a32:	429a      	cmp	r2, r3
   12a34:	d203      	bcs.n	12a3e <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x82>
   12a36:	68bb      	ldr	r3, [r7, #8]
   12a38:	f04f 32ff 	mov.w	r2, #4294967295
   12a3c:	615a      	str	r2, [r3, #20]

    SYNC->counterOverflowValue = synchronousCounterOverflowValue;
   12a3e:	68bb      	ldr	r3, [r7, #8]
   12a40:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
   12a44:	761a      	strb	r2, [r3, #24]
    if(synchronousCounterOverflowValue) len = 1;
   12a46:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
   12a4a:	2b00      	cmp	r3, #0
   12a4c:	d001      	beq.n	12a52 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x96>
   12a4e:	2301      	movs	r3, #1
   12a50:	75fb      	strb	r3, [r7, #23]

    SYNC->curentSyncTimeIsInsideWindow = true;
   12a52:	68bb      	ldr	r3, [r7, #8]
   12a54:	2201      	movs	r2, #1
   12a56:	765a      	strb	r2, [r3, #25]

    SYNC->CANrxNew = false;
   12a58:	68bb      	ldr	r3, [r7, #8]
   12a5a:	2200      	movs	r2, #0
   12a5c:	769a      	strb	r2, [r3, #26]
    SYNC->CANrxToggle = false;
   12a5e:	68bb      	ldr	r3, [r7, #8]
   12a60:	2200      	movs	r2, #0
   12a62:	76da      	strb	r2, [r3, #27]
    SYNC->timer = 0;
   12a64:	68bb      	ldr	r3, [r7, #8]
   12a66:	2200      	movs	r2, #0
   12a68:	621a      	str	r2, [r3, #32]
    SYNC->counter = 0;
   12a6a:	68bb      	ldr	r3, [r7, #8]
   12a6c:	2200      	movs	r2, #0
   12a6e:	771a      	strb	r2, [r3, #28]
    SYNC->receiveError = 0U;
   12a70:	68bb      	ldr	r3, [r7, #8]
   12a72:	2200      	movs	r2, #0
   12a74:	625a      	str	r2, [r3, #36]	; 0x24

    SYNC->em = em;
   12a76:	68bb      	ldr	r3, [r7, #8]
   12a78:	687a      	ldr	r2, [r7, #4]
   12a7a:	601a      	str	r2, [r3, #0]
    SYNC->operatingState = operatingState;
   12a7c:	68bb      	ldr	r3, [r7, #8]
   12a7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   12a80:	605a      	str	r2, [r3, #4]

    SYNC->CANdevRx = CANdevRx;
   12a82:	68bb      	ldr	r3, [r7, #8]
   12a84:	6bba      	ldr	r2, [r7, #56]	; 0x38
   12a86:	629a      	str	r2, [r3, #40]	; 0x28
    SYNC->CANdevRxIdx = CANdevRxIdx;
   12a88:	68bb      	ldr	r3, [r7, #8]
   12a8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   12a8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Configure Object dictionary entry at index 0x1005, 0x1006 and 0x1019 */
    ptrCODriverClass->CO_OD_configure( OD_H1005_COBID_SYNC,        CO_ODF_1005, (void*)SYNC, 0, 0);
   12a8e:	4b28      	ldr	r3, [pc, #160]	; (12b30 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
   12a90:	681b      	ldr	r3, [r3, #0]
   12a92:	1d18      	adds	r0, r3, #4
   12a94:	2300      	movs	r3, #0
   12a96:	9301      	str	r3, [sp, #4]
   12a98:	2300      	movs	r3, #0
   12a9a:	9300      	str	r3, [sp, #0]
   12a9c:	68bb      	ldr	r3, [r7, #8]
   12a9e:	4a25      	ldr	r2, [pc, #148]	; (12b34 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x178>)
   12aa0:	f241 0105 	movw	r1, #4101	; 0x1005
   12aa4:	4c24      	ldr	r4, [pc, #144]	; (12b38 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x17c>)
   12aa6:	47a0      	blx	r4
    ptrCODriverClass->CO_OD_configure( OD_H1006_COMM_CYCL_PERIOD,  CO_ODF_1006, (void*)SYNC, 0, 0);
   12aa8:	4b21      	ldr	r3, [pc, #132]	; (12b30 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
   12aaa:	681b      	ldr	r3, [r3, #0]
   12aac:	1d18      	adds	r0, r3, #4
   12aae:	2300      	movs	r3, #0
   12ab0:	9301      	str	r3, [sp, #4]
   12ab2:	2300      	movs	r3, #0
   12ab4:	9300      	str	r3, [sp, #0]
   12ab6:	68bb      	ldr	r3, [r7, #8]
   12ab8:	4a20      	ldr	r2, [pc, #128]	; (12b3c <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x180>)
   12aba:	f241 0106 	movw	r1, #4102	; 0x1006
   12abe:	4c1e      	ldr	r4, [pc, #120]	; (12b38 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x17c>)
   12ac0:	47a0      	blx	r4
    ptrCODriverClass->CO_OD_configure( OD_H1019_SYNC_CNT_OVERFLOW, CO_ODF_1019, (void*)SYNC, 0, 0);
   12ac2:	4b1b      	ldr	r3, [pc, #108]	; (12b30 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
   12ac4:	681b      	ldr	r3, [r3, #0]
   12ac6:	1d18      	adds	r0, r3, #4
   12ac8:	2300      	movs	r3, #0
   12aca:	9301      	str	r3, [sp, #4]
   12acc:	2300      	movs	r3, #0
   12ace:	9300      	str	r3, [sp, #0]
   12ad0:	68bb      	ldr	r3, [r7, #8]
   12ad2:	4a1b      	ldr	r2, [pc, #108]	; (12b40 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x184>)
   12ad4:	f241 0119 	movw	r1, #4121	; 0x1019
   12ad8:	4c17      	ldr	r4, [pc, #92]	; (12b38 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x17c>)
   12ada:	47a0      	blx	r4

    /* configure SYNC CAN reception */
    ptrCODriverClass->CAN_Rx_BufferInit(
   12adc:	4b14      	ldr	r3, [pc, #80]	; (12b30 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
   12ade:	6818      	ldr	r0, [r3, #0]
   12ae0:	68bb      	ldr	r3, [r7, #8]
   12ae2:	68da      	ldr	r2, [r3, #12]
            CANdevRxIdx,            /* rx buffer index */
            SYNC->COB_ID,           /* CAN identifier */
            0x7FF,                  /* mask */
            0,                      /* rtr */
            (void*)SYNC,            /* object passed to receive function */
            CO_SYNC_receive);       /* this function will process received message */
   12ae4:	4b17      	ldr	r3, [pc, #92]	; (12b44 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x188>)
   12ae6:	9302      	str	r3, [sp, #8]
   12ae8:	68bb      	ldr	r3, [r7, #8]
   12aea:	9301      	str	r3, [sp, #4]
   12aec:	2300      	movs	r3, #0
   12aee:	9300      	str	r3, [sp, #0]
   12af0:	f240 73ff 	movw	r3, #2047	; 0x7ff
   12af4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   12af6:	4c14      	ldr	r4, [pc, #80]	; (12b48 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x18c>)
   12af8:	47a0      	blx	r4

    /* configure SYNC CAN transmission */
    SYNC->CANdevTx = CANdevTx;
   12afa:	68bb      	ldr	r3, [r7, #8]
   12afc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   12afe:	631a      	str	r2, [r3, #48]	; 0x30
    SYNC->CANdevTxIdx = CANdevTxIdx;
   12b00:	68bb      	ldr	r3, [r7, #8]
   12b02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   12b04:	639a      	str	r2, [r3, #56]	; 0x38
    SYNC->CANtxBuff =  ptrCODriverClass->CAN_Tx_BufferInit(
   12b06:	4b0a      	ldr	r3, [pc, #40]	; (12b30 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
   12b08:	6818      	ldr	r0, [r3, #0]
   12b0a:	68bb      	ldr	r3, [r7, #8]
   12b0c:	68da      	ldr	r2, [r3, #12]
   12b0e:	2300      	movs	r3, #0
   12b10:	9301      	str	r3, [sp, #4]
   12b12:	7dfb      	ldrb	r3, [r7, #23]
   12b14:	9300      	str	r3, [sp, #0]
   12b16:	2300      	movs	r3, #0
   12b18:	6c79      	ldr	r1, [r7, #68]	; 0x44
   12b1a:	4c0c      	ldr	r4, [pc, #48]	; (12b4c <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x190>)
   12b1c:	47a0      	blx	r4
   12b1e:	4602      	mov	r2, r0
   12b20:	68bb      	ldr	r3, [r7, #8]
   12b22:	635a      	str	r2, [r3, #52]	; 0x34
            SYNC->COB_ID,           /* CAN identifier */
            0,                      /* rtr */
            len,                    /* number of data bytes */
            0);                     /* synchronous message flag bit */

    return CO_ERROR_NO;
   12b24:	2300      	movs	r3, #0
}
   12b26:	4618      	mov	r0, r3
   12b28:	371c      	adds	r7, #28
   12b2a:	46bd      	mov	sp, r7
   12b2c:	bd90      	pop	{r4, r7, pc}
   12b2e:	bf00      	nop
   12b30:	20001a7c 	.word	0x20001a7c
   12b34:	000127a1 	.word	0x000127a1
   12b38:	00010b91 	.word	0x00010b91
   12b3c:	000128a5 	.word	0x000128a5
   12b40:	00012925 	.word	0x00012925
   12b44:	0001270d 	.word	0x0001270d
   12b48:	0000da71 	.word	0x0000da71
   12b4c:	0000db71 	.word	0x0000db71

00012b50 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm>:
/******************************************************************************/
uint8_t CO_SYNC_Class::CO_SYNC_process(
        CO_SYNC_t              *SYNC,
        uint32_t                timeDifference_us,
        uint32_t                ObjDict_synchronousWindowLength)
{
   12b50:	b590      	push	{r4, r7, lr}
   12b52:	b089      	sub	sp, #36	; 0x24
   12b54:	af02      	add	r7, sp, #8
   12b56:	60f8      	str	r0, [r7, #12]
   12b58:	60b9      	str	r1, [r7, #8]
   12b5a:	607a      	str	r2, [r7, #4]
   12b5c:	603b      	str	r3, [r7, #0]
    uint8_t ret = 0;
   12b5e:	2300      	movs	r3, #0
   12b60:	75fb      	strb	r3, [r7, #23]
    uint32_t timerNew;

    if(*SYNC->operatingState == CO_NMT_OPERATIONAL || *SYNC->operatingState == CO_NMT_PRE_OPERATIONAL){
   12b62:	68bb      	ldr	r3, [r7, #8]
   12b64:	685b      	ldr	r3, [r3, #4]
   12b66:	781b      	ldrb	r3, [r3, #0]
   12b68:	2b05      	cmp	r3, #5
   12b6a:	d005      	beq.n	12b78 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x28>
   12b6c:	68bb      	ldr	r3, [r7, #8]
   12b6e:	685b      	ldr	r3, [r3, #4]
   12b70:	781b      	ldrb	r3, [r3, #0]
   12b72:	2b7f      	cmp	r3, #127	; 0x7f
   12b74:	f040 808e 	bne.w	12c94 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x144>
        /* update sync timer, no overflow */
        timerNew = SYNC->timer + timeDifference_us;
   12b78:	68bb      	ldr	r3, [r7, #8]
   12b7a:	6a1a      	ldr	r2, [r3, #32]
   12b7c:	687b      	ldr	r3, [r7, #4]
   12b7e:	4413      	add	r3, r2
   12b80:	613b      	str	r3, [r7, #16]
        if(timerNew > SYNC->timer) SYNC->timer = timerNew;
   12b82:	68bb      	ldr	r3, [r7, #8]
   12b84:	6a1a      	ldr	r2, [r3, #32]
   12b86:	693b      	ldr	r3, [r7, #16]
   12b88:	429a      	cmp	r2, r3
   12b8a:	d202      	bcs.n	12b92 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x42>
   12b8c:	68bb      	ldr	r3, [r7, #8]
   12b8e:	693a      	ldr	r2, [r7, #16]
   12b90:	621a      	str	r2, [r3, #32]

        /* was SYNC just received */
        if(SYNC->CANrxNew){
   12b92:	68bb      	ldr	r3, [r7, #8]
   12b94:	7e9b      	ldrb	r3, [r3, #26]
   12b96:	2b00      	cmp	r3, #0
   12b98:	d007      	beq.n	12baa <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x5a>
            SYNC->timer = 0;
   12b9a:	68bb      	ldr	r3, [r7, #8]
   12b9c:	2200      	movs	r2, #0
   12b9e:	621a      	str	r2, [r3, #32]
            ret = 1;
   12ba0:	2301      	movs	r3, #1
   12ba2:	75fb      	strb	r3, [r7, #23]
            SYNC->CANrxNew = false;
   12ba4:	68bb      	ldr	r3, [r7, #8]
   12ba6:	2200      	movs	r2, #0
   12ba8:	769a      	strb	r2, [r3, #26]
        }

        /* SYNC producer */
        if(SYNC->isProducer && SYNC->periodTime){
   12baa:	68bb      	ldr	r3, [r7, #8]
   12bac:	7a1b      	ldrb	r3, [r3, #8]
   12bae:	2b00      	cmp	r3, #0
   12bb0:	d03a      	beq.n	12c28 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0xd8>
   12bb2:	68bb      	ldr	r3, [r7, #8]
   12bb4:	691b      	ldr	r3, [r3, #16]
   12bb6:	2b00      	cmp	r3, #0
   12bb8:	d036      	beq.n	12c28 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0xd8>
            if(SYNC->timer >= SYNC->periodTime){
   12bba:	68bb      	ldr	r3, [r7, #8]
   12bbc:	6a1a      	ldr	r2, [r3, #32]
   12bbe:	68bb      	ldr	r3, [r7, #8]
   12bc0:	691b      	ldr	r3, [r3, #16]
   12bc2:	429a      	cmp	r2, r3
   12bc4:	d330      	bcc.n	12c28 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0xd8>
                if(++SYNC->counter > SYNC->counterOverflowValue) SYNC->counter = 1;
   12bc6:	68bb      	ldr	r3, [r7, #8]
   12bc8:	7f1b      	ldrb	r3, [r3, #28]
   12bca:	3301      	adds	r3, #1
   12bcc:	b2da      	uxtb	r2, r3
   12bce:	68bb      	ldr	r3, [r7, #8]
   12bd0:	771a      	strb	r2, [r3, #28]
   12bd2:	68bb      	ldr	r3, [r7, #8]
   12bd4:	7f1b      	ldrb	r3, [r3, #28]
   12bd6:	461a      	mov	r2, r3
   12bd8:	68bb      	ldr	r3, [r7, #8]
   12bda:	7e1b      	ldrb	r3, [r3, #24]
   12bdc:	429a      	cmp	r2, r3
   12bde:	bfcc      	ite	gt
   12be0:	2301      	movgt	r3, #1
   12be2:	2300      	movle	r3, #0
   12be4:	b2db      	uxtb	r3, r3
   12be6:	2b00      	cmp	r3, #0
   12be8:	d002      	beq.n	12bf0 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0xa0>
   12bea:	68bb      	ldr	r3, [r7, #8]
   12bec:	2201      	movs	r2, #1
   12bee:	771a      	strb	r2, [r3, #28]
                SYNC->timer = 0;
   12bf0:	68bb      	ldr	r3, [r7, #8]
   12bf2:	2200      	movs	r2, #0
   12bf4:	621a      	str	r2, [r3, #32]
                ret = 1;
   12bf6:	2301      	movs	r3, #1
   12bf8:	75fb      	strb	r3, [r7, #23]
                SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
   12bfa:	68bb      	ldr	r3, [r7, #8]
   12bfc:	7edb      	ldrb	r3, [r3, #27]
   12bfe:	2b00      	cmp	r3, #0
   12c00:	bf0c      	ite	eq
   12c02:	2301      	moveq	r3, #1
   12c04:	2300      	movne	r3, #0
   12c06:	b2db      	uxtb	r3, r3
   12c08:	461a      	mov	r2, r3
   12c0a:	68bb      	ldr	r3, [r7, #8]
   12c0c:	76da      	strb	r2, [r3, #27]
                SYNC->CANtxBuff->data[0] = SYNC->counter;
   12c0e:	68bb      	ldr	r3, [r7, #8]
   12c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   12c12:	68ba      	ldr	r2, [r7, #8]
   12c14:	7f12      	ldrb	r2, [r2, #28]
   12c16:	715a      	strb	r2, [r3, #5]
                ptrCODriverClass->CAN_Send(SYNC->CANtxBuff);
   12c18:	4b2d      	ldr	r3, [pc, #180]	; (12cd0 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x180>)
   12c1a:	681a      	ldr	r2, [r3, #0]
   12c1c:	68bb      	ldr	r3, [r7, #8]
   12c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   12c20:	4619      	mov	r1, r3
   12c22:	4610      	mov	r0, r2
   12c24:	4b2b      	ldr	r3, [pc, #172]	; (12cd4 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x184>)
   12c26:	4798      	blx	r3
            }
        }

        /* Synchronous PDOs are allowed only inside time window */
        if(ObjDict_synchronousWindowLength){
   12c28:	683b      	ldr	r3, [r7, #0]
   12c2a:	2b00      	cmp	r3, #0
   12c2c:	d012      	beq.n	12c54 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x104>
            if(SYNC->timer > ObjDict_synchronousWindowLength){
   12c2e:	68bb      	ldr	r3, [r7, #8]
   12c30:	6a1a      	ldr	r2, [r3, #32]
   12c32:	683b      	ldr	r3, [r7, #0]
   12c34:	429a      	cmp	r2, r3
   12c36:	d909      	bls.n	12c4c <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0xfc>
                if(SYNC->curentSyncTimeIsInsideWindow){
   12c38:	68bb      	ldr	r3, [r7, #8]
   12c3a:	7e5b      	ldrb	r3, [r3, #25]
   12c3c:	2b00      	cmp	r3, #0
   12c3e:	d001      	beq.n	12c44 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0xf4>
                    ret = 2;
   12c40:	2302      	movs	r3, #2
   12c42:	75fb      	strb	r3, [r7, #23]
                }
                SYNC->curentSyncTimeIsInsideWindow = false;
   12c44:	68bb      	ldr	r3, [r7, #8]
   12c46:	2200      	movs	r2, #0
   12c48:	765a      	strb	r2, [r3, #25]
   12c4a:	e006      	b.n	12c5a <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x10a>
            }
            else{
                SYNC->curentSyncTimeIsInsideWindow = true;
   12c4c:	68bb      	ldr	r3, [r7, #8]
   12c4e:	2201      	movs	r2, #1
   12c50:	765a      	strb	r2, [r3, #25]
   12c52:	e002      	b.n	12c5a <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x10a>
            }
        }
        else{
            SYNC->curentSyncTimeIsInsideWindow = true;
   12c54:	68bb      	ldr	r3, [r7, #8]
   12c56:	2201      	movs	r2, #1
   12c58:	765a      	strb	r2, [r3, #25]
        }

        /* Verify timeout of SYNC */
        if(SYNC->periodTime && SYNC->timer > SYNC->periodTimeoutTime && *SYNC->operatingState == CO_NMT_OPERATIONAL)
   12c5a:	68bb      	ldr	r3, [r7, #8]
   12c5c:	691b      	ldr	r3, [r3, #16]
   12c5e:	2b00      	cmp	r3, #0
   12c60:	d01c      	beq.n	12c9c <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x14c>
   12c62:	68bb      	ldr	r3, [r7, #8]
   12c64:	6a1a      	ldr	r2, [r3, #32]
   12c66:	68bb      	ldr	r3, [r7, #8]
   12c68:	695b      	ldr	r3, [r3, #20]
   12c6a:	429a      	cmp	r2, r3
   12c6c:	d916      	bls.n	12c9c <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x14c>
   12c6e:	68bb      	ldr	r3, [r7, #8]
   12c70:	685b      	ldr	r3, [r3, #4]
   12c72:	781b      	ldrb	r3, [r3, #0]
   12c74:	2b05      	cmp	r3, #5
   12c76:	d111      	bne.n	12c9c <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x14c>
             ptrCODriverClass->EM_ErrorReport(SYNC->em, CO_EM_SYNC_TIME_OUT, CO_EMC_COMMUNICATION, SYNC->timer);
   12c78:	4b15      	ldr	r3, [pc, #84]	; (12cd0 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x180>)
   12c7a:	681b      	ldr	r3, [r3, #0]
   12c7c:	1d18      	adds	r0, r3, #4
   12c7e:	68bb      	ldr	r3, [r7, #8]
   12c80:	6819      	ldr	r1, [r3, #0]
   12c82:	68bb      	ldr	r3, [r7, #8]
   12c84:	6a1b      	ldr	r3, [r3, #32]
   12c86:	9300      	str	r3, [sp, #0]
   12c88:	f44f 4301 	mov.w	r3, #33024	; 0x8100
   12c8c:	2218      	movs	r2, #24
   12c8e:	4c12      	ldr	r4, [pc, #72]	; (12cd8 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x188>)
   12c90:	47a0      	blx	r4
        if(SYNC->periodTime && SYNC->timer > SYNC->periodTimeoutTime && *SYNC->operatingState == CO_NMT_OPERATIONAL)
   12c92:	e003      	b.n	12c9c <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x14c>
    }
    else {
        SYNC->CANrxNew = false;
   12c94:	68bb      	ldr	r3, [r7, #8]
   12c96:	2200      	movs	r2, #0
   12c98:	769a      	strb	r2, [r3, #26]
   12c9a:	e000      	b.n	12c9e <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x14e>
        if(SYNC->periodTime && SYNC->timer > SYNC->periodTimeoutTime && *SYNC->operatingState == CO_NMT_OPERATIONAL)
   12c9c:	bf00      	nop
    }

    /* verify error from receive function */
    if(SYNC->receiveError != 0U){
   12c9e:	68bb      	ldr	r3, [r7, #8]
   12ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   12ca2:	2b00      	cmp	r3, #0
   12ca4:	d00f      	beq.n	12cc6 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x176>
        ptrCODriverClass->EM_ErrorReport(SYNC->em, CO_EM_SYNC_LENGTH, CO_EMC_SYNC_DATA_LENGTH, (uint32_t)SYNC->receiveError);
   12ca6:	4b0a      	ldr	r3, [pc, #40]	; (12cd0 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x180>)
   12ca8:	681b      	ldr	r3, [r3, #0]
   12caa:	1d18      	adds	r0, r3, #4
   12cac:	68bb      	ldr	r3, [r7, #8]
   12cae:	6819      	ldr	r1, [r3, #0]
   12cb0:	68bb      	ldr	r3, [r7, #8]
   12cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   12cb4:	9300      	str	r3, [sp, #0]
   12cb6:	f248 2340 	movw	r3, #33344	; 0x8240
   12cba:	2219      	movs	r2, #25
   12cbc:	4c06      	ldr	r4, [pc, #24]	; (12cd8 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x188>)
   12cbe:	47a0      	blx	r4
        SYNC->receiveError = 0U;
   12cc0:	68bb      	ldr	r3, [r7, #8]
   12cc2:	2200      	movs	r2, #0
   12cc4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return ret;
   12cc6:	7dfb      	ldrb	r3, [r7, #23]
   12cc8:	4618      	mov	r0, r3
   12cca:	371c      	adds	r7, #28
   12ccc:	46bd      	mov	sp, r7
   12cce:	bd90      	pop	{r4, r7, pc}
   12cd0:	20001a7c 	.word	0x20001a7c
   12cd4:	0000dc1d 	.word	0x0000dc1d
   12cd8:	0000e6b1 	.word	0x0000e6b1

00012cdc <_ZN14CO_CRC16_ClassC1Ev>:
	0x6E17U, 0x7E36U, 0x4E55U, 0x5E74U, 0x2E93U, 0x3EB2U, 0x0ED1U, 0x1EF0U
};


// default constructor
CO_CRC16_Class::CO_CRC16_Class()
   12cdc:	b480      	push	{r7}
   12cde:	b083      	sub	sp, #12
   12ce0:	af00      	add	r7, sp, #0
   12ce2:	6078      	str	r0, [r7, #4]
{
} //CO_CRC16_Class
   12ce4:	687b      	ldr	r3, [r7, #4]
   12ce6:	4618      	mov	r0, r3
   12ce8:	370c      	adds	r7, #12
   12cea:	46bd      	mov	sp, r7
   12cec:	bc80      	pop	{r7}
   12cee:	4770      	bx	lr

00012cf0 <_ZN14CO_CRC16_ClassD1Ev>:

// default destructor
CO_CRC16_Class::~CO_CRC16_Class()
   12cf0:	b480      	push	{r7}
   12cf2:	b083      	sub	sp, #12
   12cf4:	af00      	add	r7, sp, #0
   12cf6:	6078      	str	r0, [r7, #4]
{
} //~CO_CRC16_Class
   12cf8:	687b      	ldr	r3, [r7, #4]
   12cfa:	4618      	mov	r0, r3
   12cfc:	370c      	adds	r7, #12
   12cfe:	46bd      	mov	sp, r7
   12d00:	bc80      	pop	{r7}
   12d02:	4770      	bx	lr

00012d04 <_ZN14CO_CRC16_Class11crc16_ccittEPKhjt>:
/******************************************************************************/
unsigned short CO_CRC16_Class::crc16_ccitt(
const unsigned char     block[],
unsigned int            blockLength,
unsigned short          crc)
{
   12d04:	b480      	push	{r7}
   12d06:	b087      	sub	sp, #28
   12d08:	af00      	add	r7, sp, #0
   12d0a:	60f8      	str	r0, [r7, #12]
   12d0c:	60b9      	str	r1, [r7, #8]
   12d0e:	607a      	str	r2, [r7, #4]
   12d10:	807b      	strh	r3, [r7, #2]
	unsigned int i;

	for(i=0U; i<blockLength; i++){
   12d12:	2300      	movs	r3, #0
   12d14:	617b      	str	r3, [r7, #20]
   12d16:	697a      	ldr	r2, [r7, #20]
   12d18:	687b      	ldr	r3, [r7, #4]
   12d1a:	429a      	cmp	r2, r3
   12d1c:	d217      	bcs.n	12d4e <_ZN14CO_CRC16_Class11crc16_ccittEPKhjt+0x4a>
		unsigned short tmp = (crc >> 8) ^ (unsigned short) block[i];
   12d1e:	887b      	ldrh	r3, [r7, #2]
   12d20:	121b      	asrs	r3, r3, #8
   12d22:	b21a      	sxth	r2, r3
   12d24:	68b9      	ldr	r1, [r7, #8]
   12d26:	697b      	ldr	r3, [r7, #20]
   12d28:	440b      	add	r3, r1
   12d2a:	781b      	ldrb	r3, [r3, #0]
   12d2c:	b21b      	sxth	r3, r3
   12d2e:	4053      	eors	r3, r2
   12d30:	b21b      	sxth	r3, r3
   12d32:	827b      	strh	r3, [r7, #18]
		crc = ((unsigned short)(crc << 8U)) ^ crc16_ccitt_table[tmp];
   12d34:	887b      	ldrh	r3, [r7, #2]
   12d36:	021b      	lsls	r3, r3, #8
   12d38:	b29a      	uxth	r2, r3
   12d3a:	8a7b      	ldrh	r3, [r7, #18]
   12d3c:	4907      	ldr	r1, [pc, #28]	; (12d5c <_ZN14CO_CRC16_Class11crc16_ccittEPKhjt+0x58>)
   12d3e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   12d42:	4053      	eors	r3, r2
   12d44:	807b      	strh	r3, [r7, #2]
	for(i=0U; i<blockLength; i++){
   12d46:	697b      	ldr	r3, [r7, #20]
   12d48:	3301      	adds	r3, #1
   12d4a:	617b      	str	r3, [r7, #20]
   12d4c:	e7e3      	b.n	12d16 <_ZN14CO_CRC16_Class11crc16_ccittEPKhjt+0x12>
	}
	return crc;
   12d4e:	887b      	ldrh	r3, [r7, #2]
   12d50:	4618      	mov	r0, r3
   12d52:	371c      	adds	r7, #28
   12d54:	46bd      	mov	sp, r7
   12d56:	bc80      	pop	{r7}
   12d58:	4770      	bx	lr
   12d5a:	bf00      	nop
   12d5c:	00013f68 	.word	0x00013f68

00012d60 <__aeabi_atexit>:
   12d60:	460b      	mov	r3, r1
   12d62:	4601      	mov	r1, r0
   12d64:	4618      	mov	r0, r3
   12d66:	f000 b801 	b.w	12d6c <__cxa_atexit>
   12d6a:	bf00      	nop

00012d6c <__cxa_atexit>:
   12d6c:	4613      	mov	r3, r2
   12d6e:	460a      	mov	r2, r1
   12d70:	4601      	mov	r1, r0
   12d72:	2002      	movs	r0, #2
   12d74:	f000 b91e 	b.w	12fb4 <__register_exitproc>

00012d78 <ffs>:
   12d78:	b140      	cbz	r0, 12d8c <ffs+0x14>
   12d7a:	2300      	movs	r3, #0
   12d7c:	fa40 f103 	asr.w	r1, r0, r3
   12d80:	1c5a      	adds	r2, r3, #1
   12d82:	07c9      	lsls	r1, r1, #31
   12d84:	4613      	mov	r3, r2
   12d86:	d5f9      	bpl.n	12d7c <ffs+0x4>
   12d88:	4610      	mov	r0, r2
   12d8a:	4770      	bx	lr
   12d8c:	4602      	mov	r2, r0
   12d8e:	4610      	mov	r0, r2
   12d90:	4770      	bx	lr
   12d92:	bf00      	nop

00012d94 <__libc_init_array>:
   12d94:	b570      	push	{r4, r5, r6, lr}
   12d96:	4e0f      	ldr	r6, [pc, #60]	; (12dd4 <__libc_init_array+0x40>)
   12d98:	4d0f      	ldr	r5, [pc, #60]	; (12dd8 <__libc_init_array+0x44>)
   12d9a:	1b76      	subs	r6, r6, r5
   12d9c:	10b6      	asrs	r6, r6, #2
   12d9e:	bf18      	it	ne
   12da0:	2400      	movne	r4, #0
   12da2:	d005      	beq.n	12db0 <__libc_init_array+0x1c>
   12da4:	3401      	adds	r4, #1
   12da6:	f855 3b04 	ldr.w	r3, [r5], #4
   12daa:	4798      	blx	r3
   12dac:	42a6      	cmp	r6, r4
   12dae:	d1f9      	bne.n	12da4 <__libc_init_array+0x10>
   12db0:	4e0a      	ldr	r6, [pc, #40]	; (12ddc <__libc_init_array+0x48>)
   12db2:	4d0b      	ldr	r5, [pc, #44]	; (12de0 <__libc_init_array+0x4c>)
   12db4:	1b76      	subs	r6, r6, r5
   12db6:	f001 f9d9 	bl	1416c <_init>
   12dba:	10b6      	asrs	r6, r6, #2
   12dbc:	bf18      	it	ne
   12dbe:	2400      	movne	r4, #0
   12dc0:	d006      	beq.n	12dd0 <__libc_init_array+0x3c>
   12dc2:	3401      	adds	r4, #1
   12dc4:	f855 3b04 	ldr.w	r3, [r5], #4
   12dc8:	4798      	blx	r3
   12dca:	42a6      	cmp	r6, r4
   12dcc:	d1f9      	bne.n	12dc2 <__libc_init_array+0x2e>
   12dce:	bd70      	pop	{r4, r5, r6, pc}
   12dd0:	bd70      	pop	{r4, r5, r6, pc}
   12dd2:	bf00      	nop
   12dd4:	00014178 	.word	0x00014178
   12dd8:	00014178 	.word	0x00014178
   12ddc:	00014184 	.word	0x00014184
   12de0:	00014178 	.word	0x00014178

00012de4 <memcpy>:
   12de4:	4684      	mov	ip, r0
   12de6:	ea41 0300 	orr.w	r3, r1, r0
   12dea:	f013 0303 	ands.w	r3, r3, #3
   12dee:	d16d      	bne.n	12ecc <memcpy+0xe8>
   12df0:	3a40      	subs	r2, #64	; 0x40
   12df2:	d341      	bcc.n	12e78 <memcpy+0x94>
   12df4:	f851 3b04 	ldr.w	r3, [r1], #4
   12df8:	f840 3b04 	str.w	r3, [r0], #4
   12dfc:	f851 3b04 	ldr.w	r3, [r1], #4
   12e00:	f840 3b04 	str.w	r3, [r0], #4
   12e04:	f851 3b04 	ldr.w	r3, [r1], #4
   12e08:	f840 3b04 	str.w	r3, [r0], #4
   12e0c:	f851 3b04 	ldr.w	r3, [r1], #4
   12e10:	f840 3b04 	str.w	r3, [r0], #4
   12e14:	f851 3b04 	ldr.w	r3, [r1], #4
   12e18:	f840 3b04 	str.w	r3, [r0], #4
   12e1c:	f851 3b04 	ldr.w	r3, [r1], #4
   12e20:	f840 3b04 	str.w	r3, [r0], #4
   12e24:	f851 3b04 	ldr.w	r3, [r1], #4
   12e28:	f840 3b04 	str.w	r3, [r0], #4
   12e2c:	f851 3b04 	ldr.w	r3, [r1], #4
   12e30:	f840 3b04 	str.w	r3, [r0], #4
   12e34:	f851 3b04 	ldr.w	r3, [r1], #4
   12e38:	f840 3b04 	str.w	r3, [r0], #4
   12e3c:	f851 3b04 	ldr.w	r3, [r1], #4
   12e40:	f840 3b04 	str.w	r3, [r0], #4
   12e44:	f851 3b04 	ldr.w	r3, [r1], #4
   12e48:	f840 3b04 	str.w	r3, [r0], #4
   12e4c:	f851 3b04 	ldr.w	r3, [r1], #4
   12e50:	f840 3b04 	str.w	r3, [r0], #4
   12e54:	f851 3b04 	ldr.w	r3, [r1], #4
   12e58:	f840 3b04 	str.w	r3, [r0], #4
   12e5c:	f851 3b04 	ldr.w	r3, [r1], #4
   12e60:	f840 3b04 	str.w	r3, [r0], #4
   12e64:	f851 3b04 	ldr.w	r3, [r1], #4
   12e68:	f840 3b04 	str.w	r3, [r0], #4
   12e6c:	f851 3b04 	ldr.w	r3, [r1], #4
   12e70:	f840 3b04 	str.w	r3, [r0], #4
   12e74:	3a40      	subs	r2, #64	; 0x40
   12e76:	d2bd      	bcs.n	12df4 <memcpy+0x10>
   12e78:	3230      	adds	r2, #48	; 0x30
   12e7a:	d311      	bcc.n	12ea0 <memcpy+0xbc>
   12e7c:	f851 3b04 	ldr.w	r3, [r1], #4
   12e80:	f840 3b04 	str.w	r3, [r0], #4
   12e84:	f851 3b04 	ldr.w	r3, [r1], #4
   12e88:	f840 3b04 	str.w	r3, [r0], #4
   12e8c:	f851 3b04 	ldr.w	r3, [r1], #4
   12e90:	f840 3b04 	str.w	r3, [r0], #4
   12e94:	f851 3b04 	ldr.w	r3, [r1], #4
   12e98:	f840 3b04 	str.w	r3, [r0], #4
   12e9c:	3a10      	subs	r2, #16
   12e9e:	d2ed      	bcs.n	12e7c <memcpy+0x98>
   12ea0:	320c      	adds	r2, #12
   12ea2:	d305      	bcc.n	12eb0 <memcpy+0xcc>
   12ea4:	f851 3b04 	ldr.w	r3, [r1], #4
   12ea8:	f840 3b04 	str.w	r3, [r0], #4
   12eac:	3a04      	subs	r2, #4
   12eae:	d2f9      	bcs.n	12ea4 <memcpy+0xc0>
   12eb0:	3204      	adds	r2, #4
   12eb2:	d008      	beq.n	12ec6 <memcpy+0xe2>
   12eb4:	07d2      	lsls	r2, r2, #31
   12eb6:	bf1c      	itt	ne
   12eb8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   12ebc:	f800 3b01 	strbne.w	r3, [r0], #1
   12ec0:	d301      	bcc.n	12ec6 <memcpy+0xe2>
   12ec2:	880b      	ldrh	r3, [r1, #0]
   12ec4:	8003      	strh	r3, [r0, #0]
   12ec6:	4660      	mov	r0, ip
   12ec8:	4770      	bx	lr
   12eca:	bf00      	nop
   12ecc:	2a08      	cmp	r2, #8
   12ece:	d313      	bcc.n	12ef8 <memcpy+0x114>
   12ed0:	078b      	lsls	r3, r1, #30
   12ed2:	d08d      	beq.n	12df0 <memcpy+0xc>
   12ed4:	f010 0303 	ands.w	r3, r0, #3
   12ed8:	d08a      	beq.n	12df0 <memcpy+0xc>
   12eda:	f1c3 0304 	rsb	r3, r3, #4
   12ede:	1ad2      	subs	r2, r2, r3
   12ee0:	07db      	lsls	r3, r3, #31
   12ee2:	bf1c      	itt	ne
   12ee4:	f811 3b01 	ldrbne.w	r3, [r1], #1
   12ee8:	f800 3b01 	strbne.w	r3, [r0], #1
   12eec:	d380      	bcc.n	12df0 <memcpy+0xc>
   12eee:	f831 3b02 	ldrh.w	r3, [r1], #2
   12ef2:	f820 3b02 	strh.w	r3, [r0], #2
   12ef6:	e77b      	b.n	12df0 <memcpy+0xc>
   12ef8:	3a04      	subs	r2, #4
   12efa:	d3d9      	bcc.n	12eb0 <memcpy+0xcc>
   12efc:	3a01      	subs	r2, #1
   12efe:	f811 3b01 	ldrb.w	r3, [r1], #1
   12f02:	f800 3b01 	strb.w	r3, [r0], #1
   12f06:	d2f9      	bcs.n	12efc <memcpy+0x118>
   12f08:	780b      	ldrb	r3, [r1, #0]
   12f0a:	7003      	strb	r3, [r0, #0]
   12f0c:	784b      	ldrb	r3, [r1, #1]
   12f0e:	7043      	strb	r3, [r0, #1]
   12f10:	788b      	ldrb	r3, [r1, #2]
   12f12:	7083      	strb	r3, [r0, #2]
   12f14:	4660      	mov	r0, ip
   12f16:	4770      	bx	lr

00012f18 <memset>:
   12f18:	b470      	push	{r4, r5, r6}
   12f1a:	0786      	lsls	r6, r0, #30
   12f1c:	d046      	beq.n	12fac <memset+0x94>
   12f1e:	1e54      	subs	r4, r2, #1
   12f20:	2a00      	cmp	r2, #0
   12f22:	d041      	beq.n	12fa8 <memset+0x90>
   12f24:	b2ca      	uxtb	r2, r1
   12f26:	4603      	mov	r3, r0
   12f28:	e002      	b.n	12f30 <memset+0x18>
   12f2a:	f114 34ff 	adds.w	r4, r4, #4294967295
   12f2e:	d33b      	bcc.n	12fa8 <memset+0x90>
   12f30:	f803 2b01 	strb.w	r2, [r3], #1
   12f34:	079d      	lsls	r5, r3, #30
   12f36:	d1f8      	bne.n	12f2a <memset+0x12>
   12f38:	2c03      	cmp	r4, #3
   12f3a:	d92e      	bls.n	12f9a <memset+0x82>
   12f3c:	b2cd      	uxtb	r5, r1
   12f3e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   12f42:	2c0f      	cmp	r4, #15
   12f44:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   12f48:	d919      	bls.n	12f7e <memset+0x66>
   12f4a:	f103 0210 	add.w	r2, r3, #16
   12f4e:	4626      	mov	r6, r4
   12f50:	3e10      	subs	r6, #16
   12f52:	2e0f      	cmp	r6, #15
   12f54:	f842 5c10 	str.w	r5, [r2, #-16]
   12f58:	f842 5c0c 	str.w	r5, [r2, #-12]
   12f5c:	f842 5c08 	str.w	r5, [r2, #-8]
   12f60:	f842 5c04 	str.w	r5, [r2, #-4]
   12f64:	f102 0210 	add.w	r2, r2, #16
   12f68:	d8f2      	bhi.n	12f50 <memset+0x38>
   12f6a:	f1a4 0210 	sub.w	r2, r4, #16
   12f6e:	f022 020f 	bic.w	r2, r2, #15
   12f72:	f004 040f 	and.w	r4, r4, #15
   12f76:	3210      	adds	r2, #16
   12f78:	2c03      	cmp	r4, #3
   12f7a:	4413      	add	r3, r2
   12f7c:	d90d      	bls.n	12f9a <memset+0x82>
   12f7e:	461e      	mov	r6, r3
   12f80:	4622      	mov	r2, r4
   12f82:	3a04      	subs	r2, #4
   12f84:	2a03      	cmp	r2, #3
   12f86:	f846 5b04 	str.w	r5, [r6], #4
   12f8a:	d8fa      	bhi.n	12f82 <memset+0x6a>
   12f8c:	1f22      	subs	r2, r4, #4
   12f8e:	f022 0203 	bic.w	r2, r2, #3
   12f92:	3204      	adds	r2, #4
   12f94:	4413      	add	r3, r2
   12f96:	f004 0403 	and.w	r4, r4, #3
   12f9a:	b12c      	cbz	r4, 12fa8 <memset+0x90>
   12f9c:	b2c9      	uxtb	r1, r1
   12f9e:	441c      	add	r4, r3
   12fa0:	f803 1b01 	strb.w	r1, [r3], #1
   12fa4:	429c      	cmp	r4, r3
   12fa6:	d1fb      	bne.n	12fa0 <memset+0x88>
   12fa8:	bc70      	pop	{r4, r5, r6}
   12faa:	4770      	bx	lr
   12fac:	4614      	mov	r4, r2
   12fae:	4603      	mov	r3, r0
   12fb0:	e7c2      	b.n	12f38 <memset+0x20>
   12fb2:	bf00      	nop

00012fb4 <__register_exitproc>:
   12fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12fb8:	4d2c      	ldr	r5, [pc, #176]	; (1306c <__register_exitproc+0xb8>)
   12fba:	4606      	mov	r6, r0
   12fbc:	6828      	ldr	r0, [r5, #0]
   12fbe:	4698      	mov	r8, r3
   12fc0:	460f      	mov	r7, r1
   12fc2:	4691      	mov	r9, r2
   12fc4:	f000 f882 	bl	130cc <__retarget_lock_acquire_recursive>
   12fc8:	4b29      	ldr	r3, [pc, #164]	; (13070 <__register_exitproc+0xbc>)
   12fca:	681c      	ldr	r4, [r3, #0]
   12fcc:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   12fd0:	2b00      	cmp	r3, #0
   12fd2:	d03e      	beq.n	13052 <__register_exitproc+0x9e>
   12fd4:	685a      	ldr	r2, [r3, #4]
   12fd6:	2a1f      	cmp	r2, #31
   12fd8:	dc1c      	bgt.n	13014 <__register_exitproc+0x60>
   12fda:	f102 0e01 	add.w	lr, r2, #1
   12fde:	b176      	cbz	r6, 12ffe <__register_exitproc+0x4a>
   12fe0:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   12fe4:	2401      	movs	r4, #1
   12fe6:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   12fea:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   12fee:	4094      	lsls	r4, r2
   12ff0:	4320      	orrs	r0, r4
   12ff2:	2e02      	cmp	r6, #2
   12ff4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   12ff8:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   12ffc:	d023      	beq.n	13046 <__register_exitproc+0x92>
   12ffe:	3202      	adds	r2, #2
   13000:	f8c3 e004 	str.w	lr, [r3, #4]
   13004:	6828      	ldr	r0, [r5, #0]
   13006:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   1300a:	f000 f861 	bl	130d0 <__retarget_lock_release_recursive>
   1300e:	2000      	movs	r0, #0
   13010:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13014:	4b17      	ldr	r3, [pc, #92]	; (13074 <__register_exitproc+0xc0>)
   13016:	b30b      	cbz	r3, 1305c <__register_exitproc+0xa8>
   13018:	f44f 70c8 	mov.w	r0, #400	; 0x190
   1301c:	f3af 8000 	nop.w
   13020:	4603      	mov	r3, r0
   13022:	b1d8      	cbz	r0, 1305c <__register_exitproc+0xa8>
   13024:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   13028:	6002      	str	r2, [r0, #0]
   1302a:	2100      	movs	r1, #0
   1302c:	6041      	str	r1, [r0, #4]
   1302e:	460a      	mov	r2, r1
   13030:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   13034:	f04f 0e01 	mov.w	lr, #1
   13038:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   1303c:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   13040:	2e00      	cmp	r6, #0
   13042:	d0dc      	beq.n	12ffe <__register_exitproc+0x4a>
   13044:	e7cc      	b.n	12fe0 <__register_exitproc+0x2c>
   13046:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   1304a:	430c      	orrs	r4, r1
   1304c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   13050:	e7d5      	b.n	12ffe <__register_exitproc+0x4a>
   13052:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   13056:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   1305a:	e7bb      	b.n	12fd4 <__register_exitproc+0x20>
   1305c:	6828      	ldr	r0, [r5, #0]
   1305e:	f000 f837 	bl	130d0 <__retarget_lock_release_recursive>
   13062:	f04f 30ff 	mov.w	r0, #4294967295
   13066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1306a:	bf00      	nop
   1306c:	20000a00 	.word	0x20000a00
   13070:	00014168 	.word	0x00014168
   13074:	00000000 	.word	0x00000000

00013078 <register_fini>:
   13078:	4b02      	ldr	r3, [pc, #8]	; (13084 <register_fini+0xc>)
   1307a:	b113      	cbz	r3, 13082 <register_fini+0xa>
   1307c:	4802      	ldr	r0, [pc, #8]	; (13088 <register_fini+0x10>)
   1307e:	f000 b805 	b.w	1308c <atexit>
   13082:	4770      	bx	lr
   13084:	00000000 	.word	0x00000000
   13088:	00013099 	.word	0x00013099

0001308c <atexit>:
   1308c:	2300      	movs	r3, #0
   1308e:	4601      	mov	r1, r0
   13090:	461a      	mov	r2, r3
   13092:	4618      	mov	r0, r3
   13094:	f7ff bf8e 	b.w	12fb4 <__register_exitproc>

00013098 <__libc_fini_array>:
   13098:	b538      	push	{r3, r4, r5, lr}
   1309a:	4c0a      	ldr	r4, [pc, #40]	; (130c4 <__libc_fini_array+0x2c>)
   1309c:	4d0a      	ldr	r5, [pc, #40]	; (130c8 <__libc_fini_array+0x30>)
   1309e:	1b64      	subs	r4, r4, r5
   130a0:	10a4      	asrs	r4, r4, #2
   130a2:	d00a      	beq.n	130ba <__libc_fini_array+0x22>
   130a4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   130a8:	3b01      	subs	r3, #1
   130aa:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   130ae:	3c01      	subs	r4, #1
   130b0:	f855 3904 	ldr.w	r3, [r5], #-4
   130b4:	4798      	blx	r3
   130b6:	2c00      	cmp	r4, #0
   130b8:	d1f9      	bne.n	130ae <__libc_fini_array+0x16>
   130ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   130be:	f001 b861 	b.w	14184 <_fini>
   130c2:	bf00      	nop
   130c4:	00014194 	.word	0x00014194
   130c8:	00014190 	.word	0x00014190

000130cc <__retarget_lock_acquire_recursive>:
   130cc:	4770      	bx	lr
   130ce:	bf00      	nop

000130d0 <__retarget_lock_release_recursive>:
   130d0:	4770      	bx	lr
   130d2:	bf00      	nop
   130d4:	682f2e2e 	.word	0x682f2e2e
   130d8:	702f6c70 	.word	0x702f6c70
   130dc:	2f74726f 	.word	0x2f74726f
   130e0:	5f6c7068 	.word	0x5f6c7068
   130e4:	6f697067 	.word	0x6f697067
   130e8:	7361625f 	.word	0x7361625f
   130ec:	00682e65 	.word	0x00682e65
   130f0:	682f2e2e 	.word	0x682f2e2e
   130f4:	692f6c61 	.word	0x692f6c61
   130f8:	756c636e 	.word	0x756c636e
   130fc:	682f6564 	.word	0x682f6564
   13100:	775f6c61 	.word	0x775f6c61
   13104:	682e7464 	.word	0x682e7464
   13108:	00000000 	.word	0x00000000
   1310c:	682f2e2e 	.word	0x682f2e2e
   13110:	732f6c61 	.word	0x732f6c61
   13114:	682f6372 	.word	0x682f6372
   13118:	635f6c61 	.word	0x635f6c61
   1311c:	6e656c61 	.word	0x6e656c61
   13120:	2e726164 	.word	0x2e726164
   13124:	00000063 	.word	0x00000063
   13128:	682f2e2e 	.word	0x682f2e2e
   1312c:	732f6c61 	.word	0x732f6c61
   13130:	682f6372 	.word	0x682f6372
   13134:	635f6c61 	.word	0x635f6c61
   13138:	615f6e61 	.word	0x615f6e61
   1313c:	636e7973 	.word	0x636e7973
   13140:	0000632e 	.word	0x0000632e
   13144:	682f2e2e 	.word	0x682f2e2e
   13148:	732f6c61 	.word	0x732f6c61
   1314c:	682f6372 	.word	0x682f6372
   13150:	635f6c61 	.word	0x635f6c61
   13154:	735f6372 	.word	0x735f6372
   13158:	2e636e79 	.word	0x2e636e79
   1315c:	00000063 	.word	0x00000063
   13160:	682f2e2e 	.word	0x682f2e2e
   13164:	732f6c61 	.word	0x732f6c61
   13168:	682f6372 	.word	0x682f6372
   1316c:	695f6c61 	.word	0x695f6c61
   13170:	6d5f6332 	.word	0x6d5f6332
   13174:	6e79735f 	.word	0x6e79735f
   13178:	00632e63 	.word	0x00632e63
   1317c:	682f2e2e 	.word	0x682f2e2e
   13180:	732f6c61 	.word	0x732f6c61
   13184:	682f6372 	.word	0x682f6372
   13188:	705f6c61 	.word	0x705f6c61
   1318c:	632e6d77 	.word	0x632e6d77
   13190:	00000000 	.word	0x00000000
   13194:	682f2e2e 	.word	0x682f2e2e
   13198:	732f6c61 	.word	0x732f6c61
   1319c:	682f6372 	.word	0x682f6372
   131a0:	715f6c61 	.word	0x715f6c61
   131a4:	5f697073 	.word	0x5f697073
   131a8:	636e7973 	.word	0x636e7973
   131ac:	0000632e 	.word	0x0000632e
   131b0:	682f2e2e 	.word	0x682f2e2e
   131b4:	732f6c61 	.word	0x732f6c61
   131b8:	682f6372 	.word	0x682f6372
   131bc:	735f6c61 	.word	0x735f6c61
   131c0:	6d5f6970 	.word	0x6d5f6970
   131c4:	6e79735f 	.word	0x6e79735f
   131c8:	00632e63 	.word	0x00632e63
   131cc:	682f2e2e 	.word	0x682f2e2e
   131d0:	732f6c61 	.word	0x732f6c61
   131d4:	682f6372 	.word	0x682f6372
   131d8:	745f6c61 	.word	0x745f6c61
   131dc:	72656d69 	.word	0x72656d69
   131e0:	0000632e 	.word	0x0000632e
   131e4:	682f2e2e 	.word	0x682f2e2e
   131e8:	752f6c61 	.word	0x752f6c61
   131ec:	736c6974 	.word	0x736c6974
   131f0:	6372732f 	.word	0x6372732f
   131f4:	6974752f 	.word	0x6974752f
   131f8:	6c5f736c 	.word	0x6c5f736c
   131fc:	2e747369 	.word	0x2e747369
   13200:	00000063 	.word	0x00000063
   13204:	03020100 	.word	0x03020100
   13208:	07060504 	.word	0x07060504
   1320c:	14100c08 	.word	0x14100c08
   13210:	40302018 	.word	0x40302018

00013214 <_map>:
   13214:	00000000 00000040 00000001 00000021     ....@.......!...
   13224:	00000003 00000003 00000004 00000004     ................
   13234:	00000005 00000005 00000006 00000056     ............V...
   13244:	00000007 00000057 00000008 00000028     ....W.......(...
   13254:	00000009 00000029 682f2e2e 652f6c70     ....)...../hpl/e
   13264:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....

00013274 <user_mux_confs>:
   13274:	00020100 00000000 00000000 00000000     ................
	...

000132b8 <channel_confs>:
   132b8:	0660065f 00000000 00000000 00000000     _.`.............
	...

000132f8 <interrupt_cfg>:
	...
   13378:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
   13388:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
   13398:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
   133a8:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
   133b8:	65735f6c 6d6f6372 0000632e 40003000     l_sercom.c...0.@
   133c8:	40003400 41012000 41014000 43000000     .4.@. .A.@.A...C
   133d8:	43000400 43000800 43000c00              ...C...C...C

000133e4 <sercomspi_regs>:
   133e4:	0020000c 00020000 00000000 01ff0001     .. .............
   133f4:	30000c04 02000000 00000000 ff001700     ...0............
   13404:	00000601 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
   13414:	63745f6c 0000632e 40003800 40003c00     l_tc.c...8.@.<.@
   13424:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
   13434:	43001400 43001800                       ...C...C

0001343c <_usb_ep_cfgs>:
   1343c:	20000d0c 00000000 00000040 20000d4c     ... ....@...L.. 
   1344c:	20000d8c 00400040 20000dcc 20000e0c     ... @.@.... ... 
   1345c:	00400040 20000e4c 20000e8c 00400040     @.@.L.. ... @.@.
   1346c:	20000ecc 20000f0c 00400040 00000804     ... ... @.@.....
   1347c:	00004a25 682f2e2e 772f6c70 682f7464     %J..../hpl/wdt/h
   1348c:	775f6c70 632e7464 00000000 682f2e2e     pl_wdt.c....../h
   1349c:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
   134ac:	7361625f 00682e65                       _base.h.

000134b4 <n25q256a_interface>:
   134b4:	0000afa5 0000b049 0000b159 0000b311     ....I...Y.......
   134c4:	0000b3a1 752f2e2e 642f6273 63697665     ....../usb/devic
   134d4:	73752f65 2e636462 00000063              e/usbdc.c...

000134e0 <_ZTV13CANOpen_Class>:
	...
   134e8:	0000e021                                !...

000134ec <_ZTV8CO_Class>:
	...
   134f4:	0000e021                                !...

000134f8 <_ZTV15CO_Driver_Class>:
	...
   13500:	0000e021                                !...

00013504 <_ZL13OD_record1018>:
   13504:	200003a0 00000005 00000001 200003a4     ... ........... 
   13514:	00000085 00000004 200003a8 00000085     ........... ....
   13524:	00000004 200003ac 00000085 00000004     ....... ........
   13534:	200003b0 00000085 00000004              ... ........

00013540 <_ZL13OD_record1200>:
   13540:	200003bc 00000005 00000001 200003c0     ... ........... 
   13550:	00000085 00000004 200003c4 00000085     ........... ....
   13560:	00000004                                ....

00013564 <_ZL13OD_record1400>:
   13564:	200003c8 00000005 00000001 200003cc     ... ........... 
   13574:	0000008d 00000004 200003d0 0000000d     ........... ....
   13584:	00000001                                ....

00013588 <_ZL13OD_record1401>:
   13588:	200003d4 00000005 00000001 200003d8     ... ........... 
   13598:	0000008d 00000004 200003dc 0000000d     ........... ....
   135a8:	00000001                                ....

000135ac <_ZL13OD_record1402>:
   135ac:	200003e0 00000005 00000001 200003e4     ... ........... 
   135bc:	0000008d 00000004 200003e8 0000000d     ........... ....
   135cc:	00000001                                ....

000135d0 <_ZL13OD_record1403>:
   135d0:	200003ec 00000005 00000001 200003f0     ... ........... 
   135e0:	0000008d 00000004 200003f4 0000000d     ........... ....
   135f0:	00000001                                ....

000135f4 <_ZL13OD_record1600>:
   135f4:	200003f8 0000000d 00000001 200003fc     ... ........... 
   13604:	0000008d 00000004 20000400 0000008d     ........... ....
   13614:	00000004 20000404 0000008d 00000004     ....... ........
   13624:	20000408 0000008d 00000004 2000040c     ... ........... 
   13634:	0000008d 00000004 20000410 0000008d     ........... ....
   13644:	00000004 20000414 0000008d 00000004     ....... ........
   13654:	20000418 0000008d 00000004              ... ........

00013660 <_ZL13OD_record1601>:
   13660:	2000041c 0000000d 00000001 20000420     ... ........ .. 
   13670:	0000008d 00000004 20000424 0000008d     ........$.. ....
   13680:	00000004 20000428 0000008d 00000004     ....(.. ........
   13690:	2000042c 0000008d 00000004 20000430     ,.. ........0.. 
   136a0:	0000008d 00000004 20000434 0000008d     ........4.. ....
   136b0:	00000004 20000438 0000008d 00000004     ....8.. ........
   136c0:	2000043c 0000008d 00000004              <.. ........

000136cc <_ZL13OD_record1602>:
   136cc:	20000440 0000000d 00000001 20000444     @.. ........D.. 
   136dc:	0000008d 00000004 20000448 0000008d     ........H.. ....
   136ec:	00000004 2000044c 0000008d 00000004     ....L.. ........
   136fc:	20000450 0000008d 00000004 20000454     P.. ........T.. 
   1370c:	0000008d 00000004 20000458 0000008d     ........X.. ....
   1371c:	00000004 2000045c 0000008d 00000004     ....\.. ........
   1372c:	20000460 0000008d 00000004              `.. ........

00013738 <_ZL13OD_record1603>:
   13738:	20000464 0000000d 00000001 20000468     d.. ........h.. 
   13748:	0000008d 00000004 2000046c 0000008d     ........l.. ....
   13758:	00000004 20000470 0000008d 00000004     ....p.. ........
   13768:	20000474 0000008d 00000004 20000478     t.. ........x.. 
   13778:	0000008d 00000004 2000047c 0000008d     ........|.. ....
   13788:	00000004 20000480 0000008d 00000004     ....... ........
   13798:	20000484 0000008d 00000004              ... ........

000137a4 <_ZL13OD_record1800>:
   137a4:	20000488 00000005 00000001 2000048c     ... ........... 
   137b4:	0000008d 00000004 20000490 0000000d     ........... ....
   137c4:	00000001 20000494 0000008d 00000002     ....... ........
   137d4:	20000498 0000000d 00000001 2000049c     ... ........... 
   137e4:	0000008d 00000002 200004a0 0000000d     ........... ....
   137f4:	00000001                                ....

000137f8 <_ZL13OD_record1801>:
   137f8:	200004a4 00000005 00000001 200004a8     ... ........... 
   13808:	0000008d 00000004 200004ac 0000000d     ........... ....
   13818:	00000001 200004b0 0000008d 00000002     ....... ........
   13828:	200004b4 0000000d 00000001 200004b8     ... ........... 
   13838:	0000008d 00000002 200004bc 0000000d     ........... ....
   13848:	00000001                                ....

0001384c <_ZL13OD_record1802>:
   1384c:	200004c0 00000005 00000001 200004c4     ... ........... 
   1385c:	0000008d 00000004 200004c8 0000000d     ........... ....
   1386c:	00000001 200004cc 0000008d 00000002     ....... ........
   1387c:	200004d0 0000000d 00000001 200004d4     ... ........... 
   1388c:	0000008d 00000002 200004d8 0000000d     ........... ....
   1389c:	00000001                                ....

000138a0 <_ZL13OD_record1803>:
   138a0:	200004dc 00000005 00000001 200004e0     ... ........... 
   138b0:	0000008d 00000004 200004e4 0000000d     ........... ....
   138c0:	00000001 200004e8 0000008d 00000002     ....... ........
   138d0:	200004ec 0000000d 00000001 200004f0     ... ........... 
   138e0:	0000008d 00000002 200004f4 0000000d     ........... ....
   138f0:	00000001                                ....

000138f4 <_ZL13OD_record1A00>:
   138f4:	200004f8 0000000d 00000001 200004fc     ... ........... 
   13904:	0000008d 00000004 20000500 0000008d     ........... ....
   13914:	00000004 20000504 0000008d 00000004     ....... ........
   13924:	20000508 0000008d 00000004 2000050c     ... ........... 
   13934:	0000008d 00000004 20000510 0000008d     ........... ....
   13944:	00000004 20000514 0000008d 00000004     ....... ........
   13954:	20000518 0000008d 00000004              ... ........

00013960 <_ZL13OD_record1A01>:
   13960:	2000051c 0000000d 00000001 20000520     ... ........ .. 
   13970:	0000008d 00000004 20000524 0000008d     ........$.. ....
   13980:	00000004 20000528 0000008d 00000004     ....(.. ........
   13990:	2000052c 0000008d 00000004 20000530     ,.. ........0.. 
   139a0:	0000008d 00000004 20000534 0000008d     ........4.. ....
   139b0:	00000004 20000538 0000008d 00000004     ....8.. ........
   139c0:	2000053c 0000008d 00000004              <.. ........

000139cc <_ZL13OD_record1A02>:
   139cc:	20000540 0000000d 00000001 20000544     @.. ........D.. 
   139dc:	0000008d 00000004 20000548 0000008d     ........H.. ....
   139ec:	00000004 2000054c 0000008d 00000004     ....L.. ........
   139fc:	20000550 0000008d 00000004 20000554     P.. ........T.. 
   13a0c:	0000008d 00000004 20000558 0000008d     ........X.. ....
   13a1c:	00000004 2000055c 0000008d 00000004     ....\.. ........
   13a2c:	20000560 0000008d 00000004              `.. ........

00013a38 <_ZL13OD_record1A03>:
   13a38:	20000564 0000000d 00000001 20000568     d.. ........h.. 
   13a48:	0000008d 00000004 2000056c 0000008d     ........l.. ....
   13a58:	00000004 20000570 0000008d 00000004     ....p.. ........
   13a68:	20000574 0000008d 00000004 20000578     t.. ........x.. 
   13a78:	0000008d 00000004 2000057c 0000008d     ........|.. ....
   13a88:	00000004 20000580 0000008d 00000004     ....... ........
   13a98:	20000584 0000008d 00000004              ... ........

00013aa4 <_ZL13OD_record2120>:
   13aa4:	20000270 00000006 00000001 20000278     p.. ........x.. 
   13ab4:	000000be 00000008 20000280 000000be     ........... ....
   13ac4:	00000008 20000288 000000be 00000004     ....... ........
   13ad4:	20000290 000000be 00000008 00000000     ... ............
   13ae4:	0000000e 00000000                       ........

00013aec <_ZL13OD_record2130>:
   13aec:	200002a0 00000006 00000001 200002a1     ... ........... 
   13afc:	00000006 0000001e 200002c0 0000008e     ........... ....
   13b0c:	00000008 200002c8 000000be 00000004     ....... ........

00013b1c <CO_ObjDict>:
   13b1c:	00001000 00000000 00000085 00000004     ................
   13b2c:	20000360 00001001 00000000 00000036     `.. ........6...
   13b3c:	00000001 200001e4 00001002 00000000     ....... ........
   13b4c:	000000b6 00000004 200001e8 00001003     ........... ....
   13b5c:	00000008 0000008e 00000004 200001ec     ............... 
   13b6c:	00001005 00000000 0000008d 00000004     ................
   13b7c:	20000364 00001006 00000000 0000008d     d.. ............
   13b8c:	00000004 20000368 00001007 00000000     ....h.. ........
   13b9c:	0000008d 00000004 2000036c 00001008     ........l.. ....
   13bac:	00000000 00000005 0000000b 20000370     ............p.. 
   13bbc:	00001009 00000000 00000005 00000004     ................
   13bcc:	2000037b 0000100a 00000000 00000005     {.. ............
   13bdc:	00000004 2000037f 00001010 00000001     ....... ........
   13bec:	0000008e 00000004 2000020c 00001011     ........... ....
   13bfc:	00000001 0000008e 00000004 20000210     ............... 
   13c0c:	00001014 00000000 00000085 00000004     ................
   13c1c:	20000384 00001015 00000000 0000008d     ... ............
   13c2c:	00000002 20000388 00001016 00000004     ....... ........
   13c3c:	0000008d 00000004 2000038c 00001017     ........... ....
   13c4c:	00000000 0000008d 00000002 2000039c     ............... 
   13c5c:	00001018 00000004 00000000 00000000     ................
   13c6c:	00013504 00001019 00000000 0000000d     .5..............
   13c7c:	00000001 200003b4 00001029 00000006     ....... ).......
   13c8c:	0000000d 00000001 200003b5 00001200     ........... ....
   13c9c:	00000002 00000000 00000000 00013540     ............@5..
   13cac:	00001400 00000002 00000000 00000000     ................
   13cbc:	00013564 00001401 00000002 00000000     d5..............
   13ccc:	00000000 00013588 00001402 00000002     .....5..........
	...
   13ce4:	000135ac 00001403 00000002 00000000     .5..............
   13cf4:	00000000 000135d0 00001600 00000008     .....5..........
	...
   13d0c:	000135f4 00001601 00000008 00000000     .5..............
   13d1c:	00000000 00013660 00001602 00000008     ....`6..........
	...
   13d34:	000136cc 00001603 00000008 00000000     .6..............
   13d44:	00000000 00013738 00001800 00000006     ....87..........
	...
   13d5c:	000137a4 00001801 00000006 00000000     .7..............
   13d6c:	00000000 000137f8 00001802 00000006     .....7..........
	...
   13d84:	0001384c 00001803 00000006 00000000     L8..............
   13d94:	00000000 000138a0 00001a00 00000008     .....8..........
	...
   13dac:	000138f4 00001a01 00000008 00000000     .8..............
   13dbc:	00000000 00013960 00001a02 00000008     ....`9..........
	...
   13dd4:	000139cc 00001a03 00000008 00000000     .9..............
   13de4:	00000000 00013a38 00001f80 00000000     ....8:..........
   13df4:	0000008d 00000004 20000588 00002100     ........... .!..
   13e04:	00000000 00000036 0000000a 20000214     ....6.......... 
   13e14:	00002101 00000000 0000000d 00000001     .!..............
   13e24:	2000058c 00002102 00000000 0000008d     ... .!..........
   13e34:	00000002 2000058e 00002103 00000000     ....... .!......
   13e44:	0000008e 00000002 2000021e 00002104     ........... .!..
   13e54:	00000000 00000086 00000002 20000220     ............ .. 
   13e64:	00002106 00000000 00000087 00000004     .!..............
   13e74:	20000314 00002107 00000005 000000be     ... .!..........
   13e84:	00000002 20000222 00002108 00000001     ....".. .!......
   13e94:	000000b6 00000002 2000022c 00002109     ........,.. .!..
   13ea4:	00000001 000000b6 00000002 2000022e     ............... 
   13eb4:	00002110 00000010 000000fe 00000004     .!..............
   13ec4:	20000230 00002111 00000010 000000fd     0.. .!..........
   13ed4:	00000004 20000590 00002112 00000010     ....... .!......
   13ee4:	000000ff 00000004 20000318 00002120     ...........  !..
   13ef4:	00000005 00000000 00000000 00013aa4     .............:..
   13f04:	00002130 00000003 00000000 00000000     0!..............
   13f14:	00013aec 00006000 00000008 00000076     .:...`......v...
   13f24:	00000001 200002d0 00006200 00000008     ....... .b......
   13f34:	0000003e 00000001 200002d8 00006401     >.......... .d..
   13f44:	0000000c 000000b6 00000002 200002e0     ............... 
   13f54:	00006411 00000008 000000be 00000002     .d..............
   13f64:	200002f8                                ... 

00013f68 <_ZL17crc16_ccitt_table>:
   13f68:	10210000 30632042 50a54084 70e760c6     ..!.B c0.@.P.`.p
   13f78:	91298108 b16ba14a d1adc18c f1efe1ce     ..).J.k.........
   13f88:	02101231 22523273 429452b5 62d672f7     1...s2R".R.B.r.b
   13f98:	83189339 a35ab37b c39cd3bd e3def3ff     9...{.Z.........
   13fa8:	34432462 14010420 74c764e6 548544a4     b$C4 ....d.t.D.T
   13fb8:	b54ba56a 95098528 f5cfe5ee d58dc5ac     j.K.(...........
   13fc8:	26723653 06301611 66f676d7 46b45695     S6r&..0..v.f.V.F
   13fd8:	a77ab75b 87389719 e7fef7df c7bcd79d     [.z...8.........
   13fe8:	58e548c4 78a76886 18610840 38232802     .H.X.h.x@.a..(#8
   13ff8:	d9edc9cc f9afe98e 99698948 b92ba90a     ........H.i...+.
   14008:	4ad45af5 6a967ab7 0a501a71 2a123a33     .Z.J.z.jq.P.3:.*
   14018:	cbdcdbfd eb9efbbf 8b589b79 ab1abb3b     ........y.X.;...
   14028:	7c876ca6 5cc54ce4 3c032c22 1c410c60     .l.|.L.\",.<`.A.
   14038:	fd8fedae ddcdcdec bd0bad2a 9d498d68     ........*...h.I.
   14048:	6eb67e97 4ef45ed5 2e323e13 0e701e51     .~.n.^.N.>2.Q.p.
   14058:	efbeff9f cffcdfdd af3abf1b 8f789f59     ..........:.Y.x.
   14068:	81a99188 a1ebb1ca c12dd10c e16ff14e     ..........-.N.o.
   14078:	00a11080 20e330c2 40255004 60677046     .....0. .P%@Fpg`
   14088:	939883b9 b3daa3fb d31cc33d f35ee37f     ........=.....^.
   14098:	129002b1 32d222f3 52144235 72566277     .....".25B.RwbVr
   140a8:	a5cbb5ea 858995a8 e54ff56e c50dd52c     ........n.O.,...
   140b8:	24c334e2 048114a0 64477466 44055424     .4.$....ftGd$T.D
   140c8:	b7faa7db 97b88799 f77ee75f d73cc71d     ........_.~...<.
   140d8:	36f226d3 16b00691 76766657 56344615     .&.6....Wfvv.F4V
   140e8:	c96dd94c e92ff90e 89e999c8 a9abb98a     L.m.../.........
   140f8:	48655844 68277806 08e118c0 28a33882     DXeH.x'h.....8.(
   14108:	db5ccb7d fb1eeb3f 9bd88bf9 bb9aabbb     }.\.?...........
   14118:	5a544a75 7a166a37 1ad00af1 3a922ab3     uJTZ7j.z.....*.:
   14128:	ed0ffd2e cd4ddd6c ad8bbdaa 8dc99de8     ....l.M.........
   14138:	6c077c26 4c455c64 2c833ca2 0cc11ce0     &|.ld\EL.<.,....
   14148:	ff3eef1f df7ccf5d bfbaaf9b 9ff88fd9     ..>.].|.........
   14158:	7e366e17 5e744e55 3eb22e93 1ef00ed1     .n6~UNt^...>....

00014168 <_global_impure_ptr>:
   14168:	200005d8                                ... 

0001416c <_init>:
   1416c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1416e:	bf00      	nop
   14170:	bcf8      	pop	{r3, r4, r5, r6, r7}
   14172:	bc08      	pop	{r3}
   14174:	469e      	mov	lr, r3
   14176:	4770      	bx	lr

00014178 <__init_array_start>:
   14178:	00013079 	.word	0x00013079

0001417c <__frame_dummy_init_array_entry>:
   1417c:	00000289 000003b5                       ........

00014184 <_fini>:
   14184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14186:	bf00      	nop
   14188:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1418a:	bc08      	pop	{r3}
   1418c:	469e      	mov	lr, r3
   1418e:	4770      	bx	lr

00014190 <__fini_array_start>:
   14190:	00000265 	.word	0x00000265
