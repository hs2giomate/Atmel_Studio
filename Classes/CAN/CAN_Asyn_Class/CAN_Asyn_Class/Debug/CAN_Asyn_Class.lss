
CAN_Asyn_Class.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000e76c  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000e76c  0000e76c  0001e76c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000544  20000000  0000e774  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  00020544  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  00020544  2**0
                  CONTENTS
  5 .bss          000009d8  20000544  0000ecb8  00020544  2**2
                  ALLOC
  6 .stack        00010004  20000f1c  0000f690  00020544  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  00020544  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  00020572  2**0
                  CONTENTS, READONLY
  9 .debug_info   0005a6a7  00000000  00000000  000205cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00007a0e  00000000  00000000  0007ac72  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00018535  00000000  00000000  00082680  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002b38  00000000  00000000  0009abb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002858  00000000  00000000  0009d6ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00048b45  00000000  00000000  0009ff45  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0002fa18  00000000  00000000  000e8a8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00138526  00000000  00000000  001184a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000b5a4  00000000  00000000  002509c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	20 0f 01 20 a5 04 00 00 a1 04 00 00 a1 04 00 00      .. ............
      10:	a1 04 00 00 a1 04 00 00 a1 04 00 00 00 00 00 00     ................
	...
      2c:	a1 04 00 00 a1 04 00 00 00 00 00 00 a1 04 00 00     ................
      3c:	a1 04 00 00 a1 04 00 00 a1 04 00 00 a1 04 00 00     ................
      4c:	a1 04 00 00 a1 04 00 00 a1 04 00 00 a1 04 00 00     ................
      5c:	a1 04 00 00 a1 04 00 00 a1 04 00 00 a1 04 00 00     ................
      6c:	65 5e 00 00 a1 04 00 00 a1 04 00 00 a1 04 00 00     e^..............
      7c:	a1 04 00 00 0d 4d 00 00 1d 4d 00 00 2d 4d 00 00     .....M...M..-M..
      8c:	3d 4d 00 00 a1 04 00 00 a1 04 00 00 a1 04 00 00     =M..............
      9c:	a1 04 00 00 a1 04 00 00 a1 04 00 00 a1 04 00 00     ................
      ac:	a1 04 00 00 a1 04 00 00 a1 04 00 00 a1 04 00 00     ................
      bc:	a1 04 00 00 a1 04 00 00 a1 04 00 00 a1 04 00 00     ................
      cc:	a1 04 00 00 a1 04 00 00 a1 04 00 00 a1 04 00 00     ................
      dc:	a1 04 00 00 a1 04 00 00 a1 04 00 00 00 00 00 00     ................
	...
      f4:	a1 04 00 00 a1 04 00 00 a1 04 00 00 a1 04 00 00     ................
     104:	a1 04 00 00 a1 04 00 00 a1 04 00 00 a1 04 00 00     ................
     114:	a1 04 00 00 a1 04 00 00 a1 04 00 00 a1 04 00 00     ................
     124:	a1 04 00 00 a1 04 00 00 a1 04 00 00 a1 04 00 00     ................
     134:	a1 04 00 00 61 70 00 00 7d 70 00 00 99 70 00 00     ....ap..}p...p..
     144:	b5 70 00 00 d1 70 00 00 ed 70 00 00 09 71 00 00     .p...p...p...q..
     154:	25 71 00 00 a1 04 00 00 a1 04 00 00 a1 04 00 00     %q..............
     164:	a1 04 00 00 41 71 00 00 5d 71 00 00 79 71 00 00     ....Aq..]q..yq..
     174:	95 71 00 00 a1 04 00 00 91 42 00 00 b9 aa 00 00     .q.......B......
     184:	c9 aa 00 00 d9 aa 00 00 e9 aa 00 00 a1 04 00 00     ................
     194:	a1 04 00 00 a1 04 00 00 a1 04 00 00 a1 04 00 00     ................
     1a4:	a1 04 00 00 a1 04 00 00 a1 04 00 00 a1 04 00 00     ................
     1b4:	a1 04 00 00 a1 04 00 00 a1 04 00 00 a1 04 00 00     ................
     1c4:	a1 04 00 00 a1 04 00 00 a1 04 00 00 a1 04 00 00     ................
     1d4:	a1 04 00 00 a1 04 00 00 a1 04 00 00 a1 04 00 00     ................
     1e4:	a1 04 00 00 a1 04 00 00 e9 81 00 00 05 82 00 00     ................
     1f4:	21 82 00 00 3d 82 00 00 a1 04 00 00 a1 04 00 00     !...=...........
     204:	a1 04 00 00 59 82 00 00 a1 04 00 00 a1 04 00 00     ....Y...........
     214:	a1 04 00 00 a1 04 00 00 a1 04 00 00 a1 04 00 00     ................
     224:	a1 04 00 00 a1 04 00 00 a1 04 00 00 a1 04 00 00     ................
     234:	a1 04 00 00 a1 04 00 00 a1 04 00 00 a1 04 00 00     ................
     244:	a1 04 00 00 a1 04 00 00 a1 04 00 00 a1 04 00 00     ................
     254:	a1 04 00 00 a1 04 00 00 a1 04 00 00 a1 04 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000544 	.word	0x20000544
     280:	00000000 	.word	0x00000000
     284:	0000e774 	.word	0x0000e774

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000e774 	.word	0x0000e774
     2c4:	20000548 	.word	0x20000548
     2c8:	0000e774 	.word	0x0000e774
     2cc:	00000000 	.word	0x00000000

000002d0 <_ZL19CAN_CCU_tx_callbackP20can_async_descriptor>:
const	uint32_t defaultFilterIndex[]={0x45a,0x469};

static void CAN_CCU_tx_callback(struct can_async_descriptor *const descr)
{
	(void)descr;
	ptrCANAsynClass->txCallBack=true;
     2d0:	4b02      	ldr	r3, [pc, #8]	; (2dc <_ZL19CAN_CCU_tx_callbackP20can_async_descriptor+0xc>)
     2d2:	681b      	ldr	r3, [r3, #0]
     2d4:	2201      	movs	r2, #1
     2d6:	705a      	strb	r2, [r3, #1]
     2d8:	4770      	bx	lr
     2da:	bf00      	nop
     2dc:	20000560 	.word	0x20000560

000002e0 <_ZL19CAN_std_tx_callbackP20can_async_descriptor>:
static void CAN_std_tx_callback(struct can_async_descriptor *const descr)
{
	(void)descr;

	/* Enable the FDOE and BRSE in register configuration*/
	hri_can_set_CCCR_INIT_bit(ptrCANAsynClass->canDescriptor->dev.hw);
     2e0:	4b10      	ldr	r3, [pc, #64]	; (324 <_ZL19CAN_std_tx_callbackP20can_async_descriptor+0x44>)
     2e2:	6819      	ldr	r1, [r3, #0]
     2e4:	6d4b      	ldr	r3, [r1, #84]	; 0x54
     2e6:	681a      	ldr	r2, [r3, #0]
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
     2e8:	6993      	ldr	r3, [r2, #24]
     2ea:	f043 0301 	orr.w	r3, r3, #1
     2ee:	6193      	str	r3, [r2, #24]
	while (hri_can_get_CCCR_INIT_bit(ptrCANAsynClass->canDescriptor->dev.hw) == 0)
     2f0:	6d4b      	ldr	r3, [r1, #84]	; 0x54
     2f2:	681a      	ldr	r2, [r3, #0]
}

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
     2f4:	6993      	ldr	r3, [r2, #24]
     2f6:	f013 0f01 	tst.w	r3, #1
     2fa:	d0fb      	beq.n	2f4 <_ZL19CAN_std_tx_callbackP20can_async_descriptor+0x14>
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
     2fc:	6993      	ldr	r3, [r2, #24]
     2fe:	f043 0302 	orr.w	r3, r3, #2
     302:	6193      	str	r3, [r2, #24]
	;
	hri_can_set_CCCR_CCE_bit(ptrCANAsynClass->canDescriptor->dev.hw);
	hri_can_set_CCCR_FDOE_bit(ptrCANAsynClass->canDescriptor->dev.hw);
     304:	6d4b      	ldr	r3, [r1, #84]	; 0x54
     306:	681a      	ldr	r2, [r3, #0]
}

static inline void hri_can_set_CCCR_FDOE_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_FDOE;
     308:	6993      	ldr	r3, [r2, #24]
     30a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     30e:	6193      	str	r3, [r2, #24]
	hri_can_set_CCCR_BRSE_bit(ptrCANAsynClass->canDescriptor->dev.hw);
     310:	6d4b      	ldr	r3, [r1, #84]	; 0x54
     312:	681a      	ldr	r2, [r3, #0]
}

static inline void hri_can_set_CCCR_BRSE_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_BRSE;
     314:	6993      	ldr	r3, [r2, #24]
     316:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     31a:	6193      	str	r3, [r2, #24]
	ptrCANAsynClass->txSTDCallBack=true;
     31c:	2301      	movs	r3, #1
     31e:	708b      	strb	r3, [r1, #2]
     320:	4770      	bx	lr
     322:	bf00      	nop
     324:	20000560 	.word	0x20000560

00000328 <_ZL19CAN_CCU_rx_callbackP20can_async_descriptor>:
	
}

static void CAN_CCU_rx_callback(struct can_async_descriptor *const descr)
{
     328:	b510      	push	{r4, lr}
	ptrCANAsynClass->receivedMsg.data=ptrCANAsynClass->rx_buffer_64;
     32a:	4c05      	ldr	r4, [pc, #20]	; (340 <_ZL19CAN_CCU_rx_callbackP20can_async_descriptor+0x18>)
     32c:	6821      	ldr	r1, [r4, #0]
     32e:	1ccb      	adds	r3, r1, #3
     330:	64cb      	str	r3, [r1, #76]	; 0x4c
	can_async_read(descr, &(ptrCANAsynClass->receivedMsg));
     332:	3144      	adds	r1, #68	; 0x44
     334:	4b03      	ldr	r3, [pc, #12]	; (344 <_ZL19CAN_CCU_rx_callbackP20can_async_descriptor+0x1c>)
     336:	4798      	blx	r3
	ptrCANAsynClass->rxCallBack=true;
     338:	6823      	ldr	r3, [r4, #0]
     33a:	2201      	movs	r2, #1
     33c:	701a      	strb	r2, [r3, #0]
     33e:	bd10      	pop	{r4, pc}
     340:	20000560 	.word	0x20000560
     344:	00001ab1 	.word	0x00001ab1

00000348 <_ZN14CAN_Asyn_ClassC1EP20can_async_descriptor>:
	ptrCANAsynClass=this;
} //CAN_Asyn_Class

CAN_Asyn_Class::CAN_Asyn_Class(can_async_descriptor  *descr)
{
	canDescriptor=descr;
     348:	6541      	str	r1, [r0, #84]	; 0x54
	ptrCANAsynClass=this;
     34a:	4a01      	ldr	r2, [pc, #4]	; (350 <_ZN14CAN_Asyn_ClassC1EP20can_async_descriptor+0x8>)
     34c:	6010      	str	r0, [r2, #0]
} //CAN_Asyn_Class
     34e:	4770      	bx	lr
     350:	20000560 	.word	0x20000560

00000354 <_ZN14CAN_Asyn_ClassD1Ev>:

// default destructor
CAN_Asyn_Class::~CAN_Asyn_Class()
{
} //~CAN_Asyn_Class
     354:	4770      	bx	lr
	...

00000358 <_ZN14CAN_Asyn_Class5WriteEPhmh>:
			SetFilter(filterIndex[i],i);
		}
		return	0;
}

int32_t	CAN_Asyn_Class::Write(uint8_t *p,uint32_t id, uint8_t len){
     358:	b538      	push	{r3, r4, r5, lr}
     35a:	4604      	mov	r4, r0
		msg.id   = id;
     35c:	6582      	str	r2, [r0, #88]	; 0x58
		msg.type = CAN_TYPE_DATA;
     35e:	2500      	movs	r5, #0
     360:	f880 505c 	strb.w	r5, [r0, #92]	; 0x5c
		msg.data = p;
     364:	6601      	str	r1, [r0, #96]	; 0x60
		msg.len  = len;
     366:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
		msg.fmt  = CAN_FMT_STDID;
     36a:	f880 5065 	strb.w	r5, [r0, #101]	; 0x65

		can_async_register_callback(canDescriptor, CAN_ASYNC_TX_CB, (FUNC_PTR)CAN_CCU_tx_callback);
     36e:	4a07      	ldr	r2, [pc, #28]	; (38c <_ZN14CAN_Asyn_Class5WriteEPhmh+0x34>)
     370:	2101      	movs	r1, #1
     372:	6d40      	ldr	r0, [r0, #84]	; 0x54
     374:	4b06      	ldr	r3, [pc, #24]	; (390 <_ZN14CAN_Asyn_Class5WriteEPhmh+0x38>)
     376:	4798      	blx	r3
		can_async_enable(canDescriptor);
     378:	6d60      	ldr	r0, [r4, #84]	; 0x54
     37a:	4b06      	ldr	r3, [pc, #24]	; (394 <_ZN14CAN_Asyn_Class5WriteEPhmh+0x3c>)
     37c:	4798      	blx	r3
		txCallBack=false;
     37e:	7065      	strb	r5, [r4, #1]
		return  can_async_write(canDescriptor, &msg);
     380:	f104 0158 	add.w	r1, r4, #88	; 0x58
     384:	6d60      	ldr	r0, [r4, #84]	; 0x54
     386:	4b04      	ldr	r3, [pc, #16]	; (398 <_ZN14CAN_Asyn_Class5WriteEPhmh+0x40>)
     388:	4798      	blx	r3
}
     38a:	bd38      	pop	{r3, r4, r5, pc}
     38c:	000002d1 	.word	0x000002d1
     390:	00001b49 	.word	0x00001b49
     394:	00001a75 	.word	0x00001a75
     398:	00001afd 	.word	0x00001afd

0000039c <_ZN14CAN_Asyn_Class9SetFilterEmh>:
int32_t	CAN_Asyn_Class::SetFilter(uint32_t id,uint8_t	indice){
     39c:	b570      	push	{r4, r5, r6, lr}
     39e:	4604      	mov	r4, r0
     3a0:	460e      	mov	r6, r1
     3a2:	4615      	mov	r5, r2
		
		can_async_register_callback(canDescriptor, CAN_ASYNC_RX_CB, (FUNC_PTR)CAN_CCU_rx_callback);
     3a4:	4a07      	ldr	r2, [pc, #28]	; (3c4 <_ZN14CAN_Asyn_Class9SetFilterEmh+0x28>)
     3a6:	2100      	movs	r1, #0
     3a8:	6d40      	ldr	r0, [r0, #84]	; 0x54
     3aa:	4b07      	ldr	r3, [pc, #28]	; (3c8 <_ZN14CAN_Asyn_Class9SetFilterEmh+0x2c>)
     3ac:	4798      	blx	r3
		filter.id   = id;
     3ae:	66a6      	str	r6, [r4, #104]	; 0x68
		filter.mask = 0;
     3b0:	2200      	movs	r2, #0
     3b2:	66e2      	str	r2, [r4, #108]	; 0x6c
		return	can_async_set_filter(canDescriptor, indice, CAN_FMT_STDID, &filter);
     3b4:	f104 0368 	add.w	r3, r4, #104	; 0x68
     3b8:	4629      	mov	r1, r5
     3ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
     3bc:	4c03      	ldr	r4, [pc, #12]	; (3cc <_ZN14CAN_Asyn_Class9SetFilterEmh+0x30>)
     3be:	47a0      	blx	r4
}
     3c0:	bd70      	pop	{r4, r5, r6, pc}
     3c2:	bf00      	nop
     3c4:	00000329 	.word	0x00000329
     3c8:	00001b49 	.word	0x00001b49
     3cc:	00001bc5 	.word	0x00001bc5

000003d0 <_ZN14CAN_Asyn_Class17SetDefaultFiltersEv>:
uint8_t	CAN_Asyn_Class::SetDefaultFilters(void){
     3d0:	b570      	push	{r4, r5, r6, lr}
     3d2:	4604      	mov	r4, r0
		for (i = 0; i < FILTER_INDEXES; i++)
     3d4:	2200      	movs	r2, #0
     3d6:	f880 2108 	strb.w	r2, [r0, #264]	; 0x108
     3da:	4613      	mov	r3, r2
			filterIndex[i]=defaultFilterIndex[i];
     3dc:	4e09      	ldr	r6, [pc, #36]	; (404 <_ZN14CAN_Asyn_Class17SetDefaultFiltersEv+0x34>)
			SetFilter(filterIndex[i],i);
     3de:	4d0a      	ldr	r5, [pc, #40]	; (408 <_ZN14CAN_Asyn_Class17SetDefaultFiltersEv+0x38>)
			filterIndex[i]=defaultFilterIndex[i];
     3e0:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
     3e4:	3340      	adds	r3, #64	; 0x40
     3e6:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
			SetFilter(filterIndex[i],i);
     3ea:	4620      	mov	r0, r4
     3ec:	47a8      	blx	r5
		for (i = 0; i < FILTER_INDEXES; i++)
     3ee:	f894 2108 	ldrb.w	r2, [r4, #264]	; 0x108
     3f2:	3201      	adds	r2, #1
     3f4:	b2d2      	uxtb	r2, r2
     3f6:	f884 2108 	strb.w	r2, [r4, #264]	; 0x108
     3fa:	4613      	mov	r3, r2
     3fc:	2a01      	cmp	r2, #1
     3fe:	ddef      	ble.n	3e0 <_ZN14CAN_Asyn_Class17SetDefaultFiltersEv+0x10>
}
     400:	2000      	movs	r0, #0
     402:	bd70      	pop	{r4, r5, r6, pc}
     404:	0000e0bc 	.word	0x0000e0bc
     408:	0000039d 	.word	0x0000039d

0000040c <_ZN14CAN_Asyn_Class4InitEv>:
bool	CAN_Asyn_Class::Init(void){
     40c:	b508      	push	{r3, lr}
	msg.data=buffer_64;
     40e:	f100 0270 	add.w	r2, r0, #112	; 0x70
     412:	6602      	str	r2, [r0, #96]	; 0x60
	SetDefaultFilters();
     414:	4b01      	ldr	r3, [pc, #4]	; (41c <_ZN14CAN_Asyn_Class4InitEv+0x10>)
     416:	4798      	blx	r3
}
     418:	2001      	movs	r0, #1
     41a:	bd08      	pop	{r3, pc}
     41c:	000003d1 	.word	0x000003d1

00000420 <_ZN14CAN_Asyn_Class13WriteStandardEPhmh>:
int32_t	CAN_Asyn_Class::WriteStandard(uint8_t *p,uint32_t id, uint8_t len){
     420:	b510      	push	{r4, lr}
     422:	4604      	mov	r4, r0
		msg.id   = id;
     424:	6582      	str	r2, [r0, #88]	; 0x58
		msg.type = CAN_TYPE_DATA;
     426:	2200      	movs	r2, #0
     428:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
		msg.data = p;
     42c:	6601      	str	r1, [r0, #96]	; 0x60
		msg.len  = len;
     42e:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
		msg.fmt  = CAN_FMT_STDID;
     432:	f880 2065 	strb.w	r2, [r0, #101]	; 0x65

		/* Disable the FDOE and BRSE from register configuration
			* and enable them again in callback */
		hri_can_set_CCCR_INIT_bit(canDescriptor->dev.hw);
     436:	6d43      	ldr	r3, [r0, #84]	; 0x54
     438:	681a      	ldr	r2, [r3, #0]
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
     43a:	6993      	ldr	r3, [r2, #24]
     43c:	f043 0301 	orr.w	r3, r3, #1
     440:	6193      	str	r3, [r2, #24]
		while (hri_can_get_CCCR_INIT_bit(canDescriptor->dev.hw) == 0)
     442:	6d43      	ldr	r3, [r0, #84]	; 0x54
     444:	681a      	ldr	r2, [r3, #0]
	tmp = ((Can *)hw)->CCCR.reg;
     446:	6993      	ldr	r3, [r2, #24]
     448:	f013 0f01 	tst.w	r3, #1
     44c:	d0fb      	beq.n	446 <_ZN14CAN_Asyn_Class13WriteStandardEPhmh+0x26>
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
     44e:	6993      	ldr	r3, [r2, #24]
     450:	f043 0302 	orr.w	r3, r3, #2
     454:	6193      	str	r3, [r2, #24]
			;
		hri_can_set_CCCR_CCE_bit(canDescriptor->dev.hw);

		hri_can_clear_CCCR_FDOE_bit(canDescriptor->dev.hw);
     456:	6d63      	ldr	r3, [r4, #84]	; 0x54
     458:	681a      	ldr	r2, [r3, #0]
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_FDOE;
     45a:	6993      	ldr	r3, [r2, #24]
     45c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
     460:	6193      	str	r3, [r2, #24]
		hri_can_clear_CCCR_BRSE_bit(canDescriptor->dev.hw);
     462:	6d63      	ldr	r3, [r4, #84]	; 0x54
     464:	681a      	ldr	r2, [r3, #0]
}

static inline void hri_can_clear_CCCR_BRSE_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_BRSE;
     466:	6993      	ldr	r3, [r2, #24]
     468:	f423 7300 	bic.w	r3, r3, #512	; 0x200
     46c:	6193      	str	r3, [r2, #24]

		can_async_register_callback(canDescriptor, CAN_ASYNC_TX_CB, (FUNC_PTR)CAN_std_tx_callback);
     46e:	4a08      	ldr	r2, [pc, #32]	; (490 <_ZN14CAN_Asyn_Class13WriteStandardEPhmh+0x70>)
     470:	2101      	movs	r1, #1
     472:	6d60      	ldr	r0, [r4, #84]	; 0x54
     474:	4b07      	ldr	r3, [pc, #28]	; (494 <_ZN14CAN_Asyn_Class13WriteStandardEPhmh+0x74>)
     476:	4798      	blx	r3
		can_async_enable(canDescriptor);
     478:	6d60      	ldr	r0, [r4, #84]	; 0x54
     47a:	4b07      	ldr	r3, [pc, #28]	; (498 <_ZN14CAN_Asyn_Class13WriteStandardEPhmh+0x78>)
     47c:	4798      	blx	r3
		txSTDCallBack=false;
     47e:	2300      	movs	r3, #0
     480:	70a3      	strb	r3, [r4, #2]
		return  can_async_write(canDescriptor, &msg);
     482:	f104 0158 	add.w	r1, r4, #88	; 0x58
     486:	6d60      	ldr	r0, [r4, #84]	; 0x54
     488:	4b04      	ldr	r3, [pc, #16]	; (49c <_ZN14CAN_Asyn_Class13WriteStandardEPhmh+0x7c>)
     48a:	4798      	blx	r3
     48c:	bd10      	pop	{r4, pc}
     48e:	bf00      	nop
     490:	000002e1 	.word	0x000002e1
     494:	00001b49 	.word	0x00001b49
     498:	00001a75 	.word	0x00001a75
     49c:	00001afd 	.word	0x00001afd

000004a0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     4a0:	e7fe      	b.n	4a0 <Dummy_Handler>
	...

000004a4 <Reset_Handler>:
{
     4a4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     4a6:	4b17      	ldr	r3, [pc, #92]	; (504 <Reset_Handler+0x60>)
     4a8:	4a17      	ldr	r2, [pc, #92]	; (508 <Reset_Handler+0x64>)
     4aa:	429a      	cmp	r2, r3
     4ac:	d010      	beq.n	4d0 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     4ae:	4b17      	ldr	r3, [pc, #92]	; (50c <Reset_Handler+0x68>)
     4b0:	4a14      	ldr	r2, [pc, #80]	; (504 <Reset_Handler+0x60>)
     4b2:	429a      	cmp	r2, r3
     4b4:	d20c      	bcs.n	4d0 <Reset_Handler+0x2c>
     4b6:	3b01      	subs	r3, #1
     4b8:	1a9b      	subs	r3, r3, r2
     4ba:	f023 0303 	bic.w	r3, r3, #3
     4be:	3304      	adds	r3, #4
     4c0:	4413      	add	r3, r2
     4c2:	4911      	ldr	r1, [pc, #68]	; (508 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     4c4:	f851 0b04 	ldr.w	r0, [r1], #4
     4c8:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     4cc:	429a      	cmp	r2, r3
     4ce:	d1f9      	bne.n	4c4 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     4d0:	4b0f      	ldr	r3, [pc, #60]	; (510 <Reset_Handler+0x6c>)
     4d2:	4a10      	ldr	r2, [pc, #64]	; (514 <Reset_Handler+0x70>)
     4d4:	429a      	cmp	r2, r3
     4d6:	d20a      	bcs.n	4ee <Reset_Handler+0x4a>
     4d8:	3b01      	subs	r3, #1
     4da:	1a9b      	subs	r3, r3, r2
     4dc:	f023 0303 	bic.w	r3, r3, #3
     4e0:	3304      	adds	r3, #4
     4e2:	4413      	add	r3, r2
                *pDest++ = 0;
     4e4:	2100      	movs	r1, #0
     4e6:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     4ea:	4293      	cmp	r3, r2
     4ec:	d1fb      	bne.n	4e6 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     4ee:	4a0a      	ldr	r2, [pc, #40]	; (518 <Reset_Handler+0x74>)
     4f0:	4b0a      	ldr	r3, [pc, #40]	; (51c <Reset_Handler+0x78>)
     4f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     4f6:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     4f8:	4b09      	ldr	r3, [pc, #36]	; (520 <Reset_Handler+0x7c>)
     4fa:	4798      	blx	r3
        main();
     4fc:	4b09      	ldr	r3, [pc, #36]	; (524 <Reset_Handler+0x80>)
     4fe:	4798      	blx	r3
     500:	e7fe      	b.n	500 <Reset_Handler+0x5c>
     502:	bf00      	nop
     504:	20000000 	.word	0x20000000
     508:	0000e774 	.word	0x0000e774
     50c:	20000544 	.word	0x20000544
     510:	20000f1c 	.word	0x20000f1c
     514:	20000544 	.word	0x20000544
     518:	e000ed00 	.word	0xe000ed00
     51c:	00000000 	.word	0x00000000
     520:	0000dc7d 	.word	0x0000dc7d
     524:	00000575 	.word	0x00000575

00000528 <_ZL12display_menuv>:
#include "CAN_Asyn_Class.h"

CAN_Asyn_Class	can(&CAN_CCU);

static void display_menu(void)
{
     528:	b538      	push	{r3, r4, r5, lr}
	usb.print("Menu :\r\n");
     52a:	4d0a      	ldr	r5, [pc, #40]	; (554 <_ZL12display_menuv+0x2c>)
     52c:	490a      	ldr	r1, [pc, #40]	; (558 <_ZL12display_menuv+0x30>)
     52e:	4628      	mov	r0, r5
     530:	4c0a      	ldr	r4, [pc, #40]	; (55c <_ZL12display_menuv+0x34>)
     532:	47a0      	blx	r4
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
{ stream.print(arg); return stream; }
     534:	490a      	ldr	r1, [pc, #40]	; (560 <_ZL12display_menuv+0x38>)
     536:	4628      	mov	r0, r5
     538:	47a0      	blx	r4
     53a:	490a      	ldr	r1, [pc, #40]	; (564 <_ZL12display_menuv+0x3c>)
     53c:	4628      	mov	r0, r5
     53e:	47a0      	blx	r4
     540:	4909      	ldr	r1, [pc, #36]	; (568 <_ZL12display_menuv+0x40>)
     542:	4628      	mov	r0, r5
     544:	47a0      	blx	r4
     546:	4909      	ldr	r1, [pc, #36]	; (56c <_ZL12display_menuv+0x44>)
     548:	4628      	mov	r0, r5
     54a:	47a0      	blx	r4
     54c:	4908      	ldr	r1, [pc, #32]	; (570 <_ZL12display_menuv+0x48>)
     54e:	4628      	mov	r0, r5
     550:	47a0      	blx	r4
     552:	bd38      	pop	{r3, r4, r5, pc}
     554:	20000c10 	.word	0x20000c10
     558:	0000e0c4 	.word	0x0000e0c4
     55c:	0000d619 	.word	0x0000d619
     560:	0000e0d0 	.word	0x0000e0d0
     564:	0000e0ec 	.word	0x0000e0ec
     568:	0000e138 	.word	0x0000e138
     56c:	0000e188 	.word	0x0000e188
     570:	0000e1d4 	.word	0x0000e1d4

00000574 <main>:
	usb.print("\r\n\r\n");
	return can.rxCallBack;
}

int main(void)
{
     574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     578:	b0a4      	sub	sp, #144	; 0x90
	uint8_t tx_message_0[64];
	uint8_t tx_message_1[64];
	uint8_t tx_message_2[8];

	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     57a:	4b49      	ldr	r3, [pc, #292]	; (6a0 <main+0x12c>)
     57c:	4798      	blx	r3
	usb.Init();
     57e:	4849      	ldr	r0, [pc, #292]	; (6a4 <main+0x130>)
     580:	4b49      	ldr	r3, [pc, #292]	; (6a8 <main+0x134>)
     582:	4798      	blx	r3
	delay_ms(200);
     584:	20c8      	movs	r0, #200	; 0xc8
     586:	4b49      	ldr	r3, [pc, #292]	; (6ac <main+0x138>)
     588:	4798      	blx	r3
	can.Init();
     58a:	4849      	ldr	r0, [pc, #292]	; (6b0 <main+0x13c>)
     58c:	4b49      	ldr	r3, [pc, #292]	; (6b4 <main+0x140>)
     58e:	4798      	blx	r3
	display_menu();
     590:	4b49      	ldr	r3, [pc, #292]	; (6b8 <main+0x144>)
     592:	4798      	blx	r3
     594:	aa13      	add	r2, sp, #76	; 0x4c
     596:	a823      	add	r0, sp, #140	; 0x8c
     598:	4613      	mov	r3, r2

	/* Initialize the data to be used later */
	for (uint8_t i = 0; i < 64; i++) {
		tx_message_0[i] = i;
     59a:	1a99      	subs	r1, r3, r2
     59c:	f803 1b01 	strb.w	r1, [r3], #1
	for (uint8_t i = 0; i < 64; i++) {
     5a0:	4283      	cmp	r3, r0
     5a2:	d1fa      	bne.n	59a <main+0x26>
     5a4:	f10d 020b 	add.w	r2, sp, #11
     5a8:	2380      	movs	r3, #128	; 0x80
	}

	for (uint8_t j = 128; j < 192; j++) {
		tx_message_1[j - 128] = j;
     5aa:	f802 3f01 	strb.w	r3, [r2, #1]!
	for (uint8_t j = 128; j < 192; j++) {
     5ae:	3301      	adds	r3, #1
     5b0:	b2db      	uxtb	r3, r3
     5b2:	2bc0      	cmp	r3, #192	; 0xc0
     5b4:	d1f9      	bne.n	5aa <main+0x36>
     5b6:	aa01      	add	r2, sp, #4
     5b8:	a903      	add	r1, sp, #12
     5ba:	4613      	mov	r3, r2
	}

	for (uint8_t k = 0; k < 8; k++) {
		tx_message_2[k] = k;
     5bc:	1a98      	subs	r0, r3, r2
     5be:	f803 0b01 	strb.w	r0, [r3], #1
	for (uint8_t k = 0; k < 8; k++) {
     5c2:	4299      	cmp	r1, r3
     5c4:	d1fa      	bne.n	5bc <main+0x48>
	}

	while (1) {
		if (can.rxCallBack)
     5c6:	4d3a      	ldr	r5, [pc, #232]	; (6b0 <main+0x13c>)
	usb.print("\n\r CAN Message received . The received data is: \r\n");
     5c8:	f8df 8118 	ldr.w	r8, [pc, #280]	; 6e4 <main+0x170>
     5cc:	4e35      	ldr	r6, [pc, #212]	; (6a4 <main+0x130>)
     5ce:	e020      	b.n	612 <main+0x9e>
     5d0:	4641      	mov	r1, r8
     5d2:	4630      	mov	r0, r6
     5d4:	4b39      	ldr	r3, [pc, #228]	; (6bc <main+0x148>)
     5d6:	4798      	blx	r3
	for (uint8_t i = 0; i < can.receivedMsg.len; i++) {
     5d8:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
     5dc:	b193      	cbz	r3, 604 <main+0x90>
     5de:	2300      	movs	r3, #0
     5e0:	461c      	mov	r4, r3
		usb.print(can.rx_buffer_64[i],DEC);
     5e2:	4f37      	ldr	r7, [pc, #220]	; (6c0 <main+0x14c>)
     5e4:	442b      	add	r3, r5
     5e6:	220a      	movs	r2, #10
     5e8:	78d9      	ldrb	r1, [r3, #3]
     5ea:	4630      	mov	r0, r6
     5ec:	47b8      	blx	r7
     5ee:	4935      	ldr	r1, [pc, #212]	; (6c4 <main+0x150>)
     5f0:	4630      	mov	r0, r6
     5f2:	4b32      	ldr	r3, [pc, #200]	; (6bc <main+0x148>)
     5f4:	4798      	blx	r3
	for (uint8_t i = 0; i < can.receivedMsg.len; i++) {
     5f6:	3401      	adds	r4, #1
     5f8:	b2e4      	uxtb	r4, r4
     5fa:	4623      	mov	r3, r4
     5fc:	f895 2050 	ldrb.w	r2, [r5, #80]	; 0x50
     600:	4294      	cmp	r4, r2
     602:	dbef      	blt.n	5e4 <main+0x70>
	usb.print("\r\n\r\n");
     604:	4930      	ldr	r1, [pc, #192]	; (6c8 <main+0x154>)
     606:	4630      	mov	r0, r6
     608:	4b2c      	ldr	r3, [pc, #176]	; (6bc <main+0x148>)
     60a:	4798      	blx	r3
	return can.rxCallBack;
     60c:	782b      	ldrb	r3, [r5, #0]
		{
			PrintRxCallBack();
			can.rxCallBack=false;
     60e:	2300      	movs	r3, #0
     610:	702b      	strb	r3, [r5, #0]
		if (can.rxCallBack)
     612:	782b      	ldrb	r3, [r5, #0]
     614:	2b00      	cmp	r3, #0
     616:	d1db      	bne.n	5d0 <main+0x5c>
		} 
		else if (can.txCallBack)
     618:	786b      	ldrb	r3, [r5, #1]
     61a:	b943      	cbnz	r3, 62e <main+0xba>
		{
			usb.print("  CAN Transmission done \r\n");
			can.txCallBack=false;
		}
		else if (can.txSTDCallBack)
     61c:	78ab      	ldrb	r3, [r5, #2]
     61e:	b16b      	cbz	r3, 63c <main+0xc8>
		{
			usb.print("  CAN Standard Transmission done \r\n");
     620:	492a      	ldr	r1, [pc, #168]	; (6cc <main+0x158>)
     622:	4630      	mov	r0, r6
     624:	4b25      	ldr	r3, [pc, #148]	; (6bc <main+0x148>)
     626:	4798      	blx	r3
			can.txSTDCallBack=false;
     628:	2300      	movs	r3, #0
     62a:	70ab      	strb	r3, [r5, #2]
     62c:	e7f1      	b.n	612 <main+0x9e>
			usb.print("  CAN Transmission done \r\n");
     62e:	4928      	ldr	r1, [pc, #160]	; (6d0 <main+0x15c>)
     630:	4630      	mov	r0, r6
     632:	4b22      	ldr	r3, [pc, #136]	; (6bc <main+0x148>)
     634:	4798      	blx	r3
			can.txCallBack=false;
     636:	2300      	movs	r3, #0
     638:	706b      	strb	r3, [r5, #1]
     63a:	e7ea      	b.n	612 <main+0x9e>
		}
		else
		{
			key=0xff;
     63c:	a924      	add	r1, sp, #144	; 0x90
     63e:	23ff      	movs	r3, #255	; 0xff
     640:	f801 3d01 	strb.w	r3, [r1, #-1]!
			usb.read(&key);
     644:	4630      	mov	r0, r6
     646:	4b23      	ldr	r3, [pc, #140]	; (6d4 <main+0x160>)
     648:	4798      	blx	r3

			switch (key) {
     64a:	f89d 308f 	ldrb.w	r3, [sp, #143]	; 0x8f
     64e:	2b33      	cmp	r3, #51	; 0x33
     650:	d015      	beq.n	67e <main+0x10a>
     652:	d906      	bls.n	662 <main+0xee>
     654:	2b61      	cmp	r3, #97	; 0x61
     656:	d01a      	beq.n	68e <main+0x11a>
     658:	2b68      	cmp	r3, #104	; 0x68
     65a:	d1da      	bne.n	612 <main+0x9e>
			case 'h':
				display_menu();
     65c:	4b16      	ldr	r3, [pc, #88]	; (6b8 <main+0x144>)
     65e:	4798      	blx	r3
				break;
     660:	e7d7      	b.n	612 <main+0x9e>
			switch (key) {
     662:	2b32      	cmp	r3, #50	; 0x32
     664:	d1d5      	bne.n	612 <main+0x9e>

			case '2':
				usb.print("  0: Set standard filter ID 0: 0x45A, store into Rx buffer. \r\n");
     666:	491c      	ldr	r1, [pc, #112]	; (6d8 <main+0x164>)
     668:	4630      	mov	r0, r6
     66a:	4b14      	ldr	r3, [pc, #80]	; (6bc <main+0x148>)
     66c:	4798      	blx	r3
				can.Write(tx_message_0,0x45a,8);
     66e:	2308      	movs	r3, #8
     670:	f240 425a 	movw	r2, #1114	; 0x45a
     674:	a913      	add	r1, sp, #76	; 0x4c
     676:	4628      	mov	r0, r5
     678:	4c18      	ldr	r4, [pc, #96]	; (6dc <main+0x168>)
     67a:	47a0      	blx	r4
				break;
     67c:	e7c9      	b.n	612 <main+0x9e>

			case '3':
				can.Write(tx_message_1,0x469,8);
     67e:	2308      	movs	r3, #8
     680:	f240 4269 	movw	r2, #1129	; 0x469
     684:	a903      	add	r1, sp, #12
     686:	4628      	mov	r0, r5
     688:	4c14      	ldr	r4, [pc, #80]	; (6dc <main+0x168>)
     68a:	47a0      	blx	r4
				break;
     68c:	e7c1      	b.n	612 <main+0x9e>

			case 'a':
				can.WriteStandard(tx_message_2,0x469,8);
     68e:	2308      	movs	r3, #8
     690:	f240 4269 	movw	r2, #1129	; 0x469
     694:	a901      	add	r1, sp, #4
     696:	4628      	mov	r0, r5
     698:	4c11      	ldr	r4, [pc, #68]	; (6e0 <main+0x16c>)
     69a:	47a0      	blx	r4
				break;
     69c:	e7b9      	b.n	612 <main+0x9e>
     69e:	bf00      	nop
     6a0:	00000719 	.word	0x00000719
     6a4:	20000c10 	.word	0x20000c10
     6a8:	0000d249 	.word	0x0000d249
     6ac:	00001d05 	.word	0x00001d05
     6b0:	20000564 	.word	0x20000564
     6b4:	0000040d 	.word	0x0000040d
     6b8:	00000529 	.word	0x00000529
     6bc:	0000d619 	.word	0x0000d619
     6c0:	0000d639 	.word	0x0000d639
     6c4:	0000e220 	.word	0x0000e220
     6c8:	0000e224 	.word	0x0000e224
     6cc:	0000e248 	.word	0x0000e248
     6d0:	0000e22c 	.word	0x0000e22c
     6d4:	0000d365 	.word	0x0000d365
     6d8:	0000e26c 	.word	0x0000e26c
     6dc:	00000359 	.word	0x00000359
     6e0:	00000421 	.word	0x00000421
     6e4:	0000e1ec 	.word	0x0000e1ec

000006e8 <_GLOBAL__sub_I_can>:
				break;
			}
		}

	}
}
     6e8:	b510      	push	{r4, lr}
CAN_Asyn_Class	can(&CAN_CCU);
     6ea:	4c05      	ldr	r4, [pc, #20]	; (700 <_GLOBAL__sub_I_can+0x18>)
     6ec:	4905      	ldr	r1, [pc, #20]	; (704 <_GLOBAL__sub_I_can+0x1c>)
     6ee:	4620      	mov	r0, r4
     6f0:	4b05      	ldr	r3, [pc, #20]	; (708 <_GLOBAL__sub_I_can+0x20>)
     6f2:	4798      	blx	r3
     6f4:	4a05      	ldr	r2, [pc, #20]	; (70c <_GLOBAL__sub_I_can+0x24>)
     6f6:	4906      	ldr	r1, [pc, #24]	; (710 <_GLOBAL__sub_I_can+0x28>)
     6f8:	4620      	mov	r0, r4
     6fa:	4b06      	ldr	r3, [pc, #24]	; (714 <_GLOBAL__sub_I_can+0x2c>)
     6fc:	4798      	blx	r3
     6fe:	bd10      	pop	{r4, pc}
     700:	20000564 	.word	0x20000564
     704:	20000d5c 	.word	0x20000d5c
     708:	00000349 	.word	0x00000349
     70c:	20000000 	.word	0x20000000
     710:	00000355 	.word	0x00000355
     714:	0000dc49 	.word	0x0000dc49

00000718 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     718:	b580      	push	{r7, lr}
     71a:	af00      	add	r7, sp, #0
	system_init();
     71c:	4b03      	ldr	r3, [pc, #12]	; (72c <atmel_start_init+0x14>)
     71e:	4798      	blx	r3
	usb_init();
     720:	4b03      	ldr	r3, [pc, #12]	; (730 <atmel_start_init+0x18>)
     722:	4798      	blx	r3
	spi_nor_flash_init();
     724:	4b03      	ldr	r3, [pc, #12]	; (734 <atmel_start_init+0x1c>)
     726:	4798      	blx	r3
}
     728:	bf00      	nop
     72a:	bd80      	pop	{r7, pc}
     72c:	00001815 	.word	0x00001815
     730:	0000b1bd 	.word	0x0000b1bd
     734:	0000b151 	.word	0x0000b151

00000738 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     738:	b480      	push	{r7}
     73a:	b085      	sub	sp, #20
     73c:	af00      	add	r7, sp, #0
     73e:	60f8      	str	r0, [r7, #12]
     740:	460b      	mov	r3, r1
     742:	607a      	str	r2, [r7, #4]
     744:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     746:	7afa      	ldrb	r2, [r7, #11]
     748:	68fb      	ldr	r3, [r7, #12]
     74a:	3220      	adds	r2, #32
     74c:	6879      	ldr	r1, [r7, #4]
     74e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     752:	bf00      	nop
     754:	3714      	adds	r7, #20
     756:	46bd      	mov	sp, r7
     758:	f85d 7b04 	ldr.w	r7, [sp], #4
     75c:	4770      	bx	lr

0000075e <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
     75e:	b480      	push	{r7}
     760:	b083      	sub	sp, #12
     762:	af00      	add	r7, sp, #0
     764:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     766:	687b      	ldr	r3, [r7, #4]
     768:	691b      	ldr	r3, [r3, #16]
     76a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     76e:	687b      	ldr	r3, [r7, #4]
     770:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     772:	bf00      	nop
     774:	370c      	adds	r7, #12
     776:	46bd      	mov	sp, r7
     778:	f85d 7b04 	ldr.w	r7, [sp], #4
     77c:	4770      	bx	lr

0000077e <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
     77e:	b480      	push	{r7}
     780:	b083      	sub	sp, #12
     782:	af00      	add	r7, sp, #0
     784:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     786:	687b      	ldr	r3, [r7, #4]
     788:	691b      	ldr	r3, [r3, #16]
     78a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     78e:	687b      	ldr	r3, [r7, #4]
     790:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     792:	bf00      	nop
     794:	370c      	adds	r7, #12
     796:	46bd      	mov	sp, r7
     798:	f85d 7b04 	ldr.w	r7, [sp], #4
     79c:	4770      	bx	lr

0000079e <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
     79e:	b480      	push	{r7}
     7a0:	b083      	sub	sp, #12
     7a2:	af00      	add	r7, sp, #0
     7a4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
     7a6:	687b      	ldr	r3, [r7, #4]
     7a8:	691b      	ldr	r3, [r3, #16]
     7aa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
     7ae:	687b      	ldr	r3, [r7, #4]
     7b0:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     7b2:	bf00      	nop
     7b4:	370c      	adds	r7, #12
     7b6:	46bd      	mov	sp, r7
     7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
     7bc:	4770      	bx	lr

000007be <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
     7be:	b480      	push	{r7}
     7c0:	b083      	sub	sp, #12
     7c2:	af00      	add	r7, sp, #0
     7c4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     7c6:	687b      	ldr	r3, [r7, #4]
     7c8:	691b      	ldr	r3, [r3, #16]
     7ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
     7ce:	687b      	ldr	r3, [r7, #4]
     7d0:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     7d2:	bf00      	nop
     7d4:	370c      	adds	r7, #12
     7d6:	46bd      	mov	sp, r7
     7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
     7dc:	4770      	bx	lr

000007de <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
     7de:	b480      	push	{r7}
     7e0:	b083      	sub	sp, #12
     7e2:	af00      	add	r7, sp, #0
     7e4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     7e6:	687b      	ldr	r3, [r7, #4]
     7e8:	695b      	ldr	r3, [r3, #20]
     7ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
     7ee:	687b      	ldr	r3, [r7, #4]
     7f0:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     7f2:	bf00      	nop
     7f4:	370c      	adds	r7, #12
     7f6:	46bd      	mov	sp, r7
     7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
     7fc:	4770      	bx	lr

000007fe <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
     7fe:	b480      	push	{r7}
     800:	b083      	sub	sp, #12
     802:	af00      	add	r7, sp, #0
     804:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     806:	687b      	ldr	r3, [r7, #4]
     808:	695b      	ldr	r3, [r3, #20]
     80a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
     80e:	687b      	ldr	r3, [r7, #4]
     810:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     812:	bf00      	nop
     814:	370c      	adds	r7, #12
     816:	46bd      	mov	sp, r7
     818:	f85d 7b04 	ldr.w	r7, [sp], #4
     81c:	4770      	bx	lr

0000081e <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
     81e:	b480      	push	{r7}
     820:	b083      	sub	sp, #12
     822:	af00      	add	r7, sp, #0
     824:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     826:	687b      	ldr	r3, [r7, #4]
     828:	695b      	ldr	r3, [r3, #20]
     82a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     82e:	687b      	ldr	r3, [r7, #4]
     830:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     832:	bf00      	nop
     834:	370c      	adds	r7, #12
     836:	46bd      	mov	sp, r7
     838:	f85d 7b04 	ldr.w	r7, [sp], #4
     83c:	4770      	bx	lr

0000083e <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
     83e:	b480      	push	{r7}
     840:	b083      	sub	sp, #12
     842:	af00      	add	r7, sp, #0
     844:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     846:	687b      	ldr	r3, [r7, #4]
     848:	695b      	ldr	r3, [r3, #20]
     84a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     84e:	687b      	ldr	r3, [r7, #4]
     850:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     852:	bf00      	nop
     854:	370c      	adds	r7, #12
     856:	46bd      	mov	sp, r7
     858:	f85d 7b04 	ldr.w	r7, [sp], #4
     85c:	4770      	bx	lr

0000085e <hri_mclk_set_APBAMASK_TC1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_TC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC1_bit(const void *const hw)
{
     85e:	b480      	push	{r7}
     860:	b083      	sub	sp, #12
     862:	af00      	add	r7, sp, #0
     864:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
     866:	687b      	ldr	r3, [r7, #4]
     868:	695b      	ldr	r3, [r3, #20]
     86a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
     86e:	687b      	ldr	r3, [r7, #4]
     870:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     872:	bf00      	nop
     874:	370c      	adds	r7, #12
     876:	46bd      	mov	sp, r7
     878:	f85d 7b04 	ldr.w	r7, [sp], #4
     87c:	4770      	bx	lr

0000087e <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
     87e:	b480      	push	{r7}
     880:	b083      	sub	sp, #12
     882:	af00      	add	r7, sp, #0
     884:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     886:	687b      	ldr	r3, [r7, #4]
     888:	699b      	ldr	r3, [r3, #24]
     88a:	f043 0201 	orr.w	r2, r3, #1
     88e:	687b      	ldr	r3, [r7, #4]
     890:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     892:	bf00      	nop
     894:	370c      	adds	r7, #12
     896:	46bd      	mov	sp, r7
     898:	f85d 7b04 	ldr.w	r7, [sp], #4
     89c:	4770      	bx	lr

0000089e <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
     89e:	b480      	push	{r7}
     8a0:	b083      	sub	sp, #12
     8a2:	af00      	add	r7, sp, #0
     8a4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     8a6:	687b      	ldr	r3, [r7, #4]
     8a8:	699b      	ldr	r3, [r3, #24]
     8aa:	f043 0202 	orr.w	r2, r3, #2
     8ae:	687b      	ldr	r3, [r7, #4]
     8b0:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     8b2:	bf00      	nop
     8b4:	370c      	adds	r7, #12
     8b6:	46bd      	mov	sp, r7
     8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
     8bc:	4770      	bx	lr

000008be <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
     8be:	b480      	push	{r7}
     8c0:	b083      	sub	sp, #12
     8c2:	af00      	add	r7, sp, #0
     8c4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     8c6:	687b      	ldr	r3, [r7, #4]
     8c8:	699b      	ldr	r3, [r3, #24]
     8ca:	f043 0280 	orr.w	r2, r3, #128	; 0x80
     8ce:	687b      	ldr	r3, [r7, #4]
     8d0:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     8d2:	bf00      	nop
     8d4:	370c      	adds	r7, #12
     8d6:	46bd      	mov	sp, r7
     8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
     8dc:	4770      	bx	lr

000008de <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
     8de:	b480      	push	{r7}
     8e0:	b083      	sub	sp, #12
     8e2:	af00      	add	r7, sp, #0
     8e4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     8e6:	687b      	ldr	r3, [r7, #4]
     8e8:	699b      	ldr	r3, [r3, #24]
     8ea:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     8ee:	687b      	ldr	r3, [r7, #4]
     8f0:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     8f2:	bf00      	nop
     8f4:	370c      	adds	r7, #12
     8f6:	46bd      	mov	sp, r7
     8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
     8fc:	4770      	bx	lr

000008fe <hri_mclk_set_APBBMASK_TC3_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TC2;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC3_bit(const void *const hw)
{
     8fe:	b480      	push	{r7}
     900:	b083      	sub	sp, #12
     902:	af00      	add	r7, sp, #0
     904:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
     906:	687b      	ldr	r3, [r7, #4]
     908:	699b      	ldr	r3, [r3, #24]
     90a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     90e:	687b      	ldr	r3, [r7, #4]
     910:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     912:	bf00      	nop
     914:	370c      	adds	r7, #12
     916:	46bd      	mov	sp, r7
     918:	f85d 7b04 	ldr.w	r7, [sp], #4
     91c:	4770      	bx	lr

0000091e <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
     91e:	b480      	push	{r7}
     920:	b083      	sub	sp, #12
     922:	af00      	add	r7, sp, #0
     924:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     926:	687b      	ldr	r3, [r7, #4]
     928:	69db      	ldr	r3, [r3, #28]
     92a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     92e:	687b      	ldr	r3, [r7, #4]
     930:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     932:	bf00      	nop
     934:	370c      	adds	r7, #12
     936:	46bd      	mov	sp, r7
     938:	f85d 7b04 	ldr.w	r7, [sp], #4
     93c:	4770      	bx	lr

0000093e <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
     93e:	b480      	push	{r7}
     940:	b083      	sub	sp, #12
     942:	af00      	add	r7, sp, #0
     944:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     946:	687b      	ldr	r3, [r7, #4]
     948:	6a1b      	ldr	r3, [r3, #32]
     94a:	f043 0201 	orr.w	r2, r3, #1
     94e:	687b      	ldr	r3, [r7, #4]
     950:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     952:	bf00      	nop
     954:	370c      	adds	r7, #12
     956:	46bd      	mov	sp, r7
     958:	f85d 7b04 	ldr.w	r7, [sp], #4
     95c:	4770      	bx	lr

0000095e <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
     95e:	b480      	push	{r7}
     960:	b083      	sub	sp, #12
     962:	af00      	add	r7, sp, #0
     964:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     966:	687b      	ldr	r3, [r7, #4]
     968:	6a1b      	ldr	r3, [r3, #32]
     96a:	f043 0202 	orr.w	r2, r3, #2
     96e:	687b      	ldr	r3, [r7, #4]
     970:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     972:	bf00      	nop
     974:	370c      	adds	r7, #12
     976:	46bd      	mov	sp, r7
     978:	f85d 7b04 	ldr.w	r7, [sp], #4
     97c:	4770      	bx	lr

0000097e <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
     97e:	b480      	push	{r7}
     980:	b083      	sub	sp, #12
     982:	af00      	add	r7, sp, #0
     984:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     986:	687b      	ldr	r3, [r7, #4]
     988:	6a1b      	ldr	r3, [r3, #32]
     98a:	f043 0204 	orr.w	r2, r3, #4
     98e:	687b      	ldr	r3, [r7, #4]
     990:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     992:	bf00      	nop
     994:	370c      	adds	r7, #12
     996:	46bd      	mov	sp, r7
     998:	f85d 7b04 	ldr.w	r7, [sp], #4
     99c:	4770      	bx	lr

0000099e <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
     99e:	b480      	push	{r7}
     9a0:	b083      	sub	sp, #12
     9a2:	af00      	add	r7, sp, #0
     9a4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     9a6:	687b      	ldr	r3, [r7, #4]
     9a8:	6a1b      	ldr	r3, [r3, #32]
     9aa:	f043 0208 	orr.w	r2, r3, #8
     9ae:	687b      	ldr	r3, [r7, #4]
     9b0:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     9b2:	bf00      	nop
     9b4:	370c      	adds	r7, #12
     9b6:	46bd      	mov	sp, r7
     9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
     9bc:	4770      	bx	lr

000009be <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
     9be:	b480      	push	{r7}
     9c0:	b083      	sub	sp, #12
     9c2:	af00      	add	r7, sp, #0
     9c4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
     9c6:	687b      	ldr	r3, [r7, #4]
     9c8:	6a1b      	ldr	r3, [r3, #32]
     9ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     9ce:	687b      	ldr	r3, [r7, #4]
     9d0:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     9d2:	bf00      	nop
     9d4:	370c      	adds	r7, #12
     9d6:	46bd      	mov	sp, r7
     9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
     9dc:	4770      	bx	lr

000009de <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     9de:	b480      	push	{r7}
     9e0:	b085      	sub	sp, #20
     9e2:	af00      	add	r7, sp, #0
     9e4:	60f8      	str	r0, [r7, #12]
     9e6:	460b      	mov	r3, r1
     9e8:	607a      	str	r2, [r7, #4]
     9ea:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     9ec:	7afb      	ldrb	r3, [r7, #11]
     9ee:	68fa      	ldr	r2, [r7, #12]
     9f0:	01db      	lsls	r3, r3, #7
     9f2:	4413      	add	r3, r2
     9f4:	3308      	adds	r3, #8
     9f6:	687a      	ldr	r2, [r7, #4]
     9f8:	601a      	str	r2, [r3, #0]
}
     9fa:	bf00      	nop
     9fc:	3714      	adds	r7, #20
     9fe:	46bd      	mov	sp, r7
     a00:	f85d 7b04 	ldr.w	r7, [sp], #4
     a04:	4770      	bx	lr

00000a06 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     a06:	b480      	push	{r7}
     a08:	b085      	sub	sp, #20
     a0a:	af00      	add	r7, sp, #0
     a0c:	60f8      	str	r0, [r7, #12]
     a0e:	460b      	mov	r3, r1
     a10:	607a      	str	r2, [r7, #4]
     a12:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     a14:	7afb      	ldrb	r3, [r7, #11]
     a16:	68fa      	ldr	r2, [r7, #12]
     a18:	01db      	lsls	r3, r3, #7
     a1a:	4413      	add	r3, r2
     a1c:	3304      	adds	r3, #4
     a1e:	687a      	ldr	r2, [r7, #4]
     a20:	601a      	str	r2, [r3, #0]
}
     a22:	bf00      	nop
     a24:	3714      	adds	r7, #20
     a26:	46bd      	mov	sp, r7
     a28:	f85d 7b04 	ldr.w	r7, [sp], #4
     a2c:	4770      	bx	lr

00000a2e <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     a2e:	b480      	push	{r7}
     a30:	b085      	sub	sp, #20
     a32:	af00      	add	r7, sp, #0
     a34:	60f8      	str	r0, [r7, #12]
     a36:	460b      	mov	r3, r1
     a38:	607a      	str	r2, [r7, #4]
     a3a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     a3c:	7afb      	ldrb	r3, [r7, #11]
     a3e:	68fa      	ldr	r2, [r7, #12]
     a40:	01db      	lsls	r3, r3, #7
     a42:	4413      	add	r3, r2
     a44:	3318      	adds	r3, #24
     a46:	687a      	ldr	r2, [r7, #4]
     a48:	601a      	str	r2, [r3, #0]
}
     a4a:	bf00      	nop
     a4c:	3714      	adds	r7, #20
     a4e:	46bd      	mov	sp, r7
     a50:	f85d 7b04 	ldr.w	r7, [sp], #4
     a54:	4770      	bx	lr

00000a56 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     a56:	b480      	push	{r7}
     a58:	b085      	sub	sp, #20
     a5a:	af00      	add	r7, sp, #0
     a5c:	60f8      	str	r0, [r7, #12]
     a5e:	460b      	mov	r3, r1
     a60:	607a      	str	r2, [r7, #4]
     a62:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a64:	7afb      	ldrb	r3, [r7, #11]
     a66:	68fa      	ldr	r2, [r7, #12]
     a68:	01db      	lsls	r3, r3, #7
     a6a:	4413      	add	r3, r2
     a6c:	3314      	adds	r3, #20
     a6e:	687a      	ldr	r2, [r7, #4]
     a70:	601a      	str	r2, [r3, #0]
}
     a72:	bf00      	nop
     a74:	3714      	adds	r7, #20
     a76:	46bd      	mov	sp, r7
     a78:	f85d 7b04 	ldr.w	r7, [sp], #4
     a7c:	4770      	bx	lr

00000a7e <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     a7e:	b480      	push	{r7}
     a80:	b085      	sub	sp, #20
     a82:	af00      	add	r7, sp, #0
     a84:	6078      	str	r0, [r7, #4]
     a86:	4608      	mov	r0, r1
     a88:	4611      	mov	r1, r2
     a8a:	461a      	mov	r2, r3
     a8c:	4603      	mov	r3, r0
     a8e:	70fb      	strb	r3, [r7, #3]
     a90:	460b      	mov	r3, r1
     a92:	70bb      	strb	r3, [r7, #2]
     a94:	4613      	mov	r3, r2
     a96:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a98:	78fa      	ldrb	r2, [r7, #3]
     a9a:	78bb      	ldrb	r3, [r7, #2]
     a9c:	6879      	ldr	r1, [r7, #4]
     a9e:	01d2      	lsls	r2, r2, #7
     aa0:	440a      	add	r2, r1
     aa2:	4413      	add	r3, r2
     aa4:	3330      	adds	r3, #48	; 0x30
     aa6:	781b      	ldrb	r3, [r3, #0]
     aa8:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     aaa:	7bfb      	ldrb	r3, [r7, #15]
     aac:	f023 030f 	bic.w	r3, r3, #15
     ab0:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
     ab2:	787b      	ldrb	r3, [r7, #1]
     ab4:	f003 030f 	and.w	r3, r3, #15
     ab8:	b2da      	uxtb	r2, r3
     aba:	7bfb      	ldrb	r3, [r7, #15]
     abc:	4313      	orrs	r3, r2
     abe:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ac0:	78fa      	ldrb	r2, [r7, #3]
     ac2:	78bb      	ldrb	r3, [r7, #2]
     ac4:	6879      	ldr	r1, [r7, #4]
     ac6:	01d2      	lsls	r2, r2, #7
     ac8:	440a      	add	r2, r1
     aca:	4413      	add	r3, r2
     acc:	3330      	adds	r3, #48	; 0x30
     ace:	7bfa      	ldrb	r2, [r7, #15]
     ad0:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     ad2:	bf00      	nop
     ad4:	3714      	adds	r7, #20
     ad6:	46bd      	mov	sp, r7
     ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
     adc:	4770      	bx	lr

00000ade <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     ade:	b480      	push	{r7}
     ae0:	b085      	sub	sp, #20
     ae2:	af00      	add	r7, sp, #0
     ae4:	6078      	str	r0, [r7, #4]
     ae6:	4608      	mov	r0, r1
     ae8:	4611      	mov	r1, r2
     aea:	461a      	mov	r2, r3
     aec:	4603      	mov	r3, r0
     aee:	70fb      	strb	r3, [r7, #3]
     af0:	460b      	mov	r3, r1
     af2:	70bb      	strb	r3, [r7, #2]
     af4:	4613      	mov	r3, r2
     af6:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     af8:	78fa      	ldrb	r2, [r7, #3]
     afa:	78bb      	ldrb	r3, [r7, #2]
     afc:	6879      	ldr	r1, [r7, #4]
     afe:	01d2      	lsls	r2, r2, #7
     b00:	440a      	add	r2, r1
     b02:	4413      	add	r3, r2
     b04:	3330      	adds	r3, #48	; 0x30
     b06:	781b      	ldrb	r3, [r3, #0]
     b08:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     b0a:	7bfb      	ldrb	r3, [r7, #15]
     b0c:	f003 030f 	and.w	r3, r3, #15
     b10:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
     b12:	787b      	ldrb	r3, [r7, #1]
     b14:	011b      	lsls	r3, r3, #4
     b16:	b2da      	uxtb	r2, r3
     b18:	7bfb      	ldrb	r3, [r7, #15]
     b1a:	4313      	orrs	r3, r2
     b1c:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b1e:	78fa      	ldrb	r2, [r7, #3]
     b20:	78bb      	ldrb	r3, [r7, #2]
     b22:	6879      	ldr	r1, [r7, #4]
     b24:	01d2      	lsls	r2, r2, #7
     b26:	440a      	add	r2, r1
     b28:	4413      	add	r3, r2
     b2a:	3330      	adds	r3, #48	; 0x30
     b2c:	7bfa      	ldrb	r2, [r7, #15]
     b2e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     b30:	bf00      	nop
     b32:	3714      	adds	r7, #20
     b34:	46bd      	mov	sp, r7
     b36:	f85d 7b04 	ldr.w	r7, [sp], #4
     b3a:	4770      	bx	lr

00000b3c <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     b3c:	b480      	push	{r7}
     b3e:	b085      	sub	sp, #20
     b40:	af00      	add	r7, sp, #0
     b42:	6078      	str	r0, [r7, #4]
     b44:	4608      	mov	r0, r1
     b46:	4611      	mov	r1, r2
     b48:	461a      	mov	r2, r3
     b4a:	4603      	mov	r3, r0
     b4c:	70fb      	strb	r3, [r7, #3]
     b4e:	460b      	mov	r3, r1
     b50:	70bb      	strb	r3, [r7, #2]
     b52:	4613      	mov	r3, r2
     b54:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b56:	78fa      	ldrb	r2, [r7, #3]
     b58:	78bb      	ldrb	r3, [r7, #2]
     b5a:	6879      	ldr	r1, [r7, #4]
     b5c:	01d2      	lsls	r2, r2, #7
     b5e:	440a      	add	r2, r1
     b60:	4413      	add	r3, r2
     b62:	3340      	adds	r3, #64	; 0x40
     b64:	781b      	ldrb	r3, [r3, #0]
     b66:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
     b68:	7bfb      	ldrb	r3, [r7, #15]
     b6a:	f023 0301 	bic.w	r3, r3, #1
     b6e:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b70:	787a      	ldrb	r2, [r7, #1]
     b72:	7bfb      	ldrb	r3, [r7, #15]
     b74:	4313      	orrs	r3, r2
     b76:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b78:	78fa      	ldrb	r2, [r7, #3]
     b7a:	78bb      	ldrb	r3, [r7, #2]
     b7c:	6879      	ldr	r1, [r7, #4]
     b7e:	01d2      	lsls	r2, r2, #7
     b80:	440a      	add	r2, r1
     b82:	4413      	add	r3, r2
     b84:	3340      	adds	r3, #64	; 0x40
     b86:	7bfa      	ldrb	r2, [r7, #15]
     b88:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     b8a:	bf00      	nop
     b8c:	3714      	adds	r7, #20
     b8e:	46bd      	mov	sp, r7
     b90:	f85d 7b04 	ldr.w	r7, [sp], #4
     b94:	4770      	bx	lr

00000b96 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     b96:	b490      	push	{r4, r7}
     b98:	b082      	sub	sp, #8
     b9a:	af00      	add	r7, sp, #0
     b9c:	6078      	str	r0, [r7, #4]
     b9e:	460b      	mov	r3, r1
     ba0:	70fb      	strb	r3, [r7, #3]
     ba2:	4613      	mov	r3, r2
     ba4:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     ba6:	78fa      	ldrb	r2, [r7, #3]
     ba8:	78bb      	ldrb	r3, [r7, #2]
     baa:	78f8      	ldrb	r0, [r7, #3]
     bac:	78b9      	ldrb	r1, [r7, #2]
     bae:	687c      	ldr	r4, [r7, #4]
     bb0:	01c0      	lsls	r0, r0, #7
     bb2:	4420      	add	r0, r4
     bb4:	4401      	add	r1, r0
     bb6:	3140      	adds	r1, #64	; 0x40
     bb8:	7809      	ldrb	r1, [r1, #0]
     bba:	b2c9      	uxtb	r1, r1
     bbc:	f041 0104 	orr.w	r1, r1, #4
     bc0:	b2c8      	uxtb	r0, r1
     bc2:	6879      	ldr	r1, [r7, #4]
     bc4:	01d2      	lsls	r2, r2, #7
     bc6:	440a      	add	r2, r1
     bc8:	4413      	add	r3, r2
     bca:	3340      	adds	r3, #64	; 0x40
     bcc:	4602      	mov	r2, r0
     bce:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     bd0:	bf00      	nop
     bd2:	3708      	adds	r7, #8
     bd4:	46bd      	mov	sp, r7
     bd6:	bc90      	pop	{r4, r7}
     bd8:	4770      	bx	lr

00000bda <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     bda:	b490      	push	{r4, r7}
     bdc:	b082      	sub	sp, #8
     bde:	af00      	add	r7, sp, #0
     be0:	6078      	str	r0, [r7, #4]
     be2:	460b      	mov	r3, r1
     be4:	70fb      	strb	r3, [r7, #3]
     be6:	4613      	mov	r3, r2
     be8:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     bea:	78fa      	ldrb	r2, [r7, #3]
     bec:	78bb      	ldrb	r3, [r7, #2]
     bee:	78f8      	ldrb	r0, [r7, #3]
     bf0:	78b9      	ldrb	r1, [r7, #2]
     bf2:	687c      	ldr	r4, [r7, #4]
     bf4:	01c0      	lsls	r0, r0, #7
     bf6:	4420      	add	r0, r4
     bf8:	4401      	add	r1, r0
     bfa:	3140      	adds	r1, #64	; 0x40
     bfc:	7809      	ldrb	r1, [r1, #0]
     bfe:	b2c9      	uxtb	r1, r1
     c00:	f021 0104 	bic.w	r1, r1, #4
     c04:	b2c8      	uxtb	r0, r1
     c06:	6879      	ldr	r1, [r7, #4]
     c08:	01d2      	lsls	r2, r2, #7
     c0a:	440a      	add	r2, r1
     c0c:	4413      	add	r3, r2
     c0e:	3340      	adds	r3, #64	; 0x40
     c10:	4602      	mov	r2, r0
     c12:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     c14:	bf00      	nop
     c16:	3708      	adds	r7, #8
     c18:	46bd      	mov	sp, r7
     c1a:	bc90      	pop	{r4, r7}
     c1c:	4770      	bx	lr

00000c1e <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
     c1e:	b480      	push	{r7}
     c20:	b085      	sub	sp, #20
     c22:	af00      	add	r7, sp, #0
     c24:	60f8      	str	r0, [r7, #12]
     c26:	460b      	mov	r3, r1
     c28:	607a      	str	r2, [r7, #4]
     c2a:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c2c:	7afb      	ldrb	r3, [r7, #11]
     c2e:	68fa      	ldr	r2, [r7, #12]
     c30:	01db      	lsls	r3, r3, #7
     c32:	4413      	add	r3, r2
     c34:	3328      	adds	r3, #40	; 0x28
     c36:	687a      	ldr	r2, [r7, #4]
     c38:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     c3a:	bf00      	nop
     c3c:	3714      	adds	r7, #20
     c3e:	46bd      	mov	sp, r7
     c40:	f85d 7b04 	ldr.w	r7, [sp], #4
     c44:	4770      	bx	lr
	...

00000c48 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
     c48:	b580      	push	{r7, lr}
     c4a:	b082      	sub	sp, #8
     c4c:	af00      	add	r7, sp, #0
     c4e:	4603      	mov	r3, r0
     c50:	6039      	str	r1, [r7, #0]
     c52:	71fb      	strb	r3, [r7, #7]
     c54:	4613      	mov	r3, r2
     c56:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
     c58:	79bb      	ldrb	r3, [r7, #6]
     c5a:	2b01      	cmp	r3, #1
     c5c:	d01c      	beq.n	c98 <_gpio_set_direction+0x50>
     c5e:	2b02      	cmp	r3, #2
     c60:	d037      	beq.n	cd2 <_gpio_set_direction+0x8a>
     c62:	2b00      	cmp	r3, #0
     c64:	d14e      	bne.n	d04 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
     c66:	79fb      	ldrb	r3, [r7, #7]
     c68:	683a      	ldr	r2, [r7, #0]
     c6a:	4619      	mov	r1, r3
     c6c:	482a      	ldr	r0, [pc, #168]	; (d18 <_gpio_set_direction+0xd0>)
     c6e:	4b2b      	ldr	r3, [pc, #172]	; (d1c <_gpio_set_direction+0xd4>)
     c70:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     c72:	683b      	ldr	r3, [r7, #0]
     c74:	b29b      	uxth	r3, r3
     c76:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     c7a:	79fb      	ldrb	r3, [r7, #7]
     c7c:	4619      	mov	r1, r3
     c7e:	4826      	ldr	r0, [pc, #152]	; (d18 <_gpio_set_direction+0xd0>)
     c80:	4b27      	ldr	r3, [pc, #156]	; (d20 <_gpio_set_direction+0xd8>)
     c82:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     c84:	683b      	ldr	r3, [r7, #0]
     c86:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     c88:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     c8c:	79fb      	ldrb	r3, [r7, #7]
     c8e:	4619      	mov	r1, r3
     c90:	4821      	ldr	r0, [pc, #132]	; (d18 <_gpio_set_direction+0xd0>)
     c92:	4b23      	ldr	r3, [pc, #140]	; (d20 <_gpio_set_direction+0xd8>)
     c94:	4798      	blx	r3
		break;
     c96:	e03a      	b.n	d0e <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
     c98:	79fb      	ldrb	r3, [r7, #7]
     c9a:	683a      	ldr	r2, [r7, #0]
     c9c:	4619      	mov	r1, r3
     c9e:	481e      	ldr	r0, [pc, #120]	; (d18 <_gpio_set_direction+0xd0>)
     ca0:	4b1e      	ldr	r3, [pc, #120]	; (d1c <_gpio_set_direction+0xd4>)
     ca2:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     ca4:	683b      	ldr	r3, [r7, #0]
     ca6:	b29b      	uxth	r3, r3
     ca8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
     cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     cb0:	79f9      	ldrb	r1, [r7, #7]
     cb2:	461a      	mov	r2, r3
     cb4:	4818      	ldr	r0, [pc, #96]	; (d18 <_gpio_set_direction+0xd0>)
     cb6:	4b1a      	ldr	r3, [pc, #104]	; (d20 <_gpio_set_direction+0xd8>)
     cb8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
     cba:	683b      	ldr	r3, [r7, #0]
     cbc:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
     cbe:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
     cc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     cc6:	79f9      	ldrb	r1, [r7, #7]
     cc8:	461a      	mov	r2, r3
     cca:	4813      	ldr	r0, [pc, #76]	; (d18 <_gpio_set_direction+0xd0>)
     ccc:	4b14      	ldr	r3, [pc, #80]	; (d20 <_gpio_set_direction+0xd8>)
     cce:	4798      	blx	r3
		break;
     cd0:	e01d      	b.n	d0e <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
     cd2:	79fb      	ldrb	r3, [r7, #7]
     cd4:	683a      	ldr	r2, [r7, #0]
     cd6:	4619      	mov	r1, r3
     cd8:	480f      	ldr	r0, [pc, #60]	; (d18 <_gpio_set_direction+0xd0>)
     cda:	4b12      	ldr	r3, [pc, #72]	; (d24 <_gpio_set_direction+0xdc>)
     cdc:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     cde:	683b      	ldr	r3, [r7, #0]
     ce0:	b29b      	uxth	r3, r3
     ce2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     ce6:	79fb      	ldrb	r3, [r7, #7]
     ce8:	4619      	mov	r1, r3
     cea:	480b      	ldr	r0, [pc, #44]	; (d18 <_gpio_set_direction+0xd0>)
     cec:	4b0c      	ldr	r3, [pc, #48]	; (d20 <_gpio_set_direction+0xd8>)
     cee:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     cf0:	683b      	ldr	r3, [r7, #0]
     cf2:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     cf4:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     cf8:	79fb      	ldrb	r3, [r7, #7]
     cfa:	4619      	mov	r1, r3
     cfc:	4806      	ldr	r0, [pc, #24]	; (d18 <_gpio_set_direction+0xd0>)
     cfe:	4b08      	ldr	r3, [pc, #32]	; (d20 <_gpio_set_direction+0xd8>)
     d00:	4798      	blx	r3
		break;
     d02:	e004      	b.n	d0e <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
     d04:	2246      	movs	r2, #70	; 0x46
     d06:	4908      	ldr	r1, [pc, #32]	; (d28 <_gpio_set_direction+0xe0>)
     d08:	2000      	movs	r0, #0
     d0a:	4b08      	ldr	r3, [pc, #32]	; (d2c <_gpio_set_direction+0xe4>)
     d0c:	4798      	blx	r3
	}
}
     d0e:	bf00      	nop
     d10:	3708      	adds	r7, #8
     d12:	46bd      	mov	sp, r7
     d14:	bd80      	pop	{r7, pc}
     d16:	bf00      	nop
     d18:	41008000 	.word	0x41008000
     d1c:	00000a07 	.word	0x00000a07
     d20:	00000c1f 	.word	0x00000c1f
     d24:	000009df 	.word	0x000009df
     d28:	0000e2ac 	.word	0x0000e2ac
     d2c:	000034fd 	.word	0x000034fd

00000d30 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     d30:	b580      	push	{r7, lr}
     d32:	b082      	sub	sp, #8
     d34:	af00      	add	r7, sp, #0
     d36:	4603      	mov	r3, r0
     d38:	6039      	str	r1, [r7, #0]
     d3a:	71fb      	strb	r3, [r7, #7]
     d3c:	4613      	mov	r3, r2
     d3e:	71bb      	strb	r3, [r7, #6]
	if (level) {
     d40:	79bb      	ldrb	r3, [r7, #6]
     d42:	2b00      	cmp	r3, #0
     d44:	d006      	beq.n	d54 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
     d46:	79fb      	ldrb	r3, [r7, #7]
     d48:	683a      	ldr	r2, [r7, #0]
     d4a:	4619      	mov	r1, r3
     d4c:	4806      	ldr	r0, [pc, #24]	; (d68 <_gpio_set_level+0x38>)
     d4e:	4b07      	ldr	r3, [pc, #28]	; (d6c <_gpio_set_level+0x3c>)
     d50:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
     d52:	e005      	b.n	d60 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
     d54:	79fb      	ldrb	r3, [r7, #7]
     d56:	683a      	ldr	r2, [r7, #0]
     d58:	4619      	mov	r1, r3
     d5a:	4803      	ldr	r0, [pc, #12]	; (d68 <_gpio_set_level+0x38>)
     d5c:	4b04      	ldr	r3, [pc, #16]	; (d70 <_gpio_set_level+0x40>)
     d5e:	4798      	blx	r3
}
     d60:	bf00      	nop
     d62:	3708      	adds	r7, #8
     d64:	46bd      	mov	sp, r7
     d66:	bd80      	pop	{r7, pc}
     d68:	41008000 	.word	0x41008000
     d6c:	00000a2f 	.word	0x00000a2f
     d70:	00000a57 	.word	0x00000a57

00000d74 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
     d74:	b580      	push	{r7, lr}
     d76:	b082      	sub	sp, #8
     d78:	af00      	add	r7, sp, #0
     d7a:	4603      	mov	r3, r0
     d7c:	71fb      	strb	r3, [r7, #7]
     d7e:	460b      	mov	r3, r1
     d80:	71bb      	strb	r3, [r7, #6]
     d82:	4613      	mov	r3, r2
     d84:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
     d86:	797b      	ldrb	r3, [r7, #5]
     d88:	2b01      	cmp	r3, #1
     d8a:	d00a      	beq.n	da2 <_gpio_set_pin_pull_mode+0x2e>
     d8c:	2b02      	cmp	r3, #2
     d8e:	d01f      	beq.n	dd0 <_gpio_set_pin_pull_mode+0x5c>
     d90:	2b00      	cmp	r3, #0
     d92:	d134      	bne.n	dfe <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
     d94:	79ba      	ldrb	r2, [r7, #6]
     d96:	79fb      	ldrb	r3, [r7, #7]
     d98:	4619      	mov	r1, r3
     d9a:	481e      	ldr	r0, [pc, #120]	; (e14 <_gpio_set_pin_pull_mode+0xa0>)
     d9c:	4b1e      	ldr	r3, [pc, #120]	; (e18 <_gpio_set_pin_pull_mode+0xa4>)
     d9e:	4798      	blx	r3
		break;
     da0:	e033      	b.n	e0a <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     da2:	79bb      	ldrb	r3, [r7, #6]
     da4:	2201      	movs	r2, #1
     da6:	409a      	lsls	r2, r3
     da8:	79fb      	ldrb	r3, [r7, #7]
     daa:	4619      	mov	r1, r3
     dac:	4819      	ldr	r0, [pc, #100]	; (e14 <_gpio_set_pin_pull_mode+0xa0>)
     dae:	4b1b      	ldr	r3, [pc, #108]	; (e1c <_gpio_set_pin_pull_mode+0xa8>)
     db0:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     db2:	79ba      	ldrb	r2, [r7, #6]
     db4:	79fb      	ldrb	r3, [r7, #7]
     db6:	4619      	mov	r1, r3
     db8:	4816      	ldr	r0, [pc, #88]	; (e14 <_gpio_set_pin_pull_mode+0xa0>)
     dba:	4b19      	ldr	r3, [pc, #100]	; (e20 <_gpio_set_pin_pull_mode+0xac>)
     dbc:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
     dbe:	79bb      	ldrb	r3, [r7, #6]
     dc0:	2201      	movs	r2, #1
     dc2:	409a      	lsls	r2, r3
     dc4:	79fb      	ldrb	r3, [r7, #7]
     dc6:	4619      	mov	r1, r3
     dc8:	4812      	ldr	r0, [pc, #72]	; (e14 <_gpio_set_pin_pull_mode+0xa0>)
     dca:	4b16      	ldr	r3, [pc, #88]	; (e24 <_gpio_set_pin_pull_mode+0xb0>)
     dcc:	4798      	blx	r3
		break;
     dce:	e01c      	b.n	e0a <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     dd0:	79bb      	ldrb	r3, [r7, #6]
     dd2:	2201      	movs	r2, #1
     dd4:	409a      	lsls	r2, r3
     dd6:	79fb      	ldrb	r3, [r7, #7]
     dd8:	4619      	mov	r1, r3
     dda:	480e      	ldr	r0, [pc, #56]	; (e14 <_gpio_set_pin_pull_mode+0xa0>)
     ddc:	4b0f      	ldr	r3, [pc, #60]	; (e1c <_gpio_set_pin_pull_mode+0xa8>)
     dde:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     de0:	79ba      	ldrb	r2, [r7, #6]
     de2:	79fb      	ldrb	r3, [r7, #7]
     de4:	4619      	mov	r1, r3
     de6:	480b      	ldr	r0, [pc, #44]	; (e14 <_gpio_set_pin_pull_mode+0xa0>)
     de8:	4b0d      	ldr	r3, [pc, #52]	; (e20 <_gpio_set_pin_pull_mode+0xac>)
     dea:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
     dec:	79bb      	ldrb	r3, [r7, #6]
     dee:	2201      	movs	r2, #1
     df0:	409a      	lsls	r2, r3
     df2:	79fb      	ldrb	r3, [r7, #7]
     df4:	4619      	mov	r1, r3
     df6:	4807      	ldr	r0, [pc, #28]	; (e14 <_gpio_set_pin_pull_mode+0xa0>)
     df8:	4b0b      	ldr	r3, [pc, #44]	; (e28 <_gpio_set_pin_pull_mode+0xb4>)
     dfa:	4798      	blx	r3
		break;
     dfc:	e005      	b.n	e0a <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
     dfe:	2289      	movs	r2, #137	; 0x89
     e00:	490a      	ldr	r1, [pc, #40]	; (e2c <_gpio_set_pin_pull_mode+0xb8>)
     e02:	2000      	movs	r0, #0
     e04:	4b0a      	ldr	r3, [pc, #40]	; (e30 <_gpio_set_pin_pull_mode+0xbc>)
     e06:	4798      	blx	r3
		break;
     e08:	bf00      	nop
	}
}
     e0a:	bf00      	nop
     e0c:	3708      	adds	r7, #8
     e0e:	46bd      	mov	sp, r7
     e10:	bd80      	pop	{r7, pc}
     e12:	bf00      	nop
     e14:	41008000 	.word	0x41008000
     e18:	00000bdb 	.word	0x00000bdb
     e1c:	00000a07 	.word	0x00000a07
     e20:	00000b97 	.word	0x00000b97
     e24:	00000a2f 	.word	0x00000a2f
     e28:	00000a57 	.word	0x00000a57
     e2c:	0000e2ac 	.word	0x0000e2ac
     e30:	000034fd 	.word	0x000034fd

00000e34 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
     e34:	b590      	push	{r4, r7, lr}
     e36:	b085      	sub	sp, #20
     e38:	af00      	add	r7, sp, #0
     e3a:	6078      	str	r0, [r7, #4]
     e3c:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
     e3e:	687b      	ldr	r3, [r7, #4]
     e40:	095b      	lsrs	r3, r3, #5
     e42:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
     e44:	687b      	ldr	r3, [r7, #4]
     e46:	b2db      	uxtb	r3, r3
     e48:	f003 031f 	and.w	r3, r3, #31
     e4c:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
     e4e:	683b      	ldr	r3, [r7, #0]
     e50:	f1b3 3fff 	cmp.w	r3, #4294967295
     e54:	d106      	bne.n	e64 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
     e56:	7bba      	ldrb	r2, [r7, #14]
     e58:	7bf9      	ldrb	r1, [r7, #15]
     e5a:	2300      	movs	r3, #0
     e5c:	4812      	ldr	r0, [pc, #72]	; (ea8 <_gpio_set_pin_function+0x74>)
     e5e:	4c13      	ldr	r4, [pc, #76]	; (eac <_gpio_set_pin_function+0x78>)
     e60:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
     e62:	e01d      	b.n	ea0 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
     e64:	7bba      	ldrb	r2, [r7, #14]
     e66:	7bf9      	ldrb	r1, [r7, #15]
     e68:	2301      	movs	r3, #1
     e6a:	480f      	ldr	r0, [pc, #60]	; (ea8 <_gpio_set_pin_function+0x74>)
     e6c:	4c0f      	ldr	r4, [pc, #60]	; (eac <_gpio_set_pin_function+0x78>)
     e6e:	47a0      	blx	r4
		if (pin & 1) {
     e70:	7bbb      	ldrb	r3, [r7, #14]
     e72:	f003 0301 	and.w	r3, r3, #1
     e76:	2b00      	cmp	r3, #0
     e78:	d009      	beq.n	e8e <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
     e7a:	7bbb      	ldrb	r3, [r7, #14]
     e7c:	085b      	lsrs	r3, r3, #1
     e7e:	b2da      	uxtb	r2, r3
     e80:	683b      	ldr	r3, [r7, #0]
     e82:	b2db      	uxtb	r3, r3
     e84:	7bf9      	ldrb	r1, [r7, #15]
     e86:	4808      	ldr	r0, [pc, #32]	; (ea8 <_gpio_set_pin_function+0x74>)
     e88:	4c09      	ldr	r4, [pc, #36]	; (eb0 <_gpio_set_pin_function+0x7c>)
     e8a:	47a0      	blx	r4
}
     e8c:	e008      	b.n	ea0 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
     e8e:	7bbb      	ldrb	r3, [r7, #14]
     e90:	085b      	lsrs	r3, r3, #1
     e92:	b2da      	uxtb	r2, r3
     e94:	683b      	ldr	r3, [r7, #0]
     e96:	b2db      	uxtb	r3, r3
     e98:	7bf9      	ldrb	r1, [r7, #15]
     e9a:	4803      	ldr	r0, [pc, #12]	; (ea8 <_gpio_set_pin_function+0x74>)
     e9c:	4c05      	ldr	r4, [pc, #20]	; (eb4 <_gpio_set_pin_function+0x80>)
     e9e:	47a0      	blx	r4
}
     ea0:	bf00      	nop
     ea2:	3714      	adds	r7, #20
     ea4:	46bd      	mov	sp, r7
     ea6:	bd90      	pop	{r4, r7, pc}
     ea8:	41008000 	.word	0x41008000
     eac:	00000b3d 	.word	0x00000b3d
     eb0:	00000adf 	.word	0x00000adf
     eb4:	00000a7f 	.word	0x00000a7f

00000eb8 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
     eb8:	b580      	push	{r7, lr}
     eba:	b082      	sub	sp, #8
     ebc:	af00      	add	r7, sp, #0
     ebe:	4603      	mov	r3, r0
     ec0:	460a      	mov	r2, r1
     ec2:	71fb      	strb	r3, [r7, #7]
     ec4:	4613      	mov	r3, r2
     ec6:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     ec8:	79fb      	ldrb	r3, [r7, #7]
     eca:	095b      	lsrs	r3, r3, #5
     ecc:	b2d8      	uxtb	r0, r3
     ece:	79fb      	ldrb	r3, [r7, #7]
     ed0:	f003 031f 	and.w	r3, r3, #31
     ed4:	b2db      	uxtb	r3, r3
     ed6:	79ba      	ldrb	r2, [r7, #6]
     ed8:	4619      	mov	r1, r3
     eda:	4b03      	ldr	r3, [pc, #12]	; (ee8 <gpio_set_pin_pull_mode+0x30>)
     edc:	4798      	blx	r3
}
     ede:	bf00      	nop
     ee0:	3708      	adds	r7, #8
     ee2:	46bd      	mov	sp, r7
     ee4:	bd80      	pop	{r7, pc}
     ee6:	bf00      	nop
     ee8:	00000d75 	.word	0x00000d75

00000eec <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
     eec:	b580      	push	{r7, lr}
     eee:	b082      	sub	sp, #8
     ef0:	af00      	add	r7, sp, #0
     ef2:	6078      	str	r0, [r7, #4]
     ef4:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
     ef6:	6839      	ldr	r1, [r7, #0]
     ef8:	6878      	ldr	r0, [r7, #4]
     efa:	4b03      	ldr	r3, [pc, #12]	; (f08 <gpio_set_pin_function+0x1c>)
     efc:	4798      	blx	r3
}
     efe:	bf00      	nop
     f00:	3708      	adds	r7, #8
     f02:	46bd      	mov	sp, r7
     f04:	bd80      	pop	{r7, pc}
     f06:	bf00      	nop
     f08:	00000e35 	.word	0x00000e35

00000f0c <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
     f0c:	b580      	push	{r7, lr}
     f0e:	b082      	sub	sp, #8
     f10:	af00      	add	r7, sp, #0
     f12:	4603      	mov	r3, r0
     f14:	460a      	mov	r2, r1
     f16:	71fb      	strb	r3, [r7, #7]
     f18:	4613      	mov	r3, r2
     f1a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
     f1c:	79fb      	ldrb	r3, [r7, #7]
     f1e:	095b      	lsrs	r3, r3, #5
     f20:	b2d8      	uxtb	r0, r3
     f22:	79fb      	ldrb	r3, [r7, #7]
     f24:	f003 031f 	and.w	r3, r3, #31
     f28:	2201      	movs	r2, #1
     f2a:	fa02 f303 	lsl.w	r3, r2, r3
     f2e:	79ba      	ldrb	r2, [r7, #6]
     f30:	4619      	mov	r1, r3
     f32:	4b03      	ldr	r3, [pc, #12]	; (f40 <gpio_set_pin_direction+0x34>)
     f34:	4798      	blx	r3
}
     f36:	bf00      	nop
     f38:	3708      	adds	r7, #8
     f3a:	46bd      	mov	sp, r7
     f3c:	bd80      	pop	{r7, pc}
     f3e:	bf00      	nop
     f40:	00000c49 	.word	0x00000c49

00000f44 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     f44:	b580      	push	{r7, lr}
     f46:	b082      	sub	sp, #8
     f48:	af00      	add	r7, sp, #0
     f4a:	4603      	mov	r3, r0
     f4c:	460a      	mov	r2, r1
     f4e:	71fb      	strb	r3, [r7, #7]
     f50:	4613      	mov	r3, r2
     f52:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     f54:	79fb      	ldrb	r3, [r7, #7]
     f56:	095b      	lsrs	r3, r3, #5
     f58:	b2d8      	uxtb	r0, r3
     f5a:	79fb      	ldrb	r3, [r7, #7]
     f5c:	f003 031f 	and.w	r3, r3, #31
     f60:	2201      	movs	r2, #1
     f62:	fa02 f303 	lsl.w	r3, r2, r3
     f66:	79ba      	ldrb	r2, [r7, #6]
     f68:	4619      	mov	r1, r3
     f6a:	4b03      	ldr	r3, [pc, #12]	; (f78 <gpio_set_pin_level+0x34>)
     f6c:	4798      	blx	r3
}
     f6e:	bf00      	nop
     f70:	3708      	adds	r7, #8
     f72:	46bd      	mov	sp, r7
     f74:	bd80      	pop	{r7, pc}
     f76:	bf00      	nop
     f78:	00000d31 	.word	0x00000d31

00000f7c <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
     f7c:	b580      	push	{r7, lr}
     f7e:	af00      	add	r7, sp, #0
	_init_chip();
     f80:	4b01      	ldr	r3, [pc, #4]	; (f88 <init_mcu+0xc>)
     f82:	4798      	blx	r3
}
     f84:	bf00      	nop
     f86:	bd80      	pop	{r7, pc}
     f88:	00004751 	.word	0x00004751

00000f8c <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
     f8c:	b580      	push	{r7, lr}
     f8e:	b082      	sub	sp, #8
     f90:	af00      	add	r7, sp, #0
     f92:	6078      	str	r0, [r7, #4]
     f94:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
     f96:	687b      	ldr	r3, [r7, #4]
     f98:	2b00      	cmp	r3, #0
     f9a:	d004      	beq.n	fa6 <wdt_init+0x1a>
     f9c:	683b      	ldr	r3, [r7, #0]
     f9e:	2b00      	cmp	r3, #0
     fa0:	d001      	beq.n	fa6 <wdt_init+0x1a>
     fa2:	2301      	movs	r3, #1
     fa4:	e000      	b.n	fa8 <wdt_init+0x1c>
     fa6:	2300      	movs	r3, #0
     fa8:	f003 0301 	and.w	r3, r3, #1
     fac:	b2db      	uxtb	r3, r3
     fae:	2248      	movs	r2, #72	; 0x48
     fb0:	4907      	ldr	r1, [pc, #28]	; (fd0 <wdt_init+0x44>)
     fb2:	4618      	mov	r0, r3
     fb4:	4b07      	ldr	r3, [pc, #28]	; (fd4 <wdt_init+0x48>)
     fb6:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     fb8:	687b      	ldr	r3, [r7, #4]
     fba:	683a      	ldr	r2, [r7, #0]
     fbc:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
     fbe:	687b      	ldr	r3, [r7, #4]
     fc0:	4618      	mov	r0, r3
     fc2:	4b05      	ldr	r3, [pc, #20]	; (fd8 <wdt_init+0x4c>)
     fc4:	4798      	blx	r3
     fc6:	4603      	mov	r3, r0
}
     fc8:	4618      	mov	r0, r3
     fca:	3708      	adds	r7, #8
     fcc:	46bd      	mov	sp, r7
     fce:	bd80      	pop	{r7, pc}
     fd0:	0000e2c8 	.word	0x0000e2c8
     fd4:	000034fd 	.word	0x000034fd
     fd8:	0000abf5 	.word	0x0000abf5

00000fdc <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
     fdc:	b580      	push	{r7, lr}
     fde:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
     fe0:	4804      	ldr	r0, [pc, #16]	; (ff4 <CRC_CALC_init+0x18>)
     fe2:	4b05      	ldr	r3, [pc, #20]	; (ff8 <CRC_CALC_init+0x1c>)
     fe4:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
     fe6:	4905      	ldr	r1, [pc, #20]	; (ffc <CRC_CALC_init+0x20>)
     fe8:	4805      	ldr	r0, [pc, #20]	; (1000 <CRC_CALC_init+0x24>)
     fea:	4b06      	ldr	r3, [pc, #24]	; (1004 <CRC_CALC_init+0x28>)
     fec:	4798      	blx	r3
}
     fee:	bf00      	nop
     ff0:	bd80      	pop	{r7, pc}
     ff2:	bf00      	nop
     ff4:	40000800 	.word	0x40000800
     ff8:	0000089f 	.word	0x0000089f
     ffc:	41002000 	.word	0x41002000
    1000:	20000e60 	.word	0x20000e60
    1004:	00001c85 	.word	0x00001c85

00001008 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    1008:	b580      	push	{r7, lr}
    100a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    100c:	2244      	movs	r2, #68	; 0x44
    100e:	2104      	movs	r1, #4
    1010:	481e      	ldr	r0, [pc, #120]	; (108c <EXTERNAL_IRQ_0_init+0x84>)
    1012:	4b1f      	ldr	r3, [pc, #124]	; (1090 <EXTERNAL_IRQ_0_init+0x88>)
    1014:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    1016:	481f      	ldr	r0, [pc, #124]	; (1094 <EXTERNAL_IRQ_0_init+0x8c>)
    1018:	4b1f      	ldr	r3, [pc, #124]	; (1098 <EXTERNAL_IRQ_0_init+0x90>)
    101a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA04, GPIO_DIRECTION_IN);
    101c:	2101      	movs	r1, #1
    101e:	2004      	movs	r0, #4
    1020:	4b1e      	ldr	r3, [pc, #120]	; (109c <EXTERNAL_IRQ_0_init+0x94>)
    1022:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA04,
    1024:	2102      	movs	r1, #2
    1026:	2004      	movs	r0, #4
    1028:	4b1d      	ldr	r3, [pc, #116]	; (10a0 <EXTERNAL_IRQ_0_init+0x98>)
    102a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA04, PINMUX_PA04A_EIC_EXTINT4);
    102c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    1030:	2004      	movs	r0, #4
    1032:	4b1c      	ldr	r3, [pc, #112]	; (10a4 <EXTERNAL_IRQ_0_init+0x9c>)
    1034:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA05, GPIO_DIRECTION_IN);
    1036:	2101      	movs	r1, #1
    1038:	2005      	movs	r0, #5
    103a:	4b18      	ldr	r3, [pc, #96]	; (109c <EXTERNAL_IRQ_0_init+0x94>)
    103c:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA05,
    103e:	2102      	movs	r1, #2
    1040:	2005      	movs	r0, #5
    1042:	4b17      	ldr	r3, [pc, #92]	; (10a0 <EXTERNAL_IRQ_0_init+0x98>)
    1044:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA05, PINMUX_PA05A_EIC_EXTINT5);
    1046:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    104a:	2005      	movs	r0, #5
    104c:	4b15      	ldr	r3, [pc, #84]	; (10a4 <EXTERNAL_IRQ_0_init+0x9c>)
    104e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(R2Int, GPIO_DIRECTION_IN);
    1050:	2101      	movs	r1, #1
    1052:	2056      	movs	r0, #86	; 0x56
    1054:	4b11      	ldr	r3, [pc, #68]	; (109c <EXTERNAL_IRQ_0_init+0x94>)
    1056:	4798      	blx	r3

	gpio_set_pin_pull_mode(R2Int,
    1058:	2102      	movs	r1, #2
    105a:	2056      	movs	r0, #86	; 0x56
    105c:	4b10      	ldr	r3, [pc, #64]	; (10a0 <EXTERNAL_IRQ_0_init+0x98>)
    105e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(R2Int, PINMUX_PC22A_EIC_EXTINT6);
    1060:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    1064:	2056      	movs	r0, #86	; 0x56
    1066:	4b0f      	ldr	r3, [pc, #60]	; (10a4 <EXTERNAL_IRQ_0_init+0x9c>)
    1068:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(R1Int, GPIO_DIRECTION_IN);
    106a:	2101      	movs	r1, #1
    106c:	2057      	movs	r0, #87	; 0x57
    106e:	4b0b      	ldr	r3, [pc, #44]	; (109c <EXTERNAL_IRQ_0_init+0x94>)
    1070:	4798      	blx	r3

	gpio_set_pin_pull_mode(R1Int,
    1072:	2102      	movs	r1, #2
    1074:	2057      	movs	r0, #87	; 0x57
    1076:	4b0a      	ldr	r3, [pc, #40]	; (10a0 <EXTERNAL_IRQ_0_init+0x98>)
    1078:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(R1Int, PINMUX_PC23A_EIC_EXTINT7);
    107a:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    107e:	2057      	movs	r0, #87	; 0x57
    1080:	4b08      	ldr	r3, [pc, #32]	; (10a4 <EXTERNAL_IRQ_0_init+0x9c>)
    1082:	4798      	blx	r3

	ext_irq_init();
    1084:	4b08      	ldr	r3, [pc, #32]	; (10a8 <EXTERNAL_IRQ_0_init+0xa0>)
    1086:	4798      	blx	r3
}
    1088:	bf00      	nop
    108a:	bd80      	pop	{r7, pc}
    108c:	40001c00 	.word	0x40001c00
    1090:	00000739 	.word	0x00000739
    1094:	40000800 	.word	0x40000800
    1098:	0000081f 	.word	0x0000081f
    109c:	00000f0d 	.word	0x00000f0d
    10a0:	00000eb9 	.word	0x00000eb9
    10a4:	00000eed 	.word	0x00000eed
    10a8:	00001d4d 	.word	0x00001d4d

000010ac <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    10ac:	b580      	push	{r7, lr}
    10ae:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    10b0:	2244      	movs	r2, #68	; 0x44
    10b2:	210b      	movs	r1, #11
    10b4:	4804      	ldr	r0, [pc, #16]	; (10c8 <EVENT_SYSTEM_0_init+0x1c>)
    10b6:	4b05      	ldr	r3, [pc, #20]	; (10cc <EVENT_SYSTEM_0_init+0x20>)
    10b8:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    10ba:	4805      	ldr	r0, [pc, #20]	; (10d0 <EVENT_SYSTEM_0_init+0x24>)
    10bc:	4b05      	ldr	r3, [pc, #20]	; (10d4 <EVENT_SYSTEM_0_init+0x28>)
    10be:	4798      	blx	r3

	event_system_init();
    10c0:	4b05      	ldr	r3, [pc, #20]	; (10d8 <EVENT_SYSTEM_0_init+0x2c>)
    10c2:	4798      	blx	r3
}
    10c4:	bf00      	nop
    10c6:	bd80      	pop	{r7, pc}
    10c8:	40001c00 	.word	0x40001c00
    10cc:	00000739 	.word	0x00000739
    10d0:	40000800 	.word	0x40000800
    10d4:	000008bf 	.word	0x000008bf
    10d8:	00001d39 	.word	0x00001d39

000010dc <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    10dc:	b580      	push	{r7, lr}
    10de:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    10e0:	2101      	movs	r1, #1
    10e2:	202b      	movs	r0, #43	; 0x2b
    10e4:	4b2b      	ldr	r3, [pc, #172]	; (1194 <QSPI_N25Q256_PORT_init+0xb8>)
    10e6:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    10e8:	2100      	movs	r1, #0
    10ea:	202b      	movs	r0, #43	; 0x2b
    10ec:	4b2a      	ldr	r3, [pc, #168]	; (1198 <QSPI_N25Q256_PORT_init+0xbc>)
    10ee:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    10f0:	492a      	ldr	r1, [pc, #168]	; (119c <QSPI_N25Q256_PORT_init+0xc0>)
    10f2:	202b      	movs	r0, #43	; 0x2b
    10f4:	4b2a      	ldr	r3, [pc, #168]	; (11a0 <QSPI_N25Q256_PORT_init+0xc4>)
    10f6:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    10f8:	2102      	movs	r1, #2
    10fa:	2008      	movs	r0, #8
    10fc:	4b25      	ldr	r3, [pc, #148]	; (1194 <QSPI_N25Q256_PORT_init+0xb8>)
    10fe:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    1100:	2100      	movs	r1, #0
    1102:	2008      	movs	r0, #8
    1104:	4b27      	ldr	r3, [pc, #156]	; (11a4 <QSPI_N25Q256_PORT_init+0xc8>)
    1106:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    1108:	2100      	movs	r1, #0
    110a:	2008      	movs	r0, #8
    110c:	4b22      	ldr	r3, [pc, #136]	; (1198 <QSPI_N25Q256_PORT_init+0xbc>)
    110e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    1110:	4925      	ldr	r1, [pc, #148]	; (11a8 <QSPI_N25Q256_PORT_init+0xcc>)
    1112:	2008      	movs	r0, #8
    1114:	4b22      	ldr	r3, [pc, #136]	; (11a0 <QSPI_N25Q256_PORT_init+0xc4>)
    1116:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    1118:	2102      	movs	r1, #2
    111a:	2009      	movs	r0, #9
    111c:	4b1d      	ldr	r3, [pc, #116]	; (1194 <QSPI_N25Q256_PORT_init+0xb8>)
    111e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    1120:	2100      	movs	r1, #0
    1122:	2009      	movs	r0, #9
    1124:	4b1f      	ldr	r3, [pc, #124]	; (11a4 <QSPI_N25Q256_PORT_init+0xc8>)
    1126:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    1128:	2100      	movs	r1, #0
    112a:	2009      	movs	r0, #9
    112c:	4b1a      	ldr	r3, [pc, #104]	; (1198 <QSPI_N25Q256_PORT_init+0xbc>)
    112e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    1130:	491e      	ldr	r1, [pc, #120]	; (11ac <QSPI_N25Q256_PORT_init+0xd0>)
    1132:	2009      	movs	r0, #9
    1134:	4b1a      	ldr	r3, [pc, #104]	; (11a0 <QSPI_N25Q256_PORT_init+0xc4>)
    1136:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    1138:	2102      	movs	r1, #2
    113a:	200a      	movs	r0, #10
    113c:	4b15      	ldr	r3, [pc, #84]	; (1194 <QSPI_N25Q256_PORT_init+0xb8>)
    113e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    1140:	2100      	movs	r1, #0
    1142:	200a      	movs	r0, #10
    1144:	4b17      	ldr	r3, [pc, #92]	; (11a4 <QSPI_N25Q256_PORT_init+0xc8>)
    1146:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    1148:	2100      	movs	r1, #0
    114a:	200a      	movs	r0, #10
    114c:	4b12      	ldr	r3, [pc, #72]	; (1198 <QSPI_N25Q256_PORT_init+0xbc>)
    114e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    1150:	4917      	ldr	r1, [pc, #92]	; (11b0 <QSPI_N25Q256_PORT_init+0xd4>)
    1152:	200a      	movs	r0, #10
    1154:	4b12      	ldr	r3, [pc, #72]	; (11a0 <QSPI_N25Q256_PORT_init+0xc4>)
    1156:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    1158:	2102      	movs	r1, #2
    115a:	200b      	movs	r0, #11
    115c:	4b0d      	ldr	r3, [pc, #52]	; (1194 <QSPI_N25Q256_PORT_init+0xb8>)
    115e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    1160:	2100      	movs	r1, #0
    1162:	200b      	movs	r0, #11
    1164:	4b0f      	ldr	r3, [pc, #60]	; (11a4 <QSPI_N25Q256_PORT_init+0xc8>)
    1166:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    1168:	2100      	movs	r1, #0
    116a:	200b      	movs	r0, #11
    116c:	4b0a      	ldr	r3, [pc, #40]	; (1198 <QSPI_N25Q256_PORT_init+0xbc>)
    116e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    1170:	4910      	ldr	r1, [pc, #64]	; (11b4 <QSPI_N25Q256_PORT_init+0xd8>)
    1172:	200b      	movs	r0, #11
    1174:	4b0a      	ldr	r3, [pc, #40]	; (11a0 <QSPI_N25Q256_PORT_init+0xc4>)
    1176:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    1178:	2101      	movs	r1, #1
    117a:	202a      	movs	r0, #42	; 0x2a
    117c:	4b05      	ldr	r3, [pc, #20]	; (1194 <QSPI_N25Q256_PORT_init+0xb8>)
    117e:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    1180:	2100      	movs	r1, #0
    1182:	202a      	movs	r0, #42	; 0x2a
    1184:	4b04      	ldr	r3, [pc, #16]	; (1198 <QSPI_N25Q256_PORT_init+0xbc>)
    1186:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    1188:	490b      	ldr	r1, [pc, #44]	; (11b8 <QSPI_N25Q256_PORT_init+0xdc>)
    118a:	202a      	movs	r0, #42	; 0x2a
    118c:	4b04      	ldr	r3, [pc, #16]	; (11a0 <QSPI_N25Q256_PORT_init+0xc4>)
    118e:	4798      	blx	r3
}
    1190:	bf00      	nop
    1192:	bd80      	pop	{r7, pc}
    1194:	00000f0d 	.word	0x00000f0d
    1198:	00000eb9 	.word	0x00000eb9
    119c:	002b0007 	.word	0x002b0007
    11a0:	00000eed 	.word	0x00000eed
    11a4:	00000f45 	.word	0x00000f45
    11a8:	00080007 	.word	0x00080007
    11ac:	00090007 	.word	0x00090007
    11b0:	000a0007 	.word	0x000a0007
    11b4:	000b0007 	.word	0x000b0007
    11b8:	002a0007 	.word	0x002a0007

000011bc <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    11bc:	b580      	push	{r7, lr}
    11be:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    11c0:	4805      	ldr	r0, [pc, #20]	; (11d8 <QSPI_N25Q256_CLOCK_init+0x1c>)
    11c2:	4b06      	ldr	r3, [pc, #24]	; (11dc <QSPI_N25Q256_CLOCK_init+0x20>)
    11c4:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    11c6:	4804      	ldr	r0, [pc, #16]	; (11d8 <QSPI_N25Q256_CLOCK_init+0x1c>)
    11c8:	4b05      	ldr	r3, [pc, #20]	; (11e0 <QSPI_N25Q256_CLOCK_init+0x24>)
    11ca:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    11cc:	4802      	ldr	r0, [pc, #8]	; (11d8 <QSPI_N25Q256_CLOCK_init+0x1c>)
    11ce:	4b05      	ldr	r3, [pc, #20]	; (11e4 <QSPI_N25Q256_CLOCK_init+0x28>)
    11d0:	4798      	blx	r3
}
    11d2:	bf00      	nop
    11d4:	bd80      	pop	{r7, pc}
    11d6:	bf00      	nop
    11d8:	40000800 	.word	0x40000800
    11dc:	0000077f 	.word	0x0000077f
    11e0:	000007bf 	.word	0x000007bf
    11e4:	0000091f 	.word	0x0000091f

000011e8 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    11e8:	b580      	push	{r7, lr}
    11ea:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    11ec:	4b04      	ldr	r3, [pc, #16]	; (1200 <QSPI_N25Q256_init+0x18>)
    11ee:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    11f0:	4904      	ldr	r1, [pc, #16]	; (1204 <QSPI_N25Q256_init+0x1c>)
    11f2:	4805      	ldr	r0, [pc, #20]	; (1208 <QSPI_N25Q256_init+0x20>)
    11f4:	4b05      	ldr	r3, [pc, #20]	; (120c <QSPI_N25Q256_init+0x24>)
    11f6:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    11f8:	4b05      	ldr	r3, [pc, #20]	; (1210 <QSPI_N25Q256_init+0x28>)
    11fa:	4798      	blx	r3
}
    11fc:	bf00      	nop
    11fe:	bd80      	pop	{r7, pc}
    1200:	000011bd 	.word	0x000011bd
    1204:	42003400 	.word	0x42003400
    1208:	20000d04 	.word	0x20000d04
    120c:	00002099 	.word	0x00002099
    1210:	000010dd 	.word	0x000010dd

00001214 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    1214:	b580      	push	{r7, lr}
    1216:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    1218:	4802      	ldr	r0, [pc, #8]	; (1224 <DATETIME_CLOCK_CLOCK_init+0x10>)
    121a:	4b03      	ldr	r3, [pc, #12]	; (1228 <DATETIME_CLOCK_CLOCK_init+0x14>)
    121c:	4798      	blx	r3
}
    121e:	bf00      	nop
    1220:	bd80      	pop	{r7, pc}
    1222:	bf00      	nop
    1224:	40000800 	.word	0x40000800
    1228:	000007ff 	.word	0x000007ff

0000122c <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    122c:	b580      	push	{r7, lr}
    122e:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    1230:	4b03      	ldr	r3, [pc, #12]	; (1240 <DATETIME_CLOCK_init+0x14>)
    1232:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    1234:	4903      	ldr	r1, [pc, #12]	; (1244 <DATETIME_CLOCK_init+0x18>)
    1236:	4804      	ldr	r0, [pc, #16]	; (1248 <DATETIME_CLOCK_init+0x1c>)
    1238:	4b04      	ldr	r3, [pc, #16]	; (124c <DATETIME_CLOCK_init+0x20>)
    123a:	4798      	blx	r3
}
    123c:	bf00      	nop
    123e:	bd80      	pop	{r7, pc}
    1240:	00001215 	.word	0x00001215
    1244:	40002400 	.word	0x40002400
    1248:	20000e3c 	.word	0x20000e3c
    124c:	0000198d 	.word	0x0000198d

00001250 <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    1250:	b580      	push	{r7, lr}
    1252:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    1254:	2100      	movs	r1, #0
    1256:	203b      	movs	r0, #59	; 0x3b
    1258:	4b11      	ldr	r3, [pc, #68]	; (12a0 <SPI_TEMP_PORT_init+0x50>)
    125a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    125c:	2102      	movs	r1, #2
    125e:	203b      	movs	r0, #59	; 0x3b
    1260:	4b10      	ldr	r3, [pc, #64]	; (12a4 <SPI_TEMP_PORT_init+0x54>)
    1262:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    1264:	4910      	ldr	r1, [pc, #64]	; (12a8 <SPI_TEMP_PORT_init+0x58>)
    1266:	203b      	movs	r0, #59	; 0x3b
    1268:	4b10      	ldr	r3, [pc, #64]	; (12ac <SPI_TEMP_PORT_init+0x5c>)
    126a:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    126c:	2100      	movs	r1, #0
    126e:	203a      	movs	r0, #58	; 0x3a
    1270:	4b0b      	ldr	r3, [pc, #44]	; (12a0 <SPI_TEMP_PORT_init+0x50>)
    1272:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    1274:	2102      	movs	r1, #2
    1276:	203a      	movs	r0, #58	; 0x3a
    1278:	4b0a      	ldr	r3, [pc, #40]	; (12a4 <SPI_TEMP_PORT_init+0x54>)
    127a:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    127c:	490c      	ldr	r1, [pc, #48]	; (12b0 <SPI_TEMP_PORT_init+0x60>)
    127e:	203a      	movs	r0, #58	; 0x3a
    1280:	4b0a      	ldr	r3, [pc, #40]	; (12ac <SPI_TEMP_PORT_init+0x5c>)
    1282:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    1284:	2101      	movs	r1, #1
    1286:	203c      	movs	r0, #60	; 0x3c
    1288:	4b06      	ldr	r3, [pc, #24]	; (12a4 <SPI_TEMP_PORT_init+0x54>)
    128a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    128c:	2100      	movs	r1, #0
    128e:	203c      	movs	r0, #60	; 0x3c
    1290:	4b08      	ldr	r3, [pc, #32]	; (12b4 <SPI_TEMP_PORT_init+0x64>)
    1292:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    1294:	4908      	ldr	r1, [pc, #32]	; (12b8 <SPI_TEMP_PORT_init+0x68>)
    1296:	203c      	movs	r0, #60	; 0x3c
    1298:	4b04      	ldr	r3, [pc, #16]	; (12ac <SPI_TEMP_PORT_init+0x5c>)
    129a:	4798      	blx	r3
}
    129c:	bf00      	nop
    129e:	bd80      	pop	{r7, pc}
    12a0:	00000f45 	.word	0x00000f45
    12a4:	00000f0d 	.word	0x00000f0d
    12a8:	003b0003 	.word	0x003b0003
    12ac:	00000eed 	.word	0x00000eed
    12b0:	003a0003 	.word	0x003a0003
    12b4:	00000eb9 	.word	0x00000eb9
    12b8:	003c0003 	.word	0x003c0003

000012bc <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    12bc:	b580      	push	{r7, lr}
    12be:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    12c0:	2243      	movs	r2, #67	; 0x43
    12c2:	2122      	movs	r1, #34	; 0x22
    12c4:	4806      	ldr	r0, [pc, #24]	; (12e0 <SPI_TEMP_CLOCK_init+0x24>)
    12c6:	4b07      	ldr	r3, [pc, #28]	; (12e4 <SPI_TEMP_CLOCK_init+0x28>)
    12c8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    12ca:	224a      	movs	r2, #74	; 0x4a
    12cc:	2103      	movs	r1, #3
    12ce:	4804      	ldr	r0, [pc, #16]	; (12e0 <SPI_TEMP_CLOCK_init+0x24>)
    12d0:	4b04      	ldr	r3, [pc, #16]	; (12e4 <SPI_TEMP_CLOCK_init+0x28>)
    12d2:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    12d4:	4804      	ldr	r0, [pc, #16]	; (12e8 <SPI_TEMP_CLOCK_init+0x2c>)
    12d6:	4b05      	ldr	r3, [pc, #20]	; (12ec <SPI_TEMP_CLOCK_init+0x30>)
    12d8:	4798      	blx	r3
}
    12da:	bf00      	nop
    12dc:	bd80      	pop	{r7, pc}
    12de:	bf00      	nop
    12e0:	40001c00 	.word	0x40001c00
    12e4:	00000739 	.word	0x00000739
    12e8:	40000800 	.word	0x40000800
    12ec:	0000093f 	.word	0x0000093f

000012f0 <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    12f0:	b580      	push	{r7, lr}
    12f2:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    12f4:	4b05      	ldr	r3, [pc, #20]	; (130c <SPI_TEMP_init+0x1c>)
    12f6:	4798      	blx	r3
	spi_m_async_init(&SPI_TEMP, SERCOM4);
    12f8:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    12fc:	4804      	ldr	r0, [pc, #16]	; (1310 <SPI_TEMP_init+0x20>)
    12fe:	4b05      	ldr	r3, [pc, #20]	; (1314 <SPI_TEMP_init+0x24>)
    1300:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    1302:	4b05      	ldr	r3, [pc, #20]	; (1318 <SPI_TEMP_init+0x28>)
    1304:	4798      	blx	r3
}
    1306:	bf00      	nop
    1308:	bd80      	pop	{r7, pc}
    130a:	bf00      	nop
    130c:	000012bd 	.word	0x000012bd
    1310:	20000cbc 	.word	0x20000cbc
    1314:	000023c1 	.word	0x000023c1
    1318:	00001251 	.word	0x00001251

0000131c <I2C_EXPANDER_PORT_init>:

void I2C_EXPANDER_PORT_init(void)
{
    131c:	b580      	push	{r7, lr}
    131e:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    1320:	2100      	movs	r1, #0
    1322:	2017      	movs	r0, #23
    1324:	4b07      	ldr	r3, [pc, #28]	; (1344 <I2C_EXPANDER_PORT_init+0x28>)
    1326:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    1328:	4907      	ldr	r1, [pc, #28]	; (1348 <I2C_EXPANDER_PORT_init+0x2c>)
    132a:	2017      	movs	r0, #23
    132c:	4b07      	ldr	r3, [pc, #28]	; (134c <I2C_EXPANDER_PORT_init+0x30>)
    132e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    1330:	2100      	movs	r1, #0
    1332:	2016      	movs	r0, #22
    1334:	4b03      	ldr	r3, [pc, #12]	; (1344 <I2C_EXPANDER_PORT_init+0x28>)
    1336:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    1338:	4905      	ldr	r1, [pc, #20]	; (1350 <I2C_EXPANDER_PORT_init+0x34>)
    133a:	2016      	movs	r0, #22
    133c:	4b03      	ldr	r3, [pc, #12]	; (134c <I2C_EXPANDER_PORT_init+0x30>)
    133e:	4798      	blx	r3
}
    1340:	bf00      	nop
    1342:	bd80      	pop	{r7, pc}
    1344:	00000eb9 	.word	0x00000eb9
    1348:	00170003 	.word	0x00170003
    134c:	00000eed 	.word	0x00000eed
    1350:	00160003 	.word	0x00160003

00001354 <I2C_EXPANDER_CLOCK_init>:

void I2C_EXPANDER_CLOCK_init(void)
{
    1354:	b580      	push	{r7, lr}
    1356:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1358:	2243      	movs	r2, #67	; 0x43
    135a:	2123      	movs	r1, #35	; 0x23
    135c:	4806      	ldr	r0, [pc, #24]	; (1378 <I2C_EXPANDER_CLOCK_init+0x24>)
    135e:	4b07      	ldr	r3, [pc, #28]	; (137c <I2C_EXPANDER_CLOCK_init+0x28>)
    1360:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1362:	224a      	movs	r2, #74	; 0x4a
    1364:	2103      	movs	r1, #3
    1366:	4804      	ldr	r0, [pc, #16]	; (1378 <I2C_EXPANDER_CLOCK_init+0x24>)
    1368:	4b04      	ldr	r3, [pc, #16]	; (137c <I2C_EXPANDER_CLOCK_init+0x28>)
    136a:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    136c:	4804      	ldr	r0, [pc, #16]	; (1380 <I2C_EXPANDER_CLOCK_init+0x2c>)
    136e:	4b05      	ldr	r3, [pc, #20]	; (1384 <I2C_EXPANDER_CLOCK_init+0x30>)
    1370:	4798      	blx	r3
}
    1372:	bf00      	nop
    1374:	bd80      	pop	{r7, pc}
    1376:	bf00      	nop
    1378:	40001c00 	.word	0x40001c00
    137c:	00000739 	.word	0x00000739
    1380:	40000800 	.word	0x40000800
    1384:	0000095f 	.word	0x0000095f

00001388 <I2C_EXPANDER_init>:

void I2C_EXPANDER_init(void)
{
    1388:	b580      	push	{r7, lr}
    138a:	af00      	add	r7, sp, #0
	I2C_EXPANDER_CLOCK_init();
    138c:	4b04      	ldr	r3, [pc, #16]	; (13a0 <I2C_EXPANDER_init+0x18>)
    138e:	4798      	blx	r3
	i2c_m_async_init(&I2C_EXPANDER, SERCOM5);
    1390:	4904      	ldr	r1, [pc, #16]	; (13a4 <I2C_EXPANDER_init+0x1c>)
    1392:	4805      	ldr	r0, [pc, #20]	; (13a8 <I2C_EXPANDER_init+0x20>)
    1394:	4b05      	ldr	r3, [pc, #20]	; (13ac <I2C_EXPANDER_init+0x24>)
    1396:	4798      	blx	r3
	I2C_EXPANDER_PORT_init();
    1398:	4b05      	ldr	r3, [pc, #20]	; (13b0 <I2C_EXPANDER_init+0x28>)
    139a:	4798      	blx	r3
}
    139c:	bf00      	nop
    139e:	bd80      	pop	{r7, pc}
    13a0:	00001355 	.word	0x00001355
    13a4:	43000400 	.word	0x43000400
    13a8:	20000da0 	.word	0x20000da0
    13ac:	00001f59 	.word	0x00001f59
    13b0:	0000131d 	.word	0x0000131d

000013b4 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    13b4:	b580      	push	{r7, lr}
    13b6:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    13b8:	2100      	movs	r1, #0
    13ba:	2044      	movs	r0, #68	; 0x44
    13bc:	4b11      	ldr	r3, [pc, #68]	; (1404 <SPI_HI3593_PORT_init+0x50>)
    13be:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    13c0:	2102      	movs	r1, #2
    13c2:	2044      	movs	r0, #68	; 0x44
    13c4:	4b10      	ldr	r3, [pc, #64]	; (1408 <SPI_HI3593_PORT_init+0x54>)
    13c6:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    13c8:	4910      	ldr	r1, [pc, #64]	; (140c <SPI_HI3593_PORT_init+0x58>)
    13ca:	2044      	movs	r0, #68	; 0x44
    13cc:	4b10      	ldr	r3, [pc, #64]	; (1410 <SPI_HI3593_PORT_init+0x5c>)
    13ce:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    13d0:	2100      	movs	r1, #0
    13d2:	2045      	movs	r0, #69	; 0x45
    13d4:	4b0b      	ldr	r3, [pc, #44]	; (1404 <SPI_HI3593_PORT_init+0x50>)
    13d6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    13d8:	2102      	movs	r1, #2
    13da:	2045      	movs	r0, #69	; 0x45
    13dc:	4b0a      	ldr	r3, [pc, #40]	; (1408 <SPI_HI3593_PORT_init+0x54>)
    13de:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    13e0:	490c      	ldr	r1, [pc, #48]	; (1414 <SPI_HI3593_PORT_init+0x60>)
    13e2:	2045      	movs	r0, #69	; 0x45
    13e4:	4b0a      	ldr	r3, [pc, #40]	; (1410 <SPI_HI3593_PORT_init+0x5c>)
    13e6:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    13e8:	2101      	movs	r1, #1
    13ea:	2047      	movs	r0, #71	; 0x47
    13ec:	4b06      	ldr	r3, [pc, #24]	; (1408 <SPI_HI3593_PORT_init+0x54>)
    13ee:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    13f0:	2100      	movs	r1, #0
    13f2:	2047      	movs	r0, #71	; 0x47
    13f4:	4b08      	ldr	r3, [pc, #32]	; (1418 <SPI_HI3593_PORT_init+0x64>)
    13f6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    13f8:	4908      	ldr	r1, [pc, #32]	; (141c <SPI_HI3593_PORT_init+0x68>)
    13fa:	2047      	movs	r0, #71	; 0x47
    13fc:	4b04      	ldr	r3, [pc, #16]	; (1410 <SPI_HI3593_PORT_init+0x5c>)
    13fe:	4798      	blx	r3
}
    1400:	bf00      	nop
    1402:	bd80      	pop	{r7, pc}
    1404:	00000f45 	.word	0x00000f45
    1408:	00000f0d 	.word	0x00000f0d
    140c:	00440002 	.word	0x00440002
    1410:	00000eed 	.word	0x00000eed
    1414:	00450002 	.word	0x00450002
    1418:	00000eb9 	.word	0x00000eb9
    141c:	00470002 	.word	0x00470002

00001420 <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    1420:	b580      	push	{r7, lr}
    1422:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1424:	2243      	movs	r2, #67	; 0x43
    1426:	2124      	movs	r1, #36	; 0x24
    1428:	4806      	ldr	r0, [pc, #24]	; (1444 <SPI_HI3593_CLOCK_init+0x24>)
    142a:	4b07      	ldr	r3, [pc, #28]	; (1448 <SPI_HI3593_CLOCK_init+0x28>)
    142c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    142e:	224a      	movs	r2, #74	; 0x4a
    1430:	2103      	movs	r1, #3
    1432:	4804      	ldr	r0, [pc, #16]	; (1444 <SPI_HI3593_CLOCK_init+0x24>)
    1434:	4b04      	ldr	r3, [pc, #16]	; (1448 <SPI_HI3593_CLOCK_init+0x28>)
    1436:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    1438:	4804      	ldr	r0, [pc, #16]	; (144c <SPI_HI3593_CLOCK_init+0x2c>)
    143a:	4b05      	ldr	r3, [pc, #20]	; (1450 <SPI_HI3593_CLOCK_init+0x30>)
    143c:	4798      	blx	r3
}
    143e:	bf00      	nop
    1440:	bd80      	pop	{r7, pc}
    1442:	bf00      	nop
    1444:	40001c00 	.word	0x40001c00
    1448:	00000739 	.word	0x00000739
    144c:	40000800 	.word	0x40000800
    1450:	0000097f 	.word	0x0000097f

00001454 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    1454:	b580      	push	{r7, lr}
    1456:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    1458:	4b04      	ldr	r3, [pc, #16]	; (146c <SPI_HI3593_init+0x18>)
    145a:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    145c:	4904      	ldr	r1, [pc, #16]	; (1470 <SPI_HI3593_init+0x1c>)
    145e:	4805      	ldr	r0, [pc, #20]	; (1474 <SPI_HI3593_init+0x20>)
    1460:	4b05      	ldr	r3, [pc, #20]	; (1478 <SPI_HI3593_init+0x24>)
    1462:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    1464:	4b05      	ldr	r3, [pc, #20]	; (147c <SPI_HI3593_init+0x28>)
    1466:	4798      	blx	r3
}
    1468:	bf00      	nop
    146a:	bd80      	pop	{r7, pc}
    146c:	00001421 	.word	0x00001421
    1470:	43000800 	.word	0x43000800
    1474:	20000ca4 	.word	0x20000ca4
    1478:	00002575 	.word	0x00002575
    147c:	000013b5 	.word	0x000013b5

00001480 <I2C_EEPROM_PORT_init>:

void I2C_EEPROM_PORT_init(void)
{
    1480:	b580      	push	{r7, lr}
    1482:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    1484:	2100      	movs	r1, #0
    1486:	2068      	movs	r0, #104	; 0x68
    1488:	4b07      	ldr	r3, [pc, #28]	; (14a8 <I2C_EEPROM_PORT_init+0x28>)
    148a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    148c:	4907      	ldr	r1, [pc, #28]	; (14ac <I2C_EEPROM_PORT_init+0x2c>)
    148e:	2068      	movs	r0, #104	; 0x68
    1490:	4b07      	ldr	r3, [pc, #28]	; (14b0 <I2C_EEPROM_PORT_init+0x30>)
    1492:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    1494:	2100      	movs	r1, #0
    1496:	2069      	movs	r0, #105	; 0x69
    1498:	4b03      	ldr	r3, [pc, #12]	; (14a8 <I2C_EEPROM_PORT_init+0x28>)
    149a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    149c:	4905      	ldr	r1, [pc, #20]	; (14b4 <I2C_EEPROM_PORT_init+0x34>)
    149e:	2069      	movs	r0, #105	; 0x69
    14a0:	4b03      	ldr	r3, [pc, #12]	; (14b0 <I2C_EEPROM_PORT_init+0x30>)
    14a2:	4798      	blx	r3
}
    14a4:	bf00      	nop
    14a6:	bd80      	pop	{r7, pc}
    14a8:	00000eb9 	.word	0x00000eb9
    14ac:	00680002 	.word	0x00680002
    14b0:	00000eed 	.word	0x00000eed
    14b4:	00690002 	.word	0x00690002

000014b8 <I2C_EEPROM_CLOCK_init>:

void I2C_EEPROM_CLOCK_init(void)
{
    14b8:	b580      	push	{r7, lr}
    14ba:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    14bc:	2242      	movs	r2, #66	; 0x42
    14be:	2125      	movs	r1, #37	; 0x25
    14c0:	4806      	ldr	r0, [pc, #24]	; (14dc <I2C_EEPROM_CLOCK_init+0x24>)
    14c2:	4b07      	ldr	r3, [pc, #28]	; (14e0 <I2C_EEPROM_CLOCK_init+0x28>)
    14c4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    14c6:	224a      	movs	r2, #74	; 0x4a
    14c8:	2103      	movs	r1, #3
    14ca:	4804      	ldr	r0, [pc, #16]	; (14dc <I2C_EEPROM_CLOCK_init+0x24>)
    14cc:	4b04      	ldr	r3, [pc, #16]	; (14e0 <I2C_EEPROM_CLOCK_init+0x28>)
    14ce:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    14d0:	4804      	ldr	r0, [pc, #16]	; (14e4 <I2C_EEPROM_CLOCK_init+0x2c>)
    14d2:	4b05      	ldr	r3, [pc, #20]	; (14e8 <I2C_EEPROM_CLOCK_init+0x30>)
    14d4:	4798      	blx	r3
}
    14d6:	bf00      	nop
    14d8:	bd80      	pop	{r7, pc}
    14da:	bf00      	nop
    14dc:	40001c00 	.word	0x40001c00
    14e0:	00000739 	.word	0x00000739
    14e4:	40000800 	.word	0x40000800
    14e8:	0000099f 	.word	0x0000099f

000014ec <I2C_EEPROM_init>:

void I2C_EEPROM_init(void)
{
    14ec:	b580      	push	{r7, lr}
    14ee:	af00      	add	r7, sp, #0
	I2C_EEPROM_CLOCK_init();
    14f0:	4b04      	ldr	r3, [pc, #16]	; (1504 <I2C_EEPROM_init+0x18>)
    14f2:	4798      	blx	r3
	i2c_m_async_init(&I2C_EEPROM, SERCOM7);
    14f4:	4904      	ldr	r1, [pc, #16]	; (1508 <I2C_EEPROM_init+0x1c>)
    14f6:	4805      	ldr	r0, [pc, #20]	; (150c <I2C_EEPROM_init+0x20>)
    14f8:	4b05      	ldr	r3, [pc, #20]	; (1510 <I2C_EEPROM_init+0x24>)
    14fa:	4798      	blx	r3
	I2C_EEPROM_PORT_init();
    14fc:	4b05      	ldr	r3, [pc, #20]	; (1514 <I2C_EEPROM_init+0x28>)
    14fe:	4798      	blx	r3
}
    1500:	bf00      	nop
    1502:	bd80      	pop	{r7, pc}
    1504:	000014b9 	.word	0x000014b9
    1508:	43000c00 	.word	0x43000c00
    150c:	20000dfc 	.word	0x20000dfc
    1510:	00001f59 	.word	0x00001f59
    1514:	00001481 	.word	0x00001481

00001518 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    1518:	b580      	push	{r7, lr}
    151a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    151c:	4808      	ldr	r0, [pc, #32]	; (1540 <TIMER_INTERFACE_init+0x28>)
    151e:	4b09      	ldr	r3, [pc, #36]	; (1544 <TIMER_INTERFACE_init+0x2c>)
    1520:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1522:	2243      	movs	r2, #67	; 0x43
    1524:	2109      	movs	r1, #9
    1526:	4808      	ldr	r0, [pc, #32]	; (1548 <TIMER_INTERFACE_init+0x30>)
    1528:	4b08      	ldr	r3, [pc, #32]	; (154c <TIMER_INTERFACE_init+0x34>)
    152a:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC0, _tc_get_timer());
    152c:	4b08      	ldr	r3, [pc, #32]	; (1550 <TIMER_INTERFACE_init+0x38>)
    152e:	4798      	blx	r3
    1530:	4603      	mov	r3, r0
    1532:	461a      	mov	r2, r3
    1534:	4907      	ldr	r1, [pc, #28]	; (1554 <TIMER_INTERFACE_init+0x3c>)
    1536:	4808      	ldr	r0, [pc, #32]	; (1558 <TIMER_INTERFACE_init+0x40>)
    1538:	4b08      	ldr	r3, [pc, #32]	; (155c <TIMER_INTERFACE_init+0x44>)
    153a:	4798      	blx	r3
}
    153c:	bf00      	nop
    153e:	bd80      	pop	{r7, pc}
    1540:	40000800 	.word	0x40000800
    1544:	0000083f 	.word	0x0000083f
    1548:	40001c00 	.word	0x40001c00
    154c:	00000739 	.word	0x00000739
    1550:	000080c5 	.word	0x000080c5
    1554:	40003800 	.word	0x40003800
    1558:	20000d24 	.word	0x20000d24
    155c:	00002745 	.word	0x00002745

00001560 <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    1560:	b580      	push	{r7, lr}
    1562:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
    1564:	4808      	ldr	r0, [pc, #32]	; (1588 <TIMER_EVENT_init+0x28>)
    1566:	4b09      	ldr	r3, [pc, #36]	; (158c <TIMER_EVENT_init+0x2c>)
    1568:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    156a:	2245      	movs	r2, #69	; 0x45
    156c:	2109      	movs	r1, #9
    156e:	4808      	ldr	r0, [pc, #32]	; (1590 <TIMER_EVENT_init+0x30>)
    1570:	4b08      	ldr	r3, [pc, #32]	; (1594 <TIMER_EVENT_init+0x34>)
    1572:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC1, _tc_get_timer());
    1574:	4b08      	ldr	r3, [pc, #32]	; (1598 <TIMER_EVENT_init+0x38>)
    1576:	4798      	blx	r3
    1578:	4603      	mov	r3, r0
    157a:	461a      	mov	r2, r3
    157c:	4907      	ldr	r1, [pc, #28]	; (159c <TIMER_EVENT_init+0x3c>)
    157e:	4808      	ldr	r0, [pc, #32]	; (15a0 <TIMER_EVENT_init+0x40>)
    1580:	4b08      	ldr	r3, [pc, #32]	; (15a4 <TIMER_EVENT_init+0x44>)
    1582:	4798      	blx	r3
}
    1584:	bf00      	nop
    1586:	bd80      	pop	{r7, pc}
    1588:	40000800 	.word	0x40000800
    158c:	0000085f 	.word	0x0000085f
    1590:	40001c00 	.word	0x40001c00
    1594:	00000739 	.word	0x00000739
    1598:	000080c5 	.word	0x000080c5
    159c:	40003c00 	.word	0x40003c00
    15a0:	20000d08 	.word	0x20000d08
    15a4:	00002745 	.word	0x00002745

000015a8 <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    15a8:	b580      	push	{r7, lr}
    15aa:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    15ac:	4808      	ldr	r0, [pc, #32]	; (15d0 <TIMER_ARINC_init+0x28>)
    15ae:	4b09      	ldr	r3, [pc, #36]	; (15d4 <TIMER_ARINC_init+0x2c>)
    15b0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    15b2:	2244      	movs	r2, #68	; 0x44
    15b4:	211a      	movs	r1, #26
    15b6:	4808      	ldr	r0, [pc, #32]	; (15d8 <TIMER_ARINC_init+0x30>)
    15b8:	4b08      	ldr	r3, [pc, #32]	; (15dc <TIMER_ARINC_init+0x34>)
    15ba:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    15bc:	4b08      	ldr	r3, [pc, #32]	; (15e0 <TIMER_ARINC_init+0x38>)
    15be:	4798      	blx	r3
    15c0:	4603      	mov	r3, r0
    15c2:	461a      	mov	r2, r3
    15c4:	4907      	ldr	r1, [pc, #28]	; (15e4 <TIMER_ARINC_init+0x3c>)
    15c6:	4808      	ldr	r0, [pc, #32]	; (15e8 <TIMER_ARINC_init+0x40>)
    15c8:	4b08      	ldr	r3, [pc, #32]	; (15ec <TIMER_ARINC_init+0x44>)
    15ca:	4798      	blx	r3
}
    15cc:	bf00      	nop
    15ce:	bd80      	pop	{r7, pc}
    15d0:	40000800 	.word	0x40000800
    15d4:	000008df 	.word	0x000008df
    15d8:	40001c00 	.word	0x40001c00
    15dc:	00000739 	.word	0x00000739
    15e0:	000080c5 	.word	0x000080c5
    15e4:	4101a000 	.word	0x4101a000
    15e8:	20000d84 	.word	0x20000d84
    15ec:	00002745 	.word	0x00002745

000015f0 <TIMER_HVAC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_HVAC_init(void)
{
    15f0:	b580      	push	{r7, lr}
    15f2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC3_bit(MCLK);
    15f4:	4808      	ldr	r0, [pc, #32]	; (1618 <TIMER_HVAC_init+0x28>)
    15f6:	4b09      	ldr	r3, [pc, #36]	; (161c <TIMER_HVAC_init+0x2c>)
    15f8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC3_GCLK_ID, CONF_GCLK_TC3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    15fa:	2245      	movs	r2, #69	; 0x45
    15fc:	211a      	movs	r1, #26
    15fe:	4808      	ldr	r0, [pc, #32]	; (1620 <TIMER_HVAC_init+0x30>)
    1600:	4b08      	ldr	r3, [pc, #32]	; (1624 <TIMER_HVAC_init+0x34>)
    1602:	4798      	blx	r3

	timer_init(&TIMER_HVAC, TC3, _tc_get_timer());
    1604:	4b08      	ldr	r3, [pc, #32]	; (1628 <TIMER_HVAC_init+0x38>)
    1606:	4798      	blx	r3
    1608:	4603      	mov	r3, r0
    160a:	461a      	mov	r2, r3
    160c:	4907      	ldr	r1, [pc, #28]	; (162c <TIMER_HVAC_init+0x3c>)
    160e:	4808      	ldr	r0, [pc, #32]	; (1630 <TIMER_HVAC_init+0x40>)
    1610:	4b08      	ldr	r3, [pc, #32]	; (1634 <TIMER_HVAC_init+0x44>)
    1612:	4798      	blx	r3
}
    1614:	bf00      	nop
    1616:	bd80      	pop	{r7, pc}
    1618:	40000800 	.word	0x40000800
    161c:	000008ff 	.word	0x000008ff
    1620:	40001c00 	.word	0x40001c00
    1624:	00000739 	.word	0x00000739
    1628:	000080c5 	.word	0x000080c5
    162c:	4101c000 	.word	0x4101c000
    1630:	20000de0 	.word	0x20000de0
    1634:	00002745 	.word	0x00002745

00001638 <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    1638:	b580      	push	{r7, lr}
    163a:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB00, PINMUX_PB00E_TC7_WO0);
    163c:	4904      	ldr	r1, [pc, #16]	; (1650 <LIVE_PULSE_PORT_init+0x18>)
    163e:	2020      	movs	r0, #32
    1640:	4b04      	ldr	r3, [pc, #16]	; (1654 <LIVE_PULSE_PORT_init+0x1c>)
    1642:	4798      	blx	r3

	gpio_set_pin_function(PB01, PINMUX_PB01E_TC7_WO1);
    1644:	4904      	ldr	r1, [pc, #16]	; (1658 <LIVE_PULSE_PORT_init+0x20>)
    1646:	2021      	movs	r0, #33	; 0x21
    1648:	4b02      	ldr	r3, [pc, #8]	; (1654 <LIVE_PULSE_PORT_init+0x1c>)
    164a:	4798      	blx	r3
}
    164c:	bf00      	nop
    164e:	bd80      	pop	{r7, pc}
    1650:	00200004 	.word	0x00200004
    1654:	00000eed 	.word	0x00000eed
    1658:	00210004 	.word	0x00210004

0000165c <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    165c:	b580      	push	{r7, lr}
    165e:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    1660:	4804      	ldr	r0, [pc, #16]	; (1674 <LIVE_PULSE_CLOCK_init+0x18>)
    1662:	4b05      	ldr	r3, [pc, #20]	; (1678 <LIVE_PULSE_CLOCK_init+0x1c>)
    1664:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1666:	224b      	movs	r2, #75	; 0x4b
    1668:	2127      	movs	r1, #39	; 0x27
    166a:	4804      	ldr	r0, [pc, #16]	; (167c <LIVE_PULSE_CLOCK_init+0x20>)
    166c:	4b04      	ldr	r3, [pc, #16]	; (1680 <LIVE_PULSE_CLOCK_init+0x24>)
    166e:	4798      	blx	r3
}
    1670:	bf00      	nop
    1672:	bd80      	pop	{r7, pc}
    1674:	40000800 	.word	0x40000800
    1678:	000009bf 	.word	0x000009bf
    167c:	40001c00 	.word	0x40001c00
    1680:	00000739 	.word	0x00000739

00001684 <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    1684:	b580      	push	{r7, lr}
    1686:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    1688:	4b06      	ldr	r3, [pc, #24]	; (16a4 <LIVE_PULSE_init+0x20>)
    168a:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    168c:	4b06      	ldr	r3, [pc, #24]	; (16a8 <LIVE_PULSE_init+0x24>)
    168e:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    1690:	4b06      	ldr	r3, [pc, #24]	; (16ac <LIVE_PULSE_init+0x28>)
    1692:	4798      	blx	r3
    1694:	4603      	mov	r3, r0
    1696:	461a      	mov	r2, r3
    1698:	4905      	ldr	r1, [pc, #20]	; (16b0 <LIVE_PULSE_init+0x2c>)
    169a:	4806      	ldr	r0, [pc, #24]	; (16b4 <LIVE_PULSE_init+0x30>)
    169c:	4b06      	ldr	r3, [pc, #24]	; (16b8 <LIVE_PULSE_init+0x34>)
    169e:	4798      	blx	r3
}
    16a0:	bf00      	nop
    16a2:	bd80      	pop	{r7, pc}
    16a4:	0000165d 	.word	0x0000165d
    16a8:	00001639 	.word	0x00001639
    16ac:	000080d5 	.word	0x000080d5
    16b0:	43001800 	.word	0x43001800
    16b4:	20000d40 	.word	0x20000d40
    16b8:	00001fed 	.word	0x00001fed

000016bc <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    16bc:	b580      	push	{r7, lr}
    16be:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    16c0:	2102      	movs	r1, #2
    16c2:	2018      	movs	r0, #24
    16c4:	4b0f      	ldr	r3, [pc, #60]	; (1704 <CDCUSB_PORT_init+0x48>)
    16c6:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    16c8:	2100      	movs	r1, #0
    16ca:	2018      	movs	r0, #24
    16cc:	4b0e      	ldr	r3, [pc, #56]	; (1708 <CDCUSB_PORT_init+0x4c>)
    16ce:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    16d0:	2100      	movs	r1, #0
    16d2:	2018      	movs	r0, #24
    16d4:	4b0d      	ldr	r3, [pc, #52]	; (170c <CDCUSB_PORT_init+0x50>)
    16d6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    16d8:	490d      	ldr	r1, [pc, #52]	; (1710 <CDCUSB_PORT_init+0x54>)
    16da:	2018      	movs	r0, #24
    16dc:	4b0d      	ldr	r3, [pc, #52]	; (1714 <CDCUSB_PORT_init+0x58>)
    16de:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    16e0:	2102      	movs	r1, #2
    16e2:	2019      	movs	r0, #25
    16e4:	4b07      	ldr	r3, [pc, #28]	; (1704 <CDCUSB_PORT_init+0x48>)
    16e6:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    16e8:	2100      	movs	r1, #0
    16ea:	2019      	movs	r0, #25
    16ec:	4b06      	ldr	r3, [pc, #24]	; (1708 <CDCUSB_PORT_init+0x4c>)
    16ee:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    16f0:	2100      	movs	r1, #0
    16f2:	2019      	movs	r0, #25
    16f4:	4b05      	ldr	r3, [pc, #20]	; (170c <CDCUSB_PORT_init+0x50>)
    16f6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    16f8:	4907      	ldr	r1, [pc, #28]	; (1718 <CDCUSB_PORT_init+0x5c>)
    16fa:	2019      	movs	r0, #25
    16fc:	4b05      	ldr	r3, [pc, #20]	; (1714 <CDCUSB_PORT_init+0x58>)
    16fe:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    1700:	bf00      	nop
    1702:	bd80      	pop	{r7, pc}
    1704:	00000f0d 	.word	0x00000f0d
    1708:	00000f45 	.word	0x00000f45
    170c:	00000eb9 	.word	0x00000eb9
    1710:	00180007 	.word	0x00180007
    1714:	00000eed 	.word	0x00000eed
    1718:	00190007 	.word	0x00190007

0000171c <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    171c:	b580      	push	{r7, lr}
    171e:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    1720:	2242      	movs	r2, #66	; 0x42
    1722:	210a      	movs	r1, #10
    1724:	4805      	ldr	r0, [pc, #20]	; (173c <CDCUSB_CLOCK_init+0x20>)
    1726:	4b06      	ldr	r3, [pc, #24]	; (1740 <CDCUSB_CLOCK_init+0x24>)
    1728:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    172a:	4806      	ldr	r0, [pc, #24]	; (1744 <CDCUSB_CLOCK_init+0x28>)
    172c:	4b06      	ldr	r3, [pc, #24]	; (1748 <CDCUSB_CLOCK_init+0x2c>)
    172e:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    1730:	4804      	ldr	r0, [pc, #16]	; (1744 <CDCUSB_CLOCK_init+0x28>)
    1732:	4b06      	ldr	r3, [pc, #24]	; (174c <CDCUSB_CLOCK_init+0x30>)
    1734:	4798      	blx	r3
}
    1736:	bf00      	nop
    1738:	bd80      	pop	{r7, pc}
    173a:	bf00      	nop
    173c:	40001c00 	.word	0x40001c00
    1740:	00000739 	.word	0x00000739
    1744:	40000800 	.word	0x40000800
    1748:	0000075f 	.word	0x0000075f
    174c:	0000087f 	.word	0x0000087f

00001750 <CDCUSB_init>:

void CDCUSB_init(void)
{
    1750:	b580      	push	{r7, lr}
    1752:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    1754:	4b03      	ldr	r3, [pc, #12]	; (1764 <CDCUSB_init+0x14>)
    1756:	4798      	blx	r3
	usb_d_init();
    1758:	4b03      	ldr	r3, [pc, #12]	; (1768 <CDCUSB_init+0x18>)
    175a:	4798      	blx	r3
	CDCUSB_PORT_init();
    175c:	4b03      	ldr	r3, [pc, #12]	; (176c <CDCUSB_init+0x1c>)
    175e:	4798      	blx	r3
}
    1760:	bf00      	nop
    1762:	bd80      	pop	{r7, pc}
    1764:	0000171d 	.word	0x0000171d
    1768:	00002f55 	.word	0x00002f55
    176c:	000016bd 	.word	0x000016bd

00001770 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    1770:	b580      	push	{r7, lr}
    1772:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    1774:	4802      	ldr	r0, [pc, #8]	; (1780 <WATCHDOG_CLOCK_init+0x10>)
    1776:	4b03      	ldr	r3, [pc, #12]	; (1784 <WATCHDOG_CLOCK_init+0x14>)
    1778:	4798      	blx	r3
}
    177a:	bf00      	nop
    177c:	bd80      	pop	{r7, pc}
    177e:	bf00      	nop
    1780:	40000800 	.word	0x40000800
    1784:	000007df 	.word	0x000007df

00001788 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    1788:	b580      	push	{r7, lr}
    178a:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    178c:	4b03      	ldr	r3, [pc, #12]	; (179c <WATCHDOG_init+0x14>)
    178e:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    1790:	4903      	ldr	r1, [pc, #12]	; (17a0 <WATCHDOG_init+0x18>)
    1792:	4804      	ldr	r0, [pc, #16]	; (17a4 <WATCHDOG_init+0x1c>)
    1794:	4b04      	ldr	r3, [pc, #16]	; (17a8 <WATCHDOG_init+0x20>)
    1796:	4798      	blx	r3
}
    1798:	bf00      	nop
    179a:	bd80      	pop	{r7, pc}
    179c:	00001771 	.word	0x00001771
    17a0:	40002000 	.word	0x40002000
    17a4:	20000e5c 	.word	0x20000e5c
    17a8:	00000f8d 	.word	0x00000f8d

000017ac <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    17ac:	b580      	push	{r7, lr}
    17ae:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    17b0:	4904      	ldr	r1, [pc, #16]	; (17c4 <CAN_CCU_PORT_init+0x18>)
    17b2:	202d      	movs	r0, #45	; 0x2d
    17b4:	4b04      	ldr	r3, [pc, #16]	; (17c8 <CAN_CCU_PORT_init+0x1c>)
    17b6:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    17b8:	4904      	ldr	r1, [pc, #16]	; (17cc <CAN_CCU_PORT_init+0x20>)
    17ba:	202c      	movs	r0, #44	; 0x2c
    17bc:	4b02      	ldr	r3, [pc, #8]	; (17c8 <CAN_CCU_PORT_init+0x1c>)
    17be:	4798      	blx	r3
}
    17c0:	bf00      	nop
    17c2:	bd80      	pop	{r7, pc}
    17c4:	002d0007 	.word	0x002d0007
    17c8:	00000eed 	.word	0x00000eed
    17cc:	002c0007 	.word	0x002c0007

000017d0 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    17d0:	b580      	push	{r7, lr}
    17d2:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    17d4:	4807      	ldr	r0, [pc, #28]	; (17f4 <CAN_CCU_init+0x24>)
    17d6:	4b08      	ldr	r3, [pc, #32]	; (17f8 <CAN_CCU_init+0x28>)
    17d8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    17da:	2243      	movs	r2, #67	; 0x43
    17dc:	211c      	movs	r1, #28
    17de:	4807      	ldr	r0, [pc, #28]	; (17fc <CAN_CCU_init+0x2c>)
    17e0:	4b07      	ldr	r3, [pc, #28]	; (1800 <CAN_CCU_init+0x30>)
    17e2:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    17e4:	4907      	ldr	r1, [pc, #28]	; (1804 <CAN_CCU_init+0x34>)
    17e6:	4808      	ldr	r0, [pc, #32]	; (1808 <CAN_CCU_init+0x38>)
    17e8:	4b08      	ldr	r3, [pc, #32]	; (180c <CAN_CCU_init+0x3c>)
    17ea:	4798      	blx	r3
	CAN_CCU_PORT_init();
    17ec:	4b08      	ldr	r3, [pc, #32]	; (1810 <CAN_CCU_init+0x40>)
    17ee:	4798      	blx	r3
}
    17f0:	bf00      	nop
    17f2:	bd80      	pop	{r7, pc}
    17f4:	40000800 	.word	0x40000800
    17f8:	0000079f 	.word	0x0000079f
    17fc:	40001c00 	.word	0x40001c00
    1800:	00000739 	.word	0x00000739
    1804:	42000400 	.word	0x42000400
    1808:	20000d5c 	.word	0x20000d5c
    180c:	000019fd 	.word	0x000019fd
    1810:	000017ad 	.word	0x000017ad

00001814 <system_init>:

void system_init(void)
{
    1814:	b580      	push	{r7, lr}
    1816:	af00      	add	r7, sp, #0
	init_mcu();
    1818:	4b46      	ldr	r3, [pc, #280]	; (1934 <system_init+0x120>)
    181a:	4798      	blx	r3

	// GPIO on PB07

	// Set pin direction to input
	gpio_set_pin_direction(INT_LTC2983, GPIO_DIRECTION_IN);
    181c:	2101      	movs	r1, #1
    181e:	2027      	movs	r0, #39	; 0x27
    1820:	4b45      	ldr	r3, [pc, #276]	; (1938 <system_init+0x124>)
    1822:	4798      	blx	r3

	gpio_set_pin_pull_mode(INT_LTC2983,
    1824:	2102      	movs	r1, #2
    1826:	2027      	movs	r0, #39	; 0x27
    1828:	4b44      	ldr	r3, [pc, #272]	; (193c <system_init+0x128>)
    182a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(INT_LTC2983, GPIO_PIN_FUNCTION_OFF);
    182c:	f04f 31ff 	mov.w	r1, #4294967295
    1830:	2027      	movs	r0, #39	; 0x27
    1832:	4b43      	ldr	r3, [pc, #268]	; (1940 <system_init+0x12c>)
    1834:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_SPI_LTC,
    1836:	2101      	movs	r1, #1
    1838:	203d      	movs	r0, #61	; 0x3d
    183a:	4b42      	ldr	r3, [pc, #264]	; (1944 <system_init+0x130>)
    183c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_SPI_LTC, GPIO_DIRECTION_OUT);
    183e:	2102      	movs	r1, #2
    1840:	203d      	movs	r0, #61	; 0x3d
    1842:	4b3d      	ldr	r3, [pc, #244]	; (1938 <system_init+0x124>)
    1844:	4798      	blx	r3

	gpio_set_pin_function(CS_SPI_LTC, GPIO_PIN_FUNCTION_OFF);
    1846:	f04f 31ff 	mov.w	r1, #4294967295
    184a:	203d      	movs	r0, #61	; 0x3d
    184c:	4b3c      	ldr	r3, [pc, #240]	; (1940 <system_init+0x12c>)
    184e:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    1850:	2101      	movs	r1, #1
    1852:	203f      	movs	r0, #63	; 0x3f
    1854:	4b38      	ldr	r3, [pc, #224]	; (1938 <system_init+0x124>)
    1856:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    1858:	2101      	movs	r1, #1
    185a:	203f      	movs	r0, #63	; 0x3f
    185c:	4b37      	ldr	r3, [pc, #220]	; (193c <system_init+0x128>)
    185e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    1860:	f04f 31ff 	mov.w	r1, #4294967295
    1864:	203f      	movs	r0, #63	; 0x3f
    1866:	4b36      	ldr	r3, [pc, #216]	; (1940 <system_init+0x12c>)
    1868:	4798      	blx	r3

	// GPIO on PC00

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    186a:	2101      	movs	r1, #1
    186c:	2040      	movs	r0, #64	; 0x40
    186e:	4b32      	ldr	r3, [pc, #200]	; (1938 <system_init+0x124>)
    1870:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    1872:	2102      	movs	r1, #2
    1874:	2040      	movs	r0, #64	; 0x40
    1876:	4b31      	ldr	r3, [pc, #196]	; (193c <system_init+0x128>)
    1878:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(VBUS_DETECTED, GPIO_PIN_FUNCTION_OFF);
    187a:	f04f 31ff 	mov.w	r1, #4294967295
    187e:	2040      	movs	r0, #64	; 0x40
    1880:	4b2f      	ldr	r3, [pc, #188]	; (1940 <system_init+0x12c>)
    1882:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    1884:	2100      	movs	r1, #0
    1886:	204d      	movs	r0, #77	; 0x4d
    1888:	4b2e      	ldr	r3, [pc, #184]	; (1944 <system_init+0x130>)
    188a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    188c:	2102      	movs	r1, #2
    188e:	204d      	movs	r0, #77	; 0x4d
    1890:	4b29      	ldr	r3, [pc, #164]	; (1938 <system_init+0x124>)
    1892:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    1894:	f04f 31ff 	mov.w	r1, #4294967295
    1898:	204d      	movs	r0, #77	; 0x4d
    189a:	4b29      	ldr	r3, [pc, #164]	; (1940 <system_init+0x12c>)
    189c:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    189e:	2101      	movs	r1, #1
    18a0:	204e      	movs	r0, #78	; 0x4e
    18a2:	4b28      	ldr	r3, [pc, #160]	; (1944 <system_init+0x130>)
    18a4:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    18a6:	2102      	movs	r1, #2
    18a8:	204e      	movs	r0, #78	; 0x4e
    18aa:	4b23      	ldr	r3, [pc, #140]	; (1938 <system_init+0x124>)
    18ac:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    18ae:	f04f 31ff 	mov.w	r1, #4294967295
    18b2:	204e      	movs	r0, #78	; 0x4e
    18b4:	4b22      	ldr	r3, [pc, #136]	; (1940 <system_init+0x12c>)
    18b6:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    18b8:	2100      	movs	r1, #0
    18ba:	204f      	movs	r0, #79	; 0x4f
    18bc:	4b21      	ldr	r3, [pc, #132]	; (1944 <system_init+0x130>)
    18be:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    18c0:	2102      	movs	r1, #2
    18c2:	204f      	movs	r0, #79	; 0x4f
    18c4:	4b1c      	ldr	r3, [pc, #112]	; (1938 <system_init+0x124>)
    18c6:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    18c8:	f04f 31ff 	mov.w	r1, #4294967295
    18cc:	204f      	movs	r0, #79	; 0x4f
    18ce:	4b1c      	ldr	r3, [pc, #112]	; (1940 <system_init+0x12c>)
    18d0:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    18d2:	2100      	movs	r1, #0
    18d4:	2052      	movs	r0, #82	; 0x52
    18d6:	4b1b      	ldr	r3, [pc, #108]	; (1944 <system_init+0x130>)
    18d8:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    18da:	2102      	movs	r1, #2
    18dc:	2052      	movs	r0, #82	; 0x52
    18de:	4b16      	ldr	r3, [pc, #88]	; (1938 <system_init+0x124>)
    18e0:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    18e2:	f04f 31ff 	mov.w	r1, #4294967295
    18e6:	2052      	movs	r0, #82	; 0x52
    18e8:	4b15      	ldr	r3, [pc, #84]	; (1940 <system_init+0x12c>)
    18ea:	4798      	blx	r3

	CRC_CALC_init();
    18ec:	4b16      	ldr	r3, [pc, #88]	; (1948 <system_init+0x134>)
    18ee:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    18f0:	4b16      	ldr	r3, [pc, #88]	; (194c <system_init+0x138>)
    18f2:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    18f4:	4b16      	ldr	r3, [pc, #88]	; (1950 <system_init+0x13c>)
    18f6:	4798      	blx	r3

	QSPI_N25Q256_init();
    18f8:	4b16      	ldr	r3, [pc, #88]	; (1954 <system_init+0x140>)
    18fa:	4798      	blx	r3

	DATETIME_CLOCK_init();
    18fc:	4b16      	ldr	r3, [pc, #88]	; (1958 <system_init+0x144>)
    18fe:	4798      	blx	r3

	SPI_TEMP_init();
    1900:	4b16      	ldr	r3, [pc, #88]	; (195c <system_init+0x148>)
    1902:	4798      	blx	r3

	I2C_EXPANDER_init();
    1904:	4b16      	ldr	r3, [pc, #88]	; (1960 <system_init+0x14c>)
    1906:	4798      	blx	r3

	SPI_HI3593_init();
    1908:	4b16      	ldr	r3, [pc, #88]	; (1964 <system_init+0x150>)
    190a:	4798      	blx	r3

	I2C_EEPROM_init();
    190c:	4b16      	ldr	r3, [pc, #88]	; (1968 <system_init+0x154>)
    190e:	4798      	blx	r3

	TIMER_INTERFACE_init();
    1910:	4b16      	ldr	r3, [pc, #88]	; (196c <system_init+0x158>)
    1912:	4798      	blx	r3
	TIMER_EVENT_init();
    1914:	4b16      	ldr	r3, [pc, #88]	; (1970 <system_init+0x15c>)
    1916:	4798      	blx	r3
	TIMER_ARINC_init();
    1918:	4b16      	ldr	r3, [pc, #88]	; (1974 <system_init+0x160>)
    191a:	4798      	blx	r3
	TIMER_HVAC_init();
    191c:	4b16      	ldr	r3, [pc, #88]	; (1978 <system_init+0x164>)
    191e:	4798      	blx	r3
	LIVE_PULSE_init();
    1920:	4b16      	ldr	r3, [pc, #88]	; (197c <system_init+0x168>)
    1922:	4798      	blx	r3

	CDCUSB_init();
    1924:	4b16      	ldr	r3, [pc, #88]	; (1980 <system_init+0x16c>)
    1926:	4798      	blx	r3

	WATCHDOG_init();
    1928:	4b16      	ldr	r3, [pc, #88]	; (1984 <system_init+0x170>)
    192a:	4798      	blx	r3
	CAN_CCU_init();
    192c:	4b16      	ldr	r3, [pc, #88]	; (1988 <system_init+0x174>)
    192e:	4798      	blx	r3
}
    1930:	bf00      	nop
    1932:	bd80      	pop	{r7, pc}
    1934:	00000f7d 	.word	0x00000f7d
    1938:	00000f0d 	.word	0x00000f0d
    193c:	00000eb9 	.word	0x00000eb9
    1940:	00000eed 	.word	0x00000eed
    1944:	00000f45 	.word	0x00000f45
    1948:	00000fdd 	.word	0x00000fdd
    194c:	00001009 	.word	0x00001009
    1950:	000010ad 	.word	0x000010ad
    1954:	000011e9 	.word	0x000011e9
    1958:	0000122d 	.word	0x0000122d
    195c:	000012f1 	.word	0x000012f1
    1960:	00001389 	.word	0x00001389
    1964:	00001455 	.word	0x00001455
    1968:	000014ed 	.word	0x000014ed
    196c:	00001519 	.word	0x00001519
    1970:	00001561 	.word	0x00001561
    1974:	000015a9 	.word	0x000015a9
    1978:	000015f1 	.word	0x000015f1
    197c:	00001685 	.word	0x00001685
    1980:	00001751 	.word	0x00001751
    1984:	00001789 	.word	0x00001789
    1988:	000017d1 	.word	0x000017d1

0000198c <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    198c:	b580      	push	{r7, lr}
    198e:	b084      	sub	sp, #16
    1990:	af00      	add	r7, sp, #0
    1992:	6078      	str	r0, [r7, #4]
    1994:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    1996:	2300      	movs	r3, #0
    1998:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    199a:	687b      	ldr	r3, [r7, #4]
    199c:	2b00      	cmp	r3, #0
    199e:	bf14      	ite	ne
    19a0:	2301      	movne	r3, #1
    19a2:	2300      	moveq	r3, #0
    19a4:	b2db      	uxtb	r3, r3
    19a6:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    19aa:	4911      	ldr	r1, [pc, #68]	; (19f0 <calendar_init+0x64>)
    19ac:	4618      	mov	r0, r3
    19ae:	4b11      	ldr	r3, [pc, #68]	; (19f4 <calendar_init+0x68>)
    19b0:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    19b2:	687b      	ldr	r3, [r7, #4]
    19b4:	681a      	ldr	r2, [r3, #0]
    19b6:	683b      	ldr	r3, [r7, #0]
    19b8:	429a      	cmp	r2, r3
    19ba:	d101      	bne.n	19c0 <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    19bc:	2300      	movs	r3, #0
    19be:	e013      	b.n	19e8 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    19c0:	687b      	ldr	r3, [r7, #4]
    19c2:	681b      	ldr	r3, [r3, #0]
    19c4:	2b00      	cmp	r3, #0
    19c6:	d002      	beq.n	19ce <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    19c8:	f06f 0311 	mvn.w	r3, #17
    19cc:	e00c      	b.n	19e8 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    19ce:	687b      	ldr	r3, [r7, #4]
    19d0:	683a      	ldr	r2, [r7, #0]
    19d2:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    19d4:	687b      	ldr	r3, [r7, #4]
    19d6:	4618      	mov	r0, r3
    19d8:	4b07      	ldr	r3, [pc, #28]	; (19f8 <calendar_init+0x6c>)
    19da:	4798      	blx	r3
    19dc:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    19de:	687b      	ldr	r3, [r7, #4]
    19e0:	f240 72b2 	movw	r2, #1970	; 0x7b2
    19e4:	619a      	str	r2, [r3, #24]

	return ret;
    19e6:	68fb      	ldr	r3, [r7, #12]
}
    19e8:	4618      	mov	r0, r3
    19ea:	3710      	adds	r7, #16
    19ec:	46bd      	mov	sp, r7
    19ee:	bd80      	pop	{r7, pc}
    19f0:	0000e2e4 	.word	0x0000e2e4
    19f4:	000034fd 	.word	0x000034fd
    19f8:	00005d1d 	.word	0x00005d1d

000019fc <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    19fc:	b580      	push	{r7, lr}
    19fe:	b084      	sub	sp, #16
    1a00:	af00      	add	r7, sp, #0
    1a02:	6078      	str	r0, [r7, #4]
    1a04:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    1a06:	687b      	ldr	r3, [r7, #4]
    1a08:	2b00      	cmp	r3, #0
    1a0a:	d004      	beq.n	1a16 <can_async_init+0x1a>
    1a0c:	683b      	ldr	r3, [r7, #0]
    1a0e:	2b00      	cmp	r3, #0
    1a10:	d001      	beq.n	1a16 <can_async_init+0x1a>
    1a12:	2301      	movs	r3, #1
    1a14:	e000      	b.n	1a18 <can_async_init+0x1c>
    1a16:	2300      	movs	r3, #0
    1a18:	f003 0301 	and.w	r3, r3, #1
    1a1c:	b2db      	uxtb	r3, r3
    1a1e:	2241      	movs	r2, #65	; 0x41
    1a20:	490e      	ldr	r1, [pc, #56]	; (1a5c <can_async_init+0x60>)
    1a22:	4618      	mov	r0, r3
    1a24:	4b0e      	ldr	r3, [pc, #56]	; (1a60 <can_async_init+0x64>)
    1a26:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    1a28:	687b      	ldr	r3, [r7, #4]
    1a2a:	6839      	ldr	r1, [r7, #0]
    1a2c:	4618      	mov	r0, r3
    1a2e:	4b0d      	ldr	r3, [pc, #52]	; (1a64 <can_async_init+0x68>)
    1a30:	4798      	blx	r3
    1a32:	60f8      	str	r0, [r7, #12]
	if (rc) {
    1a34:	68fb      	ldr	r3, [r7, #12]
    1a36:	2b00      	cmp	r3, #0
    1a38:	d001      	beq.n	1a3e <can_async_init+0x42>
		return rc;
    1a3a:	68fb      	ldr	r3, [r7, #12]
    1a3c:	e009      	b.n	1a52 <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    1a3e:	687b      	ldr	r3, [r7, #4]
    1a40:	4a09      	ldr	r2, [pc, #36]	; (1a68 <can_async_init+0x6c>)
    1a42:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    1a44:	687b      	ldr	r3, [r7, #4]
    1a46:	4a09      	ldr	r2, [pc, #36]	; (1a6c <can_async_init+0x70>)
    1a48:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    1a4a:	687b      	ldr	r3, [r7, #4]
    1a4c:	4a08      	ldr	r2, [pc, #32]	; (1a70 <can_async_init+0x74>)
    1a4e:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    1a50:	2300      	movs	r3, #0
}
    1a52:	4618      	mov	r0, r3
    1a54:	3710      	adds	r7, #16
    1a56:	46bd      	mov	sp, r7
    1a58:	bd80      	pop	{r7, pc}
    1a5a:	bf00      	nop
    1a5c:	0000e300 	.word	0x0000e300
    1a60:	000034fd 	.word	0x000034fd
    1a64:	00003c65 	.word	0x00003c65
    1a68:	00001c11 	.word	0x00001c11
    1a6c:	00001c35 	.word	0x00001c35
    1a70:	00001c59 	.word	0x00001c59

00001a74 <can_async_enable>:

/**
 * \brief Enable CAN
 */
int32_t can_async_enable(struct can_async_descriptor *const descr)
{
    1a74:	b580      	push	{r7, lr}
    1a76:	b082      	sub	sp, #8
    1a78:	af00      	add	r7, sp, #0
    1a7a:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	2b00      	cmp	r3, #0
    1a80:	bf14      	ite	ne
    1a82:	2301      	movne	r3, #1
    1a84:	2300      	moveq	r3, #0
    1a86:	b2db      	uxtb	r3, r3
    1a88:	225c      	movs	r2, #92	; 0x5c
    1a8a:	4906      	ldr	r1, [pc, #24]	; (1aa4 <can_async_enable+0x30>)
    1a8c:	4618      	mov	r0, r3
    1a8e:	4b06      	ldr	r3, [pc, #24]	; (1aa8 <can_async_enable+0x34>)
    1a90:	4798      	blx	r3
	return _can_async_enable(&descr->dev);
    1a92:	687b      	ldr	r3, [r7, #4]
    1a94:	4618      	mov	r0, r3
    1a96:	4b05      	ldr	r3, [pc, #20]	; (1aac <can_async_enable+0x38>)
    1a98:	4798      	blx	r3
    1a9a:	4603      	mov	r3, r0
}
    1a9c:	4618      	mov	r0, r3
    1a9e:	3708      	adds	r7, #8
    1aa0:	46bd      	mov	sp, r7
    1aa2:	bd80      	pop	{r7, pc}
    1aa4:	0000e300 	.word	0x0000e300
    1aa8:	000034fd 	.word	0x000034fd
    1aac:	00003e51 	.word	0x00003e51

00001ab0 <can_async_read>:

/**
 * \brief Read a CAN message
 */
int32_t can_async_read(struct can_async_descriptor *const descr, struct can_message *msg)
{
    1ab0:	b580      	push	{r7, lr}
    1ab2:	b082      	sub	sp, #8
    1ab4:	af00      	add	r7, sp, #0
    1ab6:	6078      	str	r0, [r7, #4]
    1ab8:	6039      	str	r1, [r7, #0]
	ASSERT(descr && msg);
    1aba:	687b      	ldr	r3, [r7, #4]
    1abc:	2b00      	cmp	r3, #0
    1abe:	d004      	beq.n	1aca <can_async_read+0x1a>
    1ac0:	683b      	ldr	r3, [r7, #0]
    1ac2:	2b00      	cmp	r3, #0
    1ac4:	d001      	beq.n	1aca <can_async_read+0x1a>
    1ac6:	2301      	movs	r3, #1
    1ac8:	e000      	b.n	1acc <can_async_read+0x1c>
    1aca:	2300      	movs	r3, #0
    1acc:	f003 0301 	and.w	r3, r3, #1
    1ad0:	b2db      	uxtb	r3, r3
    1ad2:	226e      	movs	r2, #110	; 0x6e
    1ad4:	4906      	ldr	r1, [pc, #24]	; (1af0 <can_async_read+0x40>)
    1ad6:	4618      	mov	r0, r3
    1ad8:	4b06      	ldr	r3, [pc, #24]	; (1af4 <can_async_read+0x44>)
    1ada:	4798      	blx	r3
	return _can_async_read(&descr->dev, msg);
    1adc:	687b      	ldr	r3, [r7, #4]
    1ade:	6839      	ldr	r1, [r7, #0]
    1ae0:	4618      	mov	r0, r3
    1ae2:	4b05      	ldr	r3, [pc, #20]	; (1af8 <can_async_read+0x48>)
    1ae4:	4798      	blx	r3
    1ae6:	4603      	mov	r3, r0
}
    1ae8:	4618      	mov	r0, r3
    1aea:	3708      	adds	r7, #8
    1aec:	46bd      	mov	sp, r7
    1aee:	bd80      	pop	{r7, pc}
    1af0:	0000e300 	.word	0x0000e300
    1af4:	000034fd 	.word	0x000034fd
    1af8:	00003e71 	.word	0x00003e71

00001afc <can_async_write>:

/**
 * \brief Write a CAN message
 */
int32_t can_async_write(struct can_async_descriptor *const descr, struct can_message *msg)
{
    1afc:	b580      	push	{r7, lr}
    1afe:	b082      	sub	sp, #8
    1b00:	af00      	add	r7, sp, #0
    1b02:	6078      	str	r0, [r7, #4]
    1b04:	6039      	str	r1, [r7, #0]
	ASSERT(descr && msg);
    1b06:	687b      	ldr	r3, [r7, #4]
    1b08:	2b00      	cmp	r3, #0
    1b0a:	d004      	beq.n	1b16 <can_async_write+0x1a>
    1b0c:	683b      	ldr	r3, [r7, #0]
    1b0e:	2b00      	cmp	r3, #0
    1b10:	d001      	beq.n	1b16 <can_async_write+0x1a>
    1b12:	2301      	movs	r3, #1
    1b14:	e000      	b.n	1b18 <can_async_write+0x1c>
    1b16:	2300      	movs	r3, #0
    1b18:	f003 0301 	and.w	r3, r3, #1
    1b1c:	b2db      	uxtb	r3, r3
    1b1e:	2277      	movs	r2, #119	; 0x77
    1b20:	4906      	ldr	r1, [pc, #24]	; (1b3c <can_async_write+0x40>)
    1b22:	4618      	mov	r0, r3
    1b24:	4b06      	ldr	r3, [pc, #24]	; (1b40 <can_async_write+0x44>)
    1b26:	4798      	blx	r3
	return _can_async_write(&descr->dev, msg);
    1b28:	687b      	ldr	r3, [r7, #4]
    1b2a:	6839      	ldr	r1, [r7, #0]
    1b2c:	4618      	mov	r0, r3
    1b2e:	4b05      	ldr	r3, [pc, #20]	; (1b44 <can_async_write+0x48>)
    1b30:	4798      	blx	r3
    1b32:	4603      	mov	r3, r0
}
    1b34:	4618      	mov	r0, r3
    1b36:	3708      	adds	r7, #8
    1b38:	46bd      	mov	sp, r7
    1b3a:	bd80      	pop	{r7, pc}
    1b3c:	0000e300 	.word	0x0000e300
    1b40:	000034fd 	.word	0x000034fd
    1b44:	00003f81 	.word	0x00003f81

00001b48 <can_async_register_callback>:
/**
 * \brief Register CAN callback function to interrupt
 */
int32_t can_async_register_callback(struct can_async_descriptor *const descr, enum can_async_callback_type type,
                                    FUNC_PTR cb)
{
    1b48:	b580      	push	{r7, lr}
    1b4a:	b084      	sub	sp, #16
    1b4c:	af00      	add	r7, sp, #0
    1b4e:	60f8      	str	r0, [r7, #12]
    1b50:	460b      	mov	r3, r1
    1b52:	607a      	str	r2, [r7, #4]
    1b54:	72fb      	strb	r3, [r7, #11]
	ASSERT(descr);
    1b56:	68fb      	ldr	r3, [r7, #12]
    1b58:	2b00      	cmp	r3, #0
    1b5a:	bf14      	ite	ne
    1b5c:	2301      	movne	r3, #1
    1b5e:	2300      	moveq	r3, #0
    1b60:	b2db      	uxtb	r3, r3
    1b62:	2281      	movs	r2, #129	; 0x81
    1b64:	4914      	ldr	r1, [pc, #80]	; (1bb8 <can_async_register_callback+0x70>)
    1b66:	4618      	mov	r0, r3
    1b68:	4b14      	ldr	r3, [pc, #80]	; (1bbc <can_async_register_callback+0x74>)
    1b6a:	4798      	blx	r3

	switch (type) {
    1b6c:	7afb      	ldrb	r3, [r7, #11]
    1b6e:	2b01      	cmp	r3, #1
    1b70:	d007      	beq.n	1b82 <can_async_register_callback+0x3a>
    1b72:	2b02      	cmp	r3, #2
    1b74:	d009      	beq.n	1b8a <can_async_register_callback+0x42>
    1b76:	2b00      	cmp	r3, #0
    1b78:	d10b      	bne.n	1b92 <can_async_register_callback+0x4a>
	case CAN_ASYNC_RX_CB:
		descr->cb.rx_done = (cb != NULL) ? (can_cb_t)cb : NULL;
    1b7a:	68fb      	ldr	r3, [r7, #12]
    1b7c:	687a      	ldr	r2, [r7, #4]
    1b7e:	621a      	str	r2, [r3, #32]
		break;
    1b80:	e00a      	b.n	1b98 <can_async_register_callback+0x50>
	case CAN_ASYNC_TX_CB:
		descr->cb.tx_done = (cb != NULL) ? (can_cb_t)cb : NULL;
    1b82:	68fb      	ldr	r3, [r7, #12]
    1b84:	687a      	ldr	r2, [r7, #4]
    1b86:	61da      	str	r2, [r3, #28]
		break;
    1b88:	e006      	b.n	1b98 <can_async_register_callback+0x50>
	case CAN_ASYNC_IRQ_CB:
		descr->cb.irq_handler
		    = (cb != NULL) ? (void (*)(struct can_async_descriptor *const, enum can_async_interrupt_type))cb : NULL;
    1b8a:	68fb      	ldr	r3, [r7, #12]
    1b8c:	687a      	ldr	r2, [r7, #4]
    1b8e:	625a      	str	r2, [r3, #36]	; 0x24
		break;
    1b90:	e002      	b.n	1b98 <can_async_register_callback+0x50>
	default:
		return ERR_INVALID_ARG;
    1b92:	f06f 030c 	mvn.w	r3, #12
    1b96:	e00b      	b.n	1bb0 <can_async_register_callback+0x68>
	}

	_can_async_set_irq_state(&descr->dev, type, NULL != cb);
    1b98:	68f8      	ldr	r0, [r7, #12]
    1b9a:	687b      	ldr	r3, [r7, #4]
    1b9c:	2b00      	cmp	r3, #0
    1b9e:	bf14      	ite	ne
    1ba0:	2301      	movne	r3, #1
    1ba2:	2300      	moveq	r3, #0
    1ba4:	b2da      	uxtb	r2, r3
    1ba6:	7afb      	ldrb	r3, [r7, #11]
    1ba8:	4619      	mov	r1, r3
    1baa:	4b05      	ldr	r3, [pc, #20]	; (1bc0 <can_async_register_callback+0x78>)
    1bac:	4798      	blx	r3

	return ERR_NONE;
    1bae:	2300      	movs	r3, #0
}
    1bb0:	4618      	mov	r0, r3
    1bb2:	3710      	adds	r7, #16
    1bb4:	46bd      	mov	sp, r7
    1bb6:	bd80      	pop	{r7, pc}
    1bb8:	0000e300 	.word	0x0000e300
    1bbc:	000034fd 	.word	0x000034fd
    1bc0:	0000413d 	.word	0x0000413d

00001bc4 <can_async_set_filter>:
/**
 * \brief Set CAN filter
 */
int32_t can_async_set_filter(struct can_async_descriptor *const descr, uint8_t index, enum can_format fmt,
                             struct can_filter *filter)
{
    1bc4:	b590      	push	{r4, r7, lr}
    1bc6:	b085      	sub	sp, #20
    1bc8:	af00      	add	r7, sp, #0
    1bca:	60f8      	str	r0, [r7, #12]
    1bcc:	607b      	str	r3, [r7, #4]
    1bce:	460b      	mov	r3, r1
    1bd0:	72fb      	strb	r3, [r7, #11]
    1bd2:	4613      	mov	r3, r2
    1bd4:	72bb      	strb	r3, [r7, #10]
	ASSERT(descr);
    1bd6:	68fb      	ldr	r3, [r7, #12]
    1bd8:	2b00      	cmp	r3, #0
    1bda:	bf14      	ite	ne
    1bdc:	2301      	movne	r3, #1
    1bde:	2300      	moveq	r3, #0
    1be0:	b2db      	uxtb	r3, r3
    1be2:	22b8      	movs	r2, #184	; 0xb8
    1be4:	4907      	ldr	r1, [pc, #28]	; (1c04 <can_async_set_filter+0x40>)
    1be6:	4618      	mov	r0, r3
    1be8:	4b07      	ldr	r3, [pc, #28]	; (1c08 <can_async_set_filter+0x44>)
    1bea:	4798      	blx	r3
	return _can_async_set_filter(&descr->dev, index, fmt, filter);
    1bec:	68f8      	ldr	r0, [r7, #12]
    1bee:	7aba      	ldrb	r2, [r7, #10]
    1bf0:	7af9      	ldrb	r1, [r7, #11]
    1bf2:	687b      	ldr	r3, [r7, #4]
    1bf4:	4c05      	ldr	r4, [pc, #20]	; (1c0c <can_async_set_filter+0x48>)
    1bf6:	47a0      	blx	r4
    1bf8:	4603      	mov	r3, r0
}
    1bfa:	4618      	mov	r0, r3
    1bfc:	3714      	adds	r7, #20
    1bfe:	46bd      	mov	sp, r7
    1c00:	bd90      	pop	{r4, r7, pc}
    1c02:	bf00      	nop
    1c04:	0000e300 	.word	0x0000e300
    1c08:	000034fd 	.word	0x000034fd
    1c0c:	000041c9 	.word	0x000041c9

00001c10 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    1c10:	b580      	push	{r7, lr}
    1c12:	b084      	sub	sp, #16
    1c14:	af00      	add	r7, sp, #0
    1c16:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    1c18:	687b      	ldr	r3, [r7, #4]
    1c1a:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    1c1c:	68fb      	ldr	r3, [r7, #12]
    1c1e:	69db      	ldr	r3, [r3, #28]
    1c20:	2b00      	cmp	r3, #0
    1c22:	d003      	beq.n	1c2c <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    1c24:	68fb      	ldr	r3, [r7, #12]
    1c26:	69db      	ldr	r3, [r3, #28]
    1c28:	68f8      	ldr	r0, [r7, #12]
    1c2a:	4798      	blx	r3
	}
}
    1c2c:	bf00      	nop
    1c2e:	3710      	adds	r7, #16
    1c30:	46bd      	mov	sp, r7
    1c32:	bd80      	pop	{r7, pc}

00001c34 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    1c34:	b580      	push	{r7, lr}
    1c36:	b084      	sub	sp, #16
    1c38:	af00      	add	r7, sp, #0
    1c3a:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    1c3c:	687b      	ldr	r3, [r7, #4]
    1c3e:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    1c40:	68fb      	ldr	r3, [r7, #12]
    1c42:	6a1b      	ldr	r3, [r3, #32]
    1c44:	2b00      	cmp	r3, #0
    1c46:	d003      	beq.n	1c50 <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    1c48:	68fb      	ldr	r3, [r7, #12]
    1c4a:	6a1b      	ldr	r3, [r3, #32]
    1c4c:	68f8      	ldr	r0, [r7, #12]
    1c4e:	4798      	blx	r3
	}
}
    1c50:	bf00      	nop
    1c52:	3710      	adds	r7, #16
    1c54:	46bd      	mov	sp, r7
    1c56:	bd80      	pop	{r7, pc}

00001c58 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    1c58:	b580      	push	{r7, lr}
    1c5a:	b084      	sub	sp, #16
    1c5c:	af00      	add	r7, sp, #0
    1c5e:	6078      	str	r0, [r7, #4]
    1c60:	460b      	mov	r3, r1
    1c62:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    1c64:	687b      	ldr	r3, [r7, #4]
    1c66:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    1c68:	68fb      	ldr	r3, [r7, #12]
    1c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1c6c:	2b00      	cmp	r3, #0
    1c6e:	d005      	beq.n	1c7c <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    1c70:	68fb      	ldr	r3, [r7, #12]
    1c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1c74:	78fa      	ldrb	r2, [r7, #3]
    1c76:	4611      	mov	r1, r2
    1c78:	68f8      	ldr	r0, [r7, #12]
    1c7a:	4798      	blx	r3
	}
}
    1c7c:	bf00      	nop
    1c7e:	3710      	adds	r7, #16
    1c80:	46bd      	mov	sp, r7
    1c82:	bd80      	pop	{r7, pc}

00001c84 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    1c84:	b580      	push	{r7, lr}
    1c86:	b082      	sub	sp, #8
    1c88:	af00      	add	r7, sp, #0
    1c8a:	6078      	str	r0, [r7, #4]
    1c8c:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    1c8e:	687b      	ldr	r3, [r7, #4]
    1c90:	2b00      	cmp	r3, #0
    1c92:	d004      	beq.n	1c9e <crc_sync_init+0x1a>
    1c94:	683b      	ldr	r3, [r7, #0]
    1c96:	2b00      	cmp	r3, #0
    1c98:	d001      	beq.n	1c9e <crc_sync_init+0x1a>
    1c9a:	2301      	movs	r3, #1
    1c9c:	e000      	b.n	1ca0 <crc_sync_init+0x1c>
    1c9e:	2300      	movs	r3, #0
    1ca0:	f003 0301 	and.w	r3, r3, #1
    1ca4:	b2db      	uxtb	r3, r3
    1ca6:	222b      	movs	r2, #43	; 0x2b
    1ca8:	4906      	ldr	r1, [pc, #24]	; (1cc4 <crc_sync_init+0x40>)
    1caa:	4618      	mov	r0, r3
    1cac:	4b06      	ldr	r3, [pc, #24]	; (1cc8 <crc_sync_init+0x44>)
    1cae:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    1cb0:	687b      	ldr	r3, [r7, #4]
    1cb2:	6839      	ldr	r1, [r7, #0]
    1cb4:	4618      	mov	r0, r3
    1cb6:	4b05      	ldr	r3, [pc, #20]	; (1ccc <crc_sync_init+0x48>)
    1cb8:	4798      	blx	r3
    1cba:	4603      	mov	r3, r0
}
    1cbc:	4618      	mov	r0, r3
    1cbe:	3708      	adds	r7, #8
    1cc0:	46bd      	mov	sp, r7
    1cc2:	bd80      	pop	{r7, pc}
    1cc4:	0000e31c 	.word	0x0000e31c
    1cc8:	000034fd 	.word	0x000034fd
    1ccc:	000047a5 	.word	0x000047a5

00001cd0 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    1cd0:	b590      	push	{r4, r7, lr}
    1cd2:	b083      	sub	sp, #12
    1cd4:	af00      	add	r7, sp, #0
    1cd6:	4603      	mov	r3, r0
    1cd8:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    1cda:	4b07      	ldr	r3, [pc, #28]	; (1cf8 <delay_us+0x28>)
    1cdc:	681c      	ldr	r4, [r3, #0]
    1cde:	88fb      	ldrh	r3, [r7, #6]
    1ce0:	4618      	mov	r0, r3
    1ce2:	4b06      	ldr	r3, [pc, #24]	; (1cfc <delay_us+0x2c>)
    1ce4:	4798      	blx	r3
    1ce6:	4603      	mov	r3, r0
    1ce8:	4619      	mov	r1, r3
    1cea:	4620      	mov	r0, r4
    1cec:	4b04      	ldr	r3, [pc, #16]	; (1d00 <delay_us+0x30>)
    1cee:	4798      	blx	r3
}
    1cf0:	bf00      	nop
    1cf2:	370c      	adds	r7, #12
    1cf4:	46bd      	mov	sp, r7
    1cf6:	bd90      	pop	{r4, r7, pc}
    1cf8:	20000670 	.word	0x20000670
    1cfc:	000044fd 	.word	0x000044fd
    1d00:	00004691 	.word	0x00004691

00001d04 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    1d04:	b590      	push	{r4, r7, lr}
    1d06:	b083      	sub	sp, #12
    1d08:	af00      	add	r7, sp, #0
    1d0a:	4603      	mov	r3, r0
    1d0c:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    1d0e:	4b07      	ldr	r3, [pc, #28]	; (1d2c <delay_ms+0x28>)
    1d10:	681c      	ldr	r4, [r3, #0]
    1d12:	88fb      	ldrh	r3, [r7, #6]
    1d14:	4618      	mov	r0, r3
    1d16:	4b06      	ldr	r3, [pc, #24]	; (1d30 <delay_ms+0x2c>)
    1d18:	4798      	blx	r3
    1d1a:	4603      	mov	r3, r0
    1d1c:	4619      	mov	r1, r3
    1d1e:	4620      	mov	r0, r4
    1d20:	4b04      	ldr	r3, [pc, #16]	; (1d34 <delay_ms+0x30>)
    1d22:	4798      	blx	r3
}
    1d24:	bf00      	nop
    1d26:	370c      	adds	r7, #12
    1d28:	46bd      	mov	sp, r7
    1d2a:	bd90      	pop	{r4, r7, pc}
    1d2c:	20000670 	.word	0x20000670
    1d30:	00004669 	.word	0x00004669
    1d34:	00004691 	.word	0x00004691

00001d38 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    1d38:	b580      	push	{r7, lr}
    1d3a:	af00      	add	r7, sp, #0
	return _event_system_init();
    1d3c:	4b02      	ldr	r3, [pc, #8]	; (1d48 <event_system_init+0x10>)
    1d3e:	4798      	blx	r3
    1d40:	4603      	mov	r3, r0
}
    1d42:	4618      	mov	r0, r3
    1d44:	bd80      	pop	{r7, pc}
    1d46:	bf00      	nop
    1d48:	00004dd9 	.word	0x00004dd9

00001d4c <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    1d4c:	b580      	push	{r7, lr}
    1d4e:	b082      	sub	sp, #8
    1d50:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1d52:	2300      	movs	r3, #0
    1d54:	80fb      	strh	r3, [r7, #6]
    1d56:	e00e      	b.n	1d76 <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    1d58:	88fb      	ldrh	r3, [r7, #6]
    1d5a:	4a0c      	ldr	r2, [pc, #48]	; (1d8c <ext_irq_init+0x40>)
    1d5c:	00db      	lsls	r3, r3, #3
    1d5e:	4413      	add	r3, r2
    1d60:	f04f 32ff 	mov.w	r2, #4294967295
    1d64:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    1d66:	88fb      	ldrh	r3, [r7, #6]
    1d68:	4a08      	ldr	r2, [pc, #32]	; (1d8c <ext_irq_init+0x40>)
    1d6a:	2100      	movs	r1, #0
    1d6c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1d70:	88fb      	ldrh	r3, [r7, #6]
    1d72:	3301      	adds	r3, #1
    1d74:	80fb      	strh	r3, [r7, #6]
    1d76:	88fb      	ldrh	r3, [r7, #6]
    1d78:	2b03      	cmp	r3, #3
    1d7a:	d9ed      	bls.n	1d58 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    1d7c:	4804      	ldr	r0, [pc, #16]	; (1d90 <ext_irq_init+0x44>)
    1d7e:	4b05      	ldr	r3, [pc, #20]	; (1d94 <ext_irq_init+0x48>)
    1d80:	4798      	blx	r3
    1d82:	4603      	mov	r3, r0
}
    1d84:	4618      	mov	r0, r3
    1d86:	3708      	adds	r7, #8
    1d88:	46bd      	mov	sp, r7
    1d8a:	bd80      	pop	{r7, pc}
    1d8c:	20000674 	.word	0x20000674
    1d90:	00001d99 	.word	0x00001d99
    1d94:	00004aad 	.word	0x00004aad

00001d98 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    1d98:	b580      	push	{r7, lr}
    1d9a:	b084      	sub	sp, #16
    1d9c:	af00      	add	r7, sp, #0
    1d9e:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    1da0:	2300      	movs	r3, #0
    1da2:	73fb      	strb	r3, [r7, #15]
    1da4:	2304      	movs	r3, #4
    1da6:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    1da8:	e02a      	b.n	1e00 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    1daa:	7bba      	ldrb	r2, [r7, #14]
    1dac:	7bfb      	ldrb	r3, [r7, #15]
    1dae:	4413      	add	r3, r2
    1db0:	105b      	asrs	r3, r3, #1
    1db2:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    1db4:	7b7b      	ldrb	r3, [r7, #13]
    1db6:	2b03      	cmp	r3, #3
    1db8:	d827      	bhi.n	1e0a <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    1dba:	7b7b      	ldrb	r3, [r7, #13]
    1dbc:	4a16      	ldr	r2, [pc, #88]	; (1e18 <process_ext_irq+0x80>)
    1dbe:	00db      	lsls	r3, r3, #3
    1dc0:	4413      	add	r3, r2
    1dc2:	685a      	ldr	r2, [r3, #4]
    1dc4:	687b      	ldr	r3, [r7, #4]
    1dc6:	429a      	cmp	r2, r3
    1dc8:	d10b      	bne.n	1de2 <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    1dca:	7b7b      	ldrb	r3, [r7, #13]
    1dcc:	4a12      	ldr	r2, [pc, #72]	; (1e18 <process_ext_irq+0x80>)
    1dce:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1dd2:	2b00      	cmp	r3, #0
    1dd4:	d01b      	beq.n	1e0e <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    1dd6:	7b7b      	ldrb	r3, [r7, #13]
    1dd8:	4a0f      	ldr	r2, [pc, #60]	; (1e18 <process_ext_irq+0x80>)
    1dda:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1dde:	4798      	blx	r3
			}
			return;
    1de0:	e015      	b.n	1e0e <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    1de2:	7b7b      	ldrb	r3, [r7, #13]
    1de4:	4a0c      	ldr	r2, [pc, #48]	; (1e18 <process_ext_irq+0x80>)
    1de6:	00db      	lsls	r3, r3, #3
    1de8:	4413      	add	r3, r2
    1dea:	685a      	ldr	r2, [r3, #4]
    1dec:	687b      	ldr	r3, [r7, #4]
    1dee:	429a      	cmp	r2, r3
    1df0:	d203      	bcs.n	1dfa <process_ext_irq+0x62>
			lower = middle + 1;
    1df2:	7b7b      	ldrb	r3, [r7, #13]
    1df4:	3301      	adds	r3, #1
    1df6:	73fb      	strb	r3, [r7, #15]
    1df8:	e002      	b.n	1e00 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    1dfa:	7b7b      	ldrb	r3, [r7, #13]
    1dfc:	3b01      	subs	r3, #1
    1dfe:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    1e00:	7bba      	ldrb	r2, [r7, #14]
    1e02:	7bfb      	ldrb	r3, [r7, #15]
    1e04:	429a      	cmp	r2, r3
    1e06:	d2d0      	bcs.n	1daa <process_ext_irq+0x12>
    1e08:	e002      	b.n	1e10 <process_ext_irq+0x78>
			return;
    1e0a:	bf00      	nop
    1e0c:	e000      	b.n	1e10 <process_ext_irq+0x78>
			return;
    1e0e:	bf00      	nop
		}
	}
}
    1e10:	3710      	adds	r7, #16
    1e12:	46bd      	mov	sp, r7
    1e14:	bd80      	pop	{r7, pc}
    1e16:	bf00      	nop
    1e18:	20000674 	.word	0x20000674

00001e1c <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    1e1c:	b580      	push	{r7, lr}
    1e1e:	b084      	sub	sp, #16
    1e20:	af00      	add	r7, sp, #0
    1e22:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    1e24:	687b      	ldr	r3, [r7, #4]
    1e26:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    1e28:	687b      	ldr	r3, [r7, #4]
    1e2a:	885b      	ldrh	r3, [r3, #2]
    1e2c:	b29b      	uxth	r3, r3
    1e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
    1e32:	2b00      	cmp	r3, #0
    1e34:	d107      	bne.n	1e46 <i2c_tx_complete+0x2a>
		if (i2c->i2c_cb.tx_complete) {
    1e36:	68fb      	ldr	r3, [r7, #12]
    1e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1e3a:	2b00      	cmp	r3, #0
    1e3c:	d003      	beq.n	1e46 <i2c_tx_complete+0x2a>
			i2c->i2c_cb.tx_complete(i2c);
    1e3e:	68fb      	ldr	r3, [r7, #12]
    1e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1e42:	68f8      	ldr	r0, [r7, #12]
    1e44:	4798      	blx	r3
		}
	}
}
    1e46:	bf00      	nop
    1e48:	3710      	adds	r7, #16
    1e4a:	46bd      	mov	sp, r7
    1e4c:	bd80      	pop	{r7, pc}

00001e4e <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    1e4e:	b580      	push	{r7, lr}
    1e50:	b084      	sub	sp, #16
    1e52:	af00      	add	r7, sp, #0
    1e54:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    1e56:	687b      	ldr	r3, [r7, #4]
    1e58:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    1e5a:	687b      	ldr	r3, [r7, #4]
    1e5c:	885b      	ldrh	r3, [r3, #2]
    1e5e:	b29b      	uxth	r3, r3
    1e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
    1e64:	2b00      	cmp	r3, #0
    1e66:	d107      	bne.n	1e78 <i2c_rx_complete+0x2a>
		if (i2c->i2c_cb.rx_complete) {
    1e68:	68fb      	ldr	r3, [r7, #12]
    1e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1e6c:	2b00      	cmp	r3, #0
    1e6e:	d003      	beq.n	1e78 <i2c_rx_complete+0x2a>
			i2c->i2c_cb.rx_complete(i2c);
    1e70:	68fb      	ldr	r3, [r7, #12]
    1e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1e74:	68f8      	ldr	r0, [r7, #12]
    1e76:	4798      	blx	r3
		}
	}
}
    1e78:	bf00      	nop
    1e7a:	3710      	adds	r7, #16
    1e7c:	46bd      	mov	sp, r7
    1e7e:	bd80      	pop	{r7, pc}

00001e80 <i2c_error>:

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    1e80:	b580      	push	{r7, lr}
    1e82:	b084      	sub	sp, #16
    1e84:	af00      	add	r7, sp, #0
    1e86:	6078      	str	r0, [r7, #4]
    1e88:	6039      	str	r1, [r7, #0]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    1e8a:	687b      	ldr	r3, [r7, #4]
    1e8c:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    1e8e:	687b      	ldr	r3, [r7, #4]
    1e90:	885b      	ldrh	r3, [r3, #2]
    1e92:	b29b      	uxth	r3, r3
    1e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
    1e98:	2b00      	cmp	r3, #0
    1e9a:	d108      	bne.n	1eae <i2c_error+0x2e>
		if (i2c->i2c_cb.error) {
    1e9c:	68fb      	ldr	r3, [r7, #12]
    1e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1ea0:	2b00      	cmp	r3, #0
    1ea2:	d004      	beq.n	1eae <i2c_error+0x2e>
			i2c->i2c_cb.error(i2c, error);
    1ea4:	68fb      	ldr	r3, [r7, #12]
    1ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1ea8:	6839      	ldr	r1, [r7, #0]
    1eaa:	68f8      	ldr	r0, [r7, #12]
    1eac:	4798      	blx	r3
		}
	}
}
    1eae:	bf00      	nop
    1eb0:	3710      	adds	r7, #16
    1eb2:	46bd      	mov	sp, r7
    1eb4:	bd80      	pop	{r7, pc}
	...

00001eb8 <i2c_m_async_read>:

/**
 * \brief Async version of I2C I/O read
 */
static int32_t i2c_m_async_read(struct io_descriptor *const io, uint8_t *buf, const uint16_t n)
{
    1eb8:	b580      	push	{r7, lr}
    1eba:	b08a      	sub	sp, #40	; 0x28
    1ebc:	af00      	add	r7, sp, #0
    1ebe:	60f8      	str	r0, [r7, #12]
    1ec0:	60b9      	str	r1, [r7, #8]
    1ec2:	4613      	mov	r3, r2
    1ec4:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    1ec6:	68fb      	ldr	r3, [r7, #12]
    1ec8:	3b28      	subs	r3, #40	; 0x28
    1eca:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    1ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1ece:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    1ed0:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    1ed2:	88fb      	ldrh	r3, [r7, #6]
    1ed4:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    1ed6:	f248 0301 	movw	r3, #32769	; 0x8001
    1eda:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    1edc:	68bb      	ldr	r3, [r7, #8]
    1ede:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    1ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1ee2:	f107 0214 	add.w	r2, r7, #20
    1ee6:	4611      	mov	r1, r2
    1ee8:	4618      	mov	r0, r3
    1eea:	4b06      	ldr	r3, [pc, #24]	; (1f04 <i2c_m_async_read+0x4c>)
    1eec:	4798      	blx	r3
    1eee:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    1ef0:	6a3b      	ldr	r3, [r7, #32]
    1ef2:	2b00      	cmp	r3, #0
    1ef4:	d001      	beq.n	1efa <i2c_m_async_read+0x42>
		/* error occurred */
		return ret;
    1ef6:	6a3b      	ldr	r3, [r7, #32]
    1ef8:	e000      	b.n	1efc <i2c_m_async_read+0x44>
	}

	return (int32_t)n;
    1efa:	88fb      	ldrh	r3, [r7, #6]
}
    1efc:	4618      	mov	r0, r3
    1efe:	3728      	adds	r7, #40	; 0x28
    1f00:	46bd      	mov	sp, r7
    1f02:	bd80      	pop	{r7, pc}
    1f04:	00006bc5 	.word	0x00006bc5

00001f08 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    1f08:	b580      	push	{r7, lr}
    1f0a:	b08a      	sub	sp, #40	; 0x28
    1f0c:	af00      	add	r7, sp, #0
    1f0e:	60f8      	str	r0, [r7, #12]
    1f10:	60b9      	str	r1, [r7, #8]
    1f12:	4613      	mov	r3, r2
    1f14:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    1f16:	68fb      	ldr	r3, [r7, #12]
    1f18:	3b28      	subs	r3, #40	; 0x28
    1f1a:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    1f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1f1e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    1f20:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    1f22:	88fb      	ldrh	r3, [r7, #6]
    1f24:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    1f26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    1f2a:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    1f2c:	68bb      	ldr	r3, [r7, #8]
    1f2e:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    1f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1f32:	f107 0214 	add.w	r2, r7, #20
    1f36:	4611      	mov	r1, r2
    1f38:	4618      	mov	r0, r3
    1f3a:	4b06      	ldr	r3, [pc, #24]	; (1f54 <i2c_m_async_write+0x4c>)
    1f3c:	4798      	blx	r3
    1f3e:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    1f40:	6a3b      	ldr	r3, [r7, #32]
    1f42:	2b00      	cmp	r3, #0
    1f44:	d001      	beq.n	1f4a <i2c_m_async_write+0x42>
		/* error occurred */
		return ret;
    1f46:	6a3b      	ldr	r3, [r7, #32]
    1f48:	e000      	b.n	1f4c <i2c_m_async_write+0x44>
	}

	return (int32_t)n;
    1f4a:	88fb      	ldrh	r3, [r7, #6]
}
    1f4c:	4618      	mov	r0, r3
    1f4e:	3728      	adds	r7, #40	; 0x28
    1f50:	46bd      	mov	sp, r7
    1f52:	bd80      	pop	{r7, pc}
    1f54:	00006bc5 	.word	0x00006bc5

00001f58 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    1f58:	b580      	push	{r7, lr}
    1f5a:	b084      	sub	sp, #16
    1f5c:	af00      	add	r7, sp, #0
    1f5e:	6078      	str	r0, [r7, #4]
    1f60:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    1f62:	687b      	ldr	r3, [r7, #4]
    1f64:	2b00      	cmp	r3, #0
    1f66:	bf14      	ite	ne
    1f68:	2301      	movne	r3, #1
    1f6a:	2300      	moveq	r3, #0
    1f6c:	b2db      	uxtb	r3, r3
    1f6e:	2289      	movs	r2, #137	; 0x89
    1f70:	4915      	ldr	r1, [pc, #84]	; (1fc8 <i2c_m_async_init+0x70>)
    1f72:	4618      	mov	r0, r3
    1f74:	4b15      	ldr	r3, [pc, #84]	; (1fcc <i2c_m_async_init+0x74>)
    1f76:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    1f78:	687b      	ldr	r3, [r7, #4]
    1f7a:	6839      	ldr	r1, [r7, #0]
    1f7c:	4618      	mov	r0, r3
    1f7e:	4b14      	ldr	r3, [pc, #80]	; (1fd0 <i2c_m_async_init+0x78>)
    1f80:	4798      	blx	r3
    1f82:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    1f84:	68fb      	ldr	r3, [r7, #12]
    1f86:	2b00      	cmp	r3, #0
    1f88:	d001      	beq.n	1f8e <i2c_m_async_init+0x36>
		return init_status;
    1f8a:	68fb      	ldr	r3, [r7, #12]
    1f8c:	e018      	b.n	1fc0 <i2c_m_async_init+0x68>
	}
	/* Init I/O */
	i2c->io.read  = i2c_m_async_read;
    1f8e:	687b      	ldr	r3, [r7, #4]
    1f90:	4a10      	ldr	r2, [pc, #64]	; (1fd4 <i2c_m_async_init+0x7c>)
    1f92:	62da      	str	r2, [r3, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    1f94:	687b      	ldr	r3, [r7, #4]
    1f96:	4a10      	ldr	r2, [pc, #64]	; (1fd8 <i2c_m_async_init+0x80>)
    1f98:	629a      	str	r2, [r3, #40]	; 0x28

	/* Init callbacks */
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    1f9a:	687b      	ldr	r3, [r7, #4]
    1f9c:	4a0f      	ldr	r2, [pc, #60]	; (1fdc <i2c_m_async_init+0x84>)
    1f9e:	2101      	movs	r1, #1
    1fa0:	4618      	mov	r0, r3
    1fa2:	4b0f      	ldr	r3, [pc, #60]	; (1fe0 <i2c_m_async_init+0x88>)
    1fa4:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    1fa6:	687b      	ldr	r3, [r7, #4]
    1fa8:	4a0e      	ldr	r2, [pc, #56]	; (1fe4 <i2c_m_async_init+0x8c>)
    1faa:	2102      	movs	r1, #2
    1fac:	4618      	mov	r0, r3
    1fae:	4b0c      	ldr	r3, [pc, #48]	; (1fe0 <i2c_m_async_init+0x88>)
    1fb0:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    1fb2:	687b      	ldr	r3, [r7, #4]
    1fb4:	4a0c      	ldr	r2, [pc, #48]	; (1fe8 <i2c_m_async_init+0x90>)
    1fb6:	2100      	movs	r1, #0
    1fb8:	4618      	mov	r0, r3
    1fba:	4b09      	ldr	r3, [pc, #36]	; (1fe0 <i2c_m_async_init+0x88>)
    1fbc:	4798      	blx	r3

	return ERR_NONE;
    1fbe:	2300      	movs	r3, #0
}
    1fc0:	4618      	mov	r0, r3
    1fc2:	3710      	adds	r7, #16
    1fc4:	46bd      	mov	sp, r7
    1fc6:	bd80      	pop	{r7, pc}
    1fc8:	0000e338 	.word	0x0000e338
    1fcc:	000034fd 	.word	0x000034fd
    1fd0:	00006a15 	.word	0x00006a15
    1fd4:	00001eb9 	.word	0x00001eb9
    1fd8:	00001f09 	.word	0x00001f09
    1fdc:	00001e1d 	.word	0x00001e1d
    1fe0:	00006c99 	.word	0x00006c99
    1fe4:	00001e4f 	.word	0x00001e4f
    1fe8:	00001e81 	.word	0x00001e81

00001fec <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    1fec:	b580      	push	{r7, lr}
    1fee:	b084      	sub	sp, #16
    1ff0:	af00      	add	r7, sp, #0
    1ff2:	60f8      	str	r0, [r7, #12]
    1ff4:	60b9      	str	r1, [r7, #8]
    1ff6:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    1ff8:	68fb      	ldr	r3, [r7, #12]
    1ffa:	2b00      	cmp	r3, #0
    1ffc:	d004      	beq.n	2008 <pwm_init+0x1c>
    1ffe:	68bb      	ldr	r3, [r7, #8]
    2000:	2b00      	cmp	r3, #0
    2002:	d001      	beq.n	2008 <pwm_init+0x1c>
    2004:	2301      	movs	r3, #1
    2006:	e000      	b.n	200a <pwm_init+0x1e>
    2008:	2300      	movs	r3, #0
    200a:	f003 0301 	and.w	r3, r3, #1
    200e:	b2db      	uxtb	r3, r3
    2010:	2233      	movs	r2, #51	; 0x33
    2012:	490a      	ldr	r1, [pc, #40]	; (203c <pwm_init+0x50>)
    2014:	4618      	mov	r0, r3
    2016:	4b0a      	ldr	r3, [pc, #40]	; (2040 <pwm_init+0x54>)
    2018:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    201a:	68fb      	ldr	r3, [r7, #12]
    201c:	68b9      	ldr	r1, [r7, #8]
    201e:	4618      	mov	r0, r3
    2020:	4b08      	ldr	r3, [pc, #32]	; (2044 <pwm_init+0x58>)
    2022:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    2024:	68fb      	ldr	r3, [r7, #12]
    2026:	4a08      	ldr	r2, [pc, #32]	; (2048 <pwm_init+0x5c>)
    2028:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    202a:	68fb      	ldr	r3, [r7, #12]
    202c:	4a07      	ldr	r2, [pc, #28]	; (204c <pwm_init+0x60>)
    202e:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    2030:	2300      	movs	r3, #0
}
    2032:	4618      	mov	r0, r3
    2034:	3710      	adds	r7, #16
    2036:	46bd      	mov	sp, r7
    2038:	bd80      	pop	{r7, pc}
    203a:	bf00      	nop
    203c:	0000e358 	.word	0x0000e358
    2040:	000034fd 	.word	0x000034fd
    2044:	00007e49 	.word	0x00007e49
    2048:	00002051 	.word	0x00002051
    204c:	00002075 	.word	0x00002075

00002050 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    2050:	b580      	push	{r7, lr}
    2052:	b084      	sub	sp, #16
    2054:	af00      	add	r7, sp, #0
    2056:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    2058:	687b      	ldr	r3, [r7, #4]
    205a:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    205c:	68fb      	ldr	r3, [r7, #12]
    205e:	695b      	ldr	r3, [r3, #20]
    2060:	2b00      	cmp	r3, #0
    2062:	d003      	beq.n	206c <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    2064:	68fb      	ldr	r3, [r7, #12]
    2066:	695b      	ldr	r3, [r3, #20]
    2068:	68f8      	ldr	r0, [r7, #12]
    206a:	4798      	blx	r3
	}
}
    206c:	bf00      	nop
    206e:	3710      	adds	r7, #16
    2070:	46bd      	mov	sp, r7
    2072:	bd80      	pop	{r7, pc}

00002074 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    2074:	b580      	push	{r7, lr}
    2076:	b084      	sub	sp, #16
    2078:	af00      	add	r7, sp, #0
    207a:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    207c:	687b      	ldr	r3, [r7, #4]
    207e:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    2080:	68fb      	ldr	r3, [r7, #12]
    2082:	699b      	ldr	r3, [r3, #24]
    2084:	2b00      	cmp	r3, #0
    2086:	d003      	beq.n	2090 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    2088:	68fb      	ldr	r3, [r7, #12]
    208a:	699b      	ldr	r3, [r3, #24]
    208c:	68f8      	ldr	r0, [r7, #12]
    208e:	4798      	blx	r3
	}
}
    2090:	bf00      	nop
    2092:	3710      	adds	r7, #16
    2094:	46bd      	mov	sp, r7
    2096:	bd80      	pop	{r7, pc}

00002098 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    2098:	b580      	push	{r7, lr}
    209a:	b082      	sub	sp, #8
    209c:	af00      	add	r7, sp, #0
    209e:	6078      	str	r0, [r7, #4]
    20a0:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    20a2:	687b      	ldr	r3, [r7, #4]
    20a4:	2b00      	cmp	r3, #0
    20a6:	d004      	beq.n	20b2 <qspi_sync_init+0x1a>
    20a8:	683b      	ldr	r3, [r7, #0]
    20aa:	2b00      	cmp	r3, #0
    20ac:	d001      	beq.n	20b2 <qspi_sync_init+0x1a>
    20ae:	2301      	movs	r3, #1
    20b0:	e000      	b.n	20b4 <qspi_sync_init+0x1c>
    20b2:	2300      	movs	r3, #0
    20b4:	f003 0301 	and.w	r3, r3, #1
    20b8:	b2db      	uxtb	r3, r3
    20ba:	2231      	movs	r2, #49	; 0x31
    20bc:	4906      	ldr	r1, [pc, #24]	; (20d8 <qspi_sync_init+0x40>)
    20be:	4618      	mov	r0, r3
    20c0:	4b06      	ldr	r3, [pc, #24]	; (20dc <qspi_sync_init+0x44>)
    20c2:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    20c4:	687b      	ldr	r3, [r7, #4]
    20c6:	6839      	ldr	r1, [r7, #0]
    20c8:	4618      	mov	r0, r3
    20ca:	4b05      	ldr	r3, [pc, #20]	; (20e0 <qspi_sync_init+0x48>)
    20cc:	4798      	blx	r3
    20ce:	4603      	mov	r3, r0
}
    20d0:	4618      	mov	r0, r3
    20d2:	3708      	adds	r7, #8
    20d4:	46bd      	mov	sp, r7
    20d6:	bd80      	pop	{r7, pc}
    20d8:	0000e370 	.word	0x0000e370
    20dc:	000034fd 	.word	0x000034fd
    20e0:	00005959 	.word	0x00005959

000020e4 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    20e4:	b580      	push	{r7, lr}
    20e6:	b082      	sub	sp, #8
    20e8:	af00      	add	r7, sp, #0
    20ea:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    20ec:	687b      	ldr	r3, [r7, #4]
    20ee:	2b00      	cmp	r3, #0
    20f0:	bf14      	ite	ne
    20f2:	2301      	movne	r3, #1
    20f4:	2300      	moveq	r3, #0
    20f6:	b2db      	uxtb	r3, r3
    20f8:	223f      	movs	r2, #63	; 0x3f
    20fa:	4906      	ldr	r1, [pc, #24]	; (2114 <qspi_sync_enable+0x30>)
    20fc:	4618      	mov	r0, r3
    20fe:	4b06      	ldr	r3, [pc, #24]	; (2118 <qspi_sync_enable+0x34>)
    2100:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    2102:	687b      	ldr	r3, [r7, #4]
    2104:	4618      	mov	r0, r3
    2106:	4b05      	ldr	r3, [pc, #20]	; (211c <qspi_sync_enable+0x38>)
    2108:	4798      	blx	r3
    210a:	4603      	mov	r3, r0
}
    210c:	4618      	mov	r0, r3
    210e:	3708      	adds	r7, #8
    2110:	46bd      	mov	sp, r7
    2112:	bd80      	pop	{r7, pc}
    2114:	0000e370 	.word	0x0000e370
    2118:	000034fd 	.word	0x000034fd
    211c:	000059cd 	.word	0x000059cd

00002120 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    2120:	b580      	push	{r7, lr}
    2122:	b082      	sub	sp, #8
    2124:	af00      	add	r7, sp, #0
    2126:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    2128:	687b      	ldr	r3, [r7, #4]
    212a:	2b00      	cmp	r3, #0
    212c:	bf14      	ite	ne
    212e:	2301      	movne	r3, #1
    2130:	2300      	moveq	r3, #0
    2132:	b2db      	uxtb	r3, r3
    2134:	2246      	movs	r2, #70	; 0x46
    2136:	4906      	ldr	r1, [pc, #24]	; (2150 <qspi_sync_disable+0x30>)
    2138:	4618      	mov	r0, r3
    213a:	4b06      	ldr	r3, [pc, #24]	; (2154 <qspi_sync_disable+0x34>)
    213c:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    213e:	687b      	ldr	r3, [r7, #4]
    2140:	4618      	mov	r0, r3
    2142:	4b05      	ldr	r3, [pc, #20]	; (2158 <qspi_sync_disable+0x38>)
    2144:	4798      	blx	r3
    2146:	4603      	mov	r3, r0
}
    2148:	4618      	mov	r0, r3
    214a:	3708      	adds	r7, #8
    214c:	46bd      	mov	sp, r7
    214e:	bd80      	pop	{r7, pc}
    2150:	0000e370 	.word	0x0000e370
    2154:	000034fd 	.word	0x000034fd
    2158:	000059f1 	.word	0x000059f1

0000215c <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    215c:	b580      	push	{r7, lr}
    215e:	b082      	sub	sp, #8
    2160:	af00      	add	r7, sp, #0
    2162:	6078      	str	r0, [r7, #4]
    2164:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    2166:	687b      	ldr	r3, [r7, #4]
    2168:	2b00      	cmp	r3, #0
    216a:	d004      	beq.n	2176 <qspi_sync_serial_run_command+0x1a>
    216c:	683b      	ldr	r3, [r7, #0]
    216e:	2b00      	cmp	r3, #0
    2170:	d001      	beq.n	2176 <qspi_sync_serial_run_command+0x1a>
    2172:	2301      	movs	r3, #1
    2174:	e000      	b.n	2178 <qspi_sync_serial_run_command+0x1c>
    2176:	2300      	movs	r3, #0
    2178:	f003 0301 	and.w	r3, r3, #1
    217c:	b2db      	uxtb	r3, r3
    217e:	224d      	movs	r2, #77	; 0x4d
    2180:	4906      	ldr	r1, [pc, #24]	; (219c <qspi_sync_serial_run_command+0x40>)
    2182:	4618      	mov	r0, r3
    2184:	4b06      	ldr	r3, [pc, #24]	; (21a0 <qspi_sync_serial_run_command+0x44>)
    2186:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    2188:	687b      	ldr	r3, [r7, #4]
    218a:	6839      	ldr	r1, [r7, #0]
    218c:	4618      	mov	r0, r3
    218e:	4b05      	ldr	r3, [pc, #20]	; (21a4 <qspi_sync_serial_run_command+0x48>)
    2190:	4798      	blx	r3
    2192:	4603      	mov	r3, r0
}
    2194:	4618      	mov	r0, r3
    2196:	3708      	adds	r7, #8
    2198:	46bd      	mov	sp, r7
    219a:	bd80      	pop	{r7, pc}
    219c:	0000e370 	.word	0x0000e370
    21a0:	000034fd 	.word	0x000034fd
    21a4:	00005b3d 	.word	0x00005b3d

000021a8 <_spi_dev_tx>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_tx(struct _spi_m_async_dev *dev)
{
    21a8:	b580      	push	{r7, lr}
    21aa:	b084      	sub	sp, #16
    21ac:	af00      	add	r7, sp, #0
    21ae:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    21b0:	687b      	ldr	r3, [r7, #4]
    21b2:	3b04      	subs	r3, #4
    21b4:	60fb      	str	r3, [r7, #12]

	if (!(dev->char_size > 1)) {
    21b6:	687b      	ldr	r3, [r7, #4]
    21b8:	791b      	ldrb	r3, [r3, #4]
    21ba:	2b01      	cmp	r3, #1
    21bc:	d80e      	bhi.n	21dc <_spi_dev_tx+0x34>
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    21be:	68fb      	ldr	r3, [r7, #12]
    21c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    21c2:	68fb      	ldr	r3, [r7, #12]
    21c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    21c6:	1c58      	adds	r0, r3, #1
    21c8:	68f9      	ldr	r1, [r7, #12]
    21ca:	6448      	str	r0, [r1, #68]	; 0x44
    21cc:	4413      	add	r3, r2
    21ce:	781b      	ldrb	r3, [r3, #0]
    21d0:	b29b      	uxth	r3, r3
    21d2:	4619      	mov	r1, r3
    21d4:	6878      	ldr	r0, [r7, #4]
    21d6:	4b11      	ldr	r3, [pc, #68]	; (221c <_spi_dev_tx+0x74>)
    21d8:	4798      	blx	r3
    21da:	e00d      	b.n	21f8 <_spi_dev_tx+0x50>
	} else {
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    21dc:	68fb      	ldr	r3, [r7, #12]
    21de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    21e0:	68fb      	ldr	r3, [r7, #12]
    21e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    21e4:	1c58      	adds	r0, r3, #1
    21e6:	68f9      	ldr	r1, [r7, #12]
    21e8:	6448      	str	r0, [r1, #68]	; 0x44
    21ea:	005b      	lsls	r3, r3, #1
    21ec:	4413      	add	r3, r2
    21ee:	881b      	ldrh	r3, [r3, #0]
    21f0:	4619      	mov	r1, r3
    21f2:	6878      	ldr	r0, [r7, #4]
    21f4:	4b09      	ldr	r3, [pc, #36]	; (221c <_spi_dev_tx+0x74>)
    21f6:	4798      	blx	r3
	}

	if (spi->xfercnt == spi->xfer.size) {
    21f8:	68fb      	ldr	r3, [r7, #12]
    21fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    21fc:	68fb      	ldr	r3, [r7, #12]
    21fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2200:	429a      	cmp	r2, r3
    2202:	d107      	bne.n	2214 <_spi_dev_tx+0x6c>
		_spi_m_async_enable_tx(dev, false);
    2204:	2100      	movs	r1, #0
    2206:	6878      	ldr	r0, [r7, #4]
    2208:	4b05      	ldr	r3, [pc, #20]	; (2220 <_spi_dev_tx+0x78>)
    220a:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    220c:	2101      	movs	r1, #1
    220e:	6878      	ldr	r0, [r7, #4]
    2210:	4b04      	ldr	r3, [pc, #16]	; (2224 <_spi_dev_tx+0x7c>)
    2212:	4798      	blx	r3
	}
}
    2214:	bf00      	nop
    2216:	3710      	adds	r7, #16
    2218:	46bd      	mov	sp, r7
    221a:	bd80      	pop	{r7, pc}
    221c:	000076f9 	.word	0x000076f9
    2220:	000075bd 	.word	0x000075bd
    2224:	00007691 	.word	0x00007691

00002228 <_spi_dev_rx>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_rx(struct _spi_m_async_dev *dev)
{
    2228:	b590      	push	{r4, r7, lr}
    222a:	b085      	sub	sp, #20
    222c:	af00      	add	r7, sp, #0
    222e:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    2230:	687b      	ldr	r3, [r7, #4]
    2232:	3b04      	subs	r3, #4
    2234:	60fb      	str	r3, [r7, #12]

	if (spi->xfer.rxbuf) {
    2236:	68fb      	ldr	r3, [r7, #12]
    2238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    223a:	2b00      	cmp	r3, #0
    223c:	d021      	beq.n	2282 <_spi_dev_rx+0x5a>
		if (!(dev->char_size > 1)) {
    223e:	687b      	ldr	r3, [r7, #4]
    2240:	791b      	ldrb	r3, [r3, #4]
    2242:	2b01      	cmp	r3, #1
    2244:	d80e      	bhi.n	2264 <_spi_dev_rx+0x3c>
			/* 8-bit or less */
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    2246:	68fb      	ldr	r3, [r7, #12]
    2248:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    224a:	68fb      	ldr	r3, [r7, #12]
    224c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    224e:	1c58      	adds	r0, r3, #1
    2250:	68f9      	ldr	r1, [r7, #12]
    2252:	6448      	str	r0, [r1, #68]	; 0x44
    2254:	18d4      	adds	r4, r2, r3
    2256:	6878      	ldr	r0, [r7, #4]
    2258:	4b2e      	ldr	r3, [pc, #184]	; (2314 <_spi_dev_rx+0xec>)
    225a:	4798      	blx	r3
    225c:	4603      	mov	r3, r0
    225e:	b2db      	uxtb	r3, r3
    2260:	7023      	strb	r3, [r4, #0]
    2262:	e016      	b.n	2292 <_spi_dev_rx+0x6a>
		} else {
			/* 9-bit or more */
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    2264:	68fb      	ldr	r3, [r7, #12]
    2266:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    2268:	68fb      	ldr	r3, [r7, #12]
    226a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    226c:	1c58      	adds	r0, r3, #1
    226e:	68f9      	ldr	r1, [r7, #12]
    2270:	6448      	str	r0, [r1, #68]	; 0x44
    2272:	005b      	lsls	r3, r3, #1
    2274:	18d4      	adds	r4, r2, r3
    2276:	6878      	ldr	r0, [r7, #4]
    2278:	4b26      	ldr	r3, [pc, #152]	; (2314 <_spi_dev_rx+0xec>)
    227a:	4798      	blx	r3
    227c:	4603      	mov	r3, r0
    227e:	8023      	strh	r3, [r4, #0]
    2280:	e007      	b.n	2292 <_spi_dev_rx+0x6a>
		}
	} else {
		/* dummy data read if rxbuf is NULL */
		_spi_m_async_read_one(dev);
    2282:	6878      	ldr	r0, [r7, #4]
    2284:	4b23      	ldr	r3, [pc, #140]	; (2314 <_spi_dev_rx+0xec>)
    2286:	4798      	blx	r3
		spi->xfercnt++;
    2288:	68fb      	ldr	r3, [r7, #12]
    228a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    228c:	1c5a      	adds	r2, r3, #1
    228e:	68fb      	ldr	r3, [r7, #12]
    2290:	645a      	str	r2, [r3, #68]	; 0x44
	}

	if (spi->xfercnt < spi->xfer.size) {
    2292:	68fb      	ldr	r3, [r7, #12]
    2294:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    2296:	68fb      	ldr	r3, [r7, #12]
    2298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    229a:	429a      	cmp	r2, r3
    229c:	d226      	bcs.n	22ec <_spi_dev_rx+0xc4>
		if (spi->xfer.txbuf) {
    229e:	68fb      	ldr	r3, [r7, #12]
    22a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    22a2:	2b00      	cmp	r3, #0
    22a4:	d01b      	beq.n	22de <_spi_dev_rx+0xb6>
			if (!(dev->char_size > 1)) {
    22a6:	687b      	ldr	r3, [r7, #4]
    22a8:	791b      	ldrb	r3, [r3, #4]
    22aa:	2b01      	cmp	r3, #1
    22ac:	d80b      	bhi.n	22c6 <_spi_dev_rx+0x9e>
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    22ae:	68fb      	ldr	r3, [r7, #12]
    22b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    22b2:	68fb      	ldr	r3, [r7, #12]
    22b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    22b6:	4413      	add	r3, r2
    22b8:	781b      	ldrb	r3, [r3, #0]
    22ba:	b29b      	uxth	r3, r3
    22bc:	4619      	mov	r1, r3
    22be:	6878      	ldr	r0, [r7, #4]
    22c0:	4b15      	ldr	r3, [pc, #84]	; (2318 <_spi_dev_rx+0xf0>)
    22c2:	4798      	blx	r3

		if (spi->callbacks.cb_xfer) {
			spi->callbacks.cb_xfer(spi);
		}
	}
}
    22c4:	e022      	b.n	230c <_spi_dev_rx+0xe4>
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    22c6:	68fb      	ldr	r3, [r7, #12]
    22c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    22ca:	68fb      	ldr	r3, [r7, #12]
    22cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    22ce:	005b      	lsls	r3, r3, #1
    22d0:	4413      	add	r3, r2
    22d2:	881b      	ldrh	r3, [r3, #0]
    22d4:	4619      	mov	r1, r3
    22d6:	6878      	ldr	r0, [r7, #4]
    22d8:	4b0f      	ldr	r3, [pc, #60]	; (2318 <_spi_dev_rx+0xf0>)
    22da:	4798      	blx	r3
}
    22dc:	e016      	b.n	230c <_spi_dev_rx+0xe4>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    22de:	687b      	ldr	r3, [r7, #4]
    22e0:	88db      	ldrh	r3, [r3, #6]
    22e2:	4619      	mov	r1, r3
    22e4:	6878      	ldr	r0, [r7, #4]
    22e6:	4b0c      	ldr	r3, [pc, #48]	; (2318 <_spi_dev_rx+0xf0>)
    22e8:	4798      	blx	r3
}
    22ea:	e00f      	b.n	230c <_spi_dev_rx+0xe4>
		_spi_m_async_enable_rx(dev, false);
    22ec:	2100      	movs	r1, #0
    22ee:	6878      	ldr	r0, [r7, #4]
    22f0:	4b0a      	ldr	r3, [pc, #40]	; (231c <_spi_dev_rx+0xf4>)
    22f2:	4798      	blx	r3
		spi->stat = 0;
    22f4:	68fb      	ldr	r3, [r7, #12]
    22f6:	2200      	movs	r2, #0
    22f8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		if (spi->callbacks.cb_xfer) {
    22fc:	68fb      	ldr	r3, [r7, #12]
    22fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2300:	2b00      	cmp	r3, #0
    2302:	d003      	beq.n	230c <_spi_dev_rx+0xe4>
			spi->callbacks.cb_xfer(spi);
    2304:	68fb      	ldr	r3, [r7, #12]
    2306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2308:	68f8      	ldr	r0, [r7, #12]
    230a:	4798      	blx	r3
}
    230c:	bf00      	nop
    230e:	3714      	adds	r7, #20
    2310:	46bd      	mov	sp, r7
    2312:	bd90      	pop	{r4, r7, pc}
    2314:	00007751 	.word	0x00007751
    2318:	000076f9 	.word	0x000076f9
    231c:	00007621 	.word	0x00007621

00002320 <_spi_dev_complete>:
/**
 *  \brief Callback for complete
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_complete(struct _spi_m_async_dev *dev)
{
    2320:	b580      	push	{r7, lr}
    2322:	b084      	sub	sp, #16
    2324:	af00      	add	r7, sp, #0
    2326:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    2328:	687b      	ldr	r3, [r7, #4]
    232a:	3b04      	subs	r3, #4
    232c:	60fb      	str	r3, [r7, #12]

	if (spi->xfercnt >= spi->xfer.size) {
    232e:	68fb      	ldr	r3, [r7, #12]
    2330:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    2332:	68fb      	ldr	r3, [r7, #12]
    2334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2336:	429a      	cmp	r2, r3
    2338:	d30f      	bcc.n	235a <_spi_dev_complete+0x3a>
		_spi_m_async_enable_tx_complete(dev, false);
    233a:	2100      	movs	r1, #0
    233c:	6878      	ldr	r0, [r7, #4]
    233e:	4b09      	ldr	r3, [pc, #36]	; (2364 <_spi_dev_complete+0x44>)
    2340:	4798      	blx	r3
		spi->stat = 0;
    2342:	68fb      	ldr	r3, [r7, #12]
    2344:	2200      	movs	r2, #0
    2346:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

		if (spi->callbacks.cb_xfer) {
    234a:	68fb      	ldr	r3, [r7, #12]
    234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    234e:	2b00      	cmp	r3, #0
    2350:	d003      	beq.n	235a <_spi_dev_complete+0x3a>
			spi->callbacks.cb_xfer(spi);
    2352:	68fb      	ldr	r3, [r7, #12]
    2354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2356:	68f8      	ldr	r0, [r7, #12]
    2358:	4798      	blx	r3
		}
	}
}
    235a:	bf00      	nop
    235c:	3710      	adds	r7, #16
    235e:	46bd      	mov	sp, r7
    2360:	bd80      	pop	{r7, pc}
    2362:	bf00      	nop
    2364:	00007691 	.word	0x00007691

00002368 <_spi_dev_error>:
 *  \brief Callback for error
 *  \param[in, out] dev Pointer to the SPI device instance.
 *  \param[in] status Error status.
 */
static void _spi_dev_error(struct _spi_m_async_dev *dev, int32_t status)
{
    2368:	b580      	push	{r7, lr}
    236a:	b084      	sub	sp, #16
    236c:	af00      	add	r7, sp, #0
    236e:	6078      	str	r0, [r7, #4]
    2370:	6039      	str	r1, [r7, #0]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    2372:	687b      	ldr	r3, [r7, #4]
    2374:	3b04      	subs	r3, #4
    2376:	60fb      	str	r3, [r7, #12]

	_spi_m_async_enable_tx(dev, false);
    2378:	2100      	movs	r1, #0
    237a:	6878      	ldr	r0, [r7, #4]
    237c:	4b0d      	ldr	r3, [pc, #52]	; (23b4 <_spi_dev_error+0x4c>)
    237e:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
    2380:	2100      	movs	r1, #0
    2382:	6878      	ldr	r0, [r7, #4]
    2384:	4b0c      	ldr	r3, [pc, #48]	; (23b8 <_spi_dev_error+0x50>)
    2386:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
    2388:	2100      	movs	r1, #0
    238a:	6878      	ldr	r0, [r7, #4]
    238c:	4b0b      	ldr	r3, [pc, #44]	; (23bc <_spi_dev_error+0x54>)
    238e:	4798      	blx	r3
	spi->stat = 0;
    2390:	68fb      	ldr	r3, [r7, #12]
    2392:	2200      	movs	r2, #0
    2394:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	/* Invoke complete callback */
	if (spi->callbacks.cb_error) {
    2398:	68fb      	ldr	r3, [r7, #12]
    239a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    239c:	2b00      	cmp	r3, #0
    239e:	d004      	beq.n	23aa <_spi_dev_error+0x42>
		spi->callbacks.cb_error(spi, status);
    23a0:	68fb      	ldr	r3, [r7, #12]
    23a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    23a4:	6839      	ldr	r1, [r7, #0]
    23a6:	68f8      	ldr	r0, [r7, #12]
    23a8:	4798      	blx	r3
	}
}
    23aa:	bf00      	nop
    23ac:	3710      	adds	r7, #16
    23ae:	46bd      	mov	sp, r7
    23b0:	bd80      	pop	{r7, pc}
    23b2:	bf00      	nop
    23b4:	000075bd 	.word	0x000075bd
    23b8:	00007621 	.word	0x00007621
    23bc:	00007691 	.word	0x00007691

000023c0 <spi_m_async_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_async_hpl_interface *)func;
}

int32_t spi_m_async_init(struct spi_m_async_descriptor *spi, void *const hw)
{
    23c0:	b580      	push	{r7, lr}
    23c2:	b084      	sub	sp, #16
    23c4:	af00      	add	r7, sp, #0
    23c6:	6078      	str	r0, [r7, #4]
    23c8:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    23ca:	2300      	movs	r3, #0
    23cc:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    23ce:	687b      	ldr	r3, [r7, #4]
    23d0:	2b00      	cmp	r3, #0
    23d2:	d004      	beq.n	23de <spi_m_async_init+0x1e>
    23d4:	683b      	ldr	r3, [r7, #0]
    23d6:	2b00      	cmp	r3, #0
    23d8:	d001      	beq.n	23de <spi_m_async_init+0x1e>
    23da:	2301      	movs	r3, #1
    23dc:	e000      	b.n	23e0 <spi_m_async_init+0x20>
    23de:	2300      	movs	r3, #0
    23e0:	f003 0301 	and.w	r3, r3, #1
    23e4:	b2db      	uxtb	r3, r3
    23e6:	22a5      	movs	r2, #165	; 0xa5
    23e8:	491c      	ldr	r1, [pc, #112]	; (245c <spi_m_async_init+0x9c>)
    23ea:	4618      	mov	r0, r3
    23ec:	4b1c      	ldr	r3, [pc, #112]	; (2460 <spi_m_async_init+0xa0>)
    23ee:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    23f0:	687b      	ldr	r3, [r7, #4]
    23f2:	683a      	ldr	r2, [r7, #0]
    23f4:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_async_init(&spi->dev, hw);
    23f6:	687b      	ldr	r3, [r7, #4]
    23f8:	3304      	adds	r3, #4
    23fa:	6839      	ldr	r1, [r7, #0]
    23fc:	4618      	mov	r0, r3
    23fe:	4b19      	ldr	r3, [pc, #100]	; (2464 <spi_m_async_init+0xa4>)
    2400:	4798      	blx	r3
    2402:	60f8      	str	r0, [r7, #12]

	if (rc >= 0) {
    2404:	68fb      	ldr	r3, [r7, #12]
    2406:	2b00      	cmp	r3, #0
    2408:	db23      	blt.n	2452 <spi_m_async_init+0x92>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    240a:	687b      	ldr	r3, [r7, #4]
    240c:	3304      	adds	r3, #4
    240e:	4a16      	ldr	r2, [pc, #88]	; (2468 <spi_m_async_init+0xa8>)
    2410:	2100      	movs	r1, #0
    2412:	4618      	mov	r0, r3
    2414:	4b15      	ldr	r3, [pc, #84]	; (246c <spi_m_async_init+0xac>)
    2416:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    2418:	687b      	ldr	r3, [r7, #4]
    241a:	3304      	adds	r3, #4
    241c:	4a14      	ldr	r2, [pc, #80]	; (2470 <spi_m_async_init+0xb0>)
    241e:	2101      	movs	r1, #1
    2420:	4618      	mov	r0, r3
    2422:	4b12      	ldr	r3, [pc, #72]	; (246c <spi_m_async_init+0xac>)
    2424:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    2426:	687b      	ldr	r3, [r7, #4]
    2428:	3304      	adds	r3, #4
    242a:	4a12      	ldr	r2, [pc, #72]	; (2474 <spi_m_async_init+0xb4>)
    242c:	2102      	movs	r1, #2
    242e:	4618      	mov	r0, r3
    2430:	4b0e      	ldr	r3, [pc, #56]	; (246c <spi_m_async_init+0xac>)
    2432:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    2434:	687b      	ldr	r3, [r7, #4]
    2436:	3304      	adds	r3, #4
    2438:	4a0f      	ldr	r2, [pc, #60]	; (2478 <spi_m_async_init+0xb8>)
    243a:	2103      	movs	r1, #3
    243c:	4618      	mov	r0, r3
    243e:	4b0b      	ldr	r3, [pc, #44]	; (246c <spi_m_async_init+0xac>)
    2440:	4798      	blx	r3
	} else {
		return rc;
	}

	spi->io.read  = _spi_m_async_io_read;
    2442:	687b      	ldr	r3, [r7, #4]
    2444:	4a0d      	ldr	r2, [pc, #52]	; (247c <spi_m_async_init+0xbc>)
    2446:	629a      	str	r2, [r3, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    2448:	687b      	ldr	r3, [r7, #4]
    244a:	4a0d      	ldr	r2, [pc, #52]	; (2480 <spi_m_async_init+0xc0>)
    244c:	625a      	str	r2, [r3, #36]	; 0x24
	return ERR_NONE;
    244e:	2300      	movs	r3, #0
    2450:	e000      	b.n	2454 <spi_m_async_init+0x94>
		return rc;
    2452:	68fb      	ldr	r3, [r7, #12]
}
    2454:	4618      	mov	r0, r3
    2456:	3710      	adds	r7, #16
    2458:	46bd      	mov	sp, r7
    245a:	bd80      	pop	{r7, pc}
    245c:	0000e38c 	.word	0x0000e38c
    2460:	000034fd 	.word	0x000034fd
    2464:	000072bd 	.word	0x000072bd
    2468:	000021a9 	.word	0x000021a9
    246c:	000077a1 	.word	0x000077a1
    2470:	00002229 	.word	0x00002229
    2474:	00002321 	.word	0x00002321
    2478:	00002369 	.word	0x00002369
    247c:	00002485 	.word	0x00002485
    2480:	00002505 	.word	0x00002505

00002484 <_spi_m_async_io_read>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_read(struct io_descriptor *io, uint8_t *const buf, const uint16_t length)
{
    2484:	b580      	push	{r7, lr}
    2486:	b086      	sub	sp, #24
    2488:	af00      	add	r7, sp, #0
    248a:	60f8      	str	r0, [r7, #12]
    248c:	60b9      	str	r1, [r7, #8]
    248e:	4613      	mov	r3, r2
    2490:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    2492:	68fb      	ldr	r3, [r7, #12]
    2494:	2b00      	cmp	r3, #0
    2496:	bf14      	ite	ne
    2498:	2301      	movne	r3, #1
    249a:	2300      	moveq	r3, #0
    249c:	b2db      	uxtb	r3, r3
    249e:	f240 1205 	movw	r2, #261	; 0x105
    24a2:	4914      	ldr	r1, [pc, #80]	; (24f4 <_spi_m_async_io_read+0x70>)
    24a4:	4618      	mov	r0, r3
    24a6:	4b14      	ldr	r3, [pc, #80]	; (24f8 <_spi_m_async_io_read+0x74>)
    24a8:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);
    24aa:	68fb      	ldr	r3, [r7, #12]
    24ac:	3b24      	subs	r3, #36	; 0x24
    24ae:	617b      	str	r3, [r7, #20]

	spi->xfer.rxbuf = buf;
    24b0:	697b      	ldr	r3, [r7, #20]
    24b2:	68ba      	ldr	r2, [r7, #8]
    24b4:	63da      	str	r2, [r3, #60]	; 0x3c
	spi->xfer.txbuf = NULL;
    24b6:	697b      	ldr	r3, [r7, #20]
    24b8:	2200      	movs	r2, #0
    24ba:	639a      	str	r2, [r3, #56]	; 0x38
	spi->xfer.size  = length;
    24bc:	88fa      	ldrh	r2, [r7, #6]
    24be:	697b      	ldr	r3, [r7, #20]
    24c0:	641a      	str	r2, [r3, #64]	; 0x40
	spi->xfercnt    = 0;
    24c2:	697b      	ldr	r3, [r7, #20]
    24c4:	2200      	movs	r2, #0
    24c6:	645a      	str	r2, [r3, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    24c8:	697b      	ldr	r3, [r7, #20]
    24ca:	2210      	movs	r2, #16
    24cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	_spi_m_async_enable_rx(&spi->dev, true);
    24d0:	697b      	ldr	r3, [r7, #20]
    24d2:	3304      	adds	r3, #4
    24d4:	2101      	movs	r1, #1
    24d6:	4618      	mov	r0, r3
    24d8:	4b08      	ldr	r3, [pc, #32]	; (24fc <_spi_m_async_io_read+0x78>)
    24da:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
    24dc:	697b      	ldr	r3, [r7, #20]
    24de:	3304      	adds	r3, #4
    24e0:	f240 11ff 	movw	r1, #511	; 0x1ff
    24e4:	4618      	mov	r0, r3
    24e6:	4b06      	ldr	r3, [pc, #24]	; (2500 <_spi_m_async_io_read+0x7c>)
    24e8:	4798      	blx	r3

	return ERR_NONE;
    24ea:	2300      	movs	r3, #0
}
    24ec:	4618      	mov	r0, r3
    24ee:	3718      	adds	r7, #24
    24f0:	46bd      	mov	sp, r7
    24f2:	bd80      	pop	{r7, pc}
    24f4:	0000e38c 	.word	0x0000e38c
    24f8:	000034fd 	.word	0x000034fd
    24fc:	00007621 	.word	0x00007621
    2500:	000076f9 	.word	0x000076f9

00002504 <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    2504:	b580      	push	{r7, lr}
    2506:	b086      	sub	sp, #24
    2508:	af00      	add	r7, sp, #0
    250a:	60f8      	str	r0, [r7, #12]
    250c:	60b9      	str	r1, [r7, #8]
    250e:	4613      	mov	r3, r2
    2510:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    2512:	68fb      	ldr	r3, [r7, #12]
    2514:	2b00      	cmp	r3, #0
    2516:	bf14      	ite	ne
    2518:	2301      	movne	r3, #1
    251a:	2300      	moveq	r3, #0
    251c:	b2db      	uxtb	r3, r3
    251e:	f240 1227 	movw	r2, #295	; 0x127
    2522:	4911      	ldr	r1, [pc, #68]	; (2568 <_spi_m_async_io_write+0x64>)
    2524:	4618      	mov	r0, r3
    2526:	4b11      	ldr	r3, [pc, #68]	; (256c <_spi_m_async_io_write+0x68>)
    2528:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);
    252a:	68fb      	ldr	r3, [r7, #12]
    252c:	3b24      	subs	r3, #36	; 0x24
    252e:	617b      	str	r3, [r7, #20]

	spi->xfer.rxbuf = NULL;
    2530:	697b      	ldr	r3, [r7, #20]
    2532:	2200      	movs	r2, #0
    2534:	63da      	str	r2, [r3, #60]	; 0x3c
	spi->xfer.txbuf = (uint8_t *)buf;
    2536:	697b      	ldr	r3, [r7, #20]
    2538:	68ba      	ldr	r2, [r7, #8]
    253a:	639a      	str	r2, [r3, #56]	; 0x38
	spi->xfer.size  = length;
    253c:	88fa      	ldrh	r2, [r7, #6]
    253e:	697b      	ldr	r3, [r7, #20]
    2540:	641a      	str	r2, [r3, #64]	; 0x40
	spi->xfercnt    = 0;
    2542:	697b      	ldr	r3, [r7, #20]
    2544:	2200      	movs	r2, #0
    2546:	645a      	str	r2, [r3, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    2548:	697b      	ldr	r3, [r7, #20]
    254a:	2210      	movs	r2, #16
    254c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	_spi_m_async_enable_tx(&spi->dev, true);
    2550:	697b      	ldr	r3, [r7, #20]
    2552:	3304      	adds	r3, #4
    2554:	2101      	movs	r1, #1
    2556:	4618      	mov	r0, r3
    2558:	4b05      	ldr	r3, [pc, #20]	; (2570 <_spi_m_async_io_write+0x6c>)
    255a:	4798      	blx	r3

	return ERR_NONE;
    255c:	2300      	movs	r3, #0
}
    255e:	4618      	mov	r0, r3
    2560:	3718      	adds	r7, #24
    2562:	46bd      	mov	sp, r7
    2564:	bd80      	pop	{r7, pc}
    2566:	bf00      	nop
    2568:	0000e38c 	.word	0x0000e38c
    256c:	000034fd 	.word	0x000034fd
    2570:	000075bd 	.word	0x000075bd

00002574 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    2574:	b580      	push	{r7, lr}
    2576:	b084      	sub	sp, #16
    2578:	af00      	add	r7, sp, #0
    257a:	6078      	str	r0, [r7, #4]
    257c:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    257e:	2300      	movs	r3, #0
    2580:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    2582:	687b      	ldr	r3, [r7, #4]
    2584:	2b00      	cmp	r3, #0
    2586:	d004      	beq.n	2592 <spi_m_sync_init+0x1e>
    2588:	683b      	ldr	r3, [r7, #0]
    258a:	2b00      	cmp	r3, #0
    258c:	d001      	beq.n	2592 <spi_m_sync_init+0x1e>
    258e:	2301      	movs	r3, #1
    2590:	e000      	b.n	2594 <spi_m_sync_init+0x20>
    2592:	2300      	movs	r3, #0
    2594:	f003 0301 	and.w	r3, r3, #1
    2598:	b2db      	uxtb	r3, r3
    259a:	2240      	movs	r2, #64	; 0x40
    259c:	4910      	ldr	r1, [pc, #64]	; (25e0 <spi_m_sync_init+0x6c>)
    259e:	4618      	mov	r0, r3
    25a0:	4b10      	ldr	r3, [pc, #64]	; (25e4 <spi_m_sync_init+0x70>)
    25a2:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    25a4:	687b      	ldr	r3, [r7, #4]
    25a6:	683a      	ldr	r2, [r7, #0]
    25a8:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    25aa:	687b      	ldr	r3, [r7, #4]
    25ac:	3304      	adds	r3, #4
    25ae:	6839      	ldr	r1, [r7, #0]
    25b0:	4618      	mov	r0, r3
    25b2:	4b0d      	ldr	r3, [pc, #52]	; (25e8 <spi_m_sync_init+0x74>)
    25b4:	4798      	blx	r3
    25b6:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    25b8:	68fb      	ldr	r3, [r7, #12]
    25ba:	2b00      	cmp	r3, #0
    25bc:	da01      	bge.n	25c2 <spi_m_sync_init+0x4e>
		return rc;
    25be:	68fb      	ldr	r3, [r7, #12]
    25c0:	e00a      	b.n	25d8 <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    25c2:	687b      	ldr	r3, [r7, #4]
    25c4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    25c8:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    25ca:	687b      	ldr	r3, [r7, #4]
    25cc:	4a07      	ldr	r2, [pc, #28]	; (25ec <spi_m_sync_init+0x78>)
    25ce:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    25d0:	687b      	ldr	r3, [r7, #4]
    25d2:	4a07      	ldr	r2, [pc, #28]	; (25f0 <spi_m_sync_init+0x7c>)
    25d4:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    25d6:	2300      	movs	r3, #0
}
    25d8:	4618      	mov	r0, r3
    25da:	3710      	adds	r7, #16
    25dc:	46bd      	mov	sp, r7
    25de:	bd80      	pop	{r7, pc}
    25e0:	0000e3ac 	.word	0x0000e3ac
    25e4:	000034fd 	.word	0x000034fd
    25e8:	000071b1 	.word	0x000071b1
    25ec:	000025f5 	.word	0x000025f5
    25f0:	0000264d 	.word	0x0000264d

000025f4 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    25f4:	b580      	push	{r7, lr}
    25f6:	b088      	sub	sp, #32
    25f8:	af00      	add	r7, sp, #0
    25fa:	60f8      	str	r0, [r7, #12]
    25fc:	60b9      	str	r1, [r7, #8]
    25fe:	4613      	mov	r3, r2
    2600:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    2602:	68fb      	ldr	r3, [r7, #12]
    2604:	2b00      	cmp	r3, #0
    2606:	bf14      	ite	ne
    2608:	2301      	movne	r3, #1
    260a:	2300      	moveq	r3, #0
    260c:	b2db      	uxtb	r3, r3
    260e:	2287      	movs	r2, #135	; 0x87
    2610:	490b      	ldr	r1, [pc, #44]	; (2640 <_spi_m_sync_io_read+0x4c>)
    2612:	4618      	mov	r0, r3
    2614:	4b0b      	ldr	r3, [pc, #44]	; (2644 <_spi_m_sync_io_read+0x50>)
    2616:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2618:	68fb      	ldr	r3, [r7, #12]
    261a:	3b0c      	subs	r3, #12
    261c:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    261e:	68bb      	ldr	r3, [r7, #8]
    2620:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    2622:	2300      	movs	r3, #0
    2624:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    2626:	88fb      	ldrh	r3, [r7, #6]
    2628:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    262a:	f107 0310 	add.w	r3, r7, #16
    262e:	4619      	mov	r1, r3
    2630:	69f8      	ldr	r0, [r7, #28]
    2632:	4b05      	ldr	r3, [pc, #20]	; (2648 <_spi_m_sync_io_read+0x54>)
    2634:	4798      	blx	r3
    2636:	4603      	mov	r3, r0
}
    2638:	4618      	mov	r0, r3
    263a:	3720      	adds	r7, #32
    263c:	46bd      	mov	sp, r7
    263e:	bd80      	pop	{r7, pc}
    2640:	0000e3ac 	.word	0x0000e3ac
    2644:	000034fd 	.word	0x000034fd
    2648:	000026a5 	.word	0x000026a5

0000264c <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    264c:	b580      	push	{r7, lr}
    264e:	b088      	sub	sp, #32
    2650:	af00      	add	r7, sp, #0
    2652:	60f8      	str	r0, [r7, #12]
    2654:	60b9      	str	r1, [r7, #8]
    2656:	4613      	mov	r3, r2
    2658:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    265a:	68fb      	ldr	r3, [r7, #12]
    265c:	2b00      	cmp	r3, #0
    265e:	bf14      	ite	ne
    2660:	2301      	movne	r3, #1
    2662:	2300      	moveq	r3, #0
    2664:	b2db      	uxtb	r3, r3
    2666:	22a3      	movs	r2, #163	; 0xa3
    2668:	490b      	ldr	r1, [pc, #44]	; (2698 <_spi_m_sync_io_write+0x4c>)
    266a:	4618      	mov	r0, r3
    266c:	4b0b      	ldr	r3, [pc, #44]	; (269c <_spi_m_sync_io_write+0x50>)
    266e:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2670:	68fb      	ldr	r3, [r7, #12]
    2672:	3b0c      	subs	r3, #12
    2674:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    2676:	2300      	movs	r3, #0
    2678:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    267a:	68bb      	ldr	r3, [r7, #8]
    267c:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    267e:	88fb      	ldrh	r3, [r7, #6]
    2680:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    2682:	f107 0310 	add.w	r3, r7, #16
    2686:	4619      	mov	r1, r3
    2688:	69f8      	ldr	r0, [r7, #28]
    268a:	4b05      	ldr	r3, [pc, #20]	; (26a0 <_spi_m_sync_io_write+0x54>)
    268c:	4798      	blx	r3
    268e:	4603      	mov	r3, r0
}
    2690:	4618      	mov	r0, r3
    2692:	3720      	adds	r7, #32
    2694:	46bd      	mov	sp, r7
    2696:	bd80      	pop	{r7, pc}
    2698:	0000e3ac 	.word	0x0000e3ac
    269c:	000034fd 	.word	0x000034fd
    26a0:	000026a5 	.word	0x000026a5

000026a4 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    26a4:	b580      	push	{r7, lr}
    26a6:	b086      	sub	sp, #24
    26a8:	af00      	add	r7, sp, #0
    26aa:	6078      	str	r0, [r7, #4]
    26ac:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    26ae:	687b      	ldr	r3, [r7, #4]
    26b0:	2b00      	cmp	r3, #0
    26b2:	d004      	beq.n	26be <spi_m_sync_transfer+0x1a>
    26b4:	683b      	ldr	r3, [r7, #0]
    26b6:	2b00      	cmp	r3, #0
    26b8:	d001      	beq.n	26be <spi_m_sync_transfer+0x1a>
    26ba:	2301      	movs	r3, #1
    26bc:	e000      	b.n	26c0 <spi_m_sync_transfer+0x1c>
    26be:	2300      	movs	r3, #0
    26c0:	f003 0301 	and.w	r3, r3, #1
    26c4:	b2db      	uxtb	r3, r3
    26c6:	22b3      	movs	r2, #179	; 0xb3
    26c8:	490c      	ldr	r1, [pc, #48]	; (26fc <spi_m_sync_transfer+0x58>)
    26ca:	4618      	mov	r0, r3
    26cc:	4b0c      	ldr	r3, [pc, #48]	; (2700 <spi_m_sync_transfer+0x5c>)
    26ce:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    26d0:	683b      	ldr	r3, [r7, #0]
    26d2:	681b      	ldr	r3, [r3, #0]
    26d4:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    26d6:	683b      	ldr	r3, [r7, #0]
    26d8:	685b      	ldr	r3, [r3, #4]
    26da:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    26dc:	683b      	ldr	r3, [r7, #0]
    26de:	689b      	ldr	r3, [r3, #8]
    26e0:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    26e2:	687b      	ldr	r3, [r7, #4]
    26e4:	3304      	adds	r3, #4
    26e6:	f107 020c 	add.w	r2, r7, #12
    26ea:	4611      	mov	r1, r2
    26ec:	4618      	mov	r0, r3
    26ee:	4b05      	ldr	r3, [pc, #20]	; (2704 <spi_m_sync_transfer+0x60>)
    26f0:	4798      	blx	r3
    26f2:	4603      	mov	r3, r0
}
    26f4:	4618      	mov	r0, r3
    26f6:	3718      	adds	r7, #24
    26f8:	46bd      	mov	sp, r7
    26fa:	bd80      	pop	{r7, pc}
    26fc:	0000e3ac 	.word	0x0000e3ac
    2700:	000034fd 	.word	0x000034fd
    2704:	000074a1 	.word	0x000074a1

00002708 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    2708:	b480      	push	{r7}
    270a:	b083      	sub	sp, #12
    270c:	af00      	add	r7, sp, #0
    270e:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    2710:	687b      	ldr	r3, [r7, #4]
    2712:	681b      	ldr	r3, [r3, #0]
}
    2714:	4618      	mov	r0, r3
    2716:	370c      	adds	r7, #12
    2718:	46bd      	mov	sp, r7
    271a:	f85d 7b04 	ldr.w	r7, [sp], #4
    271e:	4770      	bx	lr

00002720 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    2720:	b480      	push	{r7}
    2722:	b083      	sub	sp, #12
    2724:	af00      	add	r7, sp, #0
    2726:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    2728:	687b      	ldr	r3, [r7, #4]
    272a:	2b00      	cmp	r3, #0
    272c:	d002      	beq.n	2734 <list_get_next_element+0x14>
    272e:	687b      	ldr	r3, [r7, #4]
    2730:	681b      	ldr	r3, [r3, #0]
    2732:	e000      	b.n	2736 <list_get_next_element+0x16>
    2734:	2300      	movs	r3, #0
}
    2736:	4618      	mov	r0, r3
    2738:	370c      	adds	r7, #12
    273a:	46bd      	mov	sp, r7
    273c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2740:	4770      	bx	lr
	...

00002744 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    2744:	b580      	push	{r7, lr}
    2746:	b084      	sub	sp, #16
    2748:	af00      	add	r7, sp, #0
    274a:	60f8      	str	r0, [r7, #12]
    274c:	60b9      	str	r1, [r7, #8]
    274e:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    2750:	68fb      	ldr	r3, [r7, #12]
    2752:	2b00      	cmp	r3, #0
    2754:	d004      	beq.n	2760 <timer_init+0x1c>
    2756:	68bb      	ldr	r3, [r7, #8]
    2758:	2b00      	cmp	r3, #0
    275a:	d001      	beq.n	2760 <timer_init+0x1c>
    275c:	2301      	movs	r3, #1
    275e:	e000      	b.n	2762 <timer_init+0x1e>
    2760:	2300      	movs	r3, #0
    2762:	f003 0301 	and.w	r3, r3, #1
    2766:	b2db      	uxtb	r3, r3
    2768:	223b      	movs	r2, #59	; 0x3b
    276a:	490a      	ldr	r1, [pc, #40]	; (2794 <timer_init+0x50>)
    276c:	4618      	mov	r0, r3
    276e:	4b0a      	ldr	r3, [pc, #40]	; (2798 <timer_init+0x54>)
    2770:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    2772:	68fb      	ldr	r3, [r7, #12]
    2774:	68b9      	ldr	r1, [r7, #8]
    2776:	4618      	mov	r0, r3
    2778:	4b08      	ldr	r3, [pc, #32]	; (279c <timer_init+0x58>)
    277a:	4798      	blx	r3
	descr->time                           = 0;
    277c:	68fb      	ldr	r3, [r7, #12]
    277e:	2200      	movs	r2, #0
    2780:	611a      	str	r2, [r3, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    2782:	68fb      	ldr	r3, [r7, #12]
    2784:	4a06      	ldr	r2, [pc, #24]	; (27a0 <timer_init+0x5c>)
    2786:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    2788:	2300      	movs	r3, #0
}
    278a:	4618      	mov	r0, r3
    278c:	3710      	adds	r7, #16
    278e:	46bd      	mov	sp, r7
    2790:	bd80      	pop	{r7, pc}
    2792:	bf00      	nop
    2794:	0000e3c8 	.word	0x0000e3c8
    2798:	000034fd 	.word	0x000034fd
    279c:	00007b99 	.word	0x00007b99
    27a0:	00002aed 	.word	0x00002aed

000027a4 <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    27a4:	b580      	push	{r7, lr}
    27a6:	b082      	sub	sp, #8
    27a8:	af00      	add	r7, sp, #0
    27aa:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    27ac:	687b      	ldr	r3, [r7, #4]
    27ae:	2b00      	cmp	r3, #0
    27b0:	bf14      	ite	ne
    27b2:	2301      	movne	r3, #1
    27b4:	2300      	moveq	r3, #0
    27b6:	b2db      	uxtb	r3, r3
    27b8:	2253      	movs	r2, #83	; 0x53
    27ba:	490b      	ldr	r1, [pc, #44]	; (27e8 <timer_start+0x44>)
    27bc:	4618      	mov	r0, r3
    27be:	4b0b      	ldr	r3, [pc, #44]	; (27ec <timer_start+0x48>)
    27c0:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    27c2:	687b      	ldr	r3, [r7, #4]
    27c4:	4618      	mov	r0, r3
    27c6:	4b0a      	ldr	r3, [pc, #40]	; (27f0 <timer_start+0x4c>)
    27c8:	4798      	blx	r3
    27ca:	4603      	mov	r3, r0
    27cc:	2b00      	cmp	r3, #0
    27ce:	d002      	beq.n	27d6 <timer_start+0x32>
		return ERR_DENIED;
    27d0:	f06f 0310 	mvn.w	r3, #16
    27d4:	e004      	b.n	27e0 <timer_start+0x3c>
	}
	_timer_start(&descr->device);
    27d6:	687b      	ldr	r3, [r7, #4]
    27d8:	4618      	mov	r0, r3
    27da:	4b06      	ldr	r3, [pc, #24]	; (27f4 <timer_start+0x50>)
    27dc:	4798      	blx	r3

	return ERR_NONE;
    27de:	2300      	movs	r3, #0
}
    27e0:	4618      	mov	r0, r3
    27e2:	3708      	adds	r7, #8
    27e4:	46bd      	mov	sp, r7
    27e6:	bd80      	pop	{r7, pc}
    27e8:	0000e3c8 	.word	0x0000e3c8
    27ec:	000034fd 	.word	0x000034fd
    27f0:	000080a5 	.word	0x000080a5
    27f4:	00008065 	.word	0x00008065

000027f8 <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    27f8:	b580      	push	{r7, lr}
    27fa:	b082      	sub	sp, #8
    27fc:	af00      	add	r7, sp, #0
    27fe:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    2800:	687b      	ldr	r3, [r7, #4]
    2802:	2b00      	cmp	r3, #0
    2804:	bf14      	ite	ne
    2806:	2301      	movne	r3, #1
    2808:	2300      	moveq	r3, #0
    280a:	b2db      	uxtb	r3, r3
    280c:	2261      	movs	r2, #97	; 0x61
    280e:	490d      	ldr	r1, [pc, #52]	; (2844 <timer_stop+0x4c>)
    2810:	4618      	mov	r0, r3
    2812:	4b0d      	ldr	r3, [pc, #52]	; (2848 <timer_stop+0x50>)
    2814:	4798      	blx	r3
	if (!_timer_is_started(&descr->device)) {
    2816:	687b      	ldr	r3, [r7, #4]
    2818:	4618      	mov	r0, r3
    281a:	4b0c      	ldr	r3, [pc, #48]	; (284c <timer_stop+0x54>)
    281c:	4798      	blx	r3
    281e:	4603      	mov	r3, r0
    2820:	f083 0301 	eor.w	r3, r3, #1
    2824:	b2db      	uxtb	r3, r3
    2826:	2b00      	cmp	r3, #0
    2828:	d002      	beq.n	2830 <timer_stop+0x38>
		return ERR_DENIED;
    282a:	f06f 0310 	mvn.w	r3, #16
    282e:	e004      	b.n	283a <timer_stop+0x42>
	}
	_timer_stop(&descr->device);
    2830:	687b      	ldr	r3, [r7, #4]
    2832:	4618      	mov	r0, r3
    2834:	4b06      	ldr	r3, [pc, #24]	; (2850 <timer_stop+0x58>)
    2836:	4798      	blx	r3

	return ERR_NONE;
    2838:	2300      	movs	r3, #0
}
    283a:	4618      	mov	r0, r3
    283c:	3708      	adds	r7, #8
    283e:	46bd      	mov	sp, r7
    2840:	bd80      	pop	{r7, pc}
    2842:	bf00      	nop
    2844:	0000e3c8 	.word	0x0000e3c8
    2848:	000034fd 	.word	0x000034fd
    284c:	000080a5 	.word	0x000080a5
    2850:	00008085 	.word	0x00008085

00002854 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    2854:	b580      	push	{r7, lr}
    2856:	b084      	sub	sp, #16
    2858:	af00      	add	r7, sp, #0
    285a:	6078      	str	r0, [r7, #4]
    285c:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task);
    285e:	687b      	ldr	r3, [r7, #4]
    2860:	2b00      	cmp	r3, #0
    2862:	d004      	beq.n	286e <timer_add_task+0x1a>
    2864:	683b      	ldr	r3, [r7, #0]
    2866:	2b00      	cmp	r3, #0
    2868:	d001      	beq.n	286e <timer_add_task+0x1a>
    286a:	2301      	movs	r3, #1
    286c:	e000      	b.n	2870 <timer_add_task+0x1c>
    286e:	2300      	movs	r3, #0
    2870:	f003 0301 	and.w	r3, r3, #1
    2874:	b2db      	uxtb	r3, r3
    2876:	227a      	movs	r2, #122	; 0x7a
    2878:	492d      	ldr	r1, [pc, #180]	; (2930 <timer_add_task+0xdc>)
    287a:	4618      	mov	r0, r3
    287c:	4b2d      	ldr	r3, [pc, #180]	; (2934 <timer_add_task+0xe0>)
    287e:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    2880:	687b      	ldr	r3, [r7, #4]
    2882:	7e1b      	ldrb	r3, [r3, #24]
    2884:	b2db      	uxtb	r3, r3
    2886:	f043 0301 	orr.w	r3, r3, #1
    288a:	b2da      	uxtb	r2, r3
    288c:	687b      	ldr	r3, [r7, #4]
    288e:	761a      	strb	r2, [r3, #24]
	if (is_list_element(&descr->tasks, task)) {
    2890:	687b      	ldr	r3, [r7, #4]
    2892:	3314      	adds	r3, #20
    2894:	6839      	ldr	r1, [r7, #0]
    2896:	4618      	mov	r0, r3
    2898:	4b27      	ldr	r3, [pc, #156]	; (2938 <timer_add_task+0xe4>)
    289a:	4798      	blx	r3
    289c:	4603      	mov	r3, r0
    289e:	2b00      	cmp	r3, #0
    28a0:	d00f      	beq.n	28c2 <timer_add_task+0x6e>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    28a2:	687b      	ldr	r3, [r7, #4]
    28a4:	7e1b      	ldrb	r3, [r3, #24]
    28a6:	b2db      	uxtb	r3, r3
    28a8:	f023 0301 	bic.w	r3, r3, #1
    28ac:	b2da      	uxtb	r2, r3
    28ae:	687b      	ldr	r3, [r7, #4]
    28b0:	761a      	strb	r2, [r3, #24]
		ASSERT(false);
    28b2:	227f      	movs	r2, #127	; 0x7f
    28b4:	491e      	ldr	r1, [pc, #120]	; (2930 <timer_add_task+0xdc>)
    28b6:	2000      	movs	r0, #0
    28b8:	4b1e      	ldr	r3, [pc, #120]	; (2934 <timer_add_task+0xe0>)
    28ba:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    28bc:	f06f 0311 	mvn.w	r3, #17
    28c0:	e032      	b.n	2928 <timer_add_task+0xd4>
	}
	task->time_label = descr->time;
    28c2:	687b      	ldr	r3, [r7, #4]
    28c4:	691a      	ldr	r2, [r3, #16]
    28c6:	683b      	ldr	r3, [r7, #0]
    28c8:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    28ca:	687b      	ldr	r3, [r7, #4]
    28cc:	f103 0014 	add.w	r0, r3, #20
    28d0:	687b      	ldr	r3, [r7, #4]
    28d2:	691b      	ldr	r3, [r3, #16]
    28d4:	461a      	mov	r2, r3
    28d6:	6839      	ldr	r1, [r7, #0]
    28d8:	4b18      	ldr	r3, [pc, #96]	; (293c <timer_add_task+0xe8>)
    28da:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    28dc:	687b      	ldr	r3, [r7, #4]
    28de:	7e1b      	ldrb	r3, [r3, #24]
    28e0:	b2db      	uxtb	r3, r3
    28e2:	f023 0301 	bic.w	r3, r3, #1
    28e6:	b2da      	uxtb	r2, r3
    28e8:	687b      	ldr	r3, [r7, #4]
    28ea:	761a      	strb	r2, [r3, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    28ec:	687b      	ldr	r3, [r7, #4]
    28ee:	7e1b      	ldrb	r3, [r3, #24]
    28f0:	b2db      	uxtb	r3, r3
    28f2:	f003 0302 	and.w	r3, r3, #2
    28f6:	2b00      	cmp	r3, #0
    28f8:	d015      	beq.n	2926 <timer_add_task+0xd2>
		CRITICAL_SECTION_ENTER()
    28fa:	f107 030c 	add.w	r3, r7, #12
    28fe:	4618      	mov	r0, r3
    2900:	4b0f      	ldr	r3, [pc, #60]	; (2940 <timer_add_task+0xec>)
    2902:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    2904:	687b      	ldr	r3, [r7, #4]
    2906:	7e1b      	ldrb	r3, [r3, #24]
    2908:	b2db      	uxtb	r3, r3
    290a:	f023 0302 	bic.w	r3, r3, #2
    290e:	b2da      	uxtb	r2, r3
    2910:	687b      	ldr	r3, [r7, #4]
    2912:	761a      	strb	r2, [r3, #24]
		_timer_set_irq(&descr->device);
    2914:	687b      	ldr	r3, [r7, #4]
    2916:	4618      	mov	r0, r3
    2918:	4b0a      	ldr	r3, [pc, #40]	; (2944 <timer_add_task+0xf0>)
    291a:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    291c:	f107 030c 	add.w	r3, r7, #12
    2920:	4618      	mov	r0, r3
    2922:	4b09      	ldr	r3, [pc, #36]	; (2948 <timer_add_task+0xf4>)
    2924:	4798      	blx	r3
	}

	return ERR_NONE;
    2926:	2300      	movs	r3, #0
}
    2928:	4618      	mov	r0, r3
    292a:	3710      	adds	r7, #16
    292c:	46bd      	mov	sp, r7
    292e:	bd80      	pop	{r7, pc}
    2930:	0000e3c8 	.word	0x0000e3c8
    2934:	000034fd 	.word	0x000034fd
    2938:	00003525 	.word	0x00003525
    293c:	00002a3d 	.word	0x00002a3d
    2940:	0000b1cd 	.word	0x0000b1cd
    2944:	000080e5 	.word	0x000080e5
    2948:	0000b1f3 	.word	0x0000b1f3

0000294c <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    294c:	b580      	push	{r7, lr}
    294e:	b084      	sub	sp, #16
    2950:	af00      	add	r7, sp, #0
    2952:	6078      	str	r0, [r7, #4]
    2954:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task);
    2956:	687b      	ldr	r3, [r7, #4]
    2958:	2b00      	cmp	r3, #0
    295a:	d004      	beq.n	2966 <timer_remove_task+0x1a>
    295c:	683b      	ldr	r3, [r7, #0]
    295e:	2b00      	cmp	r3, #0
    2960:	d001      	beq.n	2966 <timer_remove_task+0x1a>
    2962:	2301      	movs	r3, #1
    2964:	e000      	b.n	2968 <timer_remove_task+0x1c>
    2966:	2300      	movs	r3, #0
    2968:	f003 0301 	and.w	r3, r3, #1
    296c:	b2db      	uxtb	r3, r3
    296e:	2295      	movs	r2, #149	; 0x95
    2970:	492b      	ldr	r1, [pc, #172]	; (2a20 <timer_remove_task+0xd4>)
    2972:	4618      	mov	r0, r3
    2974:	4b2b      	ldr	r3, [pc, #172]	; (2a24 <timer_remove_task+0xd8>)
    2976:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    2978:	687b      	ldr	r3, [r7, #4]
    297a:	7e1b      	ldrb	r3, [r3, #24]
    297c:	b2db      	uxtb	r3, r3
    297e:	f043 0301 	orr.w	r3, r3, #1
    2982:	b2da      	uxtb	r2, r3
    2984:	687b      	ldr	r3, [r7, #4]
    2986:	761a      	strb	r2, [r3, #24]
	if (!is_list_element(&descr->tasks, task)) {
    2988:	687b      	ldr	r3, [r7, #4]
    298a:	3314      	adds	r3, #20
    298c:	6839      	ldr	r1, [r7, #0]
    298e:	4618      	mov	r0, r3
    2990:	4b25      	ldr	r3, [pc, #148]	; (2a28 <timer_remove_task+0xdc>)
    2992:	4798      	blx	r3
    2994:	4603      	mov	r3, r0
    2996:	f083 0301 	eor.w	r3, r3, #1
    299a:	b2db      	uxtb	r3, r3
    299c:	2b00      	cmp	r3, #0
    299e:	d00f      	beq.n	29c0 <timer_remove_task+0x74>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    29a0:	687b      	ldr	r3, [r7, #4]
    29a2:	7e1b      	ldrb	r3, [r3, #24]
    29a4:	b2db      	uxtb	r3, r3
    29a6:	f023 0301 	bic.w	r3, r3, #1
    29aa:	b2da      	uxtb	r2, r3
    29ac:	687b      	ldr	r3, [r7, #4]
    29ae:	761a      	strb	r2, [r3, #24]
		ASSERT(false);
    29b0:	229a      	movs	r2, #154	; 0x9a
    29b2:	491b      	ldr	r1, [pc, #108]	; (2a20 <timer_remove_task+0xd4>)
    29b4:	2000      	movs	r0, #0
    29b6:	4b1b      	ldr	r3, [pc, #108]	; (2a24 <timer_remove_task+0xd8>)
    29b8:	4798      	blx	r3
		return ERR_NOT_FOUND;
    29ba:	f06f 0309 	mvn.w	r3, #9
    29be:	e02b      	b.n	2a18 <timer_remove_task+0xcc>
	}
	list_delete_element(&descr->tasks, task);
    29c0:	687b      	ldr	r3, [r7, #4]
    29c2:	3314      	adds	r3, #20
    29c4:	6839      	ldr	r1, [r7, #0]
    29c6:	4618      	mov	r0, r3
    29c8:	4b18      	ldr	r3, [pc, #96]	; (2a2c <timer_remove_task+0xe0>)
    29ca:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    29cc:	687b      	ldr	r3, [r7, #4]
    29ce:	7e1b      	ldrb	r3, [r3, #24]
    29d0:	b2db      	uxtb	r3, r3
    29d2:	f023 0301 	bic.w	r3, r3, #1
    29d6:	b2da      	uxtb	r2, r3
    29d8:	687b      	ldr	r3, [r7, #4]
    29da:	761a      	strb	r2, [r3, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    29dc:	687b      	ldr	r3, [r7, #4]
    29de:	7e1b      	ldrb	r3, [r3, #24]
    29e0:	b2db      	uxtb	r3, r3
    29e2:	f003 0302 	and.w	r3, r3, #2
    29e6:	2b00      	cmp	r3, #0
    29e8:	d015      	beq.n	2a16 <timer_remove_task+0xca>
		CRITICAL_SECTION_ENTER()
    29ea:	f107 030c 	add.w	r3, r7, #12
    29ee:	4618      	mov	r0, r3
    29f0:	4b0f      	ldr	r3, [pc, #60]	; (2a30 <timer_remove_task+0xe4>)
    29f2:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    29f4:	687b      	ldr	r3, [r7, #4]
    29f6:	7e1b      	ldrb	r3, [r3, #24]
    29f8:	b2db      	uxtb	r3, r3
    29fa:	f023 0302 	bic.w	r3, r3, #2
    29fe:	b2da      	uxtb	r2, r3
    2a00:	687b      	ldr	r3, [r7, #4]
    2a02:	761a      	strb	r2, [r3, #24]
		_timer_set_irq(&descr->device);
    2a04:	687b      	ldr	r3, [r7, #4]
    2a06:	4618      	mov	r0, r3
    2a08:	4b0a      	ldr	r3, [pc, #40]	; (2a34 <timer_remove_task+0xe8>)
    2a0a:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    2a0c:	f107 030c 	add.w	r3, r7, #12
    2a10:	4618      	mov	r0, r3
    2a12:	4b09      	ldr	r3, [pc, #36]	; (2a38 <timer_remove_task+0xec>)
    2a14:	4798      	blx	r3
	}

	return ERR_NONE;
    2a16:	2300      	movs	r3, #0
}
    2a18:	4618      	mov	r0, r3
    2a1a:	3710      	adds	r7, #16
    2a1c:	46bd      	mov	sp, r7
    2a1e:	bd80      	pop	{r7, pc}
    2a20:	0000e3c8 	.word	0x0000e3c8
    2a24:	000034fd 	.word	0x000034fd
    2a28:	00003525 	.word	0x00003525
    2a2c:	00003687 	.word	0x00003687
    2a30:	0000b1cd 	.word	0x0000b1cd
    2a34:	000080e5 	.word	0x000080e5
    2a38:	0000b1f3 	.word	0x0000b1f3

00002a3c <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    2a3c:	b580      	push	{r7, lr}
    2a3e:	b088      	sub	sp, #32
    2a40:	af00      	add	r7, sp, #0
    2a42:	60f8      	str	r0, [r7, #12]
    2a44:	60b9      	str	r1, [r7, #8]
    2a46:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    2a48:	2300      	movs	r3, #0
    2a4a:	61bb      	str	r3, [r7, #24]
    2a4c:	68f8      	ldr	r0, [r7, #12]
    2a4e:	4b23      	ldr	r3, [pc, #140]	; (2adc <timer_add_timer_task+0xa0>)
    2a50:	4798      	blx	r3
    2a52:	6138      	str	r0, [r7, #16]

	if (!head) {
    2a54:	693b      	ldr	r3, [r7, #16]
    2a56:	2b00      	cmp	r3, #0
    2a58:	d104      	bne.n	2a64 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    2a5a:	68b9      	ldr	r1, [r7, #8]
    2a5c:	68f8      	ldr	r0, [r7, #12]
    2a5e:	4b20      	ldr	r3, [pc, #128]	; (2ae0 <timer_add_timer_task+0xa4>)
    2a60:	4798      	blx	r3
		return;
    2a62:	e037      	b.n	2ad4 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2a64:	693b      	ldr	r3, [r7, #16]
    2a66:	61fb      	str	r3, [r7, #28]
    2a68:	e022      	b.n	2ab0 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    2a6a:	69fb      	ldr	r3, [r7, #28]
    2a6c:	685a      	ldr	r2, [r3, #4]
    2a6e:	687b      	ldr	r3, [r7, #4]
    2a70:	429a      	cmp	r2, r3
    2a72:	d808      	bhi.n	2a86 <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    2a74:	69fb      	ldr	r3, [r7, #28]
    2a76:	689a      	ldr	r2, [r3, #8]
    2a78:	69fb      	ldr	r3, [r7, #28]
    2a7a:	6859      	ldr	r1, [r3, #4]
    2a7c:	687b      	ldr	r3, [r7, #4]
    2a7e:	1acb      	subs	r3, r1, r3
    2a80:	4413      	add	r3, r2
    2a82:	617b      	str	r3, [r7, #20]
    2a84:	e009      	b.n	2a9a <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    2a86:	69fb      	ldr	r3, [r7, #28]
    2a88:	689a      	ldr	r2, [r3, #8]
    2a8a:	69fb      	ldr	r3, [r7, #28]
    2a8c:	685b      	ldr	r3, [r3, #4]
    2a8e:	441a      	add	r2, r3
    2a90:	687b      	ldr	r3, [r7, #4]
    2a92:	425b      	negs	r3, r3
    2a94:	4413      	add	r3, r2
    2a96:	3301      	adds	r3, #1
    2a98:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    2a9a:	68bb      	ldr	r3, [r7, #8]
    2a9c:	689a      	ldr	r2, [r3, #8]
    2a9e:	697b      	ldr	r3, [r7, #20]
    2aa0:	429a      	cmp	r2, r3
    2aa2:	d909      	bls.n	2ab8 <timer_add_timer_task+0x7c>
			break;
		prev = it;
    2aa4:	69fb      	ldr	r3, [r7, #28]
    2aa6:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2aa8:	69f8      	ldr	r0, [r7, #28]
    2aaa:	4b0e      	ldr	r3, [pc, #56]	; (2ae4 <timer_add_timer_task+0xa8>)
    2aac:	4798      	blx	r3
    2aae:	61f8      	str	r0, [r7, #28]
    2ab0:	69fb      	ldr	r3, [r7, #28]
    2ab2:	2b00      	cmp	r3, #0
    2ab4:	d1d9      	bne.n	2a6a <timer_add_timer_task+0x2e>
    2ab6:	e000      	b.n	2aba <timer_add_timer_task+0x7e>
			break;
    2ab8:	bf00      	nop
	}

	if (it == head) {
    2aba:	69fa      	ldr	r2, [r7, #28]
    2abc:	693b      	ldr	r3, [r7, #16]
    2abe:	429a      	cmp	r2, r3
    2ac0:	d104      	bne.n	2acc <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    2ac2:	68b9      	ldr	r1, [r7, #8]
    2ac4:	68f8      	ldr	r0, [r7, #12]
    2ac6:	4b06      	ldr	r3, [pc, #24]	; (2ae0 <timer_add_timer_task+0xa4>)
    2ac8:	4798      	blx	r3
    2aca:	e003      	b.n	2ad4 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    2acc:	68b9      	ldr	r1, [r7, #8]
    2ace:	69b8      	ldr	r0, [r7, #24]
    2ad0:	4b05      	ldr	r3, [pc, #20]	; (2ae8 <timer_add_timer_task+0xac>)
    2ad2:	4798      	blx	r3
	}
}
    2ad4:	3720      	adds	r7, #32
    2ad6:	46bd      	mov	sp, r7
    2ad8:	bd80      	pop	{r7, pc}
    2ada:	bf00      	nop
    2adc:	00002709 	.word	0x00002709
    2ae0:	0000355d 	.word	0x0000355d
    2ae4:	00002721 	.word	0x00002721
    2ae8:	000035b5 	.word	0x000035b5

00002aec <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    2aec:	b580      	push	{r7, lr}
    2aee:	b086      	sub	sp, #24
    2af0:	af00      	add	r7, sp, #0
    2af2:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    2af4:	687b      	ldr	r3, [r7, #4]
    2af6:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    2af8:	693b      	ldr	r3, [r7, #16]
    2afa:	3314      	adds	r3, #20
    2afc:	4618      	mov	r0, r3
    2afe:	4b27      	ldr	r3, [pc, #156]	; (2b9c <timer_process_counted+0xb0>)
    2b00:	4798      	blx	r3
    2b02:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    2b04:	693b      	ldr	r3, [r7, #16]
    2b06:	691b      	ldr	r3, [r3, #16]
    2b08:	1c5a      	adds	r2, r3, #1
    2b0a:	693b      	ldr	r3, [r7, #16]
    2b0c:	611a      	str	r2, [r3, #16]
    2b0e:	693b      	ldr	r3, [r7, #16]
    2b10:	691b      	ldr	r3, [r3, #16]
    2b12:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    2b14:	693b      	ldr	r3, [r7, #16]
    2b16:	7e1b      	ldrb	r3, [r3, #24]
    2b18:	b2db      	uxtb	r3, r3
    2b1a:	f003 0301 	and.w	r3, r3, #1
    2b1e:	2b00      	cmp	r3, #0
    2b20:	d106      	bne.n	2b30 <timer_process_counted+0x44>
    2b22:	693b      	ldr	r3, [r7, #16]
    2b24:	7e1b      	ldrb	r3, [r3, #24]
    2b26:	b2db      	uxtb	r3, r3
    2b28:	f003 0302 	and.w	r3, r3, #2
    2b2c:	2b00      	cmp	r3, #0
    2b2e:	d027      	beq.n	2b80 <timer_process_counted+0x94>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    2b30:	693b      	ldr	r3, [r7, #16]
    2b32:	7e1b      	ldrb	r3, [r3, #24]
    2b34:	b2db      	uxtb	r3, r3
    2b36:	f043 0302 	orr.w	r3, r3, #2
    2b3a:	b2da      	uxtb	r2, r3
    2b3c:	693b      	ldr	r3, [r7, #16]
    2b3e:	761a      	strb	r2, [r3, #24]
		return;
    2b40:	e029      	b.n	2b96 <timer_process_counted+0xaa>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    2b42:	697b      	ldr	r3, [r7, #20]
    2b44:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    2b46:	693b      	ldr	r3, [r7, #16]
    2b48:	3314      	adds	r3, #20
    2b4a:	4618      	mov	r0, r3
    2b4c:	4b14      	ldr	r3, [pc, #80]	; (2ba0 <timer_process_counted+0xb4>)
    2b4e:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    2b50:	68bb      	ldr	r3, [r7, #8]
    2b52:	7c1b      	ldrb	r3, [r3, #16]
    2b54:	2b01      	cmp	r3, #1
    2b56:	d109      	bne.n	2b6c <timer_process_counted+0x80>
			tmp->time_label = time;
    2b58:	68bb      	ldr	r3, [r7, #8]
    2b5a:	68fa      	ldr	r2, [r7, #12]
    2b5c:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    2b5e:	693b      	ldr	r3, [r7, #16]
    2b60:	3314      	adds	r3, #20
    2b62:	68fa      	ldr	r2, [r7, #12]
    2b64:	68b9      	ldr	r1, [r7, #8]
    2b66:	4618      	mov	r0, r3
    2b68:	4b0e      	ldr	r3, [pc, #56]	; (2ba4 <timer_process_counted+0xb8>)
    2b6a:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    2b6c:	693b      	ldr	r3, [r7, #16]
    2b6e:	3314      	adds	r3, #20
    2b70:	4618      	mov	r0, r3
    2b72:	4b0a      	ldr	r3, [pc, #40]	; (2b9c <timer_process_counted+0xb0>)
    2b74:	4798      	blx	r3
    2b76:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    2b78:	68bb      	ldr	r3, [r7, #8]
    2b7a:	68db      	ldr	r3, [r3, #12]
    2b7c:	68b8      	ldr	r0, [r7, #8]
    2b7e:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    2b80:	697b      	ldr	r3, [r7, #20]
    2b82:	2b00      	cmp	r3, #0
    2b84:	d007      	beq.n	2b96 <timer_process_counted+0xaa>
    2b86:	697b      	ldr	r3, [r7, #20]
    2b88:	685b      	ldr	r3, [r3, #4]
    2b8a:	68fa      	ldr	r2, [r7, #12]
    2b8c:	1ad2      	subs	r2, r2, r3
    2b8e:	697b      	ldr	r3, [r7, #20]
    2b90:	689b      	ldr	r3, [r3, #8]
    2b92:	429a      	cmp	r2, r3
    2b94:	d2d5      	bcs.n	2b42 <timer_process_counted+0x56>
	}
}
    2b96:	3718      	adds	r7, #24
    2b98:	46bd      	mov	sp, r7
    2b9a:	bd80      	pop	{r7, pc}
    2b9c:	00002709 	.word	0x00002709
    2ba0:	00003655 	.word	0x00003655
    2ba4:	00002a3d 	.word	0x00002a3d

00002ba8 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    2ba8:	b480      	push	{r7}
    2baa:	b085      	sub	sp, #20
    2bac:	af00      	add	r7, sp, #0
    2bae:	4603      	mov	r3, r0
    2bb0:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2bb2:	2300      	movs	r3, #0
    2bb4:	73fb      	strb	r3, [r7, #15]
    2bb6:	e029      	b.n	2c0c <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    2bb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2bbc:	4a19      	ldr	r2, [pc, #100]	; (2c24 <_usb_d_find_ep+0x7c>)
    2bbe:	015b      	lsls	r3, r3, #5
    2bc0:	4413      	add	r3, r2
    2bc2:	3301      	adds	r3, #1
    2bc4:	781b      	ldrb	r3, [r3, #0]
    2bc6:	79fa      	ldrb	r2, [r7, #7]
    2bc8:	429a      	cmp	r2, r3
    2bca:	d102      	bne.n	2bd2 <_usb_d_find_ep+0x2a>
			return i;
    2bcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2bd0:	e022      	b.n	2c18 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    2bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2bd6:	4a13      	ldr	r2, [pc, #76]	; (2c24 <_usb_d_find_ep+0x7c>)
    2bd8:	015b      	lsls	r3, r3, #5
    2bda:	4413      	add	r3, r2
    2bdc:	781b      	ldrb	r3, [r3, #0]
    2bde:	2b00      	cmp	r3, #0
    2be0:	d10e      	bne.n	2c00 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    2be2:	79fb      	ldrb	r3, [r7, #7]
    2be4:	f003 030f 	and.w	r3, r3, #15
    2be8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2bec:	490d      	ldr	r1, [pc, #52]	; (2c24 <_usb_d_find_ep+0x7c>)
    2bee:	0152      	lsls	r2, r2, #5
    2bf0:	440a      	add	r2, r1
    2bf2:	3201      	adds	r2, #1
    2bf4:	7812      	ldrb	r2, [r2, #0]
    2bf6:	4293      	cmp	r3, r2
    2bf8:	d102      	bne.n	2c00 <_usb_d_find_ep+0x58>
			return i;
    2bfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2bfe:	e00b      	b.n	2c18 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2c00:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2c04:	b2db      	uxtb	r3, r3
    2c06:	3301      	adds	r3, #1
    2c08:	b2db      	uxtb	r3, r3
    2c0a:	73fb      	strb	r3, [r7, #15]
    2c0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2c10:	2b03      	cmp	r3, #3
    2c12:	ddd1      	ble.n	2bb8 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    2c14:	f04f 33ff 	mov.w	r3, #4294967295
}
    2c18:	4618      	mov	r0, r3
    2c1a:	3714      	adds	r7, #20
    2c1c:	46bd      	mov	sp, r7
    2c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c22:	4770      	bx	lr
    2c24:	20000694 	.word	0x20000694

00002c28 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    2c28:	b580      	push	{r7, lr}
    2c2a:	b088      	sub	sp, #32
    2c2c:	af00      	add	r7, sp, #0
    2c2e:	60ba      	str	r2, [r7, #8]
    2c30:	607b      	str	r3, [r7, #4]
    2c32:	4603      	mov	r3, r0
    2c34:	73fb      	strb	r3, [r7, #15]
    2c36:	460b      	mov	r3, r1
    2c38:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    2c3a:	68bb      	ldr	r3, [r7, #8]
    2c3c:	617b      	str	r3, [r7, #20]
    2c3e:	687b      	ldr	r3, [r7, #4]
    2c40:	61bb      	str	r3, [r7, #24]
    2c42:	7bbb      	ldrb	r3, [r7, #14]
    2c44:	2b00      	cmp	r3, #0
    2c46:	d004      	beq.n	2c52 <_usb_d_trans+0x2a>
    2c48:	7bfb      	ldrb	r3, [r7, #15]
    2c4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2c4e:	b2db      	uxtb	r3, r3
    2c50:	e003      	b.n	2c5a <_usb_d_trans+0x32>
    2c52:	7bfb      	ldrb	r3, [r7, #15]
    2c54:	f003 030f 	and.w	r3, r3, #15
    2c58:	b2db      	uxtb	r3, r3
    2c5a:	773b      	strb	r3, [r7, #28]
    2c5c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    2c60:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    2c62:	f107 0314 	add.w	r3, r7, #20
    2c66:	4618      	mov	r0, r3
    2c68:	4b03      	ldr	r3, [pc, #12]	; (2c78 <_usb_d_trans+0x50>)
    2c6a:	4798      	blx	r3
    2c6c:	4603      	mov	r3, r0
}
    2c6e:	4618      	mov	r0, r3
    2c70:	3720      	adds	r7, #32
    2c72:	46bd      	mov	sp, r7
    2c74:	bd80      	pop	{r7, pc}
    2c76:	bf00      	nop
    2c78:	0000a801 	.word	0x0000a801

00002c7c <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    2c7c:	b480      	push	{r7}
    2c7e:	b085      	sub	sp, #20
    2c80:	af00      	add	r7, sp, #0
    2c82:	60f8      	str	r0, [r7, #12]
    2c84:	60b9      	str	r1, [r7, #8]
    2c86:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    2c88:	2300      	movs	r3, #0
}
    2c8a:	4618      	mov	r0, r3
    2c8c:	3714      	adds	r7, #20
    2c8e:	46bd      	mov	sp, r7
    2c90:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c94:	4770      	bx	lr
	...

00002c98 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    2c98:	b580      	push	{r7, lr}
    2c9a:	b086      	sub	sp, #24
    2c9c:	af00      	add	r7, sp, #0
    2c9e:	4603      	mov	r3, r0
    2ca0:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2ca2:	79fb      	ldrb	r3, [r7, #7]
    2ca4:	4618      	mov	r0, r3
    2ca6:	4b2a      	ldr	r3, [pc, #168]	; (2d50 <usb_d_cb_trans_setup+0xb8>)
    2ca8:	4798      	blx	r3
    2caa:	4603      	mov	r3, r0
    2cac:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2cae:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2cb2:	015b      	lsls	r3, r3, #5
    2cb4:	4a27      	ldr	r2, [pc, #156]	; (2d54 <usb_d_cb_trans_setup+0xbc>)
    2cb6:	4413      	add	r3, r2
    2cb8:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    2cba:	693b      	ldr	r3, [r7, #16]
    2cbc:	330c      	adds	r3, #12
    2cbe:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    2cc0:	79fb      	ldrb	r3, [r7, #7]
    2cc2:	68f9      	ldr	r1, [r7, #12]
    2cc4:	4618      	mov	r0, r3
    2cc6:	4b24      	ldr	r3, [pc, #144]	; (2d58 <usb_d_cb_trans_setup+0xc0>)
    2cc8:	4798      	blx	r3
    2cca:	4603      	mov	r3, r0
    2ccc:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    2cce:	7afb      	ldrb	r3, [r7, #11]
    2cd0:	2b08      	cmp	r3, #8
    2cd2:	d00d      	beq.n	2cf0 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2cd4:	79fb      	ldrb	r3, [r7, #7]
    2cd6:	2101      	movs	r1, #1
    2cd8:	4618      	mov	r0, r3
    2cda:	4b20      	ldr	r3, [pc, #128]	; (2d5c <usb_d_cb_trans_setup+0xc4>)
    2cdc:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    2cde:	79fb      	ldrb	r3, [r7, #7]
    2ce0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2ce4:	b2db      	uxtb	r3, r3
    2ce6:	2101      	movs	r1, #1
    2ce8:	4618      	mov	r0, r3
    2cea:	4b1c      	ldr	r3, [pc, #112]	; (2d5c <usb_d_cb_trans_setup+0xc4>)
    2cec:	4798      	blx	r3
		return;
    2cee:	e02b      	b.n	2d48 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2cf0:	79fb      	ldrb	r3, [r7, #7]
    2cf2:	2100      	movs	r1, #0
    2cf4:	4618      	mov	r0, r3
    2cf6:	4b19      	ldr	r3, [pc, #100]	; (2d5c <usb_d_cb_trans_setup+0xc4>)
    2cf8:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    2cfa:	79fb      	ldrb	r3, [r7, #7]
    2cfc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2d00:	b2db      	uxtb	r3, r3
    2d02:	2100      	movs	r1, #0
    2d04:	4618      	mov	r0, r3
    2d06:	4b15      	ldr	r3, [pc, #84]	; (2d5c <usb_d_cb_trans_setup+0xc4>)
    2d08:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    2d0a:	693b      	ldr	r3, [r7, #16]
    2d0c:	2201      	movs	r2, #1
    2d0e:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    2d10:	693b      	ldr	r3, [r7, #16]
    2d12:	695b      	ldr	r3, [r3, #20]
    2d14:	79fa      	ldrb	r2, [r7, #7]
    2d16:	68f9      	ldr	r1, [r7, #12]
    2d18:	4610      	mov	r0, r2
    2d1a:	4798      	blx	r3
    2d1c:	4603      	mov	r3, r0
    2d1e:	f083 0301 	eor.w	r3, r3, #1
    2d22:	b2db      	uxtb	r3, r3
    2d24:	2b00      	cmp	r3, #0
    2d26:	d00f      	beq.n	2d48 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    2d28:	693b      	ldr	r3, [r7, #16]
    2d2a:	2205      	movs	r2, #5
    2d2c:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2d2e:	79fb      	ldrb	r3, [r7, #7]
    2d30:	2101      	movs	r1, #1
    2d32:	4618      	mov	r0, r3
    2d34:	4b09      	ldr	r3, [pc, #36]	; (2d5c <usb_d_cb_trans_setup+0xc4>)
    2d36:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    2d38:	79fb      	ldrb	r3, [r7, #7]
    2d3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2d3e:	b2db      	uxtb	r3, r3
    2d40:	2101      	movs	r1, #1
    2d42:	4618      	mov	r0, r3
    2d44:	4b05      	ldr	r3, [pc, #20]	; (2d5c <usb_d_cb_trans_setup+0xc4>)
    2d46:	4798      	blx	r3
	}
}
    2d48:	3718      	adds	r7, #24
    2d4a:	46bd      	mov	sp, r7
    2d4c:	bd80      	pop	{r7, pc}
    2d4e:	bf00      	nop
    2d50:	00002ba9 	.word	0x00002ba9
    2d54:	20000694 	.word	0x20000694
    2d58:	0000a759 	.word	0x0000a759
    2d5c:	0000a5d1 	.word	0x0000a5d1

00002d60 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    2d60:	b580      	push	{r7, lr}
    2d62:	b084      	sub	sp, #16
    2d64:	af00      	add	r7, sp, #0
    2d66:	4603      	mov	r3, r0
    2d68:	6039      	str	r1, [r7, #0]
    2d6a:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2d6c:	79fb      	ldrb	r3, [r7, #7]
    2d6e:	4618      	mov	r0, r3
    2d70:	4b0d      	ldr	r3, [pc, #52]	; (2da8 <usb_d_cb_trans_more+0x48>)
    2d72:	4798      	blx	r3
    2d74:	4603      	mov	r3, r0
    2d76:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2d78:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2d7c:	015b      	lsls	r3, r3, #5
    2d7e:	4a0b      	ldr	r2, [pc, #44]	; (2dac <usb_d_cb_trans_more+0x4c>)
    2d80:	4413      	add	r3, r2
    2d82:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    2d84:	68bb      	ldr	r3, [r7, #8]
    2d86:	789b      	ldrb	r3, [r3, #2]
    2d88:	2b03      	cmp	r3, #3
    2d8a:	d107      	bne.n	2d9c <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    2d8c:	68bb      	ldr	r3, [r7, #8]
    2d8e:	699b      	ldr	r3, [r3, #24]
    2d90:	79fa      	ldrb	r2, [r7, #7]
    2d92:	6839      	ldr	r1, [r7, #0]
    2d94:	4610      	mov	r0, r2
    2d96:	4798      	blx	r3
    2d98:	4603      	mov	r3, r0
    2d9a:	e000      	b.n	2d9e <usb_d_cb_trans_more+0x3e>
	}
	return false;
    2d9c:	2300      	movs	r3, #0
}
    2d9e:	4618      	mov	r0, r3
    2da0:	3710      	adds	r7, #16
    2da2:	46bd      	mov	sp, r7
    2da4:	bd80      	pop	{r7, pc}
    2da6:	bf00      	nop
    2da8:	00002ba9 	.word	0x00002ba9
    2dac:	20000694 	.word	0x20000694

00002db0 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    2db0:	b590      	push	{r4, r7, lr}
    2db2:	b087      	sub	sp, #28
    2db4:	af02      	add	r7, sp, #8
    2db6:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    2db8:	687b      	ldr	r3, [r7, #4]
    2dba:	789b      	ldrb	r3, [r3, #2]
    2dbc:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    2dbe:	687b      	ldr	r3, [r7, #4]
    2dc0:	7b1b      	ldrb	r3, [r3, #12]
    2dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    2dc6:	2b00      	cmp	r3, #0
    2dc8:	bf14      	ite	ne
    2dca:	2301      	movne	r3, #1
    2dcc:	2300      	moveq	r3, #0
    2dce:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    2dd0:	7bfb      	ldrb	r3, [r7, #15]
    2dd2:	2b03      	cmp	r3, #3
    2dd4:	d13a      	bne.n	2e4c <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    2dd6:	687b      	ldr	r3, [r7, #4]
    2dd8:	69db      	ldr	r3, [r3, #28]
    2dda:	687a      	ldr	r2, [r7, #4]
    2ddc:	7850      	ldrb	r0, [r2, #1]
    2dde:	687a      	ldr	r2, [r7, #4]
    2de0:	320c      	adds	r2, #12
    2de2:	2101      	movs	r1, #1
    2de4:	4798      	blx	r3
    2de6:	4603      	mov	r3, r0
    2de8:	737b      	strb	r3, [r7, #13]
		if (err) {
    2dea:	7b7b      	ldrb	r3, [r7, #13]
    2dec:	2b00      	cmp	r3, #0
    2dee:	d015      	beq.n	2e1c <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    2df0:	687b      	ldr	r3, [r7, #4]
    2df2:	2205      	movs	r2, #5
    2df4:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    2df6:	687b      	ldr	r3, [r7, #4]
    2df8:	2202      	movs	r2, #2
    2dfa:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    2dfc:	7bbb      	ldrb	r3, [r7, #14]
    2dfe:	2b00      	cmp	r3, #0
    2e00:	d002      	beq.n	2e08 <usb_d_ctrl_trans_done+0x58>
    2e02:	687b      	ldr	r3, [r7, #4]
    2e04:	785b      	ldrb	r3, [r3, #1]
    2e06:	e004      	b.n	2e12 <usb_d_ctrl_trans_done+0x62>
    2e08:	687b      	ldr	r3, [r7, #4]
    2e0a:	785b      	ldrb	r3, [r3, #1]
    2e0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2e10:	b2db      	uxtb	r3, r3
    2e12:	2101      	movs	r1, #1
    2e14:	4618      	mov	r0, r3
    2e16:	4b15      	ldr	r3, [pc, #84]	; (2e6c <usb_d_ctrl_trans_done+0xbc>)
    2e18:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    2e1a:	e022      	b.n	2e62 <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    2e1c:	687b      	ldr	r3, [r7, #4]
    2e1e:	2204      	movs	r2, #4
    2e20:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    2e22:	687b      	ldr	r3, [r7, #4]
    2e24:	7858      	ldrb	r0, [r3, #1]
    2e26:	7bbb      	ldrb	r3, [r7, #14]
    2e28:	2b00      	cmp	r3, #0
    2e2a:	bf14      	ite	ne
    2e2c:	2301      	movne	r3, #1
    2e2e:	2300      	moveq	r3, #0
    2e30:	b2db      	uxtb	r3, r3
    2e32:	f083 0301 	eor.w	r3, r3, #1
    2e36:	b2db      	uxtb	r3, r3
    2e38:	f003 0301 	and.w	r3, r3, #1
    2e3c:	b2d9      	uxtb	r1, r3
    2e3e:	2301      	movs	r3, #1
    2e40:	9300      	str	r3, [sp, #0]
    2e42:	2300      	movs	r3, #0
    2e44:	2200      	movs	r2, #0
    2e46:	4c0a      	ldr	r4, [pc, #40]	; (2e70 <usb_d_ctrl_trans_done+0xc0>)
    2e48:	47a0      	blx	r4
}
    2e4a:	e00a      	b.n	2e62 <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    2e4c:	687b      	ldr	r3, [r7, #4]
    2e4e:	69db      	ldr	r3, [r3, #28]
    2e50:	687a      	ldr	r2, [r7, #4]
    2e52:	7850      	ldrb	r0, [r2, #1]
    2e54:	687a      	ldr	r2, [r7, #4]
    2e56:	320c      	adds	r2, #12
    2e58:	2100      	movs	r1, #0
    2e5a:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2e5c:	687b      	ldr	r3, [r7, #4]
    2e5e:	2202      	movs	r2, #2
    2e60:	709a      	strb	r2, [r3, #2]
}
    2e62:	bf00      	nop
    2e64:	3714      	adds	r7, #20
    2e66:	46bd      	mov	sp, r7
    2e68:	bd90      	pop	{r4, r7, pc}
    2e6a:	bf00      	nop
    2e6c:	0000a5d1 	.word	0x0000a5d1
    2e70:	00002c29 	.word	0x00002c29

00002e74 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    2e74:	b580      	push	{r7, lr}
    2e76:	b086      	sub	sp, #24
    2e78:	af00      	add	r7, sp, #0
    2e7a:	4603      	mov	r3, r0
    2e7c:	60b9      	str	r1, [r7, #8]
    2e7e:	607a      	str	r2, [r7, #4]
    2e80:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2e82:	7bfb      	ldrb	r3, [r7, #15]
    2e84:	4618      	mov	r0, r3
    2e86:	4b2f      	ldr	r3, [pc, #188]	; (2f44 <_usb_d_cb_trans_done+0xd0>)
    2e88:	4798      	blx	r3
    2e8a:	4603      	mov	r3, r0
    2e8c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2e8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2e92:	015b      	lsls	r3, r3, #5
    2e94:	4a2c      	ldr	r2, [pc, #176]	; (2f48 <_usb_d_cb_trans_done+0xd4>)
    2e96:	4413      	add	r3, r2
    2e98:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    2e9a:	68bb      	ldr	r3, [r7, #8]
    2e9c:	2b00      	cmp	r3, #0
    2e9e:	d10e      	bne.n	2ebe <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    2ea0:	693b      	ldr	r3, [r7, #16]
    2ea2:	2200      	movs	r2, #0
    2ea4:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2ea6:	693b      	ldr	r3, [r7, #16]
    2ea8:	781b      	ldrb	r3, [r3, #0]
    2eaa:	2b00      	cmp	r3, #0
    2eac:	d103      	bne.n	2eb6 <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    2eae:	6938      	ldr	r0, [r7, #16]
    2eb0:	4b26      	ldr	r3, [pc, #152]	; (2f4c <_usb_d_cb_trans_done+0xd8>)
    2eb2:	4798      	blx	r3
			return;
    2eb4:	e043      	b.n	2f3e <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    2eb6:	693b      	ldr	r3, [r7, #16]
    2eb8:	2201      	movs	r2, #1
    2eba:	709a      	strb	r2, [r3, #2]
    2ebc:	e038      	b.n	2f30 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    2ebe:	68bb      	ldr	r3, [r7, #8]
    2ec0:	2b01      	cmp	r3, #1
    2ec2:	d113      	bne.n	2eec <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    2ec4:	693b      	ldr	r3, [r7, #16]
    2ec6:	2202      	movs	r2, #2
    2ec8:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2eca:	693b      	ldr	r3, [r7, #16]
    2ecc:	781b      	ldrb	r3, [r3, #0]
    2ece:	2b00      	cmp	r3, #0
    2ed0:	d108      	bne.n	2ee4 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2ed2:	693b      	ldr	r3, [r7, #16]
    2ed4:	2202      	movs	r2, #2
    2ed6:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2ed8:	7bfb      	ldrb	r3, [r7, #15]
    2eda:	2100      	movs	r1, #0
    2edc:	4618      	mov	r0, r3
    2ede:	4b1c      	ldr	r3, [pc, #112]	; (2f50 <_usb_d_cb_trans_done+0xdc>)
    2ee0:	4798      	blx	r3
    2ee2:	e025      	b.n	2f30 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    2ee4:	693b      	ldr	r3, [r7, #16]
    2ee6:	2205      	movs	r2, #5
    2ee8:	709a      	strb	r2, [r3, #2]
    2eea:	e021      	b.n	2f30 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    2eec:	68bb      	ldr	r3, [r7, #8]
    2eee:	2b02      	cmp	r3, #2
    2ef0:	d10e      	bne.n	2f10 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    2ef2:	693b      	ldr	r3, [r7, #16]
    2ef4:	2204      	movs	r2, #4
    2ef6:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2ef8:	693b      	ldr	r3, [r7, #16]
    2efa:	781b      	ldrb	r3, [r3, #0]
    2efc:	2b00      	cmp	r3, #0
    2efe:	d103      	bne.n	2f08 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2f00:	693b      	ldr	r3, [r7, #16]
    2f02:	2202      	movs	r2, #2
    2f04:	709a      	strb	r2, [r3, #2]
			return;
    2f06:	e01a      	b.n	2f3e <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    2f08:	693b      	ldr	r3, [r7, #16]
    2f0a:	2201      	movs	r2, #1
    2f0c:	709a      	strb	r2, [r3, #2]
    2f0e:	e00f      	b.n	2f30 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    2f10:	68bb      	ldr	r3, [r7, #8]
    2f12:	2b03      	cmp	r3, #3
    2f14:	d106      	bne.n	2f24 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    2f16:	693b      	ldr	r3, [r7, #16]
    2f18:	2200      	movs	r2, #0
    2f1a:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    2f1c:	693b      	ldr	r3, [r7, #16]
    2f1e:	2205      	movs	r2, #5
    2f20:	70da      	strb	r2, [r3, #3]
    2f22:	e005      	b.n	2f30 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    2f24:	693b      	ldr	r3, [r7, #16]
    2f26:	2206      	movs	r2, #6
    2f28:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    2f2a:	693b      	ldr	r3, [r7, #16]
    2f2c:	2206      	movs	r2, #6
    2f2e:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    2f30:	693b      	ldr	r3, [r7, #16]
    2f32:	69db      	ldr	r3, [r3, #28]
    2f34:	693a      	ldr	r2, [r7, #16]
    2f36:	78d1      	ldrb	r1, [r2, #3]
    2f38:	687a      	ldr	r2, [r7, #4]
    2f3a:	7bf8      	ldrb	r0, [r7, #15]
    2f3c:	4798      	blx	r3
}
    2f3e:	3718      	adds	r7, #24
    2f40:	46bd      	mov	sp, r7
    2f42:	bd80      	pop	{r7, pc}
    2f44:	00002ba9 	.word	0x00002ba9
    2f48:	20000694 	.word	0x20000694
    2f4c:	00002db1 	.word	0x00002db1
    2f50:	0000a5d1 	.word	0x0000a5d1

00002f54 <usb_d_init>:

int32_t usb_d_init(void)
{
    2f54:	b580      	push	{r7, lr}
    2f56:	b082      	sub	sp, #8
    2f58:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    2f5a:	4b21      	ldr	r3, [pc, #132]	; (2fe0 <usb_d_init+0x8c>)
    2f5c:	4798      	blx	r3
    2f5e:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    2f60:	683b      	ldr	r3, [r7, #0]
    2f62:	2b00      	cmp	r3, #0
    2f64:	da01      	bge.n	2f6a <usb_d_init+0x16>
		return rc;
    2f66:	683b      	ldr	r3, [r7, #0]
    2f68:	e036      	b.n	2fd8 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    2f6a:	2280      	movs	r2, #128	; 0x80
    2f6c:	2100      	movs	r1, #0
    2f6e:	481d      	ldr	r0, [pc, #116]	; (2fe4 <usb_d_init+0x90>)
    2f70:	4b1d      	ldr	r3, [pc, #116]	; (2fe8 <usb_d_init+0x94>)
    2f72:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2f74:	2300      	movs	r3, #0
    2f76:	71fb      	strb	r3, [r7, #7]
    2f78:	e01e      	b.n	2fb8 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    2f7a:	79fb      	ldrb	r3, [r7, #7]
    2f7c:	4a19      	ldr	r2, [pc, #100]	; (2fe4 <usb_d_init+0x90>)
    2f7e:	015b      	lsls	r3, r3, #5
    2f80:	4413      	add	r3, r2
    2f82:	3301      	adds	r3, #1
    2f84:	22ff      	movs	r2, #255	; 0xff
    2f86:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    2f88:	79fb      	ldrb	r3, [r7, #7]
    2f8a:	4a16      	ldr	r2, [pc, #88]	; (2fe4 <usb_d_init+0x90>)
    2f8c:	015b      	lsls	r3, r3, #5
    2f8e:	4413      	add	r3, r2
    2f90:	3314      	adds	r3, #20
    2f92:	4a16      	ldr	r2, [pc, #88]	; (2fec <usb_d_init+0x98>)
    2f94:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    2f96:	79fb      	ldrb	r3, [r7, #7]
    2f98:	4a12      	ldr	r2, [pc, #72]	; (2fe4 <usb_d_init+0x90>)
    2f9a:	015b      	lsls	r3, r3, #5
    2f9c:	4413      	add	r3, r2
    2f9e:	3318      	adds	r3, #24
    2fa0:	4a12      	ldr	r2, [pc, #72]	; (2fec <usb_d_init+0x98>)
    2fa2:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    2fa4:	79fb      	ldrb	r3, [r7, #7]
    2fa6:	4a0f      	ldr	r2, [pc, #60]	; (2fe4 <usb_d_init+0x90>)
    2fa8:	015b      	lsls	r3, r3, #5
    2faa:	4413      	add	r3, r2
    2fac:	331c      	adds	r3, #28
    2fae:	4a0f      	ldr	r2, [pc, #60]	; (2fec <usb_d_init+0x98>)
    2fb0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2fb2:	79fb      	ldrb	r3, [r7, #7]
    2fb4:	3301      	adds	r3, #1
    2fb6:	71fb      	strb	r3, [r7, #7]
    2fb8:	79fb      	ldrb	r3, [r7, #7]
    2fba:	2b03      	cmp	r3, #3
    2fbc:	d9dd      	bls.n	2f7a <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    2fbe:	490c      	ldr	r1, [pc, #48]	; (2ff0 <usb_d_init+0x9c>)
    2fc0:	2000      	movs	r0, #0
    2fc2:	4b0c      	ldr	r3, [pc, #48]	; (2ff4 <usb_d_init+0xa0>)
    2fc4:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    2fc6:	490c      	ldr	r1, [pc, #48]	; (2ff8 <usb_d_init+0xa4>)
    2fc8:	2001      	movs	r0, #1
    2fca:	4b0a      	ldr	r3, [pc, #40]	; (2ff4 <usb_d_init+0xa0>)
    2fcc:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    2fce:	490b      	ldr	r1, [pc, #44]	; (2ffc <usb_d_init+0xa8>)
    2fd0:	2002      	movs	r0, #2
    2fd2:	4b08      	ldr	r3, [pc, #32]	; (2ff4 <usb_d_init+0xa0>)
    2fd4:	4798      	blx	r3
	return ERR_NONE;
    2fd6:	2300      	movs	r3, #0
}
    2fd8:	4618      	mov	r0, r3
    2fda:	3708      	adds	r7, #8
    2fdc:	46bd      	mov	sp, r7
    2fde:	bd80      	pop	{r7, pc}
    2fe0:	00009e19 	.word	0x00009e19
    2fe4:	20000694 	.word	0x20000694
    2fe8:	0000de01 	.word	0x0000de01
    2fec:	00002c7d 	.word	0x00002c7d
    2ff0:	00002c99 	.word	0x00002c99
    2ff4:	0000aa61 	.word	0x0000aa61
    2ff8:	00002d61 	.word	0x00002d61
    2ffc:	00002e75 	.word	0x00002e75

00003000 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    3000:	b580      	push	{r7, lr}
    3002:	b082      	sub	sp, #8
    3004:	af00      	add	r7, sp, #0
    3006:	4603      	mov	r3, r0
    3008:	6039      	str	r1, [r7, #0]
    300a:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    300c:	79fb      	ldrb	r3, [r7, #7]
    300e:	6839      	ldr	r1, [r7, #0]
    3010:	4618      	mov	r0, r3
    3012:	4b03      	ldr	r3, [pc, #12]	; (3020 <usb_d_register_callback+0x20>)
    3014:	4798      	blx	r3
}
    3016:	bf00      	nop
    3018:	3708      	adds	r7, #8
    301a:	46bd      	mov	sp, r7
    301c:	bd80      	pop	{r7, pc}
    301e:	bf00      	nop
    3020:	0000aa19 	.word	0x0000aa19

00003024 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    3024:	b580      	push	{r7, lr}
    3026:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    3028:	4b02      	ldr	r3, [pc, #8]	; (3034 <usb_d_enable+0x10>)
    302a:	4798      	blx	r3
    302c:	4603      	mov	r3, r0
}
    302e:	4618      	mov	r0, r3
    3030:	bd80      	pop	{r7, pc}
    3032:	bf00      	nop
    3034:	00009f09 	.word	0x00009f09

00003038 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    3038:	b580      	push	{r7, lr}
    303a:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    303c:	4b01      	ldr	r3, [pc, #4]	; (3044 <usb_d_attach+0xc>)
    303e:	4798      	blx	r3
}
    3040:	bf00      	nop
    3042:	bd80      	pop	{r7, pc}
    3044:	00009f8d 	.word	0x00009f8d

00003048 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    3048:	b580      	push	{r7, lr}
    304a:	b082      	sub	sp, #8
    304c:	af00      	add	r7, sp, #0
    304e:	4603      	mov	r3, r0
    3050:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    3052:	79fb      	ldrb	r3, [r7, #7]
    3054:	4618      	mov	r0, r3
    3056:	4b03      	ldr	r3, [pc, #12]	; (3064 <usb_d_set_address+0x1c>)
    3058:	4798      	blx	r3
}
    305a:	bf00      	nop
    305c:	3708      	adds	r7, #8
    305e:	46bd      	mov	sp, r7
    3060:	bd80      	pop	{r7, pc}
    3062:	bf00      	nop
    3064:	00009fa1 	.word	0x00009fa1

00003068 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    3068:	b580      	push	{r7, lr}
    306a:	b082      	sub	sp, #8
    306c:	af00      	add	r7, sp, #0
    306e:	4603      	mov	r3, r0
    3070:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    3072:	79fb      	ldrb	r3, [r7, #7]
    3074:	b29b      	uxth	r3, r3
    3076:	461a      	mov	r2, r3
    3078:	2100      	movs	r1, #0
    307a:	2000      	movs	r0, #0
    307c:	4b03      	ldr	r3, [pc, #12]	; (308c <usb_d_ep0_init+0x24>)
    307e:	4798      	blx	r3
    3080:	4603      	mov	r3, r0
}
    3082:	4618      	mov	r0, r3
    3084:	3708      	adds	r7, #8
    3086:	46bd      	mov	sp, r7
    3088:	bd80      	pop	{r7, pc}
    308a:	bf00      	nop
    308c:	00003091 	.word	0x00003091

00003090 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    3090:	b580      	push	{r7, lr}
    3092:	b086      	sub	sp, #24
    3094:	af00      	add	r7, sp, #0
    3096:	4603      	mov	r3, r0
    3098:	71fb      	strb	r3, [r7, #7]
    309a:	460b      	mov	r3, r1
    309c:	71bb      	strb	r3, [r7, #6]
    309e:	4613      	mov	r3, r2
    30a0:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    30a2:	79fb      	ldrb	r3, [r7, #7]
    30a4:	4618      	mov	r0, r3
    30a6:	4b1e      	ldr	r3, [pc, #120]	; (3120 <usb_d_ep_init+0x90>)
    30a8:	4798      	blx	r3
    30aa:	4603      	mov	r3, r0
    30ac:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    30ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
    30b2:	015b      	lsls	r3, r3, #5
    30b4:	4a1b      	ldr	r2, [pc, #108]	; (3124 <usb_d_ep_init+0x94>)
    30b6:	4413      	add	r3, r2
    30b8:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    30ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
    30be:	2b00      	cmp	r3, #0
    30c0:	db02      	blt.n	30c8 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    30c2:	f06f 0313 	mvn.w	r3, #19
    30c6:	e027      	b.n	3118 <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    30c8:	20ff      	movs	r0, #255	; 0xff
    30ca:	4b15      	ldr	r3, [pc, #84]	; (3120 <usb_d_ep_init+0x90>)
    30cc:	4798      	blx	r3
    30ce:	4603      	mov	r3, r0
    30d0:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    30d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    30d6:	2b00      	cmp	r3, #0
    30d8:	da02      	bge.n	30e0 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    30da:	f06f 0314 	mvn.w	r3, #20
    30de:	e01b      	b.n	3118 <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    30e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
    30e4:	015b      	lsls	r3, r3, #5
    30e6:	4a0f      	ldr	r2, [pc, #60]	; (3124 <usb_d_ep_init+0x94>)
    30e8:	4413      	add	r3, r2
    30ea:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    30ec:	88ba      	ldrh	r2, [r7, #4]
    30ee:	79b9      	ldrb	r1, [r7, #6]
    30f0:	79fb      	ldrb	r3, [r7, #7]
    30f2:	4618      	mov	r0, r3
    30f4:	4b0c      	ldr	r3, [pc, #48]	; (3128 <usb_d_ep_init+0x98>)
    30f6:	4798      	blx	r3
    30f8:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    30fa:	68fb      	ldr	r3, [r7, #12]
    30fc:	2b00      	cmp	r3, #0
    30fe:	da01      	bge.n	3104 <usb_d_ep_init+0x74>
		return rc;
    3100:	68fb      	ldr	r3, [r7, #12]
    3102:	e009      	b.n	3118 <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    3104:	693b      	ldr	r3, [r7, #16]
    3106:	79fa      	ldrb	r2, [r7, #7]
    3108:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    310a:	79bb      	ldrb	r3, [r7, #6]
    310c:	f003 0303 	and.w	r3, r3, #3
    3110:	b2da      	uxtb	r2, r3
    3112:	693b      	ldr	r3, [r7, #16]
    3114:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    3116:	2300      	movs	r3, #0
}
    3118:	4618      	mov	r0, r3
    311a:	3718      	adds	r7, #24
    311c:	46bd      	mov	sp, r7
    311e:	bd80      	pop	{r7, pc}
    3120:	00002ba9 	.word	0x00002ba9
    3124:	20000694 	.word	0x20000694
    3128:	0000a041 	.word	0x0000a041

0000312c <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    312c:	b580      	push	{r7, lr}
    312e:	b084      	sub	sp, #16
    3130:	af00      	add	r7, sp, #0
    3132:	4603      	mov	r3, r0
    3134:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3136:	79fb      	ldrb	r3, [r7, #7]
    3138:	4618      	mov	r0, r3
    313a:	4b0d      	ldr	r3, [pc, #52]	; (3170 <usb_d_ep_deinit+0x44>)
    313c:	4798      	blx	r3
    313e:	4603      	mov	r3, r0
    3140:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3142:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3146:	015b      	lsls	r3, r3, #5
    3148:	4a0a      	ldr	r2, [pc, #40]	; (3174 <usb_d_ep_deinit+0x48>)
    314a:	4413      	add	r3, r2
    314c:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    314e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3152:	2b00      	cmp	r3, #0
    3154:	db07      	blt.n	3166 <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    3156:	79fb      	ldrb	r3, [r7, #7]
    3158:	4618      	mov	r0, r3
    315a:	4b07      	ldr	r3, [pc, #28]	; (3178 <usb_d_ep_deinit+0x4c>)
    315c:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    315e:	68bb      	ldr	r3, [r7, #8]
    3160:	22ff      	movs	r2, #255	; 0xff
    3162:	705a      	strb	r2, [r3, #1]
    3164:	e000      	b.n	3168 <usb_d_ep_deinit+0x3c>
		return;
    3166:	bf00      	nop
}
    3168:	3710      	adds	r7, #16
    316a:	46bd      	mov	sp, r7
    316c:	bd80      	pop	{r7, pc}
    316e:	bf00      	nop
    3170:	00002ba9 	.word	0x00002ba9
    3174:	20000694 	.word	0x20000694
    3178:	0000a175 	.word	0x0000a175

0000317c <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    317c:	b580      	push	{r7, lr}
    317e:	b086      	sub	sp, #24
    3180:	af00      	add	r7, sp, #0
    3182:	4603      	mov	r3, r0
    3184:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3186:	79fb      	ldrb	r3, [r7, #7]
    3188:	4618      	mov	r0, r3
    318a:	4b15      	ldr	r3, [pc, #84]	; (31e0 <usb_d_ep_enable+0x64>)
    318c:	4798      	blx	r3
    318e:	4603      	mov	r3, r0
    3190:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3192:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3196:	015b      	lsls	r3, r3, #5
    3198:	4a12      	ldr	r2, [pc, #72]	; (31e4 <usb_d_ep_enable+0x68>)
    319a:	4413      	add	r3, r2
    319c:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    319e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    31a2:	2b00      	cmp	r3, #0
    31a4:	da02      	bge.n	31ac <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    31a6:	f06f 0311 	mvn.w	r3, #17
    31aa:	e014      	b.n	31d6 <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    31ac:	693b      	ldr	r3, [r7, #16]
    31ae:	781b      	ldrb	r3, [r3, #0]
    31b0:	2b00      	cmp	r3, #0
    31b2:	d101      	bne.n	31b8 <usb_d_ep_enable+0x3c>
    31b4:	2202      	movs	r2, #2
    31b6:	e000      	b.n	31ba <usb_d_ep_enable+0x3e>
    31b8:	2201      	movs	r2, #1
    31ba:	693b      	ldr	r3, [r7, #16]
    31bc:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    31be:	79fb      	ldrb	r3, [r7, #7]
    31c0:	4618      	mov	r0, r3
    31c2:	4b09      	ldr	r3, [pc, #36]	; (31e8 <usb_d_ep_enable+0x6c>)
    31c4:	4798      	blx	r3
    31c6:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    31c8:	68fb      	ldr	r3, [r7, #12]
    31ca:	2b00      	cmp	r3, #0
    31cc:	da02      	bge.n	31d4 <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    31ce:	693b      	ldr	r3, [r7, #16]
    31d0:	2200      	movs	r2, #0
    31d2:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    31d4:	68fb      	ldr	r3, [r7, #12]
}
    31d6:	4618      	mov	r0, r3
    31d8:	3718      	adds	r7, #24
    31da:	46bd      	mov	sp, r7
    31dc:	bd80      	pop	{r7, pc}
    31de:	bf00      	nop
    31e0:	00002ba9 	.word	0x00002ba9
    31e4:	20000694 	.word	0x20000694
    31e8:	0000a259 	.word	0x0000a259

000031ec <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    31ec:	b590      	push	{r4, r7, lr}
    31ee:	b08d      	sub	sp, #52	; 0x34
    31f0:	af02      	add	r7, sp, #8
    31f2:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    31f4:	687b      	ldr	r3, [r7, #4]
    31f6:	7a1b      	ldrb	r3, [r3, #8]
    31f8:	4618      	mov	r0, r3
    31fa:	4b51      	ldr	r3, [pc, #324]	; (3340 <usb_d_ep_transfer+0x154>)
    31fc:	4798      	blx	r3
    31fe:	4603      	mov	r3, r0
    3200:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    3202:	f997 301f 	ldrsb.w	r3, [r7, #31]
    3206:	015b      	lsls	r3, r3, #5
    3208:	4a4e      	ldr	r2, [pc, #312]	; (3344 <usb_d_ep_transfer+0x158>)
    320a:	4413      	add	r3, r2
    320c:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    320e:	687b      	ldr	r3, [r7, #4]
    3210:	7a1b      	ldrb	r3, [r3, #8]
    3212:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3216:	2b00      	cmp	r3, #0
    3218:	bf14      	ite	ne
    321a:	2301      	movne	r3, #1
    321c:	2300      	moveq	r3, #0
    321e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    3222:	687b      	ldr	r3, [r7, #4]
    3224:	7a5b      	ldrb	r3, [r3, #9]
    3226:	2b00      	cmp	r3, #0
    3228:	bf14      	ite	ne
    322a:	2301      	movne	r3, #1
    322c:	2300      	moveq	r3, #0
    322e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    3232:	687b      	ldr	r3, [r7, #4]
    3234:	685b      	ldr	r3, [r3, #4]
    3236:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    3238:	f997 301f 	ldrsb.w	r3, [r7, #31]
    323c:	2b00      	cmp	r3, #0
    323e:	da02      	bge.n	3246 <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    3240:	f06f 0311 	mvn.w	r3, #17
    3244:	e077      	b.n	3336 <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    3246:	f107 0308 	add.w	r3, r7, #8
    324a:	4618      	mov	r0, r3
    324c:	4b3e      	ldr	r3, [pc, #248]	; (3348 <usb_d_ep_transfer+0x15c>)
    324e:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    3250:	69bb      	ldr	r3, [r7, #24]
    3252:	789b      	ldrb	r3, [r3, #2]
    3254:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    3256:	7bfb      	ldrb	r3, [r7, #15]
    3258:	b2db      	uxtb	r3, r3
    325a:	2b01      	cmp	r3, #1
    325c:	d10c      	bne.n	3278 <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    325e:	69bb      	ldr	r3, [r7, #24]
    3260:	2203      	movs	r2, #3
    3262:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    3264:	f107 0308 	add.w	r3, r7, #8
    3268:	4618      	mov	r0, r3
    326a:	4b38      	ldr	r3, [pc, #224]	; (334c <usb_d_ep_transfer+0x160>)
    326c:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    326e:	69bb      	ldr	r3, [r7, #24]
    3270:	781b      	ldrb	r3, [r3, #0]
    3272:	2b00      	cmp	r3, #0
    3274:	d151      	bne.n	331a <usb_d_ep_transfer+0x12e>
    3276:	e017      	b.n	32a8 <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    3278:	f107 0308 	add.w	r3, r7, #8
    327c:	4618      	mov	r0, r3
    327e:	4b33      	ldr	r3, [pc, #204]	; (334c <usb_d_ep_transfer+0x160>)
    3280:	4798      	blx	r3
		switch (state) {
    3282:	7bfb      	ldrb	r3, [r7, #15]
    3284:	b2db      	uxtb	r3, r3
    3286:	2b05      	cmp	r3, #5
    3288:	d004      	beq.n	3294 <usb_d_ep_transfer+0xa8>
    328a:	2b06      	cmp	r3, #6
    328c:	d004      	beq.n	3298 <usb_d_ep_transfer+0xac>
    328e:	2b00      	cmp	r3, #0
    3290:	d005      	beq.n	329e <usb_d_ep_transfer+0xb2>
    3292:	e007      	b.n	32a4 <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    3294:	2302      	movs	r3, #2
    3296:	e04e      	b.n	3336 <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    3298:	f06f 030f 	mvn.w	r3, #15
    329c:	e04b      	b.n	3336 <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    329e:	f06f 0312 	mvn.w	r3, #18
    32a2:	e048      	b.n	3336 <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    32a4:	2301      	movs	r3, #1
    32a6:	e046      	b.n	3336 <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    32a8:	69bb      	ldr	r3, [r7, #24]
    32aa:	7c9b      	ldrb	r3, [r3, #18]
    32ac:	b29a      	uxth	r2, r3
    32ae:	69bb      	ldr	r3, [r7, #24]
    32b0:	7cdb      	ldrb	r3, [r3, #19]
    32b2:	b29b      	uxth	r3, r3
    32b4:	021b      	lsls	r3, r3, #8
    32b6:	b29b      	uxth	r3, r3
    32b8:	4413      	add	r3, r2
    32ba:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    32bc:	8afb      	ldrh	r3, [r7, #22]
    32be:	2b00      	cmp	r3, #0
    32c0:	d10b      	bne.n	32da <usb_d_ep_transfer+0xee>
			dir                 = true;
    32c2:	2301      	movs	r3, #1
    32c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    32c8:	2300      	movs	r3, #0
    32ca:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    32cc:	2301      	movs	r3, #1
    32ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    32d2:	69bb      	ldr	r3, [r7, #24]
    32d4:	2204      	movs	r2, #4
    32d6:	709a      	strb	r2, [r3, #2]
    32d8:	e01f      	b.n	331a <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    32da:	69bb      	ldr	r3, [r7, #24]
    32dc:	7b1b      	ldrb	r3, [r3, #12]
    32de:	f003 0380 	and.w	r3, r3, #128	; 0x80
    32e2:	2b00      	cmp	r3, #0
    32e4:	bf14      	ite	ne
    32e6:	2301      	movne	r3, #1
    32e8:	2300      	moveq	r3, #0
    32ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    32ee:	8afa      	ldrh	r2, [r7, #22]
    32f0:	6a3b      	ldr	r3, [r7, #32]
    32f2:	429a      	cmp	r2, r3
    32f4:	d201      	bcs.n	32fa <usb_d_ep_transfer+0x10e>
				len = req_len;
    32f6:	8afb      	ldrh	r3, [r7, #22]
    32f8:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    32fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    32fe:	2b00      	cmp	r3, #0
    3300:	d008      	beq.n	3314 <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    3302:	8afa      	ldrh	r2, [r7, #22]
    3304:	6a3b      	ldr	r3, [r7, #32]
    3306:	429a      	cmp	r2, r3
    3308:	bf8c      	ite	hi
    330a:	2301      	movhi	r3, #1
    330c:	2300      	movls	r3, #0
    330e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    3312:	e002      	b.n	331a <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    3314:	2300      	movs	r3, #0
    3316:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    331a:	687b      	ldr	r3, [r7, #4]
    331c:	7a18      	ldrb	r0, [r3, #8]
    331e:	687b      	ldr	r3, [r7, #4]
    3320:	681a      	ldr	r2, [r3, #0]
    3322:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    3326:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    332a:	9300      	str	r3, [sp, #0]
    332c:	6a3b      	ldr	r3, [r7, #32]
    332e:	4c08      	ldr	r4, [pc, #32]	; (3350 <usb_d_ep_transfer+0x164>)
    3330:	47a0      	blx	r4
    3332:	6138      	str	r0, [r7, #16]
	return rc;
    3334:	693b      	ldr	r3, [r7, #16]
}
    3336:	4618      	mov	r0, r3
    3338:	372c      	adds	r7, #44	; 0x2c
    333a:	46bd      	mov	sp, r7
    333c:	bd90      	pop	{r4, r7, pc}
    333e:	bf00      	nop
    3340:	00002ba9 	.word	0x00002ba9
    3344:	20000694 	.word	0x20000694
    3348:	0000b1cd 	.word	0x0000b1cd
    334c:	0000b1f3 	.word	0x0000b1f3
    3350:	00002c29 	.word	0x00002c29

00003354 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    3354:	b580      	push	{r7, lr}
    3356:	b084      	sub	sp, #16
    3358:	af00      	add	r7, sp, #0
    335a:	4603      	mov	r3, r0
    335c:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    335e:	79fb      	ldrb	r3, [r7, #7]
    3360:	4618      	mov	r0, r3
    3362:	4b0e      	ldr	r3, [pc, #56]	; (339c <usb_d_ep_abort+0x48>)
    3364:	4798      	blx	r3
    3366:	4603      	mov	r3, r0
    3368:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    336a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    336e:	015b      	lsls	r3, r3, #5
    3370:	4a0b      	ldr	r2, [pc, #44]	; (33a0 <usb_d_ep_abort+0x4c>)
    3372:	4413      	add	r3, r2
    3374:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    3376:	f997 300f 	ldrsb.w	r3, [r7, #15]
    337a:	2b00      	cmp	r3, #0
    337c:	db0a      	blt.n	3394 <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    337e:	79fb      	ldrb	r3, [r7, #7]
    3380:	4618      	mov	r0, r3
    3382:	4b08      	ldr	r3, [pc, #32]	; (33a4 <usb_d_ep_abort+0x50>)
    3384:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    3386:	68bb      	ldr	r3, [r7, #8]
    3388:	2201      	movs	r2, #1
    338a:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    338c:	68bb      	ldr	r3, [r7, #8]
    338e:	2204      	movs	r2, #4
    3390:	70da      	strb	r2, [r3, #3]
    3392:	e000      	b.n	3396 <usb_d_ep_abort+0x42>
		return;
    3394:	bf00      	nop
}
    3396:	3710      	adds	r7, #16
    3398:	46bd      	mov	sp, r7
    339a:	bd80      	pop	{r7, pc}
    339c:	00002ba9 	.word	0x00002ba9
    33a0:	20000694 	.word	0x20000694
    33a4:	0000a9c5 	.word	0x0000a9c5

000033a8 <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    33a8:	b580      	push	{r7, lr}
    33aa:	b086      	sub	sp, #24
    33ac:	af00      	add	r7, sp, #0
    33ae:	4603      	mov	r3, r0
    33b0:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    33b2:	79fb      	ldrb	r3, [r7, #7]
    33b4:	4618      	mov	r0, r3
    33b6:	4b1a      	ldr	r3, [pc, #104]	; (3420 <_usb_d_ep_halt_clr+0x78>)
    33b8:	4798      	blx	r3
    33ba:	4603      	mov	r3, r0
    33bc:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    33be:	f997 3017 	ldrsb.w	r3, [r7, #23]
    33c2:	015b      	lsls	r3, r3, #5
    33c4:	4a17      	ldr	r2, [pc, #92]	; (3424 <_usb_d_ep_halt_clr+0x7c>)
    33c6:	4413      	add	r3, r2
    33c8:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    33ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
    33ce:	2b00      	cmp	r3, #0
    33d0:	da02      	bge.n	33d8 <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    33d2:	f06f 0311 	mvn.w	r3, #17
    33d6:	e01f      	b.n	3418 <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    33d8:	79fb      	ldrb	r3, [r7, #7]
    33da:	2102      	movs	r1, #2
    33dc:	4618      	mov	r0, r3
    33de:	4b12      	ldr	r3, [pc, #72]	; (3428 <_usb_d_ep_halt_clr+0x80>)
    33e0:	4798      	blx	r3
    33e2:	4603      	mov	r3, r0
    33e4:	2b00      	cmp	r3, #0
    33e6:	d016      	beq.n	3416 <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    33e8:	79fb      	ldrb	r3, [r7, #7]
    33ea:	2100      	movs	r1, #0
    33ec:	4618      	mov	r0, r3
    33ee:	4b0e      	ldr	r3, [pc, #56]	; (3428 <_usb_d_ep_halt_clr+0x80>)
    33f0:	4798      	blx	r3
    33f2:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    33f4:	68fb      	ldr	r3, [r7, #12]
    33f6:	2b00      	cmp	r3, #0
    33f8:	da01      	bge.n	33fe <_usb_d_ep_halt_clr+0x56>
			return rc;
    33fa:	68fb      	ldr	r3, [r7, #12]
    33fc:	e00c      	b.n	3418 <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    33fe:	693b      	ldr	r3, [r7, #16]
    3400:	2201      	movs	r2, #1
    3402:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    3404:	693b      	ldr	r3, [r7, #16]
    3406:	2203      	movs	r2, #3
    3408:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    340a:	693b      	ldr	r3, [r7, #16]
    340c:	69db      	ldr	r3, [r3, #28]
    340e:	79f8      	ldrb	r0, [r7, #7]
    3410:	2200      	movs	r2, #0
    3412:	2103      	movs	r1, #3
    3414:	4798      	blx	r3
	}
	return ERR_NONE;
    3416:	2300      	movs	r3, #0
}
    3418:	4618      	mov	r0, r3
    341a:	3718      	adds	r7, #24
    341c:	46bd      	mov	sp, r7
    341e:	bd80      	pop	{r7, pc}
    3420:	00002ba9 	.word	0x00002ba9
    3424:	20000694 	.word	0x20000694
    3428:	0000a5d1 	.word	0x0000a5d1

0000342c <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    342c:	b580      	push	{r7, lr}
    342e:	b082      	sub	sp, #8
    3430:	af00      	add	r7, sp, #0
    3432:	4603      	mov	r3, r0
    3434:	460a      	mov	r2, r1
    3436:	71fb      	strb	r3, [r7, #7]
    3438:	4613      	mov	r3, r2
    343a:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    343c:	79bb      	ldrb	r3, [r7, #6]
    343e:	2b00      	cmp	r3, #0
    3440:	d105      	bne.n	344e <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    3442:	79fb      	ldrb	r3, [r7, #7]
    3444:	4618      	mov	r0, r3
    3446:	4b0c      	ldr	r3, [pc, #48]	; (3478 <usb_d_ep_halt+0x4c>)
    3448:	4798      	blx	r3
    344a:	4603      	mov	r3, r0
    344c:	e00f      	b.n	346e <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    344e:	79bb      	ldrb	r3, [r7, #6]
    3450:	2b01      	cmp	r3, #1
    3452:	d106      	bne.n	3462 <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    3454:	79fb      	ldrb	r3, [r7, #7]
    3456:	2101      	movs	r1, #1
    3458:	4618      	mov	r0, r3
    345a:	4b08      	ldr	r3, [pc, #32]	; (347c <usb_d_ep_halt+0x50>)
    345c:	4798      	blx	r3
    345e:	4603      	mov	r3, r0
    3460:	e005      	b.n	346e <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    3462:	79fb      	ldrb	r3, [r7, #7]
    3464:	2102      	movs	r1, #2
    3466:	4618      	mov	r0, r3
    3468:	4b04      	ldr	r3, [pc, #16]	; (347c <usb_d_ep_halt+0x50>)
    346a:	4798      	blx	r3
    346c:	4603      	mov	r3, r0
	}
}
    346e:	4618      	mov	r0, r3
    3470:	3708      	adds	r7, #8
    3472:	46bd      	mov	sp, r7
    3474:	bd80      	pop	{r7, pc}
    3476:	bf00      	nop
    3478:	000033a9 	.word	0x000033a9
    347c:	0000a5d1 	.word	0x0000a5d1

00003480 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    3480:	b580      	push	{r7, lr}
    3482:	b086      	sub	sp, #24
    3484:	af00      	add	r7, sp, #0
    3486:	4603      	mov	r3, r0
    3488:	603a      	str	r2, [r7, #0]
    348a:	71fb      	strb	r3, [r7, #7]
    348c:	460b      	mov	r3, r1
    348e:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3490:	79fb      	ldrb	r3, [r7, #7]
    3492:	4618      	mov	r0, r3
    3494:	4b16      	ldr	r3, [pc, #88]	; (34f0 <usb_d_ep_register_callback+0x70>)
    3496:	4798      	blx	r3
    3498:	4603      	mov	r3, r0
    349a:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    349c:	f997 3017 	ldrsb.w	r3, [r7, #23]
    34a0:	015b      	lsls	r3, r3, #5
    34a2:	4a14      	ldr	r2, [pc, #80]	; (34f4 <usb_d_ep_register_callback+0x74>)
    34a4:	4413      	add	r3, r2
    34a6:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    34a8:	683b      	ldr	r3, [r7, #0]
    34aa:	2b00      	cmp	r3, #0
    34ac:	d001      	beq.n	34b2 <usb_d_ep_register_callback+0x32>
    34ae:	683b      	ldr	r3, [r7, #0]
    34b0:	e000      	b.n	34b4 <usb_d_ep_register_callback+0x34>
    34b2:	4b11      	ldr	r3, [pc, #68]	; (34f8 <usb_d_ep_register_callback+0x78>)
    34b4:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    34b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    34ba:	2b00      	cmp	r3, #0
    34bc:	db13      	blt.n	34e6 <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    34be:	79bb      	ldrb	r3, [r7, #6]
    34c0:	2b01      	cmp	r3, #1
    34c2:	d008      	beq.n	34d6 <usb_d_ep_register_callback+0x56>
    34c4:	2b02      	cmp	r3, #2
    34c6:	d00a      	beq.n	34de <usb_d_ep_register_callback+0x5e>
    34c8:	2b00      	cmp	r3, #0
    34ca:	d000      	beq.n	34ce <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    34cc:	e00c      	b.n	34e8 <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    34ce:	693b      	ldr	r3, [r7, #16]
    34d0:	68fa      	ldr	r2, [r7, #12]
    34d2:	615a      	str	r2, [r3, #20]
		break;
    34d4:	e008      	b.n	34e8 <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    34d6:	693b      	ldr	r3, [r7, #16]
    34d8:	68fa      	ldr	r2, [r7, #12]
    34da:	619a      	str	r2, [r3, #24]
		break;
    34dc:	e004      	b.n	34e8 <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    34de:	693b      	ldr	r3, [r7, #16]
    34e0:	68fa      	ldr	r2, [r7, #12]
    34e2:	61da      	str	r2, [r3, #28]
		break;
    34e4:	e000      	b.n	34e8 <usb_d_ep_register_callback+0x68>
		return;
    34e6:	bf00      	nop
	}
}
    34e8:	3718      	adds	r7, #24
    34ea:	46bd      	mov	sp, r7
    34ec:	bd80      	pop	{r7, pc}
    34ee:	bf00      	nop
    34f0:	00002ba9 	.word	0x00002ba9
    34f4:	20000694 	.word	0x20000694
    34f8:	00002c7d 	.word	0x00002c7d

000034fc <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    34fc:	b480      	push	{r7}
    34fe:	b085      	sub	sp, #20
    3500:	af00      	add	r7, sp, #0
    3502:	4603      	mov	r3, r0
    3504:	60b9      	str	r1, [r7, #8]
    3506:	607a      	str	r2, [r7, #4]
    3508:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    350a:	7bfb      	ldrb	r3, [r7, #15]
    350c:	f083 0301 	eor.w	r3, r3, #1
    3510:	b2db      	uxtb	r3, r3
    3512:	2b00      	cmp	r3, #0
    3514:	d000      	beq.n	3518 <assert+0x1c>
		__asm("BKPT #0");
    3516:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    3518:	bf00      	nop
    351a:	3714      	adds	r7, #20
    351c:	46bd      	mov	sp, r7
    351e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3522:	4770      	bx	lr

00003524 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    3524:	b480      	push	{r7}
    3526:	b085      	sub	sp, #20
    3528:	af00      	add	r7, sp, #0
    352a:	6078      	str	r0, [r7, #4]
    352c:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    352e:	687b      	ldr	r3, [r7, #4]
    3530:	681b      	ldr	r3, [r3, #0]
    3532:	60fb      	str	r3, [r7, #12]
    3534:	e008      	b.n	3548 <is_list_element+0x24>
		if (it == element) {
    3536:	68fa      	ldr	r2, [r7, #12]
    3538:	683b      	ldr	r3, [r7, #0]
    353a:	429a      	cmp	r2, r3
    353c:	d101      	bne.n	3542 <is_list_element+0x1e>
			return true;
    353e:	2301      	movs	r3, #1
    3540:	e006      	b.n	3550 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    3542:	68fb      	ldr	r3, [r7, #12]
    3544:	681b      	ldr	r3, [r3, #0]
    3546:	60fb      	str	r3, [r7, #12]
    3548:	68fb      	ldr	r3, [r7, #12]
    354a:	2b00      	cmp	r3, #0
    354c:	d1f3      	bne.n	3536 <is_list_element+0x12>
		}
	}

	return false;
    354e:	2300      	movs	r3, #0
}
    3550:	4618      	mov	r0, r3
    3552:	3714      	adds	r7, #20
    3554:	46bd      	mov	sp, r7
    3556:	f85d 7b04 	ldr.w	r7, [sp], #4
    355a:	4770      	bx	lr

0000355c <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    355c:	b580      	push	{r7, lr}
    355e:	b082      	sub	sp, #8
    3560:	af00      	add	r7, sp, #0
    3562:	6078      	str	r0, [r7, #4]
    3564:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    3566:	6839      	ldr	r1, [r7, #0]
    3568:	6878      	ldr	r0, [r7, #4]
    356a:	4b0f      	ldr	r3, [pc, #60]	; (35a8 <list_insert_as_head+0x4c>)
    356c:	4798      	blx	r3
    356e:	4603      	mov	r3, r0
    3570:	2b00      	cmp	r3, #0
    3572:	bf14      	ite	ne
    3574:	2301      	movne	r3, #1
    3576:	2300      	moveq	r3, #0
    3578:	b2db      	uxtb	r3, r3
    357a:	f083 0301 	eor.w	r3, r3, #1
    357e:	b2db      	uxtb	r3, r3
    3580:	f003 0301 	and.w	r3, r3, #1
    3584:	b2db      	uxtb	r3, r3
    3586:	2239      	movs	r2, #57	; 0x39
    3588:	4908      	ldr	r1, [pc, #32]	; (35ac <list_insert_as_head+0x50>)
    358a:	4618      	mov	r0, r3
    358c:	4b08      	ldr	r3, [pc, #32]	; (35b0 <list_insert_as_head+0x54>)
    358e:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    3590:	687b      	ldr	r3, [r7, #4]
    3592:	681a      	ldr	r2, [r3, #0]
    3594:	683b      	ldr	r3, [r7, #0]
    3596:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    3598:	687b      	ldr	r3, [r7, #4]
    359a:	683a      	ldr	r2, [r7, #0]
    359c:	601a      	str	r2, [r3, #0]
}
    359e:	bf00      	nop
    35a0:	3708      	adds	r7, #8
    35a2:	46bd      	mov	sp, r7
    35a4:	bd80      	pop	{r7, pc}
    35a6:	bf00      	nop
    35a8:	00003525 	.word	0x00003525
    35ac:	0000e3e0 	.word	0x0000e3e0
    35b0:	000034fd 	.word	0x000034fd

000035b4 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    35b4:	b480      	push	{r7}
    35b6:	b083      	sub	sp, #12
    35b8:	af00      	add	r7, sp, #0
    35ba:	6078      	str	r0, [r7, #4]
    35bc:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    35be:	687b      	ldr	r3, [r7, #4]
    35c0:	681a      	ldr	r2, [r3, #0]
    35c2:	683b      	ldr	r3, [r7, #0]
    35c4:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    35c6:	687b      	ldr	r3, [r7, #4]
    35c8:	683a      	ldr	r2, [r7, #0]
    35ca:	601a      	str	r2, [r3, #0]
}
    35cc:	bf00      	nop
    35ce:	370c      	adds	r7, #12
    35d0:	46bd      	mov	sp, r7
    35d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    35d6:	4770      	bx	lr

000035d8 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    35d8:	b580      	push	{r7, lr}
    35da:	b084      	sub	sp, #16
    35dc:	af00      	add	r7, sp, #0
    35de:	6078      	str	r0, [r7, #4]
    35e0:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    35e2:	687b      	ldr	r3, [r7, #4]
    35e4:	681b      	ldr	r3, [r3, #0]
    35e6:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    35e8:	6839      	ldr	r1, [r7, #0]
    35ea:	6878      	ldr	r0, [r7, #4]
    35ec:	4b16      	ldr	r3, [pc, #88]	; (3648 <list_insert_at_end+0x70>)
    35ee:	4798      	blx	r3
    35f0:	4603      	mov	r3, r0
    35f2:	2b00      	cmp	r3, #0
    35f4:	bf14      	ite	ne
    35f6:	2301      	movne	r3, #1
    35f8:	2300      	moveq	r3, #0
    35fa:	b2db      	uxtb	r3, r3
    35fc:	f083 0301 	eor.w	r3, r3, #1
    3600:	b2db      	uxtb	r3, r3
    3602:	f003 0301 	and.w	r3, r3, #1
    3606:	b2db      	uxtb	r3, r3
    3608:	224f      	movs	r2, #79	; 0x4f
    360a:	4910      	ldr	r1, [pc, #64]	; (364c <list_insert_at_end+0x74>)
    360c:	4618      	mov	r0, r3
    360e:	4b10      	ldr	r3, [pc, #64]	; (3650 <list_insert_at_end+0x78>)
    3610:	4798      	blx	r3

	if (!list->head) {
    3612:	687b      	ldr	r3, [r7, #4]
    3614:	681b      	ldr	r3, [r3, #0]
    3616:	2b00      	cmp	r3, #0
    3618:	d109      	bne.n	362e <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    361a:	687b      	ldr	r3, [r7, #4]
    361c:	683a      	ldr	r2, [r7, #0]
    361e:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    3620:	683b      	ldr	r3, [r7, #0]
    3622:	2200      	movs	r2, #0
    3624:	601a      	str	r2, [r3, #0]
		return;
    3626:	e00c      	b.n	3642 <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    3628:	68fb      	ldr	r3, [r7, #12]
    362a:	681b      	ldr	r3, [r3, #0]
    362c:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    362e:	68fb      	ldr	r3, [r7, #12]
    3630:	681b      	ldr	r3, [r3, #0]
    3632:	2b00      	cmp	r3, #0
    3634:	d1f8      	bne.n	3628 <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    3636:	68fb      	ldr	r3, [r7, #12]
    3638:	683a      	ldr	r2, [r7, #0]
    363a:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    363c:	683b      	ldr	r3, [r7, #0]
    363e:	2200      	movs	r2, #0
    3640:	601a      	str	r2, [r3, #0]
}
    3642:	3710      	adds	r7, #16
    3644:	46bd      	mov	sp, r7
    3646:	bd80      	pop	{r7, pc}
    3648:	00003525 	.word	0x00003525
    364c:	0000e3e0 	.word	0x0000e3e0
    3650:	000034fd 	.word	0x000034fd

00003654 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    3654:	b480      	push	{r7}
    3656:	b085      	sub	sp, #20
    3658:	af00      	add	r7, sp, #0
    365a:	6078      	str	r0, [r7, #4]
	if (list->head) {
    365c:	687b      	ldr	r3, [r7, #4]
    365e:	681b      	ldr	r3, [r3, #0]
    3660:	2b00      	cmp	r3, #0
    3662:	d009      	beq.n	3678 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    3664:	687b      	ldr	r3, [r7, #4]
    3666:	681b      	ldr	r3, [r3, #0]
    3668:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    366a:	687b      	ldr	r3, [r7, #4]
    366c:	681b      	ldr	r3, [r3, #0]
    366e:	681a      	ldr	r2, [r3, #0]
    3670:	687b      	ldr	r3, [r7, #4]
    3672:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    3674:	68fb      	ldr	r3, [r7, #12]
    3676:	e000      	b.n	367a <list_remove_head+0x26>
	}

	return NULL;
    3678:	2300      	movs	r3, #0
}
    367a:	4618      	mov	r0, r3
    367c:	3714      	adds	r7, #20
    367e:	46bd      	mov	sp, r7
    3680:	f85d 7b04 	ldr.w	r7, [sp], #4
    3684:	4770      	bx	lr

00003686 <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    3686:	b480      	push	{r7}
    3688:	b085      	sub	sp, #20
    368a:	af00      	add	r7, sp, #0
    368c:	6078      	str	r0, [r7, #4]
    368e:	6039      	str	r1, [r7, #0]
	if (!element) {
    3690:	683b      	ldr	r3, [r7, #0]
    3692:	2b00      	cmp	r3, #0
    3694:	d101      	bne.n	369a <list_delete_element+0x14>
		return false;
    3696:	2300      	movs	r3, #0
    3698:	e024      	b.n	36e4 <list_delete_element+0x5e>
	}

	if (list->head == element) {
    369a:	687b      	ldr	r3, [r7, #4]
    369c:	681a      	ldr	r2, [r3, #0]
    369e:	683b      	ldr	r3, [r7, #0]
    36a0:	429a      	cmp	r2, r3
    36a2:	d106      	bne.n	36b2 <list_delete_element+0x2c>
		list->head = list->head->next;
    36a4:	687b      	ldr	r3, [r7, #4]
    36a6:	681b      	ldr	r3, [r3, #0]
    36a8:	681a      	ldr	r2, [r3, #0]
    36aa:	687b      	ldr	r3, [r7, #4]
    36ac:	601a      	str	r2, [r3, #0]
		return true;
    36ae:	2301      	movs	r3, #1
    36b0:	e018      	b.n	36e4 <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    36b2:	687b      	ldr	r3, [r7, #4]
    36b4:	681b      	ldr	r3, [r3, #0]
    36b6:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    36b8:	e002      	b.n	36c0 <list_delete_element+0x3a>
			it = it->next;
    36ba:	68fb      	ldr	r3, [r7, #12]
    36bc:	681b      	ldr	r3, [r3, #0]
    36be:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    36c0:	68fb      	ldr	r3, [r7, #12]
    36c2:	2b00      	cmp	r3, #0
    36c4:	d004      	beq.n	36d0 <list_delete_element+0x4a>
    36c6:	68fb      	ldr	r3, [r7, #12]
    36c8:	681a      	ldr	r2, [r3, #0]
    36ca:	683b      	ldr	r3, [r7, #0]
    36cc:	429a      	cmp	r2, r3
    36ce:	d1f4      	bne.n	36ba <list_delete_element+0x34>
		}
		if (it) {
    36d0:	68fb      	ldr	r3, [r7, #12]
    36d2:	2b00      	cmp	r3, #0
    36d4:	d005      	beq.n	36e2 <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    36d6:	683b      	ldr	r3, [r7, #0]
    36d8:	681a      	ldr	r2, [r3, #0]
    36da:	68fb      	ldr	r3, [r7, #12]
    36dc:	601a      	str	r2, [r3, #0]
			return true;
    36de:	2301      	movs	r3, #1
    36e0:	e000      	b.n	36e4 <list_delete_element+0x5e>
		}
	}

	return false;
    36e2:	2300      	movs	r3, #0
}
    36e4:	4618      	mov	r0, r3
    36e6:	3714      	adds	r7, #20
    36e8:	46bd      	mov	sp, r7
    36ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    36ee:	4770      	bx	lr

000036f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    36f0:	b480      	push	{r7}
    36f2:	b083      	sub	sp, #12
    36f4:	af00      	add	r7, sp, #0
    36f6:	4603      	mov	r3, r0
    36f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    36fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    36fe:	2b00      	cmp	r3, #0
    3700:	db0b      	blt.n	371a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3702:	4909      	ldr	r1, [pc, #36]	; (3728 <__NVIC_EnableIRQ+0x38>)
    3704:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3708:	095b      	lsrs	r3, r3, #5
    370a:	88fa      	ldrh	r2, [r7, #6]
    370c:	f002 021f 	and.w	r2, r2, #31
    3710:	2001      	movs	r0, #1
    3712:	fa00 f202 	lsl.w	r2, r0, r2
    3716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    371a:	bf00      	nop
    371c:	370c      	adds	r7, #12
    371e:	46bd      	mov	sp, r7
    3720:	f85d 7b04 	ldr.w	r7, [sp], #4
    3724:	4770      	bx	lr
    3726:	bf00      	nop
    3728:	e000e100 	.word	0xe000e100

0000372c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    372c:	b480      	push	{r7}
    372e:	b083      	sub	sp, #12
    3730:	af00      	add	r7, sp, #0
    3732:	4603      	mov	r3, r0
    3734:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3736:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    373a:	2b00      	cmp	r3, #0
    373c:	db10      	blt.n	3760 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    373e:	490b      	ldr	r1, [pc, #44]	; (376c <__NVIC_DisableIRQ+0x40>)
    3740:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3744:	095b      	lsrs	r3, r3, #5
    3746:	88fa      	ldrh	r2, [r7, #6]
    3748:	f002 021f 	and.w	r2, r2, #31
    374c:	2001      	movs	r0, #1
    374e:	fa00 f202 	lsl.w	r2, r0, r2
    3752:	3320      	adds	r3, #32
    3754:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3758:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    375c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    3760:	bf00      	nop
    3762:	370c      	adds	r7, #12
    3764:	46bd      	mov	sp, r7
    3766:	f85d 7b04 	ldr.w	r7, [sp], #4
    376a:	4770      	bx	lr
    376c:	e000e100 	.word	0xe000e100

00003770 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    3770:	b480      	push	{r7}
    3772:	b083      	sub	sp, #12
    3774:	af00      	add	r7, sp, #0
    3776:	4603      	mov	r3, r0
    3778:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    377a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    377e:	2b00      	cmp	r3, #0
    3780:	db0c      	blt.n	379c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3782:	4909      	ldr	r1, [pc, #36]	; (37a8 <__NVIC_ClearPendingIRQ+0x38>)
    3784:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3788:	095b      	lsrs	r3, r3, #5
    378a:	88fa      	ldrh	r2, [r7, #6]
    378c:	f002 021f 	and.w	r2, r2, #31
    3790:	2001      	movs	r0, #1
    3792:	fa00 f202 	lsl.w	r2, r0, r2
    3796:	3360      	adds	r3, #96	; 0x60
    3798:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    379c:	bf00      	nop
    379e:	370c      	adds	r7, #12
    37a0:	46bd      	mov	sp, r7
    37a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    37a6:	4770      	bx	lr
    37a8:	e000e100 	.word	0xe000e100

000037ac <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    37ac:	b480      	push	{r7}
    37ae:	b083      	sub	sp, #12
    37b0:	af00      	add	r7, sp, #0
    37b2:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    37b4:	687b      	ldr	r3, [r7, #4]
    37b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    37b8:	095b      	lsrs	r3, r3, #5
    37ba:	f003 0301 	and.w	r3, r3, #1
    37be:	2b00      	cmp	r3, #0
    37c0:	bf14      	ite	ne
    37c2:	2301      	movne	r3, #1
    37c4:	2300      	moveq	r3, #0
    37c6:	b2db      	uxtb	r3, r3
}
    37c8:	4618      	mov	r0, r3
    37ca:	370c      	adds	r7, #12
    37cc:	46bd      	mov	sp, r7
    37ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    37d2:	4770      	bx	lr

000037d4 <hri_can_read_RXF0S_F0FL_bf>:
{
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0FL(mask)) >> CAN_RXF0S_F0FL_Pos;
}

static inline hri_can_rxf0s_reg_t hri_can_read_RXF0S_F0FL_bf(const void *const hw)
{
    37d4:	b480      	push	{r7}
    37d6:	b083      	sub	sp, #12
    37d8:	af00      	add	r7, sp, #0
    37da:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0FL_Msk) >> CAN_RXF0S_F0FL_Pos;
    37dc:	687b      	ldr	r3, [r7, #4]
    37de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    37e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
    37e6:	4618      	mov	r0, r3
    37e8:	370c      	adds	r7, #12
    37ea:	46bd      	mov	sp, r7
    37ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    37f0:	4770      	bx	lr

000037f2 <hri_can_read_RXF0S_F0GI_bf>:
{
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0GI(mask)) >> CAN_RXF0S_F0GI_Pos;
}

static inline hri_can_rxf0s_reg_t hri_can_read_RXF0S_F0GI_bf(const void *const hw)
{
    37f2:	b480      	push	{r7}
    37f4:	b083      	sub	sp, #12
    37f6:	af00      	add	r7, sp, #0
    37f8:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0GI_Msk) >> CAN_RXF0S_F0GI_Pos;
    37fa:	687b      	ldr	r3, [r7, #4]
    37fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    3800:	0a1b      	lsrs	r3, r3, #8
    3802:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
    3806:	4618      	mov	r0, r3
    3808:	370c      	adds	r7, #12
    380a:	46bd      	mov	sp, r7
    380c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3810:	4770      	bx	lr

00003812 <hri_can_get_TXFQS_TFQF_bit>:
{
	return ((Can *)hw)->RXF1S.reg;
}

static inline bool hri_can_get_TXFQS_TFQF_bit(const void *const hw)
{
    3812:	b480      	push	{r7}
    3814:	b083      	sub	sp, #12
    3816:	af00      	add	r7, sp, #0
    3818:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFQF) >> CAN_TXFQS_TFQF_Pos;
    381a:	687b      	ldr	r3, [r7, #4]
    381c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    3820:	0d5b      	lsrs	r3, r3, #21
    3822:	f003 0301 	and.w	r3, r3, #1
    3826:	2b00      	cmp	r3, #0
    3828:	bf14      	ite	ne
    382a:	2301      	movne	r3, #1
    382c:	2300      	moveq	r3, #0
    382e:	b2db      	uxtb	r3, r3
}
    3830:	4618      	mov	r0, r3
    3832:	370c      	adds	r7, #12
    3834:	46bd      	mov	sp, r7
    3836:	f85d 7b04 	ldr.w	r7, [sp], #4
    383a:	4770      	bx	lr

0000383c <hri_can_read_TXFQS_TFQPI_bf>:
{
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFQPI(mask)) >> CAN_TXFQS_TFQPI_Pos;
}

static inline hri_can_txfqs_reg_t hri_can_read_TXFQS_TFQPI_bf(const void *const hw)
{
    383c:	b480      	push	{r7}
    383e:	b083      	sub	sp, #12
    3840:	af00      	add	r7, sp, #0
    3842:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFQPI_Msk) >> CAN_TXFQS_TFQPI_Pos;
    3844:	687b      	ldr	r3, [r7, #4]
    3846:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    384a:	0c1b      	lsrs	r3, r3, #16
    384c:	f003 031f 	and.w	r3, r3, #31
}
    3850:	4618      	mov	r0, r3
    3852:	370c      	adds	r7, #12
    3854:	46bd      	mov	sp, r7
    3856:	f85d 7b04 	ldr.w	r7, [sp], #4
    385a:	4770      	bx	lr

0000385c <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    385c:	b480      	push	{r7}
    385e:	b083      	sub	sp, #12
    3860:	af00      	add	r7, sp, #0
    3862:	6078      	str	r0, [r7, #4]
    3864:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    3866:	687b      	ldr	r3, [r7, #4]
    3868:	683a      	ldr	r2, [r7, #0]
    386a:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    386c:	bf00      	nop
    386e:	370c      	adds	r7, #12
    3870:	46bd      	mov	sp, r7
    3872:	f85d 7b04 	ldr.w	r7, [sp], #4
    3876:	4770      	bx	lr

00003878 <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    3878:	b480      	push	{r7}
    387a:	b083      	sub	sp, #12
    387c:	af00      	add	r7, sp, #0
    387e:	6078      	str	r0, [r7, #4]
    3880:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    3882:	687b      	ldr	r3, [r7, #4]
    3884:	683a      	ldr	r2, [r7, #0]
    3886:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3888:	bf00      	nop
    388a:	370c      	adds	r7, #12
    388c:	46bd      	mov	sp, r7
    388e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3892:	4770      	bx	lr

00003894 <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    3894:	b480      	push	{r7}
    3896:	b083      	sub	sp, #12
    3898:	af00      	add	r7, sp, #0
    389a:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    389c:	687b      	ldr	r3, [r7, #4]
    389e:	699b      	ldr	r3, [r3, #24]
    38a0:	f043 0201 	orr.w	r2, r3, #1
    38a4:	687b      	ldr	r3, [r7, #4]
    38a6:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    38a8:	bf00      	nop
    38aa:	370c      	adds	r7, #12
    38ac:	46bd      	mov	sp, r7
    38ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    38b2:	4770      	bx	lr

000038b4 <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    38b4:	b480      	push	{r7}
    38b6:	b085      	sub	sp, #20
    38b8:	af00      	add	r7, sp, #0
    38ba:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    38bc:	687b      	ldr	r3, [r7, #4]
    38be:	699b      	ldr	r3, [r3, #24]
    38c0:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    38c2:	68fb      	ldr	r3, [r7, #12]
    38c4:	f003 0301 	and.w	r3, r3, #1
    38c8:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    38ca:	68fb      	ldr	r3, [r7, #12]
    38cc:	2b00      	cmp	r3, #0
    38ce:	bf14      	ite	ne
    38d0:	2301      	movne	r3, #1
    38d2:	2300      	moveq	r3, #0
    38d4:	b2db      	uxtb	r3, r3
}
    38d6:	4618      	mov	r0, r3
    38d8:	3714      	adds	r7, #20
    38da:	46bd      	mov	sp, r7
    38dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    38e0:	4770      	bx	lr

000038e2 <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    38e2:	b480      	push	{r7}
    38e4:	b083      	sub	sp, #12
    38e6:	af00      	add	r7, sp, #0
    38e8:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    38ea:	687b      	ldr	r3, [r7, #4]
    38ec:	699b      	ldr	r3, [r3, #24]
    38ee:	f023 0201 	bic.w	r2, r3, #1
    38f2:	687b      	ldr	r3, [r7, #4]
    38f4:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    38f6:	bf00      	nop
    38f8:	370c      	adds	r7, #12
    38fa:	46bd      	mov	sp, r7
    38fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    3900:	4770      	bx	lr

00003902 <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    3902:	b480      	push	{r7}
    3904:	b083      	sub	sp, #12
    3906:	af00      	add	r7, sp, #0
    3908:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    390a:	687b      	ldr	r3, [r7, #4]
    390c:	699b      	ldr	r3, [r3, #24]
    390e:	f043 0202 	orr.w	r2, r3, #2
    3912:	687b      	ldr	r3, [r7, #4]
    3914:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3916:	bf00      	nop
    3918:	370c      	adds	r7, #12
    391a:	46bd      	mov	sp, r7
    391c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3920:	4770      	bx	lr

00003922 <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    3922:	b480      	push	{r7}
    3924:	b083      	sub	sp, #12
    3926:	af00      	add	r7, sp, #0
    3928:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    392a:	687b      	ldr	r3, [r7, #4]
    392c:	699b      	ldr	r3, [r3, #24]
    392e:	f023 0202 	bic.w	r2, r3, #2
    3932:	687b      	ldr	r3, [r7, #4]
    3934:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3936:	bf00      	nop
    3938:	370c      	adds	r7, #12
    393a:	46bd      	mov	sp, r7
    393c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3940:	4770      	bx	lr

00003942 <hri_can_get_CCCR_FDOE_bit>:
	((Can *)hw)->CCCR.reg |= CAN_CCCR_FDOE;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_can_get_CCCR_FDOE_bit(const void *const hw)
{
    3942:	b480      	push	{r7}
    3944:	b085      	sub	sp, #20
    3946:	af00      	add	r7, sp, #0
    3948:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    394a:	687b      	ldr	r3, [r7, #4]
    394c:	699b      	ldr	r3, [r3, #24]
    394e:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_FDOE) >> CAN_CCCR_FDOE_Pos;
    3950:	68fb      	ldr	r3, [r7, #12]
    3952:	0a1b      	lsrs	r3, r3, #8
    3954:	f003 0301 	and.w	r3, r3, #1
    3958:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    395a:	68fb      	ldr	r3, [r7, #12]
    395c:	2b00      	cmp	r3, #0
    395e:	bf14      	ite	ne
    3960:	2301      	movne	r3, #1
    3962:	2300      	moveq	r3, #0
    3964:	b2db      	uxtb	r3, r3
}
    3966:	4618      	mov	r0, r3
    3968:	3714      	adds	r7, #20
    396a:	46bd      	mov	sp, r7
    396c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3970:	4770      	bx	lr

00003972 <hri_can_get_CCCR_BRSE_bit>:
	((Can *)hw)->CCCR.reg |= CAN_CCCR_BRSE;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_can_get_CCCR_BRSE_bit(const void *const hw)
{
    3972:	b480      	push	{r7}
    3974:	b085      	sub	sp, #20
    3976:	af00      	add	r7, sp, #0
    3978:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    397a:	687b      	ldr	r3, [r7, #4]
    397c:	699b      	ldr	r3, [r3, #24]
    397e:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_BRSE) >> CAN_CCCR_BRSE_Pos;
    3980:	68fb      	ldr	r3, [r7, #12]
    3982:	0a5b      	lsrs	r3, r3, #9
    3984:	f003 0301 	and.w	r3, r3, #1
    3988:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    398a:	68fb      	ldr	r3, [r7, #12]
    398c:	2b00      	cmp	r3, #0
    398e:	bf14      	ite	ne
    3990:	2301      	movne	r3, #1
    3992:	2300      	moveq	r3, #0
    3994:	b2db      	uxtb	r3, r3
}
    3996:	4618      	mov	r0, r3
    3998:	3714      	adds	r7, #20
    399a:	46bd      	mov	sp, r7
    399c:	f85d 7b04 	ldr.w	r7, [sp], #4
    39a0:	4770      	bx	lr

000039a2 <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    39a2:	b480      	push	{r7}
    39a4:	b083      	sub	sp, #12
    39a6:	af00      	add	r7, sp, #0
    39a8:	6078      	str	r0, [r7, #4]
    39aa:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    39ac:	687b      	ldr	r3, [r7, #4]
    39ae:	699a      	ldr	r2, [r3, #24]
    39b0:	683b      	ldr	r3, [r7, #0]
    39b2:	431a      	orrs	r2, r3
    39b4:	687b      	ldr	r3, [r7, #4]
    39b6:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    39b8:	bf00      	nop
    39ba:	370c      	adds	r7, #12
    39bc:	46bd      	mov	sp, r7
    39be:	f85d 7b04 	ldr.w	r7, [sp], #4
    39c2:	4770      	bx	lr

000039c4 <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    39c4:	b480      	push	{r7}
    39c6:	b083      	sub	sp, #12
    39c8:	af00      	add	r7, sp, #0
    39ca:	6078      	str	r0, [r7, #4]
    39cc:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    39ce:	687b      	ldr	r3, [r7, #4]
    39d0:	683a      	ldr	r2, [r7, #0]
    39d2:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    39d4:	bf00      	nop
    39d6:	370c      	adds	r7, #12
    39d8:	46bd      	mov	sp, r7
    39da:	f85d 7b04 	ldr.w	r7, [sp], #4
    39de:	4770      	bx	lr

000039e0 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    39e0:	b480      	push	{r7}
    39e2:	b083      	sub	sp, #12
    39e4:	af00      	add	r7, sp, #0
    39e6:	6078      	str	r0, [r7, #4]
    39e8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    39ea:	687b      	ldr	r3, [r7, #4]
    39ec:	683a      	ldr	r2, [r7, #0]
    39ee:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    39f0:	bf00      	nop
    39f2:	370c      	adds	r7, #12
    39f4:	46bd      	mov	sp, r7
    39f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    39fa:	4770      	bx	lr

000039fc <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    39fc:	b480      	push	{r7}
    39fe:	b083      	sub	sp, #12
    3a00:	af00      	add	r7, sp, #0
    3a02:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    3a04:	687b      	ldr	r3, [r7, #4]
    3a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    3a08:	4618      	mov	r0, r3
    3a0a:	370c      	adds	r7, #12
    3a0c:	46bd      	mov	sp, r7
    3a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a12:	4770      	bx	lr

00003a14 <hri_can_write_IE_RF0NE_bit>:
	tmp = (tmp & CAN_IE_RF0NE) >> CAN_IE_RF0NE_Pos;
	return (bool)tmp;
}

static inline void hri_can_write_IE_RF0NE_bit(const void *const hw, bool value)
{
    3a14:	b480      	push	{r7}
    3a16:	b085      	sub	sp, #20
    3a18:	af00      	add	r7, sp, #0
    3a1a:	6078      	str	r0, [r7, #4]
    3a1c:	460b      	mov	r3, r1
    3a1e:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	CAN_CRITICAL_SECTION_ENTER();
	tmp = ((Can *)hw)->IE.reg;
    3a20:	687b      	ldr	r3, [r7, #4]
    3a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    3a24:	60fb      	str	r3, [r7, #12]
	tmp &= ~CAN_IE_RF0NE;
    3a26:	68fb      	ldr	r3, [r7, #12]
    3a28:	f023 0301 	bic.w	r3, r3, #1
    3a2c:	60fb      	str	r3, [r7, #12]
	tmp |= value << CAN_IE_RF0NE_Pos;
    3a2e:	78fb      	ldrb	r3, [r7, #3]
    3a30:	68fa      	ldr	r2, [r7, #12]
    3a32:	4313      	orrs	r3, r2
    3a34:	60fb      	str	r3, [r7, #12]
	((Can *)hw)->IE.reg = tmp;
    3a36:	687b      	ldr	r3, [r7, #4]
    3a38:	68fa      	ldr	r2, [r7, #12]
    3a3a:	655a      	str	r2, [r3, #84]	; 0x54
	CAN_CRITICAL_SECTION_LEAVE();
}
    3a3c:	bf00      	nop
    3a3e:	3714      	adds	r7, #20
    3a40:	46bd      	mov	sp, r7
    3a42:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a46:	4770      	bx	lr

00003a48 <hri_can_write_IE_TCE_bit>:
	tmp = (tmp & CAN_IE_TCE) >> CAN_IE_TCE_Pos;
	return (bool)tmp;
}

static inline void hri_can_write_IE_TCE_bit(const void *const hw, bool value)
{
    3a48:	b480      	push	{r7}
    3a4a:	b085      	sub	sp, #20
    3a4c:	af00      	add	r7, sp, #0
    3a4e:	6078      	str	r0, [r7, #4]
    3a50:	460b      	mov	r3, r1
    3a52:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	CAN_CRITICAL_SECTION_ENTER();
	tmp = ((Can *)hw)->IE.reg;
    3a54:	687b      	ldr	r3, [r7, #4]
    3a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    3a58:	60fb      	str	r3, [r7, #12]
	tmp &= ~CAN_IE_TCE;
    3a5a:	68fb      	ldr	r3, [r7, #12]
    3a5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    3a60:	60fb      	str	r3, [r7, #12]
	tmp |= value << CAN_IE_TCE_Pos;
    3a62:	78fb      	ldrb	r3, [r7, #3]
    3a64:	025b      	lsls	r3, r3, #9
    3a66:	461a      	mov	r2, r3
    3a68:	68fb      	ldr	r3, [r7, #12]
    3a6a:	4313      	orrs	r3, r2
    3a6c:	60fb      	str	r3, [r7, #12]
	((Can *)hw)->IE.reg = tmp;
    3a6e:	687b      	ldr	r3, [r7, #4]
    3a70:	68fa      	ldr	r2, [r7, #12]
    3a72:	655a      	str	r2, [r3, #84]	; 0x54
	CAN_CRITICAL_SECTION_LEAVE();
}
    3a74:	bf00      	nop
    3a76:	3714      	adds	r7, #20
    3a78:	46bd      	mov	sp, r7
    3a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a7e:	4770      	bx	lr

00003a80 <hri_can_get_IE_reg>:
	((Can *)hw)->IE.reg |= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ie_reg_t hri_can_get_IE_reg(const void *const hw, hri_can_ie_reg_t mask)
{
    3a80:	b480      	push	{r7}
    3a82:	b085      	sub	sp, #20
    3a84:	af00      	add	r7, sp, #0
    3a86:	6078      	str	r0, [r7, #4]
    3a88:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Can *)hw)->IE.reg;
    3a8a:	687b      	ldr	r3, [r7, #4]
    3a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    3a8e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    3a90:	68fa      	ldr	r2, [r7, #12]
    3a92:	683b      	ldr	r3, [r7, #0]
    3a94:	4013      	ands	r3, r2
    3a96:	60fb      	str	r3, [r7, #12]
	return tmp;
    3a98:	68fb      	ldr	r3, [r7, #12]
}
    3a9a:	4618      	mov	r0, r3
    3a9c:	3714      	adds	r7, #20
    3a9e:	46bd      	mov	sp, r7
    3aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3aa4:	4770      	bx	lr

00003aa6 <hri_can_write_IE_reg>:

static inline void hri_can_write_IE_reg(const void *const hw, hri_can_ie_reg_t data)
{
    3aa6:	b480      	push	{r7}
    3aa8:	b083      	sub	sp, #12
    3aaa:	af00      	add	r7, sp, #0
    3aac:	6078      	str	r0, [r7, #4]
    3aae:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IE.reg = data;
    3ab0:	687b      	ldr	r3, [r7, #4]
    3ab2:	683a      	ldr	r2, [r7, #0]
    3ab4:	655a      	str	r2, [r3, #84]	; 0x54
	CAN_CRITICAL_SECTION_LEAVE();
}
    3ab6:	bf00      	nop
    3ab8:	370c      	adds	r7, #12
    3aba:	46bd      	mov	sp, r7
    3abc:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ac0:	4770      	bx	lr

00003ac2 <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    3ac2:	b480      	push	{r7}
    3ac4:	b083      	sub	sp, #12
    3ac6:	af00      	add	r7, sp, #0
    3ac8:	6078      	str	r0, [r7, #4]
    3aca:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    3acc:	687b      	ldr	r3, [r7, #4]
    3ace:	683a      	ldr	r2, [r7, #0]
    3ad0:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    3ad2:	bf00      	nop
    3ad4:	370c      	adds	r7, #12
    3ad6:	46bd      	mov	sp, r7
    3ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3adc:	4770      	bx	lr

00003ade <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    3ade:	b480      	push	{r7}
    3ae0:	b083      	sub	sp, #12
    3ae2:	af00      	add	r7, sp, #0
    3ae4:	6078      	str	r0, [r7, #4]
    3ae6:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    3ae8:	687b      	ldr	r3, [r7, #4]
    3aea:	683a      	ldr	r2, [r7, #0]
    3aec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    3af0:	bf00      	nop
    3af2:	370c      	adds	r7, #12
    3af4:	46bd      	mov	sp, r7
    3af6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3afa:	4770      	bx	lr

00003afc <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    3afc:	b480      	push	{r7}
    3afe:	b083      	sub	sp, #12
    3b00:	af00      	add	r7, sp, #0
    3b02:	6078      	str	r0, [r7, #4]
    3b04:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    3b06:	687b      	ldr	r3, [r7, #4]
    3b08:	683a      	ldr	r2, [r7, #0]
    3b0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    3b0e:	bf00      	nop
    3b10:	370c      	adds	r7, #12
    3b12:	46bd      	mov	sp, r7
    3b14:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b18:	4770      	bx	lr

00003b1a <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    3b1a:	b480      	push	{r7}
    3b1c:	b083      	sub	sp, #12
    3b1e:	af00      	add	r7, sp, #0
    3b20:	6078      	str	r0, [r7, #4]
    3b22:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    3b24:	687b      	ldr	r3, [r7, #4]
    3b26:	683a      	ldr	r2, [r7, #0]
    3b28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    3b2c:	bf00      	nop
    3b2e:	370c      	adds	r7, #12
    3b30:	46bd      	mov	sp, r7
    3b32:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b36:	4770      	bx	lr

00003b38 <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    3b38:	b480      	push	{r7}
    3b3a:	b083      	sub	sp, #12
    3b3c:	af00      	add	r7, sp, #0
    3b3e:	6078      	str	r0, [r7, #4]
    3b40:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    3b42:	687b      	ldr	r3, [r7, #4]
    3b44:	683a      	ldr	r2, [r7, #0]
    3b46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    3b4a:	bf00      	nop
    3b4c:	370c      	adds	r7, #12
    3b4e:	46bd      	mov	sp, r7
    3b50:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b54:	4770      	bx	lr

00003b56 <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    3b56:	b480      	push	{r7}
    3b58:	b083      	sub	sp, #12
    3b5a:	af00      	add	r7, sp, #0
    3b5c:	6078      	str	r0, [r7, #4]
    3b5e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    3b60:	687b      	ldr	r3, [r7, #4]
    3b62:	683a      	ldr	r2, [r7, #0]
    3b64:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3b68:	bf00      	nop
    3b6a:	370c      	adds	r7, #12
    3b6c:	46bd      	mov	sp, r7
    3b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b72:	4770      	bx	lr

00003b74 <hri_can_write_RXF0A_F0AI_bf>:
	tmp = (tmp & CAN_RXF0A_F0AI(mask)) >> CAN_RXF0A_F0AI_Pos;
	return tmp;
}

static inline void hri_can_write_RXF0A_F0AI_bf(const void *const hw, hri_can_rxf0a_reg_t data)
{
    3b74:	b480      	push	{r7}
    3b76:	b085      	sub	sp, #20
    3b78:	af00      	add	r7, sp, #0
    3b7a:	6078      	str	r0, [r7, #4]
    3b7c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	CAN_CRITICAL_SECTION_ENTER();
	tmp = ((Can *)hw)->RXF0A.reg;
    3b7e:	687b      	ldr	r3, [r7, #4]
    3b80:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    3b84:	60fb      	str	r3, [r7, #12]
	tmp &= ~CAN_RXF0A_F0AI_Msk;
    3b86:	68fb      	ldr	r3, [r7, #12]
    3b88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    3b8c:	60fb      	str	r3, [r7, #12]
	tmp |= CAN_RXF0A_F0AI(data);
    3b8e:	683b      	ldr	r3, [r7, #0]
    3b90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    3b94:	68fa      	ldr	r2, [r7, #12]
    3b96:	4313      	orrs	r3, r2
    3b98:	60fb      	str	r3, [r7, #12]
	((Can *)hw)->RXF0A.reg = tmp;
    3b9a:	687b      	ldr	r3, [r7, #4]
    3b9c:	68fa      	ldr	r2, [r7, #12]
    3b9e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	CAN_CRITICAL_SECTION_LEAVE();
}
    3ba2:	bf00      	nop
    3ba4:	3714      	adds	r7, #20
    3ba6:	46bd      	mov	sp, r7
    3ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bac:	4770      	bx	lr

00003bae <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    3bae:	b480      	push	{r7}
    3bb0:	b083      	sub	sp, #12
    3bb2:	af00      	add	r7, sp, #0
    3bb4:	6078      	str	r0, [r7, #4]
    3bb6:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    3bb8:	687b      	ldr	r3, [r7, #4]
    3bba:	683a      	ldr	r2, [r7, #0]
    3bbc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    3bc0:	bf00      	nop
    3bc2:	370c      	adds	r7, #12
    3bc4:	46bd      	mov	sp, r7
    3bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bca:	4770      	bx	lr

00003bcc <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    3bcc:	b480      	push	{r7}
    3bce:	b083      	sub	sp, #12
    3bd0:	af00      	add	r7, sp, #0
    3bd2:	6078      	str	r0, [r7, #4]
    3bd4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    3bd6:	687b      	ldr	r3, [r7, #4]
    3bd8:	683a      	ldr	r2, [r7, #0]
    3bda:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3bde:	bf00      	nop
    3be0:	370c      	adds	r7, #12
    3be2:	46bd      	mov	sp, r7
    3be4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3be8:	4770      	bx	lr

00003bea <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    3bea:	b480      	push	{r7}
    3bec:	b083      	sub	sp, #12
    3bee:	af00      	add	r7, sp, #0
    3bf0:	6078      	str	r0, [r7, #4]
    3bf2:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    3bf4:	687b      	ldr	r3, [r7, #4]
    3bf6:	683a      	ldr	r2, [r7, #0]
    3bf8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    3bfc:	bf00      	nop
    3bfe:	370c      	adds	r7, #12
    3c00:	46bd      	mov	sp, r7
    3c02:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c06:	4770      	bx	lr

00003c08 <hri_can_write_TXBAR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBAR_reg(const void *const hw, hri_can_txbar_reg_t data)
{
    3c08:	b480      	push	{r7}
    3c0a:	b083      	sub	sp, #12
    3c0c:	af00      	add	r7, sp, #0
    3c0e:	6078      	str	r0, [r7, #4]
    3c10:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBAR.reg = data;
    3c12:	687b      	ldr	r3, [r7, #4]
    3c14:	683a      	ldr	r2, [r7, #0]
    3c16:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3c1a:	bf00      	nop
    3c1c:	370c      	adds	r7, #12
    3c1e:	46bd      	mov	sp, r7
    3c20:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c24:	4770      	bx	lr

00003c26 <hri_can_write_TXBTIE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBTIE_reg(const void *const hw, hri_can_txbtie_reg_t data)
{
    3c26:	b480      	push	{r7}
    3c28:	b083      	sub	sp, #12
    3c2a:	af00      	add	r7, sp, #0
    3c2c:	6078      	str	r0, [r7, #4]
    3c2e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBTIE.reg = data;
    3c30:	687b      	ldr	r3, [r7, #4]
    3c32:	683a      	ldr	r2, [r7, #0]
    3c34:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3c38:	bf00      	nop
    3c3a:	370c      	adds	r7, #12
    3c3c:	46bd      	mov	sp, r7
    3c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c42:	4770      	bx	lr

00003c44 <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    3c44:	b480      	push	{r7}
    3c46:	b083      	sub	sp, #12
    3c48:	af00      	add	r7, sp, #0
    3c4a:	6078      	str	r0, [r7, #4]
    3c4c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    3c4e:	687b      	ldr	r3, [r7, #4]
    3c50:	683a      	ldr	r2, [r7, #0]
    3c52:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3c56:	bf00      	nop
    3c58:	370c      	adds	r7, #12
    3c5a:	46bd      	mov	sp, r7
    3c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c60:	4770      	bx	lr
	...

00003c64 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    3c64:	b580      	push	{r7, lr}
    3c66:	b082      	sub	sp, #8
    3c68:	af00      	add	r7, sp, #0
    3c6a:	6078      	str	r0, [r7, #4]
    3c6c:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    3c6e:	687b      	ldr	r3, [r7, #4]
    3c70:	683a      	ldr	r2, [r7, #0]
    3c72:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    3c74:	687b      	ldr	r3, [r7, #4]
    3c76:	681b      	ldr	r3, [r3, #0]
    3c78:	4618      	mov	r0, r3
    3c7a:	4b55      	ldr	r3, [pc, #340]	; (3dd0 <_can_async_init+0x16c>)
    3c7c:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    3c7e:	bf00      	nop
    3c80:	687b      	ldr	r3, [r7, #4]
    3c82:	681b      	ldr	r3, [r3, #0]
    3c84:	4618      	mov	r0, r3
    3c86:	4b53      	ldr	r3, [pc, #332]	; (3dd4 <_can_async_init+0x170>)
    3c88:	4798      	blx	r3
    3c8a:	4603      	mov	r3, r0
    3c8c:	f083 0301 	eor.w	r3, r3, #1
    3c90:	b2db      	uxtb	r3, r3
    3c92:	2b00      	cmp	r3, #0
    3c94:	d1f4      	bne.n	3c80 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    3c96:	687b      	ldr	r3, [r7, #4]
    3c98:	681b      	ldr	r3, [r3, #0]
    3c9a:	4618      	mov	r0, r3
    3c9c:	4b4e      	ldr	r3, [pc, #312]	; (3dd8 <_can_async_init+0x174>)
    3c9e:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    3ca0:	683b      	ldr	r3, [r7, #0]
    3ca2:	4a4e      	ldr	r2, [pc, #312]	; (3ddc <_can_async_init+0x178>)
    3ca4:	4293      	cmp	r3, r2
    3ca6:	d17a      	bne.n	3d9e <_can_async_init+0x13a>
		_can1_dev    = dev;
    3ca8:	4a4d      	ldr	r2, [pc, #308]	; (3de0 <_can_async_init+0x17c>)
    3caa:	687b      	ldr	r3, [r7, #4]
    3cac:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    3cae:	687b      	ldr	r3, [r7, #4]
    3cb0:	4a4c      	ldr	r2, [pc, #304]	; (3de4 <_can_async_init+0x180>)
    3cb2:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    3cb4:	687b      	ldr	r3, [r7, #4]
    3cb6:	681b      	ldr	r3, [r3, #0]
    3cb8:	f44f 7140 	mov.w	r1, #768	; 0x300
    3cbc:	4618      	mov	r0, r3
    3cbe:	4b4a      	ldr	r3, [pc, #296]	; (3de8 <_can_async_init+0x184>)
    3cc0:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    3cc2:	687b      	ldr	r3, [r7, #4]
    3cc4:	681b      	ldr	r3, [r3, #0]
    3cc6:	2102      	movs	r1, #2
    3cc8:	4618      	mov	r0, r3
    3cca:	4b48      	ldr	r3, [pc, #288]	; (3dec <_can_async_init+0x188>)
    3ccc:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    3cce:	687b      	ldr	r3, [r7, #4]
    3cd0:	681b      	ldr	r3, [r3, #0]
    3cd2:	4947      	ldr	r1, [pc, #284]	; (3df0 <_can_async_init+0x18c>)
    3cd4:	4618      	mov	r0, r3
    3cd6:	4b47      	ldr	r3, [pc, #284]	; (3df4 <_can_async_init+0x190>)
    3cd8:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    3cda:	687b      	ldr	r3, [r7, #4]
    3cdc:	681b      	ldr	r3, [r3, #0]
    3cde:	4946      	ldr	r1, [pc, #280]	; (3df8 <_can_async_init+0x194>)
    3ce0:	4618      	mov	r0, r3
    3ce2:	4b46      	ldr	r3, [pc, #280]	; (3dfc <_can_async_init+0x198>)
    3ce4:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    3ce6:	687b      	ldr	r3, [r7, #4]
    3ce8:	681a      	ldr	r2, [r3, #0]
    3cea:	4b45      	ldr	r3, [pc, #276]	; (3e00 <_can_async_init+0x19c>)
    3cec:	b29b      	uxth	r3, r3
    3cee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    3cf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    3cf6:	4619      	mov	r1, r3
    3cf8:	4610      	mov	r0, r2
    3cfa:	4b42      	ldr	r3, [pc, #264]	; (3e04 <_can_async_init+0x1a0>)
    3cfc:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    3cfe:	687b      	ldr	r3, [r7, #4]
    3d00:	681b      	ldr	r3, [r3, #0]
    3d02:	2107      	movs	r1, #7
    3d04:	4618      	mov	r0, r3
    3d06:	4b40      	ldr	r3, [pc, #256]	; (3e08 <_can_async_init+0x1a4>)
    3d08:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    3d0a:	687b      	ldr	r3, [r7, #4]
    3d0c:	681b      	ldr	r3, [r3, #0]
    3d0e:	2107      	movs	r1, #7
    3d10:	4618      	mov	r0, r3
    3d12:	4b3e      	ldr	r3, [pc, #248]	; (3e0c <_can_async_init+0x1a8>)
    3d14:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    3d16:	687b      	ldr	r3, [r7, #4]
    3d18:	681a      	ldr	r2, [r3, #0]
    3d1a:	4b3d      	ldr	r3, [pc, #244]	; (3e10 <_can_async_init+0x1ac>)
    3d1c:	b29b      	uxth	r3, r3
    3d1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    3d22:	4619      	mov	r1, r3
    3d24:	4610      	mov	r0, r2
    3d26:	4b3b      	ldr	r3, [pc, #236]	; (3e14 <_can_async_init+0x1b0>)
    3d28:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    3d2a:	687b      	ldr	r3, [r7, #4]
    3d2c:	681a      	ldr	r2, [r3, #0]
    3d2e:	4b3a      	ldr	r3, [pc, #232]	; (3e18 <_can_async_init+0x1b4>)
    3d30:	b29b      	uxth	r3, r3
    3d32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3d36:	4619      	mov	r1, r3
    3d38:	4610      	mov	r0, r2
    3d3a:	4b38      	ldr	r3, [pc, #224]	; (3e1c <_can_async_init+0x1b8>)
    3d3c:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    3d3e:	687b      	ldr	r3, [r7, #4]
    3d40:	681b      	ldr	r3, [r3, #0]
    3d42:	2128      	movs	r1, #40	; 0x28
    3d44:	4618      	mov	r0, r3
    3d46:	4b36      	ldr	r3, [pc, #216]	; (3e20 <_can_async_init+0x1bc>)
    3d48:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    3d4a:	687b      	ldr	r3, [r7, #4]
    3d4c:	681a      	ldr	r2, [r3, #0]
    3d4e:	4b35      	ldr	r3, [pc, #212]	; (3e24 <_can_async_init+0x1c0>)
    3d50:	b29b      	uxth	r3, r3
    3d52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3d56:	4619      	mov	r1, r3
    3d58:	4610      	mov	r0, r2
    3d5a:	4b33      	ldr	r3, [pc, #204]	; (3e28 <_can_async_init+0x1c4>)
    3d5c:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    3d5e:	687b      	ldr	r3, [r7, #4]
    3d60:	681a      	ldr	r2, [r3, #0]
    3d62:	4b32      	ldr	r3, [pc, #200]	; (3e2c <_can_async_init+0x1c8>)
    3d64:	b29b      	uxth	r3, r3
    3d66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3d6a:	4619      	mov	r1, r3
    3d6c:	4610      	mov	r0, r2
    3d6e:	4b30      	ldr	r3, [pc, #192]	; (3e30 <_can_async_init+0x1cc>)
    3d70:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    3d72:	687b      	ldr	r3, [r7, #4]
    3d74:	681b      	ldr	r3, [r3, #0]
    3d76:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    3d7a:	4618      	mov	r0, r3
    3d7c:	4b2d      	ldr	r3, [pc, #180]	; (3e34 <_can_async_init+0x1d0>)
    3d7e:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    3d80:	204f      	movs	r0, #79	; 0x4f
    3d82:	4b2d      	ldr	r3, [pc, #180]	; (3e38 <_can_async_init+0x1d4>)
    3d84:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    3d86:	204f      	movs	r0, #79	; 0x4f
    3d88:	4b2c      	ldr	r3, [pc, #176]	; (3e3c <_can_async_init+0x1d8>)
    3d8a:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    3d8c:	204f      	movs	r0, #79	; 0x4f
    3d8e:	4b2c      	ldr	r3, [pc, #176]	; (3e40 <_can_async_init+0x1dc>)
    3d90:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    3d92:	687b      	ldr	r3, [r7, #4]
    3d94:	681b      	ldr	r3, [r3, #0]
    3d96:	2101      	movs	r1, #1
    3d98:	4618      	mov	r0, r3
    3d9a:	4b2a      	ldr	r3, [pc, #168]	; (3e44 <_can_async_init+0x1e0>)
    3d9c:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    3d9e:	687b      	ldr	r3, [r7, #4]
    3da0:	681b      	ldr	r3, [r3, #0]
    3da2:	4618      	mov	r0, r3
    3da4:	4b28      	ldr	r3, [pc, #160]	; (3e48 <_can_async_init+0x1e4>)
    3da6:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    3da8:	687b      	ldr	r3, [r7, #4]
    3daa:	681b      	ldr	r3, [r3, #0]
    3dac:	4618      	mov	r0, r3
    3dae:	4b27      	ldr	r3, [pc, #156]	; (3e4c <_can_async_init+0x1e8>)
    3db0:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    3db2:	bf00      	nop
    3db4:	687b      	ldr	r3, [r7, #4]
    3db6:	681b      	ldr	r3, [r3, #0]
    3db8:	4618      	mov	r0, r3
    3dba:	4b06      	ldr	r3, [pc, #24]	; (3dd4 <_can_async_init+0x170>)
    3dbc:	4798      	blx	r3
    3dbe:	4603      	mov	r3, r0
    3dc0:	2b00      	cmp	r3, #0
    3dc2:	d1f7      	bne.n	3db4 <_can_async_init+0x150>
	};

	return ERR_NONE;
    3dc4:	2300      	movs	r3, #0
}
    3dc6:	4618      	mov	r0, r3
    3dc8:	3708      	adds	r7, #8
    3dca:	46bd      	mov	sp, r7
    3dcc:	bd80      	pop	{r7, pc}
    3dce:	bf00      	nop
    3dd0:	00003895 	.word	0x00003895
    3dd4:	000038b5 	.word	0x000038b5
    3dd8:	00003903 	.word	0x00003903
    3ddc:	42000400 	.word	0x42000400
    3de0:	2000073c 	.word	0x2000073c
    3de4:	20000004 	.word	0x20000004
    3de8:	000039a3 	.word	0x000039a3
    3dec:	0000385d 	.word	0x0000385d
    3df0:	00010c01 	.word	0x00010c01
    3df4:	000039c5 	.word	0x000039c5
    3df8:	00010c10 	.word	0x00010c10
    3dfc:	00003879 	.word	0x00003879
    3e00:	20000eac 	.word	0x20000eac
    3e04:	00003b57 	.word	0x00003b57
    3e08:	00003baf 	.word	0x00003baf
    3e0c:	00003beb 	.word	0x00003beb
    3e10:	20000e64 	.word	0x20000e64
    3e14:	00003bcd 	.word	0x00003bcd
    3e18:	20000714 	.word	0x20000714
    3e1c:	00003c45 	.word	0x00003c45
    3e20:	00003adf 	.word	0x00003adf
    3e24:	20000724 	.word	0x20000724
    3e28:	00003afd 	.word	0x00003afd
    3e2c:	2000072c 	.word	0x2000072c
    3e30:	00003b1b 	.word	0x00003b1b
    3e34:	00003b39 	.word	0x00003b39
    3e38:	0000372d 	.word	0x0000372d
    3e3c:	00003771 	.word	0x00003771
    3e40:	000036f1 	.word	0x000036f1
    3e44:	00003ac3 	.word	0x00003ac3
    3e48:	00003923 	.word	0x00003923
    3e4c:	000038e3 	.word	0x000038e3

00003e50 <_can_async_enable>:

/**
 * \brief Enable CAN
 */
int32_t _can_async_enable(struct _can_async_device *const dev)
{
    3e50:	b580      	push	{r7, lr}
    3e52:	b082      	sub	sp, #8
    3e54:	af00      	add	r7, sp, #0
    3e56:	6078      	str	r0, [r7, #4]
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    3e58:	687b      	ldr	r3, [r7, #4]
    3e5a:	681b      	ldr	r3, [r3, #0]
    3e5c:	4618      	mov	r0, r3
    3e5e:	4b03      	ldr	r3, [pc, #12]	; (3e6c <_can_async_enable+0x1c>)
    3e60:	4798      	blx	r3
	return ERR_NONE;
    3e62:	2300      	movs	r3, #0
}
    3e64:	4618      	mov	r0, r3
    3e66:	3708      	adds	r7, #8
    3e68:	46bd      	mov	sp, r7
    3e6a:	bd80      	pop	{r7, pc}
    3e6c:	000038e3 	.word	0x000038e3

00003e70 <_can_async_read>:

/**
 * \brief Read a CAN message
 */
int32_t _can_async_read(struct _can_async_device *const dev, struct can_message *msg)
{
    3e70:	b590      	push	{r4, r7, lr}
    3e72:	b089      	sub	sp, #36	; 0x24
    3e74:	af00      	add	r7, sp, #0
    3e76:	6078      	str	r0, [r7, #4]
    3e78:	6039      	str	r1, [r7, #0]
	struct _can_rx_fifo_entry *f = NULL;
    3e7a:	2300      	movs	r3, #0
    3e7c:	61fb      	str	r3, [r7, #28]
	hri_can_rxf0s_reg_t        get_index;

	if (!hri_can_read_RXF0S_F0FL_bf(dev->hw)) {
    3e7e:	687b      	ldr	r3, [r7, #4]
    3e80:	681b      	ldr	r3, [r3, #0]
    3e82:	4618      	mov	r0, r3
    3e84:	4b37      	ldr	r3, [pc, #220]	; (3f64 <_can_async_read+0xf4>)
    3e86:	4798      	blx	r3
    3e88:	4603      	mov	r3, r0
    3e8a:	2b00      	cmp	r3, #0
    3e8c:	d102      	bne.n	3e94 <_can_async_read+0x24>
		return ERR_NOT_FOUND;
    3e8e:	f06f 0309 	mvn.w	r3, #9
    3e92:	e063      	b.n	3f5c <_can_async_read+0xec>
	}

	get_index = hri_can_read_RXF0S_F0GI_bf(dev->hw);
    3e94:	687b      	ldr	r3, [r7, #4]
    3e96:	681b      	ldr	r3, [r3, #0]
    3e98:	4618      	mov	r0, r3
    3e9a:	4b33      	ldr	r3, [pc, #204]	; (3f68 <_can_async_read+0xf8>)
    3e9c:	4798      	blx	r3
    3e9e:	61b8      	str	r0, [r7, #24]
	if (dev->hw == CAN0) {
		f = (struct _can_rx_fifo_entry *)(can0_rx_fifo + get_index * CONF_CAN0_F0DS);
	}
#endif
#ifdef CONF_CAN1_ENABLED
	if (dev->hw == CAN1) {
    3ea0:	687b      	ldr	r3, [r7, #4]
    3ea2:	681b      	ldr	r3, [r3, #0]
    3ea4:	4a31      	ldr	r2, [pc, #196]	; (3f6c <_can_async_read+0xfc>)
    3ea6:	4293      	cmp	r3, r2
    3ea8:	d108      	bne.n	3ebc <_can_async_read+0x4c>
		f = (struct _can_rx_fifo_entry *)(can1_rx_fifo + get_index * CONF_CAN1_F0DS);
    3eaa:	69ba      	ldr	r2, [r7, #24]
    3eac:	4613      	mov	r3, r2
    3eae:	00db      	lsls	r3, r3, #3
    3eb0:	4413      	add	r3, r2
    3eb2:	00db      	lsls	r3, r3, #3
    3eb4:	461a      	mov	r2, r3
    3eb6:	4b2e      	ldr	r3, [pc, #184]	; (3f70 <_can_async_read+0x100>)
    3eb8:	4413      	add	r3, r2
    3eba:	61fb      	str	r3, [r7, #28]
	}
#endif

	if (f == NULL) {
    3ebc:	69fb      	ldr	r3, [r7, #28]
    3ebe:	2b00      	cmp	r3, #0
    3ec0:	d102      	bne.n	3ec8 <_can_async_read+0x58>
		return ERR_NO_RESOURCE;
    3ec2:	f06f 031b 	mvn.w	r3, #27
    3ec6:	e049      	b.n	3f5c <_can_async_read+0xec>
	}

	if (f->R0.bit.XTD == 1) {
    3ec8:	69fb      	ldr	r3, [r7, #28]
    3eca:	681b      	ldr	r3, [r3, #0]
    3ecc:	f3c3 7380 	ubfx	r3, r3, #30, #1
    3ed0:	b2db      	uxtb	r3, r3
    3ed2:	2b01      	cmp	r3, #1
    3ed4:	d10a      	bne.n	3eec <_can_async_read+0x7c>
		msg->fmt = CAN_FMT_EXTID;
    3ed6:	683b      	ldr	r3, [r7, #0]
    3ed8:	2201      	movs	r2, #1
    3eda:	735a      	strb	r2, [r3, #13]
		msg->id  = f->R0.bit.ID;
    3edc:	69fb      	ldr	r3, [r7, #28]
    3ede:	681b      	ldr	r3, [r3, #0]
    3ee0:	f3c3 031c 	ubfx	r3, r3, #0, #29
    3ee4:	461a      	mov	r2, r3
    3ee6:	683b      	ldr	r3, [r7, #0]
    3ee8:	601a      	str	r2, [r3, #0]
    3eea:	e00a      	b.n	3f02 <_can_async_read+0x92>
	} else {
		msg->fmt = CAN_FMT_STDID;
    3eec:	683b      	ldr	r3, [r7, #0]
    3eee:	2200      	movs	r2, #0
    3ef0:	735a      	strb	r2, [r3, #13]
		/* A standard identifier is stored into ID[28:18] */
		msg->id = f->R0.bit.ID >> 18;
    3ef2:	69fb      	ldr	r3, [r7, #28]
    3ef4:	681b      	ldr	r3, [r3, #0]
    3ef6:	f3c3 031c 	ubfx	r3, r3, #0, #29
    3efa:	149b      	asrs	r3, r3, #18
    3efc:	461a      	mov	r2, r3
    3efe:	683b      	ldr	r3, [r7, #0]
    3f00:	601a      	str	r2, [r3, #0]
	}

	if (f->R0.bit.RTR == 1) {
    3f02:	69fb      	ldr	r3, [r7, #28]
    3f04:	681b      	ldr	r3, [r3, #0]
    3f06:	f3c3 7340 	ubfx	r3, r3, #29, #1
    3f0a:	b2db      	uxtb	r3, r3
    3f0c:	2b01      	cmp	r3, #1
    3f0e:	d102      	bne.n	3f16 <_can_async_read+0xa6>
		msg->type = CAN_TYPE_REMOTE;
    3f10:	683b      	ldr	r3, [r7, #0]
    3f12:	2201      	movs	r2, #1
    3f14:	711a      	strb	r2, [r3, #4]
	}

	const uint8_t dlc2len[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 12, 16, 20, 24, 32, 48, 64};
    3f16:	4b17      	ldr	r3, [pc, #92]	; (3f74 <_can_async_read+0x104>)
    3f18:	f107 0408 	add.w	r4, r7, #8
    3f1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    3f1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	msg->len                = dlc2len[f->R1.bit.DLC];
    3f22:	69fb      	ldr	r3, [r7, #28]
    3f24:	685b      	ldr	r3, [r3, #4]
    3f26:	f3c3 4303 	ubfx	r3, r3, #16, #4
    3f2a:	b2db      	uxtb	r3, r3
    3f2c:	f107 0220 	add.w	r2, r7, #32
    3f30:	4413      	add	r3, r2
    3f32:	f813 2c18 	ldrb.w	r2, [r3, #-24]
    3f36:	683b      	ldr	r3, [r7, #0]
    3f38:	731a      	strb	r2, [r3, #12]

	memcpy(msg->data, f->data, msg->len);
    3f3a:	683b      	ldr	r3, [r7, #0]
    3f3c:	6898      	ldr	r0, [r3, #8]
    3f3e:	69fb      	ldr	r3, [r7, #28]
    3f40:	f103 0108 	add.w	r1, r3, #8
    3f44:	683b      	ldr	r3, [r7, #0]
    3f46:	7b1b      	ldrb	r3, [r3, #12]
    3f48:	461a      	mov	r2, r3
    3f4a:	4b0b      	ldr	r3, [pc, #44]	; (3f78 <_can_async_read+0x108>)
    3f4c:	4798      	blx	r3

	hri_can_write_RXF0A_F0AI_bf(dev->hw, get_index);
    3f4e:	687b      	ldr	r3, [r7, #4]
    3f50:	681b      	ldr	r3, [r3, #0]
    3f52:	69b9      	ldr	r1, [r7, #24]
    3f54:	4618      	mov	r0, r3
    3f56:	4b09      	ldr	r3, [pc, #36]	; (3f7c <_can_async_read+0x10c>)
    3f58:	4798      	blx	r3

	return ERR_NONE;
    3f5a:	2300      	movs	r3, #0
}
    3f5c:	4618      	mov	r0, r3
    3f5e:	3724      	adds	r7, #36	; 0x24
    3f60:	46bd      	mov	sp, r7
    3f62:	bd90      	pop	{r4, r7, pc}
    3f64:	000037d5 	.word	0x000037d5
    3f68:	000037f3 	.word	0x000037f3
    3f6c:	42000400 	.word	0x42000400
    3f70:	20000eac 	.word	0x20000eac
    3f74:	0000e400 	.word	0x0000e400
    3f78:	0000dccd 	.word	0x0000dccd
    3f7c:	00003b75 	.word	0x00003b75

00003f80 <_can_async_write>:

/**
 * \brief Write a CAN message
 */
int32_t _can_async_write(struct _can_async_device *const dev, struct can_message *msg)
{
    3f80:	b590      	push	{r4, r7, lr}
    3f82:	b085      	sub	sp, #20
    3f84:	af00      	add	r7, sp, #0
    3f86:	6078      	str	r0, [r7, #4]
    3f88:	6039      	str	r1, [r7, #0]
	struct _can_tx_fifo_entry *f = NULL;
    3f8a:	2300      	movs	r3, #0
    3f8c:	60fb      	str	r3, [r7, #12]
	hri_can_txfqs_reg_t        put_index;

	if (hri_can_get_TXFQS_TFQF_bit(dev->hw)) {
    3f8e:	687b      	ldr	r3, [r7, #4]
    3f90:	681b      	ldr	r3, [r3, #0]
    3f92:	4618      	mov	r0, r3
    3f94:	4b61      	ldr	r3, [pc, #388]	; (411c <_can_async_write+0x19c>)
    3f96:	4798      	blx	r3
    3f98:	4603      	mov	r3, r0
    3f9a:	2b00      	cmp	r3, #0
    3f9c:	d002      	beq.n	3fa4 <_can_async_write+0x24>
		return ERR_NO_RESOURCE;
    3f9e:	f06f 031b 	mvn.w	r3, #27
    3fa2:	e0b7      	b.n	4114 <_can_async_write+0x194>
	}

	put_index = hri_can_read_TXFQS_TFQPI_bf(dev->hw);
    3fa4:	687b      	ldr	r3, [r7, #4]
    3fa6:	681b      	ldr	r3, [r3, #0]
    3fa8:	4618      	mov	r0, r3
    3faa:	4b5d      	ldr	r3, [pc, #372]	; (4120 <_can_async_write+0x1a0>)
    3fac:	4798      	blx	r3
    3fae:	60b8      	str	r0, [r7, #8]
	if (dev->hw == CAN0) {
		f = (struct _can_tx_fifo_entry *)(can0_tx_fifo + put_index * CONF_CAN0_TBDS);
	}
#endif
#ifdef CONF_CAN1_ENABLED
	if (dev->hw == CAN1) {
    3fb0:	687b      	ldr	r3, [r7, #4]
    3fb2:	681b      	ldr	r3, [r3, #0]
    3fb4:	4a5b      	ldr	r2, [pc, #364]	; (4124 <_can_async_write+0x1a4>)
    3fb6:	4293      	cmp	r3, r2
    3fb8:	d108      	bne.n	3fcc <_can_async_write+0x4c>
		f = (struct _can_tx_fifo_entry *)(can1_tx_fifo + put_index * CONF_CAN1_TBDS);
    3fba:	68ba      	ldr	r2, [r7, #8]
    3fbc:	4613      	mov	r3, r2
    3fbe:	00db      	lsls	r3, r3, #3
    3fc0:	4413      	add	r3, r2
    3fc2:	00db      	lsls	r3, r3, #3
    3fc4:	461a      	mov	r2, r3
    3fc6:	4b58      	ldr	r3, [pc, #352]	; (4128 <_can_async_write+0x1a8>)
    3fc8:	4413      	add	r3, r2
    3fca:	60fb      	str	r3, [r7, #12]
	}
#endif
	if (f == NULL) {
    3fcc:	68fb      	ldr	r3, [r7, #12]
    3fce:	2b00      	cmp	r3, #0
    3fd0:	d102      	bne.n	3fd8 <_can_async_write+0x58>
		return ERR_NO_RESOURCE;
    3fd2:	f06f 031b 	mvn.w	r3, #27
    3fd6:	e09d      	b.n	4114 <_can_async_write+0x194>
	}

	if (msg->fmt == CAN_FMT_EXTID) {
    3fd8:	683b      	ldr	r3, [r7, #0]
    3fda:	7b5b      	ldrb	r3, [r3, #13]
    3fdc:	2b01      	cmp	r3, #1
    3fde:	d109      	bne.n	3ff4 <_can_async_write+0x74>
		f->T0.val     = msg->id;
    3fe0:	683b      	ldr	r3, [r7, #0]
    3fe2:	681a      	ldr	r2, [r3, #0]
    3fe4:	68fb      	ldr	r3, [r7, #12]
    3fe6:	601a      	str	r2, [r3, #0]
		f->T0.bit.XTD = 1;
    3fe8:	68fa      	ldr	r2, [r7, #12]
    3fea:	6813      	ldr	r3, [r2, #0]
    3fec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    3ff0:	6013      	str	r3, [r2, #0]
    3ff2:	e004      	b.n	3ffe <_can_async_write+0x7e>
	} else {
		/* A standard identifier is stored into ID[28:18] */
		f->T0.val = msg->id << 18;
    3ff4:	683b      	ldr	r3, [r7, #0]
    3ff6:	681b      	ldr	r3, [r3, #0]
    3ff8:	049a      	lsls	r2, r3, #18
    3ffa:	68fb      	ldr	r3, [r7, #12]
    3ffc:	601a      	str	r2, [r3, #0]
	}

	if (msg->len <= 8) {
    3ffe:	683b      	ldr	r3, [r7, #0]
    4000:	7b1b      	ldrb	r3, [r3, #12]
    4002:	2b08      	cmp	r3, #8
    4004:	d80a      	bhi.n	401c <_can_async_write+0x9c>
		f->T1.bit.DLC = msg->len;
    4006:	683b      	ldr	r3, [r7, #0]
    4008:	7b1b      	ldrb	r3, [r3, #12]
    400a:	f003 030f 	and.w	r3, r3, #15
    400e:	b2d9      	uxtb	r1, r3
    4010:	68fa      	ldr	r2, [r7, #12]
    4012:	6853      	ldr	r3, [r2, #4]
    4014:	f361 4313 	bfi	r3, r1, #16, #4
    4018:	6053      	str	r3, [r2, #4]
    401a:	e04a      	b.n	40b2 <_can_async_write+0x132>
	} else if (msg->len <= 12) {
    401c:	683b      	ldr	r3, [r7, #0]
    401e:	7b1b      	ldrb	r3, [r3, #12]
    4020:	2b0c      	cmp	r3, #12
    4022:	d806      	bhi.n	4032 <_can_async_write+0xb2>
		f->T1.bit.DLC = 0x9;
    4024:	68fa      	ldr	r2, [r7, #12]
    4026:	6853      	ldr	r3, [r2, #4]
    4028:	2109      	movs	r1, #9
    402a:	f361 4313 	bfi	r3, r1, #16, #4
    402e:	6053      	str	r3, [r2, #4]
    4030:	e03f      	b.n	40b2 <_can_async_write+0x132>
	} else if (msg->len <= 16) {
    4032:	683b      	ldr	r3, [r7, #0]
    4034:	7b1b      	ldrb	r3, [r3, #12]
    4036:	2b10      	cmp	r3, #16
    4038:	d806      	bhi.n	4048 <_can_async_write+0xc8>
		f->T1.bit.DLC = 0xA;
    403a:	68fa      	ldr	r2, [r7, #12]
    403c:	6853      	ldr	r3, [r2, #4]
    403e:	210a      	movs	r1, #10
    4040:	f361 4313 	bfi	r3, r1, #16, #4
    4044:	6053      	str	r3, [r2, #4]
    4046:	e034      	b.n	40b2 <_can_async_write+0x132>
	} else if (msg->len <= 20) {
    4048:	683b      	ldr	r3, [r7, #0]
    404a:	7b1b      	ldrb	r3, [r3, #12]
    404c:	2b14      	cmp	r3, #20
    404e:	d806      	bhi.n	405e <_can_async_write+0xde>
		f->T1.bit.DLC = 0xB;
    4050:	68fa      	ldr	r2, [r7, #12]
    4052:	6853      	ldr	r3, [r2, #4]
    4054:	210b      	movs	r1, #11
    4056:	f361 4313 	bfi	r3, r1, #16, #4
    405a:	6053      	str	r3, [r2, #4]
    405c:	e029      	b.n	40b2 <_can_async_write+0x132>
	} else if (msg->len <= 24) {
    405e:	683b      	ldr	r3, [r7, #0]
    4060:	7b1b      	ldrb	r3, [r3, #12]
    4062:	2b18      	cmp	r3, #24
    4064:	d806      	bhi.n	4074 <_can_async_write+0xf4>
		f->T1.bit.DLC = 0xC;
    4066:	68fa      	ldr	r2, [r7, #12]
    4068:	6853      	ldr	r3, [r2, #4]
    406a:	210c      	movs	r1, #12
    406c:	f361 4313 	bfi	r3, r1, #16, #4
    4070:	6053      	str	r3, [r2, #4]
    4072:	e01e      	b.n	40b2 <_can_async_write+0x132>
	} else if (msg->len <= 32) {
    4074:	683b      	ldr	r3, [r7, #0]
    4076:	7b1b      	ldrb	r3, [r3, #12]
    4078:	2b20      	cmp	r3, #32
    407a:	d806      	bhi.n	408a <_can_async_write+0x10a>
		f->T1.bit.DLC = 0xD;
    407c:	68fa      	ldr	r2, [r7, #12]
    407e:	6853      	ldr	r3, [r2, #4]
    4080:	210d      	movs	r1, #13
    4082:	f361 4313 	bfi	r3, r1, #16, #4
    4086:	6053      	str	r3, [r2, #4]
    4088:	e013      	b.n	40b2 <_can_async_write+0x132>
	} else if (msg->len <= 48) {
    408a:	683b      	ldr	r3, [r7, #0]
    408c:	7b1b      	ldrb	r3, [r3, #12]
    408e:	2b30      	cmp	r3, #48	; 0x30
    4090:	d806      	bhi.n	40a0 <_can_async_write+0x120>
		f->T1.bit.DLC = 0xE;
    4092:	68fa      	ldr	r2, [r7, #12]
    4094:	6853      	ldr	r3, [r2, #4]
    4096:	210e      	movs	r1, #14
    4098:	f361 4313 	bfi	r3, r1, #16, #4
    409c:	6053      	str	r3, [r2, #4]
    409e:	e008      	b.n	40b2 <_can_async_write+0x132>
	} else if (msg->len <= 64) {
    40a0:	683b      	ldr	r3, [r7, #0]
    40a2:	7b1b      	ldrb	r3, [r3, #12]
    40a4:	2b40      	cmp	r3, #64	; 0x40
    40a6:	d804      	bhi.n	40b2 <_can_async_write+0x132>
		f->T1.bit.DLC = 0xF;
    40a8:	68fa      	ldr	r2, [r7, #12]
    40aa:	6853      	ldr	r3, [r2, #4]
    40ac:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
    40b0:	6053      	str	r3, [r2, #4]
	}

	f->T1.bit.FDF = hri_can_get_CCCR_FDOE_bit(dev->hw);
    40b2:	687b      	ldr	r3, [r7, #4]
    40b4:	681b      	ldr	r3, [r3, #0]
    40b6:	4618      	mov	r0, r3
    40b8:	4b1c      	ldr	r3, [pc, #112]	; (412c <_can_async_write+0x1ac>)
    40ba:	4798      	blx	r3
    40bc:	4603      	mov	r3, r0
    40be:	4619      	mov	r1, r3
    40c0:	68fa      	ldr	r2, [r7, #12]
    40c2:	6853      	ldr	r3, [r2, #4]
    40c4:	f361 5355 	bfi	r3, r1, #21, #1
    40c8:	6053      	str	r3, [r2, #4]
	f->T1.bit.BRS = hri_can_get_CCCR_BRSE_bit(dev->hw);
    40ca:	687b      	ldr	r3, [r7, #4]
    40cc:	681b      	ldr	r3, [r3, #0]
    40ce:	4618      	mov	r0, r3
    40d0:	4b17      	ldr	r3, [pc, #92]	; (4130 <_can_async_write+0x1b0>)
    40d2:	4798      	blx	r3
    40d4:	4603      	mov	r3, r0
    40d6:	4619      	mov	r1, r3
    40d8:	68fa      	ldr	r2, [r7, #12]
    40da:	6853      	ldr	r3, [r2, #4]
    40dc:	f361 5314 	bfi	r3, r1, #20, #1
    40e0:	6053      	str	r3, [r2, #4]

	memcpy(f->data, msg->data, msg->len);
    40e2:	68fb      	ldr	r3, [r7, #12]
    40e4:	f103 0008 	add.w	r0, r3, #8
    40e8:	683b      	ldr	r3, [r7, #0]
    40ea:	6899      	ldr	r1, [r3, #8]
    40ec:	683b      	ldr	r3, [r7, #0]
    40ee:	7b1b      	ldrb	r3, [r3, #12]
    40f0:	461a      	mov	r2, r3
    40f2:	4b10      	ldr	r3, [pc, #64]	; (4134 <_can_async_write+0x1b4>)
    40f4:	4798      	blx	r3

	hri_can_write_TXBAR_reg(dev->hw, 1 << hri_can_read_TXFQS_TFQPI_bf(dev->hw));
    40f6:	687b      	ldr	r3, [r7, #4]
    40f8:	681c      	ldr	r4, [r3, #0]
    40fa:	687b      	ldr	r3, [r7, #4]
    40fc:	681b      	ldr	r3, [r3, #0]
    40fe:	4618      	mov	r0, r3
    4100:	4b07      	ldr	r3, [pc, #28]	; (4120 <_can_async_write+0x1a0>)
    4102:	4798      	blx	r3
    4104:	4602      	mov	r2, r0
    4106:	2301      	movs	r3, #1
    4108:	4093      	lsls	r3, r2
    410a:	4619      	mov	r1, r3
    410c:	4620      	mov	r0, r4
    410e:	4b0a      	ldr	r3, [pc, #40]	; (4138 <_can_async_write+0x1b8>)
    4110:	4798      	blx	r3
	return ERR_NONE;
    4112:	2300      	movs	r3, #0
}
    4114:	4618      	mov	r0, r3
    4116:	3714      	adds	r7, #20
    4118:	46bd      	mov	sp, r7
    411a:	bd90      	pop	{r4, r7, pc}
    411c:	00003813 	.word	0x00003813
    4120:	0000383d 	.word	0x0000383d
    4124:	42000400 	.word	0x42000400
    4128:	20000e64 	.word	0x20000e64
    412c:	00003943 	.word	0x00003943
    4130:	00003973 	.word	0x00003973
    4134:	0000dccd 	.word	0x0000dccd
    4138:	00003c09 	.word	0x00003c09

0000413c <_can_async_set_irq_state>:

/**
 * \brief Set CAN Interrupt State
 */
void _can_async_set_irq_state(struct _can_async_device *const dev, enum can_async_callback_type type, bool state)
{
    413c:	b580      	push	{r7, lr}
    413e:	b084      	sub	sp, #16
    4140:	af00      	add	r7, sp, #0
    4142:	6078      	str	r0, [r7, #4]
    4144:	460b      	mov	r3, r1
    4146:	70fb      	strb	r3, [r7, #3]
    4148:	4613      	mov	r3, r2
    414a:	70bb      	strb	r3, [r7, #2]
	uint32_t ie;

	if (type == CAN_ASYNC_RX_CB) {
    414c:	78fb      	ldrb	r3, [r7, #3]
    414e:	2b00      	cmp	r3, #0
    4150:	d107      	bne.n	4162 <_can_async_set_irq_state+0x26>
		hri_can_write_IE_RF0NE_bit(dev->hw, state);
    4152:	687b      	ldr	r3, [r7, #4]
    4154:	681b      	ldr	r3, [r3, #0]
    4156:	78ba      	ldrb	r2, [r7, #2]
    4158:	4611      	mov	r1, r2
    415a:	4618      	mov	r0, r3
    415c:	4b15      	ldr	r3, [pc, #84]	; (41b4 <_can_async_set_irq_state+0x78>)
    415e:	4798      	blx	r3
	} else if (type == CAN_ASYNC_IRQ_CB) {
		ie = hri_can_get_IE_reg(dev->hw, CAN_IE_RF0NE | CAN_IE_TCE);
		hri_can_write_IE_reg(dev->hw, ie | CONF_CAN0_IE_REG);
	}

	return;
    4160:	e023      	b.n	41aa <_can_async_set_irq_state+0x6e>
	} else if (type == CAN_ASYNC_TX_CB) {
    4162:	78fb      	ldrb	r3, [r7, #3]
    4164:	2b01      	cmp	r3, #1
    4166:	d10e      	bne.n	4186 <_can_async_set_irq_state+0x4a>
		hri_can_write_IE_TCE_bit(dev->hw, state);
    4168:	687b      	ldr	r3, [r7, #4]
    416a:	681b      	ldr	r3, [r3, #0]
    416c:	78ba      	ldrb	r2, [r7, #2]
    416e:	4611      	mov	r1, r2
    4170:	4618      	mov	r0, r3
    4172:	4b11      	ldr	r3, [pc, #68]	; (41b8 <_can_async_set_irq_state+0x7c>)
    4174:	4798      	blx	r3
		hri_can_write_TXBTIE_reg(dev->hw, CAN_TXBTIE_MASK);
    4176:	687b      	ldr	r3, [r7, #4]
    4178:	681b      	ldr	r3, [r3, #0]
    417a:	f04f 31ff 	mov.w	r1, #4294967295
    417e:	4618      	mov	r0, r3
    4180:	4b0e      	ldr	r3, [pc, #56]	; (41bc <_can_async_set_irq_state+0x80>)
    4182:	4798      	blx	r3
	return;
    4184:	e011      	b.n	41aa <_can_async_set_irq_state+0x6e>
	} else if (type == CAN_ASYNC_IRQ_CB) {
    4186:	78fb      	ldrb	r3, [r7, #3]
    4188:	2b02      	cmp	r3, #2
    418a:	d10e      	bne.n	41aa <_can_async_set_irq_state+0x6e>
		ie = hri_can_get_IE_reg(dev->hw, CAN_IE_RF0NE | CAN_IE_TCE);
    418c:	687b      	ldr	r3, [r7, #4]
    418e:	681b      	ldr	r3, [r3, #0]
    4190:	f240 2101 	movw	r1, #513	; 0x201
    4194:	4618      	mov	r0, r3
    4196:	4b0a      	ldr	r3, [pc, #40]	; (41c0 <_can_async_set_irq_state+0x84>)
    4198:	4798      	blx	r3
    419a:	60f8      	str	r0, [r7, #12]
		hri_can_write_IE_reg(dev->hw, ie | CONF_CAN0_IE_REG);
    419c:	687b      	ldr	r3, [r7, #4]
    419e:	681b      	ldr	r3, [r3, #0]
    41a0:	68f9      	ldr	r1, [r7, #12]
    41a2:	4618      	mov	r0, r3
    41a4:	4b07      	ldr	r3, [pc, #28]	; (41c4 <_can_async_set_irq_state+0x88>)
    41a6:	4798      	blx	r3
	return;
    41a8:	bf00      	nop
    41aa:	bf00      	nop
}
    41ac:	3710      	adds	r7, #16
    41ae:	46bd      	mov	sp, r7
    41b0:	bd80      	pop	{r7, pc}
    41b2:	bf00      	nop
    41b4:	00003a15 	.word	0x00003a15
    41b8:	00003a49 	.word	0x00003a49
    41bc:	00003c27 	.word	0x00003c27
    41c0:	00003a81 	.word	0x00003a81
    41c4:	00003aa7 	.word	0x00003aa7

000041c8 <_can_async_set_filter>:
/**
 * \brief Set CAN to the specified mode
 */
int32_t _can_async_set_filter(struct _can_async_device *const dev, uint8_t index, enum can_format fmt,
                              struct can_filter *filter)
{
    41c8:	b480      	push	{r7}
    41ca:	b087      	sub	sp, #28
    41cc:	af00      	add	r7, sp, #0
    41ce:	60f8      	str	r0, [r7, #12]
    41d0:	607b      	str	r3, [r7, #4]
    41d2:	460b      	mov	r3, r1
    41d4:	72fb      	strb	r3, [r7, #11]
    41d6:	4613      	mov	r3, r2
    41d8:	72bb      	strb	r3, [r7, #10]
	struct _can_standard_message_filter_element *sf;
	struct _can_extended_message_filter_element *ef;

	sf = &((struct _can_context *)dev->context)->rx_std_filter[index];
    41da:	68fb      	ldr	r3, [r7, #12]
    41dc:	699b      	ldr	r3, [r3, #24]
    41de:	68da      	ldr	r2, [r3, #12]
    41e0:	7afb      	ldrb	r3, [r7, #11]
    41e2:	009b      	lsls	r3, r3, #2
    41e4:	4413      	add	r3, r2
    41e6:	617b      	str	r3, [r7, #20]
	ef = &((struct _can_context *)dev->context)->rx_ext_filter[index];
    41e8:	68fb      	ldr	r3, [r7, #12]
    41ea:	699b      	ldr	r3, [r3, #24]
    41ec:	691a      	ldr	r2, [r3, #16]
    41ee:	7afb      	ldrb	r3, [r7, #11]
    41f0:	00db      	lsls	r3, r3, #3
    41f2:	4413      	add	r3, r2
    41f4:	613b      	str	r3, [r7, #16]

	if (fmt == CAN_FMT_STDID) {
    41f6:	7abb      	ldrb	r3, [r7, #10]
    41f8:	2b00      	cmp	r3, #0
    41fa:	d123      	bne.n	4244 <_can_async_set_filter+0x7c>
		if (filter == NULL) {
    41fc:	687b      	ldr	r3, [r7, #4]
    41fe:	2b00      	cmp	r3, #0
    4200:	d104      	bne.n	420c <_can_async_set_filter+0x44>
			sf->S0.val = 0;
    4202:	697b      	ldr	r3, [r7, #20]
    4204:	2200      	movs	r2, #0
    4206:	601a      	str	r2, [r3, #0]
			return ERR_NONE;
    4208:	2300      	movs	r3, #0
    420a:	e03b      	b.n	4284 <_can_async_set_filter+0xbc>
		}
		sf->S0.val       = filter->mask;
    420c:	687b      	ldr	r3, [r7, #4]
    420e:	685a      	ldr	r2, [r3, #4]
    4210:	697b      	ldr	r3, [r7, #20]
    4212:	601a      	str	r2, [r3, #0]
		sf->S0.bit.SFID1 = filter->id;
    4214:	687b      	ldr	r3, [r7, #4]
    4216:	681b      	ldr	r3, [r3, #0]
    4218:	b29b      	uxth	r3, r3
    421a:	f3c3 030a 	ubfx	r3, r3, #0, #11
    421e:	b299      	uxth	r1, r3
    4220:	697a      	ldr	r2, [r7, #20]
    4222:	6813      	ldr	r3, [r2, #0]
    4224:	f361 431a 	bfi	r3, r1, #16, #11
    4228:	6013      	str	r3, [r2, #0]
		sf->S0.bit.SFT   = _CAN_SFT_CLASSIC;
    422a:	697a      	ldr	r2, [r7, #20]
    422c:	6813      	ldr	r3, [r2, #0]
    422e:	2102      	movs	r1, #2
    4230:	f361 739f 	bfi	r3, r1, #30, #2
    4234:	6013      	str	r3, [r2, #0]
		sf->S0.bit.SFEC  = _CAN_SFEC_STF0M;
    4236:	697a      	ldr	r2, [r7, #20]
    4238:	6813      	ldr	r3, [r2, #0]
    423a:	2101      	movs	r1, #1
    423c:	f361 63dd 	bfi	r3, r1, #27, #3
    4240:	6013      	str	r3, [r2, #0]
    4242:	e01e      	b.n	4282 <_can_async_set_filter+0xba>
	} else if (fmt == CAN_FMT_EXTID) {
    4244:	7abb      	ldrb	r3, [r7, #10]
    4246:	2b01      	cmp	r3, #1
    4248:	d11b      	bne.n	4282 <_can_async_set_filter+0xba>
		if (filter == NULL) {
    424a:	687b      	ldr	r3, [r7, #4]
    424c:	2b00      	cmp	r3, #0
    424e:	d104      	bne.n	425a <_can_async_set_filter+0x92>
			ef->F0.val = 0;
    4250:	693b      	ldr	r3, [r7, #16]
    4252:	2200      	movs	r2, #0
    4254:	601a      	str	r2, [r3, #0]
			return ERR_NONE;
    4256:	2300      	movs	r3, #0
    4258:	e014      	b.n	4284 <_can_async_set_filter+0xbc>
		}
		ef->F0.val      = filter->id;
    425a:	687b      	ldr	r3, [r7, #4]
    425c:	681a      	ldr	r2, [r3, #0]
    425e:	693b      	ldr	r3, [r7, #16]
    4260:	601a      	str	r2, [r3, #0]
		ef->F0.bit.EFEC = _CAN_EFEC_STF0M;
    4262:	693a      	ldr	r2, [r7, #16]
    4264:	6813      	ldr	r3, [r2, #0]
    4266:	2101      	movs	r1, #1
    4268:	f361 735f 	bfi	r3, r1, #29, #3
    426c:	6013      	str	r3, [r2, #0]
		ef->F1.val      = filter->mask;
    426e:	687b      	ldr	r3, [r7, #4]
    4270:	685a      	ldr	r2, [r3, #4]
    4272:	693b      	ldr	r3, [r7, #16]
    4274:	605a      	str	r2, [r3, #4]
		ef->F1.bit.EFT  = _CAN_EFT_CLASSIC;
    4276:	693a      	ldr	r2, [r7, #16]
    4278:	6853      	ldr	r3, [r2, #4]
    427a:	2102      	movs	r1, #2
    427c:	f361 739f 	bfi	r3, r1, #30, #2
    4280:	6053      	str	r3, [r2, #4]
	}

	return ERR_NONE;
    4282:	2300      	movs	r3, #0
}
    4284:	4618      	mov	r0, r3
    4286:	371c      	adds	r7, #28
    4288:	46bd      	mov	sp, r7
    428a:	f85d 7b04 	ldr.w	r7, [sp], #4
    428e:	4770      	bx	lr

00004290 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    4290:	b590      	push	{r4, r7, lr}
    4292:	b083      	sub	sp, #12
    4294:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    4296:	4b2c      	ldr	r3, [pc, #176]	; (4348 <CAN1_Handler+0xb8>)
    4298:	681b      	ldr	r3, [r3, #0]
    429a:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    429c:	687b      	ldr	r3, [r7, #4]
    429e:	681b      	ldr	r3, [r3, #0]
    42a0:	4618      	mov	r0, r3
    42a2:	4b2a      	ldr	r3, [pc, #168]	; (434c <CAN1_Handler+0xbc>)
    42a4:	4798      	blx	r3
    42a6:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    42a8:	683b      	ldr	r3, [r7, #0]
    42aa:	f003 0301 	and.w	r3, r3, #1
    42ae:	2b00      	cmp	r3, #0
    42b0:	d003      	beq.n	42ba <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    42b2:	687b      	ldr	r3, [r7, #4]
    42b4:	689b      	ldr	r3, [r3, #8]
    42b6:	6878      	ldr	r0, [r7, #4]
    42b8:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    42ba:	683b      	ldr	r3, [r7, #0]
    42bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
    42c0:	2b00      	cmp	r3, #0
    42c2:	d003      	beq.n	42cc <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    42c4:	687b      	ldr	r3, [r7, #4]
    42c6:	685b      	ldr	r3, [r3, #4]
    42c8:	6878      	ldr	r0, [r7, #4]
    42ca:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    42cc:	683b      	ldr	r3, [r7, #0]
    42ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    42d2:	2b00      	cmp	r3, #0
    42d4:	d004      	beq.n	42e0 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    42d6:	687b      	ldr	r3, [r7, #4]
    42d8:	68db      	ldr	r3, [r3, #12]
    42da:	2103      	movs	r1, #3
    42dc:	6878      	ldr	r0, [r7, #4]
    42de:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    42e0:	683b      	ldr	r3, [r7, #0]
    42e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    42e6:	2b00      	cmp	r3, #0
    42e8:	d004      	beq.n	42f4 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    42ea:	687b      	ldr	r3, [r7, #4]
    42ec:	68db      	ldr	r3, [r3, #12]
    42ee:	2100      	movs	r1, #0
    42f0:	6878      	ldr	r0, [r7, #4]
    42f2:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    42f4:	683b      	ldr	r3, [r7, #0]
    42f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    42fa:	2b00      	cmp	r3, #0
    42fc:	d00f      	beq.n	431e <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    42fe:	687b      	ldr	r3, [r7, #4]
    4300:	68dc      	ldr	r4, [r3, #12]
    4302:	687b      	ldr	r3, [r7, #4]
    4304:	681b      	ldr	r3, [r3, #0]
    4306:	4618      	mov	r0, r3
    4308:	4b11      	ldr	r3, [pc, #68]	; (4350 <CAN1_Handler+0xc0>)
    430a:	4798      	blx	r3
    430c:	4603      	mov	r3, r0
    430e:	2b00      	cmp	r3, #0
    4310:	d001      	beq.n	4316 <CAN1_Handler+0x86>
    4312:	2302      	movs	r3, #2
    4314:	e000      	b.n	4318 <CAN1_Handler+0x88>
    4316:	2301      	movs	r3, #1
    4318:	4619      	mov	r1, r3
    431a:	6878      	ldr	r0, [r7, #4]
    431c:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    431e:	683b      	ldr	r3, [r7, #0]
    4320:	f003 0308 	and.w	r3, r3, #8
    4324:	2b00      	cmp	r3, #0
    4326:	d004      	beq.n	4332 <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    4328:	687b      	ldr	r3, [r7, #4]
    432a:	68db      	ldr	r3, [r3, #12]
    432c:	2104      	movs	r1, #4
    432e:	6878      	ldr	r0, [r7, #4]
    4330:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    4332:	687b      	ldr	r3, [r7, #4]
    4334:	681b      	ldr	r3, [r3, #0]
    4336:	6839      	ldr	r1, [r7, #0]
    4338:	4618      	mov	r0, r3
    433a:	4b06      	ldr	r3, [pc, #24]	; (4354 <CAN1_Handler+0xc4>)
    433c:	4798      	blx	r3
}
    433e:	bf00      	nop
    4340:	370c      	adds	r7, #12
    4342:	46bd      	mov	sp, r7
    4344:	bd90      	pop	{r4, r7, pc}
    4346:	bf00      	nop
    4348:	2000073c 	.word	0x2000073c
    434c:	000039fd 	.word	0x000039fd
    4350:	000037ad 	.word	0x000037ad
    4354:	000039e1 	.word	0x000039e1

00004358 <__NVIC_SetPendingIRQ>:
{
    4358:	b480      	push	{r7}
    435a:	b083      	sub	sp, #12
    435c:	af00      	add	r7, sp, #0
    435e:	4603      	mov	r3, r0
    4360:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4362:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4366:	2b00      	cmp	r3, #0
    4368:	db0c      	blt.n	4384 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    436a:	4909      	ldr	r1, [pc, #36]	; (4390 <__NVIC_SetPendingIRQ+0x38>)
    436c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4370:	095b      	lsrs	r3, r3, #5
    4372:	88fa      	ldrh	r2, [r7, #6]
    4374:	f002 021f 	and.w	r2, r2, #31
    4378:	2001      	movs	r0, #1
    437a:	fa00 f202 	lsl.w	r2, r0, r2
    437e:	3340      	adds	r3, #64	; 0x40
    4380:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4384:	bf00      	nop
    4386:	370c      	adds	r7, #12
    4388:	46bd      	mov	sp, r7
    438a:	f85d 7b04 	ldr.w	r7, [sp], #4
    438e:	4770      	bx	lr
    4390:	e000e100 	.word	0xe000e100

00004394 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    4394:	b580      	push	{r7, lr}
    4396:	b082      	sub	sp, #8
    4398:	af00      	add	r7, sp, #0
    439a:	4603      	mov	r3, r0
    439c:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    439e:	79fb      	ldrb	r3, [r7, #7]
    43a0:	b21b      	sxth	r3, r3
    43a2:	4618      	mov	r0, r3
    43a4:	4b02      	ldr	r3, [pc, #8]	; (43b0 <_irq_set+0x1c>)
    43a6:	4798      	blx	r3
}
    43a8:	bf00      	nop
    43aa:	3708      	adds	r7, #8
    43ac:	46bd      	mov	sp, r7
    43ae:	bd80      	pop	{r7, pc}
    43b0:	00004359 	.word	0x00004359

000043b4 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    43b4:	b480      	push	{r7}
    43b6:	b083      	sub	sp, #12
    43b8:	af00      	add	r7, sp, #0
    43ba:	4603      	mov	r3, r0
    43bc:	6039      	str	r1, [r7, #0]
    43be:	80fb      	strh	r3, [r7, #6]
    43c0:	4613      	mov	r3, r2
    43c2:	717b      	strb	r3, [r7, #5]
	switch (power) {
    43c4:	797b      	ldrb	r3, [r7, #5]
    43c6:	3b04      	subs	r3, #4
    43c8:	2b05      	cmp	r3, #5
    43ca:	d86b      	bhi.n	44a4 <_get_cycles_for_us_internal+0xf0>
    43cc:	a201      	add	r2, pc, #4	; (adr r2, 43d4 <_get_cycles_for_us_internal+0x20>)
    43ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    43d2:	bf00      	nop
    43d4:	00004483 	.word	0x00004483
    43d8:	00004463 	.word	0x00004463
    43dc:	00004445 	.word	0x00004445
    43e0:	00004427 	.word	0x00004427
    43e4:	00004409 	.word	0x00004409
    43e8:	000043ed 	.word	0x000043ed
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    43ec:	88fb      	ldrh	r3, [r7, #6]
    43ee:	683a      	ldr	r2, [r7, #0]
    43f0:	4935      	ldr	r1, [pc, #212]	; (44c8 <_get_cycles_for_us_internal+0x114>)
    43f2:	fba1 1202 	umull	r1, r2, r1, r2
    43f6:	0c92      	lsrs	r2, r2, #18
    43f8:	fb02 f303 	mul.w	r3, r2, r3
    43fc:	3302      	adds	r3, #2
    43fe:	4a33      	ldr	r2, [pc, #204]	; (44cc <_get_cycles_for_us_internal+0x118>)
    4400:	fba2 2303 	umull	r2, r3, r2, r3
    4404:	085b      	lsrs	r3, r3, #1
    4406:	e059      	b.n	44bc <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    4408:	88fb      	ldrh	r3, [r7, #6]
    440a:	683a      	ldr	r2, [r7, #0]
    440c:	0952      	lsrs	r2, r2, #5
    440e:	4930      	ldr	r1, [pc, #192]	; (44d0 <_get_cycles_for_us_internal+0x11c>)
    4410:	fba1 1202 	umull	r1, r2, r1, r2
    4414:	09d2      	lsrs	r2, r2, #7
    4416:	fb02 f303 	mul.w	r3, r2, r3
    441a:	331d      	adds	r3, #29
    441c:	4a2d      	ldr	r2, [pc, #180]	; (44d4 <_get_cycles_for_us_internal+0x120>)
    441e:	fba2 2303 	umull	r2, r3, r2, r3
    4422:	091b      	lsrs	r3, r3, #4
    4424:	e04a      	b.n	44bc <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    4426:	88fb      	ldrh	r3, [r7, #6]
    4428:	683a      	ldr	r2, [r7, #0]
    442a:	492b      	ldr	r1, [pc, #172]	; (44d8 <_get_cycles_for_us_internal+0x124>)
    442c:	fba1 1202 	umull	r1, r2, r1, r2
    4430:	0b52      	lsrs	r2, r2, #13
    4432:	fb02 f303 	mul.w	r3, r2, r3
    4436:	f203 132b 	addw	r3, r3, #299	; 0x12b
    443a:	4a28      	ldr	r2, [pc, #160]	; (44dc <_get_cycles_for_us_internal+0x128>)
    443c:	fba2 2303 	umull	r2, r3, r2, r3
    4440:	095b      	lsrs	r3, r3, #5
    4442:	e03b      	b.n	44bc <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    4444:	88fb      	ldrh	r3, [r7, #6]
    4446:	683a      	ldr	r2, [r7, #0]
    4448:	4925      	ldr	r1, [pc, #148]	; (44e0 <_get_cycles_for_us_internal+0x12c>)
    444a:	fba1 1202 	umull	r1, r2, r1, r2
    444e:	0992      	lsrs	r2, r2, #6
    4450:	fb02 f303 	mul.w	r3, r2, r3
    4454:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    4458:	4a22      	ldr	r2, [pc, #136]	; (44e4 <_get_cycles_for_us_internal+0x130>)
    445a:	fba2 2303 	umull	r2, r3, r2, r3
    445e:	099b      	lsrs	r3, r3, #6
    4460:	e02c      	b.n	44bc <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    4462:	88fb      	ldrh	r3, [r7, #6]
    4464:	683a      	ldr	r2, [r7, #0]
    4466:	4920      	ldr	r1, [pc, #128]	; (44e8 <_get_cycles_for_us_internal+0x134>)
    4468:	fba1 1202 	umull	r1, r2, r1, r2
    446c:	0952      	lsrs	r2, r2, #5
    446e:	fb02 f303 	mul.w	r3, r2, r3
    4472:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    4476:	332f      	adds	r3, #47	; 0x2f
    4478:	4a1c      	ldr	r2, [pc, #112]	; (44ec <_get_cycles_for_us_internal+0x138>)
    447a:	fba2 2303 	umull	r2, r3, r2, r3
    447e:	0b5b      	lsrs	r3, r3, #13
    4480:	e01c      	b.n	44bc <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    4482:	88fb      	ldrh	r3, [r7, #6]
    4484:	683a      	ldr	r2, [r7, #0]
    4486:	491a      	ldr	r1, [pc, #104]	; (44f0 <_get_cycles_for_us_internal+0x13c>)
    4488:	fba1 1202 	umull	r1, r2, r1, r2
    448c:	08d2      	lsrs	r2, r2, #3
    448e:	fb02 f303 	mul.w	r3, r2, r3
    4492:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    4496:	f203 33df 	addw	r3, r3, #991	; 0x3df
    449a:	4a16      	ldr	r2, [pc, #88]	; (44f4 <_get_cycles_for_us_internal+0x140>)
    449c:	fba2 2303 	umull	r2, r3, r2, r3
    44a0:	0c5b      	lsrs	r3, r3, #17
    44a2:	e00b      	b.n	44bc <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    44a4:	88fb      	ldrh	r3, [r7, #6]
    44a6:	683a      	ldr	r2, [r7, #0]
    44a8:	fb02 f303 	mul.w	r3, r2, r3
    44ac:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    44b0:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    44b4:	4a10      	ldr	r2, [pc, #64]	; (44f8 <_get_cycles_for_us_internal+0x144>)
    44b6:	fba2 2303 	umull	r2, r3, r2, r3
    44ba:	0c9b      	lsrs	r3, r3, #18
	}
}
    44bc:	4618      	mov	r0, r3
    44be:	370c      	adds	r7, #12
    44c0:	46bd      	mov	sp, r7
    44c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    44c6:	4770      	bx	lr
    44c8:	431bde83 	.word	0x431bde83
    44cc:	aaaaaaab 	.word	0xaaaaaaab
    44d0:	0a7c5ac5 	.word	0x0a7c5ac5
    44d4:	88888889 	.word	0x88888889
    44d8:	d1b71759 	.word	0xd1b71759
    44dc:	1b4e81b5 	.word	0x1b4e81b5
    44e0:	10624dd3 	.word	0x10624dd3
    44e4:	057619f1 	.word	0x057619f1
    44e8:	51eb851f 	.word	0x51eb851f
    44ec:	45e7b273 	.word	0x45e7b273
    44f0:	cccccccd 	.word	0xcccccccd
    44f4:	6fd91d85 	.word	0x6fd91d85
    44f8:	165e9f81 	.word	0x165e9f81

000044fc <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    44fc:	b580      	push	{r7, lr}
    44fe:	b082      	sub	sp, #8
    4500:	af00      	add	r7, sp, #0
    4502:	4603      	mov	r3, r0
    4504:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    4506:	88fb      	ldrh	r3, [r7, #6]
    4508:	2209      	movs	r2, #9
    450a:	4904      	ldr	r1, [pc, #16]	; (451c <_get_cycles_for_us+0x20>)
    450c:	4618      	mov	r0, r3
    450e:	4b04      	ldr	r3, [pc, #16]	; (4520 <_get_cycles_for_us+0x24>)
    4510:	4798      	blx	r3
    4512:	4603      	mov	r3, r0
}
    4514:	4618      	mov	r0, r3
    4516:	3708      	adds	r7, #8
    4518:	46bd      	mov	sp, r7
    451a:	bd80      	pop	{r7, pc}
    451c:	07270e00 	.word	0x07270e00
    4520:	000043b5 	.word	0x000043b5

00004524 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    4524:	b480      	push	{r7}
    4526:	b083      	sub	sp, #12
    4528:	af00      	add	r7, sp, #0
    452a:	4603      	mov	r3, r0
    452c:	6039      	str	r1, [r7, #0]
    452e:	80fb      	strh	r3, [r7, #6]
    4530:	4613      	mov	r3, r2
    4532:	717b      	strb	r3, [r7, #5]
	switch (power) {
    4534:	797b      	ldrb	r3, [r7, #5]
    4536:	3b04      	subs	r3, #4
    4538:	2b05      	cmp	r3, #5
    453a:	d870      	bhi.n	461e <_get_cycles_for_ms_internal+0xfa>
    453c:	a201      	add	r2, pc, #4	; (adr r2, 4544 <_get_cycles_for_ms_internal+0x20>)
    453e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4542:	bf00      	nop
    4544:	00004601 	.word	0x00004601
    4548:	000045e5 	.word	0x000045e5
    454c:	000045c9 	.word	0x000045c9
    4550:	000045a5 	.word	0x000045a5
    4554:	00004581 	.word	0x00004581
    4558:	0000455d 	.word	0x0000455d
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    455c:	88fb      	ldrh	r3, [r7, #6]
    455e:	683a      	ldr	r2, [r7, #0]
    4560:	4937      	ldr	r1, [pc, #220]	; (4640 <_get_cycles_for_ms_internal+0x11c>)
    4562:	fba1 1202 	umull	r1, r2, r1, r2
    4566:	0c92      	lsrs	r2, r2, #18
    4568:	fb02 f303 	mul.w	r3, r2, r3
    456c:	3302      	adds	r3, #2
    456e:	4a35      	ldr	r2, [pc, #212]	; (4644 <_get_cycles_for_ms_internal+0x120>)
    4570:	fba2 2303 	umull	r2, r3, r2, r3
    4574:	085b      	lsrs	r3, r3, #1
    4576:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    457a:	fb02 f303 	mul.w	r3, r2, r3
    457e:	e058      	b.n	4632 <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    4580:	88fb      	ldrh	r3, [r7, #6]
    4582:	683a      	ldr	r2, [r7, #0]
    4584:	0952      	lsrs	r2, r2, #5
    4586:	4930      	ldr	r1, [pc, #192]	; (4648 <_get_cycles_for_ms_internal+0x124>)
    4588:	fba1 1202 	umull	r1, r2, r1, r2
    458c:	09d2      	lsrs	r2, r2, #7
    458e:	fb02 f303 	mul.w	r3, r2, r3
    4592:	3302      	adds	r3, #2
    4594:	4a2b      	ldr	r2, [pc, #172]	; (4644 <_get_cycles_for_ms_internal+0x120>)
    4596:	fba2 2303 	umull	r2, r3, r2, r3
    459a:	085b      	lsrs	r3, r3, #1
    459c:	2264      	movs	r2, #100	; 0x64
    459e:	fb02 f303 	mul.w	r3, r2, r3
    45a2:	e046      	b.n	4632 <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    45a4:	88fb      	ldrh	r3, [r7, #6]
    45a6:	683a      	ldr	r2, [r7, #0]
    45a8:	4928      	ldr	r1, [pc, #160]	; (464c <_get_cycles_for_ms_internal+0x128>)
    45aa:	fba1 1202 	umull	r1, r2, r1, r2
    45ae:	0b52      	lsrs	r2, r2, #13
    45b0:	fb02 f303 	mul.w	r3, r2, r3
    45b4:	3302      	adds	r3, #2
    45b6:	4a23      	ldr	r2, [pc, #140]	; (4644 <_get_cycles_for_ms_internal+0x120>)
    45b8:	fba2 2303 	umull	r2, r3, r2, r3
    45bc:	085a      	lsrs	r2, r3, #1
    45be:	4613      	mov	r3, r2
    45c0:	009b      	lsls	r3, r3, #2
    45c2:	4413      	add	r3, r2
    45c4:	005b      	lsls	r3, r3, #1
    45c6:	e034      	b.n	4632 <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    45c8:	88fb      	ldrh	r3, [r7, #6]
    45ca:	683a      	ldr	r2, [r7, #0]
    45cc:	4920      	ldr	r1, [pc, #128]	; (4650 <_get_cycles_for_ms_internal+0x12c>)
    45ce:	fba1 1202 	umull	r1, r2, r1, r2
    45d2:	0992      	lsrs	r2, r2, #6
    45d4:	fb02 f303 	mul.w	r3, r2, r3
    45d8:	3302      	adds	r3, #2
    45da:	4a1a      	ldr	r2, [pc, #104]	; (4644 <_get_cycles_for_ms_internal+0x120>)
    45dc:	fba2 2303 	umull	r2, r3, r2, r3
    45e0:	085b      	lsrs	r3, r3, #1
    45e2:	e026      	b.n	4632 <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    45e4:	88fb      	ldrh	r3, [r7, #6]
    45e6:	683a      	ldr	r2, [r7, #0]
    45e8:	491a      	ldr	r1, [pc, #104]	; (4654 <_get_cycles_for_ms_internal+0x130>)
    45ea:	fba1 1202 	umull	r1, r2, r1, r2
    45ee:	0952      	lsrs	r2, r2, #5
    45f0:	fb02 f303 	mul.w	r3, r2, r3
    45f4:	331d      	adds	r3, #29
    45f6:	4a18      	ldr	r2, [pc, #96]	; (4658 <_get_cycles_for_ms_internal+0x134>)
    45f8:	fba2 2303 	umull	r2, r3, r2, r3
    45fc:	091b      	lsrs	r3, r3, #4
    45fe:	e018      	b.n	4632 <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    4600:	88fb      	ldrh	r3, [r7, #6]
    4602:	683a      	ldr	r2, [r7, #0]
    4604:	4915      	ldr	r1, [pc, #84]	; (465c <_get_cycles_for_ms_internal+0x138>)
    4606:	fba1 1202 	umull	r1, r2, r1, r2
    460a:	08d2      	lsrs	r2, r2, #3
    460c:	fb02 f303 	mul.w	r3, r2, r3
    4610:	f203 132b 	addw	r3, r3, #299	; 0x12b
    4614:	4a12      	ldr	r2, [pc, #72]	; (4660 <_get_cycles_for_ms_internal+0x13c>)
    4616:	fba2 2303 	umull	r2, r3, r2, r3
    461a:	095b      	lsrs	r3, r3, #5
    461c:	e009      	b.n	4632 <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    461e:	88fb      	ldrh	r3, [r7, #6]
    4620:	683a      	ldr	r2, [r7, #0]
    4622:	fb02 f303 	mul.w	r3, r2, r3
    4626:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    462a:	4a0e      	ldr	r2, [pc, #56]	; (4664 <_get_cycles_for_ms_internal+0x140>)
    462c:	fba2 2303 	umull	r2, r3, r2, r3
    4630:	099b      	lsrs	r3, r3, #6
	}
}
    4632:	4618      	mov	r0, r3
    4634:	370c      	adds	r7, #12
    4636:	46bd      	mov	sp, r7
    4638:	f85d 7b04 	ldr.w	r7, [sp], #4
    463c:	4770      	bx	lr
    463e:	bf00      	nop
    4640:	431bde83 	.word	0x431bde83
    4644:	aaaaaaab 	.word	0xaaaaaaab
    4648:	0a7c5ac5 	.word	0x0a7c5ac5
    464c:	d1b71759 	.word	0xd1b71759
    4650:	10624dd3 	.word	0x10624dd3
    4654:	51eb851f 	.word	0x51eb851f
    4658:	88888889 	.word	0x88888889
    465c:	cccccccd 	.word	0xcccccccd
    4660:	1b4e81b5 	.word	0x1b4e81b5
    4664:	057619f1 	.word	0x057619f1

00004668 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    4668:	b580      	push	{r7, lr}
    466a:	b082      	sub	sp, #8
    466c:	af00      	add	r7, sp, #0
    466e:	4603      	mov	r3, r0
    4670:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    4672:	88fb      	ldrh	r3, [r7, #6]
    4674:	2209      	movs	r2, #9
    4676:	4904      	ldr	r1, [pc, #16]	; (4688 <_get_cycles_for_ms+0x20>)
    4678:	4618      	mov	r0, r3
    467a:	4b04      	ldr	r3, [pc, #16]	; (468c <_get_cycles_for_ms+0x24>)
    467c:	4798      	blx	r3
    467e:	4603      	mov	r3, r0
}
    4680:	4618      	mov	r0, r3
    4682:	3708      	adds	r7, #8
    4684:	46bd      	mov	sp, r7
    4686:	bd80      	pop	{r7, pc}
    4688:	07270e00 	.word	0x07270e00
    468c:	00004525 	.word	0x00004525

00004690 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    4690:	b480      	push	{r7}
    4692:	b083      	sub	sp, #12
    4694:	af00      	add	r7, sp, #0
    4696:	6078      	str	r0, [r7, #4]
    4698:	6039      	str	r1, [r7, #0]
    469a:	bf00      	nop
    469c:	f3af 8000 	nop.w

000046a0 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    46a0:	3901      	subs	r1, #1
    46a2:	d8fd      	bhi.n	46a0 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    46a4:	bf00      	nop
    46a6:	370c      	adds	r7, #12
    46a8:	46bd      	mov	sp, r7
    46aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    46ae:	4770      	bx	lr

000046b0 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    46b0:	b480      	push	{r7}
    46b2:	b083      	sub	sp, #12
    46b4:	af00      	add	r7, sp, #0
    46b6:	6078      	str	r0, [r7, #4]
    46b8:	460b      	mov	r3, r1
    46ba:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    46bc:	687b      	ldr	r3, [r7, #4]
    46be:	881b      	ldrh	r3, [r3, #0]
    46c0:	b29a      	uxth	r2, r3
    46c2:	887b      	ldrh	r3, [r7, #2]
    46c4:	021b      	lsls	r3, r3, #8
    46c6:	b29b      	uxth	r3, r3
    46c8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    46cc:	b29b      	uxth	r3, r3
    46ce:	4313      	orrs	r3, r2
    46d0:	b29a      	uxth	r2, r3
    46d2:	687b      	ldr	r3, [r7, #4]
    46d4:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    46d6:	bf00      	nop
    46d8:	370c      	adds	r7, #12
    46da:	46bd      	mov	sp, r7
    46dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    46e0:	4770      	bx	lr

000046e2 <hri_port_set_EVCTRL_reg>:
{
    46e2:	b480      	push	{r7}
    46e4:	b085      	sub	sp, #20
    46e6:	af00      	add	r7, sp, #0
    46e8:	60f8      	str	r0, [r7, #12]
    46ea:	460b      	mov	r3, r1
    46ec:	607a      	str	r2, [r7, #4]
    46ee:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    46f0:	7afb      	ldrb	r3, [r7, #11]
    46f2:	7afa      	ldrb	r2, [r7, #11]
    46f4:	68f9      	ldr	r1, [r7, #12]
    46f6:	01d2      	lsls	r2, r2, #7
    46f8:	440a      	add	r2, r1
    46fa:	322c      	adds	r2, #44	; 0x2c
    46fc:	6811      	ldr	r1, [r2, #0]
    46fe:	687a      	ldr	r2, [r7, #4]
    4700:	430a      	orrs	r2, r1
    4702:	68f9      	ldr	r1, [r7, #12]
    4704:	01db      	lsls	r3, r3, #7
    4706:	440b      	add	r3, r1
    4708:	332c      	adds	r3, #44	; 0x2c
    470a:	601a      	str	r2, [r3, #0]
}
    470c:	bf00      	nop
    470e:	3714      	adds	r7, #20
    4710:	46bd      	mov	sp, r7
    4712:	f85d 7b04 	ldr.w	r7, [sp], #4
    4716:	4770      	bx	lr

00004718 <_port_event_init>:

static inline void _port_event_init()
{
    4718:	b580      	push	{r7, lr}
    471a:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    471c:	2200      	movs	r2, #0
    471e:	2100      	movs	r1, #0
    4720:	4809      	ldr	r0, [pc, #36]	; (4748 <_port_event_init+0x30>)
    4722:	4b0a      	ldr	r3, [pc, #40]	; (474c <_port_event_init+0x34>)
    4724:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    4726:	2200      	movs	r2, #0
    4728:	2101      	movs	r1, #1
    472a:	4807      	ldr	r0, [pc, #28]	; (4748 <_port_event_init+0x30>)
    472c:	4b07      	ldr	r3, [pc, #28]	; (474c <_port_event_init+0x34>)
    472e:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    4730:	22ef      	movs	r2, #239	; 0xef
    4732:	2102      	movs	r1, #2
    4734:	4804      	ldr	r0, [pc, #16]	; (4748 <_port_event_init+0x30>)
    4736:	4b05      	ldr	r3, [pc, #20]	; (474c <_port_event_init+0x34>)
    4738:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    473a:	2200      	movs	r2, #0
    473c:	2103      	movs	r1, #3
    473e:	4802      	ldr	r0, [pc, #8]	; (4748 <_port_event_init+0x30>)
    4740:	4b02      	ldr	r3, [pc, #8]	; (474c <_port_event_init+0x34>)
    4742:	4798      	blx	r3
}
    4744:	bf00      	nop
    4746:	bd80      	pop	{r7, pc}
    4748:	41008000 	.word	0x41008000
    474c:	000046e3 	.word	0x000046e3

00004750 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    4750:	b580      	push	{r7, lr}
    4752:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    4754:	2104      	movs	r1, #4
    4756:	480b      	ldr	r0, [pc, #44]	; (4784 <_init_chip+0x34>)
    4758:	4b0b      	ldr	r3, [pc, #44]	; (4788 <_init_chip+0x38>)
    475a:	4798      	blx	r3

	_osc32kctrl_init_sources();
    475c:	4b0b      	ldr	r3, [pc, #44]	; (478c <_init_chip+0x3c>)
    475e:	4798      	blx	r3
	_oscctrl_init_sources();
    4760:	4b0b      	ldr	r3, [pc, #44]	; (4790 <_init_chip+0x40>)
    4762:	4798      	blx	r3
	_mclk_init();
    4764:	4b0b      	ldr	r3, [pc, #44]	; (4794 <_init_chip+0x44>)
    4766:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    4768:	f44f 6084 	mov.w	r0, #1056	; 0x420
    476c:	4b0a      	ldr	r3, [pc, #40]	; (4798 <_init_chip+0x48>)
    476e:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    4770:	4b0a      	ldr	r3, [pc, #40]	; (479c <_init_chip+0x4c>)
    4772:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    4774:	f640 30df 	movw	r0, #3039	; 0xbdf
    4778:	4b07      	ldr	r3, [pc, #28]	; (4798 <_init_chip+0x48>)
    477a:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    477c:	4b08      	ldr	r3, [pc, #32]	; (47a0 <_init_chip+0x50>)
    477e:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    4780:	bf00      	nop
    4782:	bd80      	pop	{r7, pc}
    4784:	41004000 	.word	0x41004000
    4788:	000046b1 	.word	0x000046b1
    478c:	00005091 	.word	0x00005091
    4790:	00005559 	.word	0x00005559
    4794:	00004fb1 	.word	0x00004fb1
    4798:	00004eb9 	.word	0x00004eb9
    479c:	00005599 	.word	0x00005599
    47a0:	00004719 	.word	0x00004719

000047a4 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    47a4:	b480      	push	{r7}
    47a6:	b083      	sub	sp, #12
    47a8:	af00      	add	r7, sp, #0
    47aa:	6078      	str	r0, [r7, #4]
    47ac:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    47ae:	687b      	ldr	r3, [r7, #4]
    47b0:	683a      	ldr	r2, [r7, #0]
    47b2:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    47b4:	2300      	movs	r3, #0
}
    47b6:	4618      	mov	r0, r3
    47b8:	370c      	adds	r7, #12
    47ba:	46bd      	mov	sp, r7
    47bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    47c0:	4770      	bx	lr
	...

000047c4 <__NVIC_EnableIRQ>:
{
    47c4:	b480      	push	{r7}
    47c6:	b083      	sub	sp, #12
    47c8:	af00      	add	r7, sp, #0
    47ca:	4603      	mov	r3, r0
    47cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    47ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    47d2:	2b00      	cmp	r3, #0
    47d4:	db0b      	blt.n	47ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    47d6:	4909      	ldr	r1, [pc, #36]	; (47fc <__NVIC_EnableIRQ+0x38>)
    47d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    47dc:	095b      	lsrs	r3, r3, #5
    47de:	88fa      	ldrh	r2, [r7, #6]
    47e0:	f002 021f 	and.w	r2, r2, #31
    47e4:	2001      	movs	r0, #1
    47e6:	fa00 f202 	lsl.w	r2, r0, r2
    47ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    47ee:	bf00      	nop
    47f0:	370c      	adds	r7, #12
    47f2:	46bd      	mov	sp, r7
    47f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    47f8:	4770      	bx	lr
    47fa:	bf00      	nop
    47fc:	e000e100 	.word	0xe000e100

00004800 <__NVIC_DisableIRQ>:
{
    4800:	b480      	push	{r7}
    4802:	b083      	sub	sp, #12
    4804:	af00      	add	r7, sp, #0
    4806:	4603      	mov	r3, r0
    4808:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    480a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    480e:	2b00      	cmp	r3, #0
    4810:	db10      	blt.n	4834 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4812:	490b      	ldr	r1, [pc, #44]	; (4840 <__NVIC_DisableIRQ+0x40>)
    4814:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4818:	095b      	lsrs	r3, r3, #5
    481a:	88fa      	ldrh	r2, [r7, #6]
    481c:	f002 021f 	and.w	r2, r2, #31
    4820:	2001      	movs	r0, #1
    4822:	fa00 f202 	lsl.w	r2, r0, r2
    4826:	3320      	adds	r3, #32
    4828:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    482c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4830:	f3bf 8f6f 	isb	sy
}
    4834:	bf00      	nop
    4836:	370c      	adds	r7, #12
    4838:	46bd      	mov	sp, r7
    483a:	f85d 7b04 	ldr.w	r7, [sp], #4
    483e:	4770      	bx	lr
    4840:	e000e100 	.word	0xe000e100

00004844 <__NVIC_ClearPendingIRQ>:
{
    4844:	b480      	push	{r7}
    4846:	b083      	sub	sp, #12
    4848:	af00      	add	r7, sp, #0
    484a:	4603      	mov	r3, r0
    484c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    484e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4852:	2b00      	cmp	r3, #0
    4854:	db0c      	blt.n	4870 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4856:	4909      	ldr	r1, [pc, #36]	; (487c <__NVIC_ClearPendingIRQ+0x38>)
    4858:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    485c:	095b      	lsrs	r3, r3, #5
    485e:	88fa      	ldrh	r2, [r7, #6]
    4860:	f002 021f 	and.w	r2, r2, #31
    4864:	2001      	movs	r0, #1
    4866:	fa00 f202 	lsl.w	r2, r0, r2
    486a:	3360      	adds	r3, #96	; 0x60
    486c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4870:	bf00      	nop
    4872:	370c      	adds	r7, #12
    4874:	46bd      	mov	sp, r7
    4876:	f85d 7b04 	ldr.w	r7, [sp], #4
    487a:	4770      	bx	lr
    487c:	e000e100 	.word	0xe000e100

00004880 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    4880:	b480      	push	{r7}
    4882:	b083      	sub	sp, #12
    4884:	af00      	add	r7, sp, #0
    4886:	6078      	str	r0, [r7, #4]
    4888:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    488a:	bf00      	nop
    488c:	687b      	ldr	r3, [r7, #4]
    488e:	685a      	ldr	r2, [r3, #4]
    4890:	683b      	ldr	r3, [r7, #0]
    4892:	4013      	ands	r3, r2
    4894:	2b00      	cmp	r3, #0
    4896:	d1f9      	bne.n	488c <hri_eic_wait_for_sync+0xc>
	};
}
    4898:	bf00      	nop
    489a:	370c      	adds	r7, #12
    489c:	46bd      	mov	sp, r7
    489e:	f85d 7b04 	ldr.w	r7, [sp], #4
    48a2:	4770      	bx	lr

000048a4 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    48a4:	b480      	push	{r7}
    48a6:	b083      	sub	sp, #12
    48a8:	af00      	add	r7, sp, #0
    48aa:	6078      	str	r0, [r7, #4]
    48ac:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    48ae:	687b      	ldr	r3, [r7, #4]
    48b0:	685a      	ldr	r2, [r3, #4]
    48b2:	683b      	ldr	r3, [r7, #0]
    48b4:	4013      	ands	r3, r2
    48b6:	2b00      	cmp	r3, #0
    48b8:	bf14      	ite	ne
    48ba:	2301      	movne	r3, #1
    48bc:	2300      	moveq	r3, #0
    48be:	b2db      	uxtb	r3, r3
}
    48c0:	4618      	mov	r0, r3
    48c2:	370c      	adds	r7, #12
    48c4:	46bd      	mov	sp, r7
    48c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    48ca:	4770      	bx	lr

000048cc <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    48cc:	b480      	push	{r7}
    48ce:	b083      	sub	sp, #12
    48d0:	af00      	add	r7, sp, #0
    48d2:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    48d4:	687b      	ldr	r3, [r7, #4]
    48d6:	695b      	ldr	r3, [r3, #20]
}
    48d8:	4618      	mov	r0, r3
    48da:	370c      	adds	r7, #12
    48dc:	46bd      	mov	sp, r7
    48de:	f85d 7b04 	ldr.w	r7, [sp], #4
    48e2:	4770      	bx	lr

000048e4 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    48e4:	b480      	push	{r7}
    48e6:	b083      	sub	sp, #12
    48e8:	af00      	add	r7, sp, #0
    48ea:	6078      	str	r0, [r7, #4]
    48ec:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    48ee:	687b      	ldr	r3, [r7, #4]
    48f0:	683a      	ldr	r2, [r7, #0]
    48f2:	615a      	str	r2, [r3, #20]
}
    48f4:	bf00      	nop
    48f6:	370c      	adds	r7, #12
    48f8:	46bd      	mov	sp, r7
    48fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    48fe:	4770      	bx	lr

00004900 <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    4900:	b580      	push	{r7, lr}
    4902:	b082      	sub	sp, #8
    4904:	af00      	add	r7, sp, #0
    4906:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    4908:	687b      	ldr	r3, [r7, #4]
    490a:	781b      	ldrb	r3, [r3, #0]
    490c:	b2db      	uxtb	r3, r3
    490e:	f043 0302 	orr.w	r3, r3, #2
    4912:	b2da      	uxtb	r2, r3
    4914:	687b      	ldr	r3, [r7, #4]
    4916:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    4918:	2103      	movs	r1, #3
    491a:	6878      	ldr	r0, [r7, #4]
    491c:	4b02      	ldr	r3, [pc, #8]	; (4928 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    491e:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4920:	bf00      	nop
    4922:	3708      	adds	r7, #8
    4924:	46bd      	mov	sp, r7
    4926:	bd80      	pop	{r7, pc}
    4928:	00004881 	.word	0x00004881

0000492c <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    492c:	b580      	push	{r7, lr}
    492e:	b082      	sub	sp, #8
    4930:	af00      	add	r7, sp, #0
    4932:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    4934:	687b      	ldr	r3, [r7, #4]
    4936:	781b      	ldrb	r3, [r3, #0]
    4938:	b2db      	uxtb	r3, r3
    493a:	f023 0302 	bic.w	r3, r3, #2
    493e:	b2da      	uxtb	r2, r3
    4940:	687b      	ldr	r3, [r7, #4]
    4942:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    4944:	2103      	movs	r1, #3
    4946:	6878      	ldr	r0, [r7, #4]
    4948:	4b02      	ldr	r3, [pc, #8]	; (4954 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    494a:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    494c:	bf00      	nop
    494e:	3708      	adds	r7, #8
    4950:	46bd      	mov	sp, r7
    4952:	bd80      	pop	{r7, pc}
    4954:	00004881 	.word	0x00004881

00004958 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    4958:	b580      	push	{r7, lr}
    495a:	b084      	sub	sp, #16
    495c:	af00      	add	r7, sp, #0
    495e:	6078      	str	r0, [r7, #4]
    4960:	460b      	mov	r3, r1
    4962:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    4964:	687b      	ldr	r3, [r7, #4]
    4966:	781b      	ldrb	r3, [r3, #0]
    4968:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    496a:	7bfb      	ldrb	r3, [r7, #15]
    496c:	f023 0310 	bic.w	r3, r3, #16
    4970:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    4972:	78fb      	ldrb	r3, [r7, #3]
    4974:	011b      	lsls	r3, r3, #4
    4976:	b25a      	sxtb	r2, r3
    4978:	f997 300f 	ldrsb.w	r3, [r7, #15]
    497c:	4313      	orrs	r3, r2
    497e:	b25b      	sxtb	r3, r3
    4980:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    4982:	687b      	ldr	r3, [r7, #4]
    4984:	7bfa      	ldrb	r2, [r7, #15]
    4986:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4988:	2103      	movs	r1, #3
    498a:	6878      	ldr	r0, [r7, #4]
    498c:	4b02      	ldr	r3, [pc, #8]	; (4998 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    498e:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4990:	bf00      	nop
    4992:	3710      	adds	r7, #16
    4994:	46bd      	mov	sp, r7
    4996:	bd80      	pop	{r7, pc}
    4998:	00004881 	.word	0x00004881

0000499c <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    499c:	b580      	push	{r7, lr}
    499e:	b084      	sub	sp, #16
    49a0:	af00      	add	r7, sp, #0
    49a2:	6078      	str	r0, [r7, #4]
    49a4:	460b      	mov	r3, r1
    49a6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    49a8:	2103      	movs	r1, #3
    49aa:	6878      	ldr	r0, [r7, #4]
    49ac:	4b06      	ldr	r3, [pc, #24]	; (49c8 <hri_eic_get_CTRLA_reg+0x2c>)
    49ae:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    49b0:	687b      	ldr	r3, [r7, #4]
    49b2:	781b      	ldrb	r3, [r3, #0]
    49b4:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    49b6:	7bfa      	ldrb	r2, [r7, #15]
    49b8:	78fb      	ldrb	r3, [r7, #3]
    49ba:	4013      	ands	r3, r2
    49bc:	73fb      	strb	r3, [r7, #15]
	return tmp;
    49be:	7bfb      	ldrb	r3, [r7, #15]
}
    49c0:	4618      	mov	r0, r3
    49c2:	3710      	adds	r7, #16
    49c4:	46bd      	mov	sp, r7
    49c6:	bd80      	pop	{r7, pc}
    49c8:	00004881 	.word	0x00004881

000049cc <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    49cc:	b580      	push	{r7, lr}
    49ce:	b082      	sub	sp, #8
    49d0:	af00      	add	r7, sp, #0
    49d2:	6078      	str	r0, [r7, #4]
    49d4:	460b      	mov	r3, r1
    49d6:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    49d8:	687b      	ldr	r3, [r7, #4]
    49da:	78fa      	ldrb	r2, [r7, #3]
    49dc:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    49de:	2103      	movs	r1, #3
    49e0:	6878      	ldr	r0, [r7, #4]
    49e2:	4b03      	ldr	r3, [pc, #12]	; (49f0 <hri_eic_write_CTRLA_reg+0x24>)
    49e4:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    49e6:	bf00      	nop
    49e8:	3708      	adds	r7, #8
    49ea:	46bd      	mov	sp, r7
    49ec:	bd80      	pop	{r7, pc}
    49ee:	bf00      	nop
    49f0:	00004881 	.word	0x00004881

000049f4 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    49f4:	b480      	push	{r7}
    49f6:	b083      	sub	sp, #12
    49f8:	af00      	add	r7, sp, #0
    49fa:	6078      	str	r0, [r7, #4]
    49fc:	460b      	mov	r3, r1
    49fe:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    4a00:	687b      	ldr	r3, [r7, #4]
    4a02:	78fa      	ldrb	r2, [r7, #3]
    4a04:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4a06:	bf00      	nop
    4a08:	370c      	adds	r7, #12
    4a0a:	46bd      	mov	sp, r7
    4a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a10:	4770      	bx	lr

00004a12 <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    4a12:	b480      	push	{r7}
    4a14:	b083      	sub	sp, #12
    4a16:	af00      	add	r7, sp, #0
    4a18:	6078      	str	r0, [r7, #4]
    4a1a:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    4a1c:	687b      	ldr	r3, [r7, #4]
    4a1e:	683a      	ldr	r2, [r7, #0]
    4a20:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4a22:	bf00      	nop
    4a24:	370c      	adds	r7, #12
    4a26:	46bd      	mov	sp, r7
    4a28:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a2c:	4770      	bx	lr

00004a2e <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    4a2e:	b480      	push	{r7}
    4a30:	b083      	sub	sp, #12
    4a32:	af00      	add	r7, sp, #0
    4a34:	6078      	str	r0, [r7, #4]
    4a36:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    4a38:	687b      	ldr	r3, [r7, #4]
    4a3a:	683a      	ldr	r2, [r7, #0]
    4a3c:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4a3e:	bf00      	nop
    4a40:	370c      	adds	r7, #12
    4a42:	46bd      	mov	sp, r7
    4a44:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a48:	4770      	bx	lr

00004a4a <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    4a4a:	b480      	push	{r7}
    4a4c:	b085      	sub	sp, #20
    4a4e:	af00      	add	r7, sp, #0
    4a50:	60f8      	str	r0, [r7, #12]
    4a52:	460b      	mov	r3, r1
    4a54:	607a      	str	r2, [r7, #4]
    4a56:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    4a58:	7afb      	ldrb	r3, [r7, #11]
    4a5a:	68fa      	ldr	r2, [r7, #12]
    4a5c:	3306      	adds	r3, #6
    4a5e:	009b      	lsls	r3, r3, #2
    4a60:	4413      	add	r3, r2
    4a62:	687a      	ldr	r2, [r7, #4]
    4a64:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4a66:	bf00      	nop
    4a68:	3714      	adds	r7, #20
    4a6a:	46bd      	mov	sp, r7
    4a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a70:	4770      	bx	lr

00004a72 <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    4a72:	b480      	push	{r7}
    4a74:	b083      	sub	sp, #12
    4a76:	af00      	add	r7, sp, #0
    4a78:	6078      	str	r0, [r7, #4]
    4a7a:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    4a7c:	687b      	ldr	r3, [r7, #4]
    4a7e:	683a      	ldr	r2, [r7, #0]
    4a80:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    4a82:	bf00      	nop
    4a84:	370c      	adds	r7, #12
    4a86:	46bd      	mov	sp, r7
    4a88:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a8c:	4770      	bx	lr

00004a8e <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    4a8e:	b480      	push	{r7}
    4a90:	b083      	sub	sp, #12
    4a92:	af00      	add	r7, sp, #0
    4a94:	6078      	str	r0, [r7, #4]
    4a96:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    4a98:	687b      	ldr	r3, [r7, #4]
    4a9a:	683a      	ldr	r2, [r7, #0]
    4a9c:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    4a9e:	bf00      	nop
    4aa0:	370c      	adds	r7, #12
    4aa2:	46bd      	mov	sp, r7
    4aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
    4aa8:	4770      	bx	lr
	...

00004aac <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    4aac:	b580      	push	{r7, lr}
    4aae:	b082      	sub	sp, #8
    4ab0:	af00      	add	r7, sp, #0
    4ab2:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    4ab4:	2101      	movs	r1, #1
    4ab6:	4838      	ldr	r0, [pc, #224]	; (4b98 <_ext_irq_init+0xec>)
    4ab8:	4b38      	ldr	r3, [pc, #224]	; (4b9c <_ext_irq_init+0xf0>)
    4aba:	4798      	blx	r3
    4abc:	4603      	mov	r3, r0
    4abe:	f083 0301 	eor.w	r3, r3, #1
    4ac2:	b2db      	uxtb	r3, r3
    4ac4:	2b00      	cmp	r3, #0
    4ac6:	d011      	beq.n	4aec <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    4ac8:	2102      	movs	r1, #2
    4aca:	4833      	ldr	r0, [pc, #204]	; (4b98 <_ext_irq_init+0xec>)
    4acc:	4b34      	ldr	r3, [pc, #208]	; (4ba0 <_ext_irq_init+0xf4>)
    4ace:	4798      	blx	r3
    4ad0:	4603      	mov	r3, r0
    4ad2:	2b00      	cmp	r3, #0
    4ad4:	d006      	beq.n	4ae4 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    4ad6:	4830      	ldr	r0, [pc, #192]	; (4b98 <_ext_irq_init+0xec>)
    4ad8:	4b32      	ldr	r3, [pc, #200]	; (4ba4 <_ext_irq_init+0xf8>)
    4ada:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    4adc:	2102      	movs	r1, #2
    4ade:	482e      	ldr	r0, [pc, #184]	; (4b98 <_ext_irq_init+0xec>)
    4ae0:	4b31      	ldr	r3, [pc, #196]	; (4ba8 <_ext_irq_init+0xfc>)
    4ae2:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    4ae4:	2101      	movs	r1, #1
    4ae6:	482c      	ldr	r0, [pc, #176]	; (4b98 <_ext_irq_init+0xec>)
    4ae8:	4b30      	ldr	r3, [pc, #192]	; (4bac <_ext_irq_init+0x100>)
    4aea:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    4aec:	2101      	movs	r1, #1
    4aee:	482a      	ldr	r0, [pc, #168]	; (4b98 <_ext_irq_init+0xec>)
    4af0:	4b2d      	ldr	r3, [pc, #180]	; (4ba8 <_ext_irq_init+0xfc>)
    4af2:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    4af4:	2100      	movs	r1, #0
    4af6:	4828      	ldr	r0, [pc, #160]	; (4b98 <_ext_irq_init+0xec>)
    4af8:	4b2d      	ldr	r3, [pc, #180]	; (4bb0 <_ext_irq_init+0x104>)
    4afa:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    4afc:	2100      	movs	r1, #0
    4afe:	4826      	ldr	r0, [pc, #152]	; (4b98 <_ext_irq_init+0xec>)
    4b00:	4b2c      	ldr	r3, [pc, #176]	; (4bb4 <_ext_irq_init+0x108>)
    4b02:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    4b04:	2100      	movs	r1, #0
    4b06:	4824      	ldr	r0, [pc, #144]	; (4b98 <_ext_irq_init+0xec>)
    4b08:	4b2b      	ldr	r3, [pc, #172]	; (4bb8 <_ext_irq_init+0x10c>)
    4b0a:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    4b0c:	2130      	movs	r1, #48	; 0x30
    4b0e:	4822      	ldr	r0, [pc, #136]	; (4b98 <_ext_irq_init+0xec>)
    4b10:	4b2a      	ldr	r3, [pc, #168]	; (4bbc <_ext_irq_init+0x110>)
    4b12:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    4b14:	2130      	movs	r1, #48	; 0x30
    4b16:	4820      	ldr	r0, [pc, #128]	; (4b98 <_ext_irq_init+0xec>)
    4b18:	4b29      	ldr	r3, [pc, #164]	; (4bc0 <_ext_irq_init+0x114>)
    4b1a:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    4b1c:	2100      	movs	r1, #0
    4b1e:	481e      	ldr	r0, [pc, #120]	; (4b98 <_ext_irq_init+0xec>)
    4b20:	4b28      	ldr	r3, [pc, #160]	; (4bc4 <_ext_irq_init+0x118>)
    4b22:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    4b24:	f44f 0219 	mov.w	r2, #10027008	; 0x990000
    4b28:	2100      	movs	r1, #0
    4b2a:	481b      	ldr	r0, [pc, #108]	; (4b98 <_ext_irq_init+0xec>)
    4b2c:	4b26      	ldr	r3, [pc, #152]	; (4bc8 <_ext_irq_init+0x11c>)
    4b2e:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    4b30:	2200      	movs	r2, #0
    4b32:	2101      	movs	r1, #1
    4b34:	4818      	ldr	r0, [pc, #96]	; (4b98 <_ext_irq_init+0xec>)
    4b36:	4b24      	ldr	r3, [pc, #144]	; (4bc8 <_ext_irq_init+0x11c>)
    4b38:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    4b3a:	4817      	ldr	r0, [pc, #92]	; (4b98 <_ext_irq_init+0xec>)
    4b3c:	4b23      	ldr	r3, [pc, #140]	; (4bcc <_ext_irq_init+0x120>)
    4b3e:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    4b40:	2010      	movs	r0, #16
    4b42:	4b23      	ldr	r3, [pc, #140]	; (4bd0 <_ext_irq_init+0x124>)
    4b44:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    4b46:	2010      	movs	r0, #16
    4b48:	4b22      	ldr	r3, [pc, #136]	; (4bd4 <_ext_irq_init+0x128>)
    4b4a:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    4b4c:	2010      	movs	r0, #16
    4b4e:	4b22      	ldr	r3, [pc, #136]	; (4bd8 <_ext_irq_init+0x12c>)
    4b50:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    4b52:	2011      	movs	r0, #17
    4b54:	4b1e      	ldr	r3, [pc, #120]	; (4bd0 <_ext_irq_init+0x124>)
    4b56:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    4b58:	2011      	movs	r0, #17
    4b5a:	4b1e      	ldr	r3, [pc, #120]	; (4bd4 <_ext_irq_init+0x128>)
    4b5c:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    4b5e:	2011      	movs	r0, #17
    4b60:	4b1d      	ldr	r3, [pc, #116]	; (4bd8 <_ext_irq_init+0x12c>)
    4b62:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    4b64:	2012      	movs	r0, #18
    4b66:	4b1a      	ldr	r3, [pc, #104]	; (4bd0 <_ext_irq_init+0x124>)
    4b68:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    4b6a:	2012      	movs	r0, #18
    4b6c:	4b19      	ldr	r3, [pc, #100]	; (4bd4 <_ext_irq_init+0x128>)
    4b6e:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    4b70:	2012      	movs	r0, #18
    4b72:	4b19      	ldr	r3, [pc, #100]	; (4bd8 <_ext_irq_init+0x12c>)
    4b74:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    4b76:	2013      	movs	r0, #19
    4b78:	4b15      	ldr	r3, [pc, #84]	; (4bd0 <_ext_irq_init+0x124>)
    4b7a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    4b7c:	2013      	movs	r0, #19
    4b7e:	4b15      	ldr	r3, [pc, #84]	; (4bd4 <_ext_irq_init+0x128>)
    4b80:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    4b82:	2013      	movs	r0, #19
    4b84:	4b14      	ldr	r3, [pc, #80]	; (4bd8 <_ext_irq_init+0x12c>)
    4b86:	4798      	blx	r3

	callback = cb;
    4b88:	4a14      	ldr	r2, [pc, #80]	; (4bdc <_ext_irq_init+0x130>)
    4b8a:	687b      	ldr	r3, [r7, #4]
    4b8c:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    4b8e:	2300      	movs	r3, #0
}
    4b90:	4618      	mov	r0, r3
    4b92:	3708      	adds	r7, #8
    4b94:	46bd      	mov	sp, r7
    4b96:	bd80      	pop	{r7, pc}
    4b98:	40002800 	.word	0x40002800
    4b9c:	000048a5 	.word	0x000048a5
    4ba0:	0000499d 	.word	0x0000499d
    4ba4:	0000492d 	.word	0x0000492d
    4ba8:	00004881 	.word	0x00004881
    4bac:	000049cd 	.word	0x000049cd
    4bb0:	00004959 	.word	0x00004959
    4bb4:	000049f5 	.word	0x000049f5
    4bb8:	00004a13 	.word	0x00004a13
    4bbc:	00004a2f 	.word	0x00004a2f
    4bc0:	00004a73 	.word	0x00004a73
    4bc4:	00004a8f 	.word	0x00004a8f
    4bc8:	00004a4b 	.word	0x00004a4b
    4bcc:	00004901 	.word	0x00004901
    4bd0:	00004801 	.word	0x00004801
    4bd4:	00004845 	.word	0x00004845
    4bd8:	000047c5 	.word	0x000047c5
    4bdc:	20000740 	.word	0x20000740

00004be0 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    4be0:	b580      	push	{r7, lr}
    4be2:	b084      	sub	sp, #16
    4be4:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    4be6:	4841      	ldr	r0, [pc, #260]	; (4cec <_ext_irq_handler+0x10c>)
    4be8:	4b41      	ldr	r3, [pc, #260]	; (4cf0 <_ext_irq_handler+0x110>)
    4bea:	4798      	blx	r3
    4bec:	4603      	mov	r3, r0
    4bee:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    4bf0:	f04f 33ff 	mov.w	r3, #4294967295
    4bf4:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    4bf6:	683b      	ldr	r3, [r7, #0]
    4bf8:	4619      	mov	r1, r3
    4bfa:	483c      	ldr	r0, [pc, #240]	; (4cec <_ext_irq_handler+0x10c>)
    4bfc:	4b3d      	ldr	r3, [pc, #244]	; (4cf4 <_ext_irq_handler+0x114>)
    4bfe:	4798      	blx	r3

	ASSERT(callback);
    4c00:	4b3d      	ldr	r3, [pc, #244]	; (4cf8 <_ext_irq_handler+0x118>)
    4c02:	681b      	ldr	r3, [r3, #0]
    4c04:	2b00      	cmp	r3, #0
    4c06:	bf14      	ite	ne
    4c08:	2301      	movne	r3, #1
    4c0a:	2300      	moveq	r3, #0
    4c0c:	b2db      	uxtb	r3, r3
    4c0e:	22f4      	movs	r2, #244	; 0xf4
    4c10:	493a      	ldr	r1, [pc, #232]	; (4cfc <_ext_irq_handler+0x11c>)
    4c12:	4618      	mov	r0, r3
    4c14:	4b3a      	ldr	r3, [pc, #232]	; (4d00 <_ext_irq_handler+0x120>)
    4c16:	4798      	blx	r3

	while (flags) {
    4c18:	e060      	b.n	4cdc <_ext_irq_handler+0xfc>
		pos = ffs(flags) - 1;
    4c1a:	683b      	ldr	r3, [r7, #0]
    4c1c:	4618      	mov	r0, r3
    4c1e:	4b39      	ldr	r3, [pc, #228]	; (4d04 <_ext_irq_handler+0x124>)
    4c20:	4798      	blx	r3
    4c22:	4603      	mov	r3, r0
    4c24:	b2db      	uxtb	r3, r3
    4c26:	3b01      	subs	r3, #1
    4c28:	b2db      	uxtb	r3, r3
    4c2a:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    4c2c:	e047      	b.n	4cbe <_ext_irq_handler+0xde>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    4c2e:	2300      	movs	r3, #0
    4c30:	71fb      	strb	r3, [r7, #7]
    4c32:	2304      	movs	r3, #4
    4c34:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    4c36:	e024      	b.n	4c82 <_ext_irq_handler+0xa2>
				middle = (upper + lower) >> 1;
    4c38:	79ba      	ldrb	r2, [r7, #6]
    4c3a:	79fb      	ldrb	r3, [r7, #7]
    4c3c:	4413      	add	r3, r2
    4c3e:	105b      	asrs	r3, r3, #1
    4c40:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    4c42:	797b      	ldrb	r3, [r7, #5]
    4c44:	4a30      	ldr	r2, [pc, #192]	; (4d08 <_ext_irq_handler+0x128>)
    4c46:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4c4a:	461a      	mov	r2, r3
    4c4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4c50:	429a      	cmp	r2, r3
    4c52:	d106      	bne.n	4c62 <_ext_irq_handler+0x82>
					pin = _map[middle].pin;
    4c54:	797b      	ldrb	r3, [r7, #5]
    4c56:	4a2c      	ldr	r2, [pc, #176]	; (4d08 <_ext_irq_handler+0x128>)
    4c58:	00db      	lsls	r3, r3, #3
    4c5a:	4413      	add	r3, r2
    4c5c:	685b      	ldr	r3, [r3, #4]
    4c5e:	60bb      	str	r3, [r7, #8]
					break;
    4c60:	e013      	b.n	4c8a <_ext_irq_handler+0xaa>
				}
				if (_map[middle].extint < pos) {
    4c62:	797b      	ldrb	r3, [r7, #5]
    4c64:	4a28      	ldr	r2, [pc, #160]	; (4d08 <_ext_irq_handler+0x128>)
    4c66:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4c6a:	461a      	mov	r2, r3
    4c6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4c70:	429a      	cmp	r2, r3
    4c72:	da03      	bge.n	4c7c <_ext_irq_handler+0x9c>
					lower = middle + 1;
    4c74:	797b      	ldrb	r3, [r7, #5]
    4c76:	3301      	adds	r3, #1
    4c78:	71fb      	strb	r3, [r7, #7]
    4c7a:	e002      	b.n	4c82 <_ext_irq_handler+0xa2>
				} else {
					upper = middle - 1;
    4c7c:	797b      	ldrb	r3, [r7, #5]
    4c7e:	3b01      	subs	r3, #1
    4c80:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    4c82:	79ba      	ldrb	r2, [r7, #6]
    4c84:	79fb      	ldrb	r3, [r7, #7]
    4c86:	429a      	cmp	r2, r3
    4c88:	d2d6      	bcs.n	4c38 <_ext_irq_handler+0x58>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    4c8a:	68bb      	ldr	r3, [r7, #8]
    4c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
    4c90:	d003      	beq.n	4c9a <_ext_irq_handler+0xba>
				callback(pin);
    4c92:	4b19      	ldr	r3, [pc, #100]	; (4cf8 <_ext_irq_handler+0x118>)
    4c94:	681b      	ldr	r3, [r3, #0]
    4c96:	68b8      	ldr	r0, [r7, #8]
    4c98:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    4c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4c9e:	2201      	movs	r2, #1
    4ca0:	fa02 f303 	lsl.w	r3, r2, r3
    4ca4:	43da      	mvns	r2, r3
    4ca6:	683b      	ldr	r3, [r7, #0]
    4ca8:	4013      	ands	r3, r2
    4caa:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    4cac:	683b      	ldr	r3, [r7, #0]
    4cae:	4618      	mov	r0, r3
    4cb0:	4b14      	ldr	r3, [pc, #80]	; (4d04 <_ext_irq_handler+0x124>)
    4cb2:	4798      	blx	r3
    4cb4:	4603      	mov	r3, r0
    4cb6:	b2db      	uxtb	r3, r3
    4cb8:	3b01      	subs	r3, #1
    4cba:	b2db      	uxtb	r3, r3
    4cbc:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    4cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
    4cc6:	d1b2      	bne.n	4c2e <_ext_irq_handler+0x4e>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    4cc8:	4808      	ldr	r0, [pc, #32]	; (4cec <_ext_irq_handler+0x10c>)
    4cca:	4b09      	ldr	r3, [pc, #36]	; (4cf0 <_ext_irq_handler+0x110>)
    4ccc:	4798      	blx	r3
    4cce:	4603      	mov	r3, r0
    4cd0:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    4cd2:	683b      	ldr	r3, [r7, #0]
    4cd4:	4619      	mov	r1, r3
    4cd6:	4805      	ldr	r0, [pc, #20]	; (4cec <_ext_irq_handler+0x10c>)
    4cd8:	4b06      	ldr	r3, [pc, #24]	; (4cf4 <_ext_irq_handler+0x114>)
    4cda:	4798      	blx	r3
	while (flags) {
    4cdc:	683b      	ldr	r3, [r7, #0]
    4cde:	2b00      	cmp	r3, #0
    4ce0:	d19b      	bne.n	4c1a <_ext_irq_handler+0x3a>
	}
}
    4ce2:	bf00      	nop
    4ce4:	3710      	adds	r7, #16
    4ce6:	46bd      	mov	sp, r7
    4ce8:	bd80      	pop	{r7, pc}
    4cea:	bf00      	nop
    4cec:	40002800 	.word	0x40002800
    4cf0:	000048cd 	.word	0x000048cd
    4cf4:	000048e5 	.word	0x000048e5
    4cf8:	20000740 	.word	0x20000740
    4cfc:	0000e430 	.word	0x0000e430
    4d00:	000034fd 	.word	0x000034fd
    4d04:	0000dc61 	.word	0x0000dc61
    4d08:	0000e410 	.word	0x0000e410

00004d0c <EIC_4_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_4_Handler(void)
{
    4d0c:	b580      	push	{r7, lr}
    4d0e:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4d10:	4b01      	ldr	r3, [pc, #4]	; (4d18 <EIC_4_Handler+0xc>)
    4d12:	4798      	blx	r3
} /**
    4d14:	bf00      	nop
    4d16:	bd80      	pop	{r7, pc}
    4d18:	00004be1 	.word	0x00004be1

00004d1c <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    4d1c:	b580      	push	{r7, lr}
    4d1e:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4d20:	4b01      	ldr	r3, [pc, #4]	; (4d28 <EIC_5_Handler+0xc>)
    4d22:	4798      	blx	r3
} /**
    4d24:	bf00      	nop
    4d26:	bd80      	pop	{r7, pc}
    4d28:	00004be1 	.word	0x00004be1

00004d2c <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    4d2c:	b580      	push	{r7, lr}
    4d2e:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4d30:	4b01      	ldr	r3, [pc, #4]	; (4d38 <EIC_6_Handler+0xc>)
    4d32:	4798      	blx	r3
} /**
    4d34:	bf00      	nop
    4d36:	bd80      	pop	{r7, pc}
    4d38:	00004be1 	.word	0x00004be1

00004d3c <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    4d3c:	b580      	push	{r7, lr}
    4d3e:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4d40:	4b01      	ldr	r3, [pc, #4]	; (4d48 <EIC_7_Handler+0xc>)
    4d42:	4798      	blx	r3
}
    4d44:	bf00      	nop
    4d46:	bd80      	pop	{r7, pc}
    4d48:	00004be1 	.word	0x00004be1

00004d4c <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    4d4c:	b480      	push	{r7}
    4d4e:	b085      	sub	sp, #20
    4d50:	af00      	add	r7, sp, #0
    4d52:	60f8      	str	r0, [r7, #12]
    4d54:	460b      	mov	r3, r1
    4d56:	607a      	str	r2, [r7, #4]
    4d58:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    4d5a:	7afa      	ldrb	r2, [r7, #11]
    4d5c:	68fb      	ldr	r3, [r7, #12]
    4d5e:	3248      	adds	r2, #72	; 0x48
    4d60:	6879      	ldr	r1, [r7, #4]
    4d62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    4d66:	bf00      	nop
    4d68:	3714      	adds	r7, #20
    4d6a:	46bd      	mov	sp, r7
    4d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d70:	4770      	bx	lr

00004d72 <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    4d72:	b480      	push	{r7}
    4d74:	b083      	sub	sp, #12
    4d76:	af00      	add	r7, sp, #0
    4d78:	6078      	str	r0, [r7, #4]
    4d7a:	460b      	mov	r3, r1
    4d7c:	70fb      	strb	r3, [r7, #3]
    4d7e:	4613      	mov	r3, r2
    4d80:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    4d82:	78fb      	ldrb	r3, [r7, #3]
    4d84:	687a      	ldr	r2, [r7, #4]
    4d86:	3304      	adds	r3, #4
    4d88:	00db      	lsls	r3, r3, #3
    4d8a:	4413      	add	r3, r2
    4d8c:	78ba      	ldrb	r2, [r7, #2]
    4d8e:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    4d90:	78fb      	ldrb	r3, [r7, #3]
    4d92:	78ba      	ldrb	r2, [r7, #2]
    4d94:	43d2      	mvns	r2, r2
    4d96:	b2d1      	uxtb	r1, r2
    4d98:	687a      	ldr	r2, [r7, #4]
    4d9a:	3304      	adds	r3, #4
    4d9c:	00db      	lsls	r3, r3, #3
    4d9e:	4413      	add	r3, r2
    4da0:	460a      	mov	r2, r1
    4da2:	711a      	strb	r2, [r3, #4]
}
    4da4:	bf00      	nop
    4da6:	370c      	adds	r7, #12
    4da8:	46bd      	mov	sp, r7
    4daa:	f85d 7b04 	ldr.w	r7, [sp], #4
    4dae:	4770      	bx	lr

00004db0 <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    4db0:	b480      	push	{r7}
    4db2:	b085      	sub	sp, #20
    4db4:	af00      	add	r7, sp, #0
    4db6:	60f8      	str	r0, [r7, #12]
    4db8:	460b      	mov	r3, r1
    4dba:	607a      	str	r2, [r7, #4]
    4dbc:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    4dbe:	7afa      	ldrb	r2, [r7, #11]
    4dc0:	68fb      	ldr	r3, [r7, #12]
    4dc2:	3204      	adds	r2, #4
    4dc4:	6879      	ldr	r1, [r7, #4]
    4dc6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    4dca:	bf00      	nop
    4dcc:	3714      	adds	r7, #20
    4dce:	46bd      	mov	sp, r7
    4dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4dd4:	4770      	bx	lr
	...

00004dd8 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    4dd8:	b580      	push	{r7, lr}
    4dda:	b082      	sub	sp, #8
    4ddc:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    4dde:	2300      	movs	r3, #0
    4de0:	71fb      	strb	r3, [r7, #7]
    4de2:	e00b      	b.n	4dfc <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    4de4:	79fb      	ldrb	r3, [r7, #7]
    4de6:	4a18      	ldr	r2, [pc, #96]	; (4e48 <_event_system_init+0x70>)
    4de8:	5cd3      	ldrb	r3, [r2, r3]
    4dea:	461a      	mov	r2, r3
    4dec:	79fb      	ldrb	r3, [r7, #7]
    4dee:	4619      	mov	r1, r3
    4df0:	4816      	ldr	r0, [pc, #88]	; (4e4c <_event_system_init+0x74>)
    4df2:	4b17      	ldr	r3, [pc, #92]	; (4e50 <_event_system_init+0x78>)
    4df4:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    4df6:	79fb      	ldrb	r3, [r7, #7]
    4df8:	3301      	adds	r3, #1
    4dfa:	71fb      	strb	r3, [r7, #7]
    4dfc:	79fb      	ldrb	r3, [r7, #7]
    4dfe:	2b42      	cmp	r3, #66	; 0x42
    4e00:	d9f0      	bls.n	4de4 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    4e02:	2300      	movs	r3, #0
    4e04:	71fb      	strb	r3, [r7, #7]
    4e06:	e016      	b.n	4e36 <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    4e08:	79fb      	ldrb	r3, [r7, #7]
    4e0a:	4a12      	ldr	r2, [pc, #72]	; (4e54 <_event_system_init+0x7c>)
    4e0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    4e10:	461a      	mov	r2, r3
    4e12:	79fb      	ldrb	r3, [r7, #7]
    4e14:	4619      	mov	r1, r3
    4e16:	480d      	ldr	r0, [pc, #52]	; (4e4c <_event_system_init+0x74>)
    4e18:	4b0f      	ldr	r3, [pc, #60]	; (4e58 <_event_system_init+0x80>)
    4e1a:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    4e1c:	79fb      	ldrb	r3, [r7, #7]
    4e1e:	4a0f      	ldr	r2, [pc, #60]	; (4e5c <_event_system_init+0x84>)
    4e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4e24:	b2da      	uxtb	r2, r3
    4e26:	79fb      	ldrb	r3, [r7, #7]
    4e28:	4619      	mov	r1, r3
    4e2a:	4808      	ldr	r0, [pc, #32]	; (4e4c <_event_system_init+0x74>)
    4e2c:	4b0c      	ldr	r3, [pc, #48]	; (4e60 <_event_system_init+0x88>)
    4e2e:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    4e30:	79fb      	ldrb	r3, [r7, #7]
    4e32:	3301      	adds	r3, #1
    4e34:	71fb      	strb	r3, [r7, #7]
    4e36:	79fb      	ldrb	r3, [r7, #7]
    4e38:	2b1f      	cmp	r3, #31
    4e3a:	d9e5      	bls.n	4e08 <_event_system_init+0x30>
	}

	return ERR_NONE;
    4e3c:	2300      	movs	r3, #0
}
    4e3e:	4618      	mov	r0, r3
    4e40:	3708      	adds	r7, #8
    4e42:	46bd      	mov	sp, r7
    4e44:	bd80      	pop	{r7, pc}
    4e46:	bf00      	nop
    4e48:	0000e448 	.word	0x0000e448
    4e4c:	4100e000 	.word	0x4100e000
    4e50:	00004d4d 	.word	0x00004d4d
    4e54:	0000e48c 	.word	0x0000e48c
    4e58:	00004db1 	.word	0x00004db1
    4e5c:	0000e4cc 	.word	0x0000e4cc
    4e60:	00004d73 	.word	0x00004d73

00004e64 <hri_gclk_wait_for_sync>:
{
    4e64:	b480      	push	{r7}
    4e66:	b083      	sub	sp, #12
    4e68:	af00      	add	r7, sp, #0
    4e6a:	6078      	str	r0, [r7, #4]
    4e6c:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    4e6e:	bf00      	nop
    4e70:	687b      	ldr	r3, [r7, #4]
    4e72:	685a      	ldr	r2, [r3, #4]
    4e74:	683b      	ldr	r3, [r7, #0]
    4e76:	4013      	ands	r3, r2
    4e78:	2b00      	cmp	r3, #0
    4e7a:	d1f9      	bne.n	4e70 <hri_gclk_wait_for_sync+0xc>
}
    4e7c:	bf00      	nop
    4e7e:	370c      	adds	r7, #12
    4e80:	46bd      	mov	sp, r7
    4e82:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e86:	4770      	bx	lr

00004e88 <hri_gclk_write_GENCTRL_reg>:
{
    4e88:	b580      	push	{r7, lr}
    4e8a:	b084      	sub	sp, #16
    4e8c:	af00      	add	r7, sp, #0
    4e8e:	60f8      	str	r0, [r7, #12]
    4e90:	460b      	mov	r3, r1
    4e92:	607a      	str	r2, [r7, #4]
    4e94:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    4e96:	7afa      	ldrb	r2, [r7, #11]
    4e98:	68fb      	ldr	r3, [r7, #12]
    4e9a:	3208      	adds	r2, #8
    4e9c:	6879      	ldr	r1, [r7, #4]
    4e9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    4ea2:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    4ea6:	68f8      	ldr	r0, [r7, #12]
    4ea8:	4b02      	ldr	r3, [pc, #8]	; (4eb4 <hri_gclk_write_GENCTRL_reg+0x2c>)
    4eaa:	4798      	blx	r3
}
    4eac:	bf00      	nop
    4eae:	3710      	adds	r7, #16
    4eb0:	46bd      	mov	sp, r7
    4eb2:	bd80      	pop	{r7, pc}
    4eb4:	00004e65 	.word	0x00004e65

00004eb8 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    4eb8:	b580      	push	{r7, lr}
    4eba:	b082      	sub	sp, #8
    4ebc:	af00      	add	r7, sp, #0
    4ebe:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    4ec0:	687b      	ldr	r3, [r7, #4]
    4ec2:	f003 0301 	and.w	r3, r3, #1
    4ec6:	2b00      	cmp	r3, #0
    4ec8:	d004      	beq.n	4ed4 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    4eca:	4a27      	ldr	r2, [pc, #156]	; (4f68 <_gclk_init_generators_by_fref+0xb0>)
    4ecc:	2100      	movs	r1, #0
    4ece:	4827      	ldr	r0, [pc, #156]	; (4f6c <_gclk_init_generators_by_fref+0xb4>)
    4ed0:	4b27      	ldr	r3, [pc, #156]	; (4f70 <_gclk_init_generators_by_fref+0xb8>)
    4ed2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    4ed4:	687b      	ldr	r3, [r7, #4]
    4ed6:	f003 0302 	and.w	r3, r3, #2
    4eda:	2b00      	cmp	r3, #0
    4edc:	d004      	beq.n	4ee8 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    4ede:	4a25      	ldr	r2, [pc, #148]	; (4f74 <_gclk_init_generators_by_fref+0xbc>)
    4ee0:	2101      	movs	r1, #1
    4ee2:	4822      	ldr	r0, [pc, #136]	; (4f6c <_gclk_init_generators_by_fref+0xb4>)
    4ee4:	4b22      	ldr	r3, [pc, #136]	; (4f70 <_gclk_init_generators_by_fref+0xb8>)
    4ee6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    4ee8:	687b      	ldr	r3, [r7, #4]
    4eea:	f003 0304 	and.w	r3, r3, #4
    4eee:	2b00      	cmp	r3, #0
    4ef0:	d004      	beq.n	4efc <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    4ef2:	4a21      	ldr	r2, [pc, #132]	; (4f78 <_gclk_init_generators_by_fref+0xc0>)
    4ef4:	2102      	movs	r1, #2
    4ef6:	481d      	ldr	r0, [pc, #116]	; (4f6c <_gclk_init_generators_by_fref+0xb4>)
    4ef8:	4b1d      	ldr	r3, [pc, #116]	; (4f70 <_gclk_init_generators_by_fref+0xb8>)
    4efa:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    4efc:	687b      	ldr	r3, [r7, #4]
    4efe:	f003 0308 	and.w	r3, r3, #8
    4f02:	2b00      	cmp	r3, #0
    4f04:	d004      	beq.n	4f10 <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    4f06:	4a1d      	ldr	r2, [pc, #116]	; (4f7c <_gclk_init_generators_by_fref+0xc4>)
    4f08:	2103      	movs	r1, #3
    4f0a:	4818      	ldr	r0, [pc, #96]	; (4f6c <_gclk_init_generators_by_fref+0xb4>)
    4f0c:	4b18      	ldr	r3, [pc, #96]	; (4f70 <_gclk_init_generators_by_fref+0xb8>)
    4f0e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    4f10:	687b      	ldr	r3, [r7, #4]
    4f12:	f003 0310 	and.w	r3, r3, #16
    4f16:	2b00      	cmp	r3, #0
    4f18:	d004      	beq.n	4f24 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    4f1a:	4a19      	ldr	r2, [pc, #100]	; (4f80 <_gclk_init_generators_by_fref+0xc8>)
    4f1c:	2104      	movs	r1, #4
    4f1e:	4813      	ldr	r0, [pc, #76]	; (4f6c <_gclk_init_generators_by_fref+0xb4>)
    4f20:	4b13      	ldr	r3, [pc, #76]	; (4f70 <_gclk_init_generators_by_fref+0xb8>)
    4f22:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    4f24:	687b      	ldr	r3, [r7, #4]
    4f26:	f003 0320 	and.w	r3, r3, #32
    4f2a:	2b00      	cmp	r3, #0
    4f2c:	d004      	beq.n	4f38 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    4f2e:	4a15      	ldr	r2, [pc, #84]	; (4f84 <_gclk_init_generators_by_fref+0xcc>)
    4f30:	2105      	movs	r1, #5
    4f32:	480e      	ldr	r0, [pc, #56]	; (4f6c <_gclk_init_generators_by_fref+0xb4>)
    4f34:	4b0e      	ldr	r3, [pc, #56]	; (4f70 <_gclk_init_generators_by_fref+0xb8>)
    4f36:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    4f38:	687b      	ldr	r3, [r7, #4]
    4f3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    4f3e:	2b00      	cmp	r3, #0
    4f40:	d004      	beq.n	4f4c <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    4f42:	4a11      	ldr	r2, [pc, #68]	; (4f88 <_gclk_init_generators_by_fref+0xd0>)
    4f44:	210a      	movs	r1, #10
    4f46:	4809      	ldr	r0, [pc, #36]	; (4f6c <_gclk_init_generators_by_fref+0xb4>)
    4f48:	4b09      	ldr	r3, [pc, #36]	; (4f70 <_gclk_init_generators_by_fref+0xb8>)
    4f4a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    4f4c:	687b      	ldr	r3, [r7, #4]
    4f4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    4f52:	2b00      	cmp	r3, #0
    4f54:	d004      	beq.n	4f60 <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    4f56:	4a0d      	ldr	r2, [pc, #52]	; (4f8c <_gclk_init_generators_by_fref+0xd4>)
    4f58:	210b      	movs	r1, #11
    4f5a:	4804      	ldr	r0, [pc, #16]	; (4f6c <_gclk_init_generators_by_fref+0xb4>)
    4f5c:	4b04      	ldr	r3, [pc, #16]	; (4f70 <_gclk_init_generators_by_fref+0xb8>)
    4f5e:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    4f60:	bf00      	nop
    4f62:	3708      	adds	r7, #8
    4f64:	46bd      	mov	sp, r7
    4f66:	bd80      	pop	{r7, pc}
    4f68:	00010107 	.word	0x00010107
    4f6c:	40001c00 	.word	0x40001c00
    4f70:	00004e89 	.word	0x00004e89
    4f74:	00010907 	.word	0x00010907
    4f78:	00010906 	.word	0x00010906
    4f7c:	00020908 	.word	0x00020908
    4f80:	00010901 	.word	0x00010901
    4f84:	00062901 	.word	0x00062901
    4f88:	00010905 	.word	0x00010905
    4f8c:	00041905 	.word	0x00041905

00004f90 <hri_mclk_write_CPUDIV_reg>:
{
    4f90:	b480      	push	{r7}
    4f92:	b083      	sub	sp, #12
    4f94:	af00      	add	r7, sp, #0
    4f96:	6078      	str	r0, [r7, #4]
    4f98:	460b      	mov	r3, r1
    4f9a:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    4f9c:	687b      	ldr	r3, [r7, #4]
    4f9e:	78fa      	ldrb	r2, [r7, #3]
    4fa0:	715a      	strb	r2, [r3, #5]
}
    4fa2:	bf00      	nop
    4fa4:	370c      	adds	r7, #12
    4fa6:	46bd      	mov	sp, r7
    4fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fac:	4770      	bx	lr
	...

00004fb0 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    4fb0:	b580      	push	{r7, lr}
    4fb2:	b082      	sub	sp, #8
    4fb4:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    4fb6:	4b05      	ldr	r3, [pc, #20]	; (4fcc <_mclk_init+0x1c>)
    4fb8:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    4fba:	2101      	movs	r1, #1
    4fbc:	6878      	ldr	r0, [r7, #4]
    4fbe:	4b04      	ldr	r3, [pc, #16]	; (4fd0 <_mclk_init+0x20>)
    4fc0:	4798      	blx	r3
}
    4fc2:	bf00      	nop
    4fc4:	3708      	adds	r7, #8
    4fc6:	46bd      	mov	sp, r7
    4fc8:	bd80      	pop	{r7, pc}
    4fca:	bf00      	nop
    4fcc:	40000800 	.word	0x40000800
    4fd0:	00004f91 	.word	0x00004f91

00004fd4 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    4fd4:	b480      	push	{r7}
    4fd6:	b083      	sub	sp, #12
    4fd8:	af00      	add	r7, sp, #0
    4fda:	6078      	str	r0, [r7, #4]
    4fdc:	460b      	mov	r3, r1
    4fde:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    4fe0:	687b      	ldr	r3, [r7, #4]
    4fe2:	78fa      	ldrb	r2, [r7, #3]
    4fe4:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4fe6:	bf00      	nop
    4fe8:	370c      	adds	r7, #12
    4fea:	46bd      	mov	sp, r7
    4fec:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ff0:	4770      	bx	lr

00004ff2 <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    4ff2:	b480      	push	{r7}
    4ff4:	b083      	sub	sp, #12
    4ff6:	af00      	add	r7, sp, #0
    4ff8:	6078      	str	r0, [r7, #4]
    4ffa:	460b      	mov	r3, r1
    4ffc:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    4ffe:	687b      	ldr	r3, [r7, #4]
    5000:	887a      	ldrh	r2, [r7, #2]
    5002:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    5004:	bf00      	nop
    5006:	370c      	adds	r7, #12
    5008:	46bd      	mov	sp, r7
    500a:	f85d 7b04 	ldr.w	r7, [sp], #4
    500e:	4770      	bx	lr

00005010 <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    5010:	b480      	push	{r7}
    5012:	b083      	sub	sp, #12
    5014:	af00      	add	r7, sp, #0
    5016:	6078      	str	r0, [r7, #4]
    5018:	460b      	mov	r3, r1
    501a:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    501c:	687b      	ldr	r3, [r7, #4]
    501e:	78fa      	ldrb	r2, [r7, #3]
    5020:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    5022:	bf00      	nop
    5024:	370c      	adds	r7, #12
    5026:	46bd      	mov	sp, r7
    5028:	f85d 7b04 	ldr.w	r7, [sp], #4
    502c:	4770      	bx	lr

0000502e <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    502e:	b480      	push	{r7}
    5030:	b083      	sub	sp, #12
    5032:	af00      	add	r7, sp, #0
    5034:	6078      	str	r0, [r7, #4]
    5036:	460b      	mov	r3, r1
    5038:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    503a:	687b      	ldr	r3, [r7, #4]
    503c:	78fa      	ldrb	r2, [r7, #3]
    503e:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    5040:	bf00      	nop
    5042:	370c      	adds	r7, #12
    5044:	46bd      	mov	sp, r7
    5046:	f85d 7b04 	ldr.w	r7, [sp], #4
    504a:	4770      	bx	lr

0000504c <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    504c:	b480      	push	{r7}
    504e:	b085      	sub	sp, #20
    5050:	af00      	add	r7, sp, #0
    5052:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    5054:	687b      	ldr	r3, [r7, #4]
    5056:	69db      	ldr	r3, [r3, #28]
    5058:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    505a:	68fb      	ldr	r3, [r7, #12]
    505c:	0a1b      	lsrs	r3, r3, #8
    505e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5062:	60fb      	str	r3, [r7, #12]
	return tmp;
    5064:	68fb      	ldr	r3, [r7, #12]
}
    5066:	4618      	mov	r0, r3
    5068:	3714      	adds	r7, #20
    506a:	46bd      	mov	sp, r7
    506c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5070:	4770      	bx	lr

00005072 <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    5072:	b480      	push	{r7}
    5074:	b083      	sub	sp, #12
    5076:	af00      	add	r7, sp, #0
    5078:	6078      	str	r0, [r7, #4]
    507a:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    507c:	687b      	ldr	r3, [r7, #4]
    507e:	683a      	ldr	r2, [r7, #0]
    5080:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    5082:	bf00      	nop
    5084:	370c      	adds	r7, #12
    5086:	46bd      	mov	sp, r7
    5088:	f85d 7b04 	ldr.w	r7, [sp], #4
    508c:	4770      	bx	lr
	...

00005090 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    5090:	b580      	push	{r7, lr}
    5092:	b082      	sub	sp, #8
    5094:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    5096:	4b13      	ldr	r3, [pc, #76]	; (50e4 <_osc32kctrl_init_sources+0x54>)
    5098:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    509a:	2300      	movs	r3, #0
    509c:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    509e:	f242 018e 	movw	r1, #8334	; 0x208e
    50a2:	6878      	ldr	r0, [r7, #4]
    50a4:	4b10      	ldr	r3, [pc, #64]	; (50e8 <_osc32kctrl_init_sources+0x58>)
    50a6:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    50a8:	2100      	movs	r1, #0
    50aa:	6878      	ldr	r0, [r7, #4]
    50ac:	4b0f      	ldr	r3, [pc, #60]	; (50ec <_osc32kctrl_init_sources+0x5c>)
    50ae:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    50b0:	2100      	movs	r1, #0
    50b2:	6878      	ldr	r0, [r7, #4]
    50b4:	4b0e      	ldr	r3, [pc, #56]	; (50f0 <_osc32kctrl_init_sources+0x60>)
    50b6:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    50b8:	6878      	ldr	r0, [r7, #4]
    50ba:	4b0e      	ldr	r3, [pc, #56]	; (50f4 <_osc32kctrl_init_sources+0x64>)
    50bc:	4798      	blx	r3
    50be:	4603      	mov	r3, r0
    50c0:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    50c2:	887b      	ldrh	r3, [r7, #2]
    50c4:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    50c6:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    50ca:	4619      	mov	r1, r3
    50cc:	6878      	ldr	r0, [r7, #4]
    50ce:	4b0a      	ldr	r3, [pc, #40]	; (50f8 <_osc32kctrl_init_sources+0x68>)
    50d0:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    50d2:	2100      	movs	r1, #0
    50d4:	6878      	ldr	r0, [r7, #4]
    50d6:	4b09      	ldr	r3, [pc, #36]	; (50fc <_osc32kctrl_init_sources+0x6c>)
    50d8:	4798      	blx	r3
	(void)calib;
}
    50da:	bf00      	nop
    50dc:	3708      	adds	r7, #8
    50de:	46bd      	mov	sp, r7
    50e0:	bd80      	pop	{r7, pc}
    50e2:	bf00      	nop
    50e4:	40001400 	.word	0x40001400
    50e8:	00004ff3 	.word	0x00004ff3
    50ec:	00005011 	.word	0x00005011
    50f0:	0000502f 	.word	0x0000502f
    50f4:	0000504d 	.word	0x0000504d
    50f8:	00005073 	.word	0x00005073
    50fc:	00004fd5 	.word	0x00004fd5

00005100 <hri_gclk_wait_for_sync>:
{
    5100:	b480      	push	{r7}
    5102:	b083      	sub	sp, #12
    5104:	af00      	add	r7, sp, #0
    5106:	6078      	str	r0, [r7, #4]
    5108:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    510a:	bf00      	nop
    510c:	687b      	ldr	r3, [r7, #4]
    510e:	685a      	ldr	r2, [r3, #4]
    5110:	683b      	ldr	r3, [r7, #0]
    5112:	4013      	ands	r3, r2
    5114:	2b00      	cmp	r3, #0
    5116:	d1f9      	bne.n	510c <hri_gclk_wait_for_sync+0xc>
}
    5118:	bf00      	nop
    511a:	370c      	adds	r7, #12
    511c:	46bd      	mov	sp, r7
    511e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5122:	4770      	bx	lr

00005124 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    5124:	b480      	push	{r7}
    5126:	b083      	sub	sp, #12
    5128:	af00      	add	r7, sp, #0
    512a:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    512c:	687b      	ldr	r3, [r7, #4]
    512e:	685b      	ldr	r3, [r3, #4]
    5130:	089b      	lsrs	r3, r3, #2
    5132:	f003 0301 	and.w	r3, r3, #1
    5136:	2b00      	cmp	r3, #0
    5138:	bf14      	ite	ne
    513a:	2301      	movne	r3, #1
    513c:	2300      	moveq	r3, #0
    513e:	b2db      	uxtb	r3, r3
}
    5140:	4618      	mov	r0, r3
    5142:	370c      	adds	r7, #12
    5144:	46bd      	mov	sp, r7
    5146:	f85d 7b04 	ldr.w	r7, [sp], #4
    514a:	4770      	bx	lr

0000514c <hri_gclk_read_SYNCBUSY_reg>:
{
    514c:	b480      	push	{r7}
    514e:	b083      	sub	sp, #12
    5150:	af00      	add	r7, sp, #0
    5152:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    5154:	687b      	ldr	r3, [r7, #4]
    5156:	685b      	ldr	r3, [r3, #4]
}
    5158:	4618      	mov	r0, r3
    515a:	370c      	adds	r7, #12
    515c:	46bd      	mov	sp, r7
    515e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5162:	4770      	bx	lr

00005164 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    5164:	b580      	push	{r7, lr}
    5166:	b086      	sub	sp, #24
    5168:	af00      	add	r7, sp, #0
    516a:	60f8      	str	r0, [r7, #12]
    516c:	460b      	mov	r3, r1
    516e:	607a      	str	r2, [r7, #4]
    5170:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    5172:	7afa      	ldrb	r2, [r7, #11]
    5174:	68fb      	ldr	r3, [r7, #12]
    5176:	3208      	adds	r2, #8
    5178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    517c:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    517e:	697b      	ldr	r3, [r7, #20]
    5180:	f023 030f 	bic.w	r3, r3, #15
    5184:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    5186:	687b      	ldr	r3, [r7, #4]
    5188:	f003 030f 	and.w	r3, r3, #15
    518c:	697a      	ldr	r2, [r7, #20]
    518e:	4313      	orrs	r3, r2
    5190:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    5192:	7afa      	ldrb	r2, [r7, #11]
    5194:	68fb      	ldr	r3, [r7, #12]
    5196:	3208      	adds	r2, #8
    5198:	6979      	ldr	r1, [r7, #20]
    519a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    519e:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    51a2:	68f8      	ldr	r0, [r7, #12]
    51a4:	4b02      	ldr	r3, [pc, #8]	; (51b0 <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    51a6:	4798      	blx	r3
}
    51a8:	bf00      	nop
    51aa:	3718      	adds	r7, #24
    51ac:	46bd      	mov	sp, r7
    51ae:	bd80      	pop	{r7, pc}
    51b0:	00005101 	.word	0x00005101

000051b4 <hri_gclk_write_PCHCTRL_reg>:
{
    51b4:	b480      	push	{r7}
    51b6:	b085      	sub	sp, #20
    51b8:	af00      	add	r7, sp, #0
    51ba:	60f8      	str	r0, [r7, #12]
    51bc:	460b      	mov	r3, r1
    51be:	607a      	str	r2, [r7, #4]
    51c0:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    51c2:	7afa      	ldrb	r2, [r7, #11]
    51c4:	68fb      	ldr	r3, [r7, #12]
    51c6:	3220      	adds	r2, #32
    51c8:	6879      	ldr	r1, [r7, #4]
    51ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    51ce:	bf00      	nop
    51d0:	3714      	adds	r7, #20
    51d2:	46bd      	mov	sp, r7
    51d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    51d8:	4770      	bx	lr

000051da <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    51da:	b480      	push	{r7}
    51dc:	b085      	sub	sp, #20
    51de:	af00      	add	r7, sp, #0
    51e0:	60f8      	str	r0, [r7, #12]
    51e2:	460b      	mov	r3, r1
    51e4:	607a      	str	r2, [r7, #4]
    51e6:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    51e8:	bf00      	nop
    51ea:	7afa      	ldrb	r2, [r7, #11]
    51ec:	68f9      	ldr	r1, [r7, #12]
    51ee:	4613      	mov	r3, r2
    51f0:	009b      	lsls	r3, r3, #2
    51f2:	4413      	add	r3, r2
    51f4:	009b      	lsls	r3, r3, #2
    51f6:	440b      	add	r3, r1
    51f8:	333c      	adds	r3, #60	; 0x3c
    51fa:	681a      	ldr	r2, [r3, #0]
    51fc:	687b      	ldr	r3, [r7, #4]
    51fe:	4013      	ands	r3, r2
    5200:	2b00      	cmp	r3, #0
    5202:	d1f2      	bne.n	51ea <hri_oscctrl_wait_for_sync+0x10>
	};
}
    5204:	bf00      	nop
    5206:	3714      	adds	r7, #20
    5208:	46bd      	mov	sp, r7
    520a:	f85d 7b04 	ldr.w	r7, [sp], #4
    520e:	4770      	bx	lr

00005210 <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    5210:	b480      	push	{r7}
    5212:	b083      	sub	sp, #12
    5214:	af00      	add	r7, sp, #0
    5216:	6078      	str	r0, [r7, #4]
    5218:	460b      	mov	r3, r1
    521a:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    521c:	78fa      	ldrb	r2, [r7, #3]
    521e:	6879      	ldr	r1, [r7, #4]
    5220:	4613      	mov	r3, r2
    5222:	009b      	lsls	r3, r3, #2
    5224:	4413      	add	r3, r2
    5226:	009b      	lsls	r3, r3, #2
    5228:	440b      	add	r3, r1
    522a:	3340      	adds	r3, #64	; 0x40
    522c:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    522e:	f003 0301 	and.w	r3, r3, #1
    5232:	2b00      	cmp	r3, #0
    5234:	bf14      	ite	ne
    5236:	2301      	movne	r3, #1
    5238:	2300      	moveq	r3, #0
    523a:	b2db      	uxtb	r3, r3
}
    523c:	4618      	mov	r0, r3
    523e:	370c      	adds	r7, #12
    5240:	46bd      	mov	sp, r7
    5242:	f85d 7b04 	ldr.w	r7, [sp], #4
    5246:	4770      	bx	lr

00005248 <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    5248:	b480      	push	{r7}
    524a:	b083      	sub	sp, #12
    524c:	af00      	add	r7, sp, #0
    524e:	6078      	str	r0, [r7, #4]
    5250:	460b      	mov	r3, r1
    5252:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    5254:	78fa      	ldrb	r2, [r7, #3]
    5256:	6879      	ldr	r1, [r7, #4]
    5258:	4613      	mov	r3, r2
    525a:	009b      	lsls	r3, r3, #2
    525c:	4413      	add	r3, r2
    525e:	009b      	lsls	r3, r3, #2
    5260:	440b      	add	r3, r1
    5262:	3340      	adds	r3, #64	; 0x40
    5264:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    5266:	085b      	lsrs	r3, r3, #1
    5268:	f003 0301 	and.w	r3, r3, #1
    526c:	2b00      	cmp	r3, #0
    526e:	bf14      	ite	ne
    5270:	2301      	movne	r3, #1
    5272:	2300      	moveq	r3, #0
    5274:	b2db      	uxtb	r3, r3
}
    5276:	4618      	mov	r0, r3
    5278:	370c      	adds	r7, #12
    527a:	46bd      	mov	sp, r7
    527c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5280:	4770      	bx	lr
	...

00005284 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    5284:	b580      	push	{r7, lr}
    5286:	b082      	sub	sp, #8
    5288:	af00      	add	r7, sp, #0
    528a:	6078      	str	r0, [r7, #4]
    528c:	460b      	mov	r3, r1
    528e:	70fb      	strb	r3, [r7, #3]
    5290:	4613      	mov	r3, r2
    5292:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    5294:	78fa      	ldrb	r2, [r7, #3]
    5296:	6879      	ldr	r1, [r7, #4]
    5298:	4613      	mov	r3, r2
    529a:	009b      	lsls	r3, r3, #2
    529c:	4413      	add	r3, r2
    529e:	009b      	lsls	r3, r3, #2
    52a0:	440b      	add	r3, r1
    52a2:	3330      	adds	r3, #48	; 0x30
    52a4:	78ba      	ldrb	r2, [r7, #2]
    52a6:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    52a8:	78fb      	ldrb	r3, [r7, #3]
    52aa:	2202      	movs	r2, #2
    52ac:	4619      	mov	r1, r3
    52ae:	6878      	ldr	r0, [r7, #4]
    52b0:	4b02      	ldr	r3, [pc, #8]	; (52bc <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    52b2:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    52b4:	bf00      	nop
    52b6:	3708      	adds	r7, #8
    52b8:	46bd      	mov	sp, r7
    52ba:	bd80      	pop	{r7, pc}
    52bc:	000051db 	.word	0x000051db

000052c0 <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    52c0:	b580      	push	{r7, lr}
    52c2:	b084      	sub	sp, #16
    52c4:	af00      	add	r7, sp, #0
    52c6:	60f8      	str	r0, [r7, #12]
    52c8:	460b      	mov	r3, r1
    52ca:	607a      	str	r2, [r7, #4]
    52cc:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    52ce:	7afa      	ldrb	r2, [r7, #11]
    52d0:	68f9      	ldr	r1, [r7, #12]
    52d2:	4613      	mov	r3, r2
    52d4:	009b      	lsls	r3, r3, #2
    52d6:	4413      	add	r3, r2
    52d8:	009b      	lsls	r3, r3, #2
    52da:	440b      	add	r3, r1
    52dc:	3334      	adds	r3, #52	; 0x34
    52de:	687a      	ldr	r2, [r7, #4]
    52e0:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    52e2:	7afb      	ldrb	r3, [r7, #11]
    52e4:	2206      	movs	r2, #6
    52e6:	4619      	mov	r1, r3
    52e8:	68f8      	ldr	r0, [r7, #12]
    52ea:	4b03      	ldr	r3, [pc, #12]	; (52f8 <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    52ec:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    52ee:	bf00      	nop
    52f0:	3710      	adds	r7, #16
    52f2:	46bd      	mov	sp, r7
    52f4:	bd80      	pop	{r7, pc}
    52f6:	bf00      	nop
    52f8:	000051db 	.word	0x000051db

000052fc <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    52fc:	b480      	push	{r7}
    52fe:	b085      	sub	sp, #20
    5300:	af00      	add	r7, sp, #0
    5302:	60f8      	str	r0, [r7, #12]
    5304:	460b      	mov	r3, r1
    5306:	607a      	str	r2, [r7, #4]
    5308:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    530a:	7afa      	ldrb	r2, [r7, #11]
    530c:	68f9      	ldr	r1, [r7, #12]
    530e:	4613      	mov	r3, r2
    5310:	009b      	lsls	r3, r3, #2
    5312:	4413      	add	r3, r2
    5314:	009b      	lsls	r3, r3, #2
    5316:	440b      	add	r3, r1
    5318:	3338      	adds	r3, #56	; 0x38
    531a:	687a      	ldr	r2, [r7, #4]
    531c:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    531e:	bf00      	nop
    5320:	3714      	adds	r7, #20
    5322:	46bd      	mov	sp, r7
    5324:	f85d 7b04 	ldr.w	r7, [sp], #4
    5328:	4770      	bx	lr

0000532a <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    532a:	b480      	push	{r7}
    532c:	b083      	sub	sp, #12
    532e:	af00      	add	r7, sp, #0
    5330:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    5332:	687b      	ldr	r3, [r7, #4]
    5334:	691b      	ldr	r3, [r3, #16]
    5336:	085b      	lsrs	r3, r3, #1
    5338:	f003 0301 	and.w	r3, r3, #1
    533c:	2b00      	cmp	r3, #0
    533e:	bf14      	ite	ne
    5340:	2301      	movne	r3, #1
    5342:	2300      	moveq	r3, #0
    5344:	b2db      	uxtb	r3, r3
}
    5346:	4618      	mov	r0, r3
    5348:	370c      	adds	r7, #12
    534a:	46bd      	mov	sp, r7
    534c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5350:	4770      	bx	lr

00005352 <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    5352:	b480      	push	{r7}
    5354:	b083      	sub	sp, #12
    5356:	af00      	add	r7, sp, #0
    5358:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    535a:	687b      	ldr	r3, [r7, #4]
    535c:	691b      	ldr	r3, [r3, #16]
    535e:	0a1b      	lsrs	r3, r3, #8
    5360:	f003 0301 	and.w	r3, r3, #1
    5364:	2b00      	cmp	r3, #0
    5366:	bf14      	ite	ne
    5368:	2301      	movne	r3, #1
    536a:	2300      	moveq	r3, #0
    536c:	b2db      	uxtb	r3, r3
}
    536e:	4618      	mov	r0, r3
    5370:	370c      	adds	r7, #12
    5372:	46bd      	mov	sp, r7
    5374:	f85d 7b04 	ldr.w	r7, [sp], #4
    5378:	4770      	bx	lr

0000537a <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    537a:	b480      	push	{r7}
    537c:	b085      	sub	sp, #20
    537e:	af00      	add	r7, sp, #0
    5380:	6078      	str	r0, [r7, #4]
    5382:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    5384:	687b      	ldr	r3, [r7, #4]
    5386:	691b      	ldr	r3, [r3, #16]
    5388:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    538a:	68fa      	ldr	r2, [r7, #12]
    538c:	683b      	ldr	r3, [r7, #0]
    538e:	4013      	ands	r3, r2
    5390:	60fb      	str	r3, [r7, #12]
	return tmp;
    5392:	68fb      	ldr	r3, [r7, #12]
}
    5394:	4618      	mov	r0, r3
    5396:	3714      	adds	r7, #20
    5398:	46bd      	mov	sp, r7
    539a:	f85d 7b04 	ldr.w	r7, [sp], #4
    539e:	4770      	bx	lr

000053a0 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    53a0:	b480      	push	{r7}
    53a2:	b085      	sub	sp, #20
    53a4:	af00      	add	r7, sp, #0
    53a6:	60f8      	str	r0, [r7, #12]
    53a8:	460b      	mov	r3, r1
    53aa:	607a      	str	r2, [r7, #4]
    53ac:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    53ae:	7afb      	ldrb	r3, [r7, #11]
    53b0:	68fa      	ldr	r2, [r7, #12]
    53b2:	3304      	adds	r3, #4
    53b4:	009b      	lsls	r3, r3, #2
    53b6:	4413      	add	r3, r2
    53b8:	687a      	ldr	r2, [r7, #4]
    53ba:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    53bc:	bf00      	nop
    53be:	3714      	adds	r7, #20
    53c0:	46bd      	mov	sp, r7
    53c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    53c6:	4770      	bx	lr

000053c8 <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    53c8:	b480      	push	{r7}
    53ca:	b083      	sub	sp, #12
    53cc:	af00      	add	r7, sp, #0
    53ce:	6078      	str	r0, [r7, #4]
    53d0:	460b      	mov	r3, r1
    53d2:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    53d4:	687b      	ldr	r3, [r7, #4]
    53d6:	78fa      	ldrb	r2, [r7, #3]
    53d8:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    53da:	bf00      	nop
    53dc:	370c      	adds	r7, #12
    53de:	46bd      	mov	sp, r7
    53e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    53e4:	4770      	bx	lr

000053e6 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    53e6:	b480      	push	{r7}
    53e8:	b085      	sub	sp, #20
    53ea:	af00      	add	r7, sp, #0
    53ec:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    53ee:	687b      	ldr	r3, [r7, #4]
    53f0:	f893 3020 	ldrb.w	r3, [r3, #32]
    53f4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    53f6:	7bfb      	ldrb	r3, [r7, #15]
    53f8:	f003 0301 	and.w	r3, r3, #1
    53fc:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    53fe:	7bfb      	ldrb	r3, [r7, #15]
    5400:	2b00      	cmp	r3, #0
    5402:	bf14      	ite	ne
    5404:	2301      	movne	r3, #1
    5406:	2300      	moveq	r3, #0
    5408:	b2db      	uxtb	r3, r3
}
    540a:	4618      	mov	r0, r3
    540c:	3714      	adds	r7, #20
    540e:	46bd      	mov	sp, r7
    5410:	f85d 7b04 	ldr.w	r7, [sp], #4
    5414:	4770      	bx	lr

00005416 <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    5416:	b480      	push	{r7}
    5418:	b083      	sub	sp, #12
    541a:	af00      	add	r7, sp, #0
    541c:	6078      	str	r0, [r7, #4]
    541e:	460b      	mov	r3, r1
    5420:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    5422:	687b      	ldr	r3, [r7, #4]
    5424:	78fa      	ldrb	r2, [r7, #3]
    5426:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    542a:	bf00      	nop
    542c:	370c      	adds	r7, #12
    542e:	46bd      	mov	sp, r7
    5430:	f85d 7b04 	ldr.w	r7, [sp], #4
    5434:	4770      	bx	lr

00005436 <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    5436:	b480      	push	{r7}
    5438:	b083      	sub	sp, #12
    543a:	af00      	add	r7, sp, #0
    543c:	6078      	str	r0, [r7, #4]
    543e:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    5440:	687b      	ldr	r3, [r7, #4]
    5442:	683a      	ldr	r2, [r7, #0]
    5444:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5446:	bf00      	nop
    5448:	370c      	adds	r7, #12
    544a:	46bd      	mov	sp, r7
    544c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5450:	4770      	bx	lr

00005452 <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    5452:	b480      	push	{r7}
    5454:	b083      	sub	sp, #12
    5456:	af00      	add	r7, sp, #0
    5458:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    545a:	687b      	ldr	r3, [r7, #4]
    545c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    545e:	4618      	mov	r0, r3
    5460:	370c      	adds	r7, #12
    5462:	46bd      	mov	sp, r7
    5464:	f85d 7b04 	ldr.w	r7, [sp], #4
    5468:	4770      	bx	lr

0000546a <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    546a:	b480      	push	{r7}
    546c:	b083      	sub	sp, #12
    546e:	af00      	add	r7, sp, #0
    5470:	6078      	str	r0, [r7, #4]
    5472:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    5474:	687b      	ldr	r3, [r7, #4]
    5476:	683a      	ldr	r2, [r7, #0]
    5478:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    547a:	bf00      	nop
    547c:	370c      	adds	r7, #12
    547e:	46bd      	mov	sp, r7
    5480:	f85d 7b04 	ldr.w	r7, [sp], #4
    5484:	4770      	bx	lr

00005486 <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    5486:	b480      	push	{r7}
    5488:	b085      	sub	sp, #20
    548a:	af00      	add	r7, sp, #0
    548c:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    548e:	687b      	ldr	r3, [r7, #4]
    5490:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5494:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    5496:	7bfb      	ldrb	r3, [r7, #15]
    5498:	085b      	lsrs	r3, r3, #1
    549a:	b2db      	uxtb	r3, r3
    549c:	f003 0301 	and.w	r3, r3, #1
    54a0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    54a2:	7bfb      	ldrb	r3, [r7, #15]
    54a4:	2b00      	cmp	r3, #0
    54a6:	bf14      	ite	ne
    54a8:	2301      	movne	r3, #1
    54aa:	2300      	moveq	r3, #0
    54ac:	b2db      	uxtb	r3, r3
}
    54ae:	4618      	mov	r0, r3
    54b0:	3714      	adds	r7, #20
    54b2:	46bd      	mov	sp, r7
    54b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    54b8:	4770      	bx	lr

000054ba <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    54ba:	b480      	push	{r7}
    54bc:	b085      	sub	sp, #20
    54be:	af00      	add	r7, sp, #0
    54c0:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    54c2:	687b      	ldr	r3, [r7, #4]
    54c4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    54c8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    54ca:	7bfb      	ldrb	r3, [r7, #15]
    54cc:	089b      	lsrs	r3, r3, #2
    54ce:	b2db      	uxtb	r3, r3
    54d0:	f003 0301 	and.w	r3, r3, #1
    54d4:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    54d6:	7bfb      	ldrb	r3, [r7, #15]
    54d8:	2b00      	cmp	r3, #0
    54da:	bf14      	ite	ne
    54dc:	2301      	movne	r3, #1
    54de:	2300      	moveq	r3, #0
    54e0:	b2db      	uxtb	r3, r3
}
    54e2:	4618      	mov	r0, r3
    54e4:	3714      	adds	r7, #20
    54e6:	46bd      	mov	sp, r7
    54e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    54ec:	4770      	bx	lr

000054ee <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    54ee:	b480      	push	{r7}
    54f0:	b085      	sub	sp, #20
    54f2:	af00      	add	r7, sp, #0
    54f4:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    54f6:	687b      	ldr	r3, [r7, #4]
    54f8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    54fc:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    54fe:	7bfb      	ldrb	r3, [r7, #15]
    5500:	08db      	lsrs	r3, r3, #3
    5502:	b2db      	uxtb	r3, r3
    5504:	f003 0301 	and.w	r3, r3, #1
    5508:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    550a:	7bfb      	ldrb	r3, [r7, #15]
    550c:	2b00      	cmp	r3, #0
    550e:	bf14      	ite	ne
    5510:	2301      	movne	r3, #1
    5512:	2300      	moveq	r3, #0
    5514:	b2db      	uxtb	r3, r3
}
    5516:	4618      	mov	r0, r3
    5518:	3714      	adds	r7, #20
    551a:	46bd      	mov	sp, r7
    551c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5520:	4770      	bx	lr

00005522 <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    5522:	b480      	push	{r7}
    5524:	b085      	sub	sp, #20
    5526:	af00      	add	r7, sp, #0
    5528:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    552a:	687b      	ldr	r3, [r7, #4]
    552c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5530:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    5532:	7bfb      	ldrb	r3, [r7, #15]
    5534:	091b      	lsrs	r3, r3, #4
    5536:	b2db      	uxtb	r3, r3
    5538:	f003 0301 	and.w	r3, r3, #1
    553c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    553e:	7bfb      	ldrb	r3, [r7, #15]
    5540:	2b00      	cmp	r3, #0
    5542:	bf14      	ite	ne
    5544:	2301      	movne	r3, #1
    5546:	2300      	moveq	r3, #0
    5548:	b2db      	uxtb	r3, r3
}
    554a:	4618      	mov	r0, r3
    554c:	3714      	adds	r7, #20
    554e:	46bd      	mov	sp, r7
    5550:	f85d 7b04 	ldr.w	r7, [sp], #4
    5554:	4770      	bx	lr
	...

00005558 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    5558:	b580      	push	{r7, lr}
    555a:	b082      	sub	sp, #8
    555c:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    555e:	4b0a      	ldr	r3, [pc, #40]	; (5588 <_oscctrl_init_sources+0x30>)
    5560:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    5562:	4a0a      	ldr	r2, [pc, #40]	; (558c <_oscctrl_init_sources+0x34>)
    5564:	2101      	movs	r1, #1
    5566:	6878      	ldr	r0, [r7, #4]
    5568:	4b09      	ldr	r3, [pc, #36]	; (5590 <_oscctrl_init_sources+0x38>)
    556a:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    556c:	bf00      	nop
    556e:	6878      	ldr	r0, [r7, #4]
    5570:	4b08      	ldr	r3, [pc, #32]	; (5594 <_oscctrl_init_sources+0x3c>)
    5572:	4798      	blx	r3
    5574:	4603      	mov	r3, r0
    5576:	f083 0301 	eor.w	r3, r3, #1
    557a:	b2db      	uxtb	r3, r3
    557c:	2b00      	cmp	r3, #0
    557e:	d1f6      	bne.n	556e <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    5580:	bf00      	nop
    5582:	3708      	adds	r7, #8
    5584:	46bd      	mov	sp, r7
    5586:	bd80      	pop	{r7, pc}
    5588:	40001000 	.word	0x40001000
    558c:	03002606 	.word	0x03002606
    5590:	000053a1 	.word	0x000053a1
    5594:	0000532b 	.word	0x0000532b

00005598 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    5598:	b580      	push	{r7, lr}
    559a:	b084      	sub	sp, #16
    559c:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    559e:	4b6b      	ldr	r3, [pc, #428]	; (574c <_oscctrl_init_referenced_generators+0x1b4>)
    55a0:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    55a2:	2204      	movs	r2, #4
    55a4:	2100      	movs	r1, #0
    55a6:	486a      	ldr	r0, [pc, #424]	; (5750 <_oscctrl_init_referenced_generators+0x1b8>)
    55a8:	4b6a      	ldr	r3, [pc, #424]	; (5754 <_oscctrl_init_referenced_generators+0x1bc>)
    55aa:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    55ac:	bf00      	nop
    55ae:	4868      	ldr	r0, [pc, #416]	; (5750 <_oscctrl_init_referenced_generators+0x1b8>)
    55b0:	4b69      	ldr	r3, [pc, #420]	; (5758 <_oscctrl_init_referenced_generators+0x1c0>)
    55b2:	4798      	blx	r3
    55b4:	4603      	mov	r3, r0
    55b6:	2b00      	cmp	r3, #0
    55b8:	d1f9      	bne.n	55ae <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    55ba:	2100      	movs	r1, #0
    55bc:	68f8      	ldr	r0, [r7, #12]
    55be:	4b67      	ldr	r3, [pc, #412]	; (575c <_oscctrl_init_referenced_generators+0x1c4>)
    55c0:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    55c2:	4967      	ldr	r1, [pc, #412]	; (5760 <_oscctrl_init_referenced_generators+0x1c8>)
    55c4:	68f8      	ldr	r0, [r7, #12]
    55c6:	4b67      	ldr	r3, [pc, #412]	; (5764 <_oscctrl_init_referenced_generators+0x1cc>)
    55c8:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    55ca:	bf00      	nop
    55cc:	68f8      	ldr	r0, [r7, #12]
    55ce:	4b66      	ldr	r3, [pc, #408]	; (5768 <_oscctrl_init_referenced_generators+0x1d0>)
    55d0:	4798      	blx	r3
    55d2:	4603      	mov	r3, r0
    55d4:	2b00      	cmp	r3, #0
    55d6:	d1f9      	bne.n	55cc <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    55d8:	2100      	movs	r1, #0
    55da:	68f8      	ldr	r0, [r7, #12]
    55dc:	4b63      	ldr	r3, [pc, #396]	; (576c <_oscctrl_init_referenced_generators+0x1d4>)
    55de:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    55e0:	bf00      	nop
    55e2:	68f8      	ldr	r0, [r7, #12]
    55e4:	4b62      	ldr	r3, [pc, #392]	; (5770 <_oscctrl_init_referenced_generators+0x1d8>)
    55e6:	4798      	blx	r3
    55e8:	4603      	mov	r3, r0
    55ea:	2b00      	cmp	r3, #0
    55ec:	d1f9      	bne.n	55e2 <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    55ee:	2302      	movs	r3, #2
    55f0:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    55f2:	7afb      	ldrb	r3, [r7, #11]
    55f4:	4619      	mov	r1, r3
    55f6:	68f8      	ldr	r0, [r7, #12]
    55f8:	4b58      	ldr	r3, [pc, #352]	; (575c <_oscctrl_init_referenced_generators+0x1c4>)
    55fa:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    55fc:	bf00      	nop
    55fe:	68f8      	ldr	r0, [r7, #12]
    5600:	4b5c      	ldr	r3, [pc, #368]	; (5774 <_oscctrl_init_referenced_generators+0x1dc>)
    5602:	4798      	blx	r3
    5604:	4603      	mov	r3, r0
    5606:	2b00      	cmp	r3, #0
    5608:	d1f9      	bne.n	55fe <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    560a:	68f8      	ldr	r0, [r7, #12]
    560c:	4b5a      	ldr	r3, [pc, #360]	; (5778 <_oscctrl_init_referenced_generators+0x1e0>)
    560e:	4798      	blx	r3
    5610:	4603      	mov	r3, r0
    5612:	4619      	mov	r1, r3
    5614:	68f8      	ldr	r0, [r7, #12]
    5616:	4b59      	ldr	r3, [pc, #356]	; (577c <_oscctrl_init_referenced_generators+0x1e4>)
    5618:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    561a:	bf00      	nop
    561c:	68f8      	ldr	r0, [r7, #12]
    561e:	4b58      	ldr	r3, [pc, #352]	; (5780 <_oscctrl_init_referenced_generators+0x1e8>)
    5620:	4798      	blx	r3
    5622:	4603      	mov	r3, r0
    5624:	2b00      	cmp	r3, #0
    5626:	d1f9      	bne.n	561c <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    5628:	2319      	movs	r3, #25
    562a:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    562c:	7afb      	ldrb	r3, [r7, #11]
    562e:	4619      	mov	r1, r3
    5630:	68f8      	ldr	r0, [r7, #12]
    5632:	4b4e      	ldr	r3, [pc, #312]	; (576c <_oscctrl_init_referenced_generators+0x1d4>)
    5634:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    5636:	bf00      	nop
    5638:	68f8      	ldr	r0, [r7, #12]
    563a:	4b4d      	ldr	r3, [pc, #308]	; (5770 <_oscctrl_init_referenced_generators+0x1d8>)
    563c:	4798      	blx	r3
    563e:	4603      	mov	r3, r0
    5640:	2b00      	cmp	r3, #0
    5642:	d1f9      	bne.n	5638 <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    5644:	2245      	movs	r2, #69	; 0x45
    5646:	2101      	movs	r1, #1
    5648:	4841      	ldr	r0, [pc, #260]	; (5750 <_oscctrl_init_referenced_generators+0x1b8>)
    564a:	4b4e      	ldr	r3, [pc, #312]	; (5784 <_oscctrl_init_referenced_generators+0x1ec>)
    564c:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    564e:	223b      	movs	r2, #59	; 0x3b
    5650:	2100      	movs	r1, #0
    5652:	68f8      	ldr	r0, [r7, #12]
    5654:	4b4c      	ldr	r3, [pc, #304]	; (5788 <_oscctrl_init_referenced_generators+0x1f0>)
    5656:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    5658:	f44f 6201 	mov.w	r2, #2064	; 0x810
    565c:	2100      	movs	r1, #0
    565e:	68f8      	ldr	r0, [r7, #12]
    5660:	4b4a      	ldr	r3, [pc, #296]	; (578c <_oscctrl_init_referenced_generators+0x1f4>)
    5662:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    5664:	2242      	movs	r2, #66	; 0x42
    5666:	2100      	movs	r1, #0
    5668:	68f8      	ldr	r0, [r7, #12]
    566a:	4b49      	ldr	r3, [pc, #292]	; (5790 <_oscctrl_init_referenced_generators+0x1f8>)
    566c:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    566e:	4a49      	ldr	r2, [pc, #292]	; (5794 <_oscctrl_init_referenced_generators+0x1fc>)
    5670:	2101      	movs	r1, #1
    5672:	68f8      	ldr	r0, [r7, #12]
    5674:	4b44      	ldr	r3, [pc, #272]	; (5788 <_oscctrl_init_referenced_generators+0x1f0>)
    5676:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    5678:	f44f 6203 	mov.w	r2, #2096	; 0x830
    567c:	2101      	movs	r1, #1
    567e:	68f8      	ldr	r0, [r7, #12]
    5680:	4b42      	ldr	r3, [pc, #264]	; (578c <_oscctrl_init_referenced_generators+0x1f4>)
    5682:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    5684:	2202      	movs	r2, #2
    5686:	2101      	movs	r1, #1
    5688:	68f8      	ldr	r0, [r7, #12]
    568a:	4b41      	ldr	r3, [pc, #260]	; (5790 <_oscctrl_init_referenced_generators+0x1f8>)
    568c:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    568e:	68f8      	ldr	r0, [r7, #12]
    5690:	4b41      	ldr	r3, [pc, #260]	; (5798 <_oscctrl_init_referenced_generators+0x200>)
    5692:	4798      	blx	r3
    5694:	4603      	mov	r3, r0
    5696:	2b00      	cmp	r3, #0
    5698:	d00c      	beq.n	56b4 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    569a:	f44f 6310 	mov.w	r3, #2304	; 0x900
    569e:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    56a0:	bf00      	nop
    56a2:	6879      	ldr	r1, [r7, #4]
    56a4:	68f8      	ldr	r0, [r7, #12]
    56a6:	4b3d      	ldr	r3, [pc, #244]	; (579c <_oscctrl_init_referenced_generators+0x204>)
    56a8:	4798      	blx	r3
    56aa:	4602      	mov	r2, r0
    56ac:	687b      	ldr	r3, [r7, #4]
    56ae:	429a      	cmp	r2, r3
    56b0:	d1f7      	bne.n	56a2 <_oscctrl_init_referenced_generators+0x10a>
    56b2:	e009      	b.n	56c8 <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    56b4:	bf00      	nop
    56b6:	68f8      	ldr	r0, [r7, #12]
    56b8:	4b39      	ldr	r3, [pc, #228]	; (57a0 <_oscctrl_init_referenced_generators+0x208>)
    56ba:	4798      	blx	r3
    56bc:	4603      	mov	r3, r0
    56be:	f083 0301 	eor.w	r3, r3, #1
    56c2:	b2db      	uxtb	r3, r3
    56c4:	2b00      	cmp	r3, #0
    56c6:	d1f6      	bne.n	56b6 <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    56c8:	bf00      	nop
    56ca:	2100      	movs	r1, #0
    56cc:	68f8      	ldr	r0, [r7, #12]
    56ce:	4b35      	ldr	r3, [pc, #212]	; (57a4 <_oscctrl_init_referenced_generators+0x20c>)
    56d0:	4798      	blx	r3
    56d2:	4603      	mov	r3, r0
    56d4:	f083 0301 	eor.w	r3, r3, #1
    56d8:	b2db      	uxtb	r3, r3
    56da:	2b00      	cmp	r3, #0
    56dc:	d009      	beq.n	56f2 <_oscctrl_init_referenced_generators+0x15a>
    56de:	2100      	movs	r1, #0
    56e0:	68f8      	ldr	r0, [r7, #12]
    56e2:	4b31      	ldr	r3, [pc, #196]	; (57a8 <_oscctrl_init_referenced_generators+0x210>)
    56e4:	4798      	blx	r3
    56e6:	4603      	mov	r3, r0
    56e8:	f083 0301 	eor.w	r3, r3, #1
    56ec:	b2db      	uxtb	r3, r3
    56ee:	2b00      	cmp	r3, #0
    56f0:	d1eb      	bne.n	56ca <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    56f2:	bf00      	nop
    56f4:	2101      	movs	r1, #1
    56f6:	68f8      	ldr	r0, [r7, #12]
    56f8:	4b2a      	ldr	r3, [pc, #168]	; (57a4 <_oscctrl_init_referenced_generators+0x20c>)
    56fa:	4798      	blx	r3
    56fc:	4603      	mov	r3, r0
    56fe:	f083 0301 	eor.w	r3, r3, #1
    5702:	b2db      	uxtb	r3, r3
    5704:	2b00      	cmp	r3, #0
    5706:	d009      	beq.n	571c <_oscctrl_init_referenced_generators+0x184>
    5708:	2101      	movs	r1, #1
    570a:	68f8      	ldr	r0, [r7, #12]
    570c:	4b26      	ldr	r3, [pc, #152]	; (57a8 <_oscctrl_init_referenced_generators+0x210>)
    570e:	4798      	blx	r3
    5710:	4603      	mov	r3, r0
    5712:	f083 0301 	eor.w	r3, r3, #1
    5716:	b2db      	uxtb	r3, r3
    5718:	2b00      	cmp	r3, #0
    571a:	d1eb      	bne.n	56f4 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    571c:	bf00      	nop
    571e:	480c      	ldr	r0, [pc, #48]	; (5750 <_oscctrl_init_referenced_generators+0x1b8>)
    5720:	4b22      	ldr	r3, [pc, #136]	; (57ac <_oscctrl_init_referenced_generators+0x214>)
    5722:	4798      	blx	r3
    5724:	4603      	mov	r3, r0
    5726:	2b00      	cmp	r3, #0
    5728:	d1f9      	bne.n	571e <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    572a:	2207      	movs	r2, #7
    572c:	2100      	movs	r1, #0
    572e:	4808      	ldr	r0, [pc, #32]	; (5750 <_oscctrl_init_referenced_generators+0x1b8>)
    5730:	4b08      	ldr	r3, [pc, #32]	; (5754 <_oscctrl_init_referenced_generators+0x1bc>)
    5732:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    5734:	bf00      	nop
    5736:	4806      	ldr	r0, [pc, #24]	; (5750 <_oscctrl_init_referenced_generators+0x1b8>)
    5738:	4b07      	ldr	r3, [pc, #28]	; (5758 <_oscctrl_init_referenced_generators+0x1c0>)
    573a:	4798      	blx	r3
    573c:	4603      	mov	r3, r0
    573e:	2b00      	cmp	r3, #0
    5740:	d1f9      	bne.n	5736 <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    5742:	bf00      	nop
    5744:	3710      	adds	r7, #16
    5746:	46bd      	mov	sp, r7
    5748:	bd80      	pop	{r7, pc}
    574a:	bf00      	nop
    574c:	40001000 	.word	0x40001000
    5750:	40001c00 	.word	0x40001c00
    5754:	00005165 	.word	0x00005165
    5758:	00005125 	.word	0x00005125
    575c:	000053c9 	.word	0x000053c9
    5760:	0401bb80 	.word	0x0401bb80
    5764:	0000546b 	.word	0x0000546b
    5768:	00005523 	.word	0x00005523
    576c:	00005417 	.word	0x00005417
    5770:	000054bb 	.word	0x000054bb
    5774:	00005487 	.word	0x00005487
    5778:	00005453 	.word	0x00005453
    577c:	00005437 	.word	0x00005437
    5780:	000054ef 	.word	0x000054ef
    5784:	000051b5 	.word	0x000051b5
    5788:	000052c1 	.word	0x000052c1
    578c:	000052fd 	.word	0x000052fd
    5790:	00005285 	.word	0x00005285
    5794:	000407a0 	.word	0x000407a0
    5798:	000053e7 	.word	0x000053e7
    579c:	0000537b 	.word	0x0000537b
    57a0:	00005353 	.word	0x00005353
    57a4:	00005211 	.word	0x00005211
    57a8:	00005249 	.word	0x00005249
    57ac:	0000514d 	.word	0x0000514d

000057b0 <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    57b0:	b480      	push	{r7}
    57b2:	b083      	sub	sp, #12
    57b4:	af00      	add	r7, sp, #0
    57b6:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    57b8:	687b      	ldr	r3, [r7, #4]
    57ba:	69db      	ldr	r3, [r3, #28]
    57bc:	0a9b      	lsrs	r3, r3, #10
    57be:	f003 0301 	and.w	r3, r3, #1
    57c2:	2b00      	cmp	r3, #0
    57c4:	bf14      	ite	ne
    57c6:	2301      	movne	r3, #1
    57c8:	2300      	moveq	r3, #0
    57ca:	b2db      	uxtb	r3, r3
}
    57cc:	4618      	mov	r0, r3
    57ce:	370c      	adds	r7, #12
    57d0:	46bd      	mov	sp, r7
    57d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    57d6:	4770      	bx	lr

000057d8 <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    57d8:	b480      	push	{r7}
    57da:	b083      	sub	sp, #12
    57dc:	af00      	add	r7, sp, #0
    57de:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    57e0:	687b      	ldr	r3, [r7, #4]
    57e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    57e6:	61da      	str	r2, [r3, #28]
}
    57e8:	bf00      	nop
    57ea:	370c      	adds	r7, #12
    57ec:	46bd      	mov	sp, r7
    57ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    57f2:	4770      	bx	lr

000057f4 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    57f4:	b480      	push	{r7}
    57f6:	b083      	sub	sp, #12
    57f8:	af00      	add	r7, sp, #0
    57fa:	6078      	str	r0, [r7, #4]
    57fc:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    57fe:	687b      	ldr	r3, [r7, #4]
    5800:	683a      	ldr	r2, [r7, #0]
    5802:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5804:	bf00      	nop
    5806:	370c      	adds	r7, #12
    5808:	46bd      	mov	sp, r7
    580a:	f85d 7b04 	ldr.w	r7, [sp], #4
    580e:	4770      	bx	lr

00005810 <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    5810:	b480      	push	{r7}
    5812:	b083      	sub	sp, #12
    5814:	af00      	add	r7, sp, #0
    5816:	6078      	str	r0, [r7, #4]
    5818:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    581a:	687b      	ldr	r3, [r7, #4]
    581c:	683a      	ldr	r2, [r7, #0]
    581e:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5820:	bf00      	nop
    5822:	370c      	adds	r7, #12
    5824:	46bd      	mov	sp, r7
    5826:	f85d 7b04 	ldr.w	r7, [sp], #4
    582a:	4770      	bx	lr

0000582c <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    582c:	b480      	push	{r7}
    582e:	b083      	sub	sp, #12
    5830:	af00      	add	r7, sp, #0
    5832:	6078      	str	r0, [r7, #4]
    5834:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    5836:	687b      	ldr	r3, [r7, #4]
    5838:	683a      	ldr	r2, [r7, #0]
    583a:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    583c:	bf00      	nop
    583e:	370c      	adds	r7, #12
    5840:	46bd      	mov	sp, r7
    5842:	f85d 7b04 	ldr.w	r7, [sp], #4
    5846:	4770      	bx	lr

00005848 <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    5848:	b480      	push	{r7}
    584a:	b083      	sub	sp, #12
    584c:	af00      	add	r7, sp, #0
    584e:	6078      	str	r0, [r7, #4]
    5850:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    5852:	687b      	ldr	r3, [r7, #4]
    5854:	683a      	ldr	r2, [r7, #0]
    5856:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5858:	bf00      	nop
    585a:	370c      	adds	r7, #12
    585c:	46bd      	mov	sp, r7
    585e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5862:	4770      	bx	lr

00005864 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    5864:	b480      	push	{r7}
    5866:	b085      	sub	sp, #20
    5868:	af00      	add	r7, sp, #0
    586a:	6078      	str	r0, [r7, #4]
    586c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    586e:	687b      	ldr	r3, [r7, #4]
    5870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5872:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    5874:	68fb      	ldr	r3, [r7, #12]
    5876:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    587a:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    587c:	683b      	ldr	r3, [r7, #0]
    587e:	b2db      	uxtb	r3, r3
    5880:	68fa      	ldr	r2, [r7, #12]
    5882:	4313      	orrs	r3, r2
    5884:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    5886:	687b      	ldr	r3, [r7, #4]
    5888:	68fa      	ldr	r2, [r7, #12]
    588a:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    588c:	bf00      	nop
    588e:	3714      	adds	r7, #20
    5890:	46bd      	mov	sp, r7
    5892:	f85d 7b04 	ldr.w	r7, [sp], #4
    5896:	4770      	bx	lr

00005898 <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    5898:	b480      	push	{r7}
    589a:	b085      	sub	sp, #20
    589c:	af00      	add	r7, sp, #0
    589e:	6078      	str	r0, [r7, #4]
    58a0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    58a2:	687b      	ldr	r3, [r7, #4]
    58a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    58a6:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    58a8:	68fb      	ldr	r3, [r7, #12]
    58aa:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    58ae:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    58b0:	683b      	ldr	r3, [r7, #0]
    58b2:	041b      	lsls	r3, r3, #16
    58b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    58b8:	68fa      	ldr	r2, [r7, #12]
    58ba:	4313      	orrs	r3, r2
    58bc:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    58be:	687b      	ldr	r3, [r7, #4]
    58c0:	68fa      	ldr	r2, [r7, #12]
    58c2:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    58c4:	bf00      	nop
    58c6:	3714      	adds	r7, #20
    58c8:	46bd      	mov	sp, r7
    58ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    58ce:	4770      	bx	lr

000058d0 <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    58d0:	b480      	push	{r7}
    58d2:	b083      	sub	sp, #12
    58d4:	af00      	add	r7, sp, #0
    58d6:	6078      	str	r0, [r7, #4]
    58d8:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    58da:	687b      	ldr	r3, [r7, #4]
    58dc:	683a      	ldr	r2, [r7, #0]
    58de:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    58e0:	bf00      	nop
    58e2:	370c      	adds	r7, #12
    58e4:	46bd      	mov	sp, r7
    58e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    58ea:	4770      	bx	lr

000058ec <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    58ec:	b480      	push	{r7}
    58ee:	b083      	sub	sp, #12
    58f0:	af00      	add	r7, sp, #0
    58f2:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    58f4:	687b      	ldr	r3, [r7, #4]
    58f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    58f8:	4618      	mov	r0, r3
    58fa:	370c      	adds	r7, #12
    58fc:	46bd      	mov	sp, r7
    58fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    5902:	4770      	bx	lr

00005904 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    5904:	b480      	push	{r7}
    5906:	b085      	sub	sp, #20
    5908:	af00      	add	r7, sp, #0
    590a:	60f8      	str	r0, [r7, #12]
    590c:	60b9      	str	r1, [r7, #8]
    590e:	607a      	str	r2, [r7, #4]
	while (count--) {
    5910:	e007      	b.n	5922 <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    5912:	68fb      	ldr	r3, [r7, #12]
    5914:	1c5a      	adds	r2, r3, #1
    5916:	60fa      	str	r2, [r7, #12]
    5918:	68ba      	ldr	r2, [r7, #8]
    591a:	1c51      	adds	r1, r2, #1
    591c:	60b9      	str	r1, [r7, #8]
    591e:	7812      	ldrb	r2, [r2, #0]
    5920:	701a      	strb	r2, [r3, #0]
	while (count--) {
    5922:	687b      	ldr	r3, [r7, #4]
    5924:	1e5a      	subs	r2, r3, #1
    5926:	607a      	str	r2, [r7, #4]
    5928:	2b00      	cmp	r3, #0
    592a:	d1f2      	bne.n	5912 <_qspi_memcpy+0xe>
	}
}
    592c:	bf00      	nop
    592e:	3714      	adds	r7, #20
    5930:	46bd      	mov	sp, r7
    5932:	f85d 7b04 	ldr.w	r7, [sp], #4
    5936:	4770      	bx	lr

00005938 <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    5938:	b580      	push	{r7, lr}
    593a:	b082      	sub	sp, #8
    593c:	af00      	add	r7, sp, #0
    593e:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    5940:	4903      	ldr	r1, [pc, #12]	; (5950 <_qspi_end_transfer+0x18>)
    5942:	6878      	ldr	r0, [r7, #4]
    5944:	4b03      	ldr	r3, [pc, #12]	; (5954 <_qspi_end_transfer+0x1c>)
    5946:	4798      	blx	r3
}
    5948:	bf00      	nop
    594a:	3708      	adds	r7, #8
    594c:	46bd      	mov	sp, r7
    594e:	bd80      	pop	{r7, pc}
    5950:	01000002 	.word	0x01000002
    5954:	000057f5 	.word	0x000057f5

00005958 <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    5958:	b580      	push	{r7, lr}
    595a:	b082      	sub	sp, #8
    595c:	af00      	add	r7, sp, #0
    595e:	6078      	str	r0, [r7, #4]
    5960:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    5962:	687b      	ldr	r3, [r7, #4]
    5964:	2b00      	cmp	r3, #0
    5966:	d004      	beq.n	5972 <_qspi_sync_init+0x1a>
    5968:	683b      	ldr	r3, [r7, #0]
    596a:	2b00      	cmp	r3, #0
    596c:	d001      	beq.n	5972 <_qspi_sync_init+0x1a>
    596e:	2301      	movs	r3, #1
    5970:	e000      	b.n	5974 <_qspi_sync_init+0x1c>
    5972:	2300      	movs	r3, #0
    5974:	f003 0301 	and.w	r3, r3, #1
    5978:	b2db      	uxtb	r3, r3
    597a:	2240      	movs	r2, #64	; 0x40
    597c:	490c      	ldr	r1, [pc, #48]	; (59b0 <_qspi_sync_init+0x58>)
    597e:	4618      	mov	r0, r3
    5980:	4b0c      	ldr	r3, [pc, #48]	; (59b4 <_qspi_sync_init+0x5c>)
    5982:	4798      	blx	r3
	dev->prvt = hw;
    5984:	687b      	ldr	r3, [r7, #4]
    5986:	683a      	ldr	r2, [r7, #0]
    5988:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    598a:	687b      	ldr	r3, [r7, #4]
    598c:	681b      	ldr	r3, [r3, #0]
    598e:	2101      	movs	r1, #1
    5990:	4618      	mov	r0, r3
    5992:	4b09      	ldr	r3, [pc, #36]	; (59b8 <_qspi_sync_init+0x60>)
    5994:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    5996:	4909      	ldr	r1, [pc, #36]	; (59bc <_qspi_sync_init+0x64>)
    5998:	6838      	ldr	r0, [r7, #0]
    599a:	4b09      	ldr	r3, [pc, #36]	; (59c0 <_qspi_sync_init+0x68>)
    599c:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    599e:	4909      	ldr	r1, [pc, #36]	; (59c4 <_qspi_sync_init+0x6c>)
    59a0:	6838      	ldr	r0, [r7, #0]
    59a2:	4b09      	ldr	r3, [pc, #36]	; (59c8 <_qspi_sync_init+0x70>)
    59a4:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    59a6:	2300      	movs	r3, #0
}
    59a8:	4618      	mov	r0, r3
    59aa:	3708      	adds	r7, #8
    59ac:	46bd      	mov	sp, r7
    59ae:	bd80      	pop	{r7, pc}
    59b0:	0000e54c 	.word	0x0000e54c
    59b4:	000034fd 	.word	0x000034fd
    59b8:	000057f5 	.word	0x000057f5
    59bc:	06000011 	.word	0x06000011
    59c0:	00005811 	.word	0x00005811
    59c4:	00241300 	.word	0x00241300
    59c8:	0000582d 	.word	0x0000582d

000059cc <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    59cc:	b580      	push	{r7, lr}
    59ce:	b082      	sub	sp, #8
    59d0:	af00      	add	r7, sp, #0
    59d2:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    59d4:	687b      	ldr	r3, [r7, #4]
    59d6:	681b      	ldr	r3, [r3, #0]
    59d8:	2102      	movs	r1, #2
    59da:	4618      	mov	r0, r3
    59dc:	4b03      	ldr	r3, [pc, #12]	; (59ec <_qspi_sync_enable+0x20>)
    59de:	4798      	blx	r3
	return ERR_NONE;
    59e0:	2300      	movs	r3, #0
}
    59e2:	4618      	mov	r0, r3
    59e4:	3708      	adds	r7, #8
    59e6:	46bd      	mov	sp, r7
    59e8:	bd80      	pop	{r7, pc}
    59ea:	bf00      	nop
    59ec:	000057f5 	.word	0x000057f5

000059f0 <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    59f0:	b580      	push	{r7, lr}
    59f2:	b082      	sub	sp, #8
    59f4:	af00      	add	r7, sp, #0
    59f6:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    59f8:	687b      	ldr	r3, [r7, #4]
    59fa:	681b      	ldr	r3, [r3, #0]
    59fc:	2100      	movs	r1, #0
    59fe:	4618      	mov	r0, r3
    5a00:	4b03      	ldr	r3, [pc, #12]	; (5a10 <_qspi_sync_disable+0x20>)
    5a02:	4798      	blx	r3
	return ERR_NONE;
    5a04:	2300      	movs	r3, #0
}
    5a06:	4618      	mov	r0, r3
    5a08:	3708      	adds	r7, #8
    5a0a:	46bd      	mov	sp, r7
    5a0c:	bd80      	pop	{r7, pc}
    5a0e:	bf00      	nop
    5a10:	000057f5 	.word	0x000057f5

00005a14 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5a14:	b580      	push	{r7, lr}
    5a16:	b084      	sub	sp, #16
    5a18:	af00      	add	r7, sp, #0
    5a1a:	6078      	str	r0, [r7, #4]
    5a1c:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    5a1e:	687b      	ldr	r3, [r7, #4]
    5a20:	681b      	ldr	r3, [r3, #0]
    5a22:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    5a24:	683b      	ldr	r3, [r7, #0]
    5a26:	781b      	ldrb	r3, [r3, #0]
    5a28:	f003 0320 	and.w	r3, r3, #32
    5a2c:	b2db      	uxtb	r3, r3
    5a2e:	2b00      	cmp	r3, #0
    5a30:	d005      	beq.n	5a3e <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    5a32:	683b      	ldr	r3, [r7, #0]
    5a34:	689b      	ldr	r3, [r3, #8]
    5a36:	4619      	mov	r1, r3
    5a38:	68f8      	ldr	r0, [r7, #12]
    5a3a:	4b13      	ldr	r3, [pc, #76]	; (5a88 <_qspi_sync_command_set_ifr+0x74>)
    5a3c:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    5a3e:	683b      	ldr	r3, [r7, #0]
    5a40:	781b      	ldrb	r3, [r3, #0]
    5a42:	f003 0310 	and.w	r3, r3, #16
    5a46:	b2db      	uxtb	r3, r3
    5a48:	2b00      	cmp	r3, #0
    5a4a:	d005      	beq.n	5a58 <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    5a4c:	683b      	ldr	r3, [r7, #0]
    5a4e:	791b      	ldrb	r3, [r3, #4]
    5a50:	4619      	mov	r1, r3
    5a52:	68f8      	ldr	r0, [r7, #12]
    5a54:	4b0d      	ldr	r3, [pc, #52]	; (5a8c <_qspi_sync_command_set_ifr+0x78>)
    5a56:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    5a58:	683b      	ldr	r3, [r7, #0]
    5a5a:	781b      	ldrb	r3, [r3, #0]
    5a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5a60:	b2db      	uxtb	r3, r3
    5a62:	2b00      	cmp	r3, #0
    5a64:	d005      	beq.n	5a72 <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    5a66:	683b      	ldr	r3, [r7, #0]
    5a68:	795b      	ldrb	r3, [r3, #5]
    5a6a:	4619      	mov	r1, r3
    5a6c:	68f8      	ldr	r0, [r7, #12]
    5a6e:	4b08      	ldr	r3, [pc, #32]	; (5a90 <_qspi_sync_command_set_ifr+0x7c>)
    5a70:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    5a72:	683b      	ldr	r3, [r7, #0]
    5a74:	681b      	ldr	r3, [r3, #0]
    5a76:	4619      	mov	r1, r3
    5a78:	68f8      	ldr	r0, [r7, #12]
    5a7a:	4b06      	ldr	r3, [pc, #24]	; (5a94 <_qspi_sync_command_set_ifr+0x80>)
    5a7c:	4798      	blx	r3
}
    5a7e:	bf00      	nop
    5a80:	3710      	adds	r7, #16
    5a82:	46bd      	mov	sp, r7
    5a84:	bd80      	pop	{r7, pc}
    5a86:	bf00      	nop
    5a88:	00005849 	.word	0x00005849
    5a8c:	00005865 	.word	0x00005865
    5a90:	00005899 	.word	0x00005899
    5a94:	000058d1 	.word	0x000058d1

00005a98 <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5a98:	b580      	push	{r7, lr}
    5a9a:	b084      	sub	sp, #16
    5a9c:	af00      	add	r7, sp, #0
    5a9e:	6078      	str	r0, [r7, #4]
    5aa0:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    5aa2:	687b      	ldr	r3, [r7, #4]
    5aa4:	681b      	ldr	r3, [r3, #0]
    5aa6:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    5aa8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    5aac:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    5aae:	683b      	ldr	r3, [r7, #0]
    5ab0:	781b      	ldrb	r3, [r3, #0]
    5ab2:	f003 0320 	and.w	r3, r3, #32
    5ab6:	b2db      	uxtb	r3, r3
    5ab8:	2b00      	cmp	r3, #0
    5aba:	d004      	beq.n	5ac6 <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    5abc:	683b      	ldr	r3, [r7, #0]
    5abe:	689b      	ldr	r3, [r3, #8]
    5ac0:	68fa      	ldr	r2, [r7, #12]
    5ac2:	4413      	add	r3, r2
    5ac4:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    5ac6:	68b8      	ldr	r0, [r7, #8]
    5ac8:	4b18      	ldr	r3, [pc, #96]	; (5b2c <_qspi_sync_run_transfer+0x94>)
    5aca:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    5acc:	683b      	ldr	r3, [r7, #0]
    5ace:	691b      	ldr	r3, [r3, #16]
    5ad0:	2b00      	cmp	r3, #0
    5ad2:	d103      	bne.n	5adc <_qspi_sync_run_transfer+0x44>
    5ad4:	683b      	ldr	r3, [r7, #0]
    5ad6:	695b      	ldr	r3, [r3, #20]
    5ad8:	2b00      	cmp	r3, #0
    5ada:	d001      	beq.n	5ae0 <_qspi_sync_run_transfer+0x48>
    5adc:	2301      	movs	r3, #1
    5ade:	e000      	b.n	5ae2 <_qspi_sync_run_transfer+0x4a>
    5ae0:	2300      	movs	r3, #0
    5ae2:	f003 0301 	and.w	r3, r3, #1
    5ae6:	b2db      	uxtb	r3, r3
    5ae8:	2282      	movs	r2, #130	; 0x82
    5aea:	4911      	ldr	r1, [pc, #68]	; (5b30 <_qspi_sync_run_transfer+0x98>)
    5aec:	4618      	mov	r0, r3
    5aee:	4b11      	ldr	r3, [pc, #68]	; (5b34 <_qspi_sync_run_transfer+0x9c>)
    5af0:	4798      	blx	r3

	if (cmd->tx_buf) {
    5af2:	683b      	ldr	r3, [r7, #0]
    5af4:	691b      	ldr	r3, [r3, #16]
    5af6:	2b00      	cmp	r3, #0
    5af8:	d008      	beq.n	5b0c <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    5afa:	683b      	ldr	r3, [r7, #0]
    5afc:	6919      	ldr	r1, [r3, #16]
    5afe:	683b      	ldr	r3, [r7, #0]
    5b00:	68db      	ldr	r3, [r3, #12]
    5b02:	461a      	mov	r2, r3
    5b04:	68f8      	ldr	r0, [r7, #12]
    5b06:	4b0c      	ldr	r3, [pc, #48]	; (5b38 <_qspi_sync_run_transfer+0xa0>)
    5b08:	4798      	blx	r3
    5b0a:	e007      	b.n	5b1c <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    5b0c:	683b      	ldr	r3, [r7, #0]
    5b0e:	6958      	ldr	r0, [r3, #20]
    5b10:	683b      	ldr	r3, [r7, #0]
    5b12:	68db      	ldr	r3, [r3, #12]
    5b14:	461a      	mov	r2, r3
    5b16:	68f9      	ldr	r1, [r7, #12]
    5b18:	4b07      	ldr	r3, [pc, #28]	; (5b38 <_qspi_sync_run_transfer+0xa0>)
    5b1a:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    5b1c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5b20:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    5b24:	bf00      	nop
    5b26:	3710      	adds	r7, #16
    5b28:	46bd      	mov	sp, r7
    5b2a:	bd80      	pop	{r7, pc}
    5b2c:	000058ed 	.word	0x000058ed
    5b30:	0000e54c 	.word	0x0000e54c
    5b34:	000034fd 	.word	0x000034fd
    5b38:	00005905 	.word	0x00005905

00005b3c <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5b3c:	b580      	push	{r7, lr}
    5b3e:	b082      	sub	sp, #8
    5b40:	af00      	add	r7, sp, #0
    5b42:	6078      	str	r0, [r7, #4]
    5b44:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    5b46:	6839      	ldr	r1, [r7, #0]
    5b48:	6878      	ldr	r0, [r7, #4]
    5b4a:	4b14      	ldr	r3, [pc, #80]	; (5b9c <_qspi_sync_serial_run_command+0x60>)
    5b4c:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    5b4e:	683b      	ldr	r3, [r7, #0]
    5b50:	781b      	ldrb	r3, [r3, #0]
    5b52:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    5b56:	b2db      	uxtb	r3, r3
    5b58:	2b00      	cmp	r3, #0
    5b5a:	d003      	beq.n	5b64 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    5b5c:	6839      	ldr	r1, [r7, #0]
    5b5e:	6878      	ldr	r0, [r7, #4]
    5b60:	4b0f      	ldr	r3, [pc, #60]	; (5ba0 <_qspi_sync_serial_run_command+0x64>)
    5b62:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    5b64:	687b      	ldr	r3, [r7, #4]
    5b66:	681b      	ldr	r3, [r3, #0]
    5b68:	4618      	mov	r0, r3
    5b6a:	4b0e      	ldr	r3, [pc, #56]	; (5ba4 <_qspi_sync_serial_run_command+0x68>)
    5b6c:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    5b6e:	bf00      	nop
    5b70:	687b      	ldr	r3, [r7, #4]
    5b72:	681b      	ldr	r3, [r3, #0]
    5b74:	4618      	mov	r0, r3
    5b76:	4b0c      	ldr	r3, [pc, #48]	; (5ba8 <_qspi_sync_serial_run_command+0x6c>)
    5b78:	4798      	blx	r3
    5b7a:	4603      	mov	r3, r0
    5b7c:	f083 0301 	eor.w	r3, r3, #1
    5b80:	b2db      	uxtb	r3, r3
    5b82:	2b00      	cmp	r3, #0
    5b84:	d1f4      	bne.n	5b70 <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    5b86:	687b      	ldr	r3, [r7, #4]
    5b88:	681b      	ldr	r3, [r3, #0]
    5b8a:	4618      	mov	r0, r3
    5b8c:	4b07      	ldr	r3, [pc, #28]	; (5bac <_qspi_sync_serial_run_command+0x70>)
    5b8e:	4798      	blx	r3
	return ERR_NONE;
    5b90:	2300      	movs	r3, #0
}
    5b92:	4618      	mov	r0, r3
    5b94:	3708      	adds	r7, #8
    5b96:	46bd      	mov	sp, r7
    5b98:	bd80      	pop	{r7, pc}
    5b9a:	bf00      	nop
    5b9c:	00005a15 	.word	0x00005a15
    5ba0:	00005a99 	.word	0x00005a99
    5ba4:	00005939 	.word	0x00005939
    5ba8:	000057b1 	.word	0x000057b1
    5bac:	000057d9 	.word	0x000057d9

00005bb0 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    5bb0:	b480      	push	{r7}
    5bb2:	b083      	sub	sp, #12
    5bb4:	af00      	add	r7, sp, #0
    5bb6:	6078      	str	r0, [r7, #4]
    5bb8:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    5bba:	bf00      	nop
    5bbc:	687b      	ldr	r3, [r7, #4]
    5bbe:	691a      	ldr	r2, [r3, #16]
    5bc0:	683b      	ldr	r3, [r7, #0]
    5bc2:	4013      	ands	r3, r2
    5bc4:	2b00      	cmp	r3, #0
    5bc6:	d1f9      	bne.n	5bbc <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    5bc8:	bf00      	nop
    5bca:	370c      	adds	r7, #12
    5bcc:	46bd      	mov	sp, r7
    5bce:	f85d 7b04 	ldr.w	r7, [sp], #4
    5bd2:	4770      	bx	lr

00005bd4 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    5bd4:	b480      	push	{r7}
    5bd6:	b083      	sub	sp, #12
    5bd8:	af00      	add	r7, sp, #0
    5bda:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    5bdc:	687b      	ldr	r3, [r7, #4]
    5bde:	f44f 7280 	mov.w	r2, #256	; 0x100
    5be2:	819a      	strh	r2, [r3, #12]
}
    5be4:	bf00      	nop
    5be6:	370c      	adds	r7, #12
    5be8:	46bd      	mov	sp, r7
    5bea:	f85d 7b04 	ldr.w	r7, [sp], #4
    5bee:	4770      	bx	lr

00005bf0 <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    5bf0:	b480      	push	{r7}
    5bf2:	b083      	sub	sp, #12
    5bf4:	af00      	add	r7, sp, #0
    5bf6:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    5bf8:	687b      	ldr	r3, [r7, #4]
    5bfa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    5bfe:	819a      	strh	r2, [r3, #12]
}
    5c00:	bf00      	nop
    5c02:	370c      	adds	r7, #12
    5c04:	46bd      	mov	sp, r7
    5c06:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c0a:	4770      	bx	lr

00005c0c <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    5c0c:	b480      	push	{r7}
    5c0e:	b083      	sub	sp, #12
    5c10:	af00      	add	r7, sp, #0
    5c12:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    5c14:	687b      	ldr	r3, [r7, #4]
    5c16:	899b      	ldrh	r3, [r3, #12]
    5c18:	b29b      	uxth	r3, r3
}
    5c1a:	4618      	mov	r0, r3
    5c1c:	370c      	adds	r7, #12
    5c1e:	46bd      	mov	sp, r7
    5c20:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c24:	4770      	bx	lr

00005c26 <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    5c26:	b480      	push	{r7}
    5c28:	b083      	sub	sp, #12
    5c2a:	af00      	add	r7, sp, #0
    5c2c:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    5c2e:	687b      	ldr	r3, [r7, #4]
    5c30:	895b      	ldrh	r3, [r3, #10]
    5c32:	b29b      	uxth	r3, r3
}
    5c34:	4618      	mov	r0, r3
    5c36:	370c      	adds	r7, #12
    5c38:	46bd      	mov	sp, r7
    5c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c3e:	4770      	bx	lr

00005c40 <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    5c40:	b580      	push	{r7, lr}
    5c42:	b082      	sub	sp, #8
    5c44:	af00      	add	r7, sp, #0
    5c46:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    5c48:	687b      	ldr	r3, [r7, #4]
    5c4a:	881b      	ldrh	r3, [r3, #0]
    5c4c:	b29b      	uxth	r3, r3
    5c4e:	f043 0301 	orr.w	r3, r3, #1
    5c52:	b29a      	uxth	r2, r3
    5c54:	687b      	ldr	r3, [r7, #4]
    5c56:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    5c58:	2101      	movs	r1, #1
    5c5a:	6878      	ldr	r0, [r7, #4]
    5c5c:	4b02      	ldr	r3, [pc, #8]	; (5c68 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    5c5e:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5c60:	bf00      	nop
    5c62:	3708      	adds	r7, #8
    5c64:	46bd      	mov	sp, r7
    5c66:	bd80      	pop	{r7, pc}
    5c68:	00005bb1 	.word	0x00005bb1

00005c6c <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    5c6c:	b580      	push	{r7, lr}
    5c6e:	b084      	sub	sp, #16
    5c70:	af00      	add	r7, sp, #0
    5c72:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5c74:	f248 0103 	movw	r1, #32771	; 0x8003
    5c78:	6878      	ldr	r0, [r7, #4]
    5c7a:	4b0a      	ldr	r3, [pc, #40]	; (5ca4 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    5c7c:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    5c7e:	687b      	ldr	r3, [r7, #4]
    5c80:	881b      	ldrh	r3, [r3, #0]
    5c82:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    5c84:	89fb      	ldrh	r3, [r7, #14]
    5c86:	085b      	lsrs	r3, r3, #1
    5c88:	b29b      	uxth	r3, r3
    5c8a:	f003 0301 	and.w	r3, r3, #1
    5c8e:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    5c90:	89fb      	ldrh	r3, [r7, #14]
    5c92:	2b00      	cmp	r3, #0
    5c94:	bf14      	ite	ne
    5c96:	2301      	movne	r3, #1
    5c98:	2300      	moveq	r3, #0
    5c9a:	b2db      	uxtb	r3, r3
}
    5c9c:	4618      	mov	r0, r3
    5c9e:	3710      	adds	r7, #16
    5ca0:	46bd      	mov	sp, r7
    5ca2:	bd80      	pop	{r7, pc}
    5ca4:	00005bb1 	.word	0x00005bb1

00005ca8 <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5ca8:	b580      	push	{r7, lr}
    5caa:	b082      	sub	sp, #8
    5cac:	af00      	add	r7, sp, #0
    5cae:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    5cb0:	687b      	ldr	r3, [r7, #4]
    5cb2:	881b      	ldrh	r3, [r3, #0]
    5cb4:	b29b      	uxth	r3, r3
    5cb6:	f023 0302 	bic.w	r3, r3, #2
    5cba:	b29a      	uxth	r2, r3
    5cbc:	687b      	ldr	r3, [r7, #4]
    5cbe:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5cc0:	f248 0103 	movw	r1, #32771	; 0x8003
    5cc4:	6878      	ldr	r0, [r7, #4]
    5cc6:	4b03      	ldr	r3, [pc, #12]	; (5cd4 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    5cc8:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5cca:	bf00      	nop
    5ccc:	3708      	adds	r7, #8
    5cce:	46bd      	mov	sp, r7
    5cd0:	bd80      	pop	{r7, pc}
    5cd2:	bf00      	nop
    5cd4:	00005bb1 	.word	0x00005bb1

00005cd8 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    5cd8:	b580      	push	{r7, lr}
    5cda:	b082      	sub	sp, #8
    5cdc:	af00      	add	r7, sp, #0
    5cde:	6078      	str	r0, [r7, #4]
    5ce0:	460b      	mov	r3, r1
    5ce2:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    5ce4:	687b      	ldr	r3, [r7, #4]
    5ce6:	887a      	ldrh	r2, [r7, #2]
    5ce8:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5cea:	f248 0103 	movw	r1, #32771	; 0x8003
    5cee:	6878      	ldr	r0, [r7, #4]
    5cf0:	4b02      	ldr	r3, [pc, #8]	; (5cfc <hri_rtcmode0_write_CTRLA_reg+0x24>)
    5cf2:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5cf4:	bf00      	nop
    5cf6:	3708      	adds	r7, #8
    5cf8:	46bd      	mov	sp, r7
    5cfa:	bd80      	pop	{r7, pc}
    5cfc:	00005bb1 	.word	0x00005bb1

00005d00 <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    5d00:	b480      	push	{r7}
    5d02:	b083      	sub	sp, #12
    5d04:	af00      	add	r7, sp, #0
    5d06:	6078      	str	r0, [r7, #4]
    5d08:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    5d0a:	687b      	ldr	r3, [r7, #4]
    5d0c:	683a      	ldr	r2, [r7, #0]
    5d0e:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    5d10:	bf00      	nop
    5d12:	370c      	adds	r7, #12
    5d14:	46bd      	mov	sp, r7
    5d16:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d1a:	4770      	bx	lr

00005d1c <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    5d1c:	b580      	push	{r7, lr}
    5d1e:	b082      	sub	sp, #8
    5d20:	af00      	add	r7, sp, #0
    5d22:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    5d24:	687b      	ldr	r3, [r7, #4]
    5d26:	2b00      	cmp	r3, #0
    5d28:	d005      	beq.n	5d36 <_calendar_init+0x1a>
    5d2a:	687b      	ldr	r3, [r7, #4]
    5d2c:	681b      	ldr	r3, [r3, #0]
    5d2e:	2b00      	cmp	r3, #0
    5d30:	d001      	beq.n	5d36 <_calendar_init+0x1a>
    5d32:	2301      	movs	r3, #1
    5d34:	e000      	b.n	5d38 <_calendar_init+0x1c>
    5d36:	2300      	movs	r3, #0
    5d38:	f003 0301 	and.w	r3, r3, #1
    5d3c:	b2db      	uxtb	r3, r3
    5d3e:	222f      	movs	r2, #47	; 0x2f
    5d40:	491e      	ldr	r1, [pc, #120]	; (5dbc <_calendar_init+0xa0>)
    5d42:	4618      	mov	r0, r3
    5d44:	4b1e      	ldr	r3, [pc, #120]	; (5dc0 <_calendar_init+0xa4>)
    5d46:	4798      	blx	r3

	_rtc_dev = dev;
    5d48:	4a1e      	ldr	r2, [pc, #120]	; (5dc4 <_calendar_init+0xa8>)
    5d4a:	687b      	ldr	r3, [r7, #4]
    5d4c:	6013      	str	r3, [r2, #0]

	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    5d4e:	687b      	ldr	r3, [r7, #4]
    5d50:	681b      	ldr	r3, [r3, #0]
    5d52:	2101      	movs	r1, #1
    5d54:	4618      	mov	r0, r3
    5d56:	4b1c      	ldr	r3, [pc, #112]	; (5dc8 <_calendar_init+0xac>)
    5d58:	4798      	blx	r3
	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    5d5a:	687b      	ldr	r3, [r7, #4]
    5d5c:	681b      	ldr	r3, [r3, #0]
    5d5e:	4618      	mov	r0, r3
    5d60:	4b1a      	ldr	r3, [pc, #104]	; (5dcc <_calendar_init+0xb0>)
    5d62:	4798      	blx	r3
    5d64:	4603      	mov	r3, r0
    5d66:	2b00      	cmp	r3, #0
    5d68:	d00a      	beq.n	5d80 <_calendar_init+0x64>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    5d6a:	687b      	ldr	r3, [r7, #4]
    5d6c:	681b      	ldr	r3, [r3, #0]
    5d6e:	4618      	mov	r0, r3
    5d70:	4b17      	ldr	r3, [pc, #92]	; (5dd0 <_calendar_init+0xb4>)
    5d72:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    5d74:	687b      	ldr	r3, [r7, #4]
    5d76:	681b      	ldr	r3, [r3, #0]
    5d78:	2102      	movs	r1, #2
    5d7a:	4618      	mov	r0, r3
    5d7c:	4b12      	ldr	r3, [pc, #72]	; (5dc8 <_calendar_init+0xac>)
    5d7e:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    5d80:	687b      	ldr	r3, [r7, #4]
    5d82:	681b      	ldr	r3, [r3, #0]
    5d84:	4618      	mov	r0, r3
    5d86:	4b13      	ldr	r3, [pc, #76]	; (5dd4 <_calendar_init+0xb8>)
    5d88:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    5d8a:	687b      	ldr	r3, [r7, #4]
    5d8c:	681b      	ldr	r3, [r3, #0]
    5d8e:	2101      	movs	r1, #1
    5d90:	4618      	mov	r0, r3
    5d92:	4b0d      	ldr	r3, [pc, #52]	; (5dc8 <_calendar_init+0xac>)
    5d94:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    5d96:	687b      	ldr	r3, [r7, #4]
    5d98:	681b      	ldr	r3, [r3, #0]
    5d9a:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    5d9e:	4618      	mov	r0, r3
    5da0:	4b0d      	ldr	r3, [pc, #52]	; (5dd8 <_calendar_init+0xbc>)
    5da2:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    5da4:	687b      	ldr	r3, [r7, #4]
    5da6:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    5da8:	2100      	movs	r1, #0
    5daa:	4618      	mov	r0, r3
    5dac:	4b0b      	ldr	r3, [pc, #44]	; (5ddc <_calendar_init+0xc0>)
    5dae:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    5db0:	2300      	movs	r3, #0
}
    5db2:	4618      	mov	r0, r3
    5db4:	3708      	adds	r7, #8
    5db6:	46bd      	mov	sp, r7
    5db8:	bd80      	pop	{r7, pc}
    5dba:	bf00      	nop
    5dbc:	0000e564 	.word	0x0000e564
    5dc0:	000034fd 	.word	0x000034fd
    5dc4:	20000744 	.word	0x20000744
    5dc8:	00005bb1 	.word	0x00005bb1
    5dcc:	00005c6d 	.word	0x00005c6d
    5dd0:	00005ca9 	.word	0x00005ca9
    5dd4:	00005c41 	.word	0x00005c41
    5dd8:	00005cd9 	.word	0x00005cd9
    5ddc:	00005d01 	.word	0x00005d01

00005de0 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    5de0:	b580      	push	{r7, lr}
    5de2:	b084      	sub	sp, #16
    5de4:	af00      	add	r7, sp, #0
    5de6:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    5de8:	687b      	ldr	r3, [r7, #4]
    5dea:	681b      	ldr	r3, [r3, #0]
    5dec:	4618      	mov	r0, r3
    5dee:	4b19      	ldr	r3, [pc, #100]	; (5e54 <_rtc_interrupt_handler+0x74>)
    5df0:	4798      	blx	r3
    5df2:	4603      	mov	r3, r0
    5df4:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    5df6:	687b      	ldr	r3, [r7, #4]
    5df8:	681b      	ldr	r3, [r3, #0]
    5dfa:	4618      	mov	r0, r3
    5dfc:	4b16      	ldr	r3, [pc, #88]	; (5e58 <_rtc_interrupt_handler+0x78>)
    5dfe:	4798      	blx	r3
    5e00:	4603      	mov	r3, r0
    5e02:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    5e04:	89fa      	ldrh	r2, [r7, #14]
    5e06:	89bb      	ldrh	r3, [r7, #12]
    5e08:	4013      	ands	r3, r2
    5e0a:	b29b      	uxth	r3, r3
    5e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    5e10:	2b00      	cmp	r3, #0
    5e12:	d009      	beq.n	5e28 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    5e14:	687b      	ldr	r3, [r7, #4]
    5e16:	685b      	ldr	r3, [r3, #4]
    5e18:	6878      	ldr	r0, [r7, #4]
    5e1a:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    5e1c:	687b      	ldr	r3, [r7, #4]
    5e1e:	681b      	ldr	r3, [r3, #0]
    5e20:	4618      	mov	r0, r3
    5e22:	4b0e      	ldr	r3, [pc, #56]	; (5e5c <_rtc_interrupt_handler+0x7c>)
    5e24:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    5e26:	e010      	b.n	5e4a <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    5e28:	89fa      	ldrh	r2, [r7, #14]
    5e2a:	89bb      	ldrh	r3, [r7, #12]
    5e2c:	4013      	ands	r3, r2
    5e2e:	b29b      	uxth	r3, r3
    5e30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    5e34:	2b00      	cmp	r3, #0
    5e36:	d008      	beq.n	5e4a <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    5e38:	687b      	ldr	r3, [r7, #4]
    5e3a:	689b      	ldr	r3, [r3, #8]
    5e3c:	6878      	ldr	r0, [r7, #4]
    5e3e:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    5e40:	687b      	ldr	r3, [r7, #4]
    5e42:	681b      	ldr	r3, [r3, #0]
    5e44:	4618      	mov	r0, r3
    5e46:	4b06      	ldr	r3, [pc, #24]	; (5e60 <_rtc_interrupt_handler+0x80>)
    5e48:	4798      	blx	r3
}
    5e4a:	bf00      	nop
    5e4c:	3710      	adds	r7, #16
    5e4e:	46bd      	mov	sp, r7
    5e50:	bd80      	pop	{r7, pc}
    5e52:	bf00      	nop
    5e54:	00005c0d 	.word	0x00005c0d
    5e58:	00005c27 	.word	0x00005c27
    5e5c:	00005bd5 	.word	0x00005bd5
    5e60:	00005bf1 	.word	0x00005bf1

00005e64 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    5e64:	b580      	push	{r7, lr}
    5e66:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    5e68:	4b03      	ldr	r3, [pc, #12]	; (5e78 <RTC_Handler+0x14>)
    5e6a:	681b      	ldr	r3, [r3, #0]
    5e6c:	4618      	mov	r0, r3
    5e6e:	4b03      	ldr	r3, [pc, #12]	; (5e7c <RTC_Handler+0x18>)
    5e70:	4798      	blx	r3
}
    5e72:	bf00      	nop
    5e74:	bd80      	pop	{r7, pc}
    5e76:	bf00      	nop
    5e78:	20000744 	.word	0x20000744
    5e7c:	00005de1 	.word	0x00005de1

00005e80 <__NVIC_EnableIRQ>:
{
    5e80:	b480      	push	{r7}
    5e82:	b083      	sub	sp, #12
    5e84:	af00      	add	r7, sp, #0
    5e86:	4603      	mov	r3, r0
    5e88:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5e8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5e8e:	2b00      	cmp	r3, #0
    5e90:	db0b      	blt.n	5eaa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5e92:	4909      	ldr	r1, [pc, #36]	; (5eb8 <__NVIC_EnableIRQ+0x38>)
    5e94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5e98:	095b      	lsrs	r3, r3, #5
    5e9a:	88fa      	ldrh	r2, [r7, #6]
    5e9c:	f002 021f 	and.w	r2, r2, #31
    5ea0:	2001      	movs	r0, #1
    5ea2:	fa00 f202 	lsl.w	r2, r0, r2
    5ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5eaa:	bf00      	nop
    5eac:	370c      	adds	r7, #12
    5eae:	46bd      	mov	sp, r7
    5eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
    5eb4:	4770      	bx	lr
    5eb6:	bf00      	nop
    5eb8:	e000e100 	.word	0xe000e100

00005ebc <__NVIC_DisableIRQ>:
{
    5ebc:	b480      	push	{r7}
    5ebe:	b083      	sub	sp, #12
    5ec0:	af00      	add	r7, sp, #0
    5ec2:	4603      	mov	r3, r0
    5ec4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5ec6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5eca:	2b00      	cmp	r3, #0
    5ecc:	db10      	blt.n	5ef0 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5ece:	490b      	ldr	r1, [pc, #44]	; (5efc <__NVIC_DisableIRQ+0x40>)
    5ed0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5ed4:	095b      	lsrs	r3, r3, #5
    5ed6:	88fa      	ldrh	r2, [r7, #6]
    5ed8:	f002 021f 	and.w	r2, r2, #31
    5edc:	2001      	movs	r0, #1
    5ede:	fa00 f202 	lsl.w	r2, r0, r2
    5ee2:	3320      	adds	r3, #32
    5ee4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    5ee8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5eec:	f3bf 8f6f 	isb	sy
}
    5ef0:	bf00      	nop
    5ef2:	370c      	adds	r7, #12
    5ef4:	46bd      	mov	sp, r7
    5ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5efa:	4770      	bx	lr
    5efc:	e000e100 	.word	0xe000e100

00005f00 <__NVIC_ClearPendingIRQ>:
{
    5f00:	b480      	push	{r7}
    5f02:	b083      	sub	sp, #12
    5f04:	af00      	add	r7, sp, #0
    5f06:	4603      	mov	r3, r0
    5f08:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5f0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5f0e:	2b00      	cmp	r3, #0
    5f10:	db0c      	blt.n	5f2c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5f12:	4909      	ldr	r1, [pc, #36]	; (5f38 <__NVIC_ClearPendingIRQ+0x38>)
    5f14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5f18:	095b      	lsrs	r3, r3, #5
    5f1a:	88fa      	ldrh	r2, [r7, #6]
    5f1c:	f002 021f 	and.w	r2, r2, #31
    5f20:	2001      	movs	r0, #1
    5f22:	fa00 f202 	lsl.w	r2, r0, r2
    5f26:	3360      	adds	r3, #96	; 0x60
    5f28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5f2c:	bf00      	nop
    5f2e:	370c      	adds	r7, #12
    5f30:	46bd      	mov	sp, r7
    5f32:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f36:	4770      	bx	lr
    5f38:	e000e100 	.word	0xe000e100

00005f3c <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    5f3c:	b480      	push	{r7}
    5f3e:	b083      	sub	sp, #12
    5f40:	af00      	add	r7, sp, #0
    5f42:	6078      	str	r0, [r7, #4]
    5f44:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    5f46:	bf00      	nop
    5f48:	687b      	ldr	r3, [r7, #4]
    5f4a:	69da      	ldr	r2, [r3, #28]
    5f4c:	683b      	ldr	r3, [r7, #0]
    5f4e:	4013      	ands	r3, r2
    5f50:	2b00      	cmp	r3, #0
    5f52:	d1f9      	bne.n	5f48 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    5f54:	bf00      	nop
    5f56:	370c      	adds	r7, #12
    5f58:	46bd      	mov	sp, r7
    5f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f5e:	4770      	bx	lr

00005f60 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    5f60:	b480      	push	{r7}
    5f62:	b083      	sub	sp, #12
    5f64:	af00      	add	r7, sp, #0
    5f66:	6078      	str	r0, [r7, #4]
    5f68:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    5f6a:	687b      	ldr	r3, [r7, #4]
    5f6c:	69da      	ldr	r2, [r3, #28]
    5f6e:	683b      	ldr	r3, [r7, #0]
    5f70:	4013      	ands	r3, r2
    5f72:	2b00      	cmp	r3, #0
    5f74:	bf14      	ite	ne
    5f76:	2301      	movne	r3, #1
    5f78:	2300      	moveq	r3, #0
    5f7a:	b2db      	uxtb	r3, r3
}
    5f7c:	4618      	mov	r0, r3
    5f7e:	370c      	adds	r7, #12
    5f80:	46bd      	mov	sp, r7
    5f82:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f86:	4770      	bx	lr

00005f88 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    5f88:	b480      	push	{r7}
    5f8a:	b083      	sub	sp, #12
    5f8c:	af00      	add	r7, sp, #0
    5f8e:	6078      	str	r0, [r7, #4]
    5f90:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    5f92:	bf00      	nop
    5f94:	687b      	ldr	r3, [r7, #4]
    5f96:	69da      	ldr	r2, [r3, #28]
    5f98:	683b      	ldr	r3, [r7, #0]
    5f9a:	4013      	ands	r3, r2
    5f9c:	2b00      	cmp	r3, #0
    5f9e:	d1f9      	bne.n	5f94 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    5fa0:	bf00      	nop
    5fa2:	370c      	adds	r7, #12
    5fa4:	46bd      	mov	sp, r7
    5fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5faa:	4770      	bx	lr

00005fac <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    5fac:	b480      	push	{r7}
    5fae:	b083      	sub	sp, #12
    5fb0:	af00      	add	r7, sp, #0
    5fb2:	6078      	str	r0, [r7, #4]
    5fb4:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    5fb6:	687b      	ldr	r3, [r7, #4]
    5fb8:	69da      	ldr	r2, [r3, #28]
    5fba:	683b      	ldr	r3, [r7, #0]
    5fbc:	4013      	ands	r3, r2
    5fbe:	2b00      	cmp	r3, #0
    5fc0:	bf14      	ite	ne
    5fc2:	2301      	movne	r3, #1
    5fc4:	2300      	moveq	r3, #0
    5fc6:	b2db      	uxtb	r3, r3
}
    5fc8:	4618      	mov	r0, r3
    5fca:	370c      	adds	r7, #12
    5fcc:	46bd      	mov	sp, r7
    5fce:	f85d 7b04 	ldr.w	r7, [sp], #4
    5fd2:	4770      	bx	lr

00005fd4 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    5fd4:	b480      	push	{r7}
    5fd6:	b083      	sub	sp, #12
    5fd8:	af00      	add	r7, sp, #0
    5fda:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    5fdc:	687b      	ldr	r3, [r7, #4]
    5fde:	2201      	movs	r2, #1
    5fe0:	761a      	strb	r2, [r3, #24]
}
    5fe2:	bf00      	nop
    5fe4:	370c      	adds	r7, #12
    5fe6:	46bd      	mov	sp, r7
    5fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
    5fec:	4770      	bx	lr

00005fee <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    5fee:	b480      	push	{r7}
    5ff0:	b083      	sub	sp, #12
    5ff2:	af00      	add	r7, sp, #0
    5ff4:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    5ff6:	687b      	ldr	r3, [r7, #4]
    5ff8:	2202      	movs	r2, #2
    5ffa:	761a      	strb	r2, [r3, #24]
}
    5ffc:	bf00      	nop
    5ffe:	370c      	adds	r7, #12
    6000:	46bd      	mov	sp, r7
    6002:	f85d 7b04 	ldr.w	r7, [sp], #4
    6006:	4770      	bx	lr

00006008 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    6008:	b480      	push	{r7}
    600a:	b083      	sub	sp, #12
    600c:	af00      	add	r7, sp, #0
    600e:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    6010:	687b      	ldr	r3, [r7, #4]
    6012:	7e1b      	ldrb	r3, [r3, #24]
    6014:	b2db      	uxtb	r3, r3
}
    6016:	4618      	mov	r0, r3
    6018:	370c      	adds	r7, #12
    601a:	46bd      	mov	sp, r7
    601c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6020:	4770      	bx	lr

00006022 <hri_sercomi2cm_clear_INTFLAG_reg>:

static inline void hri_sercomi2cm_clear_INTFLAG_reg(const void *const hw, hri_sercomi2cm_intflag_reg_t mask)
{
    6022:	b480      	push	{r7}
    6024:	b083      	sub	sp, #12
    6026:	af00      	add	r7, sp, #0
    6028:	6078      	str	r0, [r7, #4]
    602a:	460b      	mov	r3, r1
    602c:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->I2CM.INTFLAG.reg = mask;
    602e:	687b      	ldr	r3, [r7, #4]
    6030:	78fa      	ldrb	r2, [r7, #3]
    6032:	761a      	strb	r2, [r3, #24]
}
    6034:	bf00      	nop
    6036:	370c      	adds	r7, #12
    6038:	46bd      	mov	sp, r7
    603a:	f85d 7b04 	ldr.w	r7, [sp], #4
    603e:	4770      	bx	lr

00006040 <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    6040:	b480      	push	{r7}
    6042:	b085      	sub	sp, #20
    6044:	af00      	add	r7, sp, #0
    6046:	6078      	str	r0, [r7, #4]
    6048:	460b      	mov	r3, r1
    604a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    604c:	687b      	ldr	r3, [r7, #4]
    604e:	7e1b      	ldrb	r3, [r3, #24]
    6050:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    6052:	7bfa      	ldrb	r2, [r7, #15]
    6054:	78fb      	ldrb	r3, [r7, #3]
    6056:	4013      	ands	r3, r2
    6058:	73fb      	strb	r3, [r7, #15]
	return tmp;
    605a:	7bfb      	ldrb	r3, [r7, #15]
}
    605c:	4618      	mov	r0, r3
    605e:	3714      	adds	r7, #20
    6060:	46bd      	mov	sp, r7
    6062:	f85d 7b04 	ldr.w	r7, [sp], #4
    6066:	4770      	bx	lr

00006068 <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    6068:	b480      	push	{r7}
    606a:	b083      	sub	sp, #12
    606c:	af00      	add	r7, sp, #0
    606e:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    6070:	687b      	ldr	r3, [r7, #4]
    6072:	7e1b      	ldrb	r3, [r3, #24]
    6074:	b2db      	uxtb	r3, r3
}
    6076:	4618      	mov	r0, r3
    6078:	370c      	adds	r7, #12
    607a:	46bd      	mov	sp, r7
    607c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6080:	4770      	bx	lr

00006082 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    6082:	b480      	push	{r7}
    6084:	b083      	sub	sp, #12
    6086:	af00      	add	r7, sp, #0
    6088:	6078      	str	r0, [r7, #4]
    608a:	460b      	mov	r3, r1
    608c:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    608e:	687b      	ldr	r3, [r7, #4]
    6090:	78fa      	ldrb	r2, [r7, #3]
    6092:	761a      	strb	r2, [r3, #24]
}
    6094:	bf00      	nop
    6096:	370c      	adds	r7, #12
    6098:	46bd      	mov	sp, r7
    609a:	f85d 7b04 	ldr.w	r7, [sp], #4
    609e:	4770      	bx	lr

000060a0 <hri_sercomspi_set_INTEN_DRE_bit>:
{
	((Sercom *)hw)->I2CS.INTENCLR.reg = mask;
}

static inline void hri_sercomspi_set_INTEN_DRE_bit(const void *const hw)
{
    60a0:	b480      	push	{r7}
    60a2:	b083      	sub	sp, #12
    60a4:	af00      	add	r7, sp, #0
    60a6:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    60a8:	687b      	ldr	r3, [r7, #4]
    60aa:	2201      	movs	r2, #1
    60ac:	759a      	strb	r2, [r3, #22]
}
    60ae:	bf00      	nop
    60b0:	370c      	adds	r7, #12
    60b2:	46bd      	mov	sp, r7
    60b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    60b8:	4770      	bx	lr

000060ba <hri_sercomspi_clear_INTEN_DRE_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
	}
}

static inline void hri_sercomspi_clear_INTEN_DRE_bit(const void *const hw)
{
    60ba:	b480      	push	{r7}
    60bc:	b083      	sub	sp, #12
    60be:	af00      	add	r7, sp, #0
    60c0:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    60c2:	687b      	ldr	r3, [r7, #4]
    60c4:	2201      	movs	r2, #1
    60c6:	751a      	strb	r2, [r3, #20]
}
    60c8:	bf00      	nop
    60ca:	370c      	adds	r7, #12
    60cc:	46bd      	mov	sp, r7
    60ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    60d2:	4770      	bx	lr

000060d4 <hri_sercomspi_set_INTEN_TXC_bit>:

static inline void hri_sercomspi_set_INTEN_TXC_bit(const void *const hw)
{
    60d4:	b480      	push	{r7}
    60d6:	b083      	sub	sp, #12
    60d8:	af00      	add	r7, sp, #0
    60da:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    60dc:	687b      	ldr	r3, [r7, #4]
    60de:	2202      	movs	r2, #2
    60e0:	759a      	strb	r2, [r3, #22]
}
    60e2:	bf00      	nop
    60e4:	370c      	adds	r7, #12
    60e6:	46bd      	mov	sp, r7
    60e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    60ec:	4770      	bx	lr

000060ee <hri_sercomspi_clear_INTEN_TXC_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
	}
}

static inline void hri_sercomspi_clear_INTEN_TXC_bit(const void *const hw)
{
    60ee:	b480      	push	{r7}
    60f0:	b083      	sub	sp, #12
    60f2:	af00      	add	r7, sp, #0
    60f4:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    60f6:	687b      	ldr	r3, [r7, #4]
    60f8:	2202      	movs	r2, #2
    60fa:	751a      	strb	r2, [r3, #20]
}
    60fc:	bf00      	nop
    60fe:	370c      	adds	r7, #12
    6100:	46bd      	mov	sp, r7
    6102:	f85d 7b04 	ldr.w	r7, [sp], #4
    6106:	4770      	bx	lr

00006108 <hri_sercomspi_set_INTEN_RXC_bit>:

static inline void hri_sercomspi_set_INTEN_RXC_bit(const void *const hw)
{
    6108:	b480      	push	{r7}
    610a:	b083      	sub	sp, #12
    610c:	af00      	add	r7, sp, #0
    610e:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    6110:	687b      	ldr	r3, [r7, #4]
    6112:	2204      	movs	r2, #4
    6114:	759a      	strb	r2, [r3, #22]
}
    6116:	bf00      	nop
    6118:	370c      	adds	r7, #12
    611a:	46bd      	mov	sp, r7
    611c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6120:	4770      	bx	lr

00006122 <hri_sercomspi_clear_INTEN_RXC_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
	}
}

static inline void hri_sercomspi_clear_INTEN_RXC_bit(const void *const hw)
{
    6122:	b480      	push	{r7}
    6124:	b083      	sub	sp, #12
    6126:	af00      	add	r7, sp, #0
    6128:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    612a:	687b      	ldr	r3, [r7, #4]
    612c:	2204      	movs	r2, #4
    612e:	751a      	strb	r2, [r3, #20]
}
    6130:	bf00      	nop
    6132:	370c      	adds	r7, #12
    6134:	46bd      	mov	sp, r7
    6136:	f85d 7b04 	ldr.w	r7, [sp], #4
    613a:	4770      	bx	lr

0000613c <hri_sercomspi_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomspi_intenset_reg_t hri_sercomspi_read_INTEN_reg(const void *const hw)
{
    613c:	b480      	push	{r7}
    613e:	b083      	sub	sp, #12
    6140:	af00      	add	r7, sp, #0
    6142:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    6144:	687b      	ldr	r3, [r7, #4]
    6146:	7d9b      	ldrb	r3, [r3, #22]
    6148:	b2db      	uxtb	r3, r3
}
    614a:	4618      	mov	r0, r3
    614c:	370c      	adds	r7, #12
    614e:	46bd      	mov	sp, r7
    6150:	f85d 7b04 	ldr.w	r7, [sp], #4
    6154:	4770      	bx	lr
	...

00006158 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    6158:	b580      	push	{r7, lr}
    615a:	b082      	sub	sp, #8
    615c:	af00      	add	r7, sp, #0
    615e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    6160:	687b      	ldr	r3, [r7, #4]
    6162:	681b      	ldr	r3, [r3, #0]
    6164:	f023 0202 	bic.w	r2, r3, #2
    6168:	687b      	ldr	r3, [r7, #4]
    616a:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    616c:	2103      	movs	r1, #3
    616e:	6878      	ldr	r0, [r7, #4]
    6170:	4b02      	ldr	r3, [pc, #8]	; (617c <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    6172:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6174:	bf00      	nop
    6176:	3708      	adds	r7, #8
    6178:	46bd      	mov	sp, r7
    617a:	bd80      	pop	{r7, pc}
    617c:	00005f3d 	.word	0x00005f3d

00006180 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    6180:	b480      	push	{r7}
    6182:	b085      	sub	sp, #20
    6184:	af00      	add	r7, sp, #0
    6186:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    6188:	687b      	ldr	r3, [r7, #4]
    618a:	681b      	ldr	r3, [r3, #0]
    618c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    618e:	68fb      	ldr	r3, [r7, #12]
    6190:	0edb      	lsrs	r3, r3, #27
    6192:	f003 0301 	and.w	r3, r3, #1
    6196:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    6198:	68fb      	ldr	r3, [r7, #12]
    619a:	2b00      	cmp	r3, #0
    619c:	bf14      	ite	ne
    619e:	2301      	movne	r3, #1
    61a0:	2300      	moveq	r3, #0
    61a2:	b2db      	uxtb	r3, r3
}
    61a4:	4618      	mov	r0, r3
    61a6:	3714      	adds	r7, #20
    61a8:	46bd      	mov	sp, r7
    61aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    61ae:	4770      	bx	lr

000061b0 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    61b0:	b580      	push	{r7, lr}
    61b2:	b084      	sub	sp, #16
    61b4:	af00      	add	r7, sp, #0
    61b6:	6078      	str	r0, [r7, #4]
    61b8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    61ba:	2103      	movs	r1, #3
    61bc:	6878      	ldr	r0, [r7, #4]
    61be:	4b07      	ldr	r3, [pc, #28]	; (61dc <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    61c0:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    61c2:	687b      	ldr	r3, [r7, #4]
    61c4:	681b      	ldr	r3, [r3, #0]
    61c6:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    61c8:	68fa      	ldr	r2, [r7, #12]
    61ca:	683b      	ldr	r3, [r7, #0]
    61cc:	4013      	ands	r3, r2
    61ce:	60fb      	str	r3, [r7, #12]
	return tmp;
    61d0:	68fb      	ldr	r3, [r7, #12]
}
    61d2:	4618      	mov	r0, r3
    61d4:	3710      	adds	r7, #16
    61d6:	46bd      	mov	sp, r7
    61d8:	bd80      	pop	{r7, pc}
    61da:	bf00      	nop
    61dc:	00005f3d 	.word	0x00005f3d

000061e0 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    61e0:	b580      	push	{r7, lr}
    61e2:	b082      	sub	sp, #8
    61e4:	af00      	add	r7, sp, #0
    61e6:	6078      	str	r0, [r7, #4]
    61e8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    61ea:	687b      	ldr	r3, [r7, #4]
    61ec:	683a      	ldr	r2, [r7, #0]
    61ee:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    61f0:	2103      	movs	r1, #3
    61f2:	6878      	ldr	r0, [r7, #4]
    61f4:	4b02      	ldr	r3, [pc, #8]	; (6200 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    61f6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    61f8:	bf00      	nop
    61fa:	3708      	adds	r7, #8
    61fc:	46bd      	mov	sp, r7
    61fe:	bd80      	pop	{r7, pc}
    6200:	00005f3d 	.word	0x00005f3d

00006204 <hri_sercomspi_get_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    6204:	b580      	push	{r7, lr}
    6206:	b084      	sub	sp, #16
    6208:	af00      	add	r7, sp, #0
    620a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    620c:	2103      	movs	r1, #3
    620e:	6878      	ldr	r0, [r7, #4]
    6210:	4b09      	ldr	r3, [pc, #36]	; (6238 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    6212:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    6214:	687b      	ldr	r3, [r7, #4]
    6216:	681b      	ldr	r3, [r3, #0]
    6218:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    621a:	68fb      	ldr	r3, [r7, #12]
    621c:	085b      	lsrs	r3, r3, #1
    621e:	f003 0301 	and.w	r3, r3, #1
    6222:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    6224:	68fb      	ldr	r3, [r7, #12]
    6226:	2b00      	cmp	r3, #0
    6228:	bf14      	ite	ne
    622a:	2301      	movne	r3, #1
    622c:	2300      	moveq	r3, #0
    622e:	b2db      	uxtb	r3, r3
}
    6230:	4618      	mov	r0, r3
    6232:	3710      	adds	r7, #16
    6234:	46bd      	mov	sp, r7
    6236:	bd80      	pop	{r7, pc}
    6238:	00005f89 	.word	0x00005f89

0000623c <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    623c:	b580      	push	{r7, lr}
    623e:	b082      	sub	sp, #8
    6240:	af00      	add	r7, sp, #0
    6242:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    6244:	687b      	ldr	r3, [r7, #4]
    6246:	681b      	ldr	r3, [r3, #0]
    6248:	f023 0202 	bic.w	r2, r3, #2
    624c:	687b      	ldr	r3, [r7, #4]
    624e:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6250:	2103      	movs	r1, #3
    6252:	6878      	ldr	r0, [r7, #4]
    6254:	4b02      	ldr	r3, [pc, #8]	; (6260 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    6256:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6258:	bf00      	nop
    625a:	3708      	adds	r7, #8
    625c:	46bd      	mov	sp, r7
    625e:	bd80      	pop	{r7, pc}
    6260:	00005f89 	.word	0x00005f89

00006264 <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    6264:	b580      	push	{r7, lr}
    6266:	b084      	sub	sp, #16
    6268:	af00      	add	r7, sp, #0
    626a:	6078      	str	r0, [r7, #4]
    626c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    626e:	2103      	movs	r1, #3
    6270:	6878      	ldr	r0, [r7, #4]
    6272:	4b07      	ldr	r3, [pc, #28]	; (6290 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    6274:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    6276:	687b      	ldr	r3, [r7, #4]
    6278:	681b      	ldr	r3, [r3, #0]
    627a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    627c:	68fa      	ldr	r2, [r7, #12]
    627e:	683b      	ldr	r3, [r7, #0]
    6280:	4013      	ands	r3, r2
    6282:	60fb      	str	r3, [r7, #12]
	return tmp;
    6284:	68fb      	ldr	r3, [r7, #12]
}
    6286:	4618      	mov	r0, r3
    6288:	3710      	adds	r7, #16
    628a:	46bd      	mov	sp, r7
    628c:	bd80      	pop	{r7, pc}
    628e:	bf00      	nop
    6290:	00005f89 	.word	0x00005f89

00006294 <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    6294:	b580      	push	{r7, lr}
    6296:	b082      	sub	sp, #8
    6298:	af00      	add	r7, sp, #0
    629a:	6078      	str	r0, [r7, #4]
    629c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    629e:	687b      	ldr	r3, [r7, #4]
    62a0:	683a      	ldr	r2, [r7, #0]
    62a2:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    62a4:	2103      	movs	r1, #3
    62a6:	6878      	ldr	r0, [r7, #4]
    62a8:	4b02      	ldr	r3, [pc, #8]	; (62b4 <hri_sercomspi_write_CTRLA_reg+0x20>)
    62aa:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    62ac:	bf00      	nop
    62ae:	3708      	adds	r7, #8
    62b0:	46bd      	mov	sp, r7
    62b2:	bd80      	pop	{r7, pc}
    62b4:	00005f89 	.word	0x00005f89

000062b8 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    62b8:	b580      	push	{r7, lr}
    62ba:	b082      	sub	sp, #8
    62bc:	af00      	add	r7, sp, #0
    62be:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    62c0:	687b      	ldr	r3, [r7, #4]
    62c2:	685b      	ldr	r3, [r3, #4]
    62c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    62c8:	687b      	ldr	r3, [r7, #4]
    62ca:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    62cc:	2104      	movs	r1, #4
    62ce:	6878      	ldr	r0, [r7, #4]
    62d0:	4b02      	ldr	r3, [pc, #8]	; (62dc <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    62d2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    62d4:	bf00      	nop
    62d6:	3708      	adds	r7, #8
    62d8:	46bd      	mov	sp, r7
    62da:	bd80      	pop	{r7, pc}
    62dc:	00005f3d 	.word	0x00005f3d

000062e0 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    62e0:	b580      	push	{r7, lr}
    62e2:	b082      	sub	sp, #8
    62e4:	af00      	add	r7, sp, #0
    62e6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    62e8:	687b      	ldr	r3, [r7, #4]
    62ea:	685b      	ldr	r3, [r3, #4]
    62ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    62f0:	687b      	ldr	r3, [r7, #4]
    62f2:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    62f4:	2104      	movs	r1, #4
    62f6:	6878      	ldr	r0, [r7, #4]
    62f8:	4b02      	ldr	r3, [pc, #8]	; (6304 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    62fa:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    62fc:	bf00      	nop
    62fe:	3708      	adds	r7, #8
    6300:	46bd      	mov	sp, r7
    6302:	bd80      	pop	{r7, pc}
    6304:	00005f3d 	.word	0x00005f3d

00006308 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    6308:	b580      	push	{r7, lr}
    630a:	b082      	sub	sp, #8
    630c:	af00      	add	r7, sp, #0
    630e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    6310:	687b      	ldr	r3, [r7, #4]
    6312:	685b      	ldr	r3, [r3, #4]
    6314:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    6318:	687b      	ldr	r3, [r7, #4]
    631a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    631c:	2104      	movs	r1, #4
    631e:	6878      	ldr	r0, [r7, #4]
    6320:	4b02      	ldr	r3, [pc, #8]	; (632c <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    6322:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6324:	bf00      	nop
    6326:	3708      	adds	r7, #8
    6328:	46bd      	mov	sp, r7
    632a:	bd80      	pop	{r7, pc}
    632c:	00005f3d 	.word	0x00005f3d

00006330 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    6330:	b580      	push	{r7, lr}
    6332:	b082      	sub	sp, #8
    6334:	af00      	add	r7, sp, #0
    6336:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    6338:	687b      	ldr	r3, [r7, #4]
    633a:	685b      	ldr	r3, [r3, #4]
    633c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    6340:	687b      	ldr	r3, [r7, #4]
    6342:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6344:	2104      	movs	r1, #4
    6346:	6878      	ldr	r0, [r7, #4]
    6348:	4b02      	ldr	r3, [pc, #8]	; (6354 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    634a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    634c:	bf00      	nop
    634e:	3708      	adds	r7, #8
    6350:	46bd      	mov	sp, r7
    6352:	bd80      	pop	{r7, pc}
    6354:	00005f3d 	.word	0x00005f3d

00006358 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    6358:	b580      	push	{r7, lr}
    635a:	b082      	sub	sp, #8
    635c:	af00      	add	r7, sp, #0
    635e:	6078      	str	r0, [r7, #4]
    6360:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    6362:	687b      	ldr	r3, [r7, #4]
    6364:	685a      	ldr	r2, [r3, #4]
    6366:	683b      	ldr	r3, [r7, #0]
    6368:	041b      	lsls	r3, r3, #16
    636a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    636e:	431a      	orrs	r2, r3
    6370:	687b      	ldr	r3, [r7, #4]
    6372:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6374:	2104      	movs	r1, #4
    6376:	6878      	ldr	r0, [r7, #4]
    6378:	4b02      	ldr	r3, [pc, #8]	; (6384 <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    637a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    637c:	bf00      	nop
    637e:	3708      	adds	r7, #8
    6380:	46bd      	mov	sp, r7
    6382:	bd80      	pop	{r7, pc}
    6384:	00005f3d 	.word	0x00005f3d

00006388 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    6388:	b580      	push	{r7, lr}
    638a:	b082      	sub	sp, #8
    638c:	af00      	add	r7, sp, #0
    638e:	6078      	str	r0, [r7, #4]
    6390:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    6392:	687b      	ldr	r3, [r7, #4]
    6394:	683a      	ldr	r2, [r7, #0]
    6396:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6398:	2104      	movs	r1, #4
    639a:	6878      	ldr	r0, [r7, #4]
    639c:	4b02      	ldr	r3, [pc, #8]	; (63a8 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    639e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    63a0:	bf00      	nop
    63a2:	3708      	adds	r7, #8
    63a4:	46bd      	mov	sp, r7
    63a6:	bd80      	pop	{r7, pc}
    63a8:	00005f3d 	.word	0x00005f3d

000063ac <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    63ac:	b580      	push	{r7, lr}
    63ae:	b082      	sub	sp, #8
    63b0:	af00      	add	r7, sp, #0
    63b2:	6078      	str	r0, [r7, #4]
    63b4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    63b6:	687b      	ldr	r3, [r7, #4]
    63b8:	683a      	ldr	r2, [r7, #0]
    63ba:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    63bc:	2117      	movs	r1, #23
    63be:	6878      	ldr	r0, [r7, #4]
    63c0:	4b02      	ldr	r3, [pc, #8]	; (63cc <hri_sercomspi_write_CTRLB_reg+0x20>)
    63c2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    63c4:	bf00      	nop
    63c6:	3708      	adds	r7, #8
    63c8:	46bd      	mov	sp, r7
    63ca:	bd80      	pop	{r7, pc}
    63cc:	00005f89 	.word	0x00005f89

000063d0 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    63d0:	b480      	push	{r7}
    63d2:	b083      	sub	sp, #12
    63d4:	af00      	add	r7, sp, #0
    63d6:	6078      	str	r0, [r7, #4]
    63d8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    63da:	687b      	ldr	r3, [r7, #4]
    63dc:	683a      	ldr	r2, [r7, #0]
    63de:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    63e0:	bf00      	nop
    63e2:	370c      	adds	r7, #12
    63e4:	46bd      	mov	sp, r7
    63e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    63ea:	4770      	bx	lr

000063ec <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    63ec:	b480      	push	{r7}
    63ee:	b083      	sub	sp, #12
    63f0:	af00      	add	r7, sp, #0
    63f2:	6078      	str	r0, [r7, #4]
    63f4:	460b      	mov	r3, r1
    63f6:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    63f8:	687b      	ldr	r3, [r7, #4]
    63fa:	78fa      	ldrb	r2, [r7, #3]
    63fc:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    63fe:	bf00      	nop
    6400:	370c      	adds	r7, #12
    6402:	46bd      	mov	sp, r7
    6404:	f85d 7b04 	ldr.w	r7, [sp], #4
    6408:	4770      	bx	lr
	...

0000640c <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    640c:	b580      	push	{r7, lr}
    640e:	b084      	sub	sp, #16
    6410:	af00      	add	r7, sp, #0
    6412:	6078      	str	r0, [r7, #4]
    6414:	460b      	mov	r3, r1
    6416:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    6418:	687b      	ldr	r3, [r7, #4]
    641a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    641c:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    641e:	68fb      	ldr	r3, [r7, #12]
    6420:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    6424:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    6426:	78fb      	ldrb	r3, [r7, #3]
    6428:	039b      	lsls	r3, r3, #14
    642a:	461a      	mov	r2, r3
    642c:	68fb      	ldr	r3, [r7, #12]
    642e:	4313      	orrs	r3, r2
    6430:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    6432:	687b      	ldr	r3, [r7, #4]
    6434:	68fa      	ldr	r2, [r7, #12]
    6436:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6438:	2104      	movs	r1, #4
    643a:	6878      	ldr	r0, [r7, #4]
    643c:	4b02      	ldr	r3, [pc, #8]	; (6448 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    643e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6440:	bf00      	nop
    6442:	3710      	adds	r7, #16
    6444:	46bd      	mov	sp, r7
    6446:	bd80      	pop	{r7, pc}
    6448:	00005f3d 	.word	0x00005f3d

0000644c <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    644c:	b580      	push	{r7, lr}
    644e:	b082      	sub	sp, #8
    6450:	af00      	add	r7, sp, #0
    6452:	6078      	str	r0, [r7, #4]
    6454:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    6456:	687b      	ldr	r3, [r7, #4]
    6458:	683a      	ldr	r2, [r7, #0]
    645a:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    645c:	2104      	movs	r1, #4
    645e:	6878      	ldr	r0, [r7, #4]
    6460:	4b02      	ldr	r3, [pc, #8]	; (646c <hri_sercomi2cm_write_ADDR_reg+0x20>)
    6462:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6464:	bf00      	nop
    6466:	3708      	adds	r7, #8
    6468:	46bd      	mov	sp, r7
    646a:	bd80      	pop	{r7, pc}
    646c:	00005f3d 	.word	0x00005f3d

00006470 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    6470:	b580      	push	{r7, lr}
    6472:	b082      	sub	sp, #8
    6474:	af00      	add	r7, sp, #0
    6476:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6478:	2104      	movs	r1, #4
    647a:	6878      	ldr	r0, [r7, #4]
    647c:	4b03      	ldr	r3, [pc, #12]	; (648c <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    647e:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    6480:	687b      	ldr	r3, [r7, #4]
    6482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    6484:	4618      	mov	r0, r3
    6486:	3708      	adds	r7, #8
    6488:	46bd      	mov	sp, r7
    648a:	bd80      	pop	{r7, pc}
    648c:	00005f3d 	.word	0x00005f3d

00006490 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    6490:	b480      	push	{r7}
    6492:	b083      	sub	sp, #12
    6494:	af00      	add	r7, sp, #0
    6496:	6078      	str	r0, [r7, #4]
    6498:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    649a:	687b      	ldr	r3, [r7, #4]
    649c:	683a      	ldr	r2, [r7, #0]
    649e:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    64a0:	bf00      	nop
    64a2:	370c      	adds	r7, #12
    64a4:	46bd      	mov	sp, r7
    64a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    64aa:	4770      	bx	lr

000064ac <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    64ac:	b580      	push	{r7, lr}
    64ae:	b082      	sub	sp, #8
    64b0:	af00      	add	r7, sp, #0
    64b2:	6078      	str	r0, [r7, #4]
    64b4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    64b6:	687b      	ldr	r3, [r7, #4]
    64b8:	683a      	ldr	r2, [r7, #0]
    64ba:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    64bc:	2104      	movs	r1, #4
    64be:	6878      	ldr	r0, [r7, #4]
    64c0:	4b02      	ldr	r3, [pc, #8]	; (64cc <hri_sercomi2cm_write_DATA_reg+0x20>)
    64c2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    64c4:	bf00      	nop
    64c6:	3708      	adds	r7, #8
    64c8:	46bd      	mov	sp, r7
    64ca:	bd80      	pop	{r7, pc}
    64cc:	00005f3d 	.word	0x00005f3d

000064d0 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    64d0:	b580      	push	{r7, lr}
    64d2:	b082      	sub	sp, #8
    64d4:	af00      	add	r7, sp, #0
    64d6:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    64d8:	2104      	movs	r1, #4
    64da:	6878      	ldr	r0, [r7, #4]
    64dc:	4b03      	ldr	r3, [pc, #12]	; (64ec <hri_sercomi2cm_read_DATA_reg+0x1c>)
    64de:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    64e0:	687b      	ldr	r3, [r7, #4]
    64e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    64e4:	4618      	mov	r0, r3
    64e6:	3708      	adds	r7, #8
    64e8:	46bd      	mov	sp, r7
    64ea:	bd80      	pop	{r7, pc}
    64ec:	00005f3d 	.word	0x00005f3d

000064f0 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    64f0:	b480      	push	{r7}
    64f2:	b083      	sub	sp, #12
    64f4:	af00      	add	r7, sp, #0
    64f6:	6078      	str	r0, [r7, #4]
    64f8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    64fa:	687b      	ldr	r3, [r7, #4]
    64fc:	683a      	ldr	r2, [r7, #0]
    64fe:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6500:	bf00      	nop
    6502:	370c      	adds	r7, #12
    6504:	46bd      	mov	sp, r7
    6506:	f85d 7b04 	ldr.w	r7, [sp], #4
    650a:	4770      	bx	lr

0000650c <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    650c:	b480      	push	{r7}
    650e:	b083      	sub	sp, #12
    6510:	af00      	add	r7, sp, #0
    6512:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    6514:	687b      	ldr	r3, [r7, #4]
    6516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    6518:	4618      	mov	r0, r3
    651a:	370c      	adds	r7, #12
    651c:	46bd      	mov	sp, r7
    651e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6522:	4770      	bx	lr

00006524 <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    6524:	b480      	push	{r7}
    6526:	b083      	sub	sp, #12
    6528:	af00      	add	r7, sp, #0
    652a:	6078      	str	r0, [r7, #4]
    652c:	460b      	mov	r3, r1
    652e:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    6530:	687b      	ldr	r3, [r7, #4]
    6532:	78fa      	ldrb	r2, [r7, #3]
    6534:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6538:	bf00      	nop
    653a:	370c      	adds	r7, #12
    653c:	46bd      	mov	sp, r7
    653e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6542:	4770      	bx	lr

00006544 <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    6544:	b480      	push	{r7}
    6546:	b083      	sub	sp, #12
    6548:	af00      	add	r7, sp, #0
    654a:	6078      	str	r0, [r7, #4]
    654c:	460b      	mov	r3, r1
    654e:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    6550:	687b      	ldr	r3, [r7, #4]
    6552:	887a      	ldrh	r2, [r7, #2]
    6554:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6556:	bf00      	nop
    6558:	370c      	adds	r7, #12
    655a:	46bd      	mov	sp, r7
    655c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6560:	4770      	bx	lr
	...

00006564 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    6564:	b580      	push	{r7, lr}
    6566:	b082      	sub	sp, #8
    6568:	af00      	add	r7, sp, #0
    656a:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    656c:	2104      	movs	r1, #4
    656e:	6878      	ldr	r0, [r7, #4]
    6570:	4b04      	ldr	r3, [pc, #16]	; (6584 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    6572:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    6574:	687b      	ldr	r3, [r7, #4]
    6576:	8b5b      	ldrh	r3, [r3, #26]
    6578:	b29b      	uxth	r3, r3
}
    657a:	4618      	mov	r0, r3
    657c:	3708      	adds	r7, #8
    657e:	46bd      	mov	sp, r7
    6580:	bd80      	pop	{r7, pc}
    6582:	bf00      	nop
    6584:	00005f3d 	.word	0x00005f3d

00006588 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    6588:	b4b0      	push	{r4, r5, r7}
    658a:	b08d      	sub	sp, #52	; 0x34
    658c:	af00      	add	r7, sp, #0
    658e:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    6590:	4b13      	ldr	r3, [pc, #76]	; (65e0 <_sercom_get_hardware_index+0x58>)
    6592:	f107 040c 	add.w	r4, r7, #12
    6596:	461d      	mov	r5, r3
    6598:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    659a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    659c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    65a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    65a4:	2300      	movs	r3, #0
    65a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    65a8:	e010      	b.n	65cc <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    65aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    65ac:	009b      	lsls	r3, r3, #2
    65ae:	f107 0230 	add.w	r2, r7, #48	; 0x30
    65b2:	4413      	add	r3, r2
    65b4:	f853 3c24 	ldr.w	r3, [r3, #-36]
    65b8:	461a      	mov	r2, r3
    65ba:	687b      	ldr	r3, [r7, #4]
    65bc:	429a      	cmp	r2, r3
    65be:	d102      	bne.n	65c6 <_sercom_get_hardware_index+0x3e>
			return i;
    65c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    65c2:	b2db      	uxtb	r3, r3
    65c4:	e006      	b.n	65d4 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    65c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    65c8:	3301      	adds	r3, #1
    65ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    65cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    65ce:	2b07      	cmp	r3, #7
    65d0:	d9eb      	bls.n	65aa <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    65d2:	2300      	movs	r3, #0
}
    65d4:	4618      	mov	r0, r3
    65d6:	3734      	adds	r7, #52	; 0x34
    65d8:	46bd      	mov	sp, r7
    65da:	bcb0      	pop	{r4, r5, r7}
    65dc:	4770      	bx	lr
    65de:	bf00      	nop
    65e0:	0000e598 	.word	0x0000e598

000065e4 <_sercom_init_irq_param>:

/**
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{
    65e4:	b480      	push	{r7}
    65e6:	b083      	sub	sp, #12
    65e8:	af00      	add	r7, sp, #0
    65ea:	6078      	str	r0, [r7, #4]
    65ec:	6039      	str	r1, [r7, #0]

	if (hw == SERCOM4) {
    65ee:	687b      	ldr	r3, [r7, #4]
    65f0:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
    65f4:	d102      	bne.n	65fc <_sercom_init_irq_param+0x18>
		_sercom4_dev = (struct _spi_async_dev *)dev;
    65f6:	4a0b      	ldr	r2, [pc, #44]	; (6624 <_sercom_init_irq_param+0x40>)
    65f8:	683b      	ldr	r3, [r7, #0]
    65fa:	6013      	str	r3, [r2, #0]
	}

	if (hw == SERCOM5) {
    65fc:	687b      	ldr	r3, [r7, #4]
    65fe:	4a0a      	ldr	r2, [pc, #40]	; (6628 <_sercom_init_irq_param+0x44>)
    6600:	4293      	cmp	r3, r2
    6602:	d102      	bne.n	660a <_sercom_init_irq_param+0x26>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    6604:	4a09      	ldr	r2, [pc, #36]	; (662c <_sercom_init_irq_param+0x48>)
    6606:	683b      	ldr	r3, [r7, #0]
    6608:	6013      	str	r3, [r2, #0]
	}

	if (hw == SERCOM7) {
    660a:	687b      	ldr	r3, [r7, #4]
    660c:	4a08      	ldr	r2, [pc, #32]	; (6630 <_sercom_init_irq_param+0x4c>)
    660e:	4293      	cmp	r3, r2
    6610:	d102      	bne.n	6618 <_sercom_init_irq_param+0x34>
		_sercom7_dev = (struct _i2c_m_async_device *)dev;
    6612:	4a08      	ldr	r2, [pc, #32]	; (6634 <_sercom_init_irq_param+0x50>)
    6614:	683b      	ldr	r3, [r7, #0]
    6616:	6013      	str	r3, [r2, #0]
	}
}
    6618:	bf00      	nop
    661a:	370c      	adds	r7, #12
    661c:	46bd      	mov	sp, r7
    661e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6622:	4770      	bx	lr
    6624:	20000760 	.word	0x20000760
    6628:	43000400 	.word	0x43000400
    662c:	20000764 	.word	0x20000764
    6630:	43000c00 	.word	0x43000c00
    6634:	20000768 	.word	0x20000768

00006638 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    6638:	b580      	push	{r7, lr}
    663a:	b084      	sub	sp, #16
    663c:	af00      	add	r7, sp, #0
    663e:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    6640:	6878      	ldr	r0, [r7, #4]
    6642:	4b13      	ldr	r3, [pc, #76]	; (6690 <_get_i2cm_index+0x58>)
    6644:	4798      	blx	r3
    6646:	4603      	mov	r3, r0
    6648:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    664a:	2300      	movs	r3, #0
    664c:	73fb      	strb	r3, [r7, #15]
    664e:	e010      	b.n	6672 <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    6650:	7bfa      	ldrb	r2, [r7, #15]
    6652:	4910      	ldr	r1, [pc, #64]	; (6694 <_get_i2cm_index+0x5c>)
    6654:	4613      	mov	r3, r2
    6656:	005b      	lsls	r3, r3, #1
    6658:	4413      	add	r3, r2
    665a:	00db      	lsls	r3, r3, #3
    665c:	440b      	add	r3, r1
    665e:	781b      	ldrb	r3, [r3, #0]
    6660:	7bba      	ldrb	r2, [r7, #14]
    6662:	429a      	cmp	r2, r3
    6664:	d102      	bne.n	666c <_get_i2cm_index+0x34>
			return i;
    6666:	f997 300f 	ldrsb.w	r3, [r7, #15]
    666a:	e00d      	b.n	6688 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    666c:	7bfb      	ldrb	r3, [r7, #15]
    666e:	3301      	adds	r3, #1
    6670:	73fb      	strb	r3, [r7, #15]
    6672:	7bfb      	ldrb	r3, [r7, #15]
    6674:	2b01      	cmp	r3, #1
    6676:	d9eb      	bls.n	6650 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    6678:	f44f 726e 	mov.w	r2, #952	; 0x3b8
    667c:	4906      	ldr	r1, [pc, #24]	; (6698 <_get_i2cm_index+0x60>)
    667e:	2000      	movs	r0, #0
    6680:	4b06      	ldr	r3, [pc, #24]	; (669c <_get_i2cm_index+0x64>)
    6682:	4798      	blx	r3
	return -1;
    6684:	f04f 33ff 	mov.w	r3, #4294967295
}
    6688:	4618      	mov	r0, r3
    668a:	3710      	adds	r7, #16
    668c:	46bd      	mov	sp, r7
    668e:	bd80      	pop	{r7, pc}
    6690:	00006589 	.word	0x00006589
    6694:	20000018 	.word	0x20000018
    6698:	0000e57c 	.word	0x0000e57c
    669c:	000034fd 	.word	0x000034fd

000066a0 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    66a0:	b580      	push	{r7, lr}
    66a2:	b082      	sub	sp, #8
    66a4:	af00      	add	r7, sp, #0
    66a6:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    66a8:	2103      	movs	r1, #3
    66aa:	6878      	ldr	r0, [r7, #4]
    66ac:	4b02      	ldr	r3, [pc, #8]	; (66b8 <_sercom_i2c_send_stop+0x18>)
    66ae:	4798      	blx	r3
}
    66b0:	bf00      	nop
    66b2:	3708      	adds	r7, #8
    66b4:	46bd      	mov	sp, r7
    66b6:	bd80      	pop	{r7, pc}
    66b8:	00006359 	.word	0x00006359

000066bc <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    66bc:	b590      	push	{r4, r7, lr}
    66be:	b087      	sub	sp, #28
    66c0:	af00      	add	r7, sp, #0
    66c2:	60f8      	str	r0, [r7, #12]
    66c4:	60b9      	str	r1, [r7, #8]
    66c6:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    66c8:	68f8      	ldr	r0, [r7, #12]
    66ca:	4b7d      	ldr	r3, [pc, #500]	; (68c0 <_sercom_i2c_sync_analyse_flags+0x204>)
    66cc:	4798      	blx	r3
    66ce:	4603      	mov	r3, r0
    66d0:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    66d2:	68f8      	ldr	r0, [r7, #12]
    66d4:	4b7b      	ldr	r3, [pc, #492]	; (68c4 <_sercom_i2c_sync_analyse_flags+0x208>)
    66d6:	4798      	blx	r3
    66d8:	4603      	mov	r3, r0
    66da:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    66dc:	68bb      	ldr	r3, [r7, #8]
    66de:	f003 0301 	and.w	r3, r3, #1
    66e2:	2b00      	cmp	r3, #0
    66e4:	f000 8095 	beq.w	6812 <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    66e8:	8a7b      	ldrh	r3, [r7, #18]
    66ea:	f003 0302 	and.w	r3, r3, #2
    66ee:	2b00      	cmp	r3, #0
    66f0:	d01d      	beq.n	672e <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    66f2:	68f8      	ldr	r0, [r7, #12]
    66f4:	4b74      	ldr	r3, [pc, #464]	; (68c8 <_sercom_i2c_sync_analyse_flags+0x20c>)
    66f6:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    66f8:	687b      	ldr	r3, [r7, #4]
    66fa:	885b      	ldrh	r3, [r3, #2]
    66fc:	b29b      	uxth	r3, r3
    66fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    6702:	b29a      	uxth	r2, r3
    6704:	687b      	ldr	r3, [r7, #4]
    6706:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    6708:	687b      	ldr	r3, [r7, #4]
    670a:	885b      	ldrh	r3, [r3, #2]
    670c:	b29b      	uxth	r3, r3
    670e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6712:	b29a      	uxth	r2, r3
    6714:	687b      	ldr	r3, [r7, #4]
    6716:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    6718:	8a7b      	ldrh	r3, [r7, #18]
    671a:	f003 0301 	and.w	r3, r3, #1
    671e:	2b00      	cmp	r3, #0
    6720:	d002      	beq.n	6728 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    6722:	f06f 0304 	mvn.w	r3, #4
    6726:	e0c6      	b.n	68b6 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    6728:	f06f 0303 	mvn.w	r3, #3
    672c:	e0c3      	b.n	68b6 <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    672e:	8a7b      	ldrh	r3, [r7, #18]
    6730:	f003 0304 	and.w	r3, r3, #4
    6734:	2b00      	cmp	r3, #0
    6736:	d01f      	beq.n	6778 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    6738:	687b      	ldr	r3, [r7, #4]
    673a:	685b      	ldr	r3, [r3, #4]
    673c:	2b00      	cmp	r3, #0
    673e:	dd07      	ble.n	6750 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    6740:	687b      	ldr	r3, [r7, #4]
    6742:	885b      	ldrh	r3, [r3, #2]
    6744:	b29b      	uxth	r3, r3
    6746:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    674a:	b29a      	uxth	r2, r3
    674c:	687b      	ldr	r3, [r7, #4]
    674e:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    6750:	687b      	ldr	r3, [r7, #4]
    6752:	885b      	ldrh	r3, [r3, #2]
    6754:	b29b      	uxth	r3, r3
    6756:	b21b      	sxth	r3, r3
    6758:	2b00      	cmp	r3, #0
    675a:	da02      	bge.n	6762 <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    675c:	68f8      	ldr	r0, [r7, #12]
    675e:	4b5b      	ldr	r3, [pc, #364]	; (68cc <_sercom_i2c_sync_analyse_flags+0x210>)
    6760:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6762:	687b      	ldr	r3, [r7, #4]
    6764:	885b      	ldrh	r3, [r3, #2]
    6766:	b29b      	uxth	r3, r3
    6768:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    676c:	b29a      	uxth	r2, r3
    676e:	687b      	ldr	r3, [r7, #4]
    6770:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    6772:	f06f 0301 	mvn.w	r3, #1
    6776:	e09e      	b.n	68b6 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    6778:	687b      	ldr	r3, [r7, #4]
    677a:	885b      	ldrh	r3, [r3, #2]
    677c:	b29b      	uxth	r3, r3
    677e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6782:	2b00      	cmp	r3, #0
    6784:	d01c      	beq.n	67c0 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    6786:	687b      	ldr	r3, [r7, #4]
    6788:	881b      	ldrh	r3, [r3, #0]
    678a:	121b      	asrs	r3, r3, #8
    678c:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    678e:	f003 0406 	and.w	r4, r3, #6
    6792:	68f8      	ldr	r0, [r7, #12]
    6794:	4b4e      	ldr	r3, [pc, #312]	; (68d0 <_sercom_i2c_sync_analyse_flags+0x214>)
    6796:	4798      	blx	r3
    6798:	4603      	mov	r3, r0
    679a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    679e:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    67a0:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    67a4:	4619      	mov	r1, r3
    67a6:	68f8      	ldr	r0, [r7, #12]
    67a8:	4b4a      	ldr	r3, [pc, #296]	; (68d4 <_sercom_i2c_sync_analyse_flags+0x218>)
    67aa:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    67ac:	687b      	ldr	r3, [r7, #4]
    67ae:	885b      	ldrh	r3, [r3, #2]
    67b0:	b29b      	uxth	r3, r3
    67b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    67b6:	b29a      	uxth	r2, r3
    67b8:	687b      	ldr	r3, [r7, #4]
    67ba:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    67bc:	2300      	movs	r3, #0
    67be:	e07a      	b.n	68b6 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    67c0:	687b      	ldr	r3, [r7, #4]
    67c2:	685b      	ldr	r3, [r3, #4]
    67c4:	2b00      	cmp	r3, #0
    67c6:	d111      	bne.n	67ec <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    67c8:	687b      	ldr	r3, [r7, #4]
    67ca:	885b      	ldrh	r3, [r3, #2]
    67cc:	b29b      	uxth	r3, r3
    67ce:	b21b      	sxth	r3, r3
    67d0:	2b00      	cmp	r3, #0
    67d2:	da02      	bge.n	67da <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    67d4:	68f8      	ldr	r0, [r7, #12]
    67d6:	4b3d      	ldr	r3, [pc, #244]	; (68cc <_sercom_i2c_sync_analyse_flags+0x210>)
    67d8:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    67da:	687b      	ldr	r3, [r7, #4]
    67dc:	885b      	ldrh	r3, [r3, #2]
    67de:	b29b      	uxth	r3, r3
    67e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    67e4:	b29a      	uxth	r2, r3
    67e6:	687b      	ldr	r3, [r7, #4]
    67e8:	805a      	strh	r2, [r3, #2]
    67ea:	e010      	b.n	680e <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    67ec:	687b      	ldr	r3, [r7, #4]
    67ee:	689b      	ldr	r3, [r3, #8]
    67f0:	781b      	ldrb	r3, [r3, #0]
    67f2:	4619      	mov	r1, r3
    67f4:	68f8      	ldr	r0, [r7, #12]
    67f6:	4b38      	ldr	r3, [pc, #224]	; (68d8 <_sercom_i2c_sync_analyse_flags+0x21c>)
    67f8:	4798      	blx	r3
				msg->buffer++;
    67fa:	687b      	ldr	r3, [r7, #4]
    67fc:	689b      	ldr	r3, [r3, #8]
    67fe:	1c5a      	adds	r2, r3, #1
    6800:	687b      	ldr	r3, [r7, #4]
    6802:	609a      	str	r2, [r3, #8]
				msg->len--;
    6804:	687b      	ldr	r3, [r7, #4]
    6806:	685b      	ldr	r3, [r3, #4]
    6808:	1e5a      	subs	r2, r3, #1
    680a:	687b      	ldr	r3, [r7, #4]
    680c:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    680e:	2300      	movs	r3, #0
    6810:	e051      	b.n	68b6 <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    6812:	68bb      	ldr	r3, [r7, #8]
    6814:	f003 0302 	and.w	r3, r3, #2
    6818:	2b00      	cmp	r3, #0
    681a:	d04b      	beq.n	68b4 <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    681c:	687b      	ldr	r3, [r7, #4]
    681e:	685b      	ldr	r3, [r3, #4]
    6820:	2b00      	cmp	r3, #0
    6822:	d041      	beq.n	68a8 <_sercom_i2c_sync_analyse_flags+0x1ec>
    6824:	8a7b      	ldrh	r3, [r7, #18]
    6826:	f003 0304 	and.w	r3, r3, #4
    682a:	2b00      	cmp	r3, #0
    682c:	d13c      	bne.n	68a8 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    682e:	687b      	ldr	r3, [r7, #4]
    6830:	685b      	ldr	r3, [r3, #4]
    6832:	1e5a      	subs	r2, r3, #1
    6834:	687b      	ldr	r3, [r7, #4]
    6836:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    6838:	687b      	ldr	r3, [r7, #4]
    683a:	685b      	ldr	r3, [r3, #4]
    683c:	2b00      	cmp	r3, #0
    683e:	d102      	bne.n	6846 <_sercom_i2c_sync_analyse_flags+0x18a>
    6840:	697b      	ldr	r3, [r7, #20]
    6842:	2b00      	cmp	r3, #0
    6844:	d006      	beq.n	6854 <_sercom_i2c_sync_analyse_flags+0x198>
    6846:	687b      	ldr	r3, [r7, #4]
    6848:	685b      	ldr	r3, [r3, #4]
    684a:	2b01      	cmp	r3, #1
    684c:	d105      	bne.n	685a <_sercom_i2c_sync_analyse_flags+0x19e>
    684e:	697b      	ldr	r3, [r7, #20]
    6850:	2b00      	cmp	r3, #0
    6852:	d002      	beq.n	685a <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    6854:	68f8      	ldr	r0, [r7, #12]
    6856:	4b21      	ldr	r3, [pc, #132]	; (68dc <_sercom_i2c_sync_analyse_flags+0x220>)
    6858:	4798      	blx	r3
			}

			if (msg->len == 0) {
    685a:	687b      	ldr	r3, [r7, #4]
    685c:	685b      	ldr	r3, [r3, #4]
    685e:	2b00      	cmp	r3, #0
    6860:	d113      	bne.n	688a <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    6862:	687b      	ldr	r3, [r7, #4]
    6864:	885b      	ldrh	r3, [r3, #2]
    6866:	b29b      	uxth	r3, r3
    6868:	b21b      	sxth	r3, r3
    686a:	2b00      	cmp	r3, #0
    686c:	da05      	bge.n	687a <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    686e:	68f8      	ldr	r0, [r7, #12]
    6870:	4b1b      	ldr	r3, [pc, #108]	; (68e0 <_sercom_i2c_sync_analyse_flags+0x224>)
    6872:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    6874:	68f8      	ldr	r0, [r7, #12]
    6876:	4b15      	ldr	r3, [pc, #84]	; (68cc <_sercom_i2c_sync_analyse_flags+0x210>)
    6878:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    687a:	687b      	ldr	r3, [r7, #4]
    687c:	885b      	ldrh	r3, [r3, #2]
    687e:	b29b      	uxth	r3, r3
    6880:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6884:	b29a      	uxth	r2, r3
    6886:	687b      	ldr	r3, [r7, #4]
    6888:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    688a:	687b      	ldr	r3, [r7, #4]
    688c:	689c      	ldr	r4, [r3, #8]
    688e:	1c62      	adds	r2, r4, #1
    6890:	687b      	ldr	r3, [r7, #4]
    6892:	609a      	str	r2, [r3, #8]
    6894:	68f8      	ldr	r0, [r7, #12]
    6896:	4b13      	ldr	r3, [pc, #76]	; (68e4 <_sercom_i2c_sync_analyse_flags+0x228>)
    6898:	4798      	blx	r3
    689a:	4603      	mov	r3, r0
    689c:	b2db      	uxtb	r3, r3
    689e:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    68a0:	68f8      	ldr	r0, [r7, #12]
    68a2:	4b11      	ldr	r3, [pc, #68]	; (68e8 <_sercom_i2c_sync_analyse_flags+0x22c>)
    68a4:	4798      	blx	r3
    68a6:	e005      	b.n	68b4 <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    68a8:	68f8      	ldr	r0, [r7, #12]
    68aa:	4b0f      	ldr	r3, [pc, #60]	; (68e8 <_sercom_i2c_sync_analyse_flags+0x22c>)
    68ac:	4798      	blx	r3
			return I2C_NACK;
    68ae:	f06f 0301 	mvn.w	r3, #1
    68b2:	e000      	b.n	68b6 <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    68b4:	2300      	movs	r3, #0
}
    68b6:	4618      	mov	r0, r3
    68b8:	371c      	adds	r7, #28
    68ba:	46bd      	mov	sp, r7
    68bc:	bd90      	pop	{r4, r7, pc}
    68be:	bf00      	nop
    68c0:	00006181 	.word	0x00006181
    68c4:	00006565 	.word	0x00006565
    68c8:	00005fd5 	.word	0x00005fd5
    68cc:	000066a1 	.word	0x000066a1
    68d0:	00006471 	.word	0x00006471
    68d4:	0000644d 	.word	0x0000644d
    68d8:	000064ad 	.word	0x000064ad
    68dc:	00006309 	.word	0x00006309
    68e0:	000062e1 	.word	0x000062e1
    68e4:	000064d1 	.word	0x000064d1
    68e8:	00005fef 	.word	0x00005fef

000068ec <_sercom_i2c_m_irq_handler>:
 * \internal Sercom i2c master interrupt handler
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static void _sercom_i2c_m_irq_handler(struct _i2c_m_async_device *i2c_dev)
{
    68ec:	b580      	push	{r7, lr}
    68ee:	b086      	sub	sp, #24
    68f0:	af00      	add	r7, sp, #0
    68f2:	6078      	str	r0, [r7, #4]
	void *   hw    = i2c_dev->hw;
    68f4:	687b      	ldr	r3, [r7, #4]
    68f6:	691b      	ldr	r3, [r3, #16]
    68f8:	613b      	str	r3, [r7, #16]
	uint32_t flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    68fa:	6938      	ldr	r0, [r7, #16]
    68fc:	4b37      	ldr	r3, [pc, #220]	; (69dc <_sercom_i2c_m_irq_handler+0xf0>)
    68fe:	4798      	blx	r3
    6900:	4603      	mov	r3, r0
    6902:	60fb      	str	r3, [r7, #12]
	int32_t  ret   = I2C_OK;
    6904:	2300      	movs	r3, #0
    6906:	617b      	str	r3, [r7, #20]

	ASSERT(i2c_dev);
    6908:	687b      	ldr	r3, [r7, #4]
    690a:	2b00      	cmp	r3, #0
    690c:	bf14      	ite	ne
    690e:	2301      	movne	r3, #1
    6910:	2300      	moveq	r3, #0
    6912:	b2db      	uxtb	r3, r3
    6914:	f240 422a 	movw	r2, #1066	; 0x42a
    6918:	4931      	ldr	r1, [pc, #196]	; (69e0 <_sercom_i2c_m_irq_handler+0xf4>)
    691a:	4618      	mov	r0, r3
    691c:	4b31      	ldr	r3, [pc, #196]	; (69e4 <_sercom_i2c_m_irq_handler+0xf8>)
    691e:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    6920:	687b      	ldr	r3, [r7, #4]
    6922:	691b      	ldr	r3, [r3, #16]
    6924:	2b00      	cmp	r3, #0
    6926:	bf14      	ite	ne
    6928:	2301      	movne	r3, #1
    692a:	2300      	moveq	r3, #0
    692c:	b2db      	uxtb	r3, r3
    692e:	f240 422b 	movw	r2, #1067	; 0x42b
    6932:	492b      	ldr	r1, [pc, #172]	; (69e0 <_sercom_i2c_m_irq_handler+0xf4>)
    6934:	4618      	mov	r0, r3
    6936:	4b2b      	ldr	r3, [pc, #172]	; (69e4 <_sercom_i2c_m_irq_handler+0xf8>)
    6938:	4798      	blx	r3

	while (!(flags & ERROR_FLAG)) {
    693a:	bf00      	nop
    693c:	68fb      	ldr	r3, [r7, #12]
    693e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    6942:	2b00      	cmp	r3, #0
    6944:	d126      	bne.n	6994 <_sercom_i2c_m_irq_handler+0xa8>
		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    6946:	687b      	ldr	r3, [r7, #4]
    6948:	461a      	mov	r2, r3
    694a:	68f9      	ldr	r1, [r7, #12]
    694c:	6938      	ldr	r0, [r7, #16]
    694e:	4b26      	ldr	r3, [pc, #152]	; (69e8 <_sercom_i2c_m_irq_handler+0xfc>)
    6950:	4798      	blx	r3
    6952:	6178      	str	r0, [r7, #20]

		if (ret != 0) {
    6954:	697b      	ldr	r3, [r7, #20]
    6956:	2b00      	cmp	r3, #0
    6958:	d11b      	bne.n	6992 <_sercom_i2c_m_irq_handler+0xa6>
			break;
		}

		/* app callback */
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    695a:	68fb      	ldr	r3, [r7, #12]
    695c:	f003 0301 	and.w	r3, r3, #1
    6960:	2b00      	cmp	r3, #0
    6962:	d008      	beq.n	6976 <_sercom_i2c_m_irq_handler+0x8a>
    6964:	687b      	ldr	r3, [r7, #4]
    6966:	699b      	ldr	r3, [r3, #24]
    6968:	2b00      	cmp	r3, #0
    696a:	d004      	beq.n	6976 <_sercom_i2c_m_irq_handler+0x8a>
			i2c_dev->cb.tx_complete(i2c_dev);
    696c:	687b      	ldr	r3, [r7, #4]
    696e:	699b      	ldr	r3, [r3, #24]
    6970:	6878      	ldr	r0, [r7, #4]
    6972:	4798      	blx	r3
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
			i2c_dev->cb.rx_complete(i2c_dev);
		}

		return;
    6974:	e02e      	b.n	69d4 <_sercom_i2c_m_irq_handler+0xe8>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    6976:	68fb      	ldr	r3, [r7, #12]
    6978:	f003 0302 	and.w	r3, r3, #2
    697c:	2b00      	cmp	r3, #0
    697e:	d029      	beq.n	69d4 <_sercom_i2c_m_irq_handler+0xe8>
    6980:	687b      	ldr	r3, [r7, #4]
    6982:	69db      	ldr	r3, [r3, #28]
    6984:	2b00      	cmp	r3, #0
    6986:	d025      	beq.n	69d4 <_sercom_i2c_m_irq_handler+0xe8>
			i2c_dev->cb.rx_complete(i2c_dev);
    6988:	687b      	ldr	r3, [r7, #4]
    698a:	69db      	ldr	r3, [r3, #28]
    698c:	6878      	ldr	r0, [r7, #4]
    698e:	4798      	blx	r3
		return;
    6990:	e020      	b.n	69d4 <_sercom_i2c_m_irq_handler+0xe8>
			break;
    6992:	bf00      	nop
	}

	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6994:	687b      	ldr	r3, [r7, #4]
    6996:	885b      	ldrh	r3, [r3, #2]
    6998:	b29b      	uxth	r3, r3
    699a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    699e:	b29a      	uxth	r2, r3
    69a0:	687b      	ldr	r3, [r7, #4]
    69a2:	805a      	strh	r2, [r3, #2]
	if (i2c_dev->cb.error) {
    69a4:	687b      	ldr	r3, [r7, #4]
    69a6:	695b      	ldr	r3, [r3, #20]
    69a8:	2b00      	cmp	r3, #0
    69aa:	d014      	beq.n	69d6 <_sercom_i2c_m_irq_handler+0xea>
		if (ret != I2C_OK) {
    69ac:	697b      	ldr	r3, [r7, #20]
    69ae:	2b00      	cmp	r3, #0
    69b0:	d005      	beq.n	69be <_sercom_i2c_m_irq_handler+0xd2>
			i2c_dev->cb.error(i2c_dev, ret);
    69b2:	687b      	ldr	r3, [r7, #4]
    69b4:	695b      	ldr	r3, [r3, #20]
    69b6:	6979      	ldr	r1, [r7, #20]
    69b8:	6878      	ldr	r0, [r7, #4]
    69ba:	4798      	blx	r3
    69bc:	e005      	b.n	69ca <_sercom_i2c_m_irq_handler+0xde>
		} else {
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    69be:	687b      	ldr	r3, [r7, #4]
    69c0:	695b      	ldr	r3, [r3, #20]
    69c2:	f06f 0104 	mvn.w	r1, #4
    69c6:	6878      	ldr	r0, [r7, #4]
    69c8:	4798      	blx	r3
		}
		hri_sercomi2cm_clear_INTFLAG_reg(hw, SERCOM_I2CM_INTFLAG_ERROR);
    69ca:	2180      	movs	r1, #128	; 0x80
    69cc:	6938      	ldr	r0, [r7, #16]
    69ce:	4b07      	ldr	r3, [pc, #28]	; (69ec <_sercom_i2c_m_irq_handler+0x100>)
    69d0:	4798      	blx	r3
    69d2:	e000      	b.n	69d6 <_sercom_i2c_m_irq_handler+0xea>
		return;
    69d4:	bf00      	nop
	}
}
    69d6:	3718      	adds	r7, #24
    69d8:	46bd      	mov	sp, r7
    69da:	bd80      	pop	{r7, pc}
    69dc:	00006009 	.word	0x00006009
    69e0:	0000e57c 	.word	0x0000e57c
    69e4:	000034fd 	.word	0x000034fd
    69e8:	000066bd 	.word	0x000066bd
    69ec:	00006023 	.word	0x00006023

000069f0 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    69f0:	b580      	push	{r7, lr}
    69f2:	b082      	sub	sp, #8
    69f4:	af00      	add	r7, sp, #0
    69f6:	6078      	str	r0, [r7, #4]
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    69f8:	6878      	ldr	r0, [r7, #4]
    69fa:	4b05      	ldr	r3, [pc, #20]	; (6a10 <_sercom_get_irq_num+0x20>)
    69fc:	4798      	blx	r3
    69fe:	4603      	mov	r3, r0
    6a00:	009b      	lsls	r3, r3, #2
    6a02:	b2db      	uxtb	r3, r3
    6a04:	332e      	adds	r3, #46	; 0x2e
    6a06:	b2db      	uxtb	r3, r3
}
    6a08:	4618      	mov	r0, r3
    6a0a:	3708      	adds	r7, #8
    6a0c:	46bd      	mov	sp, r7
    6a0e:	bd80      	pop	{r7, pc}
    6a10:	00006589 	.word	0x00006589

00006a14 <_i2c_m_async_init>:
 * \brief Initialize sercom i2c module to use in async mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_init(struct _i2c_m_async_device *const i2c_dev, void *const hw)
{
    6a14:	b580      	push	{r7, lr}
    6a16:	b086      	sub	sp, #24
    6a18:	af00      	add	r7, sp, #0
    6a1a:	6078      	str	r0, [r7, #4]
    6a1c:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(i2c_dev);
    6a1e:	687b      	ldr	r3, [r7, #4]
    6a20:	2b00      	cmp	r3, #0
    6a22:	bf14      	ite	ne
    6a24:	2301      	movne	r3, #1
    6a26:	2300      	moveq	r3, #0
    6a28:	b2db      	uxtb	r3, r3
    6a2a:	f240 429e 	movw	r2, #1182	; 0x49e
    6a2e:	491d      	ldr	r1, [pc, #116]	; (6aa4 <_i2c_m_async_init+0x90>)
    6a30:	4618      	mov	r0, r3
    6a32:	4b1d      	ldr	r3, [pc, #116]	; (6aa8 <_i2c_m_async_init+0x94>)
    6a34:	4798      	blx	r3

	i2c_dev->hw = hw;
    6a36:	687b      	ldr	r3, [r7, #4]
    6a38:	683a      	ldr	r2, [r7, #0]
    6a3a:	611a      	str	r2, [r3, #16]

	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    6a3c:	687b      	ldr	r3, [r7, #4]
    6a3e:	6839      	ldr	r1, [r7, #0]
    6a40:	4618      	mov	r0, r3
    6a42:	4b1a      	ldr	r3, [pc, #104]	; (6aac <_i2c_m_async_init+0x98>)
    6a44:	4798      	blx	r3
    6a46:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    6a48:	68fb      	ldr	r3, [r7, #12]
    6a4a:	2b00      	cmp	r3, #0
    6a4c:	d001      	beq.n	6a52 <_i2c_m_async_init+0x3e>
		return init_status;
    6a4e:	68fb      	ldr	r3, [r7, #12]
    6a50:	e024      	b.n	6a9c <_i2c_m_async_init+0x88>
	}

	_sercom_init_irq_param(hw, (void *)i2c_dev);
    6a52:	6879      	ldr	r1, [r7, #4]
    6a54:	6838      	ldr	r0, [r7, #0]
    6a56:	4b16      	ldr	r3, [pc, #88]	; (6ab0 <_i2c_m_async_init+0x9c>)
    6a58:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    6a5a:	6838      	ldr	r0, [r7, #0]
    6a5c:	4b15      	ldr	r3, [pc, #84]	; (6ab4 <_i2c_m_async_init+0xa0>)
    6a5e:	4798      	blx	r3
    6a60:	4603      	mov	r3, r0
    6a62:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    6a64:	2300      	movs	r3, #0
    6a66:	613b      	str	r3, [r7, #16]
    6a68:	e014      	b.n	6a94 <_i2c_m_async_init+0x80>
		NVIC_DisableIRQ((IRQn_Type)irq);
    6a6a:	7dfb      	ldrb	r3, [r7, #23]
    6a6c:	b21b      	sxth	r3, r3
    6a6e:	4618      	mov	r0, r3
    6a70:	4b11      	ldr	r3, [pc, #68]	; (6ab8 <_i2c_m_async_init+0xa4>)
    6a72:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    6a74:	7dfb      	ldrb	r3, [r7, #23]
    6a76:	b21b      	sxth	r3, r3
    6a78:	4618      	mov	r0, r3
    6a7a:	4b10      	ldr	r3, [pc, #64]	; (6abc <_i2c_m_async_init+0xa8>)
    6a7c:	4798      	blx	r3
		NVIC_EnableIRQ((IRQn_Type)irq);
    6a7e:	7dfb      	ldrb	r3, [r7, #23]
    6a80:	b21b      	sxth	r3, r3
    6a82:	4618      	mov	r0, r3
    6a84:	4b0e      	ldr	r3, [pc, #56]	; (6ac0 <_i2c_m_async_init+0xac>)
    6a86:	4798      	blx	r3
		irq++;
    6a88:	7dfb      	ldrb	r3, [r7, #23]
    6a8a:	3301      	adds	r3, #1
    6a8c:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    6a8e:	693b      	ldr	r3, [r7, #16]
    6a90:	3301      	adds	r3, #1
    6a92:	613b      	str	r3, [r7, #16]
    6a94:	693b      	ldr	r3, [r7, #16]
    6a96:	2b03      	cmp	r3, #3
    6a98:	d9e7      	bls.n	6a6a <_i2c_m_async_init+0x56>
	}
	return ERR_NONE;
    6a9a:	2300      	movs	r3, #0
}
    6a9c:	4618      	mov	r0, r3
    6a9e:	3718      	adds	r7, #24
    6aa0:	46bd      	mov	sp, r7
    6aa2:	bd80      	pop	{r7, pc}
    6aa4:	0000e57c 	.word	0x0000e57c
    6aa8:	000034fd 	.word	0x000034fd
    6aac:	00006cdd 	.word	0x00006cdd
    6ab0:	000065e5 	.word	0x000065e5
    6ab4:	000069f1 	.word	0x000069f1
    6ab8:	00005ebd 	.word	0x00005ebd
    6abc:	00005f01 	.word	0x00005f01
    6ac0:	00005e81 	.word	0x00005e81

00006ac4 <_sercom_i2c_send_address>:
 * \brief Transfer the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_send_address(struct _i2c_m_async_device *const i2c_dev)
{
    6ac4:	b590      	push	{r4, r7, lr}
    6ac6:	b087      	sub	sp, #28
    6ac8:	af00      	add	r7, sp, #0
    6aca:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    6acc:	687b      	ldr	r3, [r7, #4]
    6ace:	691b      	ldr	r3, [r3, #16]
    6ad0:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    6ad2:	687b      	ldr	r3, [r7, #4]
    6ad4:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    6ad6:	6978      	ldr	r0, [r7, #20]
    6ad8:	4b33      	ldr	r3, [pc, #204]	; (6ba8 <_sercom_i2c_send_address+0xe4>)
    6ada:	4798      	blx	r3
    6adc:	4603      	mov	r3, r0
    6ade:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    6ae0:	687b      	ldr	r3, [r7, #4]
    6ae2:	2b00      	cmp	r3, #0
    6ae4:	bf14      	ite	ne
    6ae6:	2301      	movne	r3, #1
    6ae8:	2300      	moveq	r3, #0
    6aea:	b2db      	uxtb	r3, r3
    6aec:	f240 42cc 	movw	r2, #1228	; 0x4cc
    6af0:	492e      	ldr	r1, [pc, #184]	; (6bac <_sercom_i2c_send_address+0xe8>)
    6af2:	4618      	mov	r0, r3
    6af4:	4b2e      	ldr	r3, [pc, #184]	; (6bb0 <_sercom_i2c_send_address+0xec>)
    6af6:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    6af8:	693b      	ldr	r3, [r7, #16]
    6afa:	685b      	ldr	r3, [r3, #4]
    6afc:	2b01      	cmp	r3, #1
    6afe:	d106      	bne.n	6b0e <_sercom_i2c_send_address+0x4a>
    6b00:	68fb      	ldr	r3, [r7, #12]
    6b02:	2b00      	cmp	r3, #0
    6b04:	d003      	beq.n	6b0e <_sercom_i2c_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    6b06:	6978      	ldr	r0, [r7, #20]
    6b08:	4b2a      	ldr	r3, [pc, #168]	; (6bb4 <_sercom_i2c_send_address+0xf0>)
    6b0a:	4798      	blx	r3
    6b0c:	e002      	b.n	6b14 <_sercom_i2c_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    6b0e:	6978      	ldr	r0, [r7, #20]
    6b10:	4b29      	ldr	r3, [pc, #164]	; (6bb8 <_sercom_i2c_send_address+0xf4>)
    6b12:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    6b14:	693b      	ldr	r3, [r7, #16]
    6b16:	881b      	ldrh	r3, [r3, #0]
    6b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6b1c:	2b00      	cmp	r3, #0
    6b1e:	d022      	beq.n	6b66 <_sercom_i2c_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    6b20:	693b      	ldr	r3, [r7, #16]
    6b22:	885b      	ldrh	r3, [r3, #2]
    6b24:	b29b      	uxth	r3, r3
    6b26:	f003 0301 	and.w	r3, r3, #1
    6b2a:	2b00      	cmp	r3, #0
    6b2c:	d007      	beq.n	6b3e <_sercom_i2c_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    6b2e:	693b      	ldr	r3, [r7, #16]
    6b30:	885b      	ldrh	r3, [r3, #2]
    6b32:	b29b      	uxth	r3, r3
    6b34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    6b38:	b29a      	uxth	r2, r3
    6b3a:	693b      	ldr	r3, [r7, #16]
    6b3c:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    6b3e:	693b      	ldr	r3, [r7, #16]
    6b40:	881b      	ldrh	r3, [r3, #0]
    6b42:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6b44:	f240 74fe 	movw	r4, #2046	; 0x7fe
    6b48:	401c      	ands	r4, r3
    6b4a:	6978      	ldr	r0, [r7, #20]
    6b4c:	4b1b      	ldr	r3, [pc, #108]	; (6bbc <_sercom_i2c_send_address+0xf8>)
    6b4e:	4798      	blx	r3
    6b50:	4603      	mov	r3, r0
    6b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    6b56:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    6b58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    6b5c:	4619      	mov	r1, r3
    6b5e:	6978      	ldr	r0, [r7, #20]
    6b60:	4b17      	ldr	r3, [pc, #92]	; (6bc0 <_sercom_i2c_send_address+0xfc>)
    6b62:	4798      	blx	r3
    6b64:	e01a      	b.n	6b9c <_sercom_i2c_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    6b66:	693b      	ldr	r3, [r7, #16]
    6b68:	881b      	ldrh	r3, [r3, #0]
    6b6a:	005b      	lsls	r3, r3, #1
    6b6c:	b2db      	uxtb	r3, r3
    6b6e:	693a      	ldr	r2, [r7, #16]
    6b70:	8852      	ldrh	r2, [r2, #2]
    6b72:	b292      	uxth	r2, r2
    6b74:	f002 0201 	and.w	r2, r2, #1
    6b78:	2a00      	cmp	r2, #0
    6b7a:	bf14      	ite	ne
    6b7c:	2201      	movne	r2, #1
    6b7e:	2200      	moveq	r2, #0
    6b80:	b2d2      	uxtb	r2, r2
    6b82:	4313      	orrs	r3, r2
    6b84:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6b86:	6978      	ldr	r0, [r7, #20]
    6b88:	4b0c      	ldr	r3, [pc, #48]	; (6bbc <_sercom_i2c_send_address+0xf8>)
    6b8a:	4798      	blx	r3
    6b8c:	4603      	mov	r3, r0
    6b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    6b92:	4323      	orrs	r3, r4
    6b94:	4619      	mov	r1, r3
    6b96:	6978      	ldr	r0, [r7, #20]
    6b98:	4b09      	ldr	r3, [pc, #36]	; (6bc0 <_sercom_i2c_send_address+0xfc>)
    6b9a:	4798      	blx	r3
	}

	return ERR_NONE;
    6b9c:	2300      	movs	r3, #0
}
    6b9e:	4618      	mov	r0, r3
    6ba0:	371c      	adds	r7, #28
    6ba2:	46bd      	mov	sp, r7
    6ba4:	bd90      	pop	{r4, r7, pc}
    6ba6:	bf00      	nop
    6ba8:	00006181 	.word	0x00006181
    6bac:	0000e57c 	.word	0x0000e57c
    6bb0:	000034fd 	.word	0x000034fd
    6bb4:	00006309 	.word	0x00006309
    6bb8:	00006331 	.word	0x00006331
    6bbc:	00006471 	.word	0x00006471
    6bc0:	0000644d 	.word	0x0000644d

00006bc4 <_i2c_m_async_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail, return the error code
 */
int32_t _i2c_m_async_transfer(struct _i2c_m_async_device *i2c_dev, struct _i2c_m_msg *msg)
{
    6bc4:	b580      	push	{r7, lr}
    6bc6:	b084      	sub	sp, #16
    6bc8:	af00      	add	r7, sp, #0
    6bca:	6078      	str	r0, [r7, #4]
    6bcc:	6039      	str	r1, [r7, #0]
	int ret;

	ASSERT(i2c_dev);
    6bce:	687b      	ldr	r3, [r7, #4]
    6bd0:	2b00      	cmp	r3, #0
    6bd2:	bf14      	ite	ne
    6bd4:	2301      	movne	r3, #1
    6bd6:	2300      	moveq	r3, #0
    6bd8:	b2db      	uxtb	r3, r3
    6bda:	f240 42f4 	movw	r2, #1268	; 0x4f4
    6bde:	492a      	ldr	r1, [pc, #168]	; (6c88 <_i2c_m_async_transfer+0xc4>)
    6be0:	4618      	mov	r0, r3
    6be2:	4b2a      	ldr	r3, [pc, #168]	; (6c8c <_i2c_m_async_transfer+0xc8>)
    6be4:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    6be6:	687b      	ldr	r3, [r7, #4]
    6be8:	691b      	ldr	r3, [r3, #16]
    6bea:	2b00      	cmp	r3, #0
    6bec:	bf14      	ite	ne
    6bee:	2301      	movne	r3, #1
    6bf0:	2300      	moveq	r3, #0
    6bf2:	b2db      	uxtb	r3, r3
    6bf4:	f240 42f5 	movw	r2, #1269	; 0x4f5
    6bf8:	4923      	ldr	r1, [pc, #140]	; (6c88 <_i2c_m_async_transfer+0xc4>)
    6bfa:	4618      	mov	r0, r3
    6bfc:	4b23      	ldr	r3, [pc, #140]	; (6c8c <_i2c_m_async_transfer+0xc8>)
    6bfe:	4798      	blx	r3
	ASSERT(msg);
    6c00:	683b      	ldr	r3, [r7, #0]
    6c02:	2b00      	cmp	r3, #0
    6c04:	bf14      	ite	ne
    6c06:	2301      	movne	r3, #1
    6c08:	2300      	moveq	r3, #0
    6c0a:	b2db      	uxtb	r3, r3
    6c0c:	f240 42f6 	movw	r2, #1270	; 0x4f6
    6c10:	491d      	ldr	r1, [pc, #116]	; (6c88 <_i2c_m_async_transfer+0xc4>)
    6c12:	4618      	mov	r0, r3
    6c14:	4b1d      	ldr	r3, [pc, #116]	; (6c8c <_i2c_m_async_transfer+0xc8>)
    6c16:	4798      	blx	r3

	if (msg->len == 0) {
    6c18:	683b      	ldr	r3, [r7, #0]
    6c1a:	685b      	ldr	r3, [r3, #4]
    6c1c:	2b00      	cmp	r3, #0
    6c1e:	d101      	bne.n	6c24 <_i2c_m_async_transfer+0x60>
		return ERR_NONE;
    6c20:	2300      	movs	r3, #0
    6c22:	e02d      	b.n	6c80 <_i2c_m_async_transfer+0xbc>
	}

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    6c24:	687b      	ldr	r3, [r7, #4]
    6c26:	885b      	ldrh	r3, [r3, #2]
    6c28:	b29b      	uxth	r3, r3
    6c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6c2e:	2b00      	cmp	r3, #0
    6c30:	d002      	beq.n	6c38 <_i2c_m_async_transfer+0x74>
		return ERR_BUSY;
    6c32:	f06f 0303 	mvn.w	r3, #3
    6c36:	e023      	b.n	6c80 <_i2c_m_async_transfer+0xbc>
	}

	msg->flags |= I2C_M_BUSY;
    6c38:	683b      	ldr	r3, [r7, #0]
    6c3a:	885b      	ldrh	r3, [r3, #2]
    6c3c:	b29b      	uxth	r3, r3
    6c3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6c42:	b29a      	uxth	r2, r3
    6c44:	683b      	ldr	r3, [r7, #0]
    6c46:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    6c48:	687b      	ldr	r3, [r7, #4]
    6c4a:	683a      	ldr	r2, [r7, #0]
    6c4c:	ca07      	ldmia	r2, {r0, r1, r2}
    6c4e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    6c52:	687b      	ldr	r3, [r7, #4]
    6c54:	691b      	ldr	r3, [r3, #16]
    6c56:	4618      	mov	r0, r3
    6c58:	4b0d      	ldr	r3, [pc, #52]	; (6c90 <_i2c_m_async_transfer+0xcc>)
    6c5a:	4798      	blx	r3

	ret = _sercom_i2c_send_address(i2c_dev);
    6c5c:	6878      	ldr	r0, [r7, #4]
    6c5e:	4b0d      	ldr	r3, [pc, #52]	; (6c94 <_i2c_m_async_transfer+0xd0>)
    6c60:	4798      	blx	r3
    6c62:	60f8      	str	r0, [r7, #12]

	if (ret) {
    6c64:	68fb      	ldr	r3, [r7, #12]
    6c66:	2b00      	cmp	r3, #0
    6c68:	d009      	beq.n	6c7e <_i2c_m_async_transfer+0xba>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6c6a:	687b      	ldr	r3, [r7, #4]
    6c6c:	885b      	ldrh	r3, [r3, #2]
    6c6e:	b29b      	uxth	r3, r3
    6c70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6c74:	b29a      	uxth	r2, r3
    6c76:	687b      	ldr	r3, [r7, #4]
    6c78:	805a      	strh	r2, [r3, #2]

		return ret;
    6c7a:	68fb      	ldr	r3, [r7, #12]
    6c7c:	e000      	b.n	6c80 <_i2c_m_async_transfer+0xbc>
	}

	return ERR_NONE;
    6c7e:	2300      	movs	r3, #0
}
    6c80:	4618      	mov	r0, r3
    6c82:	3710      	adds	r7, #16
    6c84:	46bd      	mov	sp, r7
    6c86:	bd80      	pop	{r7, pc}
    6c88:	0000e57c 	.word	0x0000e57c
    6c8c:	000034fd 	.word	0x000034fd
    6c90:	000062b9 	.word	0x000062b9
    6c94:	00006ac5 	.word	0x00006ac5

00006c98 <_i2c_m_async_register_callback>:
 * \param[in] type The callback type
 * \param[in] func The callback function pointer
 */
int32_t _i2c_m_async_register_callback(struct _i2c_m_async_device *const i2c_dev, enum _i2c_m_async_callback_type type,
                                       FUNC_PTR func)
{
    6c98:	b480      	push	{r7}
    6c9a:	b085      	sub	sp, #20
    6c9c:	af00      	add	r7, sp, #0
    6c9e:	60f8      	str	r0, [r7, #12]
    6ca0:	460b      	mov	r3, r1
    6ca2:	607a      	str	r2, [r7, #4]
    6ca4:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    6ca6:	7afb      	ldrb	r3, [r7, #11]
    6ca8:	2b01      	cmp	r3, #1
    6caa:	d008      	beq.n	6cbe <_i2c_m_async_register_callback+0x26>
    6cac:	2b02      	cmp	r3, #2
    6cae:	d00a      	beq.n	6cc6 <_i2c_m_async_register_callback+0x2e>
    6cb0:	2b00      	cmp	r3, #0
    6cb2:	d000      	beq.n	6cb6 <_i2c_m_async_register_callback+0x1e>
	case I2C_M_ASYNC_DEVICE_RX_COMPLETE:
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
		break;
	default:
		/* error */
		break;
    6cb4:	e00b      	b.n	6cce <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    6cb6:	68fb      	ldr	r3, [r7, #12]
    6cb8:	687a      	ldr	r2, [r7, #4]
    6cba:	615a      	str	r2, [r3, #20]
		break;
    6cbc:	e007      	b.n	6cce <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    6cbe:	68fb      	ldr	r3, [r7, #12]
    6cc0:	687a      	ldr	r2, [r7, #4]
    6cc2:	619a      	str	r2, [r3, #24]
		break;
    6cc4:	e003      	b.n	6cce <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    6cc6:	68fb      	ldr	r3, [r7, #12]
    6cc8:	687a      	ldr	r2, [r7, #4]
    6cca:	61da      	str	r2, [r3, #28]
		break;
    6ccc:	bf00      	nop
	}

	return ERR_NONE;
    6cce:	2300      	movs	r3, #0
}
    6cd0:	4618      	mov	r0, r3
    6cd2:	3714      	adds	r7, #20
    6cd4:	46bd      	mov	sp, r7
    6cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    6cda:	4770      	bx	lr

00006cdc <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    6cdc:	b580      	push	{r7, lr}
    6cde:	b084      	sub	sp, #16
    6ce0:	af00      	add	r7, sp, #0
    6ce2:	6078      	str	r0, [r7, #4]
    6ce4:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    6ce6:	6838      	ldr	r0, [r7, #0]
    6ce8:	4b42      	ldr	r3, [pc, #264]	; (6df4 <_i2c_m_sync_init_impl+0x118>)
    6cea:	4798      	blx	r3
    6cec:	4603      	mov	r3, r0
    6cee:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    6cf0:	2101      	movs	r1, #1
    6cf2:	6838      	ldr	r0, [r7, #0]
    6cf4:	4b40      	ldr	r3, [pc, #256]	; (6df8 <_i2c_m_sync_init_impl+0x11c>)
    6cf6:	4798      	blx	r3
    6cf8:	4603      	mov	r3, r0
    6cfa:	f083 0301 	eor.w	r3, r3, #1
    6cfe:	b2db      	uxtb	r3, r3
    6d00:	2b00      	cmp	r3, #0
    6d02:	d020      	beq.n	6d46 <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    6d04:	7bfa      	ldrb	r2, [r7, #15]
    6d06:	493d      	ldr	r1, [pc, #244]	; (6dfc <_i2c_m_sync_init_impl+0x120>)
    6d08:	4613      	mov	r3, r2
    6d0a:	005b      	lsls	r3, r3, #1
    6d0c:	4413      	add	r3, r2
    6d0e:	00db      	lsls	r3, r3, #3
    6d10:	440b      	add	r3, r1
    6d12:	3304      	adds	r3, #4
    6d14:	681b      	ldr	r3, [r3, #0]
    6d16:	f003 031c 	and.w	r3, r3, #28
    6d1a:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    6d1c:	2102      	movs	r1, #2
    6d1e:	6838      	ldr	r0, [r7, #0]
    6d20:	4b37      	ldr	r3, [pc, #220]	; (6e00 <_i2c_m_sync_init_impl+0x124>)
    6d22:	4798      	blx	r3
    6d24:	4603      	mov	r3, r0
    6d26:	2b00      	cmp	r3, #0
    6d28:	d006      	beq.n	6d38 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    6d2a:	6838      	ldr	r0, [r7, #0]
    6d2c:	4b35      	ldr	r3, [pc, #212]	; (6e04 <_i2c_m_sync_init_impl+0x128>)
    6d2e:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    6d30:	2102      	movs	r1, #2
    6d32:	6838      	ldr	r0, [r7, #0]
    6d34:	4b34      	ldr	r3, [pc, #208]	; (6e08 <_i2c_m_sync_init_impl+0x12c>)
    6d36:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    6d38:	68bb      	ldr	r3, [r7, #8]
    6d3a:	f043 0301 	orr.w	r3, r3, #1
    6d3e:	4619      	mov	r1, r3
    6d40:	6838      	ldr	r0, [r7, #0]
    6d42:	4b32      	ldr	r3, [pc, #200]	; (6e0c <_i2c_m_sync_init_impl+0x130>)
    6d44:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    6d46:	2101      	movs	r1, #1
    6d48:	6838      	ldr	r0, [r7, #0]
    6d4a:	4b2f      	ldr	r3, [pc, #188]	; (6e08 <_i2c_m_sync_init_impl+0x12c>)
    6d4c:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    6d4e:	7bfa      	ldrb	r2, [r7, #15]
    6d50:	492a      	ldr	r1, [pc, #168]	; (6dfc <_i2c_m_sync_init_impl+0x120>)
    6d52:	4613      	mov	r3, r2
    6d54:	005b      	lsls	r3, r3, #1
    6d56:	4413      	add	r3, r2
    6d58:	00db      	lsls	r3, r3, #3
    6d5a:	440b      	add	r3, r1
    6d5c:	3304      	adds	r3, #4
    6d5e:	681b      	ldr	r3, [r3, #0]
    6d60:	4619      	mov	r1, r3
    6d62:	6838      	ldr	r0, [r7, #0]
    6d64:	4b29      	ldr	r3, [pc, #164]	; (6e0c <_i2c_m_sync_init_impl+0x130>)
    6d66:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    6d68:	7bfa      	ldrb	r2, [r7, #15]
    6d6a:	4924      	ldr	r1, [pc, #144]	; (6dfc <_i2c_m_sync_init_impl+0x120>)
    6d6c:	4613      	mov	r3, r2
    6d6e:	005b      	lsls	r3, r3, #1
    6d70:	4413      	add	r3, r2
    6d72:	00db      	lsls	r3, r3, #3
    6d74:	440b      	add	r3, r1
    6d76:	3308      	adds	r3, #8
    6d78:	681b      	ldr	r3, [r3, #0]
    6d7a:	4619      	mov	r1, r3
    6d7c:	6838      	ldr	r0, [r7, #0]
    6d7e:	4b24      	ldr	r3, [pc, #144]	; (6e10 <_i2c_m_sync_init_impl+0x134>)
    6d80:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    6d82:	7bfa      	ldrb	r2, [r7, #15]
    6d84:	491d      	ldr	r1, [pc, #116]	; (6dfc <_i2c_m_sync_init_impl+0x120>)
    6d86:	4613      	mov	r3, r2
    6d88:	005b      	lsls	r3, r3, #1
    6d8a:	4413      	add	r3, r2
    6d8c:	00db      	lsls	r3, r3, #3
    6d8e:	440b      	add	r3, r1
    6d90:	330c      	adds	r3, #12
    6d92:	681b      	ldr	r3, [r3, #0]
    6d94:	4619      	mov	r1, r3
    6d96:	6838      	ldr	r0, [r7, #0]
    6d98:	4b1e      	ldr	r3, [pc, #120]	; (6e14 <_i2c_m_sync_init_impl+0x138>)
    6d9a:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    6d9c:	7bfa      	ldrb	r2, [r7, #15]
    6d9e:	4917      	ldr	r1, [pc, #92]	; (6dfc <_i2c_m_sync_init_impl+0x120>)
    6da0:	4613      	mov	r3, r2
    6da2:	005b      	lsls	r3, r3, #1
    6da4:	4413      	add	r3, r2
    6da6:	00db      	lsls	r3, r3, #3
    6da8:	440b      	add	r3, r1
    6daa:	3304      	adds	r3, #4
    6dac:	681b      	ldr	r3, [r3, #0]
    6dae:	0e1b      	lsrs	r3, r3, #24
    6db0:	b29b      	uxth	r3, r3
    6db2:	f003 0303 	and.w	r3, r3, #3
    6db6:	b29a      	uxth	r2, r3
    6db8:	687b      	ldr	r3, [r7, #4]
    6dba:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    6dbc:	687b      	ldr	r3, [r7, #4]
    6dbe:	899b      	ldrh	r3, [r3, #12]
    6dc0:	2b01      	cmp	r3, #1
    6dc2:	bf8c      	ite	hi
    6dc4:	2301      	movhi	r3, #1
    6dc6:	2300      	movls	r3, #0
    6dc8:	b2db      	uxtb	r3, r3
    6dca:	4619      	mov	r1, r3
    6dcc:	6838      	ldr	r0, [r7, #0]
    6dce:	4b12      	ldr	r3, [pc, #72]	; (6e18 <_i2c_m_sync_init_impl+0x13c>)
    6dd0:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    6dd2:	7bfa      	ldrb	r2, [r7, #15]
    6dd4:	4909      	ldr	r1, [pc, #36]	; (6dfc <_i2c_m_sync_init_impl+0x120>)
    6dd6:	4613      	mov	r3, r2
    6dd8:	005b      	lsls	r3, r3, #1
    6dda:	4413      	add	r3, r2
    6ddc:	00db      	lsls	r3, r3, #3
    6dde:	440b      	add	r3, r1
    6de0:	3312      	adds	r3, #18
    6de2:	881a      	ldrh	r2, [r3, #0]
    6de4:	687b      	ldr	r3, [r7, #4]
    6de6:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    6de8:	2300      	movs	r3, #0
}
    6dea:	4618      	mov	r0, r3
    6dec:	3710      	adds	r7, #16
    6dee:	46bd      	mov	sp, r7
    6df0:	bd80      	pop	{r7, pc}
    6df2:	bf00      	nop
    6df4:	00006639 	.word	0x00006639
    6df8:	00005f61 	.word	0x00005f61
    6dfc:	20000018 	.word	0x20000018
    6e00:	000061b1 	.word	0x000061b1
    6e04:	00006159 	.word	0x00006159
    6e08:	00005f3d 	.word	0x00005f3d
    6e0c:	000061e1 	.word	0x000061e1
    6e10:	00006389 	.word	0x00006389
    6e14:	000063d1 	.word	0x000063d1
    6e18:	0000640d 	.word	0x0000640d

00006e1c <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    6e1c:	b580      	push	{r7, lr}
    6e1e:	b082      	sub	sp, #8
    6e20:	af00      	add	r7, sp, #0
    6e22:	6078      	str	r0, [r7, #4]
    6e24:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    6e26:	687b      	ldr	r3, [r7, #4]
    6e28:	2b00      	cmp	r3, #0
    6e2a:	d004      	beq.n	6e36 <_spi_load_regs_master+0x1a>
    6e2c:	683b      	ldr	r3, [r7, #0]
    6e2e:	2b00      	cmp	r3, #0
    6e30:	d001      	beq.n	6e36 <_spi_load_regs_master+0x1a>
    6e32:	2301      	movs	r3, #1
    6e34:	e000      	b.n	6e38 <_spi_load_regs_master+0x1c>
    6e36:	2300      	movs	r3, #0
    6e38:	f003 0301 	and.w	r3, r3, #1
    6e3c:	b2db      	uxtb	r3, r3
    6e3e:	f640 1242 	movw	r2, #2370	; 0x942
    6e42:	4915      	ldr	r1, [pc, #84]	; (6e98 <_spi_load_regs_master+0x7c>)
    6e44:	4618      	mov	r0, r3
    6e46:	4b15      	ldr	r3, [pc, #84]	; (6e9c <_spi_load_regs_master+0x80>)
    6e48:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    6e4a:	683b      	ldr	r3, [r7, #0]
    6e4c:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    6e4e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    6e52:	f023 0301 	bic.w	r3, r3, #1
    6e56:	4619      	mov	r1, r3
    6e58:	6878      	ldr	r0, [r7, #4]
    6e5a:	4b11      	ldr	r3, [pc, #68]	; (6ea0 <_spi_load_regs_master+0x84>)
    6e5c:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    6e5e:	683b      	ldr	r3, [r7, #0]
    6e60:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    6e62:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    6e66:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    6e6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    6e6e:	4619      	mov	r1, r3
    6e70:	6878      	ldr	r0, [r7, #4]
    6e72:	4b0c      	ldr	r3, [pc, #48]	; (6ea4 <_spi_load_regs_master+0x88>)
    6e74:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    6e76:	683b      	ldr	r3, [r7, #0]
    6e78:	7b1b      	ldrb	r3, [r3, #12]
    6e7a:	4619      	mov	r1, r3
    6e7c:	6878      	ldr	r0, [r7, #4]
    6e7e:	4b0a      	ldr	r3, [pc, #40]	; (6ea8 <_spi_load_regs_master+0x8c>)
    6e80:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    6e82:	683b      	ldr	r3, [r7, #0]
    6e84:	7b5b      	ldrb	r3, [r3, #13]
    6e86:	4619      	mov	r1, r3
    6e88:	6878      	ldr	r0, [r7, #4]
    6e8a:	4b08      	ldr	r3, [pc, #32]	; (6eac <_spi_load_regs_master+0x90>)
    6e8c:	4798      	blx	r3
}
    6e8e:	bf00      	nop
    6e90:	3708      	adds	r7, #8
    6e92:	46bd      	mov	sp, r7
    6e94:	bd80      	pop	{r7, pc}
    6e96:	bf00      	nop
    6e98:	0000e57c 	.word	0x0000e57c
    6e9c:	000034fd 	.word	0x000034fd
    6ea0:	00006295 	.word	0x00006295
    6ea4:	000063ad 	.word	0x000063ad
    6ea8:	000063ed 	.word	0x000063ed
    6eac:	00006525 	.word	0x00006525

00006eb0 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    6eb0:	b580      	push	{r7, lr}
    6eb2:	b082      	sub	sp, #8
    6eb4:	af00      	add	r7, sp, #0
    6eb6:	6078      	str	r0, [r7, #4]
    6eb8:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    6eba:	687b      	ldr	r3, [r7, #4]
    6ebc:	2b00      	cmp	r3, #0
    6ebe:	d004      	beq.n	6eca <_spi_load_regs_slave+0x1a>
    6ec0:	683b      	ldr	r3, [r7, #0]
    6ec2:	2b00      	cmp	r3, #0
    6ec4:	d001      	beq.n	6eca <_spi_load_regs_slave+0x1a>
    6ec6:	2301      	movs	r3, #1
    6ec8:	e000      	b.n	6ecc <_spi_load_regs_slave+0x1c>
    6eca:	2300      	movs	r3, #0
    6ecc:	f003 0301 	and.w	r3, r3, #1
    6ed0:	b2db      	uxtb	r3, r3
    6ed2:	f640 1256 	movw	r2, #2390	; 0x956
    6ed6:	491a      	ldr	r1, [pc, #104]	; (6f40 <_spi_load_regs_slave+0x90>)
    6ed8:	4618      	mov	r0, r3
    6eda:	4b1a      	ldr	r3, [pc, #104]	; (6f44 <_spi_load_regs_slave+0x94>)
    6edc:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    6ede:	683b      	ldr	r3, [r7, #0]
    6ee0:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    6ee2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    6ee6:	f023 0301 	bic.w	r3, r3, #1
    6eea:	4619      	mov	r1, r3
    6eec:	6878      	ldr	r0, [r7, #4]
    6eee:	4b16      	ldr	r3, [pc, #88]	; (6f48 <_spi_load_regs_slave+0x98>)
    6ef0:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    6ef2:	683b      	ldr	r3, [r7, #0]
    6ef4:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    6ef6:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    6efa:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    6efe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    6f02:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    6f06:	4619      	mov	r1, r3
    6f08:	6878      	ldr	r0, [r7, #4]
    6f0a:	4b10      	ldr	r3, [pc, #64]	; (6f4c <_spi_load_regs_slave+0x9c>)
    6f0c:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    6f0e:	683b      	ldr	r3, [r7, #0]
    6f10:	689b      	ldr	r3, [r3, #8]
    6f12:	4619      	mov	r1, r3
    6f14:	6878      	ldr	r0, [r7, #4]
    6f16:	4b0e      	ldr	r3, [pc, #56]	; (6f50 <_spi_load_regs_slave+0xa0>)
    6f18:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    6f1a:	683b      	ldr	r3, [r7, #0]
    6f1c:	7b5b      	ldrb	r3, [r3, #13]
    6f1e:	4619      	mov	r1, r3
    6f20:	6878      	ldr	r0, [r7, #4]
    6f22:	4b0c      	ldr	r3, [pc, #48]	; (6f54 <_spi_load_regs_slave+0xa4>)
    6f24:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    6f26:	bf00      	nop
    6f28:	f04f 31ff 	mov.w	r1, #4294967295
    6f2c:	6878      	ldr	r0, [r7, #4]
    6f2e:	4b0a      	ldr	r3, [pc, #40]	; (6f58 <_spi_load_regs_slave+0xa8>)
    6f30:	4798      	blx	r3
    6f32:	4603      	mov	r3, r0
    6f34:	2b00      	cmp	r3, #0
    6f36:	d1f7      	bne.n	6f28 <_spi_load_regs_slave+0x78>
		;
}
    6f38:	bf00      	nop
    6f3a:	3708      	adds	r7, #8
    6f3c:	46bd      	mov	sp, r7
    6f3e:	bd80      	pop	{r7, pc}
    6f40:	0000e57c 	.word	0x0000e57c
    6f44:	000034fd 	.word	0x000034fd
    6f48:	00006295 	.word	0x00006295
    6f4c:	000063ad 	.word	0x000063ad
    6f50:	00006491 	.word	0x00006491
    6f54:	00006525 	.word	0x00006525
    6f58:	00005fad 	.word	0x00005fad

00006f5c <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    6f5c:	b580      	push	{r7, lr}
    6f5e:	b084      	sub	sp, #16
    6f60:	af00      	add	r7, sp, #0
    6f62:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    6f64:	687b      	ldr	r3, [r7, #4]
    6f66:	4618      	mov	r0, r3
    6f68:	4b11      	ldr	r3, [pc, #68]	; (6fb0 <_spi_get_regs+0x54>)
    6f6a:	4798      	blx	r3
    6f6c:	4603      	mov	r3, r0
    6f6e:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    6f70:	2300      	movs	r3, #0
    6f72:	73fb      	strb	r3, [r7, #15]
    6f74:	e014      	b.n	6fa0 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    6f76:	7bfa      	ldrb	r2, [r7, #15]
    6f78:	490e      	ldr	r1, [pc, #56]	; (6fb4 <_spi_get_regs+0x58>)
    6f7a:	4613      	mov	r3, r2
    6f7c:	011b      	lsls	r3, r3, #4
    6f7e:	4413      	add	r3, r2
    6f80:	440b      	add	r3, r1
    6f82:	3310      	adds	r3, #16
    6f84:	781b      	ldrb	r3, [r3, #0]
    6f86:	7bba      	ldrb	r2, [r7, #14]
    6f88:	429a      	cmp	r2, r3
    6f8a:	d106      	bne.n	6f9a <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    6f8c:	7bfa      	ldrb	r2, [r7, #15]
    6f8e:	4613      	mov	r3, r2
    6f90:	011b      	lsls	r3, r3, #4
    6f92:	4413      	add	r3, r2
    6f94:	4a07      	ldr	r2, [pc, #28]	; (6fb4 <_spi_get_regs+0x58>)
    6f96:	4413      	add	r3, r2
    6f98:	e006      	b.n	6fa8 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    6f9a:	7bfb      	ldrb	r3, [r7, #15]
    6f9c:	3301      	adds	r3, #1
    6f9e:	73fb      	strb	r3, [r7, #15]
    6fa0:	7bfb      	ldrb	r3, [r7, #15]
    6fa2:	2b01      	cmp	r3, #1
    6fa4:	d9e7      	bls.n	6f76 <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    6fa6:	2300      	movs	r3, #0
}
    6fa8:	4618      	mov	r0, r3
    6faa:	3710      	adds	r7, #16
    6fac:	46bd      	mov	sp, r7
    6fae:	bd80      	pop	{r7, pc}
    6fb0:	00006589 	.word	0x00006589
    6fb4:	0000e5b8 	.word	0x0000e5b8

00006fb8 <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    6fb8:	b580      	push	{r7, lr}
    6fba:	b084      	sub	sp, #16
    6fbc:	af00      	add	r7, sp, #0
    6fbe:	6078      	str	r0, [r7, #4]
	void *                      hw = dev->prvt;
    6fc0:	687b      	ldr	r3, [r7, #4]
    6fc2:	681b      	ldr	r3, [r3, #0]
    6fc4:	60fb      	str	r3, [r7, #12]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
    6fc6:	68f8      	ldr	r0, [r7, #12]
    6fc8:	4b21      	ldr	r3, [pc, #132]	; (7050 <_spi_handler+0x98>)
    6fca:	4798      	blx	r3
    6fcc:	4603      	mov	r3, r0
    6fce:	72fb      	strb	r3, [r7, #11]
	st &= hri_sercomspi_read_INTEN_reg(hw);
    6fd0:	68f8      	ldr	r0, [r7, #12]
    6fd2:	4b20      	ldr	r3, [pc, #128]	; (7054 <_spi_handler+0x9c>)
    6fd4:	4798      	blx	r3
    6fd6:	4603      	mov	r3, r0
    6fd8:	461a      	mov	r2, r3
    6fda:	7afb      	ldrb	r3, [r7, #11]
    6fdc:	4013      	ands	r3, r2
    6fde:	72fb      	strb	r3, [r7, #11]

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    6fe0:	7afb      	ldrb	r3, [r7, #11]
    6fe2:	f003 0301 	and.w	r3, r3, #1
    6fe6:	2b00      	cmp	r3, #0
    6fe8:	d004      	beq.n	6ff4 <_spi_handler+0x3c>
		dev->callbacks.tx(dev);
    6fea:	687b      	ldr	r3, [r7, #4]
    6fec:	689b      	ldr	r3, [r3, #8]
    6fee:	6878      	ldr	r0, [r7, #4]
    6ff0:	4798      	blx	r3
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
	}
}
    6ff2:	e029      	b.n	7048 <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    6ff4:	7afb      	ldrb	r3, [r7, #11]
    6ff6:	f003 0304 	and.w	r3, r3, #4
    6ffa:	2b00      	cmp	r3, #0
    6ffc:	d004      	beq.n	7008 <_spi_handler+0x50>
		dev->callbacks.rx(dev);
    6ffe:	687b      	ldr	r3, [r7, #4]
    7000:	68db      	ldr	r3, [r3, #12]
    7002:	6878      	ldr	r0, [r7, #4]
    7004:	4798      	blx	r3
}
    7006:	e01f      	b.n	7048 <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    7008:	7afb      	ldrb	r3, [r7, #11]
    700a:	f003 0302 	and.w	r3, r3, #2
    700e:	2b00      	cmp	r3, #0
    7010:	d008      	beq.n	7024 <_spi_handler+0x6c>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
    7012:	2102      	movs	r1, #2
    7014:	68f8      	ldr	r0, [r7, #12]
    7016:	4b10      	ldr	r3, [pc, #64]	; (7058 <_spi_handler+0xa0>)
    7018:	4798      	blx	r3
		dev->callbacks.complete(dev);
    701a:	687b      	ldr	r3, [r7, #4]
    701c:	691b      	ldr	r3, [r3, #16]
    701e:	6878      	ldr	r0, [r7, #4]
    7020:	4798      	blx	r3
}
    7022:	e011      	b.n	7048 <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    7024:	f997 300b 	ldrsb.w	r3, [r7, #11]
    7028:	2b00      	cmp	r3, #0
    702a:	da0d      	bge.n	7048 <_spi_handler+0x90>
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
    702c:	2104      	movs	r1, #4
    702e:	68f8      	ldr	r0, [r7, #12]
    7030:	4b0a      	ldr	r3, [pc, #40]	; (705c <_spi_handler+0xa4>)
    7032:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    7034:	2180      	movs	r1, #128	; 0x80
    7036:	68f8      	ldr	r0, [r7, #12]
    7038:	4b07      	ldr	r3, [pc, #28]	; (7058 <_spi_handler+0xa0>)
    703a:	4798      	blx	r3
		dev->callbacks.err(dev, ERR_OVERFLOW);
    703c:	687b      	ldr	r3, [r7, #4]
    703e:	695b      	ldr	r3, [r3, #20]
    7040:	f06f 0112 	mvn.w	r1, #18
    7044:	6878      	ldr	r0, [r7, #4]
    7046:	4798      	blx	r3
}
    7048:	bf00      	nop
    704a:	3710      	adds	r7, #16
    704c:	46bd      	mov	sp, r7
    704e:	bd80      	pop	{r7, pc}
    7050:	00006069 	.word	0x00006069
    7054:	0000613d 	.word	0x0000613d
    7058:	00006083 	.word	0x00006083
    705c:	00006545 	.word	0x00006545

00007060 <SERCOM4_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_0_Handler(void)
{
    7060:	b580      	push	{r7, lr}
    7062:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    7064:	4b03      	ldr	r3, [pc, #12]	; (7074 <SERCOM4_0_Handler+0x14>)
    7066:	681b      	ldr	r3, [r3, #0]
    7068:	4618      	mov	r0, r3
    706a:	4b03      	ldr	r3, [pc, #12]	; (7078 <SERCOM4_0_Handler+0x18>)
    706c:	4798      	blx	r3
}
    706e:	bf00      	nop
    7070:	bd80      	pop	{r7, pc}
    7072:	bf00      	nop
    7074:	20000760 	.word	0x20000760
    7078:	00006fb9 	.word	0x00006fb9

0000707c <SERCOM4_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_1_Handler(void)
{
    707c:	b580      	push	{r7, lr}
    707e:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    7080:	4b03      	ldr	r3, [pc, #12]	; (7090 <SERCOM4_1_Handler+0x14>)
    7082:	681b      	ldr	r3, [r3, #0]
    7084:	4618      	mov	r0, r3
    7086:	4b03      	ldr	r3, [pc, #12]	; (7094 <SERCOM4_1_Handler+0x18>)
    7088:	4798      	blx	r3
}
    708a:	bf00      	nop
    708c:	bd80      	pop	{r7, pc}
    708e:	bf00      	nop
    7090:	20000760 	.word	0x20000760
    7094:	00006fb9 	.word	0x00006fb9

00007098 <SERCOM4_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_2_Handler(void)
{
    7098:	b580      	push	{r7, lr}
    709a:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    709c:	4b03      	ldr	r3, [pc, #12]	; (70ac <SERCOM4_2_Handler+0x14>)
    709e:	681b      	ldr	r3, [r3, #0]
    70a0:	4618      	mov	r0, r3
    70a2:	4b03      	ldr	r3, [pc, #12]	; (70b0 <SERCOM4_2_Handler+0x18>)
    70a4:	4798      	blx	r3
}
    70a6:	bf00      	nop
    70a8:	bd80      	pop	{r7, pc}
    70aa:	bf00      	nop
    70ac:	20000760 	.word	0x20000760
    70b0:	00006fb9 	.word	0x00006fb9

000070b4 <SERCOM4_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_3_Handler(void)
{
    70b4:	b580      	push	{r7, lr}
    70b6:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    70b8:	4b03      	ldr	r3, [pc, #12]	; (70c8 <SERCOM4_3_Handler+0x14>)
    70ba:	681b      	ldr	r3, [r3, #0]
    70bc:	4618      	mov	r0, r3
    70be:	4b03      	ldr	r3, [pc, #12]	; (70cc <SERCOM4_3_Handler+0x18>)
    70c0:	4798      	blx	r3
}
    70c2:	bf00      	nop
    70c4:	bd80      	pop	{r7, pc}
    70c6:	bf00      	nop
    70c8:	20000760 	.word	0x20000760
    70cc:	00006fb9 	.word	0x00006fb9

000070d0 <SERCOM5_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_0_Handler(void)
{
    70d0:	b580      	push	{r7, lr}
    70d2:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    70d4:	4b03      	ldr	r3, [pc, #12]	; (70e4 <SERCOM5_0_Handler+0x14>)
    70d6:	681b      	ldr	r3, [r3, #0]
    70d8:	4618      	mov	r0, r3
    70da:	4b03      	ldr	r3, [pc, #12]	; (70e8 <SERCOM5_0_Handler+0x18>)
    70dc:	4798      	blx	r3
}
    70de:	bf00      	nop
    70e0:	bd80      	pop	{r7, pc}
    70e2:	bf00      	nop
    70e4:	20000764 	.word	0x20000764
    70e8:	000068ed 	.word	0x000068ed

000070ec <SERCOM5_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_1_Handler(void)
{
    70ec:	b580      	push	{r7, lr}
    70ee:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    70f0:	4b03      	ldr	r3, [pc, #12]	; (7100 <SERCOM5_1_Handler+0x14>)
    70f2:	681b      	ldr	r3, [r3, #0]
    70f4:	4618      	mov	r0, r3
    70f6:	4b03      	ldr	r3, [pc, #12]	; (7104 <SERCOM5_1_Handler+0x18>)
    70f8:	4798      	blx	r3
}
    70fa:	bf00      	nop
    70fc:	bd80      	pop	{r7, pc}
    70fe:	bf00      	nop
    7100:	20000764 	.word	0x20000764
    7104:	000068ed 	.word	0x000068ed

00007108 <SERCOM5_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_2_Handler(void)
{
    7108:	b580      	push	{r7, lr}
    710a:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    710c:	4b03      	ldr	r3, [pc, #12]	; (711c <SERCOM5_2_Handler+0x14>)
    710e:	681b      	ldr	r3, [r3, #0]
    7110:	4618      	mov	r0, r3
    7112:	4b03      	ldr	r3, [pc, #12]	; (7120 <SERCOM5_2_Handler+0x18>)
    7114:	4798      	blx	r3
}
    7116:	bf00      	nop
    7118:	bd80      	pop	{r7, pc}
    711a:	bf00      	nop
    711c:	20000764 	.word	0x20000764
    7120:	000068ed 	.word	0x000068ed

00007124 <SERCOM5_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_3_Handler(void)
{
    7124:	b580      	push	{r7, lr}
    7126:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    7128:	4b03      	ldr	r3, [pc, #12]	; (7138 <SERCOM5_3_Handler+0x14>)
    712a:	681b      	ldr	r3, [r3, #0]
    712c:	4618      	mov	r0, r3
    712e:	4b03      	ldr	r3, [pc, #12]	; (713c <SERCOM5_3_Handler+0x18>)
    7130:	4798      	blx	r3
}
    7132:	bf00      	nop
    7134:	bd80      	pop	{r7, pc}
    7136:	bf00      	nop
    7138:	20000764 	.word	0x20000764
    713c:	000068ed 	.word	0x000068ed

00007140 <SERCOM7_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_0_Handler(void)
{
    7140:	b580      	push	{r7, lr}
    7142:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    7144:	4b03      	ldr	r3, [pc, #12]	; (7154 <SERCOM7_0_Handler+0x14>)
    7146:	681b      	ldr	r3, [r3, #0]
    7148:	4618      	mov	r0, r3
    714a:	4b03      	ldr	r3, [pc, #12]	; (7158 <SERCOM7_0_Handler+0x18>)
    714c:	4798      	blx	r3
}
    714e:	bf00      	nop
    7150:	bd80      	pop	{r7, pc}
    7152:	bf00      	nop
    7154:	20000768 	.word	0x20000768
    7158:	000068ed 	.word	0x000068ed

0000715c <SERCOM7_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_1_Handler(void)
{
    715c:	b580      	push	{r7, lr}
    715e:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    7160:	4b03      	ldr	r3, [pc, #12]	; (7170 <SERCOM7_1_Handler+0x14>)
    7162:	681b      	ldr	r3, [r3, #0]
    7164:	4618      	mov	r0, r3
    7166:	4b03      	ldr	r3, [pc, #12]	; (7174 <SERCOM7_1_Handler+0x18>)
    7168:	4798      	blx	r3
}
    716a:	bf00      	nop
    716c:	bd80      	pop	{r7, pc}
    716e:	bf00      	nop
    7170:	20000768 	.word	0x20000768
    7174:	000068ed 	.word	0x000068ed

00007178 <SERCOM7_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_2_Handler(void)
{
    7178:	b580      	push	{r7, lr}
    717a:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    717c:	4b03      	ldr	r3, [pc, #12]	; (718c <SERCOM7_2_Handler+0x14>)
    717e:	681b      	ldr	r3, [r3, #0]
    7180:	4618      	mov	r0, r3
    7182:	4b03      	ldr	r3, [pc, #12]	; (7190 <SERCOM7_2_Handler+0x18>)
    7184:	4798      	blx	r3
}
    7186:	bf00      	nop
    7188:	bd80      	pop	{r7, pc}
    718a:	bf00      	nop
    718c:	20000768 	.word	0x20000768
    7190:	000068ed 	.word	0x000068ed

00007194 <SERCOM7_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_3_Handler(void)
{
    7194:	b580      	push	{r7, lr}
    7196:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    7198:	4b03      	ldr	r3, [pc, #12]	; (71a8 <SERCOM7_3_Handler+0x14>)
    719a:	681b      	ldr	r3, [r3, #0]
    719c:	4618      	mov	r0, r3
    719e:	4b03      	ldr	r3, [pc, #12]	; (71ac <SERCOM7_3_Handler+0x18>)
    71a0:	4798      	blx	r3
}
    71a2:	bf00      	nop
    71a4:	bd80      	pop	{r7, pc}
    71a6:	bf00      	nop
    71a8:	20000768 	.word	0x20000768
    71ac:	000068ed 	.word	0x000068ed

000071b0 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    71b0:	b580      	push	{r7, lr}
    71b2:	b084      	sub	sp, #16
    71b4:	af00      	add	r7, sp, #0
    71b6:	6078      	str	r0, [r7, #4]
    71b8:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    71ba:	683b      	ldr	r3, [r7, #0]
    71bc:	4618      	mov	r0, r3
    71be:	4b35      	ldr	r3, [pc, #212]	; (7294 <_spi_m_sync_init+0xe4>)
    71c0:	4798      	blx	r3
    71c2:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    71c4:	687b      	ldr	r3, [r7, #4]
    71c6:	2b00      	cmp	r3, #0
    71c8:	d004      	beq.n	71d4 <_spi_m_sync_init+0x24>
    71ca:	683b      	ldr	r3, [r7, #0]
    71cc:	2b00      	cmp	r3, #0
    71ce:	d001      	beq.n	71d4 <_spi_m_sync_init+0x24>
    71d0:	2301      	movs	r3, #1
    71d2:	e000      	b.n	71d6 <_spi_m_sync_init+0x26>
    71d4:	2300      	movs	r3, #0
    71d6:	f003 0301 	and.w	r3, r3, #1
    71da:	b2db      	uxtb	r3, r3
    71dc:	f640 12e9 	movw	r2, #2537	; 0x9e9
    71e0:	492d      	ldr	r1, [pc, #180]	; (7298 <_spi_m_sync_init+0xe8>)
    71e2:	4618      	mov	r0, r3
    71e4:	4b2d      	ldr	r3, [pc, #180]	; (729c <_spi_m_sync_init+0xec>)
    71e6:	4798      	blx	r3

	if (regs == NULL) {
    71e8:	68fb      	ldr	r3, [r7, #12]
    71ea:	2b00      	cmp	r3, #0
    71ec:	d102      	bne.n	71f4 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    71ee:	f06f 030c 	mvn.w	r3, #12
    71f2:	e04a      	b.n	728a <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    71f4:	2101      	movs	r1, #1
    71f6:	6838      	ldr	r0, [r7, #0]
    71f8:	4b29      	ldr	r3, [pc, #164]	; (72a0 <_spi_m_sync_init+0xf0>)
    71fa:	4798      	blx	r3
    71fc:	4603      	mov	r3, r0
    71fe:	f083 0301 	eor.w	r3, r3, #1
    7202:	b2db      	uxtb	r3, r3
    7204:	2b00      	cmp	r3, #0
    7206:	d019      	beq.n	723c <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    7208:	68fb      	ldr	r3, [r7, #12]
    720a:	681b      	ldr	r3, [r3, #0]
    720c:	f003 031c 	and.w	r3, r3, #28
    7210:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    7212:	2102      	movs	r1, #2
    7214:	6838      	ldr	r0, [r7, #0]
    7216:	4b23      	ldr	r3, [pc, #140]	; (72a4 <_spi_m_sync_init+0xf4>)
    7218:	4798      	blx	r3
    721a:	4603      	mov	r3, r0
    721c:	2b00      	cmp	r3, #0
    721e:	d006      	beq.n	722e <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    7220:	6838      	ldr	r0, [r7, #0]
    7222:	4b21      	ldr	r3, [pc, #132]	; (72a8 <_spi_m_sync_init+0xf8>)
    7224:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    7226:	2102      	movs	r1, #2
    7228:	6838      	ldr	r0, [r7, #0]
    722a:	4b20      	ldr	r3, [pc, #128]	; (72ac <_spi_m_sync_init+0xfc>)
    722c:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    722e:	68bb      	ldr	r3, [r7, #8]
    7230:	f043 0301 	orr.w	r3, r3, #1
    7234:	4619      	mov	r1, r3
    7236:	6838      	ldr	r0, [r7, #0]
    7238:	4b1d      	ldr	r3, [pc, #116]	; (72b0 <_spi_m_sync_init+0x100>)
    723a:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    723c:	2101      	movs	r1, #1
    723e:	6838      	ldr	r0, [r7, #0]
    7240:	4b1a      	ldr	r3, [pc, #104]	; (72ac <_spi_m_sync_init+0xfc>)
    7242:	4798      	blx	r3

	dev->prvt = hw;
    7244:	687b      	ldr	r3, [r7, #4]
    7246:	683a      	ldr	r2, [r7, #0]
    7248:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    724a:	68fb      	ldr	r3, [r7, #12]
    724c:	681b      	ldr	r3, [r3, #0]
    724e:	f003 031c 	and.w	r3, r3, #28
    7252:	2b08      	cmp	r3, #8
    7254:	d104      	bne.n	7260 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    7256:	68f9      	ldr	r1, [r7, #12]
    7258:	6838      	ldr	r0, [r7, #0]
    725a:	4b16      	ldr	r3, [pc, #88]	; (72b4 <_spi_m_sync_init+0x104>)
    725c:	4798      	blx	r3
    725e:	e003      	b.n	7268 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    7260:	68f9      	ldr	r1, [r7, #12]
    7262:	6838      	ldr	r0, [r7, #0]
    7264:	4b14      	ldr	r3, [pc, #80]	; (72b8 <_spi_m_sync_init+0x108>)
    7266:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    7268:	68fb      	ldr	r3, [r7, #12]
    726a:	685b      	ldr	r3, [r3, #4]
    726c:	f003 0307 	and.w	r3, r3, #7
    7270:	2b00      	cmp	r3, #0
    7272:	d101      	bne.n	7278 <_spi_m_sync_init+0xc8>
    7274:	2201      	movs	r2, #1
    7276:	e000      	b.n	727a <_spi_m_sync_init+0xca>
    7278:	2202      	movs	r2, #2
    727a:	687b      	ldr	r3, [r7, #4]
    727c:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    727e:	68fb      	ldr	r3, [r7, #12]
    7280:	89db      	ldrh	r3, [r3, #14]
    7282:	b29a      	uxth	r2, r3
    7284:	687b      	ldr	r3, [r7, #4]
    7286:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    7288:	2300      	movs	r3, #0
}
    728a:	4618      	mov	r0, r3
    728c:	3710      	adds	r7, #16
    728e:	46bd      	mov	sp, r7
    7290:	bd80      	pop	{r7, pc}
    7292:	bf00      	nop
    7294:	00006f5d 	.word	0x00006f5d
    7298:	0000e57c 	.word	0x0000e57c
    729c:	000034fd 	.word	0x000034fd
    72a0:	00005fad 	.word	0x00005fad
    72a4:	00006265 	.word	0x00006265
    72a8:	0000623d 	.word	0x0000623d
    72ac:	00005f89 	.word	0x00005f89
    72b0:	00006295 	.word	0x00006295
    72b4:	00006eb1 	.word	0x00006eb1
    72b8:	00006e1d 	.word	0x00006e1d

000072bc <_spi_m_async_init>:
{
	return _spi_m_sync_init(dev, hw);
}

int32_t _spi_m_async_init(struct _spi_async_dev *dev, void *const hw)
{
    72bc:	b580      	push	{r7, lr}
    72be:	b086      	sub	sp, #24
    72c0:	af00      	add	r7, sp, #0
    72c2:	6078      	str	r0, [r7, #4]
    72c4:	6039      	str	r1, [r7, #0]
	struct _spi_async_dev *spid = dev;
    72c6:	687b      	ldr	r3, [r7, #4]
    72c8:	60fb      	str	r3, [r7, #12]
	/* Do hardware initialize. */
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    72ca:	6839      	ldr	r1, [r7, #0]
    72cc:	6878      	ldr	r0, [r7, #4]
    72ce:	4b1a      	ldr	r3, [pc, #104]	; (7338 <_spi_m_async_init+0x7c>)
    72d0:	4798      	blx	r3
    72d2:	60b8      	str	r0, [r7, #8]

	if (rc < 0) {
    72d4:	68bb      	ldr	r3, [r7, #8]
    72d6:	2b00      	cmp	r3, #0
    72d8:	da01      	bge.n	72de <_spi_m_async_init+0x22>
		return rc;
    72da:	68bb      	ldr	r3, [r7, #8]
    72dc:	e028      	b.n	7330 <_spi_m_async_init+0x74>
	}

	_sercom_init_irq_param(hw, (void *)dev);
    72de:	6879      	ldr	r1, [r7, #4]
    72e0:	6838      	ldr	r0, [r7, #0]
    72e2:	4b16      	ldr	r3, [pc, #88]	; (733c <_spi_m_async_init+0x80>)
    72e4:	4798      	blx	r3
	/* Initialize callbacks: must use them */
	spid->callbacks.complete = NULL;
    72e6:	68fb      	ldr	r3, [r7, #12]
    72e8:	2200      	movs	r2, #0
    72ea:	611a      	str	r2, [r3, #16]
	spid->callbacks.rx       = NULL;
    72ec:	68fb      	ldr	r3, [r7, #12]
    72ee:	2200      	movs	r2, #0
    72f0:	60da      	str	r2, [r3, #12]
	spid->callbacks.tx       = NULL;
    72f2:	68fb      	ldr	r3, [r7, #12]
    72f4:	2200      	movs	r2, #0
    72f6:	609a      	str	r2, [r3, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    72f8:	6838      	ldr	r0, [r7, #0]
    72fa:	4b11      	ldr	r3, [pc, #68]	; (7340 <_spi_m_async_init+0x84>)
    72fc:	4798      	blx	r3
    72fe:	4603      	mov	r3, r0
    7300:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    7302:	2300      	movs	r3, #0
    7304:	613b      	str	r3, [r7, #16]
    7306:	e00f      	b.n	7328 <_spi_m_async_init+0x6c>
		NVIC_DisableIRQ((IRQn_Type)irq);
    7308:	7dfb      	ldrb	r3, [r7, #23]
    730a:	b21b      	sxth	r3, r3
    730c:	4618      	mov	r0, r3
    730e:	4b0d      	ldr	r3, [pc, #52]	; (7344 <_spi_m_async_init+0x88>)
    7310:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    7312:	7dfb      	ldrb	r3, [r7, #23]
    7314:	b21b      	sxth	r3, r3
    7316:	4618      	mov	r0, r3
    7318:	4b0b      	ldr	r3, [pc, #44]	; (7348 <_spi_m_async_init+0x8c>)
    731a:	4798      	blx	r3
		irq++;
    731c:	7dfb      	ldrb	r3, [r7, #23]
    731e:	3301      	adds	r3, #1
    7320:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    7322:	693b      	ldr	r3, [r7, #16]
    7324:	3301      	adds	r3, #1
    7326:	613b      	str	r3, [r7, #16]
    7328:	693b      	ldr	r3, [r7, #16]
    732a:	2b03      	cmp	r3, #3
    732c:	d9ec      	bls.n	7308 <_spi_m_async_init+0x4c>
	}

	return ERR_NONE;
    732e:	2300      	movs	r3, #0
}
    7330:	4618      	mov	r0, r3
    7332:	3718      	adds	r7, #24
    7334:	46bd      	mov	sp, r7
    7336:	bd80      	pop	{r7, pc}
    7338:	000071b1 	.word	0x000071b1
    733c:	000065e5 	.word	0x000065e5
    7340:	000069f1 	.word	0x000069f1
    7344:	00005ebd 	.word	0x00005ebd
    7348:	00005f01 	.word	0x00005f01

0000734c <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    734c:	b580      	push	{r7, lr}
    734e:	b082      	sub	sp, #8
    7350:	af00      	add	r7, sp, #0
    7352:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    7354:	bf00      	nop
    7356:	2103      	movs	r1, #3
    7358:	6878      	ldr	r0, [r7, #4]
    735a:	4b06      	ldr	r3, [pc, #24]	; (7374 <_spi_wait_bus_idle+0x28>)
    735c:	4798      	blx	r3
    735e:	4603      	mov	r3, r0
    7360:	2b00      	cmp	r3, #0
    7362:	d0f8      	beq.n	7356 <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    7364:	2103      	movs	r1, #3
    7366:	6878      	ldr	r0, [r7, #4]
    7368:	4b03      	ldr	r3, [pc, #12]	; (7378 <_spi_wait_bus_idle+0x2c>)
    736a:	4798      	blx	r3
}
    736c:	bf00      	nop
    736e:	3708      	adds	r7, #8
    7370:	46bd      	mov	sp, r7
    7372:	bd80      	pop	{r7, pc}
    7374:	00006041 	.word	0x00006041
    7378:	00006083 	.word	0x00006083

0000737c <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    737c:	b580      	push	{r7, lr}
    737e:	b086      	sub	sp, #24
    7380:	af00      	add	r7, sp, #0
    7382:	60f8      	str	r0, [r7, #12]
    7384:	60b9      	str	r1, [r7, #8]
    7386:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    7388:	68bb      	ldr	r3, [r7, #8]
    738a:	f003 0304 	and.w	r3, r3, #4
    738e:	2b00      	cmp	r3, #0
    7390:	d101      	bne.n	7396 <_spi_rx_check_and_receive+0x1a>
		return false;
    7392:	2300      	movs	r3, #0
    7394:	e022      	b.n	73dc <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    7396:	68f8      	ldr	r0, [r7, #12]
    7398:	4b12      	ldr	r3, [pc, #72]	; (73e4 <_spi_rx_check_and_receive+0x68>)
    739a:	4798      	blx	r3
    739c:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    739e:	687b      	ldr	r3, [r7, #4]
    73a0:	685b      	ldr	r3, [r3, #4]
    73a2:	2b00      	cmp	r3, #0
    73a4:	d014      	beq.n	73d0 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    73a6:	687b      	ldr	r3, [r7, #4]
    73a8:	685b      	ldr	r3, [r3, #4]
    73aa:	1c59      	adds	r1, r3, #1
    73ac:	687a      	ldr	r2, [r7, #4]
    73ae:	6051      	str	r1, [r2, #4]
    73b0:	697a      	ldr	r2, [r7, #20]
    73b2:	b2d2      	uxtb	r2, r2
    73b4:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    73b6:	687b      	ldr	r3, [r7, #4]
    73b8:	7c1b      	ldrb	r3, [r3, #16]
    73ba:	2b01      	cmp	r3, #1
    73bc:	d908      	bls.n	73d0 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    73be:	687b      	ldr	r3, [r7, #4]
    73c0:	685b      	ldr	r3, [r3, #4]
    73c2:	1c59      	adds	r1, r3, #1
    73c4:	687a      	ldr	r2, [r7, #4]
    73c6:	6051      	str	r1, [r2, #4]
    73c8:	697a      	ldr	r2, [r7, #20]
    73ca:	0a12      	lsrs	r2, r2, #8
    73cc:	b2d2      	uxtb	r2, r2
    73ce:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    73d0:	687b      	ldr	r3, [r7, #4]
    73d2:	68db      	ldr	r3, [r3, #12]
    73d4:	1c5a      	adds	r2, r3, #1
    73d6:	687b      	ldr	r3, [r7, #4]
    73d8:	60da      	str	r2, [r3, #12]

	return true;
    73da:	2301      	movs	r3, #1
}
    73dc:	4618      	mov	r0, r3
    73de:	3718      	adds	r7, #24
    73e0:	46bd      	mov	sp, r7
    73e2:	bd80      	pop	{r7, pc}
    73e4:	0000650d 	.word	0x0000650d

000073e8 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    73e8:	b580      	push	{r7, lr}
    73ea:	b086      	sub	sp, #24
    73ec:	af00      	add	r7, sp, #0
    73ee:	60f8      	str	r0, [r7, #12]
    73f0:	60b9      	str	r1, [r7, #8]
    73f2:	607a      	str	r2, [r7, #4]
    73f4:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    73f6:	68bb      	ldr	r3, [r7, #8]
    73f8:	f003 0301 	and.w	r3, r3, #1
    73fc:	2b00      	cmp	r3, #0
    73fe:	d028      	beq.n	7452 <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    7400:	687b      	ldr	r3, [r7, #4]
    7402:	681b      	ldr	r3, [r3, #0]
    7404:	2b00      	cmp	r3, #0
    7406:	d018      	beq.n	743a <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    7408:	687b      	ldr	r3, [r7, #4]
    740a:	681b      	ldr	r3, [r3, #0]
    740c:	1c59      	adds	r1, r3, #1
    740e:	687a      	ldr	r2, [r7, #4]
    7410:	6011      	str	r1, [r2, #0]
    7412:	781b      	ldrb	r3, [r3, #0]
    7414:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    7416:	687b      	ldr	r3, [r7, #4]
    7418:	7c1b      	ldrb	r3, [r3, #16]
    741a:	2b01      	cmp	r3, #1
    741c:	d90f      	bls.n	743e <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    741e:	687b      	ldr	r3, [r7, #4]
    7420:	681b      	ldr	r3, [r3, #0]
    7422:	781b      	ldrb	r3, [r3, #0]
    7424:	021b      	lsls	r3, r3, #8
    7426:	461a      	mov	r2, r3
    7428:	697b      	ldr	r3, [r7, #20]
    742a:	4313      	orrs	r3, r2
    742c:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    742e:	687b      	ldr	r3, [r7, #4]
    7430:	681b      	ldr	r3, [r3, #0]
    7432:	1c5a      	adds	r2, r3, #1
    7434:	687b      	ldr	r3, [r7, #4]
    7436:	601a      	str	r2, [r3, #0]
    7438:	e001      	b.n	743e <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    743a:	887b      	ldrh	r3, [r7, #2]
    743c:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    743e:	687b      	ldr	r3, [r7, #4]
    7440:	689b      	ldr	r3, [r3, #8]
    7442:	1c5a      	adds	r2, r3, #1
    7444:	687b      	ldr	r3, [r7, #4]
    7446:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    7448:	6979      	ldr	r1, [r7, #20]
    744a:	68f8      	ldr	r0, [r7, #12]
    744c:	4b03      	ldr	r3, [pc, #12]	; (745c <_spi_tx_check_and_send+0x74>)
    744e:	4798      	blx	r3
    7450:	e000      	b.n	7454 <_spi_tx_check_and_send+0x6c>
		return;
    7452:	bf00      	nop
}
    7454:	3718      	adds	r7, #24
    7456:	46bd      	mov	sp, r7
    7458:	bd80      	pop	{r7, pc}
    745a:	bf00      	nop
    745c:	000064f1 	.word	0x000064f1

00007460 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    7460:	b580      	push	{r7, lr}
    7462:	b082      	sub	sp, #8
    7464:	af00      	add	r7, sp, #0
    7466:	6078      	str	r0, [r7, #4]
    7468:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    746a:	687b      	ldr	r3, [r7, #4]
    746c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    7470:	2b00      	cmp	r3, #0
    7472:	d00b      	beq.n	748c <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    7474:	f64f 71ff 	movw	r1, #65535	; 0xffff
    7478:	6838      	ldr	r0, [r7, #0]
    747a:	4b07      	ldr	r3, [pc, #28]	; (7498 <_spi_err_check+0x38>)
    747c:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    747e:	2180      	movs	r1, #128	; 0x80
    7480:	6838      	ldr	r0, [r7, #0]
    7482:	4b06      	ldr	r3, [pc, #24]	; (749c <_spi_err_check+0x3c>)
    7484:	4798      	blx	r3
		return ERR_OVERFLOW;
    7486:	f06f 0312 	mvn.w	r3, #18
    748a:	e000      	b.n	748e <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    748c:	2300      	movs	r3, #0
}
    748e:	4618      	mov	r0, r3
    7490:	3708      	adds	r7, #8
    7492:	46bd      	mov	sp, r7
    7494:	bd80      	pop	{r7, pc}
    7496:	bf00      	nop
    7498:	00006545 	.word	0x00006545
    749c:	00006083 	.word	0x00006083

000074a0 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    74a0:	b590      	push	{r4, r7, lr}
    74a2:	b08b      	sub	sp, #44	; 0x2c
    74a4:	af00      	add	r7, sp, #0
    74a6:	6078      	str	r0, [r7, #4]
    74a8:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    74aa:	687b      	ldr	r3, [r7, #4]
    74ac:	681b      	ldr	r3, [r3, #0]
    74ae:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    74b0:	2300      	movs	r3, #0
    74b2:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    74b4:	683b      	ldr	r3, [r7, #0]
    74b6:	681b      	ldr	r3, [r3, #0]
    74b8:	60bb      	str	r3, [r7, #8]
    74ba:	683b      	ldr	r3, [r7, #0]
    74bc:	685b      	ldr	r3, [r3, #4]
    74be:	60fb      	str	r3, [r7, #12]
    74c0:	2300      	movs	r3, #0
    74c2:	613b      	str	r3, [r7, #16]
    74c4:	2300      	movs	r3, #0
    74c6:	617b      	str	r3, [r7, #20]
    74c8:	687b      	ldr	r3, [r7, #4]
    74ca:	791b      	ldrb	r3, [r3, #4]
    74cc:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    74ce:	687b      	ldr	r3, [r7, #4]
    74d0:	2b00      	cmp	r3, #0
    74d2:	d004      	beq.n	74de <_spi_m_sync_trans+0x3e>
    74d4:	6a3b      	ldr	r3, [r7, #32]
    74d6:	2b00      	cmp	r3, #0
    74d8:	d001      	beq.n	74de <_spi_m_sync_trans+0x3e>
    74da:	2301      	movs	r3, #1
    74dc:	e000      	b.n	74e0 <_spi_m_sync_trans+0x40>
    74de:	2300      	movs	r3, #0
    74e0:	f003 0301 	and.w	r3, r3, #1
    74e4:	b2db      	uxtb	r3, r3
    74e6:	f640 324d 	movw	r2, #2893	; 0xb4d
    74ea:	492b      	ldr	r1, [pc, #172]	; (7598 <_spi_m_sync_trans+0xf8>)
    74ec:	4618      	mov	r0, r3
    74ee:	4b2b      	ldr	r3, [pc, #172]	; (759c <_spi_m_sync_trans+0xfc>)
    74f0:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    74f2:	2107      	movs	r1, #7
    74f4:	6a38      	ldr	r0, [r7, #32]
    74f6:	4b2a      	ldr	r3, [pc, #168]	; (75a0 <_spi_m_sync_trans+0x100>)
    74f8:	4798      	blx	r3
    74fa:	4603      	mov	r3, r0
    74fc:	2b00      	cmp	r3, #0
    74fe:	d002      	beq.n	7506 <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    7500:	f06f 0303 	mvn.w	r3, #3
    7504:	e043      	b.n	758e <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    7506:	6a38      	ldr	r0, [r7, #32]
    7508:	4b26      	ldr	r3, [pc, #152]	; (75a4 <_spi_m_sync_trans+0x104>)
    750a:	4798      	blx	r3
    750c:	4603      	mov	r3, r0
    750e:	f083 0301 	eor.w	r3, r3, #1
    7512:	b2db      	uxtb	r3, r3
    7514:	2b00      	cmp	r3, #0
    7516:	d002      	beq.n	751e <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    7518:	f06f 0313 	mvn.w	r3, #19
    751c:	e037      	b.n	758e <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    751e:	6a38      	ldr	r0, [r7, #32]
    7520:	4b21      	ldr	r3, [pc, #132]	; (75a8 <_spi_m_sync_trans+0x108>)
    7522:	4798      	blx	r3
    7524:	4603      	mov	r3, r0
    7526:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    7528:	f107 0308 	add.w	r3, r7, #8
    752c:	461a      	mov	r2, r3
    752e:	69f9      	ldr	r1, [r7, #28]
    7530:	6a38      	ldr	r0, [r7, #32]
    7532:	4b1e      	ldr	r3, [pc, #120]	; (75ac <_spi_m_sync_trans+0x10c>)
    7534:	4798      	blx	r3
    7536:	4603      	mov	r3, r0
    7538:	f083 0301 	eor.w	r3, r3, #1
    753c:	b2db      	uxtb	r3, r3
    753e:	2b00      	cmp	r3, #0
    7540:	d00b      	beq.n	755a <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    7542:	697a      	ldr	r2, [r7, #20]
    7544:	693b      	ldr	r3, [r7, #16]
    7546:	429a      	cmp	r2, r3
    7548:	d307      	bcc.n	755a <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    754a:	687b      	ldr	r3, [r7, #4]
    754c:	88db      	ldrh	r3, [r3, #6]
    754e:	f107 0208 	add.w	r2, r7, #8
    7552:	69f9      	ldr	r1, [r7, #28]
    7554:	6a38      	ldr	r0, [r7, #32]
    7556:	4c16      	ldr	r4, [pc, #88]	; (75b0 <_spi_m_sync_trans+0x110>)
    7558:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    755a:	6a39      	ldr	r1, [r7, #32]
    755c:	69f8      	ldr	r0, [r7, #28]
    755e:	4b15      	ldr	r3, [pc, #84]	; (75b4 <_spi_m_sync_trans+0x114>)
    7560:	4798      	blx	r3
    7562:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    7564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7566:	2b00      	cmp	r3, #0
    7568:	db0c      	blt.n	7584 <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    756a:	693a      	ldr	r2, [r7, #16]
    756c:	683b      	ldr	r3, [r7, #0]
    756e:	689b      	ldr	r3, [r3, #8]
    7570:	429a      	cmp	r2, r3
    7572:	d3d4      	bcc.n	751e <_spi_m_sync_trans+0x7e>
    7574:	697a      	ldr	r2, [r7, #20]
    7576:	683b      	ldr	r3, [r7, #0]
    7578:	689b      	ldr	r3, [r3, #8]
    757a:	429a      	cmp	r2, r3
    757c:	d3cf      	bcc.n	751e <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    757e:	693b      	ldr	r3, [r7, #16]
    7580:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    7582:	e000      	b.n	7586 <_spi_m_sync_trans+0xe6>
			break;
    7584:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    7586:	6a38      	ldr	r0, [r7, #32]
    7588:	4b0b      	ldr	r3, [pc, #44]	; (75b8 <_spi_m_sync_trans+0x118>)
    758a:	4798      	blx	r3

	return rc;
    758c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    758e:	4618      	mov	r0, r3
    7590:	372c      	adds	r7, #44	; 0x2c
    7592:	46bd      	mov	sp, r7
    7594:	bd90      	pop	{r4, r7, pc}
    7596:	bf00      	nop
    7598:	0000e57c 	.word	0x0000e57c
    759c:	000034fd 	.word	0x000034fd
    75a0:	00005fad 	.word	0x00005fad
    75a4:	00006205 	.word	0x00006205
    75a8:	00006069 	.word	0x00006069
    75ac:	0000737d 	.word	0x0000737d
    75b0:	000073e9 	.word	0x000073e9
    75b4:	00007461 	.word	0x00007461
    75b8:	0000734d 	.word	0x0000734d

000075bc <_spi_m_async_enable_tx>:

int32_t _spi_m_async_enable_tx(struct _spi_async_dev *dev, bool state)
{
    75bc:	b580      	push	{r7, lr}
    75be:	b084      	sub	sp, #16
    75c0:	af00      	add	r7, sp, #0
    75c2:	6078      	str	r0, [r7, #4]
    75c4:	460b      	mov	r3, r1
    75c6:	70fb      	strb	r3, [r7, #3]
	void *hw = dev->prvt;
    75c8:	687b      	ldr	r3, [r7, #4]
    75ca:	681b      	ldr	r3, [r3, #0]
    75cc:	60fb      	str	r3, [r7, #12]

	ASSERT(dev && hw);
    75ce:	687b      	ldr	r3, [r7, #4]
    75d0:	2b00      	cmp	r3, #0
    75d2:	d004      	beq.n	75de <_spi_m_async_enable_tx+0x22>
    75d4:	68fb      	ldr	r3, [r7, #12]
    75d6:	2b00      	cmp	r3, #0
    75d8:	d001      	beq.n	75de <_spi_m_async_enable_tx+0x22>
    75da:	2301      	movs	r3, #1
    75dc:	e000      	b.n	75e0 <_spi_m_async_enable_tx+0x24>
    75de:	2300      	movs	r3, #0
    75e0:	f003 0301 	and.w	r3, r3, #1
    75e4:	b2db      	uxtb	r3, r3
    75e6:	f640 3279 	movw	r2, #2937	; 0xb79
    75ea:	4909      	ldr	r1, [pc, #36]	; (7610 <_spi_m_async_enable_tx+0x54>)
    75ec:	4618      	mov	r0, r3
    75ee:	4b09      	ldr	r3, [pc, #36]	; (7614 <_spi_m_async_enable_tx+0x58>)
    75f0:	4798      	blx	r3

	if (state) {
    75f2:	78fb      	ldrb	r3, [r7, #3]
    75f4:	2b00      	cmp	r3, #0
    75f6:	d003      	beq.n	7600 <_spi_m_async_enable_tx+0x44>
		hri_sercomspi_set_INTEN_DRE_bit(hw);
    75f8:	68f8      	ldr	r0, [r7, #12]
    75fa:	4b07      	ldr	r3, [pc, #28]	; (7618 <_spi_m_async_enable_tx+0x5c>)
    75fc:	4798      	blx	r3
    75fe:	e002      	b.n	7606 <_spi_m_async_enable_tx+0x4a>
	} else {
		hri_sercomspi_clear_INTEN_DRE_bit(hw);
    7600:	68f8      	ldr	r0, [r7, #12]
    7602:	4b06      	ldr	r3, [pc, #24]	; (761c <_spi_m_async_enable_tx+0x60>)
    7604:	4798      	blx	r3
	}

	return ERR_NONE;
    7606:	2300      	movs	r3, #0
}
    7608:	4618      	mov	r0, r3
    760a:	3710      	adds	r7, #16
    760c:	46bd      	mov	sp, r7
    760e:	bd80      	pop	{r7, pc}
    7610:	0000e57c 	.word	0x0000e57c
    7614:	000034fd 	.word	0x000034fd
    7618:	000060a1 	.word	0x000060a1
    761c:	000060bb 	.word	0x000060bb

00007620 <_spi_m_async_enable_rx>:
{
	return _spi_m_async_enable_tx(dev, state);
}

int32_t _spi_m_async_enable_rx(struct _spi_async_dev *dev, bool state)
{
    7620:	b580      	push	{r7, lr}
    7622:	b084      	sub	sp, #16
    7624:	af00      	add	r7, sp, #0
    7626:	6078      	str	r0, [r7, #4]
    7628:	460b      	mov	r3, r1
    762a:	70fb      	strb	r3, [r7, #3]
	void *hw = dev->prvt;
    762c:	687b      	ldr	r3, [r7, #4]
    762e:	681b      	ldr	r3, [r3, #0]
    7630:	60fb      	str	r3, [r7, #12]

	ASSERT(dev);
    7632:	687b      	ldr	r3, [r7, #4]
    7634:	2b00      	cmp	r3, #0
    7636:	bf14      	ite	ne
    7638:	2301      	movne	r3, #1
    763a:	2300      	moveq	r3, #0
    763c:	b2db      	uxtb	r3, r3
    763e:	f640 328d 	movw	r2, #2957	; 0xb8d
    7642:	490f      	ldr	r1, [pc, #60]	; (7680 <_spi_m_async_enable_rx+0x60>)
    7644:	4618      	mov	r0, r3
    7646:	4b0f      	ldr	r3, [pc, #60]	; (7684 <_spi_m_async_enable_rx+0x64>)
    7648:	4798      	blx	r3
	ASSERT(hw);
    764a:	68fb      	ldr	r3, [r7, #12]
    764c:	2b00      	cmp	r3, #0
    764e:	bf14      	ite	ne
    7650:	2301      	movne	r3, #1
    7652:	2300      	moveq	r3, #0
    7654:	b2db      	uxtb	r3, r3
    7656:	f640 328e 	movw	r2, #2958	; 0xb8e
    765a:	4909      	ldr	r1, [pc, #36]	; (7680 <_spi_m_async_enable_rx+0x60>)
    765c:	4618      	mov	r0, r3
    765e:	4b09      	ldr	r3, [pc, #36]	; (7684 <_spi_m_async_enable_rx+0x64>)
    7660:	4798      	blx	r3

	if (state) {
    7662:	78fb      	ldrb	r3, [r7, #3]
    7664:	2b00      	cmp	r3, #0
    7666:	d003      	beq.n	7670 <_spi_m_async_enable_rx+0x50>
		hri_sercomspi_set_INTEN_RXC_bit(hw);
    7668:	68f8      	ldr	r0, [r7, #12]
    766a:	4b07      	ldr	r3, [pc, #28]	; (7688 <_spi_m_async_enable_rx+0x68>)
    766c:	4798      	blx	r3
    766e:	e002      	b.n	7676 <_spi_m_async_enable_rx+0x56>
	} else {
		hri_sercomspi_clear_INTEN_RXC_bit(hw);
    7670:	68f8      	ldr	r0, [r7, #12]
    7672:	4b06      	ldr	r3, [pc, #24]	; (768c <_spi_m_async_enable_rx+0x6c>)
    7674:	4798      	blx	r3
	}

	return ERR_NONE;
    7676:	2300      	movs	r3, #0
}
    7678:	4618      	mov	r0, r3
    767a:	3710      	adds	r7, #16
    767c:	46bd      	mov	sp, r7
    767e:	bd80      	pop	{r7, pc}
    7680:	0000e57c 	.word	0x0000e57c
    7684:	000034fd 	.word	0x000034fd
    7688:	00006109 	.word	0x00006109
    768c:	00006123 	.word	0x00006123

00007690 <_spi_m_async_enable_tx_complete>:
{
	return _spi_m_async_enable_rx(dev, state);
}

int32_t _spi_m_async_enable_tx_complete(struct _spi_async_dev *dev, bool state)
{
    7690:	b580      	push	{r7, lr}
    7692:	b082      	sub	sp, #8
    7694:	af00      	add	r7, sp, #0
    7696:	6078      	str	r0, [r7, #4]
    7698:	460b      	mov	r3, r1
    769a:	70fb      	strb	r3, [r7, #3]
	ASSERT(dev && dev->prvt);
    769c:	687b      	ldr	r3, [r7, #4]
    769e:	2b00      	cmp	r3, #0
    76a0:	d005      	beq.n	76ae <_spi_m_async_enable_tx_complete+0x1e>
    76a2:	687b      	ldr	r3, [r7, #4]
    76a4:	681b      	ldr	r3, [r3, #0]
    76a6:	2b00      	cmp	r3, #0
    76a8:	d001      	beq.n	76ae <_spi_m_async_enable_tx_complete+0x1e>
    76aa:	2301      	movs	r3, #1
    76ac:	e000      	b.n	76b0 <_spi_m_async_enable_tx_complete+0x20>
    76ae:	2300      	movs	r3, #0
    76b0:	f003 0301 	and.w	r3, r3, #1
    76b4:	b2db      	uxtb	r3, r3
    76b6:	f44f 623a 	mov.w	r2, #2976	; 0xba0
    76ba:	490b      	ldr	r1, [pc, #44]	; (76e8 <_spi_m_async_enable_tx_complete+0x58>)
    76bc:	4618      	mov	r0, r3
    76be:	4b0b      	ldr	r3, [pc, #44]	; (76ec <_spi_m_async_enable_tx_complete+0x5c>)
    76c0:	4798      	blx	r3

	if (state) {
    76c2:	78fb      	ldrb	r3, [r7, #3]
    76c4:	2b00      	cmp	r3, #0
    76c6:	d005      	beq.n	76d4 <_spi_m_async_enable_tx_complete+0x44>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    76c8:	687b      	ldr	r3, [r7, #4]
    76ca:	681b      	ldr	r3, [r3, #0]
    76cc:	4618      	mov	r0, r3
    76ce:	4b08      	ldr	r3, [pc, #32]	; (76f0 <_spi_m_async_enable_tx_complete+0x60>)
    76d0:	4798      	blx	r3
    76d2:	e004      	b.n	76de <_spi_m_async_enable_tx_complete+0x4e>
	} else {
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    76d4:	687b      	ldr	r3, [r7, #4]
    76d6:	681b      	ldr	r3, [r3, #0]
    76d8:	4618      	mov	r0, r3
    76da:	4b06      	ldr	r3, [pc, #24]	; (76f4 <_spi_m_async_enable_tx_complete+0x64>)
    76dc:	4798      	blx	r3
	}

	return ERR_NONE;
    76de:	2300      	movs	r3, #0
}
    76e0:	4618      	mov	r0, r3
    76e2:	3708      	adds	r7, #8
    76e4:	46bd      	mov	sp, r7
    76e6:	bd80      	pop	{r7, pc}
    76e8:	0000e57c 	.word	0x0000e57c
    76ec:	000034fd 	.word	0x000034fd
    76f0:	000060d5 	.word	0x000060d5
    76f4:	000060ef 	.word	0x000060ef

000076f8 <_spi_m_async_write_one>:
{
	return _spi_m_async_enable_tx_complete(dev, state);
}

int32_t _spi_m_async_write_one(struct _spi_async_dev *dev, uint16_t data)
{
    76f8:	b580      	push	{r7, lr}
    76fa:	b082      	sub	sp, #8
    76fc:	af00      	add	r7, sp, #0
    76fe:	6078      	str	r0, [r7, #4]
    7700:	460b      	mov	r3, r1
    7702:	807b      	strh	r3, [r7, #2]
	ASSERT(dev && dev->prvt);
    7704:	687b      	ldr	r3, [r7, #4]
    7706:	2b00      	cmp	r3, #0
    7708:	d005      	beq.n	7716 <_spi_m_async_write_one+0x1e>
    770a:	687b      	ldr	r3, [r7, #4]
    770c:	681b      	ldr	r3, [r3, #0]
    770e:	2b00      	cmp	r3, #0
    7710:	d001      	beq.n	7716 <_spi_m_async_write_one+0x1e>
    7712:	2301      	movs	r3, #1
    7714:	e000      	b.n	7718 <_spi_m_async_write_one+0x20>
    7716:	2300      	movs	r3, #0
    7718:	f003 0301 	and.w	r3, r3, #1
    771c:	b2db      	uxtb	r3, r3
    771e:	f640 32b2 	movw	r2, #2994	; 0xbb2
    7722:	4908      	ldr	r1, [pc, #32]	; (7744 <_spi_m_async_write_one+0x4c>)
    7724:	4618      	mov	r0, r3
    7726:	4b08      	ldr	r3, [pc, #32]	; (7748 <_spi_m_async_write_one+0x50>)
    7728:	4798      	blx	r3

	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    772a:	687b      	ldr	r3, [r7, #4]
    772c:	681b      	ldr	r3, [r3, #0]
    772e:	887a      	ldrh	r2, [r7, #2]
    7730:	4611      	mov	r1, r2
    7732:	4618      	mov	r0, r3
    7734:	4b05      	ldr	r3, [pc, #20]	; (774c <_spi_m_async_write_one+0x54>)
    7736:	4798      	blx	r3

	return ERR_NONE;
    7738:	2300      	movs	r3, #0
}
    773a:	4618      	mov	r0, r3
    773c:	3708      	adds	r7, #8
    773e:	46bd      	mov	sp, r7
    7740:	bd80      	pop	{r7, pc}
    7742:	bf00      	nop
    7744:	0000e57c 	.word	0x0000e57c
    7748:	000034fd 	.word	0x000034fd
    774c:	000064f1 	.word	0x000064f1

00007750 <_spi_m_async_read_one>:

	return ERR_NONE;
}

uint16_t _spi_m_async_read_one(struct _spi_async_dev *dev)
{
    7750:	b580      	push	{r7, lr}
    7752:	b082      	sub	sp, #8
    7754:	af00      	add	r7, sp, #0
    7756:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    7758:	687b      	ldr	r3, [r7, #4]
    775a:	2b00      	cmp	r3, #0
    775c:	d005      	beq.n	776a <_spi_m_async_read_one+0x1a>
    775e:	687b      	ldr	r3, [r7, #4]
    7760:	681b      	ldr	r3, [r3, #0]
    7762:	2b00      	cmp	r3, #0
    7764:	d001      	beq.n	776a <_spi_m_async_read_one+0x1a>
    7766:	2301      	movs	r3, #1
    7768:	e000      	b.n	776c <_spi_m_async_read_one+0x1c>
    776a:	2300      	movs	r3, #0
    776c:	f003 0301 	and.w	r3, r3, #1
    7770:	b2db      	uxtb	r3, r3
    7772:	f640 32cd 	movw	r2, #3021	; 0xbcd
    7776:	4907      	ldr	r1, [pc, #28]	; (7794 <_spi_m_async_read_one+0x44>)
    7778:	4618      	mov	r0, r3
    777a:	4b07      	ldr	r3, [pc, #28]	; (7798 <_spi_m_async_read_one+0x48>)
    777c:	4798      	blx	r3

	return hri_sercomspi_read_DATA_reg(dev->prvt);
    777e:	687b      	ldr	r3, [r7, #4]
    7780:	681b      	ldr	r3, [r3, #0]
    7782:	4618      	mov	r0, r3
    7784:	4b05      	ldr	r3, [pc, #20]	; (779c <_spi_m_async_read_one+0x4c>)
    7786:	4798      	blx	r3
    7788:	4603      	mov	r3, r0
    778a:	b29b      	uxth	r3, r3
}
    778c:	4618      	mov	r0, r3
    778e:	3708      	adds	r7, #8
    7790:	46bd      	mov	sp, r7
    7792:	bd80      	pop	{r7, pc}
    7794:	0000e57c 	.word	0x0000e57c
    7798:	000034fd 	.word	0x000034fd
    779c:	0000650d 	.word	0x0000650d

000077a0 <_spi_m_async_register_callback>:
	return hri_sercomspi_read_DATA_reg(dev->prvt);
}

int32_t _spi_m_async_register_callback(struct _spi_async_dev *dev, const enum _spi_async_dev_cb_type cb_type,
                                       const FUNC_PTR func)
{
    77a0:	b580      	push	{r7, lr}
    77a2:	b086      	sub	sp, #24
    77a4:	af00      	add	r7, sp, #0
    77a6:	60f8      	str	r0, [r7, #12]
    77a8:	460b      	mov	r3, r1
    77aa:	607a      	str	r2, [r7, #4]
    77ac:	72fb      	strb	r3, [r7, #11]
	typedef void (*func_t)(void);
	struct _spi_async_dev *spid = dev;
    77ae:	68fb      	ldr	r3, [r7, #12]
    77b0:	617b      	str	r3, [r7, #20]

	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    77b2:	68fb      	ldr	r3, [r7, #12]
    77b4:	2b00      	cmp	r3, #0
    77b6:	d004      	beq.n	77c2 <_spi_m_async_register_callback+0x22>
    77b8:	7afb      	ldrb	r3, [r7, #11]
    77ba:	2b03      	cmp	r3, #3
    77bc:	d801      	bhi.n	77c2 <_spi_m_async_register_callback+0x22>
    77be:	2301      	movs	r3, #1
    77c0:	e000      	b.n	77c4 <_spi_m_async_register_callback+0x24>
    77c2:	2300      	movs	r3, #0
    77c4:	f003 0301 	and.w	r3, r3, #1
    77c8:	b2db      	uxtb	r3, r3
    77ca:	f640 32e6 	movw	r2, #3046	; 0xbe6
    77ce:	4909      	ldr	r1, [pc, #36]	; (77f4 <_spi_m_async_register_callback+0x54>)
    77d0:	4618      	mov	r0, r3
    77d2:	4b09      	ldr	r3, [pc, #36]	; (77f8 <_spi_m_async_register_callback+0x58>)
    77d4:	4798      	blx	r3

	func_t *p_ls  = (func_t *)&spid->callbacks;
    77d6:	697b      	ldr	r3, [r7, #20]
    77d8:	3308      	adds	r3, #8
    77da:	613b      	str	r3, [r7, #16]
	p_ls[cb_type] = (func_t)func;
    77dc:	7afb      	ldrb	r3, [r7, #11]
    77de:	009b      	lsls	r3, r3, #2
    77e0:	693a      	ldr	r2, [r7, #16]
    77e2:	4413      	add	r3, r2
    77e4:	687a      	ldr	r2, [r7, #4]
    77e6:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    77e8:	2300      	movs	r3, #0
}
    77ea:	4618      	mov	r0, r3
    77ec:	3718      	adds	r7, #24
    77ee:	46bd      	mov	sp, r7
    77f0:	bd80      	pop	{r7, pc}
    77f2:	bf00      	nop
    77f4:	0000e57c 	.word	0x0000e57c
    77f8:	000034fd 	.word	0x000034fd

000077fc <__NVIC_EnableIRQ>:
{
    77fc:	b480      	push	{r7}
    77fe:	b083      	sub	sp, #12
    7800:	af00      	add	r7, sp, #0
    7802:	4603      	mov	r3, r0
    7804:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7806:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    780a:	2b00      	cmp	r3, #0
    780c:	db0b      	blt.n	7826 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    780e:	4909      	ldr	r1, [pc, #36]	; (7834 <__NVIC_EnableIRQ+0x38>)
    7810:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7814:	095b      	lsrs	r3, r3, #5
    7816:	88fa      	ldrh	r2, [r7, #6]
    7818:	f002 021f 	and.w	r2, r2, #31
    781c:	2001      	movs	r0, #1
    781e:	fa00 f202 	lsl.w	r2, r0, r2
    7822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7826:	bf00      	nop
    7828:	370c      	adds	r7, #12
    782a:	46bd      	mov	sp, r7
    782c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7830:	4770      	bx	lr
    7832:	bf00      	nop
    7834:	e000e100 	.word	0xe000e100

00007838 <__NVIC_DisableIRQ>:
{
    7838:	b480      	push	{r7}
    783a:	b083      	sub	sp, #12
    783c:	af00      	add	r7, sp, #0
    783e:	4603      	mov	r3, r0
    7840:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7842:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7846:	2b00      	cmp	r3, #0
    7848:	db10      	blt.n	786c <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    784a:	490b      	ldr	r1, [pc, #44]	; (7878 <__NVIC_DisableIRQ+0x40>)
    784c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7850:	095b      	lsrs	r3, r3, #5
    7852:	88fa      	ldrh	r2, [r7, #6]
    7854:	f002 021f 	and.w	r2, r2, #31
    7858:	2001      	movs	r0, #1
    785a:	fa00 f202 	lsl.w	r2, r0, r2
    785e:	3320      	adds	r3, #32
    7860:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    7864:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7868:	f3bf 8f6f 	isb	sy
}
    786c:	bf00      	nop
    786e:	370c      	adds	r7, #12
    7870:	46bd      	mov	sp, r7
    7872:	f85d 7b04 	ldr.w	r7, [sp], #4
    7876:	4770      	bx	lr
    7878:	e000e100 	.word	0xe000e100

0000787c <__NVIC_ClearPendingIRQ>:
{
    787c:	b480      	push	{r7}
    787e:	b083      	sub	sp, #12
    7880:	af00      	add	r7, sp, #0
    7882:	4603      	mov	r3, r0
    7884:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7886:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    788a:	2b00      	cmp	r3, #0
    788c:	db0c      	blt.n	78a8 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    788e:	4909      	ldr	r1, [pc, #36]	; (78b4 <__NVIC_ClearPendingIRQ+0x38>)
    7890:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7894:	095b      	lsrs	r3, r3, #5
    7896:	88fa      	ldrh	r2, [r7, #6]
    7898:	f002 021f 	and.w	r2, r2, #31
    789c:	2001      	movs	r0, #1
    789e:	fa00 f202 	lsl.w	r2, r0, r2
    78a2:	3360      	adds	r3, #96	; 0x60
    78a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    78a8:	bf00      	nop
    78aa:	370c      	adds	r7, #12
    78ac:	46bd      	mov	sp, r7
    78ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    78b2:	4770      	bx	lr
    78b4:	e000e100 	.word	0xe000e100

000078b8 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    78b8:	b480      	push	{r7}
    78ba:	b083      	sub	sp, #12
    78bc:	af00      	add	r7, sp, #0
    78be:	6078      	str	r0, [r7, #4]
    78c0:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    78c2:	bf00      	nop
    78c4:	687b      	ldr	r3, [r7, #4]
    78c6:	691a      	ldr	r2, [r3, #16]
    78c8:	683b      	ldr	r3, [r7, #0]
    78ca:	4013      	ands	r3, r2
    78cc:	2b00      	cmp	r3, #0
    78ce:	d1f9      	bne.n	78c4 <hri_tc_wait_for_sync+0xc>
	};
}
    78d0:	bf00      	nop
    78d2:	370c      	adds	r7, #12
    78d4:	46bd      	mov	sp, r7
    78d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    78da:	4770      	bx	lr

000078dc <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    78dc:	b480      	push	{r7}
    78de:	b083      	sub	sp, #12
    78e0:	af00      	add	r7, sp, #0
    78e2:	6078      	str	r0, [r7, #4]
    78e4:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    78e6:	687b      	ldr	r3, [r7, #4]
    78e8:	691a      	ldr	r2, [r3, #16]
    78ea:	683b      	ldr	r3, [r7, #0]
    78ec:	4013      	ands	r3, r2
    78ee:	2b00      	cmp	r3, #0
    78f0:	bf14      	ite	ne
    78f2:	2301      	movne	r3, #1
    78f4:	2300      	moveq	r3, #0
    78f6:	b2db      	uxtb	r3, r3
}
    78f8:	4618      	mov	r0, r3
    78fa:	370c      	adds	r7, #12
    78fc:	46bd      	mov	sp, r7
    78fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    7902:	4770      	bx	lr

00007904 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    7904:	b480      	push	{r7}
    7906:	b083      	sub	sp, #12
    7908:	af00      	add	r7, sp, #0
    790a:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    790c:	687b      	ldr	r3, [r7, #4]
    790e:	7a9b      	ldrb	r3, [r3, #10]
    7910:	b2db      	uxtb	r3, r3
    7912:	f003 0301 	and.w	r3, r3, #1
    7916:	2b00      	cmp	r3, #0
    7918:	bf14      	ite	ne
    791a:	2301      	movne	r3, #1
    791c:	2300      	moveq	r3, #0
    791e:	b2db      	uxtb	r3, r3
}
    7920:	4618      	mov	r0, r3
    7922:	370c      	adds	r7, #12
    7924:	46bd      	mov	sp, r7
    7926:	f85d 7b04 	ldr.w	r7, [sp], #4
    792a:	4770      	bx	lr

0000792c <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    792c:	b480      	push	{r7}
    792e:	b083      	sub	sp, #12
    7930:	af00      	add	r7, sp, #0
    7932:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    7934:	687b      	ldr	r3, [r7, #4]
    7936:	2201      	movs	r2, #1
    7938:	729a      	strb	r2, [r3, #10]
}
    793a:	bf00      	nop
    793c:	370c      	adds	r7, #12
    793e:	46bd      	mov	sp, r7
    7940:	f85d 7b04 	ldr.w	r7, [sp], #4
    7944:	4770      	bx	lr

00007946 <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    7946:	b480      	push	{r7}
    7948:	b083      	sub	sp, #12
    794a:	af00      	add	r7, sp, #0
    794c:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    794e:	687b      	ldr	r3, [r7, #4]
    7950:	2202      	movs	r2, #2
    7952:	729a      	strb	r2, [r3, #10]
}
    7954:	bf00      	nop
    7956:	370c      	adds	r7, #12
    7958:	46bd      	mov	sp, r7
    795a:	f85d 7b04 	ldr.w	r7, [sp], #4
    795e:	4770      	bx	lr

00007960 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    7960:	b480      	push	{r7}
    7962:	b083      	sub	sp, #12
    7964:	af00      	add	r7, sp, #0
    7966:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    7968:	687b      	ldr	r3, [r7, #4]
    796a:	2201      	movs	r2, #1
    796c:	725a      	strb	r2, [r3, #9]
}
    796e:	bf00      	nop
    7970:	370c      	adds	r7, #12
    7972:	46bd      	mov	sp, r7
    7974:	f85d 7b04 	ldr.w	r7, [sp], #4
    7978:	4770      	bx	lr

0000797a <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    797a:	b480      	push	{r7}
    797c:	b083      	sub	sp, #12
    797e:	af00      	add	r7, sp, #0
    7980:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    7982:	687b      	ldr	r3, [r7, #4]
    7984:	7a5b      	ldrb	r3, [r3, #9]
    7986:	b2db      	uxtb	r3, r3
    7988:	085b      	lsrs	r3, r3, #1
    798a:	f003 0301 	and.w	r3, r3, #1
    798e:	2b00      	cmp	r3, #0
    7990:	bf14      	ite	ne
    7992:	2301      	movne	r3, #1
    7994:	2300      	moveq	r3, #0
    7996:	b2db      	uxtb	r3, r3
}
    7998:	4618      	mov	r0, r3
    799a:	370c      	adds	r7, #12
    799c:	46bd      	mov	sp, r7
    799e:	f85d 7b04 	ldr.w	r7, [sp], #4
    79a2:	4770      	bx	lr

000079a4 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    79a4:	b580      	push	{r7, lr}
    79a6:	b082      	sub	sp, #8
    79a8:	af00      	add	r7, sp, #0
    79aa:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    79ac:	687b      	ldr	r3, [r7, #4]
    79ae:	681b      	ldr	r3, [r3, #0]
    79b0:	f043 0202 	orr.w	r2, r3, #2
    79b4:	687b      	ldr	r3, [r7, #4]
    79b6:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    79b8:	2103      	movs	r1, #3
    79ba:	6878      	ldr	r0, [r7, #4]
    79bc:	4b02      	ldr	r3, [pc, #8]	; (79c8 <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    79be:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    79c0:	bf00      	nop
    79c2:	3708      	adds	r7, #8
    79c4:	46bd      	mov	sp, r7
    79c6:	bd80      	pop	{r7, pc}
    79c8:	000078b9 	.word	0x000078b9

000079cc <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    79cc:	b580      	push	{r7, lr}
    79ce:	b084      	sub	sp, #16
    79d0:	af00      	add	r7, sp, #0
    79d2:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    79d4:	2103      	movs	r1, #3
    79d6:	6878      	ldr	r0, [r7, #4]
    79d8:	4b09      	ldr	r3, [pc, #36]	; (7a00 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    79da:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    79dc:	687b      	ldr	r3, [r7, #4]
    79de:	681b      	ldr	r3, [r3, #0]
    79e0:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    79e2:	68fb      	ldr	r3, [r7, #12]
    79e4:	085b      	lsrs	r3, r3, #1
    79e6:	f003 0301 	and.w	r3, r3, #1
    79ea:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    79ec:	68fb      	ldr	r3, [r7, #12]
    79ee:	2b00      	cmp	r3, #0
    79f0:	bf14      	ite	ne
    79f2:	2301      	movne	r3, #1
    79f4:	2300      	moveq	r3, #0
    79f6:	b2db      	uxtb	r3, r3
}
    79f8:	4618      	mov	r0, r3
    79fa:	3710      	adds	r7, #16
    79fc:	46bd      	mov	sp, r7
    79fe:	bd80      	pop	{r7, pc}
    7a00:	000078b9 	.word	0x000078b9

00007a04 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7a04:	b580      	push	{r7, lr}
    7a06:	b082      	sub	sp, #8
    7a08:	af00      	add	r7, sp, #0
    7a0a:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    7a0c:	687b      	ldr	r3, [r7, #4]
    7a0e:	681b      	ldr	r3, [r3, #0]
    7a10:	f023 0202 	bic.w	r2, r3, #2
    7a14:	687b      	ldr	r3, [r7, #4]
    7a16:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7a18:	2103      	movs	r1, #3
    7a1a:	6878      	ldr	r0, [r7, #4]
    7a1c:	4b02      	ldr	r3, [pc, #8]	; (7a28 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    7a1e:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7a20:	bf00      	nop
    7a22:	3708      	adds	r7, #8
    7a24:	46bd      	mov	sp, r7
    7a26:	bd80      	pop	{r7, pc}
    7a28:	000078b9 	.word	0x000078b9

00007a2c <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    7a2c:	b580      	push	{r7, lr}
    7a2e:	b084      	sub	sp, #16
    7a30:	af00      	add	r7, sp, #0
    7a32:	6078      	str	r0, [r7, #4]
    7a34:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7a36:	2103      	movs	r1, #3
    7a38:	6878      	ldr	r0, [r7, #4]
    7a3a:	4b07      	ldr	r3, [pc, #28]	; (7a58 <hri_tc_get_CTRLA_reg+0x2c>)
    7a3c:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7a3e:	687b      	ldr	r3, [r7, #4]
    7a40:	681b      	ldr	r3, [r3, #0]
    7a42:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7a44:	68fa      	ldr	r2, [r7, #12]
    7a46:	683b      	ldr	r3, [r7, #0]
    7a48:	4013      	ands	r3, r2
    7a4a:	60fb      	str	r3, [r7, #12]
	return tmp;
    7a4c:	68fb      	ldr	r3, [r7, #12]
}
    7a4e:	4618      	mov	r0, r3
    7a50:	3710      	adds	r7, #16
    7a52:	46bd      	mov	sp, r7
    7a54:	bd80      	pop	{r7, pc}
    7a56:	bf00      	nop
    7a58:	000078b9 	.word	0x000078b9

00007a5c <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    7a5c:	b580      	push	{r7, lr}
    7a5e:	b082      	sub	sp, #8
    7a60:	af00      	add	r7, sp, #0
    7a62:	6078      	str	r0, [r7, #4]
    7a64:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    7a66:	687b      	ldr	r3, [r7, #4]
    7a68:	683a      	ldr	r2, [r7, #0]
    7a6a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7a6c:	2103      	movs	r1, #3
    7a6e:	6878      	ldr	r0, [r7, #4]
    7a70:	4b02      	ldr	r3, [pc, #8]	; (7a7c <hri_tc_write_CTRLA_reg+0x20>)
    7a72:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7a74:	bf00      	nop
    7a76:	3708      	adds	r7, #8
    7a78:	46bd      	mov	sp, r7
    7a7a:	bd80      	pop	{r7, pc}
    7a7c:	000078b9 	.word	0x000078b9

00007a80 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    7a80:	b480      	push	{r7}
    7a82:	b083      	sub	sp, #12
    7a84:	af00      	add	r7, sp, #0
    7a86:	6078      	str	r0, [r7, #4]
    7a88:	460b      	mov	r3, r1
    7a8a:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    7a8c:	687b      	ldr	r3, [r7, #4]
    7a8e:	887a      	ldrh	r2, [r7, #2]
    7a90:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    7a92:	bf00      	nop
    7a94:	370c      	adds	r7, #12
    7a96:	46bd      	mov	sp, r7
    7a98:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a9c:	4770      	bx	lr

00007a9e <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    7a9e:	b480      	push	{r7}
    7aa0:	b083      	sub	sp, #12
    7aa2:	af00      	add	r7, sp, #0
    7aa4:	6078      	str	r0, [r7, #4]
    7aa6:	460b      	mov	r3, r1
    7aa8:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    7aaa:	687b      	ldr	r3, [r7, #4]
    7aac:	78fa      	ldrb	r2, [r7, #3]
    7aae:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    7ab0:	bf00      	nop
    7ab2:	370c      	adds	r7, #12
    7ab4:	46bd      	mov	sp, r7
    7ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7aba:	4770      	bx	lr

00007abc <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    7abc:	b480      	push	{r7}
    7abe:	b083      	sub	sp, #12
    7ac0:	af00      	add	r7, sp, #0
    7ac2:	6078      	str	r0, [r7, #4]
    7ac4:	460b      	mov	r3, r1
    7ac6:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    7ac8:	687b      	ldr	r3, [r7, #4]
    7aca:	78fa      	ldrb	r2, [r7, #3]
    7acc:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    7ace:	bf00      	nop
    7ad0:	370c      	adds	r7, #12
    7ad2:	46bd      	mov	sp, r7
    7ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ad8:	4770      	bx	lr
	...

00007adc <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    7adc:	b580      	push	{r7, lr}
    7ade:	b082      	sub	sp, #8
    7ae0:	af00      	add	r7, sp, #0
    7ae2:	6078      	str	r0, [r7, #4]
    7ae4:	460b      	mov	r3, r1
    7ae6:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    7ae8:	687b      	ldr	r3, [r7, #4]
    7aea:	78fa      	ldrb	r2, [r7, #3]
    7aec:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    7aee:	2120      	movs	r1, #32
    7af0:	6878      	ldr	r0, [r7, #4]
    7af2:	4b03      	ldr	r3, [pc, #12]	; (7b00 <hri_tccount8_write_PER_reg+0x24>)
    7af4:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7af6:	bf00      	nop
    7af8:	3708      	adds	r7, #8
    7afa:	46bd      	mov	sp, r7
    7afc:	bd80      	pop	{r7, pc}
    7afe:	bf00      	nop
    7b00:	000078b9 	.word	0x000078b9

00007b04 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    7b04:	b580      	push	{r7, lr}
    7b06:	b082      	sub	sp, #8
    7b08:	af00      	add	r7, sp, #0
    7b0a:	6078      	str	r0, [r7, #4]
    7b0c:	460b      	mov	r3, r1
    7b0e:	70fb      	strb	r3, [r7, #3]
    7b10:	4613      	mov	r3, r2
    7b12:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    7b14:	78fb      	ldrb	r3, [r7, #3]
    7b16:	687a      	ldr	r2, [r7, #4]
    7b18:	4413      	add	r3, r2
    7b1a:	78ba      	ldrb	r2, [r7, #2]
    7b1c:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7b1e:	21c0      	movs	r1, #192	; 0xc0
    7b20:	6878      	ldr	r0, [r7, #4]
    7b22:	4b03      	ldr	r3, [pc, #12]	; (7b30 <hri_tccount8_write_CC_reg+0x2c>)
    7b24:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7b26:	bf00      	nop
    7b28:	3708      	adds	r7, #8
    7b2a:	46bd      	mov	sp, r7
    7b2c:	bd80      	pop	{r7, pc}
    7b2e:	bf00      	nop
    7b30:	000078b9 	.word	0x000078b9

00007b34 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    7b34:	b580      	push	{r7, lr}
    7b36:	b082      	sub	sp, #8
    7b38:	af00      	add	r7, sp, #0
    7b3a:	6078      	str	r0, [r7, #4]
    7b3c:	460b      	mov	r3, r1
    7b3e:	70fb      	strb	r3, [r7, #3]
    7b40:	4613      	mov	r3, r2
    7b42:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    7b44:	78fb      	ldrb	r3, [r7, #3]
    7b46:	687a      	ldr	r2, [r7, #4]
    7b48:	330c      	adds	r3, #12
    7b4a:	005b      	lsls	r3, r3, #1
    7b4c:	4413      	add	r3, r2
    7b4e:	883a      	ldrh	r2, [r7, #0]
    7b50:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7b52:	21c0      	movs	r1, #192	; 0xc0
    7b54:	6878      	ldr	r0, [r7, #4]
    7b56:	4b03      	ldr	r3, [pc, #12]	; (7b64 <hri_tccount16_write_CC_reg+0x30>)
    7b58:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7b5a:	bf00      	nop
    7b5c:	3708      	adds	r7, #8
    7b5e:	46bd      	mov	sp, r7
    7b60:	bd80      	pop	{r7, pc}
    7b62:	bf00      	nop
    7b64:	000078b9 	.word	0x000078b9

00007b68 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    7b68:	b580      	push	{r7, lr}
    7b6a:	b084      	sub	sp, #16
    7b6c:	af00      	add	r7, sp, #0
    7b6e:	60f8      	str	r0, [r7, #12]
    7b70:	460b      	mov	r3, r1
    7b72:	607a      	str	r2, [r7, #4]
    7b74:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    7b76:	7afb      	ldrb	r3, [r7, #11]
    7b78:	68fa      	ldr	r2, [r7, #12]
    7b7a:	3306      	adds	r3, #6
    7b7c:	009b      	lsls	r3, r3, #2
    7b7e:	4413      	add	r3, r2
    7b80:	687a      	ldr	r2, [r7, #4]
    7b82:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7b84:	21c0      	movs	r1, #192	; 0xc0
    7b86:	68f8      	ldr	r0, [r7, #12]
    7b88:	4b02      	ldr	r3, [pc, #8]	; (7b94 <hri_tccount32_write_CC_reg+0x2c>)
    7b8a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7b8c:	bf00      	nop
    7b8e:	3710      	adds	r7, #16
    7b90:	46bd      	mov	sp, r7
    7b92:	bd80      	pop	{r7, pc}
    7b94:	000078b9 	.word	0x000078b9

00007b98 <_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _timer_init(struct _timer_device *const device, void *const hw)
{
    7b98:	b580      	push	{r7, lr}
    7b9a:	b084      	sub	sp, #16
    7b9c:	af00      	add	r7, sp, #0
    7b9e:	6078      	str	r0, [r7, #4]
    7ba0:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    7ba2:	6838      	ldr	r0, [r7, #0]
    7ba4:	4b93      	ldr	r3, [pc, #588]	; (7df4 <_timer_init+0x25c>)
    7ba6:	4798      	blx	r3
    7ba8:	4603      	mov	r3, r0
    7baa:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    7bac:	687b      	ldr	r3, [r7, #4]
    7bae:	683a      	ldr	r2, [r7, #0]
    7bb0:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    7bb2:	2295      	movs	r2, #149	; 0x95
    7bb4:	4990      	ldr	r1, [pc, #576]	; (7df8 <_timer_init+0x260>)
    7bb6:	2001      	movs	r0, #1
    7bb8:	4b90      	ldr	r3, [pc, #576]	; (7dfc <_timer_init+0x264>)
    7bba:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    7bbc:	2101      	movs	r1, #1
    7bbe:	6838      	ldr	r0, [r7, #0]
    7bc0:	4b8f      	ldr	r3, [pc, #572]	; (7e00 <_timer_init+0x268>)
    7bc2:	4798      	blx	r3
    7bc4:	4603      	mov	r3, r0
    7bc6:	f083 0301 	eor.w	r3, r3, #1
    7bca:	b2db      	uxtb	r3, r3
    7bcc:	2b00      	cmp	r3, #0
    7bce:	d011      	beq.n	7bf4 <_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    7bd0:	2102      	movs	r1, #2
    7bd2:	6838      	ldr	r0, [r7, #0]
    7bd4:	4b8b      	ldr	r3, [pc, #556]	; (7e04 <_timer_init+0x26c>)
    7bd6:	4798      	blx	r3
    7bd8:	4603      	mov	r3, r0
    7bda:	2b00      	cmp	r3, #0
    7bdc:	d006      	beq.n	7bec <_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    7bde:	6838      	ldr	r0, [r7, #0]
    7be0:	4b89      	ldr	r3, [pc, #548]	; (7e08 <_timer_init+0x270>)
    7be2:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    7be4:	2102      	movs	r1, #2
    7be6:	6838      	ldr	r0, [r7, #0]
    7be8:	4b88      	ldr	r3, [pc, #544]	; (7e0c <_timer_init+0x274>)
    7bea:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    7bec:	2101      	movs	r1, #1
    7bee:	6838      	ldr	r0, [r7, #0]
    7bf0:	4b87      	ldr	r3, [pc, #540]	; (7e10 <_timer_init+0x278>)
    7bf2:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    7bf4:	2101      	movs	r1, #1
    7bf6:	6838      	ldr	r0, [r7, #0]
    7bf8:	4b84      	ldr	r3, [pc, #528]	; (7e0c <_timer_init+0x274>)
    7bfa:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    7bfc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7c00:	4984      	ldr	r1, [pc, #528]	; (7e14 <_timer_init+0x27c>)
    7c02:	4613      	mov	r3, r2
    7c04:	009b      	lsls	r3, r3, #2
    7c06:	4413      	add	r3, r2
    7c08:	009b      	lsls	r3, r3, #2
    7c0a:	440b      	add	r3, r1
    7c0c:	3304      	adds	r3, #4
    7c0e:	681b      	ldr	r3, [r3, #0]
    7c10:	4619      	mov	r1, r3
    7c12:	6838      	ldr	r0, [r7, #0]
    7c14:	4b7e      	ldr	r3, [pc, #504]	; (7e10 <_timer_init+0x278>)
    7c16:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    7c18:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7c1c:	497d      	ldr	r1, [pc, #500]	; (7e14 <_timer_init+0x27c>)
    7c1e:	4613      	mov	r3, r2
    7c20:	009b      	lsls	r3, r3, #2
    7c22:	4413      	add	r3, r2
    7c24:	009b      	lsls	r3, r3, #2
    7c26:	440b      	add	r3, r1
    7c28:	330a      	adds	r3, #10
    7c2a:	781b      	ldrb	r3, [r3, #0]
    7c2c:	4619      	mov	r1, r3
    7c2e:	6838      	ldr	r0, [r7, #0]
    7c30:	4b79      	ldr	r3, [pc, #484]	; (7e18 <_timer_init+0x280>)
    7c32:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    7c34:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7c38:	4976      	ldr	r1, [pc, #472]	; (7e14 <_timer_init+0x27c>)
    7c3a:	4613      	mov	r3, r2
    7c3c:	009b      	lsls	r3, r3, #2
    7c3e:	4413      	add	r3, r2
    7c40:	009b      	lsls	r3, r3, #2
    7c42:	440b      	add	r3, r1
    7c44:	3308      	adds	r3, #8
    7c46:	881b      	ldrh	r3, [r3, #0]
    7c48:	4619      	mov	r1, r3
    7c4a:	6838      	ldr	r0, [r7, #0]
    7c4c:	4b73      	ldr	r3, [pc, #460]	; (7e1c <_timer_init+0x284>)
    7c4e:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    7c50:	2101      	movs	r1, #1
    7c52:	6838      	ldr	r0, [r7, #0]
    7c54:	4b72      	ldr	r3, [pc, #456]	; (7e20 <_timer_init+0x288>)
    7c56:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    7c58:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7c5c:	496d      	ldr	r1, [pc, #436]	; (7e14 <_timer_init+0x27c>)
    7c5e:	4613      	mov	r3, r2
    7c60:	009b      	lsls	r3, r3, #2
    7c62:	4413      	add	r3, r2
    7c64:	009b      	lsls	r3, r3, #2
    7c66:	440b      	add	r3, r1
    7c68:	3304      	adds	r3, #4
    7c6a:	681b      	ldr	r3, [r3, #0]
    7c6c:	f003 030c 	and.w	r3, r3, #12
    7c70:	2b08      	cmp	r3, #8
    7c72:	d11e      	bne.n	7cb2 <_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    7c74:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7c78:	4966      	ldr	r1, [pc, #408]	; (7e14 <_timer_init+0x27c>)
    7c7a:	4613      	mov	r3, r2
    7c7c:	009b      	lsls	r3, r3, #2
    7c7e:	4413      	add	r3, r2
    7c80:	009b      	lsls	r3, r3, #2
    7c82:	440b      	add	r3, r1
    7c84:	330c      	adds	r3, #12
    7c86:	681b      	ldr	r3, [r3, #0]
    7c88:	461a      	mov	r2, r3
    7c8a:	2100      	movs	r1, #0
    7c8c:	6838      	ldr	r0, [r7, #0]
    7c8e:	4b65      	ldr	r3, [pc, #404]	; (7e24 <_timer_init+0x28c>)
    7c90:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    7c92:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7c96:	495f      	ldr	r1, [pc, #380]	; (7e14 <_timer_init+0x27c>)
    7c98:	4613      	mov	r3, r2
    7c9a:	009b      	lsls	r3, r3, #2
    7c9c:	4413      	add	r3, r2
    7c9e:	009b      	lsls	r3, r3, #2
    7ca0:	440b      	add	r3, r1
    7ca2:	3310      	adds	r3, #16
    7ca4:	681b      	ldr	r3, [r3, #0]
    7ca6:	461a      	mov	r2, r3
    7ca8:	2101      	movs	r1, #1
    7caa:	6838      	ldr	r0, [r7, #0]
    7cac:	4b5d      	ldr	r3, [pc, #372]	; (7e24 <_timer_init+0x28c>)
    7cae:	4798      	blx	r3
    7cb0:	e06a      	b.n	7d88 <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    7cb2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7cb6:	4957      	ldr	r1, [pc, #348]	; (7e14 <_timer_init+0x27c>)
    7cb8:	4613      	mov	r3, r2
    7cba:	009b      	lsls	r3, r3, #2
    7cbc:	4413      	add	r3, r2
    7cbe:	009b      	lsls	r3, r3, #2
    7cc0:	440b      	add	r3, r1
    7cc2:	3304      	adds	r3, #4
    7cc4:	681b      	ldr	r3, [r3, #0]
    7cc6:	f003 030c 	and.w	r3, r3, #12
    7cca:	2b00      	cmp	r3, #0
    7ccc:	d120      	bne.n	7d10 <_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    7cce:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7cd2:	4950      	ldr	r1, [pc, #320]	; (7e14 <_timer_init+0x27c>)
    7cd4:	4613      	mov	r3, r2
    7cd6:	009b      	lsls	r3, r3, #2
    7cd8:	4413      	add	r3, r2
    7cda:	009b      	lsls	r3, r3, #2
    7cdc:	440b      	add	r3, r1
    7cde:	330c      	adds	r3, #12
    7ce0:	681b      	ldr	r3, [r3, #0]
    7ce2:	b29b      	uxth	r3, r3
    7ce4:	461a      	mov	r2, r3
    7ce6:	2100      	movs	r1, #0
    7ce8:	6838      	ldr	r0, [r7, #0]
    7cea:	4b4f      	ldr	r3, [pc, #316]	; (7e28 <_timer_init+0x290>)
    7cec:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    7cee:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7cf2:	4948      	ldr	r1, [pc, #288]	; (7e14 <_timer_init+0x27c>)
    7cf4:	4613      	mov	r3, r2
    7cf6:	009b      	lsls	r3, r3, #2
    7cf8:	4413      	add	r3, r2
    7cfa:	009b      	lsls	r3, r3, #2
    7cfc:	440b      	add	r3, r1
    7cfe:	3310      	adds	r3, #16
    7d00:	681b      	ldr	r3, [r3, #0]
    7d02:	b29b      	uxth	r3, r3
    7d04:	461a      	mov	r2, r3
    7d06:	2101      	movs	r1, #1
    7d08:	6838      	ldr	r0, [r7, #0]
    7d0a:	4b47      	ldr	r3, [pc, #284]	; (7e28 <_timer_init+0x290>)
    7d0c:	4798      	blx	r3
    7d0e:	e03b      	b.n	7d88 <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    7d10:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7d14:	493f      	ldr	r1, [pc, #252]	; (7e14 <_timer_init+0x27c>)
    7d16:	4613      	mov	r3, r2
    7d18:	009b      	lsls	r3, r3, #2
    7d1a:	4413      	add	r3, r2
    7d1c:	009b      	lsls	r3, r3, #2
    7d1e:	440b      	add	r3, r1
    7d20:	3304      	adds	r3, #4
    7d22:	681b      	ldr	r3, [r3, #0]
    7d24:	f003 030c 	and.w	r3, r3, #12
    7d28:	2b04      	cmp	r3, #4
    7d2a:	d12d      	bne.n	7d88 <_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    7d2c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7d30:	4938      	ldr	r1, [pc, #224]	; (7e14 <_timer_init+0x27c>)
    7d32:	4613      	mov	r3, r2
    7d34:	009b      	lsls	r3, r3, #2
    7d36:	4413      	add	r3, r2
    7d38:	009b      	lsls	r3, r3, #2
    7d3a:	440b      	add	r3, r1
    7d3c:	330c      	adds	r3, #12
    7d3e:	681b      	ldr	r3, [r3, #0]
    7d40:	b2db      	uxtb	r3, r3
    7d42:	461a      	mov	r2, r3
    7d44:	2100      	movs	r1, #0
    7d46:	6838      	ldr	r0, [r7, #0]
    7d48:	4b38      	ldr	r3, [pc, #224]	; (7e2c <_timer_init+0x294>)
    7d4a:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    7d4c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7d50:	4930      	ldr	r1, [pc, #192]	; (7e14 <_timer_init+0x27c>)
    7d52:	4613      	mov	r3, r2
    7d54:	009b      	lsls	r3, r3, #2
    7d56:	4413      	add	r3, r2
    7d58:	009b      	lsls	r3, r3, #2
    7d5a:	440b      	add	r3, r1
    7d5c:	3310      	adds	r3, #16
    7d5e:	681b      	ldr	r3, [r3, #0]
    7d60:	b2db      	uxtb	r3, r3
    7d62:	461a      	mov	r2, r3
    7d64:	2101      	movs	r1, #1
    7d66:	6838      	ldr	r0, [r7, #0]
    7d68:	4b30      	ldr	r3, [pc, #192]	; (7e2c <_timer_init+0x294>)
    7d6a:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    7d6c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7d70:	4928      	ldr	r1, [pc, #160]	; (7e14 <_timer_init+0x27c>)
    7d72:	4613      	mov	r3, r2
    7d74:	009b      	lsls	r3, r3, #2
    7d76:	4413      	add	r3, r2
    7d78:	009b      	lsls	r3, r3, #2
    7d7a:	440b      	add	r3, r1
    7d7c:	330b      	adds	r3, #11
    7d7e:	781b      	ldrb	r3, [r3, #0]
    7d80:	4619      	mov	r1, r3
    7d82:	6838      	ldr	r0, [r7, #0]
    7d84:	4b2a      	ldr	r3, [pc, #168]	; (7e30 <_timer_init+0x298>)
    7d86:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    7d88:	6838      	ldr	r0, [r7, #0]
    7d8a:	4b2a      	ldr	r3, [pc, #168]	; (7e34 <_timer_init+0x29c>)
    7d8c:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    7d8e:	6879      	ldr	r1, [r7, #4]
    7d90:	6838      	ldr	r0, [r7, #0]
    7d92:	4b29      	ldr	r3, [pc, #164]	; (7e38 <_timer_init+0x2a0>)
    7d94:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    7d96:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7d9a:	491e      	ldr	r1, [pc, #120]	; (7e14 <_timer_init+0x27c>)
    7d9c:	4613      	mov	r3, r2
    7d9e:	009b      	lsls	r3, r3, #2
    7da0:	4413      	add	r3, r2
    7da2:	009b      	lsls	r3, r3, #2
    7da4:	440b      	add	r3, r1
    7da6:	3302      	adds	r3, #2
    7da8:	f9b3 3000 	ldrsh.w	r3, [r3]
    7dac:	4618      	mov	r0, r3
    7dae:	4b23      	ldr	r3, [pc, #140]	; (7e3c <_timer_init+0x2a4>)
    7db0:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    7db2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7db6:	4917      	ldr	r1, [pc, #92]	; (7e14 <_timer_init+0x27c>)
    7db8:	4613      	mov	r3, r2
    7dba:	009b      	lsls	r3, r3, #2
    7dbc:	4413      	add	r3, r2
    7dbe:	009b      	lsls	r3, r3, #2
    7dc0:	440b      	add	r3, r1
    7dc2:	3302      	adds	r3, #2
    7dc4:	f9b3 3000 	ldrsh.w	r3, [r3]
    7dc8:	4618      	mov	r0, r3
    7dca:	4b1d      	ldr	r3, [pc, #116]	; (7e40 <_timer_init+0x2a8>)
    7dcc:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    7dce:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7dd2:	4910      	ldr	r1, [pc, #64]	; (7e14 <_timer_init+0x27c>)
    7dd4:	4613      	mov	r3, r2
    7dd6:	009b      	lsls	r3, r3, #2
    7dd8:	4413      	add	r3, r2
    7dda:	009b      	lsls	r3, r3, #2
    7ddc:	440b      	add	r3, r1
    7dde:	3302      	adds	r3, #2
    7de0:	f9b3 3000 	ldrsh.w	r3, [r3]
    7de4:	4618      	mov	r0, r3
    7de6:	4b17      	ldr	r3, [pc, #92]	; (7e44 <_timer_init+0x2ac>)
    7de8:	4798      	blx	r3

	return ERR_NONE;
    7dea:	2300      	movs	r3, #0
}
    7dec:	4618      	mov	r0, r3
    7dee:	3710      	adds	r7, #16
    7df0:	46bd      	mov	sp, r7
    7df2:	bd80      	pop	{r7, pc}
    7df4:	00008275 	.word	0x00008275
    7df8:	0000e5dc 	.word	0x0000e5dc
    7dfc:	000034fd 	.word	0x000034fd
    7e00:	000078dd 	.word	0x000078dd
    7e04:	00007a2d 	.word	0x00007a2d
    7e08:	00007a05 	.word	0x00007a05
    7e0c:	000078b9 	.word	0x000078b9
    7e10:	00007a5d 	.word	0x00007a5d
    7e14:	20000048 	.word	0x20000048
    7e18:	00007abd 	.word	0x00007abd
    7e1c:	00007a81 	.word	0x00007a81
    7e20:	00007a9f 	.word	0x00007a9f
    7e24:	00007b69 	.word	0x00007b69
    7e28:	00007b35 	.word	0x00007b35
    7e2c:	00007b05 	.word	0x00007b05
    7e30:	00007add 	.word	0x00007add
    7e34:	00007961 	.word	0x00007961
    7e38:	000082dd 	.word	0x000082dd
    7e3c:	00007839 	.word	0x00007839
    7e40:	0000787d 	.word	0x0000787d
    7e44:	000077fd 	.word	0x000077fd

00007e48 <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    7e48:	b580      	push	{r7, lr}
    7e4a:	b084      	sub	sp, #16
    7e4c:	af00      	add	r7, sp, #0
    7e4e:	6078      	str	r0, [r7, #4]
    7e50:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    7e52:	6838      	ldr	r0, [r7, #0]
    7e54:	4b73      	ldr	r3, [pc, #460]	; (8024 <_pwm_init+0x1dc>)
    7e56:	4798      	blx	r3
    7e58:	4603      	mov	r3, r0
    7e5a:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    7e5c:	687b      	ldr	r3, [r7, #4]
    7e5e:	683a      	ldr	r2, [r7, #0]
    7e60:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    7e62:	2101      	movs	r1, #1
    7e64:	6838      	ldr	r0, [r7, #0]
    7e66:	4b70      	ldr	r3, [pc, #448]	; (8028 <_pwm_init+0x1e0>)
    7e68:	4798      	blx	r3
    7e6a:	4603      	mov	r3, r0
    7e6c:	f083 0301 	eor.w	r3, r3, #1
    7e70:	b2db      	uxtb	r3, r3
    7e72:	2b00      	cmp	r3, #0
    7e74:	d011      	beq.n	7e9a <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    7e76:	2102      	movs	r1, #2
    7e78:	6838      	ldr	r0, [r7, #0]
    7e7a:	4b6c      	ldr	r3, [pc, #432]	; (802c <_pwm_init+0x1e4>)
    7e7c:	4798      	blx	r3
    7e7e:	4603      	mov	r3, r0
    7e80:	2b00      	cmp	r3, #0
    7e82:	d006      	beq.n	7e92 <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    7e84:	6838      	ldr	r0, [r7, #0]
    7e86:	4b6a      	ldr	r3, [pc, #424]	; (8030 <_pwm_init+0x1e8>)
    7e88:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    7e8a:	2102      	movs	r1, #2
    7e8c:	6838      	ldr	r0, [r7, #0]
    7e8e:	4b69      	ldr	r3, [pc, #420]	; (8034 <_pwm_init+0x1ec>)
    7e90:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    7e92:	2101      	movs	r1, #1
    7e94:	6838      	ldr	r0, [r7, #0]
    7e96:	4b68      	ldr	r3, [pc, #416]	; (8038 <_pwm_init+0x1f0>)
    7e98:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    7e9a:	2101      	movs	r1, #1
    7e9c:	6838      	ldr	r0, [r7, #0]
    7e9e:	4b65      	ldr	r3, [pc, #404]	; (8034 <_pwm_init+0x1ec>)
    7ea0:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    7ea2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7ea6:	4965      	ldr	r1, [pc, #404]	; (803c <_pwm_init+0x1f4>)
    7ea8:	4613      	mov	r3, r2
    7eaa:	009b      	lsls	r3, r3, #2
    7eac:	4413      	add	r3, r2
    7eae:	009b      	lsls	r3, r3, #2
    7eb0:	440b      	add	r3, r1
    7eb2:	3304      	adds	r3, #4
    7eb4:	681b      	ldr	r3, [r3, #0]
    7eb6:	4619      	mov	r1, r3
    7eb8:	6838      	ldr	r0, [r7, #0]
    7eba:	4b5f      	ldr	r3, [pc, #380]	; (8038 <_pwm_init+0x1f0>)
    7ebc:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    7ebe:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7ec2:	495e      	ldr	r1, [pc, #376]	; (803c <_pwm_init+0x1f4>)
    7ec4:	4613      	mov	r3, r2
    7ec6:	009b      	lsls	r3, r3, #2
    7ec8:	4413      	add	r3, r2
    7eca:	009b      	lsls	r3, r3, #2
    7ecc:	440b      	add	r3, r1
    7ece:	330a      	adds	r3, #10
    7ed0:	781b      	ldrb	r3, [r3, #0]
    7ed2:	4619      	mov	r1, r3
    7ed4:	6838      	ldr	r0, [r7, #0]
    7ed6:	4b5a      	ldr	r3, [pc, #360]	; (8040 <_pwm_init+0x1f8>)
    7ed8:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    7eda:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7ede:	4957      	ldr	r1, [pc, #348]	; (803c <_pwm_init+0x1f4>)
    7ee0:	4613      	mov	r3, r2
    7ee2:	009b      	lsls	r3, r3, #2
    7ee4:	4413      	add	r3, r2
    7ee6:	009b      	lsls	r3, r3, #2
    7ee8:	440b      	add	r3, r1
    7eea:	3308      	adds	r3, #8
    7eec:	881b      	ldrh	r3, [r3, #0]
    7eee:	4619      	mov	r1, r3
    7ef0:	6838      	ldr	r0, [r7, #0]
    7ef2:	4b54      	ldr	r3, [pc, #336]	; (8044 <_pwm_init+0x1fc>)
    7ef4:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    7ef6:	2103      	movs	r1, #3
    7ef8:	6838      	ldr	r0, [r7, #0]
    7efa:	4b53      	ldr	r3, [pc, #332]	; (8048 <_pwm_init+0x200>)
    7efc:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    7efe:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7f02:	494e      	ldr	r1, [pc, #312]	; (803c <_pwm_init+0x1f4>)
    7f04:	4613      	mov	r3, r2
    7f06:	009b      	lsls	r3, r3, #2
    7f08:	4413      	add	r3, r2
    7f0a:	009b      	lsls	r3, r3, #2
    7f0c:	440b      	add	r3, r1
    7f0e:	3304      	adds	r3, #4
    7f10:	681b      	ldr	r3, [r3, #0]
    7f12:	f003 030c 	and.w	r3, r3, #12
    7f16:	2b08      	cmp	r3, #8
    7f18:	d11e      	bne.n	7f58 <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    7f1a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7f1e:	4947      	ldr	r1, [pc, #284]	; (803c <_pwm_init+0x1f4>)
    7f20:	4613      	mov	r3, r2
    7f22:	009b      	lsls	r3, r3, #2
    7f24:	4413      	add	r3, r2
    7f26:	009b      	lsls	r3, r3, #2
    7f28:	440b      	add	r3, r1
    7f2a:	330c      	adds	r3, #12
    7f2c:	681b      	ldr	r3, [r3, #0]
    7f2e:	461a      	mov	r2, r3
    7f30:	2100      	movs	r1, #0
    7f32:	6838      	ldr	r0, [r7, #0]
    7f34:	4b45      	ldr	r3, [pc, #276]	; (804c <_pwm_init+0x204>)
    7f36:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    7f38:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7f3c:	493f      	ldr	r1, [pc, #252]	; (803c <_pwm_init+0x1f4>)
    7f3e:	4613      	mov	r3, r2
    7f40:	009b      	lsls	r3, r3, #2
    7f42:	4413      	add	r3, r2
    7f44:	009b      	lsls	r3, r3, #2
    7f46:	440b      	add	r3, r1
    7f48:	3310      	adds	r3, #16
    7f4a:	681b      	ldr	r3, [r3, #0]
    7f4c:	461a      	mov	r2, r3
    7f4e:	2101      	movs	r1, #1
    7f50:	6838      	ldr	r0, [r7, #0]
    7f52:	4b3e      	ldr	r3, [pc, #248]	; (804c <_pwm_init+0x204>)
    7f54:	4798      	blx	r3
    7f56:	e031      	b.n	7fbc <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    7f58:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7f5c:	4937      	ldr	r1, [pc, #220]	; (803c <_pwm_init+0x1f4>)
    7f5e:	4613      	mov	r3, r2
    7f60:	009b      	lsls	r3, r3, #2
    7f62:	4413      	add	r3, r2
    7f64:	009b      	lsls	r3, r3, #2
    7f66:	440b      	add	r3, r1
    7f68:	3304      	adds	r3, #4
    7f6a:	681b      	ldr	r3, [r3, #0]
    7f6c:	f003 030c 	and.w	r3, r3, #12
    7f70:	2b00      	cmp	r3, #0
    7f72:	d120      	bne.n	7fb6 <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    7f74:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7f78:	4930      	ldr	r1, [pc, #192]	; (803c <_pwm_init+0x1f4>)
    7f7a:	4613      	mov	r3, r2
    7f7c:	009b      	lsls	r3, r3, #2
    7f7e:	4413      	add	r3, r2
    7f80:	009b      	lsls	r3, r3, #2
    7f82:	440b      	add	r3, r1
    7f84:	330c      	adds	r3, #12
    7f86:	681b      	ldr	r3, [r3, #0]
    7f88:	b29b      	uxth	r3, r3
    7f8a:	461a      	mov	r2, r3
    7f8c:	2100      	movs	r1, #0
    7f8e:	6838      	ldr	r0, [r7, #0]
    7f90:	4b2f      	ldr	r3, [pc, #188]	; (8050 <_pwm_init+0x208>)
    7f92:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    7f94:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7f98:	4928      	ldr	r1, [pc, #160]	; (803c <_pwm_init+0x1f4>)
    7f9a:	4613      	mov	r3, r2
    7f9c:	009b      	lsls	r3, r3, #2
    7f9e:	4413      	add	r3, r2
    7fa0:	009b      	lsls	r3, r3, #2
    7fa2:	440b      	add	r3, r1
    7fa4:	3310      	adds	r3, #16
    7fa6:	681b      	ldr	r3, [r3, #0]
    7fa8:	b29b      	uxth	r3, r3
    7faa:	461a      	mov	r2, r3
    7fac:	2101      	movs	r1, #1
    7fae:	6838      	ldr	r0, [r7, #0]
    7fb0:	4b27      	ldr	r3, [pc, #156]	; (8050 <_pwm_init+0x208>)
    7fb2:	4798      	blx	r3
    7fb4:	e002      	b.n	7fbc <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    7fb6:	f04f 33ff 	mov.w	r3, #4294967295
    7fba:	e02e      	b.n	801a <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    7fbc:	6879      	ldr	r1, [r7, #4]
    7fbe:	6838      	ldr	r0, [r7, #0]
    7fc0:	4b24      	ldr	r3, [pc, #144]	; (8054 <_pwm_init+0x20c>)
    7fc2:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    7fc4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7fc8:	491c      	ldr	r1, [pc, #112]	; (803c <_pwm_init+0x1f4>)
    7fca:	4613      	mov	r3, r2
    7fcc:	009b      	lsls	r3, r3, #2
    7fce:	4413      	add	r3, r2
    7fd0:	009b      	lsls	r3, r3, #2
    7fd2:	440b      	add	r3, r1
    7fd4:	3302      	adds	r3, #2
    7fd6:	f9b3 3000 	ldrsh.w	r3, [r3]
    7fda:	4618      	mov	r0, r3
    7fdc:	4b1e      	ldr	r3, [pc, #120]	; (8058 <_pwm_init+0x210>)
    7fde:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    7fe0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7fe4:	4915      	ldr	r1, [pc, #84]	; (803c <_pwm_init+0x1f4>)
    7fe6:	4613      	mov	r3, r2
    7fe8:	009b      	lsls	r3, r3, #2
    7fea:	4413      	add	r3, r2
    7fec:	009b      	lsls	r3, r3, #2
    7fee:	440b      	add	r3, r1
    7ff0:	3302      	adds	r3, #2
    7ff2:	f9b3 3000 	ldrsh.w	r3, [r3]
    7ff6:	4618      	mov	r0, r3
    7ff8:	4b18      	ldr	r3, [pc, #96]	; (805c <_pwm_init+0x214>)
    7ffa:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    7ffc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8000:	490e      	ldr	r1, [pc, #56]	; (803c <_pwm_init+0x1f4>)
    8002:	4613      	mov	r3, r2
    8004:	009b      	lsls	r3, r3, #2
    8006:	4413      	add	r3, r2
    8008:	009b      	lsls	r3, r3, #2
    800a:	440b      	add	r3, r1
    800c:	3302      	adds	r3, #2
    800e:	f9b3 3000 	ldrsh.w	r3, [r3]
    8012:	4618      	mov	r0, r3
    8014:	4b12      	ldr	r3, [pc, #72]	; (8060 <_pwm_init+0x218>)
    8016:	4798      	blx	r3

	return 0;
    8018:	2300      	movs	r3, #0
}
    801a:	4618      	mov	r0, r3
    801c:	3710      	adds	r7, #16
    801e:	46bd      	mov	sp, r7
    8020:	bd80      	pop	{r7, pc}
    8022:	bf00      	nop
    8024:	00008275 	.word	0x00008275
    8028:	000078dd 	.word	0x000078dd
    802c:	00007a2d 	.word	0x00007a2d
    8030:	00007a05 	.word	0x00007a05
    8034:	000078b9 	.word	0x000078b9
    8038:	00007a5d 	.word	0x00007a5d
    803c:	20000048 	.word	0x20000048
    8040:	00007abd 	.word	0x00007abd
    8044:	00007a81 	.word	0x00007a81
    8048:	00007a9f 	.word	0x00007a9f
    804c:	00007b69 	.word	0x00007b69
    8050:	00007b35 	.word	0x00007b35
    8054:	000082dd 	.word	0x000082dd
    8058:	00007839 	.word	0x00007839
    805c:	0000787d 	.word	0x0000787d
    8060:	000077fd 	.word	0x000077fd

00008064 <_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _timer_start(struct _timer_device *const device)
{
    8064:	b580      	push	{r7, lr}
    8066:	b082      	sub	sp, #8
    8068:	af00      	add	r7, sp, #0
    806a:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    806c:	687b      	ldr	r3, [r7, #4]
    806e:	68db      	ldr	r3, [r3, #12]
    8070:	4618      	mov	r0, r3
    8072:	4b03      	ldr	r3, [pc, #12]	; (8080 <_timer_start+0x1c>)
    8074:	4798      	blx	r3
}
    8076:	bf00      	nop
    8078:	3708      	adds	r7, #8
    807a:	46bd      	mov	sp, r7
    807c:	bd80      	pop	{r7, pc}
    807e:	bf00      	nop
    8080:	000079a5 	.word	0x000079a5

00008084 <_timer_stop>:
}
/**
 * \brief Stop hardware timer
 */
void _timer_stop(struct _timer_device *const device)
{
    8084:	b580      	push	{r7, lr}
    8086:	b082      	sub	sp, #8
    8088:	af00      	add	r7, sp, #0
    808a:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    808c:	687b      	ldr	r3, [r7, #4]
    808e:	68db      	ldr	r3, [r3, #12]
    8090:	4618      	mov	r0, r3
    8092:	4b03      	ldr	r3, [pc, #12]	; (80a0 <_timer_stop+0x1c>)
    8094:	4798      	blx	r3
}
    8096:	bf00      	nop
    8098:	3708      	adds	r7, #8
    809a:	46bd      	mov	sp, r7
    809c:	bd80      	pop	{r7, pc}
    809e:	bf00      	nop
    80a0:	00007a05 	.word	0x00007a05

000080a4 <_timer_is_started>:
}
/**
 * \brief Check if timer is running
 */
bool _timer_is_started(const struct _timer_device *const device)
{
    80a4:	b580      	push	{r7, lr}
    80a6:	b082      	sub	sp, #8
    80a8:	af00      	add	r7, sp, #0
    80aa:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    80ac:	687b      	ldr	r3, [r7, #4]
    80ae:	68db      	ldr	r3, [r3, #12]
    80b0:	4618      	mov	r0, r3
    80b2:	4b03      	ldr	r3, [pc, #12]	; (80c0 <_timer_is_started+0x1c>)
    80b4:	4798      	blx	r3
    80b6:	4603      	mov	r3, r0
}
    80b8:	4618      	mov	r0, r3
    80ba:	3708      	adds	r7, #8
    80bc:	46bd      	mov	sp, r7
    80be:	bd80      	pop	{r7, pc}
    80c0:	000079cd 	.word	0x000079cd

000080c4 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    80c4:	b480      	push	{r7}
    80c6:	af00      	add	r7, sp, #0
	return NULL;
    80c8:	2300      	movs	r3, #0
}
    80ca:	4618      	mov	r0, r3
    80cc:	46bd      	mov	sp, r7
    80ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    80d2:	4770      	bx	lr

000080d4 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    80d4:	b480      	push	{r7}
    80d6:	af00      	add	r7, sp, #0
	return NULL;
    80d8:	2300      	movs	r3, #0
}
    80da:	4618      	mov	r0, r3
    80dc:	46bd      	mov	sp, r7
    80de:	f85d 7b04 	ldr.w	r7, [sp], #4
    80e2:	4770      	bx	lr

000080e4 <_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _timer_set_irq(struct _timer_device *const device)
{
    80e4:	b580      	push	{r7, lr}
    80e6:	b084      	sub	sp, #16
    80e8:	af00      	add	r7, sp, #0
    80ea:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    80ec:	687b      	ldr	r3, [r7, #4]
    80ee:	68db      	ldr	r3, [r3, #12]
    80f0:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    80f2:	68f8      	ldr	r0, [r7, #12]
    80f4:	4b0e      	ldr	r3, [pc, #56]	; (8130 <_timer_set_irq+0x4c>)
    80f6:	4798      	blx	r3
    80f8:	4603      	mov	r3, r0
    80fa:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    80fc:	f240 12a3 	movw	r2, #419	; 0x1a3
    8100:	490c      	ldr	r1, [pc, #48]	; (8134 <_timer_set_irq+0x50>)
    8102:	2001      	movs	r0, #1
    8104:	4b0c      	ldr	r3, [pc, #48]	; (8138 <_timer_set_irq+0x54>)
    8106:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    8108:	f997 200b 	ldrsb.w	r2, [r7, #11]
    810c:	490b      	ldr	r1, [pc, #44]	; (813c <_timer_set_irq+0x58>)
    810e:	4613      	mov	r3, r2
    8110:	009b      	lsls	r3, r3, #2
    8112:	4413      	add	r3, r2
    8114:	009b      	lsls	r3, r3, #2
    8116:	440b      	add	r3, r1
    8118:	3302      	adds	r3, #2
    811a:	f9b3 3000 	ldrsh.w	r3, [r3]
    811e:	b2db      	uxtb	r3, r3
    8120:	4618      	mov	r0, r3
    8122:	4b07      	ldr	r3, [pc, #28]	; (8140 <_timer_set_irq+0x5c>)
    8124:	4798      	blx	r3
}
    8126:	bf00      	nop
    8128:	3710      	adds	r7, #16
    812a:	46bd      	mov	sp, r7
    812c:	bd80      	pop	{r7, pc}
    812e:	bf00      	nop
    8130:	00008275 	.word	0x00008275
    8134:	0000e5dc 	.word	0x0000e5dc
    8138:	000034fd 	.word	0x000034fd
    813c:	20000048 	.word	0x20000048
    8140:	00004395 	.word	0x00004395

00008144 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    8144:	b580      	push	{r7, lr}
    8146:	b084      	sub	sp, #16
    8148:	af00      	add	r7, sp, #0
    814a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    814c:	687b      	ldr	r3, [r7, #4]
    814e:	68db      	ldr	r3, [r3, #12]
    8150:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    8152:	68f8      	ldr	r0, [r7, #12]
    8154:	4b07      	ldr	r3, [pc, #28]	; (8174 <tc_interrupt_handler+0x30>)
    8156:	4798      	blx	r3
    8158:	4603      	mov	r3, r0
    815a:	2b00      	cmp	r3, #0
    815c:	d006      	beq.n	816c <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    815e:	68f8      	ldr	r0, [r7, #12]
    8160:	4b05      	ldr	r3, [pc, #20]	; (8178 <tc_interrupt_handler+0x34>)
    8162:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    8164:	687b      	ldr	r3, [r7, #4]
    8166:	681b      	ldr	r3, [r3, #0]
    8168:	6878      	ldr	r0, [r7, #4]
    816a:	4798      	blx	r3
	}
}
    816c:	bf00      	nop
    816e:	3710      	adds	r7, #16
    8170:	46bd      	mov	sp, r7
    8172:	bd80      	pop	{r7, pc}
    8174:	00007905 	.word	0x00007905
    8178:	0000792d 	.word	0x0000792d

0000817c <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    817c:	b580      	push	{r7, lr}
    817e:	b084      	sub	sp, #16
    8180:	af00      	add	r7, sp, #0
    8182:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8184:	687b      	ldr	r3, [r7, #4]
    8186:	691b      	ldr	r3, [r3, #16]
    8188:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    818a:	68f8      	ldr	r0, [r7, #12]
    818c:	4b12      	ldr	r3, [pc, #72]	; (81d8 <tc_pwm_interrupt_handler+0x5c>)
    818e:	4798      	blx	r3
    8190:	4603      	mov	r3, r0
    8192:	2b00      	cmp	r3, #0
    8194:	d00a      	beq.n	81ac <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    8196:	68f8      	ldr	r0, [r7, #12]
    8198:	4b10      	ldr	r3, [pc, #64]	; (81dc <tc_pwm_interrupt_handler+0x60>)
    819a:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    819c:	687b      	ldr	r3, [r7, #4]
    819e:	681b      	ldr	r3, [r3, #0]
    81a0:	2b00      	cmp	r3, #0
    81a2:	d003      	beq.n	81ac <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    81a4:	687b      	ldr	r3, [r7, #4]
    81a6:	681b      	ldr	r3, [r3, #0]
    81a8:	6878      	ldr	r0, [r7, #4]
    81aa:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    81ac:	68f8      	ldr	r0, [r7, #12]
    81ae:	4b0c      	ldr	r3, [pc, #48]	; (81e0 <tc_pwm_interrupt_handler+0x64>)
    81b0:	4798      	blx	r3
    81b2:	4603      	mov	r3, r0
    81b4:	2b00      	cmp	r3, #0
    81b6:	d00a      	beq.n	81ce <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    81b8:	68f8      	ldr	r0, [r7, #12]
    81ba:	4b0a      	ldr	r3, [pc, #40]	; (81e4 <tc_pwm_interrupt_handler+0x68>)
    81bc:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    81be:	687b      	ldr	r3, [r7, #4]
    81c0:	685b      	ldr	r3, [r3, #4]
    81c2:	2b00      	cmp	r3, #0
    81c4:	d003      	beq.n	81ce <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    81c6:	687b      	ldr	r3, [r7, #4]
    81c8:	685b      	ldr	r3, [r3, #4]
    81ca:	6878      	ldr	r0, [r7, #4]
    81cc:	4798      	blx	r3
		}
	}
}
    81ce:	bf00      	nop
    81d0:	3710      	adds	r7, #16
    81d2:	46bd      	mov	sp, r7
    81d4:	bd80      	pop	{r7, pc}
    81d6:	bf00      	nop
    81d8:	00007905 	.word	0x00007905
    81dc:	0000792d 	.word	0x0000792d
    81e0:	0000797b 	.word	0x0000797b
    81e4:	00007947 	.word	0x00007947

000081e8 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    81e8:	b580      	push	{r7, lr}
    81ea:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    81ec:	4b03      	ldr	r3, [pc, #12]	; (81fc <TC0_Handler+0x14>)
    81ee:	681b      	ldr	r3, [r3, #0]
    81f0:	4618      	mov	r0, r3
    81f2:	4b03      	ldr	r3, [pc, #12]	; (8200 <TC0_Handler+0x18>)
    81f4:	4798      	blx	r3
}
    81f6:	bf00      	nop
    81f8:	bd80      	pop	{r7, pc}
    81fa:	bf00      	nop
    81fc:	2000077c 	.word	0x2000077c
    8200:	00008145 	.word	0x00008145

00008204 <TC1_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC1_Handler(void)
{
    8204:	b580      	push	{r7, lr}
    8206:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc1_dev);
    8208:	4b03      	ldr	r3, [pc, #12]	; (8218 <TC1_Handler+0x14>)
    820a:	681b      	ldr	r3, [r3, #0]
    820c:	4618      	mov	r0, r3
    820e:	4b03      	ldr	r3, [pc, #12]	; (821c <TC1_Handler+0x18>)
    8210:	4798      	blx	r3
}
    8212:	bf00      	nop
    8214:	bd80      	pop	{r7, pc}
    8216:	bf00      	nop
    8218:	20000780 	.word	0x20000780
    821c:	00008145 	.word	0x00008145

00008220 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    8220:	b580      	push	{r7, lr}
    8222:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    8224:	4b03      	ldr	r3, [pc, #12]	; (8234 <TC2_Handler+0x14>)
    8226:	681b      	ldr	r3, [r3, #0]
    8228:	4618      	mov	r0, r3
    822a:	4b03      	ldr	r3, [pc, #12]	; (8238 <TC2_Handler+0x18>)
    822c:	4798      	blx	r3
}
    822e:	bf00      	nop
    8230:	bd80      	pop	{r7, pc}
    8232:	bf00      	nop
    8234:	20000784 	.word	0x20000784
    8238:	00008145 	.word	0x00008145

0000823c <TC3_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC3_Handler(void)
{
    823c:	b580      	push	{r7, lr}
    823e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc3_dev);
    8240:	4b03      	ldr	r3, [pc, #12]	; (8250 <TC3_Handler+0x14>)
    8242:	681b      	ldr	r3, [r3, #0]
    8244:	4618      	mov	r0, r3
    8246:	4b03      	ldr	r3, [pc, #12]	; (8254 <TC3_Handler+0x18>)
    8248:	4798      	blx	r3
}
    824a:	bf00      	nop
    824c:	bd80      	pop	{r7, pc}
    824e:	bf00      	nop
    8250:	20000788 	.word	0x20000788
    8254:	00008145 	.word	0x00008145

00008258 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    8258:	b580      	push	{r7, lr}
    825a:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    825c:	4b03      	ldr	r3, [pc, #12]	; (826c <TC7_Handler+0x14>)
    825e:	681b      	ldr	r3, [r3, #0]
    8260:	4618      	mov	r0, r3
    8262:	4b03      	ldr	r3, [pc, #12]	; (8270 <TC7_Handler+0x18>)
    8264:	4798      	blx	r3
}
    8266:	bf00      	nop
    8268:	bd80      	pop	{r7, pc}
    826a:	bf00      	nop
    826c:	2000078c 	.word	0x2000078c
    8270:	0000817d 	.word	0x0000817d

00008274 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    8274:	b580      	push	{r7, lr}
    8276:	b084      	sub	sp, #16
    8278:	af00      	add	r7, sp, #0
    827a:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    827c:	6878      	ldr	r0, [r7, #4]
    827e:	4b13      	ldr	r3, [pc, #76]	; (82cc <get_tc_index+0x58>)
    8280:	4798      	blx	r3
    8282:	4603      	mov	r3, r0
    8284:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    8286:	2300      	movs	r3, #0
    8288:	73fb      	strb	r3, [r7, #15]
    828a:	e010      	b.n	82ae <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    828c:	7bfa      	ldrb	r2, [r7, #15]
    828e:	4910      	ldr	r1, [pc, #64]	; (82d0 <get_tc_index+0x5c>)
    8290:	4613      	mov	r3, r2
    8292:	009b      	lsls	r3, r3, #2
    8294:	4413      	add	r3, r2
    8296:	009b      	lsls	r3, r3, #2
    8298:	440b      	add	r3, r1
    829a:	781b      	ldrb	r3, [r3, #0]
    829c:	7bba      	ldrb	r2, [r7, #14]
    829e:	429a      	cmp	r2, r3
    82a0:	d102      	bne.n	82a8 <get_tc_index+0x34>
			return i;
    82a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    82a6:	e00d      	b.n	82c4 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    82a8:	7bfb      	ldrb	r3, [r7, #15]
    82aa:	3301      	adds	r3, #1
    82ac:	73fb      	strb	r3, [r7, #15]
    82ae:	7bfb      	ldrb	r3, [r7, #15]
    82b0:	2b04      	cmp	r3, #4
    82b2:	d9eb      	bls.n	828c <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    82b4:	f240 2206 	movw	r2, #518	; 0x206
    82b8:	4906      	ldr	r1, [pc, #24]	; (82d4 <get_tc_index+0x60>)
    82ba:	2000      	movs	r0, #0
    82bc:	4b06      	ldr	r3, [pc, #24]	; (82d8 <get_tc_index+0x64>)
    82be:	4798      	blx	r3
	return -1;
    82c0:	f04f 33ff 	mov.w	r3, #4294967295
}
    82c4:	4618      	mov	r0, r3
    82c6:	3710      	adds	r7, #16
    82c8:	46bd      	mov	sp, r7
    82ca:	bd80      	pop	{r7, pc}
    82cc:	00008361 	.word	0x00008361
    82d0:	20000048 	.word	0x20000048
    82d4:	0000e5dc 	.word	0x0000e5dc
    82d8:	000034fd 	.word	0x000034fd

000082dc <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    82dc:	b480      	push	{r7}
    82de:	b083      	sub	sp, #12
    82e0:	af00      	add	r7, sp, #0
    82e2:	6078      	str	r0, [r7, #4]
    82e4:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    82e6:	687b      	ldr	r3, [r7, #4]
    82e8:	4a13      	ldr	r2, [pc, #76]	; (8338 <_tc_init_irq_param+0x5c>)
    82ea:	4293      	cmp	r3, r2
    82ec:	d102      	bne.n	82f4 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    82ee:	4a13      	ldr	r2, [pc, #76]	; (833c <_tc_init_irq_param+0x60>)
    82f0:	683b      	ldr	r3, [r7, #0]
    82f2:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC1) {
    82f4:	687b      	ldr	r3, [r7, #4]
    82f6:	4a12      	ldr	r2, [pc, #72]	; (8340 <_tc_init_irq_param+0x64>)
    82f8:	4293      	cmp	r3, r2
    82fa:	d102      	bne.n	8302 <_tc_init_irq_param+0x26>
		_tc1_dev = (struct _timer_device *)dev;
    82fc:	4a11      	ldr	r2, [pc, #68]	; (8344 <_tc_init_irq_param+0x68>)
    82fe:	683b      	ldr	r3, [r7, #0]
    8300:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    8302:	687b      	ldr	r3, [r7, #4]
    8304:	4a10      	ldr	r2, [pc, #64]	; (8348 <_tc_init_irq_param+0x6c>)
    8306:	4293      	cmp	r3, r2
    8308:	d102      	bne.n	8310 <_tc_init_irq_param+0x34>
		_tc2_dev = (struct _timer_device *)dev;
    830a:	4a10      	ldr	r2, [pc, #64]	; (834c <_tc_init_irq_param+0x70>)
    830c:	683b      	ldr	r3, [r7, #0]
    830e:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC3) {
    8310:	687b      	ldr	r3, [r7, #4]
    8312:	4a0f      	ldr	r2, [pc, #60]	; (8350 <_tc_init_irq_param+0x74>)
    8314:	4293      	cmp	r3, r2
    8316:	d102      	bne.n	831e <_tc_init_irq_param+0x42>
		_tc3_dev = (struct _timer_device *)dev;
    8318:	4a0e      	ldr	r2, [pc, #56]	; (8354 <_tc_init_irq_param+0x78>)
    831a:	683b      	ldr	r3, [r7, #0]
    831c:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    831e:	687b      	ldr	r3, [r7, #4]
    8320:	4a0d      	ldr	r2, [pc, #52]	; (8358 <_tc_init_irq_param+0x7c>)
    8322:	4293      	cmp	r3, r2
    8324:	d102      	bne.n	832c <_tc_init_irq_param+0x50>
		_tc7_dev = (struct _pwm_device *)dev;
    8326:	4a0d      	ldr	r2, [pc, #52]	; (835c <_tc_init_irq_param+0x80>)
    8328:	683b      	ldr	r3, [r7, #0]
    832a:	6013      	str	r3, [r2, #0]
	}
}
    832c:	bf00      	nop
    832e:	370c      	adds	r7, #12
    8330:	46bd      	mov	sp, r7
    8332:	f85d 7b04 	ldr.w	r7, [sp], #4
    8336:	4770      	bx	lr
    8338:	40003800 	.word	0x40003800
    833c:	2000077c 	.word	0x2000077c
    8340:	40003c00 	.word	0x40003c00
    8344:	20000780 	.word	0x20000780
    8348:	4101a000 	.word	0x4101a000
    834c:	20000784 	.word	0x20000784
    8350:	4101c000 	.word	0x4101c000
    8354:	20000788 	.word	0x20000788
    8358:	43001800 	.word	0x43001800
    835c:	2000078c 	.word	0x2000078c

00008360 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    8360:	b4b0      	push	{r4, r5, r7}
    8362:	b08d      	sub	sp, #52	; 0x34
    8364:	af00      	add	r7, sp, #0
    8366:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    8368:	4b13      	ldr	r3, [pc, #76]	; (83b8 <_get_hardware_offset+0x58>)
    836a:	f107 040c 	add.w	r4, r7, #12
    836e:	461d      	mov	r5, r3
    8370:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    8372:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    8374:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    8378:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    837c:	2300      	movs	r3, #0
    837e:	62fb      	str	r3, [r7, #44]	; 0x2c
    8380:	e010      	b.n	83a4 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    8382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8384:	009b      	lsls	r3, r3, #2
    8386:	f107 0230 	add.w	r2, r7, #48	; 0x30
    838a:	4413      	add	r3, r2
    838c:	f853 3c24 	ldr.w	r3, [r3, #-36]
    8390:	461a      	mov	r2, r3
    8392:	687b      	ldr	r3, [r7, #4]
    8394:	429a      	cmp	r2, r3
    8396:	d102      	bne.n	839e <_get_hardware_offset+0x3e>
			return i;
    8398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    839a:	b2db      	uxtb	r3, r3
    839c:	e006      	b.n	83ac <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    839e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    83a0:	3301      	adds	r3, #1
    83a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    83a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    83a6:	2b07      	cmp	r3, #7
    83a8:	d9eb      	bls.n	8382 <_get_hardware_offset+0x22>
		}
	}
	return 0;
    83aa:	2300      	movs	r3, #0
}
    83ac:	4618      	mov	r0, r3
    83ae:	3734      	adds	r7, #52	; 0x34
    83b0:	46bd      	mov	sp, r7
    83b2:	bcb0      	pop	{r4, r5, r7}
    83b4:	4770      	bx	lr
    83b6:	bf00      	nop
    83b8:	0000e5f0 	.word	0x0000e5f0

000083bc <__NVIC_EnableIRQ>:
{
    83bc:	b480      	push	{r7}
    83be:	b083      	sub	sp, #12
    83c0:	af00      	add	r7, sp, #0
    83c2:	4603      	mov	r3, r0
    83c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    83c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    83ca:	2b00      	cmp	r3, #0
    83cc:	db0b      	blt.n	83e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    83ce:	4909      	ldr	r1, [pc, #36]	; (83f4 <__NVIC_EnableIRQ+0x38>)
    83d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    83d4:	095b      	lsrs	r3, r3, #5
    83d6:	88fa      	ldrh	r2, [r7, #6]
    83d8:	f002 021f 	and.w	r2, r2, #31
    83dc:	2001      	movs	r0, #1
    83de:	fa00 f202 	lsl.w	r2, r0, r2
    83e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    83e6:	bf00      	nop
    83e8:	370c      	adds	r7, #12
    83ea:	46bd      	mov	sp, r7
    83ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    83f0:	4770      	bx	lr
    83f2:	bf00      	nop
    83f4:	e000e100 	.word	0xe000e100

000083f8 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    83f8:	b480      	push	{r7}
    83fa:	b087      	sub	sp, #28
    83fc:	af00      	add	r7, sp, #0
    83fe:	60f8      	str	r0, [r7, #12]
    8400:	460b      	mov	r3, r1
    8402:	607a      	str	r2, [r7, #4]
    8404:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    8406:	7afa      	ldrb	r2, [r7, #11]
    8408:	68f9      	ldr	r1, [r7, #12]
    840a:	4613      	mov	r3, r2
    840c:	009b      	lsls	r3, r3, #2
    840e:	4413      	add	r3, r2
    8410:	009b      	lsls	r3, r3, #2
    8412:	440b      	add	r3, r1
    8414:	3340      	adds	r3, #64	; 0x40
    8416:	681b      	ldr	r3, [r3, #0]
    8418:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    841a:	697a      	ldr	r2, [r7, #20]
    841c:	687b      	ldr	r3, [r7, #4]
    841e:	4013      	ands	r3, r2
    8420:	617b      	str	r3, [r7, #20]
	return tmp;
    8422:	697b      	ldr	r3, [r7, #20]
}
    8424:	4618      	mov	r0, r3
    8426:	371c      	adds	r7, #28
    8428:	46bd      	mov	sp, r7
    842a:	f85d 7b04 	ldr.w	r7, [sp], #4
    842e:	4770      	bx	lr

00008430 <hri_oscctrl_get_STATUS_reg>:
{
    8430:	b480      	push	{r7}
    8432:	b085      	sub	sp, #20
    8434:	af00      	add	r7, sp, #0
    8436:	6078      	str	r0, [r7, #4]
    8438:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    843a:	687b      	ldr	r3, [r7, #4]
    843c:	691b      	ldr	r3, [r3, #16]
    843e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    8440:	68fa      	ldr	r2, [r7, #12]
    8442:	683b      	ldr	r3, [r7, #0]
    8444:	4013      	ands	r3, r2
    8446:	60fb      	str	r3, [r7, #12]
	return tmp;
    8448:	68fb      	ldr	r3, [r7, #12]
}
    844a:	4618      	mov	r0, r3
    844c:	3714      	adds	r7, #20
    844e:	46bd      	mov	sp, r7
    8450:	f85d 7b04 	ldr.w	r7, [sp], #4
    8454:	4770      	bx	lr

00008456 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    8456:	b480      	push	{r7}
    8458:	b085      	sub	sp, #20
    845a:	af00      	add	r7, sp, #0
    845c:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    845e:	687b      	ldr	r3, [r7, #4]
    8460:	f893 3020 	ldrb.w	r3, [r3, #32]
    8464:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    8466:	7bfb      	ldrb	r3, [r7, #15]
    8468:	f003 0301 	and.w	r3, r3, #1
    846c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    846e:	7bfb      	ldrb	r3, [r7, #15]
    8470:	2b00      	cmp	r3, #0
    8472:	bf14      	ite	ne
    8474:	2301      	movne	r3, #1
    8476:	2300      	moveq	r3, #0
    8478:	b2db      	uxtb	r3, r3
}
    847a:	4618      	mov	r0, r3
    847c:	3714      	adds	r7, #20
    847e:	46bd      	mov	sp, r7
    8480:	f85d 7b04 	ldr.w	r7, [sp], #4
    8484:	4770      	bx	lr

00008486 <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    8486:	b480      	push	{r7}
    8488:	b083      	sub	sp, #12
    848a:	af00      	add	r7, sp, #0
    848c:	6078      	str	r0, [r7, #4]
    848e:	460b      	mov	r3, r1
    8490:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    8492:	bf00      	nop
    8494:	687b      	ldr	r3, [r7, #4]
    8496:	789b      	ldrb	r3, [r3, #2]
    8498:	b2da      	uxtb	r2, r3
    849a:	78fb      	ldrb	r3, [r7, #3]
    849c:	4013      	ands	r3, r2
    849e:	b2db      	uxtb	r3, r3
    84a0:	2b00      	cmp	r3, #0
    84a2:	d1f7      	bne.n	8494 <hri_usb_wait_for_sync+0xe>
	};
}
    84a4:	bf00      	nop
    84a6:	370c      	adds	r7, #12
    84a8:	46bd      	mov	sp, r7
    84aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    84ae:	4770      	bx	lr

000084b0 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    84b0:	b480      	push	{r7}
    84b2:	b083      	sub	sp, #12
    84b4:	af00      	add	r7, sp, #0
    84b6:	6078      	str	r0, [r7, #4]
    84b8:	460b      	mov	r3, r1
    84ba:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    84bc:	687b      	ldr	r3, [r7, #4]
    84be:	789b      	ldrb	r3, [r3, #2]
    84c0:	b2da      	uxtb	r2, r3
    84c2:	78fb      	ldrb	r3, [r7, #3]
    84c4:	4013      	ands	r3, r2
    84c6:	b2db      	uxtb	r3, r3
    84c8:	2b00      	cmp	r3, #0
    84ca:	bf14      	ite	ne
    84cc:	2301      	movne	r3, #1
    84ce:	2300      	moveq	r3, #0
    84d0:	b2db      	uxtb	r3, r3
}
    84d2:	4618      	mov	r0, r3
    84d4:	370c      	adds	r7, #12
    84d6:	46bd      	mov	sp, r7
    84d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    84dc:	4770      	bx	lr

000084de <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    84de:	b480      	push	{r7}
    84e0:	b085      	sub	sp, #20
    84e2:	af00      	add	r7, sp, #0
    84e4:	6078      	str	r0, [r7, #4]
    84e6:	460b      	mov	r3, r1
    84e8:	70fb      	strb	r3, [r7, #3]
    84ea:	4613      	mov	r3, r2
    84ec:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    84ee:	78fb      	ldrb	r3, [r7, #3]
    84f0:	687a      	ldr	r2, [r7, #4]
    84f2:	3308      	adds	r3, #8
    84f4:	015b      	lsls	r3, r3, #5
    84f6:	4413      	add	r3, r2
    84f8:	3307      	adds	r3, #7
    84fa:	781b      	ldrb	r3, [r3, #0]
    84fc:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    84fe:	7bfa      	ldrb	r2, [r7, #15]
    8500:	78bb      	ldrb	r3, [r7, #2]
    8502:	4013      	ands	r3, r2
    8504:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8506:	7bfb      	ldrb	r3, [r7, #15]
}
    8508:	4618      	mov	r0, r3
    850a:	3714      	adds	r7, #20
    850c:	46bd      	mov	sp, r7
    850e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8512:	4770      	bx	lr

00008514 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    8514:	b480      	push	{r7}
    8516:	b083      	sub	sp, #12
    8518:	af00      	add	r7, sp, #0
    851a:	6078      	str	r0, [r7, #4]
    851c:	460b      	mov	r3, r1
    851e:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    8520:	78fb      	ldrb	r3, [r7, #3]
    8522:	687a      	ldr	r2, [r7, #4]
    8524:	3308      	adds	r3, #8
    8526:	015b      	lsls	r3, r3, #5
    8528:	4413      	add	r3, r2
    852a:	3307      	adds	r3, #7
    852c:	781b      	ldrb	r3, [r3, #0]
    852e:	b2db      	uxtb	r3, r3
}
    8530:	4618      	mov	r0, r3
    8532:	370c      	adds	r7, #12
    8534:	46bd      	mov	sp, r7
    8536:	f85d 7b04 	ldr.w	r7, [sp], #4
    853a:	4770      	bx	lr

0000853c <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    853c:	b480      	push	{r7}
    853e:	b083      	sub	sp, #12
    8540:	af00      	add	r7, sp, #0
    8542:	6078      	str	r0, [r7, #4]
    8544:	460b      	mov	r3, r1
    8546:	70fb      	strb	r3, [r7, #3]
    8548:	4613      	mov	r3, r2
    854a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    854c:	78fb      	ldrb	r3, [r7, #3]
    854e:	687a      	ldr	r2, [r7, #4]
    8550:	3308      	adds	r3, #8
    8552:	015b      	lsls	r3, r3, #5
    8554:	4413      	add	r3, r2
    8556:	3307      	adds	r3, #7
    8558:	78ba      	ldrb	r2, [r7, #2]
    855a:	701a      	strb	r2, [r3, #0]
}
    855c:	bf00      	nop
    855e:	370c      	adds	r7, #12
    8560:	46bd      	mov	sp, r7
    8562:	f85d 7b04 	ldr.w	r7, [sp], #4
    8566:	4770      	bx	lr

00008568 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    8568:	b480      	push	{r7}
    856a:	b083      	sub	sp, #12
    856c:	af00      	add	r7, sp, #0
    856e:	6078      	str	r0, [r7, #4]
    8570:	460b      	mov	r3, r1
    8572:	70fb      	strb	r3, [r7, #3]
    8574:	4613      	mov	r3, r2
    8576:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8578:	78fb      	ldrb	r3, [r7, #3]
    857a:	687a      	ldr	r2, [r7, #4]
    857c:	3308      	adds	r3, #8
    857e:	015b      	lsls	r3, r3, #5
    8580:	4413      	add	r3, r2
    8582:	3305      	adds	r3, #5
    8584:	78ba      	ldrb	r2, [r7, #2]
    8586:	701a      	strb	r2, [r3, #0]
}
    8588:	bf00      	nop
    858a:	370c      	adds	r7, #12
    858c:	46bd      	mov	sp, r7
    858e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8592:	4770      	bx	lr

00008594 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    8594:	b480      	push	{r7}
    8596:	b083      	sub	sp, #12
    8598:	af00      	add	r7, sp, #0
    859a:	6078      	str	r0, [r7, #4]
    859c:	460b      	mov	r3, r1
    859e:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    85a0:	78fb      	ldrb	r3, [r7, #3]
    85a2:	687a      	ldr	r2, [r7, #4]
    85a4:	3308      	adds	r3, #8
    85a6:	015b      	lsls	r3, r3, #5
    85a8:	4413      	add	r3, r2
    85aa:	3306      	adds	r3, #6
    85ac:	781b      	ldrb	r3, [r3, #0]
    85ae:	b2db      	uxtb	r3, r3
}
    85b0:	4618      	mov	r0, r3
    85b2:	370c      	adds	r7, #12
    85b4:	46bd      	mov	sp, r7
    85b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    85ba:	4770      	bx	lr

000085bc <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    85bc:	b480      	push	{r7}
    85be:	b083      	sub	sp, #12
    85c0:	af00      	add	r7, sp, #0
    85c2:	6078      	str	r0, [r7, #4]
    85c4:	460b      	mov	r3, r1
    85c6:	70fb      	strb	r3, [r7, #3]
    85c8:	4613      	mov	r3, r2
    85ca:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    85cc:	78fb      	ldrb	r3, [r7, #3]
    85ce:	687a      	ldr	r2, [r7, #4]
    85d0:	3308      	adds	r3, #8
    85d2:	015b      	lsls	r3, r3, #5
    85d4:	4413      	add	r3, r2
    85d6:	3304      	adds	r3, #4
    85d8:	78ba      	ldrb	r2, [r7, #2]
    85da:	701a      	strb	r2, [r3, #0]
}
    85dc:	bf00      	nop
    85de:	370c      	adds	r7, #12
    85e0:	46bd      	mov	sp, r7
    85e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    85e6:	4770      	bx	lr

000085e8 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    85e8:	b480      	push	{r7}
    85ea:	b083      	sub	sp, #12
    85ec:	af00      	add	r7, sp, #0
    85ee:	6078      	str	r0, [r7, #4]
    85f0:	460b      	mov	r3, r1
    85f2:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    85f4:	78fb      	ldrb	r3, [r7, #3]
    85f6:	687a      	ldr	r2, [r7, #4]
    85f8:	015b      	lsls	r3, r3, #5
    85fa:	4413      	add	r3, r2
    85fc:	f503 7384 	add.w	r3, r3, #264	; 0x108
    8600:	2210      	movs	r2, #16
    8602:	701a      	strb	r2, [r3, #0]
}
    8604:	bf00      	nop
    8606:	370c      	adds	r7, #12
    8608:	46bd      	mov	sp, r7
    860a:	f85d 7b04 	ldr.w	r7, [sp], #4
    860e:	4770      	bx	lr

00008610 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    8610:	b480      	push	{r7}
    8612:	b083      	sub	sp, #12
    8614:	af00      	add	r7, sp, #0
    8616:	6078      	str	r0, [r7, #4]
    8618:	460b      	mov	r3, r1
    861a:	70fb      	strb	r3, [r7, #3]
    861c:	4613      	mov	r3, r2
    861e:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    8620:	78fb      	ldrb	r3, [r7, #3]
    8622:	687a      	ldr	r2, [r7, #4]
    8624:	015b      	lsls	r3, r3, #5
    8626:	4413      	add	r3, r2
    8628:	f203 1309 	addw	r3, r3, #265	; 0x109
    862c:	78ba      	ldrb	r2, [r7, #2]
    862e:	701a      	strb	r2, [r3, #0]
}
    8630:	bf00      	nop
    8632:	370c      	adds	r7, #12
    8634:	46bd      	mov	sp, r7
    8636:	f85d 7b04 	ldr.w	r7, [sp], #4
    863a:	4770      	bx	lr

0000863c <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    863c:	b480      	push	{r7}
    863e:	b083      	sub	sp, #12
    8640:	af00      	add	r7, sp, #0
    8642:	6078      	str	r0, [r7, #4]
    8644:	460b      	mov	r3, r1
    8646:	70fb      	strb	r3, [r7, #3]
    8648:	4613      	mov	r3, r2
    864a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    864c:	78fb      	ldrb	r3, [r7, #3]
    864e:	687a      	ldr	r2, [r7, #4]
    8650:	015b      	lsls	r3, r3, #5
    8652:	4413      	add	r3, r2
    8654:	f503 7384 	add.w	r3, r3, #264	; 0x108
    8658:	78ba      	ldrb	r2, [r7, #2]
    865a:	701a      	strb	r2, [r3, #0]
}
    865c:	bf00      	nop
    865e:	370c      	adds	r7, #12
    8660:	46bd      	mov	sp, r7
    8662:	f85d 7b04 	ldr.w	r7, [sp], #4
    8666:	4770      	bx	lr

00008668 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    8668:	b480      	push	{r7}
    866a:	b085      	sub	sp, #20
    866c:	af00      	add	r7, sp, #0
    866e:	6078      	str	r0, [r7, #4]
    8670:	460b      	mov	r3, r1
    8672:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8674:	78fb      	ldrb	r3, [r7, #3]
    8676:	687a      	ldr	r2, [r7, #4]
    8678:	3308      	adds	r3, #8
    867a:	015b      	lsls	r3, r3, #5
    867c:	4413      	add	r3, r2
    867e:	781b      	ldrb	r3, [r3, #0]
    8680:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    8682:	7bfb      	ldrb	r3, [r7, #15]
    8684:	f003 0307 	and.w	r3, r3, #7
    8688:	73fb      	strb	r3, [r7, #15]
	return tmp;
    868a:	7bfb      	ldrb	r3, [r7, #15]
}
    868c:	4618      	mov	r0, r3
    868e:	3714      	adds	r7, #20
    8690:	46bd      	mov	sp, r7
    8692:	f85d 7b04 	ldr.w	r7, [sp], #4
    8696:	4770      	bx	lr

00008698 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    8698:	b480      	push	{r7}
    869a:	b085      	sub	sp, #20
    869c:	af00      	add	r7, sp, #0
    869e:	6078      	str	r0, [r7, #4]
    86a0:	460b      	mov	r3, r1
    86a2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    86a4:	78fb      	ldrb	r3, [r7, #3]
    86a6:	687a      	ldr	r2, [r7, #4]
    86a8:	3308      	adds	r3, #8
    86aa:	015b      	lsls	r3, r3, #5
    86ac:	4413      	add	r3, r2
    86ae:	781b      	ldrb	r3, [r3, #0]
    86b0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    86b2:	7bfb      	ldrb	r3, [r7, #15]
    86b4:	091b      	lsrs	r3, r3, #4
    86b6:	b2db      	uxtb	r3, r3
    86b8:	f003 0307 	and.w	r3, r3, #7
    86bc:	73fb      	strb	r3, [r7, #15]
	return tmp;
    86be:	7bfb      	ldrb	r3, [r7, #15]
}
    86c0:	4618      	mov	r0, r3
    86c2:	3714      	adds	r7, #20
    86c4:	46bd      	mov	sp, r7
    86c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    86ca:	4770      	bx	lr

000086cc <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    86cc:	b480      	push	{r7}
    86ce:	b083      	sub	sp, #12
    86d0:	af00      	add	r7, sp, #0
    86d2:	6078      	str	r0, [r7, #4]
    86d4:	460b      	mov	r3, r1
    86d6:	70fb      	strb	r3, [r7, #3]
    86d8:	4613      	mov	r3, r2
    86da:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    86dc:	78fb      	ldrb	r3, [r7, #3]
    86de:	687a      	ldr	r2, [r7, #4]
    86e0:	3308      	adds	r3, #8
    86e2:	015b      	lsls	r3, r3, #5
    86e4:	4413      	add	r3, r2
    86e6:	78ba      	ldrb	r2, [r7, #2]
    86e8:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    86ea:	bf00      	nop
    86ec:	370c      	adds	r7, #12
    86ee:	46bd      	mov	sp, r7
    86f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    86f4:	4770      	bx	lr

000086f6 <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    86f6:	b480      	push	{r7}
    86f8:	b083      	sub	sp, #12
    86fa:	af00      	add	r7, sp, #0
    86fc:	6078      	str	r0, [r7, #4]
    86fe:	460b      	mov	r3, r1
    8700:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8702:	78fb      	ldrb	r3, [r7, #3]
    8704:	687a      	ldr	r2, [r7, #4]
    8706:	3308      	adds	r3, #8
    8708:	015b      	lsls	r3, r3, #5
    870a:	4413      	add	r3, r2
    870c:	781b      	ldrb	r3, [r3, #0]
    870e:	b2db      	uxtb	r3, r3
}
    8710:	4618      	mov	r0, r3
    8712:	370c      	adds	r7, #12
    8714:	46bd      	mov	sp, r7
    8716:	f85d 7b04 	ldr.w	r7, [sp], #4
    871a:	4770      	bx	lr

0000871c <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    871c:	b480      	push	{r7}
    871e:	b083      	sub	sp, #12
    8720:	af00      	add	r7, sp, #0
    8722:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    8724:	687b      	ldr	r3, [r7, #4]
    8726:	8b9b      	ldrh	r3, [r3, #28]
    8728:	b29b      	uxth	r3, r3
}
    872a:	4618      	mov	r0, r3
    872c:	370c      	adds	r7, #12
    872e:	46bd      	mov	sp, r7
    8730:	f85d 7b04 	ldr.w	r7, [sp], #4
    8734:	4770      	bx	lr

00008736 <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    8736:	b480      	push	{r7}
    8738:	b083      	sub	sp, #12
    873a:	af00      	add	r7, sp, #0
    873c:	6078      	str	r0, [r7, #4]
    873e:	460b      	mov	r3, r1
    8740:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    8742:	687b      	ldr	r3, [r7, #4]
    8744:	887a      	ldrh	r2, [r7, #2]
    8746:	839a      	strh	r2, [r3, #28]
}
    8748:	bf00      	nop
    874a:	370c      	adds	r7, #12
    874c:	46bd      	mov	sp, r7
    874e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8752:	4770      	bx	lr

00008754 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    8754:	b480      	push	{r7}
    8756:	b083      	sub	sp, #12
    8758:	af00      	add	r7, sp, #0
    875a:	6078      	str	r0, [r7, #4]
    875c:	460b      	mov	r3, r1
    875e:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    8760:	687b      	ldr	r3, [r7, #4]
    8762:	887a      	ldrh	r2, [r7, #2]
    8764:	831a      	strh	r2, [r3, #24]
}
    8766:	bf00      	nop
    8768:	370c      	adds	r7, #12
    876a:	46bd      	mov	sp, r7
    876c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8770:	4770      	bx	lr

00008772 <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    8772:	b480      	push	{r7}
    8774:	b083      	sub	sp, #12
    8776:	af00      	add	r7, sp, #0
    8778:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    877a:	687b      	ldr	r3, [r7, #4]
    877c:	8b1b      	ldrh	r3, [r3, #24]
    877e:	b29b      	uxth	r3, r3
}
    8780:	4618      	mov	r0, r3
    8782:	370c      	adds	r7, #12
    8784:	46bd      	mov	sp, r7
    8786:	f85d 7b04 	ldr.w	r7, [sp], #4
    878a:	4770      	bx	lr

0000878c <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    878c:	b480      	push	{r7}
    878e:	b083      	sub	sp, #12
    8790:	af00      	add	r7, sp, #0
    8792:	6078      	str	r0, [r7, #4]
    8794:	460b      	mov	r3, r1
    8796:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    8798:	687b      	ldr	r3, [r7, #4]
    879a:	887a      	ldrh	r2, [r7, #2]
    879c:	829a      	strh	r2, [r3, #20]
}
    879e:	bf00      	nop
    87a0:	370c      	adds	r7, #12
    87a2:	46bd      	mov	sp, r7
    87a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    87a8:	4770      	bx	lr

000087aa <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    87aa:	b480      	push	{r7}
    87ac:	b085      	sub	sp, #20
    87ae:	af00      	add	r7, sp, #0
    87b0:	6078      	str	r0, [r7, #4]
    87b2:	460b      	mov	r3, r1
    87b4:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    87b6:	687b      	ldr	r3, [r7, #4]
    87b8:	789b      	ldrb	r3, [r3, #2]
    87ba:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    87bc:	7bfa      	ldrb	r2, [r7, #15]
    87be:	78fb      	ldrb	r3, [r7, #3]
    87c0:	4013      	ands	r3, r2
    87c2:	73fb      	strb	r3, [r7, #15]
	return tmp;
    87c4:	7bfb      	ldrb	r3, [r7, #15]
}
    87c6:	4618      	mov	r0, r3
    87c8:	3714      	adds	r7, #20
    87ca:	46bd      	mov	sp, r7
    87cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    87d0:	4770      	bx	lr
	...

000087d4 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    87d4:	b580      	push	{r7, lr}
    87d6:	b082      	sub	sp, #8
    87d8:	af00      	add	r7, sp, #0
    87da:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    87dc:	687b      	ldr	r3, [r7, #4]
    87de:	781b      	ldrb	r3, [r3, #0]
    87e0:	b2db      	uxtb	r3, r3
    87e2:	f023 0302 	bic.w	r3, r3, #2
    87e6:	b2da      	uxtb	r2, r3
    87e8:	687b      	ldr	r3, [r7, #4]
    87ea:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    87ec:	2103      	movs	r1, #3
    87ee:	6878      	ldr	r0, [r7, #4]
    87f0:	4b02      	ldr	r3, [pc, #8]	; (87fc <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    87f2:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    87f4:	bf00      	nop
    87f6:	3708      	adds	r7, #8
    87f8:	46bd      	mov	sp, r7
    87fa:	bd80      	pop	{r7, pc}
    87fc:	00008487 	.word	0x00008487

00008800 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    8800:	b580      	push	{r7, lr}
    8802:	b084      	sub	sp, #16
    8804:	af00      	add	r7, sp, #0
    8806:	6078      	str	r0, [r7, #4]
    8808:	460b      	mov	r3, r1
    880a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    880c:	2103      	movs	r1, #3
    880e:	6878      	ldr	r0, [r7, #4]
    8810:	4b06      	ldr	r3, [pc, #24]	; (882c <hri_usb_get_CTRLA_reg+0x2c>)
    8812:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    8814:	687b      	ldr	r3, [r7, #4]
    8816:	781b      	ldrb	r3, [r3, #0]
    8818:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    881a:	7bfa      	ldrb	r2, [r7, #15]
    881c:	78fb      	ldrb	r3, [r7, #3]
    881e:	4013      	ands	r3, r2
    8820:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8822:	7bfb      	ldrb	r3, [r7, #15]
}
    8824:	4618      	mov	r0, r3
    8826:	3710      	adds	r7, #16
    8828:	46bd      	mov	sp, r7
    882a:	bd80      	pop	{r7, pc}
    882c:	00008487 	.word	0x00008487

00008830 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    8830:	b580      	push	{r7, lr}
    8832:	b082      	sub	sp, #8
    8834:	af00      	add	r7, sp, #0
    8836:	6078      	str	r0, [r7, #4]
    8838:	460b      	mov	r3, r1
    883a:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    883c:	687b      	ldr	r3, [r7, #4]
    883e:	78fa      	ldrb	r2, [r7, #3]
    8840:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    8842:	2103      	movs	r1, #3
    8844:	6878      	ldr	r0, [r7, #4]
    8846:	4b03      	ldr	r3, [pc, #12]	; (8854 <hri_usb_write_CTRLA_reg+0x24>)
    8848:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    884a:	bf00      	nop
    884c:	3708      	adds	r7, #8
    884e:	46bd      	mov	sp, r7
    8850:	bd80      	pop	{r7, pc}
    8852:	bf00      	nop
    8854:	00008487 	.word	0x00008487

00008858 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    8858:	b580      	push	{r7, lr}
    885a:	b082      	sub	sp, #8
    885c:	af00      	add	r7, sp, #0
    885e:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    8860:	2103      	movs	r1, #3
    8862:	6878      	ldr	r0, [r7, #4]
    8864:	4b04      	ldr	r3, [pc, #16]	; (8878 <hri_usb_read_CTRLA_reg+0x20>)
    8866:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    8868:	687b      	ldr	r3, [r7, #4]
    886a:	781b      	ldrb	r3, [r3, #0]
    886c:	b2db      	uxtb	r3, r3
}
    886e:	4618      	mov	r0, r3
    8870:	3708      	adds	r7, #8
    8872:	46bd      	mov	sp, r7
    8874:	bd80      	pop	{r7, pc}
    8876:	bf00      	nop
    8878:	00008487 	.word	0x00008487

0000887c <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    887c:	b480      	push	{r7}
    887e:	b083      	sub	sp, #12
    8880:	af00      	add	r7, sp, #0
    8882:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    8884:	687b      	ldr	r3, [r7, #4]
    8886:	891b      	ldrh	r3, [r3, #8]
    8888:	b29b      	uxth	r3, r3
    888a:	f023 0301 	bic.w	r3, r3, #1
    888e:	b29a      	uxth	r2, r3
    8890:	687b      	ldr	r3, [r7, #4]
    8892:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    8894:	bf00      	nop
    8896:	370c      	adds	r7, #12
    8898:	46bd      	mov	sp, r7
    889a:	f85d 7b04 	ldr.w	r7, [sp], #4
    889e:	4770      	bx	lr

000088a0 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    88a0:	b480      	push	{r7}
    88a2:	b083      	sub	sp, #12
    88a4:	af00      	add	r7, sp, #0
    88a6:	6078      	str	r0, [r7, #4]
    88a8:	460b      	mov	r3, r1
    88aa:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    88ac:	687b      	ldr	r3, [r7, #4]
    88ae:	887a      	ldrh	r2, [r7, #2]
    88b0:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    88b2:	bf00      	nop
    88b4:	370c      	adds	r7, #12
    88b6:	46bd      	mov	sp, r7
    88b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    88bc:	4770      	bx	lr

000088be <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    88be:	b480      	push	{r7}
    88c0:	b083      	sub	sp, #12
    88c2:	af00      	add	r7, sp, #0
    88c4:	6078      	str	r0, [r7, #4]
    88c6:	460b      	mov	r3, r1
    88c8:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    88ca:	687b      	ldr	r3, [r7, #4]
    88cc:	78fa      	ldrb	r2, [r7, #3]
    88ce:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    88d0:	bf00      	nop
    88d2:	370c      	adds	r7, #12
    88d4:	46bd      	mov	sp, r7
    88d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    88da:	4770      	bx	lr

000088dc <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    88dc:	b480      	push	{r7}
    88de:	b083      	sub	sp, #12
    88e0:	af00      	add	r7, sp, #0
    88e2:	6078      	str	r0, [r7, #4]
    88e4:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    88e6:	687b      	ldr	r3, [r7, #4]
    88e8:	683a      	ldr	r2, [r7, #0]
    88ea:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    88ec:	bf00      	nop
    88ee:	370c      	adds	r7, #12
    88f0:	46bd      	mov	sp, r7
    88f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    88f6:	4770      	bx	lr

000088f8 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    88f8:	b480      	push	{r7}
    88fa:	b083      	sub	sp, #12
    88fc:	af00      	add	r7, sp, #0
    88fe:	6078      	str	r0, [r7, #4]
    8900:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    8902:	2300      	movs	r3, #0
}
    8904:	4618      	mov	r0, r3
    8906:	370c      	adds	r7, #12
    8908:	46bd      	mov	sp, r7
    890a:	f85d 7b04 	ldr.w	r7, [sp], #4
    890e:	4770      	bx	lr

00008910 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    8910:	b480      	push	{r7}
    8912:	b085      	sub	sp, #20
    8914:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    8916:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    891a:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    891c:	4b28      	ldr	r3, [pc, #160]	; (89c0 <_usb_load_calib+0xb0>)
    891e:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    8920:	f003 031f 	and.w	r3, r3, #31
    8924:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    8926:	4b26      	ldr	r3, [pc, #152]	; (89c0 <_usb_load_calib+0xb0>)
    8928:	681b      	ldr	r3, [r3, #0]
    892a:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    892c:	f003 031f 	and.w	r3, r3, #31
    8930:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    8932:	4b23      	ldr	r3, [pc, #140]	; (89c0 <_usb_load_calib+0xb0>)
    8934:	681b      	ldr	r3, [r3, #0]
    8936:	0a9b      	lsrs	r3, r3, #10
    8938:	f003 0307 	and.w	r3, r3, #7
    893c:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    893e:	68fb      	ldr	r3, [r7, #12]
    8940:	2b00      	cmp	r3, #0
    8942:	d002      	beq.n	894a <_usb_load_calib+0x3a>
    8944:	68fb      	ldr	r3, [r7, #12]
    8946:	2b1f      	cmp	r3, #31
    8948:	d101      	bne.n	894e <_usb_load_calib+0x3e>
		pad_transn = 9;
    894a:	2309      	movs	r3, #9
    894c:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    894e:	68bb      	ldr	r3, [r7, #8]
    8950:	2b00      	cmp	r3, #0
    8952:	d002      	beq.n	895a <_usb_load_calib+0x4a>
    8954:	68bb      	ldr	r3, [r7, #8]
    8956:	2b1f      	cmp	r3, #31
    8958:	d101      	bne.n	895e <_usb_load_calib+0x4e>
		pad_transp = 25;
    895a:	2319      	movs	r3, #25
    895c:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    895e:	687b      	ldr	r3, [r7, #4]
    8960:	2b00      	cmp	r3, #0
    8962:	d002      	beq.n	896a <_usb_load_calib+0x5a>
    8964:	687b      	ldr	r3, [r7, #4]
    8966:	2b07      	cmp	r3, #7
    8968:	d101      	bne.n	896e <_usb_load_calib+0x5e>
		pad_trim = 6;
    896a:	2306      	movs	r3, #6
    896c:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    896e:	68fb      	ldr	r3, [r7, #12]
    8970:	b29b      	uxth	r3, r3
    8972:	019b      	lsls	r3, r3, #6
    8974:	b29b      	uxth	r3, r3
    8976:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    897a:	b29a      	uxth	r2, r3
    897c:	68bb      	ldr	r3, [r7, #8]
    897e:	b29b      	uxth	r3, r3
    8980:	f003 031f 	and.w	r3, r3, #31
    8984:	b29b      	uxth	r3, r3
    8986:	4313      	orrs	r3, r2
    8988:	b29a      	uxth	r2, r3
    898a:	687b      	ldr	r3, [r7, #4]
    898c:	b29b      	uxth	r3, r3
    898e:	031b      	lsls	r3, r3, #12
    8990:	b29b      	uxth	r3, r3
    8992:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    8996:	b29b      	uxth	r3, r3
    8998:	4313      	orrs	r3, r2
    899a:	b29a      	uxth	r2, r3
    899c:	683b      	ldr	r3, [r7, #0]
    899e:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    89a0:	683a      	ldr	r2, [r7, #0]
    89a2:	78d3      	ldrb	r3, [r2, #3]
    89a4:	f043 0303 	orr.w	r3, r3, #3
    89a8:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    89aa:	683a      	ldr	r2, [r7, #0]
    89ac:	78d3      	ldrb	r3, [r2, #3]
    89ae:	f043 030c 	orr.w	r3, r3, #12
    89b2:	70d3      	strb	r3, [r2, #3]
}
    89b4:	bf00      	nop
    89b6:	3714      	adds	r7, #20
    89b8:	46bd      	mov	sp, r7
    89ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    89be:	4770      	bx	lr
    89c0:	00800084 	.word	0x00800084

000089c4 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    89c4:	b580      	push	{r7, lr}
    89c6:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    89c8:	bf00      	nop
    89ca:	2203      	movs	r2, #3
    89cc:	2100      	movs	r1, #0
    89ce:	4804      	ldr	r0, [pc, #16]	; (89e0 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    89d0:	4b04      	ldr	r3, [pc, #16]	; (89e4 <_usb_d_dev_wait_dpll_rdy+0x20>)
    89d2:	4798      	blx	r3
    89d4:	4603      	mov	r3, r0
    89d6:	2b03      	cmp	r3, #3
    89d8:	d1f7      	bne.n	89ca <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    89da:	bf00      	nop
    89dc:	bd80      	pop	{r7, pc}
    89de:	bf00      	nop
    89e0:	40001000 	.word	0x40001000
    89e4:	000083f9 	.word	0x000083f9

000089e8 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    89e8:	b580      	push	{r7, lr}
    89ea:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    89ec:	480e      	ldr	r0, [pc, #56]	; (8a28 <_usb_d_dev_wait_dfll_rdy+0x40>)
    89ee:	4b0f      	ldr	r3, [pc, #60]	; (8a2c <_usb_d_dev_wait_dfll_rdy+0x44>)
    89f0:	4798      	blx	r3
    89f2:	4603      	mov	r3, r0
    89f4:	2b00      	cmp	r3, #0
    89f6:	d00a      	beq.n	8a0e <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    89f8:	bf00      	nop
    89fa:	f44f 6110 	mov.w	r1, #2304	; 0x900
    89fe:	480a      	ldr	r0, [pc, #40]	; (8a28 <_usb_d_dev_wait_dfll_rdy+0x40>)
    8a00:	4b0b      	ldr	r3, [pc, #44]	; (8a30 <_usb_d_dev_wait_dfll_rdy+0x48>)
    8a02:	4798      	blx	r3
    8a04:	4603      	mov	r3, r0
    8a06:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    8a0a:	d1f6      	bne.n	89fa <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    8a0c:	e009      	b.n	8a22 <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    8a0e:	bf00      	nop
    8a10:	f44f 7180 	mov.w	r1, #256	; 0x100
    8a14:	4804      	ldr	r0, [pc, #16]	; (8a28 <_usb_d_dev_wait_dfll_rdy+0x40>)
    8a16:	4b06      	ldr	r3, [pc, #24]	; (8a30 <_usb_d_dev_wait_dfll_rdy+0x48>)
    8a18:	4798      	blx	r3
    8a1a:	4603      	mov	r3, r0
    8a1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8a20:	d1f6      	bne.n	8a10 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    8a22:	bf00      	nop
    8a24:	bd80      	pop	{r7, pc}
    8a26:	bf00      	nop
    8a28:	40001000 	.word	0x40001000
    8a2c:	00008457 	.word	0x00008457
    8a30:	00008431 	.word	0x00008431

00008a34 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    8a34:	b580      	push	{r7, lr}
    8a36:	b082      	sub	sp, #8
    8a38:	af00      	add	r7, sp, #0
    8a3a:	4603      	mov	r3, r0
    8a3c:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    8a3e:	79fb      	ldrb	r3, [r7, #7]
    8a40:	2b00      	cmp	r3, #0
    8a42:	d102      	bne.n	8a4a <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    8a44:	4b05      	ldr	r3, [pc, #20]	; (8a5c <_usb_d_dev_wait_clk_rdy+0x28>)
    8a46:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    8a48:	e004      	b.n	8a54 <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    8a4a:	79fb      	ldrb	r3, [r7, #7]
    8a4c:	2b01      	cmp	r3, #1
    8a4e:	d101      	bne.n	8a54 <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    8a50:	4b03      	ldr	r3, [pc, #12]	; (8a60 <_usb_d_dev_wait_clk_rdy+0x2c>)
    8a52:	4798      	blx	r3
}
    8a54:	bf00      	nop
    8a56:	3708      	adds	r7, #8
    8a58:	46bd      	mov	sp, r7
    8a5a:	bd80      	pop	{r7, pc}
    8a5c:	000089e9 	.word	0x000089e9
    8a60:	000089c5 	.word	0x000089c5

00008a64 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    8a64:	b580      	push	{r7, lr}
    8a66:	b082      	sub	sp, #8
    8a68:	af00      	add	r7, sp, #0
    8a6a:	4603      	mov	r3, r0
    8a6c:	6039      	str	r1, [r7, #0]
    8a6e:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    8a70:	683b      	ldr	r3, [r7, #0]
    8a72:	b2da      	uxtb	r2, r3
    8a74:	79fb      	ldrb	r3, [r7, #7]
    8a76:	4619      	mov	r1, r3
    8a78:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8a7c:	4b02      	ldr	r3, [pc, #8]	; (8a88 <_usbd_ep_int_ack+0x24>)
    8a7e:	4798      	blx	r3
}
    8a80:	bf00      	nop
    8a82:	3708      	adds	r7, #8
    8a84:	46bd      	mov	sp, r7
    8a86:	bd80      	pop	{r7, pc}
    8a88:	0000853d 	.word	0x0000853d

00008a8c <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    8a8c:	b580      	push	{r7, lr}
    8a8e:	b082      	sub	sp, #8
    8a90:	af00      	add	r7, sp, #0
    8a92:	4603      	mov	r3, r0
    8a94:	6039      	str	r1, [r7, #0]
    8a96:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    8a98:	683b      	ldr	r3, [r7, #0]
    8a9a:	b2da      	uxtb	r2, r3
    8a9c:	79fb      	ldrb	r3, [r7, #7]
    8a9e:	4619      	mov	r1, r3
    8aa0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8aa4:	4b02      	ldr	r3, [pc, #8]	; (8ab0 <_usbd_ep_int_en+0x24>)
    8aa6:	4798      	blx	r3
}
    8aa8:	bf00      	nop
    8aaa:	3708      	adds	r7, #8
    8aac:	46bd      	mov	sp, r7
    8aae:	bd80      	pop	{r7, pc}
    8ab0:	00008611 	.word	0x00008611

00008ab4 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    8ab4:	b580      	push	{r7, lr}
    8ab6:	b082      	sub	sp, #8
    8ab8:	af00      	add	r7, sp, #0
    8aba:	4603      	mov	r3, r0
    8abc:	6039      	str	r1, [r7, #0]
    8abe:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    8ac0:	683b      	ldr	r3, [r7, #0]
    8ac2:	b2da      	uxtb	r2, r3
    8ac4:	79fb      	ldrb	r3, [r7, #7]
    8ac6:	4619      	mov	r1, r3
    8ac8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8acc:	4b02      	ldr	r3, [pc, #8]	; (8ad8 <_usbd_ep_int_dis+0x24>)
    8ace:	4798      	blx	r3
}
    8ad0:	bf00      	nop
    8ad2:	3708      	adds	r7, #8
    8ad4:	46bd      	mov	sp, r7
    8ad6:	bd80      	pop	{r7, pc}
    8ad8:	0000863d 	.word	0x0000863d

00008adc <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    8adc:	b580      	push	{r7, lr}
    8ade:	b082      	sub	sp, #8
    8ae0:	af00      	add	r7, sp, #0
    8ae2:	4603      	mov	r3, r0
    8ae4:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    8ae6:	79fb      	ldrb	r3, [r7, #7]
    8ae8:	4619      	mov	r1, r3
    8aea:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8aee:	4b06      	ldr	r3, [pc, #24]	; (8b08 <_usbd_ep_is_ctrl+0x2c>)
    8af0:	4798      	blx	r3
    8af2:	4603      	mov	r3, r0
    8af4:	2b11      	cmp	r3, #17
    8af6:	bf0c      	ite	eq
    8af8:	2301      	moveq	r3, #1
    8afa:	2300      	movne	r3, #0
    8afc:	b2db      	uxtb	r3, r3
}
    8afe:	4618      	mov	r0, r3
    8b00:	3708      	adds	r7, #8
    8b02:	46bd      	mov	sp, r7
    8b04:	bd80      	pop	{r7, pc}
    8b06:	bf00      	nop
    8b08:	000086f7 	.word	0x000086f7

00008b0c <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    8b0c:	b580      	push	{r7, lr}
    8b0e:	b082      	sub	sp, #8
    8b10:	af00      	add	r7, sp, #0
    8b12:	4603      	mov	r3, r0
    8b14:	71fb      	strb	r3, [r7, #7]
    8b16:	460b      	mov	r3, r1
    8b18:	71bb      	strb	r3, [r7, #6]
    8b1a:	4613      	mov	r3, r2
    8b1c:	717b      	strb	r3, [r7, #5]
	if (st) {
    8b1e:	797b      	ldrb	r3, [r7, #5]
    8b20:	2b00      	cmp	r3, #0
    8b22:	d00b      	beq.n	8b3c <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8b24:	79bb      	ldrb	r3, [r7, #6]
    8b26:	2210      	movs	r2, #16
    8b28:	fa02 f303 	lsl.w	r3, r2, r3
    8b2c:	b2da      	uxtb	r2, r3
    8b2e:	79fb      	ldrb	r3, [r7, #7]
    8b30:	4619      	mov	r1, r3
    8b32:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8b36:	4b09      	ldr	r3, [pc, #36]	; (8b5c <_usbd_ep_set_stall+0x50>)
    8b38:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    8b3a:	e00a      	b.n	8b52 <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8b3c:	79bb      	ldrb	r3, [r7, #6]
    8b3e:	2210      	movs	r2, #16
    8b40:	fa02 f303 	lsl.w	r3, r2, r3
    8b44:	b2da      	uxtb	r2, r3
    8b46:	79fb      	ldrb	r3, [r7, #7]
    8b48:	4619      	mov	r1, r3
    8b4a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8b4e:	4b04      	ldr	r3, [pc, #16]	; (8b60 <_usbd_ep_set_stall+0x54>)
    8b50:	4798      	blx	r3
}
    8b52:	bf00      	nop
    8b54:	3708      	adds	r7, #8
    8b56:	46bd      	mov	sp, r7
    8b58:	bd80      	pop	{r7, pc}
    8b5a:	bf00      	nop
    8b5c:	00008569 	.word	0x00008569
    8b60:	000085bd 	.word	0x000085bd

00008b64 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    8b64:	b580      	push	{r7, lr}
    8b66:	b084      	sub	sp, #16
    8b68:	af00      	add	r7, sp, #0
    8b6a:	4603      	mov	r3, r0
    8b6c:	460a      	mov	r2, r1
    8b6e:	71fb      	strb	r3, [r7, #7]
    8b70:	4613      	mov	r3, r2
    8b72:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    8b74:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8b78:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8b7a:	79fb      	ldrb	r3, [r7, #7]
    8b7c:	4619      	mov	r1, r3
    8b7e:	68f8      	ldr	r0, [r7, #12]
    8b80:	4b08      	ldr	r3, [pc, #32]	; (8ba4 <_usbd_ep_is_stalled+0x40>)
    8b82:	4798      	blx	r3
    8b84:	4603      	mov	r3, r0
    8b86:	4619      	mov	r1, r3
    8b88:	79bb      	ldrb	r3, [r7, #6]
    8b8a:	2210      	movs	r2, #16
    8b8c:	fa02 f303 	lsl.w	r3, r2, r3
    8b90:	400b      	ands	r3, r1
    8b92:	2b00      	cmp	r3, #0
    8b94:	bf14      	ite	ne
    8b96:	2301      	movne	r3, #1
    8b98:	2300      	moveq	r3, #0
    8b9a:	b2db      	uxtb	r3, r3
}
    8b9c:	4618      	mov	r0, r3
    8b9e:	3710      	adds	r7, #16
    8ba0:	46bd      	mov	sp, r7
    8ba2:	bd80      	pop	{r7, pc}
    8ba4:	00008595 	.word	0x00008595

00008ba8 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    8ba8:	b580      	push	{r7, lr}
    8baa:	b084      	sub	sp, #16
    8bac:	af00      	add	r7, sp, #0
    8bae:	4603      	mov	r3, r0
    8bb0:	460a      	mov	r2, r1
    8bb2:	71fb      	strb	r3, [r7, #7]
    8bb4:	4613      	mov	r3, r2
    8bb6:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    8bb8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8bbc:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    8bbe:	79fb      	ldrb	r3, [r7, #7]
    8bc0:	4619      	mov	r1, r3
    8bc2:	68f8      	ldr	r0, [r7, #12]
    8bc4:	4b08      	ldr	r3, [pc, #32]	; (8be8 <_usbd_ep_is_stall_sent+0x40>)
    8bc6:	4798      	blx	r3
    8bc8:	4603      	mov	r3, r0
    8bca:	4619      	mov	r1, r3
    8bcc:	79bb      	ldrb	r3, [r7, #6]
    8bce:	2220      	movs	r2, #32
    8bd0:	fa02 f303 	lsl.w	r3, r2, r3
    8bd4:	400b      	ands	r3, r1
    8bd6:	2b00      	cmp	r3, #0
    8bd8:	bf14      	ite	ne
    8bda:	2301      	movne	r3, #1
    8bdc:	2300      	moveq	r3, #0
    8bde:	b2db      	uxtb	r3, r3
}
    8be0:	4618      	mov	r0, r3
    8be2:	3710      	adds	r7, #16
    8be4:	46bd      	mov	sp, r7
    8be6:	bd80      	pop	{r7, pc}
    8be8:	00008515 	.word	0x00008515

00008bec <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    8bec:	b580      	push	{r7, lr}
    8bee:	b082      	sub	sp, #8
    8bf0:	af00      	add	r7, sp, #0
    8bf2:	4603      	mov	r3, r0
    8bf4:	460a      	mov	r2, r1
    8bf6:	71fb      	strb	r3, [r7, #7]
    8bf8:	4613      	mov	r3, r2
    8bfa:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    8bfc:	79bb      	ldrb	r3, [r7, #6]
    8bfe:	2220      	movs	r2, #32
    8c00:	409a      	lsls	r2, r3
    8c02:	79fb      	ldrb	r3, [r7, #7]
    8c04:	4611      	mov	r1, r2
    8c06:	4618      	mov	r0, r3
    8c08:	4b02      	ldr	r3, [pc, #8]	; (8c14 <_usbd_ep_ack_stall+0x28>)
    8c0a:	4798      	blx	r3
}
    8c0c:	bf00      	nop
    8c0e:	3708      	adds	r7, #8
    8c10:	46bd      	mov	sp, r7
    8c12:	bd80      	pop	{r7, pc}
    8c14:	00008a65 	.word	0x00008a65

00008c18 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    8c18:	b580      	push	{r7, lr}
    8c1a:	b082      	sub	sp, #8
    8c1c:	af00      	add	r7, sp, #0
    8c1e:	4603      	mov	r3, r0
    8c20:	71fb      	strb	r3, [r7, #7]
    8c22:	460b      	mov	r3, r1
    8c24:	71bb      	strb	r3, [r7, #6]
    8c26:	4613      	mov	r3, r2
    8c28:	717b      	strb	r3, [r7, #5]
	if (en) {
    8c2a:	797b      	ldrb	r3, [r7, #5]
    8c2c:	2b00      	cmp	r3, #0
    8c2e:	d008      	beq.n	8c42 <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    8c30:	79bb      	ldrb	r3, [r7, #6]
    8c32:	2220      	movs	r2, #32
    8c34:	409a      	lsls	r2, r3
    8c36:	79fb      	ldrb	r3, [r7, #7]
    8c38:	4611      	mov	r1, r2
    8c3a:	4618      	mov	r0, r3
    8c3c:	4b07      	ldr	r3, [pc, #28]	; (8c5c <_usbd_ep_int_stall_en+0x44>)
    8c3e:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    8c40:	e007      	b.n	8c52 <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    8c42:	79bb      	ldrb	r3, [r7, #6]
    8c44:	2220      	movs	r2, #32
    8c46:	409a      	lsls	r2, r3
    8c48:	79fb      	ldrb	r3, [r7, #7]
    8c4a:	4611      	mov	r1, r2
    8c4c:	4618      	mov	r0, r3
    8c4e:	4b04      	ldr	r3, [pc, #16]	; (8c60 <_usbd_ep_int_stall_en+0x48>)
    8c50:	4798      	blx	r3
}
    8c52:	bf00      	nop
    8c54:	3708      	adds	r7, #8
    8c56:	46bd      	mov	sp, r7
    8c58:	bd80      	pop	{r7, pc}
    8c5a:	bf00      	nop
    8c5c:	00008a8d 	.word	0x00008a8d
    8c60:	00008ab5 	.word	0x00008ab5

00008c64 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    8c64:	b580      	push	{r7, lr}
    8c66:	b082      	sub	sp, #8
    8c68:	af00      	add	r7, sp, #0
    8c6a:	4603      	mov	r3, r0
    8c6c:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    8c6e:	79fb      	ldrb	r3, [r7, #7]
    8c70:	4619      	mov	r1, r3
    8c72:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8c76:	4b03      	ldr	r3, [pc, #12]	; (8c84 <_usbd_ep_stop_setup+0x20>)
    8c78:	4798      	blx	r3
}
    8c7a:	bf00      	nop
    8c7c:	3708      	adds	r7, #8
    8c7e:	46bd      	mov	sp, r7
    8c80:	bd80      	pop	{r7, pc}
    8c82:	bf00      	nop
    8c84:	000085e9 	.word	0x000085e9

00008c88 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    8c88:	b580      	push	{r7, lr}
    8c8a:	b082      	sub	sp, #8
    8c8c:	af00      	add	r7, sp, #0
    8c8e:	4603      	mov	r3, r0
    8c90:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    8c92:	79fb      	ldrb	r3, [r7, #7]
    8c94:	2210      	movs	r2, #16
    8c96:	4619      	mov	r1, r3
    8c98:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8c9c:	4b05      	ldr	r3, [pc, #20]	; (8cb4 <_usbd_ep_is_setup+0x2c>)
    8c9e:	4798      	blx	r3
    8ca0:	4603      	mov	r3, r0
    8ca2:	2b00      	cmp	r3, #0
    8ca4:	bf14      	ite	ne
    8ca6:	2301      	movne	r3, #1
    8ca8:	2300      	moveq	r3, #0
    8caa:	b2db      	uxtb	r3, r3
}
    8cac:	4618      	mov	r0, r3
    8cae:	3708      	adds	r7, #8
    8cb0:	46bd      	mov	sp, r7
    8cb2:	bd80      	pop	{r7, pc}
    8cb4:	000084df 	.word	0x000084df

00008cb8 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    8cb8:	b580      	push	{r7, lr}
    8cba:	b082      	sub	sp, #8
    8cbc:	af00      	add	r7, sp, #0
    8cbe:	4603      	mov	r3, r0
    8cc0:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    8cc2:	79fb      	ldrb	r3, [r7, #7]
    8cc4:	2110      	movs	r1, #16
    8cc6:	4618      	mov	r0, r3
    8cc8:	4b02      	ldr	r3, [pc, #8]	; (8cd4 <_usbd_ep_ack_setup+0x1c>)
    8cca:	4798      	blx	r3
}
    8ccc:	bf00      	nop
    8cce:	3708      	adds	r7, #8
    8cd0:	46bd      	mov	sp, r7
    8cd2:	bd80      	pop	{r7, pc}
    8cd4:	00008a65 	.word	0x00008a65

00008cd8 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    8cd8:	b580      	push	{r7, lr}
    8cda:	b082      	sub	sp, #8
    8cdc:	af00      	add	r7, sp, #0
    8cde:	4603      	mov	r3, r0
    8ce0:	71fb      	strb	r3, [r7, #7]
    8ce2:	460b      	mov	r3, r1
    8ce4:	71bb      	strb	r3, [r7, #6]
    8ce6:	4613      	mov	r3, r2
    8ce8:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    8cea:	797b      	ldrb	r3, [r7, #5]
    8cec:	2b00      	cmp	r3, #0
    8cee:	d00b      	beq.n	8d08 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    8cf0:	79bb      	ldrb	r3, [r7, #6]
    8cf2:	2201      	movs	r2, #1
    8cf4:	fa02 f303 	lsl.w	r3, r2, r3
    8cf8:	b2da      	uxtb	r2, r3
    8cfa:	79fb      	ldrb	r3, [r7, #7]
    8cfc:	4619      	mov	r1, r3
    8cfe:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8d02:	4b09      	ldr	r3, [pc, #36]	; (8d28 <_usbd_ep_set_toggle+0x50>)
    8d04:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    8d06:	e00a      	b.n	8d1e <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    8d08:	79bb      	ldrb	r3, [r7, #6]
    8d0a:	2201      	movs	r2, #1
    8d0c:	fa02 f303 	lsl.w	r3, r2, r3
    8d10:	b2da      	uxtb	r2, r3
    8d12:	79fb      	ldrb	r3, [r7, #7]
    8d14:	4619      	mov	r1, r3
    8d16:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8d1a:	4b04      	ldr	r3, [pc, #16]	; (8d2c <_usbd_ep_set_toggle+0x54>)
    8d1c:	4798      	blx	r3
}
    8d1e:	bf00      	nop
    8d20:	3708      	adds	r7, #8
    8d22:	46bd      	mov	sp, r7
    8d24:	bd80      	pop	{r7, pc}
    8d26:	bf00      	nop
    8d28:	00008569 	.word	0x00008569
    8d2c:	000085bd 	.word	0x000085bd

00008d30 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    8d30:	b580      	push	{r7, lr}
    8d32:	b082      	sub	sp, #8
    8d34:	af00      	add	r7, sp, #0
    8d36:	4603      	mov	r3, r0
    8d38:	460a      	mov	r2, r1
    8d3a:	71fb      	strb	r3, [r7, #7]
    8d3c:	4613      	mov	r3, r2
    8d3e:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    8d40:	79bb      	ldrb	r3, [r7, #6]
    8d42:	2201      	movs	r2, #1
    8d44:	409a      	lsls	r2, r3
    8d46:	79fb      	ldrb	r3, [r7, #7]
    8d48:	4611      	mov	r1, r2
    8d4a:	4618      	mov	r0, r3
    8d4c:	4b02      	ldr	r3, [pc, #8]	; (8d58 <_usbd_ep_ack_io_cpt+0x28>)
    8d4e:	4798      	blx	r3
}
    8d50:	bf00      	nop
    8d52:	3708      	adds	r7, #8
    8d54:	46bd      	mov	sp, r7
    8d56:	bd80      	pop	{r7, pc}
    8d58:	00008a65 	.word	0x00008a65

00008d5c <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    8d5c:	b480      	push	{r7}
    8d5e:	b085      	sub	sp, #20
    8d60:	af00      	add	r7, sp, #0
    8d62:	4603      	mov	r3, r0
    8d64:	603a      	str	r2, [r7, #0]
    8d66:	71fb      	strb	r3, [r7, #7]
    8d68:	460b      	mov	r3, r1
    8d6a:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8d6c:	79fa      	ldrb	r2, [r7, #7]
    8d6e:	79bb      	ldrb	r3, [r7, #6]
    8d70:	0052      	lsls	r2, r2, #1
    8d72:	4413      	add	r3, r2
    8d74:	011b      	lsls	r3, r3, #4
    8d76:	4a06      	ldr	r2, [pc, #24]	; (8d90 <_usbd_ep_set_buf+0x34>)
    8d78:	4413      	add	r3, r2
    8d7a:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    8d7c:	68fb      	ldr	r3, [r7, #12]
    8d7e:	683a      	ldr	r2, [r7, #0]
    8d80:	601a      	str	r2, [r3, #0]
}
    8d82:	bf00      	nop
    8d84:	3714      	adds	r7, #20
    8d86:	46bd      	mov	sp, r7
    8d88:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d8c:	4770      	bx	lr
    8d8e:	bf00      	nop
    8d90:	20000a98 	.word	0x20000a98

00008d94 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    8d94:	b480      	push	{r7}
    8d96:	b085      	sub	sp, #20
    8d98:	af00      	add	r7, sp, #0
    8d9a:	4603      	mov	r3, r0
    8d9c:	71fb      	strb	r3, [r7, #7]
    8d9e:	460b      	mov	r3, r1
    8da0:	71bb      	strb	r3, [r7, #6]
    8da2:	4613      	mov	r3, r2
    8da4:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8da6:	79fa      	ldrb	r2, [r7, #7]
    8da8:	79bb      	ldrb	r3, [r7, #6]
    8daa:	0052      	lsls	r2, r2, #1
    8dac:	4413      	add	r3, r2
    8dae:	011b      	lsls	r3, r3, #4
    8db0:	4a08      	ldr	r2, [pc, #32]	; (8dd4 <_usbd_ep_set_in_count+0x40>)
    8db2:	4413      	add	r3, r2
    8db4:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    8db6:	88bb      	ldrh	r3, [r7, #4]
    8db8:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8dbc:	b299      	uxth	r1, r3
    8dbe:	68fa      	ldr	r2, [r7, #12]
    8dc0:	6853      	ldr	r3, [r2, #4]
    8dc2:	f361 339b 	bfi	r3, r1, #14, #14
    8dc6:	6053      	str	r3, [r2, #4]
}
    8dc8:	bf00      	nop
    8dca:	3714      	adds	r7, #20
    8dcc:	46bd      	mov	sp, r7
    8dce:	f85d 7b04 	ldr.w	r7, [sp], #4
    8dd2:	4770      	bx	lr
    8dd4:	20000a98 	.word	0x20000a98

00008dd8 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    8dd8:	b480      	push	{r7}
    8dda:	b085      	sub	sp, #20
    8ddc:	af00      	add	r7, sp, #0
    8dde:	4603      	mov	r3, r0
    8de0:	71fb      	strb	r3, [r7, #7]
    8de2:	460b      	mov	r3, r1
    8de4:	71bb      	strb	r3, [r7, #6]
    8de6:	4613      	mov	r3, r2
    8de8:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8dea:	79fa      	ldrb	r2, [r7, #7]
    8dec:	79bb      	ldrb	r3, [r7, #6]
    8dee:	0052      	lsls	r2, r2, #1
    8df0:	4413      	add	r3, r2
    8df2:	011b      	lsls	r3, r3, #4
    8df4:	4a08      	ldr	r2, [pc, #32]	; (8e18 <_usbd_ep_set_in_size+0x40>)
    8df6:	4413      	add	r3, r2
    8df8:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    8dfa:	88bb      	ldrh	r3, [r7, #4]
    8dfc:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8e00:	b299      	uxth	r1, r3
    8e02:	68fa      	ldr	r2, [r7, #12]
    8e04:	6853      	ldr	r3, [r2, #4]
    8e06:	f361 030d 	bfi	r3, r1, #0, #14
    8e0a:	6053      	str	r3, [r2, #4]
}
    8e0c:	bf00      	nop
    8e0e:	3714      	adds	r7, #20
    8e10:	46bd      	mov	sp, r7
    8e12:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e16:	4770      	bx	lr
    8e18:	20000a98 	.word	0x20000a98

00008e1c <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    8e1c:	b480      	push	{r7}
    8e1e:	b085      	sub	sp, #20
    8e20:	af00      	add	r7, sp, #0
    8e22:	4603      	mov	r3, r0
    8e24:	71fb      	strb	r3, [r7, #7]
    8e26:	460b      	mov	r3, r1
    8e28:	71bb      	strb	r3, [r7, #6]
    8e2a:	4613      	mov	r3, r2
    8e2c:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8e2e:	79fa      	ldrb	r2, [r7, #7]
    8e30:	79bb      	ldrb	r3, [r7, #6]
    8e32:	0052      	lsls	r2, r2, #1
    8e34:	4413      	add	r3, r2
    8e36:	011b      	lsls	r3, r3, #4
    8e38:	4a08      	ldr	r2, [pc, #32]	; (8e5c <_usbd_ep_set_out_count+0x40>)
    8e3a:	4413      	add	r3, r2
    8e3c:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    8e3e:	88bb      	ldrh	r3, [r7, #4]
    8e40:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8e44:	b299      	uxth	r1, r3
    8e46:	68fa      	ldr	r2, [r7, #12]
    8e48:	6853      	ldr	r3, [r2, #4]
    8e4a:	f361 030d 	bfi	r3, r1, #0, #14
    8e4e:	6053      	str	r3, [r2, #4]
}
    8e50:	bf00      	nop
    8e52:	3714      	adds	r7, #20
    8e54:	46bd      	mov	sp, r7
    8e56:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e5a:	4770      	bx	lr
    8e5c:	20000a98 	.word	0x20000a98

00008e60 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    8e60:	b480      	push	{r7}
    8e62:	b085      	sub	sp, #20
    8e64:	af00      	add	r7, sp, #0
    8e66:	4603      	mov	r3, r0
    8e68:	71fb      	strb	r3, [r7, #7]
    8e6a:	460b      	mov	r3, r1
    8e6c:	71bb      	strb	r3, [r7, #6]
    8e6e:	4613      	mov	r3, r2
    8e70:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8e72:	79fa      	ldrb	r2, [r7, #7]
    8e74:	79bb      	ldrb	r3, [r7, #6]
    8e76:	0052      	lsls	r2, r2, #1
    8e78:	4413      	add	r3, r2
    8e7a:	011b      	lsls	r3, r3, #4
    8e7c:	4a08      	ldr	r2, [pc, #32]	; (8ea0 <_usbd_ep_set_out_size+0x40>)
    8e7e:	4413      	add	r3, r2
    8e80:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    8e82:	88bb      	ldrh	r3, [r7, #4]
    8e84:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8e88:	b299      	uxth	r1, r3
    8e8a:	68fa      	ldr	r2, [r7, #12]
    8e8c:	6853      	ldr	r3, [r2, #4]
    8e8e:	f361 339b 	bfi	r3, r1, #14, #14
    8e92:	6053      	str	r3, [r2, #4]
}
    8e94:	bf00      	nop
    8e96:	3714      	adds	r7, #20
    8e98:	46bd      	mov	sp, r7
    8e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e9e:	4770      	bx	lr
    8ea0:	20000a98 	.word	0x20000a98

00008ea4 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    8ea4:	b580      	push	{r7, lr}
    8ea6:	b084      	sub	sp, #16
    8ea8:	af00      	add	r7, sp, #0
    8eaa:	60ba      	str	r2, [r7, #8]
    8eac:	607b      	str	r3, [r7, #4]
    8eae:	4603      	mov	r3, r0
    8eb0:	73fb      	strb	r3, [r7, #15]
    8eb2:	460b      	mov	r3, r1
    8eb4:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    8eb6:	68bb      	ldr	r3, [r7, #8]
    8eb8:	b29a      	uxth	r2, r3
    8eba:	7bb9      	ldrb	r1, [r7, #14]
    8ebc:	7bfb      	ldrb	r3, [r7, #15]
    8ebe:	4618      	mov	r0, r3
    8ec0:	4b06      	ldr	r3, [pc, #24]	; (8edc <_usbd_ep_set_in_trans+0x38>)
    8ec2:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    8ec4:	687b      	ldr	r3, [r7, #4]
    8ec6:	b29a      	uxth	r2, r3
    8ec8:	7bb9      	ldrb	r1, [r7, #14]
    8eca:	7bfb      	ldrb	r3, [r7, #15]
    8ecc:	4618      	mov	r0, r3
    8ece:	4b04      	ldr	r3, [pc, #16]	; (8ee0 <_usbd_ep_set_in_trans+0x3c>)
    8ed0:	4798      	blx	r3
}
    8ed2:	bf00      	nop
    8ed4:	3710      	adds	r7, #16
    8ed6:	46bd      	mov	sp, r7
    8ed8:	bd80      	pop	{r7, pc}
    8eda:	bf00      	nop
    8edc:	00008dd9 	.word	0x00008dd9
    8ee0:	00008d95 	.word	0x00008d95

00008ee4 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    8ee4:	b580      	push	{r7, lr}
    8ee6:	b084      	sub	sp, #16
    8ee8:	af00      	add	r7, sp, #0
    8eea:	60ba      	str	r2, [r7, #8]
    8eec:	607b      	str	r3, [r7, #4]
    8eee:	4603      	mov	r3, r0
    8ef0:	73fb      	strb	r3, [r7, #15]
    8ef2:	460b      	mov	r3, r1
    8ef4:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    8ef6:	68bb      	ldr	r3, [r7, #8]
    8ef8:	b29a      	uxth	r2, r3
    8efa:	7bb9      	ldrb	r1, [r7, #14]
    8efc:	7bfb      	ldrb	r3, [r7, #15]
    8efe:	4618      	mov	r0, r3
    8f00:	4b06      	ldr	r3, [pc, #24]	; (8f1c <_usbd_ep_set_out_trans+0x38>)
    8f02:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    8f04:	687b      	ldr	r3, [r7, #4]
    8f06:	b29a      	uxth	r2, r3
    8f08:	7bb9      	ldrb	r1, [r7, #14]
    8f0a:	7bfb      	ldrb	r3, [r7, #15]
    8f0c:	4618      	mov	r0, r3
    8f0e:	4b04      	ldr	r3, [pc, #16]	; (8f20 <_usbd_ep_set_out_trans+0x3c>)
    8f10:	4798      	blx	r3
}
    8f12:	bf00      	nop
    8f14:	3710      	adds	r7, #16
    8f16:	46bd      	mov	sp, r7
    8f18:	bd80      	pop	{r7, pc}
    8f1a:	bf00      	nop
    8f1c:	00008e61 	.word	0x00008e61
    8f20:	00008e1d 	.word	0x00008e1d

00008f24 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    8f24:	b480      	push	{r7}
    8f26:	b085      	sub	sp, #20
    8f28:	af00      	add	r7, sp, #0
    8f2a:	4603      	mov	r3, r0
    8f2c:	460a      	mov	r2, r1
    8f2e:	71fb      	strb	r3, [r7, #7]
    8f30:	4613      	mov	r3, r2
    8f32:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8f34:	79fa      	ldrb	r2, [r7, #7]
    8f36:	79bb      	ldrb	r3, [r7, #6]
    8f38:	0052      	lsls	r2, r2, #1
    8f3a:	4413      	add	r3, r2
    8f3c:	011b      	lsls	r3, r3, #4
    8f3e:	4a06      	ldr	r2, [pc, #24]	; (8f58 <_usbd_ep_clear_bank_status+0x34>)
    8f40:	4413      	add	r3, r2
    8f42:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    8f44:	68fb      	ldr	r3, [r7, #12]
    8f46:	2200      	movs	r2, #0
    8f48:	729a      	strb	r2, [r3, #10]
}
    8f4a:	bf00      	nop
    8f4c:	3714      	adds	r7, #20
    8f4e:	46bd      	mov	sp, r7
    8f50:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f54:	4770      	bx	lr
    8f56:	bf00      	nop
    8f58:	20000a98 	.word	0x20000a98

00008f5c <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    8f5c:	b580      	push	{r7, lr}
    8f5e:	b082      	sub	sp, #8
    8f60:	af00      	add	r7, sp, #0
    8f62:	4603      	mov	r3, r0
    8f64:	71fb      	strb	r3, [r7, #7]
    8f66:	460b      	mov	r3, r1
    8f68:	71bb      	strb	r3, [r7, #6]
    8f6a:	4613      	mov	r3, r2
    8f6c:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    8f6e:	797b      	ldrb	r3, [r7, #5]
    8f70:	2b00      	cmp	r3, #0
    8f72:	d00b      	beq.n	8f8c <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8f74:	79bb      	ldrb	r3, [r7, #6]
    8f76:	2240      	movs	r2, #64	; 0x40
    8f78:	fa02 f303 	lsl.w	r3, r2, r3
    8f7c:	b2da      	uxtb	r2, r3
    8f7e:	79fb      	ldrb	r3, [r7, #7]
    8f80:	4619      	mov	r1, r3
    8f82:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8f86:	4b09      	ldr	r3, [pc, #36]	; (8fac <_usbd_ep_set_in_rdy+0x50>)
    8f88:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    8f8a:	e00a      	b.n	8fa2 <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8f8c:	79bb      	ldrb	r3, [r7, #6]
    8f8e:	2240      	movs	r2, #64	; 0x40
    8f90:	fa02 f303 	lsl.w	r3, r2, r3
    8f94:	b2da      	uxtb	r2, r3
    8f96:	79fb      	ldrb	r3, [r7, #7]
    8f98:	4619      	mov	r1, r3
    8f9a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8f9e:	4b04      	ldr	r3, [pc, #16]	; (8fb0 <_usbd_ep_set_in_rdy+0x54>)
    8fa0:	4798      	blx	r3
}
    8fa2:	bf00      	nop
    8fa4:	3708      	adds	r7, #8
    8fa6:	46bd      	mov	sp, r7
    8fa8:	bd80      	pop	{r7, pc}
    8faa:	bf00      	nop
    8fac:	00008569 	.word	0x00008569
    8fb0:	000085bd 	.word	0x000085bd

00008fb4 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    8fb4:	b580      	push	{r7, lr}
    8fb6:	b082      	sub	sp, #8
    8fb8:	af00      	add	r7, sp, #0
    8fba:	4603      	mov	r3, r0
    8fbc:	71fb      	strb	r3, [r7, #7]
    8fbe:	460b      	mov	r3, r1
    8fc0:	71bb      	strb	r3, [r7, #6]
    8fc2:	4613      	mov	r3, r2
    8fc4:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    8fc6:	797b      	ldrb	r3, [r7, #5]
    8fc8:	2b00      	cmp	r3, #0
    8fca:	d00b      	beq.n	8fe4 <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8fcc:	79bb      	ldrb	r3, [r7, #6]
    8fce:	2240      	movs	r2, #64	; 0x40
    8fd0:	fa02 f303 	lsl.w	r3, r2, r3
    8fd4:	b2da      	uxtb	r2, r3
    8fd6:	79fb      	ldrb	r3, [r7, #7]
    8fd8:	4619      	mov	r1, r3
    8fda:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8fde:	4b09      	ldr	r3, [pc, #36]	; (9004 <_usbd_ep_set_out_rdy+0x50>)
    8fe0:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    8fe2:	e00a      	b.n	8ffa <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8fe4:	79bb      	ldrb	r3, [r7, #6]
    8fe6:	2240      	movs	r2, #64	; 0x40
    8fe8:	fa02 f303 	lsl.w	r3, r2, r3
    8fec:	b2da      	uxtb	r2, r3
    8fee:	79fb      	ldrb	r3, [r7, #7]
    8ff0:	4619      	mov	r1, r3
    8ff2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8ff6:	4b04      	ldr	r3, [pc, #16]	; (9008 <_usbd_ep_set_out_rdy+0x54>)
    8ff8:	4798      	blx	r3
}
    8ffa:	bf00      	nop
    8ffc:	3708      	adds	r7, #8
    8ffe:	46bd      	mov	sp, r7
    9000:	bd80      	pop	{r7, pc}
    9002:	bf00      	nop
    9004:	000085bd 	.word	0x000085bd
    9008:	00008569 	.word	0x00008569

0000900c <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    900c:	b480      	push	{r7}
    900e:	b083      	sub	sp, #12
    9010:	af00      	add	r7, sp, #0
    9012:	4603      	mov	r3, r0
    9014:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    9016:	88fb      	ldrh	r3, [r7, #6]
    9018:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    901c:	d820      	bhi.n	9060 <_usbd_ep_pcksize_size+0x54>
    901e:	88fb      	ldrh	r3, [r7, #6]
    9020:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    9024:	d81a      	bhi.n	905c <_usbd_ep_pcksize_size+0x50>
    9026:	88fb      	ldrh	r3, [r7, #6]
    9028:	2b80      	cmp	r3, #128	; 0x80
    902a:	d815      	bhi.n	9058 <_usbd_ep_pcksize_size+0x4c>
    902c:	88fb      	ldrh	r3, [r7, #6]
    902e:	2b40      	cmp	r3, #64	; 0x40
    9030:	d810      	bhi.n	9054 <_usbd_ep_pcksize_size+0x48>
    9032:	88fb      	ldrh	r3, [r7, #6]
    9034:	2b20      	cmp	r3, #32
    9036:	d80b      	bhi.n	9050 <_usbd_ep_pcksize_size+0x44>
    9038:	88fb      	ldrh	r3, [r7, #6]
    903a:	2b10      	cmp	r3, #16
    903c:	d806      	bhi.n	904c <_usbd_ep_pcksize_size+0x40>
    903e:	88fb      	ldrh	r3, [r7, #6]
    9040:	2b08      	cmp	r3, #8
    9042:	bf8c      	ite	hi
    9044:	2301      	movhi	r3, #1
    9046:	2300      	movls	r3, #0
    9048:	b2db      	uxtb	r3, r3
    904a:	e00a      	b.n	9062 <_usbd_ep_pcksize_size+0x56>
    904c:	2302      	movs	r3, #2
    904e:	e008      	b.n	9062 <_usbd_ep_pcksize_size+0x56>
    9050:	2303      	movs	r3, #3
    9052:	e006      	b.n	9062 <_usbd_ep_pcksize_size+0x56>
    9054:	2304      	movs	r3, #4
    9056:	e004      	b.n	9062 <_usbd_ep_pcksize_size+0x56>
    9058:	2305      	movs	r3, #5
    905a:	e002      	b.n	9062 <_usbd_ep_pcksize_size+0x56>
    905c:	2306      	movs	r3, #6
    905e:	e000      	b.n	9062 <_usbd_ep_pcksize_size+0x56>
    9060:	2307      	movs	r3, #7
}
    9062:	4618      	mov	r0, r3
    9064:	370c      	adds	r7, #12
    9066:	46bd      	mov	sp, r7
    9068:	f85d 7b04 	ldr.w	r7, [sp], #4
    906c:	4770      	bx	lr
	...

00009070 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    9070:	b480      	push	{r7}
    9072:	b085      	sub	sp, #20
    9074:	af00      	add	r7, sp, #0
    9076:	4603      	mov	r3, r0
    9078:	460a      	mov	r2, r1
    907a:	71fb      	strb	r3, [r7, #7]
    907c:	4613      	mov	r3, r2
    907e:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    9080:	79fb      	ldrb	r3, [r7, #7]
    9082:	2b00      	cmp	r3, #0
    9084:	d008      	beq.n	9098 <_usb_d_dev_ept+0x28>
    9086:	79bb      	ldrb	r3, [r7, #6]
    9088:	2b00      	cmp	r3, #0
    908a:	d003      	beq.n	9094 <_usb_d_dev_ept+0x24>
    908c:	79fb      	ldrb	r3, [r7, #7]
    908e:	3304      	adds	r3, #4
    9090:	b2db      	uxtb	r3, r3
    9092:	e002      	b.n	909a <_usb_d_dev_ept+0x2a>
    9094:	79fb      	ldrb	r3, [r7, #7]
    9096:	e000      	b.n	909a <_usb_d_dev_ept+0x2a>
    9098:	2300      	movs	r3, #0
    909a:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    909c:	7bfa      	ldrb	r2, [r7, #15]
    909e:	4613      	mov	r3, r2
    90a0:	009b      	lsls	r3, r3, #2
    90a2:	4413      	add	r3, r2
    90a4:	009b      	lsls	r3, r3, #2
    90a6:	3310      	adds	r3, #16
    90a8:	4a04      	ldr	r2, [pc, #16]	; (90bc <_usb_d_dev_ept+0x4c>)
    90aa:	4413      	add	r3, r2
    90ac:	3304      	adds	r3, #4
}
    90ae:	4618      	mov	r0, r3
    90b0:	3714      	adds	r7, #20
    90b2:	46bd      	mov	sp, r7
    90b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    90b8:	4770      	bx	lr
    90ba:	bf00      	nop
    90bc:	200009d0 	.word	0x200009d0

000090c0 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    90c0:	b580      	push	{r7, lr}
    90c2:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    90c4:	2104      	movs	r1, #4
    90c6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    90ca:	4b03      	ldr	r3, [pc, #12]	; (90d8 <_usb_d_dev_sof+0x18>)
    90cc:	4798      	blx	r3
	dev_inst.callbacks.sof();
    90ce:	4b03      	ldr	r3, [pc, #12]	; (90dc <_usb_d_dev_sof+0x1c>)
    90d0:	681b      	ldr	r3, [r3, #0]
    90d2:	4798      	blx	r3
}
    90d4:	bf00      	nop
    90d6:	bd80      	pop	{r7, pc}
    90d8:	00008737 	.word	0x00008737
    90dc:	200009d0 	.word	0x200009d0

000090e0 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    90e0:	b580      	push	{r7, lr}
    90e2:	b084      	sub	sp, #16
    90e4:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    90e6:	2300      	movs	r3, #0
    90e8:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    90ea:	f240 2101 	movw	r1, #513	; 0x201
    90ee:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    90f2:	4b1a      	ldr	r3, [pc, #104]	; (915c <_usb_d_dev_lpmsusp+0x7c>)
    90f4:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    90f6:	f240 2101 	movw	r1, #513	; 0x201
    90fa:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    90fe:	4b18      	ldr	r3, [pc, #96]	; (9160 <_usb_d_dev_lpmsusp+0x80>)
    9100:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9102:	2170      	movs	r1, #112	; 0x70
    9104:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9108:	4b16      	ldr	r3, [pc, #88]	; (9164 <_usb_d_dev_lpmsusp+0x84>)
    910a:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    910c:	2300      	movs	r3, #0
    910e:	73fb      	strb	r3, [r7, #15]
    9110:	e018      	b.n	9144 <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    9112:	7bfb      	ldrb	r3, [r7, #15]
    9114:	015b      	lsls	r3, r3, #5
    9116:	4a14      	ldr	r2, [pc, #80]	; (9168 <_usb_d_dev_lpmsusp+0x88>)
    9118:	4413      	add	r3, r2
    911a:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    911c:	687b      	ldr	r3, [r7, #4]
    911e:	891b      	ldrh	r3, [r3, #8]
    9120:	f3c3 0303 	ubfx	r3, r3, #0, #4
    9124:	b2db      	uxtb	r3, r3
    9126:	2b03      	cmp	r3, #3
    9128:	d109      	bne.n	913e <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    912a:	687b      	ldr	r3, [r7, #4]
    912c:	891b      	ldrh	r3, [r3, #8]
    912e:	f3c3 130a 	ubfx	r3, r3, #4, #11
    9132:	b29b      	uxth	r3, r3
    9134:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    9136:	687b      	ldr	r3, [r7, #4]
    9138:	2200      	movs	r2, #0
    913a:	811a      	strh	r2, [r3, #8]
			break;
    913c:	e005      	b.n	914a <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    913e:	7bfb      	ldrb	r3, [r7, #15]
    9140:	3301      	adds	r3, #1
    9142:	73fb      	strb	r3, [r7, #15]
    9144:	7bfb      	ldrb	r3, [r7, #15]
    9146:	2b03      	cmp	r3, #3
    9148:	d9e3      	bls.n	9112 <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    914a:	4b08      	ldr	r3, [pc, #32]	; (916c <_usb_d_dev_lpmsusp+0x8c>)
    914c:	685b      	ldr	r3, [r3, #4]
    914e:	68b9      	ldr	r1, [r7, #8]
    9150:	2003      	movs	r0, #3
    9152:	4798      	blx	r3
}
    9154:	bf00      	nop
    9156:	3710      	adds	r7, #16
    9158:	46bd      	mov	sp, r7
    915a:	bd80      	pop	{r7, pc}
    915c:	00008737 	.word	0x00008737
    9160:	0000878d 	.word	0x0000878d
    9164:	00008755 	.word	0x00008755
    9168:	20000a98 	.word	0x20000a98
    916c:	200009d0 	.word	0x200009d0

00009170 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    9170:	b580      	push	{r7, lr}
    9172:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    9174:	2180      	movs	r1, #128	; 0x80
    9176:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    917a:	4b04      	ldr	r3, [pc, #16]	; (918c <_usb_d_dev_ramerr+0x1c>)
    917c:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    917e:	4b04      	ldr	r3, [pc, #16]	; (9190 <_usb_d_dev_ramerr+0x20>)
    9180:	685b      	ldr	r3, [r3, #4]
    9182:	2100      	movs	r1, #0
    9184:	2005      	movs	r0, #5
    9186:	4798      	blx	r3
}
    9188:	bf00      	nop
    918a:	bd80      	pop	{r7, pc}
    918c:	00008737 	.word	0x00008737
    9190:	200009d0 	.word	0x200009d0

00009194 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    9194:	b580      	push	{r7, lr}
    9196:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9198:	2170      	movs	r1, #112	; 0x70
    919a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    919e:	4b0b      	ldr	r3, [pc, #44]	; (91cc <_usb_d_dev_wakeup+0x38>)
    91a0:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    91a2:	2170      	movs	r1, #112	; 0x70
    91a4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    91a8:	4b09      	ldr	r3, [pc, #36]	; (91d0 <_usb_d_dev_wakeup+0x3c>)
    91aa:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    91ac:	f240 2101 	movw	r1, #513	; 0x201
    91b0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    91b4:	4b07      	ldr	r3, [pc, #28]	; (91d4 <_usb_d_dev_wakeup+0x40>)
    91b6:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    91b8:	2000      	movs	r0, #0
    91ba:	4b07      	ldr	r3, [pc, #28]	; (91d8 <_usb_d_dev_wakeup+0x44>)
    91bc:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    91be:	4b07      	ldr	r3, [pc, #28]	; (91dc <_usb_d_dev_wakeup+0x48>)
    91c0:	685b      	ldr	r3, [r3, #4]
    91c2:	2100      	movs	r1, #0
    91c4:	2002      	movs	r0, #2
    91c6:	4798      	blx	r3
}
    91c8:	bf00      	nop
    91ca:	bd80      	pop	{r7, pc}
    91cc:	00008737 	.word	0x00008737
    91d0:	0000878d 	.word	0x0000878d
    91d4:	00008755 	.word	0x00008755
    91d8:	00008a35 	.word	0x00008a35
    91dc:	200009d0 	.word	0x200009d0

000091e0 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    91e0:	b580      	push	{r7, lr}
    91e2:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    91e4:	2200      	movs	r2, #0
    91e6:	2100      	movs	r1, #0
    91e8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    91ec:	4b0d      	ldr	r3, [pc, #52]	; (9224 <_usb_d_dev_reset+0x44>)
    91ee:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    91f0:	2108      	movs	r1, #8
    91f2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    91f6:	4b0c      	ldr	r3, [pc, #48]	; (9228 <_usb_d_dev_reset+0x48>)
    91f8:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    91fa:	2170      	movs	r1, #112	; 0x70
    91fc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9200:	4b0a      	ldr	r3, [pc, #40]	; (922c <_usb_d_dev_reset+0x4c>)
    9202:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9204:	f240 2101 	movw	r1, #513	; 0x201
    9208:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    920c:	4b08      	ldr	r3, [pc, #32]	; (9230 <_usb_d_dev_reset+0x50>)
    920e:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    9210:	4b08      	ldr	r3, [pc, #32]	; (9234 <_usb_d_dev_reset+0x54>)
    9212:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    9214:	4b08      	ldr	r3, [pc, #32]	; (9238 <_usb_d_dev_reset+0x58>)
    9216:	685b      	ldr	r3, [r3, #4]
    9218:	2100      	movs	r1, #0
    921a:	2001      	movs	r0, #1
    921c:	4798      	blx	r3
}
    921e:	bf00      	nop
    9220:	bd80      	pop	{r7, pc}
    9222:	bf00      	nop
    9224:	000086cd 	.word	0x000086cd
    9228:	00008737 	.word	0x00008737
    922c:	0000878d 	.word	0x0000878d
    9230:	00008755 	.word	0x00008755
    9234:	00009d9d 	.word	0x00009d9d
    9238:	200009d0 	.word	0x200009d0

0000923c <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    923c:	b580      	push	{r7, lr}
    923e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9240:	f240 2101 	movw	r1, #513	; 0x201
    9244:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9248:	4b09      	ldr	r3, [pc, #36]	; (9270 <_usb_d_dev_suspend+0x34>)
    924a:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    924c:	f240 2101 	movw	r1, #513	; 0x201
    9250:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9254:	4b07      	ldr	r3, [pc, #28]	; (9274 <_usb_d_dev_suspend+0x38>)
    9256:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9258:	2170      	movs	r1, #112	; 0x70
    925a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    925e:	4b06      	ldr	r3, [pc, #24]	; (9278 <_usb_d_dev_suspend+0x3c>)
    9260:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    9262:	4b06      	ldr	r3, [pc, #24]	; (927c <_usb_d_dev_suspend+0x40>)
    9264:	685b      	ldr	r3, [r3, #4]
    9266:	2100      	movs	r1, #0
    9268:	2004      	movs	r0, #4
    926a:	4798      	blx	r3
}
    926c:	bf00      	nop
    926e:	bd80      	pop	{r7, pc}
    9270:	00008737 	.word	0x00008737
    9274:	0000878d 	.word	0x0000878d
    9278:	00008755 	.word	0x00008755
    927c:	200009d0 	.word	0x200009d0

00009280 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    9280:	b580      	push	{r7, lr}
    9282:	b082      	sub	sp, #8
    9284:	af00      	add	r7, sp, #0
	bool     rc    = true;
    9286:	2301      	movs	r3, #1
    9288:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    928a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    928e:	4b22      	ldr	r3, [pc, #136]	; (9318 <_usb_d_dev_handle_nep+0x98>)
    9290:	4798      	blx	r3
    9292:	4603      	mov	r3, r0
    9294:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    9296:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    929a:	4b20      	ldr	r3, [pc, #128]	; (931c <_usb_d_dev_handle_nep+0x9c>)
    929c:	4798      	blx	r3
    929e:	4603      	mov	r3, r0
    92a0:	461a      	mov	r2, r3
    92a2:	88bb      	ldrh	r3, [r7, #4]
    92a4:	4013      	ands	r3, r2
    92a6:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    92a8:	88bb      	ldrh	r3, [r7, #4]
    92aa:	f003 0304 	and.w	r3, r3, #4
    92ae:	2b00      	cmp	r3, #0
    92b0:	d003      	beq.n	92ba <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    92b2:	4b1b      	ldr	r3, [pc, #108]	; (9320 <_usb_d_dev_handle_nep+0xa0>)
    92b4:	4798      	blx	r3
		return true;
    92b6:	2301      	movs	r3, #1
    92b8:	e02a      	b.n	9310 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    92ba:	88bb      	ldrh	r3, [r7, #4]
    92bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
    92c0:	2b00      	cmp	r3, #0
    92c2:	d002      	beq.n	92ca <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    92c4:	4b17      	ldr	r3, [pc, #92]	; (9324 <_usb_d_dev_handle_nep+0xa4>)
    92c6:	4798      	blx	r3
    92c8:	e021      	b.n	930e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    92ca:	88bb      	ldrh	r3, [r7, #4]
    92cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
    92d0:	2b00      	cmp	r3, #0
    92d2:	d002      	beq.n	92da <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    92d4:	4b14      	ldr	r3, [pc, #80]	; (9328 <_usb_d_dev_handle_nep+0xa8>)
    92d6:	4798      	blx	r3
    92d8:	e019      	b.n	930e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    92da:	88bb      	ldrh	r3, [r7, #4]
    92dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
    92e0:	2b00      	cmp	r3, #0
    92e2:	d002      	beq.n	92ea <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    92e4:	4b11      	ldr	r3, [pc, #68]	; (932c <_usb_d_dev_handle_nep+0xac>)
    92e6:	4798      	blx	r3
    92e8:	e011      	b.n	930e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    92ea:	88bb      	ldrh	r3, [r7, #4]
    92ec:	f003 0308 	and.w	r3, r3, #8
    92f0:	2b00      	cmp	r3, #0
    92f2:	d002      	beq.n	92fa <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    92f4:	4b0e      	ldr	r3, [pc, #56]	; (9330 <_usb_d_dev_handle_nep+0xb0>)
    92f6:	4798      	blx	r3
    92f8:	e009      	b.n	930e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    92fa:	88bb      	ldrh	r3, [r7, #4]
    92fc:	f003 0301 	and.w	r3, r3, #1
    9300:	2b00      	cmp	r3, #0
    9302:	d002      	beq.n	930a <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    9304:	4b0b      	ldr	r3, [pc, #44]	; (9334 <_usb_d_dev_handle_nep+0xb4>)
    9306:	4798      	blx	r3
    9308:	e001      	b.n	930e <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    930a:	2300      	movs	r3, #0
    930c:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    930e:	79fb      	ldrb	r3, [r7, #7]
}
    9310:	4618      	mov	r0, r3
    9312:	3708      	adds	r7, #8
    9314:	46bd      	mov	sp, r7
    9316:	bd80      	pop	{r7, pc}
    9318:	0000871d 	.word	0x0000871d
    931c:	00008773 	.word	0x00008773
    9320:	000090c1 	.word	0x000090c1
    9324:	000090e1 	.word	0x000090e1
    9328:	00009171 	.word	0x00009171
    932c:	00009195 	.word	0x00009195
    9330:	000091e1 	.word	0x000091e1
    9334:	0000923d 	.word	0x0000923d

00009338 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    9338:	b590      	push	{r4, r7, lr}
    933a:	b089      	sub	sp, #36	; 0x24
    933c:	af00      	add	r7, sp, #0
    933e:	6078      	str	r0, [r7, #4]
    9340:	460b      	mov	r3, r1
    9342:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    9344:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9348:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    934a:	687b      	ldr	r3, [r7, #4]
    934c:	7c9b      	ldrb	r3, [r3, #18]
    934e:	f003 030f 	and.w	r3, r3, #15
    9352:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    9354:	7dfb      	ldrb	r3, [r7, #23]
    9356:	015b      	lsls	r3, r3, #5
    9358:	4a73      	ldr	r2, [pc, #460]	; (9528 <_usb_d_dev_in_next+0x1f0>)
    935a:	4413      	add	r3, r2
    935c:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    935e:	78fb      	ldrb	r3, [r7, #3]
    9360:	2b00      	cmp	r3, #0
    9362:	d006      	beq.n	9372 <_usb_d_dev_in_next+0x3a>
    9364:	693b      	ldr	r3, [r7, #16]
    9366:	3310      	adds	r3, #16
    9368:	685b      	ldr	r3, [r3, #4]
    936a:	f3c3 030d 	ubfx	r3, r3, #0, #14
    936e:	b29b      	uxth	r3, r3
    9370:	e000      	b.n	9374 <_usb_d_dev_in_next+0x3c>
    9372:	2300      	movs	r3, #0
    9374:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    9376:	687b      	ldr	r3, [r7, #4]
    9378:	8a1b      	ldrh	r3, [r3, #16]
    937a:	f240 32ff 	movw	r2, #1023	; 0x3ff
    937e:	4293      	cmp	r3, r2
    9380:	d103      	bne.n	938a <_usb_d_dev_in_next+0x52>
    9382:	687b      	ldr	r3, [r7, #4]
    9384:	8a1b      	ldrh	r3, [r3, #16]
    9386:	b21b      	sxth	r3, r3
    9388:	e004      	b.n	9394 <_usb_d_dev_in_next+0x5c>
    938a:	687b      	ldr	r3, [r7, #4]
    938c:	8a1b      	ldrh	r3, [r3, #16]
    938e:	3b01      	subs	r3, #1
    9390:	b29b      	uxth	r3, r3
    9392:	b21b      	sxth	r3, r3
    9394:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    9398:	4013      	ands	r3, r2
    939a:	b21b      	sxth	r3, r3
    939c:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    939e:	2300      	movs	r3, #0
    93a0:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    93a2:	687b      	ldr	r3, [r7, #4]
    93a4:	7cdb      	ldrb	r3, [r3, #19]
    93a6:	f003 0307 	and.w	r3, r3, #7
    93aa:	b2db      	uxtb	r3, r3
    93ac:	2b01      	cmp	r3, #1
    93ae:	bf0c      	ite	eq
    93b0:	2301      	moveq	r3, #1
    93b2:	2300      	movne	r3, #0
    93b4:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    93b6:	78fb      	ldrb	r3, [r7, #3]
    93b8:	2b00      	cmp	r3, #0
    93ba:	d004      	beq.n	93c6 <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    93bc:	7dfb      	ldrb	r3, [r7, #23]
    93be:	2101      	movs	r1, #1
    93c0:	4618      	mov	r0, r3
    93c2:	4b5a      	ldr	r3, [pc, #360]	; (952c <_usb_d_dev_in_next+0x1f4>)
    93c4:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    93c6:	687b      	ldr	r3, [r7, #4]
    93c8:	689a      	ldr	r2, [r3, #8]
    93ca:	89fb      	ldrh	r3, [r7, #14]
    93cc:	441a      	add	r2, r3
    93ce:	687b      	ldr	r3, [r7, #4]
    93d0:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    93d2:	687b      	ldr	r3, [r7, #4]
    93d4:	689a      	ldr	r2, [r3, #8]
    93d6:	687b      	ldr	r3, [r7, #4]
    93d8:	685b      	ldr	r3, [r3, #4]
    93da:	429a      	cmp	r2, r3
    93dc:	d243      	bcs.n	9466 <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    93de:	687b      	ldr	r3, [r7, #4]
    93e0:	685b      	ldr	r3, [r3, #4]
    93e2:	b29a      	uxth	r2, r3
    93e4:	687b      	ldr	r3, [r7, #4]
    93e6:	689b      	ldr	r3, [r3, #8]
    93e8:	b29b      	uxth	r3, r3
    93ea:	1ad3      	subs	r3, r2, r3
    93ec:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    93ee:	687b      	ldr	r3, [r7, #4]
    93f0:	7cdb      	ldrb	r3, [r3, #19]
    93f2:	f003 0320 	and.w	r3, r3, #32
    93f6:	b2db      	uxtb	r3, r3
    93f8:	2b00      	cmp	r3, #0
    93fa:	d01b      	beq.n	9434 <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    93fc:	687b      	ldr	r3, [r7, #4]
    93fe:	8a1b      	ldrh	r3, [r3, #16]
    9400:	8bfa      	ldrh	r2, [r7, #30]
    9402:	429a      	cmp	r2, r3
    9404:	d902      	bls.n	940c <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    9406:	687b      	ldr	r3, [r7, #4]
    9408:	8a1b      	ldrh	r3, [r3, #16]
    940a:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    940c:	687b      	ldr	r3, [r7, #4]
    940e:	68d8      	ldr	r0, [r3, #12]
    9410:	687b      	ldr	r3, [r7, #4]
    9412:	681a      	ldr	r2, [r3, #0]
    9414:	687b      	ldr	r3, [r7, #4]
    9416:	689b      	ldr	r3, [r3, #8]
    9418:	4413      	add	r3, r2
    941a:	8bfa      	ldrh	r2, [r7, #30]
    941c:	4619      	mov	r1, r3
    941e:	4b44      	ldr	r3, [pc, #272]	; (9530 <_usb_d_dev_in_next+0x1f8>)
    9420:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    9422:	687b      	ldr	r3, [r7, #4]
    9424:	68db      	ldr	r3, [r3, #12]
    9426:	461a      	mov	r2, r3
    9428:	7dfb      	ldrb	r3, [r7, #23]
    942a:	2101      	movs	r1, #1
    942c:	4618      	mov	r0, r3
    942e:	4b41      	ldr	r3, [pc, #260]	; (9534 <_usb_d_dev_in_next+0x1fc>)
    9430:	4798      	blx	r3
    9432:	e011      	b.n	9458 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    9434:	8bfb      	ldrh	r3, [r7, #30]
    9436:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    943a:	d902      	bls.n	9442 <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    943c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    9440:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    9442:	687b      	ldr	r3, [r7, #4]
    9444:	681a      	ldr	r2, [r3, #0]
    9446:	687b      	ldr	r3, [r7, #4]
    9448:	689b      	ldr	r3, [r3, #8]
    944a:	4413      	add	r3, r2
    944c:	461a      	mov	r2, r3
    944e:	7dfb      	ldrb	r3, [r7, #23]
    9450:	2101      	movs	r1, #1
    9452:	4618      	mov	r0, r3
    9454:	4b37      	ldr	r3, [pc, #220]	; (9534 <_usb_d_dev_in_next+0x1fc>)
    9456:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    9458:	8bfa      	ldrh	r2, [r7, #30]
    945a:	7df8      	ldrb	r0, [r7, #23]
    945c:	2300      	movs	r3, #0
    945e:	2101      	movs	r1, #1
    9460:	4c35      	ldr	r4, [pc, #212]	; (9538 <_usb_d_dev_in_next+0x200>)
    9462:	47a0      	blx	r4
		goto _in_tx_exec;
    9464:	e041      	b.n	94ea <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    9466:	687b      	ldr	r3, [r7, #4]
    9468:	7cdb      	ldrb	r3, [r3, #19]
    946a:	f003 0310 	and.w	r3, r3, #16
    946e:	b2db      	uxtb	r3, r3
    9470:	2b00      	cmp	r3, #0
    9472:	d00b      	beq.n	948c <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    9474:	687a      	ldr	r2, [r7, #4]
    9476:	7cd3      	ldrb	r3, [r2, #19]
    9478:	f36f 1304 	bfc	r3, #4, #1
    947c:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    947e:	7df8      	ldrb	r0, [r7, #23]
    9480:	2300      	movs	r3, #0
    9482:	2200      	movs	r2, #0
    9484:	2101      	movs	r1, #1
    9486:	4c2c      	ldr	r4, [pc, #176]	; (9538 <_usb_d_dev_in_next+0x200>)
    9488:	47a0      	blx	r4
		goto _in_tx_exec;
    948a:	e02e      	b.n	94ea <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    948c:	7afb      	ldrb	r3, [r7, #11]
    948e:	2b00      	cmp	r3, #0
    9490:	d006      	beq.n	94a0 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    9492:	7dfb      	ldrb	r3, [r7, #23]
    9494:	224b      	movs	r2, #75	; 0x4b
    9496:	4619      	mov	r1, r3
    9498:	69b8      	ldr	r0, [r7, #24]
    949a:	4b28      	ldr	r3, [pc, #160]	; (953c <_usb_d_dev_in_next+0x204>)
    949c:	4798      	blx	r3
    949e:	e005      	b.n	94ac <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    94a0:	7dfb      	ldrb	r3, [r7, #23]
    94a2:	224a      	movs	r2, #74	; 0x4a
    94a4:	4619      	mov	r1, r3
    94a6:	69b8      	ldr	r0, [r7, #24]
    94a8:	4b24      	ldr	r3, [pc, #144]	; (953c <_usb_d_dev_in_next+0x204>)
    94aa:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    94ac:	687b      	ldr	r3, [r7, #4]
    94ae:	8a1b      	ldrh	r3, [r3, #16]
    94b0:	89ba      	ldrh	r2, [r7, #12]
    94b2:	429a      	cmp	r2, r3
    94b4:	d114      	bne.n	94e0 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    94b6:	687a      	ldr	r2, [r7, #4]
    94b8:	7cd3      	ldrb	r3, [r2, #19]
    94ba:	f36f 1386 	bfc	r3, #6, #1
    94be:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    94c0:	4b1f      	ldr	r3, [pc, #124]	; (9540 <_usb_d_dev_in_next+0x208>)
    94c2:	68db      	ldr	r3, [r3, #12]
    94c4:	687a      	ldr	r2, [r7, #4]
    94c6:	7c90      	ldrb	r0, [r2, #18]
    94c8:	687a      	ldr	r2, [r7, #4]
    94ca:	6892      	ldr	r2, [r2, #8]
    94cc:	4611      	mov	r1, r2
    94ce:	4798      	blx	r3
    94d0:	4603      	mov	r3, r0
    94d2:	2b00      	cmp	r3, #0
    94d4:	d124      	bne.n	9520 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    94d6:	687a      	ldr	r2, [r7, #4]
    94d8:	7cd3      	ldrb	r3, [r2, #19]
    94da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    94de:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    94e0:	2100      	movs	r1, #0
    94e2:	6878      	ldr	r0, [r7, #4]
    94e4:	4b17      	ldr	r3, [pc, #92]	; (9544 <_usb_d_dev_in_next+0x20c>)
    94e6:	4798      	blx	r3
	return;
    94e8:	e01b      	b.n	9522 <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    94ea:	78fb      	ldrb	r3, [r7, #3]
    94ec:	f083 0301 	eor.w	r3, r3, #1
    94f0:	b2db      	uxtb	r3, r3
    94f2:	2b00      	cmp	r3, #0
    94f4:	d00d      	beq.n	9512 <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    94f6:	7afb      	ldrb	r3, [r7, #11]
    94f8:	2b00      	cmp	r3, #0
    94fa:	d002      	beq.n	9502 <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    94fc:	234e      	movs	r3, #78	; 0x4e
    94fe:	777b      	strb	r3, [r7, #29]
    9500:	e001      	b.n	9506 <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    9502:	234a      	movs	r3, #74	; 0x4a
    9504:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    9506:	7f7a      	ldrb	r2, [r7, #29]
    9508:	7dfb      	ldrb	r3, [r7, #23]
    950a:	4619      	mov	r1, r3
    950c:	69b8      	ldr	r0, [r7, #24]
    950e:	4b0e      	ldr	r3, [pc, #56]	; (9548 <_usb_d_dev_in_next+0x210>)
    9510:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    9512:	7dfb      	ldrb	r3, [r7, #23]
    9514:	2201      	movs	r2, #1
    9516:	2101      	movs	r1, #1
    9518:	4618      	mov	r0, r3
    951a:	4b0c      	ldr	r3, [pc, #48]	; (954c <_usb_d_dev_in_next+0x214>)
    951c:	4798      	blx	r3
    951e:	e000      	b.n	9522 <_usb_d_dev_in_next+0x1ea>
			return;
    9520:	bf00      	nop
}
    9522:	3724      	adds	r7, #36	; 0x24
    9524:	46bd      	mov	sp, r7
    9526:	bd90      	pop	{r4, r7, pc}
    9528:	20000a98 	.word	0x20000a98
    952c:	00008d31 	.word	0x00008d31
    9530:	0000dccd 	.word	0x0000dccd
    9534:	00008d5d 	.word	0x00008d5d
    9538:	00008ea5 	.word	0x00008ea5
    953c:	0000863d 	.word	0x0000863d
    9540:	200009d0 	.word	0x200009d0
    9544:	0000a661 	.word	0x0000a661
    9548:	00008611 	.word	0x00008611
    954c:	00008f5d 	.word	0x00008f5d

00009550 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    9550:	b590      	push	{r4, r7, lr}
    9552:	b08b      	sub	sp, #44	; 0x2c
    9554:	af00      	add	r7, sp, #0
    9556:	6078      	str	r0, [r7, #4]
    9558:	460b      	mov	r3, r1
    955a:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    955c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9560:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    9562:	687b      	ldr	r3, [r7, #4]
    9564:	7c9b      	ldrb	r3, [r3, #18]
    9566:	f003 030f 	and.w	r3, r3, #15
    956a:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    956c:	7ffb      	ldrb	r3, [r7, #31]
    956e:	015b      	lsls	r3, r3, #5
    9570:	4a94      	ldr	r2, [pc, #592]	; (97c4 <_usb_d_dev_out_next+0x274>)
    9572:	4413      	add	r3, r2
    9574:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    9576:	78fb      	ldrb	r3, [r7, #3]
    9578:	2b00      	cmp	r3, #0
    957a:	d005      	beq.n	9588 <_usb_d_dev_out_next+0x38>
    957c:	69bb      	ldr	r3, [r7, #24]
    957e:	685b      	ldr	r3, [r3, #4]
    9580:	f3c3 338d 	ubfx	r3, r3, #14, #14
    9584:	b29b      	uxth	r3, r3
    9586:	e000      	b.n	958a <_usb_d_dev_out_next+0x3a>
    9588:	2300      	movs	r3, #0
    958a:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    958c:	78fb      	ldrb	r3, [r7, #3]
    958e:	2b00      	cmp	r3, #0
    9590:	d005      	beq.n	959e <_usb_d_dev_out_next+0x4e>
    9592:	69bb      	ldr	r3, [r7, #24]
    9594:	685b      	ldr	r3, [r3, #4]
    9596:	f3c3 030d 	ubfx	r3, r3, #0, #14
    959a:	b29b      	uxth	r3, r3
    959c:	e000      	b.n	95a0 <_usb_d_dev_out_next+0x50>
    959e:	2300      	movs	r3, #0
    95a0:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    95a2:	687b      	ldr	r3, [r7, #4]
    95a4:	8a1b      	ldrh	r3, [r3, #16]
    95a6:	f240 32ff 	movw	r2, #1023	; 0x3ff
    95aa:	4293      	cmp	r3, r2
    95ac:	d004      	beq.n	95b8 <_usb_d_dev_out_next+0x68>
    95ae:	687b      	ldr	r3, [r7, #4]
    95b0:	8a1b      	ldrh	r3, [r3, #16]
    95b2:	3b01      	subs	r3, #1
    95b4:	b29b      	uxth	r3, r3
    95b6:	e001      	b.n	95bc <_usb_d_dev_out_next+0x6c>
    95b8:	f240 33ff 	movw	r3, #1023	; 0x3ff
    95bc:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    95be:	8aba      	ldrh	r2, [r7, #20]
    95c0:	8a7b      	ldrh	r3, [r7, #18]
    95c2:	4013      	ands	r3, r2
    95c4:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    95c6:	687b      	ldr	r3, [r7, #4]
    95c8:	7cdb      	ldrb	r3, [r3, #19]
    95ca:	f003 0307 	and.w	r3, r3, #7
    95ce:	b2db      	uxtb	r3, r3
    95d0:	2b01      	cmp	r3, #1
    95d2:	bf0c      	ite	eq
    95d4:	2301      	moveq	r3, #1
    95d6:	2300      	movne	r3, #0
    95d8:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    95da:	78fb      	ldrb	r3, [r7, #3]
    95dc:	2b00      	cmp	r3, #0
    95de:	d004      	beq.n	95ea <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    95e0:	7ffb      	ldrb	r3, [r7, #31]
    95e2:	2100      	movs	r1, #0
    95e4:	4618      	mov	r0, r3
    95e6:	4b78      	ldr	r3, [pc, #480]	; (97c8 <_usb_d_dev_out_next+0x278>)
    95e8:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    95ea:	687b      	ldr	r3, [r7, #4]
    95ec:	7cdb      	ldrb	r3, [r3, #19]
    95ee:	f003 0320 	and.w	r3, r3, #32
    95f2:	b2db      	uxtb	r3, r3
    95f4:	2b00      	cmp	r3, #0
    95f6:	d01c      	beq.n	9632 <_usb_d_dev_out_next+0xe2>
    95f8:	687b      	ldr	r3, [r7, #4]
    95fa:	685b      	ldr	r3, [r3, #4]
    95fc:	2b00      	cmp	r3, #0
    95fe:	d018      	beq.n	9632 <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    9600:	687b      	ldr	r3, [r7, #4]
    9602:	685b      	ldr	r3, [r3, #4]
    9604:	b29a      	uxth	r2, r3
    9606:	687b      	ldr	r3, [r7, #4]
    9608:	689b      	ldr	r3, [r3, #8]
    960a:	b29b      	uxth	r3, r3
    960c:	1ad3      	subs	r3, r2, r3
    960e:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    9610:	687b      	ldr	r3, [r7, #4]
    9612:	681a      	ldr	r2, [r3, #0]
    9614:	687b      	ldr	r3, [r7, #4]
    9616:	689b      	ldr	r3, [r3, #8]
    9618:	18d0      	adds	r0, r2, r3
    961a:	687b      	ldr	r3, [r7, #4]
    961c:	68d9      	ldr	r1, [r3, #12]
    961e:	89ba      	ldrh	r2, [r7, #12]
    9620:	8a3b      	ldrh	r3, [r7, #16]
    9622:	429a      	cmp	r2, r3
    9624:	d901      	bls.n	962a <_usb_d_dev_out_next+0xda>
    9626:	8a3b      	ldrh	r3, [r7, #16]
    9628:	e000      	b.n	962c <_usb_d_dev_out_next+0xdc>
    962a:	89bb      	ldrh	r3, [r7, #12]
    962c:	461a      	mov	r2, r3
    962e:	4b67      	ldr	r3, [pc, #412]	; (97cc <_usb_d_dev_out_next+0x27c>)
    9630:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    9632:	687b      	ldr	r3, [r7, #4]
    9634:	685b      	ldr	r3, [r3, #4]
    9636:	2b00      	cmp	r3, #0
    9638:	d121      	bne.n	967e <_usb_d_dev_out_next+0x12e>
    963a:	687b      	ldr	r3, [r7, #4]
    963c:	7cdb      	ldrb	r3, [r3, #19]
    963e:	f003 0310 	and.w	r3, r3, #16
    9642:	b2db      	uxtb	r3, r3
    9644:	2b00      	cmp	r3, #0
    9646:	d01a      	beq.n	967e <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    9648:	687a      	ldr	r2, [r7, #4]
    964a:	7cd3      	ldrb	r3, [r2, #19]
    964c:	f36f 1304 	bfc	r3, #4, #1
    9650:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    9652:	687a      	ldr	r2, [r7, #4]
    9654:	7cd3      	ldrb	r3, [r2, #19]
    9656:	f043 0320 	orr.w	r3, r3, #32
    965a:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    965c:	687b      	ldr	r3, [r7, #4]
    965e:	68db      	ldr	r3, [r3, #12]
    9660:	461a      	mov	r2, r3
    9662:	7ffb      	ldrb	r3, [r7, #31]
    9664:	2100      	movs	r1, #0
    9666:	4618      	mov	r0, r3
    9668:	4b59      	ldr	r3, [pc, #356]	; (97d0 <_usb_d_dev_out_next+0x280>)
    966a:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    966c:	687b      	ldr	r3, [r7, #4]
    966e:	8a1b      	ldrh	r3, [r3, #16]
    9670:	461a      	mov	r2, r3
    9672:	7ff8      	ldrb	r0, [r7, #31]
    9674:	2300      	movs	r3, #0
    9676:	2100      	movs	r1, #0
    9678:	4c56      	ldr	r4, [pc, #344]	; (97d4 <_usb_d_dev_out_next+0x284>)
    967a:	47a0      	blx	r4
		goto _out_rx_exec;
    967c:	e090      	b.n	97a0 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    967e:	78fb      	ldrb	r3, [r7, #3]
    9680:	2b00      	cmp	r3, #0
    9682:	d010      	beq.n	96a6 <_usb_d_dev_out_next+0x156>
    9684:	687b      	ldr	r3, [r7, #4]
    9686:	8a1b      	ldrh	r3, [r3, #16]
    9688:	8a3a      	ldrh	r2, [r7, #16]
    968a:	429a      	cmp	r2, r3
    968c:	d20b      	bcs.n	96a6 <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    968e:	687a      	ldr	r2, [r7, #4]
    9690:	7cd3      	ldrb	r3, [r2, #19]
    9692:	f36f 1304 	bfc	r3, #4, #1
    9696:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    9698:	687b      	ldr	r3, [r7, #4]
    969a:	689a      	ldr	r2, [r3, #8]
    969c:	8abb      	ldrh	r3, [r7, #20]
    969e:	441a      	add	r2, r3
    96a0:	687b      	ldr	r3, [r7, #4]
    96a2:	609a      	str	r2, [r3, #8]
    96a4:	e05c      	b.n	9760 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    96a6:	687b      	ldr	r3, [r7, #4]
    96a8:	689a      	ldr	r2, [r3, #8]
    96aa:	8afb      	ldrh	r3, [r7, #22]
    96ac:	441a      	add	r2, r3
    96ae:	687b      	ldr	r3, [r7, #4]
    96b0:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    96b2:	687b      	ldr	r3, [r7, #4]
    96b4:	689a      	ldr	r2, [r3, #8]
    96b6:	687b      	ldr	r3, [r7, #4]
    96b8:	685b      	ldr	r3, [r3, #4]
    96ba:	429a      	cmp	r2, r3
    96bc:	d250      	bcs.n	9760 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    96be:	687b      	ldr	r3, [r7, #4]
    96c0:	685b      	ldr	r3, [r3, #4]
    96c2:	b29a      	uxth	r2, r3
    96c4:	687b      	ldr	r3, [r7, #4]
    96c6:	689b      	ldr	r3, [r3, #8]
    96c8:	b29b      	uxth	r3, r3
    96ca:	1ad3      	subs	r3, r2, r3
    96cc:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    96ce:	687b      	ldr	r3, [r7, #4]
    96d0:	7cdb      	ldrb	r3, [r3, #19]
    96d2:	f003 0320 	and.w	r3, r3, #32
    96d6:	b2db      	uxtb	r3, r3
    96d8:	2b00      	cmp	r3, #0
    96da:	d010      	beq.n	96fe <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    96dc:	687b      	ldr	r3, [r7, #4]
    96de:	8a1b      	ldrh	r3, [r3, #16]
    96e0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    96e2:	429a      	cmp	r2, r3
    96e4:	d902      	bls.n	96ec <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    96e6:	687b      	ldr	r3, [r7, #4]
    96e8:	8a1b      	ldrh	r3, [r3, #16]
    96ea:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    96ec:	687b      	ldr	r3, [r7, #4]
    96ee:	68db      	ldr	r3, [r3, #12]
    96f0:	461a      	mov	r2, r3
    96f2:	7ffb      	ldrb	r3, [r7, #31]
    96f4:	2100      	movs	r1, #0
    96f6:	4618      	mov	r0, r3
    96f8:	4b35      	ldr	r3, [pc, #212]	; (97d0 <_usb_d_dev_out_next+0x280>)
    96fa:	4798      	blx	r3
    96fc:	e029      	b.n	9752 <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    96fe:	687b      	ldr	r3, [r7, #4]
    9700:	8a1b      	ldrh	r3, [r3, #16]
    9702:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9704:	429a      	cmp	r2, r3
    9706:	d90f      	bls.n	9728 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    9708:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    970a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    970e:	d903      	bls.n	9718 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    9710:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    9714:	84fb      	strh	r3, [r7, #38]	; 0x26
    9716:	e011      	b.n	973c <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    9718:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    971a:	8a7b      	ldrh	r3, [r7, #18]
    971c:	4013      	ands	r3, r2
    971e:	b29b      	uxth	r3, r3
    9720:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9722:	1ad3      	subs	r3, r2, r3
    9724:	84fb      	strh	r3, [r7, #38]	; 0x26
    9726:	e009      	b.n	973c <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    9728:	687b      	ldr	r3, [r7, #4]
    972a:	8a1b      	ldrh	r3, [r3, #16]
    972c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    972e:	429a      	cmp	r2, r3
    9730:	d204      	bcs.n	973c <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    9732:	687a      	ldr	r2, [r7, #4]
    9734:	7cd3      	ldrb	r3, [r2, #19]
    9736:	f043 0320 	orr.w	r3, r3, #32
    973a:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    973c:	687b      	ldr	r3, [r7, #4]
    973e:	681a      	ldr	r2, [r3, #0]
    9740:	687b      	ldr	r3, [r7, #4]
    9742:	689b      	ldr	r3, [r3, #8]
    9744:	4413      	add	r3, r2
    9746:	461a      	mov	r2, r3
    9748:	7ffb      	ldrb	r3, [r7, #31]
    974a:	2100      	movs	r1, #0
    974c:	4618      	mov	r0, r3
    974e:	4b20      	ldr	r3, [pc, #128]	; (97d0 <_usb_d_dev_out_next+0x280>)
    9750:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    9752:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9754:	7ff8      	ldrb	r0, [r7, #31]
    9756:	2300      	movs	r3, #0
    9758:	2100      	movs	r1, #0
    975a:	4c1e      	ldr	r4, [pc, #120]	; (97d4 <_usb_d_dev_out_next+0x284>)
    975c:	47a0      	blx	r4
			goto _out_rx_exec;
    975e:	e01f      	b.n	97a0 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    9760:	7bfb      	ldrb	r3, [r7, #15]
    9762:	2b00      	cmp	r3, #0
    9764:	d006      	beq.n	9774 <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    9766:	7ffb      	ldrb	r3, [r7, #31]
    9768:	222d      	movs	r2, #45	; 0x2d
    976a:	4619      	mov	r1, r3
    976c:	6a38      	ldr	r0, [r7, #32]
    976e:	4b1a      	ldr	r3, [pc, #104]	; (97d8 <_usb_d_dev_out_next+0x288>)
    9770:	4798      	blx	r3
    9772:	e005      	b.n	9780 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    9774:	7ffb      	ldrb	r3, [r7, #31]
    9776:	2225      	movs	r2, #37	; 0x25
    9778:	4619      	mov	r1, r3
    977a:	6a38      	ldr	r0, [r7, #32]
    977c:	4b16      	ldr	r3, [pc, #88]	; (97d8 <_usb_d_dev_out_next+0x288>)
    977e:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    9780:	7ffb      	ldrb	r3, [r7, #31]
    9782:	2b00      	cmp	r3, #0
    9784:	d107      	bne.n	9796 <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9786:	687b      	ldr	r3, [r7, #4]
    9788:	68db      	ldr	r3, [r3, #12]
    978a:	461a      	mov	r2, r3
    978c:	7ffb      	ldrb	r3, [r7, #31]
    978e:	2100      	movs	r1, #0
    9790:	4618      	mov	r0, r3
    9792:	4b0f      	ldr	r3, [pc, #60]	; (97d0 <_usb_d_dev_out_next+0x280>)
    9794:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    9796:	2100      	movs	r1, #0
    9798:	6878      	ldr	r0, [r7, #4]
    979a:	4b10      	ldr	r3, [pc, #64]	; (97dc <_usb_d_dev_out_next+0x28c>)
    979c:	4798      	blx	r3
	return;
    979e:	e031      	b.n	9804 <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    97a0:	78fb      	ldrb	r3, [r7, #3]
    97a2:	f083 0301 	eor.w	r3, r3, #1
    97a6:	b2db      	uxtb	r3, r3
    97a8:	2b00      	cmp	r3, #0
    97aa:	d025      	beq.n	97f8 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    97ac:	7bfb      	ldrb	r3, [r7, #15]
    97ae:	2b00      	cmp	r3, #0
    97b0:	d018      	beq.n	97e4 <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    97b2:	7ffb      	ldrb	r3, [r7, #31]
    97b4:	2101      	movs	r1, #1
    97b6:	4618      	mov	r0, r3
    97b8:	4b09      	ldr	r3, [pc, #36]	; (97e0 <_usb_d_dev_out_next+0x290>)
    97ba:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    97bc:	232d      	movs	r3, #45	; 0x2d
    97be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    97c2:	e012      	b.n	97ea <_usb_d_dev_out_next+0x29a>
    97c4:	20000a98 	.word	0x20000a98
    97c8:	00008d31 	.word	0x00008d31
    97cc:	0000dccd 	.word	0x0000dccd
    97d0:	00008d5d 	.word	0x00008d5d
    97d4:	00008ee5 	.word	0x00008ee5
    97d8:	0000863d 	.word	0x0000863d
    97dc:	0000a661 	.word	0x0000a661
    97e0:	00008f25 	.word	0x00008f25
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    97e4:	2325      	movs	r3, #37	; 0x25
    97e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    97ea:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    97ee:	7ffb      	ldrb	r3, [r7, #31]
    97f0:	4619      	mov	r1, r3
    97f2:	6a38      	ldr	r0, [r7, #32]
    97f4:	4b05      	ldr	r3, [pc, #20]	; (980c <_usb_d_dev_out_next+0x2bc>)
    97f6:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    97f8:	7ffb      	ldrb	r3, [r7, #31]
    97fa:	2201      	movs	r2, #1
    97fc:	2100      	movs	r1, #0
    97fe:	4618      	mov	r0, r3
    9800:	4b03      	ldr	r3, [pc, #12]	; (9810 <_usb_d_dev_out_next+0x2c0>)
    9802:	4798      	blx	r3
}
    9804:	372c      	adds	r7, #44	; 0x2c
    9806:	46bd      	mov	sp, r7
    9808:	bd90      	pop	{r4, r7, pc}
    980a:	bf00      	nop
    980c:	00008611 	.word	0x00008611
    9810:	00008fb5 	.word	0x00008fb5

00009814 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    9814:	b580      	push	{r7, lr}
    9816:	b084      	sub	sp, #16
    9818:	af00      	add	r7, sp, #0
    981a:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    981c:	687b      	ldr	r3, [r7, #4]
    981e:	7c9b      	ldrb	r3, [r3, #18]
    9820:	f003 030f 	and.w	r3, r3, #15
    9824:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    9826:	687b      	ldr	r3, [r7, #4]
    9828:	7cdb      	ldrb	r3, [r3, #19]
    982a:	f003 0307 	and.w	r3, r3, #7
    982e:	b2db      	uxtb	r3, r3
    9830:	2b01      	cmp	r3, #1
    9832:	bf0c      	ite	eq
    9834:	2301      	moveq	r3, #1
    9836:	2300      	movne	r3, #0
    9838:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    983a:	7bbb      	ldrb	r3, [r7, #14]
    983c:	f083 0301 	eor.w	r3, r3, #1
    9840:	b2db      	uxtb	r3, r3
    9842:	2b00      	cmp	r3, #0
    9844:	d008      	beq.n	9858 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    9846:	7bfb      	ldrb	r3, [r7, #15]
    9848:	4618      	mov	r0, r3
    984a:	4b20      	ldr	r3, [pc, #128]	; (98cc <_usb_d_dev_handle_setup+0xb8>)
    984c:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    984e:	7bfb      	ldrb	r3, [r7, #15]
    9850:	4618      	mov	r0, r3
    9852:	4b1f      	ldr	r3, [pc, #124]	; (98d0 <_usb_d_dev_handle_setup+0xbc>)
    9854:	4798      	blx	r3
		return;
    9856:	e036      	b.n	98c6 <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    9858:	687b      	ldr	r3, [r7, #4]
    985a:	7cdb      	ldrb	r3, [r3, #19]
    985c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9860:	b2db      	uxtb	r3, r3
    9862:	2b00      	cmp	r3, #0
    9864:	d010      	beq.n	9888 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    9866:	687a      	ldr	r2, [r7, #4]
    9868:	7cd3      	ldrb	r3, [r2, #19]
    986a:	f36f 1386 	bfc	r3, #6, #1
    986e:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    9870:	7bfb      	ldrb	r3, [r7, #15]
    9872:	2200      	movs	r2, #0
    9874:	2101      	movs	r1, #1
    9876:	4618      	mov	r0, r3
    9878:	4b16      	ldr	r3, [pc, #88]	; (98d4 <_usb_d_dev_handle_setup+0xc0>)
    987a:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    987c:	7bfb      	ldrb	r3, [r7, #15]
    987e:	2200      	movs	r2, #0
    9880:	2100      	movs	r1, #0
    9882:	4618      	mov	r0, r3
    9884:	4b14      	ldr	r3, [pc, #80]	; (98d8 <_usb_d_dev_handle_setup+0xc4>)
    9886:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    9888:	687a      	ldr	r2, [r7, #4]
    988a:	7cd3      	ldrb	r3, [r2, #19]
    988c:	f36f 03c3 	bfc	r3, #3, #1
    9890:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    9892:	7bfb      	ldrb	r3, [r7, #15]
    9894:	2100      	movs	r1, #0
    9896:	4618      	mov	r0, r3
    9898:	4b10      	ldr	r3, [pc, #64]	; (98dc <_usb_d_dev_handle_setup+0xc8>)
    989a:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    989c:	7bfb      	ldrb	r3, [r7, #15]
    989e:	2101      	movs	r1, #1
    98a0:	4618      	mov	r0, r3
    98a2:	4b0e      	ldr	r3, [pc, #56]	; (98dc <_usb_d_dev_handle_setup+0xc8>)
    98a4:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    98a6:	7bfb      	ldrb	r3, [r7, #15]
    98a8:	216f      	movs	r1, #111	; 0x6f
    98aa:	4618      	mov	r0, r3
    98ac:	4b0c      	ldr	r3, [pc, #48]	; (98e0 <_usb_d_dev_handle_setup+0xcc>)
    98ae:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    98b0:	7bfb      	ldrb	r3, [r7, #15]
    98b2:	216f      	movs	r1, #111	; 0x6f
    98b4:	4618      	mov	r0, r3
    98b6:	4b0b      	ldr	r3, [pc, #44]	; (98e4 <_usb_d_dev_handle_setup+0xd0>)
    98b8:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    98ba:	4b0b      	ldr	r3, [pc, #44]	; (98e8 <_usb_d_dev_handle_setup+0xd4>)
    98bc:	689b      	ldr	r3, [r3, #8]
    98be:	687a      	ldr	r2, [r7, #4]
    98c0:	7c92      	ldrb	r2, [r2, #18]
    98c2:	4610      	mov	r0, r2
    98c4:	4798      	blx	r3
}
    98c6:	3710      	adds	r7, #16
    98c8:	46bd      	mov	sp, r7
    98ca:	bd80      	pop	{r7, pc}
    98cc:	00008cb9 	.word	0x00008cb9
    98d0:	00008c65 	.word	0x00008c65
    98d4:	00008f5d 	.word	0x00008f5d
    98d8:	00008fb5 	.word	0x00008fb5
    98dc:	00008f25 	.word	0x00008f25
    98e0:	00008a65 	.word	0x00008a65
    98e4:	00008ab5 	.word	0x00008ab5
    98e8:	200009d0 	.word	0x200009d0

000098ec <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    98ec:	b580      	push	{r7, lr}
    98ee:	b084      	sub	sp, #16
    98f0:	af00      	add	r7, sp, #0
    98f2:	6078      	str	r0, [r7, #4]
    98f4:	460b      	mov	r3, r1
    98f6:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    98f8:	687b      	ldr	r3, [r7, #4]
    98fa:	7c9b      	ldrb	r3, [r3, #18]
    98fc:	f003 030f 	and.w	r3, r3, #15
    9900:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    9902:	78f9      	ldrb	r1, [r7, #3]
    9904:	7bfb      	ldrb	r3, [r7, #15]
    9906:	2200      	movs	r2, #0
    9908:	4618      	mov	r0, r3
    990a:	4b07      	ldr	r3, [pc, #28]	; (9928 <_usb_d_dev_handle_stall+0x3c>)
    990c:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    990e:	4b07      	ldr	r3, [pc, #28]	; (992c <_usb_d_dev_handle_stall+0x40>)
    9910:	691b      	ldr	r3, [r3, #16]
    9912:	687a      	ldr	r2, [r7, #4]
    9914:	7c90      	ldrb	r0, [r2, #18]
    9916:	687a      	ldr	r2, [r7, #4]
    9918:	6892      	ldr	r2, [r2, #8]
    991a:	2101      	movs	r1, #1
    991c:	4798      	blx	r3
}
    991e:	bf00      	nop
    9920:	3710      	adds	r7, #16
    9922:	46bd      	mov	sp, r7
    9924:	bd80      	pop	{r7, pc}
    9926:	bf00      	nop
    9928:	00008c19 	.word	0x00008c19
    992c:	200009d0 	.word	0x200009d0

00009930 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    9930:	b580      	push	{r7, lr}
    9932:	b088      	sub	sp, #32
    9934:	af00      	add	r7, sp, #0
    9936:	6078      	str	r0, [r7, #4]
    9938:	460b      	mov	r3, r1
    993a:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    993c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9940:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    9942:	687b      	ldr	r3, [r7, #4]
    9944:	7c9b      	ldrb	r3, [r3, #18]
    9946:	f003 030f 	and.w	r3, r3, #15
    994a:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    994c:	4b61      	ldr	r3, [pc, #388]	; (9ad4 <_usb_d_dev_handle_trfail+0x1a4>)
    994e:	881b      	ldrh	r3, [r3, #0]
    9950:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    9952:	7efb      	ldrb	r3, [r7, #27]
    9954:	015b      	lsls	r3, r3, #5
    9956:	4a60      	ldr	r2, [pc, #384]	; (9ad8 <_usb_d_dev_handle_trfail+0x1a8>)
    9958:	4413      	add	r3, r2
    995a:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    995c:	78fb      	ldrb	r3, [r7, #3]
    995e:	2b00      	cmp	r3, #0
    9960:	d006      	beq.n	9970 <_usb_d_dev_handle_trfail+0x40>
    9962:	7efb      	ldrb	r3, [r7, #27]
    9964:	4619      	mov	r1, r3
    9966:	69f8      	ldr	r0, [r7, #28]
    9968:	4b5c      	ldr	r3, [pc, #368]	; (9adc <_usb_d_dev_handle_trfail+0x1ac>)
    996a:	4798      	blx	r3
    996c:	4603      	mov	r3, r0
    996e:	e005      	b.n	997c <_usb_d_dev_handle_trfail+0x4c>
    9970:	7efb      	ldrb	r3, [r7, #27]
    9972:	4619      	mov	r1, r3
    9974:	69f8      	ldr	r0, [r7, #28]
    9976:	4b5a      	ldr	r3, [pc, #360]	; (9ae0 <_usb_d_dev_handle_trfail+0x1b0>)
    9978:	4798      	blx	r3
    997a:	4603      	mov	r3, r0
    997c:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    997e:	687b      	ldr	r3, [r7, #4]
    9980:	7cdb      	ldrb	r3, [r3, #19]
    9982:	f003 0307 	and.w	r3, r3, #7
    9986:	b2db      	uxtb	r3, r3
    9988:	2b01      	cmp	r3, #1
    998a:	bf0c      	ite	eq
    998c:	2301      	moveq	r3, #1
    998e:	2300      	movne	r3, #0
    9990:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    9992:	78fb      	ldrb	r3, [r7, #3]
    9994:	011b      	lsls	r3, r3, #4
    9996:	697a      	ldr	r2, [r7, #20]
    9998:	4413      	add	r3, r2
    999a:	7a9b      	ldrb	r3, [r3, #10]
    999c:	b2db      	uxtb	r3, r3
    999e:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    99a0:	7cfb      	ldrb	r3, [r7, #19]
    99a2:	2b02      	cmp	r3, #2
    99a4:	d12f      	bne.n	9a06 <_usb_d_dev_handle_trfail+0xd6>
    99a6:	7b3b      	ldrb	r3, [r7, #12]
    99a8:	f003 0301 	and.w	r3, r3, #1
    99ac:	b2db      	uxtb	r3, r3
    99ae:	2b00      	cmp	r3, #0
    99b0:	d029      	beq.n	9a06 <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    99b2:	78fb      	ldrb	r3, [r7, #3]
    99b4:	011b      	lsls	r3, r3, #4
    99b6:	697a      	ldr	r2, [r7, #20]
    99b8:	441a      	add	r2, r3
    99ba:	7a93      	ldrb	r3, [r2, #10]
    99bc:	f36f 0300 	bfc	r3, #0, #1
    99c0:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    99c2:	78fb      	ldrb	r3, [r7, #3]
    99c4:	f107 0220 	add.w	r2, r7, #32
    99c8:	4413      	add	r3, r2
    99ca:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    99ce:	7efb      	ldrb	r3, [r7, #27]
    99d0:	4619      	mov	r1, r3
    99d2:	69f8      	ldr	r0, [r7, #28]
    99d4:	4b43      	ldr	r3, [pc, #268]	; (9ae4 <_usb_d_dev_handle_trfail+0x1b4>)
    99d6:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    99d8:	78fb      	ldrb	r3, [r7, #3]
    99da:	f107 0220 	add.w	r2, r7, #32
    99de:	4413      	add	r3, r2
    99e0:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    99e4:	7efb      	ldrb	r3, [r7, #27]
    99e6:	4619      	mov	r1, r3
    99e8:	69f8      	ldr	r0, [r7, #28]
    99ea:	4b3f      	ldr	r3, [pc, #252]	; (9ae8 <_usb_d_dev_handle_trfail+0x1b8>)
    99ec:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    99ee:	78fb      	ldrb	r3, [r7, #3]
    99f0:	2b00      	cmp	r3, #0
    99f2:	bf14      	ite	ne
    99f4:	2301      	movne	r3, #1
    99f6:	2300      	moveq	r3, #0
    99f8:	b2db      	uxtb	r3, r3
    99fa:	2204      	movs	r2, #4
    99fc:	4619      	mov	r1, r3
    99fe:	6878      	ldr	r0, [r7, #4]
    9a00:	4b3a      	ldr	r3, [pc, #232]	; (9aec <_usb_d_dev_handle_trfail+0x1bc>)
    9a02:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    9a04:	e062      	b.n	9acc <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    9a06:	7b3b      	ldrb	r3, [r7, #12]
    9a08:	f003 0302 	and.w	r3, r3, #2
    9a0c:	b2db      	uxtb	r3, r3
    9a0e:	2b00      	cmp	r3, #0
    9a10:	d040      	beq.n	9a94 <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    9a12:	78fb      	ldrb	r3, [r7, #3]
    9a14:	011b      	lsls	r3, r3, #4
    9a16:	697a      	ldr	r2, [r7, #20]
    9a18:	441a      	add	r2, r3
    9a1a:	7a93      	ldrb	r3, [r2, #10]
    9a1c:	f36f 0341 	bfc	r3, #1, #1
    9a20:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    9a22:	78fb      	ldrb	r3, [r7, #3]
    9a24:	f107 0220 	add.w	r2, r7, #32
    9a28:	4413      	add	r3, r2
    9a2a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9a2e:	7efb      	ldrb	r3, [r7, #27]
    9a30:	4619      	mov	r1, r3
    9a32:	69f8      	ldr	r0, [r7, #28]
    9a34:	4b2b      	ldr	r3, [pc, #172]	; (9ae4 <_usb_d_dev_handle_trfail+0x1b4>)
    9a36:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    9a38:	78fb      	ldrb	r3, [r7, #3]
    9a3a:	f107 0220 	add.w	r2, r7, #32
    9a3e:	4413      	add	r3, r2
    9a40:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9a44:	7efb      	ldrb	r3, [r7, #27]
    9a46:	4619      	mov	r1, r3
    9a48:	69f8      	ldr	r0, [r7, #28]
    9a4a:	4b27      	ldr	r3, [pc, #156]	; (9ae8 <_usb_d_dev_handle_trfail+0x1b8>)
    9a4c:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    9a4e:	7cbb      	ldrb	r3, [r7, #18]
    9a50:	2b00      	cmp	r3, #0
    9a52:	d03b      	beq.n	9acc <_usb_d_dev_handle_trfail+0x19c>
    9a54:	687b      	ldr	r3, [r7, #4]
    9a56:	7cdb      	ldrb	r3, [r3, #19]
    9a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9a5c:	b2db      	uxtb	r3, r3
    9a5e:	2b00      	cmp	r3, #0
    9a60:	d034      	beq.n	9acc <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    9a62:	687b      	ldr	r3, [r7, #4]
    9a64:	7cdb      	ldrb	r3, [r3, #19]
    9a66:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    9a6a:	b2db      	uxtb	r3, r3
    9a6c:	461a      	mov	r2, r3
    9a6e:	78fb      	ldrb	r3, [r7, #3]
    9a70:	4293      	cmp	r3, r2
    9a72:	d02b      	beq.n	9acc <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    9a74:	687b      	ldr	r3, [r7, #4]
    9a76:	7cdb      	ldrb	r3, [r3, #19]
    9a78:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    9a7c:	b2db      	uxtb	r3, r3
    9a7e:	2b00      	cmp	r3, #0
    9a80:	bf14      	ite	ne
    9a82:	2301      	movne	r3, #1
    9a84:	2300      	moveq	r3, #0
    9a86:	b2db      	uxtb	r3, r3
    9a88:	2200      	movs	r2, #0
    9a8a:	4619      	mov	r1, r3
    9a8c:	6878      	ldr	r0, [r7, #4]
    9a8e:	4b17      	ldr	r3, [pc, #92]	; (9aec <_usb_d_dev_handle_trfail+0x1bc>)
    9a90:	4798      	blx	r3
}
    9a92:	e01b      	b.n	9acc <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    9a94:	78fa      	ldrb	r2, [r7, #3]
    9a96:	7efb      	ldrb	r3, [r7, #27]
    9a98:	4611      	mov	r1, r2
    9a9a:	4618      	mov	r0, r3
    9a9c:	4b14      	ldr	r3, [pc, #80]	; (9af0 <_usb_d_dev_handle_trfail+0x1c0>)
    9a9e:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    9aa0:	78fb      	ldrb	r3, [r7, #3]
    9aa2:	f107 0220 	add.w	r2, r7, #32
    9aa6:	4413      	add	r3, r2
    9aa8:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9aac:	7efb      	ldrb	r3, [r7, #27]
    9aae:	4619      	mov	r1, r3
    9ab0:	69f8      	ldr	r0, [r7, #28]
    9ab2:	4b0c      	ldr	r3, [pc, #48]	; (9ae4 <_usb_d_dev_handle_trfail+0x1b4>)
    9ab4:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    9ab6:	78fb      	ldrb	r3, [r7, #3]
    9ab8:	f107 0220 	add.w	r2, r7, #32
    9abc:	4413      	add	r3, r2
    9abe:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9ac2:	7efb      	ldrb	r3, [r7, #27]
    9ac4:	4619      	mov	r1, r3
    9ac6:	69f8      	ldr	r0, [r7, #28]
    9ac8:	4b07      	ldr	r3, [pc, #28]	; (9ae8 <_usb_d_dev_handle_trfail+0x1b8>)
    9aca:	4798      	blx	r3
}
    9acc:	bf00      	nop
    9ace:	3720      	adds	r7, #32
    9ad0:	46bd      	mov	sp, r7
    9ad2:	bd80      	pop	{r7, pc}
    9ad4:	0000e64c 	.word	0x0000e64c
    9ad8:	20000a98 	.word	0x20000a98
    9adc:	00008699 	.word	0x00008699
    9ae0:	00008669 	.word	0x00008669
    9ae4:	0000853d 	.word	0x0000853d
    9ae8:	0000863d 	.word	0x0000863d
    9aec:	0000a6a9 	.word	0x0000a6a9
    9af0:	00008f25 	.word	0x00008f25

00009af4 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9af4:	b580      	push	{r7, lr}
    9af6:	b082      	sub	sp, #8
    9af8:	af00      	add	r7, sp, #0
    9afa:	6078      	str	r0, [r7, #4]
    9afc:	460b      	mov	r3, r1
    9afe:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9b00:	78fb      	ldrb	r3, [r7, #3]
    9b02:	f003 0310 	and.w	r3, r3, #16
    9b06:	2b00      	cmp	r3, #0
    9b08:	d003      	beq.n	9b12 <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    9b0a:	6878      	ldr	r0, [r7, #4]
    9b0c:	4b0c      	ldr	r3, [pc, #48]	; (9b40 <_usb_d_dev_trans_setup_isr+0x4c>)
    9b0e:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    9b10:	e012      	b.n	9b38 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    9b12:	78fb      	ldrb	r3, [r7, #3]
    9b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9b18:	2b00      	cmp	r3, #0
    9b1a:	d004      	beq.n	9b26 <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    9b1c:	2101      	movs	r1, #1
    9b1e:	6878      	ldr	r0, [r7, #4]
    9b20:	4b08      	ldr	r3, [pc, #32]	; (9b44 <_usb_d_dev_trans_setup_isr+0x50>)
    9b22:	4798      	blx	r3
}
    9b24:	e008      	b.n	9b38 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    9b26:	78fb      	ldrb	r3, [r7, #3]
    9b28:	f003 0320 	and.w	r3, r3, #32
    9b2c:	2b00      	cmp	r3, #0
    9b2e:	d003      	beq.n	9b38 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    9b30:	2100      	movs	r1, #0
    9b32:	6878      	ldr	r0, [r7, #4]
    9b34:	4b03      	ldr	r3, [pc, #12]	; (9b44 <_usb_d_dev_trans_setup_isr+0x50>)
    9b36:	4798      	blx	r3
}
    9b38:	bf00      	nop
    9b3a:	3708      	adds	r7, #8
    9b3c:	46bd      	mov	sp, r7
    9b3e:	bd80      	pop	{r7, pc}
    9b40:	00009815 	.word	0x00009815
    9b44:	000098ed 	.word	0x000098ed

00009b48 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9b48:	b580      	push	{r7, lr}
    9b4a:	b082      	sub	sp, #8
    9b4c:	af00      	add	r7, sp, #0
    9b4e:	6078      	str	r0, [r7, #4]
    9b50:	460b      	mov	r3, r1
    9b52:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    9b54:	78fb      	ldrb	r3, [r7, #3]
    9b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9b5a:	2b00      	cmp	r3, #0
    9b5c:	d004      	beq.n	9b68 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    9b5e:	2101      	movs	r1, #1
    9b60:	6878      	ldr	r0, [r7, #4]
    9b62:	4b1a      	ldr	r3, [pc, #104]	; (9bcc <_usb_d_dev_trans_in_isr+0x84>)
    9b64:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    9b66:	e02c      	b.n	9bc2 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    9b68:	78fb      	ldrb	r3, [r7, #3]
    9b6a:	f003 0308 	and.w	r3, r3, #8
    9b6e:	2b00      	cmp	r3, #0
    9b70:	d004      	beq.n	9b7c <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    9b72:	2101      	movs	r1, #1
    9b74:	6878      	ldr	r0, [r7, #4]
    9b76:	4b16      	ldr	r3, [pc, #88]	; (9bd0 <_usb_d_dev_trans_in_isr+0x88>)
    9b78:	4798      	blx	r3
}
    9b7a:	e022      	b.n	9bc2 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    9b7c:	78fb      	ldrb	r3, [r7, #3]
    9b7e:	f003 0302 	and.w	r3, r3, #2
    9b82:	2b00      	cmp	r3, #0
    9b84:	d004      	beq.n	9b90 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    9b86:	2101      	movs	r1, #1
    9b88:	6878      	ldr	r0, [r7, #4]
    9b8a:	4b12      	ldr	r3, [pc, #72]	; (9bd4 <_usb_d_dev_trans_in_isr+0x8c>)
    9b8c:	4798      	blx	r3
}
    9b8e:	e018      	b.n	9bc2 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    9b90:	687b      	ldr	r3, [r7, #4]
    9b92:	7cdb      	ldrb	r3, [r3, #19]
    9b94:	f003 0307 	and.w	r3, r3, #7
    9b98:	b2db      	uxtb	r3, r3
    9b9a:	2b01      	cmp	r3, #1
    9b9c:	d111      	bne.n	9bc2 <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    9b9e:	78fb      	ldrb	r3, [r7, #3]
    9ba0:	f003 0304 	and.w	r3, r3, #4
    9ba4:	2b00      	cmp	r3, #0
    9ba6:	d004      	beq.n	9bb2 <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    9ba8:	2100      	movs	r1, #0
    9baa:	6878      	ldr	r0, [r7, #4]
    9bac:	4b08      	ldr	r3, [pc, #32]	; (9bd0 <_usb_d_dev_trans_in_isr+0x88>)
    9bae:	4798      	blx	r3
}
    9bb0:	e007      	b.n	9bc2 <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9bb2:	78fb      	ldrb	r3, [r7, #3]
    9bb4:	f003 0310 	and.w	r3, r3, #16
    9bb8:	2b00      	cmp	r3, #0
    9bba:	d002      	beq.n	9bc2 <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    9bbc:	6878      	ldr	r0, [r7, #4]
    9bbe:	4b06      	ldr	r3, [pc, #24]	; (9bd8 <_usb_d_dev_trans_in_isr+0x90>)
    9bc0:	4798      	blx	r3
}
    9bc2:	bf00      	nop
    9bc4:	3708      	adds	r7, #8
    9bc6:	46bd      	mov	sp, r7
    9bc8:	bd80      	pop	{r7, pc}
    9bca:	bf00      	nop
    9bcc:	000098ed 	.word	0x000098ed
    9bd0:	00009931 	.word	0x00009931
    9bd4:	00009339 	.word	0x00009339
    9bd8:	00009815 	.word	0x00009815

00009bdc <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9bdc:	b580      	push	{r7, lr}
    9bde:	b082      	sub	sp, #8
    9be0:	af00      	add	r7, sp, #0
    9be2:	6078      	str	r0, [r7, #4]
    9be4:	460b      	mov	r3, r1
    9be6:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    9be8:	78fb      	ldrb	r3, [r7, #3]
    9bea:	f003 0320 	and.w	r3, r3, #32
    9bee:	2b00      	cmp	r3, #0
    9bf0:	d004      	beq.n	9bfc <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    9bf2:	2100      	movs	r1, #0
    9bf4:	6878      	ldr	r0, [r7, #4]
    9bf6:	4b1a      	ldr	r3, [pc, #104]	; (9c60 <_usb_d_dev_trans_out_isr+0x84>)
    9bf8:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    9bfa:	e02c      	b.n	9c56 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    9bfc:	78fb      	ldrb	r3, [r7, #3]
    9bfe:	f003 0304 	and.w	r3, r3, #4
    9c02:	2b00      	cmp	r3, #0
    9c04:	d004      	beq.n	9c10 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    9c06:	2100      	movs	r1, #0
    9c08:	6878      	ldr	r0, [r7, #4]
    9c0a:	4b16      	ldr	r3, [pc, #88]	; (9c64 <_usb_d_dev_trans_out_isr+0x88>)
    9c0c:	4798      	blx	r3
}
    9c0e:	e022      	b.n	9c56 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    9c10:	78fb      	ldrb	r3, [r7, #3]
    9c12:	f003 0301 	and.w	r3, r3, #1
    9c16:	2b00      	cmp	r3, #0
    9c18:	d004      	beq.n	9c24 <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    9c1a:	2101      	movs	r1, #1
    9c1c:	6878      	ldr	r0, [r7, #4]
    9c1e:	4b12      	ldr	r3, [pc, #72]	; (9c68 <_usb_d_dev_trans_out_isr+0x8c>)
    9c20:	4798      	blx	r3
}
    9c22:	e018      	b.n	9c56 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    9c24:	687b      	ldr	r3, [r7, #4]
    9c26:	7cdb      	ldrb	r3, [r3, #19]
    9c28:	f003 0307 	and.w	r3, r3, #7
    9c2c:	b2db      	uxtb	r3, r3
    9c2e:	2b01      	cmp	r3, #1
    9c30:	d111      	bne.n	9c56 <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    9c32:	78fb      	ldrb	r3, [r7, #3]
    9c34:	f003 0308 	and.w	r3, r3, #8
    9c38:	2b00      	cmp	r3, #0
    9c3a:	d004      	beq.n	9c46 <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    9c3c:	2101      	movs	r1, #1
    9c3e:	6878      	ldr	r0, [r7, #4]
    9c40:	4b08      	ldr	r3, [pc, #32]	; (9c64 <_usb_d_dev_trans_out_isr+0x88>)
    9c42:	4798      	blx	r3
}
    9c44:	e007      	b.n	9c56 <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9c46:	78fb      	ldrb	r3, [r7, #3]
    9c48:	f003 0310 	and.w	r3, r3, #16
    9c4c:	2b00      	cmp	r3, #0
    9c4e:	d002      	beq.n	9c56 <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    9c50:	6878      	ldr	r0, [r7, #4]
    9c52:	4b06      	ldr	r3, [pc, #24]	; (9c6c <_usb_d_dev_trans_out_isr+0x90>)
    9c54:	4798      	blx	r3
}
    9c56:	bf00      	nop
    9c58:	3708      	adds	r7, #8
    9c5a:	46bd      	mov	sp, r7
    9c5c:	bd80      	pop	{r7, pc}
    9c5e:	bf00      	nop
    9c60:	000098ed 	.word	0x000098ed
    9c64:	00009931 	.word	0x00009931
    9c68:	00009551 	.word	0x00009551
    9c6c:	00009815 	.word	0x00009815

00009c70 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    9c70:	b580      	push	{r7, lr}
    9c72:	b084      	sub	sp, #16
    9c74:	af00      	add	r7, sp, #0
    9c76:	6078      	str	r0, [r7, #4]
    9c78:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    9c7a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9c7e:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9c80:	683b      	ldr	r3, [r7, #0]
    9c82:	7c9b      	ldrb	r3, [r3, #18]
    9c84:	f003 030f 	and.w	r3, r3, #15
    9c88:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    9c8a:	7afb      	ldrb	r3, [r7, #11]
    9c8c:	2201      	movs	r2, #1
    9c8e:	409a      	lsls	r2, r3
    9c90:	687b      	ldr	r3, [r7, #4]
    9c92:	4013      	ands	r3, r2
    9c94:	2b00      	cmp	r3, #0
    9c96:	d03d      	beq.n	9d14 <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    9c98:	7afb      	ldrb	r3, [r7, #11]
    9c9a:	68fa      	ldr	r2, [r7, #12]
    9c9c:	3308      	adds	r3, #8
    9c9e:	015b      	lsls	r3, r3, #5
    9ca0:	4413      	add	r3, r2
    9ca2:	3307      	adds	r3, #7
    9ca4:	781b      	ldrb	r3, [r3, #0]
    9ca6:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    9ca8:	7afb      	ldrb	r3, [r7, #11]
    9caa:	68fa      	ldr	r2, [r7, #12]
    9cac:	015b      	lsls	r3, r3, #5
    9cae:	4413      	add	r3, r2
    9cb0:	f203 1309 	addw	r3, r3, #265	; 0x109
    9cb4:	781b      	ldrb	r3, [r3, #0]
    9cb6:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    9cb8:	7aba      	ldrb	r2, [r7, #10]
    9cba:	7a7b      	ldrb	r3, [r7, #9]
    9cbc:	4013      	ands	r3, r2
    9cbe:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    9cc0:	7abb      	ldrb	r3, [r7, #10]
    9cc2:	2b00      	cmp	r3, #0
    9cc4:	d027      	beq.n	9d16 <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    9cc6:	683b      	ldr	r3, [r7, #0]
    9cc8:	7cdb      	ldrb	r3, [r3, #19]
    9cca:	f003 0307 	and.w	r3, r3, #7
    9cce:	b2db      	uxtb	r3, r3
    9cd0:	2b01      	cmp	r3, #1
    9cd2:	d10c      	bne.n	9cee <_usb_d_dev_handle_eps+0x7e>
    9cd4:	683b      	ldr	r3, [r7, #0]
    9cd6:	7cdb      	ldrb	r3, [r3, #19]
    9cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9cdc:	b2db      	uxtb	r3, r3
    9cde:	2b00      	cmp	r3, #0
    9ce0:	d105      	bne.n	9cee <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    9ce2:	7abb      	ldrb	r3, [r7, #10]
    9ce4:	4619      	mov	r1, r3
    9ce6:	6838      	ldr	r0, [r7, #0]
    9ce8:	4b0c      	ldr	r3, [pc, #48]	; (9d1c <_usb_d_dev_handle_eps+0xac>)
    9cea:	4798      	blx	r3
    9cec:	e013      	b.n	9d16 <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    9cee:	683b      	ldr	r3, [r7, #0]
    9cf0:	7cdb      	ldrb	r3, [r3, #19]
    9cf2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    9cf6:	b2db      	uxtb	r3, r3
    9cf8:	2b00      	cmp	r3, #0
    9cfa:	d005      	beq.n	9d08 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    9cfc:	7abb      	ldrb	r3, [r7, #10]
    9cfe:	4619      	mov	r1, r3
    9d00:	6838      	ldr	r0, [r7, #0]
    9d02:	4b07      	ldr	r3, [pc, #28]	; (9d20 <_usb_d_dev_handle_eps+0xb0>)
    9d04:	4798      	blx	r3
    9d06:	e006      	b.n	9d16 <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    9d08:	7abb      	ldrb	r3, [r7, #10]
    9d0a:	4619      	mov	r1, r3
    9d0c:	6838      	ldr	r0, [r7, #0]
    9d0e:	4b05      	ldr	r3, [pc, #20]	; (9d24 <_usb_d_dev_handle_eps+0xb4>)
    9d10:	4798      	blx	r3
    9d12:	e000      	b.n	9d16 <_usb_d_dev_handle_eps+0xa6>
		return;
    9d14:	bf00      	nop
		}
	}
}
    9d16:	3710      	adds	r7, #16
    9d18:	46bd      	mov	sp, r7
    9d1a:	bd80      	pop	{r7, pc}
    9d1c:	00009af5 	.word	0x00009af5
    9d20:	00009b49 	.word	0x00009b49
    9d24:	00009bdd 	.word	0x00009bdd

00009d28 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    9d28:	b580      	push	{r7, lr}
    9d2a:	b084      	sub	sp, #16
    9d2c:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    9d2e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9d32:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    9d34:	68bb      	ldr	r3, [r7, #8]
    9d36:	8c1b      	ldrh	r3, [r3, #32]
    9d38:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    9d3a:	88fb      	ldrh	r3, [r7, #6]
    9d3c:	2b00      	cmp	r3, #0
    9d3e:	d104      	bne.n	9d4a <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    9d40:	4b13      	ldr	r3, [pc, #76]	; (9d90 <_usb_d_dev_handler+0x68>)
    9d42:	4798      	blx	r3
    9d44:	4603      	mov	r3, r0
    9d46:	2b00      	cmp	r3, #0
    9d48:	d11e      	bne.n	9d88 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    9d4a:	2300      	movs	r3, #0
    9d4c:	73fb      	strb	r3, [r7, #15]
    9d4e:	e017      	b.n	9d80 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    9d50:	7bfa      	ldrb	r2, [r7, #15]
    9d52:	4613      	mov	r3, r2
    9d54:	009b      	lsls	r3, r3, #2
    9d56:	4413      	add	r3, r2
    9d58:	009b      	lsls	r3, r3, #2
    9d5a:	3310      	adds	r3, #16
    9d5c:	4a0d      	ldr	r2, [pc, #52]	; (9d94 <_usb_d_dev_handler+0x6c>)
    9d5e:	4413      	add	r3, r2
    9d60:	3304      	adds	r3, #4
    9d62:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    9d64:	683b      	ldr	r3, [r7, #0]
    9d66:	7c9b      	ldrb	r3, [r3, #18]
    9d68:	2bff      	cmp	r3, #255	; 0xff
    9d6a:	d005      	beq.n	9d78 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    9d6c:	88fb      	ldrh	r3, [r7, #6]
    9d6e:	6839      	ldr	r1, [r7, #0]
    9d70:	4618      	mov	r0, r3
    9d72:	4b09      	ldr	r3, [pc, #36]	; (9d98 <_usb_d_dev_handler+0x70>)
    9d74:	4798      	blx	r3
    9d76:	e000      	b.n	9d7a <_usb_d_dev_handler+0x52>
			continue;
    9d78:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    9d7a:	7bfb      	ldrb	r3, [r7, #15]
    9d7c:	3301      	adds	r3, #1
    9d7e:	73fb      	strb	r3, [r7, #15]
    9d80:	7bfb      	ldrb	r3, [r7, #15]
    9d82:	2b08      	cmp	r3, #8
    9d84:	d9e4      	bls.n	9d50 <_usb_d_dev_handler+0x28>
    9d86:	e000      	b.n	9d8a <_usb_d_dev_handler+0x62>
			return;
    9d88:	bf00      	nop
	}
}
    9d8a:	3710      	adds	r7, #16
    9d8c:	46bd      	mov	sp, r7
    9d8e:	bd80      	pop	{r7, pc}
    9d90:	00009281 	.word	0x00009281
    9d94:	200009d0 	.word	0x200009d0
    9d98:	00009c71 	.word	0x00009c71

00009d9c <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    9d9c:	b580      	push	{r7, lr}
    9d9e:	b082      	sub	sp, #8
    9da0:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    9da2:	2300      	movs	r3, #0
    9da4:	71fb      	strb	r3, [r7, #7]
    9da6:	e023      	b.n	9df0 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    9da8:	79fa      	ldrb	r2, [r7, #7]
    9daa:	4613      	mov	r3, r2
    9dac:	009b      	lsls	r3, r3, #2
    9dae:	4413      	add	r3, r2
    9db0:	009b      	lsls	r3, r3, #2
    9db2:	3310      	adds	r3, #16
    9db4:	4a14      	ldr	r2, [pc, #80]	; (9e08 <_usb_d_dev_reset_epts+0x6c>)
    9db6:	4413      	add	r3, r2
    9db8:	3304      	adds	r3, #4
    9dba:	2103      	movs	r1, #3
    9dbc:	4618      	mov	r0, r3
    9dbe:	4b13      	ldr	r3, [pc, #76]	; (9e0c <_usb_d_dev_reset_epts+0x70>)
    9dc0:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    9dc2:	79fa      	ldrb	r2, [r7, #7]
    9dc4:	4910      	ldr	r1, [pc, #64]	; (9e08 <_usb_d_dev_reset_epts+0x6c>)
    9dc6:	4613      	mov	r3, r2
    9dc8:	009b      	lsls	r3, r3, #2
    9dca:	4413      	add	r3, r2
    9dcc:	009b      	lsls	r3, r3, #2
    9dce:	440b      	add	r3, r1
    9dd0:	3326      	adds	r3, #38	; 0x26
    9dd2:	22ff      	movs	r2, #255	; 0xff
    9dd4:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    9dd6:	79fa      	ldrb	r2, [r7, #7]
    9dd8:	490b      	ldr	r1, [pc, #44]	; (9e08 <_usb_d_dev_reset_epts+0x6c>)
    9dda:	4613      	mov	r3, r2
    9ddc:	009b      	lsls	r3, r3, #2
    9dde:	4413      	add	r3, r2
    9de0:	009b      	lsls	r3, r3, #2
    9de2:	440b      	add	r3, r1
    9de4:	3327      	adds	r3, #39	; 0x27
    9de6:	2200      	movs	r2, #0
    9de8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    9dea:	79fb      	ldrb	r3, [r7, #7]
    9dec:	3301      	adds	r3, #1
    9dee:	71fb      	strb	r3, [r7, #7]
    9df0:	79fb      	ldrb	r3, [r7, #7]
    9df2:	2b08      	cmp	r3, #8
    9df4:	d9d8      	bls.n	9da8 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    9df6:	22a0      	movs	r2, #160	; 0xa0
    9df8:	2100      	movs	r1, #0
    9dfa:	4805      	ldr	r0, [pc, #20]	; (9e10 <_usb_d_dev_reset_epts+0x74>)
    9dfc:	4b05      	ldr	r3, [pc, #20]	; (9e14 <_usb_d_dev_reset_epts+0x78>)
    9dfe:	4798      	blx	r3
}
    9e00:	bf00      	nop
    9e02:	3708      	adds	r7, #8
    9e04:	46bd      	mov	sp, r7
    9e06:	bd80      	pop	{r7, pc}
    9e08:	200009d0 	.word	0x200009d0
    9e0c:	0000a661 	.word	0x0000a661
    9e10:	20000a98 	.word	0x20000a98
    9e14:	0000de01 	.word	0x0000de01

00009e18 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    9e18:	b580      	push	{r7, lr}
    9e1a:	b084      	sub	sp, #16
    9e1c:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    9e1e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9e22:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    9e24:	2301      	movs	r3, #1
    9e26:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    9e28:	2304      	movs	r3, #4
    9e2a:	713b      	strb	r3, [r7, #4]
    9e2c:	2300      	movs	r3, #0
    9e2e:	717b      	strb	r3, [r7, #5]
    9e30:	2300      	movs	r3, #0
    9e32:	71bb      	strb	r3, [r7, #6]
    9e34:	2300      	movs	r3, #0
    9e36:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    9e38:	2101      	movs	r1, #1
    9e3a:	68f8      	ldr	r0, [r7, #12]
    9e3c:	4b26      	ldr	r3, [pc, #152]	; (9ed8 <_usb_d_dev_init+0xc0>)
    9e3e:	4798      	blx	r3
    9e40:	4603      	mov	r3, r0
    9e42:	f083 0301 	eor.w	r3, r3, #1
    9e46:	b2db      	uxtb	r3, r3
    9e48:	2b00      	cmp	r3, #0
    9e4a:	d011      	beq.n	9e70 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    9e4c:	2102      	movs	r1, #2
    9e4e:	68f8      	ldr	r0, [r7, #12]
    9e50:	4b22      	ldr	r3, [pc, #136]	; (9edc <_usb_d_dev_init+0xc4>)
    9e52:	4798      	blx	r3
    9e54:	4603      	mov	r3, r0
    9e56:	2b00      	cmp	r3, #0
    9e58:	d006      	beq.n	9e68 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    9e5a:	68f8      	ldr	r0, [r7, #12]
    9e5c:	4b20      	ldr	r3, [pc, #128]	; (9ee0 <_usb_d_dev_init+0xc8>)
    9e5e:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    9e60:	2102      	movs	r1, #2
    9e62:	68f8      	ldr	r0, [r7, #12]
    9e64:	4b1f      	ldr	r3, [pc, #124]	; (9ee4 <_usb_d_dev_init+0xcc>)
    9e66:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    9e68:	2101      	movs	r1, #1
    9e6a:	68f8      	ldr	r0, [r7, #12]
    9e6c:	4b1e      	ldr	r3, [pc, #120]	; (9ee8 <_usb_d_dev_init+0xd0>)
    9e6e:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    9e70:	2101      	movs	r1, #1
    9e72:	68f8      	ldr	r0, [r7, #12]
    9e74:	4b1b      	ldr	r3, [pc, #108]	; (9ee4 <_usb_d_dev_init+0xcc>)
    9e76:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    9e78:	4b1c      	ldr	r3, [pc, #112]	; (9eec <_usb_d_dev_init+0xd4>)
    9e7a:	4a1d      	ldr	r2, [pc, #116]	; (9ef0 <_usb_d_dev_init+0xd8>)
    9e7c:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    9e7e:	4b1b      	ldr	r3, [pc, #108]	; (9eec <_usb_d_dev_init+0xd4>)
    9e80:	4a1b      	ldr	r2, [pc, #108]	; (9ef0 <_usb_d_dev_init+0xd8>)
    9e82:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    9e84:	4b19      	ldr	r3, [pc, #100]	; (9eec <_usb_d_dev_init+0xd4>)
    9e86:	4a1a      	ldr	r2, [pc, #104]	; (9ef0 <_usb_d_dev_init+0xd8>)
    9e88:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    9e8a:	4b18      	ldr	r3, [pc, #96]	; (9eec <_usb_d_dev_init+0xd4>)
    9e8c:	4a18      	ldr	r2, [pc, #96]	; (9ef0 <_usb_d_dev_init+0xd8>)
    9e8e:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    9e90:	4b16      	ldr	r3, [pc, #88]	; (9eec <_usb_d_dev_init+0xd4>)
    9e92:	4a17      	ldr	r2, [pc, #92]	; (9ef0 <_usb_d_dev_init+0xd8>)
    9e94:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    9e96:	4b17      	ldr	r3, [pc, #92]	; (9ef4 <_usb_d_dev_init+0xdc>)
    9e98:	4798      	blx	r3

	_usb_load_calib();
    9e9a:	4b17      	ldr	r3, [pc, #92]	; (9ef8 <_usb_d_dev_init+0xe0>)
    9e9c:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    9e9e:	2104      	movs	r1, #4
    9ea0:	68f8      	ldr	r0, [r7, #12]
    9ea2:	4b11      	ldr	r3, [pc, #68]	; (9ee8 <_usb_d_dev_init+0xd0>)
    9ea4:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    9ea6:	4b15      	ldr	r3, [pc, #84]	; (9efc <_usb_d_dev_init+0xe4>)
    9ea8:	4619      	mov	r1, r3
    9eaa:	68f8      	ldr	r0, [r7, #12]
    9eac:	4b14      	ldr	r3, [pc, #80]	; (9f00 <_usb_d_dev_init+0xe8>)
    9eae:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    9eb0:	7afb      	ldrb	r3, [r7, #11]
    9eb2:	f107 0210 	add.w	r2, r7, #16
    9eb6:	4413      	add	r3, r2
    9eb8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    9ebc:	f043 0301 	orr.w	r3, r3, #1
    9ec0:	b2db      	uxtb	r3, r3
    9ec2:	b29b      	uxth	r3, r3
    9ec4:	4619      	mov	r1, r3
    9ec6:	68f8      	ldr	r0, [r7, #12]
    9ec8:	4b0e      	ldr	r3, [pc, #56]	; (9f04 <_usb_d_dev_init+0xec>)
    9eca:	4798      	blx	r3

	return ERR_NONE;
    9ecc:	2300      	movs	r3, #0
}
    9ece:	4618      	mov	r0, r3
    9ed0:	3710      	adds	r7, #16
    9ed2:	46bd      	mov	sp, r7
    9ed4:	bd80      	pop	{r7, pc}
    9ed6:	bf00      	nop
    9ed8:	000084b1 	.word	0x000084b1
    9edc:	00008801 	.word	0x00008801
    9ee0:	000087d5 	.word	0x000087d5
    9ee4:	00008487 	.word	0x00008487
    9ee8:	00008831 	.word	0x00008831
    9eec:	200009d0 	.word	0x200009d0
    9ef0:	000088f9 	.word	0x000088f9
    9ef4:	00009d9d 	.word	0x00009d9d
    9ef8:	00008911 	.word	0x00008911
    9efc:	20000a98 	.word	0x20000a98
    9f00:	000088dd 	.word	0x000088dd
    9f04:	000088a1 	.word	0x000088a1

00009f08 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    9f08:	b580      	push	{r7, lr}
    9f0a:	b082      	sub	sp, #8
    9f0c:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    9f0e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9f12:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    9f14:	2103      	movs	r1, #3
    9f16:	6878      	ldr	r0, [r7, #4]
    9f18:	4b17      	ldr	r3, [pc, #92]	; (9f78 <_usb_d_dev_enable+0x70>)
    9f1a:	4798      	blx	r3
    9f1c:	4603      	mov	r3, r0
    9f1e:	2b00      	cmp	r3, #0
    9f20:	d002      	beq.n	9f28 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    9f22:	f06f 0310 	mvn.w	r3, #16
    9f26:	e023      	b.n	9f70 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    9f28:	6878      	ldr	r0, [r7, #4]
    9f2a:	4b14      	ldr	r3, [pc, #80]	; (9f7c <_usb_d_dev_enable+0x74>)
    9f2c:	4798      	blx	r3
    9f2e:	4603      	mov	r3, r0
    9f30:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    9f32:	78fb      	ldrb	r3, [r7, #3]
    9f34:	f003 0302 	and.w	r3, r3, #2
    9f38:	2b00      	cmp	r3, #0
    9f3a:	d107      	bne.n	9f4c <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    9f3c:	78fb      	ldrb	r3, [r7, #3]
    9f3e:	f043 0302 	orr.w	r3, r3, #2
    9f42:	b2db      	uxtb	r3, r3
    9f44:	4619      	mov	r1, r3
    9f46:	6878      	ldr	r0, [r7, #4]
    9f48:	4b0d      	ldr	r3, [pc, #52]	; (9f80 <_usb_d_dev_enable+0x78>)
    9f4a:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    9f4c:	2050      	movs	r0, #80	; 0x50
    9f4e:	4b0d      	ldr	r3, [pc, #52]	; (9f84 <_usb_d_dev_enable+0x7c>)
    9f50:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    9f52:	2051      	movs	r0, #81	; 0x51
    9f54:	4b0b      	ldr	r3, [pc, #44]	; (9f84 <_usb_d_dev_enable+0x7c>)
    9f56:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    9f58:	2052      	movs	r0, #82	; 0x52
    9f5a:	4b0a      	ldr	r3, [pc, #40]	; (9f84 <_usb_d_dev_enable+0x7c>)
    9f5c:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    9f5e:	2053      	movs	r0, #83	; 0x53
    9f60:	4b08      	ldr	r3, [pc, #32]	; (9f84 <_usb_d_dev_enable+0x7c>)
    9f62:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    9f64:	f240 218d 	movw	r1, #653	; 0x28d
    9f68:	6878      	ldr	r0, [r7, #4]
    9f6a:	4b07      	ldr	r3, [pc, #28]	; (9f88 <_usb_d_dev_enable+0x80>)
    9f6c:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    9f6e:	2300      	movs	r3, #0
}
    9f70:	4618      	mov	r0, r3
    9f72:	3708      	adds	r7, #8
    9f74:	46bd      	mov	sp, r7
    9f76:	bd80      	pop	{r7, pc}
    9f78:	000087ab 	.word	0x000087ab
    9f7c:	00008859 	.word	0x00008859
    9f80:	00008831 	.word	0x00008831
    9f84:	000083bd 	.word	0x000083bd
    9f88:	00008755 	.word	0x00008755

00009f8c <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    9f8c:	b580      	push	{r7, lr}
    9f8e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    9f90:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9f94:	4b01      	ldr	r3, [pc, #4]	; (9f9c <_usb_d_dev_attach+0x10>)
    9f96:	4798      	blx	r3
}
    9f98:	bf00      	nop
    9f9a:	bd80      	pop	{r7, pc}
    9f9c:	0000887d 	.word	0x0000887d

00009fa0 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    9fa0:	b580      	push	{r7, lr}
    9fa2:	b082      	sub	sp, #8
    9fa4:	af00      	add	r7, sp, #0
    9fa6:	4603      	mov	r3, r0
    9fa8:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    9faa:	79fb      	ldrb	r3, [r7, #7]
    9fac:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9fb0:	b2db      	uxtb	r3, r3
    9fb2:	4619      	mov	r1, r3
    9fb4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9fb8:	4b02      	ldr	r3, [pc, #8]	; (9fc4 <_usb_d_dev_set_address+0x24>)
    9fba:	4798      	blx	r3
}
    9fbc:	bf00      	nop
    9fbe:	3708      	adds	r7, #8
    9fc0:	46bd      	mov	sp, r7
    9fc2:	bd80      	pop	{r7, pc}
    9fc4:	000088bf 	.word	0x000088bf

00009fc8 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    9fc8:	b590      	push	{r4, r7, lr}
    9fca:	b085      	sub	sp, #20
    9fcc:	af00      	add	r7, sp, #0
    9fce:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    9fd0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9fd4:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9fd6:	687b      	ldr	r3, [r7, #4]
    9fd8:	7c9b      	ldrb	r3, [r3, #18]
    9fda:	f003 030f 	and.w	r3, r3, #15
    9fde:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9fe0:	687b      	ldr	r3, [r7, #4]
    9fe2:	68db      	ldr	r3, [r3, #12]
    9fe4:	461a      	mov	r2, r3
    9fe6:	7afb      	ldrb	r3, [r7, #11]
    9fe8:	2100      	movs	r1, #0
    9fea:	4618      	mov	r0, r3
    9fec:	4b0f      	ldr	r3, [pc, #60]	; (a02c <_usb_d_dev_trans_setup+0x64>)
    9fee:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    9ff0:	687b      	ldr	r3, [r7, #4]
    9ff2:	8a1b      	ldrh	r3, [r3, #16]
    9ff4:	461a      	mov	r2, r3
    9ff6:	7af8      	ldrb	r0, [r7, #11]
    9ff8:	2300      	movs	r3, #0
    9ffa:	2100      	movs	r1, #0
    9ffc:	4c0c      	ldr	r4, [pc, #48]	; (a030 <_usb_d_dev_trans_setup+0x68>)
    9ffe:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    a000:	7afb      	ldrb	r3, [r7, #11]
    a002:	22b0      	movs	r2, #176	; 0xb0
    a004:	4619      	mov	r1, r3
    a006:	68f8      	ldr	r0, [r7, #12]
    a008:	4b0a      	ldr	r3, [pc, #40]	; (a034 <_usb_d_dev_trans_setup+0x6c>)
    a00a:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    a00c:	7afb      	ldrb	r3, [r7, #11]
    a00e:	2200      	movs	r2, #0
    a010:	2100      	movs	r1, #0
    a012:	4618      	mov	r0, r3
    a014:	4b08      	ldr	r3, [pc, #32]	; (a038 <_usb_d_dev_trans_setup+0x70>)
    a016:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    a018:	7afb      	ldrb	r3, [r7, #11]
    a01a:	2210      	movs	r2, #16
    a01c:	4619      	mov	r1, r3
    a01e:	68f8      	ldr	r0, [r7, #12]
    a020:	4b06      	ldr	r3, [pc, #24]	; (a03c <_usb_d_dev_trans_setup+0x74>)
    a022:	4798      	blx	r3
}
    a024:	bf00      	nop
    a026:	3714      	adds	r7, #20
    a028:	46bd      	mov	sp, r7
    a02a:	bd90      	pop	{r4, r7, pc}
    a02c:	00008d5d 	.word	0x00008d5d
    a030:	00008ee5 	.word	0x00008ee5
    a034:	000085bd 	.word	0x000085bd
    a038:	00008fb5 	.word	0x00008fb5
    a03c:	00008611 	.word	0x00008611

0000a040 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    a040:	b580      	push	{r7, lr}
    a042:	b088      	sub	sp, #32
    a044:	af00      	add	r7, sp, #0
    a046:	4603      	mov	r3, r0
    a048:	71fb      	strb	r3, [r7, #7]
    a04a:	460b      	mov	r3, r1
    a04c:	71bb      	strb	r3, [r7, #6]
    a04e:	4613      	mov	r3, r2
    a050:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    a052:	79fb      	ldrb	r3, [r7, #7]
    a054:	f003 030f 	and.w	r3, r3, #15
    a058:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    a05a:	79fb      	ldrb	r3, [r7, #7]
    a05c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a060:	2b00      	cmp	r3, #0
    a062:	bf14      	ite	ne
    a064:	2301      	movne	r3, #1
    a066:	2300      	moveq	r3, #0
    a068:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a06a:	7fba      	ldrb	r2, [r7, #30]
    a06c:	7ffb      	ldrb	r3, [r7, #31]
    a06e:	4611      	mov	r1, r2
    a070:	4618      	mov	r0, r3
    a072:	4b3e      	ldr	r3, [pc, #248]	; (a16c <_usb_d_dev_ep_init+0x12c>)
    a074:	4798      	blx	r3
    a076:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    a078:	79bb      	ldrb	r3, [r7, #6]
    a07a:	f003 0303 	and.w	r3, r3, #3
    a07e:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    a080:	7ffa      	ldrb	r2, [r7, #31]
    a082:	4613      	mov	r3, r2
    a084:	005b      	lsls	r3, r3, #1
    a086:	4413      	add	r3, r2
    a088:	009b      	lsls	r3, r3, #2
    a08a:	4a39      	ldr	r2, [pc, #228]	; (a170 <_usb_d_dev_ep_init+0x130>)
    a08c:	4413      	add	r3, r2
    a08e:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    a090:	7ffb      	ldrb	r3, [r7, #31]
    a092:	2b04      	cmp	r3, #4
    a094:	d902      	bls.n	a09c <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    a096:	f06f 0311 	mvn.w	r3, #17
    a09a:	e063      	b.n	a164 <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    a09c:	69bb      	ldr	r3, [r7, #24]
    a09e:	7c9b      	ldrb	r3, [r3, #18]
    a0a0:	2bff      	cmp	r3, #255	; 0xff
    a0a2:	d002      	beq.n	a0aa <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    a0a4:	f06f 0313 	mvn.w	r3, #19
    a0a8:	e05c      	b.n	a164 <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    a0aa:	7dfb      	ldrb	r3, [r7, #23]
    a0ac:	2b00      	cmp	r3, #0
    a0ae:	d11f      	bne.n	a0f0 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    a0b0:	7fbb      	ldrb	r3, [r7, #30]
    a0b2:	2b00      	cmp	r3, #0
    a0b4:	bf14      	ite	ne
    a0b6:	2301      	movne	r3, #1
    a0b8:	2300      	moveq	r3, #0
    a0ba:	b2db      	uxtb	r3, r3
    a0bc:	f083 0301 	eor.w	r3, r3, #1
    a0c0:	b2db      	uxtb	r3, r3
    a0c2:	f003 0301 	and.w	r3, r3, #1
    a0c6:	b2da      	uxtb	r2, r3
    a0c8:	7ffb      	ldrb	r3, [r7, #31]
    a0ca:	4611      	mov	r1, r2
    a0cc:	4618      	mov	r0, r3
    a0ce:	4b27      	ldr	r3, [pc, #156]	; (a16c <_usb_d_dev_ep_init+0x12c>)
    a0d0:	4798      	blx	r3
    a0d2:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    a0d4:	68fb      	ldr	r3, [r7, #12]
    a0d6:	7c9b      	ldrb	r3, [r3, #18]
    a0d8:	2bff      	cmp	r3, #255	; 0xff
    a0da:	d002      	beq.n	a0e2 <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    a0dc:	f06f 0313 	mvn.w	r3, #19
    a0e0:	e040      	b.n	a164 <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    a0e2:	693b      	ldr	r3, [r7, #16]
    a0e4:	681b      	ldr	r3, [r3, #0]
    a0e6:	2b00      	cmp	r3, #0
    a0e8:	d102      	bne.n	a0f0 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    a0ea:	f06f 0312 	mvn.w	r3, #18
    a0ee:	e039      	b.n	a164 <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    a0f0:	7fbb      	ldrb	r3, [r7, #30]
    a0f2:	2b00      	cmp	r3, #0
    a0f4:	d007      	beq.n	a106 <_usb_d_dev_ep_init+0xc6>
    a0f6:	693b      	ldr	r3, [r7, #16]
    a0f8:	685b      	ldr	r3, [r3, #4]
    a0fa:	2b00      	cmp	r3, #0
    a0fc:	bf14      	ite	ne
    a0fe:	2301      	movne	r3, #1
    a100:	2300      	moveq	r3, #0
    a102:	b2db      	uxtb	r3, r3
    a104:	e006      	b.n	a114 <_usb_d_dev_ep_init+0xd4>
    a106:	693b      	ldr	r3, [r7, #16]
    a108:	681b      	ldr	r3, [r3, #0]
    a10a:	2b00      	cmp	r3, #0
    a10c:	bf14      	ite	ne
    a10e:	2301      	movne	r3, #1
    a110:	2300      	moveq	r3, #0
    a112:	b2db      	uxtb	r3, r3
    a114:	2b00      	cmp	r3, #0
    a116:	d00f      	beq.n	a138 <_usb_d_dev_ep_init+0xf8>
    a118:	7fbb      	ldrb	r3, [r7, #30]
    a11a:	2b00      	cmp	r3, #0
    a11c:	d003      	beq.n	a126 <_usb_d_dev_ep_init+0xe6>
    a11e:	693b      	ldr	r3, [r7, #16]
    a120:	895b      	ldrh	r3, [r3, #10]
    a122:	461a      	mov	r2, r3
    a124:	e002      	b.n	a12c <_usb_d_dev_ep_init+0xec>
    a126:	693b      	ldr	r3, [r7, #16]
    a128:	891b      	ldrh	r3, [r3, #8]
    a12a:	461a      	mov	r2, r3
    a12c:	88bb      	ldrh	r3, [r7, #4]
    a12e:	429a      	cmp	r2, r3
    a130:	da02      	bge.n	a138 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    a132:	f06f 0312 	mvn.w	r3, #18
    a136:	e015      	b.n	a164 <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    a138:	7fbb      	ldrb	r3, [r7, #30]
    a13a:	2b00      	cmp	r3, #0
    a13c:	d002      	beq.n	a144 <_usb_d_dev_ep_init+0x104>
    a13e:	693b      	ldr	r3, [r7, #16]
    a140:	685b      	ldr	r3, [r3, #4]
    a142:	e001      	b.n	a148 <_usb_d_dev_ep_init+0x108>
    a144:	693b      	ldr	r3, [r7, #16]
    a146:	681b      	ldr	r3, [r3, #0]
    a148:	69ba      	ldr	r2, [r7, #24]
    a14a:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    a14c:	69bb      	ldr	r3, [r7, #24]
    a14e:	88ba      	ldrh	r2, [r7, #4]
    a150:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    a152:	7dfb      	ldrb	r3, [r7, #23]
    a154:	3301      	adds	r3, #1
    a156:	b2da      	uxtb	r2, r3
    a158:	69bb      	ldr	r3, [r7, #24]
    a15a:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    a15c:	69bb      	ldr	r3, [r7, #24]
    a15e:	79fa      	ldrb	r2, [r7, #7]
    a160:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    a162:	2300      	movs	r3, #0
}
    a164:	4618      	mov	r0, r3
    a166:	3720      	adds	r7, #32
    a168:	46bd      	mov	sp, r7
    a16a:	bd80      	pop	{r7, pc}
    a16c:	00009071 	.word	0x00009071
    a170:	0000e610 	.word	0x0000e610

0000a174 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    a174:	b580      	push	{r7, lr}
    a176:	b086      	sub	sp, #24
    a178:	af00      	add	r7, sp, #0
    a17a:	4603      	mov	r3, r0
    a17c:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    a17e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a182:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    a184:	79fb      	ldrb	r3, [r7, #7]
    a186:	f003 030f 	and.w	r3, r3, #15
    a18a:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    a18c:	79fb      	ldrb	r3, [r7, #7]
    a18e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a192:	2b00      	cmp	r3, #0
    a194:	bf14      	ite	ne
    a196:	2301      	movne	r3, #1
    a198:	2300      	moveq	r3, #0
    a19a:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a19c:	7cba      	ldrb	r2, [r7, #18]
    a19e:	7cfb      	ldrb	r3, [r7, #19]
    a1a0:	4611      	mov	r1, r2
    a1a2:	4618      	mov	r0, r3
    a1a4:	4b2a      	ldr	r3, [pc, #168]	; (a250 <_usb_d_dev_ep_deinit+0xdc>)
    a1a6:	4798      	blx	r3
    a1a8:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    a1aa:	7cfb      	ldrb	r3, [r7, #19]
    a1ac:	2b04      	cmp	r3, #4
    a1ae:	d84a      	bhi.n	a246 <_usb_d_dev_ep_deinit+0xd2>
    a1b0:	68fb      	ldr	r3, [r7, #12]
    a1b2:	7c9b      	ldrb	r3, [r3, #18]
    a1b4:	2bff      	cmp	r3, #255	; 0xff
    a1b6:	d046      	beq.n	a246 <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    a1b8:	7cbb      	ldrb	r3, [r7, #18]
    a1ba:	2203      	movs	r2, #3
    a1bc:	4619      	mov	r1, r3
    a1be:	68f8      	ldr	r0, [r7, #12]
    a1c0:	4b24      	ldr	r3, [pc, #144]	; (a254 <_usb_d_dev_ep_deinit+0xe0>)
    a1c2:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    a1c4:	68fb      	ldr	r3, [r7, #12]
    a1c6:	7cdb      	ldrb	r3, [r3, #19]
    a1c8:	f003 0307 	and.w	r3, r3, #7
    a1cc:	b2db      	uxtb	r3, r3
    a1ce:	2b01      	cmp	r3, #1
    a1d0:	d107      	bne.n	a1e2 <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    a1d2:	79fb      	ldrb	r3, [r7, #7]
    a1d4:	697a      	ldr	r2, [r7, #20]
    a1d6:	3308      	adds	r3, #8
    a1d8:	015b      	lsls	r3, r3, #5
    a1da:	4413      	add	r3, r2
    a1dc:	2200      	movs	r2, #0
    a1de:	701a      	strb	r2, [r3, #0]
    a1e0:	e02a      	b.n	a238 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    a1e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
    a1e6:	2b00      	cmp	r3, #0
    a1e8:	da15      	bge.n	a216 <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    a1ea:	79fb      	ldrb	r3, [r7, #7]
    a1ec:	f003 030f 	and.w	r3, r3, #15
    a1f0:	79fa      	ldrb	r2, [r7, #7]
    a1f2:	f002 020f 	and.w	r2, r2, #15
    a1f6:	6979      	ldr	r1, [r7, #20]
    a1f8:	3208      	adds	r2, #8
    a1fa:	0152      	lsls	r2, r2, #5
    a1fc:	440a      	add	r2, r1
    a1fe:	7812      	ldrb	r2, [r2, #0]
    a200:	b2d2      	uxtb	r2, r2
    a202:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    a206:	b2d1      	uxtb	r1, r2
    a208:	697a      	ldr	r2, [r7, #20]
    a20a:	3308      	adds	r3, #8
    a20c:	015b      	lsls	r3, r3, #5
    a20e:	4413      	add	r3, r2
    a210:	460a      	mov	r2, r1
    a212:	701a      	strb	r2, [r3, #0]
    a214:	e010      	b.n	a238 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    a216:	79fb      	ldrb	r3, [r7, #7]
    a218:	79fa      	ldrb	r2, [r7, #7]
    a21a:	6979      	ldr	r1, [r7, #20]
    a21c:	3208      	adds	r2, #8
    a21e:	0152      	lsls	r2, r2, #5
    a220:	440a      	add	r2, r1
    a222:	7812      	ldrb	r2, [r2, #0]
    a224:	b2d2      	uxtb	r2, r2
    a226:	f022 0207 	bic.w	r2, r2, #7
    a22a:	b2d1      	uxtb	r1, r2
    a22c:	697a      	ldr	r2, [r7, #20]
    a22e:	3308      	adds	r3, #8
    a230:	015b      	lsls	r3, r3, #5
    a232:	4413      	add	r3, r2
    a234:	460a      	mov	r2, r1
    a236:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    a238:	68fb      	ldr	r3, [r7, #12]
    a23a:	2200      	movs	r2, #0
    a23c:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    a23e:	68fb      	ldr	r3, [r7, #12]
    a240:	22ff      	movs	r2, #255	; 0xff
    a242:	749a      	strb	r2, [r3, #18]
    a244:	e000      	b.n	a248 <_usb_d_dev_ep_deinit+0xd4>
		return;
    a246:	bf00      	nop
}
    a248:	3718      	adds	r7, #24
    a24a:	46bd      	mov	sp, r7
    a24c:	bd80      	pop	{r7, pc}
    a24e:	bf00      	nop
    a250:	00009071 	.word	0x00009071
    a254:	0000a6a9 	.word	0x0000a6a9

0000a258 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    a258:	b5b0      	push	{r4, r5, r7, lr}
    a25a:	b088      	sub	sp, #32
    a25c:	af00      	add	r7, sp, #0
    a25e:	4603      	mov	r3, r0
    a260:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    a262:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a266:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    a268:	79fb      	ldrb	r3, [r7, #7]
    a26a:	f003 030f 	and.w	r3, r3, #15
    a26e:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    a270:	79fb      	ldrb	r3, [r7, #7]
    a272:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a276:	2b00      	cmp	r3, #0
    a278:	bf14      	ite	ne
    a27a:	2301      	movne	r3, #1
    a27c:	2300      	moveq	r3, #0
    a27e:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    a280:	7eba      	ldrb	r2, [r7, #26]
    a282:	7efb      	ldrb	r3, [r7, #27]
    a284:	4611      	mov	r1, r2
    a286:	4618      	mov	r0, r3
    a288:	4b70      	ldr	r3, [pc, #448]	; (a44c <_usb_d_dev_ep_enable+0x1f4>)
    a28a:	4798      	blx	r3
    a28c:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    a28e:	7efb      	ldrb	r3, [r7, #27]
    a290:	4619      	mov	r1, r3
    a292:	69f8      	ldr	r0, [r7, #28]
    a294:	4b6e      	ldr	r3, [pc, #440]	; (a450 <_usb_d_dev_ep_enable+0x1f8>)
    a296:	4798      	blx	r3
    a298:	4603      	mov	r3, r0
    a29a:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    a29c:	7efb      	ldrb	r3, [r7, #27]
    a29e:	2b04      	cmp	r3, #4
    a2a0:	d803      	bhi.n	a2aa <_usb_d_dev_ep_enable+0x52>
    a2a2:	697b      	ldr	r3, [r7, #20]
    a2a4:	7c9b      	ldrb	r3, [r3, #18]
    a2a6:	2bff      	cmp	r3, #255	; 0xff
    a2a8:	d102      	bne.n	a2b0 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    a2aa:	f06f 0311 	mvn.w	r3, #17
    a2ae:	e0c8      	b.n	a442 <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    a2b0:	7efb      	ldrb	r3, [r7, #27]
    a2b2:	015b      	lsls	r3, r3, #5
    a2b4:	4a67      	ldr	r2, [pc, #412]	; (a454 <_usb_d_dev_ep_enable+0x1fc>)
    a2b6:	4413      	add	r3, r2
    a2b8:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    a2ba:	697b      	ldr	r3, [r7, #20]
    a2bc:	7cdb      	ldrb	r3, [r3, #19]
    a2be:	f003 0307 	and.w	r3, r3, #7
    a2c2:	b2db      	uxtb	r3, r3
    a2c4:	2b01      	cmp	r3, #1
    a2c6:	d14b      	bne.n	a360 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    a2c8:	7cfb      	ldrb	r3, [r7, #19]
    a2ca:	f003 0377 	and.w	r3, r3, #119	; 0x77
    a2ce:	2b00      	cmp	r3, #0
    a2d0:	d002      	beq.n	a2d8 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    a2d2:	f06f 0313 	mvn.w	r3, #19
    a2d6:	e0b4      	b.n	a442 <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    a2d8:	7efb      	ldrb	r3, [r7, #27]
    a2da:	2211      	movs	r2, #17
    a2dc:	4619      	mov	r1, r3
    a2de:	69f8      	ldr	r0, [r7, #28]
    a2e0:	4b5d      	ldr	r3, [pc, #372]	; (a458 <_usb_d_dev_ep_enable+0x200>)
    a2e2:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a2e4:	697b      	ldr	r3, [r7, #20]
    a2e6:	8a1b      	ldrh	r3, [r3, #16]
    a2e8:	039b      	lsls	r3, r3, #14
    a2ea:	4c5c      	ldr	r4, [pc, #368]	; (a45c <_usb_d_dev_ep_enable+0x204>)
    a2ec:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a2ee:	697b      	ldr	r3, [r7, #20]
    a2f0:	8a1b      	ldrh	r3, [r3, #16]
    a2f2:	4618      	mov	r0, r3
    a2f4:	4b5a      	ldr	r3, [pc, #360]	; (a460 <_usb_d_dev_ep_enable+0x208>)
    a2f6:	4798      	blx	r3
    a2f8:	4603      	mov	r3, r0
    a2fa:	071b      	lsls	r3, r3, #28
    a2fc:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a300:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a304:	68fb      	ldr	r3, [r7, #12]
    a306:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    a308:	68fb      	ldr	r3, [r7, #12]
    a30a:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a30e:	697b      	ldr	r3, [r7, #20]
    a310:	8a1b      	ldrh	r3, [r3, #16]
    a312:	f3c3 050d 	ubfx	r5, r3, #0, #14
    a316:	697b      	ldr	r3, [r7, #20]
    a318:	8a1b      	ldrh	r3, [r3, #16]
    a31a:	4618      	mov	r0, r3
    a31c:	4b50      	ldr	r3, [pc, #320]	; (a460 <_usb_d_dev_ep_enable+0x208>)
    a31e:	4798      	blx	r3
    a320:	4603      	mov	r3, r0
    a322:	071b      	lsls	r3, r3, #28
    a324:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a328:	432b      	orrs	r3, r5
    a32a:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    a32c:	7efb      	ldrb	r3, [r7, #27]
    a32e:	2200      	movs	r2, #0
    a330:	2100      	movs	r1, #0
    a332:	4618      	mov	r0, r3
    a334:	4b4b      	ldr	r3, [pc, #300]	; (a464 <_usb_d_dev_ep_enable+0x20c>)
    a336:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    a338:	7efb      	ldrb	r3, [r7, #27]
    a33a:	2200      	movs	r2, #0
    a33c:	2101      	movs	r1, #1
    a33e:	4618      	mov	r0, r3
    a340:	4b49      	ldr	r3, [pc, #292]	; (a468 <_usb_d_dev_ep_enable+0x210>)
    a342:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    a344:	7efb      	ldrb	r3, [r7, #27]
    a346:	2100      	movs	r1, #0
    a348:	4618      	mov	r0, r3
    a34a:	4b48      	ldr	r3, [pc, #288]	; (a46c <_usb_d_dev_ep_enable+0x214>)
    a34c:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    a34e:	7efb      	ldrb	r3, [r7, #27]
    a350:	2101      	movs	r1, #1
    a352:	4618      	mov	r0, r3
    a354:	4b45      	ldr	r3, [pc, #276]	; (a46c <_usb_d_dev_ep_enable+0x214>)
    a356:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    a358:	6978      	ldr	r0, [r7, #20]
    a35a:	4b45      	ldr	r3, [pc, #276]	; (a470 <_usb_d_dev_ep_enable+0x218>)
    a35c:	4798      	blx	r3
    a35e:	e06f      	b.n	a440 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    a360:	7ebb      	ldrb	r3, [r7, #26]
    a362:	2b00      	cmp	r3, #0
    a364:	d038      	beq.n	a3d8 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    a366:	7cfb      	ldrb	r3, [r7, #19]
    a368:	f003 0370 	and.w	r3, r3, #112	; 0x70
    a36c:	2b00      	cmp	r3, #0
    a36e:	d002      	beq.n	a376 <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    a370:	f06f 0313 	mvn.w	r3, #19
    a374:	e065      	b.n	a442 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    a376:	697b      	ldr	r3, [r7, #20]
    a378:	7cdb      	ldrb	r3, [r3, #19]
    a37a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    a37e:	b2db      	uxtb	r3, r3
    a380:	011b      	lsls	r3, r3, #4
    a382:	b2db      	uxtb	r3, r3
    a384:	f003 0370 	and.w	r3, r3, #112	; 0x70
    a388:	b2da      	uxtb	r2, r3
    a38a:	7cfb      	ldrb	r3, [r7, #19]
    a38c:	4313      	orrs	r3, r2
    a38e:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    a390:	7cfa      	ldrb	r2, [r7, #19]
    a392:	7efb      	ldrb	r3, [r7, #27]
    a394:	4619      	mov	r1, r3
    a396:	69f8      	ldr	r0, [r7, #28]
    a398:	4b2f      	ldr	r3, [pc, #188]	; (a458 <_usb_d_dev_ep_enable+0x200>)
    a39a:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    a39c:	68fb      	ldr	r3, [r7, #12]
    a39e:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a3a2:	697b      	ldr	r3, [r7, #20]
    a3a4:	8a1b      	ldrh	r3, [r3, #16]
    a3a6:	f3c3 050d 	ubfx	r5, r3, #0, #14
    a3aa:	697b      	ldr	r3, [r7, #20]
    a3ac:	8a1b      	ldrh	r3, [r3, #16]
    a3ae:	4618      	mov	r0, r3
    a3b0:	4b2b      	ldr	r3, [pc, #172]	; (a460 <_usb_d_dev_ep_enable+0x208>)
    a3b2:	4798      	blx	r3
    a3b4:	4603      	mov	r3, r0
    a3b6:	071b      	lsls	r3, r3, #28
    a3b8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a3bc:	432b      	orrs	r3, r5
    a3be:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    a3c0:	7efb      	ldrb	r3, [r7, #27]
    a3c2:	2200      	movs	r2, #0
    a3c4:	2101      	movs	r1, #1
    a3c6:	4618      	mov	r0, r3
    a3c8:	4b27      	ldr	r3, [pc, #156]	; (a468 <_usb_d_dev_ep_enable+0x210>)
    a3ca:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    a3cc:	7efb      	ldrb	r3, [r7, #27]
    a3ce:	2101      	movs	r1, #1
    a3d0:	4618      	mov	r0, r3
    a3d2:	4b26      	ldr	r3, [pc, #152]	; (a46c <_usb_d_dev_ep_enable+0x214>)
    a3d4:	4798      	blx	r3
    a3d6:	e033      	b.n	a440 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    a3d8:	7cfb      	ldrb	r3, [r7, #19]
    a3da:	f003 0307 	and.w	r3, r3, #7
    a3de:	2b00      	cmp	r3, #0
    a3e0:	d002      	beq.n	a3e8 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    a3e2:	f06f 0313 	mvn.w	r3, #19
    a3e6:	e02c      	b.n	a442 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    a3e8:	697b      	ldr	r3, [r7, #20]
    a3ea:	7cdb      	ldrb	r3, [r3, #19]
    a3ec:	f3c3 0302 	ubfx	r3, r3, #0, #3
    a3f0:	b2db      	uxtb	r3, r3
    a3f2:	461a      	mov	r2, r3
    a3f4:	7cfb      	ldrb	r3, [r7, #19]
    a3f6:	4313      	orrs	r3, r2
    a3f8:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    a3fa:	7cfa      	ldrb	r2, [r7, #19]
    a3fc:	7efb      	ldrb	r3, [r7, #27]
    a3fe:	4619      	mov	r1, r3
    a400:	69f8      	ldr	r0, [r7, #28]
    a402:	4b15      	ldr	r3, [pc, #84]	; (a458 <_usb_d_dev_ep_enable+0x200>)
    a404:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a406:	697b      	ldr	r3, [r7, #20]
    a408:	8a1b      	ldrh	r3, [r3, #16]
    a40a:	039b      	lsls	r3, r3, #14
    a40c:	4c13      	ldr	r4, [pc, #76]	; (a45c <_usb_d_dev_ep_enable+0x204>)
    a40e:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a410:	697b      	ldr	r3, [r7, #20]
    a412:	8a1b      	ldrh	r3, [r3, #16]
    a414:	4618      	mov	r0, r3
    a416:	4b12      	ldr	r3, [pc, #72]	; (a460 <_usb_d_dev_ep_enable+0x208>)
    a418:	4798      	blx	r3
    a41a:	4603      	mov	r3, r0
    a41c:	071b      	lsls	r3, r3, #28
    a41e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a422:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a426:	68fb      	ldr	r3, [r7, #12]
    a428:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    a42a:	7efb      	ldrb	r3, [r7, #27]
    a42c:	2200      	movs	r2, #0
    a42e:	2100      	movs	r1, #0
    a430:	4618      	mov	r0, r3
    a432:	4b0c      	ldr	r3, [pc, #48]	; (a464 <_usb_d_dev_ep_enable+0x20c>)
    a434:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    a436:	7efb      	ldrb	r3, [r7, #27]
    a438:	2100      	movs	r1, #0
    a43a:	4618      	mov	r0, r3
    a43c:	4b0b      	ldr	r3, [pc, #44]	; (a46c <_usb_d_dev_ep_enable+0x214>)
    a43e:	4798      	blx	r3
	}

	return USB_OK;
    a440:	2300      	movs	r3, #0
}
    a442:	4618      	mov	r0, r3
    a444:	3720      	adds	r7, #32
    a446:	46bd      	mov	sp, r7
    a448:	bdb0      	pop	{r4, r5, r7, pc}
    a44a:	bf00      	nop
    a44c:	00009071 	.word	0x00009071
    a450:	000086f7 	.word	0x000086f7
    a454:	20000a98 	.word	0x20000a98
    a458:	000086cd 	.word	0x000086cd
    a45c:	0fffc000 	.word	0x0fffc000
    a460:	0000900d 	.word	0x0000900d
    a464:	00008fb5 	.word	0x00008fb5
    a468:	00008f5d 	.word	0x00008f5d
    a46c:	00008f25 	.word	0x00008f25
    a470:	00009fc9 	.word	0x00009fc9

0000a474 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    a474:	b580      	push	{r7, lr}
    a476:	b084      	sub	sp, #16
    a478:	af00      	add	r7, sp, #0
    a47a:	6078      	str	r0, [r7, #4]
    a47c:	460b      	mov	r3, r1
    a47e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a480:	687b      	ldr	r3, [r7, #4]
    a482:	7c9b      	ldrb	r3, [r3, #18]
    a484:	f003 030f 	and.w	r3, r3, #15
    a488:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    a48a:	78fa      	ldrb	r2, [r7, #3]
    a48c:	7bfb      	ldrb	r3, [r7, #15]
    a48e:	4611      	mov	r1, r2
    a490:	4618      	mov	r0, r3
    a492:	4b03      	ldr	r3, [pc, #12]	; (a4a0 <_usb_d_dev_ep_stall_get+0x2c>)
    a494:	4798      	blx	r3
    a496:	4603      	mov	r3, r0
}
    a498:	4618      	mov	r0, r3
    a49a:	3710      	adds	r7, #16
    a49c:	46bd      	mov	sp, r7
    a49e:	bd80      	pop	{r7, pc}
    a4a0:	00008b65 	.word	0x00008b65

0000a4a4 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    a4a4:	b580      	push	{r7, lr}
    a4a6:	b084      	sub	sp, #16
    a4a8:	af00      	add	r7, sp, #0
    a4aa:	6078      	str	r0, [r7, #4]
    a4ac:	460b      	mov	r3, r1
    a4ae:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a4b0:	687b      	ldr	r3, [r7, #4]
    a4b2:	7c9b      	ldrb	r3, [r3, #18]
    a4b4:	f003 030f 	and.w	r3, r3, #15
    a4b8:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    a4ba:	78f9      	ldrb	r1, [r7, #3]
    a4bc:	7bfb      	ldrb	r3, [r7, #15]
    a4be:	2201      	movs	r2, #1
    a4c0:	4618      	mov	r0, r3
    a4c2:	4b0a      	ldr	r3, [pc, #40]	; (a4ec <_usb_d_dev_ep_stall_set+0x48>)
    a4c4:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    a4c6:	78fb      	ldrb	r3, [r7, #3]
    a4c8:	2220      	movs	r2, #32
    a4ca:	409a      	lsls	r2, r3
    a4cc:	7bfb      	ldrb	r3, [r7, #15]
    a4ce:	4611      	mov	r1, r2
    a4d0:	4618      	mov	r0, r3
    a4d2:	4b07      	ldr	r3, [pc, #28]	; (a4f0 <_usb_d_dev_ep_stall_set+0x4c>)
    a4d4:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    a4d6:	687a      	ldr	r2, [r7, #4]
    a4d8:	7cd3      	ldrb	r3, [r2, #19]
    a4da:	f043 0308 	orr.w	r3, r3, #8
    a4de:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    a4e0:	2300      	movs	r3, #0
}
    a4e2:	4618      	mov	r0, r3
    a4e4:	3710      	adds	r7, #16
    a4e6:	46bd      	mov	sp, r7
    a4e8:	bd80      	pop	{r7, pc}
    a4ea:	bf00      	nop
    a4ec:	00008b0d 	.word	0x00008b0d
    a4f0:	00008a8d 	.word	0x00008a8d

0000a4f4 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    a4f4:	b580      	push	{r7, lr}
    a4f6:	b084      	sub	sp, #16
    a4f8:	af00      	add	r7, sp, #0
    a4fa:	6078      	str	r0, [r7, #4]
    a4fc:	460b      	mov	r3, r1
    a4fe:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    a500:	687b      	ldr	r3, [r7, #4]
    a502:	7c9b      	ldrb	r3, [r3, #18]
    a504:	f003 030f 	and.w	r3, r3, #15
    a508:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    a50a:	78fa      	ldrb	r2, [r7, #3]
    a50c:	7bfb      	ldrb	r3, [r7, #15]
    a50e:	4611      	mov	r1, r2
    a510:	4618      	mov	r0, r3
    a512:	4b28      	ldr	r3, [pc, #160]	; (a5b4 <_usb_d_dev_ep_stall_clr+0xc0>)
    a514:	4798      	blx	r3
    a516:	4603      	mov	r3, r0
    a518:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    a51a:	7bbb      	ldrb	r3, [r7, #14]
    a51c:	f083 0301 	eor.w	r3, r3, #1
    a520:	b2db      	uxtb	r3, r3
    a522:	2b00      	cmp	r3, #0
    a524:	d001      	beq.n	a52a <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    a526:	2300      	movs	r3, #0
    a528:	e040      	b.n	a5ac <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    a52a:	78f9      	ldrb	r1, [r7, #3]
    a52c:	7bfb      	ldrb	r3, [r7, #15]
    a52e:	2200      	movs	r2, #0
    a530:	4618      	mov	r0, r3
    a532:	4b21      	ldr	r3, [pc, #132]	; (a5b8 <_usb_d_dev_ep_stall_clr+0xc4>)
    a534:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    a536:	78fb      	ldrb	r3, [r7, #3]
    a538:	2220      	movs	r2, #32
    a53a:	409a      	lsls	r2, r3
    a53c:	7bfb      	ldrb	r3, [r7, #15]
    a53e:	4611      	mov	r1, r2
    a540:	4618      	mov	r0, r3
    a542:	4b1e      	ldr	r3, [pc, #120]	; (a5bc <_usb_d_dev_ep_stall_clr+0xc8>)
    a544:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    a546:	78fa      	ldrb	r2, [r7, #3]
    a548:	7bfb      	ldrb	r3, [r7, #15]
    a54a:	4611      	mov	r1, r2
    a54c:	4618      	mov	r0, r3
    a54e:	4b1c      	ldr	r3, [pc, #112]	; (a5c0 <_usb_d_dev_ep_stall_clr+0xcc>)
    a550:	4798      	blx	r3
    a552:	4603      	mov	r3, r0
    a554:	2b00      	cmp	r3, #0
    a556:	d00b      	beq.n	a570 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    a558:	78fa      	ldrb	r2, [r7, #3]
    a55a:	7bfb      	ldrb	r3, [r7, #15]
    a55c:	4611      	mov	r1, r2
    a55e:	4618      	mov	r0, r3
    a560:	4b18      	ldr	r3, [pc, #96]	; (a5c4 <_usb_d_dev_ep_stall_clr+0xd0>)
    a562:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    a564:	78f9      	ldrb	r1, [r7, #3]
    a566:	7bfb      	ldrb	r3, [r7, #15]
    a568:	2200      	movs	r2, #0
    a56a:	4618      	mov	r0, r3
    a56c:	4b16      	ldr	r3, [pc, #88]	; (a5c8 <_usb_d_dev_ep_stall_clr+0xd4>)
    a56e:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    a570:	687b      	ldr	r3, [r7, #4]
    a572:	7cdb      	ldrb	r3, [r3, #19]
    a574:	f003 0307 	and.w	r3, r3, #7
    a578:	b2db      	uxtb	r3, r3
    a57a:	2b01      	cmp	r3, #1
    a57c:	d110      	bne.n	a5a0 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    a57e:	7bfb      	ldrb	r3, [r7, #15]
    a580:	4619      	mov	r1, r3
    a582:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a586:	4b11      	ldr	r3, [pc, #68]	; (a5cc <_usb_d_dev_ep_stall_clr+0xd8>)
    a588:	4798      	blx	r3
    a58a:	4603      	mov	r3, r0
    a58c:	f003 0330 	and.w	r3, r3, #48	; 0x30
    a590:	2b00      	cmp	r3, #0
    a592:	d10a      	bne.n	a5aa <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    a594:	687a      	ldr	r2, [r7, #4]
    a596:	7cd3      	ldrb	r3, [r2, #19]
    a598:	f36f 03c3 	bfc	r3, #3, #1
    a59c:	74d3      	strb	r3, [r2, #19]
    a59e:	e004      	b.n	a5aa <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    a5a0:	687a      	ldr	r2, [r7, #4]
    a5a2:	7cd3      	ldrb	r3, [r2, #19]
    a5a4:	f36f 03c3 	bfc	r3, #3, #1
    a5a8:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    a5aa:	2300      	movs	r3, #0
}
    a5ac:	4618      	mov	r0, r3
    a5ae:	3710      	adds	r7, #16
    a5b0:	46bd      	mov	sp, r7
    a5b2:	bd80      	pop	{r7, pc}
    a5b4:	00008b65 	.word	0x00008b65
    a5b8:	00008b0d 	.word	0x00008b0d
    a5bc:	00008ab5 	.word	0x00008ab5
    a5c0:	00008ba9 	.word	0x00008ba9
    a5c4:	00008bed 	.word	0x00008bed
    a5c8:	00008cd9 	.word	0x00008cd9
    a5cc:	00008595 	.word	0x00008595

0000a5d0 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    a5d0:	b580      	push	{r7, lr}
    a5d2:	b086      	sub	sp, #24
    a5d4:	af00      	add	r7, sp, #0
    a5d6:	4603      	mov	r3, r0
    a5d8:	460a      	mov	r2, r1
    a5da:	71fb      	strb	r3, [r7, #7]
    a5dc:	4613      	mov	r3, r2
    a5de:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    a5e0:	79fb      	ldrb	r3, [r7, #7]
    a5e2:	f003 030f 	and.w	r3, r3, #15
    a5e6:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    a5e8:	79fb      	ldrb	r3, [r7, #7]
    a5ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a5ee:	2b00      	cmp	r3, #0
    a5f0:	bf14      	ite	ne
    a5f2:	2301      	movne	r3, #1
    a5f4:	2300      	moveq	r3, #0
    a5f6:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a5f8:	7cba      	ldrb	r2, [r7, #18]
    a5fa:	7cfb      	ldrb	r3, [r7, #19]
    a5fc:	4611      	mov	r1, r2
    a5fe:	4618      	mov	r0, r3
    a600:	4b13      	ldr	r3, [pc, #76]	; (a650 <_usb_d_dev_ep_stall+0x80>)
    a602:	4798      	blx	r3
    a604:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    a606:	7cfb      	ldrb	r3, [r7, #19]
    a608:	2b04      	cmp	r3, #4
    a60a:	d902      	bls.n	a612 <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    a60c:	f06f 0311 	mvn.w	r3, #17
    a610:	e01a      	b.n	a648 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    a612:	79bb      	ldrb	r3, [r7, #6]
    a614:	2b01      	cmp	r3, #1
    a616:	d106      	bne.n	a626 <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    a618:	7cbb      	ldrb	r3, [r7, #18]
    a61a:	4619      	mov	r1, r3
    a61c:	68f8      	ldr	r0, [r7, #12]
    a61e:	4b0d      	ldr	r3, [pc, #52]	; (a654 <_usb_d_dev_ep_stall+0x84>)
    a620:	4798      	blx	r3
    a622:	6178      	str	r0, [r7, #20]
    a624:	e00f      	b.n	a646 <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    a626:	79bb      	ldrb	r3, [r7, #6]
    a628:	2b00      	cmp	r3, #0
    a62a:	d106      	bne.n	a63a <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    a62c:	7cbb      	ldrb	r3, [r7, #18]
    a62e:	4619      	mov	r1, r3
    a630:	68f8      	ldr	r0, [r7, #12]
    a632:	4b09      	ldr	r3, [pc, #36]	; (a658 <_usb_d_dev_ep_stall+0x88>)
    a634:	4798      	blx	r3
    a636:	6178      	str	r0, [r7, #20]
    a638:	e005      	b.n	a646 <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    a63a:	7cbb      	ldrb	r3, [r7, #18]
    a63c:	4619      	mov	r1, r3
    a63e:	68f8      	ldr	r0, [r7, #12]
    a640:	4b06      	ldr	r3, [pc, #24]	; (a65c <_usb_d_dev_ep_stall+0x8c>)
    a642:	4798      	blx	r3
    a644:	6178      	str	r0, [r7, #20]
	}
	return rc;
    a646:	697b      	ldr	r3, [r7, #20]
}
    a648:	4618      	mov	r0, r3
    a64a:	3718      	adds	r7, #24
    a64c:	46bd      	mov	sp, r7
    a64e:	bd80      	pop	{r7, pc}
    a650:	00009071 	.word	0x00009071
    a654:	0000a4a5 	.word	0x0000a4a5
    a658:	0000a4f5 	.word	0x0000a4f5
    a65c:	0000a475 	.word	0x0000a475

0000a660 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    a660:	b580      	push	{r7, lr}
    a662:	b082      	sub	sp, #8
    a664:	af00      	add	r7, sp, #0
    a666:	6078      	str	r0, [r7, #4]
    a668:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    a66a:	687b      	ldr	r3, [r7, #4]
    a66c:	7c9b      	ldrb	r3, [r3, #18]
    a66e:	2bff      	cmp	r3, #255	; 0xff
    a670:	d014      	beq.n	a69c <_usb_d_dev_trans_done+0x3c>
    a672:	687b      	ldr	r3, [r7, #4]
    a674:	7cdb      	ldrb	r3, [r3, #19]
    a676:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a67a:	b2db      	uxtb	r3, r3
    a67c:	2b00      	cmp	r3, #0
    a67e:	d00d      	beq.n	a69c <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    a680:	687a      	ldr	r2, [r7, #4]
    a682:	7cd3      	ldrb	r3, [r2, #19]
    a684:	f36f 1386 	bfc	r3, #6, #1
    a688:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    a68a:	4b06      	ldr	r3, [pc, #24]	; (a6a4 <_usb_d_dev_trans_done+0x44>)
    a68c:	691b      	ldr	r3, [r3, #16]
    a68e:	687a      	ldr	r2, [r7, #4]
    a690:	7c90      	ldrb	r0, [r2, #18]
    a692:	687a      	ldr	r2, [r7, #4]
    a694:	6892      	ldr	r2, [r2, #8]
    a696:	6839      	ldr	r1, [r7, #0]
    a698:	4798      	blx	r3
    a69a:	e000      	b.n	a69e <_usb_d_dev_trans_done+0x3e>
		return;
    a69c:	bf00      	nop
}
    a69e:	3708      	adds	r7, #8
    a6a0:	46bd      	mov	sp, r7
    a6a2:	bd80      	pop	{r7, pc}
    a6a4:	200009d0 	.word	0x200009d0

0000a6a8 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    a6a8:	b580      	push	{r7, lr}
    a6aa:	b086      	sub	sp, #24
    a6ac:	af00      	add	r7, sp, #0
    a6ae:	60f8      	str	r0, [r7, #12]
    a6b0:	460b      	mov	r3, r1
    a6b2:	607a      	str	r2, [r7, #4]
    a6b4:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a6b6:	68fb      	ldr	r3, [r7, #12]
    a6b8:	7c9b      	ldrb	r3, [r3, #18]
    a6ba:	f003 030f 	and.w	r3, r3, #15
    a6be:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    a6c0:	4b1f      	ldr	r3, [pc, #124]	; (a740 <_usb_d_dev_trans_stop+0x98>)
    a6c2:	881b      	ldrh	r3, [r3, #0]
    a6c4:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    a6c6:	68fb      	ldr	r3, [r7, #12]
    a6c8:	7c9b      	ldrb	r3, [r3, #18]
    a6ca:	2bff      	cmp	r3, #255	; 0xff
    a6cc:	d033      	beq.n	a736 <_usb_d_dev_trans_stop+0x8e>
    a6ce:	68fb      	ldr	r3, [r7, #12]
    a6d0:	7cdb      	ldrb	r3, [r3, #19]
    a6d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a6d6:	b2db      	uxtb	r3, r3
    a6d8:	2b00      	cmp	r3, #0
    a6da:	d02c      	beq.n	a736 <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    a6dc:	7afb      	ldrb	r3, [r7, #11]
    a6de:	2b00      	cmp	r3, #0
    a6e0:	d006      	beq.n	a6f0 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    a6e2:	7dfb      	ldrb	r3, [r7, #23]
    a6e4:	2200      	movs	r2, #0
    a6e6:	2101      	movs	r1, #1
    a6e8:	4618      	mov	r0, r3
    a6ea:	4b16      	ldr	r3, [pc, #88]	; (a744 <_usb_d_dev_trans_stop+0x9c>)
    a6ec:	4798      	blx	r3
    a6ee:	e005      	b.n	a6fc <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    a6f0:	7dfb      	ldrb	r3, [r7, #23]
    a6f2:	2200      	movs	r2, #0
    a6f4:	2100      	movs	r1, #0
    a6f6:	4618      	mov	r0, r3
    a6f8:	4b13      	ldr	r3, [pc, #76]	; (a748 <_usb_d_dev_trans_stop+0xa0>)
    a6fa:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    a6fc:	7afb      	ldrb	r3, [r7, #11]
    a6fe:	f107 0218 	add.w	r2, r7, #24
    a702:	4413      	add	r3, r2
    a704:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    a708:	461a      	mov	r2, r3
    a70a:	7dfb      	ldrb	r3, [r7, #23]
    a70c:	4611      	mov	r1, r2
    a70e:	4618      	mov	r0, r3
    a710:	4b0e      	ldr	r3, [pc, #56]	; (a74c <_usb_d_dev_trans_stop+0xa4>)
    a712:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    a714:	7afb      	ldrb	r3, [r7, #11]
    a716:	f107 0218 	add.w	r2, r7, #24
    a71a:	4413      	add	r3, r2
    a71c:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    a720:	461a      	mov	r2, r3
    a722:	7dfb      	ldrb	r3, [r7, #23]
    a724:	4611      	mov	r1, r2
    a726:	4618      	mov	r0, r3
    a728:	4b09      	ldr	r3, [pc, #36]	; (a750 <_usb_d_dev_trans_stop+0xa8>)
    a72a:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    a72c:	6879      	ldr	r1, [r7, #4]
    a72e:	68f8      	ldr	r0, [r7, #12]
    a730:	4b08      	ldr	r3, [pc, #32]	; (a754 <_usb_d_dev_trans_stop+0xac>)
    a732:	4798      	blx	r3
    a734:	e000      	b.n	a738 <_usb_d_dev_trans_stop+0x90>
		return;
    a736:	bf00      	nop
}
    a738:	3718      	adds	r7, #24
    a73a:	46bd      	mov	sp, r7
    a73c:	bd80      	pop	{r7, pc}
    a73e:	bf00      	nop
    a740:	0000e650 	.word	0x0000e650
    a744:	00008f5d 	.word	0x00008f5d
    a748:	00008fb5 	.word	0x00008fb5
    a74c:	00008a65 	.word	0x00008a65
    a750:	00008ab5 	.word	0x00008ab5
    a754:	0000a661 	.word	0x0000a661

0000a758 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    a758:	b580      	push	{r7, lr}
    a75a:	b086      	sub	sp, #24
    a75c:	af00      	add	r7, sp, #0
    a75e:	4603      	mov	r3, r0
    a760:	6039      	str	r1, [r7, #0]
    a762:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    a764:	79fb      	ldrb	r3, [r7, #7]
    a766:	f003 030f 	and.w	r3, r3, #15
    a76a:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    a76c:	7dfb      	ldrb	r3, [r7, #23]
    a76e:	015b      	lsls	r3, r3, #5
    a770:	4a1e      	ldr	r2, [pc, #120]	; (a7ec <_usb_d_dev_ep_read_req+0x94>)
    a772:	4413      	add	r3, r2
    a774:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    a776:	693b      	ldr	r3, [r7, #16]
    a778:	681b      	ldr	r3, [r3, #0]
    a77a:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    a77c:	693b      	ldr	r3, [r7, #16]
    a77e:	685b      	ldr	r3, [r3, #4]
    a780:	f3c3 030d 	ubfx	r3, r3, #0, #14
    a784:	b29b      	uxth	r3, r3
    a786:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    a788:	7dfb      	ldrb	r3, [r7, #23]
    a78a:	2b04      	cmp	r3, #4
    a78c:	d802      	bhi.n	a794 <_usb_d_dev_ep_read_req+0x3c>
    a78e:	683b      	ldr	r3, [r7, #0]
    a790:	2b00      	cmp	r3, #0
    a792:	d102      	bne.n	a79a <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    a794:	f06f 0311 	mvn.w	r3, #17
    a798:	e023      	b.n	a7e2 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    a79a:	7dfb      	ldrb	r3, [r7, #23]
    a79c:	4618      	mov	r0, r3
    a79e:	4b14      	ldr	r3, [pc, #80]	; (a7f0 <_usb_d_dev_ep_read_req+0x98>)
    a7a0:	4798      	blx	r3
    a7a2:	4603      	mov	r3, r0
    a7a4:	f083 0301 	eor.w	r3, r3, #1
    a7a8:	b2db      	uxtb	r3, r3
    a7aa:	2b00      	cmp	r3, #0
    a7ac:	d002      	beq.n	a7b4 <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    a7ae:	f06f 0312 	mvn.w	r3, #18
    a7b2:	e016      	b.n	a7e2 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    a7b4:	7dfb      	ldrb	r3, [r7, #23]
    a7b6:	4618      	mov	r0, r3
    a7b8:	4b0e      	ldr	r3, [pc, #56]	; (a7f4 <_usb_d_dev_ep_read_req+0x9c>)
    a7ba:	4798      	blx	r3
    a7bc:	4603      	mov	r3, r0
    a7be:	f083 0301 	eor.w	r3, r3, #1
    a7c2:	b2db      	uxtb	r3, r3
    a7c4:	2b00      	cmp	r3, #0
    a7c6:	d001      	beq.n	a7cc <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    a7c8:	2300      	movs	r3, #0
    a7ca:	e00a      	b.n	a7e2 <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    a7cc:	68fb      	ldr	r3, [r7, #12]
    a7ce:	2208      	movs	r2, #8
    a7d0:	4619      	mov	r1, r3
    a7d2:	6838      	ldr	r0, [r7, #0]
    a7d4:	4b08      	ldr	r3, [pc, #32]	; (a7f8 <_usb_d_dev_ep_read_req+0xa0>)
    a7d6:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    a7d8:	7dfb      	ldrb	r3, [r7, #23]
    a7da:	4618      	mov	r0, r3
    a7dc:	4b07      	ldr	r3, [pc, #28]	; (a7fc <_usb_d_dev_ep_read_req+0xa4>)
    a7de:	4798      	blx	r3

	return bytes;
    a7e0:	897b      	ldrh	r3, [r7, #10]
}
    a7e2:	4618      	mov	r0, r3
    a7e4:	3718      	adds	r7, #24
    a7e6:	46bd      	mov	sp, r7
    a7e8:	bd80      	pop	{r7, pc}
    a7ea:	bf00      	nop
    a7ec:	20000a98 	.word	0x20000a98
    a7f0:	00008add 	.word	0x00008add
    a7f4:	00008c89 	.word	0x00008c89
    a7f8:	0000dccd 	.word	0x0000dccd
    a7fc:	00008cb9 	.word	0x00008cb9

0000a800 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    a800:	b580      	push	{r7, lr}
    a802:	b086      	sub	sp, #24
    a804:	af00      	add	r7, sp, #0
    a806:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    a808:	687b      	ldr	r3, [r7, #4]
    a80a:	7a1b      	ldrb	r3, [r3, #8]
    a80c:	f003 030f 	and.w	r3, r3, #15
    a810:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    a812:	687b      	ldr	r3, [r7, #4]
    a814:	7a1b      	ldrb	r3, [r3, #8]
    a816:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a81a:	2b00      	cmp	r3, #0
    a81c:	bf14      	ite	ne
    a81e:	2301      	movne	r3, #1
    a820:	2300      	moveq	r3, #0
    a822:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a824:	7d7a      	ldrb	r2, [r7, #21]
    a826:	7dbb      	ldrb	r3, [r7, #22]
    a828:	4611      	mov	r1, r2
    a82a:	4618      	mov	r0, r3
    a82c:	4b5f      	ldr	r3, [pc, #380]	; (a9ac <_usb_d_dev_ep_trans+0x1ac>)
    a82e:	4798      	blx	r3
    a830:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    a832:	693b      	ldr	r3, [r7, #16]
    a834:	8a1b      	ldrh	r3, [r3, #16]
    a836:	f240 32ff 	movw	r2, #1023	; 0x3ff
    a83a:	4293      	cmp	r3, r2
    a83c:	d004      	beq.n	a848 <_usb_d_dev_ep_trans+0x48>
    a83e:	693b      	ldr	r3, [r7, #16]
    a840:	8a1b      	ldrh	r3, [r3, #16]
    a842:	3b01      	subs	r3, #1
    a844:	b29b      	uxth	r3, r3
    a846:	e001      	b.n	a84c <_usb_d_dev_ep_trans+0x4c>
    a848:	f240 33ff 	movw	r3, #1023	; 0x3ff
    a84c:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    a84e:	687b      	ldr	r3, [r7, #4]
    a850:	685a      	ldr	r2, [r3, #4]
    a852:	89fb      	ldrh	r3, [r7, #14]
    a854:	4013      	ands	r3, r2
    a856:	2b00      	cmp	r3, #0
    a858:	bf14      	ite	ne
    a85a:	2301      	movne	r3, #1
    a85c:	2300      	moveq	r3, #0
    a85e:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    a860:	2300      	movs	r3, #0
    a862:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    a864:	7dbb      	ldrb	r3, [r7, #22]
    a866:	2b04      	cmp	r3, #4
    a868:	d902      	bls.n	a870 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    a86a:	f06f 0311 	mvn.w	r3, #17
    a86e:	e098      	b.n	a9a2 <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    a870:	687b      	ldr	r3, [r7, #4]
    a872:	681b      	ldr	r3, [r3, #0]
    a874:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    a878:	d31a      	bcc.n	a8b0 <_usb_d_dev_ep_trans+0xb0>
    a87a:	687b      	ldr	r3, [r7, #4]
    a87c:	681b      	ldr	r3, [r3, #0]
    a87e:	461a      	mov	r2, r3
    a880:	687b      	ldr	r3, [r7, #4]
    a882:	685b      	ldr	r3, [r3, #4]
    a884:	4413      	add	r3, r2
    a886:	4a4a      	ldr	r2, [pc, #296]	; (a9b0 <_usb_d_dev_ep_trans+0x1b0>)
    a888:	4293      	cmp	r3, r2
    a88a:	d811      	bhi.n	a8b0 <_usb_d_dev_ep_trans+0xb0>
    a88c:	687b      	ldr	r3, [r7, #4]
    a88e:	681b      	ldr	r3, [r3, #0]
    a890:	f003 0303 	and.w	r3, r3, #3
    a894:	2b00      	cmp	r3, #0
    a896:	d10b      	bne.n	a8b0 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    a898:	7d7b      	ldrb	r3, [r7, #21]
    a89a:	f083 0301 	eor.w	r3, r3, #1
    a89e:	b2db      	uxtb	r3, r3
    a8a0:	2b00      	cmp	r3, #0
    a8a2:	d00e      	beq.n	a8c2 <_usb_d_dev_ep_trans+0xc2>
    a8a4:	687b      	ldr	r3, [r7, #4]
    a8a6:	685b      	ldr	r3, [r3, #4]
    a8a8:	693a      	ldr	r2, [r7, #16]
    a8aa:	8a12      	ldrh	r2, [r2, #16]
    a8ac:	4293      	cmp	r3, r2
    a8ae:	d208      	bcs.n	a8c2 <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    a8b0:	693b      	ldr	r3, [r7, #16]
    a8b2:	68db      	ldr	r3, [r3, #12]
    a8b4:	2b00      	cmp	r3, #0
    a8b6:	d102      	bne.n	a8be <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    a8b8:	f06f 0312 	mvn.w	r3, #18
    a8bc:	e071      	b.n	a9a2 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    a8be:	2301      	movs	r3, #1
    a8c0:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    a8c2:	7d7b      	ldrb	r3, [r7, #21]
    a8c4:	f083 0301 	eor.w	r3, r3, #1
    a8c8:	b2db      	uxtb	r3, r3
    a8ca:	2b00      	cmp	r3, #0
    a8cc:	d009      	beq.n	a8e2 <_usb_d_dev_ep_trans+0xe2>
    a8ce:	7b7b      	ldrb	r3, [r7, #13]
    a8d0:	2b00      	cmp	r3, #0
    a8d2:	d006      	beq.n	a8e2 <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    a8d4:	693b      	ldr	r3, [r7, #16]
    a8d6:	68db      	ldr	r3, [r3, #12]
    a8d8:	2b00      	cmp	r3, #0
    a8da:	d102      	bne.n	a8e2 <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    a8dc:	f06f 0311 	mvn.w	r3, #17
    a8e0:	e05f      	b.n	a9a2 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    a8e2:	693b      	ldr	r3, [r7, #16]
    a8e4:	7cdb      	ldrb	r3, [r3, #19]
    a8e6:	f003 0308 	and.w	r3, r3, #8
    a8ea:	b2db      	uxtb	r3, r3
    a8ec:	2b00      	cmp	r3, #0
    a8ee:	d001      	beq.n	a8f4 <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    a8f0:	2302      	movs	r3, #2
    a8f2:	e056      	b.n	a9a2 <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    a8f4:	f107 0308 	add.w	r3, r7, #8
    a8f8:	4618      	mov	r0, r3
    a8fa:	4b2e      	ldr	r3, [pc, #184]	; (a9b4 <_usb_d_dev_ep_trans+0x1b4>)
    a8fc:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    a8fe:	693b      	ldr	r3, [r7, #16]
    a900:	7cdb      	ldrb	r3, [r3, #19]
    a902:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a906:	b2db      	uxtb	r3, r3
    a908:	2b00      	cmp	r3, #0
    a90a:	d006      	beq.n	a91a <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    a90c:	f107 0308 	add.w	r3, r7, #8
    a910:	4618      	mov	r0, r3
    a912:	4b29      	ldr	r3, [pc, #164]	; (a9b8 <_usb_d_dev_ep_trans+0x1b8>)
    a914:	4798      	blx	r3
		return USB_BUSY;
    a916:	2301      	movs	r3, #1
    a918:	e043      	b.n	a9a2 <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    a91a:	693a      	ldr	r2, [r7, #16]
    a91c:	7cd3      	ldrb	r3, [r2, #19]
    a91e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a922:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    a924:	f107 0308 	add.w	r3, r7, #8
    a928:	4618      	mov	r0, r3
    a92a:	4b23      	ldr	r3, [pc, #140]	; (a9b8 <_usb_d_dev_ep_trans+0x1b8>)
    a92c:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    a92e:	687b      	ldr	r3, [r7, #4]
    a930:	681a      	ldr	r2, [r3, #0]
    a932:	693b      	ldr	r3, [r7, #16]
    a934:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    a936:	687b      	ldr	r3, [r7, #4]
    a938:	685a      	ldr	r2, [r3, #4]
    a93a:	693b      	ldr	r3, [r7, #16]
    a93c:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    a93e:	693b      	ldr	r3, [r7, #16]
    a940:	2200      	movs	r2, #0
    a942:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    a944:	693a      	ldr	r2, [r7, #16]
    a946:	7cd3      	ldrb	r3, [r2, #19]
    a948:	7d79      	ldrb	r1, [r7, #21]
    a94a:	f361 13c7 	bfi	r3, r1, #7, #1
    a94e:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    a950:	693a      	ldr	r2, [r7, #16]
    a952:	7cd3      	ldrb	r3, [r2, #19]
    a954:	7df9      	ldrb	r1, [r7, #23]
    a956:	f361 1345 	bfi	r3, r1, #5, #1
    a95a:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    a95c:	687b      	ldr	r3, [r7, #4]
    a95e:	7a5b      	ldrb	r3, [r3, #9]
    a960:	2b00      	cmp	r3, #0
    a962:	d007      	beq.n	a974 <_usb_d_dev_ep_trans+0x174>
    a964:	7b7b      	ldrb	r3, [r7, #13]
    a966:	f083 0301 	eor.w	r3, r3, #1
    a96a:	b2db      	uxtb	r3, r3
    a96c:	2b00      	cmp	r3, #0
    a96e:	d001      	beq.n	a974 <_usb_d_dev_ep_trans+0x174>
    a970:	2301      	movs	r3, #1
    a972:	e000      	b.n	a976 <_usb_d_dev_ep_trans+0x176>
    a974:	2300      	movs	r3, #0
    a976:	b2db      	uxtb	r3, r3
    a978:	f003 0301 	and.w	r3, r3, #1
    a97c:	b2d9      	uxtb	r1, r3
    a97e:	693a      	ldr	r2, [r7, #16]
    a980:	7cd3      	ldrb	r3, [r2, #19]
    a982:	f361 1304 	bfi	r3, r1, #4, #1
    a986:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    a988:	7d7b      	ldrb	r3, [r7, #21]
    a98a:	2b00      	cmp	r3, #0
    a98c:	d004      	beq.n	a998 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    a98e:	2100      	movs	r1, #0
    a990:	6938      	ldr	r0, [r7, #16]
    a992:	4b0a      	ldr	r3, [pc, #40]	; (a9bc <_usb_d_dev_ep_trans+0x1bc>)
    a994:	4798      	blx	r3
    a996:	e003      	b.n	a9a0 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    a998:	2100      	movs	r1, #0
    a99a:	6938      	ldr	r0, [r7, #16]
    a99c:	4b08      	ldr	r3, [pc, #32]	; (a9c0 <_usb_d_dev_ep_trans+0x1c0>)
    a99e:	4798      	blx	r3
	}

	return ERR_NONE;
    a9a0:	2300      	movs	r3, #0
}
    a9a2:	4618      	mov	r0, r3
    a9a4:	3718      	adds	r7, #24
    a9a6:	46bd      	mov	sp, r7
    a9a8:	bd80      	pop	{r7, pc}
    a9aa:	bf00      	nop
    a9ac:	00009071 	.word	0x00009071
    a9b0:	20041fff 	.word	0x20041fff
    a9b4:	0000b1cd 	.word	0x0000b1cd
    a9b8:	0000b1f3 	.word	0x0000b1f3
    a9bc:	00009339 	.word	0x00009339
    a9c0:	00009551 	.word	0x00009551

0000a9c4 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    a9c4:	b580      	push	{r7, lr}
    a9c6:	b084      	sub	sp, #16
    a9c8:	af00      	add	r7, sp, #0
    a9ca:	4603      	mov	r3, r0
    a9cc:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    a9ce:	79fb      	ldrb	r3, [r7, #7]
    a9d0:	f003 030f 	and.w	r3, r3, #15
    a9d4:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    a9d6:	79fb      	ldrb	r3, [r7, #7]
    a9d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a9dc:	2b00      	cmp	r3, #0
    a9de:	bf14      	ite	ne
    a9e0:	2301      	movne	r3, #1
    a9e2:	2300      	moveq	r3, #0
    a9e4:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a9e6:	7bba      	ldrb	r2, [r7, #14]
    a9e8:	7bfb      	ldrb	r3, [r7, #15]
    a9ea:	4611      	mov	r1, r2
    a9ec:	4618      	mov	r0, r3
    a9ee:	4b08      	ldr	r3, [pc, #32]	; (aa10 <_usb_d_dev_ep_abort+0x4c>)
    a9f0:	4798      	blx	r3
    a9f2:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    a9f4:	7bfb      	ldrb	r3, [r7, #15]
    a9f6:	2b04      	cmp	r3, #4
    a9f8:	d806      	bhi.n	aa08 <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    a9fa:	7bbb      	ldrb	r3, [r7, #14]
    a9fc:	2202      	movs	r2, #2
    a9fe:	4619      	mov	r1, r3
    aa00:	68b8      	ldr	r0, [r7, #8]
    aa02:	4b04      	ldr	r3, [pc, #16]	; (aa14 <_usb_d_dev_ep_abort+0x50>)
    aa04:	4798      	blx	r3
    aa06:	e000      	b.n	aa0a <_usb_d_dev_ep_abort+0x46>
		return;
    aa08:	bf00      	nop
}
    aa0a:	3710      	adds	r7, #16
    aa0c:	46bd      	mov	sp, r7
    aa0e:	bd80      	pop	{r7, pc}
    aa10:	00009071 	.word	0x00009071
    aa14:	0000a6a9 	.word	0x0000a6a9

0000aa18 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    aa18:	b480      	push	{r7}
    aa1a:	b085      	sub	sp, #20
    aa1c:	af00      	add	r7, sp, #0
    aa1e:	4603      	mov	r3, r0
    aa20:	6039      	str	r1, [r7, #0]
    aa22:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    aa24:	683b      	ldr	r3, [r7, #0]
    aa26:	2b00      	cmp	r3, #0
    aa28:	d001      	beq.n	aa2e <_usb_d_dev_register_callback+0x16>
    aa2a:	683b      	ldr	r3, [r7, #0]
    aa2c:	e000      	b.n	aa30 <_usb_d_dev_register_callback+0x18>
    aa2e:	4b0a      	ldr	r3, [pc, #40]	; (aa58 <_usb_d_dev_register_callback+0x40>)
    aa30:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    aa32:	79fb      	ldrb	r3, [r7, #7]
    aa34:	2b01      	cmp	r3, #1
    aa36:	d103      	bne.n	aa40 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    aa38:	4a08      	ldr	r2, [pc, #32]	; (aa5c <_usb_d_dev_register_callback+0x44>)
    aa3a:	68fb      	ldr	r3, [r7, #12]
    aa3c:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    aa3e:	e005      	b.n	aa4c <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    aa40:	79fb      	ldrb	r3, [r7, #7]
    aa42:	2b00      	cmp	r3, #0
    aa44:	d102      	bne.n	aa4c <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    aa46:	4a05      	ldr	r2, [pc, #20]	; (aa5c <_usb_d_dev_register_callback+0x44>)
    aa48:	68fb      	ldr	r3, [r7, #12]
    aa4a:	6013      	str	r3, [r2, #0]
}
    aa4c:	bf00      	nop
    aa4e:	3714      	adds	r7, #20
    aa50:	46bd      	mov	sp, r7
    aa52:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa56:	4770      	bx	lr
    aa58:	000088f9 	.word	0x000088f9
    aa5c:	200009d0 	.word	0x200009d0

0000aa60 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    aa60:	b480      	push	{r7}
    aa62:	b085      	sub	sp, #20
    aa64:	af00      	add	r7, sp, #0
    aa66:	4603      	mov	r3, r0
    aa68:	6039      	str	r1, [r7, #0]
    aa6a:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    aa6c:	683b      	ldr	r3, [r7, #0]
    aa6e:	2b00      	cmp	r3, #0
    aa70:	d001      	beq.n	aa76 <_usb_d_dev_register_ep_callback+0x16>
    aa72:	683b      	ldr	r3, [r7, #0]
    aa74:	e000      	b.n	aa78 <_usb_d_dev_register_ep_callback+0x18>
    aa76:	4b0e      	ldr	r3, [pc, #56]	; (aab0 <_usb_d_dev_register_ep_callback+0x50>)
    aa78:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    aa7a:	79fb      	ldrb	r3, [r7, #7]
    aa7c:	2b00      	cmp	r3, #0
    aa7e:	d103      	bne.n	aa88 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    aa80:	4a0c      	ldr	r2, [pc, #48]	; (aab4 <_usb_d_dev_register_ep_callback+0x54>)
    aa82:	68fb      	ldr	r3, [r7, #12]
    aa84:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    aa86:	e00c      	b.n	aaa2 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    aa88:	79fb      	ldrb	r3, [r7, #7]
    aa8a:	2b01      	cmp	r3, #1
    aa8c:	d103      	bne.n	aa96 <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    aa8e:	4a09      	ldr	r2, [pc, #36]	; (aab4 <_usb_d_dev_register_ep_callback+0x54>)
    aa90:	68fb      	ldr	r3, [r7, #12]
    aa92:	60d3      	str	r3, [r2, #12]
}
    aa94:	e005      	b.n	aaa2 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    aa96:	79fb      	ldrb	r3, [r7, #7]
    aa98:	2b02      	cmp	r3, #2
    aa9a:	d102      	bne.n	aaa2 <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    aa9c:	4a05      	ldr	r2, [pc, #20]	; (aab4 <_usb_d_dev_register_ep_callback+0x54>)
    aa9e:	68fb      	ldr	r3, [r7, #12]
    aaa0:	6113      	str	r3, [r2, #16]
}
    aaa2:	bf00      	nop
    aaa4:	3714      	adds	r7, #20
    aaa6:	46bd      	mov	sp, r7
    aaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
    aaac:	4770      	bx	lr
    aaae:	bf00      	nop
    aab0:	000088f9 	.word	0x000088f9
    aab4:	200009d0 	.word	0x200009d0

0000aab8 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    aab8:	b580      	push	{r7, lr}
    aaba:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    aabc:	4b01      	ldr	r3, [pc, #4]	; (aac4 <USB_0_Handler+0xc>)
    aabe:	4798      	blx	r3
}
    aac0:	bf00      	nop
    aac2:	bd80      	pop	{r7, pc}
    aac4:	00009d29 	.word	0x00009d29

0000aac8 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    aac8:	b580      	push	{r7, lr}
    aaca:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    aacc:	4b01      	ldr	r3, [pc, #4]	; (aad4 <USB_1_Handler+0xc>)
    aace:	4798      	blx	r3
}
    aad0:	bf00      	nop
    aad2:	bd80      	pop	{r7, pc}
    aad4:	00009d29 	.word	0x00009d29

0000aad8 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    aad8:	b580      	push	{r7, lr}
    aada:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    aadc:	4b01      	ldr	r3, [pc, #4]	; (aae4 <USB_2_Handler+0xc>)
    aade:	4798      	blx	r3
}
    aae0:	bf00      	nop
    aae2:	bd80      	pop	{r7, pc}
    aae4:	00009d29 	.word	0x00009d29

0000aae8 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    aae8:	b580      	push	{r7, lr}
    aaea:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    aaec:	4b01      	ldr	r3, [pc, #4]	; (aaf4 <USB_3_Handler+0xc>)
    aaee:	4798      	blx	r3
}
    aaf0:	bf00      	nop
    aaf2:	bd80      	pop	{r7, pc}
    aaf4:	00009d29 	.word	0x00009d29

0000aaf8 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    aaf8:	b480      	push	{r7}
    aafa:	b083      	sub	sp, #12
    aafc:	af00      	add	r7, sp, #0
    aafe:	6078      	str	r0, [r7, #4]
    ab00:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    ab02:	bf00      	nop
    ab04:	687b      	ldr	r3, [r7, #4]
    ab06:	689a      	ldr	r2, [r3, #8]
    ab08:	683b      	ldr	r3, [r7, #0]
    ab0a:	4013      	ands	r3, r2
    ab0c:	2b00      	cmp	r3, #0
    ab0e:	d1f9      	bne.n	ab04 <hri_wdt_wait_for_sync+0xc>
	};
}
    ab10:	bf00      	nop
    ab12:	370c      	adds	r7, #12
    ab14:	46bd      	mov	sp, r7
    ab16:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab1a:	4770      	bx	lr

0000ab1c <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    ab1c:	b580      	push	{r7, lr}
    ab1e:	b084      	sub	sp, #16
    ab20:	af00      	add	r7, sp, #0
    ab22:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    ab24:	210e      	movs	r1, #14
    ab26:	6878      	ldr	r0, [r7, #4]
    ab28:	4b0a      	ldr	r3, [pc, #40]	; (ab54 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    ab2a:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    ab2c:	687b      	ldr	r3, [r7, #4]
    ab2e:	781b      	ldrb	r3, [r3, #0]
    ab30:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    ab32:	7bfb      	ldrb	r3, [r7, #15]
    ab34:	085b      	lsrs	r3, r3, #1
    ab36:	b2db      	uxtb	r3, r3
    ab38:	f003 0301 	and.w	r3, r3, #1
    ab3c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    ab3e:	7bfb      	ldrb	r3, [r7, #15]
    ab40:	2b00      	cmp	r3, #0
    ab42:	bf14      	ite	ne
    ab44:	2301      	movne	r3, #1
    ab46:	2300      	moveq	r3, #0
    ab48:	b2db      	uxtb	r3, r3
}
    ab4a:	4618      	mov	r0, r3
    ab4c:	3710      	adds	r7, #16
    ab4e:	46bd      	mov	sp, r7
    ab50:	bd80      	pop	{r7, pc}
    ab52:	bf00      	nop
    ab54:	0000aaf9 	.word	0x0000aaf9

0000ab58 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    ab58:	b580      	push	{r7, lr}
    ab5a:	b082      	sub	sp, #8
    ab5c:	af00      	add	r7, sp, #0
    ab5e:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    ab60:	687b      	ldr	r3, [r7, #4]
    ab62:	781b      	ldrb	r3, [r3, #0]
    ab64:	b2db      	uxtb	r3, r3
    ab66:	f023 0304 	bic.w	r3, r3, #4
    ab6a:	b2da      	uxtb	r2, r3
    ab6c:	687b      	ldr	r3, [r7, #4]
    ab6e:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    ab70:	210e      	movs	r1, #14
    ab72:	6878      	ldr	r0, [r7, #4]
    ab74:	4b02      	ldr	r3, [pc, #8]	; (ab80 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    ab76:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    ab78:	bf00      	nop
    ab7a:	3708      	adds	r7, #8
    ab7c:	46bd      	mov	sp, r7
    ab7e:	bd80      	pop	{r7, pc}
    ab80:	0000aaf9 	.word	0x0000aaf9

0000ab84 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    ab84:	b580      	push	{r7, lr}
    ab86:	b084      	sub	sp, #16
    ab88:	af00      	add	r7, sp, #0
    ab8a:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    ab8c:	210e      	movs	r1, #14
    ab8e:	6878      	ldr	r0, [r7, #4]
    ab90:	4b08      	ldr	r3, [pc, #32]	; (abb4 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    ab92:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    ab94:	687b      	ldr	r3, [r7, #4]
    ab96:	781b      	ldrb	r3, [r3, #0]
    ab98:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    ab9a:	7bfb      	ldrb	r3, [r7, #15]
    ab9c:	09db      	lsrs	r3, r3, #7
    ab9e:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    aba0:	7bfb      	ldrb	r3, [r7, #15]
    aba2:	2b00      	cmp	r3, #0
    aba4:	bf14      	ite	ne
    aba6:	2301      	movne	r3, #1
    aba8:	2300      	moveq	r3, #0
    abaa:	b2db      	uxtb	r3, r3
}
    abac:	4618      	mov	r0, r3
    abae:	3710      	adds	r7, #16
    abb0:	46bd      	mov	sp, r7
    abb2:	bd80      	pop	{r7, pc}
    abb4:	0000aaf9 	.word	0x0000aaf9

0000abb8 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    abb8:	b480      	push	{r7}
    abba:	b085      	sub	sp, #20
    abbc:	af00      	add	r7, sp, #0
    abbe:	6078      	str	r0, [r7, #4]
    abc0:	460b      	mov	r3, r1
    abc2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    abc4:	687b      	ldr	r3, [r7, #4]
    abc6:	785b      	ldrb	r3, [r3, #1]
    abc8:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    abca:	7bfb      	ldrb	r3, [r7, #15]
    abcc:	f023 030f 	bic.w	r3, r3, #15
    abd0:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    abd2:	78fb      	ldrb	r3, [r7, #3]
    abd4:	f003 030f 	and.w	r3, r3, #15
    abd8:	b2da      	uxtb	r2, r3
    abda:	7bfb      	ldrb	r3, [r7, #15]
    abdc:	4313      	orrs	r3, r2
    abde:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    abe0:	687b      	ldr	r3, [r7, #4]
    abe2:	7bfa      	ldrb	r2, [r7, #15]
    abe4:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    abe6:	bf00      	nop
    abe8:	3714      	adds	r7, #20
    abea:	46bd      	mov	sp, r7
    abec:	f85d 7b04 	ldr.w	r7, [sp], #4
    abf0:	4770      	bx	lr
	...

0000abf4 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    abf4:	b580      	push	{r7, lr}
    abf6:	b082      	sub	sp, #8
    abf8:	af00      	add	r7, sp, #0
    abfa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    abfc:	687b      	ldr	r3, [r7, #4]
    abfe:	2b00      	cmp	r3, #0
    ac00:	d005      	beq.n	ac0e <_wdt_init+0x1a>
    ac02:	687b      	ldr	r3, [r7, #4]
    ac04:	681b      	ldr	r3, [r3, #0]
    ac06:	2b00      	cmp	r3, #0
    ac08:	d001      	beq.n	ac0e <_wdt_init+0x1a>
    ac0a:	2301      	movs	r3, #1
    ac0c:	e000      	b.n	ac10 <_wdt_init+0x1c>
    ac0e:	2300      	movs	r3, #0
    ac10:	f003 0301 	and.w	r3, r3, #1
    ac14:	b2db      	uxtb	r3, r3
    ac16:	2250      	movs	r2, #80	; 0x50
    ac18:	4913      	ldr	r1, [pc, #76]	; (ac68 <_wdt_init+0x74>)
    ac1a:	4618      	mov	r0, r3
    ac1c:	4b13      	ldr	r3, [pc, #76]	; (ac6c <_wdt_init+0x78>)
    ac1e:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    ac20:	687b      	ldr	r3, [r7, #4]
    ac22:	681b      	ldr	r3, [r3, #0]
    ac24:	4618      	mov	r0, r3
    ac26:	4b12      	ldr	r3, [pc, #72]	; (ac70 <_wdt_init+0x7c>)
    ac28:	4798      	blx	r3
    ac2a:	4603      	mov	r3, r0
    ac2c:	2b00      	cmp	r3, #0
    ac2e:	d107      	bne.n	ac40 <_wdt_init+0x4c>
    ac30:	687b      	ldr	r3, [r7, #4]
    ac32:	681b      	ldr	r3, [r3, #0]
    ac34:	4618      	mov	r0, r3
    ac36:	4b0f      	ldr	r3, [pc, #60]	; (ac74 <_wdt_init+0x80>)
    ac38:	4798      	blx	r3
    ac3a:	4603      	mov	r3, r0
    ac3c:	2b00      	cmp	r3, #0
    ac3e:	d002      	beq.n	ac46 <_wdt_init+0x52>
		return ERR_DENIED;
    ac40:	f06f 0310 	mvn.w	r3, #16
    ac44:	e00b      	b.n	ac5e <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    ac46:	687b      	ldr	r3, [r7, #4]
    ac48:	681b      	ldr	r3, [r3, #0]
    ac4a:	4618      	mov	r0, r3
    ac4c:	4b0a      	ldr	r3, [pc, #40]	; (ac78 <_wdt_init+0x84>)
    ac4e:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    ac50:	687b      	ldr	r3, [r7, #4]
    ac52:	681b      	ldr	r3, [r3, #0]
    ac54:	210b      	movs	r1, #11
    ac56:	4618      	mov	r0, r3
    ac58:	4b08      	ldr	r3, [pc, #32]	; (ac7c <_wdt_init+0x88>)
    ac5a:	4798      	blx	r3
	}

	return ERR_NONE;
    ac5c:	2300      	movs	r3, #0
}
    ac5e:	4618      	mov	r0, r3
    ac60:	3708      	adds	r7, #8
    ac62:	46bd      	mov	sp, r7
    ac64:	bd80      	pop	{r7, pc}
    ac66:	bf00      	nop
    ac68:	0000e654 	.word	0x0000e654
    ac6c:	000034fd 	.word	0x000034fd
    ac70:	0000ab85 	.word	0x0000ab85
    ac74:	0000ab1d 	.word	0x0000ab1d
    ac78:	0000ab59 	.word	0x0000ab59
    ac7c:	0000abb9 	.word	0x0000abb9

0000ac80 <hri_port_set_DIR_reg>:
{
    ac80:	b480      	push	{r7}
    ac82:	b085      	sub	sp, #20
    ac84:	af00      	add	r7, sp, #0
    ac86:	60f8      	str	r0, [r7, #12]
    ac88:	460b      	mov	r3, r1
    ac8a:	607a      	str	r2, [r7, #4]
    ac8c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    ac8e:	7afb      	ldrb	r3, [r7, #11]
    ac90:	68fa      	ldr	r2, [r7, #12]
    ac92:	01db      	lsls	r3, r3, #7
    ac94:	4413      	add	r3, r2
    ac96:	3308      	adds	r3, #8
    ac98:	687a      	ldr	r2, [r7, #4]
    ac9a:	601a      	str	r2, [r3, #0]
}
    ac9c:	bf00      	nop
    ac9e:	3714      	adds	r7, #20
    aca0:	46bd      	mov	sp, r7
    aca2:	f85d 7b04 	ldr.w	r7, [sp], #4
    aca6:	4770      	bx	lr

0000aca8 <hri_port_clear_DIR_reg>:
{
    aca8:	b480      	push	{r7}
    acaa:	b085      	sub	sp, #20
    acac:	af00      	add	r7, sp, #0
    acae:	60f8      	str	r0, [r7, #12]
    acb0:	460b      	mov	r3, r1
    acb2:	607a      	str	r2, [r7, #4]
    acb4:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    acb6:	7afb      	ldrb	r3, [r7, #11]
    acb8:	68fa      	ldr	r2, [r7, #12]
    acba:	01db      	lsls	r3, r3, #7
    acbc:	4413      	add	r3, r2
    acbe:	3304      	adds	r3, #4
    acc0:	687a      	ldr	r2, [r7, #4]
    acc2:	601a      	str	r2, [r3, #0]
}
    acc4:	bf00      	nop
    acc6:	3714      	adds	r7, #20
    acc8:	46bd      	mov	sp, r7
    acca:	f85d 7b04 	ldr.w	r7, [sp], #4
    acce:	4770      	bx	lr

0000acd0 <hri_port_set_OUT_reg>:
{
    acd0:	b480      	push	{r7}
    acd2:	b085      	sub	sp, #20
    acd4:	af00      	add	r7, sp, #0
    acd6:	60f8      	str	r0, [r7, #12]
    acd8:	460b      	mov	r3, r1
    acda:	607a      	str	r2, [r7, #4]
    acdc:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    acde:	7afb      	ldrb	r3, [r7, #11]
    ace0:	68fa      	ldr	r2, [r7, #12]
    ace2:	01db      	lsls	r3, r3, #7
    ace4:	4413      	add	r3, r2
    ace6:	3318      	adds	r3, #24
    ace8:	687a      	ldr	r2, [r7, #4]
    acea:	601a      	str	r2, [r3, #0]
}
    acec:	bf00      	nop
    acee:	3714      	adds	r7, #20
    acf0:	46bd      	mov	sp, r7
    acf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    acf6:	4770      	bx	lr

0000acf8 <hri_port_clear_OUT_reg>:
{
    acf8:	b480      	push	{r7}
    acfa:	b085      	sub	sp, #20
    acfc:	af00      	add	r7, sp, #0
    acfe:	60f8      	str	r0, [r7, #12]
    ad00:	460b      	mov	r3, r1
    ad02:	607a      	str	r2, [r7, #4]
    ad04:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    ad06:	7afb      	ldrb	r3, [r7, #11]
    ad08:	68fa      	ldr	r2, [r7, #12]
    ad0a:	01db      	lsls	r3, r3, #7
    ad0c:	4413      	add	r3, r2
    ad0e:	3314      	adds	r3, #20
    ad10:	687a      	ldr	r2, [r7, #4]
    ad12:	601a      	str	r2, [r3, #0]
}
    ad14:	bf00      	nop
    ad16:	3714      	adds	r7, #20
    ad18:	46bd      	mov	sp, r7
    ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad1e:	4770      	bx	lr

0000ad20 <hri_port_write_PMUX_PMUXE_bf>:
{
    ad20:	b480      	push	{r7}
    ad22:	b085      	sub	sp, #20
    ad24:	af00      	add	r7, sp, #0
    ad26:	6078      	str	r0, [r7, #4]
    ad28:	4608      	mov	r0, r1
    ad2a:	4611      	mov	r1, r2
    ad2c:	461a      	mov	r2, r3
    ad2e:	4603      	mov	r3, r0
    ad30:	70fb      	strb	r3, [r7, #3]
    ad32:	460b      	mov	r3, r1
    ad34:	70bb      	strb	r3, [r7, #2]
    ad36:	4613      	mov	r3, r2
    ad38:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    ad3a:	78fa      	ldrb	r2, [r7, #3]
    ad3c:	78bb      	ldrb	r3, [r7, #2]
    ad3e:	6879      	ldr	r1, [r7, #4]
    ad40:	01d2      	lsls	r2, r2, #7
    ad42:	440a      	add	r2, r1
    ad44:	4413      	add	r3, r2
    ad46:	3330      	adds	r3, #48	; 0x30
    ad48:	781b      	ldrb	r3, [r3, #0]
    ad4a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    ad4c:	7bfb      	ldrb	r3, [r7, #15]
    ad4e:	f023 030f 	bic.w	r3, r3, #15
    ad52:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    ad54:	787b      	ldrb	r3, [r7, #1]
    ad56:	f003 030f 	and.w	r3, r3, #15
    ad5a:	b2da      	uxtb	r2, r3
    ad5c:	7bfb      	ldrb	r3, [r7, #15]
    ad5e:	4313      	orrs	r3, r2
    ad60:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    ad62:	78fa      	ldrb	r2, [r7, #3]
    ad64:	78bb      	ldrb	r3, [r7, #2]
    ad66:	6879      	ldr	r1, [r7, #4]
    ad68:	01d2      	lsls	r2, r2, #7
    ad6a:	440a      	add	r2, r1
    ad6c:	4413      	add	r3, r2
    ad6e:	3330      	adds	r3, #48	; 0x30
    ad70:	7bfa      	ldrb	r2, [r7, #15]
    ad72:	701a      	strb	r2, [r3, #0]
}
    ad74:	bf00      	nop
    ad76:	3714      	adds	r7, #20
    ad78:	46bd      	mov	sp, r7
    ad7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad7e:	4770      	bx	lr

0000ad80 <hri_port_write_PMUX_PMUXO_bf>:
{
    ad80:	b480      	push	{r7}
    ad82:	b085      	sub	sp, #20
    ad84:	af00      	add	r7, sp, #0
    ad86:	6078      	str	r0, [r7, #4]
    ad88:	4608      	mov	r0, r1
    ad8a:	4611      	mov	r1, r2
    ad8c:	461a      	mov	r2, r3
    ad8e:	4603      	mov	r3, r0
    ad90:	70fb      	strb	r3, [r7, #3]
    ad92:	460b      	mov	r3, r1
    ad94:	70bb      	strb	r3, [r7, #2]
    ad96:	4613      	mov	r3, r2
    ad98:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    ad9a:	78fa      	ldrb	r2, [r7, #3]
    ad9c:	78bb      	ldrb	r3, [r7, #2]
    ad9e:	6879      	ldr	r1, [r7, #4]
    ada0:	01d2      	lsls	r2, r2, #7
    ada2:	440a      	add	r2, r1
    ada4:	4413      	add	r3, r2
    ada6:	3330      	adds	r3, #48	; 0x30
    ada8:	781b      	ldrb	r3, [r3, #0]
    adaa:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    adac:	7bfb      	ldrb	r3, [r7, #15]
    adae:	f003 030f 	and.w	r3, r3, #15
    adb2:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    adb4:	787b      	ldrb	r3, [r7, #1]
    adb6:	011b      	lsls	r3, r3, #4
    adb8:	b2da      	uxtb	r2, r3
    adba:	7bfb      	ldrb	r3, [r7, #15]
    adbc:	4313      	orrs	r3, r2
    adbe:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    adc0:	78fa      	ldrb	r2, [r7, #3]
    adc2:	78bb      	ldrb	r3, [r7, #2]
    adc4:	6879      	ldr	r1, [r7, #4]
    adc6:	01d2      	lsls	r2, r2, #7
    adc8:	440a      	add	r2, r1
    adca:	4413      	add	r3, r2
    adcc:	3330      	adds	r3, #48	; 0x30
    adce:	7bfa      	ldrb	r2, [r7, #15]
    add0:	701a      	strb	r2, [r3, #0]
}
    add2:	bf00      	nop
    add4:	3714      	adds	r7, #20
    add6:	46bd      	mov	sp, r7
    add8:	f85d 7b04 	ldr.w	r7, [sp], #4
    addc:	4770      	bx	lr

0000adde <hri_port_write_PINCFG_PMUXEN_bit>:
{
    adde:	b480      	push	{r7}
    ade0:	b085      	sub	sp, #20
    ade2:	af00      	add	r7, sp, #0
    ade4:	6078      	str	r0, [r7, #4]
    ade6:	4608      	mov	r0, r1
    ade8:	4611      	mov	r1, r2
    adea:	461a      	mov	r2, r3
    adec:	4603      	mov	r3, r0
    adee:	70fb      	strb	r3, [r7, #3]
    adf0:	460b      	mov	r3, r1
    adf2:	70bb      	strb	r3, [r7, #2]
    adf4:	4613      	mov	r3, r2
    adf6:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    adf8:	78fa      	ldrb	r2, [r7, #3]
    adfa:	78bb      	ldrb	r3, [r7, #2]
    adfc:	6879      	ldr	r1, [r7, #4]
    adfe:	01d2      	lsls	r2, r2, #7
    ae00:	440a      	add	r2, r1
    ae02:	4413      	add	r3, r2
    ae04:	3340      	adds	r3, #64	; 0x40
    ae06:	781b      	ldrb	r3, [r3, #0]
    ae08:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    ae0a:	7bfb      	ldrb	r3, [r7, #15]
    ae0c:	f023 0301 	bic.w	r3, r3, #1
    ae10:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    ae12:	787a      	ldrb	r2, [r7, #1]
    ae14:	7bfb      	ldrb	r3, [r7, #15]
    ae16:	4313      	orrs	r3, r2
    ae18:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    ae1a:	78fa      	ldrb	r2, [r7, #3]
    ae1c:	78bb      	ldrb	r3, [r7, #2]
    ae1e:	6879      	ldr	r1, [r7, #4]
    ae20:	01d2      	lsls	r2, r2, #7
    ae22:	440a      	add	r2, r1
    ae24:	4413      	add	r3, r2
    ae26:	3340      	adds	r3, #64	; 0x40
    ae28:	7bfa      	ldrb	r2, [r7, #15]
    ae2a:	701a      	strb	r2, [r3, #0]
}
    ae2c:	bf00      	nop
    ae2e:	3714      	adds	r7, #20
    ae30:	46bd      	mov	sp, r7
    ae32:	f85d 7b04 	ldr.w	r7, [sp], #4
    ae36:	4770      	bx	lr

0000ae38 <hri_port_write_WRCONFIG_reg>:
{
    ae38:	b480      	push	{r7}
    ae3a:	b085      	sub	sp, #20
    ae3c:	af00      	add	r7, sp, #0
    ae3e:	60f8      	str	r0, [r7, #12]
    ae40:	460b      	mov	r3, r1
    ae42:	607a      	str	r2, [r7, #4]
    ae44:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    ae46:	7afb      	ldrb	r3, [r7, #11]
    ae48:	68fa      	ldr	r2, [r7, #12]
    ae4a:	01db      	lsls	r3, r3, #7
    ae4c:	4413      	add	r3, r2
    ae4e:	3328      	adds	r3, #40	; 0x28
    ae50:	687a      	ldr	r2, [r7, #4]
    ae52:	601a      	str	r2, [r3, #0]
}
    ae54:	bf00      	nop
    ae56:	3714      	adds	r7, #20
    ae58:	46bd      	mov	sp, r7
    ae5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ae5e:	4770      	bx	lr

0000ae60 <_gpio_set_direction>:
{
    ae60:	b580      	push	{r7, lr}
    ae62:	b082      	sub	sp, #8
    ae64:	af00      	add	r7, sp, #0
    ae66:	4603      	mov	r3, r0
    ae68:	6039      	str	r1, [r7, #0]
    ae6a:	71fb      	strb	r3, [r7, #7]
    ae6c:	4613      	mov	r3, r2
    ae6e:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    ae70:	79bb      	ldrb	r3, [r7, #6]
    ae72:	2b01      	cmp	r3, #1
    ae74:	d01c      	beq.n	aeb0 <_gpio_set_direction+0x50>
    ae76:	2b02      	cmp	r3, #2
    ae78:	d037      	beq.n	aeea <_gpio_set_direction+0x8a>
    ae7a:	2b00      	cmp	r3, #0
    ae7c:	d14e      	bne.n	af1c <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    ae7e:	79fb      	ldrb	r3, [r7, #7]
    ae80:	683a      	ldr	r2, [r7, #0]
    ae82:	4619      	mov	r1, r3
    ae84:	482a      	ldr	r0, [pc, #168]	; (af30 <_gpio_set_direction+0xd0>)
    ae86:	4b2b      	ldr	r3, [pc, #172]	; (af34 <_gpio_set_direction+0xd4>)
    ae88:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    ae8a:	683b      	ldr	r3, [r7, #0]
    ae8c:	b29b      	uxth	r3, r3
    ae8e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    ae92:	79fb      	ldrb	r3, [r7, #7]
    ae94:	4619      	mov	r1, r3
    ae96:	4826      	ldr	r0, [pc, #152]	; (af30 <_gpio_set_direction+0xd0>)
    ae98:	4b27      	ldr	r3, [pc, #156]	; (af38 <_gpio_set_direction+0xd8>)
    ae9a:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    ae9c:	683b      	ldr	r3, [r7, #0]
    ae9e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    aea0:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    aea4:	79fb      	ldrb	r3, [r7, #7]
    aea6:	4619      	mov	r1, r3
    aea8:	4821      	ldr	r0, [pc, #132]	; (af30 <_gpio_set_direction+0xd0>)
    aeaa:	4b23      	ldr	r3, [pc, #140]	; (af38 <_gpio_set_direction+0xd8>)
    aeac:	4798      	blx	r3
		break;
    aeae:	e03a      	b.n	af26 <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    aeb0:	79fb      	ldrb	r3, [r7, #7]
    aeb2:	683a      	ldr	r2, [r7, #0]
    aeb4:	4619      	mov	r1, r3
    aeb6:	481e      	ldr	r0, [pc, #120]	; (af30 <_gpio_set_direction+0xd0>)
    aeb8:	4b1e      	ldr	r3, [pc, #120]	; (af34 <_gpio_set_direction+0xd4>)
    aeba:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    aebc:	683b      	ldr	r3, [r7, #0]
    aebe:	b29b      	uxth	r3, r3
    aec0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    aec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    aec8:	79f9      	ldrb	r1, [r7, #7]
    aeca:	461a      	mov	r2, r3
    aecc:	4818      	ldr	r0, [pc, #96]	; (af30 <_gpio_set_direction+0xd0>)
    aece:	4b1a      	ldr	r3, [pc, #104]	; (af38 <_gpio_set_direction+0xd8>)
    aed0:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    aed2:	683b      	ldr	r3, [r7, #0]
    aed4:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    aed6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    aeda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    aede:	79f9      	ldrb	r1, [r7, #7]
    aee0:	461a      	mov	r2, r3
    aee2:	4813      	ldr	r0, [pc, #76]	; (af30 <_gpio_set_direction+0xd0>)
    aee4:	4b14      	ldr	r3, [pc, #80]	; (af38 <_gpio_set_direction+0xd8>)
    aee6:	4798      	blx	r3
		break;
    aee8:	e01d      	b.n	af26 <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    aeea:	79fb      	ldrb	r3, [r7, #7]
    aeec:	683a      	ldr	r2, [r7, #0]
    aeee:	4619      	mov	r1, r3
    aef0:	480f      	ldr	r0, [pc, #60]	; (af30 <_gpio_set_direction+0xd0>)
    aef2:	4b12      	ldr	r3, [pc, #72]	; (af3c <_gpio_set_direction+0xdc>)
    aef4:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    aef6:	683b      	ldr	r3, [r7, #0]
    aef8:	b29b      	uxth	r3, r3
    aefa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    aefe:	79fb      	ldrb	r3, [r7, #7]
    af00:	4619      	mov	r1, r3
    af02:	480b      	ldr	r0, [pc, #44]	; (af30 <_gpio_set_direction+0xd0>)
    af04:	4b0c      	ldr	r3, [pc, #48]	; (af38 <_gpio_set_direction+0xd8>)
    af06:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    af08:	683b      	ldr	r3, [r7, #0]
    af0a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    af0c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    af10:	79fb      	ldrb	r3, [r7, #7]
    af12:	4619      	mov	r1, r3
    af14:	4806      	ldr	r0, [pc, #24]	; (af30 <_gpio_set_direction+0xd0>)
    af16:	4b08      	ldr	r3, [pc, #32]	; (af38 <_gpio_set_direction+0xd8>)
    af18:	4798      	blx	r3
		break;
    af1a:	e004      	b.n	af26 <_gpio_set_direction+0xc6>
		ASSERT(false);
    af1c:	2246      	movs	r2, #70	; 0x46
    af1e:	4908      	ldr	r1, [pc, #32]	; (af40 <_gpio_set_direction+0xe0>)
    af20:	2000      	movs	r0, #0
    af22:	4b08      	ldr	r3, [pc, #32]	; (af44 <_gpio_set_direction+0xe4>)
    af24:	4798      	blx	r3
}
    af26:	bf00      	nop
    af28:	3708      	adds	r7, #8
    af2a:	46bd      	mov	sp, r7
    af2c:	bd80      	pop	{r7, pc}
    af2e:	bf00      	nop
    af30:	41008000 	.word	0x41008000
    af34:	0000aca9 	.word	0x0000aca9
    af38:	0000ae39 	.word	0x0000ae39
    af3c:	0000ac81 	.word	0x0000ac81
    af40:	0000e66c 	.word	0x0000e66c
    af44:	000034fd 	.word	0x000034fd

0000af48 <_gpio_set_level>:
{
    af48:	b580      	push	{r7, lr}
    af4a:	b082      	sub	sp, #8
    af4c:	af00      	add	r7, sp, #0
    af4e:	4603      	mov	r3, r0
    af50:	6039      	str	r1, [r7, #0]
    af52:	71fb      	strb	r3, [r7, #7]
    af54:	4613      	mov	r3, r2
    af56:	71bb      	strb	r3, [r7, #6]
	if (level) {
    af58:	79bb      	ldrb	r3, [r7, #6]
    af5a:	2b00      	cmp	r3, #0
    af5c:	d006      	beq.n	af6c <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    af5e:	79fb      	ldrb	r3, [r7, #7]
    af60:	683a      	ldr	r2, [r7, #0]
    af62:	4619      	mov	r1, r3
    af64:	4806      	ldr	r0, [pc, #24]	; (af80 <_gpio_set_level+0x38>)
    af66:	4b07      	ldr	r3, [pc, #28]	; (af84 <_gpio_set_level+0x3c>)
    af68:	4798      	blx	r3
}
    af6a:	e005      	b.n	af78 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    af6c:	79fb      	ldrb	r3, [r7, #7]
    af6e:	683a      	ldr	r2, [r7, #0]
    af70:	4619      	mov	r1, r3
    af72:	4803      	ldr	r0, [pc, #12]	; (af80 <_gpio_set_level+0x38>)
    af74:	4b04      	ldr	r3, [pc, #16]	; (af88 <_gpio_set_level+0x40>)
    af76:	4798      	blx	r3
}
    af78:	bf00      	nop
    af7a:	3708      	adds	r7, #8
    af7c:	46bd      	mov	sp, r7
    af7e:	bd80      	pop	{r7, pc}
    af80:	41008000 	.word	0x41008000
    af84:	0000acd1 	.word	0x0000acd1
    af88:	0000acf9 	.word	0x0000acf9

0000af8c <_gpio_set_pin_function>:
{
    af8c:	b590      	push	{r4, r7, lr}
    af8e:	b085      	sub	sp, #20
    af90:	af00      	add	r7, sp, #0
    af92:	6078      	str	r0, [r7, #4]
    af94:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    af96:	687b      	ldr	r3, [r7, #4]
    af98:	095b      	lsrs	r3, r3, #5
    af9a:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    af9c:	687b      	ldr	r3, [r7, #4]
    af9e:	b2db      	uxtb	r3, r3
    afa0:	f003 031f 	and.w	r3, r3, #31
    afa4:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    afa6:	683b      	ldr	r3, [r7, #0]
    afa8:	f1b3 3fff 	cmp.w	r3, #4294967295
    afac:	d106      	bne.n	afbc <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    afae:	7bba      	ldrb	r2, [r7, #14]
    afb0:	7bf9      	ldrb	r1, [r7, #15]
    afb2:	2300      	movs	r3, #0
    afb4:	4812      	ldr	r0, [pc, #72]	; (b000 <_gpio_set_pin_function+0x74>)
    afb6:	4c13      	ldr	r4, [pc, #76]	; (b004 <_gpio_set_pin_function+0x78>)
    afb8:	47a0      	blx	r4
}
    afba:	e01d      	b.n	aff8 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    afbc:	7bba      	ldrb	r2, [r7, #14]
    afbe:	7bf9      	ldrb	r1, [r7, #15]
    afc0:	2301      	movs	r3, #1
    afc2:	480f      	ldr	r0, [pc, #60]	; (b000 <_gpio_set_pin_function+0x74>)
    afc4:	4c0f      	ldr	r4, [pc, #60]	; (b004 <_gpio_set_pin_function+0x78>)
    afc6:	47a0      	blx	r4
		if (pin & 1) {
    afc8:	7bbb      	ldrb	r3, [r7, #14]
    afca:	f003 0301 	and.w	r3, r3, #1
    afce:	2b00      	cmp	r3, #0
    afd0:	d009      	beq.n	afe6 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    afd2:	7bbb      	ldrb	r3, [r7, #14]
    afd4:	085b      	lsrs	r3, r3, #1
    afd6:	b2da      	uxtb	r2, r3
    afd8:	683b      	ldr	r3, [r7, #0]
    afda:	b2db      	uxtb	r3, r3
    afdc:	7bf9      	ldrb	r1, [r7, #15]
    afde:	4808      	ldr	r0, [pc, #32]	; (b000 <_gpio_set_pin_function+0x74>)
    afe0:	4c09      	ldr	r4, [pc, #36]	; (b008 <_gpio_set_pin_function+0x7c>)
    afe2:	47a0      	blx	r4
}
    afe4:	e008      	b.n	aff8 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    afe6:	7bbb      	ldrb	r3, [r7, #14]
    afe8:	085b      	lsrs	r3, r3, #1
    afea:	b2da      	uxtb	r2, r3
    afec:	683b      	ldr	r3, [r7, #0]
    afee:	b2db      	uxtb	r3, r3
    aff0:	7bf9      	ldrb	r1, [r7, #15]
    aff2:	4803      	ldr	r0, [pc, #12]	; (b000 <_gpio_set_pin_function+0x74>)
    aff4:	4c05      	ldr	r4, [pc, #20]	; (b00c <_gpio_set_pin_function+0x80>)
    aff6:	47a0      	blx	r4
}
    aff8:	bf00      	nop
    affa:	3714      	adds	r7, #20
    affc:	46bd      	mov	sp, r7
    affe:	bd90      	pop	{r4, r7, pc}
    b000:	41008000 	.word	0x41008000
    b004:	0000addf 	.word	0x0000addf
    b008:	0000ad81 	.word	0x0000ad81
    b00c:	0000ad21 	.word	0x0000ad21

0000b010 <gpio_set_pin_function>:
{
    b010:	b580      	push	{r7, lr}
    b012:	b082      	sub	sp, #8
    b014:	af00      	add	r7, sp, #0
    b016:	6078      	str	r0, [r7, #4]
    b018:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    b01a:	6839      	ldr	r1, [r7, #0]
    b01c:	6878      	ldr	r0, [r7, #4]
    b01e:	4b03      	ldr	r3, [pc, #12]	; (b02c <gpio_set_pin_function+0x1c>)
    b020:	4798      	blx	r3
}
    b022:	bf00      	nop
    b024:	3708      	adds	r7, #8
    b026:	46bd      	mov	sp, r7
    b028:	bd80      	pop	{r7, pc}
    b02a:	bf00      	nop
    b02c:	0000af8d 	.word	0x0000af8d

0000b030 <gpio_set_pin_direction>:
{
    b030:	b580      	push	{r7, lr}
    b032:	b082      	sub	sp, #8
    b034:	af00      	add	r7, sp, #0
    b036:	4603      	mov	r3, r0
    b038:	460a      	mov	r2, r1
    b03a:	71fb      	strb	r3, [r7, #7]
    b03c:	4613      	mov	r3, r2
    b03e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    b040:	79fb      	ldrb	r3, [r7, #7]
    b042:	095b      	lsrs	r3, r3, #5
    b044:	b2d8      	uxtb	r0, r3
    b046:	79fb      	ldrb	r3, [r7, #7]
    b048:	f003 031f 	and.w	r3, r3, #31
    b04c:	2201      	movs	r2, #1
    b04e:	fa02 f303 	lsl.w	r3, r2, r3
    b052:	79ba      	ldrb	r2, [r7, #6]
    b054:	4619      	mov	r1, r3
    b056:	4b03      	ldr	r3, [pc, #12]	; (b064 <gpio_set_pin_direction+0x34>)
    b058:	4798      	blx	r3
}
    b05a:	bf00      	nop
    b05c:	3708      	adds	r7, #8
    b05e:	46bd      	mov	sp, r7
    b060:	bd80      	pop	{r7, pc}
    b062:	bf00      	nop
    b064:	0000ae61 	.word	0x0000ae61

0000b068 <gpio_set_pin_level>:
{
    b068:	b580      	push	{r7, lr}
    b06a:	b082      	sub	sp, #8
    b06c:	af00      	add	r7, sp, #0
    b06e:	4603      	mov	r3, r0
    b070:	460a      	mov	r2, r1
    b072:	71fb      	strb	r3, [r7, #7]
    b074:	4613      	mov	r3, r2
    b076:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    b078:	79fb      	ldrb	r3, [r7, #7]
    b07a:	095b      	lsrs	r3, r3, #5
    b07c:	b2d8      	uxtb	r0, r3
    b07e:	79fb      	ldrb	r3, [r7, #7]
    b080:	f003 031f 	and.w	r3, r3, #31
    b084:	2201      	movs	r2, #1
    b086:	fa02 f303 	lsl.w	r3, r2, r3
    b08a:	79ba      	ldrb	r2, [r7, #6]
    b08c:	4619      	mov	r1, r3
    b08e:	4b03      	ldr	r3, [pc, #12]	; (b09c <gpio_set_pin_level+0x34>)
    b090:	4798      	blx	r3
}
    b092:	bf00      	nop
    b094:	3708      	adds	r7, #8
    b096:	46bd      	mov	sp, r7
    b098:	bd80      	pop	{r7, pc}
    b09a:	bf00      	nop
    b09c:	0000af49 	.word	0x0000af49

0000b0a0 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    b0a0:	b580      	push	{r7, lr}
    b0a2:	b082      	sub	sp, #8
    b0a4:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    b0a6:	2100      	movs	r1, #0
    b0a8:	2008      	movs	r0, #8
    b0aa:	4b24      	ldr	r3, [pc, #144]	; (b13c <QSPI_N25Q256_exit_xip+0x9c>)
    b0ac:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    b0ae:	2100      	movs	r1, #0
    b0b0:	202b      	movs	r0, #43	; 0x2b
    b0b2:	4b22      	ldr	r3, [pc, #136]	; (b13c <QSPI_N25Q256_exit_xip+0x9c>)
    b0b4:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    b0b6:	2100      	movs	r1, #0
    b0b8:	202a      	movs	r0, #42	; 0x2a
    b0ba:	4b20      	ldr	r3, [pc, #128]	; (b13c <QSPI_N25Q256_exit_xip+0x9c>)
    b0bc:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    b0be:	2102      	movs	r1, #2
    b0c0:	2008      	movs	r0, #8
    b0c2:	4b1f      	ldr	r3, [pc, #124]	; (b140 <QSPI_N25Q256_exit_xip+0xa0>)
    b0c4:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    b0c6:	2102      	movs	r1, #2
    b0c8:	202b      	movs	r0, #43	; 0x2b
    b0ca:	4b1d      	ldr	r3, [pc, #116]	; (b140 <QSPI_N25Q256_exit_xip+0xa0>)
    b0cc:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    b0ce:	2102      	movs	r1, #2
    b0d0:	202a      	movs	r0, #42	; 0x2a
    b0d2:	4b1b      	ldr	r3, [pc, #108]	; (b140 <QSPI_N25Q256_exit_xip+0xa0>)
    b0d4:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    b0d6:	2101      	movs	r1, #1
    b0d8:	2008      	movs	r0, #8
    b0da:	4b1a      	ldr	r3, [pc, #104]	; (b144 <QSPI_N25Q256_exit_xip+0xa4>)
    b0dc:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    b0de:	2100      	movs	r1, #0
    b0e0:	202b      	movs	r0, #43	; 0x2b
    b0e2:	4b18      	ldr	r3, [pc, #96]	; (b144 <QSPI_N25Q256_exit_xip+0xa4>)
    b0e4:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    b0e6:	2100      	movs	r1, #0
    b0e8:	202a      	movs	r0, #42	; 0x2a
    b0ea:	4b16      	ldr	r3, [pc, #88]	; (b144 <QSPI_N25Q256_exit_xip+0xa4>)
    b0ec:	4798      	blx	r3

	delay_us(1);
    b0ee:	2001      	movs	r0, #1
    b0f0:	4b15      	ldr	r3, [pc, #84]	; (b148 <QSPI_N25Q256_exit_xip+0xa8>)
    b0f2:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    b0f4:	2300      	movs	r3, #0
    b0f6:	607b      	str	r3, [r7, #4]
    b0f8:	e010      	b.n	b11c <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    b0fa:	2101      	movs	r1, #1
    b0fc:	202a      	movs	r0, #42	; 0x2a
    b0fe:	4b11      	ldr	r3, [pc, #68]	; (b144 <QSPI_N25Q256_exit_xip+0xa4>)
    b100:	4798      	blx	r3
		delay_us(1);
    b102:	2001      	movs	r0, #1
    b104:	4b10      	ldr	r3, [pc, #64]	; (b148 <QSPI_N25Q256_exit_xip+0xa8>)
    b106:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    b108:	2100      	movs	r1, #0
    b10a:	202a      	movs	r0, #42	; 0x2a
    b10c:	4b0d      	ldr	r3, [pc, #52]	; (b144 <QSPI_N25Q256_exit_xip+0xa4>)
    b10e:	4798      	blx	r3
		delay_us(1);
    b110:	2001      	movs	r0, #1
    b112:	4b0d      	ldr	r3, [pc, #52]	; (b148 <QSPI_N25Q256_exit_xip+0xa8>)
    b114:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    b116:	687b      	ldr	r3, [r7, #4]
    b118:	3301      	adds	r3, #1
    b11a:	607b      	str	r3, [r7, #4]
    b11c:	687b      	ldr	r3, [r7, #4]
    b11e:	2b06      	cmp	r3, #6
    b120:	ddeb      	ble.n	b0fa <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    b122:	2101      	movs	r1, #1
    b124:	202b      	movs	r0, #43	; 0x2b
    b126:	4b07      	ldr	r3, [pc, #28]	; (b144 <QSPI_N25Q256_exit_xip+0xa4>)
    b128:	4798      	blx	r3
	delay_us(1);
    b12a:	2001      	movs	r0, #1
    b12c:	4b06      	ldr	r3, [pc, #24]	; (b148 <QSPI_N25Q256_exit_xip+0xa8>)
    b12e:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    b130:	4b06      	ldr	r3, [pc, #24]	; (b14c <QSPI_N25Q256_exit_xip+0xac>)
    b132:	4798      	blx	r3
}
    b134:	bf00      	nop
    b136:	3708      	adds	r7, #8
    b138:	46bd      	mov	sp, r7
    b13a:	bd80      	pop	{r7, pc}
    b13c:	0000b011 	.word	0x0000b011
    b140:	0000b031 	.word	0x0000b031
    b144:	0000b069 	.word	0x0000b069
    b148:	00001cd1 	.word	0x00001cd1
    b14c:	000010dd 	.word	0x000010dd

0000b150 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    b150:	b598      	push	{r3, r4, r7, lr}
    b152:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    b154:	4806      	ldr	r0, [pc, #24]	; (b170 <spi_nor_flash_init+0x20>)
    b156:	4b07      	ldr	r3, [pc, #28]	; (b174 <spi_nor_flash_init+0x24>)
    b158:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    b15a:	2300      	movs	r3, #0
    b15c:	4a06      	ldr	r2, [pc, #24]	; (b178 <spi_nor_flash_init+0x28>)
    b15e:	4904      	ldr	r1, [pc, #16]	; (b170 <spi_nor_flash_init+0x20>)
    b160:	4806      	ldr	r0, [pc, #24]	; (b17c <spi_nor_flash_init+0x2c>)
    b162:	4c07      	ldr	r4, [pc, #28]	; (b180 <spi_nor_flash_init+0x30>)
    b164:	47a0      	blx	r4
    b166:	4602      	mov	r2, r0
    b168:	4b06      	ldr	r3, [pc, #24]	; (b184 <spi_nor_flash_init+0x34>)
    b16a:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    b16c:	bf00      	nop
    b16e:	bd98      	pop	{r3, r4, r7, pc}
    b170:	20000d04 	.word	0x20000d04
    b174:	000020e5 	.word	0x000020e5
    b178:	0000b0a1 	.word	0x0000b0a1
    b17c:	20000b38 	.word	0x20000b38
    b180:	0000b5bd 	.word	0x0000b5bd
    b184:	20000ef4 	.word	0x20000ef4

0000b188 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    b188:	b580      	push	{r7, lr}
    b18a:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    b18c:	4805      	ldr	r0, [pc, #20]	; (b1a4 <cdc_device_acm_init+0x1c>)
    b18e:	4b06      	ldr	r3, [pc, #24]	; (b1a8 <cdc_device_acm_init+0x20>)
    b190:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    b192:	4b06      	ldr	r3, [pc, #24]	; (b1ac <cdc_device_acm_init+0x24>)
    b194:	4798      	blx	r3

	usbdc_start(single_desc);
    b196:	4806      	ldr	r0, [pc, #24]	; (b1b0 <cdc_device_acm_init+0x28>)
    b198:	4b06      	ldr	r3, [pc, #24]	; (b1b4 <cdc_device_acm_init+0x2c>)
    b19a:	4798      	blx	r3
	usbdc_attach();
    b19c:	4b06      	ldr	r3, [pc, #24]	; (b1b8 <cdc_device_acm_init+0x30>)
    b19e:	4798      	blx	r3
}
    b1a0:	bf00      	nop
    b1a2:	bd80      	pop	{r7, pc}
    b1a4:	20000b88 	.word	0x20000b88
    b1a8:	0000cce5 	.word	0x0000cce5
    b1ac:	0000bf5d 	.word	0x0000bf5d
    b1b0:	20000104 	.word	0x20000104
    b1b4:	0000cd81 	.word	0x0000cd81
    b1b8:	0000cdd1 	.word	0x0000cdd1

0000b1bc <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    b1bc:	b580      	push	{r7, lr}
    b1be:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    b1c0:	4b01      	ldr	r3, [pc, #4]	; (b1c8 <usb_init+0xc>)
    b1c2:	4798      	blx	r3
}
    b1c4:	bf00      	nop
    b1c6:	bd80      	pop	{r7, pc}
    b1c8:	0000b189 	.word	0x0000b189

0000b1cc <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    b1cc:	b480      	push	{r7}
    b1ce:	b085      	sub	sp, #20
    b1d0:	af00      	add	r7, sp, #0
    b1d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    b1d4:	f3ef 8310 	mrs	r3, PRIMASK
    b1d8:	60fb      	str	r3, [r7, #12]
  return(result);
    b1da:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    b1dc:	687b      	ldr	r3, [r7, #4]
    b1de:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    b1e0:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    b1e2:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    b1e6:	bf00      	nop
    b1e8:	3714      	adds	r7, #20
    b1ea:	46bd      	mov	sp, r7
    b1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    b1f0:	4770      	bx	lr

0000b1f2 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    b1f2:	b480      	push	{r7}
    b1f4:	b085      	sub	sp, #20
    b1f6:	af00      	add	r7, sp, #0
    b1f8:	6078      	str	r0, [r7, #4]
    b1fa:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    b1fe:	687b      	ldr	r3, [r7, #4]
    b200:	681b      	ldr	r3, [r3, #0]
    b202:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    b204:	68fb      	ldr	r3, [r7, #12]
    b206:	f383 8810 	msr	PRIMASK, r3
}
    b20a:	bf00      	nop
    b20c:	3714      	adds	r7, #20
    b20e:	46bd      	mov	sp, r7
    b210:	f85d 7b04 	ldr.w	r7, [sp], #4
    b214:	4770      	bx	lr
	...

0000b218 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    b218:	b580      	push	{r7, lr}
    b21a:	b08c      	sub	sp, #48	; 0x30
    b21c:	af00      	add	r7, sp, #0
    b21e:	6078      	str	r0, [r7, #4]
    b220:	460b      	mov	r3, r1
    b222:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b224:	687b      	ldr	r3, [r7, #4]
    b226:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b228:	687b      	ldr	r3, [r7, #4]
    b22a:	681b      	ldr	r3, [r3, #0]
    b22c:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    b22e:	f107 030c 	add.w	r3, r7, #12
    b232:	2200      	movs	r2, #0
    b234:	601a      	str	r2, [r3, #0]
    b236:	605a      	str	r2, [r3, #4]
    b238:	609a      	str	r2, [r3, #8]
    b23a:	60da      	str	r2, [r3, #12]
    b23c:	611a      	str	r2, [r3, #16]
    b23e:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    b240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b242:	7b1b      	ldrb	r3, [r3, #12]
    b244:	2b00      	cmp	r3, #0
    b246:	d001      	beq.n	b24c <n25q256a_xip_confirm+0x34>
    b248:	2206      	movs	r2, #6
    b24a:	e000      	b.n	b24e <n25q256a_xip_confirm+0x36>
    b24c:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    b24e:	7b3b      	ldrb	r3, [r7, #12]
    b250:	f362 0302 	bfi	r3, r2, #0, #3
    b254:	733b      	strb	r3, [r7, #12]
    b256:	7b3b      	ldrb	r3, [r7, #12]
    b258:	f043 0310 	orr.w	r3, r3, #16
    b25c:	733b      	strb	r3, [r7, #12]
    b25e:	7b3b      	ldrb	r3, [r7, #12]
    b260:	f043 0320 	orr.w	r3, r3, #32
    b264:	733b      	strb	r3, [r7, #12]
    b266:	7b3b      	ldrb	r3, [r7, #12]
    b268:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b26c:	733b      	strb	r3, [r7, #12]
    b26e:	7b3b      	ldrb	r3, [r7, #12]
    b270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b274:	733b      	strb	r3, [r7, #12]
    b276:	7b7b      	ldrb	r3, [r7, #13]
    b278:	f043 0303 	orr.w	r3, r3, #3
    b27c:	737b      	strb	r3, [r7, #13]
    b27e:	7b7b      	ldrb	r3, [r7, #13]
    b280:	2201      	movs	r2, #1
    b282:	f362 1305 	bfi	r3, r2, #4, #2
    b286:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    b288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b28a:	7b1b      	ldrb	r3, [r3, #12]
    b28c:	2b00      	cmp	r3, #0
    b28e:	d001      	beq.n	b294 <n25q256a_xip_confirm+0x7c>
    b290:	2208      	movs	r2, #8
    b292:	e000      	b.n	b296 <n25q256a_xip_confirm+0x7e>
    b294:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    b296:	7bbb      	ldrb	r3, [r7, #14]
    b298:	f362 0304 	bfi	r3, r2, #0, #5
    b29c:	73bb      	strb	r3, [r7, #14]
    b29e:	230b      	movs	r3, #11
    b2a0:	743b      	strb	r3, [r7, #16]
    b2a2:	78fb      	ldrb	r3, [r7, #3]
    b2a4:	2b00      	cmp	r3, #0
    b2a6:	d001      	beq.n	b2ac <n25q256a_xip_confirm+0x94>
    b2a8:	2300      	movs	r3, #0
    b2aa:	e000      	b.n	b2ae <n25q256a_xip_confirm+0x96>
    b2ac:	23ff      	movs	r3, #255	; 0xff
    b2ae:	747b      	strb	r3, [r7, #17]
    b2b0:	2301      	movs	r3, #1
    b2b2:	61bb      	str	r3, [r7, #24]
    b2b4:	f107 0327 	add.w	r3, r7, #39	; 0x27
    b2b8:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    b2ba:	f107 030c 	add.w	r3, r7, #12
    b2be:	4619      	mov	r1, r3
    b2c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b2c2:	4b07      	ldr	r3, [pc, #28]	; (b2e0 <n25q256a_xip_confirm+0xc8>)
    b2c4:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    b2c6:	78fb      	ldrb	r3, [r7, #3]
    b2c8:	2b00      	cmp	r3, #0
    b2ca:	d001      	beq.n	b2d0 <n25q256a_xip_confirm+0xb8>
    b2cc:	2202      	movs	r2, #2
    b2ce:	e000      	b.n	b2d2 <n25q256a_xip_confirm+0xba>
    b2d0:	2201      	movs	r2, #1
    b2d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b2d4:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    b2d6:	2300      	movs	r3, #0
}
    b2d8:	4618      	mov	r0, r3
    b2da:	3730      	adds	r7, #48	; 0x30
    b2dc:	46bd      	mov	sp, r7
    b2de:	bd80      	pop	{r7, pc}
    b2e0:	0000215d 	.word	0x0000215d

0000b2e4 <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    b2e4:	b580      	push	{r7, lr}
    b2e6:	b08c      	sub	sp, #48	; 0x30
    b2e8:	af00      	add	r7, sp, #0
    b2ea:	6078      	str	r0, [r7, #4]
    b2ec:	460b      	mov	r3, r1
    b2ee:	70fb      	strb	r3, [r7, #3]
    b2f0:	4613      	mov	r3, r2
    b2f2:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    b2f4:	2300      	movs	r3, #0
    b2f6:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    b2f8:	687b      	ldr	r3, [r7, #4]
    b2fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    b2fc:	687b      	ldr	r3, [r7, #4]
    b2fe:	681b      	ldr	r3, [r3, #0]
    b300:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    b302:	f107 030c 	add.w	r3, r7, #12
    b306:	2200      	movs	r2, #0
    b308:	601a      	str	r2, [r3, #0]
    b30a:	605a      	str	r2, [r3, #4]
    b30c:	609a      	str	r2, [r3, #8]
    b30e:	60da      	str	r2, [r3, #12]
    b310:	611a      	str	r2, [r3, #16]
    b312:	615a      	str	r2, [r3, #20]
    b314:	78fb      	ldrb	r3, [r7, #3]
    b316:	f003 0307 	and.w	r3, r3, #7
    b31a:	b2da      	uxtb	r2, r3
    b31c:	7b3b      	ldrb	r3, [r7, #12]
    b31e:	f362 0302 	bfi	r3, r2, #0, #3
    b322:	733b      	strb	r3, [r7, #12]
    b324:	7b3b      	ldrb	r3, [r7, #12]
    b326:	f043 0310 	orr.w	r3, r3, #16
    b32a:	733b      	strb	r3, [r7, #12]
    b32c:	7b3b      	ldrb	r3, [r7, #12]
    b32e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b332:	733b      	strb	r3, [r7, #12]
    b334:	78bb      	ldrb	r3, [r7, #2]
    b336:	743b      	strb	r3, [r7, #16]
    b338:	2301      	movs	r3, #1
    b33a:	61bb      	str	r3, [r7, #24]
    b33c:	f107 0324 	add.w	r3, r7, #36	; 0x24
    b340:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    b342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b344:	7b5b      	ldrb	r3, [r3, #13]
    b346:	2b00      	cmp	r3, #0
    b348:	d003      	beq.n	b352 <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    b34a:	2100      	movs	r1, #0
    b34c:	6878      	ldr	r0, [r7, #4]
    b34e:	4b0a      	ldr	r3, [pc, #40]	; (b378 <n25q256a_read_reg+0x94>)
    b350:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    b352:	f107 030c 	add.w	r3, r7, #12
    b356:	4619      	mov	r1, r3
    b358:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b35a:	4b08      	ldr	r3, [pc, #32]	; (b37c <n25q256a_read_reg+0x98>)
    b35c:	4798      	blx	r3
	if (n25q->xip_mode) {
    b35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b360:	7b5b      	ldrb	r3, [r3, #13]
    b362:	2b00      	cmp	r3, #0
    b364:	d003      	beq.n	b36e <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    b366:	2101      	movs	r1, #1
    b368:	6878      	ldr	r0, [r7, #4]
    b36a:	4b03      	ldr	r3, [pc, #12]	; (b378 <n25q256a_read_reg+0x94>)
    b36c:	4798      	blx	r3
	}
	return status;
    b36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    b370:	4618      	mov	r0, r3
    b372:	3730      	adds	r7, #48	; 0x30
    b374:	46bd      	mov	sp, r7
    b376:	bd80      	pop	{r7, pc}
    b378:	0000b219 	.word	0x0000b219
    b37c:	0000215d 	.word	0x0000215d

0000b380 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    b380:	b580      	push	{r7, lr}
    b382:	b08c      	sub	sp, #48	; 0x30
    b384:	af00      	add	r7, sp, #0
    b386:	60f8      	str	r0, [r7, #12]
    b388:	607b      	str	r3, [r7, #4]
    b38a:	460b      	mov	r3, r1
    b38c:	72fb      	strb	r3, [r7, #11]
    b38e:	4613      	mov	r3, r2
    b390:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b392:	68fb      	ldr	r3, [r7, #12]
    b394:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b396:	68fb      	ldr	r3, [r7, #12]
    b398:	681b      	ldr	r3, [r3, #0]
    b39a:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    b39c:	f107 0310 	add.w	r3, r7, #16
    b3a0:	2200      	movs	r2, #0
    b3a2:	601a      	str	r2, [r3, #0]
    b3a4:	605a      	str	r2, [r3, #4]
    b3a6:	609a      	str	r2, [r3, #8]
    b3a8:	60da      	str	r2, [r3, #12]
    b3aa:	611a      	str	r2, [r3, #16]
    b3ac:	615a      	str	r2, [r3, #20]
    b3ae:	7afb      	ldrb	r3, [r7, #11]
    b3b0:	f003 0307 	and.w	r3, r3, #7
    b3b4:	b2da      	uxtb	r2, r3
    b3b6:	7c3b      	ldrb	r3, [r7, #16]
    b3b8:	f362 0302 	bfi	r3, r2, #0, #3
    b3bc:	743b      	strb	r3, [r7, #16]
    b3be:	7c3b      	ldrb	r3, [r7, #16]
    b3c0:	f043 0310 	orr.w	r3, r3, #16
    b3c4:	743b      	strb	r3, [r7, #16]
    b3c6:	7c3b      	ldrb	r3, [r7, #16]
    b3c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b3cc:	743b      	strb	r3, [r7, #16]
    b3ce:	7c7b      	ldrb	r3, [r7, #17]
    b3d0:	2202      	movs	r2, #2
    b3d2:	f362 1305 	bfi	r3, r2, #4, #2
    b3d6:	747b      	strb	r3, [r7, #17]
    b3d8:	7abb      	ldrb	r3, [r7, #10]
    b3da:	753b      	strb	r3, [r7, #20]
    b3dc:	2301      	movs	r3, #1
    b3de:	61fb      	str	r3, [r7, #28]
    b3e0:	1d3b      	adds	r3, r7, #4
    b3e2:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    b3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b3e6:	7b5b      	ldrb	r3, [r3, #13]
    b3e8:	2b00      	cmp	r3, #0
    b3ea:	d003      	beq.n	b3f4 <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    b3ec:	2100      	movs	r1, #0
    b3ee:	68f8      	ldr	r0, [r7, #12]
    b3f0:	4b09      	ldr	r3, [pc, #36]	; (b418 <n25q256a_write_reg+0x98>)
    b3f2:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    b3f4:	f107 0310 	add.w	r3, r7, #16
    b3f8:	4619      	mov	r1, r3
    b3fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b3fc:	4b07      	ldr	r3, [pc, #28]	; (b41c <n25q256a_write_reg+0x9c>)
    b3fe:	4798      	blx	r3
	if (n25q->xip_mode) {
    b400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b402:	7b5b      	ldrb	r3, [r3, #13]
    b404:	2b00      	cmp	r3, #0
    b406:	d003      	beq.n	b410 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    b408:	2101      	movs	r1, #1
    b40a:	68f8      	ldr	r0, [r7, #12]
    b40c:	4b02      	ldr	r3, [pc, #8]	; (b418 <n25q256a_write_reg+0x98>)
    b40e:	4798      	blx	r3
	}
}
    b410:	bf00      	nop
    b412:	3730      	adds	r7, #48	; 0x30
    b414:	46bd      	mov	sp, r7
    b416:	bd80      	pop	{r7, pc}
    b418:	0000b219 	.word	0x0000b219
    b41c:	0000215d 	.word	0x0000215d

0000b420 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    b420:	b580      	push	{r7, lr}
    b422:	b090      	sub	sp, #64	; 0x40
    b424:	af00      	add	r7, sp, #0
    b426:	6078      	str	r0, [r7, #4]
    b428:	460b      	mov	r3, r1
    b42a:	70fb      	strb	r3, [r7, #3]
    b42c:	4613      	mov	r3, r2
    b42e:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b430:	687b      	ldr	r3, [r7, #4]
    b432:	681b      	ldr	r3, [r3, #0]
    b434:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    b436:	78bb      	ldrb	r3, [r7, #2]
    b438:	2b00      	cmp	r3, #0
    b43a:	d001      	beq.n	b440 <n25q256a_write_enable+0x20>
    b43c:	2306      	movs	r3, #6
    b43e:	e000      	b.n	b442 <n25q256a_write_enable+0x22>
    b440:	2304      	movs	r3, #4
    b442:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    b446:	f107 0320 	add.w	r3, r7, #32
    b44a:	2200      	movs	r2, #0
    b44c:	601a      	str	r2, [r3, #0]
    b44e:	605a      	str	r2, [r3, #4]
    b450:	609a      	str	r2, [r3, #8]
    b452:	60da      	str	r2, [r3, #12]
    b454:	611a      	str	r2, [r3, #16]
    b456:	615a      	str	r2, [r3, #20]
    b458:	78fb      	ldrb	r3, [r7, #3]
    b45a:	f003 0307 	and.w	r3, r3, #7
    b45e:	b2da      	uxtb	r2, r3
    b460:	f897 3020 	ldrb.w	r3, [r7, #32]
    b464:	f362 0302 	bfi	r3, r2, #0, #3
    b468:	f887 3020 	strb.w	r3, [r7, #32]
    b46c:	f897 3020 	ldrb.w	r3, [r7, #32]
    b470:	f043 0310 	orr.w	r3, r3, #16
    b474:	f887 3020 	strb.w	r3, [r7, #32]
    b478:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    b47c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    b480:	f107 0308 	add.w	r3, r7, #8
    b484:	2200      	movs	r2, #0
    b486:	601a      	str	r2, [r3, #0]
    b488:	605a      	str	r2, [r3, #4]
    b48a:	609a      	str	r2, [r3, #8]
    b48c:	60da      	str	r2, [r3, #12]
    b48e:	611a      	str	r2, [r3, #16]
    b490:	615a      	str	r2, [r3, #20]
    b492:	78fb      	ldrb	r3, [r7, #3]
    b494:	f003 0307 	and.w	r3, r3, #7
    b498:	b2da      	uxtb	r2, r3
    b49a:	7a3b      	ldrb	r3, [r7, #8]
    b49c:	f362 0302 	bfi	r3, r2, #0, #3
    b4a0:	723b      	strb	r3, [r7, #8]
    b4a2:	7a3b      	ldrb	r3, [r7, #8]
    b4a4:	f043 0310 	orr.w	r3, r3, #16
    b4a8:	723b      	strb	r3, [r7, #8]
    b4aa:	7a3b      	ldrb	r3, [r7, #8]
    b4ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b4b0:	723b      	strb	r3, [r7, #8]
    b4b2:	2305      	movs	r3, #5
    b4b4:	733b      	strb	r3, [r7, #12]
    b4b6:	2301      	movs	r3, #1
    b4b8:	617b      	str	r3, [r7, #20]
    b4ba:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    b4be:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    b4c0:	f107 0320 	add.w	r3, r7, #32
    b4c4:	4619      	mov	r1, r3
    b4c6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    b4c8:	4b08      	ldr	r3, [pc, #32]	; (b4ec <n25q256a_write_enable+0xcc>)
    b4ca:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    b4cc:	f107 0308 	add.w	r3, r7, #8
    b4d0:	4619      	mov	r1, r3
    b4d2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    b4d4:	4b05      	ldr	r3, [pc, #20]	; (b4ec <n25q256a_write_enable+0xcc>)
    b4d6:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    b4d8:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    b4dc:	f003 0302 	and.w	r3, r3, #2
    b4e0:	2b00      	cmp	r3, #0
    b4e2:	d0ed      	beq.n	b4c0 <n25q256a_write_enable+0xa0>
}
    b4e4:	bf00      	nop
    b4e6:	3740      	adds	r7, #64	; 0x40
    b4e8:	46bd      	mov	sp, r7
    b4ea:	bd80      	pop	{r7, pc}
    b4ec:	0000215d 	.word	0x0000215d

0000b4f0 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    b4f0:	b590      	push	{r4, r7, lr}
    b4f2:	b087      	sub	sp, #28
    b4f4:	af00      	add	r7, sp, #0
    b4f6:	6078      	str	r0, [r7, #4]
    b4f8:	460b      	mov	r3, r1
    b4fa:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    b4fc:	687b      	ldr	r3, [r7, #4]
    b4fe:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b500:	68fb      	ldr	r3, [r7, #12]
    b502:	7b1b      	ldrb	r3, [r3, #12]
    b504:	2b00      	cmp	r3, #0
    b506:	d001      	beq.n	b50c <n25q256a_switch_mode+0x1c>
    b508:	2306      	movs	r3, #6
    b50a:	e000      	b.n	b50e <n25q256a_switch_mode+0x1e>
    b50c:	2300      	movs	r3, #0
    b50e:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    b510:	7afb      	ldrb	r3, [r7, #11]
    b512:	2265      	movs	r2, #101	; 0x65
    b514:	4619      	mov	r1, r3
    b516:	6878      	ldr	r0, [r7, #4]
    b518:	4b25      	ldr	r3, [pc, #148]	; (b5b0 <n25q256a_switch_mode+0xc0>)
    b51a:	4798      	blx	r3
    b51c:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    b51e:	2300      	movs	r3, #0
    b520:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    b522:	68fb      	ldr	r3, [r7, #12]
    b524:	7b1b      	ldrb	r3, [r3, #12]
    b526:	78fa      	ldrb	r2, [r7, #3]
    b528:	429a      	cmp	r2, r3
    b52a:	d03d      	beq.n	b5a8 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    b52c:	78fb      	ldrb	r3, [r7, #3]
    b52e:	2b00      	cmp	r3, #0
    b530:	d00b      	beq.n	b54a <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    b532:	697b      	ldr	r3, [r7, #20]
    b534:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b538:	2b00      	cmp	r3, #0
    b53a:	d011      	beq.n	b560 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    b53c:	697b      	ldr	r3, [r7, #20]
    b53e:	f003 031f 	and.w	r3, r3, #31
    b542:	617b      	str	r3, [r7, #20]
			modify = 1;
    b544:	2301      	movs	r3, #1
    b546:	74fb      	strb	r3, [r7, #19]
    b548:	e00a      	b.n	b560 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    b54a:	697b      	ldr	r3, [r7, #20]
    b54c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b550:	2b00      	cmp	r3, #0
    b552:	d105      	bne.n	b560 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    b554:	697b      	ldr	r3, [r7, #20]
    b556:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    b55a:	617b      	str	r3, [r7, #20]
			modify = 1;
    b55c:	2301      	movs	r3, #1
    b55e:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    b560:	7cfb      	ldrb	r3, [r7, #19]
    b562:	2b00      	cmp	r3, #0
    b564:	d021      	beq.n	b5aa <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    b566:	68fb      	ldr	r3, [r7, #12]
    b568:	78fa      	ldrb	r2, [r7, #3]
    b56a:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    b56c:	7afb      	ldrb	r3, [r7, #11]
    b56e:	2201      	movs	r2, #1
    b570:	4619      	mov	r1, r3
    b572:	6878      	ldr	r0, [r7, #4]
    b574:	4b0f      	ldr	r3, [pc, #60]	; (b5b4 <n25q256a_switch_mode+0xc4>)
    b576:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    b578:	7af9      	ldrb	r1, [r7, #11]
    b57a:	697b      	ldr	r3, [r7, #20]
    b57c:	2261      	movs	r2, #97	; 0x61
    b57e:	6878      	ldr	r0, [r7, #4]
    b580:	4c0d      	ldr	r4, [pc, #52]	; (b5b8 <n25q256a_switch_mode+0xc8>)
    b582:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b584:	78fb      	ldrb	r3, [r7, #3]
    b586:	2b00      	cmp	r3, #0
    b588:	d001      	beq.n	b58e <n25q256a_switch_mode+0x9e>
    b58a:	2306      	movs	r3, #6
    b58c:	e000      	b.n	b590 <n25q256a_switch_mode+0xa0>
    b58e:	2300      	movs	r3, #0
    b590:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    b592:	7afb      	ldrb	r3, [r7, #11]
    b594:	2265      	movs	r2, #101	; 0x65
    b596:	4619      	mov	r1, r3
    b598:	6878      	ldr	r0, [r7, #4]
    b59a:	4b05      	ldr	r3, [pc, #20]	; (b5b0 <n25q256a_switch_mode+0xc0>)
    b59c:	4798      	blx	r3
    b59e:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    b5a0:	68fb      	ldr	r3, [r7, #12]
    b5a2:	78fa      	ldrb	r2, [r7, #3]
    b5a4:	731a      	strb	r2, [r3, #12]
    b5a6:	e000      	b.n	b5aa <n25q256a_switch_mode+0xba>
		return;
    b5a8:	bf00      	nop
	}
}
    b5aa:	371c      	adds	r7, #28
    b5ac:	46bd      	mov	sp, r7
    b5ae:	bd90      	pop	{r4, r7, pc}
    b5b0:	0000b2e5 	.word	0x0000b2e5
    b5b4:	0000b421 	.word	0x0000b421
    b5b8:	0000b381 	.word	0x0000b381

0000b5bc <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    b5bc:	b580      	push	{r7, lr}
    b5be:	b086      	sub	sp, #24
    b5c0:	af00      	add	r7, sp, #0
    b5c2:	60f8      	str	r0, [r7, #12]
    b5c4:	60b9      	str	r1, [r7, #8]
    b5c6:	607a      	str	r2, [r7, #4]
    b5c8:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    b5ca:	68fb      	ldr	r3, [r7, #12]
    b5cc:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    b5ce:	4a0c      	ldr	r2, [pc, #48]	; (b600 <n25q256a_construct+0x44>)
    b5d0:	68b9      	ldr	r1, [r7, #8]
    b5d2:	68f8      	ldr	r0, [r7, #12]
    b5d4:	4b0b      	ldr	r3, [pc, #44]	; (b604 <n25q256a_construct+0x48>)
    b5d6:	4798      	blx	r3
	n25q->quad_mode    = 0;
    b5d8:	697b      	ldr	r3, [r7, #20]
    b5da:	2200      	movs	r2, #0
    b5dc:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    b5de:	697b      	ldr	r3, [r7, #20]
    b5e0:	2200      	movs	r2, #0
    b5e2:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    b5e4:	697b      	ldr	r3, [r7, #20]
    b5e6:	687a      	ldr	r2, [r7, #4]
    b5e8:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    b5ea:	78fb      	ldrb	r3, [r7, #3]
    b5ec:	4619      	mov	r1, r3
    b5ee:	68f8      	ldr	r0, [r7, #12]
    b5f0:	4b05      	ldr	r3, [pc, #20]	; (b608 <n25q256a_construct+0x4c>)
    b5f2:	4798      	blx	r3
	return me;
    b5f4:	68fb      	ldr	r3, [r7, #12]
}
    b5f6:	4618      	mov	r0, r3
    b5f8:	3718      	adds	r7, #24
    b5fa:	46bd      	mov	sp, r7
    b5fc:	bd80      	pop	{r7, pc}
    b5fe:	bf00      	nop
    b600:	0000e688 	.word	0x0000e688
    b604:	0000ba99 	.word	0x0000ba99
    b608:	0000b4f1 	.word	0x0000b4f1

0000b60c <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    b60c:	b580      	push	{r7, lr}
    b60e:	b08c      	sub	sp, #48	; 0x30
    b610:	af00      	add	r7, sp, #0
    b612:	60f8      	str	r0, [r7, #12]
    b614:	60b9      	str	r1, [r7, #8]
    b616:	607a      	str	r2, [r7, #4]
    b618:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b61a:	68fb      	ldr	r3, [r7, #12]
    b61c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b61e:	68fb      	ldr	r3, [r7, #12]
    b620:	681b      	ldr	r3, [r3, #0]
    b622:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    b624:	f107 0310 	add.w	r3, r7, #16
    b628:	2200      	movs	r2, #0
    b62a:	601a      	str	r2, [r3, #0]
    b62c:	605a      	str	r2, [r3, #4]
    b62e:	609a      	str	r2, [r3, #8]
    b630:	60da      	str	r2, [r3, #12]
    b632:	611a      	str	r2, [r3, #16]
    b634:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    b636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b638:	7b1b      	ldrb	r3, [r3, #12]
    b63a:	2b00      	cmp	r3, #0
    b63c:	d001      	beq.n	b642 <n25q256a_read+0x36>
    b63e:	2206      	movs	r2, #6
    b640:	e000      	b.n	b644 <n25q256a_read+0x38>
    b642:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    b644:	7c3b      	ldrb	r3, [r7, #16]
    b646:	f362 0302 	bfi	r3, r2, #0, #3
    b64a:	743b      	strb	r3, [r7, #16]
    b64c:	7c3b      	ldrb	r3, [r7, #16]
    b64e:	f043 0310 	orr.w	r3, r3, #16
    b652:	743b      	strb	r3, [r7, #16]
    b654:	7c3b      	ldrb	r3, [r7, #16]
    b656:	f043 0320 	orr.w	r3, r3, #32
    b65a:	743b      	strb	r3, [r7, #16]
    b65c:	7c3b      	ldrb	r3, [r7, #16]
    b65e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b662:	743b      	strb	r3, [r7, #16]
    b664:	7c7b      	ldrb	r3, [r7, #17]
    b666:	2201      	movs	r2, #1
    b668:	f362 1305 	bfi	r3, r2, #4, #2
    b66c:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    b66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b670:	7b1b      	ldrb	r3, [r3, #12]
    b672:	2b00      	cmp	r3, #0
    b674:	d001      	beq.n	b67a <n25q256a_read+0x6e>
    b676:	220a      	movs	r2, #10
    b678:	e000      	b.n	b67c <n25q256a_read+0x70>
    b67a:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    b67c:	7cbb      	ldrb	r3, [r7, #18]
    b67e:	f362 0304 	bfi	r3, r2, #0, #5
    b682:	74bb      	strb	r3, [r7, #18]
    b684:	230b      	movs	r3, #11
    b686:	753b      	strb	r3, [r7, #20]
    b688:	687b      	ldr	r3, [r7, #4]
    b68a:	61bb      	str	r3, [r7, #24]
    b68c:	683b      	ldr	r3, [r7, #0]
    b68e:	61fb      	str	r3, [r7, #28]
    b690:	68bb      	ldr	r3, [r7, #8]
    b692:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    b694:	f107 0310 	add.w	r3, r7, #16
    b698:	4619      	mov	r1, r3
    b69a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b69c:	4b03      	ldr	r3, [pc, #12]	; (b6ac <n25q256a_read+0xa0>)
    b69e:	4798      	blx	r3
	return ERR_NONE;
    b6a0:	2300      	movs	r3, #0
}
    b6a2:	4618      	mov	r0, r3
    b6a4:	3730      	adds	r7, #48	; 0x30
    b6a6:	46bd      	mov	sp, r7
    b6a8:	bd80      	pop	{r7, pc}
    b6aa:	bf00      	nop
    b6ac:	0000215d 	.word	0x0000215d

0000b6b0 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    b6b0:	b580      	push	{r7, lr}
    b6b2:	b08c      	sub	sp, #48	; 0x30
    b6b4:	af00      	add	r7, sp, #0
    b6b6:	60f8      	str	r0, [r7, #12]
    b6b8:	60b9      	str	r1, [r7, #8]
    b6ba:	607a      	str	r2, [r7, #4]
    b6bc:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b6be:	68fb      	ldr	r3, [r7, #12]
    b6c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b6c2:	68fb      	ldr	r3, [r7, #12]
    b6c4:	681b      	ldr	r3, [r3, #0]
    b6c6:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    b6c8:	f107 0310 	add.w	r3, r7, #16
    b6cc:	2200      	movs	r2, #0
    b6ce:	601a      	str	r2, [r3, #0]
    b6d0:	605a      	str	r2, [r3, #4]
    b6d2:	609a      	str	r2, [r3, #8]
    b6d4:	60da      	str	r2, [r3, #12]
    b6d6:	611a      	str	r2, [r3, #16]
    b6d8:	615a      	str	r2, [r3, #20]
    b6da:	7c3b      	ldrb	r3, [r7, #16]
    b6dc:	f043 0310 	orr.w	r3, r3, #16
    b6e0:	743b      	strb	r3, [r7, #16]
    b6e2:	7c3b      	ldrb	r3, [r7, #16]
    b6e4:	f043 0320 	orr.w	r3, r3, #32
    b6e8:	743b      	strb	r3, [r7, #16]
    b6ea:	7c3b      	ldrb	r3, [r7, #16]
    b6ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b6f0:	743b      	strb	r3, [r7, #16]
    b6f2:	7c7b      	ldrb	r3, [r7, #17]
    b6f4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    b6f8:	747b      	strb	r3, [r7, #17]
    b6fa:	2302      	movs	r3, #2
    b6fc:	753b      	strb	r3, [r7, #20]
    b6fe:	687b      	ldr	r3, [r7, #4]
    b700:	61bb      	str	r3, [r7, #24]
    b702:	683b      	ldr	r3, [r7, #0]
    b704:	61fb      	str	r3, [r7, #28]
    b706:	68bb      	ldr	r3, [r7, #8]
    b708:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b70a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b70c:	7b1b      	ldrb	r3, [r3, #12]
    b70e:	2b00      	cmp	r3, #0
    b710:	d001      	beq.n	b716 <n25q256a_write+0x66>
    b712:	2206      	movs	r2, #6
    b714:	e000      	b.n	b718 <n25q256a_write+0x68>
    b716:	2200      	movs	r2, #0
    b718:	7c3b      	ldrb	r3, [r7, #16]
    b71a:	f362 0302 	bfi	r3, r2, #0, #3
    b71e:	743b      	strb	r3, [r7, #16]
	while (length) {
    b720:	e035      	b.n	b78e <n25q256a_write+0xde>
		cmd.address = address;
    b722:	687b      	ldr	r3, [r7, #4]
    b724:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    b726:	683b      	ldr	r3, [r7, #0]
    b728:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    b72c:	d802      	bhi.n	b734 <n25q256a_write+0x84>
			cmd.buf_len = length;
    b72e:	683b      	ldr	r3, [r7, #0]
    b730:	61fb      	str	r3, [r7, #28]
    b732:	e002      	b.n	b73a <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    b734:	f44f 7380 	mov.w	r3, #256	; 0x100
    b738:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b73a:	7c3b      	ldrb	r3, [r7, #16]
    b73c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b740:	b2db      	uxtb	r3, r3
    b742:	2201      	movs	r2, #1
    b744:	4619      	mov	r1, r3
    b746:	68f8      	ldr	r0, [r7, #12]
    b748:	4b19      	ldr	r3, [pc, #100]	; (b7b0 <n25q256a_write+0x100>)
    b74a:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    b74c:	f107 0310 	add.w	r3, r7, #16
    b750:	4619      	mov	r1, r3
    b752:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b754:	4b17      	ldr	r3, [pc, #92]	; (b7b4 <n25q256a_write+0x104>)
    b756:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b758:	bf00      	nop
    b75a:	7c3b      	ldrb	r3, [r7, #16]
    b75c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b760:	b2db      	uxtb	r3, r3
    b762:	2270      	movs	r2, #112	; 0x70
    b764:	4619      	mov	r1, r3
    b766:	68f8      	ldr	r0, [r7, #12]
    b768:	4b13      	ldr	r3, [pc, #76]	; (b7b8 <n25q256a_write+0x108>)
    b76a:	4798      	blx	r3
    b76c:	4603      	mov	r3, r0
    b76e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b772:	2b00      	cmp	r3, #0
    b774:	d0f1      	beq.n	b75a <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    b776:	6a3a      	ldr	r2, [r7, #32]
    b778:	69fb      	ldr	r3, [r7, #28]
    b77a:	4413      	add	r3, r2
    b77c:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    b77e:	69fb      	ldr	r3, [r7, #28]
    b780:	683a      	ldr	r2, [r7, #0]
    b782:	1ad3      	subs	r3, r2, r3
    b784:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    b786:	69fb      	ldr	r3, [r7, #28]
    b788:	687a      	ldr	r2, [r7, #4]
    b78a:	4413      	add	r3, r2
    b78c:	607b      	str	r3, [r7, #4]
	while (length) {
    b78e:	683b      	ldr	r3, [r7, #0]
    b790:	2b00      	cmp	r3, #0
    b792:	d1c6      	bne.n	b722 <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    b794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b796:	7b5b      	ldrb	r3, [r3, #13]
    b798:	2b00      	cmp	r3, #0
    b79a:	d003      	beq.n	b7a4 <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    b79c:	2101      	movs	r1, #1
    b79e:	68f8      	ldr	r0, [r7, #12]
    b7a0:	4b06      	ldr	r3, [pc, #24]	; (b7bc <n25q256a_write+0x10c>)
    b7a2:	4798      	blx	r3
	}
	return ERR_NONE;
    b7a4:	2300      	movs	r3, #0
}
    b7a6:	4618      	mov	r0, r3
    b7a8:	3730      	adds	r7, #48	; 0x30
    b7aa:	46bd      	mov	sp, r7
    b7ac:	bd80      	pop	{r7, pc}
    b7ae:	bf00      	nop
    b7b0:	0000b421 	.word	0x0000b421
    b7b4:	0000215d 	.word	0x0000215d
    b7b8:	0000b2e5 	.word	0x0000b2e5
    b7bc:	0000b219 	.word	0x0000b219

0000b7c0 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    b7c0:	b580      	push	{r7, lr}
    b7c2:	b090      	sub	sp, #64	; 0x40
    b7c4:	af00      	add	r7, sp, #0
    b7c6:	60f8      	str	r0, [r7, #12]
    b7c8:	60b9      	str	r1, [r7, #8]
    b7ca:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b7cc:	68fb      	ldr	r3, [r7, #12]
    b7ce:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b7d0:	68fb      	ldr	r3, [r7, #12]
    b7d2:	681b      	ldr	r3, [r3, #0]
    b7d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    b7d6:	f107 0314 	add.w	r3, r7, #20
    b7da:	2200      	movs	r2, #0
    b7dc:	601a      	str	r2, [r3, #0]
    b7de:	605a      	str	r2, [r3, #4]
    b7e0:	609a      	str	r2, [r3, #8]
    b7e2:	60da      	str	r2, [r3, #12]
    b7e4:	611a      	str	r2, [r3, #16]
    b7e6:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    b7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b7ea:	7b1b      	ldrb	r3, [r3, #12]
    b7ec:	2b00      	cmp	r3, #0
    b7ee:	d001      	beq.n	b7f4 <n25q256a_erase+0x34>
    b7f0:	2206      	movs	r2, #6
    b7f2:	e000      	b.n	b7f6 <n25q256a_erase+0x36>
    b7f4:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    b7f6:	7d3b      	ldrb	r3, [r7, #20]
    b7f8:	f362 0302 	bfi	r3, r2, #0, #3
    b7fc:	753b      	strb	r3, [r7, #20]
    b7fe:	7d3b      	ldrb	r3, [r7, #20]
    b800:	f043 0310 	orr.w	r3, r3, #16
    b804:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    b806:	687b      	ldr	r3, [r7, #4]
    b808:	4a56      	ldr	r2, [pc, #344]	; (b964 <n25q256a_erase+0x1a4>)
    b80a:	4293      	cmp	r3, r2
    b80c:	bf94      	ite	ls
    b80e:	2301      	movls	r3, #1
    b810:	2300      	movhi	r3, #0
    b812:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    b814:	7d3b      	ldrb	r3, [r7, #20]
    b816:	f362 1345 	bfi	r3, r2, #5, #1
    b81a:	753b      	strb	r3, [r7, #20]
    b81c:	7d7b      	ldrb	r3, [r7, #21]
    b81e:	2202      	movs	r2, #2
    b820:	f362 1305 	bfi	r3, r2, #4, #2
    b824:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    b826:	68bb      	ldr	r3, [r7, #8]
    b828:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    b82a:	687b      	ldr	r3, [r7, #4]
    b82c:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    b82e:	2300      	movs	r3, #0
    b830:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    b832:	687b      	ldr	r3, [r7, #4]
    b834:	f3c3 030b 	ubfx	r3, r3, #0, #12
    b838:	2b00      	cmp	r3, #0
    b83a:	d104      	bne.n	b846 <n25q256a_erase+0x86>
    b83c:	68bb      	ldr	r3, [r7, #8]
    b83e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    b842:	2b00      	cmp	r3, #0
    b844:	d002      	beq.n	b84c <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    b846:	f06f 030c 	mvn.w	r3, #12
    b84a:	e087      	b.n	b95c <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    b84c:	687b      	ldr	r3, [r7, #4]
    b84e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    b852:	d368      	bcc.n	b926 <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    b854:	23c7      	movs	r3, #199	; 0xc7
    b856:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b858:	7d3b      	ldrb	r3, [r7, #20]
    b85a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b85e:	b2db      	uxtb	r3, r3
    b860:	2201      	movs	r2, #1
    b862:	4619      	mov	r1, r3
    b864:	68f8      	ldr	r0, [r7, #12]
    b866:	4b40      	ldr	r3, [pc, #256]	; (b968 <n25q256a_erase+0x1a8>)
    b868:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    b86a:	f107 0314 	add.w	r3, r7, #20
    b86e:	4619      	mov	r1, r3
    b870:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b872:	4b3e      	ldr	r3, [pc, #248]	; (b96c <n25q256a_erase+0x1ac>)
    b874:	4798      	blx	r3
    b876:	e059      	b.n	b92c <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    b878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b87a:	b29b      	uxth	r3, r3
    b87c:	2b00      	cmp	r3, #0
    b87e:	d11f      	bne.n	b8c0 <n25q256a_erase+0x100>
    b880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b882:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    b886:	d31b      	bcc.n	b8c0 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    b888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b88a:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    b88c:	23d8      	movs	r3, #216	; 0xd8
    b88e:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b890:	7d3b      	ldrb	r3, [r7, #20]
    b892:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b896:	b2db      	uxtb	r3, r3
    b898:	2201      	movs	r2, #1
    b89a:	4619      	mov	r1, r3
    b89c:	68f8      	ldr	r0, [r7, #12]
    b89e:	4b32      	ldr	r3, [pc, #200]	; (b968 <n25q256a_erase+0x1a8>)
    b8a0:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    b8a2:	f107 0314 	add.w	r3, r7, #20
    b8a6:	4619      	mov	r1, r3
    b8a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b8aa:	4b30      	ldr	r3, [pc, #192]	; (b96c <n25q256a_erase+0x1ac>)
    b8ac:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    b8ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b8b0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    b8b4:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    b8b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b8b8:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    b8bc:	63bb      	str	r3, [r7, #56]	; 0x38
    b8be:	e023      	b.n	b908 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    b8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b8c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    b8c6:	d31b      	bcc.n	b900 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    b8c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b8ca:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    b8cc:	2320      	movs	r3, #32
    b8ce:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b8d0:	7d3b      	ldrb	r3, [r7, #20]
    b8d2:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b8d6:	b2db      	uxtb	r3, r3
    b8d8:	2201      	movs	r2, #1
    b8da:	4619      	mov	r1, r3
    b8dc:	68f8      	ldr	r0, [r7, #12]
    b8de:	4b22      	ldr	r3, [pc, #136]	; (b968 <n25q256a_erase+0x1a8>)
    b8e0:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    b8e2:	f107 0314 	add.w	r3, r7, #20
    b8e6:	4619      	mov	r1, r3
    b8e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b8ea:	4b20      	ldr	r3, [pc, #128]	; (b96c <n25q256a_erase+0x1ac>)
    b8ec:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    b8ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b8f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    b8f4:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    b8f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b8f8:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    b8fc:	63bb      	str	r3, [r7, #56]	; 0x38
    b8fe:	e003      	b.n	b908 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    b900:	f06f 030c 	mvn.w	r3, #12
    b904:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    b906:	e011      	b.n	b92c <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b908:	bf00      	nop
    b90a:	7d3b      	ldrb	r3, [r7, #20]
    b90c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b910:	b2db      	uxtb	r3, r3
    b912:	2270      	movs	r2, #112	; 0x70
    b914:	4619      	mov	r1, r3
    b916:	68f8      	ldr	r0, [r7, #12]
    b918:	4b15      	ldr	r3, [pc, #84]	; (b970 <n25q256a_erase+0x1b0>)
    b91a:	4798      	blx	r3
    b91c:	4603      	mov	r3, r0
    b91e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b922:	2b00      	cmp	r3, #0
    b924:	d0f1      	beq.n	b90a <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    b926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b928:	2b00      	cmp	r3, #0
    b92a:	d1a5      	bne.n	b878 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b92c:	bf00      	nop
    b92e:	7d3b      	ldrb	r3, [r7, #20]
    b930:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b934:	b2db      	uxtb	r3, r3
    b936:	2270      	movs	r2, #112	; 0x70
    b938:	4619      	mov	r1, r3
    b93a:	68f8      	ldr	r0, [r7, #12]
    b93c:	4b0c      	ldr	r3, [pc, #48]	; (b970 <n25q256a_erase+0x1b0>)
    b93e:	4798      	blx	r3
    b940:	4603      	mov	r3, r0
    b942:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b946:	2b00      	cmp	r3, #0
    b948:	d0f1      	beq.n	b92e <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    b94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b94c:	7b5b      	ldrb	r3, [r3, #13]
    b94e:	2b00      	cmp	r3, #0
    b950:	d003      	beq.n	b95a <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    b952:	2101      	movs	r1, #1
    b954:	68f8      	ldr	r0, [r7, #12]
    b956:	4b07      	ldr	r3, [pc, #28]	; (b974 <n25q256a_erase+0x1b4>)
    b958:	4798      	blx	r3
	}
	return rc;
    b95a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    b95c:	4618      	mov	r0, r3
    b95e:	3740      	adds	r7, #64	; 0x40
    b960:	46bd      	mov	sp, r7
    b962:	bd80      	pop	{r7, pc}
    b964:	001fffff 	.word	0x001fffff
    b968:	0000b421 	.word	0x0000b421
    b96c:	0000215d 	.word	0x0000215d
    b970:	0000b2e5 	.word	0x0000b2e5
    b974:	0000b219 	.word	0x0000b219

0000b978 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    b978:	b590      	push	{r4, r7, lr}
    b97a:	b085      	sub	sp, #20
    b97c:	af00      	add	r7, sp, #0
    b97e:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    b980:	687b      	ldr	r3, [r7, #4]
    b982:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b984:	68fb      	ldr	r3, [r7, #12]
    b986:	7b1b      	ldrb	r3, [r3, #12]
    b988:	2b00      	cmp	r3, #0
    b98a:	d001      	beq.n	b990 <n25q256a_enable_xip+0x18>
    b98c:	2306      	movs	r3, #6
    b98e:	e000      	b.n	b992 <n25q256a_enable_xip+0x1a>
    b990:	2300      	movs	r3, #0
    b992:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    b994:	68fb      	ldr	r3, [r7, #12]
    b996:	7b5b      	ldrb	r3, [r3, #13]
    b998:	2b00      	cmp	r3, #0
    b99a:	d129      	bne.n	b9f0 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    b99c:	7afb      	ldrb	r3, [r7, #11]
    b99e:	2285      	movs	r2, #133	; 0x85
    b9a0:	4619      	mov	r1, r3
    b9a2:	6878      	ldr	r0, [r7, #4]
    b9a4:	4b15      	ldr	r3, [pc, #84]	; (b9fc <n25q256a_enable_xip+0x84>)
    b9a6:	4798      	blx	r3
    b9a8:	4603      	mov	r3, r0
    b9aa:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    b9ac:	7abb      	ldrb	r3, [r7, #10]
    b9ae:	f003 0308 	and.w	r3, r3, #8
    b9b2:	2b00      	cmp	r3, #0
    b9b4:	d015      	beq.n	b9e2 <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    b9b6:	7abb      	ldrb	r3, [r7, #10]
    b9b8:	f023 0308 	bic.w	r3, r3, #8
    b9bc:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    b9be:	7abb      	ldrb	r3, [r7, #10]
    b9c0:	7af9      	ldrb	r1, [r7, #11]
    b9c2:	2281      	movs	r2, #129	; 0x81
    b9c4:	6878      	ldr	r0, [r7, #4]
    b9c6:	4c0e      	ldr	r4, [pc, #56]	; (ba00 <n25q256a_enable_xip+0x88>)
    b9c8:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b9ca:	bf00      	nop
    b9cc:	7afb      	ldrb	r3, [r7, #11]
    b9ce:	2270      	movs	r2, #112	; 0x70
    b9d0:	4619      	mov	r1, r3
    b9d2:	6878      	ldr	r0, [r7, #4]
    b9d4:	4b09      	ldr	r3, [pc, #36]	; (b9fc <n25q256a_enable_xip+0x84>)
    b9d6:	4798      	blx	r3
    b9d8:	4603      	mov	r3, r0
    b9da:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b9de:	2b00      	cmp	r3, #0
    b9e0:	d0f4      	beq.n	b9cc <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    b9e2:	68fb      	ldr	r3, [r7, #12]
    b9e4:	2201      	movs	r2, #1
    b9e6:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    b9e8:	2101      	movs	r1, #1
    b9ea:	6878      	ldr	r0, [r7, #4]
    b9ec:	4b05      	ldr	r3, [pc, #20]	; (ba04 <n25q256a_enable_xip+0x8c>)
    b9ee:	4798      	blx	r3
	}
	return ERR_NONE;
    b9f0:	2300      	movs	r3, #0
}
    b9f2:	4618      	mov	r0, r3
    b9f4:	3714      	adds	r7, #20
    b9f6:	46bd      	mov	sp, r7
    b9f8:	bd90      	pop	{r4, r7, pc}
    b9fa:	bf00      	nop
    b9fc:	0000b2e5 	.word	0x0000b2e5
    ba00:	0000b381 	.word	0x0000b381
    ba04:	0000b219 	.word	0x0000b219

0000ba08 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    ba08:	b580      	push	{r7, lr}
    ba0a:	b086      	sub	sp, #24
    ba0c:	af00      	add	r7, sp, #0
    ba0e:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    ba10:	687b      	ldr	r3, [r7, #4]
    ba12:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    ba14:	687b      	ldr	r3, [r7, #4]
    ba16:	681b      	ldr	r3, [r3, #0]
    ba18:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    ba1a:	697b      	ldr	r3, [r7, #20]
    ba1c:	7b1b      	ldrb	r3, [r3, #12]
    ba1e:	2b00      	cmp	r3, #0
    ba20:	d001      	beq.n	ba26 <n25q256a_disable_xip+0x1e>
    ba22:	2306      	movs	r3, #6
    ba24:	e000      	b.n	ba28 <n25q256a_disable_xip+0x20>
    ba26:	2300      	movs	r3, #0
    ba28:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    ba2a:	2100      	movs	r1, #0
    ba2c:	6878      	ldr	r0, [r7, #4]
    ba2e:	4b15      	ldr	r3, [pc, #84]	; (ba84 <n25q256a_disable_xip+0x7c>)
    ba30:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    ba32:	7bfb      	ldrb	r3, [r7, #15]
    ba34:	2285      	movs	r2, #133	; 0x85
    ba36:	4619      	mov	r1, r3
    ba38:	6878      	ldr	r0, [r7, #4]
    ba3a:	4b13      	ldr	r3, [pc, #76]	; (ba88 <n25q256a_disable_xip+0x80>)
    ba3c:	4798      	blx	r3
    ba3e:	4603      	mov	r3, r0
    ba40:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    ba42:	7bbb      	ldrb	r3, [r7, #14]
    ba44:	f003 0308 	and.w	r3, r3, #8
    ba48:	2b00      	cmp	r3, #0
    ba4a:	d113      	bne.n	ba74 <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    ba4c:	697b      	ldr	r3, [r7, #20]
    ba4e:	689b      	ldr	r3, [r3, #8]
    ba50:	2b00      	cmp	r3, #0
    ba52:	d00f      	beq.n	ba74 <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    ba54:	693b      	ldr	r3, [r7, #16]
    ba56:	681b      	ldr	r3, [r3, #0]
    ba58:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    ba5a:	6938      	ldr	r0, [r7, #16]
    ba5c:	4b0b      	ldr	r3, [pc, #44]	; (ba8c <n25q256a_disable_xip+0x84>)
    ba5e:	4798      	blx	r3
			n25q->pin_exit_xip();
    ba60:	697b      	ldr	r3, [r7, #20]
    ba62:	689b      	ldr	r3, [r3, #8]
    ba64:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    ba66:	68b9      	ldr	r1, [r7, #8]
    ba68:	6938      	ldr	r0, [r7, #16]
    ba6a:	4b09      	ldr	r3, [pc, #36]	; (ba90 <n25q256a_disable_xip+0x88>)
    ba6c:	4798      	blx	r3
			qspi_sync_enable(descr);
    ba6e:	6938      	ldr	r0, [r7, #16]
    ba70:	4b08      	ldr	r3, [pc, #32]	; (ba94 <n25q256a_disable_xip+0x8c>)
    ba72:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    ba74:	697b      	ldr	r3, [r7, #20]
    ba76:	2200      	movs	r2, #0
    ba78:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    ba7a:	2300      	movs	r3, #0
}
    ba7c:	4618      	mov	r0, r3
    ba7e:	3718      	adds	r7, #24
    ba80:	46bd      	mov	sp, r7
    ba82:	bd80      	pop	{r7, pc}
    ba84:	0000b219 	.word	0x0000b219
    ba88:	0000b2e5 	.word	0x0000b2e5
    ba8c:	00002121 	.word	0x00002121
    ba90:	00002099 	.word	0x00002099
    ba94:	000020e5 	.word	0x000020e5

0000ba98 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    ba98:	b480      	push	{r7}
    ba9a:	b085      	sub	sp, #20
    ba9c:	af00      	add	r7, sp, #0
    ba9e:	60f8      	str	r0, [r7, #12]
    baa0:	60b9      	str	r1, [r7, #8]
    baa2:	607a      	str	r2, [r7, #4]
	me->io        = io;
    baa4:	68fb      	ldr	r3, [r7, #12]
    baa6:	68ba      	ldr	r2, [r7, #8]
    baa8:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    baaa:	68fb      	ldr	r3, [r7, #12]
    baac:	687a      	ldr	r2, [r7, #4]
    baae:	605a      	str	r2, [r3, #4]

	return me;
    bab0:	68fb      	ldr	r3, [r7, #12]
}
    bab2:	4618      	mov	r0, r3
    bab4:	3714      	adds	r7, #20
    bab6:	46bd      	mov	sp, r7
    bab8:	f85d 7b04 	ldr.w	r7, [sp], #4
    babc:	4770      	bx	lr

0000babe <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    babe:	b480      	push	{r7}
    bac0:	b083      	sub	sp, #12
    bac2:	af00      	add	r7, sp, #0
    bac4:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    bac6:	687b      	ldr	r3, [r7, #4]
    bac8:	781b      	ldrb	r3, [r3, #0]
    baca:	b29a      	uxth	r2, r3
    bacc:	687b      	ldr	r3, [r7, #4]
    bace:	3301      	adds	r3, #1
    bad0:	781b      	ldrb	r3, [r3, #0]
    bad2:	b29b      	uxth	r3, r3
    bad4:	021b      	lsls	r3, r3, #8
    bad6:	b29b      	uxth	r3, r3
    bad8:	4413      	add	r3, r2
    bada:	b29b      	uxth	r3, r3
}
    badc:	4618      	mov	r0, r3
    bade:	370c      	adds	r7, #12
    bae0:	46bd      	mov	sp, r7
    bae2:	f85d 7b04 	ldr.w	r7, [sp], #4
    bae6:	4770      	bx	lr

0000bae8 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    bae8:	b480      	push	{r7}
    baea:	b083      	sub	sp, #12
    baec:	af00      	add	r7, sp, #0
    baee:	6078      	str	r0, [r7, #4]
	return desc[0];
    baf0:	687b      	ldr	r3, [r7, #4]
    baf2:	781b      	ldrb	r3, [r3, #0]
}
    baf4:	4618      	mov	r0, r3
    baf6:	370c      	adds	r7, #12
    baf8:	46bd      	mov	sp, r7
    bafa:	f85d 7b04 	ldr.w	r7, [sp], #4
    bafe:	4770      	bx	lr

0000bb00 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    bb00:	b580      	push	{r7, lr}
    bb02:	b082      	sub	sp, #8
    bb04:	af00      	add	r7, sp, #0
    bb06:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    bb08:	6878      	ldr	r0, [r7, #4]
    bb0a:	4b05      	ldr	r3, [pc, #20]	; (bb20 <usb_desc_next+0x20>)
    bb0c:	4798      	blx	r3
    bb0e:	4603      	mov	r3, r0
    bb10:	461a      	mov	r2, r3
    bb12:	687b      	ldr	r3, [r7, #4]
    bb14:	4413      	add	r3, r2
}
    bb16:	4618      	mov	r0, r3
    bb18:	3708      	adds	r7, #8
    bb1a:	46bd      	mov	sp, r7
    bb1c:	bd80      	pop	{r7, pc}
    bb1e:	bf00      	nop
    bb20:	0000bae9 	.word	0x0000bae9

0000bb24 <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    bb24:	b580      	push	{r7, lr}
    bb26:	b08c      	sub	sp, #48	; 0x30
    bb28:	af00      	add	r7, sp, #0
    bb2a:	6078      	str	r0, [r7, #4]
    bb2c:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    bb2e:	687b      	ldr	r3, [r7, #4]
    bb30:	689b      	ldr	r3, [r3, #8]
    bb32:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    bb34:	683b      	ldr	r3, [r7, #0]
    bb36:	681b      	ldr	r3, [r3, #0]
    bb38:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    bb3a:	2300      	movs	r3, #0
    bb3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    bb40:	e08f      	b.n	bc62 <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    bb42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bb44:	2b00      	cmp	r3, #0
    bb46:	d102      	bne.n	bb4e <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    bb48:	f06f 0309 	mvn.w	r3, #9
    bb4c:	e092      	b.n	bc74 <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    bb4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bb50:	789b      	ldrb	r3, [r3, #2]
    bb52:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    bb54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bb56:	795b      	ldrb	r3, [r3, #5]
    bb58:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    bb5a:	7c7b      	ldrb	r3, [r7, #17]
    bb5c:	2b02      	cmp	r3, #2
    bb5e:	d002      	beq.n	bb66 <cdcdf_acm_enable+0x42>
    bb60:	7c7b      	ldrb	r3, [r7, #17]
    bb62:	2b0a      	cmp	r3, #10
    bb64:	d121      	bne.n	bbaa <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    bb66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bb6a:	6a3a      	ldr	r2, [r7, #32]
    bb6c:	5cd2      	ldrb	r2, [r2, r3]
    bb6e:	7bbb      	ldrb	r3, [r7, #14]
    bb70:	429a      	cmp	r2, r3
    bb72:	d102      	bne.n	bb7a <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    bb74:	f06f 0311 	mvn.w	r3, #17
    bb78:	e07c      	b.n	bc74 <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    bb7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bb7e:	6a3a      	ldr	r2, [r7, #32]
    bb80:	5cd3      	ldrb	r3, [r2, r3]
    bb82:	2bff      	cmp	r3, #255	; 0xff
    bb84:	d002      	beq.n	bb8c <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    bb86:	f06f 031b 	mvn.w	r3, #27
    bb8a:	e073      	b.n	bc74 <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    bb8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bb90:	7bb9      	ldrb	r1, [r7, #14]
    bb92:	6a3a      	ldr	r2, [r7, #32]
    bb94:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    bb96:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    bb98:	683b      	ldr	r3, [r7, #0]
    bb9a:	685b      	ldr	r3, [r3, #4]
    bb9c:	2205      	movs	r2, #5
    bb9e:	4619      	mov	r1, r3
    bba0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    bba2:	4b36      	ldr	r3, [pc, #216]	; (bc7c <cdcdf_acm_enable+0x158>)
    bba4:	4798      	blx	r3
    bba6:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    bba8:	e047      	b.n	bc3a <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    bbaa:	f06f 0309 	mvn.w	r3, #9
    bbae:	e061      	b.n	bc74 <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    bbb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bbb2:	789b      	ldrb	r3, [r3, #2]
    bbb4:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    bbb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bbb8:	78db      	ldrb	r3, [r3, #3]
    bbba:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    bbbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bbbe:	3304      	adds	r3, #4
    bbc0:	4618      	mov	r0, r3
    bbc2:	4b2f      	ldr	r3, [pc, #188]	; (bc80 <cdcdf_acm_enable+0x15c>)
    bbc4:	4798      	blx	r3
    bbc6:	4603      	mov	r3, r0
    bbc8:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    bbca:	7ebb      	ldrb	r3, [r7, #26]
    bbcc:	7ef9      	ldrb	r1, [r7, #27]
    bbce:	8bba      	ldrh	r2, [r7, #28]
    bbd0:	4618      	mov	r0, r3
    bbd2:	4b2c      	ldr	r3, [pc, #176]	; (bc84 <cdcdf_acm_enable+0x160>)
    bbd4:	4798      	blx	r3
    bbd6:	4603      	mov	r3, r0
    bbd8:	2b00      	cmp	r3, #0
    bbda:	d002      	beq.n	bbe2 <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    bbdc:	f06f 0313 	mvn.w	r3, #19
    bbe0:	e048      	b.n	bc74 <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    bbe2:	7ebb      	ldrb	r3, [r7, #26]
    bbe4:	b25b      	sxtb	r3, r3
    bbe6:	2b00      	cmp	r3, #0
    bbe8:	da0f      	bge.n	bc0a <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    bbea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bbee:	7eb9      	ldrb	r1, [r7, #26]
    bbf0:	6a3a      	ldr	r2, [r7, #32]
    bbf2:	4413      	add	r3, r2
    bbf4:	460a      	mov	r2, r1
    bbf6:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    bbf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bbfc:	6a3a      	ldr	r2, [r7, #32]
    bbfe:	4413      	add	r3, r2
    bc00:	789b      	ldrb	r3, [r3, #2]
    bc02:	4618      	mov	r0, r3
    bc04:	4b20      	ldr	r3, [pc, #128]	; (bc88 <cdcdf_acm_enable+0x164>)
    bc06:	4798      	blx	r3
    bc08:	e007      	b.n	bc1a <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    bc0a:	7eba      	ldrb	r2, [r7, #26]
    bc0c:	6a3b      	ldr	r3, [r7, #32]
    bc0e:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    bc10:	6a3b      	ldr	r3, [r7, #32]
    bc12:	791b      	ldrb	r3, [r3, #4]
    bc14:	4618      	mov	r0, r3
    bc16:	4b1c      	ldr	r3, [pc, #112]	; (bc88 <cdcdf_acm_enable+0x164>)
    bc18:	4798      	blx	r3
			}
			desc->sod = ep;
    bc1a:	683b      	ldr	r3, [r7, #0]
    bc1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    bc1e:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    bc20:	683b      	ldr	r3, [r7, #0]
    bc22:	681b      	ldr	r3, [r3, #0]
    bc24:	4618      	mov	r0, r3
    bc26:	4b19      	ldr	r3, [pc, #100]	; (bc8c <cdcdf_acm_enable+0x168>)
    bc28:	4798      	blx	r3
    bc2a:	4602      	mov	r2, r0
    bc2c:	683b      	ldr	r3, [r7, #0]
    bc2e:	685b      	ldr	r3, [r3, #4]
    bc30:	4619      	mov	r1, r3
    bc32:	4610      	mov	r0, r2
    bc34:	4b16      	ldr	r3, [pc, #88]	; (bc90 <cdcdf_acm_enable+0x16c>)
    bc36:	4798      	blx	r3
    bc38:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    bc3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bc3c:	2b00      	cmp	r3, #0
    bc3e:	d1b7      	bne.n	bbb0 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    bc40:	683b      	ldr	r3, [r7, #0]
    bc42:	681b      	ldr	r3, [r3, #0]
    bc44:	4618      	mov	r0, r3
    bc46:	4b11      	ldr	r3, [pc, #68]	; (bc8c <cdcdf_acm_enable+0x168>)
    bc48:	4798      	blx	r3
    bc4a:	683b      	ldr	r3, [r7, #0]
    bc4c:	685b      	ldr	r3, [r3, #4]
    bc4e:	2204      	movs	r2, #4
    bc50:	4619      	mov	r1, r3
    bc52:	4b0a      	ldr	r3, [pc, #40]	; (bc7c <cdcdf_acm_enable+0x158>)
    bc54:	4798      	blx	r3
    bc56:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    bc58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bc5c:	3301      	adds	r3, #1
    bc5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    bc62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bc66:	2b01      	cmp	r3, #1
    bc68:	f67f af6b 	bls.w	bb42 <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    bc6c:	4b09      	ldr	r3, [pc, #36]	; (bc94 <cdcdf_acm_enable+0x170>)
    bc6e:	2201      	movs	r2, #1
    bc70:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    bc72:	2300      	movs	r3, #0
}
    bc74:	4618      	mov	r0, r3
    bc76:	3730      	adds	r7, #48	; 0x30
    bc78:	46bd      	mov	sp, r7
    bc7a:	bd80      	pop	{r7, pc}
    bc7c:	0000cee5 	.word	0x0000cee5
    bc80:	0000babf 	.word	0x0000babf
    bc84:	00003091 	.word	0x00003091
    bc88:	0000317d 	.word	0x0000317d
    bc8c:	0000bb01 	.word	0x0000bb01
    bc90:	0000cf41 	.word	0x0000cf41
    bc94:	20000bd4 	.word	0x20000bd4

0000bc98 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    bc98:	b580      	push	{r7, lr}
    bc9a:	b088      	sub	sp, #32
    bc9c:	af00      	add	r7, sp, #0
    bc9e:	6078      	str	r0, [r7, #4]
    bca0:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    bca2:	687b      	ldr	r3, [r7, #4]
    bca4:	689b      	ldr	r3, [r3, #8]
    bca6:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    bca8:	683b      	ldr	r3, [r7, #0]
    bcaa:	2b00      	cmp	r3, #0
    bcac:	d00c      	beq.n	bcc8 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    bcae:	683b      	ldr	r3, [r7, #0]
    bcb0:	681b      	ldr	r3, [r3, #0]
    bcb2:	795b      	ldrb	r3, [r3, #5]
    bcb4:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    bcb6:	7c7b      	ldrb	r3, [r7, #17]
    bcb8:	2b02      	cmp	r3, #2
    bcba:	d005      	beq.n	bcc8 <cdcdf_acm_disable+0x30>
    bcbc:	7c7b      	ldrb	r3, [r7, #17]
    bcbe:	2b0a      	cmp	r3, #10
    bcc0:	d002      	beq.n	bcc8 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    bcc2:	f06f 0309 	mvn.w	r3, #9
    bcc6:	e035      	b.n	bd34 <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    bcc8:	2300      	movs	r3, #0
    bcca:	77fb      	strb	r3, [r7, #31]
    bccc:	e01f      	b.n	bd0e <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    bcce:	7ffb      	ldrb	r3, [r7, #31]
    bcd0:	69ba      	ldr	r2, [r7, #24]
    bcd2:	5cd3      	ldrb	r3, [r2, r3]
    bcd4:	2bff      	cmp	r3, #255	; 0xff
    bcd6:	d016      	beq.n	bd06 <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    bcd8:	7ffb      	ldrb	r3, [r7, #31]
    bcda:	69ba      	ldr	r2, [r7, #24]
    bcdc:	21ff      	movs	r1, #255	; 0xff
    bcde:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    bce0:	7ffb      	ldrb	r3, [r7, #31]
    bce2:	69ba      	ldr	r2, [r7, #24]
    bce4:	4413      	add	r3, r2
    bce6:	789b      	ldrb	r3, [r3, #2]
    bce8:	2bff      	cmp	r3, #255	; 0xff
    bcea:	d00d      	beq.n	bd08 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    bcec:	7ffb      	ldrb	r3, [r7, #31]
    bcee:	69ba      	ldr	r2, [r7, #24]
    bcf0:	4413      	add	r3, r2
    bcf2:	789b      	ldrb	r3, [r3, #2]
    bcf4:	4618      	mov	r0, r3
    bcf6:	4b11      	ldr	r3, [pc, #68]	; (bd3c <cdcdf_acm_disable+0xa4>)
    bcf8:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    bcfa:	7ffb      	ldrb	r3, [r7, #31]
    bcfc:	69ba      	ldr	r2, [r7, #24]
    bcfe:	4413      	add	r3, r2
    bd00:	22ff      	movs	r2, #255	; 0xff
    bd02:	709a      	strb	r2, [r3, #2]
    bd04:	e000      	b.n	bd08 <cdcdf_acm_disable+0x70>
			continue;
    bd06:	bf00      	nop
	for (i = 0; i < 2; i++) {
    bd08:	7ffb      	ldrb	r3, [r7, #31]
    bd0a:	3301      	adds	r3, #1
    bd0c:	77fb      	strb	r3, [r7, #31]
    bd0e:	7ffb      	ldrb	r3, [r7, #31]
    bd10:	2b01      	cmp	r3, #1
    bd12:	d9dc      	bls.n	bcce <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    bd14:	69bb      	ldr	r3, [r7, #24]
    bd16:	791b      	ldrb	r3, [r3, #4]
    bd18:	2bff      	cmp	r3, #255	; 0xff
    bd1a:	d007      	beq.n	bd2c <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    bd1c:	69bb      	ldr	r3, [r7, #24]
    bd1e:	791b      	ldrb	r3, [r3, #4]
    bd20:	4618      	mov	r0, r3
    bd22:	4b06      	ldr	r3, [pc, #24]	; (bd3c <cdcdf_acm_disable+0xa4>)
    bd24:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    bd26:	69bb      	ldr	r3, [r7, #24]
    bd28:	22ff      	movs	r2, #255	; 0xff
    bd2a:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    bd2c:	4b04      	ldr	r3, [pc, #16]	; (bd40 <cdcdf_acm_disable+0xa8>)
    bd2e:	2200      	movs	r2, #0
    bd30:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    bd32:	2300      	movs	r3, #0
}
    bd34:	4618      	mov	r0, r3
    bd36:	3720      	adds	r7, #32
    bd38:	46bd      	mov	sp, r7
    bd3a:	bd80      	pop	{r7, pc}
    bd3c:	0000312d 	.word	0x0000312d
    bd40:	20000bd4 	.word	0x20000bd4

0000bd44 <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    bd44:	b580      	push	{r7, lr}
    bd46:	b084      	sub	sp, #16
    bd48:	af00      	add	r7, sp, #0
    bd4a:	60f8      	str	r0, [r7, #12]
    bd4c:	460b      	mov	r3, r1
    bd4e:	607a      	str	r2, [r7, #4]
    bd50:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    bd52:	7afb      	ldrb	r3, [r7, #11]
    bd54:	2b01      	cmp	r3, #1
    bd56:	d009      	beq.n	bd6c <cdcdf_acm_ctrl+0x28>
    bd58:	2b02      	cmp	r3, #2
    bd5a:	d00d      	beq.n	bd78 <cdcdf_acm_ctrl+0x34>
    bd5c:	2b00      	cmp	r3, #0
    bd5e:	d10e      	bne.n	bd7e <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    bd60:	6879      	ldr	r1, [r7, #4]
    bd62:	68f8      	ldr	r0, [r7, #12]
    bd64:	4b09      	ldr	r3, [pc, #36]	; (bd8c <cdcdf_acm_ctrl+0x48>)
    bd66:	4798      	blx	r3
    bd68:	4603      	mov	r3, r0
    bd6a:	e00a      	b.n	bd82 <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    bd6c:	6879      	ldr	r1, [r7, #4]
    bd6e:	68f8      	ldr	r0, [r7, #12]
    bd70:	4b07      	ldr	r3, [pc, #28]	; (bd90 <cdcdf_acm_ctrl+0x4c>)
    bd72:	4798      	blx	r3
    bd74:	4603      	mov	r3, r0
    bd76:	e004      	b.n	bd82 <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    bd78:	f06f 031a 	mvn.w	r3, #26
    bd7c:	e001      	b.n	bd82 <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    bd7e:	f06f 030c 	mvn.w	r3, #12
	}
}
    bd82:	4618      	mov	r0, r3
    bd84:	3710      	adds	r7, #16
    bd86:	46bd      	mov	sp, r7
    bd88:	bd80      	pop	{r7, pc}
    bd8a:	bf00      	nop
    bd8c:	0000bb25 	.word	0x0000bb25
    bd90:	0000bc99 	.word	0x0000bc99

0000bd94 <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    bd94:	b590      	push	{r4, r7, lr}
    bd96:	b087      	sub	sp, #28
    bd98:	af00      	add	r7, sp, #0
    bd9a:	4603      	mov	r3, r0
    bd9c:	6039      	str	r1, [r7, #0]
    bd9e:	71fb      	strb	r3, [r7, #7]
    bda0:	4613      	mov	r3, r2
    bda2:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    bda4:	683b      	ldr	r3, [r7, #0]
    bda6:	799a      	ldrb	r2, [r3, #6]
    bda8:	79db      	ldrb	r3, [r3, #7]
    bdaa:	021b      	lsls	r3, r3, #8
    bdac:	4313      	orrs	r3, r2
    bdae:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    bdb0:	4b2b      	ldr	r3, [pc, #172]	; (be60 <cdcdf_acm_set_req+0xcc>)
    bdb2:	4798      	blx	r3
    bdb4:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    bdb6:	683b      	ldr	r3, [r7, #0]
    bdb8:	785b      	ldrb	r3, [r3, #1]
    bdba:	2b20      	cmp	r3, #32
    bdbc:	d002      	beq.n	bdc4 <cdcdf_acm_set_req+0x30>
    bdbe:	2b22      	cmp	r3, #34	; 0x22
    bdc0:	d034      	beq.n	be2c <cdcdf_acm_set_req+0x98>
    bdc2:	e046      	b.n	be52 <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    bdc4:	8afb      	ldrh	r3, [r7, #22]
    bdc6:	2b07      	cmp	r3, #7
    bdc8:	d002      	beq.n	bdd0 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    bdca:	f04f 33ff 	mov.w	r3, #4294967295
    bdce:	e042      	b.n	be56 <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    bdd0:	79bb      	ldrb	r3, [r7, #6]
    bdd2:	2b00      	cmp	r3, #0
    bdd4:	d107      	bne.n	bde6 <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    bdd6:	8afa      	ldrh	r2, [r7, #22]
    bdd8:	79f8      	ldrb	r0, [r7, #7]
    bdda:	2300      	movs	r3, #0
    bddc:	6939      	ldr	r1, [r7, #16]
    bdde:	4c21      	ldr	r4, [pc, #132]	; (be64 <cdcdf_acm_set_req+0xd0>)
    bde0:	47a0      	blx	r4
    bde2:	4603      	mov	r3, r0
    bde4:	e037      	b.n	be56 <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    bde6:	693a      	ldr	r2, [r7, #16]
    bde8:	f107 0308 	add.w	r3, r7, #8
    bdec:	6810      	ldr	r0, [r2, #0]
    bdee:	6018      	str	r0, [r3, #0]
    bdf0:	8891      	ldrh	r1, [r2, #4]
    bdf2:	7992      	ldrb	r2, [r2, #6]
    bdf4:	8099      	strh	r1, [r3, #4]
    bdf6:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    bdf8:	4b1b      	ldr	r3, [pc, #108]	; (be68 <cdcdf_acm_set_req+0xd4>)
    bdfa:	681b      	ldr	r3, [r3, #0]
    bdfc:	2b00      	cmp	r3, #0
    bdfe:	d008      	beq.n	be12 <cdcdf_acm_set_req+0x7e>
    be00:	4b19      	ldr	r3, [pc, #100]	; (be68 <cdcdf_acm_set_req+0xd4>)
    be02:	681b      	ldr	r3, [r3, #0]
    be04:	f107 0208 	add.w	r2, r7, #8
    be08:	4610      	mov	r0, r2
    be0a:	4798      	blx	r3
    be0c:	4603      	mov	r3, r0
    be0e:	2b00      	cmp	r3, #0
    be10:	d00a      	beq.n	be28 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    be12:	4b16      	ldr	r3, [pc, #88]	; (be6c <cdcdf_acm_set_req+0xd8>)
    be14:	f107 0208 	add.w	r2, r7, #8
    be18:	e892 0003 	ldmia.w	r2, {r0, r1}
    be1c:	6018      	str	r0, [r3, #0]
    be1e:	3304      	adds	r3, #4
    be20:	8019      	strh	r1, [r3, #0]
    be22:	3302      	adds	r3, #2
    be24:	0c0a      	lsrs	r2, r1, #16
    be26:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    be28:	2300      	movs	r3, #0
    be2a:	e014      	b.n	be56 <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    be2c:	2300      	movs	r3, #0
    be2e:	2200      	movs	r2, #0
    be30:	2100      	movs	r1, #0
    be32:	2000      	movs	r0, #0
    be34:	4c0b      	ldr	r4, [pc, #44]	; (be64 <cdcdf_acm_set_req+0xd0>)
    be36:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    be38:	4b0d      	ldr	r3, [pc, #52]	; (be70 <cdcdf_acm_set_req+0xdc>)
    be3a:	681b      	ldr	r3, [r3, #0]
    be3c:	2b00      	cmp	r3, #0
    be3e:	d006      	beq.n	be4e <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    be40:	4b0b      	ldr	r3, [pc, #44]	; (be70 <cdcdf_acm_set_req+0xdc>)
    be42:	681b      	ldr	r3, [r3, #0]
    be44:	683a      	ldr	r2, [r7, #0]
    be46:	8852      	ldrh	r2, [r2, #2]
    be48:	b292      	uxth	r2, r2
    be4a:	4610      	mov	r0, r2
    be4c:	4798      	blx	r3
		}
		return ERR_NONE;
    be4e:	2300      	movs	r3, #0
    be50:	e001      	b.n	be56 <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    be52:	f06f 030c 	mvn.w	r3, #12
	}
}
    be56:	4618      	mov	r0, r3
    be58:	371c      	adds	r7, #28
    be5a:	46bd      	mov	sp, r7
    be5c:	bd90      	pop	{r4, r7, pc}
    be5e:	bf00      	nop
    be60:	0000cde1 	.word	0x0000cde1
    be64:	0000cc55 	.word	0x0000cc55
    be68:	20000be8 	.word	0x20000be8
    be6c:	20000bdc 	.word	0x20000bdc
    be70:	20000be4 	.word	0x20000be4

0000be74 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    be74:	b590      	push	{r4, r7, lr}
    be76:	b085      	sub	sp, #20
    be78:	af00      	add	r7, sp, #0
    be7a:	4603      	mov	r3, r0
    be7c:	6039      	str	r1, [r7, #0]
    be7e:	71fb      	strb	r3, [r7, #7]
    be80:	4613      	mov	r3, r2
    be82:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    be84:	683b      	ldr	r3, [r7, #0]
    be86:	799a      	ldrb	r2, [r3, #6]
    be88:	79db      	ldrb	r3, [r3, #7]
    be8a:	021b      	lsls	r3, r3, #8
    be8c:	4313      	orrs	r3, r2
    be8e:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    be90:	79bb      	ldrb	r3, [r7, #6]
    be92:	2b01      	cmp	r3, #1
    be94:	d101      	bne.n	be9a <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    be96:	2300      	movs	r3, #0
    be98:	e013      	b.n	bec2 <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    be9a:	683b      	ldr	r3, [r7, #0]
    be9c:	785b      	ldrb	r3, [r3, #1]
    be9e:	2b21      	cmp	r3, #33	; 0x21
    bea0:	d10d      	bne.n	bebe <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    bea2:	89fb      	ldrh	r3, [r7, #14]
    bea4:	2b07      	cmp	r3, #7
    bea6:	d002      	beq.n	beae <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    bea8:	f04f 33ff 	mov.w	r3, #4294967295
    beac:	e009      	b.n	bec2 <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    beae:	89fa      	ldrh	r2, [r7, #14]
    beb0:	79f8      	ldrb	r0, [r7, #7]
    beb2:	2300      	movs	r3, #0
    beb4:	4905      	ldr	r1, [pc, #20]	; (becc <cdcdf_acm_get_req+0x58>)
    beb6:	4c06      	ldr	r4, [pc, #24]	; (bed0 <cdcdf_acm_get_req+0x5c>)
    beb8:	47a0      	blx	r4
    beba:	4603      	mov	r3, r0
    bebc:	e001      	b.n	bec2 <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    bebe:	f06f 030c 	mvn.w	r3, #12
	}
}
    bec2:	4618      	mov	r0, r3
    bec4:	3714      	adds	r7, #20
    bec6:	46bd      	mov	sp, r7
    bec8:	bd90      	pop	{r4, r7, pc}
    beca:	bf00      	nop
    becc:	20000bdc 	.word	0x20000bdc
    bed0:	0000cc55 	.word	0x0000cc55

0000bed4 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    bed4:	b580      	push	{r7, lr}
    bed6:	b082      	sub	sp, #8
    bed8:	af00      	add	r7, sp, #0
    beda:	4603      	mov	r3, r0
    bedc:	6039      	str	r1, [r7, #0]
    bede:	71fb      	strb	r3, [r7, #7]
    bee0:	4613      	mov	r3, r2
    bee2:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    bee4:	683b      	ldr	r3, [r7, #0]
    bee6:	781b      	ldrb	r3, [r3, #0]
    bee8:	095b      	lsrs	r3, r3, #5
    beea:	b2db      	uxtb	r3, r3
    beec:	f003 0303 	and.w	r3, r3, #3
    bef0:	2b01      	cmp	r3, #1
    bef2:	d002      	beq.n	befa <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    bef4:	f06f 0309 	mvn.w	r3, #9
    bef8:	e026      	b.n	bf48 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    befa:	683b      	ldr	r3, [r7, #0]
    befc:	889b      	ldrh	r3, [r3, #4]
    befe:	b29a      	uxth	r2, r3
    bf00:	4b13      	ldr	r3, [pc, #76]	; (bf50 <cdcdf_acm_req+0x7c>)
    bf02:	781b      	ldrb	r3, [r3, #0]
    bf04:	b29b      	uxth	r3, r3
    bf06:	429a      	cmp	r2, r3
    bf08:	d007      	beq.n	bf1a <cdcdf_acm_req+0x46>
    bf0a:	683b      	ldr	r3, [r7, #0]
    bf0c:	889b      	ldrh	r3, [r3, #4]
    bf0e:	b29a      	uxth	r2, r3
    bf10:	4b0f      	ldr	r3, [pc, #60]	; (bf50 <cdcdf_acm_req+0x7c>)
    bf12:	785b      	ldrb	r3, [r3, #1]
    bf14:	b29b      	uxth	r3, r3
    bf16:	429a      	cmp	r2, r3
    bf18:	d114      	bne.n	bf44 <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    bf1a:	683b      	ldr	r3, [r7, #0]
    bf1c:	781b      	ldrb	r3, [r3, #0]
    bf1e:	b25b      	sxtb	r3, r3
    bf20:	2b00      	cmp	r3, #0
    bf22:	da07      	bge.n	bf34 <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    bf24:	79ba      	ldrb	r2, [r7, #6]
    bf26:	79fb      	ldrb	r3, [r7, #7]
    bf28:	6839      	ldr	r1, [r7, #0]
    bf2a:	4618      	mov	r0, r3
    bf2c:	4b09      	ldr	r3, [pc, #36]	; (bf54 <cdcdf_acm_req+0x80>)
    bf2e:	4798      	blx	r3
    bf30:	4603      	mov	r3, r0
    bf32:	e009      	b.n	bf48 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    bf34:	79ba      	ldrb	r2, [r7, #6]
    bf36:	79fb      	ldrb	r3, [r7, #7]
    bf38:	6839      	ldr	r1, [r7, #0]
    bf3a:	4618      	mov	r0, r3
    bf3c:	4b06      	ldr	r3, [pc, #24]	; (bf58 <cdcdf_acm_req+0x84>)
    bf3e:	4798      	blx	r3
    bf40:	4603      	mov	r3, r0
    bf42:	e001      	b.n	bf48 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    bf44:	f06f 0309 	mvn.w	r3, #9
	}
}
    bf48:	4618      	mov	r0, r3
    bf4a:	3708      	adds	r7, #8
    bf4c:	46bd      	mov	sp, r7
    bf4e:	bd80      	pop	{r7, pc}
    bf50:	20000bd4 	.word	0x20000bd4
    bf54:	0000be75 	.word	0x0000be75
    bf58:	0000bd95 	.word	0x0000bd95

0000bf5c <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    bf5c:	b580      	push	{r7, lr}
    bf5e:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    bf60:	4b0b      	ldr	r3, [pc, #44]	; (bf90 <cdcdf_acm_init+0x34>)
    bf62:	4798      	blx	r3
    bf64:	4603      	mov	r3, r0
    bf66:	2b01      	cmp	r3, #1
    bf68:	d902      	bls.n	bf70 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    bf6a:	f06f 0310 	mvn.w	r3, #16
    bf6e:	e00d      	b.n	bf8c <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    bf70:	4b08      	ldr	r3, [pc, #32]	; (bf94 <cdcdf_acm_init+0x38>)
    bf72:	4a09      	ldr	r2, [pc, #36]	; (bf98 <cdcdf_acm_init+0x3c>)
    bf74:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    bf76:	4b07      	ldr	r3, [pc, #28]	; (bf94 <cdcdf_acm_init+0x38>)
    bf78:	4a08      	ldr	r2, [pc, #32]	; (bf9c <cdcdf_acm_init+0x40>)
    bf7a:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    bf7c:	4805      	ldr	r0, [pc, #20]	; (bf94 <cdcdf_acm_init+0x38>)
    bf7e:	4b08      	ldr	r3, [pc, #32]	; (bfa0 <cdcdf_acm_init+0x44>)
    bf80:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    bf82:	4908      	ldr	r1, [pc, #32]	; (bfa4 <cdcdf_acm_init+0x48>)
    bf84:	2001      	movs	r0, #1
    bf86:	4b08      	ldr	r3, [pc, #32]	; (bfa8 <cdcdf_acm_init+0x4c>)
    bf88:	4798      	blx	r3
	return ERR_NONE;
    bf8a:	2300      	movs	r3, #0
}
    bf8c:	4618      	mov	r0, r3
    bf8e:	bd80      	pop	{r7, pc}
    bf90:	0000cdf9 	.word	0x0000cdf9
    bf94:	20000bc8 	.word	0x20000bc8
    bf98:	0000bd45 	.word	0x0000bd45
    bf9c:	20000bd4 	.word	0x20000bd4
    bfa0:	0000cd61 	.word	0x0000cd61
    bfa4:	2000010c 	.word	0x2000010c
    bfa8:	0000cc91 	.word	0x0000cc91

0000bfac <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    bfac:	b590      	push	{r4, r7, lr}
    bfae:	b083      	sub	sp, #12
    bfb0:	af00      	add	r7, sp, #0
    bfb2:	6078      	str	r0, [r7, #4]
    bfb4:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    bfb6:	4b0b      	ldr	r3, [pc, #44]	; (bfe4 <cdcdf_acm_read+0x38>)
    bfb8:	4798      	blx	r3
    bfba:	4603      	mov	r3, r0
    bfbc:	f083 0301 	eor.w	r3, r3, #1
    bfc0:	b2db      	uxtb	r3, r3
    bfc2:	2b00      	cmp	r3, #0
    bfc4:	d002      	beq.n	bfcc <cdcdf_acm_read+0x20>
		return ERR_DENIED;
    bfc6:	f06f 0310 	mvn.w	r3, #16
    bfca:	e007      	b.n	bfdc <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    bfcc:	4b06      	ldr	r3, [pc, #24]	; (bfe8 <cdcdf_acm_read+0x3c>)
    bfce:	7918      	ldrb	r0, [r3, #4]
    bfd0:	2300      	movs	r3, #0
    bfd2:	683a      	ldr	r2, [r7, #0]
    bfd4:	6879      	ldr	r1, [r7, #4]
    bfd6:	4c05      	ldr	r4, [pc, #20]	; (bfec <cdcdf_acm_read+0x40>)
    bfd8:	47a0      	blx	r4
    bfda:	4603      	mov	r3, r0
}
    bfdc:	4618      	mov	r0, r3
    bfde:	370c      	adds	r7, #12
    bfe0:	46bd      	mov	sp, r7
    bfe2:	bd90      	pop	{r4, r7, pc}
    bfe4:	0000c0d1 	.word	0x0000c0d1
    bfe8:	20000bd4 	.word	0x20000bd4
    bfec:	0000cc55 	.word	0x0000cc55

0000bff0 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    bff0:	b590      	push	{r4, r7, lr}
    bff2:	b083      	sub	sp, #12
    bff4:	af00      	add	r7, sp, #0
    bff6:	6078      	str	r0, [r7, #4]
    bff8:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    bffa:	4b0b      	ldr	r3, [pc, #44]	; (c028 <cdcdf_acm_write+0x38>)
    bffc:	4798      	blx	r3
    bffe:	4603      	mov	r3, r0
    c000:	f083 0301 	eor.w	r3, r3, #1
    c004:	b2db      	uxtb	r3, r3
    c006:	2b00      	cmp	r3, #0
    c008:	d002      	beq.n	c010 <cdcdf_acm_write+0x20>
		return ERR_DENIED;
    c00a:	f06f 0310 	mvn.w	r3, #16
    c00e:	e007      	b.n	c020 <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    c010:	4b06      	ldr	r3, [pc, #24]	; (c02c <cdcdf_acm_write+0x3c>)
    c012:	78d8      	ldrb	r0, [r3, #3]
    c014:	2301      	movs	r3, #1
    c016:	683a      	ldr	r2, [r7, #0]
    c018:	6879      	ldr	r1, [r7, #4]
    c01a:	4c05      	ldr	r4, [pc, #20]	; (c030 <cdcdf_acm_write+0x40>)
    c01c:	47a0      	blx	r4
    c01e:	4603      	mov	r3, r0
}
    c020:	4618      	mov	r0, r3
    c022:	370c      	adds	r7, #12
    c024:	46bd      	mov	sp, r7
    c026:	bd90      	pop	{r4, r7, pc}
    c028:	0000c0d1 	.word	0x0000c0d1
    c02c:	20000bd4 	.word	0x20000bd4
    c030:	0000cc55 	.word	0x0000cc55

0000c034 <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    c034:	b580      	push	{r7, lr}
    c036:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    c038:	4b05      	ldr	r3, [pc, #20]	; (c050 <cdcdf_acm_stop_xfer+0x1c>)
    c03a:	78db      	ldrb	r3, [r3, #3]
    c03c:	4618      	mov	r0, r3
    c03e:	4b05      	ldr	r3, [pc, #20]	; (c054 <cdcdf_acm_stop_xfer+0x20>)
    c040:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    c042:	4b03      	ldr	r3, [pc, #12]	; (c050 <cdcdf_acm_stop_xfer+0x1c>)
    c044:	791b      	ldrb	r3, [r3, #4]
    c046:	4618      	mov	r0, r3
    c048:	4b02      	ldr	r3, [pc, #8]	; (c054 <cdcdf_acm_stop_xfer+0x20>)
    c04a:	4798      	blx	r3
}
    c04c:	bf00      	nop
    c04e:	bd80      	pop	{r7, pc}
    c050:	20000bd4 	.word	0x20000bd4
    c054:	00003355 	.word	0x00003355

0000c058 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    c058:	b580      	push	{r7, lr}
    c05a:	b082      	sub	sp, #8
    c05c:	af00      	add	r7, sp, #0
    c05e:	4603      	mov	r3, r0
    c060:	6039      	str	r1, [r7, #0]
    c062:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
    c064:	79fb      	ldrb	r3, [r7, #7]
    c066:	2b03      	cmp	r3, #3
    c068:	d822      	bhi.n	c0b0 <cdcdf_acm_register_callback+0x58>
    c06a:	a201      	add	r2, pc, #4	; (adr r2, c070 <cdcdf_acm_register_callback+0x18>)
    c06c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c070:	0000c081 	.word	0x0000c081
    c074:	0000c091 	.word	0x0000c091
    c078:	0000c0a1 	.word	0x0000c0a1
    c07c:	0000c0a9 	.word	0x0000c0a9
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    c080:	4b0f      	ldr	r3, [pc, #60]	; (c0c0 <cdcdf_acm_register_callback+0x68>)
    c082:	791b      	ldrb	r3, [r3, #4]
    c084:	683a      	ldr	r2, [r7, #0]
    c086:	2102      	movs	r1, #2
    c088:	4618      	mov	r0, r3
    c08a:	4b0e      	ldr	r3, [pc, #56]	; (c0c4 <cdcdf_acm_register_callback+0x6c>)
    c08c:	4798      	blx	r3
		break;
    c08e:	e012      	b.n	c0b6 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    c090:	4b0b      	ldr	r3, [pc, #44]	; (c0c0 <cdcdf_acm_register_callback+0x68>)
    c092:	78db      	ldrb	r3, [r3, #3]
    c094:	683a      	ldr	r2, [r7, #0]
    c096:	2102      	movs	r1, #2
    c098:	4618      	mov	r0, r3
    c09a:	4b0a      	ldr	r3, [pc, #40]	; (c0c4 <cdcdf_acm_register_callback+0x6c>)
    c09c:	4798      	blx	r3
		break;
    c09e:	e00a      	b.n	c0b6 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    c0a0:	4a09      	ldr	r2, [pc, #36]	; (c0c8 <cdcdf_acm_register_callback+0x70>)
    c0a2:	683b      	ldr	r3, [r7, #0]
    c0a4:	6013      	str	r3, [r2, #0]
		break;
    c0a6:	e006      	b.n	c0b6 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    c0a8:	4a08      	ldr	r2, [pc, #32]	; (c0cc <cdcdf_acm_register_callback+0x74>)
    c0aa:	683b      	ldr	r3, [r7, #0]
    c0ac:	6013      	str	r3, [r2, #0]
		break;
    c0ae:	e002      	b.n	c0b6 <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
    c0b0:	f06f 030c 	mvn.w	r3, #12
    c0b4:	e000      	b.n	c0b8 <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
    c0b6:	2300      	movs	r3, #0
}
    c0b8:	4618      	mov	r0, r3
    c0ba:	3708      	adds	r7, #8
    c0bc:	46bd      	mov	sp, r7
    c0be:	bd80      	pop	{r7, pc}
    c0c0:	20000bd4 	.word	0x20000bd4
    c0c4:	00003481 	.word	0x00003481
    c0c8:	20000be8 	.word	0x20000be8
    c0cc:	20000be4 	.word	0x20000be4

0000c0d0 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    c0d0:	b480      	push	{r7}
    c0d2:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    c0d4:	4b03      	ldr	r3, [pc, #12]	; (c0e4 <cdcdf_acm_is_enabled+0x14>)
    c0d6:	795b      	ldrb	r3, [r3, #5]
}
    c0d8:	4618      	mov	r0, r3
    c0da:	46bd      	mov	sp, r7
    c0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    c0e0:	4770      	bx	lr
    c0e2:	bf00      	nop
    c0e4:	20000bd4 	.word	0x20000bd4

0000c0e8 <usb_get_u16>:
{
    c0e8:	b480      	push	{r7}
    c0ea:	b083      	sub	sp, #12
    c0ec:	af00      	add	r7, sp, #0
    c0ee:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    c0f0:	687b      	ldr	r3, [r7, #4]
    c0f2:	781b      	ldrb	r3, [r3, #0]
    c0f4:	b29a      	uxth	r2, r3
    c0f6:	687b      	ldr	r3, [r7, #4]
    c0f8:	3301      	adds	r3, #1
    c0fa:	781b      	ldrb	r3, [r3, #0]
    c0fc:	b29b      	uxth	r3, r3
    c0fe:	021b      	lsls	r3, r3, #8
    c100:	b29b      	uxth	r3, r3
    c102:	4413      	add	r3, r2
    c104:	b29b      	uxth	r3, r3
}
    c106:	4618      	mov	r0, r3
    c108:	370c      	adds	r7, #12
    c10a:	46bd      	mov	sp, r7
    c10c:	f85d 7b04 	ldr.w	r7, [sp], #4
    c110:	4770      	bx	lr

0000c112 <usb_desc_len>:
{
    c112:	b480      	push	{r7}
    c114:	b083      	sub	sp, #12
    c116:	af00      	add	r7, sp, #0
    c118:	6078      	str	r0, [r7, #4]
	return desc[0];
    c11a:	687b      	ldr	r3, [r7, #4]
    c11c:	781b      	ldrb	r3, [r3, #0]
}
    c11e:	4618      	mov	r0, r3
    c120:	370c      	adds	r7, #12
    c122:	46bd      	mov	sp, r7
    c124:	f85d 7b04 	ldr.w	r7, [sp], #4
    c128:	4770      	bx	lr
	...

0000c12c <usb_desc_next>:
{
    c12c:	b580      	push	{r7, lr}
    c12e:	b082      	sub	sp, #8
    c130:	af00      	add	r7, sp, #0
    c132:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    c134:	6878      	ldr	r0, [r7, #4]
    c136:	4b05      	ldr	r3, [pc, #20]	; (c14c <usb_desc_next+0x20>)
    c138:	4798      	blx	r3
    c13a:	4603      	mov	r3, r0
    c13c:	461a      	mov	r2, r3
    c13e:	687b      	ldr	r3, [r7, #4]
    c140:	4413      	add	r3, r2
}
    c142:	4618      	mov	r0, r3
    c144:	3708      	adds	r7, #8
    c146:	46bd      	mov	sp, r7
    c148:	bd80      	pop	{r7, pc}
    c14a:	bf00      	nop
    c14c:	0000c113 	.word	0x0000c113

0000c150 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    c150:	b580      	push	{r7, lr}
    c152:	b082      	sub	sp, #8
    c154:	af00      	add	r7, sp, #0
    c156:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    c158:	687b      	ldr	r3, [r7, #4]
    c15a:	3302      	adds	r3, #2
    c15c:	4618      	mov	r0, r3
    c15e:	4b03      	ldr	r3, [pc, #12]	; (c16c <usb_cfg_desc_total_len+0x1c>)
    c160:	4798      	blx	r3
    c162:	4603      	mov	r3, r0
}
    c164:	4618      	mov	r0, r3
    c166:	3708      	adds	r7, #8
    c168:	46bd      	mov	sp, r7
    c16a:	bd80      	pop	{r7, pc}
    c16c:	0000c0e9 	.word	0x0000c0e9

0000c170 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    c170:	b590      	push	{r4, r7, lr}
    c172:	b085      	sub	sp, #20
    c174:	af00      	add	r7, sp, #0
    c176:	4603      	mov	r3, r0
    c178:	6039      	str	r1, [r7, #0]
    c17a:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    c17c:	2300      	movs	r3, #0
    c17e:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    c180:	683b      	ldr	r3, [r7, #0]
    c182:	799a      	ldrb	r2, [r3, #6]
    c184:	79db      	ldrb	r3, [r3, #7]
    c186:	021b      	lsls	r3, r3, #8
    c188:	4313      	orrs	r3, r2
    c18a:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    c18c:	897b      	ldrh	r3, [r7, #10]
    c18e:	2b12      	cmp	r3, #18
    c190:	d901      	bls.n	c196 <usbdc_get_dev_desc+0x26>
		length = 0x12;
    c192:	2312      	movs	r3, #18
    c194:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    c196:	68fb      	ldr	r3, [r7, #12]
    c198:	2b00      	cmp	r3, #0
    c19a:	d10a      	bne.n	c1b2 <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    c19c:	4b0f      	ldr	r3, [pc, #60]	; (c1dc <usbdc_get_dev_desc+0x6c>)
    c19e:	681b      	ldr	r3, [r3, #0]
    c1a0:	6818      	ldr	r0, [r3, #0]
    c1a2:	4b0e      	ldr	r3, [pc, #56]	; (c1dc <usbdc_get_dev_desc+0x6c>)
    c1a4:	681b      	ldr	r3, [r3, #0]
    c1a6:	685b      	ldr	r3, [r3, #4]
    c1a8:	2201      	movs	r2, #1
    c1aa:	4619      	mov	r1, r3
    c1ac:	4b0c      	ldr	r3, [pc, #48]	; (c1e0 <usbdc_get_dev_desc+0x70>)
    c1ae:	4798      	blx	r3
    c1b0:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    c1b2:	68fb      	ldr	r3, [r7, #12]
    c1b4:	2b00      	cmp	r3, #0
    c1b6:	d101      	bne.n	c1bc <usbdc_get_dev_desc+0x4c>
		return false;
    c1b8:	2300      	movs	r3, #0
    c1ba:	e00b      	b.n	c1d4 <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    c1bc:	897a      	ldrh	r2, [r7, #10]
    c1be:	79f8      	ldrb	r0, [r7, #7]
    c1c0:	2300      	movs	r3, #0
    c1c2:	68f9      	ldr	r1, [r7, #12]
    c1c4:	4c07      	ldr	r4, [pc, #28]	; (c1e4 <usbdc_get_dev_desc+0x74>)
    c1c6:	47a0      	blx	r4
    c1c8:	4603      	mov	r3, r0
    c1ca:	2b00      	cmp	r3, #0
    c1cc:	d001      	beq.n	c1d2 <usbdc_get_dev_desc+0x62>
		return false;
    c1ce:	2300      	movs	r3, #0
    c1d0:	e000      	b.n	c1d4 <usbdc_get_dev_desc+0x64>
	}
	return true;
    c1d2:	2301      	movs	r3, #1
}
    c1d4:	4618      	mov	r0, r3
    c1d6:	3714      	adds	r7, #20
    c1d8:	46bd      	mov	sp, r7
    c1da:	bd90      	pop	{r4, r7, pc}
    c1dc:	20000bec 	.word	0x20000bec
    c1e0:	0000cee5 	.word	0x0000cee5
    c1e4:	0000cc55 	.word	0x0000cc55

0000c1e8 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    c1e8:	b590      	push	{r4, r7, lr}
    c1ea:	b087      	sub	sp, #28
    c1ec:	af00      	add	r7, sp, #0
    c1ee:	4603      	mov	r3, r0
    c1f0:	6039      	str	r1, [r7, #0]
    c1f2:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    c1f4:	2300      	movs	r3, #0
    c1f6:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    c1f8:	683b      	ldr	r3, [r7, #0]
    c1fa:	799a      	ldrb	r2, [r3, #6]
    c1fc:	79db      	ldrb	r3, [r3, #7]
    c1fe:	021b      	lsls	r3, r3, #8
    c200:	4313      	orrs	r3, r2
    c202:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    c204:	683b      	ldr	r3, [r7, #0]
    c206:	885b      	ldrh	r3, [r3, #2]
    c208:	b29b      	uxth	r3, r3
    c20a:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c20c:	8a7a      	ldrh	r2, [r7, #18]
    c20e:	4b1e      	ldr	r3, [pc, #120]	; (c288 <usbdc_get_cfg_desc+0xa0>)
    c210:	7f1b      	ldrb	r3, [r3, #28]
    c212:	3b01      	subs	r3, #1
    c214:	4013      	ands	r3, r2
    c216:	2b00      	cmp	r3, #0
    c218:	bf0c      	ite	eq
    c21a:	2301      	moveq	r3, #1
    c21c:	2300      	movne	r3, #0
    c21e:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    c220:	697b      	ldr	r3, [r7, #20]
    c222:	2b00      	cmp	r3, #0
    c224:	d10c      	bne.n	c240 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    c226:	4b18      	ldr	r3, [pc, #96]	; (c288 <usbdc_get_cfg_desc+0xa0>)
    c228:	681b      	ldr	r3, [r3, #0]
    c22a:	6818      	ldr	r0, [r3, #0]
    c22c:	4b16      	ldr	r3, [pc, #88]	; (c288 <usbdc_get_cfg_desc+0xa0>)
    c22e:	681b      	ldr	r3, [r3, #0]
    c230:	6859      	ldr	r1, [r3, #4]
    c232:	7c3b      	ldrb	r3, [r7, #16]
    c234:	3301      	adds	r3, #1
    c236:	b2db      	uxtb	r3, r3
    c238:	461a      	mov	r2, r3
    c23a:	4b14      	ldr	r3, [pc, #80]	; (c28c <usbdc_get_cfg_desc+0xa4>)
    c23c:	4798      	blx	r3
    c23e:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    c240:	697b      	ldr	r3, [r7, #20]
    c242:	2b00      	cmp	r3, #0
    c244:	d101      	bne.n	c24a <usbdc_get_cfg_desc+0x62>
		return false;
    c246:	2300      	movs	r3, #0
    c248:	e019      	b.n	c27e <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    c24a:	6978      	ldr	r0, [r7, #20]
    c24c:	4b10      	ldr	r3, [pc, #64]	; (c290 <usbdc_get_cfg_desc+0xa8>)
    c24e:	4798      	blx	r3
    c250:	4603      	mov	r3, r0
    c252:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    c254:	8a7a      	ldrh	r2, [r7, #18]
    c256:	89fb      	ldrh	r3, [r7, #14]
    c258:	429a      	cmp	r2, r3
    c25a:	d802      	bhi.n	c262 <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    c25c:	2300      	movs	r3, #0
    c25e:	747b      	strb	r3, [r7, #17]
    c260:	e001      	b.n	c266 <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    c262:	89fb      	ldrh	r3, [r7, #14]
    c264:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    c266:	8a7a      	ldrh	r2, [r7, #18]
    c268:	7c7b      	ldrb	r3, [r7, #17]
    c26a:	79f8      	ldrb	r0, [r7, #7]
    c26c:	6979      	ldr	r1, [r7, #20]
    c26e:	4c09      	ldr	r4, [pc, #36]	; (c294 <usbdc_get_cfg_desc+0xac>)
    c270:	47a0      	blx	r4
    c272:	4603      	mov	r3, r0
    c274:	2b00      	cmp	r3, #0
    c276:	d001      	beq.n	c27c <usbdc_get_cfg_desc+0x94>
		return false;
    c278:	2300      	movs	r3, #0
    c27a:	e000      	b.n	c27e <usbdc_get_cfg_desc+0x96>
	}
	return true;
    c27c:	2301      	movs	r3, #1
}
    c27e:	4618      	mov	r0, r3
    c280:	371c      	adds	r7, #28
    c282:	46bd      	mov	sp, r7
    c284:	bd90      	pop	{r4, r7, pc}
    c286:	bf00      	nop
    c288:	20000bec 	.word	0x20000bec
    c28c:	0000cfa5 	.word	0x0000cfa5
    c290:	0000c151 	.word	0x0000c151
    c294:	0000cc55 	.word	0x0000cc55

0000c298 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    c298:	b590      	push	{r4, r7, lr}
    c29a:	b085      	sub	sp, #20
    c29c:	af00      	add	r7, sp, #0
    c29e:	4603      	mov	r3, r0
    c2a0:	6039      	str	r1, [r7, #0]
    c2a2:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    c2a4:	683b      	ldr	r3, [r7, #0]
    c2a6:	799a      	ldrb	r2, [r3, #6]
    c2a8:	79db      	ldrb	r3, [r3, #7]
    c2aa:	021b      	lsls	r3, r3, #8
    c2ac:	4313      	orrs	r3, r2
    c2ae:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    c2b0:	683b      	ldr	r3, [r7, #0]
    c2b2:	885b      	ldrh	r3, [r3, #2]
    c2b4:	b29b      	uxth	r3, r3
    c2b6:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c2b8:	89fa      	ldrh	r2, [r7, #14]
    c2ba:	4b1a      	ldr	r3, [pc, #104]	; (c324 <usbdc_get_str_desc+0x8c>)
    c2bc:	7f1b      	ldrb	r3, [r3, #28]
    c2be:	3b01      	subs	r3, #1
    c2c0:	4013      	ands	r3, r2
    c2c2:	2b00      	cmp	r3, #0
    c2c4:	bf0c      	ite	eq
    c2c6:	2301      	moveq	r3, #1
    c2c8:	2300      	movne	r3, #0
    c2ca:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    c2cc:	4b15      	ldr	r3, [pc, #84]	; (c324 <usbdc_get_str_desc+0x8c>)
    c2ce:	681b      	ldr	r3, [r3, #0]
    c2d0:	6818      	ldr	r0, [r3, #0]
    c2d2:	4b14      	ldr	r3, [pc, #80]	; (c324 <usbdc_get_str_desc+0x8c>)
    c2d4:	681b      	ldr	r3, [r3, #0]
    c2d6:	685b      	ldr	r3, [r3, #4]
    c2d8:	7b3a      	ldrb	r2, [r7, #12]
    c2da:	4619      	mov	r1, r3
    c2dc:	4b12      	ldr	r3, [pc, #72]	; (c328 <usbdc_get_str_desc+0x90>)
    c2de:	4798      	blx	r3
    c2e0:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    c2e2:	68bb      	ldr	r3, [r7, #8]
    c2e4:	2b00      	cmp	r3, #0
    c2e6:	d101      	bne.n	c2ec <usbdc_get_str_desc+0x54>
		return false;
    c2e8:	2300      	movs	r3, #0
    c2ea:	e017      	b.n	c31c <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    c2ec:	68bb      	ldr	r3, [r7, #8]
    c2ee:	781b      	ldrb	r3, [r3, #0]
    c2f0:	b29b      	uxth	r3, r3
    c2f2:	89fa      	ldrh	r2, [r7, #14]
    c2f4:	429a      	cmp	r2, r3
    c2f6:	d802      	bhi.n	c2fe <usbdc_get_str_desc+0x66>
		need_zlp = false;
    c2f8:	2300      	movs	r3, #0
    c2fa:	737b      	strb	r3, [r7, #13]
    c2fc:	e002      	b.n	c304 <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    c2fe:	68bb      	ldr	r3, [r7, #8]
    c300:	781b      	ldrb	r3, [r3, #0]
    c302:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    c304:	89fa      	ldrh	r2, [r7, #14]
    c306:	7b7b      	ldrb	r3, [r7, #13]
    c308:	79f8      	ldrb	r0, [r7, #7]
    c30a:	68b9      	ldr	r1, [r7, #8]
    c30c:	4c07      	ldr	r4, [pc, #28]	; (c32c <usbdc_get_str_desc+0x94>)
    c30e:	47a0      	blx	r4
    c310:	4603      	mov	r3, r0
    c312:	2b00      	cmp	r3, #0
    c314:	d001      	beq.n	c31a <usbdc_get_str_desc+0x82>
		return false;
    c316:	2300      	movs	r3, #0
    c318:	e000      	b.n	c31c <usbdc_get_str_desc+0x84>
	}
	return true;
    c31a:	2301      	movs	r3, #1
}
    c31c:	4618      	mov	r0, r3
    c31e:	3714      	adds	r7, #20
    c320:	46bd      	mov	sp, r7
    c322:	bd90      	pop	{r4, r7, pc}
    c324:	20000bec 	.word	0x20000bec
    c328:	0000d01d 	.word	0x0000d01d
    c32c:	0000cc55 	.word	0x0000cc55

0000c330 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    c330:	b580      	push	{r7, lr}
    c332:	b084      	sub	sp, #16
    c334:	af00      	add	r7, sp, #0
    c336:	4603      	mov	r3, r0
    c338:	6039      	str	r1, [r7, #0]
    c33a:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    c33c:	683b      	ldr	r3, [r7, #0]
    c33e:	885b      	ldrh	r3, [r3, #2]
    c340:	b29b      	uxth	r3, r3
    c342:	0a1b      	lsrs	r3, r3, #8
    c344:	b29b      	uxth	r3, r3
    c346:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    c348:	7bfb      	ldrb	r3, [r7, #15]
    c34a:	2b02      	cmp	r3, #2
    c34c:	d00d      	beq.n	c36a <usbdc_get_desc_req+0x3a>
    c34e:	2b03      	cmp	r3, #3
    c350:	d012      	beq.n	c378 <usbdc_get_desc_req+0x48>
    c352:	2b01      	cmp	r3, #1
    c354:	d002      	beq.n	c35c <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    c356:	bf00      	nop
	}
	return false;
    c358:	2300      	movs	r3, #0
    c35a:	e013      	b.n	c384 <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    c35c:	79fb      	ldrb	r3, [r7, #7]
    c35e:	6839      	ldr	r1, [r7, #0]
    c360:	4618      	mov	r0, r3
    c362:	4b0a      	ldr	r3, [pc, #40]	; (c38c <usbdc_get_desc_req+0x5c>)
    c364:	4798      	blx	r3
    c366:	4603      	mov	r3, r0
    c368:	e00c      	b.n	c384 <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    c36a:	79fb      	ldrb	r3, [r7, #7]
    c36c:	6839      	ldr	r1, [r7, #0]
    c36e:	4618      	mov	r0, r3
    c370:	4b07      	ldr	r3, [pc, #28]	; (c390 <usbdc_get_desc_req+0x60>)
    c372:	4798      	blx	r3
    c374:	4603      	mov	r3, r0
    c376:	e005      	b.n	c384 <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    c378:	79fb      	ldrb	r3, [r7, #7]
    c37a:	6839      	ldr	r1, [r7, #0]
    c37c:	4618      	mov	r0, r3
    c37e:	4b05      	ldr	r3, [pc, #20]	; (c394 <usbdc_get_desc_req+0x64>)
    c380:	4798      	blx	r3
    c382:	4603      	mov	r3, r0
}
    c384:	4618      	mov	r0, r3
    c386:	3710      	adds	r7, #16
    c388:	46bd      	mov	sp, r7
    c38a:	bd80      	pop	{r7, pc}
    c38c:	0000c171 	.word	0x0000c171
    c390:	0000c1e9 	.word	0x0000c1e9
    c394:	0000c299 	.word	0x0000c299

0000c398 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    c398:	b590      	push	{r4, r7, lr}
    c39a:	b085      	sub	sp, #20
    c39c:	af00      	add	r7, sp, #0
    c39e:	4603      	mov	r3, r0
    c3a0:	6039      	str	r1, [r7, #0]
    c3a2:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c3a4:	683b      	ldr	r3, [r7, #0]
    c3a6:	781b      	ldrb	r3, [r3, #0]
    c3a8:	f003 031f 	and.w	r3, r3, #31
    c3ac:	2b00      	cmp	r3, #0
    c3ae:	db1b      	blt.n	c3e8 <usbdc_get_status_req+0x50>
    c3b0:	2b01      	cmp	r3, #1
    c3b2:	dd02      	ble.n	c3ba <usbdc_get_status_req+0x22>
    c3b4:	2b02      	cmp	r3, #2
    c3b6:	d003      	beq.n	c3c0 <usbdc_get_status_req+0x28>
    c3b8:	e016      	b.n	c3e8 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    c3ba:	2300      	movs	r3, #0
    c3bc:	60fb      	str	r3, [r7, #12]
		break;
    c3be:	e015      	b.n	c3ec <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    c3c0:	683b      	ldr	r3, [r7, #0]
    c3c2:	889b      	ldrh	r3, [r3, #4]
    c3c4:	b29b      	uxth	r3, r3
    c3c6:	b2db      	uxtb	r3, r3
    c3c8:	2102      	movs	r1, #2
    c3ca:	4618      	mov	r0, r3
    c3cc:	4b0f      	ldr	r3, [pc, #60]	; (c40c <usbdc_get_status_req+0x74>)
    c3ce:	4798      	blx	r3
    c3d0:	4603      	mov	r3, r0
    c3d2:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    c3d4:	68fb      	ldr	r3, [r7, #12]
    c3d6:	2b00      	cmp	r3, #0
    c3d8:	da01      	bge.n	c3de <usbdc_get_status_req+0x46>
			return false;
    c3da:	2300      	movs	r3, #0
    c3dc:	e012      	b.n	c404 <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    c3de:	68fb      	ldr	r3, [r7, #12]
    c3e0:	f003 0301 	and.w	r3, r3, #1
    c3e4:	60fb      	str	r3, [r7, #12]
		break;
    c3e6:	e001      	b.n	c3ec <usbdc_get_status_req+0x54>
	default:
		return false;
    c3e8:	2300      	movs	r3, #0
    c3ea:	e00b      	b.n	c404 <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    c3ec:	4b08      	ldr	r3, [pc, #32]	; (c410 <usbdc_get_status_req+0x78>)
    c3ee:	695b      	ldr	r3, [r3, #20]
    c3f0:	89ba      	ldrh	r2, [r7, #12]
    c3f2:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    c3f4:	4b06      	ldr	r3, [pc, #24]	; (c410 <usbdc_get_status_req+0x78>)
    c3f6:	6959      	ldr	r1, [r3, #20]
    c3f8:	79f8      	ldrb	r0, [r7, #7]
    c3fa:	2300      	movs	r3, #0
    c3fc:	2202      	movs	r2, #2
    c3fe:	4c05      	ldr	r4, [pc, #20]	; (c414 <usbdc_get_status_req+0x7c>)
    c400:	47a0      	blx	r4
	return true;
    c402:	2301      	movs	r3, #1
}
    c404:	4618      	mov	r0, r3
    c406:	3714      	adds	r7, #20
    c408:	46bd      	mov	sp, r7
    c40a:	bd90      	pop	{r4, r7, pc}
    c40c:	0000342d 	.word	0x0000342d
    c410:	20000bec 	.word	0x20000bec
    c414:	0000cc55 	.word	0x0000cc55

0000c418 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    c418:	b590      	push	{r4, r7, lr}
    c41a:	b085      	sub	sp, #20
    c41c:	af00      	add	r7, sp, #0
    c41e:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c420:	4b1f      	ldr	r3, [pc, #124]	; (c4a0 <usbdc_get_interface+0x88>)
    c422:	691b      	ldr	r3, [r3, #16]
    c424:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    c426:	4b1e      	ldr	r3, [pc, #120]	; (c4a0 <usbdc_get_interface+0x88>)
    c428:	7f5b      	ldrb	r3, [r3, #29]
    c42a:	461a      	mov	r2, r3
    c42c:	687b      	ldr	r3, [r7, #4]
    c42e:	889b      	ldrh	r3, [r3, #4]
    c430:	b29b      	uxth	r3, r3
    c432:	fa42 f303 	asr.w	r3, r2, r3
    c436:	f003 0301 	and.w	r3, r3, #1
    c43a:	2b00      	cmp	r3, #0
    c43c:	d128      	bne.n	c490 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    c43e:	4b18      	ldr	r3, [pc, #96]	; (c4a0 <usbdc_get_interface+0x88>)
    c440:	695b      	ldr	r3, [r3, #20]
    c442:	2200      	movs	r2, #0
    c444:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    c446:	4b16      	ldr	r3, [pc, #88]	; (c4a0 <usbdc_get_interface+0x88>)
    c448:	6959      	ldr	r1, [r3, #20]
    c44a:	2300      	movs	r3, #0
    c44c:	2201      	movs	r2, #1
    c44e:	2000      	movs	r0, #0
    c450:	4c14      	ldr	r4, [pc, #80]	; (c4a4 <usbdc_get_interface+0x8c>)
    c452:	47a0      	blx	r4
		return true;
    c454:	2301      	movs	r3, #1
    c456:	e01f      	b.n	c498 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    c458:	68fb      	ldr	r3, [r7, #12]
    c45a:	685b      	ldr	r3, [r3, #4]
    c45c:	687a      	ldr	r2, [r7, #4]
    c45e:	2102      	movs	r1, #2
    c460:	68f8      	ldr	r0, [r7, #12]
    c462:	4798      	blx	r3
    c464:	60b8      	str	r0, [r7, #8]
    c466:	68bb      	ldr	r3, [r7, #8]
    c468:	2b00      	cmp	r3, #0
    c46a:	da03      	bge.n	c474 <usbdc_get_interface+0x5c>
			func = func->next;
    c46c:	68fb      	ldr	r3, [r7, #12]
    c46e:	681b      	ldr	r3, [r3, #0]
    c470:	60fb      	str	r3, [r7, #12]
    c472:	e00d      	b.n	c490 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    c474:	4b0a      	ldr	r3, [pc, #40]	; (c4a0 <usbdc_get_interface+0x88>)
    c476:	695b      	ldr	r3, [r3, #20]
    c478:	68ba      	ldr	r2, [r7, #8]
    c47a:	b2d2      	uxtb	r2, r2
    c47c:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    c47e:	4b08      	ldr	r3, [pc, #32]	; (c4a0 <usbdc_get_interface+0x88>)
    c480:	6959      	ldr	r1, [r3, #20]
    c482:	2300      	movs	r3, #0
    c484:	2201      	movs	r2, #1
    c486:	2000      	movs	r0, #0
    c488:	4c06      	ldr	r4, [pc, #24]	; (c4a4 <usbdc_get_interface+0x8c>)
    c48a:	47a0      	blx	r4
			return true;
    c48c:	2301      	movs	r3, #1
    c48e:	e003      	b.n	c498 <usbdc_get_interface+0x80>
	while (NULL != func) {
    c490:	68fb      	ldr	r3, [r7, #12]
    c492:	2b00      	cmp	r3, #0
    c494:	d1e0      	bne.n	c458 <usbdc_get_interface+0x40>
		}
	}
	return false;
    c496:	2300      	movs	r3, #0
}
    c498:	4618      	mov	r0, r3
    c49a:	3714      	adds	r7, #20
    c49c:	46bd      	mov	sp, r7
    c49e:	bd90      	pop	{r4, r7, pc}
    c4a0:	20000bec 	.word	0x20000bec
    c4a4:	0000cc55 	.word	0x0000cc55

0000c4a8 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    c4a8:	b590      	push	{r4, r7, lr}
    c4aa:	b083      	sub	sp, #12
    c4ac:	af00      	add	r7, sp, #0
    c4ae:	4603      	mov	r3, r0
    c4b0:	6039      	str	r1, [r7, #0]
    c4b2:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    c4b4:	683b      	ldr	r3, [r7, #0]
    c4b6:	785b      	ldrb	r3, [r3, #1]
    c4b8:	2b0a      	cmp	r3, #10
    c4ba:	d83a      	bhi.n	c532 <usbdc_get_req+0x8a>
    c4bc:	a201      	add	r2, pc, #4	; (adr r2, c4c4 <usbdc_get_req+0x1c>)
    c4be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c4c2:	bf00      	nop
    c4c4:	0000c51b 	.word	0x0000c51b
    c4c8:	0000c533 	.word	0x0000c533
    c4cc:	0000c533 	.word	0x0000c533
    c4d0:	0000c533 	.word	0x0000c533
    c4d4:	0000c533 	.word	0x0000c533
    c4d8:	0000c533 	.word	0x0000c533
    c4dc:	0000c4f1 	.word	0x0000c4f1
    c4e0:	0000c533 	.word	0x0000c533
    c4e4:	0000c4ff 	.word	0x0000c4ff
    c4e8:	0000c533 	.word	0x0000c533
    c4ec:	0000c529 	.word	0x0000c529
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    c4f0:	79fb      	ldrb	r3, [r7, #7]
    c4f2:	6839      	ldr	r1, [r7, #0]
    c4f4:	4618      	mov	r0, r3
    c4f6:	4b11      	ldr	r3, [pc, #68]	; (c53c <usbdc_get_req+0x94>)
    c4f8:	4798      	blx	r3
    c4fa:	4603      	mov	r3, r0
    c4fc:	e01a      	b.n	c534 <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    c4fe:	4b10      	ldr	r3, [pc, #64]	; (c540 <usbdc_get_req+0x98>)
    c500:	695b      	ldr	r3, [r3, #20]
    c502:	4a0f      	ldr	r2, [pc, #60]	; (c540 <usbdc_get_req+0x98>)
    c504:	7ed2      	ldrb	r2, [r2, #27]
    c506:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    c508:	4b0d      	ldr	r3, [pc, #52]	; (c540 <usbdc_get_req+0x98>)
    c50a:	6959      	ldr	r1, [r3, #20]
    c50c:	79f8      	ldrb	r0, [r7, #7]
    c50e:	2300      	movs	r3, #0
    c510:	2201      	movs	r2, #1
    c512:	4c0c      	ldr	r4, [pc, #48]	; (c544 <usbdc_get_req+0x9c>)
    c514:	47a0      	blx	r4
		return true;
    c516:	2301      	movs	r3, #1
    c518:	e00c      	b.n	c534 <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    c51a:	79fb      	ldrb	r3, [r7, #7]
    c51c:	6839      	ldr	r1, [r7, #0]
    c51e:	4618      	mov	r0, r3
    c520:	4b09      	ldr	r3, [pc, #36]	; (c548 <usbdc_get_req+0xa0>)
    c522:	4798      	blx	r3
    c524:	4603      	mov	r3, r0
    c526:	e005      	b.n	c534 <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    c528:	6838      	ldr	r0, [r7, #0]
    c52a:	4b08      	ldr	r3, [pc, #32]	; (c54c <usbdc_get_req+0xa4>)
    c52c:	4798      	blx	r3
    c52e:	4603      	mov	r3, r0
    c530:	e000      	b.n	c534 <usbdc_get_req+0x8c>
	default:
		return false;
    c532:	2300      	movs	r3, #0
	}
}
    c534:	4618      	mov	r0, r3
    c536:	370c      	adds	r7, #12
    c538:	46bd      	mov	sp, r7
    c53a:	bd90      	pop	{r4, r7, pc}
    c53c:	0000c331 	.word	0x0000c331
    c540:	20000bec 	.word	0x20000bec
    c544:	0000cc55 	.word	0x0000cc55
    c548:	0000c399 	.word	0x0000c399
    c54c:	0000c419 	.word	0x0000c419

0000c550 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    c550:	b590      	push	{r4, r7, lr}
    c552:	b083      	sub	sp, #12
    c554:	af00      	add	r7, sp, #0
    c556:	4603      	mov	r3, r0
    c558:	6039      	str	r1, [r7, #0]
    c55a:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c55c:	683b      	ldr	r3, [r7, #0]
    c55e:	781b      	ldrb	r3, [r3, #0]
    c560:	f003 031f 	and.w	r3, r3, #31
    c564:	2b02      	cmp	r3, #2
    c566:	d116      	bne.n	c596 <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    c568:	683b      	ldr	r3, [r7, #0]
    c56a:	88db      	ldrh	r3, [r3, #6]
    c56c:	b29b      	uxth	r3, r3
    c56e:	2b00      	cmp	r3, #0
    c570:	d001      	beq.n	c576 <usbdc_clear_ftr_req+0x26>
			return false;
    c572:	2300      	movs	r3, #0
    c574:	e010      	b.n	c598 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    c576:	683b      	ldr	r3, [r7, #0]
    c578:	889b      	ldrh	r3, [r3, #4]
    c57a:	b29b      	uxth	r3, r3
    c57c:	b2db      	uxtb	r3, r3
    c57e:	2100      	movs	r1, #0
    c580:	4618      	mov	r0, r3
    c582:	4b07      	ldr	r3, [pc, #28]	; (c5a0 <usbdc_clear_ftr_req+0x50>)
    c584:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    c586:	79f8      	ldrb	r0, [r7, #7]
    c588:	2301      	movs	r3, #1
    c58a:	2200      	movs	r2, #0
    c58c:	2100      	movs	r1, #0
    c58e:	4c05      	ldr	r4, [pc, #20]	; (c5a4 <usbdc_clear_ftr_req+0x54>)
    c590:	47a0      	blx	r4
		return true;
    c592:	2301      	movs	r3, #1
    c594:	e000      	b.n	c598 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    c596:	2300      	movs	r3, #0
	}
}
    c598:	4618      	mov	r0, r3
    c59a:	370c      	adds	r7, #12
    c59c:	46bd      	mov	sp, r7
    c59e:	bd90      	pop	{r4, r7, pc}
    c5a0:	0000342d 	.word	0x0000342d
    c5a4:	0000cc55 	.word	0x0000cc55

0000c5a8 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    c5a8:	b590      	push	{r4, r7, lr}
    c5aa:	b083      	sub	sp, #12
    c5ac:	af00      	add	r7, sp, #0
    c5ae:	4603      	mov	r3, r0
    c5b0:	6039      	str	r1, [r7, #0]
    c5b2:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c5b4:	683b      	ldr	r3, [r7, #0]
    c5b6:	781b      	ldrb	r3, [r3, #0]
    c5b8:	f003 031f 	and.w	r3, r3, #31
    c5bc:	2b02      	cmp	r3, #2
    c5be:	d116      	bne.n	c5ee <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    c5c0:	683b      	ldr	r3, [r7, #0]
    c5c2:	88db      	ldrh	r3, [r3, #6]
    c5c4:	b29b      	uxth	r3, r3
    c5c6:	2b00      	cmp	r3, #0
    c5c8:	d001      	beq.n	c5ce <usbdc_set_ftr_req+0x26>
			return false;
    c5ca:	2300      	movs	r3, #0
    c5cc:	e010      	b.n	c5f0 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    c5ce:	683b      	ldr	r3, [r7, #0]
    c5d0:	889b      	ldrh	r3, [r3, #4]
    c5d2:	b29b      	uxth	r3, r3
    c5d4:	b2db      	uxtb	r3, r3
    c5d6:	2101      	movs	r1, #1
    c5d8:	4618      	mov	r0, r3
    c5da:	4b07      	ldr	r3, [pc, #28]	; (c5f8 <usbdc_set_ftr_req+0x50>)
    c5dc:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    c5de:	79f8      	ldrb	r0, [r7, #7]
    c5e0:	2301      	movs	r3, #1
    c5e2:	2200      	movs	r2, #0
    c5e4:	2100      	movs	r1, #0
    c5e6:	4c05      	ldr	r4, [pc, #20]	; (c5fc <usbdc_set_ftr_req+0x54>)
    c5e8:	47a0      	blx	r4
		return true;
    c5ea:	2301      	movs	r3, #1
    c5ec:	e000      	b.n	c5f0 <usbdc_set_ftr_req+0x48>
	default:
		return false;
    c5ee:	2300      	movs	r3, #0
	}
}
    c5f0:	4618      	mov	r0, r3
    c5f2:	370c      	adds	r7, #12
    c5f4:	46bd      	mov	sp, r7
    c5f6:	bd90      	pop	{r4, r7, pc}
    c5f8:	0000342d 	.word	0x0000342d
    c5fc:	0000cc55 	.word	0x0000cc55

0000c600 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    c600:	b580      	push	{r7, lr}
    c602:	b082      	sub	sp, #8
    c604:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c606:	4b0a      	ldr	r3, [pc, #40]	; (c630 <usbdc_unconfig+0x30>)
    c608:	691b      	ldr	r3, [r3, #16]
    c60a:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    c60c:	e008      	b.n	c620 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    c60e:	687b      	ldr	r3, [r7, #4]
    c610:	685b      	ldr	r3, [r3, #4]
    c612:	2200      	movs	r2, #0
    c614:	2101      	movs	r1, #1
    c616:	6878      	ldr	r0, [r7, #4]
    c618:	4798      	blx	r3
		func = func->next;
    c61a:	687b      	ldr	r3, [r7, #4]
    c61c:	681b      	ldr	r3, [r3, #0]
    c61e:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    c620:	687b      	ldr	r3, [r7, #4]
    c622:	2b00      	cmp	r3, #0
    c624:	d1f3      	bne.n	c60e <usbdc_unconfig+0xe>
	}
}
    c626:	bf00      	nop
    c628:	3708      	adds	r7, #8
    c62a:	46bd      	mov	sp, r7
    c62c:	bd80      	pop	{r7, pc}
    c62e:	bf00      	nop
    c630:	20000bec 	.word	0x20000bec

0000c634 <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    c634:	b580      	push	{r7, lr}
    c636:	b088      	sub	sp, #32
    c638:	af00      	add	r7, sp, #0
    c63a:	4603      	mov	r3, r0
    c63c:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    c63e:	2300      	movs	r3, #0
    c640:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    c642:	23ff      	movs	r3, #255	; 0xff
    c644:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    c646:	79fb      	ldrb	r3, [r7, #7]
    c648:	2b00      	cmp	r3, #0
    c64a:	d103      	bne.n	c654 <usbdc_set_config+0x20>
		usbdc_unconfig();
    c64c:	4b2e      	ldr	r3, [pc, #184]	; (c708 <usbdc_set_config+0xd4>)
    c64e:	4798      	blx	r3
		return true;
    c650:	2301      	movs	r3, #1
    c652:	e055      	b.n	c700 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    c654:	69bb      	ldr	r3, [r7, #24]
    c656:	2b00      	cmp	r3, #0
    c658:	d10a      	bne.n	c670 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    c65a:	4b2c      	ldr	r3, [pc, #176]	; (c70c <usbdc_set_config+0xd8>)
    c65c:	681b      	ldr	r3, [r3, #0]
    c65e:	6818      	ldr	r0, [r3, #0]
    c660:	4b2a      	ldr	r3, [pc, #168]	; (c70c <usbdc_set_config+0xd8>)
    c662:	681b      	ldr	r3, [r3, #0]
    c664:	685b      	ldr	r3, [r3, #4]
    c666:	79fa      	ldrb	r2, [r7, #7]
    c668:	4619      	mov	r1, r3
    c66a:	4b29      	ldr	r3, [pc, #164]	; (c710 <usbdc_set_config+0xdc>)
    c66c:	4798      	blx	r3
    c66e:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    c670:	69bb      	ldr	r3, [r7, #24]
    c672:	2b00      	cmp	r3, #0
    c674:	d101      	bne.n	c67a <usbdc_set_config+0x46>
		return false;
    c676:	2300      	movs	r3, #0
    c678:	e042      	b.n	c700 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    c67a:	69b8      	ldr	r0, [r7, #24]
    c67c:	4b25      	ldr	r3, [pc, #148]	; (c714 <usbdc_set_config+0xe0>)
    c67e:	4798      	blx	r3
    c680:	4603      	mov	r3, r0
    c682:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    c684:	8abb      	ldrh	r3, [r7, #20]
    c686:	69ba      	ldr	r2, [r7, #24]
    c688:	4413      	add	r3, r2
    c68a:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    c68c:	693b      	ldr	r3, [r7, #16]
    c68e:	2204      	movs	r2, #4
    c690:	4619      	mov	r1, r3
    c692:	69b8      	ldr	r0, [r7, #24]
    c694:	4b20      	ldr	r3, [pc, #128]	; (c718 <usbdc_set_config+0xe4>)
    c696:	4798      	blx	r3
    c698:	4603      	mov	r3, r0
    c69a:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    c69c:	e02c      	b.n	c6f8 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    c69e:	68fb      	ldr	r3, [r7, #12]
    c6a0:	3302      	adds	r3, #2
    c6a2:	781b      	ldrb	r3, [r3, #0]
    c6a4:	7dfa      	ldrb	r2, [r7, #23]
    c6a6:	429a      	cmp	r2, r3
    c6a8:	d018      	beq.n	c6dc <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    c6aa:	68fb      	ldr	r3, [r7, #12]
    c6ac:	789b      	ldrb	r3, [r3, #2]
    c6ae:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    c6b0:	4b16      	ldr	r3, [pc, #88]	; (c70c <usbdc_set_config+0xd8>)
    c6b2:	691b      	ldr	r3, [r3, #16]
    c6b4:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    c6b6:	e00c      	b.n	c6d2 <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    c6b8:	69fb      	ldr	r3, [r7, #28]
    c6ba:	685b      	ldr	r3, [r3, #4]
    c6bc:	f107 020c 	add.w	r2, r7, #12
    c6c0:	2100      	movs	r1, #0
    c6c2:	69f8      	ldr	r0, [r7, #28]
    c6c4:	4798      	blx	r3
    c6c6:	4603      	mov	r3, r0
    c6c8:	2b00      	cmp	r3, #0
    c6ca:	d006      	beq.n	c6da <usbdc_set_config+0xa6>
					func = func->next;
    c6cc:	69fb      	ldr	r3, [r7, #28]
    c6ce:	681b      	ldr	r3, [r3, #0]
    c6d0:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    c6d2:	69fb      	ldr	r3, [r7, #28]
    c6d4:	2b00      	cmp	r3, #0
    c6d6:	d1ef      	bne.n	c6b8 <usbdc_set_config+0x84>
    c6d8:	e000      	b.n	c6dc <usbdc_set_config+0xa8>
				} else {
					break;
    c6da:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    c6dc:	68fb      	ldr	r3, [r7, #12]
    c6de:	4618      	mov	r0, r3
    c6e0:	4b0e      	ldr	r3, [pc, #56]	; (c71c <usbdc_set_config+0xe8>)
    c6e2:	4798      	blx	r3
    c6e4:	4603      	mov	r3, r0
    c6e6:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c6e8:	68fb      	ldr	r3, [r7, #12]
    c6ea:	6939      	ldr	r1, [r7, #16]
    c6ec:	2204      	movs	r2, #4
    c6ee:	4618      	mov	r0, r3
    c6f0:	4b09      	ldr	r3, [pc, #36]	; (c718 <usbdc_set_config+0xe4>)
    c6f2:	4798      	blx	r3
    c6f4:	4603      	mov	r3, r0
    c6f6:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    c6f8:	68fb      	ldr	r3, [r7, #12]
    c6fa:	2b00      	cmp	r3, #0
    c6fc:	d1cf      	bne.n	c69e <usbdc_set_config+0x6a>
	}
	return true;
    c6fe:	2301      	movs	r3, #1
}
    c700:	4618      	mov	r0, r3
    c702:	3720      	adds	r7, #32
    c704:	46bd      	mov	sp, r7
    c706:	bd80      	pop	{r7, pc}
    c708:	0000c601 	.word	0x0000c601
    c70c:	20000bec 	.word	0x20000bec
    c710:	0000cfa5 	.word	0x0000cfa5
    c714:	0000c151 	.word	0x0000c151
    c718:	0000cee5 	.word	0x0000cee5
    c71c:	0000c12d 	.word	0x0000c12d

0000c720 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    c720:	b580      	push	{r7, lr}
    c722:	b082      	sub	sp, #8
    c724:	af00      	add	r7, sp, #0
    c726:	4603      	mov	r3, r0
    c728:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    c72a:	79fb      	ldrb	r3, [r7, #7]
    c72c:	4618      	mov	r0, r3
    c72e:	4b03      	ldr	r3, [pc, #12]	; (c73c <usbdc_set_address+0x1c>)
    c730:	4798      	blx	r3
}
    c732:	bf00      	nop
    c734:	3708      	adds	r7, #8
    c736:	46bd      	mov	sp, r7
    c738:	bd80      	pop	{r7, pc}
    c73a:	bf00      	nop
    c73c:	00003049 	.word	0x00003049

0000c740 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    c740:	b590      	push	{r4, r7, lr}
    c742:	b087      	sub	sp, #28
    c744:	af00      	add	r7, sp, #0
    c746:	4603      	mov	r3, r0
    c748:	460a      	mov	r2, r1
    c74a:	80fb      	strh	r3, [r7, #6]
    c74c:	4613      	mov	r3, r2
    c74e:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    c750:	2300      	movs	r3, #0
    c752:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    c754:	693b      	ldr	r3, [r7, #16]
    c756:	2b00      	cmp	r3, #0
    c758:	d10b      	bne.n	c772 <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    c75a:	4b43      	ldr	r3, [pc, #268]	; (c868 <usbdc_set_interface+0x128>)
    c75c:	681b      	ldr	r3, [r3, #0]
    c75e:	6818      	ldr	r0, [r3, #0]
    c760:	4b41      	ldr	r3, [pc, #260]	; (c868 <usbdc_set_interface+0x128>)
    c762:	681b      	ldr	r3, [r3, #0]
    c764:	6859      	ldr	r1, [r3, #4]
    c766:	4b40      	ldr	r3, [pc, #256]	; (c868 <usbdc_set_interface+0x128>)
    c768:	7edb      	ldrb	r3, [r3, #27]
    c76a:	461a      	mov	r2, r3
    c76c:	4b3f      	ldr	r3, [pc, #252]	; (c86c <usbdc_set_interface+0x12c>)
    c76e:	4798      	blx	r3
    c770:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    c772:	693b      	ldr	r3, [r7, #16]
    c774:	2b00      	cmp	r3, #0
    c776:	d101      	bne.n	c77c <usbdc_set_interface+0x3c>
		return false;
    c778:	2300      	movs	r3, #0
    c77a:	e071      	b.n	c860 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    c77c:	693b      	ldr	r3, [r7, #16]
    c77e:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    c780:	6938      	ldr	r0, [r7, #16]
    c782:	4b3b      	ldr	r3, [pc, #236]	; (c870 <usbdc_set_interface+0x130>)
    c784:	4798      	blx	r3
    c786:	4603      	mov	r3, r0
    c788:	461a      	mov	r2, r3
    c78a:	693b      	ldr	r3, [r7, #16]
    c78c:	4413      	add	r3, r2
    c78e:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    c790:	68bb      	ldr	r3, [r7, #8]
    c792:	68f9      	ldr	r1, [r7, #12]
    c794:	2204      	movs	r2, #4
    c796:	4618      	mov	r0, r3
    c798:	4b36      	ldr	r3, [pc, #216]	; (c874 <usbdc_set_interface+0x134>)
    c79a:	4798      	blx	r3
    c79c:	6138      	str	r0, [r7, #16]
    c79e:	693b      	ldr	r3, [r7, #16]
    c7a0:	2b00      	cmp	r3, #0
    c7a2:	d113      	bne.n	c7cc <usbdc_set_interface+0x8c>
		return false;
    c7a4:	2300      	movs	r3, #0
    c7a6:	e05b      	b.n	c860 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    c7a8:	68bb      	ldr	r3, [r7, #8]
    c7aa:	4618      	mov	r0, r3
    c7ac:	4b32      	ldr	r3, [pc, #200]	; (c878 <usbdc_set_interface+0x138>)
    c7ae:	4798      	blx	r3
    c7b0:	4603      	mov	r3, r0
    c7b2:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c7b4:	68bb      	ldr	r3, [r7, #8]
    c7b6:	68f9      	ldr	r1, [r7, #12]
    c7b8:	2204      	movs	r2, #4
    c7ba:	4618      	mov	r0, r3
    c7bc:	4b2d      	ldr	r3, [pc, #180]	; (c874 <usbdc_set_interface+0x134>)
    c7be:	4798      	blx	r3
    c7c0:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    c7c2:	693b      	ldr	r3, [r7, #16]
    c7c4:	2b00      	cmp	r3, #0
    c7c6:	d101      	bne.n	c7cc <usbdc_set_interface+0x8c>
			return false;
    c7c8:	2300      	movs	r3, #0
    c7ca:	e049      	b.n	c860 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    c7cc:	693b      	ldr	r3, [r7, #16]
    c7ce:	3302      	adds	r3, #2
    c7d0:	781b      	ldrb	r3, [r3, #0]
    c7d2:	b29b      	uxth	r3, r3
    c7d4:	88ba      	ldrh	r2, [r7, #4]
    c7d6:	429a      	cmp	r2, r3
    c7d8:	d1e6      	bne.n	c7a8 <usbdc_set_interface+0x68>
    c7da:	693b      	ldr	r3, [r7, #16]
    c7dc:	3303      	adds	r3, #3
    c7de:	781b      	ldrb	r3, [r3, #0]
    c7e0:	b29b      	uxth	r3, r3
    c7e2:	88fa      	ldrh	r2, [r7, #6]
    c7e4:	429a      	cmp	r2, r3
    c7e6:	d1df      	bne.n	c7a8 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    c7e8:	693b      	ldr	r3, [r7, #16]
    c7ea:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    c7ec:	4b1e      	ldr	r3, [pc, #120]	; (c868 <usbdc_set_interface+0x128>)
    c7ee:	691b      	ldr	r3, [r3, #16]
    c7f0:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    c7f2:	e031      	b.n	c858 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    c7f4:	697b      	ldr	r3, [r7, #20]
    c7f6:	685b      	ldr	r3, [r3, #4]
    c7f8:	f107 0208 	add.w	r2, r7, #8
    c7fc:	2101      	movs	r1, #1
    c7fe:	6978      	ldr	r0, [r7, #20]
    c800:	4798      	blx	r3
    c802:	4603      	mov	r3, r0
    c804:	2b00      	cmp	r3, #0
    c806:	d003      	beq.n	c810 <usbdc_set_interface+0xd0>
			func = func->next;
    c808:	697b      	ldr	r3, [r7, #20]
    c80a:	681b      	ldr	r3, [r3, #0]
    c80c:	617b      	str	r3, [r7, #20]
    c80e:	e023      	b.n	c858 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    c810:	697b      	ldr	r3, [r7, #20]
    c812:	685b      	ldr	r3, [r3, #4]
    c814:	f107 0208 	add.w	r2, r7, #8
    c818:	2100      	movs	r1, #0
    c81a:	6978      	ldr	r0, [r7, #20]
    c81c:	4798      	blx	r3
    c81e:	4603      	mov	r3, r0
    c820:	2b00      	cmp	r3, #0
    c822:	d117      	bne.n	c854 <usbdc_set_interface+0x114>
			if (alt_set) {
    c824:	88fb      	ldrh	r3, [r7, #6]
    c826:	2b00      	cmp	r3, #0
    c828:	d00c      	beq.n	c844 <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    c82a:	4b0f      	ldr	r3, [pc, #60]	; (c868 <usbdc_set_interface+0x128>)
    c82c:	7f5b      	ldrb	r3, [r3, #29]
    c82e:	b25a      	sxtb	r2, r3
    c830:	88bb      	ldrh	r3, [r7, #4]
    c832:	2101      	movs	r1, #1
    c834:	fa01 f303 	lsl.w	r3, r1, r3
    c838:	b25b      	sxtb	r3, r3
    c83a:	4313      	orrs	r3, r2
    c83c:	b25b      	sxtb	r3, r3
    c83e:	b2da      	uxtb	r2, r3
    c840:	4b09      	ldr	r3, [pc, #36]	; (c868 <usbdc_set_interface+0x128>)
    c842:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    c844:	2300      	movs	r3, #0
    c846:	2200      	movs	r2, #0
    c848:	2100      	movs	r1, #0
    c84a:	2000      	movs	r0, #0
    c84c:	4c0b      	ldr	r4, [pc, #44]	; (c87c <usbdc_set_interface+0x13c>)
    c84e:	47a0      	blx	r4
			return true;
    c850:	2301      	movs	r3, #1
    c852:	e005      	b.n	c860 <usbdc_set_interface+0x120>
		} else {
			return false;
    c854:	2300      	movs	r3, #0
    c856:	e003      	b.n	c860 <usbdc_set_interface+0x120>
	while (NULL != func) {
    c858:	697b      	ldr	r3, [r7, #20]
    c85a:	2b00      	cmp	r3, #0
    c85c:	d1ca      	bne.n	c7f4 <usbdc_set_interface+0xb4>
		}
	}

	return false;
    c85e:	2300      	movs	r3, #0
}
    c860:	4618      	mov	r0, r3
    c862:	371c      	adds	r7, #28
    c864:	46bd      	mov	sp, r7
    c866:	bd90      	pop	{r4, r7, pc}
    c868:	20000bec 	.word	0x20000bec
    c86c:	0000cfa5 	.word	0x0000cfa5
    c870:	0000c151 	.word	0x0000c151
    c874:	0000cee5 	.word	0x0000cee5
    c878:	0000c12d 	.word	0x0000c12d
    c87c:	0000cc55 	.word	0x0000cc55

0000c880 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    c880:	b590      	push	{r4, r7, lr}
    c882:	b083      	sub	sp, #12
    c884:	af00      	add	r7, sp, #0
    c886:	4603      	mov	r3, r0
    c888:	6039      	str	r1, [r7, #0]
    c88a:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    c88c:	683b      	ldr	r3, [r7, #0]
    c88e:	785b      	ldrb	r3, [r3, #1]
    c890:	3b01      	subs	r3, #1
    c892:	2b0a      	cmp	r3, #10
    c894:	d85b      	bhi.n	c94e <usbdc_set_req+0xce>
    c896:	a201      	add	r2, pc, #4	; (adr r2, c89c <usbdc_set_req+0x1c>)
    c898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c89c:	0000c91b 	.word	0x0000c91b
    c8a0:	0000c94f 	.word	0x0000c94f
    c8a4:	0000c929 	.word	0x0000c929
    c8a8:	0000c94f 	.word	0x0000c94f
    c8ac:	0000c8c9 	.word	0x0000c8c9
    c8b0:	0000c94f 	.word	0x0000c94f
    c8b4:	0000c94f 	.word	0x0000c94f
    c8b8:	0000c94f 	.word	0x0000c94f
    c8bc:	0000c8e3 	.word	0x0000c8e3
    c8c0:	0000c94f 	.word	0x0000c94f
    c8c4:	0000c937 	.word	0x0000c937
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    c8c8:	79f8      	ldrb	r0, [r7, #7]
    c8ca:	2301      	movs	r3, #1
    c8cc:	2200      	movs	r2, #0
    c8ce:	2100      	movs	r1, #0
    c8d0:	4c21      	ldr	r4, [pc, #132]	; (c958 <usbdc_set_req+0xd8>)
    c8d2:	47a0      	blx	r4
    c8d4:	4603      	mov	r3, r0
    c8d6:	2b00      	cmp	r3, #0
    c8d8:	bf0c      	ite	eq
    c8da:	2301      	moveq	r3, #1
    c8dc:	2300      	movne	r3, #0
    c8de:	b2db      	uxtb	r3, r3
    c8e0:	e036      	b.n	c950 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    c8e2:	683b      	ldr	r3, [r7, #0]
    c8e4:	885b      	ldrh	r3, [r3, #2]
    c8e6:	b29b      	uxth	r3, r3
    c8e8:	b2db      	uxtb	r3, r3
    c8ea:	4618      	mov	r0, r3
    c8ec:	4b1b      	ldr	r3, [pc, #108]	; (c95c <usbdc_set_req+0xdc>)
    c8ee:	4798      	blx	r3
    c8f0:	4603      	mov	r3, r0
    c8f2:	f083 0301 	eor.w	r3, r3, #1
    c8f6:	b2db      	uxtb	r3, r3
    c8f8:	2b00      	cmp	r3, #0
    c8fa:	d001      	beq.n	c900 <usbdc_set_req+0x80>
			return false;
    c8fc:	2300      	movs	r3, #0
    c8fe:	e027      	b.n	c950 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    c900:	79f8      	ldrb	r0, [r7, #7]
    c902:	2301      	movs	r3, #1
    c904:	2200      	movs	r2, #0
    c906:	2100      	movs	r1, #0
    c908:	4c13      	ldr	r4, [pc, #76]	; (c958 <usbdc_set_req+0xd8>)
    c90a:	47a0      	blx	r4
    c90c:	4603      	mov	r3, r0
    c90e:	2b00      	cmp	r3, #0
    c910:	bf0c      	ite	eq
    c912:	2301      	moveq	r3, #1
    c914:	2300      	movne	r3, #0
    c916:	b2db      	uxtb	r3, r3
    c918:	e01a      	b.n	c950 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    c91a:	79fb      	ldrb	r3, [r7, #7]
    c91c:	6839      	ldr	r1, [r7, #0]
    c91e:	4618      	mov	r0, r3
    c920:	4b0f      	ldr	r3, [pc, #60]	; (c960 <usbdc_set_req+0xe0>)
    c922:	4798      	blx	r3
    c924:	4603      	mov	r3, r0
    c926:	e013      	b.n	c950 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    c928:	79fb      	ldrb	r3, [r7, #7]
    c92a:	6839      	ldr	r1, [r7, #0]
    c92c:	4618      	mov	r0, r3
    c92e:	4b0d      	ldr	r3, [pc, #52]	; (c964 <usbdc_set_req+0xe4>)
    c930:	4798      	blx	r3
    c932:	4603      	mov	r3, r0
    c934:	e00c      	b.n	c950 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    c936:	683b      	ldr	r3, [r7, #0]
    c938:	885b      	ldrh	r3, [r3, #2]
    c93a:	b29a      	uxth	r2, r3
    c93c:	683b      	ldr	r3, [r7, #0]
    c93e:	889b      	ldrh	r3, [r3, #4]
    c940:	b29b      	uxth	r3, r3
    c942:	4619      	mov	r1, r3
    c944:	4610      	mov	r0, r2
    c946:	4b08      	ldr	r3, [pc, #32]	; (c968 <usbdc_set_req+0xe8>)
    c948:	4798      	blx	r3
    c94a:	4603      	mov	r3, r0
    c94c:	e000      	b.n	c950 <usbdc_set_req+0xd0>
	default:
		return false;
    c94e:	2300      	movs	r3, #0
	}
}
    c950:	4618      	mov	r0, r3
    c952:	370c      	adds	r7, #12
    c954:	46bd      	mov	sp, r7
    c956:	bd90      	pop	{r4, r7, pc}
    c958:	0000cc55 	.word	0x0000cc55
    c95c:	0000c635 	.word	0x0000c635
    c960:	0000c551 	.word	0x0000c551
    c964:	0000c5a9 	.word	0x0000c5a9
    c968:	0000c741 	.word	0x0000c741

0000c96c <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    c96c:	b580      	push	{r7, lr}
    c96e:	b082      	sub	sp, #8
    c970:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    c972:	4b0a      	ldr	r3, [pc, #40]	; (c99c <usbdc_sof_notify+0x30>)
    c974:	685b      	ldr	r3, [r3, #4]
    c976:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    c978:	e009      	b.n	c98e <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    c97a:	687b      	ldr	r3, [r7, #4]
    c97c:	685b      	ldr	r3, [r3, #4]
    c97e:	2b00      	cmp	r3, #0
    c980:	d002      	beq.n	c988 <usbdc_sof_notify+0x1c>
			sof->cb();
    c982:	687b      	ldr	r3, [r7, #4]
    c984:	685b      	ldr	r3, [r3, #4]
    c986:	4798      	blx	r3
		}
		sof = sof->next;
    c988:	687b      	ldr	r3, [r7, #4]
    c98a:	681b      	ldr	r3, [r3, #0]
    c98c:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    c98e:	687b      	ldr	r3, [r7, #4]
    c990:	2b00      	cmp	r3, #0
    c992:	d1f2      	bne.n	c97a <usbdc_sof_notify+0xe>
	}
}
    c994:	bf00      	nop
    c996:	3708      	adds	r7, #8
    c998:	46bd      	mov	sp, r7
    c99a:	bd80      	pop	{r7, pc}
    c99c:	20000bec 	.word	0x20000bec

0000c9a0 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    c9a0:	b580      	push	{r7, lr}
    c9a2:	b084      	sub	sp, #16
    c9a4:	af00      	add	r7, sp, #0
    c9a6:	4603      	mov	r3, r0
    c9a8:	6039      	str	r1, [r7, #0]
    c9aa:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    c9ac:	4b0b      	ldr	r3, [pc, #44]	; (c9dc <usbdc_change_notify+0x3c>)
    c9ae:	68db      	ldr	r3, [r3, #12]
    c9b0:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    c9b2:	e00c      	b.n	c9ce <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    c9b4:	68fb      	ldr	r3, [r7, #12]
    c9b6:	685b      	ldr	r3, [r3, #4]
    c9b8:	2b00      	cmp	r3, #0
    c9ba:	d005      	beq.n	c9c8 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    c9bc:	68fb      	ldr	r3, [r7, #12]
    c9be:	685b      	ldr	r3, [r3, #4]
    c9c0:	79fa      	ldrb	r2, [r7, #7]
    c9c2:	6839      	ldr	r1, [r7, #0]
    c9c4:	4610      	mov	r0, r2
    c9c6:	4798      	blx	r3
		}
		cg = cg->next;
    c9c8:	68fb      	ldr	r3, [r7, #12]
    c9ca:	681b      	ldr	r3, [r3, #0]
    c9cc:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    c9ce:	68fb      	ldr	r3, [r7, #12]
    c9d0:	2b00      	cmp	r3, #0
    c9d2:	d1ef      	bne.n	c9b4 <usbdc_change_notify+0x14>
	}
}
    c9d4:	bf00      	nop
    c9d6:	3710      	adds	r7, #16
    c9d8:	46bd      	mov	sp, r7
    c9da:	bd80      	pop	{r7, pc}
    c9dc:	20000bec 	.word	0x20000bec

0000c9e0 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c9e0:	b580      	push	{r7, lr}
    c9e2:	b084      	sub	sp, #16
    c9e4:	af00      	add	r7, sp, #0
    c9e6:	4603      	mov	r3, r0
    c9e8:	6039      	str	r1, [r7, #0]
    c9ea:	71fb      	strb	r3, [r7, #7]
    c9ec:	4613      	mov	r3, r2
    c9ee:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    c9f0:	4b12      	ldr	r3, [pc, #72]	; (ca3c <usbdc_request_handler+0x5c>)
    c9f2:	689b      	ldr	r3, [r3, #8]
    c9f4:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    c9f6:	e019      	b.n	ca2c <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    c9f8:	68fb      	ldr	r3, [r7, #12]
    c9fa:	685b      	ldr	r3, [r3, #4]
    c9fc:	2b00      	cmp	r3, #0
    c9fe:	d012      	beq.n	ca26 <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    ca00:	68fb      	ldr	r3, [r7, #12]
    ca02:	685b      	ldr	r3, [r3, #4]
    ca04:	79ba      	ldrb	r2, [r7, #6]
    ca06:	79f8      	ldrb	r0, [r7, #7]
    ca08:	6839      	ldr	r1, [r7, #0]
    ca0a:	4798      	blx	r3
    ca0c:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    ca0e:	68bb      	ldr	r3, [r7, #8]
    ca10:	2b00      	cmp	r3, #0
    ca12:	d101      	bne.n	ca18 <usbdc_request_handler+0x38>
				return true;
    ca14:	2301      	movs	r3, #1
    ca16:	e00d      	b.n	ca34 <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    ca18:	68bb      	ldr	r3, [r7, #8]
    ca1a:	f113 0f0a 	cmn.w	r3, #10
    ca1e:	d002      	beq.n	ca26 <usbdc_request_handler+0x46>
				return -1;
    ca20:	f04f 33ff 	mov.w	r3, #4294967295
    ca24:	e006      	b.n	ca34 <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    ca26:	68fb      	ldr	r3, [r7, #12]
    ca28:	681b      	ldr	r3, [r3, #0]
    ca2a:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    ca2c:	68fb      	ldr	r3, [r7, #12]
    ca2e:	2b00      	cmp	r3, #0
    ca30:	d1e2      	bne.n	c9f8 <usbdc_request_handler+0x18>
	}
	return false;
    ca32:	2300      	movs	r3, #0
}
    ca34:	4618      	mov	r0, r3
    ca36:	3710      	adds	r7, #16
    ca38:	46bd      	mov	sp, r7
    ca3a:	bd80      	pop	{r7, pc}
    ca3c:	20000bec 	.word	0x20000bec

0000ca40 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    ca40:	b580      	push	{r7, lr}
    ca42:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    ca44:	4b01      	ldr	r3, [pc, #4]	; (ca4c <usbd_sof_cb+0xc>)
    ca46:	4798      	blx	r3
}
    ca48:	bf00      	nop
    ca4a:	bd80      	pop	{r7, pc}
    ca4c:	0000c96d 	.word	0x0000c96d

0000ca50 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    ca50:	b580      	push	{r7, lr}
    ca52:	b082      	sub	sp, #8
    ca54:	af00      	add	r7, sp, #0
    ca56:	4603      	mov	r3, r0
    ca58:	6039      	str	r1, [r7, #0]
    ca5a:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    ca5c:	79fb      	ldrb	r3, [r7, #7]
    ca5e:	2200      	movs	r2, #0
    ca60:	6839      	ldr	r1, [r7, #0]
    ca62:	4618      	mov	r0, r3
    ca64:	4b14      	ldr	r3, [pc, #80]	; (cab8 <usbdc_cb_ctl_req+0x68>)
    ca66:	4798      	blx	r3
    ca68:	4603      	mov	r3, r0
    ca6a:	f1b3 3fff 	cmp.w	r3, #4294967295
    ca6e:	d00b      	beq.n	ca88 <usbdc_cb_ctl_req+0x38>
    ca70:	2b01      	cmp	r3, #1
    ca72:	d007      	beq.n	ca84 <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    ca74:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    ca76:	683b      	ldr	r3, [r7, #0]
    ca78:	781b      	ldrb	r3, [r3, #0]
    ca7a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    ca7e:	2b00      	cmp	r3, #0
    ca80:	d007      	beq.n	ca92 <usbdc_cb_ctl_req+0x42>
    ca82:	e003      	b.n	ca8c <usbdc_cb_ctl_req+0x3c>
		return true;
    ca84:	2301      	movs	r3, #1
    ca86:	e013      	b.n	cab0 <usbdc_cb_ctl_req+0x60>
		return false;
    ca88:	2300      	movs	r3, #0
    ca8a:	e011      	b.n	cab0 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    ca8c:	2b80      	cmp	r3, #128	; 0x80
    ca8e:	d007      	beq.n	caa0 <usbdc_cb_ctl_req+0x50>
    ca90:	e00d      	b.n	caae <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    ca92:	79fb      	ldrb	r3, [r7, #7]
    ca94:	6839      	ldr	r1, [r7, #0]
    ca96:	4618      	mov	r0, r3
    ca98:	4b08      	ldr	r3, [pc, #32]	; (cabc <usbdc_cb_ctl_req+0x6c>)
    ca9a:	4798      	blx	r3
    ca9c:	4603      	mov	r3, r0
    ca9e:	e007      	b.n	cab0 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    caa0:	79fb      	ldrb	r3, [r7, #7]
    caa2:	6839      	ldr	r1, [r7, #0]
    caa4:	4618      	mov	r0, r3
    caa6:	4b06      	ldr	r3, [pc, #24]	; (cac0 <usbdc_cb_ctl_req+0x70>)
    caa8:	4798      	blx	r3
    caaa:	4603      	mov	r3, r0
    caac:	e000      	b.n	cab0 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    caae:	2300      	movs	r3, #0
	}
}
    cab0:	4618      	mov	r0, r3
    cab2:	3708      	adds	r7, #8
    cab4:	46bd      	mov	sp, r7
    cab6:	bd80      	pop	{r7, pc}
    cab8:	0000c9e1 	.word	0x0000c9e1
    cabc:	0000c881 	.word	0x0000c881
    cac0:	0000c4a9 	.word	0x0000c4a9

0000cac4 <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    cac4:	b580      	push	{r7, lr}
    cac6:	b082      	sub	sp, #8
    cac8:	af00      	add	r7, sp, #0
    caca:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    cacc:	687b      	ldr	r3, [r7, #4]
    cace:	781b      	ldrb	r3, [r3, #0]
    cad0:	2b00      	cmp	r3, #0
    cad2:	d135      	bne.n	cb40 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    cad4:	687b      	ldr	r3, [r7, #4]
    cad6:	785b      	ldrb	r3, [r3, #1]
    cad8:	2b05      	cmp	r3, #5
    cada:	d019      	beq.n	cb10 <usbdc_ctrl_status_end+0x4c>
    cadc:	2b09      	cmp	r3, #9
    cade:	d000      	beq.n	cae2 <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    cae0:	e02f      	b.n	cb42 <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    cae2:	687b      	ldr	r3, [r7, #4]
    cae4:	885b      	ldrh	r3, [r3, #2]
    cae6:	b29b      	uxth	r3, r3
    cae8:	b2da      	uxtb	r2, r3
    caea:	4b17      	ldr	r3, [pc, #92]	; (cb48 <usbdc_ctrl_status_end+0x84>)
    caec:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    caee:	687b      	ldr	r3, [r7, #4]
    caf0:	885b      	ldrh	r3, [r3, #2]
    caf2:	b29b      	uxth	r3, r3
    caf4:	2b00      	cmp	r3, #0
    caf6:	d001      	beq.n	cafc <usbdc_ctrl_status_end+0x38>
    caf8:	2204      	movs	r2, #4
    cafa:	e000      	b.n	cafe <usbdc_ctrl_status_end+0x3a>
    cafc:	2203      	movs	r2, #3
    cafe:	4b12      	ldr	r3, [pc, #72]	; (cb48 <usbdc_ctrl_status_end+0x84>)
    cb00:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    cb02:	4b11      	ldr	r3, [pc, #68]	; (cb48 <usbdc_ctrl_status_end+0x84>)
    cb04:	7e9b      	ldrb	r3, [r3, #26]
    cb06:	4619      	mov	r1, r3
    cb08:	2001      	movs	r0, #1
    cb0a:	4b10      	ldr	r3, [pc, #64]	; (cb4c <usbdc_ctrl_status_end+0x88>)
    cb0c:	4798      	blx	r3
		break;
    cb0e:	e018      	b.n	cb42 <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    cb10:	687b      	ldr	r3, [r7, #4]
    cb12:	885b      	ldrh	r3, [r3, #2]
    cb14:	b29b      	uxth	r3, r3
    cb16:	b2db      	uxtb	r3, r3
    cb18:	4618      	mov	r0, r3
    cb1a:	4b0d      	ldr	r3, [pc, #52]	; (cb50 <usbdc_ctrl_status_end+0x8c>)
    cb1c:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    cb1e:	687b      	ldr	r3, [r7, #4]
    cb20:	885b      	ldrh	r3, [r3, #2]
    cb22:	b29b      	uxth	r3, r3
    cb24:	2b00      	cmp	r3, #0
    cb26:	d001      	beq.n	cb2c <usbdc_ctrl_status_end+0x68>
    cb28:	2203      	movs	r2, #3
    cb2a:	e000      	b.n	cb2e <usbdc_ctrl_status_end+0x6a>
    cb2c:	2202      	movs	r2, #2
    cb2e:	4b06      	ldr	r3, [pc, #24]	; (cb48 <usbdc_ctrl_status_end+0x84>)
    cb30:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    cb32:	4b05      	ldr	r3, [pc, #20]	; (cb48 <usbdc_ctrl_status_end+0x84>)
    cb34:	7e9b      	ldrb	r3, [r3, #26]
    cb36:	4619      	mov	r1, r3
    cb38:	2001      	movs	r0, #1
    cb3a:	4b04      	ldr	r3, [pc, #16]	; (cb4c <usbdc_ctrl_status_end+0x88>)
    cb3c:	4798      	blx	r3
		break;
    cb3e:	e000      	b.n	cb42 <usbdc_ctrl_status_end+0x7e>
		return;
    cb40:	bf00      	nop
	}
}
    cb42:	3708      	adds	r7, #8
    cb44:	46bd      	mov	sp, r7
    cb46:	bd80      	pop	{r7, pc}
    cb48:	20000bec 	.word	0x20000bec
    cb4c:	0000c9a1 	.word	0x0000c9a1
    cb50:	0000c721 	.word	0x0000c721

0000cb54 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    cb54:	b580      	push	{r7, lr}
    cb56:	b082      	sub	sp, #8
    cb58:	af00      	add	r7, sp, #0
    cb5a:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    cb5c:	2201      	movs	r2, #1
    cb5e:	6879      	ldr	r1, [r7, #4]
    cb60:	2000      	movs	r0, #0
    cb62:	4b03      	ldr	r3, [pc, #12]	; (cb70 <usbdc_ctrl_data_end+0x1c>)
    cb64:	4798      	blx	r3
	return false;
    cb66:	2300      	movs	r3, #0
}
    cb68:	4618      	mov	r0, r3
    cb6a:	3708      	adds	r7, #8
    cb6c:	46bd      	mov	sp, r7
    cb6e:	bd80      	pop	{r7, pc}
    cb70:	0000c9e1 	.word	0x0000c9e1

0000cb74 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    cb74:	b580      	push	{r7, lr}
    cb76:	b082      	sub	sp, #8
    cb78:	af00      	add	r7, sp, #0
    cb7a:	4603      	mov	r3, r0
    cb7c:	603a      	str	r2, [r7, #0]
    cb7e:	71fb      	strb	r3, [r7, #7]
    cb80:	460b      	mov	r3, r1
    cb82:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    cb84:	79bb      	ldrb	r3, [r7, #6]
    cb86:	2b00      	cmp	r3, #0
    cb88:	d002      	beq.n	cb90 <usbdc_cb_ctl_done+0x1c>
    cb8a:	2b01      	cmp	r3, #1
    cb8c:	d004      	beq.n	cb98 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    cb8e:	e008      	b.n	cba2 <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    cb90:	6838      	ldr	r0, [r7, #0]
    cb92:	4b06      	ldr	r3, [pc, #24]	; (cbac <usbdc_cb_ctl_done+0x38>)
    cb94:	4798      	blx	r3
		break;
    cb96:	e004      	b.n	cba2 <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    cb98:	6838      	ldr	r0, [r7, #0]
    cb9a:	4b05      	ldr	r3, [pc, #20]	; (cbb0 <usbdc_cb_ctl_done+0x3c>)
    cb9c:	4798      	blx	r3
    cb9e:	4603      	mov	r3, r0
    cba0:	e000      	b.n	cba4 <usbdc_cb_ctl_done+0x30>
	}
	return false;
    cba2:	2300      	movs	r3, #0
}
    cba4:	4618      	mov	r0, r3
    cba6:	3708      	adds	r7, #8
    cba8:	46bd      	mov	sp, r7
    cbaa:	bd80      	pop	{r7, pc}
    cbac:	0000cac5 	.word	0x0000cac5
    cbb0:	0000cb55 	.word	0x0000cb55

0000cbb4 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    cbb4:	b580      	push	{r7, lr}
    cbb6:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    cbb8:	4b10      	ldr	r3, [pc, #64]	; (cbfc <usbdc_reset+0x48>)
    cbba:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    cbbc:	4b10      	ldr	r3, [pc, #64]	; (cc00 <usbdc_reset+0x4c>)
    cbbe:	2202      	movs	r2, #2
    cbc0:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    cbc2:	4b0f      	ldr	r3, [pc, #60]	; (cc00 <usbdc_reset+0x4c>)
    cbc4:	2200      	movs	r2, #0
    cbc6:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    cbc8:	4b0d      	ldr	r3, [pc, #52]	; (cc00 <usbdc_reset+0x4c>)
    cbca:	2200      	movs	r2, #0
    cbcc:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    cbce:	2000      	movs	r0, #0
    cbd0:	4b0c      	ldr	r3, [pc, #48]	; (cc04 <usbdc_reset+0x50>)
    cbd2:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    cbd4:	4b0a      	ldr	r3, [pc, #40]	; (cc00 <usbdc_reset+0x4c>)
    cbd6:	7f1b      	ldrb	r3, [r3, #28]
    cbd8:	4618      	mov	r0, r3
    cbda:	4b0b      	ldr	r3, [pc, #44]	; (cc08 <usbdc_reset+0x54>)
    cbdc:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    cbde:	4a0b      	ldr	r2, [pc, #44]	; (cc0c <usbdc_reset+0x58>)
    cbe0:	2100      	movs	r1, #0
    cbe2:	2000      	movs	r0, #0
    cbe4:	4b0a      	ldr	r3, [pc, #40]	; (cc10 <usbdc_reset+0x5c>)
    cbe6:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    cbe8:	4a0a      	ldr	r2, [pc, #40]	; (cc14 <usbdc_reset+0x60>)
    cbea:	2102      	movs	r1, #2
    cbec:	2000      	movs	r0, #0
    cbee:	4b08      	ldr	r3, [pc, #32]	; (cc10 <usbdc_reset+0x5c>)
    cbf0:	4798      	blx	r3
	usb_d_ep_enable(0);
    cbf2:	2000      	movs	r0, #0
    cbf4:	4b08      	ldr	r3, [pc, #32]	; (cc18 <usbdc_reset+0x64>)
    cbf6:	4798      	blx	r3
}
    cbf8:	bf00      	nop
    cbfa:	bd80      	pop	{r7, pc}
    cbfc:	0000c601 	.word	0x0000c601
    cc00:	20000bec 	.word	0x20000bec
    cc04:	0000312d 	.word	0x0000312d
    cc08:	00003069 	.word	0x00003069
    cc0c:	0000ca51 	.word	0x0000ca51
    cc10:	00003481 	.word	0x00003481
    cc14:	0000cb75 	.word	0x0000cb75
    cc18:	0000317d 	.word	0x0000317d

0000cc1c <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    cc1c:	b580      	push	{r7, lr}
    cc1e:	b082      	sub	sp, #8
    cc20:	af00      	add	r7, sp, #0
    cc22:	4603      	mov	r3, r0
    cc24:	6039      	str	r1, [r7, #0]
    cc26:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    cc28:	79fb      	ldrb	r3, [r7, #7]
    cc2a:	2b00      	cmp	r3, #0
    cc2c:	d002      	beq.n	cc34 <usbd_event_cb+0x18>
    cc2e:	2b01      	cmp	r3, #1
    cc30:	d005      	beq.n	cc3e <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    cc32:	e007      	b.n	cc44 <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    cc34:	6839      	ldr	r1, [r7, #0]
    cc36:	2000      	movs	r0, #0
    cc38:	4b04      	ldr	r3, [pc, #16]	; (cc4c <usbd_event_cb+0x30>)
    cc3a:	4798      	blx	r3
		break;
    cc3c:	e002      	b.n	cc44 <usbd_event_cb+0x28>
		usbdc_reset();
    cc3e:	4b04      	ldr	r3, [pc, #16]	; (cc50 <usbd_event_cb+0x34>)
    cc40:	4798      	blx	r3
		break;
    cc42:	bf00      	nop
	}
}
    cc44:	bf00      	nop
    cc46:	3708      	adds	r7, #8
    cc48:	46bd      	mov	sp, r7
    cc4a:	bd80      	pop	{r7, pc}
    cc4c:	0000c9a1 	.word	0x0000c9a1
    cc50:	0000cbb5 	.word	0x0000cbb5

0000cc54 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    cc54:	b580      	push	{r7, lr}
    cc56:	b088      	sub	sp, #32
    cc58:	af00      	add	r7, sp, #0
    cc5a:	60b9      	str	r1, [r7, #8]
    cc5c:	607a      	str	r2, [r7, #4]
    cc5e:	461a      	mov	r2, r3
    cc60:	4603      	mov	r3, r0
    cc62:	73fb      	strb	r3, [r7, #15]
    cc64:	4613      	mov	r3, r2
    cc66:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    cc68:	68bb      	ldr	r3, [r7, #8]
    cc6a:	617b      	str	r3, [r7, #20]
    cc6c:	687b      	ldr	r3, [r7, #4]
    cc6e:	61bb      	str	r3, [r7, #24]
    cc70:	7bfb      	ldrb	r3, [r7, #15]
    cc72:	773b      	strb	r3, [r7, #28]
    cc74:	7bbb      	ldrb	r3, [r7, #14]
    cc76:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    cc78:	f107 0314 	add.w	r3, r7, #20
    cc7c:	4618      	mov	r0, r3
    cc7e:	4b03      	ldr	r3, [pc, #12]	; (cc8c <usbdc_xfer+0x38>)
    cc80:	4798      	blx	r3
    cc82:	4603      	mov	r3, r0
}
    cc84:	4618      	mov	r0, r3
    cc86:	3720      	adds	r7, #32
    cc88:	46bd      	mov	sp, r7
    cc8a:	bd80      	pop	{r7, pc}
    cc8c:	000031ed 	.word	0x000031ed

0000cc90 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    cc90:	b580      	push	{r7, lr}
    cc92:	b082      	sub	sp, #8
    cc94:	af00      	add	r7, sp, #0
    cc96:	4603      	mov	r3, r0
    cc98:	6039      	str	r1, [r7, #0]
    cc9a:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    cc9c:	79fb      	ldrb	r3, [r7, #7]
    cc9e:	2b01      	cmp	r3, #1
    cca0:	d009      	beq.n	ccb6 <usbdc_register_handler+0x26>
    cca2:	2b02      	cmp	r3, #2
    cca4:	d00c      	beq.n	ccc0 <usbdc_register_handler+0x30>
    cca6:	2b00      	cmp	r3, #0
    cca8:	d000      	beq.n	ccac <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    ccaa:	e00e      	b.n	ccca <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    ccac:	6839      	ldr	r1, [r7, #0]
    ccae:	4809      	ldr	r0, [pc, #36]	; (ccd4 <usbdc_register_handler+0x44>)
    ccb0:	4b09      	ldr	r3, [pc, #36]	; (ccd8 <usbdc_register_handler+0x48>)
    ccb2:	4798      	blx	r3
		break;
    ccb4:	e009      	b.n	ccca <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    ccb6:	6839      	ldr	r1, [r7, #0]
    ccb8:	4808      	ldr	r0, [pc, #32]	; (ccdc <usbdc_register_handler+0x4c>)
    ccba:	4b07      	ldr	r3, [pc, #28]	; (ccd8 <usbdc_register_handler+0x48>)
    ccbc:	4798      	blx	r3
		break;
    ccbe:	e004      	b.n	ccca <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    ccc0:	6839      	ldr	r1, [r7, #0]
    ccc2:	4807      	ldr	r0, [pc, #28]	; (cce0 <usbdc_register_handler+0x50>)
    ccc4:	4b04      	ldr	r3, [pc, #16]	; (ccd8 <usbdc_register_handler+0x48>)
    ccc6:	4798      	blx	r3
		break;
    ccc8:	bf00      	nop
	}
}
    ccca:	bf00      	nop
    cccc:	3708      	adds	r7, #8
    ccce:	46bd      	mov	sp, r7
    ccd0:	bd80      	pop	{r7, pc}
    ccd2:	bf00      	nop
    ccd4:	20000bf0 	.word	0x20000bf0
    ccd8:	000035d9 	.word	0x000035d9
    ccdc:	20000bf4 	.word	0x20000bf4
    cce0:	20000bf8 	.word	0x20000bf8

0000cce4 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    cce4:	b580      	push	{r7, lr}
    cce6:	b084      	sub	sp, #16
    cce8:	af00      	add	r7, sp, #0
    ccea:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    ccec:	687b      	ldr	r3, [r7, #4]
    ccee:	2b00      	cmp	r3, #0
    ccf0:	bf14      	ite	ne
    ccf2:	2301      	movne	r3, #1
    ccf4:	2300      	moveq	r3, #0
    ccf6:	b2db      	uxtb	r3, r3
    ccf8:	f240 3255 	movw	r2, #853	; 0x355
    ccfc:	4910      	ldr	r1, [pc, #64]	; (cd40 <usbdc_init+0x5c>)
    ccfe:	4618      	mov	r0, r3
    cd00:	4b10      	ldr	r3, [pc, #64]	; (cd44 <usbdc_init+0x60>)
    cd02:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    cd04:	4b10      	ldr	r3, [pc, #64]	; (cd48 <usbdc_init+0x64>)
    cd06:	4798      	blx	r3
    cd08:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    cd0a:	68fb      	ldr	r3, [r7, #12]
    cd0c:	2b00      	cmp	r3, #0
    cd0e:	da01      	bge.n	cd14 <usbdc_init+0x30>
		return rc;
    cd10:	68fb      	ldr	r3, [r7, #12]
    cd12:	e010      	b.n	cd36 <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    cd14:	2220      	movs	r2, #32
    cd16:	2100      	movs	r1, #0
    cd18:	480c      	ldr	r0, [pc, #48]	; (cd4c <usbdc_init+0x68>)
    cd1a:	4b0d      	ldr	r3, [pc, #52]	; (cd50 <usbdc_init+0x6c>)
    cd1c:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    cd1e:	4a0b      	ldr	r2, [pc, #44]	; (cd4c <usbdc_init+0x68>)
    cd20:	687b      	ldr	r3, [r7, #4]
    cd22:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    cd24:	490b      	ldr	r1, [pc, #44]	; (cd54 <usbdc_init+0x70>)
    cd26:	2000      	movs	r0, #0
    cd28:	4b0b      	ldr	r3, [pc, #44]	; (cd58 <usbdc_init+0x74>)
    cd2a:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    cd2c:	490b      	ldr	r1, [pc, #44]	; (cd5c <usbdc_init+0x78>)
    cd2e:	2001      	movs	r0, #1
    cd30:	4b09      	ldr	r3, [pc, #36]	; (cd58 <usbdc_init+0x74>)
    cd32:	4798      	blx	r3

	return 0;
    cd34:	2300      	movs	r3, #0
}
    cd36:	4618      	mov	r0, r3
    cd38:	3710      	adds	r7, #16
    cd3a:	46bd      	mov	sp, r7
    cd3c:	bd80      	pop	{r7, pc}
    cd3e:	bf00      	nop
    cd40:	0000e69c 	.word	0x0000e69c
    cd44:	000034fd 	.word	0x000034fd
    cd48:	00002f55 	.word	0x00002f55
    cd4c:	20000bec 	.word	0x20000bec
    cd50:	0000de01 	.word	0x0000de01
    cd54:	0000ca41 	.word	0x0000ca41
    cd58:	00003001 	.word	0x00003001
    cd5c:	0000cc1d 	.word	0x0000cc1d

0000cd60 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    cd60:	b580      	push	{r7, lr}
    cd62:	b082      	sub	sp, #8
    cd64:	af00      	add	r7, sp, #0
    cd66:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    cd68:	6879      	ldr	r1, [r7, #4]
    cd6a:	4803      	ldr	r0, [pc, #12]	; (cd78 <usbdc_register_function+0x18>)
    cd6c:	4b03      	ldr	r3, [pc, #12]	; (cd7c <usbdc_register_function+0x1c>)
    cd6e:	4798      	blx	r3
}
    cd70:	bf00      	nop
    cd72:	3708      	adds	r7, #8
    cd74:	46bd      	mov	sp, r7
    cd76:	bd80      	pop	{r7, pc}
    cd78:	20000bfc 	.word	0x20000bfc
    cd7c:	000035d9 	.word	0x000035d9

0000cd80 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    cd80:	b580      	push	{r7, lr}
    cd82:	b082      	sub	sp, #8
    cd84:	af00      	add	r7, sp, #0
    cd86:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    cd88:	4b0f      	ldr	r3, [pc, #60]	; (cdc8 <usbdc_start+0x48>)
    cd8a:	7e9b      	ldrb	r3, [r3, #26]
    cd8c:	2b00      	cmp	r3, #0
    cd8e:	d002      	beq.n	cd96 <usbdc_start+0x16>
		return ERR_BUSY;
    cd90:	f06f 0303 	mvn.w	r3, #3
    cd94:	e013      	b.n	cdbe <usbdc_start+0x3e>
	}

	if (desces) {
    cd96:	687b      	ldr	r3, [r7, #4]
    cd98:	2b00      	cmp	r3, #0
    cd9a:	d00e      	beq.n	cdba <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    cd9c:	4a0a      	ldr	r2, [pc, #40]	; (cdc8 <usbdc_start+0x48>)
    cd9e:	687b      	ldr	r3, [r7, #4]
    cda0:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    cda2:	687b      	ldr	r3, [r7, #4]
    cda4:	681b      	ldr	r3, [r3, #0]
    cda6:	79da      	ldrb	r2, [r3, #7]
    cda8:	4b07      	ldr	r3, [pc, #28]	; (cdc8 <usbdc_start+0x48>)
    cdaa:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    cdac:	4b06      	ldr	r3, [pc, #24]	; (cdc8 <usbdc_start+0x48>)
    cdae:	2201      	movs	r2, #1
    cdb0:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    cdb2:	4b06      	ldr	r3, [pc, #24]	; (cdcc <usbdc_start+0x4c>)
    cdb4:	4798      	blx	r3
	return ERR_NONE;
    cdb6:	2300      	movs	r3, #0
    cdb8:	e001      	b.n	cdbe <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    cdba:	f06f 0308 	mvn.w	r3, #8
}
    cdbe:	4618      	mov	r0, r3
    cdc0:	3708      	adds	r7, #8
    cdc2:	46bd      	mov	sp, r7
    cdc4:	bd80      	pop	{r7, pc}
    cdc6:	bf00      	nop
    cdc8:	20000bec 	.word	0x20000bec
    cdcc:	00003025 	.word	0x00003025

0000cdd0 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    cdd0:	b580      	push	{r7, lr}
    cdd2:	af00      	add	r7, sp, #0
	usb_d_attach();
    cdd4:	4b01      	ldr	r3, [pc, #4]	; (cddc <usbdc_attach+0xc>)
    cdd6:	4798      	blx	r3
}
    cdd8:	bf00      	nop
    cdda:	bd80      	pop	{r7, pc}
    cddc:	00003039 	.word	0x00003039

0000cde0 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    cde0:	b480      	push	{r7}
    cde2:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    cde4:	4b03      	ldr	r3, [pc, #12]	; (cdf4 <usbdc_get_ctrl_buffer+0x14>)
    cde6:	695b      	ldr	r3, [r3, #20]
}
    cde8:	4618      	mov	r0, r3
    cdea:	46bd      	mov	sp, r7
    cdec:	f85d 7b04 	ldr.w	r7, [sp], #4
    cdf0:	4770      	bx	lr
    cdf2:	bf00      	nop
    cdf4:	20000bec 	.word	0x20000bec

0000cdf8 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    cdf8:	b480      	push	{r7}
    cdfa:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    cdfc:	4b07      	ldr	r3, [pc, #28]	; (ce1c <usbdc_get_state+0x24>)
    cdfe:	7e9b      	ldrb	r3, [r3, #26]
    ce00:	f003 0310 	and.w	r3, r3, #16
    ce04:	2b00      	cmp	r3, #0
    ce06:	d001      	beq.n	ce0c <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    ce08:	2310      	movs	r3, #16
    ce0a:	e001      	b.n	ce10 <usbdc_get_state+0x18>
	}
	return usbdc.state;
    ce0c:	4b03      	ldr	r3, [pc, #12]	; (ce1c <usbdc_get_state+0x24>)
    ce0e:	7e9b      	ldrb	r3, [r3, #26]
}
    ce10:	4618      	mov	r0, r3
    ce12:	46bd      	mov	sp, r7
    ce14:	f85d 7b04 	ldr.w	r7, [sp], #4
    ce18:	4770      	bx	lr
    ce1a:	bf00      	nop
    ce1c:	20000bec 	.word	0x20000bec

0000ce20 <usb_get_u16>:
{
    ce20:	b480      	push	{r7}
    ce22:	b083      	sub	sp, #12
    ce24:	af00      	add	r7, sp, #0
    ce26:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    ce28:	687b      	ldr	r3, [r7, #4]
    ce2a:	781b      	ldrb	r3, [r3, #0]
    ce2c:	b29a      	uxth	r2, r3
    ce2e:	687b      	ldr	r3, [r7, #4]
    ce30:	3301      	adds	r3, #1
    ce32:	781b      	ldrb	r3, [r3, #0]
    ce34:	b29b      	uxth	r3, r3
    ce36:	021b      	lsls	r3, r3, #8
    ce38:	b29b      	uxth	r3, r3
    ce3a:	4413      	add	r3, r2
    ce3c:	b29b      	uxth	r3, r3
}
    ce3e:	4618      	mov	r0, r3
    ce40:	370c      	adds	r7, #12
    ce42:	46bd      	mov	sp, r7
    ce44:	f85d 7b04 	ldr.w	r7, [sp], #4
    ce48:	4770      	bx	lr

0000ce4a <usb_desc_len>:
{
    ce4a:	b480      	push	{r7}
    ce4c:	b083      	sub	sp, #12
    ce4e:	af00      	add	r7, sp, #0
    ce50:	6078      	str	r0, [r7, #4]
	return desc[0];
    ce52:	687b      	ldr	r3, [r7, #4]
    ce54:	781b      	ldrb	r3, [r3, #0]
}
    ce56:	4618      	mov	r0, r3
    ce58:	370c      	adds	r7, #12
    ce5a:	46bd      	mov	sp, r7
    ce5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    ce60:	4770      	bx	lr

0000ce62 <usb_desc_type>:
{
    ce62:	b480      	push	{r7}
    ce64:	b083      	sub	sp, #12
    ce66:	af00      	add	r7, sp, #0
    ce68:	6078      	str	r0, [r7, #4]
	return desc[1];
    ce6a:	687b      	ldr	r3, [r7, #4]
    ce6c:	3301      	adds	r3, #1
    ce6e:	781b      	ldrb	r3, [r3, #0]
}
    ce70:	4618      	mov	r0, r3
    ce72:	370c      	adds	r7, #12
    ce74:	46bd      	mov	sp, r7
    ce76:	f85d 7b04 	ldr.w	r7, [sp], #4
    ce7a:	4770      	bx	lr

0000ce7c <usb_desc_next>:
{
    ce7c:	b580      	push	{r7, lr}
    ce7e:	b082      	sub	sp, #8
    ce80:	af00      	add	r7, sp, #0
    ce82:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    ce84:	6878      	ldr	r0, [r7, #4]
    ce86:	4b05      	ldr	r3, [pc, #20]	; (ce9c <usb_desc_next+0x20>)
    ce88:	4798      	blx	r3
    ce8a:	4603      	mov	r3, r0
    ce8c:	461a      	mov	r2, r3
    ce8e:	687b      	ldr	r3, [r7, #4]
    ce90:	4413      	add	r3, r2
}
    ce92:	4618      	mov	r0, r3
    ce94:	3708      	adds	r7, #8
    ce96:	46bd      	mov	sp, r7
    ce98:	bd80      	pop	{r7, pc}
    ce9a:	bf00      	nop
    ce9c:	0000ce4b 	.word	0x0000ce4b

0000cea0 <usb_cfg_desc_total_len>:
{
    cea0:	b580      	push	{r7, lr}
    cea2:	b082      	sub	sp, #8
    cea4:	af00      	add	r7, sp, #0
    cea6:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    cea8:	687b      	ldr	r3, [r7, #4]
    ceaa:	3302      	adds	r3, #2
    ceac:	4618      	mov	r0, r3
    ceae:	4b03      	ldr	r3, [pc, #12]	; (cebc <usb_cfg_desc_total_len+0x1c>)
    ceb0:	4798      	blx	r3
    ceb2:	4603      	mov	r3, r0
}
    ceb4:	4618      	mov	r0, r3
    ceb6:	3708      	adds	r7, #8
    ceb8:	46bd      	mov	sp, r7
    ceba:	bd80      	pop	{r7, pc}
    cebc:	0000ce21 	.word	0x0000ce21

0000cec0 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    cec0:	b580      	push	{r7, lr}
    cec2:	b082      	sub	sp, #8
    cec4:	af00      	add	r7, sp, #0
    cec6:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    cec8:	6878      	ldr	r0, [r7, #4]
    ceca:	4b05      	ldr	r3, [pc, #20]	; (cee0 <usb_cfg_desc_next+0x20>)
    cecc:	4798      	blx	r3
    cece:	4603      	mov	r3, r0
    ced0:	461a      	mov	r2, r3
    ced2:	687b      	ldr	r3, [r7, #4]
    ced4:	4413      	add	r3, r2
}
    ced6:	4618      	mov	r0, r3
    ced8:	3708      	adds	r7, #8
    ceda:	46bd      	mov	sp, r7
    cedc:	bd80      	pop	{r7, pc}
    cede:	bf00      	nop
    cee0:	0000cea1 	.word	0x0000cea1

0000cee4 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    cee4:	b580      	push	{r7, lr}
    cee6:	b084      	sub	sp, #16
    cee8:	af00      	add	r7, sp, #0
    ceea:	60f8      	str	r0, [r7, #12]
    ceec:	60b9      	str	r1, [r7, #8]
    ceee:	4613      	mov	r3, r2
    cef0:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    cef2:	e015      	b.n	cf20 <usb_find_desc+0x3c>
		_desc_len_check();
    cef4:	68f8      	ldr	r0, [r7, #12]
    cef6:	4b0f      	ldr	r3, [pc, #60]	; (cf34 <usb_find_desc+0x50>)
    cef8:	4798      	blx	r3
    cefa:	4603      	mov	r3, r0
    cefc:	2b01      	cmp	r3, #1
    cefe:	d801      	bhi.n	cf04 <usb_find_desc+0x20>
    cf00:	2300      	movs	r3, #0
    cf02:	e012      	b.n	cf2a <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    cf04:	68f8      	ldr	r0, [r7, #12]
    cf06:	4b0c      	ldr	r3, [pc, #48]	; (cf38 <usb_find_desc+0x54>)
    cf08:	4798      	blx	r3
    cf0a:	4603      	mov	r3, r0
    cf0c:	461a      	mov	r2, r3
    cf0e:	79fb      	ldrb	r3, [r7, #7]
    cf10:	4293      	cmp	r3, r2
    cf12:	d101      	bne.n	cf18 <usb_find_desc+0x34>
			return desc;
    cf14:	68fb      	ldr	r3, [r7, #12]
    cf16:	e008      	b.n	cf2a <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    cf18:	68f8      	ldr	r0, [r7, #12]
    cf1a:	4b08      	ldr	r3, [pc, #32]	; (cf3c <usb_find_desc+0x58>)
    cf1c:	4798      	blx	r3
    cf1e:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    cf20:	68fa      	ldr	r2, [r7, #12]
    cf22:	68bb      	ldr	r3, [r7, #8]
    cf24:	429a      	cmp	r2, r3
    cf26:	d3e5      	bcc.n	cef4 <usb_find_desc+0x10>
	}
	return NULL;
    cf28:	2300      	movs	r3, #0
}
    cf2a:	4618      	mov	r0, r3
    cf2c:	3710      	adds	r7, #16
    cf2e:	46bd      	mov	sp, r7
    cf30:	bd80      	pop	{r7, pc}
    cf32:	bf00      	nop
    cf34:	0000ce4b 	.word	0x0000ce4b
    cf38:	0000ce63 	.word	0x0000ce63
    cf3c:	0000ce7d 	.word	0x0000ce7d

0000cf40 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    cf40:	b580      	push	{r7, lr}
    cf42:	b082      	sub	sp, #8
    cf44:	af00      	add	r7, sp, #0
    cf46:	6078      	str	r0, [r7, #4]
    cf48:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    cf4a:	e019      	b.n	cf80 <usb_find_ep_desc+0x40>
		_desc_len_check();
    cf4c:	6878      	ldr	r0, [r7, #4]
    cf4e:	4b12      	ldr	r3, [pc, #72]	; (cf98 <usb_find_ep_desc+0x58>)
    cf50:	4798      	blx	r3
    cf52:	4603      	mov	r3, r0
    cf54:	2b01      	cmp	r3, #1
    cf56:	d801      	bhi.n	cf5c <usb_find_ep_desc+0x1c>
    cf58:	2300      	movs	r3, #0
    cf5a:	e018      	b.n	cf8e <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    cf5c:	6878      	ldr	r0, [r7, #4]
    cf5e:	4b0f      	ldr	r3, [pc, #60]	; (cf9c <usb_find_ep_desc+0x5c>)
    cf60:	4798      	blx	r3
    cf62:	4603      	mov	r3, r0
    cf64:	2b04      	cmp	r3, #4
    cf66:	d010      	beq.n	cf8a <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    cf68:	6878      	ldr	r0, [r7, #4]
    cf6a:	4b0c      	ldr	r3, [pc, #48]	; (cf9c <usb_find_ep_desc+0x5c>)
    cf6c:	4798      	blx	r3
    cf6e:	4603      	mov	r3, r0
    cf70:	2b05      	cmp	r3, #5
    cf72:	d101      	bne.n	cf78 <usb_find_ep_desc+0x38>
			return desc;
    cf74:	687b      	ldr	r3, [r7, #4]
    cf76:	e00a      	b.n	cf8e <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    cf78:	6878      	ldr	r0, [r7, #4]
    cf7a:	4b09      	ldr	r3, [pc, #36]	; (cfa0 <usb_find_ep_desc+0x60>)
    cf7c:	4798      	blx	r3
    cf7e:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    cf80:	687a      	ldr	r2, [r7, #4]
    cf82:	683b      	ldr	r3, [r7, #0]
    cf84:	429a      	cmp	r2, r3
    cf86:	d3e1      	bcc.n	cf4c <usb_find_ep_desc+0xc>
    cf88:	e000      	b.n	cf8c <usb_find_ep_desc+0x4c>
			break;
    cf8a:	bf00      	nop
	}
	return NULL;
    cf8c:	2300      	movs	r3, #0
}
    cf8e:	4618      	mov	r0, r3
    cf90:	3708      	adds	r7, #8
    cf92:	46bd      	mov	sp, r7
    cf94:	bd80      	pop	{r7, pc}
    cf96:	bf00      	nop
    cf98:	0000ce4b 	.word	0x0000ce4b
    cf9c:	0000ce63 	.word	0x0000ce63
    cfa0:	0000ce7d 	.word	0x0000ce7d

0000cfa4 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    cfa4:	b580      	push	{r7, lr}
    cfa6:	b084      	sub	sp, #16
    cfa8:	af00      	add	r7, sp, #0
    cfaa:	60f8      	str	r0, [r7, #12]
    cfac:	60b9      	str	r1, [r7, #8]
    cfae:	4613      	mov	r3, r2
    cfb0:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    cfb2:	2202      	movs	r2, #2
    cfb4:	68b9      	ldr	r1, [r7, #8]
    cfb6:	68f8      	ldr	r0, [r7, #12]
    cfb8:	4b15      	ldr	r3, [pc, #84]	; (d010 <usb_find_cfg_desc+0x6c>)
    cfba:	4798      	blx	r3
    cfbc:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    cfbe:	68fb      	ldr	r3, [r7, #12]
    cfc0:	2b00      	cmp	r3, #0
    cfc2:	d11a      	bne.n	cffa <usb_find_cfg_desc+0x56>
		return NULL;
    cfc4:	2300      	movs	r3, #0
    cfc6:	e01f      	b.n	d008 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    cfc8:	68f8      	ldr	r0, [r7, #12]
    cfca:	4b12      	ldr	r3, [pc, #72]	; (d014 <usb_find_cfg_desc+0x70>)
    cfcc:	4798      	blx	r3
    cfce:	4603      	mov	r3, r0
    cfd0:	2b01      	cmp	r3, #1
    cfd2:	d801      	bhi.n	cfd8 <usb_find_cfg_desc+0x34>
    cfd4:	2300      	movs	r3, #0
    cfd6:	e017      	b.n	d008 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    cfd8:	68fb      	ldr	r3, [r7, #12]
    cfda:	3301      	adds	r3, #1
    cfdc:	781b      	ldrb	r3, [r3, #0]
    cfde:	2b02      	cmp	r3, #2
    cfe0:	d110      	bne.n	d004 <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    cfe2:	68fb      	ldr	r3, [r7, #12]
    cfe4:	3305      	adds	r3, #5
    cfe6:	781b      	ldrb	r3, [r3, #0]
    cfe8:	79fa      	ldrb	r2, [r7, #7]
    cfea:	429a      	cmp	r2, r3
    cfec:	d101      	bne.n	cff2 <usb_find_cfg_desc+0x4e>
			return desc;
    cfee:	68fb      	ldr	r3, [r7, #12]
    cff0:	e00a      	b.n	d008 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    cff2:	68f8      	ldr	r0, [r7, #12]
    cff4:	4b08      	ldr	r3, [pc, #32]	; (d018 <usb_find_cfg_desc+0x74>)
    cff6:	4798      	blx	r3
    cff8:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    cffa:	68fa      	ldr	r2, [r7, #12]
    cffc:	68bb      	ldr	r3, [r7, #8]
    cffe:	429a      	cmp	r2, r3
    d000:	d3e2      	bcc.n	cfc8 <usb_find_cfg_desc+0x24>
    d002:	e000      	b.n	d006 <usb_find_cfg_desc+0x62>
			break;
    d004:	bf00      	nop
	}
	return NULL;
    d006:	2300      	movs	r3, #0
}
    d008:	4618      	mov	r0, r3
    d00a:	3710      	adds	r7, #16
    d00c:	46bd      	mov	sp, r7
    d00e:	bd80      	pop	{r7, pc}
    d010:	0000cee5 	.word	0x0000cee5
    d014:	0000ce4b 	.word	0x0000ce4b
    d018:	0000cec1 	.word	0x0000cec1

0000d01c <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    d01c:	b580      	push	{r7, lr}
    d01e:	b086      	sub	sp, #24
    d020:	af00      	add	r7, sp, #0
    d022:	60f8      	str	r0, [r7, #12]
    d024:	60b9      	str	r1, [r7, #8]
    d026:	4613      	mov	r3, r2
    d028:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    d02a:	2300      	movs	r3, #0
    d02c:	75fb      	strb	r3, [r7, #23]
    d02e:	e020      	b.n	d072 <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    d030:	2203      	movs	r2, #3
    d032:	68b9      	ldr	r1, [r7, #8]
    d034:	68f8      	ldr	r0, [r7, #12]
    d036:	4b13      	ldr	r3, [pc, #76]	; (d084 <usb_find_str_desc+0x68>)
    d038:	4798      	blx	r3
    d03a:	60f8      	str	r0, [r7, #12]
		if (desc) {
    d03c:	68fb      	ldr	r3, [r7, #12]
    d03e:	2b00      	cmp	r3, #0
    d040:	d015      	beq.n	d06e <usb_find_str_desc+0x52>
			_desc_len_check();
    d042:	68f8      	ldr	r0, [r7, #12]
    d044:	4b10      	ldr	r3, [pc, #64]	; (d088 <usb_find_str_desc+0x6c>)
    d046:	4798      	blx	r3
    d048:	4603      	mov	r3, r0
    d04a:	2b01      	cmp	r3, #1
    d04c:	d801      	bhi.n	d052 <usb_find_str_desc+0x36>
    d04e:	2300      	movs	r3, #0
    d050:	e014      	b.n	d07c <usb_find_str_desc+0x60>
			if (i == str_index) {
    d052:	7dfa      	ldrb	r2, [r7, #23]
    d054:	79fb      	ldrb	r3, [r7, #7]
    d056:	429a      	cmp	r2, r3
    d058:	d101      	bne.n	d05e <usb_find_str_desc+0x42>
				return desc;
    d05a:	68fb      	ldr	r3, [r7, #12]
    d05c:	e00e      	b.n	d07c <usb_find_str_desc+0x60>
			}
			i++;
    d05e:	7dfb      	ldrb	r3, [r7, #23]
    d060:	3301      	adds	r3, #1
    d062:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    d064:	68f8      	ldr	r0, [r7, #12]
    d066:	4b09      	ldr	r3, [pc, #36]	; (d08c <usb_find_str_desc+0x70>)
    d068:	4798      	blx	r3
    d06a:	60f8      	str	r0, [r7, #12]
    d06c:	e001      	b.n	d072 <usb_find_str_desc+0x56>
		} else {
			return NULL;
    d06e:	2300      	movs	r3, #0
    d070:	e004      	b.n	d07c <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    d072:	68fa      	ldr	r2, [r7, #12]
    d074:	68bb      	ldr	r3, [r7, #8]
    d076:	429a      	cmp	r2, r3
    d078:	d3da      	bcc.n	d030 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    d07a:	2300      	movs	r3, #0
}
    d07c:	4618      	mov	r0, r3
    d07e:	3718      	adds	r7, #24
    d080:	46bd      	mov	sp, r7
    d082:	bd80      	pop	{r7, pc}
    d084:	0000cee5 	.word	0x0000cee5
    d088:	0000ce4b 	.word	0x0000ce4b
    d08c:	0000ce7d 	.word	0x0000ce7d

0000d090 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    d090:	b480      	push	{r7}
    d092:	b083      	sub	sp, #12
    d094:	af00      	add	r7, sp, #0
    d096:	6078      	str	r0, [r7, #4]
    d098:	4a05      	ldr	r2, [pc, #20]	; (d0b0 <_ZN5PrintC1Ev+0x20>)
    d09a:	687b      	ldr	r3, [r7, #4]
    d09c:	601a      	str	r2, [r3, #0]
    d09e:	687b      	ldr	r3, [r7, #4]
    d0a0:	2200      	movs	r2, #0
    d0a2:	605a      	str	r2, [r3, #4]
    d0a4:	687b      	ldr	r3, [r7, #4]
    d0a6:	4618      	mov	r0, r3
    d0a8:	370c      	adds	r7, #12
    d0aa:	46bd      	mov	sp, r7
    d0ac:	bc80      	pop	{r7}
    d0ae:	4770      	bx	lr
    d0b0:	0000e728 	.word	0x0000e728

0000d0b4 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    d0b4:	b480      	push	{r7}
    d0b6:	b083      	sub	sp, #12
    d0b8:	af00      	add	r7, sp, #0
    d0ba:	6078      	str	r0, [r7, #4]
    d0bc:	2300      	movs	r3, #0
    d0be:	4618      	mov	r0, r3
    d0c0:	370c      	adds	r7, #12
    d0c2:	46bd      	mov	sp, r7
    d0c4:	bc80      	pop	{r7}
    d0c6:	4770      	bx	lr

0000d0c8 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    d0c8:	b480      	push	{r7}
    d0ca:	b083      	sub	sp, #12
    d0cc:	af00      	add	r7, sp, #0
    d0ce:	6078      	str	r0, [r7, #4]
    d0d0:	bf00      	nop
    d0d2:	370c      	adds	r7, #12
    d0d4:	46bd      	mov	sp, r7
    d0d6:	bc80      	pop	{r7}
    d0d8:	4770      	bx	lr
	...

0000d0dc <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
    d0dc:	b580      	push	{r7, lr}
    d0de:	b082      	sub	sp, #8
    d0e0:	af00      	add	r7, sp, #0
    d0e2:	6078      	str	r0, [r7, #4]
    d0e4:	687b      	ldr	r3, [r7, #4]
    d0e6:	4618      	mov	r0, r3
    d0e8:	4b06      	ldr	r3, [pc, #24]	; (d104 <_ZN6StreamC1Ev+0x28>)
    d0ea:	4798      	blx	r3
    d0ec:	4a06      	ldr	r2, [pc, #24]	; (d108 <_ZN6StreamC1Ev+0x2c>)
    d0ee:	687b      	ldr	r3, [r7, #4]
    d0f0:	601a      	str	r2, [r3, #0]
    d0f2:	687b      	ldr	r3, [r7, #4]
    d0f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d0f8:	609a      	str	r2, [r3, #8]
    d0fa:	687b      	ldr	r3, [r7, #4]
    d0fc:	4618      	mov	r0, r3
    d0fe:	3708      	adds	r7, #8
    d100:	46bd      	mov	sp, r7
    d102:	bd80      	pop	{r7, pc}
    d104:	0000d091 	.word	0x0000d091
    d108:	0000e6ec 	.word	0x0000e6ec

0000d10c <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    d10c:	b480      	push	{r7}
    d10e:	b083      	sub	sp, #12
    d110:	af00      	add	r7, sp, #0
    d112:	4603      	mov	r3, r0
    d114:	603a      	str	r2, [r7, #0]
    d116:	71fb      	strb	r3, [r7, #7]
    d118:	460b      	mov	r3, r1
    d11a:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
    d11c:	4b08      	ldr	r3, [pc, #32]	; (d140 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    d11e:	681b      	ldr	r3, [r3, #0]
    d120:	2201      	movs	r2, #1
    d122:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->terminalStarted=true;
    d124:	4b06      	ldr	r3, [pc, #24]	; (d140 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    d126:	681b      	ldr	r3, [r3, #0]
    d128:	2201      	movs	r2, #1
    d12a:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->plugged=true;
    d12c:	4b04      	ldr	r3, [pc, #16]	; (d140 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    d12e:	681b      	ldr	r3, [r3, #0]
    d130:	2201      	movs	r2, #1
    d132:	741a      	strb	r2, [r3, #16]


	return false;
    d134:	2300      	movs	r3, #0
}
    d136:	4618      	mov	r0, r3
    d138:	370c      	adds	r7, #12
    d13a:	46bd      	mov	sp, r7
    d13c:	bc80      	pop	{r7}
    d13e:	4770      	bx	lr
    d140:	20000c0c 	.word	0x20000c0c

0000d144 <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    d144:	b480      	push	{r7}
    d146:	b083      	sub	sp, #12
    d148:	af00      	add	r7, sp, #0
    d14a:	4603      	mov	r3, r0
    d14c:	603a      	str	r2, [r7, #0]
    d14e:	71fb      	strb	r3, [r7, #7]
    d150:	460b      	mov	r3, r1
    d152:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
    d154:	4b08      	ldr	r3, [pc, #32]	; (d178 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    d156:	681b      	ldr	r3, [r3, #0]
    d158:	2201      	movs	r2, #1
    d15a:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->terminalStarted=true;
    d15c:	4b06      	ldr	r3, [pc, #24]	; (d178 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    d15e:	681b      	ldr	r3, [r3, #0]
    d160:	2201      	movs	r2, #1
    d162:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->plugged=true;
    d164:	4b04      	ldr	r3, [pc, #16]	; (d178 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    d166:	681b      	ldr	r3, [r3, #0]
    d168:	2201      	movs	r2, #1
    d16a:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
    d16c:	2300      	movs	r3, #0
}
    d16e:	4618      	mov	r0, r3
    d170:	370c      	adds	r7, #12
    d172:	46bd      	mov	sp, r7
    d174:	bc80      	pop	{r7}
    d176:	4770      	bx	lr
    d178:	20000c0c 	.word	0x20000c0c

0000d17c <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
    d17c:	b580      	push	{r7, lr}
    d17e:	b082      	sub	sp, #8
    d180:	af00      	add	r7, sp, #0
    d182:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
    d184:	793b      	ldrb	r3, [r7, #4]
    d186:	f003 0301 	and.w	r3, r3, #1
    d18a:	b2db      	uxtb	r3, r3
    d18c:	2b00      	cmp	r3, #0
    d18e:	d013      	beq.n	d1b8 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    d190:	490c      	ldr	r1, [pc, #48]	; (d1c4 <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
    d192:	2000      	movs	r0, #0
    d194:	4b0c      	ldr	r3, [pc, #48]	; (d1c8 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    d196:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    d198:	490c      	ldr	r1, [pc, #48]	; (d1cc <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
    d19a:	2001      	movs	r0, #1
    d19c:	4b0a      	ldr	r3, [pc, #40]	; (d1c8 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    d19e:	4798      	blx	r3
		ptrCDCClass->txReady=true;
    d1a0:	4b0b      	ldr	r3, [pc, #44]	; (d1d0 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    d1a2:	681b      	ldr	r3, [r3, #0]
    d1a4:	2201      	movs	r2, #1
    d1a6:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
    d1a8:	4b09      	ldr	r3, [pc, #36]	; (d1d0 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    d1aa:	681b      	ldr	r3, [r3, #0]
    d1ac:	2201      	movs	r2, #1
    d1ae:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->plugged=true;
    d1b0:	4b07      	ldr	r3, [pc, #28]	; (d1d0 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    d1b2:	681b      	ldr	r3, [r3, #0]
    d1b4:	2201      	movs	r2, #1
    d1b6:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
    d1b8:	2300      	movs	r3, #0
}
    d1ba:	4618      	mov	r0, r3
    d1bc:	3708      	adds	r7, #8
    d1be:	46bd      	mov	sp, r7
    d1c0:	bd80      	pop	{r7, pc}
    d1c2:	bf00      	nop
    d1c4:	0000d10d 	.word	0x0000d10d
    d1c8:	0000c059 	.word	0x0000c059
    d1cc:	0000d145 	.word	0x0000d145
    d1d0:	20000c0c 	.word	0x20000c0c

0000d1d4 <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
    d1d4:	b580      	push	{r7, lr}
    d1d6:	b082      	sub	sp, #8
    d1d8:	af00      	add	r7, sp, #0
    d1da:	6078      	str	r0, [r7, #4]
    d1dc:	687b      	ldr	r3, [r7, #4]
    d1de:	4618      	mov	r0, r3
    d1e0:	4b0a      	ldr	r3, [pc, #40]	; (d20c <_ZN9CDC_ClassC1Ev+0x38>)
    d1e2:	4798      	blx	r3
    d1e4:	687b      	ldr	r3, [r7, #4]
    d1e6:	3310      	adds	r3, #16
    d1e8:	4618      	mov	r0, r3
    d1ea:	4b09      	ldr	r3, [pc, #36]	; (d210 <_ZN9CDC_ClassC1Ev+0x3c>)
    d1ec:	4798      	blx	r3
    d1ee:	4a09      	ldr	r2, [pc, #36]	; (d214 <_ZN9CDC_ClassC1Ev+0x40>)
    d1f0:	687b      	ldr	r3, [r7, #4]
    d1f2:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
    d1f4:	687b      	ldr	r3, [r7, #4]
    d1f6:	f04f 32ff 	mov.w	r2, #4294967295
    d1fa:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
    d1fc:	4a06      	ldr	r2, [pc, #24]	; (d218 <_ZN9CDC_ClassC1Ev+0x44>)
    d1fe:	687b      	ldr	r3, [r7, #4]
    d200:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
    d202:	687b      	ldr	r3, [r7, #4]
    d204:	4618      	mov	r0, r3
    d206:	3708      	adds	r7, #8
    d208:	46bd      	mov	sp, r7
    d20a:	bd80      	pop	{r7, pc}
    d20c:	0000d0dd 	.word	0x0000d0dd
    d210:	0000d869 	.word	0x0000d869
    d214:	0000e6bc 	.word	0x0000e6bc
    d218:	20000c0c 	.word	0x20000c0c

0000d21c <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
    d21c:	b580      	push	{r7, lr}
    d21e:	b082      	sub	sp, #8
    d220:	af00      	add	r7, sp, #0
    d222:	6078      	str	r0, [r7, #4]
    d224:	4a06      	ldr	r2, [pc, #24]	; (d240 <_ZN9CDC_ClassD1Ev+0x24>)
    d226:	687b      	ldr	r3, [r7, #4]
    d228:	601a      	str	r2, [r3, #0]
    d22a:	687b      	ldr	r3, [r7, #4]
    d22c:	3310      	adds	r3, #16
    d22e:	4618      	mov	r0, r3
    d230:	4b04      	ldr	r3, [pc, #16]	; (d244 <_ZN9CDC_ClassD1Ev+0x28>)
    d232:	4798      	blx	r3
{
} //~CDC_Class
    d234:	687b      	ldr	r3, [r7, #4]
    d236:	4618      	mov	r0, r3
    d238:	3708      	adds	r7, #8
    d23a:	46bd      	mov	sp, r7
    d23c:	bd80      	pop	{r7, pc}
    d23e:	bf00      	nop
    d240:	0000e6bc 	.word	0x0000e6bc
    d244:	0000d889 	.word	0x0000d889

0000d248 <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
    d248:	b580      	push	{r7, lr}
    d24a:	b082      	sub	sp, #8
    d24c:	af00      	add	r7, sp, #0
    d24e:	6078      	str	r0, [r7, #4]
	
	OnInit();
    d250:	687b      	ldr	r3, [r7, #4]
    d252:	3310      	adds	r3, #16
    d254:	4618      	mov	r0, r3
    d256:	4b06      	ldr	r3, [pc, #24]	; (d270 <_ZN9CDC_Class4InitEv+0x28>)
    d258:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
    d25a:	4906      	ldr	r1, [pc, #24]	; (d274 <_ZN9CDC_Class4InitEv+0x2c>)
    d25c:	2003      	movs	r0, #3
    d25e:	4b06      	ldr	r3, [pc, #24]	; (d278 <_ZN9CDC_Class4InitEv+0x30>)
    d260:	4798      	blx	r3
	
		
	if (plugged)
    d262:	687b      	ldr	r3, [r7, #4]
    d264:	7c1b      	ldrb	r3, [r3, #16]
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	

}
    d266:	bf00      	nop
    d268:	3708      	adds	r7, #8
    d26a:	46bd      	mov	sp, r7
    d26c:	bd80      	pop	{r7, pc}
    d26e:	bf00      	nop
    d270:	0000d89d 	.word	0x0000d89d
    d274:	0000d17d 	.word	0x0000d17d
    d278:	0000c059 	.word	0x0000c059

0000d27c <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
    d27c:	b580      	push	{r7, lr}
    d27e:	b082      	sub	sp, #8
    d280:	af00      	add	r7, sp, #0
    d282:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
    d284:	4b03      	ldr	r3, [pc, #12]	; (d294 <_ZN9CDC_Class9IsEnabledEv+0x18>)
    d286:	4798      	blx	r3
    d288:	4603      	mov	r3, r0
	
}
    d28a:	4618      	mov	r0, r3
    d28c:	3708      	adds	r7, #8
    d28e:	46bd      	mov	sp, r7
    d290:	bd80      	pop	{r7, pc}
    d292:	bf00      	nop
    d294:	0000c0d1 	.word	0x0000c0d1

0000d298 <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
    d298:	b580      	push	{r7, lr}
    d29a:	b084      	sub	sp, #16
    d29c:	af00      	add	r7, sp, #0
    d29e:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
    d2a0:	687b      	ldr	r3, [r7, #4]
    d2a2:	699b      	ldr	r3, [r3, #24]
    d2a4:	f1b3 3fff 	cmp.w	r3, #4294967295
    d2a8:	bf14      	ite	ne
    d2aa:	2301      	movne	r3, #1
    d2ac:	2300      	moveq	r3, #0
    d2ae:	b2db      	uxtb	r3, r3
    d2b0:	2b00      	cmp	r3, #0
    d2b2:	d002      	beq.n	d2ba <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
    d2b4:	687b      	ldr	r3, [r7, #4]
    d2b6:	699b      	ldr	r3, [r3, #24]
    d2b8:	e011      	b.n	d2de <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
    d2ba:	687b      	ldr	r3, [r7, #4]
    d2bc:	681b      	ldr	r3, [r3, #0]
    d2be:	331c      	adds	r3, #28
    d2c0:	681b      	ldr	r3, [r3, #0]
    d2c2:	f107 010f 	add.w	r1, r7, #15
    d2c6:	2201      	movs	r2, #1
    d2c8:	6878      	ldr	r0, [r7, #4]
    d2ca:	4798      	blx	r3
    d2cc:	4602      	mov	r2, r0
    d2ce:	687b      	ldr	r3, [r7, #4]
    d2d0:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
    d2d2:	7bfb      	ldrb	r3, [r7, #15]
    d2d4:	461a      	mov	r2, r3
    d2d6:	687b      	ldr	r3, [r7, #4]
    d2d8:	619a      	str	r2, [r3, #24]
	return _serialPeek;
    d2da:	687b      	ldr	r3, [r7, #4]
    d2dc:	699b      	ldr	r3, [r3, #24]
}
    d2de:	4618      	mov	r0, r3
    d2e0:	3710      	adds	r7, #16
    d2e2:	46bd      	mov	sp, r7
    d2e4:	bd80      	pop	{r7, pc}
	...

0000d2e8 <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
    d2e8:	b580      	push	{r7, lr}
    d2ea:	b086      	sub	sp, #24
    d2ec:	af00      	add	r7, sp, #0
    d2ee:	60f8      	str	r0, [r7, #12]
    d2f0:	60b9      	str	r1, [r7, #8]
    d2f2:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	rxReady=false;
    d2f4:	68fb      	ldr	r3, [r7, #12]
    d2f6:	2200      	movs	r2, #0
    d2f8:	755a      	strb	r2, [r3, #21]
	r=cdcdf_acm_read((uint8_t *)p, size);
    d2fa:	687b      	ldr	r3, [r7, #4]
    d2fc:	4619      	mov	r1, r3
    d2fe:	68b8      	ldr	r0, [r7, #8]
    d300:	4b08      	ldr	r3, [pc, #32]	; (d324 <_ZN9CDC_Class8readDataEPvl+0x3c>)
    d302:	4798      	blx	r3
    d304:	4603      	mov	r3, r0
    d306:	75fb      	strb	r3, [r7, #23]
	while(!rxReady);
    d308:	68fb      	ldr	r3, [r7, #12]
    d30a:	7d5b      	ldrb	r3, [r3, #21]
    d30c:	b2db      	uxtb	r3, r3
    d30e:	f083 0301 	eor.w	r3, r3, #1
    d312:	b2db      	uxtb	r3, r3
    d314:	2b00      	cmp	r3, #0
    d316:	d000      	beq.n	d31a <_ZN9CDC_Class8readDataEPvl+0x32>
    d318:	e7f6      	b.n	d308 <_ZN9CDC_Class8readDataEPvl+0x20>
	return r;
    d31a:	7dfb      	ldrb	r3, [r7, #23]
}
    d31c:	4618      	mov	r0, r3
    d31e:	3718      	adds	r7, #24
    d320:	46bd      	mov	sp, r7
    d322:	bd80      	pop	{r7, pc}
    d324:	0000bfad 	.word	0x0000bfad

0000d328 <_ZN9CDC_Class4readEv>:
int CDC_Class::read(void)
{
    d328:	b580      	push	{r7, lr}
    d32a:	b084      	sub	sp, #16
    d32c:	af00      	add	r7, sp, #0
    d32e:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
    d330:	687b      	ldr	r3, [r7, #4]
    d332:	2200      	movs	r2, #0
    d334:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
    d336:	f107 030f 	add.w	r3, r7, #15
    d33a:	2101      	movs	r1, #1
    d33c:	4618      	mov	r0, r3
    d33e:	4b08      	ldr	r3, [pc, #32]	; (d360 <_ZN9CDC_Class4readEv+0x38>)
    d340:	4798      	blx	r3
	while(!rxReady);
    d342:	687b      	ldr	r3, [r7, #4]
    d344:	7d5b      	ldrb	r3, [r3, #21]
    d346:	b2db      	uxtb	r3, r3
    d348:	f083 0301 	eor.w	r3, r3, #1
    d34c:	b2db      	uxtb	r3, r3
    d34e:	2b00      	cmp	r3, #0
    d350:	d000      	beq.n	d354 <_ZN9CDC_Class4readEv+0x2c>
    d352:	e7f6      	b.n	d342 <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
    d354:	7bfb      	ldrb	r3, [r7, #15]
}
    d356:	4618      	mov	r0, r3
    d358:	3710      	adds	r7, #16
    d35a:	46bd      	mov	sp, r7
    d35c:	bd80      	pop	{r7, pc}
    d35e:	bf00      	nop
    d360:	0000bfad 	.word	0x0000bfad

0000d364 <_ZN9CDC_Class4readEPc>:
void CDC_Class::read(char *c)
{
    d364:	b580      	push	{r7, lr}
    d366:	b082      	sub	sp, #8
    d368:	af00      	add	r7, sp, #0
    d36a:	6078      	str	r0, [r7, #4]
    d36c:	6039      	str	r1, [r7, #0]
	cdcdf_acm_read((uint8_t *)c, 1);
    d36e:	2101      	movs	r1, #1
    d370:	6838      	ldr	r0, [r7, #0]
    d372:	4b03      	ldr	r3, [pc, #12]	; (d380 <_ZN9CDC_Class4readEPc+0x1c>)
    d374:	4798      	blx	r3
}
    d376:	bf00      	nop
    d378:	3708      	adds	r7, #8
    d37a:	46bd      	mov	sp, r7
    d37c:	bd80      	pop	{r7, pc}
    d37e:	bf00      	nop
    d380:	0000bfad 	.word	0x0000bfad

0000d384 <_ZN9CDC_Class5flushEv>:
	rxReady=false;
	r=cdcdf_acm_read((uint8_t *)p, size);
	while(!rxReady);
	return r;
}
void	CDC_Class::flush(void){
    d384:	b580      	push	{r7, lr}
    d386:	b082      	sub	sp, #8
    d388:	af00      	add	r7, sp, #0
    d38a:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
    d38c:	687b      	ldr	r3, [r7, #4]
    d38e:	331c      	adds	r3, #28
    d390:	2140      	movs	r1, #64	; 0x40
    d392:	4618      	mov	r0, r3
    d394:	4b02      	ldr	r3, [pc, #8]	; (d3a0 <_ZN9CDC_Class5flushEv+0x1c>)
    d396:	4798      	blx	r3
}
    d398:	bf00      	nop
    d39a:	3708      	adds	r7, #8
    d39c:	46bd      	mov	sp, r7
    d39e:	bd80      	pop	{r7, pc}
    d3a0:	0000bff1 	.word	0x0000bff1

0000d3a4 <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
    d3a4:	b580      	push	{r7, lr}
    d3a6:	b082      	sub	sp, #8
    d3a8:	af00      	add	r7, sp, #0
    d3aa:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
    d3ac:	4b02      	ldr	r3, [pc, #8]	; (d3b8 <_ZN9CDC_Class5clearEv+0x14>)
    d3ae:	4798      	blx	r3
}
    d3b0:	bf00      	nop
    d3b2:	3708      	adds	r7, #8
    d3b4:	46bd      	mov	sp, r7
    d3b6:	bd80      	pop	{r7, pc}
    d3b8:	0000c035 	.word	0x0000c035

0000d3bc <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
    d3bc:	b580      	push	{r7, lr}
    d3be:	b082      	sub	sp, #8
    d3c0:	af00      	add	r7, sp, #0
    d3c2:	6078      	str	r0, [r7, #4]
    d3c4:	460b      	mov	r3, r1
    d3c6:	70fb      	strb	r3, [r7, #3]
		while(!txReady);
    d3c8:	687b      	ldr	r3, [r7, #4]
    d3ca:	7d1b      	ldrb	r3, [r3, #20]
    d3cc:	b2db      	uxtb	r3, r3
    d3ce:	f083 0301 	eor.w	r3, r3, #1
    d3d2:	b2db      	uxtb	r3, r3
    d3d4:	2b00      	cmp	r3, #0
    d3d6:	d000      	beq.n	d3da <_ZN9CDC_Class5writeEh+0x1e>
    d3d8:	e7f6      	b.n	d3c8 <_ZN9CDC_Class5writeEh+0xc>
	
		return writeData(&c, 1);
    d3da:	687b      	ldr	r3, [r7, #4]
    d3dc:	681b      	ldr	r3, [r3, #0]
    d3de:	3324      	adds	r3, #36	; 0x24
    d3e0:	681b      	ldr	r3, [r3, #0]
    d3e2:	1cf9      	adds	r1, r7, #3
    d3e4:	2201      	movs	r2, #1
    d3e6:	6878      	ldr	r0, [r7, #4]
    d3e8:	4798      	blx	r3
    d3ea:	4603      	mov	r3, r0
}
    d3ec:	4618      	mov	r0, r3
    d3ee:	3708      	adds	r7, #8
    d3f0:	46bd      	mov	sp, r7
    d3f2:	bd80      	pop	{r7, pc}

0000d3f4 <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
    d3f4:	b580      	push	{r7, lr}
    d3f6:	b086      	sub	sp, #24
    d3f8:	af00      	add	r7, sp, #0
    d3fa:	60f8      	str	r0, [r7, #12]
    d3fc:	60b9      	str	r1, [r7, #8]
    d3fe:	607a      	str	r2, [r7, #4]
	
	txReady=false;
    d400:	68fb      	ldr	r3, [r7, #12]
    d402:	2200      	movs	r2, #0
    d404:	751a      	strb	r2, [r3, #20]
	if (CheckTerminal())
    d406:	68fb      	ldr	r3, [r7, #12]
    d408:	3310      	adds	r3, #16
    d40a:	4618      	mov	r0, r3
    d40c:	4b14      	ldr	r3, [pc, #80]	; (d460 <_ZN9CDC_Class9writeDataEPKvl+0x6c>)
    d40e:	4798      	blx	r3
    d410:	4603      	mov	r3, r0
    d412:	2b00      	cmp	r3, #0
    d414:	d01e      	beq.n	d454 <_ZN9CDC_Class9writeDataEPKvl+0x60>
	{
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    d416:	687b      	ldr	r3, [r7, #4]
    d418:	4619      	mov	r1, r3
    d41a:	68b8      	ldr	r0, [r7, #8]
    d41c:	4b11      	ldr	r3, [pc, #68]	; (d464 <_ZN9CDC_Class9writeDataEPKvl+0x70>)
    d41e:	4798      	blx	r3
    d420:	4603      	mov	r3, r0
    d422:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(terminalStarted)){
    d424:	68fb      	ldr	r3, [r7, #12]
    d426:	7d1b      	ldrb	r3, [r3, #20]
    d428:	b2db      	uxtb	r3, r3
    d42a:	f083 0301 	eor.w	r3, r3, #1
    d42e:	b2db      	uxtb	r3, r3
    d430:	2b00      	cmp	r3, #0
    d432:	d006      	beq.n	d442 <_ZN9CDC_Class9writeDataEPKvl+0x4e>
    d434:	68fb      	ldr	r3, [r7, #12]
    d436:	7c5b      	ldrb	r3, [r3, #17]
    d438:	b2db      	uxtb	r3, r3
    d43a:	2b00      	cmp	r3, #0
    d43c:	d001      	beq.n	d442 <_ZN9CDC_Class9writeDataEPKvl+0x4e>
    d43e:	2301      	movs	r3, #1
    d440:	e000      	b.n	d444 <_ZN9CDC_Class9writeDataEPKvl+0x50>
    d442:	2300      	movs	r3, #0
    d444:	2b00      	cmp	r3, #0
    d446:	d000      	beq.n	d44a <_ZN9CDC_Class9writeDataEPKvl+0x56>
    d448:	e7ec      	b.n	d424 <_ZN9CDC_Class9writeDataEPKvl+0x30>
			
			};
			usbTimer.Stop();
    d44a:	4807      	ldr	r0, [pc, #28]	; (d468 <_ZN9CDC_Class9writeDataEPKvl+0x74>)
    d44c:	4b07      	ldr	r3, [pc, #28]	; (d46c <_ZN9CDC_Class9writeDataEPKvl+0x78>)
    d44e:	4798      	blx	r3
		return r;
    d450:	697b      	ldr	r3, [r7, #20]
    d452:	e000      	b.n	d456 <_ZN9CDC_Class9writeDataEPKvl+0x62>
	} 
	else
	{
		return 0;
    d454:	2300      	movs	r3, #0
	}
	

}
    d456:	4618      	mov	r0, r3
    d458:	3718      	adds	r7, #24
    d45a:	46bd      	mov	sp, r7
    d45c:	bd80      	pop	{r7, pc}
    d45e:	bf00      	nop
    d460:	0000d939 	.word	0x0000d939
    d464:	0000bff1 	.word	0x0000bff1
    d468:	20000c78 	.word	0x20000c78
    d46c:	0000daf9 	.word	0x0000daf9

0000d470 <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
    d470:	b580      	push	{r7, lr}
    d472:	b086      	sub	sp, #24
    d474:	af00      	add	r7, sp, #0
    d476:	60f8      	str	r0, [r7, #12]
    d478:	60b9      	str	r1, [r7, #8]
    d47a:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
    d47c:	68fb      	ldr	r3, [r7, #12]
    d47e:	2200      	movs	r2, #0
    d480:	751a      	strb	r2, [r3, #20]
/*	uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);*/
 	if (CheckTerminal(size)){
    d482:	68fb      	ldr	r3, [r7, #12]
    d484:	3310      	adds	r3, #16
    d486:	6879      	ldr	r1, [r7, #4]
    d488:	4618      	mov	r0, r3
    d48a:	4b14      	ldr	r3, [pc, #80]	; (d4dc <_ZN9CDC_Class5writeEPKhj+0x6c>)
    d48c:	4798      	blx	r3
    d48e:	4603      	mov	r3, r0
    d490:	2b00      	cmp	r3, #0
    d492:	d01c      	beq.n	d4ce <_ZN9CDC_Class5writeEPKhj+0x5e>
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    d494:	6879      	ldr	r1, [r7, #4]
    d496:	68b8      	ldr	r0, [r7, #8]
    d498:	4b11      	ldr	r3, [pc, #68]	; (d4e0 <_ZN9CDC_Class5writeEPKhj+0x70>)
    d49a:	4798      	blx	r3
    d49c:	4603      	mov	r3, r0
    d49e:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(terminalStarted));
    d4a0:	68fb      	ldr	r3, [r7, #12]
    d4a2:	7d1b      	ldrb	r3, [r3, #20]
    d4a4:	b2db      	uxtb	r3, r3
    d4a6:	f083 0301 	eor.w	r3, r3, #1
    d4aa:	b2db      	uxtb	r3, r3
    d4ac:	2b00      	cmp	r3, #0
    d4ae:	d006      	beq.n	d4be <_ZN9CDC_Class5writeEPKhj+0x4e>
    d4b0:	68fb      	ldr	r3, [r7, #12]
    d4b2:	7c5b      	ldrb	r3, [r3, #17]
    d4b4:	b2db      	uxtb	r3, r3
    d4b6:	2b00      	cmp	r3, #0
    d4b8:	d001      	beq.n	d4be <_ZN9CDC_Class5writeEPKhj+0x4e>
    d4ba:	2301      	movs	r3, #1
    d4bc:	e000      	b.n	d4c0 <_ZN9CDC_Class5writeEPKhj+0x50>
    d4be:	2300      	movs	r3, #0
    d4c0:	2b00      	cmp	r3, #0
    d4c2:	d000      	beq.n	d4c6 <_ZN9CDC_Class5writeEPKhj+0x56>
    d4c4:	e7ec      	b.n	d4a0 <_ZN9CDC_Class5writeEPKhj+0x30>
		//while((!txReady));
		usbTimer.Stop();
    d4c6:	4807      	ldr	r0, [pc, #28]	; (d4e4 <_ZN9CDC_Class5writeEPKhj+0x74>)
    d4c8:	4b07      	ldr	r3, [pc, #28]	; (d4e8 <_ZN9CDC_Class5writeEPKhj+0x78>)
    d4ca:	4798      	blx	r3
    d4cc:	e001      	b.n	d4d2 <_ZN9CDC_Class5writeEPKhj+0x62>
	}else{
 		r=0;
    d4ce:	2300      	movs	r3, #0
    d4d0:	617b      	str	r3, [r7, #20]
	 }
	return r;		
    d4d2:	697b      	ldr	r3, [r7, #20]
}
    d4d4:	4618      	mov	r0, r3
    d4d6:	3718      	adds	r7, #24
    d4d8:	46bd      	mov	sp, r7
    d4da:	bd80      	pop	{r7, pc}
    d4dc:	0000d9b1 	.word	0x0000d9b1
    d4e0:	0000bff1 	.word	0x0000bff1
    d4e4:	20000c78 	.word	0x20000c78
    d4e8:	0000daf9 	.word	0x0000daf9

0000d4ec <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
    d4ec:	b480      	push	{r7}
    d4ee:	b083      	sub	sp, #12
    d4f0:	af00      	add	r7, sp, #0
    d4f2:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
    d4f4:	687b      	ldr	r3, [r7, #4]
    d4f6:	7d5b      	ldrb	r3, [r3, #21]
    d4f8:	b2db      	uxtb	r3, r3
    d4fa:	2b00      	cmp	r3, #0
    d4fc:	d006      	beq.n	d50c <_ZN9CDC_Class9availableEv+0x20>
    d4fe:	687b      	ldr	r3, [r7, #4]
    d500:	7d1b      	ldrb	r3, [r3, #20]
    d502:	b2db      	uxtb	r3, r3
    d504:	2b00      	cmp	r3, #0
    d506:	d001      	beq.n	d50c <_ZN9CDC_Class9availableEv+0x20>
    d508:	2301      	movs	r3, #1
    d50a:	e000      	b.n	d50e <_ZN9CDC_Class9availableEv+0x22>
    d50c:	2300      	movs	r3, #0
    d50e:	2b00      	cmp	r3, #0
    d510:	d001      	beq.n	d516 <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
    d512:	2301      	movs	r3, #1
    d514:	e000      	b.n	d518 <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
    d516:	2300      	movs	r3, #0
	}
	
}
    d518:	4618      	mov	r0, r3
    d51a:	370c      	adds	r7, #12
    d51c:	46bd      	mov	sp, r7
    d51e:	bc80      	pop	{r7}
    d520:	4770      	bx	lr
	...

0000d524 <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
    d524:	b580      	push	{r7, lr}
    d526:	b082      	sub	sp, #8
    d528:	af00      	add	r7, sp, #0
    d52a:	6078      	str	r0, [r7, #4]
    d52c:	6039      	str	r1, [r7, #0]
    d52e:	687b      	ldr	r3, [r7, #4]
    d530:	2b01      	cmp	r3, #1
    d532:	d10c      	bne.n	d54e <_Z41__static_initialization_and_destruction_0ii+0x2a>
    d534:	683b      	ldr	r3, [r7, #0]
    d536:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d53a:	4293      	cmp	r3, r2
    d53c:	d107      	bne.n	d54e <_Z41__static_initialization_and_destruction_0ii+0x2a>
    d53e:	4806      	ldr	r0, [pc, #24]	; (d558 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    d540:	4b06      	ldr	r3, [pc, #24]	; (d55c <_Z41__static_initialization_and_destruction_0ii+0x38>)
    d542:	4798      	blx	r3
    d544:	4a06      	ldr	r2, [pc, #24]	; (d560 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    d546:	4907      	ldr	r1, [pc, #28]	; (d564 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    d548:	4803      	ldr	r0, [pc, #12]	; (d558 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    d54a:	4b07      	ldr	r3, [pc, #28]	; (d568 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    d54c:	4798      	blx	r3
    d54e:	bf00      	nop
    d550:	3708      	adds	r7, #8
    d552:	46bd      	mov	sp, r7
    d554:	bd80      	pop	{r7, pc}
    d556:	bf00      	nop
    d558:	20000c10 	.word	0x20000c10
    d55c:	0000d1d5 	.word	0x0000d1d5
    d560:	20000000 	.word	0x20000000
    d564:	0000d21d 	.word	0x0000d21d
    d568:	0000dc49 	.word	0x0000dc49

0000d56c <_GLOBAL__sub_I_ptrCDCClass>:
    d56c:	b580      	push	{r7, lr}
    d56e:	af00      	add	r7, sp, #0
    d570:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d574:	2001      	movs	r0, #1
    d576:	4b01      	ldr	r3, [pc, #4]	; (d57c <_GLOBAL__sub_I_ptrCDCClass+0x10>)
    d578:	4798      	blx	r3
    d57a:	bd80      	pop	{r7, pc}
    d57c:	0000d525 	.word	0x0000d525

0000d580 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
    d580:	b590      	push	{r4, r7, lr}
    d582:	b083      	sub	sp, #12
    d584:	af00      	add	r7, sp, #0
    d586:	6078      	str	r0, [r7, #4]
    d588:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
    d58a:	683b      	ldr	r3, [r7, #0]
    d58c:	2b00      	cmp	r3, #0
    d58e:	d101      	bne.n	d594 <_ZN5Print5writeEPKc+0x14>
    d590:	2300      	movs	r3, #0
    d592:	e00c      	b.n	d5ae <_ZN5Print5writeEPKc+0x2e>
      return write((const uint8_t *)str, strlen(str));
    d594:	687b      	ldr	r3, [r7, #4]
    d596:	681b      	ldr	r3, [r3, #0]
    d598:	3304      	adds	r3, #4
    d59a:	681c      	ldr	r4, [r3, #0]
    d59c:	6838      	ldr	r0, [r7, #0]
    d59e:	4b06      	ldr	r3, [pc, #24]	; (d5b8 <_ZN5Print5writeEPKc+0x38>)
    d5a0:	4798      	blx	r3
    d5a2:	4603      	mov	r3, r0
    d5a4:	461a      	mov	r2, r3
    d5a6:	6839      	ldr	r1, [r7, #0]
    d5a8:	6878      	ldr	r0, [r7, #4]
    d5aa:	47a0      	blx	r4
    d5ac:	4603      	mov	r3, r0
    }
    d5ae:	4618      	mov	r0, r3
    d5b0:	370c      	adds	r7, #12
    d5b2:	46bd      	mov	sp, r7
    d5b4:	bd90      	pop	{r4, r7, pc}
    d5b6:	bf00      	nop
    d5b8:	0000dec1 	.word	0x0000dec1

0000d5bc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    d5bc:	b580      	push	{r7, lr}
    d5be:	b086      	sub	sp, #24
    d5c0:	af00      	add	r7, sp, #0
    d5c2:	60f8      	str	r0, [r7, #12]
    d5c4:	60b9      	str	r1, [r7, #8]
    d5c6:	607a      	str	r2, [r7, #4]
  size_t n = 0;
    d5c8:	2300      	movs	r3, #0
    d5ca:	617b      	str	r3, [r7, #20]
  while (size--) {
    d5cc:	687b      	ldr	r3, [r7, #4]
    d5ce:	1e5a      	subs	r2, r3, #1
    d5d0:	607a      	str	r2, [r7, #4]
    d5d2:	2b00      	cmp	r3, #0
    d5d4:	bf14      	ite	ne
    d5d6:	2301      	movne	r3, #1
    d5d8:	2300      	moveq	r3, #0
    d5da:	b2db      	uxtb	r3, r3
    d5dc:	2b00      	cmp	r3, #0
    d5de:	d016      	beq.n	d60e <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
    d5e0:	68fb      	ldr	r3, [r7, #12]
    d5e2:	681b      	ldr	r3, [r3, #0]
    d5e4:	681a      	ldr	r2, [r3, #0]
    d5e6:	68bb      	ldr	r3, [r7, #8]
    d5e8:	1c59      	adds	r1, r3, #1
    d5ea:	60b9      	str	r1, [r7, #8]
    d5ec:	781b      	ldrb	r3, [r3, #0]
    d5ee:	4619      	mov	r1, r3
    d5f0:	68f8      	ldr	r0, [r7, #12]
    d5f2:	4790      	blx	r2
    d5f4:	4603      	mov	r3, r0
    d5f6:	2b00      	cmp	r3, #0
    d5f8:	bf14      	ite	ne
    d5fa:	2301      	movne	r3, #1
    d5fc:	2300      	moveq	r3, #0
    d5fe:	b2db      	uxtb	r3, r3
    d600:	2b00      	cmp	r3, #0
    d602:	d003      	beq.n	d60c <_ZN5Print5writeEPKhj+0x50>
    d604:	697b      	ldr	r3, [r7, #20]
    d606:	3301      	adds	r3, #1
    d608:	617b      	str	r3, [r7, #20]
  while (size--) {
    d60a:	e7df      	b.n	d5cc <_ZN5Print5writeEPKhj+0x10>
    else break;
    d60c:	bf00      	nop
  }
  return n;
    d60e:	697b      	ldr	r3, [r7, #20]
}
    d610:	4618      	mov	r0, r3
    d612:	3718      	adds	r7, #24
    d614:	46bd      	mov	sp, r7
    d616:	bd80      	pop	{r7, pc}

0000d618 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
    d618:	b580      	push	{r7, lr}
    d61a:	b082      	sub	sp, #8
    d61c:	af00      	add	r7, sp, #0
    d61e:	6078      	str	r0, [r7, #4]
    d620:	6039      	str	r1, [r7, #0]
  return write(str);
    d622:	6839      	ldr	r1, [r7, #0]
    d624:	6878      	ldr	r0, [r7, #4]
    d626:	4b03      	ldr	r3, [pc, #12]	; (d634 <_ZN5Print5printEPKc+0x1c>)
    d628:	4798      	blx	r3
    d62a:	4603      	mov	r3, r0
}
    d62c:	4618      	mov	r0, r3
    d62e:	3708      	adds	r7, #8
    d630:	46bd      	mov	sp, r7
    d632:	bd80      	pop	{r7, pc}
    d634:	0000d581 	.word	0x0000d581

0000d638 <_ZN5Print5printEhi>:
	snprintf(tmp, 12, "0x%.8X", (unsigned int)v);
	return write(tmp);
}

size_t Print::print(unsigned char b, int base)
{
    d638:	b580      	push	{r7, lr}
    d63a:	b084      	sub	sp, #16
    d63c:	af00      	add	r7, sp, #0
    d63e:	60f8      	str	r0, [r7, #12]
    d640:	460b      	mov	r3, r1
    d642:	607a      	str	r2, [r7, #4]
    d644:	72fb      	strb	r3, [r7, #11]
  return print((unsigned long) b, base);
    d646:	7afb      	ldrb	r3, [r7, #11]
    d648:	687a      	ldr	r2, [r7, #4]
    d64a:	4619      	mov	r1, r3
    d64c:	68f8      	ldr	r0, [r7, #12]
    d64e:	4b03      	ldr	r3, [pc, #12]	; (d65c <_ZN5Print5printEhi+0x24>)
    d650:	4798      	blx	r3
    d652:	4603      	mov	r3, r0
}
    d654:	4618      	mov	r0, r3
    d656:	3710      	adds	r7, #16
    d658:	46bd      	mov	sp, r7
    d65a:	bd80      	pop	{r7, pc}
    d65c:	0000d661 	.word	0x0000d661

0000d660 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
    d660:	b580      	push	{r7, lr}
    d662:	b084      	sub	sp, #16
    d664:	af00      	add	r7, sp, #0
    d666:	60f8      	str	r0, [r7, #12]
    d668:	60b9      	str	r1, [r7, #8]
    d66a:	607a      	str	r2, [r7, #4]
  if (base == 0) return write(n);
    d66c:	687b      	ldr	r3, [r7, #4]
    d66e:	2b00      	cmp	r3, #0
    d670:	d109      	bne.n	d686 <_ZN5Print5printEmi+0x26>
    d672:	68fb      	ldr	r3, [r7, #12]
    d674:	681b      	ldr	r3, [r3, #0]
    d676:	681b      	ldr	r3, [r3, #0]
    d678:	68ba      	ldr	r2, [r7, #8]
    d67a:	b2d2      	uxtb	r2, r2
    d67c:	4611      	mov	r1, r2
    d67e:	68f8      	ldr	r0, [r7, #12]
    d680:	4798      	blx	r3
    d682:	4603      	mov	r3, r0
    d684:	e007      	b.n	d696 <_ZN5Print5printEmi+0x36>
  else return printNumber(n, base);
    d686:	687b      	ldr	r3, [r7, #4]
    d688:	b2db      	uxtb	r3, r3
    d68a:	461a      	mov	r2, r3
    d68c:	68b9      	ldr	r1, [r7, #8]
    d68e:	68f8      	ldr	r0, [r7, #12]
    d690:	4b03      	ldr	r3, [pc, #12]	; (d6a0 <_ZN5Print5printEmi+0x40>)
    d692:	4798      	blx	r3
    d694:	4603      	mov	r3, r0
}
    d696:	4618      	mov	r0, r3
    d698:	3710      	adds	r7, #16
    d69a:	46bd      	mov	sp, r7
    d69c:	bd80      	pop	{r7, pc}
    d69e:	bf00      	nop
    d6a0:	0000d6a5 	.word	0x0000d6a5

0000d6a4 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    d6a4:	b580      	push	{r7, lr}
    d6a6:	b08e      	sub	sp, #56	; 0x38
    d6a8:	af00      	add	r7, sp, #0
    d6aa:	60f8      	str	r0, [r7, #12]
    d6ac:	60b9      	str	r1, [r7, #8]
    d6ae:	4613      	mov	r3, r2
    d6b0:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
    d6b2:	f107 0310 	add.w	r3, r7, #16
    d6b6:	3320      	adds	r3, #32
    d6b8:	637b      	str	r3, [r7, #52]	; 0x34

  *str = '\0';
    d6ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d6bc:	2200      	movs	r2, #0
    d6be:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    d6c0:	79fb      	ldrb	r3, [r7, #7]
    d6c2:	2b01      	cmp	r3, #1
    d6c4:	dc01      	bgt.n	d6ca <_ZN5Print11printNumberEmh+0x26>
    d6c6:	230a      	movs	r3, #10
    d6c8:	71fb      	strb	r3, [r7, #7]

  do {
    char c = n % base;
    d6ca:	79fa      	ldrb	r2, [r7, #7]
    d6cc:	68bb      	ldr	r3, [r7, #8]
    d6ce:	fbb3 f1f2 	udiv	r1, r3, r2
    d6d2:	fb02 f201 	mul.w	r2, r2, r1
    d6d6:	1a9b      	subs	r3, r3, r2
    d6d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    n /= base;
    d6dc:	79fb      	ldrb	r3, [r7, #7]
    d6de:	68ba      	ldr	r2, [r7, #8]
    d6e0:	fbb2 f3f3 	udiv	r3, r2, r3
    d6e4:	60bb      	str	r3, [r7, #8]

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    d6e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d6e8:	3b01      	subs	r3, #1
    d6ea:	637b      	str	r3, [r7, #52]	; 0x34
    d6ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    d6f0:	2b09      	cmp	r3, #9
    d6f2:	dc04      	bgt.n	d6fe <_ZN5Print11printNumberEmh+0x5a>
    d6f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    d6f8:	3330      	adds	r3, #48	; 0x30
    d6fa:	b2db      	uxtb	r3, r3
    d6fc:	e003      	b.n	d706 <_ZN5Print11printNumberEmh+0x62>
    d6fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    d702:	3337      	adds	r3, #55	; 0x37
    d704:	b2db      	uxtb	r3, r3
    d706:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    d708:	7013      	strb	r3, [r2, #0]
  } while(n);
    d70a:	68bb      	ldr	r3, [r7, #8]
    d70c:	2b00      	cmp	r3, #0
    d70e:	d000      	beq.n	d712 <_ZN5Print11printNumberEmh+0x6e>
  do {
    d710:	e7db      	b.n	d6ca <_ZN5Print11printNumberEmh+0x26>

  return write(str);
    d712:	6b79      	ldr	r1, [r7, #52]	; 0x34
    d714:	68f8      	ldr	r0, [r7, #12]
    d716:	4b03      	ldr	r3, [pc, #12]	; (d724 <_ZN5Print11printNumberEmh+0x80>)
    d718:	4798      	blx	r3
    d71a:	4603      	mov	r3, r0
}
    d71c:	4618      	mov	r0, r3
    d71e:	3738      	adds	r7, #56	; 0x38
    d720:	46bd      	mov	sp, r7
    d722:	bd80      	pop	{r7, pc}
    d724:	0000d581 	.word	0x0000d581

0000d728 <hri_port_read_DIR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
    d728:	b480      	push	{r7}
    d72a:	b083      	sub	sp, #12
    d72c:	af00      	add	r7, sp, #0
    d72e:	6078      	str	r0, [r7, #4]
    d730:	460b      	mov	r3, r1
    d732:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    d734:	78fb      	ldrb	r3, [r7, #3]
    d736:	687a      	ldr	r2, [r7, #4]
    d738:	01db      	lsls	r3, r3, #7
    d73a:	4413      	add	r3, r2
    d73c:	681b      	ldr	r3, [r3, #0]
}
    d73e:	4618      	mov	r0, r3
    d740:	370c      	adds	r7, #12
    d742:	46bd      	mov	sp, r7
    d744:	bc80      	pop	{r7}
    d746:	4770      	bx	lr

0000d748 <hri_port_read_OUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_out_reg_t hri_port_read_OUT_reg(const void *const hw, uint8_t submodule_index)
{
    d748:	b480      	push	{r7}
    d74a:	b083      	sub	sp, #12
    d74c:	af00      	add	r7, sp, #0
    d74e:	6078      	str	r0, [r7, #4]
    d750:	460b      	mov	r3, r1
    d752:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    d754:	78fb      	ldrb	r3, [r7, #3]
    d756:	687a      	ldr	r2, [r7, #4]
    d758:	01db      	lsls	r3, r3, #7
    d75a:	4413      	add	r3, r2
    d75c:	3310      	adds	r3, #16
    d75e:	681b      	ldr	r3, [r3, #0]
}
    d760:	4618      	mov	r0, r3
    d762:	370c      	adds	r7, #12
    d764:	46bd      	mov	sp, r7
    d766:	bc80      	pop	{r7}
    d768:	4770      	bx	lr

0000d76a <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
    d76a:	b480      	push	{r7}
    d76c:	b083      	sub	sp, #12
    d76e:	af00      	add	r7, sp, #0
    d770:	6078      	str	r0, [r7, #4]
    d772:	460b      	mov	r3, r1
    d774:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    d776:	78fb      	ldrb	r3, [r7, #3]
    d778:	687a      	ldr	r2, [r7, #4]
    d77a:	01db      	lsls	r3, r3, #7
    d77c:	4413      	add	r3, r2
    d77e:	3320      	adds	r3, #32
    d780:	681b      	ldr	r3, [r3, #0]
}
    d782:	4618      	mov	r0, r3
    d784:	370c      	adds	r7, #12
    d786:	46bd      	mov	sp, r7
    d788:	bc80      	pop	{r7}
    d78a:	4770      	bx	lr

0000d78c <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
    d78c:	b580      	push	{r7, lr}
    d78e:	b086      	sub	sp, #24
    d790:	af00      	add	r7, sp, #0
    d792:	4603      	mov	r3, r0
    d794:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    d796:	f107 030c 	add.w	r3, r7, #12
    d79a:	4618      	mov	r0, r3
    d79c:	4b13      	ldr	r3, [pc, #76]	; (d7ec <_gpio_get_level+0x60>)
    d79e:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
    d7a0:	79fb      	ldrb	r3, [r7, #7]
    d7a2:	4619      	mov	r1, r3
    d7a4:	4812      	ldr	r0, [pc, #72]	; (d7f0 <_gpio_get_level+0x64>)
    d7a6:	4b13      	ldr	r3, [pc, #76]	; (d7f4 <_gpio_get_level+0x68>)
    d7a8:	4798      	blx	r3
    d7aa:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    d7ac:	79fb      	ldrb	r3, [r7, #7]
    d7ae:	4619      	mov	r1, r3
    d7b0:	480f      	ldr	r0, [pc, #60]	; (d7f0 <_gpio_get_level+0x64>)
    d7b2:	4b11      	ldr	r3, [pc, #68]	; (d7f8 <_gpio_get_level+0x6c>)
    d7b4:	4798      	blx	r3
    d7b6:	4602      	mov	r2, r0
    d7b8:	697b      	ldr	r3, [r7, #20]
    d7ba:	43db      	mvns	r3, r3
    d7bc:	4013      	ands	r3, r2
    d7be:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    d7c0:	79fb      	ldrb	r3, [r7, #7]
    d7c2:	4619      	mov	r1, r3
    d7c4:	480a      	ldr	r0, [pc, #40]	; (d7f0 <_gpio_get_level+0x64>)
    d7c6:	4b0d      	ldr	r3, [pc, #52]	; (d7fc <_gpio_get_level+0x70>)
    d7c8:	4798      	blx	r3
    d7ca:	4602      	mov	r2, r0
    d7cc:	697b      	ldr	r3, [r7, #20]
    d7ce:	4013      	ands	r3, r2
    d7d0:	693a      	ldr	r2, [r7, #16]
    d7d2:	4313      	orrs	r3, r2
    d7d4:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
    d7d6:	f107 030c 	add.w	r3, r7, #12
    d7da:	4618      	mov	r0, r3
    d7dc:	4b08      	ldr	r3, [pc, #32]	; (d800 <_gpio_get_level+0x74>)
    d7de:	4798      	blx	r3

	return tmp;
    d7e0:	693b      	ldr	r3, [r7, #16]
}
    d7e2:	4618      	mov	r0, r3
    d7e4:	3718      	adds	r7, #24
    d7e6:	46bd      	mov	sp, r7
    d7e8:	bd80      	pop	{r7, pc}
    d7ea:	bf00      	nop
    d7ec:	0000b1cd 	.word	0x0000b1cd
    d7f0:	41008000 	.word	0x41008000
    d7f4:	0000d729 	.word	0x0000d729
    d7f8:	0000d76b 	.word	0x0000d76b
    d7fc:	0000d749 	.word	0x0000d749
    d800:	0000b1f3 	.word	0x0000b1f3

0000d804 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    d804:	b580      	push	{r7, lr}
    d806:	b082      	sub	sp, #8
    d808:	af00      	add	r7, sp, #0
    d80a:	4603      	mov	r3, r0
    d80c:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    d80e:	79fb      	ldrb	r3, [r7, #7]
    d810:	115b      	asrs	r3, r3, #5
    d812:	b2db      	uxtb	r3, r3
    d814:	4618      	mov	r0, r3
    d816:	4b09      	ldr	r3, [pc, #36]	; (d83c <gpio_get_pin_level+0x38>)
    d818:	4798      	blx	r3
    d81a:	4601      	mov	r1, r0
    d81c:	79fb      	ldrb	r3, [r7, #7]
    d81e:	f003 031f 	and.w	r3, r3, #31
    d822:	2201      	movs	r2, #1
    d824:	fa02 f303 	lsl.w	r3, r2, r3
    d828:	400b      	ands	r3, r1
    d82a:	2b00      	cmp	r3, #0
    d82c:	bf14      	ite	ne
    d82e:	2301      	movne	r3, #1
    d830:	2300      	moveq	r3, #0
    d832:	b2db      	uxtb	r3, r3
}
    d834:	4618      	mov	r0, r3
    d836:	3708      	adds	r7, #8
    d838:	46bd      	mov	sp, r7
    d83a:	bd80      	pop	{r7, pc}
    d83c:	0000d78d 	.word	0x0000d78d

0000d840 <_ZL14USBTimeoutTaskPK10timer_task>:
#include "TimerSerial_Class.h"
#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
    d840:	b480      	push	{r7}
    d842:	b083      	sub	sp, #12
    d844:	af00      	add	r7, sp, #0
    d846:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
    d848:	4b06      	ldr	r3, [pc, #24]	; (d864 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    d84a:	681b      	ldr	r3, [r3, #0]
    d84c:	2201      	movs	r2, #1
    d84e:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->terminalStarted=false;
    d850:	4b04      	ldr	r3, [pc, #16]	; (d864 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    d852:	681b      	ldr	r3, [r3, #0]
    d854:	2200      	movs	r2, #0
    d856:	705a      	strb	r2, [r3, #1]
}
    d858:	bf00      	nop
    d85a:	370c      	adds	r7, #12
    d85c:	46bd      	mov	sp, r7
    d85e:	bc80      	pop	{r7}
    d860:	4770      	bx	lr
    d862:	bf00      	nop
    d864:	20000c70 	.word	0x20000c70

0000d868 <_ZN20SerialTerminal_ClassC1Ev>:

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
    d868:	b480      	push	{r7}
    d86a:	b083      	sub	sp, #12
    d86c:	af00      	add	r7, sp, #0
    d86e:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
    d870:	4a04      	ldr	r2, [pc, #16]	; (d884 <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
    d872:	687b      	ldr	r3, [r7, #4]
    d874:	6013      	str	r3, [r2, #0]
} //SerialTerminal_Class
    d876:	687b      	ldr	r3, [r7, #4]
    d878:	4618      	mov	r0, r3
    d87a:	370c      	adds	r7, #12
    d87c:	46bd      	mov	sp, r7
    d87e:	bc80      	pop	{r7}
    d880:	4770      	bx	lr
    d882:	bf00      	nop
    d884:	20000c70 	.word	0x20000c70

0000d888 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
    d888:	b480      	push	{r7}
    d88a:	b083      	sub	sp, #12
    d88c:	af00      	add	r7, sp, #0
    d88e:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
    d890:	687b      	ldr	r3, [r7, #4]
    d892:	4618      	mov	r0, r3
    d894:	370c      	adds	r7, #12
    d896:	46bd      	mov	sp, r7
    d898:	bc80      	pop	{r7}
    d89a:	4770      	bx	lr

0000d89c <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
    d89c:	b580      	push	{r7, lr}
    d89e:	b082      	sub	sp, #8
    d8a0:	af00      	add	r7, sp, #0
    d8a2:	6078      	str	r0, [r7, #4]
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
    d8a4:	2040      	movs	r0, #64	; 0x40
    d8a6:	4b1c      	ldr	r3, [pc, #112]	; (d918 <_ZN20SerialTerminal_Class6OnInitEv+0x7c>)
    d8a8:	4798      	blx	r3
    d8aa:	4603      	mov	r3, r0
    d8ac:	461a      	mov	r2, r3
    d8ae:	687b      	ldr	r3, [r7, #4]
    d8b0:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
    d8b2:	687b      	ldr	r3, [r7, #4]
    d8b4:	78db      	ldrb	r3, [r3, #3]
    d8b6:	2b00      	cmp	r3, #0
    d8b8:	d024      	beq.n	d904 <_ZN20SerialTerminal_Class6OnInitEv+0x68>
		{
			timeout=false;
    d8ba:	687b      	ldr	r3, [r7, #4]
    d8bc:	2200      	movs	r2, #0
    d8be:	709a      	strb	r2, [r3, #2]
			terminalStarted=true;
    d8c0:	687b      	ldr	r3, [r7, #4]
    d8c2:	2201      	movs	r2, #1
    d8c4:	705a      	strb	r2, [r3, #1]
			usbTimer.Add_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
    d8c6:	f44f 7216 	mov.w	r2, #600	; 0x258
    d8ca:	4914      	ldr	r1, [pc, #80]	; (d91c <_ZN20SerialTerminal_Class6OnInitEv+0x80>)
    d8cc:	4814      	ldr	r0, [pc, #80]	; (d920 <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
    d8ce:	4b15      	ldr	r3, [pc, #84]	; (d924 <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
    d8d0:	4798      	blx	r3
			usbTimer.Start();
    d8d2:	4813      	ldr	r0, [pc, #76]	; (d920 <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
    d8d4:	4b14      	ldr	r3, [pc, #80]	; (d928 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    d8d6:	4798      	blx	r3
			while (!usb.IsEnabled()){
    d8d8:	4814      	ldr	r0, [pc, #80]	; (d92c <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    d8da:	4b15      	ldr	r3, [pc, #84]	; (d930 <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
    d8dc:	4798      	blx	r3
    d8de:	4603      	mov	r3, r0
    d8e0:	f083 0301 	eor.w	r3, r3, #1
    d8e4:	b2db      	uxtb	r3, r3
    d8e6:	2b00      	cmp	r3, #0
    d8e8:	d008      	beq.n	d8fc <_ZN20SerialTerminal_Class6OnInitEv+0x60>
				if (timeout)
    d8ea:	687b      	ldr	r3, [r7, #4]
    d8ec:	789b      	ldrb	r3, [r3, #2]
    d8ee:	b2db      	uxtb	r3, r3
    d8f0:	2b00      	cmp	r3, #0
    d8f2:	d0f1      	beq.n	d8d8 <_ZN20SerialTerminal_Class6OnInitEv+0x3c>
				{
					plugged=false;
    d8f4:	687b      	ldr	r3, [r7, #4]
    d8f6:	2200      	movs	r2, #0
    d8f8:	701a      	strb	r2, [r3, #0]
					return;
    d8fa:	e009      	b.n	d910 <_ZN20SerialTerminal_Class6OnInitEv+0x74>
				else
				{
				}
			}
			
			usbTimer.Stop();
    d8fc:	4808      	ldr	r0, [pc, #32]	; (d920 <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
    d8fe:	4b0d      	ldr	r3, [pc, #52]	; (d934 <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
    d900:	4798      	blx	r3
    d902:	e005      	b.n	d910 <_ZN20SerialTerminal_Class6OnInitEv+0x74>
		} 
		else
		{
			plugged=false;
    d904:	687b      	ldr	r3, [r7, #4]
    d906:	2200      	movs	r2, #0
    d908:	701a      	strb	r2, [r3, #0]
			terminalStarted=false;
    d90a:	687b      	ldr	r3, [r7, #4]
    d90c:	2200      	movs	r2, #0
    d90e:	705a      	strb	r2, [r3, #1]
		}
		
}
    d910:	3708      	adds	r7, #8
    d912:	46bd      	mov	sp, r7
    d914:	bd80      	pop	{r7, pc}
    d916:	bf00      	nop
    d918:	0000d805 	.word	0x0000d805
    d91c:	0000d841 	.word	0x0000d841
    d920:	20000c78 	.word	0x20000c78
    d924:	0000db7d 	.word	0x0000db7d
    d928:	0000dad5 	.word	0x0000dad5
    d92c:	20000c10 	.word	0x20000c10
    d930:	0000d27d 	.word	0x0000d27d
    d934:	0000daf9 	.word	0x0000daf9

0000d938 <_ZN20SerialTerminal_Class13CheckTerminalEv>:
		}
	}
	usbTimer.Stop();
	
}
bool	SerialTerminal_Class::CheckTerminal(void){
    d938:	b580      	push	{r7, lr}
    d93a:	b082      	sub	sp, #8
    d93c:	af00      	add	r7, sp, #0
    d93e:	6078      	str	r0, [r7, #4]
	if (terminalStarted)
    d940:	687b      	ldr	r3, [r7, #4]
    d942:	785b      	ldrb	r3, [r3, #1]
    d944:	b2db      	uxtb	r3, r3
    d946:	2b00      	cmp	r3, #0
    d948:	d01f      	beq.n	d98a <_ZN20SerialTerminal_Class13CheckTerminalEv+0x52>
	{
		if (plugged||usb.IsEnabled())
    d94a:	687b      	ldr	r3, [r7, #4]
    d94c:	781b      	ldrb	r3, [r3, #0]
    d94e:	b2db      	uxtb	r3, r3
    d950:	2b00      	cmp	r3, #0
    d952:	d105      	bne.n	d960 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x28>
    d954:	4812      	ldr	r0, [pc, #72]	; (d9a0 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x68>)
    d956:	4b13      	ldr	r3, [pc, #76]	; (d9a4 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x6c>)
    d958:	4798      	blx	r3
    d95a:	4603      	mov	r3, r0
    d95c:	2b00      	cmp	r3, #0
    d95e:	d001      	beq.n	d964 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x2c>
    d960:	2301      	movs	r3, #1
    d962:	e000      	b.n	d966 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x2e>
    d964:	2300      	movs	r3, #0
    d966:	2b00      	cmp	r3, #0
    d968:	d00b      	beq.n	d982 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x4a>
		{
			terminalStarted=usbTimer.Start()==0;
    d96a:	480f      	ldr	r0, [pc, #60]	; (d9a8 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x70>)
    d96c:	4b0f      	ldr	r3, [pc, #60]	; (d9ac <_ZN20SerialTerminal_Class13CheckTerminalEv+0x74>)
    d96e:	4798      	blx	r3
    d970:	4603      	mov	r3, r0
    d972:	2b00      	cmp	r3, #0
    d974:	bf0c      	ite	eq
    d976:	2301      	moveq	r3, #1
    d978:	2300      	movne	r3, #0
    d97a:	b2da      	uxtb	r2, r3
    d97c:	687b      	ldr	r3, [r7, #4]
    d97e:	705a      	strb	r2, [r3, #1]
    d980:	e007      	b.n	d992 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x5a>
		}
		else
		{
			terminalStarted=false;
    d982:	687b      	ldr	r3, [r7, #4]
    d984:	2200      	movs	r2, #0
    d986:	705a      	strb	r2, [r3, #1]
    d988:	e003      	b.n	d992 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x5a>
		}
	}
	else
	{
		return	terminalStarted;
    d98a:	687b      	ldr	r3, [r7, #4]
    d98c:	785b      	ldrb	r3, [r3, #1]
    d98e:	b2db      	uxtb	r3, r3
    d990:	e002      	b.n	d998 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x60>
	}
	
	return	terminalStarted;
    d992:	687b      	ldr	r3, [r7, #4]
    d994:	785b      	ldrb	r3, [r3, #1]
    d996:	b2db      	uxtb	r3, r3
}
    d998:	4618      	mov	r0, r3
    d99a:	3708      	adds	r7, #8
    d99c:	46bd      	mov	sp, r7
    d99e:	bd80      	pop	{r7, pc}
    d9a0:	20000c10 	.word	0x20000c10
    d9a4:	0000d27d 	.word	0x0000d27d
    d9a8:	20000c78 	.word	0x20000c78
    d9ac:	0000dad5 	.word	0x0000dad5

0000d9b0 <_ZN20SerialTerminal_Class13CheckTerminalEm>:
bool	SerialTerminal_Class::CheckTerminal(uint32_t size){
    d9b0:	b580      	push	{r7, lr}
    d9b2:	b082      	sub	sp, #8
    d9b4:	af00      	add	r7, sp, #0
    d9b6:	6078      	str	r0, [r7, #4]
    d9b8:	6039      	str	r1, [r7, #0]
	if (terminalStarted)
    d9ba:	687b      	ldr	r3, [r7, #4]
    d9bc:	785b      	ldrb	r3, [r3, #1]
    d9be:	b2db      	uxtb	r3, r3
    d9c0:	2b00      	cmp	r3, #0
    d9c2:	d02f      	beq.n	da24 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x74>
	{
		if (plugged||usb.IsEnabled())
    d9c4:	687b      	ldr	r3, [r7, #4]
    d9c6:	781b      	ldrb	r3, [r3, #0]
    d9c8:	b2db      	uxtb	r3, r3
    d9ca:	2b00      	cmp	r3, #0
    d9cc:	d105      	bne.n	d9da <_ZN20SerialTerminal_Class13CheckTerminalEm+0x2a>
    d9ce:	481b      	ldr	r0, [pc, #108]	; (da3c <_ZN20SerialTerminal_Class13CheckTerminalEm+0x8c>)
    d9d0:	4b1b      	ldr	r3, [pc, #108]	; (da40 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x90>)
    d9d2:	4798      	blx	r3
    d9d4:	4603      	mov	r3, r0
    d9d6:	2b00      	cmp	r3, #0
    d9d8:	d001      	beq.n	d9de <_ZN20SerialTerminal_Class13CheckTerminalEm+0x2e>
    d9da:	2301      	movs	r3, #1
    d9dc:	e000      	b.n	d9e0 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x30>
    d9de:	2300      	movs	r3, #0
    d9e0:	2b00      	cmp	r3, #0
    d9e2:	d01b      	beq.n	da1c <_ZN20SerialTerminal_Class13CheckTerminalEm+0x6c>
		{
			usbTimer.Stop();
    d9e4:	4817      	ldr	r0, [pc, #92]	; (da44 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x94>)
    d9e6:	4b18      	ldr	r3, [pc, #96]	; (da48 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x98>)
    d9e8:	4798      	blx	r3
			usbTimer.Remove_task();
    d9ea:	4816      	ldr	r0, [pc, #88]	; (da44 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x94>)
    d9ec:	4b17      	ldr	r3, [pc, #92]	; (da4c <_ZN20SerialTerminal_Class13CheckTerminalEm+0x9c>)
    d9ee:	4798      	blx	r3
			usbTimer.Add_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*size);
    d9f0:	683a      	ldr	r2, [r7, #0]
    d9f2:	4613      	mov	r3, r2
    d9f4:	009b      	lsls	r3, r3, #2
    d9f6:	4413      	add	r3, r2
    d9f8:	005b      	lsls	r3, r3, #1
    d9fa:	461a      	mov	r2, r3
    d9fc:	4914      	ldr	r1, [pc, #80]	; (da50 <_ZN20SerialTerminal_Class13CheckTerminalEm+0xa0>)
    d9fe:	4811      	ldr	r0, [pc, #68]	; (da44 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x94>)
    da00:	4b14      	ldr	r3, [pc, #80]	; (da54 <_ZN20SerialTerminal_Class13CheckTerminalEm+0xa4>)
    da02:	4798      	blx	r3
			terminalStarted=usbTimer.Start()==0;
    da04:	480f      	ldr	r0, [pc, #60]	; (da44 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x94>)
    da06:	4b14      	ldr	r3, [pc, #80]	; (da58 <_ZN20SerialTerminal_Class13CheckTerminalEm+0xa8>)
    da08:	4798      	blx	r3
    da0a:	4603      	mov	r3, r0
    da0c:	2b00      	cmp	r3, #0
    da0e:	bf0c      	ite	eq
    da10:	2301      	moveq	r3, #1
    da12:	2300      	movne	r3, #0
    da14:	b2da      	uxtb	r2, r3
    da16:	687b      	ldr	r3, [r7, #4]
    da18:	705a      	strb	r2, [r3, #1]
    da1a:	e007      	b.n	da2c <_ZN20SerialTerminal_Class13CheckTerminalEm+0x7c>
		}
		else
		{
			terminalStarted=false;
    da1c:	687b      	ldr	r3, [r7, #4]
    da1e:	2200      	movs	r2, #0
    da20:	705a      	strb	r2, [r3, #1]
    da22:	e003      	b.n	da2c <_ZN20SerialTerminal_Class13CheckTerminalEm+0x7c>
		}
	}
	else
	{
		return	terminalStarted;
    da24:	687b      	ldr	r3, [r7, #4]
    da26:	785b      	ldrb	r3, [r3, #1]
    da28:	b2db      	uxtb	r3, r3
    da2a:	e002      	b.n	da32 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x82>
	}
	
	return	terminalStarted;
    da2c:	687b      	ldr	r3, [r7, #4]
    da2e:	785b      	ldrb	r3, [r3, #1]
    da30:	b2db      	uxtb	r3, r3
    da32:	4618      	mov	r0, r3
    da34:	3708      	adds	r7, #8
    da36:	46bd      	mov	sp, r7
    da38:	bd80      	pop	{r7, pc}
    da3a:	bf00      	nop
    da3c:	20000c10 	.word	0x20000c10
    da40:	0000d27d 	.word	0x0000d27d
    da44:	20000c78 	.word	0x20000c78
    da48:	0000daf9 	.word	0x0000daf9
    da4c:	0000dba5 	.word	0x0000dba5
    da50:	0000d841 	.word	0x0000d841
    da54:	0000db7d 	.word	0x0000db7d
    da58:	0000dad5 	.word	0x0000dad5

0000da5c <_ZL7task_cbPK10timer_task>:
static void extern_task_cb(const struct timer_task *const timer_task)
{
	ptrTimerSerialClass->handler();
}
static void task_cb(const struct timer_task *const timer_task)
{
    da5c:	b580      	push	{r7, lr}
    da5e:	b082      	sub	sp, #8
    da60:	af00      	add	r7, sp, #0
    da62:	6078      	str	r0, [r7, #4]
	ptrTimerSerialClass->setTimeout();
    da64:	4b04      	ldr	r3, [pc, #16]	; (da78 <_ZL7task_cbPK10timer_task+0x1c>)
    da66:	681b      	ldr	r3, [r3, #0]
    da68:	4618      	mov	r0, r3
    da6a:	4b04      	ldr	r3, [pc, #16]	; (da7c <_ZL7task_cbPK10timer_task+0x20>)
    da6c:	4798      	blx	r3
}
    da6e:	bf00      	nop
    da70:	3708      	adds	r7, #8
    da72:	46bd      	mov	sp, r7
    da74:	bd80      	pop	{r7, pc}
    da76:	bf00      	nop
    da78:	20000c74 	.word	0x20000c74
    da7c:	0000db21 	.word	0x0000db21

0000da80 <_ZN17TimerSerial_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task.cb=task_cb;
} //Timer_Class

// default constructor
TimerSerial_Class::TimerSerial_Class( timer_descriptor * descr)
    da80:	b480      	push	{r7}
    da82:	b083      	sub	sp, #12
    da84:	af00      	add	r7, sp, #0
    da86:	6078      	str	r0, [r7, #4]
    da88:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    da8a:	687b      	ldr	r3, [r7, #4]
    da8c:	683a      	ldr	r2, [r7, #0]
    da8e:	609a      	str	r2, [r3, #8]
	ptrTimerSerialClass=this;
    da90:	4a07      	ldr	r2, [pc, #28]	; (dab0 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x30>)
    da92:	687b      	ldr	r3, [r7, #4]
    da94:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    da96:	687b      	ldr	r3, [r7, #4]
    da98:	f44f 6280 	mov.w	r2, #1024	; 0x400
    da9c:	611a      	str	r2, [r3, #16]
	task.cb=task_cb;
    da9e:	687b      	ldr	r3, [r7, #4]
    daa0:	4a04      	ldr	r2, [pc, #16]	; (dab4 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x34>)
    daa2:	621a      	str	r2, [r3, #32]
} //Timer_Class
    daa4:	687b      	ldr	r3, [r7, #4]
    daa6:	4618      	mov	r0, r3
    daa8:	370c      	adds	r7, #12
    daaa:	46bd      	mov	sp, r7
    daac:	bc80      	pop	{r7}
    daae:	4770      	bx	lr
    dab0:	20000c74 	.word	0x20000c74
    dab4:	0000da5d 	.word	0x0000da5d

0000dab8 <_ZN17TimerSerial_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerSerialClass=this;
}

// default destructor
TimerSerial_Class::~TimerSerial_Class()
    dab8:	b480      	push	{r7}
    daba:	b083      	sub	sp, #12
    dabc:	af00      	add	r7, sp, #0
    dabe:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    dac0:	687b      	ldr	r3, [r7, #4]
    dac2:	2200      	movs	r2, #0
    dac4:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    dac6:	687b      	ldr	r3, [r7, #4]
    dac8:	4618      	mov	r0, r3
    daca:	370c      	adds	r7, #12
    dacc:	46bd      	mov	sp, r7
    dace:	bc80      	pop	{r7}
    dad0:	4770      	bx	lr
	...

0000dad4 <_ZN17TimerSerial_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t TimerSerial_Class::Start(void){
    dad4:	b580      	push	{r7, lr}
    dad6:	b084      	sub	sp, #16
    dad8:	af00      	add	r7, sp, #0
    dada:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
    dadc:	687b      	ldr	r3, [r7, #4]
    dade:	689b      	ldr	r3, [r3, #8]
    dae0:	4618      	mov	r0, r3
    dae2:	4b04      	ldr	r3, [pc, #16]	; (daf4 <_ZN17TimerSerial_Class5StartEv+0x20>)
    dae4:	4798      	blx	r3
    dae6:	60f8      	str	r0, [r7, #12]
	return status;
    dae8:	68fb      	ldr	r3, [r7, #12]
	
}
    daea:	4618      	mov	r0, r3
    daec:	3710      	adds	r7, #16
    daee:	46bd      	mov	sp, r7
    daf0:	bd80      	pop	{r7, pc}
    daf2:	bf00      	nop
    daf4:	000027a5 	.word	0x000027a5

0000daf8 <_ZN17TimerSerial_Class4StopEv>:

int32_t TimerSerial_Class::Stop( void){
    daf8:	b580      	push	{r7, lr}
    dafa:	b084      	sub	sp, #16
    dafc:	af00      	add	r7, sp, #0
    dafe:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
    db00:	687b      	ldr	r3, [r7, #4]
    db02:	689b      	ldr	r3, [r3, #8]
    db04:	4618      	mov	r0, r3
    db06:	4b05      	ldr	r3, [pc, #20]	; (db1c <_ZN17TimerSerial_Class4StopEv+0x24>)
    db08:	4798      	blx	r3
    db0a:	60f8      	str	r0, [r7, #12]
	timeout=0;
    db0c:	687b      	ldr	r3, [r7, #4]
    db0e:	2200      	movs	r2, #0
    db10:	705a      	strb	r2, [r3, #1]
	return status;
    db12:	68fb      	ldr	r3, [r7, #12]
}
    db14:	4618      	mov	r0, r3
    db16:	3710      	adds	r7, #16
    db18:	46bd      	mov	sp, r7
    db1a:	bd80      	pop	{r7, pc}
    db1c:	000027f9 	.word	0x000027f9

0000db20 <_ZN17TimerSerial_Class10setTimeoutEv>:
	task.cb=task_cb;
	task.mode=TIMER_TASK_ONE_SHOT;
	timer_add_task(timer_descr, &task);
}

volatile void TimerSerial_Class::setTimeout(){
    db20:	b480      	push	{r7}
    db22:	b083      	sub	sp, #12
    db24:	af00      	add	r7, sp, #0
    db26:	6078      	str	r0, [r7, #4]
	timeout=1;
    db28:	687b      	ldr	r3, [r7, #4]
    db2a:	2201      	movs	r2, #1
    db2c:	705a      	strb	r2, [r3, #1]
}
    db2e:	bf00      	nop
    db30:	370c      	adds	r7, #12
    db32:	46bd      	mov	sp, r7
    db34:	bc80      	pop	{r7}
    db36:	4770      	bx	lr

0000db38 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode>:
	task.mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, &task);
	
	return status;
}
int32_t TimerSerial_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    db38:	b580      	push	{r7, lr}
    db3a:	b086      	sub	sp, #24
    db3c:	af00      	add	r7, sp, #0
    db3e:	60f8      	str	r0, [r7, #12]
    db40:	60b9      	str	r1, [r7, #8]
    db42:	607a      	str	r2, [r7, #4]
    db44:	70fb      	strb	r3, [r7, #3]
	int32_t	status;

	task.interval = interval;
    db46:	68fb      	ldr	r3, [r7, #12]
    db48:	687a      	ldr	r2, [r7, #4]
    db4a:	61da      	str	r2, [r3, #28]
	task.cb       = (timer_cb_t)func;
    db4c:	68fb      	ldr	r3, [r7, #12]
    db4e:	68ba      	ldr	r2, [r7, #8]
    db50:	621a      	str	r2, [r3, #32]
	task.mode     = modeTask;
    db52:	68fb      	ldr	r3, [r7, #12]
    db54:	78fa      	ldrb	r2, [r7, #3]
    db56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	status=timer_add_task(timer_descr, &task);
    db5a:	68fb      	ldr	r3, [r7, #12]
    db5c:	689a      	ldr	r2, [r3, #8]
    db5e:	68fb      	ldr	r3, [r7, #12]
    db60:	3314      	adds	r3, #20
    db62:	4619      	mov	r1, r3
    db64:	4610      	mov	r0, r2
    db66:	4b04      	ldr	r3, [pc, #16]	; (db78 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x40>)
    db68:	4798      	blx	r3
    db6a:	6178      	str	r0, [r7, #20]
	
	return status;
    db6c:	697b      	ldr	r3, [r7, #20]
}
    db6e:	4618      	mov	r0, r3
    db70:	3718      	adds	r7, #24
    db72:	46bd      	mov	sp, r7
    db74:	bd80      	pop	{r7, pc}
    db76:	bf00      	nop
    db78:	00002855 	.word	0x00002855

0000db7c <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
		return status;
}
int32_t TimerSerial_Class::Add_oneShot_task(FUNC_PTR func,uint32_t interval){
    db7c:	b590      	push	{r4, r7, lr}
    db7e:	b087      	sub	sp, #28
    db80:	af00      	add	r7, sp, #0
    db82:	60f8      	str	r0, [r7, #12]
    db84:	60b9      	str	r1, [r7, #8]
    db86:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    db88:	2300      	movs	r3, #0
    db8a:	687a      	ldr	r2, [r7, #4]
    db8c:	68b9      	ldr	r1, [r7, #8]
    db8e:	68f8      	ldr	r0, [r7, #12]
    db90:	4c03      	ldr	r4, [pc, #12]	; (dba0 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm+0x24>)
    db92:	47a0      	blx	r4
    db94:	6178      	str	r0, [r7, #20]
	return status;
    db96:	697b      	ldr	r3, [r7, #20]
}
    db98:	4618      	mov	r0, r3
    db9a:	371c      	adds	r7, #28
    db9c:	46bd      	mov	sp, r7
    db9e:	bd90      	pop	{r4, r7, pc}
    dba0:	0000db39 	.word	0x0000db39

0000dba4 <_ZN17TimerSerial_Class11Remove_taskEv>:
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
	status=timer_start(timer_descr);
	return status;
}

void	TimerSerial_Class::Remove_task(void){
    dba4:	b580      	push	{r7, lr}
    dba6:	b082      	sub	sp, #8
    dba8:	af00      	add	r7, sp, #0
    dbaa:	6078      	str	r0, [r7, #4]
	timer_remove_task(timer_descr, &task);
    dbac:	687b      	ldr	r3, [r7, #4]
    dbae:	689a      	ldr	r2, [r3, #8]
    dbb0:	687b      	ldr	r3, [r7, #4]
    dbb2:	3314      	adds	r3, #20
    dbb4:	4619      	mov	r1, r3
    dbb6:	4610      	mov	r0, r2
    dbb8:	4b02      	ldr	r3, [pc, #8]	; (dbc4 <_ZN17TimerSerial_Class11Remove_taskEv+0x20>)
    dbba:	4798      	blx	r3
}
    dbbc:	bf00      	nop
    dbbe:	3708      	adds	r7, #8
    dbc0:	46bd      	mov	sp, r7
    dbc2:	bd80      	pop	{r7, pc}
    dbc4:	0000294d 	.word	0x0000294d

0000dbc8 <_Z41__static_initialization_and_destruction_0ii>:
	
	timer_get_clock_cycles_in_tick(timer_descr,&ticks);
	return ticks;
}

TimerSerial_Class usbTimer(&TIMER_INTERFACE);
    dbc8:	b580      	push	{r7, lr}
    dbca:	b082      	sub	sp, #8
    dbcc:	af00      	add	r7, sp, #0
    dbce:	6078      	str	r0, [r7, #4]
    dbd0:	6039      	str	r1, [r7, #0]
    dbd2:	687b      	ldr	r3, [r7, #4]
    dbd4:	2b01      	cmp	r3, #1
    dbd6:	d10d      	bne.n	dbf4 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    dbd8:	683b      	ldr	r3, [r7, #0]
    dbda:	f64f 72ff 	movw	r2, #65535	; 0xffff
    dbde:	4293      	cmp	r3, r2
    dbe0:	d108      	bne.n	dbf4 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    dbe2:	4906      	ldr	r1, [pc, #24]	; (dbfc <_Z41__static_initialization_and_destruction_0ii+0x34>)
    dbe4:	4806      	ldr	r0, [pc, #24]	; (dc00 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    dbe6:	4b07      	ldr	r3, [pc, #28]	; (dc04 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    dbe8:	4798      	blx	r3
    dbea:	4a07      	ldr	r2, [pc, #28]	; (dc08 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    dbec:	4907      	ldr	r1, [pc, #28]	; (dc0c <_Z41__static_initialization_and_destruction_0ii+0x44>)
    dbee:	4804      	ldr	r0, [pc, #16]	; (dc00 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    dbf0:	4b07      	ldr	r3, [pc, #28]	; (dc10 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    dbf2:	4798      	blx	r3
    dbf4:	bf00      	nop
    dbf6:	3708      	adds	r7, #8
    dbf8:	46bd      	mov	sp, r7
    dbfa:	bd80      	pop	{r7, pc}
    dbfc:	20000d24 	.word	0x20000d24
    dc00:	20000c78 	.word	0x20000c78
    dc04:	0000da81 	.word	0x0000da81
    dc08:	20000000 	.word	0x20000000
    dc0c:	0000dab9 	.word	0x0000dab9
    dc10:	0000dc49 	.word	0x0000dc49

0000dc14 <_GLOBAL__sub_I_ptrTimerSerialClass>:
    dc14:	b580      	push	{r7, lr}
    dc16:	af00      	add	r7, sp, #0
    dc18:	f64f 71ff 	movw	r1, #65535	; 0xffff
    dc1c:	2001      	movs	r0, #1
    dc1e:	4b01      	ldr	r3, [pc, #4]	; (dc24 <_GLOBAL__sub_I_ptrTimerSerialClass+0x10>)
    dc20:	4798      	blx	r3
    dc22:	bd80      	pop	{r7, pc}
    dc24:	0000dbc9 	.word	0x0000dbc9

0000dc28 <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
    dc28:	b480      	push	{r7}
    dc2a:	b083      	sub	sp, #12
    dc2c:	af00      	add	r7, sp, #0
    dc2e:	6078      	str	r0, [r7, #4]
    return (void *)0;
    dc30:	2300      	movs	r3, #0
	}
    dc32:	4618      	mov	r0, r3
    dc34:	370c      	adds	r7, #12
    dc36:	46bd      	mov	sp, r7
    dc38:	bc80      	pop	{r7}
    dc3a:	4770      	bx	lr

0000dc3c <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
    dc3c:	b480      	push	{r7}
    dc3e:	af00      	add	r7, sp, #0
		}
    dc40:	bf00      	nop
    dc42:	46bd      	mov	sp, r7
    dc44:	bc80      	pop	{r7}
    dc46:	4770      	bx	lr

0000dc48 <__aeabi_atexit>:
    dc48:	460b      	mov	r3, r1
    dc4a:	4601      	mov	r1, r0
    dc4c:	4618      	mov	r0, r3
    dc4e:	f000 b801 	b.w	dc54 <__cxa_atexit>
    dc52:	bf00      	nop

0000dc54 <__cxa_atexit>:
    dc54:	4613      	mov	r3, r2
    dc56:	460a      	mov	r2, r1
    dc58:	4601      	mov	r1, r0
    dc5a:	2002      	movs	r0, #2
    dc5c:	f000 b99e 	b.w	df9c <__register_exitproc>

0000dc60 <ffs>:
    dc60:	b140      	cbz	r0, dc74 <ffs+0x14>
    dc62:	2300      	movs	r3, #0
    dc64:	fa40 f103 	asr.w	r1, r0, r3
    dc68:	1c5a      	adds	r2, r3, #1
    dc6a:	07c9      	lsls	r1, r1, #31
    dc6c:	4613      	mov	r3, r2
    dc6e:	d5f9      	bpl.n	dc64 <ffs+0x4>
    dc70:	4610      	mov	r0, r2
    dc72:	4770      	bx	lr
    dc74:	4602      	mov	r2, r0
    dc76:	4610      	mov	r0, r2
    dc78:	4770      	bx	lr
    dc7a:	bf00      	nop

0000dc7c <__libc_init_array>:
    dc7c:	b570      	push	{r4, r5, r6, lr}
    dc7e:	4e0f      	ldr	r6, [pc, #60]	; (dcbc <__libc_init_array+0x40>)
    dc80:	4d0f      	ldr	r5, [pc, #60]	; (dcc0 <__libc_init_array+0x44>)
    dc82:	1b76      	subs	r6, r6, r5
    dc84:	10b6      	asrs	r6, r6, #2
    dc86:	bf18      	it	ne
    dc88:	2400      	movne	r4, #0
    dc8a:	d005      	beq.n	dc98 <__libc_init_array+0x1c>
    dc8c:	3401      	adds	r4, #1
    dc8e:	f855 3b04 	ldr.w	r3, [r5], #4
    dc92:	4798      	blx	r3
    dc94:	42a6      	cmp	r6, r4
    dc96:	d1f9      	bne.n	dc8c <__libc_init_array+0x10>
    dc98:	4e0a      	ldr	r6, [pc, #40]	; (dcc4 <__libc_init_array+0x48>)
    dc9a:	4d0b      	ldr	r5, [pc, #44]	; (dcc8 <__libc_init_array+0x4c>)
    dc9c:	1b76      	subs	r6, r6, r5
    dc9e:	f000 fd4d 	bl	e73c <_init>
    dca2:	10b6      	asrs	r6, r6, #2
    dca4:	bf18      	it	ne
    dca6:	2400      	movne	r4, #0
    dca8:	d006      	beq.n	dcb8 <__libc_init_array+0x3c>
    dcaa:	3401      	adds	r4, #1
    dcac:	f855 3b04 	ldr.w	r3, [r5], #4
    dcb0:	4798      	blx	r3
    dcb2:	42a6      	cmp	r6, r4
    dcb4:	d1f9      	bne.n	dcaa <__libc_init_array+0x2e>
    dcb6:	bd70      	pop	{r4, r5, r6, pc}
    dcb8:	bd70      	pop	{r4, r5, r6, pc}
    dcba:	bf00      	nop
    dcbc:	0000e748 	.word	0x0000e748
    dcc0:	0000e748 	.word	0x0000e748
    dcc4:	0000e75c 	.word	0x0000e75c
    dcc8:	0000e748 	.word	0x0000e748

0000dccc <memcpy>:
    dccc:	4684      	mov	ip, r0
    dcce:	ea41 0300 	orr.w	r3, r1, r0
    dcd2:	f013 0303 	ands.w	r3, r3, #3
    dcd6:	d16d      	bne.n	ddb4 <memcpy+0xe8>
    dcd8:	3a40      	subs	r2, #64	; 0x40
    dcda:	d341      	bcc.n	dd60 <memcpy+0x94>
    dcdc:	f851 3b04 	ldr.w	r3, [r1], #4
    dce0:	f840 3b04 	str.w	r3, [r0], #4
    dce4:	f851 3b04 	ldr.w	r3, [r1], #4
    dce8:	f840 3b04 	str.w	r3, [r0], #4
    dcec:	f851 3b04 	ldr.w	r3, [r1], #4
    dcf0:	f840 3b04 	str.w	r3, [r0], #4
    dcf4:	f851 3b04 	ldr.w	r3, [r1], #4
    dcf8:	f840 3b04 	str.w	r3, [r0], #4
    dcfc:	f851 3b04 	ldr.w	r3, [r1], #4
    dd00:	f840 3b04 	str.w	r3, [r0], #4
    dd04:	f851 3b04 	ldr.w	r3, [r1], #4
    dd08:	f840 3b04 	str.w	r3, [r0], #4
    dd0c:	f851 3b04 	ldr.w	r3, [r1], #4
    dd10:	f840 3b04 	str.w	r3, [r0], #4
    dd14:	f851 3b04 	ldr.w	r3, [r1], #4
    dd18:	f840 3b04 	str.w	r3, [r0], #4
    dd1c:	f851 3b04 	ldr.w	r3, [r1], #4
    dd20:	f840 3b04 	str.w	r3, [r0], #4
    dd24:	f851 3b04 	ldr.w	r3, [r1], #4
    dd28:	f840 3b04 	str.w	r3, [r0], #4
    dd2c:	f851 3b04 	ldr.w	r3, [r1], #4
    dd30:	f840 3b04 	str.w	r3, [r0], #4
    dd34:	f851 3b04 	ldr.w	r3, [r1], #4
    dd38:	f840 3b04 	str.w	r3, [r0], #4
    dd3c:	f851 3b04 	ldr.w	r3, [r1], #4
    dd40:	f840 3b04 	str.w	r3, [r0], #4
    dd44:	f851 3b04 	ldr.w	r3, [r1], #4
    dd48:	f840 3b04 	str.w	r3, [r0], #4
    dd4c:	f851 3b04 	ldr.w	r3, [r1], #4
    dd50:	f840 3b04 	str.w	r3, [r0], #4
    dd54:	f851 3b04 	ldr.w	r3, [r1], #4
    dd58:	f840 3b04 	str.w	r3, [r0], #4
    dd5c:	3a40      	subs	r2, #64	; 0x40
    dd5e:	d2bd      	bcs.n	dcdc <memcpy+0x10>
    dd60:	3230      	adds	r2, #48	; 0x30
    dd62:	d311      	bcc.n	dd88 <memcpy+0xbc>
    dd64:	f851 3b04 	ldr.w	r3, [r1], #4
    dd68:	f840 3b04 	str.w	r3, [r0], #4
    dd6c:	f851 3b04 	ldr.w	r3, [r1], #4
    dd70:	f840 3b04 	str.w	r3, [r0], #4
    dd74:	f851 3b04 	ldr.w	r3, [r1], #4
    dd78:	f840 3b04 	str.w	r3, [r0], #4
    dd7c:	f851 3b04 	ldr.w	r3, [r1], #4
    dd80:	f840 3b04 	str.w	r3, [r0], #4
    dd84:	3a10      	subs	r2, #16
    dd86:	d2ed      	bcs.n	dd64 <memcpy+0x98>
    dd88:	320c      	adds	r2, #12
    dd8a:	d305      	bcc.n	dd98 <memcpy+0xcc>
    dd8c:	f851 3b04 	ldr.w	r3, [r1], #4
    dd90:	f840 3b04 	str.w	r3, [r0], #4
    dd94:	3a04      	subs	r2, #4
    dd96:	d2f9      	bcs.n	dd8c <memcpy+0xc0>
    dd98:	3204      	adds	r2, #4
    dd9a:	d008      	beq.n	ddae <memcpy+0xe2>
    dd9c:	07d2      	lsls	r2, r2, #31
    dd9e:	bf1c      	itt	ne
    dda0:	f811 3b01 	ldrbne.w	r3, [r1], #1
    dda4:	f800 3b01 	strbne.w	r3, [r0], #1
    dda8:	d301      	bcc.n	ddae <memcpy+0xe2>
    ddaa:	880b      	ldrh	r3, [r1, #0]
    ddac:	8003      	strh	r3, [r0, #0]
    ddae:	4660      	mov	r0, ip
    ddb0:	4770      	bx	lr
    ddb2:	bf00      	nop
    ddb4:	2a08      	cmp	r2, #8
    ddb6:	d313      	bcc.n	dde0 <memcpy+0x114>
    ddb8:	078b      	lsls	r3, r1, #30
    ddba:	d08d      	beq.n	dcd8 <memcpy+0xc>
    ddbc:	f010 0303 	ands.w	r3, r0, #3
    ddc0:	d08a      	beq.n	dcd8 <memcpy+0xc>
    ddc2:	f1c3 0304 	rsb	r3, r3, #4
    ddc6:	1ad2      	subs	r2, r2, r3
    ddc8:	07db      	lsls	r3, r3, #31
    ddca:	bf1c      	itt	ne
    ddcc:	f811 3b01 	ldrbne.w	r3, [r1], #1
    ddd0:	f800 3b01 	strbne.w	r3, [r0], #1
    ddd4:	d380      	bcc.n	dcd8 <memcpy+0xc>
    ddd6:	f831 3b02 	ldrh.w	r3, [r1], #2
    ddda:	f820 3b02 	strh.w	r3, [r0], #2
    ddde:	e77b      	b.n	dcd8 <memcpy+0xc>
    dde0:	3a04      	subs	r2, #4
    dde2:	d3d9      	bcc.n	dd98 <memcpy+0xcc>
    dde4:	3a01      	subs	r2, #1
    dde6:	f811 3b01 	ldrb.w	r3, [r1], #1
    ddea:	f800 3b01 	strb.w	r3, [r0], #1
    ddee:	d2f9      	bcs.n	dde4 <memcpy+0x118>
    ddf0:	780b      	ldrb	r3, [r1, #0]
    ddf2:	7003      	strb	r3, [r0, #0]
    ddf4:	784b      	ldrb	r3, [r1, #1]
    ddf6:	7043      	strb	r3, [r0, #1]
    ddf8:	788b      	ldrb	r3, [r1, #2]
    ddfa:	7083      	strb	r3, [r0, #2]
    ddfc:	4660      	mov	r0, ip
    ddfe:	4770      	bx	lr

0000de00 <memset>:
    de00:	b470      	push	{r4, r5, r6}
    de02:	0786      	lsls	r6, r0, #30
    de04:	d046      	beq.n	de94 <memset+0x94>
    de06:	1e54      	subs	r4, r2, #1
    de08:	2a00      	cmp	r2, #0
    de0a:	d041      	beq.n	de90 <memset+0x90>
    de0c:	b2ca      	uxtb	r2, r1
    de0e:	4603      	mov	r3, r0
    de10:	e002      	b.n	de18 <memset+0x18>
    de12:	f114 34ff 	adds.w	r4, r4, #4294967295
    de16:	d33b      	bcc.n	de90 <memset+0x90>
    de18:	f803 2b01 	strb.w	r2, [r3], #1
    de1c:	079d      	lsls	r5, r3, #30
    de1e:	d1f8      	bne.n	de12 <memset+0x12>
    de20:	2c03      	cmp	r4, #3
    de22:	d92e      	bls.n	de82 <memset+0x82>
    de24:	b2cd      	uxtb	r5, r1
    de26:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    de2a:	2c0f      	cmp	r4, #15
    de2c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    de30:	d919      	bls.n	de66 <memset+0x66>
    de32:	f103 0210 	add.w	r2, r3, #16
    de36:	4626      	mov	r6, r4
    de38:	3e10      	subs	r6, #16
    de3a:	2e0f      	cmp	r6, #15
    de3c:	f842 5c10 	str.w	r5, [r2, #-16]
    de40:	f842 5c0c 	str.w	r5, [r2, #-12]
    de44:	f842 5c08 	str.w	r5, [r2, #-8]
    de48:	f842 5c04 	str.w	r5, [r2, #-4]
    de4c:	f102 0210 	add.w	r2, r2, #16
    de50:	d8f2      	bhi.n	de38 <memset+0x38>
    de52:	f1a4 0210 	sub.w	r2, r4, #16
    de56:	f022 020f 	bic.w	r2, r2, #15
    de5a:	f004 040f 	and.w	r4, r4, #15
    de5e:	3210      	adds	r2, #16
    de60:	2c03      	cmp	r4, #3
    de62:	4413      	add	r3, r2
    de64:	d90d      	bls.n	de82 <memset+0x82>
    de66:	461e      	mov	r6, r3
    de68:	4622      	mov	r2, r4
    de6a:	3a04      	subs	r2, #4
    de6c:	2a03      	cmp	r2, #3
    de6e:	f846 5b04 	str.w	r5, [r6], #4
    de72:	d8fa      	bhi.n	de6a <memset+0x6a>
    de74:	1f22      	subs	r2, r4, #4
    de76:	f022 0203 	bic.w	r2, r2, #3
    de7a:	3204      	adds	r2, #4
    de7c:	4413      	add	r3, r2
    de7e:	f004 0403 	and.w	r4, r4, #3
    de82:	b12c      	cbz	r4, de90 <memset+0x90>
    de84:	b2c9      	uxtb	r1, r1
    de86:	441c      	add	r4, r3
    de88:	f803 1b01 	strb.w	r1, [r3], #1
    de8c:	429c      	cmp	r4, r3
    de8e:	d1fb      	bne.n	de88 <memset+0x88>
    de90:	bc70      	pop	{r4, r5, r6}
    de92:	4770      	bx	lr
    de94:	4614      	mov	r4, r2
    de96:	4603      	mov	r3, r0
    de98:	e7c2      	b.n	de20 <memset+0x20>
    de9a:	bf00      	nop
	...

0000dec0 <strlen>:
    dec0:	f890 f000 	pld	[r0]
    dec4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    dec8:	f020 0107 	bic.w	r1, r0, #7
    decc:	f06f 0c00 	mvn.w	ip, #0
    ded0:	f010 0407 	ands.w	r4, r0, #7
    ded4:	f891 f020 	pld	[r1, #32]
    ded8:	f040 8049 	bne.w	df6e <strlen+0xae>
    dedc:	f04f 0400 	mov.w	r4, #0
    dee0:	f06f 0007 	mvn.w	r0, #7
    dee4:	e9d1 2300 	ldrd	r2, r3, [r1]
    dee8:	f891 f040 	pld	[r1, #64]	; 0x40
    deec:	f100 0008 	add.w	r0, r0, #8
    def0:	fa82 f24c 	uadd8	r2, r2, ip
    def4:	faa4 f28c 	sel	r2, r4, ip
    def8:	fa83 f34c 	uadd8	r3, r3, ip
    defc:	faa2 f38c 	sel	r3, r2, ip
    df00:	bb4b      	cbnz	r3, df56 <strlen+0x96>
    df02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    df06:	fa82 f24c 	uadd8	r2, r2, ip
    df0a:	f100 0008 	add.w	r0, r0, #8
    df0e:	faa4 f28c 	sel	r2, r4, ip
    df12:	fa83 f34c 	uadd8	r3, r3, ip
    df16:	faa2 f38c 	sel	r3, r2, ip
    df1a:	b9e3      	cbnz	r3, df56 <strlen+0x96>
    df1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    df20:	fa82 f24c 	uadd8	r2, r2, ip
    df24:	f100 0008 	add.w	r0, r0, #8
    df28:	faa4 f28c 	sel	r2, r4, ip
    df2c:	fa83 f34c 	uadd8	r3, r3, ip
    df30:	faa2 f38c 	sel	r3, r2, ip
    df34:	b97b      	cbnz	r3, df56 <strlen+0x96>
    df36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    df3a:	f101 0120 	add.w	r1, r1, #32
    df3e:	fa82 f24c 	uadd8	r2, r2, ip
    df42:	f100 0008 	add.w	r0, r0, #8
    df46:	faa4 f28c 	sel	r2, r4, ip
    df4a:	fa83 f34c 	uadd8	r3, r3, ip
    df4e:	faa2 f38c 	sel	r3, r2, ip
    df52:	2b00      	cmp	r3, #0
    df54:	d0c6      	beq.n	dee4 <strlen+0x24>
    df56:	2a00      	cmp	r2, #0
    df58:	bf04      	itt	eq
    df5a:	3004      	addeq	r0, #4
    df5c:	461a      	moveq	r2, r3
    df5e:	ba12      	rev	r2, r2
    df60:	fab2 f282 	clz	r2, r2
    df64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    df68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    df6c:	4770      	bx	lr
    df6e:	e9d1 2300 	ldrd	r2, r3, [r1]
    df72:	f004 0503 	and.w	r5, r4, #3
    df76:	f1c4 0000 	rsb	r0, r4, #0
    df7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    df7e:	f014 0f04 	tst.w	r4, #4
    df82:	f891 f040 	pld	[r1, #64]	; 0x40
    df86:	fa0c f505 	lsl.w	r5, ip, r5
    df8a:	ea62 0205 	orn	r2, r2, r5
    df8e:	bf1c      	itt	ne
    df90:	ea63 0305 	ornne	r3, r3, r5
    df94:	4662      	movne	r2, ip
    df96:	f04f 0400 	mov.w	r4, #0
    df9a:	e7a9      	b.n	def0 <strlen+0x30>

0000df9c <__register_exitproc>:
    df9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dfa0:	4d2c      	ldr	r5, [pc, #176]	; (e054 <__register_exitproc+0xb8>)
    dfa2:	4606      	mov	r6, r0
    dfa4:	6828      	ldr	r0, [r5, #0]
    dfa6:	4698      	mov	r8, r3
    dfa8:	460f      	mov	r7, r1
    dfaa:	4691      	mov	r9, r2
    dfac:	f000 f882 	bl	e0b4 <__retarget_lock_acquire_recursive>
    dfb0:	4b29      	ldr	r3, [pc, #164]	; (e058 <__register_exitproc+0xbc>)
    dfb2:	681c      	ldr	r4, [r3, #0]
    dfb4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    dfb8:	2b00      	cmp	r3, #0
    dfba:	d03e      	beq.n	e03a <__register_exitproc+0x9e>
    dfbc:	685a      	ldr	r2, [r3, #4]
    dfbe:	2a1f      	cmp	r2, #31
    dfc0:	dc1c      	bgt.n	dffc <__register_exitproc+0x60>
    dfc2:	f102 0e01 	add.w	lr, r2, #1
    dfc6:	b176      	cbz	r6, dfe6 <__register_exitproc+0x4a>
    dfc8:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    dfcc:	2401      	movs	r4, #1
    dfce:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    dfd2:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
    dfd6:	4094      	lsls	r4, r2
    dfd8:	4320      	orrs	r0, r4
    dfda:	2e02      	cmp	r6, #2
    dfdc:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
    dfe0:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    dfe4:	d023      	beq.n	e02e <__register_exitproc+0x92>
    dfe6:	3202      	adds	r2, #2
    dfe8:	f8c3 e004 	str.w	lr, [r3, #4]
    dfec:	6828      	ldr	r0, [r5, #0]
    dfee:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    dff2:	f000 f861 	bl	e0b8 <__retarget_lock_release_recursive>
    dff6:	2000      	movs	r0, #0
    dff8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dffc:	4b17      	ldr	r3, [pc, #92]	; (e05c <__register_exitproc+0xc0>)
    dffe:	b30b      	cbz	r3, e044 <__register_exitproc+0xa8>
    e000:	f44f 70c8 	mov.w	r0, #400	; 0x190
    e004:	f7ff fe10 	bl	dc28 <malloc>
    e008:	4603      	mov	r3, r0
    e00a:	b1d8      	cbz	r0, e044 <__register_exitproc+0xa8>
    e00c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    e010:	6002      	str	r2, [r0, #0]
    e012:	2100      	movs	r1, #0
    e014:	6041      	str	r1, [r0, #4]
    e016:	460a      	mov	r2, r1
    e018:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    e01c:	f04f 0e01 	mov.w	lr, #1
    e020:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    e024:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
    e028:	2e00      	cmp	r6, #0
    e02a:	d0dc      	beq.n	dfe6 <__register_exitproc+0x4a>
    e02c:	e7cc      	b.n	dfc8 <__register_exitproc+0x2c>
    e02e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
    e032:	430c      	orrs	r4, r1
    e034:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
    e038:	e7d5      	b.n	dfe6 <__register_exitproc+0x4a>
    e03a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
    e03e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    e042:	e7bb      	b.n	dfbc <__register_exitproc+0x20>
    e044:	6828      	ldr	r0, [r5, #0]
    e046:	f000 f837 	bl	e0b8 <__retarget_lock_release_recursive>
    e04a:	f04f 30ff 	mov.w	r0, #4294967295
    e04e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e052:	bf00      	nop
    e054:	20000540 	.word	0x20000540
    e058:	0000e738 	.word	0x0000e738
    e05c:	0000dc29 	.word	0x0000dc29

0000e060 <register_fini>:
    e060:	4b02      	ldr	r3, [pc, #8]	; (e06c <register_fini+0xc>)
    e062:	b113      	cbz	r3, e06a <register_fini+0xa>
    e064:	4802      	ldr	r0, [pc, #8]	; (e070 <register_fini+0x10>)
    e066:	f000 b805 	b.w	e074 <atexit>
    e06a:	4770      	bx	lr
    e06c:	00000000 	.word	0x00000000
    e070:	0000e081 	.word	0x0000e081

0000e074 <atexit>:
    e074:	2300      	movs	r3, #0
    e076:	4601      	mov	r1, r0
    e078:	461a      	mov	r2, r3
    e07a:	4618      	mov	r0, r3
    e07c:	f7ff bf8e 	b.w	df9c <__register_exitproc>

0000e080 <__libc_fini_array>:
    e080:	b538      	push	{r3, r4, r5, lr}
    e082:	4c0a      	ldr	r4, [pc, #40]	; (e0ac <__libc_fini_array+0x2c>)
    e084:	4d0a      	ldr	r5, [pc, #40]	; (e0b0 <__libc_fini_array+0x30>)
    e086:	1b64      	subs	r4, r4, r5
    e088:	10a4      	asrs	r4, r4, #2
    e08a:	d00a      	beq.n	e0a2 <__libc_fini_array+0x22>
    e08c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    e090:	3b01      	subs	r3, #1
    e092:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    e096:	3c01      	subs	r4, #1
    e098:	f855 3904 	ldr.w	r3, [r5], #-4
    e09c:	4798      	blx	r3
    e09e:	2c00      	cmp	r4, #0
    e0a0:	d1f9      	bne.n	e096 <__libc_fini_array+0x16>
    e0a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    e0a6:	f000 bb59 	b.w	e75c <_fini>
    e0aa:	bf00      	nop
    e0ac:	0000e76c 	.word	0x0000e76c
    e0b0:	0000e768 	.word	0x0000e768

0000e0b4 <__retarget_lock_acquire_recursive>:
    e0b4:	4770      	bx	lr
    e0b6:	bf00      	nop

0000e0b8 <__retarget_lock_release_recursive>:
    e0b8:	4770      	bx	lr
    e0ba:	bf00      	nop

0000e0bc <_ZL18defaultFilterIndex>:
    e0bc:	045a 0000 0469 0000 654d 756e 3a20 0a0d     Z...i...Menu :..
    e0cc:	0000 0000 2020 2d2d 5320 6c65 6365 2074     ....  -- Select 
    e0dc:	6874 2065 6361 6974 6e6f 0d3a 000a 0000     the action:.....
    e0ec:	2020 3a32 5320 6e65 2064 4446 7320 6174       2: Send FD sta
    e0fc:	646e 7261 2064 656d 7373 6761 2065 6977     ndard message wi
    e10c:	6874 4920 3a44 3020 3478 4135 6120 646e     th ID: 0x45A and
    e11c:	3620 2034 7962 6574 6420 7461 2061 2030      64 byte data 0 
    e12c:	6f74 3620 2e33 0d20 000a 0000 2020 3a33     to 63. .....  3:
    e13c:	5320 6e65 2064 4446 7320 6174 646e 7261      Send FD standar
    e14c:	2064 656d 7373 6761 2065 6977 6874 4920     d message with I
    e15c:	3a44 3020 3478 3936 6120 646e 3620 2034     D: 0x469 and 64 
    e16c:	7962 6574 6420 7461 2061 3231 2038 6f74     byte data 128 to
    e17c:	3120 3139 202e 0a0d 0000 0000 2020 3a61      191. ......  a:
    e18c:	5320 6e65 2064 6f6e 6d72 6c61 7320 6174      Send normal sta
    e19c:	646e 7261 2064 656d 7373 6761 2065 6977     ndard message wi
    e1ac:	6874 4920 3a44 3020 3478 3936 6120 646e     th ID: 0x469 and
    e1bc:	3820 6220 7479 2065 6164 6174 3020 7420      8 byte data 0 t
    e1cc:	206f 2e37 0d20 000a 2020 3a68 4420 7369     o 7. ...  h: Dis
    e1dc:	6c70 7961 6d20 6e65 2075 0a0d 0a0d 0000     play menu ......
    e1ec:	0d0a 4320 4e41 4d20 7365 6173 6567 7220     .. CAN Message r
    e1fc:	6365 6965 6576 2064 202e 6854 2065 6572     eceived . The re
    e20c:	6563 7669 6465 6420 7461 2061 7369 203a     ceived data is: 
    e21c:	0a0d 0000 0020 0000 0a0d 0a0d 0000 0000     .... ...........
    e22c:	2020 4143 204e 7254 6e61 6d73 7369 6973       CAN Transmissi
    e23c:	6e6f 6420 6e6f 2065 0a0d 0000 2020 4143     on done ....  CA
    e24c:	204e 7453 6e61 6164 6472 5420 6172 736e     N Standard Trans
    e25c:	696d 7373 6f69 206e 6f64 656e 0d20 000a     mission done ...
    e26c:	2020 3a30 5320 7465 7320 6174 646e 7261       0: Set standar
    e27c:	2064 6966 746c 7265 4920 2044 3a30 3020     d filter ID 0: 0
    e28c:	3478 4135 202c 7473 726f 2065 6e69 6f74     x45A, store into
    e29c:	5220 2078 7562 6666 7265 202e 0a0d 0000      Rx buffer. ....
    e2ac:	2e2e 682f 6c70 702f 726f 2f74 7068 5f6c     ../hpl/port/hpl_
    e2bc:	7067 6f69 625f 7361 2e65 0068 2e2e 682f     gpio_base.h.../h
    e2cc:	6c61 692f 636e 756c 6564 682f 6c61 775f     al/include/hal_w
    e2dc:	7464 682e 0000 0000 2e2e 682f 6c61 732f     dt.h....../hal/s
    e2ec:	6372 682f 6c61 635f 6c61 6e65 6164 2e72     rc/hal_calendar.
    e2fc:	0063 0000 2e2e 682f 6c61 732f 6372 682f     c...../hal/src/h
    e30c:	6c61 635f 6e61 615f 7973 636e 632e 0000     al_can_async.c..
    e31c:	2e2e 682f 6c61 732f 6372 682f 6c61 635f     ../hal/src/hal_c
    e32c:	6372 735f 6e79 2e63 0063 0000 2e2e 682f     rc_sync.c...../h
    e33c:	6c61 732f 6372 682f 6c61 695f 6332 6d5f     al/src/hal_i2c_m
    e34c:	615f 7973 636e 632e 0000 0000 2e2e 682f     _async.c....../h
    e35c:	6c61 732f 6372 682f 6c61 705f 6d77 632e     al/src/hal_pwm.c
    e36c:	0000 0000 2e2e 682f 6c61 732f 6372 682f     ....../hal/src/h
    e37c:	6c61 715f 7073 5f69 7973 636e 632e 0000     al_qspi_sync.c..
    e38c:	2e2e 682f 6c61 732f 6372 682f 6c61 735f     ../hal/src/hal_s
    e39c:	6970 6d5f 615f 7973 636e 632e 0000 0000     pi_m_async.c....
    e3ac:	2e2e 682f 6c61 732f 6372 682f 6c61 735f     ../hal/src/hal_s
    e3bc:	6970 6d5f 735f 6e79 2e63 0063 2e2e 682f     pi_m_sync.c.../h
    e3cc:	6c61 732f 6372 682f 6c61 745f 6d69 7265     al/src/hal_timer
    e3dc:	632e 0000 2e2e 682f 6c61 752f 6974 736c     .c..../hal/utils
    e3ec:	732f 6372 752f 6974 736c 6c5f 7369 2e74     /src/utils_list.
    e3fc:	0063 0000 0100 0302 0504 0706 0c08 1410     c...............
    e40c:	2018 4030                                   . 0@

0000e410 <_map>:
    e410:	0004 0000 0004 0000 0005 0000 0005 0000     ................
    e420:	0006 0000 0056 0000 0007 0000 0057 0000     ....V.......W...
    e430:	2e2e 682f 6c70 652f 6369 682f 6c70 655f     ../hpl/eic/hpl_e
    e440:	6369 632e 0000 0000                         ic.c....

0000e448 <user_mux_confs>:
    e448:	0100 0000 0000 0000 0000 0000 0000 0000     ................
	...

0000e48c <channel_confs>:
    e48c:	065e 0000 0000 0000 0000 0000 0000 0000     ^...............
	...

0000e4cc <interrupt_cfg>:
	...
    e54c:	2e2e 682f 6c70 712f 7073 2f69 7068 5f6c     ../hpl/qspi/hpl_
    e55c:	7371 6970 632e 0000 2e2e 682f 6c70 722f     qspi.c..../hpl/r
    e56c:	6374 682f 6c70 725f 6374 632e 0000 0000     tc/hpl_rtc.c....
    e57c:	2e2e 682f 6c70 732f 7265 6f63 2f6d 7068     ../hpl/sercom/hp
    e58c:	5f6c 6573 6372 6d6f 632e 0000 3000 4000     l_sercom.c...0.@
    e59c:	3400 4000 2000 4101 4000 4101 0000 4300     .4.@. .A.@.A...C
    e5ac:	0400 4300 0800 4300 0c00 4300               ...C...C...C

0000e5b8 <sercomspi_regs>:
    e5b8:	000c 0020 0000 0002 0000 0000 009f 01ff     .. .............
    e5c8:	0c04 3000 0000 0200 0000 0000 9f00 ff00     ...0............
    e5d8:	0601 0000 2e2e 682f 6c70 742f 2f63 7068     ....../hpl/tc/hp
    e5e8:	5f6c 6374 632e 0000 3800 4000 3c00 4000     l_tc.c...8.@.<.@
    e5f8:	a000 4101 c000 4101 1400 4200 1800 4200     ...A...A...B...B
    e608:	1400 4300 1800 4300                         ...C...C

0000e610 <_usb_ep_cfgs>:
    e610:	0790 2000 0000 0000 0040 0000 07d0 2000     ... ....@...... 
    e620:	0810 2000 0040 0040 0850 2000 0890 2000     ... @.@.P.. ... 
    e630:	0040 0040 08d0 2000 0910 2000 0040 0040     @.@.... ... @.@.
    e640:	0950 2000 0990 2000 0040 0040 0804 0000     P.. ... @.@.....
    e650:	4a25 0000 2e2e 682f 6c70 772f 7464 682f     %J..../hpl/wdt/h
    e660:	6c70 775f 7464 632e 0000 0000 2e2e 682f     pl_wdt.c....../h
    e670:	6c70 702f 726f 2f74 7068 5f6c 7067 6f69     pl/port/hpl_gpio
    e680:	625f 7361 2e65 0068                         _base.h.

0000e688 <n25q256a_interface>:
    e688:	b60d 0000 b6b1 0000 b7c1 0000 b979 0000     ............y...
    e698:	ba09 0000 2e2e 752f 6273 642f 7665 6369     ....../usb/devic
    e6a8:	2f65 7375 6462 2e63 0063 0000               e/usbdc.c...

0000e6b4 <_ZTV9CDC_Class>:
	...
    e6bc:	d3bd 0000 d471 0000 d0b5 0000 d385 0000     ....q...........
    e6cc:	d4ed 0000 d329 0000 d299 0000 d2e9 0000     ....)...........
    e6dc:	d3a5 0000 d3f5 0000                         ........

0000e6e4 <_ZTV6Stream>:
	...
    e6ec:	dc3d 0000 d5bd 0000 d0b5 0000 d0c9 0000     =...............
    e6fc:	dc3d 0000 dc3d 0000 dc3d 0000 7830 2e25     =...=...=...0x%.
    e70c:	5838 0000 0a0d 0000 616e 006e 6e69 0066     8X......nan.inf.
    e71c:	766f 0066                                   ovf.

0000e720 <_ZTV5Print>:
	...
    e728:	dc3d 0000 d5bd 0000 d0b5 0000 d0c9 0000     =...............

0000e738 <_global_impure_ptr>:
    e738:	0118 2000                                   ... 

0000e73c <_init>:
    e73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e73e:	bf00      	nop
    e740:	bcf8      	pop	{r3, r4, r5, r6, r7}
    e742:	bc08      	pop	{r3}
    e744:	469e      	mov	lr, r3
    e746:	4770      	bx	lr

0000e748 <__init_array_start>:
    e748:	0000e061 	.word	0x0000e061

0000e74c <__frame_dummy_init_array_entry>:
    e74c:	00000289 000006e9 0000d56d 0000dc15     ........m.......

0000e75c <_fini>:
    e75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e75e:	bf00      	nop
    e760:	bcf8      	pop	{r3, r4, r5, r6, r7}
    e762:	bc08      	pop	{r3}
    e764:	469e      	mov	lr, r3
    e766:	4770      	bx	lr

0000e768 <__fini_array_start>:
    e768:	00000265 	.word	0x00000265
