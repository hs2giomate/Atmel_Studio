
CAN_Asyn_Class.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005bb4  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00005bb4  00005bb4  00015bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000050c  20000000  00005bbc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0002050c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0002050c  2**0
                  CONTENTS
  5 .bss          000005bc  2000050c  000060c8  0002050c  2**2
                  ALLOC
  6 .stack        00010000  20000ac8  00006684  0002050c  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0002050c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0002053a  2**0
                  CONTENTS, READONLY
  9 .debug_info   0004656a  00000000  00000000  00020593  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000055c7  00000000  00000000  00066afd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00017b53  00000000  00000000  0006c0c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001148  00000000  00000000  00083c17  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001978  00000000  00000000  00084d5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003e2de  00000000  00000000  000866d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001d9c5  00000000  00000000  000c49b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0012c59c  00000000  00000000  000e237a  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00003124  00000000  00000000  0020e918  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	c8 0a 01 20 d5 02 00 00 d1 02 00 00 d1 02 00 00     ... ............
      10:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      2c:	d1 02 00 00 d1 02 00 00 00 00 00 00 d1 02 00 00     ................
      3c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      4c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      5c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      6c:	a9 23 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     .#..............
      7c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      8c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      9c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      ac:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      bc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      cc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      dc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      f4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     104:	d1 02 00 00 75 29 00 00 89 29 00 00 9d 29 00 00     ....u)...)...)..
     114:	b1 29 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     .)..............
     124:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     134:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     144:	d1 02 00 00 c5 29 00 00 d9 29 00 00 ed 29 00 00     .....)...)...)..
     154:	01 2a 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     .*..............
     164:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     174:	d1 02 00 00 d1 02 00 00 e9 1f 00 00 51 3f 00 00     ............Q?..
     184:	5d 3f 00 00 69 3f 00 00 75 3f 00 00 d1 02 00 00     ]?..i?..u?......
     194:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1a4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1b4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1c4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1d4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1e4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1f4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     204:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     214:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     224:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     234:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     244:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     254:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	2000050c 	.word	0x2000050c
     280:	00000000 	.word	0x00000000
     284:	00005bbc 	.word	0x00005bbc

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00005bbc 	.word	0x00005bbc
     2c4:	20000510 	.word	0x20000510
     2c8:	00005bbc 	.word	0x00005bbc
     2cc:	00000000 	.word	0x00000000

000002d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2d0:	e7fe      	b.n	2d0 <Dummy_Handler>
	...

000002d4 <Reset_Handler>:
{
     2d4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2d6:	4b17      	ldr	r3, [pc, #92]	; (334 <Reset_Handler+0x60>)
     2d8:	4a17      	ldr	r2, [pc, #92]	; (338 <Reset_Handler+0x64>)
     2da:	429a      	cmp	r2, r3
     2dc:	d010      	beq.n	300 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2de:	4b17      	ldr	r3, [pc, #92]	; (33c <Reset_Handler+0x68>)
     2e0:	4a14      	ldr	r2, [pc, #80]	; (334 <Reset_Handler+0x60>)
     2e2:	429a      	cmp	r2, r3
     2e4:	d20c      	bcs.n	300 <Reset_Handler+0x2c>
     2e6:	3b01      	subs	r3, #1
     2e8:	1a9b      	subs	r3, r3, r2
     2ea:	f023 0303 	bic.w	r3, r3, #3
     2ee:	3304      	adds	r3, #4
     2f0:	4413      	add	r3, r2
     2f2:	4911      	ldr	r1, [pc, #68]	; (338 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     2f4:	f851 0b04 	ldr.w	r0, [r1], #4
     2f8:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     2fc:	429a      	cmp	r2, r3
     2fe:	d1f9      	bne.n	2f4 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     300:	4b0f      	ldr	r3, [pc, #60]	; (340 <Reset_Handler+0x6c>)
     302:	4a10      	ldr	r2, [pc, #64]	; (344 <Reset_Handler+0x70>)
     304:	429a      	cmp	r2, r3
     306:	d20a      	bcs.n	31e <Reset_Handler+0x4a>
     308:	3b01      	subs	r3, #1
     30a:	1a9b      	subs	r3, r3, r2
     30c:	f023 0303 	bic.w	r3, r3, #3
     310:	3304      	adds	r3, #4
     312:	4413      	add	r3, r2
                *pDest++ = 0;
     314:	2100      	movs	r1, #0
     316:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     31a:	4293      	cmp	r3, r2
     31c:	d1fb      	bne.n	316 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31e:	4a0a      	ldr	r2, [pc, #40]	; (348 <Reset_Handler+0x74>)
     320:	4b0a      	ldr	r3, [pc, #40]	; (34c <Reset_Handler+0x78>)
     322:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     326:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     328:	4b09      	ldr	r3, [pc, #36]	; (350 <Reset_Handler+0x7c>)
     32a:	4798      	blx	r3
        main();
     32c:	4b09      	ldr	r3, [pc, #36]	; (354 <Reset_Handler+0x80>)
     32e:	4798      	blx	r3
     330:	e7fe      	b.n	330 <Reset_Handler+0x5c>
     332:	bf00      	nop
     334:	20000000 	.word	0x20000000
     338:	00005bbc 	.word	0x00005bbc
     33c:	2000050c 	.word	0x2000050c
     340:	20000ac8 	.word	0x20000ac8
     344:	2000050c 	.word	0x2000050c
     348:	e000ed00 	.word	0xe000ed00
     34c:	00000000 	.word	0x00000000
     350:	00004f29 	.word	0x00004f29
     354:	00000539 	.word	0x00000539

00000358 <_ZL19CAN_std_tx_callbackP20can_async_descriptor>:
	 (void)descr;
	 usb.xprint("  CAN Transmission done \r\n");
 }
 
  static  void CAN_std_tx_callback(struct can_async_descriptor *const descr)
   {
     358:	b508      	push	{r3, lr}
	   (void)descr;

	   /* Enable the FDOE and BRSE in register configuration*/
	   hri_can_set_CCCR_INIT_bit(CAN_0.dev.hw);
     35a:	4b0d      	ldr	r3, [pc, #52]	; (390 <_ZL19CAN_std_tx_callbackP20can_async_descriptor+0x38>)
     35c:	681a      	ldr	r2, [r3, #0]
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
     35e:	6993      	ldr	r3, [r2, #24]
     360:	f043 0301 	orr.w	r3, r3, #1
     364:	6193      	str	r3, [r2, #24]
}

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
     366:	6993      	ldr	r3, [r2, #24]
	   while (hri_can_get_CCCR_INIT_bit(CAN_0.dev.hw) == 0)
     368:	f013 0f01 	tst.w	r3, #1
     36c:	d0fb      	beq.n	366 <_ZL19CAN_std_tx_callbackP20can_async_descriptor+0xe>
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
     36e:	6993      	ldr	r3, [r2, #24]
     370:	f043 0302 	orr.w	r3, r3, #2
     374:	6193      	str	r3, [r2, #24]
}

static inline void hri_can_set_CCCR_FDOE_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_FDOE;
     376:	6993      	ldr	r3, [r2, #24]
     378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     37c:	6193      	str	r3, [r2, #24]
}

static inline void hri_can_set_CCCR_BRSE_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_BRSE;
     37e:	6993      	ldr	r3, [r2, #24]
     380:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     384:	6193      	str	r3, [r2, #24]
	   hri_can_set_CCCR_CCE_bit(CAN_0.dev.hw);

	   hri_can_set_CCCR_FDOE_bit(CAN_0.dev.hw);
	   hri_can_set_CCCR_BRSE_bit(CAN_0.dev.hw);

	   usb.xprint("  CAN std Transmission done \r\n");
     386:	4903      	ldr	r1, [pc, #12]	; (394 <_ZL19CAN_std_tx_callbackP20can_async_descriptor+0x3c>)
     388:	4803      	ldr	r0, [pc, #12]	; (398 <_ZL19CAN_std_tx_callbackP20can_async_descriptor+0x40>)
     38a:	4b04      	ldr	r3, [pc, #16]	; (39c <_ZL19CAN_std_tx_callbackP20can_async_descriptor+0x44>)
     38c:	4798      	blx	r3
     38e:	bd08      	pop	{r3, pc}
     390:	20000990 	.word	0x20000990
     394:	00005400 	.word	0x00005400
     398:	20000528 	.word	0x20000528
     39c:	00004e09 	.word	0x00004e09

000003a0 <_ZL17CAN_0_tx_callbackP20can_async_descriptor>:
 {
     3a0:	b508      	push	{r3, lr}
	 usb.xprint("  CAN Transmission done \r\n");
     3a2:	4902      	ldr	r1, [pc, #8]	; (3ac <_ZL17CAN_0_tx_callbackP20can_async_descriptor+0xc>)
     3a4:	4802      	ldr	r0, [pc, #8]	; (3b0 <_ZL17CAN_0_tx_callbackP20can_async_descriptor+0x10>)
     3a6:	4b03      	ldr	r3, [pc, #12]	; (3b4 <_ZL17CAN_0_tx_callbackP20can_async_descriptor+0x14>)
     3a8:	4798      	blx	r3
     3aa:	bd08      	pop	{r3, pc}
     3ac:	00005420 	.word	0x00005420
     3b0:	20000528 	.word	0x20000528
     3b4:	00004e09 	.word	0x00004e09

000003b8 <_ZL17CAN_0_rx_callbackP20can_async_descriptor>:
   }
  static void CAN_0_rx_callback(struct can_async_descriptor *const descr)
   {
     3b8:	b510      	push	{r4, lr}
     3ba:	b090      	sub	sp, #64	; 0x40
     3bc:	f10d 33ff 	add.w	r3, sp, #4294967295
     3c0:	f10d 013f 	add.w	r1, sp, #63	; 0x3f
	   
	   uint8_t            data[64];
	   for (uint8_t  i = 0; i < 64; i++)
	   {
		   data[i]=0;
     3c4:	2200      	movs	r2, #0
     3c6:	f803 2f01 	strb.w	r2, [r3, #1]!
	   for (uint8_t  i = 0; i < 64; i++)
     3ca:	428b      	cmp	r3, r1
     3cc:	d1fb      	bne.n	3c6 <_ZL17CAN_0_rx_callbackP20can_async_descriptor+0xe>
	   }
	  	   msg1.data = data;
     3ce:	4c06      	ldr	r4, [pc, #24]	; (3e8 <_ZL17CAN_0_rx_callbackP20can_async_descriptor+0x30>)
     3d0:	f8c4 d070 	str.w	sp, [r4, #112]	; 0x70
	   can_async_read(descr, &msg1);
     3d4:	f104 0168 	add.w	r1, r4, #104	; 0x68
     3d8:	4b04      	ldr	r3, [pc, #16]	; (3ec <_ZL17CAN_0_rx_callbackP20can_async_descriptor+0x34>)
     3da:	4798      	blx	r3
		gotMessage=true;
     3dc:	2301      	movs	r3, #1
     3de:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
	  
   }
     3e2:	b010      	add	sp, #64	; 0x40
     3e4:	bd10      	pop	{r4, pc}
     3e6:	bf00      	nop
     3e8:	20000528 	.word	0x20000528
     3ec:	000011a5 	.word	0x000011a5

000003f0 <_Z14print_Message2v>:
			//usb.xprint("\t");
	    }
	    usb.xprint("\r\n\r\n");
	    //return;
   }
  void	print_Message2(void){
     3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     3f4:	b083      	sub	sp, #12
	
	      usb.xprint("CAN Message received . The received data is: \r\n");
     3f6:	4c24      	ldr	r4, [pc, #144]	; (488 <_Z14print_Message2v+0x98>)
     3f8:	4924      	ldr	r1, [pc, #144]	; (48c <_Z14print_Message2v+0x9c>)
     3fa:	4620      	mov	r0, r4
     3fc:	4b24      	ldr	r3, [pc, #144]	; (490 <_Z14print_Message2v+0xa0>)
     3fe:	4798      	blx	r3
	      uint8_t			*dataPtr=msg1.data;
     400:	6f21      	ldr	r1, [r4, #112]	; 0x70
	      uint8_t			dataValue=*dataPtr;
     402:	f891 9000 	ldrb.w	r9, [r1]
		 for (uint8_t i = 1; i < msg1.len; i++) {
     406:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
     40a:	2a01      	cmp	r2, #1
     40c:	bfc8      	it	gt
     40e:	2301      	movgt	r3, #1
     410:	dd07      	ble.n	422 <_Z14print_Message2v+0x32>
			 
				 dataValue+=msg1.data[i];
     412:	5cc8      	ldrb	r0, [r1, r3]
     414:	4448      	add	r0, r9
     416:	fa5f f980 	uxtb.w	r9, r0
		 for (uint8_t i = 1; i < msg1.len; i++) {
     41a:	3301      	adds	r3, #1
     41c:	b2db      	uxtb	r3, r3
     41e:	4293      	cmp	r3, r2
     420:	dbf7      	blt.n	412 <_Z14print_Message2v+0x22>
		 }
	      for (uint8_t i = 0; i < msg1.len; i++) {
     422:	b34a      	cbz	r2, 478 <_Z14print_Message2v+0x88>
     424:	2400      	movs	r4, #0
		  
		       usb.xprint("0X ");
     426:	f8df b084 	ldr.w	fp, [pc, #132]	; 4ac <_Z14print_Message2v+0xbc>
     42a:	f8df 805c 	ldr.w	r8, [pc, #92]	; 488 <_Z14print_Message2v+0x98>
		        delay_ms(1);
     42e:	2701      	movs	r7, #1
		       usb.xprint("0X ");
     430:	4659      	mov	r1, fp
     432:	4640      	mov	r0, r8
     434:	f8df a058 	ldr.w	sl, [pc, #88]	; 490 <_Z14print_Message2v+0xa0>
     438:	47d0      	blx	sl
		        delay_ms(1);
     43a:	4638      	mov	r0, r7
     43c:	4d15      	ldr	r5, [pc, #84]	; (494 <_Z14print_Message2v+0xa4>)
     43e:	47a8      	blx	r5
				char buffer[]="   ";
     440:	ae02      	add	r6, sp, #8
     442:	4b15      	ldr	r3, [pc, #84]	; (498 <_Z14print_Message2v+0xa8>)
     444:	f846 3d04 	str.w	r3, [r6, #-4]!
				utoa(dataValue,&buffer[0],10);
     448:	220a      	movs	r2, #10
     44a:	4631      	mov	r1, r6
     44c:	4648      	mov	r0, r9
     44e:	4b13      	ldr	r3, [pc, #76]	; (49c <_Z14print_Message2v+0xac>)
     450:	4798      	blx	r3
			    delay_ms(1);
     452:	4638      	mov	r0, r7
     454:	47a8      	blx	r5
				usb.xprint(&buffer[0]);
     456:	4631      	mov	r1, r6
     458:	4640      	mov	r0, r8
     45a:	4b11      	ldr	r3, [pc, #68]	; (4a0 <_Z14print_Message2v+0xb0>)
     45c:	4798      	blx	r3
		      delay_ms(1);
     45e:	4638      	mov	r0, r7
     460:	47a8      	blx	r5
		 
		      usb.xprint(" \t");
     462:	4910      	ldr	r1, [pc, #64]	; (4a4 <_Z14print_Message2v+0xb4>)
     464:	4640      	mov	r0, r8
     466:	47d0      	blx	sl
			   delay_ms(1);
     468:	4638      	mov	r0, r7
     46a:	47a8      	blx	r5
	      for (uint8_t i = 0; i < msg1.len; i++) {
     46c:	3401      	adds	r4, #1
     46e:	b2e4      	uxtb	r4, r4
     470:	f898 3074 	ldrb.w	r3, [r8, #116]	; 0x74
     474:	429c      	cmp	r4, r3
     476:	dbdb      	blt.n	430 <_Z14print_Message2v+0x40>
		
	      }
	      usb.xprint("\r\n\r\n");
     478:	490b      	ldr	r1, [pc, #44]	; (4a8 <_Z14print_Message2v+0xb8>)
     47a:	4803      	ldr	r0, [pc, #12]	; (488 <_Z14print_Message2v+0x98>)
     47c:	4b04      	ldr	r3, [pc, #16]	; (490 <_Z14print_Message2v+0xa0>)
     47e:	4798      	blx	r3
	 
      }
     480:	b003      	add	sp, #12
     482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     486:	bf00      	nop
     488:	20000528 	.word	0x20000528
     48c:	0000543c 	.word	0x0000543c
     490:	00004e09 	.word	0x00004e09
     494:	0000129d 	.word	0x0000129d
     498:	00202020 	.word	0x00202020
     49c:	000052dd 	.word	0x000052dd
     4a0:	00004e8d 	.word	0x00004e8d
     4a4:	00005484 	.word	0x00005484
     4a8:	0000546c 	.word	0x0000546c
     4ac:	00005480 	.word	0x00005480

000004b0 <_Z12display_menuv>:
			break;
		}
	}
}
 void display_menu(void)
{
     4b0:	b538      	push	{r3, r4, r5, lr}
	usb.xprint("Menu :\r\n");
     4b2:	4d13      	ldr	r5, [pc, #76]	; (500 <_Z12display_menuv+0x50>)
     4b4:	4913      	ldr	r1, [pc, #76]	; (504 <_Z12display_menuv+0x54>)
     4b6:	4628      	mov	r0, r5
     4b8:	4c13      	ldr	r4, [pc, #76]	; (508 <_Z12display_menuv+0x58>)
     4ba:	47a0      	blx	r4
	usb.xprint("  -- Select the action:\r\n");
     4bc:	4913      	ldr	r1, [pc, #76]	; (50c <_Z12display_menuv+0x5c>)
     4be:	4628      	mov	r0, r5
     4c0:	47a0      	blx	r4
	usb.xprint("  0: Set standard filter ID 0: 0x45A, store into Rx buffer. \r\n");
     4c2:	4913      	ldr	r1, [pc, #76]	; (510 <_Z12display_menuv+0x60>)
     4c4:	4628      	mov	r0, r5
     4c6:	47a0      	blx	r4
	usb.xprint("  1: Set standard filter ID 1: 0x469, store into Rx FIFO 0. \r\n");
     4c8:	4912      	ldr	r1, [pc, #72]	; (514 <_Z12display_menuv+0x64>)
     4ca:	4628      	mov	r0, r5
     4cc:	47a0      	blx	r4
	usb.xprint("  2: Send FD standard message with ID: 0x45A and 64 byte data 0 to 63. \r\n");
     4ce:	4912      	ldr	r1, [pc, #72]	; (518 <_Z12display_menuv+0x68>)
     4d0:	4628      	mov	r0, r5
     4d2:	47a0      	blx	r4
	usb.xprint("  3: Send FD standard message with ID: 0x469 and 64 byte data 128 to 191. \r\n");
     4d4:	4911      	ldr	r1, [pc, #68]	; (51c <_Z12display_menuv+0x6c>)
     4d6:	4628      	mov	r0, r5
     4d8:	47a0      	blx	r4
	usb.xprint("  4: Set extended filter ID 0: 0x100000A5, store into Rx buffer. \r\n");
     4da:	4911      	ldr	r1, [pc, #68]	; (520 <_Z12display_menuv+0x70>)
     4dc:	4628      	mov	r0, r5
     4de:	47a0      	blx	r4
	usb.xprint("  5: Set extended filter ID 1: 0x10000096, store into Rx FIFO 1. \r\n");
     4e0:	4910      	ldr	r1, [pc, #64]	; (524 <_Z12display_menuv+0x74>)
     4e2:	4628      	mov	r0, r5
     4e4:	47a0      	blx	r4
	usb.xprint("  6: Send FD extended message with ID: 0x100000A5 and 64 byte data 0 to 63. \r\n");
     4e6:	4910      	ldr	r1, [pc, #64]	; (528 <_Z12display_menuv+0x78>)
     4e8:	4628      	mov	r0, r5
     4ea:	47a0      	blx	r4
	usb.xprint("  7: Send FD extended message with ID: 0x10000096 and 64 byte data 128 to 191. \r\n");
     4ec:	490f      	ldr	r1, [pc, #60]	; (52c <_Z12display_menuv+0x7c>)
     4ee:	4628      	mov	r0, r5
     4f0:	47a0      	blx	r4
	usb.xprint("  a: Send normal standard message with ID: 0x469 and 8 byte data 0 to 7. \r\n");
     4f2:	490f      	ldr	r1, [pc, #60]	; (530 <_Z12display_menuv+0x80>)
     4f4:	4628      	mov	r0, r5
     4f6:	47a0      	blx	r4
	usb.xprint("  h: Display menu \r\n\r\n");
     4f8:	490e      	ldr	r1, [pc, #56]	; (534 <_Z12display_menuv+0x84>)
     4fa:	4628      	mov	r0, r5
     4fc:	47a0      	blx	r4
     4fe:	bd38      	pop	{r3, r4, r5, pc}
     500:	20000528 	.word	0x20000528
     504:	00005488 	.word	0x00005488
     508:	00004e09 	.word	0x00004e09
     50c:	00005494 	.word	0x00005494
     510:	000054b0 	.word	0x000054b0
     514:	000054f0 	.word	0x000054f0
     518:	00005530 	.word	0x00005530
     51c:	0000557c 	.word	0x0000557c
     520:	000055cc 	.word	0x000055cc
     524:	00005610 	.word	0x00005610
     528:	00005654 	.word	0x00005654
     52c:	000056a4 	.word	0x000056a4
     530:	000056f8 	.word	0x000056f8
     534:	00005744 	.word	0x00005744

00000538 <main>:
{
     538:	b5f0      	push	{r4, r5, r6, r7, lr}
     53a:	b0ab      	sub	sp, #172	; 0xac
	atmel_start_init();
     53c:	4bb2      	ldr	r3, [pc, #712]	; (808 <main+0x2d0>)
     53e:	4798      	blx	r3
		usb.init();
     540:	48b2      	ldr	r0, [pc, #712]	; (80c <main+0x2d4>)
     542:	4bb3      	ldr	r3, [pc, #716]	; (810 <main+0x2d8>)
     544:	4798      	blx	r3
		delay_ms(200);
     546:	20c8      	movs	r0, #200	; 0xc8
     548:	4bb2      	ldr	r3, [pc, #712]	; (814 <main+0x2dc>)
     54a:	4798      	blx	r3
	display_menu();
     54c:	4bb2      	ldr	r3, [pc, #712]	; (818 <main+0x2e0>)
     54e:	4798      	blx	r3
     550:	a913      	add	r1, sp, #76	; 0x4c
     552:	a823      	add	r0, sp, #140	; 0x8c
     554:	460b      	mov	r3, r1
		tx_message_0[i] = i;
     556:	1a5a      	subs	r2, r3, r1
     558:	f803 2b01 	strb.w	r2, [r3], #1
	for (uint8_t i = 0; i < 64; i++) {
     55c:	4283      	cmp	r3, r0
     55e:	d1fa      	bne.n	556 <main+0x1e>
     560:	f10d 020b 	add.w	r2, sp, #11
     564:	2380      	movs	r3, #128	; 0x80
		tx_message_1[j - 128] = j;
     566:	f802 3f01 	strb.w	r3, [r2, #1]!
	for (uint8_t j = 128; j < 192; j++) {
     56a:	3301      	adds	r3, #1
     56c:	b2db      	uxtb	r3, r3
     56e:	2bc0      	cmp	r3, #192	; 0xc0
     570:	d1f9      	bne.n	566 <main+0x2e>
     572:	a901      	add	r1, sp, #4
     574:	a803      	add	r0, sp, #12
     576:	460b      	mov	r3, r1
		tx_message_2[k] = k;
     578:	1a5a      	subs	r2, r3, r1
     57a:	f803 2b01 	strb.w	r2, [r3], #1
	for (uint8_t k = 0; k < 8; k++) {
     57e:	4283      	cmp	r3, r0
     580:	d1fa      	bne.n	578 <main+0x40>
		if (gotMessage)
     582:	4ca2      	ldr	r4, [pc, #648]	; (80c <main+0x2d4>)
			print_Message2();
     584:	4fa5      	ldr	r7, [pc, #660]	; (81c <main+0x2e4>)
			gotMessage=false;
     586:	4626      	mov	r6, r4
     588:	e001      	b.n	58e <main+0x56>
			display_menu();
     58a:	4ba3      	ldr	r3, [pc, #652]	; (818 <main+0x2e0>)
     58c:	4798      	blx	r3
		usb.read(&key,1);
     58e:	4da4      	ldr	r5, [pc, #656]	; (820 <main+0x2e8>)
		if (gotMessage)
     590:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
     594:	b11b      	cbz	r3, 59e <main+0x66>
			print_Message2();
     596:	47b8      	blx	r7
			gotMessage=false;
     598:	2300      	movs	r3, #0
     59a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		key=0xff;
     59e:	a92a      	add	r1, sp, #168	; 0xa8
     5a0:	23ff      	movs	r3, #255	; 0xff
     5a2:	f801 3d01 	strb.w	r3, [r1, #-1]!
		usb.read(&key,1);
     5a6:	2201      	movs	r2, #1
     5a8:	4630      	mov	r0, r6
     5aa:	47a8      	blx	r5
		delay_ms(100);
     5ac:	2064      	movs	r0, #100	; 0x64
     5ae:	4b99      	ldr	r3, [pc, #612]	; (814 <main+0x2dc>)
     5b0:	4798      	blx	r3
		switch (key) {
     5b2:	f89d 30a7 	ldrb.w	r3, [sp, #167]	; 0xa7
     5b6:	3b30      	subs	r3, #48	; 0x30
     5b8:	2b38      	cmp	r3, #56	; 0x38
     5ba:	d8e9      	bhi.n	590 <main+0x58>
     5bc:	a201      	add	r2, pc, #4	; (adr r2, 5c4 <main+0x8c>)
     5be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     5c2:	bf00      	nop
     5c4:	000006a9 	.word	0x000006a9
     5c8:	000006d3 	.word	0x000006d3
     5cc:	000006fd 	.word	0x000006fd
     5d0:	0000073b 	.word	0x0000073b
     5d4:	00000779 	.word	0x00000779
     5d8:	000007a1 	.word	0x000007a1
     5dc:	000007cb 	.word	0x000007cb
     5e0:	00000869 	.word	0x00000869
     5e4:	00000591 	.word	0x00000591
     5e8:	00000591 	.word	0x00000591
     5ec:	00000591 	.word	0x00000591
     5f0:	00000591 	.word	0x00000591
     5f4:	00000591 	.word	0x00000591
     5f8:	00000591 	.word	0x00000591
     5fc:	00000591 	.word	0x00000591
     600:	00000591 	.word	0x00000591
     604:	00000591 	.word	0x00000591
     608:	00000591 	.word	0x00000591
     60c:	00000591 	.word	0x00000591
     610:	00000591 	.word	0x00000591
     614:	00000591 	.word	0x00000591
     618:	00000591 	.word	0x00000591
     61c:	00000591 	.word	0x00000591
     620:	00000591 	.word	0x00000591
     624:	00000591 	.word	0x00000591
     628:	00000591 	.word	0x00000591
     62c:	00000591 	.word	0x00000591
     630:	00000591 	.word	0x00000591
     634:	00000591 	.word	0x00000591
     638:	00000591 	.word	0x00000591
     63c:	00000591 	.word	0x00000591
     640:	00000591 	.word	0x00000591
     644:	00000591 	.word	0x00000591
     648:	00000591 	.word	0x00000591
     64c:	00000591 	.word	0x00000591
     650:	00000591 	.word	0x00000591
     654:	00000591 	.word	0x00000591
     658:	00000591 	.word	0x00000591
     65c:	00000591 	.word	0x00000591
     660:	00000591 	.word	0x00000591
     664:	00000591 	.word	0x00000591
     668:	00000591 	.word	0x00000591
     66c:	00000591 	.word	0x00000591
     670:	00000591 	.word	0x00000591
     674:	00000591 	.word	0x00000591
     678:	00000591 	.word	0x00000591
     67c:	00000591 	.word	0x00000591
     680:	00000591 	.word	0x00000591
     684:	00000591 	.word	0x00000591
     688:	000008a5 	.word	0x000008a5
     68c:	00000591 	.word	0x00000591
     690:	00000591 	.word	0x00000591
     694:	00000591 	.word	0x00000591
     698:	00000591 	.word	0x00000591
     69c:	0000090f 	.word	0x0000090f
     6a0:	00000591 	.word	0x00000591
     6a4:	0000058b 	.word	0x0000058b
			usb.xprint("  0: Set standard filter ID 0: 0x45A, store into Rx buffer. \r\n");
     6a8:	495e      	ldr	r1, [pc, #376]	; (824 <main+0x2ec>)
     6aa:	4630      	mov	r0, r6
     6ac:	4b5e      	ldr	r3, [pc, #376]	; (828 <main+0x2f0>)
     6ae:	4798      	blx	r3
			can_async_register_callback(&CAN_0, CAN_ASYNC_RX_CB, (FUNC_PTR)CAN_0_rx_callback);
     6b0:	4d5e      	ldr	r5, [pc, #376]	; (82c <main+0x2f4>)
     6b2:	4a5f      	ldr	r2, [pc, #380]	; (830 <main+0x2f8>)
     6b4:	2100      	movs	r1, #0
     6b6:	4628      	mov	r0, r5
     6b8:	4b5e      	ldr	r3, [pc, #376]	; (834 <main+0x2fc>)
     6ba:	4798      	blx	r3
			filter.id   = 0x45A;
     6bc:	f240 435a 	movw	r3, #1114	; 0x45a
     6c0:	9323      	str	r3, [sp, #140]	; 0x8c
			filter.mask = 0;
     6c2:	2100      	movs	r1, #0
     6c4:	9124      	str	r1, [sp, #144]	; 0x90
			can_async_set_filter(&CAN_0, 0, CAN_FMT_STDID, &filter);
     6c6:	ab23      	add	r3, sp, #140	; 0x8c
     6c8:	460a      	mov	r2, r1
     6ca:	4628      	mov	r0, r5
     6cc:	4d5a      	ldr	r5, [pc, #360]	; (838 <main+0x300>)
     6ce:	47a8      	blx	r5
			break;
     6d0:	e75d      	b.n	58e <main+0x56>
			usb.xprint("  1: Set standard filter ID 1: 0x469, store into Rx FIFO 0. \r\n");
     6d2:	495a      	ldr	r1, [pc, #360]	; (83c <main+0x304>)
     6d4:	4630      	mov	r0, r6
     6d6:	4b54      	ldr	r3, [pc, #336]	; (828 <main+0x2f0>)
     6d8:	4798      	blx	r3
			can_async_register_callback(&CAN_0, CAN_ASYNC_RX_CB, (FUNC_PTR)CAN_0_rx_callback);
     6da:	4d54      	ldr	r5, [pc, #336]	; (82c <main+0x2f4>)
     6dc:	4a54      	ldr	r2, [pc, #336]	; (830 <main+0x2f8>)
     6de:	2100      	movs	r1, #0
     6e0:	4628      	mov	r0, r5
     6e2:	4b54      	ldr	r3, [pc, #336]	; (834 <main+0x2fc>)
     6e4:	4798      	blx	r3
			filter.id   = 0x469;
     6e6:	f240 4369 	movw	r3, #1129	; 0x469
     6ea:	9323      	str	r3, [sp, #140]	; 0x8c
			filter.mask = 0;
     6ec:	2200      	movs	r2, #0
     6ee:	9224      	str	r2, [sp, #144]	; 0x90
			can_async_set_filter(&CAN_0, 1, CAN_FMT_STDID, &filter);
     6f0:	ab23      	add	r3, sp, #140	; 0x8c
     6f2:	2101      	movs	r1, #1
     6f4:	4628      	mov	r0, r5
     6f6:	4d50      	ldr	r5, [pc, #320]	; (838 <main+0x300>)
     6f8:	47a8      	blx	r5
			break;
     6fa:	e748      	b.n	58e <main+0x56>
			usb.xprint("  2: Send standard message with ID: 0x45A and 64 byte data 0 to 63. \r\n");
     6fc:	4950      	ldr	r1, [pc, #320]	; (840 <main+0x308>)
     6fe:	4630      	mov	r0, r6
     700:	4b49      	ldr	r3, [pc, #292]	; (828 <main+0x2f0>)
     702:	4798      	blx	r3
			msg.id   = 0x45A;
     704:	f240 435a 	movw	r3, #1114	; 0x45a
     708:	9325      	str	r3, [sp, #148]	; 0x94
			msg.type = CAN_TYPE_DATA;
     70a:	2300      	movs	r3, #0
     70c:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
			msg.data = tx_message_0;
     710:	aa13      	add	r2, sp, #76	; 0x4c
     712:	9227      	str	r2, [sp, #156]	; 0x9c
			msg.len  = 8;
     714:	2208      	movs	r2, #8
     716:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
			msg.fmt  = CAN_FMT_STDID;
     71a:	f88d 30a1 	strb.w	r3, [sp, #161]	; 0xa1
			can_async_register_callback(&CAN_0, CAN_ASYNC_TX_CB, (FUNC_PTR)CAN_0_tx_callback);
     71e:	4d43      	ldr	r5, [pc, #268]	; (82c <main+0x2f4>)
     720:	4a48      	ldr	r2, [pc, #288]	; (844 <main+0x30c>)
     722:	2101      	movs	r1, #1
     724:	4628      	mov	r0, r5
     726:	4b43      	ldr	r3, [pc, #268]	; (834 <main+0x2fc>)
     728:	4798      	blx	r3
			can_async_enable(&CAN_0);
     72a:	4628      	mov	r0, r5
     72c:	4b46      	ldr	r3, [pc, #280]	; (848 <main+0x310>)
     72e:	4798      	blx	r3
			can_async_write(&CAN_0, &msg);
     730:	a925      	add	r1, sp, #148	; 0x94
     732:	4628      	mov	r0, r5
     734:	4b45      	ldr	r3, [pc, #276]	; (84c <main+0x314>)
     736:	4798      	blx	r3
			break;
     738:	e729      	b.n	58e <main+0x56>
			usb.xprint("  3: Send standard message with ID: 0x469 and 64 byte data 128 to 191. \r\n");
     73a:	4945      	ldr	r1, [pc, #276]	; (850 <main+0x318>)
     73c:	4630      	mov	r0, r6
     73e:	4b3a      	ldr	r3, [pc, #232]	; (828 <main+0x2f0>)
     740:	4798      	blx	r3
			msg.id   = 0x469;
     742:	f240 4369 	movw	r3, #1129	; 0x469
     746:	9325      	str	r3, [sp, #148]	; 0x94
			msg.type = CAN_TYPE_DATA;
     748:	2300      	movs	r3, #0
     74a:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
			msg.data = tx_message_1;
     74e:	aa03      	add	r2, sp, #12
     750:	9227      	str	r2, [sp, #156]	; 0x9c
			msg.len  = 8;
     752:	2208      	movs	r2, #8
     754:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
			msg.fmt  = CAN_FMT_STDID;
     758:	f88d 30a1 	strb.w	r3, [sp, #161]	; 0xa1
			can_async_register_callback(&CAN_0, CAN_ASYNC_TX_CB, (FUNC_PTR)CAN_0_tx_callback);
     75c:	4d33      	ldr	r5, [pc, #204]	; (82c <main+0x2f4>)
     75e:	4a39      	ldr	r2, [pc, #228]	; (844 <main+0x30c>)
     760:	2101      	movs	r1, #1
     762:	4628      	mov	r0, r5
     764:	4b33      	ldr	r3, [pc, #204]	; (834 <main+0x2fc>)
     766:	4798      	blx	r3
			can_async_enable(&CAN_0);
     768:	4628      	mov	r0, r5
     76a:	4b37      	ldr	r3, [pc, #220]	; (848 <main+0x310>)
     76c:	4798      	blx	r3
			can_async_write(&CAN_0, &msg);
     76e:	a925      	add	r1, sp, #148	; 0x94
     770:	4628      	mov	r0, r5
     772:	4b36      	ldr	r3, [pc, #216]	; (84c <main+0x314>)
     774:	4798      	blx	r3
			break;
     776:	e70a      	b.n	58e <main+0x56>
			usb.xprint("  4: Set extended filter ID 0: 0x100000A5, store into Rx buffer. \r\n");
     778:	4936      	ldr	r1, [pc, #216]	; (854 <main+0x31c>)
     77a:	4630      	mov	r0, r6
     77c:	4b2a      	ldr	r3, [pc, #168]	; (828 <main+0x2f0>)
     77e:	4798      	blx	r3
			can_async_register_callback(&CAN_0, CAN_ASYNC_RX_CB, (FUNC_PTR)CAN_0_rx_callback);
     780:	4d2a      	ldr	r5, [pc, #168]	; (82c <main+0x2f4>)
     782:	4a2b      	ldr	r2, [pc, #172]	; (830 <main+0x2f8>)
     784:	2100      	movs	r1, #0
     786:	4628      	mov	r0, r5
     788:	4b2a      	ldr	r3, [pc, #168]	; (834 <main+0x2fc>)
     78a:	4798      	blx	r3
			filter.id   = 0x100000A5;
     78c:	4b32      	ldr	r3, [pc, #200]	; (858 <main+0x320>)
     78e:	9323      	str	r3, [sp, #140]	; 0x8c
			filter.mask = 0;
     790:	2100      	movs	r1, #0
     792:	9124      	str	r1, [sp, #144]	; 0x90
			can_async_set_filter(&CAN_0, 0, CAN_FMT_EXTID, &filter);
     794:	ab23      	add	r3, sp, #140	; 0x8c
     796:	2201      	movs	r2, #1
     798:	4628      	mov	r0, r5
     79a:	4d27      	ldr	r5, [pc, #156]	; (838 <main+0x300>)
     79c:	47a8      	blx	r5
			break;
     79e:	e6f6      	b.n	58e <main+0x56>
			usb.xprint("  5: Set extended filter ID 1: 0x10000096, store into Rx FIFO 1. \r\n");
     7a0:	492e      	ldr	r1, [pc, #184]	; (85c <main+0x324>)
     7a2:	4630      	mov	r0, r6
     7a4:	4b20      	ldr	r3, [pc, #128]	; (828 <main+0x2f0>)
     7a6:	4798      	blx	r3
			can_async_register_callback(&CAN_0, CAN_ASYNC_RX_CB, (FUNC_PTR)CAN_0_rx_callback);
     7a8:	4d20      	ldr	r5, [pc, #128]	; (82c <main+0x2f4>)
     7aa:	4a21      	ldr	r2, [pc, #132]	; (830 <main+0x2f8>)
     7ac:	2100      	movs	r1, #0
     7ae:	4628      	mov	r0, r5
     7b0:	4b20      	ldr	r3, [pc, #128]	; (834 <main+0x2fc>)
     7b2:	4798      	blx	r3
			filter.id   = 0x10000096;
     7b4:	4b2a      	ldr	r3, [pc, #168]	; (860 <main+0x328>)
     7b6:	9323      	str	r3, [sp, #140]	; 0x8c
			filter.mask = 0;
     7b8:	2300      	movs	r3, #0
     7ba:	9324      	str	r3, [sp, #144]	; 0x90
			can_async_set_filter(&CAN_0, 1, CAN_FMT_EXTID, &filter);
     7bc:	ab23      	add	r3, sp, #140	; 0x8c
     7be:	2201      	movs	r2, #1
     7c0:	4611      	mov	r1, r2
     7c2:	4628      	mov	r0, r5
     7c4:	4d1c      	ldr	r5, [pc, #112]	; (838 <main+0x300>)
     7c6:	47a8      	blx	r5
			break;
     7c8:	e6e1      	b.n	58e <main+0x56>
			usb.xprint("  6: Send extended message with ID: 0x100000A5 and 64 byte data 0 to 63. \r\n");
     7ca:	4926      	ldr	r1, [pc, #152]	; (864 <main+0x32c>)
     7cc:	4630      	mov	r0, r6
     7ce:	4b16      	ldr	r3, [pc, #88]	; (828 <main+0x2f0>)
     7d0:	4798      	blx	r3
			msg.id   = 0x100000A5;
     7d2:	4b21      	ldr	r3, [pc, #132]	; (858 <main+0x320>)
     7d4:	9325      	str	r3, [sp, #148]	; 0x94
			msg.type = CAN_TYPE_DATA;
     7d6:	2300      	movs	r3, #0
     7d8:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
			msg.data = tx_message_0;
     7dc:	ab13      	add	r3, sp, #76	; 0x4c
     7de:	9327      	str	r3, [sp, #156]	; 0x9c
			msg.len  = 8;
     7e0:	2308      	movs	r3, #8
     7e2:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
			msg.fmt  = CAN_FMT_EXTID;
     7e6:	2101      	movs	r1, #1
     7e8:	f88d 10a1 	strb.w	r1, [sp, #161]	; 0xa1
			can_async_register_callback(&CAN_0, CAN_ASYNC_TX_CB, (FUNC_PTR)CAN_0_tx_callback);
     7ec:	4d0f      	ldr	r5, [pc, #60]	; (82c <main+0x2f4>)
     7ee:	4a15      	ldr	r2, [pc, #84]	; (844 <main+0x30c>)
     7f0:	4628      	mov	r0, r5
     7f2:	4b10      	ldr	r3, [pc, #64]	; (834 <main+0x2fc>)
     7f4:	4798      	blx	r3
			can_async_enable(&CAN_0);
     7f6:	4628      	mov	r0, r5
     7f8:	4b13      	ldr	r3, [pc, #76]	; (848 <main+0x310>)
     7fa:	4798      	blx	r3
			can_async_write(&CAN_0, &msg);
     7fc:	a925      	add	r1, sp, #148	; 0x94
     7fe:	4628      	mov	r0, r5
     800:	4b12      	ldr	r3, [pc, #72]	; (84c <main+0x314>)
     802:	4798      	blx	r3
			break;
     804:	e6c3      	b.n	58e <main+0x56>
     806:	bf00      	nop
     808:	000009d1 	.word	0x000009d1
     80c:	20000528 	.word	0x20000528
     810:	00004c39 	.word	0x00004c39
     814:	0000129d 	.word	0x0000129d
     818:	000004b1 	.word	0x000004b1
     81c:	000003f1 	.word	0x000003f1
     820:	00004d15 	.word	0x00004d15
     824:	000054b0 	.word	0x000054b0
     828:	00004e09 	.word	0x00004e09
     82c:	20000990 	.word	0x20000990
     830:	000003b9 	.word	0x000003b9
     834:	00001205 	.word	0x00001205
     838:	00001255 	.word	0x00001255
     83c:	000054f0 	.word	0x000054f0
     840:	0000575c 	.word	0x0000575c
     844:	000003a1 	.word	0x000003a1
     848:	0000117d 	.word	0x0000117d
     84c:	000011d5 	.word	0x000011d5
     850:	000057a4 	.word	0x000057a4
     854:	000055cc 	.word	0x000055cc
     858:	100000a5 	.word	0x100000a5
     85c:	00005610 	.word	0x00005610
     860:	10000096 	.word	0x10000096
     864:	000057f0 	.word	0x000057f0
			usb.xprint("  7: Send extended message with ID: 0x10000096 and 64 byte data 128 to 191. \r\n");
     868:	4943      	ldr	r1, [pc, #268]	; (978 <main+0x440>)
     86a:	4630      	mov	r0, r6
     86c:	4b43      	ldr	r3, [pc, #268]	; (97c <main+0x444>)
     86e:	4798      	blx	r3
			msg.id   = 0x10000096;
     870:	4b43      	ldr	r3, [pc, #268]	; (980 <main+0x448>)
     872:	9325      	str	r3, [sp, #148]	; 0x94
			msg.type = CAN_TYPE_DATA;
     874:	2300      	movs	r3, #0
     876:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
			msg.data = tx_message_1;
     87a:	ab03      	add	r3, sp, #12
     87c:	9327      	str	r3, [sp, #156]	; 0x9c
			msg.len  = 8;
     87e:	2308      	movs	r3, #8
     880:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
			msg.fmt  = CAN_FMT_EXTID;
     884:	2101      	movs	r1, #1
     886:	f88d 10a1 	strb.w	r1, [sp, #161]	; 0xa1
			can_async_register_callback(&CAN_0, CAN_ASYNC_TX_CB, (FUNC_PTR)CAN_0_tx_callback);
     88a:	4d3e      	ldr	r5, [pc, #248]	; (984 <main+0x44c>)
     88c:	4a3e      	ldr	r2, [pc, #248]	; (988 <main+0x450>)
     88e:	4628      	mov	r0, r5
     890:	4b3e      	ldr	r3, [pc, #248]	; (98c <main+0x454>)
     892:	4798      	blx	r3
			can_async_enable(&CAN_0);
     894:	4628      	mov	r0, r5
     896:	4b3e      	ldr	r3, [pc, #248]	; (990 <main+0x458>)
     898:	4798      	blx	r3
			can_async_write(&CAN_0, &msg);
     89a:	a925      	add	r1, sp, #148	; 0x94
     89c:	4628      	mov	r0, r5
     89e:	4b3d      	ldr	r3, [pc, #244]	; (994 <main+0x45c>)
     8a0:	4798      	blx	r3
			break;
     8a2:	e674      	b.n	58e <main+0x56>
			usb.xprint("  a: Send normal standard message with ID: 0x469 and 8 byte data 0 to 7. \r\n");
     8a4:	493c      	ldr	r1, [pc, #240]	; (998 <main+0x460>)
     8a6:	4630      	mov	r0, r6
     8a8:	4b34      	ldr	r3, [pc, #208]	; (97c <main+0x444>)
     8aa:	4798      	blx	r3
			msg.id   = 0x469;
     8ac:	f240 4369 	movw	r3, #1129	; 0x469
     8b0:	9325      	str	r3, [sp, #148]	; 0x94
			msg.type = CAN_TYPE_DATA;
     8b2:	2300      	movs	r3, #0
     8b4:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
			msg.data = tx_message_2;
     8b8:	aa01      	add	r2, sp, #4
     8ba:	9227      	str	r2, [sp, #156]	; 0x9c
			msg.len  = 8;
     8bc:	2208      	movs	r2, #8
     8be:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
			msg.fmt  = CAN_FMT_STDID;
     8c2:	f88d 30a1 	strb.w	r3, [sp, #161]	; 0xa1
			hri_can_set_CCCR_INIT_bit(CAN_0.dev.hw);
     8c6:	4b2f      	ldr	r3, [pc, #188]	; (984 <main+0x44c>)
     8c8:	681a      	ldr	r2, [r3, #0]
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
     8ca:	6993      	ldr	r3, [r2, #24]
     8cc:	f043 0301 	orr.w	r3, r3, #1
     8d0:	6193      	str	r3, [r2, #24]
	tmp = ((Can *)hw)->CCCR.reg;
     8d2:	6993      	ldr	r3, [r2, #24]
			while (hri_can_get_CCCR_INIT_bit(CAN_0.dev.hw) == 0)
     8d4:	f013 0f01 	tst.w	r3, #1
     8d8:	d0fb      	beq.n	8d2 <main+0x39a>
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
     8da:	6993      	ldr	r3, [r2, #24]
     8dc:	f043 0302 	orr.w	r3, r3, #2
     8e0:	6193      	str	r3, [r2, #24]
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_FDOE;
     8e2:	6993      	ldr	r3, [r2, #24]
     8e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
     8e8:	6193      	str	r3, [r2, #24]
}

static inline void hri_can_clear_CCCR_BRSE_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_BRSE;
     8ea:	6993      	ldr	r3, [r2, #24]
     8ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
     8f0:	6193      	str	r3, [r2, #24]
			can_async_register_callback(&CAN_0, CAN_ASYNC_TX_CB, (FUNC_PTR)CAN_std_tx_callback);
     8f2:	4d24      	ldr	r5, [pc, #144]	; (984 <main+0x44c>)
     8f4:	4a29      	ldr	r2, [pc, #164]	; (99c <main+0x464>)
     8f6:	2101      	movs	r1, #1
     8f8:	4628      	mov	r0, r5
     8fa:	4b24      	ldr	r3, [pc, #144]	; (98c <main+0x454>)
     8fc:	4798      	blx	r3
			can_async_enable(&CAN_0);
     8fe:	4628      	mov	r0, r5
     900:	4b23      	ldr	r3, [pc, #140]	; (990 <main+0x458>)
     902:	4798      	blx	r3
			can_async_write(&CAN_0, &msg);
     904:	a925      	add	r1, sp, #148	; 0x94
     906:	4628      	mov	r0, r5
     908:	4b22      	ldr	r3, [pc, #136]	; (994 <main+0x45c>)
     90a:	4798      	blx	r3
			break;
     90c:	e63f      	b.n	58e <main+0x56>
			usb.xprint("  a: Send normal standard message with ID: 0x45A and 8 byte data 0 to 7. \r\n");
     90e:	4924      	ldr	r1, [pc, #144]	; (9a0 <main+0x468>)
     910:	4630      	mov	r0, r6
     912:	4b1a      	ldr	r3, [pc, #104]	; (97c <main+0x444>)
     914:	4798      	blx	r3
			msg.id   = 0x45A;
     916:	f240 435a 	movw	r3, #1114	; 0x45a
     91a:	9325      	str	r3, [sp, #148]	; 0x94
			msg.type = CAN_TYPE_DATA;
     91c:	2300      	movs	r3, #0
     91e:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
			msg.data = tx_message_2;
     922:	aa01      	add	r2, sp, #4
     924:	9227      	str	r2, [sp, #156]	; 0x9c
			msg.len  = 8;
     926:	2208      	movs	r2, #8
     928:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
			msg.fmt  = CAN_FMT_STDID;
     92c:	f88d 30a1 	strb.w	r3, [sp, #161]	; 0xa1
			hri_can_set_CCCR_INIT_bit(CAN_0.dev.hw);
     930:	4b14      	ldr	r3, [pc, #80]	; (984 <main+0x44c>)
     932:	681a      	ldr	r2, [r3, #0]
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
     934:	6993      	ldr	r3, [r2, #24]
     936:	f043 0301 	orr.w	r3, r3, #1
     93a:	6193      	str	r3, [r2, #24]
	tmp = ((Can *)hw)->CCCR.reg;
     93c:	6993      	ldr	r3, [r2, #24]
			while (hri_can_get_CCCR_INIT_bit(CAN_0.dev.hw) == 0)
     93e:	f013 0f01 	tst.w	r3, #1
     942:	d0fb      	beq.n	93c <main+0x404>
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
     944:	6993      	ldr	r3, [r2, #24]
     946:	f043 0302 	orr.w	r3, r3, #2
     94a:	6193      	str	r3, [r2, #24]
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_FDOE;
     94c:	6993      	ldr	r3, [r2, #24]
     94e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
     952:	6193      	str	r3, [r2, #24]
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_BRSE;
     954:	6993      	ldr	r3, [r2, #24]
     956:	f423 7300 	bic.w	r3, r3, #512	; 0x200
     95a:	6193      	str	r3, [r2, #24]
			can_async_register_callback(&CAN_0, CAN_ASYNC_TX_CB, (FUNC_PTR)CAN_std_tx_callback);
     95c:	4d09      	ldr	r5, [pc, #36]	; (984 <main+0x44c>)
     95e:	4a0f      	ldr	r2, [pc, #60]	; (99c <main+0x464>)
     960:	2101      	movs	r1, #1
     962:	4628      	mov	r0, r5
     964:	4b09      	ldr	r3, [pc, #36]	; (98c <main+0x454>)
     966:	4798      	blx	r3
			can_async_enable(&CAN_0);
     968:	4628      	mov	r0, r5
     96a:	4b09      	ldr	r3, [pc, #36]	; (990 <main+0x458>)
     96c:	4798      	blx	r3
			can_async_write(&CAN_0, &msg);
     96e:	a925      	add	r1, sp, #148	; 0x94
     970:	4628      	mov	r0, r5
     972:	4b08      	ldr	r3, [pc, #32]	; (994 <main+0x45c>)
     974:	4798      	blx	r3
			break;
     976:	e60a      	b.n	58e <main+0x56>
     978:	0000583c 	.word	0x0000583c
     97c:	00004e09 	.word	0x00004e09
     980:	10000096 	.word	0x10000096
     984:	20000990 	.word	0x20000990
     988:	000003a1 	.word	0x000003a1
     98c:	00001205 	.word	0x00001205
     990:	0000117d 	.word	0x0000117d
     994:	000011d5 	.word	0x000011d5
     998:	000056f8 	.word	0x000056f8
     99c:	00000359 	.word	0x00000359
     9a0:	0000588c 	.word	0x0000588c

000009a4 <_GLOBAL__sub_I_usb>:
}
     9a4:	b510      	push	{r4, lr}
USB_CDC_Class	usb;
     9a6:	4c05      	ldr	r4, [pc, #20]	; (9bc <_GLOBAL__sub_I_usb+0x18>)
     9a8:	4620      	mov	r0, r4
     9aa:	4b05      	ldr	r3, [pc, #20]	; (9c0 <_GLOBAL__sub_I_usb+0x1c>)
     9ac:	4798      	blx	r3
     9ae:	4a05      	ldr	r2, [pc, #20]	; (9c4 <_GLOBAL__sub_I_usb+0x20>)
     9b0:	4905      	ldr	r1, [pc, #20]	; (9c8 <_GLOBAL__sub_I_usb+0x24>)
     9b2:	4620      	mov	r0, r4
     9b4:	4b05      	ldr	r3, [pc, #20]	; (9cc <_GLOBAL__sub_I_usb+0x28>)
     9b6:	4798      	blx	r3
     9b8:	bd10      	pop	{r4, pc}
     9ba:	bf00      	nop
     9bc:	20000528 	.word	0x20000528
     9c0:	00004c01 	.word	0x00004c01
     9c4:	20000000 	.word	0x20000000
     9c8:	00004ded 	.word	0x00004ded
     9cc:	00004f11 	.word	0x00004f11

000009d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     9d0:	b508      	push	{r3, lr}
	system_init();
     9d2:	4b02      	ldr	r3, [pc, #8]	; (9dc <atmel_start_init+0xc>)
     9d4:	4798      	blx	r3
	usb_init();
     9d6:	4b02      	ldr	r3, [pc, #8]	; (9e0 <atmel_start_init+0x10>)
     9d8:	4798      	blx	r3
     9da:	bd08      	pop	{r3, pc}
     9dc:	00000ec9 	.word	0x00000ec9
     9e0:	00003fb1 	.word	0x00003fb1

000009e4 <EVENT_SYSTEM_0_init>:
struct i2c_m_async_desc I2C_1;

struct i2c_m_async_desc I2C_EEPROM;

void EVENT_SYSTEM_0_init(void)
{
     9e4:	b508      	push	{r3, lr}
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     9e6:	2240      	movs	r2, #64	; 0x40
     9e8:	4b05      	ldr	r3, [pc, #20]	; (a00 <EVENT_SYSTEM_0_init+0x1c>)
     9ea:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     9ee:	4a05      	ldr	r2, [pc, #20]	; (a04 <EVENT_SYSTEM_0_init+0x20>)
     9f0:	6993      	ldr	r3, [r2, #24]
     9f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     9f6:	6193      	str	r3, [r2, #24]
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);

	event_system_init();
     9f8:	4b03      	ldr	r3, [pc, #12]	; (a08 <EVENT_SYSTEM_0_init+0x24>)
     9fa:	4798      	blx	r3
     9fc:	bd08      	pop	{r3, pc}
     9fe:	bf00      	nop
     a00:	40001c00 	.word	0x40001c00
     a04:	40000800 	.word	0x40000800
     a08:	000012bd 	.word	0x000012bd

00000a0c <SPI_LTC2983_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a0c:	4b28      	ldr	r3, [pc, #160]	; (ab0 <SPI_LTC2983_PORT_init+0xa4>)
     a0e:	2210      	movs	r2, #16
     a10:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a12:	609a      	str	r2, [r3, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a14:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     a18:	629a      	str	r2, [r3, #40]	; 0x28
     a1a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     a1e:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a20:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
     a24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a28:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a30:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     a34:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     a38:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a3c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a40:	2220      	movs	r2, #32
     a42:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a44:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a46:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     a4a:	629a      	str	r2, [r3, #40]	; 0x28
     a4c:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a4e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     a52:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a56:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a5e:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     a62:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     a66:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a6a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     a6e:	2240      	movs	r2, #64	; 0x40
     a70:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a72:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     a76:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     a7a:	629a      	str	r2, [r3, #40]	; 0x28
     a7c:	4a0d      	ldr	r2, [pc, #52]	; (ab4 <SPI_LTC2983_PORT_init+0xa8>)
     a7e:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     a80:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
     a84:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     a88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a8c:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     a90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a94:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a9c:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     aa0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     aa4:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     aa8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
     aac:	4770      	bx	lr
     aae:	bf00      	nop
     ab0:	41008000 	.word	0x41008000
     ab4:	c0020000 	.word	0xc0020000

00000ab8 <SPI_LTC2983_CLOCK_init>:
     ab8:	4b06      	ldr	r3, [pc, #24]	; (ad4 <SPI_LTC2983_CLOCK_init+0x1c>)
     aba:	2240      	movs	r2, #64	; 0x40
     abc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     ac0:	2243      	movs	r2, #67	; 0x43
     ac2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     ac6:	4a04      	ldr	r2, [pc, #16]	; (ad8 <SPI_LTC2983_CLOCK_init+0x20>)
     ac8:	6953      	ldr	r3, [r2, #20]
     aca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     ace:	6153      	str	r3, [r2, #20]
     ad0:	4770      	bx	lr
     ad2:	bf00      	nop
     ad4:	40001c00 	.word	0x40001c00
     ad8:	40000800 	.word	0x40000800

00000adc <SPI_LTC2983_init>:

	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
}

void SPI_LTC2983_init(void)
{
     adc:	b508      	push	{r3, lr}
	SPI_LTC2983_CLOCK_init();
     ade:	4b04      	ldr	r3, [pc, #16]	; (af0 <SPI_LTC2983_init+0x14>)
     ae0:	4798      	blx	r3
	spi_m_sync_init(&SPI_LTC2983, SERCOM0);
     ae2:	4904      	ldr	r1, [pc, #16]	; (af4 <SPI_LTC2983_init+0x18>)
     ae4:	4804      	ldr	r0, [pc, #16]	; (af8 <SPI_LTC2983_init+0x1c>)
     ae6:	4b05      	ldr	r3, [pc, #20]	; (afc <SPI_LTC2983_init+0x20>)
     ae8:	4798      	blx	r3
	SPI_LTC2983_PORT_init();
     aea:	4b05      	ldr	r3, [pc, #20]	; (b00 <SPI_LTC2983_init+0x24>)
     aec:	4798      	blx	r3
     aee:	bd08      	pop	{r3, pc}
     af0:	00000ab9 	.word	0x00000ab9
     af4:	40003000 	.word	0x40003000
     af8:	200009f8 	.word	0x200009f8
     afc:	000013cd 	.word	0x000013cd
     b00:	00000a0d 	.word	0x00000a0d

00000b04 <I2C_1_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     b04:	4b16      	ldr	r3, [pc, #88]	; (b60 <I2C_1_PORT_init+0x5c>)
     b06:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
     b0a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     b0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b12:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
	tmp &= ~PORT_PINCFG_PMUXEN;
     b16:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b1a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b22:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     b26:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     b2a:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     b32:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
     b36:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     b3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b3e:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
	tmp &= ~PORT_PINCFG_PMUXEN;
     b42:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b46:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b4e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     b52:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     b56:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
     b5e:	4770      	bx	lr
     b60:	41008000 	.word	0x41008000

00000b64 <I2C_1_CLOCK_init>:
     b64:	4b06      	ldr	r3, [pc, #24]	; (b80 <I2C_1_CLOCK_init+0x1c>)
     b66:	2240      	movs	r2, #64	; 0x40
     b68:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
     b6c:	2243      	movs	r2, #67	; 0x43
     b6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     b72:	4a04      	ldr	r2, [pc, #16]	; (b84 <I2C_1_CLOCK_init+0x20>)
     b74:	6953      	ldr	r3, [r2, #20]
     b76:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     b7a:	6153      	str	r3, [r2, #20]
     b7c:	4770      	bx	lr
     b7e:	bf00      	nop
     b80:	40001c00 	.word	0x40001c00
     b84:	40000800 	.word	0x40000800

00000b88 <I2C_1_init>:

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
}

void I2C_1_init(void)
{
     b88:	b508      	push	{r3, lr}
	I2C_1_CLOCK_init();
     b8a:	4b04      	ldr	r3, [pc, #16]	; (b9c <I2C_1_init+0x14>)
     b8c:	4798      	blx	r3
	i2c_m_async_init(&I2C_1, SERCOM1);
     b8e:	4904      	ldr	r1, [pc, #16]	; (ba0 <I2C_1_init+0x18>)
     b90:	4804      	ldr	r0, [pc, #16]	; (ba4 <I2C_1_init+0x1c>)
     b92:	4b05      	ldr	r3, [pc, #20]	; (ba8 <I2C_1_init+0x20>)
     b94:	4798      	blx	r3
	I2C_1_PORT_init();
     b96:	4b05      	ldr	r3, [pc, #20]	; (bac <I2C_1_init+0x24>)
     b98:	4798      	blx	r3
     b9a:	bd08      	pop	{r3, pc}
     b9c:	00000b65 	.word	0x00000b65
     ba0:	40003400 	.word	0x40003400
     ba4:	200009b8 	.word	0x200009b8
     ba8:	00001361 	.word	0x00001361
     bac:	00000b05 	.word	0x00000b05

00000bb0 <I2C_EEPROM_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     bb0:	4b16      	ldr	r3, [pc, #88]	; (c0c <I2C_EEPROM_PORT_init+0x5c>)
     bb2:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
     bb6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     bba:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     bbe:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     bc2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     bc6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bca:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     bce:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     bd2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     bd6:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     bda:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     bde:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
     be2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     be6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     bea:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     bee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     bf2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bf6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     bfa:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     bfe:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     c02:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c06:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     c0a:	4770      	bx	lr
     c0c:	41008000 	.word	0x41008000

00000c10 <I2C_EEPROM_CLOCK_init>:
     c10:	4b06      	ldr	r3, [pc, #24]	; (c2c <I2C_EEPROM_CLOCK_init+0x1c>)
     c12:	2240      	movs	r2, #64	; 0x40
     c14:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     c18:	2243      	movs	r2, #67	; 0x43
     c1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     c1e:	4a04      	ldr	r2, [pc, #16]	; (c30 <I2C_EEPROM_CLOCK_init+0x20>)
     c20:	6a13      	ldr	r3, [r2, #32]
     c22:	f043 0302 	orr.w	r3, r3, #2
     c26:	6213      	str	r3, [r2, #32]
     c28:	4770      	bx	lr
     c2a:	bf00      	nop
     c2c:	40001c00 	.word	0x40001c00
     c30:	40000800 	.word	0x40000800

00000c34 <I2C_EEPROM_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void I2C_EEPROM_init(void)
{
     c34:	b508      	push	{r3, lr}
	I2C_EEPROM_CLOCK_init();
     c36:	4b04      	ldr	r3, [pc, #16]	; (c48 <I2C_EEPROM_init+0x14>)
     c38:	4798      	blx	r3
	i2c_m_async_init(&I2C_EEPROM, SERCOM5);
     c3a:	4904      	ldr	r1, [pc, #16]	; (c4c <I2C_EEPROM_init+0x18>)
     c3c:	4804      	ldr	r0, [pc, #16]	; (c50 <I2C_EEPROM_init+0x1c>)
     c3e:	4b05      	ldr	r3, [pc, #20]	; (c54 <I2C_EEPROM_init+0x20>)
     c40:	4798      	blx	r3
	I2C_EEPROM_PORT_init();
     c42:	4b05      	ldr	r3, [pc, #20]	; (c58 <I2C_EEPROM_init+0x24>)
     c44:	4798      	blx	r3
     c46:	bd08      	pop	{r3, pc}
     c48:	00000c11 	.word	0x00000c11
     c4c:	43000400 	.word	0x43000400
     c50:	20000a28 	.word	0x20000a28
     c54:	00001361 	.word	0x00001361
     c58:	00000bb1 	.word	0x00000bb1

00000c5c <SPI_Holt_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c5c:	4b2d      	ldr	r3, [pc, #180]	; (d14 <SPI_Holt_PORT_init+0xb8>)
     c5e:	2210      	movs	r2, #16
     c60:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c64:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c68:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     c6c:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     c70:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     c74:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c78:	f893 2144 	ldrb.w	r2, [r3, #324]	; 0x144
	tmp &= ~PORT_PINCFG_PMUXEN;
     c7c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c80:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c84:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c88:	f893 2132 	ldrb.w	r2, [r3, #306]	; 0x132
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     c8c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     c90:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c94:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c98:	2220      	movs	r2, #32
     c9a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c9e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ca2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     ca6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     caa:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     cae:	f893 2145 	ldrb.w	r2, [r3, #325]	; 0x145
	tmp &= ~PORT_PINCFG_PMUXEN;
     cb2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     cb6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     cba:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     cbe:	f893 2132 	ldrb.w	r2, [r3, #306]	; 0x132
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     cc2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     cc6:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     cca:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     cce:	2240      	movs	r2, #64	; 0x40
     cd0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     cd4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     cd8:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     cdc:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     ce0:	4a0d      	ldr	r2, [pc, #52]	; (d18 <SPI_Holt_PORT_init+0xbc>)
     ce2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     ce6:	f893 2146 	ldrb.w	r2, [r3, #326]	; 0x146
     cea:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     cee:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     cf2:	f893 2146 	ldrb.w	r2, [r3, #326]	; 0x146
	tmp &= ~PORT_PINCFG_PMUXEN;
     cf6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     cfa:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     cfe:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d02:	f893 2133 	ldrb.w	r2, [r3, #307]	; 0x133
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     d06:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     d0a:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d0e:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
     d12:	4770      	bx	lr
     d14:	41008000 	.word	0x41008000
     d18:	c0020000 	.word	0xc0020000

00000d1c <SPI_Holt_CLOCK_init>:
     d1c:	4b06      	ldr	r3, [pc, #24]	; (d38 <SPI_Holt_CLOCK_init+0x1c>)
     d1e:	2240      	movs	r2, #64	; 0x40
     d20:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
     d24:	2243      	movs	r2, #67	; 0x43
     d26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     d2a:	4a04      	ldr	r2, [pc, #16]	; (d3c <SPI_Holt_CLOCK_init+0x20>)
     d2c:	6a13      	ldr	r3, [r2, #32]
     d2e:	f043 0304 	orr.w	r3, r3, #4
     d32:	6213      	str	r3, [r2, #32]
     d34:	4770      	bx	lr
     d36:	bf00      	nop
     d38:	40001c00 	.word	0x40001c00
     d3c:	40000800 	.word	0x40000800

00000d40 <SPI_Holt_init>:

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
}

void SPI_Holt_init(void)
{
     d40:	b508      	push	{r3, lr}
	SPI_Holt_CLOCK_init();
     d42:	4b04      	ldr	r3, [pc, #16]	; (d54 <SPI_Holt_init+0x14>)
     d44:	4798      	blx	r3
	spi_m_sync_init(&SPI_Holt, SERCOM6);
     d46:	4904      	ldr	r1, [pc, #16]	; (d58 <SPI_Holt_init+0x18>)
     d48:	4804      	ldr	r0, [pc, #16]	; (d5c <SPI_Holt_init+0x1c>)
     d4a:	4b05      	ldr	r3, [pc, #20]	; (d60 <SPI_Holt_init+0x20>)
     d4c:	4798      	blx	r3
	SPI_Holt_PORT_init();
     d4e:	4b05      	ldr	r3, [pc, #20]	; (d64 <SPI_Holt_init+0x24>)
     d50:	4798      	blx	r3
     d52:	bd08      	pop	{r3, pc}
     d54:	00000d1d 	.word	0x00000d1d
     d58:	43000800 	.word	0x43000800
     d5c:	20000a10 	.word	0x20000a10
     d60:	000013cd 	.word	0x000013cd
     d64:	00000c5d 	.word	0x00000c5d

00000d68 <delay_driver_init>:
}

void delay_driver_init(void)
{
     d68:	b508      	push	{r3, lr}
	delay_init(SysTick);
     d6a:	4802      	ldr	r0, [pc, #8]	; (d74 <delay_driver_init+0xc>)
     d6c:	4b02      	ldr	r3, [pc, #8]	; (d78 <delay_driver_init+0x10>)
     d6e:	4798      	blx	r3
     d70:	bd08      	pop	{r3, pc}
     d72:	bf00      	nop
     d74:	e000e010 	.word	0xe000e010
     d78:	00001289 	.word	0x00001289

00000d7c <USB_DEVICE_INSTANCE_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d7c:	4b1e      	ldr	r3, [pc, #120]	; (df8 <USB_DEVICE_INSTANCE_PORT_init+0x7c>)
     d7e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     d82:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d84:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     d88:	6299      	str	r1, [r3, #40]	; 0x28
     d8a:	481c      	ldr	r0, [pc, #112]	; (dfc <USB_DEVICE_INSTANCE_PORT_init+0x80>)
     d8c:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d8e:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     d90:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
     d94:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     d98:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d9c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     da0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     da4:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     da8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     dac:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     db0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     db4:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     dbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     dc0:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     dc2:	6299      	str	r1, [r3, #40]	; 0x28
     dc4:	490e      	ldr	r1, [pc, #56]	; (e00 <USB_DEVICE_INSTANCE_PORT_init+0x84>)
     dc6:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     dc8:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     dca:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     dce:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     dd2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     dd6:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     dda:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     dde:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     de2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     de6:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     dea:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     dee:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
     df6:	4770      	bx	lr
     df8:	41008000 	.word	0x41008000
     dfc:	c0000100 	.word	0xc0000100
     e00:	c0000200 	.word	0xc0000200

00000e04 <USB_DEVICE_INSTANCE_CLOCK_init>:
     e04:	2244      	movs	r2, #68	; 0x44
     e06:	4b07      	ldr	r3, [pc, #28]	; (e24 <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
     e08:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     e0c:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
     e10:	691a      	ldr	r2, [r3, #16]
     e12:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     e16:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     e18:	699a      	ldr	r2, [r3, #24]
     e1a:	f042 0201 	orr.w	r2, r2, #1
     e1e:	619a      	str	r2, [r3, #24]
     e20:	4770      	bx	lr
     e22:	bf00      	nop
     e24:	40001c00 	.word	0x40001c00

00000e28 <USB_DEVICE_INSTANCE_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void USB_DEVICE_INSTANCE_init(void)
{
     e28:	b508      	push	{r3, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
     e2a:	4b03      	ldr	r3, [pc, #12]	; (e38 <USB_DEVICE_INSTANCE_init+0x10>)
     e2c:	4798      	blx	r3
	usb_d_init();
     e2e:	4b03      	ldr	r3, [pc, #12]	; (e3c <USB_DEVICE_INSTANCE_init+0x14>)
     e30:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
     e32:	4b03      	ldr	r3, [pc, #12]	; (e40 <USB_DEVICE_INSTANCE_init+0x18>)
     e34:	4798      	blx	r3
     e36:	bd08      	pop	{r3, pc}
     e38:	00000e05 	.word	0x00000e05
     e3c:	0000183d 	.word	0x0000183d
     e40:	00000d7d 	.word	0x00000d7d

00000e44 <CAN_0_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e44:	4b10      	ldr	r3, [pc, #64]	; (e88 <CAN_0_PORT_init+0x44>)
     e46:	f893 20cd 	ldrb.w	r2, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
     e4a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     e4e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e52:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     e56:	f893 20b6 	ldrb.w	r2, [r3, #182]	; 0xb6
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     e5a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     e5e:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     e62:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e66:	f893 20cc 	ldrb.w	r2, [r3, #204]	; 0xcc
	tmp &= ~PORT_PINCFG_PMUXEN;
     e6a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     e6e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e72:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     e76:	f893 20b6 	ldrb.w	r2, [r3, #182]	; 0xb6
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     e7a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     e7e:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     e82:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
     e86:	4770      	bx	lr
     e88:	41008000 	.word	0x41008000

00000e8c <CAN_0_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_0_init(void)
{
     e8c:	b508      	push	{r3, lr}
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
     e8e:	4a08      	ldr	r2, [pc, #32]	; (eb0 <CAN_0_init+0x24>)
     e90:	6913      	ldr	r3, [r2, #16]
     e92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
     e96:	6113      	str	r3, [r2, #16]
     e98:	2242      	movs	r2, #66	; 0x42
     e9a:	4b06      	ldr	r3, [pc, #24]	; (eb4 <CAN_0_init+0x28>)
     e9c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	can_async_init(&CAN_0, CAN1);
     ea0:	4905      	ldr	r1, [pc, #20]	; (eb8 <CAN_0_init+0x2c>)
     ea2:	4806      	ldr	r0, [pc, #24]	; (ebc <CAN_0_init+0x30>)
     ea4:	4b06      	ldr	r3, [pc, #24]	; (ec0 <CAN_0_init+0x34>)
     ea6:	4798      	blx	r3
	CAN_0_PORT_init();
     ea8:	4b06      	ldr	r3, [pc, #24]	; (ec4 <CAN_0_init+0x38>)
     eaa:	4798      	blx	r3
     eac:	bd08      	pop	{r3, pc}
     eae:	bf00      	nop
     eb0:	40000800 	.word	0x40000800
     eb4:	40001c00 	.word	0x40001c00
     eb8:	42000400 	.word	0x42000400
     ebc:	20000990 	.word	0x20000990
     ec0:	0000112d 	.word	0x0000112d
     ec4:	00000e45 	.word	0x00000e45

00000ec8 <system_init>:
}

void system_init(void)
{
     ec8:	b538      	push	{r3, r4, r5, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     eca:	4b79      	ldr	r3, [pc, #484]	; (10b0 <system_init+0x1e8>)
     ecc:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     ece:	4b79      	ldr	r3, [pc, #484]	; (10b4 <system_init+0x1ec>)
     ed0:	2280      	movs	r2, #128	; 0x80
     ed2:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ed4:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ed6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     eda:	629a      	str	r2, [r3, #40]	; 0x28
     edc:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     ee0:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ee2:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
     ee6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     eea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     ef2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ef6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     efa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     efe:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     f02:	486d      	ldr	r0, [pc, #436]	; (10b8 <system_init+0x1f0>)
     f04:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f08:	f893 00dc 	ldrb.w	r0, [r3, #220]	; 0xdc
	tmp &= ~PORT_PINCFG_PMUXEN;
     f0c:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f10:	f883 00dc 	strb.w	r0, [r3, #220]	; 0xdc
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     f14:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
     f18:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     f1c:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f20:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     f24:	4865      	ldr	r0, [pc, #404]	; (10bc <system_init+0x1f4>)
     f26:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f2a:	f893 00dd 	ldrb.w	r0, [r3, #221]	; 0xdd
	tmp &= ~PORT_PINCFG_PMUXEN;
     f2e:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f32:	f883 00dd 	strb.w	r0, [r3, #221]	; 0xdd
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f36:	2004      	movs	r0, #4
     f38:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f3c:	4c60      	ldr	r4, [pc, #384]	; (10c0 <system_init+0x1f8>)
     f3e:	f8c3 4128 	str.w	r4, [r3, #296]	; 0x128
     f42:	4d60      	ldr	r5, [pc, #384]	; (10c4 <system_init+0x1fc>)
     f44:	f8c3 5128 	str.w	r5, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f48:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     f4c:	f893 4142 	ldrb.w	r4, [r3, #322]	; 0x142
     f50:	4304      	orrs	r4, r0
     f52:	f883 4142 	strb.w	r4, [r3, #322]	; 0x142
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     f56:	f8c3 0118 	str.w	r0, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f5a:	f893 0142 	ldrb.w	r0, [r3, #322]	; 0x142
	tmp &= ~PORT_PINCFG_PMUXEN;
     f5e:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f62:	f883 0142 	strb.w	r0, [r3, #322]	; 0x142
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f66:	2008      	movs	r0, #8
     f68:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f6c:	4c56      	ldr	r4, [pc, #344]	; (10c8 <system_init+0x200>)
     f6e:	f8c3 4128 	str.w	r4, [r3, #296]	; 0x128
     f72:	f8c3 5128 	str.w	r5, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f76:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     f7a:	f893 4143 	ldrb.w	r4, [r3, #323]	; 0x143
     f7e:	f044 0404 	orr.w	r4, r4, #4
     f82:	f883 4143 	strb.w	r4, [r3, #323]	; 0x143
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     f86:	f8c3 0118 	str.w	r0, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f8a:	f893 0143 	ldrb.w	r0, [r3, #323]	; 0x143
	tmp &= ~PORT_PINCFG_PMUXEN;
     f8e:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f92:	f883 0143 	strb.w	r0, [r3, #323]	; 0x143
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     f96:	f44f 5000 	mov.w	r0, #8192	; 0x2000
     f9a:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     f9e:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     fa2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     fa6:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
     faa:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fae:	f893 014d 	ldrb.w	r0, [r3, #333]	; 0x14d
	tmp &= ~PORT_PINCFG_PMUXEN;
     fb2:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     fb6:	f883 014d 	strb.w	r0, [r3, #333]	; 0x14d
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     fba:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     fbe:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     fc2:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     fc6:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     fca:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
     fce:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fd2:	f893 014f 	ldrb.w	r0, [r3, #335]	; 0x14f
	tmp &= ~PORT_PINCFG_PMUXEN;
     fd6:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     fda:	f883 014f 	strb.w	r0, [r3, #335]	; 0x14f
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     fde:	f44f 2080 	mov.w	r0, #262144	; 0x40000
     fe2:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     fe6:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     fea:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     fee:	4837      	ldr	r0, [pc, #220]	; (10cc <system_init+0x204>)
     ff0:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ff4:	f893 0152 	ldrb.w	r0, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
     ff8:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ffc:	f883 0152 	strb.w	r0, [r3, #338]	; 0x152
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1000:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1004:	4832      	ldr	r0, [pc, #200]	; (10d0 <system_init+0x208>)
    1006:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
    100a:	4832      	ldr	r0, [pc, #200]	; (10d4 <system_init+0x20c>)
    100c:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1010:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    1014:	f893 015e 	ldrb.w	r0, [r3, #350]	; 0x15e
    1018:	f040 0004 	orr.w	r0, r0, #4
    101c:	f883 015e 	strb.w	r0, [r3, #350]	; 0x15e
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1020:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1024:	f893 215e 	ldrb.w	r2, [r3, #350]	; 0x15e
	tmp &= ~PORT_PINCFG_PMUXEN;
    1028:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    102c:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1030:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1034:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1038:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    103c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    1040:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
    1044:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1048:	f893 21ca 	ldrb.w	r2, [r3, #458]	; 0x1ca
	tmp &= ~PORT_PINCFG_PMUXEN;
    104c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1050:	f883 21ca 	strb.w	r2, [r3, #458]	; 0x1ca
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1054:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1058:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    105c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1060:	4c1d      	ldr	r4, [pc, #116]	; (10d8 <system_init+0x210>)
    1062:	f8c3 41a8 	str.w	r4, [r3, #424]	; 0x1a8
    1066:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    106a:	f893 21cb 	ldrb.w	r2, [r3, #459]	; 0x1cb
	tmp &= ~PORT_PINCFG_PMUXEN;
    106e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1072:	f883 21cb 	strb.w	r2, [r3, #459]	; 0x1cb
	// Set pin direction to output
	gpio_set_pin_direction(OLED_LED3, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(OLED_LED3, GPIO_PIN_FUNCTION_OFF);

	EVENT_SYSTEM_0_init();
    1076:	4b19      	ldr	r3, [pc, #100]	; (10dc <system_init+0x214>)
    1078:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    107a:	6963      	ldr	r3, [r4, #20]
    107c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    1080:	6163      	str	r3, [r4, #20]
	timer_init(&TIMER_0, RTC, _rtc_get_timer());
    1082:	4b17      	ldr	r3, [pc, #92]	; (10e0 <system_init+0x218>)
    1084:	4798      	blx	r3
    1086:	4602      	mov	r2, r0
    1088:	4916      	ldr	r1, [pc, #88]	; (10e4 <system_init+0x21c>)
    108a:	4817      	ldr	r0, [pc, #92]	; (10e8 <system_init+0x220>)
    108c:	4b17      	ldr	r3, [pc, #92]	; (10ec <system_init+0x224>)
    108e:	4798      	blx	r3

	TIMER_0_init();

	SPI_LTC2983_init();
    1090:	4b17      	ldr	r3, [pc, #92]	; (10f0 <system_init+0x228>)
    1092:	4798      	blx	r3

	I2C_1_init();
    1094:	4b17      	ldr	r3, [pc, #92]	; (10f4 <system_init+0x22c>)
    1096:	4798      	blx	r3

	I2C_EEPROM_init();
    1098:	4b17      	ldr	r3, [pc, #92]	; (10f8 <system_init+0x230>)
    109a:	4798      	blx	r3

	SPI_Holt_init();
    109c:	4b17      	ldr	r3, [pc, #92]	; (10fc <system_init+0x234>)
    109e:	4798      	blx	r3

	delay_driver_init();
    10a0:	4b17      	ldr	r3, [pc, #92]	; (1100 <system_init+0x238>)
    10a2:	4798      	blx	r3

	USB_DEVICE_INSTANCE_init();
    10a4:	4b17      	ldr	r3, [pc, #92]	; (1104 <system_init+0x23c>)
    10a6:	4798      	blx	r3
	CAN_0_init();
    10a8:	4b17      	ldr	r3, [pc, #92]	; (1108 <system_init+0x240>)
    10aa:	4798      	blx	r3
    10ac:	bd38      	pop	{r3, r4, r5, pc}
    10ae:	bf00      	nop
    10b0:	00002071 	.word	0x00002071
    10b4:	41008000 	.word	0x41008000
    10b8:	c0001000 	.word	0xc0001000
    10bc:	c0002000 	.word	0xc0002000
    10c0:	40020004 	.word	0x40020004
    10c4:	c0020000 	.word	0xc0020000
    10c8:	40020008 	.word	0x40020008
    10cc:	c0000004 	.word	0xc0000004
    10d0:	40020000 	.word	0x40020000
    10d4:	c0024000 	.word	0xc0024000
    10d8:	40000800 	.word	0x40000800
    10dc:	000009e5 	.word	0x000009e5
    10e0:	000023a5 	.word	0x000023a5
    10e4:	40002400 	.word	0x40002400
    10e8:	20000a68 	.word	0x20000a68
    10ec:	000015ad 	.word	0x000015ad
    10f0:	00000add 	.word	0x00000add
    10f4:	00000b89 	.word	0x00000b89
    10f8:	00000c35 	.word	0x00000c35
    10fc:	00000d41 	.word	0x00000d41
    1100:	00000d69 	.word	0x00000d69
    1104:	00000e29 	.word	0x00000e29
    1108:	00000e8d 	.word	0x00000e8d

0000110c <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    110c:	b508      	push	{r3, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.tx_done) {
    110e:	69c3      	ldr	r3, [r0, #28]
    1110:	b103      	cbz	r3, 1114 <can_tx_done+0x8>
		descr->cb.tx_done(descr);
    1112:	4798      	blx	r3
    1114:	bd08      	pop	{r3, pc}

00001116 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    1116:	b508      	push	{r3, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.rx_done) {
    1118:	6a03      	ldr	r3, [r0, #32]
    111a:	b103      	cbz	r3, 111e <can_rx_done+0x8>
		descr->cb.rx_done(descr);
    111c:	4798      	blx	r3
    111e:	bd08      	pop	{r3, pc}

00001120 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    1120:	b508      	push	{r3, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.irq_handler) {
    1122:	6a43      	ldr	r3, [r0, #36]	; 0x24
    1124:	b103      	cbz	r3, 1128 <can_irq_handler+0x8>
		descr->cb.irq_handler(descr, type);
    1126:	4798      	blx	r3
    1128:	bd08      	pop	{r3, pc}
	...

0000112c <can_async_init>:
{
    112c:	b538      	push	{r3, r4, r5, lr}
    112e:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    1130:	4604      	mov	r4, r0
    1132:	b1a0      	cbz	r0, 115e <can_async_init+0x32>
    1134:	1c08      	adds	r0, r1, #0
    1136:	bf18      	it	ne
    1138:	2001      	movne	r0, #1
    113a:	2241      	movs	r2, #65	; 0x41
    113c:	4909      	ldr	r1, [pc, #36]	; (1164 <can_async_init+0x38>)
    113e:	4b0a      	ldr	r3, [pc, #40]	; (1168 <can_async_init+0x3c>)
    1140:	4798      	blx	r3
	rc = _can_async_init(&descr->dev, hw);
    1142:	4629      	mov	r1, r5
    1144:	4620      	mov	r0, r4
    1146:	4b09      	ldr	r3, [pc, #36]	; (116c <can_async_init+0x40>)
    1148:	4798      	blx	r3
	if (rc) {
    114a:	4603      	mov	r3, r0
    114c:	b928      	cbnz	r0, 115a <can_async_init+0x2e>
	descr->dev.cb.tx_done     = can_tx_done;
    114e:	4a08      	ldr	r2, [pc, #32]	; (1170 <can_async_init+0x44>)
    1150:	6062      	str	r2, [r4, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    1152:	4a08      	ldr	r2, [pc, #32]	; (1174 <can_async_init+0x48>)
    1154:	60a2      	str	r2, [r4, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    1156:	4a08      	ldr	r2, [pc, #32]	; (1178 <can_async_init+0x4c>)
    1158:	60e2      	str	r2, [r4, #12]
}
    115a:	4618      	mov	r0, r3
    115c:	bd38      	pop	{r3, r4, r5, pc}
    115e:	2000      	movs	r0, #0
    1160:	e7eb      	b.n	113a <can_async_init+0xe>
    1162:	bf00      	nop
    1164:	000058d8 	.word	0x000058d8
    1168:	00001b89 	.word	0x00001b89
    116c:	00001c31 	.word	0x00001c31
    1170:	0000110d 	.word	0x0000110d
    1174:	00001117 	.word	0x00001117
    1178:	00001121 	.word	0x00001121

0000117c <can_async_enable>:
{
    117c:	b510      	push	{r4, lr}
	ASSERT(descr);
    117e:	4604      	mov	r4, r0
    1180:	225c      	movs	r2, #92	; 0x5c
    1182:	4905      	ldr	r1, [pc, #20]	; (1198 <can_async_enable+0x1c>)
    1184:	3000      	adds	r0, #0
    1186:	bf18      	it	ne
    1188:	2001      	movne	r0, #1
    118a:	4b04      	ldr	r3, [pc, #16]	; (119c <can_async_enable+0x20>)
    118c:	4798      	blx	r3
	return _can_async_enable(&descr->dev);
    118e:	4620      	mov	r0, r4
    1190:	4b03      	ldr	r3, [pc, #12]	; (11a0 <can_async_enable+0x24>)
    1192:	4798      	blx	r3
}
    1194:	bd10      	pop	{r4, pc}
    1196:	bf00      	nop
    1198:	000058d8 	.word	0x000058d8
    119c:	00001b89 	.word	0x00001b89
    11a0:	00001d49 	.word	0x00001d49

000011a4 <can_async_read>:
{
    11a4:	b538      	push	{r3, r4, r5, lr}
    11a6:	460c      	mov	r4, r1
	ASSERT(descr && msg);
    11a8:	4605      	mov	r5, r0
    11aa:	b158      	cbz	r0, 11c4 <can_async_read+0x20>
    11ac:	1c08      	adds	r0, r1, #0
    11ae:	bf18      	it	ne
    11b0:	2001      	movne	r0, #1
    11b2:	226e      	movs	r2, #110	; 0x6e
    11b4:	4904      	ldr	r1, [pc, #16]	; (11c8 <can_async_read+0x24>)
    11b6:	4b05      	ldr	r3, [pc, #20]	; (11cc <can_async_read+0x28>)
    11b8:	4798      	blx	r3
	return _can_async_read(&descr->dev, msg);
    11ba:	4621      	mov	r1, r4
    11bc:	4628      	mov	r0, r5
    11be:	4b04      	ldr	r3, [pc, #16]	; (11d0 <can_async_read+0x2c>)
    11c0:	4798      	blx	r3
}
    11c2:	bd38      	pop	{r3, r4, r5, pc}
    11c4:	2000      	movs	r0, #0
    11c6:	e7f4      	b.n	11b2 <can_async_read+0xe>
    11c8:	000058d8 	.word	0x000058d8
    11cc:	00001b89 	.word	0x00001b89
    11d0:	00001d59 	.word	0x00001d59

000011d4 <can_async_write>:
{
    11d4:	b538      	push	{r3, r4, r5, lr}
    11d6:	460c      	mov	r4, r1
	ASSERT(descr && msg);
    11d8:	4605      	mov	r5, r0
    11da:	b158      	cbz	r0, 11f4 <can_async_write+0x20>
    11dc:	1c08      	adds	r0, r1, #0
    11de:	bf18      	it	ne
    11e0:	2001      	movne	r0, #1
    11e2:	2277      	movs	r2, #119	; 0x77
    11e4:	4904      	ldr	r1, [pc, #16]	; (11f8 <can_async_write+0x24>)
    11e6:	4b05      	ldr	r3, [pc, #20]	; (11fc <can_async_write+0x28>)
    11e8:	4798      	blx	r3
	return _can_async_write(&descr->dev, msg);
    11ea:	4621      	mov	r1, r4
    11ec:	4628      	mov	r0, r5
    11ee:	4b04      	ldr	r3, [pc, #16]	; (1200 <can_async_write+0x2c>)
    11f0:	4798      	blx	r3
}
    11f2:	bd38      	pop	{r3, r4, r5, pc}
    11f4:	2000      	movs	r0, #0
    11f6:	e7f4      	b.n	11e2 <can_async_write+0xe>
    11f8:	000058d8 	.word	0x000058d8
    11fc:	00001b89 	.word	0x00001b89
    1200:	00001e0d 	.word	0x00001e0d

00001204 <can_async_register_callback>:
{
    1204:	b570      	push	{r4, r5, r6, lr}
    1206:	460c      	mov	r4, r1
    1208:	4616      	mov	r6, r2
	ASSERT(descr);
    120a:	4605      	mov	r5, r0
    120c:	2281      	movs	r2, #129	; 0x81
    120e:	490e      	ldr	r1, [pc, #56]	; (1248 <can_async_register_callback+0x44>)
    1210:	3000      	adds	r0, #0
    1212:	bf18      	it	ne
    1214:	2001      	movne	r0, #1
    1216:	4b0d      	ldr	r3, [pc, #52]	; (124c <can_async_register_callback+0x48>)
    1218:	4798      	blx	r3
	switch (type) {
    121a:	2c01      	cmp	r4, #1
    121c:	d00f      	beq.n	123e <can_async_register_callback+0x3a>
    121e:	b124      	cbz	r4, 122a <can_async_register_callback+0x26>
    1220:	2c02      	cmp	r4, #2
    1222:	d00e      	beq.n	1242 <can_async_register_callback+0x3e>
		return ERR_INVALID_ARG;
    1224:	f06f 000c 	mvn.w	r0, #12
}
    1228:	bd70      	pop	{r4, r5, r6, pc}
		descr->cb.rx_done = (cb != NULL) ? (can_cb_t)cb : NULL;
    122a:	622e      	str	r6, [r5, #32]
	_can_async_set_irq_state(&descr->dev, type, NULL != cb);
    122c:	1c32      	adds	r2, r6, #0
    122e:	bf18      	it	ne
    1230:	2201      	movne	r2, #1
    1232:	4621      	mov	r1, r4
    1234:	4628      	mov	r0, r5
    1236:	4b06      	ldr	r3, [pc, #24]	; (1250 <can_async_register_callback+0x4c>)
    1238:	4798      	blx	r3
	return ERR_NONE;
    123a:	2000      	movs	r0, #0
    123c:	bd70      	pop	{r4, r5, r6, pc}
		descr->cb.tx_done = (cb != NULL) ? (can_cb_t)cb : NULL;
    123e:	61ee      	str	r6, [r5, #28]
		break;
    1240:	e7f4      	b.n	122c <can_async_register_callback+0x28>
		    = (cb != NULL) ? (void (*)(struct can_async_descriptor *const, enum can_async_interrupt_type))cb : NULL;
    1242:	626e      	str	r6, [r5, #36]	; 0x24
		break;
    1244:	e7f2      	b.n	122c <can_async_register_callback+0x28>
    1246:	bf00      	nop
    1248:	000058d8 	.word	0x000058d8
    124c:	00001b89 	.word	0x00001b89
    1250:	00001f25 	.word	0x00001f25

00001254 <can_async_set_filter>:
{
    1254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1256:	460d      	mov	r5, r1
    1258:	4616      	mov	r6, r2
    125a:	461f      	mov	r7, r3
	ASSERT(descr);
    125c:	4604      	mov	r4, r0
    125e:	22b8      	movs	r2, #184	; 0xb8
    1260:	4906      	ldr	r1, [pc, #24]	; (127c <can_async_set_filter+0x28>)
    1262:	3000      	adds	r0, #0
    1264:	bf18      	it	ne
    1266:	2001      	movne	r0, #1
    1268:	4b05      	ldr	r3, [pc, #20]	; (1280 <can_async_set_filter+0x2c>)
    126a:	4798      	blx	r3
	return _can_async_set_filter(&descr->dev, index, fmt, filter);
    126c:	463b      	mov	r3, r7
    126e:	4632      	mov	r2, r6
    1270:	4629      	mov	r1, r5
    1272:	4620      	mov	r0, r4
    1274:	4c03      	ldr	r4, [pc, #12]	; (1284 <can_async_set_filter+0x30>)
    1276:	47a0      	blx	r4
}
    1278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    127a:	bf00      	nop
    127c:	000058d8 	.word	0x000058d8
    1280:	00001b89 	.word	0x00001b89
    1284:	00001f69 	.word	0x00001f69

00001288 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    1288:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    128a:	4b02      	ldr	r3, [pc, #8]	; (1294 <delay_init+0xc>)
    128c:	6018      	str	r0, [r3, #0]
    128e:	4b02      	ldr	r3, [pc, #8]	; (1298 <delay_init+0x10>)
    1290:	4798      	blx	r3
    1292:	bd08      	pop	{r3, pc}
    1294:	200005a4 	.word	0x200005a4
    1298:	00002c85 	.word	0x00002c85

0000129c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    129c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    129e:	4b04      	ldr	r3, [pc, #16]	; (12b0 <delay_ms+0x14>)
    12a0:	681c      	ldr	r4, [r3, #0]
    12a2:	4b04      	ldr	r3, [pc, #16]	; (12b4 <delay_ms+0x18>)
    12a4:	4798      	blx	r3
    12a6:	4601      	mov	r1, r0
    12a8:	4620      	mov	r0, r4
    12aa:	4b03      	ldr	r3, [pc, #12]	; (12b8 <delay_ms+0x1c>)
    12ac:	4798      	blx	r3
    12ae:	bd10      	pop	{r4, pc}
    12b0:	200005a4 	.word	0x200005a4
    12b4:	00002065 	.word	0x00002065
    12b8:	00002c99 	.word	0x00002c99

000012bc <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    12bc:	b508      	push	{r3, lr}
	return _event_system_init();
    12be:	4b01      	ldr	r3, [pc, #4]	; (12c4 <event_system_init+0x8>)
    12c0:	4798      	blx	r3
}
    12c2:	bd08      	pop	{r3, pc}
    12c4:	000020d9 	.word	0x000020d9

000012c8 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    12c8:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    12ca:	8843      	ldrh	r3, [r0, #2]
    12cc:	f413 7f80 	tst.w	r3, #256	; 0x100
    12d0:	d102      	bne.n	12d8 <i2c_tx_complete+0x10>
		if (i2c->i2c_cb.tx_complete) {
    12d2:	6b43      	ldr	r3, [r0, #52]	; 0x34
    12d4:	b103      	cbz	r3, 12d8 <i2c_tx_complete+0x10>
			i2c->i2c_cb.tx_complete(i2c);
    12d6:	4798      	blx	r3
    12d8:	bd08      	pop	{r3, pc}

000012da <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    12da:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    12dc:	8843      	ldrh	r3, [r0, #2]
    12de:	f413 7f80 	tst.w	r3, #256	; 0x100
    12e2:	d102      	bne.n	12ea <i2c_rx_complete+0x10>
		if (i2c->i2c_cb.rx_complete) {
    12e4:	6b83      	ldr	r3, [r0, #56]	; 0x38
    12e6:	b103      	cbz	r3, 12ea <i2c_rx_complete+0x10>
			i2c->i2c_cb.rx_complete(i2c);
    12e8:	4798      	blx	r3
    12ea:	bd08      	pop	{r3, pc}

000012ec <i2c_error>:
		}
	}
}

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    12ec:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    12ee:	8843      	ldrh	r3, [r0, #2]
    12f0:	f413 7f80 	tst.w	r3, #256	; 0x100
    12f4:	d102      	bne.n	12fc <i2c_error+0x10>
		if (i2c->i2c_cb.error) {
    12f6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    12f8:	b103      	cbz	r3, 12fc <i2c_error+0x10>
			i2c->i2c_cb.error(i2c, error);
    12fa:	4798      	blx	r3
    12fc:	bd08      	pop	{r3, pc}
	...

00001300 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    1300:	b510      	push	{r4, lr}
    1302:	b084      	sub	sp, #16
    1304:	4614      	mov	r4, r2
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    1306:	8a83      	ldrh	r3, [r0, #20]
    1308:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    130c:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
    130e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    1312:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
    1316:	9103      	str	r1, [sp, #12]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    1318:	a901      	add	r1, sp, #4
    131a:	3828      	subs	r0, #40	; 0x28
    131c:	4b03      	ldr	r3, [pc, #12]	; (132c <i2c_m_async_write+0x2c>)
    131e:	4798      	blx	r3
		/* error occurred */
		return ret;
	}

	return (int32_t)n;
}
    1320:	2800      	cmp	r0, #0
    1322:	bf08      	it	eq
    1324:	4620      	moveq	r0, r4
    1326:	b004      	add	sp, #16
    1328:	bd10      	pop	{r4, pc}
    132a:	bf00      	nop
    132c:	00002829 	.word	0x00002829

00001330 <i2c_m_async_read>:
{
    1330:	b510      	push	{r4, lr}
    1332:	b084      	sub	sp, #16
    1334:	4614      	mov	r4, r2
	msg.addr   = i2c->slave_addr;
    1336:	8a83      	ldrh	r3, [r0, #20]
    1338:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    133c:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    133e:	f248 0301 	movw	r3, #32769	; 0x8001
    1342:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
    1346:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    1348:	a901      	add	r1, sp, #4
    134a:	3828      	subs	r0, #40	; 0x28
    134c:	4b03      	ldr	r3, [pc, #12]	; (135c <i2c_m_async_read+0x2c>)
    134e:	4798      	blx	r3
}
    1350:	2800      	cmp	r0, #0
    1352:	bf08      	it	eq
    1354:	4620      	moveq	r0, r4
    1356:	b004      	add	sp, #16
    1358:	bd10      	pop	{r4, pc}
    135a:	bf00      	nop
    135c:	00002829 	.word	0x00002829

00001360 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    1360:	b570      	push	{r4, r5, r6, lr}
    1362:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
    1364:	4604      	mov	r4, r0
    1366:	2289      	movs	r2, #137	; 0x89
    1368:	490f      	ldr	r1, [pc, #60]	; (13a8 <i2c_m_async_init+0x48>)
    136a:	3000      	adds	r0, #0
    136c:	bf18      	it	ne
    136e:	2001      	movne	r0, #1
    1370:	4b0e      	ldr	r3, [pc, #56]	; (13ac <i2c_m_async_init+0x4c>)
    1372:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    1374:	4629      	mov	r1, r5
    1376:	4620      	mov	r0, r4
    1378:	4b0d      	ldr	r3, [pc, #52]	; (13b0 <i2c_m_async_init+0x50>)
    137a:	4798      	blx	r3
	if (init_status) {
    137c:	4605      	mov	r5, r0
    137e:	b108      	cbz	r0, 1384 <i2c_m_async_init+0x24>
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);

	return ERR_NONE;
}
    1380:	4628      	mov	r0, r5
    1382:	bd70      	pop	{r4, r5, r6, pc}
	i2c->io.read  = i2c_m_async_read;
    1384:	4b0b      	ldr	r3, [pc, #44]	; (13b4 <i2c_m_async_init+0x54>)
    1386:	62e3      	str	r3, [r4, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    1388:	4b0b      	ldr	r3, [pc, #44]	; (13b8 <i2c_m_async_init+0x58>)
    138a:	62a3      	str	r3, [r4, #40]	; 0x28
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    138c:	4a0b      	ldr	r2, [pc, #44]	; (13bc <i2c_m_async_init+0x5c>)
    138e:	2101      	movs	r1, #1
    1390:	4620      	mov	r0, r4
    1392:	4e0b      	ldr	r6, [pc, #44]	; (13c0 <i2c_m_async_init+0x60>)
    1394:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    1396:	4a0b      	ldr	r2, [pc, #44]	; (13c4 <i2c_m_async_init+0x64>)
    1398:	2102      	movs	r1, #2
    139a:	4620      	mov	r0, r4
    139c:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    139e:	4a0a      	ldr	r2, [pc, #40]	; (13c8 <i2c_m_async_init+0x68>)
    13a0:	2100      	movs	r1, #0
    13a2:	4620      	mov	r0, r4
    13a4:	47b0      	blx	r6
	return ERR_NONE;
    13a6:	e7eb      	b.n	1380 <i2c_m_async_init+0x20>
    13a8:	000058f4 	.word	0x000058f4
    13ac:	00001b89 	.word	0x00001b89
    13b0:	000027a9 	.word	0x000027a9
    13b4:	00001331 	.word	0x00001331
    13b8:	00001301 	.word	0x00001301
    13bc:	000012c9 	.word	0x000012c9
    13c0:	00002959 	.word	0x00002959
    13c4:	000012db 	.word	0x000012db
    13c8:	000012ed 	.word	0x000012ed

000013cc <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    13cc:	b538      	push	{r3, r4, r5, lr}
    13ce:	460d      	mov	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
    13d0:	4604      	mov	r4, r0
    13d2:	b1b8      	cbz	r0, 1404 <spi_m_sync_init+0x38>
    13d4:	1c08      	adds	r0, r1, #0
    13d6:	bf18      	it	ne
    13d8:	2001      	movne	r0, #1
    13da:	2240      	movs	r2, #64	; 0x40
    13dc:	490a      	ldr	r1, [pc, #40]	; (1408 <spi_m_sync_init+0x3c>)
    13de:	4b0b      	ldr	r3, [pc, #44]	; (140c <spi_m_sync_init+0x40>)
    13e0:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    13e2:	4620      	mov	r0, r4
    13e4:	f840 5f04 	str.w	r5, [r0, #4]!
	rc            = _spi_m_sync_init(&spi->dev, hw);
    13e8:	4629      	mov	r1, r5
    13ea:	4b09      	ldr	r3, [pc, #36]	; (1410 <spi_m_sync_init+0x44>)
    13ec:	4798      	blx	r3

	if (rc < 0) {
    13ee:	2800      	cmp	r0, #0
    13f0:	db07      	blt.n	1402 <spi_m_sync_init+0x36>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    13f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    13f6:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
    13f8:	4b06      	ldr	r3, [pc, #24]	; (1414 <spi_m_sync_init+0x48>)
    13fa:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
    13fc:	4b06      	ldr	r3, [pc, #24]	; (1418 <spi_m_sync_init+0x4c>)
    13fe:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
    1400:	2000      	movs	r0, #0
}
    1402:	bd38      	pop	{r3, r4, r5, pc}
    1404:	2000      	movs	r0, #0
    1406:	e7e8      	b.n	13da <spi_m_sync_init+0xe>
    1408:	00005914 	.word	0x00005914
    140c:	00001b89 	.word	0x00001b89
    1410:	00002a15 	.word	0x00002a15
    1414:	00001499 	.word	0x00001499
    1418:	0000145d 	.word	0x0000145d

0000141c <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    141c:	b530      	push	{r4, r5, lr}
    141e:	b085      	sub	sp, #20
    1420:	460c      	mov	r4, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    1422:	4605      	mov	r5, r0
    1424:	b190      	cbz	r0, 144c <spi_m_sync_transfer+0x30>
    1426:	1c08      	adds	r0, r1, #0
    1428:	bf18      	it	ne
    142a:	2001      	movne	r0, #1
    142c:	22b3      	movs	r2, #179	; 0xb3
    142e:	4908      	ldr	r1, [pc, #32]	; (1450 <spi_m_sync_transfer+0x34>)
    1430:	4b08      	ldr	r3, [pc, #32]	; (1454 <spi_m_sync_transfer+0x38>)
    1432:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    1434:	6823      	ldr	r3, [r4, #0]
    1436:	9301      	str	r3, [sp, #4]
	msg.rxbuf = p_xfer->rxbuf;
    1438:	6863      	ldr	r3, [r4, #4]
    143a:	9302      	str	r3, [sp, #8]
	msg.size  = p_xfer->size;
    143c:	68a3      	ldr	r3, [r4, #8]
    143e:	9303      	str	r3, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
    1440:	a901      	add	r1, sp, #4
    1442:	1d28      	adds	r0, r5, #4
    1444:	4b04      	ldr	r3, [pc, #16]	; (1458 <spi_m_sync_transfer+0x3c>)
    1446:	4798      	blx	r3
}
    1448:	b005      	add	sp, #20
    144a:	bd30      	pop	{r4, r5, pc}
    144c:	2000      	movs	r0, #0
    144e:	e7ed      	b.n	142c <spi_m_sync_transfer+0x10>
    1450:	00005914 	.word	0x00005914
    1454:	00001b89 	.word	0x00001b89
    1458:	00002ba5 	.word	0x00002ba5

0000145c <_spi_m_sync_io_write>:
{
    145c:	b570      	push	{r4, r5, r6, lr}
    145e:	b084      	sub	sp, #16
    1460:	460e      	mov	r6, r1
    1462:	4615      	mov	r5, r2
	ASSERT(io);
    1464:	4604      	mov	r4, r0
    1466:	22a3      	movs	r2, #163	; 0xa3
    1468:	4908      	ldr	r1, [pc, #32]	; (148c <_spi_m_sync_io_write+0x30>)
    146a:	3000      	adds	r0, #0
    146c:	bf18      	it	ne
    146e:	2001      	movne	r0, #1
    1470:	4b07      	ldr	r3, [pc, #28]	; (1490 <_spi_m_sync_io_write+0x34>)
    1472:	4798      	blx	r3
	xfer.rxbuf = 0;
    1474:	2300      	movs	r3, #0
    1476:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
    1478:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
    147a:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    147c:	a901      	add	r1, sp, #4
    147e:	f1a4 000c 	sub.w	r0, r4, #12
    1482:	4b04      	ldr	r3, [pc, #16]	; (1494 <_spi_m_sync_io_write+0x38>)
    1484:	4798      	blx	r3
}
    1486:	b004      	add	sp, #16
    1488:	bd70      	pop	{r4, r5, r6, pc}
    148a:	bf00      	nop
    148c:	00005914 	.word	0x00005914
    1490:	00001b89 	.word	0x00001b89
    1494:	0000141d 	.word	0x0000141d

00001498 <_spi_m_sync_io_read>:
{
    1498:	b570      	push	{r4, r5, r6, lr}
    149a:	b084      	sub	sp, #16
    149c:	460e      	mov	r6, r1
    149e:	4615      	mov	r5, r2
	ASSERT(io);
    14a0:	4604      	mov	r4, r0
    14a2:	2287      	movs	r2, #135	; 0x87
    14a4:	4908      	ldr	r1, [pc, #32]	; (14c8 <_spi_m_sync_io_read+0x30>)
    14a6:	3000      	adds	r0, #0
    14a8:	bf18      	it	ne
    14aa:	2001      	movne	r0, #1
    14ac:	4b07      	ldr	r3, [pc, #28]	; (14cc <_spi_m_sync_io_read+0x34>)
    14ae:	4798      	blx	r3
	xfer.rxbuf = buf;
    14b0:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
    14b2:	2300      	movs	r3, #0
    14b4:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
    14b6:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    14b8:	a901      	add	r1, sp, #4
    14ba:	f1a4 000c 	sub.w	r0, r4, #12
    14be:	4b04      	ldr	r3, [pc, #16]	; (14d0 <_spi_m_sync_io_read+0x38>)
    14c0:	4798      	blx	r3
}
    14c2:	b004      	add	sp, #16
    14c4:	bd70      	pop	{r4, r5, r6, pc}
    14c6:	bf00      	nop
    14c8:	00005914 	.word	0x00005914
    14cc:	00001b89 	.word	0x00001b89
    14d0:	0000141d 	.word	0x0000141d

000014d4 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    14d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    14d6:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    14d8:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    14da:	b12f      	cbz	r7, 14e8 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    14dc:	688d      	ldr	r5, [r1, #8]
    14de:	463c      	mov	r4, r7
    14e0:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    14e2:	f1c2 0e01 	rsb	lr, r2, #1
    14e6:	e00b      	b.n	1500 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    14e8:	4b0e      	ldr	r3, [pc, #56]	; (1524 <timer_add_timer_task+0x50>)
    14ea:	4798      	blx	r3
		return;
    14ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    14ee:	4473      	add	r3, lr
    14f0:	68a0      	ldr	r0, [r4, #8]
    14f2:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    14f4:	42ab      	cmp	r3, r5
    14f6:	d20a      	bcs.n	150e <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    14f8:	6823      	ldr	r3, [r4, #0]
    14fa:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    14fc:	b153      	cbz	r3, 1514 <timer_add_timer_task+0x40>
    14fe:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    1500:	6863      	ldr	r3, [r4, #4]
    1502:	4293      	cmp	r3, r2
    1504:	d8f3      	bhi.n	14ee <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    1506:	68a0      	ldr	r0, [r4, #8]
    1508:	4403      	add	r3, r0
    150a:	1a9b      	subs	r3, r3, r2
    150c:	e7f2      	b.n	14f4 <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    150e:	42a7      	cmp	r7, r4
    1510:	d004      	beq.n	151c <timer_add_timer_task+0x48>
    1512:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    1514:	4620      	mov	r0, r4
    1516:	4b04      	ldr	r3, [pc, #16]	; (1528 <timer_add_timer_task+0x54>)
    1518:	4798      	blx	r3
    151a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    151c:	4660      	mov	r0, ip
    151e:	4b01      	ldr	r3, [pc, #4]	; (1524 <timer_add_timer_task+0x50>)
    1520:	4798      	blx	r3
    1522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1524:	00001bb1 	.word	0x00001bb1
    1528:	00001bdd 	.word	0x00001bdd

0000152c <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    152c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    1530:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    1532:	6907      	ldr	r7, [r0, #16]
    1534:	3701      	adds	r7, #1
    1536:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    1538:	7e03      	ldrb	r3, [r0, #24]
    153a:	f013 0f01 	tst.w	r3, #1
    153e:	d113      	bne.n	1568 <timer_process_counted+0x3c>
    1540:	7e03      	ldrb	r3, [r0, #24]
    1542:	f013 0f02 	tst.w	r3, #2
    1546:	d10f      	bne.n	1568 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    1548:	b354      	cbz	r4, 15a0 <timer_process_counted+0x74>
    154a:	6863      	ldr	r3, [r4, #4]
    154c:	1afb      	subs	r3, r7, r3
    154e:	68a2      	ldr	r2, [r4, #8]
    1550:	4293      	cmp	r3, r2
    1552:	d307      	bcc.n	1564 <timer_process_counted+0x38>
    1554:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    1556:	f100 0814 	add.w	r8, r0, #20
    155a:	f8df 9048 	ldr.w	r9, [pc, #72]	; 15a4 <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    155e:	f8df a048 	ldr.w	sl, [pc, #72]	; 15a8 <timer_process_counted+0x7c>
    1562:	e012      	b.n	158a <timer_process_counted+0x5e>
    1564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    1568:	7e03      	ldrb	r3, [r0, #24]
    156a:	f043 0302 	orr.w	r3, r3, #2
    156e:	7603      	strb	r3, [r0, #24]
		return;
    1570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1574:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    1576:	68e3      	ldr	r3, [r4, #12]
    1578:	4620      	mov	r0, r4
    157a:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    157c:	b185      	cbz	r5, 15a0 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    157e:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    1580:	686b      	ldr	r3, [r5, #4]
    1582:	1afb      	subs	r3, r7, r3
    1584:	68aa      	ldr	r2, [r5, #8]
    1586:	4293      	cmp	r3, r2
    1588:	d30a      	bcc.n	15a0 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    158a:	4640      	mov	r0, r8
    158c:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    158e:	7c23      	ldrb	r3, [r4, #16]
    1590:	2b01      	cmp	r3, #1
    1592:	d1ef      	bne.n	1574 <timer_process_counted+0x48>
			tmp->time_label = time;
    1594:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    1596:	463a      	mov	r2, r7
    1598:	4621      	mov	r1, r4
    159a:	4640      	mov	r0, r8
    159c:	47d0      	blx	sl
    159e:	e7e9      	b.n	1574 <timer_process_counted+0x48>
    15a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    15a4:	00001c25 	.word	0x00001c25
    15a8:	000014d5 	.word	0x000014d5

000015ac <timer_init>:
{
    15ac:	b538      	push	{r3, r4, r5, lr}
    15ae:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    15b0:	4604      	mov	r4, r0
    15b2:	b178      	cbz	r0, 15d4 <timer_init+0x28>
    15b4:	1c08      	adds	r0, r1, #0
    15b6:	bf18      	it	ne
    15b8:	2001      	movne	r0, #1
    15ba:	223b      	movs	r2, #59	; 0x3b
    15bc:	4906      	ldr	r1, [pc, #24]	; (15d8 <timer_init+0x2c>)
    15be:	4b07      	ldr	r3, [pc, #28]	; (15dc <timer_init+0x30>)
    15c0:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    15c2:	4629      	mov	r1, r5
    15c4:	4620      	mov	r0, r4
    15c6:	4b06      	ldr	r3, [pc, #24]	; (15e0 <timer_init+0x34>)
    15c8:	4798      	blx	r3
	descr->time                           = 0;
    15ca:	2000      	movs	r0, #0
    15cc:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    15ce:	4b05      	ldr	r3, [pc, #20]	; (15e4 <timer_init+0x38>)
    15d0:	6023      	str	r3, [r4, #0]
}
    15d2:	bd38      	pop	{r3, r4, r5, pc}
    15d4:	2000      	movs	r0, #0
    15d6:	e7f0      	b.n	15ba <timer_init+0xe>
    15d8:	00005930 	.word	0x00005930
    15dc:	00001b89 	.word	0x00001b89
    15e0:	00002331 	.word	0x00002331
    15e4:	0000152d 	.word	0x0000152d

000015e8 <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    15e8:	4b0f      	ldr	r3, [pc, #60]	; (1628 <_usb_d_find_ep+0x40>)
    15ea:	7859      	ldrb	r1, [r3, #1]
    15ec:	4288      	cmp	r0, r1
    15ee:	d018      	beq.n	1622 <_usb_d_find_ep+0x3a>
{
    15f0:	b430      	push	{r4, r5}
    15f2:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    15f4:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    15f6:	f000 050f 	and.w	r5, r0, #15
    15fa:	e007      	b.n	160c <_usb_d_find_ep+0x24>
    15fc:	3301      	adds	r3, #1
    15fe:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1600:	2b04      	cmp	r3, #4
    1602:	d009      	beq.n	1618 <_usb_d_find_ep+0x30>
    1604:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    1606:	7851      	ldrb	r1, [r2, #1]
    1608:	4281      	cmp	r1, r0
    160a:	d007      	beq.n	161c <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    160c:	7814      	ldrb	r4, [r2, #0]
    160e:	2c00      	cmp	r4, #0
    1610:	d1f4      	bne.n	15fc <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    1612:	428d      	cmp	r5, r1
    1614:	d1f2      	bne.n	15fc <_usb_d_find_ep+0x14>
    1616:	e001      	b.n	161c <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
    1618:	f04f 33ff 	mov.w	r3, #4294967295
}
    161c:	4618      	mov	r0, r3
    161e:	bc30      	pop	{r4, r5}
    1620:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1622:	2300      	movs	r3, #0
}
    1624:	4618      	mov	r0, r3
    1626:	4770      	bx	lr
    1628:	200005a8 	.word	0x200005a8

0000162c <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    162c:	2000      	movs	r0, #0
    162e:	4770      	bx	lr

00001630 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    1630:	b538      	push	{r3, r4, r5, lr}
    1632:	4604      	mov	r4, r0
    1634:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    1636:	4b09      	ldr	r3, [pc, #36]	; (165c <usb_d_cb_trans_more+0x2c>)
    1638:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    163a:	4b09      	ldr	r3, [pc, #36]	; (1660 <usb_d_cb_trans_more+0x30>)
    163c:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    1640:	789b      	ldrb	r3, [r3, #2]
    1642:	2b03      	cmp	r3, #3
    1644:	d001      	beq.n	164a <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    1646:	2000      	movs	r0, #0
}
    1648:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
    164a:	4b05      	ldr	r3, [pc, #20]	; (1660 <usb_d_cb_trans_more+0x30>)
    164c:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    1650:	6983      	ldr	r3, [r0, #24]
    1652:	4629      	mov	r1, r5
    1654:	4620      	mov	r0, r4
    1656:	4798      	blx	r3
    1658:	bd38      	pop	{r3, r4, r5, pc}
    165a:	bf00      	nop
    165c:	000015e9 	.word	0x000015e9
    1660:	200005a8 	.word	0x200005a8

00001664 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    1664:	b5f0      	push	{r4, r5, r6, r7, lr}
    1666:	b085      	sub	sp, #20
    1668:	4606      	mov	r6, r0
    166a:	460d      	mov	r5, r1
    166c:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    166e:	4b4d      	ldr	r3, [pc, #308]	; (17a4 <_usb_d_cb_trans_done+0x140>)
    1670:	4798      	blx	r3
    1672:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    1674:	2d00      	cmp	r5, #0
    1676:	d15b      	bne.n	1730 <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
    1678:	4a4b      	ldr	r2, [pc, #300]	; (17a8 <_usb_d_cb_trans_done+0x144>)
    167a:	0143      	lsls	r3, r0, #5
    167c:	18d1      	adds	r1, r2, r3
    167e:	2000      	movs	r0, #0
    1680:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1682:	5cd3      	ldrb	r3, [r2, r3]
    1684:	b173      	cbz	r3, 16a4 <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    1686:	4b48      	ldr	r3, [pc, #288]	; (17a8 <_usb_d_cb_trans_done+0x144>)
    1688:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    168c:	2201      	movs	r2, #1
    168e:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    1690:	4845      	ldr	r0, [pc, #276]	; (17a8 <_usb_d_cb_trans_done+0x144>)
    1692:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    1696:	69c3      	ldr	r3, [r0, #28]
    1698:	463a      	mov	r2, r7
    169a:	78c1      	ldrb	r1, [r0, #3]
    169c:	4630      	mov	r0, r6
    169e:	4798      	blx	r3
}
    16a0:	b005      	add	sp, #20
    16a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
    16a4:	788b      	ldrb	r3, [r1, #2]
    16a6:	2b03      	cmp	r3, #3
    16a8:	d00b      	beq.n	16c2 <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    16aa:	483f      	ldr	r0, [pc, #252]	; (17a8 <_usb_d_cb_trans_done+0x144>)
    16ac:	eb00 1244 	add.w	r2, r0, r4, lsl #5
    16b0:	4614      	mov	r4, r2
    16b2:	69d3      	ldr	r3, [r2, #28]
    16b4:	320c      	adds	r2, #12
    16b6:	2100      	movs	r1, #0
    16b8:	7860      	ldrb	r0, [r4, #1]
    16ba:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    16bc:	2302      	movs	r3, #2
    16be:	70a3      	strb	r3, [r4, #2]
    16c0:	e7ee      	b.n	16a0 <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    16c2:	460b      	mov	r3, r1
    16c4:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    16c8:	460a      	mov	r2, r1
    16ca:	69ce      	ldr	r6, [r1, #28]
    16cc:	320c      	adds	r2, #12
    16ce:	2101      	movs	r1, #1
    16d0:	7858      	ldrb	r0, [r3, #1]
    16d2:	47b0      	blx	r6
		if (err) {
    16d4:	b1a0      	cbz	r0, 1700 <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    16d6:	4b34      	ldr	r3, [pc, #208]	; (17a8 <_usb_d_cb_trans_done+0x144>)
    16d8:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    16dc:	2205      	movs	r2, #5
    16de:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    16e0:	2202      	movs	r2, #2
    16e2:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    16e4:	2d00      	cmp	r5, #0
    16e6:	db09      	blt.n	16fc <_usb_d_cb_trans_done+0x98>
    16e8:	482f      	ldr	r0, [pc, #188]	; (17a8 <_usb_d_cb_trans_done+0x144>)
    16ea:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    16ee:	7840      	ldrb	r0, [r0, #1]
    16f0:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    16f4:	2101      	movs	r1, #1
    16f6:	4b2d      	ldr	r3, [pc, #180]	; (17ac <_usb_d_cb_trans_done+0x148>)
    16f8:	4798      	blx	r3
    16fa:	e7d1      	b.n	16a0 <_usb_d_cb_trans_done+0x3c>
    16fc:	7858      	ldrb	r0, [r3, #1]
    16fe:	e7f9      	b.n	16f4 <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    1700:	4829      	ldr	r0, [pc, #164]	; (17a8 <_usb_d_cb_trans_done+0x144>)
    1702:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    1706:	2304      	movs	r3, #4
    1708:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    170a:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
    170c:	2200      	movs	r2, #0
    170e:	9201      	str	r2, [sp, #4]
    1710:	9202      	str	r2, [sp, #8]
    1712:	4295      	cmp	r5, r2
    1714:	bfac      	ite	ge
    1716:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    171a:	f003 030f 	andlt.w	r3, r3, #15
    171e:	f88d 300c 	strb.w	r3, [sp, #12]
    1722:	2301      	movs	r3, #1
    1724:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    1728:	a801      	add	r0, sp, #4
    172a:	4b21      	ldr	r3, [pc, #132]	; (17b0 <_usb_d_cb_trans_done+0x14c>)
    172c:	4798      	blx	r3
    172e:	e7b7      	b.n	16a0 <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
    1730:	2d01      	cmp	r5, #1
    1732:	d00a      	beq.n	174a <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
    1734:	2d02      	cmp	r5, #2
    1736:	d01c      	beq.n	1772 <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
    1738:	2d03      	cmp	r5, #3
    173a:	d02a      	beq.n	1792 <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    173c:	4b1a      	ldr	r3, [pc, #104]	; (17a8 <_usb_d_cb_trans_done+0x144>)
    173e:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    1742:	2206      	movs	r2, #6
    1744:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    1746:	70da      	strb	r2, [r3, #3]
    1748:	e7a2      	b.n	1690 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
    174a:	4a17      	ldr	r2, [pc, #92]	; (17a8 <_usb_d_cb_trans_done+0x144>)
    174c:	0143      	lsls	r3, r0, #5
    174e:	18d1      	adds	r1, r2, r3
    1750:	2002      	movs	r0, #2
    1752:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1754:	5cd3      	ldrb	r3, [r2, r3]
    1756:	b12b      	cbz	r3, 1764 <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    1758:	4b13      	ldr	r3, [pc, #76]	; (17a8 <_usb_d_cb_trans_done+0x144>)
    175a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    175e:	2205      	movs	r2, #5
    1760:	709a      	strb	r2, [r3, #2]
    1762:	e795      	b.n	1690 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    1764:	460b      	mov	r3, r1
    1766:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1768:	2100      	movs	r1, #0
    176a:	4630      	mov	r0, r6
    176c:	4b0f      	ldr	r3, [pc, #60]	; (17ac <_usb_d_cb_trans_done+0x148>)
    176e:	4798      	blx	r3
    1770:	e78e      	b.n	1690 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    1772:	4a0d      	ldr	r2, [pc, #52]	; (17a8 <_usb_d_cb_trans_done+0x144>)
    1774:	0143      	lsls	r3, r0, #5
    1776:	18d1      	adds	r1, r2, r3
    1778:	2004      	movs	r0, #4
    177a:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    177c:	5cd3      	ldrb	r3, [r2, r3]
    177e:	b12b      	cbz	r3, 178c <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    1780:	4b09      	ldr	r3, [pc, #36]	; (17a8 <_usb_d_cb_trans_done+0x144>)
    1782:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1786:	2201      	movs	r2, #1
    1788:	709a      	strb	r2, [r3, #2]
    178a:	e781      	b.n	1690 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    178c:	2302      	movs	r3, #2
    178e:	708b      	strb	r3, [r1, #2]
			return;
    1790:	e786      	b.n	16a0 <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    1792:	4b05      	ldr	r3, [pc, #20]	; (17a8 <_usb_d_cb_trans_done+0x144>)
    1794:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    1798:	2200      	movs	r2, #0
    179a:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    179c:	2205      	movs	r2, #5
    179e:	70da      	strb	r2, [r3, #3]
    17a0:	e776      	b.n	1690 <_usb_d_cb_trans_done+0x2c>
    17a2:	bf00      	nop
    17a4:	000015e9 	.word	0x000015e9
    17a8:	200005a8 	.word	0x200005a8
    17ac:	00003b75 	.word	0x00003b75
    17b0:	00003d1d 	.word	0x00003d1d

000017b4 <usb_d_cb_trans_setup>:
{
    17b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    17b8:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    17ba:	4b1c      	ldr	r3, [pc, #112]	; (182c <usb_d_cb_trans_setup+0x78>)
    17bc:	4798      	blx	r3
    17be:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
    17c0:	4c1b      	ldr	r4, [pc, #108]	; (1830 <usb_d_cb_trans_setup+0x7c>)
    17c2:	eb04 1440 	add.w	r4, r4, r0, lsl #5
    17c6:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    17c8:	4621      	mov	r1, r4
    17ca:	4628      	mov	r0, r5
    17cc:	4b19      	ldr	r3, [pc, #100]	; (1834 <usb_d_cb_trans_setup+0x80>)
    17ce:	4798      	blx	r3
	if (n != 8) {
    17d0:	b2c0      	uxtb	r0, r0
    17d2:	2808      	cmp	r0, #8
    17d4:	d009      	beq.n	17ea <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    17d6:	2101      	movs	r1, #1
    17d8:	4628      	mov	r0, r5
    17da:	4c17      	ldr	r4, [pc, #92]	; (1838 <usb_d_cb_trans_setup+0x84>)
    17dc:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    17de:	2101      	movs	r1, #1
    17e0:	f045 0080 	orr.w	r0, r5, #128	; 0x80
    17e4:	47a0      	blx	r4
		return;
    17e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    17ea:	2100      	movs	r1, #0
    17ec:	4628      	mov	r0, r5
    17ee:	4f12      	ldr	r7, [pc, #72]	; (1838 <usb_d_cb_trans_setup+0x84>)
    17f0:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    17f2:	f045 0880 	orr.w	r8, r5, #128	; 0x80
    17f6:	2100      	movs	r1, #0
    17f8:	4640      	mov	r0, r8
    17fa:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    17fc:	4b0c      	ldr	r3, [pc, #48]	; (1830 <usb_d_cb_trans_setup+0x7c>)
    17fe:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    1802:	2201      	movs	r2, #1
    1804:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    1806:	695b      	ldr	r3, [r3, #20]
    1808:	4621      	mov	r1, r4
    180a:	4628      	mov	r0, r5
    180c:	4798      	blx	r3
    180e:	b108      	cbz	r0, 1814 <usb_d_cb_trans_setup+0x60>
    1810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    1814:	4b06      	ldr	r3, [pc, #24]	; (1830 <usb_d_cb_trans_setup+0x7c>)
    1816:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    181a:	2305      	movs	r3, #5
    181c:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    181e:	2101      	movs	r1, #1
    1820:	4628      	mov	r0, r5
    1822:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    1824:	2101      	movs	r1, #1
    1826:	4640      	mov	r0, r8
    1828:	47b8      	blx	r7
    182a:	e7f1      	b.n	1810 <usb_d_cb_trans_setup+0x5c>
    182c:	000015e9 	.word	0x000015e9
    1830:	200005a8 	.word	0x200005a8
    1834:	00003cbd 	.word	0x00003cbd
    1838:	00003b75 	.word	0x00003b75

0000183c <usb_d_init>:

int32_t usb_d_init(void)
{
    183c:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    183e:	4b11      	ldr	r3, [pc, #68]	; (1884 <usb_d_init+0x48>)
    1840:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    1842:	2800      	cmp	r0, #0
    1844:	db1c      	blt.n	1880 <usb_d_init+0x44>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    1846:	4c10      	ldr	r4, [pc, #64]	; (1888 <usb_d_init+0x4c>)
    1848:	2280      	movs	r2, #128	; 0x80
    184a:	2100      	movs	r1, #0
    184c:	4620      	mov	r0, r4
    184e:	4b0f      	ldr	r3, [pc, #60]	; (188c <usb_d_init+0x50>)
    1850:	4798      	blx	r3
    1852:	4623      	mov	r3, r4
    1854:	f104 0080 	add.w	r0, r4, #128	; 0x80
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    1858:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    185a:	4a0d      	ldr	r2, [pc, #52]	; (1890 <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    185c:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    185e:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    1860:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    1862:	61da      	str	r2, [r3, #28]
    1864:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1866:	4283      	cmp	r3, r0
    1868:	d1f8      	bne.n	185c <usb_d_init+0x20>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    186a:	490a      	ldr	r1, [pc, #40]	; (1894 <usb_d_init+0x58>)
    186c:	2000      	movs	r0, #0
    186e:	4c0a      	ldr	r4, [pc, #40]	; (1898 <usb_d_init+0x5c>)
    1870:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    1872:	490a      	ldr	r1, [pc, #40]	; (189c <usb_d_init+0x60>)
    1874:	2001      	movs	r0, #1
    1876:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    1878:	4909      	ldr	r1, [pc, #36]	; (18a0 <usb_d_init+0x64>)
    187a:	2002      	movs	r0, #2
    187c:	47a0      	blx	r4
	return ERR_NONE;
    187e:	2000      	movs	r0, #0
}
    1880:	bd10      	pop	{r4, pc}
    1882:	bf00      	nop
    1884:	00003569 	.word	0x00003569
    1888:	200005a8 	.word	0x200005a8
    188c:	000050ad 	.word	0x000050ad
    1890:	0000162d 	.word	0x0000162d
    1894:	000017b5 	.word	0x000017b5
    1898:	00003f21 	.word	0x00003f21
    189c:	00001631 	.word	0x00001631
    18a0:	00001665 	.word	0x00001665

000018a4 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    18a4:	b508      	push	{r3, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    18a6:	4b01      	ldr	r3, [pc, #4]	; (18ac <usb_d_register_callback+0x8>)
    18a8:	4798      	blx	r3
    18aa:	bd08      	pop	{r3, pc}
    18ac:	00003efd 	.word	0x00003efd

000018b0 <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
    18b0:	b508      	push	{r3, lr}
	return _usb_d_dev_enable();
    18b2:	4b01      	ldr	r3, [pc, #4]	; (18b8 <usb_d_enable+0x8>)
    18b4:	4798      	blx	r3
}
    18b6:	bd08      	pop	{r3, pc}
    18b8:	00003665 	.word	0x00003665

000018bc <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    18bc:	b508      	push	{r3, lr}
	_usb_d_dev_attach();
    18be:	4b01      	ldr	r3, [pc, #4]	; (18c4 <usb_d_attach+0x8>)
    18c0:	4798      	blx	r3
    18c2:	bd08      	pop	{r3, pc}
    18c4:	000036d1 	.word	0x000036d1

000018c8 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    18c8:	b508      	push	{r3, lr}
	_usb_d_dev_set_address(addr);
    18ca:	4b01      	ldr	r3, [pc, #4]	; (18d0 <usb_d_set_address+0x8>)
    18cc:	4798      	blx	r3
    18ce:	bd08      	pop	{r3, pc}
    18d0:	000036e3 	.word	0x000036e3

000018d4 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    18d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    18d6:	4606      	mov	r6, r0
    18d8:	460c      	mov	r4, r1
    18da:	4617      	mov	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    18dc:	4b0f      	ldr	r3, [pc, #60]	; (191c <usb_d_ep_init+0x48>)
    18de:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    18e0:	2800      	cmp	r0, #0
    18e2:	da14      	bge.n	190e <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    18e4:	20ff      	movs	r0, #255	; 0xff
    18e6:	4b0d      	ldr	r3, [pc, #52]	; (191c <usb_d_ep_init+0x48>)
    18e8:	4798      	blx	r3
		if (ep_index < 0) {
    18ea:	1e05      	subs	r5, r0, #0
    18ec:	db12      	blt.n	1914 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    18ee:	463a      	mov	r2, r7
    18f0:	4621      	mov	r1, r4
    18f2:	4630      	mov	r0, r6
    18f4:	4b0a      	ldr	r3, [pc, #40]	; (1920 <usb_d_ep_init+0x4c>)
    18f6:	4798      	blx	r3
	if (rc < 0) {
    18f8:	2800      	cmp	r0, #0
    18fa:	db0d      	blt.n	1918 <usb_d_ep_init+0x44>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    18fc:	4b09      	ldr	r3, [pc, #36]	; (1924 <usb_d_ep_init+0x50>)
    18fe:	0168      	lsls	r0, r5, #5
    1900:	181a      	adds	r2, r3, r0
    1902:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    1904:	f004 0403 	and.w	r4, r4, #3
    1908:	541c      	strb	r4, [r3, r0]
	return ERR_NONE;
    190a:	2000      	movs	r0, #0
    190c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    190e:	f06f 0013 	mvn.w	r0, #19
    1912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
    1914:	f06f 0014 	mvn.w	r0, #20
}
    1918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    191a:	bf00      	nop
    191c:	000015e9 	.word	0x000015e9
    1920:	000036f1 	.word	0x000036f1
    1924:	200005a8 	.word	0x200005a8

00001928 <usb_d_ep0_init>:
{
    1928:	b508      	push	{r3, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    192a:	4602      	mov	r2, r0
    192c:	2100      	movs	r1, #0
    192e:	4608      	mov	r0, r1
    1930:	4b01      	ldr	r3, [pc, #4]	; (1938 <usb_d_ep0_init+0x10>)
    1932:	4798      	blx	r3
}
    1934:	bd08      	pop	{r3, pc}
    1936:	bf00      	nop
    1938:	000018d5 	.word	0x000018d5

0000193c <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    193c:	b538      	push	{r3, r4, r5, lr}
    193e:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1940:	4b06      	ldr	r3, [pc, #24]	; (195c <usb_d_ep_deinit+0x20>)
    1942:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    1944:	1e04      	subs	r4, r0, #0
    1946:	db07      	blt.n	1958 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    1948:	4628      	mov	r0, r5
    194a:	4b05      	ldr	r3, [pc, #20]	; (1960 <usb_d_ep_deinit+0x24>)
    194c:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    194e:	4805      	ldr	r0, [pc, #20]	; (1964 <usb_d_ep_deinit+0x28>)
    1950:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    1954:	23ff      	movs	r3, #255	; 0xff
    1956:	7043      	strb	r3, [r0, #1]
    1958:	bd38      	pop	{r3, r4, r5, pc}
    195a:	bf00      	nop
    195c:	000015e9 	.word	0x000015e9
    1960:	00003809 	.word	0x00003809
    1964:	200005a8 	.word	0x200005a8

00001968 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    1968:	b538      	push	{r3, r4, r5, lr}
    196a:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    196c:	4b0e      	ldr	r3, [pc, #56]	; (19a8 <usb_d_ep_enable+0x40>)
    196e:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    1970:	1e04      	subs	r4, r0, #0
    1972:	db16      	blt.n	19a2 <usb_d_ep_enable+0x3a>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    1974:	0163      	lsls	r3, r4, #5
    1976:	4a0d      	ldr	r2, [pc, #52]	; (19ac <usb_d_ep_enable+0x44>)
    1978:	5cd3      	ldrb	r3, [r2, r3]
    197a:	2b00      	cmp	r3, #0
    197c:	bf0c      	ite	eq
    197e:	2202      	moveq	r2, #2
    1980:	2201      	movne	r2, #1
    1982:	4b0a      	ldr	r3, [pc, #40]	; (19ac <usb_d_ep_enable+0x44>)
    1984:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1988:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    198a:	4628      	mov	r0, r5
    198c:	4b08      	ldr	r3, [pc, #32]	; (19b0 <usb_d_ep_enable+0x48>)
    198e:	4798      	blx	r3
	if (rc < 0) {
    1990:	2800      	cmp	r0, #0
    1992:	db00      	blt.n	1996 <usb_d_ep_enable+0x2e>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    1994:	bd38      	pop	{r3, r4, r5, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    1996:	4b05      	ldr	r3, [pc, #20]	; (19ac <usb_d_ep_enable+0x44>)
    1998:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    199c:	2300      	movs	r3, #0
    199e:	70a3      	strb	r3, [r4, #2]
    19a0:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
    19a2:	f06f 0011 	mvn.w	r0, #17
    19a6:	e7f5      	b.n	1994 <usb_d_ep_enable+0x2c>
    19a8:	000015e9 	.word	0x000015e9
    19ac:	200005a8 	.word	0x200005a8
    19b0:	000038cd 	.word	0x000038cd

000019b4 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    19b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    19b8:	b086      	sub	sp, #24
    19ba:	4604      	mov	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    19bc:	7a07      	ldrb	r7, [r0, #8]
    19be:	4638      	mov	r0, r7
    19c0:	4b3f      	ldr	r3, [pc, #252]	; (1ac0 <usb_d_ep_transfer+0x10c>)
    19c2:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    19c4:	7a65      	ldrb	r5, [r4, #9]
	uint32_t              len = xfer->size;
    19c6:	f8d4 8004 	ldr.w	r8, [r4, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    19ca:	1e06      	subs	r6, r0, #0
    19cc:	db72      	blt.n	1ab4 <usb_d_ep_transfer+0x100>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    19ce:	a804      	add	r0, sp, #16
    19d0:	4b3c      	ldr	r3, [pc, #240]	; (1ac4 <usb_d_ep_transfer+0x110>)
    19d2:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    19d4:	4b3c      	ldr	r3, [pc, #240]	; (1ac8 <usb_d_ep_transfer+0x114>)
    19d6:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    19da:	789b      	ldrb	r3, [r3, #2]
    19dc:	f88d 3017 	strb.w	r3, [sp, #23]
	if (state == USB_EP_S_IDLE) {
    19e0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    19e4:	b2db      	uxtb	r3, r3
    19e6:	2b01      	cmp	r3, #1
    19e8:	d011      	beq.n	1a0e <usb_d_ep_transfer+0x5a>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    19ea:	a804      	add	r0, sp, #16
    19ec:	4b37      	ldr	r3, [pc, #220]	; (1acc <usb_d_ep_transfer+0x118>)
    19ee:	4798      	blx	r3
		switch (state) {
    19f0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    19f4:	b2db      	uxtb	r3, r3
    19f6:	2b05      	cmp	r3, #5
    19f8:	d05f      	beq.n	1aba <usb_d_ep_transfer+0x106>
    19fa:	2b06      	cmp	r3, #6
    19fc:	d023      	beq.n	1a46 <usb_d_ep_transfer+0x92>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    19fe:	2b00      	cmp	r3, #0
    1a00:	bf0c      	ite	eq
    1a02:	f06f 0012 	mvneq.w	r0, #18
    1a06:	2001      	movne	r0, #1
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    1a08:	b006      	add	sp, #24
    1a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    1a0e:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 1ac8 <usb_d_ep_transfer+0x114>
    1a12:	ea4f 1946 	mov.w	r9, r6, lsl #5
    1a16:	eb0a 0309 	add.w	r3, sl, r9
    1a1a:	2203      	movs	r2, #3
    1a1c:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    1a1e:	a804      	add	r0, sp, #16
    1a20:	4b2a      	ldr	r3, [pc, #168]	; (1acc <usb_d_ep_transfer+0x118>)
    1a22:	4798      	blx	r3
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1a24:	f81a 3009 	ldrb.w	r3, [sl, r9]
    1a28:	b183      	cbz	r3, 1a4c <usb_d_ep_transfer+0x98>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1a2a:	7a22      	ldrb	r2, [r4, #8]
    1a2c:	3500      	adds	r5, #0
    1a2e:	bf18      	it	ne
    1a30:	2501      	movne	r5, #1
	struct usb_d_transfer trans
    1a32:	6823      	ldr	r3, [r4, #0]
    1a34:	9301      	str	r3, [sp, #4]
    1a36:	f8cd 8008 	str.w	r8, [sp, #8]
    1a3a:	f017 0f80 	tst.w	r7, #128	; 0x80
    1a3e:	d119      	bne.n	1a74 <usb_d_ep_transfer+0xc0>
    1a40:	f002 030f 	and.w	r3, r2, #15
    1a44:	e018      	b.n	1a78 <usb_d_ep_transfer+0xc4>
			return -USB_ERROR;
    1a46:	f06f 000f 	mvn.w	r0, #15
    1a4a:	e7dd      	b.n	1a08 <usb_d_ep_transfer+0x54>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    1a4c:	4b1e      	ldr	r3, [pc, #120]	; (1ac8 <usb_d_ep_transfer+0x114>)
    1a4e:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    1a52:	7cda      	ldrb	r2, [r3, #19]
    1a54:	7c9d      	ldrb	r5, [r3, #18]
    1a56:	eb05 2502 	add.w	r5, r5, r2, lsl #8
    1a5a:	b2ad      	uxth	r5, r5
		if (req_len == 0) {
    1a5c:	b9a5      	cbnz	r5, 1a88 <usb_d_ep_transfer+0xd4>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    1a5e:	4b1a      	ldr	r3, [pc, #104]	; (1ac8 <usb_d_ep_transfer+0x114>)
    1a60:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    1a64:	2304      	movs	r3, #4
    1a66:	70b3      	strb	r3, [r6, #2]
			len                 = 0;
    1a68:	2300      	movs	r3, #0
			zlp                 = true;
    1a6a:	2501      	movs	r5, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1a6c:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    1a6e:	6821      	ldr	r1, [r4, #0]
    1a70:	9101      	str	r1, [sp, #4]
    1a72:	9302      	str	r3, [sp, #8]
    1a74:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    1a78:	f88d 300c 	strb.w	r3, [sp, #12]
    1a7c:	f88d 500d 	strb.w	r5, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    1a80:	a801      	add	r0, sp, #4
    1a82:	4b13      	ldr	r3, [pc, #76]	; (1ad0 <usb_d_ep_transfer+0x11c>)
    1a84:	4798      	blx	r3
	return rc;
    1a86:	e7bf      	b.n	1a08 <usb_d_ep_transfer+0x54>
    1a88:	4643      	mov	r3, r8
    1a8a:	45a8      	cmp	r8, r5
    1a8c:	bf28      	it	cs
    1a8e:	462b      	movcs	r3, r5
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    1a90:	4a0d      	ldr	r2, [pc, #52]	; (1ac8 <usb_d_ep_transfer+0x114>)
    1a92:	eb02 1646 	add.w	r6, r2, r6, lsl #5
			if (dir) {
    1a96:	f996 200c 	ldrsb.w	r2, [r6, #12]
    1a9a:	2a00      	cmp	r2, #0
    1a9c:	db05      	blt.n	1aaa <usb_d_ep_transfer+0xf6>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1a9e:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    1aa0:	6821      	ldr	r1, [r4, #0]
    1aa2:	9101      	str	r1, [sp, #4]
    1aa4:	9302      	str	r3, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1aa6:	2500      	movs	r5, #0
    1aa8:	e7ca      	b.n	1a40 <usb_d_ep_transfer+0x8c>
				zlp = (req_len > len);
    1aaa:	429d      	cmp	r5, r3
    1aac:	bf94      	ite	ls
    1aae:	2500      	movls	r5, #0
    1ab0:	2501      	movhi	r5, #1
    1ab2:	e7db      	b.n	1a6c <usb_d_ep_transfer+0xb8>
		return -USB_ERR_PARAM;
    1ab4:	f06f 0011 	mvn.w	r0, #17
    1ab8:	e7a6      	b.n	1a08 <usb_d_ep_transfer+0x54>
			return USB_HALTED;
    1aba:	2002      	movs	r0, #2
    1abc:	e7a4      	b.n	1a08 <usb_d_ep_transfer+0x54>
    1abe:	bf00      	nop
    1ac0:	000015e9 	.word	0x000015e9
    1ac4:	00003fbd 	.word	0x00003fbd
    1ac8:	200005a8 	.word	0x200005a8
    1acc:	00003fcb 	.word	0x00003fcb
    1ad0:	00003d1d 	.word	0x00003d1d

00001ad4 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    1ad4:	b538      	push	{r3, r4, r5, lr}
    1ad6:	4604      	mov	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    1ad8:	b141      	cbz	r1, 1aec <usb_d_ep_halt+0x18>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    1ada:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1adc:	bf0c      	ite	eq
    1ade:	2101      	moveq	r1, #1
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    1ae0:	2102      	movne	r1, #2
    1ae2:	4b13      	ldr	r3, [pc, #76]	; (1b30 <usb_d_ep_halt+0x5c>)
    1ae4:	4798      	blx	r3
    1ae6:	4603      	mov	r3, r0
	}
}
    1ae8:	4618      	mov	r0, r3
    1aea:	bd38      	pop	{r3, r4, r5, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    1aec:	4b11      	ldr	r3, [pc, #68]	; (1b34 <usb_d_ep_halt+0x60>)
    1aee:	4798      	blx	r3
	if (ep_index < 0) {
    1af0:	1e05      	subs	r5, r0, #0
    1af2:	db19      	blt.n	1b28 <usb_d_ep_halt+0x54>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    1af4:	2102      	movs	r1, #2
    1af6:	4620      	mov	r0, r4
    1af8:	4b0d      	ldr	r3, [pc, #52]	; (1b30 <usb_d_ep_halt+0x5c>)
    1afa:	4798      	blx	r3
    1afc:	4603      	mov	r3, r0
    1afe:	2800      	cmp	r0, #0
    1b00:	d0f2      	beq.n	1ae8 <usb_d_ep_halt+0x14>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1b02:	2100      	movs	r1, #0
    1b04:	4620      	mov	r0, r4
    1b06:	4b0a      	ldr	r3, [pc, #40]	; (1b30 <usb_d_ep_halt+0x5c>)
    1b08:	4798      	blx	r3
		if (rc < 0) {
    1b0a:	1e03      	subs	r3, r0, #0
    1b0c:	dbec      	blt.n	1ae8 <usb_d_ep_halt+0x14>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    1b0e:	4b0a      	ldr	r3, [pc, #40]	; (1b38 <usb_d_ep_halt+0x64>)
    1b10:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    1b14:	2201      	movs	r2, #1
    1b16:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    1b18:	2103      	movs	r1, #3
    1b1a:	70d9      	strb	r1, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    1b1c:	69db      	ldr	r3, [r3, #28]
    1b1e:	2200      	movs	r2, #0
    1b20:	4620      	mov	r0, r4
    1b22:	4798      	blx	r3
	return ERR_NONE;
    1b24:	2300      	movs	r3, #0
    1b26:	e7df      	b.n	1ae8 <usb_d_ep_halt+0x14>
		return -USB_ERR_PARAM;
    1b28:	f06f 0311 	mvn.w	r3, #17
    1b2c:	e7dc      	b.n	1ae8 <usb_d_ep_halt+0x14>
    1b2e:	bf00      	nop
    1b30:	00003b75 	.word	0x00003b75
    1b34:	000015e9 	.word	0x000015e9
    1b38:	200005a8 	.word	0x200005a8

00001b3c <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    1b3c:	b538      	push	{r3, r4, r5, lr}
    1b3e:	460d      	mov	r5, r1
    1b40:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    1b42:	4b0e      	ldr	r3, [pc, #56]	; (1b7c <usb_d_ep_register_callback+0x40>)
    1b44:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    1b46:	4b0e      	ldr	r3, [pc, #56]	; (1b80 <usb_d_ep_register_callback+0x44>)
    1b48:	2c00      	cmp	r4, #0
    1b4a:	bf08      	it	eq
    1b4c:	461c      	moveq	r4, r3
	if (ep_index < 0) {
    1b4e:	2800      	cmp	r0, #0
    1b50:	db13      	blt.n	1b7a <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
    1b52:	2d01      	cmp	r5, #1
    1b54:	d008      	beq.n	1b68 <usb_d_ep_register_callback+0x2c>
    1b56:	b115      	cbz	r5, 1b5e <usb_d_ep_register_callback+0x22>
    1b58:	2d02      	cmp	r5, #2
    1b5a:	d00a      	beq.n	1b72 <usb_d_ep_register_callback+0x36>
    1b5c:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    1b5e:	4b09      	ldr	r3, [pc, #36]	; (1b84 <usb_d_ep_register_callback+0x48>)
    1b60:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    1b64:	6144      	str	r4, [r0, #20]
		break;
    1b66:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    1b68:	4b06      	ldr	r3, [pc, #24]	; (1b84 <usb_d_ep_register_callback+0x48>)
    1b6a:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    1b6e:	6184      	str	r4, [r0, #24]
		break;
    1b70:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    1b72:	4b04      	ldr	r3, [pc, #16]	; (1b84 <usb_d_ep_register_callback+0x48>)
    1b74:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    1b78:	61c4      	str	r4, [r0, #28]
    1b7a:	bd38      	pop	{r3, r4, r5, pc}
    1b7c:	000015e9 	.word	0x000015e9
    1b80:	0000162d 	.word	0x0000162d
    1b84:	200005a8 	.word	0x200005a8

00001b88 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    1b88:	b900      	cbnz	r0, 1b8c <assert+0x4>
		__asm("BKPT #0");
    1b8a:	be00      	bkpt	0x0000
    1b8c:	4770      	bx	lr

00001b8e <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    1b8e:	6803      	ldr	r3, [r0, #0]
    1b90:	b14b      	cbz	r3, 1ba6 <is_list_element+0x18>
		if (it == element) {
    1b92:	428b      	cmp	r3, r1
    1b94:	d009      	beq.n	1baa <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    1b96:	681b      	ldr	r3, [r3, #0]
    1b98:	b11b      	cbz	r3, 1ba2 <is_list_element+0x14>
		if (it == element) {
    1b9a:	4299      	cmp	r1, r3
    1b9c:	d1fb      	bne.n	1b96 <is_list_element+0x8>
			return true;
    1b9e:	2001      	movs	r0, #1
		}
	}

	return false;
}
    1ba0:	4770      	bx	lr
	return false;
    1ba2:	2000      	movs	r0, #0
    1ba4:	4770      	bx	lr
    1ba6:	2000      	movs	r0, #0
    1ba8:	4770      	bx	lr
			return true;
    1baa:	2001      	movs	r0, #1
    1bac:	4770      	bx	lr
	...

00001bb0 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    1bb0:	b538      	push	{r3, r4, r5, lr}
    1bb2:	4604      	mov	r4, r0
    1bb4:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    1bb6:	4b06      	ldr	r3, [pc, #24]	; (1bd0 <list_insert_as_head+0x20>)
    1bb8:	4798      	blx	r3
    1bba:	f080 0001 	eor.w	r0, r0, #1
    1bbe:	2239      	movs	r2, #57	; 0x39
    1bc0:	4904      	ldr	r1, [pc, #16]	; (1bd4 <list_insert_as_head+0x24>)
    1bc2:	b2c0      	uxtb	r0, r0
    1bc4:	4b04      	ldr	r3, [pc, #16]	; (1bd8 <list_insert_as_head+0x28>)
    1bc6:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    1bc8:	6823      	ldr	r3, [r4, #0]
    1bca:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    1bcc:	6025      	str	r5, [r4, #0]
    1bce:	bd38      	pop	{r3, r4, r5, pc}
    1bd0:	00001b8f 	.word	0x00001b8f
    1bd4:	00005948 	.word	0x00005948
    1bd8:	00001b89 	.word	0x00001b89

00001bdc <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    1bdc:	6803      	ldr	r3, [r0, #0]
    1bde:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    1be0:	6001      	str	r1, [r0, #0]
    1be2:	4770      	bx	lr

00001be4 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    1be4:	b570      	push	{r4, r5, r6, lr}
    1be6:	4605      	mov	r5, r0
    1be8:	460e      	mov	r6, r1
	struct list_element *it = list->head;
    1bea:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    1bec:	4b0a      	ldr	r3, [pc, #40]	; (1c18 <list_insert_at_end+0x34>)
    1bee:	4798      	blx	r3
    1bf0:	f080 0001 	eor.w	r0, r0, #1
    1bf4:	224f      	movs	r2, #79	; 0x4f
    1bf6:	4909      	ldr	r1, [pc, #36]	; (1c1c <list_insert_at_end+0x38>)
    1bf8:	b2c0      	uxtb	r0, r0
    1bfa:	4b09      	ldr	r3, [pc, #36]	; (1c20 <list_insert_at_end+0x3c>)
    1bfc:	4798      	blx	r3

	if (!list->head) {
    1bfe:	682b      	ldr	r3, [r5, #0]
    1c00:	b91b      	cbnz	r3, 1c0a <list_insert_at_end+0x26>
		list->head                             = (struct list_element *)element;
    1c02:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    1c04:	6033      	str	r3, [r6, #0]
		return;
    1c06:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (it->next) {
		it = it->next;
    1c08:	461c      	mov	r4, r3
	while (it->next) {
    1c0a:	6823      	ldr	r3, [r4, #0]
    1c0c:	2b00      	cmp	r3, #0
    1c0e:	d1fb      	bne.n	1c08 <list_insert_at_end+0x24>
	}
	it->next                               = (struct list_element *)element;
    1c10:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    1c12:	6033      	str	r3, [r6, #0]
    1c14:	bd70      	pop	{r4, r5, r6, pc}
    1c16:	bf00      	nop
    1c18:	00001b8f 	.word	0x00001b8f
    1c1c:	00005948 	.word	0x00005948
    1c20:	00001b89 	.word	0x00001b89

00001c24 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    1c24:	6803      	ldr	r3, [r0, #0]
    1c26:	b10b      	cbz	r3, 1c2c <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    1c28:	681a      	ldr	r2, [r3, #0]
    1c2a:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    1c2c:	4618      	mov	r0, r3
    1c2e:	4770      	bx	lr

00001c30 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    1c30:	b410      	push	{r4}
	dev->hw = hw;
    1c32:	6001      	str	r1, [r0, #0]
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    1c34:	698b      	ldr	r3, [r1, #24]
    1c36:	f043 0301 	orr.w	r3, r3, #1
    1c3a:	618b      	str	r3, [r1, #24]
	hri_can_set_CCCR_INIT_bit(dev->hw);
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    1c3c:	6802      	ldr	r2, [r0, #0]
}

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    1c3e:	6993      	ldr	r3, [r2, #24]
    1c40:	f013 0f01 	tst.w	r3, #1
    1c44:	d0fb      	beq.n	1c3e <_can_async_init+0xe>
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    1c46:	6993      	ldr	r3, [r2, #24]
    1c48:	f043 0302 	orr.w	r3, r3, #2
    1c4c:	6193      	str	r3, [r2, #24]
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    1c4e:	4b37      	ldr	r3, [pc, #220]	; (1d2c <_can_async_init+0xfc>)
    1c50:	4299      	cmp	r1, r3
    1c52:	d012      	beq.n	1c7a <_can_async_init+0x4a>
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    1c54:	6802      	ldr	r2, [r0, #0]
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    1c56:	6993      	ldr	r3, [r2, #24]
    1c58:	f023 0302 	bic.w	r3, r3, #2
    1c5c:	6193      	str	r3, [r2, #24]
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    1c5e:	6802      	ldr	r2, [r0, #0]
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    1c60:	6993      	ldr	r3, [r2, #24]
    1c62:	f023 0301 	bic.w	r3, r3, #1
    1c66:	6193      	str	r3, [r2, #24]
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    1c68:	6802      	ldr	r2, [r0, #0]
	tmp = ((Can *)hw)->CCCR.reg;
    1c6a:	6993      	ldr	r3, [r2, #24]
    1c6c:	f013 0f01 	tst.w	r3, #1
    1c70:	d1fb      	bne.n	1c6a <_can_async_init+0x3a>
	};

	return ERR_NONE;
}
    1c72:	2000      	movs	r0, #0
    1c74:	f85d 4b04 	ldr.w	r4, [sp], #4
    1c78:	4770      	bx	lr
		_can1_dev    = dev;
    1c7a:	4b2d      	ldr	r3, [pc, #180]	; (1d30 <_can_async_init+0x100>)
    1c7c:	461a      	mov	r2, r3
    1c7e:	f842 0b04 	str.w	r0, [r2], #4
		dev->context = (void *)&_can1_context;
    1c82:	492c      	ldr	r1, [pc, #176]	; (1d34 <_can_async_init+0x104>)
    1c84:	6181      	str	r1, [r0, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    1c86:	6804      	ldr	r4, [r0, #0]
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    1c88:	69a1      	ldr	r1, [r4, #24]
    1c8a:	f441 7140 	orr.w	r1, r1, #768	; 0x300
    1c8e:	61a1      	str	r1, [r4, #24]
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    1c90:	6801      	ldr	r1, [r0, #0]
	((Can *)hw)->MRCFG.reg = data;
    1c92:	2402      	movs	r4, #2
    1c94:	608c      	str	r4, [r1, #8]
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    1c96:	6801      	ldr	r1, [r0, #0]
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    1c98:	4c27      	ldr	r4, [pc, #156]	; (1d38 <_can_async_init+0x108>)
    1c9a:	61cc      	str	r4, [r1, #28]
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    1c9c:	6801      	ldr	r1, [r0, #0]
	((Can *)hw)->DBTP.reg = data;
    1c9e:	340f      	adds	r4, #15
    1ca0:	60cc      	str	r4, [r1, #12]
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    1ca2:	6804      	ldr	r4, [r0, #0]
    1ca4:	4925      	ldr	r1, [pc, #148]	; (1d3c <_can_async_init+0x10c>)
    1ca6:	b289      	uxth	r1, r1
    1ca8:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
    1cac:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    1cb0:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    1cb4:	6804      	ldr	r4, [r0, #0]
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    1cb6:	2100      	movs	r1, #0
    1cb8:	f8c4 10bc 	str.w	r1, [r4, #188]	; 0xbc
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    1cbc:	6804      	ldr	r4, [r0, #0]
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    1cbe:	f8c4 10c8 	str.w	r1, [r4, #200]	; 0xc8
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    1cc2:	6804      	ldr	r4, [r0, #0]
    1cc4:	491e      	ldr	r1, [pc, #120]	; (1d40 <_can_async_init+0x110>)
    1cc6:	b289      	uxth	r1, r1
    1cc8:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
	((Can *)hw)->TXBC.reg = data;
    1ccc:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    1cd0:	6801      	ldr	r1, [r0, #0]
    1cd2:	b292      	uxth	r2, r2
    1cd4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    1cd8:	f8c1 20f0 	str.w	r2, [r1, #240]	; 0xf0
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    1cdc:	6802      	ldr	r2, [r0, #0]
	((Can *)hw)->GFC.reg = data;
    1cde:	2128      	movs	r1, #40	; 0x28
    1ce0:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    1ce4:	6801      	ldr	r1, [r0, #0]
    1ce6:	f103 0214 	add.w	r2, r3, #20
    1cea:	b292      	uxth	r2, r2
    1cec:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
	((Can *)hw)->SIDFC.reg = data;
    1cf0:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    1cf4:	6802      	ldr	r2, [r0, #0]
    1cf6:	331c      	adds	r3, #28
    1cf8:	b29b      	uxth	r3, r3
    1cfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Can *)hw)->XIDFC.reg = data;
    1cfe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    1d02:	6803      	ldr	r3, [r0, #0]
	((Can *)hw)->XIDAM.reg = data;
    1d04:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
    1d08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1d0c:	4b0d      	ldr	r3, [pc, #52]	; (1d44 <_can_async_init+0x114>)
    1d0e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1d12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1d16:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1d1a:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1d1e:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1d22:	609a      	str	r2, [r3, #8]
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    1d24:	6803      	ldr	r3, [r0, #0]
	((Can *)hw)->ILE.reg = data;
    1d26:	2201      	movs	r2, #1
    1d28:	65da      	str	r2, [r3, #92]	; 0x5c
    1d2a:	e793      	b.n	1c54 <_can_async_init+0x24>
    1d2c:	42000400 	.word	0x42000400
    1d30:	20000628 	.word	0x20000628
    1d34:	20000004 	.word	0x20000004
    1d38:	00010c01 	.word	0x00010c01
    1d3c:	20000a94 	.word	0x20000a94
    1d40:	20000a84 	.word	0x20000a84
    1d44:	e000e100 	.word	0xe000e100

00001d48 <_can_async_enable>:
/**
 * \brief Enable CAN
 */
int32_t _can_async_enable(struct _can_async_device *const dev)
{
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    1d48:	6802      	ldr	r2, [r0, #0]
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    1d4a:	6993      	ldr	r3, [r2, #24]
    1d4c:	f023 0301 	bic.w	r3, r3, #1
    1d50:	6193      	str	r3, [r2, #24]
	return ERR_NONE;
}
    1d52:	2000      	movs	r0, #0
    1d54:	4770      	bx	lr
	...

00001d58 <_can_async_read>:
int32_t _can_async_read(struct _can_async_device *const dev, struct can_message *msg)
{
	struct _can_rx_fifo_entry *f = NULL;
	hri_can_rxf0s_reg_t        get_index;

	if (!hri_can_read_RXF0S_F0FL_bf(dev->hw)) {
    1d58:	6803      	ldr	r3, [r0, #0]
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0FL_Msk) >> CAN_RXF0S_F0FL_Pos;
    1d5a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    1d5e:	f012 0f7f 	tst.w	r2, #127	; 0x7f
    1d62:	d045      	beq.n	1df0 <_can_async_read+0x98>
{
    1d64:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d66:	b085      	sub	sp, #20
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0GI_Msk) >> CAN_RXF0S_F0GI_Pos;
    1d68:	f8d3 50a4 	ldr.w	r5, [r3, #164]	; 0xa4
	if (dev->hw == CAN0) {
		f = (struct _can_rx_fifo_entry *)(can0_rx_fifo + get_index * CONF_CAN0_F0DS);
	}
#endif
#ifdef CONF_CAN1_ENABLED
	if (dev->hw == CAN1) {
    1d6c:	4a23      	ldr	r2, [pc, #140]	; (1dfc <_can_async_read+0xa4>)
    1d6e:	4293      	cmp	r3, r2
    1d70:	d002      	beq.n	1d78 <_can_async_read+0x20>
		f = (struct _can_rx_fifo_entry *)(can1_rx_fifo + get_index * CONF_CAN1_F0DS);
	}
#endif

	if (f == NULL) {
		return ERR_NO_RESOURCE;
    1d72:	f06f 001b 	mvn.w	r0, #27
    1d76:	e032      	b.n	1dde <_can_async_read+0x86>
    1d78:	f3c5 2505 	ubfx	r5, r5, #8, #6
		f = (struct _can_rx_fifo_entry *)(can1_rx_fifo + get_index * CONF_CAN1_F0DS);
    1d7c:	012a      	lsls	r2, r5, #4
    1d7e:	4b20      	ldr	r3, [pc, #128]	; (1e00 <_can_async_read+0xa8>)
	if (f == NULL) {
    1d80:	18d6      	adds	r6, r2, r3
    1d82:	d038      	beq.n	1df6 <_can_async_read+0x9e>
	}

	if (f->R0.bit.XTD == 1) {
    1d84:	58d4      	ldr	r4, [r2, r3]
    1d86:	f014 4f80 	tst.w	r4, #1073741824	; 0x40000000
    1d8a:	d12a      	bne.n	1de2 <_can_async_read+0x8a>
		msg->fmt = CAN_FMT_EXTID;
		msg->id  = f->R0.bit.ID;
	} else {
		msg->fmt = CAN_FMT_STDID;
    1d8c:	2400      	movs	r4, #0
    1d8e:	734c      	strb	r4, [r1, #13]
		/* A standard identifier is stored into ID[28:18] */
		msg->id = f->R0.bit.ID >> 18;
    1d90:	58d4      	ldr	r4, [r2, r3]
    1d92:	f3c4 448a 	ubfx	r4, r4, #18, #11
    1d96:	600c      	str	r4, [r1, #0]
	}

	if (f->R0.bit.RTR == 1) {
    1d98:	58d3      	ldr	r3, [r2, r3]
    1d9a:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
		msg->type = CAN_TYPE_REMOTE;
    1d9e:	bf1c      	itt	ne
    1da0:	2301      	movne	r3, #1
    1da2:	710b      	strbne	r3, [r1, #4]
    1da4:	460c      	mov	r4, r1
    1da6:	4607      	mov	r7, r0
	}

	const uint8_t dlc2len[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 12, 16, 20, 24, 32, 48, 64};
    1da8:	4b16      	ldr	r3, [pc, #88]	; (1e04 <_can_async_read+0xac>)
    1daa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    1dac:	f10d 0e10 	add.w	lr, sp, #16
    1db0:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
	msg->len                = dlc2len[f->R1.bit.DLC];
    1db4:	6873      	ldr	r3, [r6, #4]
    1db6:	f3c3 4303 	ubfx	r3, r3, #16, #4
    1dba:	4473      	add	r3, lr
    1dbc:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    1dc0:	7322      	strb	r2, [r4, #12]

	memcpy(msg->data, f->data, msg->len);
    1dc2:	f106 0108 	add.w	r1, r6, #8
    1dc6:	68a0      	ldr	r0, [r4, #8]
    1dc8:	4b0f      	ldr	r3, [pc, #60]	; (1e08 <_can_async_read+0xb0>)
    1dca:	4798      	blx	r3

	hri_can_write_RXF0A_F0AI_bf(dev->hw, get_index);
    1dcc:	683a      	ldr	r2, [r7, #0]
	tmp = ((Can *)hw)->RXF0A.reg;
    1dce:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	tmp &= ~CAN_RXF0A_F0AI_Msk;
    1dd2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
	tmp |= CAN_RXF0A_F0AI(data);
    1dd6:	431d      	orrs	r5, r3
	((Can *)hw)->RXF0A.reg = tmp;
    1dd8:	f8c2 50a8 	str.w	r5, [r2, #168]	; 0xa8

	return ERR_NONE;
    1ddc:	2000      	movs	r0, #0
}
    1dde:	b005      	add	sp, #20
    1de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		msg->fmt = CAN_FMT_EXTID;
    1de2:	2401      	movs	r4, #1
    1de4:	734c      	strb	r4, [r1, #13]
		msg->id  = f->R0.bit.ID;
    1de6:	58d4      	ldr	r4, [r2, r3]
    1de8:	f3c4 041c 	ubfx	r4, r4, #0, #29
    1dec:	600c      	str	r4, [r1, #0]
    1dee:	e7d3      	b.n	1d98 <_can_async_read+0x40>
		return ERR_NOT_FOUND;
    1df0:	f06f 0009 	mvn.w	r0, #9
    1df4:	4770      	bx	lr
		return ERR_NO_RESOURCE;
    1df6:	f06f 001b 	mvn.w	r0, #27
    1dfa:	e7f0      	b.n	1dde <_can_async_read+0x86>
    1dfc:	42000400 	.word	0x42000400
    1e00:	20000a94 	.word	0x20000a94
    1e04:	00005968 	.word	0x00005968
    1e08:	00004f79 	.word	0x00004f79

00001e0c <_can_async_write>:

/**
 * \brief Write a CAN message
 */
int32_t _can_async_write(struct _can_async_device *const dev, struct can_message *msg)
{
    1e0c:	b538      	push	{r3, r4, r5, lr}
	struct _can_tx_fifo_entry *f = NULL;
	hri_can_txfqs_reg_t        put_index;

	if (hri_can_get_TXFQS_TFQF_bit(dev->hw)) {
    1e0e:	6803      	ldr	r3, [r0, #0]
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFQF) >> CAN_TXFQS_TFQF_Pos;
    1e10:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
    1e14:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
    1e18:	d177      	bne.n	1f0a <_can_async_write+0xfe>
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFQPI_Msk) >> CAN_TXFQS_TFQPI_Pos;
    1e1a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
	if (dev->hw == CAN0) {
		f = (struct _can_tx_fifo_entry *)(can0_tx_fifo + put_index * CONF_CAN0_TBDS);
	}
#endif
#ifdef CONF_CAN1_ENABLED
	if (dev->hw == CAN1) {
    1e1e:	4c3e      	ldr	r4, [pc, #248]	; (1f18 <_can_async_write+0x10c>)
    1e20:	42a3      	cmp	r3, r4
    1e22:	d002      	beq.n	1e2a <_can_async_write+0x1e>
		f = (struct _can_tx_fifo_entry *)(can1_tx_fifo + put_index * CONF_CAN1_TBDS);
	}
#endif
	if (f == NULL) {
		return ERR_NO_RESOURCE;
    1e24:	f06f 001b 	mvn.w	r0, #27
    1e28:	bd38      	pop	{r3, r4, r5, pc}
    1e2a:	f3c2 4204 	ubfx	r2, r2, #16, #5
		f = (struct _can_tx_fifo_entry *)(can1_tx_fifo + put_index * CONF_CAN1_TBDS);
    1e2e:	0112      	lsls	r2, r2, #4
    1e30:	4d3a      	ldr	r5, [pc, #232]	; (1f1c <_can_async_write+0x110>)
	if (f == NULL) {
    1e32:	1953      	adds	r3, r2, r5
    1e34:	d06c      	beq.n	1f10 <_can_async_write+0x104>
	}

	if (msg->fmt == CAN_FMT_EXTID) {
    1e36:	7b4c      	ldrb	r4, [r1, #13]
    1e38:	2c01      	cmp	r4, #1
		f->T0.val     = msg->id;
    1e3a:	680c      	ldr	r4, [r1, #0]
    1e3c:	bf03      	ittte	eq
    1e3e:	5154      	streq	r4, [r2, r5]
		f->T0.bit.XTD = 1;
    1e40:	5954      	ldreq	r4, [r2, r5]
    1e42:	f044 4480 	orreq.w	r4, r4, #1073741824	; 0x40000000
	} else {
		/* A standard identifier is stored into ID[28:18] */
		f->T0.val = msg->id << 18;
    1e46:	04a4      	lslne	r4, r4, #18
    1e48:	5154      	str	r4, [r2, r5]
	}

	if (msg->len <= 8) {
    1e4a:	7b0a      	ldrb	r2, [r1, #12]
    1e4c:	2a08      	cmp	r2, #8
    1e4e:	d825      	bhi.n	1e9c <_can_async_write+0x90>
		f->T1.bit.DLC = msg->len;
    1e50:	685c      	ldr	r4, [r3, #4]
    1e52:	f362 4413 	bfi	r4, r2, #16, #4
    1e56:	605c      	str	r4, [r3, #4]
    1e58:	4604      	mov	r4, r0
		f->T1.bit.DLC = 0xE;
	} else if (msg->len <= 64) {
		f->T1.bit.DLC = 0xF;
	}

	f->T1.bit.FDF = hri_can_get_CCCR_FDOE_bit(dev->hw);
    1e5a:	6802      	ldr	r2, [r0, #0]
	tmp = ((Can *)hw)->CCCR.reg;
    1e5c:	6992      	ldr	r2, [r2, #24]
	return (bool)tmp;
    1e5e:	f3c2 2200 	ubfx	r2, r2, #8, #1
    1e62:	6858      	ldr	r0, [r3, #4]
    1e64:	f362 5055 	bfi	r0, r2, #21, #1
    1e68:	6058      	str	r0, [r3, #4]
	f->T1.bit.BRS = hri_can_get_CCCR_BRSE_bit(dev->hw);
    1e6a:	6822      	ldr	r2, [r4, #0]
	tmp = ((Can *)hw)->CCCR.reg;
    1e6c:	6992      	ldr	r2, [r2, #24]
	return (bool)tmp;
    1e6e:	f3c2 2240 	ubfx	r2, r2, #9, #1
    1e72:	6858      	ldr	r0, [r3, #4]
    1e74:	f362 5014 	bfi	r0, r2, #20, #1
    1e78:	6058      	str	r0, [r3, #4]

	memcpy(f->data, msg->data, msg->len);
    1e7a:	7b0a      	ldrb	r2, [r1, #12]
    1e7c:	6889      	ldr	r1, [r1, #8]
    1e7e:	f103 0008 	add.w	r0, r3, #8
    1e82:	4b27      	ldr	r3, [pc, #156]	; (1f20 <_can_async_write+0x114>)
    1e84:	4798      	blx	r3

	hri_can_write_TXBAR_reg(dev->hw, 1 << hri_can_read_TXFQS_TFQPI_bf(dev->hw));
    1e86:	6821      	ldr	r1, [r4, #0]
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFQPI_Msk) >> CAN_TXFQS_TFQPI_Pos;
    1e88:	f8d1 20c4 	ldr.w	r2, [r1, #196]	; 0xc4
    1e8c:	f3c2 4204 	ubfx	r2, r2, #16, #5
    1e90:	2301      	movs	r3, #1
    1e92:	4093      	lsls	r3, r2
	((Can *)hw)->TXBAR.reg = data;
    1e94:	f8c1 30d0 	str.w	r3, [r1, #208]	; 0xd0
	return ERR_NONE;
    1e98:	2000      	movs	r0, #0
    1e9a:	bd38      	pop	{r3, r4, r5, pc}
	} else if (msg->len <= 12) {
    1e9c:	2a0c      	cmp	r2, #12
    1e9e:	d805      	bhi.n	1eac <_can_async_write+0xa0>
		f->T1.bit.DLC = 0x9;
    1ea0:	685a      	ldr	r2, [r3, #4]
    1ea2:	2409      	movs	r4, #9
    1ea4:	f364 4213 	bfi	r2, r4, #16, #4
    1ea8:	605a      	str	r2, [r3, #4]
    1eaa:	e7d5      	b.n	1e58 <_can_async_write+0x4c>
	} else if (msg->len <= 16) {
    1eac:	2a10      	cmp	r2, #16
    1eae:	d805      	bhi.n	1ebc <_can_async_write+0xb0>
		f->T1.bit.DLC = 0xA;
    1eb0:	685a      	ldr	r2, [r3, #4]
    1eb2:	240a      	movs	r4, #10
    1eb4:	f364 4213 	bfi	r2, r4, #16, #4
    1eb8:	605a      	str	r2, [r3, #4]
    1eba:	e7cd      	b.n	1e58 <_can_async_write+0x4c>
	} else if (msg->len <= 20) {
    1ebc:	2a14      	cmp	r2, #20
    1ebe:	d805      	bhi.n	1ecc <_can_async_write+0xc0>
		f->T1.bit.DLC = 0xB;
    1ec0:	685a      	ldr	r2, [r3, #4]
    1ec2:	240b      	movs	r4, #11
    1ec4:	f364 4213 	bfi	r2, r4, #16, #4
    1ec8:	605a      	str	r2, [r3, #4]
    1eca:	e7c5      	b.n	1e58 <_can_async_write+0x4c>
	} else if (msg->len <= 24) {
    1ecc:	2a18      	cmp	r2, #24
    1ece:	d805      	bhi.n	1edc <_can_async_write+0xd0>
		f->T1.bit.DLC = 0xC;
    1ed0:	685a      	ldr	r2, [r3, #4]
    1ed2:	240c      	movs	r4, #12
    1ed4:	f364 4213 	bfi	r2, r4, #16, #4
    1ed8:	605a      	str	r2, [r3, #4]
    1eda:	e7bd      	b.n	1e58 <_can_async_write+0x4c>
	} else if (msg->len <= 32) {
    1edc:	2a20      	cmp	r2, #32
    1ede:	d805      	bhi.n	1eec <_can_async_write+0xe0>
		f->T1.bit.DLC = 0xD;
    1ee0:	685a      	ldr	r2, [r3, #4]
    1ee2:	240d      	movs	r4, #13
    1ee4:	f364 4213 	bfi	r2, r4, #16, #4
    1ee8:	605a      	str	r2, [r3, #4]
    1eea:	e7b5      	b.n	1e58 <_can_async_write+0x4c>
	} else if (msg->len <= 48) {
    1eec:	2a30      	cmp	r2, #48	; 0x30
    1eee:	d805      	bhi.n	1efc <_can_async_write+0xf0>
		f->T1.bit.DLC = 0xE;
    1ef0:	685a      	ldr	r2, [r3, #4]
    1ef2:	240e      	movs	r4, #14
    1ef4:	f364 4213 	bfi	r2, r4, #16, #4
    1ef8:	605a      	str	r2, [r3, #4]
    1efa:	e7ad      	b.n	1e58 <_can_async_write+0x4c>
	} else if (msg->len <= 64) {
    1efc:	2a40      	cmp	r2, #64	; 0x40
    1efe:	d8ab      	bhi.n	1e58 <_can_async_write+0x4c>
		f->T1.bit.DLC = 0xF;
    1f00:	685a      	ldr	r2, [r3, #4]
    1f02:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
    1f06:	605a      	str	r2, [r3, #4]
    1f08:	e7a6      	b.n	1e58 <_can_async_write+0x4c>
		return ERR_NO_RESOURCE;
    1f0a:	f06f 001b 	mvn.w	r0, #27
    1f0e:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_NO_RESOURCE;
    1f10:	f06f 001b 	mvn.w	r0, #27
}
    1f14:	bd38      	pop	{r3, r4, r5, pc}
    1f16:	bf00      	nop
    1f18:	42000400 	.word	0x42000400
    1f1c:	20000a84 	.word	0x20000a84
    1f20:	00004f79 	.word	0x00004f79

00001f24 <_can_async_set_irq_state>:
 */
void _can_async_set_irq_state(struct _can_async_device *const dev, enum can_async_callback_type type, bool state)
{
	uint32_t ie;

	if (type == CAN_ASYNC_RX_CB) {
    1f24:	b121      	cbz	r1, 1f30 <_can_async_set_irq_state+0xc>
		hri_can_write_IE_RF0NE_bit(dev->hw, state);
	} else if (type == CAN_ASYNC_TX_CB) {
    1f26:	2901      	cmp	r1, #1
    1f28:	d009      	beq.n	1f3e <_can_async_set_irq_state+0x1a>
		hri_can_write_IE_TCE_bit(dev->hw, state);
		hri_can_write_TXBTIE_reg(dev->hw, CAN_TXBTIE_MASK);
	} else if (type == CAN_ASYNC_IRQ_CB) {
    1f2a:	2902      	cmp	r1, #2
    1f2c:	d014      	beq.n	1f58 <_can_async_set_irq_state+0x34>
    1f2e:	4770      	bx	lr
		hri_can_write_IE_RF0NE_bit(dev->hw, state);
    1f30:	6801      	ldr	r1, [r0, #0]
	tmp = ((Can *)hw)->IE.reg;
    1f32:	6d4b      	ldr	r3, [r1, #84]	; 0x54
	tmp &= ~CAN_IE_RF0NE;
    1f34:	f023 0301 	bic.w	r3, r3, #1
	tmp |= value << CAN_IE_RF0NE_Pos;
    1f38:	431a      	orrs	r2, r3
	((Can *)hw)->IE.reg = tmp;
    1f3a:	654a      	str	r2, [r1, #84]	; 0x54
    1f3c:	4770      	bx	lr
		hri_can_write_IE_TCE_bit(dev->hw, state);
    1f3e:	6801      	ldr	r1, [r0, #0]
	tmp = ((Can *)hw)->IE.reg;
    1f40:	6d4b      	ldr	r3, [r1, #84]	; 0x54
	tmp &= ~CAN_IE_TCE;
    1f42:	f423 7300 	bic.w	r3, r3, #512	; 0x200
	tmp |= value << CAN_IE_TCE_Pos;
    1f46:	ea43 2242 	orr.w	r2, r3, r2, lsl #9
	((Can *)hw)->IE.reg = tmp;
    1f4a:	654a      	str	r2, [r1, #84]	; 0x54
		hri_can_write_TXBTIE_reg(dev->hw, CAN_TXBTIE_MASK);
    1f4c:	6803      	ldr	r3, [r0, #0]
	((Can *)hw)->TXBTIE.reg = data;
    1f4e:	f04f 32ff 	mov.w	r2, #4294967295
    1f52:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    1f56:	4770      	bx	lr
		ie = hri_can_get_IE_reg(dev->hw, CAN_IE_RF0NE | CAN_IE_TCE);
    1f58:	6802      	ldr	r2, [r0, #0]
	tmp = ((Can *)hw)->IE.reg;
    1f5a:	6d53      	ldr	r3, [r2, #84]	; 0x54
	tmp &= mask;
    1f5c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1f60:	059b      	lsls	r3, r3, #22
    1f62:	0d9b      	lsrs	r3, r3, #22
	((Can *)hw)->IE.reg = data;
    1f64:	6553      	str	r3, [r2, #84]	; 0x54
		hri_can_write_IE_reg(dev->hw, ie | CONF_CAN0_IE_REG);
	}

	return;
    1f66:	e7e2      	b.n	1f2e <_can_async_set_irq_state+0xa>

00001f68 <_can_async_set_filter>:
                              struct can_filter *filter)
{
	struct _can_standard_message_filter_element *sf;
	struct _can_extended_message_filter_element *ef;

	sf = &((struct _can_context *)dev->context)->rx_std_filter[index];
    1f68:	6980      	ldr	r0, [r0, #24]
	ef = &((struct _can_context *)dev->context)->rx_ext_filter[index];

	if (fmt == CAN_FMT_STDID) {
    1f6a:	b9f2      	cbnz	r2, 1faa <_can_async_set_filter+0x42>
	sf = &((struct _can_context *)dev->context)->rx_std_filter[index];
    1f6c:	68c2      	ldr	r2, [r0, #12]
		if (filter == NULL) {
    1f6e:	b1cb      	cbz	r3, 1fa4 <_can_async_set_filter+0x3c>
			sf->S0.val = 0;
			return ERR_NONE;
		}
		sf->S0.val       = filter->mask;
    1f70:	6858      	ldr	r0, [r3, #4]
    1f72:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
		sf->S0.bit.SFID1 = filter->id;
    1f76:	6818      	ldr	r0, [r3, #0]
    1f78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    1f7c:	f360 431a 	bfi	r3, r0, #16, #11
    1f80:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		sf->S0.bit.SFT   = _CAN_SFT_CLASSIC;
    1f84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    1f88:	2002      	movs	r0, #2
    1f8a:	f360 739f 	bfi	r3, r0, #30, #2
    1f8e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		sf->S0.bit.SFEC  = _CAN_SFEC_STF0M;
    1f92:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    1f96:	2001      	movs	r0, #1
    1f98:	f360 63dd 	bfi	r3, r0, #27, #3
    1f9c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		ef->F1.val      = filter->mask;
		ef->F1.bit.EFT  = _CAN_EFT_CLASSIC;
	}

	return ERR_NONE;
}
    1fa0:	2000      	movs	r0, #0
    1fa2:	4770      	bx	lr
			sf->S0.val = 0;
    1fa4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			return ERR_NONE;
    1fa8:	e7fa      	b.n	1fa0 <_can_async_set_filter+0x38>
{
    1faa:	b430      	push	{r4, r5}
	} else if (fmt == CAN_FMT_EXTID) {
    1fac:	2a01      	cmp	r2, #1
    1fae:	d002      	beq.n	1fb6 <_can_async_set_filter+0x4e>
}
    1fb0:	2000      	movs	r0, #0
    1fb2:	bc30      	pop	{r4, r5}
    1fb4:	4770      	bx	lr
	ef = &((struct _can_context *)dev->context)->rx_ext_filter[index];
    1fb6:	6902      	ldr	r2, [r0, #16]
    1fb8:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
		if (filter == NULL) {
    1fbc:	b18b      	cbz	r3, 1fe2 <_can_async_set_filter+0x7a>
		ef->F0.val      = filter->id;
    1fbe:	681c      	ldr	r4, [r3, #0]
    1fc0:	f842 4031 	str.w	r4, [r2, r1, lsl #3]
		ef->F0.bit.EFEC = _CAN_EFEC_STF0M;
    1fc4:	f852 4031 	ldr.w	r4, [r2, r1, lsl #3]
    1fc8:	2501      	movs	r5, #1
    1fca:	f365 745f 	bfi	r4, r5, #29, #3
    1fce:	f842 4031 	str.w	r4, [r2, r1, lsl #3]
		ef->F1.val      = filter->mask;
    1fd2:	685b      	ldr	r3, [r3, #4]
    1fd4:	6043      	str	r3, [r0, #4]
		ef->F1.bit.EFT  = _CAN_EFT_CLASSIC;
    1fd6:	6843      	ldr	r3, [r0, #4]
    1fd8:	2202      	movs	r2, #2
    1fda:	f362 739f 	bfi	r3, r2, #30, #2
    1fde:	6043      	str	r3, [r0, #4]
    1fe0:	e7e6      	b.n	1fb0 <_can_async_set_filter+0x48>
			ef->F0.val = 0;
    1fe2:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
			return ERR_NONE;
    1fe6:	e7e3      	b.n	1fb0 <_can_async_set_filter+0x48>

00001fe8 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    1fe8:	b538      	push	{r3, r4, r5, lr}
	struct _can_async_device *dev = _can1_dev;
    1fea:	4b1d      	ldr	r3, [pc, #116]	; (2060 <CAN1_Handler+0x78>)
    1fec:	681d      	ldr	r5, [r3, #0]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    1fee:	682b      	ldr	r3, [r5, #0]
	return ((Can *)hw)->IR.reg;
    1ff0:	6d1c      	ldr	r4, [r3, #80]	; 0x50

	if (ir & CAN_IR_RF0N) {
    1ff2:	f014 0f01 	tst.w	r4, #1
    1ff6:	d11c      	bne.n	2032 <CAN1_Handler+0x4a>
		dev->cb.rx_done(dev);
	}

	if (ir & CAN_IR_TC) {
    1ff8:	f414 7f00 	tst.w	r4, #512	; 0x200
    1ffc:	d11d      	bne.n	203a <CAN1_Handler+0x52>
		dev->cb.tx_done(dev);
	}

	if (ir & CAN_IR_BO) {
    1ffe:	f014 7f00 	tst.w	r4, #33554432	; 0x2000000
    2002:	d11e      	bne.n	2042 <CAN1_Handler+0x5a>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
	}

	if (ir & CAN_IR_EW) {
    2004:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
    2008:	d120      	bne.n	204c <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
	}

	if (ir & CAN_IR_EP) {
    200a:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
    200e:	d00a      	beq.n	2026 <CAN1_Handler+0x3e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    2010:	68ea      	ldr	r2, [r5, #12]
    2012:	682b      	ldr	r3, [r5, #0]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    2014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2016:	f3c3 1340 	ubfx	r3, r3, #5, #1
    201a:	2b00      	cmp	r3, #0
    201c:	bf14      	ite	ne
    201e:	2102      	movne	r1, #2
    2020:	2101      	moveq	r1, #1
    2022:	4628      	mov	r0, r5
    2024:	4790      	blx	r2
	}

	if (ir & CAN_IR_RF0L) {
    2026:	f014 0f08 	tst.w	r4, #8
    202a:	d114      	bne.n	2056 <CAN1_Handler+0x6e>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
	}

	hri_can_write_IR_reg(dev->hw, ir);
    202c:	682b      	ldr	r3, [r5, #0]
	((Can *)hw)->IR.reg = data;
    202e:	651c      	str	r4, [r3, #80]	; 0x50
    2030:	bd38      	pop	{r3, r4, r5, pc}
		dev->cb.rx_done(dev);
    2032:	68ab      	ldr	r3, [r5, #8]
    2034:	4628      	mov	r0, r5
    2036:	4798      	blx	r3
    2038:	e7de      	b.n	1ff8 <CAN1_Handler+0x10>
		dev->cb.tx_done(dev);
    203a:	686b      	ldr	r3, [r5, #4]
    203c:	4628      	mov	r0, r5
    203e:	4798      	blx	r3
    2040:	e7dd      	b.n	1ffe <CAN1_Handler+0x16>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    2042:	68eb      	ldr	r3, [r5, #12]
    2044:	2103      	movs	r1, #3
    2046:	4628      	mov	r0, r5
    2048:	4798      	blx	r3
    204a:	e7db      	b.n	2004 <CAN1_Handler+0x1c>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    204c:	68eb      	ldr	r3, [r5, #12]
    204e:	2100      	movs	r1, #0
    2050:	4628      	mov	r0, r5
    2052:	4798      	blx	r3
    2054:	e7d9      	b.n	200a <CAN1_Handler+0x22>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    2056:	68eb      	ldr	r3, [r5, #12]
    2058:	2104      	movs	r1, #4
    205a:	4628      	mov	r0, r5
    205c:	4798      	blx	r3
    205e:	e7e5      	b.n	202c <CAN1_Handler+0x44>
    2060:	20000628 	.word	0x20000628

00002064 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    2064:	f642 63e0 	movw	r3, #12000	; 0x2ee0
    2068:	fb03 f000 	mul.w	r0, r3, r0
    206c:	4770      	bx	lr
	...

00002070 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    2070:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    2072:	4a12      	ldr	r2, [pc, #72]	; (20bc <_init_chip+0x4c>)
    2074:	8813      	ldrh	r3, [r2, #0]
    2076:	b29b      	uxth	r3, r3
    2078:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    207a:	4b11      	ldr	r3, [pc, #68]	; (20c0 <_init_chip+0x50>)
    207c:	4798      	blx	r3
	_oscctrl_init_sources();
    207e:	4b11      	ldr	r3, [pc, #68]	; (20c4 <_init_chip+0x54>)
    2080:	4798      	blx	r3
	_mclk_init();
    2082:	4b11      	ldr	r3, [pc, #68]	; (20c8 <_init_chip+0x58>)
    2084:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    2086:	2008      	movs	r0, #8
    2088:	4c10      	ldr	r4, [pc, #64]	; (20cc <_init_chip+0x5c>)
    208a:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    208c:	4b10      	ldr	r3, [pc, #64]	; (20d0 <_init_chip+0x60>)
    208e:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    2090:	f640 70f7 	movw	r0, #4087	; 0xff7
    2094:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    2096:	4b0f      	ldr	r3, [pc, #60]	; (20d4 <_init_chip+0x64>)
    2098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    209a:	62da      	str	r2, [r3, #44]	; 0x2c
    209c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
    20a0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    20a4:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
    20a8:	f042 02ef 	orr.w	r2, r2, #239	; 0xef
    20ac:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    20b0:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    20b4:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    20b8:	bd10      	pop	{r4, pc}
    20ba:	bf00      	nop
    20bc:	41004000 	.word	0x41004000
    20c0:	000021d1 	.word	0x000021d1
    20c4:	000021e5 	.word	0x000021e5
    20c8:	000021c5 	.word	0x000021c5
    20cc:	00002135 	.word	0x00002135
    20d0:	00002201 	.word	0x00002201
    20d4:	41008000 	.word	0x41008000

000020d8 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    20d8:	b430      	push	{r4, r5}
    20da:	4814      	ldr	r0, [pc, #80]	; (212c <_event_system_init+0x54>)
    20dc:	f100 0543 	add.w	r5, r0, #67	; 0x43
    20e0:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    20e2:	4c13      	ldr	r4, [pc, #76]	; (2130 <_event_system_init+0x58>)
    20e4:	1a1a      	subs	r2, r3, r0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    20e6:	f813 1b01 	ldrb.w	r1, [r3], #1
    20ea:	3248      	adds	r2, #72	; 0x48
    20ec:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    20f0:	42ab      	cmp	r3, r5
    20f2:	d1f7      	bne.n	20e4 <_event_system_init+0xc>
    20f4:	480d      	ldr	r0, [pc, #52]	; (212c <_event_system_init+0x54>)
    20f6:	f100 0442 	add.w	r4, r0, #66	; 0x42
    20fa:	3080      	adds	r0, #128	; 0x80
    20fc:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    20fe:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    2102:	00ca      	lsls	r2, r1, #3
    2104:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2108:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    210c:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    210e:	f850 3f04 	ldr.w	r3, [r0, #4]!
    2112:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    2114:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    2118:	43db      	mvns	r3, r3
    211a:	b2db      	uxtb	r3, r3
    211c:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    2120:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    2122:	2920      	cmp	r1, #32
    2124:	d1eb      	bne.n	20fe <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    2126:	2000      	movs	r0, #0
    2128:	bc30      	pop	{r4, r5}
    212a:	4770      	bx	lr
    212c:	00005978 	.word	0x00005978
    2130:	4100e000 	.word	0x4100e000

00002134 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    2134:	f010 0f01 	tst.w	r0, #1
    2138:	d008      	beq.n	214c <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    213a:	4a1d      	ldr	r2, [pc, #116]	; (21b0 <_gclk_init_generators_by_fref+0x7c>)
    213c:	4b1d      	ldr	r3, [pc, #116]	; (21b4 <_gclk_init_generators_by_fref+0x80>)
    213e:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2140:	4619      	mov	r1, r3
    2142:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    2146:	684b      	ldr	r3, [r1, #4]
    2148:	4213      	tst	r3, r2
    214a:	d1fc      	bne.n	2146 <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    214c:	f010 0f04 	tst.w	r0, #4
    2150:	d008      	beq.n	2164 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    2152:	4a19      	ldr	r2, [pc, #100]	; (21b8 <_gclk_init_generators_by_fref+0x84>)
    2154:	4b17      	ldr	r3, [pc, #92]	; (21b4 <_gclk_init_generators_by_fref+0x80>)
    2156:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2158:	4619      	mov	r1, r3
    215a:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    215e:	684b      	ldr	r3, [r1, #4]
    2160:	4213      	tst	r3, r2
    2162:	d1fc      	bne.n	215e <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    2164:	f010 0f08 	tst.w	r0, #8
    2168:	d008      	beq.n	217c <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    216a:	4a14      	ldr	r2, [pc, #80]	; (21bc <_gclk_init_generators_by_fref+0x88>)
    216c:	4b11      	ldr	r3, [pc, #68]	; (21b4 <_gclk_init_generators_by_fref+0x80>)
    216e:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2170:	4619      	mov	r1, r3
    2172:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    2176:	684b      	ldr	r3, [r1, #4]
    2178:	4213      	tst	r3, r2
    217a:	d1fc      	bne.n	2176 <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    217c:	f010 0f10 	tst.w	r0, #16
    2180:	d008      	beq.n	2194 <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    2182:	4a0f      	ldr	r2, [pc, #60]	; (21c0 <_gclk_init_generators_by_fref+0x8c>)
    2184:	4b0b      	ldr	r3, [pc, #44]	; (21b4 <_gclk_init_generators_by_fref+0x80>)
    2186:	631a      	str	r2, [r3, #48]	; 0x30
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2188:	4619      	mov	r1, r3
    218a:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    218e:	684b      	ldr	r3, [r1, #4]
    2190:	4213      	tst	r3, r2
    2192:	d1fc      	bne.n	218e <_gclk_init_generators_by_fref+0x5a>
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    2194:	f410 6f00 	tst.w	r0, #2048	; 0x800
    2198:	d008      	beq.n	21ac <_gclk_init_generators_by_fref+0x78>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    219a:	4a08      	ldr	r2, [pc, #32]	; (21bc <_gclk_init_generators_by_fref+0x88>)
    219c:	4b05      	ldr	r3, [pc, #20]	; (21b4 <_gclk_init_generators_by_fref+0x80>)
    219e:	64da      	str	r2, [r3, #76]	; 0x4c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    21a0:	4619      	mov	r1, r3
    21a2:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    21a6:	684b      	ldr	r3, [r1, #4]
    21a8:	4213      	tst	r3, r2
    21aa:	d1fc      	bne.n	21a6 <_gclk_init_generators_by_fref+0x72>
    21ac:	4770      	bx	lr
    21ae:	bf00      	nop
    21b0:	00010101 	.word	0x00010101
    21b4:	40001c00 	.word	0x40001c00
    21b8:	00011908 	.word	0x00011908
    21bc:	00010904 	.word	0x00010904
    21c0:	00010106 	.word	0x00010106

000021c4 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    21c4:	2201      	movs	r2, #1
    21c6:	4b01      	ldr	r3, [pc, #4]	; (21cc <_mclk_init+0x8>)
    21c8:	715a      	strb	r2, [r3, #5]
    21ca:	4770      	bx	lr
    21cc:	40000800 	.word	0x40000800

000021d0 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    21d0:	4b03      	ldr	r3, [pc, #12]	; (21e0 <_osc32kctrl_init_sources+0x10>)
    21d2:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    21d4:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    21d8:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    21da:	2200      	movs	r2, #0
    21dc:	741a      	strb	r2, [r3, #16]
    21de:	4770      	bx	lr
    21e0:	40001400 	.word	0x40001400

000021e4 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    21e4:	4a04      	ldr	r2, [pc, #16]	; (21f8 <_oscctrl_init_sources+0x14>)
    21e6:	4b05      	ldr	r3, [pc, #20]	; (21fc <_oscctrl_init_sources+0x18>)
    21e8:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    21ea:	461a      	mov	r2, r3
    21ec:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    21ee:	f013 0f02 	tst.w	r3, #2
    21f2:	d0fb      	beq.n	21ec <_oscctrl_init_sources+0x8>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    21f4:	4770      	bx	lr
    21f6:	bf00      	nop
    21f8:	03002606 	.word	0x03002606
    21fc:	40001000 	.word	0x40001000

00002200 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    2200:	4a47      	ldr	r2, [pc, #284]	; (2320 <_oscctrl_init_referenced_generators+0x120>)
    2202:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    2204:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    2208:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    220c:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    220e:	4611      	mov	r1, r2
    2210:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    2214:	684b      	ldr	r3, [r1, #4]
    2216:	4213      	tst	r3, r2
    2218:	d1fc      	bne.n	2214 <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    221a:	4a41      	ldr	r2, [pc, #260]	; (2320 <_oscctrl_init_referenced_generators+0x120>)
    221c:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    221e:	f013 0f04 	tst.w	r3, #4
    2222:	d1fb      	bne.n	221c <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    2224:	4b3f      	ldr	r3, [pc, #252]	; (2324 <_oscctrl_init_referenced_generators+0x124>)
    2226:	2200      	movs	r2, #0
    2228:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    222a:	4a3f      	ldr	r2, [pc, #252]	; (2328 <_oscctrl_init_referenced_generators+0x128>)
    222c:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    222e:	461a      	mov	r2, r3
    2230:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    2234:	f013 0f10 	tst.w	r3, #16
    2238:	d1fa      	bne.n	2230 <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    223a:	2200      	movs	r2, #0
    223c:	4b39      	ldr	r3, [pc, #228]	; (2324 <_oscctrl_init_referenced_generators+0x124>)
    223e:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2242:	461a      	mov	r2, r3
    2244:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    2248:	f013 0f04 	tst.w	r3, #4
    224c:	d1fa      	bne.n	2244 <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    224e:	2202      	movs	r2, #2
    2250:	4b34      	ldr	r3, [pc, #208]	; (2324 <_oscctrl_init_referenced_generators+0x124>)
    2252:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2254:	461a      	mov	r2, r3
    2256:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    225a:	f013 0f02 	tst.w	r3, #2
    225e:	d1fa      	bne.n	2256 <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    2260:	4b30      	ldr	r3, [pc, #192]	; (2324 <_oscctrl_init_referenced_generators+0x124>)
    2262:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    2264:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2266:	461a      	mov	r2, r3
    2268:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    226c:	f013 0f08 	tst.w	r3, #8
    2270:	d1fa      	bne.n	2268 <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    2272:	2219      	movs	r2, #25
    2274:	4b2b      	ldr	r3, [pc, #172]	; (2324 <_oscctrl_init_referenced_generators+0x124>)
    2276:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    227a:	461a      	mov	r2, r3
    227c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    2280:	f013 0f04 	tst.w	r3, #4
    2284:	d1fa      	bne.n	227c <_oscctrl_init_referenced_generators+0x7c>
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    2286:	2243      	movs	r2, #67	; 0x43
    2288:	4b25      	ldr	r3, [pc, #148]	; (2320 <_oscctrl_init_referenced_generators+0x120>)
    228a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    228e:	4a27      	ldr	r2, [pc, #156]	; (232c <_oscctrl_init_referenced_generators+0x12c>)
    2290:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
    2294:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    2296:	461a      	mov	r2, r3
    2298:	6d13      	ldr	r3, [r2, #80]	; 0x50
    229a:	f013 0f06 	tst.w	r3, #6
    229e:	d1fb      	bne.n	2298 <_oscctrl_init_referenced_generators+0x98>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    22a0:	4b20      	ldr	r3, [pc, #128]	; (2324 <_oscctrl_init_referenced_generators+0x124>)
    22a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
    22a6:	64da      	str	r2, [r3, #76]	; 0x4c
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    22a8:	2202      	movs	r2, #2
    22aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    22ae:	461a      	mov	r2, r3
    22b0:	6d13      	ldr	r3, [r2, #80]	; 0x50
    22b2:	f013 0f02 	tst.w	r3, #2
    22b6:	d1fb      	bne.n	22b0 <_oscctrl_init_referenced_generators+0xb0>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    22b8:	4b1a      	ldr	r3, [pc, #104]	; (2324 <_oscctrl_init_referenced_generators+0x124>)
    22ba:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    22be:	f013 0f01 	tst.w	r3, #1
    22c2:	d026      	beq.n	2312 <_oscctrl_init_referenced_generators+0x112>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    22c4:	4a17      	ldr	r2, [pc, #92]	; (2324 <_oscctrl_init_referenced_generators+0x124>)
    22c6:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    22c8:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    22cc:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    22d0:	d1f9      	bne.n	22c6 <_oscctrl_init_referenced_generators+0xc6>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    22d2:	4b14      	ldr	r3, [pc, #80]	; (2324 <_oscctrl_init_referenced_generators+0x124>)
    22d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    22d6:	f012 0f01 	tst.w	r2, #1
    22da:	d103      	bne.n	22e4 <_oscctrl_init_referenced_generators+0xe4>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    22dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    22de:	f012 0f02 	tst.w	r2, #2
    22e2:	d0f7      	beq.n	22d4 <_oscctrl_init_referenced_generators+0xd4>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    22e4:	4a0e      	ldr	r2, [pc, #56]	; (2320 <_oscctrl_init_referenced_generators+0x120>)
    22e6:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    22e8:	2b00      	cmp	r3, #0
    22ea:	d1fc      	bne.n	22e6 <_oscctrl_init_referenced_generators+0xe6>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    22ec:	4a0c      	ldr	r2, [pc, #48]	; (2320 <_oscctrl_init_referenced_generators+0x120>)
    22ee:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    22f0:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    22f4:	f043 0301 	orr.w	r3, r3, #1
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    22f8:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    22fa:	4611      	mov	r1, r2
    22fc:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    2300:	684b      	ldr	r3, [r1, #4]
    2302:	4213      	tst	r3, r2
    2304:	d1fc      	bne.n	2300 <_oscctrl_init_referenced_generators+0x100>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    2306:	4a06      	ldr	r2, [pc, #24]	; (2320 <_oscctrl_init_referenced_generators+0x120>)
    2308:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    230a:	f013 0f04 	tst.w	r3, #4
    230e:	d1fb      	bne.n	2308 <_oscctrl_init_referenced_generators+0x108>
		;
#endif
	(void)hw;
}
    2310:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    2312:	4a04      	ldr	r2, [pc, #16]	; (2324 <_oscctrl_init_referenced_generators+0x124>)
    2314:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    2316:	f413 7f80 	tst.w	r3, #256	; 0x100
    231a:	d0fb      	beq.n	2314 <_oscctrl_init_referenced_generators+0x114>
    231c:	e7d9      	b.n	22d2 <_oscctrl_init_referenced_generators+0xd2>
    231e:	bf00      	nop
    2320:	40001c00 	.word	0x40001c00
    2324:	40001000 	.word	0x40001000
    2328:	0401bb80 	.word	0x0401bb80
    232c:	000307a0 	.word	0x000307a0

00002330 <_timer_init>:

/**
 * \brief Initialize Timer
 */
int32_t _timer_init(struct _timer_device *const dev, void *const hw)
{
    2330:	b538      	push	{r3, r4, r5, lr}
    2332:	460c      	mov	r4, r1
	ASSERT(dev);
    2334:	4605      	mov	r5, r0
    2336:	2230      	movs	r2, #48	; 0x30
    2338:	4917      	ldr	r1, [pc, #92]	; (2398 <_timer_init+0x68>)
    233a:	3000      	adds	r0, #0
    233c:	bf18      	it	ne
    233e:	2001      	movne	r0, #1
    2340:	4b16      	ldr	r3, [pc, #88]	; (239c <_timer_init+0x6c>)
    2342:	4798      	blx	r3

	dev->hw = hw;
    2344:	60ec      	str	r4, [r5, #12]
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    2346:	2301      	movs	r3, #1
    2348:	8023      	strh	r3, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    234a:	f248 0203 	movw	r2, #32771	; 0x8003
    234e:	6923      	ldr	r3, [r4, #16]
    2350:	4213      	tst	r3, r2
    2352:	d1fc      	bne.n	234e <_timer_init+0x1e>

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    2354:	68ea      	ldr	r2, [r5, #12]
    2356:	6913      	ldr	r3, [r2, #16]
    2358:	f013 0f01 	tst.w	r3, #1
    235c:	d1fb      	bne.n	2356 <_timer_init+0x26>
}

static inline void hri_rtcmode0_write_EVCTRL_reg(const void *const hw, hri_rtcmode0_evctrl_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.EVCTRL.reg = data;
    235e:	f44f 7380 	mov.w	r3, #256	; 0x100
    2362:	6053      	str	r3, [r2, #4]
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(
	    dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC | RTC_MODE0_CTRLA_MATCHCLR);
    2364:	68ea      	ldr	r2, [r5, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    2366:	f248 0380 	movw	r3, #32896	; 0x8080
    236a:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    236c:	f248 0103 	movw	r1, #32771	; 0x8003
    2370:	6913      	ldr	r3, [r2, #16]
    2372:	420b      	tst	r3, r1
    2374:	d1fc      	bne.n	2370 <_timer_init+0x40>
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    2376:	68ea      	ldr	r2, [r5, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    2378:	f44f 6380 	mov.w	r3, #1024	; 0x400
    237c:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    237e:	6913      	ldr	r3, [r2, #16]
    2380:	f013 0f60 	tst.w	r3, #96	; 0x60
    2384:	d1fb      	bne.n	237e <_timer_init+0x4e>
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    2386:	68eb      	ldr	r3, [r5, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    2388:	f44f 7280 	mov.w	r2, #256	; 0x100
    238c:	815a      	strh	r2, [r3, #10]

	_rtc_dev = dev;
    238e:	4b04      	ldr	r3, [pc, #16]	; (23a0 <_timer_init+0x70>)
    2390:	601d      	str	r5, [r3, #0]

	return ERR_NONE;
}
    2392:	2000      	movs	r0, #0
    2394:	bd38      	pop	{r3, r4, r5, pc}
    2396:	bf00      	nop
    2398:	00005a7c 	.word	0x00005a7c
    239c:	00001b89 	.word	0x00001b89
    23a0:	20000654 	.word	0x20000654

000023a4 <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return NULL;
}
    23a4:	2000      	movs	r0, #0
    23a6:	4770      	bx	lr

000023a8 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    23a8:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    23aa:	4b08      	ldr	r3, [pc, #32]	; (23cc <RTC_Handler+0x24>)
    23ac:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    23ae:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    23b0:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    23b2:	f413 7f80 	tst.w	r3, #256	; 0x100
    23b6:	d007      	beq.n	23c8 <RTC_Handler+0x20>
		if (dev->timer_cb.period_expired) {
    23b8:	6823      	ldr	r3, [r4, #0]
    23ba:	b10b      	cbz	r3, 23c0 <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
    23bc:	4620      	mov	r0, r4
    23be:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    23c0:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    23c2:	f44f 7280 	mov.w	r2, #256	; 0x100
    23c6:	819a      	strh	r2, [r3, #12]
    23c8:	bd10      	pop	{r4, pc}
    23ca:	bf00      	nop
    23cc:	20000654 	.word	0x20000654

000023d0 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    23d0:	b470      	push	{r4, r5, r6}
    23d2:	b089      	sub	sp, #36	; 0x24
    23d4:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    23d6:	466c      	mov	r4, sp
    23d8:	4d0d      	ldr	r5, [pc, #52]	; (2410 <_sercom_get_hardware_index+0x40>)
    23da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    23dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    23de:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    23e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    23e6:	9b00      	ldr	r3, [sp, #0]
    23e8:	42b3      	cmp	r3, r6
    23ea:	d00d      	beq.n	2408 <_sercom_get_hardware_index+0x38>
    23ec:	4631      	mov	r1, r6
    23ee:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    23f0:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    23f2:	f853 2b04 	ldr.w	r2, [r3], #4
    23f6:	428a      	cmp	r2, r1
    23f8:	d007      	beq.n	240a <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    23fa:	3001      	adds	r0, #1
    23fc:	2808      	cmp	r0, #8
    23fe:	d1f8      	bne.n	23f2 <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    2400:	2000      	movs	r0, #0
}
    2402:	b009      	add	sp, #36	; 0x24
    2404:	bc70      	pop	{r4, r5, r6}
    2406:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2408:	2000      	movs	r0, #0
			return i;
    240a:	b2c0      	uxtb	r0, r0
    240c:	e7f9      	b.n	2402 <_sercom_get_hardware_index+0x32>
    240e:	bf00      	nop
    2410:	00005a94 	.word	0x00005a94

00002414 <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM1) {
    2414:	4b05      	ldr	r3, [pc, #20]	; (242c <_sercom_init_irq_param+0x18>)
    2416:	4298      	cmp	r0, r3
    2418:	d005      	beq.n	2426 <_sercom_init_irq_param+0x12>
		_sercom1_dev = (struct _i2c_m_async_device *)dev;
	}

	if (hw == SERCOM5) {
    241a:	4b05      	ldr	r3, [pc, #20]	; (2430 <_sercom_init_irq_param+0x1c>)
    241c:	4298      	cmp	r0, r3
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    241e:	bf04      	itt	eq
    2420:	4b04      	ldreq	r3, [pc, #16]	; (2434 <_sercom_init_irq_param+0x20>)
    2422:	6059      	streq	r1, [r3, #4]
    2424:	4770      	bx	lr
		_sercom1_dev = (struct _i2c_m_async_device *)dev;
    2426:	4b03      	ldr	r3, [pc, #12]	; (2434 <_sercom_init_irq_param+0x20>)
    2428:	6019      	str	r1, [r3, #0]
    242a:	4770      	bx	lr
    242c:	40003400 	.word	0x40003400
    2430:	43000400 	.word	0x43000400
    2434:	20000658 	.word	0x20000658

00002438 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    2438:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    243a:	4b03      	ldr	r3, [pc, #12]	; (2448 <_sercom_get_irq_num+0x10>)
    243c:	4798      	blx	r3
    243e:	0080      	lsls	r0, r0, #2
    2440:	302e      	adds	r0, #46	; 0x2e
}
    2442:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    2446:	bd08      	pop	{r3, pc}
    2448:	000023d1 	.word	0x000023d1

0000244c <_get_i2cm_index>:
{
    244c:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    244e:	4b0a      	ldr	r3, [pc, #40]	; (2478 <_get_i2cm_index+0x2c>)
    2450:	4798      	blx	r3
		if (_i2cms[i].number == sercom_offset) {
    2452:	2801      	cmp	r0, #1
    2454:	d00c      	beq.n	2470 <_get_i2cm_index+0x24>
    2456:	2805      	cmp	r0, #5
    2458:	bf08      	it	eq
    245a:	2001      	moveq	r0, #1
    245c:	d009      	beq.n	2472 <_get_i2cm_index+0x26>
	ASSERT(false);
    245e:	f240 32b2 	movw	r2, #946	; 0x3b2
    2462:	4906      	ldr	r1, [pc, #24]	; (247c <_get_i2cm_index+0x30>)
    2464:	2000      	movs	r0, #0
    2466:	4b06      	ldr	r3, [pc, #24]	; (2480 <_get_i2cm_index+0x34>)
    2468:	4798      	blx	r3
	return -1;
    246a:	f04f 30ff 	mov.w	r0, #4294967295
}
    246e:	bd08      	pop	{r3, pc}
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    2470:	2000      	movs	r0, #0
			return i;
    2472:	b240      	sxtb	r0, r0
    2474:	bd08      	pop	{r3, pc}
    2476:	bf00      	nop
    2478:	000023d1 	.word	0x000023d1
    247c:	00005b08 	.word	0x00005b08
    2480:	00001b89 	.word	0x00001b89

00002484 <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    2484:	b538      	push	{r3, r4, r5, lr}
    2486:	4605      	mov	r5, r0
    2488:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    248a:	4608      	mov	r0, r1
    248c:	4b32      	ldr	r3, [pc, #200]	; (2558 <_i2c_m_sync_init_impl+0xd4>)
    248e:	4798      	blx	r3
    2490:	b2c0      	uxtb	r0, r0
	};
}

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    2492:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    2494:	f013 0f01 	tst.w	r3, #1
    2498:	d122      	bne.n	24e0 <_i2c_m_sync_init_impl+0x5c>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    249a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    249e:	4a2f      	ldr	r2, [pc, #188]	; (255c <_i2c_m_sync_init_impl+0xd8>)
    24a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    24a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    24a6:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    24aa:	69e3      	ldr	r3, [r4, #28]
    24ac:	f013 0f03 	tst.w	r3, #3
    24b0:	d1fb      	bne.n	24aa <_i2c_m_sync_init_impl+0x26>
static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    24b2:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    24b4:	f013 0f02 	tst.w	r3, #2
    24b8:	d00b      	beq.n	24d2 <_i2c_m_sync_init_impl+0x4e>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    24ba:	6823      	ldr	r3, [r4, #0]
    24bc:	f023 0302 	bic.w	r3, r3, #2
    24c0:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    24c2:	69e3      	ldr	r3, [r4, #28]
    24c4:	f013 0f03 	tst.w	r3, #3
    24c8:	d1fb      	bne.n	24c2 <_i2c_m_sync_init_impl+0x3e>
    24ca:	69e3      	ldr	r3, [r4, #28]
    24cc:	f013 0f02 	tst.w	r3, #2
    24d0:	d1fb      	bne.n	24ca <_i2c_m_sync_init_impl+0x46>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    24d2:	f042 0201 	orr.w	r2, r2, #1
}

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    24d6:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    24d8:	69e3      	ldr	r3, [r4, #28]
    24da:	f013 0f03 	tst.w	r3, #3
    24de:	d1fb      	bne.n	24d8 <_i2c_m_sync_init_impl+0x54>
    24e0:	69e3      	ldr	r3, [r4, #28]
    24e2:	f013 0f01 	tst.w	r3, #1
    24e6:	d1fb      	bne.n	24e0 <_i2c_m_sync_init_impl+0x5c>
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    24e8:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    24ec:	4a1b      	ldr	r2, [pc, #108]	; (255c <_i2c_m_sync_init_impl+0xd8>)
    24ee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    24f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    24f4:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    24f6:	69e3      	ldr	r3, [r4, #28]
    24f8:	f013 0f03 	tst.w	r3, #3
    24fc:	d1fb      	bne.n	24f6 <_i2c_m_sync_init_impl+0x72>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    24fe:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2502:	4916      	ldr	r1, [pc, #88]	; (255c <_i2c_m_sync_init_impl+0xd8>)
    2504:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    2508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    250a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    250c:	69e3      	ldr	r3, [r4, #28]
    250e:	f013 0f04 	tst.w	r3, #4
    2512:	d1fb      	bne.n	250c <_i2c_m_sync_init_impl+0x88>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    2514:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2518:	4910      	ldr	r1, [pc, #64]	; (255c <_i2c_m_sync_init_impl+0xd8>)
    251a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    251e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    2520:	60e3      	str	r3, [r4, #12]

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    2522:	f3c2 6301 	ubfx	r3, r2, #24, #2
    2526:	81ab      	strh	r3, [r5, #12]

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    2528:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    252a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    252e:	2b01      	cmp	r3, #1
    2530:	bf94      	ite	ls
    2532:	2300      	movls	r3, #0
    2534:	2301      	movhi	r3, #1
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    2536:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    253a:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    253c:	69e3      	ldr	r3, [r4, #28]
    253e:	f013 0f04 	tst.w	r3, #4
    2542:	d1fb      	bne.n	253c <_i2c_m_sync_init_impl+0xb8>

	service->trise = _i2cms[i].trise;
    2544:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2548:	4b04      	ldr	r3, [pc, #16]	; (255c <_i2c_m_sync_init_impl+0xd8>)
    254a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    254e:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    2550:	81eb      	strh	r3, [r5, #14]

	return ERR_NONE;
}
    2552:	2000      	movs	r0, #0
    2554:	bd38      	pop	{r3, r4, r5, pc}
    2556:	bf00      	nop
    2558:	0000244d 	.word	0x0000244d
    255c:	00005a94 	.word	0x00005a94

00002560 <_sercom_i2c_m_irq_handler>:
{
    2560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2564:	4605      	mov	r5, r0
	void *   hw    = i2c_dev->hw;
    2566:	6904      	ldr	r4, [r0, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    2568:	7e26      	ldrb	r6, [r4, #24]
    256a:	b2f6      	uxtb	r6, r6
	ASSERT(i2c_dev);
    256c:	f8df 8234 	ldr.w	r8, [pc, #564]	; 27a4 <_sercom_i2c_m_irq_handler+0x244>
    2570:	f240 4224 	movw	r2, #1060	; 0x424
    2574:	4641      	mov	r1, r8
    2576:	3000      	adds	r0, #0
    2578:	bf18      	it	ne
    257a:	2001      	movne	r0, #1
    257c:	4f88      	ldr	r7, [pc, #544]	; (27a0 <_sercom_i2c_m_irq_handler+0x240>)
    257e:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    2580:	6928      	ldr	r0, [r5, #16]
    2582:	f240 4225 	movw	r2, #1061	; 0x425
    2586:	4641      	mov	r1, r8
    2588:	3000      	adds	r0, #0
    258a:	bf18      	it	ne
    258c:	2001      	movne	r0, #1
    258e:	47b8      	blx	r7
	while (!(flags & ERROR_FLAG)) {
    2590:	f016 0f80 	tst.w	r6, #128	; 0x80
    2594:	f040 80f6 	bne.w	2784 <_sercom_i2c_m_irq_handler+0x224>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    2598:	6821      	ldr	r1, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    259a:	69e3      	ldr	r3, [r4, #28]
    259c:	f013 0f04 	tst.w	r3, #4
    25a0:	d1fb      	bne.n	259a <_sercom_i2c_m_irq_handler+0x3a>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    25a2:	8b63      	ldrh	r3, [r4, #26]
    25a4:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    25a6:	f016 0f01 	tst.w	r6, #1
    25aa:	f000 8092 	beq.w	26d2 <_sercom_i2c_m_irq_handler+0x172>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    25ae:	f013 0f02 	tst.w	r3, #2
    25b2:	d024      	beq.n	25fe <_sercom_i2c_m_irq_handler+0x9e>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    25b4:	2201      	movs	r2, #1
    25b6:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    25b8:	886a      	ldrh	r2, [r5, #2]
    25ba:	b292      	uxth	r2, r2
    25bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    25c0:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    25c2:	886a      	ldrh	r2, [r5, #2]
    25c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    25c8:	0412      	lsls	r2, r2, #16
    25ca:	0c12      	lsrs	r2, r2, #16
    25cc:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    25ce:	f003 0301 	and.w	r3, r3, #1
			return I2C_ERR_BAD_ADDRESS;
    25d2:	2b00      	cmp	r3, #0
    25d4:	bf14      	ite	ne
    25d6:	f06f 0104 	mvnne.w	r1, #4
    25da:	f06f 0103 	mvneq.w	r1, #3
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    25de:	886b      	ldrh	r3, [r5, #2]
    25e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    25e4:	041b      	lsls	r3, r3, #16
    25e6:	0c1b      	lsrs	r3, r3, #16
    25e8:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    25ea:	696b      	ldr	r3, [r5, #20]
    25ec:	2b00      	cmp	r3, #0
    25ee:	f000 80c7 	beq.w	2780 <_sercom_i2c_m_irq_handler+0x220>
			i2c_dev->cb.error(i2c_dev, ret);
    25f2:	4628      	mov	r0, r5
    25f4:	4798      	blx	r3
	((Sercom *)hw)->I2CM.INTFLAG.reg = mask;
    25f6:	2380      	movs	r3, #128	; 0x80
    25f8:	7623      	strb	r3, [r4, #24]
    25fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    25fe:	f013 0f04 	tst.w	r3, #4
    2602:	d124      	bne.n	264e <_sercom_i2c_m_irq_handler+0xee>
			if (msg->flags & I2C_M_TEN) {
    2604:	886b      	ldrh	r3, [r5, #2]
    2606:	f413 6f80 	tst.w	r3, #1024	; 0x400
    260a:	d03e      	beq.n	268a <_sercom_i2c_m_irq_handler+0x12a>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    260c:	882b      	ldrh	r3, [r5, #0]
    260e:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    2610:	f003 0206 	and.w	r2, r3, #6
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2614:	69e3      	ldr	r3, [r4, #28]
    2616:	f013 0f04 	tst.w	r3, #4
    261a:	d1fb      	bne.n	2614 <_sercom_i2c_m_irq_handler+0xb4>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    261c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    261e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
				hri_sercomi2cm_write_ADDR_reg(hw,
    2622:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    2626:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    2628:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    262a:	69e3      	ldr	r3, [r4, #28]
    262c:	f013 0f04 	tst.w	r3, #4
    2630:	d1fb      	bne.n	262a <_sercom_i2c_m_irq_handler+0xca>
				msg->flags &= ~I2C_M_TEN;
    2632:	886b      	ldrh	r3, [r5, #2]
    2634:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    2638:	041b      	lsls	r3, r3, #16
    263a:	0c1b      	lsrs	r3, r3, #16
    263c:	806b      	strh	r3, [r5, #2]
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    263e:	69ab      	ldr	r3, [r5, #24]
    2640:	2b00      	cmp	r3, #0
    2642:	f000 8088 	beq.w	2756 <_sercom_i2c_m_irq_handler+0x1f6>
			i2c_dev->cb.tx_complete(i2c_dev);
    2646:	4628      	mov	r0, r5
    2648:	4798      	blx	r3
    264a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (msg->len > 0) {
    264e:	686b      	ldr	r3, [r5, #4]
    2650:	2b00      	cmp	r3, #0
    2652:	dd04      	ble.n	265e <_sercom_i2c_m_irq_handler+0xfe>
					msg->flags |= I2C_M_FAIL;
    2654:	886b      	ldrh	r3, [r5, #2]
    2656:	b29b      	uxth	r3, r3
    2658:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    265c:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    265e:	886b      	ldrh	r3, [r5, #2]
    2660:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2664:	d108      	bne.n	2678 <_sercom_i2c_m_irq_handler+0x118>
				msg->flags &= ~I2C_M_BUSY;
    2666:	886b      	ldrh	r3, [r5, #2]
    2668:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    266c:	041b      	lsls	r3, r3, #16
    266e:	0c1b      	lsrs	r3, r3, #16
    2670:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    2672:	f06f 0101 	mvn.w	r1, #1
    2676:	e7b2      	b.n	25de <_sercom_i2c_m_irq_handler+0x7e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    2678:	6863      	ldr	r3, [r4, #4]
    267a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    267e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2680:	69e3      	ldr	r3, [r4, #28]
    2682:	f013 0f04 	tst.w	r3, #4
    2686:	d1fb      	bne.n	2680 <_sercom_i2c_m_irq_handler+0x120>
    2688:	e7ed      	b.n	2666 <_sercom_i2c_m_irq_handler+0x106>
			if (msg->len == 0) {
    268a:	686b      	ldr	r3, [r5, #4]
    268c:	b99b      	cbnz	r3, 26b6 <_sercom_i2c_m_irq_handler+0x156>
				if (msg->flags & I2C_M_STOP) {
    268e:	886b      	ldrh	r3, [r5, #2]
    2690:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2694:	d106      	bne.n	26a4 <_sercom_i2c_m_irq_handler+0x144>
				msg->flags &= ~I2C_M_BUSY;
    2696:	886b      	ldrh	r3, [r5, #2]
    2698:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    269c:	041b      	lsls	r3, r3, #16
    269e:	0c1b      	lsrs	r3, r3, #16
    26a0:	806b      	strh	r3, [r5, #2]
    26a2:	e7cc      	b.n	263e <_sercom_i2c_m_irq_handler+0xde>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    26a4:	6863      	ldr	r3, [r4, #4]
    26a6:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    26aa:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    26ac:	69e3      	ldr	r3, [r4, #28]
    26ae:	f013 0f04 	tst.w	r3, #4
    26b2:	d1fb      	bne.n	26ac <_sercom_i2c_m_irq_handler+0x14c>
    26b4:	e7ef      	b.n	2696 <_sercom_i2c_m_irq_handler+0x136>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    26b6:	68ab      	ldr	r3, [r5, #8]
    26b8:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    26ba:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    26bc:	69e3      	ldr	r3, [r4, #28]
    26be:	f013 0f04 	tst.w	r3, #4
    26c2:	d1fb      	bne.n	26bc <_sercom_i2c_m_irq_handler+0x15c>
				msg->buffer++;
    26c4:	68ab      	ldr	r3, [r5, #8]
    26c6:	3301      	adds	r3, #1
    26c8:	60ab      	str	r3, [r5, #8]
				msg->len--;
    26ca:	686b      	ldr	r3, [r5, #4]
    26cc:	3b01      	subs	r3, #1
    26ce:	606b      	str	r3, [r5, #4]
    26d0:	e7b5      	b.n	263e <_sercom_i2c_m_irq_handler+0xde>
	} else if (flags & SB_FLAG) {
    26d2:	f016 0f02 	tst.w	r6, #2
    26d6:	d041      	beq.n	275c <_sercom_i2c_m_irq_handler+0x1fc>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    26d8:	686a      	ldr	r2, [r5, #4]
    26da:	2a00      	cmp	r2, #0
    26dc:	d036      	beq.n	274c <_sercom_i2c_m_irq_handler+0x1ec>
    26de:	f013 0f04 	tst.w	r3, #4
    26e2:	d133      	bne.n	274c <_sercom_i2c_m_irq_handler+0x1ec>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    26e4:	f3c1 61c0 	ubfx	r1, r1, #27, #1
			msg->len--;
    26e8:	3a01      	subs	r2, #1
    26ea:	606a      	str	r2, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    26ec:	2a00      	cmp	r2, #0
    26ee:	d137      	bne.n	2760 <_sercom_i2c_m_irq_handler+0x200>
    26f0:	2900      	cmp	r1, #0
    26f2:	d039      	beq.n	2768 <_sercom_i2c_m_irq_handler+0x208>
				if (msg->flags & I2C_M_STOP) {
    26f4:	886b      	ldrh	r3, [r5, #2]
    26f6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    26fa:	d116      	bne.n	272a <_sercom_i2c_m_irq_handler+0x1ca>
				msg->flags &= ~I2C_M_BUSY;
    26fc:	886b      	ldrh	r3, [r5, #2]
    26fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2702:	041b      	lsls	r3, r3, #16
    2704:	0c1b      	lsrs	r3, r3, #16
    2706:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    2708:	68aa      	ldr	r2, [r5, #8]
    270a:	1c53      	adds	r3, r2, #1
    270c:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    270e:	69e3      	ldr	r3, [r4, #28]
    2710:	f013 0f04 	tst.w	r3, #4
    2714:	d1fb      	bne.n	270e <_sercom_i2c_m_irq_handler+0x1ae>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    2716:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2718:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    271a:	2302      	movs	r3, #2
    271c:	7623      	strb	r3, [r4, #24]
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    271e:	69eb      	ldr	r3, [r5, #28]
    2720:	b1e3      	cbz	r3, 275c <_sercom_i2c_m_irq_handler+0x1fc>
			i2c_dev->cb.rx_complete(i2c_dev);
    2722:	4628      	mov	r0, r5
    2724:	4798      	blx	r3
    2726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    272a:	6863      	ldr	r3, [r4, #4]
    272c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2730:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2732:	69e3      	ldr	r3, [r4, #28]
    2734:	f013 0f04 	tst.w	r3, #4
    2738:	d1fb      	bne.n	2732 <_sercom_i2c_m_irq_handler+0x1d2>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    273a:	6863      	ldr	r3, [r4, #4]
    273c:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    2740:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2742:	69e3      	ldr	r3, [r4, #28]
    2744:	f013 0f04 	tst.w	r3, #4
    2748:	d1fb      	bne.n	2742 <_sercom_i2c_m_irq_handler+0x1e2>
    274a:	e7d7      	b.n	26fc <_sercom_i2c_m_irq_handler+0x19c>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    274c:	2302      	movs	r3, #2
    274e:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    2750:	f06f 0101 	mvn.w	r1, #1
    2754:	e743      	b.n	25de <_sercom_i2c_m_irq_handler+0x7e>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    2756:	f016 0f02 	tst.w	r6, #2
    275a:	d1e0      	bne.n	271e <_sercom_i2c_m_irq_handler+0x1be>
    275c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    2760:	2a01      	cmp	r2, #1
    2762:	d1d1      	bne.n	2708 <_sercom_i2c_m_irq_handler+0x1a8>
    2764:	2900      	cmp	r1, #0
    2766:	d0cf      	beq.n	2708 <_sercom_i2c_m_irq_handler+0x1a8>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    2768:	6863      	ldr	r3, [r4, #4]
    276a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    276e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2770:	69e3      	ldr	r3, [r4, #28]
    2772:	f013 0f04 	tst.w	r3, #4
    2776:	d1fb      	bne.n	2770 <_sercom_i2c_m_irq_handler+0x210>
			if (msg->len == 0) {
    2778:	686b      	ldr	r3, [r5, #4]
    277a:	2b00      	cmp	r3, #0
    277c:	d0ba      	beq.n	26f4 <_sercom_i2c_m_irq_handler+0x194>
    277e:	e7c3      	b.n	2708 <_sercom_i2c_m_irq_handler+0x1a8>
    2780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    2784:	886b      	ldrh	r3, [r5, #2]
    2786:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    278a:	041b      	lsls	r3, r3, #16
    278c:	0c1b      	lsrs	r3, r3, #16
    278e:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    2790:	696b      	ldr	r3, [r5, #20]
    2792:	2b00      	cmp	r3, #0
    2794:	d0e2      	beq.n	275c <_sercom_i2c_m_irq_handler+0x1fc>
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    2796:	f06f 0104 	mvn.w	r1, #4
    279a:	4628      	mov	r0, r5
    279c:	4798      	blx	r3
    279e:	e72a      	b.n	25f6 <_sercom_i2c_m_irq_handler+0x96>
    27a0:	00001b89 	.word	0x00001b89
    27a4:	00005b08 	.word	0x00005b08

000027a8 <_i2c_m_async_init>:
{
    27a8:	b570      	push	{r4, r5, r6, lr}
    27aa:	460d      	mov	r5, r1
	ASSERT(i2c_dev);
    27ac:	4606      	mov	r6, r0
    27ae:	f44f 6293 	mov.w	r2, #1176	; 0x498
    27b2:	4918      	ldr	r1, [pc, #96]	; (2814 <_i2c_m_async_init+0x6c>)
    27b4:	3000      	adds	r0, #0
    27b6:	bf18      	it	ne
    27b8:	2001      	movne	r0, #1
    27ba:	4b17      	ldr	r3, [pc, #92]	; (2818 <_i2c_m_async_init+0x70>)
    27bc:	4798      	blx	r3
	i2c_dev->hw = hw;
    27be:	6135      	str	r5, [r6, #16]
	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    27c0:	4629      	mov	r1, r5
    27c2:	4630      	mov	r0, r6
    27c4:	4b15      	ldr	r3, [pc, #84]	; (281c <_i2c_m_async_init+0x74>)
    27c6:	4798      	blx	r3
	if (init_status) {
    27c8:	4604      	mov	r4, r0
    27ca:	b108      	cbz	r0, 27d0 <_i2c_m_async_init+0x28>
}
    27cc:	4620      	mov	r0, r4
    27ce:	bd70      	pop	{r4, r5, r6, pc}
	_sercom_init_irq_param(hw, (void *)i2c_dev);
    27d0:	4631      	mov	r1, r6
    27d2:	4628      	mov	r0, r5
    27d4:	4b12      	ldr	r3, [pc, #72]	; (2820 <_i2c_m_async_init+0x78>)
    27d6:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    27d8:	4628      	mov	r0, r5
    27da:	4b12      	ldr	r3, [pc, #72]	; (2824 <_i2c_m_async_init+0x7c>)
    27dc:	4798      	blx	r3
    27de:	1d01      	adds	r1, r0, #4
    27e0:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    27e2:	2501      	movs	r5, #1
    27e4:	f000 021f 	and.w	r2, r0, #31
    27e8:	fa05 f202 	lsl.w	r2, r5, r2
    27ec:	0943      	lsrs	r3, r0, #5
    27ee:	009b      	lsls	r3, r3, #2
    27f0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    27f4:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    27f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    27fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2800:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2804:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2808:	601a      	str	r2, [r3, #0]
		irq++;
    280a:	3001      	adds	r0, #1
    280c:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    280e:	4281      	cmp	r1, r0
    2810:	d1e8      	bne.n	27e4 <_i2c_m_async_init+0x3c>
    2812:	e7db      	b.n	27cc <_i2c_m_async_init+0x24>
    2814:	00005b08 	.word	0x00005b08
    2818:	00001b89 	.word	0x00001b89
    281c:	00002485 	.word	0x00002485
    2820:	00002415 	.word	0x00002415
    2824:	00002439 	.word	0x00002439

00002828 <_i2c_m_async_transfer>:
{
    2828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    282c:	460c      	mov	r4, r1
	ASSERT(i2c_dev);
    282e:	4605      	mov	r5, r0
    2830:	f110 0800 	adds.w	r8, r0, #0
    2834:	bf18      	it	ne
    2836:	f04f 0801 	movne.w	r8, #1
    283a:	4f45      	ldr	r7, [pc, #276]	; (2950 <_i2c_m_async_transfer+0x128>)
    283c:	f240 42ee 	movw	r2, #1262	; 0x4ee
    2840:	4639      	mov	r1, r7
    2842:	4640      	mov	r0, r8
    2844:	4e43      	ldr	r6, [pc, #268]	; (2954 <_i2c_m_async_transfer+0x12c>)
    2846:	47b0      	blx	r6
	ASSERT(i2c_dev->hw);
    2848:	6928      	ldr	r0, [r5, #16]
    284a:	f240 42ef 	movw	r2, #1263	; 0x4ef
    284e:	4639      	mov	r1, r7
    2850:	3000      	adds	r0, #0
    2852:	bf18      	it	ne
    2854:	2001      	movne	r0, #1
    2856:	47b0      	blx	r6
	ASSERT(msg);
    2858:	f44f 629e 	mov.w	r2, #1264	; 0x4f0
    285c:	4639      	mov	r1, r7
    285e:	1c20      	adds	r0, r4, #0
    2860:	bf18      	it	ne
    2862:	2001      	movne	r0, #1
    2864:	47b0      	blx	r6
	if (msg->len == 0) {
    2866:	6860      	ldr	r0, [r4, #4]
    2868:	2800      	cmp	r0, #0
    286a:	d06f      	beq.n	294c <_i2c_m_async_transfer+0x124>
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    286c:	886b      	ldrh	r3, [r5, #2]
    286e:	f413 7f80 	tst.w	r3, #256	; 0x100
    2872:	d169      	bne.n	2948 <_i2c_m_async_transfer+0x120>
	msg->flags |= I2C_M_BUSY;
    2874:	8863      	ldrh	r3, [r4, #2]
    2876:	b29b      	uxth	r3, r3
    2878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    287c:	8063      	strh	r3, [r4, #2]
	i2c_dev->service.msg = *msg;
    287e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    2882:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    2886:	692a      	ldr	r2, [r5, #16]
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    2888:	6853      	ldr	r3, [r2, #4]
    288a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    288e:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2890:	69d3      	ldr	r3, [r2, #28]
    2892:	f013 0f04 	tst.w	r3, #4
    2896:	d1fb      	bne.n	2890 <_i2c_m_async_transfer+0x68>
	void *             hw    = i2c_dev->hw;
    2898:	692c      	ldr	r4, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    289a:	6826      	ldr	r6, [r4, #0]
	ASSERT(i2c_dev);
    289c:	f240 42c6 	movw	r2, #1222	; 0x4c6
    28a0:	492b      	ldr	r1, [pc, #172]	; (2950 <_i2c_m_async_transfer+0x128>)
    28a2:	4640      	mov	r0, r8
    28a4:	4b2b      	ldr	r3, [pc, #172]	; (2954 <_i2c_m_async_transfer+0x12c>)
    28a6:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    28a8:	686b      	ldr	r3, [r5, #4]
    28aa:	2b01      	cmp	r3, #1
    28ac:	d02a      	beq.n	2904 <_i2c_m_async_transfer+0xdc>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    28ae:	6863      	ldr	r3, [r4, #4]
    28b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    28b4:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    28b6:	69e3      	ldr	r3, [r4, #28]
    28b8:	f013 0f04 	tst.w	r3, #4
    28bc:	d1fb      	bne.n	28b6 <_i2c_m_async_transfer+0x8e>
	if (msg->addr & I2C_M_TEN) {
    28be:	882b      	ldrh	r3, [r5, #0]
    28c0:	f413 6f80 	tst.w	r3, #1024	; 0x400
    28c4:	d02a      	beq.n	291c <_i2c_m_async_transfer+0xf4>
		if (msg->flags & I2C_M_RD) {
    28c6:	886a      	ldrh	r2, [r5, #2]
    28c8:	f012 0f01 	tst.w	r2, #1
    28cc:	d004      	beq.n	28d8 <_i2c_m_async_transfer+0xb0>
			msg->flags |= I2C_M_TEN;
    28ce:	886a      	ldrh	r2, [r5, #2]
    28d0:	b292      	uxth	r2, r2
    28d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    28d6:	806a      	strh	r2, [r5, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    28d8:	f240 72fe 	movw	r2, #2046	; 0x7fe
    28dc:	ea02 0243 	and.w	r2, r2, r3, lsl #1
    28e0:	69e3      	ldr	r3, [r4, #28]
    28e2:	f013 0f04 	tst.w	r3, #4
    28e6:	d1fb      	bne.n	28e0 <_i2c_m_async_transfer+0xb8>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    28e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    28ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    28ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    28f2:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    28f4:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    28f6:	69e3      	ldr	r3, [r4, #28]
    28f8:	f013 0f04 	tst.w	r3, #4
    28fc:	d1fb      	bne.n	28f6 <_i2c_m_async_transfer+0xce>
	return ERR_NONE;
    28fe:	2000      	movs	r0, #0
    2900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (msg->len == 1 && sclsm) {
    2904:	f016 6f00 	tst.w	r6, #134217728	; 0x8000000
    2908:	d0d1      	beq.n	28ae <_i2c_m_async_transfer+0x86>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    290a:	6863      	ldr	r3, [r4, #4]
    290c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    2910:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2912:	69e3      	ldr	r3, [r4, #28]
    2914:	f013 0f04 	tst.w	r3, #4
    2918:	d1fb      	bne.n	2912 <_i2c_m_async_transfer+0xea>
    291a:	e7d0      	b.n	28be <_i2c_m_async_transfer+0x96>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    291c:	8869      	ldrh	r1, [r5, #2]
    291e:	005a      	lsls	r2, r3, #1
    2920:	b2d2      	uxtb	r2, r2
    2922:	f001 0301 	and.w	r3, r1, #1
    2926:	431a      	orrs	r2, r3
    2928:	69e3      	ldr	r3, [r4, #28]
    292a:	f013 0f04 	tst.w	r3, #4
    292e:	d1fb      	bne.n	2928 <_i2c_m_async_transfer+0x100>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    2930:	6a63      	ldr	r3, [r4, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    2932:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    2936:	431a      	orrs	r2, r3
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    2938:	6262      	str	r2, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    293a:	69e3      	ldr	r3, [r4, #28]
    293c:	f013 0f04 	tst.w	r3, #4
    2940:	d1fb      	bne.n	293a <_i2c_m_async_transfer+0x112>
	return ERR_NONE;
    2942:	2000      	movs	r0, #0
    2944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_BUSY;
    2948:	f06f 0003 	mvn.w	r0, #3
}
    294c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2950:	00005b08 	.word	0x00005b08
    2954:	00001b89 	.word	0x00001b89

00002958 <_i2c_m_async_register_callback>:
	switch (type) {
    2958:	2901      	cmp	r1, #1
    295a:	d006      	beq.n	296a <_i2c_m_async_register_callback+0x12>
    295c:	b119      	cbz	r1, 2966 <_i2c_m_async_register_callback+0xe>
    295e:	2902      	cmp	r1, #2
    2960:	d005      	beq.n	296e <_i2c_m_async_register_callback+0x16>
}
    2962:	2000      	movs	r0, #0
    2964:	4770      	bx	lr
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    2966:	6142      	str	r2, [r0, #20]
		break;
    2968:	e7fb      	b.n	2962 <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    296a:	6182      	str	r2, [r0, #24]
		break;
    296c:	e7f9      	b.n	2962 <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    296e:	61c2      	str	r2, [r0, #28]
		break;
    2970:	e7f7      	b.n	2962 <_i2c_m_async_register_callback+0xa>
	...

00002974 <SERCOM1_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM1_0_Handler(void)
{
    2974:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom1_dev);
    2976:	4b02      	ldr	r3, [pc, #8]	; (2980 <SERCOM1_0_Handler+0xc>)
    2978:	6818      	ldr	r0, [r3, #0]
    297a:	4b02      	ldr	r3, [pc, #8]	; (2984 <SERCOM1_0_Handler+0x10>)
    297c:	4798      	blx	r3
    297e:	bd08      	pop	{r3, pc}
    2980:	20000658 	.word	0x20000658
    2984:	00002561 	.word	0x00002561

00002988 <SERCOM1_1_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM1_1_Handler(void)
{
    2988:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom1_dev);
    298a:	4b02      	ldr	r3, [pc, #8]	; (2994 <SERCOM1_1_Handler+0xc>)
    298c:	6818      	ldr	r0, [r3, #0]
    298e:	4b02      	ldr	r3, [pc, #8]	; (2998 <SERCOM1_1_Handler+0x10>)
    2990:	4798      	blx	r3
    2992:	bd08      	pop	{r3, pc}
    2994:	20000658 	.word	0x20000658
    2998:	00002561 	.word	0x00002561

0000299c <SERCOM1_2_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM1_2_Handler(void)
{
    299c:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom1_dev);
    299e:	4b02      	ldr	r3, [pc, #8]	; (29a8 <SERCOM1_2_Handler+0xc>)
    29a0:	6818      	ldr	r0, [r3, #0]
    29a2:	4b02      	ldr	r3, [pc, #8]	; (29ac <SERCOM1_2_Handler+0x10>)
    29a4:	4798      	blx	r3
    29a6:	bd08      	pop	{r3, pc}
    29a8:	20000658 	.word	0x20000658
    29ac:	00002561 	.word	0x00002561

000029b0 <SERCOM1_3_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM1_3_Handler(void)
{
    29b0:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom1_dev);
    29b2:	4b02      	ldr	r3, [pc, #8]	; (29bc <SERCOM1_3_Handler+0xc>)
    29b4:	6818      	ldr	r0, [r3, #0]
    29b6:	4b02      	ldr	r3, [pc, #8]	; (29c0 <SERCOM1_3_Handler+0x10>)
    29b8:	4798      	blx	r3
    29ba:	bd08      	pop	{r3, pc}
    29bc:	20000658 	.word	0x20000658
    29c0:	00002561 	.word	0x00002561

000029c4 <SERCOM5_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_0_Handler(void)
{
    29c4:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    29c6:	4b02      	ldr	r3, [pc, #8]	; (29d0 <SERCOM5_0_Handler+0xc>)
    29c8:	6858      	ldr	r0, [r3, #4]
    29ca:	4b02      	ldr	r3, [pc, #8]	; (29d4 <SERCOM5_0_Handler+0x10>)
    29cc:	4798      	blx	r3
    29ce:	bd08      	pop	{r3, pc}
    29d0:	20000658 	.word	0x20000658
    29d4:	00002561 	.word	0x00002561

000029d8 <SERCOM5_1_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_1_Handler(void)
{
    29d8:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    29da:	4b02      	ldr	r3, [pc, #8]	; (29e4 <SERCOM5_1_Handler+0xc>)
    29dc:	6858      	ldr	r0, [r3, #4]
    29de:	4b02      	ldr	r3, [pc, #8]	; (29e8 <SERCOM5_1_Handler+0x10>)
    29e0:	4798      	blx	r3
    29e2:	bd08      	pop	{r3, pc}
    29e4:	20000658 	.word	0x20000658
    29e8:	00002561 	.word	0x00002561

000029ec <SERCOM5_2_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_2_Handler(void)
{
    29ec:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    29ee:	4b02      	ldr	r3, [pc, #8]	; (29f8 <SERCOM5_2_Handler+0xc>)
    29f0:	6858      	ldr	r0, [r3, #4]
    29f2:	4b02      	ldr	r3, [pc, #8]	; (29fc <SERCOM5_2_Handler+0x10>)
    29f4:	4798      	blx	r3
    29f6:	bd08      	pop	{r3, pc}
    29f8:	20000658 	.word	0x20000658
    29fc:	00002561 	.word	0x00002561

00002a00 <SERCOM5_3_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_3_Handler(void)
{
    2a00:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    2a02:	4b02      	ldr	r3, [pc, #8]	; (2a0c <SERCOM5_3_Handler+0xc>)
    2a04:	6858      	ldr	r0, [r3, #4]
    2a06:	4b02      	ldr	r3, [pc, #8]	; (2a10 <SERCOM5_3_Handler+0x10>)
    2a08:	4798      	blx	r3
    2a0a:	bd08      	pop	{r3, pc}
    2a0c:	20000658 	.word	0x20000658
    2a10:	00002561 	.word	0x00002561

00002a14 <_spi_m_sync_init>:
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    2a14:	b570      	push	{r4, r5, r6, lr}
    2a16:	4606      	mov	r6, r0
    2a18:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    2a1a:	4608      	mov	r0, r1
    2a1c:	4b5d      	ldr	r3, [pc, #372]	; (2b94 <_spi_m_sync_init+0x180>)
    2a1e:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    2a20:	b168      	cbz	r0, 2a3e <_spi_m_sync_init+0x2a>
    2a22:	4603      	mov	r3, r0
    2a24:	2806      	cmp	r0, #6
    2a26:	bf08      	it	eq
    2a28:	2301      	moveq	r3, #1
    2a2a:	d009      	beq.n	2a40 <_spi_m_sync_init+0x2c>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    2a2c:	2e00      	cmp	r6, #0
    2a2e:	f000 809f 	beq.w	2b70 <_spi_m_sync_init+0x15c>
    2a32:	2c00      	cmp	r4, #0
    2a34:	f040 80a5 	bne.w	2b82 <_spi_m_sync_init+0x16e>
	return NULL;
    2a38:	2500      	movs	r5, #0
	ASSERT(dev && hw);
    2a3a:	2000      	movs	r0, #0
    2a3c:	e009      	b.n	2a52 <_spi_m_sync_init+0x3e>
		if (sercomspi_regs[i].n == n) {
    2a3e:	2300      	movs	r3, #0
			return &sercomspi_regs[i];
    2a40:	4d55      	ldr	r5, [pc, #340]	; (2b98 <_spi_m_sync_init+0x184>)
    2a42:	eb05 1503 	add.w	r5, r5, r3, lsl #4
    2a46:	441d      	add	r5, r3
	ASSERT(dev && hw);
    2a48:	2e00      	cmp	r6, #0
    2a4a:	d0f6      	beq.n	2a3a <_spi_m_sync_init+0x26>
    2a4c:	2001      	movs	r0, #1
    2a4e:	2c00      	cmp	r4, #0
    2a50:	d0f3      	beq.n	2a3a <_spi_m_sync_init+0x26>
    2a52:	f640 12ac 	movw	r2, #2476	; 0x9ac
    2a56:	4951      	ldr	r1, [pc, #324]	; (2b9c <_spi_m_sync_init+0x188>)
    2a58:	4b51      	ldr	r3, [pc, #324]	; (2ba0 <_spi_m_sync_init+0x18c>)
    2a5a:	4798      	blx	r3

	if (regs == NULL) {
    2a5c:	2d00      	cmp	r5, #0
    2a5e:	f000 8084 	beq.w	2b6a <_spi_m_sync_init+0x156>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    2a62:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    2a64:	f013 0f01 	tst.w	r3, #1
    2a68:	d11d      	bne.n	2aa6 <_spi_m_sync_init+0x92>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    2a6a:	682b      	ldr	r3, [r5, #0]
    2a6c:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2a70:	69e3      	ldr	r3, [r4, #28]
    2a72:	f013 0f03 	tst.w	r3, #3
    2a76:	d1fb      	bne.n	2a70 <_spi_m_sync_init+0x5c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    2a78:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    2a7a:	f013 0f02 	tst.w	r3, #2
    2a7e:	d00b      	beq.n	2a98 <_spi_m_sync_init+0x84>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    2a80:	6823      	ldr	r3, [r4, #0]
    2a82:	f023 0302 	bic.w	r3, r3, #2
    2a86:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2a88:	69e3      	ldr	r3, [r4, #28]
    2a8a:	f013 0f03 	tst.w	r3, #3
    2a8e:	d1fb      	bne.n	2a88 <_spi_m_sync_init+0x74>
    2a90:	69e3      	ldr	r3, [r4, #28]
    2a92:	f013 0f02 	tst.w	r3, #2
    2a96:	d1fb      	bne.n	2a90 <_spi_m_sync_init+0x7c>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    2a98:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    2a9c:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2a9e:	69e3      	ldr	r3, [r4, #28]
    2aa0:	f013 0f03 	tst.w	r3, #3
    2aa4:	d1fb      	bne.n	2a9e <_spi_m_sync_init+0x8a>
    2aa6:	69e3      	ldr	r3, [r4, #28]
    2aa8:	f013 0f01 	tst.w	r3, #1
    2aac:	d1fb      	bne.n	2aa6 <_spi_m_sync_init+0x92>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    2aae:	6034      	str	r4, [r6, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    2ab0:	682b      	ldr	r3, [r5, #0]
    2ab2:	f003 031c 	and.w	r3, r3, #28
    2ab6:	2b08      	cmp	r3, #8
    2ab8:	d02e      	beq.n	2b18 <_spi_m_sync_init+0x104>
	ASSERT(hw && regs);
    2aba:	f640 123c 	movw	r2, #2364	; 0x93c
    2abe:	4937      	ldr	r1, [pc, #220]	; (2b9c <_spi_m_sync_init+0x188>)
    2ac0:	1c20      	adds	r0, r4, #0
    2ac2:	bf18      	it	ne
    2ac4:	2001      	movne	r0, #1
    2ac6:	4b36      	ldr	r3, [pc, #216]	; (2ba0 <_spi_m_sync_init+0x18c>)
    2ac8:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    2aca:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    2acc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    2ad0:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    2ad4:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2ad6:	69e3      	ldr	r3, [r4, #28]
    2ad8:	f013 0f03 	tst.w	r3, #3
    2adc:	d1fb      	bne.n	2ad6 <_spi_m_sync_init+0xc2>
	    (regs->ctrlb
    2ade:	686b      	ldr	r3, [r5, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    2ae0:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    2ae4:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    2ae8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    2aec:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2aee:	69e3      	ldr	r3, [r4, #28]
    2af0:	f013 0f17 	tst.w	r3, #23
    2af4:	d1fb      	bne.n	2aee <_spi_m_sync_init+0xda>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    2af6:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    2af8:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    2afa:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    2afc:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    2b00:	686b      	ldr	r3, [r5, #4]
    2b02:	f003 0307 	and.w	r3, r3, #7
    2b06:	2b00      	cmp	r3, #0
    2b08:	bf0c      	ite	eq
    2b0a:	2301      	moveq	r3, #1
    2b0c:	2302      	movne	r3, #2
    2b0e:	7133      	strb	r3, [r6, #4]

	dev->dummy_byte = regs->dummy_byte;
    2b10:	89eb      	ldrh	r3, [r5, #14]
    2b12:	80f3      	strh	r3, [r6, #6]

	return ERR_NONE;
    2b14:	2000      	movs	r0, #0
    2b16:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(hw && regs);
    2b18:	f44f 6215 	mov.w	r2, #2384	; 0x950
    2b1c:	491f      	ldr	r1, [pc, #124]	; (2b9c <_spi_m_sync_init+0x188>)
    2b1e:	1c20      	adds	r0, r4, #0
    2b20:	bf18      	it	ne
    2b22:	2001      	movne	r0, #1
    2b24:	4b1e      	ldr	r3, [pc, #120]	; (2ba0 <_spi_m_sync_init+0x18c>)
    2b26:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    2b28:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    2b2a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    2b2e:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    2b32:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2b34:	69e3      	ldr	r3, [r4, #28]
    2b36:	f013 0f03 	tst.w	r3, #3
    2b3a:	d1fb      	bne.n	2b34 <_spi_m_sync_init+0x120>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    2b3c:	686b      	ldr	r3, [r5, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    2b3e:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    2b42:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    2b46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    2b4a:	f443 7310 	orr.w	r3, r3, #576	; 0x240
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    2b4e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2b50:	69e3      	ldr	r3, [r4, #28]
    2b52:	f013 0f17 	tst.w	r3, #23
    2b56:	d1fb      	bne.n	2b50 <_spi_m_sync_init+0x13c>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    2b58:	68ab      	ldr	r3, [r5, #8]
	((Sercom *)hw)->SPI.ADDR.reg = data;
    2b5a:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    2b5c:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    2b5e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    2b62:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    2b64:	2b00      	cmp	r3, #0
    2b66:	d1fc      	bne.n	2b62 <_spi_m_sync_init+0x14e>
    2b68:	e7ca      	b.n	2b00 <_spi_m_sync_init+0xec>
		return ERR_INVALID_ARG;
    2b6a:	f06f 000c 	mvn.w	r0, #12
    2b6e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    2b70:	f640 12ac 	movw	r2, #2476	; 0x9ac
    2b74:	4909      	ldr	r1, [pc, #36]	; (2b9c <_spi_m_sync_init+0x188>)
    2b76:	2000      	movs	r0, #0
    2b78:	4b09      	ldr	r3, [pc, #36]	; (2ba0 <_spi_m_sync_init+0x18c>)
    2b7a:	4798      	blx	r3
		return ERR_INVALID_ARG;
    2b7c:	f06f 000c 	mvn.w	r0, #12
    2b80:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    2b82:	f640 12ac 	movw	r2, #2476	; 0x9ac
    2b86:	4905      	ldr	r1, [pc, #20]	; (2b9c <_spi_m_sync_init+0x188>)
    2b88:	2001      	movs	r0, #1
    2b8a:	4b05      	ldr	r3, [pc, #20]	; (2ba0 <_spi_m_sync_init+0x18c>)
    2b8c:	4798      	blx	r3
		return ERR_INVALID_ARG;
    2b8e:	f06f 000c 	mvn.w	r0, #12
    2b92:	bd70      	pop	{r4, r5, r6, pc}
    2b94:	000023d1 	.word	0x000023d1
    2b98:	00005ae4 	.word	0x00005ae4
    2b9c:	00005b08 	.word	0x00005b08
    2ba0:	00001b89 	.word	0x00001b89

00002ba4 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    2ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2ba8:	4681      	mov	r9, r0
    2baa:	460e      	mov	r6, r1
	void *                 hw   = dev->prvt;
    2bac:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    2bae:	f8d1 8000 	ldr.w	r8, [r1]
    2bb2:	684d      	ldr	r5, [r1, #4]
    2bb4:	7907      	ldrb	r7, [r0, #4]

	ASSERT(dev && hw);
    2bb6:	b1a8      	cbz	r0, 2be4 <_spi_m_sync_trans+0x40>
    2bb8:	1c20      	adds	r0, r4, #0
    2bba:	bf18      	it	ne
    2bbc:	2001      	movne	r0, #1
    2bbe:	f44f 6231 	mov.w	r2, #2832	; 0xb10
    2bc2:	492e      	ldr	r1, [pc, #184]	; (2c7c <_spi_m_sync_trans+0xd8>)
    2bc4:	4b2e      	ldr	r3, [pc, #184]	; (2c80 <_spi_m_sync_trans+0xdc>)
    2bc6:	4798      	blx	r3
    2bc8:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    2bca:	f013 0f07 	tst.w	r3, #7
    2bce:	d134      	bne.n	2c3a <_spi_m_sync_trans+0x96>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2bd0:	69e0      	ldr	r0, [r4, #28]
    2bd2:	f010 0003 	ands.w	r0, r0, #3
    2bd6:	d1fb      	bne.n	2bd0 <_spi_m_sync_trans+0x2c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    2bd8:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    2bda:	f013 0f02 	tst.w	r3, #2
    2bde:	d030      	beq.n	2c42 <_spi_m_sync_trans+0x9e>
    2be0:	4602      	mov	r2, r0
    2be2:	e008      	b.n	2bf6 <_spi_m_sync_trans+0x52>
    2be4:	2000      	movs	r0, #0
    2be6:	e7ea      	b.n	2bbe <_spi_m_sync_trans+0x1a>
	ctrl->rxcnt++;
    2be8:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    2bea:	f013 0f80 	tst.w	r3, #128	; 0x80
    2bee:	d112      	bne.n	2c16 <_spi_m_sync_trans+0x72>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    2bf0:	68b3      	ldr	r3, [r6, #8]
    2bf2:	4283      	cmp	r3, r0
    2bf4:	d91e      	bls.n	2c34 <_spi_m_sync_trans+0x90>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    2bf6:	7e23      	ldrb	r3, [r4, #24]
    2bf8:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    2bfa:	f013 0f04 	tst.w	r3, #4
    2bfe:	d024      	beq.n	2c4a <_spi_m_sync_trans+0xa6>
	return ((Sercom *)hw)->SPI.DATA.reg;
    2c00:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    2c02:	2d00      	cmp	r5, #0
    2c04:	d0f0      	beq.n	2be8 <_spi_m_sync_trans+0x44>
		*ctrl->rxbuf++ = (uint8_t)data;
    2c06:	7029      	strb	r1, [r5, #0]
		if (ctrl->char_size > 1) {
    2c08:	2f01      	cmp	r7, #1
		*ctrl->rxbuf++ = (uint8_t)data;
    2c0a:	bf91      	iteee	ls
    2c0c:	3501      	addls	r5, #1
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    2c0e:	0a09      	lsrhi	r1, r1, #8
    2c10:	7069      	strbhi	r1, [r5, #1]
    2c12:	3502      	addhi	r5, #2
    2c14:	e7e8      	b.n	2be8 <_spi_m_sync_trans+0x44>
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    2c16:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2c1a:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    2c1c:	2380      	movs	r3, #128	; 0x80
    2c1e:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    2c20:	f06f 0012 	mvn.w	r0, #18
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    2c24:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    2c26:	f013 0f03 	tst.w	r3, #3
    2c2a:	d0fb      	beq.n	2c24 <_spi_m_sync_trans+0x80>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    2c2c:	2303      	movs	r3, #3
    2c2e:	7623      	strb	r3, [r4, #24]
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
    2c30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    2c34:	4293      	cmp	r3, r2
    2c36:	d8de      	bhi.n	2bf6 <_spi_m_sync_trans+0x52>
    2c38:	e7f4      	b.n	2c24 <_spi_m_sync_trans+0x80>
		return ERR_BUSY;
    2c3a:	f06f 0003 	mvn.w	r0, #3
    2c3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ERR_NOT_INITIALIZED;
    2c42:	f06f 0013 	mvn.w	r0, #19
    2c46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ctrl.rxcnt >= ctrl.txcnt) {
    2c4a:	4290      	cmp	r0, r2
    2c4c:	d8cd      	bhi.n	2bea <_spi_m_sync_trans+0x46>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    2c4e:	f013 0f01 	tst.w	r3, #1
    2c52:	d0ca      	beq.n	2bea <_spi_m_sync_trans+0x46>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    2c54:	f8b9 1006 	ldrh.w	r1, [r9, #6]
	if (ctrl->txbuf) {
    2c58:	f1b8 0f00 	cmp.w	r8, #0
    2c5c:	d00b      	beq.n	2c76 <_spi_m_sync_trans+0xd2>
		data = *ctrl->txbuf++;
    2c5e:	f898 1000 	ldrb.w	r1, [r8]
		if (ctrl->char_size > 1) {
    2c62:	2f01      	cmp	r7, #1
		data = *ctrl->txbuf++;
    2c64:	bf91      	iteee	ls
    2c66:	f108 0801 	addls.w	r8, r8, #1
			data |= (*ctrl->txbuf) << 8;
    2c6a:	f898 e001 	ldrbhi.w	lr, [r8, #1]
    2c6e:	ea41 210e 	orrhi.w	r1, r1, lr, lsl #8
			ctrl->txbuf++;
    2c72:	f108 0802 	addhi.w	r8, r8, #2
	ctrl->txcnt++;
    2c76:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    2c78:	62a1      	str	r1, [r4, #40]	; 0x28
    2c7a:	e7b6      	b.n	2bea <_spi_m_sync_trans+0x46>
    2c7c:	00005b08 	.word	0x00005b08
    2c80:	00001b89 	.word	0x00001b89

00002c84 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    2c84:	4b03      	ldr	r3, [pc, #12]	; (2c94 <_delay_init+0x10>)
    2c86:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    2c8a:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    2c8c:	2205      	movs	r2, #5
    2c8e:	601a      	str	r2, [r3, #0]
    2c90:	4770      	bx	lr
    2c92:	bf00      	nop
    2c94:	e000e010 	.word	0xe000e010

00002c98 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    2c98:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    2c9a:	b303      	cbz	r3, 2cde <_delay_cycles+0x46>
{
    2c9c:	b430      	push	{r4, r5}
    2c9e:	1e5d      	subs	r5, r3, #1
    2ca0:	b2ed      	uxtb	r5, r5
	while (n--) {
    2ca2:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    2ca4:	4a12      	ldr	r2, [pc, #72]	; (2cf0 <_delay_cycles+0x58>)
    2ca6:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    2caa:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    2cac:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2cae:	6813      	ldr	r3, [r2, #0]
    2cb0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2cb4:	d0fb      	beq.n	2cae <_delay_cycles+0x16>
	while (n--) {
    2cb6:	3801      	subs	r0, #1
    2cb8:	b2c0      	uxtb	r0, r0
    2cba:	28ff      	cmp	r0, #255	; 0xff
    2cbc:	d1f5      	bne.n	2caa <_delay_cycles+0x12>
    2cbe:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    2cc2:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    2cc6:	3101      	adds	r1, #1
    2cc8:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    2cca:	4b09      	ldr	r3, [pc, #36]	; (2cf0 <_delay_cycles+0x58>)
    2ccc:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    2cce:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2cd0:	461a      	mov	r2, r3
    2cd2:	6813      	ldr	r3, [r2, #0]
    2cd4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2cd8:	d0fb      	beq.n	2cd2 <_delay_cycles+0x3a>
		;
}
    2cda:	bc30      	pop	{r4, r5}
    2cdc:	4770      	bx	lr
	SysTick->LOAD = buf;
    2cde:	4b04      	ldr	r3, [pc, #16]	; (2cf0 <_delay_cycles+0x58>)
    2ce0:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    2ce2:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2ce4:	461a      	mov	r2, r3
    2ce6:	6813      	ldr	r3, [r2, #0]
    2ce8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2cec:	d0fb      	beq.n	2ce6 <_delay_cycles+0x4e>
    2cee:	4770      	bx	lr
    2cf0:	e000e010 	.word	0xe000e010

00002cf4 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    2cf4:	2000      	movs	r0, #0
    2cf6:	4770      	bx	lr

00002cf8 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    2cf8:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    2cfa:	7c83      	ldrb	r3, [r0, #18]
    2cfc:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2d00:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
    2d02:	f002 0107 	and.w	r1, r2, #7
    2d06:	2901      	cmp	r1, #1
    2d08:	d00b      	beq.n	2d22 <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2d0a:	015a      	lsls	r2, r3, #5
    2d0c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2d10:	2110      	movs	r1, #16
    2d12:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    2d16:	015b      	lsls	r3, r3, #5
    2d18:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2d1c:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    2d20:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    2d22:	f012 0f40 	tst.w	r2, #64	; 0x40
    2d26:	d00c      	beq.n	2d42 <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
    2d28:	7cc2      	ldrb	r2, [r0, #19]
    2d2a:	f36f 1286 	bfc	r2, #6, #1
    2d2e:	74c2      	strb	r2, [r0, #19]
    2d30:	015a      	lsls	r2, r3, #5
    2d32:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2d36:	2180      	movs	r1, #128	; 0x80
    2d38:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2d3c:	2140      	movs	r1, #64	; 0x40
    2d3e:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    2d42:	7cc2      	ldrb	r2, [r0, #19]
    2d44:	f36f 02c3 	bfc	r2, #3, #1
    2d48:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    2d4a:	4909      	ldr	r1, [pc, #36]	; (2d70 <_usb_d_dev_handle_setup+0x78>)
    2d4c:	015a      	lsls	r2, r3, #5
    2d4e:	188c      	adds	r4, r1, r2
    2d50:	2500      	movs	r5, #0
    2d52:	72a5      	strb	r5, [r4, #10]
    2d54:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2d56:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    2d5a:	246f      	movs	r4, #111	; 0x6f
    2d5c:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2d60:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2d64:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    2d68:	6e8b      	ldr	r3, [r1, #104]	; 0x68
    2d6a:	7c80      	ldrb	r0, [r0, #18]
    2d6c:	4798      	blx	r3
    2d6e:	bd38      	pop	{r3, r4, r5, pc}
    2d70:	20000660 	.word	0x20000660

00002d74 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    2d74:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    2d76:	2320      	movs	r3, #32
    2d78:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    2d7c:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2d7e:	7c83      	ldrb	r3, [r0, #18]
    2d80:	f003 030f 	and.w	r3, r3, #15
    2d84:	015b      	lsls	r3, r3, #5
    2d86:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2d8a:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    2d8e:	4b03      	ldr	r3, [pc, #12]	; (2d9c <_usb_d_dev_handle_stall+0x28>)
    2d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    2d92:	6882      	ldr	r2, [r0, #8]
    2d94:	2101      	movs	r1, #1
    2d96:	7c80      	ldrb	r0, [r0, #18]
    2d98:	4798      	blx	r3
    2d9a:	bd08      	pop	{r3, pc}
    2d9c:	20000660 	.word	0x20000660

00002da0 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    2da0:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    2da2:	7c84      	ldrb	r4, [r0, #18]
    2da4:	2cff      	cmp	r4, #255	; 0xff
    2da6:	d003      	beq.n	2db0 <_usb_d_dev_trans_done+0x10>
    2da8:	7cc3      	ldrb	r3, [r0, #19]
    2daa:	f013 0f40 	tst.w	r3, #64	; 0x40
    2dae:	d100      	bne.n	2db2 <_usb_d_dev_trans_done+0x12>
    2db0:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    2db2:	7cc2      	ldrb	r2, [r0, #19]
    2db4:	f36f 1286 	bfc	r2, #6, #1
    2db8:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    2dba:	4a03      	ldr	r2, [pc, #12]	; (2dc8 <_usb_d_dev_trans_done+0x28>)
    2dbc:	6f15      	ldr	r5, [r2, #112]	; 0x70
    2dbe:	6882      	ldr	r2, [r0, #8]
    2dc0:	4620      	mov	r0, r4
    2dc2:	47a8      	blx	r5
    2dc4:	e7f4      	b.n	2db0 <_usb_d_dev_trans_done+0x10>
    2dc6:	bf00      	nop
    2dc8:	20000660 	.word	0x20000660

00002dcc <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    2dcc:	b530      	push	{r4, r5, lr}
    2dce:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2dd0:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    2dd2:	2425      	movs	r4, #37	; 0x25
    2dd4:	f88d 4004 	strb.w	r4, [sp, #4]
    2dd8:	244a      	movs	r4, #74	; 0x4a
    2dda:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    2dde:	2bff      	cmp	r3, #255	; 0xff
    2de0:	d01e      	beq.n	2e20 <_usb_d_dev_trans_stop+0x54>
    2de2:	7cc4      	ldrb	r4, [r0, #19]
    2de4:	f014 0f40 	tst.w	r4, #64	; 0x40
    2de8:	d01a      	beq.n	2e20 <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2dea:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
    2dee:	b1c9      	cbz	r1, 2e24 <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2df0:	0163      	lsls	r3, r4, #5
    2df2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2df6:	2580      	movs	r5, #128	; 0x80
    2df8:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
    2dfc:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    2dfe:	a902      	add	r1, sp, #8
    2e00:	440b      	add	r3, r1
    2e02:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2e06:	0163      	lsls	r3, r4, #5
    2e08:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2e0c:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2e10:	0163      	lsls	r3, r4, #5
    2e12:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2e16:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    2e1a:	4611      	mov	r1, r2
    2e1c:	4b05      	ldr	r3, [pc, #20]	; (2e34 <_usb_d_dev_trans_stop+0x68>)
    2e1e:	4798      	blx	r3
}
    2e20:	b003      	add	sp, #12
    2e22:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2e24:	0163      	lsls	r3, r4, #5
    2e26:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2e2a:	2540      	movs	r5, #64	; 0x40
    2e2c:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
    2e30:	e7e4      	b.n	2dfc <_usb_d_dev_trans_stop+0x30>
    2e32:	bf00      	nop
    2e34:	00002da1 	.word	0x00002da1

00002e38 <_usb_d_dev_handle_trfail>:
{
    2e38:	b530      	push	{r4, r5, lr}
    2e3a:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    2e3c:	7c83      	ldrb	r3, [r0, #18]
    2e3e:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    2e42:	2204      	movs	r2, #4
    2e44:	f88d 2004 	strb.w	r2, [sp, #4]
    2e48:	2208      	movs	r2, #8
    2e4a:	f88d 2005 	strb.w	r2, [sp, #5]
    2e4e:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    2e50:	460c      	mov	r4, r1
    2e52:	b391      	cbz	r1, 2eba <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2e54:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
    2e58:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    2e5c:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    2e60:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    2e64:	4a32      	ldr	r2, [pc, #200]	; (2f30 <_usb_d_dev_handle_trfail+0xf8>)
    2e66:	440a      	add	r2, r1
    2e68:	7a91      	ldrb	r1, [r2, #10]
    2e6a:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    2e6c:	2d02      	cmp	r5, #2
    2e6e:	d02c      	beq.n	2eca <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    2e70:	f011 0f02 	tst.w	r1, #2
    2e74:	d045      	beq.n	2f02 <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2e76:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    2e78:	7a91      	ldrb	r1, [r2, #10]
    2e7a:	f36f 0141 	bfc	r1, #1, #1
    2e7e:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    2e80:	aa02      	add	r2, sp, #8
    2e82:	4422      	add	r2, r4
    2e84:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2e88:	015a      	lsls	r2, r3, #5
    2e8a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2e8e:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2e92:	015b      	lsls	r3, r3, #5
    2e94:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2e98:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    2e9c:	f005 0307 	and.w	r3, r5, #7
    2ea0:	2b01      	cmp	r3, #1
    2ea2:	d143      	bne.n	2f2c <_usb_d_dev_handle_trfail+0xf4>
    2ea4:	7cc3      	ldrb	r3, [r0, #19]
    2ea6:	f013 0f40 	tst.w	r3, #64	; 0x40
    2eaa:	d03f      	beq.n	2f2c <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    2eac:	09d9      	lsrs	r1, r3, #7
    2eae:	428c      	cmp	r4, r1
    2eb0:	d03c      	beq.n	2f2c <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    2eb2:	2200      	movs	r2, #0
    2eb4:	4b1f      	ldr	r3, [pc, #124]	; (2f34 <_usb_d_dev_handle_trfail+0xfc>)
    2eb6:	4798      	blx	r3
    2eb8:	e038      	b.n	2f2c <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2eba:	0159      	lsls	r1, r3, #5
    2ebc:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    2ec0:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    2ec4:	f005 0507 	and.w	r5, r5, #7
    2ec8:	e7ca      	b.n	2e60 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    2eca:	f011 0f01 	tst.w	r1, #1
    2ece:	d0cf      	beq.n	2e70 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    2ed0:	7a91      	ldrb	r1, [r2, #10]
    2ed2:	f36f 0100 	bfc	r1, #0, #1
    2ed6:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    2ed8:	aa02      	add	r2, sp, #8
    2eda:	4422      	add	r2, r4
    2edc:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2ee0:	015a      	lsls	r2, r3, #5
    2ee2:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2ee6:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2eea:	015b      	lsls	r3, r3, #5
    2eec:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2ef0:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    2ef4:	2204      	movs	r2, #4
    2ef6:	1c21      	adds	r1, r4, #0
    2ef8:	bf18      	it	ne
    2efa:	2101      	movne	r1, #1
    2efc:	4b0d      	ldr	r3, [pc, #52]	; (2f34 <_usb_d_dev_handle_trfail+0xfc>)
    2efe:	4798      	blx	r3
    2f00:	e014      	b.n	2f2c <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
    2f02:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    2f06:	4a0a      	ldr	r2, [pc, #40]	; (2f30 <_usb_d_dev_handle_trfail+0xf8>)
    2f08:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    2f0c:	2100      	movs	r1, #0
    2f0e:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    2f10:	aa02      	add	r2, sp, #8
    2f12:	4414      	add	r4, r2
    2f14:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2f18:	015a      	lsls	r2, r3, #5
    2f1a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2f1e:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2f22:	015b      	lsls	r3, r3, #5
    2f24:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2f28:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    2f2c:	b003      	add	sp, #12
    2f2e:	bd30      	pop	{r4, r5, pc}
    2f30:	20000660 	.word	0x20000660
    2f34:	00002dcd 	.word	0x00002dcd

00002f38 <_usb_d_dev_reset_epts>:
{
    2f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2f3c:	4d0c      	ldr	r5, [pc, #48]	; (2f70 <_usb_d_dev_reset_epts+0x38>)
    2f3e:	f105 0474 	add.w	r4, r5, #116	; 0x74
    2f42:	f505 7594 	add.w	r5, r5, #296	; 0x128
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    2f46:	f04f 0803 	mov.w	r8, #3
    2f4a:	4f0a      	ldr	r7, [pc, #40]	; (2f74 <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
    2f4c:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    2f4e:	4641      	mov	r1, r8
    2f50:	4620      	mov	r0, r4
    2f52:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
    2f54:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    2f56:	2300      	movs	r3, #0
    2f58:	74e3      	strb	r3, [r4, #19]
    2f5a:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    2f5c:	42ac      	cmp	r4, r5
    2f5e:	d1f6      	bne.n	2f4e <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    2f60:	2260      	movs	r2, #96	; 0x60
    2f62:	4619      	mov	r1, r3
    2f64:	4802      	ldr	r0, [pc, #8]	; (2f70 <_usb_d_dev_reset_epts+0x38>)
    2f66:	4b04      	ldr	r3, [pc, #16]	; (2f78 <_usb_d_dev_reset_epts+0x40>)
    2f68:	4798      	blx	r3
    2f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2f6e:	bf00      	nop
    2f70:	20000660 	.word	0x20000660
    2f74:	00002da1 	.word	0x00002da1
    2f78:	000050ad 	.word	0x000050ad

00002f7c <_usb_d_dev_in_next>:
{
    2f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2f80:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    2f82:	7c84      	ldrb	r4, [r0, #18]
    2f84:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    2f88:	4688      	mov	r8, r1
    2f8a:	2900      	cmp	r1, #0
    2f8c:	f000 809f 	beq.w	30ce <_usb_d_dev_in_next+0x152>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    2f90:	4b58      	ldr	r3, [pc, #352]	; (30f4 <_usb_d_dev_in_next+0x178>)
    2f92:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    2f96:	6958      	ldr	r0, [r3, #20]
    2f98:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    2f9c:	8a2b      	ldrh	r3, [r5, #16]
    2f9e:	f240 32ff 	movw	r2, #1023	; 0x3ff
    2fa2:	4293      	cmp	r3, r2
    2fa4:	f000 808d 	beq.w	30c2 <_usb_d_dev_in_next+0x146>
    2fa8:	3b01      	subs	r3, #1
    2faa:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    2fac:	7cef      	ldrb	r7, [r5, #19]
    2fae:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    2fb2:	f1b8 0f00 	cmp.w	r8, #0
    2fb6:	d005      	beq.n	2fc4 <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2fb8:	0162      	lsls	r2, r4, #5
    2fba:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2fbe:	2302      	movs	r3, #2
    2fc0:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    2fc4:	68a9      	ldr	r1, [r5, #8]
    2fc6:	eb0e 0301 	add.w	r3, lr, r1
    2fca:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    2fcc:	686e      	ldr	r6, [r5, #4]
    2fce:	42b3      	cmp	r3, r6
    2fd0:	d23f      	bcs.n	3052 <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    2fd2:	1af6      	subs	r6, r6, r3
    2fd4:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    2fd6:	7cea      	ldrb	r2, [r5, #19]
    2fd8:	f012 0f20 	tst.w	r2, #32
    2fdc:	d02d      	beq.n	303a <_usb_d_dev_in_next+0xbe>
    2fde:	8a2a      	ldrh	r2, [r5, #16]
    2fe0:	4296      	cmp	r6, r2
    2fe2:	bf28      	it	cs
    2fe4:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    2fe6:	6829      	ldr	r1, [r5, #0]
    2fe8:	4632      	mov	r2, r6
    2fea:	4419      	add	r1, r3
    2fec:	68e8      	ldr	r0, [r5, #12]
    2fee:	4b42      	ldr	r3, [pc, #264]	; (30f8 <_usb_d_dev_in_next+0x17c>)
    2ff0:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    2ff2:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    2ff4:	4b3f      	ldr	r3, [pc, #252]	; (30f4 <_usb_d_dev_in_next+0x178>)
    2ff6:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    2ffa:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    2ffc:	4b3d      	ldr	r3, [pc, #244]	; (30f4 <_usb_d_dev_in_next+0x178>)
    2ffe:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    3002:	695a      	ldr	r2, [r3, #20]
    3004:	f366 020d 	bfi	r2, r6, #0, #14
    3008:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    300a:	695a      	ldr	r2, [r3, #20]
    300c:	f36f 329b 	bfc	r2, #14, #14
    3010:	615a      	str	r2, [r3, #20]
	if (!isr) {
    3012:	f1b8 0f00 	cmp.w	r8, #0
    3016:	d108      	bne.n	302a <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    3018:	2f01      	cmp	r7, #1
    301a:	bf0c      	ite	eq
    301c:	224e      	moveq	r2, #78	; 0x4e
    301e:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    3020:	0163      	lsls	r3, r4, #5
    3022:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    3026:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    302a:	0164      	lsls	r4, r4, #5
    302c:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    3030:	2380      	movs	r3, #128	; 0x80
    3032:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    3036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    303a:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    303e:	bf28      	it	cs
    3040:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    3044:	6829      	ldr	r1, [r5, #0]
    3046:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    3048:	4a2a      	ldr	r2, [pc, #168]	; (30f4 <_usb_d_dev_in_next+0x178>)
    304a:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    304e:	6113      	str	r3, [r2, #16]
    3050:	e7d4      	b.n	2ffc <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    3052:	7ceb      	ldrb	r3, [r5, #19]
    3054:	f013 0f10 	tst.w	r3, #16
    3058:	d00f      	beq.n	307a <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    305a:	7ceb      	ldrb	r3, [r5, #19]
    305c:	f36f 1304 	bfc	r3, #4, #1
    3060:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    3062:	4b24      	ldr	r3, [pc, #144]	; (30f4 <_usb_d_dev_in_next+0x178>)
    3064:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    3068:	695a      	ldr	r2, [r3, #20]
    306a:	f36f 020d 	bfc	r2, #0, #14
    306e:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    3070:	695a      	ldr	r2, [r3, #20]
    3072:	f36f 329b 	bfc	r2, #14, #14
    3076:	615a      	str	r2, [r3, #20]
    3078:	e7cb      	b.n	3012 <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    307a:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    307c:	ea4f 1444 	mov.w	r4, r4, lsl #5
    3080:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    3084:	bf0c      	ite	eq
    3086:	234b      	moveq	r3, #75	; 0x4b
    3088:	234a      	movne	r3, #74	; 0x4a
    308a:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    308e:	8a2a      	ldrh	r2, [r5, #16]
    3090:	ea00 030e 	and.w	r3, r0, lr
    3094:	429a      	cmp	r2, r3
    3096:	d005      	beq.n	30a4 <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    3098:	2100      	movs	r1, #0
    309a:	4628      	mov	r0, r5
    309c:	4b17      	ldr	r3, [pc, #92]	; (30fc <_usb_d_dev_in_next+0x180>)
    309e:	4798      	blx	r3
	return;
    30a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    30a4:	7ceb      	ldrb	r3, [r5, #19]
    30a6:	f36f 1386 	bfc	r3, #6, #1
    30aa:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    30ac:	4b11      	ldr	r3, [pc, #68]	; (30f4 <_usb_d_dev_in_next+0x178>)
    30ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    30b0:	68a9      	ldr	r1, [r5, #8]
    30b2:	7ca8      	ldrb	r0, [r5, #18]
    30b4:	4798      	blx	r3
    30b6:	b9d0      	cbnz	r0, 30ee <_usb_d_dev_in_next+0x172>
		ept->flags.bits.is_busy = 1;
    30b8:	7ceb      	ldrb	r3, [r5, #19]
    30ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    30be:	74eb      	strb	r3, [r5, #19]
    30c0:	e7ea      	b.n	3098 <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    30c2:	7cef      	ldrb	r7, [r5, #19]
    30c4:	f007 0707 	and.w	r7, r7, #7
    30c8:	f240 30ff 	movw	r0, #1023	; 0x3ff
    30cc:	e774      	b.n	2fb8 <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    30ce:	8a03      	ldrh	r3, [r0, #16]
    30d0:	f240 32ff 	movw	r2, #1023	; 0x3ff
    30d4:	4293      	cmp	r3, r2
    30d6:	d107      	bne.n	30e8 <_usb_d_dev_in_next+0x16c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    30d8:	7cef      	ldrb	r7, [r5, #19]
    30da:	f007 0707 	and.w	r7, r7, #7
    30de:	f04f 0e00 	mov.w	lr, #0
    30e2:	f240 30ff 	movw	r0, #1023	; 0x3ff
    30e6:	e76d      	b.n	2fc4 <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    30e8:	f04f 0e00 	mov.w	lr, #0
    30ec:	e75c      	b.n	2fa8 <_usb_d_dev_in_next+0x2c>
    30ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    30f2:	bf00      	nop
    30f4:	20000660 	.word	0x20000660
    30f8:	00004f79 	.word	0x00004f79
    30fc:	00002da1 	.word	0x00002da1

00003100 <_usb_d_dev_out_next>:
{
    3100:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3104:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    3106:	7c85      	ldrb	r5, [r0, #18]
    3108:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    310c:	4689      	mov	r9, r1
    310e:	2900      	cmp	r1, #0
    3110:	d056      	beq.n	31c0 <_usb_d_dev_out_next+0xc0>
    3112:	4b74      	ldr	r3, [pc, #464]	; (32e4 <_usb_d_dev_out_next+0x1e4>)
    3114:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    3118:	685a      	ldr	r2, [r3, #4]
    311a:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    311e:	685f      	ldr	r7, [r3, #4]
    3120:	f3c7 070d 	ubfx	r7, r7, #0, #14
    3124:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    3126:	8a06      	ldrh	r6, [r0, #16]
    3128:	f240 33ff 	movw	r3, #1023	; 0x3ff
    312c:	429e      	cmp	r6, r3
    312e:	f000 80ba 	beq.w	32a6 <_usb_d_dev_out_next+0x1a6>
    3132:	3e01      	subs	r6, #1
    3134:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    3136:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    313a:	f894 8013 	ldrb.w	r8, [r4, #19]
    313e:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    3142:	f1b9 0f00 	cmp.w	r9, #0
    3146:	d005      	beq.n	3154 <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3148:	016b      	lsls	r3, r5, #5
    314a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    314e:	2201      	movs	r2, #1
    3150:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    3154:	7ce3      	ldrb	r3, [r4, #19]
    3156:	f013 0f20 	tst.w	r3, #32
    315a:	d00d      	beq.n	3178 <_usb_d_dev_out_next+0x78>
    315c:	6862      	ldr	r2, [r4, #4]
    315e:	2a00      	cmp	r2, #0
    3160:	d037      	beq.n	31d2 <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    3162:	68a0      	ldr	r0, [r4, #8]
    3164:	1a12      	subs	r2, r2, r0
    3166:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    3168:	6823      	ldr	r3, [r4, #0]
    316a:	42ba      	cmp	r2, r7
    316c:	bf28      	it	cs
    316e:	463a      	movcs	r2, r7
    3170:	68e1      	ldr	r1, [r4, #12]
    3172:	4418      	add	r0, r3
    3174:	4b5c      	ldr	r3, [pc, #368]	; (32e8 <_usb_d_dev_out_next+0x1e8>)
    3176:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    3178:	6863      	ldr	r3, [r4, #4]
    317a:	b353      	cbz	r3, 31d2 <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    317c:	f1b9 0f00 	cmp.w	r9, #0
    3180:	d040      	beq.n	3204 <_usb_d_dev_out_next+0x104>
    3182:	8a22      	ldrh	r2, [r4, #16]
    3184:	42ba      	cmp	r2, r7
    3186:	d93d      	bls.n	3204 <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    3188:	7ce3      	ldrb	r3, [r4, #19]
    318a:	f36f 1304 	bfc	r3, #4, #1
    318e:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    3190:	68a3      	ldr	r3, [r4, #8]
    3192:	445b      	add	r3, fp
    3194:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    3196:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    319a:	ea4f 1345 	mov.w	r3, r5, lsl #5
    319e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    31a2:	bf0c      	ite	eq
    31a4:	222d      	moveq	r2, #45	; 0x2d
    31a6:	2225      	movne	r2, #37	; 0x25
    31a8:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    31ac:	b915      	cbnz	r5, 31b4 <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    31ae:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    31b0:	4b4c      	ldr	r3, [pc, #304]	; (32e4 <_usb_d_dev_out_next+0x1e4>)
    31b2:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    31b4:	2100      	movs	r1, #0
    31b6:	4620      	mov	r0, r4
    31b8:	4b4c      	ldr	r3, [pc, #304]	; (32ec <_usb_d_dev_out_next+0x1ec>)
    31ba:	4798      	blx	r3
	return;
    31bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    31c0:	8a06      	ldrh	r6, [r0, #16]
    31c2:	f240 33ff 	movw	r3, #1023	; 0x3ff
    31c6:	429e      	cmp	r6, r3
    31c8:	d07b      	beq.n	32c2 <_usb_d_dev_out_next+0x1c2>
    31ca:	f04f 0b00 	mov.w	fp, #0
    31ce:	46da      	mov	sl, fp
    31d0:	e7af      	b.n	3132 <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    31d2:	7ce3      	ldrb	r3, [r4, #19]
    31d4:	f013 0f10 	tst.w	r3, #16
    31d8:	d06c      	beq.n	32b4 <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    31da:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    31dc:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    31e0:	f043 0320 	orr.w	r3, r3, #32
    31e4:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    31e6:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    31e8:	493e      	ldr	r1, [pc, #248]	; (32e4 <_usb_d_dev_out_next+0x1e4>)
    31ea:	016a      	lsls	r2, r5, #5
    31ec:	188b      	adds	r3, r1, r2
    31ee:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    31f0:	8a21      	ldrh	r1, [r4, #16]
    31f2:	685a      	ldr	r2, [r3, #4]
    31f4:	f361 329b 	bfi	r2, r1, #14, #14
    31f8:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    31fa:	685a      	ldr	r2, [r3, #4]
    31fc:	f36f 020d 	bfc	r2, #0, #14
    3200:	605a      	str	r2, [r3, #4]
    3202:	e01d      	b.n	3240 <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    3204:	68a2      	ldr	r2, [r4, #8]
    3206:	4452      	add	r2, sl
    3208:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    320a:	4293      	cmp	r3, r2
    320c:	d9c3      	bls.n	3196 <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    320e:	1a9b      	subs	r3, r3, r2
    3210:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    3212:	7ce1      	ldrb	r1, [r4, #19]
    3214:	f011 0f20 	tst.w	r1, #32
    3218:	d026      	beq.n	3268 <_usb_d_dev_out_next+0x168>
    321a:	8a22      	ldrh	r2, [r4, #16]
    321c:	4293      	cmp	r3, r2
    321e:	bf28      	it	cs
    3220:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    3222:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    3224:	016a      	lsls	r2, r5, #5
    3226:	492f      	ldr	r1, [pc, #188]	; (32e4 <_usb_d_dev_out_next+0x1e4>)
    3228:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    322a:	4a2e      	ldr	r2, [pc, #184]	; (32e4 <_usb_d_dev_out_next+0x1e4>)
    322c:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    3230:	6851      	ldr	r1, [r2, #4]
    3232:	f363 319b 	bfi	r1, r3, #14, #14
    3236:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    3238:	6853      	ldr	r3, [r2, #4]
    323a:	f36f 030d 	bfc	r3, #0, #14
    323e:	6053      	str	r3, [r2, #4]
	if (!isr) {
    3240:	f1b9 0f00 	cmp.w	r9, #0
    3244:	d108      	bne.n	3258 <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    3246:	f1b8 0f01 	cmp.w	r8, #1
    324a:	d025      	beq.n	3298 <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    324c:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    324e:	016b      	lsls	r3, r5, #5
    3250:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    3254:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3258:	016d      	lsls	r5, r5, #5
    325a:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    325e:	2340      	movs	r3, #64	; 0x40
    3260:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    3264:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    3268:	8a21      	ldrh	r1, [r4, #16]
    326a:	428b      	cmp	r3, r1
    326c:	d90a      	bls.n	3284 <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    326e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    3272:	d80e      	bhi.n	3292 <_usb_d_dev_out_next+0x192>
    3274:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    3278:	6821      	ldr	r1, [r4, #0]
    327a:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    327c:	0169      	lsls	r1, r5, #5
    327e:	4819      	ldr	r0, [pc, #100]	; (32e4 <_usb_d_dev_out_next+0x1e4>)
    3280:	5042      	str	r2, [r0, r1]
    3282:	e7d2      	b.n	322a <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    3284:	428b      	cmp	r3, r1
    3286:	d2f7      	bcs.n	3278 <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    3288:	7ce1      	ldrb	r1, [r4, #19]
    328a:	f041 0120 	orr.w	r1, r1, #32
    328e:	74e1      	strb	r1, [r4, #19]
    3290:	e7f2      	b.n	3278 <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    3292:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    3296:	e7ef      	b.n	3278 <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    3298:	4b12      	ldr	r3, [pc, #72]	; (32e4 <_usb_d_dev_out_next+0x1e4>)
    329a:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    329e:	2200      	movs	r2, #0
    32a0:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    32a2:	222d      	movs	r2, #45	; 0x2d
    32a4:	e7d3      	b.n	324e <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    32a6:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    32aa:	f890 8013 	ldrb.w	r8, [r0, #19]
    32ae:	f008 0807 	and.w	r8, r8, #7
    32b2:	e749      	b.n	3148 <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    32b4:	f1b9 0f00 	cmp.w	r9, #0
    32b8:	d10b      	bne.n	32d2 <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    32ba:	68a3      	ldr	r3, [r4, #8]
    32bc:	4453      	add	r3, sl
    32be:	60a3      	str	r3, [r4, #8]
    32c0:	e769      	b.n	3196 <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    32c2:	f890 8013 	ldrb.w	r8, [r0, #19]
    32c6:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    32ca:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    32cc:	46bb      	mov	fp, r7
    32ce:	46ba      	mov	sl, r7
    32d0:	e740      	b.n	3154 <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    32d2:	8a23      	ldrh	r3, [r4, #16]
    32d4:	42bb      	cmp	r3, r7
    32d6:	f63f af57 	bhi.w	3188 <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    32da:	68a3      	ldr	r3, [r4, #8]
    32dc:	4453      	add	r3, sl
    32de:	60a3      	str	r3, [r4, #8]
    32e0:	e759      	b.n	3196 <_usb_d_dev_out_next+0x96>
    32e2:	bf00      	nop
    32e4:	20000660 	.word	0x20000660
    32e8:	00004f79 	.word	0x00004f79
    32ec:	00002da1 	.word	0x00002da1

000032f0 <_usb_d_dev_handler>:
{
    32f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    32f4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    32f8:	8c1e      	ldrh	r6, [r3, #32]
    32fa:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    32fc:	b146      	cbz	r6, 3310 <_usb_d_dev_handler+0x20>
    32fe:	4d91      	ldr	r5, [pc, #580]	; (3544 <_usb_d_dev_handler+0x254>)
	uint32_t lpm_variable = 0;
    3300:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    3302:	f1a5 0774 	sub.w	r7, r5, #116	; 0x74
			_usb_d_dev_handle_setup(ept);
    3306:	f8df 9258 	ldr.w	r9, [pc, #600]	; 3560 <_usb_d_dev_handler+0x270>
			_usb_d_dev_handle_trfail(ept, 1);
    330a:	f8df 8258 	ldr.w	r8, [pc, #600]	; 3564 <_usb_d_dev_handler+0x274>
    330e:	e0d3      	b.n	34b8 <_usb_d_dev_handler+0x1c8>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    3310:	8b99      	ldrh	r1, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    3312:	8b1b      	ldrh	r3, [r3, #24]
    3314:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    3316:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    3318:	f013 0f04 	tst.w	r3, #4
    331c:	d11d      	bne.n	335a <_usb_d_dev_handler+0x6a>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    331e:	f413 7f00 	tst.w	r3, #512	; 0x200
    3322:	d123      	bne.n	336c <_usb_d_dev_handler+0x7c>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    3324:	f013 0f80 	tst.w	r3, #128	; 0x80
    3328:	d147      	bne.n	33ba <_usb_d_dev_handler+0xca>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    332a:	f013 0f70 	tst.w	r3, #112	; 0x70
    332e:	d14f      	bne.n	33d0 <_usb_d_dev_handler+0xe0>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    3330:	f013 0f08 	tst.w	r3, #8
    3334:	d16e      	bne.n	3414 <_usb_d_dev_handler+0x124>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    3336:	f013 0f01 	tst.w	r3, #1
    333a:	d0e0      	beq.n	32fe <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    333c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3340:	f240 2201 	movw	r2, #513	; 0x201
    3344:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    3346:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    3348:	2270      	movs	r2, #112	; 0x70
    334a:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    334c:	4b7e      	ldr	r3, [pc, #504]	; (3548 <_usb_d_dev_handler+0x258>)
    334e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    3350:	2100      	movs	r1, #0
    3352:	2004      	movs	r0, #4
    3354:	4798      	blx	r3
    3356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    335a:	2204      	movs	r2, #4
    335c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3360:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    3362:	4b79      	ldr	r3, [pc, #484]	; (3548 <_usb_d_dev_handler+0x258>)
    3364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    3366:	4798      	blx	r3
    3368:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    336c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3370:	f240 2201 	movw	r2, #513	; 0x201
    3374:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    3376:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    3378:	2270      	movs	r2, #112	; 0x70
    337a:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    337c:	4b72      	ldr	r3, [pc, #456]	; (3548 <_usb_d_dev_handler+0x258>)
    337e:	891b      	ldrh	r3, [r3, #8]
    3380:	f003 030f 	and.w	r3, r3, #15
    3384:	2b03      	cmp	r3, #3
    3386:	d00e      	beq.n	33a6 <_usb_d_dev_handler+0xb6>
    3388:	4b6f      	ldr	r3, [pc, #444]	; (3548 <_usb_d_dev_handler+0x258>)
    338a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    338c:	f003 030f 	and.w	r3, r3, #15
    3390:	2b03      	cmp	r3, #3
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    3392:	bf08      	it	eq
    3394:	2201      	moveq	r2, #1
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    3396:	d007      	beq.n	33a8 <_usb_d_dev_handler+0xb8>
	uint32_t lpm_variable = 0;
    3398:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    339a:	4b6b      	ldr	r3, [pc, #428]	; (3548 <_usb_d_dev_handler+0x258>)
    339c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    339e:	2003      	movs	r0, #3
    33a0:	4798      	blx	r3
    33a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    33a6:	2200      	movs	r2, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    33a8:	4b67      	ldr	r3, [pc, #412]	; (3548 <_usb_d_dev_handler+0x258>)
    33aa:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    33ae:	8919      	ldrh	r1, [r3, #8]
    33b0:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    33b4:	2200      	movs	r2, #0
    33b6:	811a      	strh	r2, [r3, #8]
    33b8:	e7ef      	b.n	339a <_usb_d_dev_handler+0xaa>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    33ba:	2280      	movs	r2, #128	; 0x80
    33bc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    33c0:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    33c2:	4b61      	ldr	r3, [pc, #388]	; (3548 <_usb_d_dev_handler+0x258>)
    33c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    33c6:	2100      	movs	r1, #0
    33c8:	2005      	movs	r0, #5
    33ca:	4798      	blx	r3
    33cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    33d0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    33d4:	2270      	movs	r2, #112	; 0x70
    33d6:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    33d8:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    33da:	f240 2201 	movw	r2, #513	; 0x201
    33de:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    33e0:	4b5a      	ldr	r3, [pc, #360]	; (354c <_usb_d_dev_handler+0x25c>)
    33e2:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    33e6:	f013 0f01 	tst.w	r3, #1
    33ea:	d00d      	beq.n	3408 <_usb_d_dev_handler+0x118>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    33ec:	4a57      	ldr	r2, [pc, #348]	; (354c <_usb_d_dev_handler+0x25c>)
    33ee:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    33f0:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    33f4:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    33f8:	d1f9      	bne.n	33ee <_usb_d_dev_handler+0xfe>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    33fa:	4b53      	ldr	r3, [pc, #332]	; (3548 <_usb_d_dev_handler+0x258>)
    33fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    33fe:	2100      	movs	r1, #0
    3400:	2002      	movs	r0, #2
    3402:	4798      	blx	r3
    3404:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    3408:	4a50      	ldr	r2, [pc, #320]	; (354c <_usb_d_dev_handler+0x25c>)
    340a:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    340c:	f413 7f80 	tst.w	r3, #256	; 0x100
    3410:	d0fb      	beq.n	340a <_usb_d_dev_handler+0x11a>
    3412:	e7f2      	b.n	33fa <_usb_d_dev_handler+0x10a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    3414:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3418:	2400      	movs	r4, #0
    341a:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    341e:	2208      	movs	r2, #8
    3420:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    3422:	2270      	movs	r2, #112	; 0x70
    3424:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    3426:	f240 2201 	movw	r2, #513	; 0x201
    342a:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    342c:	4b48      	ldr	r3, [pc, #288]	; (3550 <_usb_d_dev_handler+0x260>)
    342e:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    3430:	4b45      	ldr	r3, [pc, #276]	; (3548 <_usb_d_dev_handler+0x258>)
    3432:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    3434:	4621      	mov	r1, r4
    3436:	2001      	movs	r0, #1
    3438:	4798      	blx	r3
    343a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    343e:	f011 0f10 	tst.w	r1, #16
    3442:	d109      	bne.n	3458 <_usb_d_dev_handler+0x168>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    3444:	f011 0f40 	tst.w	r1, #64	; 0x40
    3448:	d108      	bne.n	345c <_usb_d_dev_handler+0x16c>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    344a:	f011 0f20 	tst.w	r1, #32
    344e:	d02f      	beq.n	34b0 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    3450:	2100      	movs	r1, #0
    3452:	4b40      	ldr	r3, [pc, #256]	; (3554 <_usb_d_dev_handler+0x264>)
    3454:	4798      	blx	r3
    3456:	e02b      	b.n	34b0 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_setup(ept);
    3458:	47c8      	blx	r9
    345a:	e029      	b.n	34b0 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    345c:	2101      	movs	r1, #1
    345e:	4b3d      	ldr	r3, [pc, #244]	; (3554 <_usb_d_dev_handler+0x264>)
    3460:	4798      	blx	r3
    3462:	e025      	b.n	34b0 <_usb_d_dev_handler+0x1c0>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    3464:	f011 0f40 	tst.w	r1, #64	; 0x40
    3468:	d111      	bne.n	348e <_usb_d_dev_handler+0x19e>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    346a:	f011 0f08 	tst.w	r1, #8
    346e:	d112      	bne.n	3496 <_usb_d_dev_handler+0x1a6>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    3470:	f011 0f02 	tst.w	r1, #2
    3474:	d112      	bne.n	349c <_usb_d_dev_handler+0x1ac>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    3476:	f003 0307 	and.w	r3, r3, #7
    347a:	2b01      	cmp	r3, #1
    347c:	d118      	bne.n	34b0 <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    347e:	f011 0f04 	tst.w	r1, #4
    3482:	d10f      	bne.n	34a4 <_usb_d_dev_handler+0x1b4>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    3484:	f011 0f10 	tst.w	r1, #16
    3488:	d012      	beq.n	34b0 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    348a:	47c8      	blx	r9
    348c:	e010      	b.n	34b0 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    348e:	2101      	movs	r1, #1
    3490:	4b30      	ldr	r3, [pc, #192]	; (3554 <_usb_d_dev_handler+0x264>)
    3492:	4798      	blx	r3
    3494:	e00c      	b.n	34b0 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 1);
    3496:	2101      	movs	r1, #1
    3498:	47c0      	blx	r8
    349a:	e009      	b.n	34b0 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_in_next(ept, true);
    349c:	2101      	movs	r1, #1
    349e:	4b2e      	ldr	r3, [pc, #184]	; (3558 <_usb_d_dev_handler+0x268>)
    34a0:	4798      	blx	r3
    34a2:	e005      	b.n	34b0 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 0);
    34a4:	2100      	movs	r1, #0
    34a6:	47c0      	blx	r8
    34a8:	e002      	b.n	34b0 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    34aa:	2100      	movs	r1, #0
    34ac:	4b29      	ldr	r3, [pc, #164]	; (3554 <_usb_d_dev_handler+0x264>)
    34ae:	4798      	blx	r3
    34b0:	3401      	adds	r4, #1
    34b2:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    34b4:	2c09      	cmp	r4, #9
    34b6:	d042      	beq.n	353e <_usb_d_dev_handler+0x24e>
    34b8:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    34ba:	7cab      	ldrb	r3, [r5, #18]
    34bc:	2bff      	cmp	r3, #255	; 0xff
    34be:	d0f7      	beq.n	34b0 <_usb_d_dev_handler+0x1c0>
	if (!(epint & (1u << epn))) {
    34c0:	f003 030f 	and.w	r3, r3, #15
    34c4:	2101      	movs	r1, #1
    34c6:	4099      	lsls	r1, r3
    34c8:	4231      	tst	r1, r6
    34ca:	d0f1      	beq.n	34b0 <_usb_d_dev_handler+0x1c0>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    34cc:	0159      	lsls	r1, r3, #5
    34ce:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    34d2:	f501 7180 	add.w	r1, r1, #256	; 0x100
    34d6:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    34d8:	015b      	lsls	r3, r3, #5
    34da:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    34de:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    34e2:	4019      	ands	r1, r3
    34e4:	d0e4      	beq.n	34b0 <_usb_d_dev_handler+0x1c0>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    34e6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    34ea:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    34ee:	f892 3087 	ldrb.w	r3, [r2, #135]	; 0x87
    34f2:	f003 0247 	and.w	r2, r3, #71	; 0x47
    34f6:	2a01      	cmp	r2, #1
    34f8:	d0a1      	beq.n	343e <_usb_d_dev_handler+0x14e>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    34fa:	f013 0f80 	tst.w	r3, #128	; 0x80
    34fe:	d1b1      	bne.n	3464 <_usb_d_dev_handler+0x174>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    3500:	f011 0f20 	tst.w	r1, #32
    3504:	d1d1      	bne.n	34aa <_usb_d_dev_handler+0x1ba>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    3506:	f011 0f04 	tst.w	r1, #4
    350a:	d10e      	bne.n	352a <_usb_d_dev_handler+0x23a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    350c:	f011 0f01 	tst.w	r1, #1
    3510:	d10e      	bne.n	3530 <_usb_d_dev_handler+0x240>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    3512:	f003 0307 	and.w	r3, r3, #7
    3516:	2b01      	cmp	r3, #1
    3518:	d1ca      	bne.n	34b0 <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    351a:	f011 0f08 	tst.w	r1, #8
    351e:	d10b      	bne.n	3538 <_usb_d_dev_handler+0x248>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    3520:	f011 0f10 	tst.w	r1, #16
    3524:	d0c4      	beq.n	34b0 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    3526:	47c8      	blx	r9
    3528:	e7c2      	b.n	34b0 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 0);
    352a:	2100      	movs	r1, #0
    352c:	47c0      	blx	r8
    352e:	e7bf      	b.n	34b0 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_out_next(ept, true);
    3530:	2101      	movs	r1, #1
    3532:	4b0a      	ldr	r3, [pc, #40]	; (355c <_usb_d_dev_handler+0x26c>)
    3534:	4798      	blx	r3
    3536:	e7bb      	b.n	34b0 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 1);
    3538:	2101      	movs	r1, #1
    353a:	47c0      	blx	r8
    353c:	e7b8      	b.n	34b0 <_usb_d_dev_handler+0x1c0>
    353e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3542:	bf00      	nop
    3544:	200006d4 	.word	0x200006d4
    3548:	20000660 	.word	0x20000660
    354c:	40001000 	.word	0x40001000
    3550:	00002f39 	.word	0x00002f39
    3554:	00002d75 	.word	0x00002d75
    3558:	00002f7d 	.word	0x00002f7d
    355c:	00003101 	.word	0x00003101
    3560:	00002cf9 	.word	0x00002cf9
    3564:	00002e39 	.word	0x00002e39

00003568 <_usb_d_dev_init>:
{
    3568:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    356a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    356e:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    3570:	f013 0f01 	tst.w	r3, #1
    3574:	d124      	bne.n	35c0 <_usb_d_dev_init+0x58>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    3576:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    357a:	7893      	ldrb	r3, [r2, #2]
    357c:	f013 0f03 	tst.w	r3, #3
    3580:	d1fb      	bne.n	357a <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    3582:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3586:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    3588:	f013 0f02 	tst.w	r3, #2
    358c:	d00f      	beq.n	35ae <_usb_d_dev_init+0x46>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    358e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    3592:	7813      	ldrb	r3, [r2, #0]
    3594:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    3598:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    359a:	7893      	ldrb	r3, [r2, #2]
    359c:	f013 0f03 	tst.w	r3, #3
    35a0:	d1fb      	bne.n	359a <_usb_d_dev_init+0x32>
    35a2:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    35a6:	7893      	ldrb	r3, [r2, #2]
    35a8:	f013 0f02 	tst.w	r3, #2
    35ac:	d1fb      	bne.n	35a6 <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    35ae:	2201      	movs	r2, #1
    35b0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    35b4:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    35b6:	461a      	mov	r2, r3
    35b8:	7893      	ldrb	r3, [r2, #2]
    35ba:	f013 0f03 	tst.w	r3, #3
    35be:	d1fb      	bne.n	35b8 <_usb_d_dev_init+0x50>
    35c0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    35c4:	7893      	ldrb	r3, [r2, #2]
    35c6:	f013 0f01 	tst.w	r3, #1
    35ca:	d1fb      	bne.n	35c4 <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    35cc:	4b21      	ldr	r3, [pc, #132]	; (3654 <_usb_d_dev_init+0xec>)
    35ce:	4a22      	ldr	r2, [pc, #136]	; (3658 <_usb_d_dev_init+0xf0>)
    35d0:	661a      	str	r2, [r3, #96]	; 0x60
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    35d2:	665a      	str	r2, [r3, #100]	; 0x64
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    35d4:	669a      	str	r2, [r3, #104]	; 0x68
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    35d6:	66da      	str	r2, [r3, #108]	; 0x6c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    35d8:	671a      	str	r2, [r3, #112]	; 0x70
	_usb_d_dev_reset_epts();
    35da:	4b20      	ldr	r3, [pc, #128]	; (365c <_usb_d_dev_init+0xf4>)
    35dc:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    35de:	4b20      	ldr	r3, [pc, #128]	; (3660 <_usb_d_dev_init+0xf8>)
    35e0:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    35e2:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    35e6:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    35ea:	f011 011f 	ands.w	r1, r1, #31
    35ee:	d02b      	beq.n	3648 <_usb_d_dev_init+0xe0>
		pad_transn = 9;
    35f0:	291f      	cmp	r1, #31
    35f2:	bf08      	it	eq
    35f4:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    35f6:	b34b      	cbz	r3, 364c <_usb_d_dev_init+0xe4>
		pad_transp = 25;
    35f8:	2b1f      	cmp	r3, #31
    35fa:	bf08      	it	eq
    35fc:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    35fe:	b33a      	cbz	r2, 3650 <_usb_d_dev_init+0xe8>
		pad_trim = 6;
    3600:	2a07      	cmp	r2, #7
    3602:	bf08      	it	eq
    3604:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    3606:	f003 031f 	and.w	r3, r3, #31
    360a:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    360e:	0312      	lsls	r2, r2, #12
    3610:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    3614:	4313      	orrs	r3, r2
    3616:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    361a:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    361c:	78d3      	ldrb	r3, [r2, #3]
    361e:	f043 0303 	orr.w	r3, r3, #3
    3622:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    3624:	78d3      	ldrb	r3, [r2, #3]
    3626:	f043 030c 	orr.w	r3, r3, #12
    362a:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    362c:	2304      	movs	r3, #4
    362e:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    3630:	7893      	ldrb	r3, [r2, #2]
    3632:	f013 0f03 	tst.w	r3, #3
    3636:	d1fb      	bne.n	3630 <_usb_d_dev_init+0xc8>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    3638:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    363c:	4a05      	ldr	r2, [pc, #20]	; (3654 <_usb_d_dev_init+0xec>)
    363e:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    3640:	2201      	movs	r2, #1
    3642:	811a      	strh	r2, [r3, #8]
}
    3644:	2000      	movs	r0, #0
    3646:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    3648:	2109      	movs	r1, #9
    364a:	e7d4      	b.n	35f6 <_usb_d_dev_init+0x8e>
		pad_transp = 25;
    364c:	2319      	movs	r3, #25
    364e:	e7d6      	b.n	35fe <_usb_d_dev_init+0x96>
		pad_trim = 6;
    3650:	2206      	movs	r2, #6
    3652:	e7d8      	b.n	3606 <_usb_d_dev_init+0x9e>
    3654:	20000660 	.word	0x20000660
    3658:	00002cf5 	.word	0x00002cf5
    365c:	00002f39 	.word	0x00002f39
    3660:	00800084 	.word	0x00800084

00003664 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    3664:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3668:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    366a:	f013 0f03 	tst.w	r3, #3
    366e:	d129      	bne.n	36c4 <_usb_d_dev_enable+0x60>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    3670:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    3674:	7893      	ldrb	r3, [r2, #2]
    3676:	f013 0f03 	tst.w	r3, #3
    367a:	d1fb      	bne.n	3674 <_usb_d_dev_enable+0x10>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    367c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3680:	781b      	ldrb	r3, [r3, #0]
    3682:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    3684:	f013 0f02 	tst.w	r3, #2
    3688:	d108      	bne.n	369c <_usb_d_dev_enable+0x38>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    368a:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    368e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    3692:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    3694:	7893      	ldrb	r3, [r2, #2]
    3696:	f013 0f03 	tst.w	r3, #3
    369a:	d1fb      	bne.n	3694 <_usb_d_dev_enable+0x30>
    369c:	4b0b      	ldr	r3, [pc, #44]	; (36cc <_usb_d_dev_enable+0x68>)
    369e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    36a2:	609a      	str	r2, [r3, #8]
    36a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    36a8:	609a      	str	r2, [r3, #8]
    36aa:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    36ae:	609a      	str	r2, [r3, #8]
    36b0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    36b4:	609a      	str	r2, [r3, #8]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    36b6:	f240 228d 	movw	r2, #653	; 0x28d
    36ba:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    36be:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    36c0:	2000      	movs	r0, #0
    36c2:	4770      	bx	lr
		return -USB_ERR_DENIED;
    36c4:	f06f 0010 	mvn.w	r0, #16
}
    36c8:	4770      	bx	lr
    36ca:	bf00      	nop
    36cc:	e000e100 	.word	0xe000e100

000036d0 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    36d0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    36d4:	8913      	ldrh	r3, [r2, #8]
    36d6:	f023 0301 	bic.w	r3, r3, #1
    36da:	041b      	lsls	r3, r3, #16
    36dc:	0c1b      	lsrs	r3, r3, #16
    36de:	8113      	strh	r3, [r2, #8]
    36e0:	4770      	bx	lr

000036e2 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    36e2:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Usb *)hw)->DEVICE.DADD.reg = data;
    36e6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    36ea:	7298      	strb	r0, [r3, #10]
    36ec:	4770      	bx	lr
	...

000036f0 <_usb_d_dev_ep_init>:
{
    36f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    36f2:	fa4f fe80 	sxtb.w	lr, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    36f6:	f010 050f 	ands.w	r5, r0, #15
    36fa:	d04d      	beq.n	3798 <_usb_d_dev_ep_init+0xa8>
    36fc:	f1be 0f00 	cmp.w	lr, #0
    3700:	bfb4      	ite	lt
    3702:	1cac      	addlt	r4, r5, #2
    3704:	462c      	movge	r4, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    3706:	f001 0103 	and.w	r1, r1, #3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    370a:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
    370c:	2d02      	cmp	r5, #2
    370e:	d947      	bls.n	37a0 <_usb_d_dev_ep_init+0xb0>
		return -USB_ERR_PARAM;
    3710:	f06f 0011 	mvn.w	r0, #17
    3714:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    3716:	f1be 0f00 	cmp.w	lr, #0
    371a:	db1b      	blt.n	3754 <_usb_d_dev_ep_init+0x64>
    371c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    3720:	4e37      	ldr	r6, [pc, #220]	; (3800 <_usb_d_dev_ep_init+0x110>)
    3722:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    3726:	2d00      	cmp	r5, #0
    3728:	d15e      	bne.n	37e8 <_usb_d_dev_ep_init+0xf8>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    372a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    372e:	4d34      	ldr	r5, [pc, #208]	; (3800 <_usb_d_dev_ep_init+0x110>)
    3730:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
    3734:	4d33      	ldr	r5, [pc, #204]	; (3804 <_usb_d_dev_ep_init+0x114>)
    3736:	00a6      	lsls	r6, r4, #2
    3738:	1933      	adds	r3, r6, r4
    373a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    373e:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
	ept->size     = max_pkt_siz;
    3742:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	ept->flags.u8 = (ep_type + 1);
    3746:	3101      	adds	r1, #1
    3748:	f883 1087 	strb.w	r1, [r3, #135]	; 0x87
	ept->ep       = ep;
    374c:	f883 0086 	strb.w	r0, [r3, #134]	; 0x86
	return USB_OK;
    3750:	2000      	movs	r0, #0
    3752:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    3754:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    3758:	4e29      	ldr	r6, [pc, #164]	; (3800 <_usb_d_dev_ep_init+0x110>)
    375a:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    375e:	686d      	ldr	r5, [r5, #4]
    3760:	b935      	cbnz	r5, 3770 <_usb_d_dev_ep_init+0x80>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    3762:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3766:	4d26      	ldr	r5, [pc, #152]	; (3800 <_usb_d_dev_ep_init+0x110>)
    3768:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    376c:	685f      	ldr	r7, [r3, #4]
    376e:	e7e1      	b.n	3734 <_usb_d_dev_ep_init+0x44>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    3770:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    3774:	4e22      	ldr	r6, [pc, #136]	; (3800 <_usb_d_dev_ep_init+0x110>)
    3776:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    377a:	896d      	ldrh	r5, [r5, #10]
    377c:	4295      	cmp	r5, r2
    377e:	daf0      	bge.n	3762 <_usb_d_dev_ep_init+0x72>
		return -USB_ERR_FUNC;
    3780:	f06f 0012 	mvn.w	r0, #18
    3784:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    3786:	f06f 0013 	mvn.w	r0, #19
    378a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    378c:	f06f 0013 	mvn.w	r0, #19
    3790:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_FUNC;
    3792:	f06f 0012 	mvn.w	r0, #18
    3796:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    3798:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
    379c:	2400      	movs	r4, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    379e:	4623      	mov	r3, r4
	if (ept->ep != 0xFF) {
    37a0:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    37a4:	4f17      	ldr	r7, [pc, #92]	; (3804 <_usb_d_dev_ep_init+0x114>)
    37a6:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    37aa:	f896 6086 	ldrb.w	r6, [r6, #134]	; 0x86
    37ae:	2eff      	cmp	r6, #255	; 0xff
    37b0:	d1e9      	bne.n	3786 <_usb_d_dev_ep_init+0x96>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    37b2:	2900      	cmp	r1, #0
    37b4:	d1af      	bne.n	3716 <_usb_d_dev_ep_init+0x26>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    37b6:	b125      	cbz	r5, 37c2 <_usb_d_dev_ep_init+0xd2>
    37b8:	f1be 0f00 	cmp.w	lr, #0
    37bc:	bfa4      	itt	ge
    37be:	3502      	addge	r5, #2
    37c0:	b2ed      	uxtbge	r5, r5
		if (ept_in->ep != 0xFF) {
    37c2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    37c6:	4e0f      	ldr	r6, [pc, #60]	; (3804 <_usb_d_dev_ep_init+0x114>)
    37c8:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    37cc:	f895 5086 	ldrb.w	r5, [r5, #134]	; 0x86
    37d0:	2dff      	cmp	r5, #255	; 0xff
    37d2:	d1db      	bne.n	378c <_usb_d_dev_ep_init+0x9c>
		if (pcfg->cache == NULL) {
    37d4:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    37d8:	4e09      	ldr	r6, [pc, #36]	; (3800 <_usb_d_dev_ep_init+0x110>)
    37da:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    37de:	2d00      	cmp	r5, #0
    37e0:	d0d7      	beq.n	3792 <_usb_d_dev_ep_init+0xa2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    37e2:	f1be 0f00 	cmp.w	lr, #0
    37e6:	dbb5      	blt.n	3754 <_usb_d_dev_ep_init+0x64>
    37e8:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    37ec:	4e04      	ldr	r6, [pc, #16]	; (3800 <_usb_d_dev_ep_init+0x110>)
    37ee:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    37f2:	892d      	ldrh	r5, [r5, #8]
    37f4:	4295      	cmp	r5, r2
    37f6:	da98      	bge.n	372a <_usb_d_dev_ep_init+0x3a>
		return -USB_ERR_FUNC;
    37f8:	f06f 0012 	mvn.w	r0, #18
    37fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    37fe:	bf00      	nop
    3800:	00005b24 	.word	0x00005b24
    3804:	20000660 	.word	0x20000660

00003808 <_usb_d_dev_ep_deinit>:
{
    3808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    380a:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    380c:	f010 060f 	ands.w	r6, r0, #15
    3810:	d00e      	beq.n	3830 <_usb_d_dev_ep_deinit+0x28>
    3812:	2f00      	cmp	r7, #0
    3814:	bfb4      	ite	lt
    3816:	1cb3      	addlt	r3, r6, #2
    3818:	4633      	movge	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    381a:	2e02      	cmp	r6, #2
    381c:	d900      	bls.n	3820 <_usb_d_dev_ep_deinit+0x18>
    381e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return &dev_inst.ep[ep_index];
    3820:	461d      	mov	r5, r3
    3822:	3301      	adds	r3, #1
    3824:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3828:	4a24      	ldr	r2, [pc, #144]	; (38bc <_usb_d_dev_ep_deinit+0xb4>)
    382a:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    382e:	e002      	b.n	3836 <_usb_d_dev_ep_deinit+0x2e>
    3830:	f8df e094 	ldr.w	lr, [pc, #148]	; 38c8 <_usb_d_dev_ep_deinit+0xc0>
    3834:	2500      	movs	r5, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    3836:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    383a:	4a21      	ldr	r2, [pc, #132]	; (38c0 <_usb_d_dev_ep_deinit+0xb8>)
    383c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3840:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
    3844:	2aff      	cmp	r2, #255	; 0xff
    3846:	d0ea      	beq.n	381e <_usb_d_dev_ep_deinit+0x16>
    3848:	4604      	mov	r4, r0
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    384a:	2203      	movs	r2, #3
    384c:	0ff9      	lsrs	r1, r7, #31
    384e:	4670      	mov	r0, lr
    3850:	4b1c      	ldr	r3, [pc, #112]	; (38c4 <_usb_d_dev_ep_deinit+0xbc>)
    3852:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    3854:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3858:	4a19      	ldr	r2, [pc, #100]	; (38c0 <_usb_d_dev_ep_deinit+0xb8>)
    385a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    385e:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    3862:	f003 0307 	and.w	r3, r3, #7
    3866:	2b01      	cmp	r3, #1
    3868:	d016      	beq.n	3898 <_usb_d_dev_ep_deinit+0x90>
	} else if (USB_EP_GET_DIR(ep)) {
    386a:	2f00      	cmp	r7, #0
    386c:	db1b      	blt.n	38a6 <_usb_d_dev_ep_deinit+0x9e>
    386e:	0160      	lsls	r0, r4, #5
    3870:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    3874:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    3878:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    387c:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
    3880:	4b0f      	ldr	r3, [pc, #60]	; (38c0 <_usb_d_dev_ep_deinit+0xb8>)
    3882:	00aa      	lsls	r2, r5, #2
    3884:	1951      	adds	r1, r2, r5
    3886:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    388a:	2000      	movs	r0, #0
    388c:	f881 0087 	strb.w	r0, [r1, #135]	; 0x87
	ept->ep       = 0xFF;
    3890:	22ff      	movs	r2, #255	; 0xff
    3892:	f881 2086 	strb.w	r2, [r1, #134]	; 0x86
    3896:	e7c2      	b.n	381e <_usb_d_dev_ep_deinit+0x16>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    3898:	0160      	lsls	r0, r4, #5
    389a:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    389e:	2300      	movs	r3, #0
    38a0:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    38a4:	e7ec      	b.n	3880 <_usb_d_dev_ep_deinit+0x78>
    38a6:	0176      	lsls	r6, r6, #5
    38a8:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    38ac:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    38b0:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    38b4:	f886 3100 	strb.w	r3, [r6, #256]	; 0x100
    38b8:	e7e2      	b.n	3880 <_usb_d_dev_ep_deinit+0x78>
    38ba:	bf00      	nop
    38bc:	200006c0 	.word	0x200006c0
    38c0:	20000660 	.word	0x20000660
    38c4:	00002dcd 	.word	0x00002dcd
    38c8:	200006d4 	.word	0x200006d4

000038cc <_usb_d_dev_ep_enable>:
{
    38cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    38ce:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    38d0:	f010 000f 	ands.w	r0, r0, #15
    38d4:	f000 80a6 	beq.w	3a24 <_usb_d_dev_ep_enable+0x158>
    38d8:	2f00      	cmp	r7, #0
    38da:	bfb4      	ite	lt
    38dc:	1c83      	addlt	r3, r0, #2
    38de:	4603      	movge	r3, r0
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    38e0:	4606      	mov	r6, r0
    38e2:	0142      	lsls	r2, r0, #5
    38e4:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    38e8:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
    38ec:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    38ee:	2802      	cmp	r0, #2
    38f0:	f240 809f 	bls.w	3a32 <_usb_d_dev_ep_enable+0x166>
		return -USB_ERR_PARAM;
    38f4:	f06f 0011 	mvn.w	r0, #17
    38f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    38fa:	f014 0f77 	tst.w	r4, #119	; 0x77
    38fe:	f040 8088 	bne.w	3a12 <_usb_d_dev_ep_enable+0x146>
    3902:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    3906:	2111      	movs	r1, #17
    3908:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    390c:	4c97      	ldr	r4, [pc, #604]	; (3b6c <_usb_d_dev_ep_enable+0x2a0>)
    390e:	eb04 018e 	add.w	r1, r4, lr, lsl #2
    3912:	f8b1 4084 	ldrh.w	r4, [r1, #132]	; 0x84
    3916:	4996      	ldr	r1, [pc, #600]	; (3b70 <_usb_d_dev_ep_enable+0x2a4>)
    3918:	ea01 3184 	and.w	r1, r1, r4, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    391c:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    3920:	f200 80cc 	bhi.w	3abc <_usb_d_dev_ep_enable+0x1f0>
    3924:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    3928:	f200 810a 	bhi.w	3b40 <_usb_d_dev_ep_enable+0x274>
    392c:	2c80      	cmp	r4, #128	; 0x80
    392e:	f200 80f9 	bhi.w	3b24 <_usb_d_dev_ep_enable+0x258>
    3932:	2c40      	cmp	r4, #64	; 0x40
    3934:	f200 810b 	bhi.w	3b4e <_usb_d_dev_ep_enable+0x282>
    3938:	2c20      	cmp	r4, #32
    393a:	f200 80fa 	bhi.w	3b32 <_usb_d_dev_ep_enable+0x266>
    393e:	2c10      	cmp	r4, #16
    3940:	f200 810c 	bhi.w	3b5c <_usb_d_dev_ep_enable+0x290>
    3944:	2c08      	cmp	r4, #8
    3946:	bf94      	ite	ls
    3948:	2700      	movls	r7, #0
    394a:	2701      	movhi	r7, #1
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    394c:	ea41 7107 	orr.w	r1, r1, r7, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3950:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3952:	f3c4 010d 	ubfx	r1, r4, #0, #14
    3956:	e0b7      	b.n	3ac8 <_usb_d_dev_ep_enable+0x1fc>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    3958:	f014 0f70 	tst.w	r4, #112	; 0x70
    395c:	d15c      	bne.n	3a18 <_usb_d_dev_ep_enable+0x14c>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    395e:	4d83      	ldr	r5, [pc, #524]	; (3b6c <_usb_d_dev_ep_enable+0x2a0>)
    3960:	009f      	lsls	r7, r3, #2
    3962:	18f9      	adds	r1, r7, r3
    3964:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    3968:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    396c:	0109      	lsls	r1, r1, #4
    396e:	f001 0170 	and.w	r1, r1, #112	; 0x70
    3972:	430c      	orrs	r4, r1
    3974:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    3978:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    397c:	443b      	add	r3, r7
    397e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    3982:	f8b5 3084 	ldrh.w	r3, [r5, #132]	; 0x84
    3986:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    398a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    398e:	d80f      	bhi.n	39b0 <_usb_d_dev_ep_enable+0xe4>
    3990:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    3994:	d819      	bhi.n	39ca <_usb_d_dev_ep_enable+0xfe>
    3996:	2b80      	cmp	r3, #128	; 0x80
    3998:	d819      	bhi.n	39ce <_usb_d_dev_ep_enable+0x102>
    399a:	2b40      	cmp	r3, #64	; 0x40
    399c:	d819      	bhi.n	39d2 <_usb_d_dev_ep_enable+0x106>
    399e:	2b20      	cmp	r3, #32
    39a0:	d819      	bhi.n	39d6 <_usb_d_dev_ep_enable+0x10a>
    39a2:	2b10      	cmp	r3, #16
    39a4:	d819      	bhi.n	39da <_usb_d_dev_ep_enable+0x10e>
    39a6:	2b08      	cmp	r3, #8
    39a8:	bf94      	ite	ls
    39aa:	2300      	movls	r3, #0
    39ac:	2301      	movhi	r3, #1
    39ae:	e000      	b.n	39b2 <_usb_d_dev_ep_enable+0xe6>
    39b0:	2307      	movs	r3, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    39b2:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
    39b6:	6143      	str	r3, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    39b8:	2380      	movs	r3, #128	; 0x80
    39ba:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    39be:	4b6b      	ldr	r3, [pc, #428]	; (3b6c <_usb_d_dev_ep_enable+0x2a0>)
    39c0:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    39c4:	2000      	movs	r0, #0
    39c6:	76b0      	strb	r0, [r6, #26]
    39c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    39ca:	2306      	movs	r3, #6
    39cc:	e7f1      	b.n	39b2 <_usb_d_dev_ep_enable+0xe6>
    39ce:	2305      	movs	r3, #5
    39d0:	e7ef      	b.n	39b2 <_usb_d_dev_ep_enable+0xe6>
    39d2:	2304      	movs	r3, #4
    39d4:	e7ed      	b.n	39b2 <_usb_d_dev_ep_enable+0xe6>
    39d6:	2303      	movs	r3, #3
    39d8:	e7eb      	b.n	39b2 <_usb_d_dev_ep_enable+0xe6>
    39da:	2302      	movs	r3, #2
    39dc:	e7e9      	b.n	39b2 <_usb_d_dev_ep_enable+0xe6>
    39de:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    39e0:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    39e4:	6043      	str	r3, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    39e6:	2340      	movs	r3, #64	; 0x40
    39e8:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    39ec:	4b5f      	ldr	r3, [pc, #380]	; (3b6c <_usb_d_dev_ep_enable+0x2a0>)
    39ee:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    39f2:	2000      	movs	r0, #0
    39f4:	72b0      	strb	r0, [r6, #10]
    39f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    39f8:	2106      	movs	r1, #6
    39fa:	e7f1      	b.n	39e0 <_usb_d_dev_ep_enable+0x114>
    39fc:	2105      	movs	r1, #5
    39fe:	e7ef      	b.n	39e0 <_usb_d_dev_ep_enable+0x114>
    3a00:	2104      	movs	r1, #4
    3a02:	e7ed      	b.n	39e0 <_usb_d_dev_ep_enable+0x114>
    3a04:	2103      	movs	r1, #3
    3a06:	e7eb      	b.n	39e0 <_usb_d_dev_ep_enable+0x114>
    3a08:	2102      	movs	r1, #2
    3a0a:	e7e9      	b.n	39e0 <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    3a0c:	f06f 0011 	mvn.w	r0, #17
    3a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    3a12:	f06f 0013 	mvn.w	r0, #19
    3a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    3a18:	f06f 0013 	mvn.w	r0, #19
    3a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    3a1e:	f06f 0013 	mvn.w	r0, #19
    3a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    3a24:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3a28:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
    3a2c:	b2e4      	uxtb	r4, r4
    3a2e:	2600      	movs	r6, #0
	return &dev_inst.ep[ep_index];
    3a30:	4633      	mov	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    3a32:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    3a36:	494d      	ldr	r1, [pc, #308]	; (3b6c <_usb_d_dev_ep_enable+0x2a0>)
    3a38:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    3a3c:	f892 5086 	ldrb.w	r5, [r2, #134]	; 0x86
    3a40:	2dff      	cmp	r5, #255	; 0xff
    3a42:	d0e3      	beq.n	3a0c <_usb_d_dev_ep_enable+0x140>
    3a44:	0172      	lsls	r2, r6, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    3a46:	1888      	adds	r0, r1, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    3a48:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
    3a4c:	eb01 018e 	add.w	r1, r1, lr, lsl #2
    3a50:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    3a54:	f001 0107 	and.w	r1, r1, #7
    3a58:	2901      	cmp	r1, #1
    3a5a:	f43f af4e 	beq.w	38fa <_usb_d_dev_ep_enable+0x2e>
	} else if (dir) {
    3a5e:	2f00      	cmp	r7, #0
    3a60:	f6ff af7a 	blt.w	3958 <_usb_d_dev_ep_enable+0x8c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    3a64:	f014 0f07 	tst.w	r4, #7
    3a68:	d1d9      	bne.n	3a1e <_usb_d_dev_ep_enable+0x152>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    3a6a:	4d40      	ldr	r5, [pc, #256]	; (3b6c <_usb_d_dev_ep_enable+0x2a0>)
    3a6c:	009f      	lsls	r7, r3, #2
    3a6e:	18f9      	adds	r1, r7, r3
    3a70:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    3a74:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    3a78:	f001 0107 	and.w	r1, r1, #7
    3a7c:	430c      	orrs	r4, r1
    3a7e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    3a82:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3a86:	443b      	add	r3, r7
    3a88:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    3a8c:	f8b5 1084 	ldrh.w	r1, [r5, #132]	; 0x84
    3a90:	4b37      	ldr	r3, [pc, #220]	; (3b70 <_usb_d_dev_ep_enable+0x2a4>)
    3a92:	ea03 3381 	and.w	r3, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3a96:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    3a9a:	d8a0      	bhi.n	39de <_usb_d_dev_ep_enable+0x112>
    3a9c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    3aa0:	d8aa      	bhi.n	39f8 <_usb_d_dev_ep_enable+0x12c>
    3aa2:	2980      	cmp	r1, #128	; 0x80
    3aa4:	d8aa      	bhi.n	39fc <_usb_d_dev_ep_enable+0x130>
    3aa6:	2940      	cmp	r1, #64	; 0x40
    3aa8:	d8aa      	bhi.n	3a00 <_usb_d_dev_ep_enable+0x134>
    3aaa:	2920      	cmp	r1, #32
    3aac:	d8aa      	bhi.n	3a04 <_usb_d_dev_ep_enable+0x138>
    3aae:	2910      	cmp	r1, #16
    3ab0:	d8aa      	bhi.n	3a08 <_usb_d_dev_ep_enable+0x13c>
    3ab2:	2908      	cmp	r1, #8
    3ab4:	bf94      	ite	ls
    3ab6:	2100      	movls	r1, #0
    3ab8:	2101      	movhi	r1, #1
    3aba:	e791      	b.n	39e0 <_usb_d_dev_ep_enable+0x114>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3abc:	f041 41e0 	orr.w	r1, r1, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3ac0:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3ac2:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3ac6:	2707      	movs	r7, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3ac8:	ea41 7107 	orr.w	r1, r1, r7, lsl #28
    3acc:	6141      	str	r1, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3ace:	2140      	movs	r1, #64	; 0x40
    3ad0:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3ad4:	2080      	movs	r0, #128	; 0x80
    3ad6:	f882 0104 	strb.w	r0, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    3ada:	4a24      	ldr	r2, [pc, #144]	; (3b6c <_usb_d_dev_ep_enable+0x2a0>)
    3adc:	eb02 1646 	add.w	r6, r2, r6, lsl #5
    3ae0:	2000      	movs	r0, #0
    3ae2:	72b0      	strb	r0, [r6, #10]
    3ae4:	76b0      	strb	r0, [r6, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3ae6:	f005 050f 	and.w	r5, r5, #15
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    3aea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3aee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3af2:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
	bank->ADDR.reg          = addr;
    3af6:	016d      	lsls	r5, r5, #5
    3af8:	1953      	adds	r3, r2, r5
    3afa:	5156      	str	r6, [r2, r5]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    3afc:	685a      	ldr	r2, [r3, #4]
    3afe:	f364 329b 	bfi	r2, r4, #14, #14
    3b02:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    3b04:	685a      	ldr	r2, [r3, #4]
    3b06:	f360 020d 	bfi	r2, r0, #0, #14
    3b0a:	605a      	str	r2, [r3, #4]
    3b0c:	f105 4382 	add.w	r3, r5, #1090519040	; 0x41000000
    3b10:	22b0      	movs	r2, #176	; 0xb0
    3b12:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3b16:	f883 1105 	strb.w	r1, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    3b1a:	461d      	mov	r5, r3
    3b1c:	2310      	movs	r3, #16
    3b1e:	f885 3109 	strb.w	r3, [r5, #265]	; 0x109
    3b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3b24:	f041 41a0 	orr.w	r1, r1, #1342177280	; 0x50000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3b28:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3b2a:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3b2e:	2705      	movs	r7, #5
    3b30:	e7ca      	b.n	3ac8 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3b32:	f041 5140 	orr.w	r1, r1, #805306368	; 0x30000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3b36:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3b38:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3b3c:	2703      	movs	r7, #3
    3b3e:	e7c3      	b.n	3ac8 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3b40:	f041 41c0 	orr.w	r1, r1, #1610612736	; 0x60000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3b44:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3b46:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3b4a:	2706      	movs	r7, #6
    3b4c:	e7bc      	b.n	3ac8 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3b4e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3b52:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3b54:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3b58:	2704      	movs	r7, #4
    3b5a:	e7b5      	b.n	3ac8 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3b5c:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3b60:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3b62:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3b66:	2702      	movs	r7, #2
    3b68:	e7ae      	b.n	3ac8 <_usb_d_dev_ep_enable+0x1fc>
    3b6a:	bf00      	nop
    3b6c:	20000660 	.word	0x20000660
    3b70:	0fffc000 	.word	0x0fffc000

00003b74 <_usb_d_dev_ep_stall>:
{
    3b74:	b470      	push	{r4, r5, r6}
    3b76:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    3b78:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3b7a:	f010 000f 	ands.w	r0, r0, #15
    3b7e:	d008      	beq.n	3b92 <_usb_d_dev_ep_stall+0x1e>
    3b80:	2b00      	cmp	r3, #0
    3b82:	bfb4      	ite	lt
    3b84:	1c83      	addlt	r3, r0, #2
    3b86:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    3b88:	2802      	cmp	r0, #2
    3b8a:	d903      	bls.n	3b94 <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    3b8c:	f06f 0011 	mvn.w	r0, #17
    3b90:	e018      	b.n	3bc4 <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    3b92:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    3b94:	2901      	cmp	r1, #1
    3b96:	d017      	beq.n	3bc8 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    3b98:	2900      	cmp	r1, #0
    3b9a:	d03a      	beq.n	3c12 <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3b9c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3ba0:	4a45      	ldr	r2, [pc, #276]	; (3cb8 <_usb_d_dev_ep_stall+0x144>)
    3ba2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3ba6:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    3baa:	f003 030f 	and.w	r3, r3, #15
    3bae:	015b      	lsls	r3, r3, #5
    3bb0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    3bb4:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    3bb8:	2310      	movs	r3, #16
    3bba:	40a3      	lsls	r3, r4
    3bbc:	421a      	tst	r2, r3
    3bbe:	bf14      	ite	ne
    3bc0:	2001      	movne	r0, #1
    3bc2:	2000      	moveq	r0, #0
}
    3bc4:	bc70      	pop	{r4, r5, r6}
    3bc6:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    3bc8:	2510      	movs	r5, #16
    3bca:	40a5      	lsls	r5, r4
    3bcc:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3bce:	493a      	ldr	r1, [pc, #232]	; (3cb8 <_usb_d_dev_ep_stall+0x144>)
    3bd0:	009e      	lsls	r6, r3, #2
    3bd2:	18f2      	adds	r2, r6, r3
    3bd4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    3bd8:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3bdc:	f002 020f 	and.w	r2, r2, #15
    3be0:	0150      	lsls	r0, r2, #5
    3be2:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    3be6:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    3bea:	2020      	movs	r0, #32
    3bec:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    3bf0:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    3bf2:	0152      	lsls	r2, r2, #5
    3bf4:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    3bf8:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    3bfc:	4433      	add	r3, r6
    3bfe:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    3c02:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    3c06:	f042 0208 	orr.w	r2, r2, #8
    3c0a:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    3c0e:	2000      	movs	r0, #0
    3c10:	e7d8      	b.n	3bc4 <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    3c12:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    3c16:	4928      	ldr	r1, [pc, #160]	; (3cb8 <_usb_d_dev_ep_stall+0x144>)
    3c18:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    3c1c:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
    3c20:	f002 020f 	and.w	r2, r2, #15
    3c24:	0151      	lsls	r1, r2, #5
    3c26:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    3c2a:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    3c2e:	2010      	movs	r0, #16
    3c30:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    3c32:	4205      	tst	r5, r0
    3c34:	d03c      	beq.n	3cb0 <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    3c36:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3c38:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    3c3c:	2020      	movs	r0, #32
    3c3e:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    3c40:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3c42:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    3c46:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    3c4a:	4202      	tst	r2, r0
    3c4c:	d007      	beq.n	3c5e <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3c4e:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    3c52:	2201      	movs	r2, #1
    3c54:	fa02 f404 	lsl.w	r4, r2, r4
    3c58:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3c5a:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    3c5e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    3c62:	4815      	ldr	r0, [pc, #84]	; (3cb8 <_usb_d_dev_ep_stall+0x144>)
    3c64:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    3c68:	f892 2087 	ldrb.w	r2, [r2, #135]	; 0x87
    3c6c:	f002 0207 	and.w	r2, r2, #7
    3c70:	2a01      	cmp	r2, #1
    3c72:	d00c      	beq.n	3c8e <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    3c74:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3c78:	4a0f      	ldr	r2, [pc, #60]	; (3cb8 <_usb_d_dev_ep_stall+0x144>)
    3c7a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3c7e:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    3c82:	f36f 02c3 	bfc	r2, #3, #1
    3c86:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    3c8a:	2000      	movs	r0, #0
    3c8c:	e79a      	b.n	3bc4 <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    3c8e:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    3c92:	f012 0f30 	tst.w	r2, #48	; 0x30
    3c96:	d10d      	bne.n	3cb4 <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    3c98:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    3c9c:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    3ca0:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    3ca4:	f36f 02c3 	bfc	r2, #3, #1
    3ca8:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    3cac:	2000      	movs	r0, #0
    3cae:	e789      	b.n	3bc4 <_usb_d_dev_ep_stall+0x50>
    3cb0:	2000      	movs	r0, #0
    3cb2:	e787      	b.n	3bc4 <_usb_d_dev_ep_stall+0x50>
    3cb4:	2000      	movs	r0, #0
    3cb6:	e785      	b.n	3bc4 <_usb_d_dev_ep_stall+0x50>
    3cb8:	20000660 	.word	0x20000660

00003cbc <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    3cbc:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    3cbe:	f000 040f 	and.w	r4, r0, #15
    3cc2:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    3cc4:	4a14      	ldr	r2, [pc, #80]	; (3d18 <_usb_d_dev_ep_read_req+0x5c>)
    3cc6:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    3cc8:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    3cca:	6840      	ldr	r0, [r0, #4]
    3ccc:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    3cd0:	2c02      	cmp	r4, #2
    3cd2:	d817      	bhi.n	3d04 <_usb_d_dev_ep_read_req+0x48>
    3cd4:	b1c9      	cbz	r1, 3d0a <_usb_d_dev_ep_read_req+0x4e>
    3cd6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    3cda:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    3cde:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    3ce0:	2a11      	cmp	r2, #17
    3ce2:	d115      	bne.n	3d10 <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    3ce4:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    3ce8:	f012 0f10 	tst.w	r2, #16
    3cec:	d102      	bne.n	3cf4 <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    3cee:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    3cf0:	bc30      	pop	{r4, r5}
    3cf2:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    3cf4:	682c      	ldr	r4, [r5, #0]
    3cf6:	686a      	ldr	r2, [r5, #4]
    3cf8:	600c      	str	r4, [r1, #0]
    3cfa:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3cfc:	2210      	movs	r2, #16
    3cfe:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    3d02:	e7f5      	b.n	3cf0 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    3d04:	f06f 0011 	mvn.w	r0, #17
    3d08:	e7f2      	b.n	3cf0 <_usb_d_dev_ep_read_req+0x34>
    3d0a:	f06f 0011 	mvn.w	r0, #17
    3d0e:	e7ef      	b.n	3cf0 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    3d10:	f06f 0012 	mvn.w	r0, #18
    3d14:	e7ec      	b.n	3cf0 <_usb_d_dev_ep_read_req+0x34>
    3d16:	bf00      	nop
    3d18:	20000660 	.word	0x20000660

00003d1c <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    3d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3d20:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    3d22:	7a03      	ldrb	r3, [r0, #8]
    3d24:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3d26:	f013 030f 	ands.w	r3, r3, #15
    3d2a:	f000 80c2 	beq.w	3eb2 <_usb_d_dev_ep_trans+0x196>
    3d2e:	2e00      	cmp	r6, #0
    3d30:	bfb4      	ite	lt
    3d32:	1c9a      	addlt	r2, r3, #2
    3d34:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    3d36:	4614      	mov	r4, r2
    3d38:	4969      	ldr	r1, [pc, #420]	; (3ee0 <_usb_d_dev_ep_trans+0x1c4>)
    3d3a:	f101 0760 	add.w	r7, r1, #96	; 0x60
    3d3e:	1c55      	adds	r5, r2, #1
    3d40:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    3d44:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    3d48:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    3d4c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    3d50:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    3d54:	f240 31ff 	movw	r1, #1023	; 0x3ff
    3d58:	428a      	cmp	r2, r1
    3d5a:	d025      	beq.n	3da8 <_usb_d_dev_ep_trans+0x8c>
    3d5c:	1e55      	subs	r5, r2, #1
    3d5e:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    3d60:	6841      	ldr	r1, [r0, #4]
    3d62:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    3d64:	2b02      	cmp	r3, #2
    3d66:	f200 8092 	bhi.w	3e8e <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    3d6a:	6803      	ldr	r3, [r0, #0]
    3d6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    3d70:	d31c      	bcc.n	3dac <_usb_d_dev_ep_trans+0x90>
    3d72:	eb03 0c01 	add.w	ip, r3, r1
    3d76:	f8df e180 	ldr.w	lr, [pc, #384]	; 3ef8 <_usb_d_dev_ep_trans+0x1dc>
    3d7a:	45f4      	cmp	ip, lr
    3d7c:	d816      	bhi.n	3dac <_usb_d_dev_ep_trans+0x90>
    3d7e:	f013 0f03 	tst.w	r3, #3
    3d82:	d113      	bne.n	3dac <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    3d84:	2e00      	cmp	r6, #0
    3d86:	db2a      	blt.n	3dde <_usb_d_dev_ep_trans+0xc2>
    3d88:	428a      	cmp	r2, r1
    3d8a:	f200 809c 	bhi.w	3ec6 <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    3d8e:	b34d      	cbz	r5, 3de4 <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    3d90:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    3d94:	4a52      	ldr	r2, [pc, #328]	; (3ee0 <_usb_d_dev_ep_trans+0x1c4>)
    3d96:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3d9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    3d9e:	2b00      	cmp	r3, #0
    3da0:	d07b      	beq.n	3e9a <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    3da2:	f04f 0800 	mov.w	r8, #0
    3da6:	e00c      	b.n	3dc2 <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    3da8:	4615      	mov	r5, r2
    3daa:	e7d9      	b.n	3d60 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    3dac:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    3db0:	4a4b      	ldr	r2, [pc, #300]	; (3ee0 <_usb_d_dev_ep_trans+0x1c4>)
    3db2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3db6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    3dba:	2b00      	cmp	r3, #0
    3dbc:	d06a      	beq.n	3e94 <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    3dbe:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    3dc2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    3dc6:	4a46      	ldr	r2, [pc, #280]	; (3ee0 <_usb_d_dev_ep_trans+0x1c4>)
    3dc8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3dcc:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    3dd0:	f013 0f08 	tst.w	r3, #8
    3dd4:	d009      	beq.n	3dea <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    3dd6:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    3dd8:	b003      	add	sp, #12
    3dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    3dde:	f04f 0800 	mov.w	r8, #0
    3de2:	e7ee      	b.n	3dc2 <_usb_d_dev_ep_trans+0xa6>
    3de4:	f04f 0800 	mov.w	r8, #0
    3de8:	e7eb      	b.n	3dc2 <_usb_d_dev_ep_trans+0xa6>
    3dea:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    3dec:	a801      	add	r0, sp, #4
    3dee:	4b3d      	ldr	r3, [pc, #244]	; (3ee4 <_usb_d_dev_ep_trans+0x1c8>)
    3df0:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    3df2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    3df6:	4a3a      	ldr	r2, [pc, #232]	; (3ee0 <_usb_d_dev_ep_trans+0x1c4>)
    3df8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3dfc:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    3e00:	f013 0f40 	tst.w	r3, #64	; 0x40
    3e04:	d13c      	bne.n	3e80 <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    3e06:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    3e0a:	4b35      	ldr	r3, [pc, #212]	; (3ee0 <_usb_d_dev_ep_trans+0x1c4>)
    3e0c:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    3e10:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    3e14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3e18:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	atomic_leave_critical(&flags);
    3e1c:	a801      	add	r0, sp, #4
    3e1e:	4b32      	ldr	r3, [pc, #200]	; (3ee8 <_usb_d_dev_ep_trans+0x1cc>)
    3e20:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    3e22:	f8da 3000 	ldr.w	r3, [sl]
    3e26:	f8c9 3074 	str.w	r3, [r9, #116]	; 0x74
	ept->trans_size  = trans->size;
    3e2a:	f8da 3004 	ldr.w	r3, [sl, #4]
    3e2e:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
	ept->trans_count = 0;
    3e32:	2300      	movs	r3, #0
    3e34:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    3e38:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    3e3a:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    3e3e:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    3e42:	f368 1345 	bfi	r3, r8, #5, #1
    3e46:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    3e4a:	f89a 3009 	ldrb.w	r3, [sl, #9]
    3e4e:	b1e3      	cbz	r3, 3e8a <_usb_d_dev_ep_trans+0x16e>
    3e50:	fab5 f585 	clz	r5, r5
    3e54:	096d      	lsrs	r5, r5, #5
    3e56:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    3e5a:	4b21      	ldr	r3, [pc, #132]	; (3ee0 <_usb_d_dev_ep_trans+0x1c4>)
    3e5c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    3e60:	f894 3087 	ldrb.w	r3, [r4, #135]	; 0x87
    3e64:	f365 1304 	bfi	r3, r5, #4, #1
    3e68:	f884 3087 	strb.w	r3, [r4, #135]	; 0x87
	if (dir) {
    3e6c:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    3e6e:	f04f 0100 	mov.w	r1, #0
    3e72:	4638      	mov	r0, r7
    3e74:	bfb4      	ite	lt
    3e76:	4b1d      	ldrlt	r3, [pc, #116]	; (3eec <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    3e78:	4b1d      	ldrge	r3, [pc, #116]	; (3ef0 <_usb_d_dev_ep_trans+0x1d4>)
    3e7a:	4798      	blx	r3
	return ERR_NONE;
    3e7c:	2000      	movs	r0, #0
    3e7e:	e7ab      	b.n	3dd8 <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    3e80:	a801      	add	r0, sp, #4
    3e82:	4b19      	ldr	r3, [pc, #100]	; (3ee8 <_usb_d_dev_ep_trans+0x1cc>)
    3e84:	4798      	blx	r3
		return USB_BUSY;
    3e86:	2001      	movs	r0, #1
    3e88:	e7a6      	b.n	3dd8 <_usb_d_dev_ep_trans+0xbc>
    3e8a:	2500      	movs	r5, #0
    3e8c:	e7e3      	b.n	3e56 <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    3e8e:	f06f 0011 	mvn.w	r0, #17
    3e92:	e7a1      	b.n	3dd8 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    3e94:	f06f 0012 	mvn.w	r0, #18
    3e98:	e79e      	b.n	3dd8 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    3e9a:	f06f 0011 	mvn.w	r0, #17
    3e9e:	e79b      	b.n	3dd8 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    3ea0:	f06f 0012 	mvn.w	r0, #18
    3ea4:	e798      	b.n	3dd8 <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    3ea6:	6841      	ldr	r1, [r0, #4]
    3ea8:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    3eac:	4f11      	ldr	r7, [pc, #68]	; (3ef4 <_usb_d_dev_ep_trans+0x1d8>)
    3eae:	2400      	movs	r4, #0
    3eb0:	e75b      	b.n	3d6a <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    3eb2:	4a0b      	ldr	r2, [pc, #44]	; (3ee0 <_usb_d_dev_ep_trans+0x1c4>)
    3eb4:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    3eb8:	f240 31ff 	movw	r1, #1023	; 0x3ff
    3ebc:	428a      	cmp	r2, r1
    3ebe:	d0f2      	beq.n	3ea6 <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    3ec0:	4f0c      	ldr	r7, [pc, #48]	; (3ef4 <_usb_d_dev_ep_trans+0x1d8>)
    3ec2:	2400      	movs	r4, #0
    3ec4:	e74a      	b.n	3d5c <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    3ec6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    3eca:	4a05      	ldr	r2, [pc, #20]	; (3ee0 <_usb_d_dev_ep_trans+0x1c4>)
    3ecc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3ed0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    3ed4:	2b00      	cmp	r3, #0
    3ed6:	d0e3      	beq.n	3ea0 <_usb_d_dev_ep_trans+0x184>
    3ed8:	f04f 0801 	mov.w	r8, #1
    3edc:	e771      	b.n	3dc2 <_usb_d_dev_ep_trans+0xa6>
    3ede:	bf00      	nop
    3ee0:	20000660 	.word	0x20000660
    3ee4:	00003fbd 	.word	0x00003fbd
    3ee8:	00003fcb 	.word	0x00003fcb
    3eec:	00002f7d 	.word	0x00002f7d
    3ef0:	00003101 	.word	0x00003101
    3ef4:	200006d4 	.word	0x200006d4
    3ef8:	20041fff 	.word	0x20041fff

00003efc <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    3efc:	4b06      	ldr	r3, [pc, #24]	; (3f18 <_usb_d_dev_register_callback+0x1c>)
    3efe:	2900      	cmp	r1, #0
    3f00:	bf08      	it	eq
    3f02:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    3f04:	2801      	cmp	r0, #1
    3f06:	d003      	beq.n	3f10 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    3f08:	b908      	cbnz	r0, 3f0e <_usb_d_dev_register_callback+0x12>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    3f0a:	4b04      	ldr	r3, [pc, #16]	; (3f1c <_usb_d_dev_register_callback+0x20>)
    3f0c:	6619      	str	r1, [r3, #96]	; 0x60
    3f0e:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    3f10:	4b02      	ldr	r3, [pc, #8]	; (3f1c <_usb_d_dev_register_callback+0x20>)
    3f12:	6659      	str	r1, [r3, #100]	; 0x64
    3f14:	4770      	bx	lr
    3f16:	bf00      	nop
    3f18:	00002cf5 	.word	0x00002cf5
    3f1c:	20000660 	.word	0x20000660

00003f20 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    3f20:	4b09      	ldr	r3, [pc, #36]	; (3f48 <_usb_d_dev_register_ep_callback+0x28>)
    3f22:	2900      	cmp	r1, #0
    3f24:	bf08      	it	eq
    3f26:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    3f28:	4603      	mov	r3, r0
    3f2a:	b130      	cbz	r0, 3f3a <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    3f2c:	2801      	cmp	r0, #1
    3f2e:	d007      	beq.n	3f40 <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    3f30:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    3f32:	bf04      	itt	eq
    3f34:	4b05      	ldreq	r3, [pc, #20]	; (3f4c <_usb_d_dev_register_ep_callback+0x2c>)
    3f36:	6719      	streq	r1, [r3, #112]	; 0x70
    3f38:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    3f3a:	4b04      	ldr	r3, [pc, #16]	; (3f4c <_usb_d_dev_register_ep_callback+0x2c>)
    3f3c:	6699      	str	r1, [r3, #104]	; 0x68
    3f3e:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    3f40:	4b02      	ldr	r3, [pc, #8]	; (3f4c <_usb_d_dev_register_ep_callback+0x2c>)
    3f42:	66d9      	str	r1, [r3, #108]	; 0x6c
    3f44:	4770      	bx	lr
    3f46:	bf00      	nop
    3f48:	00002cf5 	.word	0x00002cf5
    3f4c:	20000660 	.word	0x20000660

00003f50 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    3f50:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    3f52:	4b01      	ldr	r3, [pc, #4]	; (3f58 <USB_0_Handler+0x8>)
    3f54:	4798      	blx	r3
    3f56:	bd08      	pop	{r3, pc}
    3f58:	000032f1 	.word	0x000032f1

00003f5c <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    3f5c:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    3f5e:	4b01      	ldr	r3, [pc, #4]	; (3f64 <USB_1_Handler+0x8>)
    3f60:	4798      	blx	r3
    3f62:	bd08      	pop	{r3, pc}
    3f64:	000032f1 	.word	0x000032f1

00003f68 <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    3f68:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    3f6a:	4b01      	ldr	r3, [pc, #4]	; (3f70 <USB_2_Handler+0x8>)
    3f6c:	4798      	blx	r3
    3f6e:	bd08      	pop	{r3, pc}
    3f70:	000032f1 	.word	0x000032f1

00003f74 <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    3f74:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    3f76:	4b01      	ldr	r3, [pc, #4]	; (3f7c <USB_3_Handler+0x8>)
    3f78:	4798      	blx	r3
    3f7a:	bd08      	pop	{r3, pc}
    3f7c:	000032f1 	.word	0x000032f1

00003f80 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    3f80:	b508      	push	{r3, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    3f82:	4805      	ldr	r0, [pc, #20]	; (3f98 <cdc_device_acm_init+0x18>)
    3f84:	4b05      	ldr	r3, [pc, #20]	; (3f9c <cdc_device_acm_init+0x1c>)
    3f86:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    3f88:	4b05      	ldr	r3, [pc, #20]	; (3fa0 <cdc_device_acm_init+0x20>)
    3f8a:	4798      	blx	r3

	usbdc_start(single_desc);
    3f8c:	4805      	ldr	r0, [pc, #20]	; (3fa4 <cdc_device_acm_init+0x24>)
    3f8e:	4b06      	ldr	r3, [pc, #24]	; (3fa8 <cdc_device_acm_init+0x28>)
    3f90:	4798      	blx	r3
	usbdc_attach();
    3f92:	4b06      	ldr	r3, [pc, #24]	; (3fac <cdc_device_acm_init+0x2c>)
    3f94:	4798      	blx	r3
    3f96:	bd08      	pop	{r3, pc}
    3f98:	20000888 	.word	0x20000888
    3f9c:	0000494d 	.word	0x0000494d
    3fa0:	00004239 	.word	0x00004239
    3fa4:	20000018 	.word	0x20000018
    3fa8:	000049bd 	.word	0x000049bd
    3fac:	000049f1 	.word	0x000049f1

00003fb0 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    3fb0:	b508      	push	{r3, lr}

	cdc_device_acm_init();
    3fb2:	4b01      	ldr	r3, [pc, #4]	; (3fb8 <usb_init+0x8>)
    3fb4:	4798      	blx	r3
    3fb6:	bd08      	pop	{r3, pc}
    3fb8:	00003f81 	.word	0x00003f81

00003fbc <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    3fbc:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    3fc0:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    3fc2:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    3fc4:	f3bf 8f5f 	dmb	sy
    3fc8:	4770      	bx	lr

00003fca <atomic_leave_critical>:
    3fca:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    3fce:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    3fd0:	f383 8810 	msr	PRIMASK, r3
    3fd4:	4770      	bx	lr
	...

00003fd8 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    3fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3fda:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    3fdc:	780b      	ldrb	r3, [r1, #0]
    3fde:	f3c3 1441 	ubfx	r4, r3, #5, #2
    3fe2:	2c01      	cmp	r4, #1
    3fe4:	d15e      	bne.n	40a4 <cdcdf_acm_req+0xcc>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    3fe6:	888c      	ldrh	r4, [r1, #4]
    3fe8:	4d35      	ldr	r5, [pc, #212]	; (40c0 <cdcdf_acm_req+0xe8>)
    3fea:	782d      	ldrb	r5, [r5, #0]
    3fec:	42a5      	cmp	r5, r4
    3fee:	d003      	beq.n	3ff8 <cdcdf_acm_req+0x20>
    3ff0:	4d33      	ldr	r5, [pc, #204]	; (40c0 <cdcdf_acm_req+0xe8>)
    3ff2:	786d      	ldrb	r5, [r5, #1]
    3ff4:	42a5      	cmp	r5, r4
    3ff6:	d158      	bne.n	40aa <cdcdf_acm_req+0xd2>
    3ff8:	4616      	mov	r6, r2
    3ffa:	460c      	mov	r4, r1
    3ffc:	4605      	mov	r5, r0
		if (req->bmRequestType & USB_EP_DIR_IN) {
    3ffe:	f013 0f80 	tst.w	r3, #128	; 0x80
    4002:	d10c      	bne.n	401e <cdcdf_acm_req+0x46>
	uint16_t                   len      = req->wLength;
    4004:	88cf      	ldrh	r7, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    4006:	4b2f      	ldr	r3, [pc, #188]	; (40c4 <cdcdf_acm_req+0xec>)
    4008:	4798      	blx	r3
    400a:	4601      	mov	r1, r0
	switch (req->bRequest) {
    400c:	7863      	ldrb	r3, [r4, #1]
    400e:	2b20      	cmp	r3, #32
    4010:	d013      	beq.n	403a <cdcdf_acm_req+0x62>
    4012:	2b22      	cmp	r3, #34	; 0x22
    4014:	d032      	beq.n	407c <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
    4016:	f06f 000c 	mvn.w	r0, #12
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    401a:	b003      	add	sp, #12
    401c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    401e:	2a01      	cmp	r2, #1
    4020:	d046      	beq.n	40b0 <cdcdf_acm_req+0xd8>
	switch (req->bRequest) {
    4022:	784b      	ldrb	r3, [r1, #1]
    4024:	2b21      	cmp	r3, #33	; 0x21
    4026:	d145      	bne.n	40b4 <cdcdf_acm_req+0xdc>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    4028:	88cb      	ldrh	r3, [r1, #6]
    402a:	2b07      	cmp	r3, #7
    402c:	d145      	bne.n	40ba <cdcdf_acm_req+0xe2>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    402e:	2300      	movs	r3, #0
    4030:	2207      	movs	r2, #7
    4032:	4925      	ldr	r1, [pc, #148]	; (40c8 <cdcdf_acm_req+0xf0>)
    4034:	4c25      	ldr	r4, [pc, #148]	; (40cc <cdcdf_acm_req+0xf4>)
    4036:	47a0      	blx	r4
    4038:	e7ef      	b.n	401a <cdcdf_acm_req+0x42>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    403a:	2f07      	cmp	r7, #7
    403c:	d12b      	bne.n	4096 <cdcdf_acm_req+0xbe>
		if (USB_SETUP_STAGE == stage) {
    403e:	b1be      	cbz	r6, 4070 <cdcdf_acm_req+0x98>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    4040:	6800      	ldr	r0, [r0, #0]
    4042:	9000      	str	r0, [sp, #0]
    4044:	888a      	ldrh	r2, [r1, #4]
    4046:	798b      	ldrb	r3, [r1, #6]
    4048:	f8ad 2004 	strh.w	r2, [sp, #4]
    404c:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    4050:	4b1b      	ldr	r3, [pc, #108]	; (40c0 <cdcdf_acm_req+0xe8>)
    4052:	691b      	ldr	r3, [r3, #16]
    4054:	b113      	cbz	r3, 405c <cdcdf_acm_req+0x84>
    4056:	4668      	mov	r0, sp
    4058:	4798      	blx	r3
    405a:	b1f8      	cbz	r0, 409c <cdcdf_acm_req+0xc4>
				usbd_cdc_line_coding = line_coding_tmp;
    405c:	4b18      	ldr	r3, [pc, #96]	; (40c0 <cdcdf_acm_req+0xe8>)
    405e:	aa02      	add	r2, sp, #8
    4060:	e912 0003 	ldmdb	r2, {r0, r1}
    4064:	6098      	str	r0, [r3, #8]
    4066:	8199      	strh	r1, [r3, #12]
    4068:	0c09      	lsrs	r1, r1, #16
    406a:	7399      	strb	r1, [r3, #14]
			return ERR_NONE;
    406c:	2000      	movs	r0, #0
    406e:	e7d4      	b.n	401a <cdcdf_acm_req+0x42>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    4070:	2300      	movs	r3, #0
    4072:	2207      	movs	r2, #7
    4074:	4628      	mov	r0, r5
    4076:	4c15      	ldr	r4, [pc, #84]	; (40cc <cdcdf_acm_req+0xf4>)
    4078:	47a0      	blx	r4
    407a:	e7ce      	b.n	401a <cdcdf_acm_req+0x42>
		usbdc_xfer(0, NULL, 0, 0);
    407c:	2300      	movs	r3, #0
    407e:	461a      	mov	r2, r3
    4080:	4619      	mov	r1, r3
    4082:	4618      	mov	r0, r3
    4084:	4d11      	ldr	r5, [pc, #68]	; (40cc <cdcdf_acm_req+0xf4>)
    4086:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    4088:	4b0d      	ldr	r3, [pc, #52]	; (40c0 <cdcdf_acm_req+0xe8>)
    408a:	695b      	ldr	r3, [r3, #20]
    408c:	b143      	cbz	r3, 40a0 <cdcdf_acm_req+0xc8>
			cdcdf_acm_notify_state(req->wValue);
    408e:	8860      	ldrh	r0, [r4, #2]
    4090:	4798      	blx	r3
		return ERR_NONE;
    4092:	2000      	movs	r0, #0
    4094:	e7c1      	b.n	401a <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    4096:	f04f 30ff 	mov.w	r0, #4294967295
    409a:	e7be      	b.n	401a <cdcdf_acm_req+0x42>
			return ERR_NONE;
    409c:	2000      	movs	r0, #0
    409e:	e7bc      	b.n	401a <cdcdf_acm_req+0x42>
		return ERR_NONE;
    40a0:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    40a2:	e7ba      	b.n	401a <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    40a4:	f06f 0009 	mvn.w	r0, #9
    40a8:	e7b7      	b.n	401a <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    40aa:	f06f 0009 	mvn.w	r0, #9
    40ae:	e7b4      	b.n	401a <cdcdf_acm_req+0x42>
		return ERR_NONE;
    40b0:	2000      	movs	r0, #0
    40b2:	e7b2      	b.n	401a <cdcdf_acm_req+0x42>
		return ERR_INVALID_ARG;
    40b4:	f06f 000c 	mvn.w	r0, #12
    40b8:	e7af      	b.n	401a <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    40ba:	f04f 30ff 	mov.w	r0, #4294967295
    40be:	e7ac      	b.n	401a <cdcdf_acm_req+0x42>
    40c0:	200008c8 	.word	0x200008c8
    40c4:	000049fd 	.word	0x000049fd
    40c8:	200008d0 	.word	0x200008d0
    40cc:	000044d9 	.word	0x000044d9

000040d0 <cdcdf_acm_ctrl>:
{
    40d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    40d4:	b083      	sub	sp, #12
    40d6:	4616      	mov	r6, r2
	switch (ctrl) {
    40d8:	2901      	cmp	r1, #1
    40da:	d066      	beq.n	41aa <cdcdf_acm_ctrl+0xda>
    40dc:	b141      	cbz	r1, 40f0 <cdcdf_acm_ctrl+0x20>
		return ERR_INVALID_ARG;
    40de:	2902      	cmp	r1, #2
    40e0:	bf0c      	ite	eq
    40e2:	f06f 001a 	mvneq.w	r0, #26
    40e6:	f06f 000c 	mvnne.w	r0, #12
}
    40ea:	b003      	add	sp, #12
    40ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    40f0:	f8d0 a008 	ldr.w	sl, [r0, #8]
	ifc = desc->sod;
    40f4:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    40f6:	2800      	cmp	r0, #0
    40f8:	f000 8085 	beq.w	4206 <cdcdf_acm_ctrl+0x136>
    40fc:	f10a 3bff 	add.w	fp, sl, #4294967295
    4100:	f10a 0301 	add.w	r3, sl, #1
    4104:	9300      	str	r3, [sp, #0]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    4106:	4f46      	ldr	r7, [pc, #280]	; (4220 <cdcdf_acm_ctrl+0x150>)
				usb_d_ep_enable(func_data->func_ep_out);
    4108:	f8df 9124 	ldr.w	r9, [pc, #292]	; 4230 <cdcdf_acm_ctrl+0x160>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    410c:	f8df 8124 	ldr.w	r8, [pc, #292]	; 4234 <cdcdf_acm_ctrl+0x164>
		ifc_desc.bInterfaceNumber = ifc[2];
    4110:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    4112:	7943      	ldrb	r3, [r0, #5]
    4114:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    4118:	2b02      	cmp	r3, #2
    411a:	d002      	beq.n	4122 <cdcdf_acm_ctrl+0x52>
			return ERR_NOT_FOUND;
    411c:	f06f 0009 	mvn.w	r0, #9
    4120:	e7e3      	b.n	40ea <cdcdf_acm_ctrl+0x1a>
    4122:	f10b 0b01 	add.w	fp, fp, #1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    4126:	f89b 3000 	ldrb.w	r3, [fp]
    412a:	429a      	cmp	r2, r3
    412c:	d06e      	beq.n	420c <cdcdf_acm_ctrl+0x13c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    412e:	2bff      	cmp	r3, #255	; 0xff
    4130:	d16f      	bne.n	4212 <cdcdf_acm_ctrl+0x142>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    4132:	f88b 2000 	strb.w	r2, [fp]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    4136:	2205      	movs	r2, #5
    4138:	6871      	ldr	r1, [r6, #4]
    413a:	4b3a      	ldr	r3, [pc, #232]	; (4224 <cdcdf_acm_ctrl+0x154>)
    413c:	4798      	blx	r3
		while (NULL != ep) {
    413e:	4604      	mov	r4, r0
    4140:	b1f8      	cbz	r0, 4182 <cdcdf_acm_ctrl+0xb2>
    4142:	f8cd b004 	str.w	fp, [sp, #4]
			ep_desc.bEndpointAddress = ep[2];
    4146:	78a5      	ldrb	r5, [r4, #2]
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
	return (ptr[0] + (ptr[1] << 8));
    4148:	7963      	ldrb	r3, [r4, #5]
    414a:	7922      	ldrb	r2, [r4, #4]
    414c:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    4150:	b292      	uxth	r2, r2
    4152:	78e1      	ldrb	r1, [r4, #3]
    4154:	4628      	mov	r0, r5
    4156:	47b8      	blx	r7
    4158:	2800      	cmp	r0, #0
    415a:	d15d      	bne.n	4218 <cdcdf_acm_ctrl+0x148>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    415c:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    4160:	bf14      	ite	ne
    4162:	f88b 5002 	strbne.w	r5, [fp, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    4166:	f88a 5004 	strbeq.w	r5, [sl, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    416a:	4628      	mov	r0, r5
    416c:	47c8      	blx	r9
			desc->sod = ep;
    416e:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    4170:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    4172:	6871      	ldr	r1, [r6, #4]
    4174:	4420      	add	r0, r4
    4176:	47c0      	blx	r8
		while (NULL != ep) {
    4178:	4604      	mov	r4, r0
    417a:	2800      	cmp	r0, #0
    417c:	d1e3      	bne.n	4146 <cdcdf_acm_ctrl+0x76>
    417e:	f8dd b004 	ldr.w	fp, [sp, #4]
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    4182:	6833      	ldr	r3, [r6, #0]
    4184:	7818      	ldrb	r0, [r3, #0]
    4186:	2204      	movs	r2, #4
    4188:	6871      	ldr	r1, [r6, #4]
    418a:	4418      	add	r0, r3
    418c:	4b25      	ldr	r3, [pc, #148]	; (4224 <cdcdf_acm_ctrl+0x154>)
    418e:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    4190:	9b00      	ldr	r3, [sp, #0]
    4192:	459b      	cmp	fp, r3
    4194:	d004      	beq.n	41a0 <cdcdf_acm_ctrl+0xd0>
		if (NULL == ifc) {
    4196:	2800      	cmp	r0, #0
    4198:	d1ba      	bne.n	4110 <cdcdf_acm_ctrl+0x40>
			return ERR_NOT_FOUND;
    419a:	f06f 0009 	mvn.w	r0, #9
    419e:	e7a4      	b.n	40ea <cdcdf_acm_ctrl+0x1a>
	_cdcdf_acm_funcd.enabled = true;
    41a0:	2201      	movs	r2, #1
    41a2:	4b21      	ldr	r3, [pc, #132]	; (4228 <cdcdf_acm_ctrl+0x158>)
    41a4:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    41a6:	2000      	movs	r0, #0
    41a8:	e79f      	b.n	40ea <cdcdf_acm_ctrl+0x1a>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    41aa:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    41ac:	b142      	cbz	r2, 41c0 <cdcdf_acm_ctrl+0xf0>
		ifc_desc.bInterfaceClass = desc->sod[5];
    41ae:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    41b0:	795b      	ldrb	r3, [r3, #5]
    41b2:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    41b6:	2b02      	cmp	r3, #2
    41b8:	d002      	beq.n	41c0 <cdcdf_acm_ctrl+0xf0>
			return ERR_NOT_FOUND;
    41ba:	f06f 0009 	mvn.w	r0, #9
    41be:	e794      	b.n	40ea <cdcdf_acm_ctrl+0x1a>
		if (func_data->func_iface[i] == 0xFF) {
    41c0:	7823      	ldrb	r3, [r4, #0]
    41c2:	2bff      	cmp	r3, #255	; 0xff
    41c4:	d008      	beq.n	41d8 <cdcdf_acm_ctrl+0x108>
			func_data->func_iface[i] = 0xFF;
    41c6:	23ff      	movs	r3, #255	; 0xff
    41c8:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    41ca:	78a0      	ldrb	r0, [r4, #2]
    41cc:	4298      	cmp	r0, r3
    41ce:	d003      	beq.n	41d8 <cdcdf_acm_ctrl+0x108>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    41d0:	4b16      	ldr	r3, [pc, #88]	; (422c <cdcdf_acm_ctrl+0x15c>)
    41d2:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    41d4:	23ff      	movs	r3, #255	; 0xff
    41d6:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    41d8:	7863      	ldrb	r3, [r4, #1]
    41da:	2bff      	cmp	r3, #255	; 0xff
    41dc:	d008      	beq.n	41f0 <cdcdf_acm_ctrl+0x120>
			func_data->func_iface[i] = 0xFF;
    41de:	23ff      	movs	r3, #255	; 0xff
    41e0:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    41e2:	78e0      	ldrb	r0, [r4, #3]
    41e4:	4298      	cmp	r0, r3
    41e6:	d003      	beq.n	41f0 <cdcdf_acm_ctrl+0x120>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    41e8:	4b10      	ldr	r3, [pc, #64]	; (422c <cdcdf_acm_ctrl+0x15c>)
    41ea:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    41ec:	23ff      	movs	r3, #255	; 0xff
    41ee:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    41f0:	7920      	ldrb	r0, [r4, #4]
    41f2:	28ff      	cmp	r0, #255	; 0xff
    41f4:	d003      	beq.n	41fe <cdcdf_acm_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    41f6:	4b0d      	ldr	r3, [pc, #52]	; (422c <cdcdf_acm_ctrl+0x15c>)
    41f8:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    41fa:	23ff      	movs	r3, #255	; 0xff
    41fc:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    41fe:	2000      	movs	r0, #0
    4200:	4b09      	ldr	r3, [pc, #36]	; (4228 <cdcdf_acm_ctrl+0x158>)
    4202:	7158      	strb	r0, [r3, #5]
    4204:	e771      	b.n	40ea <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
    4206:	f06f 0009 	mvn.w	r0, #9
    420a:	e76e      	b.n	40ea <cdcdf_acm_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    420c:	f06f 0011 	mvn.w	r0, #17
    4210:	e76b      	b.n	40ea <cdcdf_acm_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    4212:	f06f 001b 	mvn.w	r0, #27
    4216:	e768      	b.n	40ea <cdcdf_acm_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
    4218:	f06f 0013 	mvn.w	r0, #19
    421c:	e765      	b.n	40ea <cdcdf_acm_ctrl+0x1a>
    421e:	bf00      	nop
    4220:	000018d5 	.word	0x000018d5
    4224:	00004a1d 	.word	0x00004a1d
    4228:	200008c8 	.word	0x200008c8
    422c:	0000193d 	.word	0x0000193d
    4230:	00001969 	.word	0x00001969
    4234:	00004a57 	.word	0x00004a57

00004238 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    4238:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    423a:	4b0a      	ldr	r3, [pc, #40]	; (4264 <cdcdf_acm_init+0x2c>)
    423c:	4798      	blx	r3
    423e:	2801      	cmp	r0, #1
    4240:	d80c      	bhi.n	425c <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    4242:	4809      	ldr	r0, [pc, #36]	; (4268 <cdcdf_acm_init+0x30>)
    4244:	4b09      	ldr	r3, [pc, #36]	; (426c <cdcdf_acm_init+0x34>)
    4246:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    4248:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    424a:	3018      	adds	r0, #24
    424c:	4b08      	ldr	r3, [pc, #32]	; (4270 <cdcdf_acm_init+0x38>)
    424e:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    4250:	4908      	ldr	r1, [pc, #32]	; (4274 <cdcdf_acm_init+0x3c>)
    4252:	2001      	movs	r0, #1
    4254:	4b08      	ldr	r3, [pc, #32]	; (4278 <cdcdf_acm_init+0x40>)
    4256:	4798      	blx	r3
	return ERR_NONE;
    4258:	2000      	movs	r0, #0
    425a:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    425c:	f06f 0010 	mvn.w	r0, #16
}
    4260:	bd08      	pop	{r3, pc}
    4262:	bf00      	nop
    4264:	00004a09 	.word	0x00004a09
    4268:	200008c8 	.word	0x200008c8
    426c:	000040d1 	.word	0x000040d1
    4270:	000049a9 	.word	0x000049a9
    4274:	20000078 	.word	0x20000078
    4278:	00004915 	.word	0x00004915

0000427c <cdcdf_acm_deinit>:

/**
 * \brief Deinitialize the USB CDC ACM Function Driver
 */
void cdcdf_acm_deinit(void)
{
    427c:	b538      	push	{r3, r4, r5, lr}
	usb_d_ep_deinit(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_COMM_EP_INDEX]);
    427e:	4d04      	ldr	r5, [pc, #16]	; (4290 <cdcdf_acm_deinit+0x14>)
    4280:	78a8      	ldrb	r0, [r5, #2]
    4282:	4c04      	ldr	r4, [pc, #16]	; (4294 <cdcdf_acm_deinit+0x18>)
    4284:	47a0      	blx	r4
	usb_d_ep_deinit(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    4286:	78e8      	ldrb	r0, [r5, #3]
    4288:	47a0      	blx	r4
	usb_d_ep_deinit(_cdcdf_acm_funcd.func_ep_out);
    428a:	7928      	ldrb	r0, [r5, #4]
    428c:	47a0      	blx	r4
    428e:	bd38      	pop	{r3, r4, r5, pc}
    4290:	200008c8 	.word	0x200008c8
    4294:	0000193d 	.word	0x0000193d

00004298 <cdcdf_acm_read>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    4298:	4b07      	ldr	r3, [pc, #28]	; (42b8 <cdcdf_acm_read+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    429a:	795b      	ldrb	r3, [r3, #5]
    429c:	b143      	cbz	r3, 42b0 <cdcdf_acm_read+0x18>
{
    429e:	b510      	push	{r4, lr}
    42a0:	460a      	mov	r2, r1
    42a2:	4601      	mov	r1, r0
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    42a4:	2300      	movs	r3, #0
    42a6:	4804      	ldr	r0, [pc, #16]	; (42b8 <cdcdf_acm_read+0x20>)
    42a8:	7900      	ldrb	r0, [r0, #4]
    42aa:	4c04      	ldr	r4, [pc, #16]	; (42bc <cdcdf_acm_read+0x24>)
    42ac:	47a0      	blx	r4
    42ae:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    42b0:	f06f 0010 	mvn.w	r0, #16
    42b4:	4770      	bx	lr
    42b6:	bf00      	nop
    42b8:	200008c8 	.word	0x200008c8
    42bc:	000044d9 	.word	0x000044d9

000042c0 <cdcdf_acm_write>:
	return _cdcdf_acm_funcd.enabled;
    42c0:	4b07      	ldr	r3, [pc, #28]	; (42e0 <cdcdf_acm_write+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    42c2:	795b      	ldrb	r3, [r3, #5]
    42c4:	b143      	cbz	r3, 42d8 <cdcdf_acm_write+0x18>
{
    42c6:	b510      	push	{r4, lr}
    42c8:	460a      	mov	r2, r1
    42ca:	4601      	mov	r1, r0
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    42cc:	2301      	movs	r3, #1
    42ce:	4804      	ldr	r0, [pc, #16]	; (42e0 <cdcdf_acm_write+0x20>)
    42d0:	78c0      	ldrb	r0, [r0, #3]
    42d2:	4c04      	ldr	r4, [pc, #16]	; (42e4 <cdcdf_acm_write+0x24>)
    42d4:	47a0      	blx	r4
    42d6:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    42d8:	f06f 0010 	mvn.w	r0, #16
    42dc:	4770      	bx	lr
    42de:	bf00      	nop
    42e0:	200008c8 	.word	0x200008c8
    42e4:	000044d9 	.word	0x000044d9

000042e8 <cdcdf_acm_register_callback>:
{
    42e8:	b508      	push	{r3, lr}
	switch (cb_type) {
    42ea:	2803      	cmp	r0, #3
    42ec:	d81b      	bhi.n	4326 <cdcdf_acm_register_callback+0x3e>
    42ee:	e8df f000 	tbb	[pc, r0]
    42f2:	0a02      	.short	0x0a02
    42f4:	1612      	.short	0x1612
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    42f6:	460a      	mov	r2, r1
    42f8:	2102      	movs	r1, #2
    42fa:	4b0c      	ldr	r3, [pc, #48]	; (432c <cdcdf_acm_register_callback+0x44>)
    42fc:	7918      	ldrb	r0, [r3, #4]
    42fe:	4b0c      	ldr	r3, [pc, #48]	; (4330 <cdcdf_acm_register_callback+0x48>)
    4300:	4798      	blx	r3
	return ERR_NONE;
    4302:	2000      	movs	r0, #0
		break;
    4304:	bd08      	pop	{r3, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    4306:	460a      	mov	r2, r1
    4308:	2102      	movs	r1, #2
    430a:	4b08      	ldr	r3, [pc, #32]	; (432c <cdcdf_acm_register_callback+0x44>)
    430c:	78d8      	ldrb	r0, [r3, #3]
    430e:	4b08      	ldr	r3, [pc, #32]	; (4330 <cdcdf_acm_register_callback+0x48>)
    4310:	4798      	blx	r3
	return ERR_NONE;
    4312:	2000      	movs	r0, #0
		break;
    4314:	bd08      	pop	{r3, pc}
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    4316:	4b05      	ldr	r3, [pc, #20]	; (432c <cdcdf_acm_register_callback+0x44>)
    4318:	6119      	str	r1, [r3, #16]
	return ERR_NONE;
    431a:	2000      	movs	r0, #0
		break;
    431c:	bd08      	pop	{r3, pc}
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    431e:	4b03      	ldr	r3, [pc, #12]	; (432c <cdcdf_acm_register_callback+0x44>)
    4320:	6159      	str	r1, [r3, #20]
	return ERR_NONE;
    4322:	2000      	movs	r0, #0
		break;
    4324:	bd08      	pop	{r3, pc}
		return ERR_INVALID_ARG;
    4326:	f06f 000c 	mvn.w	r0, #12
}
    432a:	bd08      	pop	{r3, pc}
    432c:	200008c8 	.word	0x200008c8
    4330:	00001b3d 	.word	0x00001b3d

00004334 <cdcdf_acm_is_enabled>:
}
    4334:	4b01      	ldr	r3, [pc, #4]	; (433c <cdcdf_acm_is_enabled+0x8>)
    4336:	7958      	ldrb	r0, [r3, #5]
    4338:	4770      	bx	lr
    433a:	bf00      	nop
    433c:	200008c8 	.word	0x200008c8

00004340 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    4340:	b570      	push	{r4, r5, r6, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    4342:	4b07      	ldr	r3, [pc, #28]	; (4360 <usbdc_unconfig+0x20>)
    4344:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    4346:	b14c      	cbz	r4, 435c <usbdc_unconfig+0x1c>
		func->ctrl(func, USBDF_DISABLE, NULL);
    4348:	2600      	movs	r6, #0
    434a:	2501      	movs	r5, #1
    434c:	6863      	ldr	r3, [r4, #4]
    434e:	4632      	mov	r2, r6
    4350:	4629      	mov	r1, r5
    4352:	4620      	mov	r0, r4
    4354:	4798      	blx	r3
		func = func->next;
    4356:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    4358:	2c00      	cmp	r4, #0
    435a:	d1f7      	bne.n	434c <usbdc_unconfig+0xc>
    435c:	bd70      	pop	{r4, r5, r6, pc}
    435e:	bf00      	nop
    4360:	200008ec 	.word	0x200008ec

00004364 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    4364:	b570      	push	{r4, r5, r6, lr}
    4366:	4606      	mov	r6, r0
    4368:	460d      	mov	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    436a:	4b07      	ldr	r3, [pc, #28]	; (4388 <usbdc_change_notify+0x24>)
    436c:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    436e:	b91c      	cbnz	r4, 4378 <usbdc_change_notify+0x14>
    4370:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    4372:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    4374:	2c00      	cmp	r4, #0
    4376:	d0fb      	beq.n	4370 <usbdc_change_notify+0xc>
		if (NULL != cg->cb) {
    4378:	6863      	ldr	r3, [r4, #4]
    437a:	2b00      	cmp	r3, #0
    437c:	d0f9      	beq.n	4372 <usbdc_change_notify+0xe>
			cg->cb(change, value);
    437e:	4629      	mov	r1, r5
    4380:	4630      	mov	r0, r6
    4382:	4798      	blx	r3
    4384:	e7f5      	b.n	4372 <usbdc_change_notify+0xe>
    4386:	bf00      	nop
    4388:	200008ec 	.word	0x200008ec

0000438c <usbdc_request_handler>:
	}
}

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    438c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    438e:	4607      	mov	r7, r0
    4390:	460e      	mov	r6, r1
    4392:	4615      	mov	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    4394:	4b0c      	ldr	r3, [pc, #48]	; (43c8 <usbdc_request_handler+0x3c>)
    4396:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    4398:	b91c      	cbnz	r4, 43a2 <usbdc_request_handler+0x16>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    439a:	2000      	movs	r0, #0
    439c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h = h->next;
    439e:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    43a0:	b16c      	cbz	r4, 43be <usbdc_request_handler+0x32>
		if (NULL != h->cb) {
    43a2:	6863      	ldr	r3, [r4, #4]
    43a4:	2b00      	cmp	r3, #0
    43a6:	d0fa      	beq.n	439e <usbdc_request_handler+0x12>
			rc = h->cb(ep, req, stage);
    43a8:	462a      	mov	r2, r5
    43aa:	4631      	mov	r1, r6
    43ac:	4638      	mov	r0, r7
    43ae:	4798      	blx	r3
			if (0 == rc) {
    43b0:	b138      	cbz	r0, 43c2 <usbdc_request_handler+0x36>
			} else if (ERR_NOT_FOUND != rc) {
    43b2:	f110 0f0a 	cmn.w	r0, #10
    43b6:	d0f2      	beq.n	439e <usbdc_request_handler+0x12>
				return -1;
    43b8:	f04f 30ff 	mov.w	r0, #4294967295
}
    43bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    43be:	2000      	movs	r0, #0
    43c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    43c2:	2001      	movs	r0, #1
    43c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    43c6:	bf00      	nop
    43c8:	200008ec 	.word	0x200008ec

000043cc <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    43cc:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    43ce:	4b06      	ldr	r3, [pc, #24]	; (43e8 <usbd_sof_cb+0x1c>)
    43d0:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    43d2:	b91c      	cbnz	r4, 43dc <usbd_sof_cb+0x10>
    43d4:	bd10      	pop	{r4, pc}
		sof = sof->next;
    43d6:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    43d8:	2c00      	cmp	r4, #0
    43da:	d0fb      	beq.n	43d4 <usbd_sof_cb+0x8>
		if (NULL != sof->cb) {
    43dc:	6863      	ldr	r3, [r4, #4]
    43de:	2b00      	cmp	r3, #0
    43e0:	d0f9      	beq.n	43d6 <usbd_sof_cb+0xa>
			sof->cb();
    43e2:	4798      	blx	r3
    43e4:	e7f7      	b.n	43d6 <usbd_sof_cb+0xa>
    43e6:	bf00      	nop
    43e8:	200008ec 	.word	0x200008ec

000043ec <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    43ec:	b510      	push	{r4, lr}
    43ee:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    43f0:	b119      	cbz	r1, 43fa <usbdc_cb_ctl_done+0xe>
    43f2:	2901      	cmp	r1, #1
    43f4:	d026      	beq.n	4444 <usbdc_cb_ctl_done+0x58>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    43f6:	2000      	movs	r0, #0
    43f8:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    43fa:	7813      	ldrb	r3, [r2, #0]
    43fc:	2b00      	cmp	r3, #0
    43fe:	d1fa      	bne.n	43f6 <usbdc_cb_ctl_done+0xa>
	switch (req->bRequest) {
    4400:	7853      	ldrb	r3, [r2, #1]
    4402:	2b05      	cmp	r3, #5
    4404:	d00f      	beq.n	4426 <usbdc_cb_ctl_done+0x3a>
    4406:	2b09      	cmp	r3, #9
    4408:	d1f5      	bne.n	43f6 <usbdc_cb_ctl_done+0xa>
		usbdc.cfg_value = req->wValue;
    440a:	8852      	ldrh	r2, [r2, #2]
    440c:	4b10      	ldr	r3, [pc, #64]	; (4450 <usbdc_cb_ctl_done+0x64>)
    440e:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    4410:	8863      	ldrh	r3, [r4, #2]
    4412:	2b00      	cmp	r3, #0
    4414:	bf14      	ite	ne
    4416:	2104      	movne	r1, #4
    4418:	2103      	moveq	r1, #3
    441a:	4b0d      	ldr	r3, [pc, #52]	; (4450 <usbdc_cb_ctl_done+0x64>)
    441c:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    441e:	2001      	movs	r0, #1
    4420:	4b0c      	ldr	r3, [pc, #48]	; (4454 <usbdc_cb_ctl_done+0x68>)
    4422:	4798      	blx	r3
    4424:	e7e7      	b.n	43f6 <usbdc_cb_ctl_done+0xa>
		usbdc_set_address(req->wValue);
    4426:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    4428:	b2c0      	uxtb	r0, r0
    442a:	4b0b      	ldr	r3, [pc, #44]	; (4458 <usbdc_cb_ctl_done+0x6c>)
    442c:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    442e:	8863      	ldrh	r3, [r4, #2]
    4430:	2b00      	cmp	r3, #0
    4432:	bf14      	ite	ne
    4434:	2103      	movne	r1, #3
    4436:	2102      	moveq	r1, #2
    4438:	4b05      	ldr	r3, [pc, #20]	; (4450 <usbdc_cb_ctl_done+0x64>)
    443a:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    443c:	2001      	movs	r0, #1
    443e:	4b05      	ldr	r3, [pc, #20]	; (4454 <usbdc_cb_ctl_done+0x68>)
    4440:	4798      	blx	r3
    4442:	e7d8      	b.n	43f6 <usbdc_cb_ctl_done+0xa>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    4444:	2201      	movs	r2, #1
    4446:	4621      	mov	r1, r4
    4448:	2000      	movs	r0, #0
    444a:	4b04      	ldr	r3, [pc, #16]	; (445c <usbdc_cb_ctl_done+0x70>)
    444c:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    444e:	e7d2      	b.n	43f6 <usbdc_cb_ctl_done+0xa>
    4450:	200008ec 	.word	0x200008ec
    4454:	00004365 	.word	0x00004365
    4458:	000018c9 	.word	0x000018c9
    445c:	0000438d 	.word	0x0000438d

00004460 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    4460:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    4462:	4b0d      	ldr	r3, [pc, #52]	; (4498 <usbdc_reset+0x38>)
    4464:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    4466:	4d0d      	ldr	r5, [pc, #52]	; (449c <usbdc_reset+0x3c>)
    4468:	2602      	movs	r6, #2
    446a:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    446c:	2400      	movs	r4, #0
    446e:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    4470:	776c      	strb	r4, [r5, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    4472:	4620      	mov	r0, r4
    4474:	4b0a      	ldr	r3, [pc, #40]	; (44a0 <usbdc_reset+0x40>)
    4476:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    4478:	7f28      	ldrb	r0, [r5, #28]
    447a:	4b0a      	ldr	r3, [pc, #40]	; (44a4 <usbdc_reset+0x44>)
    447c:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    447e:	4a0a      	ldr	r2, [pc, #40]	; (44a8 <usbdc_reset+0x48>)
    4480:	4621      	mov	r1, r4
    4482:	4620      	mov	r0, r4
    4484:	4d09      	ldr	r5, [pc, #36]	; (44ac <usbdc_reset+0x4c>)
    4486:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    4488:	4a09      	ldr	r2, [pc, #36]	; (44b0 <usbdc_reset+0x50>)
    448a:	4631      	mov	r1, r6
    448c:	4620      	mov	r0, r4
    448e:	47a8      	blx	r5
	usb_d_ep_enable(0);
    4490:	4620      	mov	r0, r4
    4492:	4b08      	ldr	r3, [pc, #32]	; (44b4 <usbdc_reset+0x54>)
    4494:	4798      	blx	r3
    4496:	bd70      	pop	{r4, r5, r6, pc}
    4498:	00004341 	.word	0x00004341
    449c:	200008ec 	.word	0x200008ec
    44a0:	0000193d 	.word	0x0000193d
    44a4:	00001929 	.word	0x00001929
    44a8:	000044f9 	.word	0x000044f9
    44ac:	00001b3d 	.word	0x00001b3d
    44b0:	000043ed 	.word	0x000043ed
    44b4:	00001969 	.word	0x00001969

000044b8 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    44b8:	b508      	push	{r3, lr}
	(void)param;

	switch (ev) {
    44ba:	b110      	cbz	r0, 44c2 <usbd_event_cb+0xa>
    44bc:	2801      	cmp	r0, #1
    44be:	d004      	beq.n	44ca <usbd_event_cb+0x12>
    44c0:	bd08      	pop	{r3, pc}
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    44c2:	2000      	movs	r0, #0
    44c4:	4b02      	ldr	r3, [pc, #8]	; (44d0 <usbd_event_cb+0x18>)
    44c6:	4798      	blx	r3
		break;
    44c8:	bd08      	pop	{r3, pc}

	case USB_EV_RESET:
		usbdc_reset();
    44ca:	4b02      	ldr	r3, [pc, #8]	; (44d4 <usbd_event_cb+0x1c>)
    44cc:	4798      	blx	r3
    44ce:	bd08      	pop	{r3, pc}
    44d0:	00004365 	.word	0x00004365
    44d4:	00004461 	.word	0x00004461

000044d8 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    44d8:	b500      	push	{lr}
    44da:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    44dc:	9101      	str	r1, [sp, #4]
    44de:	9202      	str	r2, [sp, #8]
    44e0:	f88d 000c 	strb.w	r0, [sp, #12]
    44e4:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    44e8:	a801      	add	r0, sp, #4
    44ea:	4b02      	ldr	r3, [pc, #8]	; (44f4 <usbdc_xfer+0x1c>)
    44ec:	4798      	blx	r3
}
    44ee:	b005      	add	sp, #20
    44f0:	f85d fb04 	ldr.w	pc, [sp], #4
    44f4:	000019b5 	.word	0x000019b5

000044f8 <usbdc_cb_ctl_req>:
{
    44f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    44fc:	b083      	sub	sp, #12
    44fe:	4605      	mov	r5, r0
    4500:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    4502:	2200      	movs	r2, #0
    4504:	4b9b      	ldr	r3, [pc, #620]	; (4774 <usbdc_cb_ctl_req+0x27c>)
    4506:	4798      	blx	r3
    4508:	f1b0 3fff 	cmp.w	r0, #4294967295
    450c:	d00b      	beq.n	4526 <usbdc_cb_ctl_req+0x2e>
    450e:	2801      	cmp	r0, #1
    4510:	f000 81e3 	beq.w	48da <usbdc_cb_ctl_req+0x3e2>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    4514:	7823      	ldrb	r3, [r4, #0]
    4516:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    451a:	d008      	beq.n	452e <usbdc_cb_ctl_req+0x36>
    451c:	2a80      	cmp	r2, #128	; 0x80
    451e:	f000 80f4 	beq.w	470a <usbdc_cb_ctl_req+0x212>
		return false;
    4522:	2000      	movs	r0, #0
    4524:	e000      	b.n	4528 <usbdc_cb_ctl_req+0x30>
		return false;
    4526:	2000      	movs	r0, #0
}
    4528:	b003      	add	sp, #12
    452a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bRequest) {
    452e:	7862      	ldrb	r2, [r4, #1]
    4530:	3a01      	subs	r2, #1
    4532:	2a0a      	cmp	r2, #10
    4534:	f200 81d3 	bhi.w	48de <usbdc_cb_ctl_req+0x3e6>
    4538:	e8df f012 	tbh	[pc, r2, lsl #1]
    453c:	01d10060 	.word	0x01d10060
    4540:	01d10076 	.word	0x01d10076
    4544:	01d1000b 	.word	0x01d1000b
    4548:	01d101d1 	.word	0x01d101d1
    454c:	01d10015 	.word	0x01d10015
    4550:	008c      	.short	0x008c
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    4552:	2301      	movs	r3, #1
    4554:	2200      	movs	r2, #0
    4556:	4611      	mov	r1, r2
    4558:	4628      	mov	r0, r5
    455a:	4c87      	ldr	r4, [pc, #540]	; (4778 <usbdc_cb_ctl_req+0x280>)
    455c:	47a0      	blx	r4
    455e:	fab0 f080 	clz	r0, r0
    4562:	0940      	lsrs	r0, r0, #5
    4564:	e7e0      	b.n	4528 <usbdc_cb_ctl_req+0x30>
		if (!usbdc_set_config(req->wValue)) {
    4566:	8862      	ldrh	r2, [r4, #2]
    4568:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    456a:	b1ca      	cbz	r2, 45a0 <usbdc_cb_ctl_req+0xa8>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    456c:	4b83      	ldr	r3, [pc, #524]	; (477c <usbdc_cb_ctl_req+0x284>)
    456e:	681b      	ldr	r3, [r3, #0]
    4570:	6859      	ldr	r1, [r3, #4]
    4572:	6818      	ldr	r0, [r3, #0]
    4574:	4b82      	ldr	r3, [pc, #520]	; (4780 <usbdc_cb_ctl_req+0x288>)
    4576:	4798      	blx	r3
	if (NULL == cfg_desc) {
    4578:	2800      	cmp	r0, #0
    457a:	f000 81be 	beq.w	48fa <usbdc_cb_ctl_req+0x402>
	return (ptr[0] + (ptr[1] << 8));
    457e:	78c2      	ldrb	r2, [r0, #3]
    4580:	7881      	ldrb	r1, [r0, #2]
    4582:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    4586:	fa10 f181 	uxtah	r1, r0, r1
    458a:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    458c:	2204      	movs	r2, #4
    458e:	4b7d      	ldr	r3, [pc, #500]	; (4784 <usbdc_cb_ctl_req+0x28c>)
    4590:	4798      	blx	r3
    4592:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    4594:	b130      	cbz	r0, 45a4 <usbdc_cb_ctl_req+0xac>
    4596:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    4598:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 477c <usbdc_cb_ctl_req+0x284>
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    459c:	4f79      	ldr	r7, [pc, #484]	; (4784 <usbdc_cb_ctl_req+0x28c>)
    459e:	e018      	b.n	45d2 <usbdc_cb_ctl_req+0xda>
		usbdc_unconfig();
    45a0:	4b79      	ldr	r3, [pc, #484]	; (4788 <usbdc_cb_ctl_req+0x290>)
    45a2:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    45a4:	2301      	movs	r3, #1
    45a6:	2200      	movs	r2, #0
    45a8:	4611      	mov	r1, r2
    45aa:	4628      	mov	r0, r5
    45ac:	4c72      	ldr	r4, [pc, #456]	; (4778 <usbdc_cb_ctl_req+0x280>)
    45ae:	47a0      	blx	r4
    45b0:	fab0 f080 	clz	r0, r0
    45b4:	0940      	lsrs	r0, r0, #5
    45b6:	e7b7      	b.n	4528 <usbdc_cb_ctl_req+0x30>
			last_iface = desc.sod[2];
    45b8:	464c      	mov	r4, r9
    45ba:	e000      	b.n	45be <usbdc_cb_ctl_req+0xc6>
    45bc:	464c      	mov	r4, r9
		desc.sod = usb_desc_next(desc.sod);
    45be:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    45c0:	7803      	ldrb	r3, [r0, #0]
    45c2:	4418      	add	r0, r3
    45c4:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    45c6:	2204      	movs	r2, #4
    45c8:	9901      	ldr	r1, [sp, #4]
    45ca:	47b8      	blx	r7
    45cc:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    45ce:	2800      	cmp	r0, #0
    45d0:	d0e8      	beq.n	45a4 <usbdc_cb_ctl_req+0xac>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    45d2:	f890 9002 	ldrb.w	r9, [r0, #2]
    45d6:	45a1      	cmp	r9, r4
    45d8:	d0f1      	beq.n	45be <usbdc_cb_ctl_req+0xc6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    45da:	f8d8 4010 	ldr.w	r4, [r8, #16]
			while (NULL != func) {
    45de:	2c00      	cmp	r4, #0
    45e0:	d0ea      	beq.n	45b8 <usbdc_cb_ctl_req+0xc0>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    45e2:	2600      	movs	r6, #0
    45e4:	6863      	ldr	r3, [r4, #4]
    45e6:	466a      	mov	r2, sp
    45e8:	4631      	mov	r1, r6
    45ea:	4620      	mov	r0, r4
    45ec:	4798      	blx	r3
    45ee:	2800      	cmp	r0, #0
    45f0:	d0e4      	beq.n	45bc <usbdc_cb_ctl_req+0xc4>
					func = func->next;
    45f2:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    45f4:	2c00      	cmp	r4, #0
    45f6:	d1f5      	bne.n	45e4 <usbdc_cb_ctl_req+0xec>
			last_iface = desc.sod[2];
    45f8:	464c      	mov	r4, r9
    45fa:	e7e0      	b.n	45be <usbdc_cb_ctl_req+0xc6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    45fc:	f003 031f 	and.w	r3, r3, #31
    4600:	2b02      	cmp	r3, #2
    4602:	f040 816e 	bne.w	48e2 <usbdc_cb_ctl_req+0x3ea>
		if (req->wLength != 0) {
    4606:	88e3      	ldrh	r3, [r4, #6]
    4608:	b10b      	cbz	r3, 460e <usbdc_cb_ctl_req+0x116>
			return false;
    460a:	2000      	movs	r0, #0
    460c:	e78c      	b.n	4528 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    460e:	88a0      	ldrh	r0, [r4, #4]
    4610:	2100      	movs	r1, #0
    4612:	b2c0      	uxtb	r0, r0
    4614:	4b5d      	ldr	r3, [pc, #372]	; (478c <usbdc_cb_ctl_req+0x294>)
    4616:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    4618:	2301      	movs	r3, #1
    461a:	2200      	movs	r2, #0
    461c:	4611      	mov	r1, r2
    461e:	4628      	mov	r0, r5
    4620:	4c55      	ldr	r4, [pc, #340]	; (4778 <usbdc_cb_ctl_req+0x280>)
    4622:	47a0      	blx	r4
		return true;
    4624:	2001      	movs	r0, #1
    4626:	e77f      	b.n	4528 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    4628:	f003 031f 	and.w	r3, r3, #31
    462c:	2b02      	cmp	r3, #2
    462e:	f040 815a 	bne.w	48e6 <usbdc_cb_ctl_req+0x3ee>
		if (req->wLength != 0) {
    4632:	88e3      	ldrh	r3, [r4, #6]
    4634:	b10b      	cbz	r3, 463a <usbdc_cb_ctl_req+0x142>
			return false;
    4636:	2000      	movs	r0, #0
    4638:	e776      	b.n	4528 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    463a:	88a0      	ldrh	r0, [r4, #4]
    463c:	2101      	movs	r1, #1
    463e:	b2c0      	uxtb	r0, r0
    4640:	4b52      	ldr	r3, [pc, #328]	; (478c <usbdc_cb_ctl_req+0x294>)
    4642:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    4644:	2301      	movs	r3, #1
    4646:	2200      	movs	r2, #0
    4648:	4611      	mov	r1, r2
    464a:	4628      	mov	r0, r5
    464c:	4c4a      	ldr	r4, [pc, #296]	; (4778 <usbdc_cb_ctl_req+0x280>)
    464e:	47a0      	blx	r4
		return true;
    4650:	2001      	movs	r0, #1
    4652:	e769      	b.n	4528 <usbdc_cb_ctl_req+0x30>
		return usbdc_set_interface(req->wValue, req->wIndex);
    4654:	8866      	ldrh	r6, [r4, #2]
    4656:	88a4      	ldrh	r4, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    4658:	4a48      	ldr	r2, [pc, #288]	; (477c <usbdc_cb_ctl_req+0x284>)
    465a:	6813      	ldr	r3, [r2, #0]
    465c:	7ed2      	ldrb	r2, [r2, #27]
    465e:	6859      	ldr	r1, [r3, #4]
    4660:	6818      	ldr	r0, [r3, #0]
    4662:	4b47      	ldr	r3, [pc, #284]	; (4780 <usbdc_cb_ctl_req+0x288>)
    4664:	4798      	blx	r3
	if (NULL == ifc) {
    4666:	2800      	cmp	r0, #0
    4668:	d045      	beq.n	46f6 <usbdc_cb_ctl_req+0x1fe>
	desc.sod = ifc;
    466a:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    466c:	78c2      	ldrb	r2, [r0, #3]
    466e:	7881      	ldrb	r1, [r0, #2]
    4670:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    4674:	fa10 f181 	uxtah	r1, r0, r1
    4678:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    467a:	2204      	movs	r2, #4
    467c:	4b41      	ldr	r3, [pc, #260]	; (4784 <usbdc_cb_ctl_req+0x28c>)
    467e:	4798      	blx	r3
    4680:	4603      	mov	r3, r0
    4682:	2800      	cmp	r0, #0
    4684:	d039      	beq.n	46fa <usbdc_cb_ctl_req+0x202>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    4686:	2704      	movs	r7, #4
    4688:	4d3e      	ldr	r5, [pc, #248]	; (4784 <usbdc_cb_ctl_req+0x28c>)
    468a:	e008      	b.n	469e <usbdc_cb_ctl_req+0x1a6>
		desc.sod = usb_desc_next(desc.sod);
    468c:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    468e:	7803      	ldrb	r3, [r0, #0]
    4690:	4418      	add	r0, r3
    4692:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    4694:	463a      	mov	r2, r7
    4696:	9901      	ldr	r1, [sp, #4]
    4698:	47a8      	blx	r5
		if (NULL == ifc) {
    469a:	4603      	mov	r3, r0
    469c:	b378      	cbz	r0, 46fe <usbdc_cb_ctl_req+0x206>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    469e:	789a      	ldrb	r2, [r3, #2]
    46a0:	42a2      	cmp	r2, r4
    46a2:	d1f3      	bne.n	468c <usbdc_cb_ctl_req+0x194>
    46a4:	78da      	ldrb	r2, [r3, #3]
    46a6:	42b2      	cmp	r2, r6
    46a8:	d1f0      	bne.n	468c <usbdc_cb_ctl_req+0x194>
	desc.sod = ifc;
    46aa:	9300      	str	r3, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    46ac:	4b33      	ldr	r3, [pc, #204]	; (477c <usbdc_cb_ctl_req+0x284>)
    46ae:	691d      	ldr	r5, [r3, #16]
	while (NULL != func) {
    46b0:	b33d      	cbz	r5, 4702 <usbdc_cb_ctl_req+0x20a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    46b2:	2701      	movs	r7, #1
    46b4:	686b      	ldr	r3, [r5, #4]
    46b6:	466a      	mov	r2, sp
    46b8:	4639      	mov	r1, r7
    46ba:	4628      	mov	r0, r5
    46bc:	4798      	blx	r3
    46be:	b120      	cbz	r0, 46ca <usbdc_cb_ctl_req+0x1d2>
			func = func->next;
    46c0:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    46c2:	2d00      	cmp	r5, #0
    46c4:	d1f6      	bne.n	46b4 <usbdc_cb_ctl_req+0x1bc>
	return false;
    46c6:	2000      	movs	r0, #0
    46c8:	e72e      	b.n	4528 <usbdc_cb_ctl_req+0x30>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    46ca:	686b      	ldr	r3, [r5, #4]
    46cc:	466a      	mov	r2, sp
    46ce:	2100      	movs	r1, #0
    46d0:	4628      	mov	r0, r5
    46d2:	4798      	blx	r3
    46d4:	b9b8      	cbnz	r0, 4706 <usbdc_cb_ctl_req+0x20e>
			if (alt_set) {
    46d6:	b136      	cbz	r6, 46e6 <usbdc_cb_ctl_req+0x1ee>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    46d8:	4a28      	ldr	r2, [pc, #160]	; (477c <usbdc_cb_ctl_req+0x284>)
    46da:	2301      	movs	r3, #1
    46dc:	fa03 f404 	lsl.w	r4, r3, r4
    46e0:	7f53      	ldrb	r3, [r2, #29]
    46e2:	4323      	orrs	r3, r4
    46e4:	7753      	strb	r3, [r2, #29]
			usbdc_xfer(0, NULL, 0, 0);
    46e6:	2300      	movs	r3, #0
    46e8:	461a      	mov	r2, r3
    46ea:	4619      	mov	r1, r3
    46ec:	4618      	mov	r0, r3
    46ee:	4c22      	ldr	r4, [pc, #136]	; (4778 <usbdc_cb_ctl_req+0x280>)
    46f0:	47a0      	blx	r4
			return true;
    46f2:	2001      	movs	r0, #1
    46f4:	e718      	b.n	4528 <usbdc_cb_ctl_req+0x30>
		return false;
    46f6:	2000      	movs	r0, #0
    46f8:	e716      	b.n	4528 <usbdc_cb_ctl_req+0x30>
		return false;
    46fa:	2000      	movs	r0, #0
    46fc:	e714      	b.n	4528 <usbdc_cb_ctl_req+0x30>
			return false;
    46fe:	2000      	movs	r0, #0
    4700:	e712      	b.n	4528 <usbdc_cb_ctl_req+0x30>
	return false;
    4702:	2000      	movs	r0, #0
    4704:	e710      	b.n	4528 <usbdc_cb_ctl_req+0x30>
			return false;
    4706:	2000      	movs	r0, #0
    4708:	e70e      	b.n	4528 <usbdc_cb_ctl_req+0x30>
	switch (req->bRequest) {
    470a:	7862      	ldrb	r2, [r4, #1]
    470c:	2a0a      	cmp	r2, #10
    470e:	f200 80ec 	bhi.w	48ea <usbdc_cb_ctl_req+0x3f2>
    4712:	e8df f012 	tbh	[pc, r2, lsl #1]
    4716:	008e      	.short	0x008e
    4718:	00ea00ea 	.word	0x00ea00ea
    471c:	00ea00ea 	.word	0x00ea00ea
    4720:	000b00ea 	.word	0x000b00ea
    4724:	008200ea 	.word	0x008200ea
    4728:	00b200ea 	.word	0x00b200ea
	uint8_t type = (uint8_t)(req->wValue >> 8);
    472c:	8862      	ldrh	r2, [r4, #2]
	switch (type) {
    472e:	0a13      	lsrs	r3, r2, #8
    4730:	2b02      	cmp	r3, #2
    4732:	d02d      	beq.n	4790 <usbdc_cb_ctl_req+0x298>
    4734:	2b03      	cmp	r3, #3
    4736:	d050      	beq.n	47da <usbdc_cb_ctl_req+0x2e2>
    4738:	2b01      	cmp	r3, #1
    473a:	d001      	beq.n	4740 <usbdc_cb_ctl_req+0x248>
	return false;
    473c:	2000      	movs	r0, #0
    473e:	e6f3      	b.n	4528 <usbdc_cb_ctl_req+0x30>
	uint16_t length   = req->wLength;
    4740:	88e2      	ldrh	r2, [r4, #6]
    4742:	2a12      	cmp	r2, #18
    4744:	bf28      	it	cs
    4746:	2212      	movcs	r2, #18
    4748:	4614      	mov	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    474a:	4b0c      	ldr	r3, [pc, #48]	; (477c <usbdc_cb_ctl_req+0x284>)
    474c:	681b      	ldr	r3, [r3, #0]
    474e:	2201      	movs	r2, #1
    4750:	6859      	ldr	r1, [r3, #4]
    4752:	6818      	ldr	r0, [r3, #0]
    4754:	4b0b      	ldr	r3, [pc, #44]	; (4784 <usbdc_cb_ctl_req+0x28c>)
    4756:	4798      	blx	r3
	if (!dev_desc) {
    4758:	4601      	mov	r1, r0
    475a:	2800      	cmp	r0, #0
    475c:	f000 80c7 	beq.w	48ee <usbdc_cb_ctl_req+0x3f6>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    4760:	2300      	movs	r3, #0
    4762:	4622      	mov	r2, r4
    4764:	4628      	mov	r0, r5
    4766:	4c04      	ldr	r4, [pc, #16]	; (4778 <usbdc_cb_ctl_req+0x280>)
    4768:	47a0      	blx	r4
    476a:	fab0 f080 	clz	r0, r0
    476e:	0940      	lsrs	r0, r0, #5
    4770:	e6da      	b.n	4528 <usbdc_cb_ctl_req+0x30>
    4772:	bf00      	nop
    4774:	0000438d 	.word	0x0000438d
    4778:	000044d9 	.word	0x000044d9
    477c:	200008ec 	.word	0x200008ec
    4780:	00004a9d 	.word	0x00004a9d
    4784:	00004a1d 	.word	0x00004a1d
    4788:	00004341 	.word	0x00004341
    478c:	00001ad5 	.word	0x00001ad5
	uint16_t length   = req->wLength;
    4790:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    4792:	4b5b      	ldr	r3, [pc, #364]	; (4900 <usbdc_cb_ctl_req+0x408>)
    4794:	7f1e      	ldrb	r6, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    4796:	681b      	ldr	r3, [r3, #0]
    4798:	3201      	adds	r2, #1
    479a:	b2d2      	uxtb	r2, r2
    479c:	6859      	ldr	r1, [r3, #4]
    479e:	6818      	ldr	r0, [r3, #0]
    47a0:	4b58      	ldr	r3, [pc, #352]	; (4904 <usbdc_cb_ctl_req+0x40c>)
    47a2:	4798      	blx	r3
	if (NULL == cfg_desc) {
    47a4:	4601      	mov	r1, r0
    47a6:	2800      	cmp	r0, #0
    47a8:	f000 80a3 	beq.w	48f2 <usbdc_cb_ctl_req+0x3fa>
	return (ptr[0] + (ptr[1] << 8));
    47ac:	78c3      	ldrb	r3, [r0, #3]
    47ae:	7882      	ldrb	r2, [r0, #2]
    47b0:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    47b4:	b292      	uxth	r2, r2
	if (length <= total_len) {
    47b6:	4294      	cmp	r4, r2
    47b8:	d90d      	bls.n	47d6 <usbdc_cb_ctl_req+0x2de>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    47ba:	3e01      	subs	r6, #1
    47bc:	4226      	tst	r6, r4
    47be:	bf0c      	ite	eq
    47c0:	2301      	moveq	r3, #1
    47c2:	2300      	movne	r3, #0
		length = total_len;
    47c4:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    47c6:	4622      	mov	r2, r4
    47c8:	4628      	mov	r0, r5
    47ca:	4c4f      	ldr	r4, [pc, #316]	; (4908 <usbdc_cb_ctl_req+0x410>)
    47cc:	47a0      	blx	r4
    47ce:	fab0 f080 	clz	r0, r0
    47d2:	0940      	lsrs	r0, r0, #5
    47d4:	e6a8      	b.n	4528 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    47d6:	2300      	movs	r3, #0
    47d8:	e7f5      	b.n	47c6 <usbdc_cb_ctl_req+0x2ce>
	uint16_t length   = req->wLength;
    47da:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    47dc:	4b48      	ldr	r3, [pc, #288]	; (4900 <usbdc_cb_ctl_req+0x408>)
    47de:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    47e0:	681b      	ldr	r3, [r3, #0]
    47e2:	b2d2      	uxtb	r2, r2
    47e4:	6859      	ldr	r1, [r3, #4]
    47e6:	6818      	ldr	r0, [r3, #0]
    47e8:	4b48      	ldr	r3, [pc, #288]	; (490c <usbdc_cb_ctl_req+0x414>)
    47ea:	4798      	blx	r3
	if (NULL == str_desc) {
    47ec:	4601      	mov	r1, r0
    47ee:	2800      	cmp	r0, #0
    47f0:	f000 8081 	beq.w	48f6 <usbdc_cb_ctl_req+0x3fe>
	if (length <= str_desc[0]) {
    47f4:	7802      	ldrb	r2, [r0, #0]
    47f6:	4294      	cmp	r4, r2
    47f8:	d90d      	bls.n	4816 <usbdc_cb_ctl_req+0x31e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    47fa:	3e01      	subs	r6, #1
    47fc:	4226      	tst	r6, r4
    47fe:	bf0c      	ite	eq
    4800:	2301      	moveq	r3, #1
    4802:	2300      	movne	r3, #0
		length = str_desc[0];
    4804:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    4806:	4622      	mov	r2, r4
    4808:	4628      	mov	r0, r5
    480a:	4c3f      	ldr	r4, [pc, #252]	; (4908 <usbdc_cb_ctl_req+0x410>)
    480c:	47a0      	blx	r4
    480e:	fab0 f080 	clz	r0, r0
    4812:	0940      	lsrs	r0, r0, #5
    4814:	e688      	b.n	4528 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    4816:	2300      	movs	r3, #0
    4818:	e7f5      	b.n	4806 <usbdc_cb_ctl_req+0x30e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    481a:	4939      	ldr	r1, [pc, #228]	; (4900 <usbdc_cb_ctl_req+0x408>)
    481c:	694b      	ldr	r3, [r1, #20]
    481e:	7eca      	ldrb	r2, [r1, #27]
    4820:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    4822:	2300      	movs	r3, #0
    4824:	2201      	movs	r2, #1
    4826:	6949      	ldr	r1, [r1, #20]
    4828:	4628      	mov	r0, r5
    482a:	4c37      	ldr	r4, [pc, #220]	; (4908 <usbdc_cb_ctl_req+0x410>)
    482c:	47a0      	blx	r4
		return true;
    482e:	2001      	movs	r0, #1
    4830:	e67a      	b.n	4528 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    4832:	f003 031f 	and.w	r3, r3, #31
    4836:	2b01      	cmp	r3, #1
    4838:	d903      	bls.n	4842 <usbdc_cb_ctl_req+0x34a>
    483a:	2b02      	cmp	r3, #2
    483c:	d010      	beq.n	4860 <usbdc_cb_ctl_req+0x368>
		return false;
    483e:	2000      	movs	r0, #0
    4840:	e672      	b.n	4528 <usbdc_cb_ctl_req+0x30>
		st = 0;
    4842:	2300      	movs	r3, #0
    4844:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    4846:	492e      	ldr	r1, [pc, #184]	; (4900 <usbdc_cb_ctl_req+0x408>)
    4848:	694b      	ldr	r3, [r1, #20]
    484a:	f8bd 2000 	ldrh.w	r2, [sp]
    484e:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    4850:	2300      	movs	r3, #0
    4852:	2202      	movs	r2, #2
    4854:	6949      	ldr	r1, [r1, #20]
    4856:	4628      	mov	r0, r5
    4858:	4c2b      	ldr	r4, [pc, #172]	; (4908 <usbdc_cb_ctl_req+0x410>)
    485a:	47a0      	blx	r4
	return true;
    485c:	2001      	movs	r0, #1
    485e:	e663      	b.n	4528 <usbdc_cb_ctl_req+0x30>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    4860:	88a0      	ldrh	r0, [r4, #4]
    4862:	2102      	movs	r1, #2
    4864:	b2c0      	uxtb	r0, r0
    4866:	4b2a      	ldr	r3, [pc, #168]	; (4910 <usbdc_cb_ctl_req+0x418>)
    4868:	4798      	blx	r3
		if (st < 0) {
    486a:	2800      	cmp	r0, #0
    486c:	db03      	blt.n	4876 <usbdc_cb_ctl_req+0x37e>
		st = st & 0x1;
    486e:	f000 0001 	and.w	r0, r0, #1
    4872:	9000      	str	r0, [sp, #0]
    4874:	e7e7      	b.n	4846 <usbdc_cb_ctl_req+0x34e>
			return false;
    4876:	2000      	movs	r0, #0
    4878:	e656      	b.n	4528 <usbdc_cb_ctl_req+0x30>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    487a:	4b21      	ldr	r3, [pc, #132]	; (4900 <usbdc_cb_ctl_req+0x408>)
    487c:	7f5b      	ldrb	r3, [r3, #29]
    487e:	88a2      	ldrh	r2, [r4, #4]
    4880:	4113      	asrs	r3, r2
    4882:	f013 0f01 	tst.w	r3, #1
    4886:	d012      	beq.n	48ae <usbdc_cb_ctl_req+0x3b6>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    4888:	4b1d      	ldr	r3, [pc, #116]	; (4900 <usbdc_cb_ctl_req+0x408>)
    488a:	691d      	ldr	r5, [r3, #16]
	return false;
    488c:	2000      	movs	r0, #0
	while (NULL != func) {
    488e:	2d00      	cmp	r5, #0
    4890:	f43f ae4a 	beq.w	4528 <usbdc_cb_ctl_req+0x30>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    4894:	2602      	movs	r6, #2
    4896:	686b      	ldr	r3, [r5, #4]
    4898:	4622      	mov	r2, r4
    489a:	4631      	mov	r1, r6
    489c:	4628      	mov	r0, r5
    489e:	4798      	blx	r3
    48a0:	2800      	cmp	r0, #0
    48a2:	da0f      	bge.n	48c4 <usbdc_cb_ctl_req+0x3cc>
			func = func->next;
    48a4:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    48a6:	2d00      	cmp	r5, #0
    48a8:	d1f5      	bne.n	4896 <usbdc_cb_ctl_req+0x39e>
	return false;
    48aa:	2000      	movs	r0, #0
    48ac:	e63c      	b.n	4528 <usbdc_cb_ctl_req+0x30>
		usbdc.ctrl_buf[0] = 0;
    48ae:	4914      	ldr	r1, [pc, #80]	; (4900 <usbdc_cb_ctl_req+0x408>)
    48b0:	694b      	ldr	r3, [r1, #20]
    48b2:	2000      	movs	r0, #0
    48b4:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    48b6:	4603      	mov	r3, r0
    48b8:	2201      	movs	r2, #1
    48ba:	6949      	ldr	r1, [r1, #20]
    48bc:	4c12      	ldr	r4, [pc, #72]	; (4908 <usbdc_cb_ctl_req+0x410>)
    48be:	47a0      	blx	r4
		return true;
    48c0:	2001      	movs	r0, #1
    48c2:	e631      	b.n	4528 <usbdc_cb_ctl_req+0x30>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    48c4:	490e      	ldr	r1, [pc, #56]	; (4900 <usbdc_cb_ctl_req+0x408>)
    48c6:	694b      	ldr	r3, [r1, #20]
    48c8:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    48ca:	2300      	movs	r3, #0
    48cc:	2201      	movs	r2, #1
    48ce:	6949      	ldr	r1, [r1, #20]
    48d0:	4618      	mov	r0, r3
    48d2:	4c0d      	ldr	r4, [pc, #52]	; (4908 <usbdc_cb_ctl_req+0x410>)
    48d4:	47a0      	blx	r4
			return true;
    48d6:	2001      	movs	r0, #1
    48d8:	e626      	b.n	4528 <usbdc_cb_ctl_req+0x30>
		return true;
    48da:	2001      	movs	r0, #1
    48dc:	e624      	b.n	4528 <usbdc_cb_ctl_req+0x30>
		return false;
    48de:	2000      	movs	r0, #0
    48e0:	e622      	b.n	4528 <usbdc_cb_ctl_req+0x30>
		return false;
    48e2:	2000      	movs	r0, #0
    48e4:	e620      	b.n	4528 <usbdc_cb_ctl_req+0x30>
		return false;
    48e6:	2000      	movs	r0, #0
    48e8:	e61e      	b.n	4528 <usbdc_cb_ctl_req+0x30>
		return false;
    48ea:	2000      	movs	r0, #0
    48ec:	e61c      	b.n	4528 <usbdc_cb_ctl_req+0x30>
		return false;
    48ee:	2000      	movs	r0, #0
    48f0:	e61a      	b.n	4528 <usbdc_cb_ctl_req+0x30>
		return false;
    48f2:	2000      	movs	r0, #0
    48f4:	e618      	b.n	4528 <usbdc_cb_ctl_req+0x30>
		return false;
    48f6:	2000      	movs	r0, #0
    48f8:	e616      	b.n	4528 <usbdc_cb_ctl_req+0x30>
			return false;
    48fa:	2000      	movs	r0, #0
    48fc:	e614      	b.n	4528 <usbdc_cb_ctl_req+0x30>
    48fe:	bf00      	nop
    4900:	200008ec 	.word	0x200008ec
    4904:	00004a9d 	.word	0x00004a9d
    4908:	000044d9 	.word	0x000044d9
    490c:	00004b05 	.word	0x00004b05
    4910:	00001ad5 	.word	0x00001ad5

00004914 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    4914:	b508      	push	{r3, lr}
	switch (type) {
    4916:	2801      	cmp	r0, #1
    4918:	d007      	beq.n	492a <usbdc_register_handler+0x16>
    491a:	b110      	cbz	r0, 4922 <usbdc_register_handler+0xe>
    491c:	2802      	cmp	r0, #2
    491e:	d008      	beq.n	4932 <usbdc_register_handler+0x1e>
    4920:	bd08      	pop	{r3, pc}
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    4922:	4806      	ldr	r0, [pc, #24]	; (493c <usbdc_register_handler+0x28>)
    4924:	4b06      	ldr	r3, [pc, #24]	; (4940 <usbdc_register_handler+0x2c>)
    4926:	4798      	blx	r3
		break;
    4928:	bd08      	pop	{r3, pc}
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    492a:	4806      	ldr	r0, [pc, #24]	; (4944 <usbdc_register_handler+0x30>)
    492c:	4b04      	ldr	r3, [pc, #16]	; (4940 <usbdc_register_handler+0x2c>)
    492e:	4798      	blx	r3
		break;
    4930:	bd08      	pop	{r3, pc}
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    4932:	4805      	ldr	r0, [pc, #20]	; (4948 <usbdc_register_handler+0x34>)
    4934:	4b02      	ldr	r3, [pc, #8]	; (4940 <usbdc_register_handler+0x2c>)
    4936:	4798      	blx	r3
    4938:	bd08      	pop	{r3, pc}
    493a:	bf00      	nop
    493c:	200008f0 	.word	0x200008f0
    4940:	00001be5 	.word	0x00001be5
    4944:	200008f4 	.word	0x200008f4
    4948:	200008f8 	.word	0x200008f8

0000494c <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    494c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    494e:	4605      	mov	r5, r0
    4950:	f240 3255 	movw	r2, #853	; 0x355
    4954:	490c      	ldr	r1, [pc, #48]	; (4988 <usbdc_init+0x3c>)
    4956:	3000      	adds	r0, #0
    4958:	bf18      	it	ne
    495a:	2001      	movne	r0, #1
    495c:	4b0b      	ldr	r3, [pc, #44]	; (498c <usbdc_init+0x40>)
    495e:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    4960:	4b0b      	ldr	r3, [pc, #44]	; (4990 <usbdc_init+0x44>)
    4962:	4798      	blx	r3
	if (rc < 0) {
    4964:	2800      	cmp	r0, #0
    4966:	db0e      	blt.n	4986 <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    4968:	4c0a      	ldr	r4, [pc, #40]	; (4994 <usbdc_init+0x48>)
    496a:	2220      	movs	r2, #32
    496c:	2100      	movs	r1, #0
    496e:	4620      	mov	r0, r4
    4970:	4b09      	ldr	r3, [pc, #36]	; (4998 <usbdc_init+0x4c>)
    4972:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    4974:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    4976:	4909      	ldr	r1, [pc, #36]	; (499c <usbdc_init+0x50>)
    4978:	2000      	movs	r0, #0
    497a:	4c09      	ldr	r4, [pc, #36]	; (49a0 <usbdc_init+0x54>)
    497c:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    497e:	4909      	ldr	r1, [pc, #36]	; (49a4 <usbdc_init+0x58>)
    4980:	2001      	movs	r0, #1
    4982:	47a0      	blx	r4

	return 0;
    4984:	2000      	movs	r0, #0
}
    4986:	bd38      	pop	{r3, r4, r5, pc}
    4988:	00005b48 	.word	0x00005b48
    498c:	00001b89 	.word	0x00001b89
    4990:	0000183d 	.word	0x0000183d
    4994:	200008ec 	.word	0x200008ec
    4998:	000050ad 	.word	0x000050ad
    499c:	000043cd 	.word	0x000043cd
    49a0:	000018a5 	.word	0x000018a5
    49a4:	000044b9 	.word	0x000044b9

000049a8 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    49a8:	b508      	push	{r3, lr}
	list_insert_at_end(&usbdc.func_list, func);
    49aa:	4601      	mov	r1, r0
    49ac:	4801      	ldr	r0, [pc, #4]	; (49b4 <usbdc_register_function+0xc>)
    49ae:	4b02      	ldr	r3, [pc, #8]	; (49b8 <usbdc_register_function+0x10>)
    49b0:	4798      	blx	r3
    49b2:	bd08      	pop	{r3, pc}
    49b4:	200008fc 	.word	0x200008fc
    49b8:	00001be5 	.word	0x00001be5

000049bc <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    49bc:	b508      	push	{r3, lr}
	if (usbdc.state >= USBD_S_POWER) {
    49be:	4b0a      	ldr	r3, [pc, #40]	; (49e8 <usbdc_start+0x2c>)
    49c0:	7e9b      	ldrb	r3, [r3, #26]
    49c2:	b95b      	cbnz	r3, 49dc <usbdc_start+0x20>
		return ERR_BUSY;
	}

	if (desces) {
    49c4:	b168      	cbz	r0, 49e2 <usbdc_start+0x26>
		usbdc.desces.ls_fs = desces;
    49c6:	4b08      	ldr	r3, [pc, #32]	; (49e8 <usbdc_start+0x2c>)
    49c8:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    49ca:	6802      	ldr	r2, [r0, #0]
    49cc:	79d2      	ldrb	r2, [r2, #7]
    49ce:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    49d0:	2201      	movs	r2, #1
    49d2:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    49d4:	4b05      	ldr	r3, [pc, #20]	; (49ec <usbdc_start+0x30>)
    49d6:	4798      	blx	r3
	return ERR_NONE;
    49d8:	2000      	movs	r0, #0
    49da:	bd08      	pop	{r3, pc}
		return ERR_BUSY;
    49dc:	f06f 0003 	mvn.w	r0, #3
    49e0:	bd08      	pop	{r3, pc}
		return ERR_BAD_DATA;
    49e2:	f06f 0008 	mvn.w	r0, #8
}
    49e6:	bd08      	pop	{r3, pc}
    49e8:	200008ec 	.word	0x200008ec
    49ec:	000018b1 	.word	0x000018b1

000049f0 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    49f0:	b508      	push	{r3, lr}
	usb_d_attach();
    49f2:	4b01      	ldr	r3, [pc, #4]	; (49f8 <usbdc_attach+0x8>)
    49f4:	4798      	blx	r3
    49f6:	bd08      	pop	{r3, pc}
    49f8:	000018bd 	.word	0x000018bd

000049fc <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    49fc:	4b01      	ldr	r3, [pc, #4]	; (4a04 <usbdc_get_ctrl_buffer+0x8>)
    49fe:	6958      	ldr	r0, [r3, #20]
    4a00:	4770      	bx	lr
    4a02:	bf00      	nop
    4a04:	200008ec 	.word	0x200008ec

00004a08 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    4a08:	4b03      	ldr	r3, [pc, #12]	; (4a18 <usbdc_get_state+0x10>)
    4a0a:	7e98      	ldrb	r0, [r3, #26]
    4a0c:	f000 0310 	and.w	r3, r0, #16
		return USBD_S_SUSPEND;
    4a10:	2b00      	cmp	r3, #0
	}
	return usbdc.state;
}
    4a12:	bf18      	it	ne
    4a14:	2010      	movne	r0, #16
    4a16:	4770      	bx	lr
    4a18:	200008ec 	.word	0x200008ec

00004a1c <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    4a1c:	4288      	cmp	r0, r1
    4a1e:	d214      	bcs.n	4a4a <usb_find_desc+0x2e>
	return desc[0];
    4a20:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    4a22:	2b01      	cmp	r3, #1
    4a24:	d913      	bls.n	4a4e <usb_find_desc+0x32>
{
    4a26:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    4a28:	7844      	ldrb	r4, [r0, #1]
    4a2a:	4294      	cmp	r4, r2
    4a2c:	d00a      	beq.n	4a44 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    4a2e:	4418      	add	r0, r3
	while (desc < eof) {
    4a30:	4281      	cmp	r1, r0
    4a32:	d906      	bls.n	4a42 <usb_find_desc+0x26>
	return desc[0];
    4a34:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    4a36:	2b01      	cmp	r3, #1
    4a38:	d90b      	bls.n	4a52 <usb_find_desc+0x36>
	return desc[1];
    4a3a:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    4a3c:	4294      	cmp	r4, r2
    4a3e:	d1f6      	bne.n	4a2e <usb_find_desc+0x12>
    4a40:	e000      	b.n	4a44 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    4a42:	2000      	movs	r0, #0
}
    4a44:	f85d 4b04 	ldr.w	r4, [sp], #4
    4a48:	4770      	bx	lr
	return NULL;
    4a4a:	2000      	movs	r0, #0
    4a4c:	4770      	bx	lr
		_desc_len_check();
    4a4e:	2000      	movs	r0, #0
    4a50:	4770      	bx	lr
    4a52:	2000      	movs	r0, #0
    4a54:	e7f6      	b.n	4a44 <usb_find_desc+0x28>

00004a56 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    4a56:	4288      	cmp	r0, r1
    4a58:	d216      	bcs.n	4a88 <usb_find_ep_desc+0x32>
	return desc[0];
    4a5a:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    4a5c:	2b01      	cmp	r3, #1
    4a5e:	d915      	bls.n	4a8c <usb_find_ep_desc+0x36>
	return desc[1];
    4a60:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    4a62:	2a04      	cmp	r2, #4
    4a64:	d014      	beq.n	4a90 <usb_find_ep_desc+0x3a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    4a66:	2a05      	cmp	r2, #5
    4a68:	d00b      	beq.n	4a82 <usb_find_ep_desc+0x2c>
	return (desc + usb_desc_len(desc));
    4a6a:	4418      	add	r0, r3
	while (desc < eof) {
    4a6c:	4281      	cmp	r1, r0
    4a6e:	d909      	bls.n	4a84 <usb_find_ep_desc+0x2e>
	return desc[0];
    4a70:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    4a72:	2b01      	cmp	r3, #1
    4a74:	d90e      	bls.n	4a94 <usb_find_ep_desc+0x3e>
	return desc[1];
    4a76:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    4a78:	2a04      	cmp	r2, #4
    4a7a:	d00d      	beq.n	4a98 <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    4a7c:	2a05      	cmp	r2, #5
    4a7e:	d1f4      	bne.n	4a6a <usb_find_ep_desc+0x14>
    4a80:	e00b      	b.n	4a9a <usb_find_ep_desc+0x44>
    4a82:	4770      	bx	lr
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    4a84:	2000      	movs	r0, #0
    4a86:	4770      	bx	lr
    4a88:	2000      	movs	r0, #0
    4a8a:	4770      	bx	lr
		_desc_len_check();
    4a8c:	2000      	movs	r0, #0
    4a8e:	4770      	bx	lr
	return NULL;
    4a90:	2000      	movs	r0, #0
    4a92:	4770      	bx	lr
		_desc_len_check();
    4a94:	2000      	movs	r0, #0
    4a96:	4770      	bx	lr
	return NULL;
    4a98:	2000      	movs	r0, #0
}
    4a9a:	4770      	bx	lr

00004a9c <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    4a9c:	b538      	push	{r3, r4, r5, lr}
    4a9e:	460c      	mov	r4, r1
    4aa0:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    4aa2:	2202      	movs	r2, #2
    4aa4:	4b16      	ldr	r3, [pc, #88]	; (4b00 <usb_find_cfg_desc+0x64>)
    4aa6:	4798      	blx	r3
	if (!desc) {
    4aa8:	4603      	mov	r3, r0
    4aaa:	b1e8      	cbz	r0, 4ae8 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    4aac:	4284      	cmp	r4, r0
    4aae:	d91d      	bls.n	4aec <usb_find_cfg_desc+0x50>
		_desc_len_check();
    4ab0:	7802      	ldrb	r2, [r0, #0]
    4ab2:	2a01      	cmp	r2, #1
    4ab4:	d91c      	bls.n	4af0 <usb_find_cfg_desc+0x54>
		if (desc[1] != USB_DT_CONFIG) {
    4ab6:	7842      	ldrb	r2, [r0, #1]
    4ab8:	2a02      	cmp	r2, #2
    4aba:	d11b      	bne.n	4af4 <usb_find_cfg_desc+0x58>
			break;
		}
		if (desc[5] == cfg_value) {
    4abc:	7942      	ldrb	r2, [r0, #5]
    4abe:	42aa      	cmp	r2, r5
    4ac0:	d012      	beq.n	4ae8 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    4ac2:	78d9      	ldrb	r1, [r3, #3]
    4ac4:	789a      	ldrb	r2, [r3, #2]
    4ac6:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    4aca:	fa13 f382 	uxtah	r3, r3, r2
	while (desc < eof) {
    4ace:	429c      	cmp	r4, r3
    4ad0:	d909      	bls.n	4ae6 <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    4ad2:	781a      	ldrb	r2, [r3, #0]
    4ad4:	2a01      	cmp	r2, #1
    4ad6:	d90f      	bls.n	4af8 <usb_find_cfg_desc+0x5c>
		if (desc[1] != USB_DT_CONFIG) {
    4ad8:	785a      	ldrb	r2, [r3, #1]
    4ada:	2a02      	cmp	r2, #2
    4adc:	d10e      	bne.n	4afc <usb_find_cfg_desc+0x60>
		if (desc[5] == cfg_value) {
    4ade:	795a      	ldrb	r2, [r3, #5]
    4ae0:	42aa      	cmp	r2, r5
    4ae2:	d1ee      	bne.n	4ac2 <usb_find_cfg_desc+0x26>
    4ae4:	e000      	b.n	4ae8 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    4ae6:	2300      	movs	r3, #0
}
    4ae8:	4618      	mov	r0, r3
    4aea:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
    4aec:	2300      	movs	r3, #0
    4aee:	e7fb      	b.n	4ae8 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    4af0:	2300      	movs	r3, #0
    4af2:	e7f9      	b.n	4ae8 <usb_find_cfg_desc+0x4c>
	return NULL;
    4af4:	2300      	movs	r3, #0
    4af6:	e7f7      	b.n	4ae8 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    4af8:	2300      	movs	r3, #0
    4afa:	e7f5      	b.n	4ae8 <usb_find_cfg_desc+0x4c>
	return NULL;
    4afc:	2300      	movs	r3, #0
    4afe:	e7f3      	b.n	4ae8 <usb_find_cfg_desc+0x4c>
    4b00:	00004a1d 	.word	0x00004a1d

00004b04 <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    4b04:	4288      	cmp	r0, r1
    4b06:	d217      	bcs.n	4b38 <usb_find_str_desc+0x34>
{
    4b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4b0c:	460d      	mov	r5, r1
    4b0e:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    4b10:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    4b12:	f04f 0803 	mov.w	r8, #3
    4b16:	4f0c      	ldr	r7, [pc, #48]	; (4b48 <usb_find_str_desc+0x44>)
    4b18:	4642      	mov	r2, r8
    4b1a:	4629      	mov	r1, r5
    4b1c:	47b8      	blx	r7
		if (desc) {
    4b1e:	4603      	mov	r3, r0
    4b20:	b170      	cbz	r0, 4b40 <usb_find_str_desc+0x3c>
	return desc[0];
    4b22:	7800      	ldrb	r0, [r0, #0]
			_desc_len_check();
    4b24:	2801      	cmp	r0, #1
    4b26:	d90a      	bls.n	4b3e <usb_find_str_desc+0x3a>
			if (i == str_index) {
    4b28:	42a6      	cmp	r6, r4
    4b2a:	d009      	beq.n	4b40 <usb_find_str_desc+0x3c>
	return (desc + usb_desc_len(desc));
    4b2c:	4418      	add	r0, r3
    4b2e:	3401      	adds	r4, #1
	for (i = 0; desc < eof;) {
    4b30:	4285      	cmp	r5, r0
    4b32:	d8f1      	bhi.n	4b18 <usb_find_str_desc+0x14>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    4b34:	2300      	movs	r3, #0
    4b36:	e003      	b.n	4b40 <usb_find_str_desc+0x3c>
    4b38:	2300      	movs	r3, #0
}
    4b3a:	4618      	mov	r0, r3
    4b3c:	4770      	bx	lr
			_desc_len_check();
    4b3e:	2300      	movs	r3, #0
}
    4b40:	4618      	mov	r0, r3
    4b42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4b46:	bf00      	nop
    4b48:	00004a1d 	.word	0x00004a1d

00004b4c <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    4b4c:	b580      	push	{r7, lr}
    4b4e:	b082      	sub	sp, #8
    4b50:	af00      	add	r7, sp, #0
    4b52:	4603      	mov	r3, r0
    4b54:	603a      	str	r2, [r7, #0]
    4b56:	71fb      	strb	r3, [r7, #7]
    4b58:	460b      	mov	r3, r1
    4b5a:	71bb      	strb	r3, [r7, #6]
	//cdcdf_acm_write((uint8_t *)usbd_cdc_buffer, count);
	//ptrUSBClass->write_buffer(count);
	//ptrUSBClass->GetLastChar();
	//bool done=true;
	ptrUSBClass->setLastChar();
    4b5c:	4b07      	ldr	r3, [pc, #28]	; (4b7c <_ZL12cb_bulk_readh13usb_xfer_codem+0x30>)
    4b5e:	681b      	ldr	r3, [r3, #0]
    4b60:	4618      	mov	r0, r3
    4b62:	4b07      	ldr	r3, [pc, #28]	; (4b80 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    4b64:	4798      	blx	r3
	ptrUSBClass->setRxDone();
    4b66:	4b05      	ldr	r3, [pc, #20]	; (4b7c <_ZL12cb_bulk_readh13usb_xfer_codem+0x30>)
    4b68:	681b      	ldr	r3, [r3, #0]
    4b6a:	4618      	mov	r0, r3
    4b6c:	4b05      	ldr	r3, [pc, #20]	; (4b84 <_ZL12cb_bulk_readh13usb_xfer_codem+0x38>)
    4b6e:	4798      	blx	r3
	//ptrUSBClass->rxDone=done;
	/* No error. */
	return false;
    4b70:	2300      	movs	r3, #0
}
    4b72:	4618      	mov	r0, r3
    4b74:	3708      	adds	r7, #8
    4b76:	46bd      	mov	sp, r7
    4b78:	bd80      	pop	{r7, pc}
    4b7a:	bf00      	nop
    4b7c:	2000098c 	.word	0x2000098c
    4b80:	00004dcd 	.word	0x00004dcd
    4b84:	00004da5 	.word	0x00004da5

00004b88 <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    4b88:	b580      	push	{r7, lr}
    4b8a:	b082      	sub	sp, #8
    4b8c:	af00      	add	r7, sp, #0
    4b8e:	4603      	mov	r3, r0
    4b90:	603a      	str	r2, [r7, #0]
    4b92:	71fb      	strb	r3, [r7, #7]
    4b94:	460b      	mov	r3, r1
    4b96:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	//cdcdf_acm_read((uint8_t *)usbd_cdc_buffer, sizeof(usbd_cdc_buffer));
	//volatile bool *done=ptrUSBClass->pTx;
	//*done=true;
	
	ptrUSBClass->setTxDone();
    4b98:	4b04      	ldr	r3, [pc, #16]	; (4bac <_ZL13cb_bulk_writeh13usb_xfer_codem+0x24>)
    4b9a:	681b      	ldr	r3, [r3, #0]
    4b9c:	4618      	mov	r0, r3
    4b9e:	4b04      	ldr	r3, [pc, #16]	; (4bb0 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x28>)
    4ba0:	4798      	blx	r3
	//ptrUSBClass->GetLastChar();
	//ptrUSBClass->txDone=done;
	

	/* No error. */
	return false;
    4ba2:	2300      	movs	r3, #0
}
    4ba4:	4618      	mov	r0, r3
    4ba6:	3708      	adds	r7, #8
    4ba8:	46bd      	mov	sp, r7
    4baa:	bd80      	pop	{r7, pc}
    4bac:	2000098c 	.word	0x2000098c
    4bb0:	00004d7d 	.word	0x00004d7d

00004bb4 <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
    4bb4:	b580      	push	{r7, lr}
    4bb6:	b082      	sub	sp, #8
    4bb8:	af00      	add	r7, sp, #0
    4bba:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
    4bbc:	793b      	ldrb	r3, [r7, #4]
    4bbe:	f003 0301 	and.w	r3, r3, #1
    4bc2:	b2db      	uxtb	r3, r3
    4bc4:	2b00      	cmp	r3, #0
    4bc6:	d00c      	beq.n	4be2 <_ZL10cb_state_c22usb_cdc_control_signal+0x2e>
		/* Callbacks must be registered after endpoint allocation */
		cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    4bc8:	4908      	ldr	r1, [pc, #32]	; (4bec <_ZL10cb_state_c22usb_cdc_control_signal+0x38>)
    4bca:	2000      	movs	r0, #0
    4bcc:	4b08      	ldr	r3, [pc, #32]	; (4bf0 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>)
    4bce:	4798      	blx	r3
		cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    4bd0:	4908      	ldr	r1, [pc, #32]	; (4bf4 <_ZL10cb_state_c22usb_cdc_control_signal+0x40>)
    4bd2:	2001      	movs	r0, #1
    4bd4:	4b06      	ldr	r3, [pc, #24]	; (4bf0 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>)
    4bd6:	4798      	blx	r3
		/* Start Rx */
		//ptrUSBClass->read_char(1);
		ptrUSBClass->setTxDone();
    4bd8:	4b07      	ldr	r3, [pc, #28]	; (4bf8 <_ZL10cb_state_c22usb_cdc_control_signal+0x44>)
    4bda:	681b      	ldr	r3, [r3, #0]
    4bdc:	4618      	mov	r0, r3
    4bde:	4b07      	ldr	r3, [pc, #28]	; (4bfc <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
    4be0:	4798      	blx	r3
		//ptrUSBClass->setTxDone();
		//ptrUSBClass->txDone=done;
	}

	/* No error. */
	return false;
    4be2:	2300      	movs	r3, #0
}
    4be4:	4618      	mov	r0, r3
    4be6:	3708      	adds	r7, #8
    4be8:	46bd      	mov	sp, r7
    4bea:	bd80      	pop	{r7, pc}
    4bec:	00004b4d 	.word	0x00004b4d
    4bf0:	000042e9 	.word	0x000042e9
    4bf4:	00004b89 	.word	0x00004b89
    4bf8:	2000098c 	.word	0x2000098c
    4bfc:	00004d7d 	.word	0x00004d7d

00004c00 <_ZN13USB_CDC_ClassC1Ev>:

// default constructor
USB_CDC_Class::USB_CDC_Class()
    4c00:	b480      	push	{r7}
    4c02:	b083      	sub	sp, #12
    4c04:	af00      	add	r7, sp, #0
    4c06:	6078      	str	r0, [r7, #4]
{
	descUSB=desc;
    4c08:	687b      	ldr	r3, [r7, #4]
    4c0a:	4a08      	ldr	r2, [pc, #32]	; (4c2c <_ZN13USB_CDC_ClassC1Ev+0x2c>)
    4c0c:	605a      	str	r2, [r3, #4]
	ptr_cdc_buffer=usbd_cdc_buffer;
    4c0e:	687b      	ldr	r3, [r7, #4]
    4c10:	4a07      	ldr	r2, [pc, #28]	; (4c30 <_ZN13USB_CDC_ClassC1Ev+0x30>)
    4c12:	609a      	str	r2, [r3, #8]
	ptrUSBClass=this;
    4c14:	4a07      	ldr	r2, [pc, #28]	; (4c34 <_ZN13USB_CDC_ClassC1Ev+0x34>)
    4c16:	687b      	ldr	r3, [r7, #4]
    4c18:	6013      	str	r3, [r2, #0]
	pUSBClass=this;
    4c1a:	687b      	ldr	r3, [r7, #4]
    4c1c:	687a      	ldr	r2, [r7, #4]
    4c1e:	665a      	str	r2, [r3, #100]	; 0x64



} //USB_CDC_Class
    4c20:	687b      	ldr	r3, [r7, #4]
    4c22:	4618      	mov	r0, r3
    4c24:	370c      	adds	r7, #12
    4c26:	46bd      	mov	sp, r7
    4c28:	bc80      	pop	{r7}
    4c2a:	4770      	bx	lr
    4c2c:	200000d8 	.word	0x200000d8
    4c30:	2000090c 	.word	0x2000090c
    4c34:	2000098c 	.word	0x2000098c

00004c38 <_ZN13USB_CDC_Class4initEv>:
} //USB_CDC_Class

// default destructor


void USB_CDC_Class::init(){
    4c38:	b580      	push	{r7, lr}
    4c3a:	b082      	sub	sp, #8
    4c3c:	af00      	add	r7, sp, #0
    4c3e:	6078      	str	r0, [r7, #4]
	usbdc_init(usb_ctrl_buffer);
    4c40:	4815      	ldr	r0, [pc, #84]	; (4c98 <_ZN13USB_CDC_Class4initEv+0x60>)
    4c42:	4b16      	ldr	r3, [pc, #88]	; (4c9c <_ZN13USB_CDC_Class4initEv+0x64>)
    4c44:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    4c46:	4b16      	ldr	r3, [pc, #88]	; (4ca0 <_ZN13USB_CDC_Class4initEv+0x68>)
    4c48:	4798      	blx	r3

	usbdc_start(desc);
    4c4a:	4816      	ldr	r0, [pc, #88]	; (4ca4 <_ZN13USB_CDC_Class4initEv+0x6c>)
    4c4c:	4b16      	ldr	r3, [pc, #88]	; (4ca8 <_ZN13USB_CDC_Class4initEv+0x70>)
    4c4e:	4798      	blx	r3
	usbdc_attach();
    4c50:	4b16      	ldr	r3, [pc, #88]	; (4cac <_ZN13USB_CDC_Class4initEv+0x74>)
    4c52:	4798      	blx	r3
	while (!isUSBEnabled()){};
    4c54:	6878      	ldr	r0, [r7, #4]
    4c56:	4b16      	ldr	r3, [pc, #88]	; (4cb0 <_ZN13USB_CDC_Class4initEv+0x78>)
    4c58:	4798      	blx	r3
    4c5a:	4603      	mov	r3, r0
    4c5c:	f083 0301 	eor.w	r3, r3, #1
    4c60:	b2db      	uxtb	r3, r3
    4c62:	2b00      	cmp	r3, #0
    4c64:	d000      	beq.n	4c68 <_ZN13USB_CDC_Class4initEv+0x30>
    4c66:	e7f5      	b.n	4c54 <_ZN13USB_CDC_Class4initEv+0x1c>
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
    4c68:	4912      	ldr	r1, [pc, #72]	; (4cb4 <_ZN13USB_CDC_Class4initEv+0x7c>)
    4c6a:	2003      	movs	r0, #3
    4c6c:	4b12      	ldr	r3, [pc, #72]	; (4cb8 <_ZN13USB_CDC_Class4initEv+0x80>)
    4c6e:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    4c70:	4912      	ldr	r1, [pc, #72]	; (4cbc <_ZN13USB_CDC_Class4initEv+0x84>)
    4c72:	2000      	movs	r0, #0
    4c74:	4b10      	ldr	r3, [pc, #64]	; (4cb8 <_ZN13USB_CDC_Class4initEv+0x80>)
    4c76:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    4c78:	4911      	ldr	r1, [pc, #68]	; (4cc0 <_ZN13USB_CDC_Class4initEv+0x88>)
    4c7a:	2001      	movs	r0, #1
    4c7c:	4b0e      	ldr	r3, [pc, #56]	; (4cb8 <_ZN13USB_CDC_Class4initEv+0x80>)
    4c7e:	4798      	blx	r3
	txDone=true;
    4c80:	687b      	ldr	r3, [r7, #4]
    4c82:	2201      	movs	r2, #1
    4c84:	f883 2020 	strb.w	r2, [r3, #32]
	rxDone=true;
    4c88:	687b      	ldr	r3, [r7, #4]
    4c8a:	2201      	movs	r2, #1
    4c8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	
	
}
    4c90:	bf00      	nop
    4c92:	3708      	adds	r7, #8
    4c94:	46bd      	mov	sp, r7
    4c96:	bd80      	pop	{r7, pc}
    4c98:	2000094c 	.word	0x2000094c
    4c9c:	0000494d 	.word	0x0000494d
    4ca0:	00004239 	.word	0x00004239
    4ca4:	200000d8 	.word	0x200000d8
    4ca8:	000049bd 	.word	0x000049bd
    4cac:	000049f1 	.word	0x000049f1
    4cb0:	00004d61 	.word	0x00004d61
    4cb4:	00004bb5 	.word	0x00004bb5
    4cb8:	000042e9 	.word	0x000042e9
    4cbc:	00004b4d 	.word	0x00004b4d
    4cc0:	00004b89 	.word	0x00004b89

00004cc4 <_ZN13USB_CDC_Class5writeEPhm>:
int32_t USB_CDC_Class::enable(){
	cdcdf_acm_init();
	return 0;
}

int32_t  USB_CDC_Class::write( uint8_t *p, uint32_t n){
    4cc4:	b580      	push	{r7, lr}
    4cc6:	b086      	sub	sp, #24
    4cc8:	af00      	add	r7, sp, #0
    4cca:	60f8      	str	r0, [r7, #12]
    4ccc:	60b9      	str	r1, [r7, #8]
    4cce:	607a      	str	r2, [r7, #4]
	int32_t w;

	while(!isUSBEnabled());
    4cd0:	68f8      	ldr	r0, [r7, #12]
    4cd2:	4b0e      	ldr	r3, [pc, #56]	; (4d0c <_ZN13USB_CDC_Class5writeEPhm+0x48>)
    4cd4:	4798      	blx	r3
    4cd6:	4603      	mov	r3, r0
    4cd8:	f083 0301 	eor.w	r3, r3, #1
    4cdc:	b2db      	uxtb	r3, r3
    4cde:	2b00      	cmp	r3, #0
    4ce0:	d000      	beq.n	4ce4 <_ZN13USB_CDC_Class5writeEPhm+0x20>
    4ce2:	e7f5      	b.n	4cd0 <_ZN13USB_CDC_Class5writeEPhm+0xc>
	while(!txDone);
    4ce4:	68fb      	ldr	r3, [r7, #12]
    4ce6:	f893 3020 	ldrb.w	r3, [r3, #32]
    4cea:	2b00      	cmp	r3, #0
    4cec:	d100      	bne.n	4cf0 <_ZN13USB_CDC_Class5writeEPhm+0x2c>
    4cee:	e7f9      	b.n	4ce4 <_ZN13USB_CDC_Class5writeEPhm+0x20>
	txDone=false;
    4cf0:	68fb      	ldr	r3, [r7, #12]
    4cf2:	2200      	movs	r2, #0
    4cf4:	f883 2020 	strb.w	r2, [r3, #32]
	w=cdcdf_acm_write(p,n);
    4cf8:	6879      	ldr	r1, [r7, #4]
    4cfa:	68b8      	ldr	r0, [r7, #8]
    4cfc:	4b04      	ldr	r3, [pc, #16]	; (4d10 <_ZN13USB_CDC_Class5writeEPhm+0x4c>)
    4cfe:	4798      	blx	r3
    4d00:	6178      	str	r0, [r7, #20]
	
	return w;
    4d02:	697b      	ldr	r3, [r7, #20]
	
}
    4d04:	4618      	mov	r0, r3
    4d06:	3718      	adds	r7, #24
    4d08:	46bd      	mov	sp, r7
    4d0a:	bd80      	pop	{r7, pc}
    4d0c:	00004d61 	.word	0x00004d61
    4d10:	000042c1 	.word	0x000042c1

00004d14 <_ZN13USB_CDC_Class4readEPhm>:
	{
		while(!rxDone);
	}
	return  r;
}
int32_t  USB_CDC_Class::read(uint8_t * p, uint32_t n){
    4d14:	b580      	push	{r7, lr}
    4d16:	b086      	sub	sp, #24
    4d18:	af00      	add	r7, sp, #0
    4d1a:	60f8      	str	r0, [r7, #12]
    4d1c:	60b9      	str	r1, [r7, #8]
    4d1e:	607a      	str	r2, [r7, #4]
	int32_t r;
	char_buffer=p;
    4d20:	68fb      	ldr	r3, [r7, #12]
    4d22:	68ba      	ldr	r2, [r7, #8]
    4d24:	60da      	str	r2, [r3, #12]
	while(!isUSBEnabled());
    4d26:	68f8      	ldr	r0, [r7, #12]
    4d28:	4b0b      	ldr	r3, [pc, #44]	; (4d58 <_ZN13USB_CDC_Class4readEPhm+0x44>)
    4d2a:	4798      	blx	r3
    4d2c:	4603      	mov	r3, r0
    4d2e:	f083 0301 	eor.w	r3, r3, #1
    4d32:	b2db      	uxtb	r3, r3
    4d34:	2b00      	cmp	r3, #0
    4d36:	d000      	beq.n	4d3a <_ZN13USB_CDC_Class4readEPhm+0x26>
    4d38:	e7f5      	b.n	4d26 <_ZN13USB_CDC_Class4readEPhm+0x12>
	//while(!rxDone);
	rxDone=false;
    4d3a:	68fb      	ldr	r3, [r7, #12]
    4d3c:	2200      	movs	r2, #0
    4d3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	r=cdcdf_acm_read(p, n);
    4d42:	6879      	ldr	r1, [r7, #4]
    4d44:	68b8      	ldr	r0, [r7, #8]
    4d46:	4b05      	ldr	r3, [pc, #20]	; (4d5c <_ZN13USB_CDC_Class4readEPhm+0x48>)
    4d48:	4798      	blx	r3
    4d4a:	6178      	str	r0, [r7, #20]
	

	return  r;
    4d4c:	697b      	ldr	r3, [r7, #20]
}
    4d4e:	4618      	mov	r0, r3
    4d50:	3718      	adds	r7, #24
    4d52:	46bd      	mov	sp, r7
    4d54:	bd80      	pop	{r7, pc}
    4d56:	bf00      	nop
    4d58:	00004d61 	.word	0x00004d61
    4d5c:	00004299 	.word	0x00004299

00004d60 <_ZN13USB_CDC_Class12isUSBEnabledEv>:
}
void USB_CDC_Class::disable(void){
cdcdf_acm_deinit();
	
}
bool USB_CDC_Class::isUSBEnabled(void){
    4d60:	b580      	push	{r7, lr}
    4d62:	b082      	sub	sp, #8
    4d64:	af00      	add	r7, sp, #0
    4d66:	6078      	str	r0, [r7, #4]
	

	return cdcdf_acm_is_enabled();
    4d68:	4b03      	ldr	r3, [pc, #12]	; (4d78 <_ZN13USB_CDC_Class12isUSBEnabledEv+0x18>)
    4d6a:	4798      	blx	r3
    4d6c:	4603      	mov	r3, r0
	
}
    4d6e:	4618      	mov	r0, r3
    4d70:	3708      	adds	r7, #8
    4d72:	46bd      	mov	sp, r7
    4d74:	bd80      	pop	{r7, pc}
    4d76:	bf00      	nop
    4d78:	00004335 	.word	0x00004335

00004d7c <_ZN13USB_CDC_Class9setTxDoneEv>:
bool  USB_CDC_Class::setTxDone(void){
    4d7c:	b480      	push	{r7}
    4d7e:	b083      	sub	sp, #12
    4d80:	af00      	add	r7, sp, #0
    4d82:	6078      	str	r0, [r7, #4]
	txDone=true;
    4d84:	687b      	ldr	r3, [r7, #4]
    4d86:	2201      	movs	r2, #1
    4d88:	f883 2020 	strb.w	r2, [r3, #32]
	txDone=true;
    4d8c:	687b      	ldr	r3, [r7, #4]
    4d8e:	2201      	movs	r2, #1
    4d90:	f883 2020 	strb.w	r2, [r3, #32]
	return txDone;
    4d94:	687b      	ldr	r3, [r7, #4]
    4d96:	f893 3020 	ldrb.w	r3, [r3, #32]
}
    4d9a:	4618      	mov	r0, r3
    4d9c:	370c      	adds	r7, #12
    4d9e:	46bd      	mov	sp, r7
    4da0:	bc80      	pop	{r7}
    4da2:	4770      	bx	lr

00004da4 <_ZN13USB_CDC_Class9setRxDoneEv>:
bool  USB_CDC_Class::setRxDone(void){
    4da4:	b480      	push	{r7}
    4da6:	b083      	sub	sp, #12
    4da8:	af00      	add	r7, sp, #0
    4daa:	6078      	str	r0, [r7, #4]
	rxDone=true;
    4dac:	687b      	ldr	r3, [r7, #4]
    4dae:	2201      	movs	r2, #1
    4db0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	rxDone=true;
    4db4:	687b      	ldr	r3, [r7, #4]
    4db6:	2201      	movs	r2, #1
    4db8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	return rxDone;
    4dbc:	687b      	ldr	r3, [r7, #4]
    4dbe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
    4dc2:	4618      	mov	r0, r3
    4dc4:	370c      	adds	r7, #12
    4dc6:	46bd      	mov	sp, r7
    4dc8:	bc80      	pop	{r7}
    4dca:	4770      	bx	lr

00004dcc <_ZN13USB_CDC_Class11setLastCharEv>:
char USB_CDC_Class::getLastChar(){
	
	return (char)byte;
	
}
uint8_t USB_CDC_Class::setLastChar(){
    4dcc:	b480      	push	{r7}
    4dce:	b083      	sub	sp, #12
    4dd0:	af00      	add	r7, sp, #0
    4dd2:	6078      	str	r0, [r7, #4]
	byte=*char_buffer;
    4dd4:	687b      	ldr	r3, [r7, #4]
    4dd6:	68db      	ldr	r3, [r3, #12]
    4dd8:	781a      	ldrb	r2, [r3, #0]
    4dda:	687b      	ldr	r3, [r7, #4]
    4ddc:	741a      	strb	r2, [r3, #16]

	return byte;
    4dde:	687b      	ldr	r3, [r7, #4]
    4de0:	7c1b      	ldrb	r3, [r3, #16]
	
}
    4de2:	4618      	mov	r0, r3
    4de4:	370c      	adds	r7, #12
    4de6:	46bd      	mov	sp, r7
    4de8:	bc80      	pop	{r7}
    4dea:	4770      	bx	lr

00004dec <_ZN13USB_CDC_ClassD1Ev>:


// default destructor
USB_CDC_Class::~USB_CDC_Class()
    4dec:	b580      	push	{r7, lr}
    4dee:	b082      	sub	sp, #8
    4df0:	af00      	add	r7, sp, #0
    4df2:	6078      	str	r0, [r7, #4]
{
	cdcdf_acm_deinit();
    4df4:	4b03      	ldr	r3, [pc, #12]	; (4e04 <_ZN13USB_CDC_ClassD1Ev+0x18>)
    4df6:	4798      	blx	r3
} //~USB_CDC_Class
    4df8:	687b      	ldr	r3, [r7, #4]
    4dfa:	4618      	mov	r0, r3
    4dfc:	3708      	adds	r7, #8
    4dfe:	46bd      	mov	sp, r7
    4e00:	bd80      	pop	{r7, pc}
    4e02:	bf00      	nop
    4e04:	0000427d 	.word	0x0000427d

00004e08 <_ZN13USB_CDC_Class6xprintEPKc>:
void USB_CDC_Class::xprint(const char *message){
    4e08:	b580      	push	{r7, lr}
    4e0a:	b0c6      	sub	sp, #280	; 0x118
    4e0c:	af00      	add	r7, sp, #0
    4e0e:	1d3b      	adds	r3, r7, #4
    4e10:	6018      	str	r0, [r3, #0]
    4e12:	463b      	mov	r3, r7
    4e14:	6019      	str	r1, [r3, #0]

	uint32_t s;
	char *p=(char *)message;
    4e16:	463b      	mov	r3, r7
    4e18:	681b      	ldr	r3, [r3, #0]
    4e1a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	s=strlen(p);
    4e1e:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
    4e22:	4b18      	ldr	r3, [pc, #96]	; (4e84 <_ZN13USB_CDC_Class6xprintEPKc+0x7c>)
    4e24:	4798      	blx	r3
    4e26:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	uint8_t	chain[256];

	
	for (uint8_t i=0;i<s;i++){
    4e2a:	2300      	movs	r3, #0
    4e2c:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
    4e30:	f897 2113 	ldrb.w	r2, [r7, #275]	; 0x113
    4e34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    4e38:	429a      	cmp	r2, r3
    4e3a:	d212      	bcs.n	4e62 <_ZN13USB_CDC_Class6xprintEPKc+0x5a>
		chain[i]=*p;
    4e3c:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
    4e40:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
    4e44:	7811      	ldrb	r1, [r2, #0]
    4e46:	f107 0208 	add.w	r2, r7, #8
    4e4a:	54d1      	strb	r1, [r2, r3]
		p++;
    4e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
    4e50:	3301      	adds	r3, #1
    4e52:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	for (uint8_t i=0;i<s;i++){
    4e56:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
    4e5a:	3301      	adds	r3, #1
    4e5c:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
    4e60:	e7e6      	b.n	4e30 <_ZN13USB_CDC_Class6xprintEPKc+0x28>
	}

	//uint8_t	pArray[s]=*string;
	uint8_t *ptr=(uint8_t*)chain;
    4e62:	f107 0308 	add.w	r3, r7, #8
    4e66:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	
	write(ptr,s);
    4e6a:	1d3b      	adds	r3, r7, #4
    4e6c:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
    4e70:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
    4e74:	6818      	ldr	r0, [r3, #0]
    4e76:	4b04      	ldr	r3, [pc, #16]	; (4e88 <_ZN13USB_CDC_Class6xprintEPKc+0x80>)
    4e78:	4798      	blx	r3
}
    4e7a:	bf00      	nop
    4e7c:	f507 778c 	add.w	r7, r7, #280	; 0x118
    4e80:	46bd      	mov	sp, r7
    4e82:	bd80      	pop	{r7, pc}
    4e84:	00005181 	.word	0x00005181
    4e88:	00004cc5 	.word	0x00004cc5

00004e8c <_ZN13USB_CDC_Class6xprintEPc>:
void USB_CDC_Class::xprint(char *message){
    4e8c:	b580      	push	{r7, lr}
    4e8e:	b0c6      	sub	sp, #280	; 0x118
    4e90:	af00      	add	r7, sp, #0
    4e92:	1d3b      	adds	r3, r7, #4
    4e94:	6018      	str	r0, [r3, #0]
    4e96:	463b      	mov	r3, r7
    4e98:	6019      	str	r1, [r3, #0]

	uint32_t s;
	char *p=(char *)message;
    4e9a:	463b      	mov	r3, r7
    4e9c:	681b      	ldr	r3, [r3, #0]
    4e9e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	s=strlen(p);
    4ea2:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
    4ea6:	4b18      	ldr	r3, [pc, #96]	; (4f08 <_ZN13USB_CDC_Class6xprintEPc+0x7c>)
    4ea8:	4798      	blx	r3
    4eaa:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	uint8_t	chain[256];

	
	for (uint8_t i=0;i<s;i++){
    4eae:	2300      	movs	r3, #0
    4eb0:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
    4eb4:	f897 2113 	ldrb.w	r2, [r7, #275]	; 0x113
    4eb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    4ebc:	429a      	cmp	r2, r3
    4ebe:	d212      	bcs.n	4ee6 <_ZN13USB_CDC_Class6xprintEPc+0x5a>
		chain[i]=*p;
    4ec0:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
    4ec4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
    4ec8:	7811      	ldrb	r1, [r2, #0]
    4eca:	f107 0208 	add.w	r2, r7, #8
    4ece:	54d1      	strb	r1, [r2, r3]
		p++;
    4ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
    4ed4:	3301      	adds	r3, #1
    4ed6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	for (uint8_t i=0;i<s;i++){
    4eda:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
    4ede:	3301      	adds	r3, #1
    4ee0:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
    4ee4:	e7e6      	b.n	4eb4 <_ZN13USB_CDC_Class6xprintEPc+0x28>
	}

	//uint8_t	pArray[s]=*string;
	uint8_t *ptr=(uint8_t*)chain;
    4ee6:	f107 0308 	add.w	r3, r7, #8
    4eea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	
	write(ptr,s);
    4eee:	1d3b      	adds	r3, r7, #4
    4ef0:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
    4ef4:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
    4ef8:	6818      	ldr	r0, [r3, #0]
    4efa:	4b04      	ldr	r3, [pc, #16]	; (4f0c <_ZN13USB_CDC_Class6xprintEPc+0x80>)
    4efc:	4798      	blx	r3
    4efe:	bf00      	nop
    4f00:	f507 778c 	add.w	r7, r7, #280	; 0x118
    4f04:	46bd      	mov	sp, r7
    4f06:	bd80      	pop	{r7, pc}
    4f08:	00005181 	.word	0x00005181
    4f0c:	00004cc5 	.word	0x00004cc5

00004f10 <__aeabi_atexit>:
    4f10:	460b      	mov	r3, r1
    4f12:	4601      	mov	r1, r0
    4f14:	4618      	mov	r0, r3
    4f16:	f000 b801 	b.w	4f1c <__cxa_atexit>
    4f1a:	bf00      	nop

00004f1c <__cxa_atexit>:
    4f1c:	4613      	mov	r3, r2
    4f1e:	460a      	mov	r2, r1
    4f20:	4601      	mov	r1, r0
    4f22:	2002      	movs	r0, #2
    4f24:	f000 b9dc 	b.w	52e0 <__register_exitproc>

00004f28 <__libc_init_array>:
    4f28:	b570      	push	{r4, r5, r6, lr}
    4f2a:	4e0f      	ldr	r6, [pc, #60]	; (4f68 <__libc_init_array+0x40>)
    4f2c:	4d0f      	ldr	r5, [pc, #60]	; (4f6c <__libc_init_array+0x44>)
    4f2e:	1b76      	subs	r6, r6, r5
    4f30:	10b6      	asrs	r6, r6, #2
    4f32:	bf18      	it	ne
    4f34:	2400      	movne	r4, #0
    4f36:	d005      	beq.n	4f44 <__libc_init_array+0x1c>
    4f38:	3401      	adds	r4, #1
    4f3a:	f855 3b04 	ldr.w	r3, [r5], #4
    4f3e:	4798      	blx	r3
    4f40:	42a6      	cmp	r6, r4
    4f42:	d1f9      	bne.n	4f38 <__libc_init_array+0x10>
    4f44:	4e0a      	ldr	r6, [pc, #40]	; (4f70 <__libc_init_array+0x48>)
    4f46:	4d0b      	ldr	r5, [pc, #44]	; (4f74 <__libc_init_array+0x4c>)
    4f48:	1b76      	subs	r6, r6, r5
    4f4a:	f000 fe1f 	bl	5b8c <_init>
    4f4e:	10b6      	asrs	r6, r6, #2
    4f50:	bf18      	it	ne
    4f52:	2400      	movne	r4, #0
    4f54:	d006      	beq.n	4f64 <__libc_init_array+0x3c>
    4f56:	3401      	adds	r4, #1
    4f58:	f855 3b04 	ldr.w	r3, [r5], #4
    4f5c:	4798      	blx	r3
    4f5e:	42a6      	cmp	r6, r4
    4f60:	d1f9      	bne.n	4f56 <__libc_init_array+0x2e>
    4f62:	bd70      	pop	{r4, r5, r6, pc}
    4f64:	bd70      	pop	{r4, r5, r6, pc}
    4f66:	bf00      	nop
    4f68:	00005b98 	.word	0x00005b98
    4f6c:	00005b98 	.word	0x00005b98
    4f70:	00005ba4 	.word	0x00005ba4
    4f74:	00005b98 	.word	0x00005b98

00004f78 <memcpy>:
    4f78:	4684      	mov	ip, r0
    4f7a:	ea41 0300 	orr.w	r3, r1, r0
    4f7e:	f013 0303 	ands.w	r3, r3, #3
    4f82:	d16d      	bne.n	5060 <memcpy+0xe8>
    4f84:	3a40      	subs	r2, #64	; 0x40
    4f86:	d341      	bcc.n	500c <memcpy+0x94>
    4f88:	f851 3b04 	ldr.w	r3, [r1], #4
    4f8c:	f840 3b04 	str.w	r3, [r0], #4
    4f90:	f851 3b04 	ldr.w	r3, [r1], #4
    4f94:	f840 3b04 	str.w	r3, [r0], #4
    4f98:	f851 3b04 	ldr.w	r3, [r1], #4
    4f9c:	f840 3b04 	str.w	r3, [r0], #4
    4fa0:	f851 3b04 	ldr.w	r3, [r1], #4
    4fa4:	f840 3b04 	str.w	r3, [r0], #4
    4fa8:	f851 3b04 	ldr.w	r3, [r1], #4
    4fac:	f840 3b04 	str.w	r3, [r0], #4
    4fb0:	f851 3b04 	ldr.w	r3, [r1], #4
    4fb4:	f840 3b04 	str.w	r3, [r0], #4
    4fb8:	f851 3b04 	ldr.w	r3, [r1], #4
    4fbc:	f840 3b04 	str.w	r3, [r0], #4
    4fc0:	f851 3b04 	ldr.w	r3, [r1], #4
    4fc4:	f840 3b04 	str.w	r3, [r0], #4
    4fc8:	f851 3b04 	ldr.w	r3, [r1], #4
    4fcc:	f840 3b04 	str.w	r3, [r0], #4
    4fd0:	f851 3b04 	ldr.w	r3, [r1], #4
    4fd4:	f840 3b04 	str.w	r3, [r0], #4
    4fd8:	f851 3b04 	ldr.w	r3, [r1], #4
    4fdc:	f840 3b04 	str.w	r3, [r0], #4
    4fe0:	f851 3b04 	ldr.w	r3, [r1], #4
    4fe4:	f840 3b04 	str.w	r3, [r0], #4
    4fe8:	f851 3b04 	ldr.w	r3, [r1], #4
    4fec:	f840 3b04 	str.w	r3, [r0], #4
    4ff0:	f851 3b04 	ldr.w	r3, [r1], #4
    4ff4:	f840 3b04 	str.w	r3, [r0], #4
    4ff8:	f851 3b04 	ldr.w	r3, [r1], #4
    4ffc:	f840 3b04 	str.w	r3, [r0], #4
    5000:	f851 3b04 	ldr.w	r3, [r1], #4
    5004:	f840 3b04 	str.w	r3, [r0], #4
    5008:	3a40      	subs	r2, #64	; 0x40
    500a:	d2bd      	bcs.n	4f88 <memcpy+0x10>
    500c:	3230      	adds	r2, #48	; 0x30
    500e:	d311      	bcc.n	5034 <memcpy+0xbc>
    5010:	f851 3b04 	ldr.w	r3, [r1], #4
    5014:	f840 3b04 	str.w	r3, [r0], #4
    5018:	f851 3b04 	ldr.w	r3, [r1], #4
    501c:	f840 3b04 	str.w	r3, [r0], #4
    5020:	f851 3b04 	ldr.w	r3, [r1], #4
    5024:	f840 3b04 	str.w	r3, [r0], #4
    5028:	f851 3b04 	ldr.w	r3, [r1], #4
    502c:	f840 3b04 	str.w	r3, [r0], #4
    5030:	3a10      	subs	r2, #16
    5032:	d2ed      	bcs.n	5010 <memcpy+0x98>
    5034:	320c      	adds	r2, #12
    5036:	d305      	bcc.n	5044 <memcpy+0xcc>
    5038:	f851 3b04 	ldr.w	r3, [r1], #4
    503c:	f840 3b04 	str.w	r3, [r0], #4
    5040:	3a04      	subs	r2, #4
    5042:	d2f9      	bcs.n	5038 <memcpy+0xc0>
    5044:	3204      	adds	r2, #4
    5046:	d008      	beq.n	505a <memcpy+0xe2>
    5048:	07d2      	lsls	r2, r2, #31
    504a:	bf1c      	itt	ne
    504c:	f811 3b01 	ldrbne.w	r3, [r1], #1
    5050:	f800 3b01 	strbne.w	r3, [r0], #1
    5054:	d301      	bcc.n	505a <memcpy+0xe2>
    5056:	880b      	ldrh	r3, [r1, #0]
    5058:	8003      	strh	r3, [r0, #0]
    505a:	4660      	mov	r0, ip
    505c:	4770      	bx	lr
    505e:	bf00      	nop
    5060:	2a08      	cmp	r2, #8
    5062:	d313      	bcc.n	508c <memcpy+0x114>
    5064:	078b      	lsls	r3, r1, #30
    5066:	d08d      	beq.n	4f84 <memcpy+0xc>
    5068:	f010 0303 	ands.w	r3, r0, #3
    506c:	d08a      	beq.n	4f84 <memcpy+0xc>
    506e:	f1c3 0304 	rsb	r3, r3, #4
    5072:	1ad2      	subs	r2, r2, r3
    5074:	07db      	lsls	r3, r3, #31
    5076:	bf1c      	itt	ne
    5078:	f811 3b01 	ldrbne.w	r3, [r1], #1
    507c:	f800 3b01 	strbne.w	r3, [r0], #1
    5080:	d380      	bcc.n	4f84 <memcpy+0xc>
    5082:	f831 3b02 	ldrh.w	r3, [r1], #2
    5086:	f820 3b02 	strh.w	r3, [r0], #2
    508a:	e77b      	b.n	4f84 <memcpy+0xc>
    508c:	3a04      	subs	r2, #4
    508e:	d3d9      	bcc.n	5044 <memcpy+0xcc>
    5090:	3a01      	subs	r2, #1
    5092:	f811 3b01 	ldrb.w	r3, [r1], #1
    5096:	f800 3b01 	strb.w	r3, [r0], #1
    509a:	d2f9      	bcs.n	5090 <memcpy+0x118>
    509c:	780b      	ldrb	r3, [r1, #0]
    509e:	7003      	strb	r3, [r0, #0]
    50a0:	784b      	ldrb	r3, [r1, #1]
    50a2:	7043      	strb	r3, [r0, #1]
    50a4:	788b      	ldrb	r3, [r1, #2]
    50a6:	7083      	strb	r3, [r0, #2]
    50a8:	4660      	mov	r0, ip
    50aa:	4770      	bx	lr

000050ac <memset>:
    50ac:	b470      	push	{r4, r5, r6}
    50ae:	0786      	lsls	r6, r0, #30
    50b0:	d046      	beq.n	5140 <memset+0x94>
    50b2:	1e54      	subs	r4, r2, #1
    50b4:	2a00      	cmp	r2, #0
    50b6:	d041      	beq.n	513c <memset+0x90>
    50b8:	b2ca      	uxtb	r2, r1
    50ba:	4603      	mov	r3, r0
    50bc:	e002      	b.n	50c4 <memset+0x18>
    50be:	f114 34ff 	adds.w	r4, r4, #4294967295
    50c2:	d33b      	bcc.n	513c <memset+0x90>
    50c4:	f803 2b01 	strb.w	r2, [r3], #1
    50c8:	079d      	lsls	r5, r3, #30
    50ca:	d1f8      	bne.n	50be <memset+0x12>
    50cc:	2c03      	cmp	r4, #3
    50ce:	d92e      	bls.n	512e <memset+0x82>
    50d0:	b2cd      	uxtb	r5, r1
    50d2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    50d6:	2c0f      	cmp	r4, #15
    50d8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    50dc:	d919      	bls.n	5112 <memset+0x66>
    50de:	f103 0210 	add.w	r2, r3, #16
    50e2:	4626      	mov	r6, r4
    50e4:	3e10      	subs	r6, #16
    50e6:	2e0f      	cmp	r6, #15
    50e8:	f842 5c10 	str.w	r5, [r2, #-16]
    50ec:	f842 5c0c 	str.w	r5, [r2, #-12]
    50f0:	f842 5c08 	str.w	r5, [r2, #-8]
    50f4:	f842 5c04 	str.w	r5, [r2, #-4]
    50f8:	f102 0210 	add.w	r2, r2, #16
    50fc:	d8f2      	bhi.n	50e4 <memset+0x38>
    50fe:	f1a4 0210 	sub.w	r2, r4, #16
    5102:	f022 020f 	bic.w	r2, r2, #15
    5106:	f004 040f 	and.w	r4, r4, #15
    510a:	3210      	adds	r2, #16
    510c:	2c03      	cmp	r4, #3
    510e:	4413      	add	r3, r2
    5110:	d90d      	bls.n	512e <memset+0x82>
    5112:	461e      	mov	r6, r3
    5114:	4622      	mov	r2, r4
    5116:	3a04      	subs	r2, #4
    5118:	2a03      	cmp	r2, #3
    511a:	f846 5b04 	str.w	r5, [r6], #4
    511e:	d8fa      	bhi.n	5116 <memset+0x6a>
    5120:	1f22      	subs	r2, r4, #4
    5122:	f022 0203 	bic.w	r2, r2, #3
    5126:	3204      	adds	r2, #4
    5128:	4413      	add	r3, r2
    512a:	f004 0403 	and.w	r4, r4, #3
    512e:	b12c      	cbz	r4, 513c <memset+0x90>
    5130:	b2c9      	uxtb	r1, r1
    5132:	441c      	add	r4, r3
    5134:	f803 1b01 	strb.w	r1, [r3], #1
    5138:	429c      	cmp	r4, r3
    513a:	d1fb      	bne.n	5134 <memset+0x88>
    513c:	bc70      	pop	{r4, r5, r6}
    513e:	4770      	bx	lr
    5140:	4614      	mov	r4, r2
    5142:	4603      	mov	r3, r0
    5144:	e7c2      	b.n	50cc <memset+0x20>
    5146:	bf00      	nop
	...

00005180 <strlen>:
    5180:	f890 f000 	pld	[r0]
    5184:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    5188:	f020 0107 	bic.w	r1, r0, #7
    518c:	f06f 0c00 	mvn.w	ip, #0
    5190:	f010 0407 	ands.w	r4, r0, #7
    5194:	f891 f020 	pld	[r1, #32]
    5198:	f040 8049 	bne.w	522e <strlen+0xae>
    519c:	f04f 0400 	mov.w	r4, #0
    51a0:	f06f 0007 	mvn.w	r0, #7
    51a4:	e9d1 2300 	ldrd	r2, r3, [r1]
    51a8:	f891 f040 	pld	[r1, #64]	; 0x40
    51ac:	f100 0008 	add.w	r0, r0, #8
    51b0:	fa82 f24c 	uadd8	r2, r2, ip
    51b4:	faa4 f28c 	sel	r2, r4, ip
    51b8:	fa83 f34c 	uadd8	r3, r3, ip
    51bc:	faa2 f38c 	sel	r3, r2, ip
    51c0:	bb4b      	cbnz	r3, 5216 <strlen+0x96>
    51c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    51c6:	fa82 f24c 	uadd8	r2, r2, ip
    51ca:	f100 0008 	add.w	r0, r0, #8
    51ce:	faa4 f28c 	sel	r2, r4, ip
    51d2:	fa83 f34c 	uadd8	r3, r3, ip
    51d6:	faa2 f38c 	sel	r3, r2, ip
    51da:	b9e3      	cbnz	r3, 5216 <strlen+0x96>
    51dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    51e0:	fa82 f24c 	uadd8	r2, r2, ip
    51e4:	f100 0008 	add.w	r0, r0, #8
    51e8:	faa4 f28c 	sel	r2, r4, ip
    51ec:	fa83 f34c 	uadd8	r3, r3, ip
    51f0:	faa2 f38c 	sel	r3, r2, ip
    51f4:	b97b      	cbnz	r3, 5216 <strlen+0x96>
    51f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    51fa:	f101 0120 	add.w	r1, r1, #32
    51fe:	fa82 f24c 	uadd8	r2, r2, ip
    5202:	f100 0008 	add.w	r0, r0, #8
    5206:	faa4 f28c 	sel	r2, r4, ip
    520a:	fa83 f34c 	uadd8	r3, r3, ip
    520e:	faa2 f38c 	sel	r3, r2, ip
    5212:	2b00      	cmp	r3, #0
    5214:	d0c6      	beq.n	51a4 <strlen+0x24>
    5216:	2a00      	cmp	r2, #0
    5218:	bf04      	itt	eq
    521a:	3004      	addeq	r0, #4
    521c:	461a      	moveq	r2, r3
    521e:	ba12      	rev	r2, r2
    5220:	fab2 f282 	clz	r2, r2
    5224:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    5228:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    522c:	4770      	bx	lr
    522e:	e9d1 2300 	ldrd	r2, r3, [r1]
    5232:	f004 0503 	and.w	r5, r4, #3
    5236:	f1c4 0000 	rsb	r0, r4, #0
    523a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    523e:	f014 0f04 	tst.w	r4, #4
    5242:	f891 f040 	pld	[r1, #64]	; 0x40
    5246:	fa0c f505 	lsl.w	r5, ip, r5
    524a:	ea62 0205 	orn	r2, r2, r5
    524e:	bf1c      	itt	ne
    5250:	ea63 0305 	ornne	r3, r3, r5
    5254:	4662      	movne	r2, ip
    5256:	f04f 0400 	mov.w	r4, #0
    525a:	e7a9      	b.n	51b0 <strlen+0x30>

0000525c <__utoa>:
    525c:	b5f0      	push	{r4, r5, r6, r7, lr}
    525e:	f8df e078 	ldr.w	lr, [pc, #120]	; 52d8 <__utoa+0x7c>
    5262:	4616      	mov	r6, r2
    5264:	4604      	mov	r4, r0
    5266:	460f      	mov	r7, r1
    5268:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    526c:	b08b      	sub	sp, #44	; 0x2c
    526e:	466d      	mov	r5, sp
    5270:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    5272:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    5276:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    5278:	e89e 0003 	ldmia.w	lr, {r0, r1}
    527c:	1eb3      	subs	r3, r6, #2
    527e:	f845 0b04 	str.w	r0, [r5], #4
    5282:	2b22      	cmp	r3, #34	; 0x22
    5284:	7029      	strb	r1, [r5, #0]
    5286:	d822      	bhi.n	52ce <__utoa+0x72>
    5288:	1e7d      	subs	r5, r7, #1
    528a:	4628      	mov	r0, r5
    528c:	2200      	movs	r2, #0
    528e:	e000      	b.n	5292 <__utoa+0x36>
    5290:	461a      	mov	r2, r3
    5292:	fbb4 f1f6 	udiv	r1, r4, r6
    5296:	ab0a      	add	r3, sp, #40	; 0x28
    5298:	fb06 4411 	mls	r4, r6, r1, r4
    529c:	4423      	add	r3, r4
    529e:	460c      	mov	r4, r1
    52a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
    52a4:	f800 3f01 	strb.w	r3, [r0, #1]!
    52a8:	1c53      	adds	r3, r2, #1
    52aa:	2900      	cmp	r1, #0
    52ac:	d1f0      	bne.n	5290 <__utoa+0x34>
    52ae:	54f9      	strb	r1, [r7, r3]
    52b0:	18bb      	adds	r3, r7, r2
    52b2:	b14a      	cbz	r2, 52c8 <__utoa+0x6c>
    52b4:	7819      	ldrb	r1, [r3, #0]
    52b6:	7868      	ldrb	r0, [r5, #1]
    52b8:	f805 1f01 	strb.w	r1, [r5, #1]!
    52bc:	3401      	adds	r4, #1
    52be:	1b11      	subs	r1, r2, r4
    52c0:	428c      	cmp	r4, r1
    52c2:	f803 0901 	strb.w	r0, [r3], #-1
    52c6:	dbf5      	blt.n	52b4 <__utoa+0x58>
    52c8:	4638      	mov	r0, r7
    52ca:	b00b      	add	sp, #44	; 0x2c
    52cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    52ce:	2000      	movs	r0, #0
    52d0:	7038      	strb	r0, [r7, #0]
    52d2:	b00b      	add	sp, #44	; 0x2c
    52d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    52d6:	bf00      	nop
    52d8:	00005b64 	.word	0x00005b64

000052dc <utoa>:
    52dc:	f7ff bfbe 	b.w	525c <__utoa>

000052e0 <__register_exitproc>:
    52e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    52e4:	4d2c      	ldr	r5, [pc, #176]	; (5398 <__register_exitproc+0xb8>)
    52e6:	4606      	mov	r6, r0
    52e8:	6828      	ldr	r0, [r5, #0]
    52ea:	4698      	mov	r8, r3
    52ec:	460f      	mov	r7, r1
    52ee:	4691      	mov	r9, r2
    52f0:	f000 f882 	bl	53f8 <__retarget_lock_acquire_recursive>
    52f4:	4b29      	ldr	r3, [pc, #164]	; (539c <__register_exitproc+0xbc>)
    52f6:	681c      	ldr	r4, [r3, #0]
    52f8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    52fc:	2b00      	cmp	r3, #0
    52fe:	d03e      	beq.n	537e <__register_exitproc+0x9e>
    5300:	685a      	ldr	r2, [r3, #4]
    5302:	2a1f      	cmp	r2, #31
    5304:	dc1c      	bgt.n	5340 <__register_exitproc+0x60>
    5306:	f102 0e01 	add.w	lr, r2, #1
    530a:	b176      	cbz	r6, 532a <__register_exitproc+0x4a>
    530c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    5310:	2401      	movs	r4, #1
    5312:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    5316:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
    531a:	4094      	lsls	r4, r2
    531c:	4320      	orrs	r0, r4
    531e:	2e02      	cmp	r6, #2
    5320:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
    5324:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    5328:	d023      	beq.n	5372 <__register_exitproc+0x92>
    532a:	3202      	adds	r2, #2
    532c:	f8c3 e004 	str.w	lr, [r3, #4]
    5330:	6828      	ldr	r0, [r5, #0]
    5332:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    5336:	f000 f861 	bl	53fc <__retarget_lock_release_recursive>
    533a:	2000      	movs	r0, #0
    533c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5340:	4b17      	ldr	r3, [pc, #92]	; (53a0 <__register_exitproc+0xc0>)
    5342:	b30b      	cbz	r3, 5388 <__register_exitproc+0xa8>
    5344:	f44f 70c8 	mov.w	r0, #400	; 0x190
    5348:	f3af 8000 	nop.w
    534c:	4603      	mov	r3, r0
    534e:	b1d8      	cbz	r0, 5388 <__register_exitproc+0xa8>
    5350:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    5354:	6002      	str	r2, [r0, #0]
    5356:	2100      	movs	r1, #0
    5358:	6041      	str	r1, [r0, #4]
    535a:	460a      	mov	r2, r1
    535c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    5360:	f04f 0e01 	mov.w	lr, #1
    5364:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    5368:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
    536c:	2e00      	cmp	r6, #0
    536e:	d0dc      	beq.n	532a <__register_exitproc+0x4a>
    5370:	e7cc      	b.n	530c <__register_exitproc+0x2c>
    5372:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
    5376:	430c      	orrs	r4, r1
    5378:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
    537c:	e7d5      	b.n	532a <__register_exitproc+0x4a>
    537e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
    5382:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    5386:	e7bb      	b.n	5300 <__register_exitproc+0x20>
    5388:	6828      	ldr	r0, [r5, #0]
    538a:	f000 f837 	bl	53fc <__retarget_lock_release_recursive>
    538e:	f04f 30ff 	mov.w	r0, #4294967295
    5392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5396:	bf00      	nop
    5398:	20000508 	.word	0x20000508
    539c:	00005b60 	.word	0x00005b60
    53a0:	00000000 	.word	0x00000000

000053a4 <register_fini>:
    53a4:	4b02      	ldr	r3, [pc, #8]	; (53b0 <register_fini+0xc>)
    53a6:	b113      	cbz	r3, 53ae <register_fini+0xa>
    53a8:	4802      	ldr	r0, [pc, #8]	; (53b4 <register_fini+0x10>)
    53aa:	f000 b805 	b.w	53b8 <atexit>
    53ae:	4770      	bx	lr
    53b0:	00000000 	.word	0x00000000
    53b4:	000053c5 	.word	0x000053c5

000053b8 <atexit>:
    53b8:	2300      	movs	r3, #0
    53ba:	4601      	mov	r1, r0
    53bc:	461a      	mov	r2, r3
    53be:	4618      	mov	r0, r3
    53c0:	f7ff bf8e 	b.w	52e0 <__register_exitproc>

000053c4 <__libc_fini_array>:
    53c4:	b538      	push	{r3, r4, r5, lr}
    53c6:	4c0a      	ldr	r4, [pc, #40]	; (53f0 <__libc_fini_array+0x2c>)
    53c8:	4d0a      	ldr	r5, [pc, #40]	; (53f4 <__libc_fini_array+0x30>)
    53ca:	1b64      	subs	r4, r4, r5
    53cc:	10a4      	asrs	r4, r4, #2
    53ce:	d00a      	beq.n	53e6 <__libc_fini_array+0x22>
    53d0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    53d4:	3b01      	subs	r3, #1
    53d6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    53da:	3c01      	subs	r4, #1
    53dc:	f855 3904 	ldr.w	r3, [r5], #-4
    53e0:	4798      	blx	r3
    53e2:	2c00      	cmp	r4, #0
    53e4:	d1f9      	bne.n	53da <__libc_fini_array+0x16>
    53e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    53ea:	f000 bbdb 	b.w	5ba4 <_fini>
    53ee:	bf00      	nop
    53f0:	00005bb4 	.word	0x00005bb4
    53f4:	00005bb0 	.word	0x00005bb0

000053f8 <__retarget_lock_acquire_recursive>:
    53f8:	4770      	bx	lr
    53fa:	bf00      	nop

000053fc <__retarget_lock_release_recursive>:
    53fc:	4770      	bx	lr
    53fe:	bf00      	nop
    5400:	41432020 	.word	0x41432020
    5404:	7473204e 	.word	0x7473204e
    5408:	72542064 	.word	0x72542064
    540c:	6d736e61 	.word	0x6d736e61
    5410:	69737369 	.word	0x69737369
    5414:	64206e6f 	.word	0x64206e6f
    5418:	20656e6f 	.word	0x20656e6f
    541c:	00000a0d 	.word	0x00000a0d
    5420:	41432020 	.word	0x41432020
    5424:	7254204e 	.word	0x7254204e
    5428:	6d736e61 	.word	0x6d736e61
    542c:	69737369 	.word	0x69737369
    5430:	64206e6f 	.word	0x64206e6f
    5434:	20656e6f 	.word	0x20656e6f
    5438:	00000a0d 	.word	0x00000a0d
    543c:	204e4143 	.word	0x204e4143
    5440:	7373654d 	.word	0x7373654d
    5444:	20656761 	.word	0x20656761
    5448:	65636572 	.word	0x65636572
    544c:	64657669 	.word	0x64657669
    5450:	54202e20 	.word	0x54202e20
    5454:	72206568 	.word	0x72206568
    5458:	69656365 	.word	0x69656365
    545c:	20646576 	.word	0x20646576
    5460:	61746164 	.word	0x61746164
    5464:	3a736920 	.word	0x3a736920
    5468:	000a0d20 	.word	0x000a0d20
    546c:	0a0d0a0d 	.word	0x0a0d0a0d
    5470:	00000000 	.word	0x00000000
    5474:	20207830 	.word	0x20207830
    5478:	00092020 	.word	0x00092020
    547c:	00003030 	.word	0x00003030
    5480:	00205830 	.word	0x00205830
    5484:	00000920 	.word	0x00000920
    5488:	756e654d 	.word	0x756e654d
    548c:	0a0d3a20 	.word	0x0a0d3a20
    5490:	00000000 	.word	0x00000000
    5494:	2d2d2020 	.word	0x2d2d2020
    5498:	6c655320 	.word	0x6c655320
    549c:	20746365 	.word	0x20746365
    54a0:	20656874 	.word	0x20656874
    54a4:	69746361 	.word	0x69746361
    54a8:	0d3a6e6f 	.word	0x0d3a6e6f
    54ac:	0000000a 	.word	0x0000000a
    54b0:	3a302020 	.word	0x3a302020
    54b4:	74655320 	.word	0x74655320
    54b8:	61747320 	.word	0x61747320
    54bc:	7261646e 	.word	0x7261646e
    54c0:	69662064 	.word	0x69662064
    54c4:	7265746c 	.word	0x7265746c
    54c8:	20444920 	.word	0x20444920
    54cc:	30203a30 	.word	0x30203a30
    54d0:	41353478 	.word	0x41353478
    54d4:	7473202c 	.word	0x7473202c
    54d8:	2065726f 	.word	0x2065726f
    54dc:	6f746e69 	.word	0x6f746e69
    54e0:	20785220 	.word	0x20785220
    54e4:	66667562 	.word	0x66667562
    54e8:	202e7265 	.word	0x202e7265
    54ec:	00000a0d 	.word	0x00000a0d
    54f0:	3a312020 	.word	0x3a312020
    54f4:	74655320 	.word	0x74655320
    54f8:	61747320 	.word	0x61747320
    54fc:	7261646e 	.word	0x7261646e
    5500:	69662064 	.word	0x69662064
    5504:	7265746c 	.word	0x7265746c
    5508:	20444920 	.word	0x20444920
    550c:	30203a31 	.word	0x30203a31
    5510:	39363478 	.word	0x39363478
    5514:	7473202c 	.word	0x7473202c
    5518:	2065726f 	.word	0x2065726f
    551c:	6f746e69 	.word	0x6f746e69
    5520:	20785220 	.word	0x20785220
    5524:	4f464946 	.word	0x4f464946
    5528:	202e3020 	.word	0x202e3020
    552c:	00000a0d 	.word	0x00000a0d
    5530:	3a322020 	.word	0x3a322020
    5534:	6e655320 	.word	0x6e655320
    5538:	44462064 	.word	0x44462064
    553c:	61747320 	.word	0x61747320
    5540:	7261646e 	.word	0x7261646e
    5544:	656d2064 	.word	0x656d2064
    5548:	67617373 	.word	0x67617373
    554c:	69772065 	.word	0x69772065
    5550:	49206874 	.word	0x49206874
    5554:	30203a44 	.word	0x30203a44
    5558:	41353478 	.word	0x41353478
    555c:	646e6120 	.word	0x646e6120
    5560:	20343620 	.word	0x20343620
    5564:	65747962 	.word	0x65747962
    5568:	74616420 	.word	0x74616420
    556c:	20302061 	.word	0x20302061
    5570:	36206f74 	.word	0x36206f74
    5574:	0d202e33 	.word	0x0d202e33
    5578:	0000000a 	.word	0x0000000a
    557c:	3a332020 	.word	0x3a332020
    5580:	6e655320 	.word	0x6e655320
    5584:	44462064 	.word	0x44462064
    5588:	61747320 	.word	0x61747320
    558c:	7261646e 	.word	0x7261646e
    5590:	656d2064 	.word	0x656d2064
    5594:	67617373 	.word	0x67617373
    5598:	69772065 	.word	0x69772065
    559c:	49206874 	.word	0x49206874
    55a0:	30203a44 	.word	0x30203a44
    55a4:	39363478 	.word	0x39363478
    55a8:	646e6120 	.word	0x646e6120
    55ac:	20343620 	.word	0x20343620
    55b0:	65747962 	.word	0x65747962
    55b4:	74616420 	.word	0x74616420
    55b8:	32312061 	.word	0x32312061
    55bc:	6f742038 	.word	0x6f742038
    55c0:	31393120 	.word	0x31393120
    55c4:	0a0d202e 	.word	0x0a0d202e
    55c8:	00000000 	.word	0x00000000
    55cc:	3a342020 	.word	0x3a342020
    55d0:	74655320 	.word	0x74655320
    55d4:	74786520 	.word	0x74786520
    55d8:	65646e65 	.word	0x65646e65
    55dc:	69662064 	.word	0x69662064
    55e0:	7265746c 	.word	0x7265746c
    55e4:	20444920 	.word	0x20444920
    55e8:	30203a30 	.word	0x30203a30
    55ec:	30303178 	.word	0x30303178
    55f0:	41303030 	.word	0x41303030
    55f4:	73202c35 	.word	0x73202c35
    55f8:	65726f74 	.word	0x65726f74
    55fc:	746e6920 	.word	0x746e6920
    5600:	7852206f 	.word	0x7852206f
    5604:	66756220 	.word	0x66756220
    5608:	2e726566 	.word	0x2e726566
    560c:	000a0d20 	.word	0x000a0d20
    5610:	3a352020 	.word	0x3a352020
    5614:	74655320 	.word	0x74655320
    5618:	74786520 	.word	0x74786520
    561c:	65646e65 	.word	0x65646e65
    5620:	69662064 	.word	0x69662064
    5624:	7265746c 	.word	0x7265746c
    5628:	20444920 	.word	0x20444920
    562c:	30203a31 	.word	0x30203a31
    5630:	30303178 	.word	0x30303178
    5634:	39303030 	.word	0x39303030
    5638:	73202c36 	.word	0x73202c36
    563c:	65726f74 	.word	0x65726f74
    5640:	746e6920 	.word	0x746e6920
    5644:	7852206f 	.word	0x7852206f
    5648:	46494620 	.word	0x46494620
    564c:	2e31204f 	.word	0x2e31204f
    5650:	000a0d20 	.word	0x000a0d20
    5654:	3a362020 	.word	0x3a362020
    5658:	6e655320 	.word	0x6e655320
    565c:	44462064 	.word	0x44462064
    5660:	74786520 	.word	0x74786520
    5664:	65646e65 	.word	0x65646e65
    5668:	656d2064 	.word	0x656d2064
    566c:	67617373 	.word	0x67617373
    5670:	69772065 	.word	0x69772065
    5674:	49206874 	.word	0x49206874
    5678:	30203a44 	.word	0x30203a44
    567c:	30303178 	.word	0x30303178
    5680:	41303030 	.word	0x41303030
    5684:	6e612035 	.word	0x6e612035
    5688:	34362064 	.word	0x34362064
    568c:	74796220 	.word	0x74796220
    5690:	61642065 	.word	0x61642065
    5694:	30206174 	.word	0x30206174
    5698:	206f7420 	.word	0x206f7420
    569c:	202e3336 	.word	0x202e3336
    56a0:	00000a0d 	.word	0x00000a0d
    56a4:	3a372020 	.word	0x3a372020
    56a8:	6e655320 	.word	0x6e655320
    56ac:	44462064 	.word	0x44462064
    56b0:	74786520 	.word	0x74786520
    56b4:	65646e65 	.word	0x65646e65
    56b8:	656d2064 	.word	0x656d2064
    56bc:	67617373 	.word	0x67617373
    56c0:	69772065 	.word	0x69772065
    56c4:	49206874 	.word	0x49206874
    56c8:	30203a44 	.word	0x30203a44
    56cc:	30303178 	.word	0x30303178
    56d0:	39303030 	.word	0x39303030
    56d4:	6e612036 	.word	0x6e612036
    56d8:	34362064 	.word	0x34362064
    56dc:	74796220 	.word	0x74796220
    56e0:	61642065 	.word	0x61642065
    56e4:	31206174 	.word	0x31206174
    56e8:	74203832 	.word	0x74203832
    56ec:	3931206f 	.word	0x3931206f
    56f0:	0d202e31 	.word	0x0d202e31
    56f4:	0000000a 	.word	0x0000000a
    56f8:	3a612020 	.word	0x3a612020
    56fc:	6e655320 	.word	0x6e655320
    5700:	6f6e2064 	.word	0x6f6e2064
    5704:	6c616d72 	.word	0x6c616d72
    5708:	61747320 	.word	0x61747320
    570c:	7261646e 	.word	0x7261646e
    5710:	656d2064 	.word	0x656d2064
    5714:	67617373 	.word	0x67617373
    5718:	69772065 	.word	0x69772065
    571c:	49206874 	.word	0x49206874
    5720:	30203a44 	.word	0x30203a44
    5724:	39363478 	.word	0x39363478
    5728:	646e6120 	.word	0x646e6120
    572c:	62203820 	.word	0x62203820
    5730:	20657479 	.word	0x20657479
    5734:	61746164 	.word	0x61746164
    5738:	74203020 	.word	0x74203020
    573c:	2e37206f 	.word	0x2e37206f
    5740:	000a0d20 	.word	0x000a0d20
    5744:	3a682020 	.word	0x3a682020
    5748:	73694420 	.word	0x73694420
    574c:	79616c70 	.word	0x79616c70
    5750:	6e656d20 	.word	0x6e656d20
    5754:	0a0d2075 	.word	0x0a0d2075
    5758:	00000a0d 	.word	0x00000a0d
    575c:	3a322020 	.word	0x3a322020
    5760:	6e655320 	.word	0x6e655320
    5764:	74732064 	.word	0x74732064
    5768:	61646e61 	.word	0x61646e61
    576c:	6d206472 	.word	0x6d206472
    5770:	61737365 	.word	0x61737365
    5774:	77206567 	.word	0x77206567
    5778:	20687469 	.word	0x20687469
    577c:	203a4449 	.word	0x203a4449
    5780:	35347830 	.word	0x35347830
    5784:	6e612041 	.word	0x6e612041
    5788:	34362064 	.word	0x34362064
    578c:	74796220 	.word	0x74796220
    5790:	61642065 	.word	0x61642065
    5794:	30206174 	.word	0x30206174
    5798:	206f7420 	.word	0x206f7420
    579c:	202e3336 	.word	0x202e3336
    57a0:	00000a0d 	.word	0x00000a0d
    57a4:	3a332020 	.word	0x3a332020
    57a8:	6e655320 	.word	0x6e655320
    57ac:	74732064 	.word	0x74732064
    57b0:	61646e61 	.word	0x61646e61
    57b4:	6d206472 	.word	0x6d206472
    57b8:	61737365 	.word	0x61737365
    57bc:	77206567 	.word	0x77206567
    57c0:	20687469 	.word	0x20687469
    57c4:	203a4449 	.word	0x203a4449
    57c8:	36347830 	.word	0x36347830
    57cc:	6e612039 	.word	0x6e612039
    57d0:	34362064 	.word	0x34362064
    57d4:	74796220 	.word	0x74796220
    57d8:	61642065 	.word	0x61642065
    57dc:	31206174 	.word	0x31206174
    57e0:	74203832 	.word	0x74203832
    57e4:	3931206f 	.word	0x3931206f
    57e8:	0d202e31 	.word	0x0d202e31
    57ec:	0000000a 	.word	0x0000000a
    57f0:	3a362020 	.word	0x3a362020
    57f4:	6e655320 	.word	0x6e655320
    57f8:	78652064 	.word	0x78652064
    57fc:	646e6574 	.word	0x646e6574
    5800:	6d206465 	.word	0x6d206465
    5804:	61737365 	.word	0x61737365
    5808:	77206567 	.word	0x77206567
    580c:	20687469 	.word	0x20687469
    5810:	203a4449 	.word	0x203a4449
    5814:	30317830 	.word	0x30317830
    5818:	30303030 	.word	0x30303030
    581c:	61203541 	.word	0x61203541
    5820:	3620646e 	.word	0x3620646e
    5824:	79622034 	.word	0x79622034
    5828:	64206574 	.word	0x64206574
    582c:	20617461 	.word	0x20617461
    5830:	6f742030 	.word	0x6f742030
    5834:	2e333620 	.word	0x2e333620
    5838:	000a0d20 	.word	0x000a0d20
    583c:	3a372020 	.word	0x3a372020
    5840:	6e655320 	.word	0x6e655320
    5844:	78652064 	.word	0x78652064
    5848:	646e6574 	.word	0x646e6574
    584c:	6d206465 	.word	0x6d206465
    5850:	61737365 	.word	0x61737365
    5854:	77206567 	.word	0x77206567
    5858:	20687469 	.word	0x20687469
    585c:	203a4449 	.word	0x203a4449
    5860:	30317830 	.word	0x30317830
    5864:	30303030 	.word	0x30303030
    5868:	61203639 	.word	0x61203639
    586c:	3620646e 	.word	0x3620646e
    5870:	79622034 	.word	0x79622034
    5874:	64206574 	.word	0x64206574
    5878:	20617461 	.word	0x20617461
    587c:	20383231 	.word	0x20383231
    5880:	31206f74 	.word	0x31206f74
    5884:	202e3139 	.word	0x202e3139
    5888:	00000a0d 	.word	0x00000a0d
    588c:	3a612020 	.word	0x3a612020
    5890:	6e655320 	.word	0x6e655320
    5894:	6f6e2064 	.word	0x6f6e2064
    5898:	6c616d72 	.word	0x6c616d72
    589c:	61747320 	.word	0x61747320
    58a0:	7261646e 	.word	0x7261646e
    58a4:	656d2064 	.word	0x656d2064
    58a8:	67617373 	.word	0x67617373
    58ac:	69772065 	.word	0x69772065
    58b0:	49206874 	.word	0x49206874
    58b4:	30203a44 	.word	0x30203a44
    58b8:	41353478 	.word	0x41353478
    58bc:	646e6120 	.word	0x646e6120
    58c0:	62203820 	.word	0x62203820
    58c4:	20657479 	.word	0x20657479
    58c8:	61746164 	.word	0x61746164
    58cc:	74203020 	.word	0x74203020
    58d0:	2e37206f 	.word	0x2e37206f
    58d4:	000a0d20 	.word	0x000a0d20
    58d8:	682f2e2e 	.word	0x682f2e2e
    58dc:	732f6c61 	.word	0x732f6c61
    58e0:	682f6372 	.word	0x682f6372
    58e4:	635f6c61 	.word	0x635f6c61
    58e8:	615f6e61 	.word	0x615f6e61
    58ec:	636e7973 	.word	0x636e7973
    58f0:	0000632e 	.word	0x0000632e
    58f4:	682f2e2e 	.word	0x682f2e2e
    58f8:	732f6c61 	.word	0x732f6c61
    58fc:	682f6372 	.word	0x682f6372
    5900:	695f6c61 	.word	0x695f6c61
    5904:	6d5f6332 	.word	0x6d5f6332
    5908:	7973615f 	.word	0x7973615f
    590c:	632e636e 	.word	0x632e636e
    5910:	00000000 	.word	0x00000000
    5914:	682f2e2e 	.word	0x682f2e2e
    5918:	732f6c61 	.word	0x732f6c61
    591c:	682f6372 	.word	0x682f6372
    5920:	735f6c61 	.word	0x735f6c61
    5924:	6d5f6970 	.word	0x6d5f6970
    5928:	6e79735f 	.word	0x6e79735f
    592c:	00632e63 	.word	0x00632e63
    5930:	682f2e2e 	.word	0x682f2e2e
    5934:	732f6c61 	.word	0x732f6c61
    5938:	682f6372 	.word	0x682f6372
    593c:	745f6c61 	.word	0x745f6c61
    5940:	72656d69 	.word	0x72656d69
    5944:	0000632e 	.word	0x0000632e
    5948:	682f2e2e 	.word	0x682f2e2e
    594c:	752f6c61 	.word	0x752f6c61
    5950:	736c6974 	.word	0x736c6974
    5954:	6372732f 	.word	0x6372732f
    5958:	6974752f 	.word	0x6974752f
    595c:	6c5f736c 	.word	0x6c5f736c
    5960:	2e747369 	.word	0x2e747369
    5964:	00000063 	.word	0x00000063
    5968:	03020100 	.word	0x03020100
    596c:	07060504 	.word	0x07060504
    5970:	14100c08 	.word	0x14100c08
    5974:	40302018 	.word	0x40302018

00005978 <user_mux_confs>:
    5978:	00000100 00000000 00000000 00000000     ................
	...

000059bc <channel_confs>:
    59bc:	0000060c 00000000 00000000 00000000     ................
	...

000059fc <interrupt_cfg>:
	...
    5a7c:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
    5a8c:	632e6374 00000000 40003000 40003400     tc.c.....0.@.4.@
    5a9c:	41012000 41014000 43000000 43000400     . .A.@.A...C...C
    5aac:	43000800 43000c00                       ...C...C

00005ab4 <_i2cms>:
    5ab4:	00000001 00200014 00000100 00003635     ...... .....56..
    5ac4:	00d70000 00b71b00 00000005 00200014     .............. .
    5ad4:	00000100 00003635 00d70000 00b71b00     ....56..........

00005ae4 <sercomspi_regs>:
    5ae4:	0020000c 00020000 00000000 01ff0077     .. .........w...
    5af4:	20000c00 02000000 00000000 ff007700     ... .........w..
    5b04:	00000601 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    5b14:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..

00005b24 <_usb_ep_cfgs>:
    5b24:	20000808 00000000 00000040 200007c8     ... ....@...... 
    5b34:	00000000 00000040 20000788 00000000     ....@...... ....
    5b44:	00000040 752f2e2e 642f6273 63697665     @...../usb/devic
    5b54:	73752f65 2e636462 00000063              e/usbdc.c...

00005b60 <_global_impure_ptr>:
    5b60:	200000e0 33323130 37363534 62613938     ... 0123456789ab
    5b70:	66656463 6a696867 6e6d6c6b 7271706f     cdefghijklmnopqr
    5b80:	76757473 7a797877 00000000              stuvwxyz....

00005b8c <_init>:
    5b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5b8e:	bf00      	nop
    5b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5b92:	bc08      	pop	{r3}
    5b94:	469e      	mov	lr, r3
    5b96:	4770      	bx	lr

00005b98 <__init_array_start>:
    5b98:	000053a5 	.word	0x000053a5

00005b9c <__frame_dummy_init_array_entry>:
    5b9c:	00000289 000009a5                       ........

00005ba4 <_fini>:
    5ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5ba6:	bf00      	nop
    5ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5baa:	bc08      	pop	{r3}
    5bac:	469e      	mov	lr, r3
    5bae:	4770      	bx	lr

00005bb0 <__fini_array_start>:
    5bb0:	00000265 	.word	0x00000265
